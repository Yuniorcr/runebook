<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="spring_boot">
    <body>
      <group id="spring_boot">
        <trans-unit id="44ff7951f4b61b0602175a1f747998f49c47da5c" translate="yes" xml:space="preserve">
          <source>HTTP compression</source>
          <target state="translated">HTTP压缩</target>
        </trans-unit>
        <trans-unit id="4cf8c4860d175bf0cae9cec56dae12c68076963b" translate="yes" xml:space="preserve">
          <source>HTTP header used to transfer the shared secret.</source>
          <target state="translated">用于传输共享秘密的HTTP头。</target>
        </trans-unit>
        <trans-unit id="337ba610aa0d207b04a3d0c4fbe59b410042c4cf" translate="yes" xml:space="preserve">
          <source>HTTP method</source>
          <target state="translated">HTTP方法</target>
        </trans-unit>
        <trans-unit id="c2e40eff7c03fbf9aeb1aae826bbd68981ec0a3f" translate="yes" xml:space="preserve">
          <source>HTTP response compression is supported by Jetty, Tomcat, and Undertow. It can be enabled in &lt;code&gt;application.properties&lt;/code&gt;, as follows:</source>
          <target state="translated">Jetty，Tomcat和Undertow支持HTTP响应压缩。可以在 &lt;code&gt;application.properties&lt;/code&gt; 中启用它，如下所示：</target>
        </trans-unit>
        <trans-unit id="661ff786e3d1a6ece2dacb28144f2d85ff0a46af" translate="yes" xml:space="preserve">
          <source>Handles the property as if it were defined by the type defined by the mandatory &lt;code&gt;target&lt;/code&gt; parameter.</source>
          <target state="translated">处理属性，就好像它是由强制 &lt;code&gt;target&lt;/code&gt; 参数定义的类型定义的一样。</target>
        </trans-unit>
        <trans-unit id="24be66c7c8f86d2159b18c626a99245f9c1b513f" translate="yes" xml:space="preserve">
          <source>Hazelcast</source>
          <target state="translated">Hazelcast</target>
        </trans-unit>
        <trans-unit id="49eaad9928826d13cea8f3ffc6d06ad306869b6a" translate="yes" xml:space="preserve">
          <source>Header that holds the incoming protocol, usually named &quot;X-Forwarded-Proto&quot;.</source>
          <target state="translated">保存传入协议的头,通常命名为 &quot;X-Forwarded-Proto&quot;。</target>
        </trans-unit>
        <trans-unit id="87398e24ea58e8cafa77352da02409bcf395978d" translate="yes" xml:space="preserve">
          <source>Health checks</source>
          <target state="translated">健康检查</target>
        </trans-unit>
        <trans-unit id="8500fc3188d53ad050bf27cea56dd89c5658efbd" translate="yes" xml:space="preserve">
          <source>Health endpoint groups.</source>
          <target state="translated">健康终点组。</target>
        </trans-unit>
        <trans-unit id="596d7d1f11f7c47fc7491dfe0b05b8b72f9314fb" translate="yes" xml:space="preserve">
          <source>Health information is collected from the content of a &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthContributorRegistry.java&quot;&gt;&lt;code&gt;HealthContributorRegistry&lt;/code&gt;&lt;/a&gt; (by default all &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthContributor.java&quot;&gt;&lt;code&gt;HealthContributor&lt;/code&gt;&lt;/a&gt; instances defined in your &lt;code&gt;ApplicationContext&lt;/code&gt;). Spring Boot includes a number of auto-configured &lt;code&gt;HealthContributors&lt;/code&gt; and you can also write your own.</source>
          <target state="translated">运行状况信息是从&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthContributorRegistry.java&quot;&gt; &lt;code&gt;HealthContributorRegistry&lt;/code&gt; &lt;/a&gt;的内容（默认情况下，在 &lt;code&gt;ApplicationContext&lt;/code&gt; 中定义的所有&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthContributor.java&quot;&gt; &lt;code&gt;HealthContributor&lt;/code&gt; &lt;/a&gt;实例）中收集的。Spring Boot包括许多自动配置的 &lt;code&gt;HealthContributors&lt;/code&gt; ，您也可以编写自己的HealthContributor。</target>
        </trans-unit>
        <trans-unit id="315d2dafc56ff2334bc06e16f63df9bfacb60835" translate="yes" xml:space="preserve">
          <source>Heartbeat interval after which a message is sent on an idle connection to make sure it's still alive.</source>
          <target state="translated">心跳间隔,在此间隔之后,在空闲连接上发送消息,以确保它仍然活着。</target>
        </trans-unit>
        <trans-unit id="29b730ef03643872ba57b14304e6a23c419349bf" translate="yes" xml:space="preserve">
          <source>Height of the banner image in chars (default based on image height).</source>
          <target state="translated">横幅图像的高度,单位为chars(默认基于图像高度)。</target>
        </trans-unit>
        <trans-unit id="ccf701d1607873247d883078af966a3688a2c769" translate="yes" xml:space="preserve">
          <source>Here are some rules we follow internally to make sure descriptions are consistent:</source>
          <target state="translated">以下是我们内部遵循的一些规则,以确保描述的一致性。</target>
        </trans-unit>
        <trans-unit id="4d50f0d374cc20157b9a45ce37e45a1c973dd15a" translate="yes" xml:space="preserve">
          <source>Here is an example &lt;code&gt;scrape_config&lt;/code&gt; to add to &lt;code&gt;prometheus.yml&lt;/code&gt;:</source>
          <target state="translated">这是添加到 &lt;code&gt;prometheus.yml&lt;/code&gt; 的示例 &lt;code&gt;scrape_config&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="cb29a61f6a6947fc584b871dd1920356b17d203c" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how you can launch your jar with a &lt;code&gt;layertools&lt;/code&gt; jar mode:</source>
          <target state="translated">这是使用 &lt;code&gt;layertools&lt;/code&gt; jar模式启动jar的方法：</target>
        </trans-unit>
        <trans-unit id="355bfce20d63a6813688f51285c4f79c7295eb22" translate="yes" xml:space="preserve">
          <source>Heroku is another popular PaaS platform. To customize Heroku builds, you provide a &lt;code&gt;Procfile&lt;/code&gt;, which provides the incantation required to deploy an application. Heroku assigns a &lt;code&gt;port&lt;/code&gt; for the Java application to use and then ensures that routing to the external URI works.</source>
          <target state="translated">Heroku是另一个流行的PaaS平台。要自定义Heroku构建，您需要提供一个 &lt;code&gt;Procfile&lt;/code&gt; ，它提供了部署应用程序所需的内容。Heroku为Java应用程序分配了一个要使用的 &lt;code&gt;port&lt;/code&gt; ，然后确保可以路由到外部URI。</target>
        </trans-unit>
        <trans-unit id="2bc34cd4ba384991ba3b8f1bc179b424bf50b20f" translate="yes" xml:space="preserve">
          <source>Hibernate &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#caching&quot;&gt;second-level cache&lt;/a&gt; can be configured for a range of cache providers. Rather than configuring Hibernate to lookup the cache provider again, it is better to provide the one that is available in the context whenever possible.</source>
          <target state="translated">可以为一系列缓存提供程序配置Hibernate&lt;a href=&quot;https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#caching&quot;&gt;二级&lt;/a&gt;缓存。与其将Hibernate配置为再次查找缓存提供程序，不如提供尽可能在上下文中可用的缓存提供程序。</target>
        </trans-unit>
        <trans-unit id="a181cf6a9039631c2587fc38355848d7b79cca2d" translate="yes" xml:space="preserve">
          <source>Hibernate uses &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#naming&quot;&gt;two different naming strategies&lt;/a&gt; to map names from the object model to the corresponding database names. The fully qualified class name of the physical and the implicit strategy implementations can be configured by setting the &lt;code&gt;spring.jpa.hibernate.naming.physical-strategy&lt;/code&gt; and &lt;code&gt;spring.jpa.hibernate.naming.implicit-strategy&lt;/code&gt; properties, respectively. Alternatively, if &lt;code&gt;ImplicitNamingStrategy&lt;/code&gt; or &lt;code&gt;PhysicalNamingStrategy&lt;/code&gt; beans are available in the application context, Hibernate will be automatically configured to use them.</source>
          <target state="translated">Hibernate使用&lt;a href=&quot;https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#naming&quot;&gt;两种不同的命名策略&lt;/a&gt;将名称从对象模型映射到相应的数据库名称。可以分别通过设置 &lt;code&gt;spring.jpa.hibernate.naming.physical-strategy&lt;/code&gt; 和 &lt;code&gt;spring.jpa.hibernate.naming.implicit-strategy&lt;/code&gt; 属性来配置物理和隐式策略实现的标准类名。另外，如果在应用程序上下文中可以使用 &lt;code&gt;ImplicitNamingStrategy&lt;/code&gt; 或 &lt;code&gt;PhysicalNamingStrategy&lt;/code&gt; Bean，则Hibernate将自动配置为使用它们。</target>
        </trans-unit>
        <trans-unit id="76ead043c4f5e4a6c8350e2cb28a31dce6eb8daa" translate="yes" xml:space="preserve">
          <source>Hibernate&amp;rsquo;s own internal property name for this (if you happen to remember it better) is &lt;code&gt;hibernate.hbm2ddl.auto&lt;/code&gt;. You can set it, along with other Hibernate native properties, by using &lt;code&gt;spring.jpa.properties.*&lt;/code&gt; (the prefix is stripped before adding them to the entity manager). The following line shows an example of setting JPA properties for Hibernate:</source>
          <target state="translated">为此，Hibernate自己的内部属性名称是 &lt;code&gt;hibernate.hbm2ddl.auto&lt;/code&gt; 。您可以使用 &lt;code&gt;spring.jpa.properties.*&lt;/code&gt; （与前缀一起删除，然后将其添加到实体管理器中）来设置它以及其他Hibernate本机属性。下面的行显示了为Hibernate设置JPA属性的示例：</target>
        </trans-unit>
        <trans-unit id="a1f82f20e4fc1585b317e75ed0f68e82885488af" translate="yes" xml:space="preserve">
          <source>Hibernate: One of the most popular JPA implementations.</source>
          <target state="translated">Hibernate。最流行的JPA实现之一。</target>
        </trans-unit>
        <trans-unit id="9e71e47d2d815155a56506a29f7bda8edfbb34d4" translate="yes" xml:space="preserve">
          <source>Higher-level Database Migration Tool</source>
          <target state="translated">更高级别的数据库迁移工具</target>
        </trans-unit>
        <trans-unit id="95fb24e64e1399f996413354177eaa0550536f94" translate="yes" xml:space="preserve">
          <source>Hikari specific settings bound to an instance of Hikari's HikariDataSource</source>
          <target state="translated">绑定到Hikari的HikariDataSource实例的Hikari特定设置。</target>
        </trans-unit>
        <trans-unit id="00cf7740cdf83d3721f14869d591d404833fe572" translate="yes" xml:space="preserve">
          <source>Histogram type for backing DistributionSummary and Timer.</source>
          <target state="translated">直方图类型用于支持DistributionSummary和Timer。</target>
        </trans-unit>
        <trans-unit id="c169d8ac271f2f2073fc8bb6c6d71f06e30c9800" translate="yes" xml:space="preserve">
          <source>Homebrew installs &lt;code&gt;spring&lt;/code&gt; to &lt;code&gt;/usr/local/bin&lt;/code&gt;.</source>
          <target state="translated">Homebrew将 &lt;code&gt;spring&lt;/code&gt; 安装到 &lt;code&gt;/usr/local/bin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="04624eba7970e87b81262e69fc106496bc0a0e05" translate="yes" xml:space="preserve">
          <source>Hopefully, this section provided some of the Spring Boot basics and got you on your way to writing your own applications. If you are a task-oriented type of developer, you might want to jump over to &lt;a href=&quot;https://spring.io&quot;&gt;spring.io&lt;/a&gt; and check out some of the &lt;a href=&quot;https://spring.io/guides/&quot;&gt;getting started&lt;/a&gt; guides that solve specific &amp;ldquo;How do I do that with Spring?&amp;rdquo; problems. We also have Spring Boot-specific &amp;ldquo;&lt;a href=&quot;howto#howto&quot;&gt;How-to&lt;/a&gt;&amp;rdquo; reference documentation.</source>
          <target state="translated">希望本节提供了一些Spring Boot基础知识，并带您开始编写自己的应用程序。如果您是面向任务的开发人员，则可能要跳到&lt;a href=&quot;https://spring.io&quot;&gt;spring.io&lt;/a&gt;并查看一些解决特定&amp;ldquo;我如何使用Spring进行操作&amp;rdquo;的&lt;a href=&quot;https://spring.io/guides/&quot;&gt;入门&lt;/a&gt;指南。问题。我们也有特定&lt;a href=&quot;howto#howto&quot;&gt;于&lt;/a&gt;Spring Boot的&amp;ldquo;操作方法&amp;rdquo;参考文档。</target>
        </trans-unit>
        <trans-unit id="af39ed7a2558c1b59a6d125b79340958a311890a" translate="yes" xml:space="preserve">
          <source>Host of the Ganglia server to receive exported metrics.</source>
          <target state="translated">接收导出指标的Ganglia服务器主机。</target>
        </trans-unit>
        <trans-unit id="5aa7c97f2f944e28946e31adb06733a95316b400" translate="yes" xml:space="preserve">
          <source>Host of the Graphite server to receive exported metrics.</source>
          <target state="translated">接收导出指标的 Graphite 服务器的主机。</target>
        </trans-unit>
        <trans-unit id="6e83e1fa6695e05a0e832259308d61f6f8f9b960" translate="yes" xml:space="preserve">
          <source>Host of the StatsD server to receive exported metrics.</source>
          <target state="translated">StatsD服务器的主机,用于接收导出的指标。</target>
        </trans-unit>
        <trans-unit id="b0a65a5a882559d75807708d7bf346465bfa8b0d" translate="yes" xml:space="preserve">
          <source>Host portion of the URI</source>
          <target state="translated">URI的主机部分</target>
        </trans-unit>
        <trans-unit id="ae3b4b9defbce35415f26485ea5e16f2f0229698" translate="yes" xml:space="preserve">
          <source>Host to export metrics to.</source>
          <target state="translated">要导出指标的主机。</target>
        </trans-unit>
        <trans-unit id="79bdbcc9243c6f4e1dc1a040239794aaeda875e9" translate="yes" xml:space="preserve">
          <source>How long should normal shutdown (no-force) wait for transactions to complete.</source>
          <target state="translated">正常关机(不强制)应该等多长时间才能完成交易。</target>
        </trans-unit>
        <trans-unit id="e421535fe0f274df74fb73b41c7640faa4cde78d" translate="yes" xml:space="preserve">
          <source>How long the driver waits for a request to complete.</source>
          <target state="translated">司机等待请求完成的时间。</target>
        </trans-unit>
        <trans-unit id="d90f7b3e942d26ded4c39d6e8c728e21eb545eb1" translate="yes" xml:space="preserve">
          <source>How long the response from a pre-flight request can be cached by clients. If a duration suffix is not specified, seconds will be used.</source>
          <target state="translated">客户端可以缓存飞行前请求的响应多长时间。如果没有指定持续时间的后缀,将使用秒。</target>
        </trans-unit>
        <trans-unit id="4780a55bdff3de54313400a21225fa584cf504a3" translate="yes" xml:space="preserve">
          <source>How many copies of the data are stored in the cluster. Must be 1 for a single node instance.</source>
          <target state="translated">集群中存储了多少份数据。对于单节点实例,必须是1。</target>
        </trans-unit>
        <trans-unit id="bd96f56e99fe5f41b84504e0d312756c45d20ceb" translate="yes" xml:space="preserve">
          <source>How many rows will be retrieved simultaneously in a single network roundtrip.</source>
          <target state="translated">一次网络往返将同时检索多少行。</target>
        </trans-unit>
        <trans-unit id="74508e8c15563f72b76e4ef17908e1655c6e9ca3" translate="yes" xml:space="preserve">
          <source>How often gauges will be polled. When a gauge is polled, its value is recalculated and if the value has changed (or publishUnchangedMeters is true), it is sent to the StatsD server.</source>
          <target state="translated">仪表的轮询频率。当一个仪表被轮询时,它的值会被重新计算,如果值发生了变化(或者publishUnchangedMeters为真),它将被发送到StatsD服务器。</target>
        </trans-unit>
        <trans-unit id="58bb5c407fce884752be548ec7c1bb2d6675ed07" translate="yes" xml:space="preserve">
          <source>How often idle container events should be published.</source>
          <target state="translated">闲置容器事件应该多久发布一次。</target>
        </trans-unit>
        <trans-unit id="deaf37a6040088801d4e37b9e6a4af2488aa06c8" translate="yes" xml:space="preserve">
          <source>How often the throttler attempts to dequeue requests. Set this high enough that each attempt will process multiple entries in the queue, but not delay requests too much.</source>
          <target state="translated">节制器尝试去queue请求的频率。将此值设置为足够高,使每次尝试都能处理队列中的多个条目,但不会使请求延迟太多。</target>
        </trans-unit>
        <trans-unit id="862da9a3329dfb29cf7b08a3094cf07b853a1a06" translate="yes" xml:space="preserve">
          <source>How-to documents</source>
          <target state="translated">指南文件</target>
        </trans-unit>
        <trans-unit id="a844fc80443b81d7059a9967d94ff705ed43a444" translate="yes" xml:space="preserve">
          <source>However, there is a catch. Because the actual type of the connection pool is not exposed, no keys are generated in the metadata for your custom &lt;code&gt;DataSource&lt;/code&gt; and no completion is available in your IDE (because the &lt;code&gt;DataSource&lt;/code&gt; interface exposes no properties). Also, if you happen to have Hikari on the classpath, this basic setup does not work, because Hikari has no &lt;code&gt;url&lt;/code&gt; property (but does have a &lt;code&gt;jdbcUrl&lt;/code&gt; property). In that case, you must rewrite your configuration as follows:</source>
          <target state="translated">但是，有一个陷阱。由于未公开连接池的实际类型，因此在自定义 &lt;code&gt;DataSource&lt;/code&gt; 的元数据中不会生成任何键，并且在IDE中没有可用的完成操作（因为 &lt;code&gt;DataSource&lt;/code&gt; 接口未公开任何属性）。另外，如果您碰巧在类路径上有Hikari，则此基本设置将不起作用，因为Hikari没有 &lt;code&gt;url&lt;/code&gt; 属性（但确实具有 &lt;code&gt;jdbcUrl&lt;/code&gt; 属性）。在这种情况下，您必须按照以下方式重写配置：</target>
        </trans-unit>
        <trans-unit id="f9769a6ea7281f5b4c0e29fb9fa8354563aba9ca" translate="yes" xml:space="preserve">
          <source>Howto</source>
          <target state="translated">Howto</target>
        </trans-unit>
        <trans-unit id="f8efe190fdafbf842f6e5264a89351835b726caa" translate="yes" xml:space="preserve">
          <source>Humio</source>
          <target state="translated">Humio</target>
        </trans-unit>
        <trans-unit id="b727dd4633a379c5d0df43282c3bc2dcb521a076" translate="yes" xml:space="preserve">
          <source>Humio API token.</source>
          <target state="translated">Humio API令牌。</target>
        </trans-unit>
        <trans-unit id="ac34ca616fafed000de521e91c9ac77f6589b732" translate="yes" xml:space="preserve">
          <source>Humio tags describing the data source in which metrics will be stored. Humio tags are a distinct concept from Micrometer's tags. Micrometer's tags are used to divide metrics along dimensional boundaries.</source>
          <target state="translated">Humio标签,描述将存储指标的数据源。Humio标签与Micrometer标签的概念不同。Micrometer的标签用于按照尺寸边界划分度量。</target>
        </trans-unit>
        <trans-unit id="89f89c02cf47e091e726a4e07b88af0966806897" translate="yes" xml:space="preserve">
          <source>ID</source>
          <target state="translated">ID</target>
        </trans-unit>
        <trans-unit id="c69ef9a9ecdd1eac0327567218425c15a7777822" translate="yes" xml:space="preserve">
          <source>ID of the custom device that is exporting metrics to Dynatrace.</source>
          <target state="translated">将指标导出到Dynatrace的自定义设备的ID。</target>
        </trans-unit>
        <trans-unit id="7e1db88dcb14868a5bff454fe150befb53b1dec2" translate="yes" xml:space="preserve">
          <source>ID to pass to the server when making requests. Used for server-side logging.</source>
          <target state="translated">发出请求时传递给服务器的ID。用于服务器端的日志记录。</target>
        </trans-unit>
        <trans-unit id="6b4059c9b5820041f826f688b6e57c7201e42d5f" translate="yes" xml:space="preserve">
          <source>IDE</source>
          <target state="translated">IDE</target>
        </trans-unit>
        <trans-unit id="bd0ab5637e12341e8a24eec29800408c3e697562" translate="yes" xml:space="preserve">
          <source>IP: For complete details of Spring Data Solr, refer to the &lt;a href=&quot;https://docs.spring.io/spring-data/solr/docs/4.3.1/reference/html/&quot;&gt;reference documentation&lt;/a&gt;.</source>
          <target state="translated">IP：有关Spring Data Solr的完整详细信息，请参阅&lt;a href=&quot;https://docs.spring.io/spring-data/solr/docs/4.3.1/reference/html/&quot;&gt;参考文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f0c927d5854559edb015965655ab58fe061a3dbc" translate="yes" xml:space="preserve">
          <source>Ideally, your application, like a Spring Boot executable jar, has everything that it needs to run packaged within it.</source>
          <target state="translated">理想情况下,你的应用程序,就像一个Spring Boot可执行的jar一样,拥有它运行所需的一切。</target>
        </trans-unit>
        <trans-unit id="181f76d269990de98e38daa3a8269aaae742eb80" translate="yes" xml:space="preserve">
          <source>Identifier of the Google Cloud project to monitor.</source>
          <target state="translated">要监控的谷歌云项目的标识符。</target>
        </trans-unit>
        <trans-unit id="b5ee367e9047e15d32ac7efc665527825b33db91" translate="yes" xml:space="preserve">
          <source>Idle timeout before an idle connection is removed.</source>
          <target state="translated">移除空闲连接前的空闲超时。</target>
        </trans-unit>
        <trans-unit id="2919891a443d2c4e9b508a1f7a5ccaeda056f9f1" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://hazelcast.com/&quot;&gt;Hazelcast&lt;/a&gt; is on the classpath and a suitable configuration is found, Spring Boot auto-configures a &lt;code&gt;HazelcastInstance&lt;/code&gt; that you can inject in your application.</source>
          <target state="translated">如果&lt;a href=&quot;https://hazelcast.com/&quot;&gt;Hazelcast&lt;/a&gt;位于类路径上，并且找到了合适的配置，则Spring Boot会自动配置一个 &lt;code&gt;HazelcastInstance&lt;/code&gt; ，您可以将其注入到应用程序中。</target>
        </trans-unit>
        <trans-unit id="4d866136133f9a7eca15adee1389071ad2a11d70" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://redis.io/&quot;&gt;Redis&lt;/a&gt; is available and configured, a &lt;code&gt;RedisCacheManager&lt;/code&gt; is auto-configured. It is possible to create additional caches on startup by setting the &lt;code&gt;spring.cache.cache-names&lt;/code&gt; property and cache defaults can be configured by using &lt;code&gt;spring.cache.redis.*&lt;/code&gt; properties. For instance, the following configuration creates &lt;code&gt;cache1&lt;/code&gt; and &lt;code&gt;cache2&lt;/code&gt; caches with a &lt;em&gt;time to live&lt;/em&gt; of 10 minutes:</source>
          <target state="translated">如果&lt;a href=&quot;https://redis.io/&quot;&gt;Redis&lt;/a&gt;可用并已配置， &lt;code&gt;RedisCacheManager&lt;/code&gt; 自动配置RedisCacheManager。可以通过设置 &lt;code&gt;spring.cache.cache-names&lt;/code&gt; 属性在启动时创建其他缓存，并且可以使用 &lt;code&gt;spring.cache.redis.*&lt;/code&gt; 属性配置缓存默认值。例如，以下配置创建的 &lt;code&gt;cache1&lt;/code&gt; 和 &lt;code&gt;cache2&lt;/code&gt; 缓存的&lt;em&gt;生存时间为&lt;/em&gt;10分钟：</target>
        </trans-unit>
        <trans-unit id="3f175d730db9428179ec751c0157d4911a62c316" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://spring.io/projects/spring-security&quot;&gt;Spring Security&lt;/a&gt; is on the classpath, then web applications are secured by default. Spring Boot relies on Spring Security&amp;rsquo;s content-negotiation strategy to determine whether to use &lt;code&gt;httpBasic&lt;/code&gt; or &lt;code&gt;formLogin&lt;/code&gt;. To add method-level security to a web application, you can also add &lt;code&gt;@EnableGlobalMethodSecurity&lt;/code&gt; with your desired settings. Additional information can be found in the &lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.4.1/reference/html5/#jc-method&quot;&gt;Spring Security Reference Guide&lt;/a&gt;.</source>
          <target state="translated">如果&lt;a href=&quot;https://spring.io/projects/spring-security&quot;&gt;Spring Security&lt;/a&gt;在类路径上，则默认情况下Web应用程序是安全的。 Spring Boot依靠Spring Security的内容协商策略来确定使用 &lt;code&gt;httpBasic&lt;/code&gt; 还是 &lt;code&gt;formLogin&lt;/code&gt; 。要将方法级安全性添加到Web应用程序，您还可以使用所需的设置添加 &lt;code&gt;@EnableGlobalMethodSecurity&lt;/code&gt; 。可以在《&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.4.1/reference/html5/#jc-method&quot;&gt;Spring Security参考指南》中&lt;/a&gt;找到更多信息。</target>
        </trans-unit>
        <trans-unit id="c9021cebe9fe62d92b090dbc4b9131c1a61c23d4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans are registered via &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; instead of automatic scanning, the &lt;code&gt;@Profile&lt;/code&gt; annotation needs to be specified on the &lt;code&gt;@Configuration&lt;/code&gt; class that has the &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; annotation. In the case where &lt;code&gt;@ConfigurationProperties&lt;/code&gt; are scanned, &lt;code&gt;@Profile&lt;/code&gt; can be specified on the &lt;code&gt;@ConfigurationProperties&lt;/code&gt; class itself.</source>
          <target state="translated">如果 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; Bean是通过 &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; 而非自动扫描注册的，则需要在具有 &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; 批注的 &lt;code&gt;@Configuration&lt;/code&gt; 类上指定 &lt;code&gt;@Profile&lt;/code&gt; 批注。在扫描 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 的情况下，可以在 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 类本身上指定 &lt;code&gt;@Profile&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="da3bd32bf5a43f9c43eac7e0b5f7f52e5c2525d8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;spring-integration-rsocket&lt;/code&gt; is available, developers can configure an RSocket server using &lt;code&gt;&quot;spring.rsocket.server.*&quot;&lt;/code&gt; properties and let it use &lt;code&gt;IntegrationRSocketEndpoint&lt;/code&gt; or &lt;code&gt;RSocketOutboundGateway&lt;/code&gt; components to handle incoming RSocket messages. This infrastructure can handle Spring Integration RSocket channel adapters and &lt;code&gt;@MessageMapping&lt;/code&gt; handlers (given &lt;code&gt;&quot;spring.integration.rsocket.server.message-mapping-enabled&quot;&lt;/code&gt; is configured).</source>
          <target state="translated">如果可用 &lt;code&gt;spring-integration-rsocket&lt;/code&gt; ，则开发人员可以使用 &lt;code&gt;&quot;spring.rsocket.server.*&quot;&lt;/code&gt; 属性配置RSocket服务器，并使其使用 &lt;code&gt;IntegrationRSocketEndpoint&lt;/code&gt; 或 &lt;code&gt;RSocketOutboundGateway&lt;/code&gt; 组件来处理传入的RSocket消息。该基础结构可以处理Spring Integration RSocket通道适配器和 &lt;code&gt;@MessageMapping&lt;/code&gt; 处理程序（已配置 &lt;code&gt;&quot;spring.integration.rsocket.server.message-mapping-enabled&quot;&lt;/code&gt; spring.integration.rsocket.server.message -mapping-enabled&amp;rdquo;）。</target>
        </trans-unit>
        <trans-unit id="62a5e30d2b762b65e0ce638c3223a3ea1289dd38" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;spring.config.location&lt;/code&gt; contains directories (as opposed to files), they should end in &lt;code&gt;/&lt;/code&gt; (at runtime they will be appended with the names generated from &lt;code&gt;spring.config.name&lt;/code&gt; before being loaded). Files specified in &lt;code&gt;spring.config.location&lt;/code&gt; are used as-is. Whether specified directly or contained in a directory, configuration files must include a file extension in their name. Typical extensions that are supported out-of-the-box are &lt;code&gt;.properties&lt;/code&gt;, &lt;code&gt;.yaml&lt;/code&gt;, and &lt;code&gt;.yml&lt;/code&gt;.</source>
          <target state="translated">如果 &lt;code&gt;spring.config.location&lt;/code&gt; 包含目录（而不是文件），则它们应以 &lt;code&gt;/&lt;/code&gt; 结尾（在运行时，它们将被附加 &lt;code&gt;spring.config.name&lt;/code&gt; 生成的名称，然后再加载）。 &lt;code&gt;spring.config.location&lt;/code&gt; 中指定的文件按原样使用。无论是直接指定还是包含在目录中，配置文件都必须在名称中包含文件扩展名。开箱即用的典型扩展名是 &lt;code&gt;.properties&lt;/code&gt; ， &lt;code&gt;.yaml&lt;/code&gt; 和 &lt;code&gt;.yml&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="055532dd2f7fdcbfea087df7f8a7c6fd18713fa4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;spring.data.mongodb.port&lt;/code&gt; is not specified, the default of &lt;code&gt;27017&lt;/code&gt; is used. You could delete this line from the example shown earlier.</source>
          <target state="translated">如果未指定 &lt;code&gt;spring.data.mongodb.port&lt;/code&gt; ，则使用默认值 &lt;code&gt;27017&lt;/code&gt; 。您可以从前面显示的示例中删除此行。</target>
        </trans-unit>
        <trans-unit id="8a4ff2f22f2ba74abc300770ec7039e88b0f01d8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;spring.mail.host&lt;/code&gt; and the relevant libraries (as defined by &lt;code&gt;spring-boot-starter-mail&lt;/code&gt;) are available, a default &lt;code&gt;JavaMailSender&lt;/code&gt; is created if none exists. The sender can be further customized by configuration items from the &lt;code&gt;spring.mail&lt;/code&gt; namespace. See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java&quot;&gt;&lt;code&gt;MailProperties&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">如果 &lt;code&gt;spring.mail.host&lt;/code&gt; 和相关的库（由 &lt;code&gt;spring-boot-starter-mail&lt;/code&gt; 定义）可用，那么如果不存在默认的 &lt;code&gt;JavaMailSender&lt;/code&gt; ,则会创建一个默认的JavaMailSender。可以通过 &lt;code&gt;spring.mail&lt;/code&gt; 命名空间中的配置项进一步自定义发件人。有关更多详细信息，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java&quot;&gt; &lt;code&gt;MailProperties&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7793f01b6ff762855d1a7c363377331643282fff" translate="yes" xml:space="preserve">
          <source>If Groovy is on the classpath, you should be able to configure Logback with &lt;code&gt;logback.groovy&lt;/code&gt; as well. If present, this setting is given preference.</source>
          <target state="translated">如果Groovy在类路径中，则还应该能够使用 &lt;code&gt;logback.groovy&lt;/code&gt; 配置Logback 。如果存在，则优先考虑此设置。</target>
        </trans-unit>
        <trans-unit id="69c3c8c2fbb72d838a7fd9cdec686b150abda825" translate="yes" xml:space="preserve">
          <source>If Jackson&amp;rsquo;s XML extension is not available and JAXB is available, XML can be rendered with the additional requirement of having &lt;code&gt;MyThing&lt;/code&gt; annotated as &lt;code&gt;@XmlRootElement&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">如果Jackson的XML扩展名不可用，而JAXB可用，则可以将XML呈现为附加要求，即必须将 &lt;code&gt;MyThing&lt;/code&gt; 注释为 &lt;code&gt;@XmlRootElement&lt;/code&gt; ，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="b60f2ca05b8eadaca131fa170fdaab4284a9a5a7" translate="yes" xml:space="preserve">
          <source>If Spring Data Couchbase is available and Couchbase is &lt;a href=&quot;#boot-features-couchbase&quot;&gt;configured&lt;/a&gt;, a &lt;code&gt;CouchbaseCacheManager&lt;/code&gt; is auto-configured. It is possible to create additional caches on startup by setting the &lt;code&gt;spring.cache.cache-names&lt;/code&gt; property and cache defaults can be configured by using &lt;code&gt;spring.cache.couchbase.*&lt;/code&gt; properties. For instance, the following configuration creates &lt;code&gt;cache1&lt;/code&gt; and &lt;code&gt;cache2&lt;/code&gt; caches with an entry &lt;em&gt;expiration&lt;/em&gt; of 10 minutes:</source>
          <target state="translated">如果春数据Couchbase可用，Couchbase的&lt;a href=&quot;#boot-features-couchbase&quot;&gt;配置&lt;/a&gt;，一 &lt;code&gt;CouchbaseCacheManager&lt;/code&gt; 是自动配置。可以通过设置 &lt;code&gt;spring.cache.cache-names&lt;/code&gt; 属性在启动时创建其他缓存，并且可以使用 &lt;code&gt;spring.cache.couchbase.*&lt;/code&gt; 属性配置缓存默认值。例如，以下配置创建条目&lt;em&gt;过期&lt;/em&gt;为10分钟的 &lt;code&gt;cache1&lt;/code&gt; 和 &lt;code&gt;cache2&lt;/code&gt; 缓存：&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cda4bc39ef6af2c1d095920e8ca6745d66eb7b37" translate="yes" xml:space="preserve">
          <source>If Spring MVC is available, a regular MVC-based application context is configured. If you have only Spring WebFlux, we&amp;rsquo;ll detect that and configure a WebFlux-based application context instead.</source>
          <target state="translated">如果Spring MVC可用，则配置基于常规MVC的应用程序上下文。如果您只有Spring WebFlux，我们将检测到该情况并配置基于WebFlux的应用程序上下文。</target>
        </trans-unit>
        <trans-unit id="ee4714334e20fa48cd5ae94d1b0ec04aa1c7f393" translate="yes" xml:space="preserve">
          <source>If Spring MVC is not present and Spring WebFlux is present, an &lt;code&gt;AnnotationConfigReactiveWebServerApplicationContext&lt;/code&gt; is used</source>
          <target state="translated">如果不存在Spring MVC而存在Spring WebFlux，则使用 &lt;code&gt;AnnotationConfigReactiveWebServerApplicationContext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="619eb24c8bf18bdcc52fc06bf3ba0915ea5bf972" translate="yes" xml:space="preserve">
          <source>If Spring MVC is present, an &lt;code&gt;AnnotationConfigServletWebServerApplicationContext&lt;/code&gt; is used</source>
          <target state="translated">如果存在Spring MVC，则使用 &lt;code&gt;AnnotationConfigServletWebServerApplicationContext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4e30deb11333729ab78370b1fad40f86a51171b6" translate="yes" xml:space="preserve">
          <source>If Spring Security is on the classpath and no other &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; or &lt;code&gt;SecurityFilterChain&lt;/code&gt; bean is present, all actuators other than &lt;code&gt;/health&lt;/code&gt; and &lt;code&gt;/info&lt;/code&gt; are secured by Spring Boot auto-configuration. If you define a custom &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; or &lt;code&gt;SecurityFilterChain&lt;/code&gt; bean, Spring Boot auto-configuration will back off and you will be in full control of actuator access rules.</source>
          <target state="translated">如果春季安全是在类路径上，没有其他 &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; 或 &lt;code&gt;SecurityFilterChain&lt;/code&gt; 豆存在，所有的执行机构比其它 &lt;code&gt;/health&lt;/code&gt; 和 &lt;code&gt;/info&lt;/code&gt; 是由弹簧启动自动配置安全。如果您定义了一个自定义 &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; 或 &lt;code&gt;SecurityFilterChain&lt;/code&gt; bean，Spring Boot自动配置将退出，您将完全控制执行器访问规则。</target>
        </trans-unit>
        <trans-unit id="c158f079e0aa6ed3abee93c691129ae9bf5683f7" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;@WriteOperation&lt;/code&gt; or &lt;code&gt;@DeleteOperation&lt;/code&gt; returns a value, the response status will be 200 (OK). If it does not return a value the response status will be 204 (No Content).</source>
          <target state="translated">如果 &lt;code&gt;@WriteOperation&lt;/code&gt; 或 &lt;code&gt;@DeleteOperation&lt;/code&gt; 返回一个值，则响应状态将为200（确定）。如果未返回值，则响应状态将为204（无内容）。</target>
        </trans-unit>
        <trans-unit id="555dbbdcea4508877a5ac6e4ef100f4cafe8e9d4" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;BuildProperties&lt;/code&gt; bean is available, the &lt;code&gt;info&lt;/code&gt; endpoint can also publish information about your build. This happens if a &lt;code&gt;META-INF/build-info.properties&lt;/code&gt; file is available in the classpath.</source>
          <target state="translated">如果有 &lt;code&gt;BuildProperties&lt;/code&gt; Bean，则 &lt;code&gt;info&lt;/code&gt; 端点也可以发布有关您的构建的信息。如果在类路径中有 &lt;code&gt;META-INF/build-info.properties&lt;/code&gt; 文件，则会发生这种情况。</target>
        </trans-unit>
        <trans-unit id="878b1828167ebf0ddb2fb8ccb58e8fa9f50561e3" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;ConnectionNameStrategy&lt;/code&gt; bean exists in the context, it will be automatically used to name connections created by the auto-configured &lt;code&gt;ConnectionFactory&lt;/code&gt;. See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java&quot;&gt;&lt;code&gt;RabbitProperties&lt;/code&gt;&lt;/a&gt; for more of the supported options.</source>
          <target state="translated">如果上下文中存在 &lt;code&gt;ConnectionNameStrategy&lt;/code&gt; bean，它将自动用于命名由自动配置的 &lt;code&gt;ConnectionFactory&lt;/code&gt; 创建的连接。有关更多受支持的选项，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java&quot;&gt; &lt;code&gt;RabbitProperties&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b64547907637d27e39766be3337c0bacb2c6362a" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;KafkaTransactionManager&lt;/code&gt; bean is defined, it is automatically associated to the container factory. Similarly, if a &lt;code&gt;RecordFilterStrategy&lt;/code&gt;, &lt;code&gt;ErrorHandler&lt;/code&gt;, &lt;code&gt;AfterRollbackProcessor&lt;/code&gt; or &lt;code&gt;ConsumerAwareRebalanceListener&lt;/code&gt; bean is defined, it is automatically associated to the default factory.</source>
          <target state="translated">如果定义了 &lt;code&gt;KafkaTransactionManager&lt;/code&gt; bean，它将自动与容器工厂关联。同样，如果定义了 &lt;code&gt;RecordFilterStrategy&lt;/code&gt; ， &lt;code&gt;ErrorHandler&lt;/code&gt; ， &lt;code&gt;AfterRollbackProcessor&lt;/code&gt; 或 &lt;code&gt;ConsumerAwareRebalanceListener&lt;/code&gt; Bean，它将自动与默认工厂关联。</target>
        </trans-unit>
        <trans-unit id="1a4c5233b593adbfb2e06eb911c62d5d5db69fe1" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;com.github.benmanes.caffeine.cache.CacheLoader&lt;/code&gt; bean is defined, it is automatically associated to the &lt;code&gt;CaffeineCacheManager&lt;/code&gt;. Since the &lt;code&gt;CacheLoader&lt;/code&gt; is going to be associated with &lt;em&gt;all&lt;/em&gt; caches managed by the cache manager, it must be defined as &lt;code&gt;CacheLoader&amp;lt;Object, Object&amp;gt;&lt;/code&gt;. The auto-configuration ignores any other generic type.</source>
          <target state="translated">如果定义了 &lt;code&gt;com.github.benmanes.caffeine.cache.CacheLoader&lt;/code&gt; bean，它将自动与 &lt;code&gt;CaffeineCacheManager&lt;/code&gt; 关联。由于 &lt;code&gt;CacheLoader&lt;/code&gt; 将与由缓存管理器管理的&lt;em&gt;所有&lt;/em&gt;缓存相关联，因此必须将其定义为 &lt;code&gt;CacheLoader&amp;lt;Object, Object&amp;gt;&lt;/code&gt; 。自动配置将忽略任何其他通用类型。</target>
        </trans-unit>
        <trans-unit id="1c150e197562ad976c7b1d18532d63ebbb290652" translate="yes" xml:space="preserve">
          <source>If a bean has one constructor, you can omit the &lt;code&gt;@Autowired&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">如果bean具有一个构造函数，则可以省略 &lt;code&gt;@Autowired&lt;/code&gt; ，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="b70ccb45d93affcfbec9393d988edffc7e838e8d" translate="yes" xml:space="preserve">
          <source>If a client can&amp;rsquo;t be created, Spring Boot attempts to configure an embedded server. If you define a &lt;code&gt;com.hazelcast.config.Config&lt;/code&gt; bean, Spring Boot uses that. If your configuration defines an instance name, Spring Boot tries to locate an existing instance rather than creating a new one.</source>
          <target state="translated">如果无法创建客户端，Spring Boot会尝试配置嵌入式服务器。如果定义 &lt;code&gt;com.hazelcast.config.Config&lt;/code&gt; bean，Spring Boot会使用它。如果您的配置定义了一个实例名称，Spring Boot会尝试查找一个现有实例，而不是创建一个新实例。</target>
        </trans-unit>
        <trans-unit id="28b05fb4690d622467833aaef015d62a67d286e5" translate="yes" xml:space="preserve">
          <source>If a config file location includes the &lt;code&gt;*&lt;/code&gt; character for the last path segment, it is considered a wildcard location. Wildcards are expanded when the config is loaded so that immediate subdirectories are also checked. Wildcard locations are particularly useful in an environment such as Kubernetes when there are multiple sources of config properties.</source>
          <target state="translated">如果配置文件位置的最后一个路径段包含 &lt;code&gt;*&lt;/code&gt; 字符，则将其视为通配符位置。加载配置时，通配符将被展开，以便也检查直接子目录。当配置属性有多个来源时，通配符位置在诸如Kubernetes之类的环境中特别有用。</target>
        </trans-unit>
        <trans-unit id="ca371e7a87a435914e68adfbf38f285e4ceb1edf" translate="yes" xml:space="preserve">
          <source>If a document contains a &lt;code&gt;spring.config.activate.on-profile&lt;/code&gt; key, then the profiles value (a comma-separated list of profiles or a profile expression) is fed into the Spring &lt;code&gt;Environment.acceptsProfiles()&lt;/code&gt; method. If the profile expression matches then that document is included in the final merge (otherwise, it is not), as shown in the following example:</source>
          <target state="translated">如果文档包含 &lt;code&gt;spring.config.activate.on-profile&lt;/code&gt; 键，那么配置文件值（以逗号分隔的配置文件列表或配置文件表达式）将被馈送到Spring &lt;code&gt;Environment.acceptsProfiles()&lt;/code&gt; 方法中。如果配置文件表达式匹配，则该文档将包含在最终合并中（否则，则不包括），如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="31e8b0e1cad689d2003cc59e08a65964b543a28c" translate="yes" xml:space="preserve">
          <source>If a single Spring Session module is present on the classpath, Spring Boot uses that store implementation automatically. If you have more than one implementation, you must choose the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/StoreType.java&quot;&gt;&lt;code&gt;StoreType&lt;/code&gt;&lt;/a&gt; that you wish to use to store the sessions. For instance, to use JDBC as the back-end store, you can configure your application as follows:</source>
          <target state="translated">如果类路径上存在单个Spring Session模块，则Spring Boot会自动使用该存储实现。如果您有多个实现，则必须选择要用于存储会话的&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/StoreType.java&quot;&gt; &lt;code&gt;StoreType&lt;/code&gt; &lt;/a&gt;。例如，要将JDBC用作后端存储，可以按以下方式配置应用程序：</target>
        </trans-unit>
        <trans-unit id="2d733a3935c451dcd567ee182f2f665f9f4868a8" translate="yes" xml:space="preserve">
          <source>If a standard &lt;code&gt;javax.cache.CacheManager&lt;/code&gt; bean is defined, it is wrapped automatically in an &lt;code&gt;org.springframework.cache.CacheManager&lt;/code&gt; implementation that the abstraction expects. No further customization is applied to it.</source>
          <target state="translated">如果定义了标准的 &lt;code&gt;javax.cache.CacheManager&lt;/code&gt; bean，它将自动包装在抽象期望的 &lt;code&gt;org.springframework.cache.CacheManager&lt;/code&gt; 实现中。不会对其应用进一步的自定义。</target>
        </trans-unit>
        <trans-unit id="3c32cd7f1339339f8b10bde2ae860ae735494c5d" translate="yes" xml:space="preserve">
          <source>If all instances of an application are unready, a Kubernetes Service with &lt;code&gt;type=ClusterIP&lt;/code&gt; or &lt;code&gt;NodePort&lt;/code&gt; will not accept any incoming connections. There is no HTTP error response (503 etc.) since there is no connection. A Service with &lt;code&gt;type=LoadBalancer&lt;/code&gt; might or might not accept connections, depending on the provider. A Service that has an explicit &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/ingress/&quot;&gt;Ingress&lt;/a&gt; will also respond in a way that depends on the implementation - the ingress service itself will have to decide how to handle the &quot;connection refused&quot; from downstream. HTTP 503 is quite likely in the case of both load balancer and ingress.</source>
          <target state="translated">如果应用程序的所有实例尚未就绪，则 &lt;code&gt;type=ClusterIP&lt;/code&gt; 或 &lt;code&gt;NodePort&lt;/code&gt; 的Kubernetes服务将不接受任何传入连接。由于没有连接，因此没有HTTP错误响应（503等）。 &lt;code&gt;type=LoadBalancer&lt;/code&gt; 的服务可能会或可能不会接受连接，具体取决于提供程序。具有显式&lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/ingress/&quot;&gt;Ingress的&lt;/a&gt;Service还将以依赖于实现的方式进行响应-Ingress Service本身必须决定如何处理下游的&amp;ldquo;拒绝连接&amp;rdquo;。对于负载均衡器和入口都非常可能使用HTTP 503。</target>
        </trans-unit>
        <trans-unit id="e84d3ddbeb08a38897b54a296ceea297508afe72" translate="yes" xml:space="preserve">
          <source>If an application takes longer to start than the configured liveness period, Kubernetes mention the &lt;code&gt;&quot;startupProbe&quot;&lt;/code&gt; as a possible solution. The &lt;code&gt;&quot;startupProbe&quot;&lt;/code&gt; is not necessarily needed here as the &lt;code&gt;&quot;readinessProbe&quot;&lt;/code&gt; fails until all startup tasks are done, see &lt;a href=&quot;#production-ready-kubernetes-probes-lifecycle&quot;&gt;how Probes behave during the application lifecycle&lt;/a&gt;.</source>
          <target state="translated">如果应用程序的启动时间比配置的激活时间长，Kubernetes会提到 &lt;code&gt;&quot;startupProbe&quot;&lt;/code&gt; 作为可能的解决方案。该 &lt;code&gt;&quot;startupProbe&quot;&lt;/code&gt; 不一定需要在这里作为 &lt;code&gt;&quot;readinessProbe&quot;&lt;/code&gt; 失败，直到所有的启动任务都做了，看到&lt;a href=&quot;#production-ready-kubernetes-probes-lifecycle&quot;&gt;应用程序生命周期过程中如何探头的行为&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="743cf84474cf0b6de0ab18e5b8e2167c4306a055" translate="yes" xml:space="preserve">
          <source>If an operation is invoked without a required parameter, or with a parameter that cannot be converted to the required type, the operation method will not be called and the response status will be 400 (Bad Request).</source>
          <target state="translated">如果调用操作时没有所需的参数,或者参数不能转换为所需的类型,操作方法将不会被调用,响应状态为400(坏请求)。</target>
        </trans-unit>
        <trans-unit id="a5c35b8fc8bfc24ca6b51d0da8f0abf0e6685026" translate="yes" xml:space="preserve">
          <source>If at all possible, you should consider updating your code to only store values compliant with later Cookie specifications. If, however, you cannot change the way that cookies are written, you can instead configure Tomcat to use a &lt;code&gt;LegacyCookieProcessor&lt;/code&gt;. To switch to the &lt;code&gt;LegacyCookieProcessor&lt;/code&gt;, use an &lt;code&gt;WebServerFactoryCustomizer&lt;/code&gt; bean that adds a &lt;code&gt;TomcatContextCustomizer&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">如果可能的话，您应该考虑将代码更新为仅存储符合以后Cookie规范的值。但是，如果您无法更改cookie的编写方式，则可以将Tomcat配置为使用 &lt;code&gt;LegacyCookieProcessor&lt;/code&gt; 。要切换到 &lt;code&gt;LegacyCookieProcessor&lt;/code&gt; ，请使用添加了 &lt;code&gt;TomcatContextCustomizer&lt;/code&gt; 的 &lt;code&gt;WebServerFactoryCustomizer&lt;/code&gt; bean ，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="dfd04cb565791f36a9b8f4644fba284149fdeb5f" translate="yes" xml:space="preserve">
          <source>If both are present, Spring MVC takes precedence. If you want to test a reactive web application in this scenario, you must set the &lt;code&gt;spring.main.web-application-type&lt;/code&gt; property:</source>
          <target state="translated">如果两者都存在，则Spring MVC优先。如果要在这种情况下测试反应式Web应用程序，则必须设置 &lt;code&gt;spring.main.web-application-type&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="a40d6d0257723db2d483d85b4439588aaedd16c0" translate="yes" xml:space="preserve">
          <source>If convention-based mapping is not flexible enough, you can use the &lt;code&gt;ServletRegistrationBean&lt;/code&gt;, &lt;code&gt;FilterRegistrationBean&lt;/code&gt;, and &lt;code&gt;ServletListenerRegistrationBean&lt;/code&gt; classes for complete control.</source>
          <target state="translated">如果基于约定的映射不够灵活，则可以使用 &lt;code&gt;ServletRegistrationBean&lt;/code&gt; ， &lt;code&gt;FilterRegistrationBean&lt;/code&gt; 和 &lt;code&gt;ServletListenerRegistrationBean&lt;/code&gt; 类进行完全控制。</target>
        </trans-unit>
        <trans-unit id="f87f18e085c311d14dafad53c5a708f4a1dbbfca" translate="yes" xml:space="preserve">
          <source>If defined, it is used in the default log configuration.</source>
          <target state="translated">如果定义了,则在默认的日志配置中使用。</target>
        </trans-unit>
        <trans-unit id="dde9e66690fb1adca981c303295caf5fb1cba249" translate="yes" xml:space="preserve">
          <source>If devtools configuration files are not found in &lt;code&gt;$HOME/.config/spring-boot&lt;/code&gt;, the root of the &lt;code&gt;$HOME&lt;/code&gt; directory is searched for the presence of a &lt;code&gt;.spring-boot-devtools.properties&lt;/code&gt; file. This allows you to share the devtools global configuration with applications that are on an older version of Spring Boot that does not support the &lt;code&gt;$HOME/.config/spring-boot&lt;/code&gt; location.</source>
          <target state="translated">如果在 &lt;code&gt;$HOME/.config/spring-boot&lt;/code&gt; 找不到devtools配置文件，则在 &lt;code&gt;$HOME&lt;/code&gt; 目录的根目录中搜索是否存在 &lt;code&gt;.spring-boot-devtools.properties&lt;/code&gt; 文件。这使您可以与不支持 &lt;code&gt;$HOME/.config/spring-boot&lt;/code&gt; 位置的较旧版本的Spring Boot上的应用程序共享devtools全局配置。</target>
        </trans-unit>
        <trans-unit id="c116a8b3d27a9f9f4c840fa3b2698df0fee5942e" translate="yes" xml:space="preserve">
          <source>If enabled, &lt;a href=&quot;spring-boot-features#boot-features-graceful-shutdown&quot;&gt;graceful shutdown processes in-flight requests&lt;/a&gt;.</source>
          <target state="translated">如果启用，则&lt;a href=&quot;spring-boot-features#boot-features-graceful-shutdown&quot;&gt;正常关闭会处理进行中的请求&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="619dcb98edbc2a3f73e8a69de3569a49c392f1d0" translate="yes" xml:space="preserve">
          <source>If log archive cleanup should occur when the application starts.</source>
          <target state="translated">如果应用程序启动时应进行日志存档清理。</target>
        </trans-unit>
        <trans-unit id="1403c8e2694d75b858e07fce63be63be2778cd10" translate="yes" xml:space="preserve">
          <source>If multiple auto-configurations have to be defined, there is no need to order their declarations as they are invoked in the exact same order as when running the application.</source>
          <target state="translated">如果必须定义多个自动配置,则无需对它们的声明进行排序,因为它们的调用顺序与运行应用程序时完全相同。</target>
        </trans-unit>
        <trans-unit id="53a789f03daaa167b3db0efcc41e88fc845ffb0b" translate="yes" xml:space="preserve">
          <source>If multiple values can be provided, use a &lt;code&gt;Collection&lt;/code&gt; or &lt;em&gt;Array&lt;/em&gt; type to teach the IDE about it.</source>
          <target state="translated">如果可以提供多个值，请使用 &lt;code&gt;Collection&lt;/code&gt; 或&lt;em&gt;Array&lt;/em&gt;类型向IDE讲解。</target>
        </trans-unit>
        <trans-unit id="75c2ac629f2a89814af98aab20161f20852eca85" translate="yes" xml:space="preserve">
          <source>If necessary, any &lt;code&gt;org.springframework.amqp.core.Queue&lt;/code&gt; that is defined as a bean is automatically used to declare a corresponding queue on the RabbitMQ instance.</source>
          <target state="translated">如有必要，任何定义为bean的 &lt;code&gt;org.springframework.amqp.core.Queue&lt;/code&gt; 都会自动用于在RabbitMQ实例上声明相应的队列。</target>
        </trans-unit>
        <trans-unit id="0e006d87059067b0ef9a1b4edec92a4712010b71" translate="yes" xml:space="preserve">
          <source>If necessary, reactive indicators replace the regular ones. Also, any &lt;code&gt;HealthIndicator&lt;/code&gt; that is not handled explicitly is wrapped automatically.</source>
          <target state="translated">如有必要，可用无功指示器代替常规指示器。另外，任何未明确处理的 &lt;code&gt;HealthIndicator&lt;/code&gt; 都会自动包装。</target>
        </trans-unit>
        <trans-unit id="46311796bca2f2ccb4c1ddf4f64e8fd0d2f8979c" translate="yes" xml:space="preserve">
          <source>If nested POJO properties are initialized (like the &lt;code&gt;Security&lt;/code&gt; field in the preceding example), a setter is not required. If you want the binder to create the instance on the fly by using its default constructor, you need a setter.</source>
          <target state="translated">如果初始化了嵌套的POJO属性（如前面示例中的 &lt;code&gt;Security&lt;/code&gt; 字段），则不需要setter。如果希望活页夹通过使用其默认构造函数动态创建实例，则需要一个setter。</target>
        </trans-unit>
        <trans-unit id="5be4cfc9c072504c1c67b465cc564ac579428d03" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;dispatcherType&lt;/code&gt; is specified on a filter registration, &lt;code&gt;REQUEST&lt;/code&gt; is used. This aligns with the Servlet Specification&amp;rsquo;s default dispatcher type.</source>
          <target state="translated">如果在筛选器注册上未指定 &lt;code&gt;dispatcherType&lt;/code&gt; ，则使用 &lt;code&gt;REQUEST&lt;/code&gt; 。这与Servlet规范的默认调度程序类型一致。</target>
        </trans-unit>
        <trans-unit id="d90ef7677b566e5953fa5db1fd1487642a281697" translate="yes" xml:space="preserve">
          <source>If no failure analyzers are able to handle the exception, you can still display the full conditions report to better understand what went wrong. To do so, you need to &lt;a href=&quot;#boot-features-external-config&quot;&gt;enable the &lt;code&gt;debug&lt;/code&gt; property&lt;/a&gt; or &lt;a href=&quot;#boot-features-custom-log-levels&quot;&gt;enable &lt;code&gt;DEBUG&lt;/code&gt; logging&lt;/a&gt; for &lt;code&gt;org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener&lt;/code&gt;.</source>
          <target state="translated">如果没有故障分析器能够处理该异常，则您仍然可以显示完整情况报告，以更好地了解出了什么问题。为此，您需要为 &lt;code&gt;org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener&lt;/code&gt; &lt;a href=&quot;#boot-features-external-config&quot;&gt;启用 &lt;code&gt;debug&lt;/code&gt; 属性&lt;/a&gt;或&lt;a href=&quot;#boot-features-custom-log-levels&quot;&gt;启用 &lt;code&gt;DEBUG&lt;/code&gt; 日志记录&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="50eb1241f36f7ccf6c772d161c0fef9c47a50847" translate="yes" xml:space="preserve">
          <source>If none of HikariCP, Tomcat, and DBCP2 are available and if Oracle UCP is available, we use it.</source>
          <target state="translated">如果HikariCP、Tomcat、DBCP2都不可用,如果Oracle UCP可用,我们就用它。</target>
        </trans-unit>
        <trans-unit id="da7f3774dc12cee8bed8221a818ea637f2104713" translate="yes" xml:space="preserve">
          <source>If none of the other providers can be found, a simple implementation using a &lt;code&gt;ConcurrentHashMap&lt;/code&gt; as the cache store is configured. This is the default if no caching library is present in your application. By default, caches are created as needed, but you can restrict the list of available caches by setting the &lt;code&gt;cache-names&lt;/code&gt; property. For instance, if you want only &lt;code&gt;cache1&lt;/code&gt; and &lt;code&gt;cache2&lt;/code&gt; caches, set the &lt;code&gt;cache-names&lt;/code&gt; property as follows:</source>
          <target state="translated">如果找不到其他提供程序，则配置一个使用 &lt;code&gt;ConcurrentHashMap&lt;/code&gt; 作为缓存存储区的简单实现。如果您的应用程序中不存在任何缓存库，则这是默认设置。默认情况下，将根据需要创建缓存，但是您可以通过设置 &lt;code&gt;cache-names&lt;/code&gt; 属性来限制可用缓存的列表。例如，如果只需要 &lt;code&gt;cache1&lt;/code&gt; 和 &lt;code&gt;cache2&lt;/code&gt; 高速缓存，请按如下所示设置 &lt;code&gt;cache-names&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="73f2d43cd50b086f992a9982fcf6e1582796d1fc" translate="yes" xml:space="preserve">
          <source>If not empty, sets the &lt;code&gt;-x&lt;/code&gt; flag on the shell process, allowing you to see the logic in the script.</source>
          <target state="translated">如果不为空，请在shell进程中设置 &lt;code&gt;-x&lt;/code&gt; 标志，以使您可以查看脚本中的逻辑。</target>
        </trans-unit>
        <trans-unit id="ac0dc36af4124ecf4cd68eb48849ad48e9edc5b1" translate="yes" xml:space="preserve">
          <source>If possible, JSPs should be avoided. There are several &lt;a href=&quot;#boot-features-jsp-limitations&quot;&gt;known limitations&lt;/a&gt; when using them with embedded servlet containers.</source>
          <target state="translated">如果可能，应避免使用JSP。将它们与嵌入式Servlet容器一起使用时，存在几个&lt;a href=&quot;#boot-features-jsp-limitations&quot;&gt;已知的限制&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3c1b1df07d8b8ff59653d1a085d7c3fba396909a" translate="yes" xml:space="preserve">
          <source>If publishing metrics to a Wavefront proxy (as described in &lt;a href=&quot;https://docs.wavefront.com/proxies_installing.html&quot;&gt;the documentation&lt;/a&gt;), the host must be in the &lt;code&gt;proxy://HOST:PORT&lt;/code&gt; format.</source>
          <target state="translated">如果将指标发布到Wavefront代理（如&lt;a href=&quot;https://docs.wavefront.com/proxies_installing.html&quot;&gt;文档&lt;/a&gt;中所述），则主机必须采用 &lt;code&gt;proxy://HOST:PORT&lt;/code&gt; 格式。</target>
        </trans-unit>
        <trans-unit id="07bd02d96b5a06b4f2bd2bbcd5d3b28c945589d6" translate="yes" xml:space="preserve">
          <source>If root is used to control the application&amp;rsquo;s service and you &lt;a href=&quot;#deployment-script-customization-conf-file&quot;&gt;use a &lt;code&gt;.conf&lt;/code&gt; file&lt;/a&gt; to customize its startup, the &lt;code&gt;.conf&lt;/code&gt; file is read and evaluated by the root user. It should be secured accordingly. Use &lt;code&gt;chmod&lt;/code&gt; so that the file can only be read by the owner and use &lt;code&gt;chown&lt;/code&gt; to make root the owner, as shown in the following example:</source>
          <target state="translated">如果使用root来控制应用程序的服务，并且您&lt;a href=&quot;#deployment-script-customization-conf-file&quot;&gt;使用 &lt;code&gt;.conf&lt;/code&gt; 文件&lt;/a&gt;来自定义其启动，则root用户将读取并评估 &lt;code&gt;.conf&lt;/code&gt; 文件。应该相应地对其进行保护。使用 &lt;code&gt;chmod&lt;/code&gt; ，使文件只能由所有者读取，并使用 &lt;code&gt;chown&lt;/code&gt; 使root成为所有者，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="98954c15d77a8ef4352f38a4b2792a4a0041ca58" translate="yes" xml:space="preserve">
          <source>If several &lt;code&gt;CommandLineRunner&lt;/code&gt; or &lt;code&gt;ApplicationRunner&lt;/code&gt; beans are defined that must be called in a specific order, you can additionally implement the &lt;code&gt;org.springframework.core.Ordered&lt;/code&gt; interface or use the &lt;code&gt;org.springframework.core.annotation.Order&lt;/code&gt; annotation.</source>
          <target state="translated">如果定义了几个必须按特定顺序调用的 &lt;code&gt;CommandLineRunner&lt;/code&gt; 或 &lt;code&gt;ApplicationRunner&lt;/code&gt; Bean，则可以另外实现 &lt;code&gt;org.springframework.core.Ordered&lt;/code&gt; 接口或使用 &lt;code&gt;org.springframework.core.annotation.Order&lt;/code&gt; 注释。</target>
        </trans-unit>
        <trans-unit id="59f41cab262dfab33f9314a3d7c8e51d3f23e5fb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;CacheManager&lt;/code&gt; is auto-configured by Spring Boot, you can further tune its configuration before it is fully initialized by exposing a bean that implements the &lt;code&gt;CacheManagerCustomizer&lt;/code&gt; interface. The following example sets a flag to say that &lt;code&gt;null&lt;/code&gt; values should be passed down to the underlying map:</source>
          <target state="translated">如果 &lt;code&gt;CacheManager&lt;/code&gt; 是由Spring Boot自动配置的，则可以通过公开实现 &lt;code&gt;CacheManagerCustomizer&lt;/code&gt; 接口的bean，在完全初始化之前进一步调整其配置。下面的示例设置一个标志，指示应该将 &lt;code&gt;null&lt;/code&gt; 值向下传递到基础映射：</target>
        </trans-unit>
        <trans-unit id="53122bdc7aade39f271be4307871a074e5bc2b7b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;SpringApplication&lt;/code&gt; defaults are not to your taste, you can instead create a local instance and customize it. For example, to turn off the banner, you could write:</source>
          <target state="translated">如果 &lt;code&gt;SpringApplication&lt;/code&gt; 的默认设置不符合您的喜好，则可以创建一个本地实例并对其进行自定义。例如，要关闭横幅，您可以编写：</target>
        </trans-unit>
        <trans-unit id="9f382a68f808b894e0456443881414a7046f54f1" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;dev&lt;/code&gt; profile is not active, &lt;code&gt;AcmeProperties.list&lt;/code&gt; contains one &lt;code&gt;MyPojo&lt;/code&gt; entry, as previously defined. If the &lt;code&gt;dev&lt;/code&gt; profile is enabled, however, the &lt;code&gt;list&lt;/code&gt;&lt;em&gt;still&lt;/em&gt; contains only one entry (with a name of &lt;code&gt;my another name&lt;/code&gt; and a description of &lt;code&gt;null&lt;/code&gt;). This configuration &lt;em&gt;does not&lt;/em&gt; add a second &lt;code&gt;MyPojo&lt;/code&gt; instance to the list, and it does not merge the items.</source>
          <target state="translated">如果 &lt;code&gt;dev&lt;/code&gt; 配置文件未处于活动状态，则 &lt;code&gt;AcmeProperties.list&lt;/code&gt; 包含一个 &lt;code&gt;MyPojo&lt;/code&gt; 条目，如先前所定义。但是，如果启用了 &lt;code&gt;dev&lt;/code&gt; 配置文件，则该 &lt;code&gt;list&lt;/code&gt; &lt;em&gt;仍&lt;/em&gt;仅包含一个条目（名称为 &lt;code&gt;my another name&lt;/code&gt; 并为 &lt;code&gt;null&lt;/code&gt; 的描述）。此配置&lt;em&gt;不会&lt;/em&gt;将第二个 &lt;code&gt;MyPojo&lt;/code&gt; 实例添加到列表中，并且不会合并项目。</target>
        </trans-unit>
        <trans-unit id="e98db77848c88167022a94b820fdab8fa352e883" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;dev&lt;/code&gt; profile is not active, &lt;code&gt;AcmeProperties.map&lt;/code&gt; contains one entry with key &lt;code&gt;key1&lt;/code&gt; (with a name of &lt;code&gt;my name 1&lt;/code&gt; and a description of &lt;code&gt;my description 1&lt;/code&gt;). If the &lt;code&gt;dev&lt;/code&gt; profile is enabled, however, &lt;code&gt;map&lt;/code&gt; contains two entries with keys &lt;code&gt;key1&lt;/code&gt; (with a name of &lt;code&gt;dev name 1&lt;/code&gt; and a description of &lt;code&gt;my description 1&lt;/code&gt;) and &lt;code&gt;key2&lt;/code&gt; (with a name of &lt;code&gt;dev name 2&lt;/code&gt; and a description of &lt;code&gt;dev description 2&lt;/code&gt;).</source>
          <target state="translated">如果 &lt;code&gt;dev&lt;/code&gt; 个人资料无效， &lt;code&gt;AcmeProperties.map&lt;/code&gt; 包含关键的一个条目 &lt;code&gt;key1&lt;/code&gt; （带的名字 &lt;code&gt;my name 1&lt;/code&gt; 和的描述 &lt;code&gt;my description 1&lt;/code&gt; ）。但是，如果启用了 &lt;code&gt;dev&lt;/code&gt; 配置文件，则 &lt;code&gt;map&lt;/code&gt; 包含两个条目，其中包含键 &lt;code&gt;key1&lt;/code&gt; （名称为 &lt;code&gt;dev name 1&lt;/code&gt; ,并描述了 &lt;code&gt;my description 1&lt;/code&gt; ）和 &lt;code&gt;key2&lt;/code&gt; （名称为 &lt;code&gt;dev name 2&lt;/code&gt; ,并描述了 &lt;code&gt;dev description 2&lt;/code&gt; ） 。</target>
        </trans-unit>
        <trans-unit id="c6f645dd7aa3523f3b28248c9c4419e4c783a40d" translate="yes" xml:space="preserve">
          <source>If the authorization server does not support a JWK Set URI, you can configure the resource server with the Public Key used for verifying the signature of the JWT. This can be done using the &lt;code&gt;spring.security.oauth2.resourceserver.jwt.public-key-location&lt;/code&gt; property, where the value needs to point to a file containing the public key in the PEM-encoded x509 format.</source>
          <target state="translated">如果授权服务器不支持JWK设置URI，则可以使用用于验证JWT签名的公共密钥来配置资源服务器。可以使用 &lt;code&gt;spring.security.oauth2.resourceserver.jwt.public-key-location&lt;/code&gt; 属性完成此操作，该值需要指向包含PEM编码的x509格式的公钥的文件。</target>
        </trans-unit>
        <trans-unit id="4ec72335e88d4287317c04c96c4b0e3ea14dcb97" translate="yes" xml:space="preserve">
          <source>If the auto-configuration is relatively straightforward and does not have optional feature, merging the two modules in the starter is definitely an option.</source>
          <target state="translated">如果自动配置比较简单,又没有可选的功能,那么将启动器中的两个模块合并肯定是一个选择。</target>
        </trans-unit>
        <trans-unit id="ce0f2d4ed48020840e843232e03181a20f1ae1f8" translate="yes" xml:space="preserve">
          <source>If the class is also annotated with &lt;code&gt;@ConstructorBinding&lt;/code&gt;, a single constructor is expected and one property is created per constructor parameter. Otherwise, properties are discovered through the presence of standard getters and setters with special handling for collection and map types (that is detected even if only a getter is present). The annotation processor also supports the use of the &lt;code&gt;@Data&lt;/code&gt;, &lt;code&gt;@Getter&lt;/code&gt;, and &lt;code&gt;@Setter&lt;/code&gt; lombok annotations.</source>
          <target state="translated">如果该类还使用 &lt;code&gt;@ConstructorBinding&lt;/code&gt; 进行注释，则应使用单个构造函数，并为每个构造函数参数创建一个属性。否则，将通过对集合和地图类型进行特殊处理的标准getter和setter的存在来发现属性（即使仅存在getter也会被检测到）。注解处理器还支持使用的 &lt;code&gt;@Data&lt;/code&gt; ， &lt;code&gt;@Getter&lt;/code&gt; 和 &lt;code&gt;@Setter&lt;/code&gt; Lombok的注释。</target>
        </trans-unit>
        <trans-unit id="6ebb9b217c5aee846bfa9a7e3e405dd8be0bcd94" translate="yes" xml:space="preserve">
          <source>If the class is not on the classpath, you can use the &lt;code&gt;excludeName&lt;/code&gt; attribute of the annotation and specify the fully qualified name instead. If you prefer to use &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; rather than &lt;code&gt;@SpringBootApplication&lt;/code&gt;, &lt;code&gt;exclude&lt;/code&gt; and &lt;code&gt;excludeName&lt;/code&gt; are also available. Finally, you can also control the list of auto-configuration classes to exclude by using the &lt;code&gt;spring.autoconfigure.exclude&lt;/code&gt; property.</source>
          <target state="translated">如果该类不在类路径中，则可以使用批注的 &lt;code&gt;excludeName&lt;/code&gt; 属性，并指定完全限定的名称。如果您更喜欢使用 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 而不是 &lt;code&gt;@SpringBootApplication&lt;/code&gt; ，则 &lt;code&gt;exclude&lt;/code&gt; 和 &lt;code&gt;excludeName&lt;/code&gt; 也可用。最后，您还可以使用 &lt;code&gt;spring.autoconfigure.exclude&lt;/code&gt; 属性控制要排除的自动配置类的列表。</target>
        </trans-unit>
        <trans-unit id="fac70f27159ca37ef35b28dcf5cf7e4e9db1ad9c" translate="yes" xml:space="preserve">
          <source>If the configuration properties are not enough and you&amp;rsquo;d like to fully control the client configuration, you can register a custom &lt;code&gt;ClientConfiguration&lt;/code&gt; bean.</source>
          <target state="translated">如果配置属性不够，并且您想完全控制客户端配置，则可以注册自定义 &lt;code&gt;ClientConfiguration&lt;/code&gt; bean。</target>
        </trans-unit>
        <trans-unit id="a7f32b1ffc1d3256222f0bef34c08072756b55f3" translate="yes" xml:space="preserve">
          <source>If the connection to InfluxDB requires a user and password, you can set the &lt;code&gt;spring.influx.user&lt;/code&gt; and &lt;code&gt;spring.influx.password&lt;/code&gt; properties accordingly.</source>
          <target state="translated">如果到InfluxDB的连接需要用户和密码，则可以相应地设置 &lt;code&gt;spring.influx.user&lt;/code&gt; 和 &lt;code&gt;spring.influx.password&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="fb5d688790cd7a467f4b92681359014f36bf5e33" translate="yes" xml:space="preserve">
          <source>If the only change you need to make to logging is to set the levels of various loggers, you can do so in &lt;code&gt;application.properties&lt;/code&gt; by using the &quot;logging.level&quot; prefix, as shown in the following example:</source>
          <target state="translated">如果您需要对日志记录进行的唯一更改是设置各种记录器的级别，则可以使用&amp;ldquo; logging.level&amp;rdquo;前缀在 &lt;code&gt;application.properties&lt;/code&gt; 中进行设置，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="7920568a5f9bc4a0dae58048991026c9dccd5a0d" translate="yes" xml:space="preserve">
          <source>If the operation method returns &lt;code&gt;void&lt;/code&gt; or &lt;code&gt;Void&lt;/code&gt; the produces clause is empty. If the operation method returns a &lt;code&gt;org.springframework.core.io.Resource&lt;/code&gt;, the produces clause is &lt;code&gt;application/octet-stream&lt;/code&gt;. For all other operations the produces clause is &lt;code&gt;application/vnd.spring-boot.actuator.v2+json, application/json&lt;/code&gt;.</source>
          <target state="translated">如果操作方法返回 &lt;code&gt;void&lt;/code&gt; 或 &lt;code&gt;Void&lt;/code&gt; ,则Produces子句为空。如果操作方法返回 &lt;code&gt;org.springframework.core.io.Resource&lt;/code&gt; ，则Produces子句为 &lt;code&gt;application/octet-stream&lt;/code&gt; 。对于所有其他操作， &lt;code&gt;application/vnd.spring-boot.actuator.v2+json, application/json&lt;/code&gt; 子句为application / vnd.spring-boot.actuator.v2 + json，application / json。</target>
        </trans-unit>
        <trans-unit id="c0f86d05cc27797f90b2e394cab4d68d0dc53de7" translate="yes" xml:space="preserve">
          <source>If the port is the same for all your contact points you can use a shortcut and only specify the host names, as shown in the following example:</source>
          <target state="translated">如果您的所有联络点的端口都是一样的,您可以使用快捷方式,只指定主机名,如下例所示。</target>
        </trans-unit>
        <trans-unit id="c12facfdd4c23633129fb1e16c3452da7256c4c2" translate="yes" xml:space="preserve">
          <source>If the preceding customization techniques are too limited, you can register the &lt;code&gt;TomcatServletWebServerFactory&lt;/code&gt;, &lt;code&gt;JettyServletWebServerFactory&lt;/code&gt;, or &lt;code&gt;UndertowServletWebServerFactory&lt;/code&gt; bean yourself.</source>
          <target state="translated">如果上述定制技术太有限，则可以自己注册 &lt;code&gt;TomcatServletWebServerFactory&lt;/code&gt; ， &lt;code&gt;JettyServletWebServerFactory&lt;/code&gt; 或 &lt;code&gt;UndertowServletWebServerFactory&lt;/code&gt; bean。</target>
        </trans-unit>
        <trans-unit id="507f5056b5c9d9ab1c6787ab2372eec9a0224d8b" translate="yes" xml:space="preserve">
          <source>If the preceding restrictions mean that you cannot use Spring Boot Loader, consider the following alternatives:</source>
          <target state="translated">如果上述限制意味着您无法使用Spring Boot Loader,请考虑以下替代方案。</target>
        </trans-unit>
        <trans-unit id="75838280fa8fdb999d7fc38e031fc8e48fbd5bf9" translate="yes" xml:space="preserve">
          <source>If the property &lt;code&gt;spring.kafka.producer.transaction-id-prefix&lt;/code&gt; is defined, a &lt;code&gt;KafkaTransactionManager&lt;/code&gt; is automatically configured. Also, if a &lt;code&gt;RecordMessageConverter&lt;/code&gt; bean is defined, it is automatically associated to the auto-configured &lt;code&gt;KafkaTemplate&lt;/code&gt;.</source>
          <target state="translated">如果定义了 &lt;code&gt;spring.kafka.producer.transaction-id-prefix&lt;/code&gt; 属性， &lt;code&gt;KafkaTransactionManager&lt;/code&gt; 自动配置KafkaTransactionManager。另外，如果定义了 &lt;code&gt;RecordMessageConverter&lt;/code&gt; bean，它将自动关联到自动配置的 &lt;code&gt;KafkaTemplate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="450d143f2958b05db32f958d3293b6d08470ef5f" translate="yes" xml:space="preserve">
          <source>If the proxy adds the commonly used &lt;code&gt;X-Forwarded-For&lt;/code&gt; and &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; headers, setting &lt;code&gt;server.forward-headers-strategy&lt;/code&gt; to &lt;code&gt;NATIVE&lt;/code&gt; is enough to support those. With this option, the Web servers themselves natively support this feature; you can check their specific documentation to learn about specific behavior.</source>
          <target state="translated">如果代理添加了常用的 &lt;code&gt;X-Forwarded-For&lt;/code&gt; 和 &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; 标头， &lt;code&gt;server.forward-headers-strategy&lt;/code&gt; 为 &lt;code&gt;NATIVE&lt;/code&gt; 就足以支持这些标头。使用此选项，Web服务器本身就可以支持此功能。您可以查看他们的特定文档以了解特定行为。</target>
        </trans-unit>
        <trans-unit id="6817394d9d0fbc711a6b56ce4369f348a61715e2" translate="yes" xml:space="preserve">
          <source>If the server&amp;rsquo;s context-path has been configured to anything other than &lt;code&gt;/&lt;/code&gt;, the Cloud Foundry endpoints will not be available at the root of the application. For example, if &lt;code&gt;server.servlet.context-path=/app&lt;/code&gt;, Cloud Foundry endpoints will be available at &lt;code&gt;/app/cloudfoundryapplication/*&lt;/code&gt;.</source>
          <target state="translated">如果服务器的上下文路径已配置为 &lt;code&gt;/&lt;/code&gt; 以外的其他值，则Cloud Foundry端点在应用程序的根目录将不可用。例如，如果 &lt;code&gt;server.servlet.context-path=/app&lt;/code&gt; ，则可以在 &lt;code&gt;/app/cloudfoundryapplication/*&lt;/code&gt; 上找到Cloud Foundry端点。</target>
        </trans-unit>
        <trans-unit id="c7bdde4485a673593765893af01dfe2994582e9c" translate="yes" xml:space="preserve">
          <source>If there is a &lt;code&gt;schema.ldif&lt;/code&gt; file on your classpath, it is used to initialize the server. If you want to load the initialization script from a different resource, you can also use the &lt;code&gt;spring.ldap.embedded.ldif&lt;/code&gt; property.</source>
          <target state="translated">如果您的类路径上有一个 &lt;code&gt;schema.ldif&lt;/code&gt; 文件，则该文件用于初始化服务器。如果要从其他资源加载初始化脚本，则也可以使用 &lt;code&gt;spring.ldap.embedded.ldif&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="c418089ba6d49824b60a31f90b605497aa3ebf49" translate="yes" xml:space="preserve">
          <source>If this is not an option for you, you can create a &lt;code&gt;@SpringBootConfiguration&lt;/code&gt; somewhere in the hierarchy of your test so that it is used instead. Alternatively, you can specify a source for your test, which disables the behavior of finding a default one.</source>
          <target state="translated">如果这不是您的选择，则可以在测试层次结构中的某个位置创建 &lt;code&gt;@SpringBootConfiguration&lt;/code&gt; ，以便代替使用它。或者，您可以为测试指定一个源，从而禁用查找默认源的行为。</target>
        </trans-unit>
        <trans-unit id="938357f1d9338dc1aaa7b2ad3eb5024bb24f7346" translate="yes" xml:space="preserve">
          <source>If this is not enough, Spring Framework provides a &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#filters-forwarded-headers&quot;&gt;ForwardedHeaderFilter&lt;/a&gt;. You can register it as a Servlet Filter in your application by setting &lt;code&gt;server.forward-headers-strategy&lt;/code&gt; is set to &lt;code&gt;FRAMEWORK&lt;/code&gt;.</source>
          <target state="translated">如果这还不够的话，Spring Framework将提供&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#filters-forwarded-headers&quot;&gt;ForwardedHeaderFilter&lt;/a&gt;。您可以通过将 &lt;code&gt;server.forward-headers-strategy&lt;/code&gt; 设置为 &lt;code&gt;FRAMEWORK&lt;/code&gt; 来将其注册为应用程序中的Servlet过滤器。</target>
        </trans-unit>
        <trans-unit id="9720a420270245d15b5d3f37ad8cc50f469502f9" translate="yes" xml:space="preserve">
          <source>If you &lt;a href=&quot;using-spring-boot#using-boot-structuring-your-code&quot;&gt;structure your code&lt;/a&gt; in a sensible way, your &lt;code&gt;@SpringBootApplication&lt;/code&gt; class is &lt;a href=&quot;#boot-features-testing-spring-boot-applications-detecting-config&quot;&gt;used by default&lt;/a&gt; as the configuration of your tests.</source>
          <target state="translated">如果您以合理的方式&lt;a href=&quot;using-spring-boot#using-boot-structuring-your-code&quot;&gt;构建代码&lt;/a&gt;，则&lt;a href=&quot;#boot-features-testing-spring-boot-applications-detecting-config&quot;&gt;默认情况下&lt;/a&gt;，将 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 类用作测试的配置。</target>
        </trans-unit>
        <trans-unit id="a2bc13b2da75c18b80cea43040478a6b09ff85fa" translate="yes" xml:space="preserve">
          <source>If you absolutely must use XML based configuration, we recommend that you still start with a &lt;code&gt;@Configuration&lt;/code&gt; class. You can then use an &lt;code&gt;@ImportResource&lt;/code&gt; annotation to load XML configuration files.</source>
          <target state="translated">如果绝对必须使用基于XML的配置，我们建议您仍然从 &lt;code&gt;@Configuration&lt;/code&gt; 类开始。然后，您可以使用 &lt;code&gt;@ImportResource&lt;/code&gt; 批注来加载XML配置文件。</target>
        </trans-unit>
        <trans-unit id="6572581dbbf90ba690ae50f96e3e884079122cdf" translate="yes" xml:space="preserve">
          <source>If you accidentally run a web application twice, you see a &amp;ldquo;Port already in use&amp;rdquo; error. STS users can use the &lt;code&gt;Relaunch&lt;/code&gt; button rather than the &lt;code&gt;Run&lt;/code&gt; button to ensure that any existing instance is closed.</source>
          <target state="translated">如果不小心两次运行Web应用程序，则会看到&amp;ldquo;端口已在使用中&amp;rdquo;错误。STS用户可以使用&amp;ldquo; &lt;code&gt;Relaunch&lt;/code&gt; 按钮而不是&amp;ldquo; &lt;code&gt;Run&lt;/code&gt; 按钮来确保关闭任何现有实例。</target>
        </trans-unit>
        <trans-unit id="e1f6d39c40b48958aacacd44e321a6e83d99a71e" translate="yes" xml:space="preserve">
          <source>If you add a &lt;code&gt;@Bean&lt;/code&gt; annotated with &lt;code&gt;@Endpoint&lt;/code&gt;, any methods annotated with &lt;code&gt;@ReadOperation&lt;/code&gt;, &lt;code&gt;@WriteOperation&lt;/code&gt;, or &lt;code&gt;@DeleteOperation&lt;/code&gt; are automatically exposed over JMX and, in a web application, over HTTP as well. Endpoints can be exposed over HTTP using Jersey, Spring MVC, or Spring WebFlux. If both Jersey and Spring MVC are available, Spring MVC will be used.</source>
          <target state="translated">如果添加带 &lt;code&gt;@Bean&lt;/code&gt; 注释的 &lt;code&gt;@Endpoint&lt;/code&gt; ，则带 &lt;code&gt;@ReadOperation&lt;/code&gt; ， &lt;code&gt;@WriteOperation&lt;/code&gt; 或 &lt;code&gt;@DeleteOperation&lt;/code&gt; 注释的任何方法都将通过JMX以及Web应用程序通过HTTP自动公开。可以使用Jersey，Spring MVC或Spring WebFlux通过HTTP公开端点。如果Jersey和Spring MVC均可用，则将使用Spring MVC。</target>
        </trans-unit>
        <trans-unit id="67f18b9ae92f26f1aa4dcca11f50389d720d423d" translate="yes" xml:space="preserve">
          <source>If you add your own &lt;code&gt;@Bean&lt;/code&gt; of any of the auto-configured types, it replaces the default (except in the case of &lt;code&gt;RedisTemplate&lt;/code&gt;, when the exclusion is based on the bean name, &lt;code&gt;redisTemplate&lt;/code&gt;, not its type). By default, if &lt;code&gt;commons-pool2&lt;/code&gt; is on the classpath, you get a pooled connection factory.</source>
          <target state="translated">如果添加自己的任何自动配置类型的 &lt;code&gt;@Bean&lt;/code&gt; ，它将替换默认值（ &lt;code&gt;RedisTemplate&lt;/code&gt; 除外，当排除是基于bean名称 &lt;code&gt;redisTemplate&lt;/code&gt; 而不是其类型时）。默认情况下，如果 &lt;code&gt;commons-pool2&lt;/code&gt; 在类路径上，则会得到一个池化连接工厂。</target>
        </trans-unit>
        <trans-unit id="50d01e9789f329fdebc1709bbba3de62ad935b6c" translate="yes" xml:space="preserve">
          <source>If you add your own &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;CassandraTemplate&lt;/code&gt;, it replaces the default.</source>
          <target state="translated">如果添加自己的 &lt;code&gt;CassandraTemplate&lt;/code&gt; 类型的 &lt;code&gt;@Bean&lt;/code&gt; ，它将替换默认值。</target>
        </trans-unit>
        <trans-unit id="bcccf0c6196520ed57bd7f60c16e9dc6504a06a0" translate="yes" xml:space="preserve">
          <source>If you add your own &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;SolrClient&lt;/code&gt;, it replaces the default.</source>
          <target state="translated">如果您添加自己 &lt;code&gt;@Bean&lt;/code&gt; 型 &lt;code&gt;SolrClient&lt;/code&gt; ，它取代了默认。</target>
        </trans-unit>
        <trans-unit id="4595e495abf61cd45cccb50264a6f58438118a97" translate="yes" xml:space="preserve">
          <source>If you are building a jar, package the application&amp;rsquo;s classes and resources in a nested &lt;code&gt;BOOT-INF/classes&lt;/code&gt; directory. If you are building a war, package the application&amp;rsquo;s classes in a nested &lt;code&gt;WEB-INF/classes&lt;/code&gt; directory as usual.</source>
          <target state="translated">如果要构建jar，请将应用程序的类和资源打包在嵌套的 &lt;code&gt;BOOT-INF/classes&lt;/code&gt; 目录中。如果要发动战争，请照常将应用程序的类打包在嵌套的 &lt;code&gt;WEB-INF/classes&lt;/code&gt; 目录中。</target>
        </trans-unit>
        <trans-unit id="2b29e54ab72ab11ae441281bb367e30c45f51553" translate="yes" xml:space="preserve">
          <source>If you are comfortable with Spring Boot&amp;rsquo;s core features, you can continue on and read about &lt;a href=&quot;production-ready-features#production-ready&quot;&gt;production-ready features&lt;/a&gt;.</source>
          <target state="translated">如果您熟悉Spring Boot的核心功能，则可以继续阅读有关&lt;a href=&quot;production-ready-features#production-ready&quot;&gt;准备就绪的功能的信息&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9c3c4e22e933d7a0ffc223493d8921e6950547f4" translate="yes" xml:space="preserve">
          <source>If you are configuring a component yourself, you can use an &lt;code&gt;EntityManagerFactoryDependsOnPostProcessor&lt;/code&gt; subclass as a convenient way of setting up the necessary dependencies. For example, if you use Hibernate Search with Elasticsearch as its index manager, any &lt;code&gt;EntityManagerFactory&lt;/code&gt; beans must be configured to depend on the &lt;code&gt;elasticsearchClient&lt;/code&gt; bean, as shown in the following example:</source>
          <target state="translated">如果您自己配置组件，则可以使用 &lt;code&gt;EntityManagerFactoryDependsOnPostProcessor&lt;/code&gt; 子类作为设置必要依赖项的便捷方法。例如，如果您将Hibernate Search与Elasticsearch用作其索引管理器，则必须将任何 &lt;code&gt;EntityManagerFactory&lt;/code&gt; Bean配置为依赖于 &lt;code&gt;elasticsearchClient&lt;/code&gt; Bean，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="4b8d3f76056010f2181140beaccd4e002aabd43d" translate="yes" xml:space="preserve">
          <source>If you are deploying to a classic Application Server, you could also use a JNDI variable named &lt;code&gt;java:comp/env/spring.application.json&lt;/code&gt;.</source>
          <target state="translated">如果要部署到传统的Application Server，则还可以使用名为 &lt;code&gt;java:comp/env/spring.application.json&lt;/code&gt; 的JNDI变量。</target>
        </trans-unit>
        <trans-unit id="6a29ed9b81fc6ff3fe527585e8c36700325163a6" translate="yes" xml:space="preserve">
          <source>If you are developing a web application, Spring Boot Actuator auto-configures all enabled endpoints to be exposed over HTTP. The default convention is to use the &lt;code&gt;id&lt;/code&gt; of the endpoint with a prefix of &lt;code&gt;/actuator&lt;/code&gt; as the URL path. For example, &lt;code&gt;health&lt;/code&gt; is exposed as &lt;code&gt;/actuator/health&lt;/code&gt;.</source>
          <target state="translated">如果您正在开发Web应用程序，则Spring Boot Actuator会自动配置所有启用的端点以通过HTTP公开。默认约定是使用带有 &lt;code&gt;/actuator&lt;/code&gt; 前缀的终结点的 &lt;code&gt;id&lt;/code&gt; 作为URL路径。例如， &lt;code&gt;health&lt;/code&gt; 暴露为 &lt;code&gt;/actuator/health&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b10fc81848fdd572323eaba1e4af494bafd7528" translate="yes" xml:space="preserve">
          <source>If you are familiar with the Spring Test Framework, you may be used to using &lt;code&gt;@ContextConfiguration(classes=&amp;hellip;​)&lt;/code&gt; in order to specify which Spring &lt;code&gt;@Configuration&lt;/code&gt; to load. Alternatively, you might have often used nested &lt;code&gt;@Configuration&lt;/code&gt; classes within your test.</source>
          <target state="translated">如果您熟悉Spring Test Framework，则可能习惯于使用 &lt;code&gt;@ContextConfiguration(classes=&amp;hellip;​)&lt;/code&gt; 以指定要加载哪个Spring &lt;code&gt;@Configuration&lt;/code&gt; 。另外，您可能经常在测试中使用嵌套的 &lt;code&gt;@Configuration&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="07a77d13b8d2f66e4a3961132ded0f3a82aff58e" translate="yes" xml:space="preserve">
          <source>If you are getting started with Spring Boot or 'Spring' in general, start with &lt;a href=&quot;getting-started#getting-started&quot;&gt;the following topics&lt;/a&gt;:</source>
          <target state="translated">如果您通常是从Spring Boot或&amp;ldquo; Spring&amp;rdquo;开始的，请&lt;a href=&quot;getting-started#getting-started&quot;&gt;从以下主题&lt;/a&gt;开始：</target>
        </trans-unit>
        <trans-unit id="b87acbd8399c832a91318bfdad0ffbca68d194ae" translate="yes" xml:space="preserve">
          <source>If you are getting started with Spring Boot, or &amp;ldquo;Spring&amp;rdquo; in general, start by reading this section. It answers the basic &amp;ldquo;what?&amp;rdquo;, &amp;ldquo;how?&amp;rdquo; and &amp;ldquo;why?&amp;rdquo; questions. It includes an introduction to Spring Boot, along with installation instructions. We then walk you through building your first Spring Boot application, discussing some core principles as we go.</source>
          <target state="translated">如果您是从Spring Boot或&amp;ldquo; Spring&amp;rdquo;开始的，请先阅读本节。它回答了基本的&amp;ldquo;什么？&amp;rdquo;，&amp;ldquo;如何？&amp;rdquo; 和&amp;ldquo;为什么？&amp;rdquo; 问题。它包括对Spring Boot的介绍以及安装说明。然后，我们将引导您构建第一个Spring Boot应用程序，并在讨论过程中讨论一些核心原理。</target>
        </trans-unit>
        <trans-unit id="d02caee9c6a775f48b8edf664eb3c2cc5dc83fd0" translate="yes" xml:space="preserve">
          <source>If you are interested in how the build tool plugins work, you can look at the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-tools&quot;&gt;&lt;code&gt;spring-boot-tools&lt;/code&gt;&lt;/a&gt; module on GitHub. More technical details of the executable jar format are covered in &lt;a href=&quot;appendix-executable-jar-format#executable-jar&quot;&gt;the appendix&lt;/a&gt;.</source>
          <target state="translated">如果您对构建工具插件的工作方式感兴趣，可以查看GitHub上的&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-tools&quot;&gt; &lt;code&gt;spring-boot-tools&lt;/code&gt; &lt;/a&gt;模块。&lt;a href=&quot;appendix-executable-jar-format#executable-jar&quot;&gt;附录&lt;/a&gt;中介绍了可执行jar格式的更多技术细节。</target>
        </trans-unit>
        <trans-unit id="f664aa6febe2198a322baa1998404745c525c05e" translate="yes" xml:space="preserve">
          <source>If you are new to Java development or if you want to experiment with Spring Boot, you might want to try the &lt;a href=&quot;#getting-started-installing-the-cli&quot;&gt;Spring Boot CLI&lt;/a&gt; (Command Line Interface) first. Otherwise, read on for &amp;ldquo;classic&amp;rdquo; installation instructions.</source>
          <target state="translated">如果您不熟悉Java开发，或者想尝试使用Spring Boot，则可能要先尝试使用&lt;a href=&quot;#getting-started-installing-the-cli&quot;&gt;Spring Boot CLI&lt;/a&gt;（命令行界面）。否则，请继续阅读&amp;ldquo;经典&amp;rdquo;安装说明。</target>
        </trans-unit>
        <trans-unit id="87c66314e663a40531bbedebffff7912021ed63f" translate="yes" xml:space="preserve">
          <source>If you are not using Spring Boot&amp;rsquo;s developer tools but would still like to make use of H2&amp;rsquo;s console, you can configure the &lt;code&gt;spring.h2.console.enabled&lt;/code&gt; property with a value of &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">如果您不使用Spring Boot的开发人员工具，但仍想使用H2的控制台，则可以将 &lt;code&gt;spring.h2.console.enabled&lt;/code&gt; 属性配置为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f38b724d33ac1d7ed73d9389ad79f5442de48eaa" translate="yes" xml:space="preserve">
          <source>If you are on a Mac and use &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;, you can install the Spring Boot CLI by using the following commands:</source>
          <target state="translated">如果您使用的是Mac，并且使用&lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;，则可以使用以下命令安装Spring Boot CLI：</target>
        </trans-unit>
        <trans-unit id="a8119afcf8162105ee3ab4130bcdec0a6e584867" translate="yes" xml:space="preserve">
          <source>If you are on a Mac and use &lt;a href=&quot;https://www.macports.org/&quot;&gt;MacPorts&lt;/a&gt;, you can install the Spring Boot CLI by using the following command:</source>
          <target state="translated">如果您使用的是Mac并使用&lt;a href=&quot;https://www.macports.org/&quot;&gt;MacPorts&lt;/a&gt;，则可以使用以下命令安装Spring Boot CLI：</target>
        </trans-unit>
        <trans-unit id="3ed2de546bfcfab7e7eb5aac5f84c9aa17d93fb8" translate="yes" xml:space="preserve">
          <source>If you are on a Windows and use &lt;a href=&quot;https://scoop.sh/&quot;&gt;Scoop&lt;/a&gt;, you can install the Spring Boot CLI by using the following commands:</source>
          <target state="translated">如果您使用的是Windows并使用&lt;a href=&quot;https://scoop.sh/&quot;&gt;Scoop&lt;/a&gt;，则可以使用以下命令安装Spring Boot CLI：</target>
        </trans-unit>
        <trans-unit id="9e7d76094ebcca26c44cfb5c738d72c9ec56ce86" translate="yes" xml:space="preserve">
          <source>If you are running a web application, Spring Boot by default registers &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/orm/jpa/support/OpenEntityManagerInViewInterceptor.html&quot;&gt;&lt;code&gt;OpenEntityManagerInViewInterceptor&lt;/code&gt;&lt;/a&gt; to apply the &amp;ldquo;Open EntityManager in View&amp;rdquo; pattern, to allow for lazy loading in web views. If you do not want this behavior, you should set &lt;code&gt;spring.jpa.open-in-view&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in your &lt;code&gt;application.properties&lt;/code&gt;.</source>
          <target state="translated">如果您正在运行Web应用程序，则默认情况下，Spring Boot将注册&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/orm/jpa/support/OpenEntityManagerInViewInterceptor.html&quot;&gt; &lt;code&gt;OpenEntityManagerInViewInterceptor&lt;/code&gt; &lt;/a&gt;以应用&amp;ldquo;在视图中打开EntityManager&amp;rdquo;模式，以允许在Web视图中进行延迟加载。如果您不希望出现这种情况，则应在 &lt;code&gt;application.properties&lt;/code&gt; 中将 &lt;code&gt;spring.jpa.open-in-view&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f24aad1ae61a013d291b076f53a6a504da8a3bdf" translate="yes" xml:space="preserve">
          <source>If you are running your application from a container, you can use an executable jar, but it is also often an advantage to explode it and run it in a different way. Certain PaaS implementations may also choose to unpack archives before they run. For example, Cloud Foundry operates this way. One way to run an unpacked archive is by starting the appropriate launcher, as follows:</source>
          <target state="translated">如果您从容器中运行应用程序,您可以使用可执行的jar,但将其爆炸并以不同的方式运行通常也是一种优势。某些PaaS实现也可以选择在运行前解压存档。例如,Cloud Foundry就是这样操作的。运行解压存档的一种方法是启动相应的启动器,如下所示。</target>
        </trans-unit>
        <trans-unit id="f500b897c7e1dcbfd2e6db40454ee8a0d701da25" translate="yes" xml:space="preserve">
          <source>If you are running your application in an application server, Spring Boot tries to locate a JMS &lt;code&gt;ConnectionFactory&lt;/code&gt; by using JNDI. By default, the &lt;code&gt;java:/JmsXA&lt;/code&gt; and &lt;code&gt;java:/XAConnectionFactory&lt;/code&gt; location are checked. You can use the &lt;code&gt;spring.jms.jndi-name&lt;/code&gt; property if you need to specify an alternative location, as shown in the following example:</source>
          <target state="translated">如果您正在应用程序服务器中运行应用程序，Spring Boot会尝试使用JNDI来查找JMS &lt;code&gt;ConnectionFactory&lt;/code&gt; 。默认情况下，将检查 &lt;code&gt;java:/JmsXA&lt;/code&gt; 和 &lt;code&gt;java:/XAConnectionFactory&lt;/code&gt; 位置。如果需要指定替代位置，则可以使用 &lt;code&gt;spring.jms.jndi-name&lt;/code&gt; 属性，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="082aa1b4cce3cd4b57250ce9b0e535a2df1b53f7" translate="yes" xml:space="preserve">
          <source>If you are starting out with Spring Boot, you should probably read the &lt;em&gt;&lt;a href=&quot;getting-started#getting-started&quot;&gt;Getting Started&lt;/a&gt;&lt;/em&gt; guide before diving into this section.</source>
          <target state="translated">如果您是从Spring Boot开始的，那么在进入本节之前，您可能应该阅读《&lt;em&gt;&lt;a href=&quot;getting-started#getting-started&quot;&gt;入门指南》&lt;/a&gt;&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2c7003763f7d393e0290a03524f2812f878c3b07" translate="yes" xml:space="preserve">
          <source>If you are upgrading a &lt;code&gt;Long&lt;/code&gt; property, make sure to define the unit (using &lt;code&gt;@DataSizeUnit&lt;/code&gt;) if it isn&amp;rsquo;t bytes. Doing so gives a transparent upgrade path while supporting a much richer format.</source>
          <target state="translated">如果要升级 &lt;code&gt;Long&lt;/code&gt; 属性，请确保定义单位（如果不是字节）（使用 &lt;code&gt;@DataSizeUnit&lt;/code&gt; ）。这样做可以提供透明的升级路径，同时支持更丰富的格式。</target>
        </trans-unit>
        <trans-unit id="d1e8c841b81187520acb48dedfb31c7475af32d0" translate="yes" xml:space="preserve">
          <source>If you are upgrading a &lt;code&gt;Long&lt;/code&gt; property, make sure to define the unit (using &lt;code&gt;@DurationUnit&lt;/code&gt;) if it isn&amp;rsquo;t milliseconds. Doing so gives a transparent upgrade path while supporting a much richer format.</source>
          <target state="translated">如果要升级 &lt;code&gt;Long&lt;/code&gt; 属性，请确保以毫秒为单位定义单位（使用 &lt;code&gt;@DurationUnit&lt;/code&gt; ）。这样做可以提供透明的升级路径，同时支持更丰富的格式。</target>
        </trans-unit>
        <trans-unit id="19ce29d23a14fce2ca2d47733135ce6dd14b5565" translate="yes" xml:space="preserve">
          <source>If you are upgrading from the &lt;code&gt;1.x&lt;/code&gt; release of Spring Boot, check the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide&quot;&gt;&amp;ldquo;migration guide&amp;rdquo; on the project wiki&lt;/a&gt; that provides detailed upgrade instructions. Check also the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki&quot;&gt;&amp;ldquo;release notes&amp;rdquo;&lt;/a&gt; for a list of &amp;ldquo;new and noteworthy&amp;rdquo; features for each release.</source>
          <target state="translated">如果要从 &lt;code&gt;1.x&lt;/code&gt; 版本的Spring Boot升级，请查看&lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide&quot;&gt;项目Wiki上的&amp;ldquo;迁移指南&amp;rdquo;，该指南&lt;/a&gt;提供了详细的升级说明。还请检查&lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki&quot;&gt;&amp;ldquo;发行说明&amp;rdquo;&lt;/a&gt;，以获取每个发行版的&amp;ldquo;新功能和值得注意的功能&amp;rdquo;列表。</target>
        </trans-unit>
        <trans-unit id="2e85e2e7242fe9c0487d2e275c3de6ed475314e9" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;@SpyBean&lt;/code&gt; to spy on a bean with &lt;code&gt;@Cacheable&lt;/code&gt; methods that refer to parameters by name, your application must be compiled with &lt;code&gt;-parameters&lt;/code&gt;. This ensures that the parameter names are available to the caching infrastructure once the bean has been spied upon.</source>
          <target state="translated">如果您使用 &lt;code&gt;@SpyBean&lt;/code&gt; 通过 &lt;code&gt;@Cacheable&lt;/code&gt; 方法监视通过名称引用参数的bean ，则您的应用程序必须使用 &lt;code&gt;-parameters&lt;/code&gt; 进行编译。这样可以确保在侦听Bean后即可将参数名称用于缓存基础结构。</target>
        </trans-unit>
        <trans-unit id="986fe72d55eb2734bc7baeddfefa3aeb789f25f7" translate="yes" xml:space="preserve">
          <source>If you are using AspectJ in your project, you need to make sure that the annotation processor runs only once. There are several ways to do this. With Maven, you can configure the &lt;code&gt;maven-apt-plugin&lt;/code&gt; explicitly and add the dependency to the annotation processor only there. You could also let the AspectJ plugin run all the processing and disable annotation processing in the &lt;code&gt;maven-compiler-plugin&lt;/code&gt; configuration, as follows:</source>
          <target state="translated">如果在项目中使用AspectJ，则需要确保注释处理器仅运行一次。有几种方法可以做到这一点。使用Maven，您可以显式配置 &lt;code&gt;maven-apt-plugin&lt;/code&gt; 并将依赖项仅添加到注释处理器中。您还可以让AspectJ插件在 &lt;code&gt;maven-compiler-plugin&lt;/code&gt; 配置中运行所有处理并禁用注释处理，如下所示：</target>
        </trans-unit>
        <trans-unit id="d34fea382f6e985144c677ce737b467f54855bf9" translate="yes" xml:space="preserve">
          <source>If you are using JUnit 4, don&amp;rsquo;t forget to also add &lt;code&gt;@RunWith(SpringRunner.class)&lt;/code&gt; to your test, otherwise the annotations will be ignored. If you are using JUnit 5, there&amp;rsquo;s no need to add the equivalent &lt;code&gt;@ExtendWith(SpringExtension.class)&lt;/code&gt; as &lt;code&gt;@SpringBootTest&lt;/code&gt; and the other &lt;code&gt;@&amp;hellip;Test&lt;/code&gt; annotations are already annotated with it.</source>
          <target state="translated">如果您使用的是JUnit 4，请不要忘记也将 &lt;code&gt;@RunWith(SpringRunner.class)&lt;/code&gt; 添加到测试中，否则注释将被忽略。如果您使用的是JUnit 5，则无需将等效的 &lt;code&gt;@ExtendWith(SpringExtension.class)&lt;/code&gt; 添加为 &lt;code&gt;@SpringBootTest&lt;/code&gt; ，而其他 &lt;code&gt;@&amp;hellip;Test&lt;/code&gt; 注释已经对其进行了注释。</target>
        </trans-unit>
        <trans-unit id="b8cabbb921d4dcce379b0a86b0046f39cb62272a" translate="yes" xml:space="preserve">
          <source>If you are using R2DBC, the regular &lt;code&gt;DataSource&lt;/code&gt; auto-configuration backs off so none of the options described above can be used.</source>
          <target state="translated">如果您使用的是R2DBC，则常规的 &lt;code&gt;DataSource&lt;/code&gt; 自动配置会后退，因此不能使用上述任何选项。</target>
        </trans-unit>
        <trans-unit id="c2e8de4489cd31b099072b3085552c2a680e1d2b" translate="yes" xml:space="preserve">
          <source>If you are using Spring Security and want to access the principal in an error page, you must configure Spring Security&amp;rsquo;s filter to be invoked on error dispatches. To do so, set the &lt;code&gt;spring.security.filter.dispatcher-types&lt;/code&gt; property to &lt;code&gt;async, error, forward, request&lt;/code&gt;.</source>
          <target state="translated">如果您使用的是Spring Security，并且想访问错误页面中的主体，则必须配置Spring Security的过滤器以在错误分派时调用。为此，请将 &lt;code&gt;spring.security.filter.dispatcher-types&lt;/code&gt; 属性设置为 &lt;code&gt;async, error, forward, request&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dfe22ff6e01c6cfef79e8663750e04704e48b3b7" translate="yes" xml:space="preserve">
          <source>If you are using Tomcat and terminating SSL at the proxy, &lt;code&gt;server.tomcat.redirect-context-root&lt;/code&gt; should be set to &lt;code&gt;false&lt;/code&gt;. This allows the &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; header to be honored before any redirects are performed.</source>
          <target state="translated">如果您正在使用Tomcat并在代理处终止SSL，则应该将 &lt;code&gt;server.tomcat.redirect-context-root&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; 。这允许在执行任何重定向之前遵守 &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; 标头。</target>
        </trans-unit>
        <trans-unit id="bfd7838128881e3fb03548b986c6f1d54266c73f" translate="yes" xml:space="preserve">
          <source>If you are using a &lt;a href=&quot;spring-boot-features#howto-use-a-higher-level-database-migration-tool&quot;&gt;Higher-level Database Migration Tool&lt;/a&gt;, like Flyway or Liquibase, you should use them alone to create and initialize the schema. Using the basic &lt;code&gt;schema.sql&lt;/code&gt; and &lt;code&gt;data.sql&lt;/code&gt; scripts alongside Flyway or Liquibase is not recommended and support will be removed in a future release.</source>
          <target state="translated">如果使用的是Flyway或Liquibase等&lt;a href=&quot;spring-boot-features#howto-use-a-higher-level-database-migration-tool&quot;&gt;高级数据库迁移工具&lt;/a&gt;，则应单独使用它们来创建和初始化架构。使用基本 &lt;code&gt;schema.sql&lt;/code&gt; 文件和 &lt;code&gt;data.sql&lt;/code&gt; 脚本一起迁徙路线或Liquibase不建议和支持，将在未来的版本中删除。</target>
        </trans-unit>
        <trans-unit id="c131f23884a2011494b4ed0eecf08b99d8079b9b" translate="yes" xml:space="preserve">
          <source>If you are using an &lt;code&gt;additional-spring-configuration-metadata.json&lt;/code&gt; file, the &lt;code&gt;compileJava&lt;/code&gt; task should be configured to depend on the &lt;code&gt;processResources&lt;/code&gt; task, as shown in the following example:</source>
          <target state="translated">如果您使用的是 &lt;code&gt;additional-spring-configuration-metadata.json&lt;/code&gt; 文件，则应将 &lt;code&gt;compileJava&lt;/code&gt; 任务配置为依赖于 &lt;code&gt;processResources&lt;/code&gt; 任务，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="8b956c5c5ac128896b08fe62ec5930aa1c6e8511" translate="yes" xml:space="preserve">
          <source>If you are using the Logback, it&amp;rsquo;s possible to fine-tune log rotation settings using your &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yaml&lt;/code&gt; file. For all other logging system, you&amp;rsquo;ll need to configure rotation settings directly yourself (for example, if you use Log4J2 then you could add a &lt;code&gt;log4j.xml&lt;/code&gt; file).</source>
          <target state="translated">如果使用的是Logback，则可以使用 &lt;code&gt;application.properties&lt;/code&gt; 或 &lt;code&gt;application.yaml&lt;/code&gt; 文件微调日志轮转设置。对于所有其他日志记录系统，您需要直接自己配置轮转设置（例如，如果使用Log4J2，则可以添加 &lt;code&gt;log4j.xml&lt;/code&gt; 文件）。</target>
        </trans-unit>
        <trans-unit id="edf243125d0c77115aa8fca8edbbb8b2b9375874" translate="yes" xml:space="preserve">
          <source>If you are using the reactive driver, Netty is required for SSL. The auto-configuration configures this factory automatically if Netty is available and the factory to use hasn&amp;rsquo;t been customized already.</source>
          <target state="translated">如果您使用反应性驱动程序，则SSL需要Netty。如果可以使用Netty并且尚未自定义要使用的工厂，则自动配置会自动配置该工厂。</target>
        </trans-unit>
        <trans-unit id="05520dba572bb1905e02c1e6e1ec3df9015e5fe7" translate="yes" xml:space="preserve">
          <source>If you are using this feature in your tests, you may notice that the same database is reused by your whole test suite regardless of the number of application contexts that you use. If you want to make sure that each context has a separate embedded database, you should set &lt;code&gt;spring.datasource.generate-unique-name&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">如果您在测试中使用此功能，则可能会注意到整个数据库都重复使用了相同的数据库，而不管您使用的应用程序上下文有多少。如果要确保每个上下文都有一个单独的嵌入式数据库，则应将 &lt;code&gt;spring.datasource.generate-unique-name&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="05e6855885545354f8fd8ce0c037ee718eb5398b" translate="yes" xml:space="preserve">
          <source>If you are using this feature in your tests, you may notice that the same database is reused by your whole test suite regardless of the number of application contexts that you use. If you want to make sure that each context has a separate embedded database, you should set &lt;code&gt;spring.r2dbc.generate-unique-name&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">如果您在测试中使用此功能，则可能会注意到整个数据库都重复使用了相同的数据库，而不管您使用的应用程序上下文有多少。如果要确保每个上下文都有一个单独的嵌入式数据库，则应将 &lt;code&gt;spring.r2dbc.generate-unique-name&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9dd8c015cf84b363aa62ca5e595e0231f5e6cd92" translate="yes" xml:space="preserve">
          <source>If you cannot directly import your project into your IDE, you may be able to generate IDE metadata by using a build plugin. Maven includes plugins for &lt;a href=&quot;https://maven.apache.org/plugins/maven-eclipse-plugin/&quot;&gt;Eclipse&lt;/a&gt; and &lt;a href=&quot;https://maven.apache.org/plugins/maven-idea-plugin/&quot;&gt;IDEA&lt;/a&gt;. Gradle offers plugins for &lt;a href=&quot;https://docs.gradle.org/current/userguide/userguide.html&quot;&gt;various IDEs&lt;/a&gt;.</source>
          <target state="translated">如果您不能直接将项目导入到IDE中，则可以使用构建插件来生成IDE元数据。Maven包括&lt;a href=&quot;https://maven.apache.org/plugins/maven-eclipse-plugin/&quot;&gt;Eclipse&lt;/a&gt;和&lt;a href=&quot;https://maven.apache.org/plugins/maven-idea-plugin/&quot;&gt;IDEA的&lt;/a&gt;插件。Gradle提供了用于&lt;a href=&quot;https://docs.gradle.org/current/userguide/userguide.html&quot;&gt;各种IDE的&lt;/a&gt;插件。</target>
        </trans-unit>
        <trans-unit id="2e1416e745b3105c9ecfa3be5a4e9a97b683dc41" translate="yes" xml:space="preserve">
          <source>If you cannot rearrange your code as recommended above, Spring Boot&amp;rsquo;s Maven and Gradle plugins must be configured to produce a separate artifact that is suitable for use as a dependency. The executable archive cannot be used as a dependency as the &lt;a href=&quot;appendix-executable-jar-format#executable-jar-jar-file-structure&quot;&gt;executable jar format&lt;/a&gt; packages application classes in &lt;code&gt;BOOT-INF/classes&lt;/code&gt;. This means that they cannot be found when the executable jar is used as a dependency.</source>
          <target state="translated">如果您不能按照上面的建议重新排列代码，则必须配置Spring Boot的Maven和Gradle插件以生成一个单独的工件，该工件适合用作依赖项。可执行存档不能用作依赖项，因为&lt;a href=&quot;appendix-executable-jar-format#executable-jar-jar-file-structure&quot;&gt;可执行jar格式将&lt;/a&gt; &lt;code&gt;BOOT-INF/classes&lt;/code&gt; 中的应用程序类打包。这意味着当将可执行jar用作依赖项时，找不到它们。</target>
        </trans-unit>
        <trans-unit id="067795ebdf1ea98f333665ce2d5b161d9e32b9e8" translate="yes" xml:space="preserve">
          <source>If you configured Spring Boot&amp;rsquo;s Maven or Gradle plugin to generate a &lt;a href=&quot;#deployment-install&quot;&gt;fully executable jar&lt;/a&gt;, and you do not use a custom &lt;code&gt;embeddedLaunchScript&lt;/code&gt;, your application can be used as an &lt;code&gt;init.d&lt;/code&gt; service. To do so, symlink the jar to &lt;code&gt;init.d&lt;/code&gt; to support the standard &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;stop&lt;/code&gt;, &lt;code&gt;restart&lt;/code&gt;, and &lt;code&gt;status&lt;/code&gt; commands.</source>
          <target state="translated">如果您将Spring Boot的Maven或Gradle插件配置为生成&lt;a href=&quot;#deployment-install&quot;&gt;完全可执行的jar&lt;/a&gt;，并且不使用自定义的 &lt;code&gt;embeddedLaunchScript&lt;/code&gt; ，则您的应用程序可以用作 &lt;code&gt;init.d&lt;/code&gt; 服务。为此，将jar链接到 &lt;code&gt;init.d&lt;/code&gt; 以支持标准的 &lt;code&gt;start&lt;/code&gt; ， &lt;code&gt;stop&lt;/code&gt; ， &lt;code&gt;restart&lt;/code&gt; 和 &lt;code&gt;status&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="98908532d1f8d21726a3861095dedde92d9849d6" translate="yes" xml:space="preserve">
          <source>If you create your own &lt;code&gt;DataSource&lt;/code&gt;, the auto-configuration backs off. In the following example, we provide the &lt;em&gt;exact&lt;/em&gt; same feature set as the auto-configuration provides on the primary data source:</source>
          <target state="translated">如果您创建自己的 &lt;code&gt;DataSource&lt;/code&gt; ，则自动配置将退出。在以下示例中，我们提供与自动配置在主数据源上提供的功能&lt;em&gt;完全相同的&lt;/em&gt;功能集：</target>
        </trans-unit>
        <trans-unit id="2672658ebc1866e6d769e12ae0ce9c5706ba2f3b" translate="yes" xml:space="preserve">
          <source>If you define a &lt;code&gt;@Configuration&lt;/code&gt; with a &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; or a &lt;code&gt;SecurityFilterChain&lt;/code&gt; bean in your application, it switches off the default webapp security settings in Spring Boot.</source>
          <target state="translated">如果您在应用程序中使用 &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; 或 &lt;code&gt;SecurityFilterChain&lt;/code&gt; Bean定义 &lt;code&gt;@Configuration&lt;/code&gt; ，它将关闭Spring Boot中的默认Webapp安全设置。</target>
        </trans-unit>
        <trans-unit id="c636f1aaf4734726a0548a7390524c321ca38041" translate="yes" xml:space="preserve">
          <source>If you define a set of configuration keys for your own components, we recommend you group them in a POJO annotated with &lt;code&gt;@ConfigurationProperties&lt;/code&gt;. Doing so will provide you with structured, type-safe object that you can inject into your own beans.</source>
          <target state="translated">如果您为自己的组件定义了一组配置键，我们建议您将它们组合在以 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 注释的POJO中。这样做将为您提供结构化的，类型安全的对象，您可以将其注入到自己的bean中。</target>
        </trans-unit>
        <trans-unit id="8c35739402b23e941af22d8094f19e566b03d4b5" translate="yes" xml:space="preserve">
          <source>If you deploy applications behind a firewall, you may prefer that all your actuator endpoints can be accessed without requiring authentication. You can do so by changing the &lt;code&gt;management.endpoints.web.exposure.include&lt;/code&gt; property, as follows:</source>
          <target state="translated">如果将应用程序部署在防火墙后面，则可能希望可以在不进行身份验证的情况下访问所有执行器端点。您可以通过更改 &lt;code&gt;management.endpoints.web.exposure.include&lt;/code&gt; 属性来做到这一点，如下所示：</target>
        </trans-unit>
        <trans-unit id="883fd3f10db0d06e07b96d09a42c261f2b172826" translate="yes" xml:space="preserve">
          <source>If you deploy your Spring Boot application to an Application Server, you might want to configure and manage your DataSource by using your Application Server&amp;rsquo;s built-in features and access it by using JNDI.</source>
          <target state="translated">如果您将Spring Boot应用程序部署到Application Server，则可能需要使用Application Server的内置功能来配置和管理DataSource，并使用JNDI对其进行访问。</target>
        </trans-unit>
        <trans-unit id="fb3dbe4457474d9e997af1f8f93f241a3f364bc6" translate="yes" xml:space="preserve">
          <source>If you develop a RESTful API that makes use of hypermedia, Spring Boot provides auto-configuration for Spring HATEOAS that works well with most applications. The auto-configuration replaces the need to use &lt;code&gt;@EnableHypermediaSupport&lt;/code&gt; and registers a number of beans to ease building hypermedia-based applications, including a &lt;code&gt;LinkDiscoverers&lt;/code&gt; (for client side support) and an &lt;code&gt;ObjectMapper&lt;/code&gt; configured to correctly marshal responses into the desired representation. The &lt;code&gt;ObjectMapper&lt;/code&gt; is customized by setting the various &lt;code&gt;spring.jackson.*&lt;/code&gt; properties or, if one exists, by a &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; bean.</source>
          <target state="translated">如果您开发使用超媒体的RESTful API，Spring Boot会为Spring HATEOAS提供自动配置，该配置可与大多数应用程序很好地兼容。自动配置取代了使用 &lt;code&gt;@EnableHypermediaSupport&lt;/code&gt; 的需要，并注册了许多bean来简化基于超媒体的应用程序的构建，包括一个 &lt;code&gt;LinkDiscoverers&lt;/code&gt; （用于客户端支持）和一个 &lt;code&gt;ObjectMapper&lt;/code&gt; ，该对象被配置为将响应正确地编组为所需的表示形式。该 &lt;code&gt;ObjectMapper&lt;/code&gt; 通过设置各种定制 &lt;code&gt;spring.jackson.*&lt;/code&gt; 属性或，如果存在的话，通过 &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; 豆。</target>
        </trans-unit>
        <trans-unit id="e640f000e6c85523f506a8513e0dc4ae9704d1e3" translate="yes" xml:space="preserve">
          <source>If you develop features for the CLI and want access to the version you built, use the following commands:</source>
          <target state="translated">如果你为CLI开发功能,并希望访问你建立的版本,请使用以下命令。</target>
        </trans-unit>
        <trans-unit id="6d96532f6bfc3ad5c05d22aa7064c0fc1c162c75" translate="yes" xml:space="preserve">
          <source>If you directly use &lt;code&gt;@ComponentScan&lt;/code&gt; (that is, not through &lt;code&gt;@SpringBootApplication&lt;/code&gt;) you need to register the &lt;code&gt;TypeExcludeFilter&lt;/code&gt; with it. See &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/context/TypeExcludeFilter.html&quot;&gt;the Javadoc&lt;/a&gt; for details.</source>
          <target state="translated">如果直接使用 &lt;code&gt;@ComponentScan&lt;/code&gt; （即不是通过 &lt;code&gt;@SpringBootApplication&lt;/code&gt; ），则需要向其注册 &lt;code&gt;TypeExcludeFilter&lt;/code&gt; 。有关详细信息，请参见&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/context/TypeExcludeFilter.html&quot;&gt;Javadoc&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cd797ff5b99b886acbfe487fea3802da0e0e0b96" translate="yes" xml:space="preserve">
          <source>If you do not add any specific cache library, Spring Boot auto-configures a &lt;a href=&quot;#boot-features-caching-provider-simple&quot;&gt;simple provider&lt;/a&gt; that uses concurrent maps in memory. When a cache is required (such as &lt;code&gt;piDecimals&lt;/code&gt; in the preceding example), this provider creates it for you. The simple provider is not really recommended for production usage, but it is great for getting started and making sure that you understand the features. When you have made up your mind about the cache provider to use, please make sure to read its documentation to figure out how to configure the caches that your application uses. Nearly all providers require you to explicitly configure every cache that you use in the application. Some offer a way to customize the default caches defined by the &lt;code&gt;spring.cache.cache-names&lt;/code&gt; property.</source>
          <target state="translated">如果您不添加任何特定的缓存库，Spring Boot会自动配置一个使用内存中并发映射的&lt;a href=&quot;#boot-features-caching-provider-simple&quot;&gt;简单提供程序&lt;/a&gt;。当需要缓存时（例如上例中的 &lt;code&gt;piDecimals&lt;/code&gt; ），此提供程序将为您创建它。实际上，不建议将简单的提供程序用于生产用途，但是它对于入门并确保您了解功能非常有用。确定要使用的缓存提供程序后，请确保阅读其文档，以了解如何配置应用程序使用的缓存。几乎所有提供程序都要求您显式配置在应用程序中使用的每个缓存。有些提供自定义 &lt;code&gt;spring.cache.cache-names&lt;/code&gt; 属性定义的默认缓存的方法。</target>
        </trans-unit>
        <trans-unit id="e1195ef13fcdbb776b42405c681e2cdd130ce13d" translate="yes" xml:space="preserve">
          <source>If you do not configure a custom port, the embedded support uses a random port (rather than 27017) by default.</source>
          <target state="translated">如果不配置自定义端口,嵌入式支持默认使用随机端口(而不是27017)。</target>
        </trans-unit>
        <trans-unit id="572e4a51e86ee775c1d5a55bd855c853dafc1900" translate="yes" xml:space="preserve">
          <source>If you do not like &lt;code&gt;application&lt;/code&gt; as the configuration file name, you can switch to another file name by specifying a &lt;code&gt;spring.config.name&lt;/code&gt; environment property. You can also refer to an explicit location by using the &lt;code&gt;spring.config.location&lt;/code&gt; environment property (which is a comma-separated list of directory locations or file paths). The following example shows how to specify a different file name:</source>
          <target state="translated">如果您不喜欢 &lt;code&gt;application&lt;/code&gt; 作为配置文件名，则可以通过指定 &lt;code&gt;spring.config.name&lt;/code&gt; 环境属性来切换到另一个文件名。您还可以通过使用 &lt;code&gt;spring.config.location&lt;/code&gt; 环境属性（目录位置或文件路径的逗号分隔列表）来引用显式位置。下面的示例显示如何指定其他文件名：</target>
        </trans-unit>
        <trans-unit id="77ea2d44a9405526e6b8c24fef8f43264ba0a980" translate="yes" xml:space="preserve">
          <source>If you do not like having the config file next to the jar file, you can set a &lt;code&gt;CONF_FOLDER&lt;/code&gt; environment variable to customize the location of the config file.</source>
          <target state="translated">如果您不喜欢将配置文件放在jar文件旁边，则可以设置 &lt;code&gt;CONF_FOLDER&lt;/code&gt; 环境变量以自定义配置文件的位置。</target>
        </trans-unit>
        <trans-unit id="c4bfbdb330c48412b055343c957c46e353da2761" translate="yes" xml:space="preserve">
          <source>If you do not need to customize these providers, you can set the &lt;code&gt;provider&lt;/code&gt; attribute to the one for which you need to infer defaults. Also, if the key for the client registration matches a default supported provider, Spring Boot infers that as well.</source>
          <target state="translated">如果不需要自定义这些提供程序，则可以将 &lt;code&gt;provider&lt;/code&gt; 属性设置为需要为其推断默认值的属性。另外，如果用于客户端注册的密钥与默认的受支持提供者匹配，Spring Boot也会推断出该提供者。</target>
        </trans-unit>
        <trans-unit id="286bd44c15de3af8649c2960e6f83645cf0b5f9b" translate="yes" xml:space="preserve">
          <source>If you do not see the app manifest, your installation of scoop might be out-of-date. In that case, run &lt;code&gt;scoop update&lt;/code&gt; and try again.</source>
          <target state="translated">如果您没有看到应用清单，则可能是因为瓢的安装已过期。在这种情况下，请运行 &lt;code&gt;scoop update&lt;/code&gt; 然后重试。</target>
        </trans-unit>
        <trans-unit id="4873e99b17e201f7a7608b884527c464dacc55ed" translate="yes" xml:space="preserve">
          <source>If you do not see the formula, your installation of brew might be out-of-date. In that case, run &lt;code&gt;brew update&lt;/code&gt; and try again.</source>
          <target state="translated">如果看不到该公式，则说明brew的安装可能已过期。在这种情况下，请运行 &lt;code&gt;brew update&lt;/code&gt; 然后重试。</target>
        </trans-unit>
        <trans-unit id="596fd66868a8d0bfe49b534d11df783839bdeae0" translate="yes" xml:space="preserve">
          <source>If you do not specify any order on your custom &lt;code&gt;RepositoryRestConfigurer&lt;/code&gt;, it runs after the one Spring Boot uses internally. If you need to specify an order, make sure it is higher than 0.</source>
          <target state="translated">如果您未在自定义 &lt;code&gt;RepositoryRestConfigurer&lt;/code&gt; 上指定任何顺序，则该顺序在一个Spring Boot内部使用之后运行。如果您需要指定订单，请确保该订单大于0。</target>
        </trans-unit>
        <trans-unit id="99500ffbaeb6ae788d7f4d830ac1edeb70424552" translate="yes" xml:space="preserve">
          <source>If you do not use &lt;code&gt;Repackager.setMainClass()&lt;/code&gt; to specify a main class, the repackager uses &lt;a href=&quot;https://asm.ow2.io/&quot;&gt;ASM&lt;/a&gt; to read class files and tries to find a suitable class with a &lt;code&gt;public static void main(String[] args)&lt;/code&gt; method. An exception is thrown if more than one candidate is found.</source>
          <target state="translated">如果不使用 &lt;code&gt;Repackager.setMainClass()&lt;/code&gt; 指定主类，则重新包装器将使用&lt;a href=&quot;https://asm.ow2.io/&quot;&gt;ASM&lt;/a&gt;读取类文件，并尝试使用 &lt;code&gt;public static void main(String[] args)&lt;/code&gt; 方法查找合适的类。如果找到多个候选者，则会引发异常。</target>
        </trans-unit>
        <trans-unit id="c6a503e19e5acfc17e937caaab83c896a3cf8668" translate="yes" xml:space="preserve">
          <source>If you do not use Spring Data MongoDB, you can inject a &lt;code&gt;MongoClient&lt;/code&gt; bean instead of using &lt;code&gt;MongoDatabaseFactory&lt;/code&gt;. If you want to take complete control of establishing the MongoDB connection, you can also declare your own &lt;code&gt;MongoDatabaseFactory&lt;/code&gt; or &lt;code&gt;MongoClient&lt;/code&gt; bean.</source>
          <target state="translated">如果您不使用Spring Data MongoDB，则可以注入 &lt;code&gt;MongoClient&lt;/code&gt; bean而不是使用 &lt;code&gt;MongoDatabaseFactory&lt;/code&gt; 。如果要完全控制建立MongoDB连接的方式，还可以声明自己的 &lt;code&gt;MongoDatabaseFactory&lt;/code&gt; 或 &lt;code&gt;MongoClient&lt;/code&gt; bean。</target>
        </trans-unit>
        <trans-unit id="1c70dec476cb39d4fcd78e29d7a2699c63c9bfa1" translate="yes" xml:space="preserve">
          <source>If you do not use the parent POM, you can still use the plugin. However, you must additionally add an &lt;code&gt;&amp;lt;executions&amp;gt;&lt;/code&gt; section, as follows:</source>
          <target state="translated">如果您不使用父POM，则仍然可以使用该插件。但是，您必须另外添加一个 &lt;code&gt;&amp;lt;executions&amp;gt;&lt;/code&gt; 部分，如下所示：</target>
        </trans-unit>
        <trans-unit id="677dbf12d0613ba78be9f9db6bf7adb956f8da82" translate="yes" xml:space="preserve">
          <source>If you do not use the starter parent, you need to include the following element inside the &lt;code&gt;&amp;lt;build/&amp;gt;&lt;/code&gt; element of your &lt;code&gt;pom.xml&lt;/code&gt;:</source>
          <target state="translated">如果您不使用入门级父级，则需要在 &lt;code&gt;pom.xml&lt;/code&gt; 的 &lt;code&gt;&amp;lt;build/&amp;gt;&lt;/code&gt; 元素内包括以下元素：</target>
        </trans-unit>
        <trans-unit id="2907284a0f32eaabb6e660a7826923fe16ee9bfe" translate="yes" xml:space="preserve">
          <source>If you do not want command line properties to be added to the &lt;code&gt;Environment&lt;/code&gt;, you can disable them by using &lt;code&gt;SpringApplication.setAddCommandLineProperties(false)&lt;/code&gt;.</source>
          <target state="translated">如果您不希望将命令行属性添加到 &lt;code&gt;Environment&lt;/code&gt; ，则可以使用 &lt;code&gt;SpringApplication.setAddCommandLineProperties(false)&lt;/code&gt; 禁用它们。</target>
        </trans-unit>
        <trans-unit id="8c2e51c44b2cdbd1cb4a58de5a5a3fe0b63092cd" translate="yes" xml:space="preserve">
          <source>If you do not want to expose endpoints over HTTP, you can set the management port to &lt;code&gt;-1&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">如果您不想通过HTTP公开端点，则可以将管理端口设置为 &lt;code&gt;-1&lt;/code&gt; ，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="4e0f28203faca6817dff4899ca6c20a857a0b05c" translate="yes" xml:space="preserve">
          <source>If you do not want to expose endpoints over JMX, you can set the &lt;code&gt;management.endpoints.jmx.exposure.exclude&lt;/code&gt; property to &lt;code&gt;*&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">如果不想通过JMX公开端点，则可以将 &lt;code&gt;management.endpoints.jmx.exposure.exclude&lt;/code&gt; 属性设置为 &lt;code&gt;*&lt;/code&gt; ，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="93dd06ce93bb75b2d0727e88330dd3009585812b" translate="yes" xml:space="preserve">
          <source>If you do not want to start the LiveReload server when your application runs, you can set the &lt;code&gt;spring.devtools.livereload.enabled&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">如果您不想在应用程序运行时启动LiveReload服务器，则可以将 &lt;code&gt;spring.devtools.livereload.enabled&lt;/code&gt; 属性设置为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa9ab43ed20166ff6c7204b4fe4a4c178037c931" translate="yes" xml:space="preserve">
          <source>If you do not want to use the &lt;code&gt;spring-boot-antlib&lt;/code&gt; module, see the &lt;em&gt;&lt;a href=&quot;howto#howto-build-an-executable-archive-with-ant&quot;&gt;howto.html&lt;/a&gt;&lt;/em&gt; &amp;ldquo;How-to&amp;rdquo; .</source>
          <target state="translated">如果您不想使用 &lt;code&gt;spring-boot-antlib&lt;/code&gt; 模块，请参见&lt;em&gt;&lt;a href=&quot;howto#howto-build-an-executable-archive-with-ant&quot;&gt;howto.html&lt;/a&gt;&lt;/em&gt; &amp;ldquo;操作方法&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="b52c60b926effc5b5e0ba51384a4c8045d036ace" translate="yes" xml:space="preserve">
          <source>If you do not want to use the restart feature, you can disable it by using the &lt;code&gt;spring.devtools.restart.enabled&lt;/code&gt; property. In most cases, you can set this property in your &lt;code&gt;application.properties&lt;/code&gt; (doing so still initializes the restart classloader, but it does not watch for file changes).</source>
          <target state="translated">如果您不想使用重新启动功能，则可以使用 &lt;code&gt;spring.devtools.restart.enabled&lt;/code&gt; 属性将其禁用。在大多数情况下，您可以在 &lt;code&gt;application.properties&lt;/code&gt; 中设置此属性（这样做仍会初始化重新启动类加载器，但它不会监视文件更改）。</target>
        </trans-unit>
        <trans-unit id="c2b75265e218cea2fb1af5a03a4a478853886f8a" translate="yes" xml:space="preserve">
          <source>If you do so and your application uses a cache not listed, then it fails at runtime when the cache is needed, but not on startup. This is similar to the way the &quot;real&quot; cache providers behave if you use an undeclared cache.</source>
          <target state="translated">如果您这样做,并且您的应用程序使用了未列出的缓存,那么当需要缓存时,它会在运行时失败,但在启动时不会。这与 &quot;真正的 &quot;缓存提供者在你使用未声明的缓存时的行为方式类似。</target>
        </trans-unit>
        <trans-unit id="3d6ad7a26bac332848a4fd11fe808ec3172723b8" translate="yes" xml:space="preserve">
          <source>If you do want to use &lt;code&gt;@Value&lt;/code&gt;, we recommend that you refer to property names using their canonical form (kebab-case using only lowercase letters). This will allow Spring Boot to use the same logic as it does when relaxed binding &lt;code&gt;@ConfigurationProperties&lt;/code&gt;. For example, &lt;code&gt;@Value(&quot;{demo.item-price}&quot;)&lt;/code&gt; will pick up &lt;code&gt;demo.item-price&lt;/code&gt; and &lt;code&gt;demo.itemPrice&lt;/code&gt; forms from the &lt;code&gt;application.properties&lt;/code&gt; file, as well as &lt;code&gt;DEMO_ITEMPRICE&lt;/code&gt; from the system environment. If you used &lt;code&gt;@Value(&quot;{demo.itemPrice}&quot;)&lt;/code&gt; instead, &lt;code&gt;demo.item-price&lt;/code&gt; and &lt;code&gt;DEMO_ITEMPRICE&lt;/code&gt; would not be considered.</source>
          <target state="translated">如果确实要使用 &lt;code&gt;@Value&lt;/code&gt; ，我们建议您使用规范格式（仅使用小写字母的kebab -case）来引用属性名称。这将允许Spring Boot使用与轻松绑定 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 时相同的逻辑。例如， &lt;code&gt;@Value(&quot;{demo.item-price}&quot;)&lt;/code&gt; 将从 &lt;code&gt;application.properties&lt;/code&gt; 文件中选取 &lt;code&gt;demo.item-price&lt;/code&gt; 和 &lt;code&gt;demo.itemPrice&lt;/code&gt; 表格，并从系统环境中 &lt;code&gt;DEMO_ITEMPRICE&lt;/code&gt; 。如果改用 &lt;code&gt;@Value(&quot;{demo.itemPrice}&quot;)&lt;/code&gt; ， &lt;code&gt;demo.item-price&lt;/code&gt; 不考虑demo.item-price和 &lt;code&gt;DEMO_ITEMPRICE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d5f96d57fb2ec3e8c3e49ab96f21c0959ef416d" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want property defaults to be applied you can set &lt;code&gt;spring.devtools.add-properties&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in your &lt;code&gt;application.properties&lt;/code&gt;.</source>
          <target state="translated">如果你不想被应用属性默认你可以设置 &lt;code&gt;spring.devtools.add-properties&lt;/code&gt; ，以 &lt;code&gt;false&lt;/code&gt; 在 &lt;code&gt;application.properties&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7e2da155550874f24176eb06dfdec04fe5f01ee0" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use &lt;code&gt;@SpringBootApplication&lt;/code&gt;, the &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; and &lt;code&gt;@ComponentScan&lt;/code&gt; annotations that it imports defines that behaviour so you can also use those instead.</source>
          <target state="translated">如果您不想使用 &lt;code&gt;@SpringBootApplication&lt;/code&gt; ，则它导入的 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 和 &lt;code&gt;@ComponentScan&lt;/code&gt; 批注将定义该行为，因此您也可以使用它们。</target>
        </trans-unit>
        <trans-unit id="80ab4b1c1c2897e0159588c65363cabc38e591d7" translate="yes" xml:space="preserve">
          <source>If you enable the &lt;code&gt;addResources&lt;/code&gt; flag, the &lt;code&gt;spring-boot:run&lt;/code&gt; goal can add &lt;code&gt;src/main/resources&lt;/code&gt; directly to the classpath (for hot reloading purposes). Doing so circumvents the resource filtering and this feature. Instead, you can use the &lt;code&gt;exec:java&lt;/code&gt; goal or customize the plugin&amp;rsquo;s configuration. See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#getting-started&quot;&gt;plugin usage page&lt;/a&gt; for more details.</source>
          <target state="translated">如果启用 &lt;code&gt;addResources&lt;/code&gt; 标志，则 &lt;code&gt;spring-boot:run&lt;/code&gt; 目标可以将 &lt;code&gt;src/main/resources&lt;/code&gt; 直接添加到类路径（出于热重载目的）。这样做避免了资源过滤和此功能。相反，您可以使用 &lt;code&gt;exec:java&lt;/code&gt; 目标或自定义插件的配置。有关更多详细信息，请参见&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#getting-started&quot;&gt;插件使用情况页面&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ff516b1e62a693a880fccb43f25eb15cd3727ad" translate="yes" xml:space="preserve">
          <source>If you expect the Cloud Foundry endpoints to always be available at &lt;code&gt;/cloudfoundryapplication/*&lt;/code&gt;, regardless of the server&amp;rsquo;s context-path, you will need to explicitly configure that in your application. The configuration will differ depending on the web server in use. For Tomcat, the following configuration can be added:</source>
          <target state="translated">如果您希望Cloud Foundry端点始终在 &lt;code&gt;/cloudfoundryapplication/*&lt;/code&gt; 上可用，而不管服务器的上下文路径如何，那么您将需要在应用程序中明确配置它。配置将根据所使用的Web服务器而有所不同。对于Tomcat，可以添加以下配置：</target>
        </trans-unit>
        <trans-unit id="40c810cd0a33485d530f19aa3ebc15e39e3aa177" translate="yes" xml:space="preserve">
          <source>If you find that restarts are not quick enough for your applications or you encounter classloading issues, you could consider reloading technologies such as &lt;a href=&quot;https://jrebel.com/software/jrebel/&quot;&gt;JRebel&lt;/a&gt; from ZeroTurnaround. These work by rewriting classes as they are loaded to make them more amenable to reloading.</source>
          <target state="translated">如果发现重新启动对于您的应用程序来说不够快，或者遇到类加载问题，则可以考虑从ZeroTurnaround重新加载技术，例如&lt;a href=&quot;https://jrebel.com/software/jrebel/&quot;&gt;JRebel&lt;/a&gt;。这些方法通过在加载类时重写类来使它们更适合于重新加载。</target>
        </trans-unit>
        <trans-unit id="5f39d7b76b4bbc17ab19022256a5a99a7a4a4ae1" translate="yes" xml:space="preserve">
          <source>If you find that specific auto-configuration classes that you do not want are being applied, you can use the exclude attribute of &lt;code&gt;@SpringBootApplication&lt;/code&gt; to disable them, as shown in the following example:</source>
          <target state="translated">如果发现正在应用不需要的特定自动配置类，则可以使用 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 的exclude属性禁用它们，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="6d8aa4cc188a729fd6c328c3f0b822ba927ff71a" translate="yes" xml:space="preserve">
          <source>If you find that you reach the limit of the CLI tool, you probably want to look at converting your application to a full Gradle or Maven built &amp;ldquo;Groovy project&amp;rdquo;. The next section covers Spring Boot&amp;rsquo;s &quot;&lt;a href=&quot;build-tool-plugins#build-tool-plugins&quot;&gt;Build tool plugins&lt;/a&gt;&quot;, which you can use with Gradle or Maven.</source>
          <target state="translated">如果发现达到了CLI工具的极限，则可能需要考虑将应用程序转换为完整的Gradle或Maven构建的&amp;ldquo; Groovy项目&amp;rdquo;。下一部分将介绍Spring Boot的&amp;ldquo;&lt;a href=&quot;build-tool-plugins#build-tool-plugins&quot;&gt;构建工具插件&lt;/a&gt;&amp;rdquo;，您可以将其与Gradle或Maven一起使用。</target>
        </trans-unit>
        <trans-unit id="a422ea186f8a4891666c0cc4b0bfa4536286bc1f" translate="yes" xml:space="preserve">
          <source>If you fine-tune your logging configuration, ensure that the &lt;code&gt;org.springframework.boot.autoconfigure.security&lt;/code&gt; category is set to log &lt;code&gt;INFO&lt;/code&gt;-level messages. Otherwise, the default password is not printed.</source>
          <target state="translated">如果您微调日志记录配置，请确保将 &lt;code&gt;org.springframework.boot.autoconfigure.security&lt;/code&gt; 类别设置为记录 &lt;code&gt;INFO&lt;/code&gt; 级别的消息。否则，不会打印默认密码。</target>
        </trans-unit>
        <trans-unit id="5f687a1a525bd8570f63a13386fcacf1ce90b0c3" translate="yes" xml:space="preserve">
          <source>If you have &lt;code&gt;spring-security-oauth2-client&lt;/code&gt; on your classpath, you can take advantage of some auto-configuration to set up an OAuth2/Open ID Connect clients. This configuration makes use of the properties under &lt;code&gt;OAuth2ClientProperties&lt;/code&gt;. The same properties are applicable to both servlet and reactive applications.</source>
          <target state="translated">如果您的类路径上有 &lt;code&gt;spring-security-oauth2-client&lt;/code&gt; ，则可以利用一些自动配置功能来设置OAuth2 / Open ID Connect客户端。此配置使用 &lt;code&gt;OAuth2ClientProperties&lt;/code&gt; 下的属性。相同的属性适用于servlet和反应式应用程序。</target>
        </trans-unit>
        <trans-unit id="2fbecc75e706d90289969741b895e5eb3be45a81" translate="yes" xml:space="preserve">
          <source>If you have &lt;code&gt;spring-security-oauth2-resource-server&lt;/code&gt; on your classpath, Spring Boot can set up an OAuth2 Resource Server. For JWT configuration, a JWK Set URI or OIDC Issuer URI needs to be specified, as shown in the following examples:</source>
          <target state="translated">如果您的类路径上有 &lt;code&gt;spring-security-oauth2-resource-server&lt;/code&gt; ，则Spring Boot可以设置OAuth2资源服务器。对于JWT配置，需要指定JWK设置URI或OIDC颁发者URI，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="201030c5751653b70add3760cfda05923500a504" translate="yes" xml:space="preserve">
          <source>If you have &lt;code&gt;spring-security-saml2-service-provider&lt;/code&gt; on your classpath, you can take advantage of some auto-configuration to set up a SAML 2.0 Relying Party. This configuration makes use of the properties under &lt;code&gt;Saml2RelyingPartyProperties&lt;/code&gt;.</source>
          <target state="translated">如果您在类路径中具有 &lt;code&gt;spring-security-saml2-service-provider&lt;/code&gt; ，则可以利用一些自动配置功能来设置SAML 2.0依赖方。此配置利用 &lt;code&gt;Saml2RelyingPartyProperties&lt;/code&gt; 下的属性。</target>
        </trans-unit>
        <trans-unit id="76734cdd777650b6b446cae68ad62d6a501e5c48" translate="yes" xml:space="preserve">
          <source>If you have SLF4J on the classpath, the output produced by Mongo is automatically routed to a logger named &lt;code&gt;org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongo&lt;/code&gt;.</source>
          <target state="translated">如果类路径上有SLF4J，则Mongo产生的输出将自动路由到名为 &lt;code&gt;org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongo&lt;/code&gt; 的记录器。</target>
        </trans-unit>
        <trans-unit id="6a62083652efbcc2f313eccb067051cbe15639f2" translate="yes" xml:space="preserve">
          <source>If you have Spring Security on the classpath, &lt;code&gt;@WebMvcTest&lt;/code&gt; will also scan &lt;code&gt;WebSecurityConfigurer&lt;/code&gt; beans. Instead of disabling security completely for such tests, you can use Spring Security&amp;rsquo;s test support. More details on how to use Spring Security&amp;rsquo;s &lt;code&gt;MockMvc&lt;/code&gt; support can be found in this &lt;em&gt;&lt;a href=&quot;howto#howto-use-test-with-spring-security&quot;&gt;howto.html&lt;/a&gt;&lt;/em&gt; how-to section.</source>
          <target state="translated">如果您在类路径上具有Spring Security，则 &lt;code&gt;@WebMvcTest&lt;/code&gt; 还将扫描 &lt;code&gt;WebSecurityConfigurer&lt;/code&gt; Bean。您可以使用Spring Security的测试支持，而不是完全禁用此类测试的安全性。有关如何使用Spring Security的 &lt;code&gt;MockMvc&lt;/code&gt; 支持的更多详细信息，请参见&lt;em&gt;&lt;a href=&quot;howto#howto-use-test-with-spring-security&quot;&gt;howto.html操作&lt;/a&gt;&lt;/em&gt;方法部分。</target>
        </trans-unit>
        <trans-unit id="a5665ea0983cdde25c86dcaba87b12d687a0146a" translate="yes" xml:space="preserve">
          <source>If you have Spring WebFlux on your classpath, you can also choose to use &lt;code&gt;WebClient&lt;/code&gt; to call remote REST services. Compared to &lt;code&gt;RestTemplate&lt;/code&gt;, this client has a more functional feel and is fully reactive. You can learn more about the &lt;code&gt;WebClient&lt;/code&gt; in the dedicated &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#webflux-client&quot;&gt;section in the Spring Framework docs&lt;/a&gt;.</source>
          <target state="translated">如果您的类路径中包含Spring WebFlux，则还可以选择使用 &lt;code&gt;WebClient&lt;/code&gt; 调用远程REST服务。与 &lt;code&gt;RestTemplate&lt;/code&gt; 相比，此客户端具有更多的功能感，并且具有完全的反应性。您可以&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#webflux-client&quot;&gt;在Spring Framework文档&lt;/a&gt;的专用部分中了解有关 &lt;code&gt;WebClient&lt;/code&gt; 的更多信息。</target>
        </trans-unit>
        <trans-unit id="21a74ffc0736d410c7d1f911a30f8432e41311b3" translate="yes" xml:space="preserve">
          <source>If you have a specific problem that we do not cover here, you might want to check out &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;stackoverflow.com&lt;/a&gt; to see if someone has already provided an answer. This is also a great place to ask new questions (please use the &lt;code&gt;spring-boot&lt;/code&gt; tag).</source>
          <target state="translated">如果您有一个我们不在此讨论的特定问题，则可能需要查看&lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;stackoverflow.com&lt;/a&gt;来查看是否有人已经提供了答案。这也是一个提出新问题的好地方（请使用 &lt;code&gt;spring-boot&lt;/code&gt; 标签）。</target>
        </trans-unit>
        <trans-unit id="07c39edaeec8bed76f02a5dca942ad05cd716793" translate="yes" xml:space="preserve">
          <source>If you have additional servlets you can declare a &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;Servlet&lt;/code&gt; or &lt;code&gt;ServletRegistrationBean&lt;/code&gt; for each and Spring Boot will register them transparently to the container. Because servlets are registered that way, they can be mapped to a sub-context of the &lt;code&gt;DispatcherServlet&lt;/code&gt; without invoking it.</source>
          <target state="translated">如果您还有其他servlet，则可以为每个 &lt;code&gt;Servlet&lt;/code&gt; 声明一个 &lt;code&gt;@Bean&lt;/code&gt; 或 &lt;code&gt;ServletRegistrationBean&lt;/code&gt; 类型，Spring Boot会将它们透明地注册到容器中。因为servlet是通过这种方式注册的，所以可以将它们映射到 &lt;code&gt;DispatcherServlet&lt;/code&gt; 的子上下文，而无需调用它。</target>
        </trans-unit>
        <trans-unit id="b1e45b090ba703513c976aba2f9c4e67059ad748" translate="yes" xml:space="preserve">
          <source>If you have defined &lt;code&gt;@ConfigurationProperties&lt;/code&gt; in your application, make sure to configure the &lt;code&gt;spring-boot-maven-plugin&lt;/code&gt; to prevent the &lt;code&gt;repackage&lt;/code&gt; goal from adding the dependency into the fat jar:</source>
          <target state="translated">如果您在应用程序中定义了 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; ，请确保配置 &lt;code&gt;spring-boot-maven-plugin&lt;/code&gt; ,以防止 &lt;code&gt;repackage&lt;/code&gt; 目标将依赖项添加到胖罐中：</target>
        </trans-unit>
        <trans-unit id="d50a98d1d9e4fb31019dd3bbcf2face1824431be" translate="yes" xml:space="preserve">
          <source>If you have defined a custom &lt;code&gt;Executor&lt;/code&gt; in the context, regular task execution (i.e. &lt;code&gt;@EnableAsync&lt;/code&gt;) will use it transparently but the Spring MVC support will not be configured as it requires an &lt;code&gt;AsyncTaskExecutor&lt;/code&gt; implementation (named &lt;code&gt;applicationTaskExecutor&lt;/code&gt;). Depending on your target arrangement, you could change your &lt;code&gt;Executor&lt;/code&gt; into a &lt;code&gt;ThreadPoolTaskExecutor&lt;/code&gt; or define both a &lt;code&gt;ThreadPoolTaskExecutor&lt;/code&gt; and an &lt;code&gt;AsyncConfigurer&lt;/code&gt; wrapping your custom &lt;code&gt;Executor&lt;/code&gt;.</source>
          <target state="translated">如果您在上下文中定义了一个自定义 &lt;code&gt;Executor&lt;/code&gt; ，则常规任务执行（即 &lt;code&gt;@EnableAsync&lt;/code&gt; ）将透明地使用它，但由于需要 &lt;code&gt;AsyncTaskExecutor&lt;/code&gt; 实现（名为 &lt;code&gt;applicationTaskExecutor&lt;/code&gt; ），因此不会配置Spring MVC支持。根据您的目标安排，您可以将 &lt;code&gt;Executor&lt;/code&gt; 更改为 &lt;code&gt;ThreadPoolTaskExecutor&lt;/code&gt; 或者定义 &lt;code&gt;ThreadPoolTaskExecutor&lt;/code&gt; 和包装您的自定义 &lt;code&gt;Executor&lt;/code&gt; 的 &lt;code&gt;AsyncConfigurer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="859b83b63e6a1341a8c262b7c49945de61cdef58" translate="yes" xml:space="preserve">
          <source>If you have defined auto-configurations directly in your application, make sure to configure the &lt;code&gt;spring-boot-maven-plugin&lt;/code&gt; to prevent the &lt;code&gt;repackage&lt;/code&gt; goal from adding the dependency into the fat jar:</source>
          <target state="translated">如果您直接在应用程序中定义了自动配置，请确保配置 &lt;code&gt;spring-boot-maven-plugin&lt;/code&gt; ,以防止 &lt;code&gt;repackage&lt;/code&gt; 目标将依赖项添加到胖子jar中：</target>
        </trans-unit>
        <trans-unit id="0bb8d4f7758fe7f84dfba4e21c69ce64ea2fb8fd" translate="yes" xml:space="preserve">
          <source>If you have defined your own &lt;code&gt;MongoClient&lt;/code&gt;, it will be used to auto-configure a suitable &lt;code&gt;MongoDatabaseFactory&lt;/code&gt;.</source>
          <target state="translated">如果您定义了自己的 &lt;code&gt;MongoClient&lt;/code&gt; ，它将用于自动配置合适的 &lt;code&gt;MongoDatabaseFactory&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="25abd91a273c532909adc1cf6e522ab5aa09c1d0" translate="yes" xml:space="preserve">
          <source>If you have more than one constructor for your class you can also use &lt;code&gt;@ConstructorBinding&lt;/code&gt; directly on the constructor that should be bound.</source>
          <target state="translated">如果您的类具有多个构造函数，则还可以直接在应绑定的构造函数上使用 &lt;code&gt;@ConstructorBinding&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f68630916b5368d7c00d99716cb15d78c1642280" translate="yes" xml:space="preserve">
          <source>If you have multiple config trees to import from the same parent folder you can use a wildcard shortcut. Any &lt;code&gt;configtree:&lt;/code&gt; location that ends with &lt;code&gt;/*/&lt;/code&gt; will import all immediate children as config trees.</source>
          <target state="translated">如果要从同一父文件夹导入多个配置树，则可以使用通配符快捷方式。任何以 &lt;code&gt;/*/&lt;/code&gt; 结尾的 &lt;code&gt;configtree:&lt;/code&gt; 位置都将所有直接子级都导入为配置树。</target>
        </trans-unit>
        <trans-unit id="3cc76db5d69134291dcd80ae7838beb34df6bd54" translate="yes" xml:space="preserve">
          <source>If you have not defined a bean of type &lt;code&gt;CacheManager&lt;/code&gt; or a &lt;code&gt;CacheResolver&lt;/code&gt; named &lt;code&gt;cacheResolver&lt;/code&gt; (see &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/cache/annotation/CachingConfigurer.html&quot;&gt;&lt;code&gt;CachingConfigurer&lt;/code&gt;&lt;/a&gt;), Spring Boot tries to detect the following providers (in the indicated order):</source>
          <target state="translated">如果你还没有定义类型的一个bean &lt;code&gt;CacheManager&lt;/code&gt; 或 &lt;code&gt;CacheResolver&lt;/code&gt; 命名 &lt;code&gt;cacheResolver&lt;/code&gt; （见&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/cache/annotation/CachingConfigurer.html&quot;&gt; &lt;code&gt;CachingConfigurer&lt;/code&gt; &lt;/a&gt;），弹簧引导尝试检测以下提供商（在指定的顺序）：</target>
        </trans-unit>
        <trans-unit id="10de8cb70e557fd28080f90ae45d3502d1c4a15d" translate="yes" xml:space="preserve">
          <source>If you have not used the &lt;code&gt;spring-test&lt;/code&gt; module before, you should start by reading the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#testing&quot;&gt;relevant section&lt;/a&gt; of the Spring Framework reference documentation.</source>
          <target state="translated">如果您以前没有使用过 &lt;code&gt;spring-test&lt;/code&gt; 模块，则应先阅读Spring Framework参考文档的&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#testing&quot;&gt;相关部分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c42b6d6b1791832635106f18290ce09a1be255bd" translate="yes" xml:space="preserve">
          <source>If you have not yet developed a Spring Boot web application, you can follow the &quot;Hello World!&quot; example in the &lt;em&gt;&lt;a href=&quot;getting-started#getting-started-first-application&quot;&gt;Getting started&lt;/a&gt;&lt;/em&gt; section.</source>
          <target state="translated">如果尚未开发Spring Boot Web应用程序，则可以遵循&amp;ldquo; Hello World！&amp;rdquo;。&lt;em&gt;&lt;a href=&quot;getting-started#getting-started-first-application&quot;&gt;入门&lt;/a&gt;&lt;/em&gt;部分中的示例。</target>
        </trans-unit>
        <trans-unit id="01997769b9678453e3fab939995fe9dcfe1a8483" translate="yes" xml:space="preserve">
          <source>If you have secured your application and wish to use &lt;code&gt;always&lt;/code&gt;, your security configuration must permit access to the health endpoint for both authenticated and unauthenticated users.</source>
          <target state="translated">如果您已保护应用程序安全并希望 &lt;code&gt;always&lt;/code&gt; 使用它，则您的安全配置必须允许经过身份验证的用户和未经身份验证的用户都可以访问运行状况终结点。</target>
        </trans-unit>
        <trans-unit id="b6ed615205e2626f6521e37f6a16e5816b461e6d" translate="yes" xml:space="preserve">
          <source>If you have specific build-related questions, you can check out the &amp;ldquo;&lt;a href=&quot;howto#howto&quot;&gt;how-to&lt;/a&gt;&amp;rdquo; guides.</source>
          <target state="translated">如果您有与构建相关的特定问题，可以查看&amp;ldquo;操作&lt;a href=&quot;howto#howto&quot;&gt;方法&lt;/a&gt;&amp;rdquo;指南。</target>
        </trans-unit>
        <trans-unit id="f3c1698517634f85ec291f2f4f4c13255ce0638c" translate="yes" xml:space="preserve">
          <source>If you have tests that use JUnit 4, JUnit 5&amp;rsquo;s vintage engine can be used to run them. To use the vintage engine, add a dependency on &lt;code&gt;junit-vintage-engine&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">如果您有使用JUnit 4的测试，则可以使用JUnit 5的老式引擎来运行它们。要使用vintage引擎，请添加对 &lt;code&gt;junit-vintage-engine&lt;/code&gt; 的依赖关系，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="416eceaab3353a2d269cb750bbcc4b78d5974321" translate="yes" xml:space="preserve">
          <source>If you have the Jackson XML extension (&lt;code&gt;jackson-dataformat-xml&lt;/code&gt;) on the classpath, you can use it to render XML responses. The previous example that we used for JSON would work. To use the Jackson XML renderer, add the following dependency to your project:</source>
          <target state="translated">如果类路径上具有Jackson XML扩展名（ &lt;code&gt;jackson-dataformat-xml&lt;/code&gt; ），则可以使用它来呈现XML响应。我们用于JSON的上一个示例可以正常工作。要使用Jackson XML渲染器，请将以下依赖项添加到您的项目中：</target>
        </trans-unit>
        <trans-unit id="b8bf2321af198c2cfecf3dc6f2dd4931dab0667b" translate="yes" xml:space="preserve">
          <source>If you have this dependency on the classpath, Spring Boot will auto-configure and register a &lt;code&gt;RestHighLevelClient&lt;/code&gt; bean that by default targets &lt;code&gt;&lt;a href=&quot;http://localhost:9200&quot;&gt;localhost:9200&lt;/a&gt;&lt;/code&gt;. You can further tune how &lt;code&gt;RestHighLevelClient&lt;/code&gt; is configured, as shown in the following example:</source>
          <target state="translated">如果您对类路径具有这种依赖关系，Spring Boot将自动配置并注册一个 &lt;code&gt;RestHighLevelClient&lt;/code&gt; bean，默认情况下它针对 &lt;code&gt;&lt;a href=&quot;http://localhost:9200&quot;&gt;localhost:9200&lt;/a&gt;&lt;/code&gt; 。您可以进一步调整 &lt;code&gt;RestHighLevelClient&lt;/code&gt; 的配置方式，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="00d335f931dbac6b9156a7cb7ed6c3adf93fab5f" translate="yes" xml:space="preserve">
          <source>If you have trouble with Spring Boot, we would like to help.</source>
          <target state="translated">如果您在使用Spring Boot时遇到困难,我们愿意提供帮助。</target>
        </trans-unit>
        <trans-unit id="aaa462e576cf3636233ff044fd52aa53df90956c" translate="yes" xml:space="preserve">
          <source>If you inherit from the &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; POM, the default filter token of the &lt;code&gt;maven-resources-plugins&lt;/code&gt; has been changed from &lt;code&gt;${*}&lt;/code&gt; to &lt;code&gt;@&lt;/code&gt; (that is, &lt;code&gt;@maven.token@&lt;/code&gt; instead of &lt;code&gt;${maven.token}&lt;/code&gt;) to prevent conflicts with Spring-style placeholders. If you have enabled Maven filtering for the &lt;code&gt;application.properties&lt;/code&gt; directly, you may want to also change the default filter token to use &lt;a href=&quot;https://maven.apache.org/plugins/maven-resources-plugin/resources-mojo.html#delimiters&quot;&gt;other delimiters&lt;/a&gt;.</source>
          <target state="translated">如果您从 &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; 父POM继承，则 &lt;code&gt;maven-resources-plugins&lt;/code&gt; 的默认过滤器令牌已从 &lt;code&gt;${*}&lt;/code&gt; 更改为 &lt;code&gt;@&lt;/code&gt; （即 &lt;code&gt;@maven.token@&lt;/code&gt; 而不是 &lt;code&gt;${maven.token}&lt;/code&gt; ）以防止与Spring样式的占位符冲突。如果直接为 &lt;code&gt;application.properties&lt;/code&gt; 启用了Maven过滤，则可能还需要更改默认过滤器令牌以使用&lt;a href=&quot;https://maven.apache.org/plugins/maven-resources-plugin/resources-mojo.html#delimiters&quot;&gt;其他定界符&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c9db74b01d649779058300f7af7510815bae621e" translate="yes" xml:space="preserve">
          <source>If you install the Spring Boot CLI by using Homebrew or MacPorts, the command-line completion scripts are automatically registered with your shell.</source>
          <target state="translated">如果您使用Homebrew或MacPorts安装Spring Boot CLI,命令行完成脚本会自动注册到您的shell中。</target>
        </trans-unit>
        <trans-unit id="b8fca1840f7e3311f08af1039234cc0b3513a2fd" translate="yes" xml:space="preserve">
          <source>If you intend to start your application as a war or as an executable application, you need to share the customizations of the builder in a method that is both available to the &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; callback and in the &lt;code&gt;main&lt;/code&gt; method in a class similar to the following:</source>
          <target state="translated">如果您打算以战争或可执行应用程序的形式启动应用程序，则需要使用 &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; 回调可用的方法和类似于以下类的 &lt;code&gt;main&lt;/code&gt; 方法中的共享方法来共享构建器的自定义项：</target>
        </trans-unit>
        <trans-unit id="dfa35489213f3bee7397024e0d961126af59a1b3" translate="yes" xml:space="preserve">
          <source>If you look in the &lt;code&gt;target&lt;/code&gt; directory, you should see &lt;code&gt;myproject-0.0.1-SNAPSHOT.jar&lt;/code&gt;. The file should be around 10 MB in size. If you want to peek inside, you can use &lt;code&gt;jar tvf&lt;/code&gt;, as follows:</source>
          <target state="translated">如果查看 &lt;code&gt;target&lt;/code&gt; 目录，则应该看到 &lt;code&gt;myproject-0.0.1-SNAPSHOT.jar&lt;/code&gt; 。该文件的大小应为10 MB左右。如果想窥视内部，可以使用 &lt;code&gt;jar tvf&lt;/code&gt; ，如下所示：</target>
        </trans-unit>
        <trans-unit id="a0a7e40f2d4ab9f009d9b2ba9f7199c5bfab4737" translate="yes" xml:space="preserve">
          <source>If you need access to the &lt;code&gt;BeanFactory&lt;/code&gt; or the &lt;code&gt;Environment&lt;/code&gt;, your &lt;code&gt;FailureAnalyzer&lt;/code&gt; can implement &lt;code&gt;BeanFactoryAware&lt;/code&gt; or &lt;code&gt;EnvironmentAware&lt;/code&gt; respectively.</source>
          <target state="translated">如果需要访问 &lt;code&gt;BeanFactory&lt;/code&gt; 或 &lt;code&gt;Environment&lt;/code&gt; ，则 &lt;code&gt;FailureAnalyzer&lt;/code&gt; 可以分别实现 &lt;code&gt;BeanFactoryAware&lt;/code&gt; 或 &lt;code&gt;EnvironmentAware&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5331e3b98564b8a8340f6e036bb6c784772d86d2" translate="yes" xml:space="preserve">
          <source>If you need more control over the configuration, consider registering a &lt;code&gt;CouchbaseCacheManagerBuilderCustomizer&lt;/code&gt; bean. The following example shows a customizer that configures a specific entry expiration for &lt;code&gt;cache1&lt;/code&gt; and &lt;code&gt;cache2&lt;/code&gt;:</source>
          <target state="translated">如果需要对配置进行更多控制，请考虑注册 &lt;code&gt;CouchbaseCacheManagerBuilderCustomizer&lt;/code&gt; bean。以下示例显示了一个定制器，该定制器为 &lt;code&gt;cache1&lt;/code&gt; 和 &lt;code&gt;cache2&lt;/code&gt; 配置特定的条目到期：</target>
        </trans-unit>
        <trans-unit id="0a3298b36219ad41621115909fc0d9801b938a62" translate="yes" xml:space="preserve">
          <source>If you need more control over the configuration, consider registering a &lt;code&gt;RedisCacheManagerBuilderCustomizer&lt;/code&gt; bean. The following example shows a customizer that configures a specific time to live for &lt;code&gt;cache1&lt;/code&gt; and &lt;code&gt;cache2&lt;/code&gt;:</source>
          <target state="translated">如果您需要对配置的更多控制，请考虑注册 &lt;code&gt;RedisCacheManagerBuilderCustomizer&lt;/code&gt; bean。以下示例显示了一个定制器，该定制器配置 &lt;code&gt;cache1&lt;/code&gt; 和 &lt;code&gt;cache2&lt;/code&gt; 的特定生存时间：</target>
        </trans-unit>
        <trans-unit id="30227a848622b2905a723df563f6bfed0b554ddd" translate="yes" xml:space="preserve">
          <source>If you need more control, you can define your own &lt;code&gt;HttpCodeStatusMapper&lt;/code&gt; bean.</source>
          <target state="translated">如果需要更多控制，则可以定义自己的 &lt;code&gt;HttpCodeStatusMapper&lt;/code&gt; bean。</target>
        </trans-unit>
        <trans-unit id="3b8128e4238c6cd934c58dc252759c197b47fa74" translate="yes" xml:space="preserve">
          <source>If you need to &lt;em&gt;completely&lt;/em&gt; disable restart support (for example, because it does not work with a specific library), you need to set the &lt;code&gt;spring.devtools.restart.enabled&lt;/code&gt;&lt;code&gt;System&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt; before calling &lt;code&gt;SpringApplication.run(&amp;hellip;​)&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">如果您需要&lt;em&gt;完全&lt;/em&gt;禁用重启的支持（例如，因为它不工作与特定库），你需要设置 &lt;code&gt;spring.devtools.restart.enabled&lt;/code&gt; &lt;code&gt;System&lt;/code&gt; 属性为 &lt;code&gt;false&lt;/code&gt; 调用之前 &lt;code&gt;SpringApplication.run(&amp;hellip;​)&lt;/code&gt; ，如如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="a7c30dc082f5895a590683e05632cdff9f14d830" translate="yes" xml:space="preserve">
          <source>If you need to access the application arguments that were passed to &lt;code&gt;SpringApplication.run(&amp;hellip;​)&lt;/code&gt;, you can inject a &lt;code&gt;org.springframework.boot.ApplicationArguments&lt;/code&gt; bean. The &lt;code&gt;ApplicationArguments&lt;/code&gt; interface provides access to both the raw &lt;code&gt;String[]&lt;/code&gt; arguments as well as parsed &lt;code&gt;option&lt;/code&gt; and &lt;code&gt;non-option&lt;/code&gt; arguments, as shown in the following example:</source>
          <target state="translated">如果您需要访问传递给 &lt;code&gt;SpringApplication.run(&amp;hellip;​)&lt;/code&gt; 的应用程序参数，则可以注入 &lt;code&gt;org.springframework.boot.ApplicationArguments&lt;/code&gt; bean。所述 &lt;code&gt;ApplicationArguments&lt;/code&gt; 接口提供两个原始 &lt;code&gt;String[]&lt;/code&gt; 参数以及解析的 &lt;code&gt;option&lt;/code&gt; 和 &lt;code&gt;non-option&lt;/code&gt; 参数，如显示在下面的例子：</target>
        </trans-unit>
        <trans-unit id="a4baf28b6909ec2afac617f36981bf63f5cc8e14" translate="yes" xml:space="preserve">
          <source>If you need to add or customize codecs, you can create a custom &lt;code&gt;CodecCustomizer&lt;/code&gt; component, as shown in the following example:</source>
          <target state="translated">如果需要添加或自定义编解码器，则可以创建一个自定义 &lt;code&gt;CodecCustomizer&lt;/code&gt; 组件，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="11bc43596df66c705dda5c0d74ec039994e98553" translate="yes" xml:space="preserve">
          <source>If you need to add or customize converters, you can use Spring Boot&amp;rsquo;s &lt;code&gt;HttpMessageConverters&lt;/code&gt; class, as shown in the following listing:</source>
          <target state="translated">如果您需要添加或自定义转换器，则可以使用Spring Boot的 &lt;code&gt;HttpMessageConverters&lt;/code&gt; 类，如以下清单所示：</target>
        </trans-unit>
        <trans-unit id="32e6ab8652fa52e164c5dd3e0b8c7a7ab7c953b5" translate="yes" xml:space="preserve">
          <source>If you need to apply advanced customization to Hibernate properties, consider registering a &lt;code&gt;HibernatePropertiesCustomizer&lt;/code&gt; bean that will be invoked prior to creating the &lt;code&gt;EntityManagerFactory&lt;/code&gt;. This takes precedence to anything that is applied by the auto-configuration.</source>
          <target state="translated">如果需要对Hibernate属性应用高级自定义，请考虑注册在创建 &lt;code&gt;EntityManagerFactory&lt;/code&gt; 之前将被调用的 &lt;code&gt;HibernatePropertiesCustomizer&lt;/code&gt; bean 。这优先于自动配置应用的任何内容。</target>
        </trans-unit>
        <trans-unit id="9dcb0cb16d297fd66b34f6aecc18a49fe00171e6" translate="yes" xml:space="preserve">
          <source>If you need to apply customizations to logback beyond those that can be achieved with &lt;code&gt;application.properties&lt;/code&gt;, you&amp;rsquo;ll need to add a standard logback configuration file. You can add a &lt;code&gt;logback.xml&lt;/code&gt; file to the root of your classpath for logback to find. You can also use &lt;code&gt;logback-spring.xml&lt;/code&gt; if you want to use the &lt;a href=&quot;spring-boot-features#boot-features-logback-extensions&quot;&gt;Spring Boot Logback extensions&lt;/a&gt;.</source>
          <target state="translated">如果您需要将自定义项应用到logback之外，而可以使用 &lt;code&gt;application.properties&lt;/code&gt; 进行定制，则需要添加一个标准的logback配置文件。您可以将 &lt;code&gt;logback.xml&lt;/code&gt; 文件添加到类路径的根目录中，以进行logback查找。如果要使用&lt;a href=&quot;spring-boot-features#boot-features-logback-extensions&quot;&gt;Spring Boot Logback扩展，&lt;/a&gt;也可以使用 &lt;code&gt;logback-spring.xml&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36511b1aaf38e111c5e404376030a943c79dfe03" translate="yes" xml:space="preserve">
          <source>If you need to apply customizations to specific &lt;code&gt;Meter&lt;/code&gt; instances you can use the &lt;code&gt;io.micrometer.core.instrument.config.MeterFilter&lt;/code&gt; interface. By default, all &lt;code&gt;MeterFilter&lt;/code&gt; beans will be automatically applied to the micrometer &lt;code&gt;MeterRegistry.Config&lt;/code&gt;.</source>
          <target state="translated">如果需要将自定义应用于特定的 &lt;code&gt;Meter&lt;/code&gt; 实例，则可以使用 &lt;code&gt;io.micrometer.core.instrument.config.MeterFilter&lt;/code&gt; 接口。默认情况下，所有 &lt;code&gt;MeterFilter&lt;/code&gt; bean都将自动应用于千分尺 &lt;code&gt;MeterRegistry.Config&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="782f1193152eac0953973a3acd84be6f285532f1" translate="yes" xml:space="preserve">
          <source>If you need to build an &lt;code&gt;ApplicationContext&lt;/code&gt; hierarchy (multiple contexts with a parent/child relationship) or if you prefer using a &amp;ldquo;fluent&amp;rdquo; builder API, you can use the &lt;code&gt;SpringApplicationBuilder&lt;/code&gt;.</source>
          <target state="translated">如果您需要构建 &lt;code&gt;ApplicationContext&lt;/code&gt; 层次结构（具有父/子关系的多个上下文），或者如果您更喜欢使用&amp;ldquo;流利的&amp;rdquo;构建器API，则可以使用 &lt;code&gt;SpringApplicationBuilder&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bda2ea4decbf2f2b14cf2b1af2d7fa3e09ec417e" translate="yes" xml:space="preserve">
          <source>If you need to call remote REST services from your application, you can use the Spring Framework&amp;rsquo;s &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/web/client/RestTemplate.html&quot;&gt;&lt;code&gt;RestTemplate&lt;/code&gt;&lt;/a&gt; class. Since &lt;code&gt;RestTemplate&lt;/code&gt; instances often need to be customized before being used, Spring Boot does not provide any single auto-configured &lt;code&gt;RestTemplate&lt;/code&gt; bean. It does, however, auto-configure a &lt;code&gt;RestTemplateBuilder&lt;/code&gt;, which can be used to create &lt;code&gt;RestTemplate&lt;/code&gt; instances when needed. The auto-configured &lt;code&gt;RestTemplateBuilder&lt;/code&gt; ensures that sensible &lt;code&gt;HttpMessageConverters&lt;/code&gt; are applied to &lt;code&gt;RestTemplate&lt;/code&gt; instances.</source>
          <target state="translated">如果您需要从应用程序中调用远程REST服务，则可以使用Spring Framework的&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/web/client/RestTemplate.html&quot;&gt; &lt;code&gt;RestTemplate&lt;/code&gt; &lt;/a&gt;类。由于 &lt;code&gt;RestTemplate&lt;/code&gt; 实例在使用前通常需要自定义，因此Spring Boot不提供任何单个自动配置的 &lt;code&gt;RestTemplate&lt;/code&gt; bean。但是，它会自动配置 &lt;code&gt;RestTemplateBuilder&lt;/code&gt; ，可以在需要时使用它来创建 &lt;code&gt;RestTemplate&lt;/code&gt; 实例。自动配置的 &lt;code&gt;RestTemplateBuilder&lt;/code&gt; 确保将明智的 &lt;code&gt;HttpMessageConverters&lt;/code&gt; 应用于 &lt;code&gt;RestTemplate&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="d0ef25456bdd301f8507d356ad46505794cfd2d8" translate="yes" xml:space="preserve">
          <source>If you need to call remote Web services from your application, you can use the &lt;a href=&quot;https://docs.spring.io/spring-ws/docs/3.0.10.RELEASE/reference/#client-web-service-template&quot;&gt;&lt;code&gt;WebServiceTemplate&lt;/code&gt;&lt;/a&gt; class. Since &lt;code&gt;WebServiceTemplate&lt;/code&gt; instances often need to be customized before being used, Spring Boot does not provide any single auto-configured &lt;code&gt;WebServiceTemplate&lt;/code&gt; bean. It does, however, auto-configure a &lt;code&gt;WebServiceTemplateBuilder&lt;/code&gt;, which can be used to create &lt;code&gt;WebServiceTemplate&lt;/code&gt; instances when needed.</source>
          <target state="translated">如果需要从应用程序中调用远程Web服务，则可以使用&lt;a href=&quot;https://docs.spring.io/spring-ws/docs/3.0.10.RELEASE/reference/#client-web-service-template&quot;&gt; &lt;code&gt;WebServiceTemplate&lt;/code&gt; &lt;/a&gt;类。由于 &lt;code&gt;WebServiceTemplate&lt;/code&gt; 实例在使用前通常需要自定义，因此Spring Boot不提供任何单个自动配置的 &lt;code&gt;WebServiceTemplate&lt;/code&gt; bean。但是，它会自动配置 &lt;code&gt;WebServiceTemplateBuilder&lt;/code&gt; ，可在需要时将其用于创建 &lt;code&gt;WebServiceTemplate&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="fb385718fb821e1ba1872c12a85e326e51a27fc5" translate="yes" xml:space="preserve">
          <source>If you need to configure elements of the auto-configuration (for example, when servlet filters should be applied) you can use attributes in the &lt;code&gt;@AutoConfigureMockMvc&lt;/code&gt; annotation.</source>
          <target state="translated">如果您需要配置自动配置的元素（例如，当应该应用servlet过滤器时），则可以使用 &lt;code&gt;@AutoConfigureMockMvc&lt;/code&gt; 批注中的属性。</target>
        </trans-unit>
        <trans-unit id="570205ea2e9b54f1cb412f5f5f7cdb3de8ad0b9c" translate="yes" xml:space="preserve">
          <source>If you need to configure elements of the auto-configuration, you can use the &lt;code&gt;@AutoConfigureJsonTesters&lt;/code&gt; annotation.</source>
          <target state="translated">如果需要配置自动配置的元素，则可以使用 &lt;code&gt;@AutoConfigureJsonTesters&lt;/code&gt; 批注。</target>
        </trans-unit>
        <trans-unit id="7884cd3ee944dc571a85838f824fa11cee62deda" translate="yes" xml:space="preserve">
          <source>If you need to configure multiple data sources, you can apply the same tricks that are described in the previous section. You must, however, mark one of the &lt;code&gt;DataSource&lt;/code&gt; instances as &lt;code&gt;@Primary&lt;/code&gt;, because various auto-configurations down the road expect to be able to get one by type.</source>
          <target state="translated">如果需要配置多个数据源，则可以应用上一节中介绍的相同技巧。但是，您必须将其中一个 &lt;code&gt;DataSource&lt;/code&gt; 实例标记为 &lt;code&gt;@Primary&lt;/code&gt; ，因为将来各种自动配置都希望能够按类型获取一个。</target>
        </trans-unit>
        <trans-unit id="3115886cb21c65fa723324e9c8d1b45d8335a8fd" translate="yes" xml:space="preserve">
          <source>If you need to create executable jars from a different build system or if you are just curious about the underlying technology, this appendix provides some background.</source>
          <target state="translated">如果你需要从不同的构建系统创建可执行的jar,或者你只是对底层技术感到好奇,这个附录提供了一些背景资料。</target>
        </trans-unit>
        <trans-unit id="28203c1cb2297fff419b6d7a4460a47d1095038e" translate="yes" xml:space="preserve">
          <source>If you need to create more &lt;code&gt;JmsListenerContainerFactory&lt;/code&gt; instances or if you want to override the default, Spring Boot provides a &lt;code&gt;DefaultJmsListenerContainerFactoryConfigurer&lt;/code&gt; that you can use to initialize a &lt;code&gt;DefaultJmsListenerContainerFactory&lt;/code&gt; with the same settings as the one that is auto-configured.</source>
          <target state="translated">如果您需要创建更多的 &lt;code&gt;JmsListenerContainerFactory&lt;/code&gt; 实例，或者想覆盖默认实例，Spring Boot提供了一个 &lt;code&gt;DefaultJmsListenerContainerFactoryConfigurer&lt;/code&gt; ，您可以使用与自动配置的设置相同的设置来初始化 &lt;code&gt;DefaultJmsListenerContainerFactory&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="da71da0edd1ad9c66ec7ab16d72499848121e277" translate="yes" xml:space="preserve">
          <source>If you need to create more &lt;code&gt;RabbitListenerContainerFactory&lt;/code&gt; instances or if you want to override the default, Spring Boot provides a &lt;code&gt;SimpleRabbitListenerContainerFactoryConfigurer&lt;/code&gt; and a &lt;code&gt;DirectRabbitListenerContainerFactoryConfigurer&lt;/code&gt; that you can use to initialize a &lt;code&gt;SimpleRabbitListenerContainerFactory&lt;/code&gt; and a &lt;code&gt;DirectRabbitListenerContainerFactory&lt;/code&gt; with the same settings as the factories used by the auto-configuration.</source>
          <target state="translated">如果您需要创建更多 &lt;code&gt;RabbitListenerContainerFactory&lt;/code&gt; 实例，或者想要覆盖默认实例，Spring Boot提供了一个 &lt;code&gt;SimpleRabbitListenerContainerFactoryConfigurer&lt;/code&gt; 和 &lt;code&gt;DirectRabbitListenerContainerFactoryConfigurer&lt;/code&gt; ，您可以使用它们来初始化 &lt;code&gt;SimpleRabbitListenerContainerFactory&lt;/code&gt; 和 &lt;code&gt;DirectRabbitListenerContainerFactory&lt;/code&gt; ，其设置与自动配置所使用的工厂相同。</target>
        </trans-unit>
        <trans-unit id="26d5160a5103f52288ce07a67e4e924453dcf3ee" translate="yes" xml:space="preserve">
          <source>If you need to create more &lt;code&gt;RabbitTemplate&lt;/code&gt; instances or if you want to override the default, Spring Boot provides a &lt;code&gt;RabbitTemplateConfigurer&lt;/code&gt; bean that you can use to initialize a &lt;code&gt;RabbitTemplate&lt;/code&gt; with the same settings as the factories used by the auto-configuration.</source>
          <target state="translated">如果您需要创建更多 &lt;code&gt;RabbitTemplate&lt;/code&gt; 实例，或者想要覆盖默认实例，Spring Boot提供了 &lt;code&gt;RabbitTemplateConfigurer&lt;/code&gt; bean，您可以使用该bean来初始化 &lt;code&gt;RabbitTemplate&lt;/code&gt; ，其设置与自动配置所使用的工厂相同。</target>
        </trans-unit>
        <trans-unit id="dbf1d4fda04c9ea136efbf9d2a8dc4531dafdfa7" translate="yes" xml:space="preserve">
          <source>If you need to customize connection settings, you can use the &lt;code&gt;spring.ldap.base&lt;/code&gt; and &lt;code&gt;spring.ldap.base-environment&lt;/code&gt; properties.</source>
          <target state="translated">如果需要自定义连接设置，则可以使用 &lt;code&gt;spring.ldap.base&lt;/code&gt; 和 &lt;code&gt;spring.ldap.base-environment&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="1e0b9e0b8b9e43e11f57c3d9327a733700341ca0" translate="yes" xml:space="preserve">
          <source>If you need to export metrics to a different backend as part of an integration test, annotate it with &lt;code&gt;@AutoConfigureMetrics&lt;/code&gt;.</source>
          <target state="translated">如果您需要在集成测试中将指标导出到其他后端，请使用 &lt;code&gt;@AutoConfigureMetrics&lt;/code&gt; 对其进行注释。</target>
        </trans-unit>
        <trans-unit id="bbe0a476ba095da7e315280701aaa1983e008d3f" translate="yes" xml:space="preserve">
          <source>If you need to find out what auto-configuration is currently being applied, and why, start your application with the &lt;code&gt;--debug&lt;/code&gt; switch. Doing so enables debug logs for a selection of core loggers and logs a conditions report to the console.</source>
          <target state="translated">如果您需要找出当前正在应用的自动配置以及原因，请使用 &lt;code&gt;--debug&lt;/code&gt; 开关启动您的应用程序。这样做可以启用调试日志以供选择核心记录器，并将条件报告记录到控制台。</target>
        </trans-unit>
        <trans-unit id="19dd42adb10a3d75cad4cad6b6f279408b0664bf" translate="yes" xml:space="preserve">
          <source>If you need to perform servlet context initialization in a Spring Boot application, you should register a bean that implements the &lt;code&gt;org.springframework.boot.web.servlet.ServletContextInitializer&lt;/code&gt; interface. The single &lt;code&gt;onStartup&lt;/code&gt; method provides access to the &lt;code&gt;ServletContext&lt;/code&gt; and, if necessary, can easily be used as an adapter to an existing &lt;code&gt;WebApplicationInitializer&lt;/code&gt;.</source>
          <target state="translated">如果需要在Spring Boot应用程序中执行servlet上下文初始化，则应该注册一个实现 &lt;code&gt;org.springframework.boot.web.servlet.ServletContextInitializer&lt;/code&gt; 接口的bean 。单个 &lt;code&gt;onStartup&lt;/code&gt; 方法提供对 &lt;code&gt;ServletContext&lt;/code&gt; 的访问，并且在必要时可以轻松地用作现有 &lt;code&gt;WebApplicationInitializer&lt;/code&gt; 的适配器。</target>
        </trans-unit>
        <trans-unit id="3b9b21bb26f8db89852072e0d363111891c98425" translate="yes" xml:space="preserve">
          <source>If you need to programmatically configure your embedded servlet container, you can register a Spring bean that implements the &lt;code&gt;WebServerFactoryCustomizer&lt;/code&gt; interface. &lt;code&gt;WebServerFactoryCustomizer&lt;/code&gt; provides access to the &lt;code&gt;ConfigurableServletWebServerFactory&lt;/code&gt;, which includes numerous customization setter methods. The following example shows programmatically setting the port:</source>
          <target state="translated">如果需要以编程方式配置嵌入式servlet容器，则可以注册一个实现 &lt;code&gt;WebServerFactoryCustomizer&lt;/code&gt; 接口的Spring Bean 。 &lt;code&gt;WebServerFactoryCustomizer&lt;/code&gt; 提供对 &lt;code&gt;ConfigurableServletWebServerFactory&lt;/code&gt; 的访问，其中包括许多自定义设置方法。以下示例显示以编程方式设置端口：</target>
        </trans-unit>
        <trans-unit id="1f648fe1e7a050dcb87ebdf9b064138f156619bb" translate="yes" xml:space="preserve">
          <source>If you need to register extra components, such as Jackson &lt;code&gt;Module&lt;/code&gt;, you can import additional configuration classes using &lt;code&gt;@Import&lt;/code&gt; on your test.</source>
          <target state="translated">如果您需要注册其他组件，例如Jackson &lt;code&gt;Module&lt;/code&gt; ，则可以在测试中使用 &lt;code&gt;@Import&lt;/code&gt; 导入其他配置类。</target>
        </trans-unit>
        <trans-unit id="1a7b2e9ec22776d8429adc6cbe6ddd092a8bf286" translate="yes" xml:space="preserve">
          <source>If you need to register extra components, such as the Jackson &lt;code&gt;Module&lt;/code&gt;, you can import additional configuration classes by using &lt;code&gt;@Import&lt;/code&gt; on your test.</source>
          <target state="translated">如果您需要注册其他组件（例如Jackson &lt;code&gt;Module&lt;/code&gt; ，则可以在测试中使用 &lt;code&gt;@Import&lt;/code&gt; 导入其他配置类。</target>
        </trans-unit>
        <trans-unit id="3c40916ef7de52e752b517882b96a769eaee2a0f" translate="yes" xml:space="preserve">
          <source>If you need to run some specific code once the &lt;code&gt;SpringApplication&lt;/code&gt; has started, you can implement the &lt;code&gt;ApplicationRunner&lt;/code&gt; or &lt;code&gt;CommandLineRunner&lt;/code&gt; interfaces. Both interfaces work in the same way and offer a single &lt;code&gt;run&lt;/code&gt; method, which is called just before &lt;code&gt;SpringApplication.run(&amp;hellip;​)&lt;/code&gt; completes.</source>
          <target state="translated">如果在 &lt;code&gt;SpringApplication&lt;/code&gt; 启动后需要运行一些特定的代码，则可以实现 &lt;code&gt;ApplicationRunner&lt;/code&gt; 或 &lt;code&gt;CommandLineRunner&lt;/code&gt; 接口。两个接口都以相同的方式工作，并提供一个单一的 &lt;code&gt;run&lt;/code&gt; 方法，该方法在 &lt;code&gt;SpringApplication.run(&amp;hellip;​)&lt;/code&gt; 完成之前被调用。</target>
        </trans-unit>
        <trans-unit id="bcdf518e7dbdbe2254f3ecdae93cd34b63fd5d6f" translate="yes" xml:space="preserve">
          <source>If you need to start a full running server, we recommend that you use random ports. If you use &lt;code&gt;@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)&lt;/code&gt;, an available port is picked at random each time your test runs.</source>
          <target state="translated">如果需要启动完全运行的服务器，建议您使用随机端口。如果使用 &lt;code&gt;@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)&lt;/code&gt; ，则每次运行测试时都会随机选择一个可用端口。</target>
        </trans-unit>
        <trans-unit id="db90163e4f1769d7e9f20b7e746fbed8af5d5f25" translate="yes" xml:space="preserve">
          <source>If you need to test an auto-configuration that only operates in a Servlet or Reactive web application context, use the &lt;code&gt;WebApplicationContextRunner&lt;/code&gt; or &lt;code&gt;ReactiveWebApplicationContextRunner&lt;/code&gt; respectively.</source>
          <target state="translated">如果需要测试仅在Servlet或Reactive Web应用程序上下文中运行的自动配置，请分别使用 &lt;code&gt;WebApplicationContextRunner&lt;/code&gt; 或 &lt;code&gt;ReactiveWebApplicationContextRunner&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d6a6d7b8eea31a903a98f506a36b2375a3975ad" translate="yes" xml:space="preserve">
          <source>If you need to use a proxy to access the remote application, configure the &lt;code&gt;spring.devtools.remote.proxy.host&lt;/code&gt; and &lt;code&gt;spring.devtools.remote.proxy.port&lt;/code&gt; properties.</source>
          <target state="translated">如果需要使用代理访问远程应用程序，请配置 &lt;code&gt;spring.devtools.remote.proxy.host&lt;/code&gt; 和 &lt;code&gt;spring.devtools.remote.proxy.port&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="1c30ad38c18a84275da6cebe783f87238a94426a" translate="yes" xml:space="preserve">
          <source>If you need to use jOOQ with multiple data sources, you should create your own &lt;code&gt;DSLContext&lt;/code&gt; for each one. Refer to &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqAutoConfiguration.java&quot;&gt;JooqAutoConfiguration&lt;/a&gt; for more details.</source>
          <target state="translated">如果需要将jOOQ与多个数据源一起使用，则应该为每个数据源创建自己的 &lt;code&gt;DSLContext&lt;/code&gt; 。有关更多详细信息，请参阅&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqAutoConfiguration.java&quot;&gt;JooqAutoConfiguration&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3e0430f91952e0efcfb2eaed807a4abfab7821c7" translate="yes" xml:space="preserve">
          <source>If you open a web browser to &lt;code&gt;&lt;a href=&quot;http://localhost:8080&quot;&gt;localhost:8080&lt;/a&gt;&lt;/code&gt;, you should see the following output:</source>
          <target state="translated">如果打开Web浏览器到 &lt;code&gt;&lt;a href=&quot;http://localhost:8080&quot;&gt;localhost:8080&lt;/a&gt;&lt;/code&gt; ，则应该看到以下输出：</target>
        </trans-unit>
        <trans-unit id="8e7b4122a155c60906e67d20102c7510c77f03b3" translate="yes" xml:space="preserve">
          <source>If you package your Spring Boot application as a &lt;code&gt;war&lt;/code&gt; or &lt;code&gt;ear&lt;/code&gt; file and deploy it to a Java EE application server, you can use your application server&amp;rsquo;s built-in transaction manager. Spring Boot tries to auto-configure a transaction manager by looking at common JNDI locations (&lt;code&gt;java:comp/UserTransaction&lt;/code&gt;, &lt;code&gt;java:comp/TransactionManager&lt;/code&gt;, and so on). If you use a transaction service provided by your application server, you generally also want to ensure that all resources are managed by the server and exposed over JNDI. Spring Boot tries to auto-configure JMS by looking for a &lt;code&gt;ConnectionFactory&lt;/code&gt; at the JNDI path (&lt;code&gt;java:/JmsXA&lt;/code&gt; or &lt;code&gt;java:/XAConnectionFactory&lt;/code&gt;), and you can use the &lt;a href=&quot;#boot-features-connecting-to-a-jndi-datasource&quot;&gt;&lt;code&gt;spring.datasource.jndi-name&lt;/code&gt; property&lt;/a&gt; to configure your &lt;code&gt;DataSource&lt;/code&gt;.</source>
          <target state="translated">如果将Spring Boot应用程序打包为 &lt;code&gt;war&lt;/code&gt; 或 &lt;code&gt;ear&lt;/code&gt; 文件，并将其部署到Java EE应用程序服务器，则可以使用应用程序服务器的内置事务管理器。 Spring Boot尝试通过查看常见的JNDI位置（ &lt;code&gt;java:comp/UserTransaction&lt;/code&gt; ， &lt;code&gt;java:comp/TransactionManager&lt;/code&gt; 等）来自动配置事务管理器。如果使用应用程序服务器提供的事务服务，通常还需要确保所有资源都由服务器管理并通过JNDI公开。 Spring Boot尝试通过在JNDI路径（ &lt;code&gt;java:/JmsXA&lt;/code&gt; 或 &lt;code&gt;java:/XAConnectionFactory&lt;/code&gt; )中查找 &lt;code&gt;ConnectionFactory&lt;/code&gt; 来自动配置JMS），然后可以使用&lt;a href=&quot;#boot-features-connecting-to-a-jndi-datasource&quot;&gt; &lt;code&gt;spring.datasource.jndi-name&lt;/code&gt; 属性&lt;/a&gt;配置您的 &lt;code&gt;DataSource&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0794e82675c7ada176166c5810445ff421f6ed7" translate="yes" xml:space="preserve">
          <source>If you prefer endpoint enablement to be opt-in rather than opt-out, set the &lt;code&gt;management.endpoints.enabled-by-default&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt; and use individual endpoint &lt;code&gt;enabled&lt;/code&gt; properties to opt back in. The following example enables the &lt;code&gt;info&lt;/code&gt; endpoint and disables all other endpoints:</source>
          <target state="translated">如果您希望启用端点启用而不是退出启用端点，请将 &lt;code&gt;management.endpoints.enabled-by-default&lt;/code&gt; 属性设置为 &lt;code&gt;false&lt;/code&gt; 并使用 &lt;code&gt;enabled&lt;/code&gt; 端点的各个属性重新启用。以下示例启用 &lt;code&gt;info&lt;/code&gt; 端点并禁用所有其他端点：</target>
        </trans-unit>
        <trans-unit id="80f9e9fb9f9868af76b75a6f758b1a634be9c20a" translate="yes" xml:space="preserve">
          <source>If you prefer the JAX-RS programming model for REST endpoints, you can use one of the available implementations instead of Spring MVC. &lt;a href=&quot;https://jersey.github.io/&quot;&gt;Jersey&lt;/a&gt; and &lt;a href=&quot;https://cxf.apache.org/&quot;&gt;Apache CXF&lt;/a&gt; work quite well out of the box. CXF requires you to register its &lt;code&gt;Servlet&lt;/code&gt; or &lt;code&gt;Filter&lt;/code&gt; as a &lt;code&gt;@Bean&lt;/code&gt; in your application context. Jersey has some native Spring support, so we also provide auto-configuration support for it in Spring Boot, together with a starter.</source>
          <target state="translated">如果您更喜欢REST端点的JAX-RS编程模型，则可以使用可用的实现之一来代替Spring MVC。&lt;a href=&quot;https://jersey.github.io/&quot;&gt;Jersey&lt;/a&gt;和&lt;a href=&quot;https://cxf.apache.org/&quot;&gt;Apache CXF&lt;/a&gt;开箱即用。 CXF要求您在应用程序上下文 &lt;code&gt;@Bean&lt;/code&gt; 其 &lt;code&gt;Servlet&lt;/code&gt; 或 &lt;code&gt;Filter&lt;/code&gt; 注册为@Bean。 Jersey提供了一些本机的Spring支持，因此我们在Spring Boot中还与启动程序一起为其提供了自动配置支持。</target>
        </trans-unit>
        <trans-unit id="a47b011528f7626b58e9c70b3f6a78fd55cfd1ae" translate="yes" xml:space="preserve">
          <source>If you prefer to add addition locations, rather than replacing them, you can use &lt;code&gt;spring.config.additional-location&lt;/code&gt;. Properties loaded from additional locations can override those in the default locations. For example, if &lt;code&gt;spring.config.additional-location&lt;/code&gt; is configured with the value &lt;code&gt;optional:classpath:/custom-config/,optional:file:./custom-config/&lt;/code&gt;, the complete the complete set of locations considered is:</source>
          <target state="translated">如果您喜欢添加其他位置，而不是替换它们，则可以使用 &lt;code&gt;spring.config.additional-location&lt;/code&gt; 。从其他位置加载的属性可以覆盖默认位置的属性。例如，如果 &lt;code&gt;spring.config.additional-location&lt;/code&gt; 配置为值 &lt;code&gt;optional:classpath:/custom-config/,optional:file:./custom-config/&lt;/code&gt; /，optional：file：./ custom-config /，则所考虑的位置的完整集合为：</target>
        </trans-unit>
        <trans-unit id="db4d84b541db0b7b7783fae159844c8034f70951" translate="yes" xml:space="preserve">
          <source>If you prefer to use Hibernate 5&amp;rsquo;s default instead, set the following property:</source>
          <target state="translated">如果您更喜欢使用Hibernate 5的默认设置，请设置以下属性：</target>
        </trans-unit>
        <trans-unit id="f1d0ae7c5f4773ad33dfb78efc33c19e89abb5dd" translate="yes" xml:space="preserve">
          <source>If you prefer to use constructor binding, the same properties can be exposed, as shown in the following example:</source>
          <target state="translated">如果你喜欢使用构造函数绑定,可以暴露同样的属性,如下例所示。</target>
        </trans-unit>
        <trans-unit id="4a4f816ad3107f3cf95f745be70085d74acab585" translate="yes" xml:space="preserve">
          <source>If you prefer your test to run against a real database, you can use the &lt;code&gt;@AutoConfigureTestDatabase&lt;/code&gt; annotation in the same way as for &lt;code&gt;DataJpaTest&lt;/code&gt;. (See &quot;&lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-jpa-test&quot;&gt;Auto-configured Data JPA Tests&lt;/a&gt;&quot;.)</source>
          <target state="translated">如果您希望测试针对真实数据库运行，则可以使用 &lt;code&gt;@AutoConfigureTestDatabase&lt;/code&gt; 批注，方法与 &lt;code&gt;DataJpaTest&lt;/code&gt; 相同。（请参阅&amp;ldquo;&lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-jpa-test&quot;&gt;自动配置的数据JPA测试&lt;/a&gt;&amp;rdquo;。）</target>
        </trans-unit>
        <trans-unit id="22ae51262a7b30f98adfdf1f37737ea4e9287154" translate="yes" xml:space="preserve">
          <source>If you provide a &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;AuthenticationManager&lt;/code&gt;, &lt;code&gt;AuthenticationProvider&lt;/code&gt;, or &lt;code&gt;UserDetailsService&lt;/code&gt;, the default &lt;code&gt;@Bean&lt;/code&gt; for &lt;code&gt;InMemoryUserDetailsManager&lt;/code&gt; is not created. This means you have the full feature set of Spring Security available (such as &lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.4.1/reference/html5/#servlet-authentication&quot;&gt;various authentication options&lt;/a&gt;).</source>
          <target state="translated">如果你提供了一个 &lt;code&gt;@Bean&lt;/code&gt; 类型 &lt;code&gt;AuthenticationManager&lt;/code&gt; ， &lt;code&gt;AuthenticationProvider&lt;/code&gt; 的，或 &lt;code&gt;UserDetailsService&lt;/code&gt; ，默认 &lt;code&gt;@Bean&lt;/code&gt; 为 &lt;code&gt;InMemoryUserDetailsManager&lt;/code&gt; 不会创建。这意味着您拥有完整的Spring Security功能集（例如&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.4.1/reference/html5/#servlet-authentication&quot;&gt;各种身份验证选项&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="a340a7ea03d25a950a252001f18fe7f3a13b8297" translate="yes" xml:space="preserve">
          <source>If you provide any &lt;code&gt;@Beans&lt;/code&gt; of type &lt;code&gt;MappingJackson2HttpMessageConverter&lt;/code&gt;, they replace the default value in the MVC configuration. Also, a convenience bean of type &lt;code&gt;HttpMessageConverters&lt;/code&gt; is provided (and is always available if you use the default MVC configuration). It has some useful methods to access the default and user-enhanced message converters.</source>
          <target state="translated">如果您提供任何类型为 &lt;code&gt;@Beans&lt;/code&gt; 的 &lt;code&gt;MappingJackson2HttpMessageConverter&lt;/code&gt; ，它们将替换MVC配置中的默认值。此外，还提供了类型为 &lt;code&gt;HttpMessageConverters&lt;/code&gt; 的便捷bean （如果使用默认的MVC配置，它将始终可用）。它提供了一些有用的方法来访问默认的和用户增强的消息转换器。</target>
        </trans-unit>
        <trans-unit id="3ee303ba9e9410615f9a17d0daf3f65cdd26300c" translate="yes" xml:space="preserve">
          <source>If you reach the &lt;code&gt;info&lt;/code&gt; endpoint, you should see a response that contains the following additional entry:</source>
          <target state="translated">如果到达 &lt;code&gt;info&lt;/code&gt; 端点，则应该看到包含以下附加条目的响应：</target>
        </trans-unit>
        <trans-unit id="3b695604334353c0ac7f82b53ca758e0bf5e9ece" translate="yes" xml:space="preserve">
          <source>If you refer to a property that has been detected automatically, the description, default value, and deprecation information are overridden, if specified. If the manual property declaration is not identified in the current module, it is added as a new property.</source>
          <target state="translated">如果引用一个自动检测到的属性,如果指定了描述、默认值和废弃信息,则会被覆盖。如果手动属性声明在当前模块中未被识别,则作为新属性添加。</target>
        </trans-unit>
        <trans-unit id="13cbfbb26b1c595070fe9e09284a93d413cd4e3f" translate="yes" xml:space="preserve">
          <source>If you register an &lt;code&gt;ErrorPage&lt;/code&gt; with a path that ends up being handled by a &lt;code&gt;Filter&lt;/code&gt; (as is common with some non-Spring web frameworks, like Jersey and Wicket), then the &lt;code&gt;Filter&lt;/code&gt; has to be explicitly registered as an &lt;code&gt;ERROR&lt;/code&gt; dispatcher, as shown in the following example:</source>
          <target state="translated">如果您注册一个 &lt;code&gt;ErrorPage&lt;/code&gt; 与最终是由一个处理路径 &lt;code&gt;Filter&lt;/code&gt; （如某些非Spring的web框架，如新泽西州和检票常见），那么 &lt;code&gt;Filter&lt;/code&gt; 必须被明确地注册为 &lt;code&gt;ERROR&lt;/code&gt; 调度，如图下面的例子：</target>
        </trans-unit>
        <trans-unit id="7a13de1c3f77d881aa222806b2f0e652ce22bbb9" translate="yes" xml:space="preserve">
          <source>If you require more control over Spring REST Docs configuration than offered by the attributes of &lt;code&gt;@AutoConfigureRestDocs&lt;/code&gt;, a &lt;code&gt;RestDocsRestAssuredConfigurationCustomizer&lt;/code&gt; bean can be used, as shown in the following example:</source>
          <target state="translated">如果您需要对Spring REST Docs配置进行更多控制，而不是 &lt;code&gt;@AutoConfigureRestDocs&lt;/code&gt; 属性提供的控制，则可以使用 &lt;code&gt;RestDocsRestAssuredConfigurationCustomizer&lt;/code&gt; bean，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="956e9bef895cd158f231ec77a51ca5d0f25980ca" translate="yes" xml:space="preserve">
          <source>If you require more control over Spring REST Docs configuration than offered by the attributes of &lt;code&gt;@AutoConfigureRestDocs&lt;/code&gt;, you can use a &lt;code&gt;RestDocsMockMvcConfigurationCustomizer&lt;/code&gt; bean, as shown in the following example:</source>
          <target state="translated">如果需要对Spring REST Docs配置进行更多控制，而不是 &lt;code&gt;@AutoConfigureRestDocs&lt;/code&gt; 属性所提供的控制，则可以使用 &lt;code&gt;RestDocsMockMvcConfigurationCustomizer&lt;/code&gt; bean，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="c8c2c8da2bde5ec5fbc578d076e71f78abcb0bd6" translate="yes" xml:space="preserve">
          <source>If you require more control over Spring REST Docs configuration than offered by the attributes of &lt;code&gt;@AutoConfigureRestDocs&lt;/code&gt;, you can use a &lt;code&gt;RestDocsWebTestClientConfigurationCustomizer&lt;/code&gt; bean, as shown in the following example:</source>
          <target state="translated">如果您需要对Spring REST Docs配置进行更多控制，而不是 &lt;code&gt;@AutoConfigureRestDocs&lt;/code&gt; 属性所提供的控制，则可以使用 &lt;code&gt;RestDocsWebTestClientConfigurationCustomizer&lt;/code&gt; bean，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="8ee4e86b4c4f1ffd37fa30313a89e6b4b1880b75" translate="yes" xml:space="preserve">
          <source>If you run &lt;code&gt;mvn dependency:tree&lt;/code&gt; again, you see that there are now a number of additional dependencies, including the Tomcat web server and Spring Boot itself.</source>
          <target state="translated">如果再次运行 &lt;code&gt;mvn dependency:tree&lt;/code&gt; ，则会看到现在还有许多其他的依赖项，包括Tomcat Web服务器和Spring Boot本身。</target>
        </trans-unit>
        <trans-unit id="0094e8539d66a83001b1261f7a17aa88358cf92c" translate="yes" xml:space="preserve">
          <source>If you run the application with the argument &lt;code&gt;--spring.profiles.active=dev&lt;/code&gt; you might expect &lt;code&gt;mypassword&lt;/code&gt; to be set to &amp;ldquo;secret&amp;rdquo;, but this is not the case.</source>
          <target state="translated">如果使用参数 &lt;code&gt;--spring.profiles.active=dev&lt;/code&gt; 运行该应用程序，则可能希望将 &lt;code&gt;mypassword&lt;/code&gt; 设置为&amp;ldquo; secret&amp;rdquo;，但事实并非如此。</target>
        </trans-unit>
        <trans-unit id="c39b17465578f8a9146ee6a0a521a7166c5783af" translate="yes" xml:space="preserve">
          <source>If you specify a property of the &lt;code&gt;Environment&lt;/code&gt; on the command line, it is ignored by the job. Consider the following command:</source>
          <target state="translated">如果在命令行上指定 &lt;code&gt;Environment&lt;/code&gt; 的属性，则作业将忽略它。考虑以下命令：</target>
        </trans-unit>
        <trans-unit id="8e6fed2ca0cc99965bd25af751b0a9ee10fcfc62" translate="yes" xml:space="preserve">
          <source>If you structure your code as suggested above (locating your application class in a root package), you can add &lt;code&gt;@ComponentScan&lt;/code&gt; without any arguments. All of your application components (&lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;@Repository&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt; etc.) are automatically registered as Spring Beans.</source>
          <target state="translated">如果按照上面的建议构造代码（将应用程序类放在根包中），则可以添加 &lt;code&gt;@ComponentScan&lt;/code&gt; ,而不添加任何参数。您的所有应用程序组件（的 &lt;code&gt;@Component&lt;/code&gt; ， &lt;code&gt;@Service&lt;/code&gt; ， &lt;code&gt;@Repository&lt;/code&gt; ， &lt;code&gt;@Controller&lt;/code&gt; 等）自动注册为春豆。</target>
        </trans-unit>
        <trans-unit id="c988c13a4cefac6ec360b1f0c4a14e8aefb65b42" translate="yes" xml:space="preserve">
          <source>If you use &amp;ldquo;Starters&amp;rdquo;, SnakeYAML is automatically provided by &lt;code&gt;spring-boot-starter&lt;/code&gt;.</source>
          <target state="translated">如果您使用&amp;ldquo; Starters&amp;rdquo;，则 &lt;code&gt;spring-boot-starter&lt;/code&gt; 会自动提供SnakeYAML 。</target>
        </trans-unit>
        <trans-unit id="ccb544e3f7a5429a364c0998316fd84db6109927" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;@ConditionalOnClass&lt;/code&gt; or &lt;code&gt;@ConditionalOnMissingClass&lt;/code&gt; as a part of a meta-annotation to compose your own composed annotations, you must use &lt;code&gt;name&lt;/code&gt; as referring to the class in such a case is not handled.</source>
          <target state="translated">如果在元注释中使用 &lt;code&gt;@ConditionalOnClass&lt;/code&gt; 或 &lt;code&gt;@ConditionalOnMissingClass&lt;/code&gt; 来组成自己的组合注释，则在不处理这种情况下，必须使用 &lt;code&gt;name&lt;/code&gt; 来引用该类。</target>
        </trans-unit>
        <trans-unit id="f3b86abacc5af41ae0a5c64969aa26d9c5b63c37" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;spring-boot-starter-activemq&lt;/code&gt;, the necessary dependencies to connect or embed an ActiveMQ instance are provided, as is the Spring infrastructure to integrate with JMS.</source>
          <target state="translated">如果使用 &lt;code&gt;spring-boot-starter-activemq&lt;/code&gt; ，那么将提供连接或嵌入ActiveMQ实例所需的依赖关系，以及与JMS集成的Spring基础结构。</target>
        </trans-unit>
        <trans-unit id="777d69b44c943a844cdfd40ad1512b3c91b089f4" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;spring-boot-starter-artemis&lt;/code&gt;, the necessary dependencies to connect to an existing Artemis instance are provided, as well as the Spring infrastructure to integrate with JMS. Adding &lt;code&gt;org.apache.activemq:artemis-jms-server&lt;/code&gt; to your application lets you use embedded mode.</source>
          <target state="translated">如果您使用 &lt;code&gt;spring-boot-starter-artemis&lt;/code&gt; ，那么将提供连接到现有Artemis实例所需的依赖项，以及与JMS集成的Spring基础结构。在您的应用程序中添加 &lt;code&gt;org.apache.activemq:artemis-jms-server&lt;/code&gt; 可以使您使用嵌入式模式。</target>
        </trans-unit>
        <trans-unit id="6d4e8535de59d50a058d6eb6e673992cee50cf68" translate="yes" xml:space="preserve">
          <source>If you use FreeMarker, set &lt;code&gt;spring.freemarker.cache&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java&quot;&gt;&lt;code&gt;FreeMarkerAutoConfiguration&lt;/code&gt;&lt;/a&gt; for other FreeMarker customization options.</source>
          <target state="translated">如果您使用FreeMarker，请将 &lt;code&gt;spring.freemarker.cache&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; 。有关其他FreeMarker定制选项，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java&quot;&gt; &lt;code&gt;FreeMarkerAutoConfiguration&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="96599129ad1f98bc96079b4970485263acdb8104" translate="yes" xml:space="preserve">
          <source>If you use FreeMarker, you also have a &lt;code&gt;FreeMarkerViewResolver&lt;/code&gt; named &amp;lsquo;freeMarkerViewResolver&amp;rsquo;. It looks for resources in a loader path (which is externalized to &lt;code&gt;spring.freemarker.templateLoaderPath&lt;/code&gt; and has a default value of &amp;lsquo;classpath:/templates/&amp;rsquo;) by surrounding the view name with a prefix and a suffix. The prefix is externalized to &lt;code&gt;spring.freemarker.prefix&lt;/code&gt;, and the suffix is externalized to &lt;code&gt;spring.freemarker.suffix&lt;/code&gt;. The default values of the prefix and suffix are empty and &amp;lsquo;.ftlh&amp;rsquo;, respectively. You can override &lt;code&gt;FreeMarkerViewResolver&lt;/code&gt; by providing a bean of the same name.</source>
          <target state="translated">如果使用FreeMarker，则还有一个名为'freeMarkerViewResolver'的 &lt;code&gt;FreeMarkerViewResolver&lt;/code&gt; 。它通过在视图名称前加上前缀和后缀来在加载器路径（ &lt;code&gt;spring.freemarker.templateLoaderPath&lt;/code&gt; 其外部化为spring.freemarker.templateLoaderPath并具有默认值&amp;ldquo; classpath：/ templates /&amp;rdquo;）中查找资源。前缀外部化到 &lt;code&gt;spring.freemarker.prefix&lt;/code&gt; ，后缀外部化到 &lt;code&gt;spring.freemarker.suffix&lt;/code&gt; 。前缀和后缀的默认值分别为空和'.ftlh'。您可以通过提供同名的bean来覆盖 &lt;code&gt;FreeMarkerViewResolver&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb3cf7f0044b3718d98e8477f6b375588d83e74f" translate="yes" xml:space="preserve">
          <source>If you use Gradle, the following example marks the servlet container (Tomcat, in this case) as being provided:</source>
          <target state="translated">如果你使用Gradle,下面的例子将servlet容器(在本例中是Tomcat)标记为被提供。</target>
        </trans-unit>
        <trans-unit id="f34a37f05c3e65d27f04a64a6ebf570925be5885" translate="yes" xml:space="preserve">
          <source>If you use Gradle, you need to modify &lt;code&gt;build.gradle&lt;/code&gt; to apply the war plugin to the project, as follows:</source>
          <target state="translated">如果使用Gradle，则需要修改 &lt;code&gt;build.gradle&lt;/code&gt; 以将war插件应用于项目，如下所示：</target>
        </trans-unit>
        <trans-unit id="329dbf16f14bf242b43f88c33385de61b3bc8529" translate="yes" xml:space="preserve">
          <source>If you use Groovy templates (actually, if &lt;code&gt;groovy-templates&lt;/code&gt; is on your classpath), you also have a &lt;code&gt;GroovyMarkupViewResolver&lt;/code&gt; named &amp;lsquo;groovyMarkupViewResolver&amp;rsquo;. It looks for resources in a loader path by surrounding the view name with a prefix and suffix (externalized to &lt;code&gt;spring.groovy.template.prefix&lt;/code&gt; and &lt;code&gt;spring.groovy.template.suffix&lt;/code&gt;). The prefix and suffix have default values of &amp;lsquo;classpath:/templates/&amp;rsquo; and &amp;lsquo;.tpl&amp;rsquo;, respectively. You can override &lt;code&gt;GroovyMarkupViewResolver&lt;/code&gt; by providing a bean of the same name.</source>
          <target state="translated">如果你使用Groovy模板（实际上，如果 &lt;code&gt;groovy-templates&lt;/code&gt; 是在classpath中），你也有一个 &lt;code&gt;GroovyMarkupViewResolver&lt;/code&gt; 名为&amp;ldquo;groovyMarkupViewResolver&amp;rdquo;。它通过在视图名称周围添加前缀和后缀（扩展到 &lt;code&gt;spring.groovy.template.prefix&lt;/code&gt; 和 &lt;code&gt;spring.groovy.template.suffix&lt;/code&gt; ）来在加载器路径中查找资源。前缀和后缀分别具有默认值'classpath：/ templates /'和'.tpl'。您可以通过提供同名的bean来覆盖 &lt;code&gt;GroovyMarkupViewResolver&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="55a452a65fce8ac3e807f77005213b38beeb6fca" translate="yes" xml:space="preserve">
          <source>If you use Groovy templates, set &lt;code&gt;spring.groovy.template.cache&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfiguration.java&quot;&gt;&lt;code&gt;GroovyTemplateAutoConfiguration&lt;/code&gt;&lt;/a&gt; for other Groovy customization options.</source>
          <target state="translated">如果您使用Groovy模板，请将 &lt;code&gt;spring.groovy.template.cache&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; 。有关其他Groovy定制选项，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfiguration.java&quot;&gt; &lt;code&gt;GroovyTemplateAutoConfiguration&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="200f85ac0a387627788e92ef461afabf20d8cd8f" translate="yes" xml:space="preserve">
          <source>If you use HtmlUnit or Selenium, auto-configuration also provides an HtmlUnit &lt;code&gt;WebClient&lt;/code&gt; bean and/or a Selenium &lt;code&gt;WebDriver&lt;/code&gt; bean. The following example uses HtmlUnit:</source>
          <target state="translated">如果使用HtmlUnit或Selenium，则自动配置还会提供HtmlUnit &lt;code&gt;WebClient&lt;/code&gt; bean和/或Selenium &lt;code&gt;WebDriver&lt;/code&gt; bean。以下示例使用HtmlUnit：</target>
        </trans-unit>
        <trans-unit id="a5b73ac8a4e2e3bd5122a9967bb1e5aa3b2b81d2" translate="yes" xml:space="preserve">
          <source>If you use JBoss, you need to declare the &lt;code&gt;webjars-locator-jboss-vfs&lt;/code&gt; dependency instead of the &lt;code&gt;webjars-locator-core&lt;/code&gt;. Otherwise, all Webjars resolve as a &lt;code&gt;404&lt;/code&gt;.</source>
          <target state="translated">如果使用JBoss，则需要声明 &lt;code&gt;webjars-locator-jboss-vfs&lt;/code&gt; 依赖性，而不是 &lt;code&gt;webjars-locator-core&lt;/code&gt; 。否则，所有Webjar都解析为 &lt;code&gt;404&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b47169a793e43e7f3cdbc6eef2e7957bc6accb0" translate="yes" xml:space="preserve">
          <source>If you use Jackson to serialize and deserialize JSON data, you might want to write your own &lt;code&gt;JsonSerializer&lt;/code&gt; and &lt;code&gt;JsonDeserializer&lt;/code&gt; classes. Custom serializers are usually &lt;a href=&quot;https://github.com/FasterXML/jackson-docs/wiki/JacksonHowToCustomSerializers&quot;&gt;registered with Jackson through a module&lt;/a&gt;, but Spring Boot provides an alternative &lt;code&gt;@JsonComponent&lt;/code&gt; annotation that makes it easier to directly register Spring Beans.</source>
          <target state="translated">如果使用Jackson序列化和反序列化JSON数据，则可能要编写自己的 &lt;code&gt;JsonSerializer&lt;/code&gt; 和 &lt;code&gt;JsonDeserializer&lt;/code&gt; 类。自定义序列化程序通常是&lt;a href=&quot;https://github.com/FasterXML/jackson-docs/wiki/JacksonHowToCustomSerializers&quot;&gt;通过模块向Jackson进行注册的&lt;/a&gt;，但是Spring Boot提供了一种替代性的 &lt;code&gt;@JsonComponent&lt;/code&gt; 批注，这使得直接注册Spring Bean更加容易。</target>
        </trans-unit>
        <trans-unit id="b695a3390103bb7810c9fb6fec75fa21a4799f7f" translate="yes" xml:space="preserve">
          <source>If you use Jolokia but do not want Spring Boot to configure it, set the &lt;code&gt;management.endpoint.jolokia.enabled&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt;, as follows:</source>
          <target state="translated">如果您使用Jolokia但不希望Spring Boot对其进行配置，则将 &lt;code&gt;management.endpoint.jolokia.enabled&lt;/code&gt; 属性设置为 &lt;code&gt;false&lt;/code&gt; ，如下所示：</target>
        </trans-unit>
        <trans-unit id="bf25614405be298d7a4d7a6e5abd575729609a39" translate="yes" xml:space="preserve">
          <source>If you use Logback, you also need to tell WebLogic to prefer the packaged version rather than the version that was pre-installed with the server. You can do so by adding a &lt;code&gt;WEB-INF/weblogic.xml&lt;/code&gt; file with the following contents:</source>
          <target state="translated">如果使用Logback，还需要告诉WebLogic首选打包版本，而不是服务器预先安装的版本。您可以通过添加具有以下内容的 &lt;code&gt;WEB-INF/weblogic.xml&lt;/code&gt; 文件来做到这一点：</target>
        </trans-unit>
        <trans-unit id="80554eb5f4ad22a776ab22dd91d6f38324cad630" translate="yes" xml:space="preserve">
          <source>If you use Maven, the following example marks the servlet container (Tomcat, in this case) as being provided:</source>
          <target state="translated">如果你使用Maven,下面的例子将servlet容器(本例中是Tomcat)标记为已提供。</target>
        </trans-unit>
        <trans-unit id="9f04e29e756f1592ca2dd280c4fc5294e88cb611" translate="yes" xml:space="preserve">
          <source>If you use Mustache, you also have a &lt;code&gt;MustacheViewResolver&lt;/code&gt; named &amp;lsquo;mustacheViewResolver&amp;rsquo;. It looks for resources by surrounding the view name with a prefix and suffix. The prefix is &lt;code&gt;spring.mustache.prefix&lt;/code&gt;, and the suffix is &lt;code&gt;spring.mustache.suffix&lt;/code&gt;. The values of the prefix and suffix default to &amp;lsquo;classpath:/templates/&amp;rsquo; and &amp;lsquo;.mustache&amp;rsquo;, respectively. You can override &lt;code&gt;MustacheViewResolver&lt;/code&gt; by providing a bean of the same name.</source>
          <target state="translated">如果您使用Mustache，则还有一个名为&amp;ldquo; mustacheViewResolver&amp;rdquo;的 &lt;code&gt;MustacheViewResolver&lt;/code&gt; 。它通过在视图名称前后加上前缀和后缀来查找资源。前缀为 &lt;code&gt;spring.mustache.prefix&lt;/code&gt; ，后缀为 &lt;code&gt;spring.mustache.suffix&lt;/code&gt; 。前缀和后缀的值分别默认为&amp;ldquo; classpath：/ templates /&amp;rdquo;和&amp;ldquo; .mustache&amp;rdquo;。您可以通过提供同名的bean来覆盖 &lt;code&gt;MustacheViewResolver&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b30da9a89c682550578ea8c7efbe8f28b4a05c08" translate="yes" xml:space="preserve">
          <source>If you use Spring Batch, it comes pre-packaged with SQL initialization scripts for most popular database platforms. Spring Boot can detect your database type and execute those scripts on startup. If you use an embedded database, this happens by default. You can also enable it for any database type, as shown in the following example:</source>
          <target state="translated">如果您使用Spring Batch,它预装了适用于大多数流行数据库平台的SQL初始化脚本。Spring Boot可以检测您的数据库类型,并在启动时执行这些脚本。如果您使用的是嵌入式数据库,这将是默认的。您也可以为任何数据库类型启用它,如下例所示。</target>
        </trans-unit>
        <trans-unit id="22fa9734f5eb9434eb1050cdecd1168d30f64d65" translate="yes" xml:space="preserve">
          <source>If you use Spring Data, you need to configure &lt;code&gt;@EnableJpaRepositories&lt;/code&gt; accordingly, as shown in the following example:</source>
          <target state="translated">如果使用Spring Data，则需要相应地配置 &lt;code&gt;@EnableJpaRepositories&lt;/code&gt; ，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="0c1f3aa8d467e878058de21d916e107b6a52feae" translate="yes" xml:space="preserve">
          <source>If you use Thymeleaf, set &lt;code&gt;spring.thymeleaf.cache&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java&quot;&gt;&lt;code&gt;ThymeleafAutoConfiguration&lt;/code&gt;&lt;/a&gt; for other Thymeleaf customization options.</source>
          <target state="translated">如果您使用Thymeleaf，请将 &lt;code&gt;spring.thymeleaf.cache&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; 。有关其他Thymeleaf定制选项，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java&quot;&gt; &lt;code&gt;ThymeleafAutoConfiguration&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4b5645a11e8f0d1774fdab2dc0e90570cde1e795" translate="yes" xml:space="preserve">
          <source>If you use Thymeleaf, you also have a &lt;code&gt;ThymeleafViewResolver&lt;/code&gt; named &amp;lsquo;thymeleafViewResolver&amp;rsquo;. It looks for resources by surrounding the view name with a prefix and suffix. The prefix is &lt;code&gt;spring.thymeleaf.prefix&lt;/code&gt;, and the suffix is &lt;code&gt;spring.thymeleaf.suffix&lt;/code&gt;. The values of the prefix and suffix default to &amp;lsquo;classpath:/templates/&amp;rsquo; and &amp;lsquo;.html&amp;rsquo;, respectively. You can override &lt;code&gt;ThymeleafViewResolver&lt;/code&gt; by providing a bean of the same name.</source>
          <target state="translated">如果你使用Thymeleaf，你也有一个 &lt;code&gt;ThymeleafViewResolver&lt;/code&gt; 名为&amp;ldquo;thymeleafViewResolver&amp;rdquo;。它通过在视图名称前后加上前缀和后缀来查找资源。前缀为 &lt;code&gt;spring.thymeleaf.prefix&lt;/code&gt; ，后缀为 &lt;code&gt;spring.thymeleaf.suffix&lt;/code&gt; 。前缀和后缀的值分别默认为&amp;ldquo; classpath：/ templates /&amp;rdquo;和&amp;ldquo; .html&amp;rdquo;。您可以通过提供同名的bean来覆盖 &lt;code&gt;ThymeleafViewResolver&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e2cb7a4911ec6a44e2e2c117d4a109b91eb25cf1" translate="yes" xml:space="preserve">
          <source>If you use Tomcat, you can additionally configure the names of the headers used to carry &amp;ldquo;forwarded&amp;rdquo; information, as shown in the following example:</source>
          <target state="translated">如果使用Tomcat，则可以另外配置用于携带&amp;ldquo;转发的&amp;rdquo;信息的标头名称，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="3a1f94f9e752d2b8817badba75e798e1a0a8b144" translate="yes" xml:space="preserve">
          <source>If you use a &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests&quot;&gt;test annotation to test a more specific slice of your application&lt;/a&gt;, you should avoid adding configuration settings that are specific to a particular area on the &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-user-configuration&quot;&gt;main method&amp;rsquo;s application class&lt;/a&gt;.</source>
          <target state="translated">如果使用&lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests&quot;&gt;测试注释来测试应用程序的更特定的部分&lt;/a&gt;，则应避免在&lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-user-configuration&quot;&gt;main方法的应用程序类&lt;/a&gt;上添加特定于特定区域的配置设置。</target>
        </trans-unit>
        <trans-unit id="bc40eb2f65523c978c4f8c3a1192e22d28ae652d" translate="yes" xml:space="preserve">
          <source>If you use environment variables rather than system properties, most operating systems disallow period-separated key names, but you can use underscores instead (for example, &lt;code&gt;SPRING_CONFIG_NAME&lt;/code&gt; instead of &lt;code&gt;spring.config.name&lt;/code&gt;). See &lt;a href=&quot;#boot-features-external-config-relaxed-binding-from-environment-variables&quot;&gt;Binding from Environment Variables&lt;/a&gt; for details.</source>
          <target state="translated">如果使用环境变量而不是系统属性，则大多数操作系统不允许使用句点分隔的键名，但是可以使用下划线代替（例如，使用 &lt;code&gt;SPRING_CONFIG_NAME&lt;/code&gt; 代替 &lt;code&gt;spring.config.name&lt;/code&gt; ）。有关详细信息，请参见&lt;a href=&quot;#boot-features-external-config-relaxed-binding-from-environment-variables&quot;&gt;从环境变量绑定&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ed4e2fa0f1d8558d87d0fa88ed63043fb5275eab" translate="yes" xml:space="preserve">
          <source>If you use the &lt;a href=&quot;build-tool-plugins#build-tool-plugins&quot;&gt;Spring Boot build tools&lt;/a&gt;, marking the embedded servlet container dependency as provided produces an executable war file with the provided dependencies packaged in a &lt;code&gt;lib-provided&lt;/code&gt; directory. This means that, in addition to being deployable to a servlet container, you can also run your application by using &lt;code&gt;java -jar&lt;/code&gt; on the command line.</source>
          <target state="translated">如果您使用&lt;a href=&quot;build-tool-plugins#build-tool-plugins&quot;&gt;Spring Boot构建工具&lt;/a&gt;，则将提供的嵌入式servlet容器依赖关系标记为提供时，将生成可执行的war文件，其中提供的依赖关系打包在 &lt;code&gt;lib-provided&lt;/code&gt; 目录中。这意味着，除了可以部署到servlet容器之外，还可以通过在命令行上使用 &lt;code&gt;java -jar&lt;/code&gt; 运行应用程序。</target>
        </trans-unit>
        <trans-unit id="3eb5649d21878432f522e65663bd0fee35bf190f" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;spring-boot-starter-jdbc&lt;/code&gt; or &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; &amp;ldquo;starters&amp;rdquo;, you automatically get a dependency to &lt;code&gt;HikariCP&lt;/code&gt;.</source>
          <target state="translated">如果您使用 &lt;code&gt;spring-boot-starter-jdbc&lt;/code&gt; 或 &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; &amp;ldquo;启动器&amp;rdquo;，则会自动获得对 &lt;code&gt;HikariCP&lt;/code&gt; 的依赖。</target>
        </trans-unit>
        <trans-unit id="c755384d00b62d6971b7db9830aa5cc4183b833c" translate="yes" xml:space="preserve">
          <source>If you use the Spring Boot Maven or Gradle plugins to create an executable jar, you can run your application using &lt;code&gt;java -jar&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">如果使用Spring Boot Maven或Gradle插件创建可执行jar，则可以使用 &lt;code&gt;java -jar&lt;/code&gt; 运行应用程序，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="699b36a0cb846149d39b263e09f196f3fa06fd44" translate="yes" xml:space="preserve">
          <source>If you want those listeners to be registered automatically, regardless of the way the application is created, you can add a &lt;code&gt;META-INF/spring.factories&lt;/code&gt; file to your project and reference your listener(s) by using the &lt;code&gt;org.springframework.context.ApplicationListener&lt;/code&gt; key, as shown in the following example:</source>
          <target state="translated">如果希望这些侦听器自动注册，而不管创建应用程序的方式如何，都可以将 &lt;code&gt;META-INF/spring.factories&lt;/code&gt; 文件添加到项目中，并使用 &lt;code&gt;org.springframework.context.ApplicationListener&lt;/code&gt; 引用您的侦听器。 ApplicationListener键，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="b25f014b843edbb25ac485fe2714072ade62884b" translate="yes" xml:space="preserve">
          <source>If you want to configure a component that JPA uses, then you need to ensure that the component is initialized before JPA. When the component is auto-configured, Spring Boot takes care of this for you. For example, when Flyway is auto-configured, Hibernate is configured to depend upon Flyway so that Flyway has a chance to initialize the database before Hibernate tries to use it.</source>
          <target state="translated">如果你想配置JPA使用的组件,那么你需要确保组件在JPA之前被初始化。当组件被自动配置时,Spring Boot会帮你处理这个问题。例如,当Flyway被自动配置时,Hibernate被配置为依赖于Flyway,这样Flyway就有机会在Hibernate尝试使用它之前初始化数据库。</target>
        </trans-unit>
        <trans-unit id="be2360b76ae9f8eb9c884b7a3ac7ce1efdaab0ee" translate="yes" xml:space="preserve">
          <source>If you want to customize the primary configuration, you can use a nested &lt;code&gt;@TestConfiguration&lt;/code&gt; class. Unlike a nested &lt;code&gt;@Configuration&lt;/code&gt; class, which would be used instead of your application&amp;rsquo;s primary configuration, a nested &lt;code&gt;@TestConfiguration&lt;/code&gt; class is used in addition to your application&amp;rsquo;s primary configuration.</source>
          <target state="translated">如果要自定义主要配置，则可以使用嵌套的 &lt;code&gt;@TestConfiguration&lt;/code&gt; 类。与将使用嵌套的 &lt;code&gt;@Configuration&lt;/code&gt; 类代替应用程序的主要配置 &lt;code&gt;@TestConfiguration&lt;/code&gt; 是，除了应用程序的主要配置之外，还使用嵌套的@TestConfiguration类。</target>
        </trans-unit>
        <trans-unit id="b50fc66f62117cfae0cc3b36483a125265ecbb41" translate="yes" xml:space="preserve">
          <source>If you want to disable console logging and write output only to a file, you need a custom &lt;code&gt;logback-spring.xml&lt;/code&gt; that imports &lt;code&gt;file-appender.xml&lt;/code&gt; but not &lt;code&gt;console-appender.xml&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">如果要禁用控制台日志记录并仅将输出写入文件，则需要一个自定义 &lt;code&gt;logback-spring.xml&lt;/code&gt; ，该 &lt;code&gt;file-appender.xml&lt;/code&gt; 将导入file-appender.xml而不是 &lt;code&gt;console-appender.xml&lt;/code&gt; ，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="1d223a57b56e8fb9986e84d89f1846a61686f0d0" translate="yes" xml:space="preserve">
          <source>If you want to disable lazy initialization for certain beans while using lazy initialization for the rest of the application, you can explicitly set their lazy attribute to false using the &lt;code&gt;@Lazy(false)&lt;/code&gt; annotation.</source>
          <target state="translated">如果要在对应用程序的其余部分使用延迟初始化时禁用某些bean的延迟初始化，则可以使用 &lt;code&gt;@Lazy(false)&lt;/code&gt; 批注将它们的延迟属性显式设置为false 。</target>
        </trans-unit>
        <trans-unit id="f8a62e4249d3e387255d76202942ee0cfe00bb0a" translate="yes" xml:space="preserve">
          <source>If you want to display a custom HTML error page for a given status code, you can add a file to an &lt;code&gt;/error&lt;/code&gt; directory. Error pages can either be static HTML (that is, added under any of the static resource directories) or be built by using templates. The name of the file should be the exact status code or a series mask.</source>
          <target state="translated">如果要显示给定状态代码的自定义HTML错误页面，可以将文件添加到 &lt;code&gt;/error&lt;/code&gt; 目录。错误页面可以是静态HTML（即添加到任何静态资源目录下），也可以使用模板来构建。文件名应为确切的状态代码或系列掩码。</target>
        </trans-unit>
        <trans-unit id="69f9761c08829c9eabaf567e4363649fb544439a" translate="yes" xml:space="preserve">
          <source>If you want to display a custom HTML error page for a given status code, you can add a file to an &lt;code&gt;/error&lt;/code&gt; directory. Error pages can either be static HTML (that is, added under any of the static resource directories) or built with templates. The name of the file should be the exact status code or a series mask.</source>
          <target state="translated">如果要显示给定状态代码的自定义HTML错误页面，可以将文件添加到 &lt;code&gt;/error&lt;/code&gt; 目录。错误页面可以是静态HTML（即添加到任何静态资源目录下），也可以使用模板构建。文件名应为确切的状态代码或系列掩码。</target>
        </trans-unit>
        <trans-unit id="624b7d8a30a77db7ab8cabf777e5c0b3a374000c" translate="yes" xml:space="preserve">
          <source>If you want to display the full git information (that is, the full content of &lt;code&gt;git.properties&lt;/code&gt;), use the &lt;code&gt;management.info.git.mode&lt;/code&gt; property, as follows:</source>
          <target state="translated">如果要显示完整的git信息（即 &lt;code&gt;git.properties&lt;/code&gt; 的完整内容），请使用 &lt;code&gt;management.info.git.mode&lt;/code&gt; 属性，如下所示：</target>
        </trans-unit>
        <trans-unit id="493964adcff302ec746abc24cb0a1e5c34c15dd8" translate="yes" xml:space="preserve">
          <source>If you want to focus only on the web layer and not start a complete &lt;code&gt;ApplicationContext&lt;/code&gt;, consider &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-mvc-tests&quot;&gt;using &lt;code&gt;@WebMvcTest&lt;/code&gt; instead&lt;/a&gt;.</source>
          <target state="translated">如果你想只专注于网络层，而不是开始一个完整 &lt;code&gt;ApplicationContext&lt;/code&gt; ，可以考虑&lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-mvc-tests&quot;&gt;使用 &lt;code&gt;@WebMvcTest&lt;/code&gt; 代替&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="82fdad60661aeaff32999005c56a3b78e7142db4" translate="yes" xml:space="preserve">
          <source>If you want to fully disable the &lt;code&gt;/cloudfoundryapplication&lt;/code&gt; endpoints, you can add the following setting to your &lt;code&gt;application.properties&lt;/code&gt; file:</source>
          <target state="translated">如果要完全禁用 &lt;code&gt;/cloudfoundryapplication&lt;/code&gt; 端点，可以将以下设置添加到 &lt;code&gt;application.properties&lt;/code&gt; 文件：</target>
        </trans-unit>
        <trans-unit id="73a7d3ceeb384bcb40ac81265e1aab52bc28f853" translate="yes" xml:space="preserve">
          <source>If you want to ignore all &lt;code&gt;ConfigDataLocationNotFoundExceptions&lt;/code&gt; and always continue to start your application, you can use the &lt;code&gt;spring.config.on-not-found&lt;/code&gt; property. Set the value to &lt;code&gt;ignore&lt;/code&gt; using &lt;code&gt;SpringApplication.setDefaultProperties(&amp;hellip;​)&lt;/code&gt; or with a system/environment variable.</source>
          <target state="translated">如果要忽略所有 &lt;code&gt;ConfigDataLocationNotFoundExceptions&lt;/code&gt; 并始终继续启动应用程序，则可以使用 &lt;code&gt;spring.config.on-not-found&lt;/code&gt; 属性。使用 &lt;code&gt;SpringApplication.setDefaultProperties(&amp;hellip;​)&lt;/code&gt; 或系统/环境变量将值设置为 &lt;code&gt;ignore&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6fd19d0383892da728742c28a42c5af7f941d041" translate="yes" xml:space="preserve">
          <source>If you want to implement your own strategy for when endpoints are exposed, you can register an &lt;code&gt;EndpointFilter&lt;/code&gt; bean.</source>
          <target state="translated">如果要针对暴露端点的时间实施自己的策略，则可以注册 &lt;code&gt;EndpointFilter&lt;/code&gt; bean。</target>
        </trans-unit>
        <trans-unit id="741c16b9ff9ccedc5c83c834e3dfe6b8c2600b21" translate="yes" xml:space="preserve">
          <source>If you want to keep Spring Boot WebFlux features and you want to add additional &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#webflux-config&quot;&gt;WebFlux configuration&lt;/a&gt;, you can add your own &lt;code&gt;@Configuration&lt;/code&gt; class of type &lt;code&gt;WebFluxConfigurer&lt;/code&gt; but &lt;strong&gt;without&lt;/strong&gt;&lt;code&gt;@EnableWebFlux&lt;/code&gt;.</source>
          <target state="translated">如果您想保留Spring Boot WebFlux功能并想要添加其他&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#webflux-config&quot;&gt;WebFlux配置&lt;/a&gt;，则可以添加自己的类型为 &lt;code&gt;WebFluxConfigurer&lt;/code&gt; 的 &lt;code&gt;@Configuration&lt;/code&gt; 类，但&lt;strong&gt;不添加&lt;/strong&gt; &lt;code&gt;@EnableWebFlux&lt;/code&gt; 。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fbd9388dd671c21460011cd9b6eb05186652ddd1" translate="yes" xml:space="preserve">
          <source>If you want to keep those Spring Boot MVC customizations and make more &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc&quot;&gt;MVC customizations&lt;/a&gt; (interceptors, formatters, view controllers, and other features), you can add your own &lt;code&gt;@Configuration&lt;/code&gt; class of type &lt;code&gt;WebMvcConfigurer&lt;/code&gt; but &lt;strong&gt;without&lt;/strong&gt;&lt;code&gt;@EnableWebMvc&lt;/code&gt;.</source>
          <target state="translated">如果您想保留那些Spring Boot MVC定制并进行更多的&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc&quot;&gt;MVC定制&lt;/a&gt;（拦截器，格式化程序，视图控制器和其他功能），则可以添加自己的类型为 &lt;code&gt;WebMvcConfigurer&lt;/code&gt; 的 &lt;code&gt;@Configuration&lt;/code&gt; 类，但&lt;strong&gt;不添加&lt;/strong&gt; &lt;code&gt;@EnableWebMvc&lt;/code&gt; 。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36716c70e1204add70bad25f0a422fcd44455b3b" translate="yes" xml:space="preserve">
          <source>If you want to keep those defaults and &lt;em&gt;add&lt;/em&gt; additional exclusions, use the &lt;code&gt;spring.devtools.restart.additional-exclude&lt;/code&gt; property instead.</source>
          <target state="translated">如果要保留这些默认值并&lt;em&gt;添加&lt;/em&gt;其他排除项，请改用 &lt;code&gt;spring.devtools.restart.additional-exclude&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="64fef5df8dfd20e835450f3a8052e8c80a266c1c" translate="yes" xml:space="preserve">
          <source>If you want to know on which HTTP port the application is running, get the property with a key of &lt;code&gt;local.server.port&lt;/code&gt;.</source>
          <target state="translated">如果您想知道应用程序在哪个HTTP端口上运行，请使用 &lt;code&gt;local.server.port&lt;/code&gt; 键获取该属性。</target>
        </trans-unit>
        <trans-unit id="f3c14308ed1f8bd2ad58596890afa151af96551c" translate="yes" xml:space="preserve">
          <source>If you want to learn more about any of the classes discussed in this section, you can check out the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/&quot;&gt;Spring Boot API documentation&lt;/a&gt; or you can browse the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0&quot;&gt;source code directly&lt;/a&gt;. If you have specific questions, take a look at the &lt;a href=&quot;howto#howto&quot;&gt;how-to&lt;/a&gt; section.</source>
          <target state="translated">如果您想了解有关本节中讨论的任何类的更多信息，可以查看&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/&quot;&gt;Spring Boot API文档&lt;/a&gt;，也可以&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0&quot;&gt;直接&lt;/a&gt;浏览源代码。如果您有特定问题，请查看&lt;a href=&quot;howto#howto&quot;&gt;操作方法&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="a2626fcca1e8673560c93c7d00aed1923b2b0290" translate="yes" xml:space="preserve">
          <source>If you want to make use of Spring REST Docs support for a parameterized output directory, you can create a &lt;code&gt;RestDocumentationResultHandler&lt;/code&gt; bean. The auto-configuration calls &lt;code&gt;alwaysDo&lt;/code&gt; with this result handler, thereby causing each &lt;code&gt;MockMvc&lt;/code&gt; call to automatically generate the default snippets. The following example shows a &lt;code&gt;RestDocumentationResultHandler&lt;/code&gt; being defined:</source>
          <target state="translated">如果要使用Spring REST Docs对参数化输出目录的支持，则可以创建 &lt;code&gt;RestDocumentationResultHandler&lt;/code&gt; bean。自动配置使用此结果处理程序调用 &lt;code&gt;alwaysDo&lt;/code&gt; ，从而使每个 &lt;code&gt;MockMvc&lt;/code&gt; 调用自动生成默认片段。以下示例显示了一个定义的 &lt;code&gt;RestDocumentationResultHandler&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c607775e0b707f23313431305f4ab41ab5d0f1a0" translate="yes" xml:space="preserve">
          <source>If you want to map endpoints to a different path, you can use the &lt;code&gt;management.endpoints.web.path-mapping&lt;/code&gt; property.</source>
          <target state="translated">如果要将端点映射到其他路径，可以使用 &lt;code&gt;management.endpoints.web.path-mapping&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="432dd123a66ed2fa55b7613841392f2732f319f4" translate="yes" xml:space="preserve">
          <source>If you want to order certain auto-configurations that should not have any direct knowledge of each other, you can also use &lt;code&gt;@AutoConfigureOrder&lt;/code&gt;. That annotation has the same semantic as the regular &lt;code&gt;@Order&lt;/code&gt; annotation but provides a dedicated order for auto-configuration classes.</source>
          <target state="translated">如果要订购某些彼此之间不具有直接知识的自动配置，则也可以使用 &lt;code&gt;@AutoConfigureOrder&lt;/code&gt; 。该注释与常规 &lt;code&gt;@Order&lt;/code&gt; 注释具有相同的语义，但为自动配置类提供了专用的顺序。</target>
        </trans-unit>
        <trans-unit id="91211ab9c662e446c11bf23eb1e4dc10b8b2fea2" translate="yes" xml:space="preserve">
          <source>If you want to provide custom instances of &lt;code&gt;RequestMappingHandlerMapping&lt;/code&gt;, &lt;code&gt;RequestMappingHandlerAdapter&lt;/code&gt;, or &lt;code&gt;ExceptionHandlerExceptionResolver&lt;/code&gt;, and still keep the Spring Boot MVC customizations, you can declare a bean of type &lt;code&gt;WebMvcRegistrations&lt;/code&gt; and use it to provide custom instances of those components.</source>
          <target state="translated">如果要提供 &lt;code&gt;RequestMappingHandlerMapping&lt;/code&gt; ， &lt;code&gt;RequestMappingHandlerAdapter&lt;/code&gt; 或 &lt;code&gt;ExceptionHandlerExceptionResolver&lt;/code&gt; 的自定义实例，并且仍然保留Spring Boot MVC的自定义，则可以声明 &lt;code&gt;WebMvcRegistrations&lt;/code&gt; 类型的bean并使用它提供这些组件的自定义实例。</target>
        </trans-unit>
        <trans-unit id="23b15bc8b8ede57829d4e69ff8b81773edf478aa" translate="yes" xml:space="preserve">
          <source>If you want to replace the default &lt;code&gt;ObjectMapper&lt;/code&gt; completely, either define a &lt;code&gt;@Bean&lt;/code&gt; of that type and mark it as &lt;code&gt;@Primary&lt;/code&gt; or, if you prefer the builder-based approach, define a &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt;&lt;code&gt;@Bean&lt;/code&gt;. Note that, in either case, doing so disables all auto-configuration of the &lt;code&gt;ObjectMapper&lt;/code&gt;.</source>
          <target state="translated">如果要完全替换默认的 &lt;code&gt;ObjectMapper&lt;/code&gt; ，则可以定义该类型的 &lt;code&gt;@Bean&lt;/code&gt; 并将其标记为 &lt;code&gt;@Primary&lt;/code&gt; ,或者，如果您更喜欢基于构建器的方法，则可以定义 &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; &lt;code&gt;@Bean&lt;/code&gt; 。请注意，无论哪种情况，这样做都会禁用 &lt;code&gt;ObjectMapper&lt;/code&gt; 的所有自动配置。</target>
        </trans-unit>
        <trans-unit id="edbf741fa0c3df0dfda82aeb97d412a27aa3f6ee" translate="yes" xml:space="preserve">
          <source>If you want to specify a location, but you don&amp;rsquo;t mind if it doesn&amp;rsquo;t always exist, you can use the &lt;code&gt;optional:&lt;/code&gt; prefix. You can use this prefix with the &lt;code&gt;spring.config.location&lt;/code&gt; and &lt;code&gt;spring.config.additional-location&lt;/code&gt; properties, as well as with &lt;a href=&quot;#boot-features-external-config-files-importing&quot;&gt;&lt;code&gt;spring.config.import&lt;/code&gt;&lt;/a&gt; declarations.</source>
          <target state="translated">如果要指定位置，但不介意它并不总是存在，则可以使用 &lt;code&gt;optional:&lt;/code&gt; 前缀。您可以将此前缀与 &lt;code&gt;spring.config.location&lt;/code&gt; 和 &lt;code&gt;spring.config.additional-location&lt;/code&gt; 属性以及&lt;a href=&quot;#boot-features-external-config-files-importing&quot;&gt; &lt;code&gt;spring.config.import&lt;/code&gt; &lt;/a&gt;声明一起使用。</target>
        </trans-unit>
        <trans-unit id="9891c4c37257cf2295f9959de070aec764ce22fb" translate="yes" xml:space="preserve">
          <source>If you want to support your own locations, see the &lt;code&gt;ConfigDataLocationResolver&lt;/code&gt; and &lt;code&gt;ConfigDataLoader&lt;/code&gt; classes in the &lt;code&gt;org.springframework.boot.context.config&lt;/code&gt; package.</source>
          <target state="translated">如果要支持自己的位置，请参阅 &lt;code&gt;org.springframework.boot.context.config&lt;/code&gt; 包中的 &lt;code&gt;ConfigDataLocationResolver&lt;/code&gt; 和 &lt;code&gt;ConfigDataLoader&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="e6f7e0617bbef6d4edd55dc0470f3fc295c93514" translate="yes" xml:space="preserve">
          <source>If you want to take complete control of Spring MVC, you can add your own &lt;code&gt;@Configuration&lt;/code&gt; annotated with &lt;code&gt;@EnableWebMvc&lt;/code&gt;, or alternatively add your own &lt;code&gt;@Configuration&lt;/code&gt;-annotated &lt;code&gt;DelegatingWebMvcConfiguration&lt;/code&gt; as described in the Javadoc of &lt;code&gt;@EnableWebMvc&lt;/code&gt;.</source>
          <target state="translated">如果你想利用Spring MVC中的完全控制，你可以添加自己的 &lt;code&gt;@Configuration&lt;/code&gt; 标注有 &lt;code&gt;@EnableWebMvc&lt;/code&gt; ，或者添加自己的 &lt;code&gt;@Configuration&lt;/code&gt; -annotated &lt;code&gt;DelegatingWebMvcConfiguration&lt;/code&gt; 中的Javadoc中所述 &lt;code&gt;@EnableWebMvc&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56a28c43685cb3281d250918d6da45d0d6a5320f" translate="yes" xml:space="preserve">
          <source>If you want to take complete control of Spring WebFlux, you can add your own &lt;code&gt;@Configuration&lt;/code&gt; annotated with &lt;code&gt;@EnableWebFlux&lt;/code&gt;.</source>
          <target state="translated">如果要完全控制Spring WebFlux，则可以添加带有 &lt;code&gt;@EnableWebFlux&lt;/code&gt; 注释的自己的 &lt;code&gt;@Configuration&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2e69ddb36111de9fcdef0e601749e63eb2a112e7" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;code&gt;@ServerEndpoint&lt;/code&gt; in a Spring Boot application that used an embedded container, you must declare a single &lt;code&gt;ServerEndpointExporter&lt;/code&gt;&lt;code&gt;@Bean&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">如果你想使用 &lt;code&gt;@ServerEndpoint&lt;/code&gt; 在使用嵌入式容器春季启动应用程序，您必须声明一个 &lt;code&gt;ServerEndpointExporter&lt;/code&gt; &lt;code&gt;@Bean&lt;/code&gt; ，如下面的例子：</target>
        </trans-unit>
        <trans-unit id="013ad3799a0f1a3cba25b8dccb7f0df3f8a62d7f" translate="yes" xml:space="preserve">
          <source>If you want to use a build tool other than Maven, Gradle, or Ant, you likely need to develop your own plugin. Executable jars need to follow a specific format and certain entries need to be written in an uncompressed form (see the &amp;ldquo;&lt;a href=&quot;appendix-executable-jar-format#executable-jar&quot;&gt;executable jar format&lt;/a&gt;&amp;rdquo; section in the appendix for details).</source>
          <target state="translated">如果要使用Maven，Gradle或Ant以外的构建工具，则可能需要开发自己的插件。可执行的jar需要遵循特定的格式，某些条目需要以未压缩的形式编写（有关详细信息，请参见附录中的&amp;ldquo;&lt;a href=&quot;appendix-executable-jar-format#executable-jar&quot;&gt;可执行jar格式&lt;/a&gt;&amp;rdquo;部分）。</target>
        </trans-unit>
        <trans-unit id="373fe9e7645717678b271f84131ac9f8b016f106" translate="yes" xml:space="preserve">
          <source>If you want to use a non-XA &lt;code&gt;ConnectionFactory&lt;/code&gt;, you can inject the &lt;code&gt;nonXaJmsConnectionFactory&lt;/code&gt; bean rather than the &lt;code&gt;@Primary&lt;/code&gt;&lt;code&gt;jmsConnectionFactory&lt;/code&gt; bean. For consistency, the &lt;code&gt;jmsConnectionFactory&lt;/code&gt; bean is also provided by using the bean alias &lt;code&gt;xaJmsConnectionFactory&lt;/code&gt;.</source>
          <target state="translated">如果要使用非XA &lt;code&gt;ConnectionFactory&lt;/code&gt; ，则可以注入 &lt;code&gt;nonXaJmsConnectionFactory&lt;/code&gt; bean，而不是 &lt;code&gt;@Primary&lt;/code&gt; &lt;code&gt;jmsConnectionFactory&lt;/code&gt; bean。为了保持一致性，还使用bean别名 &lt;code&gt;xaJmsConnectionFactory&lt;/code&gt; 提供了 &lt;code&gt;jmsConnectionFactory&lt;/code&gt; bean 。</target>
        </trans-unit>
        <trans-unit id="9bad185f506dbaedb06659b3c83779ad74120227" translate="yes" xml:space="preserve">
          <source>If you want to use a placeholder in a logging property, you should use &lt;a href=&quot;#boot-features-external-config-placeholders-in-properties&quot;&gt;Spring Boot&amp;rsquo;s syntax&lt;/a&gt; and not the syntax of the underlying framework. Notably, if you use Logback, you should use &lt;code&gt;:&lt;/code&gt; as the delimiter between a property name and its default value and not use &lt;code&gt;:-&lt;/code&gt;.</source>
          <target state="translated">如果要在日志记录属性中使用占位符，则应使用&lt;a href=&quot;#boot-features-external-config-placeholders-in-properties&quot;&gt;Spring Boot的语法&lt;/a&gt;而不是基础框架的语法。值得注意的是，如果使用Logback，则应使用 &lt;code&gt;:&lt;/code&gt; 作为属性名称与其默认值之间的分隔符，而不应使用 &lt;code&gt;:-&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e19fe20bc62c53824a70c197105a5812e81a17ca" translate="yes" xml:space="preserve">
          <source>If you wish to override that choice for the client, you can define your own &lt;code&gt;ClientHttpConnector&lt;/code&gt; bean and have full control over the client configuration.</source>
          <target state="translated">如果您希望为客户端覆盖该选择，则可以定义自己的 &lt;code&gt;ClientHttpConnector&lt;/code&gt; bean并完全控制客户端配置。</target>
        </trans-unit>
        <trans-unit id="0d093e0d415bc10b403677fb4783e8f1c921505c" translate="yes" xml:space="preserve">
          <source>If you wish to use Spock to test a Spring Boot application, you should add a dependency on Spock&amp;rsquo;s &lt;code&gt;spock-spring&lt;/code&gt; module to your application&amp;rsquo;s build. &lt;code&gt;spock-spring&lt;/code&gt; integrates Spring&amp;rsquo;s test framework into Spock. It is recommended that you use Spock 1.2 or later to benefit from a number of improvements to Spock&amp;rsquo;s Spring Framework and Spring Boot integration. See &lt;a href=&quot;http://spockframework.org/spock/docs/1.2/modules.html#_spring_module&quot;&gt;the documentation for Spock&amp;rsquo;s Spring module&lt;/a&gt; for further details.</source>
          <target state="translated">如果您希望使用Spock来测试Spring Boot应用程序，则应在应用程序的构建中添加对Spock的 &lt;code&gt;spock-spring&lt;/code&gt; 模块的依赖。 &lt;code&gt;spock-spring&lt;/code&gt; 将Spring的测试框架集成到了Spock中。建议您使用Spock 1.2或更高版本，以受益于Spock的Spring框架和Spring Boot集成的许多改进。有关更多详细信息，请参见&lt;a href=&quot;http://spockframework.org/spock/docs/1.2/modules.html#_spring_module&quot;&gt;Spock的Spring模块的文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="674409ec74a8fb74c075ffce71bec99f6d688385" translate="yes" xml:space="preserve">
          <source>If you wish to use your own template for backing the Elasticsearch repositories, you can add your own &lt;code&gt;ElasticsearchRestTemplate&lt;/code&gt; or &lt;code&gt;ElasticsearchOperations&lt;/code&gt;&lt;code&gt;@Bean&lt;/code&gt;, as long as it is named &lt;code&gt;&quot;elasticsearchTemplate&quot;&lt;/code&gt;. Same applies to &lt;code&gt;ReactiveElasticsearchTemplate&lt;/code&gt; and &lt;code&gt;ReactiveElasticsearchOperations&lt;/code&gt;, with the bean name &lt;code&gt;&quot;reactiveElasticsearchTemplate&quot;&lt;/code&gt;.</source>
          <target state="translated">如果您希望使用自己的模板来支持Elasticsearch存储库，则可以添加自己的 &lt;code&gt;ElasticsearchRestTemplate&lt;/code&gt; 或 &lt;code&gt;ElasticsearchOperations&lt;/code&gt; &lt;code&gt;@Bean&lt;/code&gt; ，只要它名为 &lt;code&gt;&quot;elasticsearchTemplate&quot;&lt;/code&gt; elasticsearchTemplate &amp;rdquo;即可。同样适用于 &lt;code&gt;ReactiveElasticsearchTemplate&lt;/code&gt; 和 &lt;code&gt;ReactiveElasticsearchOperations&lt;/code&gt; ，其bean名称为 &lt;code&gt;&quot;reactiveElasticsearchTemplate&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aa75191ea35e9ca860e2a0b768176bf25547f68c" translate="yes" xml:space="preserve">
          <source>If you work in a company that develops shared libraries, or if you work on an open-source or commercial library, you might want to develop your own auto-configuration. Auto-configuration classes can be bundled in external jars and still be picked-up by Spring Boot.</source>
          <target state="translated">如果你在一个开发共享库的公司工作,或者你在一个开源或商业库上工作,你可能想开发自己的自动配置。自动配置类可以捆绑在外部jar中,并且仍然可以被Spring Boot接收。</target>
        </trans-unit>
        <trans-unit id="a5cb98e0220a61ea3812df759ed802ecc934ebae" translate="yes" xml:space="preserve">
          <source>If you work with an IDE that continuously compiles changed files, you might prefer to trigger restarts only at specific times. To do so, you can use a &amp;ldquo;trigger file&amp;rdquo;, which is a special file that must be modified when you want to actually trigger a restart check.</source>
          <target state="translated">如果使用持续编译更改文件的IDE，则可能更喜欢仅在特定时间触发重新启动。为此，您可以使用&amp;ldquo;触发文件&amp;rdquo;，这是一个特殊文件，当您要实际触发重新启动检查时必须对其进行修改。</target>
        </trans-unit>
        <trans-unit id="1df71523c85d414cef5755a813a32f85957cfee6" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d rather use native pooling, you can do so by adding a dependency to &lt;code&gt;org.messaginghub:pooled-jms&lt;/code&gt; and configuring the &lt;code&gt;JmsPoolConnectionFactory&lt;/code&gt; accordingly, as shown in the following example:</source>
          <target state="translated">如果您想使用本机池，则可以通过向 &lt;code&gt;org.messaginghub:pooled-jms&lt;/code&gt; 添加依赖项并相应地配置 &lt;code&gt;JmsPoolConnectionFactory&lt;/code&gt; 来实现，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="c4fd1e9a8093f7560e569f2b3fb1d3c90d2a67af" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re looking for a secure way to store credentials and passwords, the &lt;a href=&quot;https://cloud.spring.io/spring-cloud-vault/&quot;&gt;Spring Cloud Vault&lt;/a&gt; project provides support for storing externalized configuration in &lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;HashiCorp Vault&lt;/a&gt;.</source>
          <target state="translated">如果您正在寻找一种安全的方式来存储凭据和密码，&lt;a href=&quot;https://cloud.spring.io/spring-cloud-vault/&quot;&gt;Spring Cloud Vault&lt;/a&gt;项目提供了对在&lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;HashiCorp Vault中&lt;/a&gt;存储外部化配置的支持。</target>
        </trans-unit>
        <trans-unit id="755f2b5981fa3e701b83111a7d9be865466b6fa1" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using &lt;code&gt;CqlSessionBuilder&lt;/code&gt; to create multiple &lt;code&gt;CqlSession&lt;/code&gt; beans, keep in mind the builder is mutable so make sure to inject a fresh copy for each session.</source>
          <target state="translated">如果您使用 &lt;code&gt;CqlSessionBuilder&lt;/code&gt; 创建多个 &lt;code&gt;CqlSession&lt;/code&gt; Bean，请记住该构建器是可变的，因此请确保为每个会话注入一个新副本。</target>
        </trans-unit>
        <trans-unit id="9c66b22d9d74bc66272791e367da27972b4a54cc" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Logback, the following properties are also transfered:</source>
          <target state="translated">如果您使用的是Logback，还将传输以下属性：</target>
        </trans-unit>
        <trans-unit id="ad9aff1dfba157d71c46e8d8037f6f4cca20e1e2" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Spring Boot&amp;rsquo;s AssertJ-based helpers to assert on a number value at a given JSON path, you might not be able to use &lt;code&gt;isEqualTo&lt;/code&gt; depending on the type. Instead, you can use AssertJ&amp;rsquo;s &lt;code&gt;satisfies&lt;/code&gt; to assert that the value matches the given condition. For instance, the following example asserts that the actual number is a float value close to &lt;code&gt;0.15&lt;/code&gt; within an offset of &lt;code&gt;0.01&lt;/code&gt;.</source>
          <target state="translated">如果您正在使用基于Spring Boot基于AssertJ的帮助程序来声明给定JSON路径上的数字值，则可能无法使用 &lt;code&gt;isEqualTo&lt;/code&gt; ,具体取决于类型。相反，您可以使用AssertJ的 &lt;code&gt;satisfies&lt;/code&gt; 来断言该值匹配给定条件。例如，以下示例断言实际数字是在 &lt;code&gt;0.01&lt;/code&gt; 的偏移量内接近 &lt;code&gt;0.15&lt;/code&gt; 的浮点值。</target>
        </trans-unit>
        <trans-unit id="544d50bf6423319a5da409a253d07b53966b42e3" translate="yes" xml:space="preserve">
          <source>If your Actuator endpoints are deployed on a separate management context, be aware that endpoints are then not using the same web infrastructure (port, connection pools, framework components) as the main application. In this case, a probe check could be successful even if the main application does not work properly (for example, it cannot accept new connections).</source>
          <target state="translated">如果你的Actuator端点被部署在一个单独的管理上下文上,要注意端点并没有和主应用程序使用相同的网络基础设施(端口、连接池、框架组件)。在这种情况下,即使主应用程序不能正常工作(例如,它不能接受新的连接),探测检查也可能成功。</target>
        </trans-unit>
        <trans-unit id="9e543959634891444497e3af208efb2f434578a0" translate="yes" xml:space="preserve">
          <source>If your JMS broker does not support transacted sessions, you have to disable the support of transactions altogether. If you create your own &lt;code&gt;JmsListenerContainerFactory&lt;/code&gt;, there is nothing to do, since, by default it cannot be transacted. If you want to use the &lt;code&gt;DefaultJmsListenerContainerFactoryConfigurer&lt;/code&gt; to reuse Spring Boot&amp;rsquo;s default, you can disable transacted sessions, as follows:</source>
          <target state="translated">如果您的JMS代理不支持事务会话，则必须完全禁用对事务的支持。如果您创建自己的 &lt;code&gt;JmsListenerContainerFactory&lt;/code&gt; ，则无需执行任何操作，因为默认情况下无法进行处理。如果您想使用 &lt;code&gt;DefaultJmsListenerContainerFactoryConfigurer&lt;/code&gt; 重用Spring Boot的默认值，则可以禁用事务性会话，如下所示：</target>
        </trans-unit>
        <trans-unit id="562d2457f6fdebdf847ef579012b91cf0f1a2b5c" translate="yes" xml:space="preserve">
          <source>If your application contains more than one Spring &lt;code&gt;ApplicationContext&lt;/code&gt;, you may find that names clash. To solve this problem, you can set the &lt;code&gt;spring.jmx.unique-names&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt; so that MBean names are always unique.</source>
          <target state="translated">如果您的应用程序包含多个Spring &lt;code&gt;ApplicationContext&lt;/code&gt; ，则可能会发现名称冲突。要解决此问题，可以将 &lt;code&gt;spring.jmx.unique-names&lt;/code&gt; 属性设置为 &lt;code&gt;true&lt;/code&gt; ,以便MBean名称始终是唯一的。</target>
        </trans-unit>
        <trans-unit id="2408a1896383c7cf37df7085b37565b7972d39b5" translate="yes" xml:space="preserve">
          <source>If your application expects &lt;a href=&quot;#boot-features-application-arguments&quot;&gt;arguments&lt;/a&gt;, you can have &lt;code&gt;@SpringBootTest&lt;/code&gt; inject them using the &lt;code&gt;args&lt;/code&gt; attribute.</source>
          <target state="translated">如果您的应用程序需要&lt;a href=&quot;#boot-features-application-arguments&quot;&gt;参数&lt;/a&gt;，则可以让 &lt;code&gt;@SpringBootTest&lt;/code&gt; 使用 &lt;code&gt;args&lt;/code&gt; 属性注入它们。</target>
        </trans-unit>
        <trans-unit id="df4bbe47ef449952b4917a670844583cef078b23" translate="yes" xml:space="preserve">
          <source>If your application fails to start, check the log file written to &lt;code&gt;/var/log/&amp;lt;appname&amp;gt;.log&lt;/code&gt; for errors.</source>
          <target state="translated">如果您的应用程序无法启动，请检查写入 &lt;code&gt;/var/log/&amp;lt;appname&amp;gt;.log&lt;/code&gt; 的日志文件中是否有错误。</target>
        </trans-unit>
        <trans-unit id="6987f290750e30e17648350e6d96216380421c08" translate="yes" xml:space="preserve">
          <source>If your application fails to start, registered &lt;code&gt;FailureAnalyzers&lt;/code&gt; get a chance to provide a dedicated error message and a concrete action to fix the problem. For instance, if you start a web application on port &lt;code&gt;8080&lt;/code&gt; and that port is already in use, you should see something similar to the following message:</source>
          <target state="translated">如果您的应用程序无法启动， &lt;code&gt;FailureAnalyzers&lt;/code&gt; 注册的FailureAnalyzers将有机会提供专门的错误消息和解决该问题的具体措施。例如，如果您在端口 &lt;code&gt;8080&lt;/code&gt; 上启动Web应用程序并且该端口已在使用中，则应该看到类似于以下消息的内容：</target>
        </trans-unit>
        <trans-unit id="d09a339c008618edea8f94ed53285f6ddcebd4dc" translate="yes" xml:space="preserve">
          <source>If your application is a web application (Spring MVC, Spring WebFlux, or Jersey), you can use the following additional endpoints:</source>
          <target state="translated">如果您的应用程序是一个Web应用程序(Spring MVC、Spring WebFlux或Jersey),您可以使用以下附加端点。</target>
        </trans-unit>
        <trans-unit id="7b23495c1af6bfb78b7c8c76ce1e850f2ee80845" translate="yes" xml:space="preserve">
          <source>If your application is exposed publicly, we strongly recommend that you also &lt;a href=&quot;#production-ready-endpoints-security&quot;&gt;secure your endpoints&lt;/a&gt;.</source>
          <target state="translated">如果您的应用程序公开公开，我们强烈建议您还&lt;a href=&quot;#production-ready-endpoints-security&quot;&gt;保护端点&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="70df1c7c35e88f1942a9ae6aac775a101a6eb92a" translate="yes" xml:space="preserve">
          <source>If your application is running behind a proxy, a load-balancer or in the cloud, the request information (like the host, port, scheme&amp;hellip;​) might change along the way. Your application may be running on &lt;code&gt;10.10.10.10:8080&lt;/code&gt;, but HTTP clients should only see &lt;code&gt;example.org&lt;/code&gt;.</source>
          <target state="translated">如果您的应用程序是在代理，负载均衡器之后或在云中运行的，则请求信息（例如主机，端口，方案等）可能会随之变化。您的应用程序可能正在 &lt;code&gt;10.10.10.10:8080&lt;/code&gt; 上运行，但是HTTP客户端应该只看到 &lt;code&gt;example.org&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d86630bcd0cddf0f984409e5331f328e036afc7" translate="yes" xml:space="preserve">
          <source>If your application needs access to a &quot;Low Level&quot; &lt;code&gt;RestClient&lt;/code&gt;, you can get it by calling &lt;code&gt;client.getLowLevelClient()&lt;/code&gt; on the auto-configured &lt;code&gt;RestHighLevelClient&lt;/code&gt;.</source>
          <target state="translated">如果您的应用程序需要访问&amp;ldquo;低级&amp;rdquo; &lt;code&gt;RestClient&lt;/code&gt; ，则可以通过在自动配置的 &lt;code&gt;RestHighLevelClient&lt;/code&gt; 上调用 &lt;code&gt;client.getLowLevelClient()&lt;/code&gt; 来获取它。</target>
        </trans-unit>
        <trans-unit id="1746807825dc1070de34bdc5112d2d7413f860d6" translate="yes" xml:space="preserve">
          <source>If your application runs in Cloud Foundry or Heroku, the &lt;code&gt;server.forward-headers-strategy&lt;/code&gt; property defaults to &lt;code&gt;NATIVE&lt;/code&gt;. In all other instances, it defaults to &lt;code&gt;NONE&lt;/code&gt;.</source>
          <target state="translated">如果您的应用程序在Cloud Foundry或Heroku中运行，则 &lt;code&gt;server.forward-headers-strategy&lt;/code&gt; 属性默认为 &lt;code&gt;NATIVE&lt;/code&gt; 。在所有其他情况下，它默认为 &lt;code&gt;NONE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ec670aec0af8919cc0b192397b66f0365eed8d79" translate="yes" xml:space="preserve">
          <source>If your application runs in a servlet container or application server, then JNDI properties (in &lt;code&gt;java:comp/env&lt;/code&gt;) or servlet context initialization parameters can be used instead of, or as well as, environment variables or system properties.</source>
          <target state="translated">如果您的应用程序在servlet容器或应用程序服务器中运行，则可以使用JNDI属性（在 &lt;code&gt;java:comp/env&lt;/code&gt; 中）或servlet上下文初始化参数来代替环境变量或系统属性，或者与之一起使用。</target>
        </trans-unit>
        <trans-unit id="70469c98ce5e2abc281bbffd2a4b5ec2dac29016" translate="yes" xml:space="preserve">
          <source>If your application uses component scanning (for example, if you use &lt;code&gt;@SpringBootApplication&lt;/code&gt; or &lt;code&gt;@ComponentScan&lt;/code&gt;), you may find top-level configuration classes that you created only for specific tests accidentally get picked up everywhere.</source>
          <target state="translated">如果您的应用程序使用组件扫描（例如，如果使用 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 或 &lt;code&gt;@ComponentScan&lt;/code&gt; ），则可能会偶然发现到处都是为特定测试创建的顶级配置类。</target>
        </trans-unit>
        <trans-unit id="865a126e78fbff000e0d20fd9f6b4dd949498f1c" translate="yes" xml:space="preserve">
          <source>If your archive already includes libraries, you can use &lt;code&gt;Libraries.NONE&lt;/code&gt;.</source>
          <target state="translated">如果您的存档中已经包含库，则可以使用 &lt;code&gt;Libraries.NONE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1ec2b86f4112aef0e47922fff566988cf05e86fe" translate="yes" xml:space="preserve">
          <source>If your classpath contains the necessary bits to start a web server, Spring Boot will automatically start it. To disable this behavior configure the &lt;code&gt;WebApplicationType&lt;/code&gt; in your &lt;code&gt;application.properties&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">如果您的类路径包含启动Web服务器所需的位，则Spring Boot将自动启动它。要禁用此行为，请在 &lt;code&gt;application.properties&lt;/code&gt; 中配置 &lt;code&gt;WebApplicationType&lt;/code&gt; ，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="98c7f84455c022b73b44ae40d92286eba6487a7c" translate="yes" xml:space="preserve">
          <source>If your metrics depend on other beans, it is recommended that you use a &lt;code&gt;MeterBinder&lt;/code&gt; to register them, as shown in the following example:</source>
          <target state="translated">如果您的度量标准依赖于其他bean，则建议您使用 &lt;code&gt;MeterBinder&lt;/code&gt; 来注册它们，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="cb45bdc97312e651611a5412252a4a3b3b48653b" translate="yes" xml:space="preserve">
          <source>If your platform provides a standard &lt;code&gt;MBeanServer&lt;/code&gt;, Spring Boot will use that and default to the VM &lt;code&gt;MBeanServer&lt;/code&gt; if necessary. If all that fails, a new &lt;code&gt;MBeanServer&lt;/code&gt; will be created.</source>
          <target state="translated">如果您的平台提供了标准的 &lt;code&gt;MBeanServer&lt;/code&gt; ，则Spring Boot将使用该标准，并在必要时默认使用VM &lt;code&gt;MBeanServer&lt;/code&gt; 。如果所有操作均失败，则将创建一个新的 &lt;code&gt;MBeanServer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9bbe8dde1e7457579662ad88b47b7ee4ae46cad3" translate="yes" xml:space="preserve">
          <source>If your property is of type &lt;code&gt;Map&lt;/code&gt;, you can provide hints for both the keys and the values (but not for the map itself). The special &lt;code&gt;.keys&lt;/code&gt; and &lt;code&gt;.values&lt;/code&gt; suffixes must refer to the keys and the values, respectively.</source>
          <target state="translated">如果您的属性属于 &lt;code&gt;Map&lt;/code&gt; 类型，则可以提供键和值的提示（但不提供地图本身的提示）。特殊的 &lt;code&gt;.keys&lt;/code&gt; 和 &lt;code&gt;.values&lt;/code&gt; 后缀必须分别引用键和值。</target>
        </trans-unit>
        <trans-unit id="e61aa2679c91cffdedf8926c915f14c1abf10338" translate="yes" xml:space="preserve">
          <source>If your starter provides configuration keys, use a unique namespace for them. In particular, do not include your keys in the namespaces that Spring Boot uses (such as &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;management&lt;/code&gt;, &lt;code&gt;spring&lt;/code&gt;, and so on). If you use the same namespace, we may modify these namespaces in the future in ways that break your modules. As a rule of thumb, prefix all your keys with a namespace that you own (e.g. &lt;code&gt;acme&lt;/code&gt;).</source>
          <target state="translated">如果您的入门者提供了配置密钥，请为其使用唯一的名称空间。特别是，不要将密钥包含在Spring Boot使用的名称空间中（例如 &lt;code&gt;server&lt;/code&gt; ， &lt;code&gt;management&lt;/code&gt; ， &lt;code&gt;spring&lt;/code&gt; 等等）。如果您使用相同的名称空间，我们将来可能会以破坏您的模块的方式修改这些名称空间。根据经验，所有键都以您拥有的名称空间（例如 &lt;code&gt;acme&lt;/code&gt; ）为前缀。</target>
        </trans-unit>
        <trans-unit id="346ec77fff651d53a6cb0a535d2f51e3bba465b5" translate="yes" xml:space="preserve">
          <source>If your terminal supports ANSI, color output is used to aid readability. You can set &lt;code&gt;spring.output.ansi.enabled&lt;/code&gt; to a &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/ansi/AnsiOutput.Enabled.html&quot;&gt;supported value&lt;/a&gt; to override the auto-detection.</source>
          <target state="translated">如果您的终端支持ANSI，则使用彩色输出来提高可读性。您可以将 &lt;code&gt;spring.output.ansi.enabled&lt;/code&gt; 设置为&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/ansi/AnsiOutput.Enabled.html&quot;&gt;支持的值，&lt;/a&gt;以覆盖自动检测。</target>
        </trans-unit>
        <trans-unit id="6f018ceb7c14bbbd9af1206d321b709efaba54ed" translate="yes" xml:space="preserve">
          <source>If your test is &lt;code&gt;@Transactional&lt;/code&gt;, it rolls back the transaction at the end of each test method by default. However, as using this arrangement with either &lt;code&gt;RANDOM_PORT&lt;/code&gt; or &lt;code&gt;DEFINED_PORT&lt;/code&gt; implicitly provides a real servlet environment, the HTTP client and server run in separate threads and, thus, in separate transactions. Any transaction initiated on the server does not roll back in this case.</source>
          <target state="translated">如果您的测试是 &lt;code&gt;@Transactional&lt;/code&gt; ，则默认情况下它将在每个测试方法的末尾回滚事务。但是，由于将这种安排与 &lt;code&gt;RANDOM_PORT&lt;/code&gt; 或 &lt;code&gt;DEFINED_PORT&lt;/code&gt; 一起使用隐式提供了一个真实的Servlet环境，因此HTTP客户端和服务器在单独的线程中运行，因此在单独的事务中运行。在这种情况下，服务器上启动的任何事务都不会回滚。</target>
        </trans-unit>
        <trans-unit id="c79c58977bdb50bec62645df49c250a02d1483a7" translate="yes" xml:space="preserve">
          <source>If your test uses one of Spring Boot&amp;rsquo;s test annotations (such as &lt;code&gt;@SpringBootTest&lt;/code&gt;), this feature is automatically enabled. To use this feature with a different arrangement, a listener must be explicitly added, as shown in the following example:</source>
          <target state="translated">如果您的测试使用Spring Boot的测试注释之一（例如 &lt;code&gt;@SpringBootTest&lt;/code&gt; ），则此功能会自动启用。要以其他方式使用此功能，必须显式添加一个侦听器，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="878f816d7453cc69f291f0327564f469cfae9c5d" translate="yes" xml:space="preserve">
          <source>If, for whatever reason, you do configure the connection URL for an embedded database, take care to ensure that the database&amp;rsquo;s automatic shutdown is disabled. If you use H2, you should use &lt;code&gt;DB_CLOSE_ON_EXIT=FALSE&lt;/code&gt; to do so. If you use HSQLDB, you should ensure that &lt;code&gt;shutdown=true&lt;/code&gt; is not used. Disabling the database&amp;rsquo;s automatic shutdown lets Spring Boot control when the database is closed, thereby ensuring that it happens once access to the database is no longer needed.</source>
          <target state="translated">如果出于某种原因确实为嵌入式数据库配置了连接URL，请确保确保禁用了数据库的自动关闭功能。如果使用H2，则应使用 &lt;code&gt;DB_CLOSE_ON_EXIT=FALSE&lt;/code&gt; 进行操作。如果使用HSQLDB，则应确保不使用 &lt;code&gt;shutdown=true&lt;/code&gt; 。通过禁用数据库的自动关闭功能，Spring Boot可以控制何时关闭数据库，从而确保一旦不再需要访问数据库时就可以执行该操作。</target>
        </trans-unit>
        <trans-unit id="f3a9dd0511c000f299f6fad4b4428f32d56ac2b0" translate="yes" xml:space="preserve">
          <source>Immediate child directories of the &lt;code&gt;/config&lt;/code&gt; subdirectory</source>
          <target state="translated">直属子目录 &lt;code&gt;/config&lt;/code&gt; 子目录</target>
        </trans-unit>
        <trans-unit id="8ac838c301ab843744fc94b8e08c9e38cb1b5b62" translate="yes" xml:space="preserve">
          <source>Import additional config data.</source>
          <target state="translated">导入额外的配置数据。</target>
        </trans-unit>
        <trans-unit id="7a0f6e4a24d5d58a972483713801f2a5d3139039" translate="yes" xml:space="preserve">
          <source>Imported auto-configuration</source>
          <target state="translated">进口的自动配置</target>
        </trans-unit>
        <trans-unit id="b1a100a5d1557214654a2b6875883ebc5364abc2" translate="yes" xml:space="preserve">
          <source>In Maven, the executable jar must be the main artifact and you can add a classified jar for the library, as follows:</source>
          <target state="translated">在Maven中,可执行的jar必须是主工件,你可以为库添加一个分类jar,如下图。</target>
        </trans-unit>
        <trans-unit id="e9fba501466c169b2aca4f0712aaaa9e73777bca" translate="yes" xml:space="preserve">
          <source>In Spring Boot, you can also set the active profile in &lt;code&gt;application.properties&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">在Spring Boot中，您还可以在 &lt;code&gt;application.properties&lt;/code&gt; 中设置活动配置文件，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="0b9fddced2b2f4ee7f67c2247bcd02aaec19f8bc" translate="yes" xml:space="preserve">
          <source>In a JPA-based app, you can choose to let Hibernate create the schema or use &lt;code&gt;schema.sql&lt;/code&gt;, but you cannot do both. Make sure to disable &lt;code&gt;spring.jpa.hibernate.ddl-auto&lt;/code&gt; if you use &lt;code&gt;schema.sql&lt;/code&gt;.</source>
          <target state="translated">在基于JPA的应用程序中，您可以选择让Hibernate创建架构或使用 &lt;code&gt;schema.sql&lt;/code&gt; ，但是您不能两者都做。如果使用 &lt;code&gt;schema.sql&lt;/code&gt; ,请确保禁用 &lt;code&gt;spring.jpa.hibernate.ddl-auto&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="40944fdf331aa8639bbb2a9577ab15167cd913a8" translate="yes" xml:space="preserve">
          <source>In a nutshell, to add caching to an operation of your service add the relevant annotation to its method, as shown in the following example:</source>
          <target state="translated">简而言之,要在服务的一个操作中添加缓存,就要在它的方法中添加相关的注解,如下例所示。</target>
        </trans-unit>
        <trans-unit id="883c513ef285a1b02c9bb61eb8a71fc85e3a4d2b" translate="yes" xml:space="preserve">
          <source>In a reactive application, The &lt;code&gt;ReactiveHealthContributorRegistry&lt;/code&gt; should be used to register and unregister health indicators at runtime. If you need to register a regular &lt;code&gt;HealthContributor&lt;/code&gt;, you should wrap it using &lt;code&gt;ReactiveHealthContributor#adapt&lt;/code&gt;.</source>
          <target state="translated">在反应式应用程序中，应使用 &lt;code&gt;ReactiveHealthContributorRegistry&lt;/code&gt; 在运行时注册和注销健康指标。如果需要注册常规 &lt;code&gt;HealthContributor&lt;/code&gt; ，则应使用 &lt;code&gt;ReactiveHealthContributor#adapt&lt;/code&gt; 对其进行包装。</target>
        </trans-unit>
        <trans-unit id="d0d67df72dc8d9f567ea765a99bf2e3e50a00631" translate="yes" xml:space="preserve">
          <source>In a servlet stack application, i.e. with the &lt;code&gt;spring-boot-starter-web&lt;/code&gt;, there are two ways to add &lt;code&gt;Servlet&lt;/code&gt;, &lt;code&gt;Filter&lt;/code&gt;, &lt;code&gt;ServletContextListener&lt;/code&gt;, and the other listeners supported by the Servlet API to your application:</source>
          <target state="translated">在servlet堆栈应用程序中，即使用 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; ，有两种方法可以将 &lt;code&gt;Servlet&lt;/code&gt; ， &lt;code&gt;Filter&lt;/code&gt; ， &lt;code&gt;ServletContextListener&lt;/code&gt; 和Servlet API支持的其他侦听器添加到您的应用程序中：</target>
        </trans-unit>
        <trans-unit id="a34a5344406a3679d938a0fd7988536cc598d61d" translate="yes" xml:space="preserve">
          <source>In a stand-alone web application, the default servlet from the container is also enabled and acts as a fallback, serving content from the root of the &lt;code&gt;ServletContext&lt;/code&gt; if Spring decides not to handle it. Most of the time, this does not happen (unless you modify the default MVC configuration), because Spring can always handle requests through the &lt;code&gt;DispatcherServlet&lt;/code&gt;.</source>
          <target state="translated">在独立的Web应用程序中，还启用了容器中的默认Servlet，并将其用作后备，如果Spring决定不处理，则从 &lt;code&gt;ServletContext&lt;/code&gt; 的根目录提供内容。在大多数情况下，这不会发生（除非您修改默认的MVC配置），因为Spring始终可以通过 &lt;code&gt;DispatcherServlet&lt;/code&gt; 处理请求。</target>
        </trans-unit>
        <trans-unit id="925527b943b8878a627943c79b326dd616e5e63f" translate="yes" xml:space="preserve">
          <source>In a standalone application, the Actuator HTTP port defaults to the same as the main HTTP port. To make the application listen on a different port, set the external property: &lt;code&gt;management.server.port&lt;/code&gt;. To listen on a completely different network address (such as when you have an internal network for management and an external one for user applications), you can also set &lt;code&gt;management.server.address&lt;/code&gt; to a valid IP address to which the server is able to bind.</source>
          <target state="translated">在独立应用程序中，Actuator HTTP端口默认与主HTTP端口相同。要使应用程序在其他端口上侦听，请设置外部属性： &lt;code&gt;management.server.port&lt;/code&gt; 。要侦听完全不同的网络地址（例如，当您拥有用于管理的内部网络和用于用户应用程序的外部网络）时，还可以将 &lt;code&gt;management.server.address&lt;/code&gt; 设置为服务器能够绑定到的有效IP地址。 。</target>
        </trans-unit>
        <trans-unit id="7fe94f5cfb668e55ca180d36b5d02a0472f9e586" translate="yes" xml:space="preserve">
          <source>In a standalone application, the main HTTP port defaults to &lt;code&gt;8080&lt;/code&gt; but can be set with &lt;code&gt;server.port&lt;/code&gt; (for example, in &lt;code&gt;application.properties&lt;/code&gt; or as a System property). Thanks to relaxed binding of &lt;code&gt;Environment&lt;/code&gt; values, you can also use &lt;code&gt;SERVER_PORT&lt;/code&gt; (for example, as an OS environment variable).</source>
          <target state="translated">在独立应用程序中，主HTTP端口默认为 &lt;code&gt;8080&lt;/code&gt; ,但可以使用 &lt;code&gt;server.port&lt;/code&gt; 进行设置（例如，在 &lt;code&gt;application.properties&lt;/code&gt; 中或作为System属性）。由于放松了对 &lt;code&gt;Environment&lt;/code&gt; 值的绑定，您还可以使用 &lt;code&gt;SERVER_PORT&lt;/code&gt; （例如，作为OS环境变量）。</target>
        </trans-unit>
        <trans-unit id="d094a910b232935f8b548331327aa42e819b27de" translate="yes" xml:space="preserve">
          <source>In addition Spring Boot provides:</source>
          <target state="translated">此外Spring Boot还提供:</target>
        </trans-unit>
        <trans-unit id="e55c1a6ec5bcd656e64bf3fd398503ba790572ce" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;MeterFilter&lt;/code&gt; beans, it&amp;rsquo;s also possible to apply a limited set of customization on a per-meter basis using properties. Per-meter customizations apply to any all meter IDs that start with the given name. For example, the following will disable any meters that have an ID starting with &lt;code&gt;example.remote&lt;/code&gt;</source>
          <target state="translated">除了 &lt;code&gt;MeterFilter&lt;/code&gt; bean之外，还可以使用属性在每米基础上应用一组有限的自定义设置。每表定制适用于以给定名称开头的所有所有表ID。例如，以下将禁用所有具有以 &lt;code&gt;example.remote&lt;/code&gt; 开头的ID的仪表</target>
        </trans-unit>
        <trans-unit id="6a3114b2f6da78a7cb821387b82467f1535b6370" translate="yes" xml:space="preserve">
          <source>In addition to Spring Boot&amp;rsquo;s predefined &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Status.java&quot;&gt;&lt;code&gt;Status&lt;/code&gt;&lt;/a&gt; types, it is also possible for &lt;code&gt;Health&lt;/code&gt; to return a custom &lt;code&gt;Status&lt;/code&gt; that represents a new system state. In such cases, a custom implementation of the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/StatusAggregator.java&quot;&gt;&lt;code&gt;StatusAggregator&lt;/code&gt;&lt;/a&gt; interface also needs to be provided, or the default implementation has to be configured by using the &lt;code&gt;management.endpoint.health.status.order&lt;/code&gt; configuration property.</source>
          <target state="translated">除了Spring Boot的预定义&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Status.java&quot;&gt; &lt;code&gt;Status&lt;/code&gt; &lt;/a&gt;类型外， &lt;code&gt;Health&lt;/code&gt; 还可以返回代表新系统状态的自定义 &lt;code&gt;Status&lt;/code&gt; 。在这种情况下，还需要提供&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/StatusAggregator.java&quot;&gt; &lt;code&gt;StatusAggregator&lt;/code&gt; &lt;/a&gt;接口的自定义实现，或者必须使用 &lt;code&gt;management.endpoint.health.status.order&lt;/code&gt; 配置属性来配置默认实现。</target>
        </trans-unit>
        <trans-unit id="fa82e5cfd7fc9ff12c023355b5887b00196e37d6" translate="yes" xml:space="preserve">
          <source>In addition to durations, Spring Boot can also work with &lt;code&gt;java.time.Period&lt;/code&gt; type. The following formats can be used in application properties:</source>
          <target state="translated">除了持续时间以外，Spring Boot还可以使用 &lt;code&gt;java.time.Period&lt;/code&gt; 类型。可以在应用程序属性中使用以下格式：</target>
        </trans-unit>
        <trans-unit id="762de70fbc64305bcc8bf1c2b03561e3eb575d4d" translate="yes" xml:space="preserve">
          <source>In addition to installing the artifacts identified by the coordinates you supply, all of the artifacts' dependencies are also installed.</source>
          <target state="translated">除了安装你提供的坐标所标识的工件外,还要安装工件的所有依赖关系。</target>
        </trans-unit>
        <trans-unit id="e533ef2d244e727007a10093c46b8440efb1b095" translate="yes" xml:space="preserve">
          <source>In addition to its default XML configuration format, Log4j 2 also supports YAML and JSON configuration files. To configure Log4j 2 to use an alternative configuration file format, add the appropriate dependencies to the classpath and name your configuration files to match your chosen file format, as shown in the following example:</source>
          <target state="translated">除了默认的 XML 配置格式外,Log4j 2 还支持 YAML 和 JSON 配置文件。要配置 Log4j 2 使用其他的配置文件格式,请在 classpath 中添加相应的依赖关系,并将配置文件命名为与所选文件格式相匹配的文件,如下例所示。</target>
        </trans-unit>
        <trans-unit id="1fc37d2a5c958d168ab0fd2d0f26ea3e4bef8657" translate="yes" xml:space="preserve">
          <source>In addition to running Spring Boot applications by using &lt;code&gt;java -jar&lt;/code&gt;, it is also possible to make fully executable applications for Unix systems. A fully executable jar can be executed like any other executable binary or it can be &lt;a href=&quot;#deployment-service&quot;&gt;registered with &lt;code&gt;init.d&lt;/code&gt; or &lt;code&gt;systemd&lt;/code&gt;&lt;/a&gt;. This helps when installing and managing Spring Boot applications in common production environments.</source>
          <target state="translated">除了使用 &lt;code&gt;java -jar&lt;/code&gt; 运行Spring Boot应用程序之外，还可以为Unix系统制作完全可执行的应用程序。完全可执行的jar可以像其他任何可执行二进制文件一样执行，也可以&lt;a href=&quot;#deployment-service&quot;&gt;向 &lt;code&gt;init.d&lt;/code&gt; 或 &lt;code&gt;systemd&lt;/code&gt; &lt;/a&gt;注册。这在常见的生产环境中安装和管理Spring Boot应用程序时会有所帮助。</target>
        </trans-unit>
        <trans-unit id="45763bf54b4ba4b6a59a86274093bcecf3190dfc" translate="yes" xml:space="preserve">
          <source>In addition to the &amp;ldquo;standard&amp;rdquo; static resource locations listed earlier, a special case is made for &lt;a href=&quot;https://www.webjars.org/&quot;&gt;Webjars content&lt;/a&gt;. Any resources with a path in &lt;code&gt;/webjars/**&lt;/code&gt; are served from jar files if they are packaged in the Webjars format.</source>
          <target state="translated">除了前面列出的&amp;ldquo;标准&amp;rdquo;静态资源位置之外，&lt;a href=&quot;https://www.webjars.org/&quot;&gt;Webjars内容也&lt;/a&gt;有特殊情况。如果jar文件以Webjars格式打包，则从jar文件中提供路径为 &lt;code&gt;/webjars/**&lt;/code&gt; 的所有资源。</target>
        </trans-unit>
        <trans-unit id="ee8c7043a974eda6126c3144c8456226a8e2308f" translate="yes" xml:space="preserve">
          <source>In addition to the &amp;ldquo;standard&amp;rdquo; static resource locations mentioned earlier, a special case is made for &lt;a href=&quot;https://www.webjars.org/&quot;&gt;Webjars content&lt;/a&gt;. Any resources with a path in &lt;code&gt;/webjars/**&lt;/code&gt; are served from jar files if they are packaged in the Webjars format.</source>
          <target state="translated">除了前面提到的&amp;ldquo;标准&amp;rdquo;静态资源位置，&lt;a href=&quot;https://www.webjars.org/&quot;&gt;Webjars内容也&lt;/a&gt;有特殊情况。如果jar文件以Webjars格式打包，则从jar文件中提供路径为 &lt;code&gt;/webjars/**&lt;/code&gt; 的所有资源。</target>
        </trans-unit>
        <trans-unit id="207a1f43ecea4799fcb2f649398988cd75aaa988" translate="yes" xml:space="preserve">
          <source>In addition to the application starters, the following starters can be used to add &lt;em&gt;&lt;a href=&quot;production-ready-features#production-ready&quot;&gt;production ready&lt;/a&gt;&lt;/em&gt; features:</source>
          <target state="translated">除了应用程序启动程序，以下启动程序可用于添加&lt;em&gt;&lt;a href=&quot;production-ready-features#production-ready&quot;&gt;生产就绪&lt;/a&gt;&lt;/em&gt;功能：</target>
        </trans-unit>
        <trans-unit id="105502b14eafb27ea17ac83a8c94b50156c69152" translate="yes" xml:space="preserve">
          <source>In addition to the usual Spring Framework events, such as &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/context/event/ContextRefreshedEvent.html&quot;&gt;&lt;code&gt;ContextRefreshedEvent&lt;/code&gt;&lt;/a&gt;, a &lt;code&gt;SpringApplication&lt;/code&gt; sends some additional application events.</source>
          <target state="translated">除了通常的Spring框架的事件，如&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/context/event/ContextRefreshedEvent.html&quot;&gt; &lt;code&gt;ContextRefreshedEvent&lt;/code&gt; &lt;/a&gt;，一个 &lt;code&gt;SpringApplication&lt;/code&gt; 发送一些额外的应用程序事件。</target>
        </trans-unit>
        <trans-unit id="93c30705c25a19f8a5780c716b0ccc0eba314f86" translate="yes" xml:space="preserve">
          <source>In addition, a file named &lt;code&gt;import.sql&lt;/code&gt; in the root of the classpath is executed on startup if Hibernate creates the schema from scratch (that is, if the &lt;code&gt;ddl-auto&lt;/code&gt; property is set to &lt;code&gt;create&lt;/code&gt; or &lt;code&gt;create-drop&lt;/code&gt;). This can be useful for demos and for testing if you are careful but is probably not something you want to be on the classpath in production. It is a Hibernate feature (and has nothing to do with Spring).</source>
          <target state="translated">另外，如果Hibernate从头开始创建架构（即 &lt;code&gt;ddl-auto&lt;/code&gt; 属性设置为 &lt;code&gt;create&lt;/code&gt; 或 &lt;code&gt;create-drop&lt;/code&gt; ），则在启动时会在类路径的根目录中执行一个名为 &lt;code&gt;import.sql&lt;/code&gt; 的文件。如果您小心的话，这对于演示和测试很有用，但是可能不想在生产中的类路径上使用。这是一个Hibernate功能（与Spring无关）。</target>
        </trans-unit>
        <trans-unit id="58ec095a1f9b28b7aebef03c9d013c27316ac4be" translate="yes" xml:space="preserve">
          <source>In addition, a legacy &lt;code&gt;base.xml&lt;/code&gt; file is provided for compatibility with earlier versions of Spring Boot.</source>
          <target state="translated">另外，还提供了旧版 &lt;code&gt;base.xml&lt;/code&gt; 文件，以与早期版本的Spring Boot兼容。</target>
        </trans-unit>
        <trans-unit id="55864e5964bb8e908e440d3fb89a91ca4b179b20" translate="yes" xml:space="preserve">
          <source>In addition, all properties in &lt;code&gt;spring.jpa.properties.*&lt;/code&gt; are passed through as normal JPA properties (with the prefix stripped) when the local &lt;code&gt;EntityManagerFactory&lt;/code&gt; is created.</source>
          <target state="translated">另外，创建本地 &lt;code&gt;EntityManagerFactory&lt;/code&gt; 时， &lt;code&gt;spring.jpa.properties.*&lt;/code&gt; 中的所有属性均作为普通JPA属性（前缀被去除）传递。</target>
        </trans-unit>
        <trans-unit id="a29cab1eccbeeafaf391ac91135afc680e3c1bbe" translate="yes" xml:space="preserve">
          <source>In addition, beans may implement the &lt;code&gt;org.springframework.boot.ExitCodeGenerator&lt;/code&gt; interface if they wish to return a specific exit code when &lt;code&gt;SpringApplication.exit()&lt;/code&gt; is called. This exit code can then be passed to &lt;code&gt;System.exit()&lt;/code&gt; to return it as a status code, as shown in the following example:</source>
          <target state="translated">另外，如果bean希望在 &lt;code&gt;SpringApplication.exit()&lt;/code&gt; 时返回特定的退出代码，则可以实现 &lt;code&gt;org.springframework.boot.ExitCodeGenerator&lt;/code&gt; 接口。然后可以将此退出代码传递给 &lt;code&gt;System.exit()&lt;/code&gt; ,以将其作为状态代码返回，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="bf2467ba9eafcdc92ac53bdf707877e34089b96f" translate="yes" xml:space="preserve">
          <source>In addition, you can also obtain availability states by injecting the &lt;code&gt;ApplicationAvailability&lt;/code&gt; interface into your own beans.</source>
          <target state="translated">另外，您还可以通过将 &lt;code&gt;ApplicationAvailability&lt;/code&gt; 接口注入到您自己的bean中来获取可用性状态。</target>
        </trans-unit>
        <trans-unit id="ceefae5e3cfb3205376256a07b9b427f24c13009" translate="yes" xml:space="preserve">
          <source>In an application using the reactive style, a &lt;code&gt;ReactiveTransactionManager&lt;/code&gt; is not auto-configured. To enable transaction management, the following bean must be defined in your configuration:</source>
          <target state="translated">在使用反应式样式的应用程序中，不会自动配置 &lt;code&gt;ReactiveTransactionManager&lt;/code&gt; 。要启用事务管理，必须在配置中定义以下Bean：</target>
        </trans-unit>
        <trans-unit id="fe620603f3bdba2aa345416b76eca215a7d181c9" translate="yes" xml:space="preserve">
          <source>In cases where opaque tokens are used instead of JWTs, you can configure the following properties to validate tokens via introspection:</source>
          <target state="translated">在使用不透明令牌而不是JWT的情况下,您可以配置以下属性来通过自省验证令牌。</target>
        </trans-unit>
        <trans-unit id="f0b624a7bab69756f3f57989d3b3d96842a1ef0e" translate="yes" xml:space="preserve">
          <source>In fact, both Spring Data JPA and Spring Data Elasticsearch share the same common infrastructure. You could take the JPA example from earlier and, assuming that &lt;code&gt;City&lt;/code&gt; is now an Elasticsearch &lt;code&gt;@Document&lt;/code&gt; class rather than a JPA &lt;code&gt;@Entity&lt;/code&gt;, it works in the same way.</source>
          <target state="translated">实际上，Spring Data JPA和Spring Data Elasticsearch共享相同的通用基础架构。您可以从以前的JPA示例开始，并假设 &lt;code&gt;City&lt;/code&gt; 现在是Elasticsearch &lt;code&gt;@Document&lt;/code&gt; 类而不是JPA &lt;code&gt;@Entity&lt;/code&gt; ，它以相同的方式工作。</target>
        </trans-unit>
        <trans-unit id="bbba997ac7bbf5ab0b575c91ce0525e554a6ac71" translate="yes" xml:space="preserve">
          <source>In fact, both Spring Data JPA and Spring Data MongoDB share the same common infrastructure. You could take the JPA example from earlier and, assuming that &lt;code&gt;City&lt;/code&gt; is now a MongoDB data class rather than a JPA &lt;code&gt;@Entity&lt;/code&gt;, it works in the same way, as shown in the following example:</source>
          <target state="translated">实际上，Spring Data JPA和Spring Data MongoDB共享相同的通用基础架构。您可以从以前的JPA示例开始，并假设 &lt;code&gt;City&lt;/code&gt; 现在是MongoDB数据类，而不是JPA &lt;code&gt;@Entity&lt;/code&gt; ，它以相同的方式工作，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="574c7d0e36ccf217a5be47d84258dd8245ddcda0" translate="yes" xml:space="preserve">
          <source>In fact, both Spring Data JPA and Spring Data Solr share the same common infrastructure. You could take the JPA example from earlier and, assuming that &lt;code&gt;City&lt;/code&gt; is now a &lt;code&gt;@SolrDocument&lt;/code&gt; class rather than a JPA &lt;code&gt;@Entity&lt;/code&gt;, it works in the same way.</source>
          <target state="translated">实际上，Spring Data JPA和Spring Data Solr共享相同的通用基础结构。您可以从以前的JPA示例开始，并假设 &lt;code&gt;City&lt;/code&gt; 现在是 &lt;code&gt;@SolrDocument&lt;/code&gt; 类，而不是JPA &lt;code&gt;@Entity&lt;/code&gt; ，它以相同的方式工作。</target>
        </trans-unit>
        <trans-unit id="f6585260ade06f3a500fec89416b6873b09928b8" translate="yes" xml:space="preserve">
          <source>In general, the &quot;Liveness&quot; state should not be based on external checks, such as &lt;a href=&quot;production-ready-features#production-ready-health&quot;&gt;Health checks&lt;/a&gt;. If it did, a failing external system (a database, a Web API, an external cache) would trigger massive restarts and cascading failures across the platform.</source>
          <target state="translated">通常，&amp;ldquo;活动&amp;rdquo;状态不应基于外部检查（例如&lt;a href=&quot;production-ready-features#production-ready-health&quot;&gt;健康检查）&lt;/a&gt;。如果确实如此，则发生故障的外部系统（数据库，Web API，外部缓存）将触发整个平台的大量重启和级联故障。</target>
        </trans-unit>
        <trans-unit id="30e9bc20800f45146a15dfbdd478d0e2c6e1e834" translate="yes" xml:space="preserve">
          <source>In order to access these properties from the &lt;code&gt;Environment&lt;/code&gt;, they would be flattened as follows:</source>
          <target state="translated">为了从 &lt;code&gt;Environment&lt;/code&gt; 中访问这些属性，它们将按以下方式进行展平：</target>
        </trans-unit>
        <trans-unit id="360b23905cd612f36b2363fded14bed7cdd1be6a" translate="yes" xml:space="preserve">
          <source>In order to achieve reproducible builds and container image caching, Buildpacks can manipulate the application resources metadata (such as the file &quot;last modified&quot; information). You should ensure that your application does not rely on that metadata at runtime. Spring Boot can use that information when serving static resources, but this can be disabled with &lt;code&gt;spring.web.resources.cache.use-last-modified&lt;/code&gt;</source>
          <target state="translated">为了实现可复制的构建和容器图像缓存，Buildpacks可以操纵应用程序资源元数据（例如文件&amp;ldquo;上次修改&amp;rdquo;的信息）。您应确保您的应用程序在运行时不依赖该元数据。当提供静态资源时，Spring Boot可以使用该信息，但是可以通过 &lt;code&gt;spring.web.resources.cache.use-last-modified&lt;/code&gt; 禁用它</target>
        </trans-unit>
        <trans-unit id="a311cb1383108ed96e2fd1b307f9952f83abf388" translate="yes" xml:space="preserve">
          <source>In order to avoid mixing different versions of Kotlin dependencies on the classpath, Spring Boot imports the Kotlin BOM.</source>
          <target state="translated">为了避免在classpath上混合不同版本的Kotlin依赖,Spring Boot导入了Kotlin BOM。</target>
        </trans-unit>
        <trans-unit id="51edf71a20a83c2b0e24a15a77a44288e5ca567c" translate="yes" xml:space="preserve">
          <source>In order to document default values for properties in the class above, you could add the following content to &lt;a href=&quot;#configuration-metadata-additional-metadata&quot;&gt;the manual metadata of the module&lt;/a&gt;:</source>
          <target state="translated">为了记录以上类中属性的默认值，您可以将以下内容添加到&lt;a href=&quot;#configuration-metadata-additional-metadata&quot;&gt;模块的手动元数据中&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="f5f1acfe72853656c6872ca5b655211c762fd37e" translate="yes" xml:space="preserve">
          <source>In order to use jOOQ type-safe queries, you need to generate Java classes from your database schema. You can follow the instructions in the &lt;a href=&quot;https://www.jooq.org/doc/3.14.3/manual-single-page/#jooq-in-7-steps-step3&quot;&gt;jOOQ user manual&lt;/a&gt;. If you use the &lt;code&gt;jooq-codegen-maven&lt;/code&gt; plugin and you also use the &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; &amp;ldquo;parent POM&amp;rdquo;, you can safely omit the plugin&amp;rsquo;s &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; tag. You can also use Spring Boot-defined version variables (such as &lt;code&gt;h2.version&lt;/code&gt;) to declare the plugin&amp;rsquo;s database dependency. The following listing shows an example:</source>
          <target state="translated">为了使用jOOQ类型安全查询，您需要从数据库架构中生成Java类。您可以按照&lt;a href=&quot;https://www.jooq.org/doc/3.14.3/manual-single-page/#jooq-in-7-steps-step3&quot;&gt;jOOQ用户手册中&lt;/a&gt;的说明进行操作。如果您使用 &lt;code&gt;jooq-codegen-maven&lt;/code&gt; 插件，并且还使用 &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; &amp;ldquo;父POM&amp;rdquo;，则可以安全地忽略该插件的 &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; 标签。您还可以使用Spring Boot定义的版本变量（例如 &lt;code&gt;h2.version&lt;/code&gt; ）来声明插件的数据库依赖关系。以下清单显示了一个示例：</target>
        </trans-unit>
        <trans-unit id="b8b2964008f51eb830ea618af6b314ee4efe08a7" translate="yes" xml:space="preserve">
          <source>In other words, the two configurations in the following example use the Google provider:</source>
          <target state="translated">换句话说,下面例子中的两个配置使用的是Google提供商。</target>
        </trans-unit>
        <trans-unit id="75e501471c4544658981415ddccf1bd54aad16d8" translate="yes" xml:space="preserve">
          <source>In particular, &lt;code&gt;JooqExceptionTranslator&lt;/code&gt; and &lt;code&gt;SpringTransactionProvider&lt;/code&gt; can be reused to provide similar features to what the auto-configuration does with a single &lt;code&gt;DataSource&lt;/code&gt;.</source>
          <target state="translated">特别是，可以重用 &lt;code&gt;JooqExceptionTranslator&lt;/code&gt; 和 &lt;code&gt;SpringTransactionProvider&lt;/code&gt; 以提供与自动配置使用单个 &lt;code&gt;DataSource&lt;/code&gt; 相似的功能。</target>
        </trans-unit>
        <trans-unit id="aca084254980b839f856ca4ee7b0c5f23df2817e" translate="yes" xml:space="preserve">
          <source>In particular, an &lt;code&gt;Executor&lt;/code&gt; bean is not associated with the scheduler as Quartz offers a way to configure the scheduler via &lt;code&gt;spring.quartz.properties&lt;/code&gt;. If you need to customize the task executor, consider implementing &lt;code&gt;SchedulerFactoryBeanCustomizer&lt;/code&gt;.</source>
          <target state="translated">特别是， &lt;code&gt;Executor&lt;/code&gt; bean没有与调度程序相关联，因为Quartz提供了一种通过 &lt;code&gt;spring.quartz.properties&lt;/code&gt; 配置调度程序的方法。如果您需要自定义任务执行器，请考虑实现 &lt;code&gt;SchedulerFactoryBeanCustomizer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed4db2ede03a1a8e2396c2d89b50e7964e41a2fb" translate="yes" xml:space="preserve">
          <source>In particular, certain default timeout values are infinite, and you may want to change that to avoid having a thread blocked by an unresponsive mail server, as shown in the following example:</source>
          <target state="translated">特别是,某些默认的超时值是无限的,你可能想改变它,以避免线程被无响应的邮件服务器阻塞,如下例所示。</target>
        </trans-unit>
        <trans-unit id="63c5e14beb6cbb637f794bf409a08b7b87c45448" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;META-INF/spring.factories&lt;/code&gt; file, you can activate the listener(s) that writes a PID file, as shown in the following example:</source>
          <target state="translated">在 &lt;code&gt;META-INF/spring.factories&lt;/code&gt; 文件中，您可以激活写入PID文件的侦听器，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="cbd89352df8b31aa692276a55931b27373848d2e" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;spring-boot&lt;/code&gt; module, you can find two classes to create files that are often useful for process monitoring:</source>
          <target state="translated">在 &lt;code&gt;spring-boot&lt;/code&gt; 模块中，您可以找到两个类来创建通常对进程监视有用的文件：</target>
        </trans-unit>
        <trans-unit id="d977626647bca64754d50e68d6416b1dac5ac302" translate="yes" xml:space="preserve">
          <source>In the absence of an &lt;code&gt;Executor&lt;/code&gt; bean in the context, Spring Boot auto-configures a &lt;code&gt;ThreadPoolTaskExecutor&lt;/code&gt; with sensible defaults that can be automatically associated to asynchronous task execution (&lt;code&gt;@EnableAsync&lt;/code&gt;) and Spring MVC asynchronous request processing.</source>
          <target state="translated">在上下文中没有 &lt;code&gt;Executor&lt;/code&gt; bean的情况下，Spring Boot会使用合理的默认值自动配置 &lt;code&gt;ThreadPoolTaskExecutor&lt;/code&gt; ，这些默认值可以自动与异步任务执行（ &lt;code&gt;@EnableAsync&lt;/code&gt; ）和Spring MVC异步请求处理相关联。</target>
        </trans-unit>
        <trans-unit id="b19b619ab34acbdfa4243d52e42e77cc24584333" translate="yes" xml:space="preserve">
          <source>In the case of &lt;code&gt;Filters&lt;/code&gt; and &lt;code&gt;Servlets&lt;/code&gt;, you can also add mappings and init parameters by adding a &lt;code&gt;FilterRegistrationBean&lt;/code&gt; or a &lt;code&gt;ServletRegistrationBean&lt;/code&gt; instead of or in addition to the underlying component.</source>
          <target state="translated">对于 &lt;code&gt;Filters&lt;/code&gt; 和 &lt;code&gt;Servlets&lt;/code&gt; ，还可以通过添加 &lt;code&gt;FilterRegistrationBean&lt;/code&gt; 或 &lt;code&gt;ServletRegistrationBean&lt;/code&gt; 来代替基础组件或在基础组件之外添加映射和init参数。</target>
        </trans-unit>
        <trans-unit id="484cd257874be9a816eebf2962abb99ee3e3bf4e" translate="yes" xml:space="preserve">
          <source>In the preceding example, an auto-configured &lt;code&gt;ConcurrentMapCacheManager&lt;/code&gt; is expected. If that is not the case (either you provided your own config or a different cache provider was auto-configured), the customizer is not invoked at all. You can have as many customizers as you want, and you can also order them by using &lt;code&gt;@Order&lt;/code&gt; or &lt;code&gt;Ordered&lt;/code&gt;.</source>
          <target state="translated">在前面的示例中，需要一个自动配置的 &lt;code&gt;ConcurrentMapCacheManager&lt;/code&gt; 。如果不是这种情况（您提供了自己的配置，或者自动配置了其他缓存提供程序），则根本不会调用定制程序。您可以根据需要拥有任意数量的定制程序，也可以使用 &lt;code&gt;@Order&lt;/code&gt; 或 &lt;code&gt;Ordered&lt;/code&gt; 对其进行订购。</target>
        </trans-unit>
        <trans-unit id="bfc9aa09a15fc7b34ed45099e034825aa697daaf" translate="yes" xml:space="preserve">
          <source>In the preceding example, if &lt;code&gt;YourException&lt;/code&gt; is thrown by a controller defined in the same package as &lt;code&gt;AcmeController&lt;/code&gt;, a JSON representation of the &lt;code&gt;CustomErrorType&lt;/code&gt; POJO is used instead of the &lt;code&gt;ErrorAttributes&lt;/code&gt; representation.</source>
          <target state="translated">在前面的例子中，如果 &lt;code&gt;YourException&lt;/code&gt; 通过在相同的封装中所限定的控制器抛出 &lt;code&gt;AcmeController&lt;/code&gt; ，所述的JSON表示 &lt;code&gt;CustomErrorType&lt;/code&gt; POJO被用来代替 &lt;code&gt;ErrorAttributes&lt;/code&gt; 表示。</target>
        </trans-unit>
        <trans-unit id="83cbc85dd4006e698ef6ad4db29bf0bf172eb2d7" translate="yes" xml:space="preserve">
          <source>In the preceding example, if the &lt;code&gt;dev&lt;/code&gt; profile is active, &lt;code&gt;AcmeProperties.list&lt;/code&gt; contains &lt;em&gt;one&lt;/em&gt;&lt;code&gt;MyPojo&lt;/code&gt; entry (with a name of &lt;code&gt;my another name&lt;/code&gt; and a description of &lt;code&gt;null&lt;/code&gt;). For YAML, both comma-separated lists and YAML lists can be used for completely overriding the contents of the list.</source>
          <target state="translated">在前面的示例中，如果 &lt;code&gt;dev&lt;/code&gt; 配置文件处于活动状态，则 &lt;code&gt;AcmeProperties.list&lt;/code&gt; 包含&lt;em&gt;一个&lt;/em&gt; &lt;code&gt;MyPojo&lt;/code&gt; 条目（其名称为 &lt;code&gt;my another name&lt;/code&gt; 为 &lt;code&gt;null&lt;/code&gt; ）。对于YAML，逗号分隔列表和YAML列表均可用于完全覆盖列表的内容。</target>
        </trans-unit>
        <trans-unit id="93d1249acf6e5ba1f10c842dfa34c782d1339091" translate="yes" xml:space="preserve">
          <source>In the preceding example, the &lt;code&gt;myService&lt;/code&gt; bean is going to be created if no bean of type &lt;code&gt;MyService&lt;/code&gt; is already contained in the &lt;code&gt;ApplicationContext&lt;/code&gt;.</source>
          <target state="translated">在前面的示例中，如果 &lt;code&gt;ApplicationContext&lt;/code&gt; 中尚未包含 &lt;code&gt;MyService&lt;/code&gt; 类型的bean，将创建 &lt;code&gt;myService&lt;/code&gt; bean 。</target>
        </trans-unit>
        <trans-unit id="9d6e02a4a83d105c0eb78377934fa7a8996f214c" translate="yes" xml:space="preserve">
          <source>In the preceding example, the default port is 9000. However, if the Spring profile called &amp;lsquo;development&amp;rsquo; is active, then the port is 9001. If &amp;lsquo;production&amp;rsquo; is active, then the port is 0.</source>
          <target state="translated">在前面的示例中，默认端口为9000。但是，如果名为&amp;ldquo; development&amp;rdquo;的Spring概要文件处于活动状态，则该端口为9001。如果&amp;ldquo; production&amp;rdquo;为活动状态，则该端口为0。</target>
        </trans-unit>
        <trans-unit id="530c9efb9834d76bfa47621f0ba8a6b36b7c5bbb" translate="yes" xml:space="preserve">
          <source>In the preceding example, we substitute &lt;code&gt;acloudyspringtime&lt;/code&gt; for whatever value you give &lt;code&gt;cf&lt;/code&gt; as the name of your application.</source>
          <target state="translated">在前面的示例中，我们用 &lt;code&gt;acloudyspringtime&lt;/code&gt; 替换您给 &lt;code&gt;cf&lt;/code&gt; 作为应用程序名称的任何值。</target>
        </trans-unit>
        <trans-unit id="3fc242a0e260a765f224f70fda1242064d022781" translate="yes" xml:space="preserve">
          <source>In the preceding example, you end up with &lt;code&gt;acme.name=test&lt;/code&gt; in the Spring &lt;code&gt;Environment&lt;/code&gt;.</source>
          <target state="translated">在前面的示例中，您最终在Spring &lt;code&gt;Environment&lt;/code&gt; 中获得了 &lt;code&gt;acme.name=test&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48ae8c300c1db5a1d7fe4db3dcf4d7e359287f56" translate="yes" xml:space="preserve">
          <source>In the presence of &lt;code&gt;spring-data-elasticsearch&lt;/code&gt; and the required dependencies for using a &lt;code&gt;WebClient&lt;/code&gt; (typically &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt;), Spring Boot can also auto-configure a &lt;a href=&quot;#boot-features-connecting-to-elasticsearch-reactive-rest&quot;&gt;ReactiveElasticsearchClient&lt;/a&gt; and a &lt;code&gt;ReactiveElasticsearchTemplate&lt;/code&gt; as beans. They are the reactive equivalent of the other REST clients.</source>
          <target state="translated">在存在 &lt;code&gt;spring-data-elasticsearch&lt;/code&gt; 和使用 &lt;code&gt;WebClient&lt;/code&gt; 所需的依赖关系（通常是 &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; ）的情况下，Spring Boot还可以将&lt;a href=&quot;#boot-features-connecting-to-elasticsearch-reactive-rest&quot;&gt;ReactiveElasticsearchClient&lt;/a&gt;和 &lt;code&gt;ReactiveElasticsearchTemplate&lt;/code&gt; 自动配置为bean。它们是其他REST客户端的反应性等效项。</target>
        </trans-unit>
        <trans-unit id="276b792dda5574d3aa764ceed03a74dffacafcd7" translate="yes" xml:space="preserve">
          <source>In this case, the default executable script runs the application as the &lt;code&gt;bootapp&lt;/code&gt; user.</source>
          <target state="translated">在这种情况下，默认的可执行脚本以 &lt;code&gt;bootapp&lt;/code&gt; 用户身份运行该应用程序。</target>
        </trans-unit>
        <trans-unit id="afde51a39424ae9e65b31cbf5e5cc91824cad54f" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;Application&lt;/code&gt; is just like any other Spring Boot application except that &lt;code&gt;@Component&lt;/code&gt;-annotated classes and &lt;code&gt;@ConfigurationProperties&lt;/code&gt;-annotated classes are not detected automatically and the user-defined beans are imported explicitly (see &lt;code&gt;@Import&lt;/code&gt;).</source>
          <target state="translated">在此示例中，除了不会自动检测到 &lt;code&gt;@Component&lt;/code&gt; 注释的类和 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 注释的类，并且已明确导入用户定义的Bean外， &lt;code&gt;Application&lt;/code&gt; 就像其他任何Spring Boot应用程序一样（请参阅 &lt;code&gt;@Import&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="17e2f5090f9ff5fcb182b42de079883483379f93" translate="yes" xml:space="preserve">
          <source>In this section, we look at what it takes to get the &lt;a href=&quot;getting-started#getting-started-first-application&quot;&gt;application that we developed&lt;/a&gt; in the &amp;ldquo;Getting Started&amp;rdquo; section up and running in the Cloud.</source>
          <target state="translated">在本节中，我们研究如何使在&amp;ldquo;入门&amp;rdquo;部分中&lt;a href=&quot;getting-started#getting-started-first-application&quot;&gt;开发&lt;/a&gt;的应用程序启动并在云中运行。</target>
        </trans-unit>
        <trans-unit id="ddb74f18441f84635174c4031db0e157480252c0" translate="yes" xml:space="preserve">
          <source>In this setup, the &lt;code&gt;@ConstructorBinding&lt;/code&gt; annotation is used to indicate that constructor binding should be used. This means that the binder will expect to find a constructor with the parameters that you wish to have bound.</source>
          <target state="translated">在此设置中， &lt;code&gt;@ConstructorBinding&lt;/code&gt; 批注用于指示应使用构造函数绑定。这意味着绑定器将期望找到带有您希望绑定的参数的构造函数。</target>
        </trans-unit>
        <trans-unit id="50f5d97b347cc87750f73ccc10c30c9fce624118" translate="yes" xml:space="preserve">
          <source>In this specific case, the port binding works in a PaaS environment such as Heroku or Cloud Foundry. In those two platforms, the &lt;code&gt;PORT&lt;/code&gt; environment variable is set automatically and Spring can bind to capitalized synonyms for &lt;code&gt;Environment&lt;/code&gt; properties.</source>
          <target state="translated">在这种特定情况下，端口绑定可在PaaS环境（例如Heroku或Cloud Foundry）中工作。在这两个平台中， &lt;code&gt;PORT&lt;/code&gt; 环境变量是自动设置的，并且Spring可以绑定到 &lt;code&gt;Environment&lt;/code&gt; 属性的大写同义词。</target>
        </trans-unit>
        <trans-unit id="88b192b751942e1a850b4ef7d62d70867a636609" translate="yes" xml:space="preserve">
          <source>In yaml files, you can use the yaml list notation. In properties files, you must include the index as part of the property name:</source>
          <target state="translated">在 yaml 文件中,你可以使用 yaml list 符号。在属性文件中,你必须将索引作为属性名的一部分。</target>
        </trans-unit>
        <trans-unit id="c6dbd993b937ce1b38ac2e607169a8dbd67e0524" translate="yes" xml:space="preserve">
          <source>In-memory embedded LDAP generally works well for tests, since it is fast and does not require any developer installation. If, however, you prefer to run tests against a real LDAP server, you should exclude the embedded LDAP auto-configuration, as shown in the following example:</source>
          <target state="translated">内存中的嵌入式LDAP一般都能很好地进行测试,因为它速度快,而且不需要任何开发人员安装。但是,如果你喜欢针对真正的LDAP服务器运行测试,你应该排除嵌入式LDAP自动配置,如下例所示。</target>
        </trans-unit>
        <trans-unit id="d6c7a72f9e7214a9b0541570ee279e341d6645b5" translate="yes" xml:space="preserve">
          <source>In-memory embedded MongoDB generally works well for tests, since it is fast and does not require any developer installation. If, however, you prefer to run tests against a real MongoDB server, you should exclude the embedded MongoDB auto-configuration, as shown in the following example:</source>
          <target state="translated">内存中的嵌入式MongoDB一般都能很好地用于测试,因为它速度快,而且不需要任何开发人员安装。但是,如果你喜欢对着真正的MongoDB服务器运行测试,你应该排除嵌入式MongoDB的自动配置,如下例所示。</target>
        </trans-unit>
        <trans-unit id="79d139a90e468239acac922f41466d52fd051cd3" translate="yes" xml:space="preserve">
          <source>In-memory embedded databases generally work well for tests, since they are fast and do not require any installation. If, however, you prefer to run tests against a real database you can use the &lt;code&gt;@AutoConfigureTestDatabase&lt;/code&gt; annotation, as shown in the following example:</source>
          <target state="translated">内存中嵌入式数据库通常运行良好，不需要任何安装，因此通常可以很好地用于测试。但是，如果您希望对真实数据库运行测试，则可以使用 &lt;code&gt;@AutoConfigureTestDatabase&lt;/code&gt; 批注，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="21ba267080f0b1b6a1304a5568a061ff34f4e0ea" translate="yes" xml:space="preserve">
          <source>Include the &quot;exception&quot; attribute.</source>
          <target state="translated">包括 &quot;异常 &quot;属性。</target>
        </trans-unit>
        <trans-unit id="08c61bd8ccf00fcdd45e944238bc2dc6902e8a62" translate="yes" xml:space="preserve">
          <source>Including multiple &amp;ldquo;slices&amp;rdquo; by using several &lt;code&gt;@&amp;hellip;​Test&lt;/code&gt; annotations in one test is not supported. If you need multiple &amp;ldquo;slices&amp;rdquo;, pick one of the &lt;code&gt;@&amp;hellip;​Test&lt;/code&gt; annotations and include the &lt;code&gt;@AutoConfigure&amp;hellip;​&lt;/code&gt; annotations of the other &amp;ldquo;slices&amp;rdquo; by hand.</source>
          <target state="translated">不支持在一个测试中使用多个 &lt;code&gt;@&amp;hellip;​Test&lt;/code&gt; 批注来包含多个&amp;ldquo;片段&amp;rdquo; 。如果需要多个&amp;ldquo;切片&amp;rdquo;，挑的一个 &lt;code&gt;@&amp;hellip;​Test&lt;/code&gt; 注释和包括 &lt;code&gt;@AutoConfigure&amp;hellip;​&lt;/code&gt; 其他的&amp;ldquo;切片&amp;rdquo;手工的注解。</target>
        </trans-unit>
        <trans-unit id="bd9332e575884b066c5d5130cb063ce6e9994b00" translate="yes" xml:space="preserve">
          <source>Inclusion of &lt;code&gt;ContentNegotiatingViewResolver&lt;/code&gt; and &lt;code&gt;BeanNameViewResolver&lt;/code&gt; beans.</source>
          <target state="translated">包含 &lt;code&gt;ContentNegotiatingViewResolver&lt;/code&gt; 和 &lt;code&gt;BeanNameViewResolver&lt;/code&gt; Bean。</target>
        </trans-unit>
        <trans-unit id="48a6bf61ef03cbd3bf93cb8878ed926b564eef74" translate="yes" xml:space="preserve">
          <source>Index date format used for rolling indices. Appended to the index name.</source>
          <target state="translated">滚动索引使用的索引日期格式。附在指数名称后面。</target>
        </trans-unit>
        <trans-unit id="2659f08a599fba294a045146a3b720bfd7c5368c" translate="yes" xml:space="preserve">
          <source>Index files follow a YAML compatible syntax so that they can be easily parsed by third-party tools. These files, however, are &lt;em&gt;not&lt;/em&gt; parsed internally as YAML and they must be written in exactly the formats described below in order to be used.</source>
          <target state="translated">索引文件遵循YAML兼容语法，以便可以由第三方工具轻松解析。但是，这些文件&lt;em&gt;未在&lt;/em&gt;内部解析为YAML，并且必须以下面所述的格式编写，才能使用。</target>
        </trans-unit>
        <trans-unit id="7e6282b4f96ae1ab766c24398a7034fbd0e1a96a" translate="yes" xml:space="preserve">
          <source>Index to export metrics to.</source>
          <target state="translated">输出指标的索引。</target>
        </trans-unit>
        <trans-unit id="bcc913d52f1555747e21e4b882c289f716bbb00c" translate="yes" xml:space="preserve">
          <source>Indicate intermediaries (caches and others) that they should not transform the response content.</source>
          <target state="translated">示意中间人(缓存和其他)不要转换响应内容。</target>
        </trans-unit>
        <trans-unit id="29e1431467f1a7f58ba90ae84dad098df12fae5d" translate="yes" xml:space="preserve">
          <source>Indicate that any cache may store the response.</source>
          <target state="translated">表示任何缓存可以存储响应。</target>
        </trans-unit>
        <trans-unit id="ab41555fb1fb156cac0f36c6b483f710c5474c9f" translate="yes" xml:space="preserve">
          <source>Indicate that once it has become stale, a cache must not use the response without re-validating it with the server.</source>
          <target state="translated">表示一旦变质,在没有与服务器重新验证的情况下,缓存不得使用响应。</target>
        </trans-unit>
        <trans-unit id="f413f362ab5a91368536763b6cead6a2c7526008" translate="yes" xml:space="preserve">
          <source>Indicate that the cached response can be reused only if re-validated with the server.</source>
          <target state="translated">表示缓存的响应只有在与服务器重新验证的情况下才能被重新使用。</target>
        </trans-unit>
        <trans-unit id="707097195fdc761e9e7dc1366ebe92541fb27d8c" translate="yes" xml:space="preserve">
          <source>Indicate that the response message is intended for a single user and must not be stored by a shared cache.</source>
          <target state="translated">表示响应消息是为单个用户准备的,不得由共享缓存存储。</target>
        </trans-unit>
        <trans-unit id="1e8cfe9306804f85fc6094a7aac5ad15f9e8a620" translate="yes" xml:space="preserve">
          <source>Indicate to not cache the response in any case.</source>
          <target state="translated">表示在任何情况下都不要缓存响应。</target>
        </trans-unit>
        <trans-unit id="ac0bd2d38de78a774e94c399a2922ae46bea3783" translate="yes" xml:space="preserve">
          <source>Infinispan</source>
          <target state="translated">Infinispan</target>
        </trans-unit>
        <trans-unit id="1a8479c98f2d6af522690474c1674e8ba835f561" translate="yes" xml:space="preserve">
          <source>Influx</source>
          <target state="translated">Influx</target>
        </trans-unit>
        <trans-unit id="c36b3bee195a35bec9f411d10a441e1db9cf408c" translate="yes" xml:space="preserve">
          <source>InfluxDB relies on OkHttp. If you need to tune the http client &lt;code&gt;InfluxDB&lt;/code&gt; uses behind the scenes, you can register an &lt;code&gt;InfluxDbOkHttpClientBuilderProvider&lt;/code&gt; bean.</source>
          <target state="translated">InfluxDB依赖于OkHttp。如果需要在后台调整 &lt;code&gt;InfluxDB&lt;/code&gt; 使用的http客户端，则可以注册 &lt;code&gt;InfluxDbOkHttpClientBuilderProvider&lt;/code&gt; bean。</target>
        </trans-unit>
        <trans-unit id="4faeda0c3fa6f6b4caeec766b36b6695337a9a81" translate="yes" xml:space="preserve">
          <source>Information returned by the &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;configprops&lt;/code&gt; endpoints can be somewhat sensitive so keys matching a certain pattern are sanitized by default (i.e. their values are replaced by &lt;code&gt;******&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;env&lt;/code&gt; 和 &lt;code&gt;configprops&lt;/code&gt; 端点返回的信息可能有些敏感，因此默认情况下会清理与特定模式匹配的键（即，它们的值将替换为 &lt;code&gt;******&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3e7789ab1824442b7958f2e9401f3749e8be176e" translate="yes" xml:space="preserve">
          <source>Ingest pipeline name. By default, events are not pre-processed.</source>
          <target state="translated">摄取管道名称。默认情况下,事件不会被预处理。</target>
        </trans-unit>
        <trans-unit id="19478c9d17c98db1f11d018e765ddfcf227d1acd" translate="yes" xml:space="preserve">
          <source>Init parameters to pass to Jersey through the servlet or filter.</source>
          <target state="translated">通过servlet或过滤器传递给Jersey的初始参数。</target>
        </trans-unit>
        <trans-unit id="3a9ccc7d1ee84f02db08c1ceaf7d97b4a737b61f" translate="yes" xml:space="preserve">
          <source>Init parameters used to configure the JSP servlet.</source>
          <target state="translated">用于配置JSP servlet的初始参数。</target>
        </trans-unit>
        <trans-unit id="cf686febab63d9cc18c50d2c3dd18e12a04bbe06" translate="yes" xml:space="preserve">
          <source>Initial buffer size for HTTP request decoding.</source>
          <target state="translated">HTTP请求解码的初始缓冲区大小。</target>
        </trans-unit>
        <trans-unit id="dbe58e28c696d71b755dcf6bac5e4360e7155a08" translate="yes" xml:space="preserve">
          <source>Initial connection pool size.</source>
          <target state="translated">初始连接池大小。</target>
        </trans-unit>
        <trans-unit id="0a3bd5b26616e003420c4b3c494e78bb99a7748f" translate="yes" xml:space="preserve">
          <source>Input type conversion</source>
          <target state="translated">输入类型转换</target>
        </trans-unit>
        <trans-unit id="a146472e963ec9891412a94daa2ca75430b069d5" translate="yes" xml:space="preserve">
          <source>Inside your &lt;code&gt;banner.txt&lt;/code&gt; file, you can use any of the following placeholders:</source>
          <target state="translated">在 &lt;code&gt;banner.txt&lt;/code&gt; 文件中，您可以使用以下任意占位符：</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="f3e344d348a077ceae9c867376f1fe1e5208d7cc" translate="yes" xml:space="preserve">
          <source>Installing the CLI, Using the CLI, Configuring the CLI, and more.</source>
          <target state="translated">安装CLI、使用CLI、配置CLI等。</target>
        </trans-unit>
        <trans-unit id="8ca4930d0a993b2b679d5dcfaf7457a2fda9062c" translate="yes" xml:space="preserve">
          <source>Instructions for how to upgrade from earlier versions of Spring Boot are provided on the project &lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki&quot;&gt;wiki&lt;/a&gt;. Follow the links in the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki#release-notes&quot;&gt;release notes&lt;/a&gt; section to find the version that you want to upgrade to.</source>
          <target state="translated">项目&lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki&quot;&gt;Wiki&lt;/a&gt;上提供了有关如何从早期版本的Spring Boot升级的说明。按照&lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki#release-notes&quot;&gt;发行说明&lt;/a&gt;部分中的链接查找要升级到的版本。</target>
        </trans-unit>
        <trans-unit id="c45fdf0e73a6762732491f6f0b102841fdaa31ee" translate="yes" xml:space="preserve">
          <source>Intermediate location of uploaded files.</source>
          <target state="translated">上传文件的中间位置。</target>
        </trans-unit>
        <trans-unit id="428748e2b14d5e27966975f6fc328b3a65fff00f" translate="yes" xml:space="preserve">
          <source>Interval between checkpoints, expressed as the number of log writes between two checkpoints. A checkpoint reduces the log file size at the expense of adding some overhead in the runtime.</source>
          <target state="translated">检查点之间的间隔,用两个检查点之间的日志写入次数表示。检查点可以减少日志文件的大小,但代价是在运行时增加一些开销。</target>
        </trans-unit>
        <trans-unit id="21d6cc107c07a01290168d4a766f34b4162b1485" translate="yes" xml:space="preserve">
          <source>Introducing Kotlin support in Spring Framework 5.0</source>
          <target state="translated">在Spring Framework 5.0中引入Kotlin支持</target>
        </trans-unit>
        <trans-unit id="2a097b4088c6c983354bb5faeb0cad18dd1847a1" translate="yes" xml:space="preserve">
          <source>Introducing Spring Boot, System Requirements, Servlet Containers, Installing Spring Boot, Developing Your First Spring Boot Application</source>
          <target state="translated">介绍Spring Boot、系统需求、Servlet容器、安装Spring Boot、开发您的第一个Spring Boot应用程序。</target>
        </trans-unit>
        <trans-unit id="f63289d08d91d66b38d80ac08a9d6ec133e01261" translate="yes" xml:space="preserve">
          <source>Isolation level for reading messages that have been written transactionally.</source>
          <target state="translated">读取以事务方式写入的消息的隔离级别。</target>
        </trans-unit>
        <trans-unit id="47fef12f103c46eaf53c63224dabf237624c3f69" translate="yes" xml:space="preserve">
          <source>It does not matter which container type you chose. Those two beans are exposed by the auto-configuration.</source>
          <target state="translated">你选择哪种容器类型并不重要。这两个Bean是通过自动配置暴露出来的。</target>
        </trans-unit>
        <trans-unit id="863d313bbf3c82face4ec49a50f2faa80dfe576b" translate="yes" xml:space="preserve">
          <source>It is also possible to &lt;em&gt;force&lt;/em&gt; a particular cache provider by setting the &lt;code&gt;spring.cache.type&lt;/code&gt; property. Use this property if you need to &lt;a href=&quot;#boot-features-caching-provider-none&quot;&gt;disable caching altogether&lt;/a&gt; in certain environment (such as tests).</source>
          <target state="translated">也可以通过设置 &lt;code&gt;spring.cache.type&lt;/code&gt; 属性来&lt;em&gt;强制&lt;/em&gt;特定的缓存提供程序。如果您需要在某些环境（例如测试）中&lt;a href=&quot;#boot-features-caching-provider-none&quot;&gt;完全禁用缓存，&lt;/a&gt;请使用此属性。</target>
        </trans-unit>
        <trans-unit id="405e432c01cc54a165c2085f4e393dbc1d2d70eb" translate="yes" xml:space="preserve">
          <source>It is also possible to apply manually the customizers responsible for this instrumentation, namely &lt;code&gt;MetricsRestTemplateCustomizer&lt;/code&gt; and &lt;code&gt;MetricsWebClientCustomizer&lt;/code&gt;.</source>
          <target state="translated">也可以手动应用负责此工具的定制程序，即 &lt;code&gt;MetricsRestTemplateCustomizer&lt;/code&gt; 和 &lt;code&gt;MetricsWebClientCustomizer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0e342a8f50ff98a728775c71587211369a73cacc" translate="yes" xml:space="preserve">
          <source>It is also possible to configure a &lt;code&gt;JavaMailSender&lt;/code&gt; with an existing &lt;code&gt;Session&lt;/code&gt; from JNDI:</source>
          <target state="translated">也可以使用来自JNDI的现有 &lt;code&gt;Session&lt;/code&gt; 来配置 &lt;code&gt;JavaMailSender&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="491376887d99e9660a0b638f766e0559735b44f5" translate="yes" xml:space="preserve">
          <source>It is also possible to configure the &lt;code&gt;SpringApplication&lt;/code&gt; by using an &lt;code&gt;application.properties&lt;/code&gt; file. See &lt;em&gt;&lt;a href=&quot;#boot-features-external-config&quot;&gt;Externalized Configuration&lt;/a&gt;&lt;/em&gt; for details.</source>
          <target state="translated">也可以通过使用 &lt;code&gt;application.properties&lt;/code&gt; 文件配置 &lt;code&gt;SpringApplication&lt;/code&gt; 。有关详细信息，请参见&lt;em&gt;&lt;a href=&quot;#boot-features-external-config&quot;&gt;外部化配置&lt;/a&gt;&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bcc8002acb9e2e1eaf620051b8934226b03f8178" translate="yes" xml:space="preserve">
          <source>It is also possible to customize some of the &lt;code&gt;ClusterEnvironment&lt;/code&gt; settings. For instance, the following configuration changes the timeout to use to open a new &lt;code&gt;Bucket&lt;/code&gt; and enables SSL support:</source>
          <target state="translated">还可以自定义某些 &lt;code&gt;ClusterEnvironment&lt;/code&gt; 设置。例如，以下配置更改了用于打开新 &lt;code&gt;Bucket&lt;/code&gt; 并启用SSL支持的超时：</target>
        </trans-unit>
        <trans-unit id="d0458253c62f04237a38b55ace84a9de21113f29" translate="yes" xml:space="preserve">
          <source>It is also possible to customize the &lt;code&gt;Environment&lt;/code&gt; before the application context is refreshed by using &lt;code&gt;EnvironmentPostProcessor&lt;/code&gt;. Each implementation should be registered in &lt;code&gt;META-INF/spring.factories&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">还可以使用 &lt;code&gt;Environment&lt;/code&gt; PostProcessor在刷新应用程序上下文之前自定义 &lt;code&gt;EnvironmentPostProcessor&lt;/code&gt; 。每个实现都应在 &lt;code&gt;META-INF/spring.factories&lt;/code&gt; 中注册，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="6c79c88ce4106f93c1147e73f2cc6d68f46e56aa" translate="yes" xml:space="preserve">
          <source>It is also possible to easily customize the &lt;code&gt;Environment&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">还可以轻松自定义 &lt;code&gt;Environment&lt;/code&gt; ，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="1f3fc50c8d4c1ccc5ff60f442ad26704dd404e88" translate="yes" xml:space="preserve">
          <source>It is also possible to run a packaged application with remote debugging support enabled. Doing so lets you attach a debugger to your packaged application, as shown in the following example:</source>
          <target state="translated">也可以在启用远程调试支持的情况下运行打包的应用程序。这样做可以让你把调试器连接到你的打包的应用程序中,如下例所示。</target>
        </trans-unit>
        <trans-unit id="8fed57a9495b65fd6cf2f077c2cedf14a00e3668" translate="yes" xml:space="preserve">
          <source>It is also possible to take complete control of the &lt;code&gt;ApplicationContext&lt;/code&gt; type that is used by calling &lt;code&gt;setApplicationContextClass(&amp;hellip;​)&lt;/code&gt;.</source>
          <target state="translated">也可以完全控制通过调用 &lt;code&gt;setApplicationContextClass(&amp;hellip;​)&lt;/code&gt; 使用的 &lt;code&gt;ApplicationContext&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="693b351a9cd5863fd308de92780625d7abb3a29b" translate="yes" xml:space="preserve">
          <source>It is also possible to test what happens when a particular class and/or package is not present at runtime. Spring Boot ships with a &lt;code&gt;FilteredClassLoader&lt;/code&gt; that can easily be used by the runner. In the following example, we assert that if &lt;code&gt;UserService&lt;/code&gt; is not present, the auto-configuration is properly disabled:</source>
          <target state="translated">还可以测试在运行时不存在特定的类和/或程序包时发生的情况。Spring Boot附带有 &lt;code&gt;FilteredClassLoader&lt;/code&gt; ，跑步者可以轻松使用。在以下示例中，我们断言，如果不存在 &lt;code&gt;UserService&lt;/code&gt; ，则会自动禁用自动配置：</target>
        </trans-unit>
        <trans-unit id="2734c8dfa6c0d6bd13d500dca2fdcd68ed55839d" translate="yes" xml:space="preserve">
          <source>It is also possible to transparently &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/integration.html#cache-annotations-put&quot;&gt;update&lt;/a&gt; or &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/integration.html#cache-annotations-evict&quot;&gt;evict&lt;/a&gt; data from the cache.</source>
          <target state="translated">还可以透明地&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/integration.html#cache-annotations-put&quot;&gt;更新&lt;/a&gt;或从缓存中&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/integration.html#cache-annotations-evict&quot;&gt;逐出&lt;/a&gt;数据。</target>
        </trans-unit>
        <trans-unit id="df866c73f0be7820ec044fb4c96c342a5f3864e9" translate="yes" xml:space="preserve">
          <source>It is also possible to use the &lt;code&gt;@AutoConfigure&amp;hellip;​&lt;/code&gt; annotations with the standard &lt;code&gt;@SpringBootTest&lt;/code&gt; annotation. You can use this combination if you are not interested in &amp;ldquo;slicing&amp;rdquo; your application but you want some of the auto-configured test beans.</source>
          <target state="translated">也可以使用 &lt;code&gt;@AutoConfigure&amp;hellip;​&lt;/code&gt; 注释与标准 &lt;code&gt;@SpringBootTest&lt;/code&gt; 注解。如果您对&amp;ldquo;切片&amp;rdquo;应用程序不感兴趣，但需要一些自动配置的测试bean，则可以使用此组合。</target>
        </trans-unit>
        <trans-unit id="3e2591ae1b16c95c560c9f0dda27230771278b0c" translate="yes" xml:space="preserve">
          <source>It is always advisable to use &lt;code&gt;https://&lt;/code&gt; as the connection protocol, so that traffic is encrypted and passwords cannot be intercepted.</source>
          <target state="translated">始终建议使用 &lt;code&gt;https://&lt;/code&gt; 作为连接协议，以便对通信进行加密并且不能截获密码。</target>
        </trans-unit>
        <trans-unit id="5a06c25c2d8d826ea318e002cd7ce8e2b2ac25c5" translate="yes" xml:space="preserve">
          <source>It is not required that every &amp;ldquo;property&amp;rdquo; has a &amp;ldquo;group&amp;rdquo;. Some properties might exist in their own right.</source>
          <target state="translated">不需要每个&amp;ldquo;属性&amp;rdquo;都有一个&amp;ldquo;组&amp;rdquo;。某些属性可能本身就存在。</target>
        </trans-unit>
        <trans-unit id="e2557bf1d7b72d96d4ee34efd9c5f77d65dc70c1" translate="yes" xml:space="preserve">
          <source>It is often convenient to develop applications by using an in-memory embedded database. Obviously, in-memory databases do not provide persistent storage. You need to populate your database when your application starts and be prepared to throw away data when your application ends.</source>
          <target state="translated">通过使用内存嵌入式数据库来开发应用程序往往很方便。显然,内存数据库不提供持久性存储。你需要在应用程序启动时填充数据库,并准备在应用程序结束时扔掉数据。</target>
        </trans-unit>
        <trans-unit id="a53e016c06956f99c26890bc37226134dd422de2" translate="yes" xml:space="preserve">
          <source>It is often desirable to call &lt;code&gt;setWebApplicationType(WebApplicationType.NONE)&lt;/code&gt; when using &lt;code&gt;SpringApplication&lt;/code&gt; within a JUnit test.</source>
          <target state="translated">在JUnit测试中使用 &lt;code&gt;SpringApplication&lt;/code&gt; 时，通常希望调用 &lt;code&gt;setWebApplicationType(WebApplicationType.NONE)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="451ed0e0a361886145f1f396232c806ddaaddd1b" translate="yes" xml:space="preserve">
          <source>It is possible to bind a bean declaring standard JavaBean properties as shown in the following example:</source>
          <target state="translated">可以绑定一个声明标准JavaBean属性的Bean,如下例所示。</target>
        </trans-unit>
        <trans-unit id="344049e68019f4ddc313dcdee4ebe3ce3dec6593" translate="yes" xml:space="preserve">
          <source>It is possible to build a Spring Boot project using Apache Ant+Ivy. The &lt;code&gt;spring-boot-antlib&lt;/code&gt; &amp;ldquo;AntLib&amp;rdquo; module is also available to help Ant create executable jars.</source>
          <target state="translated">可以使用Apache Ant + Ivy构建Spring Boot项目。该 &lt;code&gt;spring-boot-antlib&lt;/code&gt; &amp;ldquo;的antlib&amp;rdquo;模块还可以帮助蚂蚁创建可执行的JAR文件。</target>
        </trans-unit>
        <trans-unit id="6d0474d51ae4b77a4f88c22618902e3a7b59c162" translate="yes" xml:space="preserve">
          <source>It is possible to define multiple base-dn values, however, since distinguished names usually contain commas, they must be defined using the correct notation.</source>
          <target state="translated">可以定义多个基线-dn值,但是,由于区分名通常包含逗号,因此必须使用正确的符号来定义它们。</target>
        </trans-unit>
        <trans-unit id="a84f595f3d28ff46338a9d8ccb0e6f5ed0d4b3a6" translate="yes" xml:space="preserve">
          <source>It is possible to disable them all by setting the &lt;code&gt;management.info.defaults.enabled&lt;/code&gt; property.</source>
          <target state="translated">通过设置 &lt;code&gt;management.info.defaults.enabled&lt;/code&gt; 属性，可以全部禁用它们。</target>
        </trans-unit>
        <trans-unit id="8e067d397dd176791bae5e31ab4ff5128c0ca663" translate="yes" xml:space="preserve">
          <source>It is possible to enable admin-related features for the application by specifying the &lt;code&gt;spring.application.admin.enabled&lt;/code&gt; property. This exposes the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBean.java&quot;&gt;&lt;code&gt;SpringApplicationAdminMXBean&lt;/code&gt;&lt;/a&gt; on the platform &lt;code&gt;MBeanServer&lt;/code&gt;. You could use this feature to administer your Spring Boot application remotely. This feature could also be useful for any service wrapper implementation.</source>
          <target state="translated">通过指定 &lt;code&gt;spring.application.admin.enabled&lt;/code&gt; 属性，可以为应用程序启用与管理员相关的功能。这将在平台 &lt;code&gt;MBeanServer&lt;/code&gt; 上公开&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBean.java&quot;&gt; &lt;code&gt;SpringApplicationAdminMXBean&lt;/code&gt; &lt;/a&gt;。您可以使用此功能来远程管理您的Spring Boot应用程序。对于任何服务包装器实现，此功能也可能很有用。</target>
        </trans-unit>
        <trans-unit id="4a871d5a04565de30c6b48dbccfa48395131465a" translate="yes" xml:space="preserve">
          <source>It is recommended to use the container&amp;rsquo;s built-in support for multipart uploads rather than introducing an additional dependency such as Apache Commons File Upload.</source>
          <target state="translated">建议使用容器的内置支持进行分段上传，而不要引入其他依赖项，例如Apache Commons File Upload。</target>
        </trans-unit>
        <trans-unit id="92d60f6d689b64f99614193beab9b378963ad3c4" translate="yes" xml:space="preserve">
          <source>It is recommended, but not mandatory, to use the Apache HTTP Client (version 4.3.2 or better). If you have that on your classpath, the &lt;code&gt;TestRestTemplate&lt;/code&gt; responds by configuring the client appropriately. If you do use Apache&amp;rsquo;s HTTP client, some additional test-friendly features are enabled:</source>
          <target state="translated">建议（但不是强制性的）使用Apache HTTP Client（版本4.3.2或更高版本）。如果您在类路径中具有该名称，则 &lt;code&gt;TestRestTemplate&lt;/code&gt; 会通过适当配置客户端进行响应。如果您确实使用Apache的HTTP客户端，则会启用一些其他易于测试的功能：</target>
        </trans-unit>
        <trans-unit id="ba5e9169a65079dfae3dc127054d5197f0ca8368" translate="yes" xml:space="preserve">
          <source>It is strongly recommended that you choose a build system that supports &lt;a href=&quot;#using-boot-dependency-management&quot;&gt;&lt;em&gt;dependency management&lt;/em&gt;&lt;/a&gt; and that can consume artifacts published to the &amp;ldquo;Maven Central&amp;rdquo; repository. We would recommend that you choose Maven or Gradle. It is possible to get Spring Boot to work with other build systems (Ant, for example), but they are not particularly well supported.</source>
          <target state="translated">强烈建议您选择一个支持&lt;a href=&quot;#using-boot-dependency-management&quot;&gt;&lt;em&gt;依赖关系管理&lt;/em&gt;&lt;/a&gt;并且可以使用发布到&amp;ldquo; Maven Central&amp;rdquo;存储库的工件的构建系统。我们建议您选择Maven或Gradle。可以使Spring Boot与其他构建系统（例如，Ant）一起使用，但是它们并没有得到很好的支持。</target>
        </trans-unit>
        <trans-unit id="eac61dd25fe995d9e27baf561d75975f8a0f3a09" translate="yes" xml:space="preserve">
          <source>It is usually safe to leave Filter beans unordered. If a specific order is required, you should annotate the &lt;code&gt;Filter&lt;/code&gt; with &lt;code&gt;@Order&lt;/code&gt; or make it implement &lt;code&gt;Ordered&lt;/code&gt;. You cannot configure the order of a &lt;code&gt;Filter&lt;/code&gt; by annotating its bean method with &lt;code&gt;@Order&lt;/code&gt;. If you cannot change the &lt;code&gt;Filter&lt;/code&gt; class to add &lt;code&gt;@Order&lt;/code&gt; or implement &lt;code&gt;Ordered&lt;/code&gt;, you must define a &lt;code&gt;FilterRegistrationBean&lt;/code&gt; for the &lt;code&gt;Filter&lt;/code&gt; and set the registration bean&amp;rsquo;s order using the &lt;code&gt;setOrder(int)&lt;/code&gt; method. Avoid configuring a Filter that reads the request body at &lt;code&gt;Ordered.HIGHEST_PRECEDENCE&lt;/code&gt;, since it might go against the character encoding configuration of your application. If a Servlet filter wraps the request, it should be configured with an order that is less than or equal to &lt;code&gt;OrderedFilter.REQUEST_WRAPPER_FILTER_MAX_ORDER&lt;/code&gt;.</source>
          <target state="translated">通常可以使无序滤豆处于无序状态。如果需要特定的订单，则应使用 &lt;code&gt;@Order&lt;/code&gt; 注释 &lt;code&gt;Filter&lt;/code&gt; 或使其实现 &lt;code&gt;Ordered&lt;/code&gt; 。您无法通过使用 &lt;code&gt;@Order&lt;/code&gt; 注释 &lt;code&gt;Filter&lt;/code&gt; 的bean方法来配置Filter的顺序。如果您不能将 &lt;code&gt;Filter&lt;/code&gt; 类更改为添加 &lt;code&gt;@Order&lt;/code&gt; 或实现 &lt;code&gt;Ordered&lt;/code&gt; ，则必须为 &lt;code&gt;Filter&lt;/code&gt; 定义一个 &lt;code&gt;FilterRegistrationBean&lt;/code&gt; 并使用 &lt;code&gt;setOrder(int)&lt;/code&gt; 方法设置注册bean的顺序。避免配置一个在 &lt;code&gt;Ordered.HIGHEST_PRECEDENCE&lt;/code&gt; 上读取请求正文的过滤器，因为它可能与应用程序的字符编码配置背道而驰。如果Servlet过滤器包装了请求，则应使用小于或等于 &lt;code&gt;OrderedFilter.REQUEST_WRAPPER_FILTER_MAX_ORDER&lt;/code&gt; 的顺序来配置它。</target>
        </trans-unit>
        <trans-unit id="d166ea0dac48c8e50540890a87bddcad9b755266" translate="yes" xml:space="preserve">
          <source>It might happen that more than one provider is present, in which case the provider must be explicitly specified. Even if the JSR-107 standard does not enforce a standardized way to define the location of the configuration file, Spring Boot does its best to accommodate setting a cache with implementation details, as shown in the following example:</source>
          <target state="translated">可能会出现不止一个提供者,在这种情况下,必须明确指定提供者。即使 JSR-107 标准没有强制执行一种标准化的方式来定义配置文件的位置,Spring Boot 也会尽力满足设置缓存的实现细节,如下例所示。</target>
        </trans-unit>
        <trans-unit id="bf1c8e0d789bebd778512bfa4643a64eb675dbcf" translate="yes" xml:space="preserve">
          <source>It often makes sense to customize elements of the start script as it is written into the jar file. For example, init.d scripts can provide a &amp;ldquo;description&amp;rdquo;. Since you know the description up front (and it need not change), you may as well provide it when the jar is generated.</source>
          <target state="translated">在将启动脚本写入jar文件时，自定义启动脚本的元素通常很有意义。例如，init.d脚本可以提供&amp;ldquo;描述&amp;rdquo;。由于您已经预先了解了描述（并且无需更改），因此在生成jar时也可以提供它。</target>
        </trans-unit>
        <trans-unit id="63a0a802d9a5aa9be545ebf0904443cdd1834de6" translate="yes" xml:space="preserve">
          <source>It then becomes important not to litter the application&amp;rsquo;s main class with configuration settings that are specific to a particular area of its functionality.</source>
          <target state="translated">因此，变得重要的是，不要使用特定于应用程序功能特定区域的配置设置来乱扔应用程序的主类。</target>
        </trans-unit>
        <trans-unit id="d2b432134b80a832301e20530a4fae9f849fbf1d" translate="yes" xml:space="preserve">
          <source>It uninstalls the artifacts identified by the coordinates you supply and their dependencies.</source>
          <target state="translated">它可以卸载由你提供的坐标及其依赖关系所标识的工件。</target>
        </trans-unit>
        <trans-unit id="bb2c3a228b8a63c3d0f9ebfba46e52f66b831430" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s also possible to set logging levels using environment variables. For example, &lt;code&gt;LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=DEBUG&lt;/code&gt; will set &lt;code&gt;org.springframework.web&lt;/code&gt; to &lt;code&gt;DEBUG&lt;/code&gt;.</source>
          <target state="translated">也可以使用环境变量来设置日志记录级别。例如， &lt;code&gt;LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=DEBUG&lt;/code&gt; 会将 &lt;code&gt;org.springframework.web&lt;/code&gt; 设置为 &lt;code&gt;DEBUG&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ddfdf5526d71d394651f2b743fce4bcd7766aae8" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s often useful to be able to group related loggers together so that they can all be configured at the same time. For example, you might commonly change the logging levels for &lt;em&gt;all&lt;/em&gt; Tomcat related loggers, but you can&amp;rsquo;t easily remember top level packages.</source>
          <target state="translated">能够将相关记录器组合在一起通常很有用，以便可以同时配置它们。例如，您可能通常会更改&lt;em&gt;所有&lt;/em&gt;与Tomcat相关的记录器的记录级别，但是您不容易记住顶层软件包。</target>
        </trans-unit>
        <trans-unit id="fa677fdd781a780e4d387d2d67356227f9de02d2" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s sometimes useful to only activate a given get of properties when certain conditions are met. For example, you might have properties that are only relevant when a specific profile is active.</source>
          <target state="translated">有时仅在满足某些条件时才激活给定的属性获取，这很有用。例如，您可能具有仅在特定配置文件处于活动状态时才相关的属性。</target>
        </trans-unit>
        <trans-unit id="33a245cd63a1cb2272703c16ecd530e77755243f" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s sometimes useful to organize health indicators into groups that can be used for different purposes.</source>
          <target state="translated">有时将健康指标组织为可用于不同目的的组很有用。</target>
        </trans-unit>
        <trans-unit id="44d25b5d1b6d98c7d090ca3609aca11ae2815fa0" translate="yes" xml:space="preserve">
          <source>Items</source>
          <target state="translated">Items</target>
        </trans-unit>
        <trans-unit id="f44d4dfad4f0d772ef96d36f8dd8d15cccf6d2a8" translate="yes" xml:space="preserve">
          <source>Items to be included in the trace. Defaults to request headers (excluding Authorization and Cookie), response headers (excluding Set-Cookie), and time taken.</source>
          <target state="translated">要包含在跟踪中的项目。默认为请求头(不包括授权和Cookie)、响应头(不包括Set-Cookie)和所需时间。</target>
        </trans-unit>
        <trans-unit id="8990a34e20bfc58622aa559f693fe5d4f6683250" translate="yes" xml:space="preserve">
          <source>JAXB is only available out of the box with Java 8. If you&amp;rsquo;re using a more recent Java generation, add the following dependency to your project:</source>
          <target state="translated">JAXB仅在Java 8中可用。</target>
        </trans-unit>
        <trans-unit id="a73a76028ee498b374420023104d23fd243e7ff9" translate="yes" xml:space="preserve">
          <source>JCache (JSR-107)</source>
          <target state="translated">JCache(JSR-107)</target>
        </trans-unit>
        <trans-unit id="1f1062dcbb83b59e4f6f5cb50ef505afac199e0d" translate="yes" xml:space="preserve">
          <source>JDBC</source>
          <target state="translated">JDBC</target>
        </trans-unit>
        <trans-unit id="ad5621d8c078ad36c48a8ae5327068dd26b91876" translate="yes" xml:space="preserve">
          <source>JDBC Application.</source>
          <target state="translated">JDBC应用。</target>
        </trans-unit>
        <trans-unit id="a04db6096c703c480ad28630ca79777c2e60643b" translate="yes" xml:space="preserve">
          <source>JDBC URL of the database to migrate. If not set, the primary configured data source is used.</source>
          <target state="translated">要迁移的数据库的JDBC URL,如果没有设置,则使用主要配置的数据源。如果没有设置,则使用主要配置的数据源。</target>
        </trans-unit>
        <trans-unit id="8bd9a87b97be06a610d9c2f6d003732f633bec18" translate="yes" xml:space="preserve">
          <source>JDBC URL of the database.</source>
          <target state="translated">数据库的JDBC URL。</target>
        </trans-unit>
        <trans-unit id="d00750e627573302a5f445a548d45368af752f13" translate="yes" xml:space="preserve">
          <source>JDBC url of the database to migrate. If not set, the primary configured data source is used.</source>
          <target state="translated">要迁移的数据库的 JDBC url,如果没有设置,则使用主要配置的数据源。如果没有设置,则使用主要配置的数据源。</target>
        </trans-unit>
        <trans-unit id="c9a020eac89ab9b75f8806942142b0ac0c3ed8cb" translate="yes" xml:space="preserve">
          <source>JDK (Java Util Logging)</source>
          <target state="translated">JDK (Java Util Logging)</target>
        </trans-unit>
        <trans-unit id="419767c84102b8a9c04263f473fb2478441eb8aa" translate="yes" xml:space="preserve">
          <source>JMS</source>
          <target state="translated">JMS</target>
        </trans-unit>
        <trans-unit id="2a04fe014d05cd4f74b53bc76206a96e43028e70" translate="yes" xml:space="preserve">
          <source>JMS Application.</source>
          <target state="translated">JMS应用。</target>
        </trans-unit>
        <trans-unit id="2b8bd7f0cfe36bbd5d2714b1db91c558851c9311" translate="yes" xml:space="preserve">
          <source>JMX</source>
          <target state="translated">JMX</target>
        </trans-unit>
        <trans-unit id="310baf4ae8f57fd200c45e52fc9e8c56b05596fa" translate="yes" xml:space="preserve">
          <source>JMX domain name.</source>
          <target state="translated">JMX域名。</target>
        </trans-unit>
        <trans-unit id="a0cd744138adf29ca3b64e8bffb57362f90d221e" translate="yes" xml:space="preserve">
          <source>JMX name of the application admin MBean.</source>
          <target state="translated">应用管理MBean的JMX名称。</target>
        </trans-unit>
        <trans-unit id="a9e7b55cd877e40ab90cc05f9c98cddf9083a4b9" translate="yes" xml:space="preserve">
          <source>JNDI attributes from &lt;code&gt;java:comp/env&lt;/code&gt;.</source>
          <target state="translated">来自 &lt;code&gt;java:comp/env&lt;/code&gt; 的JNDI属性。</target>
        </trans-unit>
        <trans-unit id="35d017995f01092fa725ef1601af717de166be1c" translate="yes" xml:space="preserve">
          <source>JNDI location of the datasource. Class, url, username and password are ignored when set.</source>
          <target state="translated">数据源的JNDI位置。设置时,类、url、用户名和密码会被忽略。</target>
        </trans-unit>
        <trans-unit id="38cfc96020d4957295a1f07e6707b67e41b4b9b7" translate="yes" xml:space="preserve">
          <source>JOOQ tests are transactional and roll back at the end of each test by default. If that is not what you want, you can disable transaction management for a test or for the whole test class as &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-jdbc-test&quot;&gt;shown in the JDBC example&lt;/a&gt;.</source>
          <target state="translated">JOOQ测试是事务性的，默认情况下会在每个测试结束时回滚。如果这不是您想要的，则可以禁用测试或整个测试类的事务管理，如&lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-jdbc-test&quot;&gt;JDBC示例所示&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cb79b19c096665c52490ed34b986eb585fd31f46" translate="yes" xml:space="preserve">
          <source>JPA has features for DDL generation, and these can be set up to run on startup against the database. This is controlled through two external properties:</source>
          <target state="translated">JPA有生成DDL的功能,这些功能可以被设置为在启动时针对数据库运行。这是通过两个外部属性来控制的。</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="187865a73891c6c5c355a20afd5a4b3f7d170893" translate="yes" xml:space="preserve">
          <source>JSON Web Algorithm used for verifying the digital signatures.</source>
          <target state="translated">JSON网络算法用于验证数字签名。</target>
        </trans-unit>
        <trans-unit id="7ac1960a724ee59b5cde4eb3cb3d6422d0cf4c36" translate="yes" xml:space="preserve">
          <source>JSON Web Key URI to use to verify the JWT token.</source>
          <target state="translated">JSON Web Key URI用于验证JWT标记。</target>
        </trans-unit>
        <trans-unit id="b7c4e2a27dfd6128a61ee0f30729d100e037a876" translate="yes" xml:space="preserve">
          <source>JSON codecs with Jackson</source>
          <target state="translated">Jackson的JSON编解码器</target>
        </trans-unit>
        <trans-unit id="4cd96e2546fe562804d627e5dea07c1ccdb0ab96" translate="yes" xml:space="preserve">
          <source>JSON helper classes can also be used directly in standard unit tests. To do so, call the &lt;code&gt;initFields&lt;/code&gt; method of the helper in your &lt;code&gt;@Before&lt;/code&gt; method if you do not use &lt;code&gt;@JsonTest&lt;/code&gt;.</source>
          <target state="translated">JSON帮助程序类也可以直接在标准单元测试中使用。为此，如果不使用 &lt;code&gt;@JsonTest&lt;/code&gt; ，请在 &lt;code&gt;initFields&lt;/code&gt; 方法中调用帮助程序的 &lt;code&gt;@Before&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="6b9e900296313a511c3acee86fa44e5fcab11fcb" translate="yes" xml:space="preserve">
          <source>JSON object</source>
          <target state="translated">JSON对象</target>
        </trans-unit>
        <trans-unit id="e224795a4fbc5a0f7e05432dd42747a823359ca6" translate="yes" xml:space="preserve">
          <source>JSON-B</source>
          <target state="translated">JSON-B</target>
        </trans-unit>
        <trans-unit id="8fe083bb8cc51867baa49b96d8b209a6f2d0024b" translate="yes" xml:space="preserve">
          <source>JUnit.</source>
          <target state="translated">JUnit.</target>
        </trans-unit>
        <trans-unit id="74ab05132a080fb308f9e0b9ed3bf6fd0019158b" translate="yes" xml:space="preserve">
          <source>JVM metrics, report utilization of:</source>
          <target state="translated">JVM指标,报告利用的。</target>
        </trans-unit>
        <trans-unit id="f1ed159a2cabb9ff836d38b5f7192badaa2849a5" translate="yes" xml:space="preserve">
          <source>Jackson</source>
          <target state="translated">Jackson</target>
        </trans-unit>
        <trans-unit id="27cc37fede01d31a536a11d3a8237c9e85b6a2b9" translate="yes" xml:space="preserve">
          <source>Jackson &lt;code&gt;ObjectMapper&lt;/code&gt;, any &lt;code&gt;@JsonComponent&lt;/code&gt; beans and any Jackson &lt;code&gt;Module&lt;/code&gt;s</source>
          <target state="translated">杰克逊 &lt;code&gt;ObjectMapper&lt;/code&gt; ，任何 &lt;code&gt;@JsonComponent&lt;/code&gt; 豆类和任何杰克逊 &lt;code&gt;Module&lt;/code&gt; 小号</target>
        </trans-unit>
        <trans-unit id="3f54f6909caad4a0bfa906651795a252b7c6c45c" translate="yes" xml:space="preserve">
          <source>Jackson general purpose on/off features.</source>
          <target state="translated">杰克逊通用开/关功能。</target>
        </trans-unit>
        <trans-unit id="0995ef6b6d3b9226f9e47610c2875632f3f1d365" translate="yes" xml:space="preserve">
          <source>Jackson is a required dependency in order to get the correct JSON responses as documented in the API documentation (&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/htmlsingle&quot;&gt;HTML&lt;/a&gt; or &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/pdf/spring-boot-actuator-web-api.pdf&quot;&gt;PDF&lt;/a&gt;).</source>
          <target state="translated">为了获得API文档（&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/htmlsingle&quot;&gt;HTML&lt;/a&gt;或&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/pdf/spring-boot-actuator-web-api.pdf&quot;&gt;PDF&lt;/a&gt;）中记录的正确的JSON响应，Jackson是必需的依赖项。</target>
        </trans-unit>
        <trans-unit id="d0b0325c94db1c22fe64079d9205512f543c0058" translate="yes" xml:space="preserve">
          <source>Jackson is the preferred and default library.</source>
          <target state="translated">Jackson是首选和默认库。</target>
        </trans-unit>
        <trans-unit id="547b474c08ae92a002d843e6868382d4aab5784b" translate="yes" xml:space="preserve">
          <source>Jackson on/off features for generators.</source>
          <target state="translated">杰克逊发电机的开/关功能。</target>
        </trans-unit>
        <trans-unit id="cbce0343b91bd0cc4bb155d1799e42a0eca12518" translate="yes" xml:space="preserve">
          <source>Jackson on/off features for parsers.</source>
          <target state="translated">解析器的杰克逊开/关功能。</target>
        </trans-unit>
        <trans-unit id="1e6204ca69d5c11ba849a8325682627bfa2d5bb2" translate="yes" xml:space="preserve">
          <source>Jackson on/off features that affect the way Java objects are deserialized.</source>
          <target state="translated">Jackson开启/关闭影响Java对象反序列化方式的功能。</target>
        </trans-unit>
        <trans-unit id="23cd5d34ffb3c5830479979aed136c9ef61b7a5f" translate="yes" xml:space="preserve">
          <source>Jackson on/off features that affect the way Java objects are serialized.</source>
          <target state="translated">Jackson开启/关闭影响Java对象序列化方式的功能。</target>
        </trans-unit>
        <trans-unit id="8105e635e716286ef49fb4e241fe94e6c226ead1" translate="yes" xml:space="preserve">
          <source>Jackson visibility thresholds that can be used to limit which methods (and fields) are auto-detected.</source>
          <target state="translated">杰克逊可见性阈值,可用于限制哪些方法(和字段)被自动检测。</target>
        </trans-unit>
        <trans-unit id="cb79c539a2a56174884e28f105604136c19834fd" translate="yes" xml:space="preserve">
          <source>JarClassLoader</source>
          <target state="translated">JarClassLoader</target>
        </trans-unit>
        <trans-unit id="f0075ce3f78df0ba25f3bb8ec3b3bfc12fea525a" translate="yes" xml:space="preserve">
          <source>Java Management Extensions (JMX) provide a standard mechanism to monitor and manage applications. By default, this feature is not enabled and can be turned on by setting the configuration property &lt;code&gt;spring.jmx.enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. Spring Boot exposes management endpoints as JMX MBeans under the &lt;code&gt;org.springframework.boot&lt;/code&gt; domain by default.</source>
          <target state="translated">Java管理扩展（JMX）提供了监视和管理应用程序的标准机制。默认情况下，此功能未启用，可以通过将配置属性 &lt;code&gt;spring.jmx.enabled&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; 来启用。默认情况下，Spring Boot在 &lt;code&gt;org.springframework.boot&lt;/code&gt; 域下将管理端点公开为JMX MBean 。</target>
        </trans-unit>
        <trans-unit id="bc4c2a3fdb3a9196ac84f91bf451d0f97383d883" translate="yes" xml:space="preserve">
          <source>Java Management Extensions (JMX) provide a standard mechanism to monitor and manage applications. Spring Boot exposes the most suitable &lt;code&gt;MBeanServer&lt;/code&gt; as a bean with an ID of &lt;code&gt;mbeanServer&lt;/code&gt;. Any of your beans that are annotated with Spring JMX annotations (&lt;code&gt;@ManagedResource&lt;/code&gt;, &lt;code&gt;@ManagedAttribute&lt;/code&gt;, or &lt;code&gt;@ManagedOperation&lt;/code&gt;) are exposed to it.</source>
          <target state="translated">Java管理扩展（JMX）提供了监视和管理应用程序的标准机制。Spring Boot将最合适的 &lt;code&gt;MBeanServer&lt;/code&gt; 作为ID为 &lt;code&gt;mbeanServer&lt;/code&gt; 的bean公开。带有Spring JMX注释（@ &lt;code&gt;@ManagedResource&lt;/code&gt; ，@ &lt;code&gt;@ManagedAttribute&lt;/code&gt; 或 &lt;code&gt;@ManagedOperation&lt;/code&gt; ）的任何bean都可以使用它。</target>
        </trans-unit>
        <trans-unit id="9747eb44e42aa5de6b257e4909a5b116df5ca16c" translate="yes" xml:space="preserve">
          <source>Java System properties (&lt;code&gt;System.getProperties()&lt;/code&gt;).</source>
          <target state="translated">Java系统属性（ &lt;code&gt;System.getProperties()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="f6d2f4d439bdab46705981aaecb533191c3849a8" translate="yes" xml:space="preserve">
          <source>Java Util logging</source>
          <target state="translated">Java Util日志</target>
        </trans-unit>
        <trans-unit id="9ef958bc5860771de753d6c21cc5c6486f2697eb" translate="yes" xml:space="preserve">
          <source>Java does not provide a standard way to load nested jar files (jar files that are themselves contained within a jar). This can be problematic if you are looking to distribute a self-contained application.</source>
          <target state="translated">Java没有提供一个标准的方法来加载嵌套的jar文件(jar文件本身包含在jar中)。如果你想发布一个独立的应用程序,这可能会有问题。</target>
        </trans-unit>
        <trans-unit id="5fa7ba9740eca1e8b7f16b9bc7e80be2f3059366" translate="yes" xml:space="preserve">
          <source>Java does not provide any standard way to load nested jar files (that is, jar files that are themselves contained within a jar). This can be problematic if you need to distribute a self-contained application that can be run from the command line without unpacking.</source>
          <target state="translated">Java并没有提供任何标准的方法来加载嵌套的jar文件(即本身包含在jar中的jar文件)。如果你需要发布一个不需要解压就可以从命令行运行的独立应用程序,这可能会有问题。</target>
        </trans-unit>
        <trans-unit id="4c5def929cabac7943a10b810d1015ebaa82b630" translate="yes" xml:space="preserve">
          <source>Java&amp;rsquo;s &lt;code&gt;javax.sql.DataSource&lt;/code&gt; interface provides a standard method of working with database connections. Traditionally, a 'DataSource' uses a &lt;code&gt;URL&lt;/code&gt; along with some credentials to establish a database connection.</source>
          <target state="translated">Java的 &lt;code&gt;javax.sql.DataSource&lt;/code&gt; 接口提供了使用数据库连接的标准方法。传统上，&amp;ldquo;数据源&amp;rdquo;使用 &lt;code&gt;URL&lt;/code&gt; 和一些凭据来建立数据库连接。</target>
        </trans-unit>
        <trans-unit id="6973cc3eadd1140cda4652fd46a015ddd879e09d" translate="yes" xml:space="preserve">
          <source>Jersey filter chain order.</source>
          <target state="translated">泽西滤链顺序。</target>
        </trans-unit>
        <trans-unit id="739a8cce0a10f9aee0caa5bfc5179ade31dda0b6" translate="yes" xml:space="preserve">
          <source>Jersey integration type.</source>
          <target state="translated">泽西岛一体化类型。</target>
        </trans-unit>
        <trans-unit id="49a77d1c37c6437cd04b5aa7fdd6451e74487832" translate="yes" xml:space="preserve">
          <source>Jersey&amp;rsquo;s support for scanning executable archives is rather limited. For example, it cannot scan for endpoints in a package found in a &lt;a href=&quot;deployment#deployment-install&quot;&gt;fully executable jar file&lt;/a&gt; or in &lt;code&gt;WEB-INF/classes&lt;/code&gt; when running an executable war file. To avoid this limitation, the &lt;code&gt;packages&lt;/code&gt; method should not be used, and endpoints should be registered individually by using the &lt;code&gt;register&lt;/code&gt; method, as shown in the preceding example.</source>
          <target state="translated">泽西岛对扫描可执行归档文件的支持非常有限。例如，在运行可执行的war文件时，它无法扫描在&lt;a href=&quot;deployment#deployment-install&quot;&gt;完全可执行的jar文件&lt;/a&gt;或 &lt;code&gt;WEB-INF/classes&lt;/code&gt; classs中找到的包中的端点。为了避免这种限制，不应该使用 &lt;code&gt;packages&lt;/code&gt; 方法，并且应该使用 &lt;code&gt;register&lt;/code&gt; 方法分别注册端点，如前面的示例所示。</target>
        </trans-unit>
        <trans-unit id="5daa7eda8bf46d2be010ec245e1f86944d0a4f8f" translate="yes" xml:space="preserve">
          <source>Jetty</source>
          <target state="translated">Jetty</target>
        </trans-unit>
        <trans-unit id="37ace646175c1dc6e750bd7ab0784beb4126921c" translate="yes" xml:space="preserve">
          <source>Jetty 9.4</source>
          <target state="translated">Jetty 9.4</target>
        </trans-unit>
        <trans-unit id="5c3a3e06977cb1daed9284e256ee904c170aee3b" translate="yes" xml:space="preserve">
          <source>Job identifier for this application instance.</source>
          <target state="translated">该应用实例的作业标识符。</target>
        </trans-unit>
        <trans-unit id="10dad544cbc310e2188c588a023cf65831924bc6" translate="yes" xml:space="preserve">
          <source>Jobs can define setters to inject data map properties. Regular beans can also be injected in a similar manner, as shown in the following example:</source>
          <target state="translated">作业可以定义setter来注入数据映射属性。常规豆也可以以类似的方式注入,如下例所示。</target>
        </trans-unit>
        <trans-unit id="5f0369017e1392c0a4b6689605ad20bd244753f4" translate="yes" xml:space="preserve">
          <source>Jolokia has a number of settings that you would traditionally configure by setting servlet parameters. With Spring Boot, you can use your &lt;code&gt;application.properties&lt;/code&gt; file. To do so, prefix the parameter with &lt;code&gt;management.endpoint.jolokia.config.&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">Jolokia具有许多设置，这些设置通常是通过设置servlet参数进行配置的。通过Spring Boot，您可以使用 &lt;code&gt;application.properties&lt;/code&gt; 文件。为此，请在参数前添加 &lt;code&gt;management.endpoint.jolokia.config.&lt;/code&gt; ，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="7e0a66e0de0df5673b953babfcf26e022ca521c3" translate="yes" xml:space="preserve">
          <source>Jolokia is a JMX-HTTP bridge that provides an alternative method of accessing JMX beans. To use Jolokia, include a dependency to &lt;code&gt;org.jolokia:jolokia-core&lt;/code&gt;. For example, with Maven, you would add the following dependency:</source>
          <target state="translated">Jolokia是一个JMX-HTTP桥，它提供了一种访问JMX Bean的替代方法。要使用Jolokia，请包括对 &lt;code&gt;org.jolokia:jolokia-core&lt;/code&gt; 的依赖。例如，使用Maven，您将添加以下依赖项：</target>
        </trans-unit>
        <trans-unit id="d1c9f87c011ebb2b02fe168b1af0adb7ca1493ee" translate="yes" xml:space="preserve">
          <source>Jolokia settings. Refer to the documentation of Jolokia for more details.</source>
          <target state="translated">Jolokia的设置。更多细节请参考Jolokia的文档。</target>
        </trans-unit>
        <trans-unit id="5a631805ef8081179baa29880cb7a06166b4a517" translate="yes" xml:space="preserve">
          <source>Journal file directory. Not necessary if persistence is turned off.</source>
          <target state="translated">日志文件目录。如果关闭了持久性,则不需要。</target>
        </trans-unit>
        <trans-unit id="0e08bcb558474ee100a8066b69b6422c8b7663e9" translate="yes" xml:space="preserve">
          <source>Kafka configuration is controlled by external configuration properties in &lt;code&gt;spring.kafka.*&lt;/code&gt;. For example, you might declare the following section in &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="translated">Kafka配置由 &lt;code&gt;spring.kafka.*&lt;/code&gt; 外部配置属性控制。例如，您可以在 &lt;code&gt;application.properties&lt;/code&gt; 中声明以下部分：</target>
        </trans-unit>
        <trans-unit id="cefc35ab781fd2fe287498f1c176a010c71d4f2a" translate="yes" xml:space="preserve">
          <source>Kafka consumer and producer metrics</source>
          <target state="translated">Kafka消费者和生产者指标</target>
        </trans-unit>
        <trans-unit id="9d9e32baf5a2bf8b3928155a8a4ead2b94cf4195" translate="yes" xml:space="preserve">
          <source>Kafka streams application.id property; default spring.application.name.</source>
          <target state="translated">Kafka流的application.id属性;默认为spring.application.name。</target>
        </trans-unit>
        <trans-unit id="46a4cb9aae221babe4927beb38610ad540748355" translate="yes" xml:space="preserve">
          <source>KairosDB</source>
          <target state="translated">KairosDB</target>
        </trans-unit>
        <trans-unit id="78caee9f18a6f8f0100da07e22cce1b35a5a3731" translate="yes" xml:space="preserve">
          <source>Kebab case, which is recommended for use in &lt;code&gt;.properties&lt;/code&gt; and &lt;code&gt;.yml&lt;/code&gt; files.</source>
          <target state="translated">Kebab大小写，建议在 &lt;code&gt;.properties&lt;/code&gt; 和 &lt;code&gt;.yml&lt;/code&gt; 文件中使用。</target>
        </trans-unit>
        <trans-unit id="b8b34802d798bc418bf19d24e3ce9216fcc415f8" translate="yes" xml:space="preserve">
          <source>Kerberos ticket for connecting to the database. Mutual exclusive with a given username.</source>
          <target state="translated">用于连接数据库的 Kerberos 票据。与给定的用户名相互排斥。</target>
        </trans-unit>
        <trans-unit id="c67dd20ee842986086a0a915ddc2a279490130ed" translate="yes" xml:space="preserve">
          <source>Key</source>
          <target state="translated">Key</target>
        </trans-unit>
        <trans-unit id="a8eeb9309d9648de77abc4af0238859b1cf4a09a" translate="yes" xml:space="preserve">
          <source>Key prefix.</source>
          <target state="translated">键前缀。</target>
        </trans-unit>
        <trans-unit id="b2c3bf93e5d2b05d4fb338f3f54f060861294e14" translate="yes" xml:space="preserve">
          <source>Key store type.</source>
          <target state="translated">钥匙库类型:</target>
        </trans-unit>
        <trans-unit id="3c87ff0800ee95293fab3503841f0b648309018f" translate="yes" xml:space="preserve">
          <source>Keys that should be sanitized. Keys can be simple strings that the property ends with or regular expressions.</source>
          <target state="translated">应该被净化的键。密钥可以是属性结尾的简单字符串或正则表达式。</target>
        </trans-unit>
        <trans-unit id="abc7a4d108d8e23708da2da1912008fa738433b0" translate="yes" xml:space="preserve">
          <source>Keyspace name to use.</source>
          <target state="translated">要使用的关键空间名称。</target>
        </trans-unit>
        <trans-unit id="22eeb075433d11105acbd32874039d75d4ee5cf5" translate="yes" xml:space="preserve">
          <source>Kotlin &lt;a href=&quot;https://kotlinlang.org/docs/reference/extensions.html&quot;&gt;extensions&lt;/a&gt; provide the ability to extend existing classes with additional functionality. The Spring Boot Kotlin API makes use of these extensions to add new Kotlin specific conveniences to existing APIs.</source>
          <target state="translated">Kotlin&lt;a href=&quot;https://kotlinlang.org/docs/reference/extensions.html&quot;&gt;扩展&lt;/a&gt;提供了使用其他功能扩展现有类的功能。Spring Boot Kotlin API利用这些扩展为现有的API添加了新的Kotlin特定的便利。</target>
        </trans-unit>
        <trans-unit id="f0434f58b8720cbd69d1034bb8e4434e2eb5492f" translate="yes" xml:space="preserve">
          <source>Kotlin blog</source>
          <target state="translated">Kotlin博客</target>
        </trans-unit>
        <trans-unit id="1e03395c3d6127542077eabc0b6c4ca31f032fb1" translate="yes" xml:space="preserve">
          <source>Kotlin language reference</source>
          <target state="translated">Kotlin语言参考</target>
        </trans-unit>
        <trans-unit id="5f94c71f202259a98d3f2d35e48a333cd7ecc8ac" translate="yes" xml:space="preserve">
          <source>Kubernetes checks the &quot;liveness&quot; Probe and restarts the application if it takes too long.</source>
          <target state="translated">Kubernetes会检查 &quot;活泼度 &quot;Probe,如果时间过长,就会重启应用。</target>
        </trans-unit>
        <trans-unit id="c83775a91cba568b84baf3ac42a318aefcf62da3" translate="yes" xml:space="preserve">
          <source>Kubernetes container lifecycle section</source>
          <target state="translated">Kubernetes容器生命周期部分</target>
        </trans-unit>
        <trans-unit id="d8343c683ae1584c96390fa627005bc1bb0719cd" translate="yes" xml:space="preserve">
          <source>LDAP</source>
          <target state="translated">LDAP</target>
        </trans-unit>
        <trans-unit id="8827bb5f51c1660f03fa78a26e0e13f7f6dc1c4b" translate="yes" xml:space="preserve">
          <source>LDAP URLs of the server.</source>
          <target state="translated">服务器的LDAP URL。</target>
        </trans-unit>
        <trans-unit id="0d9e191d69de1edb3b2e453c0e6c9090927439e8" translate="yes" xml:space="preserve">
          <source>LDAP abstractions are provided by &lt;a href=&quot;https://github.com/spring-projects/spring-data-ldap&quot;&gt;Spring Data LDAP&lt;/a&gt;. There is a &lt;code&gt;spring-boot-starter-data-ldap&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; for collecting the dependencies in a convenient way.</source>
          <target state="translated">LDAP抽象由&lt;a href=&quot;https://github.com/spring-projects/spring-data-ldap&quot;&gt;Spring Data LDAP提供&lt;/a&gt;。有一个 &lt;code&gt;spring-boot-starter-data-ldap&lt;/code&gt; &amp;ldquo; Starter&amp;rdquo;，以方便的方式收集依赖项。</target>
        </trans-unit>
        <trans-unit id="abce1d819e0c840f3d0194e6f5baa099f3d72a01" translate="yes" xml:space="preserve">
          <source>LDAP specification settings.</source>
          <target state="translated">LDAP规范设置。</target>
        </trans-unit>
        <trans-unit id="cc0e39416e6a0c03c6328668bf74b3b5ff2e02bb" translate="yes" xml:space="preserve">
          <source>Last updated 2020-11-12 14:03:20 UTC</source>
          <target state="translated">最后更新时间为2020-11-12 14:03:20 UTC。</target>
        </trans-unit>
        <trans-unit id="4dff625c9354d6f33dd88e51e7fb2c86e6778aa8" translate="yes" xml:space="preserve">
          <source>Lazy initialization can be enabled programmatically using the &lt;code&gt;lazyInitialization&lt;/code&gt; method on &lt;code&gt;SpringApplicationBuilder&lt;/code&gt; or the &lt;code&gt;setLazyInitialization&lt;/code&gt; method on &lt;code&gt;SpringApplication&lt;/code&gt;. Alternatively, it can be enabled using the &lt;code&gt;spring.main.lazy-initialization&lt;/code&gt; property as shown in the following example:</source>
          <target state="translated">延迟初始化可以以编程方式使用启用 &lt;code&gt;lazyInitialization&lt;/code&gt; 的方法 &lt;code&gt;SpringApplicationBuilder&lt;/code&gt; 或 &lt;code&gt;setLazyInitialization&lt;/code&gt; 的方法 &lt;code&gt;SpringApplication&lt;/code&gt; 。另外，可以使用 &lt;code&gt;spring.main.lazy-initialization&lt;/code&gt; 属性启用它，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="61581147768998c97619020d4a72a80500731544" translate="yes" xml:space="preserve">
          <source>Learn the Spring basics. Spring Boot builds on many other Spring projects. Check the &lt;a href=&quot;https://spring.io&quot;&gt;spring.io&lt;/a&gt; web-site for a wealth of reference documentation. If you are starting out with Spring, try one of the &lt;a href=&quot;https://spring.io/guides&quot;&gt;guides&lt;/a&gt;.</source>
          <target state="translated">了解Spring基础知识。Spring Boot建立在许多其他Spring项目上。在&lt;a href=&quot;https://spring.io&quot;&gt;spring.io&lt;/a&gt;网站上查看大量参考文档。如果您是从Spring开始的，请尝试其中的&lt;a href=&quot;https://spring.io/guides&quot;&gt;指南之一&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e68585189b3ee48c6bbc054a3e4583fec15765bc" translate="yes" xml:space="preserve">
          <source>Left hand image margin in chars.</source>
          <target state="translated">左手图像边距,单位为字符。</target>
        </trans-unit>
        <trans-unit id="902c91d94e0fd512d0a7f41cf7f018ee6f01bf85" translate="yes" xml:space="preserve">
          <source>Legal</source>
          <target state="translated">Legal</target>
        </trans-unit>
        <trans-unit id="46f114c54a50444dec8f74a288228a278976e28c" translate="yes" xml:space="preserve">
          <source>Legal information.</source>
          <target state="translated">法律信息:</target>
        </trans-unit>
        <trans-unit id="bd1911cd34957db0fd8dbdbf8e8533ed5d7870ef" translate="yes" xml:space="preserve">
          <source>Length of time an HTTP connection may remain idle before it is closed and removed from the pool.</source>
          <target state="translated">一个HTTP连接在被关闭和从池中移除之前可能保持空闲的时间长度。</target>
        </trans-unit>
        <trans-unit id="a7a49f357b8ac74d1c48a0111c54e41afe6a32a2" translate="yes" xml:space="preserve">
          <source>Lets the application be gracefully shutdown. Disabled by default.</source>
          <target state="translated">让应用程序优雅地关闭。默认情况下已禁用。</target>
        </trans-unit>
        <trans-unit id="7c7f5d049fad2569721d446c4a811f9bd5da5393" translate="yes" xml:space="preserve">
          <source>Level</source>
          <target state="translated">Level</target>
        </trans-unit>
        <trans-unit id="b8100f5ba8bd048a7cf11d116fbbd73130c3c6f5" translate="yes" xml:space="preserve">
          <source>Library</source>
          <target state="translated">Library</target>
        </trans-unit>
        <trans-unit id="ec620d2e65e032b1b60988e5692e9decf5da874b" translate="yes" xml:space="preserve">
          <source>Licence key for Flyway Teams.</source>
          <target state="translated">Flyway Teams的许可证密钥。</target>
        </trans-unit>
        <trans-unit id="60f604112e4e010df3ef5350c14e50d905767573" translate="yes" xml:space="preserve">
          <source>Like a war file, a Spring Boot application is not intended to be used as a dependency. If your application contains classes that you want to share with other projects, the recommended approach is to move that code into a separate module. The separate module can then be depended upon by your application and other projects.</source>
          <target state="translated">与 war 文件一样,Spring Boot 应用程序不打算作为依赖关系使用。如果您的应用程序包含您想与其他项目共享的类,推荐的方法是将该代码移到一个单独的模块中。然后,您的应用程序和其他项目可以依赖这个单独的模块。</target>
        </trans-unit>
        <trans-unit id="0ae604c86372ce37fdac4150739ac68ed0ab1c9e" translate="yes" xml:space="preserve">
          <source>Like any other Spring bean, you can define the order of Servlet filter beans; please make sure to check the &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-embedded-container-servlets-filters-listeners-beans&quot;&gt;spring-boot-features.html&lt;/a&gt;&amp;rdquo; section.</source>
          <target state="translated">像其他任何Spring bean一样，您可以定义Servlet过滤器bean的顺序。请确保检查&amp;ldquo; &lt;a href=&quot;spring-boot-features#boot-features-embedded-container-servlets-filters-listeners-beans&quot;&gt;spring-boot-features.html&lt;/a&gt; &amp;rdquo;部分。</target>
        </trans-unit>
        <trans-unit id="2633835bf19d7d476cb820842f4a1591174dfc54" translate="yes" xml:space="preserve">
          <source>Likewise, YAML lists also need to be flattened. They are represented as property keys with &lt;code&gt;[index]&lt;/code&gt; dereferencers. For example, consider the following YAML:</source>
          <target state="translated">同样，YAML列表也需要进行展平。它们用 &lt;code&gt;[index]&lt;/code&gt; 解引用器表示为属性键。例如，考虑以下YAML：</target>
        </trans-unit>
        <trans-unit id="8c4eedcf35c53796bb39b4138b327e88a0c74b59" translate="yes" xml:space="preserve">
          <source>Limit on the number of bytes that can be buffered whenever the input stream needs to be aggregated.</source>
          <target state="translated">每当输入流需要聚合时,可以缓冲的字节数限制。</target>
        </trans-unit>
        <trans-unit id="626a2fdf03e3cfadb530ea024b1d99cf88820efe" translate="yes" xml:space="preserve">
          <source>Limit on the number of bytes that can be buffered whenever the input stream needs to be aggregated. This applies only to the auto-configured WebFlux server and WebClient instances. By default this is not set, in which case individual codec defaults apply. Most codecs are limited to 256K by default.</source>
          <target state="translated">每当需要聚合输入流时,可以缓冲的字节数的限制。这仅适用于自动配置的WebFlux服务器和WebClient实例。默认情况下,该选项未被设置,在这种情况下,适用于各个编解码器的默认值。大多数编解码器默认限制为256K。</target>
        </trans-unit>
        <trans-unit id="8347abdde0d300a5a47f31343483c66472a08fe2" translate="yes" xml:space="preserve">
          <source>Limited (see &lt;a href=&quot;#boot-features-external-config-vs-value-note&quot;&gt;note below&lt;/a&gt;)</source>
          <target state="translated">受限（请参阅&lt;a href=&quot;#boot-features-external-config-vs-value-note&quot;&gt;下面的注释&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="014bcd654c60d5250fad2123b073b9c0ac3340f6" translate="yes" xml:space="preserve">
          <source>Links</source>
          <target state="translated">Links</target>
        </trans-unit>
        <trans-unit id="c89ad4626db1429d0b5f7eae22d9ba8610081129" translate="yes" xml:space="preserve">
          <source>Links to resources are rewritten in templates at runtime, thanks to a &lt;code&gt;ResourceUrlEncodingFilter&lt;/code&gt; that is auto-configured for Thymeleaf and FreeMarker. You should manually declare this filter when using JSPs. Other template engines are currently not automatically supported but can be with custom template macros/helpers and the use of the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/web/servlet/resource/ResourceUrlProvider.html&quot;&gt;&lt;code&gt;ResourceUrlProvider&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">借助为Thymeleaf和FreeMarker自动配置的 &lt;code&gt;ResourceUrlEncodingFilter&lt;/code&gt; ，可以在运行时在模板中重写资源链接。使用JSP时，您应该手动声明此过滤器。当前不自动支持其他模板引擎，但可以与自定义模板宏/帮助器一起使用，以及使用&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/web/servlet/resource/ResourceUrlProvider.html&quot;&gt; &lt;code&gt;ResourceUrlProvider&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a1fffaaafb7cc996685bceb829c053cc4f7de43d" translate="yes" xml:space="preserve">
          <source>List</source>
          <target state="translated">List</target>
        </trans-unit>
        <trans-unit id="e01c913d60f7659d57809ea69cbae3e6b97b4da3" translate="yes" xml:space="preserve">
          <source>List of base DNs.</source>
          <target state="translated">基础DN清单;</target>
        </trans-unit>
        <trans-unit id="ab5de2ea399eeda6f180a271c58772a94bc0d9c7" translate="yes" xml:space="preserve">
          <source>Listener AckMode. See the spring-kafka documentation.</source>
          <target state="translated">Listener AckMode。参见spring-kafka文档。</target>
        </trans-unit>
        <trans-unit id="8f014b37a7e29692a624a762cc2c03afaa9dbe39" translate="yes" xml:space="preserve">
          <source>Listener container type.</source>
          <target state="translated">监听器容器类型。</target>
        </trans-unit>
        <trans-unit id="448da65f8d0a5e6e3586a213158b2ae3888b1ce4" translate="yes" xml:space="preserve">
          <source>Listener type.</source>
          <target state="translated">倾听者类型:</target>
        </trans-unit>
        <trans-unit id="01db52eb94b40073d1b9965c727f93e182fcb48d" translate="yes" xml:space="preserve">
          <source>Liveness State</source>
          <target state="translated">寿命国</target>
        </trans-unit>
        <trans-unit id="5683feef7f5886b7d6629979e3e5987efc5884a0" translate="yes" xml:space="preserve">
          <source>Load on startup priority of the Jersey servlet.</source>
          <target state="translated">加载在Jersey servlet的启动优先级上。</target>
        </trans-unit>
        <trans-unit id="4c94291b90b8dcaa764059a3c15db3c816f0fea2" translate="yes" xml:space="preserve">
          <source>Load on startup priority of the Spring Web Services servlet.</source>
          <target state="translated">对Spring Web服务servlet的启动优先级进行加载。</target>
        </trans-unit>
        <trans-unit id="c45e5cc0bcb0ba13b5c12398b7298c6e0b3642e6" translate="yes" xml:space="preserve">
          <source>Load on startup priority of the dispatcher servlet.</source>
          <target state="translated">在调度器servlet的启动优先级上加载。</target>
        </trans-unit>
        <trans-unit id="22913b878ebd8a5b484ad6df6e2b571e099067e5" translate="yes" xml:space="preserve">
          <source>Loaded resource bundle files cache duration. When not set, bundles are cached forever. If a duration suffix is not specified, seconds will be used.</source>
          <target state="translated">加载的资源捆绑文件缓存时间。未设置时,捆绑文件将被永远缓存。如果没有指定持续时间的后缀,将使用秒。</target>
        </trans-unit>
        <trans-unit id="7f810c488bdaa9656ac9f4d6f07cb7dfc373b621" translate="yes" xml:space="preserve">
          <source>Locale to use. By default, this locale is overridden by the &quot;Accept-Language&quot; header.</source>
          <target state="translated">要使用的语言环境。默认情况下,这个locale会被 &quot;Accept-Language &quot;头覆盖。</target>
        </trans-unit>
        <trans-unit id="101b4d744881234d6ac7d9f9954d089f708f4436" translate="yes" xml:space="preserve">
          <source>Locale used for formatting.</source>
          <target state="translated">用于格式化的地域。</target>
        </trans-unit>
        <trans-unit id="ea7021bbb56c07464b34d635e8551af83e1325a1" translate="yes" xml:space="preserve">
          <source>Locale used to format timestamps in log entries and in log file name suffix. Default to the default locale of the Java process.</source>
          <target state="translated">用于在日志条目和日志文件名后缀中格式化时间戳的地域。默认为Java进程的默认locale。</target>
        </trans-unit>
        <trans-unit id="2036170627ec29fc62e5fa8426bf6addcefb3eb5" translate="yes" xml:space="preserve">
          <source>Location of the PID file to write (if ApplicationPidFileWriter is used).</source>
          <target state="translated">要写入的PID文件的位置(如果使用ApplicationPidFileWriter)。</target>
        </trans-unit>
        <trans-unit id="d9ce7d081fcfaba3eb4c51d9fb109b21ae3e7209" translate="yes" xml:space="preserve">
          <source>Location of the file containing the public key used to verify a JWT.</source>
          <target state="translated">包含用于验证JWT的公钥的文件位置。</target>
        </trans-unit>
        <trans-unit id="048a5f7d9447e98068979bde7e6d2d1db655dac5" translate="yes" xml:space="preserve">
          <source>Location of the generated build-info.properties file.</source>
          <target state="translated">生成的 build-info.properties 文件的位置。</target>
        </trans-unit>
        <trans-unit id="90bdc36b87c41168c86546ef00804482d51ab7e3" translate="yes" xml:space="preserve">
          <source>Location of the generated git.properties file.</source>
          <target state="translated">生成的git.properties文件的位置。</target>
        </trans-unit>
        <trans-unit id="685406051b763a9f998bb74e576128c5dce467a4" translate="yes" xml:space="preserve">
          <source>Location of the key store file.</source>
          <target state="translated">钥匙存储文件的位置。</target>
        </trans-unit>
        <trans-unit id="3a7dc54a5afd7cc0d0a4eeee4b59eb8cb3f99350" translate="yes" xml:space="preserve">
          <source>Location of the log file. For instance, `/var/log`.</source>
          <target state="translated">日志文件的位置。例如,`/var/log`。</target>
        </trans-unit>
        <trans-unit id="b90c895b67d3157f991e1daff4ac50c21711246e" translate="yes" xml:space="preserve">
          <source>Location of the logging configuration file. For instance, `classpath:logback.xml` for Logback.</source>
          <target state="translated">日志配置文件的位置。例如,&quot;classpath:logback.xml &quot;代表Logback。</target>
        </trans-unit>
        <trans-unit id="43c6cffba4f700a83b65fd8c0ca2ed2132810bdd" translate="yes" xml:space="preserve">
          <source>Location of the trust store file.</source>
          <target state="translated">信任存储文件的位置。</target>
        </trans-unit>
        <trans-unit id="35b427926d0bc229302875d1bde1daaa8cc6b1fb" translate="yes" xml:space="preserve">
          <source>Locations configured by using &lt;code&gt;spring.config.location&lt;/code&gt; replace the default locations. For example, if &lt;code&gt;spring.config.location&lt;/code&gt; is configured with the value &lt;code&gt;optional:classpath:/custom-config/,optional:file:./custom-config/&lt;/code&gt;, the complete set of locations considered is:</source>
          <target state="translated">使用 &lt;code&gt;spring.config.location&lt;/code&gt; 配置的位置将替换默认位置。例如，如果 &lt;code&gt;spring.config.location&lt;/code&gt; 配置为值 &lt;code&gt;optional:classpath:/custom-config/,optional:file:./custom-config/&lt;/code&gt; /，optional：file：./ custom-config /，则考虑的位置的完整集合为：</target>
        </trans-unit>
        <trans-unit id="b7768888b7001a05cc50328acf608cd136a8febb" translate="yes" xml:space="preserve">
          <source>Locations of migrations scripts. Can contain the special &quot;{vendor}&quot; placeholder to use vendor-specific locations.</source>
          <target state="translated">迁移脚本的位置。可以包含特殊的&quot;{vendor}&quot;占位符,以使用特定供应商的位置。</target>
        </trans-unit>
        <trans-unit id="795778d2ca881c03272f6857141a7a7006ba1ac4" translate="yes" xml:space="preserve">
          <source>Locations of static resources. Defaults to classpath:[/META-INF/resources/, /resources/, /static/, /public/].</source>
          <target state="translated">静态资源的位置。默认为classpath:[/META-INF/resources/,/resources/,/static/,/public/]。</target>
        </trans-unit>
        <trans-unit id="49145269289b8db9036414f14c45a5ed2f647cf0" translate="yes" xml:space="preserve">
          <source>Log Level: &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;WARN&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;DEBUG&lt;/code&gt;, or &lt;code&gt;TRACE&lt;/code&gt;.</source>
          <target state="translated">日志级别： &lt;code&gt;ERROR&lt;/code&gt; ， &lt;code&gt;WARN&lt;/code&gt; ， &lt;code&gt;INFO&lt;/code&gt; ， &lt;code&gt;DEBUG&lt;/code&gt; 或 &lt;code&gt;TRACE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d2adc65e4c55a29e5fa25bc9569bc47ae8edee64" translate="yes" xml:space="preserve">
          <source>Log file name (for instance, `myapp.log`). Names can be an exact location or relative to the current directory.</source>
          <target state="translated">日志文件名(例如,`myapp.log`)。名称可以是确切的位置,也可以是当前目录的相对位置。</target>
        </trans-unit>
        <trans-unit id="3d3cc2442abccea0b12aeca0d246bf5b26d02a55" translate="yes" xml:space="preserve">
          <source>Log file name prefix.</source>
          <target state="translated">日志文件名前缀。</target>
        </trans-unit>
        <trans-unit id="46ff4960e0b1f858c22e5fddcfdb9017803de74c" translate="yes" xml:space="preserve">
          <source>Log file name suffix.</source>
          <target state="translated">日志文件名后缀。</target>
        </trans-unit>
        <trans-unit id="6437f18ed77e2484d5191325865274f68ad9c218" translate="yes" xml:space="preserve">
          <source>Log filename. If not specified, logs redirect to &quot;System.err&quot;.</source>
          <target state="translated">日志文件名。如果没有指定,日志会重定向到 &quot;System.err&quot;。</target>
        </trans-unit>
        <trans-unit id="4c29ebfcf417fb49a745b6fb53eed4c5b57d04ac" translate="yes" xml:space="preserve">
          <source>Log files rotate when they reach 10 MB and, as with console output, &lt;code&gt;ERROR&lt;/code&gt;-level, &lt;code&gt;WARN&lt;/code&gt;-level, and &lt;code&gt;INFO&lt;/code&gt;-level messages are logged by default.</source>
          <target state="translated">日志文件达到10 MB时会旋转，并且与控制台输出一样，默认情况下会记录 &lt;code&gt;ERROR&lt;/code&gt; 级别， &lt;code&gt;WARN&lt;/code&gt; 级别和 &lt;code&gt;INFO&lt;/code&gt; 级别的消息。</target>
        </trans-unit>
        <trans-unit id="d8cf6d63639f4dead6c02ef14e462cfc1b89cedf" translate="yes" xml:space="preserve">
          <source>Log format.</source>
          <target state="translated">日志格式:</target>
        </trans-unit>
        <trans-unit id="9583b91d1b5165d1e9d25a7c5c816addbb79ad13" translate="yes" xml:space="preserve">
          <source>Log groups to quickly change multiple loggers at the same time. For instance, `logging.group.db=org.hibernate,org.springframework.jdbc`.</source>
          <target state="translated">日志组可以同时快速更换多个记录器。例如,`logging.group.db=org.hibernate,org.springframework.jdbc`。</target>
        </trans-unit>
        <trans-unit id="684e57a43d8299e8944fe36e3e7068ecdb401051" translate="yes" xml:space="preserve">
          <source>Log levels severity mapping. For instance, `logging.level.org.springframework=DEBUG`.</source>
          <target state="translated">日志等级严重性映射。例如,`logging.level.org.springframework=DEBUG`。</target>
        </trans-unit>
        <trans-unit id="544daab255c20340d662098dae251dfac501fa6d" translate="yes" xml:space="preserve">
          <source>Log4j 2</source>
          <target state="translated">Log4j 2</target>
        </trans-unit>
        <trans-unit id="88ada725afc8dd4642c7e7e3bb5b0ffed120c446" translate="yes" xml:space="preserve">
          <source>Log4j2</source>
          <target state="translated">Log4j2</target>
        </trans-unit>
        <trans-unit id="84174f5c82cdc9d4ff3517596e2df727c4bb3b2c" translate="yes" xml:space="preserve">
          <source>Log4j2 metrics: record the number of events logged to Log4j2 at each level</source>
          <target state="translated">Log4j2指标:记录每一级记录到Log4j2的事件数量。</target>
        </trans-unit>
        <trans-unit id="401aeb95ae4ca2286cd4c14b3acc969627d56983" translate="yes" xml:space="preserve">
          <source>Logback</source>
          <target state="translated">Logback</target>
        </trans-unit>
        <trans-unit id="d2526bae6cb6a0e519d5a575044fdf47b91b9b54" translate="yes" xml:space="preserve">
          <source>Logback does not have a &lt;code&gt;FATAL&lt;/code&gt; level. It is mapped to &lt;code&gt;ERROR&lt;/code&gt;.</source>
          <target state="translated">登录没有 &lt;code&gt;FATAL&lt;/code&gt; 级别。它映射到 &lt;code&gt;ERROR&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a106e8b629409b5011e235a1db9f1f179787213a" translate="yes" xml:space="preserve">
          <source>Logback metrics: record the number of events logged to Logback at each level</source>
          <target state="translated">回溯日志指标:记录每一级记录到回溯日志的事件数量。</target>
        </trans-unit>
        <trans-unit id="efd11dcd43f64c3ef921cfec39de7ff7808f35f2" translate="yes" xml:space="preserve">
          <source>Logger name: This is usually the source class name (often abbreviated).</source>
          <target state="translated">记录仪名称:这通常是源类名称(通常是缩写)。</target>
        </trans-unit>
        <trans-unit id="012294fbc07fc652fdbbd3b8b48183b6e7925dda" translate="yes" xml:space="preserve">
          <source>Loggers</source>
          <target state="translated">Loggers</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">Logging</target>
        </trans-unit>
        <trans-unit id="d8bb180147faeb75ef1a8c5b7e2422dfa8fd7db0" translate="yes" xml:space="preserve">
          <source>Logging System</source>
          <target state="translated">记录系统</target>
        </trans-unit>
        <trans-unit id="36ba947f561a5e0b38a2886a7b161fa35b8f5e2d" translate="yes" xml:space="preserve">
          <source>Logging properties are independent of the actual logging infrastructure. As a result, specific configuration keys (such as &lt;code&gt;logback.configurationFile&lt;/code&gt; for Logback) are not managed by spring Boot.</source>
          <target state="translated">日志记录属性与实际的日志记录基础结构无关。结果，Spring Boot不会管理特定的配置密钥（例如 &lt;code&gt;logback.configurationFile&lt;/code&gt; 的logback.configurationFile）。</target>
        </trans-unit>
        <trans-unit id="52c9688b9fb7a10dade4b6c05a349ae6d3ec738e" translate="yes" xml:space="preserve">
          <source>Login module.</source>
          <target state="translated">登录模块。</target>
        </trans-unit>
        <trans-unit id="7c6cadbc6a3e119fd73921f4ed85e8611a8a078c" translate="yes" xml:space="preserve">
          <source>Login password of the Elastic server.</source>
          <target state="translated">Elastic服务器的登录密码。</target>
        </trans-unit>
        <trans-unit id="35d634c0eccc58a58c0b54a9f8d35ec0d7d85637" translate="yes" xml:space="preserve">
          <source>Login password of the Influx server.</source>
          <target state="translated">Influx服务器的登录密码。</target>
        </trans-unit>
        <trans-unit id="c40cd6971e11c563a0e71cf4bda8251a9f8c77ed" translate="yes" xml:space="preserve">
          <source>Login password of the KairosDB server.</source>
          <target state="translated">KairosDB服务器的登录密码。</target>
        </trans-unit>
        <trans-unit id="f1cab86ad2a18a0bac2cc6fd4e722582b7213d9a" translate="yes" xml:space="preserve">
          <source>Login password of the Prometheus Pushgateway.</source>
          <target state="translated">普罗米修斯推送网关的登录密码。</target>
        </trans-unit>
        <trans-unit id="24caabbbbddc1dbbe2cef6df24d410e2f15c7351" translate="yes" xml:space="preserve">
          <source>Login password of the SMTP server.</source>
          <target state="translated">SMTP服务器的登录密码。</target>
        </trans-unit>
        <trans-unit id="5f8a266aadf009e2e33391c11b1780ce6db01cb6" translate="yes" xml:space="preserve">
          <source>Login password of the broker.</source>
          <target state="translated">经纪人的登录密码。</target>
        </trans-unit>
        <trans-unit id="5807bc71b893f7406d2d969b11111e2f617df5b5" translate="yes" xml:space="preserve">
          <source>Login password of the database to migrate.</source>
          <target state="translated">要迁移的数据库的登录密码。</target>
        </trans-unit>
        <trans-unit id="bbccee4e754ffbdff631ecf3a4198a7d29d00c4e" translate="yes" xml:space="preserve">
          <source>Login password of the database.</source>
          <target state="translated">数据库的登录密码。</target>
        </trans-unit>
        <trans-unit id="5d0bc25cd3fe8dd8f6b00e75a8fbf8f14f44f9e1" translate="yes" xml:space="preserve">
          <source>Login password of the database. Set if no password is specified in the url.</source>
          <target state="translated">数据库的登录密码。如果在url中没有指定密码,则设置。</target>
        </trans-unit>
        <trans-unit id="b167708f482f37b065ec9a9abcdd1a70c1155a33" translate="yes" xml:space="preserve">
          <source>Login password of the mongo server. Cannot be set with URI.</source>
          <target state="translated">mongo服务器的登录密码。不能用URI设置。</target>
        </trans-unit>
        <trans-unit id="0199894772870073d9c31b19d882925c006f9adf" translate="yes" xml:space="preserve">
          <source>Login password of the redis server.</source>
          <target state="translated">Redis服务器的登录密码。</target>
        </trans-unit>
        <trans-unit id="0635be091b6113c14562758f92980adf59e5c6d0" translate="yes" xml:space="preserve">
          <source>Login password of the server.</source>
          <target state="translated">服务器的登录密码。</target>
        </trans-unit>
        <trans-unit id="514a2157a7e8465337910ba3ba7f62932bfd45b0" translate="yes" xml:space="preserve">
          <source>Login password.</source>
          <target state="translated">登录密码。</target>
        </trans-unit>
        <trans-unit id="912b6683ab143855d5e466f7217690128db71893" translate="yes" xml:space="preserve">
          <source>Login to authenticate against the broker.</source>
          <target state="translated">登录对经纪人进行认证。</target>
        </trans-unit>
        <trans-unit id="5e695365788c57d8db014e57a479f3907e61aad9" translate="yes" xml:space="preserve">
          <source>Login user of the Elastic server.</source>
          <target state="translated">Elastic服务器的登录用户。</target>
        </trans-unit>
        <trans-unit id="f1c7b0d4a4fc23c2f1f19d09c5332ffce04f847f" translate="yes" xml:space="preserve">
          <source>Login user of the Influx server.</source>
          <target state="translated">Influx服务器的登录用户。</target>
        </trans-unit>
        <trans-unit id="3179d5d196c40b9fb318a55b2d4538f7ecd8f2b2" translate="yes" xml:space="preserve">
          <source>Login user of the KairosDB server.</source>
          <target state="translated">KairosDB服务器的登录用户。</target>
        </trans-unit>
        <trans-unit id="df0305eaec50f8d7b322db6e09cbe71a7a11b0a6" translate="yes" xml:space="preserve">
          <source>Login user of the Prometheus Pushgateway.</source>
          <target state="translated">Prometheus Pushgateway的登录用户。</target>
        </trans-unit>
        <trans-unit id="79da4c8f111f76e01f1e850155fa58278e01dce1" translate="yes" xml:space="preserve">
          <source>Login user of the SMTP server.</source>
          <target state="translated">SMTP服务器的登录用户。</target>
        </trans-unit>
        <trans-unit id="fdb07e078d16b7a464cfefc005d1ed4c0ba1d9b2" translate="yes" xml:space="preserve">
          <source>Login user of the broker.</source>
          <target state="translated">经纪人的登录用户。</target>
        </trans-unit>
        <trans-unit id="c5a7d1a21a4a1367e31b57ce8d2c79d937a98b72" translate="yes" xml:space="preserve">
          <source>Login user of the database to migrate.</source>
          <target state="translated">要迁移的数据库的登录用户。</target>
        </trans-unit>
        <trans-unit id="5c81c488ee23cf89c7f9db28eb9a6e16c5881649" translate="yes" xml:space="preserve">
          <source>Login user of the mongo server. Cannot be set with URI.</source>
          <target state="translated">mongo服务器的登录用户。不能用URI设置。</target>
        </trans-unit>
        <trans-unit id="16e7e896f7cc31c9a08742ec4f3a3de0389f42f1" translate="yes" xml:space="preserve">
          <source>Login user of the server.</source>
          <target state="translated">服务器的登录用户。</target>
        </trans-unit>
        <trans-unit id="e11e8bad6f38e23a986da3e76798c8bb93ba8ead" translate="yes" xml:space="preserve">
          <source>Login user to authenticate to the broker.</source>
          <target state="translated">登录用户来验证经纪人的身份。</target>
        </trans-unit>
        <trans-unit id="8dc993648704c5136ace77a2e6aaa80fd7d13be9" translate="yes" xml:space="preserve">
          <source>Login user.</source>
          <target state="translated">登录用户。</target>
        </trans-unit>
        <trans-unit id="010a87e707090c6ed2e266bc9c8fef1b49317fb9" translate="yes" xml:space="preserve">
          <source>Login username of the database.</source>
          <target state="translated">数据库的登录用户名。</target>
        </trans-unit>
        <trans-unit id="729aa582a20f68c2cc9728f39a80668bc52dee2d" translate="yes" xml:space="preserve">
          <source>Login username of the database. Set if no username is specified in the url.</source>
          <target state="translated">数据库的登录用户名。如果在url中没有指定用户名,则设置。</target>
        </trans-unit>
        <trans-unit id="85f2281244cb635a0da40016e74bac10159c636e" translate="yes" xml:space="preserve">
          <source>Login username of the redis server.</source>
          <target state="translated">Redis服务器的登录用户名。</target>
        </trans-unit>
        <trans-unit id="5fa79866948276956f094701af7f786dad9ac13f" translate="yes" xml:space="preserve">
          <source>Login username of the server.</source>
          <target state="translated">服务器的登录用户名。</target>
        </trans-unit>
        <trans-unit id="59dfafb6237b0df27b7e90106db3404797ae0653" translate="yes" xml:space="preserve">
          <source>Logs are stored in a &lt;code&gt;logs&lt;/code&gt; directory relative to the working directory of the application. You can customize this location by setting the &lt;code&gt;server.undertow.accesslog.dir&lt;/code&gt; property.</source>
          <target state="translated">日志存储在相对于应用程序工作目录的 &lt;code&gt;logs&lt;/code&gt; 目录中。您可以通过设置 &lt;code&gt;server.undertow.accesslog.dir&lt;/code&gt; 属性来自定义此位置。</target>
        </trans-unit>
        <trans-unit id="9d86968ae39f0a9c1625137fdaa19451d92a542d" translate="yes" xml:space="preserve">
          <source>Look for &lt;code&gt;@ConditionalOnExpression&lt;/code&gt; annotations that switch features on and off in response to SpEL expressions, normally evaluated with placeholders resolved from the &lt;code&gt;Environment&lt;/code&gt;.</source>
          <target state="translated">寻找 &lt;code&gt;@ConditionalOnExpression&lt;/code&gt; 批注，以响应SpEL表达式来打开和关闭功能，通常使用从 &lt;code&gt;Environment&lt;/code&gt; 解析的占位符来对其进行评估。</target>
        </trans-unit>
        <trans-unit id="5284c3bb4225d5568c57063d0003ce57e9f972fd" translate="yes" xml:space="preserve">
          <source>Look for &lt;code&gt;@Value&lt;/code&gt; annotations that bind directly to the &lt;code&gt;Environment&lt;/code&gt;.</source>
          <target state="translated">查找直接绑定到 &lt;code&gt;Environment&lt;/code&gt; 的 &lt;code&gt;@Value&lt;/code&gt; 批注。</target>
        </trans-unit>
        <trans-unit id="c768d5be22e4018db650f0a14480796ff107e1d6" translate="yes" xml:space="preserve">
          <source>Look for classes called &lt;code&gt;*AutoConfiguration&lt;/code&gt; and read their sources. Pay special attention to the &lt;code&gt;@Conditional*&lt;/code&gt; annotations to find out what features they enable and when. Add &lt;code&gt;--debug&lt;/code&gt; to the command line or a System property &lt;code&gt;-Ddebug&lt;/code&gt; to get a log on the console of all the auto-configuration decisions that were made in your app. In a running application with actuator enabled, look at the &lt;code&gt;conditions&lt;/code&gt; endpoint (&lt;code&gt;/actuator/conditions&lt;/code&gt; or the JMX equivalent) for the same information.</source>
          <target state="translated">查找名为 &lt;code&gt;*AutoConfiguration&lt;/code&gt; 的类，并阅读其源代码。要特别注意 &lt;code&gt;@Conditional*&lt;/code&gt; 批注，以了解它们启用了哪些功能以及何时启用。将 &lt;code&gt;--debug&lt;/code&gt; 添加到命令行或系统属性 &lt;code&gt;-Ddebug&lt;/code&gt; ,以在控制台上获取在您的应用中做出的所有自动配置决策的日志。在启用了执行器的运行应用程序中，查看 &lt;code&gt;conditions&lt;/code&gt; 端点（ &lt;code&gt;/actuator/conditions&lt;/code&gt; 或等效的JMX）以获取相同信息。</target>
        </trans-unit>
        <trans-unit id="d8b65c04317666284ff5b8bb2402fecc24e48bdc" translate="yes" xml:space="preserve">
          <source>Look for classes that are &lt;code&gt;@ConfigurationProperties&lt;/code&gt; (such as &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java&quot;&gt;&lt;code&gt;ServerProperties&lt;/code&gt;&lt;/a&gt;) and read from there the available external configuration options. The &lt;code&gt;@ConfigurationProperties&lt;/code&gt; annotation has a &lt;code&gt;name&lt;/code&gt; attribute that acts as a prefix to external properties. Thus, &lt;code&gt;ServerProperties&lt;/code&gt; has &lt;code&gt;prefix=&quot;server&quot;&lt;/code&gt; and its configuration properties are &lt;code&gt;server.port&lt;/code&gt;, &lt;code&gt;server.address&lt;/code&gt;, and others. In a running application with actuator enabled, look at the &lt;code&gt;configprops&lt;/code&gt; endpoint.</source>
          <target state="translated">查找属于 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 的类（例如&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java&quot;&gt; &lt;code&gt;ServerProperties&lt;/code&gt; &lt;/a&gt;），然后从中读取可用的外部配置选项。该 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 标注有 &lt;code&gt;name&lt;/code&gt; 的属性，作为一个前缀外部属性。因此， &lt;code&gt;ServerProperties&lt;/code&gt; 具有 &lt;code&gt;prefix=&quot;server&quot;&lt;/code&gt; ，其配置属性是 &lt;code&gt;server.port&lt;/code&gt; ， &lt;code&gt;server.address&lt;/code&gt; 以及其他。在启用了执行器的运行应用程序中，查看 &lt;code&gt;configprops&lt;/code&gt; 端点。</target>
        </trans-unit>
        <trans-unit id="73d7f62ea1fde2fb3f7b59cd61f7000023db1c01" translate="yes" xml:space="preserve">
          <source>Look for uses of the &lt;code&gt;bind&lt;/code&gt; method on the &lt;code&gt;Binder&lt;/code&gt; to pull configuration values explicitly out of the &lt;code&gt;Environment&lt;/code&gt; in a relaxed manner. It is often used with a prefix.</source>
          <target state="translated">寻找在 &lt;code&gt;Binder&lt;/code&gt; 上使用 &lt;code&gt;bind&lt;/code&gt; 方法的方式，以一种轻松的方式将配置值显式地从 &lt;code&gt;Environment&lt;/code&gt; 中拉出。它通常与前缀一起使用。</target>
        </trans-unit>
        <trans-unit id="ea57db0dbd995d40aa7b03f143b32072d93f7600" translate="yes" xml:space="preserve">
          <source>MBeanServer bean name.</source>
          <target state="translated">MBeanServer bean名称。</target>
        </trans-unit>
        <trans-unit id="681f765024ebc0a4b0b64018aa4f978f784153e6" translate="yes" xml:space="preserve">
          <source>MVC</source>
          <target state="translated">MVC</target>
        </trans-unit>
        <trans-unit id="bf2fc8a2e70bccf8e02cf4bc5660d1a3ec53bbb7" translate="yes" xml:space="preserve">
          <source>Make sure that configuration keys are documented by adding field javadoc for each property, as shown in the following example:</source>
          <target state="translated">通过为每个属性添加字段javadoc来确保配置键被记录下来,如下例所示。</target>
        </trans-unit>
        <trans-unit id="cf0db1a8a5c4ba49027b0f3a11be57ae6bbe79ae" translate="yes" xml:space="preserve">
          <source>Make sure to &lt;a href=&quot;appendix-configuration-metadata#configuration-metadata-annotation-processor&quot;&gt;trigger meta-data generation&lt;/a&gt; so that IDE assistance is available for your keys as well. You may want to review the generated metadata (&lt;code&gt;META-INF/spring-configuration-metadata.json&lt;/code&gt;) to make sure your keys are properly documented. Using your own starter in a compatible IDE is also a good idea to validate that quality of the metadata.</source>
          <target state="translated">确保&lt;a href=&quot;appendix-configuration-metadata#configuration-metadata-annotation-processor&quot;&gt;触发元数据生成，&lt;/a&gt;以便IDE协助也可用于您的密钥。您可能需要查看生成的元数据（ &lt;code&gt;META-INF/spring-configuration-metadata.json&lt;/code&gt; ），以确保正确记录了您的密钥。在兼容的IDE中使用您自己的启动程序也是验证元数据质量的一个好主意。</target>
        </trans-unit>
        <trans-unit id="4b94cb898e073e0ed01e21ad84c862dee0a7e358" translate="yes" xml:space="preserve">
          <source>Make sure to not use the regular &lt;code&gt;@Import&lt;/code&gt; annotation to import auto-configurations as they are handled in a specific way by Spring Boot.</source>
          <target state="translated">确保不要使用常规的 &lt;code&gt;@Import&lt;/code&gt; 批注来导入自动配置，因为它们是由Spring Boot以特定方式处理的。</target>
        </trans-unit>
        <trans-unit id="058dc1cfbaf8acd9cd3f496fb5da5420df01e6aa" translate="yes" xml:space="preserve">
          <source>Management endpoint HTTP port (uses the same port as the application by default). Configure a different port to use management-specific SSL.</source>
          <target state="translated">管理端点 HTTP 端口(默认情况下与应用程序使用相同的端口)。配置不同的端口以使用管理专用的SSL。</target>
        </trans-unit>
        <trans-unit id="7fa412367683076a8a8d0f100e81875a77999495" translate="yes" xml:space="preserve">
          <source>Management endpoint base path (for instance, `/management`). Requires a custom management.server.port.</source>
          <target state="translated">管理端点基本路径(例如,`/management`)。需要自定义management.server.port。</target>
        </trans-unit>
        <trans-unit id="7ce8940d144e7e26862331b4f76e00a10c428429" translate="yes" xml:space="preserve">
          <source>Manifest entry</source>
          <target state="translated">舱单条目</target>
        </trans-unit>
        <trans-unit id="a8cf58c1e1c42475b176078d9b99255b2187130c" translate="yes" xml:space="preserve">
          <source>Many Spring Boot developers like their apps to use auto-configuration, component scan and be able to define extra configuration on their &quot;application class&quot;. A single &lt;code&gt;@SpringBootApplication&lt;/code&gt; annotation can be used to enable those three features, that is:</source>
          <target state="translated">许多Spring Boot开发人员喜欢他们的应用程序使用自动配置，组件扫描，并能够在其&amp;ldquo;应用程序类&amp;rdquo;上定义额外的配置。单个 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 批注可用于启用这三个功能，即：</target>
        </trans-unit>
        <trans-unit id="65da3ce11583517169aecce616bd002b31fdcafe" translate="yes" xml:space="preserve">
          <source>Many Spring Boot starters include default embedded containers.</source>
          <target state="translated">许多Spring Boot启动程序包括默认的嵌入式容器。</target>
        </trans-unit>
        <trans-unit id="e5295400ffda6894436623c3b97fa244b7ee6f8a" translate="yes" xml:space="preserve">
          <source>Many Spring annotations work without using &lt;code&gt;import&lt;/code&gt; statements. Try running your application to see what fails before adding imports.</source>
          <target state="translated">许多Spring注释无需使用 &lt;code&gt;import&lt;/code&gt; 语句即可工作。在添加导入之前，请尝试运行您的应用程序以查看失败的原因。</target>
        </trans-unit>
        <trans-unit id="c1d7c57fcc8bdd7a7fe820d601dfd474a116c8d6" translate="yes" xml:space="preserve">
          <source>Many Spring configuration examples have been published on the Internet that use XML configuration. If possible, always try to use the equivalent Java-based configuration. Searching for &lt;code&gt;Enable*&lt;/code&gt; annotations can be a good starting point.</source>
          <target state="translated">在Internet上已经发布了许多使用XML配置的Spring配置示例。如果可能，请始终尝试使用等效的基于Java的配置。搜索 &lt;code&gt;Enable*&lt;/code&gt; 批注可能是一个不错的起点。</target>
        </trans-unit>
        <trans-unit id="0854b0fe6c62f7c476bd6915302fdadfa3311f6f" translate="yes" xml:space="preserve">
          <source>Many modern IDEs (Eclipse, IDEA, and others) support hot swapping of bytecode. Consequently, if you make a change that does not affect class or method signatures, it should reload cleanly with no side effects.</source>
          <target state="translated">许多现代IDE(Eclipse、IDEA和其他)都支持字节码的热交换。因此,如果你做了一个不影响类或方法签名的改变,它应该会干净利落地重新加载,而不会产生任何副作用。</target>
        </trans-unit>
        <trans-unit id="c7592c0b0b6b54cfee99e3311a481163ddecd3d1" translate="yes" xml:space="preserve">
          <source>Many more questions can be answered by looking at the source code and the Javadoc. When reading the code, remember the following rules of thumb:</source>
          <target state="translated">还有很多问题可以通过看源代码和Javadoc来解答。阅读代码时,请记住以下经验法则。</target>
        </trans-unit>
        <trans-unit id="5ec481195f926a1ce0ed463727f8dafeb1f4a877" translate="yes" xml:space="preserve">
          <source>Map file extensions to media types for content negotiation. For instance, yml to text/yaml.</source>
          <target state="translated">将文件扩展名映射到媒体类型,以便进行内容协商。例如,将yml映射为text/yaml。</target>
        </trans-unit>
        <trans-unit id="def2eba59562958fa4a005f8070d692ef8502312" translate="yes" xml:space="preserve">
          <source>Mapping</source>
          <target state="translated">Mapping</target>
        </trans-unit>
        <trans-unit id="1fcb6a82b5c57c56e01eb76694920f579d03ae3c" translate="yes" xml:space="preserve">
          <source>Mapping Error Pages outside of Spring MVC</source>
          <target state="translated">在Spring MVC之外映射错误页面</target>
        </trans-unit>
        <trans-unit id="6773028ff5f6ee798da6635a3152f8aa16798a15" translate="yes" xml:space="preserve">
          <source>Mapping between endpoint IDs and the path that should expose them.</source>
          <target state="translated">端点ID和应该暴露它们的路径之间的映射。</target>
        </trans-unit>
        <trans-unit id="e5ac652972ed1c2de05209453921e5d82343c51d" translate="yes" xml:space="preserve">
          <source>Mapping of health statuses to HTTP status codes. By default, registered health statuses map to sensible defaults (for example, UP maps to 200).</source>
          <target state="translated">将健康状态映射到HTTP状态码。默认情况下,注册的健康状态映射到合理的默认值(例如,UP映射到200)。</target>
        </trans-unit>
        <trans-unit id="d9fbc317d5124d8917f8509bd4e65137ffcfa4d2" translate="yes" xml:space="preserve">
          <source>Mapping resources (equivalent to &quot;mapping-file&quot; entries in persistence.xml).</source>
          <target state="translated">映射资源(相当于 persistence.xml 中的 &quot;mapping-file &quot;条目)。</target>
        </trans-unit>
        <trans-unit id="2b75e29c53ce158df7f34319e74f17af4038af0d" translate="yes" xml:space="preserve">
          <source>Maps, as long as they are initialized, need a getter but not necessarily a setter, since they can be mutated by the binder.</source>
          <target state="translated">地图只要是初始化的,就需要一个getter,但不一定需要setter,因为它们可以被binder突变。</target>
        </trans-unit>
        <trans-unit id="6af37177e65c1a71744a7cb984d51ba2f07f5140" translate="yes" xml:space="preserve">
          <source>Maven</source>
          <target state="translated">Maven</target>
        </trans-unit>
        <trans-unit id="d35290a7a28a289e523c619327ac9c7a2c650820" translate="yes" xml:space="preserve">
          <source>Maven Plugin, Gradle Plugin, Antlib, and more.</source>
          <target state="translated">Maven Plugin、Gradle Plugin、Antlib等。</target>
        </trans-unit>
        <trans-unit id="72c78563515440b0f5bea68161b432b4bdc49629" translate="yes" xml:space="preserve">
          <source>Maven Shade Plugin</source>
          <target state="translated">Maven 阴影插件</target>
        </trans-unit>
        <trans-unit id="8a1a29888d136f57d77a5be7be3b957fd9103a00" translate="yes" xml:space="preserve">
          <source>Maven default</source>
          <target state="translated">Maven默认</target>
        </trans-unit>
        <trans-unit id="99eb40eca858095cdcf97f3e621e6a830b072d3f" translate="yes" xml:space="preserve">
          <source>Max file size.</source>
          <target state="translated">最大文件大小。</target>
        </trans-unit>
        <trans-unit id="5a0254945febbdb219e4253ff52f03096a8fde4d" translate="yes" xml:space="preserve">
          <source>Max request size.</source>
          <target state="translated">最大请求量。</target>
        </trans-unit>
        <trans-unit id="002c4fc8849eca30a4a6bfaa968cb337177172de" translate="yes" xml:space="preserve">
          <source>Maximal connection pool size.</source>
          <target state="translated">最大连接池大小。</target>
        </trans-unit>
        <trans-unit id="3ed72cf45000e48bda5cf6b1ce5a8cbca0365a06" translate="yes" xml:space="preserve">
          <source>Maximum age of the session cookie. If a duration suffix is not specified, seconds will be used.</source>
          <target state="translated">会话cookie的最大年龄。如果没有指定持续时间后缀,将使用秒。</target>
        </trans-unit>
        <trans-unit id="6fd8aeed11f02baca1e49444381f8181e1f8e665" translate="yes" xml:space="preserve">
          <source>Maximum allowed number of threads.</source>
          <target state="translated">允许的最大线程数。</target>
        </trans-unit>
        <trans-unit id="3d16757e12dbe0824aff8c5b550cf49139f1699a" translate="yes" xml:space="preserve">
          <source>Maximum allowed number of threads. If tasks are filling up the queue, the pool can expand up to that size to accommodate the load. Ignored if the queue is unbounded.</source>
          <target state="translated">允许的最大线程数。如果任务占满了队列,池可以扩展到该大小以适应负载。如果队列是无约束的,则忽略。</target>
        </trans-unit>
        <trans-unit id="f3d6c7a5439a86daafb98f30a36674a2db93dec9" translate="yes" xml:space="preserve">
          <source>Maximum allowed request rate.</source>
          <target state="translated">最大允许请求率。</target>
        </trans-unit>
        <trans-unit id="320eb00385d21c97a86fc556c72fcb1116030b60" translate="yes" xml:space="preserve">
          <source>Maximum amount of connections in the connection pool towards a single database.</source>
          <target state="translated">连接池中指向单个数据库的最大连接数。</target>
        </trans-unit>
        <trans-unit id="985e34eb0e91a9d9e76d095d06c9d05f09025ee3" translate="yes" xml:space="preserve">
          <source>Maximum amount of request body to swallow.</source>
          <target state="translated">吞下的请求体的最大数量。</target>
        </trans-unit>
        <trans-unit id="7cf2e85b58a426294c5912971e7b6b66bbe9cf96" translate="yes" xml:space="preserve">
          <source>Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.</source>
          <target state="translated">连接分配在池用尽时抛出异常前应阻塞的最大时间。使用负值来无限期阻塞。</target>
        </trans-unit>
        <trans-unit id="b494efaef293ff1dd2d7adda04c136d7aca344cc" translate="yes" xml:space="preserve">
          <source>Maximum amount of time that a connection is allowed to sit idle in the pool.</source>
          <target state="translated">允许一个连接在池中闲置的最大时间。</target>
        </trans-unit>
        <trans-unit id="7591f9f8724c2a7601902dfbd78b2b4f11025fc7" translate="yes" xml:space="preserve">
          <source>Maximum amount of time the server blocks before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by &quot;fetch-min-size&quot;.</source>
          <target state="translated">如果没有足够的数据立即满足 &quot;fetch-min-size &quot;给出的要求,服务器在回应fetch请求前的最大阻塞时间。</target>
        </trans-unit>
        <trans-unit id="5c3d8c59a150b32433bbd93acbe4f0527f05862f" translate="yes" xml:space="preserve">
          <source>Maximum amount of worker threads.</source>
          <target state="translated">工作线程的最大数量。</target>
        </trans-unit>
        <trans-unit id="cc94cda186a15593ee4a8a82eb61d8912e18a047" translate="yes" xml:space="preserve">
          <source>Maximum capacity of the thread pool's backing queue. A default is computed based on the threading configuration.</source>
          <target state="translated">线程池后备队列的最大容量。根据线程配置计算出默认值。</target>
        </trans-unit>
        <trans-unit id="b9a658c8e961a48c81ea1d8f45a9e3eb99c4aa54" translate="yes" xml:space="preserve">
          <source>Maximum chunk size that can be decoded for an HTTP request.</source>
          <target state="translated">一个HTTP请求可以被解码的最大分块大小。</target>
        </trans-unit>
        <trans-unit id="415eca94590fd78a5b663516a96cdfafff0d22a1" translate="yes" xml:space="preserve">
          <source>Maximum content length of an H2C upgrade request.</source>
          <target state="translated">H2C升级请求的最大内容长度。</target>
        </trans-unit>
        <trans-unit id="ff8f0eb09ce898578a945275e3fe8882a5bb62cc" translate="yes" xml:space="preserve">
          <source>Maximum duration between attempts.</source>
          <target state="translated">尝试之间的最大持续时间。</target>
        </trans-unit>
        <trans-unit id="ef95c32142ed357d47b71a667fb00c7a4d807709" translate="yes" xml:space="preserve">
          <source>Maximum length that can be decoded for an HTTP request's initial line.</source>
          <target state="translated">一个HTTP请求的初始行可以解码的最大长度。</target>
        </trans-unit>
        <trans-unit id="bc1f8b3b66a58ca65d46e6669c51e645c38cf389" translate="yes" xml:space="preserve">
          <source>Maximum lifetime of a connection in the pool. By default, connections have an infinite lifetime.</source>
          <target state="translated">池中连接的最大寿命。默认情况下,连接的寿命是无限的。</target>
        </trans-unit>
        <trans-unit id="b06db1d9f9150c74bd0761c15cdd3edfdd0529cc" translate="yes" xml:space="preserve">
          <source>Maximum log file size.</source>
          <target state="translated">最大日志文件大小。</target>
        </trans-unit>
        <trans-unit id="de1726a3d9a6f46ddb286983cff73159b60a2e6d" translate="yes" xml:space="preserve">
          <source>Maximum memory size to be used for buffering across all threads.</source>
          <target state="translated">用于所有线程缓冲的最大内存大小。</target>
        </trans-unit>
        <trans-unit id="058bfb83ca612fe7204f0a22a7f0a1fe9b138643" translate="yes" xml:space="preserve">
          <source>Maximum number of &quot;idle&quot; connections in the pool. Use a negative value to indicate an unlimited number of idle connections.</source>
          <target state="translated">池中 &quot;空闲 &quot;连接的最大数量。使用负值表示无限制的空闲连接数。</target>
        </trans-unit>
        <trans-unit id="89de7ec9725ffaea798ff37ba24e4afc6d9beeb2" translate="yes" xml:space="preserve">
          <source>Maximum number of active transactions.</source>
          <target state="translated">活动交易的最大数量;</target>
        </trans-unit>
        <trans-unit id="3663e004d487e19e99f097e1b9348fc8396b1e53" translate="yes" xml:space="preserve">
          <source>Maximum number of archive log files to keep.</source>
          <target state="translated">要保留的存档日志文件的最大数量。</target>
        </trans-unit>
        <trans-unit id="5cbe039f624d82157d466cfb99465e5f57846c2c" translate="yes" xml:space="preserve">
          <source>Maximum number of attempts to deliver a message.</source>
          <target state="translated">发送信息的最大尝试次数。</target>
        </trans-unit>
        <trans-unit id="5d15624633c9671ab877d7afd8ab9b0658b1efa8" translate="yes" xml:space="preserve">
          <source>Maximum number of concurrent consumers.</source>
          <target state="translated">最大并发消费者数量。</target>
        </trans-unit>
        <trans-unit id="0832634e6fd7fd54d8aaaf1acea34c51fd17f245" translate="yes" xml:space="preserve">
          <source>Maximum number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.</source>
          <target state="translated">池在特定时间内可分配的最大连接数。使用负值表示没有限制。</target>
        </trans-unit>
        <trans-unit id="deeeb2ff9d5e5f7837d274133762901db00fc72f" translate="yes" xml:space="preserve">
          <source>Maximum number of connections that the server accepts and processes at any given time. Once the limit has been reached, the operating system may still accept connections based on the &quot;acceptCount&quot; property.</source>
          <target state="translated">服务器在任何时间接受和处理的最大连接数。一旦达到限制,操作系统仍可根据 &quot;acceptCount &quot;属性接受连接。</target>
        </trans-unit>
        <trans-unit id="2ecc10deb590fcac226b5beed19631b8115221b1" translate="yes" xml:space="preserve">
          <source>Maximum number of cookies that are allowed. This limit exists to prevent hash collision based DOS attacks.</source>
          <target state="translated">允许的最大cookie数量。这个限制是为了防止基于哈希碰撞的DOS攻击。</target>
        </trans-unit>
        <trans-unit id="4e55315d81ca1ec3c73f53a4729078f3a0521543" translate="yes" xml:space="preserve">
          <source>Maximum number of days archive log files are kept.</source>
          <target state="translated">归档日志文件的最大保存天数。</target>
        </trans-unit>
        <trans-unit id="97b6ea4e49e27c39e89caf27d51f84eb368f2bad" translate="yes" xml:space="preserve">
          <source>Maximum number of headers that are allowed. This limit exists to prevent hash collision based DOS attacks.</source>
          <target state="translated">允许的最大头数。这个限制是为了防止基于DOS的哈希碰撞攻击。</target>
        </trans-unit>
        <trans-unit id="253f4f080ec004fc8a30e47a00d4b300806bdcee" translate="yes" xml:space="preserve">
          <source>Maximum number of idle processors that will be retained in the cache and reused with a subsequent request. When set to -1 the cache will be unlimited with a theoretical maximum size equal to the maximum number of connections.</source>
          <target state="translated">缓存中保留的空闲处理器的最大数量,并在后续请求中重复使用。当设置为-1时,缓存将是无限制的,理论上的最大大小等于最大连接数。</target>
        </trans-unit>
        <trans-unit id="2b15c9c38e4af9ee1d6657d6a6830a9e84a7350c" translate="yes" xml:space="preserve">
          <source>Maximum number of listener invoker threads.</source>
          <target state="translated">监听者调用者线程的最大数量。</target>
        </trans-unit>
        <trans-unit id="d18eaed2e5b825d2d115e4782a4290b37f6c3b65" translate="yes" xml:space="preserve">
          <source>Maximum number of pooled connections.</source>
          <target state="translated">集合连接的最大数量。</target>
        </trans-unit>
        <trans-unit id="fc690106b6a8d5c40263d095d774195f799c008d" translate="yes" xml:space="preserve">
          <source>Maximum number of pooled sessions per connection in the pool.</source>
          <target state="translated">池中每个连接的最大集合会话数。</target>
        </trans-unit>
        <trans-unit id="c233c15778ee875e820d4a34ef0f50e8748a167e" translate="yes" xml:space="preserve">
          <source>Maximum number of query or path parameters that are allowed. This limit exists to prevent hash collision based DOS attacks.</source>
          <target state="translated">允许查询或路径参数的最大数量。这个限制是为了防止基于哈希碰撞的DOS攻击。</target>
        </trans-unit>
        <trans-unit id="5784e25b79250096de89e3c78320d04b8a6136ab" translate="yes" xml:space="preserve">
          <source>Maximum number of records returned in a single call to poll().</source>
          <target state="translated">单次调用poll()时返回的最大记录数。</target>
        </trans-unit>
        <trans-unit id="0beb565e8ad48525dc8c50600bc463a57b6e5ef6" translate="yes" xml:space="preserve">
          <source>Maximum number of redirects to follow when executing commands across the cluster.</source>
          <target state="translated">在整个集群中执行命令时要遵循的最大重定向数量。</target>
        </trans-unit>
        <trans-unit id="767ed6b32c9875fc4a16011028ec2bc56bed6679" translate="yes" xml:space="preserve">
          <source>Maximum number of requests that are allowed to execute in parallel.</source>
          <target state="translated">允许并行执行的最大请求数。</target>
        </trans-unit>
        <trans-unit id="959d6625f99f0db18ef416678cc9f13d2bb0eae2" translate="yes" xml:space="preserve">
          <source>Maximum number of requests that can be enqueued when the throttling threshold is exceeded.</source>
          <target state="translated">当超过节流阈值时,可以被enqueued的最大请求数。</target>
        </trans-unit>
        <trans-unit id="e6e5ca9ec0cbbe602d8044d7b31db97c27a720b9" translate="yes" xml:space="preserve">
          <source>Maximum number of retries when attempting to connect to the database.</source>
          <target state="translated">试图连接到数据库时的最大重试次数。</target>
        </trans-unit>
        <trans-unit id="5b69224810c27b1f7c415a0902093f26d9f0ebfa" translate="yes" xml:space="preserve">
          <source>Maximum number of retries when trying to obtain a lock.</source>
          <target state="translated">试图获得一把锁时的最大重试次数。</target>
        </trans-unit>
        <trans-unit id="a7efbe357b4b4794e0b92e70e53d31904ce9c86d" translate="yes" xml:space="preserve">
          <source>Maximum number of rows. Use -1 to use the JDBC driver's default configuration.</source>
          <target state="translated">最大行数。使用-1来使用JDBC驱动程序的默认配置。</target>
        </trans-unit>
        <trans-unit id="efa4a147465a5d06118e2fe12a90446387f02f54" translate="yes" xml:space="preserve">
          <source>Maximum number of sockets per node.</source>
          <target state="translated">每个节点的最大套接字数。</target>
        </trans-unit>
        <trans-unit id="e19bb4919a374b464c50641e126b005f9b6d17a1" translate="yes" xml:space="preserve">
          <source>Maximum number of threads.</source>
          <target state="translated">最大线程数。</target>
        </trans-unit>
        <trans-unit id="da852c1e283eeece5cc005dc4d1220e21987ad6d" translate="yes" xml:space="preserve">
          <source>Maximum number of unacknowledged messages that can be outstanding at each consumer.</source>
          <target state="translated">在每个消费者那里可以未被确认的最大信息数量。</target>
        </trans-unit>
        <trans-unit id="5b58f42185b112d0265c907d9e74fb0732e2c24f" translate="yes" xml:space="preserve">
          <source>Maximum number of unique URI tag values allowed. After the max number of tag values is reached, metrics with additional tag values are denied by filter.</source>
          <target state="translated">允许的唯一URI标签值的最大数量。在达到最大标签值数量后,过滤器会拒绝包含额外标签值的指标。</target>
        </trans-unit>
        <trans-unit id="0ef80796bb67558ffb5165af2bb0b8a29db83fb0" translate="yes" xml:space="preserve">
          <source>Maximum page size to be accepted.</source>
          <target state="translated">可接受的最大页面尺寸。</target>
        </trans-unit>
        <trans-unit id="3ab7a45a254921759741f2e62a22fa7cd65c45ea" translate="yes" xml:space="preserve">
          <source>Maximum queue length for incoming connection requests when all possible request processing threads are in use.</source>
          <target state="translated">当所有可能的请求处理线程都在使用时,传入连接请求的最大队列长度。</target>
        </trans-unit>
        <trans-unit id="9f3285b78fe46546bd15df94d6e64f60b2ecf78c" translate="yes" xml:space="preserve">
          <source>Maximum size of data buffers used for writing to the response. Templates will execute in CHUNKED mode by default if this is set.</source>
          <target state="translated">用于写入响应的数据缓冲区的最大大小。如果设置了这个,模板将默认以CHUNKED模式执行。</target>
        </trans-unit>
        <trans-unit id="9851e12339a5181d335e4eaebfd63949299d3464" translate="yes" xml:space="preserve">
          <source>Maximum size of pages.</source>
          <target state="translated">最大页数:</target>
        </trans-unit>
        <trans-unit id="2adc50ac01bb782e78671a93604dea614c759360" translate="yes" xml:space="preserve">
          <source>Maximum size of the HTTP message header.</source>
          <target state="translated">HTTP消息头的最大尺寸。</target>
        </trans-unit>
        <trans-unit id="24a74fd5815728ba75d99fcc3291b7d297eb3843" translate="yes" xml:space="preserve">
          <source>Maximum size of the HTTP post content. When the value is -1, the default, the size is unlimited.</source>
          <target state="translated">HTTP帖子内容的最大尺寸。当值为-1时,默认,大小不受限制。</target>
        </trans-unit>
        <trans-unit id="95d0f8ff08cbecfdf4b34c403d120dbf8a3b8876" translate="yes" xml:space="preserve">
          <source>Maximum size of the form content in any HTTP post request.</source>
          <target state="translated">任何HTTP帖子请求中表单内容的最大尺寸。</target>
        </trans-unit>
        <trans-unit id="f255fdd1b58b3c4ea4bd19c0ea26770e99010103" translate="yes" xml:space="preserve">
          <source>Maximum size of the oplog.</source>
          <target state="translated">oplog的最大尺寸。</target>
        </trans-unit>
        <trans-unit id="a195223d45c96a49573a567d1bab0f319a28f494" translate="yes" xml:space="preserve">
          <source>Maximum size of the pool.</source>
          <target state="translated">泳池的最大尺寸。</target>
        </trans-unit>
        <trans-unit id="92469a2a16bdcae9b32c0ac7a62218d6f244561f" translate="yes" xml:space="preserve">
          <source>Maximum size of the pool. 0 denotes no limit.</source>
          <target state="translated">池的最大尺寸。0表示没有限制。</target>
        </trans-unit>
        <trans-unit id="f4c432ccb69d32ff76728bae7e86b50669991cd6" translate="yes" xml:space="preserve">
          <source>Maximum thread idle time.</source>
          <target state="translated">最大线程空闲时间。</target>
        </trans-unit>
        <trans-unit id="1096c74b42a8b091a88694dfb2858a79ea77d910" translate="yes" xml:space="preserve">
          <source>Maximum time that a response can be cached.</source>
          <target state="translated">响应可以被缓存的最长时间。</target>
        </trans-unit>
        <trans-unit id="079449cf6617021b83625f02408a3f05d04a8702" translate="yes" xml:space="preserve">
          <source>Maximum time the executor should wait for remaining tasks to complete.</source>
          <target state="translated">执行者应等待剩余任务完成的最长时间。</target>
        </trans-unit>
        <trans-unit id="520d1439cd1eb63ac7b49635e55b91734e6b9b69" translate="yes" xml:space="preserve">
          <source>Maximum time the response can be served after it becomes stale, in seconds if no duration suffix is not specified.</source>
          <target state="translated">如果没有指定持续时间后缀,则响应在变质后可以提供的最长时间,单位为秒。</target>
        </trans-unit>
        <trans-unit id="a66e20073da25151b7fe784137ef3d8a8deded8a" translate="yes" xml:space="preserve">
          <source>Maximum time the response may be used when errors are encountered, in seconds if no duration suffix is not specified.</source>
          <target state="translated">遇到错误时,响应可以使用的最长时间,如果没有指定持续时间后缀,则以秒为单位。</target>
        </trans-unit>
        <trans-unit id="b82d5b88ca725cd93c5890aa9aff69d4b5557fe4" translate="yes" xml:space="preserve">
          <source>Maximum time the response should be cached by shared caches, in seconds if no duration suffix is not specified.</source>
          <target state="translated">如果没有指定持续时间后缀,响应应该被共享缓存的最大时间,单位是秒。</target>
        </trans-unit>
        <trans-unit id="1eecdcdde15166d68de5bf0d7f55f7e810a242e2" translate="yes" xml:space="preserve">
          <source>Maximum time the response should be cached, in seconds if no duration suffix is not specified.</source>
          <target state="translated">响应应该被缓存的最长时间,如果没有指定持续时间后缀,以秒为单位。</target>
        </trans-unit>
        <trans-unit id="9a716ee2cc964a79d9de49d9f6ff55852d23adba" translate="yes" xml:space="preserve">
          <source>Maximum time to acquire a connection from the pool. By default, wait indefinitely.</source>
          <target state="translated">从池中获取连接的最长时间。默认情况下,无限期等待。</target>
        </trans-unit>
        <trans-unit id="9a85cef2aeb899dc48599e8ef5db92bf28b83c07" translate="yes" xml:space="preserve">
          <source>Maximum time to wait to create a new connection. By default, wait indefinitely.</source>
          <target state="translated">创建新连接的最长等待时间。默认情况下,无限期等待。</target>
        </trans-unit>
        <trans-unit id="90309fa638c0629b999ca17c1f4c6a49d7db52b5" translate="yes" xml:space="preserve">
          <source>Maximum time transactions are allowed to retry.</source>
          <target state="translated">允许重试交易的最长时间。</target>
        </trans-unit>
        <trans-unit id="286422aac2c11645e8ade261c16084e67ea06806" translate="yes" xml:space="preserve">
          <source>Maximum timeout that can be allowed for transactions.</source>
          <target state="translated">可允许交易的最大超时。</target>
        </trans-unit>
        <trans-unit id="ac8fe4658c8c6dfffb4915e2ac95f0945f276f7a" translate="yes" xml:space="preserve">
          <source>Maximum transmission unit. Frames larger than the specified value are fragmented.</source>
          <target state="translated">最大传输单位。大于指定值的帧将被分割。</target>
        </trans-unit>
        <trans-unit id="89c990f6cf87e07b685916c7cd7ce3ea11faafe1" translate="yes" xml:space="preserve">
          <source>Maximum value that meter IDs starting with the specified name are expected to observe. The longest match wins. Values can be specified as a long or as a Duration value (for timer meters, defaulting to ms if no unit specified).</source>
          <target state="translated">以指定名称开头的仪表ID预计会观察到的最大数值。匹配时间最长者获胜。值可以指定为长值或持续时间值(对于定时器仪表,如果没有指定单位,默认为ms)。</target>
        </trans-unit>
        <trans-unit id="db1c89dafff0f11ad4874541b54348ad73d7476c" translate="yes" xml:space="preserve">
          <source>Media types supported by the view technology.</source>
          <target state="translated">视图技术支持的媒体类型。</target>
        </trans-unit>
        <trans-unit id="b575b9a4ef9ebaebd8881f0011a517fb5aaa3711" translate="yes" xml:space="preserve">
          <source>Message bundles encoding.</source>
          <target state="translated">信息捆绑编码。</target>
        </trans-unit>
        <trans-unit id="aa2a08f47de15e34e9098916e1da6d5972e9e129" translate="yes" xml:space="preserve">
          <source>Meta-data support</source>
          <target state="translated">元数据支持</target>
        </trans-unit>
        <trans-unit id="1e59b4292d231fb02b5130441a7fd37b50f71ca7" translate="yes" xml:space="preserve">
          <source>Metadata used to describe configuration properties.</source>
          <target state="translated">用于描述配置属性的元数据。</target>
        </trans-unit>
        <trans-unit id="ddf6a1f0ce8cfffc5cd8f14230ab1fecd0f34953" translate="yes" xml:space="preserve">
          <source>Metrics</source>
          <target state="translated">Metrics</target>
        </trans-unit>
        <trans-unit id="c67f36b9a79a7d754e54e64d961c0bec27922b9e" translate="yes" xml:space="preserve">
          <source>Metrics JMX domain name.</source>
          <target state="translated">度量JMX域名。</target>
        </trans-unit>
        <trans-unit id="e2a761013e8c2be7182ddf386230abb9d5b7ff45" translate="yes" xml:space="preserve">
          <source>Metrics are also tagged by the name of the &lt;code&gt;DataSource&lt;/code&gt; computed based on the bean name.</source>
          <target state="translated">度量标准还通过基于Bean名称计算的 &lt;code&gt;DataSource&lt;/code&gt; 名称进行标记。</target>
        </trans-unit>
        <trans-unit id="a2f6344c59f53d62fa97e26a33dd120cdd84a2e8" translate="yes" xml:space="preserve">
          <source>Metrics are also tagged by the name of the &lt;code&gt;EntityManagerFactory&lt;/code&gt; that is derived from the bean name.</source>
          <target state="translated">度量标准还通过从bean名称派生的 &lt;code&gt;EntityManagerFactory&lt;/code&gt; 的名称进行标记。</target>
        </trans-unit>
        <trans-unit id="339ee586bdd603953ebff6a6d291e2569a5d9258" translate="yes" xml:space="preserve">
          <source>Metrics are tagged by the name of the cache and by the name of the &lt;code&gt;CacheManager&lt;/code&gt; that is derived from the bean name.</source>
          <target state="translated">通过高速缓存的名称和从Bean名称派生的 &lt;code&gt;CacheManager&lt;/code&gt; 的名称来标记度量标准。</target>
        </trans-unit>
        <trans-unit id="e03e3f992925ddcbd184b991a2a15a3de9221f38" translate="yes" xml:space="preserve">
          <source>Micrometer provides a default &lt;code&gt;HierarchicalNameMapper&lt;/code&gt; that governs how a dimensional meter id is &lt;a href=&quot;https://micrometer.io/docs/registry/graphite#_hierarchical_name_mapping&quot;&gt;mapped to flat hierarchical names&lt;/a&gt;.</source>
          <target state="translated">千分尺提供了一个默认的 &lt;code&gt;HierarchicalNameMapper&lt;/code&gt; ，它控制维度计量表ID如何&lt;a href=&quot;https://micrometer.io/docs/registry/graphite#_hierarchical_name_mapping&quot;&gt;映射到平面层次名称&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e3d0dde8f8d5520834acd9f742e9a15ae56f2900" translate="yes" xml:space="preserve">
          <source>Micrometer provides a default &lt;code&gt;HierarchicalNameMapper&lt;/code&gt; that governs how a dimensional meter id is &lt;a href=&quot;https://micrometer.io/docs/registry/jmx#_hierarchical_name_mapping&quot;&gt;mapped to flat hierarchical names&lt;/a&gt;.</source>
          <target state="translated">千分尺提供了一个默认的 &lt;code&gt;HierarchicalNameMapper&lt;/code&gt; ，它控制维度计量表ID如何&lt;a href=&quot;https://micrometer.io/docs/registry/jmx#_hierarchical_name_mapping&quot;&gt;映射到平面层次名称&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="269e529552f870eeb11cb95ba3477633f0fdceb9" translate="yes" xml:space="preserve">
          <source>Micrometer provides a hierarchical mapping to &lt;a href=&quot;https://micrometer.io/docs/registry/jmx&quot;&gt;JMX&lt;/a&gt;, primarily as a cheap and portable way to view metrics locally. By default, metrics are exported to the &lt;code&gt;metrics&lt;/code&gt; JMX domain. The domain to use can be provided using:</source>
          <target state="translated">千分尺提供了到&lt;a href=&quot;https://micrometer.io/docs/registry/jmx&quot;&gt;JMX&lt;/a&gt;的层次结构映射，主要是作为一种便宜且可移植的方式在本地查看指标。默认情况下，度量标准被导出到 &lt;code&gt;metrics&lt;/code&gt; JMX域。可以使用以下方式提供要使用的域：</target>
        </trans-unit>
        <trans-unit id="5eff95e0cf85ca246f1b410a2bd899333332ff29" translate="yes" xml:space="preserve">
          <source>Micrometer ships with a simple, in-memory backend that is automatically used as a fallback if no other registry is configured. This allows you to see what metrics are collected in the &lt;a href=&quot;#production-ready-metrics-endpoint&quot;&gt;metrics endpoint&lt;/a&gt;.</source>
          <target state="translated">千分尺附带一个简单的内存后端，如果未配置其他注册表，该后端将自动用作后备。这使您可以查看在&lt;a href=&quot;#production-ready-metrics-endpoint&quot;&gt;度量标准端点&lt;/a&gt;中收集了哪些度量标准。</target>
        </trans-unit>
        <trans-unit id="b8d92bb150e9cdc1f8b82aaf44e906c4dcf0caa3" translate="yes" xml:space="preserve">
          <source>Migrations can also be written in Java. Flyway will be auto-configured with any beans that implement &lt;code&gt;JavaMigration&lt;/code&gt;.</source>
          <target state="translated">迁移也可以用Java编写。将使用实现 &lt;code&gt;JavaMigration&lt;/code&gt; 的任何bean自动配置Flyway。</target>
        </trans-unit>
        <trans-unit id="fd5346cad2cecffad3048114f46e05dfcc361725" translate="yes" xml:space="preserve">
          <source>Migrations that Flyway should consider when migrating or undoing. When empty all available migrations are considered. Requires Flyway Teams.</source>
          <target state="translated">迁移或撤销时,Flyway应该考虑的迁移。当为空时,会考虑所有可用的迁移。需要Flyway团队。</target>
        </trans-unit>
        <trans-unit id="960774ccac7cc7bf068218a065512c549ced4ffe" translate="yes" xml:space="preserve">
          <source>Minimum &quot;Content-Length&quot; value that is required for compression to be performed.</source>
          <target state="translated">执行压缩所需的最小 &quot;内容-长度 &quot;值。</target>
        </trans-unit>
        <trans-unit id="6adc7d05d0b7c676130fcb211f72872ee8e2407f" translate="yes" xml:space="preserve">
          <source>Minimum amount of data the server should return for a fetch request.</source>
          <target state="translated">服务器为一个获取请求应返回的最小数据量。</target>
        </trans-unit>
        <trans-unit id="d3be4f2f956d1d893aa2e24f38c56e2cc8a06563" translate="yes" xml:space="preserve">
          <source>Minimum amount of worker threads.</source>
          <target state="translated">最小的工作线程数量。</target>
        </trans-unit>
        <trans-unit id="9ce126de960d033999fb2a45af867f1f14026e95" translate="yes" xml:space="preserve">
          <source>Minimum disk space that should be available.</source>
          <target state="translated">应有的最小磁盘空间。</target>
        </trans-unit>
        <trans-unit id="d95a57408742669a17e7f3f54f839bc66fa51e1e" translate="yes" xml:space="preserve">
          <source>Minimum number of concurrent consumers.</source>
          <target state="translated">同时消费的最低人数;</target>
        </trans-unit>
        <trans-unit id="46783ed615e84b7c12d83e0b8deb2403e528af9d" translate="yes" xml:space="preserve">
          <source>Minimum number of listener invoker threads.</source>
          <target state="translated">监听器调用者线程的最少数量。</target>
        </trans-unit>
        <trans-unit id="802f0b8210020b0b12165d39758a51c8ec9ff3c5" translate="yes" xml:space="preserve">
          <source>Minimum number of sockets per node.</source>
          <target state="translated">每个节点的最低套接字数。</target>
        </trans-unit>
        <trans-unit id="b0f2ee61671a8f8196273c460511d182070c275a" translate="yes" xml:space="preserve">
          <source>Minimum number of threads.</source>
          <target state="translated">最少的线程数。</target>
        </trans-unit>
        <trans-unit id="c4aff79bb142b9485764ff827f0ce374996751a0" translate="yes" xml:space="preserve">
          <source>Minimum size of the pool.</source>
          <target state="translated">泳池的最小尺寸;</target>
        </trans-unit>
        <trans-unit id="dbed3b95ae4a8f1b621ea8c0805d1e4071d82bda" translate="yes" xml:space="preserve">
          <source>Minimum value that meter IDs starting with the specified name are expected to observe. The longest match wins. Values can be specified as a long or as a Duration value (for timer meters, defaulting to ms if no unit specified).</source>
          <target state="translated">以指定名称开头的仪表ID预计将遵守的最小值。匹配时间最长者获胜。值可以指定为长值或持续时间值(对于定时器仪表,如果没有指定单位,默认为ms)。</target>
        </trans-unit>
        <trans-unit id="c92a133e8e92ffcf0c9578a6d4506ea98170ba24" translate="yes" xml:space="preserve">
          <source>Mirrors</source>
          <target state="translated">Mirrors</target>
        </trans-unit>
        <trans-unit id="530df4545ec2320e9aeb599a9aa50d81a968a140" translate="yes" xml:space="preserve">
          <source>Mode to apply when determining if DataSource initialization should be performed using the available DDL and DML scripts.</source>
          <target state="translated">当确定是否应使用可用的DDL和DML脚本执行DataSource初始化时,要应用的模式。</target>
        </trans-unit>
        <trans-unit id="9de02370a3d2a9a39e82d38ef8e80ea8175822cd" translate="yes" xml:space="preserve">
          <source>Mode to use to expose git information.</source>
          <target state="translated">用来公开git信息的模式。</target>
        </trans-unit>
        <trans-unit id="577a39711a4b75bf3fd7473e6cd71fa01f2fdb07" translate="yes" xml:space="preserve">
          <source>Mode used to display the banner when the application runs.</source>
          <target state="translated">应用程序运行时用于显示横幅的模式。</target>
        </trans-unit>
        <trans-unit id="2730bec427de0ed7966041222cd247edd37b4918" translate="yes" xml:space="preserve">
          <source>Mode used to shuffle configured addresses.</source>
          <target state="translated">用于洗牌配置地址的模式。</target>
        </trans-unit>
        <trans-unit id="6d51775734e41d5cefb79bf945fe4f7caecb98e6" translate="yes" xml:space="preserve">
          <source>Mongo database URI. Cannot be set with host, port, credentials and replica set name.</source>
          <target state="translated">Mongo 数据库 URI。不能与主机、端口、证书和副本集名称一起设置。</target>
        </trans-unit>
        <trans-unit id="06fb961cc1e77f3fbed817f2dd4ea2fb148ed50a" translate="yes" xml:space="preserve">
          <source>Mongo server host. Cannot be set with URI.</source>
          <target state="translated">Mongo服务器主机。不能用URI设置。</target>
        </trans-unit>
        <trans-unit id="886d5e9f18861e5a546f7d21ea5cd922adb16ffb" translate="yes" xml:space="preserve">
          <source>Mongo server port. Cannot be set with URI.</source>
          <target state="translated">Mongo 服务器端口。不能用URI设置。</target>
        </trans-unit>
        <trans-unit id="f0c6acff24bc7941d7797f41a861782190b4b85f" translate="yes" xml:space="preserve">
          <source>MongoDB</source>
          <target state="translated">MongoDB</target>
        </trans-unit>
        <trans-unit id="f9a994ac64175c6a784707d98677395fa627d2a8" translate="yes" xml:space="preserve">
          <source>Monitored resource type.</source>
          <target state="translated">监测的资源类型:</target>
        </trans-unit>
        <trans-unit id="3792176608969fa17f22ffff0f88830826bf92de" translate="yes" xml:space="preserve">
          <source>Monitoring, Metrics, Auditing, and more.</source>
          <target state="translated">监控、度量、审计等。</target>
        </trans-unit>
        <trans-unit id="f6ea856496941fff053cbd22c81a8f48d574e3d4" translate="yes" xml:space="preserve">
          <source>More advanced customizations can be achieved by defining your own &lt;code&gt;@Bean&lt;/code&gt; definitions, which is used when the jOOQ &lt;code&gt;Configuration&lt;/code&gt; is created. You can define beans for the following jOOQ Types:</source>
          <target state="translated">可以通过定义自己的 &lt;code&gt;@Bean&lt;/code&gt; 定义来实现更高级的自定义，该定义在创建jOOQ &lt;code&gt;Configuration&lt;/code&gt; 时使用。您可以为以下jOOQ类型定义bean：</target>
        </trans-unit>
        <trans-unit id="bccbc33c48881b3a0d459798274f59c9cd6f4b1e" translate="yes" xml:space="preserve">
          <source>More details on getting started with Spring Boot and Gradle can be found in the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#getting-started&quot;&gt;Getting Started section&lt;/a&gt; of the Gradle plugin&amp;rsquo;s reference guide.</source>
          <target state="translated">有关Spring Boot和Gradle&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#getting-started&quot;&gt;入门的&lt;/a&gt;更多详细信息，可以在Gradle插件参考指南的&amp;ldquo;入门&amp;rdquo;部分中找到。</target>
        </trans-unit>
        <trans-unit id="5b64f2f8c9f3d0c34ded096a27dc16fdd5d813e9" translate="yes" xml:space="preserve">
          <source>More details on getting started with Spring Boot and Maven can be found in the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#getting-started&quot;&gt;Getting Started section&lt;/a&gt; of the Maven plugin&amp;rsquo;s reference guide.</source>
          <target state="translated">有关Spring Boot和Maven&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#getting-started&quot;&gt;入门的&lt;/a&gt;更多详细信息，可以在Maven插件参考指南的&amp;ldquo;入门&amp;rdquo;部分中找到。</target>
        </trans-unit>
        <trans-unit id="f964b6a58cab7b7836f644a3205e750496d582cb" translate="yes" xml:space="preserve">
          <source>More efficient container images can also be created by &lt;a href=&quot;spring-boot-features#boot-features-container-images-docker&quot;&gt;creating separate layers&lt;/a&gt; for your dependencies and application classes and resources (which normally change more frequently).</source>
          <target state="translated">还可以通过为依赖项以及应用程序类和资源（通常会更频繁地更改）&lt;a href=&quot;spring-boot-features#boot-features-container-images-docker&quot;&gt;创建单独的图层&lt;/a&gt;来创建更有效的容器映像。</target>
        </trans-unit>
        <trans-unit id="550a319df598840418675972f4a57f6eb7fc27b3" translate="yes" xml:space="preserve">
          <source>Most developers use the &lt;code&gt;spring-boot-starter-test&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo;, which imports both Spring Boot test modules as well as JUnit Jupiter, AssertJ, Hamcrest, and a number of other useful libraries.</source>
          <target state="translated">大多数开发人员都使用 &lt;code&gt;spring-boot-starter-test&lt;/code&gt; &amp;ldquo; Starter&amp;rdquo;，它会导入Spring Boot测试模块以及JUnit Jupiter，AssertJ，Hamcrest和许多其他有用的库。</target>
        </trans-unit>
        <trans-unit id="ade0741821f68c80ba43734f200775978f3341b5" translate="yes" xml:space="preserve">
          <source>Most nested libraries in an executable jar do not need to be unpacked in order to run. However, certain libraries can have problems. For example, JRuby includes its own nested jar support, which assumes that the &lt;code&gt;jruby-complete.jar&lt;/code&gt; is always directly available as a file in its own right.</source>
          <target state="translated">可执行jar中的大多数嵌套库无需解压缩即可运行。但是，某些库可能会有问题。例如，JRuby包含其自己的嵌套jar支持，它假定 &lt;code&gt;jruby-complete.jar&lt;/code&gt; 始终可以直接作为文件直接使用。</target>
        </trans-unit>
        <trans-unit id="58de662f6379ecada7bd3405641cb26ee5579912" translate="yes" xml:space="preserve">
          <source>Most of the templating technologies supported by Spring Boot include a configuration option to disable caching (described later in this document). If you use the &lt;code&gt;spring-boot-devtools&lt;/code&gt; module, these properties are &lt;a href=&quot;using-spring-boot#using-boot-devtools-property-defaults&quot;&gt;automatically configured&lt;/a&gt; for you at development time.</source>
          <target state="translated">Spring Boot支持的大多数模板技术都包含一个配置选项以禁用缓存（在本文档的后面部分进行介绍）。如果您使用 &lt;code&gt;spring-boot-devtools&lt;/code&gt; 模块，那么在开发时会&lt;a href=&quot;using-spring-boot#using-boot-devtools-property-defaults&quot;&gt;自动&lt;/a&gt;为您配置这些属性。</target>
        </trans-unit>
        <trans-unit id="1d2f7ccc7deaec1235da5a638b709436b6092578" translate="yes" xml:space="preserve">
          <source>Most operating systems impose strict rules around the names that can be used for environment variables. For example, Linux shell variables can contain only letters (&lt;code&gt;a&lt;/code&gt; to &lt;code&gt;z&lt;/code&gt; or &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;Z&lt;/code&gt;), numbers (&lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt;) or the underscore character (&lt;code&gt;_&lt;/code&gt;). By convention, Unix shell variables will also have their names in UPPERCASE.</source>
          <target state="translated">大多数操作系统在可用于环境变量的名称周围施加严格的规则。例如，Linux shell变量只能包含字母（ &lt;code&gt;a&lt;/code&gt; 到 &lt;code&gt;z&lt;/code&gt; 或 &lt;code&gt;A&lt;/code&gt; 到 &lt;code&gt;Z&lt;/code&gt; ），数字（ &lt;code&gt;0&lt;/code&gt; 到 &lt;code&gt;9&lt;/code&gt; ）或下划线字符（ &lt;code&gt;_&lt;/code&gt; ）。按照约定，Unix shell变量也将以大写字母命名。</target>
        </trans-unit>
        <trans-unit id="b0d8b6cb148bb21fe43faf5213a0139ce976cde6" translate="yes" xml:space="preserve">
          <source>Most registries share common features. For instance, you can disable a particular registry even if the Micrometer registry implementation is on the classpath. For example, to disable Datadog:</source>
          <target state="translated">大多数注册表都有共同的特征。例如,即使Micrometer注册表的实现在classpath上,您也可以禁用某个注册表。例如,要禁用 Datadog:</target>
        </trans-unit>
        <trans-unit id="62a97d4415ef61ad89ce602fd4dbd48d7ecdc6fa" translate="yes" xml:space="preserve">
          <source>Most standard media types are supported out-of-the-box, but you can also define new ones:</source>
          <target state="translated">大多数标准的媒体类型都是现成的,但你也可以定义新的类型。</target>
        </trans-unit>
        <trans-unit id="3e668458d9951406a8899610f326bcd3124cd7ad" translate="yes" xml:space="preserve">
          <source>Multi-document property files are often used in conjunction with activation properties such as &lt;code&gt;spring.config.activate.on-profile&lt;/code&gt;. See the &lt;a href=&quot;#boot-features-external-config-file-activation-properties&quot;&gt;next section&lt;/a&gt; for details.</source>
          <target state="translated">多文档属性文件通常与激活属性（例如 &lt;code&gt;spring.config.activate.on-profile&lt;/code&gt; )结合使用。有关详细信息，请参见&lt;a href=&quot;#boot-features-external-config-file-activation-properties&quot;&gt;下一部分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aff661523b560f8517e9c15678fa06597d03a777" translate="yes" xml:space="preserve">
          <source>Multi-page HTML</source>
          <target state="translated">多页HTML</target>
        </trans-unit>
        <trans-unit id="fdf3a0a66074f70295eb0036ac0bae5e97328ddb" translate="yes" xml:space="preserve">
          <source>Multiple files are written to a directory tree, with the filename becoming the &amp;lsquo;key&amp;rsquo; and the contents becoming the &amp;lsquo;value&amp;rsquo;.</source>
          <target state="translated">多个文件被写入目录树，文件名成为&amp;ldquo;键&amp;rdquo;，内容成为&amp;ldquo;值&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="001f5edf74f71418a87a4b0ae61bb2825434be43" translate="yes" xml:space="preserve">
          <source>Multiplier applied to &quot;pollTimeout&quot; to determine if a consumer is non-responsive.</source>
          <target state="translated">应用于 &quot;pollTimeout &quot;的乘数,以确定消费者是否不响应。</target>
        </trans-unit>
        <trans-unit id="4e4430ae095ddcb359146c2d7ecff52162d16653" translate="yes" xml:space="preserve">
          <source>Multiplier to apply to the previous retry interval.</source>
          <target state="translated">适用于上一次重试间隔的倍数。</target>
        </trans-unit>
        <trans-unit id="f6c4e7b63424b23379a654d10fb8fa7fb7d21c17" translate="yes" xml:space="preserve">
          <source>Mustache</source>
          <target state="translated">Mustache</target>
        </trans-unit>
        <trans-unit id="08d2e98e6754af941484848930ccbaddfefe13d6" translate="yes" xml:space="preserve">
          <source>N/A</source>
          <target state="translated">N/A</target>
        </trans-unit>
        <trans-unit id="59531f035542e1a77b5725840d3558bc5d92f67c" translate="yes" xml:space="preserve">
          <source>N1QL query operations timeout.</source>
          <target state="translated">N1QL查询操作超时。</target>
        </trans-unit>
        <trans-unit id="fb549b6cd88b9e4351422cf23fbfc434de75e871" translate="yes" xml:space="preserve">
          <source>NO-SQL</source>
          <target state="translated">NO-SQL</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="adb5745529268d773bde4875847fd6a8b2697a34" translate="yes" xml:space="preserve">
          <source>Name of a specific file that, when changed, triggers the restart check. Must be a simple name (without any path) of a file that appears on your classpath. If not specified, any classpath file change triggers the restart.</source>
          <target state="translated">一个特定文件的名称,当改变时,会触发重启检查。必须是出现在classpath上的文件的简单名称(没有任何路径)。如果没有指定,任何classpath文件的改变都会触发重启。</target>
        </trans-unit>
        <trans-unit id="cee0172bdf8cb04d683bf6946884f27d4f974d03" translate="yes" xml:space="preserve">
          <source>Name of main class to launch (for example, &lt;code&gt;com.app.Application&lt;/code&gt;).</source>
          <target state="translated">要启动的主类的名称（例如 &lt;code&gt;com.app.Application&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="65123bc5a2f0584d7c5dd22444701bf37f5e5ecb" translate="yes" xml:space="preserve">
          <source>Name of properties file (for example, &lt;code&gt;launcher&lt;/code&gt;). It defaults to &lt;code&gt;loader&lt;/code&gt;.</source>
          <target state="translated">属性文件的名称（例如， &lt;code&gt;launcher&lt;/code&gt; ）。它默认为 &lt;code&gt;loader&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7adbce8e08501655835d0e26073ded671bca1a9" translate="yes" xml:space="preserve">
          <source>Name of table to use for tracking change history.</source>
          <target state="translated">用于跟踪变更历史的表的名称。</target>
        </trans-unit>
        <trans-unit id="bfd8fd88bcab24560f2eca65867c63e5e254a63d" translate="yes" xml:space="preserve">
          <source>Name of table to use for tracking concurrent Liquibase usage.</source>
          <target state="translated">用来跟踪同时使用Liquibase的表的名称。</target>
        </trans-unit>
        <trans-unit id="72a344532515c38514afa4ff2853d3c473fe56ac" translate="yes" xml:space="preserve">
          <source>Name of the Cassandra session.</source>
          <target state="translated">Cassandra会话的名称。</target>
        </trans-unit>
        <trans-unit id="969041b5f6703d769483401b0778976ddea5a1a6" translate="yes" xml:space="preserve">
          <source>Name of the HTTP header from which the remote IP is extracted. For instance, `X-FORWARDED-FOR`.</source>
          <target state="translated">提取远程IP的HTTP头的名称。例如,`X-FORWARDED-FOR`。</target>
        </trans-unit>
        <trans-unit id="cdd467aa82bb018c5dd08ff3408be4c747246663" translate="yes" xml:space="preserve">
          <source>Name of the HTTP header from which the remote host is extracted.</source>
          <target state="translated">从远程主机提取的HTTP头的名称。</target>
        </trans-unit>
        <trans-unit id="9ce166e2bf71e8d83c83bee8f024cb700336597a" translate="yes" xml:space="preserve">
          <source>Name of the HTTP header used to override the original port value.</source>
          <target state="translated">用于覆盖原始端口值的HTTP头的名称。</target>
        </trans-unit>
        <trans-unit id="30b59bfe14700074914427807b5aed279c562084" translate="yes" xml:space="preserve">
          <source>Name of the Redis server.</source>
          <target state="translated">Redis服务器的名称。</target>
        </trans-unit>
        <trans-unit id="81d0bbb1ed903c8bb896a75a443befaef48124f1" translate="yes" xml:space="preserve">
          <source>Name of the RequestContext attribute for all views.</source>
          <target state="translated">所有视图的RequestContext属性的名称。</target>
        </trans-unit>
        <trans-unit id="9254c50b678f5f2bca866b26cea76d68e8b8f5d2" translate="yes" xml:space="preserve">
          <source>Name of the URL query string parameter that indicates how many results to return at once.</source>
          <target state="translated">URL查询字符串参数的名称,表示一次要返回多少结果。</target>
        </trans-unit>
        <trans-unit id="9bae2574f9dc9bbe195b6a44792972a55dc11b0c" translate="yes" xml:space="preserve">
          <source>Name of the URL query string parameter that indicates what direction to sort results.</source>
          <target state="translated">URL查询字符串参数的名称,表示对结果进行排序的方向。</target>
        </trans-unit>
        <trans-unit id="cea695aa58cc23eb15d3478e1e3c11dbdd06c40d" translate="yes" xml:space="preserve">
          <source>Name of the URL query string parameter that indicates what page to return.</source>
          <target state="translated">URL查询字符串参数的名称,表示要返回什么页面。</target>
        </trans-unit>
        <trans-unit id="75ccdbf1ce0c89337ea0fadd37bbe4a23853e77d" translate="yes" xml:space="preserve">
          <source>Name of the bucket to connect to.</source>
          <target state="translated">要连接的桶的名称。</target>
        </trans-unit>
        <trans-unit id="df40997d242d4a15bd3065dceac19547bc9587b6" translate="yes" xml:space="preserve">
          <source>Name of the database table used to store sessions.</source>
          <target state="translated">用于存储会话的数据库表的名称。</target>
        </trans-unit>
        <trans-unit id="11e2fc51ba92fe09711123622eec7f6f87993ae1" translate="yes" xml:space="preserve">
          <source>Name of the datasource. Default to &quot;testdb&quot; when using an embedded database.</source>
          <target state="translated">数据源的名称,使用嵌入式数据库时,默认为 &quot;testdb&quot;。使用嵌入式数据库时,默认为 &quot;testdb&quot;。</target>
        </trans-unit>
        <trans-unit id="504905f580052d293ca7195e152d2ad7ef355daf" translate="yes" xml:space="preserve">
          <source>Name of the default exchange to use for send operations.</source>
          <target state="translated">用于发送操作的默认交易所的名称。</target>
        </trans-unit>
        <trans-unit id="c710bd2ba72b88d659b766553903b5a5a2a8f2d4" translate="yes" xml:space="preserve">
          <source>Name of the default queue to receive messages from when none is specified explicitly.</source>
          <target state="translated">当没有明确指定队列时,默认队列的名称。</target>
        </trans-unit>
        <trans-unit id="8cfdf471ccf99b27bf5b1b1d045f515a7b12090b" translate="yes" xml:space="preserve">
          <source>Name of the field that stores the type information for complex types when using &quot;MappingCouchbaseConverter&quot;.</source>
          <target state="translated">使用 &quot;MappingCouchbaseConverter &quot;时,存储复杂类型的类型信息的字段名称。</target>
        </trans-unit>
        <trans-unit id="40b8596cbfe208b56456a068a385882e8d5bf425" translate="yes" xml:space="preserve">
          <source>Name of the map used to store sessions.</source>
          <target state="translated">用于存储会话的地图的名称。</target>
        </trans-unit>
        <trans-unit id="f0bd0170890311b901eb7b803f248f4caf874146" translate="yes" xml:space="preserve">
          <source>Name of the metric for received requests.</source>
          <target state="translated">收到的请求的指标名称。</target>
        </trans-unit>
        <trans-unit id="29d48870b1c654e84817663ce7c415fe34d012db" translate="yes" xml:space="preserve">
          <source>Name of the metric for sent requests.</source>
          <target state="translated">发送请求的指标名称。</target>
        </trans-unit>
        <trans-unit id="c23da5c8cb305efd1e79bf222d8e6002ee7d03bc" translate="yes" xml:space="preserve">
          <source>Name of the replica set.</source>
          <target state="translated">复制品套装的名称。</target>
        </trans-unit>
        <trans-unit id="7d42036ede6ef6f91fbec61c98fe519220f6738a" translate="yes" xml:space="preserve">
          <source>Name of the scheduler.</source>
          <target state="translated">调度器的名称。</target>
        </trans-unit>
        <trans-unit id="dac3aaff4f2dbd3e15e83af2767c2cd225391732" translate="yes" xml:space="preserve">
          <source>Name of the schema history table that will be used by Flyway.</source>
          <target state="translated">Flyway将使用的模式历史表的名称。</target>
        </trans-unit>
        <trans-unit id="1734d03cee40ba5008fd8d6d2d34f09d8290c873" translate="yes" xml:space="preserve">
          <source>Name of the scope used for all collection access.</source>
          <target state="translated">用于所有收集访问的范围名称。</target>
        </trans-unit>
        <trans-unit id="f6f4e4cd2a79e667e896dcb11e9ad0e73fa483c0" translate="yes" xml:space="preserve">
          <source>Name of the target database to operate on, auto-detected by default. Can be alternatively set using the &quot;Database&quot; enum.</source>
          <target state="translated">要操作的目标数据库的名称,默认为自动检测。也可以使用 &quot;数据库 &quot;枚举来设置。</target>
        </trans-unit>
        <trans-unit id="bdb58a6932fa0249ab6dd166ef5ad1acf51d023f" translate="yes" xml:space="preserve">
          <source>Name of the timestamp field.</source>
          <target state="translated">时间戳字段的名称。</target>
        </trans-unit>
        <trans-unit id="bdb13e3f53bcd1d1d982079d12fcf90b3a872449" translate="yes" xml:space="preserve">
          <source>Namespace for keys used to store sessions.</source>
          <target state="translated">用于存储会话的键的命名空间。</target>
        </trans-unit>
        <trans-unit id="4b909f6c77de87c607e9f8280878e86dec61789b" translate="yes" xml:space="preserve">
          <source>Naming policy that should be applied to an object's field during serialization and deserialization.</source>
          <target state="translated">在序列化和反序列化过程中应适用于对象字段的命名策略。</target>
        </trans-unit>
        <trans-unit id="7fafd1c2baa4e8e81df9b75f6c4bb62d2d4fa596" translate="yes" xml:space="preserve">
          <source>Navigating to &lt;code&gt;/actuator/metrics&lt;/code&gt; displays a list of available meter names. You can drill down to view information about a particular meter by providing its name as a selector, e.g. &lt;code&gt;/actuator/metrics/jvm.memory.max&lt;/code&gt;.</source>
          <target state="translated">导航到 &lt;code&gt;/actuator/metrics&lt;/code&gt; 将显示可用仪表名称的列表。您可以通过提供特定的仪表名称作为选择器来向下查看以查看有关该仪表的信息，例如 &lt;code&gt;/actuator/metrics/jvm.memory.max&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2076e460d9aa7a9b83d6ac5fd826d61323f2a4a8" translate="yes" xml:space="preserve">
          <source>Need more details about Spring Boot&amp;rsquo;s core features? &lt;a href=&quot;spring-boot-features#boot-features&quot;&gt;The following content is for you&lt;/a&gt;:</source>
          <target state="translated">是否需要有关Spring Boot核心功能的更多信息？&lt;a href=&quot;spring-boot-features#boot-features&quot;&gt;以下内容适合您&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="aebee6499ae87f969b34929f47028cfa78a146e7" translate="yes" xml:space="preserve">
          <source>Neo4J</source>
          <target state="translated">Neo4J</target>
        </trans-unit>
        <trans-unit id="df5abe2ac785ad7fd020161d276090c52b736f9e" translate="yes" xml:space="preserve">
          <source>Nested members of a &lt;code&gt;@ConstructorBinding&lt;/code&gt; class (such as &lt;code&gt;Security&lt;/code&gt; in the example above) will also be bound via their constructor.</source>
          <target state="translated">&lt;code&gt;@ConstructorBinding&lt;/code&gt; 类的嵌套成员（例如上例中的 &lt;code&gt;Security&lt;/code&gt; ）也将通过其构造函数进行绑定。</target>
        </trans-unit>
        <trans-unit id="ae74558e9f6207b0d6aba6af63c04b8e82ba9125" translate="yes" xml:space="preserve">
          <source>Network address to which the management endpoints should bind. Requires a custom management.server.port.</source>
          <target state="translated">管理端点应该绑定的网络地址。需要自定义management.server.port。</target>
        </trans-unit>
        <trans-unit id="ec9b68db256e80f9e6e5428dbbefebd091091977" translate="yes" xml:space="preserve">
          <source>Network address to which the server should bind.</source>
          <target state="translated">服务器应该绑定的网络地址。</target>
        </trans-unit>
        <trans-unit id="61bea3ee2054d13c27c8a7b108f354b79cd1da74" translate="yes" xml:space="preserve">
          <source>Network settings: Listen port for incoming HTTP requests (&lt;code&gt;server.port&lt;/code&gt;), interface address to bind to &lt;code&gt;server.address&lt;/code&gt;, and so on.</source>
          <target state="translated">网络设置：侦听传入HTTP请求的端口（ &lt;code&gt;server.port&lt;/code&gt; ），绑定到 &lt;code&gt;server.address&lt;/code&gt; 的接口地址，等等。</target>
        </trans-unit>
        <trans-unit id="ff3436427337238b332c9a8f185813f051d61173" translate="yes" xml:space="preserve">
          <source>New Relic</source>
          <target state="translated">新遗迹</target>
        </trans-unit>
        <trans-unit id="2110ccee381de7249a0f1301a0e7a2a40b573781" translate="yes" xml:space="preserve">
          <source>New Relic API key.</source>
          <target state="translated">新的Relic API密钥。</target>
        </trans-unit>
        <trans-unit id="d02ddd19bfb7b3a6bd57e8fd29ddebe1a4fd3b37" translate="yes" xml:space="preserve">
          <source>New Relic account ID.</source>
          <target state="translated">新的Relic账户ID。</target>
        </trans-unit>
        <trans-unit id="8939928802e4ac81da7b13ce4c1e9caa3bc7d335" translate="yes" xml:space="preserve">
          <source>New Relic registry pushes metrics to &lt;a href=&quot;https://micrometer.io/docs/registry/new-relic&quot;&gt;New Relic&lt;/a&gt; periodically. To export metrics to &lt;a href=&quot;https://newrelic.com&quot;&gt;New Relic&lt;/a&gt;, your API key and account id must be provided:</source>
          <target state="translated">New Relic注册表会定期将指标推送到&lt;a href=&quot;https://micrometer.io/docs/registry/new-relic&quot;&gt;New Relic&lt;/a&gt;。要将指标导出到&lt;a href=&quot;https://newrelic.com&quot;&gt;New Relic&lt;/a&gt;，必须提供您的API密钥和帐户ID：</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="a696326ac1c949ff65e9ff4546459d7f48d466ef" translate="yes" xml:space="preserve">
          <source>No &lt;em&gt;(result will be logged if unspecified)&lt;/em&gt;</source>
          <target state="translated">否&lt;em&gt;（如果未指定，将记录结果）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7cb92221078745a84180a52936046477176627a0" translate="yes" xml:space="preserve">
          <source>No &lt;em&gt;(the default is the first class found that declares a &lt;code&gt;main&lt;/code&gt; method)&lt;/em&gt;</source>
          <target state="translated">否&lt;em&gt;（默认为找到的第一个声明了 &lt;code&gt;main&lt;/code&gt; 方法的类）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a1c90cd3956f8c452ccc498c297da4fe7fd0471d" translate="yes" xml:space="preserve">
          <source>No JNDI lookup is involved, and destinations are resolved against their names, using either the &lt;code&gt;name&lt;/code&gt; attribute in the Artemis configuration or the names provided through configuration.</source>
          <target state="translated">不涉及JNDI查找，并且使用Artemis配置中的 &lt;code&gt;name&lt;/code&gt; 属性或通过配置提供的名称来根据目的地的名称解析目的地。</target>
        </trans-unit>
        <trans-unit id="b68ca6f19dba3a07bb24c0dd5e286505cc7e8e7b" translate="yes" xml:space="preserve">
          <source>No mapping by default, so http status is 200</source>
          <target state="translated">默认没有映射,所以http状态为200。</target>
        </trans-unit>
        <trans-unit id="b5a6ce7df27fe51cbb1ee81121bb8783e0e48aae" translate="yes" xml:space="preserve">
          <source>No matter what you set in the environment, Spring Boot always loads &lt;code&gt;application.properties&lt;/code&gt; as described above. By default, if YAML is used, then files with the &amp;lsquo;.yml&amp;rsquo; extension are also added to the list.</source>
          <target state="translated">无论您在环境中进行什么设置，Spring Boot都会始终如上所述加载 &lt;code&gt;application.properties&lt;/code&gt; 。默认情况下，如果使用YAML，则扩展名为'.yml'的文件也将添加到列表中。</target>
        </trans-unit>
        <trans-unit id="d912e994424274067a431c4b376b8c72dd789989" translate="yes" xml:space="preserve">
          <source>None of these features are mandatory and you may choose to replace this single annotation by any of the features that it enables. For instance, you may not want to use component scan or configuration properties scan in your application:</source>
          <target state="translated">这些功能都不是强制性的,您可以选择用它所启用的任何功能来替换这个单一的注释。例如,您可能不想在应用程序中使用组件扫描或配置属性扫描。</target>
        </trans-unit>
        <trans-unit id="cd35558faf74c560e63507e24559cfc6d4472e65" translate="yes" xml:space="preserve">
          <source>Not all Spring applications have to be web applications (or web services). If you want to execute some code in a &lt;code&gt;main&lt;/code&gt; method but also bootstrap a Spring application to set up the infrastructure to use, you can use the &lt;code&gt;SpringApplication&lt;/code&gt; features of Spring Boot. A &lt;code&gt;SpringApplication&lt;/code&gt; changes its &lt;code&gt;ApplicationContext&lt;/code&gt; class, depending on whether it thinks it needs a web application or not. The first thing you can do to help it is to leave server-related dependencies (e.g. servlet API) off the classpath. If you cannot do that (for example, you run two applications from the same code base) then you can explicitly call &lt;code&gt;setWebApplicationType(WebApplicationType.NONE)&lt;/code&gt; on your &lt;code&gt;SpringApplication&lt;/code&gt; instance or set the &lt;code&gt;applicationContextClass&lt;/code&gt; property (through the Java API or with external properties). Application code that you want to run as your business logic can be implemented as a &lt;code&gt;CommandLineRunner&lt;/code&gt; and dropped into the context as a &lt;code&gt;@Bean&lt;/code&gt; definition.</source>
          <target state="translated">并非所有的Spring应用程序都必须是Web应用程序（或Web服务）。如果要在 &lt;code&gt;main&lt;/code&gt; 方法中执行一些代码，又要引导Spring应用程序以设置要使用的基础结构，则可以使用Spring Boot的 &lt;code&gt;SpringApplication&lt;/code&gt; 功能。一个 &lt;code&gt;SpringApplication&lt;/code&gt; 改变它 &lt;code&gt;ApplicationContext&lt;/code&gt; 类，这取决于它是否认为它需要一个Web应用程序或没有。您可以做的第一件事是让服务器相关的依赖项（例如Servlet API）脱离类路径。如果您不能执行此操作（例如，从同一代码库运行两个应用程序），则可以在 &lt;code&gt;SpringApplication&lt;/code&gt; 上显式调用 &lt;code&gt;setWebApplicationType(WebApplicationType.NONE)&lt;/code&gt; 实例或设置 &lt;code&gt;applicationContextClass&lt;/code&gt; 属性（通过Java API或带有外部属性）。您可以将要作为业务逻辑运行的应用程序代码实现为 &lt;code&gt;CommandLineRunner&lt;/code&gt; ,并作为 &lt;code&gt;@Bean&lt;/code&gt; 定义放到上下文中。</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="fc381829b966432469d9fc852b519cd5f3dbceeb" translate="yes" xml:space="preserve">
          <source>Note that the default &lt;code&gt;FilterRegistrationBean&lt;/code&gt; does not include the &lt;code&gt;ERROR&lt;/code&gt; dispatcher type.</source>
          <target state="translated">请注意，默认的 &lt;code&gt;FilterRegistrationBean&lt;/code&gt; 不包含 &lt;code&gt;ERROR&lt;/code&gt; 调度程序类型。</target>
        </trans-unit>
        <trans-unit id="0af3e2522afa2191e5542fc841c67658e3c91683" translate="yes" xml:space="preserve">
          <source>Note that, in the preceding example, any other value is also allowed.</source>
          <target state="translated">请注意,在前面的例子中,也允许使用任何其他值。</target>
        </trans-unit>
        <trans-unit id="0b0d16fb2a813af015422b72daf18ec97248425d" translate="yes" xml:space="preserve">
          <source>Note that, unlike when running as an &lt;code&gt;init.d&lt;/code&gt; service, the user that runs the application, the PID file, and the console log file are managed by &lt;code&gt;systemd&lt;/code&gt; itself and therefore must be configured by using appropriate fields in the &amp;lsquo;service&amp;rsquo; script. Consult the &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.service.html&quot;&gt;service unit configuration man page&lt;/a&gt; for more details.</source>
          <target state="translated">请注意，与作为 &lt;code&gt;init.d&lt;/code&gt; 服务运行时不同，运行应用程序的用户，PID文件和控制台日志文件由 &lt;code&gt;systemd&lt;/code&gt; 本身管理，因此必须通过在&amp;ldquo;服务&amp;rdquo;脚本中使用适当的字段进行配置。有关更多详细信息，请查阅&lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.service.html&quot;&gt;服务单元配置手册页&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9f1b55aa3f75f19a77d99ca9a9240f847e15bb35" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;ReactorResourceFactory&lt;/code&gt; for the connection provider and event loop resources. This ensures efficient sharing of resources for the server receiving requests and the client making requests.</source>
          <target state="translated">注意将 &lt;code&gt;ReactorResourceFactory&lt;/code&gt; 用于连接提供程序和事件循环资源。这确保了用于服务器接收请求和客户端发出请求的资源的有效共享。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="e36fcd1148b404153eda89ff7ecf418479a4346e" translate="yes" xml:space="preserve">
          <source>Notice how using constructor injection lets the &lt;code&gt;riskAssessor&lt;/code&gt; field be marked as &lt;code&gt;final&lt;/code&gt;, indicating that it cannot be subsequently changed.</source>
          <target state="translated">请注意，使用构造函数注入如何将 &lt;code&gt;riskAssessor&lt;/code&gt; 字段标记为 &lt;code&gt;final&lt;/code&gt; ，指示其随后无法更改。</target>
        </trans-unit>
        <trans-unit id="16ea68825410150f5cb607ace19e8f0f5d68d3e8" translate="yes" xml:space="preserve">
          <source>Now consider the following configuration:</source>
          <target state="translated">现在考虑以下配置。</target>
        </trans-unit>
        <trans-unit id="681dcfaad2584ee20f4c4cb8f2d1bfe7082d8d18" translate="yes" xml:space="preserve">
          <source>Number of I/O threads to create for the worker. The default is derived from the number of available processors.</source>
          <target state="translated">要为 Worker 创建的 I/O 线程的数量。默认值由可用处理器的数量决定。</target>
        </trans-unit>
        <trans-unit id="5469f9477634fa872262890b22b6443561498970" translate="yes" xml:space="preserve">
          <source>Number of acceptor threads to use. When the value is -1, the default, the number of acceptors is derived from the operating environment.</source>
          <target state="translated">要使用的接受者线程数。当值为-1时,为默认值,接受器的数量由操作环境得出。</target>
        </trans-unit>
        <trans-unit id="60d127d3a4aedf92d7d53fd6e9b15c9b459d3ee4" translate="yes" xml:space="preserve">
          <source>Number of acknowledgments the producer requires the leader to have received before considering a request complete.</source>
          <target state="translated">生产者要求领导在认为请求完成之前收到的确认数量。</target>
        </trans-unit>
        <trans-unit id="8b80e0a09b1f7fbc4fb6c6a18627a5e293b6c4fb" translate="yes" xml:space="preserve">
          <source>Number of channels per connection requested by the client. Use 0 for unlimited.</source>
          <target state="translated">客户端请求的每个连接的通道数。使用0表示无限制。</target>
        </trans-unit>
        <trans-unit id="f8758ad0e1a2c909219e7d8feb0db1eaf0e3c660" translate="yes" xml:space="preserve">
          <source>Number of channels to retain in the cache. When &quot;check-timeout&quot; &amp;gt; 0, max channels per connection.</source>
          <target state="translated">要保留在缓存中的通道数。当&amp;ldquo;检查超时&amp;rdquo;&amp;gt; 0时，每个连接的最大通道数。</target>
        </trans-unit>
        <trans-unit id="c2820d7fa72675423e7dc3dfe60acc0515ea3796" translate="yes" xml:space="preserve">
          <source>Number of classes loaded/unloaded</source>
          <target state="translated">装载/卸载的班级数量</target>
        </trans-unit>
        <trans-unit id="05f846aff4e4d1fdb8d93759bfb3227e39a0c5f9" translate="yes" xml:space="preserve">
          <source>Number of connections to cache. Only applies when mode is CONNECTION.</source>
          <target state="translated">缓存的连接数。仅适用于模式为CONNECTION时。</target>
        </trans-unit>
        <trans-unit id="25cb143ca7dfb17b112bf1a0f36cac586bbd83af" translate="yes" xml:space="preserve">
          <source>Number of connections to create when growing the pool.</source>
          <target state="translated">增长池时要创建的连接数。</target>
        </trans-unit>
        <trans-unit id="9398a817dcd3ea55740c5da1279f52a544e13557" translate="yes" xml:space="preserve">
          <source>Number of consumers per queue.</source>
          <target state="translated">每个队列的消费者人数。</target>
        </trans-unit>
        <trans-unit id="df21db9fbd619c531f620eced7aee99d69d48da4" translate="yes" xml:space="preserve">
          <source>Number of days before rotated log files are deleted.</source>
          <target state="translated">删除轮换日志文件前的天数。</target>
        </trans-unit>
        <trans-unit id="e1e95ea8788991fb283e2a6729c28577aa58366d" translate="yes" xml:space="preserve">
          <source>Number of days to retain the access log files before they are removed.</source>
          <target state="translated">在删除访问日志文件之前,保留这些文件的天数。</target>
        </trans-unit>
        <trans-unit id="5959360839f32f1335ec4f45c8408e304fdfd93a" translate="yes" xml:space="preserve">
          <source>Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.</source>
          <target state="translated">每次请求使用该后台的测量次数。如果发现更多的测量结果,那么将进行多次请求。</target>
        </trans-unit>
        <trans-unit id="fd34c4d54673665a0397069f43ba528dfe66e0eb" translate="yes" xml:space="preserve">
          <source>Number of records between offset commits when ackMode is &quot;COUNT&quot; or &quot;COUNT_TIME&quot;.</source>
          <target state="translated">ackMode为 &quot;COUNT &quot;或 &quot;COUNT_TIME &quot;时,偏移提交之间的记录数。</target>
        </trans-unit>
        <trans-unit id="e7a1a5ffecfdd718e9aeb7dc505da39baccb9d9e" translate="yes" xml:space="preserve">
          <source>Number of retry attempts to commit the transaction before throwing an exception.</source>
          <target state="translated">抛出异常前提交事务的重试次数。</target>
        </trans-unit>
        <trans-unit id="c1c4616798f56a3442a6e65ea48f8fbef7301d03" translate="yes" xml:space="preserve">
          <source>Number of rows that should be fetched from the database when more rows are needed. Use -1 to use the JDBC driver's default configuration.</source>
          <target state="translated">当需要更多的行时,应该从数据库中获取的行数。使用-1来使用JDBC驱动程序的默认配置。</target>
        </trans-unit>
        <trans-unit id="bbb3e1aeb555e53eabe215e1f27f6fc09dbb050f" translate="yes" xml:space="preserve">
          <source>Number of selector threads to use. When the value is -1, the default, the number of selectors is derived from the operating environment.</source>
          <target state="translated">要使用的选择器线程数。当值为-1时,为默认值,选择器的数量来自于操作环境。</target>
        </trans-unit>
        <trans-unit id="814fcd40d51f513ae036f4355c0d29b11334cada" translate="yes" xml:space="preserve">
          <source>Number of threads to run in the listener containers.</source>
          <target state="translated">在监听器容器中运行的线程数。</target>
        </trans-unit>
        <trans-unit id="003c167dc68df2ee4f9e5891b5dba50eee620506" translate="yes" xml:space="preserve">
          <source>Number of threads to use with the metrics publishing scheduler.</source>
          <target state="translated">使用指标发布调度器的线程数。</target>
        </trans-unit>
        <trans-unit id="2f19cf4531b082e8e410a1cd2a43ed7d12663c59" translate="yes" xml:space="preserve">
          <source>Number of worker threads. The default is 8 times the number of I/O threads.</source>
          <target state="translated">工作线程的数量。默认为8倍的I/O线程数。</target>
        </trans-unit>
        <trans-unit id="ab959bf3e597e16f718a6f5ac840189d9d341fcf" translate="yes" xml:space="preserve">
          <source>Numeric values surrounded by underscores (see &lt;a href=&quot;#boot-features-external-config-relaxed-binding-from-environment-variables&quot;&gt;Binding from Environment Variables&lt;/a&gt;)</source>
          <target state="translated">下划线括起来的数字值（请参阅&lt;a href=&quot;#boot-features-external-config-relaxed-binding-from-environment-variables&quot;&gt;环境变量的绑定&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="740e7eb16ae6b1ba6b1e0357e662fec291cc24e1" translate="yes" xml:space="preserve">
          <source>OAuth 2.0 endpoint through which token introspection is accomplished.</source>
          <target state="translated">OAuth 2.0端点,通过它来完成令牌反省。</target>
        </trans-unit>
        <trans-unit id="3df72bdcb7d2bbf2e55d260f80a7baf82cedb13c" translate="yes" xml:space="preserve">
          <source>OAuth client registrations.</source>
          <target state="translated">OAuth客户端注册。</target>
        </trans-unit>
        <trans-unit id="6bcc5555e5b5bfbf70c2cadc7e37bd73f658c303" translate="yes" xml:space="preserve">
          <source>OAuth provider details.</source>
          <target state="translated">OAuth提供商的详细信息。</target>
        </trans-unit>
        <trans-unit id="0c2f820a83657630ceb1bbff15f4713846d1c0da" translate="yes" xml:space="preserve">
          <source>OAuth2 client registration for common providers</source>
          <target state="translated">普通供应商的OAuth2客户端注册</target>
        </trans-unit>
        <trans-unit id="5ab5d8356cd009de5be7ca9821e61f43175a5dbf" translate="yes" xml:space="preserve">
          <source>OS Service</source>
          <target state="translated">操作系统服务</target>
        </trans-unit>
        <trans-unit id="8db068f05012ae9cd8936205c21e9b0deb42f91d" translate="yes" xml:space="preserve">
          <source>OS environment variables.</source>
          <target state="translated">操作系统环境变量。</target>
        </trans-unit>
        <trans-unit id="289321e1a596e17d37bd252db183c90b595dd422" translate="yes" xml:space="preserve">
          <source>OUT_OF_SERVICE</source>
          <target state="translated">OUT_OF_SERVICE</target>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="9dd87b18ec13240b99774a62fd26b712affb42fe" translate="yes" xml:space="preserve">
          <source>Objects with the same &amp;ldquo;property&amp;rdquo; and &amp;ldquo;group&amp;rdquo; name can appear multiple times within a metadata file. For example, you could bind two separate classes to the same prefix, with each having potentially overlapping property names. While the same names appearing in the metadata multiple times should not be common, consumers of metadata should take care to ensure that they support it.</source>
          <target state="translated">具有相同&amp;ldquo;属性&amp;rdquo;和&amp;ldquo;组&amp;rdquo;名称的对象可以在元数据文件中多次出现。例如，您可以将两个单独的类绑定到同一前缀，每个类具有可能重叠的属性名称。虽然相同的名称多次出现在元数据中不应该很常见，但是元数据的使用者应注意确保他们支持该名称。</target>
        </trans-unit>
        <trans-unit id="fbbc24c4d0cded15a4db9943abb9dba2dde9ff8f" translate="yes" xml:space="preserve">
          <source>Occasionally the profiles that you define and use in your application are too fine-grained and become cumbersome to use. For example, you might have &lt;code&gt;proddb&lt;/code&gt; and &lt;code&gt;prodmq&lt;/code&gt; profiles that you use to enable database and messaging features independently.</source>
          <target state="translated">有时，您在应用程序中定义和使用的配置文件的粒度太细，使用起来很麻烦。例如，您可能具有 &lt;code&gt;proddb&lt;/code&gt; 独立启用数据库和消息传递功能的proddb和 &lt;code&gt;prodmq&lt;/code&gt; 配置文件。</target>
        </trans-unit>
        <trans-unit id="2aec639fda5b8808f7fa66f8fca2c310ee66ab74" translate="yes" xml:space="preserve">
          <source>Of course, a Dockerfile can be written without using the jarmode. You can use some combination of &lt;code&gt;unzip&lt;/code&gt; and &lt;code&gt;mv&lt;/code&gt; to move things to the right layer but jarmode simplifies that.</source>
          <target state="translated">当然，无需使用jarmode即可编写Dockerfile。您可以使用 &lt;code&gt;unzip&lt;/code&gt; 和 &lt;code&gt;mv&lt;/code&gt; 的某种组合将内容移至正确的层，但是jarmode简化了这一过程。</target>
        </trans-unit>
        <trans-unit id="e01fa717baccf94556f36e24206821f4f9e2047f" translate="yes" xml:space="preserve">
          <source>Offline</source>
          <target state="translated">Offline</target>
        </trans-unit>
        <trans-unit id="e5299943508fbcec8d07c8b739178693e0972eea" translate="yes" xml:space="preserve">
          <source>Often, &lt;code&gt;@WebFluxTest&lt;/code&gt; is limited to a single controller and used in combination with the &lt;code&gt;@MockBean&lt;/code&gt; annotation to provide mock implementations for required collaborators.</source>
          <target state="translated">通常， &lt;code&gt;@WebFluxTest&lt;/code&gt; 仅限于单个控制器，并与 &lt;code&gt;@MockBean&lt;/code&gt; 批注结合使用，以为所需的协作者提供模拟实现。</target>
        </trans-unit>
        <trans-unit id="5701fd8b21aaa7b4b2e75417fdeb2ef8815580ee" translate="yes" xml:space="preserve">
          <source>Often, &lt;code&gt;@WebMvcTest&lt;/code&gt; is limited to a single controller and is used in combination with &lt;code&gt;@MockBean&lt;/code&gt; to provide mock implementations for required collaborators.</source>
          <target state="translated">&lt;code&gt;@WebMvcTest&lt;/code&gt; 通常仅限于单个控制器，并与 &lt;code&gt;@MockBean&lt;/code&gt; 结合使用，以为所需的协作者提供模拟实现。</target>
        </trans-unit>
        <trans-unit id="1cb331f4462fee36b45716a39152b29a02a9cd72" translate="yes" xml:space="preserve">
          <source>Often, if you have an executable and a non-executable jar as two separate build products, the executable version has additional configuration files that are not needed in a library jar. For example, the &lt;code&gt;application.yml&lt;/code&gt; configuration file might be excluded from the non-executable JAR.</source>
          <target state="translated">通常，如果您具有一个可执行文件和一个不可执行的jar作为两个单独的构建产品，则可执行版本具有库jar中不需要的其他配置文件。例如， &lt;code&gt;application.yml&lt;/code&gt; 配置文件可能会从不可执行的JAR中排除。</target>
        </trans-unit>
        <trans-unit id="f3c6f88133db3f367f875660a0704f77de8fa132" translate="yes" xml:space="preserve">
          <source>Often, you need to move beyond unit testing and start integration testing (with a Spring &lt;code&gt;ApplicationContext&lt;/code&gt;). It is useful to be able to perform integration testing without requiring deployment of your application or needing to connect to other infrastructure.</source>
          <target state="translated">通常，您需要超越单元测试并开始集成测试（使用Spring &lt;code&gt;ApplicationContext&lt;/code&gt; ）。能够进行集成测试而无需部署应用程序或连接到其他基础结构是很有用的。</target>
        </trans-unit>
        <trans-unit id="6ac9eb7f12c9c799171a17d0b4f17d169e499242" translate="yes" xml:space="preserve">
          <source>On Cloud Foundry, applications only receive requests on port 8080 for both HTTP and TCP routing, by default. If you want to use a custom management port on Cloud Foundry, you will need to explicitly set up the application&amp;rsquo;s routes to forward traffic to the custom port.</source>
          <target state="translated">在Cloud Foundry上，默认情况下，应用程序仅在端口8080上接收HTTP和TCP路由请求。如果要在Cloud Foundry上使用自定义管理端口，则需要明确设置应用程序的路由，以将流量转发到自定义端口。</target>
        </trans-unit>
        <trans-unit id="b8211abcce05e1d59970f8673b4a927949e69722" translate="yes" xml:space="preserve">
          <source>On a method to enable for an individual endpoint. This is not necessary if you have it on the class, but can be used to further customize the timer for this particular endpoint.</source>
          <target state="translated">在一个方法上为单个端点启用。如果你在类上有它,这不是必要的,但可以用来进一步定制这个特定端点的定时器。</target>
        </trans-unit>
        <trans-unit id="138de7afb56bcd514bf620f62fd9364d6bd96908" translate="yes" xml:space="preserve">
          <source>On a method with &lt;code&gt;longTask = true&lt;/code&gt; to enable a long task timer for the method. Long task timers require a separate metric name, and can be stacked with a short task timer.</source>
          <target state="translated">在具有 &lt;code&gt;longTask = true&lt;/code&gt; 的方法上，为该方法启用一个长任务计时器。长任务计时器需要一个单独的度量标准名称，并且可以与短任务计时器堆叠在一起。</target>
        </trans-unit>
        <trans-unit id="e00a900b494c67485b732c82901d95b867a538e8" translate="yes" xml:space="preserve">
          <source>On a resource class to enable timings on every request handler in the resource.</source>
          <target state="translated">在资源类上启用资源中每个请求处理程序的定时。</target>
        </trans-unit>
        <trans-unit id="d83a8f8a20329a6fc21b2a3b915ebc33d64bf994" translate="yes" xml:space="preserve">
          <source>On a slower development environment, it may happen that the quiet period is not enough, and the changes in the classes may be split into batches. The server is restarted after the first batch of class changes is uploaded. The next batch can&amp;rsquo;t be sent to the application, since the server is restarting.</source>
          <target state="translated">在较慢的开发环境中，可能会发生静默期不够的情况，并且类中的更改可能会被分为几批。在上传第一批类更改后，服务器将重新启动。由于服务器正在重新启动，因此下一批不能发送到应用程序。</target>
        </trans-unit>
        <trans-unit id="27cb77ffa640f1416669690f5838d21f65188736" translate="yes" xml:space="preserve">
          <source>On many operating systems, Maven can be installed with a package manager. If you use OSX Homebrew, try &lt;code&gt;brew install maven&lt;/code&gt;. Ubuntu users can run &lt;code&gt;sudo apt-get install maven&lt;/code&gt;. Windows users with &lt;a href=&quot;https://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt; can run &lt;code&gt;choco install maven&lt;/code&gt; from an elevated (administrator) prompt.</source>
          <target state="translated">在许多操作系统上，Maven可以与程序包管理器一起安装。如果您使用OSX Homebrew，请尝试 &lt;code&gt;brew install maven&lt;/code&gt; 。 Ubuntu用户可以运行 &lt;code&gt;sudo apt-get install maven&lt;/code&gt; 。拥有&lt;a href=&quot;https://chocolatey.org/&quot;&gt;Chocolatey的&lt;/a&gt;Windows用户可以从提升的（管理员）提示符下运行 &lt;code&gt;choco install maven&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2e7299c5b916b468de6a4c3eaaa498077c23bc0f" translate="yes" xml:space="preserve">
          <source>On your application classpath (for example, inside your jar) you can have an &lt;code&gt;application.properties&lt;/code&gt; file that provides a sensible default property value for &lt;code&gt;name&lt;/code&gt;. When running in a new environment, an &lt;code&gt;application.properties&lt;/code&gt; file can be provided outside of your jar that overrides the &lt;code&gt;name&lt;/code&gt;. For one-off testing, you can launch with a specific command line switch (for example, &lt;code&gt;java -jar app.jar --name=&quot;Spring&quot;&lt;/code&gt;).</source>
          <target state="translated">在您的应用程序类路径上（例如，在jar内），您可以有一个 &lt;code&gt;application.properties&lt;/code&gt; 文件，该文件为 &lt;code&gt;name&lt;/code&gt; 提供了合理的默认属性值。在新环境中运行时，可以在jar外部提供 &lt;code&gt;application.properties&lt;/code&gt; 文件，该文件将覆盖 &lt;code&gt;name&lt;/code&gt; 。对于一次性测试，可以使用特定的命令行开关启动（例如， &lt;code&gt;java -jar app.jar --name=&quot;Spring&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ab8645f4a23d945e0a24dec5e4f16f74a0338c5a" translate="yes" xml:space="preserve">
          <source>Once Cloud Foundry acknowledges that your application has been deployed, you should be able to find the application at the URI given. In the preceding example, you could find it at &lt;code&gt;https://acloudyspringtime.cfapps.io/&lt;/code&gt;.</source>
          <target state="translated">一旦Cloud Foundry确认已部署了您的应用程序，您就应该能够在给定的URI上找到该应用程序。在前面的示例中，您可以在 &lt;code&gt;https://acloudyspringtime.cfapps.io/&lt;/code&gt; 上找到它。</target>
        </trans-unit>
        <trans-unit id="f1e702e4369a816074565a1d68789aad13ba2396" translate="yes" xml:space="preserve">
          <source>Once Spring Security is in play, Spring Boot Actuator has a flexible audit framework that publishes events (by default, &amp;ldquo;authentication success&amp;rdquo;, &amp;ldquo;failure&amp;rdquo; and &amp;ldquo;access denied&amp;rdquo; exceptions). This feature can be very useful for reporting and for implementing a lock-out policy based on authentication failures.</source>
          <target state="translated">一旦启动了Spring Security，Spring Boot Actuator将具有一个灵活的审核框架，该框架可以发布事件（默认情况下，&amp;ldquo;身份验证成功&amp;rdquo;，&amp;ldquo;失败&amp;rdquo;和&amp;ldquo;访问被拒绝&amp;rdquo;异常）。此功能对于基于身份验证失败的报告和实施锁定策略非常有用。</target>
        </trans-unit>
        <trans-unit id="6a3ee8278f4e9bfd686fc5aa00dce858728840a6" translate="yes" xml:space="preserve">
          <source>Once defined, you can change the level for all the loggers in the group with a single line:</source>
          <target state="translated">定义后,您可以通过一条线改变组中所有记录仪的级别。</target>
        </trans-unit>
        <trans-unit id="4dcd66e9cee43b2affeb742fbd6b2e4608512bf0" translate="yes" xml:space="preserve">
          <source>Once downloaded, follow the &lt;a href=&quot;https://raw.githubusercontent.com/spring-projects/spring-boot/v2.4.0/spring-boot-project/spring-boot-cli/src/main/content/INSTALL.txt&quot;&gt;INSTALL.txt&lt;/a&gt; instructions from the unpacked archive. In summary, there is a &lt;code&gt;spring&lt;/code&gt; script (&lt;code&gt;spring.bat&lt;/code&gt; for Windows) in a &lt;code&gt;bin/&lt;/code&gt; directory in the &lt;code&gt;.zip&lt;/code&gt; file. Alternatively, you can use &lt;code&gt;java -jar&lt;/code&gt; with the &lt;code&gt;.jar&lt;/code&gt; file (the script helps you to be sure that the classpath is set correctly).</source>
          <target state="translated">下载完成后，请按照解压缩后的归档文件中的&lt;a href=&quot;https://raw.githubusercontent.com/spring-projects/spring-boot/v2.4.0/spring-boot-project/spring-boot-cli/src/main/content/INSTALL.txt&quot;&gt;INSTALL.txt&lt;/a&gt;说明进行操作。总而言之， &lt;code&gt;.zip&lt;/code&gt; 文件的 &lt;code&gt;bin/&lt;/code&gt; 目录中有一个 &lt;code&gt;spring&lt;/code&gt; 脚本（对于Windows是 &lt;code&gt;spring.bat&lt;/code&gt; ）。或者，您可以将 &lt;code&gt;java -jar&lt;/code&gt; 与 &lt;code&gt;.jar&lt;/code&gt; 文件一起使用（脚本可帮助您确保正确设置了类路径）。</target>
        </trans-unit>
        <trans-unit id="0b19fa176ae5532b9b8271d0e8e612a17a022f22" translate="yes" xml:space="preserve">
          <source>Once installed, you can start and stop the service in the usual way. For example, on a Debian-based system, you could start it with the following command:</source>
          <target state="translated">一旦安装完毕,你就可以用通常的方式来启动和停止这个服务。例如,在基于Debian的系统上,你可以用以下命令来启动它。</target>
        </trans-unit>
        <trans-unit id="cb2eb8db191cc1e00e601f97d1f84bed206bb256" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;RSocket&lt;/code&gt; channel is established between server and client, any party can send or receive requests to the other.</source>
          <target state="translated">一旦在服务器和客户端之间建立了 &lt;code&gt;RSocket&lt;/code&gt; 通道，任何一方都可以向另一方发送或接收请求。</target>
        </trans-unit>
        <trans-unit id="b3b3a42f928d91541edf05947c60fbad6a958371" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;spring-boot-antlib&lt;/code&gt; namespace has been declared, the following additional tasks are available:</source>
          <target state="translated">一旦 &lt;code&gt;spring-boot-antlib&lt;/code&gt; 命名空间已经宣布，以下附加任务：</target>
        </trans-unit>
        <trans-unit id="72c3445895347de2cb2d77ad548d3f9c1ee4e87c" translate="yes" xml:space="preserve">
          <source>Once the pre-stop hook has completed, SIGTERM will be sent to the container and &lt;a href=&quot;spring-boot-features#boot-features-graceful-shutdown&quot;&gt;graceful shutdown&lt;/a&gt; will begin, allowing any remaining in-flight requests to complete.</source>
          <target state="translated">一旦停止前挂钩完成，SIGTERM将被发送到容器，并且将&lt;a href=&quot;spring-boot-features#boot-features-graceful-shutdown&quot;&gt;正常关闭&lt;/a&gt;，从而允许完成所有剩余的运行中请求。</target>
        </trans-unit>
        <trans-unit id="8347d803657d94512d97bc6ecf3d721a4380c105" translate="yes" xml:space="preserve">
          <source>Once the war file is working, you can make it executable by adding a &lt;code&gt;main&lt;/code&gt; method to your &lt;code&gt;Application&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">war文件运行后，可以通过向 &lt;code&gt;Application&lt;/code&gt; 中添加 &lt;code&gt;main&lt;/code&gt; 方法使其变为可执行文件，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="1afac784048ae6ad3eb7b00c37446f6027a11bcf" translate="yes" xml:space="preserve">
          <source>Once you have built your application (by using, for example, &lt;code&gt;mvn clean package&lt;/code&gt;) and have &lt;a href=&quot;https://docs.cloudfoundry.org/cf-cli/install-go-cli.html&quot;&gt;installed the &lt;code&gt;cf&lt;/code&gt; command line tool&lt;/a&gt;, deploy your application by using the &lt;code&gt;cf push&lt;/code&gt; command, substituting the path to your compiled &lt;code&gt;.jar&lt;/code&gt;. Be sure to have &lt;a href=&quot;https://docs.cloudfoundry.org/cf-cli/getting-started.html#login&quot;&gt;logged in with your &lt;code&gt;cf&lt;/code&gt; command line client&lt;/a&gt; before pushing an application. The following line shows using the &lt;code&gt;cf push&lt;/code&gt; command to deploy an application:</source>
          <target state="translated">一旦构建了应用程序（例如，使用 &lt;code&gt;mvn clean package&lt;/code&gt; ）并&lt;a href=&quot;https://docs.cloudfoundry.org/cf-cli/install-go-cli.html&quot;&gt;安装了 &lt;code&gt;cf&lt;/code&gt; 命令行工具&lt;/a&gt;，就可以使用 &lt;code&gt;cf push&lt;/code&gt; 命令部署应用程序，并替换已编译的 &lt;code&gt;.jar&lt;/code&gt; 的路径。推送应用程序之前，请确保已&lt;a href=&quot;https://docs.cloudfoundry.org/cf-cli/getting-started.html#login&quot;&gt;使用 &lt;code&gt;cf&lt;/code&gt; 命令行客户端登录&lt;/a&gt;。下面的行显示了使用 &lt;code&gt;cf push&lt;/code&gt; 命令部署应用程序：</target>
        </trans-unit>
        <trans-unit id="507df9a504bc5094bff7897db31175bdc74fc5c4" translate="yes" xml:space="preserve">
          <source>Once you have created a &lt;a href=&quot;https://console.boxfuse.com&quot;&gt;Boxfuse account&lt;/a&gt;, connected it to your AWS account, installed the latest version of the Boxfuse Client, and ensured that the application has been built by Maven or Gradle (by using, for example, &lt;code&gt;mvn clean package&lt;/code&gt;), you can deploy your Spring Boot application to AWS with a command similar to the following:</source>
          <target state="translated">创建&lt;a href=&quot;https://console.boxfuse.com&quot;&gt;Boxfuse帐户&lt;/a&gt;，将其连接到您的AWS帐户，安装最新版本的Boxfuse Client并确保该应用程序已由Maven或Gradle构建（通过使用例如 &lt;code&gt;mvn clean package&lt;/code&gt; ）后，您可以使用与以下类似的命令将您的Spring Boot应用程序部署到AWS：</target>
        </trans-unit>
        <trans-unit id="3b7d2cf44bdc7ab73b319aa159a258bbe099c12f" translate="yes" xml:space="preserve">
          <source>Once you have installed the CLI, you can run it by typing &lt;code&gt;spring&lt;/code&gt; and pressing Enter at the command line. If you run &lt;code&gt;spring&lt;/code&gt; without any arguments, a help screen is displayed, as follows:</source>
          <target state="translated">安装CLI后，可以通过键入 &lt;code&gt;spring&lt;/code&gt; 并在命令行中按Enter来运行它。如果您在不带任何参数的情况下运行 &lt;code&gt;spring&lt;/code&gt; ，则会显示一个帮助屏幕，如下所示：</target>
        </trans-unit>
        <trans-unit id="19bd84e4843a8e7a8c8a34b71e31d5b9fdd42d27" translate="yes" xml:space="preserve">
          <source>Once you have unpacked the jar file, you can also get an extra boost to startup time by running the app with its &quot;natural&quot; main method instead of the &lt;code&gt;JarLauncher&lt;/code&gt;. For example:</source>
          <target state="translated">解压缩jar文件后，您还可以通过使用其&amp;ldquo;自然&amp;rdquo;主方法（而不是 &lt;code&gt;JarLauncher&lt;/code&gt; )运行应用程序来增加启动时间。例如：</target>
        </trans-unit>
        <trans-unit id="4ce2236b24bdf5f22019c7bda5db48f83b472bca" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;re done with the migration, please make sure to remove this module from your project&amp;rsquo;s dependencies.</source>
          <target state="translated">迁移完成后，请确保从项目的依赖项中删除此模块。</target>
        </trans-unit>
        <trans-unit id="c2f2bf924524a3b72b36fe22f1befde3e8e59703" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve got access to a &lt;code&gt;WebServerFactory&lt;/code&gt;, you can often add customizers to it to configure specific parts, like connectors, server resources, or the server itself - all using server-specific APIs.</source>
          <target state="translated">一旦可以访问 &lt;code&gt;WebServerFactory&lt;/code&gt; ，通常可以向其添加自定义程序，以配置特定的部分，例如连接器，服务器资源或服务器本身，所有这些都使用服务器特定的API。</target>
        </trans-unit>
        <trans-unit id="63c21c6aa78217c12046c51d41eb4797e0809a52" translate="yes" xml:space="preserve">
          <source>Once your application is live, you can verify the status of the deployed application by using the &lt;code&gt;cf apps&lt;/code&gt; command, as shown in the following example:</source>
          <target state="translated">应用程序上线后，可以使用 &lt;code&gt;cf apps&lt;/code&gt; 命令验证已部署应用程序的状态，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="7c1d279dfbbc79d7a0576e90b69c8ee5cbacb698" translate="yes" xml:space="preserve">
          <source>One of Kotlin&amp;rsquo;s key features is &lt;a href=&quot;https://kotlinlang.org/docs/reference/null-safety.html&quot;&gt;null-safety&lt;/a&gt;. It deals with &lt;code&gt;null&lt;/code&gt; values at compile time rather than deferring the problem to runtime and encountering a &lt;code&gt;NullPointerException&lt;/code&gt;. This helps to eliminate a common source of bugs without paying the cost of wrappers like &lt;code&gt;Optional&lt;/code&gt;. Kotlin also allows using functional constructs with nullable values as described in this &lt;a href=&quot;https://www.baeldung.com/kotlin-null-safety&quot;&gt;comprehensive guide to null-safety in Kotlin&lt;/a&gt;.</source>
          <target state="translated">Kotlin的主要功能之一是&lt;a href=&quot;https://kotlinlang.org/docs/reference/null-safety.html&quot;&gt;null安全&lt;/a&gt;。它在编译时处理 &lt;code&gt;null&lt;/code&gt; 值，而不是将问题推迟到运行时并遇到 &lt;code&gt;NullPointerException&lt;/code&gt; 。这有助于消除常见的错误源，而无需支付 &lt;code&gt;Optional&lt;/code&gt; 等包装器的费用。Kotlin还允许使用具有可为空值的功能构造，如本&lt;a href=&quot;https://www.baeldung.com/kotlin-null-safety&quot;&gt;Kotlin中关于null安全性的全面指南中所述&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6c027602a59517ac945b1b59fc995138db7bdc66" translate="yes" xml:space="preserve">
          <source>One of the biggest advantages of packaging your application as a jar and using an embedded HTTP server is that you can run your application as you would any other. The sample applies to debugging Spring Boot applications. You do not need any special IDE plugins or extensions.</source>
          <target state="translated">将应用程序打包为jar并使用嵌入式HTTP服务器的最大优势之一是,你可以像运行其他应用程序一样运行你的应用程序。该示例适用于调试Spring Boot应用程序。你不需要任何特殊的IDE插件或扩展。</target>
        </trans-unit>
        <trans-unit id="0c6cf4cf801d15ddecd1888c89934c941cd1fb41" translate="yes" xml:space="preserve">
          <source>One of the constants on Jackson's PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.</source>
          <target state="translated">Jackson 的 PropertyNamingStrategy 的常量之一。也可以是PropertyNamingStrategy子类的全限定类名。</target>
        </trans-unit>
        <trans-unit id="7a5f3dff57db48353e42add862a62fdc1afbecbb" translate="yes" xml:space="preserve">
          <source>One of the major advantages of dependency injection is that it should make your code easier to unit test. You can instantiate objects by using the &lt;code&gt;new&lt;/code&gt; operator without even involving Spring. You can also use &lt;em&gt;mock objects&lt;/em&gt; instead of real dependencies.</source>
          <target state="translated">依赖注入的主要优点之一是，它应该使您的代码更易于进行单元测试。您可以使用 &lt;code&gt;new&lt;/code&gt; 运算符实例化对象，而无需使用Spring。您还可以使用&lt;em&gt;模拟对象&lt;/em&gt;而不是实际的依赖项。</target>
        </trans-unit>
        <trans-unit id="978d9ea6405287366110066f230e2539eb79c7d8" translate="yes" xml:space="preserve">
          <source>One or more &lt;a href=&quot;https://ant.apache.org/manual/Types/resources.html#collection&quot;&gt;Resource Collections&lt;/a&gt; describing a set of &lt;a href=&quot;https://ant.apache.org/manual/Types/resources.html&quot;&gt;Resources&lt;/a&gt; that should be added to the content of the created jar file.</source>
          <target state="translated">一个或多个&lt;a href=&quot;https://ant.apache.org/manual/Types/resources.html#collection&quot;&gt;资源集合，&lt;/a&gt;描述应添加到创建的jar文件内容中的一组&lt;a href=&quot;https://ant.apache.org/manual/Types/resources.html&quot;&gt;资源&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2f67a0107ea559d3c9cba2645b3ea96f22080f23" translate="yes" xml:space="preserve">
          <source>One or more &lt;a href=&quot;https://ant.apache.org/manual/Types/resources.html#collection&quot;&gt;Resource Collections&lt;/a&gt; that should be added to the set of jar libraries that make up the runtime dependency classpath of the application.</source>
          <target state="translated">应该将一个或多个&lt;a href=&quot;https://ant.apache.org/manual/Types/resources.html#collection&quot;&gt;资源集合&lt;/a&gt;添加到组成应用程序运行时依赖项类路径的jar库集合中。</target>
        </trans-unit>
        <trans-unit id="1ffa91ff71d810b117c1509734e037318c0bed6e" translate="yes" xml:space="preserve">
          <source>OneJar</source>
          <target state="translated">OneJar</target>
        </trans-unit>
        <trans-unit id="80f68083b0bf11932a61c29912eb731064556e6e" translate="yes" xml:space="preserve">
          <source>Only a subset of the properties supported by Kafka are available directly through the &lt;code&gt;KafkaProperties&lt;/code&gt; class. If you wish to configure the producer or consumer with additional properties that are not directly supported, use the following properties:</source>
          <target state="translated">通过 &lt;code&gt;KafkaProperties&lt;/code&gt; 类可以直接使用Kafka支持的属性的子集。如果希望使用不直接支持的其他属性来配置生产者或使用者，请使用以下属性：</target>
        </trans-unit>
        <trans-unit id="e8a6f743a234e32bdf0bcf3507e31a57b24a288b" translate="yes" xml:space="preserve">
          <source>Only caches that are configured on startup are bound to the registry. For caches not defined in the cache&amp;rsquo;s configuration, e.g. caches created on-the-fly or programmatically after the startup phase, an explicit registration is required. A &lt;code&gt;CacheMetricsRegistrar&lt;/code&gt; bean is made available to make that process easier.</source>
          <target state="translated">仅在启动时配置的缓存绑定到注册表。对于未在缓存配置中定义的缓存，例如，在启动阶段后即时或以编程方式创建的缓存，需要显式注册。提供 &lt;code&gt;CacheMetricsRegistrar&lt;/code&gt; Bean可简化该过程。</target>
        </trans-unit>
        <trans-unit id="62a834890da15c9a542e7a46438fc1c2297b65c3" translate="yes" xml:space="preserve">
          <source>Only one provider can be active for a given property, but you can specify several providers if they can all manage the property &lt;em&gt;in some way&lt;/em&gt;. Make sure to place the most powerful provider first, as the IDE must use the first one in the JSON section that it can handle. If no provider for a given property is supported, no special content assistance is provided, either.</source>
          <target state="translated">对于给定的属性，只有一个提供程序可以处于活动状态，但是如果它们都可以通过&lt;em&gt;某种方式&lt;/em&gt;全部管理该属性&lt;em&gt;，&lt;/em&gt;则可以指定多个提供程序。确保将最强大的提供程序放在首位，因为IDE必须使用它可以处理的JSON部分中的第一个。如果不支持给定属性的提供程序，则也不提供任何特殊的内容帮助。</target>
        </trans-unit>
        <trans-unit id="b2d37fd03579089418b6c82f6a1e5b74f25e5bbd" translate="yes" xml:space="preserve">
          <source>Only production configuration is filtered that way (in other words, no filtering is applied on &lt;code&gt;src/test/resources&lt;/code&gt;).</source>
          <target state="translated">这样只会过滤生产配置（换句话说，不会对 &lt;code&gt;src/test/resources&lt;/code&gt; 进行过滤）。</target>
        </trans-unit>
        <trans-unit id="0bafe93d7c0b89a3053e12e1a18f8163680e9e20" translate="yes" xml:space="preserve">
          <source>Only the &lt;code&gt;name&lt;/code&gt; of the property is required to document additional metadata for existing properties.</source>
          <target state="translated">只需要属性 &lt;code&gt;name&lt;/code&gt; 即可记录现有属性的其他元数据。</target>
        </trans-unit>
        <trans-unit id="cb8ded1c04cd5c22aa7f053a31635721e367ebd9" translate="yes" xml:space="preserve">
          <source>Open &lt;code&gt;&lt;a href=&quot;http://localhost:8080&quot;&gt;localhost:8080&lt;/a&gt;&lt;/code&gt; in your favorite web browser. You should see the following output:</source>
          <target state="translated">在您喜欢的Web浏览器中打开 &lt;code&gt;&lt;a href=&quot;http://localhost:8080&quot;&gt;localhost:8080&lt;/a&gt;&lt;/code&gt; 。您应该看到以下输出：</target>
        </trans-unit>
        <trans-unit id="aae76627771768ed4f70835ba91564d157e7d10e" translate="yes" xml:space="preserve">
          <source>OpenShift Commons Briefing</source>
          <target state="translated">OpenShift Commons简介</target>
        </trans-unit>
        <trans-unit id="430d32076eb256f0fb1db5fd1333254c368ef1ba" translate="yes" xml:space="preserve">
          <source>Operation</source>
          <target state="translated">Operation</target>
        </trans-unit>
        <trans-unit id="9b2e918e47e14b9cfaa1f966addcfe46350a0eba" translate="yes" xml:space="preserve">
          <source>Operation that should be performed on shutdown.</source>
          <target state="translated">关机时应进行的操作。</target>
        </trans-unit>
        <trans-unit id="39635ed03fc2b40f2789b1717b8e2643c9e1a072" translate="yes" xml:space="preserve">
          <source>Operations on an &lt;code&gt;@Endpoint&lt;/code&gt;, &lt;code&gt;@WebEndpoint&lt;/code&gt;, or &lt;code&gt;@EndpointWebExtension&lt;/code&gt; are automatically exposed over HTTP using Jersey, Spring MVC, or Spring WebFlux. If both Jersey and Spring MVC are available, Spring MVC will be used.</source>
          <target state="translated">使用Jersey，Spring MVC或Spring WebFlux通过HTTP自动公开 &lt;code&gt;@Endpoint&lt;/code&gt; ， &lt;code&gt;@WebEndpoint&lt;/code&gt; 或 &lt;code&gt;@EndpointWebExtension&lt;/code&gt; 上的操作。如果Jersey和Spring MVC均可用，则将使用Spring MVC。</target>
        </trans-unit>
        <trans-unit id="09884354dbcc1669f29a83c98113e5dbaed3e5bb" translate="yes" xml:space="preserve">
          <source>Operations on an endpoint receive input via their parameters. When exposed via the web, the values for these parameters are taken from the URL&amp;rsquo;s query parameters and from the JSON request body. When exposed via JMX, the parameters are mapped to the parameters of the MBean&amp;rsquo;s operations. Parameters are required by default. They can be made optional by annotating them with &lt;code&gt;@org.springframework.lang.Nullable&lt;/code&gt;.</source>
          <target state="translated">端点上的操作通过其参数接收输入。通过网络公开时，这些参数的值取自URL的查询参数和JSON请求正文。通过JMX公开时，参数将映射到MBean操作的参数。默认情况下，参数是必需的。可以通过使用 &lt;code&gt;@org.springframework.lang.Nullable&lt;/code&gt; 对其进行注释来使它们成为可选的。</target>
        </trans-unit>
        <trans-unit id="96b049bd9a54335dda4b80928178998104fa7507" translate="yes" xml:space="preserve">
          <source>Options that are passed to the JVM when it is launched.</source>
          <target state="translated">启动时传递给JVM的选项。</target>
        </trans-unit>
        <trans-unit id="874f6bc0d9c3d473c3656cef91b625732a8eb434" translate="yes" xml:space="preserve">
          <source>Or if you prefer to use a different parameter name:</source>
          <target state="translated">或者如果你喜欢使用不同的参数名称。</target>
        </trans-unit>
        <trans-unit id="d1f8bded2e5a90dc454414de9062b9aff8f62143" translate="yes" xml:space="preserve">
          <source>Or you could supply the JSON by using a command line argument:</source>
          <target state="translated">或者你可以通过使用命令行参数来提供JSON。</target>
        </trans-unit>
        <trans-unit id="d7918b0eb3e799365ad731b9e48757a8be33b3fb" translate="yes" xml:space="preserve">
          <source>Oracle UCP specific settings bound to an instance of Oracle UCP's PoolDataSource</source>
          <target state="translated">绑定到Oracle UCP的PoolDataSource实例的Oracle UCP特定设置。</target>
        </trans-unit>
        <trans-unit id="1d75774c0f96b6ee44eb6643c9fea71b50b90ea8" translate="yes" xml:space="preserve">
          <source>Order</source>
          <target state="translated">Order</target>
        </trans-unit>
        <trans-unit id="04cf3a0ab49d60e8ed01ed51c32e5b6c824e5f3b" translate="yes" xml:space="preserve">
          <source>Order of the template resolver in the chain. By default, the template resolver is first in the chain. Order start at 1 and should only be set if you have defined additional &quot;TemplateResolver&quot; beans.</source>
          <target state="translated">模板解析器在链中的顺序。默认情况下,模板解析器是链中的第一个。顺序从1开始,只有当你定义了额外的 &quot;TemplateResolver &quot;Bean时才能设置。</target>
        </trans-unit>
        <trans-unit id="47a125964abc7e31c919bf58b1053f77c6ed704f" translate="yes" xml:space="preserve">
          <source>Other &amp;ldquo;Starters&amp;rdquo; provide dependencies that you are likely to need when developing a specific type of application. Since we are developing a web application, we add a &lt;code&gt;spring-boot-starter-web&lt;/code&gt; dependency. Before that, we can look at what we currently have by running the following command:</source>
          <target state="translated">其他&amp;ldquo;入门&amp;rdquo;提供了开发特定类型的应用程序时可能需要的依赖项。由于我们正在开发Web应用程序，因此添加了 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; 依赖项。在此之前，我们可以通过运行以下命令来查看当前的状态：</target>
        </trans-unit>
        <trans-unit id="dfab54f44c448ca8bf62e759cec65ec258987831" translate="yes" xml:space="preserve">
          <source>Otherwise, &lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt; is used</source>
          <target state="translated">否则，将使用 &lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b8e479501b1fe73ee5f5db14bd276ef4c92e8e3" translate="yes" xml:space="preserve">
          <source>Otherwise, Spring Boot tries to find the Hazelcast configuration from the default locations: &lt;code&gt;hazelcast.xml&lt;/code&gt; in the working directory or at the root of the classpath, or a &lt;code&gt;.yaml&lt;/code&gt; counterpart in the same locations. We also check if the &lt;code&gt;hazelcast.config&lt;/code&gt; system property is set. See the &lt;a href=&quot;https://docs.hazelcast.org/docs/latest/manual/html-single/&quot;&gt;Hazelcast documentation&lt;/a&gt; for more details.</source>
          <target state="translated">否则，弹簧引导试图找到从默认位置Hazelcast配置： &lt;code&gt;hazelcast.xml&lt;/code&gt; 在工作目录或类路径中，或根 &lt;code&gt;.yaml&lt;/code&gt; 在相同的位置对应。我们还将检查 &lt;code&gt;hazelcast.config&lt;/code&gt; 系统属性是否已设置。有关更多详细信息，请参见&lt;a href=&quot;https://docs.hazelcast.org/docs/latest/manual/html-single/&quot;&gt;Hazelcast文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1c7987967e8ce0f21095d9522ae6c5d028216694" translate="yes" xml:space="preserve">
          <source>Otherwise, if &lt;a href=&quot;https://commons.apache.org/proper/commons-dbcp/&quot;&gt;Commons DBCP2&lt;/a&gt; is available, we use it.</source>
          <target state="translated">否则，如果&lt;a href=&quot;https://commons.apache.org/proper/commons-dbcp/&quot;&gt;Commons DBCP2&lt;/a&gt;可用，我们将使用它。</target>
        </trans-unit>
        <trans-unit id="b6fc1ca003bfae121e1b260b94a23db5823ad7b5" translate="yes" xml:space="preserve">
          <source>Otherwise, if the Tomcat pooling &lt;code&gt;DataSource&lt;/code&gt; is available, we use it.</source>
          <target state="translated">否则，如果Tomcat池化 &lt;code&gt;DataSource&lt;/code&gt; 可用，我们将使用它。</target>
        </trans-unit>
        <trans-unit id="df56f52fbe70b9a52b68370c8f8a47848599027e" translate="yes" xml:space="preserve">
          <source>Otherwise, the next logical step is to read &lt;em&gt;&lt;a href=&quot;using-spring-boot#using-boot&quot;&gt;using-spring-boot.html&lt;/a&gt;&lt;/em&gt;. If you are really impatient, you could also jump ahead and read about &lt;em&gt;&lt;a href=&quot;spring-boot-features#boot-features&quot;&gt;Spring Boot features&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">否则，下一个逻辑步骤是阅读&lt;em&gt;&lt;a href=&quot;using-spring-boot#using-boot&quot;&gt;using-spring-boot.html&lt;/a&gt;&lt;/em&gt;。如果您真的不耐烦，还可以继续阅读并了解有关&lt;em&gt;&lt;a href=&quot;spring-boot-features#boot-features&quot;&gt;Spring Boot功能的信息&lt;/a&gt;&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="721d7d9a38b8e1e5d83246ae3a5fa5d2b9967d20" translate="yes" xml:space="preserve">
          <source>Otherwise, you can continue on, to read about &lt;a href=&quot;deployment#deployment&quot;&gt;&amp;lsquo;deployment options&amp;rsquo;&lt;/a&gt; or jump ahead for some in-depth information about Spring Boot&amp;rsquo;s &lt;em&gt;&lt;a href=&quot;build-tool-plugins#build-tool-plugins&quot;&gt;build tool plugins&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">否则，您可以继续阅读&lt;a href=&quot;deployment#deployment&quot;&gt;&amp;ldquo;部署选项&amp;rdquo;，&lt;/a&gt;或者继续阅读有关Spring Boot的&lt;em&gt;&lt;a href=&quot;build-tool-plugins#build-tool-plugins&quot;&gt;构建工具插件的&lt;/a&gt;&lt;/em&gt;一些深入信息。</target>
        </trans-unit>
        <trans-unit id="ec4bd97c3569de0fa1d8f1253187edf5ce58880b" translate="yes" xml:space="preserve">
          <source>Our application can now be started using &lt;code&gt;--spring.profiles.active=production&lt;/code&gt; to active the &lt;code&gt;production&lt;/code&gt;, &lt;code&gt;proddb&lt;/code&gt; and &lt;code&gt;prodmq&lt;/code&gt; profiles in one hit.</source>
          <target state="translated">现在，我们可以使用 &lt;code&gt;--spring.profiles.active=production&lt;/code&gt; 来启动我们的应用程序，从而一键激活 &lt;code&gt;production&lt;/code&gt; ， &lt;code&gt;proddb&lt;/code&gt; 和 &lt;code&gt;prodmq&lt;/code&gt; 配置文件。</target>
        </trans-unit>
        <trans-unit id="9d052ac0353c5dc8369f0f4940140295e13cd7bb" translate="yes" xml:space="preserve">
          <source>Our primary goals are:</source>
          <target state="translated">我们的主要目标是:</target>
        </trans-unit>
        <trans-unit id="231d0186aecd61c39a5ead79a2400954506c6d9a" translate="yes" xml:space="preserve">
          <source>Override and set</source>
          <target state="translated">覆盖和设置</target>
        </trans-unit>
        <trans-unit id="13e736a47a5365f31706ab86ff89ffb27ffe47a7" translate="yes" xml:space="preserve">
          <source>Override the Cloud Platform auto-detection.</source>
          <target state="translated">覆盖云平台自动检测。</target>
        </trans-unit>
        <trans-unit id="6b2422aca1e8b38c759a080d3138ee6a49ff89b5" translate="yes" xml:space="preserve">
          <source>Overriding the error page with your own depends on the templating technology that you use. For example, if you use Thymeleaf, you can add an &lt;code&gt;error.html&lt;/code&gt; template. If you use FreeMarker, you can add an &lt;code&gt;error.ftlh&lt;/code&gt; template. In general, you need a &lt;code&gt;View&lt;/code&gt; that resolves with a name of &lt;code&gt;error&lt;/code&gt; or a &lt;code&gt;@Controller&lt;/code&gt; that handles the &lt;code&gt;/error&lt;/code&gt; path. Unless you replaced some of the default configuration, you should find a &lt;code&gt;BeanNameViewResolver&lt;/code&gt; in your &lt;code&gt;ApplicationContext&lt;/code&gt;, so a &lt;code&gt;@Bean&lt;/code&gt; named &lt;code&gt;error&lt;/code&gt; would be one way of doing that. See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration.java&quot;&gt;&lt;code&gt;ErrorMvcAutoConfiguration&lt;/code&gt;&lt;/a&gt; for more options.</source>
          <target state="translated">用自己的方法覆盖错误页面取决于您使用的模板技术。例如，如果您使用Thymeleaf，则可以添加 &lt;code&gt;error.html&lt;/code&gt; 模板。如果使用FreeMarker，则可以添加 &lt;code&gt;error.ftlh&lt;/code&gt; 模板。通常，您需要使用 &lt;code&gt;error&lt;/code&gt; 名称解析的 &lt;code&gt;View&lt;/code&gt; 或处理 &lt;code&gt;/error&lt;/code&gt; 路径的 &lt;code&gt;@Controller&lt;/code&gt; 。除非您替换了某些默认配置，否则您应该在 &lt;code&gt;ApplicationContext&lt;/code&gt; 中找到一个 &lt;code&gt;BeanNameViewResolver&lt;/code&gt; ，因此 &lt;code&gt;@Bean&lt;/code&gt; 命名 &lt;code&gt;error&lt;/code&gt; 将是实现此目的的一种方法。有关更多选项，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration.java&quot;&gt; &lt;code&gt;ErrorMvcAutoConfiguration&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="d613d88cb2d86f484f6f82d44ac1fc60722abe20" translate="yes" xml:space="preserve">
          <source>PDF</source>
          <target state="translated">PDF</target>
        </trans-unit>
        <trans-unit id="e07f24b1c7828abaf63789683f964df8fe8fff55" translate="yes" xml:space="preserve">
          <source>Packaged</source>
          <target state="translated">Packaged</target>
        </trans-unit>
        <trans-unit id="0d75735d421f6f19c544bb6c6eaaa8d7aae13b18" translate="yes" xml:space="preserve">
          <source>Page index parameter name.</source>
          <target state="translated">页面索引参数名称。</target>
        </trans-unit>
        <trans-unit id="1f2cf4ae834f0c628349e18b20e8f08efed413a9" translate="yes" xml:space="preserve">
          <source>Page size parameter name.</source>
          <target state="translated">页面大小参数名称。</target>
        </trans-unit>
        <trans-unit id="f699f295e5ae4ac633cfa18437fed38d028b3fdb" translate="yes" xml:space="preserve">
          <source>Parameter</source>
          <target state="translated">Parameter</target>
        </trans-unit>
        <trans-unit id="d30d052ce036d32e9ae0b7578fc5eee3a2823c82" translate="yes" xml:space="preserve">
          <source>Part 1</source>
          <target state="translated">第一部分</target>
        </trans-unit>
        <trans-unit id="5a01db6f2d606f2a701b77fbab0924cc899be0e3" translate="yes" xml:space="preserve">
          <source>Part 2</source>
          <target state="translated">第二部分</target>
        </trans-unit>
        <trans-unit id="18c875c3f311afc1bde03cdce5b76fccfb218d6c" translate="yes" xml:space="preserve">
          <source>Password for authenticating with sentinel(s).</source>
          <target state="translated">用于验证哨兵的密码。</target>
        </trans-unit>
        <trans-unit id="5ab7d10b6e698bddaef020c959f959f4e13235c1" translate="yes" xml:space="preserve">
          <source>Password for the default user name.</source>
          <target state="translated">默认用户名的密码。</target>
        </trans-unit>
        <trans-unit id="5a8338303529cab96f9445a769d56015fb0163c5" translate="yes" xml:space="preserve">
          <source>Password of the database to execute DDL scripts (if different).</source>
          <target state="translated">执行DDL脚本的数据库密码(如果不同)。</target>
        </trans-unit>
        <trans-unit id="0cfab668ae507cdd4efa220cfad7ef6acb749ffd" translate="yes" xml:space="preserve">
          <source>Password of the database to execute DML scripts (if different).</source>
          <target state="translated">执行DML脚本的数据库密码(如果不同)。</target>
        </trans-unit>
        <trans-unit id="a71b5b9871dd3a9baf2238220e2b754284c072d4" translate="yes" xml:space="preserve">
          <source>Password of the private key in the key store file.</source>
          <target state="translated">钥匙存储文件中私钥的密码。</target>
        </trans-unit>
        <trans-unit id="a64c4d21903b5e259ea628ecc647cfc3a65e4be2" translate="yes" xml:space="preserve">
          <source>Password to access preferences and tools of H2 Console.</source>
          <target state="translated">密码访问H2控制台的偏好和工具。</target>
        </trans-unit>
        <trans-unit id="1bc64303c06fb7a93fcb010078e62183afcf4309" translate="yes" xml:space="preserve">
          <source>Password to use to connect to the JMS provider.</source>
          <target state="translated">连接到JMS提供者的密码。</target>
        </trans-unit>
        <trans-unit id="9a76a6fb440c4af66058671ab82a848d04ecb449" translate="yes" xml:space="preserve">
          <source>Password used to access the key in the key store.</source>
          <target state="translated">用于访问钥匙库中钥匙的密码。</target>
        </trans-unit>
        <trans-unit id="7d0c15c895dc556129d99bc9ac4ac3067d39e56e" translate="yes" xml:space="preserve">
          <source>Password used to access the key store.</source>
          <target state="translated">用于访问钥匙库的密码。</target>
        </trans-unit>
        <trans-unit id="744e5960da55cbb3be50d6581808fd3c5b725423" translate="yes" xml:space="preserve">
          <source>Password used to access the trust store.</source>
          <target state="translated">用于访问信托商店的密码。</target>
        </trans-unit>
        <trans-unit id="519e39132bb98418cc0483cc446ccf5f3c8dcffe" translate="yes" xml:space="preserve">
          <source>Path</source>
          <target state="translated">Path</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
