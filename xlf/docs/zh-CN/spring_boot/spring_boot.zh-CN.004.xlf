<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="spring_boot">
    <body>
      <group id="spring_boot">
        <trans-unit id="9ebaa271f76e72753e427bfe894a2fa558faeaf7" translate="yes" xml:space="preserve">
          <source>Path at which the console is available.</source>
          <target state="translated">控制台所在的路径。</target>
        </trans-unit>
        <trans-unit id="eac2f6c1d6508ac7e744d044341200b9fd3710cb" translate="yes" xml:space="preserve">
          <source>Path of the Oracle Kerberos cache file. Requires Flyway Teams.</source>
          <target state="translated">Oracle Kerberos缓存文件的路径。需要Flyway Teams。</target>
        </trans-unit>
        <trans-unit id="6157d9f506f2583f1b462b50ec595ef2439a7569" translate="yes" xml:space="preserve">
          <source>Path of the Oracle Kerberos config file. Requires Flyway Teams.</source>
          <target state="translated">Oracle Kerberos 配置文件的路径。需要Flyway Teams。</target>
        </trans-unit>
        <trans-unit id="adcc6c1f7a3444a977bfba4f51fb84f463fa2ba5" translate="yes" xml:space="preserve">
          <source>Path of the dispatcher servlet. Setting a custom value for this property is not compatible with the PathPatternParser matching strategy.</source>
          <target state="translated">调度器servlet的路径。为该属性设置自定义值与PathPatternParser匹配策略不兼容。</target>
        </trans-unit>
        <trans-unit id="071cacfe4658a608f42bcd329f654b81493c5eab" translate="yes" xml:space="preserve">
          <source>Path of the error controller.</source>
          <target state="translated">误差控制器的路径。</target>
        </trans-unit>
        <trans-unit id="be5ceace15b48a2ab99452873c9b54d02c498add" translate="yes" xml:space="preserve">
          <source>Path of the session cookie.</source>
          <target state="translated">会话cookie的路径。</target>
        </trans-unit>
        <trans-unit id="f16baa23c874a3e4ef673f1ab5fd41f55c1a1083" translate="yes" xml:space="preserve">
          <source>Path pattern used for static resources.</source>
          <target state="translated">用于静态资源的路径模式。</target>
        </trans-unit>
        <trans-unit id="ead184453a1816449642ebeeb828bd7c9354c8a1" translate="yes" xml:space="preserve">
          <source>Path that serves as the base URI for the application. If specified, overrides the value of &quot;@ApplicationPath&quot;.</source>
          <target state="translated">作为应用程序的基本URI的路径,如果指定,则覆盖&quot;@ApplicationPath &quot;的值。如果指定,则覆盖&quot;@ApplicationPath &quot;的值。</target>
        </trans-unit>
        <trans-unit id="94d8132504dde8eec95a114544dbab421ab61a36" translate="yes" xml:space="preserve">
          <source>Path that serves as the base URI for the services.</source>
          <target state="translated">作为服务的基本URI的路径。</target>
        </trans-unit>
        <trans-unit id="544decc4834fe665466c76072c564a20a37084cd" translate="yes" xml:space="preserve">
          <source>Path to properties file (for example, &lt;code&gt;classpath:loader.properties&lt;/code&gt;). It defaults to &lt;code&gt;loader.properties&lt;/code&gt;.</source>
          <target state="translated">属性文件的路径（例如， &lt;code&gt;classpath:loader.properties&lt;/code&gt; ）。它默认为 &lt;code&gt;loader.properties&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="489523db3fc005640b35929ea5d55d3a7af5ed54" translate="yes" xml:space="preserve">
          <source>Path to the JVM key store that holds the certificates.</source>
          <target state="translated">通往存放证书的 JVM 密钥库的路径。</target>
        </trans-unit>
        <trans-unit id="3e9c9331aa66b37110ddd23002e715cbf13acdf8" translate="yes" xml:space="preserve">
          <source>Path to the SQL file to use to initialize the database schema.</source>
          <target state="translated">用于初始化数据库模式的SQL文件的路径。</target>
        </trans-unit>
        <trans-unit id="90e35848a79c6d4e9be4cac5e82f32a759f8176c" translate="yes" xml:space="preserve">
          <source>Path to the custom schema.</source>
          <target state="translated">自定义模式的路径。</target>
        </trans-unit>
        <trans-unit id="c3e0477c9f98e1dfb53e3efa9766f1d911a37712" translate="yes" xml:space="preserve">
          <source>Path to the file that holds the trusted certificates.</source>
          <target state="translated">存放可信证书的文件的路径。</target>
        </trans-unit>
        <trans-unit id="bc66de3a50b27b996e5d98600e07d3f2eb9523ac" translate="yes" xml:space="preserve">
          <source>Path to the key store that holds the SSL certificate (typically a jks file).</source>
          <target state="translated">存放SSL证书的密钥存储路径(通常是一个jks文件)。</target>
        </trans-unit>
        <trans-unit id="0188178b15cfb2dcddabc03fab8a338c867de716" translate="yes" xml:space="preserve">
          <source>Path to the key store that holds the SSL certificate.</source>
          <target state="translated">存放SSL证书的密钥库的路径。</target>
        </trans-unit>
        <trans-unit id="5ef12e59ccfcdee8eb2c6abcce4cd91e12600c29" translate="yes" xml:space="preserve">
          <source>Path under which RSocket handles requests (only works with websocket transport).</source>
          <target state="translated">RSocket 处理请求的路径(仅适用于 websocket 传输)。</target>
        </trans-unit>
        <trans-unit id="e99f1a0a72aa8a864691e44a1e2e3fae99b7bda7" translate="yes" xml:space="preserve">
          <source>Path used to compute the available disk space.</source>
          <target state="translated">用于计算可用磁盘空间的路径。</target>
        </trans-unit>
        <trans-unit id="08eba626c8e9e2d99d6e87d856019be83d08759c" translate="yes" xml:space="preserve">
          <source>Pattern for rolled-over log file names (default &lt;code&gt;${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz&lt;/code&gt;).</source>
          <target state="translated">滚动日志文件名的模式（默认 &lt;code&gt;${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="760a964bc80713422fe7fda24a30845d8db51d60" translate="yes" xml:space="preserve">
          <source>Pattern for rolled-over log file names.</source>
          <target state="translated">滚动式日志文件名的模式。</target>
        </trans-unit>
        <trans-unit id="3d47883aba87c16c186de494538123dcbd324c08" translate="yes" xml:space="preserve">
          <source>Patterns that should be excluded from triggering a full restart.</source>
          <target state="translated">应排除在触发完全重启之外的模式。</target>
        </trans-unit>
        <trans-unit id="6e29b8912588a439c918a4cd8b8068ead9101f46" translate="yes" xml:space="preserve">
          <source>Perform placeholder replacement in migration scripts.</source>
          <target state="translated">在迁移脚本中执行占位符替换。</target>
        </trans-unit>
        <trans-unit id="9d47ea0f34dcf266a50810fa0f546d599337aefc" translate="yes" xml:space="preserve">
          <source>Performs a thread dump.</source>
          <target state="translated">执行线程转储。</target>
        </trans-unit>
        <trans-unit id="34adaeed3fbc0179d7e3b3ddba686f51a0581ebb" translate="yes" xml:space="preserve">
          <source>Permits any additional value to be provided.</source>
          <target state="translated">允许提供任何附加值。</target>
        </trans-unit>
        <trans-unit id="4dcd2bcd0162613aeb2891ba2d67651e805f651a" translate="yes" xml:space="preserve">
          <source>Pixel mode to use when rendering the image.</source>
          <target state="translated">渲染图像时要使用的像素模式。</target>
        </trans-unit>
        <trans-unit id="436858800d12751ece4577cf3420fc54118da098" translate="yes" xml:space="preserve">
          <source>Placeholder replacement is done from System and environment variables plus the properties file itself on all values before use.</source>
          <target state="translated">占位符替换是在使用前从系统和环境变量加上属性文件本身对所有值进行替换。</target>
        </trans-unit>
        <trans-unit id="f941d63d03e05e1924c52d9cfdbe54e102181c20" translate="yes" xml:space="preserve">
          <source>Placeholders and their replacements to apply to sql migration scripts.</source>
          <target state="translated">占位符和它们的替换适用于sql迁移脚本。</target>
        </trans-unit>
        <trans-unit id="2cf884fd9e321d91af2340f13924f0ca6c725fe6" translate="yes" xml:space="preserve">
          <source>Platform to use in the DDL or DML scripts (such as schema-${platform}.sql or data-${platform}.sql).</source>
          <target state="translated">在DDL或DML脚本中使用的平台(如schema-${platform}.sql或data-${platform}.sql)。</target>
        </trans-unit>
        <trans-unit id="c37e0fe5716e04521fd9af59ade8fd8b9ceb663f" translate="yes" xml:space="preserve">
          <source>Please refer to the plugin&amp;rsquo;s documentation to learn more:</source>
          <target state="translated">请参考插件的文档以了解更多信息：</target>
        </trans-unit>
        <trans-unit id="6144a3c71a76f6666362338639a2ef47304bc530" translate="yes" xml:space="preserve">
          <source>Plugging RSocket into a web server is only supported with Reactor Netty, as RSocket itself is built with that library.</source>
          <target state="translated">只有Reactor Netty才支持将RSocket插入Web服务器,因为RSocket本身就是用该库构建的。</target>
        </trans-unit>
        <trans-unit id="4dcfb1d82ad5ad69017c23368e06b7e348a51690" translate="yes" xml:space="preserve">
          <source>Pooled connections older than this threshold will be closed and removed from the pool.</source>
          <target state="translated">超过此阈值的池化连接将被关闭并从池中移除。</target>
        </trans-unit>
        <trans-unit id="7e01cb071750dd5a69dc1c2ff850032cf6a6df64" translate="yes" xml:space="preserve">
          <source>Pooled connections that have been idle in the pool for longer than this threshold will be tested before they are used again.</source>
          <target state="translated">池中闲置时间超过此阈值的池连接将在再次使用前被测试。</target>
        </trans-unit>
        <trans-unit id="682513728f934b16477d3cded12854878f443871" translate="yes" xml:space="preserve">
          <source>Port of the Ganglia server to receive exported metrics.</source>
          <target state="translated">Ganglia服务器接收导出指标的端口。</target>
        </trans-unit>
        <trans-unit id="9f18929e69113b56d96d0069f34fd0fbf342806f" translate="yes" xml:space="preserve">
          <source>Port of the Graphite server to receive exported metrics.</source>
          <target state="translated">接收导出指标的 Graphite 服务器的端口。</target>
        </trans-unit>
        <trans-unit id="99312c703de7c16fc3c87175f9399ff0838a3bed" translate="yes" xml:space="preserve">
          <source>Port of the StatsD server to receive exported metrics.</source>
          <target state="translated">StatsD服务器的端口,用于接收导出的指标。</target>
        </trans-unit>
        <trans-unit id="eb347fd6169f5894b1783a1aaed24ac6c56fc511" translate="yes" xml:space="preserve">
          <source>Port to use if a contact point does not specify one.</source>
          <target state="translated">如果联络点没有指定端口,则使用该端口。</target>
        </trans-unit>
        <trans-unit id="bb843c91c4d8f380e86d3b1203d3d4effb9774fe" translate="yes" xml:space="preserve">
          <source>Position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).</source>
          <target state="translated">这个资源在两阶段提交中应该占据的位置(总是第一个是Integer.MIN_VALUE,最后一个是Integer.MAX_VALUE)。</target>
        </trans-unit>
        <trans-unit id="26de5dbefb8cb2d6bf1be8a2af044067a8db27da" translate="yes" xml:space="preserve">
          <source>Position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, and always last is Integer.MAX_VALUE).</source>
          <target state="translated">这个资源在两阶段提交中应该占据的位置(总是第一个是Integer.MIN_VALUE,最后一个是Integer.MAX_VALUE)。</target>
        </trans-unit>
        <trans-unit id="1d391c6eba1c27e61f0554a975a0adec40319be9" translate="yes" xml:space="preserve">
          <source>Preferred JSON mapper to use for HTTP message conversion. By default, auto-detected according to the environment.</source>
          <target state="translated">首选用于HTTP消息转换的JSON映射器。默认情况下,根据环境自动检测。</target>
        </trans-unit>
        <trans-unit id="ef86ab6c4d913c41194f07f583c76a0f97de11a6" translate="yes" xml:space="preserve">
          <source>Prefix for the listener's consumer client.id property.</source>
          <target state="translated">监听器的消费者client.id属性的前缀。</target>
        </trans-unit>
        <trans-unit id="ce4c650b31058e6c4f40a1261ea25349ea50957b" translate="yes" xml:space="preserve">
          <source>Prefix of placeholders in migration scripts.</source>
          <target state="translated">迁移脚本中占位符的前缀。</target>
        </trans-unit>
        <trans-unit id="1e4c21b9163398f36682be6f7edc385ca63ce78e" translate="yes" xml:space="preserve">
          <source>Prefix that gets prepended to view names when building a URL.</source>
          <target state="translated">当建立一个URL时,前缀被添加到视图名称中。</target>
        </trans-unit>
        <trans-unit id="112ca6ed6745cac6619a60c8a4577b1051e03798" translate="yes" xml:space="preserve">
          <source>Prefix to apply to template names.</source>
          <target state="translated">适用于模板名称的前缀。</target>
        </trans-unit>
        <trans-unit id="e538d3d88e9dd3512dba997fc27d7bc2a32d5f44" translate="yes" xml:space="preserve">
          <source>Prefix to separate the index name from the date format used for rolling indices.</source>
          <target state="translated">前缀用于将索引名称与滚动索引使用的日期格式分开。</target>
        </trans-unit>
        <trans-unit id="bdaba481e5a2a07f538bdd9badf8d61d220082f9" translate="yes" xml:space="preserve">
          <source>Prefix to use for the names of newly created threads.</source>
          <target state="translated">用于新创建的线程名称的前缀。</target>
        </trans-unit>
        <trans-unit id="2384452ed81545a5494f37ee2823f6eefcfb9dd2" translate="yes" xml:space="preserve">
          <source>Prefixes for single-line comments in SQL initialization scripts.</source>
          <target state="translated">SQL初始化脚本中单行注释的前缀。</target>
        </trans-unit>
        <trans-unit id="ddbf9e3649895b4c377a6251db4e7b3be4d529a3" translate="yes" xml:space="preserve">
          <source>Prior to Spring Boot 1.3, a single &lt;code&gt;deprecated&lt;/code&gt; boolean attribute can be used instead of the &lt;code&gt;deprecation&lt;/code&gt; element. This is still supported in a deprecated fashion and should no longer be used. If no reason and replacement are available, an empty &lt;code&gt;deprecation&lt;/code&gt; object should be set.</source>
          <target state="translated">在Spring Boot 1.3之前，可以使用单个 &lt;code&gt;deprecated&lt;/code&gt; boolean属性来代替 &lt;code&gt;deprecation&lt;/code&gt; 元素。仍然以不推荐的方式支持此功能，并且不应再使用它。如果没有原因和可用的替代方法，则应设置一个空的 &lt;code&gt;deprecation&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="757dd5bceab5778721fbfeee215f88fd77bfe747" translate="yes" xml:space="preserve">
          <source>Priority of a message when sending. Enables QoS (Quality of Service) when set.</source>
          <target state="translated">发送消息时的优先级。设置时启用QoS(服务质量)。</target>
        </trans-unit>
        <trans-unit id="12f4c13a6a06f999cc56eb966c94f71ef2658a3f" translate="yes" xml:space="preserve">
          <source>Process</source>
          <target state="translated">Process</target>
        </trans-unit>
        <trans-unit id="909ea1e11d8b007c4e3a264a8d8063fa906df8f3" translate="yes" xml:space="preserve">
          <source>Process ID.</source>
          <target state="translated">流程ID:</target>
        </trans-unit>
        <trans-unit id="d1cb8e585e1c6578cb7e1b4c4edb1e4ded9ec906" translate="yes" xml:space="preserve">
          <source>Produces</source>
          <target state="translated">Produces</target>
        </trans-unit>
        <trans-unit id="ba6d99cac0a2fe91456274e1cfc104ed3b0c77ee" translate="yes" xml:space="preserve">
          <source>Production database connections can also be auto-configured by using a pooling &lt;code&gt;DataSource&lt;/code&gt;. Spring Boot uses the following algorithm for choosing a specific implementation:</source>
          <target state="translated">生产数据库连接也可以通过使用池化 &lt;code&gt;DataSource&lt;/code&gt; 进行自动配置。Spring Boot使用以下算法来选择特定的实现：</target>
        </trans-unit>
        <trans-unit id="8c572ba2b451f53f61973b744cb85db0e68bf563" translate="yes" xml:space="preserve">
          <source>Production jars</source>
          <target state="translated">生产罐</target>
        </trans-unit>
        <trans-unit id="f81bc5263a0d0e7ee99a0b0428d4a5439af5dec8" translate="yes" xml:space="preserve">
          <source>Production ready features</source>
          <target state="translated">生产就绪的特点</target>
        </trans-unit>
        <trans-unit id="2641416d617d6a97b0c284168c02d1cf9d523aa2" translate="yes" xml:space="preserve">
          <source>Profile expressions that should match for the document to be included.</source>
          <target state="translated">应匹配的配置文件表达式,以便文档被收录。</target>
        </trans-unit>
        <trans-unit id="4cb810e356d8a20ceff282c7b5d9535f00e457c2" translate="yes" xml:space="preserve">
          <source>Profile-specific application properties</source>
          <target state="translated">特定应用属性</target>
        </trans-unit>
        <trans-unit id="c8a546a256c7df1966173fd47368947e8f89373e" translate="yes" xml:space="preserve">
          <source>Profile-specific properties are loaded from the same locations as standard &lt;code&gt;application.properties&lt;/code&gt;, with profile-specific files always overriding the non-specific ones. If several profiles are specified, a last-wins strategy applies. For example, if profiles &lt;code&gt;prod,live&lt;/code&gt; are specified by the &lt;code&gt;spring.profiles.active&lt;/code&gt; property, values in &lt;code&gt;application-prod.properties&lt;/code&gt; can be overridden by those in &lt;code&gt;application-live.properties&lt;/code&gt;.</source>
          <target state="translated">特定于配置文件的属性是从与标准 &lt;code&gt;application.properties&lt;/code&gt; 相同的位置加载的，特定于配置文件的文件始终会覆盖非特定文件。如果指定了多个配置文件，则采用后赢策略。例如，如果配置文件 &lt;code&gt;prod,live&lt;/code&gt; 由指定 &lt;code&gt;spring.profiles.active&lt;/code&gt; 属性，在值 &lt;code&gt;application-prod.properties&lt;/code&gt; 可以通过那些覆盖 &lt;code&gt;application-live.properties&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0876ee5b41596457e1cf26440a043cf06d599fe1" translate="yes" xml:space="preserve">
          <source>Profile-specific variants of both &lt;code&gt;application.properties&lt;/code&gt; (or &lt;code&gt;application.yml&lt;/code&gt;) and files referenced through &lt;code&gt;@ConfigurationProperties&lt;/code&gt; are considered as files and loaded. See &quot;&lt;a href=&quot;#boot-features-external-config-files-profile-specific&quot;&gt;Profile Specific Files&lt;/a&gt;&quot; for details.</source>
          <target state="translated">&lt;code&gt;application.properties&lt;/code&gt; （或 &lt;code&gt;application.yml&lt;/code&gt; ）和通过 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 引用的文件的特定于配置文件的变体都被视为文件并已加载。有关详细信息，请参见&amp;ldquo;&lt;a href=&quot;#boot-features-external-config-files-profile-specific&quot;&gt;特定&lt;/a&gt;于配置文件的文件&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="0c2a93009914a1572e318fcd60650e5a2cc3d248" translate="yes" xml:space="preserve">
          <source>Profiles</source>
          <target state="translated">Profiles</target>
        </trans-unit>
        <trans-unit id="2d753c942b78f75f3984f32efda4b1014db56601" translate="yes" xml:space="preserve">
          <source>Profiles are not supported in devtools properties/yaml files.</source>
          <target state="translated">devtools属性/yaml文件中不支持配置文件。</target>
        </trans-unit>
        <trans-unit id="6a801bb7d80fde6a5f568af77f5a938b6425301c" translate="yes" xml:space="preserve">
          <source>Profiles, Logging, Security, Caching, Spring Integration, Testing, and more.</source>
          <target state="translated">配置文件、日志、安全、缓存、Spring集成、测试等。</target>
        </trans-unit>
        <trans-unit id="616ea68ebf6dcdaf933a32fa37bc6918f74e4afb" translate="yes" xml:space="preserve">
          <source>Programmatic Customization</source>
          <target state="translated">程序化定制</target>
        </trans-unit>
        <trans-unit id="be4b3612509729a447b979bc5ed9ac3780e2d80e" translate="yes" xml:space="preserve">
          <source>Programmatically</source>
          <target state="translated">Programmatically</target>
        </trans-unit>
        <trans-unit id="1993279a8844bab754404d01a1d195ad5c57849b" translate="yes" xml:space="preserve">
          <source>Programmatically, per application, by calling the &lt;code&gt;addListeners&lt;/code&gt; and &lt;code&gt;addInitializers&lt;/code&gt; methods on &lt;code&gt;SpringApplication&lt;/code&gt; before you run it.</source>
          <target state="translated">在运行每个应用程序之前，通过在 &lt;code&gt;addInitializers&lt;/code&gt; 上调用 &lt;code&gt;addListeners&lt;/code&gt; 和addInitializers方法以 &lt;code&gt;SpringApplication&lt;/code&gt; 方式对其进行操作。</target>
        </trans-unit>
        <trans-unit id="b39947d466a8aea38adca1e68011690fbb14d7f0" translate="yes" xml:space="preserve">
          <source>Prometheus</source>
          <target state="translated">Prometheus</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="1be6c1b5af58d3c76d44f89994b708a6df3ae3fe" translate="yes" xml:space="preserve">
          <source>Properties Files</source>
          <target state="translated">属性文件</target>
        </trans-unit>
        <trans-unit id="b7b77017ccdbe15a8a6d1caae4b527b436fb6cf2" translate="yes" xml:space="preserve">
          <source>Properties defined in external configuration override the values specified with the Java API, with the notable exception of the sources used to create the &lt;code&gt;ApplicationContext&lt;/code&gt;. Consider the following application:</source>
          <target state="translated">外部配置中定义的属性会覆盖用Java API指定的值，但用于创建 &lt;code&gt;ApplicationContext&lt;/code&gt; 的源除外。考虑以下应用程序：</target>
        </trans-unit>
        <trans-unit id="81af0787757928b4424e84301cb89d5fa51f9e18" translate="yes" xml:space="preserve">
          <source>Properties files are only ever loaded once. If you&amp;rsquo;ve already directly &lt;a href=&quot;#boot-features-external-config-files-importing&quot;&gt;imported&lt;/a&gt; a profile specific property files then it won&amp;rsquo;t be imported a second time.</source>
          <target state="translated">属性文件仅被加载一次。如果您已经直接&lt;a href=&quot;#boot-features-external-config-files-importing&quot;&gt;导入&lt;/a&gt;了特定于配置文件的属性文件，则不会再次导入。</target>
        </trans-unit>
        <trans-unit id="bced31bef77ed9e96cb77284bcb152fe262d8080" translate="yes" xml:space="preserve">
          <source>Properties from &lt;code&gt;SPRING_APPLICATION_JSON&lt;/code&gt; (inline JSON embedded in an environment variable or system property).</source>
          <target state="translated">来自 &lt;code&gt;SPRING_APPLICATION_JSON&lt;/code&gt; 的属性（嵌入在环境变量或系统属性中的内联JSON）。</target>
        </trans-unit>
        <trans-unit id="8f614d606503c80093b2f5e9916a5f2429a6a50f" translate="yes" xml:space="preserve">
          <source>Properties set in this way override any configuration item that Spring Boot explicitly supports.</source>
          <target state="translated">以这种方式设置的属性会覆盖Spring Boot明确支持的任何配置项。</target>
        </trans-unit>
        <trans-unit id="aff53a2dd3034f32abb12b41beff9a78bc4d4ac0" translate="yes" xml:space="preserve">
          <source>Properties that are added late to the environment, such as when using &lt;code&gt;@PropertySource&lt;/code&gt;, will not be taken into account.</source>
          <target state="translated">较晚添加到环境的属性（例如使用 &lt;code&gt;@PropertySource&lt;/code&gt; 时）将不被考虑。</target>
        </trans-unit>
        <trans-unit id="b5a8e5e08478f7ad39961346108961deb3b26660" translate="yes" xml:space="preserve">
          <source>Properties that should be set on the underlying implementation.</source>
          <target state="translated">应在底层执行中设置的属性。</target>
        </trans-unit>
        <trans-unit id="91db73736cf5796310ce43ef706f1ae919184689" translate="yes" xml:space="preserve">
          <source>Properties that use the &lt;code&gt;[index]&lt;/code&gt; notation can be bound to Java &lt;code&gt;List&lt;/code&gt; or &lt;code&gt;Set&lt;/code&gt; objects using Spring Boot&amp;rsquo;s &lt;code&gt;Binder&lt;/code&gt; class. For more details see the &amp;ldquo;&lt;a href=&quot;#boot-features-external-config-typesafe-configuration-properties&quot;&gt;Type-safe Configuration Properties&lt;/a&gt;&amp;rdquo; section below.</source>
          <target state="translated">可以使用Spring Boot的 &lt;code&gt;Binder&lt;/code&gt; 类将使用 &lt;code&gt;[index]&lt;/code&gt; 表示法的属性绑定到Java &lt;code&gt;List&lt;/code&gt; 或 &lt;code&gt;Set&lt;/code&gt; 对象。有关更多详细信息，请参见下面的&amp;ldquo;&lt;a href=&quot;#boot-features-external-config-typesafe-configuration-properties&quot;&gt;类型安全配置属性&lt;/a&gt;&amp;rdquo;部分。</target>
        </trans-unit>
        <trans-unit id="16b89fea99bbff25d8f130951d257c52cd304ece" translate="yes" xml:space="preserve">
          <source>Properties to pass to the JDBC driver. Requires Flyway Teams.</source>
          <target state="translated">要传递给JDBC驱动程序的属性。需要Flyway Teams。</target>
        </trans-unit>
        <trans-unit id="6700dd433fa60b092061eba735b0b2ae268db2ce" translate="yes" xml:space="preserve">
          <source>Properties to pass to the XA data source.</source>
          <target state="translated">要传递给XA数据源的属性。</target>
        </trans-unit>
        <trans-unit id="9ae33a7d0ecb82cae8f04aafab20bf90425b7b8c" translate="yes" xml:space="preserve">
          <source>Property</source>
          <target state="translated">Property</target>
        </trans-unit>
        <trans-unit id="456de7d4a67d16daa52acc4a0a123d509753f220" translate="yes" xml:space="preserve">
          <source>Property Conditions</source>
          <target state="translated">物业条件</target>
        </trans-unit>
        <trans-unit id="b381d53ef37e3b57ffe4c44a926ebedf8343b7ea" translate="yes" xml:space="preserve">
          <source>Property Source</source>
          <target state="translated">财产来源</target>
        </trans-unit>
        <trans-unit id="9f98b9d657a7378229a40316c7705110cfa0004d" translate="yes" xml:space="preserve">
          <source>Property contributions can come from additional jar files on your classpath, so you should not consider this an exhaustive list. Also, you can define your own properties.</source>
          <target state="translated">属性的贡献可能来自于你的classpath上的其他jar文件,所以你不应该认为这是一个详尽的列表。另外,你也可以定义你自己的属性。</target>
        </trans-unit>
        <trans-unit id="1d8c4c247df42de0e667a1cfaa9c325a5a0f5d02" translate="yes" xml:space="preserve">
          <source>Property file separators must not have any leading whitespace and must have exactly three hyphen characters. The lines immediately before and after the separator must not be comments.</source>
          <target state="translated">属性文件分隔符不得有任何前导空格,必须有正好三个连字符。分隔符前后的行不得为注释。</target>
        </trans-unit>
        <trans-unit id="1d65259edf672a6cd9b7ddf3fae3c60e847f3dd2" translate="yes" xml:space="preserve">
          <source>Property values can be injected directly into your beans by using the &lt;code&gt;@Value&lt;/code&gt; annotation, accessed through Spring&amp;rsquo;s &lt;code&gt;Environment&lt;/code&gt; abstraction, or be &lt;a href=&quot;#boot-features-external-config-typesafe-configuration-properties&quot;&gt;bound to structured objects&lt;/a&gt; through &lt;code&gt;@ConfigurationProperties&lt;/code&gt;.</source>
          <target state="translated">属性值可以使用 &lt;code&gt;@Value&lt;/code&gt; 批注直接注入到bean中，可以通过Spring的 &lt;code&gt;Environment&lt;/code&gt; 抽象访问，也可以通过 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; &lt;a href=&quot;#boot-features-external-config-typesafe-configuration-properties&quot;&gt;绑定到结构化对象&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="394bd0f1037a6e7f0e572a140410edc2734cded1" translate="yes" xml:space="preserve">
          <source>Protocol of the StatsD server to receive exported metrics.</source>
          <target state="translated">StatsD服务器接收导出指标的协议。</target>
        </trans-unit>
        <trans-unit id="aa4d4a0e79496135d9bfeb2f152287f7299151f0" translate="yes" xml:space="preserve">
          <source>Protocol to use while shipping data to Graphite.</source>
          <target state="translated">向 Graphite 发送数据时使用的协议。</target>
        </trans-unit>
        <trans-unit id="8b6bb1fae4ca0cd6620268571fa96da24777866c" translate="yes" xml:space="preserve">
          <source>Protocol used by the SMTP server.</source>
          <target state="translated">SMTP服务器使用的协议。</target>
        </trans-unit>
        <trans-unit id="204bb3e384e28f75cc324b8289e8687bc3c1d7d1" translate="yes" xml:space="preserve">
          <source>Provide a radically faster and widely accessible getting-started experience for all Spring development.</source>
          <target state="translated">为所有的Spring开发提供更快、更广泛的入门体验。</target>
        </trans-unit>
        <trans-unit id="5439d08d17db3e05d2f3839c0d21f2abde286a2f" translate="yes" xml:space="preserve">
          <source>Provide a range of non-functional features that are common to large classes of projects (such as embedded servers, security, metrics, health checks, and externalized configuration).</source>
          <target state="translated">提供一系列大类项目常见的非功能性功能(如嵌入式服务器、安全、指标、健康检查和外部化配置)。</target>
        </trans-unit>
        <trans-unit id="88682f89b5b6eee4e5314e6cfdd1761ff044cd96" translate="yes" xml:space="preserve">
          <source>Provide a system property to map embedded broker addresses into &lt;code&gt;spring.kafka.bootstrap-servers&lt;/code&gt; in the test class:</source>
          <target state="translated">提供一个系统属性，以将嵌入式代理地址映射到测试类中的 &lt;code&gt;spring.kafka.bootstrap-servers&lt;/code&gt; 中：</target>
        </trans-unit>
        <trans-unit id="4dc10956a644c9aa8c39601c2307dc1a4f3fa28c" translate="yes" xml:space="preserve">
          <source>Provider for the key store.</source>
          <target state="translated">钥匙库的提供者。</target>
        </trans-unit>
        <trans-unit id="61004517dc87a9f281dbadbe0a0989606aa2902d" translate="yes" xml:space="preserve">
          <source>Provider for the trust store.</source>
          <target state="translated">信托商店的提供者。</target>
        </trans-unit>
        <trans-unit id="7d8311903fe14a9d6afb308a78d29dc0bc451fb7" translate="yes" xml:space="preserve">
          <source>Providers are a powerful way to attach semantics to a property. In this section, we define the official providers that you can use for your own hints. However, your favorite IDE may implement some of these or none of them. Also, it could eventually provide its own.</source>
          <target state="translated">提供者是将语义附加到属性上的一种强大方式。在本节中,我们定义了官方的提供者,你可以用它们来做你自己的提示。然而,你最喜欢的IDE可能会实现其中的一些或没有。另外,它最终也可以提供自己的。</target>
        </trans-unit>
        <trans-unit id="9db0b745b6fa2951c35528cc5a431b74d851a2e8" translate="yes" xml:space="preserve">
          <source>Proxies</source>
          <target state="translated">Proxies</target>
        </trans-unit>
        <trans-unit id="4c66b6def975e7c482178e8a0f2381f30fd29a27" translate="yes" xml:space="preserve">
          <source>Publish a cumulative histogram with buckets defined by your service-level objectives.</source>
          <target state="translated">用您的服务级目标定义的桶发布累积直方图。</target>
        </trans-unit>
        <trans-unit id="64afe51235c7bfc7cab683752fe1c83aa3835597" translate="yes" xml:space="preserve">
          <source>Publish less histogram buckets by clamping the range of expected values.</source>
          <target state="translated">通过箝制预期值的范围来发布更少的直方图桶。</target>
        </trans-unit>
        <trans-unit id="b4971e1967702141ce94cb0761f16f3e00ce941a" translate="yes" xml:space="preserve">
          <source>Publish percentile values computed in your application</source>
          <target state="translated">发布在您的应用程序中计算的百分位数。</target>
        </trans-unit>
        <trans-unit id="a0fb821bdaf93ed9a1f1e920acfb2840eff5b153" translate="yes" xml:space="preserve">
          <source>Purpose</source>
          <target state="translated">Purpose</target>
        </trans-unit>
        <trans-unit id="84692c4c6a89cbcac66be9ed7aab6a96f5ebdc42" translate="yes" xml:space="preserve">
          <source>Quartz Scheduler configuration can be customized using &lt;code&gt;spring.quartz&lt;/code&gt; properties and &lt;code&gt;SchedulerFactoryBeanCustomizer&lt;/code&gt; beans, which allow programmatic &lt;code&gt;SchedulerFactoryBean&lt;/code&gt; customization. Advanced Quartz configuration properties can be customized using &lt;code&gt;spring.quartz.properties.*&lt;/code&gt;.</source>
          <target state="translated">可以使用 &lt;code&gt;spring.quartz&lt;/code&gt; 属性和 &lt;code&gt;SchedulerFactoryBeanCustomizer&lt;/code&gt; bean来定制Quartz Scheduler配置，这允许以编程方式进行 &lt;code&gt;SchedulerFactoryBean&lt;/code&gt; 定制。可以使用 &lt;code&gt;spring.quartz.properties.*&lt;/code&gt; 定制高级Quartz配置属性。</target>
        </trans-unit>
        <trans-unit id="3041fc8b0f02aa7d9f032a46c21daa1df5ce82f1" translate="yes" xml:space="preserve">
          <source>Quartz job store type.</source>
          <target state="translated">石英工作店型。</target>
        </trans-unit>
        <trans-unit id="81b54d8b1f0d6ed299ebec5f4235dad35af34d39" translate="yes" xml:space="preserve">
          <source>Queries consistency level.</source>
          <target state="translated">查询一致性水平。</target>
        </trans-unit>
        <trans-unit id="f5249454e35b15092fa5c20dc269dc7ea1417f3b" translate="yes" xml:space="preserve">
          <source>Queries serial consistency level.</source>
          <target state="translated">查询序列一致性级别。</target>
        </trans-unit>
        <trans-unit id="ae9559f01ca945b2e087e669e8c4f241ada46936" translate="yes" xml:space="preserve">
          <source>Query parameter name to use when &quot;favor-parameter&quot; is enabled.</source>
          <target state="translated">启用 &quot;favor-parameter &quot;时要使用的查询参数名称。</target>
        </trans-unit>
        <trans-unit id="19f1ce2deeb0d105dd5f104fc0c1eb430b147e7e" translate="yes" xml:space="preserve">
          <source>Query timeout. Default is to use the JDBC driver's default configuration. If a duration suffix is not specified, seconds will be used.</source>
          <target state="translated">查询超时。默认使用JDBC驱动程序的默认配置。如果没有指定持续时间后缀,将使用秒。</target>
        </trans-unit>
        <trans-unit id="5cb3e9d1303cf9aa91e9cbc77a6502ec2de43401" translate="yes" xml:space="preserve">
          <source>Queue capacity. An unbounded capacity does not increase the pool and therefore ignores the &quot;max-size&quot; property.</source>
          <target state="translated">队列容量。无限制的容量不会增加队列池,因此忽略了 &quot;最大容量 &quot;属性。</target>
        </trans-unit>
        <trans-unit id="9f805f55318f6b564324cb80404c379f54a314f9" translate="yes" xml:space="preserve">
          <source>R2DBC URL of the database. database name, username, password and pooling options specified in the url take precedence over individual options.</source>
          <target state="translated">数据库名称、用户名、密码和url中指定的池选项优先于单个选项。</target>
        </trans-unit>
        <trans-unit id="b9fe43b6dbcba6e77f0a1d2317729e27a3c5197b" translate="yes" xml:space="preserve">
          <source>RSocket transport protocol.</source>
          <target state="translated">RSocket传输协议。</target>
        </trans-unit>
        <trans-unit id="f948d1003a18b45715c7c30bab0c512b3f836d3d" translate="yes" xml:space="preserve">
          <source>RabbitMQ configuration is controlled by external configuration properties in &lt;code&gt;spring.rabbitmq.*&lt;/code&gt;. For example, you might declare the following section in &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="translated">RabbitMQ配置由 &lt;code&gt;spring.rabbitmq.*&lt;/code&gt; 外部配置属性控制。例如，您可以在 &lt;code&gt;application.properties&lt;/code&gt; 中声明以下部分：</target>
        </trans-unit>
        <trans-unit id="fc711932f34cf4b4b529b6d97cb39eadc48a7c2f" translate="yes" xml:space="preserve">
          <source>RabbitMQ host. Ignored if an address is set.</source>
          <target state="translated">RabbitMQ主机。如果设置了地址,则忽略。</target>
        </trans-unit>
        <trans-unit id="7face86711fce38c7786bcec6cf0ea7eb5fcb706" translate="yes" xml:space="preserve">
          <source>RabbitMQ port. Ignored if an address is set. Default to 5672, or 5671 if SSL is enabled.</source>
          <target state="translated">RabbitMQ 端口。如果设置了地址,则忽略。默认为5672,如果启用了SSL,则为5671。</target>
        </trans-unit>
        <trans-unit id="b8e475188353199a1fc80d67a72c1b0899243f26" translate="yes" xml:space="preserve">
          <source>RabbitMQ.</source>
          <target state="translated">RabbitMQ.</target>
        </trans-unit>
        <trans-unit id="86029eff0cccbb1a72a84484392ad6281f5a1382" translate="yes" xml:space="preserve">
          <source>Range requests are not supported when using Jersey.</source>
          <target state="translated">使用Jersey时不支持范围请求。</target>
        </trans-unit>
        <trans-unit id="1cac9421f644ed14422fe00cbb0bbeb3f34ff509" translate="yes" xml:space="preserve">
          <source>Rather than hardcoding some properties that are also specified in your project&amp;rsquo;s build configuration, you can automatically expand them by instead using the existing build configuration. This is possible in both Maven and Gradle.</source>
          <target state="translated">除了可以对项目的构建配置中还指定的某些属性进行硬编码之外，您可以通过使用现有构建配置来自动扩展它们。这在Maven和Gradle中都是可能的。</target>
        </trans-unit>
        <trans-unit id="1ec8aaef1812626e23ef5aee77f26baf9e23738a" translate="yes" xml:space="preserve">
          <source>Rather than hardcoding those values, you could also &lt;a href=&quot;howto#howto-automatic-expansion&quot;&gt;expand info properties at build time&lt;/a&gt;.</source>
          <target state="translated">除了对这些值进行硬编码之外，您还可以&lt;a href=&quot;howto#howto-automatic-expansion&quot;&gt;在构建时扩展info属性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="25e710262e41a8a51d771ab7722c97f6956961e2" translate="yes" xml:space="preserve">
          <source>Rather than using &lt;code&gt;db/migration&lt;/code&gt;, the preceding configuration sets the directory to use according to the type of the database (such as &lt;code&gt;db/migration/mysql&lt;/code&gt; for MySQL). The list of supported databases is available in &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java&quot;&gt;&lt;code&gt;DatabaseDriver&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">前面的配置没有使用 &lt;code&gt;db/migration&lt;/code&gt; ，而是根据数据库的类型（例如MySQL的 &lt;code&gt;db/migration/mysql&lt;/code&gt; ）设置要使用的目录。&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java&quot;&gt; &lt;code&gt;DatabaseDriver&lt;/code&gt; 中&lt;/a&gt;提供了受支持的数据库列表。</target>
        </trans-unit>
        <trans-unit id="52cbaa424ebb36314e819d2c0986892fed0ded71" translate="yes" xml:space="preserve">
          <source>Reactive stack</source>
          <target state="translated">被动式堆栈</target>
        </trans-unit>
        <trans-unit id="30fccb31f329cdebfdaa82fa0cebe1abcefa9a2d" translate="yes" xml:space="preserve">
          <source>Reactor</source>
          <target state="translated">Reactor</target>
        </trans-unit>
        <trans-unit id="fdec46122520fd70d9d7f34b5aa82cbd0420ccfe" translate="yes" xml:space="preserve">
          <source>Read and Write Socket timeout.</source>
          <target state="translated">读写Socket超时。</target>
        </trans-unit>
        <trans-unit id="40c40369e29dc8e1b66dc29ec975fb48f3bab8a9" translate="yes" xml:space="preserve">
          <source>Read timeout for requests to this backend.</source>
          <target state="translated">读取对该后端请求的超时。</target>
        </trans-unit>
        <trans-unit id="ea28d4662031e2631099071c05b0afb8463a37a9" translate="yes" xml:space="preserve">
          <source>Read timeout.</source>
          <target state="translated">读取超时。</target>
        </trans-unit>
        <trans-unit id="788662e79ce5125676a11a5682ca9745ed9fbceb" translate="yes" xml:space="preserve">
          <source>Readiness State</source>
          <target state="translated">准备状态</target>
        </trans-unit>
        <trans-unit id="20c7c5522fc28c5817550dd82bc3272eb6a991c7" translate="yes" xml:space="preserve">
          <source>Ready</source>
          <target state="translated">Ready</target>
        </trans-unit>
        <trans-unit id="582cbab8d68c68d3241f5f566b97e307344705e7" translate="yes" xml:space="preserve">
          <source>Ready to actually start using Spring Boot? &lt;a href=&quot;using-spring-boot#using-boot&quot;&gt;We have you covered&lt;/a&gt;:</source>
          <target state="translated">准备好实际开始使用Spring Boot了吗？&lt;a href=&quot;using-spring-boot#using-boot&quot;&gt;我们为您服务&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="e451d89185350ce808abd4ce07c2fd843a658c36" translate="yes" xml:space="preserve">
          <source>Realm to connect to.</source>
          <target state="translated">境界来连接。</target>
        </trans-unit>
        <trans-unit id="a26666b38392dd570f922e0c23cc3b3c25906930" translate="yes" xml:space="preserve">
          <source>Reap timeout, in seconds, for borrowed connections. 0 denotes no limit.</source>
          <target state="translated">借用连接的Reap超时,以秒为单位。0表示没有限制。</target>
        </trans-unit>
        <trans-unit id="cc9db3a795571c7e71f45670a1da7ff49b5f1557" translate="yes" xml:space="preserve">
          <source>Red</source>
          <target state="translated">Red</target>
        </trans-unit>
        <trans-unit id="c8ef3c79f149f16d80ef113fc0afc43413706093" translate="yes" xml:space="preserve">
          <source>Redirects are not followed (so you can assert the response location).</source>
          <target state="translated">不遵循重定向(所以你可以断言响应位置)。</target>
        </trans-unit>
        <trans-unit id="24071b57a13027c01339027dcccb98218f052a8f" translate="yes" xml:space="preserve">
          <source>Redis</source>
          <target state="translated">Redis</target>
        </trans-unit>
        <trans-unit id="c2c125680626953e3eb6d0221e2f81e5ed2b15a9" translate="yes" xml:space="preserve">
          <source>Redis server host.</source>
          <target state="translated">Redis服务器主机。</target>
        </trans-unit>
        <trans-unit id="6857e3540e5318c16578b17d93b6ce163b30011d" translate="yes" xml:space="preserve">
          <source>Redis server port.</source>
          <target state="translated">Redis服务器端口。</target>
        </trans-unit>
        <trans-unit id="9fa545257fa73835b37564e4989ad25fca9bd402" translate="yes" xml:space="preserve">
          <source>Reduce costs by setting the environment type</source>
          <target state="translated">通过设置环境类型减少成本</target>
        </trans-unit>
        <trans-unit id="1bca23ec6cc119207e07bc9a9f0ec738e15d5db3" translate="yes" xml:space="preserve">
          <source>Refer to &lt;code&gt;man systemctl&lt;/code&gt; for more details.</source>
          <target state="translated">有关更多详细信息，请参考 &lt;code&gt;man systemctl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ac4138331814b21e9ca9c607225a6520f704322" translate="yes" xml:space="preserve">
          <source>Refer to the individual plugin documentation on how to use buildpacks with &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#build-image&quot;&gt;Maven&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#build-image&quot;&gt;Gradle&lt;/a&gt;.</source>
          <target state="translated">请参阅各个插件文档，以了解如何将buildpacks与&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#build-image&quot;&gt;Maven&lt;/a&gt;和&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#build-image&quot;&gt;Gradle&lt;/a&gt;一起使用。</target>
        </trans-unit>
        <trans-unit id="63b7a7b7fb3196f5045d41ad1cd194f1cc68f052" translate="yes" xml:space="preserve">
          <source>Reference (&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/&quot;&gt;HTML&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/pdf/spring-boot-gradle-plugin-reference.pdf&quot;&gt;PDF&lt;/a&gt;)</source>
          <target state="translated">参考（&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/&quot;&gt;HTML&lt;/a&gt;和&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/pdf/spring-boot-gradle-plugin-reference.pdf&quot;&gt;PDF&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="0d39dc62a3b827b38cde5c090ba06c60e664e6f2" translate="yes" xml:space="preserve">
          <source>Reference (&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/&quot;&gt;HTML&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/pdf/spring-boot-maven-plugin-reference.pdf&quot;&gt;PDF&lt;/a&gt;)</source>
          <target state="translated">参考（&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/&quot;&gt;HTML&lt;/a&gt;和&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/pdf/spring-boot-maven-plugin-reference.pdf&quot;&gt;PDF&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="b516e67e50c6966642d21bf28bc5f9d60fdb2e4c" translate="yes" xml:space="preserve">
          <source>Reference to a file script that should be inlined in the default launch script. This can be used to set environmental variables such as &lt;code&gt;JAVA_OPTS&lt;/code&gt; before any external config files are loaded</source>
          <target state="translated">引用应在默认启动脚本中内联的文件脚本。可以在加载任何外部配置文件之前设置环境变量，例如 &lt;code&gt;JAVA_OPTS&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f12f6e0358e62103c9aadfb152bc26c4415f318" translate="yes" xml:space="preserve">
          <source>Regardless of your classpath, meter registries, except the in-memory backed, are not auto-configured when using &lt;code&gt;@SpringBootTest&lt;/code&gt;.</source>
          <target state="translated">无论使用哪种类路径，使用 &lt;code&gt;@SpringBootTest&lt;/code&gt; 时，都不会自动配置仪表注册表（除了内存中支持的注册表之外）。</target>
        </trans-unit>
        <trans-unit id="ca8c1dcb04081968021b77714a4071ff873d0cde" translate="yes" xml:space="preserve">
          <source>Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.</source>
          <target state="translated">注册OpenEntityManagerInViewInterceptor。将JPA EntityManager绑定到线程上,以便处理整个请求。</target>
        </trans-unit>
        <trans-unit id="4e03c22ad813080c1907e193291b8ca3aeed298c" translate="yes" xml:space="preserve">
          <source>Register a shutdown hook for the logging system when it is initialized.</source>
          <target state="translated">在初始化日志系统时,为其注册一个关闭钩子。</target>
        </trans-unit>
        <trans-unit id="eb89a502f9e0467b442cb4679964b51f85f2f2c4" translate="yes" xml:space="preserve">
          <source>Registering Servlets, Filters, and Listeners as Spring Beans</source>
          <target state="translated">将Servlet、Filter和Listeners注册为Spring Beans。</target>
        </trans-unit>
        <trans-unit id="3415156b2e596e1f84c4aff9196ac07de216cb1d" translate="yes" xml:space="preserve">
          <source>Regular and geospatial view operations timeout.</source>
          <target state="translated">常规和地理空间视图操作超时。</target>
        </trans-unit>
        <trans-unit id="78a5e7b660bc1966f2fde4ea755839d759f617a8" translate="yes" xml:space="preserve">
          <source>Regular expression that matches proxies that are to be trusted.</source>
          <target state="translated">匹配要信任的代理的正则表达式。</target>
        </trans-unit>
        <trans-unit id="8a0194a80b9b781d5645f766e7b140aa31e1c588" translate="yes" xml:space="preserve">
          <source>Relaxed binding</source>
          <target state="translated">松绑</target>
        </trans-unit>
        <trans-unit id="a1217585c7ee7bb97024471871454883bb34cb4a" translate="yes" xml:space="preserve">
          <source>Remember that, whatever you put in the &lt;code&gt;sources&lt;/code&gt; is merely a Spring &lt;code&gt;ApplicationContext&lt;/code&gt;. Normally, anything that already works should work here. There might be some beans you can remove later and let Spring Boot provide its own defaults for them, but it should be possible to get something working before you need to do that.</source>
          <target state="translated">请记住，无论您在 &lt;code&gt;sources&lt;/code&gt; 放入什么内容，都仅是Spring &lt;code&gt;ApplicationContext&lt;/code&gt; 。通常，任何已经起作用的东西都应该在这里工作。可能有些bean可以在以后删除，然后让Spring Boot为它们提供自己的默认值，但是应该可以使某些东西工作，然后再执行此操作。</target>
        </trans-unit>
        <trans-unit id="0ad7925e5b2bf6524c03932052a9c8a6ea451aa0" translate="yes" xml:space="preserve">
          <source>Remember to change the &lt;code&gt;Description&lt;/code&gt;, &lt;code&gt;User&lt;/code&gt;, and &lt;code&gt;ExecStart&lt;/code&gt; fields for your application.</source>
          <target state="translated">切记更改应用程序的 &lt;code&gt;Description&lt;/code&gt; ， &lt;code&gt;User&lt;/code&gt; 和 &lt;code&gt;ExecStart&lt;/code&gt; 字段。</target>
        </trans-unit>
        <trans-unit id="37077c2a6e45d166f2884d5eacb07fdd66c34673" translate="yes" xml:space="preserve">
          <source>Remote devtools support is provided in two parts: a server-side endpoint that accepts connections and a client application that you run in your IDE. The server component is automatically enabled when the &lt;code&gt;spring.devtools.remote.secret&lt;/code&gt; property is set. The client component must be launched manually.</source>
          <target state="translated">远程devtools支持分为两部分：接受连接的服务器端端点和在IDE中运行的客户端应用程序。设置 &lt;code&gt;spring.devtools.remote.secret&lt;/code&gt; 属性后，将自动启用服务器组件。客户端组件必须手动启动。</target>
        </trans-unit>
        <trans-unit id="bb3e03d1d37cd14e7054dfb0ab9216362bb8d1d3" translate="yes" xml:space="preserve">
          <source>Remove any dashes (&lt;code&gt;-&lt;/code&gt;).</source>
          <target state="translated">删除所有破折号（ &lt;code&gt;-&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d1ab023b03e8436509375a748220b3af9a276f03" translate="yes" xml:space="preserve">
          <source>Repackaged archives do not contain devtools by default. If you want to use a &lt;a href=&quot;#using-boot-devtools-remote&quot;&gt;certain remote devtools feature&lt;/a&gt;, you need to include it. When using the Maven plugin, set the &lt;code&gt;excludeDevtools&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt;. When using the Gradle plugin, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#packaging-executable-configuring-including-development-only-dependencies&quot;&gt;configure the task&amp;rsquo;s classpath to include the &lt;code&gt;developmentOnly&lt;/code&gt; configuration&lt;/a&gt;.</source>
          <target state="translated">重新打包的存档默认情况下不包含devtools。如果要使用&lt;a href=&quot;#using-boot-devtools-remote&quot;&gt;某个远程devtools功能&lt;/a&gt;，则需要包括它。使用Maven插件时，请将 &lt;code&gt;excludeDevtools&lt;/code&gt; 属性设置为 &lt;code&gt;false&lt;/code&gt; 。使用Gradle插件时，请&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#packaging-executable-configuring-including-development-only-dependencies&quot;&gt;配置任务的类路径以包括 &lt;code&gt;developmentOnly&lt;/code&gt; 配置&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="175cfb225e2cd049d7c4ed588a54d9f4eeaaf6d3" translate="yes" xml:space="preserve">
          <source>Replace dots (&lt;code&gt;.&lt;/code&gt;) with underscores (&lt;code&gt;_&lt;/code&gt;).</source>
          <target state="translated">用下划线（ &lt;code&gt;_&lt;/code&gt; ）替换点（ &lt;code&gt;.&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="15c6b9d7072e675bdd5687d7c85691737fd4369e" translate="yes" xml:space="preserve">
          <source>Report bugs with Spring Boot at &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;github.com/spring-projects/spring-boot/issues&lt;/a&gt;.</source>
          <target state="translated">在&lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;github.com/spring-projects/spring-boot/issues上&lt;/a&gt;报告Spring Boot的错误。</target>
        </trans-unit>
        <trans-unit id="c91e6e6a538a5087a64a99718ae975966b761c1e" translate="yes" xml:space="preserve">
          <source>Repositories</source>
          <target state="translated">Repositories</target>
        </trans-unit>
        <trans-unit id="2cc80b8f6850e82afed95b9b848f46c4b72cc045" translate="yes" xml:space="preserve">
          <source>Representation to use when converting a UUID to a BSON binary value.</source>
          <target state="translated">将UUID转换为BSON二进制值时要使用的表示方法。</target>
        </trans-unit>
        <trans-unit id="ec93f45c5a84101b85a1520b3116a4f1a7cbdc51" translate="yes" xml:space="preserve">
          <source>Request paths that should not be logged.</source>
          <target state="translated">不应该被记录的请求路径。</target>
        </trans-unit>
        <trans-unit id="dd20c8a0f84dc4253a43ea20e3d450f164fb8a27" translate="yes" xml:space="preserve">
          <source>Request throttling type.</source>
          <target state="translated">请求节制类型。</target>
        </trans-unit>
        <trans-unit id="18223c7075b33ba0936b8bddec4ba8cc85f9d141" translate="yes" xml:space="preserve">
          <source>Request&amp;rsquo;s URI template prior to variable substitution, if possible (for example, &lt;code&gt;/api/person/{id}&lt;/code&gt;)</source>
          <target state="translated">变量替换之前的请求URI模板（如果可能）（例如 &lt;code&gt;/api/person/{id}&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="0157f7bd4001f58879421bd448dc6fbb713d82b8" translate="yes" xml:space="preserve">
          <source>Request&amp;rsquo;s method (for example, &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;POST&lt;/code&gt;)</source>
          <target state="translated">请求的方法（例如 &lt;code&gt;GET&lt;/code&gt; 或 &lt;code&gt;POST&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="9d3d11d6ac6eb32a9585efbf8cf54313e18ba24c" translate="yes" xml:space="preserve">
          <source>Request&amp;rsquo;s outcome based on the status code of the response. 1xx is &lt;code&gt;INFORMATIONAL&lt;/code&gt;, 2xx is &lt;code&gt;SUCCESS&lt;/code&gt;, 3xx is &lt;code&gt;REDIRECTION&lt;/code&gt;, 4xx &lt;code&gt;CLIENT_ERROR&lt;/code&gt;, and 5xx is &lt;code&gt;SERVER_ERROR&lt;/code&gt;</source>
          <target state="translated">基于响应状态码的请求结果。1xx是 &lt;code&gt;INFORMATIONAL&lt;/code&gt; ，2xx是 &lt;code&gt;SUCCESS&lt;/code&gt; ，3xx是 &lt;code&gt;REDIRECTION&lt;/code&gt; ，4xx &lt;code&gt;CLIENT_ERROR&lt;/code&gt; ，5xx是 &lt;code&gt;SERVER_ERROR&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4935e9461530dc077172bbad9cd7bd5c15cf64e2" translate="yes" xml:space="preserve">
          <source>Request&amp;rsquo;s outcome based on the status code of the response. 1xx is &lt;code&gt;INFORMATIONAL&lt;/code&gt;, 2xx is &lt;code&gt;SUCCESS&lt;/code&gt;, 3xx is &lt;code&gt;REDIRECTION&lt;/code&gt;, 4xx &lt;code&gt;CLIENT_ERROR&lt;/code&gt;, and 5xx is &lt;code&gt;SERVER_ERROR&lt;/code&gt;, &lt;code&gt;UNKNOWN&lt;/code&gt; otherwise</source>
          <target state="translated">基于响应状态码的请求结果。1xx是 &lt;code&gt;INFORMATIONAL&lt;/code&gt; ，2xx是 &lt;code&gt;SUCCESS&lt;/code&gt; ，3xx是 &lt;code&gt;REDIRECTION&lt;/code&gt; ，4xx &lt;code&gt;CLIENT_ERROR&lt;/code&gt; ，5xx是 &lt;code&gt;SERVER_ERROR&lt;/code&gt; ，否则为 &lt;code&gt;UNKNOWN&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d7f4fa2979cf67ad60c4bd6751c7259ff354f46d" translate="yes" xml:space="preserve">
          <source>Requested heartbeat timeout; zero for none. If a duration suffix is not specified, seconds will be used.</source>
          <target state="translated">要求的心跳超时;无心跳超时为零。如果没有指定持续时间后缀,将使用秒。</target>
        </trans-unit>
        <trans-unit id="eed6bfb41051ed5b74447340f3c2e29d11e99a7c" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="translated">Required</target>
        </trans-unit>
        <trans-unit id="0d033a587e2ece6225d31606ae906944c4e612f5" translate="yes" xml:space="preserve">
          <source>Required cloud platform for the document to be included.</source>
          <target state="translated">所需的云平台,才能收录文件。</target>
        </trans-unit>
        <trans-unit id="a6c50ccab3710190f1a8342cf3a7cdc16046ba91" translate="yes" xml:space="preserve">
          <source>Required replica set name for the cluster. Cannot be set with URI.</source>
          <target state="translated">群集所需的副本集名称。不能用URI设置。</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Requirements</target>
        </trans-unit>
        <trans-unit id="6dbe2d3469c4902a06138a9a3ecc526bfeffa9e3" translate="yes" xml:space="preserve">
          <source>Resource Conditions</source>
          <target state="translated">资源条件</target>
        </trans-unit>
        <trans-unit id="e7db5c7f5e3e37f793d18f903271abb093fc3333" translate="yes" xml:space="preserve">
          <source>Response&amp;rsquo;s HTTP status code (for example, &lt;code&gt;200&lt;/code&gt; or &lt;code&gt;500&lt;/code&gt;)</source>
          <target state="translated">响应的HTTP状态代码（例如 &lt;code&gt;200&lt;/code&gt; 或 &lt;code&gt;500&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="c57663dc6e06fcb06c7575bcb26bf9145190b4b7" translate="yes" xml:space="preserve">
          <source>Response&amp;rsquo;s HTTP status code if available (for example, &lt;code&gt;200&lt;/code&gt; or &lt;code&gt;500&lt;/code&gt;), or &lt;code&gt;IO_ERROR&lt;/code&gt; in case of I/O issues, &lt;code&gt;CLIENT_ERROR&lt;/code&gt; otherwise</source>
          <target state="translated">响应的HTTP状态代码（例如 &lt;code&gt;200&lt;/code&gt; 或 &lt;code&gt;500&lt;/code&gt; ）（如果有I / O问题， &lt;code&gt;IO_ERROR&lt;/code&gt; ；否则为 &lt;code&gt;CLIENT_ERROR&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="d47ebb66ec136c60e99e92b23ee704566184fbb3" translate="yes" xml:space="preserve">
          <source>Restart functionality does not work well with objects that are deserialized by using a standard &lt;code&gt;ObjectInputStream&lt;/code&gt;. If you need to deserialize data, you may need to use Spring&amp;rsquo;s &lt;code&gt;ConfigurableObjectInputStream&lt;/code&gt; in combination with &lt;code&gt;Thread.currentThread().getContextClassLoader()&lt;/code&gt;.</source>
          <target state="translated">重新启动功能不适用于使用标准 &lt;code&gt;ObjectInputStream&lt;/code&gt; 反序列化的对象。如果需要反序列化数据，则可能需要将Spring的 &lt;code&gt;ConfigurableObjectInputStream&lt;/code&gt; 与 &lt;code&gt;Thread.currentThread().getContextClassLoader()&lt;/code&gt; 结合使用。</target>
        </trans-unit>
        <trans-unit id="7ff80a5fac222c34ad1e7b228b9b9c3e884a4c8a" translate="yes" xml:space="preserve">
          <source>Restart vs Reload</source>
          <target state="translated">重启与重装</target>
        </trans-unit>
        <trans-unit id="1db84cf7e6133f70552a032955785c0328d019a1" translate="yes" xml:space="preserve">
          <source>Restarts will now only happen when the &lt;code&gt;src/main/resources/.reloadtrigger&lt;/code&gt; is updated.</source>
          <target state="translated">现在仅在更新 &lt;code&gt;src/main/resources/.reloadtrigger&lt;/code&gt; 时才发生重启。</target>
        </trans-unit>
        <trans-unit id="36d3e6b4532d960cadd60b7b04f8355868429c0a" translate="yes" xml:space="preserve">
          <source>Retention policy to use (Influx writes to the DEFAULT retention policy if one is not specified).</source>
          <target state="translated">要使用的保留策略(如果没有指定保留策略,Influx会写入默认的保留策略)。</target>
        </trans-unit>
        <trans-unit id="92843db00c680eb5625321d1c626457f92b62b6b" translate="yes" xml:space="preserve">
          <source>Retries are disabled by default. You can also customize the &lt;code&gt;RetryTemplate&lt;/code&gt; programmatically by declaring a &lt;code&gt;RabbitRetryTemplateCustomizer&lt;/code&gt; bean.</source>
          <target state="translated">默认情况下，重试是禁用的。您还可以通过声明 &lt;code&gt;RabbitRetryTemplateCustomizer&lt;/code&gt; bean来 &lt;code&gt;RetryTemplate&lt;/code&gt; 编程方式自定义RetryTemplate。</target>
        </trans-unit>
        <trans-unit id="7ed11e10bda0ce2c08c08b15a18c733800924ee4" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;hprof&lt;/code&gt; heap dump file.</source>
          <target state="translated">返回一个 &lt;code&gt;hprof&lt;/code&gt; 堆转储文件。</target>
        </trans-unit>
        <trans-unit id="6136d0113bc92b9e1fcac9ace7fdc3423aac6510" translate="yes" xml:space="preserve">
          <source>Returns the contents of the logfile (if &lt;code&gt;logging.file.name&lt;/code&gt; or &lt;code&gt;logging.file.path&lt;/code&gt; properties have been set). Supports the use of the HTTP &lt;code&gt;Range&lt;/code&gt; header to retrieve part of the log file&amp;rsquo;s content.</source>
          <target state="translated">返回日志文件的内容（如果已设置 &lt;code&gt;logging.file.name&lt;/code&gt; 或 &lt;code&gt;logging.file.path&lt;/code&gt; 属性）。支持使用HTTP &lt;code&gt;Range&lt;/code&gt; 标头来检索部分日志文件的内容。</target>
        </trans-unit>
        <trans-unit id="5f5b52c380eb6a3e4caf3b0a1d987a1faa5d8fc1" translate="yes" xml:space="preserve">
          <source>Roles used to determine whether or not a user is authorized to be shown details. When empty, all authenticated users are authorized.</source>
          <target state="translated">用于确定用户是否被授权显示详细信息的角色。当为空时,所有经过认证的用户都被授权。</target>
        </trans-unit>
        <trans-unit id="108b84ddb795325ff9b3a70cbeb2e962a7a8c212" translate="yes" xml:space="preserve">
          <source>Rules for the built-in error handling to override specific SQL states and error codes. Requires Flyway Teams.</source>
          <target state="translated">内置错误处理的规则,以覆盖特定的SQL状态和错误代码。需要Flyway Teams。</target>
        </trans-unit>
        <trans-unit id="73989d9c59264da08a15dba21c7d58237a91f08f" translate="yes" xml:space="preserve">
          <source>Running</source>
          <target state="translated">Running</target>
        </trans-unit>
        <trans-unit id="41b252d3943d796dee5dd2c37c1613f0a3b66b9a" translate="yes" xml:space="preserve">
          <source>Running as a traditional web application on Wildfly</source>
          <target state="translated">在Wildfly上作为一个传统的Web应用程序运行</target>
        </trans-unit>
        <trans-unit id="f8913396bd57009d2c8bb2cad97ca8a85f5cd770" translate="yes" xml:space="preserve">
          <source>SAML2 relying party registrations.</source>
          <target state="translated">SAML2依赖方注册。</target>
        </trans-unit>
        <trans-unit id="77f8f8d9ff6a027faa8cbe4cd97454e807334529" translate="yes" xml:space="preserve">
          <source>SDKMAN! (The Software Development Kit Manager) can be used for managing multiple versions of various binary SDKs, including Groovy and the Spring Boot CLI. Get SDKMAN! from &lt;a href=&quot;https://sdkman.io&quot;&gt;sdkman.io&lt;/a&gt; and install Spring Boot by using the following commands:</source>
          <target state="translated">SDKMAN！（软件开发工具包管理器）可用于管理各种二进制SDK的多个版本，包括Groovy和Spring Boot CLI。获取SDKMAN！从&lt;a href=&quot;https://sdkman.io&quot;&gt;sdkman.io&lt;/a&gt;并使用以下命令安装Spring Boot：</target>
        </trans-unit>
        <trans-unit id="5ee9aad544822da1bb1133cc3a55482bf32e4f2c" translate="yes" xml:space="preserve">
          <source>SERVICE_UNAVAILABLE (503)</source>
          <target state="translated">SERVICE_UNAVAILABLE (503)</target>
        </trans-unit>
        <trans-unit id="33de870bb01c8080f0c66cbef632b760439e9b69" translate="yes" xml:space="preserve">
          <source>SMTP server host. For instance, `smtp.example.com`.</source>
          <target state="translated">SMTP服务器主机。例如,`smtp.example.com`。</target>
        </trans-unit>
        <trans-unit id="1aaaa02de9f01defbff057c32c1a9adb9063067e" translate="yes" xml:space="preserve">
          <source>SMTP server port.</source>
          <target state="translated">SMTP服务器端口。</target>
        </trans-unit>
        <trans-unit id="2064cb643caa8d9e1de12eea7f3e143ca9f8680d" translate="yes" xml:space="preserve">
          <source>SQL</source>
          <target state="translated">SQL</target>
        </trans-unit>
        <trans-unit id="fa80fc8c0217dd62c4509b7b721b26c324cd49b2" translate="yes" xml:space="preserve">
          <source>SQL dialect to use. Auto-detected by default.</source>
          <target state="translated">要使用的SQL方言。默认情况下自动检测。</target>
        </trans-unit>
        <trans-unit id="4a9979631dac9d5713e212a5d57d1c92c5415da0" translate="yes" xml:space="preserve">
          <source>SQL query or statement used to validate a connection before returning it.</source>
          <target state="translated">在返回连接之前,用于验证连接的SQL查询或语句。</target>
        </trans-unit>
        <trans-unit id="e07d55c41bc473b479a26cf35526cde60ab7f134" translate="yes" xml:space="preserve">
          <source>SQL scripts encoding.</source>
          <target state="translated">SQL脚本编码。</target>
        </trans-unit>
        <trans-unit id="c11febcaf8ce2e7306c197171d203973f47c8e9d" translate="yes" xml:space="preserve">
          <source>SQL statements to execute to initialize a connection immediately after obtaining it.</source>
          <target state="translated">获得连接后,立即执行SQL语句来初始化连接。</target>
        </trans-unit>
        <trans-unit id="78bb8826fcc2504583e625386c238563e6207595" translate="yes" xml:space="preserve">
          <source>SSL</source>
          <target state="translated">SSL</target>
        </trans-unit>
        <trans-unit id="3f2478efe3f7b6f75fad868e8f2b3eed1c66c0f6" translate="yes" xml:space="preserve">
          <source>SSL algorithm to use. By default, configured by the Rabbit client library.</source>
          <target state="translated">要使用的 SSL 算法。默认情况下,由 Rabbit 客户端库配置。</target>
        </trans-unit>
        <trans-unit id="816f92208e26ab12f3f86b1951d31a416f9dc5b0" translate="yes" xml:space="preserve">
          <source>SSL can be configured declaratively by setting the various &lt;code&gt;server.ssl.*&lt;/code&gt; properties, typically in &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yml&lt;/code&gt;. The following example shows setting SSL properties in &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="translated">可以通过设置各种 &lt;code&gt;server.ssl.*&lt;/code&gt; 属性（通常在 &lt;code&gt;application.properties&lt;/code&gt; 或 &lt;code&gt;application.yml&lt;/code&gt; 中)来声明性地配置SSL 。以下示例显示了在 &lt;code&gt;application.properties&lt;/code&gt; 中设置SSL属性：</target>
        </trans-unit>
        <trans-unit id="dec0a18883a5f27980ea4fa7b30d8996829c4f82" translate="yes" xml:space="preserve">
          <source>SSL protocol to use.</source>
          <target state="translated">要使用的SSL协议。</target>
        </trans-unit>
        <trans-unit id="a0f404eae7e3a08175a1d48a9f9894d36a3aefea" translate="yes" xml:space="preserve">
          <source>Same meaning as the &quot;must-revalidate&quot; directive, except that it does not apply to private caches.</source>
          <target state="translated">与 &quot;must-revalidate &quot;指令含义相同,只是它不适用于私有缓存。</target>
        </trans-unit>
        <trans-unit id="2959570b7927f0f18791ea875a09e4144d14301d" translate="yes" xml:space="preserve">
          <source>Save your &lt;code&gt;pom.xml&lt;/code&gt; and run &lt;code&gt;mvn package&lt;/code&gt; from the command line, as follows:</source>
          <target state="translated">保存您的 &lt;code&gt;pom.xml&lt;/code&gt; 并从命令行运行 &lt;code&gt;mvn package&lt;/code&gt; ，如下所示：</target>
        </trans-unit>
        <trans-unit id="ea68144bd52dc06045f1772ab1cc31696e7e4255" translate="yes" xml:space="preserve">
          <source>Scanning for Servlets, Filters, and listeners</source>
          <target state="translated">扫描Servlet、过滤器和监听器</target>
        </trans-unit>
        <trans-unit id="b4afd7f72a52cb10b26ddcc888f425defd56a623" translate="yes" xml:space="preserve">
          <source>Schema (DDL) script resource references.</source>
          <target state="translated">Schema(DDL)脚本资源引用。</target>
        </trans-unit>
        <trans-unit id="c3cb31f9cb504423a74115f664528a8012d5746e" translate="yes" xml:space="preserve">
          <source>Schema (LDIF) script resource reference.</source>
          <target state="translated">Schema(LDIF)脚本资源参考。</target>
        </trans-unit>
        <trans-unit id="468b023688cea232f68554bb42730c702d085f10" translate="yes" xml:space="preserve">
          <source>Schema action to take at startup.</source>
          <target state="translated">启动时要采取的模式动作。</target>
        </trans-unit>
        <trans-unit id="3d3578f3eb752765bae19f12b9499e1801e8553d" translate="yes" xml:space="preserve">
          <source>Schema to use for Liquibase objects.</source>
          <target state="translated">用于Liquibase对象的模式。</target>
        </trans-unit>
        <trans-unit id="1cb3f726f8bfbbcf1f20e5cf1ffc0b8f2d7c4cc2" translate="yes" xml:space="preserve">
          <source>Scheme names managed by Flyway (case-sensitive).</source>
          <target state="translated">由Flyway管理的计划名称(区分大小写)。</target>
        </trans-unit>
        <trans-unit id="fd0ca289544c8506a3685994ddca40086a0800e0" translate="yes" xml:space="preserve">
          <source>Scoop installs &lt;code&gt;spring&lt;/code&gt; to &lt;code&gt;~/scoop/apps/springboot/current/bin&lt;/code&gt;.</source>
          <target state="translated">Scoop将 &lt;code&gt;spring&lt;/code&gt; 安装到 &lt;code&gt;~/scoop/apps/springboot/current/bin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="986739cc50a9a16db59179829215c0bfc668a3af" translate="yes" xml:space="preserve">
          <source>Second, you should also take steps to limit the damage if your application or the account that&amp;rsquo;s running it is compromised. If an attacker does gain access, they could make the jar file writable and change its contents. One way to protect against this is to make it immutable by using &lt;code&gt;chattr&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">其次，如果您的应用程序或运行该应用程序的帐户受到威胁，您还应采取措施限制损害。如果攻击者确实获得了访问权限，则他们可以使jar文件可写并更改其内容。防止这种情况发生的一种方法是使用 &lt;code&gt;chattr&lt;/code&gt; 使其不可变，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="21646d1f1f70bc9c6faf62c4e98beda2a1c81ea9" translate="yes" xml:space="preserve">
          <source>Securing an init.d Service</source>
          <target state="translated">确保init.d服务的安全</target>
        </trans-unit>
        <trans-unit id="8d9aee4e07e3cf9ff55d05eebab87d4aee771166" translate="yes" xml:space="preserve">
          <source>Security filter chain dispatcher types.</source>
          <target state="translated">安全过滤链调度器类型。</target>
        </trans-unit>
        <trans-unit id="243cf9e43b5d0910634489c486a30b9b01ac71ba" translate="yes" xml:space="preserve">
          <source>Security filter chain order.</source>
          <target state="translated">安全过滤链顺序。</target>
        </trans-unit>
        <trans-unit id="06515ae74220756d5659bd1c3ec661a49b7a67a1" translate="yes" xml:space="preserve">
          <source>Security protocol used to communicate with brokers.</source>
          <target state="translated">用于与经纪人通信的安全协议。</target>
        </trans-unit>
        <trans-unit id="51198736f532b6b5cbec038b69cc937d61698021" translate="yes" xml:space="preserve">
          <source>See &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-configure-datasource&quot;&gt;spring-boot-features.html&lt;/a&gt;&amp;rdquo; in the &amp;ldquo;Spring Boot features&amp;rdquo; section and the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java&quot;&gt;&lt;code&gt;DataSourceAutoConfiguration&lt;/code&gt;&lt;/a&gt; class for more details.</source>
          <target state="translated">有关更多详细信息，请参见&amp;ldquo; Spring Boot功能&amp;rdquo;部分中的&amp;ldquo; &lt;a href=&quot;spring-boot-features#boot-features-configure-datasource&quot;&gt;spring-boot-features.html&lt;/a&gt; &amp;rdquo;和&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java&quot;&gt; &lt;code&gt;DataSourceAutoConfiguration&lt;/code&gt; &lt;/a&gt;类。</target>
        </trans-unit>
        <trans-unit id="054e9e420bb240812b3baa5aff83e06bf82a34e2" translate="yes" xml:space="preserve">
          <source>See &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-external-config-yaml&quot;&gt;spring-boot-features.html&lt;/a&gt;&amp;rdquo; in the &amp;lsquo;Spring Boot features&amp;rsquo; section for more information about YAML.</source>
          <target state="translated">请参阅&amp;ldquo; Spring Boot功能&amp;rdquo;部分中的&amp;ldquo; &lt;a href=&quot;spring-boot-features#boot-features-external-config-yaml&quot;&gt;spring-boot-features.html&lt;/a&gt; &amp;rdquo;，以获取有关YAML的更多信息。</target>
        </trans-unit>
        <trans-unit id="a6eae2238a285cf8353fc28516cb2b18f20201bf" translate="yes" xml:space="preserve">
          <source>See &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-profiles&quot;&gt;spring-boot-features.html&lt;/a&gt;&amp;rdquo; in the &amp;ldquo;Spring Boot features&amp;rdquo; section for more information.</source>
          <target state="translated">有关更多信息，请参见&amp;ldquo; Spring Boot功能&amp;rdquo;部分中的&amp;ldquo; &lt;a href=&quot;spring-boot-features#boot-features-profiles&quot;&gt;spring-boot-features.html&lt;/a&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="7bf8c506a4879c895adc56ab62a0fe8393fa2f21" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;howto#howto-configure-a-datasource&quot;&gt;the &amp;ldquo;How-to&amp;rdquo; section&lt;/a&gt; for more advanced examples, typically to take full control over the configuration of the DataSource.</source>
          <target state="translated">有关更多高级示例，请参见&lt;a href=&quot;howto#howto-configure-a-datasource&quot;&gt;&amp;ldquo;操作方法&amp;rdquo;部分&lt;/a&gt;，通常可以完全控制DataSource的配置。</target>
        </trans-unit>
        <trans-unit id="a27248e4c2f7cbb8957f3774021f024b5a986b41" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.spring.io/spring-amqp/docs/2.3.1/api/org/springframework/amqp/rabbit/annotation/EnableRabbit.html&quot;&gt;the Javadoc of &lt;code&gt;@EnableRabbit&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">有关更多详细信息，请参见&lt;a href=&quot;https://docs.spring.io/spring-amqp/docs/2.3.1/api/org/springframework/amqp/rabbit/annotation/EnableRabbit.html&quot;&gt; &lt;code&gt;@EnableRabbit&lt;/code&gt; &lt;/a&gt;的Javadoc。</target>
        </trans-unit>
        <trans-unit id="cc4bb87daed12185a4680539fba7b4f565a5124c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#run-example-debug&quot;&gt;this example&lt;/a&gt; for more details.</source>
          <target state="translated">有关更多详细信息，请参&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#run-example-debug&quot;&gt;见此示例&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f1c23cc02d359d41f0b095e5c27595cb5a16e49c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/jms/annotation/EnableJms.html&quot;&gt;the Javadoc of &lt;code&gt;@EnableJms&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">有关更多详细信息，请参见&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/jms/annotation/EnableJms.html&quot;&gt; &lt;code&gt;@EnableJms&lt;/code&gt; &lt;/a&gt;的Javadoc。</target>
        </trans-unit>
        <trans-unit id="8e6e3e2883fbb8947797a40f035a0c1ee2aced8a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/CorsEndpointProperties.java&quot;&gt;CorsEndpointProperties&lt;/a&gt; for a complete list of options.</source>
          <target state="translated">有关选项的完整列表，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/CorsEndpointProperties.java&quot;&gt;CorsEndpointProperties&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="468029f5d3392c4d02f8102267120bfef58d6632" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java&quot;&gt;BatchAutoConfiguration&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-batch/docs/4.3.0/api/org/springframework/batch/core/configuration/annotation/EnableBatchProcessing.html&quot;&gt;@EnableBatchProcessing&lt;/a&gt; for more details.</source>
          <target state="translated">有关更多详细信息，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java&quot;&gt;BatchAutoConfiguration&lt;/a&gt;和&lt;a href=&quot;https://docs.spring.io/spring-batch/docs/4.3.0/api/org/springframework/batch/core/configuration/annotation/EnableBatchProcessing.html&quot;&gt;@EnableBatchProcessing&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cac73ae191782f480cd830e88e53ddeaa7f194fe" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java&quot;&gt;&lt;code&gt;MessageSourceProperties&lt;/code&gt;&lt;/a&gt; for more supported options.</source>
          <target state="translated">有关更多受支持的选项，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java&quot;&gt; &lt;code&gt;MessageSourceProperties&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="004070f6ab6df93b71fb83698e37d55b478f3b26" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java&quot;&gt;&lt;code&gt;DataSourceProperties&lt;/code&gt;&lt;/a&gt; for more of the supported options. These are the standard options that work regardless of the actual implementation. It is also possible to fine-tune implementation-specific settings by using their respective prefix (&lt;code&gt;spring.datasource.hikari.*&lt;/code&gt;, &lt;code&gt;spring.datasource.tomcat.*&lt;/code&gt;, &lt;code&gt;spring.datasource.dbcp2.*&lt;/code&gt;, and &lt;code&gt;spring.datasource.oracleucp.*&lt;/code&gt;). Refer to the documentation of the connection pool implementation you are using for more details.</source>
          <target state="translated">有关更多受支持的选项，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java&quot;&gt; &lt;code&gt;DataSourceProperties&lt;/code&gt; &lt;/a&gt;。这些是不管实际实现如何都起作用的标准选项。也可以使用它们各自的前缀（ &lt;code&gt;spring.datasource.hikari.*&lt;/code&gt; ， &lt;code&gt;spring.datasource.tomcat.*&lt;/code&gt; ， &lt;code&gt;spring.datasource.dbcp2.*&lt;/code&gt; 和 &lt;code&gt;spring.datasource.oracleucp.*&lt;/code&gt; 来微调实现特定的设置。）。有关更多详细信息，请参考所用连接池实现的文档。</target>
        </trans-unit>
        <trans-unit id="5ba836de208ebfc245006c17e8bac02784863404" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java&quot;&gt;&lt;code&gt;ActiveMQProperties&lt;/code&gt;&lt;/a&gt; for more of the supported options. You can also register an arbitrary number of beans that implement &lt;code&gt;ActiveMQConnectionFactoryCustomizer&lt;/code&gt; for more advanced customizations.</source>
          <target state="translated">有关更多受支持的选项，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java&quot;&gt; &lt;code&gt;ActiveMQProperties&lt;/code&gt; &lt;/a&gt;。您还可以注册任意数量的实现 &lt;code&gt;ActiveMQConnectionFactoryCustomizer&lt;/code&gt; 的Bean，以进行更高级的自定义。</target>
        </trans-unit>
        <trans-unit id="9aff8b5756cd0143d0feff3a1b2dbe82b4f8444f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisProperties.java&quot;&gt;&lt;code&gt;ArtemisProperties&lt;/code&gt;&lt;/a&gt; for more supported options.</source>
          <target state="translated">有关更多受支持的选项，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisProperties.java&quot;&gt; &lt;code&gt;ArtemisProperties&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="016622bc80cabc7860070e449caf11c8dcc9836c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java&quot;&gt;&lt;code&gt;KafkaProperties&lt;/code&gt;&lt;/a&gt; for more supported options.</source>
          <target state="translated">有关更多受支持的选项，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java&quot;&gt; &lt;code&gt;KafkaProperties&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e682a675dcd4551cd116ce2a81aa6cba4f9c0107" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseProperties.java&quot;&gt;&lt;code&gt;LiquibaseProperties&lt;/code&gt;&lt;/a&gt; for details about available settings such as contexts, the default schema, and others.</source>
          <target state="translated">有关可用设置（例如上下文，默认架构等）的详细信息，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseProperties.java&quot;&gt; &lt;code&gt;LiquibaseProperties&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b94e5683243efa83392924cb465002cb9204d544" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java&quot;&gt;&lt;code&gt;HibernateJpaAutoConfiguration&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java&quot;&gt;&lt;code&gt;JpaBaseConfiguration&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">有关更多详细信息，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java&quot;&gt; &lt;code&gt;HibernateJpaAutoConfiguration&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java&quot;&gt; &lt;code&gt;JpaBaseConfiguration&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b2db06cf22b1d5afb10e3b2de481105d3a8ba1a7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java&quot;&gt;&lt;code&gt;JpaBaseConfiguration&lt;/code&gt;&lt;/a&gt; for the default settings.</source>
          <target state="translated">有关默认设置，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java&quot;&gt; &lt;code&gt;JpaBaseConfiguration&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6e6a19e0dbc1a2f7c70e635da156c01c49b07c7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java&quot;&gt;&lt;code&gt;ResourceProperties&lt;/code&gt;&lt;/a&gt; for more supported options.</source>
          <target state="translated">有关更多受支持的选项，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java&quot;&gt; &lt;code&gt;ResourceProperties&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f77fa6b089272b8d72047c105681ceb2f8b10082" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java&quot;&gt;&lt;code&gt;ConfigFileApplicationListener&lt;/code&gt;&lt;/a&gt; for more detail.</source>
          <target state="translated">有关更多详细信息，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java&quot;&gt; &lt;code&gt;ConfigFileApplicationListener&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="441a5454e1129ef8daf8239f77f98d1e2265b7a0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java&quot;&gt;&lt;code&gt;Ssl&lt;/code&gt;&lt;/a&gt; for details of all of the supported properties.</source>
          <target state="translated">有关所有受支持属性的详细信息，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java&quot;&gt; &lt;code&gt;Ssl&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="66a71f89b9f0d65b6cd880aa980b739a1d591c3c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://maven.apache.org/settings.html&quot;&gt;Maven&amp;rsquo;s settings documentation&lt;/a&gt; for further information.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://maven.apache.org/settings.html&quot;&gt;Maven的设置文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c770a48da43fce0c912546647e55afb1d3ed5542" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://spring.io/blog/2010/06/14/understanding-amqp-the-protocol-used-by-rabbitmq/&quot;&gt;Understanding AMQP, the protocol used by RabbitMQ&lt;/a&gt; for more details.</source>
          <target state="translated">有关更多详细信息&lt;a href=&quot;https://spring.io/blog/2010/06/14/understanding-amqp-the-protocol-used-by-rabbitmq/&quot;&gt;，&lt;/a&gt;请参阅了解AMQP（RabbitMQ使用的协议）。</target>
        </trans-unit>
        <trans-unit id="dbebb2f558adac36272be3c97a15dab9104a63c1" translate="yes" xml:space="preserve">
          <source>See GroovyMarkupConfigurer</source>
          <target state="translated">参见GroovyMarkupConfigurer</target>
        </trans-unit>
        <trans-unit id="5eb51eff8f1d44c73219f918295a3983f890261f" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;#boot-features-external-config-vs-value&quot;&gt;differences between &lt;code&gt;@Value&lt;/code&gt; and type-safe configuration properties&lt;/a&gt;.</source>
          <target state="translated">另请参见&lt;a href=&quot;#boot-features-external-config-vs-value&quot;&gt; &lt;code&gt;@Value&lt;/code&gt; &lt;/a&gt;和类型安全的配置属性之间的区别。</target>
        </trans-unit>
        <trans-unit id="6e8bf15be448b8ad522ecd98def3cee6f43108e8" translate="yes" xml:space="preserve">
          <source>See also the section on &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-error-handling&quot;&gt;Error Handling&lt;/a&gt;&amp;rdquo; for details of how to register handlers in the servlet container.</source>
          <target state="translated">有关如何在Servlet容器中注册处理程序的详细信息，另请参见&amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-error-handling&quot;&gt;错误处理&lt;/a&gt;&amp;rdquo;部分。</target>
        </trans-unit>
        <trans-unit id="e7a3f4c354c42e782c4bf30e22c7bf3d9dc0ca2f" translate="yes" xml:space="preserve">
          <source>See subclasses of &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/CompilerAutoConfiguration.java&quot;&gt;&lt;code&gt;CompilerAutoConfiguration&lt;/code&gt;&lt;/a&gt; in the Spring Boot CLI source code to understand exactly how customizations are applied.</source>
          <target state="translated">请参阅Spring Boot CLI源代码中的&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/CompilerAutoConfiguration.java&quot;&gt; &lt;code&gt;CompilerAutoConfiguration&lt;/code&gt; 的&lt;/a&gt;子类，以确切地了解如何应用定制。</target>
        </trans-unit>
        <trans-unit id="9a7f490981fd8e3756678a2b7679c334d0c3522c" translate="yes" xml:space="preserve">
          <source>See the &amp;ldquo;&lt;a href=&quot;#howto-customize-the-responsebody-rendering&quot;&gt;Customize the @ResponseBody Rendering&lt;/a&gt;&amp;rdquo; section and the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java&quot;&gt;&lt;code&gt;WebMvcAutoConfiguration&lt;/code&gt;&lt;/a&gt; source code for more details.</source>
          <target state="translated">有关更多详细信息，请参见&amp;ldquo;&lt;a href=&quot;#howto-customize-the-responsebody-rendering&quot;&gt;自定义@ResponseBody渲染&lt;/a&gt;&amp;rdquo;部分和&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java&quot;&gt; &lt;code&gt;WebMvcAutoConfiguration&lt;/code&gt; &lt;/a&gt;源代码。</target>
        </trans-unit>
        <trans-unit id="88b39e07f65dd8511387f6bab89dd939828a3e64" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://boxfuse.com/docs/commandline/run.html&quot;&gt;&lt;code&gt;boxfuse run&lt;/code&gt; documentation&lt;/a&gt; for more options. If there is a &lt;a href=&quot;https://boxfuse.com/docs/commandline/#configuration&quot;&gt;&lt;code&gt;boxfuse.conf&lt;/code&gt;&lt;/a&gt; file present in the current directory, it is considered.</source>
          <target state="translated">有关更多选项，请参见&lt;a href=&quot;https://boxfuse.com/docs/commandline/run.html&quot;&gt; &lt;code&gt;boxfuse run&lt;/code&gt; 文档&lt;/a&gt;。如果当前目录中存在&lt;a href=&quot;https://boxfuse.com/docs/commandline/#configuration&quot;&gt; &lt;code&gt;boxfuse.conf&lt;/code&gt; &lt;/a&gt;文件，则将其考虑。</target>
        </trans-unit>
        <trans-unit id="98b74d2f6c2d332bf77be86fd6c38764a877afa6" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://docs.cloudfoundry.org/cf-cli/getting-started.html#push&quot;&gt;&lt;code&gt;cf push&lt;/code&gt; documentation&lt;/a&gt; for more options. If there is a Cloud Foundry &lt;a href=&quot;https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html&quot;&gt;&lt;code&gt;manifest.yml&lt;/code&gt;&lt;/a&gt; file present in the same directory, it is considered.</source>
          <target state="translated">有关更多选项，请参阅&lt;a href=&quot;https://docs.cloudfoundry.org/cf-cli/getting-started.html#push&quot;&gt; &lt;code&gt;cf push&lt;/code&gt; 文档&lt;/a&gt;。如果在同一目录中存在Cloud Foundry &lt;a href=&quot;https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html&quot;&gt; &lt;code&gt;manifest.yml&lt;/code&gt; &lt;/a&gt;文件，则将其考虑在内。</target>
        </trans-unit>
        <trans-unit id="e25dd3777229339bd399587b31f0a284c74031ca" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#integrating-with-actuator-build-info&quot;&gt;Spring Boot Gradle Plugin documentation&lt;/a&gt; for more details.</source>
          <target state="translated">有关更多详细信息，请参见&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#integrating-with-actuator-build-info&quot;&gt;Spring Boot Gradle插件文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5e1d303493ae660ba0d13051a1c8593407e7fa9d" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#goals-build-info&quot;&gt;Spring Boot Maven Plugin documentation&lt;/a&gt; for more details.</source>
          <target state="translated">有关更多详细信息，请参见&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#goals-build-info&quot;&gt;Spring Boot Maven插件文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6d647b4be79fd595431b993ec1b7c7c5546a3ea3" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#repackage&quot;&gt;plugin documentation&lt;/a&gt; for full usage details.</source>
          <target state="translated">有关完整用法的详细信息，请参见&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#repackage&quot;&gt;插件文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9d2914cb53f0b4f1b69812d3b270c469129adef3" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://docs.spring.io/spring-data/mongodb/docs/3.1.1/api/org/springframework/data/mongodb/core/MongoOperations.html&quot;&gt;&lt;code&gt;MongoOperations&lt;/code&gt; Javadoc&lt;/a&gt; for complete details.</source>
          <target state="translated">有关完整的详细信息，请参见&lt;a href=&quot;https://docs.spring.io/spring-data/mongodb/docs/3.1.1/api/org/springframework/data/mongodb/core/MongoOperations.html&quot;&gt; &lt;code&gt;MongoOperations&lt;/code&gt; Javadoc&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="64dfb0583f1f436f340c29ca6e26c27f35b049ac" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/integration.html#mail&quot;&gt;reference documentation&lt;/a&gt; for a detailed explanation of how you can use &lt;code&gt;JavaMailSender&lt;/code&gt;.</source>
          <target state="translated">有关如何使用 &lt;code&gt;JavaMailSender&lt;/code&gt; 的详细说明，请参见&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/integration.html#mail&quot;&gt;参考文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="35edf3cc5c6ed615bff41f9b24fe535ea7ae88ef" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java&quot;&gt;&lt;code&gt;IntegrationAutoConfiguration&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationProperties.java&quot;&gt;&lt;code&gt;IntegrationProperties&lt;/code&gt;&lt;/a&gt; classes for more details.</source>
          <target state="translated">有关更多详细信息，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java&quot;&gt; &lt;code&gt;IntegrationAutoConfiguration&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationProperties.java&quot;&gt; &lt;code&gt;IntegrationProperties&lt;/code&gt; &lt;/a&gt;类。</target>
        </trans-unit>
        <trans-unit id="b41c7053c320b3c871afdec137dbec3ed61f563a" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java&quot;&gt;&lt;code&gt;JmxAutoConfiguration&lt;/code&gt;&lt;/a&gt; class for more details.</source>
          <target state="translated">有关更多详细信息，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java&quot;&gt; &lt;code&gt;JmxAutoConfiguration&lt;/code&gt; &lt;/a&gt;类。</target>
        </trans-unit>
        <trans-unit id="2e2f2b0a60131969534544204029f24c230ab990" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java&quot;&gt;&lt;code&gt;ServerProperties&lt;/code&gt;&lt;/a&gt; class for a complete list.</source>
          <target state="translated">有关完整列表，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java&quot;&gt; &lt;code&gt;ServerProperties&lt;/code&gt; &lt;/a&gt;类。</target>
        </trans-unit>
        <trans-unit id="3445c28696d1588c910e9cbafd609b33e2044dec" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/MultipartAutoConfiguration.java&quot;&gt;&lt;code&gt;MultipartAutoConfiguration&lt;/code&gt;&lt;/a&gt; source for more details.</source>
          <target state="translated">有关更多详细信息，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/MultipartAutoConfiguration.java&quot;&gt; &lt;code&gt;MultipartAutoConfiguration&lt;/code&gt; &lt;/a&gt;源。</target>
        </trans-unit>
        <trans-unit id="abdf4f9b43f4f478da7efc5df50005eeb2025eef" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java&quot;&gt;&lt;code&gt;WebMvcAutoConfiguration&lt;/code&gt;&lt;/a&gt; source code for more details.</source>
          <target state="translated">有关更多详细信息，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java&quot;&gt; &lt;code&gt;WebMvcAutoConfiguration&lt;/code&gt; &lt;/a&gt;源代码。</target>
        </trans-unit>
        <trans-unit id="c96f1c2a38379685ff8241919e85a01656fbe8d0" translate="yes" xml:space="preserve">
          <source>See the LiveReload section</source>
          <target state="translated">参见LiveReload部分</target>
        </trans-unit>
        <trans-unit id="4fe4051a262ce1de7993409908a0c67ddd54efac" translate="yes" xml:space="preserve">
          <source>See the blog post on &lt;a href=&quot;https://boxfuse.com/blog/spring-boot-ec2.html&quot;&gt;deploying Spring Boot apps on EC2&lt;/a&gt; as well as the &lt;a href=&quot;https://boxfuse.com/docs/payloads/springboot.html&quot;&gt;documentation for the Boxfuse Spring Boot integration&lt;/a&gt; to get started with a Maven build to run the app.</source>
          <target state="translated">请参阅有关&lt;a href=&quot;https://boxfuse.com/blog/spring-boot-ec2.html&quot;&gt;在EC2&lt;/a&gt;上部署Spring Boot应用程序的博客文章以及&lt;a href=&quot;https://boxfuse.com/docs/payloads/springboot.html&quot;&gt;Boxfuse Spring Boot集成&lt;/a&gt;的文档，以开始使用Maven构建来运行该应用程序。</target>
        </trans-unit>
        <trans-unit id="207be024e29168d7fd47218b75f931ccc9c6a244" translate="yes" xml:space="preserve">
          <source>Select &lt;code&gt;Run Configurations&amp;hellip;​&lt;/code&gt; from the &lt;code&gt;Run&lt;/code&gt; menu.</source>
          <target state="translated">选择 &lt;code&gt;Run Configurations&amp;hellip;​&lt;/code&gt; 从 &lt;code&gt;Run&lt;/code&gt; 菜单。</target>
        </trans-unit>
        <trans-unit id="bc1c7eabf55849a57ca844a5fa38d05a9056f86a" translate="yes" xml:space="preserve">
          <source>SendGrid API key.</source>
          <target state="translated">SendGrid API密钥。</target>
        </trans-unit>
        <trans-unit id="b955c0ce1874eb67c35c657c49d08d018c5018b1" translate="yes" xml:space="preserve">
          <source>SendGrid proxy host.</source>
          <target state="translated">SendGrid代理主机。</target>
        </trans-unit>
        <trans-unit id="c3a9ead54f20f277566cd6f45b8d1b63931fa807" translate="yes" xml:space="preserve">
          <source>SendGrid proxy port.</source>
          <target state="translated">SendGrid代理端口。</target>
        </trans-unit>
        <trans-unit id="dacb4f811b4db3151e575cd92863d7ecf8443bf4" translate="yes" xml:space="preserve">
          <source>Serialization policy for Long and long types.</source>
          <target state="translated">Long和long类型的序列化策略。</target>
        </trans-unit>
        <trans-unit id="7e54348e4cfd9b2888849f51e4424eb7598c0957" translate="yes" xml:space="preserve">
          <source>Serializer class for keys.</source>
          <target state="translated">键的序列器类。</target>
        </trans-unit>
        <trans-unit id="bfd660cfdea969f23579d1f9cbd1e4cc30dbb4c4" translate="yes" xml:space="preserve">
          <source>Serializer class for values.</source>
          <target state="translated">值的序列器类。</target>
        </trans-unit>
        <trans-unit id="cb0cb170d106f8e8d5af1e05bbdbd3a96a7de197" translate="yes" xml:space="preserve">
          <source>Server</source>
          <target state="translated">Server</target>
        </trans-unit>
        <trans-unit id="d44746b6a61dc540475d32da8691d6391cdcc486" translate="yes" xml:space="preserve">
          <source>Server HTTP port.</source>
          <target state="translated">HTTP服务器端口。</target>
        </trans-unit>
        <trans-unit id="ce07f99c55ec64645ed034e4bd6249cfb97e555e" translate="yes" xml:space="preserve">
          <source>Server ID. By default, an auto-incremented counter is used.</source>
          <target state="translated">服务器ID。默认情况下,使用自动递增的计数器。</target>
        </trans-unit>
        <trans-unit id="7e18155d91caf703f5844c374f06b4a5bc99953f" translate="yes" xml:space="preserve">
          <source>Server port.</source>
          <target state="translated">服务器端口。</target>
        </trans-unit>
        <trans-unit id="acca64b83535b9a1dff37a13cd176f393be7c195" translate="yes" xml:space="preserve">
          <source>Servers</source>
          <target state="translated">Servers</target>
        </trans-unit>
        <trans-unit id="25ae3affc09fbc88c67190ae4f4131587e327efc" translate="yes" xml:space="preserve">
          <source>Servlet 3.0+ applications might translate pretty easily if they already use the Spring Servlet 3.0+ initializer support classes. Normally, all the code from an existing &lt;code&gt;WebApplicationInitializer&lt;/code&gt; can be moved into a &lt;code&gt;SpringBootServletInitializer&lt;/code&gt;. If your existing application has more than one &lt;code&gt;ApplicationContext&lt;/code&gt; (for example, if it uses &lt;code&gt;AbstractDispatcherServletInitializer&lt;/code&gt;) then you might be able to combine all your context sources into a single &lt;code&gt;SpringApplication&lt;/code&gt;. The main complication you might encounter is if combining does not work and you need to maintain the context hierarchy. See the &lt;a href=&quot;#howto-build-an-application-context-hierarchy&quot;&gt;entry on building a hierarchy&lt;/a&gt; for examples. An existing parent context that contains web-specific features usually needs to be broken up so that all the &lt;code&gt;ServletContextAware&lt;/code&gt; components are in the child context.</source>
          <target state="translated">如果Servlet 3.0+应用程序已经使用了Spring Servlet 3.0+初始化程序支持类，那么它们可能很容易转换。通常，现有 &lt;code&gt;WebApplicationInitializer&lt;/code&gt; 中的所有代码都可以移至 &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; 中。如果您现有的应用程序具有多个 &lt;code&gt;ApplicationContext&lt;/code&gt; （例如，如果它使用 &lt;code&gt;AbstractDispatcherServletInitializer&lt;/code&gt; ），则可以将所有上下文源组合到一个 &lt;code&gt;SpringApplication&lt;/code&gt; 中。您可能会遇到的主要并发症是，如果合并无效，则需要维护上下文层次结构。请参阅&lt;a href=&quot;#howto-build-an-application-context-hierarchy&quot;&gt;有关构建层次结构&lt;/a&gt;的条目举些例子。通常需要分解包含特定于Web的功能的现有父上下文，以便所有 &lt;code&gt;ServletContextAware&lt;/code&gt; 组件都位于子上下文中。</target>
        </trans-unit>
        <trans-unit id="3d411bce7caef796445b05af88f47694187c2600" translate="yes" xml:space="preserve">
          <source>Servlet 3.0+ applications with no &lt;code&gt;web.xml&lt;/code&gt;.</source>
          <target state="translated">没有 &lt;code&gt;web.xml&lt;/code&gt; 的Servlet 3.0+应用程序。</target>
        </trans-unit>
        <trans-unit id="51033b725725c98b9ee6866fb6948ab05018a81e" translate="yes" xml:space="preserve">
          <source>Servlet Version</source>
          <target state="translated">Servlet版本</target>
        </trans-unit>
        <trans-unit id="879fc36d2199095dfd22ee5c6b67043508fa8ce9" translate="yes" xml:space="preserve">
          <source>Servlet context init parameters.</source>
          <target state="translated">Servlet上下文初始化参数。</target>
        </trans-unit>
        <trans-unit id="0659dcfa5ad0efc2a75dc827bb643cb21fa965d2" translate="yes" xml:space="preserve">
          <source>Servlet init parameters to pass to Spring Web Services.</source>
          <target state="translated">要传递给Spring Web服务的Servlet init参数。</target>
        </trans-unit>
        <trans-unit id="2ff7d1467c90465f1349a13c575c8bfc5bb74943" translate="yes" xml:space="preserve">
          <source>Servlet stack</source>
          <target state="translated">服务式栈</target>
        </trans-unit>
        <trans-unit id="355bcf83c8e88a2289742b8a963518cdded147d4" translate="yes" xml:space="preserve">
          <source>Session JNDI name. When set, takes precedence over other Session settings.</source>
          <target state="translated">会话JNDI名称。设置后,优先于其他会话设置。</target>
        </trans-unit>
        <trans-unit id="28fcdf4e7cee5c2bc0166c2d1df24232214ad8fa" translate="yes" xml:space="preserve">
          <source>Session cookie name.</source>
          <target state="translated">会话cookie名称。</target>
        </trans-unit>
        <trans-unit id="a9fbcb9c10ff0e888e41c2f60e308d128f39435f" translate="yes" xml:space="preserve">
          <source>Session repository filter dispatcher types.</source>
          <target state="translated">会话存储库过滤调度器类型。</target>
        </trans-unit>
        <trans-unit id="83142629ee318324887cc20caf8b9e249c3bfbf8" translate="yes" xml:space="preserve">
          <source>Session repository filter order.</source>
          <target state="translated">会话存储库过滤顺序。</target>
        </trans-unit>
        <trans-unit id="1b9c61e7bad217a76054ad006768b36f327ad0a9" translate="yes" xml:space="preserve">
          <source>Session settings: Whether the session is persistent (&lt;code&gt;server.servlet.session.persistent&lt;/code&gt;), session timeout (&lt;code&gt;server.servlet.session.timeout&lt;/code&gt;), location of session data (&lt;code&gt;server.servlet.session.store-dir&lt;/code&gt;), and session-cookie configuration (&lt;code&gt;server.servlet.session.cookie.*&lt;/code&gt;).</source>
          <target state="translated">会话设置：会话是否持久（ &lt;code&gt;server.servlet.session.persistent&lt;/code&gt; ），会话超时（ &lt;code&gt;server.servlet.session.timeout&lt;/code&gt; ），会话数据的位置（ &lt;code&gt;server.servlet.session.store-dir&lt;/code&gt; ）和会话cookie配置（ &lt;code&gt;server.servlet.session.cookie.*&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2c5ad3906ab179aa3caf6aa9db1433f050ed0c72" translate="yes" xml:space="preserve">
          <source>Session store type.</source>
          <target state="translated">会话存储类型。</target>
        </trans-unit>
        <trans-unit id="c612db9782b11ac15f2bddb95e80fd45cbd63382" translate="yes" xml:space="preserve">
          <source>Session timeout. If a duration suffix is not specified, seconds will be used.</source>
          <target state="translated">会话超时。如果没有指定持续时间后缀,将使用秒。</target>
        </trans-unit>
        <trans-unit id="0289c882dd189fe35a7b5d94205378b74d00f393" translate="yes" xml:space="preserve">
          <source>Session tracking modes.</source>
          <target state="translated">会话跟踪模式。</target>
        </trans-unit>
        <trans-unit id="08d6c47a905a7ae3672981fcdb032cbd52ce3f11" translate="yes" xml:space="preserve">
          <source>Sessions flush mode. Determines when session changes are written to the session store.</source>
          <target state="translated">会话刷新模式。决定何时将会话变更写入会话存储。</target>
        </trans-unit>
        <trans-unit id="57ec0719b5da8460ff1c8a27286ea12cbd999e52" translate="yes" xml:space="preserve">
          <source>Sessions save mode. Determines how session changes are tracked and saved to the session store.</source>
          <target state="translated">会话保存模式。决定如何跟踪会话更改并保存到会话存储中。</target>
        </trans-unit>
        <trans-unit id="fa6652707eb158935a9b1cf71a8d15fda6cac587" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;server.error.whitelabel.enabled=false&lt;/code&gt; to switch the default error page off. Doing so restores the default of the servlet container that you are using. Note that Spring Boot still tries to resolve the error view, so you should probably add your own error page rather than disabling it completely.</source>
          <target state="translated">设置 &lt;code&gt;server.error.whitelabel.enabled=false&lt;/code&gt; 可以关闭默认错误页面。这样做将还原您正在使用的servlet容器的默认值。请注意，Spring Boot仍然尝试解决错误视图，因此您应该添加自己的错误页面，而不是完全禁用它。</target>
        </trans-unit>
        <trans-unit id="92aadfd992a339310f493763c70dee616ee58366" translate="yes" xml:space="preserve">
          <source>Set request attributes for the IP address, Hostname, protocol, and port used for the request.</source>
          <target state="translated">设置请求的属性,包括IP地址、主机名、协议和请求使用的端口。</target>
        </trans-unit>
        <trans-unit id="5691124bce7f6dde44ba9ecf1cc9a4feccb24c54" translate="yes" xml:space="preserve">
          <source>Setters are provided for many configuration options. Several protected method &amp;ldquo;hooks&amp;rdquo; are also provided should you need to do something more exotic. See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/web/servlet/server/ConfigurableServletWebServerFactory.html&quot;&gt;source code documentation&lt;/a&gt; for details.</source>
          <target state="translated">提供了许多配置选项的设置器。如果您需要做一些更奇特的操作，还提供了几种受保护的方法&amp;ldquo;挂钩&amp;rdquo;。有关详细信息，请参见&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/web/servlet/server/ConfigurableServletWebServerFactory.html&quot;&gt;源代码文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff0e0a93f02eca72ff45eff11aa7cf0bc0a4e483" translate="yes" xml:space="preserve">
          <source>Several additional properties are available using dedicated properties; other arbitrary Kafka properties can be set using the &lt;code&gt;spring.kafka.streams.properties&lt;/code&gt; namespace. See also &lt;a href=&quot;#boot-features-kafka-extra-props&quot;&gt;Additional Kafka Properties&lt;/a&gt; for more information.</source>
          <target state="translated">使用专用属性可以使用几个附加属性。可以使用 &lt;code&gt;spring.kafka.streams.properties&lt;/code&gt; 命名空间设置其他任意Kafka属性。另请参阅&lt;a href=&quot;#boot-features-kafka-extra-props&quot;&gt;其他Kafka属性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff49ed2a50dab6b9b1e84f948a8bcaf23d59cbd3" translate="yes" xml:space="preserve">
          <source>Several locations can be specified under a single &lt;code&gt;spring.config.import&lt;/code&gt; key. Locations will be processed in the order that they are defined, with later imports taking precedence.</source>
          <target state="translated">可以在单个 &lt;code&gt;spring.config.import&lt;/code&gt; 键下指定多个位置。位置将按照定义的顺序进行处理，以后的导入将优先处理。</target>
        </trans-unit>
        <trans-unit id="54de1afd657731b2221e405dc390ddfaaf89351c" translate="yes" xml:space="preserve">
          <source>Several of the libraries supported by Spring Boot use caches to improve performance. For example, &lt;a href=&quot;spring-boot-features#boot-features-spring-mvc-template-engines&quot;&gt;template engines&lt;/a&gt; cache compiled templates to avoid repeatedly parsing template files. Also, Spring MVC can add HTTP caching headers to responses when serving static resources.</source>
          <target state="translated">Spring Boot支持的一些库使用缓存来提高性能。例如，&lt;a href=&quot;spring-boot-features#boot-features-spring-mvc-template-engines&quot;&gt;模板引擎&lt;/a&gt;缓存已编译的模板，以避免重复解析模板文件。而且，Spring MVC可以在为静态资源提供服务时将HTTP缓存标头添加到响应中。</target>
        </trans-unit>
        <trans-unit id="664dafaec54ab4fbc06243b34c13b453efa03e84" translate="yes" xml:space="preserve">
          <source>Shows &amp;lsquo;metrics&amp;rsquo; information for the current application.</source>
          <target state="translated">显示当前应用程序的&amp;ldquo;指标&amp;rdquo;信息。</target>
        </trans-unit>
        <trans-unit id="538024dbcfd07ebd31741c26474f8b6838808c82" translate="yes" xml:space="preserve">
          <source>Shows and modifies the configuration of loggers in the application.</source>
          <target state="translated">显示和修改应用程序中的记录仪配置。</target>
        </trans-unit>
        <trans-unit id="e18aad3f94cb5036394d2c9fe8928b1acdc7687f" translate="yes" xml:space="preserve">
          <source>Shows any Flyway database migrations that have been applied. Requires one or more &lt;code&gt;Flyway&lt;/code&gt; beans.</source>
          <target state="translated">显示已应用的所有Flyway数据库迁移。需要一种或多种 &lt;code&gt;Flyway&lt;/code&gt; 豆。</target>
        </trans-unit>
        <trans-unit id="538305ed4383f284dabfab0f1aa7f335b7ddc87f" translate="yes" xml:space="preserve">
          <source>Shows any Liquibase database migrations that have been applied. Requires one or more &lt;code&gt;Liquibase&lt;/code&gt; beans.</source>
          <target state="translated">显示已应用的所有Liquibase数据库迁移。需要一个或多个 &lt;code&gt;Liquibase&lt;/code&gt; 豆。</target>
        </trans-unit>
        <trans-unit id="bba6c54d1ef9302921298bd1141e62da39a29cc7" translate="yes" xml:space="preserve">
          <source>Shows application health information.</source>
          <target state="translated">显示应用程序的健康信息。</target>
        </trans-unit>
        <trans-unit id="20d1592203a75843aecc89380f1b48b6818a4c21" translate="yes" xml:space="preserve">
          <source>Shows the Spring Integration graph. Requires a dependency on &lt;code&gt;spring-integration-core&lt;/code&gt;.</source>
          <target state="translated">显示Spring Integration图。需要对 &lt;code&gt;spring-integration-core&lt;/code&gt; 的依赖。</target>
        </trans-unit>
        <trans-unit id="136b35486d0de0d4b32efbfeb3f7e6b7e4e80001" translate="yes" xml:space="preserve">
          <source>Shows the conditions that were evaluated on configuration and auto-configuration classes and the reasons why they did or did not match.</source>
          <target state="translated">显示对配置类和自动配置类进行评估的条件,以及不符合或不符合的原因。</target>
        </trans-unit>
        <trans-unit id="b51963a6faa32e3d5423f0308724782385fecdea" translate="yes" xml:space="preserve">
          <source>Shows the startup steps data collected by the &lt;code&gt;ApplicationStartup&lt;/code&gt;. Requires the &lt;code&gt;SpringApplication&lt;/code&gt; to be configured with a &lt;code&gt;BufferingApplicationStartup&lt;/code&gt;.</source>
          <target state="translated">显示由 &lt;code&gt;ApplicationStartup&lt;/code&gt; 收集的启动步骤数据。需要使用 &lt;code&gt;BufferingApplicationStartup&lt;/code&gt; 配置 &lt;code&gt;SpringApplication&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ec06db6ce33b53024b09e7c4995ab6653f44c771" translate="yes" xml:space="preserve">
          <source>Shutdown complete</source>
          <target state="translated">关机完成</target>
        </trans-unit>
        <trans-unit id="3bdcab6861ccf8702417c54d3000029bf5e5a438" translate="yes" xml:space="preserve">
          <source>Shutdown has been requested.</source>
          <target state="translated">已申请关机。</target>
        </trans-unit>
        <trans-unit id="b8800862cae43c0680cd62a8eb292bc192c7563e" translate="yes" xml:space="preserve">
          <source>Shutdown timeout.</source>
          <target state="translated">关机超时。</target>
        </trans-unit>
        <trans-unit id="614efc7461f82461c3cb6c8404d4987fa40a83c6" translate="yes" xml:space="preserve">
          <source>SignalFX access token.</source>
          <target state="translated">SignalFX访问令牌。</target>
        </trans-unit>
        <trans-unit id="ac10b4835602dd1f62ca10ed9bbfbe5df1f73e26" translate="yes" xml:space="preserve">
          <source>SignalFx</source>
          <target state="translated">SignalFx</target>
        </trans-unit>
        <trans-unit id="2c9c5af5997dd38bb08fdf43d40cfa25deb28bac" translate="yes" xml:space="preserve">
          <source>SignalFx registry pushes metrics to &lt;a href=&quot;https://micrometer.io/docs/registry/signalFx&quot;&gt;SignalFx&lt;/a&gt; periodically. To export metrics to &lt;a href=&quot;https://www.signalfx.com&quot;&gt;SignalFx&lt;/a&gt;, your access token must be provided:</source>
          <target state="translated">SignalFx注册表&lt;a href=&quot;https://micrometer.io/docs/registry/signalFx&quot;&gt;会&lt;/a&gt;定期将指标推送到SignalFx。要将指标导出到&lt;a href=&quot;https://www.signalfx.com&quot;&gt;SignalFx&lt;/a&gt;，必须提供您的访问令牌：</target>
        </trans-unit>
        <trans-unit id="9845cfea5c2d905aa139b21a1b0a8430a9d66af6" translate="yes" xml:space="preserve">
          <source>Similar to Spring MVC applications, you can secure your WebFlux applications by adding the &lt;code&gt;spring-boot-starter-security&lt;/code&gt; dependency. The default security configuration is implemented in &lt;code&gt;ReactiveSecurityAutoConfiguration&lt;/code&gt; and &lt;code&gt;UserDetailsServiceAutoConfiguration&lt;/code&gt;. &lt;code&gt;ReactiveSecurityAutoConfiguration&lt;/code&gt; imports &lt;code&gt;WebFluxSecurityConfiguration&lt;/code&gt; for web security and &lt;code&gt;UserDetailsServiceAutoConfiguration&lt;/code&gt; configures authentication, which is also relevant in non-web applications. To switch off the default web application security configuration completely, you can add a bean of type &lt;code&gt;WebFilterChainProxy&lt;/code&gt; (doing so does not disable the &lt;code&gt;UserDetailsService&lt;/code&gt; configuration or Actuator&amp;rsquo;s security).</source>
          <target state="translated">与Spring MVC应用程序类似，您可以通过添加 &lt;code&gt;spring-boot-starter-security&lt;/code&gt; 依赖项来保护WebFlux应用程序。默认的安全配置在 &lt;code&gt;ReactiveSecurityAutoConfiguration&lt;/code&gt; 和 &lt;code&gt;UserDetailsServiceAutoConfiguration&lt;/code&gt; 。 &lt;code&gt;ReactiveSecurityAutoConfiguration&lt;/code&gt; 导入 &lt;code&gt;WebFluxSecurityConfiguration&lt;/code&gt; 以获得Web安全，而 &lt;code&gt;UserDetailsServiceAutoConfiguration&lt;/code&gt; 配置身份验证，这在非Web应用程序中也相关。要完全关闭默认的Web应用程序安全性配置，可以添加 &lt;code&gt;WebFilterChainProxy&lt;/code&gt; 类型的Bean （这样做不会禁用 &lt;code&gt;UserDetailsService&lt;/code&gt; 配置或执行器的安全性）。</target>
        </trans-unit>
        <trans-unit id="69a5b6deb5b589f822b1d77670fe9a5a9e1f5cf8" translate="yes" xml:space="preserve">
          <source>Similarly to &lt;a href=&quot;#boot-features-embedded-database-support&quot;&gt;the JDBC support&lt;/a&gt;, Spring Boot can automatically configure an embedded database for reactive usage. You need not provide any connection URLs. You need only include a build dependency to the embedded database that you want to use, as shown in the following example:</source>
          <target state="translated">与&lt;a href=&quot;#boot-features-embedded-database-support&quot;&gt;JDBC支持&lt;/a&gt;类似，Spring Boot可以自动配置嵌入式数据库以进行响应式使用。您无需提供任何连接URL。您只需要包括要使用的嵌入式数据库的构建依赖关系，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="507d3f63109689a2ad4613b32f33286b69840b0f" translate="yes" xml:space="preserve">
          <source>Similarly, to create a group that excludes the database indicators from the group and includes all the other indicators, you can define the following:</source>
          <target state="translated">同样,要创建一个不包括数据库指标的组,而包括所有其他指标的组,可以定义如下。</target>
        </trans-unit>
        <trans-unit id="8d889f8020c7723b58cb0fae4b0b3c38cf864b97" translate="yes" xml:space="preserve">
          <source>Similarly, you can disable the &lt;code&gt;JsonSerializer&lt;/code&gt; default behavior of sending type information in headers:</source>
          <target state="translated">同样，您可以禁用 &lt;code&gt;JsonSerializer&lt;/code&gt; 在报头中发送类型信息的默认行为：</target>
        </trans-unit>
        <trans-unit id="de72ea9e60d3b0389fb7873c1d21268b088fa6d4" translate="yes" xml:space="preserve">
          <source>Simple</source>
          <target state="translated">Simple</target>
        </trans-unit>
        <trans-unit id="5837f08a57e1bb23bc1279e2febb8924e9d2a7e2" translate="yes" xml:space="preserve">
          <source>Simple (in-memory)</source>
          <target state="translated">简单(内存)</target>
        </trans-unit>
        <trans-unit id="212b435f3ba772c3bd73d66e82d94c6a2e3abf31" translate="yes" xml:space="preserve">
          <source>Simple class name of any exception that was thrown while handling the request.</source>
          <target state="translated">处理请求时抛出的任何异常的简单类名。</target>
        </trans-unit>
        <trans-unit id="2405a9920cfa580db255927165330a245f7fe5b1" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://discuss.kotlinlang.org/t/classes-final-by-default/166&quot;&gt;Kotlin classes are final by default&lt;/a&gt;, you are likely to want to configure &lt;a href=&quot;https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support&quot;&gt;kotlin-spring&lt;/a&gt; plugin in order to automatically open Spring-annotated classes so that they can be proxied.</source>
          <target state="translated">由于&lt;a href=&quot;https://discuss.kotlinlang.org/t/classes-final-by-default/166&quot;&gt;默认情况下Kotlin类是final类&lt;/a&gt;，因此您可能需要配置&lt;a href=&quot;https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support&quot;&gt;kotlin-spring&lt;/a&gt;插件，以便自动打开带有Spring注释的类，以便对其进行代理。</target>
        </trans-unit>
        <trans-unit id="261dfea2c86b56e85100e91148812ad3953954dc" translate="yes" xml:space="preserve">
          <source>Since Endpoints may contain sensitive information, careful consideration should be given about when to expose them. The following table shows the default exposure for the built-in endpoints:</source>
          <target state="translated">由于端点可能包含敏感信息,因此应仔细考虑何时暴露它们。下表显示了内置端点的默认暴露。</target>
        </trans-unit>
        <trans-unit id="6f1a40518f34371dc743d321f9c843e56511f018" translate="yes" xml:space="preserve">
          <source>Since Spring Boot applications are plain Java applications, JVM hot-swapping should work out of the box. JVM hot swapping is somewhat limited with the bytecode that it can replace. For a more complete solution, &lt;a href=&quot;https://www.jrebel.com/products/jrebel&quot;&gt;JRebel&lt;/a&gt; can be used.</source>
          <target state="translated">由于Spring Boot应用程序是普通的Java应用程序，因此JVM热交换应该可以立即使用。JVM热插拔在一定程度上受到它可以替换的字节码的限制。对于更完整的解决方案，可以使用&lt;a href=&quot;https://www.jrebel.com/products/jrebel&quot;&gt;JRebel&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6d24dc8ed01ca592b7eb2c5a4f4b9724f665d89b" translate="yes" xml:space="preserve">
          <source>Since Spring Boot relies on Spring Security&amp;rsquo;s defaults, CSRF protection is turned on by default. This means that the actuator endpoints that require a &lt;code&gt;POST&lt;/code&gt; (shutdown and loggers endpoints), &lt;code&gt;PUT&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt; will get a 403 forbidden error when the default security configuration is in use.</source>
          <target state="translated">由于Spring Boot依赖于Spring Security的默认值，因此默认情况下CSRF保护是打开的。这意味着在使用默认安全配置时，需要 &lt;code&gt;POST&lt;/code&gt; （关闭和记录器端点）， &lt;code&gt;PUT&lt;/code&gt; 或 &lt;code&gt;DELETE&lt;/code&gt; 的执行器端点将收到403禁止错误。</target>
        </trans-unit>
        <trans-unit id="797f8779337403a96b3181f3085385b099aa82c8" translate="yes" xml:space="preserve">
          <source>Since a logger name can be any arbitrary name, this provider should allow any value but could highlight valid package and class names that are not available in the project&amp;rsquo;s classpath.</source>
          <target state="translated">由于记录器名称可以是任意名称，因此该提供程序应允许使用任何值，但可以突出显示项目的类路径中不可用的有效程序包和类名称。</target>
        </trans-unit>
        <trans-unit id="2c61034fa8751aebdcc2e2e9a15e565dcac435d1" translate="yes" xml:space="preserve">
          <source>Since logging is initialized &lt;strong&gt;before&lt;/strong&gt; the &lt;code&gt;ApplicationContext&lt;/code&gt; is created, it is not possible to control logging from &lt;code&gt;@PropertySources&lt;/code&gt; in Spring &lt;code&gt;@Configuration&lt;/code&gt; files. The only way to change the logging system or disable it entirely is via System properties.</source>
          <target state="translated">由于日志记录是&lt;strong&gt;在&lt;/strong&gt;创建 &lt;code&gt;ApplicationContext&lt;/code&gt; &lt;strong&gt;之前&lt;/strong&gt;初始化的，因此无法从Spring &lt;code&gt;@Configuration&lt;/code&gt; 文件中的 &lt;code&gt;@PropertySources&lt;/code&gt; 控制日志记录。更改日志记录系统或完全禁用它的唯一方法是通过系统属性。</target>
        </trans-unit>
        <trans-unit id="e2692813473407ea69451b8707e1fd09e5e656e9" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;Endpoint&lt;/code&gt; is a Spring &lt;code&gt;@Component&lt;/code&gt;, its lifecycle is managed by Spring and you can use the &lt;code&gt;@Autowired&lt;/code&gt; annotation to inject dependencies and use the &lt;code&gt;@Value&lt;/code&gt; annotation to inject external configuration. By default, the Jersey servlet is registered and mapped to &lt;code&gt;/*&lt;/code&gt;. You can change the mapping by adding &lt;code&gt;@ApplicationPath&lt;/code&gt; to your &lt;code&gt;ResourceConfig&lt;/code&gt;.</source>
          <target state="translated">由于 &lt;code&gt;Endpoint&lt;/code&gt; 是Spring &lt;code&gt;@Component&lt;/code&gt; ，其生命周期由Spring管理，因此您可以使用 &lt;code&gt;@Autowired&lt;/code&gt; 批注注入依赖项，并使用 &lt;code&gt;@Value&lt;/code&gt; 批注注入外部配置。默认情况下，Jersey servlet已注册并映射到 &lt;code&gt;/*&lt;/code&gt; 。您可以通过将 &lt;code&gt;@ApplicationPath&lt;/code&gt; 添加到 &lt;code&gt;ResourceConfig&lt;/code&gt; 来更改映射。</target>
        </trans-unit>
        <trans-unit id="a3ec31da2d561366f5f2a4f3d933422811aabc47" translate="yes" xml:space="preserve">
          <source>Single page HTML</source>
          <target state="translated">单页HTML</target>
        </trans-unit>
        <trans-unit id="b03d92d23a9137d82c085959673fb319c4b646e2" translate="yes" xml:space="preserve">
          <source>Single-line version of &lt;code&gt;${project.description}&lt;/code&gt; (falling back to &lt;code&gt;${task.baseName}&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;${project.description}&lt;/code&gt; 的单行版本（回溯到 &lt;code&gt;${task.baseName}&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="176c999f76fc79ff2b5cb075411c3a02dfd7447f" translate="yes" xml:space="preserve">
          <source>Size of each buffer. The default is derived from the maximum amount of memory that is available to the JVM.</source>
          <target state="translated">每个缓冲区的大小。默认值来自于JVM可用的最大内存量。</target>
        </trans-unit>
        <trans-unit id="4c1c16ec7358d9ac595a76b87ce7476457a6a14c" translate="yes" xml:space="preserve">
          <source>Size of the session cache (per JMS Session type).</source>
          <target state="translated">会话缓存的大小(每个JMS会话类型)。</target>
        </trans-unit>
        <trans-unit id="ebf0ef7bc78740ef47d6a959709d7cb60efeb4a5" translate="yes" xml:space="preserve">
          <source>Sleep interval between Consumer.poll(Duration) calls.</source>
          <target state="translated">Consumer.poll(Duration)调用之间的睡眠间隔。</target>
        </trans-unit>
        <trans-unit id="f9d595681bb066cff6e9cc1cf8cb08f5447e2206" translate="yes" xml:space="preserve">
          <source>Solr</source>
          <target state="translated">Solr</target>
        </trans-unit>
        <trans-unit id="965f2ba1fa789b32c611149e0b9d5ce931bd685b" translate="yes" xml:space="preserve">
          <source>Solr host. Ignored if &quot;zk-host&quot; is set.</source>
          <target state="translated">Solr主机。如果设置了 &quot;zk-host &quot;则忽略。</target>
        </trans-unit>
        <trans-unit id="a5d0ce3a241a9e6b383d778c42e609d9ecd8a3da" translate="yes" xml:space="preserve">
          <source>Some IDEs have features that save you from needing to update your trigger file manually. &lt;a href=&quot;https://spring.io/tools&quot;&gt;Spring Tools for Eclipse&lt;/a&gt; and &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA (Ultimate Edition)&lt;/a&gt; both have such support. With Spring Tools, you can use the &amp;ldquo;reload&amp;rdquo; button from the console view (as long as your &lt;code&gt;trigger-file&lt;/code&gt; is named &lt;code&gt;.reloadtrigger&lt;/code&gt;). For IntelliJ IDEA, you can follow the &lt;a href=&quot;https://www.jetbrains.com/help/idea/spring-boot.html#application-update-policies&quot;&gt;instructions in their documentation&lt;/a&gt;.</source>
          <target state="translated">某些IDE具有使您不必手动更新触发器文件的功能。&lt;a href=&quot;https://spring.io/tools&quot;&gt;Eclipse的Spring工具&lt;/a&gt;和&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA（最终版）&lt;/a&gt;都具有这种支持。使用Spring Tools，您可以从控制台视图使用&amp;ldquo;重新加载&amp;rdquo;按钮（只要您的 &lt;code&gt;trigger-file&lt;/code&gt; 名为 &lt;code&gt;.reloadtrigger&lt;/code&gt; ）。对于IntelliJ IDEA，您可以按照&lt;a href=&quot;https://www.jetbrains.com/help/idea/spring-boot.html#application-update-policies&quot;&gt;其文档中&lt;/a&gt;的说明进行操作。</target>
        </trans-unit>
        <trans-unit id="0bc351eef6f4b42d0dc69a9adec55bbaebdfe2a6" translate="yes" xml:space="preserve">
          <source>Some cloud platforms cannot add a file extension to volume mounted files. To import these extensionless files, you need to give Spring Boot a hint so that it knows how to load them. You can do this by putting an extension hint in square brackets.</source>
          <target state="translated">一些云平台不能为卷挂载的文件添加文件扩展名。要导入这些无扩展名的文件,您需要给Spring Boot一个提示,以便它知道如何加载它们。您可以通过在方括号中放入扩展名提示来实现。</target>
        </trans-unit>
        <trans-unit id="846696452ab17b5c3e5241e820b44f63a150fe22" translate="yes" xml:space="preserve">
          <source>Some events are actually triggered before the &lt;code&gt;ApplicationContext&lt;/code&gt; is created, so you cannot register a listener on those as a &lt;code&gt;@Bean&lt;/code&gt;. You can register them with the &lt;code&gt;SpringApplication.addListeners(&amp;hellip;​)&lt;/code&gt; method or the &lt;code&gt;SpringApplicationBuilder.listeners(&amp;hellip;​)&lt;/code&gt; method.</source>
          <target state="translated">实际上在创建 &lt;code&gt;ApplicationContext&lt;/code&gt; 之前会触发一些事件，因此您不能将这些事件注册为 &lt;code&gt;@Bean&lt;/code&gt; 。您可以使用 &lt;code&gt;SpringApplication.addListeners(&amp;hellip;​)&lt;/code&gt; 方法或 &lt;code&gt;SpringApplicationBuilder.listeners(&amp;hellip;​)&lt;/code&gt; 方法注册它们。</target>
        </trans-unit>
        <trans-unit id="78b12be7da041139d526cf97933a5cd45ea215fc" translate="yes" xml:space="preserve">
          <source>Some people like to use (for example) &lt;code&gt;--port=9000&lt;/code&gt; instead of &lt;code&gt;--server.port=9000&lt;/code&gt; to set configuration properties on the command line. You can enable this behavior by using placeholders in &lt;code&gt;application.properties&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">有些人喜欢使用 &lt;code&gt;--port=9000&lt;/code&gt; 而不是 &lt;code&gt;--server.port=9000&lt;/code&gt; 在命令行上设置配置属性。您可以通过在 &lt;code&gt;application.properties&lt;/code&gt; 中使用占位符来启用此行为，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="c7646be8b743e594b3fa8f3c390468912c6b04f7" translate="yes" xml:space="preserve">
          <source>Some people use Project Lombok to add getters and setters automatically. Make sure that Lombok does not generate any particular constructor for such a type, as it is used automatically by the container to instantiate the object.</source>
          <target state="translated">有些人使用Project Lombok来自动添加getter和setter。确保Lombok不为这样的类型生成任何特定的构造函数,因为它被容器自动用于实例化对象。</target>
        </trans-unit>
        <trans-unit id="cfd83dc12cf5442251aeab4d73f8d65c7b0dbf1c" translate="yes" xml:space="preserve">
          <source>Sometimes writing Spring MVC tests is not enough; Spring Boot can help you run &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-with-running-server&quot;&gt;full end-to-end tests with an actual server&lt;/a&gt;.</source>
          <target state="translated">有时编写Spring MVC测试是不够的。Spring Boot可以帮助您在&lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-with-running-server&quot;&gt;实际服务器上&lt;/a&gt;运行完整的端到端测试。</target>
        </trans-unit>
        <trans-unit id="2e795d078276e1075f28f628ea2bcdfbeb08e805" translate="yes" xml:space="preserve">
          <source>Sometimes writing Spring WebFlux tests is not enough; Spring Boot can help you run &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-with-running-server&quot;&gt;full end-to-end tests with an actual server&lt;/a&gt;.</source>
          <target state="translated">有时编写Spring WebFlux测试是不够的。Spring Boot可以帮助您在&lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-with-running-server&quot;&gt;实际服务器上&lt;/a&gt;运行完整的端到端测试。</target>
        </trans-unit>
        <trans-unit id="85e1010889df71948d4ca21d8d995ce91b6adf08" translate="yes" xml:space="preserve">
          <source>Sometimes, classes annotated with &lt;code&gt;@ConfigurationProperties&lt;/code&gt; might not be suitable for scanning, for example, if you&amp;rsquo;re developing your own auto-configuration or you want to enable them conditionally. In these cases, specify the list of types to process using the &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; annotation. This can be done on any &lt;code&gt;@Configuration&lt;/code&gt; class, as shown in the following example:</source>
          <target state="translated">有时，用 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 注释的类可能不适合扫描，例如，如果您正在开发自己的自动配置，或者想要有条件地启用它们。在这些情况下，请使用 &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; 批注指定要处理的类型列表。可以在任何 &lt;code&gt;@Configuration&lt;/code&gt; 类上完成此操作，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="7a8895ab3497fa1dd2fb7db6a39880798e233520" translate="yes" xml:space="preserve">
          <source>Sometimes, it is useful to customize the prefix for the management endpoints. For example, your application might already use &lt;code&gt;/actuator&lt;/code&gt; for another purpose. You can use the &lt;code&gt;management.endpoints.web.base-path&lt;/code&gt; property to change the prefix for your management endpoint, as shown in the following example:</source>
          <target state="translated">有时，为管理端点自定义前缀很有用。例如，您的应用程序可能已经将 &lt;code&gt;/actuator&lt;/code&gt; 用于其他目的。您可以使用 &lt;code&gt;management.endpoints.web.base-path&lt;/code&gt; 属性更改管理端点的前缀，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="a9052c95927bd05ac4adacee405c48791778e412" translate="yes" xml:space="preserve">
          <source>Sometimes, it is useful to have properties that &lt;strong&gt;add&lt;/strong&gt; to the active profiles rather than replace them. The &lt;code&gt;SpringApplication&lt;/code&gt; entry point has a Java API for setting additional profiles (that is, on top of those activated by the &lt;code&gt;spring.profiles.active&lt;/code&gt; property). See the &lt;code&gt;setAdditionalProfiles()&lt;/code&gt; method in &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/SpringApplication.html&quot;&gt;SpringApplication&lt;/a&gt;. Profile groups, which are described in the &lt;a href=&quot;#boot-features-profiles-groups&quot;&gt;next section&lt;/a&gt; can also be used to add active profiles if a given profile is active.</source>
          <target state="translated">有时，将属性&lt;strong&gt;添加&lt;/strong&gt;到活动配置文件而不是替换它们很有用。该 &lt;code&gt;SpringApplication&lt;/code&gt; 入口点设置额外的配置文件的Java API（即，是对那些由活化的顶部 &lt;code&gt;spring.profiles.active&lt;/code&gt; 属性）。参见 &lt;code&gt;setAdditionalProfiles()&lt;/code&gt; 在方法&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/SpringApplication.html&quot;&gt;SpringApplication&lt;/a&gt;。如果给定的配置文件处于活动状态，则&lt;a href=&quot;#boot-features-profiles-groups&quot;&gt;下一部分&lt;/a&gt;中描述的配置文件组也可以用于添加活动的配置文件。</target>
        </trans-unit>
        <trans-unit id="e97aa8b6c37a05190a6d03373b0df54ae3a5d699" translate="yes" xml:space="preserve">
          <source>Sort parameter name.</source>
          <target state="translated">排序参数名称。</target>
        </trans-unit>
        <trans-unit id="8bf0b58bfa23f47623730fc44260676750b65b7d" translate="yes" xml:space="preserve">
          <source>Sources (class names, package names, or XML resource locations) to include in the ApplicationContext.</source>
          <target state="translated">要包含在ApplicationContext中的源(类名、包名或XML资源位置)。</target>
        </trans-unit>
        <trans-unit id="cacb87665c664d040f1875cbeda167b98b08da33" translate="yes" xml:space="preserve">
          <source>SpEL Expression Conditions</source>
          <target state="translated">SpEL表达条件</target>
        </trans-unit>
        <trans-unit id="92d67697ebc391ebded2ad9e3d56c60a71768167" translate="yes" xml:space="preserve">
          <source>Specific computed non-aggregable percentiles to ship to the backend for meter IDs starting-with the specified name. The longest match wins, the key `all` can also be used to configure all meters.</source>
          <target state="translated">以指定名称开头的电表ID的特定计算的不可聚集的百分比,以运到后台。匹配时间最长的为胜,键 &quot;all &quot;也可以用来配置所有仪表。</target>
        </trans-unit>
        <trans-unit id="aa1ece4a7f4cea303a270737e5cfc8db98adba75" translate="yes" xml:space="preserve">
          <source>Specific directory</source>
          <target state="translated">具体目录</target>
        </trans-unit>
        <trans-unit id="1fbfbc9799e03f6a6b6398b9f7f0ff24a70efb7f" translate="yes" xml:space="preserve">
          <source>Specific file</source>
          <target state="translated">特定文件</target>
        </trans-unit>
        <trans-unit id="c5fcc82b2636792a9cdde5e36800a76004010ec8" translate="yes" xml:space="preserve">
          <source>Specific service-level objective boundaries for meter IDs starting with the specified name. The longest match wins. Counters will be published for each specified boundary. Values can be specified as a long or as a Duration value (for timer meters, defaulting to ms if no unit specified).</source>
          <target state="translated">以指定名称开头的仪表ID的具体服务级目标边界。匹配时间最长者获胜。计数器将为每个指定边界发布。值可以指定为一个长值或一个持续时间值(对于计时器仪表,如果没有指定单位,则默认为ms)。</target>
        </trans-unit>
        <trans-unit id="3033f0071debc3988e7b61030e7c480e6c48a211" translate="yes" xml:space="preserve">
          <source>Specify start-class</source>
          <target state="translated">指定起始等级</target>
        </trans-unit>
        <trans-unit id="9eb18ea0282ea9f8f5688f911ddb27e607189f7e" translate="yes" xml:space="preserve">
          <source>Specify whether known groups should be considered.</source>
          <target state="translated">指定是否应考虑已知群体。</target>
        </trans-unit>
        <trans-unit id="5ca39a01a071cdb7165a92bd8b3bca748bd7b144" translate="yes" xml:space="preserve">
          <source>Specify whether only concrete classes are to be considered as valid candidates.</source>
          <target state="translated">指定是否只将具体的类视为有效的候选人。</target>
        </trans-unit>
        <trans-unit id="bd82218e3b0d052fcdbe9dd6eaef734feb30b3fb" translate="yes" xml:space="preserve">
          <source>Specify whether sub-transactions are allowed.</source>
          <target state="translated">指定是否允许子交易。</target>
        </trans-unit>
        <trans-unit id="5a0ce3c96be1329aa3214b0c1cdb79d8536ea010" translate="yes" xml:space="preserve">
          <source>Specify whether the property is deprecated. If the field is not deprecated or if that information is not known, it may be omitted. The next table offers more detail about the &lt;code&gt;deprecation&lt;/code&gt; attribute.</source>
          <target state="translated">指定是否不推荐使用该属性。如果不建议使用该字段，或者该信息未知，则可以将其省略。下表提供了有关 &lt;code&gt;deprecation&lt;/code&gt; 属性的更多详细信息。</target>
        </trans-unit>
        <trans-unit id="de8d0b9c58469b37e88ab3a6d0dc8ed162f38f46" translate="yes" xml:space="preserve">
          <source>Spock test.</source>
          <target state="translated">斯波克测试。</target>
        </trans-unit>
        <trans-unit id="ce7a9bfc63ebbd5c315fe5cd69f84af654798a7d" translate="yes" xml:space="preserve">
          <source>Spring Batch auto-configuration is enabled by adding &lt;code&gt;@EnableBatchProcessing&lt;/code&gt; to one of your &lt;code&gt;@Configuration&lt;/code&gt; classes.</source>
          <target state="translated">通过将 &lt;code&gt;@EnableBatchProcessing&lt;/code&gt; 添加到您的 &lt;code&gt;@Configuration&lt;/code&gt; 类之一来启用Spring Batch自动配置。</target>
        </trans-unit>
        <trans-unit id="a308c2c23f2c92979c166732b89de3aa674b03ec" translate="yes" xml:space="preserve">
          <source>Spring Batch requires a data store for the &lt;code&gt;Job&lt;/code&gt; repository. If you use Spring Boot, you must use an actual database. Note that it can be an in-memory database, see &lt;a href=&quot;https://docs.spring.io/spring-batch/docs/4.3.0/reference/html/job.html#configuringJobRepository&quot;&gt;Configuring a Job Repository&lt;/a&gt;.</source>
          <target state="translated">Spring Batch需要一个用于 &lt;code&gt;Job&lt;/code&gt; 仓库的数据存储。如果使用Spring Boot，则必须使用实际的数据库。请注意，它可以是内存数据库，请参阅&amp;ldquo;&lt;a href=&quot;https://docs.spring.io/spring-batch/docs/4.3.0/reference/html/job.html#configuringJobRepository&quot;&gt;配置作业存储库&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3ada00ce5e0a4d8c14225fb4543bae7661795058" translate="yes" xml:space="preserve">
          <source>Spring Batch.</source>
          <target state="translated">春季批。</target>
        </trans-unit>
        <trans-unit id="21b1cf2431601cc743a81665e6215942b5304d29" translate="yes" xml:space="preserve">
          <source>Spring Boot</source>
          <target state="translated">弹簧靴</target>
        </trans-unit>
        <trans-unit id="62aac09b54bac655993f6bfb9f37b86dec8c3086" translate="yes" xml:space="preserve">
          <source>Spring Boot 2.4.0 requires &lt;a href=&quot;https://www.java.com&quot;&gt;Java 8&lt;/a&gt; and is compatible up to Java 15 (included). &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/&quot;&gt;Spring Framework 5.3.1&lt;/a&gt; or above is also required.</source>
          <target state="translated">Spring Boot 2.4.0需要&lt;a href=&quot;https://www.java.com&quot;&gt;Java 8，&lt;/a&gt;并且与Java 15（包括）兼容。还需要&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/&quot;&gt;Spring Framework 5.3.1&lt;/a&gt;或更高版本。</target>
        </trans-unit>
        <trans-unit id="890b1fd4902412119f5cc8dfa073ac257a4d8a19" translate="yes" xml:space="preserve">
          <source>Spring Boot Actuator</source>
          <target state="translated">弹簧套致动器</target>
        </trans-unit>
        <trans-unit id="b6036590e06613ad1c842239e15a7bf1cae706b2" translate="yes" xml:space="preserve">
          <source>Spring Boot Actuator includes the ability to view and configure the log levels of your application at runtime. You can view either the entire list or an individual logger&amp;rsquo;s configuration, which is made up of both the explicitly configured logging level as well as the effective logging level given to it by the logging framework. These levels can be one of:</source>
          <target state="translated">Spring Boot Actuator可以在运行时查看和配置应用程序的日志级别。您可以查看整个列表或单个记录器的配置，该配置由显式配置的记录级别以及由记录框架赋予它的有效记录级别组成。这些级别可以是以下之一：</target>
        </trans-unit>
        <trans-unit id="8162386924bad3bd14b7f8353ede042309d9b55e" translate="yes" xml:space="preserve">
          <source>Spring Boot Actuator manages the instrumentation of both &lt;code&gt;RestTemplate&lt;/code&gt; and &lt;code&gt;WebClient&lt;/code&gt;. For that, you have to get injected with an auto-configured builder and use it to create instances:</source>
          <target state="translated">Spring Boot Actuator管理 &lt;code&gt;RestTemplate&lt;/code&gt; 和 &lt;code&gt;WebClient&lt;/code&gt; 的工具。为此，您必须注入自动配置的构建器并使用它来创建实例：</target>
        </trans-unit>
        <trans-unit id="bc3e3066fca6d6e8bd3729113ed6bd2cb4c0dd0f" translate="yes" xml:space="preserve">
          <source>Spring Boot Actuator provides dependency management and auto-configuration for &lt;a href=&quot;https://micrometer.io&quot;&gt;Micrometer&lt;/a&gt;, an application metrics facade that supports &lt;a href=&quot;https://micrometer.io/docs&quot;&gt;numerous monitoring systems&lt;/a&gt;, including:</source>
          <target state="translated">Spring Boot Actuator为&lt;a href=&quot;https://micrometer.io&quot;&gt;Micrometer&lt;/a&gt;提供了依赖项管理和自动配置，Micrometer是一种支持&lt;a href=&quot;https://micrometer.io/docs&quot;&gt;多种监视系统&lt;/a&gt;的应用程序指标外观，其中包括：</target>
        </trans-unit>
        <trans-unit id="34ea07a7108ea6e9df7fea1e5537e2cf7738baea" translate="yes" xml:space="preserve">
          <source>Spring Boot Actuator: Production-ready Features</source>
          <target state="translated">弹簧靴执行器。可生产的特性</target>
        </trans-unit>
        <trans-unit id="d32adebdcad24a44c2e862ca02b8d26cb25a1674" translate="yes" xml:space="preserve">
          <source>Spring Boot CLI</source>
          <target state="translated">Spring Boot CLI</target>
        </trans-unit>
        <trans-unit id="c1d7622aad90bac6b165345a7b49548c46e60650" translate="yes" xml:space="preserve">
          <source>Spring Boot Documentation</source>
          <target state="translated">Spring Boot文档</target>
        </trans-unit>
        <trans-unit id="c05bee8ff0d276d8f745fb5284a72b9f03b4b30c" translate="yes" xml:space="preserve">
          <source>Spring Boot Features</source>
          <target state="translated">Spring Boot功能</target>
        </trans-unit>
        <trans-unit id="a0f851b8a1a737a79f37c0775f8d292ac0c8d4e9" translate="yes" xml:space="preserve">
          <source>Spring Boot Loader strives to remain compatible with existing code and libraries. &lt;code&gt;org.springframework.boot.loader.jar.JarFile&lt;/code&gt; extends from &lt;code&gt;java.util.jar.JarFile&lt;/code&gt; and should work as a drop-in replacement. The &lt;code&gt;getURL()&lt;/code&gt; method returns a &lt;code&gt;URL&lt;/code&gt; that opens a connection compatible with &lt;code&gt;java.net.JarURLConnection&lt;/code&gt; and can be used with Java&amp;rsquo;s &lt;code&gt;URLClassLoader&lt;/code&gt;.</source>
          <target state="translated">Spring Boot Loader努力保持与现有代码和库的兼容性。 &lt;code&gt;org.springframework.boot.loader.jar.JarFile&lt;/code&gt; 从 &lt;code&gt;java.util.jar.JarFile&lt;/code&gt; 扩展而来，可以作为替代产品。在 &lt;code&gt;getURL()&lt;/code&gt; 方法返回一个 &lt;code&gt;URL&lt;/code&gt; ，打开兼容的连接 &lt;code&gt;java.net.JarURLConnection&lt;/code&gt; 中，可与Java的使用 &lt;code&gt;URLClassLoader&lt;/code&gt; 的。</target>
        </trans-unit>
        <trans-unit id="ee5639d7f9486b6ae7561a1f598c7716bd187f6a" translate="yes" xml:space="preserve">
          <source>Spring Boot Loader-compatible jar and war archives can include additional index files under the &lt;code&gt;BOOT-INF/&lt;/code&gt; directory. A &lt;code&gt;classpath.idx&lt;/code&gt; file can be provided for both jars and wars, it provides the ordering that jars should be added to the classpath. The &lt;code&gt;layers.idx&lt;/code&gt; file can be used only for jars, it allows a jar to be split into logical layers for Docker/OCI image creation.</source>
          <target state="translated">兼容Spring Boot Loader的jar和war归档文件可以在 &lt;code&gt;BOOT-INF/&lt;/code&gt; 目录下包含其他索引文件。一个 &lt;code&gt;classpath.idx&lt;/code&gt; 可以提供两个罐子和战争文件，它提供了排序，以罐子应该加入到classpath中。该 &lt;code&gt;layers.idx&lt;/code&gt; 文件只能用于罐一起使用，它允许一个罐子被划分成用于泊坞/ OCI图像创建的逻辑层。</target>
        </trans-unit>
        <trans-unit id="676fad54890cb76c9b02e4ced2bc0f172ae3e19b" translate="yes" xml:space="preserve">
          <source>Spring Boot Loader-compatible jar files should be structured in the following way:</source>
          <target state="translated">与Spring Boot Loader兼容的jar文件应按以下方式结构。</target>
        </trans-unit>
        <trans-unit id="46db9c920f811ab191db12051264f1cefe95a7fc" translate="yes" xml:space="preserve">
          <source>Spring Boot Loader-compatible war files should be structured in the following way:</source>
          <target state="translated">与Spring Boot Loader兼容的战争文件应按以下方式构建。</target>
        </trans-unit>
        <trans-unit id="f33123b735dfb27de58e90d24cbbdc95cc386001" translate="yes" xml:space="preserve">
          <source>Spring Boot Reference Documentation</source>
          <target state="translated">Spring Boot参考文档</target>
        </trans-unit>
        <trans-unit id="0adaa7c510ffb42da9c94b0347119f409492860e" translate="yes" xml:space="preserve">
          <source>Spring Boot allows exposing RSocket over WebSocket from a WebFlux server, or standing up an independent RSocket server. This depends on the type of application and its configuration.</source>
          <target state="translated">Spring Boot 允许从 WebFlux 服务器通过 WebSocket 公开 RSocket,或建立独立的 RSocket 服务器。这取决于应用程序的类型及其配置。</target>
        </trans-unit>
        <trans-unit id="2802e2f41b20637c3c77dd166a9f99a4ce2147d9" translate="yes" xml:space="preserve">
          <source>Spring Boot allows you to split a single physical file into multiple logical documents which are each added independently. Documents are processed in order, from top to bottom. Later documents can override the properties defined in earlier ones.</source>
          <target state="translated">Spring Boot允许您将单个物理文件分割成多个逻辑文件,每个文件都是独立添加的。文件按照从上到下的顺序进行处理。后面的文档可以覆盖前面定义的属性。</target>
        </trans-unit>
        <trans-unit id="2d66e7df02e88f7b5768453597a57396c17ec17f" translate="yes" xml:space="preserve">
          <source>Spring Boot also &lt;a href=&quot;#production-ready-metrics-meter&quot;&gt;configures built-in instrumentation&lt;/a&gt; that you can control via configuration or dedicated annotation markers.</source>
          <target state="translated">Spring Boot还&lt;a href=&quot;#production-ready-metrics-meter&quot;&gt;配置了内置工具&lt;/a&gt;，您可以通过配置或专用注释标记来控制它们。</target>
        </trans-unit>
        <trans-unit id="59bf4850c3ae11415d959266a2b1b7747718ce0c" translate="yes" xml:space="preserve">
          <source>Spring Boot also configures some features that are triggered by the presence of additional Spring Integration modules. If &lt;code&gt;spring-integration-jmx&lt;/code&gt; is also on the classpath, message processing statistics are published over JMX. If &lt;code&gt;spring-integration-jdbc&lt;/code&gt; is available, the default database schema can be created on startup, as shown in the following line:</source>
          <target state="translated">Spring Boot还配置了一些功能，这些功能由其他Spring Integration模块的存在触发。如果 &lt;code&gt;spring-integration-jmx&lt;/code&gt; 也位于类路径上，则消息处理统计信息将通过JMX发布。如果 &lt;code&gt;spring-integration-jdbc&lt;/code&gt; 可用，则可以在启动时创建默认的数据库模式，如以下行所示：</target>
        </trans-unit>
        <trans-unit id="0f3f726ffa14d3603b3e46dfaa3e0916c25c4ef6" translate="yes" xml:space="preserve">
          <source>Spring Boot also has &lt;a href=&quot;#boot-features-caching-provider-hazelcast&quot;&gt;explicit caching support for Hazelcast&lt;/a&gt;. If caching is enabled, the &lt;code&gt;HazelcastInstance&lt;/code&gt; is automatically wrapped in a &lt;code&gt;CacheManager&lt;/code&gt; implementation.</source>
          <target state="translated">Spring Boot还具有&lt;a href=&quot;#boot-features-caching-provider-hazelcast&quot;&gt;对Hazelcast的显式缓存支持&lt;/a&gt;。如果启用了缓存，则 &lt;code&gt;HazelcastInstance&lt;/code&gt; 将自动包装在 &lt;code&gt;CacheManager&lt;/code&gt; 实现中。</target>
        </trans-unit>
        <trans-unit id="711c9e49cf000acd7e0a534c96e32e2baf27fb39" translate="yes" xml:space="preserve">
          <source>Spring Boot also has some features to make it easier to customize this behavior.</source>
          <target state="translated">Spring Boot也有一些功能可以让我们更容易地定制这种行为。</target>
        </trans-unit>
        <trans-unit id="bed3daf091556f14f351dd11bd75a87282350103" translate="yes" xml:space="preserve">
          <source>Spring Boot also manages the version of Coroutines dependencies by importing the Kotlin Coroutines BOM. The version can be customized via the &lt;code&gt;kotlin-coroutines.version&lt;/code&gt; property.</source>
          <target state="translated">Spring Boot还通过导入Kotlin Coroutines BOM管理Coroutines依赖项的版本。可以通过 &lt;code&gt;kotlin-coroutines.version&lt;/code&gt; 属性自定义版本。</target>
        </trans-unit>
        <trans-unit id="c3ff8c17a26591aa2e2599ccbe5d16b099d08d3d" translate="yes" xml:space="preserve">
          <source>Spring Boot also provides &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectSerializer.java&quot;&gt;&lt;code&gt;JsonObjectSerializer&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectDeserializer.java&quot;&gt;&lt;code&gt;JsonObjectDeserializer&lt;/code&gt;&lt;/a&gt; base classes that provide useful alternatives to the standard Jackson versions when serializing objects. See &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/jackson/JsonObjectSerializer.html&quot;&gt;&lt;code&gt;JsonObjectSerializer&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/jackson/JsonObjectDeserializer.html&quot;&gt;&lt;code&gt;JsonObjectDeserializer&lt;/code&gt;&lt;/a&gt; in the Javadoc for details.</source>
          <target state="translated">Spring Boot还提供了&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectSerializer.java&quot;&gt; &lt;code&gt;JsonObjectSerializer&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectDeserializer.java&quot;&gt; &lt;code&gt;JsonObjectDeserializer&lt;/code&gt; &lt;/a&gt;基类，这些基类在序列化对象时为标准Jackson版本提供了有用的替代方法。有关详细信息，请参见Javadoc中的&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/jackson/JsonObjectSerializer.html&quot;&gt; &lt;code&gt;JsonObjectSerializer&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/jackson/JsonObjectDeserializer.html&quot;&gt; &lt;code&gt;JsonObjectDeserializer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="31ec779db711dd7b992d0b03edde79affb145655" translate="yes" xml:space="preserve">
          <source>Spring Boot also provides a utility builder class, called &lt;code&gt;DataSourceBuilder&lt;/code&gt;, that can be used to create one of the standard data sources (if it is on the classpath). The builder can detect the one to use based on what&amp;rsquo;s available on the classpath. It also auto-detects the driver based on the JDBC URL.</source>
          <target state="translated">Spring Boot还提供了一个名为 &lt;code&gt;DataSourceBuilder&lt;/code&gt; 的实用工具生成器类，该类可用于创建标准数据源之一（如果它位于类路径上）。构建器可以根据类路径中可用的内容来检测要使用的一个。它还基于JDBC URL自动检测驱动程序。</target>
        </trans-unit>
        <trans-unit id="a796392e2438c4c5257044177ae2e8debf4484e6" translate="yes" xml:space="preserve">
          <source>Spring Boot also provides some nice ANSI color terminal output on a console (but not in a log file) by using a custom Logback converter. See the &lt;code&gt;CONSOLE_LOG_PATTERN&lt;/code&gt; in the &lt;code&gt;defaults.xml&lt;/code&gt; configuration for an example.</source>
          <target state="translated">通过使用自定义的Logback转换器，Spring Boot还可以在控制台上提供一些不错的ANSI颜色终端输出（但不在日志文件中）。看到 &lt;code&gt;CONSOLE_LOG_PATTERN&lt;/code&gt; 在 &lt;code&gt;defaults.xml&lt;/code&gt; 中配置的一个例子。</target>
        </trans-unit>
        <trans-unit id="7e57564ddd848844791cde0593ddc0c5ce0454e6" translate="yes" xml:space="preserve">
          <source>Spring Boot also registers a &lt;code&gt;CommandLinePropertySource&lt;/code&gt; with the Spring &lt;code&gt;Environment&lt;/code&gt;. This lets you also inject single application arguments by using the &lt;code&gt;@Value&lt;/code&gt; annotation.</source>
          <target state="translated">Spring Boot还在Spring &lt;code&gt;Environment&lt;/code&gt; 中注册了 &lt;code&gt;CommandLinePropertySource&lt;/code&gt; 。这样，您还可以使用 &lt;code&gt;@Value&lt;/code&gt; 批注注入单个应用程序参数。</target>
        </trans-unit>
        <trans-unit id="1a55fd4e252cd4c5917bbe18991863f5717af002" translate="yes" xml:space="preserve">
          <source>Spring Boot also supports the advanced resource handling features provided by Spring MVC, allowing use cases such as cache-busting static resources or using version agnostic URLs for Webjars.</source>
          <target state="translated">Spring Boot还支持Spring MVC提供的高级资源处理功能,允许诸如缓存破坏静态资源或为Webjars使用版本不可知URL等用例。</target>
        </trans-unit>
        <trans-unit id="d6135506bf1a90d00f936bf9ce1389bb7b1c9a9c" translate="yes" xml:space="preserve">
          <source>Spring Boot application can be easily started as Unix/Linux services by using either &lt;code&gt;init.d&lt;/code&gt; or &lt;code&gt;systemd&lt;/code&gt;.</source>
          <target state="translated">通过使用 &lt;code&gt;init.d&lt;/code&gt; 或 &lt;code&gt;systemd&lt;/code&gt; ,可以轻松地将Spring Boot应用程序作为Unix / Linux服务启动。</target>
        </trans-unit>
        <trans-unit id="b5d361ba9aba72c0f0f9e18726cb9a86413f9bd6" translate="yes" xml:space="preserve">
          <source>Spring Boot applications can be containerized either by &lt;a href=&quot;#boot-features-container-images-docker&quot;&gt;packaging them into Docker images&lt;/a&gt;, or by &lt;a href=&quot;#boot-features-container-images-buildpacks&quot;&gt;using Buildpacks to create Docker compatible container images that you can run anywhere&lt;/a&gt;.</source>
          <target state="translated">可以通过将Spring Boot应用程序&lt;a href=&quot;#boot-features-container-images-docker&quot;&gt;打包到Docker映像中&lt;/a&gt;，或&lt;a href=&quot;#boot-features-container-images-buildpacks&quot;&gt;使用Buildpacks创建可以在任何地方运行的Docker兼容的容器映像，来对它们进行容器化&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="30b77dd58c5cffc3ddb10cfa49dc4ff707b60c50" translate="yes" xml:space="preserve">
          <source>Spring Boot attempts to coerce the external application properties to the right type when it binds to the &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans. If you need custom type conversion, you can provide a &lt;code&gt;ConversionService&lt;/code&gt; bean (with a bean named &lt;code&gt;conversionService&lt;/code&gt;) or custom property editors (through a &lt;code&gt;CustomEditorConfigurer&lt;/code&gt; bean) or custom &lt;code&gt;Converters&lt;/code&gt; (with bean definitions annotated as &lt;code&gt;@ConfigurationPropertiesBinding&lt;/code&gt;).</source>
          <target state="translated">当Spring Boot绑定到 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; bean时，它尝试将外部应用程序属性强制为正确的类型。如果需要自定义类型转换，则可以提供一个 &lt;code&gt;ConversionService&lt;/code&gt; bean（具有一个名为 &lt;code&gt;conversionService&lt;/code&gt; 的bean ）或自定义属性编辑器（通过 &lt;code&gt;CustomEditorConfigurer&lt;/code&gt; bean）或自定义 &lt;code&gt;Converters&lt;/code&gt; （具有定义为 &lt;code&gt;@ConfigurationPropertiesBinding&lt;/code&gt; 的bean定义）。</target>
        </trans-unit>
        <trans-unit id="739563a79386135ccddf88972881348dbf433778" translate="yes" xml:space="preserve">
          <source>Spring Boot attempts to validate &lt;code&gt;@ConfigurationProperties&lt;/code&gt; classes whenever they are annotated with Spring&amp;rsquo;s &lt;code&gt;@Validated&lt;/code&gt; annotation. You can use JSR-303 &lt;code&gt;javax.validation&lt;/code&gt; constraint annotations directly on your configuration class. To do so, ensure that a compliant JSR-303 implementation is on your classpath and then add constraint annotations to your fields, as shown in the following example:</source>
          <target state="translated">每当使用Spring的 &lt;code&gt;@Validated&lt;/code&gt; 注释对 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 类进行注释时，Spring Boot就会尝试对其进行验证。您可以在配置类上直接使用JSR-303 &lt;code&gt;javax.validation&lt;/code&gt; 约束注释。为此，请确保您的类路径上有兼容的JSR-303实现，然后将约束注释添加到您的字段中，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="66c822ea66e557496747909020f637a51d307f74" translate="yes" xml:space="preserve">
          <source>Spring Boot auto-configuration attempts to automatically configure your Spring application based on the jar dependencies that you have added. For example, if &lt;code&gt;HSQLDB&lt;/code&gt; is on your classpath, and you have not manually configured any database connection beans, then Spring Boot auto-configures an in-memory database.</source>
          <target state="translated">Spring Boot自动配置会尝试根据您添加的jar依赖项自动配置您的Spring应用程序。例如，如果 &lt;code&gt;HSQLDB&lt;/code&gt; 位于类路径上，并且尚未手动配置任何数据库连接bean，则Spring Boot会自动配置内存数据库。</target>
        </trans-unit>
        <trans-unit id="708011ed3c9eed655d9bd995534813188379c31a" translate="yes" xml:space="preserve">
          <source>Spring Boot auto-configures a composite &lt;code&gt;MeterRegistry&lt;/code&gt; and adds a registry to the composite for each of the supported implementations that it finds on the classpath. Having a dependency on &lt;code&gt;micrometer-registry-{system}&lt;/code&gt; in your runtime classpath is enough for Spring Boot to configure the registry.</source>
          <target state="translated">Spring Boot自动配置一个组合的 &lt;code&gt;MeterRegistry&lt;/code&gt; ,并为其在类路径上找到的每个受支持的实现向组合添加一个注册表。在运行时类路径中具有对 &lt;code&gt;micrometer-registry-{system}&lt;/code&gt; 的依赖足以使Spring Boot配置注册表。</target>
        </trans-unit>
        <trans-unit id="5493ebe4488a30028498fac0327336a49720f0dd" translate="yes" xml:space="preserve">
          <source>Spring Boot auto-configures an &lt;code&gt;InfluxDB&lt;/code&gt; instance, provided the &lt;code&gt;influxdb-java&lt;/code&gt; client is on the classpath and the URL of the database is set, as shown in the following example:</source>
          <target state="translated">只要 &lt;code&gt;influxdb-java&lt;/code&gt; 客户端位于类路径上并设置了数据库的URL，Spring Boot就会自动配置 &lt;code&gt;InfluxDB&lt;/code&gt; 实例，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="655d8bb7952ae2e9dc630aba9809f1c47b8c092d" translate="yes" xml:space="preserve">
          <source>Spring Boot auto-configures an &lt;code&gt;RSocketStrategies&lt;/code&gt; bean that provides all the required infrastructure for encoding and decoding RSocket payloads. By default, the auto-configuration will try to configure the following (in order):</source>
          <target state="translated">Spring Boot自动配置一个 &lt;code&gt;RSocketStrategies&lt;/code&gt; bean，该bean提供用于编码和解码RSocket有效负载的所有必需的基础结构。默认情况下，自动配置将尝试（按顺序）配置以下内容：</target>
        </trans-unit>
        <trans-unit id="2ad576fd8d64d0e1f075c4e0b4bf75a1acb23b6e" translate="yes" xml:space="preserve">
          <source>Spring Boot auto-detects Kubernetes deployment environments by checking the environment for &lt;code&gt;&quot;*_SERVICE_HOST&quot;&lt;/code&gt; and &lt;code&gt;&quot;*_SERVICE_PORT&quot;&lt;/code&gt; variables. You can override this detection with the &lt;code&gt;spring.main.cloud-platform&lt;/code&gt; configuration property.</source>
          <target state="translated">Spring Boot通过检查环境中的 &lt;code&gt;&quot;*_SERVICE_HOST&quot;&lt;/code&gt; 和 &lt;code&gt;&quot;*_SERVICE_PORT&quot;&lt;/code&gt; 变量来自动检测Kubernetes部署环境。您可以使用 &lt;code&gt;spring.main.cloud-platform&lt;/code&gt; 配置属性覆盖此检测。</target>
        </trans-unit>
        <trans-unit id="33c931a880157821d382559ed0ab92ea5f623862" translate="yes" xml:space="preserve">
          <source>Spring Boot binds external properties from &lt;code&gt;application.properties&lt;/code&gt; (or &lt;code&gt;.yml&lt;/code&gt; files and other places) into an application at runtime. There is not (and technically cannot be) an exhaustive list of all supported properties in a single location, because contributions can come from additional jar files on your classpath.</source>
          <target state="translated">Spring Boot在运行时将 &lt;code&gt;application.properties&lt;/code&gt; （或 &lt;code&gt;.yml&lt;/code&gt; 文件和其他位置）的外部属性绑定到应用程序中。在一个位置上没有（而且从技术上来说不是）所有受支持属性的详尽列表，因为贡献可能来自类路径上的其他jar文件。</target>
        </trans-unit>
        <trans-unit id="273b4c38fe189de9e688c95938ead413ab972e33" translate="yes" xml:space="preserve">
          <source>Spring Boot calls &lt;code&gt;Flyway.migrate()&lt;/code&gt; to perform the database migration. If you would like more control, provide a &lt;code&gt;@Bean&lt;/code&gt; that implements &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayMigrationStrategy.java&quot;&gt;&lt;code&gt;FlywayMigrationStrategy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Spring Boot调用 &lt;code&gt;Flyway.migrate()&lt;/code&gt; 来执行数据库迁移。如果您想了解更多的控制，提供了一个 &lt;code&gt;@Bean&lt;/code&gt; 实现&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayMigrationStrategy.java&quot;&gt; &lt;code&gt;FlywayMigrationStrategy&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b1196beda59514420cdf08062dda448af306e3b6" translate="yes" xml:space="preserve">
          <source>Spring Boot can also auto-configure an &lt;code&gt;ClientRSocketConnector&lt;/code&gt; using configuration properties:</source>
          <target state="translated">Spring Boot还可以使用配置属性自动配置 &lt;code&gt;ClientRSocketConnector&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9c80f6ee277e0e55c3ae1cd49a6613859687bcb6" translate="yes" xml:space="preserve">
          <source>Spring Boot can auto-configure a &lt;code&gt;ConnectionFactory&lt;/code&gt; when it detects that &lt;a href=&quot;https://activemq.apache.org/components/artemis/&quot;&gt;Artemis&lt;/a&gt; is available on the classpath. If the broker is present, an embedded broker is automatically started and configured (unless the mode property has been explicitly set). The supported modes are &lt;code&gt;embedded&lt;/code&gt; (to make explicit that an embedded broker is required and that an error should occur if the broker is not available on the classpath) and &lt;code&gt;native&lt;/code&gt; (to connect to a broker using the &lt;code&gt;netty&lt;/code&gt; transport protocol). When the latter is configured, Spring Boot configures a &lt;code&gt;ConnectionFactory&lt;/code&gt; that connects to a broker running on the local machine with the default settings.</source>
          <target state="translated">当Spring Boot检测到&lt;a href=&quot;https://activemq.apache.org/components/artemis/&quot;&gt;Artemis&lt;/a&gt;在类路径上可用时，它可以自动配置 &lt;code&gt;ConnectionFactory&lt;/code&gt; 。如果存在代理，则将自动启动和配置嵌入式代理（除非已明确设置mode属性）。受支持的模式是 &lt;code&gt;embedded&lt;/code&gt; （以明确表明需要嵌入式代理，并且如果类路径上没有代理，则应该发生错误）和嵌入的模式（ &lt;code&gt;native&lt;/code&gt; （使用 &lt;code&gt;netty&lt;/code&gt; 传输协议连接到代理）。配置后者后，Spring Boot将配置一个 &lt;code&gt;ConnectionFactory&lt;/code&gt; ，该工厂以默认设置连接到在本地计算机上运行的代理。</target>
        </trans-unit>
        <trans-unit id="f67bf256b2909058ac36a29c2d202237d613dca2" translate="yes" xml:space="preserve">
          <source>Spring Boot can auto-configure embedded &lt;a href=&quot;https://www.h2database.com&quot;&gt;H2&lt;/a&gt;, &lt;a href=&quot;http://hsqldb.org/&quot;&gt;HSQL&lt;/a&gt;, and &lt;a href=&quot;https://db.apache.org/derby/&quot;&gt;Derby&lt;/a&gt; databases. You need not provide any connection URLs. You need only include a build dependency to the embedded database that you want to use.</source>
          <target state="translated">Spring Boot可以自动配置嵌入式&lt;a href=&quot;https://www.h2database.com&quot;&gt;H2&lt;/a&gt;，&lt;a href=&quot;http://hsqldb.org/&quot;&gt;HSQL&lt;/a&gt;和&lt;a href=&quot;https://db.apache.org/derby/&quot;&gt;Derby&lt;/a&gt;数据库。您无需提供任何连接URL。您只需要包含要使用的嵌入式数据库的构建依赖项即可。</target>
        </trans-unit>
        <trans-unit id="51bead0e8b98e1654fe4d674c0fa8950f6b15d7f" translate="yes" xml:space="preserve">
          <source>Spring Boot can automatically create the schema (DDL scripts) of your &lt;code&gt;DataSource&lt;/code&gt; and initialize it (DML scripts). It loads SQL from the standard root classpath locations: &lt;code&gt;schema.sql&lt;/code&gt; and &lt;code&gt;data.sql&lt;/code&gt;, respectively. In addition, Spring Boot processes the &lt;code&gt;schema-${platform}.sql&lt;/code&gt; and &lt;code&gt;data-${platform}.sql&lt;/code&gt; files (if present), where &lt;code&gt;platform&lt;/code&gt; is the value of &lt;code&gt;spring.datasource.platform&lt;/code&gt;. This allows you to switch to database-specific scripts if necessary. For example, you might choose to set it to the vendor name of the database (&lt;code&gt;hsqldb&lt;/code&gt;, &lt;code&gt;h2&lt;/code&gt;, &lt;code&gt;oracle&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt;, &lt;code&gt;postgresql&lt;/code&gt;, and so on).</source>
          <target state="translated">Spring Boot可以自动创建 &lt;code&gt;DataSource&lt;/code&gt; 的架构（DDL脚本）并对其进行初始化（DML脚本）。：它加载从标准的根类路径的位置SQL &lt;code&gt;schema.sql&lt;/code&gt; 文件和 &lt;code&gt;data.sql&lt;/code&gt; 分别。另外，Spring Boot处理 &lt;code&gt;spring.datasource.platform&lt;/code&gt; &lt;code&gt;schema-${platform}.sql&lt;/code&gt; 和data- &lt;code&gt;data-${platform}.sql&lt;/code&gt; 文件（如果存在），其中 &lt;code&gt;platform&lt;/code&gt; 是spring.datasource.platform的值。这使您可以在必要时切换到特定于数据库的脚本。例如，您可以选择将其设置为数据库的供应商名称（ &lt;code&gt;hsqldb&lt;/code&gt; ， &lt;code&gt;h2&lt;/code&gt; ， &lt;code&gt;oracle&lt;/code&gt; ， &lt;code&gt;mysql&lt;/code&gt; ， &lt;code&gt;postgresql&lt;/code&gt; 等）。</target>
        </trans-unit>
        <trans-unit id="817e6acf0752a19ad9918e1760bf9e1eb8096c3f" translate="yes" xml:space="preserve">
          <source>Spring Boot can be used with &amp;ldquo;classic&amp;rdquo; Java development tools or installed as a command line tool. Either way, you need &lt;a href=&quot;https://www.java.com&quot;&gt;Java SDK v1.8&lt;/a&gt; or higher. Before you begin, you should check your current Java installation by using the following command:</source>
          <target state="translated">Spring Boot可以与&amp;ldquo;经典&amp;rdquo; Java开发工具一起使用，也可以作为命令行工具安装。无论哪种方式，您都需要&lt;a href=&quot;https://www.java.com&quot;&gt;Java SDK v1.8&lt;/a&gt;或更高版本。在开始之前，您应该使用以下命令检查当前的Java安装：</target>
        </trans-unit>
        <trans-unit id="020df61b3eb6188a1a8a56cad1e8456dd217b31c" translate="yes" xml:space="preserve">
          <source>Spring Boot can deduce the JDBC driver class for most databases from the URL. If you need to specify a specific class, you can use the &lt;code&gt;spring.datasource.driver-class-name&lt;/code&gt; property.</source>
          <target state="translated">Spring Boot可以从URL推断出大多数数据库的JDBC驱动程序类。如果需要指定特定的类，则可以使用 &lt;code&gt;spring.datasource.driver-class-name&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="a7c7e4c98f472644c3df9405baff0fe2f0cc07f4" translate="yes" xml:space="preserve">
          <source>Spring Boot can only auto-configure dialects supported by the open source version of jOOQ.</source>
          <target state="translated">Spring Boot只能自动配置jOOQ开源版支持的方言。</target>
        </trans-unit>
        <trans-unit id="c3e2718ae1495619058d3283e266280e0474b19e" translate="yes" xml:space="preserve">
          <source>Spring Boot checks for the presence of a &lt;code&gt;META-INF/spring.factories&lt;/code&gt; file within your published jar. The file should list your configuration classes under the &lt;code&gt;EnableAutoConfiguration&lt;/code&gt; key, as shown in the following example:</source>
          <target state="translated">Spring Boot检查发布的jar中是否存在 &lt;code&gt;META-INF/spring.factories&lt;/code&gt; 文件。该文件应在 &lt;code&gt;EnableAutoConfiguration&lt;/code&gt; 键下列出您的配置类，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="4f462fcca5aeb571e761b733ac3df0670684c8d3" translate="yes" xml:space="preserve">
          <source>Spring Boot chooses to disable suffix pattern matching by default, which means that requests like &lt;code&gt;&quot;GET /projects/spring-boot.json&quot;&lt;/code&gt; won&amp;rsquo;t be matched to &lt;code&gt;@GetMapping(&quot;/projects/spring-boot&quot;)&lt;/code&gt; mappings. This is considered as a &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-ann-requestmapping-suffix-pattern-match&quot;&gt;best practice for Spring MVC applications&lt;/a&gt;. This feature was mainly useful in the past for HTTP clients which did not send proper &quot;Accept&quot; request headers; we needed to make sure to send the correct Content Type to the client. Nowadays, Content Negotiation is much more reliable.</source>
          <target state="translated">Spring Boot默认选择禁用后缀模式匹配，这意味着像 &lt;code&gt;&quot;GET /projects/spring-boot.json&quot;&lt;/code&gt; 这样的请求将不会与 &lt;code&gt;@GetMapping(&quot;/projects/spring-boot&quot;)&lt;/code&gt; 映射匹配。这被认为是&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-ann-requestmapping-suffix-pattern-match&quot;&gt;Spring MVC应用程序&lt;/a&gt;的最佳实践。过去，此功能主要用于未发送正确的&amp;ldquo; Accept&amp;rdquo;请求标头的HTTP客户端。我们需要确保将正确的内容类型发送给客户端。如今，内容协商已变得更加可靠。</target>
        </trans-unit>
        <trans-unit id="8f63e074cdc03eeb1fe3bc975fa5fbab43e3bb63" translate="yes" xml:space="preserve">
          <source>Spring Boot converts any command line argument starting with &lt;code&gt;--&lt;/code&gt; to a property to add to the &lt;code&gt;Environment&lt;/code&gt;, see &lt;a href=&quot;spring-boot-features#boot-features-external-config-command-line-args&quot;&gt;accessing command line properties&lt;/a&gt;. This should not be used to pass arguments to batch jobs. To specify batch arguments on the command line, use the regular format (i.e. without &lt;code&gt;--&lt;/code&gt;), as shown in the following example:</source>
          <target state="translated">Spring Boot将以 &lt;code&gt;--&lt;/code&gt; 开头的任何命令行参数转换为要添加到 &lt;code&gt;Environment&lt;/code&gt; 的属性，请参见&lt;a href=&quot;spring-boot-features#boot-features-external-config-command-line-args&quot;&gt;访问命令行属性&lt;/a&gt;。不应将其用于将参数传递给批处理作业。要在命令行上指定批处理参数，请使用常规格式（即不带 &lt;code&gt;--&lt;/code&gt; ），如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="0c3a049d2630a544806d4a601070e8392daed5f1" translate="yes" xml:space="preserve">
          <source>Spring Boot creates and pre-configures a &lt;code&gt;WebClient.Builder&lt;/code&gt; for you; it is strongly advised to inject it in your components and use it to create &lt;code&gt;WebClient&lt;/code&gt; instances. Spring Boot is configuring that builder to share HTTP resources, reflect codecs setup in the same fashion as the server ones (see &lt;a href=&quot;#boot-features-webflux-httpcodecs&quot;&gt;WebFlux HTTP codecs auto-configuration&lt;/a&gt;), and more.</source>
          <target state="translated">Spring Boot为您创建并预配置了 &lt;code&gt;WebClient.Builder&lt;/code&gt; 。强烈建议将其注入您的组件中，并使用它来创建 &lt;code&gt;WebClient&lt;/code&gt; 实例。Spring Boot正在配置该构建器以共享HTTP资源，以与服务器相同的方式反映编解码器的设置（请参阅&lt;a href=&quot;#boot-features-webflux-httpcodecs&quot;&gt;WebFlux HTTP编解码器自动配置&lt;/a&gt;），以及更多内容。</target>
        </trans-unit>
        <trans-unit id="f9762c441bd8d35bbc79e4756459d576930e9b0f" translate="yes" xml:space="preserve">
          <source>Spring Boot dependencies can be declared by using the &lt;code&gt;org.springframework.boot&lt;/code&gt;&lt;code&gt;group&lt;/code&gt;. Typically, your project declares dependencies to one or more &lt;a href=&quot;using-spring-boot#using-boot-starter&quot;&gt;&amp;ldquo;Starters&amp;rdquo;&lt;/a&gt;. Spring Boot provides a useful &lt;a href=&quot;build-tool-plugins#build-tool-plugins-gradle-plugin&quot;&gt;Gradle plugin&lt;/a&gt; that can be used to simplify dependency declarations and to create executable jars.</source>
          <target state="translated">可以使用 &lt;code&gt;org.springframework.boot&lt;/code&gt; &lt;code&gt;group&lt;/code&gt; 声明Spring Boot依赖项。通常，您的项目会声明对一个或多个&lt;a href=&quot;using-spring-boot#using-boot-starter&quot;&gt;&amp;ldquo;启动器&amp;rdquo;的&lt;/a&gt;依赖关系。Spring Boot提供了一个有用的&lt;a href=&quot;build-tool-plugins#build-tool-plugins-gradle-plugin&quot;&gt;Gradle插件&lt;/a&gt;，可用于简化依赖项声明和创建可执行jar。</target>
        </trans-unit>
        <trans-unit id="6b4b642bdd45e4cbe17b79b0a9dddaad7c9068ee" translate="yes" xml:space="preserve">
          <source>Spring Boot dependencies use the &lt;code&gt;org.springframework.boot&lt;/code&gt;&lt;code&gt;groupId&lt;/code&gt;. Typically, your Maven POM file inherits from the &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; project and declares dependencies to one or more &lt;a href=&quot;using-spring-boot#using-boot-starter&quot;&gt;&amp;ldquo;Starters&amp;rdquo;&lt;/a&gt;. Spring Boot also provides an optional &lt;a href=&quot;build-tool-plugins#build-tool-plugins-maven-plugin&quot;&gt;Maven plugin&lt;/a&gt; to create executable jars.</source>
          <target state="translated">Spring Boot依赖项使用 &lt;code&gt;org.springframework.boot&lt;/code&gt; &lt;code&gt;groupId&lt;/code&gt; 。通常，您的Maven POM文件是从 &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; 项目继承的，并声明对一个或多个&lt;a href=&quot;using-spring-boot#using-boot-starter&quot;&gt;&amp;ldquo; Starters&amp;rdquo;的&lt;/a&gt;依赖关系。Spring Boot还提供了一个可选的&lt;a href=&quot;build-tool-plugins#build-tool-plugins-maven-plugin&quot;&gt;Maven插件&lt;/a&gt;来创建可执行jar。</target>
        </trans-unit>
        <trans-unit id="009f420d0313c2641112d7ba4e101006092800a2" translate="yes" xml:space="preserve">
          <source>Spring Boot does not advise using &lt;code&gt;h2c&lt;/code&gt;, the cleartext version of the HTTP/2 protocol. As a result, the following sections require you to &lt;a href=&quot;#howto-configure-ssl&quot;&gt;configure SSL first&lt;/a&gt;. If you still choose to use &lt;code&gt;h2c&lt;/code&gt;, you can check &lt;a href=&quot;#howto-configure-http2-h2c&quot;&gt;the dedicated section&lt;/a&gt;.</source>
          <target state="translated">Spring Boot不建议使用 &lt;code&gt;h2c&lt;/code&gt; ，即HTTP / 2协议的明文版本。因此，以下各节要求您首先&lt;a href=&quot;#howto-configure-ssl&quot;&gt;配置SSL&lt;/a&gt;。如果仍然选择使用 &lt;code&gt;h2c&lt;/code&gt; ，则可以查看&lt;a href=&quot;#howto-configure-http2-h2c&quot;&gt;专用部分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="db8cfa59c4a385ba6a072d7dd6a282a4e299b0b0" translate="yes" xml:space="preserve">
          <source>Spring Boot does not look for such a file and rather provides a number of configuration properties via the &lt;code&gt;spring.data.cassandra.*&lt;/code&gt; namespace. For more advanced driver customizations, you can register an arbitrary number of beans that implement &lt;code&gt;DriverConfigLoaderBuilderCustomizer&lt;/code&gt;. The &lt;code&gt;CqlSession&lt;/code&gt; can be customized with a bean of type &lt;code&gt;CqlSessionBuilderCustomizer&lt;/code&gt;.</source>
          <target state="translated">Spring Boot不会查找此类文件，而是通过 &lt;code&gt;spring.data.cassandra.*&lt;/code&gt; 名称空间提供了许多配置属性。对于更高级的驱动程序定制，您可以注册任意数量的实现 &lt;code&gt;DriverConfigLoaderBuilderCustomizer&lt;/code&gt; 的Bean 。该 &lt;code&gt;CqlSession&lt;/code&gt; 可以用类型的豆定制 &lt;code&gt;CqlSessionBuilderCustomizer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d7c3c718cd9caae280c8877290384ba8a002055" translate="yes" xml:space="preserve">
          <source>Spring Boot does not provide any built in support for encrypting property values, however, it does provide the hook points necessary to modify values contained in the Spring &lt;code&gt;Environment&lt;/code&gt;. The &lt;code&gt;EnvironmentPostProcessor&lt;/code&gt; interface allows you to manipulate the &lt;code&gt;Environment&lt;/code&gt; before the application starts. See &lt;a href=&quot;howto#howto-customize-the-environment-or-application-context&quot;&gt;howto.html&lt;/a&gt; for details.</source>
          <target state="translated">Spring Boot不提供对加密属性值的任何内置支持，但是，它确实提供了修改Spring &lt;code&gt;Environment&lt;/code&gt; 中包含的值所必需的挂钩点。该 &lt;code&gt;EnvironmentPostProcessor&lt;/code&gt; 界面允许您操作 &lt;code&gt;Environment&lt;/code&gt; 的应用程序启动之前。有关详细信息，请参见&lt;a href=&quot;howto#howto-customize-the-environment-or-application-context&quot;&gt;howto.html&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="31547145c260dde592519cb67fc760306e1dab33" translate="yes" xml:space="preserve">
          <source>Spring Boot does not require any specific code layout to work. However, there are some best practices that help.</source>
          <target state="translated">Spring Boot不需要任何特定的代码布局来工作。但是,有一些最佳实践可以帮助我们。</target>
        </trans-unit>
        <trans-unit id="222c3a5f4e5f1970831e27040c78209a9126dc30" translate="yes" xml:space="preserve">
          <source>Spring Boot embraces the Servlet 3 &lt;code&gt;javax.servlet.http.Part&lt;/code&gt; API to support uploading files. By default, Spring Boot configures Spring MVC with a maximum size of 1MB per file and a maximum of 10MB of file data in a single request. You may override these values, the location to which intermediate data is stored (for example, to the &lt;code&gt;/tmp&lt;/code&gt; directory), and the threshold past which data is flushed to disk by using the properties exposed in the &lt;code&gt;MultipartProperties&lt;/code&gt; class. For example, if you want to specify that files be unlimited, set the &lt;code&gt;spring.servlet.multipart.max-file-size&lt;/code&gt; property to &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">Spring Boot包含Servlet 3 &lt;code&gt;javax.servlet.http.Part&lt;/code&gt; API以支持上传文件。默认情况下，Spring Boot用单个请求将Spring MVC配置为每个文件最大大小为1MB，最大文件数据为10MB。您可以使用 &lt;code&gt;MultipartProperties&lt;/code&gt; 类中公开的属性覆盖这些值，存储中间数据的位置（例如，存储到 &lt;code&gt;/tmp&lt;/code&gt; 目录）以及将数据刷新到磁盘的阈值。例如，如果要指定文件不受限制，请将 &lt;code&gt;spring.servlet.multipart.max-file-size&lt;/code&gt; 属性设置为 &lt;code&gt;-1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1e85d2c294f32cf7ede2fbb37d2b6fa50a6c5544" translate="yes" xml:space="preserve">
          <source>Spring Boot exposes a set of useful properties (from the &lt;code&gt;spring.data.rest&lt;/code&gt; namespace) that customize the &lt;a href=&quot;https://docs.spring.io/spring-data/rest/docs/3.4.1/api/org/springframework/data/rest/core/config/RepositoryRestConfiguration.html&quot;&gt;&lt;code&gt;RepositoryRestConfiguration&lt;/code&gt;&lt;/a&gt;. If you need to provide additional customization, you should use a &lt;a href=&quot;https://docs.spring.io/spring-data/rest/docs/3.4.1/api/org/springframework/data/rest/webmvc/config/RepositoryRestConfigurer.html&quot;&gt;&lt;code&gt;RepositoryRestConfigurer&lt;/code&gt;&lt;/a&gt; bean.</source>
          <target state="translated">Spring Boot公开了一组有用的属性（来自 &lt;code&gt;spring.data.rest&lt;/code&gt; 命名空间），这些属性来自定义&lt;a href=&quot;https://docs.spring.io/spring-data/rest/docs/3.4.1/api/org/springframework/data/rest/core/config/RepositoryRestConfiguration.html&quot;&gt; &lt;code&gt;RepositoryRestConfiguration&lt;/code&gt; &lt;/a&gt;。如果需要提供其他定制，则应使用&lt;a href=&quot;https://docs.spring.io/spring-data/rest/docs/3.4.1/api/org/springframework/data/rest/webmvc/config/RepositoryRestConfigurer.html&quot;&gt; &lt;code&gt;RepositoryRestConfigurer&lt;/code&gt; &lt;/a&gt; bean。</target>
        </trans-unit>
        <trans-unit id="1a6a9a6fea7d355530098b1a568c87ba7a7dc9f1" translate="yes" xml:space="preserve">
          <source>Spring Boot extends Groovy&amp;rsquo;s standard &lt;code&gt;@Grab&lt;/code&gt; support by letting you specify a dependency without a group or version (for example, &lt;code&gt;@Grab('freemarker')&lt;/code&gt;). Doing so consults Spring Boot&amp;rsquo;s default dependency metadata to deduce the artifact&amp;rsquo;s group and version.</source>
          <target state="translated">Spring Boot通过允许您指定没有组或版本的依赖项（例如 &lt;code&gt;@Grab('freemarker')&lt;/code&gt; ）来扩展Groovy的标准 &lt;code&gt;@Grab&lt;/code&gt; 支持。这样做参考Spring Boot的默认依赖元数据来推断工件的组和版本。</target>
        </trans-unit>
        <trans-unit id="0fce53b74c061a163802303415d8d3c33dc6d48d" translate="yes" xml:space="preserve">
          <source>Spring Boot extends this technique further and tries to deduce which libraries to &amp;ldquo;grab&amp;rdquo; based on your code. For example, since the &lt;code&gt;WebApplication&lt;/code&gt; code shown previously uses &lt;code&gt;@RestController&lt;/code&gt; annotations, Spring Boot grabs &quot;Tomcat&quot; and &quot;Spring MVC&quot;.</source>
          <target state="translated">Spring Boot进一步扩展了该技术，并尝试根据您的代码推断出要&amp;ldquo;抓取&amp;rdquo;哪些库。例如，由于先前显示的 &lt;code&gt;WebApplication&lt;/code&gt; 代码使用 &lt;code&gt;@RestController&lt;/code&gt; 批注，因此Spring Boot会获取&amp;ldquo; Tomcat&amp;rdquo;和&amp;ldquo; Spring MVC&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="7297bd67b8538c5875543ace293fcbde69cd1588" translate="yes" xml:space="preserve">
          <source>Spring Boot favors Java-based configuration. Although it is possible to use &lt;code&gt;SpringApplication&lt;/code&gt; with XML sources, we generally recommend that your primary source be a single &lt;code&gt;@Configuration&lt;/code&gt; class. Usually the class that defines the &lt;code&gt;main&lt;/code&gt; method is a good candidate as the primary &lt;code&gt;@Configuration&lt;/code&gt;.</source>
          <target state="translated">Spring Boot支持基于Java的配置。尽管可以将 &lt;code&gt;SpringApplication&lt;/code&gt; 与XML源一起使用，但是我们通常建议您的主要源为单个 &lt;code&gt;@Configuration&lt;/code&gt; 类。通常，定义 &lt;code&gt;main&lt;/code&gt; 方法的类是首选的 &lt;code&gt;@Configuration&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0899cdb71858be925a9e03b6f34f9ef1484a5b33" translate="yes" xml:space="preserve">
          <source>Spring Boot first attempts to create a client by checking the following configuration options:</source>
          <target state="translated">Spring Boot首先尝试通过检查以下配置选项来创建客户端。</target>
        </trans-unit>
        <trans-unit id="e71d07bca5ef31c08b75e2eda1e78f7512fca3dc" translate="yes" xml:space="preserve">
          <source>Spring Boot has &lt;a href=&quot;#boot-features-hazelcast&quot;&gt;general support for Hazelcast&lt;/a&gt;. If a &lt;code&gt;HazelcastInstance&lt;/code&gt; has been auto-configured, it is automatically wrapped in a &lt;code&gt;CacheManager&lt;/code&gt;.</source>
          <target state="translated">Spring Boot&lt;a href=&quot;#boot-features-hazelcast&quot;&gt;对Hazelcast&lt;/a&gt;具有常规支持。如果已经自动配置了 &lt;code&gt;HazelcastInstance&lt;/code&gt; ，则将其自动包装在 &lt;code&gt;CacheManager&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="04d64217ea75308c976d3670e968f9ea70654fe6" translate="yes" xml:space="preserve">
          <source>Spring Boot has &lt;a href=&quot;#boot-features-hazelcast&quot;&gt;general support for Hazelcast&lt;/a&gt;. If a single &lt;code&gt;HazelcastInstance&lt;/code&gt; is available, it is automatically reused for the &lt;code&gt;CacheManager&lt;/code&gt; as well, unless the &lt;code&gt;spring.cache.jcache.config&lt;/code&gt; property is specified.</source>
          <target state="translated">Spring Boot&lt;a href=&quot;#boot-features-hazelcast&quot;&gt;对Hazelcast&lt;/a&gt;具有常规支持。如果有单个 &lt;code&gt;HazelcastInstance&lt;/code&gt; 可用，则除非指定了 &lt;code&gt;spring.cache.jcache.config&lt;/code&gt; 属性，否则它也会自动重用于 &lt;code&gt;CacheManager&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="05943f0ed84dad0198244394e9dc6a2a064fea9f" translate="yes" xml:space="preserve">
          <source>Spring Boot has a &lt;code&gt;LoggingSystem&lt;/code&gt; abstraction that attempts to configure logging based on the content of the classpath. If Logback is available, it is the first choice.</source>
          <target state="translated">Spring Boot有一个 &lt;code&gt;LoggingSystem&lt;/code&gt; 抽象，它试图根据类路径的内容来配置日志。如果可以使用Logback，则它是首选。</target>
        </trans-unit>
        <trans-unit id="0ad20e9749912a22c4a171bc6f28682aff5a95ea" translate="yes" xml:space="preserve">
          <source>Spring Boot has a number of starters that include Spring MVC. Note that some starters include a dependency on Spring MVC rather than include it directly. This section answers common questions about Spring MVC and Spring Boot.</source>
          <target state="translated">Spring Boot有许多包含Spring MVC的启动程序。请注意,有些启动程序包含对Spring MVC的依赖,而不是直接包含它。本节回答了有关Spring MVC和Spring Boot的常见问题。</target>
        </trans-unit>
        <trans-unit id="4c4013f2431951def72b238b1577122d5d1f910e" translate="yes" xml:space="preserve">
          <source>Spring Boot has dedicated support for expressing durations. If you expose a &lt;code&gt;java.time.Duration&lt;/code&gt; property, the following formats in application properties are available:</source>
          <target state="translated">Spring Boot为表达持续时间提供了专门的支持。如果公开 &lt;code&gt;java.time.Duration&lt;/code&gt; 属性，则应用程序属性中的以下格式可用：</target>
        </trans-unit>
        <trans-unit id="88f7c566b76796d3ca6f70045e12d3353614db4b" translate="yes" xml:space="preserve">
          <source>Spring Boot has no mandatory logging dependency, except for the Commons Logging API, which is typically provided by Spring Framework&amp;rsquo;s &lt;code&gt;spring-jcl&lt;/code&gt; module. To use &lt;a href=&quot;https://logback.qos.ch&quot;&gt;Logback&lt;/a&gt;, you need to include it and &lt;code&gt;spring-jcl&lt;/code&gt; on the classpath. The recommended way to do that is through the starters, which all depend on &lt;code&gt;spring-boot-starter-logging&lt;/code&gt;. For a web application, you need only &lt;code&gt;spring-boot-starter-web&lt;/code&gt;, since it depends transitively on the logging starter. If you use Maven, the following dependency adds logging for you:</source>
          <target state="translated">除了通常由Spring Framework的 &lt;code&gt;spring-jcl&lt;/code&gt; 模块提供的Commons Logging API之外，Spring Boot没有强制性的日志记录依赖项。要使用&lt;a href=&quot;https://logback.qos.ch&quot;&gt;Logback&lt;/a&gt;，您需要在类路径中包括它和 &lt;code&gt;spring-jcl&lt;/code&gt; 。推荐的启动方式是通过启动器，这些都取决于 &lt;code&gt;spring-boot-starter-logging&lt;/code&gt; 。对于Web应用程序，只需要 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; ，因为它暂时依赖于日志记录启动器。如果使用Maven，则以下依赖项会为您添加日志记录：</target>
        </trans-unit>
        <trans-unit id="eae7753c13bc43e3c037820e8df610af47915d0c" translate="yes" xml:space="preserve">
          <source>Spring Boot health indicators return a &lt;code&gt;Status&lt;/code&gt; type to indicate the overall system health. If you want to monitor or alert on levels of health for a particular application, you can export these statuses as metrics via Micrometer. By default, the status codes &amp;ldquo;UP&amp;rdquo;, &amp;ldquo;DOWN&amp;rdquo;, &amp;ldquo;OUT_OF_SERVICE&amp;rdquo; and &amp;ldquo;UNKNOWN&amp;rdquo; are used by Spring Boot. To export these, you&amp;rsquo;ll need to convert these states to some set of numbers so that they can be used with a Micrometer &lt;code&gt;Gauge&lt;/code&gt;.</source>
          <target state="translated">Spring Boot运行状况指示器返回 &lt;code&gt;Status&lt;/code&gt; 类型以指示总体系统运行状况。如果要监视或警告特定应用程序的运行状况，则可以通过千分尺将这些状态导出为度量。默认情况下，Spring Boot使用状态代码&amp;ldquo; UP&amp;rdquo;，&amp;ldquo; DOWN&amp;rdquo;，&amp;ldquo; OUT_OF_SERVICE&amp;rdquo;和&amp;ldquo; UNKNOWN&amp;rdquo;。要导出这些，你需要这些状态转换成一些组数字，让他们可以用千分尺来使用 &lt;code&gt;Gauge&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="37ba99b67a598f9bec42429fe14b119ac1ca49fc" translate="yes" xml:space="preserve">
          <source>Spring Boot helps you to &lt;a href=&quot;spring-boot-features#boot-features-application-availability&quot;&gt;manage the state of your application&lt;/a&gt; and export it with &lt;a href=&quot;production-ready-features#production-ready-kubernetes-probes&quot;&gt;HTTP Kubernetes Probes using Actuator&lt;/a&gt;.</source>
          <target state="translated">Spring Boot可以帮助您&lt;a href=&quot;spring-boot-features#boot-features-application-availability&quot;&gt;管理应用程序的状态，&lt;/a&gt;并&lt;a href=&quot;production-ready-features#production-ready-kubernetes-probes&quot;&gt;使用Actuator&lt;/a&gt;通过HTTP Kubernetes探针将其导出。</target>
        </trans-unit>
        <trans-unit id="084975d252bc2e221276f259171c0531ba11048b" translate="yes" xml:space="preserve">
          <source>Spring Boot helps you to create stand-alone, production-grade Spring-based Applications that you can run. We take an opinionated view of the Spring platform and third-party libraries, so that you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.</source>
          <target state="translated">Spring Boot帮助您创建可以运行的独立的、基于Spring的生产级应用程序。我们对Spring平台和第三方库有自己的看法,这样您就可以以最少的麻烦上手。大多数Spring Boot应用程序只需要很少的Spring配置。</target>
        </trans-unit>
        <trans-unit id="d6773b320321d700692115f36ed832008db274a4" translate="yes" xml:space="preserve">
          <source>Spring Boot includes AssertJ-based helpers that work with the JSONAssert and JsonPath libraries to check that JSON appears as expected. The &lt;code&gt;JacksonTester&lt;/code&gt;, &lt;code&gt;GsonTester&lt;/code&gt;, &lt;code&gt;JsonbTester&lt;/code&gt;, and &lt;code&gt;BasicJsonTester&lt;/code&gt; classes can be used for Jackson, Gson, Jsonb, and Strings respectively. Any helper fields on the test class can be &lt;code&gt;@Autowired&lt;/code&gt; when using &lt;code&gt;@JsonTest&lt;/code&gt;. The following example shows a test class for Jackson:</source>
          <target state="translated">Spring Boot包括基于AssertJ的助手，这些助手与JSONAssert和JsonPath库一起使用，以检查JSON是否按预期方式显示。的 &lt;code&gt;JacksonTester&lt;/code&gt; ， &lt;code&gt;GsonTester&lt;/code&gt; ， &lt;code&gt;JsonbTester&lt;/code&gt; 和 &lt;code&gt;BasicJsonTester&lt;/code&gt; 类可用于杰克逊，GSON，Jsonb，和字符串分别。使用 &lt;code&gt;@JsonTest&lt;/code&gt; 时，可以使用 &lt;code&gt;@Autowired&lt;/code&gt; 测试类上的任何帮助程序字段。以下示例显示了Jackson的测试类：</target>
        </trans-unit>
        <trans-unit id="28ebd372dc648065dcdb6b20ded615c486a727a0" translate="yes" xml:space="preserve">
          <source>Spring Boot includes a &lt;code&gt;@MockBean&lt;/code&gt; annotation that can be used to define a Mockito mock for a bean inside your &lt;code&gt;ApplicationContext&lt;/code&gt;. You can use the annotation to add new beans or replace a single existing bean definition. The annotation can be used directly on test classes, on fields within your test, or on &lt;code&gt;@Configuration&lt;/code&gt; classes and fields. When used on a field, the instance of the created mock is also injected. Mock beans are automatically reset after each test method.</source>
          <target state="translated">Spring Boot包含一个 &lt;code&gt;@MockBean&lt;/code&gt; 批注，可用于为 &lt;code&gt;ApplicationContext&lt;/code&gt; 内的bean定义Mockito模拟。您可以使用注释添加新的bean或替换单个现有的bean定义。注释可以直接用于测试类，测试中的字段或 &lt;code&gt;@Configuration&lt;/code&gt; 类和字段。当在字段上使用时，也会注入创建的模拟的实例。每种测试方法后，模拟豆都会自动重置。</target>
        </trans-unit>
        <trans-unit id="304a283f2dea86d040395f30db4c482c5cc0ebf1" translate="yes" xml:space="preserve">
          <source>Spring Boot includes a number of &lt;code&gt;@Conditional&lt;/code&gt; annotations that you can reuse in your own code by annotating &lt;code&gt;@Configuration&lt;/code&gt; classes or individual &lt;code&gt;@Bean&lt;/code&gt; methods. These annotations include:</source>
          <target state="translated">Spring Boot包含许多 &lt;code&gt;@Conditional&lt;/code&gt; 批注，您可以通过注释 &lt;code&gt;@Configuration&lt;/code&gt; 类或单个 &lt;code&gt;@Bean&lt;/code&gt; 方法在自己的代码中重用。这些注释包括：</target>
        </trans-unit>
        <trans-unit id="07cce29e20e00ad8144d83955a3f1c69da027d2c" translate="yes" xml:space="preserve">
          <source>Spring Boot includes a number of additional features to help you monitor and manage your application when you push it to production. You can choose to manage and monitor your application by using HTTP endpoints or with JMX. Auditing, health, and metrics gathering can also be automatically applied to your application.</source>
          <target state="translated">Spring Boot包含了许多额外的功能,以帮助您在将应用程序推送到生产时对其进行监控和管理。您可以选择使用 HTTP 端点或使用 JMX 来管理和监控您的应用程序。审计、健康状况和指标收集也可以自动应用到您的应用程序。</target>
        </trans-unit>
        <trans-unit id="e4099e83c1f7394f5571d9493e0c7b0d4beec348" translate="yes" xml:space="preserve">
          <source>Spring Boot includes a number of extensions to Logback that can help with advanced configuration. You can use these extensions in your &lt;code&gt;logback-spring.xml&lt;/code&gt; configuration file.</source>
          <target state="translated">Spring Boot包含许多Logback扩展，可以帮助进行高级配置。您可以在 &lt;code&gt;logback-spring.xml&lt;/code&gt; 配置文件中使用这些扩展名。</target>
        </trans-unit>
        <trans-unit id="9d58eaa550053c1e6ba7fde60f18764089756de7" translate="yes" xml:space="preserve">
          <source>Spring Boot includes a number of starters for working with data sources. This section answers questions related to doing so.</source>
          <target state="translated">Spring Boot 包含了许多用于处理数据源的启动程序。本节将回答与此相关的问题。</target>
        </trans-unit>
        <trans-unit id="65144c3151d8039dd6cccd53ee11296603f4823c" translate="yes" xml:space="preserve">
          <source>Spring Boot includes an additional set of tools that can make the application development experience a little more pleasant. The &lt;code&gt;spring-boot-devtools&lt;/code&gt; module can be included in any project to provide additional development-time features. To include devtools support, add the module dependency to your build, as shown in the following listings for Maven and Gradle:</source>
          <target state="translated">Spring Boot包含一组额外的工具，这些工具可以使应用程序开发体验更加愉快。该 &lt;code&gt;spring-boot-devtools&lt;/code&gt; 模块可以包含在任何项目提供额外的开发时间的特点。要包括devtools支持，请将模块依赖项添加到您的构建中，如Maven和Gradle的以下清单所示：</target>
        </trans-unit>
        <trans-unit id="1933db059a331520305f48875e67d251e2ccf0bb" translate="yes" xml:space="preserve">
          <source>Spring Boot includes auto-configuration support for the following templating engines:</source>
          <target state="translated">Spring Boot包括对以下模板引擎的自动配置支持。</target>
        </trans-unit>
        <trans-unit id="a03227ba8cd362233a31ddf7ceba56c08043dc2a" translate="yes" xml:space="preserve">
          <source>Spring Boot includes build plugins for Maven and Gradle. This section answers common questions about these plugins.</source>
          <target state="translated">Spring Boot包含Maven和Gradle的构建插件。本节回答了关于这些插件的常见问题。</target>
        </trans-unit>
        <trans-unit id="07c1042deba07a2c95618c3cdc821f27c969ce45" translate="yes" xml:space="preserve">
          <source>Spring Boot includes command-line completion scripts for the BASH and zsh shells. If you do not use either of these shells (perhaps you are a Windows user), you can use the &lt;code&gt;shell&lt;/code&gt; command to launch an integrated shell, as shown in the following example:</source>
          <target state="translated">Spring Boot包含用于BASH和zsh Shell的命令行完成脚本。如果您不使用这两个外壳程序（也许您是Windows用户），则可以使用 &lt;code&gt;shell&lt;/code&gt; 命令来启动集成外壳程序，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="b2157324c0ff49319eaf79606e119b7e996999c7" translate="yes" xml:space="preserve">
          <source>Spring Boot includes pluggable API that allows various different location addresses to be supported. By default you can import Java Properties, YAML and &amp;ldquo;&lt;a href=&quot;#boot-features-external-config-files-configtree&quot;&gt;configuration trees&lt;/a&gt;&amp;rdquo;.</source>
          <target state="translated">Spring Boot包含可插入的API，该API允许支持各种不同的位置地址。默认情况下，您可以导入Java属性，YAML和&amp;ldquo;&lt;a href=&quot;#boot-features-external-config-files-configtree&quot;&gt;配置树&lt;/a&gt;&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="1ee8598de7c009c14fba5cb1780b2615ae4ab336" translate="yes" xml:space="preserve">
          <source>Spring Boot includes support for embedded &lt;a href=&quot;https://tomcat.apache.org/&quot;&gt;Tomcat&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/jetty/&quot;&gt;Jetty&lt;/a&gt;, and &lt;a href=&quot;https://github.com/undertow-io/undertow&quot;&gt;Undertow&lt;/a&gt; servers. Most developers use the appropriate &amp;ldquo;Starter&amp;rdquo; to obtain a fully configured instance. By default, the embedded server listens for HTTP requests on port &lt;code&gt;8080&lt;/code&gt;.</source>
          <target state="translated">Spring Boot包括对嵌入式&lt;a href=&quot;https://tomcat.apache.org/&quot;&gt;Tomcat&lt;/a&gt;，&lt;a href=&quot;https://www.eclipse.org/jetty/&quot;&gt;Jetty&lt;/a&gt;和&lt;a href=&quot;https://github.com/undertow-io/undertow&quot;&gt;Undertow&lt;/a&gt;服务器的支持。大多数开发人员使用适当的&amp;ldquo;启动器&amp;rdquo;来获取完全配置的实例。默认情况下，嵌入式服务器在端口 &lt;code&gt;8080&lt;/code&gt; 上侦听HTTP请求。</target>
        </trans-unit>
        <trans-unit id="1d18b3ee5ee629ee2e611863eb61c9e0544931b3" translate="yes" xml:space="preserve">
          <source>Spring Boot includes support for the following embedded reactive web servers: Reactor Netty, Tomcat, Jetty, and Undertow. Most developers use the appropriate &amp;ldquo;Starter&amp;rdquo; to obtain a fully configured instance. By default, the embedded server listens for HTTP requests on port 8080.</source>
          <target state="translated">Spring Boot包含对以下嵌入式反应式Web服务器的支持：Reactor Netty，Tomcat，Jetty和Undertow。大多数开发人员使用适当的&amp;ldquo;启动器&amp;rdquo;来获取完全配置的实例。默认情况下，嵌入式服务器在端口8080上侦听HTTP请求。</target>
        </trans-unit>
        <trans-unit id="bf20bd65ce119b54fd9a5171aa21c3b51fd8c0f2" translate="yes" xml:space="preserve">
          <source>Spring Boot includes the Spring Boot Actuator. This section answers questions that often arise from its use.</source>
          <target state="translated">Spring Boot 包括 Spring Boot Actuator。本节将回答在使用中经常出现的问题。</target>
        </trans-unit>
        <trans-unit id="957a202cfe996cd7cecb1c94a86db2c9f4b33327" translate="yes" xml:space="preserve">
          <source>Spring Boot includes the following pre-defined logging groups that can be used out-of-the-box:</source>
          <target state="translated">Spring Boot 包括以下可开箱即用的预定义日志组。</target>
        </trans-unit>
        <trans-unit id="3b72755ed27ea7d94c7d5b77c850ffb9781a1810" translate="yes" xml:space="preserve">
          <source>Spring Boot installs a &amp;lsquo;whitelabel&amp;rsquo; error page that you see in a browser client if you encounter a server error (machine clients consuming JSON and other media types should see a sensible response with the right error code).</source>
          <target state="translated">如果遇到服务器错误，Spring Boot将安装一个&amp;ldquo; whitelabel&amp;rdquo;错误页面，您会在浏览器客户端中看到该错误页面（使用JSON和其他媒体类型的机器客户端应该看到带有正确错误代码的明智响应）。</target>
        </trans-unit>
        <trans-unit id="e41f56a78d9685ce4f677923b597322dc1e39b0e" translate="yes" xml:space="preserve">
          <source>Spring Boot is compatible with Apache Maven 3.3 or above. If you do not already have Maven installed, you can follow the instructions at &lt;a href=&quot;https://maven.apache.org&quot;&gt;maven.apache.org&lt;/a&gt;.</source>
          <target state="translated">Spring Boot与Apache Maven 3.3或更高版本兼容。如果尚未安装Maven，则可以按照&lt;a href=&quot;https://maven.apache.org&quot;&gt;maven.apache.org上&lt;/a&gt;的说明进行操作。</target>
        </trans-unit>
        <trans-unit id="62bd3427987df9515b7dda6c7ebbc1a5ab4a1f58" translate="yes" xml:space="preserve">
          <source>Spring Boot is compatible with Gradle 6 (6.3 or later). Gradle 5.6.x is also supported but this support is deprecated and will be removed in a future release. If you do not already have Gradle installed, you can follow the instructions at &lt;a href=&quot;https://gradle.org&quot;&gt;gradle.org&lt;/a&gt;.</source>
          <target state="translated">Spring Boot与Gradle 6（6.3或更高版本）兼容。还支持Gradle 5.6.x，但不支持该支持，在将来的版本中将删除该支持。如果尚未安装Gradle，则可以按照&lt;a href=&quot;https://gradle.org&quot;&gt;gradle.org上&lt;/a&gt;的说明进行操作。</target>
        </trans-unit>
        <trans-unit id="1c2a57fc6d936c2261256a9b01a06d00da8c76da" translate="yes" xml:space="preserve">
          <source>Spring Boot is well suited for web application development. You can create a self-contained HTTP server by using embedded Tomcat, Jetty, Undertow, or Netty. Most web applications use the &lt;code&gt;spring-boot-starter-web&lt;/code&gt; module to get up and running quickly. You can also choose to build reactive web applications by using the &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; module.</source>
          <target state="translated">Spring Boot非常适合于Web应用程序开发。您可以使用嵌入式Tomcat，Jetty，Undertow或Netty创建独立的HTTP服务器。大多数Web应用程序都使用 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; 模块来快速启动和运行。您还可以选择使用 &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; 模块构建反应式Web应用程序。</target>
        </trans-unit>
        <trans-unit id="8004ef4e0de3c98c067348aa4d2c99032e9d98c6" translate="yes" xml:space="preserve">
          <source>Spring Boot jars include metadata files that provide details of all supported configuration properties. The files are designed to let IDE developers offer contextual help and &amp;ldquo;code completion&amp;rdquo; as users are working with &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yml&lt;/code&gt; files.</source>
          <target state="translated">Spring Boot jar包含元数据文件，这些文件提供了所有受支持的配置属性的详细信息。这些文件旨在让IDE开发人员在用户使用 &lt;code&gt;application.properties&lt;/code&gt; 或 &lt;code&gt;application.yml&lt;/code&gt; 文件时提供上下文帮助和&amp;ldquo;代码完成&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="526772cf88e4e4d1a806faf42cccd16ea5ee9453" translate="yes" xml:space="preserve">
          <source>Spring Boot lets you externalize your configuration so that you can work with the same application code in different environments. You can use a variety of external configuration sources, include Java properties files, YAML files, environment variables, and command-line arguments.</source>
          <target state="translated">Spring Boot允许您将配置外部化,这样您就可以在不同的环境中使用相同的应用程序代码。你可以使用各种外部配置源,包括Java属性文件、YAML文件、环境变量和命令行参数。</target>
        </trans-unit>
        <trans-unit id="5e1b592c133ca4e91622fca7c74cb80290552c74" translate="yes" xml:space="preserve">
          <source>Spring Boot logs the configuration files that are loaded at the &lt;code&gt;DEBUG&lt;/code&gt; level and the candidates it has not found at &lt;code&gt;TRACE&lt;/code&gt; level.</source>
          <target state="translated">Spring Boot记录在 &lt;code&gt;DEBUG&lt;/code&gt; 级别加载的配置文件以及在 &lt;code&gt;TRACE&lt;/code&gt; 级别找不到的候选文件。</target>
        </trans-unit>
        <trans-unit id="9687ef3f11189aed9cb56d805aa6b2131b149a6c" translate="yes" xml:space="preserve">
          <source>Spring Boot makes &lt;code&gt;-D&lt;/code&gt; arguments available as properties accessible from a Spring &lt;code&gt;Environment&lt;/code&gt; instance. The &lt;code&gt;server.port&lt;/code&gt; configuration property is fed to the embedded Tomcat, Jetty, or Undertow instance, which then uses the port when it starts up. The &lt;code&gt;$PORT&lt;/code&gt; environment variable is assigned to us by the Heroku PaaS.</source>
          <target state="translated">Spring Boot使 &lt;code&gt;-D&lt;/code&gt; 参数成为可从Spring &lt;code&gt;Environment&lt;/code&gt; 实例访问的属性。所述 &lt;code&gt;server.port&lt;/code&gt; 配置属性被馈送到嵌入的Tomcat，码头，或暗流实例，它然后使用端口在启动时。在 &lt;code&gt;$PORT&lt;/code&gt; 环境变量由Heroku的PaaS的分配给我们。</target>
        </trans-unit>
        <trans-unit id="47a3b8573e057e5e40394adf051e05e8749615f6" translate="yes" xml:space="preserve">
          <source>Spring Boot manages the version for the &lt;code&gt;io.netty:netty-tcnative-boringssl-static&lt;/code&gt; &quot;uber jar&quot;, containing native libraries for all platforms. Developers can choose to import only the required dependencies using a classifier (see &lt;a href=&quot;https://netty.io/wiki/forked-tomcat-native.html&quot;&gt;the Netty official documentation&lt;/a&gt;).</source>
          <target state="translated">Spring Boot管理 &lt;code&gt;io.netty:netty-tcnative-boringssl-static&lt;/code&gt; &amp;ldquo;超级罐&amp;rdquo;的版本，其中包含所有平台的本机库。开发人员可以选择使用分类器仅导入所需的依赖项（请参见&lt;a href=&quot;https://netty.io/wiki/forked-tomcat-native.html&quot;&gt;Netty官方文档&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="faddcc92abf9d8670b1f04309678414f99c91cc7" translate="yes" xml:space="preserve">
          <source>Spring Boot manages your &lt;a href=&quot;spring-boot-features#boot-features-application-availability&quot;&gt;Application Availability State&lt;/a&gt; out-of-the-box. If deployed in a Kubernetes environment, actuator will gather the &quot;Liveness&quot; and &quot;Readiness&quot; information from the &lt;code&gt;ApplicationAvailability&lt;/code&gt; interface and use that information in dedicated &lt;a href=&quot;#production-ready-health-indicators&quot;&gt;Health Indicators&lt;/a&gt;: &lt;code&gt;LivenessStateHealthIndicator&lt;/code&gt; and &lt;code&gt;ReadinessStateHealthIndicator&lt;/code&gt;. These indicators will be shown on the global health endpoint (&lt;code&gt;&quot;/actuator/health&quot;&lt;/code&gt;). They will also be exposed as separate HTTP Probes using &lt;a href=&quot;#production-ready-health-groups&quot;&gt;Health Groups&lt;/a&gt;: &lt;code&gt;&quot;/actuator/health/liveness&quot;&lt;/code&gt; and &lt;code&gt;&quot;/actuator/health/readiness&quot;&lt;/code&gt;.</source>
          <target state="translated">Spring Boot开箱即用地管理您的&lt;a href=&quot;spring-boot-features#boot-features-application-availability&quot;&gt;应用程序可用性状态&lt;/a&gt;。如果部署在Kubernetes环境中，那么执行器将从 &lt;code&gt;ApplicationAvailability&lt;/code&gt; 界面收集&amp;ldquo;活动&amp;rdquo;和&amp;ldquo;就绪&amp;rdquo;信息，并在专用的&lt;a href=&quot;#production-ready-health-indicators&quot;&gt;健康指标&lt;/a&gt;（ &lt;code&gt;LivenessStateHealthIndicator&lt;/code&gt; 和 &lt;code&gt;ReadinessStateHealthIndicator&lt;/code&gt; )中使用该信息。这些指标将显示在全局健康端点（ &lt;code&gt;&quot;/actuator/health&quot;&lt;/code&gt; ）上。它们还将使用 &lt;code&gt;&quot;/actuator/health/liveness&quot;&lt;/code&gt; &lt;a href=&quot;#production-ready-health-groups&quot;&gt;组&lt;/a&gt;作为单独的HTTP探针公开：&amp;ldquo; / actuator / health / liveness&amp;rdquo;和 &lt;code&gt;&quot;/actuator/health/readiness&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5c56ce31dc51792fb300d78c7fd623f0ea0f2c9e" translate="yes" xml:space="preserve">
          <source>Spring Boot offers a number of starters that include messaging. This section answers questions that arise from using messaging with Spring Boot.</source>
          <target state="translated">Spring Boot 提供了许多包含消息传递的启动程序。本节将回答在Spring Boot中使用消息传递时出现的问题。</target>
        </trans-unit>
        <trans-unit id="239ddbfe6ac81d1bc442559acd88f286ac170490" translate="yes" xml:space="preserve">
          <source>Spring Boot offers a number of starters that work with HTTP clients. This section answers questions related to using them.</source>
          <target state="translated">Spring Boot提供了许多与HTTP客户端一起工作的启动程序。本节将回答与使用它们有关的问题。</target>
        </trans-unit>
        <trans-unit id="6081048fae33be74d381b00c76e6b412e60af265" translate="yes" xml:space="preserve">
          <source>Spring Boot offers auto-configuration for &lt;a href=&quot;https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo&quot;&gt;Embedded Mongo&lt;/a&gt;. To use it in your Spring Boot application, add a dependency on &lt;code&gt;de.flapdoodle.embed:de.flapdoodle.embed.mongo&lt;/code&gt;.</source>
          <target state="translated">Spring Boot为&lt;a href=&quot;https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo&quot;&gt;Embedded Mongo&lt;/a&gt;提供自动配置。要在您的Spring Boot应用程序中使用它，请添加对 &lt;code&gt;de.flapdoodle.embed:de.flapdoodle.embed.mongo&lt;/code&gt; 的依赖项。</target>
        </trans-unit>
        <trans-unit id="c6aad444c7d2550cb2d8c22277c8ccabdaa1b767" translate="yes" xml:space="preserve">
          <source>Spring Boot offers several conveniences for working with &lt;a href=&quot;https://spring.io/projects/spring-integration&quot;&gt;Spring Integration&lt;/a&gt;, including the &lt;code&gt;spring-boot-starter-integration&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo;. Spring Integration provides abstractions over messaging and also other transports such as HTTP, TCP, and others. If Spring Integration is available on your classpath, it is initialized through the &lt;code&gt;@EnableIntegration&lt;/code&gt; annotation.</source>
          <target state="translated">Spring Boot为使用&lt;a href=&quot;https://spring.io/projects/spring-integration&quot;&gt;Spring Integration&lt;/a&gt;提供了许多便利，包括 &lt;code&gt;spring-boot-starter-integration&lt;/code&gt; &amp;ldquo; Starter&amp;rdquo;。Spring Integration在消息传递以及其他传输（例如HTTP，TCP等）上提供了抽象。如果Spring Integration在您的类路径中可用，则通过 &lt;code&gt;@EnableIntegration&lt;/code&gt; 批注对其进行初始化。</target>
        </trans-unit>
        <trans-unit id="02cad64f06c4ac38d061cf53b31a48c15ea9314a" translate="yes" xml:space="preserve">
          <source>Spring Boot offers several conveniences for working with the &lt;a href=&quot;https://www.quartz-scheduler.org/&quot;&gt;Quartz scheduler&lt;/a&gt;, including the &lt;code&gt;spring-boot-starter-quartz&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo;. If Quartz is available, a &lt;code&gt;Scheduler&lt;/code&gt; is auto-configured (through the &lt;code&gt;SchedulerFactoryBean&lt;/code&gt; abstraction).</source>
          <target state="translated">Spring Boot为使用&lt;a href=&quot;https://www.quartz-scheduler.org/&quot;&gt;Quartz调度程序&lt;/a&gt;提供了许多便利，包括 &lt;code&gt;spring-boot-starter-quartz&lt;/code&gt; &amp;ldquo; Starter&amp;rdquo;。如果石英可用， &lt;code&gt;Scheduler&lt;/code&gt; 是自动配置（通过 &lt;code&gt;SchedulerFactoryBean&lt;/code&gt; 来抽象）。</target>
        </trans-unit>
        <trans-unit id="bd0e877df480e5f2fdcb2c4e5a20f8c618cdc2ea" translate="yes" xml:space="preserve">
          <source>Spring Boot provides &lt;a href=&quot;https://spring.io/projects/spring-session&quot;&gt;Spring Session&lt;/a&gt; auto-configuration for a wide range of data stores. When building a Servlet web application, the following stores can be auto-configured:</source>
          <target state="translated">Spring Boot为各种数据存储提供了&lt;a href=&quot;https://spring.io/projects/spring-session&quot;&gt;Spring Session&lt;/a&gt;自动配置。在构建Servlet Web应用程序时，可以自动配置以下存储：</target>
        </trans-unit>
        <trans-unit id="bc3fe7444c046068dca8d971477340659562030b" translate="yes" xml:space="preserve">
          <source>Spring Boot provides &lt;a href=&quot;production-ready-features#production-ready-kubernetes-probes&quot;&gt;Kubernetes HTTP probes for &quot;Liveness&quot; and &quot;Readiness&quot; with Actuator Health Endpoints&lt;/a&gt;. You can get more guidance about &lt;a href=&quot;deployment#cloud-deployment-kubernetes&quot;&gt;deploying Spring Boot applications on Kubernetes in the dedicated section&lt;/a&gt;.</source>
          <target state="translated">Spring Boot&lt;a href=&quot;production-ready-features#production-ready-kubernetes-probes&quot;&gt;通过Actuator Health Endpoints&lt;/a&gt;提供了针对&amp;ldquo;活动性&amp;rdquo;和&amp;ldquo;就绪性&amp;rdquo;的Kubernetes HTTP探针。您可以&lt;a href=&quot;deployment#cloud-deployment-kubernetes&quot;&gt;在专用部分中&lt;/a&gt;获得有关在Kubernetes上部署Spring Boot应用程序的更多指导。</target>
        </trans-unit>
        <trans-unit id="f53722204deb49147fa0aa66e949f92762f55700" translate="yes" xml:space="preserve">
          <source>Spring Boot provides Kotlin support by leveraging the support in other Spring projects such as Spring Framework, Spring Data, and Reactor. See the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/languages.html#kotlin&quot;&gt;Spring Framework Kotlin support documentation&lt;/a&gt; for more information.</source>
          <target state="translated">Spring Boot通过利用其他Spring项目（如Spring Framework，Spring Data和Reactor）中的支持来提供Kotlin支持。有关更多信息，请参见&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/languages.html#kotlin&quot;&gt;Spring Framework Kotlin支持文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b15fc64c2cfa5b418b5cad0e5b1bee2571923c23" translate="yes" xml:space="preserve">
          <source>Spring Boot provides RSocket server auto-configuration. The required dependencies are provided by the &lt;code&gt;spring-boot-starter-rsocket&lt;/code&gt;.</source>
          <target state="translated">Spring Boot提供了RSocket服务器自动配置。所需的依赖项由 &lt;code&gt;spring-boot-starter-rsocket&lt;/code&gt; 提供。</target>
        </trans-unit>
        <trans-unit id="caa2ba76157200ed2ca728bc80dc4f1c9a2a96bf" translate="yes" xml:space="preserve">
          <source>Spring Boot provides Web Services auto-configuration so that all you must do is define your &lt;code&gt;Endpoints&lt;/code&gt;.</source>
          <target state="translated">Spring Boot提供了Web服务自动配置，因此您所要做的就是定义 &lt;code&gt;Endpoints&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="047fa962e5326c19d72d898ada026e1a63d94a6c" translate="yes" xml:space="preserve">
          <source>Spring Boot provides WebSockets auto-configuration for embedded Tomcat, Jetty, and Undertow. If you deploy a war file to a standalone container, Spring Boot assumes that the container is responsible for the configuration of its WebSocket support.</source>
          <target state="translated">Spring Boot 为嵌入式 Tomcat、Jetty 和 Undertow 提供 WebSockets 自动配置。如果您将 war 文件部署到独立的容器中,Spring Boot 假设容器负责配置其 WebSocket 支持。</target>
        </trans-unit>
        <trans-unit id="e7cb16bada1772bbcbfafc799c32aec71838b2e3" translate="yes" xml:space="preserve">
          <source>Spring Boot provides a &lt;code&gt;@SpringBootTest&lt;/code&gt; annotation, which can be used as an alternative to the standard &lt;code&gt;spring-test&lt;/code&gt;&lt;code&gt;@ContextConfiguration&lt;/code&gt; annotation when you need Spring Boot features. The annotation works by &lt;a href=&quot;#boot-features-testing-spring-boot-applications-detecting-config&quot;&gt;creating the &lt;code&gt;ApplicationContext&lt;/code&gt; used in your tests through &lt;code&gt;SpringApplication&lt;/code&gt;&lt;/a&gt;. In addition to &lt;code&gt;@SpringBootTest&lt;/code&gt; a number of other annotations are also provided for &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests&quot;&gt;testing more specific slices&lt;/a&gt; of an application.</source>
          <target state="translated">Spring Boot提供了 &lt;code&gt;@SpringBootTest&lt;/code&gt; 批注，当您需要Spring Boot功能时，可以将其用作标准 &lt;code&gt;spring-test&lt;/code&gt; &lt;code&gt;@ContextConfiguration&lt;/code&gt; 批注的替代方法。注释通过&lt;a href=&quot;#boot-features-testing-spring-boot-applications-detecting-config&quot;&gt;创建通过 &lt;code&gt;SpringApplication&lt;/code&gt; 在测试中使用的 &lt;code&gt;ApplicationContext&lt;/code&gt; 来起作用&lt;/a&gt;。除了 &lt;code&gt;@SpringBootTest&lt;/code&gt; 之外，还提供了许多其他注释来&lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests&quot;&gt;测试&lt;/a&gt;应用程序的更特定的部分。</target>
        </trans-unit>
        <trans-unit id="f2d3e93b7ab3c387fbd9a98a8b1a47d406041803" translate="yes" xml:space="preserve">
          <source>Spring Boot provides a &lt;code&gt;WebExceptionHandler&lt;/code&gt; that handles all errors in a sensible way. Its position in the processing order is immediately before the handlers provided by WebFlux, which are considered last. For machine clients, it produces a JSON response with details of the error, the HTTP status, and the exception message. For browser clients, there is a &amp;ldquo;whitelabel&amp;rdquo; error handler that renders the same data in HTML format. You can also provide your own HTML templates to display errors (see the &lt;a href=&quot;#boot-features-webflux-error-handling-custom-error-pages&quot;&gt;next section&lt;/a&gt;).</source>
          <target state="translated">Spring Boot提供了一个 &lt;code&gt;WebExceptionHandler&lt;/code&gt; ，以一种明智的方式处理所有错误。它在处理顺序中的位置紧靠WebFlux提供的处理程序之前，该处理程序被认为是最后一个。对于机器客户端，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。对于浏览器客户端，有一个&amp;ldquo; whitelabel&amp;rdquo;错误处理程序，以HTML格式呈现相同的数据。您还可以提供自己的HTML模板来显示错误（请参阅&lt;a href=&quot;#boot-features-webflux-error-handling-custom-error-pages&quot;&gt;下一节&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="efa47b4f062eed3a5c94bd6061d26a88c3b3b15c" translate="yes" xml:space="preserve">
          <source>Spring Boot provides a &lt;code&gt;metrics&lt;/code&gt; endpoint that can be used diagnostically to examine the metrics collected by an application. The endpoint is not available by default and must be exposed, see &lt;a href=&quot;#production-ready-endpoints-exposing-endpoints&quot;&gt;exposing endpoints&lt;/a&gt; for more details.</source>
          <target state="translated">Spring Boot提供了一个 &lt;code&gt;metrics&lt;/code&gt; 终结点，可用于诊断检查应用程序收集的度量。端点默认情况下不可用，必须公开，有关更多详细信息，请参见&lt;a href=&quot;#production-ready-endpoints-exposing-endpoints&quot;&gt;暴露端点&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="371c6aeab2d7db36899f7c9cba9012088eefaade" translate="yes" xml:space="preserve">
          <source>Spring Boot provides a dedicated &amp;ldquo;Starter&amp;rdquo;, &lt;code&gt;spring-boot-starter-data-elasticsearch&lt;/code&gt;.</source>
          <target state="translated">Spring Boot提供了专用的&amp;ldquo;启动器&amp;rdquo;， &lt;code&gt;spring-boot-starter-data-elasticsearch&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1f2bcdfdef85ca91c363c0d24070f826fecbf322" translate="yes" xml:space="preserve">
          <source>Spring Boot provides a number of &amp;ldquo;Starters&amp;rdquo; that let you add jars to your classpath. Our applications for smoke tests use the &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; in the &lt;code&gt;parent&lt;/code&gt; section of the POM. The &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; is a special starter that provides useful Maven defaults. It also provides a &lt;a href=&quot;using-spring-boot#using-boot-dependency-management&quot;&gt;&lt;code&gt;dependency-management&lt;/code&gt;&lt;/a&gt; section so that you can omit &lt;code&gt;version&lt;/code&gt; tags for &amp;ldquo;blessed&amp;rdquo; dependencies.</source>
          <target state="translated">Spring Boot提供了许多&amp;ldquo;启动器&amp;rdquo;，使您可以将jar添加到类路径中。我们的烟雾测试应用程序在POM的 &lt;code&gt;parent&lt;/code&gt; 部分中使用 &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; 。该 &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; 是一种特殊的起动提供有用的Maven的默认值。它还提供了一个&lt;a href=&quot;using-spring-boot#using-boot-dependency-management&quot;&gt; &lt;code&gt;dependency-management&lt;/code&gt; &lt;/a&gt;部分，以便您可以为&amp;ldquo;受祝福的&amp;rdquo;依赖项省略 &lt;code&gt;version&lt;/code&gt; 标签。</target>
        </trans-unit>
        <trans-unit id="b2a8df280c158d8e4a16c3ae7728146a5720b286" translate="yes" xml:space="preserve">
          <source>Spring Boot provides a number of logback configurations that be &lt;code&gt;included&lt;/code&gt; from your own configuration. These includes are designed to allow certain common Spring Boot conventions to be re-applied.</source>
          <target state="translated">Spring Boot提供了许多您自己的配置中 &lt;code&gt;included&lt;/code&gt; 的logback配置。这些包括旨在允许重新应用某些常见的Spring Boot约定。</target>
        </trans-unit>
        <trans-unit id="551fa24800999b2c074625beb27027737e3f8560" translate="yes" xml:space="preserve">
          <source>Spring Boot provides a number of utilities and annotations to help when testing your application. Test support is provided by two modules: &lt;code&gt;spring-boot-test&lt;/code&gt; contains core items, and &lt;code&gt;spring-boot-test-autoconfigure&lt;/code&gt; supports auto-configuration for tests.</source>
          <target state="translated">Spring Boot提供了许多实用程序和注释，可以在测试应用程序时提供帮助。测试支持由两个模块提供： &lt;code&gt;spring-boot-test&lt;/code&gt; 包含核心项目， &lt;code&gt;spring-boot-test-autoconfigure&lt;/code&gt; 支持测试的自动配置。</target>
        </trans-unit>
        <trans-unit id="bb79fc3b35d43d821c595f40b5fd6a6bec8d5b4a" translate="yes" xml:space="preserve">
          <source>Spring Boot provides an idiomatic way to run an application with &lt;code&gt;runApplication&amp;lt;MyApplication&amp;gt;(*args)&lt;/code&gt; as shown in the following example:</source>
          <target state="translated">Spring Boot提供了一种惯用的方式来运行带有 &lt;code&gt;runApplication&amp;lt;MyApplication&amp;gt;(*args)&lt;/code&gt; 的应用程序，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="ba58e0c34a5d8dc0378ab20a021b103004ca2b16" translate="yes" xml:space="preserve">
          <source>Spring Boot provides auto-configuration for Redis, MongoDB, Neo4j, Elasticsearch, Solr Cassandra, Couchbase, and LDAP. You can make use of the other projects, but you must configure them yourself. Refer to the appropriate reference documentation at &lt;a href=&quot;https://spring.io/projects/spring-data&quot;&gt;spring.io/projects/spring-data&lt;/a&gt;.</source>
          <target state="translated">Spring Boot为Redis，MongoDB，Neo4j，Elasticsearch，Solr Cassandra，Couchbase和LDAP提供自动配置。您可以使用其他项目，但必须自己进行配置。请参阅相应的参考文档，位于&lt;a href=&quot;https://spring.io/projects/spring-data&quot;&gt;spring.io/projects/spring-data&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b22f02be672ad1a81f1747d3b937f8636dd92e23" translate="yes" xml:space="preserve">
          <source>Spring Boot provides auto-configuration for Spring MVC that works well with most applications.</source>
          <target state="translated">Spring Boot为Spring MVC提供了自动配置,可以很好地与大多数应用程序配合。</target>
        </trans-unit>
        <trans-unit id="ad9bf087f18f54c7586b414cb1fc4a7e19d642be" translate="yes" xml:space="preserve">
          <source>Spring Boot provides auto-configuration for Spring WebFlux that works well with most applications.</source>
          <target state="translated">Spring Boot为Spring WebFlux提供了自动配置,可以很好地与大多数应用程序配合。</target>
        </trans-unit>
        <trans-unit id="4d389f7d6ff984e341e30080f0a45529939ffc06" translate="yes" xml:space="preserve">
          <source>Spring Boot provides build tool plugins for Maven and Gradle. The plugins offer a variety of features, including the packaging of executable jars. This section provides more details on both plugins as well as some help should you need to extend an unsupported build system. If you are just getting started, you might want to read &amp;ldquo;&lt;a href=&quot;using-spring-boot#using-boot-build-systems&quot;&gt;using-spring-boot.html&lt;/a&gt;&amp;rdquo; from the &amp;ldquo;&lt;a href=&quot;using-spring-boot#using-boot&quot;&gt;using-spring-boot.html&lt;/a&gt;&amp;rdquo; section first.</source>
          <target state="translated">Spring Boot为Maven和Gradle提供了构建工具插件。插件提供了多种功能，包括可执行jar的打包。本节提供有关这两个插件的更多详细信息，以及在扩展不受支持的构建系统时所需的一些帮助。如果您刚刚入门，则可能需要先阅读&amp;ldquo; &lt;a href=&quot;using-spring-boot#using-boot-build-systems&quot;&gt;using-spring-boot.html&lt;/a&gt; &amp;rdquo;部分中的&amp;ldquo; &lt;a href=&quot;using-spring-boot#using-boot&quot;&gt;using-spring-boot.html&lt;/a&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="8537d6c91e35ac892a5fb63b32c59ae52e0ef931" translate="yes" xml:space="preserve">
          <source>Spring Boot provides dedicated configuration properties for codecs, &lt;code&gt;spring.codec.*&lt;/code&gt;. It also applies further customization by using &lt;code&gt;CodecCustomizer&lt;/code&gt; instances. For example, &lt;code&gt;spring.jackson.*&lt;/code&gt; configuration keys are applied to the Jackson codec.</source>
          <target state="translated">Spring Boot为编解码器 &lt;code&gt;spring.codec.*&lt;/code&gt; 提供了专用的配置属性。它还通过使用 &lt;code&gt;CodecCustomizer&lt;/code&gt; 实例来应用进一步的自定义。例如，将 &lt;code&gt;spring.jackson.*&lt;/code&gt; 配置键应用于Jackson编解码器。</target>
        </trans-unit>
        <trans-unit id="620c63ef3873898b5fad643a5efa929482aab38f" translate="yes" xml:space="preserve">
          <source>Spring Boot provides infrastructure to bind &lt;code&gt;@ConfigurationProperties&lt;/code&gt; types and register them as beans. You can either enable configuration properties on a class-by-class basis or enable configuration property scanning that works in a similar manner to component scanning.</source>
          <target state="translated">Spring Boot提供了绑定 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 类型并将其注册为Bean的基础架构。您可以逐级启用配置属性，也可以启用与组件扫描类似的方式进行配置属性扫描。</target>
        </trans-unit>
        <trans-unit id="0a1df2f5f409560e8032500ba13eefa546b84afb" translate="yes" xml:space="preserve">
          <source>Spring Boot provides integration with three JSON mapping libraries:</source>
          <target state="translated">Spring Boot 提供了与三个 JSON 映射库的集成。</target>
        </trans-unit>
        <trans-unit id="dc1a4cd02de57792836a3c7c88e239982407cca4" translate="yes" xml:space="preserve">
          <source>Spring Boot provides numerous &lt;code&gt;FailureAnalyzer&lt;/code&gt; implementations, and you can &lt;a href=&quot;howto#howto-failure-analyzer&quot;&gt;add your own&lt;/a&gt;.</source>
          <target state="translated">Spring Boot提供了许多 &lt;code&gt;FailureAnalyzer&lt;/code&gt; 实现，您可以&lt;a href=&quot;howto#howto-failure-analyzer&quot;&gt;添加自己的实现&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0ee98b82fba54ca7b2e9b043c148c5a29b0b19bc" translate="yes" xml:space="preserve">
          <source>Spring Boot provides various conversion mechanism with advanced value formatting, make sure to review &lt;a href=&quot;spring-boot-features#boot-features-external-config-conversion&quot;&gt;the properties conversion section&lt;/a&gt;.</source>
          <target state="translated">Spring Boot提供了各种具有高级值格式的转换机制，请务必查看&lt;a href=&quot;spring-boot-features#boot-features-external-config-conversion&quot;&gt;属性转换部分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ecb6adca9ef8a16b3cc804c22baab593b338a418" translate="yes" xml:space="preserve">
          <source>Spring Boot registers the following core metrics when applicable:</source>
          <target state="translated">Spring Boot会在适用时注册以下核心指标。</target>
        </trans-unit>
        <trans-unit id="8ce925d1cc8b7a14374d4d025c9c8b018c571160" translate="yes" xml:space="preserve">
          <source>Spring Boot ships by default with Tomcat 9.0.x which supports HTTP/2 out of the box when using JDK 9 or later. Alternatively, HTTP/2 can be used on JDK 8 if the &lt;code&gt;libtcnative&lt;/code&gt; library and its dependencies are installed on the host operating system.</source>
          <target state="translated">默认情况下，Spring Boot随Tomcat 9.0.x一起提供，当使用JDK 9或更高版本时，Tomcat 9.0.x支持HTTP / 2。或者，如果将 &lt;code&gt;libtcnative&lt;/code&gt; 库及其依赖项安装在主机操作系统上，则可以在JDK 8上使用HTTP / 2 。</target>
        </trans-unit>
        <trans-unit id="747dc0b454685fe541438b88755597c0bbc06f25" translate="yes" xml:space="preserve">
          <source>Spring Boot ships with the &lt;code&gt;BufferingApplicationStartup&lt;/code&gt; variant; this implementation is meant for buffering the startup steps and draining them into an external metrics system. Applications can ask for the bean of type &lt;code&gt;BufferingApplicationStartup&lt;/code&gt; in any component. Additionally, Spring Boot Actuator will &lt;a href=&quot;production-ready-features#production-ready-endpoints&quot;&gt;expose a &lt;code&gt;startup&lt;/code&gt; endpoint to expose this information as a JSON document&lt;/a&gt;.</source>
          <target state="translated">Spring Boot带有 &lt;code&gt;BufferingApplicationStartup&lt;/code&gt; 变体。此实现旨在缓冲启动步骤，并将其消耗到外部度量标准系统中。应用程序可以在任何组件中请求 &lt;code&gt;BufferingApplicationStartup&lt;/code&gt; 类型的Bean 。此外，Spring Boot Actuator将&lt;a href=&quot;production-ready-features#production-ready-endpoints&quot;&gt;公开 &lt;code&gt;startup&lt;/code&gt; 端点，以将此信息公开为JSON文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dd7bbe6f710da07291fb4f3f42ea3b841a5f8594" translate="yes" xml:space="preserve">
          <source>Spring Boot supports &lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot;&gt;Log4j 2&lt;/a&gt; for logging configuration if it is on the classpath. If you use the starters for assembling dependencies, you have to exclude Logback and then include log4j 2 instead. If you do not use the starters, you need to provide (at least) &lt;code&gt;spring-jcl&lt;/code&gt; in addition to Log4j 2.</source>
          <target state="translated">如果Spring Boot在类路径上，则它支持&lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot;&gt;Log4j 2&lt;/a&gt;进行日志记录配置。如果使用启动器来组装依赖项，则必须排除Logback，然后改为包括log4j 2。如果您不使用启动器，则除了Log4j 2外，还需要（至少）提供 &lt;code&gt;spring-jcl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5c949af2fa38d8b0d71aea767d5446d5c2d0b7e9" translate="yes" xml:space="preserve">
          <source>Spring Boot supports Kotlin 1.3.x. To use Kotlin, &lt;code&gt;org.jetbrains.kotlin:kotlin-stdlib&lt;/code&gt; and &lt;code&gt;org.jetbrains.kotlin:kotlin-reflect&lt;/code&gt; must be present on the classpath. The &lt;code&gt;kotlin-stdlib&lt;/code&gt; variants &lt;code&gt;kotlin-stdlib-jdk7&lt;/code&gt; and &lt;code&gt;kotlin-stdlib-jdk8&lt;/code&gt; can also be used.</source>
          <target state="translated">Spring Boot支持Kotlin1.3.x。要使用Kotlin， &lt;code&gt;org.jetbrains.kotlin:kotlin-stdlib&lt;/code&gt; 和 &lt;code&gt;org.jetbrains.kotlin:kotlin-reflect&lt;/code&gt; 必须存在于类路径中。所述 &lt;code&gt;kotlin-stdlib&lt;/code&gt; 变体 &lt;code&gt;kotlin-stdlib-jdk7&lt;/code&gt; 和 &lt;code&gt;kotlin-stdlib-jdk8&lt;/code&gt; 也可以使用。</target>
        </trans-unit>
        <trans-unit id="3447cc5032ac5b8266faac9499cd48a781c6e51a" translate="yes" xml:space="preserve">
          <source>Spring Boot supports both Hazelcast 4 and Hazelcast 3. If you downgrade to Hazelcast 3, &lt;code&gt;hazelcast-client&lt;/code&gt; should be added to the classpath to configure a client.</source>
          <target state="translated">Spring Boot同时支持Hazelcast 4和Hazelcast3。如果您降级到Hazelcast 3，则应将 &lt;code&gt;hazelcast-client&lt;/code&gt; 添加到类路径中以配置客户端。</target>
        </trans-unit>
        <trans-unit id="bff4761a59a04a3dbc8567f2156131a7b790e9f1" translate="yes" xml:space="preserve">
          <source>Spring Boot supports both classic and reactive Elasticsearch repositories, using the &lt;code&gt;ElasticsearchRestTemplate&lt;/code&gt; or &lt;code&gt;ReactiveElasticsearchTemplate&lt;/code&gt; beans. Most likely those beans are auto-configured by Spring Boot given the required dependencies are present.</source>
          <target state="translated">Spring Boot使用 &lt;code&gt;ElasticsearchRestTemplate&lt;/code&gt; 或 &lt;code&gt;ReactiveElasticsearchTemplate&lt;/code&gt; bean支持经典和反应式Elasticsearch存储库。给定所需的依赖项，这些bean最有可能由Spring Boot自动配置。</target>
        </trans-unit>
        <trans-unit id="5631e558ea904f8fcebe977b208add870049f6a6" translate="yes" xml:space="preserve">
          <source>Spring Boot supports both static and templated welcome pages. It first looks for an &lt;code&gt;index.html&lt;/code&gt; file in the configured static content locations. If one is not found, it then looks for an &lt;code&gt;index&lt;/code&gt; template. If either is found, it is automatically used as the welcome page of the application.</source>
          <target state="translated">Spring Boot支持静态和模板欢迎页面。它首先在配置的静态内容位置中查找 &lt;code&gt;index.html&lt;/code&gt; 文件。如果未找到，则寻找 &lt;code&gt;index&lt;/code&gt; 模板。如果找到任何一个，它将自动用作应用程序的欢迎页面。</target>
        </trans-unit>
        <trans-unit id="6a104bc7a52def86e718dcf8f30fc1d9678aaa58" translate="yes" xml:space="preserve">
          <source>Spring Boot supports distributed JTA transactions across multiple XA resources by using an &lt;a href=&quot;https://www.atomikos.com/&quot;&gt;Atomikos&lt;/a&gt; embedded transaction manager. Deprecated support for using a &lt;a href=&quot;https://github.com/bitronix/btm&quot;&gt;Bitronix&lt;/a&gt; embedded transaction manager is also provided but it will be removed in a future release. JTA transactions are also supported when deploying to a suitable Java EE Application Server.</source>
          <target state="translated">通过使用&lt;a href=&quot;https://www.atomikos.com/&quot;&gt;Atomikos&lt;/a&gt;嵌入式事务管理器，Spring Boot支持跨多个XA资源的分布式JTA事务。还提供了不支持使用&lt;a href=&quot;https://github.com/bitronix/btm&quot;&gt;Bitronix&lt;/a&gt;嵌入式事务管理器的支持，但在将来的版本中将删除该支持。部署到合适的Java EE应用程序服务器时，还支持JTA事务。</target>
        </trans-unit>
        <trans-unit id="15bad04e00c2e31130d522ce1fbce9bf2fb80e68" translate="yes" xml:space="preserve">
          <source>Spring Boot supports hot swapping. This section answers questions about how it works.</source>
          <target state="translated">Spring Boot 支持热插拔。本节将回答有关其工作原理的问题。</target>
        </trans-unit>
        <trans-unit id="048ac7bd4d8016d1d0885262f75257b03162e57c" translate="yes" xml:space="preserve">
          <source>Spring Boot supports localized messages so that your application can cater to users of different language preferences. By default, Spring Boot looks for the presence of a &lt;code&gt;messages&lt;/code&gt; resource bundle at the root of the classpath.</source>
          <target state="translated">Spring Boot支持本地化消息，因此您的应用程序可以迎合不同语言首选项的用户。默认情况下，Spring Boot在类路径的根目录下查找 &lt;code&gt;messages&lt;/code&gt; 资源包的存在。</target>
        </trans-unit>
        <trans-unit id="3b721b4e685be94da65157ebb208ce99c16a821c" translate="yes" xml:space="preserve">
          <source>Spring Boot supports multi-document YAML and Properties files (see &lt;a href=&quot;spring-boot-features#boot-features-external-config-files-multi-document&quot;&gt;spring-boot-features.html&lt;/a&gt; for details) which can be activated conditionally based on the active profiles.</source>
          <target state="translated">Spring Boot支持多文档的YAML和属性文件（有关详细信息，请参见&lt;a href=&quot;spring-boot-features#boot-features-external-config-files-multi-document&quot;&gt;spring-boot-features.html&lt;/a&gt;），可以根据活动的配置文件有条件地对其进行激活。</target>
        </trans-unit>
        <trans-unit id="d85ba04ccdbe6eb2294c7e09eb50ab6f7d72687e" translate="yes" xml:space="preserve">
          <source>Spring Boot supports several clients:</source>
          <target state="translated">Spring Boot支持多个客户端。</target>
        </trans-unit>
        <trans-unit id="d0d4ffe77efc05cb1e4271722b1fed9eb88ade39" translate="yes" xml:space="preserve">
          <source>Spring Boot supports the following embedded servlet containers:</source>
          <target state="translated">Spring Boot支持以下嵌入式servlet容器。</target>
        </trans-unit>
        <trans-unit id="3e202826a44c91bb636523007aff65525671ea41" translate="yes" xml:space="preserve">
          <source>Spring Boot supports traditional deployment as well as more modern forms of deployment. This section answers common questions about traditional deployment.</source>
          <target state="translated">Spring Boot支持传统部署以及更现代的部署形式。本节回答了有关传统部署的常见问题。</target>
        </trans-unit>
        <trans-unit id="cdfd80a2c97d67ca96b2d3a0770ba2b86c480d54" translate="yes" xml:space="preserve">
          <source>Spring Boot supports two higher-level migration tools: &lt;a href=&quot;https://flywaydb.org/&quot;&gt;Flyway&lt;/a&gt; and &lt;a href=&quot;https://www.liquibase.org/&quot;&gt;Liquibase&lt;/a&gt;.</source>
          <target state="translated">春天引导支持两种更高级别的迁移工具：&lt;a href=&quot;https://flywaydb.org/&quot;&gt;迁飞&lt;/a&gt;和&lt;a href=&quot;https://www.liquibase.org/&quot;&gt;Liquibase&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6b850d835ed1677bd837d9486e9e4c11c15cf016" translate="yes" xml:space="preserve">
          <source>Spring Boot takes a &lt;a href=&quot;appendix-executable-jar-format#executable-jar&quot;&gt;different approach&lt;/a&gt; and lets you actually nest jars directly.</source>
          <target state="translated">Spring Boot采用了&lt;a href=&quot;appendix-executable-jar-format#executable-jar&quot;&gt;另一种方法&lt;/a&gt;，实际上允许您直接嵌套jar。</target>
        </trans-unit>
        <trans-unit id="6734809ded5889ee8cdf87658dc1d09ef4c95ba8" translate="yes" xml:space="preserve">
          <source>Spring Boot tries as much as possible to expose common settings, but this is not always possible. For those cases, dedicated namespaces offer server-specific customizations (see &lt;code&gt;server.tomcat&lt;/code&gt; and &lt;code&gt;server.undertow&lt;/code&gt;). For instance, &lt;a href=&quot;howto#howto-configure-accesslogs&quot;&gt;access logs&lt;/a&gt; can be configured with specific features of the embedded servlet container.</source>
          <target state="translated">Spring Boot尝试尽可能多地公开通用设置，但这并不总是可能的。对于这些情况，专用名称空间提供了特定于服务器的自定义项（请参阅 &lt;code&gt;server.tomcat&lt;/code&gt; 和 &lt;code&gt;server.undertow&lt;/code&gt; ）。例如，可以使用嵌入式servlet容器的特定功能来配置&lt;a href=&quot;howto#howto-configure-accesslogs&quot;&gt;访问日志&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b4ae16fdd4ca02a6ea3d68169bd1ebb56b00edb1" translate="yes" xml:space="preserve">
          <source>Spring Boot tries to guess the location of your &lt;code&gt;@Entity&lt;/code&gt; definitions, based on the &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; it finds. To get more control, you can use the &lt;code&gt;@EntityScan&lt;/code&gt; annotation, as shown in the following example:</source>
          <target state="translated">Spring Boot会根据发现的 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 尝试猜测 &lt;code&gt;@Entity&lt;/code&gt; 定义的位置。要获得更多控制，可以使用 &lt;code&gt;@EntityScan&lt;/code&gt; 批注，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="63fcf760535f423574cd50b3666c929d661d9454" translate="yes" xml:space="preserve">
          <source>Spring Boot tries to guess the location of your &lt;code&gt;@Repository&lt;/code&gt; definitions, based on the &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; it finds. To get more control, use the &lt;code&gt;@EnableJpaRepositories&lt;/code&gt; annotation (from Spring Data JPA).</source>
          <target state="translated">春天开机试图猜测你的位置 &lt;code&gt;@Repository&lt;/code&gt; 定义的基础上， &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 找到。要获得更多控制权，请使用 &lt;code&gt;@EnableJpaRepositories&lt;/code&gt; 批注（来自Spring Data JPA）。</target>
        </trans-unit>
        <trans-unit id="7c2686208ca45361b8dc7e25588bf07632242c7d" translate="yes" xml:space="preserve">
          <source>Spring Boot uses &lt;a href=&quot;https://commons.apache.org/logging&quot;&gt;Commons Logging&lt;/a&gt; for all internal logging but leaves the underlying log implementation open. Default configurations are provided for &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/logging/package-summary.html&quot;&gt;Java Util Logging&lt;/a&gt;, &lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot;&gt;Log4J2&lt;/a&gt;, and &lt;a href=&quot;https://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt;. In each case, loggers are pre-configured to use console output with optional file output also available.</source>
          <target state="translated">Spring Boot使用&lt;a href=&quot;https://commons.apache.org/logging&quot;&gt;Commons Logging&lt;/a&gt;进行所有内部日志记录，但是使底层日志实现保持打开状态。提供了&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/logging/package-summary.html&quot;&gt;Java Util Logging&lt;/a&gt;，&lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot;&gt;Log4J2&lt;/a&gt;和&lt;a href=&quot;https://logback.qos.ch/&quot;&gt;Logback的&lt;/a&gt;默认配置。在每种情况下，记录器都已预先配置为使用控制台输出，同时还提供可选文件输出。</target>
        </trans-unit>
        <trans-unit id="394ac3fc72bce4878dafe254e2e10844e86a34da" translate="yes" xml:space="preserve">
          <source>Spring Boot uses a very particular &lt;code&gt;PropertySource&lt;/code&gt; order that is designed to allow sensible overriding of values. Properties are considered in the following order (with values from lower items overriding earlier ones):</source>
          <target state="translated">Spring Boot使用一个非常特殊的 &lt;code&gt;PropertySource&lt;/code&gt; 顺序，该顺序旨在允许合理地覆盖值。按以下顺序考虑属性（来自较低项目的值覆盖先前的值）：</target>
        </trans-unit>
        <trans-unit id="9800f7a1d04e756513a7b45c87ee40a5737fe1ab" translate="yes" xml:space="preserve">
          <source>Spring Boot uses an annotation processor to collect the conditions on auto-configurations in a metadata file (&lt;code&gt;META-INF/spring-autoconfigure-metadata.properties&lt;/code&gt;). If that file is present, it is used to eagerly filter auto-configurations that do not match, which will improve startup time. It is recommended to add the following dependency in a module that contains auto-configurations:</source>
          <target state="translated">Spring Boot使用注释处理器来收集元数据文件（ &lt;code&gt;META-INF/spring-autoconfigure-metadata.properties&lt;/code&gt; ）中自动配置的条件。如果存在该文件，它将用于急切过滤不匹配的自动配置，这将缩短启动时间。建议在包含自动配置的模块中添加以下依赖项：</target>
        </trans-unit>
        <trans-unit id="28136d7e0ded63b68cc356eca07189a0283be6b7" translate="yes" xml:space="preserve">
          <source>Spring Boot uses sensible defaults for such keys: any key ending with the word &quot;password&quot;, &quot;secret&quot;, &quot;key&quot;, &quot;token&quot;, &quot;vcap_services&quot;, &quot;sun.java.command&quot; is entirely sanitized. Additionally, any key that holds the word &lt;code&gt;credentials&lt;/code&gt; as part of the key is sanitized (configured as a regular expression, i.e. &lt;code&gt;*credentials.*&lt;/code&gt;).</source>
          <target state="translated">Spring Boot对此类密钥使用合理的默认值：以单词&amp;ldquo; password&amp;rdquo;，&amp;ldquo; secret&amp;rdquo;，&amp;ldquo; key&amp;rdquo;，&amp;ldquo; token&amp;rdquo;，&amp;ldquo; vcap_services&amp;rdquo;，&amp;ldquo; sun.java.command&amp;rdquo;结尾的任何密钥都已完全清除。此外，任何保存单词 &lt;code&gt;credentials&lt;/code&gt; 作为密钥一部分的密钥都将被清除（配置为正则表达式，即 &lt;code&gt;*credentials.*&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="9458fe10700af4a8a49c1834d407cae6c1d7a9c9" translate="yes" xml:space="preserve">
          <source>Spring Boot uses some relaxed rules for binding &lt;code&gt;Environment&lt;/code&gt; properties to &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans, so there does not need to be an exact match between the &lt;code&gt;Environment&lt;/code&gt; property name and the bean property name. Common examples where this is useful include dash-separated environment properties (for example, &lt;code&gt;context-path&lt;/code&gt; binds to &lt;code&gt;contextPath&lt;/code&gt;), and capitalized environment properties (for example, &lt;code&gt;PORT&lt;/code&gt; binds to &lt;code&gt;port&lt;/code&gt;).</source>
          <target state="translated">Spring Boot使用一些宽松的规则将 &lt;code&gt;Environment&lt;/code&gt; 属性绑定到 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; bean，因此 &lt;code&gt;Environment&lt;/code&gt; 属性名称和bean属性名称之间不需要完全匹配。有用的常见示例包括破折号分隔的环境属性（例如， &lt;code&gt;context-path&lt;/code&gt; 绑定到 &lt;code&gt;contextPath&lt;/code&gt; ）和大写的环境属性（例如 &lt;code&gt;PORT&lt;/code&gt; 绑定到 &lt;code&gt;port&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2d70f2d8f4e909080304ef45038c22b7468a88eb" translate="yes" xml:space="preserve">
          <source>Spring Boot will also add any auto-configured registries to the global static composite registry on the &lt;code&gt;Metrics&lt;/code&gt; class unless you explicitly tell it not to:</source>
          <target state="translated">Spring Boot还会将任何自动配置的注册表添加到 &lt;code&gt;Metrics&lt;/code&gt; 类的全局静态复合注册表中，除非您明确告诉它不要：</target>
        </trans-unit>
        <trans-unit id="cfefd9c2122fa4d2d6100202a572ccfb7246dc06" translate="yes" xml:space="preserve">
          <source>Spring Boot will auto-configure Spring Data&amp;rsquo;s JDBC repositories when the necessary dependencies are on the classpath. They can be added to your project with a single dependency on &lt;code&gt;spring-boot-starter-data-jdbc&lt;/code&gt;. If necessary, you can take control of Spring Data JDBC&amp;rsquo;s configuration by adding the &lt;code&gt;@EnableJdbcRepositories&lt;/code&gt; annotation or a &lt;code&gt;JdbcConfiguration&lt;/code&gt; subclass to your application.</source>
          <target state="translated">当必要的依赖项位于类路径上时，Spring Boot将自动配置Spring Data的JDBC存储库。可以将它们添加到您的项目中，而只需依赖 &lt;code&gt;spring-boot-starter-data-jdbc&lt;/code&gt; 即可。如有必要，您可以通过向应用程序添加 &lt;code&gt;@EnableJdbcRepositories&lt;/code&gt; 批注或 &lt;code&gt;JdbcConfiguration&lt;/code&gt; 子类来控制Spring Data JDBC的配置。</target>
        </trans-unit>
        <trans-unit id="ccb093643a69d4478accb621864a84b9ff98f744" translate="yes" xml:space="preserve">
          <source>Spring Boot will auto-configure the Spring Messaging infrastructure for RSocket.</source>
          <target state="translated">Spring Boot将为RSocket自动配置Spring Messaging基础架构。</target>
        </trans-unit>
        <trans-unit id="2e0321ab8e9f4cf45f89088bf4943f83dfb6bd38" translate="yes" xml:space="preserve">
          <source>Spring Boot will auto-detect which &lt;code&gt;ClientHttpConnector&lt;/code&gt; to use to drive &lt;code&gt;WebClient&lt;/code&gt;, depending on the libraries available on the application classpath. For now, Reactor Netty and Jetty RS client are supported.</source>
          <target state="translated">Spring Boot会根据应用程序类路径上可用的库自动检测要使用哪个 &lt;code&gt;ClientHttpConnector&lt;/code&gt; 来驱动 &lt;code&gt;WebClient&lt;/code&gt; 。目前，还支持Reactor Netty和Jetty RS客户端。</target>
        </trans-unit>
        <trans-unit id="765881ed9c79f92ab2ed6d54b59a009e83f395d3" translate="yes" xml:space="preserve">
          <source>Spring Boot will automatically find and load &lt;code&gt;application.properties&lt;/code&gt; and &lt;code&gt;application.yaml&lt;/code&gt; files from the following locations when your application starts:</source>
          <target state="translated">当您的应用程序启动时，Spring Boot将从以下位置自动查找并加载 &lt;code&gt;application.properties&lt;/code&gt; 和 &lt;code&gt;application.yaml&lt;/code&gt; 文件：</target>
        </trans-unit>
        <trans-unit id="54e3a5c7894446cb165a802ce6482dbf20a232ab" translate="yes" xml:space="preserve">
          <source>Spring Boot will expose Hikari-specific settings to &lt;code&gt;spring.datasource.hikari&lt;/code&gt;. This example uses a more generic &lt;code&gt;configuration&lt;/code&gt; sub namespace as the example does not support multiple datasource implementations.</source>
          <target state="translated">Spring Boot会将Hikari特定的设置公开给 &lt;code&gt;spring.datasource.hikari&lt;/code&gt; 。本示例使用更通用的 &lt;code&gt;configuration&lt;/code&gt; 子名称空间，因为该示例不支持多个数据源实现。</target>
        </trans-unit>
        <trans-unit id="0857fcf79b5d9b35471f70254dc31249829d9633" translate="yes" xml:space="preserve">
          <source>Spring Boot will not search for or use a &lt;code&gt;META-INF/persistence.xml&lt;/code&gt; by default. If you prefer to use a traditional &lt;code&gt;persistence.xml&lt;/code&gt;, you need to define your own &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;LocalEntityManagerFactoryBean&lt;/code&gt; (with an ID of &amp;lsquo;entityManagerFactory&amp;rsquo;) and set the persistence unit name there.</source>
          <target state="translated">默认情况下，Spring Boot不会搜索或使用 &lt;code&gt;META-INF/persistence.xml&lt;/code&gt; 。如果您更喜欢使用传统的 &lt;code&gt;persistence.xml&lt;/code&gt; ，则需要定义自己的 &lt;code&gt;@Bean&lt;/code&gt; 类型的 &lt;code&gt;LocalEntityManagerFactoryBean&lt;/code&gt; （ID为'entityManagerFactory'）并在其中设置持久性单元名称。</target>
        </trans-unit>
        <trans-unit id="979c88522e5cdda8a3ccc39c4fcaccce4a21dd3d" translate="yes" xml:space="preserve">
          <source>Spring Boot&amp;rsquo;s actuator module includes additional support that is activated when you deploy to a compatible Cloud Foundry instance. The &lt;code&gt;/cloudfoundryapplication&lt;/code&gt; path provides an alternative secured route to all &lt;code&gt;@Endpoint&lt;/code&gt; beans.</source>
          <target state="translated">Spring Boot的执行器模块包括额外的支持，当您将其部署到兼容的Cloud Foundry实例时，便会激活该支持。的 &lt;code&gt;/cloudfoundryapplication&lt;/code&gt; 路径提供对所有的替代路线担保 &lt;code&gt;@Endpoint&lt;/code&gt; 豆。</target>
        </trans-unit>
        <trans-unit id="f976c600b01ce3aff4b74b983afe045c1e737664" translate="yes" xml:space="preserve">
          <source>Spring Boot&amp;rsquo;s auto-configuration system works well for applications but can sometimes be a little too much for tests. It often helps to load only the parts of the configuration that are required to test a &amp;ldquo;slice&amp;rdquo; of your application. For example, you might want to test that Spring MVC controllers are mapping URLs correctly, and you do not want to involve database calls in those tests, or you might want to test JPA entities, and you are not interested in the web layer when those tests run.</source>
          <target state="translated">Spring Boot的自动配置系统对应用程序非常有效，但有时对于测试来说可能有点过多。它通常仅有助于加载测试应用程序&amp;ldquo;切片&amp;rdquo;所需的配置部分。例如，您可能想要测试Spring MVC控制器是否正确映射了URL，并且您不想在这些测试中涉及数据库调用，或者您想要测试JPA实体，并且对那些JPA实体不感兴趣。测试运行。</target>
        </trans-unit>
        <trans-unit id="3290b4bb951629d5e479c3a8436f07c542a22acd" translate="yes" xml:space="preserve">
          <source>Spring Boot&amp;rsquo;s configuration file handling is quite flexible, and it is often the case that properties may exist that are not bound to a &lt;code&gt;@ConfigurationProperties&lt;/code&gt; bean. You may also need to tune some attributes of an existing key. To support such cases and let you provide custom &quot;hints&quot;, the annotation processor automatically merges items from &lt;code&gt;META-INF/additional-spring-configuration-metadata.json&lt;/code&gt; into the main metadata file.</source>
          <target state="translated">Spring Boot的配置文件处理非常灵活，通常情况下可能存在未绑定到 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; bean的属性。您可能还需要调整现有键的某些属性。为了支持这种情况，并允许您提供自定义的&amp;ldquo;提示&amp;rdquo;，注释处理器会自动将 &lt;code&gt;META-INF/additional-spring-configuration-metadata.json&lt;/code&gt; 中的项目合并到主元数据文件中。</target>
        </trans-unit>
        <trans-unit id="376e53763e49ae2bf77f86a90d735b2b79bc4f1f" translate="yes" xml:space="preserve">
          <source>Spring Boot&amp;rsquo;s executable jars are ready-made for most popular cloud PaaS (Platform-as-a-Service) providers. These providers tend to require that you &amp;ldquo;bring your own container&amp;rdquo;. They manage application processes (not Java applications specifically), so they need an intermediary layer that adapts &lt;em&gt;your&lt;/em&gt; application to the &lt;em&gt;cloud&amp;rsquo;s&lt;/em&gt; notion of a running process.</source>
          <target state="translated">Spring Boot的可执行jar已为大多数流行的云PaaS（平台即服务）提供程序准备就绪。这些提供程序往往要求您&amp;ldquo;自带容器&amp;rdquo;。他们管理应用程序流程（不是专门用于Java应用程序），因此他们需要一个中间层，以使&lt;em&gt;您的&lt;/em&gt;应用程序适应&lt;em&gt;云&lt;/em&gt;中正在运行的流程&lt;em&gt;的&lt;/em&gt;概念。</target>
        </trans-unit>
        <trans-unit id="3b0df70ddd30c5d67b076d1b9f2d72cec17b675d" translate="yes" xml:space="preserve">
          <source>Spring Boot&amp;rsquo;s executable jars, their launchers, and their format.</source>
          <target state="translated">Spring Boot的可执行jar，它们的启动器及其格式。</target>
        </trans-unit>
        <trans-unit id="464675961c19dbbe49963a84b80d70b31f8e329c" translate="yes" xml:space="preserve">
          <source>Spring Boot&amp;rsquo;s flexible packaging options provide a great deal of choice when it comes to deploying your application. You can deploy Spring Boot applications to a variety of cloud platforms, to container images (such as Docker), or to virtual/real machines.</source>
          <target state="translated">当部署应用程序时，Spring Boot的灵活打包选项提供了很多选择。您可以将Spring Boot应用程序部署到各种云平台，容器映像（例如Docker）或虚拟机/真实机上。</target>
        </trans-unit>
        <trans-unit id="256d2d0657d07ac96026c5f2e3717a27577c5966" translate="yes" xml:space="preserve">
          <source>Spring Boot&amp;rsquo;s relaxed binding rules are, as much as possible, designed to be compatible with these naming restrictions.</source>
          <target state="translated">Spring Boot的宽松绑定规则尽可能地被设计为与这些命名限制兼容。</target>
        </trans-unit>
        <trans-unit id="0f98a25355b6177b34c4237af6532f092aaa1cfd" translate="yes" xml:space="preserve">
          <source>Spring Boot’s auto-configuration mechanism</source>
          <target state="translated">Spring Boot的自动配置机制</target>
        </trans-unit>
        <trans-unit id="79e4ee3e3bb5e1700a9821616ecd6db1f140a397" translate="yes" xml:space="preserve">
          <source>Spring Boot’s developer tools</source>
          <target state="translated">Spring Boot的开发工具</target>
        </trans-unit>
        <trans-unit id="6eae695eccef57991b43f632f138d391d752d3f4" translate="yes" xml:space="preserve">
          <source>Spring Boot’s syntax</source>
          <target state="translated">Spring Boot的语法</target>
        </trans-unit>
        <trans-unit id="c49ba2b94c8e3bf8ae4751cec9baa9bf3b265678" translate="yes" xml:space="preserve">
          <source>Spring Data JPA already provides some vendor-independent configuration options (such as those for SQL logging), and Spring Boot exposes those options and a few more for Hibernate as external configuration properties. Some of them are automatically detected according to the context so you should not have to set them.</source>
          <target state="translated">Spring Data JPA已经提供了一些独立于厂商的配置选项(如SQL日志的配置选项),Spring Boot将这些选项和Hibernate的一些选项作为外部配置属性公开。其中一些是根据上下文自动检测的,所以你应该不必设置它们。</target>
        </trans-unit>
        <trans-unit id="86d98af27c6fb4d7546f6d31e4f99e4cdd27e21e" translate="yes" xml:space="preserve">
          <source>Spring Data JPA and Spring Data Mongo can both automatically create &lt;code&gt;Repository&lt;/code&gt; implementations for you. If they are both present on the classpath, you might have to do some extra configuration to tell Spring Boot which repositories to create. The most explicit way to do that is to use the standard Spring Data &lt;code&gt;@EnableJpaRepositories&lt;/code&gt; and &lt;code&gt;@EnableMongoRepositories&lt;/code&gt; annotations and provide the location of your &lt;code&gt;Repository&lt;/code&gt; interfaces.</source>
          <target state="translated">Spring Data JPA和Spring Data Mongo都可以为您自动创建 &lt;code&gt;Repository&lt;/code&gt; 实现。如果它们都存在于类路径中，则可能必须做一些额外的配置以告诉Spring Boot要创建哪个存储库。最明确的方法是使用标准Spring Data &lt;code&gt;@EnableJpaRepositories&lt;/code&gt; 和 &lt;code&gt;@EnableMongoRepositories&lt;/code&gt; 批注并提供 &lt;code&gt;Repository&lt;/code&gt; 接口的位置。</target>
        </trans-unit>
        <trans-unit id="b87a33e249218900767715a7366336d066591166" translate="yes" xml:space="preserve">
          <source>Spring Data JPA repositories support three different modes of bootstrapping: default, deferred, and lazy. To enable deferred or lazy bootstrapping, set the &lt;code&gt;spring.data.jpa.repositories.bootstrap-mode&lt;/code&gt; property to &lt;code&gt;deferred&lt;/code&gt; or &lt;code&gt;lazy&lt;/code&gt; respectively. When using deferred or lazy bootstrapping, the auto-configured &lt;code&gt;EntityManagerFactoryBuilder&lt;/code&gt; will use the context&amp;rsquo;s &lt;code&gt;AsyncTaskExecutor&lt;/code&gt;, if any, as the bootstrap executor. If more than one exists, the one named &lt;code&gt;applicationTaskExecutor&lt;/code&gt; will be used.</source>
          <target state="translated">Spring Data JPA存储库支持三种不同的引导模式：默认，延迟和延迟。要启用延迟引导或延迟引导，请将 &lt;code&gt;spring.data.jpa.repositories.bootstrap-mode&lt;/code&gt; 属性分别设置为 &lt;code&gt;deferred&lt;/code&gt; 或 &lt;code&gt;lazy&lt;/code&gt; 。使用延迟引导或延迟引导时，自动配置的 &lt;code&gt;EntityManagerFactoryBuilder&lt;/code&gt; 将使用上下文的 &lt;code&gt;AsyncTaskExecutor&lt;/code&gt; （如果有）作为引导执行器。如果存在多个，则将使用一个名为 &lt;code&gt;applicationTaskExecutor&lt;/code&gt; 的应用程序。</target>
        </trans-unit>
        <trans-unit id="dcb4ed8ee2d703365a2dac323c06b5b6af7ffbb9" translate="yes" xml:space="preserve">
          <source>Spring Data JPA: Helps you to implement JPA-based repositories.</source>
          <target state="translated">Spring Data JPA:帮助你实现基于JPA的存储库。</target>
        </trans-unit>
        <trans-unit id="74b97d7f4b3ded02cea5003387f53d6658e1bc66" translate="yes" xml:space="preserve">
          <source>Spring Data Neo4j shares the common infrastructure with Spring Data JPA as many other Spring Data modules do. You could take the JPA example from earlier and define &lt;code&gt;City&lt;/code&gt; as Spring Data Neo4j &lt;code&gt;@Node&lt;/code&gt; rather than JPA &lt;code&gt;@Entity&lt;/code&gt; and the repository abstraction works in the same way, as shown in the following example:</source>
          <target state="translated">Spring Data Neo4j与许多其他Spring Data模块一样，与Spring Data JPA共享公共基础结构。您可以使用前面的JPA示例，并将 &lt;code&gt;City&lt;/code&gt; 定义为Spring Data Neo4j &lt;code&gt;@Node&lt;/code&gt; 而不是JPA &lt;code&gt;@Entity&lt;/code&gt; ，并且存储库抽象以相同的方式工作，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="a7c93188a33543982387b1f354d321146d922a82" translate="yes" xml:space="preserve">
          <source>Spring Data REST can expose the &lt;code&gt;Repository&lt;/code&gt; implementations as REST endpoints for you, provided Spring MVC has been enabled for the application.</source>
          <target state="translated">如果已为应用程序启用了Spring MVC，则Spring Data REST可以为您将 &lt;code&gt;Repository&lt;/code&gt; 实现作为REST端点公开。</target>
        </trans-unit>
        <trans-unit id="c533c8b1f40c9cf01bcddeaf22ee75bf29ac4f86" translate="yes" xml:space="preserve">
          <source>Spring Data can create implementations of &lt;code&gt;@Repository&lt;/code&gt; interfaces of various flavors. Spring Boot handles all of that for you, as long as those &lt;code&gt;@Repositories&lt;/code&gt; are included in the same package (or a sub-package) of your &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; class.</source>
          <target state="translated">Spring Data可以创建各种风格的 &lt;code&gt;@Repository&lt;/code&gt; 接口的实现。只要那些 &lt;code&gt;@Repositories&lt;/code&gt; 包含在 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 类的同一包（或子包）中，Spring Boot就会为您处理所有这些操作。</target>
        </trans-unit>
        <trans-unit id="8ade1900ed248d815792daceb76ce5b75ad9e9fb" translate="yes" xml:space="preserve">
          <source>Spring Data includes basic repository support for Cassandra. Currently, this is more limited than the JPA repositories discussed earlier and needs to annotate finder methods with &lt;code&gt;@Query&lt;/code&gt;.</source>
          <target state="translated">Spring Data包括对Cassandra的基本存储库支持。当前，这比前面讨论的JPA存储库受到更多限制，并且需要使用 &lt;code&gt;@Query&lt;/code&gt; 注释finder方法。</target>
        </trans-unit>
        <trans-unit id="f4212d4403992d5a5b5ab7567d2d13edec58e03b" translate="yes" xml:space="preserve">
          <source>Spring Data includes repository support for Apache Solr. As with the JPA repositories discussed earlier, the basic principle is that queries are automatically constructed for you based on method names.</source>
          <target state="translated">Spring Data包含对Apache Solr的仓库支持。与前面讨论的JPA存储库一样,基本原则是根据方法名自动为您构造查询。</target>
        </trans-unit>
        <trans-unit id="44f0c6e6aaf876a2d1758b840b07ae8e8e0ab480" translate="yes" xml:space="preserve">
          <source>Spring Data includes repository support for Couchbase. For complete details of Spring Data Couchbase, refer to the &lt;a href=&quot;https://docs.spring.io/spring-data/couchbase/docs/4.1.1/reference/html/&quot;&gt;reference documentation&lt;/a&gt;.</source>
          <target state="translated">Spring Data包括对Couchbase的存储库支持。有关Spring Data Couchbase的完整详细信息，请&lt;a href=&quot;https://docs.spring.io/spring-data/couchbase/docs/4.1.1/reference/html/&quot;&gt;参考参考文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2422803ffd647ad434c6c996a5b4ecd15f0bbf92" translate="yes" xml:space="preserve">
          <source>Spring Data includes repository support for Elasticsearch. As with the JPA repositories discussed earlier, the basic principle is that queries are constructed for you automatically based on method names.</source>
          <target state="translated">Spring Data包含对Elasticsearch的仓库支持。与前面讨论的JPA存储库一样,基本原理是根据方法名自动为你构造查询。</target>
        </trans-unit>
        <trans-unit id="a5843e401a9b6c94a8c78820bc412b1bdcb50ae0" translate="yes" xml:space="preserve">
          <source>Spring Data includes repository support for JDBC and will automatically generate SQL for the methods on &lt;code&gt;CrudRepository&lt;/code&gt;. For more advanced queries, a &lt;code&gt;@Query&lt;/code&gt; annotation is provided.</source>
          <target state="translated">Spring Data包括对JDBC的存储库支持，并将为 &lt;code&gt;CrudRepository&lt;/code&gt; 上的方法自动生成SQL 。对于更高级的查询，提供了 &lt;code&gt;@Query&lt;/code&gt; 批注。</target>
        </trans-unit>
        <trans-unit id="1ecd38b3e8d9cf01d3b1ee0fbfe28bbde550de37" translate="yes" xml:space="preserve">
          <source>Spring Data includes repository support for LDAP. For complete details of Spring Data LDAP, refer to the &lt;a href=&quot;https://docs.spring.io/spring-data/ldap/docs/1.0.x/reference/html/&quot;&gt;reference documentation&lt;/a&gt;.</source>
          <target state="translated">Spring Data包括对LDAP的存储库支持。有关Spring Data LDAP的完整详细信息，请&lt;a href=&quot;https://docs.spring.io/spring-data/ldap/docs/1.0.x/reference/html/&quot;&gt;参考参考文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9cb22581fd1f8403357237df5659e73f93e54e32" translate="yes" xml:space="preserve">
          <source>Spring Data includes repository support for MongoDB. As with the JPA repositories discussed earlier, the basic principle is that queries are constructed automatically, based on method names.</source>
          <target state="translated">Spring Data包含对MongoDB的仓库支持。与前面讨论的JPA存储库一样,基本原则是根据方法名自动构造查询。</target>
        </trans-unit>
        <trans-unit id="6c2e68d3a68251400bad57e3875058f1eab859c2" translate="yes" xml:space="preserve">
          <source>Spring Data includes repository support for Neo4j. For complete details of Spring Data Neo4j, refer to the &lt;a href=&quot;https://docs.spring.io/spring-data/neo4j/docs/6.0.1/reference/html/&quot;&gt;reference documentation&lt;/a&gt;.</source>
          <target state="translated">Spring Data包括对Neo4j的存储库支持。有关Spring Data Neo4j的完整详细信息，请&lt;a href=&quot;https://docs.spring.io/spring-data/neo4j/docs/6.0.1/reference/html/&quot;&gt;参考参考文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e705248b11b8109b630128feecde5ae331b694d5" translate="yes" xml:space="preserve">
          <source>Spring Data provides additional projects that help you access a variety of NoSQL technologies, including:</source>
          <target state="translated">Spring Data提供了更多的项目,帮助你访问各种NoSQL技术,包括。</target>
        </trans-unit>
        <trans-unit id="774e4b0ae71dce41b66bd40f45e378c34df1758a" translate="yes" xml:space="preserve">
          <source>Spring Data provides web support that simplifies the use of Spring Data repositories in a web application. Spring Boot provides properties in the &lt;code&gt;spring.data.web&lt;/code&gt; namespace for customizing its configuration. Note that if you are using Spring Data REST, you must use the properties in the &lt;code&gt;spring.data.rest&lt;/code&gt; namespace instead.</source>
          <target state="translated">Spring Data提供了Web支持，可简化Web应用程序中Spring Data存储库的使用。Spring Boot在 &lt;code&gt;spring.data.web&lt;/code&gt; 命名空间中提供了用于自定义其配置的属性。请注意，如果您使用的是Spring Data REST，则必须改为使用 &lt;code&gt;spring.data.rest&lt;/code&gt; 命名空间中的属性。</target>
        </trans-unit>
        <trans-unit id="b1868d13c30c5954be6be4b25c38e5dfcb41cbbf" translate="yes" xml:space="preserve">
          <source>Spring Data repositories usually extend from the &lt;a href=&quot;https://docs.spring.io/spring-data/commons/docs/2.4.1/api/org/springframework/data/repository/Repository.html&quot;&gt;&lt;code&gt;Repository&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.spring.io/spring-data/commons/docs/2.4.1/api/org/springframework/data/repository/CrudRepository.html&quot;&gt;&lt;code&gt;CrudRepository&lt;/code&gt;&lt;/a&gt; interfaces. If you use auto-configuration, repositories are searched from the package containing your main configuration class (the one annotated with &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; or &lt;code&gt;@SpringBootApplication&lt;/code&gt;) down.</source>
          <target state="translated">Spring Data存储库通常从&lt;a href=&quot;https://docs.spring.io/spring-data/commons/docs/2.4.1/api/org/springframework/data/repository/Repository.html&quot;&gt; &lt;code&gt;Repository&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;https://docs.spring.io/spring-data/commons/docs/2.4.1/api/org/springframework/data/repository/CrudRepository.html&quot;&gt; &lt;code&gt;CrudRepository&lt;/code&gt; &lt;/a&gt;接口扩展。如果您使用自动配置，则会从包含主配置类（用 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 或 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 注释的主配置类）的包中搜索存储库。</target>
        </trans-unit>
        <trans-unit id="5073fd024ba205489148617f8bae018ee551b8cd" translate="yes" xml:space="preserve">
          <source>Spring Environment</source>
          <target state="translated">春季环境</target>
        </trans-unit>
        <trans-unit id="9aa64903a4e144743b5224e8a786c6ce5cd77df5" translate="yes" xml:space="preserve">
          <source>Spring Framework 4.0 has native support for a &lt;code&gt;beans{}&lt;/code&gt; &amp;ldquo;DSL&amp;rdquo; (borrowed from &lt;a href=&quot;https://grails.org/&quot;&gt;Grails&lt;/a&gt;), and you can embed bean definitions in your Groovy application scripts by using the same format. This is sometimes a good way to include external features like middleware declarations, as shown in the following example:</source>
          <target state="translated">Spring Framework 4.0对 &lt;code&gt;beans{}&lt;/code&gt; &amp;ldquo; DSL&amp;rdquo;（从&lt;a href=&quot;https://grails.org/&quot;&gt;Grails&lt;/a&gt;借来）具有本地支持，您可以使用相同的格式将bean定义嵌入Groovy应用程序脚本中。有时，这是包括外部功能（如中间件声明）的好方法，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="a305d70bf79b46ec72d261407acb096f54be290f" translate="yes" xml:space="preserve">
          <source>Spring Framework 5 Kotlin APIs, the functional way</source>
          <target state="translated">Spring Framework 5 Kotlin APIs,功能之道</target>
        </trans-unit>
        <trans-unit id="11a6811cf61402c539ba432c0ca7cd3d36142ead" translate="yes" xml:space="preserve">
          <source>Spring Framework 5.0 provides a new &lt;code&gt;WebTestClient&lt;/code&gt; that works for &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-webflux-tests&quot;&gt;WebFlux integration tests&lt;/a&gt; and both &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-with-running-server&quot;&gt;WebFlux and MVC end-to-end testing&lt;/a&gt;. It provides a fluent API for assertions, unlike &lt;code&gt;TestRestTemplate&lt;/code&gt;.</source>
          <target state="translated">Spring Framework 5.0提供了一个新的 &lt;code&gt;WebTestClient&lt;/code&gt; ，可用于&lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-webflux-tests&quot;&gt;WebFlux集成测试&lt;/a&gt;以及&lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-with-running-server&quot;&gt;WebFlux和MVC端到端测试&lt;/a&gt;。与 &lt;code&gt;TestRestTemplate&lt;/code&gt; 不同，它为声明提供了一种流畅的API 。</target>
        </trans-unit>
        <trans-unit id="df86e5f0b3c20fa300866c593763433a69702164" translate="yes" xml:space="preserve">
          <source>Spring Framework has a &lt;code&gt;DataSize&lt;/code&gt; value type that expresses a size in bytes. If you expose a &lt;code&gt;DataSize&lt;/code&gt; property, the following formats in application properties are available:</source>
          <target state="translated">Spring Framework具有 &lt;code&gt;DataSize&lt;/code&gt; 值类型，以字节为单位表示大小。如果公开 &lt;code&gt;DataSize&lt;/code&gt; 属性，则应用程序属性中的以下格式可用：</target>
        </trans-unit>
        <trans-unit id="c11f2dad3b4f657bfccba212f37b226e4aab1388" translate="yes" xml:space="preserve">
          <source>Spring Framework provides &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#websocket&quot;&gt;rich WebSocket support&lt;/a&gt; for MVC web applications that can be easily accessed through the &lt;code&gt;spring-boot-starter-websocket&lt;/code&gt; module.</source>
          <target state="translated">Spring Framework为MVC Web应用程序提供了&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#websocket&quot;&gt;丰富的WebSocket支持&lt;/a&gt;，可以通过 &lt;code&gt;spring-boot-starter-websocket&lt;/code&gt; 模块轻松地对其进行访问。</target>
        </trans-unit>
        <trans-unit id="695ef61ec973fc1bc6d50f97d5e4c183111dfd29" translate="yes" xml:space="preserve">
          <source>Spring Framework provides two convenient classes that can be used to load YAML documents. The &lt;code&gt;YamlPropertiesFactoryBean&lt;/code&gt; loads YAML as &lt;code&gt;Properties&lt;/code&gt; and the &lt;code&gt;YamlMapFactoryBean&lt;/code&gt; loads YAML as a &lt;code&gt;Map&lt;/code&gt;.</source>
          <target state="translated">Spring Framework提供了两个方便的类，可用于加载YAML文档。该 &lt;code&gt;YamlPropertiesFactoryBean&lt;/code&gt; 负载YAML的 &lt;code&gt;Properties&lt;/code&gt; 和 &lt;code&gt;YamlMapFactoryBean&lt;/code&gt; 负载YAML的 &lt;code&gt;Map&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="33bb458d33509f4224f2a5382381f3185a7dd3e4" translate="yes" xml:space="preserve">
          <source>Spring Integration.</source>
          <target state="translated">Spring集成。</target>
        </trans-unit>
        <trans-unit id="32b008ac316de0a884e9a9935dbac281cb4da6fc" translate="yes" xml:space="preserve">
          <source>Spring MVC (client and server side) uses &lt;code&gt;HttpMessageConverters&lt;/code&gt; to negotiate content conversion in an HTTP exchange. If Jackson is on the classpath, you already get the default converter(s) provided by &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt;, an instance of which is auto-configured for you.</source>
          <target state="translated">Spring MVC（客户端和服务器端）使用 &lt;code&gt;HttpMessageConverters&lt;/code&gt; 来协商HTTP交换中的内容转换。如果Jackson在类路径中，则您已经获得了 &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; 提供的默认转换器，该转换器的实例已为您自动配置。</target>
        </trans-unit>
        <trans-unit id="446fd54436b024ffdd5c5f366916815e7c6883fd" translate="yes" xml:space="preserve">
          <source>Spring MVC + Embedded Tomcat.</source>
          <target state="translated">Spring MVC+Embedded Tomcat。</target>
        </trans-unit>
        <trans-unit id="ab53fc4fde47db9574bcb33b8332a34cd16c2b70" translate="yes" xml:space="preserve">
          <source>Spring MVC can map incoming HTTP requests to handlers by looking at the request path and matching it to the mappings defined in your application (for example, &lt;code&gt;@GetMapping&lt;/code&gt; annotations on Controller methods).</source>
          <target state="translated">Spring MVC可以通过查看请求路径并将其匹配到应用程序中定义的映射（例如，Controller方法上的 &lt;code&gt;@GetMapping&lt;/code&gt; 批注）来将传入的HTTP请求映射到处理程序。</target>
        </trans-unit>
        <trans-unit id="3289b359bda44dd5b241e729aa24ad983efd0be5" translate="yes" xml:space="preserve">
          <source>Spring MVC has a strategy for generating error codes for rendering error messages from binding errors: &lt;code&gt;MessageCodesResolver&lt;/code&gt;. If you set the &lt;code&gt;spring.mvc.message-codes-resolver-format&lt;/code&gt; property &lt;code&gt;PREFIX_ERROR_CODE&lt;/code&gt; or &lt;code&gt;POSTFIX_ERROR_CODE&lt;/code&gt;, Spring Boot creates one for you (see the enumeration in &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/validation/DefaultMessageCodesResolver.Format.html&quot;&gt;&lt;code&gt;DefaultMessageCodesResolver.Format&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Spring MVC有一个生成错误代码以从绑定错误中呈现错误消息的策略： &lt;code&gt;MessageCodesResolver&lt;/code&gt; 。如果您设置 &lt;code&gt;spring.mvc.message-codes-resolver-format&lt;/code&gt; 属性 &lt;code&gt;PREFIX_ERROR_CODE&lt;/code&gt; 或 &lt;code&gt;POSTFIX_ERROR_CODE&lt;/code&gt; ，Spring Boot会为您创建一个（请参阅&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/validation/DefaultMessageCodesResolver.Format.html&quot;&gt; &lt;code&gt;DefaultMessageCodesResolver.Format&lt;/code&gt; 中&lt;/a&gt;的枚举）。</target>
        </trans-unit>
        <trans-unit id="0b42115e397b37477d7a9c4a8475c71f24e50706" translate="yes" xml:space="preserve">
          <source>Spring MVC is part of the core Spring Framework, and detailed information is available in the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc&quot;&gt;reference documentation&lt;/a&gt;. There are also several guides that cover Spring MVC available at &lt;a href=&quot;https://spring.io/guides&quot;&gt;spring.io/guides&lt;/a&gt;.</source>
          <target state="translated">Spring MVC是核心Spring Framework的一部分，有关详细信息，请参阅&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc&quot;&gt;参考文档&lt;/a&gt;。在&lt;a href=&quot;https://spring.io/guides&quot;&gt;spring.io/guides&lt;/a&gt;上还有一些涵盖Spring MVC的指南。</target>
        </trans-unit>
        <trans-unit id="01e2fe49b9c72e2105c05b454a69813a71b53b37" translate="yes" xml:space="preserve">
          <source>Spring MVC uses a &lt;code&gt;WebBindingInitializer&lt;/code&gt; to initialize a &lt;code&gt;WebDataBinder&lt;/code&gt; for a particular request. If you create your own &lt;code&gt;ConfigurableWebBindingInitializer&lt;/code&gt;&lt;code&gt;@Bean&lt;/code&gt;, Spring Boot automatically configures Spring MVC to use it.</source>
          <target state="translated">Spring MVC使用 &lt;code&gt;WebBindingInitializer&lt;/code&gt; 来为特定请求初始化 &lt;code&gt;WebDataBinder&lt;/code&gt; 。如果您创建自己的 &lt;code&gt;ConfigurableWebBindingInitializer&lt;/code&gt; &lt;code&gt;@Bean&lt;/code&gt; ，则Spring Boot会自动将Spring MVC配置为使用它。</target>
        </trans-unit>
        <trans-unit id="9694617a3eba599acee486b37dd641ee55a0f4d1" translate="yes" xml:space="preserve">
          <source>Spring MVC uses the &lt;code&gt;HttpMessageConverter&lt;/code&gt; interface to convert HTTP requests and responses. Sensible defaults are included out of the box. For example, objects can be automatically converted to JSON (by using the Jackson library) or XML (by using the Jackson XML extension, if available, or by using JAXB if the Jackson XML extension is not available). By default, strings are encoded in &lt;code&gt;UTF-8&lt;/code&gt;.</source>
          <target state="translated">Spring MVC使用 &lt;code&gt;HttpMessageConverter&lt;/code&gt; 接口转换HTTP请求和响应。开箱即用中包含明智的默认设置。例如，可以将对象自动转换为JSON（通过使用Jackson库）或XML（通过使用Jackson XML扩展（如果可用）或通过使用JAXB（如果Jackson XML扩展不可用））。默认情况下，字符串以 &lt;code&gt;UTF-8&lt;/code&gt; 编码。</target>
        </trans-unit>
        <trans-unit id="3603fc1313aa68af5f5dff9bd8f80777c6766f12" translate="yes" xml:space="preserve">
          <source>Spring MVC view prefix.</source>
          <target state="translated">Spring MVC视图前缀。</target>
        </trans-unit>
        <trans-unit id="97b525d2b30c5008a5931d9895fc190655b26979" translate="yes" xml:space="preserve">
          <source>Spring MVC view suffix.</source>
          <target state="translated">Spring MVC视图后缀。</target>
        </trans-unit>
        <trans-unit id="d5766035e785d82041da45bef10ff9405abb733b" translate="yes" xml:space="preserve">
          <source>Spring ORM: Core ORM support from the Spring Framework.</source>
          <target state="translated">Spring ORM。Spring框架的核心ORM支持。</target>
        </trans-unit>
        <trans-unit id="bb8ce5a96bffb18063e5843dc5c69237468fbbcf" translate="yes" xml:space="preserve">
          <source>Spring Profiles provide a way to segregate parts of your application configuration and make it be available only in certain environments. Any &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Configuration&lt;/code&gt; or &lt;code&gt;@ConfigurationProperties&lt;/code&gt; can be marked with &lt;code&gt;@Profile&lt;/code&gt; to limit when it is loaded, as shown in the following example:</source>
          <target state="translated">Spring Profiles提供了一种隔离应用程序配置的各部分并使之仅在某些环境中可用的方法。任何 &lt;code&gt;@Component&lt;/code&gt; ， &lt;code&gt;@Configuration&lt;/code&gt; 或 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 都可以用 &lt;code&gt;@Profile&lt;/code&gt; 标记，以限制其加载时间，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="ea703b4deff4a15777c7b036785dff957b375e0b" translate="yes" xml:space="preserve">
          <source>Spring Security can be used to secure a Jersey-based web application in much the same way as it can be used to secure a Spring MVC-based web application. However, if you want to use Spring Security&amp;rsquo;s method-level security with Jersey, you must configure Jersey to use &lt;code&gt;setStatus(int)&lt;/code&gt; rather &lt;code&gt;sendError(int)&lt;/code&gt;. This prevents Jersey from committing the response before Spring Security has had an opportunity to report an authentication or authorization failure to the client.</source>
          <target state="translated">可以使用Spring Security来保护基于Jersey的Web应用程序，其方式与用来保护基于Spring MVC的Web应用程序的方式几乎相同。但是，如果您想通过Jersey使用Spring Security的方法级安全性，则必须将Jersey配置为使用 &lt;code&gt;setStatus(int)&lt;/code&gt; 而不是 &lt;code&gt;sendError(int)&lt;/code&gt; 。这可以防止Jersey在Spring Security有机会向客户端报告身份验证或授权失败之前提交响应。</target>
        </trans-unit>
        <trans-unit id="da16dccc0804ce9c9e41f86be61f5159e7d63bf4" translate="yes" xml:space="preserve">
          <source>Spring Security provides comprehensive integration with Spring MVC Test and this can also be used when testing controllers using the &lt;code&gt;@WebMvcTest&lt;/code&gt; slice and &lt;code&gt;MockMvc&lt;/code&gt;.</source>
          <target state="translated">Spring Security提供了与Spring MVC Test的全面集成，并且在使用 &lt;code&gt;@WebMvcTest&lt;/code&gt; slice和 &lt;code&gt;MockMvc&lt;/code&gt; 测试控制器时也可以使用它。</target>
        </trans-unit>
        <trans-unit id="9fd4b85e41885ac1f546c9b32e74103a903de4be" translate="yes" xml:space="preserve">
          <source>Spring Security provides support for running tests as a specific user. For example, the test in the snippet below will run with an authenticated user that has the &lt;code&gt;ADMIN&lt;/code&gt; role.</source>
          <target state="translated">Spring Security提供了对以特定用户身份运行测试的支持。例如，下面的代码段中的测试将与具有 &lt;code&gt;ADMIN&lt;/code&gt; 角色的经过身份验证的用户一起运行。</target>
        </trans-unit>
        <trans-unit id="5e0a9bcffd4b98e18506dafc37cebace9db7abcc" translate="yes" xml:space="preserve">
          <source>Spring Security.</source>
          <target state="translated">春季安全。</target>
        </trans-unit>
        <trans-unit id="b1847a71275d852ee082ce8115a11ed7bbca3564" translate="yes" xml:space="preserve">
          <source>Spring Transaction Management.</source>
          <target state="translated">春季交易管理。</target>
        </trans-unit>
        <trans-unit id="590a753e37e2d2d33c3442f7dc834783b697b3da" translate="yes" xml:space="preserve">
          <source>Spring WebFlux applications do not strictly depend on the Servlet API, so they cannot be deployed as war files and do not use the &lt;code&gt;src/main/webapp&lt;/code&gt; directory.</source>
          <target state="translated">Spring WebFlux应用程序不严格依赖Servlet API，因此不能将它们部署为war文件，也不使用 &lt;code&gt;src/main/webapp&lt;/code&gt; 目录。</target>
        </trans-unit>
        <trans-unit id="1bb5260092b8ba0b4a4ee76ee32d3df2f67693b6" translate="yes" xml:space="preserve">
          <source>Spring WebFlux comes in two flavors: functional and annotation-based. The annotation-based one is quite close to the Spring MVC model, as shown in the following example:</source>
          <target state="translated">Spring WebFlux有两种口味:功能型和基于注释的。基于注解的很接近Spring MVC模型,如下例所示。</target>
        </trans-unit>
        <trans-unit id="ecef2457df643e364260ef12bab7353551dfe3da" translate="yes" xml:space="preserve">
          <source>Spring WebFlux is the new reactive web framework introduced in Spring Framework 5.0. Unlike Spring MVC, it does not require the Servlet API, is fully asynchronous and non-blocking, and implements the &lt;a href=&quot;https://www.reactive-streams.org/&quot;&gt;Reactive Streams&lt;/a&gt; specification through &lt;a href=&quot;https://projectreactor.io/&quot;&gt;the Reactor project&lt;/a&gt;.</source>
          <target state="translated">Spring WebFlux是Spring Framework 5.0中引入的新的响应式Web框架。与Spring MVC不同，它不需要Servlet API，是完全异步且无阻塞的，并通过&lt;a href=&quot;https://projectreactor.io/&quot;&gt;Reactor项目&lt;/a&gt;实现&lt;a href=&quot;https://www.reactive-streams.org/&quot;&gt;Reactive Streams&lt;/a&gt;规范。</target>
        </trans-unit>
        <trans-unit id="75a2289268bda2e0ae6db2a1eb7ecc35c0811ebc" translate="yes" xml:space="preserve">
          <source>Spring WebFlux provides a &lt;code&gt;WebFilter&lt;/code&gt; interface that can be implemented to filter HTTP request-response exchanges. &lt;code&gt;WebFilter&lt;/code&gt; beans found in the application context will be automatically used to filter each exchange.</source>
          <target state="translated">弹簧WebFlux提供了一个 &lt;code&gt;WebFilter&lt;/code&gt; 界面可被实现为过滤器的HTTP请求-响应交换。在应用程序上下文中找到的 &lt;code&gt;WebFilter&lt;/code&gt; bean将自动用于过滤每个交换。</target>
        </trans-unit>
        <trans-unit id="6a289af723764ffd67c69afd504cb766d7f9e7cf" translate="yes" xml:space="preserve">
          <source>Spring WebFlux uses the &lt;code&gt;HttpMessageReader&lt;/code&gt; and &lt;code&gt;HttpMessageWriter&lt;/code&gt; interfaces to convert HTTP requests and responses. They are configured with &lt;code&gt;CodecConfigurer&lt;/code&gt; to have sensible defaults by looking at the libraries available in your classpath.</source>
          <target state="translated">Spring WebFlux使用 &lt;code&gt;HttpMessageReader&lt;/code&gt; 和 &lt;code&gt;HttpMessageWriter&lt;/code&gt; 接口来转换HTTP请求和响应。通过查看类路径中可用的库，使用 &lt;code&gt;CodecConfigurer&lt;/code&gt; 将它们配置为具有合理的默认值。</target>
        </trans-unit>
        <trans-unit id="196d723cefbf6a677cbb2edb79c190fd3ce65830" translate="yes" xml:space="preserve">
          <source>Spring boot cli</source>
          <target state="translated">弹簧靴夹</target>
        </trans-unit>
        <trans-unit id="af8ccb32a3c09d86c755e24fbaa20421b40dc819" translate="yes" xml:space="preserve">
          <source>Spring boot features</source>
          <target state="translated">弹簧靴功能</target>
        </trans-unit>
        <trans-unit id="07ce6acf0c96286df971d0206138322b040b6ddc" translate="yes" xml:space="preserve">
          <source>Spring extensions are not supported with Groovy configuration. Any &lt;code&gt;logback-spring.groovy&lt;/code&gt; files will not be detected.</source>
          <target state="translated">Groovy配置不支持Spring扩展。不会检测到任何 &lt;code&gt;logback-spring.groovy&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="b02da7009c3a075c0bb5dd15d9f47193e9d63471" translate="yes" xml:space="preserve">
          <source>Spring for Apache Kafka provides a convenient way to test projects with an embedded Apache Kafka broker. To use this feature, annotate a test class with &lt;code&gt;@EmbeddedKafka&lt;/code&gt; from the &lt;code&gt;spring-kafka-test&lt;/code&gt; module. For more information, please see the Spring for Apache Kafka &lt;a href=&quot;https://docs.spring.io/spring-kafka/docs/2.6.3/reference/html/#embedded-kafka-annotation&quot;&gt;reference manual&lt;/a&gt;.</source>
          <target state="translated">Spring for Apache Kafka提供了一种使用嵌入式Apache Kafka代理测试项目的便捷方法。要使用此功能，请在 &lt;code&gt;spring-kafka-test&lt;/code&gt; 模块中使用 &lt;code&gt;@EmbeddedKafka&lt;/code&gt; 注释测试类。有关更多信息，请参阅Spring for Apache Kafka&lt;a href=&quot;https://docs.spring.io/spring-kafka/docs/2.6.3/reference/html/#embedded-kafka-annotation&quot;&gt;参考手册&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="77304db138247edee41178e26bf93d339c274e9b" translate="yes" xml:space="preserve">
          <source>Spring for Apache Kafka provides a factory bean to create a &lt;code&gt;StreamsBuilder&lt;/code&gt; object and manage the lifecycle of its streams. Spring Boot auto-configures the required &lt;code&gt;KafkaStreamsConfiguration&lt;/code&gt; bean as long as &lt;code&gt;kafka-streams&lt;/code&gt; is on the classpath and Kafka Streams is enabled via the &lt;code&gt;@EnableKafkaStreams&lt;/code&gt; annotation.</source>
          <target state="translated">用于Apache Kafka的Spring提供了一个工厂bean来创建 &lt;code&gt;StreamsBuilder&lt;/code&gt; 对象并管理其流的生命周期。只要 &lt;code&gt;kafka-streams&lt;/code&gt; 在类路径上并且通过 &lt;code&gt;@EnableKafkaStreams&lt;/code&gt; 批注启用Kafka Streams，Spring Boot就会自动配置所需的 &lt;code&gt;KafkaStreamsConfiguration&lt;/code&gt; bean 。</target>
        </trans-unit>
        <trans-unit id="1b96a6bad80775aa04f74dedbf2c560d44307b97" translate="yes" xml:space="preserve">
          <source>Spring uses &lt;code&gt;HttpMessageConverters&lt;/code&gt; to render &lt;code&gt;@ResponseBody&lt;/code&gt; (or responses from &lt;code&gt;@RestController&lt;/code&gt;). You can contribute additional converters by adding beans of the appropriate type in a Spring Boot context. If a bean you add is of a type that would have been included by default anyway (such as &lt;code&gt;MappingJackson2HttpMessageConverter&lt;/code&gt; for JSON conversions), it replaces the default value. A convenience bean of type &lt;code&gt;HttpMessageConverters&lt;/code&gt; is provided and is always available if you use the default MVC configuration. It has some useful methods to access the default and user-enhanced message converters (For example, it can be useful if you want to manually inject them into a custom &lt;code&gt;RestTemplate&lt;/code&gt;).</source>
          <target state="translated">Spring使用 &lt;code&gt;HttpMessageConverters&lt;/code&gt; 渲染 &lt;code&gt;@ResponseBody&lt;/code&gt; （或 &lt;code&gt;@RestController&lt;/code&gt; 的响应）。您可以通过在Spring Boot上下文中添加适当类型的bean来贡献额外的转换器。如果您添加的Bean仍然是默认情况下将包含的类型（例如，用于JSON转换的 &lt;code&gt;MappingJackson2HttpMessageConverter&lt;/code&gt; ），它将替换默认值。提供了 &lt;code&gt;HttpMessageConverters&lt;/code&gt; 类型的便捷bean，如果您使用默认的MVC配置，它将始终可用。它提供了一些有用的方法来访问默认的和用户增强的消息转换器（例如，如果您希望将它们手动注入到自定义的 &lt;code&gt;RestTemplate&lt;/code&gt; 中，则可能会很有用）。</target>
        </trans-unit>
        <trans-unit id="2a8b677084199b3734a71bff425cc13faac327da" translate="yes" xml:space="preserve">
          <source>Spring&amp;rsquo;s &lt;code&gt;AmqpTemplate&lt;/code&gt; and &lt;code&gt;AmqpAdmin&lt;/code&gt; are auto-configured, and you can autowire them directly into your own beans, as shown in the following example:</source>
          <target state="translated">Spring的 &lt;code&gt;AmqpTemplate&lt;/code&gt; 和 &lt;code&gt;AmqpAdmin&lt;/code&gt; 是自动配置的，您可以将它们直接自动连接到自己的bean中，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="203be8b896b86ae54b4ca3a8d9dfa3f9d5b5e913" translate="yes" xml:space="preserve">
          <source>Spring&amp;rsquo;s &lt;code&gt;JdbcTemplate&lt;/code&gt; and &lt;code&gt;NamedParameterJdbcTemplate&lt;/code&gt; classes are auto-configured, and you can &lt;code&gt;@Autowire&lt;/code&gt; them directly into your own beans, as shown in the following example:</source>
          <target state="translated">Spring的 &lt;code&gt;JdbcTemplate&lt;/code&gt; 和 &lt;code&gt;NamedParameterJdbcTemplate&lt;/code&gt; 类是自动配置的，您可以 &lt;code&gt;@Autowire&lt;/code&gt; 它们直接@Autowire到自己的bean中，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="35a05fa0360ee8d05248c46152d3f7c1e6bd4ecc" translate="yes" xml:space="preserve">
          <source>Spring&amp;rsquo;s &lt;code&gt;JmsTemplate&lt;/code&gt; is auto-configured, and you can autowire it directly into your own beans, as shown in the following example:</source>
          <target state="translated">Spring的 &lt;code&gt;JmsTemplate&lt;/code&gt; 是自动配置的，您可以将其直接自动连接到您自己的bean中，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="a168111a91530f5b3a00aae828b33d25eef3950f" translate="yes" xml:space="preserve">
          <source>Spring&amp;rsquo;s &lt;code&gt;KafkaTemplate&lt;/code&gt; is auto-configured, and you can autowire it directly in your own beans, as shown in the following example:</source>
          <target state="translated">Spring的 &lt;code&gt;KafkaTemplate&lt;/code&gt; 是自动配置的，您可以直接在自己的bean中自动对其进行布线，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="5f0ca980d1019aa3ecab83f49446918024def901" translate="yes" xml:space="preserve">
          <source>Spring&amp;rsquo;s test framework caches application contexts between tests. Therefore, as long as your tests share the same configuration (no matter how it is discovered), the potentially time-consuming process of loading the context happens only once.</source>
          <target state="translated">Spring的测试框架在测试之间缓存应用程序上下文。因此，只要您的测试共享相同的配置（无论如何发现），加载上下文的潜在耗时过程就只会发生一次。</target>
        </trans-unit>
        <trans-unit id="241f5bef53eec4f8c32b195459a7e822e7a83449" translate="yes" xml:space="preserve">
          <source>SpringApplication</source>
          <target state="translated">SpringApplication</target>
        </trans-unit>
        <trans-unit id="164ebb9ef9a4e5fe90da6512b46c605a9983c835" translate="yes" xml:space="preserve">
          <source>Stackdriver</source>
          <target state="translated">Stackdriver</target>
        </trans-unit>
        <trans-unit id="78819015bbc4b3fb6e3df933d45c82518008681e" translate="yes" xml:space="preserve">
          <source>Stackdriver registry pushes metrics to &lt;a href=&quot;https://cloud.google.com/stackdriver/&quot;&gt;Stackdriver&lt;/a&gt; periodically. To export metrics to SaaS &lt;a href=&quot;https://micrometer.io/docs/registry/stackdriver&quot;&gt;Stackdriver&lt;/a&gt;, your Google Cloud project id must be provided:</source>
          <target state="translated">Stackdriver注册表会定期将指标推送到&lt;a href=&quot;https://cloud.google.com/stackdriver/&quot;&gt;Stackdriver&lt;/a&gt;。要将指标导出到SaaS &lt;a href=&quot;https://micrometer.io/docs/registry/stackdriver&quot;&gt;Stackdriver&lt;/a&gt;，必须提供您的Google Cloud项目ID：</target>
        </trans-unit>
        <trans-unit id="cb1f592c77001000dceeaf4a3345622b2423f56a" translate="yes" xml:space="preserve">
          <source>Stackoverflow with &lt;code&gt;spring&lt;/code&gt; and &lt;code&gt;kotlin&lt;/code&gt; tags</source>
          <target state="translated">具有 &lt;code&gt;spring&lt;/code&gt; 和 &lt;code&gt;kotlin&lt;/code&gt; 标签的Stackoverflow</target>
        </trans-unit>
        <trans-unit id="bbad995611ea6d303ca33012156e1cd3c2806d1f" translate="yes" xml:space="preserve">
          <source>Standard Groovy includes a &lt;code&gt;@Grab&lt;/code&gt; annotation, which lets you declare dependencies on third-party libraries. This useful technique lets Groovy download jars in the same way as Maven or Gradle would but without requiring you to use a build tool.</source>
          <target state="translated">标准Groovy包含一个 &lt;code&gt;@Grab&lt;/code&gt; 批注，它使您可以声明对第三方库的依赖关系。Groovy可以使用这种有用的技术以与Maven或Gradle相同的方式下载jar，而无需使用构建工具。</target>
        </trans-unit>
        <trans-unit id="cb385827c172cb9a41ed414b2034abcce7c0d75c" translate="yes" xml:space="preserve">
          <source>Standard YAML list syntax or comma-separated values</source>
          <target state="translated">标准YAML列表语法或逗号分隔的值</target>
        </trans-unit>
        <trans-unit id="aa93c49f9bfb5f63908b70d40a92fbcb7fb6d547" translate="yes" xml:space="preserve">
          <source>Standard camel case syntax.</source>
          <target state="translated">标准的骆驼大小写语法。</target>
        </trans-unit>
        <trans-unit id="c32087925b26e1f5aee1a665db618e44dfa72856" translate="yes" xml:space="preserve">
          <source>Standard list syntax using &lt;code&gt;[ ]&lt;/code&gt; or comma-separated values</source>
          <target state="translated">使用 &lt;code&gt;[ ]&lt;/code&gt; 或逗号分隔值的标准列表语法</target>
        </trans-unit>
        <trans-unit id="bdf08078d6819185099f8cb475ad8ccf5c14847d" translate="yes" xml:space="preserve">
          <source>Start the container automatically on startup.</source>
          <target state="translated">启动时自动启动容器。</target>
        </trans-unit>
        <trans-unit id="faa9e7e7ef5a264c58c68a4a0b9c8bd54241450a" translate="yes" xml:space="preserve">
          <source>Started</source>
          <target state="translated">Started</target>
        </trans-unit>
        <trans-unit id="bf7151c6ac0f43251a056474540fc8a4ae98493d" translate="yes" xml:space="preserve">
          <source>Starter for JMS messaging using Apache ActiveMQ</source>
          <target state="translated">使用Apache ActiveMQ的JMS消息传递的入门者</target>
        </trans-unit>
        <trans-unit id="7b9ac978d24bdfb33de35b98f7305bf3b0824191" translate="yes" xml:space="preserve">
          <source>Starter for JMS messaging using Apache Artemis</source>
          <target state="translated">使用Apache Artemis的JMS消息传递的入门者</target>
        </trans-unit>
        <trans-unit id="60e6dd7a7d9199a2fb6906f79174b026ba00ffea" translate="yes" xml:space="preserve">
          <source>Starter for JTA transactions using Atomikos</source>
          <target state="translated">使用Atomikos进行JTA交易的入门者。</target>
        </trans-unit>
        <trans-unit id="5c320da25168f8d135a7646becb4336699f41bdd" translate="yes" xml:space="preserve">
          <source>Starter for JTA transactions using Bitronix. Deprecated since 2.3.0</source>
          <target state="translated">使用Bitronix的JTA交易的启动器。从2.3.0开始被废止。</target>
        </trans-unit>
        <trans-unit id="4cacca1d29d6c38adce6f1524c6246b2ae5e94ac" translate="yes" xml:space="preserve">
          <source>Starter for aspect-oriented programming with Spring AOP and AspectJ</source>
          <target state="translated">使用Spring AOP和AspectJ进行面向方面的编程入门。</target>
        </trans-unit>
        <trans-unit id="1ff6219981e566462f173c85441011f9ce408f25" translate="yes" xml:space="preserve">
          <source>Starter for building MVC web applications using FreeMarker views</source>
          <target state="translated">使用FreeMarker视图构建MVC Web应用程序的入门级软件。</target>
        </trans-unit>
        <trans-unit id="14c44c1f99c1cc1f55e0361f1440636608f0d187" translate="yes" xml:space="preserve">
          <source>Starter for building MVC web applications using Groovy Templates views</source>
          <target state="translated">使用Groovy模板视图构建MVC Web应用程序的入门级软件。</target>
        </trans-unit>
        <trans-unit id="e3d1c99dd4fbea2ab7b7731a0b4fb8e11d6356e4" translate="yes" xml:space="preserve">
          <source>Starter for building MVC web applications using Thymeleaf views</source>
          <target state="translated">使用Thymeleaf视图构建MVC Web应用程序的入门级软件。</target>
        </trans-unit>
        <trans-unit id="d130d969d42b576be5602c636ca6f5ef528242b7" translate="yes" xml:space="preserve">
          <source>Starter for building RESTful web applications using JAX-RS and Jersey. An alternative to &lt;a href=&quot;#spring-boot-starter-web&quot;&gt;&lt;code&gt;spring-boot-starter-web&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">使用JAX-RS和Jersey构建RESTful Web应用程序的入门。&lt;a href=&quot;#spring-boot-starter-web&quot;&gt; &lt;code&gt;spring-boot-starter-web&lt;/code&gt; &lt;/a&gt;的替代方法</target>
        </trans-unit>
        <trans-unit id="1a7b6ae4d2131f0808e9e340bd37755ff8808e97" translate="yes" xml:space="preserve">
          <source>Starter for building RSocket clients and servers</source>
          <target state="translated">构建RSocket客户端和服务器的入门工具</target>
        </trans-unit>
        <trans-unit id="0571ef96039a66835f2eadf3ee291bdad016f71d" translate="yes" xml:space="preserve">
          <source>Starter for building WebFlux applications using Spring Framework&amp;rsquo;s Reactive Web support</source>
          <target state="translated">使用Spring Framework的反应式Web支持构建WebFlux应用程序的入门者</target>
        </trans-unit>
        <trans-unit id="a98edbdd36b4f6546a8ebdb46524be712382106f" translate="yes" xml:space="preserve">
          <source>Starter for building WebSocket applications using Spring Framework&amp;rsquo;s WebSocket support</source>
          <target state="translated">使用Spring Framework的WebSocket支持构建WebSocket应用程序的入门</target>
        </trans-unit>
        <trans-unit id="b16fb7aaa9af3923a86c550b4f4e34adad4aeae3" translate="yes" xml:space="preserve">
          <source>Starter for building hypermedia-based RESTful web application with Spring MVC and Spring HATEOAS</source>
          <target state="translated">使用Spring MVC和Spring HATEOAS构建基于超媒体的RESTful Web应用的入门级软件。</target>
        </trans-unit>
        <trans-unit id="e69b703940c85e6160db7a2dba84449d47057c7d" translate="yes" xml:space="preserve">
          <source>Starter for building web applications using Mustache views</source>
          <target state="translated">使用Mustache视图构建Web应用程序的入门级软件。</target>
        </trans-unit>
        <trans-unit id="8096c5db8e5cacd4d0621194edc9dfea0e1cd907" translate="yes" xml:space="preserve">
          <source>Starter for building web, including RESTful, applications using Spring MVC. Uses Tomcat as the default embedded container</source>
          <target state="translated">使用Spring MVC构建Web(包括RESTful)应用程序的入门级软件。使用Tomcat作为默认的嵌入式容器。</target>
        </trans-unit>
        <trans-unit id="e83e53d942b9269baf6f0a7d6306268512528669" translate="yes" xml:space="preserve">
          <source>Starter for exposing Spring Data repositories over REST using Spring Data REST</source>
          <target state="translated">使用Spring Data REST在REST上暴露Spring Data存储库的初学者</target>
        </trans-unit>
        <trans-unit id="ba396b4c61317539b459cf71d26a4063eae85f42" translate="yes" xml:space="preserve">
          <source>Starter for logging using Logback. Default logging starter</source>
          <target state="translated">使用日志回溯进行日志记录的启动器。默认的日志记录启动器</target>
        </trans-unit>
        <trans-unit id="33c7c8986e1397642940ad593349298b633894e8" translate="yes" xml:space="preserve">
          <source>Starter for reading and writing json</source>
          <target state="translated">阅读和编写json的入门工具</target>
        </trans-unit>
        <trans-unit id="11befc28ed3456c0d7f92196ba214a0dd8a74fc3" translate="yes" xml:space="preserve">
          <source>Starter for testing Spring Boot applications with libraries including JUnit Jupiter, Hamcrest and Mockito</source>
          <target state="translated">使用包括JUnit Jupiter、Hamcrest和Mockito在内的库来测试Spring Boot应用程序的入门工具。</target>
        </trans-unit>
        <trans-unit id="c01dc7ba2d18cc957a6723b0f0381a226e33f3f0" translate="yes" xml:space="preserve">
          <source>Starter for using Cassandra distributed database and Spring Data Cassandra</source>
          <target state="translated">使用Cassandra分布式数据库和Spring Data Cassandra的入门教程</target>
        </trans-unit>
        <trans-unit id="0147a430a0c9a084779cc74f3ab46646a4a270e9" translate="yes" xml:space="preserve">
          <source>Starter for using Cassandra distributed database and Spring Data Cassandra Reactive</source>
          <target state="translated">使用Cassandra分布式数据库和Spring Data Cassandra Reactive的入门教程</target>
        </trans-unit>
        <trans-unit id="7627d7fd90b553b5df2eb0ac474892ff7f7d4d9d" translate="yes" xml:space="preserve">
          <source>Starter for using Couchbase document-oriented database and Spring Data Couchbase</source>
          <target state="translated">使用Couchbase面向文档的数据库和Spring Data Couchbase的入门级软件。</target>
        </trans-unit>
        <trans-unit id="73ba90a0bfbfda719c8aa90d6e67cb5bec4eb13c" translate="yes" xml:space="preserve">
          <source>Starter for using Couchbase document-oriented database and Spring Data Couchbase Reactive</source>
          <target state="translated">使用Couchbase面向文档的数据库和Spring Data Couchbase Reactive的入门级软件。</target>
        </trans-unit>
        <trans-unit id="4c67285fcc525ce9f3cf62cb583ee3df7b99f55a" translate="yes" xml:space="preserve">
          <source>Starter for using Elasticsearch search and analytics engine and Spring Data Elasticsearch</source>
          <target state="translated">使用Elasticsearch搜索和分析引擎以及Spring Data Elasticsearch的入门课程。</target>
        </trans-unit>
        <trans-unit id="740e1f6c44102e04b29ce96a861501c191168556" translate="yes" xml:space="preserve">
          <source>Starter for using JDBC with the HikariCP connection pool</source>
          <target state="translated">在HikariCP连接池中使用JDBC的入门教程</target>
        </trans-unit>
        <trans-unit id="49b81d30a6a15e92878339ed1b64043d0219ae46" translate="yes" xml:space="preserve">
          <source>Starter for using Java Bean Validation with Hibernate Validator</source>
          <target state="translated">使用Hibernate验证器进行Java Bean验证的入门篇。</target>
        </trans-unit>
        <trans-unit id="1392aa295bd0e3cadcff647c736660a9ac91a89a" translate="yes" xml:space="preserve">
          <source>Starter for using Java Mail and Spring Framework&amp;rsquo;s email sending support</source>
          <target state="translated">使用Java Mail和Spring Framework的电子邮件发送支持的入门</target>
        </trans-unit>
        <trans-unit id="fa61b484be99635a85e4ea3ce6e401f348850264" translate="yes" xml:space="preserve">
          <source>Starter for using Jetty as the embedded servlet container. An alternative to &lt;a href=&quot;#spring-boot-starter-tomcat&quot;&gt;&lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">使用Jetty作为嵌入式servlet容器的入门者。&lt;a href=&quot;#spring-boot-starter-tomcat&quot;&gt; &lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt; &lt;/a&gt;的替代品</target>
        </trans-unit>
        <trans-unit id="3c029d6cba40f66a2830682948b47fd6a2ff7437" translate="yes" xml:space="preserve">
          <source>Starter for using Log4j2 for logging. An alternative to &lt;a href=&quot;#spring-boot-starter-logging&quot;&gt;&lt;code&gt;spring-boot-starter-logging&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">使用Log4j2进行日志记录的启动器。&lt;a href=&quot;#spring-boot-starter-logging&quot;&gt; &lt;code&gt;spring-boot-starter-logging&lt;/code&gt; &lt;/a&gt;的替代方法</target>
        </trans-unit>
        <trans-unit id="b164f9695419f9c0fab36f4db7a075dcc14a9449" translate="yes" xml:space="preserve">
          <source>Starter for using MongoDB document-oriented database and Spring Data MongoDB</source>
          <target state="translated">使用MongoDB面向文档的数据库和Spring Data MongoDB的入门课程。</target>
        </trans-unit>
        <trans-unit id="b4500df7459fd3f5630c8b5190b1fdbf88117d69" translate="yes" xml:space="preserve">
          <source>Starter for using MongoDB document-oriented database and Spring Data MongoDB Reactive</source>
          <target state="translated">使用MongoDB面向文档的数据库和Spring Data MongoDB Reactive的入门课程。</target>
        </trans-unit>
        <trans-unit id="079d35ed31ef939b9055217621bea6972a6c261b" translate="yes" xml:space="preserve">
          <source>Starter for using Neo4j graph database and Spring Data Neo4j</source>
          <target state="translated">Neo4j图形数据库和Spring Data Neo4j使用入门。</target>
        </trans-unit>
        <trans-unit id="50d78ef58ae0ab8758d5b985350536ed3bc008b5" translate="yes" xml:space="preserve">
          <source>Starter for using Reactor Netty as the embedded reactive HTTP server.</source>
          <target state="translated">使用Reactor Netty作为嵌入式反应式HTTP服务器的初学者。</target>
        </trans-unit>
        <trans-unit id="a7a49b865d569b04788c39f74fbf1eaf0d54e6a5" translate="yes" xml:space="preserve">
          <source>Starter for using Redis key-value data store with Spring Data Redis and the Lettuce client</source>
          <target state="translated">使用Spring Data Redis和Lettuce客户端使用Redis键值数据存储的入门教程</target>
        </trans-unit>
        <trans-unit id="e80deeba2c3a5163803eca7ec4fce5da6d695cc3" translate="yes" xml:space="preserve">
          <source>Starter for using Redis key-value data store with Spring Data Redis reactive and the Lettuce client</source>
          <target state="translated">使用Spring Data Redis reactive和Lettuce客户端使用Redis键值数据存储的入门教程</target>
        </trans-unit>
        <trans-unit id="afefb5491f8dcc0c00b9314079e567727c4364b4" translate="yes" xml:space="preserve">
          <source>Starter for using Spring AMQP and Rabbit MQ</source>
          <target state="translated">使用Spring AMQP和Rabbit MQ的入门级软件。</target>
        </trans-unit>
        <trans-unit id="cea67f2a0d20d6b53cb1548a86b0b6319d246d04" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Batch</source>
          <target state="translated">使用Spring Batch的初学者</target>
        </trans-unit>
        <trans-unit id="bcb68a204aa944548ba981dc02f82f7303aaff94" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Boot&amp;rsquo;s Actuator which provides production ready features to help you monitor and manage your application</source>
          <target state="translated">使用Spring Boot的Actuator的入门程序，该启动器提供了生产就绪功能，可帮助您监视和管理应用程序</target>
        </trans-unit>
        <trans-unit id="77056c73324c3906e1eb208edafbfd8eba6f8b63" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Data JDBC</source>
          <target state="translated">Spring Data JDBC使用入门</target>
        </trans-unit>
        <trans-unit id="3817abc45e56500f789c9426228ab6f4a56535d8" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Data JPA with Hibernate</source>
          <target state="translated">使用Hibernate的Spring Data JPA入门教程</target>
        </trans-unit>
        <trans-unit id="5167427cdba12de5357c173ddfec0b169ac62d5a" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Data LDAP</source>
          <target state="translated">使用Spring Data LDAP的初学者</target>
        </trans-unit>
        <trans-unit id="8417213a6527770dcd2af7c020449e79f41e9c2e" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Data R2DBC</source>
          <target state="translated">使用Spring Data R2DBC的初学者</target>
        </trans-unit>
        <trans-unit id="5da8d431c71d9d59e28998cdf95ed9b5384fd8cc" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Framework&amp;rsquo;s caching support</source>
          <target state="translated">使用Spring Framework的缓存支持的入门者</target>
        </trans-unit>
        <trans-unit id="ac752278c3848a4461c5e08f851ff49d20fd7b81" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Integration</source>
          <target state="translated">使用Spring集成的入门工具</target>
        </trans-unit>
        <trans-unit id="3d72a9becfeabbc143e4afb12fc7240e94f63576" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Security</source>
          <target state="translated">使用Spring安全软件的入门者</target>
        </trans-unit>
        <trans-unit id="2b40ddc49d2b12409fd1720214181a2889555baf" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Security&amp;rsquo;s OAuth2 resource server features</source>
          <target state="translated">使用Spring Security的OAuth2资源服务器功能的入门</target>
        </trans-unit>
        <trans-unit id="f5f69650a11a9d880cf1819db0217c4ea6cdcffb" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Security&amp;rsquo;s OAuth2/OpenID Connect client features</source>
          <target state="translated">使用Spring Security的OAuth2 / OpenID Connect客户端功能的入门</target>
        </trans-unit>
        <trans-unit id="0c8162872d8eb6e09785f78a040e341c4b2f05c7" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Web Services</source>
          <target state="translated">使用Spring Web Services的入门教程</target>
        </trans-unit>
        <trans-unit id="de638ac2033fcf17a653d4ef3f8f475702efdaeb" translate="yes" xml:space="preserve">
          <source>Starter for using Tomcat as the embedded servlet container. Default servlet container starter used by &lt;a href=&quot;#spring-boot-starter-web&quot;&gt;&lt;code&gt;spring-boot-starter-web&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">入门，用于将Tomcat用作嵌入式servlet容器。&lt;a href=&quot;#spring-boot-starter-web&quot;&gt; &lt;code&gt;spring-boot-starter-web&lt;/code&gt; &lt;/a&gt;使用的默认servlet容器启动器</target>
        </trans-unit>
        <trans-unit id="414bb1a5ff4d826894efe1e769f608254dafd507" translate="yes" xml:space="preserve">
          <source>Starter for using Undertow as the embedded servlet container. An alternative to &lt;a href=&quot;#spring-boot-starter-tomcat&quot;&gt;&lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">使用Undertow作为嵌入式servlet容器的入门者。&lt;a href=&quot;#spring-boot-starter-tomcat&quot;&gt; &lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt; &lt;/a&gt;的替代品</target>
        </trans-unit>
        <trans-unit id="521100ddb206a1fa1c74ebe5ae5898fba3257781" translate="yes" xml:space="preserve">
          <source>Starter for using jOOQ to access SQL databases. An alternative to &lt;a href=&quot;#spring-boot-starter-data-jpa&quot;&gt;&lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#spring-boot-starter-jdbc&quot;&gt;&lt;code&gt;spring-boot-starter-jdbc&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">使用jOOQ访问SQL数据库的入门。替代&lt;a href=&quot;#spring-boot-starter-data-jpa&quot;&gt; &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#spring-boot-starter-jdbc&quot;&gt; &lt;code&gt;spring-boot-starter-jdbc&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7288571443a2ad9832783f01179730316bda6b87" translate="yes" xml:space="preserve">
          <source>Starter for using the Apache Solr search platform with Spring Data Solr</source>
          <target state="translated">使用Apache Solr搜索平台与Spring Data Solr的入门教程</target>
        </trans-unit>
        <trans-unit id="faec6d455a8c7c6db2d7fc9668b3b9bae97c8e43" translate="yes" xml:space="preserve">
          <source>Starter for using the Quartz scheduler</source>
          <target state="translated">使用Quartz调度器的初学者</target>
        </trans-unit>
        <trans-unit id="7bfec88cf924722c1ca4650a2bf8d0bbf0943b75" translate="yes" xml:space="preserve">
          <source>Starters</source>
          <target state="translated">Starters</target>
        </trans-unit>
        <trans-unit id="c3a11bd6312d26f012a51b1398ab37579cd749ef" translate="yes" xml:space="preserve">
          <source>Starters and Auto-configuration</source>
          <target state="translated">启动器和自动配置</target>
        </trans-unit>
        <trans-unit id="9af4606e91f89c803c17919d20308f9c7be9d98a" translate="yes" xml:space="preserve">
          <source>Starters are a set of convenient dependency descriptors that you can include in your application. You get a one-stop shop for all the Spring and related technologies that you need without having to hunt through sample code and copy-paste loads of dependency descriptors. For example, if you want to get started using Spring and JPA for database access, include the &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; dependency in your project.</source>
          <target state="translated">入门程序是一组方便的依赖项描述符，您可以在应用程序中包括这些描述符。您可以一站式购买所需的所有Spring和相关技术，而不必遍历示例代码和依赖描述符的复制粘贴负载。例如，如果要开始使用Spring和JPA进行数据库访问，请在项目中包括 &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; 依赖项。</target>
        </trans-unit>
        <trans-unit id="7725e05476ed2d82c0f887aff3382e0fb31309ae" translate="yes" xml:space="preserve">
          <source>Starting</source>
          <target state="translated">Starting</target>
        </trans-unit>
        <trans-unit id="609a970b73e5daf827dcd4e65bbe7be84ad505a2" translate="yes" xml:space="preserve">
          <source>Starting Tomcat 9.0.x on JDK 8 without that native support logs the following error:</source>
          <target state="translated">在没有原生支持的情况下,在JDK 8上启动Tomcat 9.0.x,会记录以下错误。</target>
        </trans-unit>
        <trans-unit id="ab17bb9a79bbc7d6c6e2dc0fb956509f385e8ae5" translate="yes" xml:space="preserve">
          <source>Starts the services as the user that owns the jar file</source>
          <target state="translated">以拥有jar文件的用户身份启动服务。</target>
        </trans-unit>
        <trans-unit id="4193d2bdacbfc1a99b0b373ce23c6d8a0c83c70a" translate="yes" xml:space="preserve">
          <source>Startup tasks are finished. The application is receiving traffic.</source>
          <target state="translated">启动任务已经完成。应用程序正在接收流量。</target>
        </trans-unit>
        <trans-unit id="40fb4596044a7beb52cfe4f1d15904a247453443" translate="yes" xml:space="preserve">
          <source>Statement separator in SQL initialization scripts.</source>
          <target state="translated">SQL初始化脚本中的语句分隔符。</target>
        </trans-unit>
        <trans-unit id="7eb73fdc600e13648386a5fcdea9406f8cc8c5fa" translate="yes" xml:space="preserve">
          <source>Static &lt;code&gt;index.html&lt;/code&gt; support.</source>
          <target state="translated">静态 &lt;code&gt;index.html&lt;/code&gt; 支持。</target>
        </trans-unit>
        <trans-unit id="dc813989f3f556253a1af5dc92893a49e3521632" translate="yes" xml:space="preserve">
          <source>Static resources can be moved to &lt;code&gt;/public&lt;/code&gt; (or &lt;code&gt;/static&lt;/code&gt; or &lt;code&gt;/resources&lt;/code&gt; or &lt;code&gt;/META-INF/resources&lt;/code&gt;) in the classpath root. The same applies to &lt;code&gt;messages.properties&lt;/code&gt; (which Spring Boot automatically detects in the root of the classpath).</source>
          <target state="translated">可以将静态资源移到类路径根目录中的 &lt;code&gt;/public&lt;/code&gt; （或 &lt;code&gt;/static&lt;/code&gt; 或 &lt;code&gt;/resources&lt;/code&gt; 或 &lt;code&gt;/META-INF/resources&lt;/code&gt; ）中。这同样适用于 &lt;code&gt;messages.properties&lt;/code&gt; （Spring Boot会在类路径的根目录中自动检测到该消息）。</target>
        </trans-unit>
        <trans-unit id="3094a7a7e028f35058c175e8b4b003112611efc5" translate="yes" xml:space="preserve">
          <source>Statistics related to garbage collection</source>
          <target state="translated">与垃圾收集有关的统计数据</target>
        </trans-unit>
        <trans-unit id="f49f44dc7b56eb7f308e27497a715d6cdfe78423" translate="yes" xml:space="preserve">
          <source>StatsD</source>
          <target state="translated">StatsD</target>
        </trans-unit>
        <trans-unit id="b20e760893e95b52e89a7561c6d9630557aeeac5" translate="yes" xml:space="preserve">
          <source>StatsD line protocol to use.</source>
          <target state="translated">要使用StatsD行协议。</target>
        </trans-unit>
        <trans-unit id="bae7d5be70820ed56467bd9a63744e23b47bd711" translate="yes" xml:space="preserve">
          <source>Status</source>
          <target state="translated">Status</target>
        </trans-unit>
        <trans-unit id="bb80d5baecb10cd2fc559a46d2c908ea6aff1060" translate="yes" xml:space="preserve">
          <source>Step size (i.e. reporting frequency) to use.</source>
          <target state="translated">使用的步长(即报告频率)。</target>
        </trans-unit>
        <trans-unit id="85679c88170f49d06e7996c917d7a7a34b2def73" translate="yes" xml:space="preserve">
          <source>Store password for the key store file.</source>
          <target state="translated">存储密钥存储文件的密码。</target>
        </trans-unit>
        <trans-unit id="e3318b7bb689ff5a496e3cb1064d72ea41f3ce22" translate="yes" xml:space="preserve">
          <source>Store password for the trust store file.</source>
          <target state="translated">为信任存储文件存储密码。</target>
        </trans-unit>
        <trans-unit id="f4622060d7a7a24dd59ded5a3a80849fdcd4ee90" translate="yes" xml:space="preserve">
          <source>Strategy for handling X-Forwarded-* headers.</source>
          <target state="translated">处理X-Forwarded-*头的策略。</target>
        </trans-unit>
        <trans-unit id="7a3e41558806ab2ef8cba4c1de18ee6cc8d67dda" translate="yes" xml:space="preserve">
          <source>Strategy to use to determine which repositories get exposed.</source>
          <target state="translated">用来确定哪些存储库被暴露的策略。</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="800f964f9fcb108956cf9e7afb95454157b4850e" translate="yes" xml:space="preserve">
          <source>Such arrangement relies on a default empty constructor and getters and setters are usually mandatory, since binding is through standard Java Beans property descriptors, just like in Spring MVC. A setter may be omitted in the following cases:</source>
          <target state="translated">这样的安排依赖于一个默认的空构造函数,getter和setter通常是强制性的,因为绑定是通过标准的Java Beans属性描述符,就像在Spring MVC中一样。在以下情况下,可以省略setter。</target>
        </trans-unit>
        <trans-unit id="0f332cd57a4c09a6519a76839b955bcdd6eb7dcd" translate="yes" xml:space="preserve">
          <source>Suffix of placeholders in migration scripts.</source>
          <target state="translated">迁移脚本中占位符的后缀。</target>
        </trans-unit>
        <trans-unit id="19b147ece16875f9a6a40d7008055bd6cfac7e9a" translate="yes" xml:space="preserve">
          <source>Suffix pattern matching is deprecated and will be removed in a future release. If you understand the caveats and would still like your application to use suffix pattern matching, the following configuration is required:</source>
          <target state="translated">后缀模式匹配已被废弃,并将在未来的版本中删除。如果您了解这些注意事项,并且仍然希望您的应用程序使用后缀模式匹配,则需要进行以下配置。</target>
        </trans-unit>
        <trans-unit id="1e7ba42f5fb456f03ac307cfca4ef044b07b2545" translate="yes" xml:space="preserve">
          <source>Suffix that gets appended to view names when building a URL.</source>
          <target state="translated">建立URL时附加到视图名称的后缀。</target>
        </trans-unit>
        <trans-unit id="2455451894bc4736fecf44e79793cd850f12c2b1" translate="yes" xml:space="preserve">
          <source>Suffix to apply to template names.</source>
          <target state="translated">适用于模板名称的后缀。</target>
        </trans-unit>
        <trans-unit id="576c441142031c49c2b4e0a870cb68041ccad7ca" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;HttpMessageConverters&lt;/code&gt; (covered &lt;a href=&quot;#boot-features-spring-mvc-message-converters&quot;&gt;later in this document&lt;/a&gt;).</source>
          <target state="translated">对 &lt;code&gt;HttpMessageConverters&lt;/code&gt; 的支持（&lt;a href=&quot;#boot-features-spring-mvc-message-converters&quot;&gt;在本文档的后面部分有介绍&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="e467c505a21a93b34e38cfacdf189847818b75a8" translate="yes" xml:space="preserve">
          <source>Support for serving static resources, including support for WebJars (covered &lt;a href=&quot;#boot-features-spring-mvc-static-content&quot;&gt;later in this document&lt;/a&gt;)).</source>
          <target state="translated">支持服务静态资源，包括对WebJars的支持（&lt;a href=&quot;#boot-features-spring-mvc-static-content&quot;&gt;在本文档的后面部分中有介绍&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="f77e98bc7a8c3d93dc2668663dab05715f864f5b" translate="yes" xml:space="preserve">
          <source>Support for serving static resources, including support for WebJars (described &lt;a href=&quot;#boot-features-spring-mvc-static-content&quot;&gt;later in this document&lt;/a&gt;).</source>
          <target state="translated">支持提供静态资源，包括对WebJars的支持（&lt;a href=&quot;#boot-features-spring-mvc-static-content&quot;&gt;在本文档的后面部分中介绍&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="6226425d0c7f8d8b88c4dd7d9fe6f842ea26fa29" translate="yes" xml:space="preserve">
          <source>Supported SSL ciphers.</source>
          <target state="translated">支持的SSL密码。</target>
        </trans-unit>
        <trans-unit id="adf0c6ba0e543d13fd422263063e7b7f85eb87c7" translate="yes" xml:space="preserve">
          <source>System Property</source>
          <target state="translated">系统属性</target>
        </trans-unit>
        <trans-unit id="d94a1627eb44c56399236724594bf0aa9cc8beb5" translate="yes" xml:space="preserve">
          <source>System classLoader: Launched applications should use &lt;code&gt;Thread.getContextClassLoader()&lt;/code&gt; when loading classes (most libraries and frameworks do so by default). Trying to load nested jar classes with &lt;code&gt;ClassLoader.getSystemClassLoader()&lt;/code&gt; fails. &lt;code&gt;java.util.Logging&lt;/code&gt; always uses the system classloader. For this reason, you should consider a different logging implementation.</source>
          <target state="translated">系统classLoader：启动的应用程序在加载类时应使用 &lt;code&gt;Thread.getContextClassLoader()&lt;/code&gt; （默认情况下，大多数库和框架都使用Thread.getContextClassLoader（））。尝试使用 &lt;code&gt;ClassLoader.getSystemClassLoader()&lt;/code&gt; 加载嵌套jar类失败。 &lt;code&gt;java.util.Logging&lt;/code&gt; 始终使用系统类加载器。因此，您应该考虑使用其他日志记录实现。</target>
        </trans-unit>
        <trans-unit id="439d25d7629a342a4a19d3327c47ee538e36df6a" translate="yes" xml:space="preserve">
          <source>System properties</source>
          <target state="translated">系统属性</target>
        </trans-unit>
        <trans-unit id="9952f22fcf30e46684d8ac56ca001885733a7f8f" translate="yes" xml:space="preserve">
          <source>TCP RSocket server host to connect to.</source>
          <target state="translated">要连接到的 TCP RSocket 服务器主机。</target>
        </trans-unit>
        <trans-unit id="1d1d41ffe772ec74625f1685e5080da8426160bf" translate="yes" xml:space="preserve">
          <source>TCP RSocket server port to connect to.</source>
          <target state="translated">要连接的 TCP RSocket 服务器端口。</target>
        </trans-unit>
        <trans-unit id="4f8d8b71e2c82a3d55d38c6c3364e759268caea4" translate="yes" xml:space="preserve">
          <source>Table 1. Banner variables</source>
          <target state="translated">表1.横幅变量</target>
        </trans-unit>
        <trans-unit id="eeab1c9622ef81980e1e88e3d63f7895b94734cb" translate="yes" xml:space="preserve">
          <source>Table 1. Per-meter customizations</source>
          <target state="translated">表1.每米定制</target>
        </trans-unit>
        <trans-unit id="34d49d81fa7d6bf14600854241fead514019c3e5" translate="yes" xml:space="preserve">
          <source>Table 1. Spring Boot application starters</source>
          <target state="translated">表1.Spring Boot应用程序启动器 Spring Boot应用程序启动器</target>
        </trans-unit>
        <trans-unit id="191b1652a7057bdd887656c910b3f8a0ce3b7024" translate="yes" xml:space="preserve">
          <source>Table 2. Spring Boot production starters</source>
          <target state="translated">表2.Spring Boot生产启动器</target>
        </trans-unit>
        <trans-unit id="2da3398b98a74f2584d6a7c04484539a3fecf651" translate="yes" xml:space="preserve">
          <source>Table 2. activation properties</source>
          <target state="translated">表2.活化特性</target>
        </trans-unit>
        <trans-unit id="99facc60012cd4ab3158d47ed08e3ad5e9357873" translate="yes" xml:space="preserve">
          <source>Table 3. Spring Boot technical starters</source>
          <target state="translated">表3.Spring Boot技术启动程序 Spring Boot技术启动程序</target>
        </trans-unit>
        <trans-unit id="f13005acf3a47e812e0c9da03425b268c2f5869e" translate="yes" xml:space="preserve">
          <source>Table 3. relaxed binding</source>
          <target state="translated">表3.放宽的约束力</target>
        </trans-unit>
        <trans-unit id="d59b25906117d23aaf252d1e7ad9ff79a6fc4c70" translate="yes" xml:space="preserve">
          <source>Table 4. relaxed binding rules per property source</source>
          <target state="translated">表4.按财产来源放宽的约束规则</target>
        </trans-unit>
        <trans-unit id="36699ea87ff9a28bd7a61a4b045fa655d669095b" translate="yes" xml:space="preserve">
          <source>Table 5. Logging properties</source>
          <target state="translated">表5.记录属性 记录属性</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="translated">目录</target>
        </trans-unit>
        <trans-unit id="167c3743de96cc5e176c082d8aeff7392e2b0a34" translate="yes" xml:space="preserve">
          <source>Table prefix for all the batch meta-data tables.</source>
          <target state="translated">所有批次元数据表的表前缀。</target>
        </trans-unit>
        <trans-unit id="5eaa54c69658043d8e5aba62ea7793be79332125" translate="yes" xml:space="preserve">
          <source>Tablespace in which the schema history table is created. Ignored when using a database that does not support tablespaces. Defaults to the default tablespace of the connection used by Flyway.</source>
          <target state="translated">创建模式历史表的表空间。当使用不支持表空间的数据库时,忽略。默认为Flyway使用的连接的默认表空间。</target>
        </trans-unit>
        <trans-unit id="75730a7958afd9b5c3bd5991a37f9ae499db8e39" translate="yes" xml:space="preserve">
          <source>Tablespace to use for Liquibase objects.</source>
          <target state="translated">用于Liquibase对象的表空间。</target>
        </trans-unit>
        <trans-unit id="982963c1c41cbed8cab073724749592fe35c532b" translate="yes" xml:space="preserve">
          <source>Tag</source>
          <target state="translated">Tag</target>
        </trans-unit>
        <trans-unit id="b60112ce31bb291148d4e6dfdbc6762a27763ca3" translate="yes" xml:space="preserve">
          <source>Tag name to use when applying database changes. Can also be used with &quot;rollbackFile&quot; to generate a rollback script for all existing changes associated with that tag.</source>
          <target state="translated">应用数据库更改时要使用的标记名称。也可与 &quot;rollbackFile &quot;一起使用,为与该标记相关联的所有现有更改生成回滚脚本。</target>
        </trans-unit>
        <trans-unit id="ab8f1e35160eb91c4d2b27780c3e2fa777b0518e" translate="yes" xml:space="preserve">
          <source>Tag that will be mapped to &quot;@host&quot; when shipping metrics to AppOptics.</source>
          <target state="translated">当将指标传送到AppOptics时,将被映射到&quot;@host &quot;的标签。</target>
        </trans-unit>
        <trans-unit id="cf07bfd1013df73f23a6386349901301c0f893f4" translate="yes" xml:space="preserve">
          <source>Tag that will be mapped to &quot;host&quot; when shipping metrics to Datadog.</source>
          <target state="translated">将指标传送到Datadog时,将被映射到 &quot;主机 &quot;的标签。</target>
        </trans-unit>
        <trans-unit id="60172b50556196e8120d1ca1f9b7dbbf040ab0be" translate="yes" xml:space="preserve">
          <source>Tag that will be mapped to &quot;host&quot; when shipping metrics to Influx.</source>
          <target state="translated">当将指标传送到Influx时,将被映射到 &quot;主机 &quot;的标签。</target>
        </trans-unit>
        <trans-unit id="a27a5054658747c000ada15bf7c8af97599a397f" translate="yes" xml:space="preserve">
          <source>Take care when registering &lt;code&gt;Filter&lt;/code&gt; beans since they are initialized very early in the application lifecycle. If you need to register a &lt;code&gt;Filter&lt;/code&gt; that interacts with other beans, consider using a &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/web/servlet/DelegatingFilterProxyRegistrationBean.html&quot;&gt;&lt;code&gt;DelegatingFilterProxyRegistrationBean&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">注册 &lt;code&gt;Filter&lt;/code&gt; Bean时请务必小心，因为它们是在应用程序生命周期中很早就初始化的。如果需要注册与其他bean交互的 &lt;code&gt;Filter&lt;/code&gt; ，请考虑改用&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/web/servlet/DelegatingFilterProxyRegistrationBean.html&quot;&gt; &lt;code&gt;DelegatingFilterProxyRegistrationBean&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="568a40f54a641e909abfb444129770099d96152b" translate="yes" xml:space="preserve">
          <source>Target database to operate on, auto-detected by default. Can be alternatively set using the &quot;databasePlatform&quot; property.</source>
          <target state="translated">要操作的目标数据库,默认为自动检测。也可以使用 &quot;databasePlatform &quot;属性进行设置。</target>
        </trans-unit>
        <trans-unit id="333b912deae6199d27d7c610b897a0f448d327b2" translate="yes" xml:space="preserve">
          <source>Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if both it and time between eviction runs are positive.</source>
          <target state="translated">池中要保持的空闲连接数的最小目标。只有当它和驱逐运行之间的时间都为正值时,这个设置才有效果。</target>
        </trans-unit>
        <trans-unit id="a28d19c194ec70cf42107dcdc3ad2ddedb59e6c1" translate="yes" xml:space="preserve">
          <source>Target size of the prepared statement cache. 0 disables the cache.</source>
          <target state="translated">准备好的语句缓存的目标大小。0禁用缓存。</target>
        </trans-unit>
        <trans-unit id="0d5309316dd90e112f91ee2716f683b2d629afb9" translate="yes" xml:space="preserve">
          <source>Target version up to which migrations should be considered.</source>
          <target state="translated">应考虑向其迁移的目标版本。</target>
        </trans-unit>
        <trans-unit id="0c56a9065858b8e8ffcc7d6f4f950cf3266e63b0" translate="yes" xml:space="preserve">
          <source>Tasks expected to run during startup should be executed by &lt;code&gt;CommandLineRunner&lt;/code&gt; and &lt;code&gt;ApplicationRunner&lt;/code&gt; components instead of using Spring component lifecycle callbacks such as &lt;code&gt;@PostConstruct&lt;/code&gt;.</source>
          <target state="translated">预期在启动过程中运行的任务应由 &lt;code&gt;CommandLineRunner&lt;/code&gt; 和 &lt;code&gt;ApplicationRunner&lt;/code&gt; 组件执行，而不是使用Spring组件生命周期回调（如 &lt;code&gt;@PostConstruct&lt;/code&gt; )执行。</target>
        </trans-unit>
        <trans-unit id="47f1e161c19bd52f3722e0ece851fd1a0735c536" translate="yes" xml:space="preserve">
          <source>Technology type for exported metrics. Used to group metrics under a logical technology name in the Dynatrace UI.</source>
          <target state="translated">导出指标的技术类型。用于在 Dynatrace UI 中根据逻辑技术名称对指标进行分组。</target>
        </trans-unit>
        <trans-unit id="29920c4cbb230340bbec1cc40271331c6e6ff6ab" translate="yes" xml:space="preserve">
          <source>Template encoding.</source>
          <target state="translated">模板编码。</target>
        </trans-unit>
        <trans-unit id="d4c42b186a7b06f9745c73d7cb472fce86f69ced" translate="yes" xml:space="preserve">
          <source>Template files encoding.</source>
          <target state="translated">模板文件编码。</target>
        </trans-unit>
        <trans-unit id="1b145b3eb0f0d96107250f1315e49d17cf5939df" translate="yes" xml:space="preserve">
          <source>Template mode to be applied to templates. See also Thymeleaf's TemplateMode enum.</source>
          <target state="translated">应用于模板的模板模式。参见Thymeleaf的TemplateMode枚举。</target>
        </trans-unit>
        <trans-unit id="d3e0af70d118d435c290c5dfb6ed9e5cb668c5bc" translate="yes" xml:space="preserve">
          <source>Template path.</source>
          <target state="translated">模板路径:</target>
        </trans-unit>
        <trans-unit id="c25221a23534c06e24bdf0ea2a7b12c0a4be2128" translate="yes" xml:space="preserve">
          <source>Test Auto-configuration Annotations</source>
          <target state="translated">测试自动配置注释</target>
        </trans-unit>
        <trans-unit id="6d5676cdf5482eecc252b7c32698e684ccd02dc7" translate="yes" xml:space="preserve">
          <source>Test slice</source>
          <target state="translated">测试片</target>
        </trans-unit>
        <trans-unit id="da778918a17df0796dc565fb2e088e9f2f4e9652" translate="yes" xml:space="preserve">
          <source>Test slices exclude &lt;code&gt;@Configuration&lt;/code&gt; classes from scanning. For example, for a &lt;code&gt;@WebMvcTest&lt;/code&gt;, the following configuration will not include the given &lt;code&gt;WebMvcConfigurer&lt;/code&gt; bean in the application context loaded by the test slice:</source>
          <target state="translated">测试片将 &lt;code&gt;@Configuration&lt;/code&gt; 类排除在扫描范围之外。例如，对于 &lt;code&gt;@WebMvcTest&lt;/code&gt; ，以下配置将在测试切片加载的应用程序上下文中不包括给定的 &lt;code&gt;WebMvcConfigurer&lt;/code&gt; Bean：</target>
        </trans-unit>
        <trans-unit id="f630a940e57bd2e0abb390c10def7d02d1c0bba4" translate="yes" xml:space="preserve">
          <source>Test-autoconfiguration annotations used to test slices of your application.</source>
          <target state="translated">测试-自动配置注解,用于测试您的应用程序的切片。</target>
        </trans-unit>
        <trans-unit id="8db29eae4790789ef9c9a19e7b95ca8fea0c2322" translate="yes" xml:space="preserve">
          <source>Testing within a mocked environment is usually faster than running with a full Servlet container. However, since mocking occurs at the Spring MVC layer, code that relies on lower-level Servlet container behavior cannot be directly tested with MockMvc.</source>
          <target state="translated">在模拟环境中进行测试通常比使用完整的Servlet容器运行速度更快。然而,由于嘲讽发生在Spring MVC层,所以依赖于低层Servlet容器行为的代码不能直接用MockMvc测试。</target>
        </trans-unit>
        <trans-unit id="54cb1c52bb55226bce9fc849dcbd89ce50784221" translate="yes" xml:space="preserve">
          <source>Tests that use &lt;code&gt;@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)&lt;/code&gt; can also inject the actual port into a field by using the &lt;code&gt;@LocalServerPort&lt;/code&gt; annotation, as shown in the following example:</source>
          <target state="translated">使用 &lt;code&gt;@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)&lt;/code&gt; 的测试也可以通过使用 &lt;code&gt;@LocalServerPort&lt;/code&gt; 批注将实际端口注入字段中，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="c204ff9a98216e65c35e059a19da55b180979f25" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;How-to&amp;rdquo; section includes a &lt;a href=&quot;howto#howto-database-initialization&quot;&gt;section on how to initialize a database&lt;/a&gt;.</source>
          <target state="translated">&amp;ldquo;操作方法&amp;rdquo;部分包括&lt;a href=&quot;howto#howto-database-initialization&quot;&gt;有关如何初始化数据库的部分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6a3f0afc8c67c18d31ba3e6a097c18525d05551b" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;How-to&amp;rdquo; section includes a &lt;a href=&quot;howto#howto-initialize-a-database-using-r2dbc&quot;&gt;section on how to initialize a database&lt;/a&gt;.</source>
          <target state="translated">&amp;ldquo;操作方法&amp;rdquo;部分包括&lt;a href=&quot;howto#howto-initialize-a-database-using-r2dbc&quot;&gt;有关如何初始化数据库的部分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa025c80f991459eecded325e880d9e7ea84bdbf" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;Liveness&amp;rdquo; state of an application tells whether its internal state allows it to work correctly, or recover by itself if it&amp;rsquo;s currently failing. A broken &amp;ldquo;Liveness&amp;rdquo; state means that the application is in a state that it cannot recover from, and the infrastructure should restart the application.</source>
          <target state="translated">应用程序的&amp;ldquo;活动&amp;rdquo;状态表明其内部状态是否允许其正常运行，或者在当前出现故障时自行恢复。损坏的&amp;ldquo;活动&amp;rdquo;状态意味着应用程序处于无法恢复的状态，并且基础结构应重新启动应用程序。</target>
        </trans-unit>
        <trans-unit id="b0b1ba32f50d6afd4afc4d72564f1ee3cf2b52fa" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;Readiness&amp;rdquo; state of an application tells whether the application is ready to handle traffic. A failing &amp;ldquo;Readiness&amp;rdquo; state tells the platform that it should not route traffic to the application for now. This typically happens during startup, while &lt;code&gt;CommandLineRunner&lt;/code&gt; and &lt;code&gt;ApplicationRunner&lt;/code&gt; components are being processed, or at any time if the application decides that it&amp;rsquo;s too busy for additional traffic.</source>
          <target state="translated">应用程序的&amp;ldquo;就绪&amp;rdquo;状态表明该应用程序是否已准备好处理流量。失败的&amp;ldquo;就绪&amp;rdquo;状态告诉平台它暂时不应该将流量路由到应用程序。这通常发生在启动过程中，正在处理 &lt;code&gt;CommandLineRunner&lt;/code&gt; 和 &lt;code&gt;ApplicationRunner&lt;/code&gt; 组件时，或者在任何时候，如果应用程序认为它对于其他流量来说都太忙了，就会发生这种情况。</target>
        </trans-unit>
        <trans-unit id="ef5e2797770653d13ad2c9e3d02cfcbc3af09034" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;Using Spring Boot&amp;rdquo; section includes a more complete example of &lt;a href=&quot;using-spring-boot#using-boot-ant&quot;&gt;using Apache Ant with &lt;code&gt;spring-boot-antlib&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&amp;ldquo;使用Spring Boot&amp;rdquo;部分包括&lt;a href=&quot;using-spring-boot#using-boot-ant&quot;&gt;将Apache Ant与 &lt;code&gt;spring-boot-antlib&lt;/code&gt; &lt;/a&gt;结合使用的更完整示例。</target>
        </trans-unit>
        <trans-unit id="48546ad43868b795c6ea57a55ca75197690ce37b" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;groups&amp;rdquo; are higher level items that do not themselves specify a value but instead provide a contextual grouping for properties. For example, the &lt;code&gt;server.port&lt;/code&gt; and &lt;code&gt;server.address&lt;/code&gt; properties are part of the &lt;code&gt;server&lt;/code&gt; group.</source>
          <target state="translated">&amp;ldquo;组&amp;rdquo;是更高级别的项目，它们本身并不指定值，而是提供属性的上下文分组。例如， &lt;code&gt;server.port&lt;/code&gt; 和 &lt;code&gt;server.address&lt;/code&gt; 属性是 &lt;code&gt;server&lt;/code&gt; 组的一部分。</target>
        </trans-unit>
        <trans-unit id="4e8a154eecb91356e70d1a30340dba15c52a2111" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;liveness&amp;rdquo; Probe should not depend on health checks for external systems. If the &lt;a href=&quot;spring-boot-features#boot-features-application-availability-liveness-state&quot;&gt;Liveness State of an application&lt;/a&gt; is broken, Kubernetes will try to solve that problem by restarting the application instance. This means that if an external system fails (e.g. a database, a Web API, an external cache), Kubernetes might restart all application instances and create cascading failures.</source>
          <target state="translated">&amp;ldquo;活动性&amp;rdquo;探针不应依赖于外部系统的运行状况检查。如果&lt;a href=&quot;spring-boot-features#boot-features-application-availability-liveness-state&quot;&gt;应用程序&lt;/a&gt;的活动状态被破坏，Kubernetes将尝试通过重新启动应用程序实例来解决该问题。这意味着，如果外部系统发生故障（例如，数据库，Web API，外部缓存），则Kubernetes可能会重新启动所有应用程序实例并造成级联故障。</target>
        </trans-unit>
        <trans-unit id="7927907f2066718f5033b44d0ace4a7fb2ee1193" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;mode&amp;rdquo; of operation. The default depends on the way the jar was built but is usually &lt;code&gt;auto&lt;/code&gt; (meaning it tries to guess if it is an init script by checking if it is a symlink in a directory called &lt;code&gt;init.d&lt;/code&gt;). You can explicitly set it to &lt;code&gt;service&lt;/code&gt; so that the &lt;code&gt;stop|start|status|restart&lt;/code&gt; commands work or to &lt;code&gt;run&lt;/code&gt; if you want to run the script in the foreground.</source>
          <target state="translated">操作的&amp;ldquo;模式&amp;rdquo;。默认值取决于jar的构建方式，但通常是 &lt;code&gt;auto&lt;/code&gt; （这意味着它会通过检查 &lt;code&gt;init.d&lt;/code&gt; 目录中的符号链接来尝试猜测它是否为初始化脚本）。如果要在前台运行脚本，可以将其显式设置为 &lt;code&gt;service&lt;/code&gt; 以便 &lt;code&gt;stop|start|status|restart&lt;/code&gt; 命令可以 &lt;code&gt;run&lt;/code&gt; 或运行。</target>
        </trans-unit>
        <trans-unit id="e659f752177bbf9146f974e3247119ef5d006089" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.spring.io/spring-ws/docs/3.0.10.RELEASE/reference/&quot;&gt;Spring Web Services features&lt;/a&gt; can be easily accessed with the &lt;code&gt;spring-boot-starter-webservices&lt;/code&gt; module.</source>
          <target state="translated">在&lt;a href=&quot;https://docs.spring.io/spring-ws/docs/3.0.10.RELEASE/reference/&quot;&gt;春天的Web服务功能&lt;/a&gt;可以与轻松访问 &lt;code&gt;spring-boot-starter-webservices&lt;/code&gt; 模块。</target>
        </trans-unit>
        <trans-unit id="2fcdd3e19da40d488211926cc3eb14fffcacc2ab" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc&quot;&gt;Spring Web MVC framework&lt;/a&gt; (often referred to as &amp;ldquo;Spring MVC&amp;rdquo;) is a rich &amp;ldquo;model view controller&amp;rdquo; web framework. Spring MVC lets you create special &lt;code&gt;@Controller&lt;/code&gt; or &lt;code&gt;@RestController&lt;/code&gt; beans to handle incoming HTTP requests. Methods in your controller are mapped to HTTP by using &lt;code&gt;@RequestMapping&lt;/code&gt; annotations.</source>
          <target state="translated">在&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc&quot;&gt;春天Web MVC框架&lt;/a&gt;（通常被称为&amp;ldquo;春MVC&amp;rdquo;）是一个丰富的&amp;ldquo;模型视图控制器&amp;rdquo; Web框架。Spring MVC使您可以创建特殊的 &lt;code&gt;@Controller&lt;/code&gt; 或 &lt;code&gt;@RestController&lt;/code&gt; Bean来处理传入的HTTP请求。使用 &lt;code&gt;@RequestMapping&lt;/code&gt; 批注将控制器中的方法映射到HTTP 。</target>
        </trans-unit>
        <trans-unit id="8a4f7109703eba279b755f1dd140baa5f2faad17" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/pivotal-cf/java-cfenv/&quot;&gt;Java CFEnv&lt;/a&gt; project is a better fit for tasks such as configuring a DataSource.</source>
          <target state="translated">在&lt;a href=&quot;https://github.com/pivotal-cf/java-cfenv/&quot;&gt;Java的CFEnv&lt;/a&gt;项目是一个更适合的任务，如配置数据源。</target>
        </trans-unit>
        <trans-unit id="4c347d234c0c0d120699e3f79bf4d61d3b11b91c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator&quot;&gt;&lt;code&gt;spring-boot-actuator&lt;/code&gt;&lt;/a&gt; module provides all of Spring Boot&amp;rsquo;s production-ready features. The recommended way to enable the features is to add a dependency on the &lt;code&gt;spring-boot-starter-actuator&lt;/code&gt; &amp;lsquo;Starter&amp;rsquo;.</source>
          <target state="translated">该&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator&quot;&gt; &lt;code&gt;spring-boot-actuator&lt;/code&gt; &lt;/a&gt;模块提供了所有的春天启动的生产就绪功能。推荐使用这些功能的方法是在 &lt;code&gt;spring-boot-starter-actuator&lt;/code&gt; 'Starter '上添加一个依赖项。</target>
        </trans-unit>
        <trans-unit id="5b3039ed494ff515ec6159ec13981f57880fd50f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jms/XAConnectionFactoryWrapper.java&quot;&gt;&lt;code&gt;XAConnectionFactoryWrapper&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/XADataSourceWrapper.java&quot;&gt;&lt;code&gt;XADataSourceWrapper&lt;/code&gt;&lt;/a&gt; interfaces can be used to support alternative embedded transaction managers. The interfaces are responsible for wrapping &lt;code&gt;XAConnectionFactory&lt;/code&gt; and &lt;code&gt;XADataSource&lt;/code&gt; beans and exposing them as regular &lt;code&gt;ConnectionFactory&lt;/code&gt; and &lt;code&gt;DataSource&lt;/code&gt; beans, which transparently enroll in the distributed transaction. DataSource and JMS auto-configuration use JTA variants, provided you have a &lt;code&gt;JtaTransactionManager&lt;/code&gt; bean and appropriate XA wrapper beans registered within your &lt;code&gt;ApplicationContext&lt;/code&gt;.</source>
          <target state="translated">该&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jms/XAConnectionFactoryWrapper.java&quot;&gt; &lt;code&gt;XAConnectionFactoryWrapper&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/XADataSourceWrapper.java&quot;&gt; &lt;code&gt;XADataSourceWrapper&lt;/code&gt; &lt;/a&gt;接口可用于支持替代嵌入式事务经理。这些接口负责包装 &lt;code&gt;XAConnectionFactory&lt;/code&gt; 和 &lt;code&gt;XADataSource&lt;/code&gt; Bean，并将它们作为常规 &lt;code&gt;ConnectionFactory&lt;/code&gt; 和 &lt;code&gt;DataSource&lt;/code&gt; Bean公开，以透明方式注册分布式事务。如果您在 &lt;code&gt;ApplicationContext&lt;/code&gt; 中注册了 &lt;code&gt;JtaTransactionManager&lt;/code&gt; bean和适当的XA包装器bean ，则DataSource和JMS自动配置使用JTA变体。</target>
        </trans-unit>
        <trans-unit id="a4e9f80173cb33fcb359ac9a55116430fb5f3cee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/atomikos/AtomikosXAConnectionFactoryWrapper.java&quot;&gt;AtomikosXAConnectionFactoryWrapper&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/atomikos/AtomikosXADataSourceWrapper.java&quot;&gt;AtomikosXADataSourceWrapper&lt;/a&gt; provide good examples of how to write XA wrappers.</source>
          <target state="translated">该&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/atomikos/AtomikosXAConnectionFactoryWrapper.java&quot;&gt;AtomikosXAConnectionFactoryWrapper&lt;/a&gt;和&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/atomikos/AtomikosXADataSourceWrapper.java&quot;&gt;AtomikosXADataSourceWrapper&lt;/a&gt;提供了如何编写XA包装很好的例子。</target>
        </trans-unit>
        <trans-unit id="08f7996835295b835728f6049dfeb4b4c75137da" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://spring.io&quot;&gt;spring.io&lt;/a&gt; web site contains many &amp;ldquo;Getting Started&amp;rdquo; &lt;a href=&quot;https://spring.io/guides&quot;&gt;guides&lt;/a&gt; that use Spring Boot. If you need to solve a specific problem, check there first.</source>
          <target state="translated">该&lt;a href=&quot;https://spring.io&quot;&gt;spring.io&lt;/a&gt;网站包含了许多&amp;ldquo;入门&amp;rdquo;&lt;a href=&quot;https://spring.io/guides&quot;&gt;指南&lt;/a&gt;使用Spring的引导。如果您需要解决特定问题，请先检查那里。</target>
        </trans-unit>
        <trans-unit id="e94fede85026b13151ccbc45ecff9fbb03995640" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://spring.io/projects/spring-framework&quot;&gt;Spring Framework&lt;/a&gt; provides extensive support for working with SQL databases, from direct JDBC access using &lt;code&gt;JdbcTemplate&lt;/code&gt; to complete &amp;ldquo;object relational mapping&amp;rdquo; technologies such as Hibernate. &lt;a href=&quot;https://spring.io/projects/spring-data&quot;&gt;Spring Data&lt;/a&gt; provides an additional level of functionality: creating &lt;code&gt;Repository&lt;/code&gt; implementations directly from interfaces and using conventions to generate queries from your method names.</source>
          <target state="translated">在&lt;a href=&quot;https://spring.io/projects/spring-framework&quot;&gt;Spring框架&lt;/a&gt;提供了利用使用SQL数据库，直接JDBC访问广泛支持 &lt;code&gt;JdbcTemplate&lt;/code&gt; 完成&amp;ldquo;对象关系映射&amp;rdquo;技术，比如Hibernate。&lt;a href=&quot;https://spring.io/projects/spring-data&quot;&gt;Spring Data&lt;/a&gt;提供了更高级别的功能：直接从接口创建 &lt;code&gt;Repository&lt;/code&gt; 实现，并使用约定从您的方法名称生成查询。</target>
        </trans-unit>
        <trans-unit id="25dc19ac11e2de1b5b54fb1a3324acc177308712" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.h2database.com&quot;&gt;H2 database&lt;/a&gt; provides a &lt;a href=&quot;https://www.h2database.com/html/quickstart.html#h2_console&quot;&gt;browser-based console&lt;/a&gt; that Spring Boot can auto-configure for you. The console is auto-configured when the following conditions are met:</source>
          <target state="translated">该&lt;a href=&quot;https://www.h2database.com&quot;&gt;H2数据库&lt;/a&gt;提供了一个&lt;a href=&quot;https://www.h2database.com/html/quickstart.html#h2_console&quot;&gt;基于浏览器的控制台&lt;/a&gt;是春天开机都能自动为您配置。满足以下条件时，将自动配置控制台：</target>
        </trans-unit>
        <trans-unit id="9607d742d9b41c03a4962acd7eae01ceb456dabc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.testcontainers.org/&quot;&gt;Testcontainers&lt;/a&gt; library provides a way to manage services running inside Docker containers. It integrates with JUnit, allowing you to write a test class that can start up a container before any of the tests run. Testcontainers is especially useful for writing integration tests that talk to a real backend service such as MySQL, MongoDB, Cassandra etc. Testcontainers can be used in a Spring Boot test as follows:</source>
          <target state="translated">该&lt;a href=&quot;https://www.testcontainers.org/&quot;&gt;Testcontainers&lt;/a&gt;库提供了一种方法来管理Docker容器中运行的服务。它与JUnit集成，允许您编写一个测试类，该类可以在运行任何测试之前启动容器。Testcontainers在编写与真实的后端服务（例如MySQL，MongoDB，Cassandra等）进行通信的集成测试时特别有用。Testcontainers可以在Spring Boot测试中使用，如下所示：</target>
        </trans-unit>
        <trans-unit id="b20fbaf8ec6e18caa0f13c56f5f5c2febb10a19d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;springProfile&amp;gt;&lt;/code&gt; tag lets you optionally include or exclude sections of configuration based on the active Spring profiles. Profile sections are supported anywhere within the &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; element. Use the &lt;code&gt;name&lt;/code&gt; attribute to specify which profile accepts the configuration. The &lt;code&gt;&amp;lt;springProfile&amp;gt;&lt;/code&gt; tag can contain a profile name (for example &lt;code&gt;staging&lt;/code&gt;) or a profile expression. A profile expression allows for more complicated profile logic to be expressed, for example &lt;code&gt;production &amp;amp; (eu-central | eu-west)&lt;/code&gt;. Check the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/core.html#beans-definition-profiles-java&quot;&gt;reference guide&lt;/a&gt; for more details. The following listing shows three sample profiles:</source>
          <target state="translated">通过 &lt;code&gt;&amp;lt;springProfile&amp;gt;&lt;/code&gt; 标记，您可以根据活动的Spring概要文件有选择地包括或排除配置部分。在 &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; 元素内的任何位置都支持概要文件部分。使用 &lt;code&gt;name&lt;/code&gt; 属性指定哪个配置文件接受配置。所述 &lt;code&gt;&amp;lt;springProfile&amp;gt;&lt;/code&gt; 标签可以包含一个配置文件的名称（例如 &lt;code&gt;staging&lt;/code&gt; ）或轮廓表达。配置文件表达式允许表达更复杂的配置文件逻辑，例如 &lt;code&gt;production &amp;amp; (eu-central | eu-west)&lt;/code&gt; 。有关更多详细信息，请参阅&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/core.html#beans-definition-profiles-java&quot;&gt;参考指南&lt;/a&gt;。以下清单显示了三个样本概要文件：</target>
        </trans-unit>
        <trans-unit id="97e3c0ef9cb3fbd7de89050e1ab497f67687ab3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;springProperty&amp;gt;&lt;/code&gt; tag lets you expose properties from the Spring &lt;code&gt;Environment&lt;/code&gt; for use within Logback. Doing so can be useful if you want to access values from your &lt;code&gt;application.properties&lt;/code&gt; file in your Logback configuration. The tag works in a similar way to Logback&amp;rsquo;s standard &lt;code&gt;&amp;lt;property&amp;gt;&lt;/code&gt; tag. However, rather than specifying a direct &lt;code&gt;value&lt;/code&gt;, you specify the &lt;code&gt;source&lt;/code&gt; of the property (from the &lt;code&gt;Environment&lt;/code&gt;). If you need to store the property somewhere other than in &lt;code&gt;local&lt;/code&gt; scope, you can use the &lt;code&gt;scope&lt;/code&gt; attribute. If you need a fallback value (in case the property is not set in the &lt;code&gt;Environment&lt;/code&gt;), you can use the &lt;code&gt;defaultValue&lt;/code&gt; attribute. The following example shows how to expose properties for use within Logback:</source>
          <target state="translated">该 &lt;code&gt;&amp;lt;springProperty&amp;gt;&lt;/code&gt; 标签可以让你暴露在春性 &lt;code&gt;Environment&lt;/code&gt; 对中的logback使用。如果要访问Logback配置中的 &lt;code&gt;application.properties&lt;/code&gt; 文件中的值，则这样做很有用。该标记的工作方式类似于Logback的标准 &lt;code&gt;&amp;lt;property&amp;gt;&lt;/code&gt; 标记。但是，您没有指定直接 &lt;code&gt;value&lt;/code&gt; ，而是指定了属性的 &lt;code&gt;source&lt;/code&gt; （来自 &lt;code&gt;Environment&lt;/code&gt; ）。如果需要将属性存储在 &lt;code&gt;local&lt;/code&gt; 范围以外的其他位置，则可以使用 &lt;code&gt;scope&lt;/code&gt; 属性。如果需要一个后备值（以防在 &lt;code&gt;Environment&lt;/code&gt; 未设置该属性的情况下）），则可以使用 &lt;code&gt;defaultValue&lt;/code&gt; 属性。以下示例显示如何公开在Logback中使用的属性：</target>
        </trans-unit>
        <trans-unit id="bd73404e139ca0d909d33804a40d534369db9de3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/cloudfoundryapplication&lt;/code&gt; path is not directly accessible to regular users. In order to use the endpoint, a valid UAA token must be passed with the request.</source>
          <target state="translated">该 &lt;code&gt;/cloudfoundryapplication&lt;/code&gt; 路径不是普通用户直接访问。为了使用端点，必须将有效的UAA令牌与请求一起传递。</target>
        </trans-unit>
        <trans-unit id="469cb10eb8b515e401db26e69f9cf7b6ec93d5f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/config&lt;/code&gt; subdirectory in the current directory</source>
          <target state="translated">当前目录中的 &lt;code&gt;/config&lt;/code&gt; 子目录</target>
        </trans-unit>
        <trans-unit id="46b976d52add218ee08bdb3fd391c230f2518f76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@ConditionalOnBean&lt;/code&gt; and &lt;code&gt;@ConditionalOnMissingBean&lt;/code&gt; annotations let a bean be included based on the presence or absence of specific beans. You can use the &lt;code&gt;value&lt;/code&gt; attribute to specify beans by type or &lt;code&gt;name&lt;/code&gt; to specify beans by name. The &lt;code&gt;search&lt;/code&gt; attribute lets you limit the &lt;code&gt;ApplicationContext&lt;/code&gt; hierarchy that should be considered when searching for beans.</source>
          <target state="translated">的 &lt;code&gt;@ConditionalOnBean&lt;/code&gt; 和 &lt;code&gt;@ConditionalOnMissingBean&lt;/code&gt; 注解让豆基于特定豆的存在或不存在被包括在内。您可以使用 &lt;code&gt;value&lt;/code&gt; 属性按类型指定bean或使用 &lt;code&gt;name&lt;/code&gt; 按名称指定bean。该 &lt;code&gt;search&lt;/code&gt; 属性让你限制 &lt;code&gt;ApplicationContext&lt;/code&gt; 应该豆类搜索时，必须考虑层次。</target>
        </trans-unit>
        <trans-unit id="b081ced39364eef4148262283717f33939a31d2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@ConditionalOnClass&lt;/code&gt; and &lt;code&gt;@ConditionalOnMissingClass&lt;/code&gt; annotations let &lt;code&gt;@Configuration&lt;/code&gt; classes be included based on the presence or absence of specific classes. Due to the fact that annotation metadata is parsed by using &lt;a href=&quot;https://asm.ow2.io/&quot;&gt;ASM&lt;/a&gt;, you can use the &lt;code&gt;value&lt;/code&gt; attribute to refer to the real class, even though that class might not actually appear on the running application classpath. You can also use the &lt;code&gt;name&lt;/code&gt; attribute if you prefer to specify the class name by using a &lt;code&gt;String&lt;/code&gt; value.</source>
          <target state="translated">通过 &lt;code&gt;@ConditionalOnClass&lt;/code&gt; 和 &lt;code&gt;@ConditionalOnMissingClass&lt;/code&gt; 批注，可以根据是否存在特定类来包含 &lt;code&gt;@Configuration&lt;/code&gt; 类。由于注释元数据是通过使用&lt;a href=&quot;https://asm.ow2.io/&quot;&gt;ASM&lt;/a&gt;进行解析的，因此即使该类可能实际上没有出现在正在运行的应用程序类路径上，您也可以使用 &lt;code&gt;value&lt;/code&gt; 属性来引用该类。如果您更喜欢通过使用 &lt;code&gt;String&lt;/code&gt; 值来指定类名称，则也可以使用 &lt;code&gt;name&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="f80f1746db6f44a2adbb8da7771f0d6ae388014c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@ConditionalOnExpression&lt;/code&gt; annotation lets configuration be included based on the result of a &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/core.html#expressions&quot;&gt;SpEL expression&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;@ConditionalOnExpression&lt;/code&gt; 注解让基于一个的结果配置被包括&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/core.html#expressions&quot;&gt;使用SpEL表达&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="39f02898cc20240accb0884ce1ba5c0375aa6d57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@ConditionalOnProperty&lt;/code&gt; annotation lets configuration be included based on a Spring Environment property. Use the &lt;code&gt;prefix&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; attributes to specify the property that should be checked. By default, any property that exists and is not equal to &lt;code&gt;false&lt;/code&gt; is matched. You can also create more advanced checks by using the &lt;code&gt;havingValue&lt;/code&gt; and &lt;code&gt;matchIfMissing&lt;/code&gt; attributes.</source>
          <target state="translated">该 &lt;code&gt;@ConditionalOnProperty&lt;/code&gt; 注解让基于Spring的环境属性配置包括在内。使用 &lt;code&gt;prefix&lt;/code&gt; 和 &lt;code&gt;name&lt;/code&gt; 属性指定应检查的属性。默认情况下，匹配存在且不等于 &lt;code&gt;false&lt;/code&gt; 的任何属性。您也可以使用 &lt;code&gt;havingValue&lt;/code&gt; 和 &lt;code&gt;matchIfMissing&lt;/code&gt; 属性来创建更高级的检查。</target>
        </trans-unit>
        <trans-unit id="1ce0888af73ef83c87e43cacceb8754216ba3f4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@ConditionalOnResource&lt;/code&gt; annotation lets configuration be included only when a specific resource is present. Resources can be specified by using the usual Spring conventions, as shown in the following example: &lt;code&gt;file:/home/user/test.dat&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;@ConditionalOnResource&lt;/code&gt; 注解让配置被包括仅当特定资源是否存在。可以使用通常的Spring约定来指定资源，如以下示例所示： &lt;code&gt;file:/home/user/test.dat&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa9920b7ba1d2cfc552f98eaabff4f1af95e94a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@ConditionalOnWarDeployment&lt;/code&gt; annotation lets configuration be included depending on whether the application is a traditional WAR application that is deployed to a container. This condition will not match for applications that are run with an embedded server.</source>
          <target state="translated">通过 &lt;code&gt;@ConditionalOnWarDeployment&lt;/code&gt; 批注，可以根据应用程序是否是已部署到容器的传统WAR应用程序来包含配置。对于嵌入式服务器运行的应用程序，此条件将不匹配。</target>
        </trans-unit>
        <trans-unit id="b34ce1523bc08d0ef0ed26c094846c8f7f624e5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@ConditionalOnWebApplication&lt;/code&gt; and &lt;code&gt;@ConditionalOnNotWebApplication&lt;/code&gt; annotations let configuration be included depending on whether the application is a &amp;ldquo;web application&amp;rdquo;. A servlet-based web application is any application that uses a Spring &lt;code&gt;WebApplicationContext&lt;/code&gt;, defines a &lt;code&gt;session&lt;/code&gt; scope, or has a &lt;code&gt;ConfigurableWebEnvironment&lt;/code&gt;. A reactive web application is any application that uses a &lt;code&gt;ReactiveWebApplicationContext&lt;/code&gt;, or has a &lt;code&gt;ConfigurableReactiveWebEnvironment&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;@ConditionalOnWebApplication&lt;/code&gt; 和 &lt;code&gt;@ConditionalOnNotWebApplication&lt;/code&gt; 注解让配置包含依赖于应用程序是否是一个&amp;ldquo;Web应用程序&amp;rdquo;。基于Servlet的Web应用程序是使用Spring &lt;code&gt;WebApplicationContext&lt;/code&gt; ，定义 &lt;code&gt;session&lt;/code&gt; 范围或具有 &lt;code&gt;ConfigurableWebEnvironment&lt;/code&gt; 的任何应用程序。反应式Web应用程序是使用 &lt;code&gt;ReactiveWebApplicationContext&lt;/code&gt; 或具有 &lt;code&gt;ConfigurableReactiveWebEnvironment&lt;/code&gt; 的任何应用程序。</target>
        </trans-unit>
        <trans-unit id="a2dfc135b2b5b9bdc9f6905cbf228943dc9a69ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@LocalServerPort&lt;/code&gt; annotation can be used to &lt;a href=&quot;howto#howto-discover-the-http-port-at-runtime&quot;&gt;inject the actual port used&lt;/a&gt; into your test. For convenience, tests that need to make REST calls to the started server can additionally &lt;code&gt;@Autowire&lt;/code&gt; a &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#webtestclient-tests&quot;&gt;&lt;code&gt;WebTestClient&lt;/code&gt;&lt;/a&gt;, which resolves relative links to the running server and comes with a dedicated API for verifying responses, as shown in the following example:</source>
          <target state="translated">该 &lt;code&gt;@LocalServerPort&lt;/code&gt; 标注可用于&lt;a href=&quot;howto#howto-discover-the-http-port-at-runtime&quot;&gt;注射使用的实际端口&lt;/a&gt;到您的测试。为了方便起见，需要对启动的服务器进行REST调用的测试可以另外 &lt;code&gt;@Autowire&lt;/code&gt; a &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#webtestclient-tests&quot;&gt; &lt;code&gt;WebTestClient&lt;/code&gt; &lt;/a&gt;，它解析到正在运行的服务器的相对链接，并带有用于验证响应的专用API，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="d2ff08a661df8f3f33d689e85b145e852511bf34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@RequestMapping&lt;/code&gt; annotation provides &amp;ldquo;routing&amp;rdquo; information. It tells Spring that any HTTP request with the &lt;code&gt;/&lt;/code&gt; path should be mapped to the &lt;code&gt;home&lt;/code&gt; method. The &lt;code&gt;@RestController&lt;/code&gt; annotation tells Spring to render the resulting string directly back to the caller.</source>
          <target state="translated">该 &lt;code&gt;@RequestMapping&lt;/code&gt; 注解提供&amp;ldquo;路由&amp;rdquo;的信息。它告诉Spring，任何带有 &lt;code&gt;/&lt;/code&gt; 路径的HTTP请求都应映射到 &lt;code&gt;home&lt;/code&gt; 方法。该 &lt;code&gt;@RestController&lt;/code&gt; 注解告诉Spring使得到的字符串直接返回给调用者。</target>
        </trans-unit>
        <trans-unit id="7c938bf9efd1a4a8e48aeb7ca2486068914ed052" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@RestController&lt;/code&gt; and &lt;code&gt;@RequestMapping&lt;/code&gt; annotations are Spring MVC annotations (they are not specific to Spring Boot). See the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc&quot;&gt;MVC section&lt;/a&gt; in the Spring Reference Documentation for more details.</source>
          <target state="translated">该 &lt;code&gt;@RestController&lt;/code&gt; 和 &lt;code&gt;@RequestMapping&lt;/code&gt; 注释是Spring MVC的注解（他们并不是专门针对春季启动）。有关更多详细信息，请参见Spring参考文档中的&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc&quot;&gt;MVC部分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6bc62c24155a8d00eed2ead87bab16f5f160a026" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@Value&lt;/code&gt; annotation is a core container feature, and it does not provide the same features as type-safe configuration properties. The following table summarizes the features that are supported by &lt;code&gt;@ConfigurationProperties&lt;/code&gt; and &lt;code&gt;@Value&lt;/code&gt;:</source>
          <target state="translated">所述 &lt;code&gt;@Value&lt;/code&gt; 注释是核心容器的功能，和它不提供相同的功能，类型安全配置属性。下表总结了 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 和 &lt;code&gt;@Value&lt;/code&gt; 支持的功能：</target>
        </trans-unit>
        <trans-unit id="ba26c37d6d91a71434edd71a304fe6f9ab39c9b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Application.java&lt;/code&gt; file would declare the &lt;code&gt;main&lt;/code&gt; method, along with the basic &lt;code&gt;@SpringBootApplication&lt;/code&gt;, as follows:</source>
          <target state="translated">该 &lt;code&gt;Application.java&lt;/code&gt; 文件将宣布的 &lt;code&gt;main&lt;/code&gt; 方法，以基本沿着 &lt;code&gt;@SpringBootApplication&lt;/code&gt; ，具体如下：</target>
        </trans-unit>
        <trans-unit id="e2371906c5464419d812f9d58bdaf47cefb5ecb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BasicErrorController&lt;/code&gt; can be used as a base class for a custom &lt;code&gt;ErrorController&lt;/code&gt;. This is particularly useful if you want to add a handler for a new content type (the default is to handle &lt;code&gt;text/html&lt;/code&gt; specifically and provide a fallback for everything else). To do so, extend &lt;code&gt;BasicErrorController&lt;/code&gt;, add a public method with a &lt;code&gt;@RequestMapping&lt;/code&gt; that has a &lt;code&gt;produces&lt;/code&gt; attribute, and create a bean of your new type.</source>
          <target state="translated">的 &lt;code&gt;BasicErrorController&lt;/code&gt; 可以用作自定义基类 &lt;code&gt;ErrorController&lt;/code&gt; 。如果您要为新的内容类型添加处理程序（默认是专门处理 &lt;code&gt;text/html&lt;/code&gt; 并为其他所有内容提供后备功能），则此功能特别有用。要做到这一点，延长 &lt;code&gt;BasicErrorController&lt;/code&gt; ，添加一个公共方法具有 &lt;code&gt;@RequestMapping&lt;/code&gt; 具有 &lt;code&gt;produces&lt;/code&gt; 属性，并创建新的类型的豆。</target>
        </trans-unit>
        <trans-unit id="01ae83e57a026c41b56e1a272450d78811c6e896" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CloudPlatform&lt;/code&gt; that must be detected for the document to be active.</source>
          <target state="translated">为使文档处于活动状态必须检测到的 &lt;code&gt;CloudPlatform&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c22305dff3edf5968bf5ec9cd766cb04a42ddc6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CommandLineRunner&lt;/code&gt; interfaces provides access to application arguments as a string array, whereas the &lt;code&gt;ApplicationRunner&lt;/code&gt; uses the &lt;code&gt;ApplicationArguments&lt;/code&gt; interface discussed earlier. The following example shows a &lt;code&gt;CommandLineRunner&lt;/code&gt; with a &lt;code&gt;run&lt;/code&gt; method:</source>
          <target state="translated">所述 &lt;code&gt;CommandLineRunner&lt;/code&gt; 接口提供访问的应用程序的参数作为一个字符串数组，而 &lt;code&gt;ApplicationRunner&lt;/code&gt; 使用 &lt;code&gt;ApplicationArguments&lt;/code&gt; 接口前面讨论。以下示例显示了带有 &lt;code&gt;run&lt;/code&gt; 方法的 &lt;code&gt;CommandLineRunner&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9aa0da4befa878001a7439fe5c89e059ef8ad14f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Environment&lt;/code&gt; has a set of default profiles (by default, &lt;code&gt;[default]&lt;/code&gt;) that are used if no active profiles are set. In other words, if no profiles are explicitly activated, then properties from &lt;code&gt;application-default&lt;/code&gt; are considered.</source>
          <target state="translated">所述 &lt;code&gt;Environment&lt;/code&gt; 具有一组默认的配置文件（默认情况下， &lt;code&gt;[default]&lt;/code&gt; ）如果没有活动的简档设置中使用。换句话说，如果未显式激活任何概要文件，那么将考虑 &lt;code&gt;application-default&lt;/code&gt; 的属性。</target>
        </trans-unit>
        <trans-unit id="721ad639d0cb3d7d034b7a827a75f87f655ba42a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Environment&lt;/code&gt; has already been prepared with all the usual property sources that Spring Boot loads by default. It is therefore possible to get the location of the file from the environment. The preceding example adds the &lt;code&gt;custom-resource&lt;/code&gt; property source at the end of the list so that a key defined in any of the usual other locations takes precedence. A custom implementation may define another order.</source>
          <target state="translated">该 &lt;code&gt;Environment&lt;/code&gt; 已经准备与所有常见的财产来源春天引导加载默认。因此可以从环境中获取文件的位置。前面的示例将 &lt;code&gt;custom-resource&lt;/code&gt; 属性源添加到列表的末尾，以便在其他任何常见位置中定义的键都具有优先权。定制实现可以定义另一个顺序。</target>
        </trans-unit>
        <trans-unit id="75019b030d7c79b7f17fa2ca2d795c3ba849a392" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ExecStart&lt;/code&gt; field does not declare the script action command, which means that the &lt;code&gt;run&lt;/code&gt; command is used by default.</source>
          <target state="translated">该 &lt;code&gt;ExecStart&lt;/code&gt; 字段不声明脚本操作命令，这意味着 &lt;code&gt;run&lt;/code&gt; 命令默认情况下使用。</target>
        </trans-unit>
        <trans-unit id="4227bf21306bbe0912d62c5210ef0303e8111b52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HealthContributorRegistry&lt;/code&gt; can be used to register and unregister health indicators at runtime.</source>
          <target state="translated">该 &lt;code&gt;HealthContributorRegistry&lt;/code&gt; 可以用来在运行时注册和注销的健康指标。</target>
        </trans-unit>
        <trans-unit id="94a9cc0f6b8a6a964902cdb7b64626e114a28b06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NamedParameterJdbcTemplate&lt;/code&gt; reuses the same &lt;code&gt;JdbcTemplate&lt;/code&gt; instance behind the scenes. If more than one &lt;code&gt;JdbcTemplate&lt;/code&gt; is defined and no primary candidate exists, the &lt;code&gt;NamedParameterJdbcTemplate&lt;/code&gt; is not auto-configured.</source>
          <target state="translated">该 &lt;code&gt;NamedParameterJdbcTemplate&lt;/code&gt; 重复使用相同 &lt;code&gt;JdbcTemplate&lt;/code&gt; 幕后实例。如果定义了多个 &lt;code&gt;JdbcTemplate&lt;/code&gt; 并且不存在主要候选对象，则不会自动配置 &lt;code&gt;NamedParameterJdbcTemplate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="42afb0edc0ffdfb001175b7ec31d20ee759a4d78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectMapper&lt;/code&gt; (or &lt;code&gt;XmlMapper&lt;/code&gt; for Jackson XML converter) instance (created by default) has the following customized properties:</source>
          <target state="translated">该 &lt;code&gt;ObjectMapper&lt;/code&gt; （或 &lt;code&gt;XmlMapper&lt;/code&gt; 杰克逊XML转换器）实例（默认创建）具有以下定义的属性：</target>
        </trans-unit>
        <trans-unit id="935296eb82aeeb8552d9818f85155cd86c1c7ff8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PID_FOLDER&lt;/code&gt;, &lt;code&gt;LOG_FOLDER&lt;/code&gt;, and &lt;code&gt;LOG_FILENAME&lt;/code&gt; variables are only valid for an &lt;code&gt;init.d&lt;/code&gt; service. For &lt;code&gt;systemd&lt;/code&gt;, the equivalent customizations are made by using the &amp;lsquo;service&amp;rsquo; script. See the &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.service.html&quot;&gt;service unit configuration man page&lt;/a&gt; for more details.</source>
          <target state="translated">该 &lt;code&gt;PID_FOLDER&lt;/code&gt; ， &lt;code&gt;LOG_FOLDER&lt;/code&gt; 和 &lt;code&gt;LOG_FILENAME&lt;/code&gt; 变量仅适用于一个 &lt;code&gt;init.d&lt;/code&gt; 服务。对于 &lt;code&gt;systemd&lt;/code&gt; ，使用'service'脚本进行等效的自定义。有关更多详细信息，请参见&lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.service.html&quot;&gt;服务单元配置手册页&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dc47d30fa504c13366f3c75e4ebf2a8889b3287f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrometheusPushGatewayManager&lt;/code&gt; can be tuned using properties under &lt;code&gt;management.metrics.export.prometheus.pushgateway&lt;/code&gt;. For advanced configuration, you can also provide your own &lt;code&gt;PrometheusPushGatewayManager&lt;/code&gt; bean.</source>
          <target state="translated">所述 &lt;code&gt;PrometheusPushGatewayManager&lt;/code&gt; 可以在使用属性被调谐 &lt;code&gt;management.metrics.export.prometheus.pushgateway&lt;/code&gt; 。对于高级配置，您还可以提供自己的 &lt;code&gt;PrometheusPushGatewayManager&lt;/code&gt; bean。</target>
        </trans-unit>
        <trans-unit id="27bed2d9e751c2469d22bc945024fcae30872e0e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Provides&lt;/code&gt; section of &amp;ldquo;INIT INFO&amp;rdquo;</source>
          <target state="translated">在 &lt;code&gt;Provides&lt;/code&gt; 的&amp;ldquo;INIT INFO&amp;rdquo;节</target>
        </trans-unit>
        <trans-unit id="3fe08251914f3297c6414ea59c228be49c870eaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RSocketRequester.Builder&lt;/code&gt; instance is a prototype bean, meaning each injection point will provide you with a new instance . This is done on purpose since this builder is stateful and you shouldn&amp;rsquo;t create requesters with different setups using the same instance.</source>
          <target state="translated">该 &lt;code&gt;RSocketRequester.Builder&lt;/code&gt; 实例是一个原型豆，这意味着每个注射点将为您提供一个新的实例。这是有意为之的，因为此构建器是有状态的，因此您不应使用相同的实例创建具有不同设置的请求者。</target>
        </trans-unit>
        <trans-unit id="78538ef81d7b92b8e5ef6020178cd991cc1b88e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RandomValuePropertySource&lt;/code&gt; is useful for injecting random values (for example, into secrets or test cases). It can produce integers, longs, uuids, or strings, as shown in the following example:</source>
          <target state="translated">该 &lt;code&gt;RandomValuePropertySource&lt;/code&gt; 是用于注入的随机值（例如，进入机密或试验例）是有用的。它可以产生整数，longs，uuid或字符串，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="7fa95eef8f1bf3e662b51deff0eeae3d8c214a65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ReactiveElasticsearchClient&lt;/code&gt; provided by Spring Data Elasticsearch</source>
          <target state="translated">Spring Data Elasticsearch提供的 &lt;code&gt;ReactiveElasticsearchClient&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b67ad1333d9dc3d86012c0497f9f646de3f14443" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SpringApplication.setBanner(&amp;hellip;​)&lt;/code&gt; method can be used if you want to generate a banner programmatically. Use the &lt;code&gt;org.springframework.boot.Banner&lt;/code&gt; interface and implement your own &lt;code&gt;printBanner()&lt;/code&gt; method.</source>
          <target state="translated">该 &lt;code&gt;SpringApplication.setBanner(&amp;hellip;​)&lt;/code&gt; 如果你想以编程方式生成的一面旗帜方法可以使用。使用 &lt;code&gt;org.springframework.boot.Banner&lt;/code&gt; 接口并实现自己的 &lt;code&gt;printBanner()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="e97e336dbfa277199c4cf5b19c4530d5771a9d9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SpringApplication&lt;/code&gt; class provides a convenient way to bootstrap a Spring application that is started from a &lt;code&gt;main()&lt;/code&gt; method. In many situations, you can delegate to the static &lt;code&gt;SpringApplication.run&lt;/code&gt; method, as shown in the following example:</source>
          <target state="translated">该 &lt;code&gt;SpringApplication&lt;/code&gt; 类提供了一个方便的方式来引导该从开始Spring应用程序 &lt;code&gt;main()&lt;/code&gt; 方法。在许多情况下，您可以委派给静态 &lt;code&gt;SpringApplication.run&lt;/code&gt; 方法，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="cfdf7376a6604d2d907516938f58fb40607406d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SpringApplication&lt;/code&gt; sends some special &lt;code&gt;ApplicationEvents&lt;/code&gt; to the listeners (some even before the context is created) and then registers the listeners for events published by the &lt;code&gt;ApplicationContext&lt;/code&gt; as well. See &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-application-events-and-listeners&quot;&gt;Application Events and Listeners&lt;/a&gt;&amp;rdquo; in the &amp;lsquo;Spring Boot features&amp;rsquo; section for a complete list.</source>
          <target state="translated">该 &lt;code&gt;SpringApplication&lt;/code&gt; 发送一些特殊 &lt;code&gt;ApplicationEvents&lt;/code&gt; 的听众（某些情况下被创建甚至更早），然后注册了在公布的事件侦听器 &lt;code&gt;ApplicationContext&lt;/code&gt; 为好。有关完整列表，请参见&amp;ldquo; Spring Boot功能&amp;rdquo;部分中的&amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-application-events-and-listeners&quot;&gt;应用程序事件和侦听器&lt;/a&gt;&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="d94d00572593094e4698a03c25af56be8831affc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SpringApplicationBuilder&lt;/code&gt; lets you chain together multiple method calls and includes &lt;code&gt;parent&lt;/code&gt; and &lt;code&gt;child&lt;/code&gt; methods that let you create a hierarchy, as shown in the following example:</source>
          <target state="translated">该 &lt;code&gt;SpringApplicationBuilder&lt;/code&gt; 让要链接的多个方法调用，包括 &lt;code&gt;parent&lt;/code&gt; 和 &lt;code&gt;child&lt;/code&gt; ，让你创建一个层次，如下面的例子方法：</target>
        </trans-unit>
        <trans-unit id="d546e5003d83eb9435580c72b399d415d7fc967f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autoconfigure&lt;/code&gt; module contains everything that is necessary to get started with the library. It may also contain configuration key definitions (such as &lt;code&gt;@ConfigurationProperties&lt;/code&gt;) and any callback interface that can be used to further customize how the components are initialized.</source>
          <target state="translated">该 &lt;code&gt;autoconfigure&lt;/code&gt; 模块包含一切，这是必要的上手库。它还可能包含配置键定义（例如 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; ）和可用于进一步自定义组件初始化方式的任何回调接口。</target>
        </trans-unit>
        <trans-unit id="4f0f0b7f0c0daa160494bce4d183f20724db2e55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autoconfigure&lt;/code&gt; module that contains the auto-configuration code for &quot;acme&quot;.</source>
          <target state="translated">该 &lt;code&gt;autoconfigure&lt;/code&gt; 模块，包含了&amp;ldquo;极致&amp;rdquo;的自动配置代码。</target>
        </trans-unit>
        <trans-unit id="46f121bd02613156ff9026a6f741f2bf99608a60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extract&lt;/code&gt; command can be used to easily split the application into layers to be added to the dockerfile. Here&amp;rsquo;s an example of a Dockerfile using &lt;code&gt;jarmode&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;extract&lt;/code&gt; 命令可用于容易地将应用程序分成层被添加到dockerfile。这是一个使用 &lt;code&gt;jarmode&lt;/code&gt; 的Dockerfile的示例。</target>
        </trans-unit>
        <trans-unit id="6e71b449a1b28f1075930fab10c775103a1cf641" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findmainclass&lt;/code&gt; task is used internally by &lt;code&gt;exejar&lt;/code&gt; to locate a class declaring a &lt;code&gt;main&lt;/code&gt;. If necessary, you can also use this task directly in your build. The following attributes are supported:</source>
          <target state="translated">该 &lt;code&gt;findmainclass&lt;/code&gt; 任务是通过内部使用 &lt;code&gt;exejar&lt;/code&gt; 无法找到类声明 &lt;code&gt;main&lt;/code&gt; 。如有必要，您也可以在构建中直接使用此任务。支持以下属性：</target>
        </trans-unit>
        <trans-unit id="53c3e9f59b6c0d490288a1b1d695036850d54722" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;httptrace&lt;/code&gt; endpoint can be used to obtain information about the request-response exchanges that are stored in the &lt;code&gt;HttpTraceRepository&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;httptrace&lt;/code&gt; 端点可用于获取关于存储在请求-响应交换信息 &lt;code&gt;HttpTraceRepository&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1db91c783e9050852cf01f162741b38632478f37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; property lists the IDs of the endpoints that are exposed. The &lt;code&gt;exclude&lt;/code&gt; property lists the IDs of the endpoints that should not be exposed. The &lt;code&gt;exclude&lt;/code&gt; property takes precedence over the &lt;code&gt;include&lt;/code&gt; property. Both &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; properties can be configured with a list of endpoint IDs.</source>
          <target state="translated">在 &lt;code&gt;include&lt;/code&gt; 属性列表被暴露端点的ID。在 &lt;code&gt;exclude&lt;/code&gt; 属性列表，不应该暴露端点的ID。在 &lt;code&gt;exclude&lt;/code&gt; 财产优先于 &lt;code&gt;include&lt;/code&gt; 财产。双方 &lt;code&gt;include&lt;/code&gt; 和 &lt;code&gt;exclude&lt;/code&gt; 属性可以与终端ID列表进行配置。</target>
        </trans-unit>
        <trans-unit id="88fc6c61780aac3a6b7835b1b541b06d6f91613e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt; command lets you create a new project by using &lt;a href=&quot;https://start.spring.io&quot;&gt;start.spring.io&lt;/a&gt; without leaving the shell, as shown in the following example:</source>
          <target state="translated">使用 &lt;code&gt;init&lt;/code&gt; 命令，可以使用&lt;a href=&quot;https://start.spring.io&quot;&gt;start.spring.io&lt;/a&gt;创建新项目，而无需离开外壳，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="9b2aa47365137326180ea7441dd95b14650a7f3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt; command supports many options. See the &lt;code&gt;help&lt;/code&gt; output for more details. For instance, the following command creates a Gradle project that uses Java 8 and &lt;code&gt;war&lt;/code&gt; packaging:</source>
          <target state="translated">在 &lt;code&gt;init&lt;/code&gt; 命令支持的许多选项。请参阅 &lt;code&gt;help&lt;/code&gt; 输出以获取更多详细信息。例如，以下命令创建一个使用Java 8和 &lt;code&gt;war&lt;/code&gt; 打包的Gradle项目：</target>
        </trans-unit>
        <trans-unit id="58445ca31c53a3a498f4ce45b83403a7579a5182" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.time.Period&lt;/code&gt; type never actually stores the number of weeks, it is a shortcut that means &amp;ldquo;7 days&amp;rdquo;.</source>
          <target state="translated">该 &lt;code&gt;java.time.Period&lt;/code&gt; 类型实际上从未存储周数，它是一个快捷方式，手段&amp;ldquo;7天&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="b169ae33eee76c2aed9871544ddc7e3d25da869f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.jms.ConnectionFactory&lt;/code&gt; interface provides a standard method of creating a &lt;code&gt;javax.jms.Connection&lt;/code&gt; for interacting with a JMS broker. Although Spring needs a &lt;code&gt;ConnectionFactory&lt;/code&gt; to work with JMS, you generally need not use it directly yourself and can instead rely on higher level messaging abstractions. (See the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/integration.html#jms&quot;&gt;relevant section&lt;/a&gt; of the Spring Framework reference documentation for details.) Spring Boot also auto-configures the necessary infrastructure to send and receive messages.</source>
          <target state="translated">所述 &lt;code&gt;javax.jms.ConnectionFactory&lt;/code&gt; 接口提供创建的标准方法 &lt;code&gt;javax.jms.Connection&lt;/code&gt; 用于与JMS代理交互。尽管Spring需要一个 &lt;code&gt;ConnectionFactory&lt;/code&gt; 来与JMS一起使用，但是您通常不需要自己直接使用它，而可以依赖于更高级别的消息传递抽象。（有关详细信息，请参见Spring Framework参考文档的&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/integration.html#jms&quot;&gt;相关部分&lt;/a&gt;。）Spring Boot还会自动配置必要的基础结构，以发送和接收消息。</target>
        </trans-unit>
        <trans-unit id="e4243a7c22dbda89aa04ac602cceaee736b42293" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jersey.config.server.response.setStatusOverSendError&lt;/code&gt; property must be set to &lt;code&gt;true&lt;/code&gt; on the application&amp;rsquo;s &lt;code&gt;ResourceConfig&lt;/code&gt; bean, as shown in the following example:</source>
          <target state="translated">该 &lt;code&gt;jersey.config.server.response.setStatusOverSendError&lt;/code&gt; 属性必须设置为 &lt;code&gt;true&lt;/code&gt; 应用的 &lt;code&gt;ResourceConfig&lt;/code&gt; 豆，如下面的例子：</target>
        </trans-unit>
        <trans-unit id="e33e91496f370a8691033b6cd63283f60dc39044" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;layertools&lt;/code&gt; mode can not be used with a &lt;a href=&quot;deployment#deployment-install&quot;&gt;fully executable Spring Boot archive&lt;/a&gt; that includes a launch script. Disable launch script configuration when building a jar file that is intended to be used with &lt;code&gt;layertools&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;layertools&lt;/code&gt; 模式不能与使用&lt;a href=&quot;deployment#deployment-install&quot;&gt;完全可执行春天引导归档文件&lt;/a&gt;，其中包括一个启动脚本。构建旨在与 &lt;code&gt;layertools&lt;/code&gt; 一起使用的jar文件时，请禁用启动脚本配置。</target>
        </trans-unit>
        <trans-unit id="39b941fc9c967679543d5e58516651e15b7cc91e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mvn dependency:tree&lt;/code&gt; command prints a tree representation of your project dependencies. You can see that &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; provides no dependencies by itself. To add the necessary dependencies, edit your &lt;code&gt;pom.xml&lt;/code&gt; and add the &lt;code&gt;spring-boot-starter-web&lt;/code&gt; dependency immediately below the &lt;code&gt;parent&lt;/code&gt; section:</source>
          <target state="translated">该 &lt;code&gt;mvn dependency:tree&lt;/code&gt; 命令打印你的项目依赖的树表示。您可以看到 &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; 本身不提供任何依赖关系。要添加必要的依赖关系，请编辑 &lt;code&gt;pom.xml&lt;/code&gt; 并在 &lt;code&gt;parent&lt;/code&gt; 部分的正下方添加 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; 依赖关系：</target>
        </trans-unit>
        <trans-unit id="cd449b240fbd615480586b8498f1ad2811cec847" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; attribute of each hint refers to the &lt;code&gt;name&lt;/code&gt; of a property. In the &lt;a href=&quot;#configuration-metadata-format&quot;&gt;initial example shown earlier&lt;/a&gt;, we provide five values for the &lt;code&gt;spring.jpa.hibernate.ddl-auto&lt;/code&gt; property: &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;validate&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;create&lt;/code&gt;, and &lt;code&gt;create-drop&lt;/code&gt;. Each value may have a description as well.</source>
          <target state="translated">每个提示的 &lt;code&gt;name&lt;/code&gt; 属性是指属性的 &lt;code&gt;name&lt;/code&gt; 。在&lt;a href=&quot;#configuration-metadata-format&quot;&gt;前面显示&lt;/a&gt;的初始示例中，我们为 &lt;code&gt;spring.jpa.hibernate.ddl-auto&lt;/code&gt; 属性提供了五个值： &lt;code&gt;none&lt;/code&gt; ， &lt;code&gt;validate&lt;/code&gt; ， &lt;code&gt;update&lt;/code&gt; ， &lt;code&gt;create&lt;/code&gt; 和 &lt;code&gt;create-drop&lt;/code&gt; 。每个值也可以具有描述。</target>
        </trans-unit>
        <trans-unit id="5b1a0ca51bc249ad5c25842cff691877bda49c15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;org.springframework.boot.loader.Launcher&lt;/code&gt; class is a special bootstrap class that is used as an executable jar&amp;rsquo;s main entry point. It is the actual &lt;code&gt;Main-Class&lt;/code&gt; in your jar file, and it is used to setup an appropriate &lt;code&gt;URLClassLoader&lt;/code&gt; and ultimately call your &lt;code&gt;main()&lt;/code&gt; method.</source>
          <target state="translated">该 &lt;code&gt;org.springframework.boot.loader.Launcher&lt;/code&gt; 类是作为一个可执行的JAR的主入口点一个特殊的启动类。它是jar文件中的实际 &lt;code&gt;Main-Class&lt;/code&gt; ，用于设置适当的 &lt;code&gt;URLClassLoader&lt;/code&gt; 并最终调用 &lt;code&gt;main()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="aa382bb91d9c46fd29c36cb891fa9c5e2eca8244" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prefix&lt;/code&gt; value for the annotation &lt;em&gt;must&lt;/em&gt; be in kebab case (lowercase and separated by &lt;code&gt;-&lt;/code&gt;, such as &lt;code&gt;acme.my-project.person&lt;/code&gt;).</source>
          <target state="translated">注释的 &lt;code&gt;prefix&lt;/code&gt; 值&lt;em&gt;必须&lt;/em&gt;为 &lt;code&gt;acme.my-project.person&lt;/code&gt; 大小写（小写并由 &lt;code&gt;-&lt;/code&gt; 分隔，例如acme.my-project.person）。</target>
        </trans-unit>
        <trans-unit id="f80f3e46cf3aba83fc84e0bd9d0bc3b13c7a3efc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;random.int*&lt;/code&gt; syntax is &lt;code&gt;OPEN value (,max) CLOSE&lt;/code&gt; where the &lt;code&gt;OPEN,CLOSE&lt;/code&gt; are any character and &lt;code&gt;value,max&lt;/code&gt; are integers. If &lt;code&gt;max&lt;/code&gt; is provided, then &lt;code&gt;value&lt;/code&gt; is the minimum value and &lt;code&gt;max&lt;/code&gt; is the maximum value (exclusive).</source>
          <target state="translated">该 &lt;code&gt;random.int*&lt;/code&gt; 语法是 &lt;code&gt;OPEN value (,max) CLOSE&lt;/code&gt; 在 &lt;code&gt;OPEN,CLOSE&lt;/code&gt; 任何字符和 &lt;code&gt;value,max&lt;/code&gt; 是整数。如果提供了 &lt;code&gt;max&lt;/code&gt; ，则 &lt;code&gt;value&lt;/code&gt; 是最小值，而 &lt;code&gt;max&lt;/code&gt; 是最大值（不包括）。</target>
        </trans-unit>
        <trans-unit id="92c09d5c2bca40e634098fb3907224ca27a10037" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; must be specified in kebab case (such as &lt;code&gt;my.property-name&lt;/code&gt;). However, properties can be added to the &lt;code&gt;Environment&lt;/code&gt; by using the relaxed rules.</source>
          <target state="translated">所述 &lt;code&gt;source&lt;/code&gt; 必须在串的情况下指定（如 &lt;code&gt;my.property-name&lt;/code&gt; ）。但是，可以使用宽松的规则将属性添加到 &lt;code&gt;Environment&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3636726c3a117c711de25481042d6c9ba17eb9d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-actuator&lt;/code&gt; module includes an endpoint that exposes all &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans. Point your web browser to &lt;code&gt;/actuator/configprops&lt;/code&gt; or use the equivalent JMX endpoint. See the &quot;&lt;a href=&quot;production-ready-features#production-ready-endpoints&quot;&gt;Production ready features&lt;/a&gt;&quot; section for details.</source>
          <target state="translated">该 &lt;code&gt;spring-boot-actuator&lt;/code&gt; 模块包括暴露所有端点 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 豆。将您的Web浏览器指向 &lt;code&gt;/actuator/configprops&lt;/code&gt; 或使用等效的JMX端点。有关详细信息，请参见&amp;ldquo;&lt;a href=&quot;production-ready-features#production-ready-endpoints&quot;&gt;生产就绪功能&lt;/a&gt;&amp;rdquo;部分。</target>
        </trans-unit>
        <trans-unit id="5197909b0af507eade78672416f565375886f966" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-dependencies&lt;/code&gt; POM manages the versions of common dependencies. The Spring Boot plugins for Maven and Gradle allow these managed dependency versions to be customized using build properties.</source>
          <target state="translated">该 &lt;code&gt;spring-boot-dependencies&lt;/code&gt; POM管理公共依赖的版本。Maven和Gradle的Spring Boot插件允许使用构建属性来自定义这些托管依赖项版本。</target>
        </trans-unit>
        <trans-unit id="24a169045e86fae66ef214f77616bac506614fc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-devtools&lt;/code&gt; module also includes support for quick application restarts. See the &lt;a href=&quot;#using-boot-devtools&quot;&gt;Developer Tools&lt;/a&gt; section later in this chapter and the &lt;a href=&quot;howto#howto-hotswapping&quot;&gt;Hot swapping &amp;ldquo;How-to&amp;rdquo;&lt;/a&gt; for details.</source>
          <target state="translated">该 &lt;code&gt;spring-boot-devtools&lt;/code&gt; 模块还包括用于快速重新启动应用程序的支持。有关详细信息，请参见本章后面的&amp;ldquo;&lt;a href=&quot;#using-boot-devtools&quot;&gt;开发人员工具&amp;rdquo;&lt;/a&gt;部分和&lt;a href=&quot;howto#howto-hotswapping&quot;&gt;热插拔&amp;ldquo;操作方法&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="403937e1b282fc9b977a1767f8a1ea953117907e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-devtools&lt;/code&gt; module includes an embedded LiveReload server that can be used to trigger a browser refresh when a resource is changed. LiveReload browser extensions are freely available for Chrome, Firefox and Safari from &lt;a href=&quot;http://livereload.com/extensions/&quot;&gt;livereload.com&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;spring-boot-devtools&lt;/code&gt; 模块包括可用于当资源被改变来触发浏览器刷新的嵌入式LiveReload服务器。可从&lt;a href=&quot;http://livereload.com/extensions/&quot;&gt;livereload.com&lt;/a&gt;免费获得适用于Chrome，Firefox和Safari的LiveReload浏览器扩展。</target>
        </trans-unit>
        <trans-unit id="d21999e894042f8f126dbf22782f225a6d09ecca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-devtools&lt;/code&gt; module includes support for automatic application restarts. While not as fast as technologies such as &lt;a href=&quot;https://www.jrebel.com/products/jrebel&quot;&gt;JRebel&lt;/a&gt; it is usually significantly faster than a &amp;ldquo;cold start&amp;rdquo;. You should probably give it a try before investigating some of the more complex reload options discussed later in this document.</source>
          <target state="translated">所述 &lt;code&gt;spring-boot-devtools&lt;/code&gt; 模块包括用于自动重新启动应用程序的支持。尽管不如&lt;a href=&quot;https://www.jrebel.com/products/jrebel&quot;&gt;JRebel&lt;/a&gt;这样的技术快，但通常比&amp;ldquo;冷启动&amp;rdquo;要快得多。在研究本文档后面讨论的一些更复杂的重载选项之前，您可能应该先尝试一下。</target>
        </trans-unit>
        <trans-unit id="bec24cc6ee4cc5e3022f5e887241caec1fac3794" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-loader&lt;/code&gt; modules lets Spring Boot support executable jar and war files. If you use the Maven plugin or the Gradle plugin, executable jars are automatically generated, and you generally do not need to know the details of how they work.</source>
          <target state="translated">该 &lt;code&gt;spring-boot-loader&lt;/code&gt; 模块让春天的引导支持可执行的JAR和WAR文件。如果使用Maven插件或Gradle插件，则会自动生成可执行jar，通常不需要了解其工作方式的详细信息。</target>
        </trans-unit>
        <trans-unit id="28f6c6bf076f0308c1d5b684728d52a5cf34c519" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-maven-plugin&lt;/code&gt; can be used to create an executable &amp;ldquo;fat&amp;rdquo; JAR. If you use the &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; POM, you can declare the plugin and your jars are repackaged as follows:</source>
          <target state="translated">该 &lt;code&gt;spring-boot-maven-plugin&lt;/code&gt; 可以用来创建可执行&amp;ldquo;胖&amp;rdquo; JAR。如果您使用 &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; POM，则可以声明插件，然后将jar重新打包，如下所示：</target>
        </trans-unit>
        <trans-unit id="39041d7eb3111a433c7f983736872746ed8ea106" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-starter-data-neo4j&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; enables the repository support as well as transaction management. Spring Boot supports both classic and reactive Neo4j repositories, using the &lt;code&gt;Neo4jTemplate&lt;/code&gt; or &lt;code&gt;ReactiveNeo4jTemplate&lt;/code&gt; beans. When Project Reactor is available on the classpath, the reactive style is also auto-configured.</source>
          <target state="translated">该 &lt;code&gt;spring-boot-starter-data-neo4j&lt;/code&gt; &amp;ldquo;启动器&amp;rdquo;使资源库的支持以及事务管理。Spring Boot使用 &lt;code&gt;Neo4jTemplate&lt;/code&gt; 或 &lt;code&gt;ReactiveNeo4jTemplate&lt;/code&gt; bean支持经典和反应性Neo4j存储库。当Project Reactor在类路径上可用时，反应式样式也会自动配置。</target>
        </trans-unit>
        <trans-unit id="483f1903268e3f91d0ef1d01107b555bd3ad8d04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; POM includes &lt;code&gt;&amp;lt;executions&amp;gt;&lt;/code&gt; configuration to bind the &lt;code&gt;repackage&lt;/code&gt; goal. If you do not use the parent POM, you need to declare this configuration yourself. See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#getting-started&quot;&gt;plugin documentation&lt;/a&gt; for details.</source>
          <target state="translated">所述 &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; POM包括 &lt;code&gt;&amp;lt;executions&amp;gt;&lt;/code&gt; 配置以结合 &lt;code&gt;repackage&lt;/code&gt; 的目标。如果不使用父POM，则需要自己声明此配置。有关详细信息，请参见&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#getting-started&quot;&gt;插件文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6cf9cf15ca05f4c5f3b426203649cabb9ae0c937" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-starter-rsocket&lt;/code&gt; starter provides both dependencies. Check out the &lt;a href=&quot;#boot-features-json-jackson&quot;&gt;Jackson support section&lt;/a&gt; to know more about customization possibilities.</source>
          <target state="translated">该 &lt;code&gt;spring-boot-starter-rsocket&lt;/code&gt; 启动同时提供的依赖。查阅&lt;a href=&quot;#boot-features-json-jackson&quot;&gt;Jackson支持部分，&lt;/a&gt;以了解有关定制可能性的更多信息。</target>
        </trans-unit>
        <trans-unit id="b4cd4daad81831cbf453a0ee4b3e7929e7eefa6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-starter-test&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; (in the &lt;code&gt;test&lt;/code&gt;&lt;code&gt;scope&lt;/code&gt;) contains the following provided libraries:</source>
          <target state="translated">所述 &lt;code&gt;spring-boot-starter-test&lt;/code&gt; &amp;ldquo;起动器&amp;rdquo;（在 &lt;code&gt;test&lt;/code&gt; &lt;code&gt;scope&lt;/code&gt; ）包含以下提供的库：</target>
        </trans-unit>
        <trans-unit id="97656fa938893cb5b235c01e442d7ba98252fbf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; starter depends on &lt;code&gt;io.projectreactor.netty:reactor-netty&lt;/code&gt; by default, which brings both server and client implementations. If you choose to use Jetty as a reactive server instead, you should add a dependency on the Jetty Reactive HTTP client library, &lt;code&gt;org.eclipse.jetty:jetty-reactive-httpclient&lt;/code&gt;. Using the same technology for server and client has it advantages, as it will automatically share HTTP resources between client and server.</source>
          <target state="translated">该 &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; 启动取决于 &lt;code&gt;io.projectreactor.netty:reactor-netty&lt;/code&gt; 默认情况下，这使服务器和客户端的实现。如果选择使用Jetty作为反应式服务器，则应在Jetty反应式HTTP客户端库 &lt;code&gt;org.eclipse.jetty:jetty-reactive-httpclient&lt;/code&gt; 上添加依赖项。对服务器和客户端使用相同的技术有其优势，因为它将自动在客户端和服务器之间共享HTTP资源。</target>
        </trans-unit>
        <trans-unit id="6cfbe3d2e449196a312740ebddf1a9e4c3d6fc62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-test-autoconfigure&lt;/code&gt; module includes a number of annotations that can be used to automatically configure such &amp;ldquo;slices&amp;rdquo;. Each of them works in a similar way, providing a &lt;code&gt;@&amp;hellip;​Test&lt;/code&gt; annotation that loads the &lt;code&gt;ApplicationContext&lt;/code&gt; and one or more &lt;code&gt;@AutoConfigure&amp;hellip;​&lt;/code&gt; annotations that can be used to customize auto-configuration settings.</source>
          <target state="translated">所述 &lt;code&gt;spring-boot-test-autoconfigure&lt;/code&gt; 模块包括多个可被用于自动地配置这样的&amp;ldquo;片&amp;rdquo;的注解。他们每个人的作品以类似的方式，提供了 &lt;code&gt;@&amp;hellip;​Test&lt;/code&gt; 注释，加载 &lt;code&gt;ApplicationContext&lt;/code&gt; 和一个或多个 &lt;code&gt;@AutoConfigure&amp;hellip;​&lt;/code&gt; 可用于自定义自动配置设置注释。</target>
        </trans-unit>
        <trans-unit id="d95f4c0636cbeb2042c3c5cf3f74e18a3fec3b67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-webflux-starter&lt;/code&gt; is using by default Reactor Netty as a server. Reactor Netty can be configured for HTTP/2 using the JDK support with JDK 9 or later. For JDK 8 environments, or for optimal runtime performance, this server also supports HTTP/2 with native libraries. To enable that, your application needs to have an additional dependency.</source>
          <target state="translated">该 &lt;code&gt;spring-boot-webflux-starter&lt;/code&gt; 默认情况下，反应堆的Netty作为服务器使用。使用JDK 9或更高版本的JDK支持，可以将Reactor Netty配置为HTTP / 2。对于JDK 8环境，或为了获得最佳的运行时性能，该服务器还支持带有本机库的HTTP / 2。为此，您的应用程序需要具有其他依赖项。</target>
        </trans-unit>
        <trans-unit id="05cdffb103f322ef78e99980bd0bd53308d635b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-devtools.properties&lt;/code&gt; file can contain properties prefixed with &lt;code&gt;restart.exclude&lt;/code&gt; and &lt;code&gt;restart.include&lt;/code&gt;. The &lt;code&gt;include&lt;/code&gt; elements are items that should be pulled up into the &amp;ldquo;restart&amp;rdquo; classloader, and the &lt;code&gt;exclude&lt;/code&gt; elements are items that should be pushed down into the &amp;ldquo;base&amp;rdquo; classloader. The value of the property is a regex pattern that is applied to the classpath, as shown in the following example:</source>
          <target state="translated">该 &lt;code&gt;spring-devtools.properties&lt;/code&gt; 文件可以包含前缀属性 &lt;code&gt;restart.exclude&lt;/code&gt; 和 &lt;code&gt;restart.include&lt;/code&gt; 。在 &lt;code&gt;include&lt;/code&gt; 元素是应该被拉高到&amp;ldquo;重启&amp;rdquo;的类加载器的项目，并 &lt;code&gt;exclude&lt;/code&gt; 元素是应该向下推入&amp;ldquo;基地&amp;rdquo;类加载器的项目。该属性的值是一个应用于类路径的正则表达式模式，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="7123fed31a38411feacabd23a94a61322d4f85ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-messaging&lt;/code&gt; module of the Spring Framework provides support for RSocket requesters and responders, both on the client and on the server side. See the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#rsocket-spring&quot;&gt;RSocket section&lt;/a&gt; of the Spring Framework reference for more details, including an overview of the RSocket protocol.</source>
          <target state="translated">Spring框架的 &lt;code&gt;spring-messaging&lt;/code&gt; 模块在客户端和服务器端都支持RSocket请求者和响应者。有关更多详细信息，请参见Spring Framework参考中的&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#rsocket-spring&quot;&gt;RSocket部分&lt;/a&gt;，其中包括RSocket协议的概述。</target>
        </trans-unit>
        <trans-unit id="6869840c99aab3e9472b7556d4812b3f8ab6cb77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring.datasource.jndi-name&lt;/code&gt; property can be used as an alternative to the &lt;code&gt;spring.datasource.url&lt;/code&gt;, &lt;code&gt;spring.datasource.username&lt;/code&gt;, and &lt;code&gt;spring.datasource.password&lt;/code&gt; properties to access the &lt;code&gt;DataSource&lt;/code&gt; from a specific JNDI location. For example, the following section in &lt;code&gt;application.properties&lt;/code&gt; shows how you can access a JBoss AS defined &lt;code&gt;DataSource&lt;/code&gt;:</source>
          <target state="translated">所述 &lt;code&gt;spring.datasource.jndi-name&lt;/code&gt; 属性可以被用作一个替代 &lt;code&gt;spring.datasource.url&lt;/code&gt; ， &lt;code&gt;spring.datasource.username&lt;/code&gt; 和 &lt;code&gt;spring.datasource.password&lt;/code&gt; 属性来访问 &lt;code&gt;DataSource&lt;/code&gt; 从一个特定的JNDI位置。例如， &lt;code&gt;application.properties&lt;/code&gt; 中的以下部分显示了如何访问JBoss AS定义的 &lt;code&gt;DataSource&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8c626c6f1eca5aeacec81583021fa88a66a8951a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring.jpa.hibernate.ddl-auto&lt;/code&gt; is a special case, because, depending on runtime conditions, it has different defaults. If an embedded database is used and no schema manager (such as Liquibase or Flyway) is handling the &lt;code&gt;DataSource&lt;/code&gt;, it defaults to &lt;code&gt;create-drop&lt;/code&gt;. In all other cases, it defaults to &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;spring.jpa.hibernate.ddl-auto&lt;/code&gt; 是一种特殊情况，因为根据运行条件下，它有不同的默认值。如果使用嵌入式数据库，并且没有模式管理器（例如Liquibase或Flyway）正在处理 &lt;code&gt;DataSource&lt;/code&gt; ，则默认为 &lt;code&gt;create-drop&lt;/code&gt; 。在所有其他情况下，它默认为 &lt;code&gt;none&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17d07996c8c684f36b5f680d103cf5330e458351" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring.profiles.active&lt;/code&gt; property follows the same ordering rules as other properties: The highest &lt;code&gt;PropertySource&lt;/code&gt; wins. This means that you can specify active profiles in &lt;code&gt;application.properties&lt;/code&gt; and then &lt;strong&gt;replace&lt;/strong&gt; them by using the command line switch.</source>
          <target state="translated">该 &lt;code&gt;spring.profiles.active&lt;/code&gt; 属性遵循相同的顺序规则，其他性能：最高 &lt;code&gt;PropertySource&lt;/code&gt; 胜。这意味着您可以在 &lt;code&gt;application.properties&lt;/code&gt; 中指定活动配置文件，然后使用命令行开关&lt;strong&gt;替换&lt;/strong&gt;它们。</target>
        </trans-unit>
        <trans-unit id="b02fbdcb0d479889cfce214519e3cb620d8a11ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;starter&lt;/code&gt; module that provides a dependency to the &lt;code&gt;autoconfigure&lt;/code&gt; module as well as &quot;acme&quot; and any additional dependencies that are typically useful. In a nutshell, adding the starter should provide everything needed to start using that library.</source>
          <target state="translated">所述 &lt;code&gt;starter&lt;/code&gt; 模块，它提供给一个依赖 &lt;code&gt;autoconfigure&lt;/code&gt; 模块以及&amp;ldquo;ACME&amp;rdquo;，并且通常是有用的任何附加的依赖性。简而言之，添加启动程序应提供开始使用该库所需的一切。</target>
        </trans-unit>
        <trans-unit id="ae9bae44820dbff8d0ce3cb1d4cbab97200b56a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useDefaultDelimiters&lt;/code&gt; property is important if you use standard Spring placeholders (such as &lt;code&gt;${placeholder}&lt;/code&gt;) in your configuration. If that property is not set to &lt;code&gt;false&lt;/code&gt;, these may be expanded by the build.</source>
          <target state="translated">该 &lt;code&gt;useDefaultDelimiters&lt;/code&gt; 如果使用标准的Spring占位符（如物业是重要的 &lt;code&gt;${placeholder}&lt;/code&gt; 在您的配置）。如果该属性未设置为 &lt;code&gt;false&lt;/code&gt; ，则可以通过构建扩展这些属性。</target>
        </trans-unit>
        <trans-unit id="c7d9a426fe16b174d5fc427549a836b029c24931" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;version&lt;/code&gt; command provides a quick way to check which version of Spring Boot you are using, as follows:</source>
          <target state="translated">该 &lt;code&gt;version&lt;/code&gt; 命令提供了一种快速的方法来检查你正在使用Spring启动的版本，具体如下：</target>
        </trans-unit>
        <trans-unit id="6c06561b39b03fe99dc352e9b7756652c5fdcdc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;webDriver&lt;/code&gt; scope created by Spring Boot will replace any user defined scope of the same name. If you define your own &lt;code&gt;webDriver&lt;/code&gt; scope you may find it stops working when you use &lt;code&gt;@WebMvcTest&lt;/code&gt;.</source>
          <target state="translated">由Spring Boot创建的 &lt;code&gt;webDriver&lt;/code&gt; 范围将替换任何用户定义的同名范围。如果定义自己的 &lt;code&gt;webDriver&lt;/code&gt; 范围，则在使用 &lt;code&gt;@WebMvcTest&lt;/code&gt; 时，它可能会停止工作。</target>
        </trans-unit>
        <trans-unit id="0f7a5cc765647f72d6d18240ab174c135dcede69" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;class-reference&lt;/strong&gt; provider auto-completes classes available in the project. This provider supports the following parameters:</source>
          <target state="translated">在&lt;strong&gt;类引用&lt;/strong&gt;项目中可用提供商自动完成课程。此提供程序支持以下参数：</target>
        </trans-unit>
        <trans-unit id="18081707bc74ae8011238f4a8e4482eeebfb432d" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;handle-as&lt;/strong&gt; provider lets you substitute the type of the property to a more high-level type. This typically happens when the property has a &lt;code&gt;java.lang.String&lt;/code&gt; type, because you do not want your configuration classes to rely on classes that may not be on the classpath. This provider supports the following parameters:</source>
          <target state="translated">该&lt;strong&gt;手柄的&lt;/strong&gt;供应商，您可以替代属性的类型到一个更高层次的类型。当该属性具有 &lt;code&gt;java.lang.String&lt;/code&gt; 类型时，通常会发生这种情况，因为您不希望配置类依赖于可能不在类路径中的类。此提供程序支持以下参数：</target>
        </trans-unit>
        <trans-unit id="12b6e8d24fd9f64d0ebe1bfd1711fc53c20fd418" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;logger-name&lt;/strong&gt; provider auto-completes valid logger names and &lt;a href=&quot;spring-boot-features#boot-features-custom-log-groups&quot;&gt;logger groups&lt;/a&gt;. Typically, package and class names available in the current project can be auto-completed. If groups are enabled (default) and if a custom logger group is identified in the configuration, auto-completion for it should be provided. Specific frameworks may have extra magic logger names that can be supported as well.</source>
          <target state="translated">该&lt;strong&gt;记录器名&lt;/strong&gt;提供商自动完成有效的记录名称和&lt;a href=&quot;spring-boot-features#boot-features-custom-log-groups&quot;&gt;记录器组&lt;/a&gt;。通常，可以自动完成当前项目中可用的程序包和类名。如果启用了组（默认），并且在配置中标识了自定义记录程序组，则应为其提供自动完成功能。特定的框架可能会有额外的魔术记录器名称，这些名称也可以得到支持。</target>
        </trans-unit>
        <trans-unit id="34d0bbca1d28c2f4ddb940d83559671857f1e3ad" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;spring-bean-reference&lt;/strong&gt; provider auto-completes the beans that are defined in the configuration of the current project. This provider supports the following parameters:</source>
          <target state="translated">该&lt;strong&gt;弹簧豆参考&lt;/strong&gt;提供商自动完成当前项目的配置中定义的豆类。此提供程序支持以下参数：</target>
        </trans-unit>
        <trans-unit id="0554661cffea2e285b70977856ad81e031da1d3c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;spring-profile-name&lt;/strong&gt; provider auto-completes the Spring profiles that are defined in the configuration of the current project.</source>
          <target state="translated">该&lt;strong&gt;弹簧轮廓名&lt;/strong&gt;提供商自动完成当前项目的配置中定义的春天配置文件。</target>
        </trans-unit>
        <trans-unit id="df2a00e25914df5f1a9c8401661b9ecb697403bc" translate="yes" xml:space="preserve">
          <source>The Advanced Message Queuing Protocol (AMQP) is a platform-neutral, wire-level protocol for message-oriented middleware. The Spring AMQP project applies core Spring concepts to the development of AMQP-based messaging solutions. Spring Boot offers several conveniences for working with AMQP through RabbitMQ, including the &lt;code&gt;spring-boot-starter-amqp&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo;.</source>
          <target state="translated">高级消息队列协议（AMQP）是面向消息中间件的与平台无关的有线级别协议。Spring AMQP项目将Spring的核心概念应用于基于AMQP的消息传递解决方案的开发。Spring Boot为通过RabbitMQ使用AMQP提供了许多便利，包括 &lt;code&gt;spring-boot-starter-amqp&lt;/code&gt; &amp;ldquo; Starter&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="392d7f6c06456171c9331d7b73e9eb88a079e690" translate="yes" xml:space="preserve">
          <source>The Ant property that should be set with the result</source>
          <target state="translated">蚂蚁属性应该与结果一起设置。</target>
        </trans-unit>
        <trans-unit id="3223e7635b676326f616a411a9a78f31805dd53d" translate="yes" xml:space="preserve">
          <source>The Cassandra driver has its own configuration infrastructure that loads an &lt;code&gt;application.conf&lt;/code&gt; at the root of the classpath.</source>
          <target state="translated">Cassandra驱动程序具有自己的配置基础结构，该结构在类路径的根目录中加载 &lt;code&gt;application.conf&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b46dd1f538d75505e988aadd7b2da9a8d9262fca" translate="yes" xml:space="preserve">
          <source>The Executable Jar Format</source>
          <target state="translated">可执行的 Jar 格式</target>
        </trans-unit>
        <trans-unit id="9140e110704472fbe4fbd267622755ee599d3d6b" translate="yes" xml:space="preserve">
          <source>The Gradle Wrapper provides a nice way of &amp;ldquo;obtaining&amp;rdquo; Gradle when you need to build a project. It is a small script and library that you commit alongside your code to bootstrap the build process. See &lt;a href=&quot;https://docs.gradle.org/current/userguide/gradle_wrapper.html&quot;&gt;docs.gradle.org/current/userguide/gradle_wrapper.html&lt;/a&gt; for details.</source>
          <target state="translated">当您需要构建项目时，Gradle包装器提供了一种&amp;ldquo;获取&amp;rdquo; Gradle的好方法。这是一个小的脚本和库，您随代码一起提交以引导构建过程。有关详细信息，请参见&lt;a href=&quot;https://docs.gradle.org/current/userguide/gradle_wrapper.html&quot;&gt;docs.gradle.org/current/userguide/gradle_wrapper.html&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="df00ea30e4eee2eebd67b7b39b01acab9d19fdf4" translate="yes" xml:space="preserve">
          <source>The H2 console is only intended for use during development, so you should take care to ensure that &lt;code&gt;spring.h2.console.enabled&lt;/code&gt; is not set to &lt;code&gt;true&lt;/code&gt; in production.</source>
          <target state="translated">H2控制台仅在开发期间使用，因此应注意确保在生产中未将 &lt;code&gt;spring.h2.console.enabled&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d695e9a533bcff37ea47db84167994f3764bd18a" translate="yes" xml:space="preserve">
          <source>The HTTP method of the predicate is determined by the operation type, as shown in the following table:</source>
          <target state="translated">谓词的HTTP方法由操作类型决定,如下表所示。</target>
        </trans-unit>
        <trans-unit id="621661a73f2fe9dff3d1d38c423db9f1e2309f1b" translate="yes" xml:space="preserve">
          <source>The HTTP status code in the response reflects the overall health status. By default, &lt;code&gt;OUT_OF_SERVICE&lt;/code&gt; and &lt;code&gt;DOWN&lt;/code&gt; map to 503. Any unmapped health statuses, including &lt;code&gt;UP&lt;/code&gt;, map to 200. You might also want to register custom status mappings if you access the health endpoint over HTTP. Configuring a custom mapping disables the defaults mappings for &lt;code&gt;DOWN&lt;/code&gt; and &lt;code&gt;OUT_OF_SERVICE&lt;/code&gt;. If you want to retain the default mappings they must be configured explicitly alongside any custom mappings. For example, the following property maps &lt;code&gt;FATAL&lt;/code&gt; to 503 (service unavailable) and retains the default mappings for &lt;code&gt;DOWN&lt;/code&gt; and &lt;code&gt;OUT_OF_SERVICE&lt;/code&gt;:</source>
          <target state="translated">响应中的HTTP状态代码反映了总体健康状态。默认情况下， &lt;code&gt;OUT_OF_SERVICE&lt;/code&gt; 和 &lt;code&gt;DOWN&lt;/code&gt; 映射到503。任何未映射的健康状态（包括 &lt;code&gt;UP&lt;/code&gt; ）都映射到200。如果您通过HTTP访问健康终结点，则可能还想注册自定义状态映射。配置自定义映射将禁用 &lt;code&gt;DOWN&lt;/code&gt; 和 &lt;code&gt;OUT_OF_SERVICE&lt;/code&gt; 的默认映射。如果要保留默认映射，则必须在所有自定义映射旁边显式配置它们。例如，以下属性将 &lt;code&gt;FATAL&lt;/code&gt; 映射到503（服务不可用），并保留 &lt;code&gt;DOWN&lt;/code&gt; 和 &lt;code&gt;OUT_OF_SERVICE&lt;/code&gt; 的默认映射：</target>
        </trans-unit>
        <trans-unit id="eced9c918eea580479e9ea11de8a30e4d159bd6d" translate="yes" xml:space="preserve">
          <source>The JSON object contained in the &lt;code&gt;deprecation&lt;/code&gt; attribute of each &lt;code&gt;properties&lt;/code&gt; element can contain the following attributes:</source>
          <target state="translated">每个 &lt;code&gt;properties&lt;/code&gt; 元素的 &lt;code&gt;deprecation&lt;/code&gt; 属性中包含的JSON对象可以包含以下属性：</target>
        </trans-unit>
        <trans-unit id="1cf68bf90b883556181e3f2698e051f1daa36f7d" translate="yes" xml:space="preserve">
          <source>The JSON object contained in the &lt;code&gt;groups&lt;/code&gt; array can contain the attributes shown in the following table:</source>
          <target state="translated">&lt;code&gt;groups&lt;/code&gt; 数组中包含的JSON对象可以包含下表中显示的属性：</target>
        </trans-unit>
        <trans-unit id="6bd2a1dc79e87b2f94595170285513bbb9977750" translate="yes" xml:space="preserve">
          <source>The JSON object contained in the &lt;code&gt;hints&lt;/code&gt; array can contain the attributes shown in the following table:</source>
          <target state="translated">&lt;code&gt;hints&lt;/code&gt; 数组中包含的JSON对象可以包含下表中显示的属性：</target>
        </trans-unit>
        <trans-unit id="120867670ada0d941e4e456e023c523da1c2f7ba" translate="yes" xml:space="preserve">
          <source>The JSON object contained in the &lt;code&gt;properties&lt;/code&gt; array can contain the attributes described in the following table:</source>
          <target state="translated">&lt;code&gt;properties&lt;/code&gt; 数组中包含的JSON对象可以包含下表中描述的属性：</target>
        </trans-unit>
        <trans-unit id="676c953b63738b23c76e72d686d725b59dbaf2bc" translate="yes" xml:space="preserve">
          <source>The JSON object contained in the &lt;code&gt;providers&lt;/code&gt; attribute of each &lt;code&gt;hint&lt;/code&gt; element can contain the attributes described in the following table:</source>
          <target state="translated">每个 &lt;code&gt;hint&lt;/code&gt; 元素的 &lt;code&gt;providers&lt;/code&gt; 属性中包含的JSON对象可以包含下表中描述的属性：</target>
        </trans-unit>
        <trans-unit id="206b4669ca7cfee9482634f5f89beb8cf5965e0d" translate="yes" xml:space="preserve">
          <source>The JSON object contained in the &lt;code&gt;values&lt;/code&gt; attribute of each &lt;code&gt;hint&lt;/code&gt; element can contain the attributes described in the following table:</source>
          <target state="translated">每个 &lt;code&gt;hint&lt;/code&gt; 元素的 &lt;code&gt;values&lt;/code&gt; 属性中包含的JSON对象可以包含下表中描述的属性：</target>
        </trans-unit>
        <trans-unit id="6d526e0f73421babdb3cf706c85e0dd06b76811e" translate="yes" xml:space="preserve">
          <source>The JSR 305 checks can be configured by adding the &lt;code&gt;-Xjsr305&lt;/code&gt; compiler flag with the following options: &lt;code&gt;-Xjsr305={strict|warn|ignore}&lt;/code&gt;. The default behavior is the same as &lt;code&gt;-Xjsr305=warn&lt;/code&gt;. The &lt;code&gt;strict&lt;/code&gt; value is required to have null-safety taken in account in Kotlin types inferred from Spring API but should be used with the knowledge that Spring API nullability declaration could evolve even between minor releases and more checks may be added in the future).</source>
          <target state="translated">可以通过添加带有以下选项的 &lt;code&gt;-Xjsr305&lt;/code&gt; 编译器标志来配置JSR 305检查： &lt;code&gt;-Xjsr305={strict|warn|ignore}&lt;/code&gt; 。缺省行为与 &lt;code&gt;-Xjsr305=warn&lt;/code&gt; 相同。在 &lt;code&gt;strict&lt;/code&gt; 值必须在考虑采取从春季API推断科特林类型的空安全，但应与知识使用的春天API可空声明甚至次要版本和更多的检查可能会在将来添加）之间的进化。</target>
        </trans-unit>
        <trans-unit id="3d8ecbd83787c5323387bf422a3f6a9724512774" translate="yes" xml:space="preserve">
          <source>The Java Persistence API is a standard technology that lets you &amp;ldquo;map&amp;rdquo; objects to relational databases. The &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; POM provides a quick way to get started. It provides the following key dependencies:</source>
          <target state="translated">Java Persistence API是一种标准技术，可让您将对象&amp;ldquo;映射&amp;rdquo;到关系数据库。该 &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; POM提供了上手的快捷方式。它提供以下关键依赖性：</target>
        </trans-unit>
        <trans-unit id="38c48ec0db14156e21ae3b5923c9225737572821" translate="yes" xml:space="preserve">
          <source>The Jolokia endpoint can then be exposed by adding &lt;code&gt;jolokia&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; to the &lt;code&gt;management.endpoints.web.exposure.include&lt;/code&gt; property. You can then access it by using &lt;code&gt;/actuator/jolokia&lt;/code&gt; on your management HTTP server.</source>
          <target state="translated">然后，可以通过将 &lt;code&gt;jolokia&lt;/code&gt; 或 &lt;code&gt;*&lt;/code&gt; 添加到 &lt;code&gt;management.endpoints.web.exposure.include&lt;/code&gt; 属性来暴露Jolokia端点。然后，您可以在管理HTTP服务器上使用 &lt;code&gt;/actuator/jolokia&lt;/code&gt; 来访问它。</target>
        </trans-unit>
        <trans-unit id="379e4875f025c99bfb6a37209b2b4025cd878b61" translate="yes" xml:space="preserve">
          <source>The Jolokia endpoint exposes Jolokia&amp;rsquo;s servlet as an actuator endpoint. As a result, it is specific to servlet environments such as Spring MVC and Jersey. The endpoint will not be available in a WebFlux application.</source>
          <target state="translated">Jolokia端点将Jolokia的servlet公开为执行器端点。结果，它特定于诸如Spring MVC和Jersey之类的servlet环境。该端点在WebFlux应用程序中将不可用。</target>
        </trans-unit>
        <trans-unit id="57cfa774ff47f72ab005455ed8077a18cf5ef5f1" translate="yes" xml:space="preserve">
          <source>The Log4j starters gather together the dependencies for common logging requirements (such as having Tomcat use &lt;code&gt;java.util.logging&lt;/code&gt; but configuring the output using Log4j 2).</source>
          <target state="translated">Log4j入门人员将依赖关系集中在一起，以满足常见的日志记录要求（例如让Tomcat使用 &lt;code&gt;java.util.logging&lt;/code&gt; ,但使用Log4j 2配置输出）。</target>
        </trans-unit>
        <trans-unit id="5ce5440e7fe6c9d33c3afa705b7b4569e22de89f" translate="yes" xml:space="preserve">
          <source>The Logback documentation has a &lt;a href=&quot;https://logback.qos.ch/manual/configuration.html&quot;&gt;dedicated section that covers configuration&lt;/a&gt; in some detail.</source>
          <target state="translated">Logback文档有一个&lt;a href=&quot;https://logback.qos.ch/manual/configuration.html&quot;&gt;专用部分，&lt;/a&gt;其中详细介绍了配置。</target>
        </trans-unit>
        <trans-unit id="773989b7ee9257032ba59f99add879ceb87b0137" translate="yes" xml:space="preserve">
          <source>The Maven and Gradle plugins can both generate that file. See &quot;&lt;a href=&quot;howto#howto-build-info&quot;&gt;Generate build information&lt;/a&gt;&quot; for more details.</source>
          <target state="translated">Maven和Gradle插件都可以生成该文件。有关更多详细&lt;a href=&quot;howto#howto-build-info&quot;&gt;信息，&lt;/a&gt;请参见&amp;ldquo;生成构建信息&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="1b51e9ac7441eb4c64fdba5320aa730fe666247b" translate="yes" xml:space="preserve">
          <source>The Reactive Relational Database Connectivity (&lt;a href=&quot;https://r2dbc.io&quot;&gt;R2DBC&lt;/a&gt;) project brings reactive programming APIs to relational databases. R2DBC&amp;rsquo;s &lt;code&gt;io.r2dbc.spi.Connection&lt;/code&gt; provides a standard method of working with non-blocking database connections. Connections are provided via a &lt;code&gt;ConnectionFactory&lt;/code&gt;, similar to a &lt;code&gt;DataSource&lt;/code&gt; with jdbc.</source>
          <target state="translated">&lt;a href=&quot;https://r2dbc.io&quot;&gt;响应式&lt;/a&gt;关系数据库连接（R2DBC）项目将响应式编程API引入关系数据库。R2DBC的 &lt;code&gt;io.r2dbc.spi.Connection&lt;/code&gt; 提供了一种处理非阻塞数据库连接的标准方法。通过ConnectionFactory提供 &lt;code&gt;ConnectionFactory&lt;/code&gt; ，类似于使用jdbc的 &lt;code&gt;DataSource&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ec12c6957d4cc24b08b74b98bf757e92cedd21d" translate="yes" xml:space="preserve">
          <source>The Servlet auto-configuration replaces the need to use &lt;code&gt;@Enable*HttpSession&lt;/code&gt;.</source>
          <target state="translated">Servlet自动配置取代了使用 &lt;code&gt;@Enable*HttpSession&lt;/code&gt; 的需要。</target>
        </trans-unit>
        <trans-unit id="c2dce2a828e59dab615c75b9f12bbcfb3a9c0421" translate="yes" xml:space="preserve">
          <source>The Spring &lt;code&gt;Environment&lt;/code&gt; has an API for this, but you would normally set a System property (&lt;code&gt;spring.profiles.active&lt;/code&gt;) or an OS environment variable (&lt;code&gt;SPRING_PROFILES_ACTIVE&lt;/code&gt;). Also, you can launch your application with a &lt;code&gt;-D&lt;/code&gt; argument (remember to put it before the main class or jar archive), as follows:</source>
          <target state="translated">Spring &lt;code&gt;Environment&lt;/code&gt; 为此提供了一个API，但是您通常会设置一个System属性（ &lt;code&gt;spring.profiles.active&lt;/code&gt; ）或一个OS环境变量（ &lt;code&gt;SPRING_PROFILES_ACTIVE&lt;/code&gt; ）。另外，您可以使用 &lt;code&gt;-D&lt;/code&gt; 参数启动应用程序（请记住将其放在主类或jar归档文件之前），如下所示：</target>
        </trans-unit>
        <trans-unit id="3846fbfc4ab1ba1df81d902f1c7361411aca7872" translate="yes" xml:space="preserve">
          <source>The Spring Boot AntLib module provides basic Spring Boot support for Apache Ant. You can use the module to create executable jars. To use the module, you need to declare an additional &lt;code&gt;spring-boot&lt;/code&gt; namespace in your &lt;code&gt;build.xml&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">Spring Boot AntLib模块为Apache Ant提供了基本的Spring Boot支持。您可以使用该模块创建可执行jar。要使用该模块，您需要在 &lt;code&gt;build.xml&lt;/code&gt; 中声明一个额外的 &lt;code&gt;spring-boot&lt;/code&gt; 命名空间，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="438b52c047ca95a5c73f7f753d11409ed8b93344" translate="yes" xml:space="preserve">
          <source>The Spring Boot CLI (Command Line Interface) is a command line tool that you can use to quickly prototype with Spring. It lets you run &lt;a href=&quot;https://groovy-lang.org/&quot;&gt;Groovy&lt;/a&gt; scripts, which means that you have a familiar Java-like syntax without so much boilerplate code.</source>
          <target state="translated">Spring Boot CLI（命令行界面）是一个命令行工具，可用于快速使用Spring进行原型设计。它使您可以运行&lt;a href=&quot;https://groovy-lang.org/&quot;&gt;Groovy&lt;/a&gt;脚本，这意味着您具有类似Java的熟悉语法，而无需太多样板代码。</target>
        </trans-unit>
        <trans-unit id="36e1607a9792dfbf95f7f18f40b2ef138344c987" translate="yes" xml:space="preserve">
          <source>The Spring Boot CLI (Command-Line Interface) can be installed manually by using SDKMAN! (the SDK Manager) or by using Homebrew or MacPorts if you are an OSX user. See &lt;em&gt;&lt;a href=&quot;getting-started#getting-started-installing-the-cli&quot;&gt;getting-started.html&lt;/a&gt;&lt;/em&gt; in the &amp;ldquo;Getting started&amp;rdquo; section for comprehensive installation instructions.</source>
          <target state="translated">可以使用SDKMAN手动安装Spring Boot CLI（命令行界面）！（SDK Manager）或使用Homebrew或MacPorts（如果您是OSX用户）。有关全面的安装说明，请参见&amp;ldquo;入门&amp;rdquo;部分中的&lt;em&gt;&lt;a href=&quot;getting-started#getting-started-installing-the-cli&quot;&gt;getting-started.html&lt;/a&gt;&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="cca88130776058a513c348492f8336c0786d9331" translate="yes" xml:space="preserve">
          <source>The Spring Boot CLI includes scripts that provide command completion for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29&quot;&gt;BASH&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;zsh&lt;/a&gt; shells. You can &lt;code&gt;source&lt;/code&gt; the script (also named &lt;code&gt;spring&lt;/code&gt;) in any shell or put it in your personal or system-wide bash completion initialization. On a Debian system, the system-wide scripts are in &lt;code&gt;/shell-completion/bash&lt;/code&gt; and all scripts in that directory are executed when a new shell starts. For example, to run the script manually if you have installed by using SDKMAN!, use the following commands:</source>
          <target state="translated">Spring Boot CLI包括为&lt;a href=&quot;https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29&quot;&gt;BASH&lt;/a&gt;和&lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;zsh&lt;/a&gt; Shell提供命令完成的脚本。您可以 &lt;code&gt;source&lt;/code&gt; 脚本（又称 &lt;code&gt;spring&lt;/code&gt; 在任何shell），或者把它放在你的个人或系统范围内的bash完成初始化。在Debian系统上，系统级脚本位于 &lt;code&gt;/shell-completion/bash&lt;/code&gt; 中,并且在启动新的Shell时将执行该目录中的所有脚本。例如，如果您是使用SDKMAN！安装的，则要手动运行脚本，请使用以下命令：</target>
        </trans-unit>
        <trans-unit id="06f9335d952182feb6c564e1d0b06211618424f6" translate="yes" xml:space="preserve">
          <source>The Spring Boot CLI is a command line tool that you can use if you want to quickly develop a Spring application. It lets you run Groovy scripts, which means that you have a familiar Java-like syntax without so much boilerplate code. You can also bootstrap a new project or write your own command for it.</source>
          <target state="translated">Spring Boot CLI是一个命令行工具,如果你想快速开发Spring应用,可以使用它。它可以让你运行Groovy脚本,这意味着你有一个熟悉的类似Java的语法,没有那么多的模板代码。你也可以引导一个新的项目,或者为它编写自己的命令。</target>
        </trans-unit>
        <trans-unit id="043dfcbdd7cf4ddd60fcd9e5d0868e36d87c0543" translate="yes" xml:space="preserve">
          <source>The Spring Boot CLI uses Aether, Maven&amp;rsquo;s dependency resolution engine, to resolve dependencies. The CLI makes use of the Maven configuration found in &lt;code&gt;~/.m2/settings.xml&lt;/code&gt; to configure Aether. The following configuration settings are honored by the CLI:</source>
          <target state="translated">Spring Boot CLI使用Maven的依赖关系解析引擎Aether来解决依赖关系。CLI使用 &lt;code&gt;~/.m2/settings.xml&lt;/code&gt; 中的Maven配置来配置Aether。CLI遵循以下配置设置：</target>
        </trans-unit>
        <trans-unit id="5fbd279c6f55259ecfe266d77e2ff146b09b0851" translate="yes" xml:space="preserve">
          <source>The Spring Boot Gradle Plugin provides Spring Boot support in Gradle, letting you package executable jar or war archives, run Spring Boot applications, and use the dependency management provided by &lt;code&gt;spring-boot-dependencies&lt;/code&gt;. It requires Gradle 6 (6.3 or later). Gradle 5.6.x is also supported but this support is deprecated and will be removed in a future release. Please refer to the plugin&amp;rsquo;s documentation to learn more:</source>
          <target state="translated">Spring Boot Gradle插件在Gradle中提供了Spring Boot支持，使您可以打包可执行jar或war归档文件，运行Spring Boot应用程序以及使用 &lt;code&gt;spring-boot-dependencies&lt;/code&gt; 提供的依赖项管理。它需要Gradle 6（6.3或更高版本）。还支持Gradle 5.6.x，但不支持该支持，在将来的版本中将删除该支持。请参考插件的文档以了解更多信息：</target>
        </trans-unit>
        <trans-unit id="54f538c286871558f86284cb1182ba1b396b1f7d" translate="yes" xml:space="preserve">
          <source>The Spring Boot Gradle plugin also includes a &lt;code&gt;bootRun&lt;/code&gt; task that can be used to run your application in an exploded form. The &lt;code&gt;bootRun&lt;/code&gt; task is added whenever you apply the &lt;code&gt;org.springframework.boot&lt;/code&gt; and &lt;code&gt;java&lt;/code&gt; plugins and is shown in the following example:</source>
          <target state="translated">Spring Boot Gradle插件还包含一个 &lt;code&gt;bootRun&lt;/code&gt; 任务，该任务可用于以爆炸形式运行您的应用程序。该 &lt;code&gt;bootRun&lt;/code&gt; 只要你申请的任务添加 &lt;code&gt;org.springframework.boot&lt;/code&gt; 和 &lt;code&gt;java&lt;/code&gt; 插件，并在下面的示例所示：</target>
        </trans-unit>
        <trans-unit id="1d72a5e3a96fe68c9304b4b27dbbce4f8b6fb842" translate="yes" xml:space="preserve">
          <source>The Spring Boot Maven Plugin provides Spring Boot support in Maven, letting you package executable jar or war archives and run an application &amp;ldquo;in-place&amp;rdquo;. To use it, you must use Maven 3.2 (or later).</source>
          <target state="translated">Spring Boot Maven插件在Maven中提供了Spring Boot支持，使您可以打包可执行jar或war归档文件并&amp;ldquo;就地&amp;rdquo;运行应用程序。要使用它，必须使用Maven 3.2（或更高版本）。</target>
        </trans-unit>
        <trans-unit id="dc5fc7a9280251cde770471539d9304cf41283b2" translate="yes" xml:space="preserve">
          <source>The Spring Boot Maven and Gradle plugins both make use of &lt;code&gt;spring-boot-loader-tools&lt;/code&gt; to actually generate jars. If you need to, you may use this library directly.</source>
          <target state="translated">Spring Boot Maven和Gradle插件都利用 &lt;code&gt;spring-boot-loader-tools&lt;/code&gt; 实际生成jar。如果需要，可以直接使用此库。</target>
        </trans-unit>
        <trans-unit id="d4cbf238f8887128ad7f0880523d5cc0c28e6d2f" translate="yes" xml:space="preserve">
          <source>The Spring Boot Maven plugin includes a &lt;code&gt;run&lt;/code&gt; goal that can be used to quickly compile and run your application. Applications run in an exploded form, as they do in your IDE. The following example shows a typical Maven command to run a Spring Boot application:</source>
          <target state="translated">Spring Boot Maven插件包含一个 &lt;code&gt;run&lt;/code&gt; 目标，可用于快速编译和运行您的应用程序。应用程序以爆炸形式运行，就像在IDE中一样。以下示例显示了运行Spring Boot应用程序的典型Maven命令：</target>
        </trans-unit>
        <trans-unit id="e5f6ef1c94c0d0bff182bbdfb7e4fa8b68f7624d" translate="yes" xml:space="preserve">
          <source>The Spring Boot auto-configuration tries its best to &amp;ldquo;do the right thing&amp;rdquo;, but sometimes things fail, and it can be hard to tell why.</source>
          <target state="translated">Spring Boot自动配置会尽力&amp;ldquo;做正确的事&amp;rdquo;，但有时会失败，并且很难说出原因。</target>
        </trans-unit>
        <trans-unit id="4d94a8af84187033fa78cd504bc8d25e95f30486" translate="yes" xml:space="preserve">
          <source>The Spring Boot developer tools are not limited to local development. You can also use several features when running applications remotely. Remote support is opt-in as enabling it can be a security risk. It should only be enabled when running on a trusted network or when secured with SSL. If neither of these options is available to you, you should not use DevTools' remote support. You should never enable support on a production deployment.</source>
          <target state="translated">Spring Boot 开发工具并不限于本地开发。您还可以在远程运行应用程序时使用一些功能。远程支持是可选的,因为启用它可能会有安全风险。只有在受信任的网络上运行或使用 SSL 保护时,才应启用远程支持。如果这两个选项都不适用,您就不应该使用DevTools的远程支持。您永远不应该在生产部署上启用支持。</target>
        </trans-unit>
        <trans-unit id="ec20f984d8bb89b391a34a27e1348da6dbd822a6" translate="yes" xml:space="preserve">
          <source>The Spring Boot reference guide is available as:</source>
          <target state="translated">Spring Boot参考指南可作为。</target>
        </trans-unit>
        <trans-unit id="542fec5e0331a63ad1aa41863776d38acf034074" translate="yes" xml:space="preserve">
          <source>The Spring Boot version that you are using, formatted for display (surrounded with brackets and prefixed with &lt;code&gt;v&lt;/code&gt;). For example &lt;code&gt;(v2.4.0)&lt;/code&gt;.</source>
          <target state="translated">您正在使用的Spring Boot版本，已格式化以用于显示（用方括号括起来并以 &lt;code&gt;v&lt;/code&gt; 开头）。例如 &lt;code&gt;(v2.4.0)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="65710c00dcec03a8ce247602b71068db2aa6abc2" translate="yes" xml:space="preserve">
          <source>The Spring Boot version that you are using. For example &lt;code&gt;2.4.0&lt;/code&gt;.</source>
          <target state="translated">您正在使用的Spring Boot版本。例如 &lt;code&gt;2.4.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e4232d3c93f28945cf2bb41bf7c23b3817f9cdd5" translate="yes" xml:space="preserve">
          <source>The Spring Framework includes a dedicated test module for such integration testing. You can declare a dependency directly to &lt;code&gt;org.springframework:spring-test&lt;/code&gt; or use the &lt;code&gt;spring-boot-starter-test&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; to pull it in transitively.</source>
          <target state="translated">Spring框架包括用于此类集成测试的专用测试模块。您可以直接向 &lt;code&gt;org.springframework:spring-test&lt;/code&gt; 声明依赖项，也可以使用 &lt;code&gt;spring-boot-starter-test&lt;/code&gt; &amp;ldquo;启动器&amp;rdquo;将其传递。</target>
        </trans-unit>
        <trans-unit id="66160b8cb2ba17126911c9d76648c4466f83af53" translate="yes" xml:space="preserve">
          <source>The Spring Framework provides an abstraction for sending email by using the &lt;code&gt;JavaMailSender&lt;/code&gt; interface, and Spring Boot provides auto-configuration for it as well as a starter module.</source>
          <target state="translated">Spring框架提供了使用 &lt;code&gt;JavaMailSender&lt;/code&gt; 接口发送电子邮件的抽象，Spring Boot为它提供了自动配置以及启动程序模块。</target>
        </trans-unit>
        <trans-unit id="cf442293655f8a917e78583ccf3b365e85904e8a" translate="yes" xml:space="preserve">
          <source>The Spring Framework provides extensive support for integrating with messaging systems, from simplified use of the JMS API using &lt;code&gt;JmsTemplate&lt;/code&gt; to a complete infrastructure to receive messages asynchronously. Spring AMQP provides a similar feature set for the Advanced Message Queuing Protocol. Spring Boot also provides auto-configuration options for &lt;code&gt;RabbitTemplate&lt;/code&gt; and RabbitMQ. Spring WebSocket natively includes support for STOMP messaging, and Spring Boot has support for that through starters and a small amount of auto-configuration. Spring Boot also has support for Apache Kafka.</source>
          <target state="translated">Spring框架为与消息传递系统集成提供了广泛的支持，从简化使用 &lt;code&gt;JmsTemplate&lt;/code&gt; 的JMS API的使用到完整的基础结构以异步接收消息。 Spring AMQP为高级消息队列协议提供了类似的功能集。 Spring Boot还为 &lt;code&gt;RabbitTemplate&lt;/code&gt; 和RabbitMQ提供了自动配置选项。 Spring WebSocket本身就包括对STOMP消息的支持，而Spring Boot通过启动器和少量的自动配置就对此提供了支持。 Spring Boot还支持Apache Kafka。</target>
        </trans-unit>
        <trans-unit id="ca2ca66e818b2945a06e2fd743cf5857a2977c51" translate="yes" xml:space="preserve">
          <source>The Spring Framework provides support for transparently adding caching to an application. At its core, the abstraction applies caching to methods, thus reducing the number of executions based on the information available in the cache. The caching logic is applied transparently, without any interference to the invoker. Spring Boot auto-configures the cache infrastructure as long as caching support is enabled via the &lt;code&gt;@EnableCaching&lt;/code&gt; annotation.</source>
          <target state="translated">Spring框架提供了对向应用程序透明添加缓存的支持。从本质上讲，抽象将缓存应用于方法，从而根据缓存中可用的信息减少执行次数。缓存逻辑是透明应用的，不会对调用者造成任何干扰。只要通过 &lt;code&gt;@EnableCaching&lt;/code&gt; 批注启用了缓存支持，Spring Boot就会自动配置缓存基础结构。</target>
        </trans-unit>
        <trans-unit id="0828a8549bb23bb76f7c5a3cd5a1f0b9bf6ef851" translate="yes" xml:space="preserve">
          <source>The StatsD registry pushes metrics over UDP to a StatsD agent eagerly. By default, metrics are exported to a &lt;a href=&quot;https://micrometer.io/docs/registry/statsD&quot;&gt;StatsD&lt;/a&gt; agent running on your local machine. The StatsD agent host, port, and protocol to use can be provided using:</source>
          <target state="translated">StatsD注册表急切地通过UDP将度量标准推送到StatsD代理。默认情况下，指标会导出到本地计算机上运行的&lt;a href=&quot;https://micrometer.io/docs/registry/statsD&quot;&gt;StatsD&lt;/a&gt;代理。可以使用以下命令提供要使用的StatsD代理主机，端口和协议：</target>
        </trans-unit>
        <trans-unit id="93b549c8e79a73845dc3974cfe7078b06df460e9" translate="yes" xml:space="preserve">
          <source>The above approach will only work for package level logging. Since relaxed binding always converts environment variables to lowercase, it&amp;rsquo;s not possible to configure logging for an individual class in this way. If you need to configure logging for a class, you can use &lt;a href=&quot;#boot-features-external-config-application-json&quot;&gt;the &lt;code&gt;SPRING_APPLICATION_JSON&lt;/code&gt;&lt;/a&gt; variable.</source>
          <target state="translated">以上方法仅适用于程序包级别的日志记录。由于宽松的绑定总是将环境变量转换为小写，因此无法以这种方式为单个类配置日志记录。如果您需要配置日志记录一类，你可以使用&lt;a href=&quot;#boot-features-external-config-application-json&quot;&gt;的 &lt;code&gt;SPRING_APPLICATION_JSON&lt;/code&gt; &lt;/a&gt;变量。</target>
        </trans-unit>
        <trans-unit id="19f5f200be38dc333871ff0273cad9957a50ea45" translate="yes" xml:space="preserve">
          <source>The above configuration allows Neo4j-related beans in the application to communicate with Neo4j running inside the Testcontainers-managed Docker container.</source>
          <target state="translated">上述配置允许应用程序中与Neo4j相关的Bean与运行在Testcontainers管理的Docker容器内的Neo4j进行通信。</target>
        </trans-unit>
        <trans-unit id="47b1ed0d69001900d30a1ec42f96b5694e065290" translate="yes" xml:space="preserve">
          <source>The above list only includes &lt;code&gt;SpringApplicationEvent&lt;/code&gt;s that are tied to a &lt;code&gt;SpringApplication&lt;/code&gt;. In addition to these, the following events are also published after &lt;code&gt;ApplicationPreparedEvent&lt;/code&gt; and before &lt;code&gt;ApplicationStartedEvent&lt;/code&gt;:</source>
          <target state="translated">上面的列表仅包括与 &lt;code&gt;SpringApplicationEvent&lt;/code&gt; 绑定的 &lt;code&gt;SpringApplication&lt;/code&gt; Event。除此之外，以下事件还将在 &lt;code&gt;ApplicationPreparedEvent&lt;/code&gt; 之后和 &lt;code&gt;ApplicationStartedEvent&lt;/code&gt; 之前发布：</target>
        </trans-unit>
        <trans-unit id="a5b637b6374353621829f5ffa586f42cd93c8ad1" translate="yes" xml:space="preserve">
          <source>The actual application &lt;em&gt;now&lt;/em&gt; shows the banner (as overridden by configuration) and uses three sources for the &lt;code&gt;ApplicationContext&lt;/code&gt; (in the following order): &lt;code&gt;demo.MyApp&lt;/code&gt;, &lt;code&gt;com.acme.Config&lt;/code&gt;, and &lt;code&gt;com.acme.ExtraConfig&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;现在&lt;/em&gt;，实际的应用程序显示横幅（被配置覆盖），并为 &lt;code&gt;ApplicationContext&lt;/code&gt; 使用三个源（按以下顺序）： &lt;code&gt;demo.MyApp&lt;/code&gt; ， &lt;code&gt;com.acme.Config&lt;/code&gt; 和 &lt;code&gt;com.acme.ExtraConfig&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f5822e26b4ddc5c5351c6aa8e32557bd450fef3e" translate="yes" xml:space="preserve">
          <source>The annotation processor applies a number of heuristics to extract the default value from the source model. Default values have to be provided statically. In particular, do not refer to a constant defined in another class. Also, the annotation processor cannot auto-detect default values for &lt;code&gt;Enum&lt;/code&gt;s and &lt;code&gt;Collections&lt;/code&gt;s.</source>
          <target state="translated">注释处理器应用多种启发式方法从源模型中提取默认值。必须静态提供默认值。特别是不要引用另一个类中定义的常量。此外，注释处理器无法自动检测 &lt;code&gt;Enum&lt;/code&gt; 和 &lt;code&gt;Collections&lt;/code&gt; 的默认值。</target>
        </trans-unit>
        <trans-unit id="6c55f7f2874348e88144ead57c857943fa734c32" translate="yes" xml:space="preserve">
          <source>The annotation processor automatically considers inner classes as nested properties. Rather than documenting the &lt;code&gt;ip&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; at the root of the namespace, we could create a sub-namespace for it. Consider the updated example:</source>
          <target state="translated">注释处理器自动将内部类视为嵌套属性。与其在命名空间的根部记录 &lt;code&gt;ip&lt;/code&gt; 和 &lt;code&gt;port&lt;/code&gt; ，不如为它创建一个子命名空间。考虑更新后的示例：</target>
        </trans-unit>
        <trans-unit id="4c33484868ab07ba4a359a5e23ad661a8fa40ba8" translate="yes" xml:space="preserve">
          <source>The appendix includes an &lt;a href=&quot;appendix-application-properties#common-application-properties&quot;&gt;&lt;code&gt;application.properties&lt;/code&gt;&lt;/a&gt; example with a list of the most common properties supported by Spring Boot. The definitive list comes from searching the source code for &lt;code&gt;@ConfigurationProperties&lt;/code&gt; and &lt;code&gt;@Value&lt;/code&gt; annotations as well as the occasional use of &lt;code&gt;Binder&lt;/code&gt;. For more about the exact ordering of loading properties, see &quot;&lt;a href=&quot;spring-boot-features#boot-features-external-config&quot;&gt;spring-boot-features.html&lt;/a&gt;&quot;.</source>
          <target state="translated">附录包括一个&lt;a href=&quot;appendix-application-properties#common-application-properties&quot;&gt; &lt;code&gt;application.properties&lt;/code&gt; &lt;/a&gt;示例，其中包含Spring Boot支持的最常见属性的列表。 &lt;code&gt;@Value&lt;/code&gt; 列表来自搜索源代码中的 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 和@Value批注以及偶尔使用的 &lt;code&gt;Binder&lt;/code&gt; 。有关加载属性的确切顺序的更多信息，请参见&amp;ldquo; &lt;a href=&quot;spring-boot-features#boot-features-external-config&quot;&gt;spring-boot-features.html&lt;/a&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="03107b934b088a5d52d2b6a1367366ddbc01f8a2" translate="yes" xml:space="preserve">
          <source>The application context is closed and the application cannot serve traffic.</source>
          <target state="translated">应用程序上下文已关闭,应用程序无法提供流量。</target>
        </trans-unit>
        <trans-unit id="8b8397da9f607a3aa3abf597f2c06ddc5a9898fc" translate="yes" xml:space="preserve">
          <source>The application context is refreshed. The application performs startup tasks and does not receive traffic yet.</source>
          <target state="translated">应用程序上下文被刷新。应用程序执行启动任务,还没有收到流量。</target>
        </trans-unit>
        <trans-unit id="4ffcfbe521ba7fdb052655a9d71898a5d247a209" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the program (the Spring Boot app).</source>
          <target state="translated">要传递给程序(Spring Boot应用程序)的参数。</target>
        </trans-unit>
        <trans-unit id="5856c12ddc5ea9c5c0c2ed232a2e8741663b7ea0" translate="yes" xml:space="preserve">
          <source>The auto-configuration adds the following features on top of Spring&amp;rsquo;s defaults:</source>
          <target state="translated">自动配置在Spring的默认值之上添加了以下功能：</target>
        </trans-unit>
        <trans-unit id="f4ed7c51ffd97219c0831f059fd99ef3d5b067ba" translate="yes" xml:space="preserve">
          <source>The auto-configuration applies when the default properties file for the configured resource bundle is available (i.e. &lt;code&gt;messages.properties&lt;/code&gt; by default). If your resource bundle contains only language-specific properties files, you are required to add the default. If no properties file is found that matches any of the configured base names, there will be no auto-configured &lt;code&gt;MessageSource&lt;/code&gt;.</source>
          <target state="translated">当配置的资源束的默认属性文件可用时（即，默认情况下为 &lt;code&gt;messages.properties&lt;/code&gt; ），将应用自动配置。如果您的资源包仅包含特定于语言的属性文件，则需要添加默认文件。如果找不到与任何配置的基本名称匹配的属性文件，则不会有自动配置的 &lt;code&gt;MessageSource&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="62ca6d745f237ac22b30cc52904cbb070d36100e" translate="yes" xml:space="preserve">
          <source>The auto-configured &lt;code&gt;Driver&lt;/code&gt; is created using &lt;code&gt;ConfigBuilder&lt;/code&gt;. To fine-tune its configuration, declare one or more &lt;code&gt;ConfigBuilderCustomizer&lt;/code&gt; beans. Each will be called in order with the &lt;code&gt;ConfigBuilder&lt;/code&gt; that is used to build the &lt;code&gt;Driver&lt;/code&gt;.</source>
          <target state="translated">自动配置的 &lt;code&gt;Driver&lt;/code&gt; 是使用 &lt;code&gt;ConfigBuilder&lt;/code&gt; 创建的。要微调其配置，请声明一个或多个 &lt;code&gt;ConfigBuilderCustomizer&lt;/code&gt; Bean。将使用用于构建 &lt;code&gt;Driver&lt;/code&gt; 的 &lt;code&gt;ConfigBuilder&lt;/code&gt; 依次调用每个函数。</target>
        </trans-unit>
        <trans-unit id="46e1d4a5484ff2020d924d0ed5814e4431a6e3b0" translate="yes" xml:space="preserve">
          <source>The auto-configured &lt;code&gt;MongoClient&lt;/code&gt; is created using a &lt;code&gt;MongoClientSettings&lt;/code&gt; bean. If you have defined your own &lt;code&gt;MongoClientSettings&lt;/code&gt;, it will be used without modification and the &lt;code&gt;spring.data.mongodb&lt;/code&gt; properties will be ignored. Otherwise a &lt;code&gt;MongoClientSettings&lt;/code&gt; will be auto-configured and will have the &lt;code&gt;spring.data.mongodb&lt;/code&gt; properties applied to it. In either case, you can declare one or more &lt;code&gt;MongoClientSettingsBuilderCustomizer&lt;/code&gt; beans to fine-tune the &lt;code&gt;MongoClientSettings&lt;/code&gt; configuration. Each will be called in order with the &lt;code&gt;MongoClientSettings.Builder&lt;/code&gt; that is used to build the &lt;code&gt;MongoClientSettings&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;MongoClientSettings&lt;/code&gt; Bean创建自动配置的 &lt;code&gt;MongoClient&lt;/code&gt; 。如果您定义了自己的 &lt;code&gt;MongoClientSettings&lt;/code&gt; ，则无需修改即可使用它，并且 &lt;code&gt;spring.data.mongodb&lt;/code&gt; 属性将被忽略。否则，将自动配置 &lt;code&gt;MongoClientSettings&lt;/code&gt; 并将其应用 &lt;code&gt;spring.data.mongodb&lt;/code&gt; 属性。无论哪种情况，都可以声明一个或多个 &lt;code&gt;MongoClientSettingsBuilderCustomizer&lt;/code&gt; Bean来微调 &lt;code&gt;MongoClientSettings&lt;/code&gt; 配置。每个将按顺序被称为与 &lt;code&gt;MongoClientSettings.Builder&lt;/code&gt; 用来建立 &lt;code&gt;MongoClientSettings&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b3ab5919a700cbeb4d86c46722b07f4e12b97d83" translate="yes" xml:space="preserve">
          <source>The auto-configured &lt;code&gt;TaskExecutorBuilder&lt;/code&gt; allows you to easily create instances that reproduce what the auto-configuration does by default.</source>
          <target state="translated">通过自动配置的 &lt;code&gt;TaskExecutorBuilder&lt;/code&gt; ，您可以轻松创建实例，以重现默认情况下自动配置的功能。</target>
        </trans-unit>
        <trans-unit id="f0e68e5b27e6e8799bcc6cb25c32dfa3d38d96e4" translate="yes" xml:space="preserve">
          <source>The banner that is printed on start up can be changed by adding a &lt;code&gt;banner.txt&lt;/code&gt; file to your classpath or by setting the &lt;code&gt;spring.banner.location&lt;/code&gt; property to the location of such a file. If the file has an encoding other than UTF-8, you can set &lt;code&gt;spring.banner.charset&lt;/code&gt;. In addition to a text file, you can also add a &lt;code&gt;banner.gif&lt;/code&gt;, &lt;code&gt;banner.jpg&lt;/code&gt;, or &lt;code&gt;banner.png&lt;/code&gt; image file to your classpath or set the &lt;code&gt;spring.banner.image.location&lt;/code&gt; property. Images are converted into an ASCII art representation and printed above any text banner.</source>
          <target state="translated">可以通过将 &lt;code&gt;banner.txt&lt;/code&gt; 文件添加到类路径或将 &lt;code&gt;spring.banner.location&lt;/code&gt; 属性设置为此类文件的位置来更改启动时打印的横幅。如果文件的编码不是UTF-8，则可以设置 &lt;code&gt;spring.banner.charset&lt;/code&gt; 。除了文本文件之外，您还可以在您的类路径中添加 &lt;code&gt;banner.gif&lt;/code&gt; ， &lt;code&gt;banner.jpg&lt;/code&gt; 或 &lt;code&gt;banner.png&lt;/code&gt; 图像文件，或设置 &lt;code&gt;spring.banner.image.location&lt;/code&gt; 属性。图像将转换为ASCII艺术作品并打印在任何文本横幅上方。</target>
        </trans-unit>
        <trans-unit id="f60a3e450c5a58875b996be7029eb5079deaccda" translate="yes" xml:space="preserve">
          <source>The basename of the resource bundle as well as several other attributes can be configured using the &lt;code&gt;spring.messages&lt;/code&gt; namespace, as shown in the following example:</source>
          <target state="translated">可以使用 &lt;code&gt;spring.messages&lt;/code&gt; 命名空间配置资源包的基本名称以及其他几个属性，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="2eb6c122d477c0557439c7c9fae7869478471c18" translate="yes" xml:space="preserve">
          <source>The basic features you get by default in a web application are:</source>
          <target state="translated">在Web应用程序中,你默认得到的基本功能是。</target>
        </trans-unit>
        <trans-unit id="f930fe8082fef364c14f3847d5c0e8359527c273" translate="yes" xml:space="preserve">
          <source>The bean name in the example above is &lt;code&gt;acme-com.example.AcmeProperties&lt;/code&gt;.</source>
          <target state="translated">上面的示例中的Bean名称为 &lt;code&gt;acme-com.example.AcmeProperties&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7cf942f1fe0f8a9478e5f571e7fed90d00146beb" translate="yes" xml:space="preserve">
          <source>The bean shown in the preceding example registers any &lt;code&gt;@ServerEndpoint&lt;/code&gt; annotated beans with the underlying WebSocket container. When deployed to a standalone servlet container, this role is performed by a servlet container initializer, and the &lt;code&gt;ServerEndpointExporter&lt;/code&gt; bean is not required.</source>
          <target state="translated">前面示例中显示的Bean将所有 &lt;code&gt;@ServerEndpoint&lt;/code&gt; 注释的Bean注册到基础WebSocket容器。当部署到独立的servlet容器时，此角色由servlet容器初始化程序执行，并且不需要 &lt;code&gt;ServerEndpointExporter&lt;/code&gt; Bean。</target>
        </trans-unit>
        <trans-unit id="18a62cdf18fa7d9a567c2378abb02e5531740c23" translate="yes" xml:space="preserve">
          <source>The binder is not aware of the metadata. If you provide that hint, you still need to transform the bean name into an actual Bean reference using by the &lt;code&gt;ApplicationContext&lt;/code&gt;.</source>
          <target state="translated">活页夹不知道元数据。如果提供了该提示，则仍需要使用 &lt;code&gt;ApplicationContext&lt;/code&gt; 将Bean名称转换为实际的Bean引用。</target>
        </trans-unit>
        <trans-unit id="22bf516c92012b073fc7d06f37f131ebef4d24e3" translate="yes" xml:space="preserve">
          <source>The cache abstraction does not provide an actual store and relies on abstraction materialized by the &lt;code&gt;org.springframework.cache.Cache&lt;/code&gt; and &lt;code&gt;org.springframework.cache.CacheManager&lt;/code&gt; interfaces.</source>
          <target state="translated">缓存抽象不提供实际的存储，而是依赖于由 &lt;code&gt;org.springframework.cache.Cache&lt;/code&gt; 和 &lt;code&gt;org.springframework.cache.CacheManager&lt;/code&gt; 接口实现的抽象。</target>
        </trans-unit>
        <trans-unit id="ab18f367e084ebc31ab4165b2a0132ebf4179ec1" translate="yes" xml:space="preserve">
          <source>The charset to use for console logging.</source>
          <target state="translated">控制台日志记录要使用的字符集。</target>
        </trans-unit>
        <trans-unit id="2c39b1bd0a53fefef47f2121843aeae23229e0ae" translate="yes" xml:space="preserve">
          <source>The charset to use for file logging (if &lt;code&gt;LOG_FILE&lt;/code&gt; is enabled).</source>
          <target state="translated">用于文件记录的字符集（如果启用了 &lt;code&gt;LOG_FILE&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c6ee4a07ee03739a34c9e868011d152e62b91e07" translate="yes" xml:space="preserve">
          <source>The class name of the data type of the group. For example, if the group were based on a class annotated with &lt;code&gt;@ConfigurationProperties&lt;/code&gt;, the attribute would contain the fully qualified name of that class. If it were based on a &lt;code&gt;@Bean&lt;/code&gt; method, it would be the return type of that method. If the type is not known, the attribute may be omitted.</source>
          <target state="translated">组数据类型的类名。例如，如果该组基于带有 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 注释的类，则该属性将包含该类的完全限定名称。如果基于 &lt;code&gt;@Bean&lt;/code&gt; 方法，则它将是该方法的返回类型。如果类型未知，则可以省略该属性。</target>
        </trans-unit>
        <trans-unit id="85a3d2abda41a2a6d52024cc6494ce58b2633299" translate="yes" xml:space="preserve">
          <source>The class name of the source that contributed this group. For example, if the group were based on a &lt;code&gt;@Bean&lt;/code&gt; method annotated with &lt;code&gt;@ConfigurationProperties&lt;/code&gt;, this attribute would contain the fully qualified name of the &lt;code&gt;@Configuration&lt;/code&gt; class that contains the method. If the source type is not known, the attribute may be omitted.</source>
          <target state="translated">贡献此组的源的类名。例如，如果组基于以 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 注释的 &lt;code&gt;@Bean&lt;/code&gt; 方法，则此属性将包含包含该方法的 &lt;code&gt;@Configuration&lt;/code&gt; 类的完全限定名称。如果源类型未知，则可以省略该属性。</target>
        </trans-unit>
        <trans-unit id="1b3c777ae294102ce279ea22c6cf6f3dda36e685" translate="yes" xml:space="preserve">
          <source>The class name of the source that contributed this property. For example, if the property were from a class annotated with &lt;code&gt;@ConfigurationProperties&lt;/code&gt;, this attribute would contain the fully qualified name of that class. If the source type is unknown, it may be omitted.</source>
          <target state="translated">贡献此属性的源的类名称。例如，如果属性来自带有 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 注释的类，则此属性将包含该类的完全限定名称。如果源类型未知，则可以省略。</target>
        </trans-unit>
        <trans-unit id="57f25cca62f41d7d1b99498bfbea0a294ee0e28c" translate="yes" xml:space="preserve">
          <source>The classpath &lt;code&gt;/config&lt;/code&gt; package</source>
          <target state="translated">classpath &lt;code&gt;/config&lt;/code&gt; 包</target>
        </trans-unit>
        <trans-unit id="07c00827ba443222e610d4e07dbdc5d3f368bf4b" translate="yes" xml:space="preserve">
          <source>The classpath index file can be provided in &lt;code&gt;BOOT-INF/classpath.idx&lt;/code&gt;. It provides a list of jar names (not including the directory) in the order that they should be added to the classpath. Each line must start with dash space (&lt;code&gt;&quot;-&amp;middot;&quot;&lt;/code&gt;) and names must be in double quotes.</source>
          <target state="translated">可以在 &lt;code&gt;BOOT-INF/classpath.idx&lt;/code&gt; 中提供类路径索引文件。它按照应将其添加到类路径的顺序提供了jar名称列表（不包括目录）。每行必须以破折号（ &lt;code&gt;&quot;-&amp;middot;&quot;&lt;/code&gt; ）开头，并且名称必须用双引号引起来。</target>
        </trans-unit>
        <trans-unit id="2e24c66207cf2198152840d6ed7b5b811c787c2f" translate="yes" xml:space="preserve">
          <source>The classpath root</source>
          <target state="translated">类路径根</target>
        </trans-unit>
        <trans-unit id="cfe52a53fd3af524c28242af05853c1c9f76f5cb" translate="yes" xml:space="preserve">
          <source>The commit time in &lt;code&gt;git.properties&lt;/code&gt; is expected to match the following format: &lt;code&gt;yyyy-MM-dd&amp;rsquo;T&amp;rsquo;HH:mm:ssZ&lt;/code&gt;. This is the default format for both plugins listed above. Using this format lets the time be parsed into a &lt;code&gt;Date&lt;/code&gt; and its format, when serialized to JSON, to be controlled by Jackson&amp;rsquo;s date serialization configuration settings.</source>
          <target state="translated">&lt;code&gt;git.properties&lt;/code&gt; 中的提交时间应与以下格式匹配： &lt;code&gt;yyyy-MM-dd&amp;rsquo;T&amp;rsquo;HH:mm:ssZ&lt;/code&gt; 。这是上面列出的两个插件的默认格式。使用此格式，可以将时间解析为 &lt;code&gt;Date&lt;/code&gt; 及其序列化为JSON时的格式，以由Jackson的日期序列化配置设置控制。</target>
        </trans-unit>
        <trans-unit id="5b7213ef66ff2ac13c7e66881b082c82ebd3ad5f" translate="yes" xml:space="preserve">
          <source>The configuration above almost works on its own. To complete the picture, you need to configure &lt;code&gt;TransactionManagers&lt;/code&gt; for the two &lt;code&gt;EntityManagers&lt;/code&gt; as well. If you mark one of them as &lt;code&gt;@Primary&lt;/code&gt;, it could be picked up by the default &lt;code&gt;JpaTransactionManager&lt;/code&gt; in Spring Boot. The other would have to be explicitly injected into a new instance. Alternatively, you might be able to use a JTA transaction manager that spans both.</source>
          <target state="translated">上面的配置几乎可以独立工作。要完成此操作，您还需要为两个 &lt;code&gt;EntityManagers&lt;/code&gt; 配置 &lt;code&gt;TransactionManagers&lt;/code&gt; 。如果将其中一个标记为 &lt;code&gt;@Primary&lt;/code&gt; ，则可以由Spring Boot中的默认 &lt;code&gt;JpaTransactionManager&lt;/code&gt; 拾取。另一个必须显式地注入到新实例中。另外，您也许可以使用跨这两个领域的JTA事务管理器。</target>
        </trans-unit>
        <trans-unit id="d3b4be8fcab55ae3c5d4df1f120ccf8df20c32ae" translate="yes" xml:space="preserve">
          <source>The configuration below will, however, cause the custom &lt;code&gt;WebMvcConfigurer&lt;/code&gt; to be loaded by the test slice.</source>
          <target state="translated">但是，以下配置将导致测试切片加载自定义 &lt;code&gt;WebMvcConfigurer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="157bf4f09ed2ae2ed5ef92bbc1c578044490a9ae" translate="yes" xml:space="preserve">
          <source>The configure action to apply when no user defined ConfigureRedisAction bean is present.</source>
          <target state="translated">当没有用户定义的ConfigureRedisAction bean时要应用的配置动作。</target>
        </trans-unit>
        <trans-unit id="52f719e4c7a3d02cbc511eec73853ffc1ca7494c" translate="yes" xml:space="preserve">
          <source>The constructor arguments passed to &lt;code&gt;SpringApplication&lt;/code&gt; are configuration sources for Spring beans. In most cases, these are references to &lt;code&gt;@Configuration&lt;/code&gt; classes, but they could also be references to XML configuration or to packages that should be scanned.</source>
          <target state="translated">传递给 &lt;code&gt;SpringApplication&lt;/code&gt; 的构造函数参数是Spring bean的配置源。在大多数情况下，它们是对 &lt;code&gt;@Configuration&lt;/code&gt; 类的引用，但它们也可以是对XML配置或应扫描的程序包的引用。</target>
        </trans-unit>
        <trans-unit id="09789446f3a97ced032781105baa15b6e8d10ffb" translate="yes" xml:space="preserve">
          <source>The contents of the &lt;code&gt;username&lt;/code&gt; file would be a config value, and the contents of &lt;code&gt;password&lt;/code&gt; would be a secret.</source>
          <target state="translated">&lt;code&gt;username&lt;/code&gt; 文件的内容将是一个配置值，而 &lt;code&gt;password&lt;/code&gt; 的内容将是一个秘密。</target>
        </trans-unit>
        <trans-unit id="951e8d5bd72bbe09daa273d40c4dc822ed539bb8" translate="yes" xml:space="preserve">
          <source>The context&amp;rsquo;s &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; can be customized by one or more &lt;code&gt;Jackson2ObjectMapperBuilderCustomizer&lt;/code&gt; beans. Such customizer beans can be ordered (Boot&amp;rsquo;s own customizer has an order of 0), letting additional customization be applied both before and after Boot&amp;rsquo;s customization.</source>
          <target state="translated">上下文的 &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; 可以由一个或多个 &lt;code&gt;Jackson2ObjectMapperBuilderCustomizer&lt;/code&gt; bean进行自定义。可以对此类定制器bean进行排序（Boot自己的定制器的顺序为0），从而可以在Boot定制之前和之后都应用其他定制。</target>
        </trans-unit>
        <trans-unit id="7bc897cc4c1cd158beb193bd86fc7ad32876efd0" translate="yes" xml:space="preserve">
          <source>The conversion word used when logging exceptions.</source>
          <target state="translated">记录异常时使用的转换词。</target>
        </trans-unit>
        <trans-unit id="2a7c2cf194bc3fe555215241664b11d6381088c9" translate="yes" xml:space="preserve">
          <source>The core class used to support loading nested jars is &lt;code&gt;org.springframework.boot.loader.jar.JarFile&lt;/code&gt;. It lets you load jar content from a standard jar file or from nested child jar data. When first loaded, the location of each &lt;code&gt;JarEntry&lt;/code&gt; is mapped to a physical file offset of the outer jar, as shown in the following example:</source>
          <target state="translated">用于支持加载嵌套jar的核心类是 &lt;code&gt;org.springframework.boot.loader.jar.JarFile&lt;/code&gt; 。它使您可以从标准jar文件或嵌套的子jar数据加载jar内容。首次加载时，每个 &lt;code&gt;JarEntry&lt;/code&gt; 的位置都映射到外部jar的物理文件偏移，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="2bc8ef1dd6d82ea9bb31ca380a54766442390ec8" translate="yes" xml:space="preserve">
          <source>The curated list contains all the Spring modules that you can use with Spring Boot as well as a refined list of third party libraries. The list is available as a standard Bills of Materials (&lt;code&gt;spring-boot-dependencies&lt;/code&gt;) that can be used with both &lt;a href=&quot;#using-boot-maven&quot;&gt;Maven&lt;/a&gt; and &lt;a href=&quot;#using-boot-gradle&quot;&gt;Gradle&lt;/a&gt;.</source>
          <target state="translated">精选列表包含可与Spring Boot一起使用的所有Spring模块，以及精炼的第三方库列表。该列表作为可与&lt;a href=&quot;#using-boot-maven&quot;&gt;Maven&lt;/a&gt;和&lt;a href=&quot;#using-boot-gradle&quot;&gt;Gradle&lt;/a&gt;一起使用的标准材料清单（ &lt;code&gt;spring-boot-dependencies&lt;/code&gt; ）提供。</target>
        </trans-unit>
        <trans-unit id="5f8722c305d47eba2a04c08a1cf537d8c34f4a4c" translate="yes" xml:space="preserve">
          <source>The current directory</source>
          <target state="translated">当前目录</target>
        </trans-unit>
        <trans-unit id="b85d795740c7ce43f348f94151af960132671ff6" translate="yes" xml:space="preserve">
          <source>The current process ID (discovered if possible and when not already defined as an OS environment variable).</source>
          <target state="translated">当前的进程ID(如果可能的话发现的,如果还没有定义为操作系统环境变量的话)。</target>
        </trans-unit>
        <trans-unit id="9fd8b82507de5b0ae2cd25cbbba4f9db105b98b4" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;UserDetailsService&lt;/code&gt; has a single user. The user name is &lt;code&gt;user&lt;/code&gt;, and the password is random and is printed at INFO level when the application starts, as shown in the following example:</source>
          <target state="translated">默认的 &lt;code&gt;UserDetailsService&lt;/code&gt; 具有单个用户。用户名为 &lt;code&gt;user&lt;/code&gt; ，密码为随机密码，并在应用程序启动时以INFO级别显示，如下例所示：</target>
        </trans-unit>
        <trans-unit id="899181f01f20273c96b6795f6fa0f3f8a845f790" translate="yes" xml:space="preserve">
          <source>The default embedded startup script written by the Maven or Gradle plugin can be customized in a number of ways. For most people, using the default script along with a few customizations is usually enough. If you find you cannot customize something that you need to, use the &lt;code&gt;embeddedLaunchScript&lt;/code&gt; option to write your own file entirely.</source>
          <target state="translated">由Maven或Gradle插件编写的默认嵌入式启动脚本可以通过多种方式进行自定义。对于大多数人来说，使用默认脚本和一些自定义设置通常就足够了。如果发现无法自定义所需的内容，请使用 &lt;code&gt;embeddedLaunchScript&lt;/code&gt; 选项完全编写自己的文件。</target>
        </trans-unit>
        <trans-unit id="8e0619164c8407f1c5ce6efa042c96430f88c82c" translate="yes" xml:space="preserve">
          <source>The default excludes are as follows:</source>
          <target state="translated">默认的排除如下:</target>
        </trans-unit>
        <trans-unit id="98c01e8b1bda124583ccc058e68cf54ce2f25119" translate="yes" xml:space="preserve">
          <source>The default location for logs is a &lt;code&gt;logs&lt;/code&gt; directory relative to the Tomcat base directory. By default, the &lt;code&gt;logs&lt;/code&gt; directory is a temporary directory, so you may want to fix Tomcat&amp;rsquo;s base directory or use an absolute path for the logs. In the preceding example, the logs are available in &lt;code&gt;my-tomcat/logs&lt;/code&gt; relative to the working directory of the application.</source>
          <target state="translated">日志的默认位置是相对于Tomcat基本目录的 &lt;code&gt;logs&lt;/code&gt; 目录。默认情况下， &lt;code&gt;logs&lt;/code&gt; 目录是一个临时目录，因此您可能需要修复Tomcat的基本目录或对日志使用绝对路径。在前面的示例中，相对于应用程序的工作目录， &lt;code&gt;my-tomcat/logs&lt;/code&gt; 位于my-tomcat / logs中。</target>
        </trans-unit>
        <trans-unit id="05bf6a92451ac7f072fd3c63a0862668a30277a6" translate="yes" xml:space="preserve">
          <source>The default log configuration echoes messages to the console as they are written. By default, &lt;code&gt;ERROR&lt;/code&gt;-level, &lt;code&gt;WARN&lt;/code&gt;-level, and &lt;code&gt;INFO&lt;/code&gt;-level messages are logged. You can also enable a &amp;ldquo;debug&amp;rdquo; mode by starting your application with a &lt;code&gt;--debug&lt;/code&gt; flag.</source>
          <target state="translated">默认日志配置在写入消息时将消息回显到控制台。默认情况下，将记录 &lt;code&gt;ERROR&lt;/code&gt; 级别， &lt;code&gt;WARN&lt;/code&gt; 级别和 &lt;code&gt;INFO&lt;/code&gt; 级别的消息。您也可以通过使用 &lt;code&gt;--debug&lt;/code&gt; 标志启动应用程序来启用&amp;ldquo;调试&amp;rdquo;模式。</target>
        </trans-unit>
        <trans-unit id="7eea78e97b944920793d8339904497e4fe964a53" translate="yes" xml:space="preserve">
          <source>The default log output from Spring Boot resembles the following example:</source>
          <target state="translated">Spring Boot的默认日志输出类似于下面的例子。</target>
        </trans-unit>
        <trans-unit id="e7321b692ecca3e36077a860c5d4f0f144bb0992" translate="yes" xml:space="preserve">
          <source>The default metadata is tied to the version of the CLI that you use. It changes only when you move to a new version of the CLI, putting you in control of when the versions of your dependencies may change. A table showing the dependencies and their versions that are included in the default metadata can be found in the &lt;a href=&quot;appendix-dependency-versions#dependency-versions&quot;&gt;appendix&lt;/a&gt;.</source>
          <target state="translated">默认元数据与您使用的CLI版本相关。仅当您移至新版本的CLI时，它才会更改，从而使您可以控制依赖项的版本何时更改。&lt;a href=&quot;appendix-dependency-versions#dependency-versions&quot;&gt;附录&lt;/a&gt;中提供了一个表格，其中显示了默认元数据中包含的依赖关系及其版本。</target>
        </trans-unit>
        <trans-unit id="7226a44b5bd8cb7064a98fb24cf411273c4e6e1a" translate="yes" xml:space="preserve">
          <source>The default response status for an endpoint operation depends on the operation type (read, write, or delete) and what, if anything, the operation returns.</source>
          <target state="translated">端点操作的默认响应状态取决于操作类型(读、写或删除)以及操作返回的内容(如果有的话)。</target>
        </trans-unit>
        <trans-unit id="05d9824ec45cabc47c4fcbe24753427a6f1d1f57" translate="yes" xml:space="preserve">
          <source>The default script supports most Linux distributions and is tested on CentOS and Ubuntu. Other platforms, such as OS X and FreeBSD, require the use of a custom &lt;code&gt;embeddedLaunchScript&lt;/code&gt;.</source>
          <target state="translated">默认脚本支持大多数Linux发行版，并已在CentOS和Ubuntu上进行了测试。其他平台，例如OS X和FreeBSD，则需要使用自定义的 &lt;code&gt;embeddedLaunchScript&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="163deb6f3734d9e7e064c6958b4776c17acc0f83" translate="yes" xml:space="preserve">
          <source>The default security configuration is implemented in &lt;code&gt;SecurityAutoConfiguration&lt;/code&gt; and &lt;code&gt;UserDetailsServiceAutoConfiguration&lt;/code&gt;. &lt;code&gt;SecurityAutoConfiguration&lt;/code&gt; imports &lt;code&gt;SpringBootWebSecurityConfiguration&lt;/code&gt; for web security and &lt;code&gt;UserDetailsServiceAutoConfiguration&lt;/code&gt; configures authentication, which is also relevant in non-web applications. To switch off the default web application security configuration completely or to combine multiple Spring Security components such as OAuth 2 Client and Resource Server, add a bean of type &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; (doing so does not disable the &lt;code&gt;UserDetailsService&lt;/code&gt; configuration or Actuator&amp;rsquo;s security).</source>
          <target state="translated">默认的安全配置在 &lt;code&gt;SecurityAutoConfiguration&lt;/code&gt; 和 &lt;code&gt;UserDetailsServiceAutoConfiguration&lt;/code&gt; 。 &lt;code&gt;SecurityAutoConfiguration&lt;/code&gt; 导入用于Web安全的 &lt;code&gt;SpringBootWebSecurityConfiguration&lt;/code&gt; ，而 &lt;code&gt;UserDetailsServiceAutoConfiguration&lt;/code&gt; 配置身份验证，这也与非Web应用程序相关。要完全关闭默认的Web应用程序安全性配置或合并多个Spring Security组件（例如OAuth 2 Client和Resource Server），请添加类型为 &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; 的bean （这样做不会禁用 &lt;code&gt;UserDetailsService&lt;/code&gt; 配置或Actuator的安全性）。</target>
        </trans-unit>
        <trans-unit id="2e68589a14dc88a5da32a5fae40c9f49847e115b" translate="yes" xml:space="preserve">
          <source>The default unit is bytes and can be overridden using &lt;code&gt;@DataSizeUnit&lt;/code&gt; as illustrated in the sample above.</source>
          <target state="translated">默认单位是字节，可以使用 &lt;code&gt;@DataSizeUnit&lt;/code&gt; 覆盖，如上面的示例所示。</target>
        </trans-unit>
        <trans-unit id="40dba3ecdddfeea1cd5a872f4e1d27902d1071f5" translate="yes" xml:space="preserve">
          <source>The default unit is milliseconds and can be overridden using &lt;code&gt;@DurationUnit&lt;/code&gt; as illustrated in the sample above.</source>
          <target state="translated">默认单位是毫秒，可以使用 &lt;code&gt;@DurationUnit&lt;/code&gt; 覆盖，如上面的示例所示。</target>
        </trans-unit>
        <trans-unit id="c1f80de8d78e9d1281457b09d42714355e4b2a17" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;CONF_FOLDER&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;CONF_FOLDER&lt;/code&gt; 的默认值</target>
        </trans-unit>
        <trans-unit id="ba6fbc4bd996ad1f4e71d86180aac1b1f5ad26db" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;never&lt;/code&gt;. A user is considered to be authorized when they are in one or more of the endpoint&amp;rsquo;s roles. If the endpoint has no configured roles (the default) all authenticated users are considered to be authorized. The roles can be configured using the &lt;code&gt;management.endpoint.health.roles&lt;/code&gt; property.</source>
          <target state="translated">默认值为 &lt;code&gt;never&lt;/code&gt; 。当用户担任一个或多个端点的角色时，该用户被视为已授权。如果端点没有配置的角色（默认值），则所有经过身份验证的用户均被视为已授权。可以使用 &lt;code&gt;management.endpoint.health.roles&lt;/code&gt; 属性配置角色。</target>
        </trans-unit>
        <trans-unit id="34070943b8eba0e4476de230c001603abf3b9eb1" translate="yes" xml:space="preserve">
          <source>The default value, which is used if the property is not specified. If the type of the property is an array, it can be an array of value(s). If the default value is unknown, it may be omitted.</source>
          <target state="translated">默认值,如果没有指定属性,则使用默认值。如果属性的类型是数组,它可以是一个值的数组。如果默认值未知,可以省略。</target>
        </trans-unit>
        <trans-unit id="f68f3c2c3995cb82ae7139e3ea8408c8262dd0f7" translate="yes" xml:space="preserve">
          <source>The destination jar file to create</source>
          <target state="translated">要创建的目标jar文件</target>
        </trans-unit>
        <trans-unit id="3b169cb65262cbf45b81163a0a5fe8f11d197485" translate="yes" xml:space="preserve">
          <source>The dialect to use is detected by the JPA provider. If you prefer to set the dialect yourself, set the &lt;code&gt;spring.jpa.database-platform&lt;/code&gt; property.</source>
          <target state="translated">JPA提供程序检测到要使用的方言。如果您希望自己设置方言，请设置 &lt;code&gt;spring.jpa.database-platform&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="cbdf316deb8798fa4287c5ed0ed8dc18fc0a5221" translate="yes" xml:space="preserve">
          <source>The documents are merged in the order in which they are encountered. Later values override earlier values.</source>
          <target state="translated">文件按其遇到的顺序进行合并。后期的值覆盖早期的值。</target>
        </trans-unit>
        <trans-unit id="f081597c7afa87da14cccb5eb71b919fd7fa73d5" translate="yes" xml:space="preserve">
          <source>The easiest way to add user accounts is to provide your own &lt;code&gt;UserDetailsService&lt;/code&gt; bean.</source>
          <target state="translated">添加用户帐户的最简单方法是提供您自己的 &lt;code&gt;UserDetailsService&lt;/code&gt; bean。</target>
        </trans-unit>
        <trans-unit id="0f690be2abfdfa025389530ec41caac886f5ebb5" translate="yes" xml:space="preserve">
          <source>The easiest way to start with Spring Boot and Kotlin is to follow &lt;a href=&quot;https://spring.io/guides/tutorials/spring-boot-kotlin/&quot;&gt;this comprehensive tutorial&lt;/a&gt;. You can create new Kotlin projects via &lt;a href=&quot;https://start.spring.io/#!language=kotlin&quot;&gt;start.spring.io&lt;/a&gt;. Feel free to join the #spring channel of &lt;a href=&quot;https://slack.kotlinlang.org/&quot;&gt;Kotlin Slack&lt;/a&gt; or ask a question with the &lt;code&gt;spring&lt;/code&gt; and &lt;code&gt;kotlin&lt;/code&gt; tags on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring+kotlin&quot;&gt;Stack Overflow&lt;/a&gt; if you need support.</source>
          <target state="translated">开始使用Spring Boot和Kotlin的最简单方法是遵循&lt;a href=&quot;https://spring.io/guides/tutorials/spring-boot-kotlin/&quot;&gt;此综合教程&lt;/a&gt;。您可以通过&lt;a href=&quot;https://start.spring.io/#!language=kotlin&quot;&gt;start.spring.io&lt;/a&gt;创建新的Kotlin项目。如果需要支持，请随时加入&lt;a href=&quot;https://slack.kotlinlang.org/&quot;&gt;Kotlin Slack&lt;/a&gt;的#spring频道，或在&lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring+kotlin&quot;&gt;Stack Overflow&lt;/a&gt;上使用 &lt;code&gt;spring&lt;/code&gt; 和 &lt;code&gt;kotlin&lt;/code&gt; 标签询问问题。</target>
        </trans-unit>
        <trans-unit id="a46d2cbdb68aa3bfd69ae1690cc9f9a086a714d5" translate="yes" xml:space="preserve">
          <source>The easiest way to take complete control over MVC configuration is to provide your own &lt;code&gt;@Configuration&lt;/code&gt; with the &lt;code&gt;@EnableWebMvc&lt;/code&gt; annotation. Doing so leaves all MVC configuration in your hands.</source>
          <target state="translated">完全控制MVC配置的最简单方法是为您自己的 &lt;code&gt;@Configuration&lt;/code&gt; 提供 &lt;code&gt;@EnableWebMvc&lt;/code&gt; 批注。这样做会使您掌握所有MVC配置。</target>
        </trans-unit>
        <trans-unit id="1db23147a0746397d07d12aebce2c2f720ec4c2d" translate="yes" xml:space="preserve">
          <source>The embedded shell supports ANSI color output as well as &lt;code&gt;tab&lt;/code&gt; completion. If you need to run a native command, you can use the &lt;code&gt;!&lt;/code&gt; prefix. To exit the embedded shell, press &lt;code&gt;ctrl-c&lt;/code&gt;.</source>
          <target state="translated">嵌入式外壳支持ANSI颜色输出以及 &lt;code&gt;tab&lt;/code&gt; 补全。如果您需要运行本机命令，则可以使用 &lt;code&gt;!&lt;/code&gt; 字首。要退出嵌入式外壳，请按 &lt;code&gt;ctrl-c&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68fdbf372f15bde8df8cbaf2536a32b5dd0d0fcc" translate="yes" xml:space="preserve">
          <source>The endpoint is not available by default and must be exposed, see &lt;a href=&quot;#production-ready-endpoints-exposing-endpoints&quot;&gt;exposing endpoints&lt;/a&gt; for more details.</source>
          <target state="translated">端点默认情况下不可用，必须公开，有关更多详细信息，请参见&lt;a href=&quot;#production-ready-endpoints-exposing-endpoints&quot;&gt;暴露端点&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c388d1ea7cf8596e4d30acdaa9c091824a09c656" translate="yes" xml:space="preserve">
          <source>The error page filter can only forward the request to the correct error page if the response has not already been committed. By default, WebSphere Application Server 8.0 and later commits the response upon successful completion of a servlet&amp;rsquo;s service method. You should disable this behavior by setting &lt;code&gt;com.ibm.ws.webcontainer.invokeFlushAfterService&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">如果尚未提交响应，则错误页面过滤器只能将请求转发到正确的错误页面。缺省情况下，WebSphere Application Server 8.0及更高版本在成功完成servlet的服务方法后提交响应。您应该通过将 &lt;code&gt;com.ibm.ws.webcontainer.invokeFlushAfterService&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; 来禁用此行为。</target>
        </trans-unit>
        <trans-unit id="cfd56b5bff1e5c6b7466c1ad20b8012769c3e4cd" translate="yes" xml:space="preserve">
          <source>The event type that should be published. This property will be ignored if 'meter-name-event-type-enabled' is set to 'true'.</source>
          <target state="translated">应该被发布的事件类型。如果'meter-name-event-type-enabled'被设置为'true',此属性将被忽略。</target>
        </trans-unit>
        <trans-unit id="3b43ed47f5974bca3ee5b5c3e7a5fe681e5586bd" translate="yes" xml:space="preserve">
          <source>The exact details of the proxy configuration depend on the underlying client request factory that is being used. The following example configures &lt;code&gt;HttpComponentsClientRequestFactory&lt;/code&gt; with an &lt;code&gt;HttpClient&lt;/code&gt; that uses a proxy for all hosts except &lt;code&gt;192.168.0.5&lt;/code&gt;:</source>
          <target state="translated">代理配置的确切详细信息取决于所使用的基础客户端请求工厂。以下示例使用一个 &lt;code&gt;HttpClient&lt;/code&gt; 配置 &lt;code&gt;HttpComponentsClientRequestFactory&lt;/code&gt; ，该HttpClient为除 &lt;code&gt;192.168.0.5&lt;/code&gt; 之外的所有主机使用代理：</target>
        </trans-unit>
        <trans-unit id="4d17d9707c769004865ef5086c7ec1fc2b271907" translate="yes" xml:space="preserve">
          <source>The example above adds &lt;code&gt;region&lt;/code&gt; and &lt;code&gt;stack&lt;/code&gt; tags to all meters with a value of &lt;code&gt;us-east-1&lt;/code&gt; and &lt;code&gt;prod&lt;/code&gt; respectively.</source>
          <target state="translated">上面的示例将 &lt;code&gt;region&lt;/code&gt; 标签和 &lt;code&gt;stack&lt;/code&gt; 标签分别添加到所有仪表，其值分别为 &lt;code&gt;us-east-1&lt;/code&gt; 和 &lt;code&gt;prod&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8b0e3c92b3d0423e6ea5e41553bcf7780ee29761" translate="yes" xml:space="preserve">
          <source>The example below is for Tomcat with the &lt;code&gt;spring-boot-starter-web&lt;/code&gt; (Servlet stack):</source>
          <target state="translated">以下示例适用于带有 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; （Servlet堆栈）的Tomcat ：</target>
        </trans-unit>
        <trans-unit id="90c3c5d338b4ec0f67ce510497e8619a5a3e2e5d" translate="yes" xml:space="preserve">
          <source>The example in the previous section can be rewritten in an immutable fashion as shown in the following example:</source>
          <target state="translated">上一节的例子可以用不可更改的方式重写,如下例所示。</target>
        </trans-unit>
        <trans-unit id="7701b62bca7e5b22985d231f728a1f64ce0741c1" translate="yes" xml:space="preserve">
          <source>The explicit location of the jar file, in case the script is being used to launch a jar that it is not actually embedded.</source>
          <target state="translated">jar文件的显式位置,以防脚本被用来启动一个没有实际嵌入的jar。</target>
        </trans-unit>
        <trans-unit id="f64eb5d387adb2015990f009c01ffa05c3d3497a" translate="yes" xml:space="preserve">
          <source>The extended support lets Cloud Foundry management UIs (such as the web application that you can use to view deployed applications) be augmented with Spring Boot actuator information. For example, an application status page may include full health information instead of the typical &amp;ldquo;running&amp;rdquo; or &amp;ldquo;stopped&amp;rdquo; status.</source>
          <target state="translated">扩展的支持使Cloud Foundry管理UI（例如可用于查看已部署的应用程序的Web应用程序）增加了Spring Boot执行器信息。例如，应用程序状态页面可能包含完整的运行状况信息，而不是典型的&amp;ldquo;正在运行&amp;rdquo;或&amp;ldquo;已停止&amp;rdquo;状态。</target>
        </trans-unit>
        <trans-unit id="eb980ec8784c636e389d2183d79f64ac5d3e4733" translate="yes" xml:space="preserve">
          <source>The extensions cannot be used with Logback&amp;rsquo;s &lt;a href=&quot;https://logback.qos.ch/manual/configuration.html#autoScan&quot;&gt;configuration scanning&lt;/a&gt;. If you attempt to do so, making changes to the configuration file results in an error similar to one of the following being logged:</source>
          <target state="translated">这些扩展不能与Logback的&lt;a href=&quot;https://logback.qos.ch/manual/configuration.html#autoScan&quot;&gt;配置扫描一起使用&lt;/a&gt;。如果尝试这样做，则对配置文件进行更改会导致类似于以下记录之一的错误：</target>
        </trans-unit>
        <trans-unit id="1039c7ceae4c5f79449d94bd44388d9c3af02a9e" translate="yes" xml:space="preserve">
          <source>The filename pattern used to create log archives.</source>
          <target state="translated">用于创建日志存档的文件名模式。</target>
        </trans-unit>
        <trans-unit id="2ecbbffa017e6965dffef0c5ed3db3d7831619ed" translate="yes" xml:space="preserve">
          <source>The final part of our application is the &lt;code&gt;main&lt;/code&gt; method. This is a standard method that follows the Java convention for an application entry point. Our main method delegates to Spring Boot&amp;rsquo;s &lt;code&gt;SpringApplication&lt;/code&gt; class by calling &lt;code&gt;run&lt;/code&gt;. &lt;code&gt;SpringApplication&lt;/code&gt; bootstraps our application, starting Spring, which, in turn, starts the auto-configured Tomcat web server. We need to pass &lt;code&gt;Example.class&lt;/code&gt; as an argument to the &lt;code&gt;run&lt;/code&gt; method to tell &lt;code&gt;SpringApplication&lt;/code&gt; which is the primary Spring component. The &lt;code&gt;args&lt;/code&gt; array is also passed through to expose any command-line arguments.</source>
          <target state="translated">我们应用程序的最后一部分是 &lt;code&gt;main&lt;/code&gt; 方法。这是遵循Java约定的应用程序入口点的标准方法。我们的主要方法通过调用 &lt;code&gt;run&lt;/code&gt; 委托给Spring Boot的 &lt;code&gt;SpringApplication&lt;/code&gt; 类。 &lt;code&gt;SpringApplication&lt;/code&gt; 会引导我们的应用程序，并启动Spring，后者反过来又会启动自动配置的Tomcat Web服务器。我们需要将 &lt;code&gt;Example.class&lt;/code&gt; 作为参数传递给 &lt;code&gt;run&lt;/code&gt; 方法，以告诉 &lt;code&gt;SpringApplication&lt;/code&gt; 哪个是主要的Spring组件。所述 &lt;code&gt;args&lt;/code&gt; 阵列也被传递通过以暴露任何命令行参数。</target>
        </trans-unit>
        <trans-unit id="230535aa1666deadb658fc7f45c07d7caa865f73" translate="yes" xml:space="preserve">
          <source>The final step in the process is to ensure that the embedded servlet container does not interfere with the servlet container to which the war file is deployed. To do so, you need to mark the embedded servlet container dependency as being provided.</source>
          <target state="translated">该过程的最后一步是确保嵌入式 servlet 容器不会干扰 war 文件部署到的 servlet 容器。要做到这一点,您需要将嵌入式servlet容器的依赖性标记为已提供。</target>
        </trans-unit>
        <trans-unit id="11be08300179fabb3fdb645e003721311439df40" translate="yes" xml:space="preserve">
          <source>The first annotation on our &lt;code&gt;Example&lt;/code&gt; class is &lt;code&gt;@RestController&lt;/code&gt;. This is known as a &lt;em&gt;stereotype&lt;/em&gt; annotation. It provides hints for people reading the code and for Spring that the class plays a specific role. In this case, our class is a web &lt;code&gt;@Controller&lt;/code&gt;, so Spring considers it when handling incoming web requests.</source>
          <target state="translated">&lt;code&gt;Example&lt;/code&gt; 类的第一个注释是 &lt;code&gt;@RestController&lt;/code&gt; 。这被称为&lt;em&gt;构造型&lt;/em&gt;注释。它为阅读代码的人和Spring提供了提示，提示该类起特定的作用。在这种情况下，我们的类是一个web &lt;code&gt;@Controller&lt;/code&gt; ，因此Spring在处理传入的Web请求时会考虑使用它。</target>
        </trans-unit>
        <trans-unit id="823e7264bf1c7685d87a0c941c315a628ffecd91" translate="yes" xml:space="preserve">
          <source>The first available implementation, &lt;code&gt;FlightRecorderApplicationStartup&lt;/code&gt; is provided by Spring Framework. It adds Spring-specific startup events to a Java Flight Recorder session and is meant for profiling applications and correlating their Spring context lifecycle with JVM events (such as allocations, GCs, class loading&amp;hellip;​). Once configured, you can record data by running the application with the Flight Recorder enabled:</source>
          <target state="translated">Spring框架提供了第一个可用的实现， &lt;code&gt;FlightRecorderApplicationStartup&lt;/code&gt; 。它将特定于Spring的启动事件添加到Java Flight Recorder会话中，旨在对应用程序进行性能分析并将其Spring上下文生命周期与JVM事件相关联（例如分配，GC，类加载...）。配置完成后，您可以在启用了Flight Recorder的情况下通过运行应用程序来记录数据：</target>
        </trans-unit>
        <trans-unit id="27fb07d55e78c2436fe349718ec1890bb691f1e9" translate="yes" xml:space="preserve">
          <source>The first few of these properties apply to all components (producers, consumers, admins, and streams) but can be specified at the component level if you wish to use different values. Apache Kafka designates properties with an importance of HIGH, MEDIUM, or LOW. Spring Boot auto-configuration supports all HIGH importance properties, some selected MEDIUM and LOW properties, and any properties that do not have a default value.</source>
          <target state="translated">这些属性中的前几个适用于所有组件(生产者、消费者、管理员和流),但如果你想使用不同的值,可以在组件级别指定。Apache Kafka将属性的重要性指定为HIGH、MEDIUM或LOW。Spring Boot自动配置支持所有HIGH重要性的属性,一些选定的MEDIUM和LOW属性,以及任何没有默认值的属性。</target>
        </trans-unit>
        <trans-unit id="4644ac774d7efcad6db0e415d0079cdebb647fd5" translate="yes" xml:space="preserve">
          <source>The first run of your application is slow, as dependencies are downloaded. Subsequent runs are much quicker.</source>
          <target state="translated">你的应用程序的第一次运行很慢,因为要下载依赖关系。随后的运行则快得多。</target>
        </trans-unit>
        <trans-unit id="865eb658ce76b9cb16f02c96388114b96ec5a735" translate="yes" xml:space="preserve">
          <source>The first step in producing a deployable war file is to provide a &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; subclass and override its &lt;code&gt;configure&lt;/code&gt; method. Doing so makes use of Spring Framework&amp;rsquo;s Servlet 3.0 support and lets you configure your application when it is launched by the servlet container. Typically, you should update your application&amp;rsquo;s main class to extend &lt;code&gt;SpringBootServletInitializer&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">产生可部署war文件的第一步是提供 &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; 子类并覆盖其 &lt;code&gt;configure&lt;/code&gt; 方法。这样做利用了Spring Framework的Servlet 3.0支持，并允许您在由Servlet容器启动应用程序时对其进行配置。通常，您应该更新应用程序的主类以扩展 &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; ，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="1862fcd879e30e19aebc466f83460217b30638ed" translate="yes" xml:space="preserve">
          <source>The first step to customizing this feature often involves using the existing mechanism but replacing or augmenting the error contents. For that, you can add a bean of type &lt;code&gt;ErrorAttributes&lt;/code&gt;.</source>
          <target state="translated">定制此功能的第一步通常涉及使用现有机制，但替换或增加错误内容。为此，您可以添加类型为 &lt;code&gt;ErrorAttributes&lt;/code&gt; 的bean 。</target>
        </trans-unit>
        <trans-unit id="2f46f24111ce42fef3e88bb9f8e4ebb1f0aa47ee" translate="yes" xml:space="preserve">
          <source>The fluent API offered by jOOQ is initiated through the &lt;code&gt;org.jooq.DSLContext&lt;/code&gt; interface. Spring Boot auto-configures a &lt;code&gt;DSLContext&lt;/code&gt; as a Spring Bean and connects it to your application &lt;code&gt;DataSource&lt;/code&gt;. To use the &lt;code&gt;DSLContext&lt;/code&gt;, you can &lt;code&gt;@Autowire&lt;/code&gt; it, as shown in the following example:</source>
          <target state="translated">jOOQ提供的流畅的API是通过 &lt;code&gt;org.jooq.DSLContext&lt;/code&gt; 接口启动的。Spring Boot将 &lt;code&gt;DSLContext&lt;/code&gt; 自动配置为Spring Bean，并将其连接到应用程序 &lt;code&gt;DataSource&lt;/code&gt; 。要使用 &lt;code&gt;DSLContext&lt;/code&gt; ，可以 &lt;code&gt;@Autowire&lt;/code&gt; ，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="ace1bf9bf4f3b7c633acaddbdfaa9938702f8107" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;HealthIndicators&lt;/code&gt; are auto-configured by Spring Boot when appropriate. You can also enable/disable selected indicators by configuring &lt;code&gt;management.health.key.enabled&lt;/code&gt;, with the &lt;code&gt;key&lt;/code&gt; listed in the table below.</source>
          <target state="translated">适当时，Spring Boot会自动配置以下 &lt;code&gt;HealthIndicators&lt;/code&gt; 。您还可以通过配置 &lt;code&gt;management.health.key.enabled&lt;/code&gt; 并使用下表中列出的 &lt;code&gt;key&lt;/code&gt; 来启用/禁用选定的指标。</target>
        </trans-unit>
        <trans-unit id="8bbeaa216479a37b8a7834f4d15bc5d5d8ca3a2d" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;InfoContributor&lt;/code&gt; beans are auto-configured by Spring Boot, when appropriate:</source>
          <target state="translated">适当时，Spring Boot会自动配置以下 &lt;code&gt;InfoContributor&lt;/code&gt; Bean：</target>
        </trans-unit>
        <trans-unit id="aa467c3ab2eb566acd82dc04e0e100d9dcc62474" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;ReactiveHealthIndicators&lt;/code&gt; are auto-configured by Spring Boot when appropriate:</source>
          <target state="translated">适当时，Spring Boot会自动配置以下 &lt;code&gt;ReactiveHealthIndicators&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0aea46dbbda214dc8da18d2f9644da646709d7d9" translate="yes" xml:space="preserve">
          <source>The following Gradle example shows how to use Undertow in place of Reactor Netty for Spring WebFlux:</source>
          <target state="translated">下面的Gradle示例展示了如何在Spring WebFlux中使用Undertow代替Reactor Netty。</target>
        </trans-unit>
        <trans-unit id="0905cd2c5504da82b3a0d00fb36119626ec24937" translate="yes" xml:space="preserve">
          <source>The following Maven example shows how to exclude Tomcat and include Jetty for Spring MVC:</source>
          <target state="translated">下面的Maven示例展示了如何排除Tomcat并包含Spring MVC的Jetty。</target>
        </trans-unit>
        <trans-unit id="a6f29e0e4af7d5b0b01cfd3e54cfd1c7158b2872" translate="yes" xml:space="preserve">
          <source>The following activation properties are available:</source>
          <target state="translated">以下是可用的激活属性。</target>
        </trans-unit>
        <trans-unit id="5e96b36b40b651a52d17a1dfa8d80da8fc074e46" translate="yes" xml:space="preserve">
          <source>The following application starters are provided by Spring Boot under the &lt;code&gt;org.springframework.boot&lt;/code&gt; group:</source>
          <target state="translated">Spring Boot在 &lt;code&gt;org.springframework.boot&lt;/code&gt; 组下提供了以下应用程序启动器：</target>
        </trans-unit>
        <trans-unit id="9ef2c7b4dd1ef56391f1c5752a4f8c2649f32501" translate="yes" xml:space="preserve">
          <source>The following auto-configuration classes are from the &lt;code&gt;spring-boot-actuator-autoconfigure&lt;/code&gt; module:</source>
          <target state="translated">以下自动配置类来自 &lt;code&gt;spring-boot-actuator-autoconfigure&lt;/code&gt; 模块：</target>
        </trans-unit>
        <trans-unit id="e98edc3160abdd64f98a67aa5e15b47bf3168711" translate="yes" xml:space="preserve">
          <source>The following auto-configuration classes are from the &lt;code&gt;spring-boot-autoconfigure&lt;/code&gt; module:</source>
          <target state="translated">以下自动配置类来自 &lt;code&gt;spring-boot-autoconfigure&lt;/code&gt; 模块：</target>
        </trans-unit>
        <trans-unit id="10c4f57389cff02a5fb158a1d915120330dc3596" translate="yes" xml:space="preserve">
          <source>The following cache libraries are supported:</source>
          <target state="translated">支持以下缓存库。</target>
        </trans-unit>
        <trans-unit id="2c2e3a3b71b3578ce54bc120c47f3d4908b8ec62" translate="yes" xml:space="preserve">
          <source>The following class shows the &lt;code&gt;@DataMongoTest&lt;/code&gt; annotation in use:</source>
          <target state="translated">&lt;code&gt;@DataMongoTest&lt;/code&gt; 显示正在使用的@DataMongoTest批注：</target>
        </trans-unit>
        <trans-unit id="afc526c2441891f6d398e14679513b7d30701492" translate="yes" xml:space="preserve">
          <source>The following code listing shows how to inject a Cassandra bean:</source>
          <target state="translated">下面的代码列表显示了如何注入一个Cassandra bean。</target>
        </trans-unit>
        <trans-unit id="a060dd4466fafdc4bfc93de14e2f2aee224cf20c" translate="yes" xml:space="preserve">
          <source>The following code shows a typical &lt;code&gt;@RestController&lt;/code&gt; that serves JSON data:</source>
          <target state="translated">以下代码显示了提供JSON数据的典型 &lt;code&gt;@RestController&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2f486d96195cfbac457bc8b16b68b907315ee1d5" translate="yes" xml:space="preserve">
          <source>The following code shows a typical example:</source>
          <target state="translated">下面的代码是一个典型的例子。</target>
        </trans-unit>
        <trans-unit id="685dd9f392cb57df52edb4796c78034a01b2c175" translate="yes" xml:space="preserve">
          <source>The following colors and styles are supported:</source>
          <target state="translated">支持以下颜色和样式。</target>
        </trans-unit>
        <trans-unit id="f98c8619c27cacb476aee0cdd94c5bbbd0eb96e8" translate="yes" xml:space="preserve">
          <source>The following component creates a listener endpoint on the &lt;code&gt;someQueue&lt;/code&gt; destination:</source>
          <target state="translated">以下组件在 &lt;code&gt;someQueue&lt;/code&gt; 目标上创建一个侦听器端点：</target>
        </trans-unit>
        <trans-unit id="837917aa02e9dcb14764e056cf6a4a09fde3ab71" translate="yes" xml:space="preserve">
          <source>The following component creates a listener endpoint on the &lt;code&gt;someTopic&lt;/code&gt; topic:</source>
          <target state="translated">以下组件在 &lt;code&gt;someTopic&lt;/code&gt; 主题上创建侦听器终结点：</target>
        </trans-unit>
        <trans-unit id="6e0b4e2005c5910bfffa605dc19d9e2480054636" translate="yes" xml:space="preserve">
          <source>The following environment properties are supported with the default script:</source>
          <target state="translated">默认脚本支持以下环境属性。</target>
        </trans-unit>
        <trans-unit id="c669a0f12c72e43fd9c04273af3c22110c43b43d" translate="yes" xml:space="preserve">
          <source>The following example &lt;code&gt;application.properties&lt;/code&gt; does not allow remote management connections:</source>
          <target state="translated">以下示例 &lt;code&gt;application.properties&lt;/code&gt; 不允许远程管理连接：</target>
        </trans-unit>
        <trans-unit id="936f7c2c4a69f9b1f8f5c69dc8ee01eb5b0d5c17" translate="yes" xml:space="preserve">
          <source>The following example contributes an &lt;code&gt;example&lt;/code&gt; entry with a single value:</source>
          <target state="translated">以下示例提供了一个具有单个值的 &lt;code&gt;example&lt;/code&gt; 条目：</target>
        </trans-unit>
        <trans-unit id="564a179d6bef36f03f46beb3176723d1f7859129" translate="yes" xml:space="preserve">
          <source>The following example does the same with Gradle:</source>
          <target state="translated">下面的例子对Gradle做了同样的处理。</target>
        </trans-unit>
        <trans-unit id="93cec095a9c6a36021dd75b11cf8032d64a800ec" translate="yes" xml:space="preserve">
          <source>The following example exposes a read operation that returns a custom object:</source>
          <target state="translated">下面的例子暴露了一个返回自定义对象的读取操作。</target>
        </trans-unit>
        <trans-unit id="154f9fdf68dd940220574c460cbe79fc78b51a9c" translate="yes" xml:space="preserve">
          <source>The following example offers &lt;code&gt;on&lt;/code&gt; and &lt;code&gt;off&lt;/code&gt; as auto-completion values for &lt;code&gt;system.state&lt;/code&gt;:</source>
          <target state="translated">以下示例提供 &lt;code&gt;system.state&lt;/code&gt; 的自动完成值的 &lt;code&gt;on&lt;/code&gt; 和 &lt;code&gt;off&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e1d5e2bab324840c601237c5c930d099785fdb1a" translate="yes" xml:space="preserve">
          <source>The following example remaps &lt;code&gt;/actuator/health&lt;/code&gt; to &lt;code&gt;/healthcheck&lt;/code&gt;:</source>
          <target state="translated">以下示例将 &lt;code&gt;/actuator/health&lt;/code&gt; 重映射到 &lt;code&gt;/healthcheck&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="acdd9ad4ca54bd11199d94b4042f921e162bd3fe" translate="yes" xml:space="preserve">
          <source>The following example replaces an existing &lt;code&gt;RemoteService&lt;/code&gt; bean with a mock implementation:</source>
          <target state="translated">下面的示例使用模拟实现替换现有的 &lt;code&gt;RemoteService&lt;/code&gt; bean：</target>
        </trans-unit>
        <trans-unit id="c2406036b78f733ad2b470fab51d2fe3b492107a" translate="yes" xml:space="preserve">
          <source>The following example shows a &amp;ldquo;hello world&amp;rdquo; web application written in Groovy:</source>
          <target state="translated">以下示例显示了用Groovy编写的&amp;ldquo; hello world&amp;rdquo; Web应用程序：</target>
        </trans-unit>
        <trans-unit id="21f6c4d6e2d97e016555403e3863ebbee03faf2c" translate="yes" xml:space="preserve">
          <source>The following example shows a &lt;code&gt;@Service&lt;/code&gt; Bean that uses constructor injection to obtain a required &lt;code&gt;RiskAssessor&lt;/code&gt; bean:</source>
          <target state="translated">以下示例显示了一个 &lt;code&gt;@Service&lt;/code&gt; Bean，它使用构造函数注入来获取所需的 &lt;code&gt;RiskAssessor&lt;/code&gt; Bean：</target>
        </trans-unit>
        <trans-unit id="3dd2fc1aadf373a1beb2ec0f3339addc8c047a3a" translate="yes" xml:space="preserve">
          <source>The following example shows a customizer that configures the use of a proxy for all hosts except &lt;code&gt;192.168.0.5&lt;/code&gt;:</source>
          <target state="translated">以下示例显示了一个定制器，该定制器为除 &lt;code&gt;192.168.0.5&lt;/code&gt; 之外的所有主机配置代理的使用：</target>
        </trans-unit>
        <trans-unit id="fb0380adb98cb51b1ac67f746744b4827286d8a8" translate="yes" xml:space="preserve">
          <source>The following example shows a typical &lt;code&gt;MANIFEST.MF&lt;/code&gt; for an executable jar file:</source>
          <target state="translated">下面的示例显示了一个可执行jar文件的典型 &lt;code&gt;MANIFEST.MF&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="525879e54c33ff52e086fc5e320e6f3424624281" translate="yes" xml:space="preserve">
          <source>The following example shows a typical Spring Data repository interface definition:</source>
          <target state="translated">以下示例显示了一个典型的Spring Data存储库接口定义。</target>
        </trans-unit>
        <trans-unit id="ab056f14e38a318d3851cc47e3021f5fc52a36fa" translate="yes" xml:space="preserve">
          <source>The following example shows a typical repackage implementation:</source>
          <target state="translated">下面的例子展示了一个典型的重新打包实现。</target>
        </trans-unit>
        <trans-unit id="c80d453e8630f488da9353d561419f86a70f8103" translate="yes" xml:space="preserve">
          <source>The following example shows a typical setup for using Cassandra tests in Spring Boot:</source>
          <target state="translated">以下示例展示了在Spring Boot中使用Cassandra测试的典型设置。</target>
        </trans-unit>
        <trans-unit id="8fd5b2c73c04d0a8ac46328a5dee1a134d62ba49" translate="yes" xml:space="preserve">
          <source>The following example shows a typical setup for using Neo4J tests in Spring Boot:</source>
          <target state="translated">下面的例子展示了在Spring Boot中使用Neo4J测试的典型设置。</target>
        </trans-unit>
        <trans-unit id="0286c86dcc7dd280f742dbef16e2dcc1614fbb69" translate="yes" xml:space="preserve">
          <source>The following example shows how create a &lt;code&gt;HikariDataSource&lt;/code&gt; with &lt;code&gt;DataSourceBuilder&lt;/code&gt;:</source>
          <target state="translated">以下示例显示了如何使用 &lt;code&gt;DataSourceBuilder&lt;/code&gt; 创建 &lt;code&gt;HikariDataSource&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="4a3a02f0fba4417b85ae4bf3993791d92f04671c" translate="yes" xml:space="preserve">
          <source>The following example shows how to build an executable archive with Ant:</source>
          <target state="translated">下面的例子显示了如何使用Ant建立一个可执行的档案。</target>
        </trans-unit>
        <trans-unit id="40507042ce4d2c819ea9c463f52c52b537af7c4b" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a data source by using a &lt;code&gt;DataSourceBuilder&lt;/code&gt;:</source>
          <target state="translated">以下示例显示如何使用 &lt;code&gt;DataSourceBuilder&lt;/code&gt; 创建数据源：</target>
        </trans-unit>
        <trans-unit id="f4c533ab04f6dedbd71c8bc400467f64b6dfd2d1" translate="yes" xml:space="preserve">
          <source>The following example shows how to define a JDBC data source by setting properties:</source>
          <target state="translated">下面的例子显示了如何通过设置属性来定义一个JDBC数据源。</target>
        </trans-unit>
        <trans-unit id="f562bdda445d01f703ce0c86f23873e9ea3bb259" translate="yes" xml:space="preserve">
          <source>The following example shows how to define a data source by setting properties:</source>
          <target state="translated">下面的例子显示了如何通过设置属性来定义数据源。</target>
        </trans-unit>
        <trans-unit id="2af72654eeed04e3ee1100abaf033b169c878b1e" translate="yes" xml:space="preserve">
          <source>The following example shows how to define a data source in a bean:</source>
          <target state="translated">下面的例子展示了如何在Bean中定义一个数据源。</target>
        </trans-unit>
        <trans-unit id="422234d595b3a7734401c9ea2d4f27e17e387ea6" translate="yes" xml:space="preserve">
          <source>The following example shows how to do so in Gradle:</source>
          <target state="translated">下面的例子展示了如何在Gradle中这样做。</target>
        </trans-unit>
        <trans-unit id="01e6105f0c47c15c859fc195d337937c3e47450c" translate="yes" xml:space="preserve">
          <source>The following example shows how to do so in Maven:</source>
          <target state="translated">下面的例子展示了如何在Maven中做到这一点。</target>
        </trans-unit>
        <trans-unit id="7bb5ab137aad4360092b3add7fbb10643dfb3e4e" translate="yes" xml:space="preserve">
          <source>The following example shows how to inject &lt;code&gt;ConnectionFactory&lt;/code&gt; instances:</source>
          <target state="translated">以下示例显示如何注入 &lt;code&gt;ConnectionFactory&lt;/code&gt; 实例：</target>
        </trans-unit>
        <trans-unit id="75143d5e0170d3295319ba9c507c6d89275b75a1" translate="yes" xml:space="preserve">
          <source>The following example shows how to specify two locations:</source>
          <target state="translated">下面的例子显示了如何指定两个位置。</target>
        </trans-unit>
        <trans-unit id="0c709541aa98c785f6ac4730b79533b3acab5a7f" translate="yes" xml:space="preserve">
          <source>The following example shows one way to write such an exporter:</source>
          <target state="translated">下面的例子显示了编写这样一个导出器的一种方法。</target>
        </trans-unit>
        <trans-unit id="55f3c799972ba94ffb965eff12e04f23feb53948" translate="yes" xml:space="preserve">
          <source>The following example shows potential logging settings in &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="translated">以下示例显示了 &lt;code&gt;application.properties&lt;/code&gt; 中的潜在日志记录设置：</target>
        </trans-unit>
        <trans-unit id="ae361f77c1f2b15c44a6724a21c16f026dc49f5a" translate="yes" xml:space="preserve">
          <source>The following example shows the &lt;code&gt;@DataLdapTest&lt;/code&gt; annotation in use:</source>
          <target state="translated">以下示例显示了 &lt;code&gt;@DataLdapTest&lt;/code&gt; 使用的@DataLdapTest批注：</target>
        </trans-unit>
        <trans-unit id="0d3e2ff2970aaae1f455fe9c1cf41d22b4a6d3c3" translate="yes" xml:space="preserve">
          <source>The following example shows the &lt;code&gt;@DataRedisTest&lt;/code&gt; annotation in use:</source>
          <target state="translated">以下示例显示了 &lt;code&gt;@DataRedisTest&lt;/code&gt; 使用的@DataRedisTest批注：</target>
        </trans-unit>
        <trans-unit id="c98f1c03cb0bde88703184db69fe5b287032c565" translate="yes" xml:space="preserve">
          <source>The following example shows the &lt;code&gt;@WebServiceClientTest&lt;/code&gt; annotation in use:</source>
          <target state="translated">以下示例显示了正在使用的 &lt;code&gt;@WebServiceClientTest&lt;/code&gt; 批注：</target>
        </trans-unit>
        <trans-unit id="9d27e800a553e3ef1beead572b91d9dea4ad9dd3" translate="yes" xml:space="preserve">
          <source>The following example shows the equivalent Gradle configuration:</source>
          <target state="translated">下面的例子显示了相当于Gradle的配置。</target>
        </trans-unit>
        <trans-unit id="67a72aefac2d4e9b48a104bcbfebc93b1ac9fea7" translate="yes" xml:space="preserve">
          <source>The following examples show how to set some PostgreSQL connection options:</source>
          <target state="translated">下面的例子展示了如何设置一些PostgreSQL连接选项。</target>
        </trans-unit>
        <trans-unit id="b16f7d91ab3412e621cc644ad3be030aa35d90d9" translate="yes" xml:space="preserve">
          <source>The following examples shows how to inject a &lt;code&gt;CouchbaseTemplate&lt;/code&gt; bean:</source>
          <target state="translated">以下示例显示了如何注入 &lt;code&gt;CouchbaseTemplate&lt;/code&gt; bean：</target>
        </trans-unit>
        <trans-unit id="bd61018462f83f319c5355a746f0a8dfba38ef4e" translate="yes" xml:space="preserve">
          <source>The following files are provided under &lt;code&gt;org/springframework/boot/logging/logback/&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;org/springframework/boot/logging/logback/&lt;/code&gt; 下提供了以下文件：</target>
        </trans-unit>
        <trans-unit id="f7da2aa46ea4013c341b34f74a6678fbb7876dd9" translate="yes" xml:space="preserve">
          <source>The following is a set of guidelines on how to secure a Spring Boot application that runs as an init.d service. It is not intended to be an exhaustive list of everything that should be done to harden an application and the environment in which it runs.</source>
          <target state="translated">以下是关于如何保护以 init.d 服务形式运行的 Spring Boot 应用程序的一组指南。它并不打算详尽地列出为加固应用程序及其运行环境而应做的所有事情。</target>
        </trans-unit>
        <trans-unit id="85309edc1c80ac33ddc2ac73e0f5daadcb5eba85" translate="yes" xml:space="preserve">
          <source>The following items are output:</source>
          <target state="translated">输出的项目如下:</target>
        </trans-unit>
        <trans-unit id="1eefde03452b5cf0b622ffe4d75df6c8087b88ec" translate="yes" xml:space="preserve">
          <source>The following items are used as &amp;ldquo;grab hints&amp;rdquo;:</source>
          <target state="translated">以下项目用作&amp;ldquo;抓取提示&amp;rdquo;：</target>
        </trans-unit>
        <trans-unit id="9bd1576e7cea1bc000e160b5402a5a027b997827" translate="yes" xml:space="preserve">
          <source>The following listing shows a typical layout:</source>
          <target state="translated">下面列出的是一个典型的布局。</target>
        </trans-unit>
        <trans-unit id="d78003ded61c04706139bd746158e3963a915f98" translate="yes" xml:space="preserve">
          <source>The following metadata snippet corresponds to the standard &lt;code&gt;logging.level&lt;/code&gt; property. Keys are &lt;em&gt;logger names&lt;/em&gt;, and values correspond to the standard log levels or any custom level. As Spring Boot defines a few logger groups out-of-the-box, dedicated value hints have been added for those.</source>
          <target state="translated">以下元数据片段对应于标准 &lt;code&gt;logging.level&lt;/code&gt; 属性。键是&lt;em&gt;记录器名称&lt;/em&gt;，值对应于标准日志级别或任何自定义级别。当Spring Boot开箱即用地定义了一些记录器组时，已经为它们添加了专用的值提示。</target>
        </trans-unit>
        <trans-unit id="c4844d01443a919daa485160217a1f202efb8a2c" translate="yes" xml:space="preserve">
          <source>The following metadata snippet corresponds to the standard &lt;code&gt;server.servlet.jsp.class-name&lt;/code&gt; property that defines the &lt;code&gt;JspServlet&lt;/code&gt; class name to use:</source>
          <target state="translated">以下元数据片段对应于标准 &lt;code&gt;server.servlet.jsp.class-name&lt;/code&gt; 属性，该属性定义了要使用的 &lt;code&gt;JspServlet&lt;/code&gt; 类名：</target>
        </trans-unit>
        <trans-unit id="5bf04dbdd024e04e6e8627428da19009640fcaf2" translate="yes" xml:space="preserve">
          <source>The following metadata snippet corresponds to the standard &lt;code&gt;spring.jmx.server&lt;/code&gt; property that defines the name of the &lt;code&gt;MBeanServer&lt;/code&gt; bean to use:</source>
          <target state="translated">以下元数据片段对应于标准 &lt;code&gt;spring.jmx.server&lt;/code&gt; 属性，该属性定义了要使用的 &lt;code&gt;MBeanServer&lt;/code&gt; bean的名称：</target>
        </trans-unit>
        <trans-unit id="e27692373ce783ca54c66f808e2fe2893bdc79c6" translate="yes" xml:space="preserve">
          <source>The following metadata snippet corresponds to the standard &lt;code&gt;spring.liquibase.change-log&lt;/code&gt; property that defines the path to the changelog to use. It is actually used internally as a &lt;code&gt;org.springframework.core.io.Resource&lt;/code&gt; but cannot be exposed as such, because we need to keep the original String value to pass it to the Liquibase API.</source>
          <target state="translated">以下元数据片段对应于标准 &lt;code&gt;spring.liquibase.change-log&lt;/code&gt; 属性，该属性定义了要使用的更改日志的路径。实际上，它在内部用作 &lt;code&gt;org.springframework.core.io.Resource&lt;/code&gt; ,但不能这样公开，因为我们需要保留原始的String值以将其传递给Liquibase API。</target>
        </trans-unit>
        <trans-unit id="4a92e956e3f84174b8887244234e55400c78bfd3" translate="yes" xml:space="preserve">
          <source>The following metadata snippet corresponds to the standard &lt;code&gt;spring.profiles.active&lt;/code&gt; property that defines the name of the Spring profile(s) to enable:</source>
          <target state="translated">以下元数据片段对应于标准 &lt;code&gt;spring.profiles.active&lt;/code&gt; 属性，该属性定义了要启用的Spring配置文件的名称：</target>
        </trans-unit>
        <trans-unit id="79c0b05c552284b6ed0787c5db35e2b093c1cd0b" translate="yes" xml:space="preserve">
          <source>The following nested elements can be used with the task:</source>
          <target state="translated">以下嵌套元素可以与任务一起使用。</target>
        </trans-unit>
        <trans-unit id="9997a6cd79ed06ca5c3eaa5ff01dd7def793d84f" translate="yes" xml:space="preserve">
          <source>The following properties allow per-meter customization:</source>
          <target state="translated">以下属性允许对每块表进行自定义。</target>
        </trans-unit>
        <trans-unit id="af90c2f2acc4a6d7a52a26def7e6ce7ff8ff922d" translate="yes" xml:space="preserve">
          <source>The following property substitutions are supported with the default script:</source>
          <target state="translated">默认脚本支持以下属性替换。</target>
        </trans-unit>
        <trans-unit id="37dd2381d278239701d3a94c633107ef0a82c39a" translate="yes" xml:space="preserve">
          <source>The following rotation policy properties are supported:</source>
          <target state="translated">支持以下轮换政策属性。</target>
        </trans-unit>
        <trans-unit id="53677e19d1632cd85795f0e006e5f6a3456a1fd8" translate="yes" xml:space="preserve">
          <source>The following rules apply to working with &lt;code&gt;PropertiesLauncher&lt;/code&gt;:</source>
          <target state="translated">以下规则适用于使用 &lt;code&gt;PropertiesLauncher&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="23490bd26a21f81a8e91aa57b4789caf05cee730" translate="yes" xml:space="preserve">
          <source>The following sample component creates a listener endpoint on the &lt;code&gt;someQueue&lt;/code&gt; queue:</source>
          <target state="translated">以下示例组件在 &lt;code&gt;someQueue&lt;/code&gt; 队列上创建一个侦听器端点：</target>
        </trans-unit>
        <trans-unit id="972b18478abeae3dbc6bcd0db23ed2fa36559dd0" translate="yes" xml:space="preserve">
          <source>The following shows an example of a &lt;code&gt;layers.idx&lt;/code&gt; file:</source>
          <target state="translated">下面显示了 &lt;code&gt;layers.idx&lt;/code&gt; 文件的示例：</target>
        </trans-unit>
        <trans-unit id="398708d43e84357eab5685ed6ad6c3a64216e573" translate="yes" xml:space="preserve">
          <source>The following table describes the mapping of log levels to colors:</source>
          <target state="translated">下表描述了日志级别与颜色的映射。</target>
        </trans-unit>
        <trans-unit id="896b19c5eaab33082fd2642c25db1115039c4481" translate="yes" xml:space="preserve">
          <source>The following table lists the various &lt;code&gt;@&amp;hellip;Test&lt;/code&gt; annotations that can be used to test slices of your application and the auto-configuration that they import by default:</source>
          <target state="translated">下表列出了各种可用于测试应用程序片的 &lt;code&gt;@&amp;hellip;Test&lt;/code&gt; 批注以及它们默认情况下导入的自动配置：</target>
        </trans-unit>
        <trans-unit id="9e99617fc1b69c34cba8d652f426697bf80cf158" translate="yes" xml:space="preserve">
          <source>The following table provides all properties that can be used to override the versions managed by Spring Boot. Browse the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-dependencies/build.gradle&quot;&gt;&lt;code&gt;spring-boot-dependencies&lt;/code&gt; build.gradle&lt;/a&gt; for a complete list of dependencies.</source>
          <target state="translated">下表提供了可用于覆盖Spring Boot管理的版本的所有属性。浏览&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-dependencies/build.gradle&quot;&gt; &lt;code&gt;spring-boot-dependencies&lt;/code&gt; build.gradle&lt;/a&gt;以获取依赖关系的完整列表。</target>
        </trans-unit>
        <trans-unit id="ed2b4e4ef8e0344cdda30d6847bcb119fcbc174e" translate="yes" xml:space="preserve">
          <source>The following table provides details of all of the dependency versions that are provided by Spring Boot in its CLI (Command Line Interface), Maven dependency management, and Gradle plugin. When you declare a dependency on one of these artifacts without declaring a version, the version listed in the table is used.</source>
          <target state="translated">下表提供了Spring Boot在其CLI(命令行接口)、Maven依赖管理和Gradle插件中提供的所有依赖版本的详细信息。当你在这些工件上声明一个依赖而不声明版本时,将使用表中列出的版本。</target>
        </trans-unit>
        <trans-unit id="11a1ee12f8577aec4ed37cb34b4f6c27531db603" translate="yes" xml:space="preserve">
          <source>The following table shows how the &lt;code&gt;logging.*&lt;/code&gt; properties can be used together:</source>
          <target state="translated">下表显示了如何结合使用 &lt;code&gt;logging.*&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="636b59ef2de082a7c04cc374555ab94658c49d9a" translate="yes" xml:space="preserve">
          <source>The following table shows the default status mappings for the built-in statuses:</source>
          <target state="translated">下表显示了内置状态的默认状态映射。</target>
        </trans-unit>
        <trans-unit id="968d6986797ad16e81b19cc09cec555dfd2f5839" translate="yes" xml:space="preserve">
          <source>The following table summarizes the list of supported providers:</source>
          <target state="translated">下表汇总了受支持的供应商名单。</target>
        </trans-unit>
        <trans-unit id="8c474bcb247e601df8b60605554105b3f6b9d65a" translate="yes" xml:space="preserve">
          <source>The following technology-agnostic endpoints are available:</source>
          <target state="translated">以下是与技术无关的端点:</target>
        </trans-unit>
        <trans-unit id="dfd99a1bb81b49c6783d471ce1d5202bfe8ef6df" translate="yes" xml:space="preserve">
          <source>The following types can be used:</source>
          <target state="translated">可以使用以下类型:</target>
        </trans-unit>
        <trans-unit id="9fcaa5289d7bce622b31fc18a6bf945cc1f54160" translate="yes" xml:space="preserve">
          <source>The following units are supported with the simple format:</source>
          <target state="translated">简单格式支持以下单位:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
