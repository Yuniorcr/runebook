<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="sinon">
    <body>
      <group id="sinon">
        <trans-unit id="a992239dc1dc4856a58c4c6e3d75b19b6f9946aa" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2010&amp;ndash;2018 Christian Johansen</source>
          <target state="translated">&amp;copy;2010&amp;ndash;2018克里斯蒂安&amp;middot;约翰森（Christian Johansen）</target>
        </trans-unit>
        <trans-unit id="6e70af7f1f8bd7d1ade8e20490b74ea563b1a18f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#expectations&quot;&gt;Expectations&lt;/a&gt; implement both the &lt;a href=&quot;https://sinonjs.org/releases/spies&quot;&gt;spies&lt;/a&gt; and &lt;a href=&quot;https://sinonjs.org/releases/stubs&quot;&gt;stubs&lt;/a&gt; APIs.</source>
          <target state="translated">&lt;a href=&quot;#expectations&quot;&gt;期望&lt;/a&gt;实现&lt;a href=&quot;https://sinonjs.org/releases/spies&quot;&gt;间谍&lt;/a&gt;和&lt;a href=&quot;https://sinonjs.org/releases/stubs&quot;&gt;存根&lt;/a&gt; API。</target>
        </trans-unit>
        <trans-unit id="5e35cbd30f227a5c6ed6f97aab5ad633224f5694" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d527513241b24052c8dfaba9d484bc9edbbed67b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop&lt;/a&gt;,</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop&lt;/a&gt;,</target>
        </trans-unit>
        <trans-unit id="91f89110224fe41691d77019f236d0bbcd78779b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick&quot;&gt;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick&lt;/a&gt;,</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick&quot;&gt;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick&lt;/a&gt;,</target>
        </trans-unit>
        <trans-unit id="bbc03d4b62d2e0dd326afd87bd52eebc438e0043" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;config.now&lt;/code&gt; - &lt;em&gt;Number/Date&lt;/em&gt; - installs lolex with the specified unix epoch (default: 0)</source>
          <target state="translated">&lt;code&gt;config.now&lt;/code&gt; - &lt;em&gt;数/日期&lt;/em&gt; -安装具有指定Unix时间戳lolex（默认值：0）</target>
        </trans-unit>
        <trans-unit id="5da86bae5343da8491a27ce7b79ced2da0138c5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;config.shouldAdvanceTime&lt;/code&gt; - &lt;em&gt;Boolean&lt;/em&gt; - tells lolex to increment mocked time automatically based on the real system time shift (default: false)</source>
          <target state="translated">&lt;code&gt;config.shouldAdvanceTime&lt;/code&gt; - &lt;em&gt;布尔&lt;/em&gt; -告诉lolex以增量嘲笑基于实时系统时间自动换挡时间（默认：false）</target>
        </trans-unit>
        <trans-unit id="13a4ef4b1ccce43c62e0a4b3b5b69ae01feacb05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;config.toFake&lt;/code&gt; - &lt;em&gt;String[ ]&lt;/em&gt; - an array with explicit function names to fake. By default lolex will automatically fake all methods &lt;em&gt;except&lt;/em&gt;&lt;code&gt;process.nextTick&lt;/code&gt;. You could, however, still fake &lt;code&gt;nextTick&lt;/code&gt; by providing it explicitly</source>
          <target state="translated">&lt;code&gt;config.toFake&lt;/code&gt; - &lt;em&gt;String []&lt;/em&gt; -具有要伪造的显式函数名称的数组。默认情况下，lolex将自动伪造&lt;em&gt;除&lt;/em&gt; &lt;code&gt;process.nextTick&lt;/code&gt; &lt;em&gt;之外的&lt;/em&gt;所有方法。但是，您仍然 &lt;code&gt;nextTick&lt;/code&gt; 通过显式提供来伪造nextTick</target>
        </trans-unit>
        <trans-unit id="e3de8c62a2c2da8c86f5167e3570761e22d99fc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createFakeServer&lt;/code&gt; accepts optional properties to configure the fake server. See &lt;a href=&quot;#fake-server-options&quot;&gt;options&lt;/a&gt; below for configuration parameters.</source>
          <target state="translated">&lt;code&gt;createFakeServer&lt;/code&gt; 接受可选属性来配置伪造服务器。有关配置参数，请参见下面的&lt;a href=&quot;#fake-server-options&quot;&gt;选项&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="015c31d0454e450469d982f19d9b51aa2dd60b92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fake&lt;/code&gt; expects the last argument to be a callback and will invoke it asynchronously with the given arguments.</source>
          <target state="translated">&lt;code&gt;fake&lt;/code&gt; 期望最后一个参数是一个回调，并将与给定的参数异步调用它。</target>
        </trans-unit>
        <trans-unit id="5465f0f0bfcdf18c75001564a4dbba26f46861e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fake&lt;/code&gt; expects the last argument to be a callback and will invoke it with the given arguments.</source>
          <target state="translated">&lt;code&gt;fake&lt;/code&gt; 期望最后一个参数是回调，并将使用给定的参数调用它。</target>
        </trans-unit>
        <trans-unit id="14c33d45546c5b7533233ab74bd7f80aff9b49c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fake&lt;/code&gt; was introduced with Sinon with v5. It simplifies and merges concepts from &lt;a href=&quot;https://sinonjs.org/releases/spies&quot;&gt;&lt;code&gt;spies&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://sinonjs.org/releases/stubs&quot;&gt;&lt;code&gt;stubs&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;fake&lt;/code&gt; 引入与兴农与V5。它简化和合并了来自&lt;a href=&quot;https://sinonjs.org/releases/spies&quot;&gt; &lt;code&gt;spies&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://sinonjs.org/releases/stubs&quot;&gt; &lt;code&gt;stubs&lt;/code&gt; &lt;/a&gt;概念。</target>
        </trans-unit>
        <trans-unit id="0316fe0320a69e67119440d9b868d8b13fb531dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;method&lt;/code&gt; is an HTTP verb.</source>
          <target state="translated">&lt;code&gt;method&lt;/code&gt; 是HTTP动词。</target>
        </trans-unit>
        <trans-unit id="3b94f58ae3b492b32e6cea6880cd52cccb9eca08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onCall&lt;/code&gt; can be combined with all of the behavior defining methods in this section. In particular, it can be used together with &lt;code&gt;withArgs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;onCall&lt;/code&gt; 可以与本节中的所有行为定义方法结合使用。特别是，它可以与 &lt;code&gt;withArgs&lt;/code&gt; 一起使用。</target>
        </trans-unit>
        <trans-unit id="3624135dc58be44b017caa907f55296fc0e8f065" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overrides&lt;/code&gt; is an optional map overriding created stubs, for example:</source>
          <target state="translated">&lt;code&gt;overrides&lt;/code&gt; 是一个可选的地图，可覆盖创建的存根，例如：</target>
        </trans-unit>
        <trans-unit id="41a7762d57e0095f73b6b5334558f715c0c4c549" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replacement&lt;/code&gt; can be any value, including &lt;code&gt;spies&lt;/code&gt;, &lt;code&gt;stubs&lt;/code&gt; and &lt;code&gt;fakes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;replacement&lt;/code&gt; 值可以是任何值，包括 &lt;code&gt;spies&lt;/code&gt; ， &lt;code&gt;stubs&lt;/code&gt; 和 &lt;code&gt;fakes&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0e828c8cde62688048ca1e36b2be6c0af6c7feac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replacement&lt;/code&gt; must be a &lt;code&gt;Function&lt;/code&gt;, and can be instances of &lt;code&gt;spies&lt;/code&gt;, &lt;code&gt;stubs&lt;/code&gt; and &lt;code&gt;fakes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;replacement&lt;/code&gt; 必须是 &lt;code&gt;Function&lt;/code&gt; ，并且可以是 &lt;code&gt;spies&lt;/code&gt; ， &lt;code&gt;stubs&lt;/code&gt; 和 &lt;code&gt;fakes&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="52778d85bdcbe551905e93f0fef1213111dc3ef0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;response&lt;/code&gt; can be one of three things:</source>
          <target state="translated">&lt;code&gt;response&lt;/code&gt; 可以是三件事之一：</target>
        </trans-unit>
        <trans-unit id="d5ecb8af4bb987ac392befe334a73a4f98edcb16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sinon.spy(object, &quot;method&quot;)&lt;/code&gt; creates a spy that wraps the existing function &lt;code&gt;object.method&lt;/code&gt;. The spy will behave exactly like the original method (including when used as a constructor), but you will have access to data about all &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;calls&lt;/a&gt;. The following is a slightly contrived example:</source>
          <target state="translated">&lt;code&gt;sinon.spy(object, &quot;method&quot;)&lt;/code&gt; 创建一个间谍，该间谍包装了现有的函数 &lt;code&gt;object.method&lt;/code&gt; 。间谍的行为将与原始方法完全相同（包括用作构造函数时），但是您将可以访问有关所有&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;调用的&lt;/a&gt;数据。以下是一个人为的示例：</target>
        </trans-unit>
        <trans-unit id="414b885195e6f4474099cd1dfecde994c0055823" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stub.callsArg(0);&lt;/code&gt; causes the stub to call the first argument as a callback.</source>
          <target state="translated">&lt;code&gt;stub.callsArg(0);&lt;/code&gt; 使存根调用第一个参数作为回调。</target>
        </trans-unit>
        <trans-unit id="0b2d71a50072b805f07f5a57a54b72a265cb02bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stub.onCall(n);&lt;/code&gt;&lt;em&gt;Added in v1.8&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;stub.onCall(n);&lt;/code&gt; &lt;em&gt;在v1.8中添加&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c3f96b0285c0d0b3c5cc18a2ceb2e6710191ca61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stub.resolvesArg(0);&lt;/code&gt; causes the stub to return a Promise which resolves to the first argument.</source>
          <target state="translated">&lt;code&gt;stub.resolvesArg(0);&lt;/code&gt; 使存根返回一个Promise，该Promise解析为第一个参数。</target>
        </trans-unit>
        <trans-unit id="76f924b7b516b6d538f185143945cd9f9be419dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stub.returnsArg(0);&lt;/code&gt; causes the stub to return the first argument.</source>
          <target state="translated">&lt;code&gt;stub.returnsArg(0);&lt;/code&gt; 使存根返回第一个参数。</target>
        </trans-unit>
        <trans-unit id="d794b599e85597d6d7ead9de5e83ae50b8d8e44f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stub.throwsArg(0);&lt;/code&gt; causes the stub to throw the first argument as the exception.</source>
          <target state="translated">&lt;code&gt;stub.throwsArg(0);&lt;/code&gt; 使存根引发第一个参数作为异常。</target>
        </trans-unit>
        <trans-unit id="d35cc514dc125635434c43776932494eb7492989" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; by default, copies over the &lt;code&gt;fail&lt;/code&gt; and &lt;code&gt;failException&lt;/code&gt; properties</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 默认情况下为true，将复制 &lt;code&gt;fail&lt;/code&gt; 和 &lt;code&gt;failException&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="ebebf5ad65a0eeeb43de8cb9f867970a94b58a90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if spy was called exactly once</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 如果间谍只被叫过一次，则为true</target>
        </trans-unit>
        <trans-unit id="6190b192af0773a5bdebfac695f9dd928b77aedb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the spy was called at least once</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 如果间谍被至少召唤一次，则为true</target>
        </trans-unit>
        <trans-unit id="f9d4c01699915336389ec05e71517538e8a173b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the spy was called exactly thrice</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 如果间谍被准确称呼三次，则为true</target>
        </trans-unit>
        <trans-unit id="b2829838f2e9822ec9e5e607cf9e35b1c1f38e9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the spy was called exactly twice</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 如果间谍被准确叫过两次，则为true</target>
        </trans-unit>
        <trans-unit id="a367667199eada45191c780dd80ee105b2d16478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the spy was not called</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 如果未召唤间谍则为真</target>
        </trans-unit>
        <trans-unit id="c095fda0ec10b2fea33531dfef2abaf2bc3a00eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt; if the request has not been handled (see &lt;a href=&quot;#serverrespond&quot;&gt;&lt;code&gt;respond&lt;/code&gt;&lt;/a&gt; below)</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; 如果尚未处理请求，则未定义（请参见下面的&lt;a href=&quot;#serverrespond&quot;&gt; &lt;code&gt;respond&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="52800ff9cb5cb8b166e067a011bacccc98b34a4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v7.1.1&lt;/code&gt; has been verified in these runtimes:</source>
          <target state="translated">&lt;code&gt;v7.1.1&lt;/code&gt; 已在以下运行时中得到验证：</target>
        </trans-unit>
        <trans-unit id="f1ccad8e721ae0aee592e1a26ae8eae475266f74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var clock = sinon.useFakeTimers([now, ]prop1, prop2, ...)&lt;/code&gt; is no longer supported. To define which methods to fake, please use &lt;code&gt;config.toFake&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;var clock = sinon.useFakeTimers([now, ]prop1, prop2, ...)&lt;/code&gt; 不再受支持。要定义要伪造的方法，请使用 &lt;code&gt;config.toFake&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a658286f5133d59688d5f0fab24f03bba05b78f5" translate="yes" xml:space="preserve">
          <source>&lt;del&gt;&lt;code&gt;var stub = sinon.stub(object, &quot;method&quot;, func);&lt;/code&gt;&lt;/del&gt;</source>
          <target state="translated">&lt;del&gt; &lt;code&gt;var stub = sinon.stub(object, &quot;method&quot;, func);&lt;/code&gt; &lt;/del&gt;</target>
        </trans-unit>
        <trans-unit id="37bd3aa1e007818bca45c255586836d04f321e4a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Since &lt;code&gt;sinon@2.0.0&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;由于 &lt;code&gt;sinon@2.0.0&lt;/code&gt; &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f775e083edb56bf26536469d9c6ccb20cb4a9586" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Since &lt;code&gt;sinon@2.3.0&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;从 &lt;code&gt;sinon@2.3.0&lt;/code&gt; 开始&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d4f96d3a4ce78c740da73fc59b5bb43a8202c8e1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Since &lt;code&gt;sinon@3.0.0&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;由于 &lt;code&gt;sinon@3.0.0&lt;/code&gt; &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="80f1f11ca17977b420d9373abf91515c99e43c8a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Since &lt;code&gt;sinon@5.0.0&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;由于 &lt;code&gt;sinon@5.0.0&lt;/code&gt; &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="38607baca3e4854bc9d61c49f822bf4a7e90c3f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Since &lt;code&gt;sinon@6.1.1&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;从 &lt;code&gt;sinon@6.1.1&lt;/code&gt; 开始&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7d0e3dd38d0582b87661f8e1b9dfd06736d976da" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Since &lt;code&gt;sinon@6.2.0&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;自 &lt;code&gt;sinon@6.2.0&lt;/code&gt; &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d452656d789ed8bc6b7b3f4732d3f59946d80386" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Updated in &lt;code&gt;sinon@2.0.0&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;在 &lt;code&gt;sinon@2.0.0&lt;/code&gt; 中更新&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="451a95c3d0ab7b2521652ac332c32954053bf900" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important note:&lt;/strong&gt; when faking &lt;code&gt;nextTick&lt;/code&gt;, normal calls to &lt;code&gt;process.nextTick()&lt;/code&gt; would not execute automatically as they would during normal event-loop phases. You would have to call either &lt;code&gt;clock.next()&lt;/code&gt;, &lt;code&gt;clock.tick()&lt;/code&gt;, &lt;code&gt;clock.runAll()&lt;/code&gt; or &lt;code&gt;clock.runToLast()&lt;/code&gt; (see example below). Please refer to the &lt;a href=&quot;https://github.com/sinonjs/lolex&quot;&gt;lolex&lt;/a&gt; documentation for more information.</source>
          <target state="translated">&lt;strong&gt;重要说明：&lt;/strong&gt;伪造 &lt;code&gt;nextTick&lt;/code&gt; 时，对 &lt;code&gt;process.nextTick()&lt;/code&gt; 的常规调用不会像在常规事件循环阶段那样自动执行。您将必须调用 &lt;code&gt;clock.next()&lt;/code&gt; ， &lt;code&gt;clock.tick()&lt;/code&gt; ， &lt;code&gt;clock.runAll()&lt;/code&gt; 或 &lt;code&gt;clock.runToLast()&lt;/code&gt; （请参见下面的示例）。请参阅&lt;a href=&quot;https://github.com/sinonjs/lolex&quot;&gt;lolex&lt;/a&gt;文档以获取更多信息。</target>
        </trans-unit>
        <trans-unit id="4ea72c778efc558c3a2a97b3e5e5bf2aa36d25b7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://github.com/hurrymaplelad/sinon-codemod&quot;&gt;codemod is available&lt;/a&gt; to upgrade your code</source>
          <target state="translated">可使用&lt;a href=&quot;https://github.com/hurrymaplelad/sinon-codemod&quot;&gt;codemod&lt;/a&gt;升级代码</target>
        </trans-unit>
        <trans-unit id="c983d2c50afc9867e030cd9a68a9d38315a53d03" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Function&lt;/code&gt;.</source>
          <target state="translated">一个 &lt;code&gt;Function&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b96f17d48307922bc168c670852fd97a1ad2f837" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; representing the response body</source>
          <target state="translated">甲 &lt;code&gt;String&lt;/code&gt; 表示响应身体</target>
        </trans-unit>
        <trans-unit id="9690c69f680c78af586ad20720c4b5390e3f97ad" translate="yes" xml:space="preserve">
          <source>A convenience reference for &lt;a href=&quot;assertions&quot;&gt;&lt;code&gt;sinon.assert&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;assertions&quot;&gt; &lt;code&gt;sinon.assert&lt;/code&gt; &lt;/a&gt;的便捷参考</target>
        </trans-unit>
        <trans-unit id="c96eaac760af3e0c5076380b3b0608cc53510880" translate="yes" xml:space="preserve">
          <source>A fake is immutable: once created, the behavior will not change.</source>
          <target state="translated">假货是不可改变的:一旦创建,行为就不会改变。</target>
        </trans-unit>
        <trans-unit id="05cbe3fae41662b86dd7e9eace5043290953b741" translate="yes" xml:space="preserve">
          <source>A mock will fail your test if it is not used as expected.</source>
          <target state="translated">如果没有按照预期使用,模拟将使您的测试失败。</target>
        </trans-unit>
        <trans-unit id="5a40a551931171658a045de9a9f74852489feb37" translate="yes" xml:space="preserve">
          <source>A spy call is an object representation of an invididual call to a &lt;em&gt;spied&lt;/em&gt; function, which could be a &lt;a href=&quot;https://sinonjs.org/releases/fakes&quot;&gt;fake&lt;/a&gt;, &lt;a href=&quot;https://sinonjs.org/releases/spies&quot;&gt;spy&lt;/a&gt;, &lt;a href=&quot;https://sinonjs.org/releases/stubs&quot;&gt;stub&lt;/a&gt; or &lt;a href=&quot;https://sinonjs.org/releases/mocks&quot;&gt;mock method&lt;/a&gt;.</source>
          <target state="translated">间谍调用是对某个&lt;em&gt;间谍&lt;/em&gt;函数的单个调用的对象表示，它可以是&lt;a href=&quot;https://sinonjs.org/releases/fakes&quot;&gt;伪造&lt;/a&gt;，&lt;a href=&quot;https://sinonjs.org/releases/spies&quot;&gt;间谍&lt;/a&gt;，&lt;a href=&quot;https://sinonjs.org/releases/stubs&quot;&gt;存根&lt;/a&gt;或&lt;a href=&quot;https://sinonjs.org/releases/mocks&quot;&gt;模拟方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8d973c222e5b60d574a1a6fca122a1d590976e82" translate="yes" xml:space="preserve">
          <source>A test spy is a function that records arguments, return value, the value of &lt;code&gt;this&lt;/code&gt; and exception thrown (if any) for all its &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;calls&lt;/a&gt;. There are two types of spies: Some are anonymous functions, while others wrap methods that already exist in the system under test.</source>
          <target state="translated">测试谍照是记录参数，返回值的值的函数 &lt;code&gt;this&lt;/code&gt; 和抛出的异常（如果有的话）的所有&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;来电&lt;/a&gt;。间谍有两种类型：一些是匿名函数，而其他一些则包装被测系统中已经存在的方法。</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="15e4e42dab3090579d1b24dea9fff65024d0a581" translate="yes" xml:space="preserve">
          <source>Access requests through &lt;code&gt;sandbox.requests&lt;/code&gt; and server through &lt;code&gt;sandbox.server&lt;/code&gt;</source>
          <target state="translated">通过 &lt;code&gt;sandbox.requests&lt;/code&gt; 访问请求，并通过 &lt;code&gt;sandbox.server&lt;/code&gt; 访问服务器</target>
        </trans-unit>
        <trans-unit id="395ff0a98be1b2dff296ffcedcd2c416a480832b" translate="yes" xml:space="preserve">
          <source>Access through &lt;code&gt;sandbox.clock&lt;/code&gt;.</source>
          <target state="translated">通过 &lt;code&gt;sandbox.clock&lt;/code&gt; 访问。</target>
        </trans-unit>
        <trans-unit id="8cf3751c5853a686b1c6006844a3b9576f6eea16" translate="yes" xml:space="preserve">
          <source>Accessing individual calls helps with more detailed behavior verification when the spy is called more than once.</source>
          <target state="translated">当间谍被呼叫不止一次时,访问个人呼叫有助于更详细的行为验证。</target>
        </trans-unit>
        <trans-unit id="f2ea768d69a3ae8a5f581fb31e50b11cdbe51085" translate="yes" xml:space="preserve">
          <source>Add a custom behavior. The name will be available as a function on stubs, and the chaining mechanism will be set up for you (e.g. no need to return anything from your function, its return value will be ignored). The &lt;code&gt;fn&lt;/code&gt; will be passed the fake instance as its first argument, and then the user&amp;rsquo;s arguments.</source>
          <target state="translated">添加自定义行为。该名称将在存根上作为函数提供，并且将为您建立链接机制（例如，无需从函数中返回任何内容，其返回值将被忽略）。该 &lt;code&gt;fn&lt;/code&gt; 将通过假实例作为其第一个参数，然后将用户的论点。</target>
        </trans-unit>
        <trans-unit id="f62cf9700d173979bf8f65146ef07dfff7b36b8c" translate="yes" xml:space="preserve">
          <source>Add a filter that will decide whether or not to fake a request.</source>
          <target state="translated">增加一个过滤器,决定是否伪造请求。</target>
        </trans-unit>
        <trans-unit id="db12032d1e67304ccd889b7e9b3c34943b851c24" translate="yes" xml:space="preserve">
          <source>Adding the fake to the system under test</source>
          <target state="translated">将假货添加到被测系统中</target>
        </trans-unit>
        <trans-unit id="9ddf654134e96ec73a18f572a37287c7a06ac3bd" translate="yes" xml:space="preserve">
          <source>Additionally, populates &lt;code&gt;responseXML&lt;/code&gt; with a parsed document if &lt;a href=&quot;http://www.w3.org/TR/XMLHttpRequest/&quot;&gt;response headers indicate as much&lt;/a&gt;.</source>
          <target state="translated">此外，如果&lt;a href=&quot;http://www.w3.org/TR/XMLHttpRequest/&quot;&gt;响应标头指示，&lt;/a&gt;则用已解析的文档填充 &lt;code&gt;responseXML&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="458997da34024d1c78d10154e5e350781119d576" translate="yes" xml:space="preserve">
          <source>Advances the clock to the the moment of the first scheduled timer, firing it.</source>
          <target state="translated">将时钟提前到第一个预定定时器的时刻,启动它。</target>
        </trans-unit>
        <trans-unit id="df1bc920ad81f54ea25006fc4246596c7bf08b6d" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;stub.onCall(0);&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;stub.onCall(0);&lt;/code&gt; 别名；</target>
        </trans-unit>
        <trans-unit id="a45cf3a0960dca6deecf4f3151e809bde43a1852" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;stub.onCall(1);&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;stub.onCall(1);&lt;/code&gt; 别名；</target>
        </trans-unit>
        <trans-unit id="a4ea6fb1b344a6d0b540d2e31c516c106ab6eb44" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;stub.onCall(2);&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;stub.onCall(2);&lt;/code&gt; 别名；</target>
        </trans-unit>
        <trans-unit id="865f9296e61b7dade34f35d8081dcbc9b3d41436" translate="yes" xml:space="preserve">
          <source>All matchers implement &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;. This allows to logically combine mutliple matchers. The result is a new matchers that requires both (and) or one of the matchers (or) to return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">所有匹配器都实现 &lt;code&gt;and&lt;/code&gt; 和 &lt;code&gt;or&lt;/code&gt; 。这允许逻辑上组合多个匹配器。结果是一个新的匹配器，它需要两个（和）或一个匹配器（或）都返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21eefaca74d7c66dceb61dca187572550b9b8a45" translate="yes" xml:space="preserve">
          <source>All response headers as an object.</source>
          <target state="translated">所有响应头作为一个对象。</target>
        </trans-unit>
        <trans-unit id="9fa3fa10db28ab8f327bad10267e3888a66b1875" translate="yes" xml:space="preserve">
          <source>All the expectation methods return the expectation, meaning you can chain them.</source>
          <target state="translated">所有的期望值方法都会返回期望值,也就是说你可以把它们连锁起来。</target>
        </trans-unit>
        <trans-unit id="b6577bef0e8b93064ded1ab317675453251b6ce8" translate="yes" xml:space="preserve">
          <source>Also aliased as &lt;code&gt;invokeCallback&lt;/code&gt;.</source>
          <target state="translated">也别名为 &lt;code&gt;invokeCallback&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f3892eae4e5a98640ac0e42b0db64deb6b1d6f79" translate="yes" xml:space="preserve">
          <source>Also fakes native &lt;code&gt;XMLHttpRequest&lt;/code&gt; and &lt;code&gt;ActiveXObject&lt;/code&gt; (when available, and only for &lt;code&gt;XMLHTTP&lt;/code&gt; progids). Helps with testing requests made with &lt;code&gt;XHR&lt;/code&gt;.</source>
          <target state="translated">还伪造本机 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 和 &lt;code&gt;ActiveXObject&lt;/code&gt; （如果可用，并且仅适用于 &lt;code&gt;XMLHTTP&lt;/code&gt; 产品）。帮助处理 &lt;code&gt;XHR&lt;/code&gt; 提出的测试请求。</target>
        </trans-unit>
        <trans-unit id="3c3fb08e281532578dbf5d5549af9bd487594c3f" translate="yes" xml:space="preserve">
          <source>Also restores the mocked methods.</source>
          <target state="translated">同时恢复被模拟的方法。</target>
        </trans-unit>
        <trans-unit id="a1216339018100982a1272df1be89761914a2709" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Array&lt;/code&gt; with status, headers and response body, e.g. &lt;code&gt;[200, { &quot;Content-Type&quot;: &quot;text/html&quot;, &quot;Content-Length&quot;: 2 }, &quot;OK&quot;]&lt;/code&gt;</source>
          <target state="translated">具有状态，标题和响应正文的 &lt;code&gt;Array&lt;/code&gt; ，例如 &lt;code&gt;[200, { &quot;Content-Type&quot;: &quot;text/html&quot;, &quot;Content-Length&quot;: 2 }, &quot;OK&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c8d781784638481520d6fdfa996012ebe878fafc" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;expectation&lt;/code&gt; instance only holds onto a single set of arguments specified with &lt;code&gt;withArgs&lt;/code&gt;. Subsequent calls will overwrite the previously-specified set of arguments (even if they are different), so it is generally not intended that this method be invoked more than once per test case.</source>
          <target state="translated">一个 &lt;code&gt;expectation&lt;/code&gt; 实例仅持有到一组与指定的参数 &lt;code&gt;withArgs&lt;/code&gt; 。后续调用将覆盖先前指定的参数集（即使它们不同），因此通常不希望每个测试用例都多次调用此方法。</target>
        </trans-unit>
        <trans-unit id="47208ca9b1aedc2c87ad69809843a094d11f4012" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;expectation&lt;/code&gt; instance only holds onto a single set of arguments specified with &lt;code&gt;withExactArgs&lt;/code&gt;. Subsequent calls will overwrite the previously-specified set of arguments (even if they are different), so it is generally not intended that this method be invoked more than once per test case.</source>
          <target state="translated">一个 &lt;code&gt;expectation&lt;/code&gt; 实例仅持有到一组与指定的参数 &lt;code&gt;withExactArgs&lt;/code&gt; 。后续调用将覆盖先前指定的参数集（即使它们不同），因此通常不希望每个测试用例都多次调用此方法。</target>
        </trans-unit>
        <trans-unit id="3505b257813d07ae372ee8244539b913705b0378" translate="yes" xml:space="preserve">
          <source>An object of all request headers, i.e.:</source>
          <target state="translated">所有请求头的对象,即:</target>
        </trans-unit>
        <trans-unit id="f515bfd2e923a918496b58d5f8228c47e564294f" translate="yes" xml:space="preserve">
          <source>Array of &lt;code&gt;this&lt;/code&gt; objects, &lt;code&gt;spy.thisValues[0]&lt;/code&gt; is the &lt;code&gt;this&lt;/code&gt; object for the first &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;call&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 对象的数组， &lt;code&gt;spy.thisValues[0]&lt;/code&gt; 是第一次&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;调用&lt;/a&gt;的 &lt;code&gt;this&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="9401219a4396ab18a0e57902d353adf811a88f6b" translate="yes" xml:space="preserve">
          <source>Array of arguments received, &lt;code&gt;spy.args[0]&lt;/code&gt; is an array of arguments received in the first &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;call&lt;/a&gt;.</source>
          <target state="translated">收到的参数数组， &lt;code&gt;spy.args[0]&lt;/code&gt; 是第一个&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;调用中&lt;/a&gt;收到的参数数组。</target>
        </trans-unit>
        <trans-unit id="03bd940ed233ca584de207cf999cac138c99113b" translate="yes" xml:space="preserve">
          <source>Array of exception objects thrown, &lt;code&gt;spy.exceptions[0]&lt;/code&gt; is the exception thrown by the first &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;call&lt;/a&gt;.</source>
          <target state="translated">抛出的异常对象数组， &lt;code&gt;spy.exceptions[0]&lt;/code&gt; 是第一次&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;调用&lt;/a&gt;抛出的异常。</target>
        </trans-unit>
        <trans-unit id="5ca8bc299a797f45959a6b24d40efe18f5d273b3" translate="yes" xml:space="preserve">
          <source>Array of received arguments.</source>
          <target state="translated">收到的参数数组。</target>
        </trans-unit>
        <trans-unit id="374bc843890d50c2e9cc4075451d1e29fd34ecfa" translate="yes" xml:space="preserve">
          <source>Array of return values, &lt;code&gt;spy.returnValues[0]&lt;/code&gt; is the return value of the first &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;call&lt;/a&gt;.</source>
          <target state="translated">返回值数组 &lt;code&gt;spy.returnValues[0]&lt;/code&gt; 是第一个&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;调用&lt;/a&gt;的返回值。</target>
        </trans-unit>
        <trans-unit id="26ad10080836eabc4bb5c0ba5de7e891d088d9aa" translate="yes" xml:space="preserve">
          <source>As a convenience, you can apply &lt;code&gt;stub.reset()&lt;/code&gt; to all stubs using &lt;code&gt;sinon.reset()&lt;/code&gt;</source>
          <target state="translated">为方便起见，你可以申请 &lt;code&gt;stub.reset()&lt;/code&gt; 来使用所有存根 &lt;code&gt;sinon.reset()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c8ff88c81bebc1d3b1210569d66d0ab901a4c70" translate="yes" xml:space="preserve">
          <source>As above, but allows further configuration options, some of which are:</source>
          <target state="translated">如上,但允许进一步的配置选项,其中一些是:</target>
        </trans-unit>
        <trans-unit id="88e51e02e75d60c4491358bbc75380335e1947be" translate="yes" xml:space="preserve">
          <source>As above, but rather than starting the clock with a timestamp of 0, start at the provided timestamp &lt;code&gt;now&lt;/code&gt;.</source>
          <target state="translated">如上，但不是从时间戳0开始计时，而是从 &lt;code&gt;now&lt;/code&gt; 提供的时间戳开始。</target>
        </trans-unit>
        <trans-unit id="73ccb012c1695e56895138bf935e9e75d217be91" translate="yes" xml:space="preserve">
          <source>As spies, stubs can be either anonymous, or wrap existing functions. When wrapping an existing function with a stub, the original function is not called.</source>
          <target state="translated">作为间谍,存根可以是匿名的,也可以是包裹现有函数的。当用存根包装一个现有函数时,原来的函数不会被调用。</target>
        </trans-unit>
        <trans-unit id="2784f995bf0e5b1eabeb187e9b8fef7ae00eeae0" translate="yes" xml:space="preserve">
          <source>As this is synchronous and immediate, this is not suitable for simulating actual network latency in tests or mockups. To simulate network latency with automatic responses, see &lt;code&gt;server.autoRespond&lt;/code&gt; and &lt;code&gt;server.autoRespondAfter&lt;/code&gt;.</source>
          <target state="translated">由于这是同步且即时的，因此不适合在测试或模型中模拟实际的网络延迟。要模拟具有自动响应的网络延迟，请参阅 &lt;code&gt;server.autoRespond&lt;/code&gt; 和 &lt;code&gt;server.autoRespondAfter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="49bf55dc112eb3597726ba8ecf785a4fae4cbce0" translate="yes" xml:space="preserve">
          <source>Assertions</source>
          <target state="translated">Assertions</target>
        </trans-unit>
        <trans-unit id="8f3233009ea8b0b74e293ea4e540f4b5037564d3" translate="yes" xml:space="preserve">
          <source>Assertions API</source>
          <target state="translated">断言API</target>
        </trans-unit>
        <trans-unit id="74fc83d1e2996c7acd6e1ce0764e7bf4aad3edf4" translate="yes" xml:space="preserve">
          <source>Async version of &lt;a href=&quot;#stubcallsargindex&quot;&gt;stub.callsArg(index)&lt;/a&gt;. See also &lt;a href=&quot;#asynchronous-calls&quot;&gt;Asynchronous calls&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stubcallsargindex&quot;&gt;stub.callsArg（index）的&lt;/a&gt;异步版本。另请参见&lt;a href=&quot;#asynchronous-calls&quot;&gt;异步调用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8d2cba8852f0614c57320a9e669bff5dfa231e5c" translate="yes" xml:space="preserve">
          <source>Async version of &lt;a href=&quot;#stubcallsargonindex-context&quot;&gt;stub.callsArgOn(index, context)&lt;/a&gt;. See also &lt;a href=&quot;#asynchronous-calls&quot;&gt;Asynchronous calls&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stubcallsargonindex-context&quot;&gt;stub.callsArgOn（index，context）的&lt;/a&gt;异步版本。另请参见&lt;a href=&quot;#asynchronous-calls&quot;&gt;异步调用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="425f6f4b413fb28d5a01aa30b7c5372072aaacbb" translate="yes" xml:space="preserve">
          <source>Async version of &lt;a href=&quot;#stubcallsargonwithindex-context-arg1-arg2-&quot;&gt;stub.callsArgOnWith(index, context, arg1, arg2, &amp;hellip;)&lt;/a&gt;. See also &lt;a href=&quot;#asynchronous-calls&quot;&gt;Asynchronous calls&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stubcallsargonwithindex-context-arg1-arg2-&quot;&gt;stub.callsArgOnWith（index，context，arg1，arg2，&amp;hellip;）的&lt;/a&gt;异步版本。另请参见&lt;a href=&quot;#asynchronous-calls&quot;&gt;异步调用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9eaf54f2ba13d3ef008da453757a52ea967c1661" translate="yes" xml:space="preserve">
          <source>Async version of &lt;a href=&quot;#stubcallsargwithindex-arg1-arg2-&quot;&gt;stub.callsArgWith(index, arg1, arg2, &amp;hellip;)&lt;/a&gt;. See also &lt;a href=&quot;#asynchronous-calls&quot;&gt;Asynchronous calls&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stubcallsargwithindex-arg1-arg2-&quot;&gt;stub.callsArgWith（index，arg1，arg2，&amp;hellip;）的&lt;/a&gt;异步版本。另请参见&lt;a href=&quot;#asynchronous-calls&quot;&gt;异步调用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c45b2988f29d29e2defe623543a9fd5d78a68ef1" translate="yes" xml:space="preserve">
          <source>Async version of &lt;a href=&quot;#stubyieldsarg1-arg2-&quot;&gt;stub.yields([arg1, arg2, &amp;hellip;])&lt;/a&gt;. See also &lt;a href=&quot;#asynchronous-calls&quot;&gt;Asynchronous calls&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stubyieldsarg1-arg2-&quot;&gt;stub.yields（[arg1，arg2，&amp;hellip;]）的&lt;/a&gt;异步版本。另请参见&lt;a href=&quot;#asynchronous-calls&quot;&gt;异步调用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2d93762a7f6ceac1f89ca78362b00b4997b0502b" translate="yes" xml:space="preserve">
          <source>Async version of &lt;a href=&quot;#stubyieldsoncontext-arg1-arg2-&quot;&gt;stub.yieldsOn(context, [arg1, arg2, &amp;hellip;])&lt;/a&gt;. See also &lt;a href=&quot;#asynchronous-calls&quot;&gt;Asynchronous calls&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stubyieldsoncontext-arg1-arg2-&quot;&gt;stub.yieldsOn（context，[arg1，arg2，&amp;hellip;]）的&lt;/a&gt;异步版本。另请参见&lt;a href=&quot;#asynchronous-calls&quot;&gt;异步调用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0ebb1c3d5c360ecd04fa7e44976cb662b9fa8b41" translate="yes" xml:space="preserve">
          <source>Async version of &lt;a href=&quot;#stubyieldstoonproperty-context-arg1-arg2-&quot;&gt;stub.yieldsToOn(property, context, [arg1, arg2, &amp;hellip;])&lt;/a&gt;. See also &lt;a href=&quot;#asynchronous-calls&quot;&gt;Asynchronous calls&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stubyieldstoonproperty-context-arg1-arg2-&quot;&gt;stub.yieldsToOn（property，context，[arg1，arg2，&amp;hellip;]）的&lt;/a&gt;异步版本。另请参见&lt;a href=&quot;#asynchronous-calls&quot;&gt;异步调用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1b3b9f94c4d1d17854e9ee3c6e21d8e316c0bb94" translate="yes" xml:space="preserve">
          <source>Async version of &lt;a href=&quot;#stubyieldstoproperty-arg1-arg2-&quot;&gt;stub.yieldsTo(property, [arg1, arg2, &amp;hellip;])&lt;/a&gt;. See also &lt;a href=&quot;#asynchronous-calls&quot;&gt;Asynchronous calls&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stubyieldstoproperty-arg1-arg2-&quot;&gt;stub.yieldsTo（property，[arg1，arg2，&amp;hellip;]）的&lt;/a&gt;异步版本。另请参见&lt;a href=&quot;#asynchronous-calls&quot;&gt;异步调用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5c7ffbaa8ef4ef8420694da665321a4afef34039" translate="yes" xml:space="preserve">
          <source>Asynchronous calls</source>
          <target state="translated">异步调用</target>
        </trans-unit>
        <trans-unit id="e33970a22fec3db9b7c97fea152c083f7e33ed53" translate="yes" xml:space="preserve">
          <source>Beware that this is inferred based on the value of the &lt;code&gt;this&lt;/code&gt; object and the spy function&amp;rsquo;s &lt;code&gt;prototype&lt;/code&gt;, so it may give false positives if you actively return the right kind of object.</source>
          <target state="translated">注意，这是根据 &lt;code&gt;this&lt;/code&gt; 对象的值和spy函数的 &lt;code&gt;prototype&lt;/code&gt; 推断的，因此，如果您主动返回正确的对象类型，则可能会产生误报。</target>
        </trans-unit>
        <trans-unit id="e604c9556879a2707588e1e28d997b1557a1a4a1" translate="yes" xml:space="preserve">
          <source>By assigning a function to the &lt;code&gt;onCreate&lt;/code&gt; property of the returned object from &lt;code&gt;useFakeXMLHttpRequest()&lt;/code&gt; you can subscribe to newly created &lt;code&gt;FakeXMLHttpRequest&lt;/code&gt; objects. See below for the fake xhr object API.</source>
          <target state="translated">通过将功能分配给 &lt;code&gt;useFakeXMLHttpRequest()&lt;/code&gt; 返回的对象的 &lt;code&gt;onCreate&lt;/code&gt; 属性，您可以订阅新创建的 &lt;code&gt;FakeXMLHttpRequest&lt;/code&gt; 对象。有关伪造的xhr对象API，请参见下文。</target>
        </trans-unit>
        <trans-unit id="edae01dbbf969c112d1921d62bb8dc72f1bf2026" translate="yes" xml:space="preserve">
          <source>By default it throws an error of type &lt;code&gt;sinon.assert.failException&lt;/code&gt;.</source>
          <target state="translated">默认情况下，它将引发类型为 &lt;code&gt;sinon.assert.failException&lt;/code&gt; 的错误。</target>
        </trans-unit>
        <trans-unit id="545d2a2a6590f59d5968089b13edf53c4c0bd6e2" translate="yes" xml:space="preserve">
          <source>By default this method simply returns &lt;code&gt;request.method&lt;/code&gt;. When &lt;code&gt;server.fakeHTTPMethods&lt;/code&gt; is true, the method will return the value of the &lt;code&gt;_method&lt;/code&gt; parameter if the method is &amp;ldquo;POST&amp;rdquo;.</source>
          <target state="translated">默认情况下，此方法仅返回 &lt;code&gt;request.method&lt;/code&gt; 。当 &lt;code&gt;server.fakeHTTPMethods&lt;/code&gt; 为true时，如果方法为&amp;ldquo; POST&amp;rdquo; ，则该方法将返回 &lt;code&gt;_method&lt;/code&gt; 参数的值。</target>
        </trans-unit>
        <trans-unit id="3cb8e11b850efe1c59bd7b5b9bdc9dbb93448f1c" translate="yes" xml:space="preserve">
          <source>Call in e.g. &lt;code&gt;tearDown&lt;/code&gt;.</source>
          <target state="translated">调用例如 &lt;code&gt;tearDown&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c806fffd6cea3d375246ddfafe9c8852e4e96b5" translate="yes" xml:space="preserve">
          <source>Called every time &lt;code&gt;assertion&lt;/code&gt; passes.</source>
          <target state="translated">每次 &lt;code&gt;assertion&lt;/code&gt; 通过时调用。</target>
        </trans-unit>
        <trans-unit id="41442e6c1f068074551d84f8a4e67d6bc4ebfdaf" translate="yes" xml:space="preserve">
          <source>Calling behavior defining methods like &lt;code&gt;returns&lt;/code&gt; or &lt;code&gt;throws&lt;/code&gt; multiple times overrides the behavior of the stub. As of Sinon version 1.8, you can use the &lt;a href=&quot;#stuboncalln-added-in-v18&quot;&gt;&lt;code&gt;onCall&lt;/code&gt;&lt;/a&gt; method to make a stub respond differently on consecutive calls.</source>
          <target state="translated">多次调用行为定义方法（例如 &lt;code&gt;returns&lt;/code&gt; 或 &lt;code&gt;throws&lt;/code&gt; 覆盖存根的行为。从Sinon 1.8版开始，您可以使用&lt;a href=&quot;#stuboncalln-added-in-v18&quot;&gt; &lt;code&gt;onCall&lt;/code&gt; &lt;/a&gt;方法使存根对连续调用的响应不同。</target>
        </trans-unit>
        <trans-unit id="08eccb6d25cdfd6ff41f0c8d33d29699ca5741f6" translate="yes" xml:space="preserve">
          <source>Calls the above three methods.</source>
          <target state="translated">调用以上三种方法。</target>
        </trans-unit>
        <trans-unit id="deea313127ce9b2bb428d8b6f3594f3f61858d86" translate="yes" xml:space="preserve">
          <source>Can be used for partial matching, Sinon only checks the provided arguments against actual arguments, so a call that received the provided arguments (in the same spots) and possibly others as well will return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">可以用于部分匹配，Sinon仅将提供的参数与实际参数进行检查，因此接收到提供的参数（在相同位置）以及可能还包含其他参数的调用将返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1edb88c8a8f112d6aa2313a80879e1a2fe685631" translate="yes" xml:space="preserve">
          <source>Causes Sinon to replace the global &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;clearTimeout&lt;/code&gt;, &lt;code&gt;setInterval&lt;/code&gt;, &lt;code&gt;clearInterval&lt;/code&gt;, &lt;code&gt;setImmediate&lt;/code&gt;, &lt;code&gt;clearImmediate&lt;/code&gt;, &lt;code&gt;process.hrtime&lt;/code&gt;, &lt;code&gt;performance.now&lt;/code&gt;(when available) and &lt;code&gt;Date&lt;/code&gt; with a custom implementation which is bound to the returned &lt;code&gt;clock&lt;/code&gt; object.</source>
          <target state="translated">使Sinon用绑定到返回的 &lt;code&gt;clock&lt;/code&gt; 对象的自定义实现替换全局 &lt;code&gt;setTimeout&lt;/code&gt; ， &lt;code&gt;clearTimeout&lt;/code&gt; ， &lt;code&gt;setInterval&lt;/code&gt; ， &lt;code&gt;clearInterval&lt;/code&gt; ， &lt;code&gt;setImmediate&lt;/code&gt; ， &lt;code&gt;clearImmediate&lt;/code&gt; ， &lt;code&gt;process.hrtime&lt;/code&gt; ， &lt;code&gt;performance.now&lt;/code&gt; （如果可用）和 &lt;code&gt;Date&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="55808cdcafa0c2dab51475b2fa86d035490da186" translate="yes" xml:space="preserve">
          <source>Causes Sinon to replace the native &lt;code&gt;XMLHttpRequest&lt;/code&gt; object in browsers that support it with a custom implementation which does not send actual requests.</source>
          <target state="translated">使Sinon用不发送实际请求的自定义实现在支持它的浏览器中替换本机 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="3196193bac74e52290a8a082bbaca0c5b92c9177" translate="yes" xml:space="preserve">
          <source>Causes all expectations created from the mock to return promises using a specific Promise library instead of the global one when using &lt;code&gt;expectation.rejects&lt;/code&gt; or &lt;code&gt;expectation.resolves&lt;/code&gt;. Returns the mock object to allow chaining.</source>
          <target state="translated">在使用 &lt;code&gt;expectation.rejects&lt;/code&gt; 或 &lt;code&gt;expectation.resolves&lt;/code&gt; 时，使通过模拟创建的所有期望都使用特定的Promise库而不是全局库返回承诺。返回模拟对象以允许链接。</target>
        </trans-unit>
        <trans-unit id="08ddc37de872455588b102aa2d7323501e3bc308" translate="yes" xml:space="preserve">
          <source>Causes all queued asynchronous requests to receive a response.</source>
          <target state="translated">导致所有排队的异步请求都收到响应。</target>
        </trans-unit>
        <trans-unit id="36fb273edc3d2051001403542c602e326816704c" translate="yes" xml:space="preserve">
          <source>Causes all stubs and mocks created from the sandbox to return promises using a specific Promise library instead of the global one when using &lt;code&gt;stub.rejects&lt;/code&gt; or &lt;code&gt;stub.resolves&lt;/code&gt;. Returns the stub to allow chaining.</source>
          <target state="translated">使用 &lt;code&gt;stub.rejects&lt;/code&gt; 或 &lt;code&gt;stub.resolves&lt;/code&gt; 时，使从沙箱创建的所有存根和模拟都使用特定的Promise库而不是全局库返回promise。返回存根以允许链接。</target>
        </trans-unit>
        <trans-unit id="4c3d2c34899cc34b279dc4da601b2f2826ab1595" translate="yes" xml:space="preserve">
          <source>Causes all timers scheduled within the affected time range to be called. &lt;code&gt;time&lt;/code&gt; may be the number of milliseconds to advance the clock by or a human-readable string. Valid string formats are &amp;ldquo;08&amp;rdquo; for eight seconds, &amp;ldquo;01:00&amp;rdquo; for one minute and &amp;ldquo;02:34:10&amp;rdquo; for two hours, 34 minutes and ten seconds.</source>
          <target state="translated">使所有在受影响的时间范围内调度的计时器被调用。 &lt;code&gt;time&lt;/code&gt; 可以是提前时钟的毫秒数，也可以是人类可读的字符串。有效的字符串格式为&amp;ldquo; 08&amp;rdquo;代表八秒，&amp;ldquo; 01:00&amp;rdquo;代表一分钟，&amp;ldquo; 02:34:10&amp;rdquo;代表两小时34分十秒。</target>
        </trans-unit>
        <trans-unit id="da2d14313fdbb111e19c105c9ef32f964723e4ba" translate="yes" xml:space="preserve">
          <source>Causes the original method wrapped into the stub to be called when none of the conditional stubs are matched.</source>
          <target state="translated">当没有一个条件存根被匹配时,导致包裹到存根中的原始方法被调用。</target>
        </trans-unit>
        <trans-unit id="8553f2f76a84eaed0c50ecf4a37cad1c693a339f" translate="yes" xml:space="preserve">
          <source>Causes the server to automatically respond to incoming requests after a timeout.</source>
          <target state="translated">使服务器在超时后自动响应传入的请求。</target>
        </trans-unit>
        <trans-unit id="04f539ca35453a222bd1e8e280f1f8c0373a5d25" translate="yes" xml:space="preserve">
          <source>Causes the server to respond to any request not matched by another response with the provided data. The default catch-all response is &lt;code&gt;[404, {}, &quot;&quot;]&lt;/code&gt;.</source>
          <target state="translated">使服务器使用提供的数据响应与另一个响应不匹配的任何请求。默认的全部响应是 &lt;code&gt;[404, {}, &quot;&quot;]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3943c18004d4c4c5b3f7b29bcdd83e433925c13c" translate="yes" xml:space="preserve">
          <source>Causes the spy to invoke a callback passed as a property of an object to the spy.</source>
          <target state="translated">使间谍调用作为对象属性传递给间谍的回调。</target>
        </trans-unit>
        <trans-unit id="fdfab7f4f0b0a3e72990567c5681fec501188f76" translate="yes" xml:space="preserve">
          <source>Causes the stub to call the argument at the provided index as a callback function.</source>
          <target state="translated">使存根以回调函数的形式调用给定索引的参数。</target>
        </trans-unit>
        <trans-unit id="f596caf2bd429d0bf0fc6c14941f6d4101c2375d" translate="yes" xml:space="preserve">
          <source>Causes the stub to call the first callback it receives with the provided arguments (if any).</source>
          <target state="translated">使存根调用它收到的第一个回调,并使用提供的参数(如果有的话)。</target>
        </trans-unit>
        <trans-unit id="834c36b015816b0435a15afb01584f3470691137" translate="yes" xml:space="preserve">
          <source>Causes the stub to return a Promise which rejects with an exception (&lt;code&gt;Error&lt;/code&gt;).</source>
          <target state="translated">使存根返回一个Promise，该Promise会拒绝，并带有异常（ &lt;code&gt;Error&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0e3fd02359926b464d7e6a2be17f8ec99082c4b9" translate="yes" xml:space="preserve">
          <source>Causes the stub to return a Promise which rejects with an exception of the provided type.</source>
          <target state="translated">导致存根返回一个Promise,该Promise以所提供的类型为例外而被拒绝。</target>
        </trans-unit>
        <trans-unit id="8c47579861ee07e2c7e723036583b81d1b45d6b2" translate="yes" xml:space="preserve">
          <source>Causes the stub to return a Promise which rejects with the provided exception object.</source>
          <target state="translated">导致存根返回一个Promise,用提供的异常对象拒绝。</target>
        </trans-unit>
        <trans-unit id="af57d551985787d7f1893e12e8de04bd8fb173a1" translate="yes" xml:space="preserve">
          <source>Causes the stub to return a Promise which resolves to the argument at the provided index.</source>
          <target state="translated">导致存根返回一个Promise,该Promise在提供的索引处解析到参数。</target>
        </trans-unit>
        <trans-unit id="c369d9151c868df8ac697f422c9f35c22163373b" translate="yes" xml:space="preserve">
          <source>Causes the stub to return a Promise which resolves to the provided value.</source>
          <target state="translated">导致存根返回一个Promise,该Promise解析为所提供的值。</target>
        </trans-unit>
        <trans-unit id="843b8f988da8f04331cd0b3b476c59a69ab025b3" translate="yes" xml:space="preserve">
          <source>Causes the stub to return its &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">使存根返回其 &lt;code&gt;this&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="9b1829863e2e013b55258002ff73c38ee00762da" translate="yes" xml:space="preserve">
          <source>Causes the stub to return promises using a specific Promise library instead of the global one when using &lt;code&gt;stub.rejects&lt;/code&gt; or &lt;code&gt;stub.resolves&lt;/code&gt;. Returns the stub to allow chaining.</source>
          <target state="translated">使用 &lt;code&gt;stub.rejects&lt;/code&gt; 或 &lt;code&gt;stub.resolves&lt;/code&gt; 时，使存根使用特定的Promise库而不是全局库返回Promise 。返回存根以允许链接。</target>
        </trans-unit>
        <trans-unit id="bbc7613064f4d9dab91852b0efa276e310cd4af8" translate="yes" xml:space="preserve">
          <source>Causes the stub to return the argument at the provided index.</source>
          <target state="translated">导致存根在提供的索引处返回参数。</target>
        </trans-unit>
        <trans-unit id="984d693e127f511a458e792dff3e47d96e81a0a4" translate="yes" xml:space="preserve">
          <source>Causes the stub to throw an exception (&lt;code&gt;Error&lt;/code&gt;).</source>
          <target state="translated">使存根引发异常（ &lt;code&gt;Error&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6355dfd97cdfa0c24b0cd9e011149cd7a22b7243" translate="yes" xml:space="preserve">
          <source>Causes the stub to throw an exception with the &lt;code&gt;name&lt;/code&gt; property set to the provided string. The message parameter is optional and will set the &lt;code&gt;message&lt;/code&gt; property of the exception.</source>
          <target state="translated">使存根引发异常，并将 &lt;code&gt;name&lt;/code&gt; 属性设置为提供的字符串。message参数是可选的，它将设置异常的 &lt;code&gt;message&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="b7c1e6b1319c157c120ce75f9813fcc2557f0875" translate="yes" xml:space="preserve">
          <source>Causes the stub to throw the argument at the provided index.</source>
          <target state="translated">导致存根将参数扔到所提供的索引处。</target>
        </trans-unit>
        <trans-unit id="d487ef2bc4e5debe160508ef050544546bbbe6e6" translate="yes" xml:space="preserve">
          <source>Causes the stub to throw the exception returned by the function.</source>
          <target state="translated">导致存根抛出函数返回的异常。</target>
        </trans-unit>
        <trans-unit id="87ad652b30e6da9f433b32b6d42a940257442d22" translate="yes" xml:space="preserve">
          <source>Causes the stub to throw the provided exception object.</source>
          <target state="translated">使存根抛出所提供的异常对象。</target>
        </trans-unit>
        <trans-unit id="2c28fecd70fd47e0d3562b5c970d6aa63fb6e428" translate="yes" xml:space="preserve">
          <source>Chrome 48</source>
          <target state="translated">铬合金48</target>
        </trans-unit>
        <trans-unit id="13f2aa2118d3e01ede3e22da43b0690bcfa79e02" translate="yes" xml:space="preserve">
          <source>Combining matchers</source>
          <target state="translated">组合匹配器</target>
        </trans-unit>
        <trans-unit id="5d60c7dd62fdcf4abcc61a6a7d335b7117968b4d" translate="yes" xml:space="preserve">
          <source>Compatibility</source>
          <target state="translated">Compatibility</target>
        </trans-unit>
        <trans-unit id="b7c03fd3e02d55ecea8aa859137d68c4adc80f1b" translate="yes" xml:space="preserve">
          <source>Configures the fake server.</source>
          <target state="translated">配置假服务器。</target>
        </trans-unit>
        <trans-unit id="18b017e5b4b89d6ff684844a26fb098545f160cf" translate="yes" xml:space="preserve">
          <source>Contribute</source>
          <target state="translated">Contribute</target>
        </trans-unit>
        <trans-unit id="06543ce1743bde616d9d4ba4c83d33dc195ea011" translate="yes" xml:space="preserve">
          <source>Control a method&amp;rsquo;s behavior from a test to force the code down a specific path. Examples include forcing a method to throw an error in order to test error handling.</source>
          <target state="translated">从测试中控制方法的行为，以强制代码沿特定路径移动。示例包括强制方法抛出错误以测试错误处理。</target>
        </trans-unit>
        <trans-unit id="b962650cbc723819920b47f76f6bba21c842a0f4" translate="yes" xml:space="preserve">
          <source>Creates a fake that returns a rejected &lt;code&gt;Promise&lt;/code&gt; for the passed value.</source>
          <target state="translated">创建一个伪造品，该伪造品将为传递的值返回被拒绝的 &lt;code&gt;Promise&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a99d0ece6dd275875bf9c4181a0105722466200f" translate="yes" xml:space="preserve">
          <source>Creates a fake that returns a resolved &lt;code&gt;Promise&lt;/code&gt; for the passed value.</source>
          <target state="translated">创建一个伪造品，该伪造品将为传递的值返回已解决的 &lt;code&gt;Promise&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="813d8540bad9575e3d54f24dab60ed8cf8c5bffe" translate="yes" xml:space="preserve">
          <source>Creates a fake that returns the &lt;code&gt;value&lt;/code&gt; argument</source>
          <target state="translated">创建一个伪造品，返回 &lt;code&gt;value&lt;/code&gt; 参数</target>
        </trans-unit>
        <trans-unit id="13d58f92b2ffe9c604b2b7093622135d03d9f1ec" translate="yes" xml:space="preserve">
          <source>Creates a fake that throws an &lt;code&gt;Error&lt;/code&gt; with the provided value as the &lt;code&gt;message&lt;/code&gt; property.</source>
          <target state="translated">创建一个伪造品，该伪造品将使用提供的值作为 &lt;code&gt;message&lt;/code&gt; 属性抛出 &lt;code&gt;Error&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4eaffe69fc282b4ab38945c37c7f44a8bce5ad2e" translate="yes" xml:space="preserve">
          <source>Creates a mock for the provided object.</source>
          <target state="translated">为提供的对象创建一个模拟对象。</target>
        </trans-unit>
        <trans-unit id="b32aeee2b02bb85e99f61cd4daa76138fb2f6c4e" translate="yes" xml:space="preserve">
          <source>Creates a new object with the given function as the protoype and stubs all implemented functions.</source>
          <target state="translated">以给定的函数为原型创建一个新对象,并将所有实现的函数存根化。</target>
        </trans-unit>
        <trans-unit id="8a1b49a1661f6ef3442affdb4b706c201eba3609" translate="yes" xml:space="preserve">
          <source>Creates a new sandbox object with spies, stubs, and mocks.</source>
          <target state="translated">创建一个新的沙盒对象,包括间谍、存根和嘲讽。</target>
        </trans-unit>
        <trans-unit id="1e1851e3c4673875c17bd5dbba74d0cce674f796" translate="yes" xml:space="preserve">
          <source>Creates a new server.</source>
          <target state="translated">创建一个新的服务器。</target>
        </trans-unit>
        <trans-unit id="375a9f5ed5d99799d1516c45f89e7bb5199f2e25" translate="yes" xml:space="preserve">
          <source>Creates a server that also manages fake timers.</source>
          <target state="translated">创建一个服务器,同时管理假的计时器。</target>
        </trans-unit>
        <trans-unit id="b8e65cba10dfa8d7f7bb55754dce0d3598bd34b8" translate="yes" xml:space="preserve">
          <source>Creates a spy for &lt;code&gt;object.method&lt;/code&gt; and replaces the original method with the spy. An exception is thrown if the property is not already a function. The spy acts exactly like the original method in all cases. The original method can be restored by calling &lt;code&gt;object.method.restore()&lt;/code&gt;. The returned spy is the function object which replaced the original method. &lt;code&gt;spy === object.method&lt;/code&gt;.</source>
          <target state="translated">为 &lt;code&gt;object.method&lt;/code&gt; 创建一个间谍，并将原始方法替换为间谍。如果该属性还不是函数，则抛出异常。在所有情况下，间谍的行为都与原始方法完全一样。可以通过调用 &lt;code&gt;object.method.restore()&lt;/code&gt; 恢复原始方法。返回的间谍是替换原始方法的函数对象。 &lt;code&gt;spy === object.method&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09088755a4d24f16c2f3ecdbfa2f4448dd340a1b" translate="yes" xml:space="preserve">
          <source>Creates a spy that only records &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;calls&lt;/a&gt; when the received arguments match those passed to &lt;code&gt;withArgs&lt;/code&gt;. This is useful to be more expressive in your assertions, where you can access the spy with the same &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;call&lt;/a&gt;.</source>
          <target state="translated">创建一个间谍，仅在接收到的参数与传递给 &lt;code&gt;withArgs&lt;/code&gt; 的参数匹配时记录&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;通话&lt;/a&gt;。这对于在断言中更具表现力很有用，在断言中您可以使用相同的&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;call&lt;/a&gt;访问间谍。</target>
        </trans-unit>
        <trans-unit id="7f33a4752b485b68279ebe099a205727303f8d72" translate="yes" xml:space="preserve">
          <source>Creates an anonymous function that records arguments, &lt;code&gt;this&lt;/code&gt; value, exceptions and return values for all calls.</source>
          <target state="translated">创建一个匿名函数， &lt;code&gt;this&lt;/code&gt; 函数记录所有调用的参数，此值，异常和返回值。</target>
        </trans-unit>
        <trans-unit id="2972707f1ad580e4d8fdc33d504990cae487a891" translate="yes" xml:space="preserve">
          <source>Creates an anonymous stub function</source>
          <target state="translated">创建一个匿名的存根函数</target>
        </trans-unit>
        <trans-unit id="053de89ced25e6f550ff4dbb9700ae16d0648d15" translate="yes" xml:space="preserve">
          <source>Creates an expectation without a mock object, basically an anonymous mock function.</source>
          <target state="translated">创建一个没有mock对象的期望,基本上是一个匿名的mock函数。</target>
        </trans-unit>
        <trans-unit id="0fe6d85990841fa2e68b646a196c7b96a8318846" translate="yes" xml:space="preserve">
          <source>Creating a fake</source>
          <target state="translated">创建一个假的</target>
        </trans-unit>
        <trans-unit id="cfbcca4e0499ecdea698f9226b1e11c84cbd4e6c" translate="yes" xml:space="preserve">
          <source>Creating a spy as an anonymous function</source>
          <target state="translated">创建一个匿名函数的间谍</target>
        </trans-unit>
        <trans-unit id="32238159b06a3fe17f9da52325cdcba977f46791" translate="yes" xml:space="preserve">
          <source>Creating spies: &lt;code&gt;sinon.spy()&lt;/code&gt; Method Signatures</source>
          <target state="translated">创建间谍： &lt;code&gt;sinon.spy()&lt;/code&gt; 方法签名</target>
        </trans-unit>
        <trans-unit id="b25625f11eeda139bf625365d7080225e6dfc50d" translate="yes" xml:space="preserve">
          <source>Custom matchers</source>
          <target state="translated">定制匹配器</target>
        </trans-unit>
        <trans-unit id="3a8ed70211b1495bd1e5b6a6b952b374093fa3ab" translate="yes" xml:space="preserve">
          <source>Custom matchers are created with the &lt;code&gt;sinon.match&lt;/code&gt; factory which takes a test function and an optional message.</source>
          <target state="translated">使用 &lt;code&gt;sinon.match&lt;/code&gt; 工厂创建自定义匹配器，该工厂具有测试功能和可选消息。</target>
        </trans-unit>
        <trans-unit id="86c16ac82000e048df8e231b8a00ee56ca52a38e" translate="yes" xml:space="preserve">
          <source>Default &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">默认为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6d72a87e6ca669498157e500dc90d1e5fa61249d" translate="yes" xml:space="preserve">
          <source>Default implementation does nothing.</source>
          <target state="translated">缺省执行什么也不做。</target>
        </trans-unit>
        <trans-unit id="6cb7f7d1a40e4e120fa2cb84d963b01c2f482e4a" translate="yes" xml:space="preserve">
          <source>Default sandbox</source>
          <target state="translated">默认沙盒</target>
        </trans-unit>
        <trans-unit id="2f40166adea09dbdbfa89544ca3831f924232233" translate="yes" xml:space="preserve">
          <source>Default status is 200 and default headers are none.</source>
          <target state="translated">缺省状态为200,缺省标题为无。</target>
        </trans-unit>
        <trans-unit id="0a60d279882154c3ad77f8a28a0e113390e94835" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;AssertError&lt;/code&gt;.</source>
          <target state="translated">默认为 &lt;code&gt;AssertError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="285678b9d4c77069f83628fc7a127438ae08e5a8" translate="yes" xml:space="preserve">
          <source>Defines a new setter for this stub.</source>
          <target state="translated">为这个存根定义了一个新的设定器。</target>
        </trans-unit>
        <trans-unit id="37318c83a26bcc190ee5d4ae37b5a1b689e8e821" translate="yes" xml:space="preserve">
          <source>Defines a new value for this stub.</source>
          <target state="translated">为该存根定义一个新值。</target>
        </trans-unit>
        <trans-unit id="74cd87a0fec86f447568d18459c6787f8eec17d6" translate="yes" xml:space="preserve">
          <source>Defines the behavior of the stub on the &lt;em&gt;nth&lt;/em&gt; call. Useful for testing sequential interactions.</source>
          <target state="translated">定义存根在第&lt;em&gt;n个&lt;/em&gt;调用上的行为。对于测试顺序交互很有用。</target>
        </trans-unit>
        <trans-unit id="9acdb048f74192f41fb6c714c2c3ab664df5031c" translate="yes" xml:space="preserve">
          <source>Defining stub behavior on consecutive calls</source>
          <target state="translated">定义连续调用的存根行为</target>
        </trans-unit>
        <trans-unit id="57ccb9f98fcdea073e1a79fb186eacd26cbae277" translate="yes" xml:space="preserve">
          <source>Does not change the object, but returns a mock object to set expectations on the object&amp;rsquo;s methods.</source>
          <target state="translated">不更改对象，但返回模拟对象以设置对对象方法的期望。</target>
        </trans-unit>
        <trans-unit id="652a3d1c79944c7c3a80686986f24f571ff37c53" translate="yes" xml:space="preserve">
          <source>ES5.1</source>
          <target state="translated">ES5.1</target>
        </trans-unit>
        <trans-unit id="8de019a098a5c49dacbbaa1dd60ee7c434e53b88" translate="yes" xml:space="preserve">
          <source>Edge 14</source>
          <target state="translated">边缘14</target>
        </trans-unit>
        <trans-unit id="6e050634f9313d88518c68ea0f6e583d5753ae7f" translate="yes" xml:space="preserve">
          <source>Every assertion fails by calling this method.</source>
          <target state="translated">每一个断言都会因为调用这个方法而失败。</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="50d47bf1d2a47d2130b617467abe768b61caeccf" translate="yes" xml:space="preserve">
          <source>Exception thrown, if any.</source>
          <target state="translated">抛出的异常,如果有的话。</target>
        </trans-unit>
        <trans-unit id="c06fb493ce9cd540c6aa1e85725c823bf9cfcbf3" translate="yes" xml:space="preserve">
          <source>Expect the method to be called exactly &lt;code&gt;number&lt;/code&gt; times.</source>
          <target state="translated">期望该方法被调用准确 &lt;code&gt;number&lt;/code&gt; 倍。</target>
        </trans-unit>
        <trans-unit id="0254961fe5269280ee08ee1afcc36f03254b3dc9" translate="yes" xml:space="preserve">
          <source>Expect the method to be called exactly once.</source>
          <target state="translated">期待该方法被准确调用一次。</target>
        </trans-unit>
        <trans-unit id="816f0806c89b627f6b69f6522611450ce7a05bf4" translate="yes" xml:space="preserve">
          <source>Expect the method to be called exactly thrice.</source>
          <target state="translated">期待该方法被准确调用三次。</target>
        </trans-unit>
        <trans-unit id="6acf75f71d8b6e1a4cd19d5d377d58b4b1ddceaf" translate="yes" xml:space="preserve">
          <source>Expect the method to be called exactly twice.</source>
          <target state="translated">期待该方法正好被调用两次。</target>
        </trans-unit>
        <trans-unit id="bf94ce1f185c307516849f658a9efe67951b6986" translate="yes" xml:space="preserve">
          <source>Expect the method to be called with &lt;code&gt;obj&lt;/code&gt; as &lt;code&gt;this&lt;/code&gt;.&amp;rdquo;}</source>
          <target state="translated">期待与被调用方法 &lt;code&gt;obj&lt;/code&gt; 为 &lt;code&gt;this&lt;/code&gt; 。&amp;rdquo;}</target>
        </trans-unit>
        <trans-unit id="69f86ae6bb6914d3a140117cc286df106c4f96b9" translate="yes" xml:space="preserve">
          <source>Expect the method to be called with the provided arguments and no others.</source>
          <target state="translated">期待该方法被调用时使用提供的参数,而不是其他参数。</target>
        </trans-unit>
        <trans-unit id="634612ec30198b47a6d584650a2edaa5afc6bf0d" translate="yes" xml:space="preserve">
          <source>Expect the method to be called with the provided arguments and possibly others.</source>
          <target state="translated">期待该方法被调用时使用所提供的参数和可能的其他参数。</target>
        </trans-unit>
        <trans-unit id="34c47bc93b0e4461e8528c86c1cc6af6ea9e72dd" translate="yes" xml:space="preserve">
          <source>Expect the method to never be called.</source>
          <target state="translated">期待该方法永远不会被调用。</target>
        </trans-unit>
        <trans-unit id="ad7c70de24ef0f3d5aeaa4dfea7a9644a78c2cd0" translate="yes" xml:space="preserve">
          <source>Expectations</source>
          <target state="translated">Expectations</target>
        </trans-unit>
        <trans-unit id="1cb099e84859324b49e34a2e7674827a24dfc4a7" translate="yes" xml:space="preserve">
          <source>Exposes assertions into another object, to better integrate with the test framework. For instance, JsTestDriver uses global assertions, and to make Sinon.JS assertions appear alongside them, you can do.</source>
          <target state="translated">将断言暴露在另一个对象中,以便更好地与测试框架集成。例如,JsTestDriver使用全局断言,要想让Sinon.JS的断言和它们一起出现,你可以这样做。</target>
        </trans-unit>
        <trans-unit id="5d0efeba4b5577f74cb9a3b7bddf56bd700483ab" translate="yes" xml:space="preserve">
          <source>Fake &lt;code&gt;XHR&lt;/code&gt; and server</source>
          <target state="translated">假 &lt;code&gt;XHR&lt;/code&gt; 和服务器</target>
        </trans-unit>
        <trans-unit id="cb6e3d20549619077a1f1ec4a82019cfd7447628" translate="yes" xml:space="preserve">
          <source>Fake &lt;code&gt;XMLHttpRequest&lt;/code&gt;</source>
          <target state="translated">伪 &lt;code&gt;XMLHttpRequest&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b93a5417d87863fed037ac17ff355c90b262283d" translate="yes" xml:space="preserve">
          <source>Fake XHR and server</source>
          <target state="translated">伪造的XHR和服务器</target>
        </trans-unit>
        <trans-unit id="fef9a3d5f39e8b7c4dc2fea1f8d24cb60e0e55d0" translate="yes" xml:space="preserve">
          <source>Fake server</source>
          <target state="translated">假服务器</target>
        </trans-unit>
        <trans-unit id="4c6160a47810e3d2784d02036f3efa1c518e7e65" translate="yes" xml:space="preserve">
          <source>Fake server options</source>
          <target state="translated">伪造服务器选项</target>
        </trans-unit>
        <trans-unit id="74b4d76f786e840d853ebfce82b5713765f30988" translate="yes" xml:space="preserve">
          <source>Fake timers</source>
          <target state="translated">伪装定时器</target>
        </trans-unit>
        <trans-unit id="78f3261f5002c74adb769ea42fc99d79f0789d1b" translate="yes" xml:space="preserve">
          <source>Fake timers API</source>
          <target state="translated">假定时器API</target>
        </trans-unit>
        <trans-unit id="e0dd4dc06f5991685b8874304ac6baa7a3e19713" translate="yes" xml:space="preserve">
          <source>Fake timers are synchronous implementations of &lt;code&gt;setTimeout&lt;/code&gt; and friends that Sinon.JS can overwrite the global functions with to allow you to more easily test code using them.</source>
          <target state="translated">虚假计时器是 &lt;code&gt;setTimeout&lt;/code&gt; 和friends的同步实现，Sinon.JS可以使用它们来覆盖全局函数，从而使您可以更轻松地使用它们来测试代码。</target>
        </trans-unit>
        <trans-unit id="e12154610b790081dea7d34fb71b0171c8b98ef1" translate="yes" xml:space="preserve">
          <source>Fake timers provide a &lt;code&gt;clock&lt;/code&gt; object to pass time, which can also be used to control &lt;code&gt;Date&lt;/code&gt; objects created through either &lt;code&gt;new Date();&lt;/code&gt; or &lt;code&gt;Date.now();&lt;/code&gt; (if supported by the browser).</source>
          <target state="translated">伪定时器提供了一个 &lt;code&gt;clock&lt;/code&gt; 对象来传递时间，它也可以用来控制通过 &lt;code&gt;new Date();&lt;/code&gt; 创建的 &lt;code&gt;Date&lt;/code&gt; 对象。或 &lt;code&gt;Date.now();&lt;/code&gt; （如果浏览器支持）。</target>
        </trans-unit>
        <trans-unit id="9ef29e0faea360d52145714980be83c9f87973ea" translate="yes" xml:space="preserve">
          <source>FakeXMLHttpRequest.addFilter()</source>
          <target state="translated">FakeXMLHttpRequest.addFilter()</target>
        </trans-unit>
        <trans-unit id="fc790d4e2845ef2e5691cfb041dde3ccefdfd7df" translate="yes" xml:space="preserve">
          <source>FakeXMLHttpRequest.useFilters</source>
          <target state="translated">FakeXMLHttpRequest.useFilters</target>
        </trans-unit>
        <trans-unit id="be8ade9a9c394607854dfdcf688a7cc04104700f" translate="yes" xml:space="preserve">
          <source>Fakes</source>
          <target state="translated">Fakes</target>
        </trans-unit>
        <trans-unit id="80204d154a8a8196c1a8cb47c5ba53d2d65cdc61" translate="yes" xml:space="preserve">
          <source>Fakes XHR and binds a server object to the sandbox such that it too is restored when calling &lt;code&gt;sandbox.restore()&lt;/code&gt;.</source>
          <target state="translated">伪造XHR并将服务器对象绑定到沙箱，以便在调用 &lt;code&gt;sandbox.restore()&lt;/code&gt; 时也将其还原。</target>
        </trans-unit>
        <trans-unit id="5608201a58bb2a3162920040db1c695c826d4a31" translate="yes" xml:space="preserve">
          <source>Fakes XHR and binds the resulting object to the sandbox such that it too is restored when calling &lt;code&gt;sandbox.restore()&lt;/code&gt;.</source>
          <target state="translated">伪造XHR并将生成的对象绑定到沙箱，以便在调用 &lt;code&gt;sandbox.restore()&lt;/code&gt; 时也将其还原。</target>
        </trans-unit>
        <trans-unit id="c2ceb5debb0988099557c1817dd20e3fbe514d1c" translate="yes" xml:space="preserve">
          <source>Fakes can be created with behavior, which cannot be changed once the fake has been created.</source>
          <target state="translated">假货可以用行为来创建,一旦创建了假货就不能改变。</target>
        </trans-unit>
        <trans-unit id="825153ab86bd0b67854a470d563420759ce939d0" translate="yes" xml:space="preserve">
          <source>Fakes timers and binds the &lt;code&gt;clock&lt;/code&gt; object to the sandbox such that it too is restored when calling &lt;code&gt;sandbox.restore()&lt;/code&gt;.</source>
          <target state="translated">伪造计时器并将 &lt;code&gt;clock&lt;/code&gt; 对象绑定到沙箱，以便在调用 &lt;code&gt;sandbox.restore()&lt;/code&gt; 时也将其还原。</target>
        </trans-unit>
        <trans-unit id="510db0cadc353c1d671841263d050b32c383eaf6" translate="yes" xml:space="preserve">
          <source>Fakes with behavior</source>
          <target state="translated">有行为的假货</target>
        </trans-unit>
        <trans-unit id="368e911eb16360589fb38e748111504e2aae538e" translate="yes" xml:space="preserve">
          <source>Filtered requests</source>
          <target state="translated">过滤的请求</target>
        </trans-unit>
        <trans-unit id="e311ed5e824f0af8c3ae8877e7cdd7f5f2659d6c" translate="yes" xml:space="preserve">
          <source>Firefox 45</source>
          <target state="translated">火狐45</target>
        </trans-unit>
        <trans-unit id="06ca8f2557da3c285d923645827746971578ea6d" translate="yes" xml:space="preserve">
          <source>For custom HTTP method faking, override &lt;code&gt;server.getHTTPMethod(request)&lt;/code&gt;</source>
          <target state="translated">对于自定义HTTP方法伪造，请覆盖 &lt;code&gt;server.getHTTPMethod(request)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="878f2fc3d2caaf89f6dd8a0563565a6a4e847eb7" translate="yes" xml:space="preserve">
          <source>For example, if you&amp;rsquo;re using mocha you can place this in a test file at the root level:</source>
          <target state="translated">例如，如果您使用的是Mocha，则可以将其放在根目录下的测试文件中：</target>
        </trans-unit>
        <trans-unit id="ae368bfc771721a611e0ef5bca53f2435e39f3c4" translate="yes" xml:space="preserve">
          <source>For help with handling JSON-P please refer to our &lt;a href=&quot;#json-p&quot;&gt;notes below&lt;/a&gt;</source>
          <target state="translated">有关处理JSON-P的帮助，请参阅&lt;a href=&quot;#json-p&quot;&gt;下面&lt;/a&gt;的注释</target>
        </trans-unit>
        <trans-unit id="9f16c25b0d728b07e8abc833ddc88ca010d17f1b" translate="yes" xml:space="preserve">
          <source>For more advanced setups using multiple sandboxes, please see &lt;a href=&quot;https://sinonjs.org/releases/sandbox&quot;&gt;sandbox&lt;/a&gt;</source>
          <target state="translated">有关使用多个沙箱的更高级设置，请参阅&lt;a href=&quot;https://sinonjs.org/releases/sandbox&quot;&gt;沙箱&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aa3382bb120891e0962e2e6c928050fd4196d861" translate="yes" xml:space="preserve">
          <source>For standalone usage of fake timers it is recommended to use &lt;a href=&quot;https://github.com/sinonjs/lolex&quot;&gt;lolex&lt;/a&gt; package instead. It provides the same set of features (Sinon uses it under the hood) and was previously extracted from Sinon.JS.</source>
          <target state="translated">对于假计时器的独立使用，建议改用&lt;a href=&quot;https://github.com/sinonjs/lolex&quot;&gt;lolex&lt;/a&gt;软件包。它提供了相同的功能集（Sinon在后台使用了它），并且先前是从Sinon.JS中提取的。</target>
        </trans-unit>
        <trans-unit id="3c53b47f02cfb6e877179d97e08adc1695c963be" translate="yes" xml:space="preserve">
          <source>For synchronous immediate responses, use &lt;code&gt;respondImmediately&lt;/code&gt; instead.</source>
          <target state="translated">对于同步即时响应， &lt;code&gt;respondImmediately&lt;/code&gt; 改为使用responseImmediately。</target>
        </trans-unit>
        <trans-unit id="50b66309557d97cfd2c0436aba7db6e4ec635867" translate="yes" xml:space="preserve">
          <source>Forgetting to restore your sandbox results in a memory leak.</source>
          <target state="translated">忘了恢复沙盒,导致内存泄漏。</target>
        </trans-unit>
        <trans-unit id="024d0703e9d2b2878e303fd9011e65d9882eee96" translate="yes" xml:space="preserve">
          <source>General setup</source>
          <target state="translated">一般设置</target>
        </trans-unit>
        <trans-unit id="aa8b7b7af8aea90dce48c8c6ed441c311263a38d" translate="yes" xml:space="preserve">
          <source>High-level API to manipulate &lt;code&gt;FakeXMLHttpRequest&lt;/code&gt; instances.</source>
          <target state="translated">操纵 &lt;code&gt;FakeXMLHttpRequest&lt;/code&gt; 实例的高级API 。</target>
        </trans-unit>
        <trans-unit id="ef95bfa6ca14f14eef560125098db88e22d856ca" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;server&lt;/code&gt; and &lt;code&gt;requests&lt;/code&gt; properties are added to the sandbox. Can also be an object to use for fake server. The default one is &lt;code&gt;sinon.fakeServer&lt;/code&gt;, but if you&amp;rsquo;re using jQuery 1.3.x or some other library that does not set the XHR&amp;rsquo;s &lt;code&gt;onreadystatechange&lt;/code&gt; handler, you might want to do:</source>
          <target state="translated">如果为 &lt;code&gt;true&lt;/code&gt; ，则将 &lt;code&gt;server&lt;/code&gt; 和 &lt;code&gt;requests&lt;/code&gt; 属性添加到沙箱。也可以是用于伪造服务器的对象。默认的是 &lt;code&gt;sinon.fakeServer&lt;/code&gt; ，但是如果您使用的是jQuery 1.3.x或其他未设置XHR的 &lt;code&gt;onreadystatechange&lt;/code&gt; 处理程序的库，则可能需要这样做：</target>
        </trans-unit>
        <trans-unit id="83753d25b8a8a7c2f01b90f89e02a397df7c2d37" translate="yes" xml:space="preserve">
          <source>If a method accepts more than one callback, you need to use &lt;code&gt;yieldsRight&lt;/code&gt; to call the last callback or &lt;code&gt;callsArg&lt;/code&gt; to have the stub invoke other callbacks than the first or last one.</source>
          <target state="translated">如果一个方法接受多个回调，则需要使用 &lt;code&gt;yieldsRight&lt;/code&gt; 来调用最后一个回调，或者调用 &lt;code&gt;callsArg&lt;/code&gt; 以使存根调用除第一个或最后一个回调以外的其他回调。</target>
        </trans-unit>
        <trans-unit id="58429d6d158be6d359fe32f6993cff53be282a39" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;Error&lt;/code&gt; is passed as the &lt;code&gt;value&lt;/code&gt; argument, then that will be the thrown value. If any other value is passed, then that will be used for the &lt;code&gt;message&lt;/code&gt; property of the thrown &lt;code&gt;Error&lt;/code&gt;.</source>
          <target state="translated">如果将 &lt;code&gt;Error&lt;/code&gt; 作为 &lt;code&gt;value&lt;/code&gt; 参数传递，则将作为抛出的值。如果传递了其他任何值，则该值将用于引发 &lt;code&gt;Error&lt;/code&gt; 的 &lt;code&gt;message&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="b0cdb76af8d9bda8f109a4fb582162d49a85b178" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;Error&lt;/code&gt; is passed as the &lt;code&gt;value&lt;/code&gt; argument, then that will be the value of the promise. If any other value is passed, then that will be used for the &lt;code&gt;message&lt;/code&gt; property of the &lt;code&gt;Error&lt;/code&gt; returned by the promise.</source>
          <target state="translated">如果将 &lt;code&gt;Error&lt;/code&gt; 作为 &lt;code&gt;value&lt;/code&gt; 参数传递，则该值为 Promise的值。如果传递了其他任何值，则该值将用于承诺返回的 &lt;code&gt;Error&lt;/code&gt; 的 &lt;code&gt;message&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="6e7544544a67d60145a6d7a0b17dea7a0d5167dc" translate="yes" xml:space="preserve">
          <source>If any expectation is not satisfied, an exception is thrown.</source>
          <target state="translated">如果不满足任何期望,就会抛出一个异常。</target>
        </trans-unit>
        <trans-unit id="4c92d557959675c798c4094015e7c5dc693ca79f" translate="yes" xml:space="preserve">
          <source>If called with arguments, &lt;code&gt;respondWith&lt;/code&gt; will be called with those arguments before responding to requests.</source>
          <target state="translated">如果使用参数调用，则在响应请求之前，将使用这些参数调用 &lt;code&gt;respondWith&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b93b406ef119a61c72905f24b6ddd79a76a2827f" translate="yes" xml:space="preserve">
          <source>If none of the responses added through &lt;code&gt;respondWith&lt;/code&gt; match, the default response is &lt;code&gt;[404, {}, &quot;&quot;]&lt;/code&gt;.</source>
          <target state="translated">如果通过加入无响应的 &lt;code&gt;respondWith&lt;/code&gt; 比赛，该默认响应是 &lt;code&gt;[404, {}, &quot;&quot;]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="583762ed9d8a375e6ba756999e2a63204ac384c0" translate="yes" xml:space="preserve">
          <source>If only one argument is provided, the assertion passes if &lt;code&gt;spy&lt;/code&gt; ever threw any exception.</source>
          <target state="translated">如果仅提供一个参数，则在 &lt;code&gt;spy&lt;/code&gt; 抛出任何异常时断言通过。</target>
        </trans-unit>
        <trans-unit id="e9f3595b4e25f0ee3cbc5c5ebc20e9419242aff4" translate="yes" xml:space="preserve">
          <source>If provided value is not a stub, it will be used as the returned value:</source>
          <target state="translated">如果提供的值不是存根,将作为返回值使用。</target>
        </trans-unit>
        <trans-unit id="625e5dac94887d54039536afa455104ed06ce7a5" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, server will find &lt;code&gt;_method&lt;/code&gt; parameter in &lt;code&gt;POST&lt;/code&gt; body and recognize that as the actual method.</source>
          <target state="translated">如果设置为 &lt;code&gt;true&lt;/code&gt; ，服务器将在 &lt;code&gt;POST&lt;/code&gt; 正文中找到 &lt;code&gt;_method&lt;/code&gt; 参数并将其识别为实际方法。</target>
        </trans-unit>
        <trans-unit id="8bdba76e5981a984e85030fc0efe2fa15b274be8" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, server will find &lt;code&gt;_method&lt;/code&gt; parameter in POST body and recognize that as the actual method.</source>
          <target state="translated">如果设置为 &lt;code&gt;true&lt;/code&gt; ，则服务器将在POST正文中找到 &lt;code&gt;_method&lt;/code&gt; 参数并将其识别为实际方法。</target>
        </trans-unit>
        <trans-unit id="1c804ec2be7fbefdbc3e9712aee850360ab54302" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, the sandbox will have a &lt;code&gt;clock&lt;/code&gt; property. You can optionally pass in a configuration object that follows the &lt;a href=&quot;https://sinonjs.org/releases/fake-timers&quot;&gt;specification for fake timers&lt;/a&gt;, such as &lt;code&gt;{ toFake: [&quot;setTimeout&quot;, &quot;setInterval&quot;] }&lt;/code&gt;.</source>
          <target state="translated">如果设置为 &lt;code&gt;true&lt;/code&gt; ，则沙箱将具有 &lt;code&gt;clock&lt;/code&gt; 属性。您可以选择传入遵循&lt;a href=&quot;https://sinonjs.org/releases/fake-timers&quot;&gt;伪计时器规范&lt;/a&gt;的配置对象，例如 &lt;code&gt;{ toFake: [&quot;setTimeout&quot;, &quot;setInterval&quot;] }&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78d58d770470589a958ff1b5727f0b62464b7a2d" translate="yes" xml:space="preserve">
          <source>If set, the server will respond to every request immediately and synchronously.</source>
          <target state="translated">如果设置,服务器将立即同步响应每个请求。</target>
        </trans-unit>
        <trans-unit id="15f4da9e4b7ce2e1a10a5c104fd934f256f37a23" translate="yes" xml:space="preserve">
          <source>If set, will automatically respond to every request after a timeout.</source>
          <target state="translated">如果设置,将在超时后自动响应每次请求。</target>
        </trans-unit>
        <trans-unit id="178a67b422cebfa63b713fdc9813590cca954c02" translate="yes" xml:space="preserve">
          <source>If the argument at the provided index is not available or is not a function, a &lt;code&gt;TypeError&lt;/code&gt; will be thrown.</source>
          <target state="translated">如果提供的索引处的参数不可用或不是函数，则将引发 &lt;code&gt;TypeError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="306af38e4067645e80980d5e1229e18801f5fabb" translate="yes" xml:space="preserve">
          <source>If the argument at the provided index is not available, a &lt;code&gt;TypeError&lt;/code&gt; will be thrown.</source>
          <target state="translated">如果提供的索引处的参数不可用，则将引发 &lt;code&gt;TypeError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="93c12536e07f9c7bbc6e5d6982a88b0ce7402b6c" translate="yes" xml:space="preserve">
          <source>If the argument at the provided index is not available, prior to &lt;code&gt;sinon@6.1.2&lt;/code&gt;, an &lt;code&gt;undefined&lt;/code&gt; value will be returned; starting from &lt;code&gt;sinon@6.1.2&lt;/code&gt;, a &lt;code&gt;TypeError&lt;/code&gt; will be thrown.</source>
          <target state="translated">如果在提供的索引处的参数不可用，则在 &lt;code&gt;sinon@6.1.2&lt;/code&gt; 之前，将返回 &lt;code&gt;undefined&lt;/code&gt; 值；否则，返回false。从 &lt;code&gt;sinon@6.1.2&lt;/code&gt; 开始，将引发 &lt;code&gt;TypeError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d30db3899c93f5253eec81f53fa685ffdfeda1fe" translate="yes" xml:space="preserve">
          <source>If the call did not explicitly return a value, the value at the call&amp;rsquo;s location in &lt;code&gt;.returnValues&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">如果调用未显式返回值，则 &lt;code&gt;.returnValues&lt;/code&gt; 中调用位置的值将是 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2ced5d893808a035c976ed0b0fc57367b1284809" translate="yes" xml:space="preserve">
          <source>If the call did not throw an error, the value at the call&amp;rsquo;s location in &lt;code&gt;.exceptions&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">如果调用没有引发错误，则 &lt;code&gt;.exceptions&lt;/code&gt; 中调用位置的值将是 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03096bf0561cc4c66f5217801ff9f37ae0908542" translate="yes" xml:space="preserve">
          <source>If the response is a &lt;code&gt;Function&lt;/code&gt;, it will be passed any capture groups from the regular expression along with the XMLHttpRequest object:</source>
          <target state="translated">如果响应是 &lt;code&gt;Function&lt;/code&gt; ，则将从正则表达式中将所有捕获组与XMLHttpRequest对象一起传递给它：</target>
        </trans-unit>
        <trans-unit id="607b0ec6c3c94203cc51c7e51b4d4ff6342abeed" translate="yes" xml:space="preserve">
          <source>If the stub was never called with a function argument, &lt;code&gt;yield&lt;/code&gt; throws an error.</source>
          <target state="translated">如果从未使用函数参数调用存根， &lt;code&gt;yield&lt;/code&gt; 会引发错误。</target>
        </trans-unit>
        <trans-unit id="a09cb498946ec20862a9ea6013bc1173220b7a17" translate="yes" xml:space="preserve">
          <source>If the test framework looks for assertion errors by checking for a specific exception, you can simply override the kind of exception thrown. If that does not fit with your testing framework of choice, override the &lt;code&gt;fail&lt;/code&gt; method to do the right thing.</source>
          <target state="translated">如果测试框架通过检查特定异常来查找断言错误，则可以简单地覆盖引发的异常类型。如果这不适合您选择的测试框架，请覆盖 &lt;code&gt;fail&lt;/code&gt; 方法以执行正确的操作。</target>
        </trans-unit>
        <trans-unit id="d36061128fcc1f3fdc0a22874746b334c82558bd" translate="yes" xml:space="preserve">
          <source>If you need to support very old runtimes that have incomplete support for &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/&quot;&gt;ES5.1&lt;/a&gt; you might get away with using loading &lt;a href=&quot;https://github.com/es-shims/es5-shim&quot;&gt;&lt;code&gt;es5-shim&lt;/code&gt;&lt;/a&gt; in your test environment.</source>
          <target state="translated">如果您需要支持对&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/&quot;&gt;ES5.1的&lt;/a&gt;支持不完整的非常老的运行时，则可以在测试环境中使用加载&lt;a href=&quot;https://github.com/es-shims/es5-shim&quot;&gt; &lt;code&gt;es5-shim&lt;/code&gt; &lt;/a&gt;来摆脱。</target>
        </trans-unit>
        <trans-unit id="1b51bd4d2615d5c1ba159c172a64798b5f882e73" translate="yes" xml:space="preserve">
          <source>If you want to be specific, you can directly check the first argument of the first &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;call&lt;/a&gt;. There are two ways of achieving this:</source>
          <target state="translated">如果要具体说明，可以直接检查第一个&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;调用&lt;/a&gt;的第一个参数。有两种方法可以实现此目的：</target>
        </trans-unit>
        <trans-unit id="031f9bc3aa04ee7e3be59bc79a5f2055041f11d5" translate="yes" xml:space="preserve">
          <source>If you want to control how your unit is being used and like stating expectations upfront (as opposed to asserting after the fact), use a mock.</source>
          <target state="translated">如果你想控制你的单位是如何被使用的,并且喜欢事先说明期望值(而不是事后断言),使用模拟。</target>
        </trans-unit>
        <trans-unit id="14f8e90537ae25988653bce4fa7d3197138afd4a" translate="yes" xml:space="preserve">
          <source>If you want to create a stub object of &lt;code&gt;MyConstructor&lt;/code&gt;, but don&amp;rsquo;t want the constructor to be invoked, use this utility function.</source>
          <target state="translated">如果要创建 &lt;code&gt;MyConstructor&lt;/code&gt; 的存根对象，但又不想调用该构造函数，请使用此实用程序函数。</target>
        </trans-unit>
        <trans-unit id="26e8b6d7bd4e971345b3695a9e8c735bc53726a1" translate="yes" xml:space="preserve">
          <source>In Node environment the callback is deferred with &lt;code&gt;process.nextTick&lt;/code&gt;.</source>
          <target state="translated">在Node环境中，回调由 &lt;code&gt;process.nextTick&lt;/code&gt; 延迟。</target>
        </trans-unit>
        <trans-unit id="22275488d0acf1b6539cc58b1bc0ea70663b8d11" translate="yes" xml:space="preserve">
          <source>In Sinon, a &lt;code&gt;fake&lt;/code&gt; is a &lt;code&gt;Function&lt;/code&gt; that records arguments, return value, the value of &lt;code&gt;this&lt;/code&gt; and exception thrown (if any) for all of its calls.</source>
          <target state="translated">在Sinon中， &lt;code&gt;fake&lt;/code&gt; 是一个 &lt;code&gt;Function&lt;/code&gt; ，它记录其所有调用的参数，返回值， &lt;code&gt;this&lt;/code&gt; 的值和引发的异常（如果有）。</target>
        </trans-unit>
        <trans-unit id="eae178835c51f0b1e0e93a6a184e07642758c902" translate="yes" xml:space="preserve">
          <source>In a browser the callback is deferred with &lt;code&gt;setTimeout(callback, 0)&lt;/code&gt;.</source>
          <target state="translated">在浏览器中，回调使用 &lt;code&gt;setTimeout(callback, 0)&lt;/code&gt; 推迟。</target>
        </trans-unit>
        <trans-unit id="3f2709cac363fe001c3ad0aedfeb5a2d8ebfd3cc" translate="yes" xml:space="preserve">
          <source>In browsers that support &lt;code&gt;ActiveXObject&lt;/code&gt;, this constructor is replaced, and fake objects are returned for &lt;code&gt;XMLHTTP&lt;/code&gt; progIds. Other progIds, such as &lt;code&gt;XMLDOM&lt;/code&gt; are left untouched.</source>
          <target state="translated">在支持 &lt;code&gt;ActiveXObject&lt;/code&gt; 的浏览器中，将替换此构造函数，并为 &lt;code&gt;XMLHTTP&lt;/code&gt; progIds 返回假对象。其他progId（例如 &lt;code&gt;XMLDOM&lt;/code&gt; )保持不变。</target>
        </trans-unit>
        <trans-unit id="7423917248acb61bc25d51a05c7c3a67d7ccf2aa" translate="yes" xml:space="preserve">
          <source>In general you should have &lt;strong&gt;no more than one&lt;/strong&gt; mock (possibly with several expectations) in a single test.</source>
          <target state="translated">通常，在一个测试中，&lt;strong&gt;最多&lt;/strong&gt;只能有&lt;strong&gt;一个&lt;/strong&gt;模拟（可能会有多个期望）。</target>
        </trans-unit>
        <trans-unit id="fa4c02d06b145dddc33bc47f897ff8313bbd95a3" translate="yes" xml:space="preserve">
          <source>Install at the same date, advancing the fake time automatically (default is every &lt;code&gt;20ms&lt;/code&gt;), causing timers to be fired automatically without the need to &lt;code&gt;tick()&lt;/code&gt; the clock:</source>
          <target state="translated">在同一日期安装，自动延长假时间（默认为每 &lt;code&gt;20ms&lt;/code&gt; ），从而导致计时器自动触发，而无需对 &lt;code&gt;tick()&lt;/code&gt; 进行计时：</target>
        </trans-unit>
        <trans-unit id="89768f42011be5447392ce045ada4a513a391647" translate="yes" xml:space="preserve">
          <source>Installs fake timers at January 1st 2017 and fakes &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;process.nextTick&lt;/code&gt; only:</source>
          <target state="translated">在2017年1月1日安装伪造的计时器，并伪造 &lt;code&gt;setTimeout&lt;/code&gt; 和 &lt;code&gt;process.nextTick&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c1f424042c7e8bee2655a6672ddd3752109cc8d7" translate="yes" xml:space="preserve">
          <source>Instance properties</source>
          <target state="translated">实例属性</target>
        </trans-unit>
        <trans-unit id="3c982358cf9e3c8784973af9670dc076c31a4c25" translate="yes" xml:space="preserve">
          <source>Internet Explorer 11</source>
          <target state="translated">Internet Explorer 11</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="cbe7e35ad2d4f4f954a9d00dc05d44ebd2fbc92d" translate="yes" xml:space="preserve">
          <source>Invoke callbacks passed to the &lt;code&gt;stub&lt;/code&gt; with the given arguments.</source>
          <target state="translated">使用给定参数调用传递到 &lt;code&gt;stub&lt;/code&gt; 回调。</target>
        </trans-unit>
        <trans-unit id="8958e67541639104bdcb1e6afdeedf4597ff4c5b" translate="yes" xml:space="preserve">
          <source>Invokes callbacks passed as a property of an object to the stub.</source>
          <target state="translated">调用作为对象属性传递给存根的回调。</target>
        </trans-unit>
        <trans-unit id="21bb97192b27588d9663e301ea5dd548786f9c52" translate="yes" xml:space="preserve">
          <source>It can be created with or without behavior; it can wrap an existing function.</source>
          <target state="translated">它可以创建有行为或无行为的函数;它可以包装一个现有的函数。</target>
        </trans-unit>
        <trans-unit id="4bce69ac8a52175ff58d893e5cf0bcc77ae03f47" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to assert on a dedicated spy call: &lt;code&gt;sinon.assert.calledOn(spy.firstCall, arg1, arg2, ...);&lt;/code&gt;.</source>
          <target state="translated">可以在专门的间谍调用中声明： &lt;code&gt;sinon.assert.calledOn(spy.firstCall, arg1, arg2, ...);&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db4b09a17236ad5211c1f555cc72877efd65d70f" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to assert on a dedicated spy call: &lt;code&gt;sinon.assert.calledWith(spy.firstCall, arg1, arg2, ...);&lt;/code&gt;.</source>
          <target state="translated">可以在专门的间谍调用中进行断言： &lt;code&gt;sinon.assert.calledWith(spy.firstCall, arg1, arg2, ...);&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d6a7d5d8eb278f74d4b0c2bb4c736bf794ba8271" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to assert on a dedicated spy call: &lt;code&gt;sinon.assert.calledWithExactly(spy.getCall(1), arg1, arg2, ...);&lt;/code&gt;.</source>
          <target state="translated">可以通过专门的间谍调用来断言： &lt;code&gt;sinon.assert.calledWithExactly(spy.getCall(1), arg1, arg2, ...);&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ea17046bae450de5288cbdba665984f115b40145" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to assert on a dedicated spy call: &lt;code&gt;sinon.assert.calledWithMatch(spy.secondCall, arg1, arg2, ...);&lt;/code&gt;.</source>
          <target state="translated">可以在专门的间谍调用中进行断言： &lt;code&gt;sinon.assert.calledWithMatch(spy.secondCall, arg1, arg2, ...);&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="261174f0650f796dcb005b444786a16b830681e9" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to assert on a dedicated spy call: &lt;code&gt;sinon.assert.calledWithNew(spy.secondCall, arg1, arg2, ...);&lt;/code&gt;.</source>
          <target state="translated">可以在一个专门的间谍调用中进行断言： &lt;code&gt;sinon.assert.calledWithNew(spy.secondCall, arg1, arg2, ...);&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff90e2774d89c3f4c280e03fcae99e2017f2d21c" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to assert on a dedicated spy call: &lt;code&gt;sinon.assert.threw(spy.thirdCall, exception);&lt;/code&gt;.</source>
          <target state="translated">可以在专门的间谍调用中声明： &lt;code&gt;sinon.assert.threw(spy.thirdCall, exception);&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f94d2c4bde6b2293ff795836fcce62f1110b1427" translate="yes" xml:space="preserve">
          <source>JSON-P</source>
          <target state="translated">JSON-P</target>
        </trans-unit>
        <trans-unit id="b3f419206d8f70d84ad55a0093bc45529b9dfca1" translate="yes" xml:space="preserve">
          <source>JSON-P doesn&amp;rsquo;t use &lt;code&gt;XHR&lt;/code&gt; requests, which is what the fake server is concerned with. A JSON-P request creates a script element and inserts it into the document.</source>
          <target state="translated">JSON-P不使用 &lt;code&gt;XHR&lt;/code&gt; 请求，这是假服务器关注的问题。JSON-P请求创建脚本元素并将其插入文档中。</target>
        </trans-unit>
        <trans-unit id="cc5b2a062f05dd148b4ef24c76639416ebcc59f3" translate="yes" xml:space="preserve">
          <source>Licensed under the BSD License.</source>
          <target state="translated">采用BSD授权许可。</target>
        </trans-unit>
        <trans-unit id="197e0900222af026b1328275e405c1352662f312" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;callArg&lt;/code&gt;, but with arguments.</source>
          <target state="translated">像 &lt;code&gt;callArg&lt;/code&gt; 一样，但是带有参数。</target>
        </trans-unit>
        <trans-unit id="468f9dfa1c80b6d9054f56cbe43d18f6d9611581" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;callsArg&lt;/code&gt;, but with arguments to pass to the callback.</source>
          <target state="translated">像 &lt;code&gt;callsArg&lt;/code&gt; 一样，但是带有传递给回调的参数。</target>
        </trans-unit>
        <trans-unit id="9e0adee8c97b105bda0b6845bb29d20515217c95" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;stub.callsArg(index);&lt;/code&gt; but with an additional parameter to pass the &lt;code&gt;this&lt;/code&gt; context.</source>
          <target state="translated">像 &lt;code&gt;stub.callsArg(index);&lt;/code&gt; 但带有附加参数来传递 &lt;code&gt;this&lt;/code&gt; 上下文。</target>
        </trans-unit>
        <trans-unit id="b7ebf41d3a950bf73a366b9c8b9979047e37ce25" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;yield&lt;/code&gt;, &lt;code&gt;yieldTo&lt;/code&gt; grabs the first matching argument, finds the callback and calls it with the (optional) arguments.</source>
          <target state="translated">像 &lt;code&gt;yield&lt;/code&gt; 一样， &lt;code&gt;yieldTo&lt;/code&gt; 捕获第一个匹配的参数，找到回调并使用（可选）参数调用它。</target>
        </trans-unit>
        <trans-unit id="dbcd82677dd22fa14237b57dd3a4809b756a9fd7" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;yield&lt;/code&gt;, but with an explicit argument number specifying which callback to call.</source>
          <target state="translated">类似于 &lt;code&gt;yield&lt;/code&gt; ，但是有一个明确的参数编号指定要调用的回调。</target>
        </trans-unit>
        <trans-unit id="a622186c0a71835ec258dd36d44d5bd960305418" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;yields&lt;/code&gt; but calls the last callback it receives.</source>
          <target state="translated">像 &lt;code&gt;yields&lt;/code&gt; 一样，但是调用它收到的最后一个回调。</target>
        </trans-unit>
        <trans-unit id="a7f9d7cd6cf6f144c01a08b9a618497c50508241" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;yields&lt;/code&gt; but with an additional parameter to pass the &lt;code&gt;this&lt;/code&gt; context.</source>
          <target state="translated">类似于 &lt;code&gt;yields&lt;/code&gt; ,但具有传递 &lt;code&gt;this&lt;/code&gt; 上下文的附加参数。</target>
        </trans-unit>
        <trans-unit id="f059f89bd4c448e8f11d6a570e771a754c2116cc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;yields&lt;/code&gt;, &lt;code&gt;yieldsTo&lt;/code&gt; grabs the first matching argument, finds the callback and calls it with the (optional) arguments.</source>
          <target state="translated">像 &lt;code&gt;yields&lt;/code&gt; 一样， &lt;code&gt;yieldsTo&lt;/code&gt; 会获取第一个匹配的参数，找到回调并使用（可选）参数调用它。</target>
        </trans-unit>
        <trans-unit id="48ffba14f713aa5af36a774f8d7e6f13bc103e95" translate="yes" xml:space="preserve">
          <source>Like above but with an additional parameter to pass the &lt;code&gt;this&lt;/code&gt; context.</source>
          <target state="translated">像上面一样，但是带有附加参数来传递 &lt;code&gt;this&lt;/code&gt; 上下文。</target>
        </trans-unit>
        <trans-unit id="3ede7ab2fa6acd54721ba38e8e377f7c5011142f" translate="yes" xml:space="preserve">
          <source>Like above, only required for all calls to the spy.</source>
          <target state="translated">和上面一样,只有所有呼叫间谍的时候才需要。</target>
        </trans-unit>
        <trans-unit id="aa1c395e2f83d348e29dd25d9a50d6b3a3c3c945" translate="yes" xml:space="preserve">
          <source>Makes the stub call the provided &lt;code&gt;fakeFunction&lt;/code&gt; when invoked.</source>
          <target state="translated">使存根在调用时调用提供的 &lt;code&gt;fakeFunction&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f6437f846c563eae896f705be77e7c273e9663b0" translate="yes" xml:space="preserve">
          <source>Makes the stub return the provided value.</source>
          <target state="translated">使存根返回所提供的值。</target>
        </trans-unit>
        <trans-unit id="8ffced42002a2fa5617b200f8f8fbd54a128af5e" translate="yes" xml:space="preserve">
          <source>Matchers</source>
          <target state="translated">Matchers</target>
        </trans-unit>
        <trans-unit id="2a81a1a1c2cde47fa1558bd80772ae134e6bd24e" translate="yes" xml:space="preserve">
          <source>Matchers API</source>
          <target state="translated">匹配器API</target>
        </trans-unit>
        <trans-unit id="3399eba56cad7a19f942af119624452f2335231f" translate="yes" xml:space="preserve">
          <source>Matchers can be passed as arguments to &lt;code&gt;spy.calledOn&lt;/code&gt;, &lt;code&gt;spy.calledWith&lt;/code&gt;, &lt;code&gt;spy.returned&lt;/code&gt; and the corresponding &lt;code&gt;sinon.assert&lt;/code&gt; functions as well as &lt;code&gt;spy.withArgs&lt;/code&gt;. Matchers allow to be either more fuzzy or more specific about the expected value.</source>
          <target state="translated">可以将匹配器作为参数传递给 &lt;code&gt;spy.calledOn&lt;/code&gt; ， &lt;code&gt;spy.calledWith&lt;/code&gt; 和 &lt;code&gt;spy.returned&lt;/code&gt; 以及相应的 &lt;code&gt;sinon.assert&lt;/code&gt; 函数以及 &lt;code&gt;spy.withArgs&lt;/code&gt; 。匹配器可以使期望值更加模糊或更具体。</target>
        </trans-unit>
        <trans-unit id="5d4ca8f2f5abf98aafe5fc788a8654eca8560b66" translate="yes" xml:space="preserve">
          <source>Matches anything.</source>
          <target state="translated">匹配任何东西。</target>
        </trans-unit>
        <trans-unit id="b7903d9c98b7be27fcc60f06acea8a1a41ac6713" translate="yes" xml:space="preserve">
          <source>Method name is optional and is used in exception messages to make them more readable.</source>
          <target state="translated">方法名称是可选的,用于异常消息中,使其更易读。</target>
        </trans-unit>
        <trans-unit id="805e194f4a94a5071b0e897c18e41716c45460e8" translate="yes" xml:space="preserve">
          <source>Migrating from &lt;a href=&quot;https://sinonjs.org/guides/migrating-to-2.0&quot;&gt;v1.x to v2.0&lt;/a&gt;</source>
          <target state="translated">从&lt;a href=&quot;https://sinonjs.org/guides/migrating-to-2.0&quot;&gt;v1.x&lt;/a&gt;迁移到v2.0</target>
        </trans-unit>
        <trans-unit id="e0930ffd7e3e91a5560c1cdf53d7e3745edf6e7c" translate="yes" xml:space="preserve">
          <source>Migrating from &lt;a href=&quot;https://sinonjs.org/guides/migrating-to-3.0&quot;&gt;v2.x to v3.0&lt;/a&gt;</source>
          <target state="translated">从&lt;a href=&quot;https://sinonjs.org/guides/migrating-to-3.0&quot;&gt;v2.x&lt;/a&gt;迁移到v3.0</target>
        </trans-unit>
        <trans-unit id="3912cc9c578b68535459c62e67b14574cfeda32f" translate="yes" xml:space="preserve">
          <source>Migrating from &lt;a href=&quot;https://sinonjs.org/guides/migrating-to-4.0&quot;&gt;v3.x to v4.0&lt;/a&gt;</source>
          <target state="translated">从&lt;a href=&quot;https://sinonjs.org/guides/migrating-to-4.0&quot;&gt;v3.x&lt;/a&gt;迁移到v4.0</target>
        </trans-unit>
        <trans-unit id="5973a8dd31289af925ee0e08fe5cd2bf7fd975ce" translate="yes" xml:space="preserve">
          <source>Migrating from &lt;a href=&quot;https://sinonjs.org/guides/migrating-to-5.0&quot;&gt;v4.x to v5.0&lt;/a&gt;</source>
          <target state="translated">从&lt;a href=&quot;https://sinonjs.org/guides/migrating-to-5.0&quot;&gt;v4.x&lt;/a&gt;迁移到v5.0</target>
        </trans-unit>
        <trans-unit id="657496e95900e06a0c2fcf08a00373d6990dcb8d" translate="yes" xml:space="preserve">
          <source>Migrating from &lt;a href=&quot;https://sinonjs.org/guides/migrating-to-6.0&quot;&gt;v5.x to v6.0&lt;/a&gt;</source>
          <target state="translated">从&lt;a href=&quot;https://sinonjs.org/guides/migrating-to-6.0&quot;&gt;v5.x&lt;/a&gt;迁移到v6.0</target>
        </trans-unit>
        <trans-unit id="6ffc10ead1fdd304f91ac3f022b98f62190a4bf2" translate="yes" xml:space="preserve">
          <source>Migration guides</source>
          <target state="translated">迁移指南</target>
        </trans-unit>
        <trans-unit id="4731741185e28601ad735cc472790cff5b345cd9" translate="yes" xml:space="preserve">
          <source>Mocks</source>
          <target state="translated">Mocks</target>
        </trans-unit>
        <trans-unit id="fe50e681395c7c9148b03aca948979f8f99e4286" translate="yes" xml:space="preserve">
          <source>Mocks (and mock expectations) are fake methods (like spies) with pre-programmed behavior (like stubs) as well as &lt;strong&gt;pre-programmed expectations&lt;/strong&gt;.</source>
          <target state="translated">嘲笑（和嘲笑的期望）是具有预编程行为（例如存根）和&lt;strong&gt;预编程期望的&lt;/strong&gt;伪造方法（如间谍）。</target>
        </trans-unit>
        <trans-unit id="c1b641b170402804bc6047fa88654dab93d22dcc" translate="yes" xml:space="preserve">
          <source>Mocks API</source>
          <target state="translated">嘲讽API</target>
        </trans-unit>
        <trans-unit id="92d982baba0cc366caa597983179a8ffec49f0cd" translate="yes" xml:space="preserve">
          <source>Mocks come with built-in expectations that may fail your test.</source>
          <target state="translated">模拟考试带有内在的期望,可能会让你的考试失败。</target>
        </trans-unit>
        <trans-unit id="f296c006f06a4686c7026f8d93fdfa5d899bd5e9" translate="yes" xml:space="preserve">
          <source>Mocks should only be used for the &lt;em&gt;method under test&lt;/em&gt;. In every unit test, there should be one unit under test.</source>
          <target state="translated">模仿只能用于&lt;em&gt;测试方法&lt;/em&gt;。在每个单元测试中，应有一个被测单元。</target>
        </trans-unit>
        <trans-unit id="02febe21fcd28cd0e0816a5ad762195185c7e4e5" translate="yes" xml:space="preserve">
          <source>More information:</source>
          <target state="translated">更多信息。</target>
        </trans-unit>
        <trans-unit id="84b07386e65a64fdd5f8a6f0c867318355bf8a2f" translate="yes" xml:space="preserve">
          <source>Node.js LTS versions</source>
          <target state="translated">Node.js LTS版本</target>
        </trans-unit>
        <trans-unit id="69dc05e5d4e6a4c98629d0a825c3ac1b1771b8fb" translate="yes" xml:space="preserve">
          <source>Note how the behavior of the stub for argument &lt;code&gt;42&lt;/code&gt; falls back to the default behavior once no more calls have been defined.</source>
          <target state="translated">请注意，一旦不再定义调用，参数 &lt;code&gt;42&lt;/code&gt; 的存根的行为如何回落到默认行为。</target>
        </trans-unit>
        <trans-unit id="c66a3581f3d066c10dae7a6a6ee81027e15637cd" translate="yes" xml:space="preserve">
          <source>Note how the stub also implements the spy interface. The test verifies that all callbacks were called, and also that the exception throwing stub was called before one of the other callbacks.</source>
          <target state="translated">请注意stub是如何实现spy接口的。测试验证了所有的回调都被调用了,同时也验证了抛出异常的stub在其他回调之前被调用。</target>
        </trans-unit>
        <trans-unit id="af2380334d49e04467476701041758cb33cf2023" translate="yes" xml:space="preserve">
          <source>Note that in Sinon version 1.5 to version 1.7, multiple calls to the &lt;code&gt;yields*&lt;/code&gt; and &lt;code&gt;callsArg*&lt;/code&gt; family of methods define a sequence of behaviors for consecutive calls. As of 1.8, this functionality has been removed in favor of the &lt;a href=&quot;#stuboncalln-added-in-v18&quot;&gt;&lt;code&gt;onCall&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="translated">请注意，在从Sinon版本1.5到版本1.7中，对 &lt;code&gt;yields*&lt;/code&gt; 和 &lt;code&gt;callsArg*&lt;/code&gt; 系列方法的多次调用为连续调用定义了一系列行为。从1.8版本开始，此功能已被删除，以支持&lt;a href=&quot;#stuboncalln-added-in-v18&quot;&gt; &lt;code&gt;onCall&lt;/code&gt; &lt;/a&gt; API。</target>
        </trans-unit>
        <trans-unit id="0fafc0f35988024d8fdb2a024ba8991a6d1e90cb" translate="yes" xml:space="preserve">
          <source>Note that it&amp;rsquo;s usually better practice to stub individual methods, particularly on objects that you don&amp;rsquo;t understand or control all the methods for (e.g. library dependencies).</source>
          <target state="translated">请注意，通常最好是对单个方法进行存根，尤其是在您不了解或无法控制所有方法的对象上（例如，库依赖项）。</target>
        </trans-unit>
        <trans-unit id="9ba31d433444b56ca38dc2bc86f47a59f09069e9" translate="yes" xml:space="preserve">
          <source>Note that this feature is intended to help during mockup development, and is not suitable for use in tests.</source>
          <target state="translated">请注意,这个功能是为了在模拟开发过程中提供帮助,并不适合在测试中使用。</target>
        </trans-unit>
        <trans-unit id="5a5c426c4ef0ce4640dfa1bf53c5b7a21144cfe6" translate="yes" xml:space="preserve">
          <source>Note that this feature is intended to help during mockup development, and is not suitable for use in tests. For synchronous immediate responses, use &lt;code&gt;respondImmediately&lt;/code&gt; instead.</source>
          <target state="translated">请注意，此功能旨在在模型开发期间提供帮助，而不适合在测试中使用。对于同步即时响应， &lt;code&gt;respondImmediately&lt;/code&gt; 改为使用responseImmediately。</target>
        </trans-unit>
        <trans-unit id="f2f255a2f21ed01e5d2a5f2bf675bd49163a12a3" translate="yes" xml:space="preserve">
          <source>Only populated if the &lt;a href=&quot;#serverrespond&quot;&gt;&lt;code&gt;respond&lt;/code&gt;&lt;/a&gt; method is called (see below).</source>
          <target state="translated">仅在调用&lt;a href=&quot;#serverrespond&quot;&gt; &lt;code&gt;respond&lt;/code&gt; &lt;/a&gt;方法时填充（请参见下文）。</target>
        </trans-unit>
        <trans-unit id="7188ef144b05b57d656e15eb10f32524d25564ba" translate="yes" xml:space="preserve">
          <source>Or in Jasmine you should place it in each describe:</source>
          <target state="translated">或者在茉莉花中你应该把它放在每个描述中。</target>
        </trans-unit>
        <trans-unit id="35bc874164ee0a87a85e6128ffedac3774f71954" translate="yes" xml:space="preserve">
          <source>Overrides &lt;code&gt;obj.method&lt;/code&gt; with a mock function and returns it.</source>
          <target state="translated">用模拟函数覆盖 &lt;code&gt;obj.method&lt;/code&gt; 并返回它。</target>
        </trans-unit>
        <trans-unit id="5724f2c97f45cd4a01f82101b55373950bdba5ef" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; threw the given exception.</source>
          <target state="translated">如果 &lt;code&gt;spy&lt;/code&gt; 抛出给定异常，则通过。</target>
        </trans-unit>
        <trans-unit id="90caa6749a8fe1c2647020ac69d0cb97980478cc" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was always called with &lt;code&gt;obj&lt;/code&gt; as its &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">如果通过 &lt;code&gt;spy&lt;/code&gt; 总是用所谓 &lt;code&gt;obj&lt;/code&gt; 为 &lt;code&gt;this&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="d61eaa03b943862218c236b402d5f2f442bca064" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was always called with matching arguments.</source>
          <target state="translated">如果 &lt;code&gt;spy&lt;/code&gt; 始终使用匹配的参数调用，则通过。</target>
        </trans-unit>
        <trans-unit id="b448c529cc09b087918e1495bb4ca394c0242c78" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was always called with the provided arguments and no others.</source>
          <target state="translated">如果始终使用提供的参数调用 &lt;code&gt;spy&lt;/code&gt; ，而没有其他参数，则通过。</target>
        </trans-unit>
        <trans-unit id="bad89e5fd2ad53e16824221887cbb3119c363e27" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was always called with the provided arguments.</source>
          <target state="translated">如果始终使用提供的参数调用 &lt;code&gt;spy&lt;/code&gt; 则通过。</target>
        </trans-unit>
        <trans-unit id="af607d8628aed352577733d6eebb81349904851a" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was called at least once.</source>
          <target state="translated">如果 &lt;code&gt;spy&lt;/code&gt; 被至少召唤一次，则通过。</target>
        </trans-unit>
        <trans-unit id="939be913d3ec860886c2435c36d386123429c46f" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was called exactly &lt;code&gt;num&lt;/code&gt; times.</source>
          <target state="translated">如果 &lt;code&gt;spy&lt;/code&gt; 被准确地调用了 &lt;code&gt;num&lt;/code&gt; 次，则通过。</target>
        </trans-unit>
        <trans-unit id="d9758c51f0ef4c9d731a84bc205b52da65dc175f" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was called exactly three times.</source>
          <target state="translated">如果 &lt;code&gt;spy&lt;/code&gt; 被准确召唤了三次，则通过。</target>
        </trans-unit>
        <trans-unit id="aafd2419a1e06c3c17312cfc7b4a20959bddf29f" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was called exactly twice.</source>
          <target state="translated">如果 &lt;code&gt;spy&lt;/code&gt; 被准确地两次召唤，则通过。</target>
        </trans-unit>
        <trans-unit id="0a93ad9f81c437e79a18a86ecd2e60ab206221e6" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was called once and only once.</source>
          <target state="translated">如果 &lt;code&gt;spy&lt;/code&gt; 仅被调用一次，则通过。</target>
        </trans-unit>
        <trans-unit id="49e5991ce5d4f74f2a68d935527d7185598361f7" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was called with matching arguments.</source>
          <target state="translated">如果使用匹配参数调用 &lt;code&gt;spy&lt;/code&gt; 则通过。</target>
        </trans-unit>
        <trans-unit id="8d22892cc0897a302ab94820ff855fcb493bb57d" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was called with the &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">如果使用 &lt;code&gt;new&lt;/code&gt; 操作员调用了 &lt;code&gt;spy&lt;/code&gt; 则通过。</target>
        </trans-unit>
        <trans-unit id="8d874c4d1b3351c85db89dcc733dc062f8b52b52" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was called with the provided arguments and no others.</source>
          <target state="translated">如果使用提供的参数调用了 &lt;code&gt;spy&lt;/code&gt; ,则没有通过，则通过。</target>
        </trans-unit>
        <trans-unit id="ca052ada583e340d3cb3001a06f1308731e8e0f8" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was called with the provided arguments.</source>
          <target state="translated">如果使用提供的参数调用了 &lt;code&gt;spy&lt;/code&gt; 则通过。</target>
        </trans-unit>
        <trans-unit id="a8fc5f2d5f34f93fe76411cc3802892d4d154ed5" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was ever called with &lt;code&gt;obj&lt;/code&gt; as its &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">如果通过 &lt;code&gt;spy&lt;/code&gt; 是有史以来一个名为 &lt;code&gt;obj&lt;/code&gt; 为 &lt;code&gt;this&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="e5bbfee5535e0d0e8fa56e2f73fb45baa865b73d" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was never called</source>
          <target state="translated">如果从未召唤过 &lt;code&gt;spy&lt;/code&gt; 则通过</target>
        </trans-unit>
        <trans-unit id="aeef09a96126cab00f8586e51e6d2e4a64852ef4" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was never called with matching arguments.</source>
          <target state="translated">如果从未使用匹配的参数调用 &lt;code&gt;spy&lt;/code&gt; 则通过。</target>
        </trans-unit>
        <trans-unit id="b452a7ff344e33b5789223178ed1f81d293ef333" translate="yes" xml:space="preserve">
          <source>Passes if &lt;code&gt;spy&lt;/code&gt; was never called with the provided arguments.</source>
          <target state="translated">如果从未使用提供的参数调用 &lt;code&gt;spy&lt;/code&gt; 则通过。</target>
        </trans-unit>
        <trans-unit id="2d9ad58978c9baa8a5c7783926d65aee63b1eff1" translate="yes" xml:space="preserve">
          <source>Passes if provided spies were called in the specified order.</source>
          <target state="translated">如果提供的间谍按指定顺序被调用,则通过。</target>
        </trans-unit>
        <trans-unit id="096175cd99511a071d06174cb0464e121e69eca5" translate="yes" xml:space="preserve">
          <source>Password, if any.</source>
          <target state="translated">密码,如果有的话。</target>
        </trans-unit>
        <trans-unit id="96aa90a68dc5d5687cc78777b86902b35e8360a8" translate="yes" xml:space="preserve">
          <source>Please ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/sinon&quot;&gt;Stack Overflow&lt;/a&gt; if you&amp;rsquo;re stuck.</source>
          <target state="translated">如果您被卡住，请在&lt;a href=&quot;https://stackoverflow.com/questions/tagged/sinon&quot;&gt;堆栈溢出&lt;/a&gt;问题上提问。</target>
        </trans-unit>
        <trans-unit id="f46353bbc7559745384a1d56d0fd8d901c196ea1" translate="yes" xml:space="preserve">
          <source>Please refer to the &lt;code&gt;lolex.install&lt;/code&gt;&lt;a href=&quot;https://github.com/sinonjs/lolex#var-clock--lolexinstallconfig&quot;&gt;documentation&lt;/a&gt; for the full set of features available and more elaborate explanations.</source>
          <target state="translated">请参阅 &lt;code&gt;lolex.install&lt;/code&gt; &lt;a href=&quot;https://github.com/sinonjs/lolex#var-clock--lolexinstallconfig&quot;&gt;文档&lt;/a&gt;以获取全部可用功能以及更详尽的说明。</target>
        </trans-unit>
        <trans-unit id="39c4694fc67325b7dded69e590628dd227d5c501" translate="yes" xml:space="preserve">
          <source>Please visit the &lt;code&gt;lolex.install&lt;/code&gt;&lt;a href=&quot;https://github.com/sinonjs/lolex#var-clock--lolexinstallconfig&quot;&gt;documentation&lt;/a&gt; for the full feature set.</source>
          <target state="translated">请访问 &lt;code&gt;lolex.install&lt;/code&gt; &lt;a href=&quot;https://github.com/sinonjs/lolex#var-clock--lolexinstallconfig&quot;&gt;文档&lt;/a&gt;以获取完整的功能集。</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="8ad123a6464793681dc4daf20e1c0f65a9e28b17" translate="yes" xml:space="preserve">
          <source>Provides a fake implementation of &lt;code&gt;XMLHttpRequest&lt;/code&gt; and provides several interfaces for manipulating objects created by it.</source>
          <target state="translated">提供伪造的 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 实现，并提供多个接口来处理由它创建的对象。</target>
        </trans-unit>
        <trans-unit id="4b2a11463262e9feca09b32d472be489a3252bcd" translate="yes" xml:space="preserve">
          <source>Replaces &lt;code&gt;object.method&lt;/code&gt; with a stub function. An exception is thrown if the property is not already a function.</source>
          <target state="translated">用存根函数替换 &lt;code&gt;object.method&lt;/code&gt; 。如果该属性还不是函数，则抛出异常。</target>
        </trans-unit>
        <trans-unit id="dd3a151433c6209fed28151a90e9a1a52069a5f7" translate="yes" xml:space="preserve">
          <source>Replaces &lt;code&gt;property&lt;/code&gt; on &lt;code&gt;object&lt;/code&gt; with &lt;code&gt;replacement&lt;/code&gt; argument. Attempts to replace an already replaced value cause an exception.</source>
          <target state="translated">替代 &lt;code&gt;property&lt;/code&gt; 的 &lt;code&gt;object&lt;/code&gt; 与 &lt;code&gt;replacement&lt;/code&gt; 说法。尝试替换已经替换的值会导致异常。</target>
        </trans-unit>
        <trans-unit id="c446babc835a062e9d3910381caae9b297fe340f" translate="yes" xml:space="preserve">
          <source>Replaces a new getter for this stub.</source>
          <target state="translated">为这个存根替换一个新的getter。</target>
        </trans-unit>
        <trans-unit id="4e01f18df71fd008a63c4f39d9e1fe3dbb487acc" translate="yes" xml:space="preserve">
          <source>Replaces getter for &lt;code&gt;property&lt;/code&gt; on &lt;code&gt;object&lt;/code&gt; with &lt;code&gt;replacement&lt;/code&gt; argument. Attempts to replace an already replaced getter cause an exception.</source>
          <target state="translated">替代对象getter方法 &lt;code&gt;property&lt;/code&gt; 上的 &lt;code&gt;object&lt;/code&gt; 与 &lt;code&gt;replacement&lt;/code&gt; 的说法。尝试替换已经替换的吸气剂会导致异常。</target>
        </trans-unit>
        <trans-unit id="b4a4e2ea1558b6be66ed2a604d89d4acf8259721" translate="yes" xml:space="preserve">
          <source>Replaces setter for &lt;code&gt;property&lt;/code&gt; on &lt;code&gt;object&lt;/code&gt; with &lt;code&gt;replacement&lt;/code&gt; argument. Attempts to replace an already replaced setter cause an exception.</source>
          <target state="translated">替代对象制定者 &lt;code&gt;property&lt;/code&gt; 上的 &lt;code&gt;object&lt;/code&gt; 与 &lt;code&gt;replacement&lt;/code&gt; 的说法。尝试替换已经替换的设置器会导致异常。</target>
        </trans-unit>
        <trans-unit id="088760adcd6e1fc42d9083d02f31d328bdca2168" translate="yes" xml:space="preserve">
          <source>Replaces the spy with the original method. Only available if the spy replaced an existing method.</source>
          <target state="translated">用原始方法替换间谍。只有当间谍替换了现有的方法时才可用。</target>
        </trans-unit>
        <trans-unit id="836b83f8801c3d835288ce85ecab5de28b74fe34" translate="yes" xml:space="preserve">
          <source>Requires &lt;strong&gt;any&lt;/strong&gt; element of an &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt; or &lt;code&gt;Map&lt;/code&gt;, or alternatively &lt;strong&gt;any&lt;/strong&gt; value of an &lt;code&gt;Object&lt;/code&gt; to match the given &lt;code&gt;matcher&lt;/code&gt;.</source>
          <target state="translated">需要 &lt;code&gt;Array&lt;/code&gt; ， &lt;code&gt;Set&lt;/code&gt; 或 &lt;code&gt;Map&lt;/code&gt; 的&lt;strong&gt;任何&lt;/strong&gt;元素，或者 &lt;code&gt;Object&lt;/code&gt; 的&lt;strong&gt;任何&lt;/strong&gt;值以匹配给定的 &lt;code&gt;matcher&lt;/code&gt; 。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="73fa0e0ed6f07b464034d9375864c853075efb74" translate="yes" xml:space="preserve">
          <source>Requires &lt;strong&gt;every&lt;/strong&gt; element of an &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt; or &lt;code&gt;Map&lt;/code&gt;, or alternatively &lt;strong&gt;every&lt;/strong&gt; value of an &lt;code&gt;Object&lt;/code&gt; to match the given &lt;code&gt;matcher&lt;/code&gt;.</source>
          <target state="translated">需要 &lt;code&gt;Array&lt;/code&gt; ， &lt;code&gt;Set&lt;/code&gt; 或 &lt;code&gt;Map&lt;/code&gt; 的&lt;strong&gt;每个&lt;/strong&gt;元素，或者 &lt;code&gt;Object&lt;/code&gt; 的&lt;strong&gt;每个&lt;/strong&gt;值都必须与给定的 &lt;code&gt;matcher&lt;/code&gt; 。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="babc15e223a54650b9e3cf9686a64699755ddb9d" translate="yes" xml:space="preserve">
          <source>Requires a &lt;code&gt;Map&lt;/code&gt; to be deep equal another one.</source>
          <target state="translated">要求一张 &lt;code&gt;Map&lt;/code&gt; 深度等于另一张。</target>
        </trans-unit>
        <trans-unit id="2dceb4d9e05ae0a8cb693a4dbb538bc0264493aa" translate="yes" xml:space="preserve">
          <source>Requires a &lt;code&gt;Map&lt;/code&gt; to contain each one of the items the given map has.</source>
          <target state="translated">需要一个 &lt;code&gt;Map&lt;/code&gt; 包含给定Map包含的每一项。</target>
        </trans-unit>
        <trans-unit id="0ab073ad01d4372ca399e311b43ec1f4f1035acb" translate="yes" xml:space="preserve">
          <source>Requires a &lt;code&gt;Set&lt;/code&gt; to be deep equal another one.</source>
          <target state="translated">要求 &lt;code&gt;Set&lt;/code&gt; 深度等于另一个。</target>
        </trans-unit>
        <trans-unit id="0c6f60b1b0ce74920d4f19968716ad921f901787" translate="yes" xml:space="preserve">
          <source>Requires a &lt;code&gt;Set&lt;/code&gt; to contain each one of the items the given set has.</source>
          <target state="translated">需要一个 &lt;code&gt;Set&lt;/code&gt; 来包含给定set包含的每个项。</target>
        </trans-unit>
        <trans-unit id="85d0b9e1449afc71f4809cb855b1987588f60a09" translate="yes" xml:space="preserve">
          <source>Requires an &lt;code&gt;Array&lt;/code&gt; to be deep equal another one.</source>
          <target state="translated">要求一个 &lt;code&gt;Array&lt;/code&gt; 深度等于另一个数组。</target>
        </trans-unit>
        <trans-unit id="29987896cfff1a5e56be129a6bdf724f52788963" translate="yes" xml:space="preserve">
          <source>Requires an &lt;code&gt;Array&lt;/code&gt; to contain each one of the values the given array has.</source>
          <target state="translated">需要一个 &lt;code&gt;Array&lt;/code&gt; ,以包含给定数组具有的每个值。</target>
        </trans-unit>
        <trans-unit id="f310ba640e8c56206914fa017f7f862a6a076c41" translate="yes" xml:space="preserve">
          <source>Requires an &lt;code&gt;Array&lt;/code&gt; to end with the same values as another one.</source>
          <target state="translated">需要一个 &lt;code&gt;Array&lt;/code&gt; 以与另一个数组相同的值结尾。</target>
        </trans-unit>
        <trans-unit id="4d1d0d49689b028544ee2f0b64b5e7b4d5c0349f" translate="yes" xml:space="preserve">
          <source>Requires an &lt;code&gt;Array&lt;/code&gt; to start with the same values as another one.</source>
          <target state="translated">需要一个 &lt;code&gt;Array&lt;/code&gt; 以与另一个数组相同的值开头。</target>
        </trans-unit>
        <trans-unit id="94a01c801348b730012996308594fbf229186f59" translate="yes" xml:space="preserve">
          <source>Requires the value to be == to the given number.</source>
          <target state="translated">要求数值==给定数。</target>
        </trans-unit>
        <trans-unit id="f985e85608067fabca01b63110de748614da70d7" translate="yes" xml:space="preserve">
          <source>Requires the value to be a &lt;code&gt;Boolean&lt;/code&gt;</source>
          <target state="translated">要求值是 &lt;code&gt;Boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d287e96905afe5c614029ec373d52f1ce23ac5c" translate="yes" xml:space="preserve">
          <source>Requires the value to be a &lt;code&gt;Date&lt;/code&gt; object.</source>
          <target state="translated">要求该值是 &lt;code&gt;Date&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="a7d15a8771926b6f008b34714568f493b2de999b" translate="yes" xml:space="preserve">
          <source>Requires the value to be a &lt;code&gt;Function&lt;/code&gt;.</source>
          <target state="translated">要求值是一个 &lt;code&gt;Function&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b4820f667ba9dc744fd13e9b8a4773b19366784e" translate="yes" xml:space="preserve">
          <source>Requires the value to be a &lt;code&gt;Map&lt;/code&gt;.</source>
          <target state="translated">要求值是 &lt;code&gt;Map&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="648e19503b97f22f665787ef577c8cb1aebe6bba" translate="yes" xml:space="preserve">
          <source>Requires the value to be a &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">要求该值为 &lt;code&gt;Number&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="729af1ea73c5ea806d92fb2656735a72e4cb4b4d" translate="yes" xml:space="preserve">
          <source>Requires the value to be a &lt;code&gt;Set&lt;/code&gt;.</source>
          <target state="translated">要求值是 &lt;code&gt;Set&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00c8052839ac580188338774101cdcf134810993" translate="yes" xml:space="preserve">
          <source>Requires the value to be a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">要求该值为 &lt;code&gt;String&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09cb76b304ec209091310489259e2882b5124535" translate="yes" xml:space="preserve">
          <source>Requires the value to be a &lt;code&gt;Symbol&lt;/code&gt;.</source>
          <target state="translated">要求该值是 &lt;code&gt;Symbol&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9db137d6108c416d6f4ac884b68658cfc222f31f" translate="yes" xml:space="preserve">
          <source>Requires the value to be a regular expression.</source>
          <target state="translated">要求该值是一个正则表达式。</target>
        </trans-unit>
        <trans-unit id="7c48674b497f921632c2e06238702079fe7f6650" translate="yes" xml:space="preserve">
          <source>Requires the value to be a string and have the expectation as a substring.</source>
          <target state="translated">要求值是一个字符串,并且期望值是一个子串。</target>
        </trans-unit>
        <trans-unit id="2d558e6b3126b84c55c706d7f6e53b4892445344" translate="yes" xml:space="preserve">
          <source>Requires the value to be a string and match the given regular expression.</source>
          <target state="translated">要求值是一个字符串,并匹配给定的正则表达式。</target>
        </trans-unit>
        <trans-unit id="2c91a765600366c88367b380a97664752b5052ce" translate="yes" xml:space="preserve">
          <source>Requires the value to be an &lt;code&gt;Array&lt;/code&gt;.</source>
          <target state="translated">要求该值为 &lt;code&gt;Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="38734feed8c9846b6fc7aad4500250d2a2c100d5" translate="yes" xml:space="preserve">
          <source>Requires the value to be an &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">要求值是一个 &lt;code&gt;Object&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6c5393084e1d0c64e892025345bca0076f151333" translate="yes" xml:space="preserve">
          <source>Requires the value to be an instance of the given &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">要求该值是给定 &lt;code&gt;type&lt;/code&gt; 的实例。</target>
        </trans-unit>
        <trans-unit id="880f1f5d184c31108da3c51ead27709f97621b08" translate="yes" xml:space="preserve">
          <source>Requires the value to be defined.</source>
          <target state="translated">需要定义该值。</target>
        </trans-unit>
        <trans-unit id="610c220bb62a11b76adb2cfc28ec0639a91a610b" translate="yes" xml:space="preserve">
          <source>Requires the value to be falsy.</source>
          <target state="translated">要求该值是假的。</target>
        </trans-unit>
        <trans-unit id="e6016d5baea5dc5af7ba6faa872aee5b8c5a6fb0" translate="yes" xml:space="preserve">
          <source>Requires the value to be in the &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">要求值在 &lt;code&gt;array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e8064f43afc340792a5593f9e2bbc151fe2128c0" translate="yes" xml:space="preserve">
          <source>Requires the value to be not &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; and have at least the same properties as &lt;code&gt;expectation&lt;/code&gt;.</source>
          <target state="translated">要求该值不能为 &lt;code&gt;null&lt;/code&gt; 或 &lt;code&gt;undefined&lt;/code&gt; 并且至少具有与 &lt;code&gt;expectation&lt;/code&gt; 相同的属性。</target>
        </trans-unit>
        <trans-unit id="0fc6eceebd1dd0ebf5fa7e75a6aeb31304243c8f" translate="yes" xml:space="preserve">
          <source>Requires the value to be of the given type, where &lt;code&gt;type&lt;/code&gt; can be one of &lt;code&gt;&quot;undefined&quot;&lt;/code&gt;, &lt;code&gt;&quot;null&quot;&lt;/code&gt;, &lt;code&gt;&quot;boolean&quot;&lt;/code&gt;, &lt;code&gt;&quot;number&quot;&lt;/code&gt;, &lt;code&gt;&quot;string&quot;&lt;/code&gt;, &lt;code&gt;&quot;object&quot;&lt;/code&gt;, &lt;code&gt;&quot;function&quot;&lt;/code&gt;, &lt;code&gt;&quot;array&quot;&lt;/code&gt;, &lt;code&gt;&quot;regexp&quot;&lt;/code&gt;, &lt;code&gt;&quot;date&quot;&lt;/code&gt; or &lt;code&gt;&quot;symbol&quot;&lt;/code&gt;.</source>
          <target state="translated">要求值是给定类型的，其中 &lt;code&gt;type&lt;/code&gt; 可以是 &lt;code&gt;&quot;undefined&quot;&lt;/code&gt; ， &lt;code&gt;&quot;null&quot;&lt;/code&gt; ， &lt;code&gt;&quot;boolean&quot;&lt;/code&gt; ， &lt;code&gt;&quot;number&quot;&lt;/code&gt; ， &lt;code&gt;&quot;string&quot;&lt;/code&gt; ， &lt;code&gt;&quot;object&quot;&lt;/code&gt; ， &lt;code&gt;&quot;function&quot;&lt;/code&gt; ， &lt;code&gt;&quot;array&quot;&lt;/code&gt; ， &lt;code&gt;&quot;regexp&quot;&lt;/code&gt; ， &lt;code&gt;&quot;date&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;symbol&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9008f7901aca081aa853bc9cd9bc8532ca6bbb2d" translate="yes" xml:space="preserve">
          <source>Requires the value to be truthy.</source>
          <target state="translated">要求该值是真实的。</target>
        </trans-unit>
        <trans-unit id="025bef0f0256a70e22c08632b71b95f5b5624bde" translate="yes" xml:space="preserve">
          <source>Requires the value to define the given &lt;code&gt;property&lt;/code&gt;.</source>
          <target state="translated">需要该值来定义给定的 &lt;code&gt;property&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d864a54075a3b06f55c23eef28b696422e797554" translate="yes" xml:space="preserve">
          <source>Requires the value to define the given &lt;code&gt;propertyPath&lt;/code&gt;. Dot (&lt;code&gt;prop.prop&lt;/code&gt;) and bracket (&lt;code&gt;prop[0]&lt;/code&gt;) notations are supported as in &lt;a href=&quot;https://lodash.com/docs/4.4.2#get&quot;&gt;Lodash.get&lt;/a&gt;.</source>
          <target state="translated">需要该值来定义给定的 &lt;code&gt;propertyPath&lt;/code&gt; 。与&lt;a href=&quot;https://lodash.com/docs/4.4.2#get&quot;&gt;Lodash.get中&lt;/a&gt;一样，支持点（ &lt;code&gt;prop.prop&lt;/code&gt; ）和括号（ &lt;code&gt;prop[0]&lt;/code&gt; ）表示法。</target>
        </trans-unit>
        <trans-unit id="00784d791f9f281ff8998029d835a6393b8d9856" translate="yes" xml:space="preserve">
          <source>Requires the value to strictly equal &lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="translated">要求值严格等于 &lt;code&gt;ref&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5c23dc41f95c756f78caffe7679fae395ee24eb9" translate="yes" xml:space="preserve">
          <source>Resets both behaviour and history of the stub.</source>
          <target state="translated">重置存根的行为和历史。</target>
        </trans-unit>
        <trans-unit id="b0834af68b1ba3bf7e561c7b14911495077b72ea" translate="yes" xml:space="preserve">
          <source>Resets the behaviour of all stubs created through the sandbox.</source>
          <target state="translated">重置所有通过沙盒创建的存根的行为。</target>
        </trans-unit>
        <trans-unit id="1662293b28da0b5b18a6e7ab004df7ee722981cd" translate="yes" xml:space="preserve">
          <source>Resets the history of all stubs created through the sandbox.</source>
          <target state="translated">重置所有通过沙盒创建的存根的历史。</target>
        </trans-unit>
        <trans-unit id="747a8e97ca8725c961cd61f12850cbaad703fb41" translate="yes" xml:space="preserve">
          <source>Resets the internal state of all fakes created through sandbox.</source>
          <target state="translated">重置所有通过沙盒创建的假货的内部状态。</target>
        </trans-unit>
        <trans-unit id="2ff28f6d827c99eb2eba374c6cb1ff3188b34b6b" translate="yes" xml:space="preserve">
          <source>Resets the state of a spy.</source>
          <target state="translated">重置间谍的状态。</target>
        </trans-unit>
        <trans-unit id="721a9be0303ac7ebbfdd5e1710195f432f2ace5b" translate="yes" xml:space="preserve">
          <source>Resets the stub&amp;rsquo;s behaviour to the default behaviour</source>
          <target state="translated">将存根的行为重置为默认行为</target>
        </trans-unit>
        <trans-unit id="3f6c2202b4367ee18fa9b23058ef066dabbba893" translate="yes" xml:space="preserve">
          <source>Resets the stub&amp;rsquo;s history</source>
          <target state="translated">重置存根的历史记录</target>
        </trans-unit>
        <trans-unit id="4a8f0ea993905125628ace30e9561589aadc6136" translate="yes" xml:space="preserve">
          <source>Responds to all &lt;code&gt;method&lt;/code&gt; requests to URLs matching the regular expression.</source>
          <target state="translated">响应对与正则表达式匹配的URL的所有 &lt;code&gt;method&lt;/code&gt; 请求。</target>
        </trans-unit>
        <trans-unit id="77f26dcb6cab2228785b53079a0551dad2a7308a" translate="yes" xml:space="preserve">
          <source>Responds to all &lt;code&gt;method&lt;/code&gt; requests to the given URL with the given response.</source>
          <target state="translated">使用给定的响应响应对给定URL的所有 &lt;code&gt;method&lt;/code&gt; 请求。</target>
        </trans-unit>
        <trans-unit id="d85174dbc8ff9d14e01d4987933ffd0610f8b617" translate="yes" xml:space="preserve">
          <source>Responds to all requests to given URL, e.g. &lt;code&gt;/posts/1&lt;/code&gt;.</source>
          <target state="translated">响应对给定URL的所有请求，例如 &lt;code&gt;/posts/1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9f16e0d2292115bdcc2c283d74e64db37c1704d6" translate="yes" xml:space="preserve">
          <source>Restore original function(s).</source>
          <target state="translated">恢复原来的功能。</target>
        </trans-unit>
        <trans-unit id="9ef7185b54b905969b5c2761af07e3b4f4a35c34" translate="yes" xml:space="preserve">
          <source>Restore the faked methods.</source>
          <target state="translated">恢复伪造的方法。</target>
        </trans-unit>
        <trans-unit id="49d5e8476b7277d27ee0942d0b37bab8724a36af" translate="yes" xml:space="preserve">
          <source>Restores all fakes created through sandbox.</source>
          <target state="translated">恢复所有通过沙盒创建的假货。</target>
        </trans-unit>
        <trans-unit id="dd947b9328ed872a9d6745822ec6168e4c0c4906" translate="yes" xml:space="preserve">
          <source>Restores all mocked methods.</source>
          <target state="translated">恢复所有被模拟的方法。</target>
        </trans-unit>
        <trans-unit id="4913342e7f6bebd41323ee6036cc067bc85960a3" translate="yes" xml:space="preserve">
          <source>Restores the native XHR constructor.</source>
          <target state="translated">恢复本地XHR构造函数。</target>
        </trans-unit>
        <trans-unit id="6c19bb1fd1cd365beab169e0e3b2c764bdcd0481" translate="yes" xml:space="preserve">
          <source>Return value.</source>
          <target state="translated">返回值:</target>
        </trans-unit>
        <trans-unit id="e4182253baa783e9223d3a2fa21f6b65c992f8d6" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;obj&lt;/code&gt; was &lt;code&gt;this&lt;/code&gt; for this call. &lt;code&gt;calledOn&lt;/code&gt; also accepts a matcher &lt;code&gt;spyCall.calledOn(sinon.match(fn))&lt;/code&gt; (see &lt;a href=&quot;matchers&quot;&gt;matchers&lt;/a&gt;).</source>
          <target state="translated">返回 &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;obj&lt;/code&gt; 是 &lt;code&gt;this&lt;/code&gt; 这个呼叫。 &lt;code&gt;calledOn&lt;/code&gt; 还接受匹配 &lt;code&gt;spyCall.calledOn(sinon.match(fn))&lt;/code&gt; 见&lt;a href=&quot;matchers&quot;&gt;匹配器&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="6a8702f5051562b2b3c5a44ea3cbf136887de4a9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;spy&lt;/code&gt; was called after &lt;code&gt;anotherSpy&lt;/code&gt;, and no spy &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;calls&lt;/a&gt; occurred between &lt;code&gt;anotherSpy&lt;/code&gt; and &lt;code&gt;spy&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;true&lt;/code&gt; ，如果 &lt;code&gt;spy&lt;/code&gt; 被称为后 &lt;code&gt;anotherSpy&lt;/code&gt; ，并没有窥探&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;通话&lt;/a&gt;之间发生 &lt;code&gt;anotherSpy&lt;/code&gt; 和 &lt;code&gt;spy&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ce15aa6f580149ad04d92360d26f5165d3fad41" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;spy&lt;/code&gt; was called before &lt;code&gt;anotherSpy&lt;/code&gt;, and no spy &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;calls&lt;/a&gt; occurred between &lt;code&gt;spy&lt;/code&gt; and &lt;code&gt;anotherSpy&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;true&lt;/code&gt; ，如果 &lt;code&gt;spy&lt;/code&gt; 被称为前 &lt;code&gt;anotherSpy&lt;/code&gt; ，并没有窥探&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;通话&lt;/a&gt;之间发生的 &lt;code&gt;spy&lt;/code&gt; 和 &lt;code&gt;anotherSpy&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="46f499d151150dead1c4072dd67c186c6833b495" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if call did not receive matching arguments. This behaves the same as &lt;code&gt;spyCall.notCalledWith(sinon.match(arg1), sinon.match(arg2), ...)&lt;/code&gt;.</source>
          <target state="translated">如果调用未收到匹配的参数，则返回 &lt;code&gt;true&lt;/code&gt; 。此行为与 &lt;code&gt;spyCall.notCalledWith(sinon.match(arg1), sinon.match(arg2), ...)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a41fd8a8d3546ee841852b0dd137f24cca2a020b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if call did not receive provided arguments.</source>
          <target state="translated">如果调用未收到提供的参数，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="883aa459b92988c677c16111d5a239cde054f098" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if call received matching arguments (and possibly others). This behaves the same as &lt;code&gt;spyCall.calledWith(sinon.match(arg1), sinon.match(arg2), ...)&lt;/code&gt;.</source>
          <target state="translated">如果调用接收到匹配的参数（可能还有其他参数），则返回 &lt;code&gt;true&lt;/code&gt; 。此行为与 &lt;code&gt;spyCall.calledWith(sinon.match(arg1), sinon.match(arg2), ...)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7c30122f998fb23b0c417ac5b54b748a779e664b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if call received provided arguments (and possibly others).</source>
          <target state="translated">如果调用收到提供的参数（可能还有其他参数），则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="60380fed0760e88e273c8b61163aaeb028cb6bc9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if call received provided arguments and no others.</source>
          <target state="translated">如果调用未提供任何参数，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="89989a43b96d5c3716d30d6b7f70fce905f6e247" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if call threw an exception.</source>
          <target state="translated">如果调用引发异常，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3cfcdeecd846e5c1fc9d94bdb115f0ba6b69e2f4" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if call threw exception of provided type.</source>
          <target state="translated">如果调用抛出所提供类型的异常，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7411c7c0679bd15905d8f2fd0de7e80380e2f172" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if call threw provided exception object.</source>
          <target state="translated">如果调用引发了提供的异常对象，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4a7714fa1fd1f650a03f88a55f2b777b65a0cd23" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spied function returned the provided &lt;code&gt;value&lt;/code&gt; on this call.</source>
          <target state="translated">如果spied函数在此调用上返回了提供的 &lt;code&gt;value&lt;/code&gt; ，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="197ae6d319653f76c7829681de47b451b721c2ec" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy always returned the provided value.</source>
          <target state="translated">如果spy始终返回提供的值，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6c5800e84652ff194d36a34c0c00eef941c66b55" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy always threw an exception of the provided type.</source>
          <target state="translated">如果spy总是抛出所提供类型的异常，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="28efc95bcccc8f9dddde4e417260879422e915ef" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy always threw an exception.</source>
          <target state="translated">如果间谍总是抛出异常，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="be403fcf0acc1c2b568809d14926c7be2d141afe" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy always threw the provided exception object.</source>
          <target state="translated">如果间谍总是抛出所提供的异常对象，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13280d369e581741c663538f5b7b67b76efcf279" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy returned the provided value at least once.</source>
          <target state="translated">如果spy至少返回一次提供的值，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="26e9528b75985b1ffeb76d846112226c6c84df67" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy threw an exception at least once.</source>
          <target state="translated">如果间谍至少抛出一次异常，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3ec91f9dca85fb2702acae12da29de943370f362" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy threw an exception of the provided type at least once.</source>
          <target state="translated">如果spy至少抛出一次所提供类型的异常，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6d554a9230ad0f15f370e2e91d42663820cfe4f4" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy threw the provided exception object at least once.</source>
          <target state="translated">如果spy至少抛出一次提供的异常对象，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a78715a70fbd78a05fe027cc1afd460dd50f9fe" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy was always called with matching arguments (and possibly others).</source>
          <target state="translated">如果始终使用匹配的参数（可能还有其他参数）调用spy，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="abea4d9a65831d991d78e6f396bdacbc854613fb" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy was always called with the exact provided arguments.</source>
          <target state="translated">如果始终使用提供的确切参数调用spy，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2816147f3b824477ad1e4726ae413e5eaf236327" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy was always called with the provided arguments (and possibly others).</source>
          <target state="translated">如果始终使用提供的参数（可能还有其他参数）调用spy，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21630c472d54f2fccd6667d0bb2b2de984ac30a5" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy was called at exactly once with the provided arguments.</source>
          <target state="translated">如果使用提供的参数一次恰好调用了spy，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0584ae4867a4c8be1732c79be10760effb447ad4" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy was called at least once with the provided arguments and no others.</source>
          <target state="translated">如果使用提供的参数调用了spy至少一次，没有其他调用，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="062e5c18bffbe5801d5c564bb3c6b858b79ef331" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy was called at least once with the provided arguments.</source>
          <target state="translated">如果使用提供的参数至少调用一次spy，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3cee72a0352e72bcef263408e189e85a7e2345f2" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy was called exactly once and with only the provided arguments.</source>
          <target state="translated">如果只使用提供的参数仅一次调用了spy，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c08bf1d9fcae53cef3a495b7925b3702ec1249b8" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy was called with matching arguments (and possibly others).</source>
          <target state="translated">如果使用匹配的参数（可能还有其他参数）调用了spy，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c1add8134cf27a915867bde0feec296d22156fd9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if spy/stub was called the &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">如果spy / stub被称为 &lt;code&gt;new&lt;/code&gt; 运算符，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="70580351a4894df2058909d63092245e53515d58" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the spy call occurred after another call, and no calls to any other spy occurred in-between.</source>
          <target state="translated">如果间谍呼叫在另一个呼叫之后发生，并且在此之间没有发生对任何其他间谍的呼叫，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="54d0c3900b23802053fb6c811bbe0827cc0a0350" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the spy call occurred after another spy call.</source>
          <target state="translated">如果间谍调用在另一个间谍调用之后发生，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="22f909845a616d5975a6825e4ea2634b7c515f79" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the spy call occurred before another call, and no calls to any other spy occurred in-between.</source>
          <target state="translated">如果间谍呼叫发生在另一个呼叫之前，并且在两者之间没有发生对任何其他间谍的呼叫，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2fd20a0154920bfb1067de85080ade20661f1c40" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the spy call occurred before another spy call.</source>
          <target state="translated">如果间谍调用发生在另一个间谍调用之前，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4ec9aa8168fce8fe352da35121cc40ee75b5e5ef" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the spy was always called with &lt;code&gt;obj&lt;/code&gt; as &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;true&lt;/code&gt; ，如果间谍被称为总是用 &lt;code&gt;obj&lt;/code&gt; 因为 &lt;code&gt;this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7a9aab912f6bb344b0ad3c6c64753078c74f297b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the spy was called after &lt;code&gt;anotherSpy&lt;/code&gt;</source>
          <target state="translated">如果间谍在 &lt;code&gt;anotherSpy&lt;/code&gt; 之后被调用，则返回 &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6be2750ab6101ea81741efc65baf10ce9d50e8a9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the spy was called at least once with &lt;code&gt;obj&lt;/code&gt; as &lt;code&gt;this&lt;/code&gt;. &lt;code&gt;calledOn&lt;/code&gt; also accepts a matcher &lt;code&gt;spyCall.calledOn(sinon.match(fn))&lt;/code&gt; (see &lt;a href=&quot;matchers&quot;&gt;matchers&lt;/a&gt;).</source>
          <target state="translated">如果使用 &lt;code&gt;obj&lt;/code&gt; 作为 &lt;code&gt;this&lt;/code&gt; 至少调用了一次间谍，则返回 &lt;code&gt;true&lt;/code&gt; 。 &lt;code&gt;calledOn&lt;/code&gt; 还接受匹配 &lt;code&gt;spyCall.calledOn(sinon.match(fn))&lt;/code&gt; （见&lt;a href=&quot;matchers&quot;&gt;匹配器&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="a0b9f949228d95d9176ba010ee4c9504a2441544" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the spy was called before &lt;code&gt;anotherSpy&lt;/code&gt;</source>
          <target state="translated">如果间谍在 &lt;code&gt;anotherSpy&lt;/code&gt; 之前被调用，则返回 &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b46fd6cc1f5b969db3d0355c638bfc7e3b13433" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the spy/stub was never called with matching arguments.</source>
          <target state="translated">如果从未使用匹配的参数调用间谍/存根，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ac4f3b0d2760500bedc03fd29d0a8b684e45379" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the spy/stub was never called with the provided arguments.</source>
          <target state="translated">如果从未使用提供的参数调用间谍/存根，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52c9b51ccc145b92ed22871fbf25ab34af21b246" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;Array&lt;/code&gt; of all &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;calls&lt;/a&gt; recorded by the spy.</source>
          <target state="translated">返回一个由间谍记录的所有&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;呼叫&lt;/a&gt;的 &lt;code&gt;Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4a2a9783a070718696097bbd08bcae1043ecdb94" translate="yes" xml:space="preserve">
          <source>Returns an Array with all callbacks return values in the order they were called, if no error is thrown.</source>
          <target state="translated">如果没有发生错误,则返回一个数组,其中包含所有回调的返回值,并按调用顺序排列。</target>
        </trans-unit>
        <trans-unit id="eadebf05919f0bab24cfc59019b3838a09c9f439" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;nth&lt;/em&gt;&lt;a href=&quot;#spycall&quot;&gt;call&lt;/a&gt;.</source>
          <target state="translated">返回第&lt;em&gt;n个&lt;/em&gt;&lt;a href=&quot;#spycall&quot;&gt;调用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="127d0ca5f0a1dc9e10793d99492d42c544334f09" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;nth&lt;/em&gt;&lt;a href=&quot;#spycall&quot;&gt;call&lt;/a&gt;. Accessing individual calls helps with more detailed behavior verification when the spy is called more than once.</source>
          <target state="translated">返回第&lt;em&gt;n个&lt;/em&gt;&lt;a href=&quot;#spycall&quot;&gt;调用&lt;/a&gt;。当间谍被多次呼叫时，访问单个呼叫有助于进行更详细的行为验证。</target>
        </trans-unit>
        <trans-unit id="6838a87c9595095ba30ade61d9ff4970f0e2b0e9" translate="yes" xml:space="preserve">
          <source>Returns the passed format string with the following replacements performed:</source>
          <target state="translated">返回传递的格式字符串,并执行以下替换。</target>
        </trans-unit>
        <trans-unit id="ca54e4b963adcb9018e91a76a9aa09bc8d988cd7" translate="yes" xml:space="preserve">
          <source>Safari 9</source>
          <target state="translated">Safari 9</target>
        </trans-unit>
        <trans-unit id="57db70369f42220fb828d8a8d11bdfd8aa398ec4" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;sinon.match.has&lt;/code&gt; but the property must be defined by the value itself. Inherited properties are ignored.</source>
          <target state="translated">与 &lt;code&gt;sinon.match.has&lt;/code&gt; 相同，但是属性必须由值本身定义。继承的属性将被忽略。</target>
        </trans-unit>
        <trans-unit id="a10dc58592b8cf4d5dd8431dc988d529a4cd4d37" translate="yes" xml:space="preserve">
          <source>Same as their corresponding non-Async counterparts, but with callback being deferred at called after all instructions in the current call stack are processed.</source>
          <target state="translated">与相应的非Async对应的指令相同,但在当前调用栈中的所有指令处理完毕后,回调被推迟。</target>
        </trans-unit>
        <trans-unit id="9ddf5cad16f56f0e5bb1d16c448eacdcb4583511" translate="yes" xml:space="preserve">
          <source>Sandbox API</source>
          <target state="translated">沙盒API</target>
        </trans-unit>
        <trans-unit id="a343911aa02e72afd70d0c51ffb726d6cf8ba470" translate="yes" xml:space="preserve">
          <source>Sandboxes</source>
          <target state="translated">Sandboxes</target>
        </trans-unit>
        <trans-unit id="da3b679d7406b62ee57daa4423abab03ca07fe63" translate="yes" xml:space="preserve">
          <source>Sandboxes are partially configured by default such that calling:</source>
          <target state="translated">沙箱的部分配置是默认的,这样调用。</target>
        </trans-unit>
        <trans-unit id="c7543524aaead10ff50c4771efd6e90c6d63e362" translate="yes" xml:space="preserve">
          <source>Sandboxes removes the need to keep track of every fake created, which greatly simplifies cleanup.</source>
          <target state="translated">沙盒消除了跟踪每一个创建的假货的需要,这大大简化了清理工作。</target>
        </trans-unit>
        <trans-unit id="6fdeb896ddc5cd364f5a72a3ba2eba8441ab2753" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#expectations&quot;&gt;expectations&lt;/a&gt; below.</source>
          <target state="translated">请参阅下面的&lt;a href=&quot;#expectations&quot;&gt;期望&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="89168ff7e1841a248f188eecb13648484981e6f1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#fake-server-options&quot;&gt;options&lt;/a&gt; below for configuration parameters.</source>
          <target state="translated">有关配置参数，请参见下面的&lt;a href=&quot;#fake-server-options&quot;&gt;选项&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3c6ed6e7f7c99120055eb9679e3be720714aeb06" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;custom matchers&lt;/code&gt;.</source>
          <target state="translated">请参阅 &lt;code&gt;custom matchers&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0fab272c95eeaca8d8ed4502e958622f40d06d58" translate="yes" xml:space="preserve">
          <source>Sets response headers (e.g. &lt;code&gt;{ &quot;Content-Type&quot;: &quot;text/html&quot;, /* ... */ }&lt;/code&gt;, updates the &lt;code&gt;readyState&lt;/code&gt; property and fires &lt;code&gt;onreadystatechange&lt;/code&gt;.</source>
          <target state="translated">设置响应头（例如 &lt;code&gt;{ &quot;Content-Type&quot;: &quot;text/html&quot;, /* ... */ }&lt;/code&gt; ，更新 &lt;code&gt;readyState&lt;/code&gt; 属性并触发 &lt;code&gt;onreadystatechange&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="570792335c8b7b2b2d4aca8dfa19a4c6fb1c0511" translate="yes" xml:space="preserve">
          <source>Sets response status (&lt;code&gt;status&lt;/code&gt; and &lt;code&gt;statusText&lt;/code&gt; properties).</source>
          <target state="translated">设置响应状态（ &lt;code&gt;status&lt;/code&gt; 和 &lt;code&gt;statusText&lt;/code&gt; 属性）。</target>
        </trans-unit>
        <trans-unit id="cfaeea612db9fcd82394817a5281a8f46fd33afe" translate="yes" xml:space="preserve">
          <source>Sets the respond body, updates the &lt;code&gt;readyState&lt;/code&gt; property and fires &lt;code&gt;onreadystatechange&lt;/code&gt;.</source>
          <target state="translated">设置响应主体，更新 &lt;code&gt;readyState&lt;/code&gt; 属性并触发 &lt;code&gt;onreadystatechange&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="34ccb3c5fa7bb043222d0a2ee97838e34204667f" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;callsArg&lt;/code&gt;.</source>
          <target state="translated">类似于 &lt;code&gt;callsArg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9e167dce5ab48421bf21ccb7a16bfb4d7cf64f66" translate="yes" xml:space="preserve">
          <source>Simulates a network error on the request. The &lt;code&gt;onerror&lt;/code&gt; handler will be called and the &lt;code&gt;status&lt;/code&gt; will be &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">根据请求模拟网络错误。该 &lt;code&gt;onerror&lt;/code&gt; 处理程序将被调用，而 &lt;code&gt;status&lt;/code&gt; 将是 &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8b3bceebef044ac30d8e9a0abf17d8148b17a755" translate="yes" xml:space="preserve">
          <source>Simulating server responses</source>
          <target state="translated">模拟服务器响应</target>
        </trans-unit>
        <trans-unit id="7d45e2eb2eaddc9bd85c4267b7ea75e3368837cc" translate="yes" xml:space="preserve">
          <source>Since 2.x, you can no longer access requests through &lt;code&gt;sandbox.requests&lt;/code&gt; - use &lt;code&gt;sandbox.useFakeServer&lt;/code&gt; to do this. This function maps to &lt;code&gt;sinon.useFakeXMLHttpRequest&lt;/code&gt;, only with sandboxing.</source>
          <target state="translated">从2.x开始，您将无法再通过 &lt;code&gt;sandbox.requests&lt;/code&gt; 访问请求-使用 &lt;code&gt;sandbox.useFakeServer&lt;/code&gt; 可以执行此操作。此函数仅使用沙箱映射到 &lt;code&gt;sinon.useFakeXMLHttpRequest&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5138dff83c44610fc17240add80346678884acaf" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;sinon@5.0.0&lt;/code&gt;, the &lt;code&gt;sinon&lt;/code&gt; object is a default sandbox. Unless you have a very advanced setup or need a special configuration, you probably want to just use that one.</source>
          <target state="translated">从 &lt;code&gt;sinon@5.0.0&lt;/code&gt; 开始， &lt;code&gt;sinon&lt;/code&gt; 对象是默认的沙箱。除非您有非常高级的设置或需要特殊的配置，否则您可能只想使用该设置。</target>
        </trans-unit>
        <trans-unit id="14371fbd9c08ee90b56fc4ff9f585f39a05dcf23" translate="yes" xml:space="preserve">
          <source>Sinon &lt;code&gt;v7.1.1&lt;/code&gt; is written as &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/&quot;&gt;ES5.1&lt;/a&gt; and requires no transpiler or polyfills to run in the runtimes listed below.</source>
          <target state="translated">Sinon &lt;code&gt;v7.1.1&lt;/code&gt; 编写为&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/&quot;&gt;ES5.1&lt;/a&gt;，不需要任何编译器或polyfill即可在下面列出的运行时中运行。</target>
        </trans-unit>
        <trans-unit id="8ca9c322b6b57ad61dc88393d853284b67edf164" translate="yes" xml:space="preserve">
          <source>Sinon.JS</source>
          <target state="translated">Sinon.JS</target>
        </trans-unit>
        <trans-unit id="d55070dcc0e278c5e47228644fb645f7ee97ea99" translate="yes" xml:space="preserve">
          <source>Sinon.JS has a few utilities used internally in &lt;code&gt;lib/sinon.js&lt;/code&gt;. Unless the method in question is documented here, it should not be considered part of the public API, and thus is subject to change.</source>
          <target state="translated">Sinon.JS在 &lt;code&gt;lib/sinon.js&lt;/code&gt; 内部有一些实用程序。除非此处记录有问题的方法，否则不应将其视为公共API的一部分，因此可能会发生更改。</target>
        </trans-unit>
        <trans-unit id="4249df7c8b09dcc22ca9c4b291bf94da146e5368" translate="yes" xml:space="preserve">
          <source>Sinon.JS ships with a set of assertions that mirror most behavior verification methods and properties on spies and stubs. The advantage of using the assertions is that failed expectations on stubs and spies can be expressed directly as assertion failures with detailed and helpful error messages.</source>
          <target state="translated">Sinon.JS提供了一组断言,它反映了spies和stubs上的大多数行为验证方法和属性。使用断言的好处是,在存根和间谍上失败的期望可以直接以断言失败的方式表达,并提供详细和有用的错误信息。</target>
        </trans-unit>
        <trans-unit id="90e5631738c702e0b472dcdb30b998eeda638212" translate="yes" xml:space="preserve">
          <source>Specify the maximum amount of calls expected.</source>
          <target state="translated">指定预期的最大通话量。</target>
        </trans-unit>
        <trans-unit id="2fe0ee82eac660fa477791a737cfe13421fb1b0e" translate="yes" xml:space="preserve">
          <source>Specify the minimum amount of calls expected.</source>
          <target state="translated">指定预期的最低通话量。</target>
        </trans-unit>
        <trans-unit id="95ab386e0b684465b4620ff33b9784ded5fa008b" translate="yes" xml:space="preserve">
          <source>Spies</source>
          <target state="translated">Spies</target>
        </trans-unit>
        <trans-unit id="0a9212e1c4433c4fc0498759eb3d82d73fc6c265" translate="yes" xml:space="preserve">
          <source>Spies on the provided function</source>
          <target state="translated">监视所提供的功能</target>
        </trans-unit>
        <trans-unit id="679c52f477fd4039b771239e164386aeba24ad67" translate="yes" xml:space="preserve">
          <source>Spies provide a rich interface to inspect their usage. The above examples showed the &lt;code&gt;calledOnce&lt;/code&gt; boolean property as well as the &lt;code&gt;getCall&lt;/code&gt; method and the returned object&amp;rsquo;s &lt;code&gt;args&lt;/code&gt; property. There are three ways of inspecting &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;call&lt;/a&gt; data.</source>
          <target state="translated">间谍提供了丰富的界面来检查其用法。上面的示例显示了 &lt;code&gt;calledOnce&lt;/code&gt; 布尔属性以及 &lt;code&gt;getCall&lt;/code&gt; 方法和返回对象的 &lt;code&gt;args&lt;/code&gt; 属性。有三种检查&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;呼叫&lt;/a&gt;数据的方法。</target>
        </trans-unit>
        <trans-unit id="a05de4dee2cfb6848902a928d35f9fd8fae21f75" translate="yes" xml:space="preserve">
          <source>Spy API</source>
          <target state="translated">间谍API</target>
        </trans-unit>
        <trans-unit id="5814e17b51c60527e25d03422ddf2dc42e4c4bae" translate="yes" xml:space="preserve">
          <source>Spy call</source>
          <target state="translated">监视电话</target>
        </trans-unit>
        <trans-unit id="1228dd0900ed9c7458a13ede32c279073dbcb49f" translate="yes" xml:space="preserve">
          <source>Spy calls</source>
          <target state="translated">谍报电话</target>
        </trans-unit>
        <trans-unit id="143781f377489f63eeb12026bb9d23ef127e5926" translate="yes" xml:space="preserve">
          <source>Spy objects are objects returned from &lt;code&gt;sinon.spy()&lt;/code&gt;. When spying on existing methods with &lt;code&gt;sinon.spy(object, method)&lt;/code&gt;, the following properties and methods are also available on &lt;code&gt;object.method&lt;/code&gt;.</source>
          <target state="translated">间谍对象是从 &lt;code&gt;sinon.spy()&lt;/code&gt; 返回的对象。当使用 &lt;code&gt;sinon.spy(object, method)&lt;/code&gt; 监视现有方法时， &lt;code&gt;object.method&lt;/code&gt; 上的以下属性和方法也可用。</target>
        </trans-unit>
        <trans-unit id="75e7c81dea35d6d9e11d8547d4748a020b1b8fc0" translate="yes" xml:space="preserve">
          <source>Starts the clock at the UNIX epoch (timestamp of &lt;code&gt;0&lt;/code&gt;).</source>
          <target state="translated">在UNIX时代（时间戳为 &lt;code&gt;0&lt;/code&gt; ）开始时钟。</target>
        </trans-unit>
        <trans-unit id="f15d727c8f753ce3619157574f6afaf5ab6feced" translate="yes" xml:space="preserve">
          <source>Status should be a number, the status text is looked up from &lt;code&gt;sinon.FakeXMLHttpRequest.statusCodes&lt;/code&gt;.</source>
          <target state="translated">Status应该是一个数字，从 &lt;code&gt;sinon.FakeXMLHttpRequest.statusCodes&lt;/code&gt; 查找状态文本。</target>
        </trans-unit>
        <trans-unit id="7d022e720f8e0444a2d16aa83763597e85bb272d" translate="yes" xml:space="preserve">
          <source>Stub API</source>
          <target state="translated">存根API</target>
        </trans-unit>
        <trans-unit id="a104be00437ca136b2d7516c32862121e80a6b93" translate="yes" xml:space="preserve">
          <source>Stubbing a non-function property</source>
          <target state="translated">存根非功能属性</target>
        </trans-unit>
        <trans-unit id="c6e2db0c74fde65b09c514af135ea750c51f5b01" translate="yes" xml:space="preserve">
          <source>Stubbing individual methods tests intent more precisely and is less susceptible to unexpected behavior as the object&amp;rsquo;s code evolves.</source>
          <target state="translated">存根单个方法可以更精确地测试意图，并且随着对象代码的发展，不易受到意外行为的影响。</target>
        </trans-unit>
        <trans-unit id="3107408a50c756bdc03dcf7d5aed6d74eb0c9e3e" translate="yes" xml:space="preserve">
          <source>Stubs</source>
          <target state="translated">Stubs</target>
        </trans-unit>
        <trans-unit id="076fd28da9482c79a14bd09da45cfac86659f0a0" translate="yes" xml:space="preserve">
          <source>Stubs all the object&amp;rsquo;s methods.</source>
          <target state="translated">存根对象的所有方法。</target>
        </trans-unit>
        <trans-unit id="bd0728aaefc55c502cd57e2ba4e53785585b30c7" translate="yes" xml:space="preserve">
          <source>Stubs the method only for the provided arguments.</source>
          <target state="translated">只对所提供的参数进行存根处理。</target>
        </trans-unit>
        <trans-unit id="838a0ae349dc8d4e62318d564f34435fae184ff0" translate="yes" xml:space="preserve">
          <source>Stuck?</source>
          <target state="translated">Stuck?</target>
        </trans-unit>
        <trans-unit id="e65e92726ac1b9955338e3070b386dede0d9a2a9" translate="yes" xml:space="preserve">
          <source>Supported runtimes</source>
          <target state="translated">支持的运行时间</target>
        </trans-unit>
        <trans-unit id="03cd655d7f4ce7aa2d022e45649c1cb71271ddf8" translate="yes" xml:space="preserve">
          <source>Supports a pattern common to Ruby on Rails applications.</source>
          <target state="translated">支持Ruby on Rails应用中常见的模式。</target>
        </trans-unit>
        <trans-unit id="d64b52f4dd601fa5c44a77f8510f47e2274a0f78" translate="yes" xml:space="preserve">
          <source>Supports a pattern common to Ruby on Rails applications. For custom HTTP method faking, override &lt;code&gt;server.getHTTPMethod(request)&lt;/code&gt;.</source>
          <target state="translated">支持Ruby on Rails应用程序通用的模式。对于自定义HTTP方法伪造，请覆盖 &lt;code&gt;server.getHTTPMethod(request)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="290bbe423e73ac281a828cad851bf198c6f24c3d" translate="yes" xml:space="preserve">
          <source>Synchronous requests are responded to immediately, so make sure to call &lt;code&gt;respondWith&lt;/code&gt; upfront.</source>
          <target state="translated">同步请求将立即得到响应，因此请确保预先调用 &lt;code&gt;respondWith&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9588b60b18a400ba28005f2afdfe40b0a294548b" translate="yes" xml:space="preserve">
          <source>Test stubs are functions (spies) with pre-programmed behavior.</source>
          <target state="translated">测试存根是带有预编程行为的函数(间谍)。</target>
        </trans-unit>
        <trans-unit id="9d1c37ce31733bcd9d6e4452f4073375cbec2b3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sinon.createSandbox(config)&lt;/code&gt; method is often an integration feature, and can be used for scenarios including a global object to coordinate all fakes through.</source>
          <target state="translated">所述 &lt;code&gt;sinon.createSandbox(config)&lt;/code&gt; 方法经常是积分功能，并可以被用于场景，包括一个全局对象通过协调所有假货。</target>
        </trans-unit>
        <trans-unit id="b2e99e77c9ebc18c18919e6c2f23dea55dbf2972" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useFakeTimers&lt;/code&gt; and &lt;code&gt;useFakeServers&lt;/code&gt; are &lt;strong&gt;false&lt;/strong&gt; as opposed to the defaults in &lt;code&gt;sinon.defaultConfig&lt;/code&gt;:</source>
          <target state="translated">该 &lt;code&gt;useFakeTimers&lt;/code&gt; 和 &lt;code&gt;useFakeServers&lt;/code&gt; 是&lt;strong&gt;假的&lt;/strong&gt;，而不是在默认 &lt;code&gt;sinon.defaultConfig&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="f12705bb5a4ab85d22785e4f963b2460d47da740" translate="yes" xml:space="preserve">
          <source>The URL set on the request object.</source>
          <target state="translated">在请求对象上设置的URL。</target>
        </trans-unit>
        <trans-unit id="fe087b338392c52bb301db97629ce6fbc6e958d9" translate="yes" xml:space="preserve">
          <source>The assertions can be used with either spies or stubs.</source>
          <target state="translated">断言可以使用间谍或存根。</target>
        </trans-unit>
        <trans-unit id="c74e0eab2ccb5867efc6411dc6b3877c85710aa3" translate="yes" xml:space="preserve">
          <source>The call&amp;rsquo;s &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">呼叫就是 &lt;code&gt;this&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="a65cc40c98d133e3d4ff45f6cad4aa185cf474ae" translate="yes" xml:space="preserve">
          <source>The default timeout is 10ms but you can control it through the &lt;code&gt;autoRespondAfter&lt;/code&gt; property.</source>
          <target state="translated">默认超时为10毫秒，但您可以通过 &lt;code&gt;autoRespondAfter&lt;/code&gt; 属性对其进行控制。</target>
        </trans-unit>
        <trans-unit id="8d9584411ee628a461405bea3595e5c83cc6ed01" translate="yes" xml:space="preserve">
          <source>The exception can be a &lt;code&gt;String&lt;/code&gt; denoting its type, or an actual object.</source>
          <target state="translated">异常可以是表示其类型的 &lt;code&gt;String&lt;/code&gt; ，也可以是实际对象。</target>
        </trans-unit>
        <trans-unit id="301f6334f9c129a8c461f2a56e8a904170a39a32" translate="yes" xml:space="preserve">
          <source>The fake server and XHR can be used completely stand-alone by downloading &lt;code&gt;sinon-server.js&lt;/code&gt;.</source>
          <target state="translated">通过下载 &lt;code&gt;sinon-server.js&lt;/code&gt; ,可以完全独立使用伪造的服务器和XHR 。</target>
        </trans-unit>
        <trans-unit id="2d4d1edc71421509df9dcac0b0ab66897ef868a6" translate="yes" xml:space="preserve">
          <source>The filter will be called when &lt;code&gt;xhr.open&lt;/code&gt; is called, with the exact same arguments (&lt;code&gt;method&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;). If the filter returns &lt;code&gt;true&lt;/code&gt;, the request will not be faked.</source>
          <target state="translated">调用 &lt;code&gt;xhr.open&lt;/code&gt; 时将使用完全相同的参数（ &lt;code&gt;method&lt;/code&gt; ， &lt;code&gt;url&lt;/code&gt; ， &lt;code&gt;async&lt;/code&gt; ， &lt;code&gt;username&lt;/code&gt; ， &lt;code&gt;password&lt;/code&gt; ）调用过滤器。如果过滤器返回 &lt;code&gt;true&lt;/code&gt; ，那么该请求将不会被伪造。</target>
        </trans-unit>
        <trans-unit id="4ef2070f7facda59344e428babb59a8284fe9740" translate="yes" xml:space="preserve">
          <source>The first &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;call&lt;/a&gt;</source>
          <target state="translated">第一次&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;电话&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e9102a20a4e21b6ebc22f17bb73af975a4e62c53" translate="yes" xml:space="preserve">
          <source>The first example uses the two-dimensional &lt;code&gt;args&lt;/code&gt; array directly on the spy, while the second example fetches the first &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;call&lt;/a&gt; object and then accesses its &lt;code&gt;args&lt;/code&gt; array. Which one to use is a matter of preference, but the recommended approach is going with &lt;code&gt;spy.calledWith(arg1, arg2, ...)&lt;/code&gt; unless there&amp;rsquo;s a need to make the tests highly specific.</source>
          <target state="translated">第一个示例直接在间谍上使用二维 &lt;code&gt;args&lt;/code&gt; 数组，而第二个示例获取第一个&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;调用&lt;/a&gt;对象，然后访问其 &lt;code&gt;args&lt;/code&gt; 数组。使用哪个是优先选择的问题，但是除非需要使测试高度特定 &lt;code&gt;spy.calledWith(arg1, arg2, ...)&lt;/code&gt; 否则建议的方法是使用spy。称为With（arg1，arg2，...）。</target>
        </trans-unit>
        <trans-unit id="1122b7ae4595ddbf0a808808f9e00e138c9321c2" translate="yes" xml:space="preserve">
          <source>The following example is yet another test from &lt;a href=&quot;https://github.com/mroderick/pubsubjs&quot;&gt;PubSubJS&lt;/a&gt; which shows how to create an anonymous stub that throws an exception when called.</source>
          <target state="translated">下面的示例是&lt;a href=&quot;https://github.com/mroderick/pubsubjs&quot;&gt;PubSubJS的&lt;/a&gt;另一个测试，该示例显示了如何创建一个匿名存根，该存根在调用时会引发异常。</target>
        </trans-unit>
        <trans-unit id="d5c92b81842b82441e6351fba3679c8e3610bcda" translate="yes" xml:space="preserve">
          <source>The given constructor function is not invoked. See also the &lt;a href=&quot;https://sinonjs.org/releases/stubs&quot;&gt;stub API&lt;/a&gt;.</source>
          <target state="translated">给定的构造函数不会被调用。另请参见&lt;a href=&quot;https://sinonjs.org/releases/stubs&quot;&gt;存根API&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3171a0adf6865ca8d9e3dd4b5d9c6638a5c71673" translate="yes" xml:space="preserve">
          <source>The last &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;call&lt;/a&gt;</source>
          <target state="translated">最后一个&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;电话&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8f5aa135c53aefffe8df2ccadadde2c06fad685f" translate="yes" xml:space="preserve">
          <source>The method accepts an optional options object with two options.</source>
          <target state="translated">该方法接受一个有两个选项的可选选项对象。</target>
        </trans-unit>
        <trans-unit id="225392d11d9bf9e4be34bee9c15d8a0e889a01d6" translate="yes" xml:space="preserve">
          <source>The native &lt;code&gt;XMLHttpRequest&lt;/code&gt; object will be available at &lt;code&gt;sinon.xhr.XMLHttpRequest&lt;/code&gt;</source>
          <target state="translated">本机 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 对象将在 &lt;code&gt;sinon.xhr.XMLHttpRequest&lt;/code&gt; 中可用</target>
        </trans-unit>
        <trans-unit id="412e2703e6ef77dcfbd9f9c7b86df312c6d04cb8" translate="yes" xml:space="preserve">
          <source>The number of recorded &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;calls&lt;/a&gt;.</source>
          <target state="translated">记录的&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;通话&lt;/a&gt;数量。</target>
        </trans-unit>
        <trans-unit id="24d2e677bd4dae85218c84a71ee8c4eebe02806c" translate="yes" xml:space="preserve">
          <source>The original function can be restored by calling &lt;code&gt;object.method.restore();&lt;/code&gt; (or &lt;code&gt;stub.restore();&lt;/code&gt;).</source>
          <target state="translated">可以通过调用 &lt;code&gt;object.method.restore();&lt;/code&gt; 来恢复原始功能。（或 &lt;code&gt;stub.restore();&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="dea73b5943ffc2d27ce82c7850f8d76a1068cc21" translate="yes" xml:space="preserve">
          <source>The preferred approach is to use the spy&amp;rsquo;s &lt;code&gt;calledWith&lt;/code&gt; method (and friends) because it keeps your test from being too specific about which call did what and so on. It will return &lt;code&gt;true&lt;/code&gt; if the spy was ever called with the provided arguments.</source>
          <target state="translated">首选方法是使用间谍的 &lt;code&gt;calledWith&lt;/code&gt; 方法（和朋友），因为它可以防止测试过于具体地确定哪个调用执行了什么操作等等。如果曾经使用提供的参数调用过间谍，则它将返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6713d4e164305415c0f359740b6712c068578cf1" translate="yes" xml:space="preserve">
          <source>The property might be inherited via the prototype chain. If the optional expectation is given, the value of the property is deeply compared with the expectation. The expectation can be another matcher.</source>
          <target state="translated">该属性可能通过原型链继承。如果给出了可选的期望值,则属性的值与期望值进行深度比较。期望值可以是另一个匹配器。</target>
        </trans-unit>
        <trans-unit id="dd3775bb354062006b8c0563a979abfbc7f3538a" translate="yes" xml:space="preserve">
          <source>The propertyPath might be inherited via the prototype chain. If the optional expectation is given, the value at the propertyPath is deeply compared with the expectation. The expectation can be another matcher.</source>
          <target state="translated">propertyPath可能通过原型链继承。如果给定了可选的期望值,则属性Path处的值与期望值进行深度比较。期望值可以是另一个匹配器。</target>
        </trans-unit>
        <trans-unit id="91ad245b7614259a383728070796f36b7c6a8e1a" translate="yes" xml:space="preserve">
          <source>The request body</source>
          <target state="translated">请求机构</target>
        </trans-unit>
        <trans-unit id="a67fcdf45d1a505e3cb9de29d046253dee5f746c" translate="yes" xml:space="preserve">
          <source>The request method as a string.</source>
          <target state="translated">请求方法为字符串。</target>
        </trans-unit>
        <trans-unit id="ff5c216e0dad89ff854c44c57d21db15be6ff492" translate="yes" xml:space="preserve">
          <source>The request&amp;rsquo;s status code.</source>
          <target state="translated">请求的状态码。</target>
        </trans-unit>
        <trans-unit id="749019d7d06d0ad1249e6bb0d445cf9b905f70a2" translate="yes" xml:space="preserve">
          <source>The same as the above.</source>
          <target state="translated">同上。</target>
        </trans-unit>
        <trans-unit id="c0c39b5998c006748dfb74114eaf0e2ef0a0ef56" translate="yes" xml:space="preserve">
          <source>The same convenience has been added to &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;spy calls&lt;/a&gt;:</source>
          <target state="translated">相同的便利已添加到&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;间谍电话中&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="af4f690384dbf34346fe4f52c2357aef8941991f" translate="yes" xml:space="preserve">
          <source>The sandbox&amp;rsquo;s methods can be injected into another object for convenience. The &lt;code&gt;injectInto&lt;/code&gt; configuration option can name an object to add properties to.</source>
          <target state="translated">为了方便，可以将沙箱的方法注入另一个对象。该 &lt;code&gt;injectInto&lt;/code&gt; 配置选项可以命名一个对象的属性添加到。</target>
        </trans-unit>
        <trans-unit id="841334d22f85325cb5b23c3088e1da2b38c943c2" translate="yes" xml:space="preserve">
          <source>The second &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;call&lt;/a&gt;</source>
          <target state="translated">第二次&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;通话&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1153a14657accdf9bf26252e1d936189c7c68deb" translate="yes" xml:space="preserve">
          <source>The test function takes a value as the only argument, returns &lt;code&gt;true&lt;/code&gt; if the value matches the expectation and &lt;code&gt;false&lt;/code&gt; otherwise. The message string is used to generate the error message in case the value does not match the expectation.</source>
          <target state="translated">测试函数将一个值作为唯一参数，如果该值与期望值匹配，则返回 &lt;code&gt;true&lt;/code&gt; ,否则返回 &lt;code&gt;false&lt;/code&gt; 。如果该值与期望值不匹配，则该消息字符串用于生成错误消息。</target>
        </trans-unit>
        <trans-unit id="6d1c6f5b2d455799973933856988f18c2896d5c2" translate="yes" xml:space="preserve">
          <source>The third &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;call&lt;/a&gt;</source>
          <target state="translated">第三次&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;通话&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6433834eb24d4909561ec550a19c533f24b77903" translate="yes" xml:space="preserve">
          <source>The value of the given response header, if the request has been responded to (see &lt;a href=&quot;#serverrespond&quot;&gt;&lt;code&gt;respond&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">给定响应头的值（如果请求已&lt;a href=&quot;#serverrespond&quot;&gt; &lt;code&gt;respond&lt;/code&gt; &lt;/a&gt;）（请参见response ）。</target>
        </trans-unit>
        <trans-unit id="b16d3283fd359b84408cb213d8cc4bf011a619b3" translate="yes" xml:space="preserve">
          <source>There are methods &lt;code&gt;onFirstCall&lt;/code&gt;, &lt;code&gt;onSecondCall&lt;/code&gt;,&lt;code&gt;onThirdCall&lt;/code&gt; to make stub definitions read more naturally.</source>
          <target state="translated">有一些方法 &lt;code&gt;onFirstCall&lt;/code&gt; ， &lt;code&gt;onSecondCall&lt;/code&gt; ， &lt;code&gt;onThirdCall&lt;/code&gt; 使存根定义更自然地读取。</target>
        </trans-unit>
        <trans-unit id="1e62df8e038368ea6ffee604034d623620d4720d" translate="yes" xml:space="preserve">
          <source>There is no sufficiently unobtrusive way to fake this automatically. The best option is to simply stub jQuery in this case:</source>
          <target state="translated">没有足够不显眼的方法来自动伪造这个。最好的选择是在这种情况下,简单地用jQuery来代替。</target>
        </trans-unit>
        <trans-unit id="9e44121c02fc4b0a296883230451e2c4249c56c2" translate="yes" xml:space="preserve">
          <source>There should not be any issues with using Sinon &lt;code&gt;v7.1.1&lt;/code&gt; in newer versions of the same runtimes.</source>
          <target state="translated">在相同运行时的较新版本中使用Sinon &lt;code&gt;v7.1.1&lt;/code&gt; 应该不会有任何问题。</target>
        </trans-unit>
        <trans-unit id="ea5ddc6aaa7abd92d620ff228337654ecc416bfd" translate="yes" xml:space="preserve">
          <source>These docs are from an older version of sinon. Do you want the &lt;a href=&quot;https://sinonjs.org/releases/latest/&quot;&gt;latest&lt;/a&gt; docs?</source>
          <target state="translated">这些文档来自旧版本的sinon。您是否需要&lt;a href=&quot;https://sinonjs.org/releases/latest/&quot;&gt;最新的&lt;/a&gt;文档？</target>
        </trans-unit>
        <trans-unit id="d3dbca4c91ec511290c215e78a2aacc9334b1344" translate="yes" xml:space="preserve">
          <source>These options are properties on the server object and can be set directly</source>
          <target state="translated">这些选项是服务器对象上的属性,可以直接设置为</target>
        </trans-unit>
        <trans-unit id="3abf1c0a4f94821dd5c1534ab8edb6ad3a81c1c1" translate="yes" xml:space="preserve">
          <source>They support the full &lt;a href=&quot;https://sinonjs.org/releases/spies&quot;&gt;test spy API&lt;/a&gt; in addition to methods which can be used to alter the stub&amp;rsquo;s behavior.</source>
          <target state="translated">除了可以用来更改存根行为的方法之外，它们还支持完整的&lt;a href=&quot;https://sinonjs.org/releases/spies&quot;&gt;测试间谍API&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a462d0a27cd3ab5a0bac6a85d9674288b1604330" translate="yes" xml:space="preserve">
          <source>This behaves the same as &lt;code&gt;spy.alwaysCalledWith(sinon.match(arg1), sinon.match(arg2), ...)&lt;/code&gt;.</source>
          <target state="translated">此行为与 &lt;code&gt;spy.alwaysCalledWith(sinon.match(arg1), sinon.match(arg2), ...)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8b85df3f1dce31f8634f1f4a1d5e5041f1b8b6c5" translate="yes" xml:space="preserve">
          <source>This behaves the same as &lt;code&gt;spy.calledWith(sinon.match(arg1), sinon.match(arg2), ...)&lt;/code&gt;.</source>
          <target state="translated">此行为与 &lt;code&gt;spy.calledWith(sinon.match(arg1), sinon.match(arg2), ...)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f72a191bdaf0b777353fef1dfcf207f83100a9ba" translate="yes" xml:space="preserve">
          <source>This behaves the same as &lt;code&gt;spy.neverCalledWith(sinon.match(arg1), sinon.match(arg2), ...)&lt;/code&gt;.</source>
          <target state="translated">行为与 &lt;code&gt;spy.neverCalledWith(sinon.match(arg1), sinon.match(arg2), ...)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3db20893a2b1a3e8e10074c21b8c9869a5d166f1" translate="yes" xml:space="preserve">
          <source>This behaves the same way as &lt;code&gt;sinon.assert.alwaysCalledWith(spy, sinon.match(arg1), sinon.match(arg2), ...)&lt;/code&gt;.</source>
          <target state="translated">这种行为与 &lt;code&gt;sinon.assert.alwaysCalledWith(spy, sinon.match(arg1), sinon.match(arg2), ...)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f839d90095a58172437798d902705c3ebfdc8164" translate="yes" xml:space="preserve">
          <source>This behaves the same way as &lt;code&gt;sinon.assert.calledWith(spy, sinon.match(arg1), sinon.match(arg2), ...)&lt;/code&gt;.</source>
          <target state="translated">这与 &lt;code&gt;sinon.assert.calledWith(spy, sinon.match(arg1), sinon.match(arg2), ...)&lt;/code&gt; 行为相同。</target>
        </trans-unit>
        <trans-unit id="818f409b7ca0e38682bd0c9178849f88081f9286" translate="yes" xml:space="preserve">
          <source>This behaves the same way as &lt;code&gt;sinon.assert.neverCalledWith(spy, sinon.match(arg1), sinon.match(arg2), ...)&lt;/code&gt;.</source>
          <target state="translated">行为与 &lt;code&gt;sinon.assert.neverCalledWith(spy, sinon.match(arg1), sinon.match(arg2), ...)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8cc82ecad24cfbd740a835508eb396f8518461c5" translate="yes" xml:space="preserve">
          <source>This function also calls &lt;code&gt;sinon.useFakeXMLHttpRequest()&lt;/code&gt;.</source>
          <target state="translated">该函数还调用 &lt;code&gt;sinon.useFakeXMLHttpRequest()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="40ba03a5e71c827eb9c055a862805a6ab63f7536" translate="yes" xml:space="preserve">
          <source>This has been removed from &lt;code&gt;v3.0.0&lt;/code&gt;. Instead you should use</source>
          <target state="translated">这已从 &lt;code&gt;v3.0.0&lt;/code&gt; 中删除。相反，您应该使用</target>
        </trans-unit>
        <trans-unit id="6b280832b02ca492561640997dc3159ccf9c3f69" translate="yes" xml:space="preserve">
          <source>This is equivalent to calling both &lt;code&gt;stub.resetBehavior()&lt;/code&gt; and &lt;code&gt;stub.resetHistory()&lt;/code&gt;</source>
          <target state="translated">这等同于调用 &lt;code&gt;stub.resetBehavior()&lt;/code&gt; 和 &lt;code&gt;stub.resetHistory()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73b3a68dbc6eaea57364a1b0a9d1a811798308f4" translate="yes" xml:space="preserve">
          <source>This is ideal for faking the server from within a test without having to call &lt;code&gt;server.respond()&lt;/code&gt; after each request made in that test.</source>
          <target state="translated">这是从测试中伪造服务器而不必在该测试中发出的每个请求之后都调用 &lt;code&gt;server.respond()&lt;/code&gt; 的理想选择。</target>
        </trans-unit>
        <trans-unit id="5801dd9435d19e85ea5e9f9e8f507b0f4f7337a5" translate="yes" xml:space="preserve">
          <source>This is useful to be more expressive in your assertions, where you can access the spy with the same call. It is also useful to create a stub that can act differently in response to different arguments.</source>
          <target state="translated">这对于在你的论断中更有表现力是很有用的,你可以用同一个调用来访问spy。创建一个能对不同参数做出不同反应的存根也很有用。</target>
        </trans-unit>
        <trans-unit id="a6269c6fb28570ab70630bf7415917294dcb4c9c" translate="yes" xml:space="preserve">
          <source>This is useful when complex behavior not covered by the &lt;code&gt;sinon.fake.*&lt;/code&gt; methods is required or when wrapping an existing function or method.</source>
          <target state="translated">当需要 &lt;code&gt;sinon.fake.*&lt;/code&gt; 方法未涵盖的复杂行为或包装现有函数或方法时，此功能很有用。</target>
        </trans-unit>
        <trans-unit id="d98f79d0a97df49fb7c78ab44eab726096fc5508" translate="yes" xml:space="preserve">
          <source>This is useful when testing &lt;code&gt;XHR&lt;/code&gt; objects created with e.g. jQuery 1.3.x, which uses a timer to poll the object for completion, rather than the usual &lt;code&gt;onreadystatechange&lt;/code&gt;.</source>
          <target state="translated">当测试用jQuery 1.3.x创建的 &lt;code&gt;XHR&lt;/code&gt; 对象时，这很有用，该对象使用计时器轮询对象是否完成，而不是通常的 &lt;code&gt;onreadystatechange&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2366c2a30ac680527eb2f2559ce94c93859fe60d" translate="yes" xml:space="preserve">
          <source>This makes it easier to run asynchronous tests to completion without worrying about the number of timers they use, or the delays in those timers.</source>
          <target state="translated">这使得异步测试更容易运行到完成,而不用担心它们使用的定时器数量,或者这些定时器的延迟。</target>
        </trans-unit>
        <trans-unit id="0542b93613ec98fead7bf0aa1214e618d6706843" translate="yes" xml:space="preserve">
          <source>This method can be overridden to provide custom behavior.</source>
          <target state="translated">该方法可以被重写以提供自定义行为。</target>
        </trans-unit>
        <trans-unit id="f3bfd37d08f6730ea03209a47e299c146ddf37b9" translate="yes" xml:space="preserve">
          <source>This method only works on non-accessor properties, for replacing accessors, use &lt;code&gt;sandbox.replaceGetter()&lt;/code&gt; and &lt;code&gt;sandbox.replaceSetter()&lt;/code&gt;.</source>
          <target state="translated">此方法仅适用于非访问者属性，要替换访问者，请使用 &lt;code&gt;sandbox.replaceGetter()&lt;/code&gt; 和 &lt;code&gt;sandbox.replaceSetter()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4680d3d68cd07feae502bfd158af35810f9e7767" translate="yes" xml:space="preserve">
          <source>This page contains the entire Sinon.JS API documentation along with brief introductions to the concepts Sinon implements.</source>
          <target state="translated">本页包含了整个Sinon.JS API文档以及Sinon实现的概念的简要介绍。</target>
        </trans-unit>
        <trans-unit id="f31baa5c259c59e86f12feed45997b16cea5321e" translate="yes" xml:space="preserve">
          <source>This property is a convenience for a call&amp;rsquo;s callback.</source>
          <target state="translated">此属性为调用的回调提供了便利。</target>
        </trans-unit>
        <trans-unit id="ad0b072483f8324098392da2c52d2044ba483abf" translate="yes" xml:space="preserve">
          <source>This property is a convenience for the last argument of the call.</source>
          <target state="translated">这个属性是为了方便调用的最后一个参数。</target>
        </trans-unit>
        <trans-unit id="6bfad0888c2c6519d067807e0a9462e822f68f35" translate="yes" xml:space="preserve">
          <source>This property is a convenience to easily get a reference to the last callback passed in the last to the fake.</source>
          <target state="translated">这个属性是一个方便的属性,可以方便地获取最后传递给假造的回调的引用。</target>
        </trans-unit>
        <trans-unit id="0bdec1b4c90f90dd40a8422b7fa19a86568002c3" translate="yes" xml:space="preserve">
          <source>This property is a convenient way to get a reference to the last argument passed in the last call to the fake.</source>
          <target state="translated">这个属性是一种方便的方式,可以获取上一次调用fake时传递的最后一个参数的引用。</target>
        </trans-unit>
        <trans-unit id="718f45ebbcd565cb5678240a82000d1ac7b78245" translate="yes" xml:space="preserve">
          <source>This runs all pending timers until there are none remaining. If new timers are added while it is executing they will be run as well.</source>
          <target state="translated">这将运行所有待定的定时器,直到没有剩余的定时器。如果在执行过程中增加了新的定时器,它们也将被运行。</target>
        </trans-unit>
        <trans-unit id="1aea0dabfced1c2de609a8d28db3a6d747488161" translate="yes" xml:space="preserve">
          <source>This supports nested matchers.</source>
          <target state="translated">这支持嵌套的匹配器。</target>
        </trans-unit>
        <trans-unit id="8bc350c13ddefc90f01b9d6ba73302c476acf93e" translate="yes" xml:space="preserve">
          <source>This will give you &lt;code&gt;assertCalled(spy)&lt;/code&gt;,&lt;code&gt;assertCallOrder(spy1, spy2, ...)&lt;/code&gt; and so on.</source>
          <target state="translated">这将为您提供 &lt;code&gt;assertCalled(spy)&lt;/code&gt; ， &lt;code&gt;assertCallOrder(spy1, spy2, ...)&lt;/code&gt; 等。</target>
        </trans-unit>
        <trans-unit id="c65c79e147b1cad7bd48560fc64d716f1ed71506" translate="yes" xml:space="preserve">
          <source>Thus, they enforce implementation details. The rule of thumb is: if you wouldn&amp;rsquo;t add an assertion for some specific call, don&amp;rsquo;t mock it. Use a stub instead.</source>
          <target state="translated">因此，他们强制实施细节。经验法则是：如果您不为某个特定的调用添加断言，请不要嘲笑它。请改用存根。</target>
        </trans-unit>
        <trans-unit id="5b280b1f120511627679517a53b616d633912289" translate="yes" xml:space="preserve">
          <source>Tick the clock ahead &lt;code&gt;time&lt;/code&gt; milliseconds.</source>
          <target state="translated">勾选时钟提前 &lt;code&gt;time&lt;/code&gt; 毫秒。</target>
        </trans-unit>
        <trans-unit id="5b43e9063daf1319062ec2655759d3ed7eea1515" translate="yes" xml:space="preserve">
          <source>To get a full sandbox with stubs, spies, etc. &lt;strong&gt;and&lt;/strong&gt; fake timers and servers, you can call:</source>
          <target state="translated">要获得包含存根，间谍等&lt;strong&gt;以及&lt;/strong&gt;伪造的计时器和服务器的完整沙箱，可以致电：</target>
        </trans-unit>
        <trans-unit id="6cc6d35ec409f941fbba745b1f8221f183afa97e" translate="yes" xml:space="preserve">
          <source>To make sure assertions integrate nicely with your test framework, you should customize either &lt;code&gt;sinon.assert.fail&lt;/code&gt; or &lt;code&gt;sinon.assert.failException&lt;/code&gt; and look into &lt;code&gt;sinon.assert.expose&lt;/code&gt; and &lt;code&gt;sinon.assert.pass&lt;/code&gt;.</source>
          <target state="translated">为了确保断言与您的测试框架很好地集成在一起，您应该自定义 &lt;code&gt;sinon.assert.fail&lt;/code&gt; 或 &lt;code&gt;sinon.assert.failException&lt;/code&gt; 并查看 &lt;code&gt;sinon.assert.expose&lt;/code&gt; 和 &lt;code&gt;sinon.assert.pass&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b8a46be4356912f0440fd78a7b4cadcb40ba9feb" translate="yes" xml:space="preserve">
          <source>To replace a property, you can use the &lt;a href=&quot;https://sinonjs.org/releases/sandbox/#sandboxreplaceobject-property-replacement&quot;&gt;&lt;code&gt;sinon.replace&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">要替换属性，可以使用&lt;a href=&quot;https://sinonjs.org/releases/sandbox/#sandboxreplaceobject-property-replacement&quot;&gt; &lt;code&gt;sinon.replace&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="ea08590b1413fdd6801b29f34d2681bdd8a2ca1c" translate="yes" xml:space="preserve">
          <source>To see what mocks look like in Sinon.JS, here is one of the &lt;a href=&quot;https://github.com/mroderick/pubsubjs&quot;&gt;PubSubJS&lt;/a&gt; tests again, this time using a method as callback and using mocks to verify its behavior</source>
          <target state="translated">若要查看Sinn.JS中的模拟，这里再次是其中的一个&lt;a href=&quot;https://github.com/mroderick/pubsubjs&quot;&gt;PubSubJS&lt;/a&gt;测试，这次使用一种方法作为回调并使用模拟来验证其行为</target>
        </trans-unit>
        <trans-unit id="9f433de3a09f2cf5cd13a827c57725457d725e39" translate="yes" xml:space="preserve">
          <source>Typical usage:</source>
          <target state="translated">典型用途:</target>
        </trans-unit>
        <trans-unit id="7846a1f6111923ec2c1631605f9a56b72141e338" translate="yes" xml:space="preserve">
          <source>URL may be a regular expression, e.g. &lt;code&gt;/\\/post\\//\\d+&lt;/code&gt;</source>
          <target state="translated">URL可以是正则表达式，例如 &lt;code&gt;/\\/post\\//\\d+&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="efa284bde4171878e4681e80874029a4b46c7f9c" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;https://sinonjs.org/releases/spies&quot;&gt;&lt;code&gt;sinon.spy&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://sinonjs.org/releases/stubs&quot;&gt;&lt;code&gt;sinon.stub&lt;/code&gt;&lt;/a&gt; methods, the &lt;code&gt;sinon.fake&lt;/code&gt; API knows only how to create fakes, and doesn&amp;rsquo;t concern itself with plugging them into the system under test. To plug the fakes into the system under test, you can use the &lt;a href=&quot;https://sinonjs.org/releases/sandbox#sandboxreplaceobject-property-replacement&quot;&gt;&lt;code&gt;sinon.replace*&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">与&lt;a href=&quot;https://sinonjs.org/releases/spies&quot;&gt; &lt;code&gt;sinon.spy&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://sinonjs.org/releases/stubs&quot;&gt; &lt;code&gt;sinon.stub&lt;/code&gt; &lt;/a&gt;方法不同， &lt;code&gt;sinon.fake&lt;/code&gt; API仅知道如何创建伪造品，并且与将其插入被测系统无关。要将伪造品插入被测系统，可以使用&lt;a href=&quot;https://sinonjs.org/releases/sandbox#sandboxreplaceobject-property-replacement&quot;&gt; &lt;code&gt;sinon.replace*&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="0dc5ef8f7570c7438f9294c377bf98fe6cbcf367" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;sinon.spy&lt;/code&gt; and &lt;code&gt;sinon.stub&lt;/code&gt;, &lt;code&gt;sinon.fake&lt;/code&gt; only knows about creating fakes, not about replacing properties in the system under test.</source>
          <target state="translated">与 &lt;code&gt;sinon.spy&lt;/code&gt; 和 &lt;code&gt;sinon.stub&lt;/code&gt; 不同， &lt;code&gt;sinon.fake&lt;/code&gt; 只知道创建伪造品，而不是替换被测系统中的属性。</target>
        </trans-unit>
        <trans-unit id="249503c0206c5e9818aa944b35739e7aa512f675" translate="yes" xml:space="preserve">
          <source>Use a stub when you want to:</source>
          <target state="translated">想用存根的时候就用存根。</target>
        </trans-unit>
        <trans-unit id="632ec85c70c47597b5a41e5f8e9b56da60ba388b" translate="yes" xml:space="preserve">
          <source>Used internally to determine the HTTP method used with the provided request.</source>
          <target state="translated">在内部用于确定所提供的请求所使用的HTTP方法。</target>
        </trans-unit>
        <trans-unit id="9db8998a8aa96e834da21f1391c27f46956443e8" translate="yes" xml:space="preserve">
          <source>Useful for stubbing jQuery-style fluent APIs.</source>
          <target state="translated">有用的存根jQuery风格的fluent APIs。</target>
        </trans-unit>
        <trans-unit id="cebda387550d94d5f3a554bcd6281a268124680e" translate="yes" xml:space="preserve">
          <source>Useful if a function is called with more than one callback, and simply calling the first callback is not desired.</source>
          <target state="translated">如果一个函数被调用时有多个回调,而不需要简单地调用第一个回调,则很有用。</target>
        </trans-unit>
        <trans-unit id="46973d57aa5c017a9928f348177720341dd824da" translate="yes" xml:space="preserve">
          <source>Username, if any.</source>
          <target state="translated">用户名,如果有的话。</target>
        </trans-unit>
        <trans-unit id="f3105f228c2054345457a9fe8962292de27f9c04" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;https://sinonjs.org/releases/matchers&quot;&gt;&lt;code&gt;sinon.match&lt;/code&gt;&lt;/a&gt; to test if the arguments can be considered a match.</source>
          <target state="translated">使用&lt;a href=&quot;https://sinonjs.org/releases/matchers&quot;&gt; &lt;code&gt;sinon.match&lt;/code&gt; &lt;/a&gt;测试参数是否可以视为匹配项。</target>
        </trans-unit>
        <trans-unit id="2ed4aea0a154ad263361c1624f58c262bdf8c521" translate="yes" xml:space="preserve">
          <source>Uses deep comparison for objects and arrays. Use &lt;code&gt;spy.returned(sinon.match.same(obj))&lt;/code&gt; for strict comparison (see &lt;a href=&quot;matchers&quot;&gt;matchers&lt;/a&gt;).</source>
          <target state="translated">对对象和数组使用深度比较。使用 &lt;code&gt;spy.returned(sinon.match.same(obj))&lt;/code&gt; 进行严格比较（请参阅&lt;a href=&quot;matchers&quot;&gt;matchers&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="3f07e1fc0fa2370f1352cd88a2ca8263c2f2cbd3" translate="yes" xml:space="preserve">
          <source>Uses deep comparison for objects and arrays. Use &lt;code&gt;spyCall.returned(sinon.match.same(obj))&lt;/code&gt; for strict comparison (see &lt;a href=&quot;matchers&quot;&gt;matchers&lt;/a&gt;).</source>
          <target state="translated">对对象和数组使用深度比较。使用 &lt;code&gt;spyCall.returned(sinon.match.same(obj))&lt;/code&gt; 进行严格比较（请参阅&lt;a href=&quot;matchers&quot;&gt;matchers&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="cb9d1d9db94a01b75b0246d3f149f964def1a110" translate="yes" xml:space="preserve">
          <source>Using a spy to wrap an existing method</source>
          <target state="translated">使用间谍来包装一个现有的方法。</target>
        </trans-unit>
        <trans-unit id="72e0aa35be518488a22f163f5784a5286e38c737" translate="yes" xml:space="preserve">
          <source>Using this observer means you can still reach objects created by e.g. &lt;code&gt;jQuery.ajax&lt;/code&gt; (or other abstractions/frameworks).</source>
          <target state="translated">使用该观察器意味着您仍然可以访问由 &lt;code&gt;jQuery.ajax&lt;/code&gt; （或其他抽象/框架）创建的对象。</target>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="24a271451e65e20717de9aee72e172c4a79d419b" translate="yes" xml:space="preserve">
          <source>Utils</source>
          <target state="translated">Utils</target>
        </trans-unit>
        <trans-unit id="e0e25fbbf682bd72e090271c320a29aa89b0a8e3" translate="yes" xml:space="preserve">
          <source>Utils API</source>
          <target state="translated">利用API</target>
        </trans-unit>
        <trans-unit id="3e70a352b97bd2b9abc157230679280bbbd4782e" translate="yes" xml:space="preserve">
          <source>Verifies all expectations on the mock.</source>
          <target state="translated">验证模拟上的所有期望。</target>
        </trans-unit>
        <trans-unit id="7eeb58efe43d565c6799a2a47c4271962ac523e2" translate="yes" xml:space="preserve">
          <source>Verifies all mocks and restores all fakes created through the sandbox.</source>
          <target state="translated">验证所有的嘲讽,并恢复所有通过沙盒创建的假货。</target>
        </trans-unit>
        <trans-unit id="2961b399f2082a71d503ca92abadcda49282688b" translate="yes" xml:space="preserve">
          <source>Verifies all mocks created through the sandbox.</source>
          <target state="translated">验证所有通过沙盒创建的模拟。</target>
        </trans-unit>
        <trans-unit id="772d8e2d3a5b37011b90297e25fc1f745be34767" translate="yes" xml:space="preserve">
          <source>Verifies the expectation and throws an exception if it&amp;rsquo;s not met.</source>
          <target state="translated">验证期望，如果未达到期望，则引发异常。</target>
        </trans-unit>
        <trans-unit id="f932c58039c067fcabc42cce8928555058eb1528" translate="yes" xml:space="preserve">
          <source>We could potentially have had the fake server detect &lt;code&gt;jQuery&lt;/code&gt; and fake any calls to &lt;code&gt;jQuery.ajax&lt;/code&gt; when JSON-P is used, but that felt like a compromise in the focus of the Sinon project compared to simply documenting the above practice.</source>
          <target state="translated">当使用JSON-P时，我们可能已经使伪造的服务器检测到 &lt;code&gt;jQuery&lt;/code&gt; 并伪造了对 &lt;code&gt;jQuery.ajax&lt;/code&gt; 的任何调用，但是与仅记录上述实践相比，Sinon项目的重点是妥协。</target>
        </trans-unit>
        <trans-unit id="540e72d256f2bdceef69b994b7280240dc0c3a78" translate="yes" xml:space="preserve">
          <source>We really appreciate suggestions to improve the documentation so Sinon.JS can be easy to work with. Get in touch!</source>
          <target state="translated">我们非常感谢您对Sinon.JS文档的改进建议,这样Sinon.JS就可以很容易的使用。请与我们联系</target>
        </trans-unit>
        <trans-unit id="8af2701239d740e6435dae63ea412f9809c71f07" translate="yes" xml:space="preserve">
          <source>We will be making fakes, spies and stubs. By default these are created in the &lt;em&gt;default sandbox&lt;/em&gt;. Be sure to &lt;code&gt;restore&lt;/code&gt; this sandbox after each test.</source>
          <target state="translated">我们将制造假货，间谍和存根。默认情况下，它们是在&lt;em&gt;默认沙箱&lt;/em&gt;中创建的。确保在每次测试后 &lt;code&gt;restore&lt;/code&gt; 此沙箱。</target>
        </trans-unit>
        <trans-unit id="638a2c282752a60f686c25b34200fa81444237ed" translate="yes" xml:space="preserve">
          <source>What are mocks?</source>
          <target state="translated">什么是嘲讽?</target>
        </trans-unit>
        <trans-unit id="835795ce10a5d17c03b32a07816d29ffda99f5ff" translate="yes" xml:space="preserve">
          <source>What are stubs?</source>
          <target state="translated">什么是存根?</target>
        </trans-unit>
        <trans-unit id="278517b15daa5cd9a9363dec5a6dfe5ded025c0f" translate="yes" xml:space="preserve">
          <source>What is a test spy?</source>
          <target state="translated">什么是测试间谍?</target>
        </trans-unit>
        <trans-unit id="d3d38f50c6d899fac3e304e6bc413d00ffb993b2" translate="yes" xml:space="preserve">
          <source>What properties to inject. Note that simply naming &amp;ldquo;server&amp;rdquo; here is not sufficient to have a &lt;code&gt;server&lt;/code&gt; property show up in the target object, you also have to set &lt;code&gt;useFakeServer&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">注入什么属性。请注意，仅在此处命名&amp;ldquo;服务器&amp;rdquo;不足以在目标对象中显示 &lt;code&gt;server&lt;/code&gt; 属性，还必须将 &lt;code&gt;useFakeServer&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48a2e9c187340aaedd3433d2e5497271e5b26aca" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;autoRespond&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, respond to requests after this number of milliseconds. Default is 10.</source>
          <target state="translated">如果 &lt;code&gt;autoRespond&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则在此毫秒数后响应请求。默认值为10。</target>
        </trans-unit>
        <trans-unit id="121c0cb91083a37539e6386d94e0f5a43f20eb8e" translate="yes" xml:space="preserve">
          <source>When constructing the Promise, sinon uses the &lt;code&gt;Promise.reject&lt;/code&gt; method. You are responsible for providing a polyfill in environments which do not provide &lt;code&gt;Promise&lt;/code&gt;. The Promise library can be overwritten using the &lt;code&gt;usingPromise&lt;/code&gt; method.</source>
          <target state="translated">构造Promise时，sinon使用 &lt;code&gt;Promise.reject&lt;/code&gt; 方法。您有责任在不提供 &lt;code&gt;Promise&lt;/code&gt; 的环境中提供polyfill。可以使用 &lt;code&gt;usingPromise&lt;/code&gt; 方法覆盖Promise库。</target>
        </trans-unit>
        <trans-unit id="6bcc2af81e5de8433bffc132f7411f9a935a7da2" translate="yes" xml:space="preserve">
          <source>When constructing the Promise, sinon uses the &lt;code&gt;Promise.resolve&lt;/code&gt; method. You are responsible for providing a polyfill in environments which do not provide &lt;code&gt;Promise&lt;/code&gt;. The Promise library can be overwritten using the &lt;code&gt;usingPromise&lt;/code&gt; method.</source>
          <target state="translated">构造Promise时，sinon使用 &lt;code&gt;Promise.resolve&lt;/code&gt; 方法。您有责任在不提供 &lt;code&gt;Promise&lt;/code&gt; 的环境中提供polyfill。可以使用 &lt;code&gt;usingPromise&lt;/code&gt; 方法覆盖Promise库。</target>
        </trans-unit>
        <trans-unit id="6ce8a28d804cfba25720a4145ea6a93e34b5637f" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;true&lt;/code&gt;, Sinon will check added filters if certain requests should be &amp;ldquo;unfaked&amp;rdquo;</source>
          <target state="translated">设置为 &lt;code&gt;true&lt;/code&gt; 时，Sinan将检查是否应&amp;ldquo;取消伪造&amp;rdquo;某些请求的已添加过滤器</target>
        </trans-unit>
        <trans-unit id="f0a84669846761c4965773a0990912d6821e8bc0" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;true&lt;/code&gt;, causes the server to automatically respond to incoming requests after a timeout.</source>
          <target state="translated">设置为 &lt;code&gt;true&lt;/code&gt; 时，导致服务器在超时后自动响应传入的请求。</target>
        </trans-unit>
        <trans-unit id="d1956f7de7b6509edab649024780096658db6367" translate="yes" xml:space="preserve">
          <source>When the behavior of the spied-on function is not under test, you can use an anonymous function spy. The spy won&amp;rsquo;t do anything except record information about its &lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;calls&lt;/a&gt;. A common use case for this type of spy is testing how a function handles a callback, as in the following simplified example:</source>
          <target state="translated">如果未测试spied-on函数的行为，则可以使用匿名函数spy。间谍除了记录有关其&lt;a href=&quot;https://sinonjs.org/releases/spy-call&quot;&gt;通话的&lt;/a&gt;信息外什么都不会做。此类间谍的一个常见用例是测试函数如何处理回调，如以下简化示例所示：</target>
        </trans-unit>
        <trans-unit id="6e77deec015a6ee6354bdffe9d5925f20bad7987" translate="yes" xml:space="preserve">
          <source>When the last argument in a call is a &lt;code&gt;Function&lt;/code&gt;, then &lt;code&gt;callback&lt;/code&gt; will reference that. Otherwise it will be &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">当调用中的最后一个参数是 &lt;code&gt;Function&lt;/code&gt; 时，则 &lt;code&gt;callback&lt;/code&gt; 将引用该函数。否则它将是 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ae267b778c2f3bf2a14037e9cd9c5fd71323def" translate="yes" xml:space="preserve">
          <source>When the response is a &lt;code&gt;Function&lt;/code&gt;, it will be passed the request object. You must manually call &lt;a href=&quot;#serverrespond&quot;&gt;respond&lt;/a&gt; on it to complete the request.</source>
          <target state="translated">当响应为 &lt;code&gt;Function&lt;/code&gt; 时，它将被传递给请求对象。你必须手动调用&lt;a href=&quot;#serverrespond&quot;&gt;响应&lt;/a&gt;它来完成请求。</target>
        </trans-unit>
        <trans-unit id="8d8a26903fee2fb53919f8a35608beeb7dc5cc54" translate="yes" xml:space="preserve">
          <source>When to &lt;strong&gt;not&lt;/strong&gt; use mocks?</source>
          <target state="translated">什么时候&lt;strong&gt;不&lt;/strong&gt;使用模拟？</target>
        </trans-unit>
        <trans-unit id="b1c9dd9cdbfe2609ca2fde10fc03d9b303f39b0c" translate="yes" xml:space="preserve">
          <source>When to use mocks?</source>
          <target state="translated">什么时候使用模拟?</target>
        </trans-unit>
        <trans-unit id="c8fea409b4fbc241edc888c8b1580de5db235e46" translate="yes" xml:space="preserve">
          <source>When to use stubs?</source>
          <target state="translated">什么时候使用存根?</target>
        </trans-unit>
        <trans-unit id="cc726068e44926722c15ae3bff5329fc63ea5b20" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;#serverrespond&quot;&gt;&lt;code&gt;respond&lt;/code&gt;&lt;/a&gt;, this property is populated with a parsed document if response headers indicate as much (see &lt;a href=&quot;http://www.w3.org/TR/XMLHttpRequest/&quot;&gt;the spec&lt;/a&gt;)</source>
          <target state="translated">当使用&lt;a href=&quot;#serverrespond&quot;&gt; &lt;code&gt;respond&lt;/code&gt; &lt;/a&gt;，这个属性与解析的文件，如果填充响应头表明之多（见&lt;a href=&quot;http://www.w3.org/TR/XMLHttpRequest/&quot;&gt;规范&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="e07a84dee4d2bdc4a15be0f3d8ed9d514d91152d" translate="yes" xml:space="preserve">
          <source>When using Sinon.JS for mockups or partial integration/functional testing, you might want to fake some requests, while allowing others to go through to the backend server. With filtered &lt;code&gt;FakeXMLHttpRequest&lt;/code&gt;s (new in v1.3.0), you can.</source>
          <target state="translated">当使用Sinon.JS进行模型或部分集成/功能测试时，您可能希望伪造一些请求，同时允许其他请求通过后端服务器。使用过滤的 &lt;code&gt;FakeXMLHttpRequest&lt;/code&gt; （v1.3.0中的新增功能），您可以。</target>
        </trans-unit>
        <trans-unit id="c246fc64c1c600e386b91b4155756ebc36834b2d" translate="yes" xml:space="preserve">
          <source>When you want to prevent a specific method from being called directly (possibly because it triggers undesired behavior, such as a &lt;code&gt;XMLHttpRequest&lt;/code&gt; or similar).</source>
          <target state="translated">当您想要防止直接调用特定方法时（可能是因为它触发了不希望的行为，例如 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 或类似方法）。</target>
        </trans-unit>
        <trans-unit id="6ce5bf5c331b6ad0547f8cbed562c9eb24ffe896" translate="yes" xml:space="preserve">
          <source>When you want to restore the replaced properties, simply call the &lt;code&gt;sinon.restore&lt;/code&gt; method.</source>
          <target state="translated">当您要还原替换的属性时，只需调用 &lt;code&gt;sinon.restore&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="56b05ac529dd81c81e2c06fb264f206361cff2f1" translate="yes" xml:space="preserve">
          <source>Whether or not the request is asynchronous.</source>
          <target state="translated">是否为异步请求。</target>
        </trans-unit>
        <trans-unit id="ff132e83e9d1965d9919e1fd98137d8efd3af45d" translate="yes" xml:space="preserve">
          <source>Works almost exactly like &lt;code&gt;sinon.createStubInstance&lt;/code&gt;, only also adds the returned stubs to the internal collection of fakes for easy restoring through &lt;code&gt;sandbox.restore()&lt;/code&gt;.</source>
          <target state="translated">几乎与 &lt;code&gt;sinon.createStubInstance&lt;/code&gt; 完全一样地工作，也仅将返回的存根添加到内部伪造品集合中，以便于通过 &lt;code&gt;sandbox.restore()&lt;/code&gt; 轻松还原。</target>
        </trans-unit>
        <trans-unit id="04dae3434dea53dd23df028b748876651dda796f" translate="yes" xml:space="preserve">
          <source>Works exactly like &lt;code&gt;sinon.mock&lt;/code&gt;</source>
          <target state="translated">就像 &lt;code&gt;sinon.mock&lt;/code&gt; 一样工作</target>
        </trans-unit>
        <trans-unit id="1a47c3e7b10bb30ffb1083d7b8d99c5ccb8341b4" translate="yes" xml:space="preserve">
          <source>Works exactly like &lt;code&gt;sinon.spy&lt;/code&gt;</source>
          <target state="translated">完全像 &lt;code&gt;sinon.spy&lt;/code&gt; 一样工作</target>
        </trans-unit>
        <trans-unit id="c599e4623516d2b44316181f1141f4bea45872ac" translate="yes" xml:space="preserve">
          <source>Works exactly like &lt;code&gt;sinon.stub&lt;/code&gt;.</source>
          <target state="translated">完全像 &lt;code&gt;sinon.stub&lt;/code&gt; 一样工作。</target>
        </trans-unit>
        <trans-unit id="bd8336bf0dd6d6c9a419be5020f10bd5b15d8489" translate="yes" xml:space="preserve">
          <source>Wraps an existing &lt;code&gt;Function&lt;/code&gt; to record all interactions, while leaving it up to the &lt;code&gt;func&lt;/code&gt; to provide the behavior.</source>
          <target state="translated">包装一个现有 &lt;code&gt;Function&lt;/code&gt; 以记录所有交互，同时将其 &lt;code&gt;func&lt;/code&gt; 提供行为。</target>
        </trans-unit>
        <trans-unit id="3b36adf662a1984e44715730829018fd3774b429" translate="yes" xml:space="preserve">
          <source>You can also pass in a Date object, and its &lt;code&gt;getTime()&lt;/code&gt; will be used for the starting timestamp.</source>
          <target state="translated">您还可以传入Date对象，其 &lt;code&gt;getTime()&lt;/code&gt; 将用于开始时间戳。</target>
        </trans-unit>
        <trans-unit id="14becf64bf117809624e65c1c1a0eafe08509c83" translate="yes" xml:space="preserve">
          <source>You can also pass options with an object literal to &lt;code&gt;createFakeServer&lt;/code&gt; and &lt;code&gt;.configure&lt;/code&gt;.</source>
          <target state="translated">您还可以将带有对象文字的选项传递给 &lt;code&gt;createFakeServer&lt;/code&gt; 和 &lt;code&gt;.configure&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ab7776c84a68ceaa1191c7b1d7a38941b9224de" translate="yes" xml:space="preserve">
          <source>You can inspect the &lt;code&gt;server.requests&lt;/code&gt; to verify request ordering, find unmatched requests or check that no requests has been done. &lt;code&gt;server.requests&lt;/code&gt; is an array of all the &lt;code&gt;FakeXMLHttpRequest&lt;/code&gt; objects that have been created.</source>
          <target state="translated">您可以检查 &lt;code&gt;server.requests&lt;/code&gt; 以验证请求顺序，查找不匹配的请求或检查是否已完成任何请求。 &lt;code&gt;server.requests&lt;/code&gt; 是所有已创建的 &lt;code&gt;FakeXMLHttpRequest&lt;/code&gt; 对象的数组。</target>
        </trans-unit>
        <trans-unit id="d28975f37cfd79d06056b5e703b2e79dd8dee5af" translate="yes" xml:space="preserve">
          <source>You can reset behaviour of all stubs using &lt;code&gt;sinon.resetBehavior()&lt;/code&gt;</source>
          <target state="translated">您可以使用 &lt;code&gt;sinon.resetBehavior()&lt;/code&gt; 重置所有存根的行为。</target>
        </trans-unit>
        <trans-unit id="fbb8998ea2ab26b3bde873564e686d6d27d97001" translate="yes" xml:space="preserve">
          <source>You can reset history of all stubs using &lt;code&gt;sinon.resetHistory()&lt;/code&gt;</source>
          <target state="translated">您可以使用 &lt;code&gt;sinon.resetHistory()&lt;/code&gt; 重置所有存根的历史记录</target>
        </trans-unit>
        <trans-unit id="ff58e35d3e3d76b2f88709d1ad2123c1cfb9c675" translate="yes" xml:space="preserve">
          <source>You can restore values by calling the &lt;code&gt;restore&lt;/code&gt; method:</source>
          <target state="translated">您可以通过调用 &lt;code&gt;restore&lt;/code&gt; 方法来还原值：</target>
        </trans-unit>
        <trans-unit id="61610effaf4a6c025722f9e3f2d3f5a37b738e5b" translate="yes" xml:space="preserve">
          <source>a comma-delimited list of &lt;code&gt;this&lt;/code&gt; values the spy was called on</source>
          <target state="translated">以逗号分隔的列表 &lt;code&gt;this&lt;/code&gt; 值间谍被称为上</target>
        </trans-unit>
        <trans-unit id="e443ed1c1bd3c3607794c57c13a4189456e9ae80" translate="yes" xml:space="preserve">
          <source>a comma-delimited list of the (non-format string) arguments passed to &lt;code&gt;printf&lt;/code&gt;</source>
          <target state="translated">传递给 &lt;code&gt;printf&lt;/code&gt; 的（非格式字符串）参数的逗号分隔列表</target>
        </trans-unit>
        <trans-unit id="7e6e808c9f6864fb6e7cd41105b76a3f4f19e3f8" translate="yes" xml:space="preserve">
          <source>a list of string representations of the calls to the spy, with each call prefixed by a newline and four spaces</source>
          <target state="translated">对spy的调用的字符串表示列表,每个调用前都有一个换行和四个空格。</target>
        </trans-unit>
        <trans-unit id="c95e4d6dd7dbbd6d3328bc26c4b27baafc4c3da1" translate="yes" xml:space="preserve">
          <source>a multi-line list of the arguments received by all calls to the spy</source>
          <target state="translated">的参数的多行列表。</target>
        </trans-unit>
        <trans-unit id="0885b78870a649081a3ce6ae605faf6ddfbd8353" translate="yes" xml:space="preserve">
          <source>array &lt;code&gt;server.requests&lt;/code&gt;</source>
          <target state="translated">阵列 &lt;code&gt;server.requests&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a0056e927b9645f261ad04f1707aa1c8ce1faf81" translate="yes" xml:space="preserve">
          <source>autoRespond</source>
          <target state="translated">autoRespond</target>
        </trans-unit>
        <trans-unit id="c6523b4f2cc559643182e0690956bbc79efd9867" translate="yes" xml:space="preserve">
          <source>autoRespondAfter()</source>
          <target state="translated">autoRespondAfter()</target>
        </trans-unit>
        <trans-unit id="c282e73722017a3aaff8708c108adfbb208c73b0" translate="yes" xml:space="preserve">
          <source>clock.next()</source>
          <target state="translated">clock.next()</target>
        </trans-unit>
        <trans-unit id="bd6f865edf471cdce105901e7eb5837e187aef57" translate="yes" xml:space="preserve">
          <source>clock.restore()</source>
          <target state="translated">clock.restore()</target>
        </trans-unit>
        <trans-unit id="f6fab57fb262dada3dc2b358e9e4818ac9fba125" translate="yes" xml:space="preserve">
          <source>clock.runAll()</source>
          <target state="translated">clock.runAll()</target>
        </trans-unit>
        <trans-unit id="9be81c4192eae98d66fdaab8abb0784961780b36" translate="yes" xml:space="preserve">
          <source>clock.tick()</source>
          <target state="translated">clock.tick()</target>
        </trans-unit>
        <trans-unit id="ce3a7c333ae4efabde8a984a1bcfab5f51483f34" translate="yes" xml:space="preserve">
          <source>expectation.atLeast()</source>
          <target state="translated">expectation.atLeast()</target>
        </trans-unit>
        <trans-unit id="cc7e8b980869ad59e8393b84a1b90d613ee5210b" translate="yes" xml:space="preserve">
          <source>expectation.atMost()</source>
          <target state="translated">expectation.atMost()</target>
        </trans-unit>
        <trans-unit id="a4f01d6a2dacfa5a8ebb0d8277bf7130cd52a70d" translate="yes" xml:space="preserve">
          <source>expectation.exactly()</source>
          <target state="translated">expectation.exactly()</target>
        </trans-unit>
        <trans-unit id="9906ee206b1dafcea2d7eb200d6beb470d2d2fac" translate="yes" xml:space="preserve">
          <source>expectation.never()</source>
          <target state="translated">expectation.never()</target>
        </trans-unit>
        <trans-unit id="c9476a2cb041769c612fb295b9cadfd15a1dc5d4" translate="yes" xml:space="preserve">
          <source>expectation.on()</source>
          <target state="translated">expectation.on()</target>
        </trans-unit>
        <trans-unit id="fb65d561b6bc2383d756189475d2d1783d789c64" translate="yes" xml:space="preserve">
          <source>expectation.once()</source>
          <target state="translated">expectation.once()</target>
        </trans-unit>
        <trans-unit id="340bbaad1d7c5cfa13f94444b38fac8513591d6d" translate="yes" xml:space="preserve">
          <source>expectation.thrice()</source>
          <target state="translated">expectation.thrice()</target>
        </trans-unit>
        <trans-unit id="4a27b2026b914458f97916550f837462be67f05e" translate="yes" xml:space="preserve">
          <source>expectation.twice()</source>
          <target state="translated">expectation.twice()</target>
        </trans-unit>
        <trans-unit id="c358e2113dacccc1e822c03dd90275c5853d6f78" translate="yes" xml:space="preserve">
          <source>expectation.verify()</source>
          <target state="translated">expectation.verify()</target>
        </trans-unit>
        <trans-unit id="80208f61789a068753321e4a917806aba667c952" translate="yes" xml:space="preserve">
          <source>expectation.withArgs()</source>
          <target state="translated">expectation.withArgs()</target>
        </trans-unit>
        <trans-unit id="0b1b0091cd73a410d8de75cbb63c5ba019d6f979" translate="yes" xml:space="preserve">
          <source>expectation.withExactArgs()</source>
          <target state="translated">expectation.withExactArgs()</target>
        </trans-unit>
        <trans-unit id="affbac3b4b72139a0b16c8437105cd87a958f232" translate="yes" xml:space="preserve">
          <source>f.callback</source>
          <target state="translated">f.callback</target>
        </trans-unit>
        <trans-unit id="10bf744dd6e86313926a3602b4a697825fc09534" translate="yes" xml:space="preserve">
          <source>f.lastArg</source>
          <target state="translated">f.lastArg</target>
        </trans-unit>
        <trans-unit id="b514051ef172245db962feb089691f6d59efc5ed" translate="yes" xml:space="preserve">
          <source>fakeHTTPMethods</source>
          <target state="translated">fakeHTTPMethods</target>
        </trans-unit>
        <trans-unit id="c48c4c63230278704be1ca6df26e77b1865d17b8" translate="yes" xml:space="preserve">
          <source>includeFail</source>
          <target state="translated">includeFail</target>
        </trans-unit>
        <trans-unit id="0160141fc697bf327c4161bd68b1db830a5d2f5d" translate="yes" xml:space="preserve">
          <source>injectInto</source>
          <target state="translated">injectInto</target>
        </trans-unit>
        <trans-unit id="c6482644ca42d056d04c2a91db34a063b7f4ad5a" translate="yes" xml:space="preserve">
          <source>is a prefix to give assertions. By default it is &quot;assert&quot;, so &lt;code&gt;sinon.assert.called&lt;/code&gt; becomes &lt;code&gt;target.assertCalled&lt;/code&gt;. By passing a blank string, the exposed method will be &lt;code&gt;target.called&lt;/code&gt;.</source>
          <target state="translated">是给出断言的前缀。默认情况下它是&amp;ldquo; assert&amp;rdquo;，因此 &lt;code&gt;sinon.assert.called&lt;/code&gt; 成为 &lt;code&gt;target.assertCalled&lt;/code&gt; 。通过传递空白字符串，公开的方法将为 &lt;code&gt;target.called&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6628b382993974f4a5cbca2c9b1c1c013ebe9b61" translate="yes" xml:space="preserve">
          <source>is the same as:</source>
          <target state="translated">与:</target>
        </trans-unit>
        <trans-unit id="510a3588daa07d1b0371a96f11cb662f1d4375de" translate="yes" xml:space="preserve">
          <source>mock.expects()</source>
          <target state="translated">mock.expects()</target>
        </trans-unit>
        <trans-unit id="d4c2648d6be0e13fc21347a01c206cf5f46c9e63" translate="yes" xml:space="preserve">
          <source>mock.restore()</source>
          <target state="translated">mock.restore()</target>
        </trans-unit>
        <trans-unit id="de36b9f5ae9f3e4b1079f1348aa1afac39414388" translate="yes" xml:space="preserve">
          <source>mock.usingPromise()</source>
          <target state="translated">mock.usingPromise()</target>
        </trans-unit>
        <trans-unit id="67a06ac9e0c71ac1a3f1f95e60de92f9a04a3528" translate="yes" xml:space="preserve">
          <source>mock.verify()</source>
          <target state="translated">mock.verify()</target>
        </trans-unit>
        <trans-unit id="b4ebfe34d0fa97f0dd2bb1234fad8f59805f4e8d" translate="yes" xml:space="preserve">
          <source>prefix</source>
          <target state="translated">prefix</target>
        </trans-unit>
        <trans-unit id="d0449e86077449843777d1958aff83cf086dbcba" translate="yes" xml:space="preserve">
          <source>properties</source>
          <target state="translated">properties</target>
        </trans-unit>
        <trans-unit id="f715d7fa3d679bff78cc4c6ee746b427a8f00d67" translate="yes" xml:space="preserve">
          <source>request.async</source>
          <target state="translated">request.async</target>
        </trans-unit>
        <trans-unit id="71215cf0e0fe2409bd7351c2b4be55a69ee0f2f1" translate="yes" xml:space="preserve">
          <source>request.autoRespond</source>
          <target state="translated">request.autoRespond</target>
        </trans-unit>
        <trans-unit id="119955abfc982ef0603f2b396d830c4b13be2ec4" translate="yes" xml:space="preserve">
          <source>request.autoRespondAfter</source>
          <target state="translated">request.autoRespondAfter</target>
        </trans-unit>
        <trans-unit id="5b1c051ba31c77dc4cc1c22dc0c6b9452b0e658e" translate="yes" xml:space="preserve">
          <source>request.error()</source>
          <target state="translated">request.error()</target>
        </trans-unit>
        <trans-unit id="f0ab4445abdab6e77729e77f334a5e74642322a9" translate="yes" xml:space="preserve">
          <source>request.getAllResponseHeaders()</source>
          <target state="translated">request.getAllResponseHeaders()</target>
        </trans-unit>
        <trans-unit id="6901e462225a35144a44a9514e48100e4848ce72" translate="yes" xml:space="preserve">
          <source>request.getResponseHeader()</source>
          <target state="translated">request.getResponseHeader()</target>
        </trans-unit>
        <trans-unit id="cc37ebe0d4cf14ad8f42cd0a4ca82256c69a5b4d" translate="yes" xml:space="preserve">
          <source>request.method</source>
          <target state="translated">request.method</target>
        </trans-unit>
        <trans-unit id="75c2cb1d0bceb84932201444dd188742b0473b23" translate="yes" xml:space="preserve">
          <source>request.password</source>
          <target state="translated">request.password</target>
        </trans-unit>
        <trans-unit id="8078e9f40e833bf1ace9f819b73727b7cc8ec320" translate="yes" xml:space="preserve">
          <source>request.requestBody</source>
          <target state="translated">request.requestBody</target>
        </trans-unit>
        <trans-unit id="6b3b62415b452b47ce6ae2c72f7f12531334cb87" translate="yes" xml:space="preserve">
          <source>request.requestHeaders</source>
          <target state="translated">request.requestHeaders</target>
        </trans-unit>
        <trans-unit id="1bc269960042bdaf7c13f4ae2e7f4197fea33cc9" translate="yes" xml:space="preserve">
          <source>request.respond()</source>
          <target state="translated">request.respond()</target>
        </trans-unit>
        <trans-unit id="80ed690ac50c4b3ef72fe9ec7fad4727df075004" translate="yes" xml:space="preserve">
          <source>request.responseXML</source>
          <target state="translated">request.responseXML</target>
        </trans-unit>
        <trans-unit id="e463015b63db272905031180cbba3fe8bfeb82a1" translate="yes" xml:space="preserve">
          <source>request.setResponseBody()</source>
          <target state="translated">request.setResponseBody()</target>
        </trans-unit>
        <trans-unit id="e661add79aa36b4b1ebb00008a032216eec5443a" translate="yes" xml:space="preserve">
          <source>request.setResponseHeaders()</source>
          <target state="translated">request.setResponseHeaders()</target>
        </trans-unit>
        <trans-unit id="61cfb1a4f2f816a32da43c825c07489d5c57c4ca" translate="yes" xml:space="preserve">
          <source>request.setStatus()</source>
          <target state="translated">request.setStatus()</target>
        </trans-unit>
        <trans-unit id="bca9411d37fe12a56a94e490d123dc0e3bd868de" translate="yes" xml:space="preserve">
          <source>request.status</source>
          <target state="translated">request.status</target>
        </trans-unit>
        <trans-unit id="3909cbf1db57dd2dfce1255898a2da3701d1ebf9" translate="yes" xml:space="preserve">
          <source>request.statusText</source>
          <target state="translated">request.statusText</target>
        </trans-unit>
        <trans-unit id="7a5cefaea879eb725c9ec16ca1b60530be56be89" translate="yes" xml:space="preserve">
          <source>request.url</source>
          <target state="translated">request.url</target>
        </trans-unit>
        <trans-unit id="d9368f601af1df5f3632af78c8049df437771f54" translate="yes" xml:space="preserve">
          <source>request.username</source>
          <target state="translated">request.username</target>
        </trans-unit>
        <trans-unit id="28958966bcc57882f4a1b9631be120a7c301cac0" translate="yes" xml:space="preserve">
          <source>respondImmediately</source>
          <target state="translated">respondImmediately</target>
        </trans-unit>
        <trans-unit id="dacb9a69c1b35aa482838739b6633a61f3ca4644" translate="yes" xml:space="preserve">
          <source>sandbox.assert()</source>
          <target state="translated">sandbox.assert()</target>
        </trans-unit>
        <trans-unit id="c38b480b1247553fa970e6bbac8075e8057188f4" translate="yes" xml:space="preserve">
          <source>sandbox.createStubInstance()</source>
          <target state="translated">sandbox.createStubInstance()</target>
        </trans-unit>
        <trans-unit id="bb92b3b6df7ef51664c0abd130eda651cd7c12ee" translate="yes" xml:space="preserve">
          <source>sandbox.mock()</source>
          <target state="translated">sandbox.mock()</target>
        </trans-unit>
        <trans-unit id="feb190244245418a842dbdb2af78179617fca9a4" translate="yes" xml:space="preserve">
          <source>sandbox.replace()</source>
          <target state="translated">sandbox.replace()</target>
        </trans-unit>
        <trans-unit id="2bf742cb1a11da7b5061d223dd6cdb89ba6bb348" translate="yes" xml:space="preserve">
          <source>sandbox.replaceGetter()</source>
          <target state="translated">sandbox.replaceGetter()</target>
        </trans-unit>
        <trans-unit id="8d3dbc66d7a8637887db85a91103ad230c693da0" translate="yes" xml:space="preserve">
          <source>sandbox.replaceSetter()</source>
          <target state="translated">sandbox.replaceSetter()</target>
        </trans-unit>
        <trans-unit id="f778b0425f79e968435d7affd2ea1d75e8ddc89d" translate="yes" xml:space="preserve">
          <source>sandbox.reset()</source>
          <target state="translated">sandbox.reset()</target>
        </trans-unit>
        <trans-unit id="d8036df191d3f94e6cd3b022a7d0654d09586003" translate="yes" xml:space="preserve">
          <source>sandbox.resetBehavior()</source>
          <target state="translated">sandbox.resetBehavior()</target>
        </trans-unit>
        <trans-unit id="40ca70063a05af264fdfce8ce8f9c814f6b70b59" translate="yes" xml:space="preserve">
          <source>sandbox.resetHistory()</source>
          <target state="translated">sandbox.resetHistory()</target>
        </trans-unit>
        <trans-unit id="7e007543d2eef0b6485347ce8d8d759a2cb1cf26" translate="yes" xml:space="preserve">
          <source>sandbox.restore()</source>
          <target state="translated">sandbox.restore()</target>
        </trans-unit>
        <trans-unit id="95e23bb18d60e678815b3252cb576c29362ac5cf" translate="yes" xml:space="preserve">
          <source>sandbox.spy()</source>
          <target state="translated">sandbox.spy()</target>
        </trans-unit>
        <trans-unit id="67530853128bfe149123acbaa7e62ce010c5fcd0" translate="yes" xml:space="preserve">
          <source>sandbox.stub()</source>
          <target state="translated">sandbox.stub()</target>
        </trans-unit>
        <trans-unit id="d08b07e44fefac89b0a77f33c16f025e2f6e6f53" translate="yes" xml:space="preserve">
          <source>sandbox.useFakeServer()</source>
          <target state="translated">sandbox.useFakeServer()</target>
        </trans-unit>
        <trans-unit id="415e96ffc18c44e9e4c893bb8df3fc893a9af86b" translate="yes" xml:space="preserve">
          <source>sandbox.useFakeTimers()</source>
          <target state="translated">sandbox.useFakeTimers()</target>
        </trans-unit>
        <trans-unit id="bedad13c848d259f0d250e0ee75593fc56e12cf6" translate="yes" xml:space="preserve">
          <source>sandbox.useFakeXMLHttpRequest()</source>
          <target state="translated">sandbox.useFakeXMLHttpRequest()</target>
        </trans-unit>
        <trans-unit id="9289b88ceca6f932d62fd0bf48deb029a8e008cb" translate="yes" xml:space="preserve">
          <source>sandbox.usingPromise()</source>
          <target state="translated">sandbox.usingPromise()</target>
        </trans-unit>
        <trans-unit id="4dca31d8f3765f3634077fdc6902cab0ef371c63" translate="yes" xml:space="preserve">
          <source>sandbox.verify()</source>
          <target state="translated">sandbox.verify()</target>
        </trans-unit>
        <trans-unit id="15b98f26e22524127ccf81e2dd10402d94e58142" translate="yes" xml:space="preserve">
          <source>sandbox.verifyAndRestore()</source>
          <target state="translated">sandbox.verifyAndRestore()</target>
        </trans-unit>
        <trans-unit id="e0fe40977bfa8cc07314e80d60354e756539ea6d" translate="yes" xml:space="preserve">
          <source>server.autoRespond</source>
          <target state="translated">server.autoRespond</target>
        </trans-unit>
        <trans-unit id="14af1c8a892aefbf7d23eba539f0febbbe41bea8" translate="yes" xml:space="preserve">
          <source>server.autoRespondAfter</source>
          <target state="translated">server.autoRespondAfter</target>
        </trans-unit>
        <trans-unit id="75be9e83c50bf9789e2162719213697269454517" translate="yes" xml:space="preserve">
          <source>server.configure()</source>
          <target state="translated">server.configure()</target>
        </trans-unit>
        <trans-unit id="949cdac11e94cc1d53bf11d896e97f5a1626c370" translate="yes" xml:space="preserve">
          <source>server.fakeHTTPMethods</source>
          <target state="translated">server.fakeHTTPMethods</target>
        </trans-unit>
        <trans-unit id="22f34b5f15189779550ee10b6f441e1d92670708" translate="yes" xml:space="preserve">
          <source>server.getHTTPMethod()</source>
          <target state="translated">server.getHTTPMethod()</target>
        </trans-unit>
        <trans-unit id="74d5b63a556c1922624d4136e1ec69d4e22cc945" translate="yes" xml:space="preserve">
          <source>server.requests</source>
          <target state="translated">server.requests</target>
        </trans-unit>
        <trans-unit id="a596b894f5effa5cb51d295fad8d9c7a8d5f17ad" translate="yes" xml:space="preserve">
          <source>server.respond()</source>
          <target state="translated">server.respond()</target>
        </trans-unit>
        <trans-unit id="945149648a1b32203dbee3c8159ffbcdc22cfdda" translate="yes" xml:space="preserve">
          <source>server.respondImmediately</source>
          <target state="translated">server.respondImmediately</target>
        </trans-unit>
        <trans-unit id="137edcd223e306a0ae13a9ff858d5dbaca724bb3" translate="yes" xml:space="preserve">
          <source>server.respondWith()</source>
          <target state="translated">server.respondWith()</target>
        </trans-unit>
        <trans-unit id="7fc960b6cb3a5444cef02c4d44688a3ab727f0d4" translate="yes" xml:space="preserve">
          <source>server.restore()</source>
          <target state="translated">server.restore()</target>
        </trans-unit>
        <trans-unit id="53a5d6b734cacced5f895a0b678339c4cfcbb3b0" translate="yes" xml:space="preserve">
          <source>sinon.addBehavior()</source>
          <target state="translated">sinon.addBehavior()</target>
        </trans-unit>
        <trans-unit id="8a1255829fb3411d0d027c9fca7962975c7a7566" translate="yes" xml:space="preserve">
          <source>sinon.assert.alwaysCalledOn()</source>
          <target state="translated">sinon.assert.alwaysCalledOn()</target>
        </trans-unit>
        <trans-unit id="d917fb4d0aabd8c0f19850ebf5efc1c8f61873d0" translate="yes" xml:space="preserve">
          <source>sinon.assert.alwaysCalledWith()</source>
          <target state="translated">sinon.assert.alwaysCalledWith()</target>
        </trans-unit>
        <trans-unit id="bd08e8b8603604abd4790b513dd7932defe882c8" translate="yes" xml:space="preserve">
          <source>sinon.assert.alwaysCalledWithExactly()</source>
          <target state="translated">sinon.assert.alwaysCalledWithExactly()</target>
        </trans-unit>
        <trans-unit id="5d37fd2098f169411361251b6fd3a3cc8097d235" translate="yes" xml:space="preserve">
          <source>sinon.assert.alwaysCalledWithMatch()</source>
          <target state="translated">sinon.assert.alwaysCalledWithMatch()</target>
        </trans-unit>
        <trans-unit id="0a3805e5552e45833d1795ca6b19a3aeb8086616" translate="yes" xml:space="preserve">
          <source>sinon.assert.alwaysThrew()</source>
          <target state="translated">sinon.assert.alwaysThrew()</target>
        </trans-unit>
        <trans-unit id="0607022a6521cdaeae3783e1f566da03c3717c5d" translate="yes" xml:space="preserve">
          <source>sinon.assert.callCount()</source>
          <target state="translated">sinon.assert.callCount()</target>
        </trans-unit>
        <trans-unit id="3a8c7d4bbf0c13e33f49b39c2b5f38459be3304b" translate="yes" xml:space="preserve">
          <source>sinon.assert.callOrder()</source>
          <target state="translated">sinon.assert.callOrder()</target>
        </trans-unit>
        <trans-unit id="e935a6d5527e164bfcb6dc466568f2f784c8bdff" translate="yes" xml:space="preserve">
          <source>sinon.assert.called()</source>
          <target state="translated">sinon.assert.called()</target>
        </trans-unit>
        <trans-unit id="8c6db8223c81d9f31a5b2b1710fc4af01bab0132" translate="yes" xml:space="preserve">
          <source>sinon.assert.calledOn()</source>
          <target state="translated">sinon.assert.calledOn()</target>
        </trans-unit>
        <trans-unit id="3182499752cb54c943776bd901dc2fc3b5455c08" translate="yes" xml:space="preserve">
          <source>sinon.assert.calledOnce()</source>
          <target state="translated">sinon.assert.calledOnce()</target>
        </trans-unit>
        <trans-unit id="f0cfccb63ec3e63f25f2bfdc79105bea12fba109" translate="yes" xml:space="preserve">
          <source>sinon.assert.calledThrice()</source>
          <target state="translated">sinon.assert.calledThrice()</target>
        </trans-unit>
        <trans-unit id="32cfbbc7e680f00db806a88ed92a7ae3189e2ea4" translate="yes" xml:space="preserve">
          <source>sinon.assert.calledTwice()</source>
          <target state="translated">sinon.assert.calledTwice()</target>
        </trans-unit>
        <trans-unit id="f3c28e18814d96112c50e229c33695cc76247501" translate="yes" xml:space="preserve">
          <source>sinon.assert.calledWith()</source>
          <target state="translated">sinon.assert.calledWith()</target>
        </trans-unit>
        <trans-unit id="a6324cbc1bc7a87e72508d669cda8011dc8bf88d" translate="yes" xml:space="preserve">
          <source>sinon.assert.calledWithExactly()</source>
          <target state="translated">sinon.assert.calledWithExactly()</target>
        </trans-unit>
        <trans-unit id="0f9cd02c2efdea0465e219171dd694db4438dea9" translate="yes" xml:space="preserve">
          <source>sinon.assert.calledWithMatch()</source>
          <target state="translated">sinon.assert.calledWithMatch()</target>
        </trans-unit>
        <trans-unit id="a867ee0232255aba0cdb5b5d71e94cd36efd6bae" translate="yes" xml:space="preserve">
          <source>sinon.assert.calledWithNew()</source>
          <target state="translated">sinon.assert.calledWithNew()</target>
        </trans-unit>
        <trans-unit id="a46a33dfa0a25e89f9514590f549d94eb79d99f9" translate="yes" xml:space="preserve">
          <source>sinon.assert.expose()</source>
          <target state="translated">sinon.assert.expose()</target>
        </trans-unit>
        <trans-unit id="45dbb8dac0b47b1e2dcd71cbd4f0d1f31685b2ef" translate="yes" xml:space="preserve">
          <source>sinon.assert.fail()</source>
          <target state="translated">sinon.assert.fail()</target>
        </trans-unit>
        <trans-unit id="faa141fc0d9e17028957d0de95b50ede7380d711" translate="yes" xml:space="preserve">
          <source>sinon.assert.failException</source>
          <target state="translated">sinon.assert.failException</target>
        </trans-unit>
        <trans-unit id="376322f5d13b69726eaddda9c73410111dcae9e8" translate="yes" xml:space="preserve">
          <source>sinon.assert.match()</source>
          <target state="translated">sinon.assert.match()</target>
        </trans-unit>
        <trans-unit id="3603b06374158f95bae83228f107083189f87a7a" translate="yes" xml:space="preserve">
          <source>sinon.assert.neverCalledWith()</source>
          <target state="translated">sinon.assert.neverCalledWith()</target>
        </trans-unit>
        <trans-unit id="c97d75e22c732974471a2e358c9ebc84826910a2" translate="yes" xml:space="preserve">
          <source>sinon.assert.neverCalledWithMatch()</source>
          <target state="translated">sinon.assert.neverCalledWithMatch()</target>
        </trans-unit>
        <trans-unit id="8015666ada8f2992773b6e82952df80a5b0a73a4" translate="yes" xml:space="preserve">
          <source>sinon.assert.notCalled()</source>
          <target state="translated">sinon.assert.notCalled()</target>
        </trans-unit>
        <trans-unit id="efc3df584f053f7736e065d6a4db989c94f8ef77" translate="yes" xml:space="preserve">
          <source>sinon.assert.pass()</source>
          <target state="translated">sinon.assert.pass()</target>
        </trans-unit>
        <trans-unit id="d4a81ecd1180f7b285f7c74cc28c7ec3c32cc3ca" translate="yes" xml:space="preserve">
          <source>sinon.assert.threw()</source>
          <target state="translated">sinon.assert.threw()</target>
        </trans-unit>
        <trans-unit id="064dd3a62a1ac204e024b491bb1de86efc77a2f5" translate="yes" xml:space="preserve">
          <source>sinon.createFakeServer()</source>
          <target state="translated">sinon.createFakeServer()</target>
        </trans-unit>
        <trans-unit id="13764743f77e5a95d4782d1678b5c76d0c581f25" translate="yes" xml:space="preserve">
          <source>sinon.createFakeServerWithClock()</source>
          <target state="translated">sinon.createFakeServerWithClock()</target>
        </trans-unit>
        <trans-unit id="fd85afc35c97f97d39ad45d6696fa8ab035e150f" translate="yes" xml:space="preserve">
          <source>sinon.createSandbox()</source>
          <target state="translated">sinon.createSandbox()</target>
        </trans-unit>
        <trans-unit id="b2f6db4d36db418e22ea3ea545b066eb05801bab" translate="yes" xml:space="preserve">
          <source>sinon.createStubInstance()</source>
          <target state="translated">sinon.createStubInstance()</target>
        </trans-unit>
        <trans-unit id="92e0beb01c29d00cf96dbc2e9db029f36cefe885" translate="yes" xml:space="preserve">
          <source>sinon.expectation.create()</source>
          <target state="translated">sinon.expectation.create()</target>
        </trans-unit>
        <trans-unit id="c22fdb56a320196dd5854f5adacf9a0c9f132990" translate="yes" xml:space="preserve">
          <source>sinon.fake()</source>
          <target state="translated">sinon.fake()</target>
        </trans-unit>
        <trans-unit id="8d71fa408a939ac1f00fb71f81f9e417edca9be8" translate="yes" xml:space="preserve">
          <source>sinon.fake.rejects()</source>
          <target state="translated">sinon.fake.rejects()</target>
        </trans-unit>
        <trans-unit id="8023eb22851d9dae266e059983a833551577d444" translate="yes" xml:space="preserve">
          <source>sinon.fake.resolves()</source>
          <target state="translated">sinon.fake.resolves()</target>
        </trans-unit>
        <trans-unit id="ae38bfe99d73ed79a952c654bea2e4ba1fc83f6a" translate="yes" xml:space="preserve">
          <source>sinon.fake.returns()</source>
          <target state="translated">sinon.fake.returns()</target>
        </trans-unit>
        <trans-unit id="94009921ff107d1e654e3e3d7bd782caaf91bacb" translate="yes" xml:space="preserve">
          <source>sinon.fake.throws()</source>
          <target state="translated">sinon.fake.throws()</target>
        </trans-unit>
        <trans-unit id="35572fdd4d064f191d1f563200a16df6aec5d203" translate="yes" xml:space="preserve">
          <source>sinon.fake.yields()</source>
          <target state="translated">sinon.fake.yields()</target>
        </trans-unit>
        <trans-unit id="f2cc054594c9a529e1614956cdeee55bd69127d7" translate="yes" xml:space="preserve">
          <source>sinon.fake.yieldsAsync()</source>
          <target state="translated">sinon.fake.yieldsAsync()</target>
        </trans-unit>
        <trans-unit id="9f132af6d4ba33441a78e6c05adeb25d13ca7496" translate="yes" xml:space="preserve">
          <source>sinon.match()</source>
          <target state="translated">sinon.match()</target>
        </trans-unit>
        <trans-unit id="d63e85e6600e3c3f45a7529d14a5928121f1ebb7" translate="yes" xml:space="preserve">
          <source>sinon.match.any</source>
          <target state="translated">sinon.match.any</target>
        </trans-unit>
        <trans-unit id="7e9b0fec79e0f866e47428b4a386b4af89ce93ba" translate="yes" xml:space="preserve">
          <source>sinon.match.array</source>
          <target state="translated">sinon.match.array</target>
        </trans-unit>
        <trans-unit id="368a129831914855005fede18739bd885da35744" translate="yes" xml:space="preserve">
          <source>sinon.match.array.contains()</source>
          <target state="translated">sinon.match.array.contains()</target>
        </trans-unit>
        <trans-unit id="72a8ac661058c76cb424eecb189260802fed2e78" translate="yes" xml:space="preserve">
          <source>sinon.match.array.deepEquals()</source>
          <target state="translated">sinon.match.array.deepEquals()</target>
        </trans-unit>
        <trans-unit id="95bfe1bbb29346b9212470e7ee4f3be2029bb51c" translate="yes" xml:space="preserve">
          <source>sinon.match.array.endsWith()</source>
          <target state="translated">sinon.match.array.endsWith()</target>
        </trans-unit>
        <trans-unit id="96b9498b757f6b9a870a1abaea787dc4ea6a1c18" translate="yes" xml:space="preserve">
          <source>sinon.match.array.startsWith()</source>
          <target state="translated">sinon.match.array.startsWith()</target>
        </trans-unit>
        <trans-unit id="b9ff8075d4859f3c22edeb600bb0b4ad6ebf985b" translate="yes" xml:space="preserve">
          <source>sinon.match.bool</source>
          <target state="translated">sinon.match.bool</target>
        </trans-unit>
        <trans-unit id="532568613cd64e6ae7cdff8f9eca67f178aae906" translate="yes" xml:space="preserve">
          <source>sinon.match.date</source>
          <target state="translated">sinon.match.date</target>
        </trans-unit>
        <trans-unit id="57468e814b5dc6557209ccd2d903844a9c33c60d" translate="yes" xml:space="preserve">
          <source>sinon.match.defined</source>
          <target state="translated">sinon.match.defined</target>
        </trans-unit>
        <trans-unit id="2e8f7431f6f5db8a0e81b4de0487fdab1759eeda" translate="yes" xml:space="preserve">
          <source>sinon.match.every()</source>
          <target state="translated">sinon.match.every()</target>
        </trans-unit>
        <trans-unit id="077d7f0e14a0513e4d7e9b51fb107f8e92fe7136" translate="yes" xml:space="preserve">
          <source>sinon.match.falsy</source>
          <target state="translated">sinon.match.falsy</target>
        </trans-unit>
        <trans-unit id="e3a360420231336d490a07f087977f03208a2f26" translate="yes" xml:space="preserve">
          <source>sinon.match.func</source>
          <target state="translated">sinon.match.func</target>
        </trans-unit>
        <trans-unit id="26bcf48b7010fd96afc93d392074a8dbc439f9b8" translate="yes" xml:space="preserve">
          <source>sinon.match.has()</source>
          <target state="translated">sinon.match.has()</target>
        </trans-unit>
        <trans-unit id="c85c4a2388053c85dbad4ac79d985c2ecc0d53f2" translate="yes" xml:space="preserve">
          <source>sinon.match.hasNested()</source>
          <target state="translated">sinon.match.hasNested()</target>
        </trans-unit>
        <trans-unit id="772d953f7ab53bf7872e5a462cd73681439fb456" translate="yes" xml:space="preserve">
          <source>sinon.match.hasOwn()</source>
          <target state="translated">sinon.match.hasOwn()</target>
        </trans-unit>
        <trans-unit id="f7f246385eff8e217edba81be6df4e86689dfac2" translate="yes" xml:space="preserve">
          <source>sinon.match.in()</source>
          <target state="translated">sinon.match.in()</target>
        </trans-unit>
        <trans-unit id="7e99e01f3657c61244c64590e102304eb0176ea3" translate="yes" xml:space="preserve">
          <source>sinon.match.instanceOf()</source>
          <target state="translated">sinon.match.instanceOf()</target>
        </trans-unit>
        <trans-unit id="c8648d01b50b1203a1c4ce38eb42a3d41a07b5e8" translate="yes" xml:space="preserve">
          <source>sinon.match.map</source>
          <target state="translated">sinon.match.map</target>
        </trans-unit>
        <trans-unit id="3888986642427534df57bc3959e6c02b1b44feb1" translate="yes" xml:space="preserve">
          <source>sinon.match.map.contains()</source>
          <target state="translated">sinon.match.map.contains()</target>
        </trans-unit>
        <trans-unit id="f3892006fc7e2ee38db2668ad6ff6adaacc64c8d" translate="yes" xml:space="preserve">
          <source>sinon.match.map.deepEquals()</source>
          <target state="translated">sinon.match.map.deepEquals()</target>
        </trans-unit>
        <trans-unit id="7b137971ee4f3d39b2018acb1248fb7b0d170a84" translate="yes" xml:space="preserve">
          <source>sinon.match.number</source>
          <target state="translated">sinon.match.number</target>
        </trans-unit>
        <trans-unit id="58f69cec8938a3c45d737b0b2667631c984e7bf5" translate="yes" xml:space="preserve">
          <source>sinon.match.object</source>
          <target state="translated">sinon.match.object</target>
        </trans-unit>
        <trans-unit id="7de7ae4d9d8e455bb74cafc13232ee9f8023c176" translate="yes" xml:space="preserve">
          <source>sinon.match.regexp</source>
          <target state="translated">sinon.match.regexp</target>
        </trans-unit>
        <trans-unit id="05c44924256e8f95762d7484ae2ea9331d62cbd5" translate="yes" xml:space="preserve">
          <source>sinon.match.same()</source>
          <target state="translated">sinon.match.same()</target>
        </trans-unit>
        <trans-unit id="c56a02c30101f5a83fd47b71dbc4619a840dff1b" translate="yes" xml:space="preserve">
          <source>sinon.match.set</source>
          <target state="translated">sinon.match.set</target>
        </trans-unit>
        <trans-unit id="9721386542f73b63f418dcb6ba53f7582668c3c1" translate="yes" xml:space="preserve">
          <source>sinon.match.set.contains()</source>
          <target state="translated">sinon.match.set.contains()</target>
        </trans-unit>
        <trans-unit id="6a0d449987d946e8afab87cd484870d911c2566f" translate="yes" xml:space="preserve">
          <source>sinon.match.set.deepEquals()</source>
          <target state="translated">sinon.match.set.deepEquals()</target>
        </trans-unit>
        <trans-unit id="8557b53ad777b7b35ade4bf3111646452760ec5c" translate="yes" xml:space="preserve">
          <source>sinon.match.some()</source>
          <target state="translated">sinon.match.some()</target>
        </trans-unit>
        <trans-unit id="e5b9c723e461aac57124603fd709a8ad3144d034" translate="yes" xml:space="preserve">
          <source>sinon.match.string</source>
          <target state="translated">sinon.match.string</target>
        </trans-unit>
        <trans-unit id="370d00e90592aedfd95e12ec7c67e20da0ef5860" translate="yes" xml:space="preserve">
          <source>sinon.match.symbol</source>
          <target state="translated">sinon.match.symbol</target>
        </trans-unit>
        <trans-unit id="4e6aa592187792b2ab0eb3c3b7c47e9985828ff3" translate="yes" xml:space="preserve">
          <source>sinon.match.truthy</source>
          <target state="translated">sinon.match.truthy</target>
        </trans-unit>
        <trans-unit id="6f11ec02dde4ae8e3c949625601028387c927584" translate="yes" xml:space="preserve">
          <source>sinon.match.typeOf()</source>
          <target state="translated">sinon.match.typeOf()</target>
        </trans-unit>
        <trans-unit id="f437e1a17bbc1c5f68191a29f254627bb99bb757" translate="yes" xml:space="preserve">
          <source>sinon.mock()</source>
          <target state="translated">sinon.mock()</target>
        </trans-unit>
        <trans-unit id="cf4507c632d010ba17c2baa2a15e38b02f435cff" translate="yes" xml:space="preserve">
          <source>sinon.stub()</source>
          <target state="translated">sinon.stub()</target>
        </trans-unit>
        <trans-unit id="a66226dae7c15ad8bdff81fac0628a82964aaab9" translate="yes" xml:space="preserve">
          <source>sinon.useFakeTimers()</source>
          <target state="translated">sinon.useFakeTimers()</target>
        </trans-unit>
        <trans-unit id="c11442705e4757433f2719aab16b238c92100edb" translate="yes" xml:space="preserve">
          <source>sinon.useFakeXMLHttpRequest()</source>
          <target state="translated">sinon.useFakeXMLHttpRequest()</target>
        </trans-unit>
        <trans-unit id="67064007cb68fbac531effcc3ae616276065a431" translate="yes" xml:space="preserve">
          <source>spy.alwaysCalledOn()</source>
          <target state="translated">spy.alwaysCalledOn()</target>
        </trans-unit>
        <trans-unit id="401298419ccd48617810028f75efba3582c0c118" translate="yes" xml:space="preserve">
          <source>spy.alwaysCalledWith()</source>
          <target state="translated">spy.alwaysCalledWith()</target>
        </trans-unit>
        <trans-unit id="896109be489bbc2d64abe05a3574fa208f0a5bce" translate="yes" xml:space="preserve">
          <source>spy.alwaysCalledWithExactly()</source>
          <target state="translated">spy.alwaysCalledWithExactly()</target>
        </trans-unit>
        <trans-unit id="2b873f88400520127487ca3383495a061c01afdb" translate="yes" xml:space="preserve">
          <source>spy.alwaysCalledWithMatch()</source>
          <target state="translated">spy.alwaysCalledWithMatch()</target>
        </trans-unit>
        <trans-unit id="e0070d3faa1d4b8b6921c0fdb96c9431a66ec03f" translate="yes" xml:space="preserve">
          <source>spy.alwaysReturned()</source>
          <target state="translated">spy.alwaysReturned()</target>
        </trans-unit>
        <trans-unit id="92eadcf8daa656ac6520c2d230fd7c1ec96886ca" translate="yes" xml:space="preserve">
          <source>spy.alwaysThrew()</source>
          <target state="translated">spy.alwaysThrew()</target>
        </trans-unit>
        <trans-unit id="759e4f98353dafdf5536d2e5d5553cbb6586ad56" translate="yes" xml:space="preserve">
          <source>spy.args</source>
          <target state="translated">spy.args</target>
        </trans-unit>
        <trans-unit id="7ce240c991169325b4b2557c4a0eca907ee38bef" translate="yes" xml:space="preserve">
          <source>spy.callCount</source>
          <target state="translated">spy.callCount</target>
        </trans-unit>
        <trans-unit id="526a0c57a7fe78f0fa16368963614d6ee87c53ff" translate="yes" xml:space="preserve">
          <source>spy.called</source>
          <target state="translated">spy.called</target>
        </trans-unit>
        <trans-unit id="c13b4187dd72788d5e9048b643949d8fddd9f53f" translate="yes" xml:space="preserve">
          <source>spy.calledAfter()</source>
          <target state="translated">spy.calledAfter()</target>
        </trans-unit>
        <trans-unit id="9197d9205b75bb9295b23bf4e40884f58f2a2844" translate="yes" xml:space="preserve">
          <source>spy.calledBefore()</source>
          <target state="translated">spy.calledBefore()</target>
        </trans-unit>
        <trans-unit id="d41827f4d5e5595c898fea858050705d336500ae" translate="yes" xml:space="preserve">
          <source>spy.calledImmediatelyAfter()</source>
          <target state="translated">spy.calledImmediatelyAfter()</target>
        </trans-unit>
        <trans-unit id="2010355245a3e330caf1a61da25d9cb851c56c5d" translate="yes" xml:space="preserve">
          <source>spy.calledImmediatelyBefore()</source>
          <target state="translated">spy.calledImmediatelyBefore()</target>
        </trans-unit>
        <trans-unit id="1cb3f1972b61060291553d22181e6136851b99c7" translate="yes" xml:space="preserve">
          <source>spy.calledOn()</source>
          <target state="translated">spy.calledOn()</target>
        </trans-unit>
        <trans-unit id="4a7229c5fa6c088d91ca92efd5a717b315ef7c3f" translate="yes" xml:space="preserve">
          <source>spy.calledOnce</source>
          <target state="translated">spy.calledOnce</target>
        </trans-unit>
        <trans-unit id="7b0a1a92f0a2c5cfa80cc09a9450fcd9fab15262" translate="yes" xml:space="preserve">
          <source>spy.calledOnceWith()</source>
          <target state="translated">spy.calledOnceWith()</target>
        </trans-unit>
        <trans-unit id="34447299a02bb123a8114bde2c004b4409b24fd8" translate="yes" xml:space="preserve">
          <source>spy.calledOnceWithExactly()</source>
          <target state="translated">spy.calledOnceWithExactly()</target>
        </trans-unit>
        <trans-unit id="507f2e27cd1b8eae9a98ca3fe89fef4fe95c4b7f" translate="yes" xml:space="preserve">
          <source>spy.calledThrice</source>
          <target state="translated">spy.calledThrice</target>
        </trans-unit>
        <trans-unit id="7e1efb9ae2bd4ee0dd74a655230f2f3a5b0dfde0" translate="yes" xml:space="preserve">
          <source>spy.calledTwice</source>
          <target state="translated">spy.calledTwice</target>
        </trans-unit>
        <trans-unit id="81bb21514c4d31eff0fb306c52febb8ffaf234c9" translate="yes" xml:space="preserve">
          <source>spy.calledWith()</source>
          <target state="translated">spy.calledWith()</target>
        </trans-unit>
        <trans-unit id="fa8b65ff5041392eceedd43448821f36787b7933" translate="yes" xml:space="preserve">
          <source>spy.calledWithExactly()</source>
          <target state="translated">spy.calledWithExactly()</target>
        </trans-unit>
        <trans-unit id="f52ed5ea000a17e5eb4d003ddacf92cb36cd4e4c" translate="yes" xml:space="preserve">
          <source>spy.calledWithMatch()</source>
          <target state="translated">spy.calledWithMatch()</target>
        </trans-unit>
        <trans-unit id="4916366ef5c662182aa03593b8e7908d958f025b" translate="yes" xml:space="preserve">
          <source>spy.calledWithNew()</source>
          <target state="translated">spy.calledWithNew()</target>
        </trans-unit>
        <trans-unit id="e125ba8fe8e7eb6c0946594617845b3be28b809a" translate="yes" xml:space="preserve">
          <source>spy.exceptions</source>
          <target state="translated">spy.exceptions</target>
        </trans-unit>
        <trans-unit id="a895c48af0069c4c9c8d349c10f94f4ebf0a3d08" translate="yes" xml:space="preserve">
          <source>spy.firstCall</source>
          <target state="translated">spy.firstCall</target>
        </trans-unit>
        <trans-unit id="93012004621e88105e6d074257dc8229d137dfa4" translate="yes" xml:space="preserve">
          <source>spy.getCall()</source>
          <target state="translated">spy.getCall()</target>
        </trans-unit>
        <trans-unit id="b2ac6f70c783c31c566856066dae5e6f9e30dec9" translate="yes" xml:space="preserve">
          <source>spy.getCalls()</source>
          <target state="translated">spy.getCalls()</target>
        </trans-unit>
        <trans-unit id="604f5e39a207d12660654bab8d8a9c0246144e73" translate="yes" xml:space="preserve">
          <source>spy.lastCall</source>
          <target state="translated">spy.lastCall</target>
        </trans-unit>
        <trans-unit id="e8f5f3dfd897ea7470be875586d7d88e73b02a3b" translate="yes" xml:space="preserve">
          <source>spy.neverCalledWith()</source>
          <target state="translated">spy.neverCalledWith()</target>
        </trans-unit>
        <trans-unit id="0392d2e36385fdf3260cd534e07eb03aebdc18f5" translate="yes" xml:space="preserve">
          <source>spy.neverCalledWithMatch()</source>
          <target state="translated">spy.neverCalledWithMatch()</target>
        </trans-unit>
        <trans-unit id="1a3e31efb0976f6a478c6d3654bd9f57d5f21612" translate="yes" xml:space="preserve">
          <source>spy.notCalled</source>
          <target state="translated">spy.notCalled</target>
        </trans-unit>
        <trans-unit id="1ac06ff5a651d1dd17a1d5d233be576502067318" translate="yes" xml:space="preserve">
          <source>spy.printf()</source>
          <target state="translated">spy.printf()</target>
        </trans-unit>
        <trans-unit id="417ab37486a1a32e84e9a7e3fe91e6e08622948f" translate="yes" xml:space="preserve">
          <source>spy.resetHistory()</source>
          <target state="translated">spy.resetHistory()</target>
        </trans-unit>
        <trans-unit id="0920168607279b53a7b52f86315f2b846e85406d" translate="yes" xml:space="preserve">
          <source>spy.restore()</source>
          <target state="translated">spy.restore()</target>
        </trans-unit>
        <trans-unit id="b5e89ff6bfcb20384d00692950d1ac1c63e4e959" translate="yes" xml:space="preserve">
          <source>spy.returnValues</source>
          <target state="translated">spy.returnValues</target>
        </trans-unit>
        <trans-unit id="4c85fd112c86122db46b00f15dc7e11ea4ed8292" translate="yes" xml:space="preserve">
          <source>spy.returned()</source>
          <target state="translated">spy.returned()</target>
        </trans-unit>
        <trans-unit id="037b0736c4803faf2a4b2cdca4fa5aaf205d83c9" translate="yes" xml:space="preserve">
          <source>spy.secondCall</source>
          <target state="translated">spy.secondCall</target>
        </trans-unit>
        <trans-unit id="17414e8686a3c58887fb904471570201e921c302" translate="yes" xml:space="preserve">
          <source>spy.thirdCall</source>
          <target state="translated">spy.thirdCall</target>
        </trans-unit>
        <trans-unit id="0cd4e2acc6854fa156e843180d3af0d9f389c314" translate="yes" xml:space="preserve">
          <source>spy.thisValues</source>
          <target state="translated">spy.thisValues</target>
        </trans-unit>
        <trans-unit id="762e001581a93306faac1fc5f9ae2a7f84810873" translate="yes" xml:space="preserve">
          <source>spy.threw()</source>
          <target state="translated">spy.threw()</target>
        </trans-unit>
        <trans-unit id="62df24b2a933cf6871957551b7147b545bc79d7c" translate="yes" xml:space="preserve">
          <source>spy.withArgs()</source>
          <target state="translated">spy.withArgs()</target>
        </trans-unit>
        <trans-unit id="761e99cd1a39a788dee259af77b9af0e558ccd2f" translate="yes" xml:space="preserve">
          <source>spyCall.lastArg</source>
          <target state="translated">spyCall.lastArg</target>
        </trans-unit>
        <trans-unit id="7b42ba4ae8acb6c94c471d0715b14033328ec447" translate="yes" xml:space="preserve">
          <source>stub.callArg()</source>
          <target state="translated">stub.callArg()</target>
        </trans-unit>
        <trans-unit id="8dc845d8454dde80bd4d9d62090f79fc5dfde2a5" translate="yes" xml:space="preserve">
          <source>stub.callArgWith()</source>
          <target state="translated">stub.callArgWith()</target>
        </trans-unit>
        <trans-unit id="7c9005b4cde7b48c40dd38d5327bd543cc65deaf" translate="yes" xml:space="preserve">
          <source>stub.callThrough()</source>
          <target state="translated">stub.callThrough()</target>
        </trans-unit>
        <trans-unit id="1f9546280d7675cf2517314932b7a2080f5d50c2" translate="yes" xml:space="preserve">
          <source>stub.callsArg()</source>
          <target state="translated">stub.callsArg()</target>
        </trans-unit>
        <trans-unit id="e4ed9ac891acf239adc8748f921e6184e7a4a980" translate="yes" xml:space="preserve">
          <source>stub.callsArgOn()</source>
          <target state="translated">stub.callsArgOn()</target>
        </trans-unit>
        <trans-unit id="e92b9b337c910604a7872cb36b4b9f7e46b46012" translate="yes" xml:space="preserve">
          <source>stub.callsArgOnWith()</source>
          <target state="translated">stub.callsArgOnWith()</target>
        </trans-unit>
        <trans-unit id="6cbda3d7bcce9a39c708f4d1d49cc0d7a4edc59c" translate="yes" xml:space="preserve">
          <source>stub.callsArgWith()</source>
          <target state="translated">stub.callsArgWith()</target>
        </trans-unit>
        <trans-unit id="be3b7c7ed6d8e1e95b61910e3dc123ed3dd23953" translate="yes" xml:space="preserve">
          <source>stub.callsFake()</source>
          <target state="translated">stub.callsFake()</target>
        </trans-unit>
        <trans-unit id="80609a9f180b7840d03b251bb411cbb1c2265b6c" translate="yes" xml:space="preserve">
          <source>stub.get()</source>
          <target state="translated">stub.get()</target>
        </trans-unit>
        <trans-unit id="02ed16662b438c624fa90a1fc87eb43ec0291fc8" translate="yes" xml:space="preserve">
          <source>stub.onCall()</source>
          <target state="translated">stub.onCall()</target>
        </trans-unit>
        <trans-unit id="a9d74bac4201edc1aa0159a799f014a28baba4bd" translate="yes" xml:space="preserve">
          <source>stub.onFirstCall()</source>
          <target state="translated">stub.onFirstCall()</target>
        </trans-unit>
        <trans-unit id="2336ccd572e924862ff23adc3c84142a72ee3386" translate="yes" xml:space="preserve">
          <source>stub.onSecondCall()</source>
          <target state="translated">stub.onSecondCall()</target>
        </trans-unit>
        <trans-unit id="990ae9752d4f65ec89d063cba1c77bb33b8a2989" translate="yes" xml:space="preserve">
          <source>stub.onThirdCall()</source>
          <target state="translated">stub.onThirdCall()</target>
        </trans-unit>
        <trans-unit id="27061a0c39926ae29d0ed56caefddbaea3c8e112" translate="yes" xml:space="preserve">
          <source>stub.rejects()</source>
          <target state="translated">stub.rejects()</target>
        </trans-unit>
        <trans-unit id="5087f67d1a7c8a6aff3fd8b199c906d4cbd58281" translate="yes" xml:space="preserve">
          <source>stub.reset()</source>
          <target state="translated">stub.reset()</target>
        </trans-unit>
        <trans-unit id="800ce3ee84c7f6d4f42b33e908d99a8153c41c47" translate="yes" xml:space="preserve">
          <source>stub.resetBehavior()</source>
          <target state="translated">stub.resetBehavior()</target>
        </trans-unit>
        <trans-unit id="7d9d6e23e4427904175176948cf2ea38283c1859" translate="yes" xml:space="preserve">
          <source>stub.resetHistory()</source>
          <target state="translated">stub.resetHistory()</target>
        </trans-unit>
        <trans-unit id="38ad0c7eae3b663e547a195ecb94c2a4f5ed0cdb" translate="yes" xml:space="preserve">
          <source>stub.resolves()</source>
          <target state="translated">stub.resolves()</target>
        </trans-unit>
        <trans-unit id="0b4603cf2fe261a0b48c8f186868309c2fe6b5ac" translate="yes" xml:space="preserve">
          <source>stub.resolvesArg()</source>
          <target state="translated">stub.resolvesArg()</target>
        </trans-unit>
        <trans-unit id="0291e3e5bad9091bccd5b4049db047f70064b896" translate="yes" xml:space="preserve">
          <source>stub.returns()</source>
          <target state="translated">stub.returns()</target>
        </trans-unit>
        <trans-unit id="6bfa5de539fd379825c9acf2e8dd2fa6e7118ac2" translate="yes" xml:space="preserve">
          <source>stub.returnsArg()</source>
          <target state="translated">stub.returnsArg()</target>
        </trans-unit>
        <trans-unit id="ce0ec7133996ab2c649c3209752e194046422a7b" translate="yes" xml:space="preserve">
          <source>stub.returnsThis()</source>
          <target state="translated">stub.returnsThis()</target>
        </trans-unit>
        <trans-unit id="81181fe1e9aacb2a63a4b35c730fc783e166fb7e" translate="yes" xml:space="preserve">
          <source>stub.set()</source>
          <target state="translated">stub.set()</target>
        </trans-unit>
        <trans-unit id="d32149da6476c525c61ccaf5a5ce52299988b621" translate="yes" xml:space="preserve">
          <source>stub.throws()</source>
          <target state="translated">stub.throws()</target>
        </trans-unit>
        <trans-unit id="396f1d06deeca4b6f48186ead4c58aa4525debbe" translate="yes" xml:space="preserve">
          <source>stub.usingPromise()</source>
          <target state="translated">stub.usingPromise()</target>
        </trans-unit>
        <trans-unit id="abf9e6bbfed10aea9d25fa35d32a3f3f7afd6527" translate="yes" xml:space="preserve">
          <source>stub.value()</source>
          <target state="translated">stub.value()</target>
        </trans-unit>
        <trans-unit id="b66108019ca3a56c9e3e87e1b334c5aeb20f05a5" translate="yes" xml:space="preserve">
          <source>stub.withArgs()</source>
          <target state="translated">stub.withArgs()</target>
        </trans-unit>
        <trans-unit id="71911424d32af44e58bf8eef098918447d0bf18c" translate="yes" xml:space="preserve">
          <source>stub.yield()</source>
          <target state="translated">stub.yield()</target>
        </trans-unit>
        <trans-unit id="fb078acfd6d1df0f7648f3adda48fb0c3af2de23" translate="yes" xml:space="preserve">
          <source>stub.yieldTo()</source>
          <target state="translated">stub.yieldTo()</target>
        </trans-unit>
        <trans-unit id="9f5eb39c42063df8afa66f3795f10b75a8e5af0d" translate="yes" xml:space="preserve">
          <source>stub.yields()</source>
          <target state="translated">stub.yields()</target>
        </trans-unit>
        <trans-unit id="04acab4127f4156d89b57eb744ede2a17c3676b8" translate="yes" xml:space="preserve">
          <source>stub.yieldsOn()</source>
          <target state="translated">stub.yieldsOn()</target>
        </trans-unit>
        <trans-unit id="611357510ab15b88fbf4b6e9b2a65fb4ff40d81b" translate="yes" xml:space="preserve">
          <source>stub.yieldsRight()</source>
          <target state="translated">stub.yieldsRight()</target>
        </trans-unit>
        <trans-unit id="658bcf2cbfcf3a9a55f15b94de660f751bc79f1d" translate="yes" xml:space="preserve">
          <source>stub.yieldsTo()</source>
          <target state="translated">stub.yieldsTo()</target>
        </trans-unit>
        <trans-unit id="64edbc4a6fdcc0c684256d5349c7e56911a2f8d6" translate="yes" xml:space="preserve">
          <source>stub.yieldsToOn()</source>
          <target state="translated">stub.yieldsToOn()</target>
        </trans-unit>
        <trans-unit id="5c57e81f750e1396a5c7e322e40e6362c1092ec1" translate="yes" xml:space="preserve">
          <source>the formatted value of the &lt;var&gt;n&lt;/var&gt;th argument passed to &lt;code&gt;printf&lt;/code&gt;</source>
          <target state="translated">传递给 &lt;code&gt;printf&lt;/code&gt; 的第 &lt;var&gt;n&lt;/var&gt; 个参数的格式值</target>
        </trans-unit>
        <trans-unit id="79da8ad2c158a69c443b905af72db8850530f8d5" translate="yes" xml:space="preserve">
          <source>the name of the spy &quot;spy&quot; by default)</source>
          <target state="translated">间谍的名字,默认为 &quot;间谍&quot;)</target>
        </trans-unit>
        <trans-unit id="e5281280f25aee6392b2259ce02004ab0d8ebc72" translate="yes" xml:space="preserve">
          <source>the number of times the spy was called, in words (&quot;once&quot;, &quot;twice&quot;, etc.)</source>
          <target state="translated">间谍被叫的次数,用词语表示(&quot;一次&quot;、&quot;两次 &quot;等)。</target>
        </trans-unit>
        <trans-unit id="a79ac3573f9ee88ce8b581256c74084519e05480" translate="yes" xml:space="preserve">
          <source>time may be negative, which causes the clock to change but won&amp;rsquo;t fire any callbacks.</source>
          <target state="translated">时间可能为负，这会导致时钟发生变化，但不会触发任何回调。</target>
        </trans-unit>
        <trans-unit id="6fea03e28120073de8a075c0d176be765cacd6ec" translate="yes" xml:space="preserve">
          <source>useFakeServer</source>
          <target state="translated">useFakeServer</target>
        </trans-unit>
        <trans-unit id="bc408d8e69880df345d4aafd1ed6c4a37ba2807c" translate="yes" xml:space="preserve">
          <source>useFakeTimers</source>
          <target state="translated">useFakeTimers</target>
        </trans-unit>
        <trans-unit id="5d96ee558dd7b88eef0bd7040d54febb3570cb0a" translate="yes" xml:space="preserve">
          <source>will merge in extra defaults analogous to:</source>
          <target state="translated">将合并在额外的默认值中,类似于。</target>
        </trans-unit>
        <trans-unit id="3fcd031c603faac056e215662eaaa97666772c5a" translate="yes" xml:space="preserve">
          <source>xhr.onCreate</source>
          <target state="translated">xhr.onCreate</target>
        </trans-unit>
        <trans-unit id="c9d8116af9b78fccc71b07d49fea02fecd13a81e" translate="yes" xml:space="preserve">
          <source>xhr.restore()</source>
          <target state="translated">xhr.restore()</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
