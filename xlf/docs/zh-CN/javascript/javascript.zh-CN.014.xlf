<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="1cd36e9e374ad9091fa6699ae6fe45d18730e8eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;multiline&lt;/code&gt; property indicates whether or not the &quot;&lt;code&gt;m&lt;/code&gt;&quot; flag is used with the regular expression. &lt;code&gt;multiline&lt;/code&gt; is a read-only property of an individual regular expression instance.</source>
          <target state="translated">所述 &lt;code&gt;multiline&lt;/code&gt; 属性指示&amp;ldquo;是否 &lt;code&gt;m&lt;/code&gt; &amp;rdquo;标志用于与正则表达式。 &lt;code&gt;multiline&lt;/code&gt; 是单个正则表达式实例的只读属性。</target>
        </trans-unit>
        <trans-unit id="558f554fcdc8ea52cd4b8fe404a0f920fe941d72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; parameter is the name of the &quot;module object&quot; which will be used as a kind of namespace to refer to the exports. The &lt;code&gt;export&lt;/code&gt; parameters specify individual named exports, while the &lt;code&gt;import * as name&lt;/code&gt; syntax imports all of them. Below are examples to clarify the syntax.</source>
          <target state="translated">该 &lt;code&gt;name&lt;/code&gt; 参数是将被用来作为一种命名空间来指代出口&amp;ldquo;模块对象&amp;rdquo;的名称。 &lt;code&gt;export&lt;/code&gt; 参数指定单独的命名导出，而 &lt;code&gt;import * as name&lt;/code&gt; 语法则导入所有这些导出。以下是阐明语法的示例。</target>
        </trans-unit>
        <trans-unit id="c2fd4b993fc5004622c5bb00bf202352054f7967" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; property returns the name of a function statement.</source>
          <target state="translated">该 &lt;code&gt;name&lt;/code&gt; 属性返回函数声明的名称。</target>
        </trans-unit>
        <trans-unit id="2283ba7d359450bc81731af9b0a2b87f569352d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new.target&lt;/code&gt; property is a meta property that is available to all functions. In &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt;, &lt;code&gt;new.target&lt;/code&gt; refers to the &lt;code&gt;new.target&lt;/code&gt; of the surrounding function.</source>
          <target state="translated">该 &lt;code&gt;new.target&lt;/code&gt; 属性是元属性，它适用于所有功能。在&lt;a href=&quot;../functions/arrow_functions&quot;&gt;箭头函数中&lt;/a&gt;， &lt;code&gt;new.target&lt;/code&gt; 是指周围函数的 &lt;code&gt;new.target&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="05d72bd7d6c2faf93d2bfa75c49ab72c07e3d655" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new.target&lt;/code&gt; pseudo-property is available in all functions.</source>
          <target state="translated">该 &lt;code&gt;new.target&lt;/code&gt; 伪属性是所有功能可用。</target>
        </trans-unit>
        <trans-unit id="7ce76926b68cdc3a461eccb5b461dabd528f74bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new.target&lt;/code&gt; syntax consists of the keyword &lt;code&gt;&quot;new&lt;/code&gt;&quot;, a dot, and a property name &lt;code&gt;&quot;target&quot;&lt;/code&gt;. Normally &quot;&lt;code&gt;new.&quot;&lt;/code&gt; serves as the context for a property access, but here &lt;code&gt;&quot;new.&quot;&lt;/code&gt; is not really an object. In constructor calls, however, &lt;code&gt;new.target&lt;/code&gt; refers to the constructor invoked by &lt;code&gt;new&lt;/code&gt; and so &quot;&lt;code&gt;new.&lt;/code&gt;&quot; becomes a virtual context.</source>
          <target state="translated">该 &lt;code&gt;new.target&lt;/code&gt; 语法包括关键字的 &lt;code&gt;&quot;new&lt;/code&gt; &amp;rdquo;，一个点，一个属性名称 &lt;code&gt;&quot;target&quot;&lt;/code&gt; 。通常是&amp;ldquo; &lt;code&gt;new.&quot;&lt;/code&gt; 用作属性访问的上下文，但此处为 &lt;code&gt;&quot;new.&quot;&lt;/code&gt; 不是一个真正的对象。但是，在构造函数调用中， &lt;code&gt;new.target&lt;/code&gt; 指的是由 &lt;code&gt;new&lt;/code&gt; 调用的构造函数，因此&amp;ldquo; &lt;code&gt;new.&lt;/code&gt; &amp;rdquo;成为虚拟上下文。</target>
        </trans-unit>
        <trans-unit id="a5874cb5dc6b171fd19f5df59c381687a5fb33db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new.target&lt;/code&gt; syntax consists of the keyword &lt;code&gt;new&lt;/code&gt;, a dot, and the identifier &lt;code&gt;target&lt;/code&gt;. Normally, the left-hand side of the dot is the object on which property access is performed, but here, &lt;code&gt;new&lt;/code&gt; is not an object.</source>
          <target state="translated">所述 &lt;code&gt;new.target&lt;/code&gt; 语法由关键字的 &lt;code&gt;new&lt;/code&gt; ，点，以及所述标识符 &lt;code&gt;target&lt;/code&gt; 。通常，点的左侧是在其上执行属性访问的对象，但是在这里， &lt;code&gt;new&lt;/code&gt; 不是对象。</target>
        </trans-unit>
        <trans-unit id="ef5a6e0bacf2e5d1583aab92e455acd5428dabb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; keyword does the following things:</source>
          <target state="translated">在 &lt;code&gt;new&lt;/code&gt; 关键字做以下的事情：</target>
        </trans-unit>
        <trans-unit id="b6c4ae8e0eb36faba42bc6c19096d13e68106dc0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.</source>
          <target state="translated">在 &lt;code&gt;new&lt;/code&gt; 让开发人员创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一。</target>
        </trans-unit>
        <trans-unit id="9cd6623e561ade5b01d90352a992281d58b6ac45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; operator creates an instance of a constructor.</source>
          <target state="translated">在 &lt;code&gt;new&lt;/code&gt; 运营商创建一个构造函数的一个实例。</target>
        </trans-unit>
        <trans-unit id="5ed10ac2bb10914a1fdba3a5113f074619f861c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;next()&lt;/code&gt; method must always return an object with appropriate properties including &lt;code&gt;done&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. If a non-object value gets returned (such as &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;), a &lt;a href=&quot;global_objects/typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;&quot;iterator.next() returned a non-object value&quot;&lt;/code&gt;) will be thrown.</source>
          <target state="translated">的 &lt;code&gt;next()&lt;/code&gt; 方法必须始终以适当的性能，包括返回一个对象 &lt;code&gt;done&lt;/code&gt; 和 &lt;code&gt;value&lt;/code&gt; 。如果返回非对象值（例如 &lt;code&gt;false&lt;/code&gt; 或 &lt;code&gt;undefined&lt;/code&gt; ），则将引发&lt;a href=&quot;global_objects/typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;&quot;iterator.next() returned a non-object value&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="462d4bdc4b9f4c3dd5b515891749cd7ae8060390" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;next()&lt;/code&gt; method returns an object with two properties &lt;code&gt;done&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. You can also provide a parameter to the &lt;code&gt;next&lt;/code&gt; method to send a value to the generator.</source>
          <target state="translated">的 &lt;code&gt;next()&lt;/code&gt; 方法返回具有两个属性的对象 &lt;code&gt;done&lt;/code&gt; 和 &lt;code&gt;value&lt;/code&gt; 。您还可以 &lt;code&gt;next&lt;/code&gt; 方法提供参数，以将值发送到生成器。</target>
        </trans-unit>
        <trans-unit id="e21521d991c151367409a72b02a44ae78a0be060" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;next&lt;/code&gt; method always has to return an object with appropriate properties including &lt;code&gt;done&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. If a non-object value gets returned (such as &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;), a &lt;a href=&quot;global_objects/typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (&quot;iterator.next() returned a non-object value&quot;) will be thrown.</source>
          <target state="translated">在 &lt;code&gt;next&lt;/code&gt; 方法始终必须具有适当的性质，包括返回一个对象 &lt;code&gt;done&lt;/code&gt; 和 &lt;code&gt;value&lt;/code&gt; 。如果返回一个非对象值（例如 &lt;code&gt;false&lt;/code&gt; 或 &lt;code&gt;undefined&lt;/code&gt; ），则将引发&lt;a href=&quot;global_objects/typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;（&amp;ldquo; iterator.next（）返回一个非对象值&amp;rdquo;）。</target>
        </trans-unit>
        <trans-unit id="ef2d37084de751d87628b4d81e7e8295c61fe04e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;normalize()&lt;/code&gt; method helps solve this problem by converting a string into a normalized form common for all sequences of code points that represent the same characters. There are two main normalization forms, one based on &lt;strong&gt;canonical equivalence&lt;/strong&gt; and the other based on &lt;strong&gt;compatibility&lt;/strong&gt;.</source>
          <target state="translated">的 &lt;code&gt;normalize()&lt;/code&gt; 方法有助于通过将字符串转换成归一化的形式共同用于表示相同的字符代码点的所有序列解决这个问题。有两种主要的规范化形式，一种基于&lt;strong&gt;规范&lt;/strong&gt;对等，另一种基于&lt;strong&gt;兼容性&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="f174fb73ba3588cb8caa57f832fa3eb95986aa78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;normalize()&lt;/code&gt; method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first).</source>
          <target state="translated">的 &lt;code&gt;normalize()&lt;/code&gt; 方法返回给定的字符串的Unicode范式（如果该值不是字符串，它会被转换为一个第一）。</target>
        </trans-unit>
        <trans-unit id="88b96eb2c80b76f415dea15686da060a9a241fdd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;normalize()&lt;/code&gt; method returns the Unicode Normalization Form of the string.</source>
          <target state="translated">的 &lt;code&gt;normalize()&lt;/code&gt; 方法返回字符串的Unicode范式。</target>
        </trans-unit>
        <trans-unit id="4aff30fdae8f257c106e47a8bb7dd1011781b3a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;normalize()&lt;/code&gt; method returns the specified Unicode Normalization Form of the string. It does not affect the value of the string itself.</source>
          <target state="translated">的 &lt;code&gt;normalize()&lt;/code&gt; 方法返回的字符串指定的Unicode范式。它不会影响字符串本身的值。</target>
        </trans-unit>
        <trans-unit id="8970c03025d4ded0d662a33a3f3917b925ab0b14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument must be an object with properties that vary between constructors and functions. If the &lt;code&gt;options&lt;/code&gt; argument is not provided or is undefined, default values are used for all properties.</source>
          <target state="translated">在 &lt;code&gt;options&lt;/code&gt; 参数必须与构造和功能之间变化属性的对象。如果未提供 &lt;code&gt;options&lt;/code&gt; 参数或未定义options参数，则所有属性均使用默认值。</target>
        </trans-unit>
        <trans-unit id="7719adbf278a24b0a2959d09a64c183dd7aadb86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ownKeys()&lt;/code&gt; method must return an enumerable object.</source>
          <target state="translated">所述 &lt;code&gt;ownKeys()&lt;/code&gt; 方法必须返回一个枚举对象。</target>
        </trans-unit>
        <trans-unit id="755c639a04dde41cfac04b322a645ce06eb3162a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ownKeys&lt;/code&gt; method must return an enumerable object.</source>
          <target state="translated">该 &lt;code&gt;ownKeys&lt;/code&gt; 方法必须返回一个枚举对象。</target>
        </trans-unit>
        <trans-unit id="ecbfd2872cecfb72bb48dc7cf45ebe8a9cf8640f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;padEnd()&lt;/code&gt; method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.</source>
          <target state="translated">所述 &lt;code&gt;padEnd()&lt;/code&gt; 方法垫当前字符串与给定字符串（重复，如果需要的话），使得得到的字符串达到给定的长度。从当前字符串的末尾（右侧）开始应用填充。</target>
        </trans-unit>
        <trans-unit id="9a0f789f93aff090a4688a388b965b25001a2ebf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;padEnd()&lt;/code&gt; method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end of the current string.</source>
          <target state="translated">所述 &lt;code&gt;padEnd()&lt;/code&gt; 方法垫当前字符串与给定字符串（重复，如果需要的话），使得得到的字符串达到给定的长度。从当前字符串的末尾开始应用填充。</target>
        </trans-unit>
        <trans-unit id="18cee9d88b83b975af2ab16ea8f8315d121feff9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;padStart()&lt;/code&gt; method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start (left) of the current string.</source>
          <target state="translated">所述 &lt;code&gt;padStart()&lt;/code&gt; 方法垫当前字符串与另一个字符串（多次，如果需要的话），直到得到的字符串达到给定长度。从当前字符串的开头（左侧）开始应用填充。</target>
        </trans-unit>
        <trans-unit id="e5c2e44c90045f75da840c8e507e807f042a0992" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;padStart()&lt;/code&gt; method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start of the current string.</source>
          <target state="translated">所述 &lt;code&gt;padStart()&lt;/code&gt; 方法垫当前字符串与另一个字符串（多次，如果需要的话），直到得到的字符串达到给定长度。从当前字符串的开头开始应用填充。</target>
        </trans-unit>
        <trans-unit id="4808f0c27dc8a30db41eae76935e7000392c6c7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parse()&lt;/code&gt; method takes a date string (such as &quot;&lt;code&gt;2011-10-10T14:48:00&lt;/code&gt;&quot;) and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.</source>
          <target state="translated">的 &lt;code&gt;parse()&lt;/code&gt; 方法需要一个日期字符串（如&amp;ldquo; &lt;code&gt;2011-10-10T14:48:00&lt;/code&gt; &amp;rdquo;），并返回的毫秒数自1970年1月1日00:00:00 UTC。</target>
        </trans-unit>
        <trans-unit id="ff782796e7914cb522d339da2ed9982858565d69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parse()&lt;/code&gt; method takes a date string (such as &lt;code&gt;&quot;Dec 25, 1995&quot;&lt;/code&gt;) and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC. This function is useful for setting date values based on string values, for example in conjunction with the &lt;a href=&quot;settime&quot;&gt;&lt;code&gt;setTime()&lt;/code&gt;&lt;/a&gt; method and the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">的 &lt;code&gt;parse()&lt;/code&gt; 方法需要一个日期字符串（如 &lt;code&gt;&quot;Dec 25, 1995&quot;&lt;/code&gt; ），并且由于00:00:00 1970年1月1日，UTC返回的毫秒数。此函数对于基于字符串值设置日期值很有用，例如，结合&lt;a href=&quot;settime&quot;&gt; &lt;code&gt;setTime()&lt;/code&gt; &lt;/a&gt;方法和&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="aefa58dbac2b38e433d64f17d1a342609b458b98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseInt&lt;/code&gt; function converts its first argument to a string, parses it, and returns an integer or &lt;code&gt;NaN&lt;/code&gt;. If not &lt;code&gt;NaN&lt;/code&gt;, the returned value will be the integer that is the first argument taken as a number in the specified &lt;var&gt;radix&lt;/var&gt; (base). For example, a &lt;var&gt;radix&lt;/var&gt; of 10 indicates to convert from a decimal number, 8 octal, 16 hexadecimal, and so on. For radices above &lt;code&gt;10&lt;/code&gt;, the letters of the alphabet indicate numerals greater than &lt;code&gt;9&lt;/code&gt;. For example, for hexadecimal numbers (base 16), &lt;code&gt;A&lt;/code&gt; through &lt;code&gt;F&lt;/code&gt; are used.</source>
          <target state="translated">的 &lt;code&gt;parseInt&lt;/code&gt; 函数函数将其第一个参数转换为字符串，分析它，并返回整数或 &lt;code&gt;NaN&lt;/code&gt; 的。如果不是 &lt;code&gt;NaN&lt;/code&gt; ，则返回值将是整数，该整数是指定 &lt;var&gt;radix&lt;/var&gt; （基数）中作为数字的第一个参数。例如， &lt;var&gt;radix&lt;/var&gt; 10表示要从十进制数，八进制八进制，十六进制十六进制等进行转换。对于大于 &lt;code&gt;10&lt;/code&gt; 的半径，字母表中的字母表示大于 &lt;code&gt;9&lt;/code&gt; 的数字。例如，对于十六进制数（基数为16）， &lt;code&gt;A&lt;/code&gt; 通过 &lt;code&gt;F&lt;/code&gt; 被使用。</target>
        </trans-unit>
        <trans-unit id="f9b36a84f03f3882e20c9bfe3db9559a57264364" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseInt&lt;/code&gt; function converts its first argument to a string, parses that string, then returns an integer or &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;parseInt&lt;/code&gt; 函数函数将其第一个参数转换为字符串，解析该字符串，则返回一个整数或 &lt;code&gt;NaN&lt;/code&gt; 的。</target>
        </trans-unit>
        <trans-unit id="62e0bb0ab90ea771feccdb11142c9389f76ef1c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseInt&lt;/code&gt; function produces an integer value dictated by interpretation of the contents of the string argument according to the specified radix. Leading white space in string is ignored. If radix is undefined or &lt;code&gt;0&lt;/code&gt;, it is assumed to be &lt;code&gt;10&lt;/code&gt; except when the number begins with the character pairs &lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;0X&lt;/code&gt;, in which case a radix of 16 is assumed.</source>
          <target state="translated">的 &lt;code&gt;parseInt&lt;/code&gt; 函数函数产生通过根据指定基数中的字符串参数中的内容解释系列所确定的整数值。字符串中的前导空格将被忽略。如果未定义radix或 &lt;code&gt;0&lt;/code&gt; ，则假定数字为 &lt;code&gt;10&lt;/code&gt; ,除非数字以字符对 &lt;code&gt;0x&lt;/code&gt; 或 &lt;code&gt;0X&lt;/code&gt; 开头（在这种情况下，假定基数为16）。</target>
        </trans-unit>
        <trans-unit id="60cb23ca2d03e1e69ba7325b8e0ecb492b1f0a3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseInt&lt;/code&gt; function produces an integer value dictated by interpretation of the contents of the string argument according to the specified radix. Leading whitespace in string is ignored. If radix is &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt;, it is assumed to be &lt;code&gt;10&lt;/code&gt; except when the number begins with the character pairs &lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;0X&lt;/code&gt;, in which case a radix of &lt;code&gt;16&lt;/code&gt; is assumed.</source>
          <target state="translated">的 &lt;code&gt;parseInt&lt;/code&gt; 函数函数产生通过根据指定基数中的字符串参数中的内容解释系列所确定的整数值。字符串中的前导空格将被忽略。如果 &lt;code&gt;undefined&lt;/code&gt; radix或 &lt;code&gt;0&lt;/code&gt; ，则假定数字为 &lt;code&gt;10&lt;/code&gt; ,除非数字以字符对 &lt;code&gt;0x&lt;/code&gt; 或 &lt;code&gt;0X&lt;/code&gt; 开头（在这种情况下，假定基数为 &lt;code&gt;16&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7a829630c8f2bfefb550d3b50699858ebd9dcfe7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pop()&lt;/code&gt; method removes the &lt;strong&gt;last&lt;/strong&gt; element from an array and returns that element. This method changes the length of the array.</source>
          <target state="translated">的 &lt;code&gt;pop()&lt;/code&gt; 方法去除&lt;strong&gt;最后&lt;/strong&gt;从数组中并返回该元素的元素。此方法更改数组的长度。</target>
        </trans-unit>
        <trans-unit id="c60f04904ead449c08e1e81c8531e7adcc2b41fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pop&lt;/code&gt; method removes the last element from an array and returns that value to the caller.</source>
          <target state="translated">的 &lt;code&gt;pop&lt;/code&gt; 方法从数组中删除最后一个元素并返回该值给调用者。</target>
        </trans-unit>
        <trans-unit id="1d0104d079fef471434a46d2e34ba6e1be833275" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;preventExtensions()&lt;/code&gt; method must return a boolean value.</source>
          <target state="translated">所述 &lt;code&gt;preventExtensions()&lt;/code&gt; 方法必须返回一个布尔值。</target>
        </trans-unit>
        <trans-unit id="9ab16e0fc0db89306a6784360841c26c4479a73b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;preventExtensions&lt;/code&gt; method must return a boolean value.</source>
          <target state="translated">该 &lt;code&gt;preventExtensions&lt;/code&gt; 方法必须返回一个布尔值。</target>
        </trans-unit>
        <trans-unit id="8f32a090ceccd68383b7ba5f870e5dd9561a6baf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;products&lt;/code&gt; proxy object evaluates the passed value and converts it to an array if needed. The object also supports an extra property called &lt;code&gt;latestBrowser&lt;/code&gt; both as a getter and a setter.</source>
          <target state="translated">的 &lt;code&gt;products&lt;/code&gt; ，如果需要代理对象评估传入的值并将其转换为一个数组。该对象还支持称为getter和setter 的额外属性，称为 &lt;code&gt;latestBrowser&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="34d55bbc82b47848857e3ac616ac13cf5700cad2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;push&lt;/code&gt; method appends values to an array.</source>
          <target state="translated">所述 &lt;code&gt;push&lt;/code&gt; 方法附加值的数组。</target>
        </trans-unit>
        <trans-unit id="f2b1ac6d78b22069c75e95012819b84e262269f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;race&lt;/code&gt; function returns a &lt;code&gt;Promise&lt;/code&gt; that is settled the same way (and takes the same value) as the first promise that settles amongst the promises of the iterable passed as an argument.</source>
          <target state="translated">在 &lt;code&gt;race&lt;/code&gt; 函数返回一个 &lt;code&gt;Promise&lt;/code&gt; 是解决以同样的方式（并采取相同的值）作为第一个承诺就解决了迭代的承诺，其中包括作为参数传递。</target>
        </trans-unit>
        <trans-unit id="633d24f997230b8d766489544feb01d87ea952bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;race&lt;/code&gt; function returns a &lt;code&gt;Promise&lt;/code&gt; that is settled the same way (and takes the same value) as the first promise that settles amongst the promises of the iterable passed as argument.</source>
          <target state="translated">在 &lt;code&gt;race&lt;/code&gt; 函数返回一个 &lt;code&gt;Promise&lt;/code&gt; 是解决以同样的方式（并采取相同的值）作为第一个承诺就解决了迭代的承诺之间传递的参数。</target>
        </trans-unit>
        <trans-unit id="9394adc5bf6b564bdf7a1d54360b869364854ec9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reduce()&lt;/code&gt; method executes the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; once for each assigned value present in the array, taking four arguments:</source>
          <target state="translated">的 &lt;code&gt;reduce()&lt;/code&gt; 方法执行 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 一次为每个数组中存在的分配的值，取四个参数：</target>
        </trans-unit>
        <trans-unit id="33aa038fc6863abbea6e118da1e8c10abf78154f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reduce&lt;/code&gt; method executes the &lt;code&gt;callback&lt;/code&gt; function once for each element present in the typed array, excluding holes in the typed array, receiving four arguments: the initial value (or value from the previous &lt;code&gt;callback&lt;/code&gt; call), the value of the current element, the current index, and the typed array over which iteration is occurring.</source>
          <target state="translated">的 &lt;code&gt;reduce&lt;/code&gt; 方法执行 &lt;code&gt;callback&lt;/code&gt; 函数一次为每个存在的类型化的阵列中的元件，但不包括类型化阵列中的孔，容纳四个参数：初始值（或值从以前的 &lt;code&gt;callback&lt;/code&gt; 调用），所述当前元素的值，则当前索引，以及发生迭代的类型化数组。</target>
        </trans-unit>
        <trans-unit id="20ffacb4e44ab32601d9f4fb5d99c50d57cecf13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reduceRight&lt;/code&gt; method executes the callback function once for each element present in the typed array, excluding holes in the typed array, receiving four arguments: the initial value (or value from the previous callback call), the value of the current element, the current index, and the typed array over which iteration is occurring.</source>
          <target state="translated">该 &lt;code&gt;reduceRight&lt;/code&gt; 方法执行回调函数一次为每个存在的类型化的阵列中的元件，但不包括类型化阵列中的孔，容纳四个参数：初始值（或值从以前的回叫呼叫）时，当前元素的值，则当前索引，以及发生迭代的类型化数组。</target>
        </trans-unit>
        <trans-unit id="cce112d0bfc2ec45db566d73f44aa45323dae8bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;register()&lt;/code&gt; method registers an object with a &lt;a href=&quot;../finalizationregistry&quot;&gt;&lt;code&gt;FinalizationRegistry&lt;/code&gt;&lt;/a&gt; instance so that if the object is garbage-collected, the registry's callback may get called.</source>
          <target state="translated">该 &lt;code&gt;register()&lt;/code&gt; 方法注册了一个对象&lt;a href=&quot;../finalizationregistry&quot;&gt; &lt;code&gt;FinalizationRegistry&lt;/code&gt; &lt;/a&gt;实例，这样如果对象是垃圾回收，注册表中的回调可能被调用。</target>
        </trans-unit>
        <trans-unit id="7f9e1929ca6391ece612b3add43641e3689412f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repeat()&lt;/code&gt; method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.</source>
          <target state="translated">在 &lt;code&gt;repeat()&lt;/code&gt; 方法构造并返回包含在它被调用的字符串拷贝，拼接在一起的指定数量的新字符串。</target>
        </trans-unit>
        <trans-unit id="30b629a773a8dd7d41ea9e8b169140d5bf21911d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replace()&lt;/code&gt; method returns a new string with some or all matches of a &lt;code&gt;pattern&lt;/code&gt; replaced by a &lt;code&gt;replacement&lt;/code&gt;. The &lt;code&gt;pattern&lt;/code&gt; can be a string or a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt;, and the &lt;code&gt;replacement&lt;/code&gt; can be a string or a function to be called for each match. If &lt;code&gt;pattern&lt;/code&gt; is a string, only the first occurrence will be replaced.</source>
          <target state="translated">的 &lt;code&gt;replace()&lt;/code&gt; 方法返回与一些或所有相匹配的新的字符串 &lt;code&gt;pattern&lt;/code&gt; 由一个替换 &lt;code&gt;replacement&lt;/code&gt; 。所述 &lt;code&gt;pattern&lt;/code&gt; 可以是一个字符串或一&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;，以及 &lt;code&gt;replacement&lt;/code&gt; 可以是字符串或一个函数被调用为每个匹配。如果 &lt;code&gt;pattern&lt;/code&gt; 是字符串，则只会替换第一个匹配项。</target>
        </trans-unit>
        <trans-unit id="0a935ec2180c558615b2d3c4e3ec536bcd6ce4a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replaceAll()&lt;/code&gt; method returns a new string with all matches of a &lt;code&gt;pattern&lt;/code&gt; replaced by a &lt;code&gt;replacement&lt;/code&gt;. The &lt;code&gt;pattern&lt;/code&gt; can be a string or a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt;, and the &lt;code&gt;replacement&lt;/code&gt; can be a string or a function to be called for each match.</source>
          <target state="translated">所述 &lt;code&gt;replaceAll()&lt;/code&gt; 方法返回一个新的字符串用的所有比赛 &lt;code&gt;pattern&lt;/code&gt; 替换为 &lt;code&gt;replacement&lt;/code&gt; 。所述 &lt;code&gt;pattern&lt;/code&gt; 可以是一个字符串或一&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;，以及 &lt;code&gt;replacement&lt;/code&gt; 可以是字符串或一个函数被调用为每个匹配。</target>
        </trans-unit>
        <trans-unit id="341f412d5f7d5aab08aaa95acf74d7f837961b69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replacer&lt;/code&gt; parameter</source>
          <target state="translated">该 &lt;code&gt;replacer&lt;/code&gt; 参数</target>
        </trans-unit>
        <trans-unit id="0d734f45eeb768c565804623ec5ec86381be24ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replacer&lt;/code&gt; parameter can be either a function or an array.</source>
          <target state="translated">的 &lt;code&gt;replacer&lt;/code&gt; 参数可以是一个函数或数组。</target>
        </trans-unit>
        <trans-unit id="c2450601fa3ac0c8bfd14c1c790d86d5d1c874f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;return()&lt;/code&gt; method returns the given value and finishes the generator.</source>
          <target state="translated">的 &lt;code&gt;return()&lt;/code&gt; 方法返回定值，并结束该发生器。</target>
        </trans-unit>
        <trans-unit id="78aa7130e5e55b9662aeb44be141261920014bfa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;return&lt;/code&gt; ends function execution and specifies a value to be returned to the function caller.</source>
          <target state="translated">所述 &lt;code&gt;return&lt;/code&gt; 端功能执行和指定的值将被返回给函数调用者。</target>
        </trans-unit>
        <trans-unit id="1825c33bdb119cbc94fc38f165d172979bab1bb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;return&lt;/code&gt; statement is affected by &lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;automatic semicolon insertion (ASI)&lt;/a&gt;. No line terminator is allowed between the &lt;code&gt;return&lt;/code&gt; keyword and the expression.</source>
          <target state="translated">在 &lt;code&gt;return&lt;/code&gt; 语句受影响&lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;自动分号插入（ASI） &lt;/a&gt;。 &lt;code&gt;return&lt;/code&gt; 关键字和表达式之间不允许使用行终止符。</target>
        </trans-unit>
        <trans-unit id="f6344bb8ce490f4c3788216ff92bd2a2e3e9b67d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reverse()&lt;/code&gt; method reverses an array &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;in place&lt;/a&gt;&lt;/em&gt;. The first array element becomes the last, and the last array element becomes the first.</source>
          <target state="translated">在 &lt;code&gt;reverse()&lt;/code&gt; 方法将反转的阵列&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;就位&lt;/a&gt;&lt;/em&gt;。第一个数组元素成为最后一个，最后一个数组元素成为第一个。</target>
        </trans-unit>
        <trans-unit id="94001dce7d6c0277531fc208a30177bf512bc983" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reverse&lt;/code&gt; method transposes the elements of the calling array object in place, mutating the array, and returning a reference to the array.</source>
          <target state="translated">该 &lt;code&gt;reverse&lt;/code&gt; 方法调换代替主叫阵列对象的元素，突变该阵列，并返回到数组的引用。</target>
        </trans-unit>
        <trans-unit id="73fda5f3ce4df46d6bd3cfa77cfdb40d794c10ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;search()&lt;/code&gt; method executes a search for a match between a regular expression and this &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">的 &lt;code&gt;search()&lt;/code&gt; 方法执行用于正则表达式和本之间的匹配的搜索&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="b2bf1a7a2982dc51e4d59127039f64d0452ca792" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set()&lt;/code&gt; method adds a new element with a specified key and value to a &lt;code&gt;WeakMap&lt;/code&gt; object.</source>
          <target state="translated">的 &lt;code&gt;set()&lt;/code&gt; 方法增加了与指定的键和值的一个新的元素 &lt;code&gt;WeakMap&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="fb988f78d734346b8df401a4ebf8c89daaf89b7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set()&lt;/code&gt; method adds or updates an element with a specified key and a value to a &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">的 &lt;code&gt;set()&lt;/code&gt; 方法增加或更新与指定的关键字和一个值对的一个元件 &lt;code&gt;Map&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="9f45b86cf77bd6ed871bf4987ba788f5d300042d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set()&lt;/code&gt; method should return a boolean value.</source>
          <target state="translated">该 &lt;code&gt;set()&lt;/code&gt; 方法应该返回一个布尔值。</target>
        </trans-unit>
        <trans-unit id="91b89c8ef1b28ba3db99fa2d5a508436f955931e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set()&lt;/code&gt; method stores multiple values in the typed array, reading input values from a specified array.</source>
          <target state="translated">的 &lt;code&gt;set()&lt;/code&gt; 方法存储多个值的类型化的阵列中，从指定的阵列读取输入值。</target>
        </trans-unit>
        <trans-unit id="afa3d342e4bc64667929dfba353c2c5c385f97f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; method should return a boolean value. Return &lt;code&gt;true&lt;/code&gt; to indicate that assignment succeeded. If the &lt;code&gt;set&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt;, and the assignment happened in strict-mode code, a &lt;code&gt;TypeError&lt;/code&gt; will be thrown.</source>
          <target state="translated">该 &lt;code&gt;set&lt;/code&gt; 方法应返回一个布尔值。返回 &lt;code&gt;true&lt;/code&gt; 表示分配成功。如果 &lt;code&gt;set&lt;/code&gt; 方法返回 &lt;code&gt;false&lt;/code&gt; ，并且赋值发生在严格模式代码中，则将引发 &lt;code&gt;TypeError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01518a20f1590edf2677afb2701eab97cf0432cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; syntax binds an object property to a function to be called when there is an attempt to set that property.</source>
          <target state="translated">所述 &lt;code&gt;set&lt;/code&gt; 语法结合当不存在要设置该属性的尝试将被称为对象属性的函数。</target>
        </trans-unit>
        <trans-unit id="454bde7d56614d3e69b61005c20f51ab755d9203" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setBigInt64()&lt;/code&gt; method stores a signed 64-bit integer (long long) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;setBigInt64()&lt;/code&gt; 方法存储符号的64位整数（长长）在指定的字节从所述的起始位置的偏移值&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="88500af63aebb81c1209731ec086f97956468ce3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setBigUint64()&lt;/code&gt; method stores an unsigned 64-bit integer (unsigned long long) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;setBigUint64()&lt;/code&gt; 方法存储一个无符号的64位整数（无符号长长）值在指定的字节从所述的起始位置的偏移&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="45224e723f1721f9d3c13524ff9d20d789929030" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setDate()&lt;/code&gt; method sets the day of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object relative to the beginning of the currently set month.</source>
          <target state="translated">该 &lt;code&gt;setDate()&lt;/code&gt; 方法设置的当天&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;相对于当前设置月初对象。</target>
        </trans-unit>
        <trans-unit id="0d9d1bae85d41120a53a7340c0bdd89b7a51db51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setFloat32()&lt;/code&gt; method stores a signed 32-bit float (float) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;setFloat32()&lt;/code&gt; 方法存储符号的32位浮点数（浮点）在指定的字节值从起始位置的偏移&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="45a036c27a787e007cc4eccd674e04938f8975b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setFloat64()&lt;/code&gt; method stores a signed 64-bit float (double) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;setFloat64()&lt;/code&gt; 方法存储符号的64位浮点数（双）在指定的字节值从起始位置的偏移&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="75853f0bea9dcc76f1f09901ffb1b2a24eb42803" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setFullYear()&lt;/code&gt; method sets the full year for a specified date according to local time. Returns new timestamp.</source>
          <target state="translated">该 &lt;code&gt;setFullYear()&lt;/code&gt; 方法按照本地时间设置满一年的指定日期。返回新的时间戳。</target>
        </trans-unit>
        <trans-unit id="23428a9e37d33ce840e55033fafbd7c8676488da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setHours()&lt;/code&gt; method sets the hours for a specified date according to local time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">的 &lt;code&gt;setHours()&lt;/code&gt; 方法设置小时按照本地时间指定的日期，并返回的毫秒数从1970年1月1日00:00:00 UTC直到时间表示由更新的&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;的实例。</target>
        </trans-unit>
        <trans-unit id="73882f81fd5a0702c5c489eb2978efe759f4fd70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setInt16()&lt;/code&gt; method stores a signed 16-bit integer (short) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;setInt16()&lt;/code&gt; 方法存储符号的16位整数（短）在指定的字节值从起始位置的偏移&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d77d742cec0a6991749751071a2eee256c6ef115" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setInt32()&lt;/code&gt; method stores a signed 32-bit integer (long) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;setInt32()&lt;/code&gt; 方法存储符号的32位整数（长）在指定的字节值从起始位置的偏移&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="49306e42c516b8e8fbb2eb954a0b4f9f94de178b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setInt8()&lt;/code&gt; method stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;setInt8()&lt;/code&gt; 方法存储符号的8位整数（字节）在指定的字节值从起始位置的偏移&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e6ce03c23c2628b4f043524d96a70c7ec69036c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setMilliseconds()&lt;/code&gt; method sets the milliseconds for a specified date according to local time.</source>
          <target state="translated">在 &lt;code&gt;setMilliseconds()&lt;/code&gt; 方法设置毫秒按照本地时间指定的日期。</target>
        </trans-unit>
        <trans-unit id="3af72fc29cdb4e1a5fde6585640fdae002c1fe46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setMinutes()&lt;/code&gt; method sets the minutes for a specified date according to local time.</source>
          <target state="translated">在 &lt;code&gt;setMinutes()&lt;/code&gt; 方法设置分钟按照本地时间指定的日期。</target>
        </trans-unit>
        <trans-unit id="403f0919425de2bcf88cd0a132b42f328c196b20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setMonth()&lt;/code&gt; method sets the month for a specified date according to the currently set year.</source>
          <target state="translated">该 &lt;code&gt;setMonth()&lt;/code&gt; 方法根据当前设置年设定每月指定日期。</target>
        </trans-unit>
        <trans-unit id="a7019b7241d80776766a6e6b7abf0b2481f75568" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setPrototypeOf()&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;[[Prototype]]&lt;/code&gt; was successfully changed, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;setPrototypeOf()&lt;/code&gt; 方法返回 &lt;code&gt;true&lt;/code&gt; ，如果 &lt;code&gt;[[Prototype]]&lt;/code&gt; 更改成功，否则 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36506ea61e5bef89a285379403a21ba86c6d6375" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setPrototypeOf&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;[[Prototype]]&lt;/code&gt; was successfully changed, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;setPrototypeOf&lt;/code&gt; 方法返回 &lt;code&gt;true&lt;/code&gt; 如果 &lt;code&gt;[[Prototype]]&lt;/code&gt; 已成功更改，否则 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a48af94ec3f2b112ce922a1a295738d4f6e7e17d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setSeconds()&lt;/code&gt; method sets the seconds for a specified date according to local time.</source>
          <target state="translated">在 &lt;code&gt;setSeconds()&lt;/code&gt; 方法设置秒按照本地时间指定的日期。</target>
        </trans-unit>
        <trans-unit id="a096b9c2df07dc8063e8649cb0c5c1ab00cc6384" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setTime()&lt;/code&gt; method sets the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.</source>
          <target state="translated">的 &lt;code&gt;setTime()&lt;/code&gt; 方法设置&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;对象到时间，因为00:00:00 1970年1月1日，UTC表示由若干毫秒。</target>
        </trans-unit>
        <trans-unit id="de572d36f314857b2ce259d68a05e3bce5b61d39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCDate()&lt;/code&gt; method sets the day of the month for a specified date according to universal time.</source>
          <target state="translated">的 &lt;code&gt;setUTCDate()&lt;/code&gt; 方法按照通用时间设置月份中的日期在指定的日期。</target>
        </trans-unit>
        <trans-unit id="7f38365ea2d59a1194bf5f4f42e70c72249a6323" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCFullYear()&lt;/code&gt; method sets the full year for a specified date according to universal time.</source>
          <target state="translated">该 &lt;code&gt;setUTCFullYear()&lt;/code&gt; 方法按照通用时间将全年指定日期。</target>
        </trans-unit>
        <trans-unit id="a0d7e0df49c1d646e3a239a8081d192908f2580f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCHours()&lt;/code&gt; method sets the hour for a specified date according to universal time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">的 &lt;code&gt;setUTCHours()&lt;/code&gt; 方法设置小时根据通用时间指定的日期，并返回自1970年1月1日的毫秒数00:00:00 UTC直到由更新的表示的时间&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;的实例。</target>
        </trans-unit>
        <trans-unit id="7880b6e9871ab35907d380c2581378730b097670" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCMilliseconds()&lt;/code&gt; method sets the milliseconds for a specified date according to universal time.</source>
          <target state="translated">在 &lt;code&gt;setUTCMilliseconds()&lt;/code&gt; 方法设置毫秒根据通用时间指定的日期。</target>
        </trans-unit>
        <trans-unit id="3296b4db04455b2c6710477aa8a2735e0ac06e75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCMinutes()&lt;/code&gt; method sets the minutes for a specified date according to universal time.</source>
          <target state="translated">在 &lt;code&gt;setUTCMinutes()&lt;/code&gt; 方法设置分钟根据通用时间指定的日期。</target>
        </trans-unit>
        <trans-unit id="cb9bc5f6461e116f0f810368ed4497cf904f8baa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCMonth()&lt;/code&gt; method sets the month for a specified date according to universal time.</source>
          <target state="translated">所述 &lt;code&gt;setUTCMonth()&lt;/code&gt; 方法按照通用时间设定一个月指定的日期。</target>
        </trans-unit>
        <trans-unit id="c1bd3a2f0adacb7676183d4f486b7a314e7ebc56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCSeconds()&lt;/code&gt; method sets the seconds for a specified date according to universal time.</source>
          <target state="translated">在 &lt;code&gt;setUTCSeconds()&lt;/code&gt; 方法设置秒根据通用时间指定的日期。</target>
        </trans-unit>
        <trans-unit id="6403066c197b602947ff39362877ae8674531421" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUint16()&lt;/code&gt; method stores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;setUint16()&lt;/code&gt; 方法存储在指定的字节的无符号16位整数（无符号短）值从起始位置的偏移&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cf0a945544e186d0b49c0f2b8a68511e4bd62e26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUint32()&lt;/code&gt; method stores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;setUint32()&lt;/code&gt; 方法存储一个无符号的32位整数（无符号长整数）值在指定的字节从所述的起始位置的偏移&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c56402f6420e37b73178dc9c773cb8a7d5f73d33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUint8()&lt;/code&gt; method stores an unsigned 8-bit integer (byte) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;setUint8()&lt;/code&gt; 方法存储一个无符号的8位整数（字节）在指定的字节值从起始位置的偏移&lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0f2b9726fb54990042eae4de6ccc51b66a0f990b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setYear()&lt;/code&gt; method sets the year for a specified date according to local time. Because &lt;code&gt;setYear()&lt;/code&gt; does not set full years (&quot;year 2000 problem&quot;), it is no longer used and has been replaced by the &lt;a href=&quot;setfullyear&quot;&gt;&lt;code&gt;setFullYear()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">该 &lt;code&gt;setYear()&lt;/code&gt; 方法按照本地时间设置年份指定的日期。由于 &lt;code&gt;setYear()&lt;/code&gt; 不会设置完整的年份（&amp;ldquo; 2000年问题&amp;rdquo;），因此不再使用它，而已由&lt;a href=&quot;setfullyear&quot;&gt; &lt;code&gt;setFullYear()&lt;/code&gt; &lt;/a&gt;方法代替。</target>
        </trans-unit>
        <trans-unit id="75f9ec0c3f813d1eedecab4ed7911277e6aabe77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shift&lt;/code&gt; method removes the element at the zeroeth index and shifts the values at consecutive indexes down, then returns the removed value. If the &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property is 0, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">的 &lt;code&gt;shift&lt;/code&gt; 方法去除第零索引处的元素，并在连续索引向下移位的值，然后返回被删除的值。如果&lt;a href=&quot;length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;属性为0，则返回&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="76a76e674e895d0e627776ee5c2bddd01fdbcb36" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; accessor property returns the number of (unique) elements in a &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">的 &lt;code&gt;size&lt;/code&gt; 访问属性返回在（唯一）的元素数量&lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="357254a53baf90efafd44d80dc5aa277999282a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; accessor property returns the number of elements in a &lt;a href=&quot;../map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">该 &lt;code&gt;size&lt;/code&gt; 访问属性返回的元素个数&lt;a href=&quot;../map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="ba56819bf01868dc4d24b9357d94180b3fcb9e1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slice()&lt;/code&gt; method copies up to, but not including, the byte indicated by the &lt;code&gt;end&lt;/code&gt; parameter. If either &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; is negative, it refers to an index from the end of the array, as opposed to from the beginning.</source>
          <target state="translated">所述 &lt;code&gt;slice()&lt;/code&gt; 方法拷贝最多，但不包括该字节由所指示的 &lt;code&gt;end&lt;/code&gt; 参数。如果 &lt;code&gt;begin&lt;/code&gt; 或 &lt;code&gt;end&lt;/code&gt; 均为负数，则表示从数组末尾开始而不是从索引末尾开始的索引。</target>
        </trans-unit>
        <trans-unit id="8c0cff95e4409ed92bc4573e6783a353a2a717a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slice()&lt;/code&gt; method extracts a section of a string and returns it as a new string, without modifying the original string.</source>
          <target state="translated">所述 &lt;code&gt;slice()&lt;/code&gt; 方法提取的字符串并返回它作为一个新的字符串的一部分，而不需要修改原始的字符串。</target>
        </trans-unit>
        <trans-unit id="c04cfb2e51066e968e2dc4dabdc2113f452d2907" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slice()&lt;/code&gt; method returns a new &lt;code&gt;ArrayBuffer&lt;/code&gt; whose contents are a copy of this &lt;code&gt;ArrayBuffer&lt;/code&gt;'s bytes from &lt;code&gt;begin&lt;/code&gt;, inclusive, up to &lt;code&gt;end&lt;/code&gt;, exclusive.</source>
          <target state="translated">将 &lt;code&gt;slice()&lt;/code&gt; 方法返回一个新 &lt;code&gt;ArrayBuffer&lt;/code&gt; 其内容是一份本 &lt;code&gt;ArrayBuffer&lt;/code&gt; 从&amp;ldquo;s字节 &lt;code&gt;begin&lt;/code&gt; ，包容性，可达 &lt;code&gt;end&lt;/code&gt; ，排他的。</target>
        </trans-unit>
        <trans-unit id="ad02044f8b702f0b12223cf5530456882f6cb629" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slice()&lt;/code&gt; method returns a shallow copy of a portion of an array into a new array object selected from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt; (&lt;code&gt;end&lt;/code&gt; not included) where &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; represent the index of items in that array. The original array will not be modified.</source>
          <target state="translated">所述 &lt;code&gt;slice()&lt;/code&gt; 方法返回一个阵列的一部分的一个浅拷贝到选自新的数组对象 &lt;code&gt;start&lt;/code&gt; 到 &lt;code&gt;end&lt;/code&gt; （ &lt;code&gt;end&lt;/code&gt; 不包括在内），其中 &lt;code&gt;start&lt;/code&gt; 和 &lt;code&gt;end&lt;/code&gt; 代表数组中的项的索引。原始数组将不会被修改。</target>
        </trans-unit>
        <trans-unit id="93b4aadf41d545ddf2d902b3c09b49283d21b559" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slice&lt;/code&gt; method copies up to, but not including, the byte indicated by the &lt;code&gt;end&lt;/code&gt; parameter. If either &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; is negative, it refers to an index from the end of the array, as opposed to from the beginning.</source>
          <target state="translated">该 &lt;code&gt;slice&lt;/code&gt; 法拷贝最多，但不包括该字节由所指示的 &lt;code&gt;end&lt;/code&gt; 参数。如果 &lt;code&gt;begin&lt;/code&gt; 或 &lt;code&gt;end&lt;/code&gt; 为负，则它是指数组末尾的索引，而不是开头的索引。</target>
        </trans-unit>
        <trans-unit id="bc6796e69b48f93eec07acfe185d9d15372affbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slice&lt;/code&gt; method does not alter. It returns a shallow copy of elements from the original typed array.</source>
          <target state="translated">该 &lt;code&gt;slice&lt;/code&gt; 方法不会改变。它从原始类型化数组返回元素的浅表副本。</target>
        </trans-unit>
        <trans-unit id="aaf2807ffd405cc84ac738196cd3f881d6868234" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;small()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small&quot;&gt;&lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed in a small font.</source>
          <target state="translated">的 &lt;code&gt;small()&lt;/code&gt; 方法创建一个&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small&quot;&gt; &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; &lt;/a&gt;导致要显示在一个小字体的字符串HTML元素。</target>
        </trans-unit>
        <trans-unit id="f3d607529079c326abbb93cf2f3476bdd7de89b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;small()&lt;/code&gt; method creates a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/small&quot;&gt;&lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed in a small font.</source>
          <target state="translated">的 &lt;code&gt;small()&lt;/code&gt; 方法创建一个&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/small&quot;&gt; &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; &lt;/a&gt;导致要显示在一个小字体的字符串HTML元素。</target>
        </trans-unit>
        <trans-unit id="829a872efd080f7954a56045279afd8ebbac1c5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;small()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;small&amp;gt;str&amp;lt;/small&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;small()&lt;/code&gt; 方法嵌入在一个字符串 &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; 标记： &lt;code&gt;&quot;&amp;lt;small&amp;gt;str&amp;lt;/small&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="955535d457bf6af994e19c69dfc2127a394cd444" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;some()&lt;/code&gt; method executes the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; function once for each element present in the array until it finds the one where &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; returns a &lt;em&gt;truthy&lt;/em&gt; value (a value that becomes true when converted to a Boolean). If such an element is found, &lt;code&gt;some()&lt;/code&gt; immediately returns &lt;code&gt;true&lt;/code&gt;. Otherwise, &lt;code&gt;some()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is invoked only for indexes of the array with assigned values. It is not invoked for indexes which have been deleted or which have never been assigned values.</source>
          <target state="translated">在 &lt;code&gt;some()&lt;/code&gt; 方法执行 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; ，直到它找到其中一个一次为每个存在于阵列中元件功能 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 返回&lt;em&gt;truthy&lt;/em&gt;值（当转换为一个布尔值，成为真值）。如果找到了这样的元素， &lt;code&gt;some()&lt;/code&gt; 将立即返回 &lt;code&gt;true&lt;/code&gt; 。否则， &lt;code&gt;some()&lt;/code&gt; 返回 &lt;code&gt;false&lt;/code&gt; 。仅对具有指定值的数组索引调用 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 。对于已删除或从未分配值的索引，不会调用它。</target>
        </trans-unit>
        <trans-unit id="ba586ba7c5b96086fcc85ecb5494d182e5f4cfe0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;some()&lt;/code&gt; method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.</source>
          <target state="translated">在 &lt;code&gt;some()&lt;/code&gt; 方法测试所述阵列中的至少一个元素是否经过所提供的功能来实现的测试。它返回一个布尔值。</target>
        </trans-unit>
        <trans-unit id="ca6f400142a2c25332b87f4b99a76332641e98ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;some&lt;/code&gt; method executes the &lt;code&gt;callback&lt;/code&gt; function once for each element present in the typed array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a true value. If such an element is found, &lt;code&gt;some&lt;/code&gt; immediately returns &lt;code&gt;true&lt;/code&gt;. Otherwise, &lt;code&gt;some&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;some&lt;/code&gt; 方法执行 &lt;code&gt;callback&lt;/code&gt; ，直到它找到一个其中一次为每个存在的类型化的阵列中的元件功能 &lt;code&gt;callback&lt;/code&gt; 返回真值。如果找到了这样的元素，则 &lt;code&gt;some&lt;/code&gt; 元素会立即返回 &lt;code&gt;true&lt;/code&gt; 。否则， &lt;code&gt;some&lt;/code&gt; 返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9100d3ba6e1e86b77eb0b07a7f274f3e7f393fb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sort&lt;/code&gt; method can be conveniently used with &lt;a href=&quot;../../operators/function&quot;&gt;function expressions&lt;/a&gt;:</source>
          <target state="translated">该 &lt;code&gt;sort&lt;/code&gt; 方法可以方便地使用&lt;a href=&quot;../../operators/function&quot;&gt;函数表达式&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="499e2b3f7324baaf767d11bc108fa7744d9289e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; property for empty regular expressions now returns &quot;(?:)&quot; instead of an empty string. A definition for the escaping behavior has been added.</source>
          <target state="translated">现在，空正则表达式的 &lt;code&gt;source&lt;/code&gt; 属性将返回&amp;ldquo;（？:)&amp;rdquo;，而不是空字符串。已添加了转义行为的定义。</target>
        </trans-unit>
        <trans-unit id="21afb7889039c2ca365865732cb59eee7cee8f9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; property returns a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; containing the source text of the regexp object, and it doesn't contain the two forward slashes on both sides and any flags.</source>
          <target state="translated">该 &lt;code&gt;source&lt;/code&gt; 属性返回一个&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;包含了RegExp对象的源文本，它不包含两侧及任何标志的两个斜杠。</target>
        </trans-unit>
        <trans-unit id="f081fd2fcaf00b6f4603d7f666a650d220572341" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;space&lt;/code&gt; argument</source>
          <target state="translated">在 &lt;code&gt;space&lt;/code&gt; 参数</target>
        </trans-unit>
        <trans-unit id="8ccba351da674181850d390944a0dc58c3521ad3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;space&lt;/code&gt; argument may be used to control spacing in the final string.</source>
          <target state="translated">的 &lt;code&gt;space&lt;/code&gt; 参数也可以使用在最后的字符串来控制间距。</target>
        </trans-unit>
        <trans-unit id="6a233153b50fe557fdd0379de0cbec9b71c9dcc9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; accessor property returns the default constructor for &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array&lt;/a&gt; objects. Subclass constructors may over-ride it to change the constructor assignment.</source>
          <target state="translated">该 &lt;code&gt;species&lt;/code&gt; 访问属性返回默认的构造&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;类型数组&lt;/a&gt;对象。子类构造函数可能会改写它以更改构造函数分配。</target>
        </trans-unit>
        <trans-unit id="e02e38b977a693d66907cf930a789a75aa95971c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; accessor property returns the default constructor for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects&quot;&gt;typed array&lt;/a&gt; objects. Subclass constructors may over-ride it to change the constructor assignment.</source>
          <target state="translated">该 &lt;code&gt;species&lt;/code&gt; 访问属性返回默认的构造&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects&quot;&gt;类型数组&lt;/a&gt;对象。子类构造函数可能会改写它以更改构造函数分配。</target>
        </trans-unit>
        <trans-unit id="e2d25b4299acbc398c6b62130c59f60822dfe859" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; accessor property returns the default constructor for &lt;code&gt;Array&lt;/code&gt; objects. Subclass constructors may override it to change the constructor assignment.</source>
          <target state="translated">该 &lt;code&gt;species&lt;/code&gt; 访问属性返回的默认构造 &lt;code&gt;Array&lt;/code&gt; 的对象。子类构造函数可以重写它以更改构造函数分配。</target>
        </trans-unit>
        <trans-unit id="601b2478148eb6bd5202d1429c4e933267b52c58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; accessor property returns the default constructor for &lt;code&gt;RegExp&lt;/code&gt; objects. Subclass constructors may over-ride it to change the constructor assignment.</source>
          <target state="translated">该 &lt;code&gt;species&lt;/code&gt; 访问属性返回默认的构造函数 &lt;code&gt;RegExp&lt;/code&gt; 对象。子类构造函数可能会改写它以更改构造函数分配。</target>
        </trans-unit>
        <trans-unit id="38d6c962d3598e321c29e628759ea6eaaca0bb2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; accessor property returns the default constructor for &lt;code&gt;Set&lt;/code&gt; objects. Subclass constructors may override it to change the constructor assignment.</source>
          <target state="translated">该 &lt;code&gt;species&lt;/code&gt; 访问属性返回默认构造函数 &lt;code&gt;Set&lt;/code&gt; 的对象。子类构造函数可以重写它以更改构造函数分配。</target>
        </trans-unit>
        <trans-unit id="b363d88f771a62702012ce4aba514c3171275947" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; property returns the default constructor function, which is one of the typed array constructors for a given &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array&lt;/a&gt; object:</source>
          <target state="translated">的 &lt;code&gt;species&lt;/code&gt; 属性返回默认构造函数，它是类型化的阵列构造对于给定的一个&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;类型数组&lt;/a&gt;对象：</target>
        </trans-unit>
        <trans-unit id="37f8b7996427fc9b02d9c79dc009b70fb150e053" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; property returns the default constructor function, which is one of the typed array constructors for a given &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects&quot;&gt;typed array&lt;/a&gt; object:</source>
          <target state="translated">的 &lt;code&gt;species&lt;/code&gt; 属性返回默认构造函数，它是类型化的阵列构造对于给定的一个&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects&quot;&gt;类型数组&lt;/a&gt;对象：</target>
        </trans-unit>
        <trans-unit id="24e49f373d7e20e5dc5e2d161d8979912f797d82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; property returns the default constructor function, which is the &lt;code&gt;Array&lt;/code&gt; constructor for &lt;code&gt;Array&lt;/code&gt; objects:</source>
          <target state="translated">该 &lt;code&gt;species&lt;/code&gt; 属性返回默认的构造函数，这是 &lt;code&gt;Array&lt;/code&gt; 用于构造 &lt;code&gt;Array&lt;/code&gt; 的对象：</target>
        </trans-unit>
        <trans-unit id="9eae346a6740d7f6886b64231691dc06c17d04e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; property returns the default constructor function, which is the &lt;code&gt;RegExp&lt;/code&gt; constructor for &lt;code&gt;RegExp&lt;/code&gt; objects:</source>
          <target state="translated">该 &lt;code&gt;species&lt;/code&gt; 属性返回默认的构造函数，这是 &lt;code&gt;RegExp&lt;/code&gt; 的构造函数 &lt;code&gt;RegExp&lt;/code&gt; 对象：</target>
        </trans-unit>
        <trans-unit id="0d4ac21fdbe3031bd48c81f052b32939e58926fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; property returns the default constructor function, which is the &lt;code&gt;Set&lt;/code&gt; constructor for &lt;code&gt;Set&lt;/code&gt; objects:</source>
          <target state="translated">该 &lt;code&gt;species&lt;/code&gt; 属性返回默认的构造函数，这是 &lt;code&gt;Set&lt;/code&gt; 为构造函数 &lt;code&gt;Set&lt;/code&gt; 的对象：</target>
        </trans-unit>
        <trans-unit id="db31fc87b43f5f60c0d2eb6a1b89573b2dbd8aba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;splice()&lt;/code&gt; method changes the contents of an array by removing existing elements and/or adding new elements.</source>
          <target state="translated">的 &lt;code&gt;splice()&lt;/code&gt; 方法通过去除现有元件和/或添加新元素改变的数组的内容。</target>
        </trans-unit>
        <trans-unit id="ecc816530f048750e0f874602fa9bfdcb0d71e71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;splice()&lt;/code&gt; method changes the contents of an array by removing or replacing existing elements and/or adding new elements &lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;in place&lt;/a&gt;.</source>
          <target state="translated">的 &lt;code&gt;splice()&lt;/code&gt; 方法通过去除或替换现有的元件和/或添加新元素的改变数组的内容&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;在适当位置&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a81f9b74284ef31857915e880541aa5340e2f2cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;split()&lt;/code&gt; method divides a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; into an ordered list of substrings, puts these substrings into an array, and returns the array. The division is done by searching for a pattern; where the pattern is provided as the first parameter in the method's call.</source>
          <target state="translated">的 &lt;code&gt;split()&lt;/code&gt; 方法把一个&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;为子的有序列表，这些放子到一个数组，并返回该数组。划分是通过搜索模式来完成的；模式在方法调用中作为第一个参数提供的位置。</target>
        </trans-unit>
        <trans-unit id="e95c7a0c76d1545fdde91a9fb98f9e8135ae9cff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;split()&lt;/code&gt; method splits a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object into an array of strings by separating the string into substrings, using a specified separator string to determine where to make each split.</source>
          <target state="translated">的 &lt;code&gt;split()&lt;/code&gt; 方法分割一个&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;由字符串分成子串，使用指定的分隔符字符串，以确定使每个分裂对象到字符串数组。</target>
        </trans-unit>
        <trans-unit id="e29d8c4d782d1b004f826d77b14b3418f2814509" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;startsWith()&lt;/code&gt; method determines whether a string begins with the characters of a specified string, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate.</source>
          <target state="translated">所述 &lt;code&gt;startsWith()&lt;/code&gt; 方法确定字符串是否以指定字符串，返回的字符 &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt; 适当。</target>
        </trans-unit>
        <trans-unit id="77d3afa15edcb61a8dd51d9fae468c30feda07d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sticky&lt;/code&gt; property reflects whether or not the search is sticky (searches in strings only from the index indicated by the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property of this regular expression). &lt;code&gt;sticky&lt;/code&gt; is a read-only property of an individual regular expression object.</source>
          <target state="translated">该 &lt;code&gt;sticky&lt;/code&gt; 属性反映搜索是否是粘性（在字符串搜索只从指数所指示的&lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; 的&lt;/a&gt;正则表达式的属性）。 &lt;code&gt;sticky&lt;/code&gt; 是单个正则表达式对象的只读属性。</target>
        </trans-unit>
        <trans-unit id="99043c5a32d0365d88f7489c6a8f1df22ee9d725" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strike()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike&quot;&gt;&lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed as struck-out text.</source>
          <target state="translated">的 &lt;code&gt;strike()&lt;/code&gt; 方法创建一个&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike&quot;&gt; &lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt; &lt;/a&gt;使得要被显示为被撞击出文本的字符串的HTML元素。</target>
        </trans-unit>
        <trans-unit id="ae8e82561ee8b1fa69eb67b9d8ed61f89a56a31c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strike()&lt;/code&gt; method creates a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/strike&quot;&gt;&lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed as struck-out text.</source>
          <target state="translated">的 &lt;code&gt;strike()&lt;/code&gt; 方法创建一个&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/strike&quot;&gt; &lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt; &lt;/a&gt;使得要被显示为被撞击出文本的字符串的HTML元素。</target>
        </trans-unit>
        <trans-unit id="31a05bd2a1780dc31b42319ce054ece0665f1e16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strike()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;strike&amp;gt;str&amp;lt;/strike&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;strike()&lt;/code&gt; 方法嵌入在一个字符串 &lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt; 标记： &lt;code&gt;&quot;&amp;lt;strike&amp;gt;str&amp;lt;/strike&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="507fbf2cabe8cc4c38162953645bf7c1f619ac17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sub()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub&quot;&gt;&lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed as subscript.</source>
          <target state="translated">的 &lt;code&gt;sub()&lt;/code&gt; 方法创建一个&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub&quot;&gt; &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt; &lt;/a&gt;使得要被显示为下标a串HTML元素。</target>
        </trans-unit>
        <trans-unit id="89b7b5dcab22ed96b026681d7c5421385c63342b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sub()&lt;/code&gt; method creates a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/sub&quot;&gt;&lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed as subscript.</source>
          <target state="translated">的 &lt;code&gt;sub()&lt;/code&gt; 方法创建一个&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/sub&quot;&gt; &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt; &lt;/a&gt;使得要被显示为下标a串HTML元素。</target>
        </trans-unit>
        <trans-unit id="2bdb3a13b34e25938fe41425b72524f0bf1cc3be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sub()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;sub&amp;gt;str&amp;lt;/sub&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;sub()&lt;/code&gt; 方法嵌入在一个字符串 &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt; 标记： &lt;code&gt;&quot;&amp;lt;sub&amp;gt;str&amp;lt;/sub&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9993ed926361be11052212435757aafd0d039ba5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subarray()&lt;/code&gt; method returns a new &lt;em&gt;TypedArray&lt;/em&gt; on the same &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; store and with the same element types as for this &lt;em&gt;TypedArray&lt;/em&gt; object. The &lt;code&gt;begin&lt;/code&gt; offset is &lt;strong&gt;inclusive&lt;/strong&gt; and the &lt;code&gt;end&lt;/code&gt; offset is &lt;strong&gt;exclusive&lt;/strong&gt;. &lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt;.</source>
          <target state="translated">的 &lt;code&gt;subarray()&lt;/code&gt; 方法返回一个新&lt;em&gt;TypedArray&lt;/em&gt;在同一&lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;商店并用相同类型的元件作为该&lt;em&gt;TypedArray&lt;/em&gt;对象。在 &lt;code&gt;begin&lt;/code&gt; 偏移量是&lt;strong&gt;包容&lt;/strong&gt;和 &lt;code&gt;end&lt;/code&gt; 偏移量是&lt;strong&gt;独家&lt;/strong&gt;。&lt;em&gt;TypedArray&lt;/em&gt;是&lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;类型化数组类型之一&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2aa58fac1e632511279bc461e0096abef9f7ba06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;substr()&lt;/code&gt; method returns a portion of the string, starting at the specified index and extending for a given number of characters afterward.</source>
          <target state="translated">的 &lt;code&gt;substr()&lt;/code&gt; 方法返回字符串的一部分，开始指定索引处和之后为字符的给定数目的延伸。</target>
        </trans-unit>
        <trans-unit id="2e1f3b796431f6d006e85b17733e34604969d641" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;substr()&lt;/code&gt; method returns a portion of the string, starting at the specified index and extending for a given number of characters afterwards.</source>
          <target state="translated">的 &lt;code&gt;substr()&lt;/code&gt; 方法返回字符串的一部分，开始指定索引处，之后为字符的给定数目的延伸。</target>
        </trans-unit>
        <trans-unit id="231b94e6ee5bd8ba492d59349684dea405daa1f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;substring()&lt;/code&gt; and &lt;a href=&quot;slice&quot;&gt;&lt;code&gt;slice()&lt;/code&gt;&lt;/a&gt; methods are almost identical, but there are a couple of subtle differences between the two, especially in the way negative arguments are dealt with.</source>
          <target state="translated">的 &lt;code&gt;substring()&lt;/code&gt; 和&lt;a href=&quot;slice&quot;&gt; &lt;code&gt;slice()&lt;/code&gt; &lt;/a&gt;方法是几乎相同的，但也有几个两者之间细微的差别，特别是在负方式参数被处理。</target>
        </trans-unit>
        <trans-unit id="be167c8175a7d6f8833d2941a5e2fdcd944be2d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;substring()&lt;/code&gt; method returns the part of the &lt;code&gt;string&lt;/code&gt; between the start and end indexes, or to the end of the string.</source>
          <target state="translated">的 &lt;code&gt;substring()&lt;/code&gt; 方法返回的部分 &lt;code&gt;string&lt;/code&gt; 的开始和结束索引之间，或所述字符串的末尾。</target>
        </trans-unit>
        <trans-unit id="dc87b27973ae80c886e75f60cb087e9863d38b9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;substring()&lt;/code&gt; method swaps its two arguments if &lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; is greater than &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt;, meaning that a string is still returned. The &lt;a href=&quot;slice&quot;&gt;&lt;code&gt;slice()&lt;/code&gt;&lt;/a&gt; method returns an empty string if this is the case.</source>
          <target state="translated">该 &lt;code&gt;substring()&lt;/code&gt; 方法交换两个参数，如果 &lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; 大于 &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt; ，这意味着一个字符串仍会返回。如果是这种情况，&lt;a href=&quot;slice&quot;&gt; &lt;code&gt;slice()&lt;/code&gt; &lt;/a&gt;方法将返回一个空字符串。</target>
        </trans-unit>
        <trans-unit id="003c13ccdfd8b1a57c113ea1d6bc0e52ea29e631" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sup()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup&quot;&gt;&lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed as superscript.</source>
          <target state="translated">的 &lt;code&gt;sup()&lt;/code&gt; 方法创建一个&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup&quot;&gt; &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; &lt;/a&gt;导致要显示为标字符串HTML元素。</target>
        </trans-unit>
        <trans-unit id="09612e003bcb1dfb282f7ce8641ae3631e8a33db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sup()&lt;/code&gt; method creates a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/sup&quot;&gt;&lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed as superscript.</source>
          <target state="translated">的 &lt;code&gt;sup()&lt;/code&gt; 方法创建一个&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/sup&quot;&gt; &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; &lt;/a&gt;导致要显示为标字符串HTML元素。</target>
        </trans-unit>
        <trans-unit id="6ff29a71a32065c70b52973a18ab04a6c17f1dff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sup()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;sup&amp;gt;str&amp;lt;/sup&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;sup()&lt;/code&gt; 方法嵌入在一个字符串 &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; 标记： &lt;code&gt;&quot;&amp;lt;sup&amp;gt;str&amp;lt;/sup&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4e46078bb0ba472d9375caf8339dff1c52c38414" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;super.prop&lt;/code&gt; and &lt;code&gt;super[expr]&lt;/code&gt; expressions are valid in any &lt;a href=&quot;../functions/method_definitions&quot;&gt;method definition&lt;/a&gt; in both &lt;a href=&quot;../classes&quot;&gt;classes&lt;/a&gt; and &lt;a href=&quot;object_initializer&quot;&gt;object literals&lt;/a&gt;.</source>
          <target state="translated">的 &lt;code&gt;super.prop&lt;/code&gt; 和 &lt;code&gt;super[expr]&lt;/code&gt; 表达式是任何有效的&lt;a href=&quot;../functions/method_definitions&quot;&gt;方法定义&lt;/a&gt;在两个&lt;a href=&quot;../classes&quot;&gt;类&lt;/a&gt;和&lt;a href=&quot;object_initializer&quot;&gt;对象常量&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="58c5b386594d5e64ef24ee818cae836b2122508b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;super&lt;/code&gt; keyword calls the parent constructor.</source>
          <target state="translated">该 &lt;code&gt;super&lt;/code&gt; 关键字调用父类的构造。</target>
        </trans-unit>
        <trans-unit id="cf23e7581408a2c543577b4eda277e4b6c0822db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; evaluates an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators&quot;&gt;expression&lt;/a&gt;, matching the expression's value to a &lt;code&gt;case&lt;/code&gt; clause, and executes &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;statements&lt;/a&gt; associated with that &lt;code&gt;case&lt;/code&gt;, as well as statements in &lt;code&gt;case&lt;/code&gt;s that follow the matching &lt;code&gt;case&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;switch&lt;/code&gt; 计算一个&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators&quot;&gt;表达式&lt;/a&gt;，表达式的值匹配到 &lt;code&gt;case&lt;/code&gt; 条款，并执行&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;语句&lt;/a&gt;与该相关联的 &lt;code&gt;case&lt;/code&gt; ，以及在语句中 &lt;code&gt;case&lt;/code&gt; 随后的匹配小号 &lt;code&gt;case&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="91de460ec7fcf2753b77f48df09d0c84f211e499" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; evaluates an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators&quot;&gt;expression&lt;/a&gt;, matching the expression's value to a &lt;code&gt;case&lt;/code&gt; clause, and executes &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;statements&lt;/a&gt; associated with that case, as well as statements in cases that follow the matching case.</source>
          <target state="translated">所述 &lt;code&gt;switch&lt;/code&gt; 计算一个&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators&quot;&gt;表达式&lt;/a&gt;，表达式的值匹配到 &lt;code&gt;case&lt;/code&gt; 条款，并执行&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;语句&lt;/a&gt;与该情况下，以及在随后的匹配情况下的情况下声明相关联。</target>
        </trans-unit>
        <trans-unit id="3e53ba41760666996f98eae5a199f411ab236a83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; must be a callable itself. That is, it must be a function object.</source>
          <target state="translated">该 &lt;code&gt;target&lt;/code&gt; 必须是可调用本身。也就是说，它必须是一个函数对象。</target>
        </trans-unit>
        <trans-unit id="118b70346f478cde348ec89edbef454b86b02683" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test()&lt;/code&gt; method executes a search for a match between a regular expression and a specified string. Returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;test()&lt;/code&gt; 方法执行用于正则表达式和一个指定的字符串之间的匹配的搜索。返回 &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a26026e74ab32dbe930f6fe9c0eb33b2bb573b08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;then&lt;/code&gt; method returns a &lt;code&gt;Promise&lt;/code&gt; which allows for method chaining.</source>
          <target state="translated">所述 &lt;code&gt;then&lt;/code&gt; 方法返回一个 &lt;code&gt;Promise&lt;/code&gt; 其允许方法链接。</target>
        </trans-unit>
        <trans-unit id="7ecd9aa64c6663f8c89098cec663393ac40393a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; argument for the call.</source>
          <target state="translated">在 &lt;code&gt;this&lt;/code&gt; 论点呼叫。</target>
        </trans-unit>
        <trans-unit id="229c678523e1ba1af6a886873fbfc24648164e45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; keyword could be used inside functions running in non&amp;ndash;strict mode, but &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt; in Modules and inside functions running in strict mode. You can also use &lt;code&gt;Function('return this')()&lt;/code&gt;, but environments that disable &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt;, like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/CSP&quot;&gt;CSP&lt;/a&gt; in browsers, prevent use of &lt;a href=&quot;function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; in this way.</source>
          <target state="translated">在 &lt;code&gt;this&lt;/code&gt; 关键字可以内无严格模式下运行的功能使用，但是 &lt;code&gt;this&lt;/code&gt; 将 &lt;code&gt;undefined&lt;/code&gt; 模块以及内侧的严格模式下运行的功能。您还可以使用 &lt;code&gt;Function('return this')()&lt;/code&gt; ，但是禁用&lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval()&lt;/code&gt; 的&lt;/a&gt;环境（例如浏览器中的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/CSP&quot;&gt;CSP &lt;/a&gt;）会阻止以这种方式使用&lt;a href=&quot;function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9e82a86dbb3410327d5092a53deea5d6ea2eb81d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; keyword refers to a special property of an execution context.</source>
          <target state="translated">在 &lt;code&gt;this&lt;/code&gt; 关键字指的是执行上下文的特殊属性。</target>
        </trans-unit>
        <trans-unit id="22b040cfa1202d97ecd452be80287e3ab6cd02cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;throw()&lt;/code&gt; method resumes the execution of a generator by throwing an error into it and returns an object with two properties &lt;code&gt;done&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;throw()&lt;/code&gt; 方法由引发错误到它恢复的发电机的执行，并返回具有两个属性的对象 &lt;code&gt;done&lt;/code&gt; 和 &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00fd0b0cc8d2f6cd4678dd2f83f96ee25c5edd2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;throw&lt;/code&gt; throws a user-defined exception. Execution of the current function will stop (the statements after &lt;code&gt;throw&lt;/code&gt; won't be executed), and control will be passed to the first &lt;a href=&quot;try...catch&quot;&gt;&lt;code&gt;catch&lt;/code&gt;&lt;/a&gt; block in the call stack. If no &lt;code&gt;catch&lt;/code&gt; block exists among caller functions, the program will terminate.</source>
          <target state="translated">该 &lt;code&gt;throw&lt;/code&gt; 抛出一个用户定义的异常。当前函数的执行将停止（不会执行 &lt;code&gt;throw&lt;/code&gt; 之后的语句），并将控制权传递给调用堆栈中的第一个&lt;a href=&quot;try...catch&quot;&gt; &lt;code&gt;catch&lt;/code&gt; &lt;/a&gt;块。如果调用者函数之间不存在 &lt;code&gt;catch&lt;/code&gt; 块，则程序将终止。</target>
        </trans-unit>
        <trans-unit id="412cad314e9e2ce3182ddcf5c41f4f9b131718f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toDateString()&lt;/code&gt; method is especially useful because compliant engines implementing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/ECMAScript&quot;&gt;ECMA-262&lt;/a&gt; may differ in the string obtained from &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; objects, as the format is implementation-dependent and simple string slicing approaches may not produce consistent results across multiple engines.</source>
          <target state="translated">所述 &lt;code&gt;toDateString()&lt;/code&gt; 一致，因为实现符合发动机的方法是特别有用的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/ECMAScript&quot;&gt;ECMA-262&lt;/a&gt;可从所获得的字符串中不同&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt;为&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;对象，格式是与实现相关的，并且简单的字符串切片接近可能不产生跨多个引擎一致的结果。</target>
        </trans-unit>
        <trans-unit id="44ede00f83c7bf8f4fe69d17613c6cdb1ad406ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toDateString()&lt;/code&gt; method is especially useful because compliant engines implementing &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;ECMA-262&lt;/a&gt; may differ in the string obtained from &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; objects, as the format is implementation-dependent and simple string slicing approaches may not produce consistent results across multiple engines.</source>
          <target state="translated">所述 &lt;code&gt;toDateString()&lt;/code&gt; 一致，因为实现符合发动机的方法是特别有用的&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;ECMA-262&lt;/a&gt;可从所获得的字符串中不同&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt;为&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;对象，格式是与实现相关的，并且简单的字符串切片接近可能不产生跨多个引擎一致的结果。</target>
        </trans-unit>
        <trans-unit id="0cf46e4c35d7773d504f688459cc7efc76e67949" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toDateString()&lt;/code&gt; method returns the date portion of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object in English in the following format separated by spaces:</source>
          <target state="translated">所述 &lt;code&gt;toDateString()&lt;/code&gt; 一致方法返回的日期部分&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;以下列格式中英语物体分离由空格：</target>
        </trans-unit>
        <trans-unit id="cbdc60f0324fcd00ec12f6699e2bce8320cb7592" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toDateString()&lt;/code&gt; method returns the date portion of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object in human readable form in American English.</source>
          <target state="translated">所述 &lt;code&gt;toDateString()&lt;/code&gt; 一致方法返回的日期部分&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;在人类可读的形式在美国英语对象。</target>
        </trans-unit>
        <trans-unit id="54830fd411c8e227812c3e5a945920da9a8226da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toExponential()&lt;/code&gt; method returns a string representing the &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object in exponential notation.</source>
          <target state="translated">所述 &lt;code&gt;toExponential()&lt;/code&gt; 方法返回表示一个字符串&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;指数表示法的对象。</target>
        </trans-unit>
        <trans-unit id="5f989bfca9e5f06fffcc793cf31d7367de0dde7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toExponential()&lt;/code&gt; method returns a string representing the Number object in exponential notation.</source>
          <target state="translated">所述 &lt;code&gt;toExponential()&lt;/code&gt; 方法返回表示采用指数表示法的数量对象的字符串。</target>
        </trans-unit>
        <trans-unit id="53d8b1c4bd3dbc794cbda4ebd5abe95d88e21507" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toFixed()&lt;/code&gt; method formats a number using fixed-point notation.</source>
          <target state="translated">的 &lt;code&gt;toFixed()&lt;/code&gt; 方法可格式化使用定点表示法的数字。</target>
        </trans-unit>
        <trans-unit id="f434b72f4baefdae7c797b9c3056838ee4b3b763" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toGMTString()&lt;/code&gt; method converts a date to a string, using Internet Greenwich Mean Time (GMT) conventions. The exact format of the value returned by &lt;code&gt;toGMTString()&lt;/code&gt; varies according to the platform and browser, in general it should represent a human readable date string.</source>
          <target state="translated">该 &lt;code&gt;toGMTString()&lt;/code&gt; 方法的日期转换为字符串，使用Internet格林威治标准时间（GMT）约定。 &lt;code&gt;toGMTString()&lt;/code&gt; 返回的值的确切格式根据平台和浏览器的不同而有所不同，通常它应表示人类可读的日期字符串。</target>
        </trans-unit>
        <trans-unit id="6f32bb884a567e3a395878b1be4722efa1cadfea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toISOString()&lt;/code&gt; method returns a string in &lt;em&gt;simplified&lt;/em&gt; extended ISO format (&lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt;), which is always 24 or 27 characters long (&lt;code&gt;YYYY-MM-DDTHH:mm:ss.sssZ&lt;/code&gt; or &lt;code&gt;&amp;plusmn;YYYYYY-MM-DDTHH:mm:ss.sssZ&lt;/code&gt;, respectively). The timezone is always zero UTC offset, as denoted by the suffix &quot;&lt;code&gt;Z&lt;/code&gt;&quot;.</source>
          <target state="translated">所述 &lt;code&gt;toISOString()&lt;/code&gt; 方法返回在一个字符串&lt;em&gt;简化&lt;/em&gt;扩展ISO格式（&lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt;），这始终是24或27个字符长（ &lt;code&gt;YYYY-MM-DDTHH:mm:ss.sssZ&lt;/code&gt; 或 &lt;code&gt;&amp;plusmn;YYYYYY-MM-DDTHH:mm:ss.sssZ&lt;/code&gt; ）。时区始终为零UTC偏移，如后缀&amp;ldquo; &lt;code&gt;Z&lt;/code&gt; &amp;rdquo;所示。</target>
        </trans-unit>
        <trans-unit id="65f5abfbb0478cf3263ea120977e12029ae44fb1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toISOString()&lt;/code&gt; method returns a string in &lt;em&gt;simplified&lt;/em&gt; extended ISO format (&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt;), which is always 24 or 27 characters long (&lt;code&gt;&lt;var&gt;YYYY&lt;/var&gt;-&lt;var&gt;MM&lt;/var&gt;-&lt;var&gt;DD&lt;/var&gt;T&lt;var&gt;HH&lt;/var&gt;:&lt;var&gt;mm&lt;/var&gt;:&lt;var&gt;ss.sss&lt;/var&gt;Z&lt;/code&gt; or &lt;code&gt;&lt;var&gt;&amp;plusmn;&lt;/var&gt;&lt;var&gt;YYYYYY&lt;/var&gt;-&lt;var&gt;MM&lt;/var&gt;-&lt;var&gt;DD&lt;/var&gt;T&lt;var&gt;HH&lt;/var&gt;:&lt;var&gt;mm&lt;/var&gt;:&lt;var&gt;ss.sss&lt;/var&gt;Z&lt;/code&gt;, respectively). The timezone is always zero UTC offset, as denoted by the suffix &quot;&lt;code&gt;Z&lt;/code&gt;&quot;.</source>
          <target state="translated">所述 &lt;code&gt;toISOString()&lt;/code&gt; 方法在返回字符串&lt;em&gt;简化&lt;/em&gt;扩展ISO格式（&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt;），这始终是24或27个字符长（ &lt;code&gt;&lt;var&gt;YYYY&lt;/var&gt;-&lt;var&gt;MM&lt;/var&gt;-&lt;var&gt;DD&lt;/var&gt;T&lt;var&gt;HH&lt;/var&gt;:&lt;var&gt;mm&lt;/var&gt;:&lt;var&gt;ss.sss&lt;/var&gt;Z&lt;/code&gt; 或 &lt;code&gt;&lt;var&gt;&amp;plusmn;&lt;/var&gt;&lt;var&gt;YYYYYY&lt;/var&gt;-&lt;var&gt;MM&lt;/var&gt;-&lt;var&gt;DD&lt;/var&gt;T&lt;var&gt;HH&lt;/var&gt;:&lt;var&gt;mm&lt;/var&gt;:&lt;var&gt;ss.sss&lt;/var&gt;Z&lt;/code&gt; ）。时区始终为零UTC偏移，如后缀&amp;ldquo; &lt;code&gt;Z&lt;/code&gt; &amp;rdquo;所示。</target>
        </trans-unit>
        <trans-unit id="f85df78873b6cf40bbfcdeb161d8c38d9baf44c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toJSON()&lt;/code&gt; method returns a string representation of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">所述 &lt;code&gt;toJSON()&lt;/code&gt; 方法返回的字符串表示&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;的对象。</target>
        </trans-unit>
        <trans-unit id="6de692ce5d4ffa4c2464aca0c7356c940514d2ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleDateString()&lt;/code&gt; method returns a string with a language sensitive representation of the date portion of this date. The new &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments let applications specify the language whose formatting conventions should be used and allow to customize the behavior of the function. In older implementations, which ignore the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, the locale used and the form of the string returned are entirely implementation dependent.</source>
          <target state="translated">所述 &lt;code&gt;toLocaleDateString()&lt;/code&gt; 方法返回与这个日期的日期部分的语言敏感表示的字符串。新的 &lt;code&gt;locales&lt;/code&gt; 和 &lt;code&gt;options&lt;/code&gt; 参数使应用程序可以指定应使用其格式约定的语言，并允许自定义函数的行为。在较早的实现中，忽略 &lt;code&gt;locales&lt;/code&gt; 和 &lt;code&gt;options&lt;/code&gt; 参数，使用的区域设置和返回的字符串形式完全取决于实现。</target>
        </trans-unit>
        <trans-unit id="cdc0297f0eb65109fdc9b01fc5f3443358fd86a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleLowerCase()&lt;/code&gt; method returns the calling string value converted to lower case, according to any locale-specific case mappings.</source>
          <target state="translated">根据任何特定于语言环境的大小写映射， &lt;code&gt;toLocaleLowerCase()&lt;/code&gt; 方法返回转换为小写形式的调用字符串值。</target>
        </trans-unit>
        <trans-unit id="443b75095ca82d21f5ba0fd745809d9eba99b8bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleLowerCase()&lt;/code&gt; method returns the value of the string converted to lower case according to any locale-specific case mappings. &lt;code&gt;toLocaleLowerCase()&lt;/code&gt; does not affect the value of the string itself. In most cases, this will produce the same result as &lt;a href=&quot;tolowercase&quot;&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/a&gt;, but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result.</source>
          <target state="translated">所述 &lt;code&gt;toLocaleLowerCase()&lt;/code&gt; 方法返回字符串的值转换为根据任何特定于区域的情况下的映射小写。 &lt;code&gt;toLocaleLowerCase()&lt;/code&gt; 不会影响字符串本身的值。在大多数情况下，这将产生与&lt;a href=&quot;tolowercase&quot;&gt; &lt;code&gt;toLowerCase()&lt;/code&gt; &lt;/a&gt;相同的结果，但是对于某些语言环境（例如土耳其语）而言，其大小写映射不遵循Unicode中的默认大小写映射，可能会有不同的结果。</target>
        </trans-unit>
        <trans-unit id="7b2b1e4507d75b521dcbcece29c55a2b9bcc1e9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleString()&lt;/code&gt; method returns a string representing the elements of the array. The elements are converted to Strings using their &lt;code&gt;toLocaleString&lt;/code&gt; methods and these Strings are separated by a locale-specific String (such as a comma &amp;ldquo;,&amp;rdquo;).</source>
          <target state="translated">所述 &lt;code&gt;toLocaleString()&lt;/code&gt; 方法返回表示数组的元素的字符串。元素使用其 &lt;code&gt;toLocaleString&lt;/code&gt; 方法转换为字符串，并且这些字符串由特定于语言环境的字符串分隔（例如，逗号&amp;ldquo;，&amp;rdquo;）。</target>
        </trans-unit>
        <trans-unit id="f6703e19950b6cede2711f75d52cf5679d06bc31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleString()&lt;/code&gt; method returns a string with a language sensitive representation of this date.</source>
          <target state="translated">所述 &lt;code&gt;toLocaleString()&lt;/code&gt; 方法返回与这个日期的语言敏感表示的字符串。</target>
        </trans-unit>
        <trans-unit id="9a5bc98b93806d7328dfd23d0e2f20fe79d9d58b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleString()&lt;/code&gt; method returns a string with a language sensitive representation of this date. The new &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, the locale used and the form of the string returned are entirely implementation dependent.</source>
          <target state="translated">所述 &lt;code&gt;toLocaleString()&lt;/code&gt; 方法返回与这个日期的语言敏感表示的字符串。新的 &lt;code&gt;locales&lt;/code&gt; 和 &lt;code&gt;options&lt;/code&gt; 参数使应用程序可以指定应使用其格式约定的语言，并自定义函数的行为。在较早的实现中，忽略 &lt;code&gt;locales&lt;/code&gt; 和 &lt;code&gt;options&lt;/code&gt; 参数，使用的区域设置和返回的字符串形式完全取决于实现。</target>
        </trans-unit>
        <trans-unit id="851b1939713b691bb9e259896b142204fa29dfb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleString()&lt;/code&gt; method returns a string with a language-sensitive representation of this BigInt.</source>
          <target state="translated">所述 &lt;code&gt;toLocaleString()&lt;/code&gt; 方法返回与这个BigInt有的语言敏感的表示形式的字符串。</target>
        </trans-unit>
        <trans-unit id="4c181a78790a95d522c7d634f8dcba90d04ce862" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleString()&lt;/code&gt; method returns a string with a language-sensitive representation of this number.</source>
          <target state="translated">所述 &lt;code&gt;toLocaleString()&lt;/code&gt; 方法返回与这个号码的语言敏感的表示形式的字符串。</target>
        </trans-unit>
        <trans-unit id="ce71ded9fb47fafdc0a5c1f2bfd5f0791c1ea986" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleTimeString()&lt;/code&gt; method returns a string with a language sensitive representation of the time portion of this date. The new &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, the locale used and the form of the string returned are entirely implementation dependent.</source>
          <target state="translated">所述 &lt;code&gt;toLocaleTimeString()&lt;/code&gt; 方法返回与这个日期的时间部分的语言敏感表示的字符串。新的 &lt;code&gt;locales&lt;/code&gt; 和 &lt;code&gt;options&lt;/code&gt; 参数使应用程序可以指定应使用其格式约定的语言，并自定义函数的行为。在较早的实现中，忽略 &lt;code&gt;locales&lt;/code&gt; 和 &lt;code&gt;options&lt;/code&gt; 参数，使用的区域设置和返回的字符串形式完全取决于实现。</target>
        </trans-unit>
        <trans-unit id="4dddededdeaa266d4f6b4e36f1016e6d56f2759f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleUpperCase()&lt;/code&gt; method returns the calling string value converted to upper case, according to any locale-specific case mappings.</source>
          <target state="translated">根据任何特定于语言环境的大小写映射， &lt;code&gt;toLocaleUpperCase()&lt;/code&gt; 方法返回转换为大写形式的调用字符串值。</target>
        </trans-unit>
        <trans-unit id="edab54eb7430a87e4e2c56f40c88fe4692fd8d48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleUpperCase()&lt;/code&gt; method returns the value of the string converted to upper case according to any locale-specific case mappings. &lt;code&gt;toLocaleUpperCase()&lt;/code&gt; does not affect the value of the string itself. In most cases, this will produce the same result as &lt;a href=&quot;touppercase&quot;&gt;&lt;code&gt;toUpperCase()&lt;/code&gt;&lt;/a&gt;, but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result.</source>
          <target state="translated">所述 &lt;code&gt;toLocaleUpperCase()&lt;/code&gt; 方法返回字符串的值根据任何特定于区域的情况下的映射转换为大写。 &lt;code&gt;toLocaleUpperCase()&lt;/code&gt; 不会影响字符串本身的值。在大多数情况下，这将产生与&lt;a href=&quot;touppercase&quot;&gt; &lt;code&gt;toUpperCase()&lt;/code&gt; &lt;/a&gt;相同的结果，但是对于某些语言环境（例如土耳其语），其大小写映射不遵循Unicode中的默认大小写映射，可能会有不同的结果。</target>
        </trans-unit>
        <trans-unit id="0cb3154ea52bee934a4a9af4298d2277e26aa187" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLowerCase()&lt;/code&gt; method returns the calling string value converted to lower case.</source>
          <target state="translated">的 &lt;code&gt;toLowerCase()&lt;/code&gt; 方法返回主叫字符串值转换为小写。</target>
        </trans-unit>
        <trans-unit id="1d4fc82c4ee80a96e1bdeeea889258ac210eac67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLowerCase()&lt;/code&gt; method returns the value of the string converted to lower case. &lt;code&gt;toLowerCase()&lt;/code&gt; does not affect the value of the string &lt;code&gt;str&lt;/code&gt; itself.</source>
          <target state="translated">的 &lt;code&gt;toLowerCase()&lt;/code&gt; 方法返回字符串的值转换为小写。 &lt;code&gt;toLowerCase()&lt;/code&gt; 不会影响字符串 &lt;code&gt;str&lt;/code&gt; 本身的值。</target>
        </trans-unit>
        <trans-unit id="1dceab665270eb0d894532b40e2a43d79af258c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toPrecision()&lt;/code&gt; method returns a string representing the &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object to the specified precision.</source>
          <target state="translated">所述 &lt;code&gt;toPrecision()&lt;/code&gt; 方法返回表示一个字符串&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;对象与指定的精度。</target>
        </trans-unit>
        <trans-unit id="a0d6221c62d5cad7f2f25d8dab6635b0cdf424c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method is automatically called when a date is to be represented as a text value, e.g. &lt;code&gt;console.log(new Date())&lt;/code&gt;, or when a date is used in a string concatenation, such as &lt;code&gt;var today = 'Today is ' + new Date()&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;toString()&lt;/code&gt; 方法是自动调用时的日期将被表示为文本值，例如 &lt;code&gt;console.log(new Date())&lt;/code&gt; 时，或者当日期字符串连接被使用，如 &lt;code&gt;var today = 'Today is ' + new Date()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3593487d782bc9e25b68ad4e96adfb00fc0890a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method is automatically called when a date is to be represented as a text value, e.g. &lt;code&gt;console.log(new Date())&lt;/code&gt;, or when a date is used in a string concatenation, such as &lt;code&gt;var today&amp;nbsp;= 'Today is ' + new Date()&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;toString()&lt;/code&gt; 方法是自动调用时的日期将被表示为文本值，例如 &lt;code&gt;console.log(new Date())&lt;/code&gt; 时，或者当日期字符串连接被使用，如 &lt;code&gt;var today&amp;nbsp;= 'Today is ' + new Date()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="642670d6dbb31bc5836c091017079597f7ef4703" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method parses its first argument, and attempts to return a string representation in the specified &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; (base). For radices above &lt;code&gt;10&lt;/code&gt;, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), &lt;code&gt;a&lt;/code&gt; through &lt;code&gt;f&lt;/code&gt; are used.</source>
          <target state="translated">所述 &lt;code&gt;toString()&lt;/code&gt; 方法解析其第一个参数，并试图在指定的返回字符串表示 &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; （基峰）。对于大于 &lt;code&gt;10&lt;/code&gt; 的半径，字母表中的字母表示大于9的数字。例如，对于十六进制数字（以16为底），使用 &lt;code&gt;a&lt;/code&gt; 至 &lt;code&gt;f&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a454e4131af071cbec9769c58477eb9c5c409cc0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method parses its first argument, and attempts to return a string representation in the specified radix (base). For radixes above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16) &lt;code&gt;a&lt;/code&gt; through &lt;code&gt;f&lt;/code&gt; are used.</source>
          <target state="translated">所述 &lt;code&gt;toString()&lt;/code&gt; 方法解析其第一个参数，并试图在指定基数（基）返回的字符串表示。对于大于10的基数，字母表示大于9的数字。例如，对于十六进制数字（以16为底），使用 &lt;code&gt;a&lt;/code&gt; 至 &lt;code&gt;f&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8cb91bb2a4fa972bac6025c69afe74adbc9c959" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method parses its first argument, and attempts to return a string representation in the specified radix (base). For radixes above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), &lt;code&gt;a&lt;/code&gt; through &lt;code&gt;f&lt;/code&gt; are used.</source>
          <target state="translated">所述 &lt;code&gt;toString()&lt;/code&gt; 方法解析其第一个参数，并试图在指定基数（基）返回的字符串表示。对于大于10的基数，字母表示大于9的数字。例如，对于十六进制数字（以16为底），使用 &lt;code&gt;a&lt;/code&gt; 至 &lt;code&gt;f&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aef48c3db750fafbc9e23694d9a289d86ef5365f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method returns a string representing the regular expression.</source>
          <target state="translated">所述 &lt;code&gt;toString()&lt;/code&gt; 方法返回表示正则表达式的字符串。</target>
        </trans-unit>
        <trans-unit id="74887bfb01cf652dc3e68adbd159a6e6ceabcb39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method returns a string representing the specified &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; object. The trailing &quot;n&quot; is not part of the string.</source>
          <target state="translated">所述 &lt;code&gt;toString()&lt;/code&gt; 方法返回表示所指定的字符串&lt;a href=&quot;../bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; 有&lt;/a&gt;对象。尾随的&amp;ldquo; n&amp;rdquo;不是字符串的一部分。</target>
        </trans-unit>
        <trans-unit id="3a6e291ea9eb17a7ed3124b0e25d51227f3fbaef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method returns a string representing the specified &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">所述 &lt;code&gt;toString()&lt;/code&gt; 方法返回表示所指定的字符串&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;的对象。</target>
        </trans-unit>
        <trans-unit id="108226db1a2ff86483cf2870fd73d0b2b13efb5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method returns a string representing the specified &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">所述 &lt;code&gt;toString()&lt;/code&gt; 方法返回表示所指定的字符串&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="6b4c6fa3d38cb17e4f6b59c566d1c25ba3830d2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method returns a string representing the specified object.</source>
          <target state="translated">所述 &lt;code&gt;toString()&lt;/code&gt; 方法返回表示指定的对象的字符串。</target>
        </trans-unit>
        <trans-unit id="75509fa9dfdc986d9ed46156e4ac3bbaff78b23f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception (&quot;Function.prototype.toString called on incompatible object&quot;), if its &lt;code&gt;this&lt;/code&gt; value object is not a &lt;code&gt;Function&lt;/code&gt; object.</source>
          <target state="translated">如果 &lt;code&gt;toString()&lt;/code&gt; 方法的 &lt;code&gt;this&lt;/code&gt; 值对象不是 &lt;code&gt;Function&lt;/code&gt; 对象，则它将抛出&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;异常（&amp;ldquo;在不兼容的对象上调用了Function.prototype.toString&amp;rdquo;）。</target>
        </trans-unit>
        <trans-unit id="97243005725f08a5812c6aa4c5b25fe95d939f4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception (&quot;Function.prototype.toString called on incompatible object&quot;), if its &lt;code&gt;this&lt;/code&gt; value object is not a &lt;code&gt;Function&lt;/code&gt; object. It will also throw for &lt;a href=&quot;../proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt; objects, for example.</source>
          <target state="translated">如果 &lt;code&gt;toString()&lt;/code&gt; 方法的 &lt;code&gt;this&lt;/code&gt; 值对象不是 &lt;code&gt;Function&lt;/code&gt; 对象，则它将抛出&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;异常（&amp;ldquo;在不兼容的对象上调用了Function.prototype.toString&amp;rdquo;）。例如，它还会抛出&lt;a href=&quot;../proxy&quot;&gt; &lt;code&gt;Proxy&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="50872c2d5a0223153996743472e6bfd2cc8e42f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toTimeString()&lt;/code&gt; method is especially useful because compliant engines implementing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/ECMAScript&quot;&gt;ECMA-262&lt;/a&gt; may differ in the string obtained from &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; objects, as the format is implementation-dependent; simple string slicing approaches may not produce consistent results across multiple engines.</source>
          <target state="translated">所述 &lt;code&gt;toTimeString()&lt;/code&gt; 方法是特别有用的，因为执行引擎兼容&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/ECMAScript&quot;&gt;ECMA-262&lt;/a&gt;可从所获得的字符串中不同&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt;为&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;对象，格式是依赖于实现的; 简单的字符串切片方法可能无法在多个引擎上产生一致的结果。</target>
        </trans-unit>
        <trans-unit id="216b3b43e20f631e6596b3b4c5a0280919d928d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toTimeString()&lt;/code&gt; method is especially useful because compliant engines implementing &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;ECMA-262&lt;/a&gt; may differ in the string obtained from &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; objects, as the format is implementation-dependent; simple string slicing approaches may not produce consistent results across multiple engines.</source>
          <target state="translated">所述 &lt;code&gt;toTimeString()&lt;/code&gt; 方法是特别有用的，因为执行引擎兼容&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;ECMA-262&lt;/a&gt;可从所获得的字符串中不同&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt;为&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;对象，格式是依赖于实现的; 简单的字符串切片方法可能无法在多个引擎上产生一致的结果。</target>
        </trans-unit>
        <trans-unit id="9eedbbd929be16bb6a08efc9eee825f499e9beab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toTimeString()&lt;/code&gt; method returns the time portion of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object in human readable form in American English.</source>
          <target state="translated">&lt;code&gt;toTimeString()&lt;/code&gt; 方法以美国人可以理解的形式返回&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;对象的时间部分。</target>
        </trans-unit>
        <trans-unit id="1dde95453b987352dae87ecb21647f71611776b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toTimeString()&lt;/code&gt; method returns the time portion of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object in human readable form in English.</source>
          <target state="translated">所述 &lt;code&gt;toTimeString()&lt;/code&gt; 方法返回的时间部分&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;以人可读形式的英文对象。</target>
        </trans-unit>
        <trans-unit id="5c831507f30af5e55f57b81c961372d23720a569" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toUTCString()&lt;/code&gt; method converts a date to a string, using the UTC time zone.</source>
          <target state="translated">所述 &lt;code&gt;toUTCString()&lt;/code&gt; 方法的日期转换为字符串，使用UTC时间。</target>
        </trans-unit>
        <trans-unit id="aae475104e93c5906b6da885303c159f6bd726b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toUpperCase()&lt;/code&gt; method returns the calling string value converted to uppercase (the value will be converted to a string if it isn't one).</source>
          <target state="translated">的 &lt;code&gt;toUpperCase()&lt;/code&gt; 方法返回主叫字符串值转换为大写（该值将被转换成一个字符串，如果它不是一个）。</target>
        </trans-unit>
        <trans-unit id="91e9cc5eaa6597510653d6ea202a3d6fc4562f87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toUpperCase()&lt;/code&gt; method returns the value of the string converted to uppercase. This method does not affect the value of the string itself since JavaScript strings are immutable.</source>
          <target state="translated">的 &lt;code&gt;toUpperCase()&lt;/code&gt; 方法返回字符串的值转换为大写。此方法不会影响字符串本身的值，因为JavaScript字符串是不可变的。</target>
        </trans-unit>
        <trans-unit id="f3ac0a8da3e9e204f8f84192c5f916cf4feeaf6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trim()&lt;/code&gt; method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).</source>
          <target state="translated">的 &lt;code&gt;trim()&lt;/code&gt; 方法从字符串中删除的两端空格。在这种情况下，空白是所有空白字符（空格，制表符，不间断空格等）和所有行终止符（LF，CR等）。</target>
        </trans-unit>
        <trans-unit id="4b4d033294b8f2c8dadaa99ad8ed1867d691b833" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trim()&lt;/code&gt; method returns the string stripped of whitespace from both ends. &lt;code&gt;trim()&lt;/code&gt; does not affect the value of the &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; itself.</source>
          <target state="translated">的 &lt;code&gt;trim()&lt;/code&gt; 方法返回从两端剥离空格的字符串。 &lt;code&gt;trim()&lt;/code&gt; 不会影响 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; 本身的值。</target>
        </trans-unit>
        <trans-unit id="a77d84b3b80fca92ad2f2c44608b4f1ce7547f76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trim()&lt;/code&gt; method returns the string stripped of whitespace from both ends. &lt;code&gt;trim()&lt;/code&gt; does not affect the value of the string itself.</source>
          <target state="translated">的 &lt;code&gt;trim()&lt;/code&gt; 方法返回从两端剥离空格的字符串。 &lt;code&gt;trim()&lt;/code&gt; 不会影响字符串本身的值。</target>
        </trans-unit>
        <trans-unit id="e8326ead88e4cd9c2599706946cb0d4f772330fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trimEnd()&lt;/code&gt; / &lt;code&gt;trimRight()&lt;/code&gt; methods return the string stripped of whitespace from its right end. &lt;code&gt;trimEnd()&lt;/code&gt; or &lt;code&gt;trimRight()&lt;/code&gt; do not affect the value of the string itself.</source>
          <target state="translated">该 &lt;code&gt;trimEnd()&lt;/code&gt; / &lt;code&gt;trimRight()&lt;/code&gt; 方法返回从右端去除空白的字符串。 &lt;code&gt;trimEnd()&lt;/code&gt; 或 &lt;code&gt;trimRight()&lt;/code&gt; 不会影响字符串本身的值。</target>
        </trans-unit>
        <trans-unit id="d0c42df8ea8425f6289055b0685f49215590cd01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trimEnd()&lt;/code&gt; method removes whitespace from the end of a string. &lt;code&gt;trimRight()&lt;/code&gt; is an alias of this method.</source>
          <target state="translated">所述 &lt;code&gt;trimEnd()&lt;/code&gt; 方法删除字符串的末尾空格。 &lt;code&gt;trimRight()&lt;/code&gt; 是此方法的别名。</target>
        </trans-unit>
        <trans-unit id="84d6affa61054b04ac320da53491af0255f69a38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trimStart()&lt;/code&gt; / &lt;code&gt;trimLeft()&lt;/code&gt; methods return the string stripped of whitespace from its left end. &lt;code&gt;trimLeft()&lt;/code&gt; or &lt;code&gt;trimStart()&lt;/code&gt; do not affect the value of the string itself.</source>
          <target state="translated">所述 &lt;code&gt;trimStart()&lt;/code&gt; / &lt;code&gt;trimLeft()&lt;/code&gt; 方法返回从其左侧端部剥离空格的字符串。 &lt;code&gt;trimLeft()&lt;/code&gt; 或 &lt;code&gt;trimStart()&lt;/code&gt; 不会影响字符串本身的值。</target>
        </trans-unit>
        <trans-unit id="a273caafe0e3f21a7d29b468ea165a0f70d1e4ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trimStart()&lt;/code&gt; method removes whitespace from the beginning of a string. &lt;code&gt;trimLeft()&lt;/code&gt; is an alias of this method.</source>
          <target state="translated">所述 &lt;code&gt;trimStart()&lt;/code&gt; 方法删除字符串的开头的空格。 &lt;code&gt;trimLeft()&lt;/code&gt; 是此方法的别名。</target>
        </trans-unit>
        <trans-unit id="eebf8e475a70ad0fe4b18cfcf6acf4a5a93b64ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try...catch&lt;/code&gt; statement marks a block of statements to try and specifies a response should an exception be thrown.</source>
          <target state="translated">在 &lt;code&gt;try...catch&lt;/code&gt; 语句声明标记块，试图指定的响应应该抛出异常。</target>
        </trans-unit>
        <trans-unit id="8e8dbdfa9a4dbb033289cdec8edd0c90b52dd4dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try...catch&lt;/code&gt; statement marks a block of statements to try, and specifies a response, should an exception be thrown.</source>
          <target state="translated">在 &lt;code&gt;try...catch&lt;/code&gt; 语句标记语句块的尝试，并指定响应，应该抛出异常。</target>
        </trans-unit>
        <trans-unit id="769e08ea4cd1c8b66874471821aed2443abfa2a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try&lt;/code&gt; statement consists of a &lt;code&gt;try&lt;/code&gt; block, which contains one or more statements. &lt;code&gt;{}&lt;/code&gt; must always be used, also for single statements. At least one &lt;code&gt;catch&lt;/code&gt; clause, or a &lt;code&gt;finally&lt;/code&gt; clause, must be present. This gives us three forms for the &lt;code&gt;try&lt;/code&gt; statement:</source>
          <target state="translated">在 &lt;code&gt;try&lt;/code&gt; 语句包括一个的 &lt;code&gt;try&lt;/code&gt; 块，其中包含一个或多个语句。 &lt;code&gt;{}&lt;/code&gt; 必须始终用于单个语句。必须至少存在一个 &lt;code&gt;catch&lt;/code&gt; 子句或 &lt;code&gt;finally&lt;/code&gt; 子句。这为 &lt;code&gt;try&lt;/code&gt; 语句提供了三种形式：</target>
        </trans-unit>
        <trans-unit id="975841640c2369bf00f364df0218caa575ba682d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try&lt;/code&gt; statement consists of a &lt;code&gt;try&lt;/code&gt;-block, which contains one or more statements. &lt;code&gt;{}&lt;/code&gt; must always be used, even for single statements. At least one &lt;code&gt;catch&lt;/code&gt;-block, or a &lt;code&gt;finally&lt;/code&gt;-block, must be present. This gives us three forms for the &lt;code&gt;try&lt;/code&gt; statement:</source>
          <target state="translated">在 &lt;code&gt;try&lt;/code&gt; 语句包括一个的 &lt;code&gt;try&lt;/code&gt; -块，其中包含一个或多个语句。即使对于单个语句，也必须始终使用 &lt;code&gt;{}&lt;/code&gt; 。必须至少存在一个 &lt;code&gt;catch&lt;/code&gt; 块，或一个 &lt;code&gt;finally&lt;/code&gt; 块。这为 &lt;code&gt;try&lt;/code&gt; 语句提供了三种形式：</target>
        </trans-unit>
        <trans-unit id="4bec62c61738f40c660dbbd07be4d2a3f373053d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeof&lt;/code&gt; operator determines the type of a given object.</source>
          <target state="translated">的 &lt;code&gt;typeof&lt;/code&gt; 运算操作者确定一个给定的对象的类型。</target>
        </trans-unit>
        <trans-unit id="c55560a650a9b123b737ee66a03b700f6fe1cd62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeof&lt;/code&gt; operator is followed by its operand:</source>
          <target state="translated">该 &lt;code&gt;typeof&lt;/code&gt; 运算操作之后的操作：</target>
        </trans-unit>
        <trans-unit id="1a23f4a9cde5079c1f99d663faf09b3511568087" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeof&lt;/code&gt; operator returns a string indicating the type of the unevaluated operand.</source>
          <target state="translated">的 &lt;code&gt;typeof&lt;/code&gt; 运算操作者返回一个字符串指示未计算的操作数的类型。</target>
        </trans-unit>
        <trans-unit id="f610c77b8f248a18fe0dc12f1ff1e1a5a0afa79c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unicode&lt;/code&gt; property indicates whether or not the &quot;&lt;code&gt;u&lt;/code&gt;&quot; flag is used with a regular expression. &lt;code&gt;unicode&lt;/code&gt; is a read-only property of an individual regular expression instance.</source>
          <target state="translated">所述 &lt;code&gt;unicode&lt;/code&gt; 属性指示&amp;ldquo;是否 &lt;code&gt;u&lt;/code&gt; &amp;rdquo;标志使用具有正则表达式。 &lt;code&gt;unicode&lt;/code&gt; 是单个正则表达式实例的只读属性。</target>
        </trans-unit>
        <trans-unit id="4e7a255e1ba3894e96414ac849932235569bc182" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unregister&lt;/code&gt; unregisters a target object from a &lt;a href=&quot;../finalizationregistry&quot;&gt;&lt;code&gt;FinalizationRegistry&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">该 &lt;code&gt;unregister&lt;/code&gt; 注销从目标对象&lt;a href=&quot;../finalizationregistry&quot;&gt; &lt;code&gt;FinalizationRegistry&lt;/code&gt; &lt;/a&gt;实例。</target>
        </trans-unit>
        <trans-unit id="ebe281bf94ee2b4c66c24905c0dbe8e1af906423" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unshift&lt;/code&gt; method inserts the given values to the beginning of an array-like object.</source>
          <target state="translated">所述 &lt;code&gt;unshift&lt;/code&gt; 方法插入该给定值，以类似阵列的对象的开头。</target>
        </trans-unit>
        <trans-unit id="ac924abd62c4ecdb7140ca95d1618526024a5797" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method of &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; returns the primitive value of a &lt;code&gt;Boolean&lt;/code&gt; object or literal &lt;code&gt;Boolean&lt;/code&gt; as a Boolean data type.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;valueOf()&lt;/code&gt; 方法以布尔数据类型返回 &lt;code&gt;Boolean&lt;/code&gt; 对象或文字 &lt;code&gt;Boolean&lt;/code&gt; 值的原始值。</target>
        </trans-unit>
        <trans-unit id="8cad25838721f6b6affa0e29e3484611dc0437b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method of &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; returns the primitive value of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object as a string data type. This value is equivalent to &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;String.prototype.toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;valueOf()&lt;/code&gt; 方法以字符串数据类型返回&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;对象的原始值。此值等效于&lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;String.prototype.toString()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a2b73ecde1dfc53d92441f91129b9e133efc59fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method returns the primitive value of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object as a number data type, the number of milliseconds since midnight 01 January, 1970 UTC.</source>
          <target state="translated">所述 &lt;code&gt;valueOf()&lt;/code&gt; 方法返回的原始值&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;对象作为多个数据类型，因为午夜01月01日的毫秒数，1970 UTC。</target>
        </trans-unit>
        <trans-unit id="da22d1c9f68730f5c70c46b9c54ce3ad651cea55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method returns the primitive value of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">所述 &lt;code&gt;valueOf()&lt;/code&gt; 方法返回的原始值&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="c14657e05277c3ae2629d97db6e277ae1e2ddf97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method returns the primitive value of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">所述 &lt;code&gt;valueOf()&lt;/code&gt; 方法返回的原始值&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="838b5313047bbb34666f3e61531649c3d13eb091" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method returns the primitive value of the specified object.</source>
          <target state="translated">所述 &lt;code&gt;valueOf()&lt;/code&gt; 方法返回指定对象的原始值。</target>
        </trans-unit>
        <trans-unit id="ba9d9d634f93ed0d2b9ead2d124af07bf4d2c02e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method returns the wrapped primitive value of a &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">所述 &lt;code&gt;valueOf()&lt;/code&gt; 方法返回的包裹原始值&lt;a href=&quot;../bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; 有&lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="92f2a0b3c5433cf03e1339120e414cfefce5a576" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method returns the wrapped primitive value of a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">所述 &lt;code&gt;valueOf()&lt;/code&gt; 方法返回的包裹原始值&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;的对象。</target>
        </trans-unit>
        <trans-unit id="38dcfa335912989ce16f78d3ad1c5e19e069e1ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf&lt;/code&gt; method of &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; returns the primitive value of a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; object or literal &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; as a Boolean data type.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;valueOf&lt;/code&gt; 方法将&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;对象或文字&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;值的原始值作为布尔数据类型返回。</target>
        </trans-unit>
        <trans-unit id="535be2559b3b7f2298770f875f760c417c3946ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf&lt;/code&gt; method of &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; returns the primitive value of a Symbol object as a Symbol data type.</source>
          <target state="translated">&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;valueOf&lt;/code&gt; 方法返回Symbol对象的原始值作为Symbol数据类型。</target>
        </trans-unit>
        <trans-unit id="55fa1d436ded0f7743550d3d4a3a96be51625c12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;values()&lt;/code&gt; method returns a new &lt;code&gt;Array Iterator&lt;/code&gt; object that contains the values for each index in the array.</source>
          <target state="translated">的 &lt;code&gt;values()&lt;/code&gt; 方法返回一个新的 &lt;code&gt;Array Iterator&lt;/code&gt; 包含该阵列中的每个索引值的对象。</target>
        </trans-unit>
        <trans-unit id="e0231a9ea179e12e662b6630901c815e35811e4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;values()&lt;/code&gt; method returns a new &lt;strong&gt;&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;Iterator&lt;/a&gt;&lt;/strong&gt; object that contains the values for each element in the &lt;code&gt;Map&lt;/code&gt; object in insertion order.</source>
          <target state="translated">的 &lt;code&gt;values()&lt;/code&gt; 方法返回一个新的&lt;strong&gt;&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;迭代&lt;/a&gt;&lt;/strong&gt;，它包含在每个元素的值的对象 &lt;code&gt;Map&lt;/code&gt; 中插入顺序对象。</target>
        </trans-unit>
        <trans-unit id="fe7fa8537426c000f59931eff1dd448535b18cf3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;values()&lt;/code&gt; method returns a new iterator object that contains the values for each element in the &lt;code&gt;Set&lt;/code&gt; object in insertion order.</source>
          <target state="translated">的 &lt;code&gt;values()&lt;/code&gt; 方法返回包含在每个元素的值的新的迭代器对象 &lt;code&gt;Set&lt;/code&gt; 在插入顺序对象。</target>
        </trans-unit>
        <trans-unit id="96c26479611e6ade5ab557e821591eb5864a5a94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;var&lt;/code&gt; declares a function-scoped or globally-scoped variable, optionally initializing it to a value.</source>
          <target state="translated">该 &lt;code&gt;var&lt;/code&gt; 声明的函数作用域或全局范围的变量，任选其初始化为一个值。</target>
        </trans-unit>
        <trans-unit id="6d7e5202574c3bb684ad4cc90ea7079a312c949a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;var&lt;/code&gt; declares a variable, optionally initializing it to a value.</source>
          <target state="translated">该 &lt;code&gt;var&lt;/code&gt; 声明一个变量，它任选地初始化为一个值。</target>
        </trans-unit>
        <trans-unit id="897af01fbc7a1aeaf9f2be520c8cb53a174fd03e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; evaluates the given &lt;code&gt;&lt;em&gt;expression&lt;/em&gt;&lt;/code&gt; and then returns &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">的 &lt;code&gt;void&lt;/code&gt; 求值给定的 &lt;code&gt;&lt;em&gt;expression&lt;/em&gt;&lt;/code&gt; ，然后返回&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="82acc2ba21ba03475bc6c3532a1ee15ad0f92f7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; operator discards an expression's return value.</source>
          <target state="translated">该 &lt;code&gt;void&lt;/code&gt; 操作丢弃一个表达式的返回值。</target>
        </trans-unit>
        <trans-unit id="e5db750a3354d5b639f19156e00ff8b9a3dc4cbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; operator is often used merely to obtain the &lt;code&gt;undefined&lt;/code&gt; primitive value, usually using &quot;&lt;code&gt;void(0)&lt;/code&gt;&quot; (which is equivalent to &quot;&lt;code&gt;void 0&lt;/code&gt;&quot;). In these cases, the global variable &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; can be used instead (assuming it has not been assigned to a non-default value).</source>
          <target state="translated">的 &lt;code&gt;void&lt;/code&gt; 操作者经常被用来仅获取 &lt;code&gt;undefined&lt;/code&gt; 原始值，通常使用&amp;ldquo; &lt;code&gt;void(0)&lt;/code&gt; &amp;rdquo;（这是相当于&amp;ldquo; &lt;code&gt;void 0&lt;/code&gt; &amp;rdquo;）。在这些情况下，可以改用&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;全局变量（假设尚未将其分配给非默认值）。</target>
        </trans-unit>
        <trans-unit id="8c305080a4667532148f739e8c7677a377759908" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; operator is often used merely to obtain the &lt;code&gt;undefined&lt;/code&gt; primitive value, usually using &quot;&lt;code&gt;void(0)&lt;/code&gt;&quot; (which is equivalent to &quot;&lt;code&gt;void 0&lt;/code&gt;&quot;). In these cases, the global variable &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; can be used.</source>
          <target state="translated">的 &lt;code&gt;void&lt;/code&gt; 操作者经常被用来仅获取 &lt;code&gt;undefined&lt;/code&gt; 原始值，通常使用&amp;ldquo; &lt;code&gt;void(0)&lt;/code&gt; &amp;rdquo;（这是相当于&amp;ldquo; &lt;code&gt;void 0&lt;/code&gt; &amp;rdquo;）。在这些情况下，可以使用&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;的全局变量。</target>
        </trans-unit>
        <trans-unit id="b3d13e2a5ad5de3f04bc4a1d15b6fb13b7da1253" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;wait()&lt;/code&gt; and &lt;code&gt;notify()&lt;/code&gt; methods are modeled on Linux futexes (&quot;fast user-space mutex&quot;) and provide ways for waiting until a certain condition becomes true and are typically used as blocking constructs.</source>
          <target state="translated">的 &lt;code&gt;wait()&lt;/code&gt; 和 &lt;code&gt;notify()&lt;/code&gt; 方法被建模在Linux futexes的（&amp;ldquo;快速用户空间互斥&amp;rdquo;）和等待方式提供，直到一定的条件变为真，并且通常用作阻挡构建体。</target>
        </trans-unit>
        <trans-unit id="c40665399093e4817a0248d3b80c6b99f91366d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;x = 2&lt;/code&gt; is limited in scope to the block in which it was defined.</source>
          <target state="translated">在 &lt;code&gt;x = 2&lt;/code&gt; 是在范围上不限于在其被定义的块。</target>
        </trans-unit>
        <trans-unit id="92ee9179a0339ffe93939d03abed32b4d463f439" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield*&lt;/code&gt; expression iterates over the operand and &lt;code&gt;yield&lt;/code&gt;s each value returned by it.</source>
          <target state="translated">的 &lt;code&gt;yield*&lt;/code&gt; 在操作数和表达迭代 &lt;code&gt;yield&lt;/code&gt; &amp;scaron;通过它返回的每个值。</target>
        </trans-unit>
        <trans-unit id="ceb06a046a90f1a77d67b9b150bf36b1e7029262" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield*&lt;/code&gt; expression iterates over the operand and yields each value returned by it.</source>
          <target state="translated">的 &lt;code&gt;yield*&lt;/code&gt; 在操作数迭代表达，并产生通过将其返回的每个值。</target>
        </trans-unit>
        <trans-unit id="ecfbc752dbf10bd278aee60426270db4ee3e7593" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield*&lt;/code&gt; is used to delegate to another &lt;a href=&quot;../statements/function*&quot;&gt;&lt;code&gt;generator&lt;/code&gt;&lt;/a&gt; or iterable object.</source>
          <target state="translated">的 &lt;code&gt;yield*&lt;/code&gt; 用于委托给另一&lt;a href=&quot;../statements/function*&quot;&gt; &lt;code&gt;generator&lt;/code&gt; &lt;/a&gt;或迭代的对象。</target>
        </trans-unit>
        <trans-unit id="26fb3b11fb166e5aa3634e574db12005808db70d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield&lt;/code&gt; keyword actually returns an &lt;code&gt;IteratorResult&lt;/code&gt; object with two properties, &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;done&lt;/code&gt;. The &lt;code&gt;value&lt;/code&gt; property is the result of evaluating the &lt;code&gt;yield&lt;/code&gt; expression, and &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, indicating that the generator function has not fully completed.</source>
          <target state="translated">该 &lt;code&gt;yield&lt;/code&gt; 关键字实际返回的 &lt;code&gt;IteratorResult&lt;/code&gt; 有两个属性，对象 &lt;code&gt;value&lt;/code&gt; 和 &lt;code&gt;done&lt;/code&gt; 。所述 &lt;code&gt;value&lt;/code&gt; 属性是评估的结果 &lt;code&gt;yield&lt;/code&gt; 表达， &lt;code&gt;done&lt;/code&gt; 是 &lt;code&gt;false&lt;/code&gt; ，指示生成器函数还没有完全完成。</target>
        </trans-unit>
        <trans-unit id="ca8971816267d11315112df18a69038473f47628" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield&lt;/code&gt; keyword causes the call to the generator's &lt;code&gt;next()&lt;/code&gt; method to return an &lt;code&gt;IteratorResult&lt;/code&gt; object with two properties: &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;done&lt;/code&gt;. The &lt;code&gt;value&lt;/code&gt; property is the result of evaluating the &lt;code&gt;yield&lt;/code&gt; expression, and &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, indicating that the generator function has not fully completed.</source>
          <target state="translated">的 &lt;code&gt;yield&lt;/code&gt; 关键字使该呼叫到发生器的 &lt;code&gt;next()&lt;/code&gt; 方法返回的 &lt;code&gt;IteratorResult&lt;/code&gt; 具有两个属性对象： &lt;code&gt;value&lt;/code&gt; 和 &lt;code&gt;done&lt;/code&gt; 。所述 &lt;code&gt;value&lt;/code&gt; 属性是评估的结果 &lt;code&gt;yield&lt;/code&gt; 表达， &lt;code&gt;done&lt;/code&gt; 是 &lt;code&gt;false&lt;/code&gt; ，指示生成器函数还没有完全完成。</target>
        </trans-unit>
        <trans-unit id="9df48637246cf3fa0fd6096242e9cd90e47acc90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield&lt;/code&gt; keyword is used to pause and resume a generator function (&lt;a href=&quot;../statements/function*&quot;&gt;&lt;code&gt;function*&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function&quot;&gt;legacy generator function&lt;/a&gt;).</source>
          <target state="translated">的 &lt;code&gt;yield&lt;/code&gt; 关键字用于暂停和恢复发电机功能（&lt;a href=&quot;../statements/function*&quot;&gt; &lt;code&gt;function*&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function&quot;&gt;遗留发生器功能&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="9ae86ee006331319767ea8ea1e7b47a6d042f723" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield&lt;/code&gt; keyword pauses generator function execution and the value of the expression following the &lt;code&gt;yield&lt;/code&gt; keyword is returned to the generator's caller. It can be thought of as a generator-based version of the &lt;code&gt;return&lt;/code&gt; keyword.</source>
          <target state="translated">的 &lt;code&gt;yield&lt;/code&gt; 关键字暂停发生器功能执行和下面的表达式的值 &lt;code&gt;yield&lt;/code&gt; 关键字返回到发生器的呼叫者。可以将其视为 &lt;code&gt;return&lt;/code&gt; 关键字的基于生成器的版本。</target>
        </trans-unit>
        <trans-unit id="c53061ccc04d449531ceb9c5e7a4f4ace5f766b5" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;locale&lt;/em&gt;'s Unicode locale identifier string.</source>
          <target state="translated">的&lt;em&gt;区域设置&lt;/em&gt;的Unicode语言环境标识符字符串。</target>
        </trans-unit>
        <trans-unit id="065463d049b36377da14331481f7dd33b125cfc1" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;n&lt;/em&gt;th string found by a parenthesized capture group, provided the first argument to &lt;code&gt;replace()&lt;/code&gt; was a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object. (Corresponds to &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, etc. above.) For example, if &lt;code&gt;/(\a+)(\b+)/&lt;/code&gt;, was given, &lt;code&gt;p1&lt;/code&gt; is the match for &lt;code&gt;\a+&lt;/code&gt;, and &lt;code&gt;p2&lt;/code&gt; for &lt;code&gt;\b+&lt;/code&gt;.</source>
          <target state="translated">带有括号的捕获组找到的第&lt;em&gt;n&lt;/em&gt;个字符串，条件是 &lt;code&gt;replace()&lt;/code&gt; 的第一个参数是&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;对象。（与上面的 &lt;code&gt;$1&lt;/code&gt; ， &lt;code&gt;$2&lt;/code&gt; 等对应。）例如，如果给定 &lt;code&gt;/(\a+)(\b+)/&lt;/code&gt; ，则 &lt;code&gt;p1&lt;/code&gt; 是 &lt;code&gt;\a+&lt;/code&gt; 的匹配项， &lt;code&gt;p2&lt;/code&gt; 是 &lt;code&gt;\b+&lt;/code&gt; 的匹配项。</target>
        </trans-unit>
        <trans-unit id="afc59143cc18af9cdc27570c778510a67d50d1e6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Proxy&lt;/strong&gt; object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).</source>
          <target state="translated">该&lt;strong&gt;代理&lt;/strong&gt;对象用来定义基本操作（如财产查找，分配，枚举函数调用等），自定义行为。</target>
        </trans-unit>
        <trans-unit id="c5ef3d98d86d821ee86cd80487256c6f9f09f04a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;array comprehension&lt;/strong&gt; syntax was a JavaScript expression which allowed you to quickly assemble a new array based on an existing one. However, it has been removed from the standard and the Firefox implementation. Do not use it!</source>
          <target state="translated">该&lt;strong&gt;阵列理解&lt;/strong&gt;语法是一个JavaScript表达式，它允许您快速组装基于现有的一个新的数组。但是，它已从标准和Firefox实现中删除。不要使用它！</target>
        </trans-unit>
        <trans-unit id="d8f59a014ecb1a14707700e8eac92c0e0d267805" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;bind()&lt;/strong&gt; function creates a new &lt;strong&gt;bound function&lt;/strong&gt;&lt;strong&gt;(BF)&lt;/strong&gt;. A &lt;strong&gt;BF&lt;/strong&gt; is an &lt;strong&gt;exotic function object&lt;/strong&gt; (a term from &lt;strong&gt;ECMAScript 2015&lt;/strong&gt;) that wraps the original function object. Calling a &lt;strong&gt;BF&lt;/strong&gt; generally results in the execution of its &lt;strong&gt;wrapped function&lt;/strong&gt;.</source>
          <target state="translated">该&lt;strong&gt;绑定（）&lt;/strong&gt;函数创建一个新的&lt;strong&gt;绑定功能&lt;/strong&gt;&lt;strong&gt;（BF） &lt;/strong&gt;。甲&lt;strong&gt;BF&lt;/strong&gt;是&lt;strong&gt;奇异的功能对象&lt;/strong&gt;（从术语&lt;strong&gt;的ECMAScript 2015&lt;/strong&gt;），该包装的原始功能对象。调用&lt;strong&gt;BF&lt;/strong&gt;通常导致其&lt;strong&gt;包装函数&lt;/strong&gt;的执行。</target>
        </trans-unit>
        <trans-unit id="1d733e1153af7fad236cbcb528b0288e3e22d5e4" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;break statement&lt;/strong&gt; terminates the current loop, &lt;a href=&quot;switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;label&quot;&gt;&lt;code&gt;label&lt;/code&gt;&lt;/a&gt; statement and transfers program control to the statement following the terminated statement.</source>
          <target state="translated">的&lt;strong&gt;break语句&lt;/strong&gt;终止当前循环，&lt;a href=&quot;switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt;，或&lt;a href=&quot;label&quot;&gt; &lt;code&gt;label&lt;/code&gt; &lt;/a&gt;之后的终止声明陈述和转移程序控制的语句。</target>
        </trans-unit>
        <trans-unit id="94714384460d5950f3307e7c533970bce49359f6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;catch()&lt;/strong&gt; method returns a &lt;code&gt;Promise&lt;/code&gt; and deals with rejected cases only. It behaves the same as calling &lt;a href=&quot;then&quot;&gt;&lt;code&gt;Promise.prototype.then(undefined, onRejected)&lt;/code&gt;&lt;/a&gt; (in fact, calling &lt;code&gt;obj.catch(onRejected)&lt;/code&gt; internally calls &lt;code&gt;obj.then(undefined, onRejected)&lt;/code&gt;). This means, that you have to provide &lt;code&gt;onRejected&lt;/code&gt; function even if you want to fallback to &lt;code&gt;undefined&lt;/code&gt; result value - for example &lt;code&gt;obj.catch(() =&amp;gt; {})&lt;/code&gt;.</source>
          <target state="translated">该&lt;strong&gt;抓（）&lt;/strong&gt;方法返回一个 &lt;code&gt;Promise&lt;/code&gt; ，并与只拒绝的情况下交易。它的行为与调用&lt;a href=&quot;then&quot;&gt; &lt;code&gt;Promise.prototype.then(undefined, onRejected)&lt;/code&gt; &lt;/a&gt;（实际上，在内部调用 &lt;code&gt;obj.catch(onRejected)&lt;/code&gt; 会调用 &lt;code&gt;obj.then(undefined, onRejected)&lt;/code&gt; ）。这意味着，即使您想回 &lt;code&gt;obj.catch(() =&amp;gt; {})&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; 结果值，也必须提供 &lt;code&gt;onRejected&lt;/code&gt; 函数-例如obj.catch（（）=&amp;gt; {}）。</target>
        </trans-unit>
        <trans-unit id="99ace5b02df9e8b779d43f17fe783c684b201a52" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;class declaration&lt;/strong&gt; creates a new class with a given name using prototype-based inheritance.</source>
          <target state="translated">在&lt;strong&gt;类声明&lt;/strong&gt;创建与使用基于原型的继承给定名称的新类。</target>
        </trans-unit>
        <trans-unit id="4b070d15c9fff8d31d00ad8046e868b6d44dee1d" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;class expression&lt;/strong&gt; is one way to define a class in ECMAScript 2015. Similar to &lt;a href=&quot;function&quot;&gt;function expressions&lt;/a&gt;, class expressions can be named or unnamed. If named, the name of the class is local to the class body only.</source>
          <target state="translated">的&lt;strong&gt;类表达&lt;/strong&gt;是定义在ECMAScript中2015类似的一类，以单向&lt;a href=&quot;function&quot;&gt;函数表达式&lt;/a&gt;，类表达式可以指定或未指定。如果已命名，则该类的名称仅对于类主体而言是本地的。</target>
        </trans-unit>
        <trans-unit id="8fe53faa937fc7cde1f3dbdb6693fd9e43484178" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;class expression&lt;/strong&gt; is one way to define a class in ECMAScript 2015. Similar to &lt;a href=&quot;function&quot;&gt;function expressions&lt;/a&gt;, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. JavaScript classes use prototype-based inheritance.</source>
          <target state="translated">的&lt;strong&gt;类表达&lt;/strong&gt;是定义在ECMAScript中2015类似的一类，以单向&lt;a href=&quot;function&quot;&gt;函数表达式&lt;/a&gt;，类表达式可以指定或未指定。如果已命名，则该类的名称仅对于类主体而言是本地的。JavaScript类使用基于原型的继承。</target>
        </trans-unit>
        <trans-unit id="73225444d7e8533026618e451637c545dd6c871c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;conditional (ternary) operator&lt;/strong&gt; is the only JavaScript operator that takes three operands. This operator is frequently used as a shortcut for the &lt;a href=&quot;../statements/if...else&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">该&lt;strong&gt;条件（三元）运算符&lt;/strong&gt;是唯一的JavaScript操作员三个操作数。该运算符通常用作&lt;a href=&quot;../statements/if...else&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;语句的快捷方式。</target>
        </trans-unit>
        <trans-unit id="b55eedd98ebed286049d5c125a3e70522d51d174" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;conditional (ternary) operator&lt;/strong&gt; is the only JavaScript operator that takes three operands: a condition followed by a question mark (&lt;code&gt;?&lt;/code&gt;), then an expression to execute if the condition is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt; followed by a colon (&lt;code&gt;:&lt;/code&gt;), and finally the expression to execute if the condition is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;. This operator is frequently used as a shortcut for the &lt;a href=&quot;../statements/if...else&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">的&lt;strong&gt;条件（三元）运算符&lt;/strong&gt;是唯一的JavaScript操作者需要三个操作数：条件后跟一个问号（ &lt;code&gt;?&lt;/code&gt; ，然后如果条件表达式来执行）&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt;后面跟着冒号（ &lt;code&gt;:&lt;/code&gt; ），最后的表达式来如果条件是&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;虚假的，&lt;/a&gt;则执行。该运算符通常用作&lt;a href=&quot;../statements/if...else&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;语句的快捷方式。</target>
        </trans-unit>
        <trans-unit id="a9330c73465ea3e6ff22f7d537d670942af5fe2a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;continue statement&lt;/strong&gt; terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.</source>
          <target state="translated">该&lt;strong&gt;continue语句&lt;/strong&gt;在当前或标签的循环的当前迭代的语句终止执行，并继续下一个迭代循环的执行。</target>
        </trans-unit>
        <trans-unit id="37a8ee20020657a18f3bca33142a67351ee49ca6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;debugger statement&lt;/strong&gt; invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.</source>
          <target state="translated">在&lt;strong&gt;调试程序语句&lt;/strong&gt;调用任何可用的调试功能，如设置断点。如果没有可用的调试功能，则此语句无效。</target>
        </trans-unit>
        <trans-unit id="f1f8b1715d765f723a3d6b24a097ae8fc219b0e8" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;default keyword &lt;/strong&gt;can be used in two situations in JavaScript: within a &lt;a href=&quot;switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt; statement, or with an &lt;a href=&quot;export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">该&lt;strong&gt;默认关键字&lt;/strong&gt;可以在两种情况下可以使用JavaScript中：一个内&lt;a href=&quot;switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt;语句，或与&lt;a href=&quot;export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt;的语句。</target>
        </trans-unit>
        <trans-unit id="27335960563bef2cdec1223d71b74b09bdcf3633" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;destructuring assignment&lt;/strong&gt; syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.</source>
          <target state="translated">该&lt;strong&gt;解构赋值&lt;/strong&gt;语法是JavaScript表达式，使得它可以从阵列解压缩的值，或从属性的对象，为不同的变量。</target>
        </trans-unit>
        <trans-unit id="db24014295ccb881f02ef10b67d2e5dcf0fe8bce" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;for statement&lt;/strong&gt; creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a &lt;a href=&quot;block&quot;&gt;block statement&lt;/a&gt;) to be executed in the loop.</source>
          <target state="translated">的&lt;strong&gt;for语句&lt;/strong&gt;创建一个循环，包括三个可选表达式，用括号括起来和由分号分隔，随后声明（通常是一个&lt;a href=&quot;block&quot;&gt;块语句&lt;/a&gt;中的循环将被执行）。</target>
        </trans-unit>
        <trans-unit id="dbaba40e57db93ab21dee53da06becedbf4d1aa4" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;function declaration&lt;/strong&gt; (function statement) defines a function with the specified parameters.</source>
          <target state="translated">的&lt;strong&gt;函数声明&lt;/strong&gt;（功能语句）限定了与指定的参数的函数。</target>
        </trans-unit>
        <trans-unit id="5246b915eb7c85d0437344cef9ea86765b90ccb2" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;if statement&lt;/strong&gt; executes a statement if a specified condition is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt;. If the condition is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;, another statement can be executed.</source>
          <target state="translated">&lt;strong&gt;如果&lt;/strong&gt;指定条件为&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;true&lt;/a&gt;，&lt;strong&gt;则if语句&lt;/strong&gt;执行一条语句。如果条件为&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;假&lt;/a&gt;，则可以执行另一条语句。</target>
        </trans-unit>
        <trans-unit id="e17438ef55a4e09a7dbcf723659c6679b84bf06f" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;iterable&lt;/strong&gt; protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a &lt;a href=&quot;statements/for...of&quot;&gt;&lt;code&gt;for..of&lt;/code&gt;&lt;/a&gt; construct. Some built-in types are &lt;a href=&quot;#Built-in_iterables&quot;&gt;built-in iterables&lt;/a&gt; with a default iteration behavior, such as &lt;a href=&quot;global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, while other types (such as &lt;a href=&quot;global_objects/object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;) are not.</source>
          <target state="translated">该&lt;strong&gt;迭代&lt;/strong&gt;协议允许JavaScript对象定义或定制自己的迭代行为，比如什么值在挂绕&lt;a href=&quot;statements/for...of&quot;&gt; &lt;code&gt;for..of&lt;/code&gt; &lt;/a&gt;结构。一些内置类型是具有默认迭代行为的&lt;a href=&quot;#Built-in_iterables&quot;&gt;内置可&lt;/a&gt;迭代对象，例如&lt;a href=&quot;global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;，而其他类型（例如&lt;a href=&quot;global_objects/object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;）则不是。</target>
        </trans-unit>
        <trans-unit id="256bf006dce59aa8632fcb126bf4510bc31e4563" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;iterator&lt;/strong&gt; protocol defines a standard way to produce a sequence of values (either finite or infinite), and potentially a return value when all values have been generated.</source>
          <target state="translated">所述&lt;strong&gt;迭代器&lt;/strong&gt;协议定义的标准方式产生的值（无论是有限或无限）的序列，并有可能当已经生成的所有值的返回值。</target>
        </trans-unit>
        <trans-unit id="1dc9001af6987d19bbd223d74b3ee5b04eac7a1e" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;labeled statement&lt;/strong&gt; can be used with &lt;a href=&quot;break&quot;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;continue&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt; statements. It is prefixing a statement with an identifier which you can refer to.</source>
          <target state="translated">该&lt;strong&gt;标签的语句&lt;/strong&gt;可以被用来&lt;a href=&quot;break&quot;&gt; &lt;code&gt;break&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;continue&quot;&gt; &lt;code&gt;continue&lt;/code&gt; &lt;/a&gt;陈述。它为语句添加了可以引用的标识符。</target>
        </trans-unit>
        <trans-unit id="c4e0f32aa1a33c6925dc3ea4d6f40ca6f8515801" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;optional chaining&lt;/strong&gt; operator (&lt;code&gt;?.&lt;/code&gt;) permits reading the value of a property located deep within a chain of connected objects without having to expressly validate that each reference in the chain is valid. The &lt;code&gt;?.&lt;/code&gt; operator functions similarly to the &lt;code&gt;.&lt;/code&gt; chaining operator, except that instead of causing an error if a reference is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/nullish&quot;&gt;nullish&lt;/a&gt; (&lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;), the expression short-circuits with a return value of &lt;code&gt;undefined&lt;/code&gt;. When used with function calls, it returns &lt;code&gt;undefined&lt;/code&gt; if the given function does not exist.</source>
          <target state="translated">的&lt;strong&gt;可选链接&lt;/strong&gt;操作者（ &lt;code&gt;?.&lt;/code&gt; ）允许读取位于深连接的对象的一个链内的属性的值，而不必明确地验证在链中的每个参考是有效的。的 &lt;code&gt;?.&lt;/code&gt; 操作符的功能类似于 &lt;code&gt;.&lt;/code&gt; 链接运算符，除了在引用为&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/nullish&quot;&gt;空&lt;/a&gt;（&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;）的情况下不会引起错误之外，该表达式会使用返回值 &lt;code&gt;undefined&lt;/code&gt; 短路。与函数调用一起使用时，如果给定的函数不存在，则返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a5afe6c326deb45bb1c28c14ba0b8f1e9c6e7f08" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;reducer&lt;/strong&gt; function is fed four parameters:</source>
          <target state="translated">该&lt;strong&gt;减速器&lt;/strong&gt;函数被馈送四个参数：</target>
        </trans-unit>
        <trans-unit id="9b6bcb7edc02f17e651ff5c8787ada8366e154a8" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;reducer&lt;/strong&gt; function takes four arguments:</source>
          <target state="translated">该&lt;strong&gt;减速&lt;/strong&gt;作用有四个参数：</target>
        </trans-unit>
        <trans-unit id="4a91b7f158fd8ddfc727835a7d5c6d3fe0e61fa6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;rest parameter&lt;/strong&gt; syntax allows us to represent an indefinite number of arguments as an array.</source>
          <target state="translated">的&lt;strong&gt;其余参数&lt;/strong&gt;语法允许我们表示的参数的不确定数目为一个数组。</target>
        </trans-unit>
        <trans-unit id="38cf1e83c03988b5e1319e2f037c50f8bc3c82c5" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;super&lt;/strong&gt; keyword is used to access and call functions on an object's parent.</source>
          <target state="translated">该&lt;strong&gt;超级&lt;/strong&gt;关键字用于访问和调用函数对对象的父。</target>
        </trans-unit>
        <trans-unit id="b78672748a55807b6043e5e7895d093fd7da02a5" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;value&lt;/strong&gt; of the &lt;strong&gt;first element&lt;/strong&gt; in the array that satisfies the provided testing function. Otherwise, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">该&lt;strong&gt;值&lt;/strong&gt;的的&lt;strong&gt;第一元件&lt;/strong&gt;的阵列中，所提供的测试满足功能。否则，返回&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8d9b434bf4770e269f3ed85648191f4b9db54c86" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;value&lt;/strong&gt; of the &lt;strong&gt;first element&lt;/strong&gt; in the array that satisfies the provided testing function; otherwise, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">该&lt;strong&gt;值&lt;/strong&gt;的的&lt;strong&gt;第一元件&lt;/strong&gt;的阵列，其满足提供了测试功能; 否则，返回&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="02842c94116a9c6809ef6eee7ec3c23722a1feab" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;while statement&lt;/strong&gt; creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.</source>
          <target state="translated">该&lt;strong&gt;while语句&lt;/strong&gt;创建一个循环，执行指定的语句，只要测试条件评估为真。在执行语句之前先评估条件。</target>
        </trans-unit>
        <trans-unit id="fd60c91aefb449ecfe0c5d63d04422740e88d367" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;with statement&lt;/strong&gt; extends the scope chain for a statement.</source>
          <target state="translated">该&lt;strong&gt;with语句&lt;/strong&gt;扩展了一份声明作用域链。</target>
        </trans-unit>
        <trans-unit id="20de650704584a71ec1cc4bd3892d441cac81fa1" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;n&lt;/var&gt;th string found by a parenthesized capture group (including named capturing groups), provided the first argument to &lt;code&gt;replace()&lt;/code&gt; was a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object. (Corresponds to &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, etc. above.) For example, if &lt;code&gt;/(\a+)(\b+)/&lt;/code&gt;, was given, &lt;code&gt;p1&lt;/code&gt; is the match for &lt;code&gt;\a+&lt;/code&gt;, and &lt;code&gt;p2&lt;/code&gt; for &lt;code&gt;\b+&lt;/code&gt;.</source>
          <target state="translated">带有括号的捕获组（包括命名的捕获组）找到的第 &lt;var&gt;n&lt;/var&gt; 个字符串，条件是 &lt;code&gt;replace()&lt;/code&gt; 的第一个参数是&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;对象。（与上面的 &lt;code&gt;$1&lt;/code&gt; ， &lt;code&gt;$2&lt;/code&gt; 等对应。）例如，如果给定 &lt;code&gt;/(\a+)(\b+)/&lt;/code&gt; ，则 &lt;code&gt;p1&lt;/code&gt; 是 &lt;code&gt;\a+&lt;/code&gt; 的匹配项， &lt;code&gt;p2&lt;/code&gt; 是 &lt;code&gt;\b+&lt;/code&gt; 的匹配项。</target>
        </trans-unit>
        <trans-unit id="8b566c21e73336eba47f52bacbf5bbdea42d1a7b" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;n&lt;/var&gt;th string found by a parenthesized capture group, provided the first argument to &lt;code&gt;replace()&lt;/code&gt; was a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object. (Corresponds to &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, etc. above.) For example, if &lt;code&gt;/(\a+)(\b+)/&lt;/code&gt;, was given, &lt;code&gt;p1&lt;/code&gt; is the match for &lt;code&gt;\a+&lt;/code&gt;, and &lt;code&gt;p2&lt;/code&gt; for &lt;code&gt;\b+&lt;/code&gt;.</source>
          <target state="translated">带有括号的捕获组找到的第 &lt;var&gt;n&lt;/var&gt; 个字符串，条件是 &lt;code&gt;replace()&lt;/code&gt; 的第一个参数是&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;对象。（与上面的 &lt;code&gt;$1&lt;/code&gt; ， &lt;code&gt;$2&lt;/code&gt; 等对应。）例如，如果给定 &lt;code&gt;/(\a+)(\b+)/&lt;/code&gt; ，则 &lt;code&gt;p1&lt;/code&gt; 是 &lt;code&gt;\a+&lt;/code&gt; 的匹配项， &lt;code&gt;p2&lt;/code&gt; 是 &lt;code&gt;\b+&lt;/code&gt; 的匹配项。</target>
        </trans-unit>
        <trans-unit id="bd4b7d3e8a9687f79e6ec51636e21057aed22d25" translate="yes" xml:space="preserve">
          <source>The Array object being traversed</source>
          <target state="translated">被遍历的阵列对象</target>
        </trans-unit>
        <trans-unit id="124954ca57725d5f3aa87356bc8cd739a5f724f9" translate="yes" xml:space="preserve">
          <source>The Atomic operations are installed on an &lt;code&gt;Atomics&lt;/code&gt; module. Unlike the other global objects, &lt;code&gt;Atomics&lt;/code&gt; is not a constructor. You cannot use it with a &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt; or invoke the &lt;code&gt;Atomics&lt;/code&gt; object as a function. All properties and methods of &lt;code&gt;Atomics&lt;/code&gt; are static (as is the case with the &lt;a href=&quot;math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt; object, for example).</source>
          <target state="translated">原子操作安装在 &lt;code&gt;Atomics&lt;/code&gt; 模块上。与其他全局对象不同， &lt;code&gt;Atomics&lt;/code&gt; 不是构造函数。您不能将其与&lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; 运算符&lt;/a&gt;一起使用，也不能将 &lt;code&gt;Atomics&lt;/code&gt; 对象作为函数调用。 &lt;code&gt;Atomics&lt;/code&gt; 的所有属性和方法都是静态的（例如，&lt;a href=&quot;math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt;对象就是这种情况）。</target>
        </trans-unit>
        <trans-unit id="c9360b8cf41eb0b67799088a47ba963c3ed2252b" translate="yes" xml:space="preserve">
          <source>The BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in &lt;code&gt;locale&lt;/code&gt;.</source>
          <target state="translated">实际使用的语言环境的BCP 47语言标记。如果在输入BCP 47语言标签中请求了导致该语言环境的任何Unicode扩展值，则该语言环境所请求并支持的键值对将包含在 &lt;code&gt;locale&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf28f8279826d3b43c23b8e24d4d008e353709bf" translate="yes" xml:space="preserve">
          <source>The Debugger in the Firefox Developer Tools</source>
          <target state="translated">火狐开发者工具中的调试器</target>
        </trans-unit>
        <trans-unit id="999324758919789edc66930d918929098458f194" translate="yes" xml:space="preserve">
          <source>The ECMA-402 (ECMAScript Intl API) standard specifies standard objects and methods that enable language sensitive date and time formatting (available in Chrome 24+, Firefox 29+, IE11+, Safari10+).</source>
          <target state="translated">ECMA-402(ECMAScript Intl API)标准规定了标准对象和方法,这些对象和方法可以实现语言敏感的日期和时间格式化(在Chrome 24+、Firefox 29+、IE11+、Safari10+中可用)。</target>
        </trans-unit>
        <trans-unit id="d94e9a66058021ba2b982151b84285c419bc2f95" translate="yes" xml:space="preserve">
          <source>The ECMAScript 5 specification of the function &lt;code&gt;parseInt&lt;/code&gt; no longer allows implementations to treat Strings beginning with a &lt;code&gt;0&lt;/code&gt; character as octal values.</source>
          <target state="translated">函数 &lt;code&gt;parseInt&lt;/code&gt; 的ECMAScript 5规范不再允许实现将以 &lt;code&gt;0&lt;/code&gt; 字符开头的字符串视为八进制值。</target>
        </trans-unit>
        <trans-unit id="8e137fb633ed9a984aae87f772a0fc0ed4a1c417" translate="yes" xml:space="preserve">
          <source>The ECMAScript 5 specification of the function &lt;code&gt;parseInt&lt;/code&gt; no longer allows implementations to treat Strings beginning with a &lt;code&gt;0&lt;/code&gt; character as octal values. ECMAScript 5 states:</source>
          <target state="translated">函数 &lt;code&gt;parseInt&lt;/code&gt; 的ECMAScript 5规范不再允许实现将以 &lt;code&gt;0&lt;/code&gt; 字符开头的字符串视为八进制值。ECMAScript 5指出：</target>
        </trans-unit>
        <trans-unit id="a983278d136c9491e485caeae90dc290a6fe56bb" translate="yes" xml:space="preserve">
          <source>The ECMAScript epoch and timestamps</source>
          <target state="translated">ECMAScript的时代和时间戳。</target>
        </trans-unit>
        <trans-unit id="a66e85d25ba9cddbc980e459a583fda8ceb4e597" translate="yes" xml:space="preserve">
          <source>The ECMAScript specification mentions &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-rules-of-automatic-semicolon-insertion&quot;&gt;three rules of semicolon insertion&lt;/a&gt;.</source>
          <target state="translated">ECMAScript规范提到&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-rules-of-automatic-semicolon-insertion&quot;&gt;了分号插入的三个规则&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b3216945e8685ea4af8a3c93dd0029a0b22151b1" translate="yes" xml:space="preserve">
          <source>The ECMAScript specification mentions&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-rules-of-automatic-semicolon-insertion&quot;&gt; three rules of semicolon insertion&lt;/a&gt;.</source>
          <target state="translated">ECMAScript规范提到&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-rules-of-automatic-semicolon-insertion&quot;&gt;了分号插入的三个规则&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8208825fde42cabcd8bbb76cd476940ce51a4654" translate="yes" xml:space="preserve">
          <source>The ECMAScript specification states: If the String does not conform to the standard format the function may fall back to any implementation&amp;ndash;specific heuristics or implementation&amp;ndash;specific parsing algorithm. Unrecognizable strings or dates containing illegal element values in ISO formatted strings shall cause &lt;code&gt;Date.parse()&lt;/code&gt; to return &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ECMAScript规范指出：如果String不符合标准格式，则该函数可能会退回到任何特定于实现的启发式或特定于实现的解析算法。ISO格式的字符串中无法识别的字符串或包含非法元素值的日期将导致 &lt;code&gt;Date.parse()&lt;/code&gt; 返回&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="21b41da293c735b80d7d1ce381809c1e39621095" translate="yes" xml:space="preserve">
          <source>The Intl.Locale Polyfill</source>
          <target state="translated">外贸部Polyfill</target>
        </trans-unit>
        <trans-unit id="6b233be2c7e1b4878fc214af2673200e43bf469e" translate="yes" xml:space="preserve">
          <source>The Intl.RelativeTimeFormat API</source>
          <target state="translated">国际相对时间格式API</target>
        </trans-unit>
        <trans-unit id="5ab764a8c99b12a3a98198c6866656e7cedcca17" translate="yes" xml:space="preserve">
          <source>The Iterator protocol</source>
          <target state="translated">迭代器协议</target>
        </trans-unit>
        <trans-unit id="ebe959a9416798fdd89d0c99dc80ab2421f8037e" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;-only exception &quot;0-prefixed octal literals and octal escape sequences are deprecated; for octal literals use the &quot;0o&quot; prefix instead&quot; occurs when deprecated octal literals and octal escape sequences are used.</source>
          <target state="translated">仅在JavaScript&lt;a href=&quot;../strict_mode&quot;&gt;严格模式下&lt;/a&gt;例外：&amp;ldquo;不建议使用0前缀的八进制文字和八进制转义序列；对于八进制文字，请使用&amp;ldquo; 0o&amp;rdquo;前缀来代替&amp;rdquo;，这是在使用了不建议使用的八进制文字和八进制转义序列时发生的。</target>
        </trans-unit>
        <trans-unit id="26726ad4122323705eeb44d5f930918ba56d242d" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;-only exception &quot;Assignment to undeclated variable&quot; occurs when the value has been assigned to an undeclared variable.</source>
          <target state="translated">将值分配给未声明的变量时，将发生JavaScript&lt;a href=&quot;../strict_mode&quot;&gt;严格模式的&lt;/a&gt;仅异常&amp;ldquo;分配给未确定的变量&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="27f3f3fec0af80d5357c6144f68fea00a8e0b23b" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;-only exception &quot;applying the 'delete' operator to an unqualified name is deprecated&quot; occurs when variables are attempted to be deleted using the &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; operator.</source>
          <target state="translated">当尝试使用 &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; 运算符删除变量时，将发生JavaScript&lt;a href=&quot;../strict_mode&quot;&gt;严格模式-&lt;/a&gt;仅异常&amp;ldquo;不建议将'delete'运算符应用于不合格名称&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="0f551f235bc7ae19ad07d34b50aeede46fc22f9b" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;-only exception &quot;deprecated caller or arguments usage&quot; occurs when the deprecated &lt;a href=&quot;../global_objects/function/caller&quot;&gt;&lt;code&gt;Function.caller&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/function/arguments&quot;&gt;&lt;code&gt;Function.arguments&lt;/code&gt;&lt;/a&gt; properties are used.</source>
          <target state="translated">当使用不推荐使用的&lt;a href=&quot;../global_objects/function/caller&quot;&gt; &lt;code&gt;Function.caller&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../global_objects/function/arguments&quot;&gt; &lt;code&gt;Function.arguments&lt;/code&gt; &lt;/a&gt;属性时，将发生JavaScript&lt;a href=&quot;../strict_mode&quot;&gt;严格模式-&lt;/a&gt;仅异常&amp;ldquo;不推荐使用的调用者或参数用法&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="55463b29bb63622e2ad88ec19935747509ea7bc7" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;-only exception &quot;for-in loop head declarations may not have initializers&quot; occurs when the head of a&lt;a href=&quot;../statements/for...in&quot;&gt; for...in&lt;/a&gt; contains an initializer expression, such as |&lt;code&gt;for (var i = 0 in obj)&lt;/code&gt;|. This is not allowed in for-of loops in strict mode.</source>
          <target state="translated">当&lt;a href=&quot;../statements/for...in&quot;&gt;for ... in&lt;/a&gt;的头包含初始化器表达式，例如|时，会发生JavaScript&lt;a href=&quot;../strict_mode&quot;&gt;严格模式-&lt;/a&gt;仅异常&amp;ldquo; for-in循环头声明可能没有初始化程序&amp;rdquo; 。 &lt;code&gt;for (var i = 0 in obj)&lt;/code&gt; |。在严格模式下的for-of循环中不允许这样做。</target>
        </trans-unit>
        <trans-unit id="5e7414368c8d17c3ff4b3c671da5b408e939ad11" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;-only exception &quot;is read-only&quot; occurs when a global variable or object property that was assigned to is a read-only property.</source>
          <target state="translated">当分配给其的全局变量或对象属性是只读属性时，将发生JavaScript&lt;a href=&quot;../strict_mode&quot;&gt;严格模式&lt;/a&gt;-only异常&amp;ldquo;为只读&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="b04cf6b93cb6724ace3e8ad55af086177f9674b0" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;-only exception &quot;setting getter-only property&quot; occurs when there is an attempt to set a new value to a property for which only a &lt;a href=&quot;../functions/get&quot;&gt;getter&lt;/a&gt; is specified.</source>
          <target state="translated">JavaScript的&lt;a href=&quot;../strict_mode&quot;&gt;严格模式&lt;/a&gt;时，有一个尝试设置一个新的价值，为其中只有一个属性-仅例外&amp;ldquo;设置仅消气财产&amp;rdquo;时&lt;a href=&quot;../functions/get&quot;&gt;吸气&lt;/a&gt;指定。</target>
        </trans-unit>
        <trans-unit id="d3d2b0817c5a59c146bb6d497e351a4c2b6bcb73" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;-only exception &quot;variable redeclares argument&quot; occurs when the same variable name occurs as a function parameter and is then redeclared using a &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; assignment in a function body again.</source>
          <target state="translated">当使用相同的变量名称作为函数参数，然后使用函数主体中的 &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; 赋值再次声明时，会出现JavaScript&lt;a href=&quot;../strict_mode&quot;&gt;严格模式的&lt;/a&gt;仅异常&amp;ldquo;变量重新声明参数&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="a9ff54c271b03aa5af52e6d11889bb6b4fd4205d" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Array&lt;/code&gt; class is a global object that is used in the construction of arrays; which are high-level, list-like objects.</source>
          <target state="translated">JavaScript &lt;code&gt;Array&lt;/code&gt; 类是一个全局对象，用于构造数组。它们是高级的，类似于列表的对象。</target>
        </trans-unit>
        <trans-unit id="6becbd4e850d3a8a0a7babdb926cca557de3dc9c" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Array&lt;/code&gt; object is a global object that is used in the construction of arrays; which are high-level, list-like objects.</source>
          <target state="translated">JavaScript &lt;code&gt;Array&lt;/code&gt; 对象是用于构造数组的全局对象。是高级的，类似列表的对象。</target>
        </trans-unit>
        <trans-unit id="d93195924299629cef4916635b4b1e0990c4dbde" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Date&lt;/code&gt; object provides uniform behavior across platforms. The time value can be passed between systems to create a date that represents the same moment in time.</source>
          <target state="translated">JavaScript &lt;code&gt;Date&lt;/code&gt; 对象提供了跨平台的统一行为。可以在系统之间传递时间值，以创建代表同一时刻的日期。</target>
        </trans-unit>
        <trans-unit id="bafdbb63aeaa1f07ea2da5fed805a6b7854d004c" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Date&lt;/code&gt; object supports a number of UTC (universal) methods, as well as local time methods. UTC, also known as Greenwich Mean Time (GMT), refers to the time as set by the World Time Standard. The local time is the time known to the computer where JavaScript is executed.</source>
          <target state="translated">JavaScript &lt;code&gt;Date&lt;/code&gt; 对象支持许多UTC（通用）方法以及本地时间方法。UTC，也称为格林威治标准时间（GMT），是指世界时间标准设置的时间。本地时间是执行JavaScript的计算机所知道的时间。</target>
        </trans-unit>
        <trans-unit id="ade1d2edfa85326eb7f0bf4e7c00052cb259a7aa" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Math.log()&lt;/code&gt; function is equivalent to &lt;em&gt;ln(x)&lt;/em&gt; in mathematics.</source>
          <target state="translated">JavaScript &lt;code&gt;Math.log()&lt;/code&gt; 函数在数学上等效于&lt;em&gt;ln（x）&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="156d00682b0b8947f00a38049180c99849ecf542" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Math.log()&lt;/code&gt;function is equivalent to &lt;em&gt;ln(x)&lt;/em&gt; in mathematics.</source>
          <target state="translated">JavaScript &lt;code&gt;Math.log()&lt;/code&gt; 函数在数学上等效于&lt;em&gt;ln（x）&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="dde583114572ab3af5b6024979e219b534fa142d" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;delete&lt;/code&gt; removes a property from an object; if no more references to the same property are held, it is eventually released automatically.</source>
          <target state="translated">JavaScript &lt;code&gt;delete&lt;/code&gt; 会从对象中删除属性；如果不再保存对同一属性的引用，则最终将自动释放该引用。</target>
        </trans-unit>
        <trans-unit id="6ec138dd8b75217f1ba65c78e76baf0df10c599a" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;strong&gt;Number&lt;/strong&gt; type is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Floating-point_arithmetic&quot;&gt;double-precision 64-bit binary format IEEE 754&lt;/a&gt; value, like &lt;code&gt;double&lt;/code&gt; in Java or C#. This means it can represent fractional values, but there are some limits to what it can store. A Number only keeps about 17 decimal places of precision; arithmetic is subject to &lt;a href=&quot;https://en.wikipedia.org/wiki/Floating-point_arithmetic#Representable_numbers,_conversion_and_rounding&quot;&gt;rounding&lt;/a&gt;. The largest value a Number can hold is about 1.8&amp;times;10&lt;sup&gt;308&lt;/sup&gt;. Numbers beyond that are replaced with the special Number constant &lt;a href=&quot;infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">JavaScript &lt;strong&gt;Number&lt;/strong&gt;类型是&lt;a href=&quot;https://en.wikipedia.org/wiki/Floating-point_arithmetic&quot;&gt;双精度64位二进制格式IEEE 754&lt;/a&gt;值，例如Java或C＃中的 &lt;code&gt;double&lt;/code&gt; 。这意味着它可以表示分数值，但是对其可以存储的内容有一些限制。数字仅保留约17个小数位精度；算术&lt;a href=&quot;https://en.wikipedia.org/wiki/Floating-point_arithmetic#Representable_numbers,_conversion_and_rounding&quot;&gt;取整&lt;/a&gt;。Number可以容纳的最大值约为1.8&amp;times;10 &lt;sup&gt;308&lt;/sup&gt;。超出的数字将替换为特殊的Number常量&lt;a href=&quot;infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="feacf6d164087c84342adcbacb255f2b0ba72579" translate="yes" xml:space="preserve">
          <source>The JavaScript date is based on a time value that is milliseconds since midnight January 1, 1970, UTC. A day holds 86,400,000 milliseconds. The JavaScript &lt;code&gt;Date&lt;/code&gt; object range is -100,000,000 days to 100,000,000 days relative to January 1, 1970 UTC.</source>
          <target state="translated">JavaScript日期基于UTC自1970年1月1日午夜以来的毫秒数的时间值。一天可容纳86,400,000毫秒。相对于1970年1月1日UTC，JavaScript &lt;code&gt;Date&lt;/code&gt; 对象的范围是-100,000,000天到100,000,000天。</target>
        </trans-unit>
        <trans-unit id="b9de9c5fa9fea058719adf889a9d0bba2b33c317" translate="yes" xml:space="preserve">
          <source>The JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Venkman&quot;&gt;Venkman&lt;/a&gt;.</source>
          <target state="translated">JavaScript调试器具有与该方法提供的功能相似的功能，以及其他调试选项。有关调试器的信息，请参见&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Venkman&quot;&gt;Venkman&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="649d4375faf5a3655990f44df34ac81ef90c4499" translate="yes" xml:space="preserve">
          <source>The JavaScript engine may hold references to things which look like they are unreachable (e.g., in closures, or inline caches).</source>
          <target state="translated">JavaScript引擎可能会持有一些看起来无法到达的东西的引用(例如,在闭包中,或者内联缓存中)。</target>
        </trans-unit>
        <trans-unit id="a7c7adbe730ba9c8a0ebae30a77f45bdddbbb05b" translate="yes" xml:space="preserve">
          <source>The JavaScript error &quot;unterminated string literal&quot; occurs when there is an unterminated &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; somewhere. String literals must be enclosed by single (&lt;code&gt;'&lt;/code&gt;) or double (&lt;code&gt;&quot;&lt;/code&gt;) quotes.</source>
          <target state="translated">当有未终止的JavaScript错误&amp;ldquo;未结束的字符串&amp;rdquo;出现&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;的地方。字符串文字必须用单引号（ &lt;code&gt;'&lt;/code&gt; ）或双引号（ &lt;code&gt;&quot;&lt;/code&gt; ）引起来。</target>
        </trans-unit>
        <trans-unit id="e17f37cc4b690a7cdac7f877511ba78ff6ca05f0" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;&lt;code&gt;'use strict'&lt;/code&gt; not allowed in function&quot; occurs when a &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; directive is used at the top of a function with &lt;a href=&quot;../functions/default_parameters&quot;&gt;default parameters&lt;/a&gt;, &lt;a href=&quot;../functions/rest_parameters&quot;&gt;rest parameters&lt;/a&gt;, or &lt;a href=&quot;../operators/destructuring_assignment&quot;&gt;destructuring parameters&lt;/a&gt;.</source>
          <target state="translated">JavaScript的例外&amp;ldquo; &lt;code&gt;'use strict'&lt;/code&gt; 当不得在功能&amp;rdquo;出现 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 指令在同一个函数的顶部使用&lt;a href=&quot;../functions/default_parameters&quot;&gt;默认参数&lt;/a&gt;，&lt;a href=&quot;../functions/rest_parameters&quot;&gt;其余参数&lt;/a&gt;，或&lt;a href=&quot;../operators/destructuring_assignment&quot;&gt;解构参数&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bef9f5d9116bcd850471393b2b35350a12e66246" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;&lt;em&gt;variable&lt;/em&gt; is a reserved identifier&quot; occurs when &lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;reserved keywords&lt;/a&gt; are used as identifiers.</source>
          <target state="translated">当使用&lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;保留关键字&lt;/a&gt;作为标识符时，会发生JavaScript异常&amp;ldquo;&lt;em&gt;变量&lt;/em&gt;是保留标识符&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="32728f40783b2f37366bb0963cdfa0c352658b1e" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;&lt;em&gt;variable&lt;/em&gt; is not defined&quot; occurs when there is a non-existent variable referenced somewhere.</source>
          <target state="translated">当某个地方引用了一个不存在的变量时，就会发生JavaScript异常&amp;ldquo;未定义&lt;em&gt;变量&lt;/em&gt;&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="70235774e28798618e37299c80a3cee7dc92001e" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;&lt;em&gt;x&lt;/em&gt; is (not) &lt;em&gt;y&lt;/em&gt;&quot; occurs when there was an unexpected type. Oftentimes, unexpected &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; values.</source>
          <target state="translated">当存在意外类型时，会发生JavaScript异常&amp;ldquo; &lt;em&gt;x&lt;/em&gt; is（not）&lt;em&gt;y&lt;/em&gt; &amp;rdquo;。通常，意外的&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;值。</target>
        </trans-unit>
        <trans-unit id="da7589f5657100f70ebea49b1973f97e210bf028" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;Invalid array length&quot; occurs when creating an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;../global_objects/arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; which has a length which is either negative or larger or equal to 2&lt;sup&gt;32&lt;/sup&gt;, or when setting the &lt;a href=&quot;../global_objects/array/length&quot;&gt;&lt;code&gt;Array.length&lt;/code&gt;&lt;/a&gt; property to a value which is either negative or larger or equal to 2&lt;sup&gt;32&lt;/sup&gt;.</source>
          <target state="translated">JavaScript异常&amp;ldquo;无效的数组长度&amp;rdquo;在创建长度为2或大于等于2 &lt;sup&gt;32&lt;/sup&gt;的&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../global_objects/arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;时，或者将&lt;a href=&quot;../global_objects/array/length&quot;&gt; &lt;code&gt;Array.length&lt;/code&gt; &lt;/a&gt;属性设置为大于等于2的值时发生。等于2 &lt;sup&gt;32&lt;/sup&gt;。&lt;sup&gt;&lt;/sup&gt;&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="4dd825f13a4d3ba2302325f1336e448e25ea70b4" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;Invalid code point&quot; occurs when &lt;a href=&quot;../global_objects/nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111) are used with &lt;a href=&quot;../global_objects/string/fromcodepoint&quot;&gt;&lt;code&gt;String.fromCodePoint()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当&lt;a href=&quot;../global_objects/nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;值，负整数（-1），非整数（5.4）或大于0x10FFFF（1114111）的值与&lt;a href=&quot;../global_objects/string/fromcodepoint&quot;&gt; &lt;code&gt;String.fromCodePoint()&lt;/code&gt; &lt;/a&gt;一起使用时，会发生JavaScript异常&amp;ldquo;无效的代码点&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="3b95d187b0889399979097e9eb1963caa4a63ad7" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;Permission denied to access property&quot; occurs when there was an attempt to access an object for which you have no permission.</source>
          <target state="translated">当试图访问一个你没有权限的对象时,会发生JavaScript异常 &quot;Permission denied to access property&quot;。</target>
        </trans-unit>
        <trans-unit id="b2ffb522328b9a7ffd7971e13adee7ff15b2f0eb" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;a declaration in the head of a for-of loop can't have an initializer&quot; occurs when the head of a&lt;a href=&quot;../statements/for...of&quot;&gt; for...of&lt;/a&gt; loop contains an initializer expression such as |&lt;code&gt;for (var i = 0 of iterable)&lt;/code&gt;|. This is not allowed in for-of loops.</source>
          <target state="translated">当&lt;a href=&quot;../statements/for...of&quot;&gt;for ... of&lt;/a&gt;循环的开头包含诸如|的初始化表达式时，会发生JavaScript异常&amp;ldquo; for-of循环的开头中的声明不能具有初始化程序&amp;rdquo; 。 &lt;code&gt;for (var i = 0 of iterable)&lt;/code&gt; |。在for-of循环中不允许这样做。</target>
        </trans-unit>
        <trans-unit id="cdbd012646c0864d055f4d98b503a699d5fdf363" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;called on incompatible target (or object)&quot; occurs when a function (on a given object), is called with a &lt;code&gt;this&lt;/code&gt; not corresponding to the type expected by the function.</source>
          <target state="translated">的JavaScript异常&amp;ldquo;称为上不相容目标（或对象）&amp;rdquo;，当一个函数（给定对象上），被称为具有发生 &lt;code&gt;this&lt;/code&gt; 不对应于由所述函数预期的类型。</target>
        </trans-unit>
        <trans-unit id="edd5f5b074cf882e59bc0c0f627a5eebc13509c5" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;can't access dead object&quot; occurs when Firefox disallows add-ons to keep strong references to DOM objects after their parent document has been destroyed to improve in memory usage and to prevent memory leaks.</source>
          <target state="translated">当Firefox不允许加载项在其父文档被销毁后保留对DOM对象的强引用时,就会出现 &quot;无法访问死对象 &quot;的JavaScript异常,以提高内存使用率,防止内存泄漏。</target>
        </trans-unit>
        <trans-unit id="7dacf41bdac32870a2b6cd57b99df467b863e82c" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;can't access lexical declaration `&lt;em&gt;variable&lt;/em&gt;' before initialization&quot; occurs when a lexical variable was accessed before it was initialized. This happens within any block statement, when &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../statements/const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; declarations are accessed before they are defined.</source>
          <target state="translated">JavaScript异常&amp;ldquo;初始化前无法访问词法声明'&lt;em&gt;变量&lt;/em&gt;'&amp;rdquo;在词法变量被初始化之前被访问时发生。当在定义它们之前访问 &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../statements/const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; 声明时，这会在任何块语句中发生。</target>
        </trans-unit>
        <trans-unit id="2ac43f0c6b513d55950d4e079a7b27f1d7a5bcb2" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;can't access property&quot; occurs when property access was operated on &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; values.</source>
          <target state="translated">当对&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;值进行属性访问时，会发生JavaScript异常&amp;ldquo;无法访问属性&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="ff67e114d13cd0d3b7e8d36fdb3768108335c2b3" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;can't define property &quot;x&quot;: &quot;obj&quot; is not extensible&quot; occurs when &lt;a href=&quot;../global_objects/object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt; marked an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible.</source>
          <target state="translated">当&lt;a href=&quot;../global_objects/object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt;将某个对象标记为不再可扩展时，将发生JavaScript异常&amp;ldquo;无法定义属性&amp;rdquo; x&amp;rdquo;：&amp;ldquo; obj&amp;rdquo;不可扩展&amp;rdquo; ，因此该对象将永远不会具有当时的属性。它被标记为不可扩展。</target>
        </trans-unit>
        <trans-unit id="2a41d9150654f60fa152822bf1abbe4f83071c79" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;can't delete non-configurable array element&quot; occurs when it was attempted to &lt;a href=&quot;../global_objects/array/length#Shortening_an_array&quot;&gt;shorten the length&lt;/a&gt; of an array, but one of the array's elements is &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;.</source>
          <target state="translated">JavaScript异常&amp;ldquo;无法删除不可配置的数组元素&amp;rdquo;在尝试&lt;a href=&quot;../global_objects/array/length#Shortening_an_array&quot;&gt;缩短&lt;/a&gt;数组的长度时发生，但该数组的元素之一是&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;不可配置的&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="25dd44d37ab5b69a8615dd787f3e9a6f84609ab5" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;can't redefine non-configurable property&quot; occurs when it was attempted to redefine a property, but that property is &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;.</source>
          <target state="translated">尝试重新定义属性时，发生JavaScript异常&amp;ldquo;无法重新定义不可配置的属性&amp;rdquo;，但是该属性是&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;不可配置的&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a741d3e300fd7faae8de6be7a13ff373286fe716" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;cyclic object value&quot; occurs when object references were found in &lt;a href=&quot;https://www.json.org/&quot;&gt;JSON&lt;/a&gt;. &lt;a href=&quot;../global_objects/json/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt; doesn't try to solve them and fails accordingly.</source>
          <target state="translated">当在&lt;a href=&quot;https://www.json.org/&quot;&gt;JSON&lt;/a&gt;中找到对象引用时，就会发生JavaScript异常&amp;ldquo;循环对象值&amp;rdquo; 。&lt;a href=&quot;../global_objects/json/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; &lt;/a&gt;不会尝试解决它们，因此会失败。</target>
        </trans-unit>
        <trans-unit id="c136f3367a83dcd4b71f702b583ad87b004c505d" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;function statement requires a name&quot; occurs when there is a &lt;a href=&quot;../statements/function&quot;&gt;function statement&lt;/a&gt; in the code that requires a name.</source>
          <target state="translated">当代码中存在需要名称的&lt;a href=&quot;../statements/function&quot;&gt;功能语句&lt;/a&gt;时，会发生JavaScript异常&amp;ldquo;功能语句需要名称&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="8e412c215138dd7ad9e137e57e13570822d28dbb" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;identifier starts immediately after numeric literal&quot; occurs when an identifier started with a digit. Identifiers can only start with a letter, underscore (_), or dollar sign ($).</source>
          <target state="translated">当一个标识符以数字开头时,会出现JavaScript异常 &quot;标识符紧接着数字文字开始&quot;。标识符只能以字母、下划线(_)或美元符号($)开头。</target>
        </trans-unit>
        <trans-unit id="79a7cb4435592c84c592854ec0bea2d8a1565f3e" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;illegal character&quot; occurs when there is an invalid or unexpected token that doesn't belong at this position in the code.</source>
          <target state="translated">当有一个无效或意外的标记不属于代码中的这个位置时,就会出现JavaScript异常 &quot;非法字符&quot;。</target>
        </trans-unit>
        <trans-unit id="37a90d17cedd656430cb66873bb90e667a26dfd8" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;invalid 'instanceof' operand&quot; occurs when the right hand side operands of the &lt;a href=&quot;../operators/instanceof&quot;&gt;&lt;code&gt;instanceof&lt;/code&gt; operator&lt;/a&gt; isn't used with a constructor object, i.e. an object which has a &lt;code&gt;prototype&lt;/code&gt; property and is callable.</source>
          <target state="translated">当&lt;a href=&quot;../operators/instanceof&quot;&gt; &lt;code&gt;instanceof&lt;/code&gt; 运算符&lt;/a&gt;的右侧操作数未与构造函数对象（即具有 &lt;code&gt;prototype&lt;/code&gt; 属性且可调用的对象）一起使用时，会发生JavaScript异常&amp;ldquo;无效的'instanceof'操作数&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="bbcb9ad396fe6bd40a8df5dd927688374453a3ba" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;invalid Array.prototype.sort argument&quot; occurs when the argument of &lt;a href=&quot;../global_objects/array/sort&quot;&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/a&gt; isn't either &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; or a function which compares its operands.</source>
          <target state="translated">当&lt;a href=&quot;../global_objects/array/sort&quot;&gt; &lt;code&gt;Array.prototype.sort()&lt;/code&gt; &lt;/a&gt;的参数不是&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;或比较其操作数的函数时，就会发生JavaScript异常&amp;ldquo;无效的Array.prototype.sort参数&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="87e2b89a62286e9bae74fe5753d6e89c1584d161" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;invalid arguments&quot; occurs when &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; constructors are provided with a wrong argument.</source>
          <target state="translated">当为&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;类型化数组&lt;/a&gt;构造函数提供了错误的参数时，就会发生JavaScript异常&amp;ldquo;无效的参数&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="5e75dbd0c2d13cb82bc954b718bedf77a0c5c285" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;invalid assignment left-hand side&quot; occurs when there was an unexpected assignment somewhere. For example, a single &quot;&lt;code&gt;=&lt;/code&gt;&quot; sign was used instead of &quot;&lt;code&gt;==&lt;/code&gt;&quot; or &quot;&lt;code&gt;===&lt;/code&gt;&quot;.</source>
          <target state="translated">当某处发生意外分配时，会发生JavaScript异常&amp;ldquo;无效分配左侧&amp;rdquo;。例如，使用单个&amp;ldquo; &lt;code&gt;=&lt;/code&gt; &amp;rdquo;符号代替&amp;ldquo; &lt;code&gt;==&lt;/code&gt; &amp;rdquo;或&amp;ldquo; &lt;code&gt;===&lt;/code&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="f3343a525d0f093042fd21cf468588420ba8c9ec" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;invalid assignment to const&quot; occurs when it was attempted to alter a constant value. JavaScript &lt;code&gt;&lt;a href=&quot;../statements/const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; declarations can't be re-assigned or redeclared.</source>
          <target state="translated">尝试更改常量值时，会发生JavaScript异常&amp;ldquo;对const的无效分配&amp;rdquo;。无法重新分配或重新声明JavaScript &lt;code&gt;&lt;a href=&quot;../statements/const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; 声明。</target>
        </trans-unit>
        <trans-unit id="b7fcde2c69cfd32d5bfd6092809d415c4d45f04c" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;invalid date&quot; occurs when a string leading to an invalid date has been provided to &lt;a href=&quot;../global_objects/date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/date/parse&quot;&gt;&lt;code&gt;Date.parse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当向&lt;a href=&quot;../global_objects/date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../global_objects/date/parse&quot;&gt; &lt;code&gt;Date.parse()&lt;/code&gt; &lt;/a&gt;提供了导致无效日期的字符串时，就会发生JavaScript异常&amp;ldquo;无效日期&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="0da0dea69158b7c792941ba03637f040aad66d0e" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;invalid regular expression flag&quot; occurs when the flags, defined after the second slash in regular expression literal, are not one of &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;u&lt;/code&gt;, or &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">当在正则表达式文字中的第二个斜杠之后定义的标志不是 &lt;code&gt;g&lt;/code&gt; ， &lt;code&gt;i&lt;/code&gt; ， &lt;code&gt;m&lt;/code&gt; ， &lt;code&gt;s&lt;/code&gt; ， &lt;code&gt;u&lt;/code&gt; 或 &lt;code&gt;y&lt;/code&gt; 之一时，就会发生JavaScript异常&amp;ldquo;无效的正则表达式标志&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="a5bb020260c8bc166dd013bb81ac3b38a154ca77" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;is not a constructor&quot; occurs when there was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor.</source>
          <target state="translated">当试图将一个对象或变量作为构造函数使用,但该对象或变量不是构造函数时,就会发生JavaScript异常 &quot;不是构造函数&quot;。</target>
        </trans-unit>
        <trans-unit id="0ecf8ff7532758548c77ccd9a104f1b539b5901c" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;is not a function&quot; occurs when there was an attempt to call a value from a function, but the value is not actually a function.</source>
          <target state="translated">当试图从函数中调用一个值,但该值实际上并不是一个函数时,就会出现JavaScript异常 &quot;不是函数&quot;。</target>
        </trans-unit>
        <trans-unit id="845a331aa746bd9bfb455133fb16ad92f3082e3f" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;is not a non-null object&quot; occurs when an object is expected somewhere and wasn't provided. &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; is not an object and won't work.</source>
          <target state="translated">当在某个地方需要某个对象并且未提供该对象时，就会发生JavaScript异常&amp;ldquo;不是非空对象&amp;rdquo;。&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;不是对象，将无法工作。</target>
        </trans-unit>
        <trans-unit id="e55fa680b04da3c25a38df72209d2fdcbd84e3c3" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;is not iterable&quot; occurs when the value which is given as the right hand-side of &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip;of &lt;/a&gt;or as argument of a function such as &lt;a href=&quot;../global_objects/promise/all&quot;&gt;&lt;code&gt;Promise.all&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/typedarray/from&quot;&gt;&lt;code&gt;TypedArray.from&lt;/code&gt;&lt;/a&gt;, is not an &lt;a href=&quot;../iteration_protocols&quot;&gt;iterable object&lt;/a&gt;.</source>
          <target state="translated">的JavaScript异常&amp;ldquo;不是可迭代&amp;rdquo;时发生，其被给定为的右手侧的值&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;用于...的&lt;/a&gt;或作为诸如函数的参数&lt;a href=&quot;../global_objects/promise/all&quot;&gt; &lt;code&gt;Promise.all&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../global_objects/typedarray/from&quot;&gt; &lt;code&gt;TypedArray.from&lt;/code&gt; &lt;/a&gt;，不是&lt;a href=&quot;../iteration_protocols&quot;&gt;迭代的对象&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="050aa114f5c51494cb128c847136ca3043d3b771" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;malformed URI sequence&quot; occurs when URI encoding or decoding wasn't successful.</source>
          <target state="translated">当URI编码或解码不成功时,会发生JavaScript异常 &quot;畸形的URI序列&quot;。</target>
        </trans-unit>
        <trans-unit id="516ff155ee786a73c9ed98789185fe4008febb50" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;malformed formal parameter&quot; occurs when the argument list of a &lt;code&gt;&lt;a href=&quot;../global_objects/function&quot;&gt;Function()&lt;/a&gt;&lt;/code&gt; constructor call is invalid somehow.</source>
          <target state="translated">当 &lt;code&gt;&lt;a href=&quot;../global_objects/function&quot;&gt;Function()&lt;/a&gt;&lt;/code&gt; 构造函数调用的参数列表由于某种原因无效时，会发生JavaScript异常&amp;ldquo;格式错误的形式参数&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="a8e67edc5f0d04f6740d467533c00639355a1dbc" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;missing ) after argument list&quot; occurs when there is an error with how a function is called. This might be a typo, a missing operator, or an unescaped string.</source>
          <target state="translated">当函数的调用方式出现错误时,就会出现JavaScript异常 &quot;参数列表后缺少)&quot;。这可能是一个错别字,一个缺失的操作符,或者是一个未封装的字符串。</target>
        </trans-unit>
        <trans-unit id="bf54031100022dd38b887e6b1c59a82658843738" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;missing ) after condition&quot; occurs when there is an error with how an &lt;code&gt;&lt;a href=&quot;../statements/if...else&quot;&gt;if&lt;/a&gt;&lt;/code&gt; condition is written. It must appear in parenthesis after the &lt;code&gt;if&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../statements/if...else&quot;&gt;if&lt;/a&gt;&lt;/code&gt; 条件的编写方式出现错误，则会发生JavaScript异常&amp;ldquo;在条件之后缺少&amp;rdquo; 。它必须出现在 &lt;code&gt;if&lt;/code&gt; 关键字后面的括号中。</target>
        </trans-unit>
        <trans-unit id="eae6eb006306c2b71ce9f7c34ede4486d34f4b50" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;missing : after property id&quot; occurs when objects are created using the &lt;a href=&quot;../operators/object_initializer&quot;&gt;object initializer&lt;/a&gt; syntax. A colon (&lt;code&gt;:&lt;/code&gt;) separates keys and values for the object's properties. Somehow, this colon is missing or misplaced.</source>
          <target state="translated">使用&lt;a href=&quot;../operators/object_initializer&quot;&gt;对象初始化程序&lt;/a&gt;语法创建对象时，会发生JavaScript异常&amp;ldquo;缺少：属性ID之后&amp;rdquo; 。冒号（ &lt;code&gt;:&lt;/code&gt; ）分隔为对象的属性的键和值。不知何故，此结肠丢失或放错了位置。</target>
        </trans-unit>
        <trans-unit id="ffd892dbfa95827dedee1fc0544508a42c898002" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;missing ; before statement&quot; occurs when there is a semicolon (&lt;code&gt;;&lt;/code&gt;) missing somewhere and can't be added by &lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;automatic semicolon insertion (ASI)&lt;/a&gt;. You need to provide a semicolon, so that JavaScript can parse the source code correctly.</source>
          <target state="translated">当在某处缺少分号（ &lt;code&gt;;&lt;/code&gt; ）并且无法通过&lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;自动分号插入（ASI）&lt;/a&gt;进行添加时，会发生JavaScript异常&amp;ldquo; missing; before statement&amp;rdquo; 。您需要提供一个分号，以便JavaScript可以正确解析源代码。</target>
        </trans-unit>
        <trans-unit id="b175c52c509e230ebc890a339172f86d8e7669b5" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;missing = in const declaration&quot; occurs when a const declaration was not given a value in the same statement (like &lt;code&gt;const RED_FLAG;&lt;/code&gt;). You need to provide one (&lt;code&gt;const RED_FLAG = '#ff0'&lt;/code&gt;).</source>
          <target state="translated">当在同一条语句（例如 &lt;code&gt;const RED_FLAG;&lt;/code&gt; ）中未为const声明赋值时，就会发生JavaScript异常&amp;ldquo;在const声明中缺少=&amp;rdquo; 。您需要提供一个（ &lt;code&gt;const RED_FLAG = '#ff0'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="a1044299bd7facf05649aa1c5710b55b1474e565" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;missing ] after element list&quot; occurs when there is an error with the array initializer syntax somewhere. Likely there is a closing bracket (&quot;&lt;code&gt;]&lt;/code&gt;&quot;) or a comma (&quot;&lt;code&gt;,&lt;/code&gt;&quot;) missing.</source>
          <target state="translated">当某处的数组初始化器语法错误时，会发生JavaScript异常&amp;ldquo;元素列表后缺少]&amp;rdquo;。可能缺少右括号（&amp;ldquo; &lt;code&gt;]&lt;/code&gt; &amp;rdquo;）或逗号（&amp;ldquo; &lt;code&gt;,&lt;/code&gt; &amp;rdquo;）。</target>
        </trans-unit>
        <trans-unit id="0e6165ab362a043b34a453304eb723216b03b8c1" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;missing formal parameter&quot; occurs when your function declaration is missing valid parameters.</source>
          <target state="translated">当你的函数声明缺少有效参数时,就会出现JavaScript异常 &quot;缺少形式参数&quot;。</target>
        </trans-unit>
        <trans-unit id="8d7bf5439ad8e009dafc9fc12c15be85cc1d4d15" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;missing name after . operator&quot; occurs when there is a problem with how the dot operator (&lt;code&gt;.&lt;/code&gt;) is used for &lt;a href=&quot;../operators/property_accessors&quot;&gt;property access&lt;/a&gt;.</source>
          <target state="translated">当使用点运算符（ &lt;code&gt;.&lt;/code&gt; ）进行&lt;a href=&quot;../operators/property_accessors&quot;&gt;属性访问&lt;/a&gt;存在问题时，会发生JavaScript异常&amp;ldquo;。运算符后缺少名称&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="42050463eb07a2915dd80d342ed11a113352530b" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;missing variable name&quot; occurs way too often as naming things is so hard. Or maybe a comma is wrong. Check for typos!</source>
          <target state="translated">JavaScript异常 &quot;缺少变量名 &quot;的情况出现得太频繁了,因为给东西命名太难了。或者是一个逗号错了。检查是否有错别字</target>
        </trans-unit>
        <trans-unit id="28dd1498651f71215a65ca91bcbef89b45ec51a1" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;missing } after function body&quot; occurs when there is a syntax mistake when creating a function somewhere. Check if any closing curly brackets or parenthesis are in the correct order.</source>
          <target state="translated">当在某处创建函数时出现语法错误时,会出现JavaScript异常 &quot;函数体后缺少}&quot;。请检查大括号和小括号的顺序是否正确。</target>
        </trans-unit>
        <trans-unit id="8fbece9b4658b7c4ba949079e39ac5593a2ead99" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;missing } after property list&quot; occurs when there is a mistake in the &lt;a href=&quot;../operators/object_initializer&quot;&gt;object initializer&lt;/a&gt; syntax somewhere. Might be in fact a missing curly bracket, but could also be a missing comma.</source>
          <target state="translated">当某处的&lt;a href=&quot;../operators/object_initializer&quot;&gt;对象初始化程序&lt;/a&gt;语法错误时，将发生JavaScript异常&amp;ldquo;属性列表后缺少} 。实际上可能是缺少的花括号，但也可能是缺少的逗号。</target>
        </trans-unit>
        <trans-unit id="1b325ac47e7217e9cb494d1795daa67e508f5680" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;more arguments needed&quot; occurs when there is an error with how a function is called. More arguments need to be provided.</source>
          <target state="translated">当函数的调用方式出现错误时,就会出现JavaScript异常 &quot;需要更多参数&quot;。需要提供更多的参数。</target>
        </trans-unit>
        <trans-unit id="e029453a0e092b42cc8d17bf72aa6017cbe372ff" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;null (or undefined) has no properties&quot; occurs when you attempt to access properties of &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. They don't have any.</source>
          <target state="translated">当您尝试访问&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; 的&lt;/a&gt;属性时，会发生JavaScript异常&amp;ldquo; null（或undefined）没有属性&amp;rdquo; 。他们没有。</target>
        </trans-unit>
        <trans-unit id="563815a598e5c404550528fe600de9fb7fa6c4bc" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;precision is out of range&quot; occurs when a number that's outside of the range of 0 and 20 (or 21) was passed into &lt;code&gt;toFixed&lt;/code&gt; or &lt;code&gt;toPrecision&lt;/code&gt;.</source>
          <target state="translated">当将超出0和20（或21）范围的数字传递给 &lt;code&gt;toFixed&lt;/code&gt; 或 &lt;code&gt;toPrecision&lt;/code&gt; 时，会发生JavaScript异常&amp;ldquo;精度超出范围&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="1019002b6e15ddfadbd2a4cbf2612467990bb551" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;property is non-configurable and can't be deleted&quot; occurs when it was attempted to delete a property, but that property is &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;.</source>
          <target state="translated">尝试删除属性时，发生JavaScript异常&amp;ldquo;属性不可配置，无法删除&amp;rdquo;，但该属性是&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;不可配置的&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ac6f7b435c0559582574d548898f6fe8734b8477" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;radix must be an integer at least 2 and no greater than 36&quot; occurs when the optional &lt;code&gt;radix&lt;/code&gt; parameter of the &lt;a href=&quot;../global_objects/number/tostring&quot;&gt;&lt;code&gt;Number.prototype.toString()&lt;/code&gt;&lt;/a&gt; or the &lt;a href=&quot;../global_objects/bigint/tostring&quot;&gt;&lt;code&gt;BigInt.prototype.toString()&lt;/code&gt;&lt;/a&gt; method was specified and is not between 2 and 36.</source>
          <target state="translated">指定&lt;a href=&quot;../global_objects/number/tostring&quot;&gt; &lt;code&gt;Number.prototype.toString()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../global_objects/bigint/tostring&quot;&gt; &lt;code&gt;BigInt.prototype.toString()&lt;/code&gt; &lt;/a&gt;方法的可选 &lt;code&gt;radix&lt;/code&gt; 参数并且该值不介于2之间时，会发生JavaScript异常&amp;ldquo;基数必须为至少2且不大于36的整数&amp;rdquo;。和36。</target>
        </trans-unit>
        <trans-unit id="5afd13125c66c7568544cae442a04e1b8ddbd2e7" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;redeclaration of formal parameter&quot; occurs when the same variable name occurs as a function parameter and is then redeclared using a &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; assignment in a function body again.</source>
          <target state="translated">当相同的变量名称作为函数参数出现时，会发生JavaScript异常&amp;ldquo;形式参数的重新声明&amp;rdquo;，然后再次在函数体中使用 &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; 赋值对其进行重新声明。</target>
        </trans-unit>
        <trans-unit id="bfcbfedf7f457142e6b2a20fc3ddafa6bad28f30" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;reduce of empty array with no initial value&quot; occurs when a reduce function is used.</source>
          <target state="translated">使用reduce函数时,会发生JavaScript异常 &quot;reduce of empty array with no initial value&quot;。</target>
        </trans-unit>
        <trans-unit id="a82bb0e41358f8f30b5777d5e3653cfbe58092a4" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;repeat count must be less than infinity&quot; occurs when the &lt;a href=&quot;../global_objects/string/repeat&quot;&gt;&lt;code&gt;String.prototype.repeat()&lt;/code&gt;&lt;/a&gt; method is used with a &lt;code&gt;count&lt;/code&gt; argument that is infinity.</source>
          <target state="translated">当&lt;a href=&quot;../global_objects/string/repeat&quot;&gt; &lt;code&gt;String.prototype.repeat()&lt;/code&gt; &lt;/a&gt;方法与无穷大的 &lt;code&gt;count&lt;/code&gt; 参数一起使用时，会发生JavaScript异常&amp;ldquo;重复数必须小于无穷大&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="98d44221a35070d9d5d4c5411a7606285c0f1452" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;repeat count must be non-negative&quot; occurs when the &lt;a href=&quot;../global_objects/string/repeat&quot;&gt;&lt;code&gt;String.prototype.repeat()&lt;/code&gt;&lt;/a&gt; method is used with a &lt;code&gt;count&lt;/code&gt; argument that is a negative number.</source>
          <target state="translated">当&lt;a href=&quot;../global_objects/string/repeat&quot;&gt; &lt;code&gt;String.prototype.repeat()&lt;/code&gt; &lt;/a&gt;方法与为负数的 &lt;code&gt;count&lt;/code&gt; 参数一起使用时，会发生JavaScript异常&amp;ldquo;重复计数必须为非负数&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="1adae520003f8e5b2c5b66eacbe6f936e06ed474" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;return (or yield) not in function&quot; occurs when a &lt;code&gt;&lt;a href=&quot;../statements/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../operators/yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; statement is called outside of a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;function&lt;/a&gt;.</source>
          <target state="translated">JavaScript的异常&amp;ldquo;回报（或产量）没有功能&amp;rdquo;时发生 &lt;code&gt;&lt;a href=&quot;../statements/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../operators/yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; 的语句被称为之外&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;的功能&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="be313c71b38c47299dc9c2133757c39d8ba1d075" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;right-hand side of 'in' should be an object&quot; occurs when the &lt;a href=&quot;../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt; was used to search in strings, or in numbers, or other primitive types. It can only be used to check if a property is in an object.</source>
          <target state="translated">当使用&lt;a href=&quot;../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; 运算符&lt;/a&gt;来搜索字符串，数字，其他原始类型时，会发生JavaScript异常&amp;ldquo; in的右侧应该是一个对象&amp;rdquo; 。它只能用于检查属性是否在对象中。</target>
        </trans-unit>
        <trans-unit id="8ebee16f598e6e227ca591bfbe91ec1f57deaaa4" translate="yes" xml:space="preserve">
          <source>The JavaScript exception &quot;too much recursion&quot; or &quot;Maximum call stack size exceeded&quot; occurs when there are too many function calls, or a function is missing a base case.</source>
          <target state="translated">当函数调用太多,或者函数缺少基例时,就会出现JavaScript异常 &quot;递归太多 &quot;或 &quot;调用堆栈最大尺寸超标&quot;。</target>
        </trans-unit>
        <trans-unit id="17e2e617da81fa3b84084ddd00cba90355008b22" translate="yes" xml:space="preserve">
          <source>The JavaScript exceptions &quot;unexpected token&quot; occur when a specific language construct was expected, but something else was provided. This might be a simple typo.</source>
          <target state="translated">JavaScript异常 &quot;意外的标记 &quot;发生在预期的特定语言结构,但提供了其他东西的时候。这可能是一个简单的排版错误。</target>
        </trans-unit>
        <trans-unit id="8121692b1681cda7230fd3809bb4628ffc894cef" translate="yes" xml:space="preserve">
          <source>The JavaScript exceptions thrown by &lt;a href=&quot;../global_objects/json/parse&quot;&gt;&lt;code&gt;JSON.parse()&lt;/code&gt;&lt;/a&gt; occur when string failed to be parsed as JSON.</source>
          <target state="translated">当无法将字符串解析为JSON时，会发生&lt;a href=&quot;../global_objects/json/parse&quot;&gt; &lt;code&gt;JSON.parse()&lt;/code&gt; &lt;/a&gt;引发的JavaScript异常。</target>
        </trans-unit>
        <trans-unit id="0d28aae23ee954321752888e11c516cf9eed364d" translate="yes" xml:space="preserve">
          <source>The JavaScript language is intended to be used within some larger environment, be it a browser, server-side scripts, or similar. For the most part, this reference attempts to be environment-agnostic and does not target a web browser environment.</source>
          <target state="translated">JavaScript语言的目的是在一些更大的环境中使用,无论是浏览器、服务器端脚本,还是类似的环境。在大多数情况下,本参考资料试图做到与环境无关,不以网络浏览器环境为目标。</target>
        </trans-unit>
        <trans-unit id="69baf2e55fa7ceef3be5f6200851de4d7761bde2" translate="yes" xml:space="preserve">
          <source>The JavaScript reference serves as a repository of facts about the JavaScript language. The entire language is described here in detail. As you write JavaScript code, you'll refer to these pages often (thus the title &quot;JavaScript reference&quot;). If you're learning JavaScript, or need help understanding some of its capabilities or features, check out the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;JavaScript guide&lt;/a&gt;.</source>
          <target state="translated">JavaScript参考充当关于JavaScript语言的事实的资料库。此处详细描述了整个语言。在编写JavaScript代码时，您将经常引用这些页面（因此标题为&amp;ldquo; JavaScript参考&amp;rdquo;）。如果您正在学习JavaScript，或者需要帮助来了解其某些功能，请查看&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;JavaScript指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="928ddf3866dc4c8a9079b26684797d11237b2f6b" translate="yes" xml:space="preserve">
          <source>The JavaScript reference serves as a repository of facts about the JavaScript language. The entire language is described here in detail. As you write JavaScript code, you'll refer to these pages often (thus the title &quot;JavaScript reference&quot;). If you're learning JavaScript, or need help understanding some of its capabilities or features, check out the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;JavaScript guide&lt;/a&gt;.</source>
          <target state="translated">JavaScript参考充当关于JavaScript语言的事实的资料库。此处详细描述了整个语言。在编写JavaScript代码时，您经常会引用这些页面（因此标题为&amp;ldquo; JavaScript参考&amp;rdquo;）。如果您正在学习JavaScript，或者需要帮助来了解其某些功能，请查看&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;JavaScript指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6a86e6d83878d168254a926a549d462895c9fc19" translate="yes" xml:space="preserve">
          <source>The JavaScript strict mode exception &quot;can't assign to property&quot; occurs when attempting to create a property on &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/primitive&quot;&gt;primitive&lt;/a&gt; value such as a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/symbol&quot;&gt;symbol&lt;/a&gt;, a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/string&quot;&gt;string&lt;/a&gt;, a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/number&quot;&gt;number&lt;/a&gt; or a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/boolean&quot;&gt;boolean&lt;/a&gt;. &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;Primitive&lt;/a&gt; values cannot hold any &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/property/JavaScript&quot;&gt;property&lt;/a&gt;.</source>
          <target state="translated">尝试在&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/primitive&quot;&gt;原始&lt;/a&gt;值（例如，&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/symbol&quot;&gt;符号&lt;/a&gt;，&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/string&quot;&gt;字符串&lt;/a&gt;，&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/number&quot;&gt;数字&lt;/a&gt;或&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/boolean&quot;&gt;布尔&lt;/a&gt;值）上创建属性时，发生JavaScript严格模式异常&amp;ldquo;无法分配给属性&amp;rdquo; 。&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;原始&lt;/a&gt;值不能包含任何&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/property/JavaScript&quot;&gt;属性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="59a882c96ea02d77b1d2eecb7851ab92b654c6b1" translate="yes" xml:space="preserve">
          <source>The JavaScript warning &quot;-file- is being assigned a //# sourceMappingURL, but already has one.&quot; occurs when a source map has been specified more than once for a given JavaScript source.</source>
          <target state="translated">当给定的JavaScript源指定了不止一次的源映射时,会出现JavaScript警告&quot;-file-正在被分配一个//#sourceMappingURL,但已经有了一个。&quot;。</target>
        </trans-unit>
        <trans-unit id="29a2f0567bda30e61a12dcc9fd22c38a564b2513" translate="yes" xml:space="preserve">
          <source>The JavaScript warning &quot;08 (or 09) is not a legal ECMA-262 octal constant&quot; occurs when &lt;code&gt;08&lt;/code&gt; or &lt;code&gt;09&lt;/code&gt; number literals are used. They can't be interpreted as an octal number.</source>
          <target state="translated">使用 &lt;code&gt;08&lt;/code&gt; 或 &lt;code&gt;09&lt;/code&gt; 数字文字时，会发生JavaScript警告&amp;ldquo; 08（或09）不是合法的ECMA-262八进制常量&amp;rdquo; 。它们不能解释为八进制数。</target>
        </trans-unit>
        <trans-unit id="9ae1badad27ce8bd409f6af357a51a5fec110f6b" translate="yes" xml:space="preserve">
          <source>The JavaScript warning &quot;Date.prototype.toLocaleFormat is deprecated; consider using Intl.DateTimeFormat instead&quot; occurs when the non-standard &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat&quot;&gt;&lt;code&gt;Date.prototype.toLocaleFormat&lt;/code&gt;&lt;/a&gt; method is used.</source>
          <target state="translated">当使用非标准的&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat&quot;&gt; &lt;code&gt;Date.prototype.toLocaleFormat&lt;/code&gt; &lt;/a&gt;方法时，会发生JavaScript警告&amp;ldquo; Date.prototype.toLocaleFormat已过时；请考虑改用Intl.DateTimeFormat&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="43b7038a29f656641da0bd71b655bf9ea8aee924" translate="yes" xml:space="preserve">
          <source>The JavaScript warning &quot;JavaScript 1.6's for-each-in loops are deprecated; consider using ES6 for-of instead&quot; occurs when a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt;&lt;code&gt;for each (variable in obj)&lt;/code&gt;&lt;/a&gt; statement is used.</source>
          <target state="translated">当&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt; &lt;code&gt;for each (variable in obj)&lt;/code&gt; &lt;/a&gt;语句使用a时，会发生JavaScript警告&amp;ldquo;不建议使用JavaScript 1.6的for-each-in循环；请考虑改用ES6 for-of&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="adc48808220b1b2eac1d7b44a571b6b66aedc029" translate="yes" xml:space="preserve">
          <source>The JavaScript warning &quot;Using &lt;code&gt;//@&lt;/code&gt; to indicate sourceURL pragmas is deprecated. Use &lt;code&gt;//#&lt;/code&gt; instead&quot; occurs when there is a deprecated source map syntax in a JavaScript source.</source>
          <target state="translated">当JavaScript源中存在不赞成使用的源映射语法时，将出现JavaScript警告&amp;ldquo;使用 &lt;code&gt;//@&lt;/code&gt; 表示不建议使用sourceURL编译指示。而应使用 &lt;code&gt;//#&lt;/code&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="28b3705c3b05fd9c2cb8fc6dd443d196253b217f" translate="yes" xml:space="preserve">
          <source>The JavaScript warning &quot;expression closures are deprecated&quot; occurs when the non-standard &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Expression_closures&quot;&gt;expression closure&lt;/a&gt; syntax (shorthand function syntax) is used.</source>
          <target state="translated">当使用非标准的&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Expression_closures&quot;&gt;表达式闭包&lt;/a&gt;语法（速记函数语法）时，会出现JavaScript警告&amp;ldquo;不建议使用表达式闭包&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="fee1cf1f243bc4e5937adddebb43ada8914847ba" translate="yes" xml:space="preserve">
          <source>The JavaScript warning &quot;reference to undefined property&quot; occurs when a script attempted to access an object property which doesn't exist.</source>
          <target state="translated">当脚本试图访问一个不存在的对象属性时,会发生JavaScript警告 &quot;引用未定义的属性&quot;。</target>
        </trans-unit>
        <trans-unit id="12a50f0ac94fb5146759cdab404101a5bec0361d" translate="yes" xml:space="preserve">
          <source>The JavaScript warning &quot;test for equality (==) mistyped as assignment (=)?&quot; occurs when there was an assignment (&lt;code&gt;=&lt;/code&gt;) when you would normally expect a test for equality (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">JavaScript警告&amp;ldquo;是否将相等性（==）测试错误地分配为赋值（=）？&amp;rdquo; 通常在期望进行相等性测试（ &lt;code&gt;==&lt;/code&gt; ）的情况下，当有分配（ &lt;code&gt;=&lt;/code&gt; ）时发生。</target>
        </trans-unit>
        <trans-unit id="54e79dbb106828c2540ea3883a4db0ce8e09ad81" translate="yes" xml:space="preserve">
          <source>The JavaScript warning &quot;unreachable code after return statement&quot; occurs when using an expression after a &lt;a href=&quot;../statements/return&quot;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/a&gt; statement, or when using a semicolon-less return statement but including an expression directly after.</source>
          <target state="translated">中的JavaScript警告&amp;ldquo;return语句后不到的代码&amp;rdquo;使用时，后表达发生&lt;a href=&quot;../statements/return&quot;&gt; &lt;code&gt;return&lt;/code&gt; &lt;/a&gt;语句，或使用分号少return语句而是直接经过包括表达时。</target>
        </trans-unit>
        <trans-unit id="155d7cf4a3fa091bf436281a15947f386d5b8211" translate="yes" xml:space="preserve">
          <source>The JavaScript warning about string generics occurs in Firefox versions prior to 68. String generics have been removed starting with Firefox 68.</source>
          <target state="translated">在Firefox 68之前的版本中,会出现关于字符串属的JavaScript警告。从Firefox 68开始,字符串代名词已经被删除。</target>
        </trans-unit>
        <trans-unit id="2875bf76ad8a6471989cac72eada74e35e46e9e0" translate="yes" xml:space="preserve">
          <source>The Modern JavaScript Tutorial(javascript.info): &lt;a href=&quot;https://javascript.info/import-export&quot;&gt;Export and Import&lt;/a&gt;</source>
          <target state="translated">现代JavaScript教程（javascript.info）：&lt;a href=&quot;https://javascript.info/import-export&quot;&gt;导出和导入&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="919927e83ec2f24b89b0265f81550441ec6b2ae2" translate="yes" xml:space="preserve">
          <source>The Promise returned by &lt;code&gt;catch()&lt;/code&gt; is rejected if &lt;code&gt;&lt;var&gt;onRejected&lt;/var&gt;&lt;/code&gt; throws an error or returns a Promise which is itself rejected; otherwise, it is resolved.</source>
          <target state="translated">通过返回无极 &lt;code&gt;catch()&lt;/code&gt; 如果被拒绝 &lt;code&gt;&lt;var&gt;onRejected&lt;/var&gt;&lt;/code&gt; 引发错误或返回无极其本身拒绝; 否则，解决。</target>
        </trans-unit>
        <trans-unit id="d4f84834e7660ed505621093e0e5d6c89de8cc1e" translate="yes" xml:space="preserve">
          <source>The Promise returned by &lt;code&gt;catch()&lt;/code&gt; is rejected if &lt;code&gt;onRejected&lt;/code&gt; throws an error or returns a Promise which is itself rejected; otherwise, it is resolved.</source>
          <target state="translated">通过返回无极 &lt;code&gt;catch()&lt;/code&gt; 如果被拒绝 &lt;code&gt;onRejected&lt;/code&gt; 引发错误或返回无极其本身拒绝; 否则，解决。</target>
        </trans-unit>
        <trans-unit id="be24dd95d52c5f822180bc9fbb6030d2d74018ce" translate="yes" xml:space="preserve">
          <source>The Semantics of All JS Class Elements</source>
          <target state="translated">所有JS类元素的语义</target>
        </trans-unit>
        <trans-unit id="95b5af8e1532fe52df042769f7bec798553a35f2" translate="yes" xml:space="preserve">
          <source>The Set object that's being traversed.</source>
          <target state="translated">被遍历的Set对象。</target>
        </trans-unit>
        <trans-unit id="49e044a65fd508c1e1bf68ae413fba5886e5cb81" translate="yes" xml:space="preserve">
          <source>The UTF-16 code unit matches the Unicode code point for code points that can be represented in a single UTF-16 code unit. If the Unicode code point cannot be represented in a single UTF-16 code unit (because its value is greater than 0x10000) then the code unit returned will be the first part of a surrogate pair for the code point. If you want the entire code point value, use &lt;code&gt;codePointAt&lt;/code&gt;().</source>
          <target state="translated">UTF-16代码单元将Unicode代码点与可以在单个UTF-16代码单元中表示的代码点匹配。如果Unicode代码点无法用单个UTF-16代码单元表示（因为其值大于0x10000），则返回的代码单元将是代码点代理对的第一部分。如果需要整个代码点值，请使用 &lt;code&gt;codePointAt&lt;/code&gt; （）。</target>
        </trans-unit>
        <trans-unit id="823270a020d82838e724cdfd50f93480643b44bc" translate="yes" xml:space="preserve">
          <source>The UTF-16 code unit matches the Unicode code point for code points which can be represented in a single UTF-16 code unit. If the Unicode code point cannot be represented in a single UTF-16 code unit (because its value is greater than &lt;code&gt;0xFFFF&lt;/code&gt;) then the code unit returned will be &lt;em&gt;the first part of a surrogate pair&lt;/em&gt; for the code point. If you want the entire code point value, use &lt;a href=&quot;codepointat&quot;&gt;&lt;code&gt;codePointAt()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">UTF-16代码单元将Unicode代码点与可以在单个UTF-16代码单元中表示的代码点匹配。如果Unicode代码点不能用单个UTF-16代码单元表示（因为其值大于 &lt;code&gt;0xFFFF&lt;/code&gt; ），则返回的代码单元将是代码点&lt;em&gt;代理对的第一部分&lt;/em&gt;。如果需要整个代码点值，请使用&lt;a href=&quot;codepointat&quot;&gt; &lt;code&gt;codePointAt()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d5d47b24afb0bafc4e2ef1c61796b73e12594792" translate="yes" xml:space="preserve">
          <source>The Unicode locale identifier string.</source>
          <target state="translated">Unicode语言标识符字符串。</target>
        </trans-unit>
        <trans-unit id="e08b05866ffb60163fb1c3e024218a216ee0bbba" translate="yes" xml:space="preserve">
          <source>The WebAssembly &lt;a href=&quot;https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md&quot;&gt;Threads&lt;/a&gt; proposal allows &lt;code&gt;&lt;a href=&quot;../webassembly/memory&quot;&gt;WebAssembly.Memory&lt;/a&gt;&lt;/code&gt; objects to be created with a new &lt;code&gt;&lt;a href=&quot;https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#javascript-api-changes&quot;&gt;shared&lt;/a&gt;&lt;/code&gt; constructor flag. When this flag is set to &lt;code&gt;true&lt;/code&gt;, the constructed &lt;code&gt;Memory&lt;/code&gt; object can be shared between workers via &lt;code&gt;postMessage()&lt;/code&gt;, just like &lt;code&gt;SharedArrayBuffer&lt;/code&gt;, and the backing &lt;code&gt;&lt;a href=&quot;../webassembly/memory/buffer&quot;&gt;buffer&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;Memory&lt;/code&gt; object is a &lt;code&gt;SharedArrayBuffer&lt;/code&gt;. Therefore, the requirements listed above for sharing a &lt;code&gt;SharedArrayBuffer&lt;/code&gt; between workers also apply to sharing a &lt;code&gt;WebAssembly.Memory&lt;/code&gt;.</source>
          <target state="translated">WebAssembly &lt;a href=&quot;https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md&quot;&gt;Threads&lt;/a&gt;提议允许使用新的 &lt;code&gt;&lt;a href=&quot;https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#javascript-api-changes&quot;&gt;shared&lt;/a&gt;&lt;/code&gt; 构造函数标志创建 &lt;code&gt;&lt;a href=&quot;../webassembly/memory&quot;&gt;WebAssembly.Memory&lt;/a&gt;&lt;/code&gt; 对象。当此标志设置为 &lt;code&gt;true&lt;/code&gt; 时，可以通过 &lt;code&gt;postMessage()&lt;/code&gt; 在工作 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 之间共享构造的 &lt;code&gt;Memory&lt;/code&gt; 对象，就像SharedArrayBuffer一样，并且该 &lt;code&gt;Memory&lt;/code&gt; 对象的后备 &lt;code&gt;&lt;a href=&quot;../webassembly/memory/buffer&quot;&gt;buffer&lt;/a&gt;&lt;/code&gt; 是 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 。因此，上面列出的在工作 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 之间共享SharedArrayBuffer的要求也适用于共享 &lt;code&gt;WebAssembly.Memory&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="32db7a0dd465bf8e97f0deb13357f0bffa810c96" translate="yes" xml:space="preserve">
          <source>The WebAssembly Threads proposal also defines a new set of &lt;a href=&quot;https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#atomic-memory-accesses&quot;&gt;atomic&lt;/a&gt; instructions. Just as &lt;code&gt;SharedArrayBuffer&lt;/code&gt; and its methods are unconditionally enabled (and only sharing between threads is gated on the new headers), the WebAssembly atomic instructions are also unconditionally allowed.</source>
          <target state="translated">WebAssembly Threads提议还定义了一组新的&lt;a href=&quot;https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#atomic-memory-accesses&quot;&gt;原子&lt;/a&gt;指令。正如无条件地启用 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 及其方法（并且仅在新标头上限制线程之间的共享）一样，也无条件地允许WebAssembly原子指令。</target>
        </trans-unit>
        <trans-unit id="614f666e60229c8931cfcf35c7c7b7b8405c66c9" translate="yes" xml:space="preserve">
          <source>The above alert shows &lt;code&gt;button&lt;/code&gt;. Note however that only the outer code has its &lt;code&gt;this&lt;/code&gt; set this way:</source>
          <target state="translated">上面的警报显示 &lt;code&gt;button&lt;/code&gt; 。但是请注意，只有外码都有 &lt;code&gt;this&lt;/code&gt; 设置是这样的：</target>
        </trans-unit>
        <trans-unit id="48db29ca2070a265910895b83347db970012efd5" translate="yes" xml:space="preserve">
          <source>The above code creates three new symbols. Note that &lt;code&gt;Symbol(&quot;foo&quot;)&lt;/code&gt; does not coerce the string &quot;foo&quot; into a symbol. It creates a new symbol each time:</source>
          <target state="translated">上面的代码创建了三个新符号。请注意， &lt;code&gt;Symbol(&quot;foo&quot;)&lt;/code&gt; 不会将字符串&amp;ldquo; foo&amp;rdquo;强制转换为符号。每次创建一个新符号：</target>
        </trans-unit>
        <trans-unit id="590b696b826ba373a8a2a654abcb824bc9a84b26" translate="yes" xml:space="preserve">
          <source>The above code creates three new symbols. Note that &lt;code&gt;Symbol(&quot;foo&quot;)&lt;/code&gt; does not coerce the string &lt;code&gt;&quot;foo&quot;&lt;/code&gt; into a symbol. It creates a new symbol each time:</source>
          <target state="translated">上面的代码创建了三个新符号。请注意， &lt;code&gt;Symbol(&quot;foo&quot;)&lt;/code&gt; 不会将字符串 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; 强制转换为符号。每次创建一个新符号：</target>
        </trans-unit>
        <trans-unit id="ebc968b0e572c0c6ecd0d9dde19f65705aeb7e07" translate="yes" xml:space="preserve">
          <source>The above example uses parsing of a non&amp;ndash;standard string value that may not be correctly parsed in non&amp;ndash;Mozilla browsers.</source>
          <target state="translated">上面的示例使用了非标准字符串值的解析，该非标准字符串值在非Mozilla浏览器中可能无法正确解析。</target>
        </trans-unit>
        <trans-unit id="779a22b41e4e4f93cde5fd366230052879eb4ac2" translate="yes" xml:space="preserve">
          <source>The above syntax using the &lt;code&gt;Symbol()&lt;/code&gt; function will not create a global symbol that is available in your whole codebase. To create symbols available across files and even across realms (each of which has its own global scope), use the methods &lt;a href=&quot;symbol/for&quot;&gt;&lt;code&gt;Symbol.for()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;symbol/keyfor&quot;&gt;&lt;code&gt;Symbol.keyFor()&lt;/code&gt;&lt;/a&gt; to set and retrieve symbols from the global symbol registry.</source>
          <target state="translated">上面使用 &lt;code&gt;Symbol()&lt;/code&gt; 函数的语法不会创建在整个代码库中可用的全局符号。要创建跨文件甚至跨领域（每个领域都有其自己的全局范围）可用的符号，请使用&lt;a href=&quot;symbol/for&quot;&gt; &lt;code&gt;Symbol.for()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;symbol/keyfor&quot;&gt; &lt;code&gt;Symbol.keyFor()&lt;/code&gt; &lt;/a&gt;方法设置并从全局符号注册表中检索符号。</target>
        </trans-unit>
        <trans-unit id="76c147cd9cdc395d76c4a7f61bcaf2a60decddaa" translate="yes" xml:space="preserve">
          <source>The absolute value of the given number.</source>
          <target state="translated">给定数字的绝对值。</target>
        </trans-unit>
        <trans-unit id="3f6a69d21aaf347894210c65e3fc803f60e795ae" translate="yes" xml:space="preserve">
          <source>The accumulator accumulates &lt;var&gt;callback&lt;/var&gt;'s return values. It is the accumulated value previously returned in the last invocation of the callback&amp;mdash;or &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt;, if it was supplied (see below).</source>
          <target state="translated">累加器累加 &lt;var&gt;callback&lt;/var&gt; 的返回值。它是先前在回调的上一次调用中返回的累积值，或者提供了 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; （如果已提供）（请参见下文）。</target>
        </trans-unit>
        <trans-unit id="6eade57e467c41464ec5d8b8513d318ab94fe744" translate="yes" xml:space="preserve">
          <source>The accumulator accumulates the callback's return values; it is the accumulated value previously returned in the last invocation of the callback, or &lt;code&gt;initialValue&lt;/code&gt;, if supplied (see below).</source>
          <target state="translated">累加器累加回调的返回值；它是先前在回调的上一次调用中返回的累积值，或者提供了 &lt;code&gt;initialValue&lt;/code&gt; （如果提供）（请参见下文）。</target>
        </trans-unit>
        <trans-unit id="77ba5397f7c6e642ce23e930343dd9ec88055feb" translate="yes" xml:space="preserve">
          <source>The addition assignment operator (&lt;code&gt;+=&lt;/code&gt;) adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible.</source>
          <target state="translated">加法赋值运算符（ &lt;code&gt;+=&lt;/code&gt; ）将右操作数的值添加到变量中，并将结果赋值给变量。两个操作数的类型确定加法赋值运算符的行为。加法或串联是可能的。</target>
        </trans-unit>
        <trans-unit id="c0cb05ceed2902ab0776f2e0d4d042358e7f0a6a" translate="yes" xml:space="preserve">
          <source>The addition assignment operator &lt;strong&gt;adds&lt;/strong&gt; the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the &lt;a href=&quot;arithmetic_operators#Addition&quot;&gt;addition operator&lt;/a&gt; for more details.</source>
          <target state="translated">加法赋值运算符&lt;strong&gt;将&lt;/strong&gt;右操作数的值&lt;strong&gt;添加&lt;/strong&gt;到变量，并将结果赋值给变量。两个操作数的类型确定加法赋值运算符的行为。加法或串联是可能的。有关更多详细信息，请参见&lt;a href=&quot;arithmetic_operators#Addition&quot;&gt;加法运算符&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e9de672547f633f05a2c640b70d9d8ce5c863f80" translate="yes" xml:space="preserve">
          <source>The addition operator (&lt;code&gt;+&lt;/code&gt;) produces the sum of numeric operands or string concatenation.</source>
          <target state="translated">加法运算符（ &lt;code&gt;+&lt;/code&gt; ）产生数字操作数或字符串连接的总和。</target>
        </trans-unit>
        <trans-unit id="4a9e70d115ebee62e12d028c95344707ba539dff" translate="yes" xml:space="preserve">
          <source>The addition operator produces the sum of numeric operands or string concatenation.</source>
          <target state="translated">加法运算符产生数字操作数之和或字符串连接。</target>
        </trans-unit>
        <trans-unit id="45fd46de73e09649bf34e6b28fed934df6b6ff74" translate="yes" xml:space="preserve">
          <source>The allowed range for these methods is usually between 0 and 20 (or 21). However, the ECMAScript specification allows to extend this range.</source>
          <target state="translated">这些方法的允许范围通常在0和20(或21)之间。然而,ECMAScript规范允许扩大这个范围。</target>
        </trans-unit>
        <trans-unit id="7d91e9d1788be3b3c63472bb6f2a8d4521caaf6f" translate="yes" xml:space="preserve">
          <source>The amount of bits available for the integer size.</source>
          <target state="translated">整数大小的可用位数。</target>
        </trans-unit>
        <trans-unit id="f2e4f23675a348a666a6bfafd7a4699120b37ced" translate="yes" xml:space="preserve">
          <source>The angle in radians (in</source>
          <target state="translated">弧度角(以</target>
        </trans-unit>
        <trans-unit id="2634c0a019d5cd1eb149d39cd1e280b4a526aa36" translate="yes" xml:space="preserve">
          <source>The angle in radians for which to return the cosine.</source>
          <target state="translated">返回余弦的弧度角。</target>
        </trans-unit>
        <trans-unit id="d3a872a0c25d02b4931e3593a12295a940af3681" translate="yes" xml:space="preserve">
          <source>The arccosine (angle in radians) of the given number if it's between &lt;code&gt;-1&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;; otherwise, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">给定数字的反余弦（以弧度表示的角度）在 &lt;code&gt;-1&lt;/code&gt; 和 &lt;code&gt;1&lt;/code&gt; 之间；否则为&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4e34c6cf0ffab0f10f4b4f8b32a6d6fee2d0835d" translate="yes" xml:space="preserve">
          <source>The arccosine (in radians) of the given number if it's between &lt;strong&gt;-1&lt;/strong&gt; and &lt;strong&gt;1&lt;/strong&gt;; otherwise, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">给定数字的反余弦（以弧度表示），如果介于&lt;strong&gt;-1&lt;/strong&gt;和&lt;strong&gt;1&lt;/strong&gt;之间；否则为&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ddc680f871363f6e0485b6e299a25e7590efcab6" translate="yes" xml:space="preserve">
          <source>The arcsine (in radians) of the given number if it's between &lt;strong&gt;-1&lt;/strong&gt; and &lt;strong&gt;1&lt;/strong&gt;; otherwise, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">给定数字的反正弦值（以弧度表示），如果介于&lt;strong&gt;-1&lt;/strong&gt;和&lt;strong&gt;1&lt;/strong&gt;之间；否则为&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="85ae76861326155a029dcf8b30f59372b5b5bdd8" translate="yes" xml:space="preserve">
          <source>The arctangent (in radians) of the given number.</source>
          <target state="translated">给定数字的正切(弧度)。</target>
        </trans-unit>
        <trans-unit id="8a7944803c62f9bf2952575c8a72fd7e52711bcc" translate="yes" xml:space="preserve">
          <source>The argument list is invalid somehow. Perhaps you accidentally picked a keyword like &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;var&lt;/code&gt; as an argument name, or perhaps there's some stray punctuation in your argument list. Or maybe you accidentally passed an invalid value, like a number or object.</source>
          <target state="translated">参数列表以某种方式无效。也许您不小心选择了一个像 &lt;code&gt;if&lt;/code&gt; 或 &lt;code&gt;var&lt;/code&gt; 这样的关键字作为参数名称，或者您的参数列表中可能有一些标点符号。或者，您可能不小心传递了一个无效值，例如数字或对象。</target>
        </trans-unit>
        <trans-unit id="7cad76dfde920321524d3fa684e08460364eae69" translate="yes" xml:space="preserve">
          <source>The argument of &lt;a href=&quot;../global_objects/array/sort&quot;&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/a&gt; is expected to be either &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; or a function which compares its operands.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/array/sort&quot;&gt; &lt;code&gt;Array.prototype.sort()&lt;/code&gt; &lt;/a&gt;的参数应该是&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;或者是一个比较其操作数的函数。</target>
        </trans-unit>
        <trans-unit id="6f2610db3899781e47b828d98a30ce2343116de0" translate="yes" xml:space="preserve">
          <source>The argument of the &lt;code&gt;eval()&lt;/code&gt; function is a string. If the string represents an expression, &lt;code&gt;eval()&lt;/code&gt; evaluates the expression. If the argument represents one or more JavaScript statements, &lt;code&gt;eval()&lt;/code&gt; evaluates the statements. Do not call &lt;code&gt;eval()&lt;/code&gt; to evaluate an arithmetic expression; JavaScript evaluates arithmetic expressions automatically.</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; 函数的参数是一个字符串。如果字符串表示一个表达式，则 &lt;code&gt;eval()&lt;/code&gt; 将对表达式求值。如果参数代表一个或多个JavaScript语句，则 &lt;code&gt;eval()&lt;/code&gt; 会评估这些语句。不要调用 &lt;code&gt;eval()&lt;/code&gt; 来计算算术表达式；JavaScript自动评估算术表达式。</target>
        </trans-unit>
        <trans-unit id="86421c1a1ea2fb7e300781ab95602ea6e5e9b867" translate="yes" xml:space="preserve">
          <source>The argument passed to this function will be converted to &lt;code&gt;number&lt;/code&gt; type implicitly.</source>
          <target state="translated">传递给此函数的参数将隐式转换为 &lt;code&gt;number&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="2642b281b11a45379b1899c8bfdfa20fded62cac" translate="yes" xml:space="preserve">
          <source>The argument passed to this method will be converted to number type implicitly.</source>
          <target state="translated">传递给本方法的参数将被隐式转换为数字类型。</target>
        </trans-unit>
        <trans-unit id="ad8b914095fbf6c1921676be0fbe503c75e3bc36" translate="yes" xml:space="preserve">
          <source>The argument to be checked.</source>
          <target state="translated">要检查的参数。</target>
        </trans-unit>
        <trans-unit id="568b31681a37df3f00fb42424598962a14f30d09" translate="yes" xml:space="preserve">
          <source>The arguments &quot;&lt;code&gt;a&lt;/code&gt;&quot; and &quot;&lt;code&gt;b&lt;/code&gt;&quot; are formal argument names that are used in the function body, &quot;&lt;code&gt;return a + b&lt;/code&gt;&quot;.</source>
          <target state="translated">参数&amp;ldquo; &lt;code&gt;a&lt;/code&gt; &amp;rdquo;和&amp;ldquo; &lt;code&gt;b&lt;/code&gt; &amp;rdquo;是在函数体中使用的形式参数名称，&amp;ldquo; &lt;code&gt;return a + b&lt;/code&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="d01f440c1503d60bc2f15078825ee9b7b4dd13f7" translate="yes" xml:space="preserve">
          <source>The arguments of &lt;code&gt;substring()&lt;/code&gt; represent the starting and ending indexes, while the arguments of &lt;code&gt;substr()&lt;/code&gt; represent the starting index and the length of characters to include in the returned string.</source>
          <target state="translated">&lt;code&gt;substring()&lt;/code&gt; 的参数表示起始索引和结束索引，而 &lt;code&gt;substr()&lt;/code&gt; 的参数表示起始索引和要包含在返回的字符串中的字符的长度。</target>
        </trans-unit>
        <trans-unit id="96e62f55bfabf27002f18dc6cc9411b91c3d89da" translate="yes" xml:space="preserve">
          <source>The arguments of &lt;code&gt;substring()&lt;/code&gt; represent the starting and ending indexes, while the arguments of &lt;code&gt;substr()&lt;/code&gt; represent the starting index and the number of characters to include in the returned string.</source>
          <target state="translated">&lt;code&gt;substring()&lt;/code&gt; 的参数代表开始和结束索引，而 &lt;code&gt;substr()&lt;/code&gt; 的参数代表开始索引和要包含在返回的字符串中的字符数。</target>
        </trans-unit>
        <trans-unit id="1c05bc8168ca994804516a468e85cd019d331fe5" translate="yes" xml:space="preserve">
          <source>The arguments to the function are as follows:</source>
          <target state="translated">该函数的参数如下:</target>
        </trans-unit>
        <trans-unit id="ce50c2eb1731e30f651e83e65a160b7d9cb292ed" translate="yes" xml:space="preserve">
          <source>The arguments.length property provides the number of arguments actually passed to a function. This can be more or less than the defined parameter's count (see &lt;a href=&quot;../../global_objects/function/length&quot;&gt;&lt;code&gt;Function.length&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">arguments.length属性提供了实际传递给函数的参数数量。它可以大于或小于定义的参数的计数（请参见&lt;a href=&quot;../../global_objects/function/length&quot;&gt; &lt;code&gt;Function.length&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d6ace2dacc3116721ac085e0aa2ff5a3b5910fd8" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;every&lt;/code&gt; was called upon.</source>
          <target state="translated">每个数组 &lt;code&gt;every&lt;/code&gt; 被调用。</target>
        </trans-unit>
        <trans-unit id="b0a5990c1febd7c0456b1d95c2919dd12ea41ed9" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;filter&lt;/code&gt; was called upon.</source>
          <target state="translated">调用了数组 &lt;code&gt;filter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="739231e797b44686b6cb1d90214cc6c87045d6c4" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;find&lt;/code&gt; was called upon.</source>
          <target state="translated">数组 &lt;code&gt;find&lt;/code&gt; 被调用。</target>
        </trans-unit>
        <trans-unit id="cca6c09af2617cd7edc0dae16991867e9b40c49e" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;findIndex()&lt;/code&gt; was called upon.</source>
          <target state="translated">调用了 &lt;code&gt;findIndex()&lt;/code&gt; 数组。</target>
        </trans-unit>
        <trans-unit id="fd246a8490071c05ff637a363cae6c8e36958f15" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;findIndex&lt;/code&gt; was called upon.</source>
          <target state="translated">调用了 &lt;code&gt;findIndex&lt;/code&gt; 数组。</target>
        </trans-unit>
        <trans-unit id="ab72b62dc5410c1069e9b77f96e6c04c204b365d" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;forEach()&lt;/code&gt; was called upon.</source>
          <target state="translated">调用了 &lt;code&gt;forEach()&lt;/code&gt; 数组。</target>
        </trans-unit>
        <trans-unit id="d3186a1a627eaeb3ebe86c8859078581c3a2241f" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;map&lt;/code&gt; was called upon.</source>
          <target state="translated">调用了数组 &lt;code&gt;map&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d8556e513816f3230a6e95e0d7cca63a630bf152" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;reduce()&lt;/code&gt; was called upon.</source>
          <target state="translated">调用了数组 &lt;code&gt;reduce()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e4bc918402b106b22d0715b5db9cbc982610a958" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;reduce&lt;/code&gt; was called upon.</source>
          <target state="translated">调用了数组 &lt;code&gt;reduce&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f059576f65fd507515e526c54e2416467c8d0136" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;reduceRight()&lt;/code&gt; was called upon.</source>
          <target state="translated">调用了 &lt;code&gt;reduceRight()&lt;/code&gt; 数组。</target>
        </trans-unit>
        <trans-unit id="52ab5cf3467b3f84dd374afb2b77922d7f6dba9d" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;some()&lt;/code&gt; was called upon.</source>
          <target state="translated">调用了 &lt;code&gt;some()&lt;/code&gt; 数组。</target>
        </trans-unit>
        <trans-unit id="6dad5186f2394322d0d048218bd4971959e5c71d" translate="yes" xml:space="preserve">
          <source>The array &lt;strong&gt;iterator&lt;/strong&gt; function, which is the &lt;a href=&quot;values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; function by default.</source>
          <target state="translated">数组&lt;strong&gt;迭代器&lt;/strong&gt;函数，默认情况下为&lt;a href=&quot;values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="baf0ca63b09065862fb6a8e2d7fe2f07e5b3e61c" translate="yes" xml:space="preserve">
          <source>The array comprehensions syntax is non-standard and removed starting with Firefox 58. For future-facing usages, consider using &lt;a href=&quot;../global_objects/array/map&quot;&gt;&lt;code&gt;Array.prototype.map&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt;, and &lt;a href=&quot;spread_syntax&quot;&gt;spread syntax&lt;/a&gt;.</source>
          <target state="translated">数组推导语法是非标准的，并且从Firefox 58开始删除。对于面向未来的用法，请考虑使用&lt;a href=&quot;../global_objects/array/map&quot;&gt; &lt;code&gt;Array.prototype.map&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../global_objects/array/filter&quot;&gt; &lt;code&gt;Array.prototype.filter&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../functions/arrow_functions&quot;&gt;箭头函数&lt;/a&gt;和&lt;a href=&quot;spread_syntax&quot;&gt;spread语法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="574cf9211229dd7de993204fbc819629088b32dd" translate="yes" xml:space="preserve">
          <source>The array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown.</source>
          <target state="translated">要复制值的数组。所有来自源数组的值都会被复制到目标数组中,除非源数组的长度加上偏移量超过目标数组的长度,在这种情况下会产生异常。</target>
        </trans-unit>
        <trans-unit id="063bbc7e8b95dfb2a20635172ab4d25b248ab7b7" translate="yes" xml:space="preserve">
          <source>The array may contain fewer entries than &lt;code&gt;limit&lt;/code&gt; if the end of the string is reached before the limit is reached.</source>
          <target state="translated">该阵列可以含有除条目更少 &lt;code&gt;limit&lt;/code&gt; ，如果达到该限制之前达到串的结尾。</target>
        </trans-unit>
        <trans-unit id="4a8c296b177d1726314c8984d3dca410ee5bb07d" translate="yes" xml:space="preserve">
          <source>The array that &lt;code&gt;find&lt;/code&gt; was called on.</source>
          <target state="translated">&lt;code&gt;find&lt;/code&gt; 的数组被调用。</target>
        </trans-unit>
        <trans-unit id="5d3ea3e65da8f7c4b65c1da2a62251e8c8e8b334" translate="yes" xml:space="preserve">
          <source>The array that &lt;code&gt;forEach()&lt;/code&gt; is being applied to.</source>
          <target state="translated">适用于 &lt;code&gt;forEach()&lt;/code&gt; 的数组。</target>
        </trans-unit>
        <trans-unit id="518a56af12e1c2665fe6da5982dd5a9e68f5bc6c" translate="yes" xml:space="preserve">
          <source>The arrow function expression (=&amp;gt;)</source>
          <target state="translated">箭头函数表达式（=&amp;gt;）</target>
        </trans-unit>
        <trans-unit id="ec1bb50d7c8ede459b02e9171f3e6a273551bc48" translate="yes" xml:space="preserve">
          <source>The asterisk (&lt;code&gt;*&lt;/code&gt;) in the shorthand syntax must be &lt;em&gt;before&lt;/em&gt; the generator property name. (That is, &lt;code&gt;* g(){}&lt;/code&gt; will work, but &lt;code&gt;g *(){}&lt;/code&gt; will not.)</source>
          <target state="translated">简写语法中的星号（ &lt;code&gt;*&lt;/code&gt; ）必须&lt;em&gt;在&lt;/em&gt;生成器属性名称&lt;em&gt;之前&lt;/em&gt;。（也就是说， &lt;code&gt;* g(){}&lt;/code&gt; 将起作用，而 &lt;code&gt;g *(){}&lt;/code&gt; 将不起作用。）</target>
        </trans-unit>
        <trans-unit id="59183250f0677ed86b491a4145e3847b2edb3225" translate="yes" xml:space="preserve">
          <source>The attributes for the property being defined or modified.</source>
          <target state="translated">被定义或修改的属性的属性。</target>
        </trans-unit>
        <trans-unit id="f79e2a6915396dcde507e68f69aa0bcc1ad9f2b1" translate="yes" xml:space="preserve">
          <source>The base 10 logarithm of the given number. If the number is negative, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">给定数字的以10为底的对数。如果数字为负，则返回&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="19f44bd8b33b87013e304114f54f4d54ffa56d4d" translate="yes" xml:space="preserve">
          <source>The base 2 logarithm of the given number. If the number is negative, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">给定数字的以2为底的对数。如果数字为负，则返回&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="598eb94105d30e9010db45a9322f00161e0043ff" translate="yes" xml:space="preserve">
          <source>The base number.</source>
          <target state="translated">基数。</target>
        </trans-unit>
        <trans-unit id="9138e5420219b68a65111246e358ee019b383637" translate="yes" xml:space="preserve">
          <source>The basic assignment operator is equal (&lt;code&gt;=&lt;/code&gt;), which assigns the value of its right operand to its left operand. That is, &lt;code&gt;x = y&lt;/code&gt; assigns the value of &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;. The other assignment operators are usually shorthand for standard operations, as shown in the following definitions and examples.</source>
          <target state="translated">基本赋值运算符等于（ &lt;code&gt;=&lt;/code&gt; ），它将其右操作数的值赋给其左操作数。即， &lt;code&gt;x = y&lt;/code&gt; 的分配值 &lt;code&gt;y&lt;/code&gt; 到 &lt;code&gt;x&lt;/code&gt; 。其他赋值运算符通常是标准操作的简写，如以下定义和示例所示。</target>
        </trans-unit>
        <trans-unit id="2802dc8e28fd850a2101c483c80ff9abc2cd12d3" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;this&lt;/code&gt; in &lt;a href=&quot;../classes&quot;&gt;classes&lt;/a&gt; and functions is similar, since classes are functions under the hood. But there are some differences and caveats.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 在&lt;a href=&quot;../classes&quot;&gt;类&lt;/a&gt;和函数中的行为是相似的，因为类是幕后的函数。但是存在一些差异和警告。</target>
        </trans-unit>
        <trans-unit id="cdb02f181b59533649448d799e40c95336a7699d" translate="yes" xml:space="preserve">
          <source>The bitwise AND assignment operator (&lt;code&gt;&amp;amp;=&lt;/code&gt;) uses the binary representation of both operands, does a bitwise AND operation on them and assigns the result to the variable.</source>
          <target state="translated">按位AND赋值运算符（ &lt;code&gt;&amp;amp;=&lt;/code&gt; ）使用两个操作数的二进制表示，对它们进行按位AND运算并将结果分配给变量。</target>
        </trans-unit>
        <trans-unit id="064d3957a78ce04301d5080c985ea903ba7311e2" translate="yes" xml:space="preserve">
          <source>The bitwise AND assignment operator uses the binary representation of both operands, does a bitwise AND operation on them and assigns the result to the variable. See the &lt;a href=&quot;bitwise_operators#Bitwise_AND&quot;&gt;bitwise AND operator&lt;/a&gt; for more details.</source>
          <target state="translated">按位与赋值运算符使用两个操作数的二进制表示，对它们进行按位与运算，并将结果分配给变量。有关更多详细信息，请参见&lt;a href=&quot;bitwise_operators#Bitwise_AND&quot;&gt;按位AND运算符&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="740026f0cc3692131272c79998e3dd563a72e7a0" translate="yes" xml:space="preserve">
          <source>The bitwise AND operation only yields 1, if both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are 1. The truth table for the AND operation is:</source>
          <target state="translated">如果 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 均为1，则按位与运算仅得出1。与运算的真值表为：</target>
        </trans-unit>
        <trans-unit id="10a0f083ebf36cb6bd149e63540305d73deec4a1" translate="yes" xml:space="preserve">
          <source>The bitwise AND operator (&lt;code&gt;&amp;amp;&lt;/code&gt;) returns a &lt;code&gt;1&lt;/code&gt; in each bit position for which the corresponding bits of both operands are &lt;code&gt;1&lt;/code&gt;s.</source>
          <target state="translated">按位与运算符（ &lt;code&gt;&amp;amp;&lt;/code&gt; ）在每个位的位置都返回 &lt;code&gt;1&lt;/code&gt; ，这两个操作数的对应位均为 &lt;code&gt;1&lt;/code&gt; s。</target>
        </trans-unit>
        <trans-unit id="b71e724cb9e3c533456a6fe916e38b4f936b077a" translate="yes" xml:space="preserve">
          <source>The bitwise NOT operator (&lt;code&gt;~&lt;/code&gt;) inverts the bits of its operand.</source>
          <target state="translated">按位NOT运算符（ &lt;code&gt;~&lt;/code&gt; ）反转其操作数的位。</target>
        </trans-unit>
        <trans-unit id="d225b21b40428cb5c59289fb17311dde28a6e9b3" translate="yes" xml:space="preserve">
          <source>The bitwise OR assignment operator (&lt;code&gt;|=&lt;/code&gt;) uses the binary representation of both operands, does a bitwise OR operation on them and assigns the result to the variable.</source>
          <target state="translated">按位OR赋值运算符（ &lt;code&gt;|=&lt;/code&gt; ）使用两个操作数的二进制表示，对它们进行按位OR运算并将结果分配给变量。</target>
        </trans-unit>
        <trans-unit id="d2f6914a63e091d61d1a3d787cf628bb0b651f2b" translate="yes" xml:space="preserve">
          <source>The bitwise OR assignment operator uses the binary representation of both operands, does a bitwise OR operation on them and assigns the result to the variable. See the &lt;a href=&quot;bitwise_operators#Bitwise_OR&quot;&gt;bitwise OR operator&lt;/a&gt; for more details.</source>
          <target state="translated">按位&amp;ldquo;或&amp;rdquo;赋值运算符使用两个操作数的二进制表示，对它们进行按位&amp;ldquo;或&amp;rdquo;运算并将结果分配给变量。有关更多详细信息，请参见&lt;a href=&quot;bitwise_operators#Bitwise_OR&quot;&gt;按位或运算符&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e346339363a3470fe9e3b74cc1f4d1f99862ea69" translate="yes" xml:space="preserve">
          <source>The bitwise OR operation yields 1, if either &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; are 1. The truth table for the OR operation is:</source>
          <target state="translated">如果 &lt;code&gt;a&lt;/code&gt; 或 &lt;code&gt;b&lt;/code&gt; 为1，则按位OR运算得出1。OR运算的真值表为：</target>
        </trans-unit>
        <trans-unit id="705eb6deb4b8616d8ad6d083a8ab1c439fbc57d3" translate="yes" xml:space="preserve">
          <source>The bitwise OR operator (&lt;code&gt;|&lt;/code&gt;) returns a &lt;code&gt;1&lt;/code&gt; in each bit position for which the corresponding bits of either or both operands are &lt;code&gt;1&lt;/code&gt;s.</source>
          <target state="translated">按位&amp;ldquo;或&amp;rdquo;运算符（ &lt;code&gt;|&lt;/code&gt; ）在每个位位置中返回一个 &lt;code&gt;1&lt;/code&gt; ，为此，一个或两个操作数的对应位均为 &lt;code&gt;1&lt;/code&gt; s。</target>
        </trans-unit>
        <trans-unit id="7296793f48f64363275be0af058a428c2e462773" translate="yes" xml:space="preserve">
          <source>The bitwise XOR assignment operator (&lt;code&gt;^=&lt;/code&gt;) uses the binary representation of both operands, does a bitwise XOR operation on them and assigns the result to the variable.</source>
          <target state="translated">按位XOR赋值运算符（ &lt;code&gt;^=&lt;/code&gt; ）使用两个操作数的二进制表示，对它们进行按位XOR运算并将结果分配给变量。</target>
        </trans-unit>
        <trans-unit id="867db60d4f73f82b6e6d70b093e9389fd0ce51de" translate="yes" xml:space="preserve">
          <source>The bitwise XOR assignment operator uses the binary representation of both operands, does a bitwise XOR operation on them and assigns the result to the variable. See the &lt;a href=&quot;bitwise_operators#Bitwise_XOR&quot;&gt;bitwise XOR operator&lt;/a&gt; for more details.</source>
          <target state="translated">按位XOR赋值运算符使用两个操作数的二进制表示，对它们进行按位XOR运算并将结果分配给变量。有关更多详细信息，请参见&lt;a href=&quot;bitwise_operators#Bitwise_XOR&quot;&gt;按位XOR运算符&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f2136d7ce96d0b55459d54b5b473e1285c2c9cfa" translate="yes" xml:space="preserve">
          <source>The bitwise XOR operation yields 1, if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are different. The truth table for the XOR operation is:</source>
          <target state="translated">如果 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 不同，按位XOR运算将得出1 。XOR操作的真值表为：</target>
        </trans-unit>
        <trans-unit id="7b2c31b3d4fd5009a86c6b49e809f77d0f770910" translate="yes" xml:space="preserve">
          <source>The bitwise XOR operator (&lt;code&gt;^&lt;/code&gt;) returns a &lt;code&gt;1&lt;/code&gt; in each bit position for which the corresponding bits of either but not both operands are &lt;code&gt;1&lt;/code&gt;s.</source>
          <target state="translated">按位XOR运算符（ &lt;code&gt;^&lt;/code&gt; ）返回一个 &lt;code&gt;1&lt;/code&gt; 在每个比特位置为其中任一对应的位，但不能两者都操作数都是 &lt;code&gt;1&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="9c276658178589b2b39f0ac029ac097652b8b966" translate="yes" xml:space="preserve">
          <source>The bitwise logical operators are often used to create, manipulate, and read sequences of &lt;em&gt;flags&lt;/em&gt;, which are like binary variables. Variables could be used instead of these sequences, but binary flags take much less memory (by a factor of 32).</source>
          <target state="translated">按位逻辑运算符通常用于创建，操作和读取&lt;em&gt;标志&lt;/em&gt;序列，就像二进制变量一样。可以使用变量代替这些序列，但是二进制标志占用的内存少得多（减少了32倍）。</target>
        </trans-unit>
        <trans-unit id="48f10e0cc5e63026f354f72ce42f1b440b6efc91" translate="yes" xml:space="preserve">
          <source>The bitwise shift operators take two operands: the first is a quantity to be shifted, and the second specifies the number of bit positions by which the first operand is to be shifted. The direction of the shift operation is controlled by the operator used.</source>
          <target state="translated">位移操作符取两个操作数:第一个是要移位的数量,第二个指定第一个操作数要移位的位数。移位操作的方向由所使用的操作符控制。</target>
        </trans-unit>
        <trans-unit id="175ebbaf313d101be1d46496e89b9a5e9de11c06" translate="yes" xml:space="preserve">
          <source>The block statement is often called &lt;strong&gt;compound statement&lt;/strong&gt; in other languages. It allows you to use multiple statements where JavaScript expects only one statement. Combining statements into blocks is a common practice in JavaScript. The opposite behavior is possible using an &lt;a href=&quot;empty&quot;&gt;empty statement&lt;/a&gt;, where you provide no statement, although one is required.</source>
          <target state="translated">在其他语言中，block语句通常称为&lt;strong&gt;复合语句&lt;/strong&gt;。它允许您在JavaScript只需要一个语句的情况下使用多个语句。将语句组合成块是JavaScript中的一种常见做法。使用&lt;a href=&quot;empty&quot;&gt;空语句&lt;/a&gt;可以实现相反的行为，尽管您需要提供一个语句，但您不提供任何语句。</target>
        </trans-unit>
        <trans-unit id="7477e48593995ef9da932d151626c02fe6996b24" translate="yes" xml:space="preserve">
          <source>The body of a class is executed in &lt;a href=&quot;strict_mode&quot;&gt;strict mode&lt;/a&gt;, i.e., code written here is subject to stricter syntax for increased performance, some otherwise silent errors will be thrown, and certain keywords are reserved for future versions of ECMAScript.</source>
          <target state="translated">类的主体以&lt;a href=&quot;strict_mode&quot;&gt;严格模式&lt;/a&gt;执行，即，此处编写的代码将采用更严格的语法以提高性能，否则将抛出一些其他的无提示错误，并且某些关键字保留给将来的ECMAScript版本。</target>
        </trans-unit>
        <trans-unit id="4bca9151f6cc6d585fadc8a648f58c470c08c10c" translate="yes" xml:space="preserve">
          <source>The body of a class is the part that is in curly brackets &lt;code&gt;{}&lt;/code&gt;. This is where you define class members, such as methods or constructor.</source>
          <target state="translated">类的主体是放在大括号 &lt;code&gt;{}&lt;/code&gt; 中的部分。在这里定义类成员，例如方法或构造函数。</target>
        </trans-unit>
        <trans-unit id="04f2edc36f17bd99c04c802e883bde6dc207dc91" translate="yes" xml:space="preserve">
          <source>The body of an async function can be thought of as being split by zero or more await expressions. Top-level code, up to and including the first await expression (if there is one), is run synchronously. In this way, an async function without an await expression will run synchronously. If there is an await expression inside the function body, however, the async function will always complete asynchronously.</source>
          <target state="translated">一个异步函数的主体可以被认为是由零个或多个 await 表达式分割而成。顶层代码,包括第一个 await 表达式(如果有的话),都是同步运行的。这样,一个没有等待表达式的异步函数将同步运行。但如果在函数体中有一个 await 表达式,则异步函数将始终异步完成。</target>
        </trans-unit>
        <trans-unit id="ebf69735072234ebcbd50f368e02a05de91363f5" translate="yes" xml:space="preserve">
          <source>The brackets may look correct at first, but note how the &lt;code&gt;||&lt;/code&gt; is outside the brackets. Correct would be putting brackets around the &lt;code&gt;||&lt;/code&gt;:</source>
          <target state="translated">括号一开始看起来可能是正确的，但请注意 &lt;code&gt;||&lt;/code&gt; 如何 在方括号之外。正确的是将括号放在 &lt;code&gt;||&lt;/code&gt; 周围 ：</target>
        </trans-unit>
        <trans-unit id="a60abbe84992cc75d4e2129371f5adf4277c742a" translate="yes" xml:space="preserve">
          <source>The byte length of the new &lt;code&gt;ArrayBuffer&lt;/code&gt; object.</source>
          <target state="translated">新 &lt;code&gt;ArrayBuffer&lt;/code&gt; 对象的字节长度。</target>
        </trans-unit>
        <trans-unit id="c21c288ef2e0b85c532a0aaaba3bb8ac28da056c" translate="yes" xml:space="preserve">
          <source>The call to the &lt;code&gt;reduceRight&lt;/code&gt; callback would look something like this:</source>
          <target state="translated">对 &lt;code&gt;reduceRight&lt;/code&gt; 回调的调用看起来像这样：</target>
        </trans-unit>
        <trans-unit id="dfab73d51d567713a590136fee55b409dd6eb610" translate="yes" xml:space="preserve">
          <source>The call to the reduceRight &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; would look something like this:</source>
          <target state="translated">对reduceRight &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 看起来像这样：</target>
        </trans-unit>
        <trans-unit id="96f6077747036c2b9f4ce1ca2d356c8f847aea6d" translate="yes" xml:space="preserve">
          <source>The call to the reduceRight &lt;code&gt;callback&lt;/code&gt; would look something like this:</source>
          <target state="translated">对reduceRight &lt;code&gt;callback&lt;/code&gt; 的调用如下所示：</target>
        </trans-unit>
        <trans-unit id="f9ab507df8c93d8e01ffcd2054d6b12ace1f634a" translate="yes" xml:space="preserve">
          <source>The callback function this registry should use. If provided, this must be a function.</source>
          <target state="translated">该注册表应使用的回调函数。如果提供,则必须是一个函数。</target>
        </trans-unit>
        <trans-unit id="61dd799b0f0b49b745fa73d43d16c56e02fb34fc" translate="yes" xml:space="preserve">
          <source>The callback would be invoked four times, with the arguments and return values in each call being as follows:</source>
          <target state="translated">回调将被调用四次,每次调用的参数和返回值如下。</target>
        </trans-unit>
        <trans-unit id="529358e5ae65198672839644ebda30bb0834f61a" translate="yes" xml:space="preserve">
          <source>The capturing groups are numbered according to the order of left parentheses of capturing groups, starting from 1. The matched substring can be recalled from the resulting array's elements &lt;code&gt;[1], ..., [n]&lt;/code&gt; or from the predefined &lt;code&gt;RegExp&lt;/code&gt; object's properties &lt;code&gt;$1, ..., $9&lt;/code&gt;.</source>
          <target state="translated">捕获组按照捕获组左括号的顺序从1开始编号。可以从结果数组的元素 &lt;code&gt;[1], ..., [n]&lt;/code&gt; 或预定义的 &lt;code&gt;RegExp&lt;/code&gt; 对象的属性 &lt;code&gt;$1, ..., $9&lt;/code&gt; 调用匹配的子字符串。，...，$ 9。</target>
        </trans-unit>
        <trans-unit id="d7dfdaa9a05626c2e4e94877772b10e055057793" translate="yes" xml:space="preserve">
          <source>The characters to be searched for at the end of &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; 末尾要搜索的字符。</target>
        </trans-unit>
        <trans-unit id="eea4a7d34afcf6a20ca9f68e6a0423534999cad7" translate="yes" xml:space="preserve">
          <source>The characters to be searched for at the end of this string.</source>
          <target state="translated">该字符串末尾要搜索的字符。</target>
        </trans-unit>
        <trans-unit id="ea4040c6f18cef23c2d1fe587d1104e905e7f6ab" translate="yes" xml:space="preserve">
          <source>The characters to be searched for at the start of this string.</source>
          <target state="translated">在这个字符串的开头要搜索的字符。</target>
        </trans-unit>
        <trans-unit id="b47a75f9e191f52f785a5588c08b45fa6d1cf028" translate="yes" xml:space="preserve">
          <source>The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as &lt;a href=&quot;string/tolowercase&quot;&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">遵守当前语言环境时，字符串中的字符将转换为小写。对于大多数语言，这将返回与&lt;a href=&quot;string/tolowercase&quot;&gt; &lt;code&gt;toLowerCase()&lt;/code&gt; &lt;/a&gt;相同的结果。</target>
        </trans-unit>
        <trans-unit id="02a4044b5eff1ebaa85a95b61d51842f7688126c" translate="yes" xml:space="preserve">
          <source>The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as &lt;a href=&quot;tolowercase&quot;&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">遵守当前语言环境时，字符串中的字符将转换为小写。对于大多数语言，这将返回与&lt;a href=&quot;tolowercase&quot;&gt; &lt;code&gt;toLowerCase()&lt;/code&gt; &lt;/a&gt;相同的结果。</target>
        </trans-unit>
        <trans-unit id="4daba78aa07385bac2a4e581c1f5b76fe96e7b2c" translate="yes" xml:space="preserve">
          <source>The characters within a string are converted to lowercase while respecting the current locale.</source>
          <target state="translated">字符串中的字符将被转换为小写,同时尊重当前的locale。</target>
        </trans-unit>
        <trans-unit id="bb9149f43ab1f76f894c71b38c8bcdfb7b581734" translate="yes" xml:space="preserve">
          <source>The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as &lt;a href=&quot;string/touppercase&quot;&gt;&lt;code&gt;toUpperCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">遵守当前语言环境时，字符串中的字符将转换为大写。对于大多数语言，这将返回与&lt;a href=&quot;string/touppercase&quot;&gt; &lt;code&gt;toUpperCase()&lt;/code&gt; &lt;/a&gt;相同的结果。</target>
        </trans-unit>
        <trans-unit id="efa62672806348552a404536b413669fee7e627a" translate="yes" xml:space="preserve">
          <source>The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as &lt;a href=&quot;touppercase&quot;&gt;&lt;code&gt;toUpperCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">遵守当前语言环境时，字符串中的字符将转换为大写。对于大多数语言，这将返回与&lt;a href=&quot;touppercase&quot;&gt; &lt;code&gt;toUpperCase()&lt;/code&gt; &lt;/a&gt;相同的结果。</target>
        </trans-unit>
        <trans-unit id="d3a9b3fe31d44429f68aa4abf79c83a3e60a997b" translate="yes" xml:space="preserve">
          <source>The characters within a string are converted to uppercase while respecting the current locale.</source>
          <target state="translated">字符串中的字符被转换为大写,同时尊重当前的语言环境。</target>
        </trans-unit>
        <trans-unit id="0427b1e20dba4046e5ffec03d2d0954bc7d3df70" translate="yes" xml:space="preserve">
          <source>The class body of a class declaration is executed in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;. The &lt;code&gt;constructor&lt;/code&gt; method is optional.</source>
          <target state="translated">类声明的类主体以&lt;a href=&quot;../strict_mode&quot;&gt;严格模式&lt;/a&gt;执行。该 &lt;code&gt;constructor&lt;/code&gt; 方法是可选的。</target>
        </trans-unit>
        <trans-unit id="4c1ed43d7a20e3b448e88650183e95808a68a1b7" translate="yes" xml:space="preserve">
          <source>The class body of a class declaration is executed in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;. The constructor property is optional.</source>
          <target state="translated">类声明的类主体以&lt;a href=&quot;../strict_mode&quot;&gt;严格模式&lt;/a&gt;执行。构造函数属性是可选的。</target>
        </trans-unit>
        <trans-unit id="04bd176ecf0b4c0d2e361fed92486d9bb741b211" translate="yes" xml:space="preserve">
          <source>The code above may seem inefficiently slow because of the triple nested function, but let's analyse the benefits of the above efficient method:</source>
          <target state="translated">上面的代码可能因为三层嵌套函数而显得效率很慢,但我们来分析一下上述高效方法的好处。</target>
        </trans-unit>
        <trans-unit id="7d153594cf7d720f098751dcce41c33e4bdfab27" translate="yes" xml:space="preserve">
          <source>The code above may seem inefficiently slow because of the triple nested function, but let's analyze the benefits of the above efficient method:</source>
          <target state="translated">上面的代码可能因为三层嵌套函数而显得效率很慢,但我们来分析一下上面高效方法的好处。</target>
        </trans-unit>
        <trans-unit id="27b06f1e2d79ed3ea44e8951423a811c3379ede8" translate="yes" xml:space="preserve">
          <source>The code above serves as an example for substring operations. If you need to replace substrings, most of the time you will want to use &lt;a href=&quot;replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">上面的代码用作子字符串操作的示例。如果需要替换子字符串，大多数时候您将需要使用&lt;a href=&quot;replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="29efbb3fdcfaf150956a6e65df3297511df904b2" translate="yes" xml:space="preserve">
          <source>The code below shows how to import from a secondary module to assist in processing an AJAX JSON request.</source>
          <target state="translated">下面的代码显示了如何从二级模块导入,以协助处理AJAX JSON请求。</target>
        </trans-unit>
        <trans-unit id="e11f2707655ac5e8f02c2112c63f9540f1a12903" translate="yes" xml:space="preserve">
          <source>The code does not use &lt;code&gt;eval()&lt;/code&gt;, making it orders of magnitude faster than otherwise.</source>
          <target state="translated">该代码不使用 &lt;code&gt;eval()&lt;/code&gt; ，使其比其他情况快几个数量级。</target>
        </trans-unit>
        <trans-unit id="77babd566d6e7c423057c0cbb7be3bc8ea0af041" translate="yes" xml:space="preserve">
          <source>The code point for &lt;code&gt;&quot;n&quot;&lt;/code&gt; (U+006E) followed by the code point for the combining tilde (U+0303).</source>
          <target state="translated">&lt;code&gt;&quot;n&quot;&lt;/code&gt; 的代码点（U + 006E），后跟组合波浪号（U + 0303）的代码点。</target>
        </trans-unit>
        <trans-unit id="f84b0cd589932cf33c346a00c77f36d47f4be22a" translate="yes" xml:space="preserve">
          <source>The comma operator allows multiple expressions to be evaluated in a single statement and returns the result of the last expression.</source>
          <target state="translated">逗号操作符允许在一条语句中评估多个表达式,并返回最后一个表达式的结果。</target>
        </trans-unit>
        <trans-unit id="1250480c705913bbdc22c071498ae62f28af5d1a" translate="yes" xml:space="preserve">
          <source>The comma operator is fully different from the comma within arrays, objects, and function arguments and parameters.</source>
          <target state="translated">逗号操作符与数组、对象、函数参数和参数内的逗号完全不同。</target>
        </trans-unit>
        <trans-unit id="7fab18439a7793e4c9d265e0a1eb2b9a108df7ab" translate="yes" xml:space="preserve">
          <source>The completion value of evaluating the given code. If the completion value is empty, &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">评估给定代码的完成值。如果完成值为空，则返回&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ed9f5c4fd781b14194aff34ea8d3f8fbfa23a0d9" translate="yes" xml:space="preserve">
          <source>The concept of compose function is simple it combines n functions. It&amp;rsquo;s a flowing right-to-left, calling each function with the output of the last one.</source>
          <target state="translated">组合函数的概念很简单，它组合了n个函数。它是从右到左流动的，用最后一个的输出调用每个函数。</target>
        </trans-unit>
        <trans-unit id="0621346efbf3c869cb91624fd5861f953bb9a30a" translate="yes" xml:space="preserve">
          <source>The conditional operator returns one of two values based on the logical value of the condition.</source>
          <target state="translated">条件操作符根据条件的逻辑值返回两个值中的一个。</target>
        </trans-unit>
        <trans-unit id="fba8e0ecfce285b4bc6ff7ab720824ece9546a9f" translate="yes" xml:space="preserve">
          <source>The console will warn &quot;unreachable code after return statement&quot;.</source>
          <target state="translated">控制台会警告 &quot;返回语句后的不可达代码&quot;。</target>
        </trans-unit>
        <trans-unit id="6e123d397cc379ed5365e7a4deebd0d4e9c23f0d" translate="yes" xml:space="preserve">
          <source>The constant's name, which can be any legal &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/identifier&quot;&gt;identifier&lt;/a&gt;.</source>
          <target state="translated">常量的名称，可以是任何合法的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/identifier&quot;&gt;标识符&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5246174ff64cef2f713e1d5ea251a47b175d8301" translate="yes" xml:space="preserve">
          <source>The constant's value. This can be any legal &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions&quot;&gt;expression&lt;/a&gt;, including a function expression.</source>
          <target state="translated">常数的值。这可以是任何合法&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions&quot;&gt;表达式&lt;/a&gt;，包括函数表达式。</target>
        </trans-unit>
        <trans-unit id="0da19f405b29faa24595e62c88e9d6fc4e1d0aa7" translate="yes" xml:space="preserve">
          <source>The constant's value; this can be any legal &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions&quot;&gt;expression&lt;/a&gt;, including a function expression.</source>
          <target state="translated">常数的值；这可以是任何合法&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions&quot;&gt;表达式&lt;/a&gt;，包括函数表达式。</target>
        </trans-unit>
        <trans-unit id="9f383a65214d5dd6b3fdfafe6bb11e51d656fec8" translate="yes" xml:space="preserve">
          <source>The constructor also takes an optional configuration object argument, which can contain any of several extension types. For example, set the &lt;code&gt;&lt;a href=&quot;hourcycle&quot;&gt;hourCycle&lt;/a&gt;&lt;/code&gt; property of the configuration object to your desired hour cycle type, and then pass it into the constructor:</source>
          <target state="translated">构造函数还接受一个可选的配置对象参数，该参数可以包含几种扩展类型中的任何一种。例如，将配置对象的 &lt;code&gt;&lt;a href=&quot;hourcycle&quot;&gt;hourCycle&lt;/a&gt;&lt;/code&gt; 属性设置为所需的小时周期类型，然后将其传递给构造函数：</target>
        </trans-unit>
        <trans-unit id="c557b8e7344e31287a1538b0b5b43b926000d555" translate="yes" xml:space="preserve">
          <source>The constructor also takes an optional configuration object argument, which can contain any of several extension types. For example, set the &lt;code&gt;&lt;a href=&quot;locale/hourcycle&quot;&gt;hourCycle&lt;/a&gt;&lt;/code&gt; property of the configuration object to your desired hour cycle type, and then pass it into the constructor:</source>
          <target state="translated">构造函数还接受一个可选的配置对象参数，该参数可以包含几种扩展类型中的任何一种。例如，将配置对象的 &lt;code&gt;&lt;a href=&quot;locale/hourcycle&quot;&gt;hourCycle&lt;/a&gt;&lt;/code&gt; 属性设置为所需的小时周期类型，然后将其传递给构造函数：</target>
        </trans-unit>
        <trans-unit id="83547aca79f778b81fe2242fe412640398fb2951" translate="yes" xml:space="preserve">
          <source>The constructor function &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;&lt;/code&gt; is called with the specified arguments, and with &lt;code&gt;&lt;a href=&quot;this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; bound to the newly created object. &lt;code&gt;new &lt;em&gt;Foo&lt;/em&gt;&lt;/code&gt; is equivalent to &lt;code&gt;new &lt;em&gt;Foo&lt;/em&gt;()&lt;/code&gt;, i.e. if no argument list is specified, &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;&lt;/code&gt; is called without arguments.</source>
          <target state="translated">构造函数 &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;&lt;/code&gt; 被称为用指定的参数，以及与 &lt;code&gt;&lt;a href=&quot;this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; 绑定到新创建的对象。 &lt;code&gt;new &lt;em&gt;Foo&lt;/em&gt;&lt;/code&gt; 等效于 &lt;code&gt;new &lt;em&gt;Foo&lt;/em&gt;()&lt;/code&gt; ，即，如果未指定参数列表，则调用 &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;&lt;/code&gt; 时不带参数。</target>
        </trans-unit>
        <trans-unit id="fb6c865a9918ebbc467c3613c73d166c77549f56" translate="yes" xml:space="preserve">
          <source>The constructor function &lt;em&gt;&lt;code&gt;Foo&lt;/code&gt;&lt;/em&gt; is called with the specified arguments, and with &lt;code&gt;&lt;a href=&quot;this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; bound to the newly created object. &lt;code&gt;new &lt;em&gt;Foo&lt;/em&gt;&lt;/code&gt; is equivalent to &lt;code&gt;new &lt;/code&gt;&lt;em&gt;&lt;code&gt;Foo&lt;/code&gt;&lt;/em&gt;&lt;code&gt;()&lt;/code&gt;, i.e. if no argument list is specified, &lt;em&gt;&lt;code&gt;Foo&lt;/code&gt;&lt;/em&gt; is called without arguments.</source>
          <target state="translated">构造函数&lt;em&gt; &lt;code&gt;Foo&lt;/code&gt; &lt;/em&gt;被称为用指定的参数，以及与 &lt;code&gt;&lt;a href=&quot;this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; 绑定到新创建的对象。 &lt;code&gt;new &lt;em&gt;Foo&lt;/em&gt;&lt;/code&gt; 等同于 &lt;code&gt;new &lt;/code&gt; &lt;em&gt; &lt;code&gt;Foo&lt;/code&gt; &lt;/em&gt; &lt;code&gt;()&lt;/code&gt; ，即，如果未指定参数列表，则调用&lt;em&gt; &lt;code&gt;Foo&lt;/code&gt; &lt;/em&gt;而无需参数。</target>
        </trans-unit>
        <trans-unit id="99a33382d6cbb2aba7d55f16f795e9406be2db23" translate="yes" xml:space="preserve">
          <source>The constructor function is used to create derived objects.</source>
          <target state="translated">构造函数用于创建派生对象。</target>
        </trans-unit>
        <trans-unit id="8a169aedbb3ba1ad7d6dfd37dd0fae85249dc777" translate="yes" xml:space="preserve">
          <source>The constructor function that is used to create derived objects.</source>
          <target state="translated">用于创建派生对象的构造函数。</target>
        </trans-unit>
        <trans-unit id="a0823006c92a5341fb65cd323ee457691765bce0" translate="yes" xml:space="preserve">
          <source>The constructor function used to create derived objects.</source>
          <target state="translated">用于创建派生对象的构造函数。</target>
        </trans-unit>
        <trans-unit id="6f1842951147ecd29c0a9f49879fb915edc6addf" translate="yes" xml:space="preserve">
          <source>The constructor of the regular expression object&amp;mdash;for example, &lt;code&gt;new RegExp('ab+c')&lt;/code&gt;&amp;mdash;results in runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.</source>
          <target state="translated">正则表达式对象的构造函数（例如， &lt;code&gt;new RegExp('ab+c')&lt;/code&gt; 导致对正则表达式进行运行时编译。当您知道正则表达式模式将要更改时，或者您不知道该模式并从其他来源（例如用户输入）获取该模式时，请使用构造函数。</target>
        </trans-unit>
        <trans-unit id="0613ad00b70286ab1934d869ea67a250ca17b390" translate="yes" xml:space="preserve">
          <source>The constructor of the regular expression object&amp;mdash;for example, &lt;code&gt;new RegExp('ab+c')&lt;/code&gt;&amp;mdash;results in runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and obtain it from another source, such as user input.</source>
          <target state="translated">正则表达式对象的构造函数（例如， &lt;code&gt;new RegExp('ab+c')&lt;/code&gt; 导致对正则表达式进行运行时编译。当您知道正则表达式模式将要更改时，或者您不知道该模式并无法从其他来源（例如用户输入）获取该模式时，请使用构造函数。</target>
        </trans-unit>
        <trans-unit id="982b985b74049b6033e81bffd9464c5eb31a7a91" translate="yes" xml:space="preserve">
          <source>The constructor of the regular expression object, for example, &lt;code&gt;new RegExp('ab+c')&lt;/code&gt;, provides runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.</source>
          <target state="translated">正则表达式对象的构造函数，例如 &lt;code&gt;new RegExp('ab+c')&lt;/code&gt; ，提供了正则表达式的运行时编译。当您知道正则表达式模式将要更改，或者您不知道该模式并从其他来源（例如用户输入）获取该模式时，请使用构造函数。</target>
        </trans-unit>
        <trans-unit id="a07e8f40135c74bee08f43368c3a95047965ec6f" translate="yes" xml:space="preserve">
          <source>The constructor that was originally called, &lt;code&gt;&lt;var&gt;p&lt;/var&gt;&lt;/code&gt; above.</source>
          <target state="translated">最初被称为 &lt;code&gt;&lt;var&gt;p&lt;/var&gt;&lt;/code&gt; 的构造函数。</target>
        </trans-unit>
        <trans-unit id="416fbf4bb9cd00c0ca84cc3b37fc7b52c1bbf60f" translate="yes" xml:space="preserve">
          <source>The constructor that was originally called, &lt;code&gt;p&lt;/code&gt; above.</source>
          <target state="translated">最初称为 &lt;code&gt;p&lt;/code&gt; 的构造函数。</target>
        </trans-unit>
        <trans-unit id="93c6cb8f42276b96072df277b561d67f9ecc48f6" translate="yes" xml:space="preserve">
          <source>The constructor whose prototype should be used. See also the &lt;a href=&quot;../../operators/new.target&quot;&gt;&lt;code&gt;new.target&lt;/code&gt;&lt;/a&gt; operator. If &lt;code&gt;&lt;var&gt;newTarget&lt;/var&gt;&lt;/code&gt; is not present, its value defaults to &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">应该使用其原型的构造函数。另请参见&lt;a href=&quot;../../operators/new.target&quot;&gt; &lt;code&gt;new.target&lt;/code&gt; &lt;/a&gt;运算符。如果不存在 &lt;code&gt;&lt;var&gt;newTarget&lt;/var&gt;&lt;/code&gt; ，则其值默认为 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5f0c8a18e529cda55e6b202394037a0f7a759263" translate="yes" xml:space="preserve">
          <source>The constructor whose prototype should be used. See also the &lt;code&gt;&lt;a href=&quot;../../operators/new.target&quot;&gt;new.target&lt;/a&gt;&lt;/code&gt; operator. If &lt;code&gt;newTarget&lt;/code&gt; is not present, it is &lt;code&gt;target&lt;/code&gt;.</source>
          <target state="translated">应该使用其原型的构造函数。另请参见 &lt;code&gt;&lt;a href=&quot;../../operators/new.target&quot;&gt;new.target&lt;/a&gt;&lt;/code&gt; 运算符。如果 &lt;code&gt;newTarget&lt;/code&gt; 不存在，则为 &lt;code&gt;target&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ff09419e5e10e3cf52a3dbe62e4abf0918d5d1f" translate="yes" xml:space="preserve">
          <source>The corollary is that you need not do anything special to create a bound function to be called plainly, even if you would rather require the bound function to only be called using &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">结果是，即使您只想使用&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;来调用绑定函数，也不需要做任何特殊的事情就可以创建一个绑定函数来简单地调用它。</target>
        </trans-unit>
        <trans-unit id="013d2f56a045b9e0a7a2b73d84c720cef68dd7ca" translate="yes" xml:space="preserve">
          <source>The correct function name is &lt;code&gt;getElementByI&lt;strong&gt;d&lt;/strong&gt;&lt;/code&gt;:</source>
          <target state="translated">正确的函数名称是 &lt;code&gt;getElementByI&lt;strong&gt;d&lt;/strong&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="23fb87e0180430148ebbc4575f3db9ebc6b874bb" translate="yes" xml:space="preserve">
          <source>The correct import usage (&lt;code&gt;App.js&lt;/code&gt;):</source>
          <target state="translated">正确的导入用法（ &lt;code&gt;App.js&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="2c4b0c7f032e4cefae8338cbd162866b17419003" translate="yes" xml:space="preserve">
          <source>The correct usage for storing data in the Map is through the &lt;code&gt;set(&lt;var&gt;key&lt;/var&gt;, &lt;var&gt;value&lt;/var&gt;)&lt;/code&gt; method.</source>
          <target state="translated">通过 &lt;code&gt;set(&lt;var&gt;key&lt;/var&gt;, &lt;var&gt;value&lt;/var&gt;)&lt;/code&gt; 方法在Map中存储数据的正确用法。</target>
        </trans-unit>
        <trans-unit id="8f8f0e6875ef581c720496aa923969901df56b65" translate="yes" xml:space="preserve">
          <source>The correct way of doing this is to rename the export:</source>
          <target state="translated">正确的做法是重命名导出。</target>
        </trans-unit>
        <trans-unit id="7de3945364d45317b571a832343df34f694f7d73" translate="yes" xml:space="preserve">
          <source>The cosine of the given number.</source>
          <target state="translated">给定数字的余弦。</target>
        </trans-unit>
        <trans-unit id="1c930f93fb8868cc6815569cb4309a14122dc34d" translate="yes" xml:space="preserve">
          <source>The cube root of the given number.</source>
          <target state="translated">给定数字的立方根。</target>
        </trans-unit>
        <trans-unit id="c114c8f5d2e6f7f010683b95d33e20f9c1b64386" translate="yes" xml:space="preserve">
          <source>The curly brackets look correct at a first glance, but this code snippet is missing a &lt;code&gt;{&lt;/code&gt; after the first &lt;code&gt;if&lt;/code&gt; statement. Correct would be:</source>
          <target state="translated">乍看之下，大括号看起来正确，但是此代码段在第一个 &lt;code&gt;if&lt;/code&gt; 语句之后缺少 &lt;code&gt;{&lt;/code&gt; 。正确的是：</target>
        </trans-unit>
        <trans-unit id="5f5245cf8dfef36fe67c21f6ce9d68b1136ece88" translate="yes" xml:space="preserve">
          <source>The currency string, such as the symbols &quot;$&quot; and &quot;&amp;euro;&quot; or the name &quot;Dollar&quot;, &quot;Euro&quot; depending on how &lt;code&gt;currencyDisplay&lt;/code&gt; is specified.</source>
          <target state="translated">货币字符串，例如符号&amp;ldquo; $&amp;rdquo;和&amp;ldquo;&amp;euro;&amp;rdquo;或名称&amp;ldquo; Dollar&amp;rdquo;，&amp;ldquo; Euro&amp;rdquo;，具体取决于如何指定 &lt;code&gt;currencyDisplay&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5031ebd68a770403d01615e8330b1a0b635a85a2" translate="yes" xml:space="preserve">
          <source>The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as &quot;&lt;code&gt;USD&lt;/code&gt;&quot; for the US dollar, &quot;&lt;code&gt;EUR&lt;/code&gt;&quot; for the euro, or &quot;&lt;code&gt;CNY&lt;/code&gt;&quot; for the Chinese RMB &amp;mdash; see the &lt;a href=&quot;http://www.currency-iso.org/en/home/tables/table-a1.html&quot;&gt;Current currency &amp;amp; funds code list&lt;/a&gt;. There is no default value; if the &lt;code&gt;style&lt;/code&gt; is &quot;&lt;code&gt;currency&lt;/code&gt;&quot;, the &lt;code&gt;currency&lt;/code&gt; property must be provided.</source>
          <target state="translated">货币格式中使用的货币。可能的值是ISO 4217货币代码，例如&amp;ldquo; &lt;code&gt;USD&lt;/code&gt; &amp;rdquo;表示美元，&amp;ldquo; &lt;code&gt;EUR&lt;/code&gt; &amp;rdquo;表示欧元或&amp;ldquo; &lt;code&gt;CNY&lt;/code&gt; &amp;rdquo;表示人民币-请参阅&amp;ldquo;&lt;a href=&quot;http://www.currency-iso.org/en/home/tables/table-a1.html&quot;&gt;当前货币和资金代码&amp;rdquo;列表&lt;/a&gt;。没有默认值; 如果 &lt;code&gt;style&lt;/code&gt; 为&amp;ldquo; &lt;code&gt;currency&lt;/code&gt; &amp;rdquo;，则必须提供 &lt;code&gt;currency&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="b19ba0bd00ac262399d753d908b7d49bd67d4d73" translate="yes" xml:space="preserve">
          <source>The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as &lt;code&gt;&quot;USD&quot;&lt;/code&gt; for the US dollar, &lt;code&gt;&quot;EUR&quot;&lt;/code&gt; for the euro, or &lt;code&gt;&quot;CNY&quot;&lt;/code&gt; for the Chinese RMB &amp;mdash; see the &lt;a href=&quot;http://www.currency-iso.org/en/home/tables/table-a1.html&quot;&gt;Current currency &amp;amp; funds code list&lt;/a&gt;. There is no default value; if the &lt;code&gt;style&lt;/code&gt; is &lt;code&gt;&quot;currency&quot;&lt;/code&gt;, the &lt;code&gt;currency&lt;/code&gt; property must be provided.</source>
          <target state="translated">货币格式中使用的货币。可能的值是ISO 4217货币代码，例如 &lt;code&gt;&quot;USD&quot;&lt;/code&gt; 表示美元， &lt;code&gt;&quot;EUR&quot;&lt;/code&gt; 表示欧元或 &lt;code&gt;&quot;CNY&quot;&lt;/code&gt; 表示人民币-请参阅&amp;ldquo; &lt;a href=&quot;http://www.currency-iso.org/en/home/tables/table-a1.html&quot;&gt;当前货币和资金代码&amp;rdquo;列表&lt;/a&gt;。没有默认值; 如果 &lt;code&gt;style&lt;/code&gt; 为 &lt;code&gt;&quot;currency&quot;&lt;/code&gt; ，则必须提供 &lt;code&gt;currency&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="5dc9e50d81823798a643f009d726e60aa602bf91" translate="yes" xml:space="preserve">
          <source>The current day of month will have an impact on the behaviour of this method. Conceptually it will add the number of days given by the current day of the month to the 1st day of the new month specified as the parameter, to return the new date. For example, if the current value is 31st August 2016, calling setMonth with a value of 1 will return 2nd March 2016. This is because in 2016 February had 29 days.</source>
          <target state="translated">当前月份的天数会对这个方法的行为产生影响,概念上,它将把当前月份的天数加到作为参数的新月份的第1天,以返回新的日期。从概念上讲,它将把当前月日给出的天数加到作为参数指定的新月份的第1天,以返回新的日期。例如,如果当前值是2016年8月31日,那么调用值为1的setMonth将返回2016年3月2日。这是因为在2016年2月有29天。</target>
        </trans-unit>
        <trans-unit id="07bc1f220d7417fecbaf41181d3f1e75442bc0de" translate="yes" xml:space="preserve">
          <source>The current element being processed in the &lt;code&gt;Set&lt;/code&gt;. As there are no keys in &lt;code&gt;Set&lt;/code&gt;, the value is passed for both arguments.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 中正在处理的当前元素。由于 &lt;code&gt;Set&lt;/code&gt; 中没有键，因此两个参数都传递了值。</target>
        </trans-unit>
        <trans-unit id="70d81a6aba37ff18bd5d8c2ff73ec50a431f3bde" translate="yes" xml:space="preserve">
          <source>The current element being processed in the array.</source>
          <target state="translated">数组中当前正在处理的元素。</target>
        </trans-unit>
        <trans-unit id="524f1003256858d5c9cdfa90bf0c2de1c7abe3e7" translate="yes" xml:space="preserve">
          <source>The current element being processed in the typed array.</source>
          <target state="translated">类型数组中当前正在处理的元素。</target>
        </trans-unit>
        <trans-unit id="5d4c2ee3a20a466583eb13b2f1a146123c0d3ed2" translate="yes" xml:space="preserve">
          <source>The current element in the array.</source>
          <target state="translated">数组中的当前元素。</target>
        </trans-unit>
        <trans-unit id="c60f4c692eb4dfbdfed4ca0839000a6e47bd0087" translate="yes" xml:space="preserve">
          <source>The data type &lt;strong&gt;symbol&lt;/strong&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive data type&lt;/a&gt;.</source>
          <target state="translated">数据类型&lt;strong&gt;符号&lt;/strong&gt;是&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;原始数据类型&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e7072b9ca0edc6984be99368bfce251184b17f7c" translate="yes" xml:space="preserve">
          <source>The data type &lt;strong&gt;symbol&lt;/strong&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive data type&lt;/a&gt;. The &lt;code&gt;Symbol()&lt;/code&gt; function returns a value of type &lt;strong&gt;symbol&lt;/strong&gt;, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax &quot;&lt;code&gt;new Symbol()&lt;/code&gt;&quot;.</source>
          <target state="translated">数据类型&lt;strong&gt;符号&lt;/strong&gt;是&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;原始数据类型&lt;/a&gt;。该 &lt;code&gt;Symbol()&lt;/code&gt; 函数返回类型的值&lt;strong&gt;符号&lt;/strong&gt;，具有露出的内置对象，具有露出全局符号注册表静态方法几名成员静态属性，类似于内置对象类，但不完全作为构造因为它不支持语法&amp;ldquo; &lt;code&gt;new Symbol()&lt;/code&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="aa4fccd524441cf00caefa27a863039b3cf91544" translate="yes" xml:space="preserve">
          <source>The date and time formats can be customized using the &lt;code&gt;options&lt;/code&gt; argument:</source>
          <target state="translated">可以使用 &lt;code&gt;options&lt;/code&gt; 参数自定义日期和时间格式：</target>
        </trans-unit>
        <trans-unit id="b7d6deeb23ea7e4f2f4a7af7e5707680addeafeb" translate="yes" xml:space="preserve">
          <source>The date formatting style to use when calling &lt;code&gt;format()&lt;/code&gt;. Possible values include:</source>
          <target state="translated">调用 &lt;code&gt;format()&lt;/code&gt; 时要使用的日期格式样式。可能的值包括：</target>
        </trans-unit>
        <trans-unit id="666a0d44dc5f74d5cba4609d254e995f1bf62311" translate="yes" xml:space="preserve">
          <source>The date time string may be in a simplified &lt;a href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO 8601&lt;/a&gt; format. For example, &lt;code&gt;&quot;2011-10-10&quot;&lt;/code&gt; (just date) or &lt;code&gt;&quot;2011-10-10T14:48:00&quot;&lt;/code&gt; (date and time) can be passed and parsed. Where the string is ISO 8601 date only, the UTC time zone is used to interpret arguments. If the string is date and time in &lt;a href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO 8601&lt;/a&gt; format, it will be treated as local.</source>
          <target state="translated">日期时间字符串可以采用简化的&lt;a href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO 8601&lt;/a&gt;格式。例如，可以传递和解析 &lt;code&gt;&quot;2011-10-10&quot;&lt;/code&gt; （日期）或 &lt;code&gt;&quot;2011-10-10T14:48:00&quot;&lt;/code&gt; （日期和时间）。如果字符串仅是ISO 8601日期，则UTC时区用于解释参数。如果字符串是&lt;a href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO 8601&lt;/a&gt;格式的日期和时间，则将其视为本地字符串。</target>
        </trans-unit>
        <trans-unit id="d130d221e393af90c0ed6eeecc502bde90336a08" translate="yes" xml:space="preserve">
          <source>The date to format.</source>
          <target state="translated">要格式化的日期。</target>
        </trans-unit>
        <trans-unit id="dfa58d4d180b7df388a433a28b25b9a135add3f3" translate="yes" xml:space="preserve">
          <source>The decimal exponential literal is specified by the following format: &lt;code&gt;beN&lt;/code&gt;; where &lt;code&gt;b&lt;/code&gt; is a base number (integer or floating), followed by &lt;code&gt;e&lt;/code&gt; char (which serves as separator or &lt;em&gt;exponent indicator&lt;/em&gt;) and&lt;code&gt;N&lt;/code&gt;, which is &lt;em&gt;exponent&lt;/em&gt; or &lt;em&gt;power&lt;/em&gt; number &amp;ndash; a signed integer (as per 2019 ECMA-262 specs):</source>
          <target state="translated">十进制指数文字由以下格式指定： &lt;code&gt;beN&lt;/code&gt; ; 其中 &lt;code&gt;b&lt;/code&gt; 是基数（整数或浮点数），后跟 &lt;code&gt;e&lt;/code&gt; char（用作分隔符或&lt;em&gt;指数指示符&lt;/em&gt;）和 &lt;code&gt;N&lt;/code&gt; （即&lt;em&gt;指数&lt;/em&gt;或&lt;em&gt;幂&lt;/em&gt;数）&amp;ndash;一个有符号整数（根据2019 ECMA-262规范）：</target>
        </trans-unit>
        <trans-unit id="f108ef11ec4436baa6c0f00ae9e1b84307280093" translate="yes" xml:space="preserve">
          <source>The decimal separator string (&quot;.&quot;).</source>
          <target state="translated">小数点分隔符串(&quot;.&quot;)。</target>
        </trans-unit>
        <trans-unit id="4c8dd0c5197136a93666dbb1684087ae62934be1" translate="yes" xml:space="preserve">
          <source>The decrement operator (&lt;code&gt;--&lt;/code&gt;) decrements (subtracts one from) its operand and returns a value.</source>
          <target state="translated">减数运算符（ &lt;code&gt;--&lt;/code&gt; ）对其操作数进行减法运算（减去1）并返回值。</target>
        </trans-unit>
        <trans-unit id="910c3fbe938cfd9b387a32e9bc34f0a45b870d47" translate="yes" xml:space="preserve">
          <source>The decrement operator decrements (subtracts one from) its operand and returns a value.</source>
          <target state="translated">减法运算符对操作数进行递减(减一)并返回一个值。</target>
        </trans-unit>
        <trans-unit id="d3a3823030018d8dfc9d13ac5d5024b596e690f5" translate="yes" xml:space="preserve">
          <source>The default Unicode collation element table order</source>
          <target state="translated">默认的Unicode元素表顺序</target>
        </trans-unit>
        <trans-unit id="759bfc7bc1feeabfc407984ea40226d336b9acd4" translate="yes" xml:space="preserve">
          <source>The default argument is evaluated at &lt;em&gt;call time&lt;/em&gt;. So, unlike (for example) Python, a new object is created each time the function is called.</source>
          <target state="translated">默认参数在&lt;em&gt;调用时&lt;/em&gt;评估。因此，与（例如）Python不同，每次调用函数时都会创建一个新对象。</target>
        </trans-unit>
        <trans-unit id="490855b400d057b93a21637883df08ab89c24f3f" translate="yes" xml:space="preserve">
          <source>The default argument is evaluated at call time, so unlike e.g. Python, a new object is created each time the function is called.</source>
          <target state="translated">默认参数在调用时被评估,所以与Python等不同,每次调用函数时都会创建一个新对象。</target>
        </trans-unit>
        <trans-unit id="957b857fe9032487dca6277c4f80f6900d49b5d3" translate="yes" xml:space="preserve">
          <source>The default array properties that are excluded from &lt;code&gt;with&lt;/code&gt; bindings are:</source>
          <target state="translated">被排除的默认数组属性 &lt;code&gt;with&lt;/code&gt; 绑定是：</target>
        </trans-unit>
        <trans-unit id="60352eea3410e84a3191b72431afaa8b6d3183fe" translate="yes" xml:space="preserve">
          <source>The default array properties that are excluded from &lt;code&gt;with&lt;/code&gt; bindings are: copyWithin, entries, fill, find, findIndex, includes, keys, and values.</source>
          <target state="translated">被排除的默认数组属性 &lt;code&gt;with&lt;/code&gt; 绑定是：copyWithin，条目，填充，查找，findIndex，包括，键和值。</target>
        </trans-unit>
        <trans-unit id="fc7be41d69f72f251344d3a32f7d3500e5b19a26" translate="yes" xml:space="preserve">
          <source>The default function just concatenates the parts into a single string. If there is an expression preceding the template literal (&lt;code&gt;&lt;var&gt;tag&lt;/var&gt;&lt;/code&gt; here), this is called a</source>
          <target state="translated">默认功能只是将各个部分串联为一个字符串。如果模板文字之前有一个表达式（此处为 &lt;code&gt;&lt;var&gt;tag&lt;/var&gt;&lt;/code&gt; ），则称为</target>
        </trans-unit>
        <trans-unit id="5d2e5c202585ddc67e01c8a15ad6c14853b1024b" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;&quot;variant&quot;&lt;/code&gt; for usage &lt;code&gt;&quot;sort&quot;&lt;/code&gt;; it's locale dependent for usage &lt;code&gt;&quot;search&quot;&lt;/code&gt;.</source>
          <target state="translated">用法 &lt;code&gt;&quot;sort&quot;&lt;/code&gt; 的默认值为 &lt;code&gt;&quot;variant&quot;&lt;/code&gt; &amp;rdquo;；它取决于使用 &lt;code&gt;&quot;search&quot;&lt;/code&gt; 的语言环境。</target>
        </trans-unit>
        <trans-unit id="575ea9e4c460d8bcd17e3b3e10695e0d5c392b70" translate="yes" xml:space="preserve">
          <source>The default line ending varies depending on the platform (Unix, Windows, etc.). The line splitting provided in this example works on all platforms.</source>
          <target state="translated">默认的行结束取决于平台(Unix、Windows等)。本例中提供的分行方式适用于所有平台。</target>
        </trans-unit>
        <trans-unit id="8079d1e1b0ab48a93aa4b5699d42a3cb6e1ff842" translate="yes" xml:space="preserve">
          <source>The default value for each date-time component property is &lt;a href=&quot;../../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, but if all component properties are &lt;a href=&quot;../../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt; are assumed to be &quot;&lt;code&gt;numeric&lt;/code&gt;&quot;.</source>
          <target state="translated">每个日期时间组件属性的默认值都是&lt;a href=&quot;../../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;，但是如果所有组件属性都是&lt;a href=&quot;../../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;，则将 &lt;code&gt;year&lt;/code&gt; ， &lt;code&gt;month&lt;/code&gt; 和 &lt;code&gt;day&lt;/code&gt; 假定为&amp;ldquo; &lt;code&gt;numeric&lt;/code&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="51d5bc9828c9f3e697bdef77251371c861406400" translate="yes" xml:space="preserve">
          <source>The default value for each date-time component property is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, but if the &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt; properties are all &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, and &lt;code&gt;second&lt;/code&gt; are assumed to be &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;.</source>
          <target state="translated">每个date-time组件属性的默认值都是&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;，但是如果 &lt;code&gt;hour&lt;/code&gt; ， &lt;code&gt;minute&lt;/code&gt; 和 &lt;code&gt;second&lt;/code&gt; 属性都&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;，则将 &lt;code&gt;hour&lt;/code&gt; ， &lt;code&gt;minute&lt;/code&gt; 和 &lt;code&gt;second&lt;/code&gt; 假定为 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4ddf17b02e4292879e3db354784c90cfc09a8e02" translate="yes" xml:space="preserve">
          <source>The default value for each date-time component property is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, but if the &lt;code&gt;weekday&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt; properties are all &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt; are assumed to be &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;.</source>
          <target state="translated">每个日期时间组件属性的默认值都是&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;，但是如果 &lt;code&gt;weekday&lt;/code&gt; ， &lt;code&gt;year&lt;/code&gt; ， &lt;code&gt;month&lt;/code&gt; ， &lt;code&gt;day&lt;/code&gt; 属性都是&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;，则将 &lt;code&gt;year&lt;/code&gt; ， &lt;code&gt;month&lt;/code&gt; 和 &lt;code&gt;day&lt;/code&gt; 假定为 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="50ec5acd3f905b8f0cc746b02ed2067efd52b285" translate="yes" xml:space="preserve">
          <source>The default value for each date-time component property is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, but if the &lt;code&gt;weekday&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt; properties are all &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, and &lt;code&gt;second&lt;/code&gt; are assumed to be &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;.</source>
          <target state="translated">每个date-time组件属性的默认值都是&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;，但是如果 &lt;code&gt;weekday&lt;/code&gt; ， &lt;code&gt;year&lt;/code&gt; ， &lt;code&gt;month&lt;/code&gt; ， &lt;code&gt;day&lt;/code&gt; ，day， &lt;code&gt;hour&lt;/code&gt; ， &lt;code&gt;minute&lt;/code&gt; s和 &lt;code&gt;second&lt;/code&gt; 属性都&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;，则将 &lt;code&gt;year&lt;/code&gt; ， &lt;code&gt;month&lt;/code&gt; ， &lt;code&gt;day&lt;/code&gt; ， &lt;code&gt;hour&lt;/code&gt; ， &lt;code&gt;minute&lt;/code&gt; s和 &lt;code&gt;second&lt;/code&gt; 假定为是 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1cad2c938251528e24aa9f15953e623a4c08304" translate="yes" xml:space="preserve">
          <source>The default value for each date-time component property is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. But, if the &lt;code&gt;weekday&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt; properties are all &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt; are assumed to be &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;.</source>
          <target state="translated">每个日期时间组件属性的默认值都是&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。但是，如果&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; &lt;code&gt;weekday&lt;/code&gt; ， &lt;code&gt;year&lt;/code&gt; ， &lt;code&gt;month&lt;/code&gt; 和 &lt;code&gt;day&lt;/code&gt; 属性，则假定 &lt;code&gt;year&lt;/code&gt; ， &lt;code&gt;month&lt;/code&gt; 和 &lt;code&gt;day&lt;/code&gt; 为 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df60473a24d4fcd4ef04c265bb72340d1de6ef6c" translate="yes" xml:space="preserve">
          <source>The default value for each date-time component property is &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, but if all component properties are &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt; are assumed to be &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;.</source>
          <target state="translated">每个日期时间组件属性的默认值是&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;，但是如果所有组件属性都&lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;，则将 &lt;code&gt;year&lt;/code&gt; ， &lt;code&gt;month&lt;/code&gt; 和 &lt;code&gt;day&lt;/code&gt; 假定为 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2b0122a05c7a89cab56eaaa6e72bda4166aef309" translate="yes" xml:space="preserve">
          <source>The deprecated &lt;code&gt;&lt;strong&gt;compile&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;()&lt;/code&gt; method is used to (re-)compile a regular expression during execution of a script. It is basically the same as the &lt;code&gt;RegExp&lt;/code&gt; constructor.</source>
          <target state="translated">不建议使用的 &lt;code&gt;&lt;strong&gt;compile&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;()&lt;/code&gt; 方法用于在脚本执行过程中（重新）编译正则表达式。它与 &lt;code&gt;RegExp&lt;/code&gt; 构造函数基本相同。</target>
        </trans-unit>
        <trans-unit id="1a6e3caec01441368ab687b0ffe79769141bf583" translate="yes" xml:space="preserve">
          <source>The depth level specifying how deep a nested array structure should be flattened. Defaults to 1.</source>
          <target state="translated">深度级别,指定嵌套数组结构被扁平化的深度。默认值为1。</target>
        </trans-unit>
        <trans-unit id="6a1ffc0dfd620e5610e05b3f9fb111a07803fd2a" translate="yes" xml:space="preserve">
          <source>The descriptor for the property being defined or modified.</source>
          <target state="translated">被定义或修改的属性的描述符。</target>
        </trans-unit>
        <trans-unit id="d8912c766c52dc003027b1c9513ec42e96773a76" translate="yes" xml:space="preserve">
          <source>The destructuring assignment uses similar syntax, but on the left-hand side of the assignment to define what values to unpack from the sourced variable.</source>
          <target state="translated">解构赋值使用类似的语法,但在赋值的左侧定义从源变量中解包哪些值。</target>
        </trans-unit>
        <trans-unit id="aa3175f58177aea6864d139aca99112779859078" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;&lt;strong&gt;Array.of()&lt;/strong&gt;&lt;/code&gt; and the &lt;code&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/code&gt; constructor is in the handling of integer arguments: &lt;code&gt;&lt;strong&gt;Array.of(7)&lt;/strong&gt;&lt;/code&gt; creates an array with a single element, &lt;code&gt;7&lt;/code&gt;, whereas &lt;code&gt;&lt;strong&gt;Array(7)&lt;/strong&gt;&lt;/code&gt; creates an empty array with a &lt;code&gt;length&lt;/code&gt; property of 7 (&lt;strong&gt;Note:&lt;/strong&gt; this implies an array of &lt;code&gt;7&lt;/code&gt; empty slots, not slots with actual &lt;code&gt;undefined&lt;/code&gt; values).</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;Array.of()&lt;/strong&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/code&gt; 构造函数之间的区别在于整数参数的处理： &lt;code&gt;&lt;strong&gt;Array.of(7)&lt;/strong&gt;&lt;/code&gt; 创建一个具有单个元素 &lt;code&gt;7&lt;/code&gt; 的 &lt;code&gt;&lt;strong&gt;Array(7)&lt;/strong&gt;&lt;/code&gt; ，而&lt;strong&gt;Array（7）&lt;/strong&gt;创建一个具有 &lt;code&gt;length&lt;/code&gt; 属性为的空数组7（&lt;strong&gt;注意：&lt;/strong&gt;这意味着包含 &lt;code&gt;7&lt;/code&gt; 个空插槽的数组，而不是具有实际 &lt;code&gt;undefined&lt;/code&gt; 值的插槽）。</target>
        </trans-unit>
        <trans-unit id="7c253f6c8a51a3d09b9af4dfdf88febba9d717d8" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;&lt;strong&gt;Array.of()&lt;/strong&gt;&lt;/code&gt; and the &lt;code&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/code&gt; constructor is in the handling of integer arguments: &lt;code&gt;&lt;strong&gt;Array.of(7)&lt;/strong&gt;&lt;/code&gt; creates an array with a single element, &lt;code&gt;7&lt;/code&gt;, whereas &lt;code&gt;&lt;strong&gt;Array(7)&lt;/strong&gt;&lt;/code&gt; creates an empty array with a &lt;code&gt;length&lt;/code&gt; property of &lt;code&gt;7&lt;/code&gt; (&lt;strong&gt;Note:&lt;/strong&gt; this implies an array of &lt;code&gt;7&lt;/code&gt; empty slots, not slots with actual &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; values).</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;Array.of()&lt;/strong&gt;&lt;/code&gt; 与 &lt;code&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/code&gt; 构造函数之间的区别在于整数参数的处理： &lt;code&gt;&lt;strong&gt;Array.of(7)&lt;/strong&gt;&lt;/code&gt; 创建一个具有单个元素 &lt;code&gt;7&lt;/code&gt; 的 &lt;code&gt;&lt;strong&gt;Array(7)&lt;/strong&gt;&lt;/code&gt; ，而&lt;strong&gt;Array（7）&lt;/strong&gt;创建一个具有 &lt;code&gt;length&lt;/code&gt; 属性为的空数组 &lt;code&gt;7&lt;/code&gt; （&lt;strong&gt;注意：&lt;/strong&gt;这意味着包含 &lt;code&gt;7&lt;/code&gt; 个空插槽的数组，而不是具有实际&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;值的插槽）。</target>
        </trans-unit>
        <trans-unit id="c7b16c2a8e0bc7fd5abd66647095b4ab23e4208d" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;substring()&lt;/code&gt; and &lt;code&gt;substr()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;substring()&lt;/code&gt; 和 &lt;code&gt;substr()&lt;/code&gt; 之间的区别</target>
        </trans-unit>
        <trans-unit id="116f60e8f0a2b57e4e20e4c0a1dd8bf787152c51" translate="yes" xml:space="preserve">
          <source>The difference between the sticky flag and the global flag</source>
          <target state="translated">粘性旗和全球旗的区别</target>
        </trans-unit>
        <trans-unit id="29060c7294aaeb4cdb06a46f8fc802bff5a30dec" translate="yes" xml:space="preserve">
          <source>The difference in associativity comes into play when there are multiple operators of the same precedence. With only one operator or operators of different precedences, associativity doesn't affect the output, as seen in the example above. In the example below, observe how associativity affects the output when multiple of the same operator are used.</source>
          <target state="translated">当有多个相同优先级的操作符时,关联性的差异就会发挥作用。在只有一个操作符或不同优先级的操作符的情况下,关联性不会影响输出,如上例所示。在下面的例子中,观察当使用多个相同的操作符时,关联性如何影响输出。</target>
        </trans-unit>
        <trans-unit id="3480a79be927bbb5f14ae973492e695c7b92b89e" translate="yes" xml:space="preserve">
          <source>The display name of the function.</source>
          <target state="translated">功能的显示名称。</target>
        </trans-unit>
        <trans-unit id="aa44c9826c9ee2fe6b7b0bee767d3469740ed5c7" translate="yes" xml:space="preserve">
          <source>The division assignment operator (&lt;code&gt;/=&lt;/code&gt;) divides a variable by the value of the right operand and assigns the result to the variable.</source>
          <target state="translated">除法赋值运算符（ &lt;code&gt;/=&lt;/code&gt; ）将变量除以右操作数的值，然后将结果赋给该变量。</target>
        </trans-unit>
        <trans-unit id="bceca5f189abd8f44b0e66132ffed15f1fbbb42b" translate="yes" xml:space="preserve">
          <source>The division assignment operator &lt;strong&gt;divides&lt;/strong&gt; a variable by the value of the right operand and assigns the result to the variable. See the &lt;a href=&quot;arithmetic_operators#Division&quot;&gt;division operator&lt;/a&gt; for more details.</source>
          <target state="translated">除法赋值运算符&lt;strong&gt;将&lt;/strong&gt;变量&lt;strong&gt;除以&lt;/strong&gt;右操作数的值，然后将结果赋给该变量。有关更多详细信息，请参见&lt;a href=&quot;arithmetic_operators#Division&quot;&gt;除法运算符&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0341634cfd4416d06db5a8f1a5389193620afd0f" translate="yes" xml:space="preserve">
          <source>The division operator (&lt;code&gt;/&lt;/code&gt;) produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.</source>
          <target state="translated">除法运算符（ &lt;code&gt;/&lt;/code&gt; ）产生其操作数的商，其中左操作数为除数，右操作数为除数。</target>
        </trans-unit>
        <trans-unit id="9f7cc1394d79a2c585ebb42aab308a2519ba5bda" translate="yes" xml:space="preserve">
          <source>The division operator produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.</source>
          <target state="translated">除法运算符产生其操作数的商,其中左操作数是红利,右操作数是除数。</target>
        </trans-unit>
        <trans-unit id="702e5e606f58d4f03d2c9bb6f52b7860f6794ad9" translate="yes" xml:space="preserve">
          <source>The dot operator (&lt;code&gt;.&lt;/code&gt;) is used for &lt;a href=&quot;../operators/property_accessors&quot;&gt;property access&lt;/a&gt;. You will have to specify the name of the property that you want to access. For computed property access, you might need to change your property access from using a dot to using square brackets. These will allow you to compute an expression. Maybe you intended to do concatenation instead? A plus operator (&lt;code&gt;+&lt;/code&gt;) is needed in that case. Please see the examples below.</source>
          <target state="translated">点运算符（ &lt;code&gt;.&lt;/code&gt; ）用于&lt;a href=&quot;../operators/property_accessors&quot;&gt;属性访问&lt;/a&gt;。您将必须指定要访问的属性的名称。对于计算的属性访问，您可能需要将属性访问从使用点更改为使用方括号。这些将使您可以计算表达式。也许您打算进行串联？在这种情况下，需要加号（ &lt;code&gt;+&lt;/code&gt; ）。请参阅以下示例。</target>
        </trans-unit>
        <trans-unit id="b463ff929e9917b779b4e606caf8f57bb7992205" translate="yes" xml:space="preserve">
          <source>The element associated with the specified key in the &lt;code&gt;WeakMap&lt;/code&gt; object. If the key can't be found, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">与 &lt;code&gt;WeakMap&lt;/code&gt; 对象中的指定键关联的元素。如果找不到密钥，则返回&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2669c5d093ce3ab35bb3b29e181037db1a32f431" translate="yes" xml:space="preserve">
          <source>The element associated with the specified key, or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if the key can't be found in the &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">与指定键关联的元素，如果在 &lt;code&gt;Map&lt;/code&gt; 对象中找不到键，则为&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c984bdef63710214dd443ae7be9a3a7a954b51b3" translate="yes" xml:space="preserve">
          <source>The element to search for.</source>
          <target state="translated">要搜索的元素。</target>
        </trans-unit>
        <trans-unit id="c9ded09aa440d2ecd650a1c98bf1dc5f92d1a085" translate="yes" xml:space="preserve">
          <source>The element(s) to add to the end of the array.</source>
          <target state="translated">要添加到数组末尾的元素。</target>
        </trans-unit>
        <trans-unit id="61dfe96ca0e23c5dcafb50b3016bc202759318e2" translate="yes" xml:space="preserve">
          <source>The elements interval to fill is [&lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;).</source>
          <target state="translated">要填充的元素间隔为[ &lt;code&gt;start&lt;/code&gt; ， &lt;code&gt;end&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6b2f71b15736679a743df6338568998902eadb28" translate="yes" xml:space="preserve">
          <source>The elements of the array are converted to strings using their &lt;code&gt;toLocaleString&lt;/code&gt; methods.</source>
          <target state="translated">使用数组的元素的 &lt;code&gt;toLocaleString&lt;/code&gt; 方法将其转换为字符串。</target>
        </trans-unit>
        <trans-unit id="976857b63ffa0fa8b49868356a30331d1c7ead7f" translate="yes" xml:space="preserve">
          <source>The elements to add to the array, beginning at the &lt;code&gt;start&lt;/code&gt; index. If you don't specify any elements, &lt;code&gt;splice()&lt;/code&gt; will only remove elements from the array.</source>
          <target state="translated">从 &lt;code&gt;start&lt;/code&gt; 索引开始，添加到数组的元素。如果不指定任何元素，则 &lt;code&gt;splice()&lt;/code&gt; 只会从数组中删除元素。</target>
        </trans-unit>
        <trans-unit id="198667ef5375d85508c4e39fb04519665c2c61fc" translate="yes" xml:space="preserve">
          <source>The elements to add to the array, beginning from &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt;. If you do not specify any elements, &lt;code&gt;splice()&lt;/code&gt; will only remove elements from the array.</source>
          <target state="translated">从 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 开始添加到数组的元素。如果未指定任何元素，则 &lt;code&gt;splice()&lt;/code&gt; 只会从数组中删除元素。</target>
        </trans-unit>
        <trans-unit id="1e3edd07e7b05dfcea108ea0bcdc3aa9e974a7a9" translate="yes" xml:space="preserve">
          <source>The elements to add to the end of the array.</source>
          <target state="translated">要添加到数组末尾的元素。</target>
        </trans-unit>
        <trans-unit id="f40d6feae1f747e51cf8f3a327e47b924b1b49ef" translate="yes" xml:space="preserve">
          <source>The elements to add to the front of the &lt;code&gt;&lt;var&gt;arr&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">要添加到 &lt;code&gt;&lt;var&gt;arr&lt;/var&gt;&lt;/code&gt; 前面的元素。</target>
        </trans-unit>
        <trans-unit id="08d8d77140911a1a18dc3282b0bb04677e86f944" translate="yes" xml:space="preserve">
          <source>The elements to add to the front of the array.</source>
          <target state="translated">要添加到数组前面的元素。</target>
        </trans-unit>
        <trans-unit id="964309413cb886b8ad9a40d1f14f5d85eb64b4e5" translate="yes" xml:space="preserve">
          <source>The empty statement is a semicolon (;) indicating that no statement will be executed, even if JavaScript syntax requires one. The opposite behavior, where you want multiple statements, but JavaScript only allows a single one, is possible using a&lt;a href=&quot;block&quot;&gt; block statement&lt;/a&gt;; it combines several statements into a single one.</source>
          <target state="translated">空语句是一个分号（;），表示即使JavaScript语法要求一个语句也不会执行任何语句。相反的行为，即您需要多个语句，而JavaScript只允许一个语句，可以使用&lt;a href=&quot;block&quot;&gt;block语句&lt;/a&gt;；它将多个语句合并为一个语句。</target>
        </trans-unit>
        <trans-unit id="f9c9dd7c3b2248ae60552eb4dbd9dc092a101bf8" translate="yes" xml:space="preserve">
          <source>The empty statement is a semicolon (&lt;code&gt;;&lt;/code&gt;) indicating that no statement will be executed, even if JavaScript syntax requires one.</source>
          <target state="translated">空语句是一个分号（ &lt;code&gt;;&lt;/code&gt; ），表示即使JavaScript语法要求一个语句，也不会执行任何语句。</target>
        </trans-unit>
        <trans-unit id="1e66a9d24a75b87f328012bbcd3828a1b25f0042" translate="yes" xml:space="preserve">
          <source>The empty statement is sometimes used with loop statements. See the following example with an empty loop body:</source>
          <target state="translated">空语句有时与循环语句一起使用。请看下面的例子,其中有一个空循环体。</target>
        </trans-unit>
        <trans-unit id="a2d4392192704672708baa27bca8082aa597d6d8" translate="yes" xml:space="preserve">
          <source>The encapsulation is enforced by the language. It is a syntax error to refer to &lt;code&gt;#&lt;/code&gt; names from out of scope.</source>
          <target state="translated">封装由语言强制执行。从范围之外引用 &lt;code&gt;#&lt;/code&gt; 个名称是语法错误。</target>
        </trans-unit>
        <trans-unit id="0b5add654fda5490901940118cf18012fb2f509a" translate="yes" xml:space="preserve">
          <source>The end of the generator function is reached. In this case, execution of the generator ends and an &lt;code&gt;IteratorResult&lt;/code&gt; is returned to the caller in which the &lt;code&gt;value&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">到了生成器功能的末端。在这种情况下，发电机的执行结束和 &lt;code&gt;IteratorResult&lt;/code&gt; 返回到其中呼叫者 &lt;code&gt;value&lt;/code&gt; 是&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;和 &lt;code&gt;done&lt;/code&gt; 是 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a5e729cba7ea56759d3b8069fa2efa9020b6cc62" translate="yes" xml:space="preserve">
          <source>The end of the generator function is reached; in this case, execution of the generator ends and an &lt;code&gt;IteratorResult&lt;/code&gt; is returned to the caller in which the &lt;code&gt;value&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">到达生成器功能的末端；在这种情况下，发电机的执行结束和 &lt;code&gt;IteratorResult&lt;/code&gt; 返回到其中呼叫者 &lt;code&gt;value&lt;/code&gt; 是&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;和 &lt;code&gt;done&lt;/code&gt; 是 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56abeb854f0dcfe77fd345ff29a8379a9c57a29d" translate="yes" xml:space="preserve">
          <source>The equality operator (&lt;code&gt;==&lt;/code&gt;) checks whether its two operands are equal, returning a Boolean result. Unlike the &lt;a href=&quot;strict_equality&quot;&gt;strict equality&lt;/a&gt; operator, it attempts to convert and compare operands that are of different types.</source>
          <target state="translated">相等运算符（ &lt;code&gt;==&lt;/code&gt; ）检查其两个操作数是否相等，并返回布尔结果。与&lt;a href=&quot;strict_equality&quot;&gt;严格相等&lt;/a&gt;运算符不同，它尝试转换和比较不同类型的操作数。</target>
        </trans-unit>
        <trans-unit id="1fbca4f8f7dbe7cb1b69857d4c5fefd4afb8e501" translate="yes" xml:space="preserve">
          <source>The equality operator converts the operands if they are &lt;strong&gt;not of the same type&lt;/strong&gt;, then applies strict comparison. If &lt;strong&gt;both operands are objects&lt;/strong&gt;, then JavaScript compares internal references which are equal when operands refer to the same object in memory.</source>
          <target state="translated">如果操作数&lt;strong&gt;的类型不同&lt;/strong&gt;，则等于运算符将对其进行转换，然后应用严格比较。如果&lt;strong&gt;两个操作数都是对象&lt;/strong&gt;，则JavaScript将比较内部引用，当操作数引用内存中的同一对象时，内部引用是相等的。</target>
        </trans-unit>
        <trans-unit id="68f7a7e8feed8f40edfa45544cb9e72d68b1f136" translate="yes" xml:space="preserve">
          <source>The equality operators (&lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;) use the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;Abstract Equality Comparison Algorithm&lt;/a&gt; to compare two operands. This can be roughly summarised as follows:</source>
          <target state="translated">等式运算符（ &lt;code&gt;==&lt;/code&gt; 和 &lt;code&gt;!=&lt;/code&gt; ）使用&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;抽象等式比较算法&lt;/a&gt;比较两个操作数。可以大致概括如下：</target>
        </trans-unit>
        <trans-unit id="f15945fc736b49113643933e5e8cdfba0c034d66" translate="yes" xml:space="preserve">
          <source>The equality operators (&lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;) use the &lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;Abstract Equality Comparison Algorithm&lt;/a&gt; to compare two operands. This can be roughly summarised as follows:</source>
          <target state="translated">等式运算符（ &lt;code&gt;==&lt;/code&gt; 和 &lt;code&gt;!=&lt;/code&gt; ）使用&lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;抽象等式比较算法&lt;/a&gt;比较两个操作数。可以大致概括如下：</target>
        </trans-unit>
        <trans-unit id="8cb51ee8b35550f1e821d2a598b3340865194239" translate="yes" xml:space="preserve">
          <source>The equivalent call in traditional syntax looks like this:</source>
          <target state="translated">传统语法中的对应调用是这样的。</target>
        </trans-unit>
        <trans-unit id="92f25f2b97a54ffd73232014fd7417667a535120" translate="yes" xml:space="preserve">
          <source>The example below illustrates &lt;code&gt;includes()&lt;/code&gt; method called on the function's &lt;a href=&quot;../../functions/arguments&quot;&gt;arguments&lt;/a&gt; object.</source>
          <target state="translated">下面的示例说明了在函数的&lt;a href=&quot;../../functions/arguments&quot;&gt;arguments&lt;/a&gt;对象上调用的 &lt;code&gt;includes()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="9e78bc7c4d863ae5f10706cc11d89d0d5f18cb90" translate="yes" xml:space="preserve">
          <source>The example below shows how to implement a self-archiving object. When &lt;code&gt;temperature&lt;/code&gt; property is set, the &lt;code&gt;archive&lt;/code&gt; array gets a log entry.</source>
          <target state="translated">以下示例显示了如何实现自存档对象。当 &lt;code&gt;temperature&lt;/code&gt; 属性设置，在 &lt;code&gt;archive&lt;/code&gt; 阵列得到一个日志条目。</target>
        </trans-unit>
        <trans-unit id="7d8d6dfa3c30cdcccd15cfd9b45e7e2e601d4b42" translate="yes" xml:space="preserve">
          <source>The example below shows how to set a getter for a property. It doesn't specify a &lt;a href=&quot;../functions/set&quot;&gt;setter&lt;/a&gt;, so a &lt;code&gt;TypeError&lt;/code&gt; will be thrown upon trying to set the &lt;code&gt;temperature&lt;/code&gt; property to &lt;code&gt;30&lt;/code&gt;. For more details see also the &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; page.</source>
          <target state="translated">下面的示例显示如何为属性设置吸气剂。它没有指定&lt;a href=&quot;../functions/set&quot;&gt;setter&lt;/a&gt;，因此在尝试将 &lt;code&gt;temperature&lt;/code&gt; 属性设置为 &lt;code&gt;30&lt;/code&gt; 时将引发 &lt;code&gt;TypeError&lt;/code&gt; 。有关更多详细信息，请参见&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;页面。</target>
        </trans-unit>
        <trans-unit id="2faf576348d1b75c7c5750450ed07e4e5aa37c08" translate="yes" xml:space="preserve">
          <source>The example below shows how to set getter for a property. It doesn't specify a &lt;a href=&quot;../functions/set&quot;&gt;setter&lt;/a&gt;, so a &lt;code&gt;TypeError&lt;/code&gt; will be thrown upon trying to set the &lt;code&gt;temperature&lt;/code&gt; property to &lt;code&gt;30&lt;/code&gt;. For more details see also the &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; page.</source>
          <target state="translated">下面的示例显示如何为属性设置getter。它没有指定&lt;a href=&quot;../functions/set&quot;&gt;设置器&lt;/a&gt;，因此在尝试将 &lt;code&gt;temperature&lt;/code&gt; 属性设置为 &lt;code&gt;30&lt;/code&gt; 时会引发 &lt;code&gt;TypeError&lt;/code&gt; 。有关更多详细信息，请参见&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;页面。</target>
        </trans-unit>
        <trans-unit id="9f3833ca0dced6eccd9dc2686c178826f0540b65" translate="yes" xml:space="preserve">
          <source>The example function &lt;code&gt;tetheredGetNumber()&lt;/code&gt; shows that a promise generator will utilize &lt;code&gt;reject()&lt;/code&gt; while setting up an asynchronous call, or within the call-back, or both. The function &lt;code&gt;promiseGetWord()&lt;/code&gt; illustrates how an API function might generate and return a promise in a self-contained manner.</source>
          <target state="translated">示例函数 &lt;code&gt;tetheredGetNumber()&lt;/code&gt; 表明，promise生成器在建立异步调用时或在回叫内（或在这两者中）都将使用 &lt;code&gt;reject()&lt;/code&gt; 。函数 &lt;code&gt;promiseGetWord()&lt;/code&gt; 说明了API函数如何以独立的方式生成和返回Promise。</target>
        </trans-unit>
        <trans-unit id="a543c742aa81833c02ea279d11b67484a1b79a93" translate="yes" xml:space="preserve">
          <source>The examples below are throwing strings. This is considered bad practice. Always throw an instance of &lt;a href=&quot;../error&quot;&gt;Error&lt;/a&gt;. Otherwise the part doing the catching would have to make checks to see if the argument was a string or an error, and you might lose valuable information like stack traces</source>
          <target state="translated">下面的示例抛出字符串。这被认为是不良做法。始终抛出&lt;a href=&quot;../error&quot;&gt;Error&lt;/a&gt;的实例。否则，执行捕获的部分将必须进行检查，以查看参数是字符串还是错误，并且您可能会丢失有价值的信息，例如堆栈跟踪</target>
        </trans-unit>
        <trans-unit id="bb1bcdbffff91b9c3ff449f3a1db34d1c49b45ab" translate="yes" xml:space="preserve">
          <source>The exception identifier</source>
          <target state="translated">异常标识符</target>
        </trans-unit>
        <trans-unit id="ce80bced1d577c0ec07cff7172c9496c59661560" translate="yes" xml:space="preserve">
          <source>The exception to throw. For debugging purposes, it is useful to make it an &lt;code&gt;instanceof&lt;/code&gt;&lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">抛出异常。出于调试目的，使其成为&lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;instanceof&lt;/code&gt; 非常有用。</target>
        </trans-unit>
        <trans-unit id="54ac630246e15feb3e415b9e4a0af2998597121e" translate="yes" xml:space="preserve">
          <source>The expected value to test .</source>
          <target state="translated">测试的预期值。</target>
        </trans-unit>
        <trans-unit id="afe3f22e84d4424195badcc3f4b24fba7253849f" translate="yes" xml:space="preserve">
          <source>The expected value to test.</source>
          <target state="translated">测试的预期值。</target>
        </trans-unit>
        <trans-unit id="2746092c21a3490e05af5310de9a2a714ec48b94" translate="yes" xml:space="preserve">
          <source>The experimental pipeline operator &lt;code&gt;|&amp;gt;&lt;/code&gt; (currently at stage 1) allows the creation of chained function calls in a readable manner. Basically, the pipeline operator provides syntactic sugar on a function call with a single argument allowing you to write</source>
          <target state="translated">实验性管道运算符 &lt;code&gt;|&amp;gt;&lt;/code&gt; （当前处于阶段1）允许以可读的方式创建链接函数调用。基本上，管道运算符在函数调用中提供带有单个参数的语法糖，使您可以编写</target>
        </trans-unit>
        <trans-unit id="320dabf35549ff785ee3314d282478c9cf5cca62" translate="yes" xml:space="preserve">
          <source>The experimental pipeline operator &lt;code&gt;|&amp;gt;&lt;/code&gt; (currently at stage 1) pipes the value of an expression into a function. This allows the creation of chained function calls in a readable manner. The result is syntactic sugar in which a function call with a single argument can be written like this:</source>
          <target state="translated">实验性管道运算符 &lt;code&gt;|&amp;gt;&lt;/code&gt; （当前处于阶段1）将表达式的值传递给函数。这允许以可读的方式创建链接的函数调用。结果是语法糖，其中可以将具有单个参数的函数调用编写如下：</target>
        </trans-unit>
        <trans-unit id="f035e240e14007c0c27a0f4417979f25ca82a137" translate="yes" xml:space="preserve">
          <source>The exponent used to raise the &lt;code&gt;&lt;var&gt;base&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">指数用来提高 &lt;code&gt;&lt;var&gt;base&lt;/var&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8f1e08828c1c1c64a2e274d4ee8e4d2a3195e57a" translate="yes" xml:space="preserve">
          <source>The exponent used to raise the &lt;code&gt;base&lt;/code&gt;.</source>
          <target state="translated">指数用来提高 &lt;code&gt;base&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="328dec7c54e1e4924d1bde45fe1a348426704b50" translate="yes" xml:space="preserve">
          <source>The exponentiation assignment operator (&lt;code&gt;**=&lt;/code&gt;) raises the value of a variable to the power of the right operand.</source>
          <target state="translated">乘幂赋值运算符（ &lt;code&gt;**=&lt;/code&gt; ）将变量的值提高到右操作数的幂。</target>
        </trans-unit>
        <trans-unit id="ec4a21ddf5867a520cbd03423b51cdda85a33100" translate="yes" xml:space="preserve">
          <source>The exponentiation assignment operator evaluates to the result of raising first operand to the &lt;strong&gt;power&lt;/strong&gt; second operand. See the &lt;a href=&quot;arithmetic_operators#Exponentiation&quot;&gt;exponentiation operator&lt;/a&gt; for more details.</source>
          <target state="translated">乘幂赋值运算符评估将第一个操作数提升为&lt;strong&gt;幂&lt;/strong&gt;第二个操作数的结果。有关更多详细信息，请参见&lt;a href=&quot;arithmetic_operators#Exponentiation&quot;&gt;幂运算符&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bdbed242a8d30d3b1dec579acd5c38d2a78e7d80" translate="yes" xml:space="preserve">
          <source>The exponentiation operator (&lt;code&gt;**&lt;/code&gt;) returns the result of raising the first operand to the power of the second operand. It is equivalent to &lt;code&gt;Math.pow&lt;/code&gt;, except it also accepts BigInts as operands.</source>
          <target state="translated">取幂运算符（ &lt;code&gt;**&lt;/code&gt; ）返回将第一个操作数提高为第二个操作数的幂的结果。它等效于 &lt;code&gt;Math.pow&lt;/code&gt; ，除了它还接受BigInts作为操作数。</target>
        </trans-unit>
        <trans-unit id="4327e9a1fb877b9affeaa85b8d19b069f3272d0c" translate="yes" xml:space="preserve">
          <source>The exponentiation operator is right-associative: &lt;code&gt;&lt;var&gt;a&lt;/var&gt; ** &lt;var&gt;b&lt;/var&gt; ** &lt;var&gt;c&lt;/var&gt;&lt;/code&gt; is equal to &lt;code&gt;&lt;var&gt;a&lt;/var&gt; ** (&lt;var&gt;b&lt;/var&gt; ** &lt;var&gt;c&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">求幂运算符是右关联的： &lt;code&gt;&lt;var&gt;a&lt;/var&gt; ** &lt;var&gt;b&lt;/var&gt; ** &lt;var&gt;c&lt;/var&gt;&lt;/code&gt; 等于 &lt;code&gt;&lt;var&gt;a&lt;/var&gt; ** (&lt;var&gt;b&lt;/var&gt; ** &lt;var&gt;c&lt;/var&gt;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a4176a32312ff185a693c46e64c016529338241a" translate="yes" xml:space="preserve">
          <source>The exponentiation operator returns the result of raising first operand to the power second operand. that is, &lt;code&gt;var1&lt;/code&gt;&lt;sup&gt;&lt;code&gt;var2&lt;/code&gt;&lt;/sup&gt;, in the preceding statement, where &lt;code&gt;var1&lt;/code&gt; and &lt;code&gt;var2&lt;/code&gt; are variables. Exponentiation operator is right associative. &lt;code&gt;a ** b ** c&lt;/code&gt; is equal to &lt;code&gt;a ** (b ** c)&lt;/code&gt;.</source>
          <target state="translated">求幂运算符将加高第一个操作数的结果返回到幂第二个操作数。也就是说， &lt;code&gt;var1&lt;/code&gt; &lt;sup&gt; &lt;code&gt;var2&lt;/code&gt; &lt;/sup&gt;，在前面的语句，其中 &lt;code&gt;var1&lt;/code&gt; 和 &lt;code&gt;var2&lt;/code&gt; 是变量。求幂运算符是正确的关联。 &lt;code&gt;a ** b ** c&lt;/code&gt; 等于 &lt;code&gt;a ** (b ** c)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0ff10bc03a45ce0e9291e3e6951c8f6cb0e9efe" translate="yes" xml:space="preserve">
          <source>The expression after the &lt;code&gt;yield&lt;/code&gt; keyword is optional and omitting it no longer throws a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;function* countAppleSales() { yield; }&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; 关键字之后的表达式是可选的，并且省略该表达式不再引发&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;： &lt;code&gt;function* countAppleSales() { yield; }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6688448e60de73657152c36c5e46b89ebe52ab99" translate="yes" xml:space="preserve">
          <source>The expression closure syntax is a shorthand for writing simple function.</source>
          <target state="translated">表达式闭合语法是编写简单函数的简写。</target>
        </trans-unit>
        <trans-unit id="21383b56f31b618cf9bbdf7920f702063119a5ac" translate="yes" xml:space="preserve">
          <source>The expression is not allowed at the start of a statement.</source>
          <target state="translated">语句开头不允许有这种表达方式。</target>
        </trans-unit>
        <trans-unit id="96688ce440f140a42b107e921ec490d12daf7cab" translate="yes" xml:space="preserve">
          <source>The expression to throw.</source>
          <target state="translated">扔的说法。</target>
        </trans-unit>
        <trans-unit id="520c80691ea2d4a4e974359ab8a8851d7f401d54" translate="yes" xml:space="preserve">
          <source>The expression which returns an iterable object.</source>
          <target state="translated">返回可迭代对象的表达式。</target>
        </trans-unit>
        <trans-unit id="a8bb2c9604319c8bb786e0cb1b99192e83f0a82e" translate="yes" xml:space="preserve">
          <source>The expression whose value is to be returned. If omitted, &lt;code&gt;undefined&lt;/code&gt; is returned instead.</source>
          <target state="translated">要返回其值的表达式。如果省略，则返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b5cd4e8f8a8553917be07119437075d61bc8210" translate="yes" xml:space="preserve">
          <source>The fallback to use, the default is &lt;code&gt;&quot;code&quot;&lt;/code&gt;.</source>
          <target state="translated">要使用的后备选项，默认为 &lt;code&gt;&quot;code&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed5c50ebb92756f0707c6ed0a09e38af923761d0" translate="yes" xml:space="preserve">
          <source>The finally-block</source>
          <target state="translated">最后块</target>
        </trans-unit>
        <trans-unit id="ee5dce18bb14a0cbef372bf3dc3a7962d359dcfc" translate="yes" xml:space="preserve">
          <source>The first element for comparison.</source>
          <target state="translated">第一个比较的要素。</target>
        </trans-unit>
        <trans-unit id="ec4ed9da9983831b6e15987af90f3bd77d33de85" translate="yes" xml:space="preserve">
          <source>The first element to be searched is found at &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; for positive values of &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt;, or at &lt;code&gt;&lt;var&gt;arr&lt;/var&gt;.length + &lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; for negative values of &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; (using the &lt;a href=&quot;https://en.wikipedia.org/wiki/absolute%20value&quot;&gt;absolute value&lt;/a&gt; of &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; as the number of elements from the end of the array at which to start the search).</source>
          <target state="translated">要搜索在找到的第一个元件 &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; 为正值 &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; ，或在 &lt;code&gt;&lt;var&gt;arr&lt;/var&gt;.length + &lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; 为负值 &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; （使用&lt;a href=&quot;https://en.wikipedia.org/wiki/absolute%20value&quot;&gt;绝对值&lt;/a&gt;的 &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; 作为元素的从阵列的端部的编号，在这些启动搜索）。</target>
        </trans-unit>
        <trans-unit id="6faf3645812e98e818a8b880cea16c9a0cd2b180" translate="yes" xml:space="preserve">
          <source>The first example creates a class called &lt;code&gt;Square&lt;/code&gt; from a class called &lt;code&gt;Polygon&lt;/code&gt;. This example is extracted from this &lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;live demo&lt;/a&gt;&lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;(source)&lt;/a&gt;.</source>
          <target state="translated">第一个示例从名为 &lt;code&gt;Polygon&lt;/code&gt; 的类创建一个名为 &lt;code&gt;Square&lt;/code&gt; 的类。此示例摘自该&lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;实时演示&lt;/a&gt;&lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;（源）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1687b2101b8a8d269aea32aabe07e05c04201095" translate="yes" xml:space="preserve">
          <source>The first index of the element in the array; &lt;code&gt;-1&lt;/code&gt; if not found.</source>
          <target state="translated">数组中元素的第一个索引； &lt;code&gt;-1&lt;/code&gt; (如果找不到）。</target>
        </trans-unit>
        <trans-unit id="6023d482470ad1c2cdb57b2bfef6b50e5f030b1f" translate="yes" xml:space="preserve">
          <source>The first index of the element in the array; &lt;strong&gt;-1&lt;/strong&gt; if not found.</source>
          <target state="translated">数组中元素的第一个索引；&lt;strong&gt;-1（&lt;/strong&gt;如果找不到）。</target>
        </trans-unit>
        <trans-unit id="e9e21f4e3a3ffd5c425a4b62c284801bdbcc39a4" translate="yes" xml:space="preserve">
          <source>The first line of the body of function &lt;code&gt;foo&lt;/code&gt; is executed synchronously, with the await expression configured with the pending promise. Progress through &lt;code&gt;foo&lt;/code&gt; is then suspended and control is yielded back to the function that called &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="translated">函数 &lt;code&gt;foo&lt;/code&gt; 的主体的第一行是同步执行的，其中await表达式配置了未决的Promise。然后暂停通过 &lt;code&gt;foo&lt;/code&gt; 的进度，并将控制权交还给名为 &lt;code&gt;foo&lt;/code&gt; 的函数。</target>
        </trans-unit>
        <trans-unit id="62b8fb4edcec4c4a905b93de6600a7d06138fb65" translate="yes" xml:space="preserve">
          <source>The first one is an &lt;em&gt;O(&lt;var&gt;n&lt;/var&gt;)&lt;/em&gt; set and search (&lt;var&gt;n&lt;/var&gt; being the number of keys in the map) since both operations must iterate through the list of keys to find a matching value.</source>
          <target state="translated">第一个是&lt;em&gt;O（ &lt;var&gt;n&lt;/var&gt; ）&lt;/em&gt;设置并搜索（ &lt;var&gt;n&lt;/var&gt; 是映射中的键数），因为这两个操作都必须遍历键列表以找到匹配的值。</target>
        </trans-unit>
        <trans-unit id="1845f10e7d138b68d6c058652b5f826e70a6408a" translate="yes" xml:space="preserve">
          <source>The first one is much smaller and more performant, but does not work when using the &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">第一个小得多，性能更高，但是在使用 &lt;code&gt;new&lt;/code&gt; 运算符时不起作用。</target>
        </trans-unit>
        <trans-unit id="875815fb2257b9e334b66f58bfb0281f9e9c9f44" translate="yes" xml:space="preserve">
          <source>The first time the callback is called, &lt;code&gt;&lt;var&gt;accumulator&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;currentValue&lt;/var&gt;&lt;/code&gt; can be one of two values. If &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is provided in the call to &lt;code&gt;reduce()&lt;/code&gt;, then &lt;code&gt;&lt;var&gt;accumulator&lt;/var&gt;&lt;/code&gt; will be equal to &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;currentValue&lt;/var&gt;&lt;/code&gt; will be equal to the first value in the array. If no &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is provided, then &lt;code&gt;&lt;var&gt;accumulator&lt;/var&gt;&lt;/code&gt; will be equal to the first value in the array, and &lt;code&gt;&lt;var&gt;currentValue&lt;/var&gt;&lt;/code&gt; will be equal to the second.</source>
          <target state="translated">首次调用该回调时， &lt;code&gt;&lt;var&gt;accumulator&lt;/var&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;var&gt;currentValue&lt;/var&gt;&lt;/code&gt; 可以是两个值之一。如果在 &lt;code&gt;reduce()&lt;/code&gt; 的调用中提供了 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; ，则 &lt;code&gt;&lt;var&gt;accumulator&lt;/var&gt;&lt;/code&gt; 将等于 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; ，而 &lt;code&gt;&lt;var&gt;currentValue&lt;/var&gt;&lt;/code&gt; 将等于数组中的第一个值。如果未提供 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; ，则 &lt;code&gt;&lt;var&gt;accumulator&lt;/var&gt;&lt;/code&gt; 将等于数组中的第一个值，而 &lt;code&gt;&lt;var&gt;currentValue&lt;/var&gt;&lt;/code&gt; 将等于第二个值。</target>
        </trans-unit>
        <trans-unit id="5f839bd6e11cf838ef3faf30d60b9b58c1b93524" translate="yes" xml:space="preserve">
          <source>The first time the callback is called, &lt;code&gt;accumulator&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; can be one of two values. If &lt;code&gt;initialValue&lt;/code&gt; is provided in the call to &lt;code&gt;reduce()&lt;/code&gt;, then &lt;code&gt;accumulator&lt;/code&gt; will be equal to &lt;code&gt;initialValue&lt;/code&gt;, and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the first value in the array. If no &lt;code&gt;initialValue&lt;/code&gt; is provided, then &lt;code&gt;accumulator&lt;/code&gt; will be equal to the first value in the array, and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the second.</source>
          <target state="translated">第一次调用回调时， &lt;code&gt;accumulator&lt;/code&gt; 和 &lt;code&gt;currentValue&lt;/code&gt; 可以是两个值之一。如果在 &lt;code&gt;reduce()&lt;/code&gt; 的调用中提供了 &lt;code&gt;initialValue&lt;/code&gt; ，则 &lt;code&gt;accumulator&lt;/code&gt; 将等于 &lt;code&gt;initialValue&lt;/code&gt; ，而 &lt;code&gt;currentValue&lt;/code&gt; 将等于数组中的第一个值。如果未提供 &lt;code&gt;initialValue&lt;/code&gt; ，则 &lt;code&gt;accumulator&lt;/code&gt; 将等于数组中的第一个值，而 &lt;code&gt;currentValue&lt;/code&gt; 将等于第二个值。</target>
        </trans-unit>
        <trans-unit id="b780c1625556bb97e02bb2df7f774177e170222b" translate="yes" xml:space="preserve">
          <source>The first time the callback is called, &lt;code&gt;previousValue&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; can be one of two values. If &lt;code&gt;initialValue&lt;/code&gt; is provided in the call to &lt;code&gt;reduce&lt;/code&gt;, then &lt;code&gt;previousValue&lt;/code&gt; will be equal to &lt;code&gt;initialValue&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the first value in the typed array. If no &lt;code&gt;initialValue&lt;/code&gt; was provided, then &lt;code&gt;previousValue&lt;/code&gt; will be equal to the first value in the typed array and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the second.</source>
          <target state="translated">首次调用该回调时， &lt;code&gt;previousValue&lt;/code&gt; 和 &lt;code&gt;currentValue&lt;/code&gt; 可以是两个值之一。如果在 &lt;code&gt;reduce&lt;/code&gt; 的调用中提供了 &lt;code&gt;initialValue&lt;/code&gt; ，则 &lt;code&gt;previousValue&lt;/code&gt; 将等于 &lt;code&gt;initialValue&lt;/code&gt; ,而 &lt;code&gt;currentValue&lt;/code&gt; 将等于类型化数组中的第一个值。如果未提供 &lt;code&gt;initialValue&lt;/code&gt; ，则 &lt;code&gt;previousValue&lt;/code&gt; 将等于类型数组中的第一个值，而 &lt;code&gt;currentValue&lt;/code&gt; 将等于第二个值。</target>
        </trans-unit>
        <trans-unit id="53aed0f9f0e168d572e9df10eac3b60e872c5cc5" translate="yes" xml:space="preserve">
          <source>The first time the function is called, the &lt;code&gt;&lt;var&gt;accumulator&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;currentValue&lt;/var&gt;&lt;/code&gt; can be one of two values. If an &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; was provided in the call to &lt;code&gt;reduceRight&lt;/code&gt;, then &lt;code&gt;&lt;var&gt;accumulator&lt;/var&gt;&lt;/code&gt; will be equal to &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;currentValue&lt;/var&gt;&lt;/code&gt; will be equal to the last value in the array. If no &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; was provided, then &lt;code&gt;&lt;var&gt;accumulator&lt;/var&gt;&lt;/code&gt; will be equal to the last value in the array and &lt;code&gt;&lt;var&gt;currentValue&lt;/var&gt;&lt;/code&gt; will be equal to the second-to-last value.</source>
          <target state="translated">第一次调用该函数时， &lt;code&gt;&lt;var&gt;accumulator&lt;/var&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;var&gt;currentValue&lt;/var&gt;&lt;/code&gt; 可以是两个值之一。如果在 &lt;code&gt;reduceRight&lt;/code&gt; 的调用中提供了 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; ，则 &lt;code&gt;&lt;var&gt;accumulator&lt;/var&gt;&lt;/code&gt; 将等于 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; ,而 &lt;code&gt;&lt;var&gt;currentValue&lt;/var&gt;&lt;/code&gt; 将等于数组中的最后一个值。如果未提供 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; ，则 &lt;code&gt;&lt;var&gt;accumulator&lt;/var&gt;&lt;/code&gt; 将等于数组中的最后一个值，而 &lt;code&gt;&lt;var&gt;currentValue&lt;/var&gt;&lt;/code&gt; 将等于倒数第二个值。</target>
        </trans-unit>
        <trans-unit id="70ea80c0a2f8772cd47bde2d54d604e56483dbc4" translate="yes" xml:space="preserve">
          <source>The first time the function is called, the &lt;code&gt;accumulator&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; can be one of two values. If an &lt;code&gt;initialValue&lt;/code&gt; was provided in the call to &lt;code&gt;reduceRight&lt;/code&gt;, then &lt;code&gt;accumulator&lt;/code&gt; will be equal to &lt;code&gt;initialValue&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the last value in the array. If no &lt;code&gt;initialValue&lt;/code&gt; was provided, then &lt;code&gt;accumulator&lt;/code&gt; will be equal to the last value in the array and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the second-to-last value.</source>
          <target state="translated">第一次调用该函数时， &lt;code&gt;accumulator&lt;/code&gt; 和 &lt;code&gt;currentValue&lt;/code&gt; 可以是两个值之一。如果在 &lt;code&gt;reduceRight&lt;/code&gt; 的调用中提供了 &lt;code&gt;initialValue&lt;/code&gt; ，则 &lt;code&gt;accumulator&lt;/code&gt; 将等于 &lt;code&gt;initialValue&lt;/code&gt; ,而 &lt;code&gt;currentValue&lt;/code&gt; 将等于数组中的最后一个值。如果未提供 &lt;code&gt;initialValue&lt;/code&gt; ，则 &lt;code&gt;accumulator&lt;/code&gt; 将等于数组中的最后一个值，而 &lt;code&gt;currentValue&lt;/code&gt; 将等于倒数第二个值。</target>
        </trans-unit>
        <trans-unit id="fcd4413a46ca7b4a40f9a396ef6da68bf067bd4c" translate="yes" xml:space="preserve">
          <source>The first time the function is called, the &lt;code&gt;previousValue&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; can be one of two values. If an &lt;code&gt;initialValue&lt;/code&gt; was provided in the call to &lt;code&gt;reduceRight&lt;/code&gt;, then &lt;code&gt;previousValue&lt;/code&gt; will be equal to &lt;code&gt;initialValue&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the last value in the typed array. If no &lt;code&gt;initialValue&lt;/code&gt; was provided, then &lt;code&gt;previousValue&lt;/code&gt; will be equal to the last value in the typed array and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the second-to-last value.</source>
          <target state="translated">第一次调用该函数时， &lt;code&gt;previousValue&lt;/code&gt; 和 &lt;code&gt;currentValue&lt;/code&gt; 可以是两个值之一。如果在 &lt;code&gt;reduceRight&lt;/code&gt; 的调用中提供了 &lt;code&gt;initialValue&lt;/code&gt; ，则 &lt;code&gt;previousValue&lt;/code&gt; 将等于 &lt;code&gt;initialValue&lt;/code&gt; ,而 &lt;code&gt;currentValue&lt;/code&gt; 将等于类型化数组中的最后一个值。如果未提供 &lt;code&gt;initialValue&lt;/code&gt; ，则 &lt;code&gt;previousValue&lt;/code&gt; 将等于类型化数组中的最后一个值，而 &lt;code&gt;currentValue&lt;/code&gt; 将等于倒数第二个值。</target>
        </trans-unit>
        <trans-unit id="56e629ccbe223be58c9a4a329f9aedcc3faf8225" translate="yes" xml:space="preserve">
          <source>The first two lines set the year to 1996. The third sets the year to 2000.</source>
          <target state="translated">前两行将年份定为1996年。第三行将年份定为2000年。</target>
        </trans-unit>
        <trans-unit id="e3e25923e75e57fe4c8cd666578c83d081cde684" translate="yes" xml:space="preserve">
          <source>The first value to compare.</source>
          <target state="translated">第一个要比较的值。</target>
        </trans-unit>
        <trans-unit id="9b15ba4c6a8fb0f073e1bccafbc57018dbc9e83f" translate="yes" xml:space="preserve">
          <source>The first way is the &lt;code&gt;//&lt;/code&gt; comment; this makes all text following it on the same line into a comment. For example:</source>
          <target state="translated">第一种方法是 &lt;code&gt;//&lt;/code&gt; 注释；这会使同一行之后的所有文本成为注释。例如：</target>
        </trans-unit>
        <trans-unit id="9041df23a8ecb0dc00120e416d6e0a9bb6f9c8d7" translate="yes" xml:space="preserve">
          <source>The first way is the &lt;code&gt;//&lt;/code&gt; comment&lt;strong&gt;;&lt;/strong&gt; this makes all text following it on the same line into a comment. For example:</source>
          <target state="translated">第一种方法是 &lt;code&gt;//&lt;/code&gt; 注释&lt;strong&gt;；&lt;/strong&gt;这会使同一行之后的所有文本成为注释。例如：</target>
        </trans-unit>
        <trans-unit id="9eb49b60e3be5a52747d92e8a22a6d16279f2fe8" translate="yes" xml:space="preserve">
          <source>The fixed version:</source>
          <target state="translated">的固定版本。</target>
        </trans-unit>
        <trans-unit id="c8c39436f5730eb348e872deaf1fa667ab721807" translate="yes" xml:space="preserve">
          <source>The flat method removes empty slots in arrays:</source>
          <target state="translated">平铺法可以删除数组中的空槽。</target>
        </trans-unit>
        <trans-unit id="6b0d4d52f56cccbfbab6df299402dd57a39fb92c" translate="yes" xml:space="preserve">
          <source>The following (contrived) example updates an object's properties from each entry in the array:</source>
          <target state="translated">下面(人为)的例子是从数组中的每个条目更新对象的属性。</target>
        </trans-unit>
        <trans-unit id="19d94a7fc32d04cec65c6d24ddf49ca8f47ec558" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;for&lt;/code&gt; cycle calculates the offset position of a node in the &lt;code&gt;&lt;var&gt;final-expression&lt;/var&gt;&lt;/code&gt; section, and therefore it does not require the use of a &lt;code&gt;&lt;var&gt;statement&lt;/var&gt;&lt;/code&gt; section, a semicolon is used instead.</source>
          <target state="translated">以下 &lt;code&gt;for&lt;/code&gt; 循环计算节点在 &lt;code&gt;&lt;var&gt;final-expression&lt;/var&gt;&lt;/code&gt; 部分中的偏移位置，因此不需要使用 &lt;code&gt;&lt;var&gt;statement&lt;/var&gt;&lt;/code&gt; 部分，而使用分号代替。</target>
        </trans-unit>
        <trans-unit id="637b63e14680d42936462840375bb75b4e4b3acf" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;for&lt;/code&gt; cycle calculates the offset position of a node in the &lt;em&gt;[final-expression]&lt;/em&gt; section, and therefore it does not require the use of a &lt;code&gt;statement&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;block&quot;&gt;block&lt;/a&gt; statement&lt;/code&gt; section, a semicolon is used instead.</source>
          <target state="translated">以下 &lt;code&gt;for&lt;/code&gt; 循环计算节点在&lt;em&gt;[final-expression]&lt;/em&gt;节中的偏移位置，因此，它不需要使用 &lt;code&gt;statement&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;block&quot;&gt;block&lt;/a&gt; statement&lt;/code&gt; 节，而是使用分号代替。</target>
        </trans-unit>
        <trans-unit id="60d614556ee4f8fb1680ea3ab2ac38d5027c5e26" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;for&lt;/code&gt; statement starts by declaring the variable &lt;code&gt;i&lt;/code&gt; and initializing it to &lt;code&gt;0&lt;/code&gt;. It checks that &lt;code&gt;i&lt;/code&gt; is less than nine, performs the two succeeding statements, and increments &lt;code&gt;i&lt;/code&gt; by 1 after each pass through the loop.</source>
          <target state="translated">下面的 &lt;code&gt;for&lt;/code&gt; 语句首先声明变量 &lt;code&gt;i&lt;/code&gt; 并将其初始化为 &lt;code&gt;0&lt;/code&gt; 。它检查 &lt;code&gt;i&lt;/code&gt; 小于9，执行两个后续语句，并在每次循环后将 &lt;code&gt;i&lt;/code&gt; 递增1。</target>
        </trans-unit>
        <trans-unit id="c13b20cee0f661617bd8015d0c1f583881d10e96" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;while&lt;/code&gt; loop iterates as long as &lt;code&gt;n&lt;/code&gt; is less than three.</source>
          <target state="translated">只要 &lt;code&gt;n&lt;/code&gt; 小于3 ，下面的 &lt;code&gt;while&lt;/code&gt; 循环就会迭代。</target>
        </trans-unit>
        <trans-unit id="bd682eef69193f4fdb44336fd479f91bb7ada667" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;with&lt;/code&gt; statement specifies that the &lt;a href=&quot;../global_objects/math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt; object is the default object. The statements following the &lt;code&gt;with&lt;/code&gt; statement refer to the &lt;a href=&quot;../global_objects/math/pi&quot;&gt;&lt;code&gt;PI&lt;/code&gt;&lt;/a&gt; property and the &lt;a href=&quot;../global_objects/math/cos&quot;&gt;&lt;code&gt;cos&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../global_objects/math/sin&quot;&gt;&lt;code&gt;sin&lt;/code&gt;&lt;/a&gt; methods, without specifying an object. JavaScript assumes the &lt;code&gt;Math&lt;/code&gt; object for these references.</source>
          <target state="translated">以下 &lt;code&gt;with&lt;/code&gt; 语句指定&lt;a href=&quot;../global_objects/math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt;对象为默认对象。 &lt;code&gt;with&lt;/code&gt; 语句之后的语句引用了&lt;a href=&quot;../global_objects/math/pi&quot;&gt; &lt;code&gt;PI&lt;/code&gt; &lt;/a&gt;属性以及&lt;a href=&quot;../global_objects/math/cos&quot;&gt; &lt;code&gt;cos&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../global_objects/math/sin&quot;&gt; &lt;code&gt;sin&lt;/code&gt; &lt;/a&gt;方法，但未指定对象。JavaScript假定这些引用为 &lt;code&gt;Math&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="5b9e90596ec38fff87485beade9e5f8deb49143a" translate="yes" xml:space="preserve">
          <source>The following are only reserved when they are found in module code:</source>
          <target state="translated">以下内容只有在模块代码中出现时才会被保留。</target>
        </trans-unit>
        <trans-unit id="c0c352e275f96b24c86f4d19b3dc013b58dfed6e" translate="yes" xml:space="preserve">
          <source>The following are only reserved when they are found in strict mode code:</source>
          <target state="translated">以下内容只有在严格模式代码中出现时才会被保留。</target>
        </trans-unit>
        <trans-unit id="94a1f4c078dadf907ee9c9a9ba75dd45389036ba" translate="yes" xml:space="preserve">
          <source>The following are reserved as future keywords by older ECMAScript specifications (ECMAScript 1 till 3).</source>
          <target state="translated">以下是旧的ECMAScript规范(ECMAScript 1至3)所保留的未来关键词。</target>
        </trans-unit>
        <trans-unit id="14042eda201db9dbf94f4c7e43f79039471fa58d" translate="yes" xml:space="preserve">
          <source>The following are reserved as future keywords by the ECMAScript specification. They have no special functionality at present, but they might at some future time, so they cannot be used as identifiers.</source>
          <target state="translated">以下是ECMAScript规范中保留的未来关键词。它们目前没有特别的功能,但在将来的某个时候可能会有,所以不能作为标识符使用。</target>
        </trans-unit>
        <trans-unit id="a4e1da54087efaf8adb80147425713d13e38e3f4" translate="yes" xml:space="preserve">
          <source>The following assigns the &lt;code&gt;toString()&lt;/code&gt; value of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object to &lt;code&gt;myVar&lt;/code&gt;:</source>
          <target state="translated">以下将&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;对象的 &lt;code&gt;toString()&lt;/code&gt; 值分配给 &lt;code&gt;myVar&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="cae1e8968e0d8a4226ccdf6fb081349da0152b2c" translate="yes" xml:space="preserve">
          <source>The following call, which does not specify a time zone will be set to 2019-01-01 at 00:00:00 in the local timezone of the system.</source>
          <target state="translated">以下未指定时区的呼叫,将被设置为2019-01-01当地时区的00:00:00。</target>
        </trans-unit>
        <trans-unit id="0e09e75af226c19f33d52f40e585da0f7a8b4f94" translate="yes" xml:space="preserve">
          <source>The following calls all return &lt;code&gt;1546300800000&lt;/code&gt;. The first according to ES5 will imply UTC time, and the others are specifying UTC timezone via the ISO date specification (&lt;code&gt;Z&lt;/code&gt; and &lt;code&gt;+00:00&lt;/code&gt;)</source>
          <target state="translated">以下调用均返回 &lt;code&gt;1546300800000&lt;/code&gt; 。根据ES5的第一个将表示UTC时间，其他人则通过ISO日期规范（ &lt;code&gt;Z&lt;/code&gt; 和 &lt;code&gt;+00:00&lt;/code&gt; ）指定UTC时区。</target>
        </trans-unit>
        <trans-unit id="c08ac54043b648876203b3e3803e638644ac0bbc" translate="yes" xml:space="preserve">
          <source>The following code also uses &lt;code&gt;break&lt;/code&gt; statements with labeled blocks but generates a Syntax Error because its &lt;code&gt;break&lt;/code&gt; statement is within &lt;code&gt;block_1&lt;/code&gt; but references &lt;code&gt;block_2&lt;/code&gt;. A &lt;code&gt;break&lt;/code&gt; statement must always be nested within any label it references.</source>
          <target state="translated">以下代码还使用带有标记块的 &lt;code&gt;break&lt;/code&gt; 语句，但会生成语法错误，因为其 &lt;code&gt;break&lt;/code&gt; 语句位于 &lt;code&gt;block_1&lt;/code&gt; 内，但引用了 &lt;code&gt;block_2&lt;/code&gt; 。一个 &lt;code&gt;break&lt;/code&gt; 语句必须始终被嵌套它引用的标签内。</target>
        </trans-unit>
        <trans-unit id="80178a12951e6b00ea750b365c3ae966140db726" translate="yes" xml:space="preserve">
          <source>The following code also uses &lt;code&gt;break&lt;/code&gt; statements with labeled blocks, but generates a &lt;code&gt;SyntaxError&lt;/code&gt; because its &lt;code&gt;break&lt;/code&gt; statement is within &lt;code&gt;block_1&lt;/code&gt; but references &lt;code&gt;block_2&lt;/code&gt;. A &lt;code&gt;break&lt;/code&gt; statement must always be nested within any label it references.</source>
          <target state="translated">以下代码还使用带有标记块的 &lt;code&gt;break&lt;/code&gt; 语句，但会生成 &lt;code&gt;SyntaxError&lt;/code&gt; ,因为其 &lt;code&gt;break&lt;/code&gt; 语句位于 &lt;code&gt;block_1&lt;/code&gt; 内，但引用了 &lt;code&gt;block_2&lt;/code&gt; 。一个 &lt;code&gt;break&lt;/code&gt; 语句必须始终被嵌套它引用的标签内。</target>
        </trans-unit>
        <trans-unit id="5b2c6bb979b31f9336e43bbb6c562ae496f90804" translate="yes" xml:space="preserve">
          <source>The following code checks the value a function's &lt;code&gt;caller&lt;/code&gt; property.</source>
          <target state="translated">以下代码检查函数的 &lt;code&gt;caller&lt;/code&gt; 属性的值。</target>
        </trans-unit>
        <trans-unit id="bc61c85b553d7e6d7463201fbcc2c38c73015b80" translate="yes" xml:space="preserve">
          <source>The following code concatenates nested arrays and demonstrates retention of references:</source>
          <target state="translated">下面的代码连接了嵌套的数组,并演示了引用的保留。</target>
        </trans-unit>
        <trans-unit id="721189f7a2b285c23287b114247606fc04335c83" translate="yes" xml:space="preserve">
          <source>The following code concatenates three arrays:</source>
          <target state="translated">下面的代码连接了三个数组。</target>
        </trans-unit>
        <trans-unit id="88e4d6b9479b0ed44364219826710b43fc799fde" translate="yes" xml:space="preserve">
          <source>The following code concatenates three values to an array:</source>
          <target state="translated">下面的代码将三个值连成一个数组。</target>
        </trans-unit>
        <trans-unit id="d88678328d1fce2a8f610a73f6b66390f32726cb" translate="yes" xml:space="preserve">
          <source>The following code concatenates two arrays:</source>
          <target state="translated">下面的代码连接了两个数组。</target>
        </trans-unit>
        <trans-unit id="110cf46adcf71aba1fd2a9d72394b04b71419aa9" translate="yes" xml:space="preserve">
          <source>The following code creates a &lt;code&gt;Function&lt;/code&gt; object that takes two arguments.</source>
          <target state="translated">以下代码创建一个带两个参数的 &lt;code&gt;Function&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="46f073b8de326c165cbd60cc08891029d5c55341" translate="yes" xml:space="preserve">
          <source>The following code creates a copy of a given object.</source>
          <target state="translated">以下代码创建了一个给定对象的副本。</target>
        </trans-unit>
        <trans-unit id="a9849a78b721a404fa7122bbef9cb4e417ecb54b" translate="yes" xml:space="preserve">
          <source>The following code creates a copy of a given object. There are different ways to create a copy of an object; the following is just one way and is presented to explain how &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; works by using ECMAScript 5 &lt;code&gt;Object.*&lt;/code&gt; meta property functions.</source>
          <target state="translated">以下代码创建给定对象的副本。创建对象副本有多种方法。以下仅是一种方法，用于解释 &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; 如何通过使用ECMAScript 5 &lt;code&gt;Object.*&lt;/code&gt; 元属性函数工作。</target>
        </trans-unit>
        <trans-unit id="71484bb1315e7ead24501719aa5731a2deb6cc7d" translate="yes" xml:space="preserve">
          <source>The following code creates an object type &lt;code&gt;Car&lt;/code&gt; and an instance of that object type, &lt;code&gt;mycar&lt;/code&gt;. The &lt;code&gt;instanceof&lt;/code&gt; operator demonstrates that the &lt;code&gt;mycar&lt;/code&gt; object is of type &lt;code&gt;Car&lt;/code&gt; and of type &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">以下代码创建一个对象类型 &lt;code&gt;Car&lt;/code&gt; 以及该对象类型 &lt;code&gt;mycar&lt;/code&gt; 的实例。该 &lt;code&gt;instanceof&lt;/code&gt; 运算符表明， &lt;code&gt;mycar&lt;/code&gt; 对象类型的 &lt;code&gt;Car&lt;/code&gt; 和类型的 &lt;code&gt;Object&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="67ba62584852fb890616fcc0a2c09fda249c7266" translate="yes" xml:space="preserve">
          <source>The following code creates an object with three properties and the keys are &lt;code&gt;&quot;foo&quot;&lt;/code&gt;, &lt;code&gt;&quot;age&quot;&lt;/code&gt; and &lt;code&gt;&quot;baz&quot;&lt;/code&gt;. The values of these keys are a string &lt;code&gt;&quot;bar&quot;&lt;/code&gt;, the number &lt;code&gt;42&lt;/code&gt;, and another object.</source>
          <target state="translated">以下代码创建一个具有三个属性的对象，其键为 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; ， &lt;code&gt;&quot;age&quot;&lt;/code&gt; 和 &lt;code&gt;&quot;baz&quot;&lt;/code&gt; 。这些键的值是字符串 &lt;code&gt;&quot;bar&quot;&lt;/code&gt; ，数字 &lt;code&gt;42&lt;/code&gt; 和另一个对象。</target>
        </trans-unit>
        <trans-unit id="b28fa1c2b41f239a7356294e9946fbce3f7aae1b" translate="yes" xml:space="preserve">
          <source>The following code creates and assigns &lt;code&gt;dogToString()&lt;/code&gt; to override the default &lt;code&gt;toString()&lt;/code&gt; method. This function generates a string containing the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;breed&lt;/code&gt;, &lt;code&gt;color&lt;/code&gt;, and &lt;code&gt;sex&lt;/code&gt; of the object, in the form &quot;&lt;code&gt;property = value;&lt;/code&gt;&quot;.</source>
          <target state="translated">以下代码创建并分配 &lt;code&gt;dogToString()&lt;/code&gt; 来覆盖默认的 &lt;code&gt;toString()&lt;/code&gt; 方法。该函数生成一个字符串，其中包含对象的 &lt;code&gt;name&lt;/code&gt; ， &lt;code&gt;breed&lt;/code&gt; ， &lt;code&gt;color&lt;/code&gt; 和 &lt;code&gt;sex&lt;/code&gt; ，形式为&amp;ldquo; &lt;code&gt;property = value;&lt;/code&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="22f1f0dc224fbf380d776e34e3dd118d0155b6b5" translate="yes" xml:space="preserve">
          <source>The following code creates and assigns &lt;code&gt;dogToString()&lt;/code&gt; to override the default &lt;code&gt;toString()&lt;/code&gt; method. This function generates a string containing the name, breed, color, and sex of the object, in the form &quot;&lt;code&gt;property = value;&lt;/code&gt;&quot;.</source>
          <target state="translated">以下代码创建并分配 &lt;code&gt;dogToString()&lt;/code&gt; 来覆盖默认的 &lt;code&gt;toString()&lt;/code&gt; 方法。此函数生成一个字符串，其中包含对象的名称，品种，颜色和性别，形式为&amp;ldquo; &lt;code&gt;property = value;&lt;/code&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="f9ae4575b00eb655fe2bc58c8c2ed78bc0bf00a2" translate="yes" xml:space="preserve">
          <source>The following code creates the &lt;code&gt;myFish&lt;/code&gt; array containing four elements, then removes its last element.</source>
          <target state="translated">以下代码创建包含四个元素的 &lt;code&gt;myFish&lt;/code&gt; 数组，然后删除其最后一个元素。</target>
        </trans-unit>
        <trans-unit id="57ea99bca4b49baa8b5033cc82ddd78a6fa41b95" translate="yes" xml:space="preserve">
          <source>The following code creates the &lt;code&gt;myFish&lt;/code&gt; array-like object containing four elements and a length parameter, then removes its last element and decrements the length parameter.</source>
          <target state="translated">以下代码创建包含四个元素和一个length参数的 &lt;code&gt;myFish&lt;/code&gt; 类数组对象，然后删除其最后一个元素并减小length参数。</target>
        </trans-unit>
        <trans-unit id="8ee25846ad2f6848444fd67100bb8495aeb28612" translate="yes" xml:space="preserve">
          <source>The following code creates the &lt;code&gt;sports&lt;/code&gt; array containing two elements, then appends two elements to it. The &lt;code&gt;total&lt;/code&gt; variable contains the new length of the array.</source>
          <target state="translated">以下代码创建包含两个元素的 &lt;code&gt;sports&lt;/code&gt; 数组，然后向其添加两个元素。的 &lt;code&gt;total&lt;/code&gt; 变量包含所述阵列的新长度。</target>
        </trans-unit>
        <trans-unit id="5413c9f47f7525067295e645eb7a51acc99bc3ba" translate="yes" xml:space="preserve">
          <source>The following code declares a function that returns the total amount of sales, when given the number of units sold of products &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">以下代码声明一个函数，该函数在给定产品 &lt;code&gt;a&lt;/code&gt; ， &lt;code&gt;b&lt;/code&gt; 和 &lt;code&gt;c&lt;/code&gt; 的销售单位数的情况下返回销售总额。</target>
        </trans-unit>
        <trans-unit id="6ac5f417776932fa98a727d7e5e02064aafd61d7" translate="yes" xml:space="preserve">
          <source>The following code defines the &lt;code&gt;Dog&lt;/code&gt; object type and creates &lt;code&gt;theDog&lt;/code&gt;, an object of type &lt;code&gt;Dog&lt;/code&gt;:</source>
          <target state="translated">下面的代码定义的 &lt;code&gt;Dog&lt;/code&gt; 对象的类型和创建 &lt;code&gt;theDog&lt;/code&gt; ，类型的对象 &lt;code&gt;Dog&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="bfb04ee46c737543b1cf531796942fcab6e602ea" translate="yes" xml:space="preserve">
          <source>The following code displays the &lt;code&gt;myFish&lt;/code&gt; array before and after removing its first element. It also displays the removed element:</source>
          <target state="translated">以下代码显示 &lt;code&gt;myFish&lt;/code&gt; 数组在删除其第一个元素之前和之后的情况。它还显示已删除的元素：</target>
        </trans-unit>
        <trans-unit id="ffdac7d52063387499a1184a4731dd0d49cf9966" translate="yes" xml:space="preserve">
          <source>The following code divides two numeric values. If the result is greater than or equal to &lt;code&gt;MIN_VALUE&lt;/code&gt;, the &lt;code&gt;func1&lt;/code&gt; function is called; otherwise, the &lt;code&gt;func2&lt;/code&gt; function is called.</source>
          <target state="translated">以下代码将两个数值相除。如果结果大于或等于 &lt;code&gt;MIN_VALUE&lt;/code&gt; ，则 &lt;code&gt;func1&lt;/code&gt; 函数。否则，将 &lt;code&gt;func2&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="34ea08a0429c988f788b3868433bf1a2db2c2010" translate="yes" xml:space="preserve">
          <source>The following code has a &lt;code&gt;break&lt;/code&gt; statement that terminates the &lt;a href=&quot;switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt; statement when a case is matched and the corresponding code has ran</source>
          <target state="translated">以下代码包含一个 &lt;code&gt;break&lt;/code&gt; 语句，当匹配大小写并且已经运行了相应的代码时，该语句将终止&lt;a href=&quot;switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt;语句</target>
        </trans-unit>
        <trans-unit id="663309fd2d791afb83983daa321c7268c1fe80e8" translate="yes" xml:space="preserve">
          <source>The following code improperly initializes the proxy. The &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; in Proxy initialization must itself be a valid constructor for the &lt;a href=&quot;../../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">以下代码不正确地初始化了代理。代理初始化中的 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; 本身必须是&lt;a href=&quot;../../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;运算符的有效构造函数。</target>
        </trans-unit>
        <trans-unit id="4aebfbac775644f52742648c8188228c29aec3c2" translate="yes" xml:space="preserve">
          <source>The following code improperly initializes the proxy. The &lt;code&gt;target&lt;/code&gt; in Proxy initialization must itself be a valid constructor for the &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">以下代码不正确地初始化了代理。代理初始化中的 &lt;code&gt;target&lt;/code&gt; 本身必须是 &lt;code&gt;new&lt;/code&gt; 运算符的有效构造函数。</target>
        </trans-unit>
        <trans-unit id="ac713b40525625199d7a101c2127f6d4f76c80da" translate="yes" xml:space="preserve">
          <source>The following code is the declaration of an example generator function.</source>
          <target state="translated">下面的代码是一个实例生成函数的声明。</target>
        </trans-unit>
        <trans-unit id="1b2d53d50b851e948adb1e6d5da2847f3cf5987b" translate="yes" xml:space="preserve">
          <source>The following code logs a line for each element in a &lt;code&gt;Set&lt;/code&gt; object:</source>
          <target state="translated">以下代码为 &lt;code&gt;Set&lt;/code&gt; 对象中的每个元素记录一行：</target>
        </trans-unit>
        <trans-unit id="0cbf9e164e68b93693f30543959a7f06e0dec2e9" translate="yes" xml:space="preserve">
          <source>The following code logs a line for each element in a typed array:</source>
          <target state="translated">下面的代码为一个类型化数组中的每个元素记录一行。</target>
        </trans-unit>
        <trans-unit id="9572c259a051431f4f450301d23fc521a93a28a7" translate="yes" xml:space="preserve">
          <source>The following code logs a line for each element in an &lt;code&gt;Map&lt;/code&gt; object:</source>
          <target state="translated">以下代码为 &lt;code&gt;Map&lt;/code&gt; 对象中的每个元素记录一行：</target>
        </trans-unit>
        <trans-unit id="05e676495dcfad5f9d42d6c2de9e3bca1f4630c4" translate="yes" xml:space="preserve">
          <source>The following code logs a line for each element in an array:</source>
          <target state="translated">下面的代码为一个数组中的每个元素记录一行。</target>
        </trans-unit>
        <trans-unit id="555c0c32448becb397f810790a2420788ccadd71" translate="yes" xml:space="preserve">
          <source>The following code multiplies two numeric values. If the result is less than or equal to &lt;code&gt;MAX_VALUE&lt;/code&gt;, the &lt;code&gt;func1&lt;/code&gt; function is called; otherwise, the &lt;code&gt;func2&lt;/code&gt; function is called.</source>
          <target state="translated">以下代码将两个数值相乘。如果结果小于或等于 &lt;code&gt;MAX_VALUE&lt;/code&gt; ，则 &lt;code&gt;func1&lt;/code&gt; 函数。否则，将 &lt;code&gt;func2&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="1dad9ae9491ee1eb3386f8bbf689412c9a122c35" translate="yes" xml:space="preserve">
          <source>The following code prints the values of the diagonal elements in the array:</source>
          <target state="translated">下面的代码打印了数组中对角线元素的值。</target>
        </trans-unit>
        <trans-unit id="446e09962f6db0b1d8da76d9107b976aea69c91f" translate="yes" xml:space="preserve">
          <source>The following code shows examples of the &lt;code&gt;!&lt;/code&gt; (logical NOT) operator.</source>
          <target state="translated">以下代码显示了 &lt;code&gt;!&lt;/code&gt; 的示例。（逻辑非）运算符。</target>
        </trans-unit>
        <trans-unit id="657425e8ce502911d7f0c1f47f8e38c9591acb40" translate="yes" xml:space="preserve">
          <source>The following code shows examples of the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (logical AND) operator.</source>
          <target state="translated">以下代码显示了 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; （逻辑AND）运算符的示例。</target>
        </trans-unit>
        <trans-unit id="087b529d19673cc07b3d2ea0403068125326b88d" translate="yes" xml:space="preserve">
          <source>The following code shows examples of the &lt;code&gt;||&lt;/code&gt; (logical OR) operator.</source>
          <target state="translated">以下代码显示 &lt;code&gt;||&lt;/code&gt; 的示例 （逻辑或）运算符。</target>
        </trans-unit>
        <trans-unit id="40c22740464b0d18057f074a4ca9a6f4c262fe5f" translate="yes" xml:space="preserve">
          <source>The following code shows how &lt;code&gt;map&lt;/code&gt; works when a function requiring one argument is used with it. The argument will automatically be assigned from each element of the array as &lt;code&gt;map&lt;/code&gt; loops through the original array.</source>
          <target state="translated">以下代码显示了当地 &lt;code&gt;map&lt;/code&gt; 中使用需要一个参数的函数时，地图如何工作。当 &lt;code&gt;map&lt;/code&gt; 遍历原始数组时，将从数组的每个元素中自动分配自变量。</target>
        </trans-unit>
        <trans-unit id="6128024108440d20cd751bb31df0569a7704752f" translate="yes" xml:space="preserve">
          <source>The following code shows how map works when a function requiring one argument is used with it. The argument will automatically be assigned from each element of the array as map loops through the original array.</source>
          <target state="translated">下面的代码显示了当一个需要一个参数的函数与它一起使用时,map是如何工作的。当map在原数组中循环时,参数将从数组的每个元素中自动分配。</target>
        </trans-unit>
        <trans-unit id="93cbd7a9b13ccbb2681320f45c12dc3e14c7a3b6" translate="yes" xml:space="preserve">
          <source>The following code shows how map works when a function requiring one argument is used with it. The argument will automatically be assigned to each element of the typed array as map loops through the original typed array.</source>
          <target state="translated">下面的代码显示了当一个需要一个参数的函数与它一起使用时,map是如何工作的。当map循环浏览原始类型数组时,参数将自动分配给类型数组的每个元素。</target>
        </trans-unit>
        <trans-unit id="23544ad4adcdcbd6a5e3021ebfaf4350ede55f3a" translate="yes" xml:space="preserve">
          <source>The following code takes a typed array and creates a new typed array containing the square roots of the numbers in the first typed array.</source>
          <target state="translated">以下代码取一个类型化数组,并创建一个新的类型化数组,其中包含第一个类型化数组中数字的平方根。</target>
        </trans-unit>
        <trans-unit id="91dfb78c282609f0ca90e823f00a7c1bcabc053d" translate="yes" xml:space="preserve">
          <source>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.</source>
          <target state="translated">下面的代码取一个数组并创建一个新的数组,其中包含第一个数组中的数字的平方根。</target>
        </trans-unit>
        <trans-unit id="990fbd2a82909cc731cb6de1db1e4e7e5988d7ca" translate="yes" xml:space="preserve">
          <source>The following code takes an array of objects and creates a new array containing the newly reformatted objects.</source>
          <target state="translated">下面的代码取一个对象数组,并创建一个包含新格式化对象的新数组。</target>
        </trans-unit>
        <trans-unit id="b6a73ccf50bc94f930d475afad31b662aad507c8" translate="yes" xml:space="preserve">
          <source>The following code traps &lt;a href=&quot;../../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下代码将捕获&lt;a href=&quot;../../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a4ae609986c2bf700187679a0155e67f383001d4" translate="yes" xml:space="preserve">
          <source>The following code traps &lt;a href=&quot;../../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下代码陷阱&lt;a href=&quot;../../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d7fbdba357c15d5ef4893b679bc519284fa94e89" translate="yes" xml:space="preserve">
          <source>The following code traps &lt;a href=&quot;../../object/getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下代码陷阱&lt;a href=&quot;../../object/getownpropertynames&quot;&gt; &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2316ce910c2a16a8f31a8d35f44ce184b5d5110b" translate="yes" xml:space="preserve">
          <source>The following code traps &lt;a href=&quot;../../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下代码陷阱&lt;a href=&quot;../../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f43f449540c9caa7886889ce45d41a2cbc1b2b1d" translate="yes" xml:space="preserve">
          <source>The following code traps &lt;a href=&quot;../../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下代码陷阱&lt;a href=&quot;../../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="36b83b244b13ce0e00fbb489c5813644ab6b0abf" translate="yes" xml:space="preserve">
          <source>The following code traps a function call.</source>
          <target state="translated">以下代码是一个函数调用的陷阱。</target>
        </trans-unit>
        <trans-unit id="4ee4a393b6cbc0d511ffdc59d8483abe6e9b1be3" translate="yes" xml:space="preserve">
          <source>The following code traps getting a property value.</source>
          <target state="translated">以下代码是获取属性值的陷阱。</target>
        </trans-unit>
        <trans-unit id="ab8ce6ea525ee3a1bd25238d16dafa8cfd2ab091" translate="yes" xml:space="preserve">
          <source>The following code traps setting a property value.</source>
          <target state="translated">以下代码是设置属性值的陷阱。</target>
        </trans-unit>
        <trans-unit id="4a3d5a01f344846da6a7dad4757ca86f93853d89" translate="yes" xml:space="preserve">
          <source>The following code traps the &lt;a href=&quot;../../../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">以下代码陷阱&lt;a href=&quot;../../../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt;操作符。</target>
        </trans-unit>
        <trans-unit id="e483290e7f76f08d2648b23c16bc2204b6ff38ba" translate="yes" xml:space="preserve">
          <source>The following code traps the &lt;a href=&quot;../../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">以下代码捕获&lt;a href=&quot;../../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;运算符。</target>
        </trans-unit>
        <trans-unit id="25504055279ad082d3562335a453315f18588211" translate="yes" xml:space="preserve">
          <source>The following code traps the &lt;a href=&quot;../../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">以下代码将捕获&lt;a href=&quot;../../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;运算符。</target>
        </trans-unit>
        <trans-unit id="79f411fcb5d68a6edc77d42c81be12111b8fbca2" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;break&lt;/code&gt; statements with labeled blocks. A &lt;code&gt;break&lt;/code&gt; statement must be nested within any label it references. Notice that &lt;code&gt;inner_block&lt;/code&gt; is nested within &lt;code&gt;outer_block&lt;/code&gt;.</source>
          <target state="translated">以下代码使用带有标记块的 &lt;code&gt;break&lt;/code&gt; 语句。一个 &lt;code&gt;break&lt;/code&gt; 声明必须嵌套它引用的标签内。请注意， &lt;code&gt;inner_block&lt;/code&gt; 嵌套在 &lt;code&gt;outer_block&lt;/code&gt; 内。</target>
        </trans-unit>
        <trans-unit id="7a5972c72258c23f426a231b566e63137af62bd5" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;instanceof&lt;/code&gt; to demonstrate that &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt; objects are also of type &lt;code&gt;Object&lt;/code&gt; (they are derived from &lt;code&gt;Object&lt;/code&gt;).</source>
          <target state="translated">以下代码使用 &lt;code&gt;instanceof&lt;/code&gt; 演示 &lt;code&gt;String&lt;/code&gt; 和 &lt;code&gt;Date&lt;/code&gt; 对象也是 &lt;code&gt;Object&lt;/code&gt; 类型的（它们是从 &lt;code&gt;Object&lt;/code&gt; 派生的）。</target>
        </trans-unit>
        <trans-unit id="ef022a2af0822c75bf6d97a3907794c965929c70" translate="yes" xml:space="preserve">
          <source>The following code violates an invariant.</source>
          <target state="translated">以下代码违反了一个不变量。</target>
        </trans-unit>
        <trans-unit id="2cccfb58d874a9ff644e87a991d031d323732fb2" translate="yes" xml:space="preserve">
          <source>The following code violates the invariant.</source>
          <target state="translated">以下代码违反了不变性。</target>
        </trans-unit>
        <trans-unit id="be65d173a4ebcaa7bda004853274c64fd29e4be8" translate="yes" xml:space="preserve">
          <source>The following code was used to check the value of &lt;code&gt;arguments.caller&lt;/code&gt; in a function, but doesn't work anymore.</source>
          <target state="translated">以下代码用于检查函数中 &lt;code&gt;arguments.caller&lt;/code&gt; 的值，但不再起作用。</target>
        </trans-unit>
        <trans-unit id="f66a2585b75f449626494103e61d755dfb30114c" translate="yes" xml:space="preserve">
          <source>The following code will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">以下代码将引发&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="7814b38c4660f2f789f848f5e4d62c2ad7b2f22d" translate="yes" xml:space="preserve">
          <source>The following code works fine in ES5 and below. However, in ECMAScript 2015 and later, the &lt;a href=&quot;../array/keys&quot;&gt;&lt;code&gt;Array.prototype.keys()&lt;/code&gt;&lt;/a&gt; method was introduced. That means that inside &lt;code&gt;with&lt;/code&gt; environment &quot;keys&quot; would now be the method and not the variable. That's when the &lt;code&gt;unscopable&lt;/code&gt;s symbol was introduced. A built-in &lt;code&gt;unscopables&lt;/code&gt; setting is implemented as &lt;a href=&quot;../array/@@unscopables&quot;&gt;&lt;code&gt;Array.prototype[@@unscopables]&lt;/code&gt;&lt;/a&gt; to prevent that some of the Array methods are being scoped into the &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="translated">以下代码在ES5及以下版本中正常运行。但是，在ECMAScript 2015及更高版本中，引入了&lt;a href=&quot;../array/keys&quot;&gt; &lt;code&gt;Array.prototype.keys()&lt;/code&gt; &lt;/a&gt;方法。这意味着，内部 &lt;code&gt;with&lt;/code&gt; 环境的&amp;ldquo;钥匙&amp;rdquo;现在是方法，而不是变量。那是引入 &lt;code&gt;unscopable&lt;/code&gt; s符号的时候。内置的 &lt;code&gt;unscopables&lt;/code&gt; 设置被实现为&lt;a href=&quot;../array/@@unscopables&quot;&gt; &lt;code&gt;Array.prototype[@@unscopables]&lt;/code&gt; &lt;/a&gt;以防止某些Array方法被限制在 &lt;code&gt;with&lt;/code&gt; 语句中。</target>
        </trans-unit>
        <trans-unit id="65ed457c8a763018d44cf10f276cc37398e395c2" translate="yes" xml:space="preserve">
          <source>The following code works fine in ES5 and below. However, in ECMAScript 2015 and later, the &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Array.prototype.keys()&lt;/code&gt;&lt;/a&gt; method was introduced. That means that inside &lt;code&gt;with&lt;/code&gt; environments, &quot;keys&quot; would now be the method and not the variable. This is where now the built-in &lt;code&gt;@@unscopables&lt;/code&gt;&lt;code&gt;Array.prototype[@@unscopables]&lt;/code&gt; symbol property comes into play and prevents that some of the Array methods are being scoped into the &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="translated">以下代码在ES5及以下版本中正常运行。但是，在ECMAScript 2015及更高版本中，引入了&lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Array.prototype.keys()&lt;/code&gt; &lt;/a&gt;方法。这意味着，内 &lt;code&gt;with&lt;/code&gt; 环境，&amp;ldquo;钥匙&amp;rdquo;将是现在的方法，而不是变量。现在，这里是内置 &lt;code&gt;@@unscopables&lt;/code&gt; &lt;code&gt;Array.prototype[@@unscopables]&lt;/code&gt; 符号属性的作用，它可以防止某些Array方法被限制在 &lt;code&gt;with&lt;/code&gt; 语句中。</target>
        </trans-unit>
        <trans-unit id="5be88a9ec97ad8644effea0e9ddef927a9326c34" translate="yes" xml:space="preserve">
          <source>The following composite operation involving &lt;strong&gt;booleans&lt;/strong&gt;:</source>
          <target state="translated">以下涉及&lt;strong&gt;布尔值的&lt;/strong&gt;复合操作：</target>
        </trans-unit>
        <trans-unit id="cb142fc147e63e6c8e71931fb3e4597a4a15e0f3" translate="yes" xml:space="preserve">
          <source>The following composite operation involving Booleans:</source>
          <target state="translated">下面是涉及布尔式的复合操作。</target>
        </trans-unit>
        <trans-unit id="f56868c1c01d0df57c3b0204e374f8e3a30a51f9" translate="yes" xml:space="preserve">
          <source>The following comprehension takes an array of numbers and creates a new array of the double of each of those numbers.</source>
          <target state="translated">下面的理解取一个数字数组,并为每个数字的双倍创建一个新数组。</target>
        </trans-unit>
        <trans-unit id="8c8184ab9029406f0c35972bd8af1634a5c88cd5" translate="yes" xml:space="preserve">
          <source>The following creates a chess board as a two-dimensional array of strings. The first move is made by copying the 'p' in (6,4) to (4,4). The old position (6,4) is made blank.</source>
          <target state="translated">下面将创建一个二维字符串数组的棋盘。第一步是通过将(6,4)中的'p'复制到(4,4)中。旧位置(6,4)是空白的。</target>
        </trans-unit>
        <trans-unit id="2c333cf31e985dcd9c5648af15242b10417d6e7e" translate="yes" xml:space="preserve">
          <source>The following creates a chessboard as a two-dimensional array of strings. The first move is made by copying the &lt;code&gt;'p'&lt;/code&gt; in &lt;code&gt;board[6][4]&lt;/code&gt; to &lt;code&gt;board[4][4]&lt;/code&gt;. The old position at &lt;code&gt;[6][4]&lt;/code&gt; is made blank.</source>
          <target state="translated">以下内容将棋盘创建为二维字符串数组。第一移动通过复制制造 &lt;code&gt;'p'&lt;/code&gt; 在 &lt;code&gt;board[6][4]&lt;/code&gt; 至 &lt;code&gt;board[4][4]&lt;/code&gt; 。将 &lt;code&gt;[6][4]&lt;/code&gt; 上的旧位置设为空白。</target>
        </trans-unit>
        <trans-unit id="22448211d9daeba006917d76dca51732108327f5" translate="yes" xml:space="preserve">
          <source>The following encodes &lt;code&gt;~314&lt;/code&gt;, i.e. the ones' complement of &lt;code&gt;314&lt;/code&gt;:</source>
          <target state="translated">下面的编码 &lt;code&gt;~314&lt;/code&gt; ，即1的补码 &lt;code&gt;314&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="17470c9f776b2250318b28cf1d1ffc7e6f3a5e08" translate="yes" xml:space="preserve">
          <source>The following example (see &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.html&quot;&gt;memory.html&lt;/a&gt; on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/memory.html&quot;&gt;view it live also&lt;/a&gt;) fetches and instantiates the loaded memory.wasm byte code using the &lt;a href=&quot;../instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method, while importing the memory created in the line above. It then stores some values in that memory, then exports a function and uses it to sum some values.</source>
          <target state="translated">以下示例（请参阅GitHub上的&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.html&quot;&gt;memory.html&lt;/a&gt;，也&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/memory.html&quot;&gt;可以实时查看&lt;/a&gt;），使用&lt;a href=&quot;../instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;方法获取并实例化已加载的memory.wasm字节码，同时导入在上一行中创建的内存。然后它将一些值存储在该内存中，然后导出一个函数并使用它求和一些值。</target>
        </trans-unit>
        <trans-unit id="981dbbb700347ec94c9580cfc5638be5b3b0be36" translate="yes" xml:space="preserve">
          <source>The following example (see &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table.html&quot;&gt;table.html&lt;/a&gt; on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table.html&quot;&gt;view it live&lt;/a&gt; also) compiles and instantiates the loaded table.wasm byte code using the &lt;a href=&quot;../instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method. It then retrieves the references stored in the exported table.</source>
          <target state="translated">下面的示例（请参阅GitHub上的&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table.html&quot;&gt;table.html&lt;/a&gt;，并&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table.html&quot;&gt;实时查看&lt;/a&gt;）使用&lt;a href=&quot;../instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt;方法编译并实例化已加载的table.wasm字节代码。然后，它检索存储在导出表中的引用。</target>
        </trans-unit>
        <trans-unit id="7f7270c5a457873286226e276262e42332f056a3" translate="yes" xml:space="preserve">
          <source>The following example (see imports.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/imports.html&quot;&gt;source code&lt;/a&gt;; &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/imports.html&quot;&gt;see it live also&lt;/a&gt;) compiles the loaded simple.wasm module. This module is then queried for its imports.</source>
          <target state="translated">以下示例（请参阅imports.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/imports.html&quot;&gt;源代码&lt;/a&gt;；&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/imports.html&quot;&gt;请同时参见此&lt;/a&gt;示例）将编译已加载的simple.wasm模块。然后查询该模块的导入。</target>
        </trans-unit>
        <trans-unit id="8be40e21a9e877159efe0525f36b240712dbcbd2" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/compile-streaming.html&quot;&gt;compile-streaming.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/compile-streaming.html&quot;&gt;view it live&lt;/a&gt; also) directly streams a .wasm module from an underlying source then compiles it to a &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object. Because the &lt;code&gt;compileStreaming()&lt;/code&gt; function accepts a promise for a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object, you can directly pass it a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt;&lt;code&gt;WindowOrWorkerGlobalScope.fetch()&lt;/code&gt;&lt;/a&gt; call, and it will pass the response into the function when it fulfills.</source>
          <target state="translated">以下示例（请参阅GitHub上的&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/compile-streaming.html&quot;&gt;compile-streaming.html&lt;/a&gt;演示，并&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/compile-streaming.html&quot;&gt;实时查看它&lt;/a&gt;）直接从基础源流式传输.wasm模块，然后将其编译为&lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt;对象。由于 &lt;code&gt;compileStreaming()&lt;/code&gt; 函数接受对&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt;对象的promise ，因此您可以直接将&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt; &lt;code&gt;WindowOrWorkerGlobalScope.fetch()&lt;/code&gt; &lt;/a&gt;调用传递给该对象，并在响应完成时将响应传递给该函数。</target>
        </trans-unit>
        <trans-unit id="a6ae5b74d8e14e8953b0f9fe248151245b6413e0" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/compile-streaming.html&quot;&gt;compile-streaming.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/compile-streaming.html&quot;&gt;view it live&lt;/a&gt; also) directly streams a .wasm module from an underlying source then compiles it to a &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object. Because the &lt;code&gt;compileStreaming()&lt;/code&gt; function accepts a promise for a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object, you can directly pass it a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt;&lt;code&gt;WindowOrWorkerGlobalScope.fetch()&lt;/code&gt;&lt;/a&gt; call, and it will pass the response into the function when it fulfills.</source>
          <target state="translated">下面的示例（请参见GitHub上的&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/compile-streaming.html&quot;&gt;compile-streaming.html&lt;/a&gt;演示，并&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/compile-streaming.html&quot;&gt;现场观看&lt;/a&gt;）直接从基础源流式传输.wasm模块，然后将其编译为&lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt;对象。由于 &lt;code&gt;compileStreaming()&lt;/code&gt; 函数接受对&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt;对象的promise ，因此您可以直接将&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt; &lt;code&gt;WindowOrWorkerGlobalScope.fetch()&lt;/code&gt; &lt;/a&gt;调用传递给它，并在响应完成时将响应传递给该函数。</target>
        </trans-unit>
        <trans-unit id="53be014f3a4cb1626bdfbf9e32e14585455937df" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;view it live&lt;/a&gt; also) compiles the loaded &lt;code&gt;simple.wasm&lt;/code&gt; byte code using the &lt;a href=&quot;compilestreaming&quot;&gt;&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt;&lt;/a&gt; method and then sends the resulting &lt;code&gt;Module&lt;/code&gt; instance to a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;worker&lt;/a&gt; using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;&lt;code&gt;postMessage()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下示例（请参阅GitHub上的&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt;演示，并&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;现场观看&lt;/a&gt;）使用&lt;a href=&quot;compilestreaming&quot;&gt; &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; &lt;/a&gt;方法编译已加载的 &lt;code&gt;simple.wasm&lt;/code&gt; 字节代码，然后使用&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt; &lt;code&gt;postMessage()&lt;/code&gt; &lt;/a&gt;）将生成的 &lt;code&gt;Module&lt;/code&gt; 实例发送给&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;工作程序&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="8fbc142b33431162d5fa601429ab3ef586de33d3" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;view it live&lt;/a&gt; also) compiles the loaded simple.wasm byte code using the &lt;a href=&quot;../compilestreaming&quot;&gt;&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt;&lt;/a&gt; method and then sends it to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;worker&lt;/a&gt; using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt;.</source>
          <target state="translated">以下示例（请参阅GitHub上的&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt;演示，并&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;现场观看&lt;/a&gt;）使用&lt;a href=&quot;../compilestreaming&quot;&gt; &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; &lt;/a&gt;方法编译已加载的simple.wasm字节代码，然后使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage（）&lt;/a&gt;将其发送给&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;工作程序&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="425eee5fd9b831445fafddc4cbc8f451497cb3b7" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;view it live&lt;/a&gt; also) compiles the loaded simple.wasm byte code using the &lt;a href=&quot;../compilestreaming&quot;&gt;&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt;&lt;/a&gt; method and then sends it to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;worker&lt;/a&gt; using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt;.</source>
          <target state="translated">以下示例（请参阅GitHub上的&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt;演示，并&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;现场观看&lt;/a&gt;）使用&lt;a href=&quot;../compilestreaming&quot;&gt; &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; &lt;/a&gt;方法编译已加载的simple.wasm字节代码，然后使用&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage（）&lt;/a&gt;将其发送给&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;工作程序&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a4be8e69110269721fd01b14c26ce7095dc1f463" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;view it live&lt;/a&gt; also) compiles the loaded simple.wasm byte code using the &lt;a href=&quot;compilestreaming&quot;&gt;&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt;&lt;/a&gt; method and then sends it to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;worker&lt;/a&gt; using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt;.</source>
          <target state="translated">以下示例（请参阅GitHub上的&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt;演示，并&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;现场观看&lt;/a&gt;）使用&lt;a href=&quot;compilestreaming&quot;&gt; &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; &lt;/a&gt;方法编译已加载的simple.wasm字节代码，然后使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage（）&lt;/a&gt;将其发送给&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;工作程序&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="99830cdcbf9155363e0babc88536b78d2f5ed898" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;view it live&lt;/a&gt; also) compiles the loaded simple.wasm byte code using the &lt;a href=&quot;compilestreaming&quot;&gt;&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt;&lt;/a&gt; method and then sends it to a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;worker&lt;/a&gt; using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;&lt;code&gt;postMessage()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下示例（请参阅GitHub上的&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt;演示，并&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;现场观看&lt;/a&gt;）使用&lt;a href=&quot;compilestreaming&quot;&gt; &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; &lt;/a&gt;方法编译已加载的simple.wasm字节代码，然后使用&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt; &lt;code&gt;postMessage()&lt;/code&gt; &lt;/a&gt;将其发送给&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;工作程序&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="55ed400983182592d2bee361ee8810fd4e6d4f77" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/instantiate-streaming.html&quot;&gt;instantiate-streaming.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/instantiate-streaming.html&quot;&gt;view it live&lt;/a&gt; also) directly streams a .wasm module from an underlying source then compiles and instantiates it, the promise fulfilling with a &lt;code&gt;ResultObject&lt;/code&gt;. Because the &lt;code&gt;instantiateStreaming()&lt;/code&gt; function accepts a promise for a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object, you can directly pass it a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt;&lt;code&gt;WindowOrWorkerGlobalScope.fetch()&lt;/code&gt;&lt;/a&gt; call, and it will pass the response into the function when it fulfills.</source>
          <target state="translated">下面的示例（请参见GitHub上的Instantiate &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/instantiate-streaming.html&quot;&gt;-streaming.html&lt;/a&gt;演示，并&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/instantiate-streaming.html&quot;&gt;现场观看&lt;/a&gt;）直接从基础源流式传输.wasm模块，然后对其进行编译和实例化，并通过 &lt;code&gt;ResultObject&lt;/code&gt; 实现。因为&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt; &lt;code&gt;WindowOrWorkerGlobalScope.fetch()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;instantiateStreaming()&lt;/code&gt; 函数接受对&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt;对象的承诺，所以您可以直接将WindowOrWorkerGlobalScope.fetch（）调用传递给它，并且它将在响应完成时将响应传递给该函数。</target>
        </trans-unit>
        <trans-unit id="4f226b89a3d4aad9c212a95fed47ada052b698d3" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/instantiate-streaming.html&quot;&gt;instantiate-streaming.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/instantiate-streaming.html&quot;&gt;view it live&lt;/a&gt; also) directly streams a .wasm module from an underlying source then compiles and instantiates it, the promise fulfilling with a &lt;code&gt;ResultObject&lt;/code&gt;. Because the &lt;code&gt;instantiateStreaming()&lt;/code&gt; function accepts a promise for a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object, you can directly pass it a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt;&lt;code&gt;WindowOrWorkerGlobalScope.fetch()&lt;/code&gt;&lt;/a&gt; call, and it will pass the response into the function when it fulfills.</source>
          <target state="translated">以下示例（请参阅GitHub上的Instantiate &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/instantiate-streaming.html&quot;&gt;-streaming.html&lt;/a&gt;演示，并&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/instantiate-streaming.html&quot;&gt;实时查看它&lt;/a&gt;）直接从基础源流式传输.wasm模块，然后对其进行编译和实例化，并通过 &lt;code&gt;ResultObject&lt;/code&gt; 实现。由于&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt; &lt;code&gt;WindowOrWorkerGlobalScope.fetch()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;instantiateStreaming()&lt;/code&gt; 函数接受对&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt;对象的promise ，因此您可以直接将WindowOrWorkerGlobalScope.fetch（）调用传递给它，并在响应完成时将响应传递给该函数。</target>
        </trans-unit>
        <trans-unit id="7a65ae3251766cd2a7a0fcb51f98859e86206631" translate="yes" xml:space="preserve">
          <source>The following example (see table2.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.html&quot;&gt;source code&lt;/a&gt; and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table2.html&quot;&gt;live version&lt;/a&gt;) creates a new WebAssembly Table instance with an initial size of 2 elements. We then print out the table length and contents of the two indexes (retrieved via &lt;a href=&quot;get&quot;&gt;&lt;code&gt;Table.prototype.get()&lt;/code&gt;&lt;/a&gt; to show that the length is two and both elements are &lt;a href=&quot;../../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下示例（请参见table2.html&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.html&quot;&gt;源代码&lt;/a&gt;和&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table2.html&quot;&gt;实时版本&lt;/a&gt;）创建一个新的WebAssembly Table实例，其初始大小为2个元素。然后，我们打印出表的长度和两个索引的内容（通过&lt;a href=&quot;get&quot;&gt; &lt;code&gt;Table.prototype.get()&lt;/code&gt; &lt;/a&gt;进行检索，以显示长度为2且两个元素均为&lt;a href=&quot;../../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; )&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="074b310b066d2912c353138074d2c4298ef9da96" translate="yes" xml:space="preserve">
          <source>The following example (see table2.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.html&quot;&gt;source code&lt;/a&gt; and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table2.html&quot;&gt;live version&lt;/a&gt;) creates a new WebAssembly Table instance with an initial size of 2 elements. We then print out the table length and contents of the two indexes (retrieved via &lt;a href=&quot;table/get&quot;&gt;&lt;code&gt;Table.prototype.get()&lt;/code&gt;&lt;/a&gt; to show that the length is two and both elements are &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下示例（请参见table2.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.html&quot;&gt;源代码&lt;/a&gt;和&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table2.html&quot;&gt;实时版本&lt;/a&gt;）创建一个新的WebAssembly Table实例，其初始大小为2个元素。然后，我们打印出表的长度和两个索引的内容（通过&lt;a href=&quot;table/get&quot;&gt; &lt;code&gt;Table.prototype.get()&lt;/code&gt; &lt;/a&gt;进行检索，以显示长度为2且两个元素均为&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; )&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="51d5684213f352c1a7b4119e2be51a68e2b42266" translate="yes" xml:space="preserve">
          <source>The following example (see table2.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.html&quot;&gt;source code&lt;/a&gt; and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table2.html&quot;&gt;live version&lt;/a&gt;) creates a new WebAssembly Table instance with an initial size of 2 references. We then print out the table length and contents of the two indexes (retrieved via &lt;a href=&quot;get&quot;&gt;&lt;code&gt;Table.prototype.get()&lt;/code&gt;&lt;/a&gt;) to show that the length is two, and the indexes currently contain no function references (they currently return &lt;a href=&quot;../../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">以下示例（请参见table2.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.html&quot;&gt;源代码&lt;/a&gt;和&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table2.html&quot;&gt;实时版本&lt;/a&gt;）创建一个新的WebAssembly Table实例，其初始大小为2个引用。然后，我们打印出表的长度和两个索引的内容（通过&lt;a href=&quot;get&quot;&gt; &lt;code&gt;Table.prototype.get()&lt;/code&gt; &lt;/a&gt;检索），以显示该长度为2，并且这些索引当前不包含任何函数引用（它们当前返回&lt;a href=&quot;../../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="e90898c64d263a3ab47f788727fb41a2af7847f1" translate="yes" xml:space="preserve">
          <source>The following example (see the custom-section.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/other-examples/custom-section.html&quot;&gt;source&lt;/a&gt; and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/other-examples/custom-section.html&quot;&gt;live example&lt;/a&gt;) compiles the loaded simple-name-section.wasm byte code.</source>
          <target state="translated">以下示例（请参见custom-section.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/other-examples/custom-section.html&quot;&gt;源代码&lt;/a&gt;和&lt;a href=&quot;https://mdn.github.io/webassembly-examples/other-examples/custom-section.html&quot;&gt;实时示例&lt;/a&gt;）编译已加载的simple-name-section.wasm字节码。</target>
        </trans-unit>
        <trans-unit id="8925708cf4fd51b195340d4fd06ff264de3c4d2c" translate="yes" xml:space="preserve">
          <source>The following example (see the validate.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/validate.html&quot;&gt;source code&lt;/a&gt;, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/validate.html&quot;&gt;see it live too&lt;/a&gt;) fetches a .wasm module and converts it into a typed array. The &lt;code&gt;validate()&lt;/code&gt; method is then used to check whether the module is valid.</source>
          <target state="translated">下面的示例（请参见validate.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/validate.html&quot;&gt;源代码&lt;/a&gt;，也&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/validate.html&quot;&gt;可以实时查看&lt;/a&gt;）获取了一个.wasm模块并将其转换为类型数组。然后， &lt;code&gt;validate()&lt;/code&gt; 方法用于检查模块是否有效。</target>
        </trans-unit>
        <trans-unit id="04b5c2595d411a19b733d6b6fa76801e2bd24eab" translate="yes" xml:space="preserve">
          <source>The following example assigns the day of month of the current date to the variable &lt;code&gt;dayOfMonth&lt;/code&gt;.</source>
          <target state="translated">以下示例将当前日期的月份中的天分配给变量 &lt;code&gt;dayOfMonth&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="67dcad8447c089842b32b6c84f713c3990f8a460" translate="yes" xml:space="preserve">
          <source>The following example assigns the day portion of the current date to the variable &lt;code&gt;day&lt;/code&gt;.</source>
          <target state="translated">以下示例将当前日期的天部分分配给变量 &lt;code&gt;day&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="329ba32469ae5d1cee5124ac53f13a8d2e5ee8c4" translate="yes" xml:space="preserve">
          <source>The following example assigns the four-digit value of the current year to the variable &lt;code&gt;year&lt;/code&gt;.</source>
          <target state="translated">以下示例将当前年份的四位数值分配给变量 &lt;code&gt;year&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="42327da23d2132b0665c321f6e511d64099c2105" translate="yes" xml:space="preserve">
          <source>The following example assigns the hours portion of the current time to the variable &lt;code&gt;hours&lt;/code&gt;.</source>
          <target state="translated">以下示例将当前时间的小时部分分配给可变 &lt;code&gt;hours&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f5cf3c20aaeef2c685c52ccdf2761f9b637b94e2" translate="yes" xml:space="preserve">
          <source>The following example assigns the milliseconds portion of the current time to the variable &lt;code&gt;milliseconds&lt;/code&gt;.</source>
          <target state="translated">以下示例将当前时间的毫秒部分分配给可变 &lt;code&gt;milliseconds&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="93f95efff30459ece8c91e6f0e8eea1145c0f574" translate="yes" xml:space="preserve">
          <source>The following example assigns the milliseconds portion of the current time to the variable &lt;code&gt;milliseconds&lt;/code&gt;:</source>
          <target state="translated">以下示例将当前时间的毫秒部分分配给可变的 &lt;code&gt;milliseconds&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="078d56fd7b9b4ca87d573476a1b430aaf18cc0df" translate="yes" xml:space="preserve">
          <source>The following example assigns the minutes portion of the current time to the variable &lt;code&gt;minutes&lt;/code&gt;.</source>
          <target state="translated">以下示例将当前时间的分钟部分分配给可变 &lt;code&gt;minutes&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3fade3624fc5f764985a36f92a2d97d640c27075" translate="yes" xml:space="preserve">
          <source>The following example assigns the month portion of the current date to the variable &lt;code&gt;month&lt;/code&gt;.</source>
          <target state="translated">以下示例将当前日期的月份部分分配给变量 &lt;code&gt;month&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ac4df3ac8ffa391b3525c78b9876dbb78d6bd995" translate="yes" xml:space="preserve">
          <source>The following example assigns the seconds portion of the current time to the variable &lt;code&gt;seconds&lt;/code&gt;.</source>
          <target state="translated">以下示例将当前时间的秒部分分配给变量 &lt;code&gt;seconds&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="343545b7b29be8cda1dcf0cbd75601808cd0809f" translate="yes" xml:space="preserve">
          <source>The following example assigns the weekday portion of the current date to the variable &lt;code&gt;weekday&lt;/code&gt;.</source>
          <target state="translated">以下示例将当前日期的星期几部分分配给变量 &lt;code&gt;weekday&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="767d60c06ca1ff299270f38eff52362c32dbcb7c" translate="yes" xml:space="preserve">
          <source>The following example combines strings into a new string.</source>
          <target state="translated">下面的例子将字符串组合成一个新的字符串。</target>
        </trans-unit>
        <trans-unit id="ce1f80f7ce973aac6a68718ef1d5ef4c0a63d97a" translate="yes" xml:space="preserve">
          <source>The following example compiles the loaded simple.wasm byte code using the &lt;code&gt;compile()&lt;/code&gt; function and then sends it to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;worker&lt;/a&gt; using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt;.</source>
          <target state="translated">以下示例使用 &lt;code&gt;compile()&lt;/code&gt; 函数编译已加载的simple.wasm字节码，然后使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage（）&lt;/a&gt;将其发送给&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;工作程序&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7e24149b342bc29c992c104b8a241bca44d6191c" translate="yes" xml:space="preserve">
          <source>The following example compiles the loaded simple.wasm byte code using the &lt;code&gt;compile()&lt;/code&gt; function and then sends it to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;worker&lt;/a&gt; using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt;.</source>
          <target state="translated">以下示例使用 &lt;code&gt;compile()&lt;/code&gt; 函数编译已加载的simple.wasm字节码，然后使用&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage（）&lt;/a&gt;将其发送给&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;工作程序&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="46c1aae55651ebc7d95593ee71eb5a2d80993538" translate="yes" xml:space="preserve">
          <source>The following example converts the &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object to a numerical value using &lt;code&gt;Number&lt;/code&gt; as a function:</source>
          <target state="translated">下面的示例使用 &lt;code&gt;Number&lt;/code&gt; 作为函数将&lt;a href=&quot;date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;对象转换为数值：</target>
        </trans-unit>
        <trans-unit id="90bee3ba074ae4959eca3ef45c5c2b24977b7e28" translate="yes" xml:space="preserve">
          <source>The following example creates a constructor (&lt;code&gt;Tree&lt;/code&gt;) and an object of that type (&lt;code&gt;theTree&lt;/code&gt;). The example then displays the &lt;code&gt;constructor&lt;/code&gt; property for the object &lt;code&gt;theTree&lt;/code&gt;.</source>
          <target state="translated">以下示例创建一个构造函数（ &lt;code&gt;Tree&lt;/code&gt; ）和该类型的对象（ &lt;code&gt;theTree&lt;/code&gt; ）。然后，该示例显示对象 &lt;code&gt;theTree&lt;/code&gt; 的 &lt;code&gt;constructor&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="f3d3d920082d0c9559583ab75e2b0ed8ba94a88c" translate="yes" xml:space="preserve">
          <source>The following example creates a new WebAssembly Memory instance with an initial size of 1 page (64KiB), and a maximum size of 10 pages (640KiB).</source>
          <target state="translated">以下示例创建了一个新的WebAssembly内存实例,初始大小为1页(64KiB),最大大小为10页(640KiB)。</target>
        </trans-unit>
        <trans-unit id="40392ebf224f08b9413114ec5e26a7d27a004ce6" translate="yes" xml:space="preserve">
          <source>The following example creates a new WebAssembly Table instance with an initial size of 2 and a maximum size of 10.</source>
          <target state="translated">下面的例子创建了一个新的WebAssembly Table实例,初始大小为2,最大大小为10。</target>
        </trans-unit>
        <trans-unit id="987625d9a34f6b1500f4c39852a2fcd13e8078e4" translate="yes" xml:space="preserve">
          <source>The following example creates a prototype, &lt;code&gt;Tree&lt;/code&gt;, and an object of that type, &lt;code&gt;theTree&lt;/code&gt;. The example then displays the &lt;code&gt;constructor&lt;/code&gt; property for the object &lt;code&gt;theTree&lt;/code&gt;.</source>
          <target state="translated">以下示例创建一个原型 &lt;code&gt;Tree&lt;/code&gt; ，并创建该类型的对象 &lt;code&gt;theTree&lt;/code&gt; 。然后，该示例显示对象 &lt;code&gt;theTree&lt;/code&gt; 的 &lt;code&gt;constructor&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="3e024257f78c408de5dbe3924322f58fda0791ae" translate="yes" xml:space="preserve">
          <source>The following example creates an array &lt;code&gt;a&lt;/code&gt;, containing three elements, then reverses the array. The call to &lt;code&gt;reverse()&lt;/code&gt; returns a reference to the reversed array &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">以下示例创建一个包含三个元素的数组 &lt;code&gt;a&lt;/code&gt; ，然后反转该数组。对 &lt;code&gt;reverse()&lt;/code&gt; 的调用返回对反向数组 &lt;code&gt;a&lt;/code&gt; 的引用。</target>
        </trans-unit>
        <trans-unit id="d385d069b10480e7c6f5d55e94f57807563c9d85" translate="yes" xml:space="preserve">
          <source>The following example creates an array, &lt;code&gt;&lt;var&gt;msgArray&lt;/var&gt;&lt;/code&gt;, with a length of &lt;code&gt;0&lt;/code&gt;, then assigns values to &lt;code&gt;msgArray[0]&lt;/code&gt; and &lt;code&gt;msgArray[99]&lt;/code&gt;, changing the &lt;code&gt;length&lt;/code&gt; of the array to &lt;code&gt;100&lt;/code&gt;.</source>
          <target state="translated">下面的示例创建一个长度为 &lt;code&gt;0&lt;/code&gt; 的数组 &lt;code&gt;&lt;var&gt;msgArray&lt;/var&gt;&lt;/code&gt; ，然后将值分配给 &lt;code&gt;msgArray[0]&lt;/code&gt; 和 &lt;code&gt;msgArray[99]&lt;/code&gt; ，将数组的 &lt;code&gt;length&lt;/code&gt; 更改为 &lt;code&gt;100&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e7ccf2c333889f3e25b5af825d678cedd99f53b" translate="yes" xml:space="preserve">
          <source>The following example creates an array, &lt;code&gt;a&lt;/code&gt;, with three elements, then joins the array four times: using the default separator, then a comma and a space, then a plus and an empty string.</source>
          <target state="translated">下面的示例创建一个具有三个元素的数组 &lt;code&gt;a&lt;/code&gt; ，然后将其联接四次：使用默认的分隔符，然后是一个逗号和一个空格，然后是一个加号和一个空字符串。</target>
        </trans-unit>
        <trans-unit id="94ed75046a42e69d01d296a24ea2163f50def55f" translate="yes" xml:space="preserve">
          <source>The following example creates an array, &lt;code&gt;msgArray&lt;/code&gt;, with a length of 0, then assigns values to &lt;code&gt;msgArray[0]&lt;/code&gt; and &lt;code&gt;msgArray[99]&lt;/code&gt;, changing the length of the array to 100.</source>
          <target state="translated">以下示例创建一个长度为0 的数组 &lt;code&gt;msgArray&lt;/code&gt; ，然后将值分配给 &lt;code&gt;msgArray[0]&lt;/code&gt; 和 &lt;code&gt;msgArray[99]&lt;/code&gt; ，将数组的长度更改为100。</target>
        </trans-unit>
        <trans-unit id="eaea1362d9c752d1acd789d7f6adfdb9ced93027" translate="yes" xml:space="preserve">
          <source>The following example creates an array-like object &lt;code&gt;a&lt;/code&gt;, containing three elements and a length property, then reverses the array-like object. The call to &lt;code&gt;reverse()&lt;/code&gt; returns a reference to the reversed array-like object &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">下面的示例创建一个包含三个元素和一个length属性的类似数组的对象 &lt;code&gt;a&lt;/code&gt; ，然后反转该类似数组的对象。对 &lt;code&gt;reverse()&lt;/code&gt; 的调用返回对反向数组状对象 &lt;code&gt;a&lt;/code&gt; 的引用。</target>
        </trans-unit>
        <trans-unit id="c6e3ef17d5ed26b9f90461bb26fa01c086129786" translate="yes" xml:space="preserve">
          <source>The following example creates four arrays and displays the original array, then the sorted arrays. The numeric arrays are sorted without a compare function, then sorted using one.</source>
          <target state="translated">下面的示例创建了四个数组,并显示原始数组,然后显示排序后的数组。数字数组在没有比较函数的情况下进行排序,然后使用比较函数进行排序。</target>
        </trans-unit>
        <trans-unit id="acec17eec6a860d29cc75e011e0974ef6eecfdad" translate="yes" xml:space="preserve">
          <source>The following example creates four arrays and displays the original array, then the sorted arrays. The numeric arrays are sorted without, then with, a compare function.</source>
          <target state="translated">下面的示例创建了四个数组,并显示原始数组,然后显示排序后的数组。先对数字数组进行排序,不使用比较函数,然后使用比较函数。</target>
        </trans-unit>
        <trans-unit id="e7b9f96843bc2693d00e570144e308453edb6f01" translate="yes" xml:space="preserve">
          <source>The following example define a pseudo-property &lt;code&gt;current&lt;/code&gt; of object &lt;code&gt;language&lt;/code&gt;. When &lt;code&gt;current&lt;/code&gt; is assigned a value, it updates &lt;code&gt;log&lt;/code&gt; with that value:</source>
          <target state="translated">以下示例定义了对象 &lt;code&gt;language&lt;/code&gt; 的伪属性 &lt;code&gt;current&lt;/code&gt; 。为 &lt;code&gt;current&lt;/code&gt; 分配一个值后，它将使用该值更新 &lt;code&gt;log&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8659a61c736495c98b2b579b5596a17089ed728b" translate="yes" xml:space="preserve">
          <source>The following example defines a function that splits a string into an array of strings using &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt;. After splitting the string, the function logs messages indicating the original string (before the split), the separator used, the number of elements in the array, and the individual array elements.</source>
          <target state="translated">下面的例子定义一个分割字符串转换成使用一个字符串数组的函数 &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 。分割字符串后，该函数记录指示原始字符串（分割前），使用的分隔符，数组中元素的数量以及单个数组元素的消息。</target>
        </trans-unit>
        <trans-unit id="6ac6d9979086fed726d30810239f0df73d45c5df" translate="yes" xml:space="preserve">
          <source>The following example defines a function that splits a string into an array of strings using the specified separator. After splitting the string, the function logs messages indicating the original string (before the split), the separator used, the number of elements in the array, and the individual array elements.</source>
          <target state="translated">下面的例子定义了一个函数,它使用指定的分隔符将一个字符串分割成一个字符串数组。在分割字符串后,函数会记录信息,显示原始字符串(分割前)、使用的分隔符、数组中的元素数量以及各个数组元素。</target>
        </trans-unit>
        <trans-unit id="92b53dacb75ae1e45d107fe4e0d1af48934e0a9c" translate="yes" xml:space="preserve">
          <source>The following example defines a function, which, in turn, defines and returns a factorial function. This example isn't very practical, and there are nearly no cases where the same result cannot be achieved with &lt;a href=&quot;../../operators/function&quot;&gt;named function expressions&lt;/a&gt;.</source>
          <target state="translated">下面的示例定义一个函数，该函数依次定义并返回阶乘函数。这个例子不是很实际，并且几乎没有用&lt;a href=&quot;../../operators/function&quot;&gt;命名函数表达式&lt;/a&gt;无法获得相同结果的情况。</target>
        </trans-unit>
        <trans-unit id="ab0f8b17dc95108d00ead468122ed886ad0787e7" translate="yes" xml:space="preserve">
          <source>The following example defines an unnamed function and assigns it to &lt;code&gt;x&lt;/code&gt;. The function returns the square of its argument:</source>
          <target state="translated">下面的示例定义一个未命名的函数，并将其分配给 &lt;code&gt;x&lt;/code&gt; 。该函数返回其参数的平方：</target>
        </trans-unit>
        <trans-unit id="4f8ffa34b31c533441565020a3902f90686081d1" translate="yes" xml:space="preserve">
          <source>The following example defines an unnamed generator function and assigns it to &lt;code&gt;x&lt;/code&gt;. The function yields the square of its argument:</source>
          <target state="translated">以下示例定义了一个未命名的生成器函数，并将其分配给 &lt;code&gt;x&lt;/code&gt; 。该函数产生其参数的平方：</target>
        </trans-unit>
        <trans-unit id="c24d2dc4ab700e16094a6b07ebfc466de9d9388c" translate="yes" xml:space="preserve">
          <source>The following example defines two string variables.</source>
          <target state="translated">下面的例子定义了两个字符串变量。</target>
        </trans-unit>
        <trans-unit id="7ca6fb2df23581f1f3ea75626e31d34e85d25092" translate="yes" xml:space="preserve">
          <source>The following example defines two string variables. The variables contain the same string except that the second string contains uppercase letters. The first &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Console/log&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt; method displays 19. But because the &lt;code&gt;indexOf()&lt;/code&gt; method is case sensitive, the string &lt;code&gt;&quot;cheddar&quot;&lt;/code&gt; is not found in &lt;code&gt;myCapString&lt;/code&gt;, so the second &lt;code&gt;console.log()&lt;/code&gt; method displays -1.</source>
          <target state="translated">以下示例定义了两个字符串变量。变量包含相同的字符串，但第二个字符串包含大写字母。第一个&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Console/log&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt;方法显示为19。但是由于 &lt;code&gt;indexOf()&lt;/code&gt; 方法区分大小写，因此在 &lt;code&gt;myCapString&lt;/code&gt; 中找不到字符串 &lt;code&gt;&quot;cheddar&quot;&lt;/code&gt; ，因此第二个 &lt;code&gt;console.log()&lt;/code&gt; 方法显示为-1。</target>
        </trans-unit>
        <trans-unit id="547d34e148fee3b5c81ff45fb75c1ba9349a6db8" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how constants behave. Try this in your browser console.</source>
          <target state="translated">下面的例子演示了常量的表现。在你的浏览器控制台中试试这个。</target>
        </trans-unit>
        <trans-unit id="98ff2a6ba484f518866c30fcdddf29c37ad2fdc0" translate="yes" xml:space="preserve">
          <source>The following example demonstrates several things:</source>
          <target state="translated">下面的例子说明了几个问题。</target>
        </trans-unit>
        <trans-unit id="4acb5dc736da7509eb051a3f3fb33a2adf5a1511" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the different potential results for a string occurring before, after, or at the same level as another:</source>
          <target state="translated">下面的例子展示了一个字符串在另一个字符串之前、之后或在同一级别出现的不同潜在结果。</target>
        </trans-unit>
        <trans-unit id="76991b080a89f297062fcd2b209588b4476dff9d" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the enumerability of user-defined vs. built-in properties:</source>
          <target state="translated">下面的例子展示了用户定义与内置属性的可枚举性。</target>
        </trans-unit>
        <trans-unit id="c2e952e4b1b1ab4ce31fdb525a4580a9807c8c4e" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of the global and ignore case flags with &lt;code&gt;match()&lt;/code&gt;. All letters &lt;code&gt;A&lt;/code&gt; through &lt;code&gt;E&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; through &lt;code&gt;e&lt;/code&gt; are returned, each its own element in the array.</source>
          <target state="translated">以下示例演示了将全局和忽略大小写标志与 &lt;code&gt;match()&lt;/code&gt; 一起使用。返回所有字母 &lt;code&gt;A&lt;/code&gt; 到 &lt;code&gt;E&lt;/code&gt; 和 &lt;code&gt;a&lt;/code&gt; 到 &lt;code&gt;e&lt;/code&gt; ，每个字母在数组中都有自己的元素。</target>
        </trans-unit>
        <trans-unit id="535735172236e9bfa62c1b8539c90dbbb7bcde3f" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of the global and ignore case flags with &lt;code&gt;match()&lt;/code&gt;. All letters A through E and a through e are returned, each its own element in the array.</source>
          <target state="translated">以下示例演示了将全局和忽略大小写标志与 &lt;code&gt;match()&lt;/code&gt; 一起使用。返回所有字母A到E和a到e，每个字母在数组中都有自己的元素。</target>
        </trans-unit>
        <trans-unit id="cabe28f20b2239beb68252e8521440dc3608037d" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this behaviour:</source>
          <target state="translated">下面的例子说明了这种行为。</target>
        </trans-unit>
        <trans-unit id="f1a20b08e6b9a8caed404a5a3d2e883966a78b3f" translate="yes" xml:space="preserve">
          <source>The following example determines whether the &lt;code&gt;o&lt;/code&gt; object contains a property named &lt;code&gt;prop&lt;/code&gt;:</source>
          <target state="translated">下面的示例确定 &lt;code&gt;o&lt;/code&gt; 对象是否包含名为 &lt;code&gt;prop&lt;/code&gt; 的属性：</target>
        </trans-unit>
        <trans-unit id="b86a1dde5df429b8d830bc2153042ec3baf37734" translate="yes" xml:space="preserve">
          <source>The following example differentiates between direct properties and properties inherited through the prototype chain:</source>
          <target state="translated">下面的例子区分了直接属性和通过原型链继承的属性。</target>
        </trans-unit>
        <trans-unit id="e28904a6f35eeb800c143e3dee50dcff00bd1737" translate="yes" xml:space="preserve">
          <source>The following example displays characters at different locations in the string &lt;code&gt;&quot;Brave new world&quot;&lt;/code&gt;:</source>
          <target state="translated">以下示例在字符串 &lt;code&gt;&quot;Brave new world&quot;&lt;/code&gt; 中的不同位置显示字符：</target>
        </trans-unit>
        <trans-unit id="d5069cc5724ce085e15d25e5d352954d833f1196" translate="yes" xml:space="preserve">
          <source>The following example displays the lowercase string &lt;code&gt;' &amp;nbsp; foo'&lt;/code&gt;:</source>
          <target state="translated">以下示例显示小写字符串 &lt;code&gt;' &amp;nbsp; foo'&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="a5458354badab7ff4adbcb6d487cdf785f3f80ce" translate="yes" xml:space="preserve">
          <source>The following example displays the lowercase string &lt;code&gt;' foo'&lt;/code&gt;:</source>
          <target state="translated">以下示例显示小写字符串 &lt;code&gt;' foo'&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="7e291b2b732970f23d715257c0f8a9eb7c68acc7" translate="yes" xml:space="preserve">
          <source>The following example displays the lowercase string &lt;code&gt;'foo &amp;nbsp;'&lt;/code&gt;:</source>
          <target state="translated">以下示例显示小写字符串 &lt;code&gt;'foo &amp;nbsp;'&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0bfcf6eed9257eea6ea96db09db7d70185bcca9b" translate="yes" xml:space="preserve">
          <source>The following example displays the lowercase string &lt;code&gt;'foo '&lt;/code&gt;:</source>
          <target state="translated">以下示例显示小写字符串 &lt;code&gt;'foo '&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5f7e0cd9f847bc1e944b777e688a83943d4b275d" translate="yes" xml:space="preserve">
          <source>The following example displays the lowercase string &lt;code&gt;'foo'&lt;/code&gt;:</source>
          <target state="translated">以下示例显示小写字符串 &lt;code&gt;'foo'&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3de0baed5bb079a0ffbb4bf89fc9d1cfda35e9f0" translate="yes" xml:space="preserve">
          <source>The following example displays the string value of a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="translated">下面的示例显示&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;对象的字符串值：</target>
        </trans-unit>
        <trans-unit id="b52750760089a6c0542b8391fd7147e5b5454c38" translate="yes" xml:space="preserve">
          <source>The following example displays the string value of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="translated">下面的示例显示&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;对象的字符串值：</target>
        </trans-unit>
        <trans-unit id="18561723849ba2c212dfe8fbd1d0094dd72468e7" translate="yes" xml:space="preserve">
          <source>The following example displays the word &quot;MDN&quot; as a hypertext link that returns the user to the Mozilla Developer Network.</source>
          <target state="translated">下面的例子将 &quot;MDN &quot;一词显示为超文本链接,使用户返回到Mozilla开发者网络。</target>
        </trans-unit>
        <trans-unit id="36f1186c333290c25b528c1d31b9417d9e9b895a" translate="yes" xml:space="preserve">
          <source>The following example finds an element in the array that is a prime number (or returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if there is no prime number).</source>
          <target state="translated">下面的示例在数组中查找一个素数的元素（如果没有素数，则返回&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d5456ae8de25799bf8c9164d723032bea5544e2e" translate="yes" xml:space="preserve">
          <source>The following example finds an element in the array that is a prime number (or returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if there is no prime number):</source>
          <target state="translated">下面的示例在数组中找到一个素数的元素（如果没有素数，则返回&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="a71e655d2f693b29caaacf6e44d06930198e94b3" translate="yes" xml:space="preserve">
          <source>The following example finds an element in the typed array that is a prime number (or returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if there is no prime number).</source>
          <target state="translated">下面的示例在类型化数组中查找一个素数（如果没有素数则返回&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; )&lt;/a&gt;的元素。</target>
        </trans-unit>
        <trans-unit id="123a7cc3c410ee8833d83619d1741b726a071c58" translate="yes" xml:space="preserve">
          <source>The following example finds the index of a fruit using an arrow function:</source>
          <target state="translated">下面的例子是用一个箭头函数找到一个水果的索引。</target>
        </trans-unit>
        <trans-unit id="c3043c7e35e655f7354b6f1b8d8089ebb3dcfa97" translate="yes" xml:space="preserve">
          <source>The following example finds the index of an element in the typed array that is a prime number (or returns -1 if there is no prime number).</source>
          <target state="translated">下面的例子是在类型数组中找到一个元素的索引,这个索引是一个质数(如果没有质数,则返回-1)。</target>
        </trans-unit>
        <trans-unit id="c5c6b7cffaee77e66f9d1e62fcb17bb0df5b0be7" translate="yes" xml:space="preserve">
          <source>The following example illustrates an alternative approach, using &lt;code&gt;forEach()&lt;/code&gt;.</source>
          <target state="translated">以下示例说明了使用 &lt;code&gt;forEach()&lt;/code&gt; 的另一种方法。</target>
        </trans-unit>
        <trans-unit id="04878c2dd68886e6bf3de28ed14d3ae057e21b4a" translate="yes" xml:space="preserve">
          <source>The following example is only here for learning purpose. If you want to flatten an array using built-in methods you can use &lt;a href=&quot;flat&quot;&gt;&lt;code&gt;Array.prototype.flat()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下示例仅在此处用于学习目的。如果要使用内置方法展平数组，可以使用&lt;a href=&quot;flat&quot;&gt; &lt;code&gt;Array.prototype.flat()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9921b6dcf2965ab71a7bbbf0b7bd58d30abfff93" translate="yes" xml:space="preserve">
          <source>The following example joins array-like object (&lt;code&gt;&lt;a href=&quot;../../functions/arguments&quot;&gt;arguments&lt;/a&gt;&lt;/code&gt;), by calling &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;Array.prototype.join&lt;/code&gt;.</source>
          <target state="translated">下面的示例通过在 &lt;code&gt;Array.prototype.join&lt;/code&gt; 上调用&lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call&lt;/code&gt; &lt;/a&gt;来连接类似数组的对象（ &lt;code&gt;&lt;a href=&quot;../../functions/arguments&quot;&gt;arguments&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2fc86f8bd44257f235a0ee34207fabb06957cf4e" translate="yes" xml:space="preserve">
          <source>The following example logs</source>
          <target state="translated">下面的例子记录了</target>
        </trans-unit>
        <trans-unit id="e4a6eb7e50a75d3ce30d69979c6deb4427e65027" translate="yes" xml:space="preserve">
          <source>The following example logs &quot;one&quot;, &quot;two&quot;, &quot;four&quot;. When the entry containing the value &quot;two&quot; is reached, the first entry of the whole array is shifted off, which results in all remaining entries moving up one position. Because element &quot;four&quot; is now at an earlier position in the array, &quot;three&quot; will be skipped. &lt;code&gt;forEach()&lt;/code&gt; does not make a copy of the array before iterating.</source>
          <target state="translated">下面的示例记录&amp;ldquo;一个&amp;rdquo;，&amp;ldquo;两个&amp;rdquo;，&amp;ldquo;四个&amp;rdquo;。当到达包含值&amp;ldquo;两个&amp;rdquo;的条目时，整个数组的第一个条目将移开，这将导致所有其余条目向上移动一个位置。由于元素&amp;ldquo; four&amp;rdquo;现在位于数组中的较早位置，因此将跳过&amp;ldquo; three&amp;rdquo;。 &lt;code&gt;forEach()&lt;/code&gt; 在迭代之前不会复制数组。</target>
        </trans-unit>
        <trans-unit id="40e228d899d08f05aeecc38dce80833d2bd90269" translate="yes" xml:space="preserve">
          <source>The following example logs a message which depends on the success of the test:</source>
          <target state="translated">下面的例子记录了一个取决于测试成功与否的消息。</target>
        </trans-unit>
        <trans-unit id="1d7aef234432711a2e9c30b19e8ad50d7434e224" translate="yes" xml:space="preserve">
          <source>The following example opens a file and then executes statements that use the file (server-side JavaScript allows you to access files). If an exception is thrown while the file is open, the &lt;code&gt;finally&lt;/code&gt; clause closes the file before the script fails. The code in &lt;code&gt;finally&lt;/code&gt; also executes upon explicitly returning from &lt;code&gt;try&lt;/code&gt; or &lt;code&gt;catch&lt;/code&gt; block.</source>
          <target state="translated">以下示例打开一个文件，然后执行使用该文件的语句（服务器端JavaScript允许您访问文件）。如果在打开文件时抛出异常，则 &lt;code&gt;finally&lt;/code&gt; 子句会在脚本失败之前关闭文件。 &lt;code&gt;finally&lt;/code&gt; 的代码也将在从 &lt;code&gt;try&lt;/code&gt; 或 &lt;code&gt;catch&lt;/code&gt; 块显式返回时执行。</target>
        </trans-unit>
        <trans-unit id="6ae682e556b86f0a9c680f91cf8500371aa1c3fc" translate="yes" xml:space="preserve">
          <source>The following example provides the special encoding required within UTF-8 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition&quot;&gt;&lt;code&gt;Content-Disposition&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link&quot;&gt;&lt;code&gt;Link&lt;/code&gt;&lt;/a&gt; server response header parameters (e.g., UTF-8 filenames):</source>
          <target state="translated">下面的示例提供了UTF-8 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition&quot;&gt; &lt;code&gt;Content-Disposition&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link&quot;&gt; &lt;code&gt;Link&lt;/code&gt; &lt;/a&gt;服务器响应标头参数（例如UTF-8文件名）中所需的特殊编码：</target>
        </trans-unit>
        <trans-unit id="0b446e3f60ff448f09a2a16a2121c515e355b2ea" translate="yes" xml:space="preserve">
          <source>The following example provides the special encoding required within UTF-8 &lt;code&gt;Content-Disposition&lt;/code&gt; and &lt;code&gt;Link&lt;/code&gt; server response header parameters (e.g., UTF-8 filenames):</source>
          <target state="translated">下面的示例提供了UTF-8 &lt;code&gt;Content-Disposition&lt;/code&gt; 和 &lt;code&gt;Link&lt;/code&gt; 服务器响应标头参数（例如UTF-8文件名）中所需的特殊编码：</target>
        </trans-unit>
        <trans-unit id="87039910df2dc3a9a34e9fafe993bc06eedfa65a" translate="yes" xml:space="preserve">
          <source>The following example replaces a Fahrenheit degree with its equivalent Celsius degree. The Fahrenheit degree should be a number ending with &lt;code&gt;&quot;F&quot;&lt;/code&gt;. The function returns the Celsius number ending with &lt;code&gt;&quot;C&quot;&lt;/code&gt;. For example, if the input number is &lt;code&gt;&quot;212F&quot;&lt;/code&gt;, the function returns &lt;code&gt;&quot;100C&quot;&lt;/code&gt;. If the number is &lt;code&gt;&quot;0F&quot;&lt;/code&gt;, the function returns &lt;code&gt;&quot;-17.77777777777778C&quot;&lt;/code&gt;.</source>
          <target state="translated">以下示例将华氏温度替换为等效的摄氏温度。华氏度应为以 &lt;code&gt;&quot;F&quot;&lt;/code&gt; 结尾的数字。该函数返回以 &lt;code&gt;&quot;C&quot;&lt;/code&gt; 结尾的摄氏度数。例如，如果输入数字为 &lt;code&gt;&quot;212F&quot;&lt;/code&gt; ，则函数返回 &lt;code&gt;&quot;100C&quot;&lt;/code&gt; 。如果数字为 &lt;code&gt;&quot;0F&quot;&lt;/code&gt; ，则函数返回 &lt;code&gt;&quot;-17.77777777777778C&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8f6d94ed30d3e9137ae631064c77221c72decf99" translate="yes" xml:space="preserve">
          <source>The following example replaces a Fahrenheit degree with its equivalent Celsius degree. The Fahrenheit degree should be a number ending with F. The function returns the Celsius number ending with C. For example, if the input number is 212F, the function returns 100C. If the number is 0F, the function returns -17.77777777777778C.</source>
          <target state="translated">下面的例子是用等效的摄氏度替换华氏度。华氏度应该是一个以F结尾的数字,函数返回以C结尾的摄氏度数字。例如,如果输入的数字是212F,函数返回100C。如果数字是0F,函数返回-17.77777777777778C。</target>
        </trans-unit>
        <trans-unit id="933f02ade97f0adfd5b355b0f382856566007dbf" translate="yes" xml:space="preserve">
          <source>The following example replaces a substring within a string. It will replace both individual characters and substrings. The function call at the end of the example changes the string &lt;code&gt;'Brave New World'&lt;/code&gt; to &lt;code&gt;'Brave New Web'&lt;/code&gt;.</source>
          <target state="translated">下面的示例替换字符串中的子字符串。它将替换单个字符和子字符串。示例末尾的函数调用将字符串 &lt;code&gt;'Brave New World'&lt;/code&gt; 更改为 &lt;code&gt;'Brave New Web'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="24da5523828c57db976cc0d7542f115e6815bd27" translate="yes" xml:space="preserve">
          <source>The following example replaces a substring within a string. It will replace both individual characters and substrings. The function call at the end of the example changes the string &lt;code&gt;Brave New World&lt;/code&gt; to &lt;code&gt;Brave New Web&lt;/code&gt;.</source>
          <target state="translated">下面的示例替换字符串中的子字符串。它将替换单个字符和子字符串。示例末尾的函数调用将字符串 &lt;code&gt;Brave New World&lt;/code&gt; 更改为 &lt;code&gt;Brave New Web&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="93f8e958f94323ef8dc0f42259773df78c457ee2" translate="yes" xml:space="preserve">
          <source>The following example returns 65, the Unicode value for A.</source>
          <target state="translated">下面的例子返回65,即A的Unicode值。</target>
        </trans-unit>
        <trans-unit id="90c5cda0c96e649f69caa007d659268d33f22c88" translate="yes" xml:space="preserve">
          <source>The following example returns &lt;code&gt;224&lt;/code&gt;:</source>
          <target state="translated">以下示例返回 &lt;code&gt;224&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d056fa1c9f0d837fbff2ba8b0f5d0ca6c4894ca4" translate="yes" xml:space="preserve">
          <source>The following example returns &lt;code&gt;65&lt;/code&gt;, the Unicode value for A.</source>
          <target state="translated">以下示例返回 &lt;code&gt;65&lt;/code&gt; ，即A的Unicode值。</target>
        </trans-unit>
        <trans-unit id="24de5fa4059fba34b62190fb50374f94f80ed5c0" translate="yes" xml:space="preserve">
          <source>The following example returns &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">以下示例返回 &lt;code&gt;NaN&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="31f6a40a3ae89d54d434b54adbad2740ade91bc9" translate="yes" xml:space="preserve">
          <source>The following example returns &lt;code&gt;NaN&lt;/code&gt;:</source>
          <target state="translated">以下示例返回 &lt;code&gt;NaN&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d06a45e6f36f881a97a538d21281592a5f8ba252" translate="yes" xml:space="preserve">
          <source>The following example returns all prime numbers in the array:</source>
          <target state="translated">下面的例子返回数组中的所有质数。</target>
        </trans-unit>
        <trans-unit id="eb4b71ecc767d2d15324f41767df1acba8db96b8" translate="yes" xml:space="preserve">
          <source>The following example returns the index of an element in the array that is a prime number, or -1 if there is no prime number.</source>
          <target state="translated">下面的例子返回数组中一个元素的质数索引,如果没有质数,则返回-1。</target>
        </trans-unit>
        <trans-unit id="e1fcf59259ff9369d86d16c1da62190398e9f9b0" translate="yes" xml:space="preserve">
          <source>The following example returns the index of the first element in the array that is a prime number, or &lt;code&gt;-1&lt;/code&gt; if there is no prime number.</source>
          <target state="translated">下面的示例返回数组中第一个元素的索引，该索引是质数；如果没有质数，则返回 &lt;code&gt;-1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="083a6a8c3e4bb9a9632eb9fe92d73307b122fa08" translate="yes" xml:space="preserve">
          <source>The following example returns the string &quot;ABC&quot;.</source>
          <target state="translated">下面的例子返回字符串 &quot;ABC&quot;。</target>
        </trans-unit>
        <trans-unit id="82cdc405f088054aabe6122997be993169860e4c" translate="yes" xml:space="preserve">
          <source>The following example searches a string with 2 different regex objects to show a successful search (positive value) vs. an unsuccessful search (-1)</source>
          <target state="translated">下面的例子用2个不同的regex对象搜索一个字符串,显示一个成功的搜索(正值)与一个不成功的搜索(-1)。</target>
        </trans-unit>
        <trans-unit id="aaf3eb4f9f086aa6db911648687cea5cc758ee3d" translate="yes" xml:space="preserve">
          <source>The following example searches a string with two different regex objects to show a successful search (positive value) vs. an unsuccessful search (&lt;code&gt;-1&lt;/code&gt;)</source>
          <target state="translated">下面的示例使用两个不同的正则表达式对象搜索字符串，以显示成功搜索（正值）与不成功搜索（ &lt;code&gt;-1&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="8d7630dc749db4775b009b43ad2cba5bd2e12024" translate="yes" xml:space="preserve">
          <source>The following example sets &lt;code&gt;count&lt;/code&gt; to the number of occurrences of the letter &lt;code&gt;e&lt;/code&gt; in the string &lt;code&gt;str&lt;/code&gt;:</source>
          <target state="translated">以下示例将 &lt;code&gt;count&lt;/code&gt; 设置为字符串 &lt;code&gt;str&lt;/code&gt; 中字母 &lt;code&gt;e&lt;/code&gt; 的出现次数：</target>
        </trans-unit>
        <trans-unit id="11e92c9c5fada2aa828677183258974748dd4cfa" translate="yes" xml:space="preserve">
          <source>The following example shortens the array &lt;code&gt;numbers&lt;/code&gt; to a length of 3 if the current length is greater than 3.</source>
          <target state="translated">下面的示例如果当前长度大于3，则将数组 &lt;code&gt;numbers&lt;/code&gt; 缩短为3。</target>
        </trans-unit>
        <trans-unit id="716fdf3d5254acc41f4ed6f3a01cae908d494b0b" translate="yes" xml:space="preserve">
          <source>The following example shows a &lt;a href=&quot;while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; loop that has a &lt;code&gt;continue&lt;/code&gt; statement that executes when the value of &lt;code&gt;i&lt;/code&gt; is 3. Thus, &lt;code&gt;n&lt;/code&gt; takes on the values 1, 3, 7, and 12.</source>
          <target state="translated">下面的示例显示一个&lt;a href=&quot;while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt;循环，该循环具有一个 &lt;code&gt;continue&lt;/code&gt; 语句，该语句在 &lt;code&gt;i&lt;/code&gt; 的值为3 时执行。因此， &lt;code&gt;n&lt;/code&gt; 取值为1、3、7和12。</target>
        </trans-unit>
        <trans-unit id="2005d00ce0209b5fceaa8ac912192339ee89a7e4" translate="yes" xml:space="preserve">
          <source>The following example shows a new global instance being created using the &lt;code&gt;WebAssembly.Global()&lt;/code&gt; constructor. It is being defined as a mutable &lt;code&gt;i32&lt;/code&gt; type, with a value of 0.</source>
          <target state="translated">以下示例显示了使用 &lt;code&gt;WebAssembly.Global()&lt;/code&gt; 构造函数创建的新全局实例。它被定义为可变的 &lt;code&gt;i32&lt;/code&gt; 类型，值为0。</target>
        </trans-unit>
        <trans-unit id="727fa2dc7c87295a2654df609e735dc343947cff" translate="yes" xml:space="preserve">
          <source>The following example shows a simple generator and an error that is thrown using the &lt;code&gt;throw&lt;/code&gt; method. An error can be caught by a &lt;a href=&quot;../../statements/try...catch&quot;&gt;&lt;code&gt;try...catch&lt;/code&gt;&lt;/a&gt; block as usual.</source>
          <target state="translated">以下示例显示了一个简单的生成器以及使用 &lt;code&gt;throw&lt;/code&gt; 方法引发的错误。像往常一样，可以通过&lt;a href=&quot;../../statements/try...catch&quot;&gt; &lt;code&gt;try...catch&lt;/code&gt; &lt;/a&gt;块捕获错误。</target>
        </trans-unit>
        <trans-unit id="0c7266a2391590ed65c478f38c97fa18c57a2cf6" translate="yes" xml:space="preserve">
          <source>The following example shows a simple generator and an error that is thrown using the &lt;code&gt;throw&lt;/code&gt; method. An error can be caught by a &lt;code&gt;&lt;a href=&quot;../../statements/try...catch&quot;&gt;try...catch&lt;/a&gt;&lt;/code&gt; block as usual.</source>
          <target state="translated">以下示例显示了一个简单的生成器以及使用 &lt;code&gt;throw&lt;/code&gt; 方法引发的错误。可以通过 &lt;code&gt;&lt;a href=&quot;../../statements/try...catch&quot;&gt;try...catch&lt;/a&gt;&lt;/code&gt; 块照常捕获错误。</target>
        </trans-unit>
        <trans-unit id="1f7f361180b31b6042d618b49166807c6f929d75" translate="yes" xml:space="preserve">
          <source>The following example shows a simple generator and the &lt;code&gt;return&lt;/code&gt; method.</source>
          <target state="translated">以下示例显示了一个简单的生成器和 &lt;code&gt;return&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="b72df2105ef3ff7ff1bfba2b4454bda5b2038cff" translate="yes" xml:space="preserve">
          <source>The following example shows a simple generator and the object that the &lt;code&gt;next&lt;/code&gt; method returns:</source>
          <target state="translated">以下示例显示了一个简单的生成器和 &lt;code&gt;next&lt;/code&gt; 方法返回的对象：</target>
        </trans-unit>
        <trans-unit id="d850c82a100dbc6d6a59799d003ca63c04585e27" translate="yes" xml:space="preserve">
          <source>The following example shows code where a &lt;code&gt;debugger&lt;/code&gt; statement has been inserted, to invoke a debugger (if one exists) when the function is called.</source>
          <target state="translated">下面的示例显示了插入 &lt;code&gt;debugger&lt;/code&gt; 语句的代码，该语句在调用函数时调用调试器（如果存在）。</target>
        </trans-unit>
        <trans-unit id="ecc6be9816c449546ff2ea6de11e640bab27e489" translate="yes" xml:space="preserve">
          <source>The following example shows code where a debugger statement has been inserted, to invoke a debugger (if one exists) when the function is called.</source>
          <target state="translated">下面的例子显示了插入调试器语句的代码,以便在调用函数时调用调试器(如果有的话)。</target>
        </trans-unit>
        <trans-unit id="38d40650a327908143a9507b756e781dad6e3669" translate="yes" xml:space="preserve">
          <source>The following example shows example usage of &lt;code&gt;Math.ceil()&lt;/code&gt;.</source>
          <target state="translated">下面的示例显示 &lt;code&gt;Math.ceil()&lt;/code&gt; 的示例用法。</target>
        </trans-unit>
        <trans-unit id="ef01e5a18d9482066885e44fa1f5dc8211fee3ad" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a List formatter returning formatted parts</source>
          <target state="translated">下面的示例显示了如何创建一个返回格式化部件的列表格式化器</target>
        </trans-unit>
        <trans-unit id="645b3479f15b39ee76c25d3c9b4c6e59b2b4c07b" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a List formatter using the English language.</source>
          <target state="translated">下面的例子显示了如何使用英语创建一个List formatter。</target>
        </trans-unit>
        <trans-unit id="783f3fc7a632e64df7742e63f5c1cf2dbd15fcc1" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a relative time formatter returning formatted parts</source>
          <target state="translated">下面的例子显示了如何创建一个相对时间格式化器,返回格式化的部分。</target>
        </trans-unit>
        <trans-unit id="a15ce3ccacb0794a1e0cbf009ea58687e33512fe" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a relative time formatter using the English language.</source>
          <target state="translated">下面的例子显示了如何使用英语创建一个相对时间格式器。</target>
        </trans-unit>
        <trans-unit id="6aef66a7fd07b717af62aec60881c68c4a467ffc" translate="yes" xml:space="preserve">
          <source>The following example shows how to iterate over the properties of an object without executing on inherited properties. Note that the &lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop is already only iterating enumerable items, so one should not assume based on the lack of non-enumerable properties shown in the loop that &lt;code&gt;hasOwnProperty&lt;/code&gt; itself is confined strictly to enumerable items (as with &lt;a href=&quot;getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">以下示例显示如何在不执行继承属性的情况下遍历对象的属性。请注意，&lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt;循环已经仅在迭代可枚举的项目，因此不应基于循环中显示的 &lt;code&gt;hasOwnProperty&lt;/code&gt; 本身严格限于可枚举的项目（如&lt;a href=&quot;getownpropertynames&quot;&gt; &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="05588cf5df11a1b0b917f7765e24afc5d0c27049" translate="yes" xml:space="preserve">
          <source>The following example shows how to modify constructor value of generic objects. Only &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;&quot;test&quot;&lt;/code&gt; will not be affected as they have read-only native constructors. This example shows that it is not always safe to rely on the &lt;code&gt;constructor&lt;/code&gt; property of an object.</source>
          <target state="translated">下面的示例演示如何修改通用对象的构造函数值。只有 &lt;code&gt;true&lt;/code&gt; ， &lt;code&gt;1&lt;/code&gt; 和 &lt;code&gt;&quot;test&quot;&lt;/code&gt; 具有只读的本机构造函数，因此不会受到影响。此示例表明，依赖对象的 &lt;code&gt;constructor&lt;/code&gt; 属性并不总是安全的。</target>
        </trans-unit>
        <trans-unit id="512794980e61d7b8e7fce733381b52be22b2f50f" translate="yes" xml:space="preserve">
          <source>The following example shows how to recompile a regular expression with a new pattern and a new flag.</source>
          <target state="translated">下面的示例显示了如何使用新的模式和新的标志重新编译正则表达式。</target>
        </trans-unit>
        <trans-unit id="b8b66bb707bee2222e5d1aba54a1b032b2321a74" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a relative time formatter for the English language.</source>
          <target state="translated">下面的例子展示了如何使用英语的相对时间格式。</target>
        </trans-unit>
        <trans-unit id="8b2b53fd0c381f6602455a835cc7ce21bd9f543d" translate="yes" xml:space="preserve">
          <source>The following example shows one use case for the &lt;code&gt;finally&lt;/code&gt;-block. The code opens a file and then executes statements that use the file; the &lt;code&gt;finally&lt;/code&gt;-block makes sure the file always closes after it is used even if an exception was thrown.</source>
          <target state="translated">以下示例显示了 &lt;code&gt;finally&lt;/code&gt; -block的一个用例。该代码打开一个文件，然后执行使用该文件的语句。在 &lt;code&gt;finally&lt;/code&gt; 嵌段确保该文件，如果一个异常被抛出它甚至被用来后一直关闭。</target>
        </trans-unit>
        <trans-unit id="16a9e7677db754327f388f87c25488c6eafb7c04" translate="yes" xml:space="preserve">
          <source>The following example shows the difference between a &lt;code&gt;for...of&lt;/code&gt; loop and a &lt;code&gt;for...in&lt;/code&gt; loop when used with an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">下面的示例显示了与&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; 一起&lt;/a&gt;使用时， &lt;code&gt;for...of&lt;/code&gt; 循环和 &lt;code&gt;for...in&lt;/code&gt; 循环之间的区别。</target>
        </trans-unit>
        <trans-unit id="cb030f0bc0c064aa49218c4bc53dbe7177787ab2" translate="yes" xml:space="preserve">
          <source>The following example shows the minimum and maximum integer values that can be represented as &lt;code&gt;Number&lt;/code&gt; object (for details, refer to ECMAScript standard, chapter &lt;em&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;6.1.6 The Number Type&lt;/a&gt;&lt;/em&gt;):</source>
          <target state="translated">以下示例显示了可以表示为 &lt;code&gt;Number&lt;/code&gt; 对象的最小和最大整数值（有关详细信息，请参阅ECMAScript标准的第&lt;em&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;6.1.6&lt;/a&gt;&lt;/em&gt;章&lt;em&gt;Number Type&lt;/em&gt;）：</target>
        </trans-unit>
        <trans-unit id="79a5899f282772844bfdc39b15a2d76d1357f7c0" translate="yes" xml:space="preserve">
          <source>The following example shows the minimum and maximum integer values that can be represented as &lt;code&gt;Number&lt;/code&gt; object. (More details on this are described in the ECMAScript standard, chapter &lt;em&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;6.1.6 The Number Type&lt;/a&gt;.&lt;/em&gt;)</source>
          <target state="translated">以下示例显示了可以表示为 &lt;code&gt;Number&lt;/code&gt; 对象的最小和最大整数值。（有关此问题的更多详细信息，请参见ECMAScript标准的第&lt;em&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;6.1.6&lt;/a&gt;&lt;/em&gt;章&lt;em&gt;&amp;ldquo;数字类型&amp;rdquo;&lt;/em&gt;&lt;em&gt;。&lt;/em&gt;）</target>
        </trans-unit>
        <trans-unit id="8b668e0e307c5ee65cb2f062aacbf2cbff673850" translate="yes" xml:space="preserve">
          <source>The following example shows the use of &lt;code&gt;propertyIsEnumerable&lt;/code&gt; on objects and arrays:</source>
          <target state="translated">以下示例说明了在对象和数组上使用 &lt;code&gt;propertyIsEnumerable&lt;/code&gt; 的方法：</target>
        </trans-unit>
        <trans-unit id="f585c8845f1eff70fb70f7c28ef793920b1cf083" translate="yes" xml:space="preserve">
          <source>The following example takes a string pattern and converts it into an array of objects.</source>
          <target state="translated">下面的例子将一个字符串模式转换成一个对象数组。</target>
        </trans-unit>
        <trans-unit id="526ac138e4fc7f1b7bcc8fdaa130fb0ea5e63515" translate="yes" xml:space="preserve">
          <source>The following example tests an input string for a U.S. zip code. If the zip code uses an invalid format, the throw statement throws an exception by creating an object of type &lt;code&gt;ZipCodeFormatException&lt;/code&gt;.</source>
          <target state="translated">以下示例测试了美国邮政编码的输入字符串。如果邮政编码使用无效的格式，则throw语句通过创建 &lt;code&gt;ZipCodeFormatException&lt;/code&gt; 类型的对象来引发异常。</target>
        </trans-unit>
        <trans-unit id="4dc1382682a3dc481d70442f3a24f55d37812838" translate="yes" xml:space="preserve">
          <source>The following example tests whether all elements in the array are bigger than 10.</source>
          <target state="translated">下面的例子测试数组中的所有元素是否都大于10。</target>
        </trans-unit>
        <trans-unit id="013658f9ea00d8fe11ae283ad06c24b51bcc9655" translate="yes" xml:space="preserve">
          <source>The following example tests whether all elements in the typed array are bigger than 10.</source>
          <target state="translated">下面的例子测试类型数组中的所有元素是否都大于10。</target>
        </trans-unit>
        <trans-unit id="810860b8f4faa61dd02c1765fe41a001722d2b62" translate="yes" xml:space="preserve">
          <source>The following example tests whether any element in the array is bigger than 10.</source>
          <target state="translated">下面的例子测试数组中是否有大于10的元素。</target>
        </trans-unit>
        <trans-unit id="5b1e373ef2933c1c4d588de3f2529dcb712e28b7" translate="yes" xml:space="preserve">
          <source>The following example tests whether any element in the typed array is bigger than 10.</source>
          <target state="translated">下面的例子测试类型数组中是否有元素大于10。</target>
        </trans-unit>
        <trans-unit id="44133647ac3e03eff2080839e68c70a985445297" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;a href=&quot;indexof&quot;&gt;&lt;code&gt;indexOf()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;lastIndexOf()&lt;/code&gt; to locate values in the string &lt;code&gt;&quot;Brave new world&quot;&lt;/code&gt;.</source>
          <target state="translated">以下示例使用&lt;a href=&quot;indexof&quot;&gt; &lt;code&gt;indexOf()&lt;/code&gt; &lt;/a&gt;和 &lt;code&gt;lastIndexOf()&lt;/code&gt; 在字符串 &lt;code&gt;&quot;Brave new world&quot;&lt;/code&gt; 定位值。</target>
        </trans-unit>
        <trans-unit id="f1ae8e3bcf29b717f3d084a3dbee7ee86f3a45f7" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;eval()&lt;/code&gt; to evaluate the string &lt;code&gt;str&lt;/code&gt;. This string consists of JavaScript statements that assigns &lt;code&gt;z&lt;/code&gt; a value of 42 if &lt;code&gt;x&lt;/code&gt; is five, and assigns 0 to &lt;code&gt;z&lt;/code&gt; otherwise. When the second statement is executed, &lt;code&gt;eval()&lt;/code&gt; will cause these statements to be performed, and it will also evaluate the set of statements and return the value that is assigned to &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">以下示例使用 &lt;code&gt;eval()&lt;/code&gt; 评估字符串 &lt;code&gt;str&lt;/code&gt; 。此字符串由JavaScript语句组成，如果 &lt;code&gt;x&lt;/code&gt; 为5，则该JavaScript语句将 &lt;code&gt;z&lt;/code&gt; 的值分配为42 ，否则为 &lt;code&gt;z&lt;/code&gt; 分配0 。当第二条语句执行时， &lt;code&gt;eval()&lt;/code&gt; 将导致这些语句被执行，并且还将评估语句集并返回分配给 &lt;code&gt;z&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="8706b2456fc38fbc87d8e44f1573948714487850" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;eval()&lt;/code&gt; to evaluate the string &lt;code&gt;str&lt;/code&gt;. This string consists of JavaScript statements that open an alert dialog box and assign &lt;code&gt;z&lt;/code&gt; a value of 42 if &lt;code&gt;x&lt;/code&gt; is five, and assigns 0 to &lt;code&gt;z&lt;/code&gt; otherwise. When the second statement is executed, &lt;code&gt;eval()&lt;/code&gt; will cause these statements to be performed, and it will also evaluate the set of statements and return the value that is assigned to &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">以下示例使用 &lt;code&gt;eval()&lt;/code&gt; 评估字符串 &lt;code&gt;str&lt;/code&gt; 。该字符串由JavaScript语句组成，这些JavaScript语句打开警报对话框，如果 &lt;code&gt;x&lt;/code&gt; 为5，则为 &lt;code&gt;z&lt;/code&gt; 分配值42 ，否则为 &lt;code&gt;z&lt;/code&gt; 分配0 。当第二条语句执行时， &lt;code&gt;eval()&lt;/code&gt; 将导致这些语句被执行，并且还将评估语句集并返回分配给 &lt;code&gt;z&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="83750d81b6626f0f19b9c906f35d785ebdddf04c" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;filter()&lt;/code&gt; to create a filtered array that has all elements with values less than 10 removed.</source>
          <target state="translated">下面的示例使用 &lt;code&gt;filter()&lt;/code&gt; 创建一个过滤后的数组，其中删除了所有小于10的元素。</target>
        </trans-unit>
        <trans-unit id="ac871f7b929b9a65b972498979af9ddeef82d1a2" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;filter()&lt;/code&gt; to create a filtered array that has all elements with values less than &lt;code&gt;10&lt;/code&gt; removed.</source>
          <target state="translated">下面的示例使用 &lt;code&gt;filter()&lt;/code&gt; 创建一个过滤后的数组，其中删除了所有小于 &lt;code&gt;10&lt;/code&gt; 的元素。</target>
        </trans-unit>
        <trans-unit id="eca07736cd4beef1170a4d86fc01b7db4d3548e8" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;filter()&lt;/code&gt; to create a filtered json of all elements with non-zero, numeric &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">以下示例使用 &lt;code&gt;filter()&lt;/code&gt; 创建具有非零数字 &lt;code&gt;id&lt;/code&gt; 的所有元素的已过滤json 。</target>
        </trans-unit>
        <trans-unit id="c51b4796506339dc0c87c3cab6544c7dba551328" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;filter()&lt;/code&gt; to create a filtered typed array that has all elements with values less than 10 removed.</source>
          <target state="translated">下面的示例使用 &lt;code&gt;filter()&lt;/code&gt; 创建一个过滤的类型化数组，该数组将删除所有小于10的元素。</target>
        </trans-unit>
        <trans-unit id="d105cc6b7d41842946081721deaa55136ba97875" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;indexOf()&lt;/code&gt; to locate values in an array.</source>
          <target state="translated">下面的示例使用 &lt;code&gt;indexOf()&lt;/code&gt; 在数组中定位值。</target>
        </trans-unit>
        <trans-unit id="33b7e82a7ae088a9da2094234cc0c9414479160f" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;indexOf()&lt;/code&gt; to locate values in the string &lt;code&gt;&quot;Brave new world&quot;&lt;/code&gt;.</source>
          <target state="translated">下面的示例使用 &lt;code&gt;indexOf()&lt;/code&gt; 在字符串 &lt;code&gt;&quot;Brave new world&quot;&lt;/code&gt; 定位值。</target>
        </trans-unit>
        <trans-unit id="3563a82dd6d10528fb8c409c142a55fe8a3d0dc1" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;lastIndexOf&lt;/code&gt; to find all the indices of an element in a given array, using &lt;a href=&quot;push&quot;&gt;&lt;code&gt;push&lt;/code&gt;&lt;/a&gt; to add them to another array as they are found.</source>
          <target state="translated">以下示例使用 &lt;code&gt;lastIndexOf&lt;/code&gt; 查找给定数组中元素的所有索引，并使用&lt;a href=&quot;push&quot;&gt; &lt;code&gt;push&lt;/code&gt; &lt;/a&gt;将它们添加到找到的另一个数组中。</target>
        </trans-unit>
        <trans-unit id="fa55c84d0b64c6544714e03305cd92ceaddfdd06" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;lastIndexOf&lt;/code&gt; to locate values in an array.</source>
          <target state="translated">下面的示例使用 &lt;code&gt;lastIndexOf&lt;/code&gt; 在数组中定位值。</target>
        </trans-unit>
        <trans-unit id="408ea0e67fa187a40dc0544085fe1a65911bf6bd" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;slice()&lt;/code&gt; to create a new string.</source>
          <target state="translated">以下示例使用 &lt;code&gt;slice()&lt;/code&gt; 创建一个新字符串。</target>
        </trans-unit>
        <trans-unit id="c2149c5a632f0d09bdbded683bcc74118d5045fd" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;slice()&lt;/code&gt; with negative indexes.</source>
          <target state="translated">以下示例使用带有负索引的 &lt;code&gt;slice()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="813e7509ea2b05dc5c2035b3fc62aeb74055342a" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;substring()&lt;/code&gt; to display characters from the string &lt;code&gt;'Mozilla'&lt;/code&gt;:</source>
          <target state="translated">以下示例使用 &lt;code&gt;substring()&lt;/code&gt; 来显示字符串 &lt;code&gt;'Mozilla'&lt;/code&gt; 中的字符：</target>
        </trans-unit>
        <trans-unit id="ae0dc5a257ac00973dde41fe43965d487b04c877" translate="yes" xml:space="preserve">
          <source>The following example uses string methods to change the formatting of a string:</source>
          <target state="translated">下面的例子使用字符串方法来改变字符串的格式。</target>
        </trans-unit>
        <trans-unit id="3a70f0bb2decb7901197bd26b68fdae1b9564471" translate="yes" xml:space="preserve">
          <source>The following example uses string methods to change the size of a string:</source>
          <target state="translated">下面的例子使用字符串方法来改变字符串的大小。</target>
        </trans-unit>
        <trans-unit id="4180e0d970ae019777a0641952c4a65ecc2fca9e" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;a href=&quot;sub&quot;&gt;&lt;code&gt;sub()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;sup()&lt;/code&gt; methods to format a string:</source>
          <target state="translated">下面的示例使用&lt;a href=&quot;sub&quot;&gt; &lt;code&gt;sub()&lt;/code&gt; &lt;/a&gt;和 &lt;code&gt;sup()&lt;/code&gt; 方法来格式化字符串：</target>
        </trans-unit>
        <trans-unit id="ae58843fab413870a1d38b37fcce84796d875d3e" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;code&gt;Number&lt;/code&gt; object's properties to assign values to several numeric variables:</source>
          <target state="translated">下面的示例使用 &lt;code&gt;Number&lt;/code&gt; 对象的属性将值分配给几个数字变量：</target>
        </trans-unit>
        <trans-unit id="e553a46648eb3a34731f83c0bd5fb843b999f45a" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;code&gt;fixed&lt;/code&gt; method to change the formatting of a string:</source>
          <target state="translated">下面的示例使用 &lt;code&gt;fixed&lt;/code&gt; 方法更改字符串的格式：</target>
        </trans-unit>
        <trans-unit id="0ba649a48b369ce41e56cac9e631a466d1f3d2e6" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;code&gt;fontcolor()&lt;/code&gt; method to change the color of a string by producing a string with the HTML &lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">下面的示例使用 &lt;code&gt;fontcolor()&lt;/code&gt; 方法通过使用HTML &lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt; 标记生成字符串来更改字符串的颜色。</target>
        </trans-unit>
        <trans-unit id="2741b5548ce2b91dc9b83dc11887f2061a4fa0d7" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;code&gt;sub()&lt;/code&gt; and &lt;a href=&quot;sup&quot;&gt;&lt;code&gt;sup()&lt;/code&gt;&lt;/a&gt; methods to format a string:</source>
          <target state="translated">下面的示例使用 &lt;code&gt;sub()&lt;/code&gt; 和&lt;a href=&quot;sup&quot;&gt; &lt;code&gt;sup()&lt;/code&gt; &lt;/a&gt;方法来格式化字符串：</target>
        </trans-unit>
        <trans-unit id="d01d6d761c44f4ec20ae9515f311bfeec40bd9c7" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;code&gt;substring()&lt;/code&gt; method and &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property to extract the last characters of a particular string. This method may be easier to remember, given that you don't need to know the starting and ending indices as you would in the above examples.</source>
          <target state="translated">下面的示例使用 &lt;code&gt;substring()&lt;/code&gt; 方法和&lt;a href=&quot;length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;属性提取特定字符串的最后一个字符。考虑到您不需要像上面的示例那样知道开始和结束索引，此方法可能更容易记住。</target>
        </trans-unit>
        <trans-unit id="8cef8be6def4d53d9db920de695a3beb3735c5ae" translate="yes" xml:space="preserve">
          <source>The following example will set &lt;code&gt;newString&lt;/code&gt; to &lt;code&gt;'abc - 12345 - #$*%'&lt;/code&gt;:</source>
          <target state="translated">以下示例将 &lt;code&gt;newString&lt;/code&gt; 设置为 &lt;code&gt;'abc - 12345 - #$*%'&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="db073cd2d7888217720fedbda911e6c1f1f841cc" translate="yes" xml:space="preserve">
          <source>The following examples all return &lt;code&gt;-15&lt;/code&gt;:</source>
          <target state="translated">以下示例均返回 &lt;code&gt;-15&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="34a1e33a7b6601f1111cf496f1432579381b9760" translate="yes" xml:space="preserve">
          <source>The following examples all return &lt;code&gt;15&lt;/code&gt;:</source>
          <target state="translated">以下示例均返回 &lt;code&gt;15&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0c67575a7bbd9542216d33d9903fcb058d319fe1" translate="yes" xml:space="preserve">
          <source>The following examples all return &lt;code&gt;3.14&lt;/code&gt;:</source>
          <target state="translated">以下示例均返回 &lt;code&gt;3.14&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b8e06406230bdfd0929a994515fa0a52280b98d7" translate="yes" xml:space="preserve">
          <source>The following examples all return &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">以下示例均返回 &lt;code&gt;4&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f67eae0e84ccc42894c490679176dfdcad7be93" translate="yes" xml:space="preserve">
          <source>The following examples all return &lt;code&gt;4&lt;/code&gt;:</source>
          <target state="translated">以下示例均返回 &lt;code&gt;4&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5ff9122e5995efca958ff02b74f1566414c905dd" translate="yes" xml:space="preserve">
          <source>The following examples all return &lt;code&gt;NaN&lt;/code&gt;:</source>
          <target state="translated">以下示例均返回 &lt;code&gt;NaN&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="711caf5a07449b66228282fa47346718e569e6c4" translate="yes" xml:space="preserve">
          <source>The following examples all return &lt;strong&gt;3.14&lt;/strong&gt;</source>
          <target state="translated">以下示例均返回&lt;strong&gt;3.14&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="10a5e7d6004c86d8ed05d5600d52cd94a7fa93cf" translate="yes" xml:space="preserve">
          <source>The following examples both return &lt;code&gt;900719925474099300&lt;/code&gt;, losing precision as the integer is too large to be represented as a float:</source>
          <target state="translated">以下示例均返回 &lt;code&gt;900719925474099300&lt;/code&gt; ，由于整数太大而无法表示为浮点数，因此会失去精度：</target>
        </trans-unit>
        <trans-unit id="4ac5b2ffb028b3baddc1190b4432d1d1d9c12746" translate="yes" xml:space="preserve">
          <source>The following examples show how to determine the elapsed time between two JavaScript dates in milliseconds.</source>
          <target state="translated">下面的例子展示了如何以毫秒为单位确定两个JavaScript日期之间的经过时间。</target>
        </trans-unit>
        <trans-unit id="d708ec64f0c9fb52e98615f0755e414a69b3bfde" translate="yes" xml:space="preserve">
          <source>The following examples show several ways to create JavaScript dates:</source>
          <target state="translated">下面的例子展示了几种创建JavaScript日期的方法。</target>
        </trans-unit>
        <trans-unit id="ef8caf2cb455686379e6980d62ad84f795a1d598" translate="yes" xml:space="preserve">
          <source>The following examples show some uses of the &lt;code&gt;in&lt;/code&gt; operator.</source>
          <target state="translated">以下示例显示了 &lt;code&gt;in&lt;/code&gt; 运算符的一些用法。</target>
        </trans-unit>
        <trans-unit id="06307bf40766a28da868d2d0d96f0e0f81dca1e3" translate="yes" xml:space="preserve">
          <source>The following examples show that non-existent and deleted elements are visited and that the value passed to the callback is their value when visited.</source>
          <target state="translated">下面的例子表明,非存在的和被删除的元素被访问,并且传递给回调的值是它们被访问时的值。</target>
        </trans-unit>
        <trans-unit id="5f82acbcf60bd7e2c8c6b78cada8435dc6768ce3" translate="yes" xml:space="preserve">
          <source>The following examples show that nonexistent and deleted elements &lt;em&gt;are&lt;/em&gt; visited, and that the value passed to the callback is their value when visited:</source>
          <target state="translated">下面的例子表明，不存在和删除的元素&lt;em&gt;被&lt;/em&gt;访问，而访问时，传递给回调值是它们的价值：</target>
        </trans-unit>
        <trans-unit id="6ada68584028ec8e2b96787ed7c983c4d955b5c8" translate="yes" xml:space="preserve">
          <source>The following examples store &lt;a href=&quot;boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; objects in &lt;code&gt;o&lt;/code&gt;:</source>
          <target state="translated">以下示例将&lt;a href=&quot;boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;对象存储在 &lt;code&gt;o&lt;/code&gt; 中：</target>
        </trans-unit>
        <trans-unit id="008bd3049d296db93026852d2849ec7d78fd3f90" translate="yes" xml:space="preserve">
          <source>The following examples store an empty &lt;code&gt;Object&lt;/code&gt; object in &lt;code&gt;o&lt;/code&gt;:</source>
          <target state="translated">以下示例在 &lt;code&gt;o&lt;/code&gt; 中存储一个空的 &lt;code&gt;Object&lt;/code&gt; 对象：</target>
        </trans-unit>
        <trans-unit id="8fef4b50028cdb88086c17d2aee9b09481826204" translate="yes" xml:space="preserve">
          <source>The following examples tests the behavior of the &lt;code&gt;filter&lt;/code&gt; method when the array is modified.</source>
          <target state="translated">下面的示例在修改数组时测试 &lt;code&gt;filter&lt;/code&gt; 方法的行为。</target>
        </trans-unit>
        <trans-unit id="caabcbd43a7a1f8ed462cc01fbd31f1ed5e2843e" translate="yes" xml:space="preserve">
          <source>The following examples tests the behaviour of the &lt;code&gt;every&lt;/code&gt; method when the array is modified.</source>
          <target state="translated">下面的示例在修改数组时测试 &lt;code&gt;every&lt;/code&gt; 方法的行为。</target>
        </trans-unit>
        <trans-unit id="cecad6c167b9725ef30d3a5bc50980cde3ab0336" translate="yes" xml:space="preserve">
          <source>The following expressions might seem equivalent, but they are not, because the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator is executed before the &lt;code&gt;||&lt;/code&gt; operator (see &lt;a href=&quot;operator_precedence&quot;&gt;operator precedence&lt;/a&gt;).</source>
          <target state="translated">以下表达式可能看起来是等效的，但实际上并不是等效的，因为 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 运算符在 &lt;code&gt;||&lt;/code&gt; 之前执行。运算符（请参阅&lt;a href=&quot;operator_precedence&quot;&gt;运算符优先级&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="2ff6dca67484421184735163b0fe041a33f46347" translate="yes" xml:space="preserve">
          <source>The following extends Strings to include the &lt;code&gt;codePointAt()&lt;/code&gt; function as specified in ECMAScript 2015 for browsers not supporting it natively.</source>
          <target state="translated">以下内容将字符串扩展为包括ECMAScript 2015中指定的 &lt;code&gt;codePointAt()&lt;/code&gt; 函数，用于本机不支持它的浏览器。</target>
        </trans-unit>
        <trans-unit id="33149eda90c352e457bb8250c4d75e7b01e69dc2" translate="yes" xml:space="preserve">
          <source>The following extends Strings to include the &lt;code&gt;codePointAt()&lt;/code&gt; function as specified in ECMAScript 2015 for browsers without native support.</source>
          <target state="translated">以下内容扩展了字符串，以包括ECMAScript 2015中为没有本机支持的浏览器指定的 &lt;code&gt;codePointAt()&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="1c8a67fad53b0993639c1045b4e85fc361e708e3" translate="yes" xml:space="preserve">
          <source>The following function definition pairs are legal and equivalent to each other. Trailing commas don't affect the &lt;code&gt;length&lt;/code&gt; property of function declarations or their &lt;code&gt;arguments&lt;/code&gt; object.</source>
          <target state="translated">以下功能定义对是合法的，并且彼此等效。尾部逗号不会影响函数声明或其 &lt;code&gt;arguments&lt;/code&gt; 对象的 &lt;code&gt;length&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="609bc9cce458f2a52665bae5b65b88626e11c48b" translate="yes" xml:space="preserve">
          <source>The following function has a &lt;code&gt;break&lt;/code&gt; statement that terminates the &lt;a href=&quot;while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; loop when &lt;code&gt;i&lt;/code&gt; is 3, and then returns the value 3 * &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">以下函数具有 &lt;code&gt;break&lt;/code&gt; 语句，当 &lt;code&gt;i&lt;/code&gt; 为3 时终止&lt;a href=&quot;while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt;循环，然后返回值3 * &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="caa4bf05dc819f2ed88500d41f908336b1dcdfb1" translate="yes" xml:space="preserve">
          <source>The following function illustrates the use of &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/a&gt;: the inherited properties are not displayed.</source>
          <target state="translated">以下函数说明&lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;hasOwnProperty()&lt;/code&gt; &lt;/a&gt;的用法：不显示继承的属性。</target>
        </trans-unit>
        <trans-unit id="c1b09a24b248d657d89a9a38abf985e4480dadfb" translate="yes" xml:space="preserve">
          <source>The following function invocation pairs are legal and equivalent to each other.</source>
          <target state="translated">以下函数调用对是合法的,相互之间是等价的。</target>
        </trans-unit>
        <trans-unit id="aa92ee05403e2462ea327819008ce7363daad6a8" translate="yes" xml:space="preserve">
          <source>The following function returns 1 over the square root of 2:</source>
          <target state="translated">下面的函数在2的平方根上返回1。</target>
        </trans-unit>
        <trans-unit id="931ac3d73d87ac19897a0087ce63b1954cf0539d" translate="yes" xml:space="preserve">
          <source>The following function returns a string containing the formatted representation of a number padded with leading zeros.</source>
          <target state="translated">下面的函数返回一个字符串,其中包含一个用前导零填充的数字的格式化表示。</target>
        </trans-unit>
        <trans-unit id="77e731f07946e10af167dd8396531fa4d99b8a73" translate="yes" xml:space="preserve">
          <source>The following function returns e:</source>
          <target state="translated">以下函数返回e。</target>
        </trans-unit>
        <trans-unit id="0d438216dab9bca6470fa8564949eab43f0f4a5f" translate="yes" xml:space="preserve">
          <source>The following function returns the base 10 logarithm of e:</source>
          <target state="translated">以下函数返回e的10次方对数。</target>
        </trans-unit>
        <trans-unit id="2dd0c0a9fa8c406a7feff85a2ce117a1b3b439f6" translate="yes" xml:space="preserve">
          <source>The following function returns the base 2 logarithm of e:</source>
          <target state="translated">以下函数返回e的基数2对数。</target>
        </trans-unit>
        <trans-unit id="c5b9eb8e4062a89f78e54edf94221d43ec5068cd" translate="yes" xml:space="preserve">
          <source>The following function returns the logarithm of &lt;code&gt;y&lt;/code&gt; with base &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; (ie.</source>
          <target state="translated">下面的函数返回的对数 &lt;code&gt;y&lt;/code&gt; 用碱 &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; （即。</target>
        </trans-unit>
        <trans-unit id="3adfb09a340eeb80ec88a7e373cf9d30a06fd7bc" translate="yes" xml:space="preserve">
          <source>The following function returns the logarithm of &lt;code&gt;y&lt;/code&gt; with base &lt;code&gt;x&lt;/code&gt; (ie.</source>
          <target state="translated">下面的函数返回的对数 &lt;code&gt;y&lt;/code&gt; 用碱 &lt;code&gt;x&lt;/code&gt; （即。</target>
        </trans-unit>
        <trans-unit id="a25bfd8e218e8f88e0778acd6e8859d846a35ea0" translate="yes" xml:space="preserve">
          <source>The following function returns the natural log of 10:</source>
          <target state="translated">以下函数返回10的自然对数。</target>
        </trans-unit>
        <trans-unit id="3c3ec30f04bc1a3998ebf4f0dc81cd0c2c01b785" translate="yes" xml:space="preserve">
          <source>The following function returns the natural log of 2:</source>
          <target state="translated">以下函数返回2的自然对数。</target>
        </trans-unit>
        <trans-unit id="26d5ec963fd7f5f6207a9e3b41b9a2e3ab8e9042" translate="yes" xml:space="preserve">
          <source>The following function returns the square root of 2:</source>
          <target state="translated">下面的函数返回2的平方根。</target>
        </trans-unit>
        <trans-unit id="412a99fabb8e3c670dc34d566914e0d7fea0ae81" translate="yes" xml:space="preserve">
          <source>The following function uses &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt; to get the maximum of an array. &lt;code&gt;getMaxOfArray([1, 2, 3])&lt;/code&gt; is equivalent to &lt;code&gt;Math.max(1, 2, 3)&lt;/code&gt;, but you can use &lt;code&gt;getMaxOfArray()&lt;/code&gt; on programmatically constructed arrays. This should only be used for arrays with relatively few elements.</source>
          <target state="translated">以下函数使用&lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt;获取数组的最大值。 &lt;code&gt;getMaxOfArray([1, 2, 3])&lt;/code&gt; 等同于 &lt;code&gt;Math.max(1, 2, 3)&lt;/code&gt; ，但是您可以在以编程方式构造的数组上使用 &lt;code&gt;getMaxOfArray()&lt;/code&gt; 。仅应将其用于具有相对较少元素的数组。</target>
        </trans-unit>
        <trans-unit id="ccb0be88cc25761bcd560b56f507413ede58db69" translate="yes" xml:space="preserve">
          <source>The following function uses &lt;code&gt;Math.PI&lt;/code&gt; to calculate the circumference of a circle with a passed radius.</source>
          <target state="translated">以下函数使用 &lt;code&gt;Math.PI&lt;/code&gt; 来计算具有传递半径的圆的周长。</target>
        </trans-unit>
        <trans-unit id="061834eb03b809e146925d275495f661a7f57d90" translate="yes" xml:space="preserve">
          <source>The following function will throw a &lt;code&gt;ReferenceError&lt;/code&gt; when invoked, because the default parameter value does not have access to the child scope of the function body:</source>
          <target state="translated">下列函数在调用时将引发 &lt;code&gt;ReferenceError&lt;/code&gt; ，因为默认参数值无权访问函数体的子作用域：</target>
        </trans-unit>
        <trans-unit id="61ef984e932abcf03110d58a2bded6764a8dfd40" translate="yes" xml:space="preserve">
          <source>The following is a shim to provide support to non-supporting browsers:</source>
          <target state="translated">以下是一个为不支持的浏览器提供支持的垫片。</target>
        </trans-unit>
        <trans-unit id="6fa4b8bb0d12d866c3c76c1acb8bc953706c4cb3" translate="yes" xml:space="preserve">
          <source>The following is true:</source>
          <target state="translated">以下说法正确的是:</target>
        </trans-unit>
        <trans-unit id="a991e5bdce827eedfb9fbfb4632dfdf03a9f3cf3" translate="yes" xml:space="preserve">
          <source>The following operation involving &lt;strong&gt;booleans&lt;/strong&gt;:</source>
          <target state="translated">以下涉及&lt;strong&gt;布尔值的&lt;/strong&gt;操作：</target>
        </trans-unit>
        <trans-unit id="ac43cce561cd051b6c69e2663f9ab740f90b9b74" translate="yes" xml:space="preserve">
          <source>The following operators may be used with &lt;code&gt;BigInt&lt;/code&gt;s (or object-wrapped &lt;code&gt;BigInt&lt;/code&gt;s): &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;.</source>
          <target state="translated">以下运算符可以与 &lt;code&gt;BigInt&lt;/code&gt; （或对象包装的 &lt;code&gt;BigInt&lt;/code&gt; ）一起使用： &lt;code&gt;+&lt;/code&gt; ， &lt;code&gt;*&lt;/code&gt; ， &lt;code&gt;-&lt;/code&gt; ， &lt;code&gt;**&lt;/code&gt; ， &lt;code&gt;%&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e2165376579c54bb10df726975e561c721af33c0" translate="yes" xml:space="preserve">
          <source>The following parameter is passed to the &lt;code&gt;getPrototypeOf()&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;getPrototypeOf()&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="0e15c332b22241976e1db8d7e980cc1baf421b50" translate="yes" xml:space="preserve">
          <source>The following parameter is passed to the &lt;code&gt;getPrototypeOf&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;getPrototypeOf&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="168eab17f17ebe158b3f02ee3bee4f987728b237" translate="yes" xml:space="preserve">
          <source>The following parameter is passed to the &lt;code&gt;isExtensible()&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;isExtensible()&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="12eb00305c6476161a442726f9a073d4e04c0503" translate="yes" xml:space="preserve">
          <source>The following parameter is passed to the &lt;code&gt;isExtensible&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;isExtensible&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="4b904f14e78a92421d3de1b1b0bc10cd0d547bde" translate="yes" xml:space="preserve">
          <source>The following parameter is passed to the &lt;code&gt;ownKeys()&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;ownKeys()&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="4f50a67a4cb80545dd6f4c711e4a32fe5d645118" translate="yes" xml:space="preserve">
          <source>The following parameter is passed to the &lt;code&gt;ownKeys&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;ownKeys&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="c9864e259a43790c45cb6b1c04de1719cbe71d65" translate="yes" xml:space="preserve">
          <source>The following parameter is passed to the &lt;code&gt;preventExtensions()&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;preventExtensions()&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="0a1f873b3102e21ab765ec8cf3fc4c3058971a48" translate="yes" xml:space="preserve">
          <source>The following parameter is passed to the &lt;code&gt;preventExtensions&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;preventExtensions&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="adbe3bdae03535ba2d0f6073dcbbbe1b7521658a" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to &lt;code&gt;has()&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;has()&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="f479504b2ba267fee6c0c8ed8019bd2b17c573e9" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to &lt;code&gt;has&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;has&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="de4d65ad667114237ce36c76ebfae47c263524cd" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to the &lt;code&gt;apply()&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;apply()&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="fa43a582adf98ab045cf8c54e0843d43ab6b8373" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to the &lt;code&gt;apply&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;apply&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="84095792665333ba0dd339a191dbbb3e35491083" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to the &lt;code&gt;construct()&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;construct()&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="4ab797515f7bfb7482091c203b75ba0da8332710" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to the &lt;code&gt;construct&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">将以下参数传递给 &lt;code&gt;construct&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="98442f842ff92893cd5a88cbfc2a2cf1cf27147d" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to the &lt;code&gt;defineProperty()&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递到 &lt;code&gt;defineProperty()&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="ab7420398c074e030c2b2d0b274113b31eb5b2d2" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to the &lt;code&gt;defineProperty&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递到 &lt;code&gt;defineProperty&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="bd9d01d8112ffdb77eed47b03b769d935d0d2d54" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to the &lt;code&gt;deleteProperty()&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;deleteProperty()&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="b8c5bf5c6d27943370526bc5d8f400e52212e0fd" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to the &lt;code&gt;deleteProperty&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;deleteProperty&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="c0973411126a2c8f1404e334950ce0168260b91d" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to the &lt;code&gt;get()&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;get()&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="da5425b4c0210ec636acf5c70a1fd4a34950ab62" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to the &lt;code&gt;get&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;get&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="e10b2fa1f0ffe6da808a9cc985454803f6e0c0de" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to the &lt;code&gt;getOwnPropertyDescriptor()&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;getOwnPropertyDescriptor()&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="99c63ab197516e310b74aa729d3c01403ed918f7" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to the &lt;code&gt;getOwnPropertyDescriptor&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数将传递给 &lt;code&gt;getOwnPropertyDescriptor&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="168f6d48633e19df026f201b1abe31491d8d390d" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to the &lt;code&gt;set()&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;set()&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="e3e64ab36836bcc7d94cada04ab31978e10fc95d" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to the &lt;code&gt;set&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;set&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="dedc2ba86d206167f958c9980b1a71500b875aec" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to the &lt;code&gt;setPrototypeOf()&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数传递给 &lt;code&gt;setPrototypeOf()&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="5cc1a72fc13e9b21ee388b431e079b9391cc0a59" translate="yes" xml:space="preserve">
          <source>The following parameters are passed to the &lt;code&gt;setPrototypeOf&lt;/code&gt; method. &lt;code&gt;this&lt;/code&gt; is bound to the handler.</source>
          <target state="translated">以下参数将传递给 &lt;code&gt;setPrototypeOf&lt;/code&gt; 方法。 &lt;code&gt;this&lt;/code&gt; 绑定到处理程序。</target>
        </trans-unit>
        <trans-unit id="937e588a79f7bab77d0e4e260afa82cace945198" translate="yes" xml:space="preserve">
          <source>The following polyfill is the most efficient.</source>
          <target state="translated">下面的多元填充物是最有效的。</target>
        </trans-unit>
        <trans-unit id="d7bf164e0c77563f43e44def0b05325de3f4d410" translate="yes" xml:space="preserve">
          <source>The following properties describe the date-time components to use in formatted output, and their desired representations. Implementations are required to support at least the following subsets:</source>
          <target state="translated">以下属性描述了要在格式化输出中使用的数据-时间组件,以及它们所需的表示方式。要求实现至少支持以下子集:</target>
        </trans-unit>
        <trans-unit id="c41695df01ac9ec4823cf03dcadef70433c3ff69" translate="yes" xml:space="preserve">
          <source>The following properties fall into two groups: &lt;code&gt;minimumIntegerDigits&lt;/code&gt;, &lt;code&gt;minimumFractionDigits&lt;/code&gt;, and &lt;code&gt;maximumFractionDigits&lt;/code&gt; in one group, &lt;code&gt;minimumSignificantDigits&lt;/code&gt; and &lt;code&gt;maximumSignificantDigits&lt;/code&gt; in the other. If at least one property from the second group is defined, then the first group is ignored.</source>
          <target state="translated">以下性质分为两组： &lt;code&gt;minimumIntegerDigits&lt;/code&gt; ， &lt;code&gt;minimumFractionDigits&lt;/code&gt; 和 &lt;code&gt;maximumFractionDigits&lt;/code&gt; 在一组中， &lt;code&gt;minimumSignificantDigits&lt;/code&gt; 和 &lt;code&gt;maximumSignificantDigits&lt;/code&gt; 在其他。如果定义了第二组中的至少一个属性，那么将忽略第一组。</target>
        </trans-unit>
        <trans-unit id="8151545a55b4403615db64103afa64686625755e" translate="yes" xml:space="preserve">
          <source>The following provides a means of ensuring that going through a string loop always provides a whole character, even if the string contains characters that are not in the Basic Multi-lingual Plane.</source>
          <target state="translated">下面提供了一种方法,以确保通过字符串循环总是提供一个完整的字符,即使字符串包含的字符不在基本多语言平面中。</target>
        </trans-unit>
        <trans-unit id="0058b3bc2f02a4e20655650055711d4f54275aca" translate="yes" xml:space="preserve">
          <source>The following registers the target object referenced by &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt;, passing in another object as the held value, and not passing in any unregistration token (which means &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; can't be unregistered):</source>
          <target state="translated">以下内容注册由target引用的 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; ，传入另一个对象作为保持值，并且不传入任何注销令牌（这意味着无法注销 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="d4862a7244a7a37394fa2fc5e4b0df8be02a4c6b" translate="yes" xml:space="preserve">
          <source>The following registers the target object referenced by &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt;, passing in the held value &lt;code&gt;&quot;some value&quot;&lt;/code&gt; and passing the target object itself as the unregistration token:</source>
          <target state="translated">下面的代码注册由target引用的 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; ，传入保留值 &lt;code&gt;&quot;some value&quot;&lt;/code&gt; ，并将目标对象本身作为注销令牌传递：</target>
        </trans-unit>
        <trans-unit id="c12fd1be813759e3abb66c9468accaac214413c2" translate="yes" xml:space="preserve">
          <source>The following return statements all break the function execution:</source>
          <target state="translated">下面的返回语句都会打断函数的执行。</target>
        </trans-unit>
        <trans-unit id="f5f13e29076e638f41dab991b29c38412e7787fe" translate="yes" xml:space="preserve">
          <source>The following script switches the words in the string. For the replacement text, the script uses &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges&quot;&gt;capturing groups&lt;/a&gt; and the &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt; replacement patterns.</source>
          <target state="translated">以下脚本切换字符串中的单词。对于替换文本，脚本使用&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges&quot;&gt;捕获组&lt;/a&gt;以及 &lt;code&gt;$1&lt;/code&gt; 和 &lt;code&gt;$2&lt;/code&gt; 替换模式。</target>
        </trans-unit>
        <trans-unit id="6ccbd0bc8090028acdf0c4af34c15e6b0660f4fc" translate="yes" xml:space="preserve">
          <source>The following script switches the words in the string. For the replacement text, the script uses the &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt; replacement patterns.</source>
          <target state="translated">以下脚本切换字符串中的单词。对于替换文本，脚本使用 &lt;code&gt;$1&lt;/code&gt; 和 &lt;code&gt;$2&lt;/code&gt; 替换模式。</target>
        </trans-unit>
        <trans-unit id="47d3cc1fc150fe74ceb90b083848fb986cd2c987" translate="yes" xml:space="preserve">
          <source>The following script uses the &lt;a href=&quot;../string/replace&quot;&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; instance to match a name in the format &lt;em&gt;first last&lt;/em&gt; and output it in the format &lt;em&gt;last, first&lt;/em&gt;. In the replacement text, the script uses &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt; to indicate the results of the corresponding matching parentheses in the regular expression pattern.</source>
          <target state="translated">以下脚本使用&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;实例的&lt;a href=&quot;../string/replace&quot;&gt; &lt;code&gt;replace()&lt;/code&gt; &lt;/a&gt;方法来匹配名称为&lt;em&gt;first last&lt;/em&gt;的名称，并以&lt;em&gt;last，first&lt;/em&gt;格式输出该名称。在替换文本中，脚本使用 &lt;code&gt;$1&lt;/code&gt; 和 &lt;code&gt;$2&lt;/code&gt; 表示正则表达式模式中相应匹配括号的结果。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="743ac89ab1b2ca9932b0dd8ebbba282b86ac2700" translate="yes" xml:space="preserve">
          <source>The following script uses the &lt;a href=&quot;string/replace&quot;&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; instance to match a name in the format &lt;em&gt;first last&lt;/em&gt; and output it in the format &lt;em&gt;last, first&lt;/em&gt;.</source>
          <target state="translated">以下脚本使用&lt;a href=&quot;string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;实例的&lt;a href=&quot;string/replace&quot;&gt; &lt;code&gt;replace()&lt;/code&gt; &lt;/a&gt;方法来匹配名称为&lt;em&gt;first last&lt;/em&gt;的名称，并以&lt;em&gt;last，first&lt;/em&gt;格式输出该名称。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="66e53b869cfd8a1e72141eb6dd27f0fefc4c4247" translate="yes" xml:space="preserve">
          <source>The following script uses the &lt;a href=&quot;string/replace&quot;&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; instance to match a name in the format &lt;em&gt;first last&lt;/em&gt; and output it in the format &lt;em&gt;last, first&lt;/em&gt;. In the replacement text, the script uses &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt; to indicate the results of the corresponding matching parentheses in the regular expression pattern.</source>
          <target state="translated">以下脚本使用&lt;a href=&quot;string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;实例的&lt;a href=&quot;string/replace&quot;&gt; &lt;code&gt;replace()&lt;/code&gt; &lt;/a&gt;方法来匹配名称为&lt;em&gt;first last&lt;/em&gt;的名称，并以&lt;em&gt;last，first&lt;/em&gt;格式输出该名称。在替换文本中，脚本使用 &lt;code&gt;$1&lt;/code&gt; 和 &lt;code&gt;$2&lt;/code&gt; 表示正则表达式模式中对应的匹配括号的结果。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f3af4b10420cc638ddb1ac0f4baa715c3c7acde" translate="yes" xml:space="preserve">
          <source>The following script uses the &lt;a href=&quot;test&quot;&gt;&lt;code&gt;test()&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; instance to grab a number in a generic string.</source>
          <target state="translated">以下脚本使用&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;实例的&lt;a href=&quot;test&quot;&gt; &lt;code&gt;test()&lt;/code&gt; &lt;/a&gt;方法来获取通用字符串中的数字。</target>
        </trans-unit>
        <trans-unit id="9e253082ec00603de24a49b6d772894def1dae7a" translate="yes" xml:space="preserve">
          <source>The following snippet creates a new &lt;code&gt;CompileError&lt;/code&gt; instance, and logs its details to the console:</source>
          <target state="translated">以下代码段创建了一个新的 &lt;code&gt;CompileError&lt;/code&gt; 实例，并将其详细信息记录到控制台：</target>
        </trans-unit>
        <trans-unit id="17a2bebde57b4cb514bc78c904588f7cea008cb6" translate="yes" xml:space="preserve">
          <source>The following snippet creates a new &lt;code&gt;LinkError&lt;/code&gt; instance, and logs its details to the console:</source>
          <target state="translated">以下代码段创建了一个新的 &lt;code&gt;LinkError&lt;/code&gt; 实例，并将其详细信息记录到控制台：</target>
        </trans-unit>
        <trans-unit id="85be124bb9c01dcf7e77b8d2221144dae9cd2243" translate="yes" xml:space="preserve">
          <source>The following snippet creates a new &lt;code&gt;RuntimeError&lt;/code&gt; instance, and logs its details to the console:</source>
          <target state="translated">以下代码段创建一个新的 &lt;code&gt;RuntimeError&lt;/code&gt; 实例，并将其详细信息记录到控制台：</target>
        </trans-unit>
        <trans-unit id="aacd224c0453ffca49e10cdd635cd96ecb5da5b4" translate="yes" xml:space="preserve">
          <source>The following snippet gives a simple example:</source>
          <target state="translated">以下是一个简单的例子。</target>
        </trans-unit>
        <trans-unit id="ec30df8c04565398d5637d415038b1acc414b4c6" translate="yes" xml:space="preserve">
          <source>The following snippet iterates over an object's properties, calculating their sum:</source>
          <target state="translated">以下代码段迭代对象的属性,计算它们的总和。</target>
        </trans-unit>
        <trans-unit id="2afcc2c0b447fea8186479457c7efcba60ca15c4" translate="yes" xml:space="preserve">
          <source>The following statement creates a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object with the arguments treated as UTC instead of local:</source>
          <target state="translated">以下语句创建一个&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;对象，并将其参数视为UTC而不是local：</target>
        </trans-unit>
        <trans-unit id="fe2843b8cc5971e75ecc8c346caa1d4aade94543" translate="yes" xml:space="preserve">
          <source>The following statements call the padZeros function.</source>
          <target state="translated">下面的语句调用padZeros函数。</target>
        </trans-unit>
        <trans-unit id="0438afddea1b305aee1bf6561c3be0974673f1f8" translate="yes" xml:space="preserve">
          <source>The following syntax does not export a default export from the imported module:</source>
          <target state="translated">以下语法不会从导入的模块中导出默认的导出。</target>
        </trans-unit>
        <trans-unit id="2b1a0146ea48dec637db00e6048baec18b421ef1" translate="yes" xml:space="preserve">
          <source>The following syntax with the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">使用&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;运算符的以下语法将引发&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="9158f4b1519f530409f2abee6e30bd14b500ade1" translate="yes" xml:space="preserve">
          <source>The following syntax with the &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator will throw a &lt;a href=&quot;typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">使用&lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;运算符的以下语法将引发&lt;a href=&quot;typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="d93d4de577b5f2425afae26013b10c61f38724e8" translate="yes" xml:space="preserve">
          <source>The following table is ordered from highest (20) to lowest (1) precedence.</source>
          <target state="translated">下表按从高(20)到低(1)的顺序排列。</target>
        </trans-unit>
        <trans-unit id="7e8baa3183748ed8f70e1d1a358edcd710d1b98e" translate="yes" xml:space="preserve">
          <source>The following table is ordered from highest (21) to lowest (1) precedence.</source>
          <target state="translated">下表按从高(21)到低(1)的顺序排列。</target>
        </trans-unit>
        <trans-unit id="a838c16fe9b9e9b20ec27b593c04b0821ea8baff" translate="yes" xml:space="preserve">
          <source>The following table provides a daily implementation status for new features that has not yet reached cross-browser stability. The data is generated by running the relevant feature tests in &lt;a href=&quot;https://github.com/tc39/test262&quot;&gt;Test262&lt;/a&gt;, the standard test suite of JavaScript, in the nightly build, or latest release of each browser's JavaScript engine.</source>
          <target state="translated">下表提供了尚未实现跨浏览器稳定性的新功能的每日实现状态。通过在每个浏览器的JavaScript引擎的夜间版本或最新版本中运行&lt;a href=&quot;https://github.com/tc39/test262&quot;&gt;Test262&lt;/a&gt;（JavaScript的标准测试套件）中的相关功能测试来生成数据。</target>
        </trans-unit>
        <trans-unit id="992afb716f3ad4a892ae58e40a27753dee586eb7" translate="yes" xml:space="preserve">
          <source>The following table provides a daily implementation status for this feature because this feature has not yet reached cross-browser stability. The data is generated by running the relevant feature tests in &lt;a href=&quot;https://github.com/tc39/test262&quot;&gt;Test262&lt;/a&gt;, the standard test suite of JavaScript, in the nightly build, or the latest release of each browser's JavaScript engine.</source>
          <target state="translated">下表提供了此功能的每日实现状态，因为该功能尚未达到跨浏览器的稳定性。数据是通过在夜间构建或每个浏览器的JavaScript引擎的最新版本中运行&lt;a href=&quot;https://github.com/tc39/test262&quot;&gt;Test262&lt;/a&gt;（JavaScript的标准测试套件）中的相关功能测试而生成的。</target>
        </trans-unit>
        <trans-unit id="9657752ef9e7009f8dcd490e5697024aa2425102" translate="yes" xml:space="preserve">
          <source>The following table provides a daily implementation status for this feature, because this feature has not yet reached cross-browser stability. The data is generated by running the relevant feature tests in &lt;a href=&quot;https://github.com/tc39/test262&quot;&gt;Test262&lt;/a&gt;, the standard test suite of JavaScript, in the nightly build, or latest release of each browser's JavaScript engine.</source>
          <target state="translated">下表提供了此功能的每日实施状态，因为该功能尚未达到跨浏览器的稳定性。通过在每个浏览器的JavaScript引擎的夜间版本或最新版本中运行&lt;a href=&quot;https://github.com/tc39/test262&quot;&gt;Test262&lt;/a&gt;（JavaScript的标准测试套件）中的相关功能测试来生成数据。</target>
        </trans-unit>
        <trans-unit id="f4844a753006c31a8bf5c5f7bf55bc1e379707d8" translate="yes" xml:space="preserve">
          <source>The following table shows the results for this script:</source>
          <target state="translated">下表显示了这个脚本的结果。</target>
        </trans-unit>
        <trans-unit id="c85c017993b5e507c59172ead41a6b6e3c0b9455" translate="yes" xml:space="preserve">
          <source>The following table summarizes JavaScript's bitwise operators:</source>
          <target state="translated">下表总结了JavaScript的位元运算符。</target>
        </trans-unit>
        <trans-unit id="5ac8fabfc5529ca28984a3d751a601da81f5fc87" translate="yes" xml:space="preserve">
          <source>The following table summarizes the possible return values of &lt;code&gt;typeof&lt;/code&gt;. For more information about types and primitives, see also the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures&quot;&gt;JavaScript data structure&lt;/a&gt; page.</source>
          <target state="translated">下表总结了 &lt;code&gt;typeof&lt;/code&gt; 的可能返回值。有关类型和基元的更多信息，另请参见&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures&quot;&gt;JavaScript数据结构&lt;/a&gt;页面。</target>
        </trans-unit>
        <trans-unit id="63f5e3ac538b2874e6dfa60bc002f4adfb4b1416" translate="yes" xml:space="preserve">
          <source>The following three expressions create the same regular expression object:</source>
          <target state="translated">以下三种表达式创建了同一个正则表达式对象。</target>
        </trans-unit>
        <trans-unit id="fe06a95037bfc884953f2190dec8c177417c9b75" translate="yes" xml:space="preserve">
          <source>The following three expressions create the same regular expression:</source>
          <target state="translated">以下三种表达式创建了相同的正则表达式。</target>
        </trans-unit>
        <trans-unit id="8d291780671c706d14403b4280496b1c4c62a91d" translate="yes" xml:space="preserve">
          <source>The following works because NaN is the only value in JavaScript which is not equal to itself.</source>
          <target state="translated">下面的工作是因为NaN是JavaScript中唯一不等于自己的值。</target>
        </trans-unit>
        <trans-unit id="f79b67a698098b87e6657a6f4fb9b62eab007283" translate="yes" xml:space="preserve">
          <source>The following works because NaN is the only value in javascript which is not equal to itself.</source>
          <target state="translated">以下工作是因为NaN是javascript中唯一不等于自己的值。</target>
        </trans-unit>
        <trans-unit id="d269af0c76f97a031495ac252672eba2a214b9e6" translate="yes" xml:space="preserve">
          <source>The for-of iteration is always the first component. Multiple for-of iterations or if statements are allowed.</source>
          <target state="translated">for-of迭代总是第一个组件。允许多次for-of迭代或if语句。</target>
        </trans-unit>
        <trans-unit id="c7d42cd2807709742cac1dab07e7e6429265eba9" translate="yes" xml:space="preserve">
          <source>The for...in loop &lt;a href=&quot;../statements/for...in#Array_iteration_and_for...in&quot;&gt;shouldn't be used for Array iteration&lt;/a&gt;. Did you intend to use a &lt;code&gt;&lt;a href=&quot;../statements/for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; loop instead of a &lt;code&gt;for-in&lt;/code&gt; loop to iterate an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;? The &lt;code&gt;for&lt;/code&gt; loop allows you to set an initializer then as well:</source>
          <target state="translated">for ... in循环&lt;a href=&quot;../statements/for...in#Array_iteration_and_for...in&quot;&gt;不应用于Array迭代&lt;/a&gt;。您是否打算使用 &lt;code&gt;&lt;a href=&quot;../statements/for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; 循环而不是 &lt;code&gt;for-in&lt;/code&gt; 循环来迭代&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;？该 &lt;code&gt;for&lt;/code&gt; 循环允许你设置一个初始值，然后还有：</target>
        </trans-unit>
        <trans-unit id="21ce5a47ddf5f5c1892a5ca16f22fbde6d82f5bf" translate="yes" xml:space="preserve">
          <source>The format matching algorithm to use. Possible values are &quot;&lt;code&gt;basic&lt;/code&gt;&quot; and &quot;&lt;code&gt;best fit&lt;/code&gt;&quot;; the default is &quot;&lt;code&gt;best fit&lt;/code&gt;&quot;. See the following paragraphs for information about the use of this property.</source>
          <target state="translated">要使用的格式匹配算法。可能的值为&amp;ldquo; &lt;code&gt;basic&lt;/code&gt; &amp;rdquo;和&amp;ldquo; &lt;code&gt;best fit&lt;/code&gt; &amp;rdquo;；默认值为&amp;ldquo; &lt;code&gt;best fit&lt;/code&gt; &amp;rdquo;。有关使用此属性的信息，请参见以下段落。</target>
        </trans-unit>
        <trans-unit id="9be3bfe024b9dcc99081002eafbe6a99f4645ec3" translate="yes" xml:space="preserve">
          <source>The format matching algorithm to use. Possible values are &lt;code&gt;&quot;basic&quot;&lt;/code&gt; and &lt;code&gt;&quot;best fit&quot;&lt;/code&gt;; the default is &lt;code&gt;&quot;best fit&quot;&lt;/code&gt;. See the following paragraphs for information about the use of this property.</source>
          <target state="translated">要使用的格式匹配算法。可能的值为 &lt;code&gt;&quot;basic&quot;&lt;/code&gt; 和 &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; ；默认值为 &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; 。有关使用此属性的信息，请参见以下段落。</target>
        </trans-unit>
        <trans-unit id="6e5bdfc3b696c4787d7f5b6fdae107d9e2a1d269" translate="yes" xml:space="preserve">
          <source>The format of output message. Possible values are &lt;code&gt;&quot;conjunction&quot;&lt;/code&gt; that stands for &quot;and&quot;-based lists (default, e.g., &lt;code&gt;A, B, and C&lt;/code&gt;), or &lt;code&gt;&quot;disjunction&quot;&lt;/code&gt; that stands for &quot;or&quot;-based lists (e.g., &lt;code&gt;A, B, or C&lt;/code&gt;). &lt;code&gt;&quot;unit&quot;&lt;/code&gt; stands for lists of values with units (e.g., &lt;code&gt;5 pounds, 12 ounces&lt;/code&gt;).</source>
          <target state="translated">输出消息的格式。可能的值是代表基于&amp;ldquo;和&amp;rdquo;的列表的 &lt;code&gt;&quot;conjunction&quot;&lt;/code&gt; （默认值，例如 &lt;code&gt;A, B, and C&lt;/code&gt; ），或代表基于&amp;ldquo;或&amp;rdquo;的列表的 &lt;code&gt;&quot;disjunction&quot;&lt;/code&gt; （例如 &lt;code&gt;A, B, or C&lt;/code&gt; ）。 &lt;code&gt;&quot;unit&quot;&lt;/code&gt; 代表具有单位（例如 &lt;code&gt;5 pounds, 12 ounces&lt;/code&gt; ）的值的列表。</target>
        </trans-unit>
        <trans-unit id="2e6a23ccb0d428becc28a0e42b08df0bfb32dbbe" translate="yes" xml:space="preserve">
          <source>The format of output message. Possible values are:</source>
          <target state="translated">输出信息的格式。可能的值是:</target>
        </trans-unit>
        <trans-unit id="c4814772aceb68342508624addc0cd733835fa19" translate="yes" xml:space="preserve">
          <source>The formatting style to use , the default is &quot;&lt;code&gt;decimal&lt;/code&gt;&quot;.</source>
          <target state="translated">要使用的格式样式，默认为&amp;ldquo; &lt;code&gt;decimal&lt;/code&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="4c7497c6a193ec7f8c4ae54881911856d14272c4" translate="yes" xml:space="preserve">
          <source>The formatting style to use, the default is &lt;code&gt;&quot;long&quot;&lt;/code&gt;.</source>
          <target state="translated">要使用的格式样式，默认为 &lt;code&gt;&quot;long&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b51249a9c5efba458f27d56c20290516ae481d15" translate="yes" xml:space="preserve">
          <source>The formatting style to use. Possible values are &lt;code&gt;&quot;decimal&quot;&lt;/code&gt; for plain number formatting, &lt;code&gt;&quot;currency&quot;&lt;/code&gt; for currency formatting, and &lt;code&gt;&quot;percent&quot;&lt;/code&gt; for percent formatting; the default is &lt;code&gt;&quot;decimal&quot;&lt;/code&gt;.</source>
          <target state="translated">要使用的格式样式。可能的值为纯数字格式的 &lt;code&gt;&quot;decimal&quot;&lt;/code&gt; ， &lt;code&gt;&quot;currency&quot;&lt;/code&gt; 格式的&amp;ldquo; currency&amp;rdquo;和百分比格式的 &lt;code&gt;&quot;percent&quot;&lt;/code&gt; 。默认值为 &lt;code&gt;&quot;decimal&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d596699b99cf981bd77014d547ca2b6e1c2f6b9e" translate="yes" xml:space="preserve">
          <source>The formatting that should be displayed for the number, the defaults is &quot;&lt;code&gt;standard&lt;/code&gt;&quot;</source>
          <target state="translated">该数字应显示的格式，默认为&amp;ldquo; &lt;code&gt;standard&lt;/code&gt; &amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="a9a2687bd75f51167d86ce5a12b20e5afcab2ff4" translate="yes" xml:space="preserve">
          <source>The former approach means that any operation that performs such mutation, that throws an exception on failure to mutate, will have to create the exception itself. For example, &lt;a href=&quot;../../object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt;&lt;/a&gt; will create and throw a &lt;code&gt;TypeError&lt;/code&gt; itself. If the mutation is performed by an operation that &lt;em&gt;doesn't&lt;/em&gt; ordinarily throw in case of failure, such as &lt;a href=&quot;../../reflect/setprototypeof&quot;&gt;&lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt;&lt;/a&gt;, no exception will be thrown.</source>
          <target state="translated">前一种方法意味着执行此类突变的任何操作（如果发生突变失败都会引发异常）都必须自己创建异常。例如，&lt;a href=&quot;../../object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; &lt;/a&gt;将创建并抛出 &lt;code&gt;TypeError&lt;/code&gt; 本身。如果突变是由一个操作执行&lt;em&gt;不&lt;/em&gt;通常在出现故障的情况下抛出，如&lt;a href=&quot;../../reflect/setprototypeof&quot;&gt; &lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt; &lt;/a&gt;，也不例外将被抛出。</target>
        </trans-unit>
        <trans-unit id="c85d5da70ac3a90e9c2e6569717a34b4468c3322" translate="yes" xml:space="preserve">
          <source>The fraction number.</source>
          <target state="translated">分数号。</target>
        </trans-unit>
        <trans-unit id="657b4d938f69ada8c1426df2f622cc4907247752" translate="yes" xml:space="preserve">
          <source>The fulfillment of the promise is simply logged, via a fulfill callback set using &lt;a href=&quot;promise/then&quot;&gt;&lt;code&gt;p1.then()&lt;/code&gt;&lt;/a&gt;. A few logs show how the synchronous part of the method is decoupled from the asynchronous completion of the promise.</source>
          <target state="translated">通过使用&lt;a href=&quot;promise/then&quot;&gt; &lt;code&gt;p1.then()&lt;/code&gt; &lt;/a&gt;设置的fulfill回调简单地记录了promise的实现。一些日志显示了如何将方法的同步部分与Promise的异步完成分离。</target>
        </trans-unit>
        <trans-unit id="ececd6466ab35c55722b37e4f78dcf8d3e5a682a" translate="yes" xml:space="preserve">
          <source>The full JSON syntax is as follows:</source>
          <target state="translated">完整的JSON语法如下:</target>
        </trans-unit>
        <trans-unit id="4c8b7fb65617ce93232fc91b4b6cbfcf63167c0e" translate="yes" xml:space="preserve">
          <source>The full string of characters matched</source>
          <target state="translated">匹配的完整字符串</target>
        </trans-unit>
        <trans-unit id="7bd3ea22648f4bb4202fd357beb2d876bc32c231" translate="yes" xml:space="preserve">
          <source>The function bound as a getter to the specified property.</source>
          <target state="translated">绑定到指定属性的函数。</target>
        </trans-unit>
        <trans-unit id="7b678f310db86501f1396dcdea4094b38ab01993" translate="yes" xml:space="preserve">
          <source>The function bound as a setter to the specified property.</source>
          <target state="translated">该函数作为设置器绑定到指定的属性。</target>
        </trans-unit>
        <trans-unit id="2ecaf2f261d49b30f7d0da994fcbe6c2636cb485" translate="yes" xml:space="preserve">
          <source>The function declaration (&lt;code&gt;function&lt;/code&gt; statement)</source>
          <target state="translated">函数声明（ &lt;code&gt;function&lt;/code&gt; 语句）</target>
        </trans-unit>
        <trans-unit id="9e921e507f8b7f8d1442786ea718cddb26e1fe39" translate="yes" xml:space="preserve">
          <source>The function expression (&lt;code&gt;function&lt;/code&gt; expression)</source>
          <target state="translated">函数表达式（ &lt;code&gt;function&lt;/code&gt; expression）</target>
        </trans-unit>
        <trans-unit id="da3b1e53fe2413cb7f204420522784474bf1d935" translate="yes" xml:space="preserve">
          <source>The function name also appears when the function is serialized via &lt;a href=&quot;global_objects/function/tostring&quot;&gt;&lt;code&gt;Function&lt;/code&gt;'s toString method&lt;/a&gt;.</source>
          <target state="translated">通过&lt;a href=&quot;global_objects/function/tostring&quot;&gt; &lt;code&gt;Function&lt;/code&gt; 的toString方法&lt;/a&gt;对函数进行序列化时，函数名称也会出现。</target>
        </trans-unit>
        <trans-unit id="dd88e0a29a4aed692f0ed42a9304d90f8c1ec00a" translate="yes" xml:space="preserve">
          <source>The function name.</source>
          <target state="translated">职能名称:</target>
        </trans-unit>
        <trans-unit id="62bdd69c0a22b0df01e076d42d909e2bfb16837c" translate="yes" xml:space="preserve">
          <source>The function name. Can be omitted, in which case the function becomes known as an anonymous function.</source>
          <target state="translated">函数名称。可以省略,在这种情况下,该函数被称为匿名函数。</target>
        </trans-unit>
        <trans-unit id="f7614240b44bca06d14b83cf1abe2f594314766d" translate="yes" xml:space="preserve">
          <source>The function name. Can be omitted, in which case the function is &lt;em&gt;anonymous&lt;/em&gt;. The name is only local to the function body.</source>
          <target state="translated">函数名称。可以省略，在这种情况下，函数为&lt;em&gt;匿名&lt;/em&gt;。该名称仅在功能主体中本地。</target>
        </trans-unit>
        <trans-unit id="ab196234ca12cda83f1a5f88cc198e3eb542db95" translate="yes" xml:space="preserve">
          <source>The function returned by the &lt;code&gt;compare&lt;/code&gt; getter returns a number indicating how &lt;code&gt;string1&lt;/code&gt; and &lt;code&gt;string2&lt;/code&gt; compare to each other according to the sort order of this &lt;a href=&quot;../collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt; object: a negative value if &lt;code&gt;string1&lt;/code&gt; comes before &lt;code&gt;string2&lt;/code&gt;; a positive value if &lt;code&gt;string1&lt;/code&gt; comes after &lt;code&gt;string2&lt;/code&gt;; 0 if they are considered equal.</source>
          <target state="translated">&lt;code&gt;compare&lt;/code&gt; getter返回的函数返回一个数字，该数字指示根据此&lt;a href=&quot;../collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt;对象的排序顺序， &lt;code&gt;string1&lt;/code&gt; 和 &lt;code&gt;string2&lt;/code&gt; 如何相互比较：如果 &lt;code&gt;string1&lt;/code&gt; 在 &lt;code&gt;string2&lt;/code&gt; 之前，则为负；如果 &lt;code&gt;string1&lt;/code&gt; 在 &lt;code&gt;string2&lt;/code&gt; 之后，则为正值；如果它们相等，则为0。</target>
        </trans-unit>
        <trans-unit id="429ee9f92f94546f7fbcc8bb211322a922e1895d" translate="yes" xml:space="preserve">
          <source>The function returned by the &lt;code&gt;format&lt;/code&gt; getter formats a date into a string according to the locale and formatting options of this &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 返回的函数根据此&lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; &lt;/a&gt;对象的语言环境和格式设置选项将日期格式化为字符串。</target>
        </trans-unit>
        <trans-unit id="c00b71412d9e081095256bc3342a353d70f7cd4e" translate="yes" xml:space="preserve">
          <source>The function returned by the &lt;code&gt;format&lt;/code&gt; getter formats a number into a string according to the locale and formatting options of this &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 返回的函数根据此&lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;对象的语言环境和格式设置将数字格式化为字符串。</target>
        </trans-unit>
        <trans-unit id="fab5857a623c581409d5354990b533721b173497" translate="yes" xml:space="preserve">
          <source>The function returned by the &lt;code&gt;format&lt;/code&gt; getter formats a value and a unit into a string according to the locale and formatting options of this &lt;a href=&quot;../relativetimeformat&quot;&gt;&lt;code&gt;Intl.RelativeTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 返回的函数根据此&lt;a href=&quot;../relativetimeformat&quot;&gt; &lt;code&gt;Intl.RelativeTimeFormat&lt;/code&gt; &lt;/a&gt;对象的语言环境和格式设置将值和单位格式化为字符串。</target>
        </trans-unit>
        <trans-unit id="2ecc673f0d69994e7b149448cc587280408b2af2" translate="yes" xml:space="preserve">
          <source>The function&amp;rsquo;s name.</source>
          <target state="translated">函数的名称。</target>
        </trans-unit>
        <trans-unit id="a3e3509a5feb3dd200ea681696cf06d22c571073" translate="yes" xml:space="preserve">
          <source>The generator function declaration (&lt;code&gt;function*&lt;/code&gt; statement)</source>
          <target state="translated">生成器函数声明（ &lt;code&gt;function*&lt;/code&gt; 语句）</target>
        </trans-unit>
        <trans-unit id="d2a434a0139db7e8a2d62a84236951cfb748eba1" translate="yes" xml:space="preserve">
          <source>The generator function expression (&lt;code&gt;function*&lt;/code&gt; expression)</source>
          <target state="translated">生成器函数表达式（ &lt;code&gt;function*&lt;/code&gt; 表达式）</target>
        </trans-unit>
        <trans-unit id="880264df9dd784fe5a4ce45e4105f3d5e5b98c6b" translate="yes" xml:space="preserve">
          <source>The global &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">全局&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="1c36297780bfef1220ae202613574c746319748e" translate="yes" xml:space="preserve">
          <source>The global &lt;a href=&quot;../parsefloat&quot;&gt;&lt;code&gt;parseFloat()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">全局&lt;a href=&quot;../parsefloat&quot;&gt; &lt;code&gt;parseFloat()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="027cdd1d38c80faf686eadfdd4a47631060f7d95" translate="yes" xml:space="preserve">
          <source>The global &lt;a href=&quot;../parseint&quot;&gt;&lt;code&gt;parseInt()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">全局&lt;a href=&quot;../parseint&quot;&gt; &lt;code&gt;parseInt()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="fb00c981780b71f173fbee37d38368abbfa3ca8b" translate="yes" xml:space="preserve">
          <source>The global &lt;code&gt;&lt;strong&gt;Infinity&lt;/strong&gt;&lt;/code&gt; property is a numeric value representing infinity.</source>
          <target state="translated">全局 &lt;code&gt;&lt;strong&gt;Infinity&lt;/strong&gt;&lt;/code&gt; 属性是一个表示无穷大的数值。</target>
        </trans-unit>
        <trans-unit id="64d1f1892749fa9bc4b2887262f573c88b4a2326" translate="yes" xml:space="preserve">
          <source>The global &lt;code&gt;&lt;strong&gt;NaN&lt;/strong&gt;&lt;/code&gt; property is a value representing Not-A-Number.</source>
          <target state="translated">全局 &lt;code&gt;&lt;strong&gt;NaN&lt;/strong&gt;&lt;/code&gt; 属性是一个表示Not-A-Number的值。</target>
        </trans-unit>
        <trans-unit id="66234f04f1f196d0e531a6ec6ef74757a2a57e84" translate="yes" xml:space="preserve">
          <source>The global &lt;code&gt;&lt;strong&gt;globalThis&lt;/strong&gt;&lt;/code&gt; property contains the global &lt;code&gt;this&lt;/code&gt; value, which is akin to the global object.</source>
          <target state="translated">全局 &lt;code&gt;&lt;strong&gt;globalThis&lt;/strong&gt;&lt;/code&gt; 属性包含类似于全局对象的全局 &lt;code&gt;this&lt;/code&gt; 值。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
