<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="8554d053f59f2ea34bc31ee4681625faa76e305e" translate="yes" xml:space="preserve">
          <source>Timezone offset sign, either:</source>
          <target state="translated">时区偏移标志,无论是。</target>
        </trans-unit>
        <trans-unit id="735010d8962f0aecbb49e6bc825b61c55829c7cd" translate="yes" xml:space="preserve">
          <source>To add compatible &lt;code&gt;Object.entries&lt;/code&gt; support in older environments that do not natively support it, you can find a demonstrational implementation of Object.entries in the &lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;tc39/proposal-object-values-entries&lt;/a&gt; (if you don't need any support for IE), a polyfill in the &lt;a href=&quot;https://github.com/es-shims/Object.entries&quot;&gt;es-shims/Object.entries&lt;/a&gt; repositories, or you can use the simple, ready to deploy polyfill listed below.</source>
          <target state="translated">要在本机不支持的较旧环境中添加兼容的 &lt;code&gt;Object.entries&lt;/code&gt; 支持，可以在&lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;tc39 / proposal-object-values-entries中&lt;/a&gt;找到Object.entries的演示实现（如果不需要IE支持） ，&lt;a href=&quot;https://github.com/es-shims/Object.entries&quot;&gt;es-shims / Object.entries&lt;/a&gt;存储库中的polyfill，或者您可以使用下面列出的简单易用的polyfill进行部署。</target>
        </trans-unit>
        <trans-unit id="11e8061b160ea169ddea72755f0b856618a737a7" translate="yes" xml:space="preserve">
          <source>To add compatible &lt;code&gt;Object.keys&lt;/code&gt; support in older environments that do not natively support it, copy the following snippet:</source>
          <target state="translated">要在本机不支持的较旧环境中添加兼容的 &lt;code&gt;Object.keys&lt;/code&gt; 支持，请复制以下代码段：</target>
        </trans-unit>
        <trans-unit id="05bf4d01ba615f0cd3a215a0e64d9df3bd7f545e" translate="yes" xml:space="preserve">
          <source>To add compatible &lt;code&gt;Object.values&lt;/code&gt; support in older environments that do not natively support it, you can find a Polyfill in the &lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;tc39/proposal-object-values-entries&lt;/a&gt; or in the &lt;a href=&quot;https://github.com/es-shims/Object.values&quot;&gt;es-shims/Object.values&lt;/a&gt; repositories.</source>
          <target state="translated">要在本机不支持的较旧环境中添加兼容的 &lt;code&gt;Object.values&lt;/code&gt; 支持，可以在&lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;tc39 / proposal-object-values-entries&lt;/a&gt;或&lt;a href=&quot;https://github.com/es-shims/Object.values&quot;&gt;es-shims / Object.values&lt;/a&gt;存储库中找到Polyfill 。</target>
        </trans-unit>
        <trans-unit id="e87c9dfadb234300ea044e3a6a526ff10cd3c440" translate="yes" xml:space="preserve">
          <source>To append a getter to an existing object later at any time, use &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">若要在以后随时将吸气剂附加到现有对象，请使用&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2a3e1471758522734b843aea1b4e92cd9ed7b6bb" translate="yes" xml:space="preserve">
          <source>To append a setter to an existing object later at any time, use &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">若要稍后将设置器附加到现有对象，请使用&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="229057f1da598e787ee444d5057c05857da31eb2" translate="yes" xml:space="preserve">
          <source>To avoid name clashes with your global symbol keys and other (library code) global symbols, it might be a good idea to prefix your symbols:</source>
          <target state="translated">为了避免与你的全局符号键和其他(库代码)全局符号的名称冲突,给你的符号加上前缀可能是个好主意。</target>
        </trans-unit>
        <trans-unit id="b126d6e2e80461da4f922af64279968f4f8c738b" translate="yes" xml:space="preserve">
          <source>To avoid the error, you need to either add a definition for &lt;code&gt;bar&lt;/code&gt; to the object or check for the existence of the &lt;code&gt;bar&lt;/code&gt; property before trying to access it; one way to do that is to use the &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;Object.prototype.hasOwnProperty()&lt;/code&gt;&lt;/a&gt; method), like this:</source>
          <target state="translated">为避免该错误，您需要在对象上添加 &lt;code&gt;bar&lt;/code&gt; 的定义，或者在尝试访问它之前检查 &lt;code&gt;bar&lt;/code&gt; 属性的存在。一种方法是使用&lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;Object.prototype.hasOwnProperty()&lt;/code&gt; &lt;/a&gt;方法），如下所示：</target>
        </trans-unit>
        <trans-unit id="ff71ce43fff60e2c7e40d45499a27a7de439dc4a" translate="yes" xml:space="preserve">
          <source>To avoid this just assign necessary constructor which you are going to use.</source>
          <target state="translated">为了避免这种情况,只需分配必要的构造函数,你将使用。</target>
        </trans-unit>
        <trans-unit id="ef05d88a53a4e9cf7aa2df5505542ee1fc23439c" translate="yes" xml:space="preserve">
          <source>To avoid this problem (to prevent ASI), you could use parentheses:</source>
          <target state="translated">为了避免这个问题(防止ASI),你可以使用括号。</target>
        </trans-unit>
        <trans-unit id="b1f701e4f578c53ab427a079283d5ee6a7b477b0" translate="yes" xml:space="preserve">
          <source>To be a constant object, the entire reference graph (direct and indirect references to other objects) must reference only immutable frozen objects. The object being frozen is said to be immutable because the entire object &lt;em&gt;state&lt;/em&gt; (values and references to other objects) within the whole object is fixed. Note that strings, numbers, and booleans are always immutable and that Functions and Arrays are objects.</source>
          <target state="translated">要成为常量对象，整个参考图（对其他对象的直接和间接引用）必须仅引用不可变的冻结对象。之所以说被冻结的对象是不可变的，是因为整个对象中的整个对象&lt;em&gt;状态&lt;/em&gt;（值和对其他对象的引用）是固定的。请注意，字符串，数字和布尔值始终是不可变的，而函数和数组是对象。</target>
        </trans-unit>
        <trans-unit id="de007351cb0387325d3097a635ab72efab68a96d" translate="yes" xml:space="preserve">
          <source>To be more precise, the block statement is preventing the function declaration from being &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;hoisted&lt;/a&gt; to the top of the scope. The function is behaving as if it were defined as a function expression and, as such, it is only the implicit variable declaration that gets hoisted to the top of the scope:</source>
          <target state="translated">更准确地说，block语句阻止将函数声明&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;提升&lt;/a&gt;到作用域的顶部。该函数的行为就好像它被定义为函数表达式一样，因此，只有隐式变量声明才被提升到作用域的顶部：</target>
        </trans-unit>
        <trans-unit id="91d84150764106dcb84b71d84665d49643ba81c1" translate="yes" xml:space="preserve">
          <source>To be more stringent in adhering to &lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC 3986&lt;/a&gt; (which reserves !, ', (, ), and *), even though these characters have no formalized URI delimiting uses, the following can be safely used:</source>
          <target state="translated">为了更严格地遵守&lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC 3986&lt;/a&gt;（保留！，'，（，）和*），即使这些字符没有正式的URI分隔用法，也可以安全地使用以下字符：</target>
        </trans-unit>
        <trans-unit id="3ed4a43645f0a2537c0221912eb5a09df85356fb" translate="yes" xml:space="preserve">
          <source>To change &quot;foo&quot; inside the if statement, you need to remove the &lt;code&gt;let&lt;/code&gt; that causes the redeclaration.</source>
          <target state="translated">要在if语句中更改&amp;ldquo; foo&amp;rdquo;，您需要删除导致重新声明的 &lt;code&gt;let&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="16cc73a3ccd7572782dfa5f7a136f79687bbbe73" translate="yes" xml:space="preserve">
          <source>To change it, you could use &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; though.</source>
          <target state="translated">要更改它，可以使用&lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cf6c25e7e31c11f7c29484cdde462e57ff8e0ec5" translate="yes" xml:space="preserve">
          <source>To compare numbers instead of strings, the compare function can simply subtract &lt;code&gt;b&lt;/code&gt; from &lt;code&gt;a&lt;/code&gt;. The following function will sort the array ascending (if it doesn't contain &lt;code&gt;Infinity&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt;):</source>
          <target state="translated">比较数字，而不是字符串，则比较功能可以简单地减去 &lt;code&gt;b&lt;/code&gt; 从 &lt;code&gt;a&lt;/code&gt; 。以下函数将对数组升序排序（如果它不包含 &lt;code&gt;Infinity&lt;/code&gt; 和 &lt;code&gt;NaN&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="af4d1fa2b60b0aab96f8363f72219fd6ee63d633" translate="yes" xml:space="preserve">
          <source>To convert number to its string literal in a particular radix use &lt;code&gt;intValue.toString(radix)&lt;/code&gt;.</source>
          <target state="translated">要将数字转换为特定基数的字符串文字，请使用 &lt;code&gt;intValue.toString(radix)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bdd25ea23fa70526ba94776a9ffa7c104991659a" translate="yes" xml:space="preserve">
          <source>To convert the non-standard expression closures syntax to standard ECMAScript syntax, you can add curly braces and return statements.</source>
          <target state="translated">要将非标准的表达式闭包语法转换为标准的ECMAScript语法,可以添加大括号和返回语句。</target>
        </trans-unit>
        <trans-unit id="9c3d95d344533848c975698d3517cac4ca51dc93" translate="yes" xml:space="preserve">
          <source>To count how many elements are in a &lt;code&gt;Set&lt;/code&gt;, use &lt;a href=&quot;set/size&quot;&gt;&lt;code&gt;Set.prototype.size&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要计算 &lt;code&gt;Set&lt;/code&gt; 中有多少个元素，请使用&lt;a href=&quot;set/size&quot;&gt; &lt;code&gt;Set.prototype.size&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4a70476c40d7f474041614202b80673d7ed88ad9" translate="yes" xml:space="preserve">
          <source>To create a new primitive symbol, you write &lt;code&gt;Symbol()&lt;/code&gt; with an optional string as its description:</source>
          <target state="translated">要创建一个新的原始符号，您可以编写 &lt;code&gt;Symbol()&lt;/code&gt; 并附带一个可选字符串作为其描述：</target>
        </trans-unit>
        <trans-unit id="4131b3bc54e63c2abd6c58d537708c1ccc9e759c" translate="yes" xml:space="preserve">
          <source>To define an object type, create a function for the object type that specifies its name and properties. An object can have a property that is itself or another object. See the examples below.</source>
          <target state="translated">要定义一个对象类型,请为该对象类型创建一个函数,指定其名称和属性。一个对象的属性可以是它自己,也可以是另一个对象。请看下面的例子。</target>
        </trans-unit>
        <trans-unit id="4b772057c1501138b9270507d45837bdfa729e3b" translate="yes" xml:space="preserve">
          <source>To execute multiple statements within a clause, use a block statement (&lt;code&gt;{ ... }&lt;/code&gt;) to group those statements. In general, it is a good practice to always use block statements, especially in code involving nested &lt;code&gt;if&lt;/code&gt; statements:</source>
          <target state="translated">要在一个子句中执行多个语句，请使用block语句（ &lt;code&gt;{ ... }&lt;/code&gt; ）将这些语句分组。通常，最好始终使用块语句，尤其是在涉及嵌套 &lt;code&gt;if&lt;/code&gt; 语句的代码中：</target>
        </trans-unit>
        <trans-unit id="fb5b6aa172088f8e8cb00281ed35e00d5092703a" translate="yes" xml:space="preserve">
          <source>To fix null pointer to &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; values, you can use the &lt;a href=&quot;../operators/typeof&quot;&gt;typeof&lt;/a&gt; operator, for example.</source>
          <target state="translated">要将空指针固定为 &lt;code&gt;undefined&lt;/code&gt; 或 &lt;code&gt;null&lt;/code&gt; 值，可以使用例如&lt;a href=&quot;../operators/typeof&quot;&gt;typeof&lt;/a&gt;运算符。</target>
        </trans-unit>
        <trans-unit id="91a86984838df61ba0846a39480b0309f51a02cc" translate="yes" xml:space="preserve">
          <source>To fix null pointer to &lt;code&gt;undefined&lt;/code&gt; values, you can use the &lt;a href=&quot;../operators/typeof&quot;&gt;typeof&lt;/a&gt; operator, for example.</source>
          <target state="translated">要将空指针固定为 &lt;code&gt;undefined&lt;/code&gt; 值，可以使用例如&lt;a href=&quot;../operators/typeof&quot;&gt;typeof&lt;/a&gt;运算符。</target>
        </trans-unit>
        <trans-unit id="5d0de1e00e0b24955b2e7edd966d5a8cb99b6bfe" translate="yes" xml:space="preserve">
          <source>To fix these errors, you will either need to replace the &lt;a href=&quot;../operators/instanceof&quot;&gt;&lt;code&gt;instanceof&lt;/code&gt; operator&lt;/a&gt; with the &lt;a href=&quot;../operators/typeof&quot;&gt;&lt;code&gt;typeof&lt;/code&gt; operator&lt;/a&gt;, or to make sure you use the function name, instead of the result of its evaluation.</source>
          <target state="translated">要解决这些错误，您将需要用&lt;a href=&quot;../operators/typeof&quot;&gt; &lt;code&gt;typeof&lt;/code&gt; &lt;/a&gt;运算符替换&lt;a href=&quot;../operators/instanceof&quot;&gt; &lt;code&gt;instanceof&lt;/code&gt; 运算&lt;/a&gt;符，或确保使用函数名而不是其求值结果。</target>
        </trans-unit>
        <trans-unit id="6b30ab0fa15a53ce2b025fb9fcebeedead602778" translate="yes" xml:space="preserve">
          <source>To fix this code, you need to access the object like this:</source>
          <target state="translated">要修复这段代码,你需要像这样访问对象。</target>
        </trans-unit>
        <trans-unit id="0b75000801b86b4c7e3a6280f97393340f3378fc" translate="yes" xml:space="preserve">
          <source>To fix this code, you would need to add a parenthesis that closes the condition.</source>
          <target state="translated">要修正这段代码,你需要添加一个括号来关闭条件。</target>
        </trans-unit>
        <trans-unit id="86accf46f3e132880f45e8ff095e3c12c10d297a" translate="yes" xml:space="preserve">
          <source>To fix this error, you will either need to remove line 16, where there is an attempt to set the temperature property, or you will need to implement a &lt;a href=&quot;../functions/set&quot;&gt;setter&lt;/a&gt; for it, for example like this:</source>
          <target state="translated">要解决此错误，您将需要删除尝试设置温度属性的第16行，或者需要为此实现一个&lt;a href=&quot;../functions/set&quot;&gt;setter&lt;/a&gt;，例如：</target>
        </trans-unit>
        <trans-unit id="bf97dc62646ce58482960a37576e08c369e17aa5" translate="yes" xml:space="preserve">
          <source>To fix this error, you will either need to remove the call to &lt;a href=&quot;../global_objects/object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt; entirely, or move it to a position so that the property is added earlier and only later the object is marked as non-extensible. Of course you can also remove the property that was attempted to be added, if you don't need it.</source>
          <target state="translated">要解决此错误，您将需要完全删除对&lt;a href=&quot;../global_objects/object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt;的调用，或者将其移到某个位置，以便该属性被更早地添加，并且仅在以后将该对象标记为不可扩展。当然，如果不需要，您也可以删除尝试添加的属性。</target>
        </trans-unit>
        <trans-unit id="b4ba67838ff27fd0b5e835c26d775ab0240d0d03" translate="yes" xml:space="preserve">
          <source>To fix this warning, the &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; statement can just be omitted, because the variable exists already. In other cases, you might to rename either the function parameter or the variable name.</source>
          <target state="translated">为了解决此警告，可以忽略 &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; 语句，因为该变量已经存在。在其他情况下，您可以重命名函数参数或变量名称。</target>
        </trans-unit>
        <trans-unit id="956ca320c80ca726eca3552fa06ab58884939c87" translate="yes" xml:space="preserve">
          <source>To force the base of an exponentiation expression to be a negative number:</source>
          <target state="translated">迫使指数表达式的基数为负数。</target>
        </trans-unit>
        <trans-unit id="421bbcc452e2335197d911b9dedefef9f4238ca7" translate="yes" xml:space="preserve">
          <source>To free the contents of a variable, you can set it to &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">要释放变量的内容，可以将其设置为&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="747d05132d9cc0d0814a6d6f49d6ab71a0abfb50" translate="yes" xml:space="preserve">
          <source>To get the same effect using template literals, you can now write:</source>
          <target state="translated">要想使用模板字元获得同样的效果,你现在可以写。</target>
        </trans-unit>
        <trans-unit id="0cd3ea0c08a76d95e41cc575c73f75a27dbaa192" translate="yes" xml:space="preserve">
          <source>To guard against this, something like the second line would be used, where &lt;code&gt;b&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;multiply&lt;/code&gt; is called with only one argument:</source>
          <target state="translated">为了防止这种情况，将使用类似于第二行的内容，如果仅使用一个参数调用 &lt;code&gt;multiply&lt;/code&gt; ，则将 &lt;code&gt;b&lt;/code&gt; 设置为 &lt;code&gt;1&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2281f8bdaf901641e3dec3fa6d152fcde978085a" translate="yes" xml:space="preserve">
          <source>To improve in memory usage and to prevent memory leaks, Firefox disallows add-ons to keep strong references to DOM objects after their parent document has been destroyed. A dead object, is holding a strong (keep alive) reference to a DOM element that persists even after it was destroyed in the DOM. To avoid these issues, references to DOM nodes in foreign document should instead be stored in an object which is specific to that document, and cleaned up when the document is unloaded, or stored as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.getWeakReference&quot;&gt;weak references&lt;/a&gt;.</source>
          <target state="translated">为了提高内存使用率并防止内存泄漏，Firefox不允许加载项在其父文档被销毁后保留对DOM对象的强引用。死对象持有对DOM元素的强烈（保持活动状态）引用，即使该元素在DOM中被破坏后也仍然存在。为了避免这些问题，应将对外部文档中DOM节点的引用存储在该文档特定的对象中，并在卸载文档时将其清除，或将其存储为&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.getWeakReference&quot;&gt;弱引用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="62ae4acb76421f9729079bcd34138c41da17b09d" translate="yes" xml:space="preserve">
          <source>To include a flag with the regular expression, use this syntax:</source>
          <target state="translated">要在正则表达式中包含一个标志,请使用这个语法。</target>
        </trans-unit>
        <trans-unit id="6d7b234f80319b329c9f890cf3c6fb0952c75d99" translate="yes" xml:space="preserve">
          <source>To instantiate the new objects, you then use the following:</source>
          <target state="translated">要实例化新的对象,你就可以使用以下方法。</target>
        </trans-unit>
        <trans-unit id="2da07bc6be7bd717dced39e45d7ac3036fc78a69" translate="yes" xml:space="preserve">
          <source>To invert the sign of the result of an exponentiation expression:</source>
          <target state="translated">要把指数表达式的结果的符号反过来。</target>
        </trans-unit>
        <trans-unit id="307515a0238257589b141add168f26a6658356a9" translate="yes" xml:space="preserve">
          <source>To invoke strict mode for an entire script, put the &lt;em&gt;exact&lt;/em&gt; statement &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; (or &lt;code&gt;'use strict';&lt;/code&gt;) before any other statements.</source>
          <target state="translated">要为整个脚本调用严格模式，请输入&lt;em&gt;确切的&lt;/em&gt;语句 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; （或 &lt;code&gt;'use strict';&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="576cfdce3de5306eb146e890163b32ca758257fd" translate="yes" xml:space="preserve">
          <source>To make &quot;bar&quot; a declared variable, you can add the &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; keyword in front of it.</source>
          <target state="translated">要使&amp;ldquo; bar&amp;rdquo;成为已声明的变量，可以在其前面添加 &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; 关键字。</target>
        </trans-unit>
        <trans-unit id="1b6d41263a3058c202ec56d40a9d6b8e1652059e" translate="yes" xml:space="preserve">
          <source>To make an object immutable, recursively freeze each property which is of type object (deep freeze). Use the pattern on a case-by-case basis based on your design when you know the object contains no &lt;em&gt;Unknown prefix: Cycle_(graph_theory).&lt;/em&gt; in the reference graph, otherwise an endless loop will be triggered. An enhancement to &lt;code&gt;deepFreeze()&lt;/code&gt; would be to have an internal function that receives a path (e.g. an Array) argument so you can suppress calling &lt;code&gt;deepFreeze()&lt;/code&gt; recursively when an object is in the process of being made immutable. You still run a risk of freezing an object that shouldn't be frozen, such as [window].</source>
          <target state="translated">为了使对象不可变，请递归冻结对象类型的每个属性（深度冻结）。当您知道对象不包含&lt;em&gt;未知前缀：Cycle_（graph_theory）&lt;/em&gt;时，请根据您的设计逐案使用该模式&lt;em&gt;。&lt;/em&gt;在参考图中，否则将触发无限循环。对 &lt;code&gt;deepFreeze()&lt;/code&gt; 的增强将是具有一个内部函数，该函数可以接收路径（例如Array）参数，因此，当对象处于不可变的过程中时，您可以抑制递归调用 &lt;code&gt;deepFreeze()&lt;/code&gt; 。您仍然有冻结不应该冻结的对象的风险，例如[window]。</target>
        </trans-unit>
        <trans-unit id="cdd97829643819341bae18d4865a301c7a49ae25" translate="yes" xml:space="preserve">
          <source>To mimic the function of the &lt;code&gt;includes()&lt;/code&gt; method, this custom function returns &lt;code&gt;true&lt;/code&gt; if the element exists in the array:</source>
          <target state="translated">为了模仿 &lt;code&gt;includes()&lt;/code&gt; 方法的功能，如果元素存在于数组中，则此自定义函数返回 &lt;code&gt;true&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c99a2f7ab2302c62cb1ccbd0c741ca57d774dc7e" translate="yes" xml:space="preserve">
          <source>To offer protection against timing attacks and fingerprinting, the precision of &lt;code&gt;Date.now()&lt;/code&gt; might get rounded depending on browser settings.</source>
          <target state="translated">为了提供针对定时攻击和指纹保护的保护， &lt;code&gt;Date.now()&lt;/code&gt; 的精度可能会根据浏览器设置而取整。</target>
        </trans-unit>
        <trans-unit id="96915bb562bd10f7386212a4daf00e9d0be01c6c" translate="yes" xml:space="preserve">
          <source>To offer protection against timing attacks and fingerprinting, the precision of &lt;code&gt;new Date().getTime()&lt;/code&gt; might get rounded depending on browser settings.</source>
          <target state="translated">为了提供针对定时攻击和指纹保护的保护， &lt;code&gt;new Date().getTime()&lt;/code&gt; 的精度可能会根据浏览器设置进行舍入。</target>
        </trans-unit>
        <trans-unit id="ac37440f1ea5fb363f65d9cc2e0bc140f034f623" translate="yes" xml:space="preserve">
          <source>To pass the value of &lt;code&gt;this&lt;/code&gt; from one context to another, use &lt;a href=&quot;../global_objects/function/call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../global_objects/function/apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt;</source>
          <target state="translated">要将 &lt;code&gt;this&lt;/code&gt; 的值从一个上下文传递到另一个上下文，请使用&lt;a href=&quot;../global_objects/function/call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../global_objects/function/apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt;&lt;strong&gt;：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c4cf44ffc496e1c3ddaf8ae8f93838d413caef85" translate="yes" xml:space="preserve">
          <source>To perform a global search and replace, include the &lt;code&gt;g&lt;/code&gt; switch in the regular expression.</source>
          <target state="translated">要执行全局搜索和替换，请在正则表达式中包含 &lt;code&gt;g&lt;/code&gt; 开关。</target>
        </trans-unit>
        <trans-unit id="f23eacdabe4319920cbeec8293bbfab4a25022b3" translate="yes" xml:space="preserve">
          <source>To provide a function with promise functionality, simply have it return a promise:</source>
          <target state="translated">要提供一个具有承诺功能的函数,只需让它返回一个承诺即可。</target>
        </trans-unit>
        <trans-unit id="eefa6ae82f1c0d30ce5bb0a330d91982a9f8b2a7" translate="yes" xml:space="preserve">
          <source>To re-run a definition, use Scratchpad's menu Execute &amp;gt; Reload and Run.</source>
          <target state="translated">要重新运行定义，请使用Scratchpad的菜单执行&amp;gt;重新加载并运行。</target>
        </trans-unit>
        <trans-unit id="ca212f1a4ca5b68e70b2f13799d3d4a605bdfbe3" translate="yes" xml:space="preserve">
          <source>To remove a watchpoint, use the &lt;a href=&quot;unwatch&quot;&gt;&lt;code&gt;unwatch()&lt;/code&gt;&lt;/a&gt; method. By default, the &lt;code&gt;watch&lt;/code&gt; method is inherited by every object descended from &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要删除监视点，请使用&lt;a href=&quot;unwatch&quot;&gt; &lt;code&gt;unwatch()&lt;/code&gt; &lt;/a&gt;方法。默认情况下， &lt;code&gt;watch&lt;/code&gt; 方法由&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;派生的每个对象继承。</target>
        </trans-unit>
        <trans-unit id="8ee6bc67f7ce03bb1e34c845d08bbc1ab32fdec2" translate="yes" xml:space="preserve">
          <source>To return a value other than the default, a function must have a &lt;code&gt;&lt;a href=&quot;statements/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; statement that specifies the value to return. A function without a return statement will return a default value. In the case of a &lt;a href=&quot;global_objects/object/constructor&quot;&gt;constructor&lt;/a&gt; called with the &lt;code&gt;&lt;a href=&quot;operators/new&quot;&gt;new&lt;/a&gt;&lt;/code&gt; keyword, the default value is the value of its &lt;code&gt;this&lt;/code&gt; parameter. For all other functions, the default return value is &lt;a href=&quot;global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要返回默认值以外的其他值，函数必须具有一个 &lt;code&gt;&lt;a href=&quot;statements/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 语句，该语句指定要返回的值。没有return语句的函数将返回默认值。对于使用 &lt;code&gt;&lt;a href=&quot;operators/new&quot;&gt;new&lt;/a&gt;&lt;/code&gt; 关键字调用的&lt;a href=&quot;global_objects/object/constructor&quot;&gt;构造函数&lt;/a&gt;，默认值为其 &lt;code&gt;this&lt;/code&gt; 参数的值。对于所有其他函数，默认返回值为&lt;a href=&quot;global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d31111b28eb9b4fc6974976c91cab6c393986b53" translate="yes" xml:space="preserve">
          <source>To rewrite &lt;a href=&quot;../statements/for_each...in&quot;&gt;&lt;code&gt;for each...in&lt;/code&gt;&lt;/a&gt; statements so that values can be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; with &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; as well, you need to guard around &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要重写&lt;a href=&quot;../statements/for_each...in&quot;&gt; &lt;code&gt;for each...in&lt;/code&gt; &lt;/a&gt;语句，以便值可以是 &lt;code&gt;null&lt;/code&gt; 或 &lt;code&gt;undefined&lt;/code&gt; 与&lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;，以及，你需要警惕身边&lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ae85078dfd808f11e87a09a90b41a86b6930269f" translate="yes" xml:space="preserve">
          <source>To see how this works, this is how it would look if the nesting were properly indented:</source>
          <target state="translated">为了了解其工作原理,如果嵌套正确地缩进,就会有这样的效果。</target>
        </trans-unit>
        <trans-unit id="6d3d253ad399aba71e8bddceac06b64b3c64fcf9" translate="yes" xml:space="preserve">
          <source>To serialize circular references you can use a library that supports them (e.g. &lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/cycle.js&quot;&gt;cycle.js&lt;/a&gt; by Douglas Crockford) or implement a solution by yourself, which will require finding and replacing (or removing) the cyclic references by serializable values.</source>
          <target state="translated">要序列化循环引用，可以使用支持循环引用的库（例如Douglas Crockford的&lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/cycle.js&quot;&gt;cycle.js&lt;/a&gt;）或自己实现解决方案，这需要使用可序列化的值查找和替换（或删除）循环引用。</target>
        </trans-unit>
        <trans-unit id="61341a387a73c6e0974b541c310c31fa835bad37" translate="yes" xml:space="preserve">
          <source>To serialize circular references you can use a library that supports them (e.g. &lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/cycle.js&quot;&gt;cycle.js&lt;/a&gt;) or implement a solution by yourself, which will require finding and replacing (or removing) the cyclic references by serializable values.</source>
          <target state="translated">要序列化循环引用，您可以使用支持循环引用的库（例如&lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/cycle.js&quot;&gt;cycle.js&lt;/a&gt;），也可以自己实现解决方案，这需要使用可序列化的值查找和替换（或删除）循环引用。</target>
        </trans-unit>
        <trans-unit id="66dfb8b03b279299af3ce7e3e3995c740c761e43" translate="yes" xml:space="preserve">
          <source>To share memory using &lt;a href=&quot;sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; objects from one agent in the cluster to another (an agent is either the web page&amp;rsquo;s main program or one of its web workers), &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;structured cloning&lt;/a&gt; is used.</source>
          <target state="translated">要使用&lt;a href=&quot;sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt;对象从群集中的一个代理共享内存到另一个代理（代理是网页的主程序或其Web工作者之一），请使用 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage&lt;/a&gt;&lt;/code&gt; 和&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;结构化克隆&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="51294f1892b4cc30fb189f09c42cde8df76f4c80" translate="yes" xml:space="preserve">
          <source>To solve this, &lt;code&gt;Math.fround()&lt;/code&gt; can be used to cast the 64-bit float to a 32-bit float. Internally, JavaScript continues to treat the number as a 64-bit float, it just performs a &quot;round to even&quot; on the 23rd bit of the mantissa, and sets all following mantissa bits to &lt;code&gt;0&lt;/code&gt;. If the number is outside the range of a 32-bit float, &lt;code&gt;&lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt; is returned.</source>
          <target state="translated">为了解决这个问题，可以使用 &lt;code&gt;Math.fround()&lt;/code&gt; 将64位浮点数转换为32位浮点数。在内部，JavaScript继续将数字视为64位浮点数，它仅对尾数的第23位执行&amp;ldquo;舍入到偶数&amp;rdquo;操作，并将所有后续尾数位设置为 &lt;code&gt;0&lt;/code&gt; 。如果该数字超出32位浮点数的范围，则返回 &lt;code&gt;&lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;-Infinity&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6b99e751f92b027a44ab3719b0e301b6ed16d648" translate="yes" xml:space="preserve">
          <source>To sum up values contained in an array of objects you &lt;strong&gt;must&lt;/strong&gt; supply an initial value so that each item passes through your function.</source>
          <target state="translated">要汇总包含在对象数组中的值，&lt;strong&gt;必须&lt;/strong&gt;提供一个初始值，以便每个项目都可以通过您的函数。</target>
        </trans-unit>
        <trans-unit id="d113798c2a75c1ed214232bb80df9ddd29edac47" translate="yes" xml:space="preserve">
          <source>To test if an object is not an instanceof a specific Constructor, you can do</source>
          <target state="translated">要测试一个对象是否不是一个特定的构造函数的实例,你可以这样做</target>
        </trans-unit>
        <trans-unit id="6189e37965976e54d4248b20bb1532f0b7800f11" translate="yes" xml:space="preserve">
          <source>To understand how prototypes are used for inheritance, see guide article &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;Inheritance and the prototype chain&lt;/a&gt;.</source>
          <target state="translated">要了解如何将原型用于继承，请参阅指南文章&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;继承和原型链&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aae9c12807500fea71bdcc71051a39f54f1052f0" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;Array&lt;/code&gt; methods on the &lt;code&gt;arguments&lt;/code&gt; object, it must be converted to a real array first.</source>
          <target state="translated">要在 &lt;code&gt;arguments&lt;/code&gt; 对象上使用 &lt;code&gt;Array&lt;/code&gt; 方法，必须首先将其转换为真实数组。</target>
        </trans-unit>
        <trans-unit id="04a0acd17137930958c4357224572608c36ceb9a" translate="yes" xml:space="preserve">
          <source>To use new with an array of parameters without spread syntax, you would have to do it &lt;strong&gt;indirectly&lt;/strong&gt; through partial application:</source>
          <target state="translated">要使用不带扩展语法的参数数组使用new，您将必须通过部分应用程序&lt;strong&gt;间接&lt;/strong&gt;进行操作：</target>
        </trans-unit>
        <trans-unit id="660ef13750fc5d9c949b57cdae0a4e8e70e15f7a" translate="yes" xml:space="preserve">
          <source>Too much recursion</source>
          <target state="translated">太多的递归</target>
        </trans-unit>
        <trans-unit id="4fa8cc860c52b268dc6a3adcde7305e9415db5bb" translate="yes" xml:space="preserve">
          <source>Tools</source>
          <target state="translated">Tools</target>
        </trans-unit>
        <trans-unit id="c2313470950f865647156a7a4a25ce3c2e83792f" translate="yes" xml:space="preserve">
          <source>Trailing ; is now optional.</source>
          <target state="translated">后面的;现在是可选的。</target>
        </trans-unit>
        <trans-unit id="e55b06e9f89f5676c1b49a5534be9075559f2b41" translate="yes" xml:space="preserve">
          <source>Trailing comma in parameters</source>
          <target state="translated">参数中的逗号</target>
        </trans-unit>
        <trans-unit id="7b5b3a2e5f602edd973d6bc7c27d9b7106a52ef4" translate="yes" xml:space="preserve">
          <source>Trailing commas</source>
          <target state="translated">逗号</target>
        </trans-unit>
        <trans-unit id="42a3bb278c71efefd64c79603bbd7e4b085a3e13" translate="yes" xml:space="preserve">
          <source>Transitioning to strict mode</source>
          <target state="translated">向严格模式过渡</target>
        </trans-unit>
        <trans-unit id="7677dc0a64e242392b7b759584fdce97846e967e" translate="yes" xml:space="preserve">
          <source>Tricky use case</source>
          <target state="translated">棘手的使用案例</target>
        </trans-unit>
        <trans-unit id="5c4f40eb67c2580cbb047c0c2d7b18e62cfc6b44" translate="yes" xml:space="preserve">
          <source>Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard.</source>
          <target state="translated">从字符串的开头和结尾修剪空白。ECMAScript 5标准的一部分。</target>
        </trans-unit>
        <trans-unit id="589248aae63e048840e2320146a334266180f14a" translate="yes" xml:space="preserve">
          <source>Trims whitespace from the beginning of the string.</source>
          <target state="translated">删除字符串开头的空白。</target>
        </trans-unit>
        <trans-unit id="f98e79143326b9112cafa11878a9f99a93d9f8f4" translate="yes" xml:space="preserve">
          <source>Trims whitespace from the end of the string.</source>
          <target state="translated">删除字符串末尾的空白。</target>
        </trans-unit>
        <trans-unit id="4d46d56fedff8d9d8e85c637f94cca6486220b3d" translate="yes" xml:space="preserve">
          <source>Try it:</source>
          <target state="translated">试试吧</target>
        </trans-unit>
        <trans-unit id="ce521adbbb8a6a96e8c658ce0f73754df5d00657" translate="yes" xml:space="preserve">
          <source>Trying to delete a non-configurable property</source>
          <target state="translated">试图删除一个不可配置的属性。</target>
        </trans-unit>
        <trans-unit id="0bc27c8a219ca95024ca4076d021dd8abbc3f750" translate="yes" xml:space="preserve">
          <source>Trying to obtain the class of &lt;code&gt;fooInstance&lt;/code&gt; via &lt;code&gt;fooInstance.constructor.name&lt;/code&gt; won't give us the class name at all but a reference to the static class method. Example:</source>
          <target state="translated">试图通过 &lt;code&gt;fooInstance.constructor.name&lt;/code&gt; 获取 &lt;code&gt;fooInstance&lt;/code&gt; 的类，除了引用静态类方法之外，根本没有给我们类名称。例：</target>
        </trans-unit>
        <trans-unit id="40cfb43d46ab09f148bea5b1d9e1aa5abb45e0bb" translate="yes" xml:space="preserve">
          <source>Trying to use &lt;code&gt;Object.defineProperty()&lt;/code&gt; on native objects throws an error.</source>
          <target state="translated">尝试在本机对象上使用 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 会引发错误。</target>
        </trans-unit>
        <trans-unit id="42aa153f6061661d917a475e9e234bf07b1cb4ae" translate="yes" xml:space="preserve">
          <source>Tutorial on proxies</source>
          <target state="translated">代理人教程</target>
        </trans-unit>
        <trans-unit id="f48575e167a871ba14022198cbf7f03912cfd2c1" translate="yes" xml:space="preserve">
          <source>Two Boolean operands are strictly equal if both are &lt;code&gt;true&lt;/code&gt; or both are &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">如果两个布尔操作数都为 &lt;code&gt;true&lt;/code&gt; 或均为 &lt;code&gt;false&lt;/code&gt; ,则它们严格相等。</target>
        </trans-unit>
        <trans-unit id="87c778f38cdd455f723836213ff5541f9312375a" translate="yes" xml:space="preserve">
          <source>Two Mozilla-specific caveats: First, if your code is JavaScript 1.7 or greater (for example in chrome code or when using the right &lt;code&gt;&amp;lt;script type=&quot;&quot;&amp;gt;&lt;/code&gt;) and is strict mode code, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt; have the functionality they've had since those keywords were first introduced. But strict mode code on the web, loaded with &lt;code&gt;&amp;lt;script src=&quot;&quot;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt;, won't be able to use &lt;code&gt;let&lt;/code&gt;/&lt;code&gt;yield&lt;/code&gt; as identifiers. Second, while ES5 unconditionally reserves the words &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;export&lt;/code&gt;, &lt;code&gt;extends&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt;, and &lt;code&gt;super&lt;/code&gt;, before Firefox 5 Mozilla reserved them only in strict mode.</source>
          <target state="translated">Mozilla的两个特定警告：首先，如果您的代码是JavaScript 1.7或更高版本（例如chrome代码或使用正确的 &lt;code&gt;&amp;lt;script type=&quot;&quot;&amp;gt;&lt;/code&gt; ）并且是严格模式代码，则 &lt;code&gt;let&lt;/code&gt; 和 &lt;code&gt;yield&lt;/code&gt; 具有它们所具有的功能自从首次引入这些关键字以来。但是在网络上加载了 &lt;code&gt;&amp;lt;script src=&quot;&quot;&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt; 的严格模式代码将无法使用 &lt;code&gt;let&lt;/code&gt; / &lt;code&gt;yield&lt;/code&gt; 作为标识符。其次，ES5无条件地保留了 &lt;code&gt;class&lt;/code&gt; ， &lt;code&gt;enum&lt;/code&gt; ， &lt;code&gt;export&lt;/code&gt; ， &lt;code&gt;extends&lt;/code&gt; ， &lt;code&gt;import&lt;/code&gt; 和 &lt;code&gt;super&lt;/code&gt; 等单词，在Firefox 5之前，Mozilla仅在严格模式下保留了它们。</target>
        </trans-unit>
        <trans-unit id="06ba5800961ba03ca52214a88183a949ee3568cc" translate="yes" xml:space="preserve">
          <source>Two digit hour offset, e.g. &quot;14&quot;</source>
          <target state="translated">两位数的小时偏移,如 &quot;14&quot;</target>
        </trans-unit>
        <trans-unit id="8621e04d7232cc2dc37e5b84e933ec3bc06b72e3" translate="yes" xml:space="preserve">
          <source>Two digit minute offset, e.g. &quot;00&quot;</source>
          <target state="translated">两位数的分钟偏移,如 &quot;00&quot;</target>
        </trans-unit>
        <trans-unit id="dcc0b0e27681a4bfd0bb02dab459be7e1da3d54e" translate="yes" xml:space="preserve">
          <source>Two digit years map to 1900 - 1999</source>
          <target state="translated">1900-1999年的两位数年份图</target>
        </trans-unit>
        <trans-unit id="bfdef2d93e0187c887de26ec520756ec15fd21f0" translate="yes" xml:space="preserve">
          <source>Two distinct objects are never equal for either strict or abstract comparisons.</source>
          <target state="translated">无论是严格比较还是抽象比较,两个不同的对象永远不相等。</target>
        </trans-unit>
        <trans-unit id="f9f69cd7d34f5586d87a3b0bb756cc56e3e4faee" translate="yes" xml:space="preserve">
          <source>Two factors influenced the introduction of arrow functions: shorter functions and no existence of &lt;code&gt;this&lt;/code&gt; keyword.</source>
          <target state="translated">有两个因素影响了箭头功能的引入：功能更短且 &lt;code&gt;this&lt;/code&gt; 关键字不存在。</target>
        </trans-unit>
        <trans-unit id="fdb1ca806fe597861317d9dd8b9b0f4e1091e759" translate="yes" xml:space="preserve">
          <source>Two kinds of exceptions</source>
          <target state="translated">两种例外情况</target>
        </trans-unit>
        <trans-unit id="7e45222dc719a42189ddea086a477a76a9f58c58" translate="yes" xml:space="preserve">
          <source>Two numbers are strictly equal when they are numerically equal (have the same number value). &lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt; is not equal to anything, including NaN. Positive and negative zeros are equal to one another.</source>
          <target state="translated">当两个数字在数值上相等时（具有相同的数值）严格相等。&lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt;不等于任何事物，包括NaN。正零和负零彼此相等。</target>
        </trans-unit>
        <trans-unit id="767364ed74f9dfef1bba457b2a31bd97d28ec12b" translate="yes" xml:space="preserve">
          <source>Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.</source>
          <target state="translated">当两个字符串的字符序列相同、长度相同、相应位置上的字符相同时,这两个字符串是严格相等的。</target>
        </trans-unit>
        <trans-unit id="22e62aada2d2ed4e6ef25446cc5d425779700a8b" translate="yes" xml:space="preserve">
          <source>Two variables values can be swapped in one destructuring expression.</source>
          <target state="translated">两个变量值可以在一个解构表达式中进行交换。</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="9af8f14bd15271db0f113f7c146e7fa9294b1caa" translate="yes" xml:space="preserve">
          <source>TypeError</source>
          <target state="translated">TypeError</target>
        </trans-unit>
        <trans-unit id="6d00d4d021cf7823f5159794a262002d93abec26" translate="yes" xml:space="preserve">
          <source>TypeError.prototype</source>
          <target state="translated">TypeError.prototype</target>
        </trans-unit>
        <trans-unit id="d88135ee691d49ad087f9ee359ecbe46ea9528b7" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; has no properties</source>
          <target state="translated">类型错误。&quot;x &quot;没有属性</target>
        </trans-unit>
        <trans-unit id="fda9971b475c2dc350019d59b66915fe2fc5f709" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is (not) &quot;y&quot;</source>
          <target state="translated">类型错误。&quot;x &quot;是(不是)&quot;y&quot;</target>
        </trans-unit>
        <trans-unit id="0c6838555438ef7c5a3c7cfdcfb9cd2b062e017a" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is not a constructor</source>
          <target state="translated">类型错误。&quot;x &quot;不是一个构造函数</target>
        </trans-unit>
        <trans-unit id="b4b3f22cfb909a7ea57fce3d810b02b8c9c4944d" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is not a function</source>
          <target state="translated">类型错误。&quot;x &quot;不是一个函数</target>
        </trans-unit>
        <trans-unit id="0907c062321c618b949345d16de90e484526d617" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is not a non-null object</source>
          <target state="translated">类型错误。&quot;x &quot;不是一个非空对象。</target>
        </trans-unit>
        <trans-unit id="7f1a59d8d05baff12e8984f0d4f979e255eb85be" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is read-only</source>
          <target state="translated">类型错误。&quot;x &quot;是只读的</target>
        </trans-unit>
        <trans-unit id="93a64ae87ca50694ea65931b825ebbc14316100d" translate="yes" xml:space="preserve">
          <source>TypeError: 'x' is not iterable</source>
          <target state="translated">类型错误:'x'不可迭代。</target>
        </trans-unit>
        <trans-unit id="eadd3f3dd3d515bc2008a8c3ecbf97e414fadd33" translate="yes" xml:space="preserve">
          <source>TypeError: More arguments needed</source>
          <target state="translated">类型错误。需要更多参数</target>
        </trans-unit>
        <trans-unit id="2a7a8f3a34edd73e7329425eba83dee00c2a463e" translate="yes" xml:space="preserve">
          <source>TypeError: Reduce of empty array with no initial value</source>
          <target state="translated">类型错误。减少空数组,没有初始值</target>
        </trans-unit>
        <trans-unit id="2062e055b44d15065484da17110096e531bf60f7" translate="yes" xml:space="preserve">
          <source>TypeError: can't access dead object</source>
          <target state="translated">类型错误:不能访问死对象。</target>
        </trans-unit>
        <trans-unit id="9eadd715821193dbb59f2029ac46c9c5acb67bac" translate="yes" xml:space="preserve">
          <source>TypeError: can't access property &quot;x&quot; of &quot;y&quot;</source>
          <target state="translated">类型错误:不能访问 &quot;y &quot;的属性 &quot;x&quot;。</target>
        </trans-unit>
        <trans-unit id="ad4dd8b46b5c3df52f2a0bc7f14317bff5729363" translate="yes" xml:space="preserve">
          <source>TypeError: can't define property &quot;x&quot;: &quot;obj&quot; is not extensible</source>
          <target state="translated">类型错误:不能定义属性 &quot;x&quot;。&quot;obj &quot;是不可扩展的</target>
        </trans-unit>
        <trans-unit id="e7eda2849a3fa05ea9821acd46a58275cc93af66" translate="yes" xml:space="preserve">
          <source>TypeError: can't delete non-configurable array element</source>
          <target state="translated">类型错误:不能删除不可配置的数组元素。</target>
        </trans-unit>
        <trans-unit id="9d546ed256470970d571134f12c516214042a8f8" translate="yes" xml:space="preserve">
          <source>TypeError: can't redefine non-configurable property &quot;x&quot;</source>
          <target state="translated">类型错误:无法重新定义非可配置属性 &quot;x&quot;</target>
        </trans-unit>
        <trans-unit id="0f6a8ff06a09e02690b7ab0b6f620e52b063692d" translate="yes" xml:space="preserve">
          <source>TypeError: cannot use 'in' operator to search for 'x' in 'y'</source>
          <target state="translated">类型错误:不能使用'in'操作符在'y'中搜索'x'。</target>
        </trans-unit>
        <trans-unit id="ab60634a7b25184b9af6dbfe2b46a127f045f29c" translate="yes" xml:space="preserve">
          <source>TypeError: cyclic object value</source>
          <target state="translated">类型错误:循环对象值</target>
        </trans-unit>
        <trans-unit id="4c9fb78d7a67808097cba5dfefcb9df30ae2287d" translate="yes" xml:space="preserve">
          <source>TypeError: invalid 'instanceof' operand 'x'</source>
          <target state="translated">类型错误:无效的'instanceof'操作数'x'。</target>
        </trans-unit>
        <trans-unit id="804985ebf62efa82c95ca44aeb325d939fdd8196" translate="yes" xml:space="preserve">
          <source>TypeError: invalid Array.prototype.sort argument</source>
          <target state="translated">类型错误:无效的Array.prototype.sort参数。</target>
        </trans-unit>
        <trans-unit id="8bd8a78e630e8119c68b4da0cc755876148f3614" translate="yes" xml:space="preserve">
          <source>TypeError: invalid arguments</source>
          <target state="translated">类型错误:无效参数</target>
        </trans-unit>
        <trans-unit id="da892f4d86f86bbc79faa3ccbe6da8413753b79e" translate="yes" xml:space="preserve">
          <source>TypeError: invalid assignment to const &quot;x&quot;</source>
          <target state="translated">类型错误:对const &quot;x &quot;的无效赋值。</target>
        </trans-unit>
        <trans-unit id="504d7c54e7d6b0bedf86d99552944cda9b64611d" translate="yes" xml:space="preserve">
          <source>TypeError: property &quot;x&quot; is non-configurable and can't be deleted</source>
          <target state="translated">类型错误:属性 &quot;x &quot;不可配置,不能删除。</target>
        </trans-unit>
        <trans-unit id="d59f59299d78a1e084bc1ab108285fbe7f7ff24a" translate="yes" xml:space="preserve">
          <source>TypeError: setting getter-only property &quot;x&quot;</source>
          <target state="translated">类型错误:设置只读属性 &quot;x&quot;</target>
        </trans-unit>
        <trans-unit id="162a63e1f2a43ab2ace2903a72b848afcab003b2" translate="yes" xml:space="preserve">
          <source>TypeError: variable &quot;x&quot; redeclares argument</source>
          <target state="translated">类型错误:变量 &quot;x &quot;重新声明参数</target>
        </trans-unit>
        <trans-unit id="8668a6f3f477fa3a4eefc9753392f294a609fc27" translate="yes" xml:space="preserve">
          <source>Typed Array Specification</source>
          <target state="translated">类型化阵列规格</target>
        </trans-unit>
        <trans-unit id="0e3ced9152ebb319d31f440c27bb52b32c3d74e3" translate="yes" xml:space="preserve">
          <source>Typed Arrays</source>
          <target state="translated">类型化数组</target>
        </trans-unit>
        <trans-unit id="c32fcb187550b7bf4d1702cf9e0d2d8aeae8400f" translate="yes" xml:space="preserve">
          <source>Typed array invalid arguments</source>
          <target state="translated">类型化数组无效参数</target>
        </trans-unit>
        <trans-unit id="831e06c03f1dd990a2ed633ba22453d03ef9310d" translate="yes" xml:space="preserve">
          <source>Typed arrays</source>
          <target state="translated">类型数组</target>
        </trans-unit>
        <trans-unit id="5e174443616f1ab6a6488259f4a4c0962e193335" translate="yes" xml:space="preserve">
          <source>Typed arrays, for example a &lt;a href=&quot;../global_objects/uint8array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt;, can't be constructed from a string. In fact, strings can't be in typed arrays at all.</source>
          <target state="translated">类型化的数组，例如&lt;a href=&quot;../global_objects/uint8array&quot;&gt; &lt;code&gt;Uint8Array&lt;/code&gt; &lt;/a&gt;，不能由字符串构造。实际上，字符串根本不能位于类型数组中。</target>
        </trans-unit>
        <trans-unit id="a675e12d09245bf3e11559a6c906caf65a0c34ae" translate="yes" xml:space="preserve">
          <source>TypedArray</source>
          <target state="translated">TypedArray</target>
        </trans-unit>
        <trans-unit id="9565828e7e18feab488461ba94cc0f8b6e1c6d60" translate="yes" xml:space="preserve">
          <source>TypedArray objects</source>
          <target state="translated">TypedArray对象</target>
        </trans-unit>
        <trans-unit id="df563443a3d6070fb25ab6fc8e7e2386c0ceb9a1" translate="yes" xml:space="preserve">
          <source>TypedArray objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The &lt;code&gt;BYTES_PER_ELEMENT&lt;/code&gt; constant contains the number of bytes each element in the given TypedArray has.</source>
          <target state="translated">TypedArray对象在每个元素的字节数以及字节的解释方式方面彼此不同。所述 &lt;code&gt;BYTES_PER_ELEMENT&lt;/code&gt; 常量包含的字节在给定TypedArray每个元件具有的数目。</target>
        </trans-unit>
        <trans-unit id="8308ed4a83ee6818d0174d014e66c11e46202d6a" translate="yes" xml:space="preserve">
          <source>TypedArray objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The &lt;code&gt;name&lt;/code&gt; property describes of what data type the array consists. The first part can be &lt;code&gt;Int&lt;/code&gt; for &quot;integer&quot; or &lt;code&gt;Uint&lt;/code&gt; for an &quot;unsigned integer&quot;, also &lt;code&gt;Float&lt;/code&gt; for &quot;floating point&quot; is used. The second part is a number describing the bit-size of the array. Finally, the object type is &lt;code&gt;Array&lt;/code&gt;, with &lt;code&gt;ClampedArray&lt;/code&gt; as a special case. Please see &lt;a href=&quot;../uint8clampedarray&quot;&gt;&lt;code&gt;Uint8ClampedArray&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">TypedArray对象在每个元素的字节数以及字节的解释方式方面彼此不同。该 &lt;code&gt;name&lt;/code&gt; 属性描述的是什么数据类型的数组组成。第一部分可以是 &lt;code&gt;Int&lt;/code&gt; (表示&amp;ldquo;整数&amp;rdquo;）或 &lt;code&gt;Uint&lt;/code&gt; （表示&amp;ldquo;无符号整数&amp;rdquo;），也可以使用 &lt;code&gt;Float&lt;/code&gt; (表示&amp;ldquo;浮点&amp;rdquo;）。第二部分是一个数字，描述了数组的位大小。最后，对象类型是 &lt;code&gt;Array&lt;/code&gt; ， &lt;code&gt;ClampedArray&lt;/code&gt; 是ClampedArray。有关更多详细信息，请参见&lt;a href=&quot;../uint8clampedarray&quot;&gt; &lt;code&gt;Uint8ClampedArray&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="09d7acc3385ee25cf71171846ae0bfe859fe9a73" translate="yes" xml:space="preserve">
          <source>TypedArray prototype</source>
          <target state="translated">TypedArray原型</target>
        </trans-unit>
        <trans-unit id="d4ce014df3421685733cf5ffe8d38b6f3c599df4" translate="yes" xml:space="preserve">
          <source>TypedArray.@@species</source>
          <target state="translated">TypedArray.@@species</target>
        </trans-unit>
        <trans-unit id="e489cfc13d902aa038749ff4fe48077ca0a7211c" translate="yes" xml:space="preserve">
          <source>TypedArray.BYTES_PER_ELEMENT</source>
          <target state="translated">TypedArray.BYTES_PER_ELEMENT</target>
        </trans-unit>
        <trans-unit id="adf7db6dc7263fcbaca680036e73631182759551" translate="yes" xml:space="preserve">
          <source>TypedArray.from</source>
          <target state="translated">TypedArray.from</target>
        </trans-unit>
        <trans-unit id="8551dc8209fb18b38be485c43801c646aade3a70" translate="yes" xml:space="preserve">
          <source>TypedArray.name</source>
          <target state="translated">TypedArray.name</target>
        </trans-unit>
        <trans-unit id="9a0fb51cb88bee1e979510c2e27b232ed2323ee7" translate="yes" xml:space="preserve">
          <source>TypedArray.of</source>
          <target state="translated">TypedArray.of</target>
        </trans-unit>
        <trans-unit id="059f9b7c5f42d42cd8daa1d1d8596ee8f58560aa" translate="yes" xml:space="preserve">
          <source>TypedArray.prototype</source>
          <target state="translated">TypedArray.prototype</target>
        </trans-unit>
        <trans-unit id="b6575abbbad2379dfd5301919609cfbc4ce6b7d0" translate="yes" xml:space="preserve">
          <source>U+0009</source>
          <target state="translated">U+0009</target>
        </trans-unit>
        <trans-unit id="1f49cae739d7edd9863d8bd81c01910dbbc089fd" translate="yes" xml:space="preserve">
          <source>U+000A</source>
          <target state="translated">U+000A</target>
        </trans-unit>
        <trans-unit id="87323b9e4dc26abc74fce3bd43d832f3f2dd8b38" translate="yes" xml:space="preserve">
          <source>U+000B</source>
          <target state="translated">U+000B</target>
        </trans-unit>
        <trans-unit id="ff0ef333b5e697ca7c0c191c7f65e6b0975a9fde" translate="yes" xml:space="preserve">
          <source>U+000C</source>
          <target state="translated">U+000C</target>
        </trans-unit>
        <trans-unit id="027e1c393361cda817913c6c63c5749c1a1ebf1c" translate="yes" xml:space="preserve">
          <source>U+000D</source>
          <target state="translated">U+000D</target>
        </trans-unit>
        <trans-unit id="28871eed17ccf0d0ed7cb83461497517a2d9d4b0" translate="yes" xml:space="preserve">
          <source>U+000D &amp;lt;CR&amp;gt;,</source>
          <target state="translated">U + 000D &amp;lt;CR&amp;gt;，</target>
        </trans-unit>
        <trans-unit id="538258cce356d6acc3d1b59869631a1b26b44251" translate="yes" xml:space="preserve">
          <source>U+0020</source>
          <target state="translated">U+0020</target>
        </trans-unit>
        <trans-unit id="ac91663a7dc88186dc866819cba4ad5bba584a83" translate="yes" xml:space="preserve">
          <source>U+005C (backslash),</source>
          <target state="translated">U+005C(反斜杠)。</target>
        </trans-unit>
        <trans-unit id="0fec4782338f4a34ab331b24e3952b0e5cb1ad5d" translate="yes" xml:space="preserve">
          <source>U+00A0</source>
          <target state="translated">U+00A0</target>
        </trans-unit>
        <trans-unit id="18beeeef428ffc1df892b484afcdbd03b7363497" translate="yes" xml:space="preserve">
          <source>U+2028</source>
          <target state="translated">U+2028</target>
        </trans-unit>
        <trans-unit id="e3743466af5e5ae35b041ce90fbacc309905247d" translate="yes" xml:space="preserve">
          <source>U+2029</source>
          <target state="translated">U+2029</target>
        </trans-unit>
        <trans-unit id="46d53800c7cc79a0380ef914950cceb919311d12" translate="yes" xml:space="preserve">
          <source>URI encoding or decoding wasn't successful. An argument given to either the &lt;a href=&quot;../global_objects/decodeuri&quot;&gt;&lt;code&gt;decodeURI&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/encodeuri&quot;&gt;&lt;code&gt;encodeURI&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/encodeuricomponent&quot;&gt;&lt;code&gt;encodeURIComponent&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../global_objects/decodeuricomponent&quot;&gt;&lt;code&gt;decodeURIComponent&lt;/code&gt;&lt;/a&gt; function was not valid, so that the function was unable encode or decode properly.</source>
          <target state="translated">URI编码或解码不成功。提供给&lt;a href=&quot;../global_objects/decodeuri&quot;&gt; &lt;code&gt;decodeURI&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../global_objects/encodeuri&quot;&gt; &lt;code&gt;encodeURI&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../global_objects/encodeuricomponent&quot;&gt; &lt;code&gt;encodeURIComponent&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../global_objects/decodeuricomponent&quot;&gt; &lt;code&gt;decodeURIComponent&lt;/code&gt; &lt;/a&gt;函数的参数无效，因此该函数无法正确编码或解码。</target>
        </trans-unit>
        <trans-unit id="d093bdaa782f59ac13b897f7b9054b31839f2bb9" translate="yes" xml:space="preserve">
          <source>URIError</source>
          <target state="translated">URIError</target>
        </trans-unit>
        <trans-unit id="fcd826fdce3e680ba53ae40238970f0c243a035c" translate="yes" xml:space="preserve">
          <source>URIError.prototype</source>
          <target state="translated">URIError.prototype</target>
        </trans-unit>
        <trans-unit id="24dfa6bae3df7e359ff385d1cf0198596d4240ba" translate="yes" xml:space="preserve">
          <source>URIError: malformed URI sequence</source>
          <target state="translated">URIError:错误的URI序列。</target>
        </trans-unit>
        <trans-unit id="bdfd4d8d6952777c39403b2d2e2f8a2a52bf255f" translate="yes" xml:space="preserve">
          <source>UTC</source>
          <target state="translated">UTC</target>
        </trans-unit>
        <trans-unit id="8b25ca8547ac04d71799be3d0a64dd85bdecc8c2" translate="yes" xml:space="preserve">
          <source>UTC)</source>
          <target state="translated">UTC)</target>
        </trans-unit>
        <trans-unit id="cfef49be4c8add6d6446b4adcc537017014f4915" translate="yes" xml:space="preserve">
          <source>UTC+3</source>
          <target state="translated">UTC+3</target>
        </trans-unit>
        <trans-unit id="fe85076f264e61cd020d0710115899e483ea0989" translate="yes" xml:space="preserve">
          <source>UTC-8</source>
          <target state="translated">UTC-8</target>
        </trans-unit>
        <trans-unit id="ff3d5b2abcbe69d249b5c141c82edeacc8a5da9a" translate="yes" xml:space="preserve">
          <source>Udacity: JavaScript Promises</source>
          <target state="translated">Udacity。JavaScript承诺</target>
        </trans-unit>
        <trans-unit id="ee17a2d4842b1562f38fb267817829d58a3dedfb" translate="yes" xml:space="preserve">
          <source>Uint16Array</source>
          <target state="translated">Uint16Array</target>
        </trans-unit>
        <trans-unit id="c5710667eadea14743f763131bdbd164d4d4297f" translate="yes" xml:space="preserve">
          <source>Uint16Array.length</source>
          <target state="translated">Uint16Array.length</target>
        </trans-unit>
        <trans-unit id="633c2aa79d88322b5d53222bfe0bb765531ece57" translate="yes" xml:space="preserve">
          <source>Uint32Array</source>
          <target state="translated">Uint32Array</target>
        </trans-unit>
        <trans-unit id="9a32be0557e5b962a300fae5eae084606cc75c5b" translate="yes" xml:space="preserve">
          <source>Uint32Array.length</source>
          <target state="translated">Uint32Array.length</target>
        </trans-unit>
        <trans-unit id="9dafd0a91ea1eadf5a4b323d71716a37f430543c" translate="yes" xml:space="preserve">
          <source>Uint8Array</source>
          <target state="translated">Uint8Array</target>
        </trans-unit>
        <trans-unit id="ad6c3f16d622ed3c29d4d93a881fdbf40e238c0f" translate="yes" xml:space="preserve">
          <source>Uint8Array.length</source>
          <target state="translated">Uint8Array.length</target>
        </trans-unit>
        <trans-unit id="80d3d1902630c787d741b39af0ddaba8dab6c5b7" translate="yes" xml:space="preserve">
          <source>Uint8ClampedArray</source>
          <target state="translated">Uint8ClampedArray</target>
        </trans-unit>
        <trans-unit id="3a7bddb5e24e03c48a5b389efa8055d3f2f596c5" translate="yes" xml:space="preserve">
          <source>Uint8ClampedArray.length</source>
          <target state="translated">Uint8ClampedArray.length</target>
        </trans-unit>
        <trans-unit id="bb9756e2dd53d8b412b093978529a20e6d87e501" translate="yes" xml:space="preserve">
          <source>Unary Negation</source>
          <target state="translated">单元否定</target>
        </trans-unit>
        <trans-unit id="d2cedd82f30bde7abbd2d251adf7228473d72aed" translate="yes" xml:space="preserve">
          <source>Unary Plus</source>
          <target state="translated">单数加</target>
        </trans-unit>
        <trans-unit id="513b253806a1a356b911c79a51a7bafa6bc52f0a" translate="yes" xml:space="preserve">
          <source>Unary negation (-)</source>
          <target state="translated">单元否定(-)</target>
        </trans-unit>
        <trans-unit id="befe22eda70bd6b5e1a787a97596068e0774676c" translate="yes" xml:space="preserve">
          <source>Unary negation (&lt;code&gt;-&lt;/code&gt;)</source>
          <target state="translated">一元否定（ &lt;code&gt;-&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ca09f5dbf89ea3eafb5ab27f217efe0b06a097c4" translate="yes" xml:space="preserve">
          <source>Unary operators</source>
          <target state="translated">单利运算符</target>
        </trans-unit>
        <trans-unit id="abac30e3a2acb94fc462772b11ad68a9aa79c850" translate="yes" xml:space="preserve">
          <source>Unary plus (+)</source>
          <target state="translated">单音加(+)</target>
        </trans-unit>
        <trans-unit id="6bddeb4ef451282ac6aa78a777db40cd95d2a793" translate="yes" xml:space="preserve">
          <source>Unary plus (&lt;code&gt;+&lt;/code&gt;)</source>
          <target state="translated">一元加号（ &lt;code&gt;+&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="2ae6cd0092c46d08603bf82278684279219f6c3a" translate="yes" xml:space="preserve">
          <source>Unconditional &lt;code&gt;catch&lt;/code&gt; clause</source>
          <target state="translated">无条件 &lt;code&gt;catch&lt;/code&gt; 条款</target>
        </trans-unit>
        <trans-unit id="5140ee34748e590252ad94ce595eb05fc7886054" translate="yes" xml:space="preserve">
          <source>Undeclared var</source>
          <target state="translated">未声明的变量</target>
        </trans-unit>
        <trans-unit id="0646f4afd90c8fdb87bbcb57b63ee1911f5a9a46" translate="yes" xml:space="preserve">
          <source>Undefined</source>
          <target state="translated">Undefined</target>
        </trans-unit>
        <trans-unit id="fb9dc4c2e3785b2c955042e52cbcc556d0858881" translate="yes" xml:space="preserve">
          <source>Undefined prop</source>
          <target state="translated">未定义道具</target>
        </trans-unit>
        <trans-unit id="3fec4e60edf8ef578608ef502f4b2bacf3d7f069" translate="yes" xml:space="preserve">
          <source>Unescaped strings</source>
          <target state="translated">未封装的字符串</target>
        </trans-unit>
        <trans-unit id="9fea685493a4859bb8dc7e48575411686bbd53e5" translate="yes" xml:space="preserve">
          <source>Unexpected token</source>
          <target state="translated">意外的代币</target>
        </trans-unit>
        <trans-unit id="74dc936b263127fe4e9c42a9713ee6214e5bfcfe" translate="yes" xml:space="preserve">
          <source>Unexpected type</source>
          <target state="translated">意外类型</target>
        </trans-unit>
        <trans-unit id="5a088d8dac52305ddd74345a8b035629f9284105" translate="yes" xml:space="preserve">
          <source>Unicode Standard Annex #15, Unicode Normalization Forms</source>
          <target state="translated">統一碼標準附件#15,統一碼規範化表格</target>
        </trans-unit>
        <trans-unit id="f9c11da5db018877d7b5c0c5897bd818df342deb" translate="yes" xml:space="preserve">
          <source>Unicode code point escapes</source>
          <target state="translated">统一码点码逃逸</target>
        </trans-unit>
        <trans-unit id="53798ed42b9b310fc8897a38bd9f5a8ec102f8a2" translate="yes" xml:space="preserve">
          <source>Unicode code point escapes \u{xxxxxx}</source>
          <target state="translated">统一码点码逃逸 (Unicode point code escapes)</target>
        </trans-unit>
        <trans-unit id="f2520911378d53256963efaa10beebc649575df9" translate="yes" xml:space="preserve">
          <source>Unicode code point escapes indicated by &quot;\u{}&quot;, for example &lt;code&gt;\u{2F804}&lt;/code&gt;</source>
          <target state="translated">由&amp;ldquo; \ u {}&amp;rdquo;表示的Unicode代码点转义 &lt;code&gt;\u{2F804}&lt;/code&gt; ，例如\ u {2F804}</target>
        </trans-unit>
        <trans-unit id="c2a65696a4b66acd3ee78503a48ea845d6affce7" translate="yes" xml:space="preserve">
          <source>Unicode code points range from 0 to 1114111 (0x10FFFF). The first 128 Unicode code points are a direct match of the ASCII character encoding. For information on Unicode, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Unicode&quot;&gt;JavaScript Guide&lt;/a&gt;.</source>
          <target state="translated">Unicode代码点的范围是0到1114111（0x10FFFF）。前128个Unicode代码点是ASCII字符编码的直接匹配项。有关Unicode的信息，请参见&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Unicode&quot;&gt;JavaScript Guide&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a025134c79f4b9916732f16566a13ab47dedcf4b" translate="yes" xml:space="preserve">
          <source>Unicode equivalence</source>
          <target state="translated">统一码的等效性</target>
        </trans-unit>
        <trans-unit id="e71b40efb0d9265c1c1c189e5fac0f62e09e0426" translate="yes" xml:space="preserve">
          <source>Unicode escape sequences</source>
          <target state="translated">统一码转义序列</target>
        </trans-unit>
        <trans-unit id="d76088f1c6b72836fc3ecd9c247d6015e773943c" translate="yes" xml:space="preserve">
          <source>Unicode escape sequences (&lt;code&gt;'\u00A9'&lt;/code&gt;)</source>
          <target state="translated">Unicode转义序列（ &lt;code&gt;'\u00A9'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="6a07429888c5454a48c5e7f3c7157573736be014" translate="yes" xml:space="preserve">
          <source>Unicode escape sequences are valid JSON and are well-formed in both UTF-16 and UTF-8.</source>
          <target state="translated">Unicode转义序列是有效的JSON,在UTF-16和UTF-8中都有良好的形式。</target>
        </trans-unit>
        <trans-unit id="4a6ca54dc4df4102b400b35f7aa6149f2bc04adc" translate="yes" xml:space="preserve">
          <source>Unicode escapes started by &quot;\u&quot;, for example &lt;code&gt;\u00A9&lt;/code&gt;</source>
          <target state="translated">以&amp;ldquo; \ u&amp;rdquo;开头的Unicode转义，例如 &lt;code&gt;\u00A9&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5ae9c1a41c16af126275d4895ad5a15fbd0a14b" translate="yes" xml:space="preserve">
          <source>Unicode format-control characters</source>
          <target state="translated">统一码格式控制字符</target>
        </trans-unit>
        <trans-unit id="efa15d0d47400b8935adb1ab9d0e8b0e45121a09" translate="yes" xml:space="preserve">
          <source>Unicode point escapes (&lt;code&gt;\u{}&lt;/code&gt;)</source>
          <target state="translated">Unicode点转义（ &lt;code&gt;\u{}&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b457734b05257a40626b40dc1f3d85a644a6b034" translate="yes" xml:space="preserve">
          <source>Unicode; treat pattern as a sequence of Unicode code points</source>
          <target state="translated">Unicode;将模式视为Unicode码点的序列。</target>
        </trans-unit>
        <trans-unit id="bc7819b34ff87570745fbe461e36a16f80e562ce" translate="yes" xml:space="preserve">
          <source>Unknown</source>
          <target state="translated">Unknown</target>
        </trans-unit>
        <trans-unit id="261fcf34c4ffd802d6ad89abd31a44a403246f9b" translate="yes" xml:space="preserve">
          <source>Unknown&lt;br/&gt;&lt;small&gt;The definition of 'Date.prototype.toString' in that specification.&lt;/small&gt;</source>
          <target state="translated">未知&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo; Date.prototype.toString&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5d6eb41228ded668c4a8d6e78574bc28b4827b14" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;Promise.resolve(2).then(() =&amp;gt; {}, () =&amp;gt; {})&lt;/code&gt; (which will be resolved with &lt;code&gt;undefined&lt;/code&gt;), &lt;code&gt;Promise.resolve(2).finally(() =&amp;gt; {})&lt;/code&gt; will be resolved with &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">与 &lt;code&gt;Promise.resolve(2).then(() =&amp;gt; {}, () =&amp;gt; {})&lt;/code&gt; （将使用 &lt;code&gt;undefined&lt;/code&gt; 解析）不同， &lt;code&gt;Promise.resolve(2).finally(() =&amp;gt; {})&lt;/code&gt; 将用 &lt;code&gt;2&lt;/code&gt; 解决。</target>
        </trans-unit>
        <trans-unit id="992c78e7dae6d35a22f3c338d3ca7543e3e2aebd" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;, you must specify a value for a &lt;code&gt;const&lt;/code&gt; declaration. This throws:</source>
          <target state="translated">与 &lt;code&gt;var&lt;/code&gt; 或 &lt;code&gt;let&lt;/code&gt; 不同，您必须为 &lt;code&gt;const&lt;/code&gt; 声明指定一个值。这引发：</target>
        </trans-unit>
        <trans-unit id="613c8f89d1402bfce10e0e37b5d94ff07d7a3cb9" translate="yes" xml:space="preserve">
          <source>Unlike accessor properties, value properties are always set on the object itself, not on a prototype. However, if a non-writable value property is inherited, it still prevents from modifying the property on the object.</source>
          <target state="translated">与访问器属性不同,值属性总是设置在对象本身,而不是原型上。然而,如果一个不可写的值属性被继承,它仍然阻止修改对象上的属性。</target>
        </trans-unit>
        <trans-unit id="ba04f2c0c252a2d67593d43ddb3827c08d93eb16" translate="yes" xml:space="preserve">
          <source>Unlike all other possible values in JavaScript, it is not possible to rely on the equality operators (== and ===) to determine whether a value &lt;em&gt;is&lt;/em&gt;&lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; or not, because both &lt;code&gt;NaN == NaN&lt;/code&gt; and &lt;code&gt;NaN === NaN&lt;/code&gt; evaluate to &lt;code&gt;false&lt;/code&gt;. Hence, the necessity of an &lt;code&gt;isNaN&lt;/code&gt; function.</source>
          <target state="translated">与JavaScript中所有其他可能的值不同，不可能依靠等号运算符（==和===）来确定一个值是否&lt;em&gt;为&lt;/em&gt;&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;，因为 &lt;code&gt;NaN == NaN&lt;/code&gt; 和 &lt;code&gt;NaN === NaN&lt;/code&gt; 求值 &lt;code&gt;false&lt;/code&gt; 。因此，需要一个 &lt;code&gt;isNaN&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="5efd508e8d41fe9661eaa00bc9ed36669f651ee8" translate="yes" xml:space="preserve">
          <source>Unlike functions defined by function expressions or by the &lt;code&gt;Function&lt;/code&gt; constructor, a function defined by a function declaration can be used before the function declaration itself. For example:</source>
          <target state="translated">与由函数表达式或 &lt;code&gt;Function&lt;/code&gt; 构造函数定义的函数不同，可以在函数声明本身之前使用由函数声明定义的函数。例如：</target>
        </trans-unit>
        <trans-unit id="22fe178bb9987412c1ce8ad5b696df107c408836" translate="yes" xml:space="preserve">
          <source>Unlike in other programming languages (e.g. Python), you can't search in strings using the &lt;a href=&quot;../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt;.</source>
          <target state="translated">与其他编程语言（例如Python）不同，您不能使用&lt;a href=&quot;../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; 运算符&lt;/a&gt;搜索字符串。</target>
        </trans-unit>
        <trans-unit id="98b024aecb9721a4423deed34c80d321abd01b94" translate="yes" xml:space="preserve">
          <source>Unlike most global objects, &lt;code&gt;Reflect&lt;/code&gt; is not a constructor. You cannot use it with a &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt; or invoke the &lt;code&gt;Reflect&lt;/code&gt; object as a function. All properties and methods of &lt;code&gt;Reflect&lt;/code&gt; are static (just like the &lt;a href=&quot;math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt; object).</source>
          <target state="translated">与大多数全局对象不同， &lt;code&gt;Reflect&lt;/code&gt; 不是构造函数。您不能将其与&lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; 运算符&lt;/a&gt;一起使用，也不能将 &lt;code&gt;Reflect&lt;/code&gt; 对象作为函数调用。 &lt;code&gt;Reflect&lt;/code&gt; 的所有属性和方法都是静态的（就像&lt;a href=&quot;math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt;对象一样）。</target>
        </trans-unit>
        <trans-unit id="ddc001d6383fdc0b3350bcf9ef726630747b7699" translate="yes" xml:space="preserve">
          <source>Unlike most other global objects, &lt;code&gt;WebAssembly&lt;/code&gt; is not a constructor (it is not a function object). You can compare it to &lt;a href=&quot;math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt;, which is also a namespace object for mathematical constants and functions, or to &lt;a href=&quot;intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt; which is the namespace object for internationalization constructors and other language sensitive functions.</source>
          <target state="translated">与大多数其他全局对象不同， &lt;code&gt;WebAssembly&lt;/code&gt; 不是构造函数（它不是函数对象）。您可以将其与&lt;a href=&quot;math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt;（它也是数学常量和函数的命名空间对象）进行比较，或与&lt;a href=&quot;intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt;（国际化构造函数和其他语言敏感函数的命名空间对象）进行比较。</target>
        </trans-unit>
        <trans-unit id="d4056340aaf08be974198ab42625840e3f1defbd" translate="yes" xml:space="preserve">
          <source>Unlike some other languages, JavaScript makes no distinction between single-quoted strings and double-quoted strings; therefore, the escape sequences above work in strings created with either single or double quotes.</source>
          <target state="translated">与其他一些语言不同,JavaScript没有区分单引号和双引号字符串,因此,上述转义序列适用于用单引号或双引号创建的字符串。</target>
        </trans-unit>
        <trans-unit id="3b9dce1197424f6e6df686b7bcbba3ed30a161fc" translate="yes" xml:space="preserve">
          <source>Unlike the other global objects, &lt;code&gt;Math&lt;/code&gt; is not a constructor. All properties and methods of &lt;code&gt;Math&lt;/code&gt; are static. You refer to the constant pi as &lt;code&gt;Math.PI&lt;/code&gt; and you call the sine function as &lt;code&gt;Math.sin(x)&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the method's argument. Constants are defined with the full precision of real numbers in JavaScript.</source>
          <target state="translated">与其他全局对象不同， &lt;code&gt;Math&lt;/code&gt; 不是构造函数。 &lt;code&gt;Math&lt;/code&gt; 的所有属性和方法都是静态的。将常量pi称为 &lt;code&gt;Math.PI&lt;/code&gt; ，将正弦函数称为 &lt;code&gt;Math.sin(x)&lt;/code&gt; ，其中 &lt;code&gt;x&lt;/code&gt; 是方法的参数。常量在JavaScript中以实数的全精度定义。</target>
        </trans-unit>
        <trans-unit id="eeefb383e0bbc04cf7a736fd1f6a3533defaebd6" translate="yes" xml:space="preserve">
          <source>Unlike the other three &lt;code&gt;Math&lt;/code&gt; methods: &lt;a href=&quot;floor&quot;&gt;&lt;code&gt;Math.floor()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;ceil&quot;&gt;&lt;code&gt;Math.ceil()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;round&quot;&gt;&lt;code&gt;Math.round()&lt;/code&gt;&lt;/a&gt;, the way &lt;code&gt;Math.trunc()&lt;/code&gt; works is very simple. It &lt;em&gt;truncates&lt;/em&gt; (cuts off) the dot and the digits to the right of it, no matter whether the argument is a positive or negative number.</source>
          <target state="translated">与其他三种 &lt;code&gt;Math&lt;/code&gt; 方法不同：&lt;a href=&quot;floor&quot;&gt; &lt;code&gt;Math.floor()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;ceil&quot;&gt; &lt;code&gt;Math.ceil()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;round&quot;&gt; &lt;code&gt;Math.round()&lt;/code&gt; &lt;/a&gt;， &lt;code&gt;Math.trunc()&lt;/code&gt; 的工作方式非常简单。无论参数是正数还是负数，它都会&lt;em&gt;截断&lt;/em&gt;（&lt;em&gt;截断&lt;/em&gt;）其右边的点和数字。</target>
        </trans-unit>
        <trans-unit id="3777b67e3ef2b77b0df4da0e1a2446fea2519cd3" translate="yes" xml:space="preserve">
          <source>Unlike what common belief suggests, the &lt;code&gt;delete&lt;/code&gt; operator has &lt;strong&gt;nothing&lt;/strong&gt; to do with directly freeing memory. Memory management is done indirectly via breaking references, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;memory management&lt;/a&gt; page and the &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; operator page for more details.</source>
          <target state="translated">与通常的想法不同， &lt;code&gt;delete&lt;/code&gt; 运算符与直接释放内存&lt;strong&gt;无关&lt;/strong&gt;。内存管理是通过中断引用间接完成的，有关更多详细信息，请参见&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;内存管理&lt;/a&gt;页面和 &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; 操作符页面。</target>
        </trans-unit>
        <trans-unit id="ea30abbe64db13ca7800df70b372d3d8701c60f0" translate="yes" xml:space="preserve">
          <source>Unlike what common belief suggests, the &lt;code&gt;delete&lt;/code&gt; operator has &lt;strong&gt;nothing&lt;/strong&gt; to do with directly freeing memory. Memory management is done indirectly via breaking references. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;memory management&lt;/a&gt; page for more details.</source>
          <target state="translated">与通常的想法不同， &lt;code&gt;delete&lt;/code&gt; 运算符与直接释放内存&lt;strong&gt;无关&lt;/strong&gt;。内存管理是通过中断引用间接完成的。有关更多详细信息，请参见&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;内存管理&lt;/a&gt;页面。</target>
        </trans-unit>
        <trans-unit id="1892325da1ca271d2f0925142d0f4c916c78e9ff" translate="yes" xml:space="preserve">
          <source>Unlike with simply undeclared variables and variables that hold a value of &lt;code&gt;undefined&lt;/code&gt;, using the &lt;code&gt;typeof&lt;/code&gt; operator to check for the type of a variable in that variable's TDZ will throw a &lt;code&gt;ReferenceError&lt;/code&gt;:</source>
          <target state="translated">与简单地未声明的变量和具有 &lt;code&gt;undefined&lt;/code&gt; 值的变量不同，使用 &lt;code&gt;typeof&lt;/code&gt; 运算符检查该变量的TDZ中变量的类型将引发 &lt;code&gt;ReferenceError&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="13fbb415054724c22847ea0715d22ed47c3a9f06" translate="yes" xml:space="preserve">
          <source>Unnamed function statement</source>
          <target state="translated">未命名的函数语句</target>
        </trans-unit>
        <trans-unit id="9862cd4cd322ef31e87d03071b6bcceeff8ba01f" translate="yes" xml:space="preserve">
          <source>Unpacking fields from objects passed as function parameter</source>
          <target state="translated">从作为函数参数传递的对象中解包字段。</target>
        </trans-unit>
        <trans-unit id="a72c257472bbec8c93924ec70c97af088fa8b78f" translate="yes" xml:space="preserve">
          <source>Unpacking values from a regular expression match</source>
          <target state="translated">从正则表达式中解包匹配值</target>
        </trans-unit>
        <trans-unit id="3c28b41a73146e42cc542100b6790d2fcad942af" translate="yes" xml:space="preserve">
          <source>Unprivileged code has no access to Component.utils and might just be able catch the exception.</source>
          <target state="translated">未经授权的代码无法访问Component.utils,可能只是能够捕获异常。</target>
        </trans-unit>
        <trans-unit id="798bada17a5178e499c053a0efb6062522b9a545" translate="yes" xml:space="preserve">
          <source>Unreachable code after a return statement might occur in these situations:</source>
          <target state="translated">在这些情况下,返回语句后可能会出现无法到达的代码。</target>
        </trans-unit>
        <trans-unit id="b064fc67acbd0ef9b9b63753613c5ec8f5262efc" translate="yes" xml:space="preserve">
          <source>Unrecognizable strings or dates containing illegal element values in ISO formatted strings usually return &lt;a href=&quot;../global_objects/nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;. However, depending on the implementation, non&amp;ndash;conforming ISO format strings, may also throw &lt;code&gt;RangeError: invalid date&lt;/code&gt;, like the following cases in Firefox:</source>
          <target state="translated">ISO格式的字符串中无法识别的字符串或包含非法元素值的日期通常返回&lt;a href=&quot;../global_objects/nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。但是，根据实现的不同，不符合标准的ISO格式字符串也可能会引发 &lt;code&gt;RangeError: invalid date&lt;/code&gt; ，例如Firefox中的以下情况：</target>
        </trans-unit>
        <trans-unit id="1a424d3649ada9bd2e68f41ec2ffaf5a64c6736e" translate="yes" xml:space="preserve">
          <source>Unsigned right shift assignment</source>
          <target state="translated">无符号右移分配</target>
        </trans-unit>
        <trans-unit id="01cfe037451019c8188afb27bfd425f5645d3d7c" translate="yes" xml:space="preserve">
          <source>Unsigned right shift assignment (&lt;code&gt;x &amp;gt;&amp;gt;&amp;gt;= y&lt;/code&gt;)</source>
          <target state="translated">无符号右移分配（ &lt;code&gt;x &amp;gt;&amp;gt;&amp;gt;= y&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="af4eae21d35a396aab333964e702c6f49fee4317" translate="yes" xml:space="preserve">
          <source>Unsigned right shift assignment.</source>
          <target state="translated">无符号的右班分配。</target>
        </trans-unit>
        <trans-unit id="7d202f64842a95528992bee505d4ede3f3717db4" translate="yes" xml:space="preserve">
          <source>Unterminated string literal</source>
          <target state="translated">未定义的字符串文字</target>
        </trans-unit>
        <trans-unit id="426b353b9db4c19924afb606b4d29ebfe9ff35a2" translate="yes" xml:space="preserve">
          <source>Unterminated strings</source>
          <target state="translated">非终端字符串</target>
        </trans-unit>
        <trans-unit id="29ea0648053f54642ebdbcc8d7bc0b0d60c2732f" translate="yes" xml:space="preserve">
          <source>Until ECMAScript 2018 (edition 9), the format of the string returned by &lt;code&gt;Date.prototype.toString&lt;/code&gt; was implementation dependent. Therefore it should not be relied upon to be in the specified format.</source>
          <target state="translated">在ECMAScript 2018（版本9）之前， &lt;code&gt;Date.prototype.toString&lt;/code&gt; 返回的字符串格式取决于实现。因此，不应依赖于指定格式。</target>
        </trans-unit>
        <trans-unit id="796e16a716c7e4675178c5c341dd62f55ed0ba3c" translate="yes" xml:space="preserve">
          <source>Until arrow functions, every new function defined its own &lt;code&gt;&lt;a href=&quot;../operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; value (based on how function was called, a new object in the case of a constructor, undefined in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; function calls, the base object if the function is called as an &quot;object method&quot;, etc.). This proved to be less than ideal with an object-oriented style of programming.</source>
          <target state="translated">直到箭头的功能，每一个新的函数来定义其自己的 &lt;code&gt;&lt;a href=&quot;../operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; 值（基于功能如何被调用，在一个构造的情况下，一个新的对象，在未定义&lt;a href=&quot;../strict_mode&quot;&gt;严格模式&lt;/a&gt;的函数调用，如果该函数被称为&amp;ldquo;对象方法的基础对象&amp;rdquo;等）。事实证明，使用面向对象的编程风格并不理想。</target>
        </trans-unit>
        <trans-unit id="60e73ac896fcd1e20ecdbe62b6e971173531a272" translate="yes" xml:space="preserve">
          <source>Update older browsers</source>
          <target state="translated">更新旧版浏览器</target>
        </trans-unit>
        <trans-unit id="48578c6a749b5ff67cf1e8b4b13ab9237f09b50f" translate="yes" xml:space="preserve">
          <source>Updating and synchronizing shared memory with Atomic operations</source>
          <target state="translated">用原子操作更新和同步共享内存。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="92d99b032888bf69448943e3813f272f0f43c556" translate="yes" xml:space="preserve">
          <source>Usage notes</source>
          <target state="translated">使用说明</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="5b924f3a5d893825fa7ff6e707d26913c7b71dd1" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;encodeURIComponent&lt;/code&gt; on user-entered fields from forms POST'd to the server. This will encode &quot;&amp;amp;&quot; symbols that may inadvertently be generated during data entry for special HTML entities or other characters that require encoding/decoding.</source>
          <target state="translated">在用户输入的字段（从POST到服务器的表单）上使用 &lt;code&gt;encodeURIComponent&lt;/code&gt; 。这将对可能在特殊的HTML实体或需要编码/解码的其他字符的数据输入过程中无意中生成的&amp;ldquo;＆&amp;rdquo;符号进行编码。</target>
        </trans-unit>
        <trans-unit id="b18d67e8a5ac3a6674fdb1efc60252ad8106a7b6" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;test()&lt;/code&gt; whenever you want to know whether a pattern is found in a string. &lt;code&gt;test()&lt;/code&gt; returns a boolean, unlike the &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt; method, which returns the index (or -1 if not found). To get more information (but with slower execution), use the &lt;a href=&quot;exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; method (similar to the &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt; method). As with &lt;code&gt;exec()&lt;/code&gt; (or in combination with it), &lt;code&gt;test()&lt;/code&gt; called multiple times on the same global regular expression instance will advance past the previous match.</source>
          <target state="translated">每当您想知道是否在字符串中找到模式时，请使用 &lt;code&gt;test()&lt;/code&gt; 。与&lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; &lt;/a&gt;方法不同， &lt;code&gt;test()&lt;/code&gt; 返回一个布尔值，该方法返回索引（如果未找到则返回-1）。要获取更多信息（但执行速度较慢），请使用&lt;a href=&quot;exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt;方法（类似于&lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; &lt;/a&gt;方法）。与 &lt;code&gt;exec()&lt;/code&gt; （或与其结合使用）一样，在同一个全局正则表达式实例上多次调用的 &lt;code&gt;test()&lt;/code&gt; 将前进到先前的匹配。</target>
        </trans-unit>
        <trans-unit id="30a3888da5f4a28292777575e9aa3adc54e79b94" translate="yes" xml:space="preserve">
          <source>Use a different property name instead:</source>
          <target state="translated">使用不同的属性名称代替。</target>
        </trans-unit>
        <trans-unit id="bf2a85345d61cec27db77f35fab64a0e6ac9a223" translate="yes" xml:space="preserve">
          <source>Use a leading zero followed by the letter &quot;o&quot; or &quot;O&quot;:</source>
          <target state="translated">在字母 &quot;o &quot;或 &quot;O &quot;后面使用前导零。</target>
        </trans-unit>
        <trans-unit id="a2211d331794e0404bb9813a32f412e1fdf21c22" translate="yes" xml:space="preserve">
          <source>Use a leading zero followed by the letter &quot;o&quot;;</source>
          <target state="translated">在字母 &quot;o &quot;后面使用前导零。</target>
        </trans-unit>
        <trans-unit id="cfa9ad22e487d75c6991da84fa3c0ec91af14d5a" translate="yes" xml:space="preserve">
          <source>Use an array instead:</source>
          <target state="translated">用一个数组代替。</target>
        </trans-unit>
        <trans-unit id="ea5779e1fbdf5349917e803615c876e87a124938" translate="yes" xml:space="preserve">
          <source>Use an inline function with a regular expression to avoid &lt;code&gt;for&lt;/code&gt; loops</source>
          <target state="translated">将内联函数与正则表达式一起使用可避免 &lt;code&gt;for&lt;/code&gt; 循环</target>
        </trans-unit>
        <trans-unit id="eecb7e122bd5a7261c65d771f6a80279af55c95f" translate="yes" xml:space="preserve">
          <source>Use functions instead of evaluating snippets of code</source>
          <target state="translated">使用函数而不是评估代码片段。</target>
        </trans-unit>
        <trans-unit id="59689be5f7f6db3befe58ea4502d6346d8f0e784" translate="yes" xml:space="preserve">
          <source>Use objects instead:</source>
          <target state="translated">用对象代替。</target>
        </trans-unit>
        <trans-unit id="3289254e2cd8eff81fe4fba3443ba5e72f7369a7" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;prototype&lt;/code&gt; property</source>
          <target state="translated">使用 &lt;code&gt;prototype&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="3996252cd710649cfc857aa5772afe5d4e526301" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;new&lt;/code&gt; operator</source>
          <target state="translated">使用 &lt;code&gt;new&lt;/code&gt; 运算符</target>
        </trans-unit>
        <trans-unit id="9094eaab1aa22a2ddf2a490a883b3004802fb753" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;with&lt;/code&gt; statement is not recommended, as it may be the source of confusing bugs and compatibility issues. See the &quot;Ambiguity Contra&quot; paragraph in the &quot;Description&quot; section below for details.</source>
          <target state="translated">不建议使用 &lt;code&gt;with&lt;/code&gt; 语句，因为它可能导致令人困惑的错误和兼容性问题。有关详细信息，请参见下面&amp;ldquo;说明&amp;rdquo;部分的&amp;ldquo;歧义对比&amp;rdquo;段落。</target>
        </trans-unit>
        <trans-unit id="5604289c2f9b05e787276b05d6de50556f3ad0d2" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;yield&lt;/code&gt; keyword</source>
          <target state="translated">使用 &lt;code&gt;yield&lt;/code&gt; 关键字</target>
        </trans-unit>
        <trans-unit id="268f6efe6c4edc7a7a776c983c85355ce0bcb3c2" translate="yes" xml:space="preserve">
          <source>Use strict equality operators if the operands must be of a specific type as well as value or if the exact type of the operands is important. Otherwise, use the standard equality operators, which allow you to compare the identity of two operands even if they are not of the same type.</source>
          <target state="translated">如果操作数必须具有特定的类型和值,或者操作数的确切类型很重要,则使用严格的平等操作数。否则,使用标准的平等运算符,即使两个操作数的类型不一样,也可以比较它们的特性。</target>
        </trans-unit>
        <trans-unit id="a0ead207547cfc5b8a2f1836b2c3c936baac7322" translate="yes" xml:space="preserve">
          <source>Use the &quot;#&quot; sign instead.</source>
          <target state="translated">用 &quot;#&quot;号代替。</target>
        </trans-unit>
        <trans-unit id="8de4076a747cfe1532a44b2bc3ca2df452856104" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;anchor()&lt;/code&gt; method to programmatically create and display an anchor in a document.</source>
          <target state="translated">使用 &lt;code&gt;anchor()&lt;/code&gt; 方法以编程方式在文档中创建和显示锚。</target>
        </trans-unit>
        <trans-unit id="259cb606e19c132188e630c58910ccf9746caeda" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;link()&lt;/code&gt; method to create an HTML snippet for a hypertext link. The returned string can then be added to the document via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/write&quot;&gt;&lt;code&gt;document.write()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML&quot;&gt;&lt;code&gt;element.innerHTML&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;link()&lt;/code&gt; 方法为超文本链接创建HTML代码段。然后可以通过&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/write&quot;&gt; &lt;code&gt;document.write()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML&quot;&gt; &lt;code&gt;element.innerHTML&lt;/code&gt; &lt;/a&gt;将返回的字符串添加到文档中。</target>
        </trans-unit>
        <trans-unit id="f0db81531108fc16c5eb7e4e47995a7302205612" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;setTime()&lt;/code&gt; method to help assign a date and time to another &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">使用 &lt;code&gt;setTime()&lt;/code&gt; 方法可帮助将日期和时间分配给另一个&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="5ff4c5c7b65009624928276d53eeac4f648d1962" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;throw&lt;/code&gt; statement to throw an exception. When you throw an exception, &lt;code&gt;expression&lt;/code&gt; specifies the value of the exception. Each of the following throws an exception:</source>
          <target state="translated">使用 &lt;code&gt;throw&lt;/code&gt; 语句引发异常。引发异常时， &lt;code&gt;expression&lt;/code&gt; 指定异常的值。以下每个都会引发异常：</target>
        </trans-unit>
        <trans-unit id="ed1258678e4f54580c8c0dec2115541b6000d8ec" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;compare&lt;/code&gt; getter for finding matching strings in arrays:</source>
          <target state="translated">使用 &lt;code&gt;compare&lt;/code&gt; getter 返回的函数在数组中查找匹配的字符串：</target>
        </trans-unit>
        <trans-unit id="0a94e0addaa6e80f549291005ee82c31eb3029d4" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;compare&lt;/code&gt; getter for sorting arrays. Note that the function is bound to the collator from which it was obtained, so it can be passed directly to &lt;a href=&quot;../array/sort&quot;&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;compare&lt;/code&gt; getter 返回的函数对数组进行排序。请注意，该函数绑定到从中获得该函数的整理程序，因此可以将其直接传递给&lt;a href=&quot;../array/sort&quot;&gt; &lt;code&gt;Array.prototype.sort()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="08c434f65b76eb32642e2da1515f1c044f361f95" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;format&lt;/code&gt; getter for formatting a single currency value, here for Russia:</source>
          <target state="translated">使用 &lt;code&gt;format&lt;/code&gt; getter 返回的函数来格式化单个货币值，在俄罗斯：</target>
        </trans-unit>
        <trans-unit id="d03ec2e55d3b859d9b58982b987671a50a0b6434" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;format&lt;/code&gt; getter for formatting a single date, here for Serbia:</source>
          <target state="translated">使用 &lt;code&gt;format&lt;/code&gt; getter 返回的函数来格式化单个日期，此处用于塞尔维亚：</target>
        </trans-unit>
        <trans-unit id="ae052fe508232936eb87b2ad396357bb6d4a625c" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;format&lt;/code&gt; getter for formatting all dates in an array. Note that the function is bound to the &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; from which it was obtained, so it can be passed directly to &lt;a href=&quot;../array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;format&lt;/code&gt; getter 返回的函数来格式化数组中的所有日期。请注意，该函数绑定到&lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; &lt;/a&gt;获取函数的Intl.DateTimeFormat，因此可以将其直接传递给&lt;a href=&quot;../array/map&quot;&gt; &lt;code&gt;Array.prototype.map()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d54c9c7d9b0bff48e6a95b24be16fb1999c65ee0" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;format&lt;/code&gt; getter for formatting all numbers in an array. Note that the function is bound to the &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; from which it was obtained, so it can be passed directly to &lt;a href=&quot;../array/map&quot;&gt;&lt;code&gt;Array.prototype.map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;format&lt;/code&gt; getter 返回的函数来格式化数组中的所有数字。请注意，该函数绑定到从中获取函数的&lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;，因此可以将其直接传递给&lt;a href=&quot;../array/map&quot;&gt; &lt;code&gt;Array.prototype.map&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="49702e4d4cf8e2ba2300109ed149a26289ed510a" translate="yes" xml:space="preserve">
          <source>Use this method instead of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear&quot;&gt;&lt;code&gt;getYear()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">使用此方法代替&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear&quot;&gt; &lt;code&gt;getYear()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="e38d388b3fbc5f871702b5debb9b3ab8ec2478f5" translate="yes" xml:space="preserve">
          <source>Used as a function</source>
          <target state="translated">作为函数使用</target>
        </trans-unit>
        <trans-unit id="f3bcc454496e0d8095ef9d6544013fa49b94c904" translate="yes" xml:space="preserve">
          <source>Used at the start of the script to mark it as Unicode and the text's byte order (&lt;a href=&quot;http://en.wikipedia.org/wiki/Byte_order_mark&quot;&gt;Wikipedia&lt;/a&gt;).</source>
          <target state="translated">在脚本开始时使用，以将其标记为Unicode和文本的字节顺序（&lt;a href=&quot;http://en.wikipedia.org/wiki/Byte_order_mark&quot;&gt;Wikipedia&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="133e68ee5d8ba76c955db630077bf0beeee673ec" translate="yes" xml:space="preserve">
          <source>Used to access the character in the &lt;em&gt;N&lt;/em&gt;th position where &lt;em&gt;N&lt;/em&gt; is an integer between 0 and one less than the value of &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;. These properties are read-only.</source>
          <target state="translated">用于访问第&lt;em&gt;N&lt;/em&gt;个位置的字符，其中&lt;em&gt;N&lt;/em&gt;是0到小于&lt;a href=&quot;length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;值的整数。这些属性是只读的。</target>
        </trans-unit>
        <trans-unit id="812e93e06643aee1ecaa300513446c1a6beb968c" translate="yes" xml:space="preserve">
          <source>Used to access the character in the &lt;em&gt;N&lt;/em&gt;th position where &lt;em&gt;N&lt;/em&gt; is an integer between 0 and one less than the value of &lt;a href=&quot;string/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;. These properties are read-only.</source>
          <target state="translated">用于访问第&lt;em&gt;N&lt;/em&gt;个位置的字符，其中&lt;em&gt;N&lt;/em&gt;是0到小于&lt;a href=&quot;string/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;值的整数。这些属性是只读的。</target>
        </trans-unit>
        <trans-unit id="3b7acc356fa4a2bc2ccbd7d48e70ac3513c4a7e5" translate="yes" xml:space="preserve">
          <source>Used to export functions to make them available for imports in external modules, and other scripts.</source>
          <target state="translated">用于导出函数,使其可以在外部模块和其他脚本中导入。</target>
        </trans-unit>
        <trans-unit id="fb37f1aad3749171bebb1228de96a4676e09cfa5" translate="yes" xml:space="preserve">
          <source>Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.</source>
          <target state="translated">用于查找正则表达式和字符串之间的匹配,并将匹配的子串替换为新的子串。</target>
        </trans-unit>
        <trans-unit id="7955ee6b6bfc35018c789e83e4e210fac8047e36" translate="yes" xml:space="preserve">
          <source>Used to import functions exported from an external module, another script.</source>
          <target state="translated">用于导入从外部模块、其他脚本中导出的函数。</target>
        </trans-unit>
        <trans-unit id="13c2ae74a2bde43fe084992394a9e639aee35c2b" translate="yes" xml:space="preserve">
          <source>Used to match a regular expression against a string.</source>
          <target state="translated">用于将一个正则表达式与一个字符串进行匹配。</target>
        </trans-unit>
        <trans-unit id="863c58fdd8701f9a6eb314389dddf8b12cb690be" translate="yes" xml:space="preserve">
          <source>Used to send a value to a generator. The value is returned from the &lt;a href=&quot;../operators/yield&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/a&gt; expression, and returns a value yielded by the next &lt;a href=&quot;../operators/yield&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/a&gt; expression. &lt;code&gt;send(x)&lt;/code&gt; corresponds to &lt;code&gt;next(x)&lt;/code&gt; in the ES2015 generator object.</source>
          <target state="translated">用于将值发送到生成器。该值从&lt;a href=&quot;../operators/yield&quot;&gt; &lt;code&gt;yield&lt;/code&gt; &lt;/a&gt;表达式返回，并返回下一个&lt;a href=&quot;../operators/yield&quot;&gt; &lt;code&gt;yield&lt;/code&gt; &lt;/a&gt;表达式产生的值。 &lt;code&gt;send(x)&lt;/code&gt; 对应于ES2015生成器对象中的 &lt;code&gt;next(x)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1ec22aff197651958c30fe3e4239fc7b58e48d52" translate="yes" xml:space="preserve">
          <source>Useful special-case behavior</source>
          <target state="translated">有用的特例行为</target>
        </trans-unit>
        <trans-unit id="8f27339731a5380e7f5e31ad049633a94a300d7e" translate="yes" xml:space="preserve">
          <source>User-defined iterables</source>
          <target state="translated">用户定义的迭代物</target>
        </trans-unit>
        <trans-unit id="28dafe5587205ea728cfd56a35524bbae528ca52" translate="yes" xml:space="preserve">
          <source>User-defined vs. built-in objects</source>
          <target state="translated">用户定义与内置对象</target>
        </trans-unit>
        <trans-unit id="60551ea1bff7b4550201d95ea8c5d34732d0b1bf" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;@@iterator&lt;/code&gt;</source>
          <target state="translated">使用非标准名称： &lt;code&gt;@@iterator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4562f8aefc1e7271c8a66b1eed41b4777a575795" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;contains&lt;/code&gt;</source>
          <target state="translated">使用非标准名称： &lt;code&gt;contains&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c93d825490057c3453aec31fdf28a9dcae9fa1a" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;futexWait&lt;/code&gt;</source>
          <target state="translated">使用非标准名称： &lt;code&gt;futexWait&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="89858b40234e19d9eadd0f8948f6700c18941a2f" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;futexWake&lt;/code&gt;</source>
          <target state="translated">使用非标准名称： &lt;code&gt;futexWake&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a2fbc98c756378751b8ba87caf92912e491ac620" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;iterator&lt;/code&gt;</source>
          <target state="translated">使用非标准名称： &lt;code&gt;iterator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c51d0794d624ef371c8c4c7c70a4aaaa7f15011" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;trimLeft&lt;/code&gt;</source>
          <target state="translated">使用非标准名称： &lt;code&gt;trimLeft&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="10b04306e1d06010bfe91004003ff857af27e87f" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;trimRight&lt;/code&gt;</source>
          <target state="translated">使用非标准名称： &lt;code&gt;trimRight&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b2d239f5599e889e3ad65585fee736f8cbbc9cc3" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;wake&lt;/code&gt;</source>
          <target state="translated">使用非标准名称： &lt;code&gt;wake&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa7fcc0cace95ab92fb739e84bcfba711f862206" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../../operators/destructuring_assignment#Array_destructuring&quot;&gt;Array Destructuring&lt;/a&gt;, you can iterate through objects easily.</source>
          <target state="translated">使用&lt;a href=&quot;../../operators/destructuring_assignment#Array_destructuring&quot;&gt;数组解构&lt;/a&gt;，您可以轻松地遍历对象。</target>
        </trans-unit>
        <trans-unit id="a35e8629d4205d716d7879db06211269443cff86" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../global_objects/eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; as variable or function argument name</source>
          <target state="translated">使用&lt;a href=&quot;../global_objects/eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;作为变量或函数参数名称</target>
        </trans-unit>
        <trans-unit id="eaa1157703e2fddddf937141842eb4dded62c00e" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../global_objects/nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; values, negative Integers (&lt;code&gt;-1&lt;/code&gt;), non-Integers (&lt;code&gt;3.14&lt;/code&gt;), or values larger than &lt;code&gt;0x10FFFF&lt;/code&gt; (&lt;code&gt;1114111&lt;/code&gt;) won't work with this method.</source>
          <target state="translated">使用&lt;a href=&quot;../global_objects/nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;值时，负整数（ &lt;code&gt;-1&lt;/code&gt; ），非整数（ &lt;code&gt;3.14&lt;/code&gt; ）或大于 &lt;code&gt;0x10FFFF&lt;/code&gt; （ &lt;code&gt;1114111&lt;/code&gt; ）的值不适用于此方法。</target>
        </trans-unit>
        <trans-unit id="3942794d0225dda9d28d31b5dbc2330d28350e6c" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../object/proto&quot;&gt;&lt;code&gt;Object.__proto__&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">使用&lt;a href=&quot;../object/proto&quot;&gt; &lt;code&gt;Object.__proto__&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="535c1dd52fe8972c1fadf5078900fec27d10d19b" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;closures&lt;/a&gt;:</source>
          <target state="translated">使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;闭包&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="afdf4a3c9b67bda257874ee44595423d90a12a17" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; on a variable name &lt;code&gt;delete myVariable&lt;/code&gt;;</source>
          <target state="translated">在变量名上使用 &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; &lt;code&gt;delete myVariable&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="26a3027fe72a00facbe50a3574538264e8f6778d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;@@match&lt;/code&gt; in subclasses</source>
          <target state="translated">在子类中使用 &lt;code&gt;@@match&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6bd6526be1e62345fcf720d5a44848ce5d217f27" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;@@search&lt;/code&gt; in subclasses</source>
          <target state="translated">在子类中使用 &lt;code&gt;@@search&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="364a8655b56917844b72bbbe59f34bf6a668d4ab" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;@@split&lt;/code&gt; in subclasses</source>
          <target state="translated">在子类中使用 &lt;code&gt;@@split&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="db3eff818e2b5e01a1d45cd599a94c576a00c6d5" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Collator&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Collator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa9dd8a51114847faf5d80c7ec6a03c647bfb967" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Date.UTC()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Date.UTC()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dfbef0440c4ef535d60b20ec05e2da99357c3949" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Date.parse()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Date.parse()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b21d712bf1c7abde9c3a7a830c3d3690d1d9336" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;DateTimeFormat&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;DateTimeFormat&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe7b70b0ad42931d4672a8fad5e459a0ddc059c8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;JSON.parse()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;JSON.parse()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fda9d47a7ba09f6e96cc1c88589cfc8f90e9550b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;MAX_VALUE&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;MAX_VALUE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab1356c5da899d85adf68d98790d0688df3d9f4d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;MIN_VALUE&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;MIN_VALUE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="93859a76bff967dc62caa4d9aec6711cc95e39b9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.E&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.E&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fdb062b8b41f6dd98a6b478f0c71351aa5f7f259" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.LN10&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.LN10&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a8ac61c569646f667f7438c0f2008561889bb2cb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.LN2&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.LN2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f9f1159c9e322782a4c298efe9b7aaac4b3d7fa1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.LOG10E&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.LOG10E&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d3f9a2daa7a1ca960475ed285b5de5ea74d1a82" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.LOG2E&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.LOG2E&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f43cc4d9501290c9fffb78530c1cc6e23e1fd9a8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.PI&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.PI&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ba651258cafb6f72b81503d4151ee1478c832059" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.SQRT1_2&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.SQRT1_2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="976aebb1bd71fa2937d372d6aff476b4860fff47" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.SQRT2&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.SQRT2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e330c7190d2b0eed0076bc51b0c6727ee372dee7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.acos()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.acos()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bbb8abbf744a7a471e0adef33108ce352e2cef14" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.acosh()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.acosh()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe4e358b1ea8a6793bbbd038119abac908fa5d41" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.asin()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.asin()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a7aaabb5d4c18bc47babe1fee3768b4cd56e819f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.asinh()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.asinh()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a7acbe2b93c55e6766c21bb99a61136980f063f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.atan()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.atan()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ae2e7939d311a6f4c12eeacc87617b45cc46426" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.atan2()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.atan2()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e63930d26ed0da0e98e746e6a580eb549a18081" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.atanh()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.atanh()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3de3f7ff132e94d11bcf96ec79c085701fa6d13f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.cbrt()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.cbrt()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0f0795c7f6c72f3c4ee45db15995c4e83c4203e7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.ceil()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.ceil()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f4b41b1997f3949c616b129d914b271ff196baf9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.clz32()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.clz32()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea87848369f3d8c269353d427b2f0ae6f09fc086" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.cos()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.cos()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4bc1746f4cc157b4b9df11ea279e9f777a7fdbd4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.cosh()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.cosh()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cb976ebe7c51e42a78c6812722dfe8cd5141a674" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.exp()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.exp()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="540b461b79bcaaa482e1e163588fe18bd457760c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.expm1()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.expm1()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bdc8b03db4073f084688d35cd02f9c80f2922d2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.floor()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.floor()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e46a26bbc48638758a2228cb6d988bc690e678d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.fround()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.fround()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab97a7135ca6e7d20e6ad6ae467453d0e92d8204" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.hypot()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.hypot()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91ae785187110558b2089a65084f689ee71a03c7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.imul()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.imul()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b9efc53c4e8b4e3a2795c2633f2e1579c2de24ae" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.log()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.log()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b86f5d0131c58200f4e9f3a71450915e406593f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.log()&lt;/code&gt; with a different base</source>
          <target state="translated">将 &lt;code&gt;Math.log()&lt;/code&gt; 与其他库一起使用</target>
        </trans-unit>
        <trans-unit id="8cb369bd84fb3a9db42477c3d471253c1915fc98" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.log10()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.log10()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fee67d42c34c290aa8bab4fac8f488c3fbf54b9b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.log1p()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.log1p()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f76b6d6234aa36ce4d5c91bcb25f95c1f4680033" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.log2()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.log2()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d9e3a25687984bbdd6d8db20416e7b4b148e79a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.max()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.max()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a8fe838b29e47e2ddc6c06243aa367e185007b1a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.min()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.min()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d047225943fee3e56662b65dd0dadae4d2d06fb0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.pow()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.pow()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="895e46a61e964641de16b978bac120590e127e57" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.sign()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.sign()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2600f96fe3577a76e5bce2a8a5fa33a334ca4c5f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.sin()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.sin()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="217b9b4dd477ec3b46def6888a0b6063371b73ba" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.sinh()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.sinh()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2073d1948e291a0aba2f718d62ca6364e24cdfd6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.sqrt()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.sqrt()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fce291cc3896de50d37da9836e86f63c6918e4bc" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.tan()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.tan()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="227a5c68b610fa47d48e59f2bf2d80650dba11e0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.tanh()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.tanh()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a5bee87d01db0a595ec64fba9359ca73345f1712" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.trunc()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Math.trunc()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b4b4eb92a2ffff450696a5a3428799c8ada5aa97" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="06af22fcde5b1c83b1a5ee4cc714405b474f3f85" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;NaN&lt;/code&gt; as &lt;code&gt;Map&lt;/code&gt; keys</source>
          <target state="translated">使用 &lt;code&gt;NaN&lt;/code&gt; 作为 &lt;code&gt;Map&lt;/code&gt; 键</target>
        </trans-unit>
        <trans-unit id="34dcba570421eba4fd9981ae6cb67359e4a415cb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Number&lt;/code&gt; to convert a &lt;code&gt;Date&lt;/code&gt; object</source>
          <target state="translated">使用 &lt;code&gt;Number&lt;/code&gt; 转换 &lt;code&gt;Date&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="50ad87e74aca29ee32cefc8aac202e01f3d594b9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="40636fe65b241f78323c31826a3c853885dcb1de" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Object&lt;/code&gt; given &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; types</source>
          <target state="translated">使用给定的 &lt;code&gt;undefined&lt;/code&gt; 和 &lt;code&gt;null&lt;/code&gt; 类型的 &lt;code&gt;Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1aed730fa13857ec34a8c1c7e6f1049d04b29aaa" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Object&lt;/code&gt; to create &lt;code&gt;Boolean&lt;/code&gt; objects</source>
          <target state="translated">使用 &lt;code&gt;Object&lt;/code&gt; 创建 &lt;code&gt;Boolean&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="e64eb4c4dd053b88dcc89b8eb82656f5f33979eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f8347a2bd0fee1e51d6d7c3a5a03c73b5f92291b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Promise.all&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Promise.all&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c7983a310913579e7f1d6d7d29f541ca7f7bc31f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Promise.race&lt;/code&gt; &amp;ndash; examples with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout&quot;&gt;&lt;code&gt;setTimeout&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">使用 &lt;code&gt;Promise.race&lt;/code&gt; &amp;ndash; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout&quot;&gt; &lt;code&gt;setTimeout&lt;/code&gt; 的&lt;/a&gt;示例</target>
        </trans-unit>
        <trans-unit id="4bf3c2c92b26655f965a63cf04e47a407038309f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;RangeError&lt;/code&gt; (for non-numeric values)</source>
          <target state="translated">使用 &lt;code&gt;RangeError&lt;/code&gt; （用于非数字值）</target>
        </trans-unit>
        <trans-unit id="9b3910a80105a107726af7df53c14bf5decb74eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;RangeError&lt;/code&gt; (for numeric values)</source>
          <target state="translated">使用 &lt;code&gt;RangeError&lt;/code&gt; （用于数值）</target>
        </trans-unit>
        <trans-unit id="32dc028e6ae49406b0f8b232da7879a6841597eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.apply()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Reflect.apply()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="78dff74d34e66be69e07fb73eba8414dcb7abbe3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.construct()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Reflect.construct()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b278a106b6bc8adc803d37d53b05b9680bc0aa8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.defineProperty()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Reflect.defineProperty()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b6e50310ac666f839a6b1c49d16cbc284733c482" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.deleteProperty()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Reflect.deleteProperty()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="28791d84abb7871970f58bfc08646d85a486347b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.get()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Reflect.get()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8304e4a1ba40865f8890fe46ab03864fe6553640" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.getOwnPropertyDescriptor()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Reflect.getOwnPropertyDescriptor()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c915e2c366a2a77265d9b4e74ef7c4f046504257" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.getPrototypeOf()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Reflect.getPrototypeOf()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ba2ab55ddd7497bfffbe0d72ebb882fbd8a1585" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.has()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Reflect.has()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e24091a1e3ada68c43e5ad27ca36e597fb39a070" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.isExtensible()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Reflect.isExtensible()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="467c5ecb9bbb04697b7c860e3a3ae3cb73ef2080" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.ownKeys()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Reflect.ownKeys()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a825f724001bbe43c60c22d1e2911eeeabeaa9d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.preventExtensions()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Reflect.preventExtensions()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ad6e1fb12d2ff922480e416b7ca1e13789b8da3a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.set()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Reflect.set()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="86e64df031ede334382545587be9f79339c7a4b4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6becec3636e1ce2e5f1db49408fb138f4cb2061b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;String.raw()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;String.raw()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7ac59f9f4cf19519393847dd73ca3e85fe1ee39c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;WeakMap&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;WeakMap&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4e935599049c4d331606cf35f69f87d2fe630a33" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;[@@iterator]()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;[@@iterator]()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7fcb2836a59b3825a96f686735cb098d1f8f1275" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;[@@iterator]()&lt;/code&gt; with &lt;code&gt;for..of&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;[@@iterator]()&lt;/code&gt; 与 &lt;code&gt;for..of&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ad6d25bb50f04ee46ca5804c8b77367a34dcf780" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;anchor()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;anchor()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3797b2e02eb1b50879089022d7c3164e16ab7f69" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;apply&lt;/code&gt; and built-in functions</source>
          <target state="translated">使用 &lt;code&gt;apply&lt;/code&gt; 和内建功能</target>
        </trans-unit>
        <trans-unit id="b083afe9d3840b17bd2a374e9b1d657c93e787c9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;apply&lt;/code&gt; to append an array to another</source>
          <target state="translated">使用 &lt;code&gt;apply&lt;/code&gt; 将数组追加到另一个数组</target>
        </trans-unit>
        <trans-unit id="9713bdc691906ef72a6bc1a711804f2d79f4fa6e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;apply&lt;/code&gt; to chain constructors</source>
          <target state="translated">使用 &lt;code&gt;apply&lt;/code&gt; 于链构造函数</target>
        </trans-unit>
        <trans-unit id="ceb48f3a5a4041edde04441562f95c41474638eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;arguments.callee&lt;/code&gt; in an anonymous recursive function</source>
          <target state="translated">在匿名递归函数中使用 &lt;code&gt;arguments.callee&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="09ad6b15b561cc4dea86fc3be9b381b7f96551c6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;arguments.length&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;arguments.length&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="07b2edb9538b6d9db4de55e7358538e95e277d2e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;big()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;big()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a63831b9174917bd4ef59e8bac4ee7ad3750620" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;blink()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;blink()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7fe07760305ea8b8baefa5e929fe548307c06f95" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;bold()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;bold()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16940a37535534140b72c771a3bd4135af0df59a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;call&lt;/code&gt; to chain constructors for an object</source>
          <target state="translated">使用 &lt;code&gt;call&lt;/code&gt; 向链构造一个对象</target>
        </trans-unit>
        <trans-unit id="2030c5b59f5ca0acd57384cb212220b648ba3eae" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;call&lt;/code&gt; to invoke a function and specifying the context for '&lt;code&gt;this&lt;/code&gt;'</source>
          <target state="translated">使用 &lt;code&gt;call&lt;/code&gt; 来调用函数并为&amp;ldquo; &lt;code&gt;this&lt;/code&gt; &amp;rdquo; 指定上下文</target>
        </trans-unit>
        <trans-unit id="20932bf11484b9bd555433ee437743ea8fc7634c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;call&lt;/code&gt; to invoke a function and without specifying the first argument</source>
          <target state="translated">使用 &lt;code&gt;call&lt;/code&gt; 来调用函数，而无需指定第一个参数</target>
        </trans-unit>
        <trans-unit id="c7186bc460b794bceddf4a328c393fa6cdc29640" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;call&lt;/code&gt; to invoke an anonymous function</source>
          <target state="translated">使用 &lt;code&gt;call&lt;/code&gt; 来调用匿名函数</target>
        </trans-unit>
        <trans-unit id="b867b50212ed6e89d2de6441c976ef336360830d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;charCodeAt()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;charCodeAt()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="556d615d9041c8d5478e767d4d7a1410838ba06a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;codePointAt()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;codePointAt()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9429375d874123b345d7191586002d8083da071" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;compare&lt;/code&gt; for array search</source>
          <target state="translated">使用 &lt;code&gt;compare&lt;/code&gt; 进行数组搜索</target>
        </trans-unit>
        <trans-unit id="f16a1b178f956b7d75464f71fb597fe309cf5c10" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;compare&lt;/code&gt; for array sort</source>
          <target state="translated">使用 &lt;code&gt;compare&lt;/code&gt; 进行数组排序</target>
        </trans-unit>
        <trans-unit id="02b5e9985b8ecaa7f12774be0a8688f361e65c6c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;compile()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;compile()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="85e65691e7cc08b10e7b80bb001289e75bbf23c9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;concat()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;concat()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="611eb26acf09c73abf163660771fc340757a96d3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;default&lt;/code&gt; in &lt;code&gt;switch&lt;/code&gt; statements</source>
          <target state="translated">在 &lt;code&gt;switch&lt;/code&gt; 语句中使用 &lt;code&gt;default&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="642628aa034f0b4d4c2784d4456bb61f2057fe09" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;default&lt;/code&gt; with &lt;code&gt;export&lt;/code&gt;</source>
          <target state="translated">在 &lt;code&gt;export&lt;/code&gt; 使用 &lt;code&gt;default&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="78923445351c108fc913a9fac23c1aa9f6d3f3f3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;do...while&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;do...while&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a3bcbcba095740840e728c39a3f242bfb701569" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;else if&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;else if&lt;/code&gt; 使用else</target>
        </trans-unit>
        <trans-unit id="646ee9e811ab23d353a774a0b354b8342975e5a0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;endsWith()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;endsWith()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe0ae54c13633401a1ceb09277a500848db451ea" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;entries()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;entries()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f9436728bf5ff88c5da41003c9a695a4269ce66b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;eval&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;eval&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb8f6039130d6008e8dc9ef8d1c09417e49c7f51" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;eval&lt;/code&gt; to evaluate a string of JavaScript statements</source>
          <target state="translated">使用 &lt;code&gt;eval&lt;/code&gt; 评估一串JavaScript语句</target>
        </trans-unit>
        <trans-unit id="88e071cfe4d98766b2d0a4c39ce83f967246717a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;exec()&lt;/code&gt; with &lt;code&gt;RegExp&lt;/code&gt; literals</source>
          <target state="translated">将 &lt;code&gt;exec()&lt;/code&gt; 与 &lt;code&gt;RegExp&lt;/code&gt; 文字一起使用</target>
        </trans-unit>
        <trans-unit id="a52ec19db691f347f5f2433ee6eb7fe006475d56" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;extends&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;extends&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e5eae3a4415c107042d5f17503c6ecae2bcdc31b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;extends&lt;/code&gt; with built-in objects</source>
          <target state="translated">对内置对象使用 &lt;code&gt;extends&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f7e9118e94835fcd9f5a428acb6732b0b3bfe05" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fixed()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;fixed()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8058f81484f83098711cee882913078eb17fe117" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;flags&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;flags&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3ec060be63d9a2d6b30d94a663eea50439b802b3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fontcolor()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;fontcolor()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fea03ae88fb10291a0695fd13fe77eec964a23bf" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fontsize()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;fontsize()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="702e8d93e7600e0549629ee260fdf1db5a27a4db" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;for each...in&lt;/code&gt;</source>
          <target state="translated">利用 &lt;code&gt;for each...in&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a7f47d7718b9d78b1fe878b530e960cb18938eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;for&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;for&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="491008517aae1412f6b94546b3220fd5b4353c00" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;for&lt;/code&gt; without a statement</source>
          <target state="translated">使用 &lt;code&gt;for&lt;/code&gt; 不声明</target>
        </trans-unit>
        <trans-unit id="d5a9aaaeac0acbdcf769678baa5b9f4acff26d0d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;format&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;format&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bb2e604aa63b714da8b15b55ebe41223fb2ac6d6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;format&lt;/code&gt; with &lt;code&gt;map&lt;/code&gt;</source>
          <target state="translated">在 &lt;code&gt;map&lt;/code&gt; 使用 &lt;code&gt;format&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d104e0628dbbb852f433440106690c19f2c07e33" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fromCharCode()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;fromCharCode()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="80b847492a6095bbae8614aec0a6543cf0367d9a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fromCodePoint()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;fromCodePoint()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d00420b95ee683cbed8717a78c05748e24282a7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;function&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;function&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a4b9545503ad7e7caaab9a705491e3e94e905a67" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getDay()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;getDay()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="540160723a5364f95f0dfafc1d17361d9d5a1964" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getFullYear()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;getFullYear()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91a3254251e7e95341290aec33ebd31b9038cf56" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getHours()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;getHours()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a0528a1d02cd150547cf68575462307a6013150c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getMilliseconds()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;getMilliseconds()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84519873ea12bef2a0b320cf648b5ba2c66f681f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getMinutes()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;getMinutes()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ef82941d61c1f5ca81d2bc7825f0299185f34a0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getMonth()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;getMonth()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bb6ce8532e2eed1444291d51e61fef2c99751a9a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getSeconds()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;getSeconds()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eea233044fa126b4a981036ba57bcb77efe79c4d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getTime()&lt;/code&gt; for copying dates</source>
          <target state="translated">使用 &lt;code&gt;getTime()&lt;/code&gt; 复制日期</target>
        </trans-unit>
        <trans-unit id="45e362351d8145434a2ad82319115f1d839ca87e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getTimezoneOffset()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;getTimezoneOffset()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ce861b053d11ae717c849c1b5aeb5d963bef50ec" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getUTCDate()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;getUTCDate()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="524d94a2241be43f466b1704d4629ecdba9a280e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getUTCDay()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;getUTCDay()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="31c5774ef5b7e5bb31e57cc1e7242a653019ba3e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getUTCFullYear()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;getUTCFullYear()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="284b794cd10bb9cc0059daa48bc8a6ad0cc91ea5" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getUTCHours()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;getUTCHours()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a66620472398f85cd23eec76346748593e6062f6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getUTCMilliseconds()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;getUTCMilliseconds()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="41e37c29afff9e2bba7e5d15fd7f67d183a75bec" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getUTCMinutes()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;getUTCMinutes()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="96e9e3f635673ee1095fc3973244bbf3bb462298" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getUTCMonth()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;getUTCMonth()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2b7771c6105c7ebfa5e7c0e84ff104dd1fee0436" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getUTCSeconds()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;getUTCSeconds()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5eb0ebc826ff5087b94da9913c4d13b979facd2c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;global&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;global&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a2bd1a5741af5944c1a0dada08b5c3f27f6ea93" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;global&lt;/code&gt; and &lt;code&gt;ignore&lt;/code&gt; with &lt;code&gt;replace()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;global&lt;/code&gt; 并使用 &lt;code&gt;replace()&lt;/code&gt; &lt;code&gt;ignore&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9335bb0c8c7a9fbd334563abd721c366dd39c864" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;hasOwnProperty&lt;/code&gt; as a property name</source>
          <target state="translated">使用 &lt;code&gt;hasOwnProperty&lt;/code&gt; 作为属性名称</target>
        </trans-unit>
        <trans-unit id="3eb66a176b56b916c633a6e1c14b6dfbe806f97d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;hasOwnProperty&lt;/code&gt; to test for a property's existence</source>
          <target state="translated">使用 &lt;code&gt;hasOwnProperty&lt;/code&gt; 测试属性的存在</target>
        </trans-unit>
        <trans-unit id="cd86ab8db79574591b27b8e93f672c5ddc50dd49" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;if...else&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;if...else&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f916f19d2d01c2801df44690242aad17fd222236" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;ignoreCase&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;ignoreCase&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30df41115afaa4f9b2d06639f0f5256fa38a1cc6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;in&lt;/code&gt; with deleted or undefined properties</source>
          <target state="translated">使用 &lt;code&gt;in&lt;/code&gt; 与删除或未定义的属性</target>
        </trans-unit>
        <trans-unit id="2f814dcbdca78274933b0fa26027a8ea2839f670" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;includes()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;includes()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c0796e7f2a1bd2be10a001c572495085ffc18f0a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;indexOf()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;indexOf()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4008dac0f5b598086ada72479a5ebe874221e021" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;indexOf()&lt;/code&gt; and &lt;code&gt;lastIndexOf()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;indexOf()&lt;/code&gt; 和 &lt;code&gt;lastIndexOf()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c5127b7bf6660a26dbe5ed59b8a90ceece94d18" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;indexOf()&lt;/code&gt; to count occurrences of a letter in a string</source>
          <target state="translated">使用 &lt;code&gt;indexOf()&lt;/code&gt; 计算字符串中字母的出现</target>
        </trans-unit>
        <trans-unit id="72fb91fb185fb0e7e6b31e86a649d824fea0957e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;italics()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;italics()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73ebea95bd3846e66e11fe85ea8b9598c0d1d7b8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;keys()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;keys()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3198dc775efd62bba2c46bf22fea734b6155a4b1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;lastIndex&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;lastIndex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0392eaabb822ccaa8f0b75db7e385e217ecb68e5" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;lastIndexOf&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;lastIndexOf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="13f4e3064e4d87f8de9fde36966b7ce2bc36c0d6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;link()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;link()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2b6dd847f974de41890037f3c9b44e636b32b805" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;localeCompare()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;localeCompare()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="09ca3d1fdddcf1c8c4609c1738a4110d282a086c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;locales&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;locales&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0b8d19e69df2cfb34dc429253f37d7fddffff291" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;locales&lt;/code&gt; 和 &lt;code&gt;options&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d3212cd6cd2ebbbe01153a383c4e17109009799" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;map&lt;/code&gt; generically</source>
          <target state="translated">一般使用 &lt;code&gt;map&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7315d0d5b3e4a02f5e549cafabc8b170d32135f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;map&lt;/code&gt; generically &lt;code&gt;querySelectorAll&lt;/code&gt;</source>
          <target state="translated">一般使用 &lt;code&gt;map&lt;/code&gt; &lt;code&gt;querySelectorAll&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec279cff19f48229b6eb7573d552d3b8dd458a09" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;match()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;match()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7550a15bf265ec90df2d3d7306c3f9efe7f0010" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;match()&lt;/code&gt; with no parameter</source>
          <target state="translated">使用不带参数的 &lt;code&gt;match()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5856f393538c67d40c79c2c5dfdd9ca70ae94e2f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;multiline&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;multiline&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="246b016ef156f266458a958b00aac7aca228553b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;new&lt;/code&gt; operator</source>
          <target state="translated">使用 &lt;code&gt;new&lt;/code&gt; 运算符</target>
        </trans-unit>
        <trans-unit id="af80b903fc7b3bace484b851c9ef66c8664d46c3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;next()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;next()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4381befd814214d0f21bad72f7a9dcc9f2e4d66e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;normalize()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;normalize()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a92fec447e7b6f840d9946c406278bb9a9f12b2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;options&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;options&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0b3a131aae63f7c1f8510de17102d7e39bfeab51" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;propertiesObject&lt;/code&gt; argument with &lt;code&gt;Object.create()&lt;/code&gt;</source>
          <target state="translated">在 &lt;code&gt;Object.create()&lt;/code&gt; 中使用 &lt;code&gt;propertiesObject&lt;/code&gt; 参数</target>
        </trans-unit>
        <trans-unit id="1f858350a79c29457c7674871e8fd4b12922df79" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;return()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;return()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0b660acdcb356f0a6813dcc9d5c93ef508fff1e1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;search()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;search()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6cb215be1ac6db7ea015e974a60ade5dd0443c51" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;select&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;select&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4f8d41720bffacb21aef9fe16b150ead9c536389" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setDate()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;setDate()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d50e594f02888eef760dd72f66649b3a6e274994" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setFullYear()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;setFullYear()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="71a1cf51abe893f702e25c73b9abe4801407d2b7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setHours()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;setHours()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d1363cae1d81cda5f0adcc983359b97f54d31fd" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setMilliseconds()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;setMilliseconds()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19d3ca372144ddc83d3a42bebca924c8a4787f58" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setMinutes()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;setMinutes()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="67488e7b58f2d2c3798fe0fc773bb711bfc0bfc2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setMonth()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;setMonth()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0d6df32b9d720dcfc1cf84e8c7c734be3c90164b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setSeconds()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;setSeconds()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3595097d2218c80be2e34adc66141afb6f7dbe9d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setTime()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;setTime()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="93acca4e1c613c9a779bacf3db24cb8022d84eb8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setUTCDate()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;setUTCDate()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d92f3007828aefd5a36a0aaf083e4f698842a3e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setUTCFullYear()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;setUTCFullYear()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9f3599db912b4a0a35a599230df0f1e876366ee8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setUTCHours()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;setUTCHours()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a1bec3abcb5b4d3723b4b4e15736389055fcac8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setUTCMilliseconds()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;setUTCMilliseconds()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b6733e4d2b3ee9e13b5af5b402fb4792dd9d7c81" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setUTCMinutes()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;setUTCMinutes()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2c446222eafac01b6b7cbacc716f330628bce1d4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setUTCMonth()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;setUTCMonth()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff8aad87d4c38c51abd09a19eeebe73e90a264fe" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setUTCSeconds()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;setUTCSeconds()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="61d8de8a3eef028b5de75b9d013b2dacad63837c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;size&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;size&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c50e5877a94d2b339c616e8c1551c6117cd743a8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;slice()&lt;/code&gt; to create a new string</source>
          <target state="translated">使用 &lt;code&gt;slice()&lt;/code&gt; 创建一个新字符串</target>
        </trans-unit>
        <trans-unit id="8b4cffaf896f5f934d26f2c9816dbdcb00d87937" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;slice()&lt;/code&gt; with negative indexes</source>
          <target state="translated">使用带有负索引的 &lt;code&gt;slice()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0505da9ac6c39434adf9d76de6e8e12a87118194" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;slice&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;slice&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d724e1ea63edf61ad7264f76ee8d58ddbaf54988" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;small()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;small()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8983cb0f1b4c2cb71275fde6b685783122d04688" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;source&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;source&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="40602c91c772af3efda56b3a24117a382d55d66e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;split()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;split()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed15292fad5c7bd5ab09a2ec2fcac3ddaf14b74d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;startsWith()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;startsWith()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cc77b4ff3e9316547f1d552c4c53a5f66270ff32" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;strike()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;strike()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="33b07f99faefbdfa4a2c55ffb6386d0868ded0a5" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;sub()&lt;/code&gt; and &lt;code&gt;sup()&lt;/code&gt; methods</source>
          <target state="translated">使用 &lt;code&gt;sub()&lt;/code&gt; 和 &lt;code&gt;sup()&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="e318e7a917252a12a91c3e8a01bf9d2dabebeb9a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;substr()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;substr()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e3352f9595f5585b850e1d219c5e6b421406ad13" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;substring()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;substring()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30250ea7a7219ad073f33871266f5c05ae90cae1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;substring()&lt;/code&gt; with &lt;code&gt;length&lt;/code&gt; property</source>
          <target state="translated">将 &lt;code&gt;substring()&lt;/code&gt; 与 &lt;code&gt;length&lt;/code&gt; 属性一起使用</target>
        </trans-unit>
        <trans-unit id="fbf904135b14968fcdf3f739756ac4f83ecc3dd4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;super.prop&lt;/code&gt; in object literals</source>
          <target state="translated">在对象文字中使用 &lt;code&gt;super.prop&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e88598c78be6509407efcc63a24e7abf6ba088eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;super&lt;/code&gt; in classes</source>
          <target state="translated">在课堂上使用 &lt;code&gt;super&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5dff570b29abe23b985888a40d346bf5cadf54f7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;supportedLocalesOf&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;supportedLocalesOf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8c7758706562fda630d6755aab1f3cc186415ea5" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;switch&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;switch&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30d897f5beae69bf418b80d47a134edb97053ad4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;test()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;test()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4cab76dc4cea0bd3fca28dcefbafc0a60c2833fc" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;test()&lt;/code&gt; on a regex with the global flag</source>
          <target state="translated">在带有全局标志的正则表达式上使用 &lt;code&gt;test()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="db258c969443ad6b292b88ebd86e77e8081b9b5d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;thisArg&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;thisArg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ebb8b7b58bfd56e42821c52ad2a68ec5ccaa9527" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;throw()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;throw()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="937ab0b24d027824f33355c724ee231409ceb3a5" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toExponential&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;toExponential&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="58a0aa431da017f91a1517bf6bd28431a76defc0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toFixed&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;toFixed&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="baefb7bf3c55ed75d807ac8e91e6536057863625" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toISOString()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;toISOString()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f6a6f0f54d04169f5799cf7422f843564f583974" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toJSON()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;toJSON()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1df9fa01f03464d5cbea74246a85c7bd09b564d7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toLocaleDateString()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;toLocaleDateString()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9fc00d6354172f4d3c310a9b634797c61caba608" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toLocaleLowerCase()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;toLocaleLowerCase()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bd2e22962dfa1c56823584b08661204d65a70169" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toLocaleString()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;toLocaleString()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea9f07fe937cfa8aa249b90bba93bad41a54e737" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toLocaleString&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;toLocaleString&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b9ff68cad4fb433cd8976d39a5edf16bddbb630d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toLocaleTimeString()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;toLocaleTimeString()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4935af0a22f1025fd3d249664e57a151694f8136" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toLocaleUpperCase()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;toLocaleUpperCase()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="756b245ec73f795eb77aae538f2045c283e286e4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toLowerCase()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;toLowerCase()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8986072a6c91150877a79606966ef1d3b97a84d7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toPrecision&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;toPrecision&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eaef8ffe3f864b85a1d3c7961133f3d4f7356224" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toString()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;toString()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1aaa2b702905e9e5af22e175d89f79f94623ddfc" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toString()&lt;/code&gt; to detect object class</source>
          <target state="translated">使用 &lt;code&gt;toString()&lt;/code&gt; 检测对象类</target>
        </trans-unit>
        <trans-unit id="149b6680423597fcfcec999b7db64ca42bb5cae8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toString&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;toString&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30ac701da98c589119baf56516f9828f1bdc939d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toUTCString()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;toUTCString()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed7ec81510e900115c58cf955f906a03bc7aacf3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;trim()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;trim()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e3bde3bd197e7877ea32e2b7dcaa9a06de8dc920" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;trimEnd()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;trimEnd()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6857d244d58dc6389563e9905d1f9787c6cb1752" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;trimStart()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;trimStart()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="032651b45070405671afb48d9f7af9d2df8bf4e0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;typeof&lt;/code&gt; with Arguments</source>
          <target state="translated">在参数中使用 &lt;code&gt;typeof&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a93be5e5a37537b8b5cacb3cd94852656694ba4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;valueOf()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;valueOf()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="222796ead6973d33b1caa999b658dd4e1d64d900" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;valueOf&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;valueOf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af146822dcb5f73cd83d6897c6cb5a23edcbf7cf" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;values()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;values()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3cd2a7d1cf9e9cfaa2ad1795fdd66e3d3842698" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;watch&lt;/code&gt; and &lt;code&gt;unwatch&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;watch&lt;/code&gt; 和 &lt;code&gt;unwatch&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2cbb0585497a87121bfdf2e89696e7e1f752bacc" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;watch&lt;/code&gt; to validate an object's properties</source>
          <target state="translated">使用 &lt;code&gt;watch&lt;/code&gt; 来验证对象的属性</target>
        </trans-unit>
        <trans-unit id="6fd9e42f040bbedf10970469ffb6d94c33817e26" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;with&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;with&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9f8f48c81ee74e79647332750e20d9654fe2f9ae" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;with&lt;/code&gt; is not recommended, and is forbidden in ECMAScript 5 &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;. The recommended alternative is to assign the object whose properties you want to access to a temporary variable.</source>
          <target state="translated">不建议使用 &lt;code&gt;with&lt;/code&gt; ，在ECMAScript 5 &lt;a href=&quot;../strict_mode&quot;&gt;严格模式下&lt;/a&gt;禁止使用。推荐的替代方法是将要访问其属性的对象分配给临时变量。</target>
        </trans-unit>
        <trans-unit id="d72a9261c95373fca733ad408aec958075410f36" translate="yes" xml:space="preserve">
          <source>Using @@replace in subclasses</source>
          <target state="translated">在子类中使用@@replace</target>
        </trans-unit>
        <trans-unit id="8169038916d9eb3a78d51cbdcacce2f2ac7bd58c" translate="yes" xml:space="preserve">
          <source>Using ES2015 arrow function</source>
          <target state="translated">使用ES2015箭头功能</target>
        </trans-unit>
        <trans-unit id="23169e87ea17cda98c3362ddd8595d6314945f27" translate="yes" xml:space="preserve">
          <source>Using a &lt;a href=&quot;../../statements/for...of&quot;&gt;for&amp;hellip;of&lt;/a&gt; loop</source>
          <target state="translated">使用&lt;a href=&quot;../../statements/for...of&quot;&gt;for&amp;hellip;of&lt;/a&gt;循环</target>
        </trans-unit>
        <trans-unit id="f36eafe27d99c81bd29f7f2b50a831d5d2e730b4" translate="yes" xml:space="preserve">
          <source>Using a &lt;a href=&quot;../function/bind&quot;&gt;&lt;code&gt;Function.prototype.bind()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;Reflect.apply&lt;/code&gt; (&lt;a href=&quot;../reflect/apply&quot;&gt;&lt;code&gt;Reflect.apply()&lt;/code&gt;&lt;/a&gt;) method to create a (non-cancellable) setImmediate-style function.</source>
          <target state="translated">使用&lt;a href=&quot;../function/bind&quot;&gt; &lt;code&gt;Function.prototype.bind()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;Reflect.apply&lt;/code&gt; （&lt;a href=&quot;../reflect/apply&quot;&gt; &lt;code&gt;Reflect.apply()&lt;/code&gt; &lt;/a&gt;）方法创建（不可取消）setImmediate样式的函数。</target>
        </trans-unit>
        <trans-unit id="aa5565048e1c853c92fcf6232a55142c3c3c6d23" translate="yes" xml:space="preserve">
          <source>Using a &lt;a href=&quot;../proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt; enables you do even deeper changes to how property assignments work.</source>
          <target state="translated">使用&lt;a href=&quot;../proxy&quot;&gt; &lt;code&gt;Proxy&lt;/code&gt; &lt;/a&gt;可以使您对属性分配的工作方式进行更深层次的更改。</target>
        </trans-unit>
        <trans-unit id="95ae0f4ca13ce8aa4ef772f7e6d20f6037f7b062" translate="yes" xml:space="preserve">
          <source>Using a computed property name</source>
          <target state="translated">使用计算后的属性名</target>
        </trans-unit>
        <trans-unit id="2e049cd2ca7aadfb96f977493edad5238d6c0c06" translate="yes" xml:space="preserve">
          <source>Using a labeled &lt;code&gt;break&lt;/code&gt; statement</source>
          <target state="translated">使用标记的 &lt;code&gt;break&lt;/code&gt; 语句</target>
        </trans-unit>
        <trans-unit id="4e9fba8cc776768eabe25b901630030635078d83" translate="yes" xml:space="preserve">
          <source>Using a labeled &lt;code&gt;break&lt;/code&gt; with &lt;code&gt;for&lt;/code&gt; loops</source>
          <target state="translated">使用带有 &lt;code&gt;for&lt;/code&gt; 循环的标记 &lt;code&gt;break&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b9f2bd6736bab09327ec27ef35ff1f37761fa2c" translate="yes" xml:space="preserve">
          <source>Using a labeled &lt;code&gt;continue&lt;/code&gt; statement</source>
          <target state="translated">使用标记的 &lt;code&gt;continue&lt;/code&gt; 语句</target>
        </trans-unit>
        <trans-unit id="51aa6ccc3ca8126a9ecb477b0b8381239ec3e12c" translate="yes" xml:space="preserve">
          <source>Using a labeled &lt;code&gt;continue&lt;/code&gt; with &lt;code&gt;for&lt;/code&gt; loops</source>
          <target state="translated">使用标记 &lt;code&gt;continue&lt;/code&gt; 与 &lt;code&gt;for&lt;/code&gt; 循环</target>
        </trans-unit>
        <trans-unit id="e362889eafc12e1f642a4f766d95e1bf00fda2cc" translate="yes" xml:space="preserve">
          <source>Using a labeled block with &lt;code&gt;break&lt;/code&gt;</source>
          <target state="translated">使用带有标记的带有 &lt;code&gt;break&lt;/code&gt; 块</target>
        </trans-unit>
        <trans-unit id="dfe4452da29034ff1a180fa9833fa40e31fbdf0d" translate="yes" xml:space="preserve">
          <source>Using a regular expression to change data format</source>
          <target state="translated">使用正则表达式来改变数据格式</target>
        </trans-unit>
        <trans-unit id="82f7b316afcba40bbf80d93a3ff43a4a24aeddbf" translate="yes" xml:space="preserve">
          <source>Using a regular expression with the sticky flag</source>
          <target state="translated">使用带有粘性标志的正则表达式</target>
        </trans-unit>
        <trans-unit id="53be444b5f30ded3e73f2bbd22be9ed448770df9" translate="yes" xml:space="preserve">
          <source>Using a tab character mimics standard pretty-print appearance:</source>
          <target state="translated">使用tab字符模仿标准的漂亮打印外观。</target>
        </trans-unit>
        <trans-unit id="ec2f84e91d6965ed96a210bb5c657a3fa5cf45b7" translate="yes" xml:space="preserve">
          <source>Using an array to tabulate a set of values</source>
          <target state="translated">使用数组对一组数值进行列表。</target>
        </trans-unit>
        <trans-unit id="13948d827839045126caacaf1dbdab5237afa243" translate="yes" xml:space="preserve">
          <source>Using an inline function that modifies the matched characters</source>
          <target state="translated">使用内联函数修改匹配的字符。</target>
        </trans-unit>
        <trans-unit id="5ea58ab4d26e8ac5872c3a1b28e4ce01a91bca10" translate="yes" xml:space="preserve">
          <source>Using an object in an array-like fashion</source>
          <target state="translated">以类似数组的方式使用对象</target>
        </trans-unit>
        <trans-unit id="725865c464870e2965f9729f532857f18bd350ac" translate="yes" xml:space="preserve">
          <source>Using and chaining the &lt;code&gt;catch&lt;/code&gt; method</source>
          <target state="translated">使用和链接 &lt;code&gt;catch&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="9516772c5fc3d3c19b6ad7a110e9584847f44613" translate="yes" xml:space="preserve">
          <source>Using arrow functions</source>
          <target state="translated">使用箭头函数</target>
        </trans-unit>
        <trans-unit id="eff930df6fbf35ab334f1cd7d9a93bacaea2ec96" translate="yes" xml:space="preserve">
          <source>Using arrow functions and &lt;code&gt;Array.from&lt;/code&gt;</source>
          <target state="translated">使用箭头函数和 &lt;code&gt;Array.from&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2492791e1e24a5c825e473ad941dbf6a44f80cd7" translate="yes" xml:space="preserve">
          <source>Using brackets for multiplication</source>
          <target state="translated">使用括号做乘法</target>
        </trans-unit>
        <trans-unit id="4266638185ad72cac0aac3a59e1f54ca2f6b98c0" translate="yes" xml:space="preserve">
          <source>Using continue with a label</source>
          <target state="translated">使用继续与标签</target>
        </trans-unit>
        <trans-unit id="c7fe042da8ffd8948375c018cd4922588724ee91" translate="yes" xml:space="preserve">
          <source>Using continue with while</source>
          <target state="translated">使用继续与而</target>
        </trans-unit>
        <trans-unit id="c6d46d3e2970779c6d78bfba3a9ad9c843d5b7e4" translate="yes" xml:space="preserve">
          <source>Using getDate()</source>
          <target state="translated">使用getDate()</target>
        </trans-unit>
        <trans-unit id="d998290f1177c8d373af4066ae75ccd78ca5c1ba" translate="yes" xml:space="preserve">
          <source>Using global and ignore case flags with &lt;code&gt;match()&lt;/code&gt;</source>
          <target state="translated">在 &lt;code&gt;match()&lt;/code&gt; 中使用全局和忽略大小写标志</target>
        </trans-unit>
        <trans-unit id="dae73a071350ea81e9a6a3084ce16153ee7f4941" translate="yes" xml:space="preserve">
          <source>Using locales</source>
          <target state="translated">使用locales</target>
        </trans-unit>
        <trans-unit id="1eaeeb9b1bdd633a7ee2be2491b50c4b2dd2f51c" translate="yes" xml:space="preserve">
          <source>Using map to reformat objects in an array</source>
          <target state="translated">使用map对数组中的对象进行重新格式化</target>
        </trans-unit>
        <trans-unit id="43a702ddd86f4d7f4ffc64cfc9724d04aad87e8c" translate="yes" xml:space="preserve">
          <source>Using named exports</source>
          <target state="translated">使用命名出口</target>
        </trans-unit>
        <trans-unit id="79c2bee0e97b3f946b5be950f89965426ed5c112" translate="yes" xml:space="preserve">
          <source>Using one of the newly &lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;reserved keywords&lt;/a&gt; (in prevision for ECMAScript 2015): &lt;code&gt;implements&lt;/code&gt;, &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, and &lt;code&gt;yield&lt;/code&gt;</source>
          <target state="translated">使用新&lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;保留的关键字之一&lt;/a&gt;（在ECMAScript 2015的预配置中）： &lt;code&gt;implements&lt;/code&gt; ， &lt;code&gt;interface&lt;/code&gt; ， &lt;code&gt;let&lt;/code&gt; ， &lt;code&gt;package&lt;/code&gt; ， &lt;code&gt;private&lt;/code&gt; ， &lt;code&gt;protected&lt;/code&gt; ， &lt;code&gt;public&lt;/code&gt; ， &lt;code&gt;static&lt;/code&gt; 和 &lt;code&gt;yield&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d7a876bdd113f4940d781859515dc8f3133d487" translate="yes" xml:space="preserve">
          <source>Using options</source>
          <target state="translated">使用选项</target>
        </trans-unit>
        <trans-unit id="1f7a57490393fd8594bc2ff1841908dfd1e9193f" translate="yes" xml:space="preserve">
          <source>Using parseInt</source>
          <target state="translated">使用parseInt</target>
        </trans-unit>
        <trans-unit id="76725ad13661b304019ea358cfca45e614714de3" translate="yes" xml:space="preserve">
          <source>Using private fields, the definition can be refined as below.</source>
          <target state="translated">使用私有字段,定义可以细化如下。</target>
        </trans-unit>
        <trans-unit id="9ccaa6ecec23ddf5a861e417d481a9f4cc9f1663" translate="yes" xml:space="preserve">
          <source>Using promises</source>
          <target state="translated">使用承诺</target>
        </trans-unit>
        <trans-unit id="13f4e9cfb7fcad90eab435e6419e019029f2cdd2" translate="yes" xml:space="preserve">
          <source>Using regular expression on multiple lines</source>
          <target state="translated">在多行上使用正则表达式</target>
        </trans-unit>
        <trans-unit id="d8fcaaffaf763755745b2c99c373b25626997b0f" translate="yes" xml:space="preserve">
          <source>Using regular expression to split lines with different &lt;strong&gt;line endings/ends of line/line breaks&lt;/strong&gt;</source>
          <target state="translated">使用正则表达式拆分具有不同&lt;strong&gt;行尾/换行符/换行符的行&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="69e080040b10738c8afcd03deb0d85628ef3a5d3" translate="yes" xml:space="preserve">
          <source>Using shift() method in while loop</source>
          <target state="translated">在while循环中使用shift()方法</target>
        </trans-unit>
        <trans-unit id="6df517976ef66b07cb11ade3e93f636707d93e93" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; constructor:</source>
          <target state="translated">使用&lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;构造函数：</target>
        </trans-unit>
        <trans-unit id="7aa31d1e62b235e2c9af364c8a7ebac64b73ab4a" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;Map&lt;/code&gt; object</source>
          <target state="translated">使用 &lt;code&gt;Map&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="2b7112639fe0724543dd4fe914f8024f1274df06" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;Number&lt;/code&gt; object to assign values to numeric variables</source>
          <target state="translated">使用 &lt;code&gt;Number&lt;/code&gt; 对象将值分配给数字变量</target>
        </trans-unit>
        <trans-unit id="2da180e96c0d44481802a959caffa06e89d3c55e" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;Set&lt;/code&gt; object</source>
          <target state="translated">使用 &lt;code&gt;Set&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="1a705e1972fa32310b6d183debc8ff1e4b655b57" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;add&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;add&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="060310649cd7bd07b0fb5ce33774407a6fcc987b" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;buffer&lt;/code&gt; property</source>
          <target state="translated">使用 &lt;code&gt;buffer&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="17636c8fe1421043e421a10ca3292967a563f944" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;byteLength&lt;/code&gt; property</source>
          <target state="translated">使用 &lt;code&gt;byteLength&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="5d3cb85b5d2531bdca2df5cb3be77135d41d81d0" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;byteOffset&lt;/code&gt; property</source>
          <target state="translated">使用 &lt;code&gt;byteOffset&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="3812b3bdd9d1183316efe5c656205634d6bc73d1" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;clear&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;clear&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="0d7fb8b01806c8f781e3aeaba0813539fcf1910b" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;constructor&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;constructor&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="763d4745f82ee4dda7843b9b47b02f114bbec263" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;delete&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;delete&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="cd0cce4a7bb24463a85dbc5b2258d2a7190f67df" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;get&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;get&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="ea8088e170dc1068ccacc9cfa0bbd882ef2747fc" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getFloat32&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;getFloat32&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="b0d639b7fb6b88549de590bff81cca9ba70603e9" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getFloat64&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;getFloat64&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="3b2ac72df9ac30445f67dc68d79abeb97041b407" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getInt16&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;getInt16&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="7484baadf9cb95379e3f89ab6b61d7403157f747" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getInt32&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;getInt32&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="3d167e11ae2b9f08de238cb2665ae39e7f7ddf09" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getInt8&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;getInt8&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="d807de54c7de88cf35dd1d764ea1eed1088a40dd" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getUint16&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;getUint16&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="cf46d850dca7ec2ecc349894a61fd86973ed38a0" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getUint32&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;getUint32&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="a6aa38f1e5e0218896cc7fd912115b996916bcf5" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getUint8&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;getUint8&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="4ba6fb49f1699b5b23eb412e5863a030e46feb80" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;has&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;has&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="23d439477c548975addf6c44f9eb57a0c7a3300d" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;length&lt;/code&gt; property</source>
          <target state="translated">使用 &lt;code&gt;length&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="721bfbe8f3d441ad6e98f957929d2516b5f52f9b" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;resolvedOptions&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;resolvedOptions&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="11ad006b0fe08f07b94e25e20ac3810a53373c95" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;reviver&lt;/code&gt; parameter</source>
          <target state="translated">使用 &lt;code&gt;reviver&lt;/code&gt; 参数</target>
        </trans-unit>
        <trans-unit id="44318d406fa57dc8fb9b183dc858c7a0c5c5e236" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;set&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;set&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="20110daa0cfff630e933ef54899d2b905d479d38" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;set&lt;/code&gt; method with chaining</source>
          <target state="translated">将 &lt;code&gt;set&lt;/code&gt; 方法与链接一起使用</target>
        </trans-unit>
        <trans-unit id="cb27aa9c0701a5f16cb8372fb511c8755174037b" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;setFloat32&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;setFloat32&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="1b630e8cc96aa98420147912bab138957fdc4748" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;setFloat64&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;setFloat64&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="e97a3a5fe1936c3c1cdb527f5a182db1bbb93c77" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;setInt16&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;setInt16&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="b25ce442471b34db1e8f771a1352031f37abb0a2" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;setInt32&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;setInt32&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="9df040b351fac68c30f82dac9469d547a0bcc827" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;setInt8&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;setInt8&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="cc5967a59f8ecff73ddd8166c7024c2d897688c0" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;setUint16&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;setUint16&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="2e090cfb39824335c51a2ca978dad64f4d6877e8" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;setUint32&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;setUint32&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="93f41b970770c2780268dfba20edf118501b3bfa" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;setUint8&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;setUint8&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="4b5ceb28e787cb4169fce2a298736badc5cb67de" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;subarray&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;subarray&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="4818dbc56f63c5cd137ed2225a59b70710006fc1" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;then&lt;/code&gt; method</source>
          <target state="translated">使用 &lt;code&gt;then&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="388d103635b65cc58cad5198640fdce20f85c24c" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;typeof&lt;/code&gt; operator with symbols</source>
          <target state="translated">对符号使用 &lt;code&gt;typeof&lt;/code&gt; 运算符</target>
        </trans-unit>
        <trans-unit id="a5543d3464e6260d0c86f11deb582c82d760cffc" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;unicode&lt;/code&gt; property</source>
          <target state="translated">使用 &lt;code&gt;unicode&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="2cd2aea6d5143be08cdcb069934b7cf5496a961d" translate="yes" xml:space="preserve">
          <source>Using the WeakSet object</source>
          <target state="translated">使用WeakSet对象</target>
        </trans-unit>
        <trans-unit id="e0e7339c08ba4cc50e07ceb0c45aa0d878640344" translate="yes" xml:space="preserve">
          <source>Using the WebAssembly JavaScript API</source>
          <target state="translated">使用WebAssembly JavaScript API</target>
        </trans-unit>
        <trans-unit id="8435c2402c803d5b0c23a5ab8e6aa879dbefe401" translate="yes" xml:space="preserve">
          <source>Using the default export</source>
          <target state="translated">使用默认的导出</target>
        </trans-unit>
        <trans-unit id="666845613d801295c55214f07242e40cb0e36dbe" translate="yes" xml:space="preserve">
          <source>Using the equality operators</source>
          <target state="translated">使用平等运算符</target>
        </trans-unit>
        <trans-unit id="285fc329c1a77379f35f29c3c3c1088371fdd719" translate="yes" xml:space="preserve">
          <source>Using the older &lt;a href=&quot;proto&quot;&gt;&lt;code&gt;Object.prototype.__proto__&lt;/code&gt;&lt;/a&gt; property, we can easily define &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; if it isn't available already:</source>
          <target state="translated">使用旧的&lt;a href=&quot;proto&quot;&gt; &lt;code&gt;Object.prototype.__proto__&lt;/code&gt; &lt;/a&gt;属性，如果 &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; 尚不可用，则可以轻松定义它：</target>
        </trans-unit>
        <trans-unit id="cf3358ab3f89ba0d2aaa93343e07caf893b316c7" translate="yes" xml:space="preserve">
          <source>Using the same mechanism the following example counts the total number of words in a string:</source>
          <target state="translated">使用同样的机制,下面的例子计算一个字符串的总字数。</target>
        </trans-unit>
        <trans-unit id="16cdbf1e2fe53d21049b1aebbf57bc13b8622039" translate="yes" xml:space="preserve">
          <source>Using the static &lt;code&gt;Promise.resolve&lt;/code&gt; method</source>
          <target state="translated">使用静态 &lt;code&gt;Promise.resolve&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="4d319f61fbdfca489440ae7b0fa3b12be1791af1" translate="yes" xml:space="preserve">
          <source>Using the static Promise.reject() method</source>
          <target state="translated">使用静态Promise.reject()方法。</target>
        </trans-unit>
        <trans-unit id="2298ee24c6b53ad8072e335688fa5c9054ce0e73" translate="yes" xml:space="preserve">
          <source>Using two for-of iterations to work with two arrays:</source>
          <target state="translated">使用两个for-of迭代来处理两个数组。</target>
        </trans-unit>
        <trans-unit id="002c1e0c369cfbb7cb5c2adce8fa546ceeb48507" translate="yes" xml:space="preserve">
          <source>Using valueOf</source>
          <target state="translated">使用valueOf</target>
        </trans-unit>
        <trans-unit id="c1643b918b370de0df985bb907e1d1295cc5d395" translate="yes" xml:space="preserve">
          <source>Usually you create an &lt;code&gt;Error&lt;/code&gt; object with the intention of raising it using the &lt;a href=&quot;../statements/throw&quot;&gt;&lt;code&gt;throw&lt;/code&gt;&lt;/a&gt; keyword. You can handle the error using the &lt;a href=&quot;../statements/try...catch&quot;&gt;&lt;code&gt;try...catch&lt;/code&gt;&lt;/a&gt; construct:</source>
          <target state="translated">通常，您创建一个 &lt;code&gt;Error&lt;/code&gt; 对象的目的是使用&lt;a href=&quot;../statements/throw&quot;&gt; &lt;code&gt;throw&lt;/code&gt; &lt;/a&gt;关键字引发它。您可以使用&lt;a href=&quot;../statements/try...catch&quot;&gt; &lt;code&gt;try...catch&lt;/code&gt; &lt;/a&gt;构造来处理错误：</target>
        </trans-unit>
        <trans-unit id="028522823973a359accfd991e9a11f26538c1bec" translate="yes" xml:space="preserve">
          <source>Usually, an object is extensible and new properties can be added to it. However, in this case &lt;a href=&quot;../global_objects/object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt; marked an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible.</source>
          <target state="translated">通常，对象是可扩展的，并且可以向其添加新属性。但是，在这种情况下，&lt;a href=&quot;../global_objects/object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt;将一个对象标记为不再可扩展，因此该对象将永远不会具有超出其被标记为不可扩展时的属性。</target>
        </trans-unit>
        <trans-unit id="729ec6faa377f15330c6ec4333d5a7cc1008e901" translate="yes" xml:space="preserve">
          <source>Usually, properties in an object created by an &lt;a href=&quot;../global_objects/array#Syntax&quot;&gt;array initializer&lt;/a&gt; are configurable. However, for example, when using &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;, the property isn't configurable by default.</source>
          <target state="translated">通常，由&lt;a href=&quot;../global_objects/array#Syntax&quot;&gt;数组初始化程序&lt;/a&gt;创建的对象中的属性是可配置的。但是，例如，在使用&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; 时&lt;/a&gt;，默认情况下该属性不可配置。</target>
        </trans-unit>
        <trans-unit id="f38c9f1a95614045050e2aa55540b6933caff329" translate="yes" xml:space="preserve">
          <source>Valid &lt;code&gt;for-of&lt;/code&gt; loop</source>
          <target state="translated">有效 &lt;code&gt;for-of&lt;/code&gt; 循环</target>
        </trans-unit>
        <trans-unit id="ac8102c9cb2a0cddbd0b586bee673befe3b905b2" translate="yes" xml:space="preserve">
          <source>Valid cases</source>
          <target state="translated">有效案例</target>
        </trans-unit>
        <trans-unit id="1ab413d429d0c4d151947326c53077a41ccae512" translate="yes" xml:space="preserve">
          <source>Valid for-in loop</source>
          <target state="translated">有效的for-in循环</target>
        </trans-unit>
        <trans-unit id="7ecb1f4a8ff8ccd062c99038efacdb3978a0c34b" translate="yes" xml:space="preserve">
          <source>Valid octal numbers</source>
          <target state="translated">有效的八进制数</target>
        </trans-unit>
        <trans-unit id="62427623ec1fd77b629b493130d6011d493b75ba" translate="yes" xml:space="preserve">
          <source>Valid regular expression flags</source>
          <target state="translated">有效的正则表达式标志</target>
        </trans-unit>
        <trans-unit id="53034c8ca0e9ac160f2d5018ec7250699b0001c2" translate="yes" xml:space="preserve">
          <source>Validates a given typed array of WebAssembly binary code, returning whether the bytes are valid WebAssembly code (&lt;code&gt;true&lt;/code&gt;) or not (&lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">验证给定类型的WebAssembly二进制代码数组，返回字节是否为有效的WebAssembly代码（ &lt;code&gt;true&lt;/code&gt; ）（ &lt;code&gt;false&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="dd74d182c641e4c78502d863b44d0aeff1575e54" translate="yes" xml:space="preserve">
          <source>Validation</source>
          <target state="translated">Validation</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="97eb3dad0caf7a0af0caef2ef21956a7465d9c32" translate="yes" xml:space="preserve">
          <source>Value Range</source>
          <target state="translated">值范围</target>
        </trans-unit>
        <trans-unit id="b7d636c3a9434a850eee328130074f786436fb4a" translate="yes" xml:space="preserve">
          <source>Value correction and an extra property</source>
          <target state="translated">价值修正和额外的属性</target>
        </trans-unit>
        <trans-unit id="ceab60964f2a8b8a0b414a18859f8da76c815209" translate="yes" xml:space="preserve">
          <source>Value equality</source>
          <target state="translated">价值平等</target>
        </trans-unit>
        <trans-unit id="deb5559baa347c8fa63883cef40a651c5d96a454" translate="yes" xml:space="preserve">
          <source>Value properties</source>
          <target state="translated">价值属性</target>
        </trans-unit>
        <trans-unit id="7e95513c13db4d4ce57cf68d5e04fce2088d7774" translate="yes" xml:space="preserve">
          <source>Value to fill an array.</source>
          <target state="translated">填充一个数组的值。</target>
        </trans-unit>
        <trans-unit id="03cf9449ccf155418b2f5482fb732e12234768e2" translate="yes" xml:space="preserve">
          <source>Value to fill the typed array with.</source>
          <target state="translated">用来填充类型数组的值。</target>
        </trans-unit>
        <trans-unit id="6cd1bc01710ea3928dd42ebf711ff0dad289ebbc" translate="yes" xml:space="preserve">
          <source>Value to use as &lt;code&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/code&gt; (i.e the reference &lt;code&gt;Object&lt;/code&gt;) when executing &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">执行 &lt;code&gt;callback&lt;/code&gt; 时用作 &lt;code&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/code&gt; 值（即参考 &lt;code&gt;Object&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b237ad26015e6920af43cdcfb4766bd919a43a39" translate="yes" xml:space="preserve">
          <source>Value to use as &lt;code&gt;this&lt;/code&gt; when executing &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">执行 &lt;code&gt;callback&lt;/code&gt; 时用作 &lt;code&gt;this&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="6a38e26f0de1cc21706ce788cd076d91affd9edd" translate="yes" xml:space="preserve">
          <source>Value to use as &lt;code&gt;this&lt;/code&gt; when executing &lt;code&gt;mapFn&lt;/code&gt;.</source>
          <target state="translated">执行 &lt;code&gt;mapFn&lt;/code&gt; 时用作 &lt;code&gt;this&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="dad47e65c53169bdf1516f9f32906fb63c15105f" translate="yes" xml:space="preserve">
          <source>Value to use as the first argument to the first call of the &lt;code&gt;callback&lt;/code&gt;. If no initial value is supplied, the first element in the array will be used. Calling &lt;code&gt;reduce()&lt;/code&gt; on an empty array without an initial value is an error.</source>
          <target state="translated">用作首次调用 &lt;code&gt;callback&lt;/code&gt; 的第一个参数的值。如果未提供初始值，则将使用数组中的第一个元素。在没有初始值的空数组上调用 &lt;code&gt;reduce()&lt;/code&gt; 是错误的。</target>
        </trans-unit>
        <trans-unit id="859b0b5b86d8313084f51bc48daa7a36bd52b191" translate="yes" xml:space="preserve">
          <source>Var hides argument</source>
          <target state="translated">Var隐藏参数</target>
        </trans-unit>
        <trans-unit id="f06faae45051c6d773a060f64aa4b7927970a707" translate="yes" xml:space="preserve">
          <source>Variable declarations in the JavaScript Guide</source>
          <target state="translated">JavaScript指南中的变量声明</target>
        </trans-unit>
        <trans-unit id="34721cbac05fd3459b9d40c8119157c44d7f9b76" translate="yes" xml:space="preserve">
          <source>Variable name. It can be any legal identifier.</source>
          <target state="translated">变量名称。可以是任何法律标识符。</target>
        </trans-unit>
        <trans-unit id="3b6526218abccd9aaf72feb65b361d2b51bbd22f" translate="yes" xml:space="preserve">
          <source>Variable names can't start with numbers in JavaScript. The following fails:</source>
          <target state="translated">在JavaScript中,变量名不能以数字开头。下面的操作失败。</target>
        </trans-unit>
        <trans-unit id="0e909d01b8601e5cf9fb51367dcb305a9c9701e8" translate="yes" xml:space="preserve">
          <source>Variable names starting with numeric literals</source>
          <target state="translated">以数字文字开头的变量名称</target>
        </trans-unit>
        <trans-unit id="4197c4595ca86583cbae2b9136ba641f9a6e49bf" translate="yes" xml:space="preserve">
          <source>Variable not declared</source>
          <target state="translated">未声明的变量</target>
        </trans-unit>
        <trans-unit id="e093b0ba06f11745364d4d6cc453646e62d5c378" translate="yes" xml:space="preserve">
          <source>Variable to iterate over property values, optionally declared with the &lt;code&gt;var&lt;/code&gt; keyword. This variable is local to the function, not to the loop.</source>
          <target state="translated">用于遍历属性值的变量，可以选择使用 &lt;code&gt;var&lt;/code&gt; 关键字声明。此变量是函数的局部变量，而不是循环变量。</target>
        </trans-unit>
        <trans-unit id="93357e07fe591c0b80ecee4526694c55f27bf8c3" translate="yes" xml:space="preserve">
          <source>Variables and methods can infer the name of an anonymous function from its syntactic position (new in ECMAScript 2015).</source>
          <target state="translated">变量和方法可以根据匿名函数的语法位置来推断其名称(ECMAScript 2015中新增)。</target>
        </trans-unit>
        <trans-unit id="54be569e281d5bfecc250892e33932f45a689c36" translate="yes" xml:space="preserve">
          <source>Variables declared by &lt;code&gt;let&lt;/code&gt; have their scope in the block for which they are defined, as well as in any contained sub-blocks. In this way, &lt;code&gt;let&lt;/code&gt; works very much like &lt;code&gt;var&lt;/code&gt;. The main difference is that the scope of a &lt;code&gt;var&lt;/code&gt; variable is the entire enclosing function:</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 声明的变量的作用域在定义它们的块以及任何包含的子块中。这样， &lt;code&gt;let&lt;/code&gt; 工作非常像 &lt;code&gt;var&lt;/code&gt; 。主要区别在于 &lt;code&gt;var&lt;/code&gt; 变量的范围是整个封闭函数：</target>
        </trans-unit>
        <trans-unit id="51f758127e9b82bba992a23b60e91cdde2094233" translate="yes" xml:space="preserve">
          <source>Variables declared with &lt;code&gt;var&lt;/code&gt;&lt;strong&gt;do not&lt;/strong&gt; have block scope. Variables introduced with a block are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. In other words, block statements do not introduce a scope. Although &quot;standalone&quot; blocks are valid syntax, you do not want to use standalone blocks in JavaScript, because they don't do what you think they do, if you think they do anything like such blocks in C or Java. For example:</source>
          <target state="translated">用 &lt;code&gt;var&lt;/code&gt; 声明的变量&lt;strong&gt;没有&lt;/strong&gt;块作用域。随块引入的变量的作用域为包含的函数或脚本，并且设置它们的效果将持续到块本身之外。换句话说，block语句不会引入作用域。尽管&amp;ldquo;独立&amp;rdquo;块是有效的语法，但是您不希望在JavaScript中使用独立块，因为如果您认为独立块在C或Java中的作用类似于此类块，则它们不会像您想的那样工作。例如：</target>
        </trans-unit>
        <trans-unit id="18fa0296710b520dc6023f1904d21b083fe180d8" translate="yes" xml:space="preserve">
          <source>Variables that appear to be implicit globals may be references to variables in an outer function scope:</source>
          <target state="translated">看起来是隐式全局的变量可能是对外部函数作用域中变量的引用。</target>
        </trans-unit>
        <trans-unit id="9c7312d6bb312853c19d38443e3377eca38079cc" translate="yes" xml:space="preserve">
          <source>Variant collations for certain locales. Possible values include: &lt;code&gt;&quot;big5han&quot;&lt;/code&gt;, &lt;code&gt;&quot;dict&quot;&lt;/code&gt;, &lt;code&gt;&quot;direct&quot;&lt;/code&gt;, &lt;code&gt;&quot;ducet&quot;&lt;/code&gt;, &lt;code&gt;&quot;gb2312&quot;&lt;/code&gt;, &lt;code&gt;&quot;phonebk&quot;&lt;/code&gt;, &lt;code&gt;&quot;phonetic&quot;&lt;/code&gt;, &lt;code&gt;&quot;pinyin&quot;&lt;/code&gt;, &lt;code&gt;&quot;reformed&quot;&lt;/code&gt;, &lt;code&gt;&quot;searchjl&quot;&lt;/code&gt;, &lt;code&gt;&quot;stroke&quot;&lt;/code&gt;, &lt;code&gt;&quot;trad&quot;&lt;/code&gt;, &lt;code&gt;&quot;unihan&quot;&lt;/code&gt;. The &lt;code&gt;&quot;standard&quot;&lt;/code&gt; and &lt;code&gt;&quot;search&quot;&lt;/code&gt; values are ignored; they are replaced by the &lt;code&gt;options&lt;/code&gt; property &lt;code&gt;usage&lt;/code&gt; (see below).</source>
          <target state="translated">某些语言环境的变体归类。可能的值包括： &lt;code&gt;&quot;big5han&quot;&lt;/code&gt; ， &lt;code&gt;&quot;dict&quot;&lt;/code&gt; ， &lt;code&gt;&quot;direct&quot;&lt;/code&gt; ， &lt;code&gt;&quot;ducet&quot;&lt;/code&gt; ， &lt;code&gt;&quot;gb2312&quot;&lt;/code&gt; ， &lt;code&gt;&quot;phonebk&quot;&lt;/code&gt; ， &lt;code&gt;&quot;phonetic&quot;&lt;/code&gt; ， &lt;code&gt;&quot;pinyin&quot;&lt;/code&gt; ， &lt;code&gt;&quot;reformed&quot;&lt;/code&gt; ， &lt;code&gt;&quot;searchjl&quot;&lt;/code&gt; ， &lt;code&gt;&quot;stroke&quot;&lt;/code&gt; ， &lt;code&gt;&quot;trad&quot;&lt;/code&gt; ， &lt;code&gt;&quot;unihan&quot;&lt;/code&gt; 。该 &lt;code&gt;&quot;standard&quot;&lt;/code&gt; 和 &lt;code&gt;&quot;search&quot;&lt;/code&gt; 值被忽略;它们由 &lt;code&gt;options&lt;/code&gt; 属性的 &lt;code&gt;usage&lt;/code&gt; 代替（请参见下文）。</target>
        </trans-unit>
        <trans-unit id="bf57b0c489a8725e49acdae0bd72d262edfe17b9" translate="yes" xml:space="preserve">
          <source>Vendor-specific extensions</source>
          <target state="translated">特定供应商扩展</target>
        </trans-unit>
        <trans-unit id="0ea3c77718c2c801946a36d69f35b87497b18336" translate="yes" xml:space="preserve">
          <source>Venkat.R - Various Syntax Error for const variables</source>
          <target state="translated">Venkat.R-常量变量的各种语法错误。</target>
        </trans-unit>
        <trans-unit id="f06cca3cedfe52389d86ad2bc0d3cb561f521c75" translate="yes" xml:space="preserve">
          <source>Venkat.R - Various Syntax Error for let variables</source>
          <target state="translated">Venkat.R-Let变量的各种语法错误。</target>
        </trans-unit>
        <trans-unit id="b7f06ad0a722ed487ff846d450043fedd3f6d0c1" translate="yes" xml:space="preserve">
          <source>Venkat.R - Various Syntax Error for var variables</source>
          <target state="translated">Venkat.R-变量的各种语法错误。</target>
        </trans-unit>
        <trans-unit id="b8a114e30b4ba12aeabad7d7bde58af00f7ffe47" translate="yes" xml:space="preserve">
          <source>Venkatraman.R - JS Promise (Part 1, Basics)</source>
          <target state="translated">Venkatraman.R-JS Promise (第1部分,基础知识)</target>
        </trans-unit>
        <trans-unit id="745aa0a5b0ea7dd1ef6b034b321c490d2e1e649e" translate="yes" xml:space="preserve">
          <source>Venkatraman.R - JS Promise (Part 2 - Using Q.js, When.js and RSVP.js)</source>
          <target state="translated">Venkatraman.R-JS Promise (Part 2-Using Q.js,When.js and RSVP.js)</target>
        </trans-unit>
        <trans-unit id="67fec039179d5eaa41e92fed7cca3b18f2ebb69a" translate="yes" xml:space="preserve">
          <source>Venkatraman.R - Tools for Promises Unit Testing</source>
          <target state="translated">Venkatraman.R--承诺单元测试的工具</target>
        </trans-unit>
        <trans-unit id="eb9301fe225dd357c9fc1f3e7d0f52d86381b70c" translate="yes" xml:space="preserve">
          <source>Verifies that the specified index of the array still contains a value and sleeps awaiting or times out. Returns either &lt;code&gt;&quot;ok&quot;&lt;/code&gt;, &lt;code&gt;&quot;not-equal&quot;&lt;/code&gt;, or &lt;code&gt;&quot;timed-out&quot;&lt;/code&gt;. If waiting is not allowed in the calling agent then it throws an Error exception (most browsers will not allow &lt;code&gt;wait()&lt;/code&gt; on the browser's main thread).</source>
          <target state="translated">验证数组的指定索引仍然包含一个值，并在等待或超时的时间内休眠。返回 &lt;code&gt;&quot;ok&quot;&lt;/code&gt; ， &lt;code&gt;&quot;not-equal&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;timed-out&quot;&lt;/code&gt; 。如果调用代理不允许等待，则它将引发Error异常（大多数浏览器不允许在浏览器的主线程上使用 &lt;code&gt;wait()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2a0d4bdeb1c39c3531dedcf5fe570562282bdfeb" translate="yes" xml:space="preserve">
          <source>Versions of Chrome which implement &lt;code&gt;Object.defineProperty()&lt;/code&gt; in some circumstances ignore a length value different from the array's current &lt;a href=&quot;../array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property. In some circumstances changing writability seems to silently not work (and not throw an exception). Also, relatedly, some array-mutating methods like &lt;a href=&quot;../array/push&quot;&gt;&lt;code&gt;Array.prototype.push&lt;/code&gt;&lt;/a&gt; don't respect a non-writable length.</source>
          <target state="translated">在某些情况下，实现 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 的Chrome版本会忽略与数组的当前&lt;a href=&quot;../array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;属性不同的长度值。在某些情况下，更改可写性似乎无声地起作用（并且不会引发异常）。同样，与此相关的是，某些数组更改方法（例如&lt;a href=&quot;../array/push&quot;&gt; &lt;code&gt;Array.prototype.push&lt;/code&gt; )&lt;/a&gt;也不遵循不可写的长度。</target>
        </trans-unit>
        <trans-unit id="8009012bd2c4d9369856a9ce6eabe604f691a8f1" translate="yes" xml:space="preserve">
          <source>Versions of Safari which implement &lt;code&gt;Object.defineProperty()&lt;/code&gt; ignore a &lt;code&gt;length&lt;/code&gt; value different from the array's current &lt;a href=&quot;../array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property, and attempts to change writability execute without error but do not actually change the property's writability.</source>
          <target state="translated">实现 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 的Safari版本会忽略与数组当前&lt;a href=&quot;../array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;属性不同的 &lt;code&gt;length&lt;/code&gt; 值，并尝试更改可写性而不会出错，但实际上不会更改该属性的可写性。</target>
        </trans-unit>
        <trans-unit id="104253f6a152860a20a03899f360ca69966f78b6" translate="yes" xml:space="preserve">
          <source>Versions prior to JavaScript 1.3</source>
          <target state="translated">JavaScript 1.3之前的版本</target>
        </trans-unit>
        <trans-unit id="46e754e54cee8d62f971832e184d68ff700f439a" translate="yes" xml:space="preserve">
          <source>Vertical tabulation</source>
          <target state="translated">纵向制表</target>
        </trans-unit>
        <trans-unit id="a1051b28a73d089699acc9ef668770118a942691" translate="yes" xml:space="preserve">
          <source>Void.</source>
          <target state="translated">Void.</target>
        </trans-unit>
        <trans-unit id="814f40affaed044233fd8ca6e9ba6886f4099c25" translate="yes" xml:space="preserve">
          <source>Wait and notify</source>
          <target state="translated">等待和通知</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="d0b8d87b5862684334cbb3837d487f1f309786bc" translate="yes" xml:space="preserve">
          <source>Warning for Deep Clone</source>
          <target state="translated">深度克隆的警告</target>
        </trans-unit>
        <trans-unit id="e9335003fee4eb3a41b0cc28198a374dbf8cdfc1" translate="yes" xml:space="preserve">
          <source>Warning. JavaScript execution won't be halted.</source>
          <target state="translated">警告。JavaScript的执行不会停止。</target>
        </trans-unit>
        <trans-unit id="6a16a8f63688fe43bd5559274036ba17ac905cfb" translate="yes" xml:space="preserve">
          <source>Warning: -file- is being assigned a //# sourceMappingURL, but already has one</source>
          <target state="translated">警告:-file-被分配了一个 //#sourceMappingURL,但已经有了一个。</target>
        </trans-unit>
        <trans-unit id="33e99f0c5ab0d63c358a06e04f45316d2d30148f" translate="yes" xml:space="preserve">
          <source>Warning: 08/09 is not a legal ECMA-262 octal constant</source>
          <target state="translated">警告:08/09不是一个合法的ECMA-262八进制常数。</target>
        </trans-unit>
        <trans-unit id="400d35cfbe0ff77de7ab338f1a24094cabaf2059" translate="yes" xml:space="preserve">
          <source>Warning: Although &lt;code&gt;String.prototype.substr(&amp;hellip;)&lt;/code&gt; is not strictly deprecated (as in &quot;removed from the Web standards&quot;), it is considered a &lt;strong&gt;legacy function&lt;/strong&gt; and should be avoided when possible. It is not part of the core JavaScript language and may be removed in the future. If at all possible, use the &lt;code&gt;&lt;a href=&quot;substring&quot;&gt;substring()&lt;/a&gt;&lt;/code&gt; method instead.</source>
          <target state="translated">警告：尽管 &lt;code&gt;String.prototype.substr(&amp;hellip;)&lt;/code&gt; 并未严格弃用（如&amp;ldquo;从Web标准中删除&amp;rdquo;），但它被认为是&lt;strong&gt;旧函数&lt;/strong&gt;，应尽可能避免使用。它不是JavaScript核心语言的一部分，将来可能会删除。如果可能，请改用 &lt;code&gt;&lt;a href=&quot;substring&quot;&gt;substring()&lt;/a&gt;&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="4e6d31aabb57cbe8e5de5901eaa16756657491df" translate="yes" xml:space="preserve">
          <source>Warning: Date.prototype.toLocaleFormat is deprecated</source>
          <target state="translated">警告:Date.prototype.toLocaleFormat已被废弃。Date.prototype.toLocaleFormat已被废弃。</target>
        </trans-unit>
        <trans-unit id="8b822a7cf09228bed47d3756c97d5a00ff5de3b1" translate="yes" xml:space="preserve">
          <source>Warning: JavaScript 1.6's for-each-in loops are deprecated</source>
          <target state="translated">警告:JavaScript 1.6的for-each-in循环已被废弃。JavaScript 1.6的for-each-in循环已被废弃。</target>
        </trans-unit>
        <trans-unit id="ea5464c818a72742368a1f944fd657a0b679d5d3" translate="yes" xml:space="preserve">
          <source>Warning: String.x is deprecated; use String.prototype.x instead</source>
          <target state="translated">警告:String.x已被废弃,请使用String.prototype.x代替。String.x已被弃用,请使用String.prototype.x代替。</target>
        </trans-unit>
        <trans-unit id="93fd62106ca698fae1d29ec25b71e40a05a6d95d" translate="yes" xml:space="preserve">
          <source>Warning: expression closures are deprecated</source>
          <target state="translated">警告:表达式闭合已被废弃</target>
        </trans-unit>
        <trans-unit id="b8c4fceee630e8f6db1289d72437e3a90b192936" translate="yes" xml:space="preserve">
          <source>Warning: unreachable code after return statement</source>
          <target state="translated">警告:返回语句后的不可达代码</target>
        </trans-unit>
        <trans-unit id="e9639b31b9176e58b05e3357bccad306aa8c5ab2" translate="yes" xml:space="preserve">
          <source>Warnings will not be shown for semicolon-less returns if these statements follow it:</source>
          <target state="translated">如果这些语句后面有无分号的返回,将不会显示警告。</target>
        </trans-unit>
        <trans-unit id="c0fb637549d87c45d789bda4fa312666aafdca18" translate="yes" xml:space="preserve">
          <source>Was available in Aurora and Nightly channels only.</source>
          <target state="translated">是只在极光和夜间频道提供。</target>
        </trans-unit>
        <trans-unit id="4b1850f48782418ea24dfd05790b888afd609c2a" translate="yes" xml:space="preserve">
          <source>Was initially in the ECMAScript 2015 draft, but got removed in revision 27 (August 2014). Please see older revisions of ES2015 for specification semantics.</source>
          <target state="translated">最初在ECMAScript 2015草案中,但在第27版(2014年8月)中被删除。关于规范语义,请参见ES2015的旧版。</target>
        </trans-unit>
        <trans-unit id="088f664178b74d3557cbc57e9219ae2f969b1d18" translate="yes" xml:space="preserve">
          <source>Watches for assignment to a property named &lt;code&gt;prop&lt;/code&gt; in this object, calling &lt;code&gt;handler(prop, oldval, newval)&lt;/code&gt; whenever &lt;code&gt;prop&lt;/code&gt; is set and storing the return value in that property. A watchpoint can filter (or nullify) the value assignment, by returning a modified &lt;code&gt;newval&lt;/code&gt; (or by returning &lt;code&gt;oldval&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;handler(prop, oldval, newval)&lt;/code&gt; 分配给此对象中名为 &lt;code&gt;prop&lt;/code&gt; 的属性的情况，每当设置 &lt;code&gt;prop&lt;/code&gt; 时调用处理程序（prop，oldval，newval）并将返回值存储在该属性中。监视点可以通过返回修改后的 &lt;code&gt;newval&lt;/code&gt; （或返回 &lt;code&gt;oldval&lt;/code&gt; ）来过滤（或使值赋值）。</target>
        </trans-unit>
        <trans-unit id="d4b490c7beb982a8297cd854de2bc11d6727ef14" translate="yes" xml:space="preserve">
          <source>We can make our own iterables like this:</source>
          <target state="translated">我们可以自己做这样的iterables。</target>
        </trans-unit>
        <trans-unit id="b76208d2ba82e6a7a86052a3bcd0e0a71e67eab5" translate="yes" xml:space="preserve">
          <source>We can redefine the iteration behavior by supplying our own &lt;code&gt;@@iterator&lt;/code&gt;:</source>
          <target state="translated">我们可以通过提供自己的 &lt;code&gt;@@iterator&lt;/code&gt; 重新定义迭代行为：</target>
        </trans-unit>
        <trans-unit id="649d376a86e60a4c1a5f875edb3771ec5df66200" translate="yes" xml:space="preserve">
          <source>We can then grow the instance by one page like so:</source>
          <target state="translated">我们就可以像这样把实例增长一个页面。</target>
        </trans-unit>
        <trans-unit id="ee6aa271621bd04ea4d1faf12428f9e6df7342f1" translate="yes" xml:space="preserve">
          <source>We can use &lt;code&gt;push&lt;/code&gt; to append an element to an array. And, because &lt;code&gt;push&lt;/code&gt; accepts a variable number of arguments, we can also push multiple elements at once. But, if we pass an array to &lt;code&gt;push&lt;/code&gt;, it will actually add that array as a single element, instead of adding the elements individually, so we end up with an array inside an array. What if that is not what we want? &lt;code&gt;concat&lt;/code&gt; does have the behaviour we want in this case, but it does not actually append to the existing array but creates and returns a new array. But we wanted to append to our existing array... So what now? Write a loop? Surely not?</source>
          <target state="translated">我们可以使用 &lt;code&gt;push&lt;/code&gt; 将元素添加到数组。而且，由于 &lt;code&gt;push&lt;/code&gt; 接受可变数量的参数，因此我们也可以一次推送多个元素。但是，如果我们将数组传递给 &lt;code&gt;push&lt;/code&gt; ，它将实际上将该数组添加为单个元素，而不是单独添加元素，因此最终在数组内部添加了一个数组。如果那不是我们想要的呢？在这种情况下， &lt;code&gt;concat&lt;/code&gt; 确实具有我们想要的行为，但实际上并没有追加到现有数组上，而是创建并返回了一个新数组。但是我们想追加到现有数组中...那么现在呢？写一个循环？当然可以吗？</target>
        </trans-unit>
        <trans-unit id="8a3d256743ef04d19c7d610e3021d4c239b8c1b0" translate="yes" xml:space="preserve">
          <source>We have already learned how to notate properties using the initializer syntax. Oftentimes, there are variables in your code that you would like to put into an object. You will see code like this:</source>
          <target state="translated">我们已经学习了如何使用初始化器语法来记述属性。很多时候,在你的代码中,你想把一些变量放入一个对象中。你会看到这样的代码。</target>
        </trans-unit>
        <trans-unit id="3db171eb4b32a7305e9ce25b4aac305dcd518a56" translate="yes" xml:space="preserve">
          <source>We then create an import object that contains a reference to the table:</source>
          <target state="translated">然后,我们创建一个包含对表的引用的导入对象。</target>
        </trans-unit>
        <trans-unit id="328556a4a648ea7eb2cf113557e53d98c76b6ff1" translate="yes" xml:space="preserve">
          <source>We then create an import object that contains the table:</source>
          <target state="translated">然后我们创建一个包含表的导入对象。</target>
        </trans-unit>
        <trans-unit id="ea5d5dae0af760aa2d944bfd09cfe9be0d652701" translate="yes" xml:space="preserve">
          <source>We then do a check using &lt;code&gt;WebAssembly.Module.customSections&lt;/code&gt;, looking to see whether the module instance contains a &quot;name&quot; custom section by checking that its &lt;code&gt;length&lt;/code&gt; is more than 0. Since there is a &quot;name&quot; section in the example, an &lt;code&gt;ArrayBuffer&lt;/code&gt; object is returned.</source>
          <target state="translated">然后，我们使用 &lt;code&gt;WebAssembly.Module.customSections&lt;/code&gt; 进行检查，通过检查模块实例的 &lt;code&gt;length&lt;/code&gt; 是否大于0 来查看模块实例是否包含&amp;ldquo; name&amp;rdquo;自定义节。由于示例中存在&amp;ldquo; name&amp;rdquo;节，因此使用 &lt;code&gt;ArrayBuffer&lt;/code&gt; 返回对象。</target>
        </trans-unit>
        <trans-unit id="6279a80821249cab2332a0d932a3e191da10ddc9" translate="yes" xml:space="preserve">
          <source>WeakMap</source>
          <target state="translated">WeakMap</target>
        </trans-unit>
        <trans-unit id="c7b4a83585902eed00ada9c94e8937e6c0a8dada" translate="yes" xml:space="preserve">
          <source>WeakMap.prototype</source>
          <target state="translated">WeakMap.prototype</target>
        </trans-unit>
        <trans-unit id="9f48b9d4c39134a88b6b1b3ddc4feab4fccf55c5" translate="yes" xml:space="preserve">
          <source>WeakSet</source>
          <target state="translated">WeakSet</target>
        </trans-unit>
        <trans-unit id="2a2796d332dfa789b552dadcffe726463b5ed5ca" translate="yes" xml:space="preserve">
          <source>WeakSet.prototype</source>
          <target state="translated">WeakSet.prototype</target>
        </trans-unit>
        <trans-unit id="f76ce82654fc9f33f528ad8761bea75f5a412677" translate="yes" xml:space="preserve">
          <source>Web IDL type</source>
          <target state="translated">Web IDL类型</target>
        </trans-unit>
        <trans-unit id="e3fe058d1c44e5390193812c37403e5227e1a2c1" translate="yes" xml:space="preserve">
          <source>Web Workers</source>
          <target state="translated">网络工作者</target>
        </trans-unit>
        <trans-unit id="051061c35dede06e751f127657cfd8dabc9b47ce" translate="yes" xml:space="preserve">
          <source>WebAssembly</source>
          <target state="translated">WebAssembly</target>
        </trans-unit>
        <trans-unit id="371ae30303ef2ff39e3b7d64c9bc41b13d9a9601" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'Instance' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo;实例&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="228ba67f0f1102828b37015dec8376be8641e2eb" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'Memory' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo;内存&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a0f26628ac421a7f0516ad687f9b21e68b572ff7" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'Table' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo;表&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0b03490a90d0f7fdcbc58a0d42bcea3159bf9c33" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'WebAssembly constructors' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo; WebAssembly构造函数&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="68eb7d9fb516a4d3d171361d847d0c6c95572981" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'WebAssembly' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo; WebAssembly&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4f4f0a0b3c4606f8aaca8421805ef7ab2614a993" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'WebAssembly.Global()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo; WebAssembly.Global（）&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="385ab099cc34cd12a9ac3b9e1b8eb15f94d05b1f" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'WebAssembly.Instance objects' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo; WebAssembly.Instance对象&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7ad56cdca412c38ca9e25e8f246b8596ef675f86" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'WebAssembly.Module()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo; WebAssembly.Module（）&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="cd4bad7a680d529abbcb4bca38ad5f4118b2f350" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'buffer' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo;缓冲区&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f46dd79c7bcb2afec83608cf7770efb45bfcfcb4" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'compile()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中'compile（）'的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5cbcf739bd2a29eacf396a2f60e2a2b05ec077c5" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'customSections()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中'customSections（）'的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2c618f1306c968cc0c0828000dc568da6951d989" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'exports()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中'exports（）'的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5d041e6a816e8255b24bfc5b67e79f352d7f8855" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'get()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo; get（）&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9b3cbf605284784f89ab8a0eb477c44e76312377" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'grow()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中'grow（）'的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="274e2222aaf9aca64cf3acf58fe9340f0e5245aa" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'imports()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中'imports（）'的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7038f367c294a2fdeee9ecf355aaabba4d178dd2" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'instantiate()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo; instantiate（）&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9af302b37c3595fbb194fa33e84be1ff9fc70ae8" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'length' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo;长度&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="134d3d4dadf68e8805a4b9cd63e55a127450e708" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'set()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo; set（）&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9265d0947036796f414bd410a04aedb8c429c924" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'validate()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript接口&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo; validate（）&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="95e5176f47e4ba9928485c4a4d99fdbcf44dc89b" translate="yes" xml:space="preserve">
          <source>WebAssembly concepts</source>
          <target state="translated">WebAssembly的概念</target>
        </trans-unit>
        <trans-unit id="c52b8dd953f8584136911242e6edb4c7aaf2df52" translate="yes" xml:space="preserve">
          <source>WebAssembly features for web embedding&lt;br/&gt;&lt;small&gt;The definition of 'compileStreaming()' in that specification.&lt;/small&gt;</source>
          <target state="translated">用于Web嵌入&lt;small&gt;的&lt;/small&gt; WebAssembly功能&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo; compileStreaming（）&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="05849054975ad3e3b6e60ba31439297d23c2bea3" translate="yes" xml:space="preserve">
          <source>WebAssembly features for web embedding&lt;br/&gt;&lt;small&gt;The definition of 'instantiateStreaming()' in that specification.&lt;/small&gt;</source>
          <target state="translated">用于Web嵌入&lt;small&gt;的&lt;/small&gt; WebAssembly功能&lt;br/&gt;&lt;small&gt;该规范中&amp;ldquo; instantiateStreaming（）&amp;rdquo;的定义。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ae824fe5f92b36ac7a19a9cd12a65420167dadbd" translate="yes" xml:space="preserve">
          <source>WebAssembly.compile</source>
          <target state="translated">WebAssembly.compile</target>
        </trans-unit>
        <trans-unit id="43fad88ad2126315bb57ca98d19d962bf3b492a9" translate="yes" xml:space="preserve">
          <source>WebAssembly.compileError</source>
          <target state="translated">WebAssembly.compileError</target>
        </trans-unit>
        <trans-unit id="34d8ec4b33d53fd459ca96f6cbbd13c30f229e6a" translate="yes" xml:space="preserve">
          <source>WebAssembly.compileStreaming</source>
          <target state="translated">WebAssembly.compileStreaming</target>
        </trans-unit>
        <trans-unit id="82e21134ce3681f9a90bdc1db0e5eb9f24d232cc" translate="yes" xml:space="preserve">
          <source>WebAssembly.global</source>
          <target state="translated">WebAssembly.global</target>
        </trans-unit>
        <trans-unit id="1edea0418ecbbeb6463e43a9ebaea47bc9ab85a4" translate="yes" xml:space="preserve">
          <source>WebAssembly.global.prototype</source>
          <target state="translated">WebAssembly.global.prototype</target>
        </trans-unit>
        <trans-unit id="45a83797f41229e8b93e4efe5084b717a49b83ab" translate="yes" xml:space="preserve">
          <source>WebAssembly.instance</source>
          <target state="translated">WebAssembly.instance</target>
        </trans-unit>
        <trans-unit id="8d4f80b0cd6ef208be8c542bd4420b87d61ede60" translate="yes" xml:space="preserve">
          <source>WebAssembly.instance.exports</source>
          <target state="translated">WebAssembly.instance.exports</target>
        </trans-unit>
        <trans-unit id="5e9265aedab45b30c5294edc420c97cc3b84d442" translate="yes" xml:space="preserve">
          <source>WebAssembly.instance.prototype</source>
          <target state="translated">WebAssembly.instance.prototype</target>
        </trans-unit>
        <trans-unit id="8ce6b43e3d6d8e5b3d4aa4d85125f8a665f5668d" translate="yes" xml:space="preserve">
          <source>WebAssembly.instantiate</source>
          <target state="translated">WebAssembly.instantiate</target>
        </trans-unit>
        <trans-unit id="621ad7c574456ba2e53808c51f44aa7623868d15" translate="yes" xml:space="preserve">
          <source>WebAssembly.instantiateStreaming</source>
          <target state="translated">WebAssembly.instantiateStreaming</target>
        </trans-unit>
        <trans-unit id="add6756e22c709f1e3db76d9f1fb6a979a891d5c" translate="yes" xml:space="preserve">
          <source>WebAssembly.linkError</source>
          <target state="translated">WebAssembly.linkError</target>
        </trans-unit>
        <trans-unit id="ccee7e6f8ce34316c17b387549a88212671c782c" translate="yes" xml:space="preserve">
          <source>WebAssembly.memory</source>
          <target state="translated">WebAssembly.memory</target>
        </trans-unit>
        <trans-unit id="93c50f17da39cc76eb96f9043d7c9de3a781f068" translate="yes" xml:space="preserve">
          <source>WebAssembly.memory.buffer</source>
          <target state="translated">WebAssembly.memory.buffer</target>
        </trans-unit>
        <trans-unit id="83337e3b318ba9cfc671c9982b7b45da18ea1ada" translate="yes" xml:space="preserve">
          <source>WebAssembly.memory.grow</source>
          <target state="translated">WebAssembly.memory.grow</target>
        </trans-unit>
        <trans-unit id="77be6e46d6d3c97bf951a376f5375e390c10ba7e" translate="yes" xml:space="preserve">
          <source>WebAssembly.memory.prototype</source>
          <target state="translated">WebAssembly.memory.prototype</target>
        </trans-unit>
        <trans-unit id="c6463530cca74c798093482f9f0014b4469ce6b4" translate="yes" xml:space="preserve">
          <source>WebAssembly.module</source>
          <target state="translated">WebAssembly.module</target>
        </trans-unit>
        <trans-unit id="5531b0e53a6a2c45601f7cffb515277806290463" translate="yes" xml:space="preserve">
          <source>WebAssembly.module.customSections</source>
          <target state="translated">WebAssembly.module.customSections</target>
        </trans-unit>
        <trans-unit id="3a48fdf1101d99f3c362c3f0828b1b9200bfbbf0" translate="yes" xml:space="preserve">
          <source>WebAssembly.module.exports</source>
          <target state="translated">WebAssembly.module.exports</target>
        </trans-unit>
        <trans-unit id="898b1c94c9512fe1319541d4e3f270bb0ba29dae" translate="yes" xml:space="preserve">
          <source>WebAssembly.module.imports</source>
          <target state="translated">WebAssembly.module.imports</target>
        </trans-unit>
        <trans-unit id="a78c75b049b1efd19740f2ab050e21152de9ce6b" translate="yes" xml:space="preserve">
          <source>WebAssembly.module.prototype</source>
          <target state="translated">WebAssembly.module.prototype</target>
        </trans-unit>
        <trans-unit id="238a77457c16bb642b7e80de646e6a48d4e2a4fe" translate="yes" xml:space="preserve">
          <source>WebAssembly.runtimeError</source>
          <target state="translated">WebAssembly.runtimeError</target>
        </trans-unit>
        <trans-unit id="d600d72e7bdd7ab6f365f4edafd14dcd993907ad" translate="yes" xml:space="preserve">
          <source>WebAssembly.table</source>
          <target state="translated">WebAssembly.table</target>
        </trans-unit>
        <trans-unit id="8659a5129e7c8cfd42870513844375cf100eacf4" translate="yes" xml:space="preserve">
          <source>WebAssembly.table.get</source>
          <target state="translated">WebAssembly.table.get</target>
        </trans-unit>
        <trans-unit id="eb378d9144f06a93bdfd37f940753ecfdeb738eb" translate="yes" xml:space="preserve">
          <source>WebAssembly.table.grow</source>
          <target state="translated">WebAssembly.table.grow</target>
        </trans-unit>
        <trans-unit id="164a07186592639798c447f1f35706131a14ea34" translate="yes" xml:space="preserve">
          <source>WebAssembly.table.length</source>
          <target state="translated">WebAssembly.table.length</target>
        </trans-unit>
        <trans-unit id="d81cf07625a35b752621d8d40e32e6f85f556eae" translate="yes" xml:space="preserve">
          <source>WebAssembly.table.prototype</source>
          <target state="translated">WebAssembly.table.prototype</target>
        </trans-unit>
        <trans-unit id="5af149065d203fa1662bf61f580c35a279adb04d" translate="yes" xml:space="preserve">
          <source>WebAssembly.table.set</source>
          <target state="translated">WebAssembly.table.set</target>
        </trans-unit>
        <trans-unit id="2416ed5e027b02f2b563bc37623ac598f96e60be" translate="yes" xml:space="preserve">
          <source>WebAssembly.validate</source>
          <target state="translated">WebAssembly.validate</target>
        </trans-unit>
        <trans-unit id="c67f639aa357c713f97a2d0d5ad253e1993230fe" translate="yes" xml:space="preserve">
          <source>WebExtensions: Using eval in content scripts</source>
          <target state="translated">WebExtensions:在内容脚本中使用eval</target>
        </trans-unit>
        <trans-unit id="5046ef0a39320e7c50078df7c455984c8436b2ab" translate="yes" xml:space="preserve">
          <source>Week day: 3 letter English week day name, e.g. &quot;Sat&quot;</source>
          <target state="translated">周日。3个字母的英文星期日名称,如 &quot;Sat&quot;</target>
        </trans-unit>
        <trans-unit id="c7d252fdefad522e350a7318b0cac908ffe23769" translate="yes" xml:space="preserve">
          <source>Well-formed &lt;code&gt;JSON.stringify()&lt;/code&gt;</source>
          <target state="translated">那么形成 &lt;code&gt;JSON.stringify()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d32bb05c45281464c3faa91449c698df5bf1223" translate="yes" xml:space="preserve">
          <source>Well-formed template call site object, like &lt;code&gt;{ raw: ['foo', 'bar', 'baz'] }&lt;/code&gt;.</source>
          <target state="translated">格式正确的模板调用站点对象，例如 &lt;code&gt;{ raw: ['foo', 'bar', 'baz'] }&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a408b4011c0c8a4e5376fd1dc963eea6863eba1b" translate="yes" xml:space="preserve">
          <source>Well-known symbols</source>
          <target state="translated">著名的符号</target>
        </trans-unit>
        <trans-unit id="78d26a80af4fe87cd860276048073b0b5ce45ee7" translate="yes" xml:space="preserve">
          <source>What does &amp;ldquo;can&amp;rsquo;t access dead object&amp;rdquo; mean?</source>
          <target state="translated">&amp;ldquo;无法访问死物&amp;rdquo;是什么意思？</target>
        </trans-unit>
        <trans-unit id="8ba2b711f9288e512e60531638860df9cf5379ff" translate="yes" xml:space="preserve">
          <source>What happens if I forgot a break?</source>
          <target state="translated">如果忘了休息怎么办?</target>
        </trans-unit>
        <trans-unit id="bedd362c633647895894e24745a972d9c906fcf6" translate="yes" xml:space="preserve">
          <source>What is &quot;shallow freeze&quot;?</source>
          <target state="translated">什么是 &quot;浅冻&quot;?</target>
        </trans-unit>
        <trans-unit id="71c8a4a23b0dea390d9c49b1b0992f6d919a9595" translate="yes" xml:space="preserve">
          <source>What went wrong?</source>
          <target state="translated">出了什么问题?</target>
        </trans-unit>
        <trans-unit id="48c6e8ee5aa7c7adce0fdc952dedf8296a802518" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;Array.from&lt;/code&gt; gets an array-like which isn't an iterator, it respects holes, where &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from&lt;/code&gt; will ensure the result is dense.</source>
          <target state="translated">当 &lt;code&gt;Array.from&lt;/code&gt; 得到类似阵列的这不是一个迭代，它尊重孔，其中 &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from&lt;/code&gt; 将确保结果是致密的。</target>
        </trans-unit>
        <trans-unit id="ec8a5d8c724855c28fa7632d40a88c1d342cc931" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;Error&lt;/code&gt; is used like a function -- without &lt;code&gt;new&lt;/code&gt;, it will return an &lt;code&gt;Error&lt;/code&gt; object. Therefore, a mere call to &lt;code&gt;Error&lt;/code&gt; will produce the same output that constructing an &lt;code&gt;Error&lt;/code&gt; object via the &lt;code&gt;new&lt;/code&gt; keyword would.</source>
          <target state="translated">如果像函数一样使用 &lt;code&gt;Error&lt;/code&gt; －如果没有 &lt;code&gt;new&lt;/code&gt; ，它将返回一个 &lt;code&gt;Error&lt;/code&gt; 对象。因此，仅对 &lt;code&gt;Error&lt;/code&gt; 的调用将产生与通过 &lt;code&gt;new&lt;/code&gt; 关键字构造 &lt;code&gt;Error&lt;/code&gt; 对象相同的输出。</target>
        </trans-unit>
        <trans-unit id="27acc0bd8a67c55fd07417ba3128135f63995090" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;fill&lt;/code&gt; gets passed an object, it will copy the reference and fill the array with references to that object.</source>
          <target state="translated">当 &lt;code&gt;fill&lt;/code&gt; 通过一个对象时，它将复制引用并使用对该对象的引用填充数组。</target>
        </trans-unit>
        <trans-unit id="29972fd8e8a2506bbe3cac2f8d497bfbedee00f8" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;from&lt;/code&gt; gets an iterator, the &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;&lt;/code&gt; version first collects all the values from the iterator, then creates an instance of &lt;code&gt;|this|&lt;/code&gt; using the count, then sets the values on the instance. &lt;code&gt;Array.from&lt;/code&gt; sets each value as it gets them from the iterator then sets the length at the end.</source>
          <target state="translated">当 &lt;code&gt;from&lt;/code&gt; 从获得迭代器时， &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;&lt;/code&gt; 版本首先从迭代器收集所有值，然后创建 &lt;code&gt;|this|&lt;/code&gt; 的实例。使用计数，然后在实例上设置值。 &lt;code&gt;Array.from&lt;/code&gt; 设置每个值，因为它从迭代器中获取它们，然后在末尾设置长度。</target>
        </trans-unit>
        <trans-unit id="cff7988e78976fd1c2345be099410b3b34450896" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;return&lt;/code&gt; statement is used in a function body, the execution of the function is stopped. If specified, a given value is returned to the function caller. For example, the following function returns the square of its argument, &lt;code&gt;x&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is a number.</source>
          <target state="translated">当 &lt;code&gt;return&lt;/code&gt; 语句在函数体中使用，功能的停止执行。如果指定，给定值将返回给函数调用者。例如，以下函数返回其参数 &lt;code&gt;x&lt;/code&gt; 的平方，其中 &lt;code&gt;x&lt;/code&gt; 是数字。</target>
        </trans-unit>
        <trans-unit id="ff03fe79b461ccf577f710e872cbb9b96f8fddce" translate="yes" xml:space="preserve">
          <source>When a Symbol wrapper object is used as a property key, this object will be coerced to its wrapped symbol:</source>
          <target state="translated">当一个Symbol包装对象被用作属性键时,这个对象将被胁迫到它的包装符号。</target>
        </trans-unit>
        <trans-unit id="96b0e4e2a594c56d1b6ff5183f4309702616eff2" translate="yes" xml:space="preserve">
          <source>When a browser follows a &lt;code&gt;javascript:&lt;/code&gt; URI, it evaluates the code in the URI and then replaces the contents of the page with the returned value, unless the returned value is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;void&lt;/code&gt; operator can be used to return &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">当浏览器使用 &lt;code&gt;javascript:&lt;/code&gt; URI时，它将评估URI中的代码，然后用返回的值替换页面的内容，除非返回的值是&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。该 &lt;code&gt;void&lt;/code&gt; 操作符可以用来返回&lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;。例如：</target>
        </trans-unit>
        <trans-unit id="23bff28126820c5460b495146645f5081234cbac" translate="yes" xml:space="preserve">
          <source>When a function is called as a method of an object, its &lt;code&gt;this&lt;/code&gt; is set to the object the method is called on.</source>
          <target state="translated">当一个函数被调用作为对象的方法，其 &lt;code&gt;this&lt;/code&gt; 被设置为方法被调用的对象。</target>
        </trans-unit>
        <trans-unit id="6a47b34c61e463080f2816760a918433e9257135" translate="yes" xml:space="preserve">
          <source>When a function is called, the arguments to the call are held in the array-like &quot;variable&quot; &lt;a href=&quot;../../functions/arguments&quot;&gt;arguments&lt;/a&gt;. For example, in the call &quot;myFn(a, b, c)&quot;, the arguments within myFn's body will contain 3 array-like elements corresponding to (a, b, c). When modifying prototypes with hooks, simply pass this &amp;amp; the arguments (the call state) to the current behavior by calling apply() on the function. This pattern can be used for any prototype, such as Node.prototype, Function.prototype, etc.</source>
          <target state="translated">调用函数时，调用的参数保存在类似数组的&amp;ldquo;变量&amp;rdquo; &lt;a href=&quot;../../functions/arguments&quot;&gt;参数中&lt;/a&gt;。例如，在调用&amp;ldquo; myFn（a，b，c）&amp;rdquo;中，myFn体内的参数将包含3个与（a，b，c）对应的数组状元素。当使用钩子修改原型时，只需通过在函数上调用apply（）即可将此参数和参数（调用状态）传递给当前行为。此模式可用于任何原型，例如Node.prototype，Function.prototype等。</target>
        </trans-unit>
        <trans-unit id="9f5c86afd59f1929f2470b136a17cb9ec01bf21f" translate="yes" xml:space="preserve">
          <source>When a function is used as a constructor (with the &lt;a href=&quot;new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; keyword), its &lt;code&gt;this&lt;/code&gt; is bound to the new object being constructed.</source>
          <target state="translated">当一个函数被用作构造（具有&lt;a href=&quot;new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;的关键字），其 &lt;code&gt;this&lt;/code&gt; 势必被构造新的对象。</target>
        </trans-unit>
        <trans-unit id="827db5617a07e1bc83cbbf68125bec5e816787c3" translate="yes" xml:space="preserve">
          <source>When a function is used as an event handler, its &lt;code&gt;this&lt;/code&gt; is set to the element the event fired from (some browsers do not follow this convention for listeners added dynamically with methods other than &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot;&gt;&lt;code&gt;addEventListener()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">当一个函数被用作事件处理程序，它的 &lt;code&gt;this&lt;/code&gt; 设置为事件从发射元件（有些浏览器不遵守这个约定与其它方法相比动态添加监听器&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot;&gt; &lt;code&gt;addEventListener()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="3af1531783783ee5d0832a4b4e64b4886b45cf81" translate="yes" xml:space="preserve">
          <source>When a generator is finished, subsequent &lt;code&gt;next&lt;/code&gt; calls will not execute any of that generator's code, they will just return an object of this form: &lt;code&gt;{value: undefined, done: true}&lt;/code&gt;.</source>
          <target state="translated">当发电机完成后，后续的 &lt;code&gt;next&lt;/code&gt; 呼叫将不会执行任何该发生器的代码，他们只是将此表格的对象： &lt;code&gt;{value: undefined, done: true}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0bf258f3df79b96ae9c390090569c9b163176dca" translate="yes" xml:space="preserve">
          <source>When a non-strict function &lt;strong&gt;does&lt;/strong&gt; contain rest, default, or destructured parameters, then the values in the &lt;code&gt;arguments&lt;/code&gt; object &lt;strong&gt;do not&lt;/strong&gt; track the values of the arguments. Instead, they reflect the arguments provided when the function was called:</source>
          <target state="translated">当非严格函数&lt;strong&gt;确实&lt;/strong&gt;包含rest，default或destructed参数时， &lt;code&gt;arguments&lt;/code&gt; 对象中的值将&lt;strong&gt;不&lt;/strong&gt;跟踪参数的值。相反，它们反映了调用函数时提供的参数：</target>
        </trans-unit>
        <trans-unit id="8dac29556cd94c74fd383d38d328c4d37042fc32" translate="yes" xml:space="preserve">
          <source>When a property is marked as non-configurable, &lt;code&gt;delete&lt;/code&gt; won't have any effect, and will return &lt;code&gt;false&lt;/code&gt;. In strict mode this will raise a &lt;code&gt;SyntaxError&lt;/code&gt;.</source>
          <target state="translated">如果将某个属性标记为不可配置，则 &lt;code&gt;delete&lt;/code&gt; 无效，并且将返回 &lt;code&gt;false&lt;/code&gt; 。在严格模式下，这将引发 &lt;code&gt;SyntaxError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36615bffa2220f2be681e6f5d574bc4c7a1dc6b6" translate="yes" xml:space="preserve">
          <source>When a single, unconditional &lt;code&gt;catch&lt;/code&gt; clause is used, the &lt;code&gt;catch&lt;/code&gt; block is entered when any exception is thrown. For example, when the exception occurs in the following code, control transfers to the &lt;code&gt;catch&lt;/code&gt; clause.</source>
          <target state="translated">当使用单个无条件 &lt;code&gt;catch&lt;/code&gt; 子句时，抛出任何异常时都会进入 &lt;code&gt;catch&lt;/code&gt; 块。例如，当以下代码中发生异常时，控制权将转移到 &lt;code&gt;catch&lt;/code&gt; 子句。</target>
        </trans-unit>
        <trans-unit id="754f04a903d205e8befb7e425f8e0abae32114de" translate="yes" xml:space="preserve">
          <source>When a static or prototype method is called without a value for &lt;em&gt;this&lt;/em&gt;, the &lt;em&gt;this&lt;/em&gt; value will be &lt;code&gt;undefined&lt;/code&gt; inside the method. This behavior will be the same even if the &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; directive isn't present, because code within the &lt;code&gt;class&lt;/code&gt; body's syntactic boundary is always executed in strict mode.</source>
          <target state="translated">当静态或原型方法被称为没有一个值&lt;em&gt;这个&lt;/em&gt;时，&lt;em&gt;这个&lt;/em&gt;值将被 &lt;code&gt;undefined&lt;/code&gt; 的方法内。即使不存在 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 指令，此行为也将相同，因为 &lt;code&gt;class&lt;/code&gt; 主体的语法边界内的代码始终以严格模式执行。</target>
        </trans-unit>
        <trans-unit id="0e6fbf4c1276a4e0854143d9918e3137304eb0ee" translate="yes" xml:space="preserve">
          <source>When a value is simply returned from within a &lt;code&gt;then&lt;/code&gt; handler, it will effectively return &lt;code&gt;Promise.resolve(&amp;lt;value returned by whichever handler was called&amp;gt;)&lt;/code&gt;.</source>
          <target state="translated">当简单地从 &lt;code&gt;then&lt;/code&gt; 处理程序中返回一个值时，它将有效地返回 &lt;code&gt;Promise.resolve(&amp;lt;value returned by whichever handler was called&amp;gt;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ca4d9f32ca7e30739d42845bcfe6fe53dad17e49" translate="yes" xml:space="preserve">
          <source>When adding &lt;code&gt;'use strict';&lt;/code&gt;, the following cases will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; before the script is executing:</source>
          <target state="translated">当加上 &lt;code&gt;'use strict';&lt;/code&gt; ，以下情况将在脚本执行之前引发&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="24dea5e139e5d4c37dc76aae9b33a1b797414045" translate="yes" xml:space="preserve">
          <source>When altering the behavior of existing Object.prototype methods, consider injecting code by wrapping your extension before or after the existing logic. For example, this (untested) code will pre-conditionally execute custom logic before the built-in logic or someone else's extension is executed.</source>
          <target state="translated">当改变现有Object.prototype方法的行为时,可以考虑在现有逻辑之前或之后封装你的扩展来注入代码。例如,这段(未经测试)代码将在执行内置逻辑或别人的扩展之前预设条件执行自定义逻辑。</target>
        </trans-unit>
        <trans-unit id="f8eb1f519c9dfc61d048d60e4ec167b43b593072" translate="yes" xml:space="preserve">
          <source>When an exception is thrown in the &lt;code&gt;try&lt;/code&gt; block, &lt;em&gt;&lt;code&gt;exception_var&lt;/code&gt;&lt;/em&gt; (e.g. the &lt;code&gt;e&lt;/code&gt; in &lt;code&gt;catch (e)&lt;/code&gt;) holds the value specified by the &lt;code&gt;throw&lt;/code&gt; statement. You can use this identifier to get information about the exception that was thrown. This identifier is local to the &lt;code&gt;catch&lt;/code&gt; clause. That is, it is created when the &lt;code&gt;catch&lt;/code&gt; clause is entered, and after the &lt;code&gt;catch&lt;/code&gt; clause finishes executing, the identifier is no longer available.</source>
          <target state="translated">当一个异常在被抛出 &lt;code&gt;try&lt;/code&gt; 块，&lt;em&gt; &lt;code&gt;exception_var&lt;/code&gt; &lt;/em&gt;（如 &lt;code&gt;e&lt;/code&gt; 在 &lt;code&gt;catch (e)&lt;/code&gt; ）持有指定的值 &lt;code&gt;throw&lt;/code&gt; 声明。您可以使用此标识符来获取有关引发的异常的信息。该标识符是 &lt;code&gt;catch&lt;/code&gt; 子句的本地标识符。即，它是在输入 &lt;code&gt;catch&lt;/code&gt; 子句时创建的，并且在 &lt;code&gt;catch&lt;/code&gt; 子句完成执行之后，标识符不再可用。</target>
        </trans-unit>
        <trans-unit id="6bd2f6f2698e6164d709733fd82e7fd7e003a3eb" translate="yes" xml:space="preserve">
          <source>When an expression exists after a valid &lt;code&gt;return&lt;/code&gt; statement, a warning is given to indicate that the code after the &lt;code&gt;return&lt;/code&gt; statement is unreachable, meaning it can never be run.</source>
          <target state="translated">当在有效的 &lt;code&gt;return&lt;/code&gt; 语句之后存在表达式时，将给出警告以指示 &lt;code&gt;return&lt;/code&gt; 语句之后的代码不可访问，这意味着它将永远无法运行。</target>
        </trans-unit>
        <trans-unit id="c0a1f6e25dd4b3d3d70cae80df44a55c86d29543" translate="yes" xml:space="preserve">
          <source>When bound function is called, it calls internal method&lt;strong&gt; [[Call]]&lt;/strong&gt; on &lt;strong&gt;[[BoundTargetFunction]], &lt;/strong&gt;with following arguments &lt;strong&gt;Call(&lt;em&gt;boundThis&lt;/em&gt;, &lt;em&gt;args&lt;/em&gt;).&lt;/strong&gt; Where, &lt;strong&gt;&lt;em&gt;boundThis &lt;/em&gt;&lt;/strong&gt;is &lt;strong&gt;[[BoundThis]]&lt;/strong&gt;, &lt;em&gt;&lt;strong&gt;args &lt;/strong&gt;&lt;/em&gt;is &lt;strong&gt;[[BoundArguments]]&lt;/strong&gt; followed by the arguments passed by the function call.</source>
          <target state="translated">调用绑定函数时，它将使用以下参数&lt;strong&gt;Call（&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;boundThis&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;，&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;args&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;）&lt;/strong&gt;&lt;strong&gt;调用&lt;/strong&gt;&lt;strong&gt;[[BoundTargetFunction]]&lt;/strong&gt;上的内部方法&lt;strong&gt;[[Call]] &lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;其中，&lt;strong&gt;&lt;em&gt;boundThis&lt;/em&gt;&lt;/strong&gt;是&lt;strong&gt;[[BoundThis]]&lt;/strong&gt;，&lt;em&gt;&lt;strong&gt;args&lt;/strong&gt;&lt;/em&gt;是&lt;strong&gt;[[BoundArguments]]，&lt;/strong&gt;后跟函数调用传递的参数。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f2fa57d92f2b1d0c57672adb2010e986a6a11349" translate="yes" xml:space="preserve">
          <source>When called in a non-constructor context, &lt;code&gt;Object&lt;/code&gt; behaves identically to &lt;code&gt;new Object()&lt;/code&gt;.</source>
          <target state="translated">在非构造函数上下文中调用时， &lt;code&gt;Object&lt;/code&gt; 的行为与 &lt;code&gt;new Object()&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="480f55670d2a3d9bcb889fa0cfe5b80525aa5464" translate="yes" xml:space="preserve">
          <source>When called with a &lt;code&gt;buffer&lt;/code&gt;, and optionally a &lt;code&gt;byteOffset&lt;/code&gt; and a &lt;code&gt;length&lt;/code&gt; argument, a new typed array view is created that views the specified &lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;byteOffset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of &lt;code&gt;buffer&lt;/code&gt; is viewed; if only &lt;code&gt;length&lt;/code&gt; is omitted, the remainder of &lt;code&gt;buffer&lt;/code&gt; is viewed.</source>
          <target state="translated">当使用 &lt;code&gt;buffer&lt;/code&gt; 以及可选的 &lt;code&gt;byteOffset&lt;/code&gt; 和 &lt;code&gt;length&lt;/code&gt; 参数调用时，将创建一个新的类型化数组视图，该视图查看指定的&lt;a href=&quot;arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;。的 &lt;code&gt;byteOffset&lt;/code&gt; 和 &lt;code&gt;length&lt;/code&gt; 参数指定将通过类型数组视图被暴露的存储器范围。如果两者都省略，则查看所有 &lt;code&gt;buffer&lt;/code&gt; ；如果仅省略 &lt;code&gt;length&lt;/code&gt; ，则查看 &lt;code&gt;buffer&lt;/code&gt; 的其余部分。</target>
        </trans-unit>
        <trans-unit id="6b66b1b26da86f54f2d85e2b1b7e352401ab639d" translate="yes" xml:space="preserve">
          <source>When called with a &lt;code&gt;length&lt;/code&gt; argument, an internal array buffer is created in memory, of size &lt;em&gt;length multiplied by BYTES_PER_ELEMENT&lt;/em&gt; bytes, containing zeros.</source>
          <target state="translated">当使用 &lt;code&gt;length&lt;/code&gt; 参数调用时，会在内存中创建一个内部数组缓冲区，其大小&lt;em&gt;长度乘以BYTES_PER_ELEMENT&lt;/em&gt;字节（包含零）。</target>
        </trans-unit>
        <trans-unit id="f4a01aa6745ceb790a15b401ce2371215524e86a" translate="yes" xml:space="preserve">
          <source>When called with a &lt;code&gt;typedArray&lt;/code&gt; argument, which can be an object of any of the typed array types (such as &lt;code&gt;Int32Array&lt;/code&gt;), the &lt;code&gt;typedArray&lt;/code&gt; gets copied into a new typed array. Each value in &lt;code&gt;typedArray&lt;/code&gt; is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the &lt;code&gt;typedArray&lt;/code&gt; argument.</source>
          <target state="translated">当使用 &lt;code&gt;typedArray&lt;/code&gt; 参数（可以是任何类型化数组类型的对象（例如 &lt;code&gt;Int32Array&lt;/code&gt; ）） &lt;code&gt;typedArray&lt;/code&gt; 时，typedArray将被复制到新的类型化数组中。在将 &lt;code&gt;typedArray&lt;/code&gt; 中的每个值复制到新数组之前，都将转换为构造函数的相应类型。新类型数组的长度将与 &lt;code&gt;typedArray&lt;/code&gt; 参数的长度相同。</target>
        </trans-unit>
        <trans-unit id="65612a3309ec2c1ea8f3fd5fa8380c5307a38064" translate="yes" xml:space="preserve">
          <source>When called with an &lt;code&gt;object&lt;/code&gt; argument, a new typed array is created as if by the &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from()&lt;/code&gt; method.</source>
          <target state="translated">当使用 &lt;code&gt;object&lt;/code&gt; 参数调用时，将创建一个新的类型化数组，就像通过 &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from()&lt;/code&gt; 方法一样。</target>
        </trans-unit>
        <trans-unit id="f29dcd984b9a7fb1349ad4ddb19c41e43536ea5f" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;../../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../reflect/defineproperty&quot;&gt;&lt;code&gt;Reflect.defineProperty()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;descriptor&lt;/code&gt; passed to &lt;code&gt;defineProperty&lt;/code&gt; trap has one restriction - only following properties are usable, nonstandard properties will be ignored:</source>
          <target state="translated">调用&lt;a href=&quot;../../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../../reflect/defineproperty&quot;&gt; &lt;code&gt;Reflect.defineProperty()&lt;/code&gt; 时&lt;/a&gt;，传递给 &lt;code&gt;defineProperty&lt;/code&gt; 陷阱的 &lt;code&gt;descriptor&lt;/code&gt; 具有一个限制-仅以下属性可用，非标准属性将被忽略：</target>
        </trans-unit>
        <trans-unit id="0f1b55e9d5c398fb3c9268884017bf143b3953ab" translate="yes" xml:space="preserve">
          <source>When calling a constructor with &lt;code&gt;new&lt;/code&gt;, it's not possible to &lt;strong&gt;directly&lt;/strong&gt; use an array and &lt;code&gt;apply&lt;/code&gt; (&lt;code&gt;apply&lt;/code&gt; does a &lt;code&gt;[[Call]]&lt;/code&gt; and not a &lt;code&gt;[[Construct]]&lt;/code&gt;). However, an array can be easily used with &lt;code&gt;new&lt;/code&gt; thanks to spread syntax:</source>
          <target state="translated">使用 &lt;code&gt;new&lt;/code&gt; 调用构造函数时，无法&lt;strong&gt;直接&lt;/strong&gt;使用数组并 &lt;code&gt;apply&lt;/code&gt; （ &lt;code&gt;apply&lt;/code&gt; 会执行 &lt;code&gt;[[Call]]&lt;/code&gt; 而不是 &lt;code&gt;[[Construct]]&lt;/code&gt; ）。但是，由于具有扩展语法，因此可以轻松地将数组与 &lt;code&gt;new&lt;/code&gt; 一起使用：</target>
        </trans-unit>
        <trans-unit id="829a732fe2ba31465b1866fd100163c023907142" translate="yes" xml:space="preserve">
          <source>When checking for &lt;code&gt;Array&lt;/code&gt; instance, &lt;code&gt;Array.isArray&lt;/code&gt; is preferred over &lt;code&gt;instanceof&lt;/code&gt; because it works through &lt;code&gt;iframes&lt;/code&gt;.</source>
          <target state="translated">检查 &lt;code&gt;Array&lt;/code&gt; 实例时， &lt;code&gt;Array.isArray&lt;/code&gt; 优于 &lt;code&gt;instanceof&lt;/code&gt; ,因为它通过 &lt;code&gt;iframes&lt;/code&gt; 起作用。</target>
        </trans-unit>
        <trans-unit id="c810bbabef81f8c6d763de3d3ed3fd437b89c17b" translate="yes" xml:space="preserve">
          <source>When checking for &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, beware of the &lt;a href=&quot;../operators/comparison_operators&quot;&gt;differences between equality (==) and identity (===) operators&lt;/a&gt;, as the former performs type-conversion.</source>
          <target state="translated">当检查 &lt;code&gt;null&lt;/code&gt; 或 &lt;code&gt;undefined&lt;/code&gt; 时，请注意&lt;a href=&quot;../operators/comparison_operators&quot;&gt;相等（==）和身份（===）运算符之间&lt;/a&gt;的差异，因为前者执行类型转换。</target>
        </trans-unit>
        <trans-unit id="eb817b3ade0ac387d420c7fa20d43d45c1488402" translate="yes" xml:space="preserve">
          <source>When comparing a number and a string, the string is converted to a number value. JavaScript attempts to convert the string numeric literal to a &lt;code&gt;Number&lt;/code&gt; type value. First, a mathematical value is derived from the string numeric literal. Next, this value is rounded to nearest &lt;code&gt;Number&lt;/code&gt; type value.</source>
          <target state="translated">比较数字和字符串时，该字符串将转换为数字值。JavaScript尝试将字符串数字文字转换为 &lt;code&gt;Number&lt;/code&gt; 类型的值。首先，从字符串数字文字中得出数学值。接下来，将此值舍入为最接近的 &lt;code&gt;Number&lt;/code&gt; 类型值。</target>
        </trans-unit>
        <trans-unit id="6b998eb423464e5443bc464f2a4fa7bc4658bbe8" translate="yes" xml:space="preserve">
          <source>When comparing large numbers of strings, such as in sorting large arrays, it is better to create an &lt;a href=&quot;../collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt; object and use the function provided by its &lt;a href=&quot;../collator/compare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">比较大量字符串时，例如在对大型数组进行排序时，最好创建一个&lt;a href=&quot;../collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; &lt;/a&gt;对象并使用其&lt;a href=&quot;../collator/compare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt;属性提供的功能。</target>
        </trans-unit>
        <trans-unit id="c2ecefcafbf7143f87fe3ad4276f62e616d8be92" translate="yes" xml:space="preserve">
          <source>When copy pasting code from external sources, there might be invalid characters. Watch out!</source>
          <target state="translated">从外部来源复制粘贴代码时,可能会出现无效字符。请注意!</target>
        </trans-unit>
        <trans-unit id="92aa3f970f388cdea751a9c03b575d4726043cbf" translate="yes" xml:space="preserve">
          <source>When creating a function inline, you can pass it once, instead of being forced to either declare it twice, or create a variable for it</source>
          <target state="translated">当创建一个内联函数时,你可以只传递一次,而不是被迫声明两次,或者为它创建一个变量。</target>
        </trans-unit>
        <trans-unit id="fb29ed3782eb6e8c7b9a47c7152ab085c4ee55e4" translate="yes" xml:space="preserve">
          <source>When creating an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;../global_objects/arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; which has a length which is either negative or larger or equal to 2&lt;sup&gt;32&lt;/sup&gt;, or</source>
          <target state="translated">创建长度为负数或大于或等于2 &lt;sup&gt;32&lt;/sup&gt;的&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../global_objects/arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; 时&lt;/a&gt;，或者&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="b69e8046aa7fccd7b5d969872d4384fc6a0c4007" translate="yes" xml:space="preserve">
          <source>When creating an instance of a &lt;em&gt;TypedArray&lt;/em&gt; (e.g. &lt;code&gt;Int8Array&lt;/code&gt;), an array buffer is created internally in memory or, if an &lt;code&gt;ArrayBuffer&lt;/code&gt; object is given as constructor argument, then this is used instead. The buffer address is saved as an internal property of the instance and all the methods of %&lt;code&gt;TypedArray&lt;/code&gt;%.&lt;code&gt;prototype&lt;/code&gt;, i.e. set value and get value etc., operate on that array buffer address.</source>
          <target state="translated">当创建&lt;em&gt;TypedArray&lt;/em&gt;的实例（例如 &lt;code&gt;Int8Array&lt;/code&gt; ）时，将在内存中内部创建一个数组缓冲区，或者，如果将 &lt;code&gt;ArrayBuffer&lt;/code&gt; 对象作为构造函数参数给出，则使用它代替。缓冲区地址保存为实例和％ &lt;code&gt;TypedArray&lt;/code&gt; ％的所有方法的内部属性。 &lt;code&gt;prototype&lt;/code&gt; ，即设置值和获取值等，在该数组缓冲区地址上操作。</target>
        </trans-unit>
        <trans-unit id="848fe3152ea8cf2213725f8d8f0cb1c72c7aeff9" translate="yes" xml:space="preserve">
          <source>When creating objects with the &lt;a href=&quot;../operators/object_initializer&quot;&gt;object initializer&lt;/a&gt; syntax, a colon (&lt;code&gt;:&lt;/code&gt;) separates keys and values for the object's properties.</source>
          <target state="translated">当创建与所述对象&lt;a href=&quot;../operators/object_initializer&quot;&gt;的对象初始化&lt;/a&gt;语法，冒号（ &lt;code&gt;:&lt;/code&gt; ）分隔为对象的属性的键和值。</target>
        </trans-unit>
        <trans-unit id="811ae55de8ff23ccbb206ac9028d18485810a132" translate="yes" xml:space="preserve">
          <source>When creating your own class, JavaScript defaults to the &quot;Object&quot; tag:</source>
          <target state="translated">当创建自己的类时,JavaScript默认使用 &quot;对象 &quot;标签。</target>
        </trans-unit>
        <trans-unit id="80a35fd88284260574b82c190c6810c0f4d57809" translate="yes" xml:space="preserve">
          <source>When defining non-writable properties with e.g. &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;super&lt;/code&gt; cannot overwrite the value of the property.</source>
          <target state="translated">用&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty&lt;/code&gt; &lt;/a&gt;定义不可写属性时， &lt;code&gt;super&lt;/code&gt; 不能覆盖该属性的值。</target>
        </trans-unit>
        <trans-unit id="f8b662c2041edd35c3fb67e22f3c61773eddc7f6" translate="yes" xml:space="preserve">
          <source>When destructuring an array, you can unpack and assign the remaining part of it to a variable using the rest pattern:</source>
          <target state="translated">当重构一个数组时,你可以解包并使用 rest 模式将其剩余部分分配给一个变量。</target>
        </trans-unit>
        <trans-unit id="05d53519e191f9772c933557ce0989e9f259738b" translate="yes" xml:space="preserve">
          <source>When formatting large numbers of dates, it is better to create an &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; object and use the function provided by its &lt;a href=&quot;../datetimeformat/format&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">格式化大量日期时，最好创建一个&lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; &lt;/a&gt;对象并使用其&lt;a href=&quot;../datetimeformat/format&quot;&gt; &lt;code&gt;format&lt;/code&gt; &lt;/a&gt;属性提供的功能。</target>
        </trans-unit>
        <trans-unit id="492dc853c99f4ea76af1f43ad96a8633c1800ed2" translate="yes" xml:space="preserve">
          <source>When formatting large numbers of numbers, it is better to create a &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object and use the function provided by its &lt;a href=&quot;../numberformat/format&quot;&gt;&lt;code&gt;NumberFormat.format&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">格式化大量数字时，最好创建一个&lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;对象，并使用其&lt;a href=&quot;../numberformat/format&quot;&gt; &lt;code&gt;NumberFormat.format&lt;/code&gt; &lt;/a&gt;属性提供的功能。</target>
        </trans-unit>
        <trans-unit id="0ebdec7da01db2f6028dbcfdb1e980aa1f6f6050" translate="yes" xml:space="preserve">
          <source>When found, &lt;code&gt;separator&lt;/code&gt; is removed from the string and the substrings are returned in an array. If &lt;code&gt;separator&lt;/code&gt; is not found or is omitted, the array contains one element consisting of the entire string. If &lt;code&gt;separator&lt;/code&gt; is an empty string, &lt;code&gt;str&lt;/code&gt; is converted to an array of characters. If &lt;code&gt;separator&lt;/code&gt; appears at the beginning or end of the string, or both, the array begins, ends, or both begins and ends, respectively, with an empty string. Thus, if the string consists solely of one instance of &lt;code&gt;separator&lt;/code&gt;, the array consists of two empty strings.</source>
          <target state="translated">找到后，将从字符串中删除 &lt;code&gt;separator&lt;/code&gt; ，并将子字符串返回到数组中。如果找不到或省略了 &lt;code&gt;separator&lt;/code&gt; ，则数组包含一个由整个字符串组成的元素。如果 &lt;code&gt;separator&lt;/code&gt; 为空字符串，则 &lt;code&gt;str&lt;/code&gt; 将转换为字符数组。如果 &lt;code&gt;separator&lt;/code&gt; 出现在字符串的开头或结尾（或同时出现在字符串的开头和结尾），则数组分别以空字符串开头，结尾或两端都出现。因此，如果字符串仅包含一个 &lt;code&gt;separator&lt;/code&gt; 实例，则数组包含两个空字符串。</target>
        </trans-unit>
        <trans-unit id="7f7675777c0bfc04100fd6e62d73b4f740f908cb" translate="yes" xml:space="preserve">
          <source>When functions are used only once, a common pattern is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE (Immediately Invokable Function Expression)&lt;/a&gt;.</source>
          <target state="translated">当函数仅使用一次时，常见模式是&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE（立即调用函数表达式）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0c2581f5a3001b3639145bb5073ddf3f10eed2e6" translate="yes" xml:space="preserve">
          <source>When in strict mode, if &lt;code&gt;delete&lt;/code&gt; is used on a direct reference to a variable, a function argument or a function name, it will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;</source>
          <target state="translated">在严格模式下，如果在直接引用变量，函数参数或函数名称时使用 &lt;code&gt;delete&lt;/code&gt; ，它将抛出&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;&lt;strong&gt;。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="08b109f3f8cbdaee42f58d11a43dafe9001d0559" translate="yes" xml:space="preserve">
          <source>When inspecting this code in an editor like Vim, you can see that there is actually a &lt;a href=&quot;https://en.wikipedia.org/wiki/Zero-width_space&quot;&gt;zero-width space (ZWSP) (U+200B)&lt;/a&gt; character.</source>
          <target state="translated">在像Vim这样的编辑器中检查此代码时，您可以看到实际上存在一个&lt;a href=&quot;https://en.wikipedia.org/wiki/Zero-width_space&quot;&gt;零宽度空格（ZWSP）（U + 200B）&lt;/a&gt;字符。</target>
        </trans-unit>
        <trans-unit id="47b550357098926dbffddda8f68fe6d4139f423d" translate="yes" xml:space="preserve">
          <source>When invoking &lt;code&gt;Reflect.construct()&lt;/code&gt;, on the other hand, the &lt;code&gt;new.target&lt;/code&gt; operator will point to the &lt;code&gt;newTarget&lt;/code&gt; parameter if supplied, or &lt;code&gt;target&lt;/code&gt; if not.</source>
          <target state="translated">另一方面，在调用 &lt;code&gt;Reflect.construct()&lt;/code&gt; 时， &lt;code&gt;new.target&lt;/code&gt; 运算符将指向 &lt;code&gt;newTarget&lt;/code&gt; 参数（如果提供），或者指向 &lt;code&gt;target&lt;/code&gt; (如果没有提供）。</target>
        </trans-unit>
        <trans-unit id="318d5052adfc72cec8acd2647d9cfc464410f7b1" translate="yes" xml:space="preserve">
          <source>When memory is shared, multiple threads can read and write the same data in memory. Atomic operations make sure that predictable values are written and read, that operations are finished before the next operation starts and that operations are not interrupted.</source>
          <target state="translated">当内存共享时,多个线程可以读写内存中的相同数据。原子操作可以确保可预测的值被写入和读取,确保在下一个操作开始之前完成操作,确保操作不被中断。</target>
        </trans-unit>
        <trans-unit id="fa309baaca700a3857e2ce7234ebbe442b4df0d5" translate="yes" xml:space="preserve">
          <source>When methods like &lt;a href=&quot;../global_objects/object/create&quot;&gt;&lt;code&gt;Object.create()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../global_objects/object/defineproperties&quot;&gt;&lt;code&gt;Object.defineProperties()&lt;/code&gt;&lt;/a&gt; are used, the optional descriptor parameter expects a property descriptor object. Providing no object (like just a number), will throw an error:</source>
          <target state="translated">当使用诸如&lt;a href=&quot;../global_objects/object/create&quot;&gt; &lt;code&gt;Object.create()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../global_objects/object/defineproperties&quot;&gt; &lt;code&gt;Object.defineProperties()&lt;/code&gt; 之&lt;/a&gt;类的方法时，可选的描述符参数需要一个属性描述符对象。不提供任何对象（如仅提供数字）将引发错误：</target>
        </trans-unit>
        <trans-unit id="d364ac202798bb31f0c977819b5d92e8610d07cd" translate="yes" xml:space="preserve">
          <source>When parsing data that has been serialized to JSON, integer values falling out of this range can be expected to become corrupted when JSON parser coerces them to &lt;code&gt;Number&lt;/code&gt; type. Using &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; instead is a possible workaround.</source>
          <target state="translated">解析已序列化为JSON的数据时，当JSON解析器将其强制为 &lt;code&gt;Number&lt;/code&gt; 类型时，超出此范围的整数值可能会损坏。使用&lt;a href=&quot;string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;，而不是一个可行的解决方法。</target>
        </trans-unit>
        <trans-unit id="17cf892247e81202f0bada93b8854310ab008b00" translate="yes" xml:space="preserve">
          <source>When providing less than two arguments to &lt;code&gt;Date.UTC&lt;/code&gt;, ECMAScript 2017 requires that &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned. Engines that weren't supporting this behavior have been updated (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1050755&quot;&gt;bug 1050755&lt;/a&gt;, &lt;a href=&quot;https://github.com/tc39/ecma262/pull/642&quot;&gt;ecma-262 #642&lt;/a&gt;).</source>
          <target state="translated">当为 &lt;code&gt;Date.UTC&lt;/code&gt; 提供少于两个参数时，ECMAScript 2017要求返回&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;。不支持此行为的引擎已更新（请参见&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1050755&quot;&gt;错误1050755&lt;/a&gt;，&lt;a href=&quot;https://github.com/tc39/ecma262/pull/642&quot;&gt;ecma-262＃642&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="705157d0288f1c597f7b2054e4f41d4043893109" translate="yes" xml:space="preserve">
          <source>When returning an immediately-resolved or immediately-rejected Promise, you do not need to create a &lt;em&gt;new Promise(...)&lt;/em&gt; and act on it.</source>
          <target state="translated">返回立即解决或立即拒绝的Promise时，不需要创建&lt;em&gt;新的Promise（...）&lt;/em&gt;并对其执行操作。</target>
        </trans-unit>
        <trans-unit id="39e7f455bb8934a617622f9442ad853c45f36ed3" translate="yes" xml:space="preserve">
          <source>When setting &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, you can disable the default behavior:</source>
          <target state="translated">将 &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; 时，可以禁用默认行为：</target>
        </trans-unit>
        <trans-unit id="1887c5a817a63cdf0106ba8e6c59d88c978dcf67" translate="yes" xml:space="preserve">
          <source>When setting a property on a JavaScript array when the property is a valid array index and that index is outside the current bounds of the array, the engine will update the array's &lt;a href=&quot;array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property accordingly:</source>
          <target state="translated">当属性是有效的数组索引并且该索引在数组的当前边界之外时，在JavaScript数组上设置属性时，引擎将相应地更新数组的&lt;a href=&quot;array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;属性：</target>
        </trans-unit>
        <trans-unit id="57535b5e85c2dbd89e64e6deb3f355e48f2a80a6" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;delete&lt;/code&gt; operator removes an array element, that element is no longer in the array. In the following example, &lt;code&gt;trees[3]&lt;/code&gt; is removed with &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="translated">当 &lt;code&gt;delete&lt;/code&gt; 运算符删除数组元素时，该元素不再在数组中。在以下示例中，使用 &lt;code&gt;delete&lt;/code&gt; 删除 &lt;code&gt;trees[3]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="387f53946c3f02fb3f763d5683ceceafff765bc0" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;writable&lt;/code&gt; property attribute is set to &lt;code&gt;false&lt;/code&gt;, the property is said to be &amp;ldquo;non-writable&amp;rdquo;. It cannot be reassigned.</source>
          <target state="translated">当 &lt;code&gt;writable&lt;/code&gt; 属性属性设置为 &lt;code&gt;false&lt;/code&gt; 时，该属性被称为&amp;ldquo;不可写&amp;rdquo;。无法重新分配。</target>
        </trans-unit>
        <trans-unit id="a559e150cbf22fde3fe6dab539455a42466f2955" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;y&lt;/code&gt; flag is used with a pattern, ^ always matches only at the beginning of the input, or (if &lt;code&gt;multiline&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;) at the beginning of a line.</source>
          <target state="translated">当 &lt;code&gt;y&lt;/code&gt; 标志与模式一起使用时，^始终仅在输入的开头匹配，或者（如果 &lt;code&gt;multiline&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ）在行的开头匹配。</target>
        </trans-unit>
        <trans-unit id="a60bd3ccf8e7f021b88c16995b206f62e8367433" translate="yes" xml:space="preserve">
          <source>When the code &lt;code&gt;new &lt;em&gt;Foo&lt;/em&gt;(...)&lt;/code&gt; is executed, the following things happen:</source>
          <target state="translated">当执行代码 &lt;code&gt;new &lt;em&gt;Foo&lt;/em&gt;(...)&lt;/code&gt; 时，将发生以下情况：</target>
        </trans-unit>
        <trans-unit id="6cc1669e849a2afc2d80b8b86eae5b66f0b20463" translate="yes" xml:space="preserve">
          <source>When the code is called from an inline &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers&quot;&gt;on-event handler&lt;/a&gt;, its &lt;code&gt;this&lt;/code&gt; is set to the DOM element on which the listener is placed:</source>
          <target state="translated">当代码从行内称为&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers&quot;&gt;上事件处理器&lt;/a&gt;，其 &lt;code&gt;this&lt;/code&gt; 设置，以在其上收听者被放置的DOM元素：</target>
        </trans-unit>
        <trans-unit id="2629463712db402b4d6319141b2f344e9ce0b9e3" translate="yes" xml:space="preserve">
          <source>When the debugger is invoked, execution is paused at the debugger statement. It is like a breakpoint in the script source.</source>
          <target state="translated">当调试器被调用时,执行会在调试器语句处暂停。这就像脚本源码中的断点一样。</target>
        </trans-unit>
        <trans-unit id="3bcb4cb5648375ec9f7e3f3cc35cdcd149cd783e" translate="yes" xml:space="preserve">
          <source>When the parameter is a string or a number, it is implicitly converted to a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; by using new RegExp(obj). If it is a positive number with a positive sign,the RegExp() method will ignore the positive sign.</source>
          <target state="translated">当参数是字符串或数字时，使用新的RegExp（obj）将其隐式转换为&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;。如果它是带正号的正数，则RegExp（）方法将忽略正号。</target>
        </trans-unit>
        <trans-unit id="cfc04270465eaa2ab7cafac9054481d593a66d9f" translate="yes" xml:space="preserve">
          <source>When the property already exists, &lt;code&gt;Object.defineProperty()&lt;/code&gt; attempts to modify the property according to the values in the descriptor and the object's current configuration. If the old descriptor had its &lt;code&gt;configurable&lt;/code&gt; attribute set to &lt;code&gt;false&lt;/code&gt; the property is said to be &amp;ldquo;non-configurable&amp;rdquo;. It is not possible to change any attribute of a non-configurable accessor property. For data properties, it is possible to modify the value if the property is writable, and it is possible to change &lt;code&gt;writable&lt;/code&gt; attribute from &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. It is not possible to switch between data and accessor property types when the property is non-configurable.</source>
          <target state="translated">当属性已经存在时， &lt;code&gt;Object.defineProperty()&lt;/code&gt; 尝试根据描述符中的值和对象的当前配置来修改属性。如果旧描述符的可 &lt;code&gt;configurable&lt;/code&gt; 属性设置为 &lt;code&gt;false&lt;/code&gt; ,则该属性被称为&amp;ldquo;不可配置&amp;rdquo;。无法更改不可配置访问器属性的任何属性。对于数据属性，如果该属性为可写，则可以修改该值，并且可以将 &lt;code&gt;writable&lt;/code&gt; 属性从 &lt;code&gt;true&lt;/code&gt; 更改为 &lt;code&gt;false&lt;/code&gt; 。当属性不可配置时，无法在数据和访问器属性类型之间切换。</target>
        </trans-unit>
        <trans-unit id="1a0af14f4dca672aa5d249b81bc48c6f25510017" translate="yes" xml:space="preserve">
          <source>When the property specified doesn't exist in the object, &lt;code&gt;Object.defineProperty()&lt;/code&gt; creates a new property as described. Fields may be omitted from the descriptor, and default values for those fields are inputted.</source>
          <target state="translated">当对象中不存在指定的属性时， &lt;code&gt;Object.defineProperty()&lt;/code&gt; 将创建一个新属性，如所述。可以从描述符中省略字段，并输入这些字段的默认值。</target>
        </trans-unit>
        <trans-unit id="087467fd12fae510a1ec18ea91d63885ac3afc9c" translate="yes" xml:space="preserve">
          <source>When the regular expression &lt;code&gt;&lt;a href=&quot;../global_objects/regexp/exec&quot;&gt; exec()&lt;/a&gt;&lt;/code&gt; method finds a match, it returns an array containing first the entire matched portion of the string and then the portions of the string that matched each parenthesized group in the regular expression. Destructuring assignment allows you to unpack the parts out of this array easily, ignoring the full match if it is not needed.</source>
          <target state="translated">当正则表达式 &lt;code&gt;&lt;a href=&quot;../global_objects/regexp/exec&quot;&gt; exec()&lt;/a&gt;&lt;/code&gt; 方法找到匹配项时，它将返回一个数组，该数组首先包含字符串的整个匹配部分，然后包含与正则表达式中每个括号组匹配的字符串部分。通过解构分配，您可以轻松地从该阵列中拆开零件，如果不需要，则可以忽略完整匹配。</target>
        </trans-unit>
        <trans-unit id="a5c3c66a9b8e5a4d0b74e86b8563917a7c08d6bf" translate="yes" xml:space="preserve">
          <source>When they are not called, the &lt;a href=&quot;../global_objects/function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; object corresponding to the generator is callable, but not iterable. Calling a generator produces an iterable object which will iterate over the values yielded during the execution of the generator.</source>
          <target state="translated">不调用它们时，与生成器相对应的&lt;a href=&quot;../global_objects/function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;对象是可调用的，但不可迭代。调用生成器会生成一个可迭代的对象，该对象将迭代生成器执行期间产生的值。</target>
        </trans-unit>
        <trans-unit id="319e3720cc9a9f1d01ef704bf7acec851d5d0d30" translate="yes" xml:space="preserve">
          <source>When this error is thrown, a function (on a given object), is called with a &lt;code&gt;this&lt;/code&gt; not corresponding to the type expected by the function.</source>
          <target state="translated">当引发此错误，一个功能（在给定对象上），被称为与 &lt;code&gt;this&lt;/code&gt; 不对应于由所述函数预期的类型。</target>
        </trans-unit>
        <trans-unit id="5005009a62d6b2c8fb75f575f48e1f72feac063a" translate="yes" xml:space="preserve">
          <source>When trying to convert a symbol to a number, a &lt;a href=&quot;typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be thrown</source>
          <target state="translated">尝试将符号转换为数字时，将引发&lt;a href=&quot;typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ebab11c3b76ef7c9db582ecfd8e0f912e785d3fe" translate="yes" xml:space="preserve">
          <source>When type conversion is involved in the comparison (i.e., non&amp;ndash;strict comparison), JavaScript converts the types &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../global_objects/object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; operands as follows:</source>
          <target state="translated">当比较中涉及类型转换（即非严格比较）时，JavaScript会如下转换类型&lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../global_objects/number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../global_objects/boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../global_objects/object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;操作数：</target>
        </trans-unit>
        <trans-unit id="afd7d7347380f1fa643c12c7547aa4c5e79fa764" translate="yes" xml:space="preserve">
          <source>When used in a constructor, the &lt;code&gt;super&lt;/code&gt; keyword appears alone and must be used before the &lt;code&gt;this&lt;/code&gt; keyword is used. The &lt;code&gt;super&lt;/code&gt; keyword can also be used to call functions on a parent object.</source>
          <target state="translated">在构造函数中使用时， &lt;code&gt;super&lt;/code&gt; 关键字单独出现，并且必须在使用 &lt;code&gt;this&lt;/code&gt; 关键字之前使用。该 &lt;code&gt;super&lt;/code&gt; 关键字也可以用于调用一个父对象上的功能。</target>
        </trans-unit>
        <trans-unit id="f712e951149a1c2d3999b5061947a25f6b868c61" translate="yes" xml:space="preserve">
          <source>When used inside a block, &lt;code&gt;let&lt;/code&gt; limits the variable's scope to that block. Note the difference between &lt;code&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/code&gt;whose scope is inside the function where it is declared.</source>
          <target state="translated">在块内使用时， &lt;code&gt;let&lt;/code&gt; 该变量的作用域限制在该块内。请注意 &lt;code&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/code&gt; 之间的区别，&lt;strong&gt;var&lt;/strong&gt;的范围在声明它的函数内部。</target>
        </trans-unit>
        <trans-unit id="f9467ce136820a553a7aaec6bce40abdafb41f43" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;../../functions/get&quot;&gt;get&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../functions/set&quot;&gt;set&lt;/a&gt;&lt;/code&gt; accessor properties, &quot;get&quot; or &quot;set&quot; will appear in the function name.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../../functions/get&quot;&gt;get&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../../functions/set&quot;&gt;set&lt;/a&gt;&lt;/code&gt; 访问器属性时，&amp;ldquo; get&amp;rdquo;或&amp;ldquo; set&amp;rdquo;将出现在函数名称中。</target>
        </trans-unit>
        <trans-unit id="29a753190ac6f69275fd35b3c2e97785d44a71a1" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;get&lt;/code&gt; the property will be defined on the prototype of the object while using &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; the property will be defined on the instance it is applied to.</source>
          <target state="translated">使用 &lt;code&gt;get&lt;/code&gt; 时，将在对象的原型上定义属性，而使用&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; 时&lt;/a&gt;，将在应用该实例的实例上定义属性。</target>
        </trans-unit>
        <trans-unit id="79f782e6d1b111d00aeddc1a8495db95fefe9ba9" translate="yes" xml:space="preserve">
          <source>When using an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;immediately-invoked function expression&lt;/a&gt;, &lt;code&gt;void&lt;/code&gt; can be used to force the &lt;code&gt;function&lt;/code&gt; keyword to be treated as an expression instead of a declaration.</source>
          <target state="translated">使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;立即调用的函数表达式时&lt;/a&gt;，可以使用 &lt;code&gt;void&lt;/code&gt; 强制将 &lt;code&gt;function&lt;/code&gt; 关键字视为表达式而不是声明。</target>
        </trans-unit>
        <trans-unit id="3447b0df5a2bb4efa20d51082a662db9689e4857" translate="yes" xml:space="preserve">
          <source>When using an expression after a &lt;a href=&quot;../statements/return&quot;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/a&gt; statement, or</source>
          <target state="translated">在&lt;a href=&quot;../statements/return&quot;&gt; &lt;code&gt;return&lt;/code&gt; &lt;/a&gt;语句后使用表达式时，或</target>
        </trans-unit>
        <trans-unit id="2ffcaf630a6cae5f82984368d904e49fb3e9bb05" translate="yes" xml:space="preserve">
          <source>When using loose equality, &lt;code&gt;Object(sym) == sym&lt;/code&gt; returns &lt;code&gt;true.&lt;/code&gt;</source>
          <target state="translated">使用宽松相等时， &lt;code&gt;Object(sym) == sym&lt;/code&gt; 返回 &lt;code&gt;true.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="17c84255cf6872fb9cc469addc43305bdcbef3ea" translate="yes" xml:space="preserve">
          <source>When using spread syntax for function calls, be aware of the possibility of exceeding the JavaScript engine's argument length limit. See &lt;a href=&quot;../global_objects/function/apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">将扩展语法用于函数调用时，请注意可能会超出JavaScript引擎的参数长度限制。有关更多详细信息，请参见&lt;a href=&quot;../global_objects/function/apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ed0da73808cc10bec7e47688c7615197b865309b" translate="yes" xml:space="preserve">
          <source>When using the constructor function, the normal string escape rules (preceding special characters with \ when included in a string) are necessary. For example, the following are equivalent:</source>
          <target state="translated">当使用构造函数时,一般的字符串转义规则是必要的(当字符串中包含特殊字符时,前面用\)。例如,以下是等价的。</target>
        </trans-unit>
        <trans-unit id="3460e508ab4b64118656a7efb81a83603c0b6db5" translate="yes" xml:space="preserve">
          <source>When using the same name for your properties, the second property will overwrite the first.</source>
          <target state="translated">当您的属性使用相同的名称时,第二个属性将覆盖第一个属性。</target>
        </trans-unit>
        <trans-unit id="33984de66b5bb20ffd47563386578d56f50f5436" translate="yes" xml:space="preserve">
          <source>When working with &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/typedarray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; objects:</source>
          <target state="translated">使用&lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../global_objects/typedarray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;对象时：</target>
        </trans-unit>
        <trans-unit id="19bdd0d88847615a8145c6cf9a1fa4adb01c44ac" translate="yes" xml:space="preserve">
          <source>When working with &lt;a href=&quot;../global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../global_objects/set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; objects:</source>
          <target state="translated">使用&lt;a href=&quot;../global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../global_objects/set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;对象时：</target>
        </trans-unit>
        <trans-unit id="686da1c39803b563b2ef8e66425ba86021bf74b5" translate="yes" xml:space="preserve">
          <source>When you calculate log(1 + x), you should get an answer very close to x, if x is small (that's why these are called 'natural' logarithms). If you calculate Math.log(1 + 1.1111111111e-15) you should get an answer close to 1.1111111111e-15. Instead, you will end up taking the logarithm of 1.00000000000000111022 (the roundoff is in binary so sometimes it gets ugly), so you get the answer 1.11022...e-15, with only 3 correct digits. If, instead, you calculate Math.log1p(1.1111111111e-15) you will get a much more accurate answer 1.1111111110999995e-15 with 15 correct digits of precision (actually 16 in this case).</source>
          <target state="translated">当你计算log(1+x)时,如果x很小,你应该得到一个非常接近x的答案(这就是为什么这些被称为 &quot;自然 &quot;对数的原因)。如果你计算Math.log(1+1.1111111111e-15),你应该得到一个接近1.1111111111e-15的答案。相反,你最终会取1.00000000000000111022的对数(四舍五入是二进制的,所以有时会变得很丑陋),所以你得到的答案是1.11022...e-15,只有3位正确的数字。如果,你改用Math.log1p(1.1111111111e-15)计算,你将得到更准确的答案1.1111111110999995e-15,有15位正确的数字精度(本例中实际是16位)。</target>
        </trans-unit>
        <trans-unit id="80d8655936d1748df51f6b239fa180d3464dc500" translate="yes" xml:space="preserve">
          <source>When you delete an array element, the array length is not affected. This holds even if you delete the last element of the array.</source>
          <target state="translated">当你删除一个数组元素时,数组的长度不受影响。即使删除了数组中的最后一个元素也是如此。</target>
        </trans-unit>
        <trans-unit id="c15351818da2666a4e29a64c0d9f7ec83a1866be" translate="yes" xml:space="preserve">
          <source>When you specify size as an integer, you set the font size of &lt;code&gt;str&lt;/code&gt; to one of the 7 defined sizes. When you specify &lt;code&gt;size&lt;/code&gt; as a string such as &quot;-2&quot;, you adjust the font size of &lt;code&gt;str&lt;/code&gt; relative to the size set in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/basefont&quot;&gt;&lt;code&gt;&amp;lt;basefont&amp;gt;&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">当将size指定为整数时，将 &lt;code&gt;str&lt;/code&gt; 的字体大小设置为7个定义的大小之一。当将 &lt;code&gt;size&lt;/code&gt; 指定为字符串（例如&amp;ldquo; -2&amp;rdquo;）时，可以相对于&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/basefont&quot;&gt; &lt;code&gt;&amp;lt;basefont&amp;gt;&lt;/code&gt; &lt;/a&gt;标记中设置的大小来调整 &lt;code&gt;str&lt;/code&gt; 的字体大小。</target>
        </trans-unit>
        <trans-unit id="a18a6ca68a9288c20e06bf89d15dd637d138a023" translate="yes" xml:space="preserve">
          <source>When you want to know whether a pattern is found and also its index in a string use &lt;code&gt;search()&lt;/code&gt; (if you only want to know if it exists, use the similar &lt;a href=&quot;../regexp/test&quot;&gt;&lt;code&gt;test()&lt;/code&gt;&lt;/a&gt; method on the RegExp prototype, which returns a boolean); for more information (but slower execution) use &lt;a href=&quot;match&quot;&gt;&lt;code&gt;match()&lt;/code&gt;&lt;/a&gt; (similar to the regular expression &lt;a href=&quot;../regexp/exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; method).</source>
          <target state="translated">当您想知道是否找到了模式，以及它在字符串中的索引时，请使用 &lt;code&gt;search()&lt;/code&gt; （如果您仅想知道模式是否存在，请对RegExp原型使用类似的&lt;a href=&quot;../regexp/test&quot;&gt; &lt;code&gt;test()&lt;/code&gt; &lt;/a&gt;方法，该方法返回一个布尔值）；有关更多信息（但执行速度较慢），请使用&lt;a href=&quot;match&quot;&gt; &lt;code&gt;match()&lt;/code&gt; &lt;/a&gt;（类似于正则表达式&lt;a href=&quot;../regexp/exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt;方法）。</target>
        </trans-unit>
        <trans-unit id="867516006e8c5943a9ddfc89e12e0cded7a1cf80" translate="yes" xml:space="preserve">
          <source>Whenever an object needs to be iterated (such as at the beginning of a &lt;code&gt;for..of&lt;/code&gt; loop), its &lt;code&gt;@@iterator&lt;/code&gt; method is called with no arguments, and the returned &lt;strong&gt;iterator&lt;/strong&gt; is used to obtain the values to be iterated.</source>
          <target state="translated">每当需要迭代的对象时（例如，在 &lt;code&gt;for..of&lt;/code&gt; 循环的开头），都将调用其 &lt;code&gt;@@iterator&lt;/code&gt; 方法（不带参数），并使用返回的&lt;strong&gt;迭代器&lt;/strong&gt;获取要迭代的值。</target>
        </trans-unit>
        <trans-unit id="71630400b044329dfae152c34f0268632c070991" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;&lt;em&gt;X&lt;/em&gt;&lt;/code&gt; is a letter from A - Z. Matches a control character in a string.</source>
          <target state="translated">其中 &lt;code&gt;&lt;em&gt;X&lt;/em&gt;&lt;/code&gt; 是从A到Z的字母。匹配字符串中的控制字符。</target>
        </trans-unit>
        <trans-unit id="3f255ecabd3bef11937b3f7fb0d9d2368dc050af" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; is 0 or a positive integer, &lt;code&gt;&lt;em&gt;m&lt;/em&gt;&lt;/code&gt; is a positive integer, and &lt;code&gt;&lt;em&gt;m&lt;/em&gt;&lt;/code&gt; &amp;gt; &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt;. Matches at least &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; and at most &lt;code&gt;&lt;em&gt;m&lt;/em&gt;&lt;/code&gt; occurrences of the preceding item &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">其中 &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; 为0或正整数， &lt;code&gt;&lt;em&gt;m&lt;/em&gt;&lt;/code&gt; 为正整数，且 &lt;code&gt;&lt;em&gt;m&lt;/em&gt;&lt;/code&gt; &amp;gt; &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; 。至少匹配 &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; 个和最多 &lt;code&gt;&lt;em&gt;m&lt;/em&gt;&lt;/code&gt; 个先前项&lt;em&gt;x的出现&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2dd5455bef555b5b0b3e7efe6f4b5ae33fbac6a2" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; is a positive integer less than 100, inserts the &lt;em&gt;n&lt;/em&gt;th parenthesized submatch string, provided the first argument was a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object. Note that this is 1-indexed.</source>
          <target state="translated">其中 &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; 是小于100的正整数，如果第一个参数是&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;对象，则插入第&lt;em&gt;n&lt;/em&gt;个带括号的子匹配字符串。请注意，这是1索引的。</target>
        </trans-unit>
        <trans-unit id="1812b5f46dfcff7a44c9cfa097447796fd8e3cfc" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; is a positive integer. A back reference to the last substring matching the n parenthetical in the regular expression (counting left parentheses).</source>
          <target state="translated">其中 &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; 是一个正整数。对正则表达式中与n括号匹配的最后一个子字符串的反向引用（计算左括号）。</target>
        </trans-unit>
        <trans-unit id="7bceea1e069869169d0efdb56f441d571c8ffe5e" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; is a positive integer. Matches at least &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; occurrences of the preceding item &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">其中 &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; 是一个正整数。至少匹配 &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; 个在前项&lt;em&gt;x的出现&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="4b3f8425b2a1b619ae26d6b4ae163bc65c3a21f4" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; is a positive integer. Matches exactly &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; occurrences of the preceding item &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">其中 &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; 是一个正整数。精确匹配前一项&lt;em&gt;x的&lt;/em&gt; &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; 次出现。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="37effed155b4207aae9cc3a7d18b9a4dc29ae71d" translate="yes" xml:space="preserve">
          <source>Where a function uses the &lt;code&gt;this&lt;/code&gt; keyword in its body, its value can be bound to a particular object in the call using the &lt;code&gt;call()&lt;/code&gt; or apply() methods which all functions inherit from &lt;a href=&quot;../global_objects/function/prototype&quot;&gt;&lt;code&gt;Function.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">如果函数在其主体中使用 &lt;code&gt;this&lt;/code&gt; 关键字，则可以使用所有函数都从&lt;a href=&quot;../global_objects/function/prototype&quot;&gt; &lt;code&gt;Function.prototype&lt;/code&gt; &lt;/a&gt;继承的 &lt;code&gt;call()&lt;/code&gt; 或apply（）方法将其值绑定到调用中的特定对象。</target>
        </trans-unit>
        <trans-unit id="f5e4dc4886ba24b6f81354e1d8f9bde7a940d54a" translate="yes" xml:space="preserve">
          <source>Where to find JavaScript information</source>
          <target state="translated">哪里可以找到JavaScript信息</target>
        </trans-unit>
        <trans-unit id="d43e3c903d4f368fc30e7cdc0717701a33761e92" translate="yes" xml:space="preserve">
          <source>Where's Walden? &amp;raquo; New ES5 strict mode requirement: function statements not at top level of a program or function are prohibited</source>
          <target state="translated">瓦尔登在哪里？&amp;raquo;新的ES5严格模式要求：禁止不在程序或函数顶层的函数语句</target>
        </trans-unit>
        <trans-unit id="60519118bfec546cfa6ce32bb8e7eb898a9cd2e6" translate="yes" xml:space="preserve">
          <source>Where's Walden? &amp;raquo; New ES5 strict mode support: new vars created by strict mode eval code are local to that code only</source>
          <target state="translated">瓦尔登在哪里？&amp;raquo;新的ES5严格模式支持：严格模式评估代码创建的新var仅在该代码本地</target>
        </trans-unit>
        <trans-unit id="7faeb6d51b138f8ac67520da55893e0368265736" translate="yes" xml:space="preserve">
          <source>Where's Walden? &amp;raquo; New ES5 strict mode support: now with poison pills!</source>
          <target state="translated">瓦尔登在哪里？ &amp;raquo;新的ES5严格模式支持：现在带有毒药！</target>
        </trans-unit>
        <trans-unit id="6580cdd13ea0c2bad7b24f51862d62bfcba11361" translate="yes" xml:space="preserve">
          <source>Whereas the &lt;a href=&quot;assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; method will only copy enumerable and own properties from a source object to a target object, you are able to use this method and &lt;a href=&quot;create&quot;&gt;&lt;code&gt;Object.create()&lt;/code&gt;&lt;/a&gt; for a shallow copy between two unknown objects:</source>
          <target state="translated">尽管&lt;a href=&quot;assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt;方法只能将可枚举的属性和拥有的属性从源对象复制到目标对象，但是您可以使用此方法和&lt;a href=&quot;create&quot;&gt; &lt;code&gt;Object.create()&lt;/code&gt; &lt;/a&gt;在两个未知对象之间进行浅表复制：</target>
        </trans-unit>
        <trans-unit id="17c65bccc706b2a3bb203d701cb4fbc23b67560e" translate="yes" xml:space="preserve">
          <source>Whether numeric collation should be used, such that &quot;1&quot; &amp;lt; &quot;2&quot; &amp;lt; &quot;10&quot;. Possible values are &lt;code&gt;&quot;true&quot;&lt;/code&gt; and &lt;code&gt;&quot;false&quot;&lt;/code&gt;. This option can be set through an &lt;code&gt;options&lt;/code&gt; property or through a Unicode extension key; if both are provided, the &lt;code&gt;options&lt;/code&gt; property takes precedence.</source>
          <target state="translated">是否应使用数字排序规则，例如&amp;ldquo; 1&amp;rdquo; &amp;lt;&amp;ldquo; 2&amp;rdquo; &amp;lt;&amp;ldquo; 10&amp;rdquo;。可能的值为 &lt;code&gt;&quot;true&quot;&lt;/code&gt; 和 &lt;code&gt;&quot;false&quot;&lt;/code&gt; 。可以通过 &lt;code&gt;options&lt;/code&gt; 属性或Unicode扩展键设置此选项。如果两者都提供，则 &lt;code&gt;options&lt;/code&gt; 属性具有优先权。</target>
        </trans-unit>
        <trans-unit id="235d116c6a8f3d814b3348ee5905e2bcafe2d8c9" translate="yes" xml:space="preserve">
          <source>Whether numeric collation should be used, such that &quot;1&quot; &amp;lt; &quot;2&quot; &amp;lt; &quot;10&quot;. Possible values are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;; the default is &lt;code&gt;false&lt;/code&gt;. This option can be set through an &lt;code&gt;options&lt;/code&gt; property or through a Unicode extension key; if both are provided, the &lt;code&gt;options&lt;/code&gt; property takes precedence. Implementations are not required to support this property.</source>
          <target state="translated">是否应使用数字排序规则，例如&amp;ldquo; 1&amp;rdquo; &amp;lt;&amp;ldquo; 2&amp;rdquo; &amp;lt;&amp;ldquo; 10&amp;rdquo;。可能的值是 &lt;code&gt;true&lt;/code&gt; 和 &lt;code&gt;false&lt;/code&gt; ；默认值为 &lt;code&gt;false&lt;/code&gt; 。可以通过 &lt;code&gt;options&lt;/code&gt; 属性或Unicode扩展键设置此选项。如果两者都提供，则 &lt;code&gt;options&lt;/code&gt; 属性具有优先权。不需要实现来支持此属性。</target>
        </trans-unit>
        <trans-unit id="660bd9e4d4493b37ccdffed9173f33c28c1c106b" translate="yes" xml:space="preserve">
          <source>Whether or not Unicode features are enabled.</source>
          <target state="translated">是否启用Unicode功能。</target>
        </trans-unit>
        <trans-unit id="72ad5a7075876b11b08cb498367a6aad5bd18c01" translate="yes" xml:space="preserve">
          <source>Whether or not the search is sticky.</source>
          <target state="translated">搜索是否有粘性。</target>
        </trans-unit>
        <trans-unit id="931ceb864122164ff385b721b90260a9a840b4cb" translate="yes" xml:space="preserve">
          <source>Whether or not to search in strings across multiple lines.</source>
          <target state="translated">是否在字符串中进行多行搜索。</target>
        </trans-unit>
        <trans-unit id="964d14771347b32e246fbd206275339b35683cb6" translate="yes" xml:space="preserve">
          <source>Whether punctuation should be ignored. Possible values are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;; the default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">标点符号是否应被忽略。可能的值是 &lt;code&gt;true&lt;/code&gt; 和 &lt;code&gt;false&lt;/code&gt; ；默认值为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9139411c8739f05505450f9a6ad72e7de4bedf0d" translate="yes" xml:space="preserve">
          <source>Whether the comparison is for sorting or for searching for matching strings. Possible values are &lt;code&gt;&quot;sort&quot;&lt;/code&gt; and &lt;code&gt;&quot;search&quot;&lt;/code&gt;; the default is &lt;code&gt;&quot;sort&quot;&lt;/code&gt;.</source>
          <target state="translated">比较是用于排序还是用于搜索匹配的字符串。可能的值为 &lt;code&gt;&quot;sort&quot;&lt;/code&gt; 和 &lt;code&gt;&quot;search&quot;&lt;/code&gt; ；默认值为 &lt;code&gt;&quot;sort&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c66bf9e881515eb7035e4aa0b35eed3d1a84d252" translate="yes" xml:space="preserve">
          <source>Whether to ignore case while attempting a match in a string.</source>
          <target state="translated">是否在尝试匹配字符串时忽略大小写。</target>
        </trans-unit>
        <trans-unit id="dfece108db48831096dc0ebbe5c37021bd7cc45c" translate="yes" xml:space="preserve">
          <source>Whether to test the regular expression against all possible matches in a string, or only against the first.</source>
          <target state="translated">是根据字符串中所有可能的匹配项来测试正则表达式,还是只测试第一个匹配项。</target>
        </trans-unit>
        <trans-unit id="752e43d71ab4fdb1f51dbaaa38923e8345b2fde1" translate="yes" xml:space="preserve">
          <source>Whether to use 12-hour time (as opposed to 24-hour time). Possible values are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;; the default is locale dependent. This option overrides the &lt;code&gt;hc&lt;/code&gt; language tag and/or the &lt;code&gt;hourCycle&lt;/code&gt; option in case both are present.</source>
          <target state="translated">是否使用12小时（而不是24小时）。可能的值是 &lt;code&gt;true&lt;/code&gt; 和 &lt;code&gt;false&lt;/code&gt; ；默认值取决于地区。如果两者都存在，则此选项将覆盖 &lt;code&gt;hc&lt;/code&gt; 语言标记和/或 &lt;code&gt;hourCycle&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="bb79141d02074383f9048728b50376461bf59ae1" translate="yes" xml:space="preserve">
          <source>Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. Possible values are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;; the default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">是否使用分组分隔符，例如千位分隔符或千位/十万/千位分隔符。可能的值是 &lt;code&gt;true&lt;/code&gt; 和 &lt;code&gt;false&lt;/code&gt; ；默认值为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e0031877b8fc30b920e32f913bd2532ed51b905" translate="yes" xml:space="preserve">
          <source>Whether upper case or lower case should sort first. Possible values are &lt;code&gt;&quot;upper&quot;&lt;/code&gt;, &lt;code&gt;&quot;lower&quot;&lt;/code&gt;, or &lt;code&gt;&quot;false&quot;&lt;/code&gt; (use the locale's default). This option can be set through an &lt;code&gt;options&lt;/code&gt; property or through a Unicode extension key; if both are provided, the &lt;code&gt;options&lt;/code&gt; property takes precedence.</source>
          <target state="translated">大写还是小写都应该首先排序。可能的值为 &lt;code&gt;&quot;upper&quot;&lt;/code&gt; ， &lt;code&gt;&quot;lower&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;false&quot;&lt;/code&gt; （使用语言环境的默认值）。可以通过 &lt;code&gt;options&lt;/code&gt; 属性或Unicode扩展键设置此选项。如果两者都提供，则 &lt;code&gt;options&lt;/code&gt; 属性具有优先权。</target>
        </trans-unit>
        <trans-unit id="f5366895b170ddfc2b3cbac3b9a4274b079808c7" translate="yes" xml:space="preserve">
          <source>Whether upper case or lower case should sort first. Possible values are &lt;code&gt;&quot;upper&quot;&lt;/code&gt;, &lt;code&gt;&quot;lower&quot;&lt;/code&gt;, or &lt;code&gt;&quot;false&quot;&lt;/code&gt; (use the locale's default); the default is &lt;code&gt;&quot;false&quot;&lt;/code&gt;. This option can be set through an &lt;code&gt;options&lt;/code&gt; property or through a Unicode extension key; if both are provided, the &lt;code&gt;options&lt;/code&gt; property takes precedence. Implementations are not required to support this property.</source>
          <target state="translated">大写还是小写都应该首先排序。可能的值为 &lt;code&gt;&quot;upper&quot;&lt;/code&gt; ， &lt;code&gt;&quot;lower&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;false&quot;&lt;/code&gt; （使用语言环境的默认值）；默认值为 &lt;code&gt;&quot;false&quot;&lt;/code&gt; 。可以通过 &lt;code&gt;options&lt;/code&gt; 属性或Unicode扩展键设置此选项。如果两者都提供，则 &lt;code&gt;options&lt;/code&gt; 属性具有优先权。不需要实现来支持此属性。</target>
        </trans-unit>
        <trans-unit id="409d3cb09e216ae9eebb19f69a247b9587c15e78" translate="yes" xml:space="preserve">
          <source>Which differences in the strings should lead to non-zero result values. Possible values are:</source>
          <target state="translated">字符串中哪些差异应该导致非零的结果值。可能的值是:</target>
        </trans-unit>
        <trans-unit id="c1e0b50fa501f3e075ed3caa4558f484a35b35ed" translate="yes" xml:space="preserve">
          <source>Which is equivalent to this ES5-like notation (but note that ECMAScript 5 has no generators):</source>
          <target state="translated">这相当于这个类似ES5的符号(但注意ECMAScript 5没有生成器)。</target>
        </trans-unit>
        <trans-unit id="b4058d988b68a591791672c437b5138156c70fb0" translate="yes" xml:space="preserve">
          <source>While it is possible to use it as an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Identifier&quot;&gt;identifier&lt;/a&gt; (variable name) in any scope other than the global scope (because &lt;code&gt;undefined&lt;/code&gt; is not a &lt;a href=&quot;../lexical_grammar&quot;&gt;&lt;code&gt;reserved word&lt;/code&gt;&lt;/a&gt;), doing so is a very bad idea that will make your code difficult to maintain and debug.</source>
          <target state="translated">尽管可以将其用作全局范围以外的任何范围的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Identifier&quot;&gt;标识符&lt;/a&gt;（变量名）（因为 &lt;code&gt;undefined&lt;/code&gt; 不是&lt;a href=&quot;../lexical_grammar&quot;&gt; &lt;code&gt;reserved word&lt;/code&gt; &lt;/a&gt;），但这是一个非常糟糕的主意，它将使您的代码难以维护和调试。</target>
        </trans-unit>
        <trans-unit id="de4bcc3b592837d887f0cd400a8cd6f62f2e9524" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;getRandomInt()&lt;/code&gt; function above is inclusive at the minimum, it's exclusive at the maximum. What if you need the results to be inclusive at both the minimum and the maximum? The &lt;code&gt;getRandomIntInclusive()&lt;/code&gt; function below accomplishes that.</source>
          <target state="translated">尽管上面的 &lt;code&gt;getRandomInt()&lt;/code&gt; 函数至少是包含在内的，但最大是包含的。如果您需要结果既包含最小值又包含最大值，该怎么办？下面的 &lt;code&gt;getRandomIntInclusive()&lt;/code&gt; 函数可以完成此任务。</target>
        </trans-unit>
        <trans-unit id="422a50fcd932cf09461ff73dc9389d20a7f3d491" translate="yes" xml:space="preserve">
          <source>While the ECMAScript 2015 specification dictates that support for &lt;code&gt;__proto__&lt;/code&gt; is required &lt;em&gt;only&lt;/em&gt; for web browsers (although being normative), other environments may support it as well for legacy usage.</source>
          <target state="translated">尽管ECMAScript 2015规范规定&lt;em&gt;仅&lt;/em&gt; Web浏览器需要 &lt;code&gt;__proto__&lt;/code&gt; 支持（尽管是规范性的），但其他环境也可能支持__proto__以用于传统用途。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0acebce76dc2cd57f170d95edbe4d4984174a0e1" translate="yes" xml:space="preserve">
          <source>While the above could have been achieved by using map itself, here is an example showing usecase of &lt;code&gt;flatMap&lt;/code&gt; better.</source>
          <target state="translated">尽管可以通过使用地图本身来实现上述目的，但以下示例更好地展示了 &lt;code&gt;flatMap&lt;/code&gt; 的用例。</target>
        </trans-unit>
        <trans-unit id="c6ba54aa47463298ab15b4926dab22deaea900ac" translate="yes" xml:space="preserve">
          <source>While the default for a constructor is to return the object referenced by &lt;code&gt;this&lt;/code&gt;, it can instead return some other object (if the return value isn't an object, then the &lt;code&gt;this&lt;/code&gt; object is returned).</source>
          <target state="translated">虽然构造函数的默认值是返回 &lt;code&gt;this&lt;/code&gt; 引用的对象，但是它可以返回其他对象（如果返回值不是对象，则返回 &lt;code&gt;this&lt;/code&gt; 对象）。</target>
        </trans-unit>
        <trans-unit id="5da980bb0e9f20c608cae3ff8a2bb3037a714271" translate="yes" xml:space="preserve">
          <source>While the example above may be more frequently useful for those wishing to support non-BMP characters (since it does not require the caller to know where any non-BMP character might appear), in the event that one &lt;em&gt;does&lt;/em&gt; wish, in choosing a character by index, to treat the surrogate pairs within a string as the single characters they represent, one can use the following:</source>
          <target state="translated">虽然上面的例子可能是希望支持非BMP字符（因为它不要求呼叫者知道任何非BMP字符可能会出现），在一个事件的更频繁有用&lt;em&gt;呢&lt;/em&gt;心愿，在选择角色通过索引，将字符串中的代理对视为它们代表的单个字符，可以使用以下命令：</target>
        </trans-unit>
        <trans-unit id="dc45a2dbfff0098f43fa78071c28b30146b93be3" translate="yes" xml:space="preserve">
          <source>While the global &lt;code&gt;Boolean&lt;/code&gt; object contains no methods of its own, it does inherit some methods through the prototype chain:</source>
          <target state="translated">尽管全局 &lt;code&gt;Boolean&lt;/code&gt; 对象不包含自己的方法，但它确实通过原型链继承了一些方法：</target>
        </trans-unit>
        <trans-unit id="754c2cfd74edd0a0f3da4cdc49e1567cb42f2d2f" translate="yes" xml:space="preserve">
          <source>While the presence of rest, default, or destructured parameters does not alter the &lt;a href=&quot;../strict_mode#Making_eval_and_arguments_simpler&quot;&gt;behavior of the &lt;code&gt;arguments&lt;/code&gt; object in strict mode code&lt;/a&gt;, there is a subtle difference for non-strict code.</source>
          <target state="translated">尽管&lt;a href=&quot;../strict_mode#Making_eval_and_arguments_simpler&quot;&gt;在严格模式代码中&lt;/a&gt;存在rest，默认参数或重构参数不会改变 &lt;code&gt;arguments&lt;/code&gt; 对象的行为，但对于非严格代码则存在细微差别。</target>
        </trans-unit>
        <trans-unit id="7ee74c5dc317ead4501bb172deb6ecbf325e410c" translate="yes" xml:space="preserve">
          <source>While this code works in web browsers, &lt;code&gt;f1()&lt;/code&gt; will produce a &lt;code&gt;ReferenceError&lt;/code&gt; in Node.js, as &lt;code&gt;x&lt;/code&gt; will not be found. This is because the top-level scope in Node is not the global scope, and &lt;code&gt;x&lt;/code&gt; will be local to the module.</source>
          <target state="translated">尽管此代码在Web浏览器中有效，但 &lt;code&gt;f1()&lt;/code&gt; 将在Node.js中产生 &lt;code&gt;ReferenceError&lt;/code&gt; ，因为找不到 &lt;code&gt;x&lt;/code&gt; 。这是因为Node中的顶级作用域不是全局作用域，并且 &lt;code&gt;x&lt;/code&gt; 在模块本地。</target>
        </trans-unit>
        <trans-unit id="8c1dd5773144bb844846a13a61100a6092a5d7fc" translate="yes" xml:space="preserve">
          <source>While time zone specifiers are used during date string parsing to interpret the argument, the value returned is always the number of milliseconds between January 1, 1970 00:00:00 UTC and the point in time represented by the argument or &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">尽管在日期字符串解析期间使用时区说明符来解释参数，但返回的值始终是1970年1月1日UTC与参数或 &lt;code&gt;NaN&lt;/code&gt; 表示的时间点之间的毫秒数。</target>
        </trans-unit>
        <trans-unit id="953c8803bee8e5987794f61df8cc754051cb6133" translate="yes" xml:space="preserve">
          <source>While using the &lt;code&gt;get&lt;/code&gt; keyword and &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; have similar results there is a subtle difference between the two when used on &lt;a href=&quot;../classes&quot;&gt;&lt;code&gt;classes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">虽然使用 &lt;code&gt;get&lt;/code&gt; 关键字和&lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt;具有相似的结果，但在&lt;a href=&quot;../classes&quot;&gt; &lt;code&gt;classes&lt;/code&gt; &lt;/a&gt;使用时，两者之间存在细微的差异。</target>
        </trans-unit>
        <trans-unit id="c06deb9757844f6415e02e27e7b2285717965855" translate="yes" xml:space="preserve">
          <source>While you can call &lt;code&gt;toString()&lt;/code&gt; on Symbols, you can't use string concatenation with them:</source>
          <target state="translated">虽然可以在Symbols上调用 &lt;code&gt;toString()&lt;/code&gt; ，但不能将字符串与它们串联使用：</target>
        </trans-unit>
        <trans-unit id="4417940eddab0238942207d10f65cee1950b8fbf" translate="yes" xml:space="preserve">
          <source>White space</source>
          <target state="translated">白色空间</target>
        </trans-unit>
        <trans-unit id="6dd42890c4c75aff925417ab90dcd9e8dd85711a" translate="yes" xml:space="preserve">
          <source>White space characters</source>
          <target state="translated">白色空间字符</target>
        </trans-unit>
        <trans-unit id="58ece77676dc50a4261c8720d525e151d47580f6" translate="yes" xml:space="preserve">
          <source>White space characters improve the readability of source text and separate tokens from each other. These characters are usually unnecessary for the functionality of the code. &lt;a href=&quot;http://en.wikipedia.org/wiki/Minification_%28programming%29&quot;&gt;Minification tools&lt;/a&gt; are often used to remove whitespace in order to reduce the amount of data that needs to be transferred.</source>
          <target state="translated">空格字符可提高源文本的可读性，并将标记彼此分开。这些字符对于代码的功能通常是不必要的。&lt;a href=&quot;http://en.wikipedia.org/wiki/Minification_%28programming%29&quot;&gt;缩小工具&lt;/a&gt;通常用于删除空格，以减少需要传输的数据量。</target>
        </trans-unit>
        <trans-unit id="56135659307c63612395a3e2ea7095b53ecfdfb9" translate="yes" xml:space="preserve">
          <source>Why &lt;em&gt;Weak&lt;/em&gt;Map?</source>
          <target state="translated">为什么&lt;em&gt;弱&lt;/em&gt;地图？</target>
        </trans-unit>
        <trans-unit id="a18ac4a80863bedc913f28086690a04a62dbcb4b" translate="yes" xml:space="preserve">
          <source>Why are &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;ArrayBuffer&lt;/code&gt; length limited? The &lt;code&gt;length&lt;/code&gt; property of an &lt;code&gt;Array&lt;/code&gt; or an &lt;code&gt;ArrayBuffer&lt;/code&gt; is represented with an unsigned 32-bit integer, that can only store values which are in the range from 0 to 2&lt;sup&gt;32&lt;/sup&gt;-1.</source>
          <target state="translated">为什么要限制 &lt;code&gt;Array&lt;/code&gt; 和 &lt;code&gt;ArrayBuffer&lt;/code&gt; 的长度？ &lt;code&gt;Array&lt;/code&gt; 或 &lt;code&gt;ArrayBuffer&lt;/code&gt; 的 &lt;code&gt;length&lt;/code&gt; 属性用无符号32位整数表示，该整数只能存储0到2 &lt;sup&gt;32&lt;/sup&gt; -1 范围内的值。&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="10dc88c706996e78fc39528141fd896ad070d58e" translate="yes" xml:space="preserve">
          <source>Why is this parameter's value limited to 36? A radix that is larger than 10 uses alphabetical characters as digits; therefore, the radix can't be larger than 36, since the Latin alphabet (used by English and many other languages) only has 26 characters.</source>
          <target state="translated">为什么这个参数的值被限制为36?大于10的半径使用字母字符作为数字;因此,半径不能大于36,因为拉丁字母表(英语和许多其他语言使用)只有26个字符。</target>
        </trans-unit>
        <trans-unit id="618dcccfbbecf181b17b9b6f5832100e86ffc295" translate="yes" xml:space="preserve">
          <source>Why should I have semicolons after &lt;code&gt;return&lt;/code&gt; statements? In the case of semicolon-less &lt;code&gt;return&lt;/code&gt; statements, it can be unclear whether the developer intended to return the statement on the following line, or to stop execution and return. The warning indicates that there is ambiguity in the way the &lt;code&gt;return&lt;/code&gt; statement is written.</source>
          <target state="translated">为什么在 &lt;code&gt;return&lt;/code&gt; 语句后应该有分号？对于无分号的 &lt;code&gt;return&lt;/code&gt; 语句，可能不清楚开发人员是打算在下一行返回该语句，还是停止执行并返回。该警告表明 &lt;code&gt;return&lt;/code&gt; 语句的编写方式存在歧义。</target>
        </trans-unit>
        <trans-unit id="d48965f0e46a04887ba1bfd8d7dc5dfb478aa487" translate="yes" xml:space="preserve">
          <source>Why typeof is no longer &quot;safe&quot;</source>
          <target state="translated">为什么typeof不再 &quot;安全&quot;</target>
        </trans-unit>
        <trans-unit id="8e0ddeda8abebbf09db45b8469651941e72c421f" translate="yes" xml:space="preserve">
          <source>Why was &lt;code&gt;arguments.callee&lt;/code&gt; removed from ES5 strict mode?</source>
          <target state="translated">为什么 &lt;code&gt;arguments.callee&lt;/code&gt; 从ES5严格模式中删除？</target>
        </trans-unit>
        <trans-unit id="664add438097fbd4307f814de8e62a10f8905588" translate="yes" xml:space="preserve">
          <source>Wikipedia</source>
          <target state="translated">Wikipedia</target>
        </trans-unit>
        <trans-unit id="774f369fa241eb34e1821b2f4786673a6ab9040d" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/a&gt;, which returns an object if successful, or throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; otherwise, you would use a &lt;code&gt;&lt;a href=&quot;../../statements/try...catch&quot;&gt;try...catch&lt;/a&gt;&lt;/code&gt; block to catch any error that occurred while defining a property. Because &lt;code&gt;Reflect.defineProperty&lt;/code&gt; returns a Boolean success status, you can just use an &lt;code&gt;&lt;a href=&quot;../../statements/if...else&quot;&gt;if...else&lt;/a&gt;&lt;/code&gt; block here:</source>
          <target state="translated">使用&lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty&lt;/code&gt; &lt;/a&gt;，如果成功返回一个对象，否则返回一个&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;，您可以使用 &lt;code&gt;&lt;a href=&quot;../../statements/try...catch&quot;&gt;try...catch&lt;/a&gt;&lt;/code&gt; 块来捕获在定义属性时发生的任何错误。由于 &lt;code&gt;Reflect.defineProperty&lt;/code&gt; 返回布尔值成功状态，因此您可以在此处使用 &lt;code&gt;&lt;a href=&quot;../../statements/if...else&quot;&gt;if...else&lt;/a&gt;&lt;/code&gt; 块：</target>
        </trans-unit>
        <trans-unit id="7d03bcc671d4e20111b39ac27e33af149b30d198" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; statement:</source>
          <target state="translated">带有&lt;a href=&quot;export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt;声明：</target>
        </trans-unit>
        <trans-unit id="1728d78b2bc05b3a036ceae00791d7a9403f2335" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;Object.fromEntries&lt;/code&gt;, its reverse method &lt;a href=&quot;entries&quot;&gt;&lt;code&gt;Object.entries()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../array#Methods_2&quot;&gt;array manipulation methods&lt;/a&gt;, you are able to transform objects like this:</source>
          <target state="translated">使用 &lt;code&gt;Object.fromEntries&lt;/code&gt; 及其反向方法&lt;a href=&quot;entries&quot;&gt; &lt;code&gt;Object.entries()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../array#Methods_2&quot;&gt;数组操作方法&lt;/a&gt;，您可以像这样转换对象：</target>
        </trans-unit>
        <trans-unit id="9cfb0dfc4481c360945e0d4e79fddba30e8ce3be" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;Object.fromEntries&lt;/code&gt;, you can convert from &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">使用 &lt;code&gt;Object.fromEntries&lt;/code&gt; ，您可以将&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;转换为&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="a711b6f27d4cdbf058cfb7fa87e9f8deaf6527e7" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;Object.fromEntries&lt;/code&gt;, you can convert from &lt;a href=&quot;../map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">使用 &lt;code&gt;Object.fromEntries&lt;/code&gt; ，您可以将&lt;a href=&quot;../map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;转换为&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="208aadfdc7be641c2eadcd1f35dd2acb481bcf2e" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;Reflect.apply&lt;/code&gt; this becomes less verbose and easier to understand.</source>
          <target state="translated">使用 &lt;code&gt;Reflect.apply&lt;/code&gt; ,它变得不再那么冗长，更易于理解。</target>
        </trans-unit>
        <trans-unit id="fc40c0b83a5a1e0f7cd995695be0eddc88955c1d" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;bind()&lt;/code&gt;, this can be simplified. In the following piece of code, &lt;code&gt;slice&lt;/code&gt; is a bound function to the &lt;a href=&quot;apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; function of &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Function.prototype&lt;/code&gt;&lt;/a&gt;, with the &lt;code&gt;this&lt;/code&gt; value set to the &lt;a href=&quot;../array/slice&quot;&gt;&lt;code&gt;slice()&lt;/code&gt;&lt;/a&gt; function of &lt;a href=&quot;../array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt;. This means that additional &lt;code&gt;apply()&lt;/code&gt; calls can be eliminated:</source>
          <target state="translated">使用 &lt;code&gt;bind()&lt;/code&gt; ，可以简化此过程。在下面的代码中， &lt;code&gt;slice&lt;/code&gt; 是&lt;a href=&quot;prototype&quot;&gt; &lt;code&gt;Function.prototype&lt;/code&gt; &lt;/a&gt;的&lt;a href=&quot;apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt;函数的绑定函数， &lt;code&gt;this&lt;/code&gt; 值设置为&lt;a href=&quot;../array/prototype&quot;&gt; &lt;code&gt;Array.prototype&lt;/code&gt; &lt;/a&gt;的&lt;a href=&quot;../array/slice&quot;&gt; &lt;code&gt;slice()&lt;/code&gt; &lt;/a&gt;函数。这意味着可以消除其他的 &lt;code&gt;apply()&lt;/code&gt; 调用：</target>
        </trans-unit>
        <trans-unit id="9f185f47d5a386fb308bb9a614fa476e8ad9c192" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;function&lt;/code&gt;</source>
          <target state="translated">具有 &lt;code&gt;function&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3b0e2c98286936cffbc564e4c2ede2b3236a3779" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;let &lt;/code&gt;and &lt;code&gt;const&lt;/code&gt;</source>
          <target state="translated">与 &lt;code&gt;let &lt;/code&gt; 和 &lt;code&gt;const&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa74f615bce37e2117caa0762ba7ba608f81ac40" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;setTimeout&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;setTimeout&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21469fc9df0d04c5e3fafe084c282aa1f2e60292" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;var&lt;/code&gt;</source>
          <target state="translated">与 &lt;code&gt;var&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5bc297f6bb9122db9a8f1cccfdd9c56fb22262e7" translate="yes" xml:space="preserve">
          <source>With ECMAScript 2015, there is a shorter notation available to achieve the same:</source>
          <target state="translated">在ECMAScript 2015中,有一个更短的符号可以实现同样的目的。</target>
        </trans-unit>
        <trans-unit id="a6b414ce065ab8f5d06d37d991a2b6c5c4d3568d" translate="yes" xml:space="preserve">
          <source>With ES2015 &lt;a href=&quot;../functions/method_definitions&quot;&gt;method definitions&lt;/a&gt;, this can be converted to:</source>
          <target state="translated">使用ES2015 &lt;a href=&quot;../functions/method_definitions&quot;&gt;方法定义&lt;/a&gt;，可以将其转换为：</target>
        </trans-unit>
        <trans-unit id="76148a8be4937c540522d77295f49c36a2ff2e71" translate="yes" xml:space="preserve">
          <source>With ES2015 class</source>
          <target state="translated">有ES2015级</target>
        </trans-unit>
        <trans-unit id="301715ae6b7228a153bd7e168c071c7fec1346fc" translate="yes" xml:space="preserve">
          <source>With a &lt;code&gt;Proxy&lt;/code&gt;, you can easily validate the passed value for an object. This example uses the &lt;a href=&quot;proxy/handler/set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; handler.</source>
          <target state="translated">使用 &lt;code&gt;Proxy&lt;/code&gt; ，您可以轻松地验证对象的传递值。本示例使用&lt;a href=&quot;proxy/handler/set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;处理程序。</target>
        </trans-unit>
        <trans-unit id="b1c94aa05c602efbdace5e668eef77ebfd585dd0" translate="yes" xml:space="preserve">
          <source>With a &lt;code&gt;static name()&lt;/code&gt; method &lt;code&gt;Foo.name&lt;/code&gt; no longer holds the actual class name but a reference to the &lt;code&gt;name()&lt;/code&gt; function object. Above class definition in ES2015 syntax will behave in Chrome or Firefox similar to the following snippet in ES5 syntax:</source>
          <target state="translated">使用 &lt;code&gt;static name()&lt;/code&gt; 方法， &lt;code&gt;Foo.name&lt;/code&gt; 不再保存实际的类名，而是对 &lt;code&gt;name()&lt;/code&gt; 函数对象的引用。ES2015语法中的上述类定义在Chrome或Firefox中的行为类似于ES5语法中的以下代码片段：</target>
        </trans-unit>
        <trans-unit id="43a24571efa208867f78ea53b0a4d6b6f97505ab" translate="yes" xml:space="preserve">
          <source>With a generator</source>
          <target state="translated">有发电机</target>
        </trans-unit>
        <trans-unit id="0f2af496262cde0123f388a957d1188d79d0c2dd" translate="yes" xml:space="preserve">
          <source>With default parameters in ES2015, checks in the function body are no longer necessary. Now, you can assign &lt;code&gt;1&lt;/code&gt; as the default value for &lt;code&gt;b&lt;/code&gt; in the function head:</source>
          <target state="translated">使用ES2015中的默认参数，不再需要在功能主体中进行检查。现在，您可以在函数头中将 &lt;code&gt;1&lt;/code&gt; 分配为 &lt;code&gt;b&lt;/code&gt; 的默认值：</target>
        </trans-unit>
        <trans-unit id="0e1e0413f23354897f0b1c7e30e766ce5af8131a" translate="yes" xml:space="preserve">
          <source>With one argument, &lt;code&gt;Math.hypot()&lt;/code&gt; returns the same as &lt;code&gt;Math.abs()&lt;/code&gt;.</source>
          <target state="translated">使用一个参数， &lt;code&gt;Math.hypot()&lt;/code&gt; 返回与 &lt;code&gt;Math.abs()&lt;/code&gt; 相同的结果。</target>
        </trans-unit>
        <trans-unit id="70550e7319b2c0e94bdf20a146474f81364c8b19" translate="yes" xml:space="preserve">
          <source>With proper input, this should usually look like something like this:</source>
          <target state="translated">如果输入得当,通常应该是这样的。</target>
        </trans-unit>
        <trans-unit id="8e1f40baa92517329c8ee43fa85ab153667a695f" translate="yes" xml:space="preserve">
          <source>With spread syntax the above can be written as:</source>
          <target state="translated">用传播语法,上述内容可以写成:</target>
        </trans-unit>
        <trans-unit id="20929631a904f8d75efe524326c904b941485b97" translate="yes" xml:space="preserve">
          <source>With spread syntax this becomes [Note, however, that this creates a new &lt;code&gt;arr1&lt;/code&gt; array. Unlike &lt;a href=&quot;../global_objects/array/unshift&quot;&gt;&lt;code&gt;Array.unshift&lt;/code&gt;&lt;/a&gt;, it does not modify the original &lt;code&gt;arr1&lt;/code&gt; array in-place]:</source>
          <target state="translated">使用传播语法，这成为[但是，请注意，这将创建一个新的 &lt;code&gt;arr1&lt;/code&gt; 数组。与&lt;a href=&quot;../global_objects/array/unshift&quot;&gt; &lt;code&gt;Array.unshift&lt;/code&gt; &lt;/a&gt;不同，它不会就地修改原始的 &lt;code&gt;arr1&lt;/code&gt; 数组]：</target>
        </trans-unit>
        <trans-unit id="c90a20c93dc80b5d0737c80aa42eac756eff7b6c" translate="yes" xml:space="preserve">
          <source>With spread syntax this becomes:</source>
          <target state="translated">用传播语法,这就变成了。</target>
        </trans-unit>
        <trans-unit id="8755635a68a9ff9addf24ee9057b72bcbe3c63af" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style&quot;&gt;&lt;code&gt;element.style&lt;/code&gt;&lt;/a&gt; object you can get the element's &lt;code&gt;style&lt;/code&gt; attribute and manipulate it more generically, for example:</source>
          <target state="translated">使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style&quot;&gt; &lt;code&gt;element.style&lt;/code&gt; &lt;/a&gt;对象，您可以获取元素的 &lt;code&gt;style&lt;/code&gt; 属性并对其进行更一般的操作，例如：</target>
        </trans-unit>
        <trans-unit id="3b2cd2f1a3e338cc2a4f82547b4f75047f7f79db" translate="yes" xml:space="preserve">
          <source>With the JavaScript field declaration syntax, the above example can be written as:</source>
          <target state="translated">利用JavaScript字段声明语法,上面的例子可以写成。</target>
        </trans-unit>
        <trans-unit id="fca824eaf280c8c96cff3cd68b1b8df202a1468d" translate="yes" xml:space="preserve">
          <source>With the help of the &lt;code&gt;Symbol.toPrimitive&lt;/code&gt; property (used as a function value), an object can be converted to a primitive value. The function is called with a string argument &lt;code&gt;hint&lt;/code&gt;, which specifies the preferred type of the result primitive value. The &lt;code&gt;hint&lt;/code&gt; argument can be one of &lt;code&gt;&quot;&lt;em&gt;number&lt;/em&gt;&quot;&lt;/code&gt;, &lt;code&gt;&quot;&lt;em&gt;string&lt;/em&gt;&quot;&lt;/code&gt;, and &lt;code&gt;&quot;&lt;em&gt;default&lt;/em&gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">借助于 &lt;code&gt;Symbol.toPrimitive&lt;/code&gt; 属性（用作函数值），可以将对象转换为原始值。使用字符串参数 &lt;code&gt;hint&lt;/code&gt; 调用该函数，该参数指定结果原始值的首选类型。该 &lt;code&gt;hint&lt;/code&gt; 参数可以是一个 &lt;code&gt;&quot;&lt;em&gt;number&lt;/em&gt;&quot;&lt;/code&gt; ， &lt;code&gt;&quot;&lt;em&gt;string&lt;/em&gt;&quot;&lt;/code&gt; 和 &lt;code&gt;&quot;&lt;em&gt;default&lt;/em&gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d98c6b3de20142ff113bde69906707fe61b23ea9" translate="yes" xml:space="preserve">
          <source>With the preceding code in place, any time &lt;code&gt;theDog&lt;/code&gt; is used in a string context, JavaScript automatically calls the &lt;code&gt;dogToString()&lt;/code&gt; function, which returns the following string:</source>
          <target state="translated">使用前面的代码后， &lt;code&gt;theDog&lt;/code&gt; 在字符串上下文中使用theDog，JavaScript就会自动调用 &lt;code&gt;dogToString()&lt;/code&gt; 函数，该函数将返回以下字符串：</target>
        </trans-unit>
        <trans-unit id="5d71fa4f2c457478f838302121e00b2ac8d68010" translate="yes" xml:space="preserve">
          <source>With the preceding code in place, any time an object of type &lt;code&gt;MyNumberType&lt;/code&gt; is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code.</source>
          <target state="translated">使用前面的代码后， &lt;code&gt;MyNumberType&lt;/code&gt; 在要以原始值表示的上下文中使用MyNumberType类型的对象，JavaScript就会自动调用前面的代码中定义的函数。</target>
        </trans-unit>
        <trans-unit id="793f0afb28999d5030e6dd1cc89bcd540f4cb9c4" translate="yes" xml:space="preserve">
          <source>With this change, rather than return unpaired surrogate code points as single UTF-16 code units, &lt;code&gt;JSON.stringify&lt;/code&gt; represents them with JSON escape sequences:</source>
          <target state="translated">进行此更改后， &lt;code&gt;JSON.stringify&lt;/code&gt; 而不是将未配对的代理代码点作为单个UTF-16代码单元返回，而是使用JSON转义序列表示它们：</target>
        </trans-unit>
        <trans-unit id="f273894e8ce1e6aef2a84b8f1fd3af13fc038910" translate="yes" xml:space="preserve">
          <source>Within a &lt;a href=&quot;switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt; statement:</source>
          <target state="translated">在&lt;a href=&quot;switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt;语句中：</target>
        </trans-unit>
        <trans-unit id="791d7a41964cf0f31d9ba752416d11a7e1508cf0" translate="yes" xml:space="preserve">
          <source>Without destructuring assignment, swapping two values requires a temporary variable (or, in some low-level languages, the &lt;a href=&quot;https://en.wikipedia.org/wiki/XOR_swap_algorithm&quot;&gt;XOR-swap trick&lt;/a&gt;).</source>
          <target state="translated">在不破坏结构分配的情况下，交换两个值需要一个临时变量（或者在某些低级语言中，这是&lt;a href=&quot;https://en.wikipedia.org/wiki/XOR_swap_algorithm&quot;&gt;XOR交换技巧&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="ff2d3cf2cfeac0b6bc4fa73f8673d839ddd8eaaa" translate="yes" xml:space="preserve">
          <source>Without spread syntax, to create a new array using an existing array as one part of it, the array literal syntax is no longer sufficient and imperative code must be used instead using a combination of &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;splice&lt;/code&gt;, &lt;code&gt;concat&lt;/code&gt;, etc. With spread syntax this becomes much more succinct:</source>
          <target state="translated">如果没有扩展语法，要使用现有数组作为其中一部分来创建新数组，则数组文字语法不再足够，必须使用命令式代码，而应使用 &lt;code&gt;push&lt;/code&gt; ， &lt;code&gt;splice&lt;/code&gt; ， &lt;code&gt;concat&lt;/code&gt; 等的组合。变得更加简洁：</target>
        </trans-unit>
        <trans-unit id="dd81953275e4c603fc6e296163f16395c6ee5da7" translate="yes" xml:space="preserve">
          <source>Working Draft</source>
          <target state="translated">工作草案</target>
        </trans-unit>
        <trans-unit id="dd35487a2eb7da40332f7fc41452378d92a72445" translate="yes" xml:space="preserve">
          <source>Writable</source>
          <target state="translated">Writable</target>
        </trans-unit>
        <trans-unit id="6dd905bf19c036bc34f8dc2c351d91b4824501c7" translate="yes" xml:space="preserve">
          <source>Writable attribute</source>
          <target state="translated">可写属性</target>
        </trans-unit>
        <trans-unit id="4a48932789d199bbed709777e2d743ca2bafdc6c" translate="yes" xml:space="preserve">
          <source>Write</source>
          <target state="translated">Write</target>
        </trans-unit>
        <trans-unit id="013eb748dc1cdddfbedd69ae793734611d5ef616" translate="yes" xml:space="preserve">
          <source>Write your code as strict and make sure no strict-only errors (from the above &quot;New runtime errors&quot; section) are thrown.</source>
          <target state="translated">将你的代码写成strict,并确保没有抛出只属于strict的错误(来自上面的 &quot;新的运行时错误 &quot;部分)。</target>
        </trans-unit>
        <trans-unit id="a9641e671b1e5c5e6ac46e0941ff681bc99d042e" translate="yes" xml:space="preserve">
          <source>Wrong scope</source>
          <target state="translated">错误的范围</target>
        </trans-unit>
        <trans-unit id="d767a29312ec15e631d600bc69302c3d1fa55d7a" translate="yes" xml:space="preserve">
          <source>X.prototype.y called on incompatible type</source>
          <target state="translated">X.prototype.y在不兼容的类型上被调用。</target>
        </trans-unit>
        <trans-unit id="4067f598e5b4150371a45f7ce91365099f1ef632" translate="yes" xml:space="preserve">
          <source>Year: 4 digit year, e.g. &quot;2018&quot;</source>
          <target state="translated">年。4位数年份,如 &quot;2018&quot;</target>
        </trans-unit>
        <trans-unit id="1452ffdb9676209ff8b084ec6a468085a7bd7d47" translate="yes" xml:space="preserve">
          <source>Years between 0 and 99 are converted to a year in the 20th century &lt;code&gt;(1900 + year)&lt;/code&gt;; for example, 95 is converted to the year 1995.</source>
          <target state="translated">0到99之间的年份转换为20世纪的一年 &lt;code&gt;(1900 + year)&lt;/code&gt; ；例如，将95转换为1995年。</target>
        </trans-unit>
        <trans-unit id="5397e0583f14f6c88de06b1ef28f460a1fb5b0ae" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">Yes</target>
        </trans-unit>
        <trans-unit id="c2d74147ee1ca9945f3548c1823e8be4942136c3" translate="yes" xml:space="preserve">
          <source>Yes, you can! JavaScript will drop you back to the default if it can't find a match:</source>
          <target state="translated">是的,你可以 如果找不到匹配的JavaScript会让你回到默认值。</target>
        </trans-unit>
        <trans-unit id="7368014e444decf6e59436d4a3ed98d5c7458cdd" translate="yes" xml:space="preserve">
          <source>You &lt;strong&gt;cannot&lt;/strong&gt; declare properties of an object or array with a &lt;code&gt;var&lt;/code&gt; declaration.</source>
          <target state="translated">您&lt;strong&gt;不能&lt;/strong&gt;使用 &lt;code&gt;var&lt;/code&gt; 声明来声明对象或数组的属性。</target>
        </trans-unit>
        <trans-unit id="521c7e03836a957ade6452f4ac7902372805c2b9" translate="yes" xml:space="preserve">
          <source>You Don't Know JS: Scope &amp;amp; Closures: Chapter 3: Function vs. Block Scope</source>
          <target state="translated">您不了解JS：作用域和闭包：第3章：功能与块作用域</target>
        </trans-unit>
        <trans-unit id="cccb9814f77bd21b665216fa1db8fd5d062e8d3c" translate="yes" xml:space="preserve">
          <source>You are also able to call super on &lt;a href=&quot;../classes/static&quot;&gt;static&lt;/a&gt; methods.</source>
          <target state="translated">您还可以在&lt;a href=&quot;../classes/static&quot;&gt;静态&lt;/a&gt;方法上调用super 。</target>
        </trans-unit>
        <trans-unit id="2480d740f3c4be1fd67a36cd51644e06284eff5c" translate="yes" xml:space="preserve">
          <source>You are now able to shorten this to:</source>
          <target state="translated">你现在能够将其缩短为。</target>
        </trans-unit>
        <trans-unit id="865bb16ff57dc01af75233ec9067dc26d2ba1d0a" translate="yes" xml:space="preserve">
          <source>You can add a shared property to a previously defined object type by using the &lt;code&gt;&lt;a href=&quot;../global_objects/function/prototype&quot;&gt;Function.prototype&lt;/a&gt;&lt;/code&gt; property. This defines a property that is shared by all objects created with that function, rather than by just one instance of the object type. The following code adds a color property with value &lt;code&gt;&quot;original color&quot;&lt;/code&gt; to all objects of type &lt;code&gt;Car&lt;/code&gt;, and then overwrites that value with the string &quot;&lt;code&gt;black&lt;/code&gt;&quot; only in the instance object &lt;code&gt;car1&lt;/code&gt;. For more information, see &lt;a href=&quot;../global_objects/function/prototype&quot;&gt;prototype&lt;/a&gt;.</source>
          <target state="translated">您可以使用 &lt;code&gt;&lt;a href=&quot;../global_objects/function/prototype&quot;&gt;Function.prototype&lt;/a&gt;&lt;/code&gt; 属性将共享属性添加到先前定义的对象类型。这定义了一个属性，该属性由使用该函数创建的所有对象共享，而不仅仅是对象类型的一个实例。以下代码向类型为 &lt;code&gt;Car&lt;/code&gt; 的所有对象添加一个值为 &lt;code&gt;&quot;original color&quot;&lt;/code&gt; 的color属性，然后仅在实例对象 &lt;code&gt;car1&lt;/code&gt; 中使用字符串&amp;ldquo; &lt;code&gt;black&lt;/code&gt; &amp;rdquo; 覆盖该值。有关更多信息，请参见&lt;a href=&quot;../global_objects/function/prototype&quot;&gt;prototype&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3bdb85bcafe6623fb9a964cb277d7f723afcbc0e" translate="yes" xml:space="preserve">
          <source>You can also define a class using a &lt;a href=&quot;../operators/class&quot;&gt;class expression&lt;/a&gt;. But unlike the class expression, the class declaration doesn't allow an existing class to be declared again and will throw a type error if attempted.</source>
          <target state="translated">您也可以使用&lt;a href=&quot;../operators/class&quot;&gt;类表达式&lt;/a&gt;定义类。但是与类表达式不同，类声明不允许再次声明现有的类，如果尝试，则将引发类型错误。</target>
        </trans-unit>
        <trans-unit id="7bcbd995abfea623a89661e6991b90487ab0834a" translate="yes" xml:space="preserve">
          <source>You can also define async functions using an &lt;a href=&quot;../operators/async_function&quot;&gt;async function expression&lt;/a&gt;.</source>
          <target state="translated">您还可以使用&lt;a href=&quot;../operators/async_function&quot;&gt;异步函数表达式&lt;/a&gt;定义异步函数。</target>
        </trans-unit>
        <trans-unit id="1889b1940970680ea5462b0b2f87ea62a3c19a3f" translate="yes" xml:space="preserve">
          <source>You can also define async functions using an &lt;a href=&quot;../statements/async_function&quot;&gt;async function statement&lt;/a&gt;.</source>
          <target state="translated">您还可以使用&lt;a href=&quot;../statements/async_function&quot;&gt;异步函数语句&lt;/a&gt;定义异步函数。</target>
        </trans-unit>
        <trans-unit id="ecaf9336e4ca3c1e5da4e0ccb0aab02f8877d562" translate="yes" xml:space="preserve">
          <source>You can also define functions using the &lt;a href=&quot;../global_objects/function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; constructor and a &lt;a href=&quot;../operators/function&quot;&gt;&lt;code&gt;function expression&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">您还可以使用&lt;a href=&quot;../global_objects/function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;构造函数和&lt;a href=&quot;../operators/function&quot;&gt; &lt;code&gt;function expression&lt;/code&gt; &lt;/a&gt;来定义函数。</target>
        </trans-unit>
        <trans-unit id="98d7deaccf80e0fb44c209b467ebb5e745c88275" translate="yes" xml:space="preserve">
          <source>You can also define functions using the &lt;a href=&quot;../global_objects/function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; constructor and a &lt;a href=&quot;../statements/function&quot;&gt;&lt;code&gt;function declaration&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">您还可以使用&lt;a href=&quot;../global_objects/function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;构造函数和&lt;a href=&quot;../statements/function&quot;&gt; &lt;code&gt;function declaration&lt;/code&gt; &lt;/a&gt;来定义函数。</target>
        </trans-unit>
        <trans-unit id="6077552aaf0a08750bcb38c51cf9a2a38f305b95" translate="yes" xml:space="preserve">
          <source>You can also define generator functions using the &lt;a href=&quot;../global_objects/generatorfunction&quot;&gt;&lt;code&gt;GeneratorFunction&lt;/code&gt;&lt;/a&gt; constructor, or the function expression syntax.</source>
          <target state="translated">您还可以使用&lt;a href=&quot;../global_objects/generatorfunction&quot;&gt; &lt;code&gt;GeneratorFunction&lt;/code&gt; &lt;/a&gt;构造函数或函数表达式语法来定义生成器函数。</target>
        </trans-unit>
        <trans-unit id="4f1c1ffd9bf18b1349f61e21a931b5d8035ac46f" translate="yes" xml:space="preserve">
          <source>You can also ignore all returned values:</source>
          <target state="translated">你也可以忽略所有返回的值。</target>
        </trans-unit>
        <trans-unit id="cf2a0433ae777e2314ed73be75951166ddeb865f" translate="yes" xml:space="preserve">
          <source>You can also iterate over &lt;a href=&quot;function*&quot;&gt;generators&lt;/a&gt;, i.e. functions generating an iterable object:</source>
          <target state="translated">您还可以遍历&lt;a href=&quot;function*&quot;&gt;generators&lt;/a&gt;，即生成可迭代对象的函数：</target>
        </trans-unit>
        <trans-unit id="a3cf5dbe02881cba571a6421055082ba7359f626" translate="yes" xml:space="preserve">
          <source>You can also iterate over an object that explicitly implements &lt;a href=&quot;../iteration_protocols#iterable&quot;&gt;iterable&lt;/a&gt; protocol:</source>
          <target state="translated">您还可以遍历显式实现&lt;a href=&quot;../iteration_protocols#iterable&quot;&gt;可迭代&lt;/a&gt;协议的对象：</target>
        </trans-unit>
        <trans-unit id="f6ce22181a3f713a43890d656e294b89b1ce38b0" translate="yes" xml:space="preserve">
          <source>You can also iterate over an object that explicitly implements async iterable protocol:</source>
          <target state="translated">你也可以在一个明确实现异步迭代协议的对象上迭代。</target>
        </trans-unit>
        <trans-unit id="255faffda5a342702c7e7f58d40956a9b09915bf" translate="yes" xml:space="preserve">
          <source>You can also make multiple-line comments, like this:</source>
          <target state="translated">你也可以做多行注释,像这样。</target>
        </trans-unit>
        <trans-unit id="3faf010605143904e37593dfcaff0f1c31473ee9" translate="yes" xml:space="preserve">
          <source>You can also omit all three blocks. Again, make sure to use a &lt;code&gt;&lt;a href=&quot;break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; statement to end the loop and also modify (increase) a variable, so that the condition for the break statement is true at some point.</source>
          <target state="translated">您也可以忽略所有三个块。同样，请确保使用 &lt;code&gt;&lt;a href=&quot;break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; 语句结束循环并修改（增加）变量，以便break语句的条件在某些时候为true。</target>
        </trans-unit>
        <trans-unit id="71c3f991d053597638c5a98e2d8b1a96c2d7d009" translate="yes" xml:space="preserve">
          <source>You can also provide an &lt;a href=&quot;../../functions/arrow_functions&quot;&gt;Arrow Function&lt;/a&gt; in lieu of a full function. The code below will produce the same output as the code in the block above:</source>
          <target state="translated">您也可以提供&lt;a href=&quot;../../functions/arrow_functions&quot;&gt;箭头功能&lt;/a&gt;来代替完整功能。下面的代码将产生与上面的代码块相同的输出：</target>
        </trans-unit>
        <trans-unit id="2d7ba734ed94c6f67a4cf021f739fd82965a9ab8" translate="yes" xml:space="preserve">
          <source>You can also set &lt;code&gt;unscopables&lt;/code&gt; for your own objects.</source>
          <target state="translated">您还可以为自己的对象设置 &lt;code&gt;unscopables&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f2cdd45f02385fc58254e8491afbb4ed3962e025" translate="yes" xml:space="preserve">
          <source>You can also take the approach of wrapping the entire contents of a script in a function and having that outer function use strict mode. This eliminates the concatenation problem and it means that you have to explicitly export any shared variables out of the function scope.</source>
          <target state="translated">你也可以采取将脚本的全部内容封装在一个函数中,并让这个外部函数使用严格模式。这消除了连接问题,而且意味着你必须明确地将任何共享变量导出到函数范围之外。</target>
        </trans-unit>
        <trans-unit id="bebbaa8bf1d2f63cccc00451f13d856ef387cde8" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; for the &lt;code&gt;argsArray&lt;/code&gt; parameter. &lt;code&gt;arguments&lt;/code&gt; is a local variable of a function. It can be used for all unspecified arguments of the called object. Thus, you do not have to know the arguments of the called object when you use the &lt;code&gt;apply&lt;/code&gt; method. You can use &lt;code&gt;arguments&lt;/code&gt; to pass all the arguments to the called object. The called object is then responsible for handling the arguments.</source>
          <target state="translated">您也可以将&lt;a href=&quot;../../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;用作 &lt;code&gt;argsArray&lt;/code&gt; 参数。 &lt;code&gt;arguments&lt;/code&gt; 是函数的局部变量。它可以用于被调用对象的所有未指定参数。因此，当您使用 &lt;code&gt;apply&lt;/code&gt; 方法时，您不必知道被调用对象的参数。您可以使用 &lt;code&gt;arguments&lt;/code&gt; 将所有参数传递给被调用的对象。然后，被调用的对象负责处理参数。</target>
        </trans-unit>
        <trans-unit id="f63f23ed07fe9b2462f2eee493c03be6771c9ff8" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;exec()&lt;/code&gt; without creating a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="translated">您还可以使用 &lt;code&gt;exec()&lt;/code&gt; 而不创建&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;对象：</target>
        </trans-unit>
        <trans-unit id="ced97e741b187e16c412523874adb4d04d2f1b7e" translate="yes" xml:space="preserve">
          <source>You can also use chaining to implement one function with a Promise-based API on top of another such function.</source>
          <target state="translated">你也可以使用链来实现一个基于承诺的API的函数,在另一个这样的函数之上。</target>
        </trans-unit>
        <trans-unit id="d6cce9a1b9a8aa8d5eea9d7f30b51f243db51d90" translate="yes" xml:space="preserve">
          <source>You can also use it in the middle of a line, if you wish, although this can make your code harder to read so it should be used with caution:</source>
          <target state="translated">如果你愿意的话,你也可以在一行中间使用它,不过这样会使你的代码更难读,所以应该谨慎使用。</target>
        </trans-unit>
        <trans-unit id="6561e6bc8858cc817c7be9188b11e575df2a7c42" translate="yes" xml:space="preserve">
          <source>You can also use one or more conditional &lt;code&gt;catch&lt;/code&gt; clauses to handle specific exceptions. In this case, the appropriate &lt;code&gt;catch&lt;/code&gt; clause is entered when the specified exception is thrown. In the following example, code in the &lt;code&gt;try&lt;/code&gt; block can potentially throw three exceptions: &lt;a href=&quot;../global_objects/typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../global_objects/evalerror&quot;&gt;&lt;code&gt;EvalError&lt;/code&gt;&lt;/a&gt;. When an exception occurs, control transfers to the appropriate &lt;code&gt;catch&lt;/code&gt; clause. If the exception is not one of the specified exceptions and an unconditional &lt;code&gt;catch&lt;/code&gt; clause is found, control transfers to that &lt;code&gt;catch&lt;/code&gt; clause.</source>
          <target state="translated">您还可以使用一个或多个条件 &lt;code&gt;catch&lt;/code&gt; 子句来处理特定的异常。在这种情况下，当抛出指定的异常时，将输入适当的 &lt;code&gt;catch&lt;/code&gt; 子句。在以下示例中， &lt;code&gt;try&lt;/code&gt; 块中的代码可能会引发三个异常：&lt;a href=&quot;../global_objects/typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../global_objects/rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../global_objects/evalerror&quot;&gt; &lt;code&gt;EvalError&lt;/code&gt; &lt;/a&gt;。发生异常时，控制权将转移到适当的 &lt;code&gt;catch&lt;/code&gt; 子句。如果异常不是指定的异常之一，并且找到了无条件 &lt;code&gt;catch&lt;/code&gt; 子句，则控制权将转移到该 &lt;code&gt;catch&lt;/code&gt; 子句。</target>
        </trans-unit>
        <trans-unit id="00d44125d6700a81bd54270ac174bcb908e4753d" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;try&lt;/code&gt; statement to handle JavaScript exceptions. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;JavaScript Guide&lt;/a&gt; for more information on JavaScript exceptions.</source>
          <target state="translated">您还可以使用 &lt;code&gt;try&lt;/code&gt; 语句来处理JavaScript异常。有关JavaScript异常的更多信息，请参见&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;JavaScript指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="12cef56b5433eb1bb760eef03f503e5213aef4c8" translate="yes" xml:space="preserve">
          <source>You can always add a property to a previously defined object. For example, the statement &lt;code&gt;car1.color = &quot;black&quot;&lt;/code&gt; adds a property &lt;code&gt;color&lt;/code&gt; to &lt;code&gt;car1&lt;/code&gt;, and assigns it a value of &quot;&lt;code&gt;black&lt;/code&gt;&quot;. However, this does not affect any other objects. To add the new property to all objects of the same type, you must add the property to the definition of the &lt;code&gt;Car&lt;/code&gt; object type.</source>
          <target state="translated">您始终可以将属性添加到先前定义的对象。例如，语句 &lt;code&gt;car1.color = &quot;black&quot;&lt;/code&gt; 向 &lt;code&gt;car1&lt;/code&gt; 添加属性 &lt;code&gt;color&lt;/code&gt; ，并为其分配值&amp;ldquo; &lt;code&gt;black&lt;/code&gt; &amp;rdquo;。但是，这不会影响任何其他对象。要将新属性添加到相同类型的所有对象，必须将属性添加到 &lt;code&gt;Car&lt;/code&gt; 对象类型的定义。</target>
        </trans-unit>
        <trans-unit id="d578746defee9a0518a4542680c0d000e3a60b05" translate="yes" xml:space="preserve">
          <source>You can assign a different &lt;code&gt;this&lt;/code&gt; object when calling an existing function. &lt;code&gt;this&lt;/code&gt; refers to the current object, the calling object. With &lt;code&gt;apply&lt;/code&gt;, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.</source>
          <target state="translated">调用现有函数时，可以分配其他 &lt;code&gt;this&lt;/code&gt; 对象。 &lt;code&gt;this&lt;/code&gt; 是指当前对象，即调用对象。使用 &lt;code&gt;apply&lt;/code&gt; ，您可以编写一次方法，然后在另一个对象中继承该方法，而不必为新对象重写该方法。</target>
        </trans-unit>
        <trans-unit id="88eab70f08ec5b9e42e7f6cb3c63ef544686cd07" translate="yes" xml:space="preserve">
          <source>You can choose to handle only specific error types by testing the error type with the error's &lt;a href=&quot;object/constructor&quot;&gt;&lt;code&gt;constructor&lt;/code&gt;&lt;/a&gt; property or, if you're writing for modern JavaScript engines, &lt;a href=&quot;../operators/instanceof&quot;&gt;&lt;code&gt;instanceof&lt;/code&gt;&lt;/a&gt; keyword:</source>
          <target state="translated">您可以通过使用错误的&lt;a href=&quot;object/constructor&quot;&gt; &lt;code&gt;constructor&lt;/code&gt; &lt;/a&gt;属性测试错误类型来选择仅处理特定的错误类型，或者，如果您是为现代JavaScript引擎编写的，则可以使用&lt;a href=&quot;../operators/instanceof&quot;&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;/a&gt;关键字：</target>
        </trans-unit>
        <trans-unit id="77c3ce40fd4c4194b472c4cc13874707e165dbd5" translate="yes" xml:space="preserve">
          <source>You can correct the &lt;code&gt;log&lt;/code&gt; call by adding the &quot;&lt;code&gt;+&lt;/code&gt;&quot; operator:</source>
          <target state="translated">您可以通过添加&amp;ldquo; &lt;code&gt;+&lt;/code&gt; &amp;rdquo;运算符来更正 &lt;code&gt;log&lt;/code&gt; 调用：</target>
        </trans-unit>
        <trans-unit id="2d47b11d905b7e8e347e93eea226162b9eb15dad" translate="yes" xml:space="preserve">
          <source>You can correct the code by adding a * operator:</source>
          <target state="translated">你可以通过添加一个*操作符来修正代码。</target>
        </trans-unit>
        <trans-unit id="48caf0ee01b5ca7ab8102c4d8f32bd7265631396" translate="yes" xml:space="preserve">
          <source>You can create a function to be called in place of the default &lt;code&gt;toString()&lt;/code&gt; method. The &lt;code&gt;toString()&lt;/code&gt; method takes no arguments and should return a string. The &lt;code&gt;toString()&lt;/code&gt; method you create can be any value you want, but it will be most useful if it carries information about the object.</source>
          <target state="translated">您可以创建一个函数来代替默认的 &lt;code&gt;toString()&lt;/code&gt; 方法。的 &lt;code&gt;toString()&lt;/code&gt; 方法不带任何参数，并且应该返回一个字符串。您创建的 &lt;code&gt;toString()&lt;/code&gt; 方法可以是您想要的任何值，但是如果它包含有关对象的信息，则将是最有用的。</target>
        </trans-unit>
        <trans-unit id="b54b9cf6be7d32bae64b4fec9882c64efa21ea4d" translate="yes" xml:space="preserve">
          <source>You can create a function to be called in place of the default &lt;code&gt;valueOf&lt;/code&gt; method. Your function must take no arguments.</source>
          <target state="translated">您可以创建一个函数来代替默认的 &lt;code&gt;valueOf&lt;/code&gt; 方法。您的函数不得包含任何参数。</target>
        </trans-unit>
        <trans-unit id="d4de9a391f33f24797dd5017d2847898c49f510b" translate="yes" xml:space="preserve">
          <source>You can create any number of &lt;code&gt;car&lt;/code&gt; objects by calls to &lt;code&gt;new&lt;/code&gt;. For example:</source>
          <target state="translated">您可以通过调用 &lt;code&gt;new&lt;/code&gt; 来创建任意数量的 &lt;code&gt;car&lt;/code&gt; 对象。例如：</target>
        </trans-unit>
        <trans-unit id="b751a924648432df6f99c1b8aaf11266eb11ec63" translate="yes" xml:space="preserve">
          <source>You can create multiple masks from a set of &lt;code&gt;&lt;a href=&quot;../global_objects/boolean&quot;&gt;Boolean&lt;/a&gt;&lt;/code&gt; values, like this:</source>
          <target state="translated">您可以从一组 &lt;code&gt;&lt;a href=&quot;../global_objects/boolean&quot;&gt;Boolean&lt;/a&gt;&lt;/code&gt; 值创建多个掩码，如下所示：</target>
        </trans-unit>
        <trans-unit id="b2979b701f7b255728e6d776f2e2c5a70218a2b4" translate="yes" xml:space="preserve">
          <source>You can define a function with a name in a &lt;a href=&quot;../../operators/function&quot;&gt;function expression&lt;/a&gt;:</source>
          <target state="translated">您可以在&lt;a href=&quot;../../operators/function&quot;&gt;函数表达式中&lt;/a&gt;使用名称定义函数：</target>
        </trans-unit>
        <trans-unit id="02e9c413fdb49da942454c27f0bc5610cff6673b" translate="yes" xml:space="preserve">
          <source>You can define getters (accessor methods) and setters (mutator methods) on any standard built-in object or user-defined object that supports the addition of new properties. The syntax for defining getters and setters uses the object literal syntax.</source>
          <target state="translated">您可以在任何支持添加新属性的标准内置对象或用户定义对象上定义getter(访问器方法)和setter(突变器方法)。定义获取者和设置者的语法使用对象文字语法。</target>
        </trans-unit>
        <trans-unit id="c0f5bf037fc21f7dc91dec9aea53c656f556ff41" translate="yes" xml:space="preserve">
          <source>You can determine whether a function exists by using the &lt;code&gt;typeof&lt;/code&gt; operator. In the following example, a test is performed to determine if the &lt;code&gt;window&lt;/code&gt; object has a property called &lt;code&gt;noFunc&lt;/code&gt; that is a function. If so, it is used; otherwise, some other action is taken.</source>
          <target state="translated">您可以使用 &lt;code&gt;typeof&lt;/code&gt; 运算符确定函数是否存在。在下面的示例中，将执行测试以确定该 &lt;code&gt;window&lt;/code&gt; 对象是否具有称为函数的属性 &lt;code&gt;noFunc&lt;/code&gt; 。如果是这样，则使用它。否则，将采取其他措施。</target>
        </trans-unit>
        <trans-unit id="cd25f19d145ebf16f9e5027a666b54a865331abe" translate="yes" xml:space="preserve">
          <source>You can even use this method to access descendant properties. Using &lt;code&gt;eval()&lt;/code&gt; this would look like:</source>
          <target state="translated">您甚至可以使用此方法访问后代属性。使用 &lt;code&gt;eval()&lt;/code&gt; 看起来像：</target>
        </trans-unit>
        <trans-unit id="dbafe11ecd22563272e4730650686c7e8ba2a236" translate="yes" xml:space="preserve">
          <source>You can fix this by setting &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; as the prototype, for example:</source>
          <target state="translated">您可以通过将&lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;设置为原型来解决此问题，例如：</target>
        </trans-unit>
        <trans-unit id="f2fffdf635670bcef55191c76c0996c618be7ff1" translate="yes" xml:space="preserve">
          <source>You can get the size of a &lt;code&gt;Map&lt;/code&gt; easily with the &lt;code&gt;size&lt;/code&gt; property, while the number of properties in an &lt;code&gt;Object&lt;/code&gt; must be determined manually.</source>
          <target state="translated">您可以使用 &lt;code&gt;size&lt;/code&gt; 属性轻松获得 &lt;code&gt;Map&lt;/code&gt; 的大小，而 &lt;code&gt;Object&lt;/code&gt; 中的属性数量则必须手动确定。</target>
        </trans-unit>
        <trans-unit id="568f30787964ffc267883b92579ca50710eb20a0" translate="yes" xml:space="preserve">
          <source>You can ignore return values that you're not interested in:</source>
          <target state="translated">你可以忽略你不感兴趣的返回值。</target>
        </trans-unit>
        <trans-unit id="7157dad59b90e85a3b3f419977b9c7ec7ad7e48a" translate="yes" xml:space="preserve">
          <source>You can iterate over the &lt;a href=&quot;../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; object to examine all of the parameters passed into a JavaScript function:</source>
          <target state="translated">您可以遍历&lt;a href=&quot;../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;对象以检查传递给JavaScript函数的所有参数：</target>
        </trans-unit>
        <trans-unit id="a02f731a617113de512770227df1c80e5982f308" translate="yes" xml:space="preserve">
          <source>You can learn more about &lt;code&gt;WeakMap&lt;/code&gt;s in the section &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections#WeakMap_object&quot;&gt;WeakMap object&lt;/a&gt; in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections&quot;&gt;Keyed collections&lt;/a&gt;.</source>
          <target state="translated">您可以了解更多关于 &lt;code&gt;WeakMap&lt;/code&gt; 在切面S &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections#WeakMap_object&quot;&gt;WeakMap对象&lt;/a&gt;在&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections&quot;&gt;键控集合&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2668fedb84d9dd61e22ecd7eb9cbaaa53ef7746b" translate="yes" xml:space="preserve">
          <source>You can nest one or more &lt;code&gt;try&lt;/code&gt; statements. If an inner &lt;code&gt;try&lt;/code&gt; statement does not have a &lt;code&gt;catch&lt;/code&gt; clause, the enclosing &lt;code&gt;try&lt;/code&gt; statement's &lt;code&gt;catch&lt;/code&gt; clause is entered.</source>
          <target state="translated">您可以嵌套一个或多个 &lt;code&gt;try&lt;/code&gt; 语句。如果内部 &lt;code&gt;try&lt;/code&gt; 语句不具有 &lt;code&gt;catch&lt;/code&gt; 子句，则输入封闭的 &lt;code&gt;try&lt;/code&gt; 语句的 &lt;code&gt;catch&lt;/code&gt; 子句。</target>
        </trans-unit>
        <trans-unit id="72f80efa346346bf14528b366958a2e11db8b504" translate="yes" xml:space="preserve">
          <source>You can now either use the &lt;a href=&quot;../global_objects/date/tolocaledatestring&quot;&gt;&lt;code&gt;Date.prototype.toLocaleDateString&lt;/code&gt;&lt;/a&gt; method if you just want to format one date.</source>
          <target state="translated">现在，如果您只想格式化一个日期，则可以使用&lt;a href=&quot;../global_objects/date/tolocaledatestring&quot;&gt; &lt;code&gt;Date.prototype.toLocaleDateString&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="a9768f0f2f468470d5b6ee3a458bc4fe10981ab9" translate="yes" xml:space="preserve">
          <source>You can now use the standard &lt;a href=&quot;../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop to iterate over specified object keys, and get each value inside the loop:</source>
          <target state="translated">现在，您可以使用标准的&lt;a href=&quot;../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt;循环遍历指定的对象键，并在循环内获取每个值：</target>
        </trans-unit>
        <trans-unit id="90b6a7f3f327d8ae368fd7dbefbfe64b84000a34" translate="yes" xml:space="preserve">
          <source>You can partially work around this by inserting the following code at the beginning of your scripts, allowing use of much of the functionality of &lt;code&gt;bind()&lt;/code&gt; in implementations that do not natively support it.</source>
          <target state="translated">您可以通过在脚本的开头插入以下代码来部分解决此问题，从而允许在本来不支持它的实现中使用 &lt;code&gt;bind()&lt;/code&gt; 的许多功能。</target>
        </trans-unit>
        <trans-unit id="0d9c67f0cf4b685bdf8c0858020dc7898772549e" translate="yes" xml:space="preserve">
          <source>You can partially work around this by inserting the following code at the beginning of your scripts, allowing use of much of the functionality of from() in implementations that do not natively support it.</source>
          <target state="translated">你可以通过在脚本的开头插入下面的代码来部分解决这个问题,允许在不支持from()的实现中使用它的大部分功能。</target>
        </trans-unit>
        <trans-unit id="a569d7c0b8f9812d8691bb0fe4f87d6d1e148733" translate="yes" xml:space="preserve">
          <source>You can partially work around this by inserting the following code at the beginning of your scripts, allowing use of much of the functionality of transfer() in browsers that do not natively support it. This is not the exact equivalent of this API because browsers that natively support it are be able to internally use the C++ function realloc() which extends the length of the memory and only copies it to a new location as-needed as opposed to the following pollyfill which always copies the whole thing to a new space of memory, but this function transfers data from one ArrayBuffer to another ArrayBuffer.</source>
          <target state="translated">你可以通过在脚本的开头插入以下代码来部分解决这个问题,允许在不支持transfer()的浏览器中使用它的大部分功能。这并不完全等同于这个API,因为原生支持它的浏览器能够在内部使用C++函数realloc(),它扩展了内存的长度,并且只根据需要将其复制到新的位置,而不是下面的pollyfill,它总是将整个东西复制到一个新的内存空间,但是这个函数将数据从一个ArrayBuffer传输到另一个ArrayBuffer。</target>
        </trans-unit>
        <trans-unit id="ad5411059d3c48d8362f7f45665fcc625dcc8a43" translate="yes" xml:space="preserve">
          <source>You can pass any number of arguments to this function, and it adds each argument as a list item to a list of the type indicated. For example:</source>
          <target state="translated">你可以向这个函数传递任意数量的参数,它将每个参数作为一个列表项添加到一个指定类型的列表中。比如说,你可以将每个参数作为列表项添加到指定类型的列表中。</target>
        </trans-unit>
        <trans-unit id="7812a71871fa0bc7b22a78700973f32509d338e9" translate="yes" xml:space="preserve">
          <source>You can pass as many arguments as you like to this function. It returns a string list using each argument in the list:</source>
          <target state="translated">你可以向这个函数传递任意数量的参数。它使用列表中的每个参数返回一个字符串列表。</target>
        </trans-unit>
        <trans-unit id="f0e9625fea41da60cd583ddd9477134bfbbf8bdd" translate="yes" xml:space="preserve">
          <source>You can refer to a function's arguments within the function by using the &lt;code&gt;arguments&lt;/code&gt; object. See &lt;a href=&quot;functions/arguments&quot;&gt;arguments&lt;/a&gt;.</source>
          <target state="translated">您可以使用 &lt;code&gt;arguments&lt;/code&gt; 对象在函数内引用函数的参数。见&lt;a href=&quot;functions/arguments&quot;&gt;论点&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e8a436e5298fcec5e549858ece5538b1398b4a1f" translate="yes" xml:space="preserve">
          <source>You can reference elements in the array using standard array index syntax (that is, using bracket notation). However, getting or setting indexed properties on typed arrays will not search in the prototype chain for this property, even when the indices are out of bound. Indexed properties will consult the &lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; and will never look at object properties. You can still use named properties, just like with all objects.</source>
          <target state="translated">您可以使用标准数组索引语法（即，使用括号表示法）引用数组中的元素。但是，即使在索引超出范围的情况下，在类型化数组上获取或设置索引属性也不会在原型链中搜索该属性。带索引的属性将查询&lt;a href=&quot;arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; ,&lt;/a&gt;并且永远不会查看对象属性。您仍然可以像所有对象一样使用命名属性。</target>
        </trans-unit>
        <trans-unit id="83ebcf9d071ea5b1e80e47711db81ed5b95d9b0e" translate="yes" xml:space="preserve">
          <source>You can remove the initializer (&lt;code&gt;i = 0&lt;/code&gt;) in the head of the for-in loop.</source>
          <target state="translated">您可以在for-in循环的开头删除初始化程序（ &lt;code&gt;i = 0&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0173094e57c42a4341074bd7febf103c99a1d244" translate="yes" xml:space="preserve">
          <source>You can rename an export when importing it. For example, this inserts &lt;code&gt;shortName&lt;/code&gt; into the current scope.</source>
          <target state="translated">您可以在导入时重命名导出。例如，这 &lt;code&gt;shortName&lt;/code&gt; 插入当前作用域。</target>
        </trans-unit>
        <trans-unit id="2a6c917f8f0ba476ea36cda8782a860d7456f21c" translate="yes" xml:space="preserve">
          <source>You can set the &lt;code&gt;length&lt;/code&gt; property to truncate an array at any time. When you extend an array by changing its &lt;code&gt;length&lt;/code&gt; property, the number of actual elements increases; for example, if you set &lt;code&gt;length&lt;/code&gt; to 3 when it is currently 2, the array now contains 3 elements, which causes the third element to be &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">您可以设置 &lt;code&gt;length&lt;/code&gt; 属性以随时截断数组。通过更改数组的 &lt;code&gt;length&lt;/code&gt; 属性扩展数组时，实际元素的数量会增加；例如，如果在当前值为2时将 &lt;code&gt;length&lt;/code&gt; 设置为3，则数组现在包含3个元素，这将导致第三个元素 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6f95c37adecc2c4f5d5dac3883277ed51cd11fb9" translate="yes" xml:space="preserve">
          <source>You can specify a function as the second parameter. In this case, the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string. (Note: the above-mentioned special replacement patterns do &lt;em&gt;not&lt;/em&gt; apply in this case.) Note that the function will be invoked multiple times for each full match to be replaced if the regular expression in the first parameter is global.</source>
          <target state="translated">您可以将函数指定为第二个参数。在这种情况下，将在执行匹配后调用该函数。函数的结果（返回值）将用作替换字符串。（注意：上述特殊替换模式在这种情况下&lt;em&gt;不&lt;/em&gt;适用。）请注意，如果第一个参数中的正则表达式是全局的，则对于要替换的每个完全匹配将多次调用该函数。</target>
        </trans-unit>
        <trans-unit id="b1fdebe5fcb894f19808905ffb2d4a971ac93afb" translate="yes" xml:space="preserve">
          <source>You can specify an object when you throw an exception. You can then reference the object's properties in the &lt;code&gt;catch&lt;/code&gt; block. The following example creates an object of type &lt;code&gt;UserException&lt;/code&gt; and uses it in a &lt;code&gt;throw&lt;/code&gt; statement.</source>
          <target state="translated">引发异常时可以指定一个对象。然后，您可以在 &lt;code&gt;catch&lt;/code&gt; 块中引用对象的属性。下面的示例创建一个 &lt;code&gt;UserException&lt;/code&gt; 类型的对象，并在 &lt;code&gt;throw&lt;/code&gt; 语句中使用它。</target>
        </trans-unit>
        <trans-unit id="880b41debaa2b053cea98a0b1ceeddaf19608595" translate="yes" xml:space="preserve">
          <source>You can test both algorithms at the same time&amp;hellip;</source>
          <target state="translated">您可以同时测试这两种算法&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="8218a410bdaf517869e6f160b30c68f16d4b5d0c" translate="yes" xml:space="preserve">
          <source>You can then call these functions with the arguments you like:</source>
          <target state="translated">然后你可以用你喜欢的参数调用这些函数。</target>
        </trans-unit>
        <trans-unit id="982a7ce7238adc648f56181afac8937e3d2377d5" translate="yes" xml:space="preserve">
          <source>You can then grow the table by 1 with the following:</source>
          <target state="translated">然后你可以用下面的方法将表格增长1。</target>
        </trans-unit>
        <trans-unit id="53fcc05426701d2e2d38c28950ae2e8a2b1512ce" translate="yes" xml:space="preserve">
          <source>You can think of the returned object as an &quot;interpreter&quot; of the array buffer of bytes &amp;mdash; it knows how to convert numbers to fit within the buffer correctly, both when reading and writing to it. This means handling integer and float conversion, endianness, and other details of representing numbers in binary form.</source>
          <target state="translated">您可以将返回的对象视为字节数组缓冲区的&amp;ldquo;解释器&amp;rdquo;-它知道如何在读写时将数字正确转换为适合缓冲区的范围。这意味着要处理整数和浮点数转换，字节序以及其他以二进制形式表示数字的细节。</target>
        </trans-unit>
        <trans-unit id="412d31e7fa161aacf982259298fb584c4aa6c72c" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;const&quot;&gt;&lt;code&gt;const&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;let&quot;&gt;&lt;code&gt;let&lt;/code&gt;&lt;/a&gt; too, if you don't reassign the variable inside the block.</source>
          <target state="translated">如果不在块内重新分配变量，则可以使用&lt;a href=&quot;const&quot;&gt; &lt;code&gt;const&lt;/code&gt; &lt;/a&gt;而不是&lt;a href=&quot;let&quot;&gt; &lt;code&gt;let&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b89a92de1606fa745e6625e2bb7cb39bb11f284f" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;&lt;a href=&quot;arguments/length&quot;&gt;arguments.length&lt;/a&gt;&lt;/code&gt; to count how many arguments the function was called with. If you instead want to count how many parameters a function is declared to accept, inspect that function's &lt;code&gt;&lt;a href=&quot;../global_objects/function/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">您可以使用 &lt;code&gt;&lt;a href=&quot;arguments/length&quot;&gt;arguments.length&lt;/a&gt;&lt;/code&gt; 来计算调用该函数的参数数量。相反，如果要计算一个函数声明要接受多少个参数，请检查该函数的 &lt;code&gt;&lt;a href=&quot;../global_objects/function/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="d70680cf68dd06bf6d9d84477abcb14a645a2cc3" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;apply&lt;/code&gt; to chain &lt;a href=&quot;../../operators/new&quot;&gt;constructors&lt;/a&gt; for an object, similar to Java. In the following example we will create a global &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; method called &lt;code&gt;construct&lt;/code&gt;, which will enable you to use an array-like object with a constructor instead of an arguments list.</source>
          <target state="translated">您可以将 &lt;code&gt;apply&lt;/code&gt; 应用于对象的链&lt;a href=&quot;../../operators/new&quot;&gt;构造&lt;/a&gt;函数，类似于Java。在下面的示例中，我们将创建一个名为 &lt;code&gt;construct&lt;/code&gt; 的全局&lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt;方法，该方法使您可以将类似数组的对象与构造函数一起使用，而不是参数列表。</target>
        </trans-unit>
        <trans-unit id="0a22149b54ca97b6d7cb345e41275e84da84c360" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;call&lt;/code&gt; to chain constructors for an object, similar to Java. In the following example, the constructor for the &lt;code&gt;Product&lt;/code&gt; object is defined with two parameters, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt;. Two other functions &lt;code&gt;Food&lt;/code&gt; and &lt;code&gt;Toy&lt;/code&gt; invoke &lt;code&gt;Product&lt;/code&gt; passing &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt;. Product initializes the properties &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt;, both specialized functions define the &lt;code&gt;category&lt;/code&gt;.</source>
          <target state="translated">您可以使用 &lt;code&gt;call&lt;/code&gt; 来链接对象的构造函数，类似于Java。在以下示例中，使用两个参数（ &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;price&lt;/code&gt; ）定义了 &lt;code&gt;Product&lt;/code&gt; 对象的构造函数。另外两个功能 &lt;code&gt;Food&lt;/code&gt; 和 &lt;code&gt;Toy&lt;/code&gt; 调用 &lt;code&gt;Product&lt;/code&gt; 通过 &lt;code&gt;this&lt;/code&gt; 和 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;price&lt;/code&gt; 。产品初始化属性 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;price&lt;/code&gt; ，两个专用功能定义 &lt;code&gt;category&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8ab637261e59cb82430239192fc807adb7614b1b" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;obj.constructor.name&lt;/code&gt; to check the &quot;class&quot; of an object (but be sure to read the warnings below):</source>
          <target state="translated">您可以使用 &lt;code&gt;obj.constructor.name&lt;/code&gt; 来检查对象的&amp;ldquo;类&amp;rdquo;（但请务必阅读以下警告）：</target>
        </trans-unit>
        <trans-unit id="5f866fc79602a0dfeea409f24e451b76b674ad43" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;throw&lt;/code&gt; to rethrow an exception after you catch it. The following example catches an exception with a numeric value and rethrows it if the value is over 50. The rethrown exception propagates up to the enclosing function or to the top level so that the user sees it.</source>
          <target state="translated">捕获异常后，可以使用 &lt;code&gt;throw&lt;/code&gt; 抛出异常。下面的示例捕获一个带有数字值的异常，如果该值超过50，则将其重新抛出。重新抛出的异常会传播到封闭函数或顶层，以便用户看到。</target>
        </trans-unit>
        <trans-unit id="1ed0d29dc358cd9fffe7a1749c0b4d3215a3cb81" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;undefined&lt;/code&gt; and the strict equality and inequality operators to determine whether a variable has a value. In the following code, the variable &lt;code&gt;x&lt;/code&gt; is not defined, and the &lt;code&gt;if&lt;/code&gt; statement evaluates to true.</source>
          <target state="translated">您可以使用 &lt;code&gt;undefined&lt;/code&gt; 以及严格的等于和不等于运算符来确定变量是否具有值。在以下代码中，未定义变量 &lt;code&gt;x&lt;/code&gt; ，并且 &lt;code&gt;if&lt;/code&gt; 语句的值为true。</target>
        </trans-unit>
        <trans-unit id="babb811832c225dfe18270ac844077d76f34b11c" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;valueOf&lt;/code&gt; within your own code to convert a built-in object into a primitive value. When you create a custom object, you can override &lt;code&gt;Object.prototype.valueOf()&lt;/code&gt; to call a custom method instead of the default &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">您可以在自己的代码中使用 &lt;code&gt;valueOf&lt;/code&gt; 将内置对象转换为原始值。创建自定义对象时，可以重写 &lt;code&gt;Object.prototype.valueOf()&lt;/code&gt; 来调用自定义方法，而不是默认的&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="3a98c5a0a2f2bae8b2f10e6201c7224bd664896a" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;watch&lt;/code&gt; to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200.</source>
          <target state="translated">您可以使用 &lt;code&gt;watch&lt;/code&gt; 来测试对对象属性的任何分配。此示例确保每个人始终具有有效的姓名，并且年龄在0到200之间。</target>
        </trans-unit>
        <trans-unit id="b7fa3cb872411b2530986b056c49dfa860257589" translate="yes" xml:space="preserve">
          <source>You can use a &lt;a href=&quot;../operators/function&quot;&gt;function expression&lt;/a&gt; (assignment) instead:</source>
          <target state="translated">您可以改用&lt;a href=&quot;../operators/function&quot;&gt;函数表达式&lt;/a&gt;（赋值）：</target>
        </trans-unit>
        <trans-unit id="d53f5b375e12b4f4423388672f3498c3b8dd5d4b" translate="yes" xml:space="preserve">
          <source>You can use a label to identify a loop, and then use the &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; statements to indicate whether a program should interrupt the loop or continue its execution.</source>
          <target state="translated">您可以使用标签标识循环，然后使用 &lt;code&gt;break&lt;/code&gt; 或 &lt;code&gt;continue&lt;/code&gt; 语句指示程序是应中断循环还是继续执行。</target>
        </trans-unit>
        <trans-unit id="026585d209a85d4657f35baf2d4fb41e219dac7d" translate="yes" xml:space="preserve">
          <source>You can use default value assignment with the &lt;a href=&quot;../operators/destructuring_assignment&quot;&gt;destructuring assignment&lt;/a&gt; notation:</source>
          <target state="translated">您可以将默认值分配与&lt;a href=&quot;../operators/destructuring_assignment&quot;&gt;解构分配&lt;/a&gt;符号一起使用：</target>
        </trans-unit>
        <trans-unit id="da107e47110084bbf0a6887f2fc8f6d2b2cd0134" translate="yes" xml:space="preserve">
          <source>You can use double quotes, or escape the apostrophe:</source>
          <target state="translated">你可以使用双引号,也可以使用撇号。</target>
        </trans-unit>
        <trans-unit id="a5e579c93fc2da62d31bd7842478a0aaffe1270c" translate="yes" xml:space="preserve">
          <source>You can use labels within simple blocks, but only &lt;code&gt;break&lt;/code&gt; statements can make use of non-loop labels.</source>
          <target state="translated">您可以在简单的块中使用标签，但是只有 &lt;code&gt;break&lt;/code&gt; 语句可以使用非循环标签。</target>
        </trans-unit>
        <trans-unit id="f07968fbf5519b539e7ae19bf37330c4f2c4909e" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;../operators/arithmetic_operators#Addition_()&quot;&gt;+&lt;/a&gt; operator to append multiple strings together, like this:</source>
          <target state="translated">您可以使用&lt;a href=&quot;../operators/arithmetic_operators#Addition_()&quot;&gt;+&lt;/a&gt;运算符将多个字符串附加在一起，如下所示：</target>
        </trans-unit>
        <trans-unit id="619f1ffa11e81ab074af908a0f9e462d11604d45" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;finally&lt;/code&gt; clause to make your script fail gracefully when an exception occurs; for example, to do general cleanup, you may need to release a resource that your script has tied up.</source>
          <target state="translated">您可以使用 &lt;code&gt;finally&lt;/code&gt; 子句使脚本在发生异常时优雅地失败。例如，要进行常规清理，您可能需要释放脚本已占用的资源。</target>
        </trans-unit>
        <trans-unit id="317a8f66d2786e357ed707301781693f16d9e65d" translate="yes" xml:space="preserve">
          <source>You can use the comma operator when you want to include multiple expressions in a location that requires a single expression. The most common usage of this operator is to supply multiple parameters in a &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">要在需要单个表达式的位置中包含多个表达式时，可以使用逗号运算符。该运算符最常见的用法是在 &lt;code&gt;for&lt;/code&gt; 循环中提供多个参数。</target>
        </trans-unit>
        <trans-unit id="2e21711833232d72cacd53f5637e57865a69a1e8" translate="yes" xml:space="preserve">
          <source>You can use this function to determine whether a number is a finite number. The &lt;code&gt;isFinite&lt;/code&gt; function examines the number in its argument. If the argument is &lt;code&gt;NaN&lt;/code&gt;, positive infinity, or negative infinity, this method returns &lt;code&gt;false&lt;/code&gt;; otherwise, it returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">您可以使用此函数来确定数字是否为有限数。该 &lt;code&gt;isFinite&lt;/code&gt; 的功能会检查其参数的数量。如果参数为 &lt;code&gt;NaN&lt;/code&gt; ，正无穷大或负无穷大，则此方法返回 &lt;code&gt;false&lt;/code&gt; 。否则，返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1cf9c3cec34c89c057a1947c5e82be3a4be1b6a" translate="yes" xml:space="preserve">
          <source>You can use this method to help assign a date and time to another &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object. This method is functionally equivalent to the &lt;a href=&quot;valueof&quot;&gt;&lt;code&gt;valueOf()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">您可以使用此方法来帮助将日期和时间分配给另一个&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;对象。此方法在功能上等效于&lt;a href=&quot;valueof&quot;&gt; &lt;code&gt;valueOf()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="9bc13dc4e9ed8e67bdbdaec51c0d8b47713a505a" translate="yes" xml:space="preserve">
          <source>You can use this, for example, to test whether an argument to a function is arithmetically processable (usable &quot;like&quot; a number), or if it's not and you have to provide a default value or something else. This way you can have a function that makes use of the full versatility JavaScript provides by implicitly converting values depending on context.</source>
          <target state="translated">例如,你可以使用这个函数来测试一个函数的参数是否可以进行算术处理(像一个数字一样可以使用),或者如果它不是,你必须提供一个默认值或其他东西。这样你就可以拥有一个函数,通过隐式地根据上下文转换值来充分利用JavaScript提供的多功能性。</target>
        </trans-unit>
        <trans-unit id="e32dbc053f55eb07f3103010b093c867e0ed46ee" translate="yes" xml:space="preserve">
          <source>You can work around this limitation in a generic fashion by using &lt;code&gt;toString()&lt;/code&gt;.</source>
          <target state="translated">您可以使用 &lt;code&gt;toString()&lt;/code&gt; 以一般方式解决此限制。</target>
        </trans-unit>
        <trans-unit id="d7dba08a77bf7846cd79df09bf682dbeb8d92449" translate="yes" xml:space="preserve">
          <source>You can't create empty properties like this:</source>
          <target state="translated">你不能创建这样的空属性。</target>
        </trans-unit>
        <trans-unit id="b22d504155865fec103eee7f76e6b0a736b4e36f" translate="yes" xml:space="preserve">
          <source>You can't split a string across multiple lines like this in JavaScript:</source>
          <target state="translated">在JavaScript中,你不能像这样把一个字符串分割成多行。</target>
        </trans-unit>
        <trans-unit id="913fb2c129b5053febffe5e8ba2615316011ea52" translate="yes" xml:space="preserve">
          <source>You cannot call this method on &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; (via &lt;code&gt;Function.prototype.call&lt;/code&gt;, for example) , if you do, a &lt;code&gt;TypeError&lt;/code&gt; will be thrown.</source>
          <target state="translated">您不能以 &lt;code&gt;null&lt;/code&gt; 或 &lt;code&gt;undefined&lt;/code&gt; 方式调用此方法（例如，通过 &lt;code&gt;Function.prototype.call&lt;/code&gt; ），如果这样做，则将引发 &lt;code&gt;TypeError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f18587e9922b80a8474ea53d8bbb55824d129cb" translate="yes" xml:space="preserve">
          <source>You cannot change the name of a function, this property is read-only:</source>
          <target state="translated">你不能改变函数的名称,这个属性是只读的。</target>
        </trans-unit>
        <trans-unit id="f5bd0c333ece534ddcab3372988e172539c11088" translate="yes" xml:space="preserve">
          <source>You cannot change this property directly.</source>
          <target state="translated">你不能直接改变这个属性。</target>
        </trans-unit>
        <trans-unit id="78ec854087b07b9694daa44e389e4b5e84f29ee2" translate="yes" xml:space="preserve">
          <source>You cannot change this property directly. It is read-only.</source>
          <target state="translated">您不能直接更改此属性。它是只读的。</target>
        </trans-unit>
        <trans-unit id="7d737b87e793a6a6369e3fd1f0fc4f408a066736" translate="yes" xml:space="preserve">
          <source>You cannot use leading zeros, like 01, and decimal points must be followed by at least one digit.</source>
          <target state="translated">你不能使用前导零,比如01,而且小数点后面必须至少有一个数字。</target>
        </trans-unit>
        <trans-unit id="a2437fa6d924ccdbf76b10be37cf8f08224f8de1" translate="yes" xml:space="preserve">
          <source>You cannot use single-quotes around properties, like 'foo'.</source>
          <target state="translated">你不能在属性周围使用单引号,比如'foo'。</target>
        </trans-unit>
        <trans-unit id="c654f1adebc1b467ec4102e66d502dca9b3fe1e2" translate="yes" xml:space="preserve">
          <source>You cannot use the &lt;a href=&quot;delete&quot;&gt;delete operator&lt;/a&gt; and &lt;code&gt;super.prop&lt;/code&gt; or &lt;code&gt;super[expr]&lt;/code&gt; to delete a parent class' property, it will throw a &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">您不能使用&lt;a href=&quot;delete&quot;&gt;delete运算符&lt;/a&gt;和 &lt;code&gt;super.prop&lt;/code&gt; 或 &lt;code&gt;super[expr]&lt;/code&gt; 来删除父类的属性，它将抛出&lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="653a30be3788ccc85c03c48adade3f1590b9df33" translate="yes" xml:space="preserve">
          <source>You could implement your custom &lt;code&gt;instanceof&lt;/code&gt; behavior like this, for example:</source>
          <target state="translated">您可以实现这样的自定义 &lt;code&gt;instanceof&lt;/code&gt; 行为，例如：</target>
        </trans-unit>
        <trans-unit id="4506a651a35fb4ed386eb314c8b525cb2399b070" translate="yes" xml:space="preserve">
          <source>You do not have to create a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object to access this static property (use &lt;code&gt;Number.EPSILON&lt;/code&gt;).</source>
          <target state="translated">您不必创建&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;对象即可访问此静态属性（使用 &lt;code&gt;Number.EPSILON&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d46bc4e4fafb1ec71a9a790cf30f896e3c3c0910" translate="yes" xml:space="preserve">
          <source>You do not have to create a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object to access this static property (use &lt;code&gt;Number.NEGATIVE_INFINITY&lt;/code&gt;).</source>
          <target state="translated">您不必创建&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;对象即可访问此静态属性（使用 &lt;code&gt;Number.NEGATIVE_INFINITY&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6d1fcc507e2c8d83dbcdbc5214fdfb2a2203cb6e" translate="yes" xml:space="preserve">
          <source>You do not have to create a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object to access this static property (use &lt;code&gt;Number.NaN&lt;/code&gt;).</source>
          <target state="translated">您不必创建&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;对象即可访问此静态属性（使用 &lt;code&gt;Number.NaN&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="baf1f37a5f52cfd0b1c1c34da534f9e662b7c57f" translate="yes" xml:space="preserve">
          <source>You do not have to create a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object to access this static property (use &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt;).</source>
          <target state="translated">您不必创建&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt;对象即可访问此静态属性（使用 &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1a7b47683b6212ede8025f5ae1b64fb99b46df73" translate="yes" xml:space="preserve">
          <source>You either need to remove the &lt;a href=&quot;../global_objects/object/seal&quot;&gt;&lt;code&gt;Object.seal()&lt;/code&gt;&lt;/a&gt; call, or make a copy of it. In case of a copy, shortening the copy of the array does not modify the original array length.</source>
          <target state="translated">您要么需要删除&lt;a href=&quot;../global_objects/object/seal&quot;&gt; &lt;code&gt;Object.seal()&lt;/code&gt; &lt;/a&gt;调用，要么对其进行复制。如果是副本，则缩短数组的副本不会更改原始数组的长度。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
