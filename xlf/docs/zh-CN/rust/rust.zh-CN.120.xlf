<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="f4251e0f413cd3f41f3df9bb22d15a8115a98157" translate="yes" xml:space="preserve">
          <source>LAST(&lt;code&gt;$( $d:ident $e:expr );* $(h)*&lt;/code&gt;) = { &lt;code&gt;$e:expr&lt;/code&gt;, &amp;epsilon;, &lt;code&gt;h&lt;/code&gt; }</source>
          <target state="translated">LAST（ &lt;code&gt;$( $d:ident $e:expr );* $(h)*&lt;/code&gt; ）= { &lt;code&gt;$e:expr&lt;/code&gt; ，&amp;epsilon;， &lt;code&gt;h&lt;/code&gt; }</target>
        </trans-unit>
        <trans-unit id="7ff61fa787f2c62adc8ee173405366e66cca6711" translate="yes" xml:space="preserve">
          <source>LAST(&lt;code&gt;$( $d:ident $e:expr );*&lt;/code&gt;) = { &lt;code&gt;$e:expr&lt;/code&gt;, &amp;epsilon; }</source>
          <target state="translated">LAST（ &lt;code&gt;$( $d:ident $e:expr );*&lt;/code&gt; ）= { &lt;code&gt;$e:expr&lt;/code&gt; ，&amp;epsilon;}</target>
        </trans-unit>
        <trans-unit id="37aef063f183280d4f7dc041920c02a28b503744" translate="yes" xml:space="preserve">
          <source>LAST(&lt;code&gt;$d:ident $e:expr&lt;/code&gt;) = { &lt;code&gt;$e:expr&lt;/code&gt; }</source>
          <target state="translated">LAST（ &lt;code&gt;$d:ident $e:expr&lt;/code&gt; ）= { &lt;code&gt;$e:expr&lt;/code&gt; }</target>
        </trans-unit>
        <trans-unit id="7fab544af8af2c23b62871343f4c928563121b43" translate="yes" xml:space="preserve">
          <source>LAST(M), defined by case analysis on M itself (a sequence of token-trees):</source>
          <target state="translated">LAST(M),由M本身的案例分析定义(token-trees序列)。</target>
        </trans-unit>
        <trans-unit id="f85099a357b111ba1d477f0dbd426a597f6e3435" translate="yes" xml:space="preserve">
          <source>LAST(M): collects the tokens potentially used last when matching a fragment to M.</source>
          <target state="translated">LAST(M):收集在将一个片段与M匹配时可能最后使用的标记。</target>
        </trans-unit>
        <trans-unit id="e8ea6b99f854e01dbe363d86b29cecae5304f225" translate="yes" xml:space="preserve">
          <source>LIFETIME_OR_LABEL</source>
          <target state="translated">LIFETIME_OR_LABEL</target>
        </trans-unit>
        <trans-unit id="40a1fdbb26c080098fc98bb4705851d4859ab4d3" translate="yes" xml:space="preserve">
          <source>LIFETIME_OR_LABEL :</source>
          <target state="translated">LIFETIME_OR_LABEL 。</target>
        </trans-unit>
        <trans-unit id="46318a9c5b3843dedcc74d3eda791e4202987f7e" translate="yes" xml:space="preserve">
          <source>LIFETIME_TOKEN :</source>
          <target state="translated">LIFETIME_TOKEN :</target>
        </trans-unit>
        <trans-unit id="ed2747925f72878526dce1d4b02fb7c509e9b22b" translate="yes" xml:space="preserve">
          <source>LINE_COMMENT :</source>
          <target state="translated">LINE_COMMENT :</target>
        </trans-unit>
        <trans-unit id="f87b1be490e7f2bd1d43aa401d9acb86c892b5d9" translate="yes" xml:space="preserve">
          <source>LLVM checks the validity of the constraints and the assembly string passed to it. This error implies that LLVM seems something wrong with the inline assembly call.</source>
          <target state="translated">LLVM检查约束条件和传递给它的汇编字符串的有效性。这个错误意味着LLVM的内联装配体调用似乎有问题。</target>
        </trans-unit>
        <trans-unit id="9b658c08127be6d116e98bc8876055e873db0602" translate="yes" xml:space="preserve">
          <source>LLVM-style inline assembly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c275bc5d1a4e6d0414829b996cfcec4698e44c4" translate="yes" xml:space="preserve">
          <source>LN_10</source>
          <target state="translated">LN_10</target>
        </trans-unit>
        <trans-unit id="6a259766cb7d3ece474214d8a5b06e89f14ab44c" translate="yes" xml:space="preserve">
          <source>LN_2</source>
          <target state="translated">LN_2</target>
        </trans-unit>
        <trans-unit id="98673bb5e17015cbf16ed84d89d8f970845d818b" translate="yes" xml:space="preserve">
          <source>LOG10_2</source>
          <target state="translated">LOG10_2</target>
        </trans-unit>
        <trans-unit id="66e6842f3da223e16de827da3acf936ddc9d0df5" translate="yes" xml:space="preserve">
          <source>LOG10_E</source>
          <target state="translated">LOG10_E</target>
        </trans-unit>
        <trans-unit id="615a1422d501618265e393e3550ecb5f40f525ea" translate="yes" xml:space="preserve">
          <source>LOG2_10</source>
          <target state="translated">LOG2_10</target>
        </trans-unit>
        <trans-unit id="1e3656097aebf0f10597eae43f1c807651a96817" translate="yes" xml:space="preserve">
          <source>LOG2_E</source>
          <target state="translated">LOG2_E</target>
        </trans-unit>
        <trans-unit id="64b87b109e5db684a74aa921ff29dc63050bf704" translate="yes" xml:space="preserve">
          <source>Lang items are already implemented in the standard library. Unless you are writing a free-standing application (e.g., a kernel), you do not need to provide them yourself.</source>
          <target state="translated">Lang项目已经在标准库中实现了。除非你正在编写一个独立的应用程序(例如,内核),否则你不需要自己提供它们。</target>
        </trans-unit>
        <trans-unit id="ec882b1a036e4071e5191bd244e46720429e3479" translate="yes" xml:space="preserve">
          <source>Languages without case are not changed:</source>
          <target state="translated">没有大小写的语言不改变。</target>
        </trans-unit>
        <trans-unit id="8f3396549fa1fe2041e1f31d203c0b16d63a7207" translate="yes" xml:space="preserve">
          <source>Large amounts of data are being stored</source>
          <target state="translated">大量的数据正在被存储</target>
        </trans-unit>
        <trans-unit id="d3612663cc19e49c3a2d261d922690a9fc7582ed" translate="yes" xml:space="preserve">
          <source>Largest finite &lt;code&gt;f32&lt;/code&gt; value.</source>
          <target state="translated">最大的有限 &lt;code&gt;f32&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="cdef2a389723afff7da4b608a1325e2bd13839b5" translate="yes" xml:space="preserve">
          <source>Largest finite &lt;code&gt;f32&lt;/code&gt; value. Use &lt;a href=&quot;../primitive.f32#associatedconstant.MAX&quot;&gt;&lt;code&gt;f32::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f275a12dc16bf46e1c9b02d6b9bdd0fdd3cd4f44" translate="yes" xml:space="preserve">
          <source>Largest finite &lt;code&gt;f64&lt;/code&gt; value.</source>
          <target state="translated">最大的有限 &lt;code&gt;f64&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="caa7ded1cda53ab540342fa3edd4f2916d1b87b9" translate="yes" xml:space="preserve">
          <source>Largest finite &lt;code&gt;f64&lt;/code&gt; value. Use &lt;a href=&quot;../primitive.f64#associatedconstant.MAX&quot;&gt;&lt;code&gt;f64::MAX&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58d72036ad47fa0a1439cec22ee87f753fd7e3f" translate="yes" xml:space="preserve">
          <source>Last, but certainly not least, is &lt;a href=&quot;type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt;. This type is used as the return type of many &lt;code&gt;std::io&lt;/code&gt; functions that can cause an error, and can be returned from your own functions as well. Many of the examples in this module use the &lt;a href=&quot;../../book/appendix-02-operators&quot;&gt;&lt;code&gt;?&lt;/code&gt; operator&lt;/a&gt;:</source>
          <target state="translated">最后但并非最不重要的是&lt;a href=&quot;type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt;。此类型用作许多 &lt;code&gt;std::io&lt;/code&gt; 函数的返回类型，这些函数可能会导致错误，也可以从您自己的函数中返回。此模块中的许多示例都使用&lt;a href=&quot;../../book/appendix-02-operators&quot;&gt; &lt;code&gt;?&lt;/code&gt; 。操作员&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="972ad8d8a50397ba8c02433ed8f048eeb4074b85" translate="yes" xml:space="preserve">
          <source>Layout</source>
          <target state="translated">Layout</target>
        </trans-unit>
        <trans-unit id="ae8568d10c64dba6b746ac76005e66dab74cb9ab" translate="yes" xml:space="preserve">
          <source>Layout of a block of memory.</source>
          <target state="translated">一个内存块的布局。</target>
        </trans-unit>
        <trans-unit id="7d4179a87c3ab99e827a9f6e1aa71781644d0b85" translate="yes" xml:space="preserve">
          <source>Layout::align</source>
          <target state="translated">Layout::align</target>
        </trans-unit>
        <trans-unit id="2b7cae98e285326dfa8874cd827b7060dafbb97f" translate="yes" xml:space="preserve">
          <source>Layout::align_to</source>
          <target state="translated">Layout::align_to</target>
        </trans-unit>
        <trans-unit id="6ffbac24ba5cb9cdd880e70819658687db1a163d" translate="yes" xml:space="preserve">
          <source>Layout::array</source>
          <target state="translated">Layout::array</target>
        </trans-unit>
        <trans-unit id="faf545bb524583c428a14d8796fd332e8b1f4538" translate="yes" xml:space="preserve">
          <source>Layout::borrow</source>
          <target state="translated">Layout::borrow</target>
        </trans-unit>
        <trans-unit id="6e7c904826d6356b87a5fd10b67922e27e248f36" translate="yes" xml:space="preserve">
          <source>Layout::borrow_mut</source>
          <target state="translated">Layout::borrow_mut</target>
        </trans-unit>
        <trans-unit id="e98c55355125dbd6a52d2480ae5f678bafc47354" translate="yes" xml:space="preserve">
          <source>Layout::clone</source>
          <target state="translated">Layout::clone</target>
        </trans-unit>
        <trans-unit id="2687d55f8151ff4e3d3dfd56105fc50d005dbef6" translate="yes" xml:space="preserve">
          <source>Layout::clone_from</source>
          <target state="translated">Layout::clone_from</target>
        </trans-unit>
        <trans-unit id="d247f8af0b3641c1febfca5a66104f7e6cd7ae07" translate="yes" xml:space="preserve">
          <source>Layout::clone_into</source>
          <target state="translated">Layout::clone_into</target>
        </trans-unit>
        <trans-unit id="28c4c39a207293b5ac856dadaca01591e69acdf2" translate="yes" xml:space="preserve">
          <source>Layout::eq</source>
          <target state="translated">Layout::eq</target>
        </trans-unit>
        <trans-unit id="807fbd84446164c635ef92d05b4f032e4e469c63" translate="yes" xml:space="preserve">
          <source>Layout::extend</source>
          <target state="translated">Layout::extend</target>
        </trans-unit>
        <trans-unit id="8a66e95e85ef65243dad3fec906d59a444e63307" translate="yes" xml:space="preserve">
          <source>Layout::extend_packed</source>
          <target state="translated">Layout::extend_packed</target>
        </trans-unit>
        <trans-unit id="ebdf1907153114cac58ba5ec846d319f09e3c275" translate="yes" xml:space="preserve">
          <source>Layout::fmt</source>
          <target state="translated">Layout::fmt</target>
        </trans-unit>
        <trans-unit id="aab6fc5da3370994e8eb6ae5619aeb20b2942b01" translate="yes" xml:space="preserve">
          <source>Layout::for_value</source>
          <target state="translated">Layout::for_value</target>
        </trans-unit>
        <trans-unit id="804e6daf71de8cbddc2847d4efac40f08b730f12" translate="yes" xml:space="preserve">
          <source>Layout::from</source>
          <target state="translated">Layout::from</target>
        </trans-unit>
        <trans-unit id="9c52da202dbc1e86eb154e999a408fd8e5fbffba" translate="yes" xml:space="preserve">
          <source>Layout::from_size_align</source>
          <target state="translated">Layout::from_size_align</target>
        </trans-unit>
        <trans-unit id="97f7ac20412edfee9be62fc236598951052b803a" translate="yes" xml:space="preserve">
          <source>Layout::from_size_align_unchecked</source>
          <target state="translated">Layout::from_size_align_unchecked</target>
        </trans-unit>
        <trans-unit id="9cb8530d3128b6bd4c274c8e7e0e34f2f70b863a" translate="yes" xml:space="preserve">
          <source>Layout::into</source>
          <target state="translated">Layout::into</target>
        </trans-unit>
        <trans-unit id="e888b6d02ea4794c5fef327a295c976cc60f99e3" translate="yes" xml:space="preserve">
          <source>Layout::ne</source>
          <target state="translated">Layout::ne</target>
        </trans-unit>
        <trans-unit id="f8038f15aebe6dce4d4de95b3c13e472d2b02064" translate="yes" xml:space="preserve">
          <source>Layout::new</source>
          <target state="translated">Layout::new</target>
        </trans-unit>
        <trans-unit id="c67933e7b53ec19707602158f0983ec3386107e4" translate="yes" xml:space="preserve">
          <source>Layout::pad_to_align</source>
          <target state="translated">Layout::pad_to_align</target>
        </trans-unit>
        <trans-unit id="fb534b2d9180d9c41c85be4f3cc7a5e10900d871" translate="yes" xml:space="preserve">
          <source>Layout::padding_needed_for</source>
          <target state="translated">Layout::padding_needed_for</target>
        </trans-unit>
        <trans-unit id="a53e256b922777e3d8b52ed41502d58861453b8a" translate="yes" xml:space="preserve">
          <source>Layout::repeat</source>
          <target state="translated">Layout::repeat</target>
        </trans-unit>
        <trans-unit id="ac76fcd730f9145d3ef5771a73793f24557f189a" translate="yes" xml:space="preserve">
          <source>Layout::repeat_packed</source>
          <target state="translated">Layout::repeat_packed</target>
        </trans-unit>
        <trans-unit id="39b88a7f119bc78ddb9f4adea7781765100ba7de" translate="yes" xml:space="preserve">
          <source>Layout::size</source>
          <target state="translated">Layout::size</target>
        </trans-unit>
        <trans-unit id="4fc54c6aa1d00c912811a3198ba6c26a31cb141d" translate="yes" xml:space="preserve">
          <source>Layout::to_owned</source>
          <target state="translated">Layout::to_owned</target>
        </trans-unit>
        <trans-unit id="ec3e4dd97b8bdfbb69e8e8a4fe407933742763da" translate="yes" xml:space="preserve">
          <source>Layout::try_from</source>
          <target state="translated">Layout::try_from</target>
        </trans-unit>
        <trans-unit id="e7254c8b2c904f17a579a6512de1c3f53903e338" translate="yes" xml:space="preserve">
          <source>Layout::try_into</source>
          <target state="translated">Layout::try_into</target>
        </trans-unit>
        <trans-unit id="69613b626753f65b515ca28b5fe4fd7436a0a88d" translate="yes" xml:space="preserve">
          <source>Layout::type_id</source>
          <target state="translated">Layout::type_id</target>
        </trans-unit>
        <trans-unit id="6b15514a909ca7b027740ad8a4c4fe6fbfdeead1" translate="yes" xml:space="preserve">
          <source>LayoutErr</source>
          <target state="translated">LayoutErr</target>
        </trans-unit>
        <trans-unit id="18ae5986925972906df162748403c4571a3bd382" translate="yes" xml:space="preserve">
          <source>LayoutErr::borrow</source>
          <target state="translated">LayoutErr::borrow</target>
        </trans-unit>
        <trans-unit id="92579002fabcdb4525eb6353397c1fc960583290" translate="yes" xml:space="preserve">
          <source>LayoutErr::borrow_mut</source>
          <target state="translated">LayoutErr::borrow_mut</target>
        </trans-unit>
        <trans-unit id="1c9995b499c2000f5ea89f003f69988ad4d9295a" translate="yes" xml:space="preserve">
          <source>LayoutErr::cause</source>
          <target state="translated">LayoutErr::cause</target>
        </trans-unit>
        <trans-unit id="8694453e9f4b16d83cc25ab2975ab170ff1ad8c9" translate="yes" xml:space="preserve">
          <source>LayoutErr::clone</source>
          <target state="translated">LayoutErr::clone</target>
        </trans-unit>
        <trans-unit id="b630e1b5713feb7087721a06315e5b984a418a6f" translate="yes" xml:space="preserve">
          <source>LayoutErr::clone_from</source>
          <target state="translated">LayoutErr::clone_from</target>
        </trans-unit>
        <trans-unit id="c42cb73e4c87ec15d8bccdf73bd650c9df417b9b" translate="yes" xml:space="preserve">
          <source>LayoutErr::clone_into</source>
          <target state="translated">LayoutErr::clone_into</target>
        </trans-unit>
        <trans-unit id="3d5c517ec7fe54611274ae766b7e9a7911dc4865" translate="yes" xml:space="preserve">
          <source>LayoutErr::description</source>
          <target state="translated">LayoutErr::description</target>
        </trans-unit>
        <trans-unit id="497868f6f797da1325f8a9e9334379ca52fe4d37" translate="yes" xml:space="preserve">
          <source>LayoutErr::eq</source>
          <target state="translated">LayoutErr::eq</target>
        </trans-unit>
        <trans-unit id="3e42ce22d91446434898d46efd3223372301d536" translate="yes" xml:space="preserve">
          <source>LayoutErr::fmt</source>
          <target state="translated">LayoutErr::fmt</target>
        </trans-unit>
        <trans-unit id="73c4ad8234e8ca96453bac67aff91d0248f854d8" translate="yes" xml:space="preserve">
          <source>LayoutErr::from</source>
          <target state="translated">LayoutErr::from</target>
        </trans-unit>
        <trans-unit id="c3349dca57dd20451bc1fb01674dae961d63e9ce" translate="yes" xml:space="preserve">
          <source>LayoutErr::into</source>
          <target state="translated">LayoutErr::into</target>
        </trans-unit>
        <trans-unit id="f0f74e1ec8093e352aa9e8a3fd380fef9597b057" translate="yes" xml:space="preserve">
          <source>LayoutErr::ne</source>
          <target state="translated">LayoutErr::ne</target>
        </trans-unit>
        <trans-unit id="13438de55c63f100651925816f56012c5f1b1197" translate="yes" xml:space="preserve">
          <source>LayoutErr::source</source>
          <target state="translated">LayoutErr::source</target>
        </trans-unit>
        <trans-unit id="3bbdcbefa6e28507c6b0c6c634c7c7dc826a8bf4" translate="yes" xml:space="preserve">
          <source>LayoutErr::to_owned</source>
          <target state="translated">LayoutErr::to_owned</target>
        </trans-unit>
        <trans-unit id="2ec834ea6aa3644afac64a7ad23be1e1d6c10755" translate="yes" xml:space="preserve">
          <source>LayoutErr::to_string</source>
          <target state="translated">LayoutErr::to_string</target>
        </trans-unit>
        <trans-unit id="569d09cda7ad780d06bfd86cc93c53c21d1d507f" translate="yes" xml:space="preserve">
          <source>LayoutErr::try_from</source>
          <target state="translated">LayoutErr::try_from</target>
        </trans-unit>
        <trans-unit id="da95ddd29b8a42941df811e96eda4d3f3b529f15" translate="yes" xml:space="preserve">
          <source>LayoutErr::try_into</source>
          <target state="translated">LayoutErr::try_into</target>
        </trans-unit>
        <trans-unit id="b157e123211e4f6e633b31e52c5a1dcb6f18cc93" translate="yes" xml:space="preserve">
          <source>LayoutErr::type_id</source>
          <target state="translated">LayoutErr::type_id</target>
        </trans-unit>
        <trans-unit id="882d7824546e260d7aecb582ca23a9e9525d35d8" translate="yes" xml:space="preserve">
          <source>Laziness</source>
          <target state="translated">Laziness</target>
        </trans-unit>
        <trans-unit id="84e98cf97551805d46a1030b73cb47aa40988008" translate="yes" xml:space="preserve">
          <source>Lazy</source>
          <target state="translated">Lazy</target>
        </trans-unit>
        <trans-unit id="1a855a2a58b53f62fc3df50bb4fbd170d6d9104f" translate="yes" xml:space="preserve">
          <source>Lazy boolean operators</source>
          <target state="translated">懒惰的布尔运算符</target>
        </trans-unit>
        <trans-unit id="7e80f065af51812290038b5aef5b515381e7b069" translate="yes" xml:space="preserve">
          <source>Lazy values and one-time initialization of static data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07edacb2555a09c495279c3384f36a675435d8d" translate="yes" xml:space="preserve">
          <source>Le</source>
          <target state="translated">Le</target>
        </trans-unit>
        <trans-unit id="5c517a3f3609c8f91e1addb0b08b45eb552a8056" translate="yes" xml:space="preserve">
          <source>Leading and trailing whitespace represent an error.</source>
          <target state="translated">前面和后面的空格代表错误。</target>
        </trans-unit>
        <trans-unit id="171d90f8bc7e44b38d039153f89d2f57be6e9170" translate="yes" xml:space="preserve">
          <source>Leak an I/O object, never closing the file:</source>
          <target state="translated">泄露一个I/O对象,从不关闭文件。</target>
        </trans-unit>
        <trans-unit id="0c87712acc6d428c2446529002e5d51f0d06f2b8" translate="yes" xml:space="preserve">
          <source>Leaks of memory and other resources</source>
          <target state="translated">内存和其他资源的泄漏</target>
        </trans-unit>
        <trans-unit id="4a0f6a000e4abc155c2355349886b493447a871e" translate="yes" xml:space="preserve">
          <source>Learn a bit about TCP and HTTP.</source>
          <target state="translated">了解一下TCP和HTTP。</target>
        </trans-unit>
        <trans-unit id="3b3bf48bce1a18fd95b7ca358e1f16b46d7a4f20" translate="yes" xml:space="preserve">
          <source>Learn more in the &lt;a href=&quot;reference/attributes#conditional-compilation&quot;&gt;Conditional Compilation&lt;/a&gt; section of the Reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa043ac5ac41e3aca9c9c60cce1514c7ae3f12a" translate="yes" xml:space="preserve">
          <source>Least upper bound coercions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee627fb00174e09c28a9f8c4feb833b6e5f743c" translate="yes" xml:space="preserve">
          <source>Leaves the original &lt;code&gt;Option&lt;/code&gt; in-place, creating a new one containing a mutable reference to the inner type's &lt;code&gt;Deref::Target&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7cf535c3451fcfd6307510b8776e34c835efbed" translate="yes" xml:space="preserve">
          <source>Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via &lt;a href=&quot;../ops/trait.deref&quot;&gt;&lt;code&gt;Deref&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c694f6b8cb7b00330c4d48a5ced6de4ae07bc6" translate="yes" xml:space="preserve">
          <source>Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="translated">将原始Option &lt;code&gt;Deref&lt;/code&gt; 在原位，创建一个对原始Option的引用，并通过Deref强制执行内容。</target>
        </trans-unit>
        <trans-unit id="fbc8d1a601145e0b8a0f4e2783062a13702a5915" translate="yes" xml:space="preserve">
          <source>Leaves the original Result in-place, creating a new one with a reference to the original one, additionally coercing both the &lt;code&gt;Ok&lt;/code&gt; and &lt;code&gt;Err&lt;/code&gt; arms of the Result via &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="translated">将原始Result留在原处，创建一个引用原始Result的引用，另外通过 &lt;code&gt;Deref&lt;/code&gt; 强制 Result 的 &lt;code&gt;Ok&lt;/code&gt; 和 &lt;code&gt;Err&lt;/code&gt; 臂。</target>
        </trans-unit>
        <trans-unit id="35c9a587594a401fda69e05b935e4d8b2ac65ada" translate="yes" xml:space="preserve">
          <source>Leaves the original Result in-place, creating a new one with a reference to the original one, additionally coercing the &lt;code&gt;Err&lt;/code&gt; arm of the Result via &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="translated">将原始Result留在原处，创建一个参照原始Result的引用，另外通过 &lt;code&gt;Deref&lt;/code&gt; 强制 Result 的 &lt;code&gt;Err&lt;/code&gt; 臂。</target>
        </trans-unit>
        <trans-unit id="50d3f8b919eb6aee8c76227d9ffbe9d9e4ef3631" translate="yes" xml:space="preserve">
          <source>Leaves the original Result in-place, creating a new one with a reference to the original one, additionally coercing the &lt;code&gt;Ok&lt;/code&gt; arm of the Result via &lt;code&gt;Deref&lt;/code&gt;.</source>
          <target state="translated">将原始Result留在原处，创建一个引用原始Result的引用，另外通过 &lt;code&gt;Deref&lt;/code&gt; 强制 Result 的 &lt;code&gt;Ok&lt;/code&gt; 臂。</target>
        </trans-unit>
        <trans-unit id="494064e70529e54389ad678d759801779c5c72df" translate="yes" xml:space="preserve">
          <source>Left Shift</source>
          <target state="translated">左移</target>
        </trans-unit>
        <trans-unit id="357a167cfbb492462507b9b8569ac04e39500116" translate="yes" xml:space="preserve">
          <source>Left operand in &lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;array indexing&lt;/a&gt; expressions.</source>
          <target state="translated">&lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;数组索引&lt;/a&gt;表达式中的左操作数。</target>
        </trans-unit>
        <trans-unit id="802deb5f6a24f0153e1b52a743d60aef22ab93a7" translate="yes" xml:space="preserve">
          <source>Left operand in &lt;a href=&quot;expressions/call-expr&quot;&gt;call expressions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;expressions/call-expr&quot;&gt;调用表达式中的&lt;/a&gt;左操作数。</target>
        </trans-unit>
        <trans-unit id="3463667b7fa2b91f4f33b26ea8c6945778008832" translate="yes" xml:space="preserve">
          <source>Left operand in &lt;a href=&quot;expressions/field-expr&quot;&gt;field&lt;/a&gt; expressions.</source>
          <target state="translated">&lt;a href=&quot;expressions/field-expr&quot;&gt;字段&lt;/a&gt;表达式中的左操作数。</target>
        </trans-unit>
        <trans-unit id="604e7ca527ffc17876e5a83a46e96dfa0fc8df57" translate="yes" xml:space="preserve">
          <source>Left operand in &lt;a href=&quot;expressions/method-call-expr&quot;&gt;method-call&lt;/a&gt; expressions.</source>
          <target state="translated">&lt;a href=&quot;expressions/method-call-expr&quot;&gt;方法调用&lt;/a&gt;表达式中的左操作数。</target>
        </trans-unit>
        <trans-unit id="eb226dadb2d69601a2e88f0aff30921d841ff9e2" translate="yes" xml:space="preserve">
          <source>Left operands of the &lt;a href=&quot;expressions/operator-expr#compound-assignment-expressions&quot;&gt;compound assignment&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;expressions/operator-expr#compound-assignment-expressions&quot;&gt;复合赋值的&lt;/a&gt;左操作数。</target>
        </trans-unit>
        <trans-unit id="c80da6a471da3578e154404c086273e1a0815411" translate="yes" xml:space="preserve">
          <source>Left-shift</source>
          <target state="translated">Left-shift</target>
        </trans-unit>
        <trans-unit id="b5ac21daa5921e49b42d9ee7f63e24eef4f4e0f5" translate="yes" xml:space="preserve">
          <source>Left-shift and assignment</source>
          <target state="translated">左移和分配</target>
        </trans-unit>
        <trans-unit id="3bade34ecbc5d996b2f301ebd4ba689e81c7c9ea" translate="yes" xml:space="preserve">
          <source>Length</source>
          <target state="translated">Length</target>
        </trans-unit>
        <trans-unit id="1d3d412a0852cc56c28ad0c2a1153229aa365b43" translate="yes" xml:space="preserve">
          <source>Less than</source>
          <target state="translated">低于</target>
        </trans-unit>
        <trans-unit id="2dd999a5f745b11640e747579b45ca334f6bd164" translate="yes" xml:space="preserve">
          <source>Less than comparison</source>
          <target state="translated">低于比较</target>
        </trans-unit>
        <trans-unit id="33331a5bba7154831ad991e3d73f2368d8a52f4d" translate="yes" xml:space="preserve">
          <source>Less than or equal to</source>
          <target state="translated">小于或等于</target>
        </trans-unit>
        <trans-unit id="4c0c7f8feba1a3be504536a32e6253de66037beb" translate="yes" xml:space="preserve">
          <source>Less than or equal to comparison</source>
          <target state="translated">小于或等于比较</target>
        </trans-unit>
        <trans-unit id="2bf9b5b6040aab2674d9953c9b7c713583f20dae" translate="yes" xml:space="preserve">
          <source>Less-than comparison for two &lt;code&gt;Arc&lt;/code&gt;s.</source>
          <target state="translated">小于两个 &lt;code&gt;Arc&lt;/code&gt; 的比较。</target>
        </trans-unit>
        <trans-unit id="e86e08a482dea944d87e01c7d1358debb5cc8f8f" translate="yes" xml:space="preserve">
          <source>Less-than comparison for two &lt;code&gt;Rc&lt;/code&gt;s.</source>
          <target state="translated">小于两个 &lt;code&gt;Rc&lt;/code&gt; 的比较。</target>
        </trans-unit>
        <trans-unit id="023a23666ee1826dd775c67ffcc792722addcad9" translate="yes" xml:space="preserve">
          <source>Let ALPHA_SET(M) = FIRST(&lt;code&gt;&amp;alpha;&lt;/code&gt;) if OP = &lt;code&gt;\*&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt; and ALPHA_SET(M) = {} if OP = &lt;code&gt;+&lt;/code&gt;.</source>
          <target state="translated">如果OP = &lt;code&gt;\*&lt;/code&gt; 或 &lt;code&gt;?&lt;/code&gt; ,则使ALPHA_SET（M）= FIRST（ &lt;code&gt;&amp;alpha;&lt;/code&gt; ）。如果OP = &lt;code&gt;+&lt;/code&gt; ，则为ALPHA_SET（M）= {} 。</target>
        </trans-unit>
        <trans-unit id="c00ee374b6dc82a14932bb4fd3e12ef63fb5d55f" translate="yes" xml:space="preserve">
          <source>Let SEP_SET(M) = { SEP } if SEP is present and &amp;epsilon; &amp;isin; FIRST(&lt;code&gt;tt ...&lt;/code&gt;); otherwise SEP_SET(M) = {}.</source>
          <target state="translated">如果存在SEP并且&amp;epsilon;&amp;isin;FIRST（ &lt;code&gt;tt ...&lt;/code&gt; ），则令SEP_SET（M）= {SEP} ; 否则SEP_SET（M）= {}。</target>
        </trans-unit>
        <trans-unit id="53530264e4da661c5ecd3e262365a6de39f515ea" translate="yes" xml:space="preserve">
          <source>Let sep_set = { SEP } if SEP present; otherwise sep_set = {}.</source>
          <target state="translated">让sep_set={SEP },如果SEP存在;否则sep_set={}。</target>
        </trans-unit>
        <trans-unit id="911e3ff1d34feb7b7cd623e6d1a6a2dd2992b8d3" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s add another test, but this time we&amp;rsquo;ll make a test that fails! Tests fail when something in the test function panics. Each test is run in a new thread, and when the main thread sees that a test thread has died, the test is marked as failed. We talked about the simplest way to cause a panic in Chapter 9, which is to call the &lt;code&gt;panic!&lt;/code&gt; macro. Enter the new test, &lt;code&gt;another&lt;/code&gt;, so your &lt;em&gt;src/lib.rs&lt;/em&gt; file looks like Listing 11-3.</source>
          <target state="translated">让我们添加另一个测试，但是这次我们将进行失败的测试！当测试功能出现紧急情况时，测试将失败。每个测试都在一个新线程中运行，并且当主线程看到某个测试线程已死亡时，该测试将标记为失败。我们在第9章中讨论了引起恐慌的最简单方法，即所谓的 &lt;code&gt;panic!&lt;/code&gt; 宏。输入 &lt;code&gt;another&lt;/code&gt; 新测试，因此您的&lt;em&gt;src / lib.rs&lt;/em&gt;文件类似于清单11-3。</target>
        </trans-unit>
        <trans-unit id="862ded2868716c0b1f9c7eb816092a939af7bcb0" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s address the second error, which points to the code at the end of &lt;code&gt;Worker::new&lt;/code&gt;; we need to wrap the &lt;code&gt;thread&lt;/code&gt; value in &lt;code&gt;Some&lt;/code&gt; when we create a new &lt;code&gt;Worker&lt;/code&gt;. Make the following changes to fix this error:</source>
          <target state="translated">让我们解决第二个错误，它指向 &lt;code&gt;Worker::new&lt;/code&gt; 结尾的代码；创建新的 &lt;code&gt;Worker&lt;/code&gt; 时，需要将 &lt;code&gt;thread&lt;/code&gt; 值包装在 &lt;code&gt;Some&lt;/code&gt; 中。进行以下更改以纠正此错误：</target>
        </trans-unit>
        <trans-unit id="2f2efb01063714d86b5480ed1b824b067b1a031d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s address these four problems by refactoring our project.</source>
          <target state="translated">让我们通过重构项目来解决这四个问题。</target>
        </trans-unit>
        <trans-unit id="533040ac56d9f1aa4e4c0e2a9a9719c3755f6d7a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s also make the &lt;code&gt;add_to_waitlist&lt;/code&gt; function public by adding the &lt;code&gt;pub&lt;/code&gt; keyword before its definition, as in Listing 7-7.</source>
          <target state="translated">我们还通过在定义之前添加 &lt;code&gt;pub&lt;/code&gt; 关键字来使 &lt;code&gt;add_to_waitlist&lt;/code&gt; 函数公开，如清单7-7所示。</target>
        </trans-unit>
        <trans-unit id="ea4a0f30216adf2bf51b73cd6dbecc829205bb86" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s apply the first rule: each parameter gets its own lifetime. This time we have two parameters instead of one, so we have two lifetimes:</source>
          <target state="translated">让我们应用第一个规则：每个参数都有自己的生存期。这次我们有两个参数，而不是一个，因此有两个生存期：</target>
        </trans-unit>
        <trans-unit id="0bfaeb7ed44c7ba50fa8b27070055c189f55db1b" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s break down the &lt;code&gt;match&lt;/code&gt; in the &lt;code&gt;value_in_cents&lt;/code&gt; function. First, we list the &lt;code&gt;match&lt;/code&gt; keyword followed by an expression, which in this case is the value &lt;code&gt;coin&lt;/code&gt;. This seems very similar to an expression used with &lt;code&gt;if&lt;/code&gt;, but there&amp;rsquo;s a big difference: with &lt;code&gt;if&lt;/code&gt;, the expression needs to return a Boolean value, but here, it can be any type. The type of &lt;code&gt;coin&lt;/code&gt; in this example is the &lt;code&gt;Coin&lt;/code&gt; enum that we defined on line 1.</source>
          <target state="translated">让我们在 &lt;code&gt;value_in_cents&lt;/code&gt; 函数中分解 &lt;code&gt;match&lt;/code&gt; 。首先，我们列出 &lt;code&gt;match&lt;/code&gt; 关键字，后跟一个表达式，在本例中为value &lt;code&gt;coin&lt;/code&gt; 。这似乎与 &lt;code&gt;if&lt;/code&gt; 一起使用的表达式非常相似，但是有一个很大的区别：与 &lt;code&gt;if&lt;/code&gt; 一起，该表达式需要返回一个布尔值，但是在这里，它可以是任何类型。在此示例中， &lt;code&gt;coin&lt;/code&gt; 的类型是我们在第1行中定义的 &lt;code&gt;Coin&lt;/code&gt; 枚举。</target>
        </trans-unit>
        <trans-unit id="f56b403e93973d8ea8cf3d0611a5804ed42ec21f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s break down this request data to understand what the browser is asking of our program.</source>
          <target state="translated">让我们分解一下请求数据，以了解浏览器对我们程序的要求。</target>
        </trans-unit>
        <trans-unit id="b36a5ce769815370ab06336595b70e1c5c477b25" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s briefly look at the syntax of specifying generic type parameters, trait bounds, and lifetimes all in one function!</source>
          <target state="translated">让我们简单地看一下在一个函数中指定泛型类型参数，特征范围和生存期的语法！</target>
        </trans-unit>
        <trans-unit id="0b5fe379df9523f20646a85915698650e52f567f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s build a smart pointer similar to the &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; type provided by the standard library to experience how smart pointers behave differently from references by default. Then we&amp;rsquo;ll look at how to add the ability to use the dereference operator.</source>
          <target state="translated">让我们构建一个类似于标准库提供的 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 类型的智能指针，以体验默认情况下智能指针的行为与引用的不同。然后，我们将研究如何添加使用解引用运算符的功能。</target>
        </trans-unit>
        <trans-unit id="a51f4557e798f86ab9a943604a40558633731ed7" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s build the workspace by running &lt;code&gt;cargo build&lt;/code&gt; in the top-level &lt;em&gt;add&lt;/em&gt; directory!</source>
          <target state="translated">让我们通过在顶级&lt;em&gt;添加&lt;/em&gt;目录中运行 &lt;code&gt;cargo build&lt;/code&gt; 来构建工作区！&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f04507c41a7a28beafb3cead61fdadb3dea0a6f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s call a function that returns a &lt;code&gt;Result&lt;/code&gt; value because the function could fail. In Listing 9-3 we try to open a file.</source>
          <target state="translated">让我们调用一个返回 &lt;code&gt;Result&lt;/code&gt; 值的函数，因为该函数可能会失败。在清单9-3中，我们尝试打开一个文件。</target>
        </trans-unit>
        <trans-unit id="a513da811ee53d6a1f83cac6544789f14693ebd9" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s change our working example in Listing 15-18 so we can see the reference counts changing as we create and drop references to the &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">让我们改变上市15-18在我们工作的例子，所以我们可以看到引用计数改变，因为我们创造和下降引用 &lt;code&gt;Rc&amp;lt;List&amp;gt;&lt;/code&gt; 中的 &lt;code&gt;a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13b7e2a02ac5f6f1d6e7771973bf7e4e8630f77c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s change the &lt;code&gt;area&lt;/code&gt; function that has a &lt;code&gt;Rectangle&lt;/code&gt; instance as a parameter and instead make an &lt;code&gt;area&lt;/code&gt; method defined on the &lt;code&gt;Rectangle&lt;/code&gt; struct, as shown in Listing 5-13.</source>
          <target state="translated">让我们更改将 &lt;code&gt;Rectangle&lt;/code&gt; 实例作为参数的 &lt;code&gt;area&lt;/code&gt; 函数，改为在 &lt;code&gt;Rectangle&lt;/code&gt; 结构上定义一个 &lt;code&gt;area&lt;/code&gt; 方法，如清单5-13所示。</target>
        </trans-unit>
        <trans-unit id="a1f781d100edd0654c8707256174d0183b82ca21" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s change the name of our test to see how that changes the test output. Change the &lt;code&gt;it_works&lt;/code&gt; function to a different name, such as &lt;code&gt;exploration&lt;/code&gt;, like so:</source>
          <target state="translated">让我们更改测试名称，以了解如何更改测试输出。更改 &lt;code&gt;it_works&lt;/code&gt; 功能不同的名称，如 &lt;code&gt;exploration&lt;/code&gt; ，就像这样：</target>
        </trans-unit>
        <trans-unit id="e085a2cf9e4bfbccd609eb67b047befe0756bfad" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s check that it passes!</source>
          <target state="translated">让我们检查它是否通过！</target>
        </trans-unit>
        <trans-unit id="6e6584addded7d162e25546426216dd008dbd0f0" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s check the code again:</source>
          <target state="translated">让我们再次检查代码：</target>
        </trans-unit>
        <trans-unit id="58ec20357926eeae9e87a4ac077cb4fc985ca821" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s combine the knowledge you learned in this chapter and in previous chapters to work on a project!</source>
          <target state="translated">让我们结合您在本章和前几章中学到的知识来进行项目！</target>
        </trans-unit>
        <trans-unit id="7729d445e0c4aa723c02605775741a07569ce3c0" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s consider the first part of &lt;code&gt;main&lt;/code&gt; in Listing 17-11:</source>
          <target state="translated">让我们考虑清单17-11 中 &lt;code&gt;main&lt;/code&gt; 的第一部分：</target>
        </trans-unit>
        <trans-unit id="9bd7feb2aa1c163d92ba2edc07ccaeec3f556691" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a crate named &lt;code&gt;hello_macro&lt;/code&gt; that defines a trait named &lt;code&gt;HelloMacro&lt;/code&gt; with one associated function named &lt;code&gt;hello_macro&lt;/code&gt;. Rather than making our crate users implement the &lt;code&gt;HelloMacro&lt;/code&gt; trait for each of their types, we&amp;rsquo;ll provide a procedural macro so users can annotate their type with &lt;code&gt;#[derive(HelloMacro)]&lt;/code&gt; to get a default implementation of the &lt;code&gt;hello_macro&lt;/code&gt; function. The default implementation will print &lt;code&gt;Hello, Macro! My name is TypeName!&lt;/code&gt; where &lt;code&gt;TypeName&lt;/code&gt; is the name of the type on which this trait has been defined. In other words, we&amp;rsquo;ll write a crate that enables another programmer to write code like Listing 19-30 using our crate.</source>
          <target state="translated">让我们创建一个名为 &lt;code&gt;hello_macro&lt;/code&gt; 的包装箱，该包装箱使用一个名为 &lt;code&gt;hello_macro&lt;/code&gt; 的关联函数定义一个名为 &lt;code&gt;HelloMacro&lt;/code&gt; 的特征。而不是让我们的箱子用户实现 &lt;code&gt;HelloMacro&lt;/code&gt; 特质对他们的每一个类型的，我们将提供一个程序宏，以便用户可以使用他们的标注类型 &lt;code&gt;#[derive(HelloMacro)]&lt;/code&gt; 得到的默认实现 &lt;code&gt;hello_macro&lt;/code&gt; 功能。默认实现将打印 &lt;code&gt;Hello, Macro! My name is TypeName!&lt;/code&gt; 其中 &lt;code&gt;TypeName&lt;/code&gt; 是已定义此特征的类型的名称。换句话说，我们将编写一个包装箱，该包装箱使另一个程序员可以使用我们的包装箱编写清单19-30所示的代码。</target>
        </trans-unit>
        <trans-unit id="9e2142a26e44f4e6756b16f8090c68fc06e7085b" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a new library project called &lt;code&gt;adder&lt;/code&gt;:</source>
          <target state="translated">让我们创建一个名为 &lt;code&gt;adder&lt;/code&gt; 的新库项目：</target>
        </trans-unit>
        <trans-unit id="9c7399eee11ccb14463b23d58e457c71508e98d8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a new project using Cargo and look at how it differs from our original &amp;ldquo;Hello, world!&amp;rdquo; project. Navigate back to your &lt;em&gt;projects&lt;/em&gt; directory (or wherever you decided to store your code). Then, on any operating system, run the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d473890aa102e1a8805b09a6342b2b1e9d3dd1" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a new project using Cargo and look at how it differs from our original Hello, world! project. Navigate back to your &lt;em&gt;projects&lt;/em&gt; directory (or wherever you decided to store your code). Then, on any operating system, run the following:</source>
          <target state="translated">让我们使用Cargo创建一个新项目，看看它与我们最初的Hello World有何不同！项目。导航回到您的&lt;em&gt;项目&lt;/em&gt;目录（或您决定存储代码的任何位置）。然后，在任何操作系统上，运行以下命令：</target>
        </trans-unit>
        <trans-unit id="74b1a7e7740baca8e782bfd3b97f4ca92299f7fa" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a new project with, as always, &lt;code&gt;cargo new&lt;/code&gt;. We&amp;rsquo;ll call our project &lt;code&gt;minigrep&lt;/code&gt; to distinguish it from the &lt;code&gt;grep&lt;/code&gt; tool that you might already have on your system.</source>
          <target state="translated">与往常一样，让我们​​创建一个新项目，并添加 &lt;code&gt;cargo new&lt;/code&gt; 。我们将我们的项目 &lt;code&gt;minigrep&lt;/code&gt; 以将其与系统上可能已有的 &lt;code&gt;grep&lt;/code&gt; 工具区分开。</target>
        </trans-unit>
        <trans-unit id="7498e03400c34fc782316cecb8cfae701609c72c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create an integration test. With the code in Listing 11-12 still in the &lt;em&gt;src/lib.rs&lt;/em&gt; file, make a &lt;em&gt;tests&lt;/em&gt; directory, create a new file named &lt;em&gt;tests/integration_test.rs&lt;/em&gt;, and enter the code in Listing 11-13.</source>
          <target state="translated">让我们创建一个集成测试。在清单11-12中的代码仍在&lt;em&gt;src / lib.rs&lt;/em&gt;文件中的情况下，创建一个&lt;em&gt;tests&lt;/em&gt;目录，创建一个名为&lt;em&gt;tests / integration_test.rs&lt;/em&gt;的新文件，然后输入清单11-13中的代码。</target>
        </trans-unit>
        <trans-unit id="76a754330b004eb7ac6a2d3134c0ac997e30ee22" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s dig into the details of a dynamically sized type called &lt;code&gt;str&lt;/code&gt;, which we&amp;rsquo;ve been using throughout the book. That&amp;rsquo;s right, not &lt;code&gt;&amp;amp;str&lt;/code&gt;, but &lt;code&gt;str&lt;/code&gt; on its own, is a DST. We can&amp;rsquo;t know how long the string is until runtime, meaning we can&amp;rsquo;t create a variable of type &lt;code&gt;str&lt;/code&gt;, nor can we take an argument of type &lt;code&gt;str&lt;/code&gt;. Consider the following code, which does not work:</source>
          <target state="translated">让我们深入研究在整个本书中一直使用的称为 &lt;code&gt;str&lt;/code&gt; 的动态大小类型的细节。没错，不是 &lt;code&gt;&amp;amp;str&lt;/code&gt; ，而是 &lt;code&gt;str&lt;/code&gt; 本身就是DST。我们不知道字符串在运行时之前会持续多长时间，这意味着我们无法创建类型为 &lt;code&gt;str&lt;/code&gt; 的变量，也不能采用类型为 &lt;code&gt;str&lt;/code&gt; 的参数。考虑以下代码，该代码不起作用：</target>
        </trans-unit>
        <trans-unit id="135058566e52c47af5c9c244e255bc4ce73db5f0" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s dive in!</source>
          <target state="translated">让我们潜入吧！</target>
        </trans-unit>
        <trans-unit id="5ea067197cecc0dcafe00ab16ce7bc41edb2cce3" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s examine the difference between the two concepts with an example from Chapter 13 that implements the &lt;code&gt;Iterator&lt;/code&gt; trait on the &lt;code&gt;Counter&lt;/code&gt; struct. In Listing 13-21, we specified that the &lt;code&gt;Item&lt;/code&gt; type was &lt;code&gt;u32&lt;/code&gt;:</source>
          <target state="translated">让我们用第13章中的示例在 &lt;code&gt;Counter&lt;/code&gt; 结构上实现 &lt;code&gt;Iterator&lt;/code&gt; 特性的例子来研究这两个概念之间的区别。在清单13-21中，我们指定 &lt;code&gt;Item&lt;/code&gt; 类型为 &lt;code&gt;u32&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="51c8e9031bf91446f9115b59a4810cccd5e08ba7" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s examine the first execution of &lt;code&gt;plus_one&lt;/code&gt; in more detail. When we call &lt;code&gt;plus_one(five)&lt;/code&gt;, the variable &lt;code&gt;x&lt;/code&gt; in the body of &lt;code&gt;plus_one&lt;/code&gt; will have the value &lt;code&gt;Some(5)&lt;/code&gt;. We then compare that against each match arm.</source>
          <target state="translated">让我们更详细地研究 &lt;code&gt;plus_one&lt;/code&gt; 的第一次执行。当我们调用 &lt;code&gt;plus_one(five)&lt;/code&gt; 时， &lt;code&gt;plus_one&lt;/code&gt; 主体中的变量 &lt;code&gt;x&lt;/code&gt; 的值将为 &lt;code&gt;Some(5)&lt;/code&gt; 。然后，我们将其与每个比赛手臂进行比较。</target>
        </trans-unit>
        <trans-unit id="6e71d1e8c50827371eaf73f583536f9bfaf50c55" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s explore the &lt;em&gt;cons list&lt;/em&gt;, which is a data type common in functional programming languages, as an example of a recursive type. The cons list type we&amp;rsquo;ll define is straightforward except for the recursion; therefore, the concepts in the example we&amp;rsquo;ll work with will be useful any time you get into more complex situations involving recursive types.</source>
          <target state="translated">让我们探索&lt;em&gt;cons list&lt;/em&gt;，它是函数式编程语言中常见的数据类型，作为递归类型的示例。我们将定义的缺点列表类型很简单，除了递归。因此，当您遇到涉及递归类型的更复杂情况时，我们将使用的示例中的概念将非常有用。</target>
        </trans-unit>
        <trans-unit id="8dd4037a982ed3562f2f33f83b29e377988c8c74" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s explore this concept by looking at the &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; type that follows the interior mutability pattern.</source>
          <target state="translated">让我们通过遵循内部可变性模式的 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 类型来探索这个概念。</target>
        </trans-unit>
        <trans-unit id="33abe13cd0e5ac2dde5cfd9e196411eace5691ef" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s figure this out by simplifying the program. Instead of making 10 threads in a &lt;code&gt;for&lt;/code&gt; loop, let&amp;rsquo;s just make two threads without a loop and see what happens. Replace the first &lt;code&gt;for&lt;/code&gt; loop in Listing 16-13 with this code instead:</source>
          <target state="translated">让我们通过简化程序来解决这个问题。与其在一个 &lt;code&gt;for&lt;/code&gt; 循环中创建10个线程，不如让两个线程不循环地查看发生了什么。用下面的代码替换清单16-13中的第一个 &lt;code&gt;for&lt;/code&gt; 循环：</target>
        </trans-unit>
        <trans-unit id="f074800650aafbfc4673a0db2d7d24603b94e675" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s finally implement the &lt;code&gt;execute&lt;/code&gt; method on &lt;code&gt;ThreadPool&lt;/code&gt;. We&amp;rsquo;ll also change &lt;code&gt;Job&lt;/code&gt; from a struct to a type alias for a trait object that holds the type of closure that &lt;code&gt;execute&lt;/code&gt; receives. As discussed in the &lt;a href=&quot;ch19-04-advanced-types#creating-type-synonyms-with-type-aliases&quot;&gt;&amp;ldquo;Creating Type Synonyms with Type Aliases&amp;rdquo;&lt;/a&gt; section of Chapter 19, type aliases allow us to make long types shorter. Look at Listing 20-19.</source>
          <target state="translated">最后，让我们在 &lt;code&gt;ThreadPool&lt;/code&gt; 上实现 &lt;code&gt;execute&lt;/code&gt; 方法。我们还将 &lt;code&gt;Job&lt;/code&gt; 的结构从struct 更改为trait对象的类型别名，该对象持有 &lt;code&gt;execute&lt;/code&gt; 接收的闭包类型。如第19章&lt;a href=&quot;ch19-04-advanced-types#creating-type-synonyms-with-type-aliases&quot;&gt;&amp;ldquo;使用类型别名创建类型同义词&amp;rdquo;中&lt;/a&gt;所讨论的，类型别名使我们可以使长类型更短。看清单20-19。</target>
        </trans-unit>
        <trans-unit id="8d1bc217cc494100da333abaf87d765e4a86b4ca" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s first look at how the dereference operator works with regular references. Then we&amp;rsquo;ll try to define a custom type that behaves like &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, and see why the dereference operator doesn&amp;rsquo;t work like a reference on our newly defined type. We&amp;rsquo;ll explore how implementing the &lt;code&gt;Deref&lt;/code&gt; trait makes it possible for smart pointers to work in a similar way as references. Then we&amp;rsquo;ll look at Rust&amp;rsquo;s &lt;em&gt;deref coercion&lt;/em&gt; feature and how it lets us work with either references or smart pointers.</source>
          <target state="translated">首先让我们看一下解除引用运算符如何与常规引用一起使用。然后，我们将尝试定义行为类似于 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 的自定义类型，并查看为什么取消引用运算符不能像对新定义的类型的引用那样工作。我们将探究如何实现 &lt;code&gt;Deref&lt;/code&gt; 特质使智能指针以与引用类似的方式工作。然后，我们将研究Rust的&lt;em&gt;deref强制&lt;/em&gt;功能以及它如何使我们使用引用或智能指针。</target>
        </trans-unit>
        <trans-unit id="16b3f7c211345e679774caea38315635e0c83e2f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s first look at how the dereference operator works with regular references. Then we&amp;rsquo;ll try to define a custom type that behaves like &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, and see why the dereference operator doesn&amp;rsquo;t work like a reference on our newly defined type. We&amp;rsquo;ll explore how implementing the &lt;code&gt;Deref&lt;/code&gt; trait makes it possible for smart pointers to work in ways similar to references. Then we&amp;rsquo;ll look at Rust&amp;rsquo;s &lt;em&gt;deref coercion&lt;/em&gt; feature and how it lets us work with either references or smart pointers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5282924b8e4ccd503b1b10249bbf09058e192d22" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s get started on the implementation of the library! We know we need a public &lt;code&gt;Post&lt;/code&gt; struct that holds some content, so we&amp;rsquo;ll start with the definition of the struct and an associated public &lt;code&gt;new&lt;/code&gt; function to create an instance of &lt;code&gt;Post&lt;/code&gt;, as shown in Listing 17-12. We&amp;rsquo;ll also make a private &lt;code&gt;State&lt;/code&gt; trait. Then &lt;code&gt;Post&lt;/code&gt; will hold a trait object of &lt;code&gt;Box&amp;lt;dyn State&amp;gt;&lt;/code&gt; inside an &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; in a private field named &lt;code&gt;state&lt;/code&gt;. You&amp;rsquo;ll see why the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; is necessary in a bit.</source>
          <target state="translated">让我们开始执行该库！我们知道我们需要一个包含一些内容的公共 &lt;code&gt;Post&lt;/code&gt; 结构，因此我们将从结构的定义和相关的public &lt;code&gt;new&lt;/code&gt; 函数开始，以创建 &lt;code&gt;Post&lt;/code&gt; 的实例，如清单17-12所示。我们还将制作一个私人 &lt;code&gt;State&lt;/code&gt; 特征。然后 &lt;code&gt;Post&lt;/code&gt; 将在名为 &lt;code&gt;state&lt;/code&gt; 的私有字段中的 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 内保存 &lt;code&gt;Box&amp;lt;dyn State&amp;gt;&lt;/code&gt; 的特征对象。您将很快了解为什么需要 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6cf0779362e5e6e79905eb41dbbcf314ec8be6ec" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s give it a try! First, we&amp;rsquo;ll run our program without the environment variable set and with the query &lt;code&gt;to&lt;/code&gt;, which should match any line that contains the word &amp;ldquo;to&amp;rdquo; in all lowercase:</source>
          <target state="translated">试一试吧！首先，我们将在没有设置环境变量的情况下运行程序，并使用查询 &lt;code&gt;to&lt;/code&gt; ，该查询应匹配所有包含小写字母&amp;ldquo; to&amp;rdquo;的行：</target>
        </trans-unit>
        <trans-unit id="e21e94e46417f5d70be1f74cdc80a0200cf7ab38" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s imagine that a friend of ours is trying to collect all 50 state quarters. While we sort our loose change by coin type, we&amp;rsquo;ll also call out the name of the state associated with each quarter so if it&amp;rsquo;s one our friend doesn&amp;rsquo;t have, they can add it to their collection.</source>
          <target state="translated">假设我们的一个朋友正在尝试收集所有50个州的宿舍。当我们根据硬币类型对零钱进行分类时，我们还将标注与每个季度相关的州的名称，因此，如果这是我们的朋友所没有的状态，他们可以将其添加到他们的收藏中。</target>
        </trans-unit>
        <trans-unit id="d46ead76362decf8ea1c4631f151578daeb7b13e" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s implement the functionality for returning more than a blank page. Create a new file, &lt;em&gt;hello.html&lt;/em&gt;, in the root of your project directory, not in the &lt;em&gt;src&lt;/em&gt; directory. You can input any HTML you want; Listing 20-4 shows one possibility.</source>
          <target state="translated">让我们实现返回多个空白页的功能。在项目目录的根目录（而不是&lt;em&gt;src&lt;/em&gt;目录）中创建一个新文件&lt;em&gt;hello.html&lt;/em&gt;。您可以输入所需的任何HTML；清单20-4显示了一种可能性。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="875e251ee421cd235e0091a3ea3fc8e405d04cfd" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s implement the functionality to read the request from the browser! To separate the concerns of first getting a connection and then taking some action with the connection, we&amp;rsquo;ll start a new function for processing connections. In this new &lt;code&gt;handle_connection&lt;/code&gt; function, we&amp;rsquo;ll read data from the TCP stream and print it so we can see the data being sent from the browser. Change the code to look like Listing 20-2.</source>
          <target state="translated">让我们实现从浏览器读取请求的功能！为了分离首先获得连接然后对连接采取一些措施的关注点，我们将启动一个用于处理连接的新功能。在这个新的 &lt;code&gt;handle_connection&lt;/code&gt; 函数中，我们将从TCP流中读取数据并进行打印，以便可以看到浏览器发送的数据。更改代码，使其类似于清单20-2。</target>
        </trans-unit>
        <trans-unit id="b145c020f35d5cf12c1f16d9ae23adffafb9cf49" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s introduce a bug into our code to see what it looks like when a test that uses &lt;code&gt;assert_eq!&lt;/code&gt; fails. Change the implementation of the &lt;code&gt;add_two&lt;/code&gt; function to instead add &lt;code&gt;3&lt;/code&gt;:</source>
          <target state="translated">让我们在代码中引入一个错误，看看使用 &lt;code&gt;assert_eq!&lt;/code&gt; 进行测试时的外观！失败。将 &lt;code&gt;add_two&lt;/code&gt; 函数的实现更改为添加 &lt;code&gt;3&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="1a740028676c8b0002977c98fe2eec37d0bee51d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s introduce a bug into this code by changing &lt;code&gt;greeting&lt;/code&gt; to not include &lt;code&gt;name&lt;/code&gt; to see what this test failure looks like:</source>
          <target state="translated">让我们通过更改 &lt;code&gt;greeting&lt;/code&gt; 以不包含 &lt;code&gt;name&lt;/code&gt; 在此代码中引入错误，以查看此测试失败的样子：</target>
        </trans-unit>
        <trans-unit id="19083fee6a8cc87ffd6b0d04bb94a51935ddddce" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s jump into Rust by working through a hands-on project together! This chapter introduces you to a few common Rust concepts by showing you how to use them in a real program. You&amp;rsquo;ll learn about &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;match&lt;/code&gt;, methods, associated functions, using external crates, and more! The following chapters will explore these ideas in more detail. In this chapter, you&amp;rsquo;ll practice the fundamentals.</source>
          <target state="translated">让我们一起完成一个动手项目，进入Rust！本章通过向您展示如何在实际程序中使用它们，向您介绍了一些Rust的常见概念。您将学习 &lt;code&gt;let&lt;/code&gt; ， &lt;code&gt;match&lt;/code&gt; ，方法，关联函数，使用外部包装箱等！以下各章将更详细地探讨这些想法。在本章中，您将练习基础知识。</target>
        </trans-unit>
        <trans-unit id="63819f186c88b0330ee047bed09e478063cb1dae" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at a situation we might want to express in code and see why enums are useful and more appropriate than structs in this case. Say we need to work with IP addresses. Currently, two major standards are used for IP addresses: version four and version six. These are the only possibilities for an IP address that our program will come across: we can &lt;em&gt;enumerate&lt;/em&gt; all possible values, which is where enumeration gets its name.</source>
          <target state="translated">让我们看一下我们可能想在代码中表达的情况，并查看在这种情况下为什么枚举比结构有用且更合适。假设我们需要使用IP地址。当前，IP地址使用两种主要标准：第四版和第六版。这些是程序遇到的IP地址的唯一可能性：我们可以&lt;em&gt;枚举&lt;/em&gt;所有可能的值，这就是枚举的名称。</target>
        </trans-unit>
        <trans-unit id="983a8ae99cfeef9a151c58849d32ffe20aab79f5" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at a situation we might want to express in code and see why enums are useful and more appropriate than structs in this case. Say we need to work with IP addresses. Currently, two major standards are used for IP addresses: version four and version six. These are the only possibilities for an IP address that our program will come across: we can &lt;em&gt;enumerate&lt;/em&gt; all possible variants, which is where enumeration gets its name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b455b737e0cc051701700c07362ed0b4be96ade0" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at an example of what happens when we try to use a refutable pattern where Rust requires an irrefutable pattern and vice versa. Listing 18-8 shows a &lt;code&gt;let&lt;/code&gt; statement, but for the pattern we&amp;rsquo;ve specified &lt;code&gt;Some(x)&lt;/code&gt;, a refutable pattern. As you might expect, this code will not compile.</source>
          <target state="translated">让我们看一个示例，当我们尝试使用可重提模式时，Rust需要一个不可重提模式，反之亦然。清单18-8显示了一个 &lt;code&gt;let&lt;/code&gt; 语句，但是对于模式我们指定了 &lt;code&gt;Some(x)&lt;/code&gt; ，这是一个可重提的模式。如您所料，此代码将无法编译。</target>
        </trans-unit>
        <trans-unit id="18ece25ab1e94beac903ba47f460140cd6525deb" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at another enum in the standard library that is very common and useful: &lt;code&gt;Option&lt;/code&gt;.</source>
          <target state="translated">让我们看一下标准库中另一个非常常见且有用的枚举： &lt;code&gt;Option&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c5a86e48ba4d029ee5e559b44f91369e39297f3" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at another example of an enum in Listing 6-2: this one has a wide variety of types embedded in its variants.</source>
          <target state="translated">让我们看一下清单6-2中的另一个枚举示例：该枚举的变量中嵌入了多种类型。</target>
        </trans-unit>
        <trans-unit id="eb252b4c369cd56d53d91f13fd045947d1bc97a2" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at another example to see what it&amp;rsquo;s like when a &lt;code&gt;panic!&lt;/code&gt; call comes from a library because of a bug in our code instead of from our code calling the macro directly. Listing 9-1 has some code that attempts to access an element by index in a vector.</source>
          <target state="translated">让我们看另一个例子，看看发生 &lt;code&gt;panic!&lt;/code&gt; 时的感觉！调用来自库是因为我们的代码存在错误，而不是因为我们的代码直接调用了宏。清单9-1中的一些代码试图通过向量中的索引访问元素。</target>
        </trans-unit>
        <trans-unit id="6282a087fac47a7a9f015495370791f1a001baba" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at another example, this time using the &lt;code&gt;longest&lt;/code&gt; function that had no lifetime parameters when we started working with it in Listing 10-21:</source>
          <target state="translated">让我们来看另一个示例，这次使用清单10-21中开始使用的 &lt;code&gt;longest&lt;/code&gt; 函数，该函数没有生命周期参数：</target>
        </trans-unit>
        <trans-unit id="79d263a7d612b559cee379001fac98bd72d76b84" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at another example:</source>
          <target state="translated">让我们看另一个例子：</target>
        </trans-unit>
        <trans-unit id="4d45845f16951bf95eef2bf35703a5d1765d659f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at each of the five unsafe superpowers in turn. We&amp;rsquo;ll also look at some abstractions that provide a safe interface to unsafe code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e8b25580ad4eac065cdf4b9269d34a342f40133" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at each of the four unsafe superpowers in turn. We&amp;rsquo;ll also look at some abstractions that provide a safe interface to unsafe code.</source>
          <target state="translated">让我们依次看一下四个不安全的超级大国。我们还将研究一些为不安全代码提供安全接口的抽象。</target>
        </trans-unit>
        <trans-unit id="df2bdcb8a48c5ab6b335860afc48b8bc078015c4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at how a reference cycle might happen and how to prevent it, starting with the definition of the &lt;code&gt;List&lt;/code&gt; enum and a &lt;code&gt;tail&lt;/code&gt; method in Listing 15-25:</source>
          <target state="translated">让我们从清单15-25 中的 &lt;code&gt;List&lt;/code&gt; 枚举和 &lt;code&gt;tail&lt;/code&gt; 方法的定义开始，看一下参考循环如何发生以及如何防止它：</target>
        </trans-unit>
        <trans-unit id="0944037c3cfba2d633f74e95d90cd2030445a3ef" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at how the &lt;code&gt;strong_count&lt;/code&gt; and &lt;code&gt;weak_count&lt;/code&gt; values of the &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; instances change by creating a new inner scope and moving the creation of &lt;code&gt;branch&lt;/code&gt; into that scope. By doing so, we can see what happens when &lt;code&gt;branch&lt;/code&gt; is created and then dropped when it goes out of scope. The modifications are shown in Listing 15-29:</source>
          <target state="translated">让我们看看 &lt;code&gt;Rc&amp;lt;Node&amp;gt;&lt;/code&gt; 实例的 &lt;code&gt;strong_count&lt;/code&gt; 和 &lt;code&gt;weak_count&lt;/code&gt; 值是如何变化的，方法是创建一个新的内部作用域并将 &lt;code&gt;branch&lt;/code&gt; 的创建移入该作用域。这样，我们可以看到创建 &lt;code&gt;branch&lt;/code&gt; 时发生了什么，然后在超出范围时删除了分支。修改如清单15-29所示：</target>
        </trans-unit>
        <trans-unit id="cefbc5ea6d98c6566c78f52ee80e603c9ecbe131" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at how the lifetime annotations restrict the &lt;code&gt;longest&lt;/code&gt; function by passing in references that have different concrete lifetimes. Listing 10-23 is a straightforward example.</source>
          <target state="translated">让我们看一下生命周期注释如何通过传入具有不同具体生命周期的引用来限制 &lt;code&gt;longest&lt;/code&gt; 函数。清单10-23是一个简单的示例。</target>
        </trans-unit>
        <trans-unit id="2d907807641db37c8b548f8e680fff80ec47014d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at how this works with an example that uses the standard library&amp;rsquo;s &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; enum:</source>
          <target state="translated">让我们看看使用标准库的 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 枚举的示例如何工作：</target>
        </trans-unit>
        <trans-unit id="017d18fbfa7c60f454e03eabc7d8ac1aa92c2937" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at the different kinds of procedural macros. We&amp;rsquo;ll start with a custom derive macro and then explain the small dissimilarities that make the other forms different.</source>
          <target state="translated">让我们看一下不同类型的过程宏。我们将从一个自定义的派生宏开始，然后解释使其他形式有所不同的微小差异。</target>
        </trans-unit>
        <trans-unit id="47696a65864265aca3d18b3b28f87964618b9312" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at the features Rust provides specifically for writing tests that take these actions, which include the &lt;code&gt;test&lt;/code&gt; attribute, a few macros, and the &lt;code&gt;should_panic&lt;/code&gt; attribute.</source>
          <target state="translated">让我们看一下Rust专门为编写执行这些操作的测试提供的功能，这些功能包括 &lt;code&gt;test&lt;/code&gt; 属性，一些宏和 &lt;code&gt;should_panic&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="3a9e9db94ec59c60082aa0b5bcf4f78e81ff1885" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at what happens if we use the &lt;code&gt;?&lt;/code&gt; operator in the &lt;code&gt;main&lt;/code&gt; function, which you&amp;rsquo;ll recall has a return type of &lt;code&gt;()&lt;/code&gt;:</source>
          <target state="translated">让我们看看如果使用 &lt;code&gt;?&lt;/code&gt; 会发生什么？ &lt;code&gt;main&lt;/code&gt; 函数中的运算符，您会记得它的返回类型为 &lt;code&gt;()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="994a941f48d3bb1b233dbddd0cea3be0ad22a0a6" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s make a new binary project with Cargo called &lt;em&gt;rectangles&lt;/em&gt; that will take the width and height of a rectangle specified in pixels and calculate the area of the rectangle. Listing 5-8 shows a short program with one way of doing exactly that in our project&amp;rsquo;s &lt;em&gt;src/main.rs&lt;/em&gt;.</source>
          <target state="translated">让我们用货运创建一个新的二进制项目，称为&lt;em&gt;矩形&lt;/em&gt;，它将采用以像素为单位指定的矩形的宽度和高度，并计算矩形的面积。清单5-8显示了一个简短的程序，该程序在我们的项目&lt;em&gt;src / main.rs中&lt;/em&gt;具有一种完全相同的方法。</target>
        </trans-unit>
        <trans-unit id="c3c6a3325302ea36dd5b079af7f9dcc2a96f2a1b" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s make the following changes to what happens when we create a &lt;code&gt;ThreadPool&lt;/code&gt;. We&amp;rsquo;ll implement the code that sends the closure to the thread after we have &lt;code&gt;Worker&lt;/code&gt; set up in this way:</source>
          <target state="translated">让我们对创建 &lt;code&gt;ThreadPool&lt;/code&gt; 时发生的情况进行以下更改。在以这种方式设置了 &lt;code&gt;Worker&lt;/code&gt; 之后，我们将实现将闭包发送到线程的代码：</target>
        </trans-unit>
        <trans-unit id="d6f3986ccdbd0c969d703b2cf489c2df505e5f38" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s move all the code that isn&amp;rsquo;t the &lt;code&gt;main&lt;/code&gt; function from &lt;em&gt;src/main.rs&lt;/em&gt; to &lt;em&gt;src/lib.rs&lt;/em&gt;:</source>
          <target state="translated">让我们将不是 &lt;code&gt;main&lt;/code&gt; 功能的所有代码从&lt;em&gt;src / main.rs&lt;/em&gt;移到&lt;em&gt;src / lib.rs&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="e0993d86e241fd6659cd1a45b6773ecb8b7a697f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s move on and talk about the module system!</source>
          <target state="translated">让我们继续讨论模块系统！</target>
        </trans-unit>
        <trans-unit id="a8ee98777403910d66295d417b2df29ea314fb29" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s move the transmitting end into a spawned thread and have it send one string so the spawned thread is communicating with the main thread, as shown in Listing 16-7. This is like putting a rubber duck in the river upstream or sending a chat message from one thread to another.</source>
          <target state="translated">让我们将发送端移动到一个生成的线程中，并让它发送一个字符串，以便生成的线程与主线程通信，如清单16-7所示。这就像在上游河中放一只橡皮鸭，或从一个线程向另一个线程发送聊天消息。</target>
        </trans-unit>
        <trans-unit id="7d7bc5a1faae0876b47946a48ddda878ed24b40e" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s practice using methods by implementing a second method on the &lt;code&gt;Rectangle&lt;/code&gt; struct. This time, we want an instance of &lt;code&gt;Rectangle&lt;/code&gt; to take another instance of &lt;code&gt;Rectangle&lt;/code&gt; and return &lt;code&gt;true&lt;/code&gt; if the second &lt;code&gt;Rectangle&lt;/code&gt; can fit completely within &lt;code&gt;self&lt;/code&gt;; otherwise it should return &lt;code&gt;false&lt;/code&gt;. That is, we want to be able to write the program shown in Listing 5-14, once we&amp;rsquo;ve defined the &lt;code&gt;can_hold&lt;/code&gt; method.</source>
          <target state="translated">让我们通过在 &lt;code&gt;Rectangle&lt;/code&gt; 结构上实现第二种方法来练习使用方法。这一次，我们要的实例 &lt;code&gt;Rectangle&lt;/code&gt; 采取的另一个实例， &lt;code&gt;Rectangle&lt;/code&gt; ，返回 &lt;code&gt;true&lt;/code&gt; 如果第二 &lt;code&gt;Rectangle&lt;/code&gt; 可以在完全贴合 &lt;code&gt;self&lt;/code&gt; ;否则应返回 &lt;code&gt;false&lt;/code&gt; 。也就是说，一旦定义了 &lt;code&gt;can_hold&lt;/code&gt; 方法，我们希望能够编写清单5-14中所示的程序。</target>
        </trans-unit>
        <trans-unit id="2f6a747ae7e60532bbff7c109c117027e46d5672" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s pretend we&amp;rsquo;re the compiler. We&amp;rsquo;ll apply these rules to figure out what the lifetimes of the references in the signature of the &lt;code&gt;first_word&lt;/code&gt; function in Listing 10-26 are. The signature starts without any lifetimes associated with the references:</source>
          <target state="translated">假设我们是编译器。我们将应用这些规则来找出清单10-26中 &lt;code&gt;first_word&lt;/code&gt; 函数签名中引用的生存期。签名开始时没有与引用相关联的任何生存期：</target>
        </trans-unit>
        <trans-unit id="93c702edd44f0391f6b49bca85a25bb1c08f5ed4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s program the game to quit when the user wins by adding a &lt;code&gt;break&lt;/code&gt; statement:</source>
          <target state="translated">让我们通过添加 &lt;code&gt;break&lt;/code&gt; 语句对游戏进行编程，使其在用户获胜时退出：</target>
        </trans-unit>
        <trans-unit id="37e690afeb6a44a19f29feff1bce10a2708fa622" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s re-implement the counter iterator from &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt;:</source>
          <target state="translated">让我们从&lt;a href=&quot;index&quot;&gt;模块级文档&lt;/a&gt;重新实现计数器迭代器：</target>
        </trans-unit>
        <trans-unit id="f8fcc9bf7aa350b392444e733b230aa170212b80" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s re-implement the counter iterator from the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12315912398a998ea0c31348f27e33b72d707ec2" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s recap what we&amp;rsquo;ve discussed about references:</source>
          <target state="translated">让我们回顾一下我们关于引用的讨论：</target>
        </trans-unit>
        <trans-unit id="28953519c0667e1646cf53e71f06f86d4e114c07" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s recap what we&amp;rsquo;ve learned so far about Cargo:</source>
          <target state="translated">让我们来回顾一下到目前为止关于货运的知识：</target>
        </trans-unit>
        <trans-unit id="2c9a7290077df3cf275a9a0becb103de92fc4b1c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s return to our cons list example in Listing 15-5. Recall that we defined it using &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;. This time, we&amp;rsquo;ll create two lists that both share ownership of a third list. Conceptually, this looks similar to Figure 15-3:</source>
          <target state="translated">让我们回到清单15-5中的缺点列表示例。回想一下，我们使用 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 对其进行了定义。这次，我们将创建两个共享第三个列表所有权的列表。从概念上讲，这类似于图15-3：</target>
        </trans-unit>
        <trans-unit id="4d5406eb80899f442e99be52053a8af746acbb33" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s return to our example: &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; have the same API, so we fix our program by changing the &lt;code&gt;use&lt;/code&gt; line, the call to &lt;code&gt;new&lt;/code&gt;, and the call to &lt;code&gt;clone&lt;/code&gt;. The code in Listing 16-15 will finally compile and run:</source>
          <target state="translated">让我们回到示例： &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; 和 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 具有相同的API，因此我们通过更改 &lt;code&gt;use&lt;/code&gt; 行，对 &lt;code&gt;new&lt;/code&gt; 的调用以及对 &lt;code&gt;clone&lt;/code&gt; 的调用来修复程序。清单16-15中的代码将最终编译并运行：</target>
        </trans-unit>
        <trans-unit id="38b65fe4b5d3898a7fcecb397aa7533be4bdc414" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s return to our workout generation app. In Listing 13-6, our code was still calling the expensive calculation closure more times than it needed to. One option to solve this issue is to save the result of the expensive closure in a variable for reuse and use the variable in each place we need the result, instead of calling the closure again. However, this method could result in a lot of repeated code.</source>
          <target state="translated">让我们回到我们的锻炼生成应用程序。在清单13-6中，我们的代码仍在多次调用昂贵的计算闭包，而不是需要多次。解决此问题的一种方法是将昂贵的闭包结果保存在变量中以供重用，并在需要结果的每个位置使用该变量，而不是再次调用闭包。但是，此方法可能导致大量重复代码。</target>
        </trans-unit>
        <trans-unit id="42c033ee17d1839060442674688298fa9208193f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s return to the error in Listing 7-4 that told us the &lt;code&gt;hosting&lt;/code&gt; module is private. We want the &lt;code&gt;eat_at_restaurant&lt;/code&gt; function in the parent module to have access to the &lt;code&gt;add_to_waitlist&lt;/code&gt; function in the child module, so we mark the &lt;code&gt;hosting&lt;/code&gt; module with the &lt;code&gt;pub&lt;/code&gt; keyword, as shown in Listing 7-5.</source>
          <target state="translated">让我们回到清单7-4中的错误，告诉我们 &lt;code&gt;hosting&lt;/code&gt; 模块是私有的。我们希望 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 父模块在功能上可以访问 &lt;code&gt;add_to_waitlist&lt;/code&gt; 子模块中的功能，所以我们纪念 &lt;code&gt;hosting&lt;/code&gt; 与模块 &lt;code&gt;pub&lt;/code&gt; 关键字，如清单7-5英寸</target>
        </trans-unit>
        <trans-unit id="f0f51e7669e18c0438bddca7e592dae1d7afb926" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s return to the example in Listing 7-1. How do we call the &lt;code&gt;add_to_waitlist&lt;/code&gt; function? This is the same as asking, what&amp;rsquo;s the path of the &lt;code&gt;add_to_waitlist&lt;/code&gt; function? In Listing 7-3, we simplified our code a bit by removing some of the modules and functions. We&amp;rsquo;ll show two ways to call the &lt;code&gt;add_to_waitlist&lt;/code&gt; function from a new function &lt;code&gt;eat_at_restaurant&lt;/code&gt; defined in the crate root. The &lt;code&gt;eat_at_restaurant&lt;/code&gt; function is part of our library crate&amp;rsquo;s public API, so we mark it with the &lt;code&gt;pub&lt;/code&gt; keyword. In the &lt;a href=&quot;ch07-03-paths-for-referring-to-an-item-in-the-module-tree#exposing-paths-with-the-pub-keyword&quot;&gt;&amp;rdquo;Exposing Paths with the &lt;code&gt;pub&lt;/code&gt; Keyword&amp;rdquo;&lt;/a&gt; section, we&amp;rsquo;ll go into more detail about &lt;code&gt;pub&lt;/code&gt;.</source>
          <target state="translated">让我们回到清单7-1中的示例。我们如何调用 &lt;code&gt;add_to_waitlist&lt;/code&gt; 函数？这与询问相同， &lt;code&gt;add_to_waitlist&lt;/code&gt; 函数的路径是什么？在清单7-3中，我们通过删除一些模块和函数来简化了代码。我们将展示两种从板条 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 定义的新函数eat_at_restaurant调用 &lt;code&gt;add_to_waitlist&lt;/code&gt; 函数的方法。该 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 功能是我们的图书馆箱子的公共API的一部分，所以我们用它标记 &lt;code&gt;pub&lt;/code&gt; 关键字。在&lt;a href=&quot;ch07-03-paths-for-referring-to-an-item-in-the-module-tree#exposing-paths-with-the-pub-keyword&quot;&gt;&amp;ldquo;使用&lt;/a&gt; &lt;code&gt;pub&lt;/code&gt; 关键字公开路径&amp;rdquo;部分中，我们将详细介绍 &lt;code&gt;pub&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5708c518fe3a8a47dd6a9247e9757413e4ab26a1" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s return to the example in Listing 7-1. How do we call the &lt;code&gt;add_to_waitlist&lt;/code&gt; function? This is the same as asking, what&amp;rsquo;s the path of the &lt;code&gt;add_to_waitlist&lt;/code&gt; function? In Listing 7-3, we simplified our code a bit by removing some of the modules and functions. We&amp;rsquo;ll show two ways to call the &lt;code&gt;add_to_waitlist&lt;/code&gt; function from a new function &lt;code&gt;eat_at_restaurant&lt;/code&gt; defined in the crate root. The &lt;code&gt;eat_at_restaurant&lt;/code&gt; function is part of our library crate&amp;rsquo;s public API, so we mark it with the &lt;code&gt;pub&lt;/code&gt; keyword. In the &lt;a href=&quot;ch07-03-paths-for-referring-to-an-item-in-the-module-tree#exposing-paths-with-the-pub-keyword&quot;&gt;&amp;rdquo;Exposing Paths with the &lt;code&gt;pub&lt;/code&gt; Keyword&amp;rdquo;&lt;/a&gt; section, we&amp;rsquo;ll go into more detail about &lt;code&gt;pub&lt;/code&gt;. Note that this example won&amp;rsquo;t compile just yet; we&amp;rsquo;ll explain why in a bit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="477b6d3273f07c6abd6b664ce37ceef78d0f7dbb" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s return to the guessing game program. You now know that &lt;code&gt;let mut guess&lt;/code&gt; will introduce a mutable variable named &lt;code&gt;guess&lt;/code&gt;. On the other side of the equal sign (&lt;code&gt;=&lt;/code&gt;) is the value that &lt;code&gt;guess&lt;/code&gt; is bound to, which is the result of calling &lt;code&gt;String::new&lt;/code&gt;, a function that returns a new instance of a &lt;code&gt;String&lt;/code&gt;. &lt;a href=&quot;../std/string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; is a string type provided by the standard library that is a growable, UTF-8 encoded bit of text.</source>
          <target state="translated">让我们回到猜谜游戏程序。您现在知道， &lt;code&gt;let mut guess&lt;/code&gt; 将引入一个可变的变量，名为 &lt;code&gt;guess&lt;/code&gt; 。等号（ &lt;code&gt;=&lt;/code&gt; ）的另一侧是 &lt;code&gt;guess&lt;/code&gt; 绑定的值，这是调用 &lt;code&gt;String::new&lt;/code&gt; 的结果，该函数返回 &lt;code&gt;String&lt;/code&gt; 的新实例。&lt;a href=&quot;../std/string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;是标准库提供的字符串类型，是可扩展的，UTF-8编码的文本位。</target>
        </trans-unit>
        <trans-unit id="1b391440eed0071039b3e089734bb6dbffc57331" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s review in detail what just happened in your &amp;ldquo;Hello, world!&amp;rdquo; program. Here&amp;rsquo;s the first piece of the puzzle:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9b8de2d5b44130b83fee9c1ecdc0d98e51930d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s review in detail what just happened in your Hello, world! program. Here&amp;rsquo;s the first piece of the puzzle:</source>
          <target state="translated">让我们详细回顾一下您好世界中发生的一切！程序。这是难题的第一部分：</target>
        </trans-unit>
        <trans-unit id="158e58c1e56ad7bd97dd01d2a60cf00e419cdf7a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s run the program again with arguments that don&amp;rsquo;t cause an error but still redirect standard output to a file, like so:</source>
          <target state="translated">让我们使用不会引起错误但仍将标准输出重定向到文件的参数再次运行程序，如下所示：</target>
        </trans-unit>
        <trans-unit id="c402a40660ac8a0f30bee1587ae0160a6f7fa3c1" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s run the program now!</source>
          <target state="translated">让我们现在运行程序！</target>
        </trans-unit>
        <trans-unit id="a23620a8daca09feb45d362acea31eb531fda8ce" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s run this code with any string as the first command line argument (because we haven&amp;rsquo;t implemented the searching part yet) and the &lt;em&gt;poem.txt&lt;/em&gt; file as the second argument:</source>
          <target state="translated">让我们以任何字符串作为第一个命令行参数（因为我们尚未实现搜索部分）并将&lt;em&gt;poem.txt&lt;/em&gt;文件作为第二个参数运行此代码：</target>
        </trans-unit>
        <trans-unit id="a00a1c9672a401c35b2df73be4edbb0185a8d666" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say a regression is found. Good thing we had some time to test the beta release before the regression snuck into a stable release! The fix is applied to &lt;code&gt;master&lt;/code&gt;, so that nightly is fixed, and then the fix is backported to the &lt;code&gt;beta&lt;/code&gt; branch, and a new release of beta is produced:</source>
          <target state="translated">假设发现了回归。好东西，我们有一些时间测试Beta版本，然后回归到稳定版本！该修复程序适用于 &lt;code&gt;master&lt;/code&gt; ，因此每晚修复一次，然后将该修复程序反向移植到 &lt;code&gt;beta&lt;/code&gt; 分支，并产生一个新的beta版本：</target>
        </trans-unit>
        <trans-unit id="9f9ce6103baa4662da2c83f8f5cc76efdcd0525f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say we want to write a function that takes an &lt;code&gt;Option&amp;lt;i32&amp;gt;&lt;/code&gt; and, if there&amp;rsquo;s a value inside, adds 1 to that value. If there isn&amp;rsquo;t a value inside, the function should return the &lt;code&gt;None&lt;/code&gt; value and not attempt to perform any operations.</source>
          <target state="translated">假设我们要编写一个使用 &lt;code&gt;Option&amp;lt;i32&amp;gt;&lt;/code&gt; 的函数，并且如果其中包含一个值，则将该值加1。如果内部没有值，则该函数应返回 &lt;code&gt;None&lt;/code&gt; 值，并且不要尝试执行任何操作。</target>
        </trans-unit>
        <trans-unit id="2d4331831e839f96e4320b04d84f9d160c78c289" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you have a variable of type &lt;code&gt;u8&lt;/code&gt; that can hold values between 0 and 255. If you try to change the variable to a value outside of that range, such as 256, &lt;em&gt;integer overflow&lt;/em&gt; will occur. Rust has some interesting rules involving this behavior. When you&amp;rsquo;re compiling in debug mode, Rust includes checks for integer overflow that cause your program to &lt;em&gt;panic&lt;/em&gt; at runtime if this behavior occurs. Rust uses the term panicking when a program exits with an error; we&amp;rsquo;ll discuss panics in more depth in the &lt;a href=&quot;ch09-01-unrecoverable-errors-with-panic&quot;&gt;&amp;ldquo;Unrecoverable Errors with &lt;code&gt;panic!&lt;/code&gt;&amp;rdquo;&lt;/a&gt; section in Chapter 9.</source>
          <target state="translated">假设您有一个 &lt;code&gt;u8&lt;/code&gt; 类型的变量，可以容纳0到255之间的值。如果尝试将变量更改为该范围之外的值（例如256），则会发生&lt;em&gt;整数溢出&lt;/em&gt;。Rust有一些有趣的规则涉及此行为。在调试模式下进行编译时，Rust包括整数溢出检查，如果发生此行为，整数溢出会使程序在运行时&lt;em&gt;惊慌&lt;/em&gt;。当程序错误退出时，Rust使用惊慌一词。我们将在&lt;a href=&quot;ch09-01-unrecoverable-errors-with-panic&quot;&gt;&amp;ldquo;无法恢复的错误&amp;rdquo; &lt;code&gt;panic!&lt;/code&gt; &lt;/a&gt;中更深入地讨论紧急情况！&amp;rdquo;在第9章中。</target>
        </trans-unit>
        <trans-unit id="f0e1d796103ec14a5789c6d54a9113a4a736b9aa" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see if this implementation passes the tests:</source>
          <target state="translated">让我们看看该实现是否通过测试：</target>
        </trans-unit>
        <trans-unit id="e75f56bc99e0b08a29707c986c241848f766cec0" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see what happens when we try to implement &lt;code&gt;OutlinePrint&lt;/code&gt; on a type that doesn&amp;rsquo;t implement &lt;code&gt;Display&lt;/code&gt;, such as the &lt;code&gt;Point&lt;/code&gt; struct:</source>
          <target state="translated">让我们看看当尝试在没有实现 &lt;code&gt;Display&lt;/code&gt; 的类型上实现 &lt;code&gt;OutlinePrint&lt;/code&gt; 时会发生什么，例如 &lt;code&gt;Point&lt;/code&gt; struct：</target>
        </trans-unit>
        <trans-unit id="c59bb772f42d6153c276f779685fbcbc51239a51" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start a new binary project named &lt;em&gt;functions&lt;/em&gt; to explore functions further. Place the &lt;code&gt;another_function&lt;/code&gt; example in &lt;em&gt;src/main.rs&lt;/em&gt; and run it. You should see the following output:</source>
          <target state="translated">让我们开始一个新的名为&lt;em&gt;函数的&lt;/em&gt;二进制项目，以进一步探索函数。将 &lt;code&gt;another_function&lt;/code&gt; 示例放置在&lt;em&gt;src / main.rs中&lt;/em&gt;并运行它。您应该看到以下输出：</target>
        </trans-unit>
        <trans-unit id="97cf07881b2328430539d964be0df2b91b35c6ed" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start by creating a channel in &lt;code&gt;ThreadPool::new&lt;/code&gt; and holding the sending side in the &lt;code&gt;ThreadPool&lt;/code&gt; instance, as shown in Listing 20-16. The &lt;code&gt;Job&lt;/code&gt; struct doesn&amp;rsquo;t hold anything for now but will be the type of item we&amp;rsquo;re sending down the channel.</source>
          <target state="translated">首先，在 &lt;code&gt;ThreadPool::new&lt;/code&gt; 创建一个通道，并将发送方保留在 &lt;code&gt;ThreadPool&lt;/code&gt; 实例中，如清单20-16所示。该 &lt;code&gt;Job&lt;/code&gt; 结构不适合现在持有什么，但将是我们发送下降通道项目的类型。</target>
        </trans-unit>
        <trans-unit id="bf13023ab8a50a9cde566fb86f6034b24ede9e80" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with implementing &lt;code&gt;Drop&lt;/code&gt; on our thread pool. When the pool is dropped, our threads should all join to make sure they finish their work. Listing 20-22 shows a first attempt at a &lt;code&gt;Drop&lt;/code&gt; implementation; this code won&amp;rsquo;t quite work yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="590a1a269af356fe7eb20ade960ec2172988f407" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with implementing &lt;code&gt;Drop&lt;/code&gt; on our thread pool. When the pool is dropped, our threads should all join to make sure they finish their work. Listing 20-23 shows a first attempt at a &lt;code&gt;Drop&lt;/code&gt; implementation; this code won&amp;rsquo;t quite work yet.</source>
          <target state="translated">让我们从在线程池上实现 &lt;code&gt;Drop&lt;/code&gt; 开始。删除池后，所有线程都应加入以确保它们完成工作。清单20-23显示了首次实现 &lt;code&gt;Drop&lt;/code&gt; 的尝试；该代码还无法正常工作。</target>
        </trans-unit>
        <trans-unit id="17bad3ae86bcd63a6cce044cc99494cc4fff84d4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start your Rust journey! There&amp;rsquo;s a lot to learn, but every journey starts somewhere. In this chapter, we&amp;rsquo;ll discuss:</source>
          <target state="translated">让我们开始您的Rust之旅！有很多东西要学习，但是每一次旅程都是从某个地方开始的。在本章中，我们将讨论：</target>
        </trans-unit>
        <trans-unit id="0457bf0b3ac99ac66b1f341140a99488a66fb382" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s switch to something a bit less complex: hash maps!</source>
          <target state="translated">让我们切换到稍微复杂一些的东西：哈希映射！</target>
        </trans-unit>
        <trans-unit id="27749ea9200d1a0f4c7054bf492ec3c0b20e784f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a closer look at exactly what&amp;rsquo;s happening at each stage of our &lt;code&gt;dangle&lt;/code&gt; code:</source>
          <target state="translated">让我们仔细研究一下 &lt;code&gt;dangle&lt;/code&gt; 代码的每个阶段到底发生了什么：</target>
        </trans-unit>
        <trans-unit id="7d9a8307e36aca49fe8db4d93f11fe8c7cef9311" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a closer look at the function call here:</source>
          <target state="translated">让我们在这里仔细看一下函数调用：</target>
        </trans-unit>
        <trans-unit id="9a0c63ba49eeceb9940e6cb267159151436db7f3" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take advantage of this newfound modularity by doing something that would have been difficult with the old code but is easy with the new code: we&amp;rsquo;ll write some tests!</source>
          <target state="translated">让我们利用这种新发现的模块性，通过做一些旧代码很难实现但新代码容易实现的事情：我们将编写一些测试！</target>
        </trans-unit>
        <trans-unit id="1e8a01207efa7ffcc3d9fbd6fc8377d0a2bd28de" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take the idea of using Rust&amp;rsquo;s type system to ensure we have a valid value one step further and look at creating a custom type for validation. Recall the guessing game in Chapter 2 in which our code asked the user to guess a number between 1 and 100. We never validated that the user&amp;rsquo;s guess was between those numbers before checking it against our secret number; we only validated that the guess was positive. In this case, the consequences were not very dire: our output of &amp;ldquo;Too high&amp;rdquo; or &amp;ldquo;Too low&amp;rdquo; would still be correct. But it would be a useful enhancement to guide the user toward valid guesses and have different behavior when a user guesses a number that&amp;rsquo;s out of range versus when a user types, for example, letters instead.</source>
          <target state="translated">让我们采用使用Rust的类型系统的想法，以确保我们一步一步获得有效值，并着眼于创建用于验证的自定义类型。回想一下第二章中的猜谜游戏，其中我们的代码要求用户猜一个介于1到100之间的数字。我们只验证了猜测是肯定的。在这种情况下，后果不是很严重：我们的&amp;ldquo;太高&amp;rdquo;或&amp;ldquo;太低&amp;rdquo;输出仍然正确。但是，这将是一种有用的增强功能，可以指导用户进行有效的猜测，并在用户猜测超出范围的数字与用户键入例如字母的数字时具有不同的行为。</target>
        </trans-unit>
        <trans-unit id="10bbc468cc51314953c3274a9c50cb0da6662c26" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s test the first part of the guessing game. Run it using &lt;code&gt;cargo run&lt;/code&gt;:</source>
          <target state="translated">让我们测试猜谜游戏的第一部分。使用 &lt;code&gt;cargo run&lt;/code&gt; 运行它：</target>
        </trans-unit>
        <trans-unit id="5f2f9297e2dc6cf0f3bff432893229470763f14d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s think about the signature of this function:</source>
          <target state="translated">让我们考虑一下此函数的签名：</target>
        </trans-unit>
        <trans-unit id="0e370a4cd7c7ee7160c1da9e21eeb3426aa051c8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try adding the &lt;code&gt;main&lt;/code&gt; function in Listing 15-7 to Listing 15-8 and changing it to use the &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; type we&amp;rsquo;ve defined instead of &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;. The code in Listing 15-9 won&amp;rsquo;t compile because Rust doesn&amp;rsquo;t know how to dereference &lt;code&gt;MyBox&lt;/code&gt;.</source>
          <target state="translated">让我们尝试将清单15-7中的 &lt;code&gt;main&lt;/code&gt; 函数添加到清单15-8中，并将其更改为使用我们定义的 &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; 类型而不是 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 。清单15-9中的代码将无法编译，因为Rust不知道如何取消引用 &lt;code&gt;MyBox&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f6856c71f770128395912c9e4d84ed22f9c2d61c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try calling &lt;code&gt;panic!&lt;/code&gt; in a simple program:</source>
          <target state="translated">让我们尝试 &lt;code&gt;panic!&lt;/code&gt; 在一个简单的程序中：</target>
        </trans-unit>
        <trans-unit id="495c15a2fcdcf4917d9c1bfab9452d52f6946a12" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try changing the value of &lt;code&gt;number&lt;/code&gt; to a value that makes the condition &lt;code&gt;false&lt;/code&gt; to see what happens:</source>
          <target state="translated">让我们尝试将 &lt;code&gt;number&lt;/code&gt; 的值更改为使条件为 &lt;code&gt;false&lt;/code&gt; 的值，以了解发生了什么：</target>
        </trans-unit>
        <trans-unit id="7e7646ea7f3a1ac4db23658ee4f242a38dc0f2d4" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try it! The &lt;code&gt;println!&lt;/code&gt; macro call will now look like &lt;code&gt;println!(&quot;rect1 is {:?}&quot;, rect1);&lt;/code&gt;. Putting the specifier &lt;code&gt;:?&lt;/code&gt; inside the curly brackets tells &lt;code&gt;println!&lt;/code&gt; we want to use an output format called &lt;code&gt;Debug&lt;/code&gt;. The &lt;code&gt;Debug&lt;/code&gt; trait enables us to print our struct in a way that is useful for developers so we can see its value while we&amp;rsquo;re debugging our code.</source>
          <target state="translated">试试吧！该 &lt;code&gt;println!&lt;/code&gt; 宏调用现在看起来像 &lt;code&gt;println!(&quot;rect1 is {:?}&quot;, rect1);&lt;/code&gt; 。把说明符 &lt;code&gt;:?&lt;/code&gt; 大括号内的内容告诉 &lt;code&gt;println!&lt;/code&gt; 我们要使用一种称为 &lt;code&gt;Debug&lt;/code&gt; 的输出格式。在 &lt;code&gt;Debug&lt;/code&gt; 特质使我们能够打印我们的结构的方式，对开发人员有用的，所以我们可以看到它的价值的同时，我们正在调试我们的代码。</target>
        </trans-unit>
        <trans-unit id="bd95d7f3d11c94bb095fdce37f40a8188a0a9f0c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try passing a receiving end of the channel into each worker as the thread pool creates the channel. We know we want to use the receiving end in the thread that the workers spawn, so we&amp;rsquo;ll reference the &lt;code&gt;receiver&lt;/code&gt; parameter in the closure. The code in Listing 20-17 won&amp;rsquo;t quite compile yet.</source>
          <target state="translated">让我们尝试在线程池创建通道时将通道的接收端传递给每个工作程序。我们知道我们想在工作者产生的线程中使用接收端，因此我们将在闭包中引用 &lt;code&gt;receiver&lt;/code&gt; 参数。清单20-17中的代码尚未完全编译。</target>
        </trans-unit>
        <trans-unit id="1369c278ca19b1e056ddf12681c203bea51b902a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try running this code! Invoke &lt;code&gt;cargo run&lt;/code&gt; in the terminal and then load &lt;em&gt;127.0.0.1:7878&lt;/em&gt; in a web browser. The browser should show an error message like &amp;ldquo;Connection reset,&amp;rdquo; because the server isn&amp;rsquo;t currently sending back any data. But when you look at your terminal, you should see several messages that were printed when the browser connected to the server!</source>
          <target state="translated">让我们尝试运行此代码！调用在终端中 &lt;code&gt;cargo run&lt;/code&gt; 的货物，然后在Web浏览器中加载&lt;em&gt;127.0.0.1:7878&lt;/em&gt;。浏览器应显示一条错误消息，如&amp;ldquo;连接重置&amp;rdquo;，因为服务器当前未发回任何数据。但是，当您查看终端时，应该会看到浏览器连接到服务器时打印的几条消息！</target>
        </trans-unit>
        <trans-unit id="b5df448e7bbf55b42cbf4762a517bb598ff93363" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try running this code. Replace the program currently in your &lt;em&gt;functions&lt;/em&gt; project&amp;rsquo;s &lt;em&gt;src/main.rs&lt;/em&gt; file with the preceding example and run it using &lt;code&gt;cargo run&lt;/code&gt;:</source>
          <target state="translated">让我们尝试运行此代码。用前面的示例替换当前在&lt;em&gt;功能&lt;/em&gt;项目的&lt;em&gt;src / main.rs&lt;/em&gt;文件中的程序，然后使用 &lt;code&gt;cargo run&lt;/code&gt; 运行它：</target>
        </trans-unit>
        <trans-unit id="41e20d578122ffb945b15f0ad510b73ca09a5d3f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try this code! Start the program and make a request in a web browser again. Note that we&amp;rsquo;ll still get an error page in the browser, but our program&amp;rsquo;s output in the terminal will now look similar to this:</source>
          <target state="translated">让我们试试这个代码！启动该程序，然后再次在Web浏览器中发出请求。请注意，我们仍然会在浏览器中显示一个错误页面，但是终端中程序的输出现在看起来类似于以下内容：</target>
        </trans-unit>
        <trans-unit id="7cc97ca0df32f4fb1eb75d95da6a337fcd334535" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try to compile Listing 7-3 and find out why it won&amp;rsquo;t compile yet! The error we get is shown in Listing 7-4.</source>
          <target state="translated">让我们尝试编译清单7-3，找出为什么它还不能编译！清单7-4显示了我们得到的错误。</target>
        </trans-unit>
        <trans-unit id="11ff9da674c818134a4406c35f39622fa04e8cbd" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try to create a dangling reference, which Rust will prevent with a compile-time error:</source>
          <target state="translated">让我们尝试创建一个悬空的引用，Rust将通过编译时错误防止它：</target>
        </trans-unit>
        <trans-unit id="ad30420ec21f7046e9cdcc78a94ec41a99a4cd28" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s walk through an example of what would happen with the &lt;code&gt;match&lt;/code&gt; expression used here. Say that the user has guessed 50 and the randomly generated secret number this time is 38. When the code compares 50 to 38, the &lt;code&gt;cmp&lt;/code&gt; method will return &lt;code&gt;Ordering::Greater&lt;/code&gt;, because 50 is greater than 38. The &lt;code&gt;match&lt;/code&gt; expression gets the &lt;code&gt;Ordering::Greater&lt;/code&gt; value and starts checking each arm&amp;rsquo;s pattern. It looks at the first arm&amp;rsquo;s pattern, &lt;code&gt;Ordering::Less&lt;/code&gt;, and sees that the value &lt;code&gt;Ordering::Greater&lt;/code&gt; does not match &lt;code&gt;Ordering::Less&lt;/code&gt;, so it ignores the code in that arm and moves to the next arm. The next arm&amp;rsquo;s pattern, &lt;code&gt;Ordering::Greater&lt;/code&gt;, &lt;em&gt;does&lt;/em&gt; match &lt;code&gt;Ordering::Greater&lt;/code&gt;! The associated code in that arm will execute and print &lt;code&gt;Too big!&lt;/code&gt; to the screen. The &lt;code&gt;match&lt;/code&gt; expression ends because it has no need to look at the last arm in this scenario.</source>
          <target state="translated">让我们来看一个使用此处的 &lt;code&gt;match&lt;/code&gt; 表达式会发生什么的示例。说，用户已经猜到50和随机产生的秘密号码此时为38。当码进行比较50至38中， &lt;code&gt;cmp&lt;/code&gt; 方法将返回 &lt;code&gt;Ordering::Greater&lt;/code&gt; ，因为50大于38. &lt;code&gt;match&lt;/code&gt; 表达式获得的 &lt;code&gt;Ordering::Greater&lt;/code&gt; 价值，并开始检查每个手臂的图案。它查看了第一个分支的模式 &lt;code&gt;Ordering::Less&lt;/code&gt; ，并发现 &lt;code&gt;Ordering::Greater&lt;/code&gt; 值与 &lt;code&gt;Ordering::Less&lt;/code&gt; 不匹配，因此它将忽略该分支中的代码并移至下一个分支。下一个手臂的样式， &lt;code&gt;Ordering::Greater&lt;/code&gt; ，&lt;em&gt;不&lt;/em&gt;匹配 &lt;code&gt;Ordering::Greater&lt;/code&gt; ！该分支中的关联代码将执行并打印得 &lt;code&gt;Too big!&lt;/code&gt; 到屏幕。在 &lt;code&gt;match&lt;/code&gt; 表达目的，因为它没有必要看在这种情况下，最后手臂。</target>
        </trans-unit>
        <trans-unit id="7603084911e7c02de0fffb01fc0d07271e8ab207" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s walk through what happens when the &lt;code&gt;match&lt;/code&gt; expression runs. The pattern in the first match arm doesn&amp;rsquo;t match the defined value of &lt;code&gt;x&lt;/code&gt;, so the code continues.</source>
          <target state="translated">让我们看一下运行 &lt;code&gt;match&lt;/code&gt; 表达式时发生的情况。第一个匹配臂中的模式与 &lt;code&gt;x&lt;/code&gt; 的定义值不匹配，因此代码继续。</target>
        </trans-unit>
        <trans-unit id="9dbd7c7d9a346617c48d1fe6e1ab8464dd12c2ee" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s walk through what happens when we create a package. First, we enter the command &lt;code&gt;cargo new&lt;/code&gt;:</source>
          <target state="translated">让我们逐一介绍创建包时发生的情况。首先，我们输入command &lt;code&gt;cargo new&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="85979a5d9f34f3050620ce86eda10daa14a1b88f" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s work on an example of a situation in which it&amp;rsquo;s useful to store a closure to be executed later. Along the way, we&amp;rsquo;ll talk about the syntax of closures, type inference, and traits.</source>
          <target state="translated">让我们来研究一个情况的示例，在这种情况下，存储闭包以便以后执行非常有用。在此过程中，我们将讨论闭包的语法，类型推断和特征。</target>
        </trans-unit>
        <trans-unit id="dde68cf723b263931fff6274e2649443a376d09e" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s work through a practical example where we can use &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; to mutate an immutable value and see why that is useful.</source>
          <target state="translated">让我们来看一个实际的示例，在该示例中，我们可以使用 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 来更改不可变值，并查看为什么这样做很有用。</target>
        </trans-unit>
        <trans-unit id="48386f6d1144155006a32871e15dfe1b9ce157fb" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s work through each step, starting with iterating through lines.</source>
          <target state="translated">让我们完成每个步骤，从遍历行开始。</target>
        </trans-unit>
        <trans-unit id="a1a52fb721ec0d05f400a261580d4ddb22293c65" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s write a function that returns the longer of two string slices. This function will take two string slices and return a string slice. After we&amp;rsquo;ve implemented the &lt;code&gt;longest&lt;/code&gt; function, the code in Listing 10-20 should print &lt;code&gt;The longest string is abcd&lt;/code&gt;.</source>
          <target state="translated">让我们编写一个返回两个字符串片段中较长者的函数。此函数将获取两个字符串切片并返回一个字符串切片。在实现了 &lt;code&gt;longest&lt;/code&gt; 函数之后，清单10-20中的代码应该 &lt;code&gt;The longest string is abcd&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31701d3a630b4f1aa08c2b129407ae716eb89b88" translate="yes" xml:space="preserve">
          <source>Let's cover each of those in turn:</source>
          <target state="translated">我们依次介绍一下这些内容。</target>
        </trans-unit>
        <trans-unit id="4c315b125c5927660bb768b8b3fda2b0a5ee7326" translate="yes" xml:space="preserve">
          <source>Let's make an iterator named &lt;code&gt;Counter&lt;/code&gt; which counts from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt;:</source>
          <target state="translated">让我们创建一个名为 &lt;code&gt;Counter&lt;/code&gt; 的迭代器，它的计数范围是 &lt;code&gt;1&lt;/code&gt; 到 &lt;code&gt;5&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6c6a4583ed007c9bb1513143277357a280135d4c" translate="yes" xml:space="preserve">
          <source>Let's start with some erroneous code examples:</source>
          <target state="translated">我们先来看看一些错误的代码例子。</target>
        </trans-unit>
        <trans-unit id="de018a296a31a1ffdcd9d1c61756c91e2595cea1" translate="yes" xml:space="preserve">
          <source>Let's walk through each step of the iteration here:</source>
          <target state="translated">在这里,我们来走一遍迭代的每一步。</target>
        </trans-unit>
        <trans-unit id="44815d1f0973ea841fa50391ff27766e7a1e43e1" translate="yes" xml:space="preserve">
          <source>Let's write the numbers one through ten to a &lt;a href=&quot;../net/struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">让我们将数字1到10写入&lt;a href=&quot;../net/struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="a46a79428acd36421f88fb475bcbddfbea0e22e5" translate="yes" xml:space="preserve">
          <source>Lexical structure</source>
          <target state="translated">词汇结构</target>
        </trans-unit>
        <trans-unit id="fb7bfffe6d495d7455834fc0f0e45a868cd0eed3" translate="yes" xml:space="preserve">
          <source>Lexicographical comparison</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3213812f1ac887dc64277b785662c91c2be6f0d" translate="yes" xml:space="preserve">
          <source>Lexicographical comparison is an operation with the following properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ced95f3282c2304ccbd2d1176522c359d54ea9" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;../../../iter/trait.iterator#method.cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2cca5450332e424d128448475a6775439ff31f6" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;../../../iter/trait.iterator#method.partial_cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f0dc7378d16e255ed01aabc2a54a07e3e6629f4" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;../../../iter/trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d55096d24feded547137c63c7a384f3c4c0f255" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;../../../iter/trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddaf8f2edd0c91cf260c1ac14934d6aa825ae88" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;../../iter/trait.iterator#method.cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a76c78472395e823b945082e38bc5d303e55719" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;../../iter/trait.iterator#method.partial_cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d126c71de93d47651f31c95e0aa450c4800fd88" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;../../iter/trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609c60c9d5603d69bbf35fffd3566a6af30afb36" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;../../iter/trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c25090a4ef088c71ace7e293566a76c0bb25be" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;../iter/trait.iterator#method.cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="668bd83da9d322ea78d016864c5ab95e76011dec" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;../iter/trait.iterator#method.partial_cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bff3a67247c3882318b7f41ce97184a0411570f" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;../iter/trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5c8cdaa83d4509b191af2c71b1b48c60f72b24" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;../iter/trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf6b114d1123581ae2c9e4273fca508b0fdbde3" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;iter/trait.iterator#method.cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d4ebf62364837d04d562c736d452c744c46f6e4" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;iter/trait.iterator#method.partial_cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3953e041c330441a75e1dfa61d597df8c7d470e" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;iter/trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2ad7e98b8195217ed6030e622bceaccf34c46b" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;iter/trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513ec20a4e8698e9bbbff2e3985a29e06196f05c" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2e31f29d209ae250a7a227132954b7d8fe04deb" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;trait.iterator#method.cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3f1a9e4282d09a166c49d84325b88085f57ffa" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another with respect to the specified comparison function. &lt;a href=&quot;trait.iterator#method.partial_cmp_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f489f2a5cd07e538c7596d152dd9c17e3db469d7" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c8e7753b0c8e6c7481529dc1eff5f203de8fd0" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c64287527264c710512a6ae1c3417e504fcde8" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; with those of another. &lt;a href=&quot;trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22f0e1553138efb51680148ef1747ad26c97982" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another.</source>
          <target state="translated">Lexicographically将此 &lt;code&gt;Iterator&lt;/code&gt; 的元素与另一个Iterator的元素进行比较。</target>
        </trans-unit>
        <trans-unit id="d38859ceb7b6303a207032995bde9d03c3feea29" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;../../../iter/trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Lexicographically将此 &lt;code&gt;Iterator&lt;/code&gt; 的元素与另一个Iterator的元素进行比较。&lt;a href=&quot;../../../iter/trait.iterator#method.cmp&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ca4735197429808d0efeb2b253fe9bcfce18fe50" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;../../../iter/trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Lexicographically将此 &lt;code&gt;Iterator&lt;/code&gt; 的元素与另一个Iterator的元素进行比较。&lt;a href=&quot;../../../iter/trait.iterator#method.partial_cmp&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="da9611fc3a83516ea2471a2bc5512aa400680e0d" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;../../iter/trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Lexicographically将此 &lt;code&gt;Iterator&lt;/code&gt; 的元素与另一个Iterator的元素进行比较。&lt;a href=&quot;../../iter/trait.iterator#method.cmp&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="baa7a6a1172224029d4ace92b0dcc42af5ea43dc" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;../../iter/trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Lexicographically将此 &lt;code&gt;Iterator&lt;/code&gt; 的元素与另一个Iterator的元素进行比较。&lt;a href=&quot;../../iter/trait.iterator#method.partial_cmp&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="df2d601aaa116406a1d3ed2d19ce7ccb8eda9f6d" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;../iter/trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Lexicographically将此 &lt;code&gt;Iterator&lt;/code&gt; 的元素与另一个Iterator的元素进行比较。&lt;a href=&quot;../iter/trait.iterator#method.cmp&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e11c383f8dbc8d0d02a7e4c42f755738eaa3bd8b" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;../iter/trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Lexicographically将此 &lt;code&gt;Iterator&lt;/code&gt; 的元素与另一个Iterator的元素进行比较。&lt;a href=&quot;../iter/trait.iterator#method.partial_cmp&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d5193c64367cbcdbfcac47602ae539c77c733dbd" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;iter/trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Lexicographically将此 &lt;code&gt;Iterator&lt;/code&gt; 的元素与另一个Iterator的元素进行比较。&lt;a href=&quot;iter/trait.iterator#method.cmp&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="50753dbaf3a4231173ff7ea3444ae3faef6bec15" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;iter/trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Lexicographically将此 &lt;code&gt;Iterator&lt;/code&gt; 的元素与另一个Iterator的元素进行比较。&lt;a href=&quot;iter/trait.iterator#method.partial_cmp&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a26e03f1b58a87f3e69a164fb32f2308387a9a0d" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;trait.iterator#method.cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Lexicographically将此 &lt;code&gt;Iterator&lt;/code&gt; 的元素与另一个Iterator的元素进行比较。&lt;a href=&quot;trait.iterator#method.cmp&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="77268650d6474077dd95b0c1034d89e6138d9c8a" translate="yes" xml:space="preserve">
          <source>Lexicographically compares the elements of this &lt;code&gt;Iterator&lt;/code&gt; with those of another. &lt;a href=&quot;trait.iterator#method.partial_cmp&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Lexicographically将此 &lt;code&gt;Iterator&lt;/code&gt; 的元素与另一个Iterator的元素进行比较。&lt;a href=&quot;trait.iterator#method.partial_cmp&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7cdfc7b1ef1b25862c1df7bf310283ec505f2f9e" translate="yes" xml:space="preserve">
          <source>Library authors should usually not directly implement this trait, but should prefer implementing the &lt;a href=&quot;trait.tryfrom&quot;&gt;&lt;code&gt;TryFrom&lt;/code&gt;&lt;/a&gt; trait, which offers greater flexibility and provides an equivalent &lt;code&gt;TryInto&lt;/code&gt; implementation for free, thanks to a blanket implementation in the standard library. For more information on this, see the documentation for &lt;a href=&quot;trait.into&quot;&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">库作者通常不应该直接实现此特征，而应该更喜欢实现&lt;a href=&quot;trait.tryfrom&quot;&gt; &lt;code&gt;TryFrom&lt;/code&gt; &lt;/a&gt;特征，该特征提供了更大的灵活性，并免费提供了等效的 &lt;code&gt;TryInto&lt;/code&gt; 实现，这要归功于标准库中的全面实现。有关此的更多信息，请参见&lt;a href=&quot;trait.into&quot;&gt; &lt;code&gt;Into&lt;/code&gt; &lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="4758ec4228804e6ab30fe33d5019e3936dc6e0ac" translate="yes" xml:space="preserve">
          <source>Licensed under the Apache License, Version 2.0 or the MIT license, at your option.</source>
          <target state="translated">根据Apache许可证,2.0版或MIT许可证授权,由您选择。</target>
        </trans-unit>
        <trans-unit id="5ef0008f25a377dd2d246f55bb6f44f04dd3b9a3" translate="yes" xml:space="preserve">
          <source>Lifetime Annotation Syntax</source>
          <target state="translated">终身注解语法</target>
        </trans-unit>
        <trans-unit id="d684ab1615c80d05a111e3a5d43f3dd40b1f7fc7" translate="yes" xml:space="preserve">
          <source>Lifetime Annotations in Function Signatures</source>
          <target state="translated">功能签名中的终生注解</target>
        </trans-unit>
        <trans-unit id="ff9298a957239ce20a277b248758f21de5df0edf" translate="yes" xml:space="preserve">
          <source>Lifetime Annotations in Method Definitions</source>
          <target state="translated">方法定义中的终生注解</target>
        </trans-unit>
        <trans-unit id="bf7eeb5a85880b38a5e28e77bcee94cc13003db0" translate="yes" xml:space="preserve">
          <source>Lifetime Annotations in Struct Definitions</source>
          <target state="translated">结构定义中的终身注解</target>
        </trans-unit>
        <trans-unit id="674c9a2bca3da0091dd89b55224da7caea179e1f" translate="yes" xml:space="preserve">
          <source>Lifetime Elision</source>
          <target state="translated">终身 Elision</target>
        </trans-unit>
        <trans-unit id="717ff13cd888c9b3f73863d8fc6f55fb70c424ad" translate="yes" xml:space="preserve">
          <source>Lifetime annotations don&amp;rsquo;t change how long any of the references live. Just as functions can accept any type when the signature specifies a generic type parameter, functions can accept references with any lifetime by specifying a generic lifetime parameter. Lifetime annotations describe the relationships of the lifetimes of multiple references to each other without affecting the lifetimes.</source>
          <target state="translated">终身注释不会更改任何引用的生存时间。正如签名可以指定泛型类型参数时函数可以接受任何类型一样，通过指定泛型生存期参数，函数可以接受具有任何生存期的引用。生命周期批注描述了多个引用的生命周期彼此之间的关系，而不会影响生命周期。</target>
        </trans-unit>
        <trans-unit id="afdff3576da5c17c6d56a74897ff356724bed98a" translate="yes" xml:space="preserve">
          <source>Lifetime annotations have a slightly unusual syntax: the names of lifetime parameters must start with an apostrophe (&lt;code&gt;'&lt;/code&gt;) and are usually all lowercase and very short, like generic types. Most people use the name &lt;code&gt;'a&lt;/code&gt;. We place lifetime parameter annotations after the &lt;code&gt;&amp;amp;&lt;/code&gt; of a reference, using a space to separate the annotation from the reference&amp;rsquo;s type.</source>
          <target state="translated">生命周期注释的语法略有不同：生命周期参数的名称必须以撇号（ &lt;code&gt;'&lt;/code&gt; ）开头，并且通常都是小写且非常短，就像泛型类型一样。大多数人使用名称 &lt;code&gt;'a&lt;/code&gt; 。我们将生命周期参数注释放置在引用的 &lt;code&gt;&amp;amp;&lt;/code&gt; 后面，并使用空格将注释与引用的类型分开。</target>
        </trans-unit>
        <trans-unit id="1135a93608f0c4c9693be849ed8d4d3c3627b3b8" translate="yes" xml:space="preserve">
          <source>Lifetime bounds</source>
          <target state="translated">终身界限</target>
        </trans-unit>
        <trans-unit id="251f40e2a7cdcbd4967d480a9d96d101163e7557" translate="yes" xml:space="preserve">
          <source>Lifetime bounds can be applied to types or other lifetimes. The bound &lt;code&gt;'a: 'b&lt;/code&gt; is usually read as &lt;code&gt;'a&lt;/code&gt;&lt;em&gt;outlives&lt;/em&gt;&lt;code&gt;'b&lt;/code&gt;. &lt;code&gt;'a: 'b&lt;/code&gt; means that &lt;code&gt;'a&lt;/code&gt; lasts longer than &lt;code&gt;'b&lt;/code&gt;, so a reference &lt;code&gt;&amp;amp;'a ()&lt;/code&gt; is valid whenever &lt;code&gt;&amp;amp;'b ()&lt;/code&gt; is valid.</source>
          <target state="translated">生命周期范围可以应用于类型或其他生命周期。结合的 &lt;code&gt;'a: 'b&lt;/code&gt; 通常读作 &lt;code&gt;'a&lt;/code&gt; &lt;em&gt;会超越&lt;/em&gt; &lt;code&gt;'b&lt;/code&gt; 。 &lt;code&gt;'a: 'b&lt;/code&gt; 表示 &lt;code&gt;'a&lt;/code&gt; 的持续时间长于 &lt;code&gt;'b&lt;/code&gt; ，因此只要 &lt;code&gt;&amp;amp;'b ()&lt;/code&gt; 有效，则引用 &lt;code&gt;&amp;amp;'a ()&lt;/code&gt; 有效。</target>
        </trans-unit>
        <trans-unit id="4dbeb69ffc17e7e2b0614af0534a87d095aeab01" translate="yes" xml:space="preserve">
          <source>Lifetime elision</source>
          <target state="translated">终身磨损</target>
        </trans-unit>
        <trans-unit id="4ed17519ce5dbd6c80c5942b9e801bd65600d677" translate="yes" xml:space="preserve">
          <source>Lifetime elision in functions</source>
          <target state="translated">函数中的终生淘汰</target>
        </trans-unit>
        <trans-unit id="cdf660f0b0e8334138261c27b1ecaed43d9845fb" translate="yes" xml:space="preserve">
          <source>Lifetime elision is a special, limited kind of inference for lifetimes in function signatures which allows you to leave out lifetimes in certain cases. For more background on lifetime elision see &lt;a href=&quot;book/ch10-03-lifetime-syntax#lifetime-elision&quot;&gt;the book&lt;/a&gt;.</source>
          <target state="translated">生存期省略是对函数签名中生存期的一种特殊的，有限的推断，它允许您在某些情况下忽略生存期。有关终生淘汰的更多背景信息，请参见&lt;a href=&quot;book/ch10-03-lifetime-syntax#lifetime-elision&quot;&gt;这本书&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3c1728f6f98aaf9465cf90c15cd1b748f66e76ad" translate="yes" xml:space="preserve">
          <source>Lifetime names for struct fields always need to be declared after the &lt;code&gt;impl&lt;/code&gt; keyword and then used after the struct&amp;rsquo;s name, because those lifetimes are part of the struct&amp;rsquo;s type.</source>
          <target state="translated">始终需要在 &lt;code&gt;impl&lt;/code&gt; 关键字之后声明结构字段的生命周期名称，然后在结构名称之后使用，因为这些生命周期是结构类型的一部分。</target>
        </trans-unit>
        <trans-unit id="a900c570930642dfc60a61e8d7bac83d7d6ce835" translate="yes" xml:space="preserve">
          <source>Lifetime parameters and &lt;a href=&quot;expressions/loop-expr&quot;&gt;loop labels&lt;/a&gt; use LIFETIME_OR_LABEL tokens. Any LIFETIME_TOKEN will be accepted by the lexer, and for example, can be used in macros.</source>
          <target state="translated">生命周期参数和&lt;a href=&quot;expressions/loop-expr&quot;&gt;循环标签&lt;/a&gt;使用LIFETIME_OR_LABEL令牌。语法分析器将接受任何LIFETIME_TOKEN，例如，可以在宏中使用。</target>
        </trans-unit>
        <trans-unit id="4ff5a6b571244bea88cc86b164846e047b3ec7b5" translate="yes" xml:space="preserve">
          <source>Lifetime parameters or &lt;a href=&quot;expressions/loop-expr#loop-labels&quot;&gt;loop labels&lt;/a&gt;</source>
          <target state="translated">生命周期参数或&lt;a href=&quot;expressions/loop-expr#loop-labels&quot;&gt;循环标签&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ec6b2b953ecf8f329d7e04b783de42bfc3652a53" translate="yes" xml:space="preserve">
          <source>Lifetimes</source>
          <target state="translated">Lifetimes</target>
        </trans-unit>
        <trans-unit id="6e3d4513c00b42e75eeb4d12543903cf3991d567" translate="yes" xml:space="preserve">
          <source>Lifetimes and loop labels</source>
          <target state="translated">寿命和循环标签</target>
        </trans-unit>
        <trans-unit id="44ebe0741417aa78ef5defc6e06797a635cee244" translate="yes" xml:space="preserve">
          <source>Lifetimes on function or method parameters are called &lt;em&gt;input lifetimes&lt;/em&gt;, and lifetimes on return values are called &lt;em&gt;output lifetimes&lt;/em&gt;.</source>
          <target state="translated">函数或方法参数上的&lt;em&gt;生存期&lt;/em&gt;称为&lt;em&gt;输入生存期&lt;/em&gt;，而返回值上的&lt;em&gt;生存期&lt;/em&gt;称为&lt;em&gt;输出生存期&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b0908dfa434be81e3deb0facdeb85bcd33472550" translate="yes" xml:space="preserve">
          <source>Lifetimes used in &lt;code&gt;fn&lt;/code&gt; or &lt;code&gt;Fn&lt;/code&gt; syntax must be explicitly declared using &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; binders. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="711484ebabd34c5bee47c2a0196b50ef7c53c764" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt;, the lock specified will be re-acquired when this function returns, regardless of whether the timeout elapsed or not.</source>
          <target state="translated">类似于&lt;a href=&quot;#method.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;一样，无论是否经过超时，此函数返回时都将重新获取指定的锁。</target>
        </trans-unit>
        <trans-unit id="9143067c5010240235e5098fdd6d0b035ca2de7f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#method.wait_until&quot;&gt;&lt;code&gt;wait_until&lt;/code&gt;&lt;/a&gt;, the lock specified will be re-acquired when this function returns, regardless of whether the timeout elapsed or not.</source>
          <target state="translated">与&lt;a href=&quot;#method.wait_until&quot;&gt; &lt;code&gt;wait_until&lt;/code&gt; &lt;/a&gt;一样，无论是否经过超时，都将在此函数返回时重新获取指定的锁。</target>
        </trans-unit>
        <trans-unit id="841a9a19b58dd6630bdc34ede04fb57fa218eece" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../../../io/trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt;, except that it writes from a slice of buffers. &lt;a href=&quot;../../../io/trait.write#method.write_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090c127fd35edc1d60b1dabd86f3ca4ea132ca47" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../io/trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt;, except that it writes from a slice of buffers. &lt;a href=&quot;../io/trait.write#method.write_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85cbabaec83102adcf38ba2f63965f7483dc4ff0" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../ptr/fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;copy&lt;/code&gt; creates a bitwise copy of &lt;code&gt;T&lt;/code&gt;, regardless of whether &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using both the values in the region beginning at &lt;code&gt;*src&lt;/code&gt; and the region beginning at &lt;code&gt;*dst&lt;/code&gt; can &lt;a href=&quot;../ptr/fn.read#ownership-of-the-returned-value&quot;&gt;violate memory safety&lt;/a&gt;.</source>
          <target state="translated">像&lt;a href=&quot;../ptr/fn.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt;一样， &lt;code&gt;copy&lt;/code&gt; 创建 &lt;code&gt;T&lt;/code&gt; 的按位副本，而不管 &lt;code&gt;T&lt;/code&gt; 是否为&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;。如果 &lt;code&gt;T&lt;/code&gt; 不是&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;，则同时使用以 &lt;code&gt;*src&lt;/code&gt; 开头的区域和以 &lt;code&gt;*dst&lt;/code&gt; 开头的区域的值都可能&lt;a href=&quot;../ptr/fn.read#ownership-of-the-returned-value&quot;&gt;违反内存安全性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d6b5f673832d554b3ba278cb3e90ddc20575f12f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../ptr/fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;copy_nonoverlapping&lt;/code&gt; creates a bitwise copy of &lt;code&gt;T&lt;/code&gt;, regardless of whether &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using &lt;em&gt;both&lt;/em&gt; the values in the region beginning at &lt;code&gt;*src&lt;/code&gt; and the region beginning at &lt;code&gt;*dst&lt;/code&gt; can &lt;a href=&quot;../ptr/fn.read#ownership-of-the-returned-value&quot;&gt;violate memory safety&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf650a829b373e9102813a508f7fe2ddc52356d" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;../ptr/fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;copy_nonoverlapping&lt;/code&gt; creates a bitwise copy of &lt;code&gt;T&lt;/code&gt;, regardless of whether &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;fn.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;fn.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using &lt;em&gt;both&lt;/em&gt; the values in the region beginning at &lt;code&gt;*src&lt;/code&gt; and the region beginning at &lt;code&gt;*dst&lt;/code&gt; can &lt;a href=&quot;../ptr/fn.read#ownership-of-the-returned-value&quot;&gt;violate memory safety&lt;/a&gt;.</source>
          <target state="translated">像&lt;a href=&quot;../ptr/fn.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt;一样， &lt;code&gt;copy_nonoverlapping&lt;/code&gt; 会创建 &lt;code&gt;T&lt;/code&gt; 的按位副本，而不管 &lt;code&gt;T&lt;/code&gt; 是否为&lt;a href=&quot;fn.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;。如果 &lt;code&gt;T&lt;/code&gt; 不是&lt;a href=&quot;fn.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;，则同时使用 &lt;code&gt;*src&lt;/code&gt; 开头的区域和 &lt;code&gt;*dst&lt;/code&gt; 开头的区域中的值&lt;em&gt;都&lt;/em&gt;可能&lt;a href=&quot;../ptr/fn.read#ownership-of-the-returned-value&quot;&gt;违反内存安全性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="673f6dbc7b8c22dd58a3649d0763e6d47086e689" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;enum.ordering#variant.Acquire&quot;&gt;&lt;code&gt;Acquire&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;enum.ordering#variant.Release&quot;&gt;&lt;code&gt;Release&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;enum.ordering#variant.AcqRel&quot;&gt;&lt;code&gt;AcqRel&lt;/code&gt;&lt;/a&gt; (for load, store, and load-with-store operations, respectively) with the additional guarantee that all threads see all sequentially consistent operations in the same order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf9f8511904c5069b83f4fd094004a94b015444" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;fn.forget&quot;&gt;&lt;code&gt;forget&lt;/code&gt;&lt;/a&gt;, but also accepts unsized values.</source>
          <target state="translated">喜欢&lt;a href=&quot;fn.forget&quot;&gt; &lt;code&gt;forget&lt;/code&gt; &lt;/a&gt;，但也接受大小不一的值。</target>
        </trans-unit>
        <trans-unit id="4b60bd7f4df6aad7fa80856c1bd518eaad347be6" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;copy&lt;/code&gt; creates a bitwise copy of &lt;code&gt;T&lt;/code&gt;, regardless of whether &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using both the values in the region beginning at &lt;code&gt;*src&lt;/code&gt; and the region beginning at &lt;code&gt;*dst&lt;/code&gt; can &lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;violate memory safety&lt;/a&gt;.</source>
          <target state="translated">像&lt;a href=&quot;fn.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt;一样， &lt;code&gt;copy&lt;/code&gt; 创建 &lt;code&gt;T&lt;/code&gt; 的按位副本，而不管 &lt;code&gt;T&lt;/code&gt; 是否为&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;。如果 &lt;code&gt;T&lt;/code&gt; 不是&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;，则同时使用以 &lt;code&gt;*src&lt;/code&gt; 开头的区域和以 &lt;code&gt;*dst&lt;/code&gt; 开头的区域的值都可能&lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;违反内存安全性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ae45f3009db76dae79642054ed9d2e4707eced76" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;copy_nonoverlapping&lt;/code&gt; creates a bitwise copy of &lt;code&gt;T&lt;/code&gt;, regardless of whether &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using &lt;em&gt;both&lt;/em&gt; the values in the region beginning at &lt;code&gt;*src&lt;/code&gt; and the region beginning at &lt;code&gt;*dst&lt;/code&gt; can &lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;violate memory safety&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecfb87516d3e691309e3183e393372085b3eb5c7" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;copy_nonoverlapping&lt;/code&gt; creates a bitwise copy of &lt;code&gt;T&lt;/code&gt;, regardless of whether &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;fn.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;fn.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using &lt;em&gt;both&lt;/em&gt; the values in the region beginning at &lt;code&gt;*src&lt;/code&gt; and the region beginning at &lt;code&gt;*dst&lt;/code&gt; can &lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;violate memory safety&lt;/a&gt;.</source>
          <target state="translated">像&lt;a href=&quot;fn.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt;一样， &lt;code&gt;copy_nonoverlapping&lt;/code&gt; 会创建 &lt;code&gt;T&lt;/code&gt; 的按位副本，而不管 &lt;code&gt;T&lt;/code&gt; 是否为&lt;a href=&quot;fn.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;。如果 &lt;code&gt;T&lt;/code&gt; 不是&lt;a href=&quot;fn.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;，则同时使用 &lt;code&gt;*src&lt;/code&gt; 开头的区域和 &lt;code&gt;*dst&lt;/code&gt; 开头的区域中的值&lt;em&gt;都&lt;/em&gt;可能&lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;违反内存安全性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="29fb501f0793a6ba4173aacc2026afb59ff625c1" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;read_unaligned&lt;/code&gt; creates a bitwise copy of &lt;code&gt;T&lt;/code&gt;, regardless of whether &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using both the returned value and the value at &lt;code&gt;*src&lt;/code&gt; can &lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;violate memory safety&lt;/a&gt;.</source>
          <target state="translated">与&lt;a href=&quot;fn.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt;一样， &lt;code&gt;read_unaligned&lt;/code&gt; 会创建 &lt;code&gt;T&lt;/code&gt; 的按位副本，而不管 &lt;code&gt;T&lt;/code&gt; 是否为&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;。如果 &lt;code&gt;T&lt;/code&gt; 不是&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;，则同时使用返回值和 &lt;code&gt;*src&lt;/code&gt; 处的值可能会&lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;违反内存安全性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cf95f150b3e045a75caa61fd8dd299e1f6177de4" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;fn.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;read_volatile&lt;/code&gt; creates a bitwise copy of &lt;code&gt;T&lt;/code&gt;, regardless of whether &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;T&lt;/code&gt; is not &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, using both the returned value and the value at &lt;code&gt;*src&lt;/code&gt; can &lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;violate memory safety&lt;/a&gt;. However, storing non-&lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; types in volatile memory is almost certainly incorrect.</source>
          <target state="translated">与&lt;a href=&quot;fn.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt;一样， &lt;code&gt;read_volatile&lt;/code&gt; 会创建 &lt;code&gt;T&lt;/code&gt; 的按位副本，而不管 &lt;code&gt;T&lt;/code&gt; 是否为&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;。如果 &lt;code&gt;T&lt;/code&gt; 不是&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;，则同时使用返回值和 &lt;code&gt;*src&lt;/code&gt; 处的值可能会&lt;a href=&quot;fn.read#ownership-of-the-returned-value&quot;&gt;违反内存安全性&lt;/a&gt;。但是，几乎可以肯定地将非&lt;a href=&quot;../marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;类型存储在易失性存储器中。</target>
        </trans-unit>
        <trans-unit id="a2ef8c40adbd6ce1d9e2b9decbefda1339ad636f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://llvm.org/docs/Atomics.html#acquire&quot;&gt;&lt;code&gt;Acquire&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://llvm.org/docs/Atomics.html#release&quot;&gt;&lt;code&gt;Release&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://llvm.org/docs/Atomics.html#acquirerelease&quot;&gt;&lt;code&gt;AcqRel&lt;/code&gt;&lt;/a&gt; (for load, store, and load-with-store operations, respectively) with the additional guarantee that all threads see all sequentially consistent operations in the same order.</source>
          <target state="translated">与&lt;a href=&quot;https://llvm.org/docs/Atomics.html#acquire&quot;&gt; &lt;code&gt;Acquire&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://llvm.org/docs/Atomics.html#release&quot;&gt; &lt;code&gt;Release&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://llvm.org/docs/Atomics.html#acquirerelease&quot;&gt; &lt;code&gt;AcqRel&lt;/code&gt; &lt;/a&gt;（分别用于加载，存储和随存储加载操作）类似，并额外保证所有线程以相同的顺序看到所有顺序一致的操作。</target>
        </trans-unit>
        <trans-unit id="10040ebca04aab631b833e06ce9af822e9824086" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;io/trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt;, except that it writes from a slice of buffers. &lt;a href=&quot;io/trait.write#method.write_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cb3f2bd27f2c64ea34e80152dae14864b47bd75" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;keyword.struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt;s and &lt;a href=&quot;keyword.enum&quot;&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/a&gt;s, a module and its content are private by default, unaccessible to code outside of the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a2b45437346496bd0f17702b7e91d1466c2799" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;macro.assert&quot;&gt;&lt;code&gt;assert!&lt;/code&gt;&lt;/a&gt;, this macro also has a second version, where a custom panic message can be provided.</source>
          <target state="translated">像&lt;a href=&quot;macro.assert&quot;&gt; &lt;code&gt;assert!&lt;/code&gt; &lt;/a&gt;一样！，此宏还具有第二个版本，可以在其中提供自定义紧急消息。</target>
        </trans-unit>
        <trans-unit id="4a3d6c41c117ef0813067fce9ad6d2c797819f20" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;macro.assert&quot;&gt;&lt;code&gt;assert!&lt;/code&gt;&lt;/a&gt;, this macro has a second form, where a custom panic message can be provided.</source>
          <target state="translated">像&lt;a href=&quot;macro.assert&quot;&gt; &lt;code&gt;assert!&lt;/code&gt; &lt;/a&gt;一样！，此宏具有第二种形式，可以提供自定义紧急消息。</target>
        </trans-unit>
        <trans-unit id="2f9660f47631acac7f2a52b8ab96514dc036d49e" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;struct.bufwriter&quot;&gt;&lt;code&gt;BufWriter&lt;/code&gt;&lt;/a&gt;, a &lt;code&gt;LineWriter&lt;/code&gt;&amp;rsquo;s buffer will also be flushed when the &lt;code&gt;LineWriter&lt;/code&gt; goes out of scope or when its internal buffer is full.</source>
          <target state="translated">像&lt;a href=&quot;struct.bufwriter&quot;&gt; &lt;code&gt;BufWriter&lt;/code&gt; &lt;/a&gt;，一个 &lt;code&gt;LineWriter&lt;/code&gt; 的缓冲区也将被刷新时 &lt;code&gt;LineWriter&lt;/code&gt; 去的范围或在其内部缓冲区已满了。</target>
        </trans-unit>
        <trans-unit id="58df427e5bbce21caf2fe2b837297d163849e77b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;struct.condvar#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt;, the lock specified will be re-acquired when this function returns, regardless of whether the timeout elapsed or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c450b5b408d7fbd12d604817a55adc65281b8d" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;struct.condvar#method.wait_while&quot;&gt;&lt;code&gt;wait_while&lt;/code&gt;&lt;/a&gt;, the lock specified will be re-acquired when this function returns, regardless of whether the timeout elapsed or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb8fc695456a6957ca08bda068f50835ca6480df" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;, if there is a value, it is wrapped in a &lt;code&gt;Some(T)&lt;/code&gt;. But if the iteration is over, &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="translated">与&lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;类似，如果有值，则将其包装在 &lt;code&gt;Some(T)&lt;/code&gt; 中。但是，如果迭代结束， &lt;code&gt;None&lt;/code&gt; 返回None。</target>
        </trans-unit>
        <trans-unit id="375e88d0fb45924c13a3ac3d25d35cc53e0b6dbf" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt;, except that it writes from a slice of buffers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ece68e98c367b427da7eda601344bdda8373dc9" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt;, except that it writes from a slice of buffers. &lt;a href=&quot;trait.write#method.write_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96e1257fda431003f96a740ec957795754307e9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt; is normally associated with the innermost enclosing loop, but &lt;code&gt;continue 'label&lt;/code&gt; may be used to specify the loop affected. A &lt;code&gt;continue&lt;/code&gt; expression is only permitted in the body of a loop.</source>
          <target state="translated">像 &lt;code&gt;break&lt;/code&gt; 一样， &lt;code&gt;continue&lt;/code&gt; 通常与最内层的循环相关联，但是 &lt;code&gt;continue 'label&lt;/code&gt; 可用于指定受影响的循环。仅在循环体内允许使用 &lt;code&gt;continue&lt;/code&gt; 表达式。</target>
        </trans-unit>
        <trans-unit id="4e6414b7dcb2bf632ebca1570eac937be87ca89a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt; is normally associated with the innermost enclosing loop, but labels may be used to specify the affected loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088a111a2146143c269622f6720bedf46b4095af" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;ctlz&lt;/code&gt;, but extra-unsafe as it returns &lt;code&gt;undef&lt;/code&gt; when given an &lt;code&gt;x&lt;/code&gt; with value &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">像 &lt;code&gt;ctlz&lt;/code&gt; 一样，但是非常不安全，因为当给定 &lt;code&gt;x&lt;/code&gt; 值为 &lt;code&gt;0&lt;/code&gt; 时，它返回 &lt;code&gt;undef&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0441e738f2dd6cd8b8b2b78d7c0e5293c433e051" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;cttz&lt;/code&gt;, but extra-unsafe as it returns &lt;code&gt;undef&lt;/code&gt; when given an &lt;code&gt;x&lt;/code&gt; with value &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">像 &lt;code&gt;cttz&lt;/code&gt; 一样，但是非常不安全，因为当给定 &lt;code&gt;x&lt;/code&gt; 值为 &lt;code&gt;0&lt;/code&gt; 时，它返回 &lt;code&gt;undef&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aafea1bc859a7c488e520cc6c530088c8d2d86f9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;panic!&lt;/code&gt;, this macro has a second form for displaying custom values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af819e7752cc0d0f79bda85b3236f2d4d09b2e2" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;read&lt;/code&gt;, except that it reads into a slice of buffers.</source>
          <target state="translated">类似于 &lt;code&gt;read&lt;/code&gt; ，除了它读入缓冲区的一部分。</target>
        </trans-unit>
        <trans-unit id="c398915090a8fe75043794195cb2a1010511d11d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;read&lt;/code&gt;, except that it reads into a slice of buffers. &lt;a href=&quot;../../../io/trait.read#method.read_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">类似于 &lt;code&gt;read&lt;/code&gt; ，除了它读入缓冲区的一部分。&lt;a href=&quot;../../../io/trait.read#method.read_vectored&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4193e9abdbffc61433821360262b7ce147ba44be" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;read&lt;/code&gt;, except that it reads into a slice of buffers. &lt;a href=&quot;../io/trait.read#method.read_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">类似于 &lt;code&gt;read&lt;/code&gt; ，除了它读入缓冲区的一部分。&lt;a href=&quot;../io/trait.read#method.read_vectored&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="19a11d624c5ac2fd3c32083744114569a63b8be1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;read&lt;/code&gt;, except that it reads into a slice of buffers. &lt;a href=&quot;io/trait.read#method.read_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">类似于 &lt;code&gt;read&lt;/code&gt; ，除了它读入缓冲区的一部分。&lt;a href=&quot;io/trait.read#method.read_vectored&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ab91074c2b287fdf8a7b212edaf2da1655891bbf" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;read&lt;/code&gt;, except that it reads into a slice of buffers. &lt;a href=&quot;trait.read#method.read_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">类似于 &lt;code&gt;read&lt;/code&gt; ，除了它读入缓冲区的一部分。&lt;a href=&quot;trait.read#method.read_vectored&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d0c137ee5317a547c2505ef5380b9708644889bf" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;write&lt;/code&gt;, except that it writes from a slice of buffers.</source>
          <target state="translated">类似于 &lt;code&gt;write&lt;/code&gt; ，不同之处在于它从缓冲区的一部分进行写入。</target>
        </trans-unit>
        <trans-unit id="52fa708382c8776f6cbe3b5227e8d830d96b01c9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;write&lt;/code&gt;, except that it writes from a slice of buffers. &lt;a href=&quot;../../../io/trait.write#method.write_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">类似于 &lt;code&gt;write&lt;/code&gt; ，不同之处在于它从缓冲区的一部分进行写入。&lt;a href=&quot;../../../io/trait.write#method.write_vectored&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c5724f707420fb63c78e29f6894aa5e96feb279b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;write&lt;/code&gt;, except that it writes from a slice of buffers. &lt;a href=&quot;../io/trait.write#method.write_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">类似于 &lt;code&gt;write&lt;/code&gt; ，不同之处在于它从缓冲区的一部分进行写入。&lt;a href=&quot;../io/trait.write#method.write_vectored&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c8e23cd5a3cb733eb5eff3ebaeba471859348fb4" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;write&lt;/code&gt;, except that it writes from a slice of buffers. &lt;a href=&quot;io/trait.write#method.write_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">类似于 &lt;code&gt;write&lt;/code&gt; ，不同之处在于它从缓冲区的一部分进行写入。&lt;a href=&quot;io/trait.write#method.write_vectored&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="be2823934efbd612499317ea4eb64b49a897e3b9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;write&lt;/code&gt;, except that it writes from a slice of buffers. &lt;a href=&quot;trait.write#method.write_vectored&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">类似于 &lt;code&gt;write&lt;/code&gt; ，不同之处在于它从缓冲区的一部分进行写入。&lt;a href=&quot;trait.write#method.write_vectored&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d163289ae1b6264709c7aa2ecd53f71e394c044b" translate="yes" xml:space="preserve">
          <source>Like above with accuracy platform support is done on a best effort basis. Sometimes libraries may not be available at runtime or something may go wrong which would cause a backtrace to not be captured. Please feel free to report issues with platforms where a backtrace cannot be captured though!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902993443cc36d88600a8cb05ef8c36915632034" translate="yes" xml:space="preserve">
          <source>Like all instances of UB, if this assumption turns out to be wrong, i.e., the &lt;code&gt;unreachable_unchecked()&lt;/code&gt; call is actually reachable among all possible control flow, the compiler will apply the wrong optimization strategy, and may sometimes even corrupt seemingly unrelated code, causing difficult-to-debug problems.</source>
          <target state="translated">与UB的所有实例一样，如果这种假设被证明是错误的，即在所有可能的控制流中 &lt;code&gt;unreachable_unchecked()&lt;/code&gt; 调用实际上是可以到达的，则编译器将应用错误的优化策略，有时甚至会破坏看似无关的代码，从而导致难以调试的问题。</target>
        </trans-unit>
        <trans-unit id="649ba6cfd601ba5aca37823d799268a81f5dc250" translate="yes" xml:space="preserve">
          <source>Like all technical books, this book has certain conventions in how it displays information. These conventions are documented here.</source>
          <target state="translated">像所有的技术书籍一样,本书在显示信息方面有一定的惯例。这里记录了这些惯例。</target>
        </trans-unit>
        <trans-unit id="44d26e3390ffce91f282ebeb751d71157005049b" translate="yes" xml:space="preserve">
          <source>Like any literal, an integer literal may be followed (immediately, without any spaces) by an &lt;em&gt;integer suffix&lt;/em&gt;, which forcibly sets the type of the literal. The integer suffix must be the name of one of the integral types: &lt;code&gt;u8&lt;/code&gt;, &lt;code&gt;i8&lt;/code&gt;, &lt;code&gt;u16&lt;/code&gt;, &lt;code&gt;i16&lt;/code&gt;, &lt;code&gt;u32&lt;/code&gt;, &lt;code&gt;i32&lt;/code&gt;, &lt;code&gt;u64&lt;/code&gt;, &lt;code&gt;i64&lt;/code&gt;, &lt;code&gt;u128&lt;/code&gt;, &lt;code&gt;i128&lt;/code&gt;, &lt;code&gt;usize&lt;/code&gt;, or &lt;code&gt;isize&lt;/code&gt;.</source>
          <target state="translated">像任何文字一样，整数文字后可以紧跟着&lt;em&gt;整数后缀&lt;/em&gt;（不带任何空格），&lt;em&gt;后缀&lt;/em&gt;强制设置文字的类型。整数后缀必须是整数类型之一的名称： &lt;code&gt;u8&lt;/code&gt; ， &lt;code&gt;i8&lt;/code&gt; ， &lt;code&gt;u16&lt;/code&gt; ， &lt;code&gt;i16&lt;/code&gt; ， &lt;code&gt;u32&lt;/code&gt; ， &lt;code&gt;i32&lt;/code&gt; ， &lt;code&gt;u64&lt;/code&gt; ， &lt;code&gt;i64&lt;/code&gt; ， &lt;code&gt;u128&lt;/code&gt; ， &lt;code&gt;i128&lt;/code&gt; ， &lt;code&gt;usize&lt;/code&gt; ，或 &lt;code&gt;isize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe96ba09f6c5b465c5068945c430d86210b786b4" translate="yes" xml:space="preserve">
          <source>Like any other &lt;code&gt;struct&lt;/code&gt;, a vector is freed when it goes out of scope, as annotated in Listing 8-4.</source>
          <target state="translated">像任何其他 &lt;code&gt;struct&lt;/code&gt; 一样，向量超出范围时将被释放，如清单8-4所示。</target>
        </trans-unit>
        <trans-unit id="05c02c45bd9fe3c41ff9466036864fee28d10e75" translate="yes" xml:space="preserve">
          <source>Like asynchronous channels, if the &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt; is disconnected while trying to &lt;a href=&quot;struct.syncsender#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; with the &lt;a href=&quot;struct.syncsender&quot;&gt;&lt;code&gt;SyncSender&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;struct.syncsender#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; method will return a &lt;a href=&quot;struct.senderror&quot;&gt;&lt;code&gt;SendError&lt;/code&gt;&lt;/a&gt;. Similarly, If the &lt;a href=&quot;struct.syncsender&quot;&gt;&lt;code&gt;SyncSender&lt;/code&gt;&lt;/a&gt; is disconnected while trying to &lt;a href=&quot;struct.receiver#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;struct.receiver#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt; method will return a &lt;a href=&quot;struct.recverror&quot;&gt;&lt;code&gt;RecvError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">与异步通道一样，如果在尝试使用&lt;a href=&quot;struct.syncsender&quot;&gt; &lt;code&gt;SyncSender&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;struct.syncsender#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt;时&lt;a href=&quot;struct.receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; &lt;/a&gt;断开连接，则&lt;a href=&quot;struct.syncsender#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt;方法将返回&lt;a href=&quot;struct.senderror&quot;&gt; &lt;code&gt;SendError&lt;/code&gt; &lt;/a&gt;。同样，如果&lt;a href=&quot;struct.syncsender&quot;&gt; &lt;code&gt;SyncSender&lt;/code&gt; &lt;/a&gt;试图断开&lt;a href=&quot;struct.receiver#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt;时，&lt;a href=&quot;struct.receiver#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; 的&lt;/a&gt;方法将返回一个&lt;a href=&quot;struct.recverror&quot;&gt; &lt;code&gt;RecvError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="63fa7681b448a37e99bdacc82ff7e62da032c766" translate="yes" xml:space="preserve">
          <source>Like for structs and enums, it is possible to &lt;code&gt;impl Drop&lt;/code&gt; for a union to manually define what happens when it gets dropped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd1e9ca100e56c39d22da6780c99428a65b3f19" translate="yes" xml:space="preserve">
          <source>Like in a &lt;code&gt;match&lt;/code&gt; expression, the pattern can be optionally followed by &lt;code&gt;if&lt;/code&gt; and a guard expression that has access to names bound by the pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aebd2c614f88bfe78d840f656119aee198d25e8" translate="yes" xml:space="preserve">
          <source>Like integer literals, a floating-point literal may be followed by a suffix, so long as the pre-suffix part does not end with &lt;code&gt;U+002E&lt;/code&gt; (&lt;code&gt;.&lt;/code&gt;). The suffix forcibly sets the type of the literal. There are two valid &lt;em&gt;floating-point suffixes&lt;/em&gt;, &lt;code&gt;f32&lt;/code&gt; and &lt;code&gt;f64&lt;/code&gt; (the 32-bit and 64-bit floating point types), which explicitly determine the type of the literal.</source>
          <target state="translated">像整数文字一样，浮点文字之后可以加上后缀，只要后缀部分不以 &lt;code&gt;U+002E&lt;/code&gt; （ &lt;code&gt;.&lt;/code&gt; ）结尾。后缀强行设置文字的类型。有两种有效的&lt;em&gt;浮点后缀&lt;/em&gt;， &lt;code&gt;f32&lt;/code&gt; 和 &lt;code&gt;f64&lt;/code&gt; （32位和64位浮点类型），其明确地确定文字的类型。</target>
        </trans-unit>
        <trans-unit id="75d8318497142cc1c07dc08759286ca5f2b7edc7" translate="yes" xml:space="preserve">
          <source>Like items, &lt;code&gt;use&lt;/code&gt; declarations are private to the containing module, by default. Also like items, a &lt;code&gt;use&lt;/code&gt; declaration can be public, if qualified by the &lt;code&gt;pub&lt;/code&gt; keyword. Such a &lt;code&gt;use&lt;/code&gt; declaration serves to &lt;em&gt;re-export&lt;/em&gt; a name. A public &lt;code&gt;use&lt;/code&gt; declaration can therefore &lt;em&gt;redirect&lt;/em&gt; some public name to a different target definition: even a definition with a private canonical path, inside a different module. If a sequence of such redirections form a cycle or cannot be resolved unambiguously, they represent a compile-time error.</source>
          <target state="translated">与项目一样，默认情况下， &lt;code&gt;use&lt;/code&gt; 声明对包含模块是私有的。与项一样，如果通过 &lt;code&gt;pub&lt;/code&gt; 关键字限定，则 &lt;code&gt;use&lt;/code&gt; 声明可以是公共的。这样的 &lt;code&gt;use&lt;/code&gt; 声明用于&lt;em&gt;重新导出&lt;/em&gt;名称。因此，公共 &lt;code&gt;use&lt;/code&gt; 声明可以&lt;em&gt;将&lt;/em&gt;某些公共名称&lt;em&gt;重定向&lt;/em&gt;到不同的目标定义：甚至是在不同模块内具有私有规范路径的定义。如果这样的重定向序列形成一个循环或无法明确解决，则它们表示编译时错误。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4455a5352379b9bfb84306293e10135e6768efff" translate="yes" xml:space="preserve">
          <source>Like most indexing operations, the count starts from zero, so &lt;code&gt;nth(0)&lt;/code&gt; returns the first value, &lt;code&gt;nth(1)&lt;/code&gt; the second, and so on.</source>
          <target state="translated">像大多数索引操作一样，计数从零开始，因此 &lt;code&gt;nth(0)&lt;/code&gt; 返回第一个值， &lt;code&gt;nth(1)&lt;/code&gt; 返回第二个值，依此类推。</target>
        </trans-unit>
        <trans-unit id="808e2460e25efca05f0265071060604e1e534bac" translate="yes" xml:space="preserve">
          <source>Like references in rust, function pointers are assumed to not be null, so if you want to pass a function pointer over FFI and be able to accommodate null pointers, make your type &lt;code&gt;Option&amp;lt;fn()&amp;gt;&lt;/code&gt; with your required signature.</source>
          <target state="translated">像rust中的引用一样，函数指针被假定为不为null，因此，如果您希望通过FFI传递函数指针并能够容纳null指针，请使用所需的签名使 &lt;code&gt;Option&amp;lt;fn()&amp;gt;&lt;/code&gt; 类型成为可能。</target>
        </trans-unit>
        <trans-unit id="8e44ee89e79563bdf5dbc7eeeb4e89ae7df53d96" translate="yes" xml:space="preserve">
          <source>Like the &lt;a href=&quot;keyword.for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; expression, we can use &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;. A &lt;code&gt;while&lt;/code&gt; expression cannot break with a value and always evaluates to &lt;code&gt;()&lt;/code&gt; unlike &lt;a href=&quot;keyword.loop&quot;&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdec5b5891f0978d4130ee94d9517ad5371a9c05" translate="yes" xml:space="preserve">
          <source>Likewise, combining the &lt;code&gt;C&lt;/code&gt; representation with a primitive representation, the layout is unspecified.</source>
          <target state="translated">同样，将 &lt;code&gt;C&lt;/code&gt; 表示形式与基本表示形式组合在一起，布局也未指定。</target>
        </trans-unit>
        <trans-unit id="43eac78cc95cdbd3213a6055d8d48f1d53720313" translate="yes" xml:space="preserve">
          <source>Likewise, combining two primitive representations together is unspecified.</source>
          <target state="translated">同样,将两个基元表征组合在一起也是不明确的。</target>
        </trans-unit>
        <trans-unit id="a87f62e5c0ad27b39b657994af4f2f6af6bcd4e4" translate="yes" xml:space="preserve">
          <source>Likewise, the signature of the function uses &lt;code&gt;&amp;amp;&lt;/code&gt; to indicate that the type of the parameter &lt;code&gt;s&lt;/code&gt; is a reference. Let&amp;rsquo;s add some explanatory annotations:</source>
          <target state="translated">同样，函数的签名使用 &lt;code&gt;&amp;amp;&lt;/code&gt; 表示参数 &lt;code&gt;s&lt;/code&gt; 的类型是引用。让我们添加一些解释性注释：</target>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="01de4d38c5a9265699ce4ab27dfaf087bbe8ecf6" translate="yes" xml:space="preserve">
          <source>Limitations of the &lt;code id=&quot;limitations-of-the-cacher-implementation&quot;&gt;Cacher&lt;/code&gt; Implementation</source>
          <target state="translated">&lt;code id=&quot;limitations-of-the-cacher-implementation&quot;&gt;Cacher&lt;/code&gt; 实施的局限性</target>
        </trans-unit>
        <trans-unit id="61a0ae3b849d95fb8185df69b96d0ec676fb0688" translate="yes" xml:space="preserve">
          <source>Limits</source>
          <target state="translated">Limits</target>
        </trans-unit>
        <trans-unit id="6374b1b52339bde3abd0bb8e4d466f1af18a84f0" translate="yes" xml:space="preserve">
          <source>Line comment</source>
          <target state="translated">行评论</target>
        </trans-unit>
        <trans-unit id="deea94a5bfb30ea2c7507a3f03c99253e4272a0a" translate="yes" xml:space="preserve">
          <source>Line comments beginning with &lt;code&gt;//!&lt;/code&gt; and block comments &lt;code&gt;/*! ... */&lt;/code&gt; are doc comments that apply to the parent of the comment, rather than the item that follows. That is, they are equivalent to writing &lt;code&gt;#![doc=&quot;...&quot;]&lt;/code&gt; around the body of the comment. &lt;code&gt;//!&lt;/code&gt; comments are usually used to document modules that occupy a source file.</source>
          <target state="translated">行注释以 &lt;code&gt;//!&lt;/code&gt; 开头！并阻止评论 &lt;code&gt;/*! ... */&lt;/code&gt; 是适用于注释父项的doc注释，而不是其后的项目。也就是说，它们等效于在注释主体周围编写 &lt;code&gt;#![doc=&quot;...&quot;]&lt;/code&gt; 。 &lt;code&gt;//!&lt;/code&gt; 注释通常用于记录占用源文件的模块。</target>
        </trans-unit>
        <trans-unit id="762dee2b9cd8a9da4291e16ff13ceac56af56d99" translate="yes" xml:space="preserve">
          <source>Line doc comments beginning with exactly &lt;em&gt;three&lt;/em&gt; slashes (&lt;code&gt;///&lt;/code&gt;), and block doc comments (&lt;code&gt;/** ... */&lt;/code&gt;), both inner doc comments, are interpreted as a special syntax for &lt;a href=&quot;https://doc.rust-lang.org/rustdoc/the-doc-attribute.html&quot;&gt;&lt;code&gt;doc&lt;/code&gt; attributes&lt;/a&gt;. That is, they are equivalent to writing &lt;code&gt;#[doc=&quot;...&quot;]&lt;/code&gt; around the body of the comment, i.e., &lt;code&gt;/// Foo&lt;/code&gt; turns into &lt;code&gt;#[doc=&quot;Foo&quot;]&lt;/code&gt; and &lt;code&gt;/** Bar */&lt;/code&gt; turns into &lt;code&gt;#[doc=&quot;Bar&quot;]&lt;/code&gt;.</source>
          <target state="translated">行doc注释以正好&lt;em&gt;三个&lt;/em&gt;斜杠（ &lt;code&gt;///&lt;/code&gt; ）开头，而块doc注释（ &lt;code&gt;/** ... */&lt;/code&gt; ）都是内部doc注释，被解释为&lt;a href=&quot;https://doc.rust-lang.org/rustdoc/the-doc-attribute.html&quot;&gt; &lt;code&gt;doc&lt;/code&gt; 属性&lt;/a&gt;的特殊语法。也就是说，它们等效于在注释的主体周围写 &lt;code&gt;#[doc=&quot;...&quot;]&lt;/code&gt; ，即 &lt;code&gt;/// Foo&lt;/code&gt; 变成 &lt;code&gt;#[doc=&quot;Foo&quot;]&lt;/code&gt; 和 &lt;code&gt;/** Bar */&lt;/code&gt; 变成 &lt;code&gt;#[doc=&quot;Bar&quot;]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a0f09e1a35a919b04916a657dcaf775def02ecc3" translate="yes" xml:space="preserve">
          <source>Line feed is escaped as &lt;code&gt;\n&lt;/code&gt;.</source>
          <target state="translated">换行符转义为 &lt;code&gt;\n&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="11a574794cee21df3f3bbe1f9331a0946b02f437" translate="yes" xml:space="preserve">
          <source>Line-break characters are allowed in string literals. Normally they represent themselves (i.e. no translation), but as a special exception, when an unescaped &lt;code&gt;U+005C&lt;/code&gt; character (&lt;code&gt;\&lt;/code&gt;) occurs immediately before the newline (&lt;code&gt;U+000A&lt;/code&gt;), the &lt;code&gt;U+005C&lt;/code&gt; character, the newline, and all whitespace at the beginning of the next line are ignored. Thus &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are equal:</source>
          <target state="translated">字符串文字中允许使用换行符。通常，它们代表自己（即不进行翻译），但是作为特殊例外，当在换行符（ &lt;code&gt;U+000A&lt;/code&gt; ）， &lt;code&gt;U+005C&lt;/code&gt; 字符，换行符和所有空白处之前出现未转义的 &lt;code&gt;U+005C&lt;/code&gt; 字符（ &lt;code&gt;\&lt;/code&gt; ）时下一行的开头将被忽略。因此 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 相等：</target>
        </trans-unit>
        <trans-unit id="d7a69d21787a597ee70bd4037b342464706e333a" translate="yes" xml:space="preserve">
          <source>Line-breaks are allowed in string literals. A line-break is either a newline (&lt;code&gt;U+000A&lt;/code&gt;) or a pair of carriage return and newline (&lt;code&gt;U+000D&lt;/code&gt;, &lt;code&gt;U+000A&lt;/code&gt;). Both byte sequences are normally translated to &lt;code&gt;U+000A&lt;/code&gt;, but as a special exception, when an unescaped &lt;code&gt;U+005C&lt;/code&gt; character (&lt;code&gt;\&lt;/code&gt;) occurs immediately before the line-break, then the &lt;code&gt;U+005C&lt;/code&gt; character, the line-break, and all whitespace at the beginning of the next line are ignored. Thus &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are equal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2830ad93f43cfc81ed338845630996d89e8c3581" translate="yes" xml:space="preserve">
          <source>LineWriter</source>
          <target state="translated">LineWriter</target>
        </trans-unit>
        <trans-unit id="a467a8d1c87cedc92c6a62d00ba608ee83995811" translate="yes" xml:space="preserve">
          <source>LineWriter::borrow</source>
          <target state="translated">LineWriter::borrow</target>
        </trans-unit>
        <trans-unit id="be9800c1f2dec531de8f863888451a1e1e2311ab" translate="yes" xml:space="preserve">
          <source>LineWriter::borrow_mut</source>
          <target state="translated">LineWriter::borrow_mut</target>
        </trans-unit>
        <trans-unit id="2c13ce7518167bb16bb38a5b26d00211f5dffbd5" translate="yes" xml:space="preserve">
          <source>LineWriter::by_ref</source>
          <target state="translated">LineWriter::by_ref</target>
        </trans-unit>
        <trans-unit id="ad5e984ff0e6171936808b93fcf31ce4b80c212c" translate="yes" xml:space="preserve">
          <source>LineWriter::flush</source>
          <target state="translated">LineWriter::flush</target>
        </trans-unit>
        <trans-unit id="df10811fc6539a5582a3d6ba85fdf94454c319b5" translate="yes" xml:space="preserve">
          <source>LineWriter::fmt</source>
          <target state="translated">LineWriter::fmt</target>
        </trans-unit>
        <trans-unit id="99043611351dc9ff3e05b31b6386acec9bd4d9f9" translate="yes" xml:space="preserve">
          <source>LineWriter::from</source>
          <target state="translated">LineWriter::from</target>
        </trans-unit>
        <trans-unit id="ac69fff03ab2476a267ab98b2b6890c7cf1cc55d" translate="yes" xml:space="preserve">
          <source>LineWriter::get_mut</source>
          <target state="translated">LineWriter::get_mut</target>
        </trans-unit>
        <trans-unit id="1f40adca93e9d87127f3dcb17bebb2d113f8e8fe" translate="yes" xml:space="preserve">
          <source>LineWriter::get_ref</source>
          <target state="translated">LineWriter::get_ref</target>
        </trans-unit>
        <trans-unit id="e241aca740fc32914d91f0be104b82973eb66e5e" translate="yes" xml:space="preserve">
          <source>LineWriter::into</source>
          <target state="translated">LineWriter::into</target>
        </trans-unit>
        <trans-unit id="775f2c8ae9898d577c81da95ed4fcd902133aac3" translate="yes" xml:space="preserve">
          <source>LineWriter::into_inner</source>
          <target state="translated">LineWriter::into_inner</target>
        </trans-unit>
        <trans-unit id="dc3a9d15cfff5be7e19c52c4a56f2c5757e1f703" translate="yes" xml:space="preserve">
          <source>LineWriter::new</source>
          <target state="translated">LineWriter::new</target>
        </trans-unit>
        <trans-unit id="24e05e7c8c89d11d5f69df6388a9b0041bdc7c12" translate="yes" xml:space="preserve">
          <source>LineWriter::try_from</source>
          <target state="translated">LineWriter::try_from</target>
        </trans-unit>
        <trans-unit id="61eebd307b1c261703d7a99419578cfb8f7603b3" translate="yes" xml:space="preserve">
          <source>LineWriter::try_into</source>
          <target state="translated">LineWriter::try_into</target>
        </trans-unit>
        <trans-unit id="af6ffe50802be602950bd895cf9e0cb854fb1812" translate="yes" xml:space="preserve">
          <source>LineWriter::type_id</source>
          <target state="translated">LineWriter::type_id</target>
        </trans-unit>
        <trans-unit id="554b503c3ba754005e39b90ec87f0d92638d2c6e" translate="yes" xml:space="preserve">
          <source>LineWriter::with_capacity</source>
          <target state="translated">LineWriter::with_capacity</target>
        </trans-unit>
        <trans-unit id="221f080203de74c4a951139b8978acaf6b428212" translate="yes" xml:space="preserve">
          <source>LineWriter::write</source>
          <target state="translated">LineWriter::write</target>
        </trans-unit>
        <trans-unit id="718afa20219fcf1aa652f5865af9a7a30b0cf90f" translate="yes" xml:space="preserve">
          <source>LineWriter::write_all</source>
          <target state="translated">LineWriter::write_all</target>
        </trans-unit>
        <trans-unit id="e92db461a6c35320c65374e4144e5044c1b88bad" translate="yes" xml:space="preserve">
          <source>LineWriter::write_fmt</source>
          <target state="translated">LineWriter::write_fmt</target>
        </trans-unit>
        <trans-unit id="d174a06b1546e4b7fde2c0cdcd5ca37b66ded43b" translate="yes" xml:space="preserve">
          <source>LineWriter::write_vectored</source>
          <target state="translated">LineWriter::write_vectored</target>
        </trans-unit>
        <trans-unit id="c6fd3870c86e7422a0146e1e2a052437fb8e51e2" translate="yes" xml:space="preserve">
          <source>Lines</source>
          <target state="translated">Lines</target>
        </trans-unit>
        <trans-unit id="34d99e5c2f3cbf7a2f6c06ae38bf6f1437170c72" translate="yes" xml:space="preserve">
          <source>Lines are ended with either a newline (&lt;code&gt;\n&lt;/code&gt;) or a carriage return with a line feed (&lt;code&gt;\r\n&lt;/code&gt;).</source>
          <target state="translated">行以换行符（ &lt;code&gt;\n&lt;/code&gt; ）结束，或者以换行符（ &lt;code&gt;\r\n&lt;/code&gt; ）返回回车符。</target>
        </trans-unit>
        <trans-unit id="8372047979cef10f511e256735d06fdb5834080a" translate="yes" xml:space="preserve">
          <source>Lines::all</source>
          <target state="translated">Lines::all</target>
        </trans-unit>
        <trans-unit id="ab3890e2134cb7b243711c9eb9d91f7d2b2bdbb5" translate="yes" xml:space="preserve">
          <source>Lines::any</source>
          <target state="translated">Lines::any</target>
        </trans-unit>
        <trans-unit id="70cb6c67edb194cbf85640b28d5918c1d359d3b1" translate="yes" xml:space="preserve">
          <source>Lines::borrow</source>
          <target state="translated">Lines::borrow</target>
        </trans-unit>
        <trans-unit id="18b3ef85cc38f93f055a82652080b268c1813b05" translate="yes" xml:space="preserve">
          <source>Lines::borrow_mut</source>
          <target state="translated">Lines::borrow_mut</target>
        </trans-unit>
        <trans-unit id="ddcac326a974acb99a5bdd0266258af4cf68f560" translate="yes" xml:space="preserve">
          <source>Lines::by_ref</source>
          <target state="translated">Lines::by_ref</target>
        </trans-unit>
        <trans-unit id="2210ca2bf58eac1157cb91245ab84bdb9fbfa42e" translate="yes" xml:space="preserve">
          <source>Lines::chain</source>
          <target state="translated">Lines::chain</target>
        </trans-unit>
        <trans-unit id="819432c98b0ed8115a058abc108fe41e16c028a7" translate="yes" xml:space="preserve">
          <source>Lines::clone</source>
          <target state="translated">Lines::clone</target>
        </trans-unit>
        <trans-unit id="3a9a20c42d37180cc289d3ed86b67aeef7065926" translate="yes" xml:space="preserve">
          <source>Lines::clone_from</source>
          <target state="translated">Lines::clone_from</target>
        </trans-unit>
        <trans-unit id="6d03cc14ec75314e6e9cd97f6317e2bfc576a512" translate="yes" xml:space="preserve">
          <source>Lines::clone_into</source>
          <target state="translated">Lines::clone_into</target>
        </trans-unit>
        <trans-unit id="2cc7e95a9a252a0e4512584de05d3735eda6c7e4" translate="yes" xml:space="preserve">
          <source>Lines::cloned</source>
          <target state="translated">Lines::cloned</target>
        </trans-unit>
        <trans-unit id="a59dde6acd33a5348665946c0a8673f286d24d8a" translate="yes" xml:space="preserve">
          <source>Lines::cmp</source>
          <target state="translated">Lines::cmp</target>
        </trans-unit>
        <trans-unit id="5fc1ed1cda1fe359bfcd4cfa1c08b06a6870ed72" translate="yes" xml:space="preserve">
          <source>Lines::collect</source>
          <target state="translated">Lines::collect</target>
        </trans-unit>
        <trans-unit id="40c012a06c39d10c7006c0601e73b3570aeddd35" translate="yes" xml:space="preserve">
          <source>Lines::copied</source>
          <target state="translated">Lines::copied</target>
        </trans-unit>
        <trans-unit id="484755e089b99c626b30d970a194b907cb3dceef" translate="yes" xml:space="preserve">
          <source>Lines::count</source>
          <target state="translated">Lines::count</target>
        </trans-unit>
        <trans-unit id="f9088b84e14bdd699a44622c6a8c96e4ac54b67c" translate="yes" xml:space="preserve">
          <source>Lines::cycle</source>
          <target state="translated">Lines::cycle</target>
        </trans-unit>
        <trans-unit id="bb1a7e9933496da163e7e92f98497488344c4b65" translate="yes" xml:space="preserve">
          <source>Lines::enumerate</source>
          <target state="translated">Lines::enumerate</target>
        </trans-unit>
        <trans-unit id="e403dedf91eb2082514d2e5162543f8e68efb7da" translate="yes" xml:space="preserve">
          <source>Lines::eq</source>
          <target state="translated">Lines::eq</target>
        </trans-unit>
        <trans-unit id="707ccf8dfe7d6c9bee6828f27010842e078217cf" translate="yes" xml:space="preserve">
          <source>Lines::filter</source>
          <target state="translated">Lines::filter</target>
        </trans-unit>
        <trans-unit id="a534415e9a683c0f1753824a42c9cbb20a22d8de" translate="yes" xml:space="preserve">
          <source>Lines::filter_map</source>
          <target state="translated">Lines::filter_map</target>
        </trans-unit>
        <trans-unit id="9cf3e71d3dcafee27e61b5c5dc18ec5190e4a6f7" translate="yes" xml:space="preserve">
          <source>Lines::find</source>
          <target state="translated">Lines::find</target>
        </trans-unit>
        <trans-unit id="044bf04c2ed739fe25a222a030d6a47c121839e1" translate="yes" xml:space="preserve">
          <source>Lines::find_map</source>
          <target state="translated">Lines::find_map</target>
        </trans-unit>
        <trans-unit id="97efef8f8787ccd14203890a8c6fb78edff59d37" translate="yes" xml:space="preserve">
          <source>Lines::flat_map</source>
          <target state="translated">Lines::flat_map</target>
        </trans-unit>
        <trans-unit id="65ef759afb112e68b767e18f273666c72384a91e" translate="yes" xml:space="preserve">
          <source>Lines::flatten</source>
          <target state="translated">Lines::flatten</target>
        </trans-unit>
        <trans-unit id="4b0ac679142d24795b97a7958a854ecd7203e55e" translate="yes" xml:space="preserve">
          <source>Lines::fmt</source>
          <target state="translated">Lines::fmt</target>
        </trans-unit>
        <trans-unit id="c3dc638376e90ff805be8e51030bb57d3840ea9a" translate="yes" xml:space="preserve">
          <source>Lines::fold</source>
          <target state="translated">Lines::fold</target>
        </trans-unit>
        <trans-unit id="66c9909e05322956c99e0fe47fb62c577fed4240" translate="yes" xml:space="preserve">
          <source>Lines::for_each</source>
          <target state="translated">Lines::for_each</target>
        </trans-unit>
        <trans-unit id="667de94ff8bf99b4ebe79233fe18adb64bcaff80" translate="yes" xml:space="preserve">
          <source>Lines::from</source>
          <target state="translated">Lines::from</target>
        </trans-unit>
        <trans-unit id="06cb1e1125b4bf27dded9704734bb28a0c78413a" translate="yes" xml:space="preserve">
          <source>Lines::fuse</source>
          <target state="translated">Lines::fuse</target>
        </trans-unit>
        <trans-unit id="d42ae29069080bc9b30d98905789c40023c12eda" translate="yes" xml:space="preserve">
          <source>Lines::ge</source>
          <target state="translated">Lines::ge</target>
        </trans-unit>
        <trans-unit id="ef1d6e461d3fafca9f89de1099d0fd6eedc21377" translate="yes" xml:space="preserve">
          <source>Lines::gt</source>
          <target state="translated">Lines::gt</target>
        </trans-unit>
        <trans-unit id="bc084e6d75aef85c94f9d68bb9567acbfe64d484" translate="yes" xml:space="preserve">
          <source>Lines::inspect</source>
          <target state="translated">Lines::inspect</target>
        </trans-unit>
        <trans-unit id="4fa7291665d8e5f97646712135a4875f5b9d3561" translate="yes" xml:space="preserve">
          <source>Lines::into</source>
          <target state="translated">Lines::into</target>
        </trans-unit>
        <trans-unit id="0d57694ef2c4c437b26216323de2554d517e3b1d" translate="yes" xml:space="preserve">
          <source>Lines::into_iter</source>
          <target state="translated">Lines::into_iter</target>
        </trans-unit>
        <trans-unit id="c2f6f57ace4c1b46ab3dddd2d03b614261e882c7" translate="yes" xml:space="preserve">
          <source>Lines::is_sorted</source>
          <target state="translated">Lines::is_sorted</target>
        </trans-unit>
        <trans-unit id="df56ad513194b7e2615c4a161a02c782cfa18597" translate="yes" xml:space="preserve">
          <source>Lines::is_sorted_by</source>
          <target state="translated">Lines::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="549348b6c236b9c5e489ba42d3701a55b7d82734" translate="yes" xml:space="preserve">
          <source>Lines::is_sorted_by_key</source>
          <target state="translated">Lines::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="ad23821ab124391e5844e617b2135a7792080eb6" translate="yes" xml:space="preserve">
          <source>Lines::last</source>
          <target state="translated">Lines::last</target>
        </trans-unit>
        <trans-unit id="49581840f25939eddba1a97ed61a8fbe4af98228" translate="yes" xml:space="preserve">
          <source>Lines::le</source>
          <target state="translated">Lines::le</target>
        </trans-unit>
        <trans-unit id="5ce22f9e08daae05dcadead96ca9b7d089849e7b" translate="yes" xml:space="preserve">
          <source>Lines::lt</source>
          <target state="translated">Lines::lt</target>
        </trans-unit>
        <trans-unit id="b5d8079e18823a97d5ae8655d5e52f10ef635bcb" translate="yes" xml:space="preserve">
          <source>Lines::map</source>
          <target state="translated">Lines::map</target>
        </trans-unit>
        <trans-unit id="614a9ae44545096b1b3884e6d3ad82e53cc4197f" translate="yes" xml:space="preserve">
          <source>Lines::max</source>
          <target state="translated">Lines::max</target>
        </trans-unit>
        <trans-unit id="a1e90714b091971df104c2796a19294ed2d5f3d0" translate="yes" xml:space="preserve">
          <source>Lines::max_by</source>
          <target state="translated">Lines::max_by</target>
        </trans-unit>
        <trans-unit id="9ba3c4cb804a87fe02fb30b20033fc0256239fa9" translate="yes" xml:space="preserve">
          <source>Lines::max_by_key</source>
          <target state="translated">Lines::max_by_key</target>
        </trans-unit>
        <trans-unit id="2f81bc3f5bd28c127716ebc99f7df429ea02916a" translate="yes" xml:space="preserve">
          <source>Lines::min</source>
          <target state="translated">Lines::min</target>
        </trans-unit>
        <trans-unit id="f6bdf94f2b137aeb300d6f6a8204f93132d08729" translate="yes" xml:space="preserve">
          <source>Lines::min_by</source>
          <target state="translated">Lines::min_by</target>
        </trans-unit>
        <trans-unit id="ea0817f76e8de97f3fd13d10a74c69ddec44ba5d" translate="yes" xml:space="preserve">
          <source>Lines::min_by_key</source>
          <target state="translated">Lines::min_by_key</target>
        </trans-unit>
        <trans-unit id="2e06e53012386709149d18416c71406bb5e98308" translate="yes" xml:space="preserve">
          <source>Lines::ne</source>
          <target state="translated">Lines::ne</target>
        </trans-unit>
        <trans-unit id="8a3c7bb05e3ee78b02e8112decd76c436a757a41" translate="yes" xml:space="preserve">
          <source>Lines::next</source>
          <target state="translated">Lines::next</target>
        </trans-unit>
        <trans-unit id="0ba2ba17bc83abe3966ea3c60ccf5c4a415b799e" translate="yes" xml:space="preserve">
          <source>Lines::next_back</source>
          <target state="translated">Lines::next_back</target>
        </trans-unit>
        <trans-unit id="d260f942e190abf0b5dae16ba0924921789ac4e3" translate="yes" xml:space="preserve">
          <source>Lines::nth</source>
          <target state="translated">Lines::nth</target>
        </trans-unit>
        <trans-unit id="4a8106340de71e1bf2735749672deafa0a99f4ac" translate="yes" xml:space="preserve">
          <source>Lines::nth_back</source>
          <target state="translated">Lines::nth_back</target>
        </trans-unit>
        <trans-unit id="b1c90091b1493451d224f2a812760ca68c93f023" translate="yes" xml:space="preserve">
          <source>Lines::partial_cmp</source>
          <target state="translated">Lines::partial_cmp</target>
        </trans-unit>
        <trans-unit id="1f7e4ad2b6e278cb1d7bb93dbb041bfcb8314693" translate="yes" xml:space="preserve">
          <source>Lines::partition</source>
          <target state="translated">Lines::partition</target>
        </trans-unit>
        <trans-unit id="5a40d6042d715f33d512b8fded4c4ad0004d7fc8" translate="yes" xml:space="preserve">
          <source>Lines::peekable</source>
          <target state="translated">Lines::peekable</target>
        </trans-unit>
        <trans-unit id="0ef8c9b2deeebbbfb28d8bedbe2082467a73887b" translate="yes" xml:space="preserve">
          <source>Lines::position</source>
          <target state="translated">Lines::position</target>
        </trans-unit>
        <trans-unit id="3c0f2b535c534a1201dc481c2a7d0b6cee88a3a3" translate="yes" xml:space="preserve">
          <source>Lines::product</source>
          <target state="translated">Lines::product</target>
        </trans-unit>
        <trans-unit id="ee91dbe8f1da9b3fdffc602c4f0cc913ff3f2c6c" translate="yes" xml:space="preserve">
          <source>Lines::rev</source>
          <target state="translated">Lines::rev</target>
        </trans-unit>
        <trans-unit id="935e7b6c713c89c4b6463979362772b4bb8880e5" translate="yes" xml:space="preserve">
          <source>Lines::rfind</source>
          <target state="translated">Lines::rfind</target>
        </trans-unit>
        <trans-unit id="5224ea274084b3029f8b8f5bc6ae514a00367d1e" translate="yes" xml:space="preserve">
          <source>Lines::rfold</source>
          <target state="translated">Lines::rfold</target>
        </trans-unit>
        <trans-unit id="abfe637f00690ca8200a91d76b479147eae91467" translate="yes" xml:space="preserve">
          <source>Lines::rposition</source>
          <target state="translated">Lines::rposition</target>
        </trans-unit>
        <trans-unit id="ed340f68a3327e076346b4e2959b2b266e5f29be" translate="yes" xml:space="preserve">
          <source>Lines::scan</source>
          <target state="translated">Lines::scan</target>
        </trans-unit>
        <trans-unit id="a761a161c1b6098bcf94f0747288f3a45541eadd" translate="yes" xml:space="preserve">
          <source>Lines::size_hint</source>
          <target state="translated">Lines::size_hint</target>
        </trans-unit>
        <trans-unit id="6d336ec41b198e5804695aa74f33628c93668506" translate="yes" xml:space="preserve">
          <source>Lines::skip</source>
          <target state="translated">Lines::skip</target>
        </trans-unit>
        <trans-unit id="44138b1da9b8676439196e1ec1fcc0142e26e1a8" translate="yes" xml:space="preserve">
          <source>Lines::skip_while</source>
          <target state="translated">Lines::skip_while</target>
        </trans-unit>
        <trans-unit id="3e1e1c98f1dd0b3f7c1acacbe9283e9f5daefa55" translate="yes" xml:space="preserve">
          <source>Lines::step_by</source>
          <target state="translated">Lines::step_by</target>
        </trans-unit>
        <trans-unit id="f9aedc09849901ec1642ba9f8605eeecf09123b2" translate="yes" xml:space="preserve">
          <source>Lines::sum</source>
          <target state="translated">Lines::sum</target>
        </trans-unit>
        <trans-unit id="2470663a295dc56e3c0e4448c703ce1212863df7" translate="yes" xml:space="preserve">
          <source>Lines::take</source>
          <target state="translated">Lines::take</target>
        </trans-unit>
        <trans-unit id="7f3cf9305dbf5474d9b0f33812e5fd684f4fbb90" translate="yes" xml:space="preserve">
          <source>Lines::take_while</source>
          <target state="translated">Lines::take_while</target>
        </trans-unit>
        <trans-unit id="0ada82aa2035b3f1815ea9d773b202ed4b385c8b" translate="yes" xml:space="preserve">
          <source>Lines::to_owned</source>
          <target state="translated">Lines::to_owned</target>
        </trans-unit>
        <trans-unit id="7ec163e8f2aeb66139ccb0cc3aebd5bf021096fb" translate="yes" xml:space="preserve">
          <source>Lines::try_fold</source>
          <target state="translated">Lines::try_fold</target>
        </trans-unit>
        <trans-unit id="6149ef40d421bda4326426968395287948355d1f" translate="yes" xml:space="preserve">
          <source>Lines::try_for_each</source>
          <target state="translated">Lines::try_for_each</target>
        </trans-unit>
        <trans-unit id="9dd788cd9514958a2bed95827ef9d3ab2a7d8662" translate="yes" xml:space="preserve">
          <source>Lines::try_from</source>
          <target state="translated">Lines::try_from</target>
        </trans-unit>
        <trans-unit id="d13bc84fbefcf93bf19a9f1d84a64464f6629ff5" translate="yes" xml:space="preserve">
          <source>Lines::try_into</source>
          <target state="translated">Lines::try_into</target>
        </trans-unit>
        <trans-unit id="f6b94c7395422c8d615bd9a8b770a3fdb8996dda" translate="yes" xml:space="preserve">
          <source>Lines::try_rfold</source>
          <target state="translated">Lines::try_rfold</target>
        </trans-unit>
        <trans-unit id="d2d1ff092a3d5ae3ca53dbacc4143a867f2c28d3" translate="yes" xml:space="preserve">
          <source>Lines::type_id</source>
          <target state="translated">Lines::type_id</target>
        </trans-unit>
        <trans-unit id="110721733261af4f5659ab3ceb7281d54724ddce" translate="yes" xml:space="preserve">
          <source>Lines::unzip</source>
          <target state="translated">Lines::unzip</target>
        </trans-unit>
        <trans-unit id="ac2ef626b02ca1a7104e3bf68147862f9b00b92b" translate="yes" xml:space="preserve">
          <source>Lines::zip</source>
          <target state="translated">Lines::zip</target>
        </trans-unit>
        <trans-unit id="a5b4e4fe083c9638e8c24b728512839d5a24eb13" translate="yes" xml:space="preserve">
          <source>LinesAny</source>
          <target state="translated">LinesAny</target>
        </trans-unit>
        <trans-unit id="50d0696b9d771c6e32ae4a231c173f8b12162e7d" translate="yes" xml:space="preserve">
          <source>LinesAny::all</source>
          <target state="translated">LinesAny::all</target>
        </trans-unit>
        <trans-unit id="ea7ca371f3792d191b9f429c5069dc7ca5811714" translate="yes" xml:space="preserve">
          <source>LinesAny::any</source>
          <target state="translated">LinesAny::any</target>
        </trans-unit>
        <trans-unit id="eaceee1395c9c33b7e4bac14838c806691f2a171" translate="yes" xml:space="preserve">
          <source>LinesAny::borrow</source>
          <target state="translated">LinesAny::borrow</target>
        </trans-unit>
        <trans-unit id="339874a8b3611df4cc512b190364de9c9f58daf1" translate="yes" xml:space="preserve">
          <source>LinesAny::borrow_mut</source>
          <target state="translated">LinesAny::borrow_mut</target>
        </trans-unit>
        <trans-unit id="00ce4a72aad018bb6423092293375bfc3ffe2ebd" translate="yes" xml:space="preserve">
          <source>LinesAny::by_ref</source>
          <target state="translated">LinesAny::by_ref</target>
        </trans-unit>
        <trans-unit id="6826627d501ec9fefb82fead830643f42fca94aa" translate="yes" xml:space="preserve">
          <source>LinesAny::chain</source>
          <target state="translated">LinesAny::chain</target>
        </trans-unit>
        <trans-unit id="a0f1ca375c39b5b68c51a049618944aab22e5c4d" translate="yes" xml:space="preserve">
          <source>LinesAny::clone</source>
          <target state="translated">LinesAny::clone</target>
        </trans-unit>
        <trans-unit id="d95229b0609b9737636c3aa8cd3e14eb5caa254f" translate="yes" xml:space="preserve">
          <source>LinesAny::clone_from</source>
          <target state="translated">LinesAny::clone_from</target>
        </trans-unit>
        <trans-unit id="66c18f49eea62023263263eef98cf41c6d20343e" translate="yes" xml:space="preserve">
          <source>LinesAny::clone_into</source>
          <target state="translated">LinesAny::clone_into</target>
        </trans-unit>
        <trans-unit id="441e3a29dded76521c347e082c9fb1a1edcecb86" translate="yes" xml:space="preserve">
          <source>LinesAny::cloned</source>
          <target state="translated">LinesAny::cloned</target>
        </trans-unit>
        <trans-unit id="744f2399ba085b68d3b164300950552188b8649e" translate="yes" xml:space="preserve">
          <source>LinesAny::cmp</source>
          <target state="translated">LinesAny::cmp</target>
        </trans-unit>
        <trans-unit id="9124d4bf7bfee707b3b64ff8baec01ab9f6fb23f" translate="yes" xml:space="preserve">
          <source>LinesAny::collect</source>
          <target state="translated">LinesAny::collect</target>
        </trans-unit>
        <trans-unit id="ac50d9d978088bbaa0f2ff2dc92c8fbbc85a5a02" translate="yes" xml:space="preserve">
          <source>LinesAny::copied</source>
          <target state="translated">LinesAny::copied</target>
        </trans-unit>
        <trans-unit id="e7886c392db1f35abe056203ae1f365bf23a0a55" translate="yes" xml:space="preserve">
          <source>LinesAny::count</source>
          <target state="translated">LinesAny::count</target>
        </trans-unit>
        <trans-unit id="5454bbe08e402e348146a7efca7478704b3da2b2" translate="yes" xml:space="preserve">
          <source>LinesAny::cycle</source>
          <target state="translated">LinesAny::cycle</target>
        </trans-unit>
        <trans-unit id="c24d5b0d6dd39913088966449818bbe16578daf1" translate="yes" xml:space="preserve">
          <source>LinesAny::enumerate</source>
          <target state="translated">LinesAny::enumerate</target>
        </trans-unit>
        <trans-unit id="abc1e38165bcb0ac9b62d71a7837b7e18d9f4257" translate="yes" xml:space="preserve">
          <source>LinesAny::eq</source>
          <target state="translated">LinesAny::eq</target>
        </trans-unit>
        <trans-unit id="e5e500790b218dc637b9d16594dcb7b20b604692" translate="yes" xml:space="preserve">
          <source>LinesAny::filter</source>
          <target state="translated">LinesAny::filter</target>
        </trans-unit>
        <trans-unit id="0b4b79b532d3f050e5db10eea09df678c183c686" translate="yes" xml:space="preserve">
          <source>LinesAny::filter_map</source>
          <target state="translated">LinesAny::filter_map</target>
        </trans-unit>
        <trans-unit id="6dae73ef1c5ba58c3dd4f63922662214ab41d4ac" translate="yes" xml:space="preserve">
          <source>LinesAny::find</source>
          <target state="translated">LinesAny::find</target>
        </trans-unit>
        <trans-unit id="82e3de07ed537a18ee9c9daee8978809db88327e" translate="yes" xml:space="preserve">
          <source>LinesAny::find_map</source>
          <target state="translated">LinesAny::find_map</target>
        </trans-unit>
        <trans-unit id="23ea470b1a5602c9960b681ccc40896e0a2733fa" translate="yes" xml:space="preserve">
          <source>LinesAny::flat_map</source>
          <target state="translated">LinesAny::flat_map</target>
        </trans-unit>
        <trans-unit id="f47898454b86b4ade9cac1430477a47e263ec329" translate="yes" xml:space="preserve">
          <source>LinesAny::flatten</source>
          <target state="translated">LinesAny::flatten</target>
        </trans-unit>
        <trans-unit id="791173e564b78ab8046ea408aec24e254b6a6465" translate="yes" xml:space="preserve">
          <source>LinesAny::fmt</source>
          <target state="translated">LinesAny::fmt</target>
        </trans-unit>
        <trans-unit id="df42199169b96a89fd0c9cb75443f3371649afda" translate="yes" xml:space="preserve">
          <source>LinesAny::fold</source>
          <target state="translated">LinesAny::fold</target>
        </trans-unit>
        <trans-unit id="fda57c64ce5316c6fb14a1f54d52b531eed49bf1" translate="yes" xml:space="preserve">
          <source>LinesAny::for_each</source>
          <target state="translated">LinesAny::for_each</target>
        </trans-unit>
        <trans-unit id="aa7305638a550afce84c4c0991f5b023d09e95de" translate="yes" xml:space="preserve">
          <source>LinesAny::from</source>
          <target state="translated">LinesAny::from</target>
        </trans-unit>
        <trans-unit id="4b978968906021109eb0659ef6292e83b37ec7e3" translate="yes" xml:space="preserve">
          <source>LinesAny::fuse</source>
          <target state="translated">LinesAny::fuse</target>
        </trans-unit>
        <trans-unit id="75839dadae44fefdf84240ff40835f1b349b7ac8" translate="yes" xml:space="preserve">
          <source>LinesAny::ge</source>
          <target state="translated">LinesAny::ge</target>
        </trans-unit>
        <trans-unit id="fcd54e506a54e7305a5338ce5812c515a8fee462" translate="yes" xml:space="preserve">
          <source>LinesAny::gt</source>
          <target state="translated">LinesAny::gt</target>
        </trans-unit>
        <trans-unit id="f79879fbcf669d23f594e4af159c637f901995e6" translate="yes" xml:space="preserve">
          <source>LinesAny::inspect</source>
          <target state="translated">LinesAny::inspect</target>
        </trans-unit>
        <trans-unit id="866cd90cd57d116e560361e595ffb8f22fa4503f" translate="yes" xml:space="preserve">
          <source>LinesAny::into</source>
          <target state="translated">LinesAny::into</target>
        </trans-unit>
        <trans-unit id="891a441411f2b0f48b870e672955000579690807" translate="yes" xml:space="preserve">
          <source>LinesAny::into_iter</source>
          <target state="translated">LinesAny::into_iter</target>
        </trans-unit>
        <trans-unit id="3db1aceb19bd3aba6ac4d268f7b2f34de4efeb6d" translate="yes" xml:space="preserve">
          <source>LinesAny::is_sorted</source>
          <target state="translated">LinesAny::is_sorted</target>
        </trans-unit>
        <trans-unit id="69f6a048e7f5a4bf2b54b2c1af0630aac3870afb" translate="yes" xml:space="preserve">
          <source>LinesAny::is_sorted_by</source>
          <target state="translated">LinesAny::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="b6a9e8ff41ed3a22713730cab9a8f1633beeed0d" translate="yes" xml:space="preserve">
          <source>LinesAny::is_sorted_by_key</source>
          <target state="translated">LinesAny::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="ee2177488ef8fb35e82ae7fab76c336c05999467" translate="yes" xml:space="preserve">
          <source>LinesAny::last</source>
          <target state="translated">LinesAny::last</target>
        </trans-unit>
        <trans-unit id="ded3552233521574fe0102c5ea2a5c55e58df15d" translate="yes" xml:space="preserve">
          <source>LinesAny::le</source>
          <target state="translated">LinesAny::le</target>
        </trans-unit>
        <trans-unit id="9c86864322572e3c7ba8d0e2cbdf9aac3e7575ff" translate="yes" xml:space="preserve">
          <source>LinesAny::lt</source>
          <target state="translated">LinesAny::lt</target>
        </trans-unit>
        <trans-unit id="927528cee0c90892c7acd207c34bcb5cad130e10" translate="yes" xml:space="preserve">
          <source>LinesAny::map</source>
          <target state="translated">LinesAny::map</target>
        </trans-unit>
        <trans-unit id="069c73fac06d0eb14fd21a8df7bd35cb026f80f2" translate="yes" xml:space="preserve">
          <source>LinesAny::max</source>
          <target state="translated">LinesAny::max</target>
        </trans-unit>
        <trans-unit id="e80485cba09f901bcea49a646821a905fbab42f3" translate="yes" xml:space="preserve">
          <source>LinesAny::max_by</source>
          <target state="translated">LinesAny::max_by</target>
        </trans-unit>
        <trans-unit id="6ce44e8ab15c62c1c3c68a11512817d4b90b12ac" translate="yes" xml:space="preserve">
          <source>LinesAny::max_by_key</source>
          <target state="translated">LinesAny::max_by_key</target>
        </trans-unit>
        <trans-unit id="1713376a6937668b9cdc36fcd74d71514e312a80" translate="yes" xml:space="preserve">
          <source>LinesAny::min</source>
          <target state="translated">LinesAny::min</target>
        </trans-unit>
        <trans-unit id="effd6f4bc710ee4003d3ed2ab2e7e8a7dd1b246e" translate="yes" xml:space="preserve">
          <source>LinesAny::min_by</source>
          <target state="translated">LinesAny::min_by</target>
        </trans-unit>
        <trans-unit id="cfbe522a9b0c7a529e31a382923bec416e3ebb2b" translate="yes" xml:space="preserve">
          <source>LinesAny::min_by_key</source>
          <target state="translated">LinesAny::min_by_key</target>
        </trans-unit>
        <trans-unit id="761424028541c41bf56adc55dbbcfe22e06a5641" translate="yes" xml:space="preserve">
          <source>LinesAny::ne</source>
          <target state="translated">LinesAny::ne</target>
        </trans-unit>
        <trans-unit id="bbc0eca474d568f89d7cec3cba132add4c81aa92" translate="yes" xml:space="preserve">
          <source>LinesAny::next</source>
          <target state="translated">LinesAny::next</target>
        </trans-unit>
        <trans-unit id="1cd393bcdce512664f7285f8c4e981c72c25faa6" translate="yes" xml:space="preserve">
          <source>LinesAny::next_back</source>
          <target state="translated">LinesAny::next_back</target>
        </trans-unit>
        <trans-unit id="348866f6e8632eb200d982720eee7c7f6a304bc2" translate="yes" xml:space="preserve">
          <source>LinesAny::nth</source>
          <target state="translated">LinesAny::nth</target>
        </trans-unit>
        <trans-unit id="35ade955861a0acb638430cb079e5172b172adc4" translate="yes" xml:space="preserve">
          <source>LinesAny::nth_back</source>
          <target state="translated">LinesAny::nth_back</target>
        </trans-unit>
        <trans-unit id="036f1ed8cf2808058067780cf9a56693aea9533e" translate="yes" xml:space="preserve">
          <source>LinesAny::partial_cmp</source>
          <target state="translated">LinesAny::partial_cmp</target>
        </trans-unit>
        <trans-unit id="e7a277d7600859cd1276cecfde64f2c58e6b270a" translate="yes" xml:space="preserve">
          <source>LinesAny::partition</source>
          <target state="translated">LinesAny::partition</target>
        </trans-unit>
        <trans-unit id="2a376b60138b3f9ab3489e4397a96386f383976f" translate="yes" xml:space="preserve">
          <source>LinesAny::peekable</source>
          <target state="translated">LinesAny::peekable</target>
        </trans-unit>
        <trans-unit id="b2f7b49c5f22a22521eb3b4f5bc9411aa536a9d4" translate="yes" xml:space="preserve">
          <source>LinesAny::position</source>
          <target state="translated">LinesAny::position</target>
        </trans-unit>
        <trans-unit id="d83cedb5fed8302d8ce91b0ec10a295706e82f9a" translate="yes" xml:space="preserve">
          <source>LinesAny::product</source>
          <target state="translated">LinesAny::product</target>
        </trans-unit>
        <trans-unit id="c0a1fa23f765931fbfa76a9576dab1f2a14d27e5" translate="yes" xml:space="preserve">
          <source>LinesAny::rev</source>
          <target state="translated">LinesAny::rev</target>
        </trans-unit>
        <trans-unit id="fb23acde77ed2fa2ecaf814134742ddfb68a6387" translate="yes" xml:space="preserve">
          <source>LinesAny::rfind</source>
          <target state="translated">LinesAny::rfind</target>
        </trans-unit>
        <trans-unit id="440fcf5a2976a4375e5ec4abc4701ae6f02a1d57" translate="yes" xml:space="preserve">
          <source>LinesAny::rfold</source>
          <target state="translated">LinesAny::rfold</target>
        </trans-unit>
        <trans-unit id="8dee856d06d7c509572aba5e43848bb1e6e538d6" translate="yes" xml:space="preserve">
          <source>LinesAny::rposition</source>
          <target state="translated">LinesAny::rposition</target>
        </trans-unit>
        <trans-unit id="e4ba89a4858b4a56d5e05371a82d02c208e0c740" translate="yes" xml:space="preserve">
          <source>LinesAny::scan</source>
          <target state="translated">LinesAny::scan</target>
        </trans-unit>
        <trans-unit id="7689104a5e0e4ed4cad1f816312ca7576e1e7785" translate="yes" xml:space="preserve">
          <source>LinesAny::size_hint</source>
          <target state="translated">LinesAny::size_hint</target>
        </trans-unit>
        <trans-unit id="246ed84cdb667d9ea94b597e4f282b8a55042d26" translate="yes" xml:space="preserve">
          <source>LinesAny::skip</source>
          <target state="translated">LinesAny::skip</target>
        </trans-unit>
        <trans-unit id="909e73392045bc759da125f28487c615065d6a92" translate="yes" xml:space="preserve">
          <source>LinesAny::skip_while</source>
          <target state="translated">LinesAny::skip_while</target>
        </trans-unit>
        <trans-unit id="d2ff3f837735bd2c1a9bc5cc75f48bf8843a6c4d" translate="yes" xml:space="preserve">
          <source>LinesAny::step_by</source>
          <target state="translated">LinesAny::step_by</target>
        </trans-unit>
        <trans-unit id="b30cdb62236eea6a9b5f35a665261e7a72c628ab" translate="yes" xml:space="preserve">
          <source>LinesAny::sum</source>
          <target state="translated">LinesAny::sum</target>
        </trans-unit>
        <trans-unit id="32fab65ff6a39e7a4e8ef2e1b59230a0ba2fff08" translate="yes" xml:space="preserve">
          <source>LinesAny::take</source>
          <target state="translated">LinesAny::take</target>
        </trans-unit>
        <trans-unit id="d8d313d2bce93b25cf57221dc2c4ff7216402612" translate="yes" xml:space="preserve">
          <source>LinesAny::take_while</source>
          <target state="translated">LinesAny::take_while</target>
        </trans-unit>
        <trans-unit id="c67e6599ac7b7afa3ef22132e2c06d4c070d63ed" translate="yes" xml:space="preserve">
          <source>LinesAny::to_owned</source>
          <target state="translated">LinesAny::to_owned</target>
        </trans-unit>
        <trans-unit id="20c912a580ad096620b75e76687c0ee1fce8b870" translate="yes" xml:space="preserve">
          <source>LinesAny::try_fold</source>
          <target state="translated">LinesAny::try_fold</target>
        </trans-unit>
        <trans-unit id="b380c671d14cfe8524018e00f615da7712116b33" translate="yes" xml:space="preserve">
          <source>LinesAny::try_for_each</source>
          <target state="translated">LinesAny::try_for_each</target>
        </trans-unit>
        <trans-unit id="9bde719197639fab83e9e9e39c418d04bc5fabc0" translate="yes" xml:space="preserve">
          <source>LinesAny::try_from</source>
          <target state="translated">LinesAny::try_from</target>
        </trans-unit>
        <trans-unit id="4523c2974b49c9e499a06112b673bce79a5682ca" translate="yes" xml:space="preserve">
          <source>LinesAny::try_into</source>
          <target state="translated">LinesAny::try_into</target>
        </trans-unit>
        <trans-unit id="adaacb5f58637c1818991eb057725b1bddcbde60" translate="yes" xml:space="preserve">
          <source>LinesAny::try_rfold</source>
          <target state="translated">LinesAny::try_rfold</target>
        </trans-unit>
        <trans-unit id="65df302a36a5fd90859abbc45f6bb82dd545c392" translate="yes" xml:space="preserve">
          <source>LinesAny::type_id</source>
          <target state="translated">LinesAny::type_id</target>
        </trans-unit>
        <trans-unit id="79aaf64b0da1522cdfbe1d1c8bf9bb55bf34aec3" translate="yes" xml:space="preserve">
          <source>LinesAny::unzip</source>
          <target state="translated">LinesAny::unzip</target>
        </trans-unit>
        <trans-unit id="fd9d3ff7199d26e6f488d2dae1459473aa35580f" translate="yes" xml:space="preserve">
          <source>LinesAny::zip</source>
          <target state="translated">LinesAny::zip</target>
        </trans-unit>
        <trans-unit id="71af1e2770b43b7090642140fa16af5bed8944e7" translate="yes" xml:space="preserve">
          <source>Link to or import external code.</source>
          <target state="translated">链接或导入外部代码。</target>
        </trans-unit>
        <trans-unit id="b27dc31140950c016978fcb4c144b7b2d3cbc47c" translate="yes" xml:space="preserve">
          <source>Linkage</source>
          <target state="translated">Linkage</target>
        </trans-unit>
        <trans-unit id="bab055db373c2bd47845a4b8346d451b92d62d04" translate="yes" xml:space="preserve">
          <source>LinkedList</source>
          <target state="translated">LinkedList</target>
        </trans-unit>
        <trans-unit id="1d7221a28e2cfaffe53101715b4d86de4a7dfd66" translate="yes" xml:space="preserve">
          <source>LinkedList::append</source>
          <target state="translated">LinkedList::append</target>
        </trans-unit>
        <trans-unit id="1895cbb1840fda13a9cc8ade4ba2697d6ee535ba" translate="yes" xml:space="preserve">
          <source>LinkedList::back</source>
          <target state="translated">LinkedList::back</target>
        </trans-unit>
        <trans-unit id="fb9b42c2685a8dbac5e3324f563be3cf1796e0f7" translate="yes" xml:space="preserve">
          <source>LinkedList::back_mut</source>
          <target state="translated">LinkedList::back_mut</target>
        </trans-unit>
        <trans-unit id="aeefad8183cfacb39ce919c344e239ec9862670a" translate="yes" xml:space="preserve">
          <source>LinkedList::borrow</source>
          <target state="translated">LinkedList::borrow</target>
        </trans-unit>
        <trans-unit id="f0472e58357878f0d621d8e733e25008c34ff0d4" translate="yes" xml:space="preserve">
          <source>LinkedList::borrow_mut</source>
          <target state="translated">LinkedList::borrow_mut</target>
        </trans-unit>
        <trans-unit id="9f3aa78515eb4fc9deb2a76686b78a146f73eb38" translate="yes" xml:space="preserve">
          <source>LinkedList::clamp</source>
          <target state="translated">LinkedList::clamp</target>
        </trans-unit>
        <trans-unit id="3baba029bff9f9a8da41e69bf275599409315dea" translate="yes" xml:space="preserve">
          <source>LinkedList::clear</source>
          <target state="translated">LinkedList::clear</target>
        </trans-unit>
        <trans-unit id="b972add787b37d5ea83979a9babf5c655421182c" translate="yes" xml:space="preserve">
          <source>LinkedList::clone</source>
          <target state="translated">LinkedList::clone</target>
        </trans-unit>
        <trans-unit id="d21432942f743319b674b435f05ab6c5ff5ceb45" translate="yes" xml:space="preserve">
          <source>LinkedList::clone_from</source>
          <target state="translated">LinkedList::clone_from</target>
        </trans-unit>
        <trans-unit id="e521e60d987254a0a5060550d04ba661cea61182" translate="yes" xml:space="preserve">
          <source>LinkedList::clone_into</source>
          <target state="translated">LinkedList::clone_into</target>
        </trans-unit>
        <trans-unit id="9f29b8bd9f1deec7cb7860f77db7caed1761fde0" translate="yes" xml:space="preserve">
          <source>LinkedList::cmp</source>
          <target state="translated">LinkedList::cmp</target>
        </trans-unit>
        <trans-unit id="ccd5a8c5a791726f4df2343870cdf109d703dabe" translate="yes" xml:space="preserve">
          <source>LinkedList::contains</source>
          <target state="translated">LinkedList::contains</target>
        </trans-unit>
        <trans-unit id="a76836ecf8c9b26fd2d43cce79e0fe84c227ac1c" translate="yes" xml:space="preserve">
          <source>LinkedList::default</source>
          <target state="translated">LinkedList::default</target>
        </trans-unit>
        <trans-unit id="ad6cfc9a10d865a130da8928e34af1d02ab576ea" translate="yes" xml:space="preserve">
          <source>LinkedList::drain_filter</source>
          <target state="translated">LinkedList::drain_filter</target>
        </trans-unit>
        <trans-unit id="583ae501326187c6a589c8d5408fb366f81fec10" translate="yes" xml:space="preserve">
          <source>LinkedList::drop</source>
          <target state="translated">LinkedList::drop</target>
        </trans-unit>
        <trans-unit id="6301ceeaee9df1ed7f193c202b13ffc15e661714" translate="yes" xml:space="preserve">
          <source>LinkedList::eq</source>
          <target state="translated">LinkedList::eq</target>
        </trans-unit>
        <trans-unit id="77b4598013cab9585f2476223b3e1be72456832b" translate="yes" xml:space="preserve">
          <source>LinkedList::extend</source>
          <target state="translated">LinkedList::extend</target>
        </trans-unit>
        <trans-unit id="608037fd51a0ef7ad03cdc898ed57c030bba5615" translate="yes" xml:space="preserve">
          <source>LinkedList::fmt</source>
          <target state="translated">LinkedList::fmt</target>
        </trans-unit>
        <trans-unit id="e8bf373454052a6ba258ffae57c3fffe801621c8" translate="yes" xml:space="preserve">
          <source>LinkedList::from</source>
          <target state="translated">LinkedList::from</target>
        </trans-unit>
        <trans-unit id="fff7a5e258af5f94d02ad10517105bd6ae19ad1c" translate="yes" xml:space="preserve">
          <source>LinkedList::from_iter</source>
          <target state="translated">LinkedList::from_iter</target>
        </trans-unit>
        <trans-unit id="62f83fd14d02c88124237f88b98c0568c81763fe" translate="yes" xml:space="preserve">
          <source>LinkedList::front</source>
          <target state="translated">LinkedList::front</target>
        </trans-unit>
        <trans-unit id="1abcf1046d63b3865baff546477ab93014ed41d5" translate="yes" xml:space="preserve">
          <source>LinkedList::front_mut</source>
          <target state="translated">LinkedList::front_mut</target>
        </trans-unit>
        <trans-unit id="9da5a1a1956863555de3271d6dce56a14e82b81b" translate="yes" xml:space="preserve">
          <source>LinkedList::ge</source>
          <target state="translated">LinkedList::ge</target>
        </trans-unit>
        <trans-unit id="b68f64c55807bad13d66aad77d1f280b61acff1d" translate="yes" xml:space="preserve">
          <source>LinkedList::gt</source>
          <target state="translated">LinkedList::gt</target>
        </trans-unit>
        <trans-unit id="3a3f99a3bcea8cbedb769508fda844b7b1adb456" translate="yes" xml:space="preserve">
          <source>LinkedList::hash</source>
          <target state="translated">LinkedList::hash</target>
        </trans-unit>
        <trans-unit id="e95d9cb92e64928cbc90c39d314a48a48dfea313" translate="yes" xml:space="preserve">
          <source>LinkedList::hash_slice</source>
          <target state="translated">LinkedList::hash_slice</target>
        </trans-unit>
        <trans-unit id="e33fed4b6351f89714c72f7b2a4177412286fec6" translate="yes" xml:space="preserve">
          <source>LinkedList::into</source>
          <target state="translated">LinkedList::into</target>
        </trans-unit>
        <trans-unit id="766e05fb903f7eb9ff25ac17cf4e06d9f1929fd9" translate="yes" xml:space="preserve">
          <source>LinkedList::into_iter</source>
          <target state="translated">LinkedList::into_iter</target>
        </trans-unit>
        <trans-unit id="2e0e79f453a69656dc466af6d05746d624ff1ae4" translate="yes" xml:space="preserve">
          <source>LinkedList::is_empty</source>
          <target state="translated">LinkedList::is_empty</target>
        </trans-unit>
        <trans-unit id="e88e61cdc633b79e95bbe6590b23dc45f89946fc" translate="yes" xml:space="preserve">
          <source>LinkedList::iter</source>
          <target state="translated">LinkedList::iter</target>
        </trans-unit>
        <trans-unit id="cee708cef5fa86c3ff958ea2f950f6db04049589" translate="yes" xml:space="preserve">
          <source>LinkedList::iter_mut</source>
          <target state="translated">LinkedList::iter_mut</target>
        </trans-unit>
        <trans-unit id="3d957ea408e1550352277ca227fc2f829c0460ad" translate="yes" xml:space="preserve">
          <source>LinkedList::le</source>
          <target state="translated">LinkedList::le</target>
        </trans-unit>
        <trans-unit id="424eaf002d8d7ba6a77b2ab1ede535f4b32c15f5" translate="yes" xml:space="preserve">
          <source>LinkedList::len</source>
          <target state="translated">LinkedList::len</target>
        </trans-unit>
        <trans-unit id="2a534bb5f111c0bc831ab86c366d42b98c74650b" translate="yes" xml:space="preserve">
          <source>LinkedList::lt</source>
          <target state="translated">LinkedList::lt</target>
        </trans-unit>
        <trans-unit id="254aa9ae679e95aa432b0fcdbdcf6b656e7fc7c6" translate="yes" xml:space="preserve">
          <source>LinkedList::max</source>
          <target state="translated">LinkedList::max</target>
        </trans-unit>
        <trans-unit id="ecfe0d937bdf6f89217a83803176ba27706d5dca" translate="yes" xml:space="preserve">
          <source>LinkedList::min</source>
          <target state="translated">LinkedList::min</target>
        </trans-unit>
        <trans-unit id="ab4c7b8f4e56759824516d40590391af73cac9fa" translate="yes" xml:space="preserve">
          <source>LinkedList::ne</source>
          <target state="translated">LinkedList::ne</target>
        </trans-unit>
        <trans-unit id="333d62ab1ea8e3e4dc30bac4d5d9f0b5e6c77c22" translate="yes" xml:space="preserve">
          <source>LinkedList::new</source>
          <target state="translated">LinkedList::new</target>
        </trans-unit>
        <trans-unit id="a2b7ac726387587715d52ebb92e5c29e77cb33e1" translate="yes" xml:space="preserve">
          <source>LinkedList::partial_cmp</source>
          <target state="translated">LinkedList::partial_cmp</target>
        </trans-unit>
        <trans-unit id="f8293c7077106d4b63d69b4d72f6a4fe40792d01" translate="yes" xml:space="preserve">
          <source>LinkedList::pop_back</source>
          <target state="translated">LinkedList::pop_back</target>
        </trans-unit>
        <trans-unit id="3f993ac47755f3392ca56cfccda9ecba6405e26b" translate="yes" xml:space="preserve">
          <source>LinkedList::pop_front</source>
          <target state="translated">LinkedList::pop_front</target>
        </trans-unit>
        <trans-unit id="701fbf3a6d15709aea76308d3e9d1527b1c4edd8" translate="yes" xml:space="preserve">
          <source>LinkedList::push_back</source>
          <target state="translated">LinkedList::push_back</target>
        </trans-unit>
        <trans-unit id="758742c4eae9921c4b4523a6a8ffb689a56b27e5" translate="yes" xml:space="preserve">
          <source>LinkedList::push_front</source>
          <target state="translated">LinkedList::push_front</target>
        </trans-unit>
        <trans-unit id="7409b474e7f0cc7aa75edcf54dff71677de4e953" translate="yes" xml:space="preserve">
          <source>LinkedList::split_off</source>
          <target state="translated">LinkedList::split_off</target>
        </trans-unit>
        <trans-unit id="06254639b024854066be47e53a3fdd1bd51afd6f" translate="yes" xml:space="preserve">
          <source>LinkedList::to_owned</source>
          <target state="translated">LinkedList::to_owned</target>
        </trans-unit>
        <trans-unit id="975eb49c7c314d4af7f629e3d17e72a12525eee7" translate="yes" xml:space="preserve">
          <source>LinkedList::try_from</source>
          <target state="translated">LinkedList::try_from</target>
        </trans-unit>
        <trans-unit id="02f1a7bb831be2a961fab78ae0060fcc91a42277" translate="yes" xml:space="preserve">
          <source>LinkedList::try_into</source>
          <target state="translated">LinkedList::try_into</target>
        </trans-unit>
        <trans-unit id="cd0830f00f50909bc1064993774e70d85f94caff" translate="yes" xml:space="preserve">
          <source>LinkedList::type_id</source>
          <target state="translated">LinkedList::type_id</target>
        </trans-unit>
        <trans-unit id="8def6848fe71172506103d61fb17e6920134fdbf" translate="yes" xml:space="preserve">
          <source>Linking with &lt;code&gt;kind=framework&lt;/code&gt; is only supported when targeting macOS, as frameworks are specific to that operating system.</source>
          <target state="translated">仅当针对macOS时才支持与 &lt;code&gt;kind=framework&lt;/code&gt; 链接，因为框架特定于该操作系统。</target>
        </trans-unit>
        <trans-unit id="bb2acd3d0a8a476d7ebbe9759952a9cb78815b1f" translate="yes" xml:space="preserve">
          <source>Lint attributes only accept a list of identifiers (where each identifier is a lint name). Ensure the attribute is of this form:</source>
          <target state="translated">Lint属性只接受一个标识符列表(其中每个标识符是一个lint名称)。确保属性是这种形式。</target>
        </trans-unit>
        <trans-unit id="f633dc23b558481af643afd30a88abcf9c4150e9" translate="yes" xml:space="preserve">
          <source>Lint check attributes</source>
          <target state="translated">Lint检查属性</target>
        </trans-unit>
        <trans-unit id="83ad8510bbd3f22363d068e1c96f82fd0fcccd31" translate="yes" xml:space="preserve">
          <source>Linux</source>
          <target state="translated">Linux</target>
        </trans-unit>
        <trans-unit id="c598f23c3c7247b9cca836018ec6ace3cd22938a" translate="yes" xml:space="preserve">
          <source>Linux-specific definitions</source>
          <target state="translated">Linux专用定义</target>
        </trans-unit>
        <trans-unit id="3cf4d01174137c549cf6f469c1808221a6913a57" translate="yes" xml:space="preserve">
          <source>Linux-specific definitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebce14ef973d4e86761e4a1e5af7d41a0f7d561c" translate="yes" xml:space="preserve">
          <source>Linux-specific extensions to primitives in the &lt;code&gt;std::fs&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655fb3817fa9880a35bd412dfea28c6b355f79d0" translate="yes" xml:space="preserve">
          <source>Linux-specific raw type definitions</source>
          <target state="translated">Linux特有的原始类型定义</target>
        </trans-unit>
        <trans-unit id="5fc8bfaeb191b0f4decd3381991ca9ea5a7c9358" translate="yes" xml:space="preserve">
          <source>Linux-specific raw type definitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0bf51dca9ad41726a0ce1d53a9ddf560a97cbe3" translate="yes" xml:space="preserve">
          <source>List of all items</source>
          <target state="translated">所有项目的清单</target>
        </trans-unit>
        <trans-unit id="ad863bfa3ec2a8731acc0682128beedfee0d1c25" translate="yes" xml:space="preserve">
          <source>Listen for TCP connections on a socket.</source>
          <target state="translated">侦听套接字上的TCP连接。</target>
        </trans-unit>
        <trans-unit id="0f71a0caf69d45adcd56f43ef19c4828127d7dfd" translate="yes" xml:space="preserve">
          <source>Listening to the TCP Connection</source>
          <target state="translated">监听TCP连接</target>
        </trans-unit>
        <trans-unit id="000eca635bbec1c8b03148386174299cd0ac7bc3" translate="yes" xml:space="preserve">
          <source>Listing 1-1: A program that prints &lt;code&gt;Hello, world!&lt;/code&gt;</source>
          <target state="translated">代码清单1-1：一个打印 &lt;code&gt;Hello, world!&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b687784614bd2cea58910d0e427db67a0386ccf0" translate="yes" xml:space="preserve">
          <source>Listing 1-2: Contents of &lt;em&gt;Cargo.toml&lt;/em&gt; generated by &lt;code&gt;cargo new&lt;/code&gt;</source>
          <target state="translated">清单1-2： &lt;code&gt;cargo new&lt;/code&gt; 产生的&lt;em&gt;Cargo.toml&lt;/em&gt;内容</target>
        </trans-unit>
        <trans-unit id="d69c613a4dbd2d9b96a6c273fabfeeb75c302d08" translate="yes" xml:space="preserve">
          <source>Listing 10-10: An &lt;code&gt;impl&lt;/code&gt; block that only applies to a struct with a particular concrete type for the generic type parameter &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">清单10-10：一个仅适用于通用类型参数 &lt;code&gt;T&lt;/code&gt; 具有特定具体类型的结构的 &lt;code&gt;impl&lt;/code&gt; 块</target>
        </trans-unit>
        <trans-unit id="0f5202dea4805314e71b6d9bc482bf479c967fce" translate="yes" xml:space="preserve">
          <source>Listing 10-11: A method that uses different generic types from its struct&amp;rsquo;s definition</source>
          <target state="translated">代码清单10-11：一种使用与结构定义不同的泛型类型的方法</target>
        </trans-unit>
        <trans-unit id="fe08fd9b19ee480cba2ab27759199b72d161b78a" translate="yes" xml:space="preserve">
          <source>Listing 10-12: A &lt;code&gt;Summary&lt;/code&gt; trait that consists of the behavior provided by a &lt;code&gt;summarize&lt;/code&gt; method</source>
          <target state="translated">清单10-12： &lt;code&gt;Summary&lt;/code&gt; 特征，由 &lt;code&gt;summarize&lt;/code&gt; 方法提供的行为组成</target>
        </trans-unit>
        <trans-unit id="f858d0a318247c8524e6194f908444c2dd7b6a7c" translate="yes" xml:space="preserve">
          <source>Listing 10-13: Implementing the &lt;code&gt;Summary&lt;/code&gt; trait on the &lt;code&gt;NewsArticle&lt;/code&gt; and &lt;code&gt;Tweet&lt;/code&gt; types</source>
          <target state="translated">清单10-13：在 &lt;code&gt;NewsArticle&lt;/code&gt; 和 &lt;code&gt;Tweet&lt;/code&gt; 类型上实现 &lt;code&gt;Summary&lt;/code&gt; 特性</target>
        </trans-unit>
        <trans-unit id="0c2939a5b3aa237684a06426fda3254a38689ee2" translate="yes" xml:space="preserve">
          <source>Listing 10-14 shows how to specify a default string for the &lt;code&gt;summarize&lt;/code&gt; method of the &lt;code&gt;Summary&lt;/code&gt; trait instead of only defining the method signature, as we did in Listing 10-12.</source>
          <target state="translated">清单10-14显示了如何指定一个默认字符串为 &lt;code&gt;summarize&lt;/code&gt; 的方法 &lt;code&gt;Summary&lt;/code&gt; 特质，而不是仅定义方法签名，因为我们在清单10-12一样。</target>
        </trans-unit>
        <trans-unit id="0eda626113b95538f2b58d77e3a158bc3fb384ff" translate="yes" xml:space="preserve">
          <source>Listing 10-14: Definition of a &lt;code&gt;Summary&lt;/code&gt; trait with a default implementation of the &lt;code&gt;summarize&lt;/code&gt; method</source>
          <target state="translated">清单10-14：一个定义 &lt;code&gt;Summary&lt;/code&gt; 特质与的默认实现 &lt;code&gt;summarize&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="3d3f5beaa880b557bbf950778ea6d843b28c2edd" translate="yes" xml:space="preserve">
          <source>Listing 10-15: A working definition of the &lt;code&gt;largest&lt;/code&gt; function that works on any generic type that implements the &lt;code&gt;PartialOrd&lt;/code&gt; and &lt;code&gt;Copy&lt;/code&gt; traits</source>
          <target state="translated">清单10-15： &lt;code&gt;largest&lt;/code&gt; 函数的有效定义，该函数可用于实现 &lt;code&gt;PartialOrd&lt;/code&gt; 和 &lt;code&gt;Copy&lt;/code&gt; 特征的任何泛型类型</target>
        </trans-unit>
        <trans-unit id="f215c1a3fe409bbb8c9f543a15d9c5622d086343" translate="yes" xml:space="preserve">
          <source>Listing 10-16: Conditionally implement methods on a generic type depending on trait bounds</source>
          <target state="translated">清单10-16:根据性状边界有条件地实现通用类型的方法。</target>
        </trans-unit>
        <trans-unit id="c9a836a730288e3b26429843a74b8737cf9da160" translate="yes" xml:space="preserve">
          <source>Listing 10-17: An attempt to use a reference whose value has gone out of scope</source>
          <target state="translated">清单10-17:尝试使用一个其值已超出范围的引用</target>
        </trans-unit>
        <trans-unit id="9ad5b72420956c593772603b787e8a64675cb059" translate="yes" xml:space="preserve">
          <source>Listing 10-18: Annotations of the lifetimes of &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;, named &lt;code&gt;'a&lt;/code&gt; and &lt;code&gt;'b&lt;/code&gt;, respectively</source>
          <target state="translated">清单10-18： &lt;code&gt;r&lt;/code&gt; 和 &lt;code&gt;x&lt;/code&gt; 的生命周期注释，分别命名为 &lt;code&gt;'a&lt;/code&gt; 和 &lt;code&gt;'b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f0d74437b0b11c64f9bc42e955988c7e4c63e87" translate="yes" xml:space="preserve">
          <source>Listing 10-19 fixes the code so it doesn&amp;rsquo;t have a dangling reference and compiles without any errors.</source>
          <target state="translated">清单10-19修复了代码，因此它没有悬挂的引用，并且编译时没有任何错误。</target>
        </trans-unit>
        <trans-unit id="320ea9cdf60881bf8c53102bd42e44f1ac78cf9d" translate="yes" xml:space="preserve">
          <source>Listing 10-19: A valid reference because the data has a longer lifetime than the reference</source>
          <target state="translated">清单10-19:有效的参考资料,因为数据的寿命比参考资料长。</target>
        </trans-unit>
        <trans-unit id="428105c6c3f48847f9a6db3d7935b282600e843e" translate="yes" xml:space="preserve">
          <source>Listing 10-1: Code to find the largest number in a list of numbers</source>
          <target state="translated">清单10-1:在数字列表中寻找最大数字的代码。</target>
        </trans-unit>
        <trans-unit id="66b6555b4c7bece5ed7002dc31c9389ead9a69af" translate="yes" xml:space="preserve">
          <source>Listing 10-20: A &lt;code&gt;main&lt;/code&gt; function that calls the &lt;code&gt;longest&lt;/code&gt; function to find the longer of two string slices</source>
          <target state="translated">清单10-20：调用 &lt;code&gt;longest&lt;/code&gt; 函数以查找两个字符串片段中较长者的 &lt;code&gt;main&lt;/code&gt; 函数</target>
        </trans-unit>
        <trans-unit id="f783ca5d0ba6bb131bda7299c84bb28122223a0f" translate="yes" xml:space="preserve">
          <source>Listing 10-21: An implementation of the &lt;code&gt;longest&lt;/code&gt; function that returns the longer of two string slices but does not yet compile</source>
          <target state="translated">清单10-21： &lt;code&gt;longest&lt;/code&gt; 函数的实现，该函数返回两个字符串片段中的较长者，但尚未编译</target>
        </trans-unit>
        <trans-unit id="aaf3cbf8878f3cdb39331e6656cf6c2a012e46f1" translate="yes" xml:space="preserve">
          <source>Listing 10-22: The &lt;code&gt;longest&lt;/code&gt; function definition specifying that all the references in the signature must have the same lifetime &lt;code&gt;'a&lt;/code&gt;</source>
          <target state="translated">清单10-22： &lt;code&gt;longest&lt;/code&gt; 函数定义，指定签名中的所有引用必须具有相同的生存期 &lt;code&gt;'a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f7d43de8a6a7d0dddb054a46fe89c681a077224e" translate="yes" xml:space="preserve">
          <source>Listing 10-23: Using the &lt;code&gt;longest&lt;/code&gt; function with references to &lt;code&gt;String&lt;/code&gt; values that have different concrete lifetimes</source>
          <target state="translated">清单10-23：将 &lt;code&gt;longest&lt;/code&gt; 函数与对具有不同具体生存期的 &lt;code&gt;String&lt;/code&gt; 值的引用一起使用</target>
        </trans-unit>
        <trans-unit id="152dda571254cbe64f53382aaba9a1165e9c78dd" translate="yes" xml:space="preserve">
          <source>Listing 10-24: Attempting to use &lt;code&gt;result&lt;/code&gt; after &lt;code&gt;string2&lt;/code&gt; has gone out of scope</source>
          <target state="translated">清单10-24：在 &lt;code&gt;string2&lt;/code&gt; 超出范围后尝试使用 &lt;code&gt;result&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0e3d08cfc75a3e760350ab76ffa641dae696768e" translate="yes" xml:space="preserve">
          <source>Listing 10-25: A struct that holds a reference, so its definition needs a lifetime annotation</source>
          <target state="translated">清单 10-25:一个持有引用的结构,所以它的定义需要一个终身注解。</target>
        </trans-unit>
        <trans-unit id="0ad37b59fb9959c9e9937f7b00c202068f572669" translate="yes" xml:space="preserve">
          <source>Listing 10-26: A function we defined in Listing 4-9 that compiled without lifetime annotations, even though the parameter and return type are references</source>
          <target state="translated">清单 10-26:我们在清单4-9中定义的一个函数,虽然参数和返回类型都是引用,但编译时却没有使用寿命注释</target>
        </trans-unit>
        <trans-unit id="8945acfd7307f375b353403628127c294243126c" translate="yes" xml:space="preserve">
          <source>Listing 10-2: Code to find the largest number in &lt;em&gt;two&lt;/em&gt; lists of numbers</source>
          <target state="translated">清单10-2：在&lt;em&gt;两个&lt;/em&gt;数字列表中查找最大数字的代码</target>
        </trans-unit>
        <trans-unit id="d54bf4bc462c613f282e10138aab127e4859709f" translate="yes" xml:space="preserve">
          <source>Listing 10-3: Abstracted code to find the largest number in two lists</source>
          <target state="translated">清单10-3:寻找两个列表中最大数字的抽象代码。</target>
        </trans-unit>
        <trans-unit id="9f511a6e488da24eb1846119f6145be6fda9dc51" translate="yes" xml:space="preserve">
          <source>Listing 10-4: Two functions that differ only in their names and the types in their signatures</source>
          <target state="translated">清单10-4:两个函数只在名称和签名中的类型上有所不同</target>
        </trans-unit>
        <trans-unit id="ff1ba52b39d8dd460657964860b8df2c48ffd5a7" translate="yes" xml:space="preserve">
          <source>Listing 10-5 shows the combined &lt;code&gt;largest&lt;/code&gt; function definition using the generic data type in its signature. The listing also shows how we can call the function with either a slice of &lt;code&gt;i32&lt;/code&gt; values or &lt;code&gt;char&lt;/code&gt; values. Note that this code won&amp;rsquo;t compile yet, but we&amp;rsquo;ll fix it later in this chapter.</source>
          <target state="translated">清单10-5显示了在签名中使用通用数据类型的 &lt;code&gt;largest&lt;/code&gt; 组合函数定义。清单还显示了如何使用 &lt;code&gt;i32&lt;/code&gt; 值切片或 &lt;code&gt;char&lt;/code&gt; 值调用函数。请注意，该代码尚未编译，但我们将在本章稍后对其进行修复。</target>
        </trans-unit>
        <trans-unit id="143c8015eb195c0a855921a232d48882fdfa6199" translate="yes" xml:space="preserve">
          <source>Listing 10-5: A definition of the &lt;code&gt;largest&lt;/code&gt; function that uses generic type parameters but doesn&amp;rsquo;t compile yet</source>
          <target state="translated">清单10-5：使用通用类型参数但尚未编译的 &lt;code&gt;largest&lt;/code&gt; 函数的定义</target>
        </trans-unit>
        <trans-unit id="9f174805e0992f398e1f1ca5f29a19ffc4d27694" translate="yes" xml:space="preserve">
          <source>Listing 10-6: A &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; struct that holds &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values of type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">清单10-6：一个 &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; 结构，该结构保存 &lt;code&gt;T&lt;/code&gt; 类型的 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 值</target>
        </trans-unit>
        <trans-unit id="9448d8af833108533fe15031b8b4d2802fea9fee" translate="yes" xml:space="preserve">
          <source>Listing 10-7: The fields &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; must be the same type because both have the same generic data type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">清单10-7：字段 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 必须是同一类型的，因为两者具有相同的通用数据类型 &lt;code&gt;T&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ec2d0e7e138a4ceaea7913152f5ca90e974321a2" translate="yes" xml:space="preserve">
          <source>Listing 10-8: A &lt;code&gt;Point&amp;lt;T, U&amp;gt;&lt;/code&gt; generic over two types so that &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; can be values of different types</source>
          <target state="translated">清单10-8：两种类型的 &lt;code&gt;Point&amp;lt;T, U&amp;gt;&lt;/code&gt; 泛型，因此 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 可以是不同类型的值</target>
        </trans-unit>
        <trans-unit id="4a1c307d9f0bcac61ab42e1c9f84f9ed3a3202b8" translate="yes" xml:space="preserve">
          <source>Listing 10-9: Implementing a method named &lt;code&gt;x&lt;/code&gt; on the &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; struct that will return a reference to the &lt;code&gt;x&lt;/code&gt; field of type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">清单10-9：在 &lt;code&gt;Point&amp;lt;T&amp;gt;&lt;/code&gt; 结构上实现一个名为 &lt;code&gt;x&lt;/code&gt; 的方法，该方法将返回对 &lt;code&gt;T&lt;/code&gt; 类型的 &lt;code&gt;x&lt;/code&gt; 字段的引用</target>
        </trans-unit>
        <trans-unit id="b7dd9fb7fe8716f9d589702be6d64391b88eca59" translate="yes" xml:space="preserve">
          <source>Listing 11-10: Tests for a function that calls &lt;code&gt;println!&lt;/code&gt;</source>
          <target state="translated">清单11-10：测试调用 &lt;code&gt;println!&lt;/code&gt; 的函数</target>
        </trans-unit>
        <trans-unit id="663eca965c3ba885e4efda1cc01d265ba7ee909d" translate="yes" xml:space="preserve">
          <source>Listing 11-11: Three tests with three different names</source>
          <target state="translated">清单11-11:具有三个不同名称的三个测试。</target>
        </trans-unit>
        <trans-unit id="5efd2a052ff2542d536b8502f2b4980df1a6dce1" translate="yes" xml:space="preserve">
          <source>Listing 11-12: Testing a private function</source>
          <target state="translated">清单 11-12:测试一个私有函数</target>
        </trans-unit>
        <trans-unit id="48cb3400c4a8ad4b6166188f2fab6bc60bd6219b" translate="yes" xml:space="preserve">
          <source>Listing 11-13: An integration test of a function in the &lt;code&gt;adder&lt;/code&gt; crate</source>
          <target state="translated">清单11-13：在 &lt;code&gt;adder&lt;/code&gt; 包装箱中对函数的集成测试</target>
        </trans-unit>
        <trans-unit id="5c2257fe8ef1d882180458c1b0a1e7508b4520a8" translate="yes" xml:space="preserve">
          <source>Listing 11-1: The test module and function generated automatically by &lt;code&gt;cargo new&lt;/code&gt;</source>
          <target state="translated">代码清单11-1： &lt;code&gt;cargo new&lt;/code&gt; 自动生成的测试模块和函数</target>
        </trans-unit>
        <trans-unit id="0accc31dbd879e03e4b3df35e4dd459a3f9f0143" translate="yes" xml:space="preserve">
          <source>Listing 11-2: The output from running the automatically generated test</source>
          <target state="translated">清单11-2:运行自动生成的测试的输出。</target>
        </trans-unit>
        <trans-unit id="babcd8d1af7abd24adae555edfe6cd481e6cae56" translate="yes" xml:space="preserve">
          <source>Listing 11-3: Adding a second test that will fail because we call the &lt;code&gt;panic!&lt;/code&gt; macro</source>
          <target state="translated">清单11-3：添加第二个测试，该测试将失败，因为我们称之为 &lt;code&gt;panic!&lt;/code&gt; 巨集</target>
        </trans-unit>
        <trans-unit id="4cb738beadb392cdb38f964fe0049b8a6cd5aed2" translate="yes" xml:space="preserve">
          <source>Listing 11-4: Test results when one test passes and one test fails</source>
          <target state="translated">清单11-4。一项测试通过和一项测试失败时的测试结果。</target>
        </trans-unit>
        <trans-unit id="f608215f970b53734ae2ff526021fb4584f351c0" translate="yes" xml:space="preserve">
          <source>Listing 11-5: Using the &lt;code&gt;Rectangle&lt;/code&gt; struct and its &lt;code&gt;can_hold&lt;/code&gt; method from Chapter 5</source>
          <target state="translated">清单11-5：使用第5章中的 &lt;code&gt;Rectangle&lt;/code&gt; 结构及其 &lt;code&gt;can_hold&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="cbf4f2ecb4a4d91a58dc52248033e7b4438801c5" translate="yes" xml:space="preserve">
          <source>Listing 11-6: A test for &lt;code&gt;can_hold&lt;/code&gt; that checks whether a larger rectangle can indeed hold a smaller rectangle</source>
          <target state="translated">清单11-6：对 &lt;code&gt;can_hold&lt;/code&gt; 的测试，它检查较大的矩形是否确实可以容纳较小的矩形</target>
        </trans-unit>
        <trans-unit id="28966420c99003306fc854d334fa7af6144c41bc" translate="yes" xml:space="preserve">
          <source>Listing 11-7: Testing the function &lt;code&gt;add_two&lt;/code&gt; using the &lt;code&gt;assert_eq!&lt;/code&gt; macro</source>
          <target state="translated">测试功能：清单11-7 &lt;code&gt;add_two&lt;/code&gt; 使用 &lt;code&gt;assert_eq!&lt;/code&gt; 巨集</target>
        </trans-unit>
        <trans-unit id="e5898c0a82131240c22ccdbdf94ab76399fc2b4c" translate="yes" xml:space="preserve">
          <source>Listing 11-8 shows a test that checks that the error conditions of &lt;code&gt;Guess::new&lt;/code&gt; happen when we expect them to.</source>
          <target state="translated">清单11-8显示了一个测试，该测试检查 &lt;code&gt;Guess::new&lt;/code&gt; 的错误情况是否在我们期望发生时发生。</target>
        </trans-unit>
        <trans-unit id="cd5aa075b275eade7c7d7e99fea41082cd8af299" translate="yes" xml:space="preserve">
          <source>Listing 11-8: Testing that a condition will cause a &lt;code&gt;panic!&lt;/code&gt;</source>
          <target state="translated">清单11-8：测试条件是否会引起 &lt;code&gt;panic!&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4f460b91faeba4e72a7576be481019852c7d4fdb" translate="yes" xml:space="preserve">
          <source>Listing 11-9: Testing that a condition will cause a &lt;code&gt;panic!&lt;/code&gt; with a particular panic message</source>
          <target state="translated">清单11-9：测试条件是否会引起 &lt;code&gt;panic!&lt;/code&gt; 带有特定的恐慌讯息</target>
        </trans-unit>
        <trans-unit id="4f134241495345d158e8b7f88921150d7b3ca097" translate="yes" xml:space="preserve">
          <source>Listing 12-10: Exiting with an error code if creating a new &lt;code&gt;Config&lt;/code&gt; fails</source>
          <target state="translated">清单12-10：如果创建新的 &lt;code&gt;Config&lt;/code&gt; 失败，则退出并显示错误代码</target>
        </trans-unit>
        <trans-unit id="6100ad5acae99c7b724fe077757f25e7675de7e3" translate="yes" xml:space="preserve">
          <source>Listing 12-11 shows the extracted &lt;code&gt;run&lt;/code&gt; function. For now, we&amp;rsquo;re just making the small, incremental improvement of extracting the function. We&amp;rsquo;re still defining the function in &lt;em&gt;src/main.rs&lt;/em&gt;.</source>
          <target state="translated">清单12-11显示了提取的 &lt;code&gt;run&lt;/code&gt; 功能。目前，我们只是在提取函数方面进行了较小的增量改进。我们仍在&lt;em&gt;src / main.rs中&lt;/em&gt;定义函数。</target>
        </trans-unit>
        <trans-unit id="a0b9d339a7a3fad65f074e91633f3a486cf5d1dc" translate="yes" xml:space="preserve">
          <source>Listing 12-11: Extracting a &lt;code&gt;run&lt;/code&gt; function containing the rest of the program logic</source>
          <target state="translated">清单12-11：提取包含其余程序逻辑的 &lt;code&gt;run&lt;/code&gt; 函数</target>
        </trans-unit>
        <trans-unit id="071e594cc8170d80aa9bc71ff858621d1899a043" translate="yes" xml:space="preserve">
          <source>Listing 12-12: Changing the &lt;code&gt;run&lt;/code&gt; function to return &lt;code&gt;Result&lt;/code&gt;</source>
          <target state="translated">清单12-12：更改 &lt;code&gt;run&lt;/code&gt; 函数以返回 &lt;code&gt;Result&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d824d780291730903dc2319912f456db3829c564" translate="yes" xml:space="preserve">
          <source>Listing 12-13: Moving &lt;code&gt;Config&lt;/code&gt; and &lt;code&gt;run&lt;/code&gt; into &lt;em&gt;src/lib.rs&lt;/em&gt;</source>
          <target state="translated">清单12-13：移动 &lt;code&gt;Config&lt;/code&gt; 并 &lt;code&gt;run&lt;/code&gt; 到&lt;em&gt;src / lib.rs&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6fb1cb1b4e65216801e3218d95f344b132cc146a" translate="yes" xml:space="preserve">
          <source>Listing 12-14: Using the &lt;code&gt;minigrep&lt;/code&gt; library crate in &lt;em&gt;src/main.rs&lt;/em&gt;</source>
          <target state="translated">清单12-14：在&lt;em&gt;src / main.rs中&lt;/em&gt;使用 &lt;code&gt;minigrep&lt;/code&gt; 库箱&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ba33c7dbff2c2c8d4b81943f7e619dccb2b6031f" translate="yes" xml:space="preserve">
          <source>Listing 12-15: Creating a failing test for the &lt;code&gt;search&lt;/code&gt; function we wish we had</source>
          <target state="translated">清单12-15：为我们希望的 &lt;code&gt;search&lt;/code&gt; 功能创建失败的测试</target>
        </trans-unit>
        <trans-unit id="c0ea2c4739dd16d7a6fa7fcfdf260b295ac3decc" translate="yes" xml:space="preserve">
          <source>Listing 12-16: Defining just enough of the &lt;code&gt;search&lt;/code&gt; function so our test will compile</source>
          <target state="translated">清单12-16：定义了足够的 &lt;code&gt;search&lt;/code&gt; 功能，以便我们的测试可以编译</target>
        </trans-unit>
        <trans-unit id="32e6e3eee0c053057b6f77c7c5b9d802b4cc73c4" translate="yes" xml:space="preserve">
          <source>Listing 12-17: Iterating through each line in &lt;code&gt;contents&lt;/code&gt;</source>
          <target state="translated">清单12-17：遍历 &lt;code&gt;contents&lt;/code&gt; 每一行</target>
        </trans-unit>
        <trans-unit id="c02811c0f1c14decbed9426d6b0febf448d0ad63" translate="yes" xml:space="preserve">
          <source>Listing 12-18: Adding functionality to see whether the line contains the string in &lt;code&gt;query&lt;/code&gt;</source>
          <target state="translated">清单12-18：添加功能以查看该行是否包含 &lt;code&gt;query&lt;/code&gt; 中的字符串</target>
        </trans-unit>
        <trans-unit id="e8c0bf83172641bd14312b287174ce7c6681e599" translate="yes" xml:space="preserve">
          <source>Listing 12-19: Storing the lines that match so we can return them</source>
          <target state="translated">清单12-19:储存匹配的线路,以便我们可以返回它们</target>
        </trans-unit>
        <trans-unit id="1a59c8d9212a6f20636dbe6da9d958e26cc84022" translate="yes" xml:space="preserve">
          <source>Listing 12-1: Collecting the command line arguments into a vector and printing them</source>
          <target state="translated">清单12-1:将命令行参数收集成一个向量并打印出来</target>
        </trans-unit>
        <trans-unit id="f317c7f104c988109cb3c81369fd4b06d393e012" translate="yes" xml:space="preserve">
          <source>Listing 12-20: Adding a new failing test for the case-insensitive function we&amp;rsquo;re about to add</source>
          <target state="translated">清单12-20：为我们要添加的不区分大小写的函数添加了一个新的失败测试</target>
        </trans-unit>
        <trans-unit id="55f540c39355861fcbe6e846e58e7bf1c320bd0c" translate="yes" xml:space="preserve">
          <source>Listing 12-21: Defining the &lt;code&gt;search_case_insensitive&lt;/code&gt; function to lowercase the query and the line before comparing them</source>
          <target state="translated">清单12-21：定义 &lt;code&gt;search_case_insensitive&lt;/code&gt; 函数以在比较查询和行之前将其小写</target>
        </trans-unit>
        <trans-unit id="4e64dc195f705cb4fdb5732e62697fe0cab8f439" translate="yes" xml:space="preserve">
          <source>Listing 12-22: Calling either &lt;code&gt;search&lt;/code&gt; or &lt;code&gt;search_case_insensitive&lt;/code&gt; based on the value in &lt;code&gt;config.case_sensitive&lt;/code&gt;</source>
          <target state="translated">清单12-22：根据 &lt;code&gt;config.case_sensitive&lt;/code&gt; 中的值调用 &lt;code&gt;search&lt;/code&gt; 或 &lt;code&gt;search_case_insensitive&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aed5e25bcf29d25806081a3a082c45cb79431e31" translate="yes" xml:space="preserve">
          <source>Listing 12-23: Checking for an environment variable named &lt;code&gt;CASE_INSENSITIVE&lt;/code&gt;</source>
          <target state="translated">清单12-23：检查名为 &lt;code&gt;CASE_INSENSITIVE&lt;/code&gt; 的环境变量</target>
        </trans-unit>
        <trans-unit id="17975e81e1315570ab62387c45a7551d6be46ab4" translate="yes" xml:space="preserve">
          <source>Listing 12-24: Writing error messages to standard error instead of standard output using &lt;code&gt;eprintln!&lt;/code&gt;</source>
          <target state="translated">清单12-24：使用 &lt;code&gt;eprintln!&lt;/code&gt; 将错误消息写入标准错误而不是标准输出！</target>
        </trans-unit>
        <trans-unit id="2100519198b29bb694c8c3bf5e50660d96fba9c0" translate="yes" xml:space="preserve">
          <source>Listing 12-2: Creating variables to hold the query argument and filename argument</source>
          <target state="translated">清单12-2:创建变量来保存查询参数和文件名参数。</target>
        </trans-unit>
        <trans-unit id="65656de032616e9461082746ce3cf116869d59f3" translate="yes" xml:space="preserve">
          <source>Listing 12-3: A poem by Emily Dickinson makes a good test case</source>
          <target state="translated">清单12-3。艾米莉-狄金森的一首诗是一个很好的测试案例。</target>
        </trans-unit>
        <trans-unit id="2708e6a7de1a0c8cd2be27bbd3101e9316ac8cab" translate="yes" xml:space="preserve">
          <source>Listing 12-4: Reading the contents of the file specified by the second argument</source>
          <target state="translated">清单12-4.读取第二个参数所指定的文件内容。读取第二个参数指定的文件内容</target>
        </trans-unit>
        <trans-unit id="44ac99f1a4a9b342d4cebb2df5d3d20cf394f7e8" translate="yes" xml:space="preserve">
          <source>Listing 12-5: Extracting a &lt;code&gt;parse_config&lt;/code&gt; function from &lt;code&gt;main&lt;/code&gt;</source>
          <target state="translated">清单12-5：从 &lt;code&gt;main&lt;/code&gt; 中提取 &lt;code&gt;parse_config&lt;/code&gt; 函数</target>
        </trans-unit>
        <trans-unit id="f8216ac0279c2a1d8888d7f8093192a3d5c178c6" translate="yes" xml:space="preserve">
          <source>Listing 12-6 shows the improvements to the &lt;code&gt;parse_config&lt;/code&gt; function.</source>
          <target state="translated">清单12-6显示了 &lt;code&gt;parse_config&lt;/code&gt; 函数的改进。</target>
        </trans-unit>
        <trans-unit id="17631a08e95f9920334df800a9a0124d754e4805" translate="yes" xml:space="preserve">
          <source>Listing 12-6: Refactoring &lt;code&gt;parse_config&lt;/code&gt; to return an instance of a &lt;code&gt;Config&lt;/code&gt; struct</source>
          <target state="translated">清单12-6：重构 &lt;code&gt;parse_config&lt;/code&gt; 以返回 &lt;code&gt;Config&lt;/code&gt; 结构的实例</target>
        </trans-unit>
        <trans-unit id="7902640f876db106ab145779028aded337b2c352" translate="yes" xml:space="preserve">
          <source>Listing 12-7: Changing &lt;code&gt;parse_config&lt;/code&gt; into &lt;code&gt;Config::new&lt;/code&gt;</source>
          <target state="translated">代码清单12-7：将 &lt;code&gt;parse_config&lt;/code&gt; 更改为 &lt;code&gt;Config::new&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b72df7dc9d2d8227aea5105dc4b73b3170cf864" translate="yes" xml:space="preserve">
          <source>Listing 12-8: Adding a check for the number of arguments</source>
          <target state="translated">清单12-8:添加对参数数量的检查。</target>
        </trans-unit>
        <trans-unit id="debaf0a840041a5dc0446ff5c7d52150222ea8f8" translate="yes" xml:space="preserve">
          <source>Listing 12-9 shows the changes we need to make to the return value of &lt;code&gt;Config::new&lt;/code&gt; and the body of the function needed to return a &lt;code&gt;Result&lt;/code&gt;. Note that this won&amp;rsquo;t compile until we update &lt;code&gt;main&lt;/code&gt; as well, which we&amp;rsquo;ll do in the next listing.</source>
          <target state="translated">清单12-9显示了我们需要对 &lt;code&gt;Config::new&lt;/code&gt; 的返回值进行的更改以及返回 &lt;code&gt;Result&lt;/code&gt; 所需的函数主体。请注意，除非我们也更新 &lt;code&gt;main&lt;/code&gt; ，否则它将不会编译，我们将在下一个清单中进行更新。</target>
        </trans-unit>
        <trans-unit id="56f489680a7fc898fdbd78a5b08e9663a6a39260" translate="yes" xml:space="preserve">
          <source>Listing 12-9: Returning a &lt;code&gt;Result&lt;/code&gt; from &lt;code&gt;Config::new&lt;/code&gt;</source>
          <target state="translated">清单12-9：从 &lt;code&gt;Config::new&lt;/code&gt; 返回 &lt;code&gt;Result&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2387a086e5c0e15c533fcf1cd082be6cbf9aa789" translate="yes" xml:space="preserve">
          <source>Listing 13-10: The caching logic of &lt;code&gt;Cacher&lt;/code&gt;</source>
          <target state="translated">清单13-10： &lt;code&gt;Cacher&lt;/code&gt; 的缓存逻辑</target>
        </trans-unit>
        <trans-unit id="c0d5d1186250f866b96050820ef8cebe60ec2357" translate="yes" xml:space="preserve">
          <source>Listing 13-11 shows how we can use this &lt;code&gt;Cacher&lt;/code&gt; struct in the function &lt;code&gt;generate_workout&lt;/code&gt; from Listing 13-6.</source>
          <target state="translated">清单13-11显示了如何在清单13-6 中的 &lt;code&gt;generate_workout&lt;/code&gt; 函数中使用此 &lt;code&gt;Cacher&lt;/code&gt; 结构。</target>
        </trans-unit>
        <trans-unit id="f28a86f3bf9c417b2c6867c9b6d5d47f75ce8201" translate="yes" xml:space="preserve">
          <source>Listing 13-11: Using &lt;code&gt;Cacher&lt;/code&gt; in the &lt;code&gt;generate_workout&lt;/code&gt; function to abstract away the caching logic</source>
          <target state="translated">清单13-11：在 &lt;code&gt;generate_workout&lt;/code&gt; 函数中使用 &lt;code&gt;Cacher&lt;/code&gt; 来抽象出缓存逻辑</target>
        </trans-unit>
        <trans-unit id="2faa47ae3b7b90c66c9482115f3da7f41aa52274" translate="yes" xml:space="preserve">
          <source>Listing 13-12 has an example of a closure stored in the &lt;code&gt;equal_to_x&lt;/code&gt; variable that uses the &lt;code&gt;x&lt;/code&gt; variable from the closure&amp;rsquo;s surrounding environment.</source>
          <target state="translated">清单13-12提供了一个存储在 &lt;code&gt;equal_to_x&lt;/code&gt; 变量中的闭包示例，该闭包使用闭包周围环境中的 &lt;code&gt;x&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="4b1488c608b861242d66483cb6d6cc0f1e815ff9" translate="yes" xml:space="preserve">
          <source>Listing 13-12: Example of a closure that refers to a variable in its enclosing scope</source>
          <target state="translated">清单13-12:在其外层作用域中引用变量的闭包示例。</target>
        </trans-unit>
        <trans-unit id="da63b2d988a14d06ef71cb8b080de74948afbde8" translate="yes" xml:space="preserve">
          <source>Listing 13-13: Creating an iterator</source>
          <target state="translated">清单13-13:创建迭代器</target>
        </trans-unit>
        <trans-unit id="b86de7f7c1fa8c222e474e9c97fe8e6310b36b9f" translate="yes" xml:space="preserve">
          <source>Listing 13-14: Using an iterator in a &lt;code&gt;for&lt;/code&gt; loop</source>
          <target state="translated">清单13-14：在 &lt;code&gt;for&lt;/code&gt; 循环中使用迭代器</target>
        </trans-unit>
        <trans-unit id="c79b5eddb38c77dbd707c89f54888b0bdeada307" translate="yes" xml:space="preserve">
          <source>Listing 13-15: Calling the &lt;code&gt;next&lt;/code&gt; method on an iterator</source>
          <target state="translated">清单13-15：在迭代器上调用 &lt;code&gt;next&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="125af72ce93e94ec340894f82d46ac99edb00c53" translate="yes" xml:space="preserve">
          <source>Listing 13-16: Calling the &lt;code&gt;sum&lt;/code&gt; method to get the total of all items in the iterator</source>
          <target state="translated">清单13-16：调用 &lt;code&gt;sum&lt;/code&gt; 方法以获取迭代器中所有项目的总数</target>
        </trans-unit>
        <trans-unit id="16d39d11b76de673f004e0cb84eeebbc76c1a985" translate="yes" xml:space="preserve">
          <source>Listing 13-17 shows an example of calling the iterator adaptor method &lt;code&gt;map&lt;/code&gt;, which takes a closure to call on each item to produce a new iterator. The closure here creates a new iterator in which each item from the vector has been incremented by 1. However, this code produces a warning:</source>
          <target state="translated">清单13-17显示了调用迭代器适配器方法 &lt;code&gt;map&lt;/code&gt; 的示例，该方法采用闭包形式对每个项目进行调用以生成新的迭代器。这里的闭包创建了一个新的迭代器，其中向量中的每一项都增加了1。但是，此代码会产生警告：</target>
        </trans-unit>
        <trans-unit id="74e4c24dcd4bb7010313a46b632eb7e3e0bcbf8a" translate="yes" xml:space="preserve">
          <source>Listing 13-17: Calling the iterator adaptor &lt;code&gt;map&lt;/code&gt; to create a new iterator</source>
          <target state="translated">清单13-17：调用迭代器适配器 &lt;code&gt;map&lt;/code&gt; 以创建新的迭代器</target>
        </trans-unit>
        <trans-unit id="2be4e84f69b4adab1b4d170f1e30558330571e73" translate="yes" xml:space="preserve">
          <source>Listing 13-18: Calling the &lt;code&gt;map&lt;/code&gt; method to create a new iterator and then calling the &lt;code&gt;collect&lt;/code&gt; method to consume the new iterator and create a vector</source>
          <target state="translated">清单13-18：调用 &lt;code&gt;map&lt;/code&gt; 方法创建一个新的迭代器，然后调用 &lt;code&gt;collect&lt;/code&gt; 方法使用新的迭代器并创建一个向量</target>
        </trans-unit>
        <trans-unit id="ba7997d2aa4a1fe2c0cb954b987afd20498ab3c9" translate="yes" xml:space="preserve">
          <source>Listing 13-19: Using the &lt;code&gt;filter&lt;/code&gt; method with a closure that captures &lt;code&gt;shoe_size&lt;/code&gt;</source>
          <target state="translated">清单13-19：将 &lt;code&gt;filter&lt;/code&gt; 方法与捕获 &lt;code&gt;shoe_size&lt;/code&gt; 的闭包一起使用</target>
        </trans-unit>
        <trans-unit id="dd6d62e95821a0b66750c36c66b400adfb911df1" translate="yes" xml:space="preserve">
          <source>Listing 13-1: A function to stand in for a hypothetical calculation that takes about 2 seconds to run</source>
          <target state="translated">清单13-1:一个函数来代替一个需要大约2秒运行的假设计算。</target>
        </trans-unit>
        <trans-unit id="7fb1602dc439c9b7bbc58a83ab300ac5d803f979" translate="yes" xml:space="preserve">
          <source>Listing 13-20 has the definition of the &lt;code&gt;Counter&lt;/code&gt; struct and an associated &lt;code&gt;new&lt;/code&gt; function to create instances of &lt;code&gt;Counter&lt;/code&gt;:</source>
          <target state="translated">清单13-20给出了 &lt;code&gt;Counter&lt;/code&gt; 结构的定义以及一个用于创建 &lt;code&gt;Counter&lt;/code&gt; 实例的相关 &lt;code&gt;new&lt;/code&gt; 函数：</target>
        </trans-unit>
        <trans-unit id="8181813f6c8a4c159df9ec9e8f1a995891d7d2ee" translate="yes" xml:space="preserve">
          <source>Listing 13-20: Defining the &lt;code&gt;Counter&lt;/code&gt; struct and a &lt;code&gt;new&lt;/code&gt; function that creates instances of &lt;code&gt;Counter&lt;/code&gt; with an initial value of 0 for &lt;code&gt;count&lt;/code&gt;</source>
          <target state="translated">清单13-20：定义 &lt;code&gt;Counter&lt;/code&gt; 结构和 &lt;code&gt;new&lt;/code&gt; 创建的实例功能 &lt;code&gt;Counter&lt;/code&gt; 以0初始值 &lt;code&gt;count&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6233753eb41dfa24a3ddaa88cba60601ad3de5a5" translate="yes" xml:space="preserve">
          <source>Listing 13-21: Implementing the &lt;code&gt;Iterator&lt;/code&gt; trait on our &lt;code&gt;Counter&lt;/code&gt; struct</source>
          <target state="translated">清单13-21：在我们的 &lt;code&gt;Counter&lt;/code&gt; 结构上实现 &lt;code&gt;Iterator&lt;/code&gt; 特性</target>
        </trans-unit>
        <trans-unit id="2b2a8e3fb2d3e085dd30354800fa389304957721" translate="yes" xml:space="preserve">
          <source>Listing 13-22: Testing the functionality of the &lt;code&gt;next&lt;/code&gt; method implementation</source>
          <target state="translated">清单13-22：测试 &lt;code&gt;next&lt;/code&gt; 方法实现的功能</target>
        </trans-unit>
        <trans-unit id="da3fc01280d52625be3ca08e26ae2fa24dfde1fe" translate="yes" xml:space="preserve">
          <source>Listing 13-23: Using a variety of &lt;code&gt;Iterator&lt;/code&gt; trait methods on our &lt;code&gt;Counter&lt;/code&gt; iterator</source>
          <target state="translated">清单13-23：在我们的 &lt;code&gt;Counter&lt;/code&gt; 迭代器上使用各种 &lt;code&gt;Iterator&lt;/code&gt; trait方法</target>
        </trans-unit>
        <trans-unit id="5e663b49266d8969f34b8c945a8b5c23f1c23005" translate="yes" xml:space="preserve">
          <source>Listing 13-24: Reproduction of the &lt;code&gt;Config::new&lt;/code&gt; function from Listing 12-23</source>
          <target state="translated">清单13-24：复制清单12-23 中的 &lt;code&gt;Config::new&lt;/code&gt; 函数</target>
        </trans-unit>
        <trans-unit id="d1c0cbe18c08917bd508572befe258731e8d0c73" translate="yes" xml:space="preserve">
          <source>Listing 13-25: Passing the return value of &lt;code&gt;env::args&lt;/code&gt; to &lt;code&gt;Config::new&lt;/code&gt;</source>
          <target state="translated">清单13-25：将 &lt;code&gt;env::args&lt;/code&gt; 的返回值传递给 &lt;code&gt;Config::new&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c3f8ec648e823023a760a73b1ae768971e60ce99" translate="yes" xml:space="preserve">
          <source>Listing 13-26: Updating the signature of &lt;code&gt;Config::new&lt;/code&gt; to expect an iterator</source>
          <target state="translated">清单13-26：更新 &lt;code&gt;Config::new&lt;/code&gt; 的签名以期望有一个迭代器</target>
        </trans-unit>
        <trans-unit id="479c71589c0890fd86b9106201066824aafbb7e8" translate="yes" xml:space="preserve">
          <source>Listing 13-27: Changing the body of &lt;code&gt;Config::new&lt;/code&gt; to use iterator methods</source>
          <target state="translated">清单13-27：更改 &lt;code&gt;Config::new&lt;/code&gt; 的主体以使用迭代器方法</target>
        </trans-unit>
        <trans-unit id="5f663f3002d51332d0f316ca52efc1a5298e65ad" translate="yes" xml:space="preserve">
          <source>Listing 13-28: The implementation of the &lt;code&gt;search&lt;/code&gt; function from Listing 12-19</source>
          <target state="translated">清单13-28：清单12-19中 &lt;code&gt;search&lt;/code&gt; 功能的实现</target>
        </trans-unit>
        <trans-unit id="00809d8c531a58edc4a71d30c95dce8274ef6558" translate="yes" xml:space="preserve">
          <source>Listing 13-29: Using iterator adaptor methods in the implementation of the &lt;code&gt;search&lt;/code&gt; function</source>
          <target state="translated">清单13-29：在 &lt;code&gt;search&lt;/code&gt; 功能的实现中使用迭代器适配器方法</target>
        </trans-unit>
        <trans-unit id="8eec05356035a6ca1daa8a69ca4ecc3b566296ba" translate="yes" xml:space="preserve">
          <source>Listing 13-2: A &lt;code&gt;main&lt;/code&gt; function with hardcoded values to simulate user input and random number generation</source>
          <target state="translated">清单13-2：具有硬编码值的 &lt;code&gt;main&lt;/code&gt; 函数，用于模拟用户输入和随机数生成</target>
        </trans-unit>
        <trans-unit id="f83b6300bc14114e05e03cb1f9f9626d016c53af" translate="yes" xml:space="preserve">
          <source>Listing 13-3: The business logic that prints the workout plans based on the inputs and calls to the &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; function</source>
          <target state="translated">清单13-3：根据输入和对 &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; 函数的调用来打印锻炼计划的业务逻辑</target>
        </trans-unit>
        <trans-unit id="2edbf03045ec8c5f834002ca00be94b30e0aa87a" translate="yes" xml:space="preserve">
          <source>Listing 13-4: Extracting the calls to &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; to one place and storing the result in the &lt;code&gt;expensive_result&lt;/code&gt; variable</source>
          <target state="translated">清单13-4：将对 &lt;code&gt;simulated_expensive_calculation&lt;/code&gt; 的调用提取到一个位置，并将结果存储在 &lt;code&gt;expensive_result&lt;/code&gt; 变量中</target>
        </trans-unit>
        <trans-unit id="a86253d9b369eae803d9058251bc99d23da0889b" translate="yes" xml:space="preserve">
          <source>Listing 13-5: Defining a closure and storing it in the &lt;code&gt;expensive_closure&lt;/code&gt; variable</source>
          <target state="translated">清单13-5：定义一个闭包并将其存储在 &lt;code&gt;expensive_closure&lt;/code&gt; 变量中</target>
        </trans-unit>
        <trans-unit id="d8c320c43d8902d778cae87e5afeb403eb8a266d" translate="yes" xml:space="preserve">
          <source>Listing 13-6: Calling the &lt;code&gt;expensive_closure&lt;/code&gt; we&amp;rsquo;ve defined</source>
          <target state="translated">清单13-6：调用 &lt;code&gt;expensive_closure&lt;/code&gt; 我们定义</target>
        </trans-unit>
        <trans-unit id="21017b48d3e58c3173aef6dbf1c0a3327de3b5dc" translate="yes" xml:space="preserve">
          <source>Listing 13-7: Adding optional type annotations of the parameter and return value types in the closure</source>
          <target state="translated">清单13-7:在闭包中添加参数和返回值类型的可选类型注释。</target>
        </trans-unit>
        <trans-unit id="1d8fb36f3f80735be807df8d78ab69e660e1c09c" translate="yes" xml:space="preserve">
          <source>Listing 13-8: Attempting to call a closure whose types are inferred with two different types</source>
          <target state="translated">清单13-8:尝试调用一个类型是由两种不同类型推断出来的闭包。</target>
        </trans-unit>
        <trans-unit id="02ff816302e38ee65fb0d068c9401b4880f61139" translate="yes" xml:space="preserve">
          <source>Listing 13-9 shows the definition of the &lt;code&gt;Cacher&lt;/code&gt; struct that holds a closure and an optional result value.</source>
          <target state="translated">清单13-9显示了 &lt;code&gt;Cacher&lt;/code&gt; 结构的定义，该结构包含一个闭包和一个可选的结果值。</target>
        </trans-unit>
        <trans-unit id="48023ada352043377af19dc5e8d175de8b277881" translate="yes" xml:space="preserve">
          <source>Listing 13-9: Defining a &lt;code&gt;Cacher&lt;/code&gt; struct that holds a closure in &lt;code&gt;calculation&lt;/code&gt; and an optional result in &lt;code&gt;value&lt;/code&gt;</source>
          <target state="translated">清单13-9：定义一个 &lt;code&gt;Cacher&lt;/code&gt; 结构，该结构在 &lt;code&gt;calculation&lt;/code&gt; 中包含一个闭合值，在 &lt;code&gt;value&lt;/code&gt; 包含一个可选结果</target>
        </trans-unit>
        <trans-unit id="b3710bfc4e4b00a06976126eb583e8b02c16a616" translate="yes" xml:space="preserve">
          <source>Listing 14-1: A documentation comment for a function</source>
          <target state="translated">清单14-1:函数的文档注释</target>
        </trans-unit>
        <trans-unit id="5c31ed7521a1ab0cc7ad26027c51931cae668d2d" translate="yes" xml:space="preserve">
          <source>Listing 14-2: Documentation for the &lt;code&gt;my_crate&lt;/code&gt; crate as a whole</source>
          <target state="translated">清单14-2：整个 &lt;code&gt;my_crate&lt;/code&gt; 箱子的文档</target>
        </trans-unit>
        <trans-unit id="08cd4d7276034ce4fb54ef404f77f04a4bf925e3" translate="yes" xml:space="preserve">
          <source>Listing 14-3: An &lt;code&gt;art&lt;/code&gt; library with items organized into &lt;code&gt;kinds&lt;/code&gt; and &lt;code&gt;utils&lt;/code&gt; modules</source>
          <target state="translated">代码清单14-3：一个 &lt;code&gt;art&lt;/code&gt; 库，其中的项目按 &lt;code&gt;kinds&lt;/code&gt; 和 &lt;code&gt;utils&lt;/code&gt; 模块进行组织</target>
        </trans-unit>
        <trans-unit id="18652571126ad8386cecac32ff97a3b38f9bc500" translate="yes" xml:space="preserve">
          <source>Listing 14-4: A crate using the &lt;code&gt;art&lt;/code&gt; crate&amp;rsquo;s items with its internal structure exported</source>
          <target state="translated">清单14-4：一个使用 &lt;code&gt;art&lt;/code&gt; 箱中的物品及其内部结构导出的箱子</target>
        </trans-unit>
        <trans-unit id="6a570b6b6186a46bce3ac4aacbabe088d013d0f3" translate="yes" xml:space="preserve">
          <source>Listing 14-5: Adding &lt;code&gt;pub use&lt;/code&gt; statements to re-export items</source>
          <target state="translated">清单14-5：添加 &lt;code&gt;pub use&lt;/code&gt; 语句以重新导出项目</target>
        </trans-unit>
        <trans-unit id="d6312f93c5be154192161b883eed38925109f013" translate="yes" xml:space="preserve">
          <source>Listing 14-6: A program using the re-exported items from the &lt;code&gt;art&lt;/code&gt; crate</source>
          <target state="translated">清单14-6：一个程序使用 &lt;code&gt;art&lt;/code&gt; 包装箱中的重新导出的物品</target>
        </trans-unit>
        <trans-unit id="0fb0cc53aeca164991b29eb0d8ab6b1af71d3326" translate="yes" xml:space="preserve">
          <source>Listing 14-7: Using the &lt;code&gt;add-one&lt;/code&gt; library crate from the &lt;code&gt;adder&lt;/code&gt; crate</source>
          <target state="translated">清单14-7：使用 &lt;code&gt;adder&lt;/code&gt; 板条箱中的 &lt;code&gt;add-one&lt;/code&gt; 库板条箱</target>
        </trans-unit>
        <trans-unit id="d17fa866aef39e9d7d0c17f7358038f314c318c1" translate="yes" xml:space="preserve">
          <source>Listing 15-1 shows how to use a box to store an &lt;code&gt;i32&lt;/code&gt; value on the heap:</source>
          <target state="translated">清单15-1显示了如何使用一个盒子在堆上存储 &lt;code&gt;i32&lt;/code&gt; 值：</target>
        </trans-unit>
        <trans-unit id="0d4242924fb6c785f162a09bc5d2fe1ca847e116" translate="yes" xml:space="preserve">
          <source>Listing 15-10: Implementing &lt;code&gt;Deref&lt;/code&gt; on &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">清单15-10：在 &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; 上实现 &lt;code&gt;Deref&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a37d11ccc3798c8adeb9d5bd2484dc552c633d9" translate="yes" xml:space="preserve">
          <source>Listing 15-11: A &lt;code&gt;hello&lt;/code&gt; function that has the parameter &lt;code&gt;name&lt;/code&gt; of type &lt;code&gt;&amp;amp;str&lt;/code&gt;</source>
          <target state="translated">清单15-11：一个 &lt;code&gt;hello&lt;/code&gt; 函数，其参数 &lt;code&gt;name&lt;/code&gt; 为 &lt;code&gt;&amp;amp;str&lt;/code&gt; 类型</target>
        </trans-unit>
        <trans-unit id="5568aa245c3ca44a1e76ee65f95d3578696c3468" translate="yes" xml:space="preserve">
          <source>Listing 15-12: Calling &lt;code&gt;hello&lt;/code&gt; with a reference to a &lt;code&gt;MyBox&amp;lt;String&amp;gt;&lt;/code&gt; value, which works because of deref coercion</source>
          <target state="translated">清单15-12：调用带有 &lt;code&gt;MyBox&amp;lt;String&amp;gt;&lt;/code&gt; 值的引用的 &lt;code&gt;hello&lt;/code&gt; ，由于deref强制，该值起作用</target>
        </trans-unit>
        <trans-unit id="6c024965fb7532f846db55d2fce103e6ef71bc94" translate="yes" xml:space="preserve">
          <source>Listing 15-13: The code we would have to write if Rust didn&amp;rsquo;t have deref coercion</source>
          <target state="translated">清单15-13：如果Rust没有deref强制，我们将必须编写的代码</target>
        </trans-unit>
        <trans-unit id="adff6d0cc3f4fa1a4ed3e66ddcf814db60a02d4f" translate="yes" xml:space="preserve">
          <source>Listing 15-14 shows a &lt;code&gt;CustomSmartPointer&lt;/code&gt; struct whose only custom functionality is that it will print &lt;code&gt;Dropping CustomSmartPointer!&lt;/code&gt; when the instance goes out of scope. This example demonstrates when Rust runs the &lt;code&gt;drop&lt;/code&gt; function.</source>
          <target state="translated">清单15-14显示了一个 &lt;code&gt;CustomSmartPointer&lt;/code&gt; 结构，其唯一的自定义功能是它将打印出 &lt;code&gt;Dropping CustomSmartPointer!&lt;/code&gt; 当实例超出范围时。此示例演示Rust运行何时 &lt;code&gt;drop&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="52d47c448cdc64e5a91e1c4aca16ea47ef0beae3" translate="yes" xml:space="preserve">
          <source>Listing 15-14: A &lt;code&gt;CustomSmartPointer&lt;/code&gt; struct that implements the &lt;code&gt;Drop&lt;/code&gt; trait where we would put our cleanup code</source>
          <target state="translated">清单15-14：一个实现了 &lt;code&gt;Drop&lt;/code&gt; 特性的 &lt;code&gt;CustomSmartPointer&lt;/code&gt; 结构，该特性将我们放置清理代码的位置</target>
        </trans-unit>
        <trans-unit id="ec4aa44fb09e06c7ceb13b695dde967f5f1ef075" translate="yes" xml:space="preserve">
          <source>Listing 15-15: Attempting to call the &lt;code&gt;drop&lt;/code&gt; method from the &lt;code&gt;Drop&lt;/code&gt; trait manually to clean up early</source>
          <target state="translated">清单15-15：尝试从 &lt;code&gt;Drop&lt;/code&gt; trait手动调用 &lt;code&gt;drop&lt;/code&gt; 方法来提早清理</target>
        </trans-unit>
        <trans-unit id="2f40ac96f3ccd291a6c6fe1c9540aec6b3f9c290" translate="yes" xml:space="preserve">
          <source>Listing 15-16: Calling &lt;code&gt;std::mem::drop&lt;/code&gt; to explicitly drop a value before it goes out of scope</source>
          <target state="translated">清单15-16：调用 &lt;code&gt;std::mem::drop&lt;/code&gt; 可以在超出范围之前显式删除值</target>
        </trans-unit>
        <trans-unit id="5329453e171ad9ee51b2ac0e7343fd6536e1d7d4" translate="yes" xml:space="preserve">
          <source>Listing 15-17: Demonstrating we&amp;rsquo;re not allowed to have two lists using &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; that try to share ownership of a third list</source>
          <target state="translated">清单15-17：演示我们不允许使用 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 拥有两个试图共享第三个列表的所有权的列表</target>
        </trans-unit>
        <trans-unit id="c433ad64df45e2defd53333d59e3199258515577" translate="yes" xml:space="preserve">
          <source>Listing 15-18: A definition of &lt;code&gt;List&lt;/code&gt; that uses &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">清单15-18：使用 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 的 &lt;code&gt;List&lt;/code&gt; 的定义</target>
        </trans-unit>
        <trans-unit id="d261e75633f42f6dc65090559e1101742762de87" translate="yes" xml:space="preserve">
          <source>Listing 15-19: Printing the reference count</source>
          <target state="translated">清单 15-19:打印参考数</target>
        </trans-unit>
        <trans-unit id="93277309dd71d80340ae8cdbc4d8dcde0239642c" translate="yes" xml:space="preserve">
          <source>Listing 15-1: Storing an &lt;code&gt;i32&lt;/code&gt; value on the heap using a box</source>
          <target state="translated">清单15-1：使用一个盒子在堆上存储一个 &lt;code&gt;i32&lt;/code&gt; 值</target>
        </trans-unit>
        <trans-unit id="97eb3e5299e49169210e147956f4d2e6505373a4" translate="yes" xml:space="preserve">
          <source>Listing 15-2 contains an enum definition for a cons list. Note that this code won&amp;rsquo;t compile yet because the &lt;code&gt;List&lt;/code&gt; type doesn&amp;rsquo;t have a known size, which we&amp;rsquo;ll demonstrate.</source>
          <target state="translated">清单15-2包含一个cons列表的枚举定义。请注意，由于 &lt;code&gt;List&lt;/code&gt; 类型的大小未知，因此该代码尚未编译，我们将对其进行演示。</target>
        </trans-unit>
        <trans-unit id="eb67b3e6a05499f9fa0c058da14b25fa79ce9ca2" translate="yes" xml:space="preserve">
          <source>Listing 15-20: A library to keep track of how close a value is to a maximum value and warn when the value is at certain levels</source>
          <target state="translated">清单15-20。一个库,用来跟踪一个值与最大值的接近程度,并在该值达到一定水平时发出警告。</target>
        </trans-unit>
        <trans-unit id="141fe822d1303f26d8ebe1f7c46b8da90b350088" translate="yes" xml:space="preserve">
          <source>Listing 15-21: An attempt to implement a &lt;code&gt;MockMessenger&lt;/code&gt; that isn&amp;rsquo;t allowed by the borrow checker</source>
          <target state="translated">代码清单15-21：尝试实现借阅检查器不允许的 &lt;code&gt;MockMessenger&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dfe14058820e9ed9b4226d26f07c498f5696cf00" translate="yes" xml:space="preserve">
          <source>Listing 15-22: Using &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; to mutate an inner value while the outer value is considered immutable</source>
          <target state="translated">清单15-22：使用 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 改变内部值，而外部值被认为是不可变的</target>
        </trans-unit>
        <trans-unit id="266fca035b941bba83ca32885d5d4117eab995c6" translate="yes" xml:space="preserve">
          <source>Listing 15-23: Creating two mutable references in the same scope to see that &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; will panic</source>
          <target state="translated">清单15-23：在同一作用域中创建两个可变引用，以查看 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 会死机</target>
        </trans-unit>
        <trans-unit id="d6cf153a700dd2365ffdecaf10f183c9db90ffbd" translate="yes" xml:space="preserve">
          <source>Listing 15-24: Using &lt;code&gt;Rc&amp;lt;RefCell&amp;lt;i32&amp;gt;&amp;gt;&lt;/code&gt; to create a &lt;code&gt;List&lt;/code&gt; that we can mutate</source>
          <target state="translated">清单15-24：使用 &lt;code&gt;Rc&amp;lt;RefCell&amp;lt;i32&amp;gt;&amp;gt;&lt;/code&gt; 创建一个我们可以变异的 &lt;code&gt;List&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6af6872cc0a942bf5139e47e216845b27497ede4" translate="yes" xml:space="preserve">
          <source>Listing 15-25: A cons list definition that holds a &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; so we can modify what a &lt;code&gt;Cons&lt;/code&gt; variant is referring to</source>
          <target state="translated">清单15-25：一个包含 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; cons列表定义，因此我们可以修改 &lt;code&gt;Cons&lt;/code&gt; 变量所指的内容</target>
        </trans-unit>
        <trans-unit id="3a094be147b7c64eca30f8e42d1612142f388e50" translate="yes" xml:space="preserve">
          <source>Listing 15-26: Creating a reference cycle of two &lt;code&gt;List&lt;/code&gt; values pointing to each other</source>
          <target state="translated">清单15-26：创建两个互相指向的 &lt;code&gt;List&lt;/code&gt; 值的参考循环</target>
        </trans-unit>
        <trans-unit id="2b292b9e3cc1d351a84971007501fea9cfdf3e8b" translate="yes" xml:space="preserve">
          <source>Listing 15-27: Creating a &lt;code&gt;leaf&lt;/code&gt; node with no children and a &lt;code&gt;branch&lt;/code&gt; node with &lt;code&gt;leaf&lt;/code&gt; as one of its children</source>
          <target state="translated">清单15-27：创建一个没有子节点的 &lt;code&gt;leaf&lt;/code&gt; 节点和一个以 &lt;code&gt;leaf&lt;/code&gt; 作为其子节点之一的 &lt;code&gt;branch&lt;/code&gt; 节点</target>
        </trans-unit>
        <trans-unit id="4850f36c959e35928aff734682b70b668ef71d6d" translate="yes" xml:space="preserve">
          <source>Listing 15-28: A &lt;code&gt;leaf&lt;/code&gt; node with a weak reference to its parent node &lt;code&gt;branch&lt;/code&gt;</source>
          <target state="translated">清单15-28：对父节点 &lt;code&gt;branch&lt;/code&gt; 具有弱引用的 &lt;code&gt;leaf&lt;/code&gt; 节点</target>
        </trans-unit>
        <trans-unit id="25aad53c5c945f94794c65dc3226cacbda5a3baf" translate="yes" xml:space="preserve">
          <source>Listing 15-29: Creating &lt;code&gt;branch&lt;/code&gt; in an inner scope and examining strong and weak reference counts</source>
          <target state="translated">清单15-29：在内部范围内创建 &lt;code&gt;branch&lt;/code&gt; 并检查强引用计数和弱引用计数</target>
        </trans-unit>
        <trans-unit id="c6497eba51055bb620a815c36e345353e4a2ed22" translate="yes" xml:space="preserve">
          <source>Listing 15-2: The first attempt at defining an enum to represent a cons list data structure of &lt;code&gt;i32&lt;/code&gt; values</source>
          <target state="translated">清单15-2：第一次尝试定义一个代表 &lt;code&gt;i32&lt;/code&gt; 值的cons列表数据结构的枚举</target>
        </trans-unit>
        <trans-unit id="18a28eccb4368989461114ac735559ffeda1ae5d" translate="yes" xml:space="preserve">
          <source>Listing 15-3: Using the &lt;code&gt;List&lt;/code&gt; enum to store the list &lt;code&gt;1, 2, 3&lt;/code&gt;</source>
          <target state="translated">清单15-3：使用 &lt;code&gt;List&lt;/code&gt; 枚举存储列表 &lt;code&gt;1, 2, 3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a8c9e2eacb25fd51c5f9aa6cab37ed11e4904210" translate="yes" xml:space="preserve">
          <source>Listing 15-4: The error we get when attempting to define a recursive enum</source>
          <target state="translated">清单15-4:当我们试图定义一个递归枚举时得到的错误信息</target>
        </trans-unit>
        <trans-unit id="9b95eec03025f86a4b7c65652e8650c21c75dcf1" translate="yes" xml:space="preserve">
          <source>Listing 15-5: Definition of &lt;code&gt;List&lt;/code&gt; that uses &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; in order to have a known size</source>
          <target state="translated">清单15-5：使用 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 以便具有已知大小的 &lt;code&gt;List&lt;/code&gt; 的定义</target>
        </trans-unit>
        <trans-unit id="db518804f21a5ed0346fef393226cf0ad66acbbb" translate="yes" xml:space="preserve">
          <source>Listing 15-6: Using the dereference operator to follow a reference to an &lt;code&gt;i32&lt;/code&gt; value</source>
          <target state="translated">清单15-6：使用解引用运算符跟随对 &lt;code&gt;i32&lt;/code&gt; 值的引用</target>
        </trans-unit>
        <trans-unit id="8c02623422daee0586c70cf6a359e0861d9f1b06" translate="yes" xml:space="preserve">
          <source>Listing 15-7: Using the dereference operator on a &lt;code&gt;Box&amp;lt;i32&amp;gt;&lt;/code&gt;</source>
          <target state="translated">清单15-7：在 &lt;code&gt;Box&amp;lt;i32&amp;gt;&lt;/code&gt; 上使用解引用运算符</target>
        </trans-unit>
        <trans-unit id="fa36d540c04da6649b5d6b1c22bcef700a30ebdf" translate="yes" xml:space="preserve">
          <source>Listing 15-8: Defining a &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; type</source>
          <target state="translated">清单15-8：定义 &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; 类型</target>
        </trans-unit>
        <trans-unit id="d36831d626698b1a2a5afad342468e8d5abc296e" translate="yes" xml:space="preserve">
          <source>Listing 15-9: Attempting to use &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; in the same way we used references and &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">清单15-9：尝试以与使用引用和 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 相同的方式使用 &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; &amp;lt;T&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d143c5026e771bdcccc60743806891ca08f66e55" translate="yes" xml:space="preserve">
          <source>Listing 16-10: Sending multiple messages and pausing between each</source>
          <target state="translated">清单 16-10:发送多条信息并在每条信息之间暂停</target>
        </trans-unit>
        <trans-unit id="3eef54e3734b51cf6e6ecfea094438d79e4e019b" translate="yes" xml:space="preserve">
          <source>Listing 16-11: Sending multiple messages from multiple producers</source>
          <target state="translated">清单16-11:从多个生产者发送多条信息。</target>
        </trans-unit>
        <trans-unit id="19b196c633c201dfd93feaef8a0419886e1e93ac" translate="yes" xml:space="preserve">
          <source>Listing 16-12: Exploring the API of &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; in a single-threaded context for simplicity</source>
          <target state="translated">清单16-12：为简单起见，在单线程上下文中探索 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 的API</target>
        </trans-unit>
        <trans-unit id="d56dbf3e369ad2af3540bb140a7f2f160cce5bd9" translate="yes" xml:space="preserve">
          <source>Listing 16-13: Ten threads each increment a counter guarded by a &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">清单16-13：十个线程各增加一个由 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 保护的计数器</target>
        </trans-unit>
        <trans-unit id="e59ce5d5fc1d8f6572bb99a6381037738df73f26" translate="yes" xml:space="preserve">
          <source>Listing 16-14: Attempting to use &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; to allow multiple threads to own the &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">清单16-14：尝试使用 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 允许多个线程拥有 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e895f072015f06fead0b93e19086e73b96613c3" translate="yes" xml:space="preserve">
          <source>Listing 16-15: Using an &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; to wrap the &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; to be able to share ownership across multiple threads</source>
          <target state="translated">清单16-15：使用 &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; 包装 &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; 以便能够在多个线程之间共享所有权</target>
        </trans-unit>
        <trans-unit id="57b4aee93626458741b433d91d9361d5dad177bd" translate="yes" xml:space="preserve">
          <source>Listing 16-1: Creating a new thread to print one thing while the main thread prints something else</source>
          <target state="translated">清单16-1:创建一个新的线程来打印一件事,而主线程则打印另一件事。</target>
        </trans-unit>
        <trans-unit id="12b5c01907f295f047c10aa39f8c1176ebcbef5e" translate="yes" xml:space="preserve">
          <source>Listing 16-2: Saving a &lt;code&gt;JoinHandle&lt;/code&gt; from &lt;code&gt;thread::spawn&lt;/code&gt; to guarantee the thread is run to completion</source>
          <target state="translated">清单16-2：从 &lt;code&gt;thread::spawn&lt;/code&gt; 保存一个 &lt;code&gt;JoinHandle&lt;/code&gt; 以确保该线程运行完毕</target>
        </trans-unit>
        <trans-unit id="0e4bc84471eecfbbd51f5d5fcb65303d39e0056a" translate="yes" xml:space="preserve">
          <source>Listing 16-3: Attempting to use a vector created by the main thread in another thread</source>
          <target state="translated">清单16-3:尝试在另一个线程中使用主线程创建的向量。</target>
        </trans-unit>
        <trans-unit id="3f4840d59493ebbe6c316eb6dc48412a423666ec" translate="yes" xml:space="preserve">
          <source>Listing 16-4 provides a scenario that&amp;rsquo;s more likely to have a reference to &lt;code&gt;v&lt;/code&gt; that won&amp;rsquo;t be valid:</source>
          <target state="translated">清单16-4提供了一个场景，该场景更有可能引用对 &lt;code&gt;v&lt;/code&gt; 无效的引用：</target>
        </trans-unit>
        <trans-unit id="2f52a1d931528f94a1108b3ee0c94c630b939635" translate="yes" xml:space="preserve">
          <source>Listing 16-4: A thread with a closure that attempts to capture a reference to &lt;code&gt;v&lt;/code&gt; from a main thread that drops &lt;code&gt;v&lt;/code&gt;</source>
          <target state="translated">代码清单16-4：带有闭包的线程尝试从删除 &lt;code&gt;v&lt;/code&gt; 的主线程中捕获对 &lt;code&gt;v&lt;/code&gt; 的引用</target>
        </trans-unit>
        <trans-unit id="68f36abd65cb9617fabc96bec1214eb384c2e559" translate="yes" xml:space="preserve">
          <source>Listing 16-5: Using the &lt;code&gt;move&lt;/code&gt; keyword to force a closure to take ownership of the values it uses</source>
          <target state="translated">清单16-5：使用 &lt;code&gt;move&lt;/code&gt; 关键字强制闭包对其使用的值拥有所有权</target>
        </trans-unit>
        <trans-unit id="65c3c68257b787d358e1d7e814f67e1c00947c24" translate="yes" xml:space="preserve">
          <source>Listing 16-6: Creating a channel and assigning the two halves to &lt;code&gt;tx&lt;/code&gt; and &lt;code&gt;rx&lt;/code&gt;</source>
          <target state="translated">清单16-6：创建一个通道并将两个半部分分配给 &lt;code&gt;tx&lt;/code&gt; 和 &lt;code&gt;rx&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b1b5995d0b3553dd50483e1b1dd727985f856aa6" translate="yes" xml:space="preserve">
          <source>Listing 16-7: Moving &lt;code&gt;tx&lt;/code&gt; to a spawned thread and sending &amp;ldquo;hi&amp;rdquo;</source>
          <target state="translated">清单16-7：将 &lt;code&gt;tx&lt;/code&gt; 移至生成的线程并发送&amp;ldquo; hi&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="1c6ea482518596009c65da1decd55a62b5a09488" translate="yes" xml:space="preserve">
          <source>Listing 16-8: Receiving the value &amp;ldquo;hi&amp;rdquo; in the main thread and printing it</source>
          <target state="translated">清单16-8：在主线程中接收值&amp;ldquo; hi&amp;rdquo;并打印</target>
        </trans-unit>
        <trans-unit id="1321b4024ee76a7d19ba0581eab40c25717ed32c" translate="yes" xml:space="preserve">
          <source>Listing 16-9: Attempting to use &lt;code&gt;val&lt;/code&gt; after we&amp;rsquo;ve sent it down the channel</source>
          <target state="translated">清单16-9：在将其发送到通道后尝试使用 &lt;code&gt;val&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9f53b0bfbe1f71798882606e57ac86baae11de72" translate="yes" xml:space="preserve">
          <source>Listing 17-10: Attempting to use a type that doesn&amp;rsquo;t implement the trait object&amp;rsquo;s trait</source>
          <target state="translated">清单17-10：尝试使用没有实现trait对象的trait的类型</target>
        </trans-unit>
        <trans-unit id="616b6032949e86e604e03baeb242990f1a755bad" translate="yes" xml:space="preserve">
          <source>Listing 17-11 showed that we want to be able to call a method named &lt;code&gt;add_text&lt;/code&gt; and pass it a &lt;code&gt;&amp;amp;str&lt;/code&gt; that is then added to the text content of the blog post. We implement this as a method rather than exposing the &lt;code&gt;content&lt;/code&gt; field as &lt;code&gt;pub&lt;/code&gt;. This means we can implement a method later that will control how the &lt;code&gt;content&lt;/code&gt; field&amp;rsquo;s data is read. The &lt;code&gt;add_text&lt;/code&gt; method is pretty straightforward, so let&amp;rsquo;s add the implementation in Listing 17-13 to the &lt;code&gt;impl Post&lt;/code&gt; block:</source>
          <target state="translated">清单17-11显示了我们希望能够调用一个名为 &lt;code&gt;add_text&lt;/code&gt; 的方法并将其传递给 &lt;code&gt;&amp;amp;str&lt;/code&gt; ，然后将其添加到博客文章的文本内容中。我们将其实现为一种方法，而不是将 &lt;code&gt;content&lt;/code&gt; 字段公开为 &lt;code&gt;pub&lt;/code&gt; 。这意味着我们以后可以实现一种方法，该方法将控制如何读取 &lt;code&gt;content&lt;/code&gt; 字段的数据。该 &lt;code&gt;add_text&lt;/code&gt; 方法是相当简单的，让我们清单17-13在实施添加到 &lt;code&gt;impl Post&lt;/code&gt; 块：</target>
        </trans-unit>
        <trans-unit id="9146f8d1f83432c6766686b385badbf73153717d" translate="yes" xml:space="preserve">
          <source>Listing 17-11 shows this workflow in code form: this is an example usage of the API we&amp;rsquo;ll implement in a library crate named &lt;code&gt;blog&lt;/code&gt;. This won&amp;rsquo;t compile yet because we haven&amp;rsquo;t implemented the &lt;code&gt;blog&lt;/code&gt; crate yet.</source>
          <target state="translated">清单17-11以代码形式显示了此工作流：这是我们将在名为 &lt;code&gt;blog&lt;/code&gt; 的库箱中实现的API的示例用法。由于我们尚未实现 &lt;code&gt;blog&lt;/code&gt; 箱，因此尚无法编译。</target>
        </trans-unit>
        <trans-unit id="e503a37b208823b1fe53cabe8334c7ca42c80dba" translate="yes" xml:space="preserve">
          <source>Listing 17-11: Code that demonstrates the desired behavior we want our &lt;code&gt;blog&lt;/code&gt; crate to have</source>
          <target state="translated">清单17-11：演示我们希望 &lt;code&gt;blog&lt;/code&gt; 箱具有的预期行为的代码</target>
        </trans-unit>
        <trans-unit id="f1620b3de9e638fc5e39afeef2145569e6847def" translate="yes" xml:space="preserve">
          <source>Listing 17-12: Definition of a &lt;code&gt;Post&lt;/code&gt; struct and a &lt;code&gt;new&lt;/code&gt; function that creates a new &lt;code&gt;Post&lt;/code&gt; instance, a &lt;code&gt;State&lt;/code&gt; trait, and a &lt;code&gt;Draft&lt;/code&gt; struct</source>
          <target state="translated">清单17-12： &lt;code&gt;Post&lt;/code&gt; 结构的定义和一个 &lt;code&gt;new&lt;/code&gt; 函数，该函数创建一个新的 &lt;code&gt;Post&lt;/code&gt; 实例，一个 &lt;code&gt;State&lt;/code&gt; trait和一个 &lt;code&gt;Draft&lt;/code&gt; 结构</target>
        </trans-unit>
        <trans-unit id="771eeb1af445ce7599b9b49829f583fe06060e94" translate="yes" xml:space="preserve">
          <source>Listing 17-13: Implementing the &lt;code&gt;add_text&lt;/code&gt; method to add text to a post&amp;rsquo;s &lt;code&gt;content&lt;/code&gt;</source>
          <target state="translated">清单17-13：实现 &lt;code&gt;add_text&lt;/code&gt; 方法以将文本添加到帖子的 &lt;code&gt;content&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7247d1c523b6527219b67cc4b27e57c78e329f65" translate="yes" xml:space="preserve">
          <source>Listing 17-14: Adding a placeholder implementation for the &lt;code&gt;content&lt;/code&gt; method on &lt;code&gt;Post&lt;/code&gt; that always returns an empty string slice</source>
          <target state="translated">清单17-14：为 &lt;code&gt;Post&lt;/code&gt; 的 &lt;code&gt;content&lt;/code&gt; 方法添加一个占位符实现，该实现始终返回一个空字符串切片</target>
        </trans-unit>
        <trans-unit id="7e2baf957d0f7561fcdd554cf11ea8c05c575b7f" translate="yes" xml:space="preserve">
          <source>Listing 17-15: Implementing &lt;code&gt;request_review&lt;/code&gt; methods on &lt;code&gt;Post&lt;/code&gt; and the &lt;code&gt;State&lt;/code&gt; trait</source>
          <target state="translated">清单17-15：在 &lt;code&gt;Post&lt;/code&gt; 和 &lt;code&gt;State&lt;/code&gt; trait 上实现 &lt;code&gt;request_review&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="cdbb4624526d447f365d0c2c9d058213c72af6f1" translate="yes" xml:space="preserve">
          <source>Listing 17-16: Implementing the &lt;code&gt;approve&lt;/code&gt; method on &lt;code&gt;Post&lt;/code&gt; and the &lt;code&gt;State&lt;/code&gt; trait</source>
          <target state="translated">清单17-16：在 &lt;code&gt;Post&lt;/code&gt; 和 &lt;code&gt;State&lt;/code&gt; 特质上实现 &lt;code&gt;approve&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="7f4eb5c03e760160f8826b08a4d43cdb29409364" translate="yes" xml:space="preserve">
          <source>Listing 17-17: Updating the &lt;code&gt;content&lt;/code&gt; method on &lt;code&gt;Post&lt;/code&gt; to delegate to a &lt;code&gt;content&lt;/code&gt; method on &lt;code&gt;State&lt;/code&gt;</source>
          <target state="translated">清单17-17：更新 &lt;code&gt;Post&lt;/code&gt; 上的 &lt;code&gt;content&lt;/code&gt; 方法以委托给 &lt;code&gt;State&lt;/code&gt; 上的 &lt;code&gt;content&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="a326b346b73e4afdc2a1733c02f0e9fd20e8b7d5" translate="yes" xml:space="preserve">
          <source>Listing 17-18: Adding the &lt;code&gt;content&lt;/code&gt; method to the &lt;code&gt;State&lt;/code&gt; trait</source>
          <target state="translated">清单17-18：将 &lt;code&gt;content&lt;/code&gt; 方法添加到 &lt;code&gt;State&lt;/code&gt; 特征</target>
        </trans-unit>
        <trans-unit id="a7b8a363eb5ab143105af7e7ab0e366d9e8e76c3" translate="yes" xml:space="preserve">
          <source>Listing 17-19: A &lt;code&gt;Post&lt;/code&gt; with a &lt;code&gt;content&lt;/code&gt; method and a &lt;code&gt;DraftPost&lt;/code&gt; without a &lt;code&gt;content&lt;/code&gt; method</source>
          <target state="translated">清单17-19：具有 &lt;code&gt;content&lt;/code&gt; 方法的 &lt;code&gt;Post&lt;/code&gt; 和不具有 &lt;code&gt;content&lt;/code&gt; 方法的 &lt;code&gt;DraftPost&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="20fae4c7b40d2fe79a0f2f5ecda0ff6fbf94e76b" translate="yes" xml:space="preserve">
          <source>Listing 17-1: An &lt;code&gt;AveragedCollection&lt;/code&gt; struct that maintains a list of integers and the average of the items in the collection</source>
          <target state="translated">清单17-1： &lt;code&gt;AveragedCollection&lt;/code&gt; 结构，该结构维护整数列表和集合中各项的平均值</target>
        </trans-unit>
        <trans-unit id="b1b1a0c2ff1d0c5537eceea61cc356e7c360c7f4" translate="yes" xml:space="preserve">
          <source>Listing 17-20: A &lt;code&gt;PendingReviewPost&lt;/code&gt; that gets created by calling &lt;code&gt;request_review&lt;/code&gt; on &lt;code&gt;DraftPost&lt;/code&gt; and an &lt;code&gt;approve&lt;/code&gt; method that turns a &lt;code&gt;PendingReviewPost&lt;/code&gt; into a published &lt;code&gt;Post&lt;/code&gt;</source>
          <target state="translated">清单17-20：通过在 &lt;code&gt;DraftPost&lt;/code&gt; 上调用 &lt;code&gt;request_review&lt;/code&gt; 创建的 &lt;code&gt;PendingReviewPost&lt;/code&gt; 和将 &lt;code&gt;PendingReviewPost&lt;/code&gt; 转换为已发布 &lt;code&gt;Post&lt;/code&gt; 的 &lt;code&gt;approve&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="58dea3744e2c0be352925a0e7cd74ffdedb9028f" translate="yes" xml:space="preserve">
          <source>Listing 17-21: Modifications to &lt;code&gt;main&lt;/code&gt; to use the new implementation of the blog post workflow</source>
          <target state="translated">清单17-21：修改为 &lt;code&gt;main&lt;/code&gt; 使用博客文章工作流程的新实现</target>
        </trans-unit>
        <trans-unit id="834ba7425b4ceae322feab13f35479b714e61ef1" translate="yes" xml:space="preserve">
          <source>Listing 17-2: Implementations of the public methods &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;average&lt;/code&gt; on &lt;code&gt;AveragedCollection&lt;/code&gt;</source>
          <target state="translated">清单17-2：在 &lt;code&gt;AveragedCollection&lt;/code&gt; 上公共方法 &lt;code&gt;add&lt;/code&gt; ， &lt;code&gt;remove&lt;/code&gt; 和 &lt;code&gt;average&lt;/code&gt; 的实现</target>
        </trans-unit>
        <trans-unit id="af397fd71809e54f0083b7e608d6c0b4c9b0bf08" translate="yes" xml:space="preserve">
          <source>Listing 17-3 shows how to define a trait named &lt;code&gt;Draw&lt;/code&gt; with one method named &lt;code&gt;draw&lt;/code&gt;:</source>
          <target state="translated">清单17-3显示了如何使用一个名为 &lt;code&gt;draw&lt;/code&gt; 的方法来定义名为 &lt;code&gt;Draw&lt;/code&gt; 的特征：</target>
        </trans-unit>
        <trans-unit id="4f10326f38470efd1f683c6be6bac4e63a3ff831" translate="yes" xml:space="preserve">
          <source>Listing 17-3: Definition of the &lt;code&gt;Draw&lt;/code&gt; trait</source>
          <target state="translated">清单17-3： &lt;code&gt;Draw&lt;/code&gt; 特性的定义</target>
        </trans-unit>
        <trans-unit id="53f4d30f17cd4871bb579fc6d6ab9fa64fdf9e11" translate="yes" xml:space="preserve">
          <source>Listing 17-4: Definition of the &lt;code&gt;Screen&lt;/code&gt; struct with a &lt;code&gt;components&lt;/code&gt; field holding a vector of trait objects that implement the &lt;code&gt;Draw&lt;/code&gt; trait</source>
          <target state="translated">清单17-4： &lt;code&gt;Screen&lt;/code&gt; 结构的定义，其中的 &lt;code&gt;components&lt;/code&gt; 字段包含实现 &lt;code&gt;Draw&lt;/code&gt; trait 的trait对象的向量</target>
        </trans-unit>
        <trans-unit id="b367bafd62da00b39f0f29178ba139044ac6e392" translate="yes" xml:space="preserve">
          <source>Listing 17-5: A &lt;code&gt;run&lt;/code&gt; method on &lt;code&gt;Screen&lt;/code&gt; that calls the &lt;code&gt;draw&lt;/code&gt; method on each component</source>
          <target state="translated">清单17-5： &lt;code&gt;Screen&lt;/code&gt; 上的 &lt;code&gt;run&lt;/code&gt; 方法，它在每个组件上调用 &lt;code&gt;draw&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="deeebbdce767d8f16391b9fb2bdfc0e4741a956c" translate="yes" xml:space="preserve">
          <source>Listing 17-6: An alternate implementation of the &lt;code&gt;Screen&lt;/code&gt; struct and its &lt;code&gt;run&lt;/code&gt; method using generics and trait bounds</source>
          <target state="translated">清单17-6：使用泛型和特征边界的 &lt;code&gt;Screen&lt;/code&gt; 结构及其 &lt;code&gt;run&lt;/code&gt; 方法的替代实现</target>
        </trans-unit>
        <trans-unit id="b8a2b70499d48a841aff1d4e0201a4639e08dfd3" translate="yes" xml:space="preserve">
          <source>Listing 17-7: A &lt;code&gt;Button&lt;/code&gt; struct that implements the &lt;code&gt;Draw&lt;/code&gt; trait</source>
          <target state="translated">清单17-7：实现 &lt;code&gt;Draw&lt;/code&gt; 特性的 &lt;code&gt;Button&lt;/code&gt; 结构</target>
        </trans-unit>
        <trans-unit id="f85ea6c0e85c436b267fdc78309b821b846f93e5" translate="yes" xml:space="preserve">
          <source>Listing 17-8: Another crate using &lt;code&gt;gui&lt;/code&gt; and implementing the &lt;code&gt;Draw&lt;/code&gt; trait on a &lt;code&gt;SelectBox&lt;/code&gt; struct</source>
          <target state="translated">清单17-8：另一个使用 &lt;code&gt;gui&lt;/code&gt; 的板条箱，并在 &lt;code&gt;SelectBox&lt;/code&gt; 结构上实现了 &lt;code&gt;Draw&lt;/code&gt; 特征</target>
        </trans-unit>
        <trans-unit id="cc429d3edf954109de11b803bc39958b6b784d5b" translate="yes" xml:space="preserve">
          <source>Listing 17-9: Using trait objects to store values of different types that implement the same trait</source>
          <target state="translated">清单 17-9:使用特质对象来存储实现同一特质的不同类型的值。</target>
        </trans-unit>
        <trans-unit id="ddfe1c7f701b93852d2a31044c55db0f52b05397" translate="yes" xml:space="preserve">
          <source>Listing 18-1 shows that it&amp;rsquo;s also possible to mix and match &lt;code&gt;if let&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, and &lt;code&gt;else if let&lt;/code&gt; expressions. Doing so gives us more flexibility than a &lt;code&gt;match&lt;/code&gt; expression in which we can express only one value to compare with the patterns. Also, the conditions in a series of &lt;code&gt;if let&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, &lt;code&gt;else if let&lt;/code&gt; arms aren&amp;rsquo;t required to relate to each other.</source>
          <target state="translated">清单18-1显示，还可以混合 &lt;code&gt;if let&lt;/code&gt; ， &lt;code&gt;else if&lt;/code&gt; 和 &lt;code&gt;else if let&lt;/code&gt; 表达式。 &lt;code&gt;match&lt;/code&gt; 表达式相比，匹配表达式给我们提供了更大的灵活性，在匹配表达式中，我们只能表达一个值以与模式进行比较。此外，在一系列条件 &lt;code&gt;if let&lt;/code&gt; ， &lt;code&gt;else if&lt;/code&gt; ， &lt;code&gt;else if let&lt;/code&gt; 不需要武器之间的相互关系。</target>
        </trans-unit>
        <trans-unit id="6144661c623085286d9e6c1f25f8fba184c50d92" translate="yes" xml:space="preserve">
          <source>Listing 18-10: Attempting to use an irrefutable pattern with &lt;code&gt;if let&lt;/code&gt;</source>
          <target state="translated">清单18-10：尝试在 &lt;code&gt;if let&lt;/code&gt; 中使用不可辩驳的模式</target>
        </trans-unit>
        <trans-unit id="4fb327bd75f9cb8728aaf90ca3b872fcf04c7b03" translate="yes" xml:space="preserve">
          <source>Listing 18-11: A &lt;code&gt;match&lt;/code&gt; expression with an arm that introduces a shadowed variable &lt;code&gt;y&lt;/code&gt;</source>
          <target state="translated">代码清单18-11：带有手臂的 &lt;code&gt;match&lt;/code&gt; 表达式，其中引入了阴影变量 &lt;code&gt;y&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c2b55120c0d8dc746b9a11845e36ee6b0454a61" translate="yes" xml:space="preserve">
          <source>Listing 18-12 shows a &lt;code&gt;Point&lt;/code&gt; struct with two fields, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, that we can break apart using a pattern with a &lt;code&gt;let&lt;/code&gt; statement.</source>
          <target state="translated">清单18-12显示了一个具有两个字段 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 的 &lt;code&gt;Point&lt;/code&gt; 结构，我们可以使用带有 &lt;code&gt;let&lt;/code&gt; 语句的模式进行分解。</target>
        </trans-unit>
        <trans-unit id="8fcd90b374859cce38828ebaf8d6bead41442a33" translate="yes" xml:space="preserve">
          <source>Listing 18-12: Destructuring a struct&amp;rsquo;s fields into separate variables</source>
          <target state="translated">清单18-12：将结构的字段分解为单独的变量</target>
        </trans-unit>
        <trans-unit id="4ffbbc6877a6d05b9d9c472765b5d7903d9e7479" translate="yes" xml:space="preserve">
          <source>Listing 18-13: Destructuring struct fields using struct field shorthand</source>
          <target state="translated">清单 18-13:使用结构字段速记来重构结构字段</target>
        </trans-unit>
        <trans-unit id="11235cfa0778ac436ff2f043900aa97ca456308b" translate="yes" xml:space="preserve">
          <source>Listing 18-14 shows a &lt;code&gt;match&lt;/code&gt; expression that separates &lt;code&gt;Point&lt;/code&gt; values into three cases: points that lie directly on the &lt;code&gt;x&lt;/code&gt; axis (which is true when &lt;code&gt;y = 0&lt;/code&gt;), on the &lt;code&gt;y&lt;/code&gt; axis (&lt;code&gt;x = 0&lt;/code&gt;), or neither.</source>
          <target state="translated">清单18-14显示了一个 &lt;code&gt;match&lt;/code&gt; 表达式，该表达式将 &lt;code&gt;Point&lt;/code&gt; 值分为三种情况：直接位于 &lt;code&gt;x&lt;/code&gt; 轴上的点（在 &lt;code&gt;y = 0&lt;/code&gt; 时为true ），在 &lt;code&gt;y&lt;/code&gt; 轴上（ &lt;code&gt;x = 0&lt;/code&gt; ）或两者都不存在。</target>
        </trans-unit>
        <trans-unit id="fb8ab1d9675afe7b1be1ae05d4ffa8df574bad5c" translate="yes" xml:space="preserve">
          <source>Listing 18-14: Destructuring and matching literal values in one pattern</source>
          <target state="translated">清单18-14:在一个模式中分解和匹配字面值。</target>
        </trans-unit>
        <trans-unit id="2c53ca816acb5a98311e74b746cebc27259ca9cd" translate="yes" xml:space="preserve">
          <source>Listing 18-15: Destructuring enum variants that hold different kinds of values</source>
          <target state="translated">清单 18-15:构建持有不同类型值的枚举变体。</target>
        </trans-unit>
        <trans-unit id="8d017024ad074a5a0b7ed0110f548b4814b94a7f" translate="yes" xml:space="preserve">
          <source>Listing 18-16: Matching on nested enums</source>
          <target state="translated">清单 18-16:嵌套枚举的匹配</target>
        </trans-unit>
        <trans-unit id="f6f8fe0574320b6bc647539f95a9151cef4615db" translate="yes" xml:space="preserve">
          <source>Listing 18-17: Using &lt;code&gt;_&lt;/code&gt; in a function signature</source>
          <target state="translated">清单18-17：在函数签名中使用 &lt;code&gt;_&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8578bd30c83decb05fa742779b0e3e4b88f7c284" translate="yes" xml:space="preserve">
          <source>Listing 18-18: Using an underscore within patterns that match &lt;code&gt;Some&lt;/code&gt; variants when we don&amp;rsquo;t need to use the value inside the &lt;code&gt;Some&lt;/code&gt;</source>
          <target state="translated">清单18-18：当我们不需要使用 &lt;code&gt;Some&lt;/code&gt; 中的值时，在匹配 &lt;code&gt;Some&lt;/code&gt; 变体的模式中使用下划线</target>
        </trans-unit>
        <trans-unit id="37c8915871f50b9721bed2e69eaf1a05338e87bd" translate="yes" xml:space="preserve">
          <source>Listing 18-19: Ignoring multiple parts of a tuple</source>
          <target state="translated">清单 18-19:忽略一个元组的多个部分</target>
        </trans-unit>
        <trans-unit id="04e7b01d790581aedba062883153a4872da1e4bc" translate="yes" xml:space="preserve">
          <source>Listing 18-1: Mixing &lt;code&gt;if let&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, &lt;code&gt;else if let&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt;</source>
          <target state="translated">清单18-1：混合 &lt;code&gt;if let&lt;/code&gt; ， &lt;code&gt;else if&lt;/code&gt; ， &lt;code&gt;else if let&lt;/code&gt; 和 &lt;code&gt;else&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c0192d0fe46e2149dd08840da1d83030a4ae539d" translate="yes" xml:space="preserve">
          <source>Listing 18-20: Starting a variable name with an underscore to avoid getting unused variable warnings</source>
          <target state="translated">清单18-20:用下划线开始一个变量名,以避免得到未使用的变量警告。</target>
        </trans-unit>
        <trans-unit id="b01ab99d779b491e654cdd969c4904697cb0151a" translate="yes" xml:space="preserve">
          <source>Listing 18-21: An unused variable starting with an underscore still binds the value, which might take ownership of the value</source>
          <target state="translated">清单 18-21:一个以下划线开头的未使用的变量仍然会绑定数值,它可能会拥有数值的所有权。</target>
        </trans-unit>
        <trans-unit id="02ba42be73f9aaf4aecf0fb121bd2897610211e9" translate="yes" xml:space="preserve">
          <source>Listing 18-22: Using an underscore does not bind the value</source>
          <target state="translated">清单18-22:使用下划线并不绑定值。</target>
        </trans-unit>
        <trans-unit id="84f4057dde8da9e2423dedf021ccca0489c6ac8b" translate="yes" xml:space="preserve">
          <source>Listing 18-23: Ignoring all fields of a &lt;code&gt;Point&lt;/code&gt; except for &lt;code&gt;x&lt;/code&gt; by using &lt;code&gt;..&lt;/code&gt;</source>
          <target state="translated">代码清单18-23：使用 &lt;code&gt;..&lt;/code&gt; 忽略 &lt;code&gt;Point&lt;/code&gt; 的除 &lt;code&gt;x&lt;/code&gt; 以外的所有字段</target>
        </trans-unit>
        <trans-unit id="3275bf1924f1fbc7d62858e211ba0873cc0669da" translate="yes" xml:space="preserve">
          <source>Listing 18-24: Matching only the first and last values in a tuple and ignoring all other values</source>
          <target state="translated">清单 18-24:只匹配元组中的第一个和最后一个值,而忽略所有其他值。</target>
        </trans-unit>
        <trans-unit id="0e55fccc60bd6fc7526f10678d21072747686831" translate="yes" xml:space="preserve">
          <source>Listing 18-25: An attempt to use &lt;code&gt;..&lt;/code&gt; in an ambiguous way</source>
          <target state="translated">清单18-25：尝试以不明确的方式使用 &lt;code&gt;..&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="97cebea2424bf45c8bf6c663a2503dbf6d8034ad" translate="yes" xml:space="preserve">
          <source>Listing 18-26: Adding a match guard to a pattern</source>
          <target state="translated">清单 18-26:在模式中添加匹配保护</target>
        </trans-unit>
        <trans-unit id="f95d9bacb005429d46b172980ece5949fe65c37d" translate="yes" xml:space="preserve">
          <source>Listing 18-27: Using a match guard to test for equality with an outer variable</source>
          <target state="translated">清单 18-27:使用匹配后卫测试外部变量的平等性。</target>
        </trans-unit>
        <trans-unit id="0704830d46f846b74b5397dfd28e0cc52ee3748c" translate="yes" xml:space="preserve">
          <source>Listing 18-28: Combining multiple patterns with a match guard</source>
          <target state="translated">清单 18-28:用火柴防护罩组合多种模式</target>
        </trans-unit>
        <trans-unit id="7e4e4163a76cf16ed52305f58c5002629978394b" translate="yes" xml:space="preserve">
          <source>Listing 18-29: Using &lt;code&gt;@&lt;/code&gt; to bind to a value in a pattern while also testing it</source>
          <target state="translated">清单18-29：使用 &lt;code&gt;@&lt;/code&gt; 绑定到模式中的值，同时还要对其进行测试</target>
        </trans-unit>
        <trans-unit id="23efe349dec0a7214e63201a66162129b04c6e4c" translate="yes" xml:space="preserve">
          <source>Listing 18-2: Using a &lt;code&gt;while let&lt;/code&gt; loop to print values for as long as &lt;code&gt;stack.pop()&lt;/code&gt; returns &lt;code&gt;Some&lt;/code&gt;</source>
          <target state="translated">清单18-2：只要 &lt;code&gt;stack.pop()&lt;/code&gt; 返回 &lt;code&gt;Some&lt;/code&gt; 使用 &lt;code&gt;while let&lt;/code&gt; 循环打印值</target>
        </trans-unit>
        <trans-unit id="442e4a943f8db50a444be69278c2e7871bcc0a79" translate="yes" xml:space="preserve">
          <source>Listing 18-3 demonstrates how to use a pattern in a &lt;code&gt;for&lt;/code&gt; loop to destructure, or break apart, a tuple as part of the &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">清单18-3演示了如何在 &lt;code&gt;for&lt;/code&gt; 循环中使用模式来分解或拆分元组，作为 &lt;code&gt;for&lt;/code&gt; 循环的一部分。</target>
        </trans-unit>
        <trans-unit id="50a3b88c90e0ff821d1a59ab4a6da154261b1017" translate="yes" xml:space="preserve">
          <source>Listing 18-3: Using a pattern in a &lt;code&gt;for&lt;/code&gt; loop to destructure a tuple</source>
          <target state="translated">清单18-3：在 &lt;code&gt;for&lt;/code&gt; 循环中使用模式来分解元组</target>
        </trans-unit>
        <trans-unit id="e1d043e4088371824844d59ed215594c594ada98" translate="yes" xml:space="preserve">
          <source>Listing 18-4: Using a pattern to destructure a tuple and create three variables at once</source>
          <target state="translated">清单18-4:使用模式来重构一个元组并同时创建三个变量。</target>
        </trans-unit>
        <trans-unit id="e661b97edf1bb133ffbc7fc27e8a7bb308aef2f6" translate="yes" xml:space="preserve">
          <source>Listing 18-5: Incorrectly constructing a pattern whose variables don&amp;rsquo;t match the number of elements in the tuple</source>
          <target state="translated">清单18-5：错误地构造了一个模式，该模式的变量与元组中的元素数不匹配</target>
        </trans-unit>
        <trans-unit id="a385d299c12c18dc1cff0477057573295b51144e" translate="yes" xml:space="preserve">
          <source>Listing 18-6: A function signature uses patterns in the parameters</source>
          <target state="translated">清单 18-6:函数签名在参数中使用模式</target>
        </trans-unit>
        <trans-unit id="d3aee3d1bb78e1ecec2ead5910893a0623b90b19" translate="yes" xml:space="preserve">
          <source>Listing 18-7: A function with parameters that destructure a tuple</source>
          <target state="translated">清单 18-7:一个带参数的函数,可以反构一个元组。</target>
        </trans-unit>
        <trans-unit id="21e573f160e40fcf18eb94c2061a631cb291a5f6" translate="yes" xml:space="preserve">
          <source>Listing 18-8: Attempting to use a refutable pattern with &lt;code&gt;let&lt;/code&gt;</source>
          <target state="translated">清单18-8：尝试对 &lt;code&gt;let&lt;/code&gt; 使用可重用模式</target>
        </trans-unit>
        <trans-unit id="675529134474b9f9be7b4829f297213ca94319fa" translate="yes" xml:space="preserve">
          <source>Listing 18-9: Using &lt;code&gt;if let&lt;/code&gt; and a block with refutable patterns instead of &lt;code&gt;let&lt;/code&gt;</source>
          <target state="translated">清单18-9：使用 &lt;code&gt;if let&lt;/code&gt; 和带有可重提模式的块代替 &lt;code&gt;let&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf63cbd65b20995fab2c3177f0bdf18c81ec5bba" translate="yes" xml:space="preserve">
          <source>Listing 19-1 shows how to create an immutable and a mutable raw pointer from references.</source>
          <target state="translated">清单19-1显示了如何从引用中创建一个不可变和可变的原始指针。</target>
        </trans-unit>
        <trans-unit id="1c28635772518e1ad661ea27fce0ffdf6d63713e" translate="yes" xml:space="preserve">
          <source>Listing 19-10: Reading from or writing to a mutable static variable is unsafe</source>
          <target state="translated">清单 19-10:向可变静态变量读写是不安全的。</target>
        </trans-unit>
        <trans-unit id="9e5c9abfc65b6f4d1aa6e66f7ef07fe278c65c7d" translate="yes" xml:space="preserve">
          <source>Listing 19-11: Defining and implementing an unsafe trait</source>
          <target state="translated">清单 19-11:定义和实施不安全特性</target>
        </trans-unit>
        <trans-unit id="97e7d182f69683a4f3a68c22cc9d9c54c17d0703" translate="yes" xml:space="preserve">
          <source>Listing 19-12: The definition of the &lt;code&gt;Iterator&lt;/code&gt; trait that has an associated type &lt;code&gt;Item&lt;/code&gt;</source>
          <target state="translated">清单19-12：具有关联类型 &lt;code&gt;Item&lt;/code&gt; 的 &lt;code&gt;Iterator&lt;/code&gt; 特征的定义</target>
        </trans-unit>
        <trans-unit id="4e26c92b1d14183f38e41790c29afe868e637f42" translate="yes" xml:space="preserve">
          <source>Listing 19-13: A hypothetical definition of the &lt;code&gt;Iterator&lt;/code&gt; trait using generics</source>
          <target state="translated">清单19-13：使用泛型的 &lt;code&gt;Iterator&lt;/code&gt; 特质的假想定义</target>
        </trans-unit>
        <trans-unit id="a6225ec091be9ac5ca264bd8b927cc4c37328abc" translate="yes" xml:space="preserve">
          <source>Listing 19-14: Implementing the &lt;code&gt;Add&lt;/code&gt; trait to overload the &lt;code&gt;+&lt;/code&gt; operator for &lt;code&gt;Point&lt;/code&gt; instances</source>
          <target state="translated">清单19-14：实现 &lt;code&gt;Add&lt;/code&gt; 特性以重载 &lt;code&gt;Point&lt;/code&gt; 实例的 &lt;code&gt;+&lt;/code&gt; 运算符</target>
        </trans-unit>
        <trans-unit id="8e21c1e69cc727098d370a83f01461649e24252b" translate="yes" xml:space="preserve">
          <source>Listing 19-15: Implementing the &lt;code&gt;Add&lt;/code&gt; trait on &lt;code&gt;Millimeters&lt;/code&gt; to add &lt;code&gt;Millimeters&lt;/code&gt; to &lt;code&gt;Meters&lt;/code&gt;</source>
          <target state="translated">清单19-15：在&amp;ldquo; &lt;code&gt;Millimeters&lt;/code&gt; 上实现&amp;ldquo; &lt;code&gt;Add&lt;/code&gt; 特征以将 &lt;code&gt;Millimeters&lt;/code&gt; 添加到 &lt;code&gt;Meters&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a8cfa717336348c447e94e7f1e44c3038c63118f" translate="yes" xml:space="preserve">
          <source>Listing 19-16: Two traits are defined to have a &lt;code&gt;fly&lt;/code&gt; method and are implemented on the &lt;code&gt;Human&lt;/code&gt; type, and a &lt;code&gt;fly&lt;/code&gt; method is implemented on &lt;code&gt;Human&lt;/code&gt; directly</source>
          <target state="translated">清单19-16：两个特征被定义为具有 &lt;code&gt;fly&lt;/code&gt; 方法并在 &lt;code&gt;Human&lt;/code&gt; 类型上实现， &lt;code&gt;fly&lt;/code&gt; 方法直接在 &lt;code&gt;Human&lt;/code&gt; 上实现</target>
        </trans-unit>
        <trans-unit id="db633a5a017661e7a7146fde17cdac691e8db4a1" translate="yes" xml:space="preserve">
          <source>Listing 19-17: Calling &lt;code&gt;fly&lt;/code&gt; on an instance of &lt;code&gt;Human&lt;/code&gt;</source>
          <target state="translated">清单19-17：在 &lt;code&gt;Human&lt;/code&gt; 实例上调用 &lt;code&gt;fly&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="23834c33f73df40768a1dd5e5beec6df8bf7b48e" translate="yes" xml:space="preserve">
          <source>Listing 19-18: Specifying which trait&amp;rsquo;s &lt;code&gt;fly&lt;/code&gt; method we want to call</source>
          <target state="translated">清单19-18：指定我们要调用的特征的 &lt;code&gt;fly&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="0a1f4647a45d92385555a03bf4ecb4d0623b48a1" translate="yes" xml:space="preserve">
          <source>Listing 19-19: A trait with an associated function and a type with an associated function of the same name that also implements the trait</source>
          <target state="translated">清单 19-19.一个带有关联函数的特质和一个带有同名关联函数的类型,也实现了特质。带有相关函数的特质和带有同名相关函数的类型,该类型也实现了该特质。</target>
        </trans-unit>
        <trans-unit id="192efdc88660736ee00124c16674e9b849c2f715" translate="yes" xml:space="preserve">
          <source>Listing 19-1: Creating raw pointers from references</source>
          <target state="translated">清单19-1:从引用创建原始指针</target>
        </trans-unit>
        <trans-unit id="8d83b1ebdf623a809ae1dbc744f5cfb736315160" translate="yes" xml:space="preserve">
          <source>Listing 19-20: Attempting to call the &lt;code&gt;baby_name&lt;/code&gt; function from the &lt;code&gt;Animal&lt;/code&gt; trait, but Rust doesn&amp;rsquo;t know which implementation to use</source>
          <target state="translated">清单19-20：尝试从 &lt;code&gt;Animal&lt;/code&gt; 特性中调用 &lt;code&gt;baby_name&lt;/code&gt; 函数，但是Rust不知道要使用哪个实现</target>
        </trans-unit>
        <trans-unit id="ac581d7a4053cba32c760b99f0af0222300b5bb1" translate="yes" xml:space="preserve">
          <source>Listing 19-21: Using fully qualified syntax to specify that we want to call the &lt;code&gt;baby_name&lt;/code&gt; function from the &lt;code&gt;Animal&lt;/code&gt; trait as implemented on &lt;code&gt;Dog&lt;/code&gt;</source>
          <target state="translated">清单19-21：使用完全限定的语法来指定我们要从 &lt;code&gt;Dog&lt;/code&gt; 上实现的 &lt;code&gt;Animal&lt;/code&gt; 特性中调用 &lt;code&gt;baby_name&lt;/code&gt; 函数</target>
        </trans-unit>
        <trans-unit id="8205ecf7d4f5d4f3830c5045853af8331fa47133" translate="yes" xml:space="preserve">
          <source>Listing 19-22: Implementing the &lt;code&gt;OutlinePrint&lt;/code&gt; trait that requires the functionality from &lt;code&gt;Display&lt;/code&gt;</source>
          <target state="translated">清单19-22：实现需要 &lt;code&gt;Display&lt;/code&gt; 的功能的 &lt;code&gt;OutlinePrint&lt;/code&gt; 特征</target>
        </trans-unit>
        <trans-unit id="c5e43e2c666b627080372728cabf0cc1d1c6ff63" translate="yes" xml:space="preserve">
          <source>Listing 19-23: Creating a &lt;code&gt;Wrapper&lt;/code&gt; type around &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;/code&gt; to implement &lt;code&gt;Display&lt;/code&gt;</source>
          <target state="translated">清单19-23：在 &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;/code&gt; 周围创建 &lt;code&gt;Wrapper&lt;/code&gt; 类型以实现 &lt;code&gt;Display&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1131b7eb93a0bacee5469c6f2b5469b17091340d" translate="yes" xml:space="preserve">
          <source>Listing 19-24: Using a long type in many places</source>
          <target state="translated">清单19-24:在许多地方使用长类型</target>
        </trans-unit>
        <trans-unit id="1987562b13a9a144a67a61660918cc709b89a4d7" translate="yes" xml:space="preserve">
          <source>Listing 19-25: Introducing a type alias &lt;code&gt;Thunk&lt;/code&gt; to reduce repetition</source>
          <target state="translated">清单19-25：介绍类型别名 &lt;code&gt;Thunk&lt;/code&gt; 以减少重复</target>
        </trans-unit>
        <trans-unit id="ad147945642e08a211cbe9d3bd11a5fcd950dc97" translate="yes" xml:space="preserve">
          <source>Listing 19-26: A &lt;code&gt;match&lt;/code&gt; with an arm that ends in &lt;code&gt;continue&lt;/code&gt;</source>
          <target state="translated">清单19-26：一条手臂以 &lt;code&gt;continue&lt;/code&gt; 结尾的 &lt;code&gt;match&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="66fc36103a8a4f76e0bc69209e8f9d1bde9445a7" translate="yes" xml:space="preserve">
          <source>Listing 19-27: Using the &lt;code&gt;fn&lt;/code&gt; type to accept a function pointer as an argument</source>
          <target state="translated">清单19-27：使用 &lt;code&gt;fn&lt;/code&gt; 类型接受函数指针作为参数</target>
        </trans-unit>
        <trans-unit id="769c84eb503c23780b93699d2159e4cf8959b7f5" translate="yes" xml:space="preserve">
          <source>Listing 19-28 shows a slightly simplified definition of the &lt;code&gt;vec!&lt;/code&gt; macro.</source>
          <target state="translated">清单19-28显示了 &lt;code&gt;vec!&lt;/code&gt; 的稍微简化的定义！宏。</target>
        </trans-unit>
        <trans-unit id="60ab4c545d5a0a14c36d0f048ed889fbad1b867a" translate="yes" xml:space="preserve">
          <source>Listing 19-28: A simplified version of the &lt;code&gt;vec!&lt;/code&gt; macro definition</source>
          <target state="translated">清单19-28： &lt;code&gt;vec!&lt;/code&gt; 简化版本！宏定义</target>
        </trans-unit>
        <trans-unit id="97631e592572572bb56effe84f77bb58203d289e" translate="yes" xml:space="preserve">
          <source>Listing 19-29: An example of using a procedural macro</source>
          <target state="translated">清单 19-29:使用程序性宏的一个例子</target>
        </trans-unit>
        <trans-unit id="83ea168fb44a9c48159cac238fc94515fe3427d1" translate="yes" xml:space="preserve">
          <source>Listing 19-2: Creating a raw pointer to an arbitrary memory address</source>
          <target state="translated">清单19-2:创建一个指向任意内存地址的原始指针。</target>
        </trans-unit>
        <trans-unit id="eb0cf59c32c33cd655b69f707870bf310b1c110b" translate="yes" xml:space="preserve">
          <source>Listing 19-30: The code a user of our crate will be able to write when using our procedural macro</source>
          <target state="translated">清单 19-30:当使用我们的程序性宏时,我们的箱子的用户将能够写出的代码</target>
        </trans-unit>
        <trans-unit id="3c1a2c71019296d6475855f5967a82c656b5e4de" translate="yes" xml:space="preserve">
          <source>Listing 19-31: Code that most procedural macro crates will require in order to process Rust code</source>
          <target state="translated">清单19-31。大多数程序化宏箱需要的代码,以便处理Rust代码。</target>
        </trans-unit>
        <trans-unit id="e7d6f9e676482d1db15035f09578f137f1526cbb" translate="yes" xml:space="preserve">
          <source>Listing 19-32: The &lt;code&gt;DeriveInput&lt;/code&gt; instance we get when parsing the code that has the macro&amp;rsquo;s attribute in Listing 19-30</source>
          <target state="translated">清单19-32：解析清单19-30中具有宏属性的代码时得到的 &lt;code&gt;DeriveInput&lt;/code&gt; 实例</target>
        </trans-unit>
        <trans-unit id="4397782d319dbdc638cec0fd47d1fda0eee85db9" translate="yes" xml:space="preserve">
          <source>Listing 19-33: Implementing the &lt;code&gt;HelloMacro&lt;/code&gt; trait using the parsed Rust code</source>
          <target state="translated">清单19-33：使用已解析的Rust代码实现 &lt;code&gt;HelloMacro&lt;/code&gt; 特征</target>
        </trans-unit>
        <trans-unit id="d539ea03dc90a8cca36f3eccb659307c38fa618f" translate="yes" xml:space="preserve">
          <source>Listing 19-3: Dereferencing raw pointers within an &lt;code&gt;unsafe&lt;/code&gt; block</source>
          <target state="translated">清单19-3：在 &lt;code&gt;unsafe&lt;/code&gt; 块中取消引用原始指针</target>
        </trans-unit>
        <trans-unit id="e1edf730fefc0104cc30acf2b246856d97d9d073" translate="yes" xml:space="preserve">
          <source>Listing 19-4: Using the safe &lt;code&gt;split_at_mut&lt;/code&gt; function</source>
          <target state="translated">清单19-4：使用安全的 &lt;code&gt;split_at_mut&lt;/code&gt; 函数</target>
        </trans-unit>
        <trans-unit id="f23a70c40857b6360828ef033504db89b40caa91" translate="yes" xml:space="preserve">
          <source>Listing 19-5: An attempted implementation of &lt;code&gt;split_at_mut&lt;/code&gt; using only safe Rust</source>
          <target state="translated">清单19-5：仅使用安全Rust 的 &lt;code&gt;split_at_mut&lt;/code&gt; 的尝试实现</target>
        </trans-unit>
        <trans-unit id="b16487162d78fe10005b7a33219b8cdbf681490c" translate="yes" xml:space="preserve">
          <source>Listing 19-6 shows how to use an &lt;code&gt;unsafe&lt;/code&gt; block, a raw pointer, and some calls to unsafe functions to make the implementation of &lt;code&gt;split_at_mut&lt;/code&gt; work.</source>
          <target state="translated">清单19-6显示了如何使用 &lt;code&gt;unsafe&lt;/code&gt; 块，原始指针以及对不安全的函数的一些调用来使 &lt;code&gt;split_at_mut&lt;/code&gt; 的实现正常工作。</target>
        </trans-unit>
        <trans-unit id="7c4d157139d16d96be67cd8da8488a5e81f88057" translate="yes" xml:space="preserve">
          <source>Listing 19-6: Using unsafe code in the implementation of the &lt;code&gt;split_at_mut&lt;/code&gt; function</source>
          <target state="translated">清单19-6：在 &lt;code&gt;split_at_mut&lt;/code&gt; 函数的实现中使用不安全的代码</target>
        </trans-unit>
        <trans-unit id="64cec9a7a8da122e95db8329b6350a018c6c3b45" translate="yes" xml:space="preserve">
          <source>Listing 19-7: Creating a slice from an arbitrary memory location</source>
          <target state="translated">清单19-7:从一个任意的内存位置创建一个分片。</target>
        </trans-unit>
        <trans-unit id="b7c3d4646ff2dd9b36dc16b78f39d822eb6a30ba" translate="yes" xml:space="preserve">
          <source>Listing 19-8 demonstrates how to set up an integration with the &lt;code&gt;abs&lt;/code&gt; function from the C standard library. Functions declared within &lt;code&gt;extern&lt;/code&gt; blocks are always unsafe to call from Rust code. The reason is that other languages don&amp;rsquo;t enforce Rust&amp;rsquo;s rules and guarantees, and Rust can&amp;rsquo;t check them, so responsibility falls on the programmer to ensure safety.</source>
          <target state="translated">清单19-8演示了如何与C标准库中的 &lt;code&gt;abs&lt;/code&gt; 函数建立集成。在 &lt;code&gt;extern&lt;/code&gt; 块中声明的函数始终不安全，无法从Rust代码进行调用。原因是其他语言不执行Rust的规则和保证，Rust无法检查它们，因此程序员有责任确保安全。</target>
        </trans-unit>
        <trans-unit id="1d7de98a6e48ac42520eafd23cc5b99e287c6f4c" translate="yes" xml:space="preserve">
          <source>Listing 19-8: Declaring and calling an &lt;code&gt;extern&lt;/code&gt; function defined in another language</source>
          <target state="translated">清单19-8：声明和调用用另一种语言定义的 &lt;code&gt;extern&lt;/code&gt; 函数</target>
        </trans-unit>
        <trans-unit id="02f5f37df24f5c7f8252fdc4fd720c05520b5ccb" translate="yes" xml:space="preserve">
          <source>Listing 19-9: Defining and using an immutable static variable</source>
          <target state="translated">清单19-9:定义和使用不可变的静态变量</target>
        </trans-unit>
        <trans-unit id="906850d60d2bfc7a434b9df477636efeaef160de" translate="yes" xml:space="preserve">
          <source>Listing 2-1: Code that gets a guess from the user and prints it</source>
          <target state="translated">清单2-1:从用户那里得到一个猜测并打印出来的代码。</target>
        </trans-unit>
        <trans-unit id="e55456b745b2d799b62d95f492ba0fa4228d6a0d" translate="yes" xml:space="preserve">
          <source>Listing 2-2: The output from running &lt;code&gt;cargo build&lt;/code&gt; after adding the rand crate as a dependency</source>
          <target state="translated">清单2-2：将rand crate添加为依赖项后，运行 &lt;code&gt;cargo build&lt;/code&gt; 的输出</target>
        </trans-unit>
        <trans-unit id="a5914c0d7edb00b8b1ca144c272f874cd675df48" translate="yes" xml:space="preserve">
          <source>Listing 2-3: Adding code to generate a random number</source>
          <target state="translated">清单2-3:添加代码生成一个随机数。</target>
        </trans-unit>
        <trans-unit id="af8d17e9229f2c43969b2a69094d2f3e5fe3e655" translate="yes" xml:space="preserve">
          <source>Listing 2-4: Handling the possible return values of comparing two numbers</source>
          <target state="translated">清单2-4:处理比较两个数字的可能返回值。</target>
        </trans-unit>
        <trans-unit id="33a15234f088792400d37a594c696c9143e6c6ec" translate="yes" xml:space="preserve">
          <source>Listing 2-5: Ignoring a non-number guess and asking for another guess instead of crashing the program</source>
          <target state="translated">清单2-5:忽略一个非数字的猜测,并要求另一个猜测,而不是让程序崩溃。</target>
        </trans-unit>
        <trans-unit id="0d0918b00c7ec6bb184545ca63e60fa4939bef0d" translate="yes" xml:space="preserve">
          <source>Listing 2-6: Complete guessing game code</source>
          <target state="translated">清单2-6:完整的猜谜游戏代码</target>
        </trans-unit>
        <trans-unit id="6186619545c6ee347071e7ca7d304239cefd9d87" translate="yes" xml:space="preserve">
          <source>Listing 20-10: Simulating a slow request by recognizing &lt;em&gt;/sleep&lt;/em&gt; and sleeping for 5 seconds</source>
          <target state="translated">清单20-10：通过识别&lt;em&gt;/ sleep&lt;/em&gt;和休眠5秒来模拟一个缓慢的请求</target>
        </trans-unit>
        <trans-unit id="c77c5f9f8216534967e6aa65016f2ce1e522d44b" translate="yes" xml:space="preserve">
          <source>Listing 20-11: Spawning a new thread for each stream</source>
          <target state="translated">清单20-11:为每个流生成一个新线程。</target>
        </trans-unit>
        <trans-unit id="490b74dd78fbac67e3686c02aa9503e4dfb82b08" translate="yes" xml:space="preserve">
          <source>Listing 20-12: Our ideal &lt;code&gt;ThreadPool&lt;/code&gt; interface</source>
          <target state="translated">清单20-12：我们理想的 &lt;code&gt;ThreadPool&lt;/code&gt; 接口</target>
        </trans-unit>
        <trans-unit id="2522ba33dbd20be373e69103631f87861291c162" translate="yes" xml:space="preserve">
          <source>Listing 20-13: Implementing &lt;code&gt;ThreadPool::new&lt;/code&gt; to panic if &lt;code&gt;size&lt;/code&gt; is zero</source>
          <target state="translated">清单20-13：如果 &lt;code&gt;size&lt;/code&gt; 为零，则使 &lt;code&gt;ThreadPool::new&lt;/code&gt; 恐慌</target>
        </trans-unit>
        <trans-unit id="17f32c438999cbe2243fdcfe5e366cb33ba2affa" translate="yes" xml:space="preserve">
          <source>Listing 20-14: Creating a vector for &lt;code&gt;ThreadPool&lt;/code&gt; to hold the threads</source>
          <target state="translated">清单20-14：为 &lt;code&gt;ThreadPool&lt;/code&gt; 创建一个向量来保存线程</target>
        </trans-unit>
        <trans-unit id="9da4f1d3e6c1f786010f397f2fd75fddc7491385" translate="yes" xml:space="preserve">
          <source>Listing 20-15: Modifying &lt;code&gt;ThreadPool&lt;/code&gt; to hold &lt;code&gt;Worker&lt;/code&gt; instances instead of holding threads directly</source>
          <target state="translated">清单20-15：修改 &lt;code&gt;ThreadPool&lt;/code&gt; 以保存 &lt;code&gt;Worker&lt;/code&gt; 实例，而不是直接保存线程</target>
        </trans-unit>
        <trans-unit id="56fbc0b9cc0275a64d6a40c9a37ce081653cc6f5" translate="yes" xml:space="preserve">
          <source>Listing 20-16: Modifying &lt;code&gt;ThreadPool&lt;/code&gt; to store the sending end of a channel that sends &lt;code&gt;Job&lt;/code&gt; instances</source>
          <target state="translated">清单20-16：修改 &lt;code&gt;ThreadPool&lt;/code&gt; 以存储发送 &lt;code&gt;Job&lt;/code&gt; 实例的通道的发送端</target>
        </trans-unit>
        <trans-unit id="f85cb389f568fb1fa76f6154929625041a887ad1" translate="yes" xml:space="preserve">
          <source>Listing 20-17: Passing the receiving end of the channel to the workers</source>
          <target state="translated">清单20-17:将通道的接收端传给工人。</target>
        </trans-unit>
        <trans-unit id="d30a183ff11a61e9b38867b8a86d78ca2fa07d93" translate="yes" xml:space="preserve">
          <source>Listing 20-18: Sharing the receiving end of the channel among the workers using &lt;code&gt;Arc&lt;/code&gt; and &lt;code&gt;Mutex&lt;/code&gt;</source>
          <target state="translated">清单20-18：使用 &lt;code&gt;Arc&lt;/code&gt; 和 &lt;code&gt;Mutex&lt;/code&gt; 在工作人员之间共享通道的接收端</target>
        </trans-unit>
        <trans-unit id="841cf9bc324d23f260e6d9ec8f63c8e66b6e6aae" translate="yes" xml:space="preserve">
          <source>Listing 20-19: Creating a &lt;code&gt;Job&lt;/code&gt; type alias for a &lt;code&gt;Box&lt;/code&gt; that holds each closure and then sending the job down the channel</source>
          <target state="translated">清单20-19：为保存每个闭包的 &lt;code&gt;Box&lt;/code&gt; 创建 &lt;code&gt;Job&lt;/code&gt; 类型别名，然后将其发送到通道</target>
        </trans-unit>
        <trans-unit id="0a2d9c3b8202a9c489e5874aab92dcbb628c7914" translate="yes" xml:space="preserve">
          <source>Listing 20-1: Listening for incoming streams and printing a message when we receive a stream</source>
          <target state="translated">清单20-1:当我们收到一个流时,监听传入的流并打印一条消息。</target>
        </trans-unit>
        <trans-unit id="4d16d200911e1c27e67c19a6df63099563502faf" translate="yes" xml:space="preserve">
          <source>Listing 20-20: Receiving and executing the jobs in the worker&amp;rsquo;s thread</source>
          <target state="translated">清单20-20：在工作线程中接收和执行作业</target>
        </trans-unit>
        <trans-unit id="647644f5eafb20cf48cea22601269ed2b77605f4" translate="yes" xml:space="preserve">
          <source>Listing 20-21: Adding a new trait &lt;code&gt;FnBox&lt;/code&gt; to work around the current limitations of &lt;code&gt;Box&amp;lt;FnOnce()&amp;gt;&lt;/code&gt;</source>
          <target state="translated">清单20-21：添加新特征 &lt;code&gt;FnBox&lt;/code&gt; 来解决 &lt;code&gt;Box&amp;lt;FnOnce()&amp;gt;&lt;/code&gt; 当前的局限性</target>
        </trans-unit>
        <trans-unit id="b7ce8f7a4b9223ab75f3a0d79b7b0cfb48ad0809" translate="yes" xml:space="preserve">
          <source>Listing 20-21: An alternative implementation of &lt;code&gt;Worker::new&lt;/code&gt; using &lt;code&gt;while let&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9951af4e66c939c862100b93f3e377ad1bab764f" translate="yes" xml:space="preserve">
          <source>Listing 20-22: An alternative implementation of &lt;code&gt;Worker::new&lt;/code&gt; using &lt;code&gt;while let&lt;/code&gt;</source>
          <target state="translated">清单20-22：使用 &lt;code&gt;while let&lt;/code&gt; 的 &lt;code&gt;Worker::new&lt;/code&gt; 的替代实现</target>
        </trans-unit>
        <trans-unit id="2d09a00b2f6c7708a05aff5e7b9697cffa40d67f" translate="yes" xml:space="preserve">
          <source>Listing 20-22: Joining each thread when the thread pool goes out of scope</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a296253ebec40fe8302bfd2243313af4f8547a4e" translate="yes" xml:space="preserve">
          <source>Listing 20-23: Joining each thread when the thread pool goes out of scope</source>
          <target state="translated">清单20-23:当线程池超出范围时加入每个线程</target>
        </trans-unit>
        <trans-unit id="9b22686838aacbc9e57545b76a48f6eb54b3fbbe" translate="yes" xml:space="preserve">
          <source>Listing 20-23: Sending and receiving &lt;code&gt;Message&lt;/code&gt; values and exiting the loop if a &lt;code&gt;Worker&lt;/code&gt; receives &lt;code&gt;Message::Terminate&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ba4cb1a9d207e86986a91e29b5c0edb2efd0c3" translate="yes" xml:space="preserve">
          <source>Listing 20-24: Sending &lt;code&gt;Message::Terminate&lt;/code&gt; to the workers before calling &lt;code&gt;join&lt;/code&gt; on each worker thread</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ce0ae841f01e7178673adbbf0ad07461277ddc" translate="yes" xml:space="preserve">
          <source>Listing 20-24: Sending and receiving &lt;code&gt;Message&lt;/code&gt; values and exiting the loop if a &lt;code&gt;Worker&lt;/code&gt; receives &lt;code&gt;Message::Terminate&lt;/code&gt;</source>
          <target state="translated">清单20-24：发送和接收 &lt;code&gt;Message&lt;/code&gt; 值，如果 &lt;code&gt;Worker&lt;/code&gt; 收到 &lt;code&gt;Message::Terminate&lt;/code&gt; ，则退出循环</target>
        </trans-unit>
        <trans-unit id="29d2ea0bbc5319f33a55cd0b85d771dffd7474e4" translate="yes" xml:space="preserve">
          <source>Listing 20-25: Sending &lt;code&gt;Message::Terminate&lt;/code&gt; to the workers before calling &lt;code&gt;join&lt;/code&gt; on each worker thread</source>
          <target state="translated">清单20-25：在每个工作线程上调用 &lt;code&gt;join&lt;/code&gt; 之前，向工作线程发送 &lt;code&gt;Message::Terminate&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ae8cc5a7cf07b2270161c49e58dcfe19c9ee4304" translate="yes" xml:space="preserve">
          <source>Listing 20-25: Shut down the server after serving two requests by exiting the loop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e608ac3da55b751debf169a89c8e9a8691843148" translate="yes" xml:space="preserve">
          <source>Listing 20-26: Shut down the server after serving two requests by exiting the loop</source>
          <target state="translated">清单20-26:在服务两个请求后退出循环关闭服务器</target>
        </trans-unit>
        <trans-unit id="f173c615ede21211278d9807de835c93a5e1f4ea" translate="yes" xml:space="preserve">
          <source>Listing 20-2: Reading from the &lt;code&gt;TcpStream&lt;/code&gt; and printing the data</source>
          <target state="translated">清单20-2：从 &lt;code&gt;TcpStream&lt;/code&gt; 读取并打印数据</target>
        </trans-unit>
        <trans-unit id="fd05c1361038c612312e8cc1d37b42ca715be238" translate="yes" xml:space="preserve">
          <source>Listing 20-3: Writing a tiny successful HTTP response to the stream</source>
          <target state="translated">清单20-3:编写一个微小的成功的HTTP响应流</target>
        </trans-unit>
        <trans-unit id="a8a7e3303b2df74786cd8877ab67f397f5337c03" translate="yes" xml:space="preserve">
          <source>Listing 20-4: A sample HTML file to return in a response</source>
          <target state="translated">清单20-4:在响应中返回的HTML文件示例</target>
        </trans-unit>
        <trans-unit id="00ae38e218c5bb3f97a75cad8df12e9b0d020593" translate="yes" xml:space="preserve">
          <source>Listing 20-5: Sending the contents of &lt;em&gt;hello.html&lt;/em&gt; as the body of the response</source>
          <target state="translated">清单20-5：发送&lt;em&gt;hello.html&lt;/em&gt;的内容作为响应的主体</target>
        </trans-unit>
        <trans-unit id="9d1f02cb4b09980a87d79d0547c49358fc614eb0" translate="yes" xml:space="preserve">
          <source>Listing 20-6: Matching the request and handling requests to &lt;em&gt;/&lt;/em&gt; differently from other requests</source>
          <target state="translated">清单20-6：匹配请求和处理请求&lt;em&gt;/&lt;/em&gt;从其他请求不同</target>
        </trans-unit>
        <trans-unit id="f8348546992791302bf0d85900165079b1714256" translate="yes" xml:space="preserve">
          <source>Listing 20-7: Responding with status code 404 and an error page if anything other than &lt;em&gt;/&lt;/em&gt; was requested</source>
          <target state="translated">清单20-7：如果请求了&lt;em&gt;/&lt;/em&gt;以外的其他内容，则返回状态码404和错误页面</target>
        </trans-unit>
        <trans-unit id="b07ae72c083b1a899a2a424356f010f0e77e0f78" translate="yes" xml:space="preserve">
          <source>Listing 20-8: Sample content for the page to send back with any 404 response</source>
          <target state="translated">清单20-8:任何404响应的页面发回的内容样本。</target>
        </trans-unit>
        <trans-unit id="979c0bf09be8b693a0b7eb5bf1b313cf1df5527a" translate="yes" xml:space="preserve">
          <source>Listing 20-9: Refactoring the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; blocks to contain only the code that differs between the two cases</source>
          <target state="translated">清单20-9：重构 &lt;code&gt;if&lt;/code&gt; 和 &lt;code&gt;else&lt;/code&gt; 块，使其仅包含两种情况之间不同的代码</target>
        </trans-unit>
        <trans-unit id="9b9fceb9eb03a3f9c4e1d74cfa6029d7dcce46bb" translate="yes" xml:space="preserve">
          <source>Listing 3-1: A &lt;code&gt;main&lt;/code&gt; function declaration containing one statement</source>
          <target state="translated">清单3-1：包含一个语句的 &lt;code&gt;main&lt;/code&gt; 函数声明</target>
        </trans-unit>
        <trans-unit id="e6d53ab22ffb27dcb257a8700d46cbd5dfced9fc" translate="yes" xml:space="preserve">
          <source>Listing 3-2: Assigning the result of an &lt;code&gt;if&lt;/code&gt; expression to a variable</source>
          <target state="translated">清单3-2：将 &lt;code&gt;if&lt;/code&gt; 表达式的结果分配给变量</target>
        </trans-unit>
        <trans-unit id="ff679afd5d6d867cbcc39b449d2a998a25435cd2" translate="yes" xml:space="preserve">
          <source>Listing 3-3: Using a &lt;code&gt;while&lt;/code&gt; loop to run code while a condition holds true</source>
          <target state="translated">清单3-3：在条件成立的情况下使用 &lt;code&gt;while&lt;/code&gt; 循环运行代码</target>
        </trans-unit>
        <trans-unit id="583d2039afeb95cdf5c7e0b2a32879f9b935cc5f" translate="yes" xml:space="preserve">
          <source>Listing 3-4: Looping through each element of a collection using a &lt;code&gt;while&lt;/code&gt; loop</source>
          <target state="translated">清单3-4：使用 &lt;code&gt;while&lt;/code&gt; 循环遍历集合的每个元素</target>
        </trans-unit>
        <trans-unit id="87438bb574a616fffd251f60fd596f3c3d541ee3" translate="yes" xml:space="preserve">
          <source>Listing 3-5: Looping through each element of a collection using a &lt;code&gt;for&lt;/code&gt; loop</source>
          <target state="translated">清单3-5：使用 &lt;code&gt;for&lt;/code&gt; 循环遍历集合的每个元素</target>
        </trans-unit>
        <trans-unit id="071776e108222090fe7e34b6b12a0635af1ea613" translate="yes" xml:space="preserve">
          <source>Listing 4-1: A variable and the scope in which it is valid</source>
          <target state="translated">清单 4-1:变量和它的有效范围</target>
        </trans-unit>
        <trans-unit id="a8bd4a8ada8ca53b2cd329e28cf012af8595d26c" translate="yes" xml:space="preserve">
          <source>Listing 4-2: Assigning the integer value of variable &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt;</source>
          <target state="translated">清单4-2：分配变量的整数值 &lt;code&gt;x&lt;/code&gt; 到 &lt;code&gt;y&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f80135eeedb7d42bfb604d43634f10e56b9276d8" translate="yes" xml:space="preserve">
          <source>Listing 4-3: Functions with ownership and scope annotated</source>
          <target state="translated">清单4-3:带有所有权和范围注释的函数</target>
        </trans-unit>
        <trans-unit id="08743211367b36a2bf28bc72aee62ce3d8e0a427" translate="yes" xml:space="preserve">
          <source>Listing 4-4: Transferring ownership of return values</source>
          <target state="translated">清单4-4:转移返回值的所有权</target>
        </trans-unit>
        <trans-unit id="c4cdffa6571f231b7e6fd5e7bf3f5073aceb67af" translate="yes" xml:space="preserve">
          <source>Listing 4-5: Returning ownership of parameters</source>
          <target state="translated">清单4-5:返回参数的所有权</target>
        </trans-unit>
        <trans-unit id="3222eb0c315d3632f2a93aa2c946727b3f3aa187" translate="yes" xml:space="preserve">
          <source>Listing 4-6: Attempting to modify a borrowed value</source>
          <target state="translated">清单4-6:尝试修改借贷价值。</target>
        </trans-unit>
        <trans-unit id="e224cd6b255dc9146281f3ef7b7408c55d16c747" translate="yes" xml:space="preserve">
          <source>Listing 4-7: The &lt;code&gt;first_word&lt;/code&gt; function that returns a byte index value into the &lt;code&gt;String&lt;/code&gt; parameter</source>
          <target state="translated">清单4-7： &lt;code&gt;first_word&lt;/code&gt; 函数，该函数将字节索引值返回到 &lt;code&gt;String&lt;/code&gt; 参数中</target>
        </trans-unit>
        <trans-unit id="5d0609b7dcfd67002e143a43f1ddecb06483b85d" translate="yes" xml:space="preserve">
          <source>Listing 4-8: Storing the result from calling the &lt;code&gt;first_word&lt;/code&gt; function and then changing the &lt;code&gt;String&lt;/code&gt; contents</source>
          <target state="translated">清单4-8：存储调用 &lt;code&gt;first_word&lt;/code&gt; 函数然后更改 &lt;code&gt;String&lt;/code&gt; 内容的结果</target>
        </trans-unit>
        <trans-unit id="87c1cb4aabafa6069efb32d5af61cd0fb08e6796" translate="yes" xml:space="preserve">
          <source>Listing 4-9: Improving the &lt;code&gt;first_word&lt;/code&gt; function by using a string slice for the type of the &lt;code&gt;s&lt;/code&gt; parameter</source>
          <target state="translated">清单4-9：通过使用字符串切片作为 &lt;code&gt;s&lt;/code&gt; 参数的类型来改进 &lt;code&gt;first_word&lt;/code&gt; 函数</target>
        </trans-unit>
        <trans-unit id="f5936c4459ffd7d02b56c5c0e59e5f7deb06c81b" translate="yes" xml:space="preserve">
          <source>Listing 5-10: Defining a &lt;code&gt;Rectangle&lt;/code&gt; struct</source>
          <target state="translated">清单5-10：定义 &lt;code&gt;Rectangle&lt;/code&gt; 结构</target>
        </trans-unit>
        <trans-unit id="215d7b48452bb1a7e4e29de9b63af2a7536d6502" translate="yes" xml:space="preserve">
          <source>Listing 5-11: Attempting to print a &lt;code&gt;Rectangle&lt;/code&gt; instance</source>
          <target state="translated">清单5-11：尝试打印一个 &lt;code&gt;Rectangle&lt;/code&gt; 实例</target>
        </trans-unit>
        <trans-unit id="51e4581a0a69246f469790078df639c28316484a" translate="yes" xml:space="preserve">
          <source>Listing 5-12: Adding the annotation to derive the &lt;code&gt;Debug&lt;/code&gt; trait and printing the &lt;code&gt;Rectangle&lt;/code&gt; instance using debug formatting</source>
          <target state="translated">清单5-12：添加注释以派生 &lt;code&gt;Debug&lt;/code&gt; 特性，并使用debug格式打印 &lt;code&gt;Rectangle&lt;/code&gt; 实例</target>
        </trans-unit>
        <trans-unit id="699bc91c771ab1aa757989a11761198687ddb028" translate="yes" xml:space="preserve">
          <source>Listing 5-13: Defining an &lt;code&gt;area&lt;/code&gt; method on the &lt;code&gt;Rectangle&lt;/code&gt; struct</source>
          <target state="translated">清单5-13：在 &lt;code&gt;Rectangle&lt;/code&gt; 结构上定义一个 &lt;code&gt;area&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="a7947d12bdeedd386158963338c53b8bc7ffe517" translate="yes" xml:space="preserve">
          <source>Listing 5-14: Using the as-yet-unwritten &lt;code&gt;can_hold&lt;/code&gt; method</source>
          <target state="translated">清单5-14：使用尚未 &lt;code&gt;can_hold&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="ac5804944047dd0d4d02603d3156bc632d3eb2b1" translate="yes" xml:space="preserve">
          <source>Listing 5-15: Implementing the &lt;code&gt;can_hold&lt;/code&gt; method on &lt;code&gt;Rectangle&lt;/code&gt; that takes another &lt;code&gt;Rectangle&lt;/code&gt; instance as a parameter</source>
          <target state="translated">清单5-15：在 &lt;code&gt;Rectangle&lt;/code&gt; 上实现 &lt;code&gt;can_hold&lt;/code&gt; 方法，该方法将另一个 &lt;code&gt;Rectangle&lt;/code&gt; 实例作为参数</target>
        </trans-unit>
        <trans-unit id="c33d8fdde14f54cb5966c1287889cdff4840627d" translate="yes" xml:space="preserve">
          <source>Listing 5-16: Rewriting Listing 5-15 using multiple &lt;code&gt;impl&lt;/code&gt; blocks</source>
          <target state="translated">清单5-16：使用多个 &lt;code&gt;impl&lt;/code&gt; 块重写清单5-15</target>
        </trans-unit>
        <trans-unit id="0d520975db988eb4fce4d70d69c7071a6ef03266" translate="yes" xml:space="preserve">
          <source>Listing 5-1: A &lt;code&gt;User&lt;/code&gt; struct definition</source>
          <target state="translated">清单5-1： &lt;code&gt;User&lt;/code&gt; 结构定义</target>
        </trans-unit>
        <trans-unit id="8977673d81d2f7d288e8671e5db4e29f849d9ecf" translate="yes" xml:space="preserve">
          <source>Listing 5-2: Creating an instance of the &lt;code&gt;User&lt;/code&gt; struct</source>
          <target state="translated">清单5-2：创建 &lt;code&gt;User&lt;/code&gt; 结构的实例</target>
        </trans-unit>
        <trans-unit id="1f41e38c696b4c7289ac53c56e434aedcaeb6f66" translate="yes" xml:space="preserve">
          <source>Listing 5-3: Changing the value in the &lt;code&gt;email&lt;/code&gt; field of a &lt;code&gt;User&lt;/code&gt; instance</source>
          <target state="translated">清单5-3：更改 &lt;code&gt;User&lt;/code&gt; 实例的 &lt;code&gt;email&lt;/code&gt; 字段中的值</target>
        </trans-unit>
        <trans-unit id="db94d7ba29205268f6081fc57937619cd38d7b59" translate="yes" xml:space="preserve">
          <source>Listing 5-4 shows a &lt;code&gt;build_user&lt;/code&gt; function that returns a &lt;code&gt;User&lt;/code&gt; instance with the given email and username. The &lt;code&gt;active&lt;/code&gt; field gets the value of &lt;code&gt;true&lt;/code&gt;, and the &lt;code&gt;sign_in_count&lt;/code&gt; gets a value of &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">清单5-4显示了一个 &lt;code&gt;build_user&lt;/code&gt; 函数，该函数返回具有给定电子邮件和用户名的 &lt;code&gt;User&lt;/code&gt; 实例。该 &lt;code&gt;active&lt;/code&gt; 场得到的值 &lt;code&gt;true&lt;/code&gt; ，并且 &lt;code&gt;sign_in_count&lt;/code&gt; 得到的值 &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6180049bbfd730536060167de16372ef8ac3e4b9" translate="yes" xml:space="preserve">
          <source>Listing 5-4: A &lt;code&gt;build_user&lt;/code&gt; function that takes an email and username and returns a &lt;code&gt;User&lt;/code&gt; instance</source>
          <target state="translated">清单5-4：一个 &lt;code&gt;build_user&lt;/code&gt; 函数，该函数接受电子邮件和用户名并返回一个 &lt;code&gt;User&lt;/code&gt; 实例</target>
        </trans-unit>
        <trans-unit id="34728d882e237dc7414c13bed692d3b4929c4000" translate="yes" xml:space="preserve">
          <source>Listing 5-5: A &lt;code&gt;build_user&lt;/code&gt; function that uses field init shorthand because the &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;username&lt;/code&gt; parameters have the same name as struct fields</source>
          <target state="translated">清单5-5： &lt;code&gt;build_user&lt;/code&gt; 函数使用字段init的简写形式，因为 &lt;code&gt;email&lt;/code&gt; 和 &lt;code&gt;username&lt;/code&gt; 参数的名称与struct字段的名称相同</target>
        </trans-unit>
        <trans-unit id="ec811ef73f249a9f5effaa4a387e2b4034ee1f33" translate="yes" xml:space="preserve">
          <source>Listing 5-6: Creating a new &lt;code&gt;User&lt;/code&gt; instance using some of the values from &lt;code&gt;user1&lt;/code&gt;</source>
          <target state="translated">清单5-6：使用 &lt;code&gt;user1&lt;/code&gt; 中的某些值创建一个新的 &lt;code&gt;User&lt;/code&gt; 实例</target>
        </trans-unit>
        <trans-unit id="b1042745496de77683494947cb9ddb8ceed34b79" translate="yes" xml:space="preserve">
          <source>Listing 5-7: Using struct update syntax to set new &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;username&lt;/code&gt; values for a &lt;code&gt;User&lt;/code&gt; instance but use the rest of the values from the fields of the instance in the &lt;code&gt;user1&lt;/code&gt; variable</source>
          <target state="translated">清单5-7：使用结构更新语法为 &lt;code&gt;User&lt;/code&gt; 实例设置新的 &lt;code&gt;email&lt;/code&gt; 和 &lt;code&gt;username&lt;/code&gt; 值，但使用 &lt;code&gt;user1&lt;/code&gt; 变量中实例字段的其余值</target>
        </trans-unit>
        <trans-unit id="e14121427e21bb563614dab69325b3429a192108" translate="yes" xml:space="preserve">
          <source>Listing 5-8: Calculating the area of a rectangle specified by separate width and height variables</source>
          <target state="translated">清单 5-8:计算由单独的宽度和高度变量指定的矩形的面积。</target>
        </trans-unit>
        <trans-unit id="7bbfc498e81af47ae5c6d73043fae00ce626556b" translate="yes" xml:space="preserve">
          <source>Listing 5-9 shows another version of our program that uses tuples.</source>
          <target state="translated">清单5-9显示了我们程序的另一个使用元组的版本。</target>
        </trans-unit>
        <trans-unit id="6a953b763de90df2dde4e24bf54ab976b248c596" translate="yes" xml:space="preserve">
          <source>Listing 5-9: Specifying the width and height of the rectangle with a tuple</source>
          <target state="translated">清单5-9:用元组指定矩形的宽度和高度。</target>
        </trans-unit>
        <trans-unit id="317a48edaf28b6e0bc990dd7fdac683d53540196" translate="yes" xml:space="preserve">
          <source>Listing 6-1: Storing the data and &lt;code&gt;IpAddrKind&lt;/code&gt; variant of an IP address using a &lt;code&gt;struct&lt;/code&gt;</source>
          <target state="translated">清单6-1：使用 &lt;code&gt;struct&lt;/code&gt; 存储IP地址的数据和 &lt;code&gt;IpAddrKind&lt;/code&gt; 变体</target>
        </trans-unit>
        <trans-unit id="1601efc6142f63b762ff62527eea307503181b6a" translate="yes" xml:space="preserve">
          <source>Listing 6-2: A &lt;code&gt;Message&lt;/code&gt; enum whose variants each store different amounts and types of values</source>
          <target state="translated">清单6-2：一个 &lt;code&gt;Message&lt;/code&gt; 枚举，其变体每个都存储不同数量和类型的值</target>
        </trans-unit>
        <trans-unit id="bb2eab7c4a0535ef9e635c657b2617ba75b207b2" translate="yes" xml:space="preserve">
          <source>Listing 6-3: An enum and a &lt;code&gt;match&lt;/code&gt; expression that has the variants of the enum as its patterns</source>
          <target state="translated">清单6-3：一个枚举和一个 &lt;code&gt;match&lt;/code&gt; 表达式，以该枚举的变体作为其模式</target>
        </trans-unit>
        <trans-unit id="d6c517233a50d5aa0d34c931713369f59c96a142" translate="yes" xml:space="preserve">
          <source>Listing 6-4: A &lt;code&gt;Coin&lt;/code&gt; enum in which the &lt;code&gt;Quarter&lt;/code&gt; variant also holds a &lt;code&gt;UsState&lt;/code&gt; value</source>
          <target state="translated">清单6-4：一个 &lt;code&gt;Coin&lt;/code&gt; 枚举，其中 &lt;code&gt;Quarter&lt;/code&gt; 变体也包含 &lt;code&gt;UsState&lt;/code&gt; 值</target>
        </trans-unit>
        <trans-unit id="366c8a5cb8f6569790b9502993e020f80e58e7d9" translate="yes" xml:space="preserve">
          <source>Listing 6-5: A function that uses a &lt;code&gt;match&lt;/code&gt; expression on an &lt;code&gt;Option&amp;lt;i32&amp;gt;&lt;/code&gt;</source>
          <target state="translated">清单6-5：在 &lt;code&gt;Option&amp;lt;i32&amp;gt;&lt;/code&gt; 上使用 &lt;code&gt;match&lt;/code&gt; 表达式的函数</target>
        </trans-unit>
        <trans-unit id="b44856bc0b2ade67a9a9034ba41c6088eb8b5876" translate="yes" xml:space="preserve">
          <source>Listing 6-6: A &lt;code&gt;match&lt;/code&gt; that only cares about executing code when the value is &lt;code&gt;Some(3)&lt;/code&gt;</source>
          <target state="translated">清单6-6：仅当值是 &lt;code&gt;Some(3)&lt;/code&gt; 时才关心执行代码的 &lt;code&gt;match&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9aea56a1642523d4f586445bbbe1e6df04bda515" translate="yes" xml:space="preserve">
          <source>Listing 7-10: Designating an enum as public makes all its variants public</source>
          <target state="translated">清单 7-10:将一个枚举指定为公共的,它的所有变体都是公共的。</target>
        </trans-unit>
        <trans-unit id="bf59002e067b4260f78026ae1cbff2f4c945bcd3" translate="yes" xml:space="preserve">
          <source>Listing 7-11: Bringing a module into scope with &lt;code&gt;use&lt;/code&gt;</source>
          <target state="translated">代码清单7-11：将模块纳入 &lt;code&gt;use&lt;/code&gt; 范围</target>
        </trans-unit>
        <trans-unit id="627f0fb141903559b8c35dc9a30c45aa787531ae" translate="yes" xml:space="preserve">
          <source>Listing 7-12: Bringing a module into scope with &lt;code&gt;use&lt;/code&gt; and a relative path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eaa640be3385f0ca9c0fa9e7ba534043bef56b3" translate="yes" xml:space="preserve">
          <source>Listing 7-12: Bringing a module into scope with &lt;code&gt;use&lt;/code&gt; and a relative path starting with &lt;code&gt;self&lt;/code&gt;</source>
          <target state="translated">清单7-12：将模块放入 &lt;code&gt;use&lt;/code&gt; 范围，并以 &lt;code&gt;self&lt;/code&gt; 开头的相对路径</target>
        </trans-unit>
        <trans-unit id="7307f72b192d3253733cf7ac65bc967e5201e698" translate="yes" xml:space="preserve">
          <source>Listing 7-13: Bringing the &lt;code&gt;add_to_waitlist&lt;/code&gt; function into scope with &lt;code&gt;use&lt;/code&gt;, which is unidiomatic</source>
          <target state="translated">清单7-13： &lt;code&gt;use&lt;/code&gt; 将 &lt;code&gt;add_to_waitlist&lt;/code&gt; 函数引入作用域，这很简单</target>
        </trans-unit>
        <trans-unit id="4bfe10f5f56827d0c30e6d426efc295cb82f3011" translate="yes" xml:space="preserve">
          <source>Listing 7-14: Bringing &lt;code&gt;HashMap&lt;/code&gt; into scope in an idiomatic way</source>
          <target state="translated">清单7-14：以惯用的方式将 &lt;code&gt;HashMap&lt;/code&gt; 纳入范围</target>
        </trans-unit>
        <trans-unit id="13cc4e98f442cfec3a674fc14b744bd81731e983" translate="yes" xml:space="preserve">
          <source>Listing 7-15: Bringing two types with the same name into the same scope requires using their parent modules.</source>
          <target state="translated">清单 7-15.将两个同名的类型带入同一作用域需要使用它们的父模块。将两个同名的类型带入同一个作用域,需要使用它们的父模块。</target>
        </trans-unit>
        <trans-unit id="84d695a06193ab052dbc08a9625b8eec61fc744f" translate="yes" xml:space="preserve">
          <source>Listing 7-16: Renaming a type when it&amp;rsquo;s brought into scope with the &lt;code&gt;as&lt;/code&gt; keyword</source>
          <target state="translated">清单7-16：使用 &lt;code&gt;as&lt;/code&gt; 关键字将类型带入范围时重命名</target>
        </trans-unit>
        <trans-unit id="b9a4845143b70c35aeb28053a3eeca0d2c48207c" translate="yes" xml:space="preserve">
          <source>Listing 7-17 shows the code in Listing 7-11 with &lt;code&gt;use&lt;/code&gt; in the root module changed to &lt;code&gt;pub use&lt;/code&gt;.</source>
          <target state="translated">清单7-17所示的代码清单7-11与 &lt;code&gt;use&lt;/code&gt; 根模块中变更为 &lt;code&gt;pub use&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5775bbe7f173f5b092d3b5595e5501b634454927" translate="yes" xml:space="preserve">
          <source>Listing 7-17: Making a name available for any code to use from a new scope with &lt;code&gt;pub use&lt;/code&gt;</source>
          <target state="translated">清单7-17：通过 &lt;code&gt;pub use&lt;/code&gt; 在新作用域中使名称可用于任何代码</target>
        </trans-unit>
        <trans-unit id="912681010ae055ad4a4e14893b49ef9e67bf7a57" translate="yes" xml:space="preserve">
          <source>Listing 7-18: Specifying a nested path to bring multiple items with the same prefix into scope</source>
          <target state="translated">清单 7-18:指定一个嵌套路径,将具有相同前缀的多个项目纳入作用域中</target>
        </trans-unit>
        <trans-unit id="7929ee4086c93140005baff67b15092af266a6f9" translate="yes" xml:space="preserve">
          <source>Listing 7-19: Two &lt;code&gt;use&lt;/code&gt; statements where one is a subpath of the other</source>
          <target state="translated">清单7-19：两个 &lt;code&gt;use&lt;/code&gt; 语句，其中一个是另一个的子路径</target>
        </trans-unit>
        <trans-unit id="a2aaaa4b01d1723ea36359ddbffb4df019af229b" translate="yes" xml:space="preserve">
          <source>Listing 7-1: A &lt;code&gt;front_of_house&lt;/code&gt; module containing other modules that then contain functions</source>
          <target state="translated">清单7-1：一个 &lt;code&gt;front_of_house&lt;/code&gt; 模块，其中包含随后包含功能的其他模块</target>
        </trans-unit>
        <trans-unit id="7ace7d42180fea41417a89f31ff66a7a735c654d" translate="yes" xml:space="preserve">
          <source>Listing 7-2 shows the module tree for the structure in Listing 7-1.</source>
          <target state="translated">清单7-2显示了清单7-1中结构的模块树。</target>
        </trans-unit>
        <trans-unit id="5cce3b1fe3cef4127713826e0a1511402930e99e" translate="yes" xml:space="preserve">
          <source>Listing 7-20: Combining the paths in Listing 7-19 into one &lt;code&gt;use&lt;/code&gt; statement</source>
          <target state="translated">清单7-20：将清单7-19中的路径合并为一个 &lt;code&gt;use&lt;/code&gt; 语句</target>
        </trans-unit>
        <trans-unit id="0657fcf2cf161292e1ede5fad919e1df2f0ae319" translate="yes" xml:space="preserve">
          <source>Listing 7-21: Declaring the &lt;code&gt;front_of_house&lt;/code&gt; module whose body will be in &lt;em&gt;src/front_of_house.rs&lt;/em&gt;</source>
          <target state="translated">清单7-21：声明其主体将在&lt;em&gt;src / front_of_house.rs中&lt;/em&gt;的 &lt;code&gt;front_of_house&lt;/code&gt; 模块&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="12fed27a189eb7e953d8431926a31688a62084bf" translate="yes" xml:space="preserve">
          <source>Listing 7-22: Definitions inside the &lt;code&gt;front_of_house&lt;/code&gt; module in &lt;em&gt;src/front_of_house.rs&lt;/em&gt;</source>
          <target state="translated">清单7-22：&lt;em&gt;src / front_of_house.rs中&lt;/em&gt;的 &lt;code&gt;front_of_house&lt;/code&gt; 模块内部的定义&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c69834f077cc0ac84e532ef8edf36827562c8532" translate="yes" xml:space="preserve">
          <source>Listing 7-2: The module tree for the code in Listing 7-1</source>
          <target state="translated">清单7-2:清单7-1中代码的模块树。</target>
        </trans-unit>
        <trans-unit id="17c05eb6de82b1aab0786252e0e077ec97ff008c" translate="yes" xml:space="preserve">
          <source>Listing 7-3: Calling the &lt;code&gt;add_to_waitlist&lt;/code&gt; function using absolute and relative paths</source>
          <target state="translated">清单7-3：使用绝对路径和相对路径调用 &lt;code&gt;add_to_waitlist&lt;/code&gt; 函数</target>
        </trans-unit>
        <trans-unit id="138953296933de5b725582f9130d0b608bf9580f" translate="yes" xml:space="preserve">
          <source>Listing 7-4: Compiler errors from building the code in Listing 7-3</source>
          <target state="translated">清单7-4:在清单7-3中构建代码时的编译器错误。</target>
        </trans-unit>
        <trans-unit id="5358874765e3618db092d71798863b6af357d074" translate="yes" xml:space="preserve">
          <source>Listing 7-5: Declaring the &lt;code&gt;hosting&lt;/code&gt; module as &lt;code&gt;pub&lt;/code&gt; to use it from &lt;code&gt;eat_at_restaurant&lt;/code&gt;</source>
          <target state="translated">清单7-5：从 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 中将 &lt;code&gt;hosting&lt;/code&gt; 模块声明为 &lt;code&gt;pub&lt;/code&gt; 以使用它</target>
        </trans-unit>
        <trans-unit id="dbd4236a7438fe70ec1b7611b01adfc75ff00c6f" translate="yes" xml:space="preserve">
          <source>Listing 7-6: Compiler errors from building the code in Listing 7-5</source>
          <target state="translated">清单7-6:在清单7-5中构建代码的编译器错误。</target>
        </trans-unit>
        <trans-unit id="c3941587d9eaf9be7f1ce3c3583d7701dc52a95d" translate="yes" xml:space="preserve">
          <source>Listing 7-7: Adding the &lt;code&gt;pub&lt;/code&gt; keyword to &lt;code&gt;mod hosting&lt;/code&gt; and &lt;code&gt;fn add_to_waitlist&lt;/code&gt; lets us call the function from &lt;code&gt;eat_at_restaurant&lt;/code&gt;</source>
          <target state="translated">清单7-7：将 &lt;code&gt;pub&lt;/code&gt; 关键字添加到 &lt;code&gt;mod hosting&lt;/code&gt; 和 &lt;code&gt;fn add_to_waitlist&lt;/code&gt; 中,使我们可以从 &lt;code&gt;eat_at_restaurant&lt;/code&gt; 调用该函数</target>
        </trans-unit>
        <trans-unit id="a76fe093faad5f27e1a067c78c0aafcf4b039312" translate="yes" xml:space="preserve">
          <source>Listing 7-8: Calling a function using a relative path starting with &lt;code&gt;super&lt;/code&gt;</source>
          <target state="translated">清单7-8：使用以 &lt;code&gt;super&lt;/code&gt; 开头的相对路径调用函数</target>
        </trans-unit>
        <trans-unit id="26a8780dbfd1610ed031bd14769f19fc17e857a7" translate="yes" xml:space="preserve">
          <source>Listing 7-9: A struct with some public fields and some private fields</source>
          <target state="translated">清单7-9:一个包含一些公共字段和一些私有字段的结构。</target>
        </trans-unit>
        <trans-unit id="ec9e6adb30859e7e4f29693403f451b5e7def42d" translate="yes" xml:space="preserve">
          <source>Listing 8-10: Defining an &lt;code&gt;enum&lt;/code&gt; to store values of different types in one vector</source>
          <target state="translated">清单8-10：定义一个 &lt;code&gt;enum&lt;/code&gt; 以在一个向量中存储不同类型的值</target>
        </trans-unit>
        <trans-unit id="cea93b472282b28767ac501d12597afbe6576f40" translate="yes" xml:space="preserve">
          <source>Listing 8-11: Creating a new, empty &lt;code&gt;String&lt;/code&gt;</source>
          <target state="translated">清单8-11：创建一个新的空 &lt;code&gt;String&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="449bcdecf538f70bac98718626559a9dec686219" translate="yes" xml:space="preserve">
          <source>Listing 8-12: Using the &lt;code&gt;to_string&lt;/code&gt; method to create a &lt;code&gt;String&lt;/code&gt; from a string literal</source>
          <target state="translated">清单8-12：使用 &lt;code&gt;to_string&lt;/code&gt; 方法来创建一个 &lt;code&gt;String&lt;/code&gt; 从一个字符串文字</target>
        </trans-unit>
        <trans-unit id="525ec57ebd9d64b742269ef80a5a9e1a1645f7b6" translate="yes" xml:space="preserve">
          <source>Listing 8-13: Using the &lt;code&gt;String::from&lt;/code&gt; function to create a &lt;code&gt;String&lt;/code&gt; from a string literal</source>
          <target state="translated">清单8-13：使用 &lt;code&gt;String::from&lt;/code&gt; 函数创建一个 &lt;code&gt;String&lt;/code&gt; 从一个字符串文字</target>
        </trans-unit>
        <trans-unit id="d906213ccce95be9469d5e7e1272b3c261eb636e" translate="yes" xml:space="preserve">
          <source>Listing 8-14: Storing greetings in different languages in strings</source>
          <target state="translated">清单8-14:将不同语言的问候语存储在字符串中。</target>
        </trans-unit>
        <trans-unit id="4e16d57b32c6bb58e6e98758f0d5544954c88fbe" translate="yes" xml:space="preserve">
          <source>Listing 8-15: Appending a string slice to a &lt;code&gt;String&lt;/code&gt; using the &lt;code&gt;push_str&lt;/code&gt; method</source>
          <target state="translated">清单8-15：使用 &lt;code&gt;push_str&lt;/code&gt; 方法将字符串切片附加到 &lt;code&gt;String&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="895983d0f0dfd6b316691d0a283fc6f26b14574d" translate="yes" xml:space="preserve">
          <source>Listing 8-16: Using a string slice after appending its contents to a &lt;code&gt;String&lt;/code&gt;</source>
          <target state="translated">清单8-16：追加其内容的使用后的字符串切片 &lt;code&gt;String&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="be1c3cc71d267147b47e57349e732c62e6e14554" translate="yes" xml:space="preserve">
          <source>Listing 8-17: Adding one character to a &lt;code&gt;String&lt;/code&gt; value using &lt;code&gt;push&lt;/code&gt;</source>
          <target state="translated">清单8-17：使用 &lt;code&gt;push&lt;/code&gt; 向 &lt;code&gt;String&lt;/code&gt; 值添加一个字符</target>
        </trans-unit>
        <trans-unit id="8e49cdf5a7dd6bf63cd0813321de49b8b65881bd" translate="yes" xml:space="preserve">
          <source>Listing 8-18: Using the &lt;code&gt;+&lt;/code&gt; operator to combine two &lt;code&gt;String&lt;/code&gt; values into a new &lt;code&gt;String&lt;/code&gt; value</source>
          <target state="translated">清单8-18：使用 &lt;code&gt;+&lt;/code&gt; 运算符将两个 &lt;code&gt;String&lt;/code&gt; 值组合成一个新的 &lt;code&gt;String&lt;/code&gt; 值</target>
        </trans-unit>
        <trans-unit id="5330837200303e59f08e75f294793b7ee402fe39" translate="yes" xml:space="preserve">
          <source>Listing 8-19: Attempting to use indexing syntax with a String</source>
          <target state="translated">清单 8-19:尝试使用String的索引语法。</target>
        </trans-unit>
        <trans-unit id="223eba8ee062db2b78f2b0de95ae46f68365d0b3" translate="yes" xml:space="preserve">
          <source>Listing 8-1: Creating a new, empty vector to hold values of type &lt;code&gt;i32&lt;/code&gt;</source>
          <target state="translated">清单8-1：创建一个新的空向量来保存 &lt;code&gt;i32&lt;/code&gt; 类型的值</target>
        </trans-unit>
        <trans-unit id="74238a9658332d19668b2827615b25fb5c8271c5" translate="yes" xml:space="preserve">
          <source>Listing 8-20: Creating a new hash map and inserting some keys and values</source>
          <target state="translated">清单 8-20:创建一个新的哈希图并插入一些键和值。</target>
        </trans-unit>
        <trans-unit id="05be5b643eed350dd5cafe3fdd6536c472f47ed7" translate="yes" xml:space="preserve">
          <source>Listing 8-21: Creating a hash map from a list of teams and a list of scores</source>
          <target state="translated">清单 8-21:从队伍和分数列表中创建一个哈希图。</target>
        </trans-unit>
        <trans-unit id="c1972681fe611d0dc8b4a05a054a71a52a976fa0" translate="yes" xml:space="preserve">
          <source>Listing 8-22: Showing that keys and values are owned by the hash map once they&amp;rsquo;re inserted</source>
          <target state="translated">清单8-22：显示键和值一旦插入就由哈希映射拥有</target>
        </trans-unit>
        <trans-unit id="e3917d0559c741a7086f2a76463784d8190476d3" translate="yes" xml:space="preserve">
          <source>Listing 8-23: Accessing the score for the Blue team stored in the hash map</source>
          <target state="translated">清单 8-23:访问存储在哈希图中的蓝队的得分。</target>
        </trans-unit>
        <trans-unit id="2c2c2fb6f8789b4a667ac47de037219e5bfa607d" translate="yes" xml:space="preserve">
          <source>Listing 8-24: Replacing a value stored with a particular key</source>
          <target state="translated">清单 8-24:用一个特定的键替换一个存储的值</target>
        </trans-unit>
        <trans-unit id="da51f9790954bb7ba88a08baf3bbfb3c719c031b" translate="yes" xml:space="preserve">
          <source>Listing 8-25: Using the &lt;code&gt;entry&lt;/code&gt; method to only insert if the key does not already have a value</source>
          <target state="translated">清单8-25：仅在键没有值的情况下，使用 &lt;code&gt;entry&lt;/code&gt; 方法插入</target>
        </trans-unit>
        <trans-unit id="0728ab93b8e476a6cb26b8c39bda73e6af7fad94" translate="yes" xml:space="preserve">
          <source>Listing 8-26: Counting occurrences of words using a hash map that stores words and counts</source>
          <target state="translated">清单 8-26:使用存储单词和计数的哈希图来计算单词的出现次数</target>
        </trans-unit>
        <trans-unit id="5b801284224f3b692ce8aba962be2604afe8af86" translate="yes" xml:space="preserve">
          <source>Listing 8-2: Creating a new vector containing values</source>
          <target state="translated">清单 8-2:创建一个包含值的新向量</target>
        </trans-unit>
        <trans-unit id="5ec25985edb7d257137523f2e85542597e022b7c" translate="yes" xml:space="preserve">
          <source>Listing 8-3: Using the &lt;code&gt;push&lt;/code&gt; method to add values to a vector</source>
          <target state="translated">清单8-3：使用 &lt;code&gt;push&lt;/code&gt; 方法向向量添加值</target>
        </trans-unit>
        <trans-unit id="156f483c8c709fefaaa433516c634cc9665e65bd" translate="yes" xml:space="preserve">
          <source>Listing 8-4: Showing where the vector and its elements are dropped</source>
          <target state="translated">清单8-4:显示向量及其元素被丢弃的位置。</target>
        </trans-unit>
        <trans-unit id="f15358ebeb06032f8545e418cd9bf9d9b52e722b" translate="yes" xml:space="preserve">
          <source>Listing 8-5 shows both methods of accessing a value in a vector, either with indexing syntax or the &lt;code&gt;get&lt;/code&gt; method.</source>
          <target state="translated">清单8-5展示了两种使用索引语法或 &lt;code&gt;get&lt;/code&gt; 方法访问向量中值的方法。</target>
        </trans-unit>
        <trans-unit id="475e3ef70b582308fcd81d0204ad1d386df12e13" translate="yes" xml:space="preserve">
          <source>Listing 8-5: Using indexing syntax or the &lt;code&gt;get&lt;/code&gt; method to access an item in a vector</source>
          <target state="translated">清单8-5：使用索引语法或 &lt;code&gt;get&lt;/code&gt; 方法访问向量中的项</target>
        </trans-unit>
        <trans-unit id="b50a442cace32e79598ac4b4608fcfde6c143dd2" translate="yes" xml:space="preserve">
          <source>Listing 8-6: Attempting to access the element at index 100 in a vector containing five elements</source>
          <target state="translated">清单8-6:试图访问包含五个元素的向量中索引100的元素。</target>
        </trans-unit>
        <trans-unit id="bb8bfe9b988191756b3150651d6052a13005b6d8" translate="yes" xml:space="preserve">
          <source>Listing 8-7: Attempting to add an element to a vector while holding a reference to an item</source>
          <target state="translated">清单8-7:在持有对项目的引用时,试图将一个元素添加到一个向量中。</target>
        </trans-unit>
        <trans-unit id="4f50ef1e57a7d65ae00af617aaadd291853ff28f" translate="yes" xml:space="preserve">
          <source>Listing 8-8: Printing each element in a vector by iterating over the elements using a &lt;code&gt;for&lt;/code&gt; loop</source>
          <target state="translated">清单8-8：通过使用 &lt;code&gt;for&lt;/code&gt; 循环遍历元素来打印向量中的每个元素</target>
        </trans-unit>
        <trans-unit id="dca8580f66c3e936ba07ecc234ef4bdeafdcb3eb" translate="yes" xml:space="preserve">
          <source>Listing 8-9: Iterating over mutable references to elements in a vector</source>
          <target state="translated">清单8-9:对向量中元素的可变引用进行迭代。</target>
        </trans-unit>
        <trans-unit id="6cc132939bab570f42d87e47a7642c3f25c61e61" translate="yes" xml:space="preserve">
          <source>Listing 9-10: A &lt;code&gt;Guess&lt;/code&gt; type that will only continue with values between 1 and 100</source>
          <target state="translated">清单9-10： &lt;code&gt;Guess&lt;/code&gt; 类型，其值将只能继续在1到100之间</target>
        </trans-unit>
        <trans-unit id="4c2e59eaf97a41a1a63401fdbff79c890dd98f4e" translate="yes" xml:space="preserve">
          <source>Listing 9-1: Attempting to access an element beyond the end of a vector, which will cause a call to &lt;code&gt;panic!&lt;/code&gt;</source>
          <target state="translated">清单9-1：尝试在向量的末尾访问元素，这将导致调用 &lt;code&gt;panic!&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="582171a62a2171fac9838d42c4fd1d2f090cbd88" translate="yes" xml:space="preserve">
          <source>Listing 9-2: The backtrace generated by a call to &lt;code&gt;panic!&lt;/code&gt; displayed when the environment variable &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; is set</source>
          <target state="translated">代码清单9-2：调用 &lt;code&gt;panic!&lt;/code&gt; 生成的回溯 设置环境变量 &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; 时显示</target>
        </trans-unit>
        <trans-unit id="036c67bd6abf8505561ce1f6632e697e4db21dff" translate="yes" xml:space="preserve">
          <source>Listing 9-3: Opening a file</source>
          <target state="translated">清单9-3:打开一个文件</target>
        </trans-unit>
        <trans-unit id="564e77476cbfc201bd8532f0aa35b867559d7dc1" translate="yes" xml:space="preserve">
          <source>Listing 9-4: Using a &lt;code&gt;match&lt;/code&gt; expression to handle the &lt;code&gt;Result&lt;/code&gt; variants that might be returned</source>
          <target state="translated">清单9-4：使用 &lt;code&gt;match&lt;/code&gt; 表达式来处理可能返回的 &lt;code&gt;Result&lt;/code&gt; 变量</target>
        </trans-unit>
        <trans-unit id="f7ff4b6392fc3709756a7aad7bdbd5c0684d1e92" translate="yes" xml:space="preserve">
          <source>Listing 9-5: Handling different kinds of errors in different ways</source>
          <target state="translated">清单9-5:用不同的方式处理不同类型的错误。</target>
        </trans-unit>
        <trans-unit id="9fc8faf439c8af703e6a0f9b1214df4e47fbaae9" translate="yes" xml:space="preserve">
          <source>Listing 9-6: A function that returns errors to the calling code using &lt;code&gt;match&lt;/code&gt;</source>
          <target state="translated">清单9-6：使用 &lt;code&gt;match&lt;/code&gt; 将错误返回到调用代码的函数</target>
        </trans-unit>
        <trans-unit id="45a1042ad1f9e9c0e92fd770a77a7ce6f879369b" translate="yes" xml:space="preserve">
          <source>Listing 9-7 shows an implementation of &lt;code&gt;read_username_from_file&lt;/code&gt; that has the same functionality as it had in Listing 9-6, but this implementation uses the &lt;code&gt;?&lt;/code&gt; operator.</source>
          <target state="translated">清单9-7显示了 &lt;code&gt;read_username_from_file&lt;/code&gt; 的实现，该实现具有与清单9-6相同的功能，但是该实现使用 &lt;code&gt;?&lt;/code&gt; 操作员。</target>
        </trans-unit>
        <trans-unit id="1b41b326b2c47edfb23652f3a3e5c56b62eebefe" translate="yes" xml:space="preserve">
          <source>Listing 9-7: A function that returns errors to the calling code using the &lt;code&gt;?&lt;/code&gt; operator</source>
          <target state="translated">清单9-7：一个使用 &lt;code&gt;?&lt;/code&gt; 将错误返回到调用代码的函数 算子</target>
        </trans-unit>
        <trans-unit id="90eaec2e8c17e57c827774a3de0679e7b72594d6" translate="yes" xml:space="preserve">
          <source>Listing 9-8: Chaining method calls after the &lt;code&gt;?&lt;/code&gt; operator</source>
          <target state="translated">代码清单9-8：在 &lt;code&gt;?&lt;/code&gt; 之后的链接方法调用 算子</target>
        </trans-unit>
        <trans-unit id="c49300b204d24f4d50d859027f56937d5db530ef" translate="yes" xml:space="preserve">
          <source>Listing 9-9: Using &lt;code&gt;fs::read_to_string&lt;/code&gt; instead of opening and then reading the file</source>
          <target state="translated">清单9-9：使用 &lt;code&gt;fs::read_to_string&lt;/code&gt; 而不是打开然后读取文件</target>
        </trans-unit>
        <trans-unit id="927a3229b33488046e185d2eb8d7db010dbdbc8a" translate="yes" xml:space="preserve">
          <source>Literal Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9919907746fd6b7c7a456650766c572064bd9e4b" translate="yes" xml:space="preserve">
          <source>Literal expressions</source>
          <target state="translated">字面表达</target>
        </trans-unit>
        <trans-unit id="7f5a73aa50395bb3fad4e850b2c352c0ecd8a3f6" translate="yes" xml:space="preserve">
          <source>Literal expressions in meta items must not include integer or float type suffixes.</source>
          <target state="translated">元项中的字面表达式不得包含整数或浮动类型后缀。</target>
        </trans-unit>
        <trans-unit id="c0ba27c437e0ce3b461bf46459f4604a52e37849" translate="yes" xml:space="preserve">
          <source>Literal patterns</source>
          <target state="translated">字面模式</target>
        </trans-unit>
        <trans-unit id="82e462e8f97c8bdd6276f4b5c373ba583b4f9370" translate="yes" xml:space="preserve">
          <source>Literal patterns are always refutable.</source>
          <target state="translated">字面模式总是可以反驳的。</target>
        </trans-unit>
        <trans-unit id="c7ba7dcf662374aafe652b03d75cb8f6024519d9" translate="yes" xml:space="preserve">
          <source>Literals</source>
          <target state="translated">Literals</target>
        </trans-unit>
        <trans-unit id="9bbdaa21e6555e891cb763804578f26091a26229" translate="yes" xml:space="preserve">
          <source>Literals in attributes are new and largely unsupported in built-in attributes. Work to support literals where appropriate is ongoing. Try using an unquoted name instead:</source>
          <target state="translated">属性中的文字是新的,在内置属性中基本不支持。在适当的地方支持字元的工作正在进行中。尝试使用未引号的名称。</target>
        </trans-unit>
        <trans-unit id="dbc8c5decc9f83fed394247a86e8a4ca9e1d7d8b" translate="yes" xml:space="preserve">
          <source>Loading content...</source>
          <target state="translated">正在加载内容...</target>
        </trans-unit>
        <trans-unit id="7febd461607e330888c39c4c3dd6d9b42a80af25" translate="yes" xml:space="preserve">
          <source>Loads a value from the atomic integer.</source>
          <target state="translated">从原子整数中加载一个值。</target>
        </trans-unit>
        <trans-unit id="fb84f17c620d261c4856d3c111914ab16da7ffce" translate="yes" xml:space="preserve">
          <source>Loads a value from the bool.</source>
          <target state="translated">从bool中加载一个值。</target>
        </trans-unit>
        <trans-unit id="7943a687e92d5ccd3fba97225b68ef38f3dab8b9" translate="yes" xml:space="preserve">
          <source>Loads a value from the pointer.</source>
          <target state="translated">从指针中加载一个值。</target>
        </trans-unit>
        <trans-unit id="499843b110d742760d4d0c2a5bdb0fce66483737" translate="yes" xml:space="preserve">
          <source>Loads the current value of the pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547dc7d8078ab1ae5287beebc8050b70c988e773" translate="yes" xml:space="preserve">
          <source>Loads the current value of the pointer. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;load&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.load&quot;&gt;&lt;code&gt;AtomicBool::load&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">加载指针的当前值。通过将&lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;传递为 &lt;code&gt;order&lt;/code&gt; ，可以通过 &lt;code&gt;load&lt;/code&gt; 方法在 &lt;code&gt;std::sync::atomic&lt;/code&gt; 类型上使用此内在函数的稳定版本。例如，&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.load&quot;&gt; &lt;code&gt;AtomicBool::load&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3dae14c51da8e1782cd500b2c3aa7b9a70d4fafd" translate="yes" xml:space="preserve">
          <source>Loads the current value of the pointer. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;load&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.load&quot;&gt;&lt;code&gt;AtomicBool::load&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">加载指针的当前值。通过将&lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;作为 &lt;code&gt;order&lt;/code&gt; ，可以通过 &lt;code&gt;load&lt;/code&gt; 方法在 &lt;code&gt;std::sync::atomic&lt;/code&gt; 类型上使用此内在函数的稳定版本。例如，&lt;a href=&quot;../sync/atomic/struct.atomicbool#method.load&quot;&gt; &lt;code&gt;AtomicBool::load&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
