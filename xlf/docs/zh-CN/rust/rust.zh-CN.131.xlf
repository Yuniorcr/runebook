<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="22a3f9621c74de75ed59a305309efba521aa665b" translate="yes" xml:space="preserve">
          <source>Struct std::process::Command</source>
          <target state="translated">结构 std::process::Command</target>
        </trans-unit>
        <trans-unit id="c62333e928d38caf9fac299ad6505dbfff2e3400" translate="yes" xml:space="preserve">
          <source>Struct std::process::CommandArgs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa720a04f3f6ed21dc844bd9a735fece1e03a2cc" translate="yes" xml:space="preserve">
          <source>Struct std::process::CommandEnvs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923a5d1ceb61c349f0afe77e253239f4f32f6c37" translate="yes" xml:space="preserve">
          <source>Struct std::process::ExitCode</source>
          <target state="translated">结构 std::process::ExitCode</target>
        </trans-unit>
        <trans-unit id="e97c44846552b278b51dae4c5485836d95918246" translate="yes" xml:space="preserve">
          <source>Struct std::process::ExitStatus</source>
          <target state="translated">结构 std::process::ExitStatus</target>
        </trans-unit>
        <trans-unit id="9bdf53071f00991a6888b65707f7bcf02e70587c" translate="yes" xml:space="preserve">
          <source>Struct std::process::Output</source>
          <target state="translated">结构 std::process::Output</target>
        </trans-unit>
        <trans-unit id="d3742d7521682887c13e7e310eb0fd9d6431c6c0" translate="yes" xml:space="preserve">
          <source>Struct std::process::Stdio</source>
          <target state="translated">结构 std::process::Stdio</target>
        </trans-unit>
        <trans-unit id="43732b35f62b7eab8592fd11864bd2abb5342669" translate="yes" xml:space="preserve">
          <source>Struct std::ptr::NonNull</source>
          <target state="translated">结构 std::ptr::NonNull</target>
        </trans-unit>
        <trans-unit id="4bc8eb41d7b945a75a76196b4a48b033b62c1d4d" translate="yes" xml:space="preserve">
          <source>Struct std::raw::TraitObject</source>
          <target state="translated">结构 std::raw::TraitObject</target>
        </trans-unit>
        <trans-unit id="5fd2d6c124b9f66534b9bad6f7c4223a29c5a584" translate="yes" xml:space="preserve">
          <source>Struct std::rc::Rc</source>
          <target state="translated">结构 std::rc::Rc</target>
        </trans-unit>
        <trans-unit id="fc7728e2fddc2834a08633c22ce1d99936dce33a" translate="yes" xml:space="preserve">
          <source>Struct std::rc::Weak</source>
          <target state="translated">结构 std::rc::Weak</target>
        </trans-unit>
        <trans-unit id="2b91bf075a6d3ed1c5f7622a7c8bc444fd813b3f" translate="yes" xml:space="preserve">
          <source>Struct std::result::IntoIter</source>
          <target state="translated">结构 std::result::IntoIter</target>
        </trans-unit>
        <trans-unit id="2cb604c3233ca0ce55955a20b8200b78370fcef4" translate="yes" xml:space="preserve">
          <source>Struct std::result::Iter</source>
          <target state="translated">结构 std::result::Iter</target>
        </trans-unit>
        <trans-unit id="37f30acd30bf579cd2c95b3d09c0979f9af79e25" translate="yes" xml:space="preserve">
          <source>Struct std::result::IterMut</source>
          <target state="translated">结构 std::result::IterMut</target>
        </trans-unit>
        <trans-unit id="f1e4287ef1adc1d1e8d3166c20819768133e146f" translate="yes" xml:space="preserve">
          <source>Struct std::slice::ArrayChunks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b473a73f02ea6858d6e02468e97d8978592c89" translate="yes" xml:space="preserve">
          <source>Struct std::slice::ArrayChunksMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa9b3b71dc7f48e7f895e768a189e5c912e407a" translate="yes" xml:space="preserve">
          <source>Struct std::slice::ArrayWindows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d63f1a6a452aa9c5daf7758ec3966807d4e337" translate="yes" xml:space="preserve">
          <source>Struct std::slice::Chunks</source>
          <target state="translated">结构 std::slice::Chunks</target>
        </trans-unit>
        <trans-unit id="f0db408f69865cacf401b3f1245a372a01018934" translate="yes" xml:space="preserve">
          <source>Struct std::slice::ChunksExact</source>
          <target state="translated">结构 std::slice::ChunksExact</target>
        </trans-unit>
        <trans-unit id="828bb2ba2f8a1ba17b0cf2036e81c0f29d724f72" translate="yes" xml:space="preserve">
          <source>Struct std::slice::ChunksExactMut</source>
          <target state="translated">结构 std::slice::ChunksExactMut</target>
        </trans-unit>
        <trans-unit id="f9437610716bf980ff4721ddfe6871477080149b" translate="yes" xml:space="preserve">
          <source>Struct std::slice::ChunksMut</source>
          <target state="translated">结构 std::slice::ChunksMut</target>
        </trans-unit>
        <trans-unit id="4446af0835763a1004007202790870ea1c1e77bd" translate="yes" xml:space="preserve">
          <source>Struct std::slice::Iter</source>
          <target state="translated">结构 std::slice::Iter</target>
        </trans-unit>
        <trans-unit id="26a0a7d24a677e1d16acfacd7bdaa1a51e63a277" translate="yes" xml:space="preserve">
          <source>Struct std::slice::IterMut</source>
          <target state="translated">结构 std::slice::IterMut</target>
        </trans-unit>
        <trans-unit id="c03db1035ff4cb87356538e16998903797462621" translate="yes" xml:space="preserve">
          <source>Struct std::slice::RChunks</source>
          <target state="translated">结构 std::slice::RChunks</target>
        </trans-unit>
        <trans-unit id="6374ac238e3115dc883b2099980f14b56d87340e" translate="yes" xml:space="preserve">
          <source>Struct std::slice::RChunksExact</source>
          <target state="translated">结构 std::slice::RChunksExact</target>
        </trans-unit>
        <trans-unit id="51fdea0393171a32a6ff0415837787c686723af4" translate="yes" xml:space="preserve">
          <source>Struct std::slice::RChunksExactMut</source>
          <target state="translated">结构 std::slice::RChunksExactMut</target>
        </trans-unit>
        <trans-unit id="e5785f22c53da55b16133a242a3c36ca7106d84c" translate="yes" xml:space="preserve">
          <source>Struct std::slice::RChunksMut</source>
          <target state="translated">结构 std::slice::RChunksMut</target>
        </trans-unit>
        <trans-unit id="999989103ddfd72493daff7bafd3fdf5311e01dc" translate="yes" xml:space="preserve">
          <source>Struct std::slice::RSplit</source>
          <target state="translated">结构 std::slice::RSplit</target>
        </trans-unit>
        <trans-unit id="80ce045f863fabeafa99a313ce72185419a478e9" translate="yes" xml:space="preserve">
          <source>Struct std::slice::RSplitMut</source>
          <target state="translated">结构 std::slice::RSplitMut</target>
        </trans-unit>
        <trans-unit id="b9a37868d2545ba436e5a2a776f002cad138b086" translate="yes" xml:space="preserve">
          <source>Struct std::slice::RSplitN</source>
          <target state="translated">结构 std::slice::RSplitN</target>
        </trans-unit>
        <trans-unit id="f556bed99e1fcda29929f2acf45a100dd306ded0" translate="yes" xml:space="preserve">
          <source>Struct std::slice::RSplitNMut</source>
          <target state="translated">结构 std::slice::RSplitNMut</target>
        </trans-unit>
        <trans-unit id="fd90ca0f26d8376cfe3c6aad3b5bbcdc02dc504b" translate="yes" xml:space="preserve">
          <source>Struct std::slice::Split</source>
          <target state="translated">结构 std::slice::Split</target>
        </trans-unit>
        <trans-unit id="b9e6c877bb0f82cfaf3e8f9d7fe2c9522aea735c" translate="yes" xml:space="preserve">
          <source>Struct std::slice::SplitMut</source>
          <target state="translated">结构 std::slice::SplitMut</target>
        </trans-unit>
        <trans-unit id="f7328339c3d1f8cc55b399f636cba95c02bc6b30" translate="yes" xml:space="preserve">
          <source>Struct std::slice::SplitN</source>
          <target state="translated">结构 std::slice::SplitN</target>
        </trans-unit>
        <trans-unit id="3656498214c39df92138390e2ec775a4224d74d8" translate="yes" xml:space="preserve">
          <source>Struct std::slice::SplitNMut</source>
          <target state="translated">结构 std::slice::SplitNMut</target>
        </trans-unit>
        <trans-unit id="391b6d24f34473c476c212c5e014927dee22ebf2" translate="yes" xml:space="preserve">
          <source>Struct std::slice::Windows</source>
          <target state="translated">结构 std::slice::Windows</target>
        </trans-unit>
        <trans-unit id="be1dbf730ff94b70b5252fc04f9cd337392bd5f3" translate="yes" xml:space="preserve">
          <source>Struct std::str::Bytes</source>
          <target state="translated">结构 std::str::Bytes</target>
        </trans-unit>
        <trans-unit id="14c3a41920721c88610046b015c41449cb217399" translate="yes" xml:space="preserve">
          <source>Struct std::str::CharIndices</source>
          <target state="translated">结构 std::str::CharIndices</target>
        </trans-unit>
        <trans-unit id="67ac685a6d168ecaed19d0fdcbbcdd55d53464b2" translate="yes" xml:space="preserve">
          <source>Struct std::str::Chars</source>
          <target state="translated">结构 std::str::Chars</target>
        </trans-unit>
        <trans-unit id="35ec6008853839b064030febe66d2d6ff495370d" translate="yes" xml:space="preserve">
          <source>Struct std::str::EncodeUtf16</source>
          <target state="translated">结构 std::str::EncodeUtf16</target>
        </trans-unit>
        <trans-unit id="89bcda484321f61e411556df3863b952ee317263" translate="yes" xml:space="preserve">
          <source>Struct std::str::EscapeDebug</source>
          <target state="translated">结构 std::str::EscapeDebug</target>
        </trans-unit>
        <trans-unit id="4eb91de0b1b3b20a23dcba5b54ca851b3bb268f7" translate="yes" xml:space="preserve">
          <source>Struct std::str::EscapeDefault</source>
          <target state="translated">结构 std::str::EscapeDefault</target>
        </trans-unit>
        <trans-unit id="631f819b0291d3e6fe85040989a2be695252c97b" translate="yes" xml:space="preserve">
          <source>Struct std::str::EscapeUnicode</source>
          <target state="translated">结构 std::str::EscapeUnicode</target>
        </trans-unit>
        <trans-unit id="f225634a09fe6ce0f674d48d42bcd7f701b82bd1" translate="yes" xml:space="preserve">
          <source>Struct std::str::Lines</source>
          <target state="translated">结构 std::str::Line</target>
        </trans-unit>
        <trans-unit id="96ede0da507ff1e4f5fe04f364daa147612eac91" translate="yes" xml:space="preserve">
          <source>Struct std::str::LinesAny</source>
          <target state="translated">结构 std::str::LinesAny</target>
        </trans-unit>
        <trans-unit id="2c4bb3795a806d49162cc1fe9da887602f4ef363" translate="yes" xml:space="preserve">
          <source>Struct std::str::MatchIndices</source>
          <target state="translated">结构 std::str::MatchIndices</target>
        </trans-unit>
        <trans-unit id="0695cc93ce303be7d6881525b7e4260e8b6be96b" translate="yes" xml:space="preserve">
          <source>Struct std::str::Matches</source>
          <target state="translated">结构 std::str::Matches</target>
        </trans-unit>
        <trans-unit id="968801fbb569383e58549f2b20c19baf3cc1ed69" translate="yes" xml:space="preserve">
          <source>Struct std::str::ParseBoolError</source>
          <target state="translated">结构 std::str::ParseBoolError</target>
        </trans-unit>
        <trans-unit id="b1537dc3305245dae369ed564f2d35665e89709f" translate="yes" xml:space="preserve">
          <source>Struct std::str::RMatchIndices</source>
          <target state="translated">结构 std::str::RMatchIndices</target>
        </trans-unit>
        <trans-unit id="69cac12245cb38a8f65df573f09fc8600719f925" translate="yes" xml:space="preserve">
          <source>Struct std::str::RMatches</source>
          <target state="translated">结构 std::str::RMatches</target>
        </trans-unit>
        <trans-unit id="1abec20bb57e2fee065c550a89666ce9997227e7" translate="yes" xml:space="preserve">
          <source>Struct std::str::RSplit</source>
          <target state="translated">结构 std::str::RSplit</target>
        </trans-unit>
        <trans-unit id="75f097e68457988a8d1dee5c71de6b3a97450c1f" translate="yes" xml:space="preserve">
          <source>Struct std::str::RSplitN</source>
          <target state="translated">结构 std::str::RSplitN</target>
        </trans-unit>
        <trans-unit id="a05c9db487d16fdb172832777d131b44aa3214a7" translate="yes" xml:space="preserve">
          <source>Struct std::str::RSplitTerminator</source>
          <target state="translated">结构 std::str::RSplitTerminator</target>
        </trans-unit>
        <trans-unit id="d8e47a22f2f13c05e9e575191b00d982f5e90dd0" translate="yes" xml:space="preserve">
          <source>Struct std::str::Split</source>
          <target state="translated">结构 std::str::Split</target>
        </trans-unit>
        <trans-unit id="80b6a167c4b34cf90b54f8b7be62c46172ee0d0a" translate="yes" xml:space="preserve">
          <source>Struct std::str::SplitAsciiWhitespace</source>
          <target state="translated">结构 std::str::SplitAsciiWhitespace</target>
        </trans-unit>
        <trans-unit id="7a4cfb4a2bbe20d9c0ee0f9353a9dcc70a45bbea" translate="yes" xml:space="preserve">
          <source>Struct std::str::SplitN</source>
          <target state="translated">结构 std::str::SplitN</target>
        </trans-unit>
        <trans-unit id="b2d8ee49b9918bea8c5914efa552deac7843a2da" translate="yes" xml:space="preserve">
          <source>Struct std::str::SplitTerminator</source>
          <target state="translated">结构 std::str::SplitTerminator</target>
        </trans-unit>
        <trans-unit id="051309f2ca4f6c8738623e597ca9b6d53ae2b6d2" translate="yes" xml:space="preserve">
          <source>Struct std::str::SplitWhitespace</source>
          <target state="translated">结构 std::str::SplitWhitespace</target>
        </trans-unit>
        <trans-unit id="70077a6ee14f72519b7011d486dabb09767af9eb" translate="yes" xml:space="preserve">
          <source>Struct std::str::Utf8Error</source>
          <target state="translated">结构 std::str::Utf8Error</target>
        </trans-unit>
        <trans-unit id="854352904a26571ef76150b8c2f15c46a5bd6946" translate="yes" xml:space="preserve">
          <source>Struct std::str::pattern::CharPredicateSearcher</source>
          <target state="translated">结构 std::str::pattern::CharPredicateSearcher</target>
        </trans-unit>
        <trans-unit id="ef34ab83bb00ae3b679b344e8eecfce05848f337" translate="yes" xml:space="preserve">
          <source>Struct std::str::pattern::CharSearcher</source>
          <target state="translated">结构 std::str::pattern::CharSearcher</target>
        </trans-unit>
        <trans-unit id="fbd126e20206f0010a3aee5702dfe5bc20cfc09e" translate="yes" xml:space="preserve">
          <source>Struct std::str::pattern::CharSliceSearcher</source>
          <target state="translated">结构 std::str::pattern::CharSliceSearcher</target>
        </trans-unit>
        <trans-unit id="1649327834d9be8f88f05db9689f452628d901cf" translate="yes" xml:space="preserve">
          <source>Struct std::str::pattern::StrSearcher</source>
          <target state="translated">结构 std::str::pattern::StrSearcher</target>
        </trans-unit>
        <trans-unit id="ee9936bd758633d426182d48911b62733384ff4c" translate="yes" xml:space="preserve">
          <source>Struct std::string::Drain</source>
          <target state="translated">结构 std::string::Drain</target>
        </trans-unit>
        <trans-unit id="42f33707c5f8b3b2e4d99a3afc910947cfdbd80d" translate="yes" xml:space="preserve">
          <source>Struct std::string::FromUtf16Error</source>
          <target state="translated">结构 std::string::FromUtf16Error</target>
        </trans-unit>
        <trans-unit id="966d0004aa964825fa07278c3d30ce547ef47fad" translate="yes" xml:space="preserve">
          <source>Struct std::string::FromUtf8Error</source>
          <target state="translated">结构 std::string::FromUtf8Error</target>
        </trans-unit>
        <trans-unit id="3a4a650ec92e51ff051e2809fc2a68c187741f44" translate="yes" xml:space="preserve">
          <source>Struct std::string::String</source>
          <target state="translated">结构 std::string::String</target>
        </trans-unit>
        <trans-unit id="3b1454f73dd759188532051fd5439e0182127f76" translate="yes" xml:space="preserve">
          <source>Struct std::sync::Arc</source>
          <target state="translated">结构 std::sync::Arc</target>
        </trans-unit>
        <trans-unit id="1d772816c87a56c50942a18faff03053aec722d4" translate="yes" xml:space="preserve">
          <source>Struct std::sync::Barrier</source>
          <target state="translated">结构 std::sync::Barrier</target>
        </trans-unit>
        <trans-unit id="390518370db175d06729659e79b794a7c8ac8a00" translate="yes" xml:space="preserve">
          <source>Struct std::sync::BarrierWaitResult</source>
          <target state="translated">结构 std::sync::BarrierWaitResult</target>
        </trans-unit>
        <trans-unit id="35b4a1fbff2dbf16ecf495af221836316173bc52" translate="yes" xml:space="preserve">
          <source>Struct std::sync::Condvar</source>
          <target state="translated">结构 std::sync::Condvar</target>
        </trans-unit>
        <trans-unit id="536a8a5879f7686a6909cb53e05494a3e5d6bcc7" translate="yes" xml:space="preserve">
          <source>Struct std::sync::Mutex</source>
          <target state="translated">结构 std::sync::Mutex</target>
        </trans-unit>
        <trans-unit id="baa0ef3c20392117dec8f339fc78981241396a7f" translate="yes" xml:space="preserve">
          <source>Struct std::sync::MutexGuard</source>
          <target state="translated">结构 std::sync::MutexGuard</target>
        </trans-unit>
        <trans-unit id="62eb07a6fb3aebb119764adbcde7566b9eed9e54" translate="yes" xml:space="preserve">
          <source>Struct std::sync::Once</source>
          <target state="translated">结构 std::sync::Once</target>
        </trans-unit>
        <trans-unit id="ecd02f760f5c95bd645666796d7753bfbfe50e50" translate="yes" xml:space="preserve">
          <source>Struct std::sync::OnceState</source>
          <target state="translated">结构 std::sync::OnceState</target>
        </trans-unit>
        <trans-unit id="57d7c050866684a33fca1627701906d79021be5c" translate="yes" xml:space="preserve">
          <source>Struct std::sync::PoisonError</source>
          <target state="translated">结构 std::sync::PoisonError</target>
        </trans-unit>
        <trans-unit id="9f28770f850f907c93ba940e71ae1a513c8c57da" translate="yes" xml:space="preserve">
          <source>Struct std::sync::RwLock</source>
          <target state="translated">结构 std::sync::RwLock</target>
        </trans-unit>
        <trans-unit id="e8c849b5452919555c722c37abf132419eeffbb6" translate="yes" xml:space="preserve">
          <source>Struct std::sync::RwLockReadGuard</source>
          <target state="translated">结构 std::sync::RwLockReadGuard</target>
        </trans-unit>
        <trans-unit id="b7233e72711f07314c30b7f8d440a37871643b51" translate="yes" xml:space="preserve">
          <source>Struct std::sync::RwLockWriteGuard</source>
          <target state="translated">结构 std::sync::RwLockWriteGuard</target>
        </trans-unit>
        <trans-unit id="74e3f742108deabaa571d80fe21b7d018faebdef" translate="yes" xml:space="preserve">
          <source>Struct std::sync::WaitTimeoutResult</source>
          <target state="translated">结构 std::sync::WaitTimeoutResult</target>
        </trans-unit>
        <trans-unit id="5d4c99aa71747cdd50bac369116a5bd03c625c82" translate="yes" xml:space="preserve">
          <source>Struct std::sync::Weak</source>
          <target state="translated">结构 std::sync::Weak</target>
        </trans-unit>
        <trans-unit id="1448b79e46c6ee1a76328362aaba6e40a4795478" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicBool</source>
          <target state="translated">结构 std::sync::atomic::AtomicBool</target>
        </trans-unit>
        <trans-unit id="e5cbc2c7380889bdf43ed108df03f5b32072d18c" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicI16</source>
          <target state="translated">结构 std::sync::atomic::AtomicI16</target>
        </trans-unit>
        <trans-unit id="8aa3c58d3785ea112e299087cb6bfee793fd21d5" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicI32</source>
          <target state="translated">结构 std::sync::atomic::AtomicI32</target>
        </trans-unit>
        <trans-unit id="84fe8d3aa28575a574ec0320af36ad77af5c3d05" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicI64</source>
          <target state="translated">结构 std::sync::atomic::AtomicI64</target>
        </trans-unit>
        <trans-unit id="4286842fc5ccab6b05e92c4568bb207fefa8c08e" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicI8</source>
          <target state="translated">结构 std::sync::atomic::AtomicI8</target>
        </trans-unit>
        <trans-unit id="4e422c1f950b02778bda29b4c4bd5f9d0bc39a65" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicIsize</source>
          <target state="translated">结构 std::sync::atomic::AtomicIsize</target>
        </trans-unit>
        <trans-unit id="0a5b8f3d4df76bc37433fee8c605ff8de649af55" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicPtr</source>
          <target state="translated">结构 std::sync::atomic::AtomicPtr</target>
        </trans-unit>
        <trans-unit id="469138022cff51b0dfd929facf1c6028bf93ad7b" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicU16</source>
          <target state="translated">结构 std::sync::atomic::AtomicU16</target>
        </trans-unit>
        <trans-unit id="3c3dc4a84cb9551aa76da63e618398115f60fd51" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicU32</source>
          <target state="translated">结构 std::sync::atomic::AtomicU32</target>
        </trans-unit>
        <trans-unit id="80b57b0104f3d00a95fb2534c10d6592c21aeacd" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicU64</source>
          <target state="translated">结构 std::sync::atomic::AtomicU64</target>
        </trans-unit>
        <trans-unit id="f7bdf843e25a06371c39f67e7ce378097bdd2bff" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicU8</source>
          <target state="translated">结构 std::sync::atomic::AtomicU8</target>
        </trans-unit>
        <trans-unit id="85c2a7dd224240256077403242e2254d93bb3697" translate="yes" xml:space="preserve">
          <source>Struct std::sync::atomic::AtomicUsize</source>
          <target state="translated">结构 std::sync::atomic::AtomicUsize</target>
        </trans-unit>
        <trans-unit id="3f526c02ca1512c9c64c80ec362c831298f2f9ee" translate="yes" xml:space="preserve">
          <source>Struct std::sync::mpsc::IntoIter</source>
          <target state="translated">结构 std::sync::mpsc::IntoIter</target>
        </trans-unit>
        <trans-unit id="f51df08609ed239a9a834beda58bdeefe230f91a" translate="yes" xml:space="preserve">
          <source>Struct std::sync::mpsc::Iter</source>
          <target state="translated">结构 std::sync::mpsc::Iter</target>
        </trans-unit>
        <trans-unit id="1f0a66a676f3661958efd4588a9d5e268fe117da" translate="yes" xml:space="preserve">
          <source>Struct std::sync::mpsc::Receiver</source>
          <target state="translated">结构 std::sync::mpsc::Receiver</target>
        </trans-unit>
        <trans-unit id="b242709d14922d141508203ec8ac273e2c3e3b08" translate="yes" xml:space="preserve">
          <source>Struct std::sync::mpsc::RecvError</source>
          <target state="translated">结构 std::sync::mpsc::RecvError</target>
        </trans-unit>
        <trans-unit id="5d01ad5acb82686c875f9862ed1804bcb3d9cecd" translate="yes" xml:space="preserve">
          <source>Struct std::sync::mpsc::SendError</source>
          <target state="translated">结构 std::sync::mpsc::SendError</target>
        </trans-unit>
        <trans-unit id="a2160212abc0ec98ba14f7e355385ddd0168236d" translate="yes" xml:space="preserve">
          <source>Struct std::sync::mpsc::Sender</source>
          <target state="translated">结构 std::sync::mpsc::Sender</target>
        </trans-unit>
        <trans-unit id="1ef59a43a3b8a93c0d9c3f40b724d48653e47860" translate="yes" xml:space="preserve">
          <source>Struct std::sync::mpsc::SyncSender</source>
          <target state="translated">结构 std::sync::mpsc::SyncSender</target>
        </trans-unit>
        <trans-unit id="bed440fff73772586e6e6fdb59a650b026e7fbd3" translate="yes" xml:space="preserve">
          <source>Struct std::sync::mpsc::TryIter</source>
          <target state="translated">结构 std::sync::mpsc::TryIter</target>
        </trans-unit>
        <trans-unit id="f52da68b959012d76fb29974acd56a3ca361304f" translate="yes" xml:space="preserve">
          <source>Struct std::task::Context</source>
          <target state="translated">结构 std::task::Context</target>
        </trans-unit>
        <trans-unit id="eec54d9953190c353498a09f39b0fff56cd4bd97" translate="yes" xml:space="preserve">
          <source>Struct std::task::RawWaker</source>
          <target state="translated">结构 std::task::RawWaker</target>
        </trans-unit>
        <trans-unit id="f2911efca87aa711ca4bb7e3b1461050df2decd9" translate="yes" xml:space="preserve">
          <source>Struct std::task::RawWakerVTable</source>
          <target state="translated">结构 std::task::RawWakerVTable</target>
        </trans-unit>
        <trans-unit id="3c06e10b206bd1110c3b3d1fe70e0f05a11e4a99" translate="yes" xml:space="preserve">
          <source>Struct std::task::Waker</source>
          <target state="translated">结构 std::task::Waker</target>
        </trans-unit>
        <trans-unit id="3c558edd49e3c9c8574be1bbc7cc973764ec7542" translate="yes" xml:space="preserve">
          <source>Struct std::thread::AccessError</source>
          <target state="translated">结构 std::thread::AccessError</target>
        </trans-unit>
        <trans-unit id="501dfbd503af48b1f73f6ac4e588b52a7d123642" translate="yes" xml:space="preserve">
          <source>Struct std::thread::Builder</source>
          <target state="translated">结构 std::thread::Builder</target>
        </trans-unit>
        <trans-unit id="86a2c760d3cbc10fa9a78f8becc3c4bceff46ce9" translate="yes" xml:space="preserve">
          <source>Struct std::thread::JoinHandle</source>
          <target state="translated">结构 std::thread::JoinHandle</target>
        </trans-unit>
        <trans-unit id="629be52433267b26e4d5afbabe5fdc0db1036c2c" translate="yes" xml:space="preserve">
          <source>Struct std::thread::LocalKey</source>
          <target state="translated">结构 std::thread::LocalKey</target>
        </trans-unit>
        <trans-unit id="67da77fd5f46c0277094fce0cdf1a587f0a84ad3" translate="yes" xml:space="preserve">
          <source>Struct std::thread::Thread</source>
          <target state="translated">结构 std::thread::Thread</target>
        </trans-unit>
        <trans-unit id="1f85fb76924eb7b44f0adcf2ab7609e7a6549750" translate="yes" xml:space="preserve">
          <source>Struct std::thread::ThreadId</source>
          <target state="translated">结构 std::thread::ThreadId</target>
        </trans-unit>
        <trans-unit id="3c6671a493c6680971b1e677905b877595e0ea2e" translate="yes" xml:space="preserve">
          <source>Struct std::time::Duration</source>
          <target state="translated">结构 std::time::Duration</target>
        </trans-unit>
        <trans-unit id="3e10dd76ff4c3a47f188031b7144673d0b8c548d" translate="yes" xml:space="preserve">
          <source>Struct std::time::Instant</source>
          <target state="translated">结构 std::time::Instant</target>
        </trans-unit>
        <trans-unit id="28e678a6f7b7cbb191e3a2c16d394e70d47ab631" translate="yes" xml:space="preserve">
          <source>Struct std::time::SystemTime</source>
          <target state="translated">结构 std::time::SystemTime</target>
        </trans-unit>
        <trans-unit id="8dd5117fe3f65c365391d89d00361ad3d5b596c7" translate="yes" xml:space="preserve">
          <source>Struct std::time::SystemTimeError</source>
          <target state="translated">结构 std::time::SystemTimeError</target>
        </trans-unit>
        <trans-unit id="5cf6ea4e4c7964f3a9322c43cdf995ea087efcde" translate="yes" xml:space="preserve">
          <source>Struct std::vec::Drain</source>
          <target state="translated">结构 std::vec::Drain</target>
        </trans-unit>
        <trans-unit id="8b093274eff094727dd194650189d7b028a8c702" translate="yes" xml:space="preserve">
          <source>Struct std::vec::DrainFilter</source>
          <target state="translated">结构 std::vec::DrainFilter</target>
        </trans-unit>
        <trans-unit id="ca64da07eb0498418f45bf2624c59491ddc33954" translate="yes" xml:space="preserve">
          <source>Struct std::vec::IntoIter</source>
          <target state="translated">结构 std::vec::IntoIter</target>
        </trans-unit>
        <trans-unit id="6a7f1532931708095a07346ea4f872c1990c5fef" translate="yes" xml:space="preserve">
          <source>Struct std::vec::Splice</source>
          <target state="translated">结构 std::vec::Splice</target>
        </trans-unit>
        <trans-unit id="fa8d10908e6e87558f761c72accbde7c5b585d8f" translate="yes" xml:space="preserve">
          <source>Struct std::vec::Vec</source>
          <target state="translated">结构 std::vec::Vec</target>
        </trans-unit>
        <trans-unit id="738934014ce4c4cb26f23e895aa9e7f2c100905b" translate="yes" xml:space="preserve">
          <source>Struct types</source>
          <target state="translated">结构类型</target>
        </trans-unit>
        <trans-unit id="66b9bcf6fa135918752a0ac296373b9fc45c7435" translate="yes" xml:space="preserve">
          <source>Structs</source>
          <target state="translated">Structs</target>
        </trans-unit>
        <trans-unit id="ff635100ad5a4fe0db250b7da0348eed0ff1980c" translate="yes" xml:space="preserve">
          <source>Structs and enums with this representation have the same layout and ABI as the single non-zero sized field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc36f39977a93539a376dad7b0585ee1bc81f8c" translate="yes" xml:space="preserve">
          <source>Structs are always written in CamelCase, with few exceptions. While the trailing comma on a struct's list of fields can be omitted, it's usually kept for convenience in adding and removing fields down the line.</source>
          <target state="translated">除了少数例外,结构总是用CamelCase书写。虽然结构的字段列表中的逗号可以省略,但为了方便以后添加和删除字段,通常会保留。</target>
        </trans-unit>
        <trans-unit id="fe0e81bc965812df97e5166f6a2414ac6cd65320" translate="yes" xml:space="preserve">
          <source>Structs are similar to tuples, which were discussed in Chapter 3. Like tuples, the pieces of a struct can be different types. Unlike with tuples, you&amp;rsquo;ll name each piece of data so it&amp;rsquo;s clear what the values mean. As a result of these names, structs are more flexible than tuples: you don&amp;rsquo;t have to rely on the order of the data to specify or access the values of an instance.</source>
          <target state="translated">结构类似于在第3章中讨论过的元组。与元组一样，结构的各个部分可以是不同的类型。与元组不同，您将为每个数据命名，以便清楚地知道值的含义。这些名称的结果是，结构比元组更​​灵活：您不必依赖数据的顺序来指定或访问实例的值。</target>
        </trans-unit>
        <trans-unit id="fad0b5cd60f855ed792d65d8c391c94f9dd3c07d" translate="yes" xml:space="preserve">
          <source>Structs can be instantiated in different ways, all of which can be mixed and matched as needed. The most common way to make a new struct is via a constructor method such as &lt;code&gt;new()&lt;/code&gt;, but when that isn't available (or you're writing the constructor itself), struct literal syntax is used:</source>
          <target state="translated">可以用不同的方法实例化结构，所有这些结构都可以根据需要进行混合和匹配。生成新结构的最常见方法是通过诸如 &lt;code&gt;new()&lt;/code&gt; 之类的构造函数方法，但是当该方法不可用（或者您正在编写构造函数本身）时，将使用结构文字语法：</target>
        </trans-unit>
        <trans-unit id="494b25a9d0258011619403c49f519f72ffadc730" translate="yes" xml:space="preserve">
          <source>Structs implementing the &lt;code&gt;Drop&lt;/code&gt; trait have an implicit destructor that gets called when they go out of scope. This destructor gets exclusive access to the fields of the struct when it runs.</source>
          <target state="translated">实现 &lt;code&gt;Drop&lt;/code&gt; 特性的结构具有一个隐式析构函数，当它们超出范围时会被调用。该析构函数在运行时将获得对结构域的独占访问权。</target>
        </trans-unit>
        <trans-unit id="b7cd7098dee3b6bfe50cd179d3958f5f2f6ae31e" translate="yes" xml:space="preserve">
          <source>Structs implementing the &lt;code&gt;Drop&lt;/code&gt; trait have an implicit destructor that gets called when they go out of scope. This destructor may use the fields of the struct, so moving out of the struct could make it impossible to run the destructor. Therefore, we must think of all values whose type implements the &lt;code&gt;Drop&lt;/code&gt; trait as single units whose fields cannot be moved.</source>
          <target state="translated">实现 &lt;code&gt;Drop&lt;/code&gt; 特性的结构具有一个隐式析构函数，当它们超出范围时会被调用。该析构函数可能会使用该结构的字段，因此将其移出该结构可能无法运行该析构函数。因此，我们必须将其类型实现 &lt;code&gt;Drop&lt;/code&gt; trait 的所有值都视为无法移动其字段的单个单位。</target>
        </trans-unit>
        <trans-unit id="0df4f0cb69b4ef910eaadb62d3d2e59643966196" translate="yes" xml:space="preserve">
          <source>Structs in Rust come in three flavors: Structs with named fields, tuple structs, and unit structs.</source>
          <target state="translated">Rust中的结构有三种口味。带有命名字段的结构,元组结构和单元结构。</target>
        </trans-unit>
        <trans-unit id="1888bcc5085fd46bd524fed3e8b1bdd0380571d5" translate="yes" xml:space="preserve">
          <source>Structs let you create custom types that are meaningful for your domain. By using structs, you can keep associated pieces of data connected to each other and name each piece to make your code clear. Methods let you specify the behavior that instances of your structs have, and associated functions let you namespace functionality that is particular to your struct without having an instance available.</source>
          <target state="translated">Structs让你创建对你的领域有意义的自定义类型。通过使用结构,你可以将相关的数据片段相互连接起来,并为每个片段命名,使你的代码更加清晰。方法可以让你指定你的结构体实例所具有的行为,相关的函数可以让你在没有实例可用的情况下,命名你的结构体所特有的功能。</target>
        </trans-unit>
        <trans-unit id="be697ab09adab4b1b1111418fdbfb8adebe1453a" translate="yes" xml:space="preserve">
          <source>Structs may contain a</source>
          <target state="translated">结构可以包含一个</target>
        </trans-unit>
        <trans-unit id="e9bd05235368c18f04f39f89bebb1eb624006d25" translate="yes" xml:space="preserve">
          <source>Structs with this representation have the same layout and ABI as the single non-zero sized field.</source>
          <target state="translated">具有这种表示方式的结构与单个非零大小的字段具有相同的布局和ABI。</target>
        </trans-unit>
        <trans-unit id="4635fc5552c9f44a560d156558b99f6867dddb43" translate="yes" xml:space="preserve">
          <source>Structs, enums, unions and tuples implement the trait if all of their fields do.</source>
          <target state="translated">结构、枚举、联合和元组,如果它们的所有字段都实现了这个特性。</target>
        </trans-unit>
        <trans-unit id="57fce3d21606efcfae7bf850caaa5b1b5baa4649" translate="yes" xml:space="preserve">
          <source>Structs, enums, unions, and tuples implement the trait if all of their fields do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f779c4d5d7821900ca492402b035ed6903f86e6" translate="yes" xml:space="preserve">
          <source>Structural types are always equivalent if their internal types are equivalent. For a nominal version of tuples, see &lt;a href=&quot;struct&quot;&gt;tuple structs&lt;/a&gt;. &lt;sup&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;: Element is equivalent to field, except numerical indexes instead of identifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6225083e644f351d889a1b56583d0718b33caf09" translate="yes" xml:space="preserve">
          <source>StructuralEq</source>
          <target state="translated">StructuralEq</target>
        </trans-unit>
        <trans-unit id="5c35d98860ed327f1d3adb8566b6b6eea0e84385" translate="yes" xml:space="preserve">
          <source>StructuralPartialEq</source>
          <target state="translated">StructuralPartialEq</target>
        </trans-unit>
        <trans-unit id="5446c62134967a5ee0599a1267f33136d41dbd5e" translate="yes" xml:space="preserve">
          <source>Structure wrapping a mutable reference to the greatest item on a &lt;code&gt;BinaryHeap&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;BinaryHeap&lt;/code&gt; 上包装对最大项目的可变引用的结构。</target>
        </trans-unit>
        <trans-unit id="fcfac3efb6ae696fcb48427ff359561932b8f8e8" translate="yes" xml:space="preserve">
          <source>Students</source>
          <target state="translated">Students</target>
        </trans-unit>
        <trans-unit id="99a0efc6cfd85d8ff2732a6718140f822cb90472" translate="yes" xml:space="preserve">
          <source>Style</source>
          <target state="translated">Style</target>
        </trans-unit>
        <trans-unit id="6b0fef99f0a9a7fdaa3ababf9d9d842ff23f2ea3" translate="yes" xml:space="preserve">
          <source>Style conventions</source>
          <target state="translated">风格惯例</target>
        </trans-unit>
        <trans-unit id="1f3c17ad45052c3c8faf844ec9d98e802f713c26" translate="yes" xml:space="preserve">
          <source>Sub</source>
          <target state="translated">Sub</target>
        </trans-unit>
        <trans-unit id="667276843fc536ac094b65afb172598bbca40ff1" translate="yes" xml:space="preserve">
          <source>Sub-bindings, e.g. &lt;code&gt;ref x @ Some(ref y)&lt;/code&gt; are now allowed under &lt;code&gt;#![feature(bindings_after_at)]&lt;/code&gt; and checked to make sure that memory safety is upheld.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344e0db34b072305efef08e85f127b47a1097f24" translate="yes" xml:space="preserve">
          <source>Sub::sub</source>
          <target state="translated">Sub::sub</target>
        </trans-unit>
        <trans-unit id="91799bfee1e7ac0db77205c508cbb0e21ec24d86" translate="yes" xml:space="preserve">
          <source>SubAssign</source>
          <target state="translated">SubAssign</target>
        </trans-unit>
        <trans-unit id="4127dc2b967aa8b123dee08c6b45b8b7b285720f" translate="yes" xml:space="preserve">
          <source>SubAssign::sub_assign</source>
          <target state="translated">SubAssign::sub_assign</target>
        </trans-unit>
        <trans-unit id="3b6279e5a04f27f3e00335f278bf58cb5d62ec8e" translate="yes" xml:space="preserve">
          <source>Submodules in Integration Tests</source>
          <target state="translated">集成测试中的子模块</target>
        </trans-unit>
        <trans-unit id="a296f80f7b8e8fc60230ee2744b346244f49715f" translate="yes" xml:space="preserve">
          <source>Subpattern binding</source>
          <target state="translated">子模式绑定</target>
        </trans-unit>
        <trans-unit id="ccd82220e78d9fcf52cd7b879c87bca93e1dd16e" translate="yes" xml:space="preserve">
          <source>Subtract from the current value, returning the previous value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36deca2a4d52c82f398c08e2c02d7e0958fa511" translate="yes" xml:space="preserve">
          <source>Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_sub&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt;&lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">从当前值减去，返回前一个值。通过将&lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt;作为 &lt;code&gt;order&lt;/code&gt; ，可以通过 &lt;code&gt;fetch_sub&lt;/code&gt; 方法在 &lt;code&gt;std::sync::atomic&lt;/code&gt; 类型上使用此内在函数的稳定版本。例如，&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt; &lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="01f9ee6c62cb68598c5ad04009bdd80654f45782" translate="yes" xml:space="preserve">
          <source>Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_sub&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt;&lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">从当前值减去，返回前一个值。通过将&lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt;传递为 &lt;code&gt;order&lt;/code&gt; ，可以通过 &lt;code&gt;fetch_sub&lt;/code&gt; 方法在 &lt;code&gt;std::sync::atomic&lt;/code&gt; 类型上使用此内在函数的稳定版本。例如，&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt; &lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="98027837928d6092fd168f54912d1740c69bb3c2" translate="yes" xml:space="preserve">
          <source>Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_sub&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt;&lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">从当前值减去，返回前一个值。通过将 &lt;code&gt;fetch_sub&lt;/code&gt; &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt;作为 &lt;code&gt;order&lt;/code&gt; ，可以通过fetch_sub方法在 &lt;code&gt;std::sync::atomic&lt;/code&gt; 类型上使用此内在函数的稳定版本。例如，&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt; &lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8739440ba7fb4965f945f22a44909ed4049da661" translate="yes" xml:space="preserve">
          <source>Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_sub&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt;&lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">从当前值减去，返回前一个值。通过将&lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt;传递为 &lt;code&gt;order&lt;/code&gt; ，可以通过 &lt;code&gt;fetch_sub&lt;/code&gt; 方法在 &lt;code&gt;std::sync::atomic&lt;/code&gt; 类型上使用此内在函数的稳定版本。例如，&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt; &lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e3f7bf7f6931d667bb1df01f2e9b56aaa2bf806d" translate="yes" xml:space="preserve">
          <source>Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_sub&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt;&lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">从当前值减去，返回前一个值。通过将&lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt;传递为 &lt;code&gt;order&lt;/code&gt; ，可以通过 &lt;code&gt;fetch_sub&lt;/code&gt; 方法在 &lt;code&gt;std::sync::atomic&lt;/code&gt; 类型上使用此内在函数的稳定版本。例如，&lt;a href=&quot;../sync/atomic/struct.atomicisize#method.fetch_sub&quot;&gt; &lt;code&gt;AtomicIsize::fetch_sub&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a5b58ce4dec6fe8562096a10da3109ac06c55815" translate="yes" xml:space="preserve">
          <source>Subtraction</source>
          <target state="translated">Subtraction</target>
        </trans-unit>
        <trans-unit id="c26b71ada72dda0caa098081b6d86bfd9925fa6e" translate="yes" xml:space="preserve">
          <source>Subtraction assignment</source>
          <target state="translated">减法作业</target>
        </trans-unit>
        <trans-unit id="dd46138cf81b5a0258fb4c5654e6615e6cc93a7e" translate="yes" xml:space="preserve">
          <source>Subtracts a &lt;code&gt;usize&lt;/code&gt;, returning &lt;code&gt;None&lt;/code&gt; on underflow.</source>
          <target state="translated">减去 &lt;code&gt;usize&lt;/code&gt; ，下溢时返回 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="827c565210295f9c77c8e5e5bf33ccbc8edebc0c" translate="yes" xml:space="preserve">
          <source>Subtracts from the current value, returning the previous value.</source>
          <target state="translated">从当前值中减去,返回前值。</target>
        </trans-unit>
        <trans-unit id="4e3b6bf11e7a8ce5504d4d2280f9a0e61c02e368" translate="yes" xml:space="preserve">
          <source>Subtracts one to this step, returning the result.</source>
          <target state="translated">在这一步上减一,返回结果。</target>
        </trans-unit>
        <trans-unit id="180e17886fcb580556f532c189fc9937395bad22" translate="yes" xml:space="preserve">
          <source>Subtyping and Variance</source>
          <target state="translated">亚型和差异</target>
        </trans-unit>
        <trans-unit id="3d1243922c971b534b55617d3ded6691678e35c2" translate="yes" xml:space="preserve">
          <source>Subtyping is implicit and can occur at any stage in type checking or inference. Subtyping in Rust is very restricted and occurs only due to variance with respect to lifetimes and between types with higher ranked lifetimes. If we were to erase lifetimes from types, then the only subtyping would be due to type equality.</source>
          <target state="translated">子类型是隐式的,可以发生在类型检查或推理的任何阶段。Rust中的子类型化是非常受限制的,它只发生在与寿命有关的差异和具有较高等级寿命的类型之间。如果我们要从类型中抹去寿命,那么唯一的子类型化将是由于类型平等。</target>
        </trans-unit>
        <trans-unit id="8fda5eaa5590cd5c050254aecfb70c42e76913f4" translate="yes" xml:space="preserve">
          <source>Success! We now have a thread pool that executes connections asynchronously. There are never more than four threads created, so our system won&amp;rsquo;t get overloaded if the server receives a lot of requests. If we make a request to &lt;em&gt;/sleep&lt;/em&gt;, the server will be able to serve other requests by having another thread run them.</source>
          <target state="translated">成功！现在，我们有了一个线程池，它异步执行连接。创建的线程永远不会超过四个，因此如果服务器收到很多请求，我们的系统将不会过载。如果我们向&lt;em&gt;/ sleep&lt;/em&gt;发出请求，则服务器将能够通过让另一个线程运行它们来服务其他请求。</target>
        </trans-unit>
        <trans-unit id="82f2f5b0033fd69a634f318debaa8c2351d513d8" translate="yes" xml:space="preserve">
          <source>Successfully receiving value before encountering timeout:</source>
          <target state="translated">在遇到超时之前,成功接收价值。</target>
        </trans-unit>
        <trans-unit id="847fa24c98d0a37d4056f5d7d9ccf81fcdada47b" translate="yes" xml:space="preserve">
          <source>Successfully receiving value before reaching deadline:</source>
          <target state="translated">在到达截止日期前成功接收价值。</target>
        </trans-unit>
        <trans-unit id="0d7eef3e0063d585532586fa0d72f7e435b01a25" translate="yes" xml:space="preserve">
          <source>Successive calls return the same data. This is accomplished by passing &lt;code&gt;MSG_PEEK&lt;/code&gt; as a flag to the underlying &lt;code&gt;recv&lt;/code&gt; system call.</source>
          <target state="translated">连续调用返回相同的数据。这是通过将 &lt;code&gt;MSG_PEEK&lt;/code&gt; 作为标志传递给基础的 &lt;code&gt;recv&lt;/code&gt; 系统调用来完成的。</target>
        </trans-unit>
        <trans-unit id="847f894ab81be44e9f9e9de3f68a8d00592e1e58" translate="yes" xml:space="preserve">
          <source>Successive calls return the same data. This is accomplished by passing &lt;code&gt;MSG_PEEK&lt;/code&gt; as a flag to the underlying &lt;code&gt;recvfrom&lt;/code&gt; system call.</source>
          <target state="translated">连续调用返回相同的数据。这是通过将 &lt;code&gt;MSG_PEEK&lt;/code&gt; 作为标志传递给基础的 &lt;code&gt;recvfrom&lt;/code&gt; 系统调用来完成的。</target>
        </trans-unit>
        <trans-unit id="47211491c9881e551a7e8ae489bea685499a229a" translate="yes" xml:space="preserve">
          <source>Successors</source>
          <target state="translated">Successors</target>
        </trans-unit>
        <trans-unit id="ca25d4e5b9afff3f2cd86209645cf4e82d092c2b" translate="yes" xml:space="preserve">
          <source>Successors::all</source>
          <target state="translated">Successors::all</target>
        </trans-unit>
        <trans-unit id="ff457e55a8b4bd03c19d497ee28adc872da37d85" translate="yes" xml:space="preserve">
          <source>Successors::any</source>
          <target state="translated">Successors::any</target>
        </trans-unit>
        <trans-unit id="19068f8015c3f904f1bd7981e9ceeacc64fbbba0" translate="yes" xml:space="preserve">
          <source>Successors::borrow</source>
          <target state="translated">Successors::borrow</target>
        </trans-unit>
        <trans-unit id="2813bc7e0c6b9d60afa827fb07b672a6e7036d06" translate="yes" xml:space="preserve">
          <source>Successors::borrow_mut</source>
          <target state="translated">Successors::borrow_mut</target>
        </trans-unit>
        <trans-unit id="b0f265020b3bb94fe3479961f558b5c1dda5b404" translate="yes" xml:space="preserve">
          <source>Successors::by_ref</source>
          <target state="translated">Successors::by_ref</target>
        </trans-unit>
        <trans-unit id="1950b55bb354ba59a99f29bbbd5b49504161636e" translate="yes" xml:space="preserve">
          <source>Successors::chain</source>
          <target state="translated">Successors::chain</target>
        </trans-unit>
        <trans-unit id="592971c89231d9d99ce53dbc7b9bbaeba686dd0f" translate="yes" xml:space="preserve">
          <source>Successors::clone</source>
          <target state="translated">Successors::clone</target>
        </trans-unit>
        <trans-unit id="703ab2e668b52465eb6d70c1dd0d66576519b55c" translate="yes" xml:space="preserve">
          <source>Successors::clone_from</source>
          <target state="translated">Successors::clone_from</target>
        </trans-unit>
        <trans-unit id="2468b8c7f3cfe0edf9b6f46db4fc76e9cf1066ac" translate="yes" xml:space="preserve">
          <source>Successors::clone_into</source>
          <target state="translated">Successors::clone_into</target>
        </trans-unit>
        <trans-unit id="ec8893b95fc9e03ba873d6b635a0a78b49eaa278" translate="yes" xml:space="preserve">
          <source>Successors::cloned</source>
          <target state="translated">Successors::cloned</target>
        </trans-unit>
        <trans-unit id="86e0ffc137e86b93ab52ec77ee3d102a403d7cd5" translate="yes" xml:space="preserve">
          <source>Successors::cmp</source>
          <target state="translated">Successors::cmp</target>
        </trans-unit>
        <trans-unit id="5e0769a904821b7c0d6ec5a4620f0701e5fa936b" translate="yes" xml:space="preserve">
          <source>Successors::collect</source>
          <target state="translated">Successors::collect</target>
        </trans-unit>
        <trans-unit id="d856d9673c71e93007edf6f779c192f3280ca2ba" translate="yes" xml:space="preserve">
          <source>Successors::copied</source>
          <target state="translated">Successors::copied</target>
        </trans-unit>
        <trans-unit id="92ce543a3e6b6b6e9e54b1b369d3c4e309512981" translate="yes" xml:space="preserve">
          <source>Successors::count</source>
          <target state="translated">Successors::count</target>
        </trans-unit>
        <trans-unit id="81a3b2a0660286d17c4918743cb2faa1664f56ef" translate="yes" xml:space="preserve">
          <source>Successors::cycle</source>
          <target state="translated">Successors::cycle</target>
        </trans-unit>
        <trans-unit id="40e92c1abb5a99cabd4b86b31efcb6be9058297c" translate="yes" xml:space="preserve">
          <source>Successors::enumerate</source>
          <target state="translated">Successors::enumerate</target>
        </trans-unit>
        <trans-unit id="1afd48503e358e66f1596451ff8e2def738bc434" translate="yes" xml:space="preserve">
          <source>Successors::eq</source>
          <target state="translated">Successors::eq</target>
        </trans-unit>
        <trans-unit id="0231cc295af44fbf5bf28cb8677dd99e1fa9a062" translate="yes" xml:space="preserve">
          <source>Successors::filter</source>
          <target state="translated">Successors::filter</target>
        </trans-unit>
        <trans-unit id="68c14a43e966193c0f4eac10e1b0939b3da11439" translate="yes" xml:space="preserve">
          <source>Successors::filter_map</source>
          <target state="translated">Successors::filter_map</target>
        </trans-unit>
        <trans-unit id="872153f57331fb74f2d100ac219a2d37e760619a" translate="yes" xml:space="preserve">
          <source>Successors::find</source>
          <target state="translated">Successors::find</target>
        </trans-unit>
        <trans-unit id="5b06755e12dff22b74f6ddd6579a1ded4e983a52" translate="yes" xml:space="preserve">
          <source>Successors::find_map</source>
          <target state="translated">Successors::find_map</target>
        </trans-unit>
        <trans-unit id="355469d1e4c6c3f6cf2902dcfc1e83477580193b" translate="yes" xml:space="preserve">
          <source>Successors::flat_map</source>
          <target state="translated">Successors::flat_map</target>
        </trans-unit>
        <trans-unit id="fc8103f6db8028039a88aaa273d8bd87169300b0" translate="yes" xml:space="preserve">
          <source>Successors::flatten</source>
          <target state="translated">Successors::flatten</target>
        </trans-unit>
        <trans-unit id="274c7ccbbef6d39f929ba4589845a094e5fc62d9" translate="yes" xml:space="preserve">
          <source>Successors::fmt</source>
          <target state="translated">Successors::fmt</target>
        </trans-unit>
        <trans-unit id="c624e1ca197b76456b272c9cfd948b0520b26a0a" translate="yes" xml:space="preserve">
          <source>Successors::fold</source>
          <target state="translated">Successors::fold</target>
        </trans-unit>
        <trans-unit id="91796388afb397fd0a69d85640f8c9e0303b2d00" translate="yes" xml:space="preserve">
          <source>Successors::for_each</source>
          <target state="translated">Successors::for_each</target>
        </trans-unit>
        <trans-unit id="1243b9cf6c69f731fd0ec5014e094c1f65405bdb" translate="yes" xml:space="preserve">
          <source>Successors::from</source>
          <target state="translated">Successors::from</target>
        </trans-unit>
        <trans-unit id="62a361be244af8df3ce6041647a4f9b81d086733" translate="yes" xml:space="preserve">
          <source>Successors::fuse</source>
          <target state="translated">Successors::fuse</target>
        </trans-unit>
        <trans-unit id="ee8be1523044c558e5dd4ce469ad8504d2e46037" translate="yes" xml:space="preserve">
          <source>Successors::ge</source>
          <target state="translated">Successors::ge</target>
        </trans-unit>
        <trans-unit id="bd867ab196eafd6588f8ba654366f768105eae70" translate="yes" xml:space="preserve">
          <source>Successors::gt</source>
          <target state="translated">Successors::gt</target>
        </trans-unit>
        <trans-unit id="16e6b5226c5e44ff24bd79ccf4e5c1502f278bda" translate="yes" xml:space="preserve">
          <source>Successors::inspect</source>
          <target state="translated">Successors::inspect</target>
        </trans-unit>
        <trans-unit id="68571cf85e99f0a5f5085428aba568b08517ae74" translate="yes" xml:space="preserve">
          <source>Successors::into</source>
          <target state="translated">Successors::into</target>
        </trans-unit>
        <trans-unit id="b31b0879744c3b86690779c0e148760d56712ba9" translate="yes" xml:space="preserve">
          <source>Successors::into_iter</source>
          <target state="translated">Successors::into_iter</target>
        </trans-unit>
        <trans-unit id="72a31c20564630d8e7c3126e272ac0a052c8c8cb" translate="yes" xml:space="preserve">
          <source>Successors::is_sorted</source>
          <target state="translated">Successors::is_sorted</target>
        </trans-unit>
        <trans-unit id="b15dd1f0fa665b3d782947b39eea3a7c6f5dd3b4" translate="yes" xml:space="preserve">
          <source>Successors::is_sorted_by</source>
          <target state="translated">Successors::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="22d7b167571d745d1ee34d334fd8c828ae1f2240" translate="yes" xml:space="preserve">
          <source>Successors::is_sorted_by_key</source>
          <target state="translated">Successors::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="e8791031eb6a42f7ed0b47791fd730457e0bdab8" translate="yes" xml:space="preserve">
          <source>Successors::last</source>
          <target state="translated">Successors::last</target>
        </trans-unit>
        <trans-unit id="6220b3fa85ffb780ec1c8363bda735f8ee22e91d" translate="yes" xml:space="preserve">
          <source>Successors::le</source>
          <target state="translated">Successors::le</target>
        </trans-unit>
        <trans-unit id="21924b0e549cce2ec00446c1260fd744dcc15192" translate="yes" xml:space="preserve">
          <source>Successors::lt</source>
          <target state="translated">Successors::lt</target>
        </trans-unit>
        <trans-unit id="792431a3440ad278909bb0d25ebace8750c04a5f" translate="yes" xml:space="preserve">
          <source>Successors::map</source>
          <target state="translated">Successors::map</target>
        </trans-unit>
        <trans-unit id="00dd3b471f9a4897b0a2906faddfa7f75298cd40" translate="yes" xml:space="preserve">
          <source>Successors::max</source>
          <target state="translated">Successors::max</target>
        </trans-unit>
        <trans-unit id="3170148805e43b5ac70ff2a89be8b3c03c1b000d" translate="yes" xml:space="preserve">
          <source>Successors::max_by</source>
          <target state="translated">Successors::max_by</target>
        </trans-unit>
        <trans-unit id="db95e90d2f618b6ab956b4be0dd7f93c9b1196c7" translate="yes" xml:space="preserve">
          <source>Successors::max_by_key</source>
          <target state="translated">Successors::max_by_key</target>
        </trans-unit>
        <trans-unit id="049607bba1136e2f23c565b34595db9be7831565" translate="yes" xml:space="preserve">
          <source>Successors::min</source>
          <target state="translated">Successors::min</target>
        </trans-unit>
        <trans-unit id="9d3765c3752b9be8d937a4fa74a02fe3bb72a725" translate="yes" xml:space="preserve">
          <source>Successors::min_by</source>
          <target state="translated">Successors::min_by</target>
        </trans-unit>
        <trans-unit id="2a01f97b5790410ef37f0783a0398e17c50ede42" translate="yes" xml:space="preserve">
          <source>Successors::min_by_key</source>
          <target state="translated">Successors::min_by_key</target>
        </trans-unit>
        <trans-unit id="27d04e1bbd4a48c484ec0611ac64e8670899dda5" translate="yes" xml:space="preserve">
          <source>Successors::ne</source>
          <target state="translated">Successors::ne</target>
        </trans-unit>
        <trans-unit id="292f225916d80861494f9d1d1b01eb9d6531471e" translate="yes" xml:space="preserve">
          <source>Successors::next</source>
          <target state="translated">Successors::next</target>
        </trans-unit>
        <trans-unit id="d8a08af5da1116f074fd02601ed2e14a83af855d" translate="yes" xml:space="preserve">
          <source>Successors::nth</source>
          <target state="translated">Successors::nth</target>
        </trans-unit>
        <trans-unit id="5155b329b92839b0e22419d4fe027e6502ab9d1b" translate="yes" xml:space="preserve">
          <source>Successors::partial_cmp</source>
          <target state="translated">Successors::partial_cmp</target>
        </trans-unit>
        <trans-unit id="07669aa9181901dc27c8580d6cd27e477546e374" translate="yes" xml:space="preserve">
          <source>Successors::partition</source>
          <target state="translated">Successors::partition</target>
        </trans-unit>
        <trans-unit id="8834c0d732d68271e90f63319b2da52d3f633b35" translate="yes" xml:space="preserve">
          <source>Successors::peekable</source>
          <target state="translated">Successors::peekable</target>
        </trans-unit>
        <trans-unit id="0b5998d20fdcbb6c65949fef711e23e3cbde2f72" translate="yes" xml:space="preserve">
          <source>Successors::position</source>
          <target state="translated">Successors::position</target>
        </trans-unit>
        <trans-unit id="63f4c6493271a9afdc6a667ed7dc8d79b67a7c59" translate="yes" xml:space="preserve">
          <source>Successors::product</source>
          <target state="translated">Successors::product</target>
        </trans-unit>
        <trans-unit id="900d996cb613c9c81f35f0b87aabcf7142891402" translate="yes" xml:space="preserve">
          <source>Successors::rev</source>
          <target state="translated">Successors::rev</target>
        </trans-unit>
        <trans-unit id="116c09cdb2c40a444a38fbcd7af9a0e97032f788" translate="yes" xml:space="preserve">
          <source>Successors::rposition</source>
          <target state="translated">Successors::rposition</target>
        </trans-unit>
        <trans-unit id="0e28e122791acd5bc34cc262d7aa19f3d0ddd1f4" translate="yes" xml:space="preserve">
          <source>Successors::scan</source>
          <target state="translated">Successors::scan</target>
        </trans-unit>
        <trans-unit id="3324a366d39e3af1db411f7a361b650b92a5dd47" translate="yes" xml:space="preserve">
          <source>Successors::size_hint</source>
          <target state="translated">Successors::size_hint</target>
        </trans-unit>
        <trans-unit id="32baadec68f1782b1ace8480500781f8de9f5ff0" translate="yes" xml:space="preserve">
          <source>Successors::skip</source>
          <target state="translated">Successors::skip</target>
        </trans-unit>
        <trans-unit id="8727799c9c9f57e6ae0cc50ca234e15f521f9dfd" translate="yes" xml:space="preserve">
          <source>Successors::skip_while</source>
          <target state="translated">Successors::skip_while</target>
        </trans-unit>
        <trans-unit id="69237063777e88f0e21a4057346c126ddb36cda4" translate="yes" xml:space="preserve">
          <source>Successors::step_by</source>
          <target state="translated">Successors::step_by</target>
        </trans-unit>
        <trans-unit id="af19ff6a132e4c395abb1af7c0d3080667a6b211" translate="yes" xml:space="preserve">
          <source>Successors::sum</source>
          <target state="translated">Successors::sum</target>
        </trans-unit>
        <trans-unit id="3c059a7adc65648fe017594a987fb89e95858644" translate="yes" xml:space="preserve">
          <source>Successors::take</source>
          <target state="translated">Successors::take</target>
        </trans-unit>
        <trans-unit id="c5d47d16c9094041820103483f93e81fe1e767f4" translate="yes" xml:space="preserve">
          <source>Successors::take_while</source>
          <target state="translated">Successors::take_while</target>
        </trans-unit>
        <trans-unit id="8cf556d3ee802c95213468ac226384e1b75f3bc8" translate="yes" xml:space="preserve">
          <source>Successors::to_owned</source>
          <target state="translated">Successors::to_owned</target>
        </trans-unit>
        <trans-unit id="5cbef85eedec0d9909ac28b24a0e0b85fb7ea34d" translate="yes" xml:space="preserve">
          <source>Successors::try_fold</source>
          <target state="translated">Successors::try_fold</target>
        </trans-unit>
        <trans-unit id="d9f747f155cc529abef80f2cdebe7bab3998a867" translate="yes" xml:space="preserve">
          <source>Successors::try_for_each</source>
          <target state="translated">Successors::try_for_each</target>
        </trans-unit>
        <trans-unit id="979e3f5133ee044244f4ed37870b523dd8e6cd96" translate="yes" xml:space="preserve">
          <source>Successors::try_from</source>
          <target state="translated">Successors::try_from</target>
        </trans-unit>
        <trans-unit id="cf1744aeb5a27b2ec2b17c3a76c240c5af0a65fc" translate="yes" xml:space="preserve">
          <source>Successors::try_into</source>
          <target state="translated">Successors::try_into</target>
        </trans-unit>
        <trans-unit id="9c9b9406fe48b3145cd268089ac3d673f1822824" translate="yes" xml:space="preserve">
          <source>Successors::type_id</source>
          <target state="translated">Successors::type_id</target>
        </trans-unit>
        <trans-unit id="76fc2abf08945584b8a0a65c50ac695c8a146cc7" translate="yes" xml:space="preserve">
          <source>Successors::unzip</source>
          <target state="translated">Successors::unzip</target>
        </trans-unit>
        <trans-unit id="364edbaa60d32d7ea8487c2556f482c216f98418" translate="yes" xml:space="preserve">
          <source>Successors::zip</source>
          <target state="translated">Successors::zip</target>
        </trans-unit>
        <trans-unit id="aebe44407b9a6ddff91d48086518f1cce5d7f23e" translate="yes" xml:space="preserve">
          <source>Such cases can sometimes be resolved by iterating &quot;by value&quot; (or using &lt;code&gt;into_iter()&lt;/code&gt;) to avoid borrowing:</source>
          <target state="translated">有时可以通过&amp;ldquo;按值&amp;rdquo;迭代（或使用 &lt;code&gt;into_iter()&lt;/code&gt; ）避免借入来解决此类情况：</target>
        </trans-unit>
        <trans-unit id="c826432dabefc0a6b81fc96080ffac589eb1bc58" translate="yes" xml:space="preserve">
          <source>Such wrap-around never actually occurs mathematically; implementation artifacts make &lt;code&gt;x % y&lt;/code&gt; invalid for &lt;code&gt;MIN / -1&lt;/code&gt; on a signed type (where &lt;code&gt;MIN&lt;/code&gt; is the negative minimal value). In such a case, this function returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">这种折回实际上不会在数学上发生；实现工件使 &lt;code&gt;x % y&lt;/code&gt; 对于带符号类型的 &lt;code&gt;MIN / -1&lt;/code&gt; 无效（其中 &lt;code&gt;MIN&lt;/code&gt; 是负最小值）。在这种情况下，此函数返回 &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf5206a669f42ea76e7f7d41a5b0f6ce4dad1f88" translate="yes" xml:space="preserve">
          <source>Suffixes</source>
          <target state="translated">Suffixes</target>
        </trans-unit>
        <trans-unit id="fc9ce14b28c6f2c3b72caf056ca604b2b96f7d2b" translate="yes" xml:space="preserve">
          <source>Sum</source>
          <target state="translated">Sum</target>
        </trans-unit>
        <trans-unit id="31a2b066a752e79a961a5980aafa67014597a3b9" translate="yes" xml:space="preserve">
          <source>Sum::sum</source>
          <target state="translated">Sum::sum</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="4ec59543d08ccb5f40fa486ea16a3472f0d6211f" translate="yes" xml:space="preserve">
          <source>Sums the elements of an iterator.</source>
          <target state="translated">对迭代器的元素进行求和。</target>
        </trans-unit>
        <trans-unit id="746ee961f56ea975e3ce42dc870911c3aaaab7a9" translate="yes" xml:space="preserve">
          <source>Sums the elements of an iterator. &lt;a href=&quot;../../../iter/trait.iterator#method.sum&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">对迭代器的元素求和。&lt;a href=&quot;../../../iter/trait.iterator#method.sum&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="977f83fd581cd632cb9daf954b85476d1f205083" translate="yes" xml:space="preserve">
          <source>Sums the elements of an iterator. &lt;a href=&quot;../../iter/trait.iterator#method.sum&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">对迭代器的元素求和。&lt;a href=&quot;../../iter/trait.iterator#method.sum&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0ac744b0b2af4a706a61e699cc4d2f153fd808d0" translate="yes" xml:space="preserve">
          <source>Sums the elements of an iterator. &lt;a href=&quot;../iter/trait.iterator#method.sum&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">对迭代器的元素求和。&lt;a href=&quot;../iter/trait.iterator#method.sum&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a9bb54ff604716f8ba8c1250d02545ef0630b048" translate="yes" xml:space="preserve">
          <source>Sums the elements of an iterator. &lt;a href=&quot;iter/trait.iterator#method.sum&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">对迭代器的元素求和。&lt;a href=&quot;iter/trait.iterator#method.sum&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="de708ead25c6586fc3b199bb44ef6303db38e09f" translate="yes" xml:space="preserve">
          <source>Sums the elements of an iterator. &lt;a href=&quot;trait.iterator#method.sum&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">对迭代器的元素求和。&lt;a href=&quot;trait.iterator#method.sum&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a1b25f78b0406aa7e2a88bb5ced9425b4a20e2f6" translate="yes" xml:space="preserve">
          <source>Supertraits</source>
          <target state="translated">Supertraits</target>
        </trans-unit>
        <trans-unit id="42640d817417171608fd2baec7acce81bc167575" translate="yes" xml:space="preserve">
          <source>Supertraits are declared by trait bounds on the &lt;code&gt;Self&lt;/code&gt; type of a trait and transitively the supertraits of the traits declared in those trait bounds. It is an error for a trait to be its own supertrait.</source>
          <target state="translated">特质是由特质的&amp;ldquo; &lt;code&gt;Self&lt;/code&gt; 类型上的特质范围声明的，并且在这些特质范围中声明的特质的超特性是可传递的。将特征作为其自身的特征是错误的。</target>
        </trans-unit>
        <trans-unit id="e2a90d19e495204777b61de87a681a795e0adacd" translate="yes" xml:space="preserve">
          <source>Support for Non-Lexical Lifetimes (NLL) has been included in the Rust compiler since 1.31, and has been enabled on the 2015 edition since 1.36. The new borrow checker for NLL uncovered some bugs in the old borrow checker, which in some cases allowed unsound code to compile, resulting in memory safety issues.</source>
          <target state="translated">从1.31开始,Rust编译器中就包含了对非词法寿命(NLL)的支持,并从1.36开始在2015版上启用。新的NLL借贷检查器发现了旧的借贷检查器中的一些bug,在某些情况下,旧的借贷检查器允许不健全的代码编译,导致内存安全问题。</target>
        </trans-unit>
        <trans-unit id="7e049bacb5f2db1af19289d8ae54b64cc4730695" translate="yes" xml:space="preserve">
          <source>Support for capturing a stack backtrace of an OS thread</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa06b2fb894619961652b14f2242b6b3ec47a26f" translate="yes" xml:space="preserve">
          <source>Supported arguments</source>
          <target state="translated">支持的参数</target>
        </trans-unit>
        <trans-unit id="0c51256ed714ac802a5d63dcf74f4ee8d71cb011" translate="yes" xml:space="preserve">
          <source>Supported arguments are:</source>
          <target state="translated">支持的论据有:</target>
        </trans-unit>
        <trans-unit id="751d5c1fc0ef30fc32a290589ad02a6ffcd4387c" translate="yes" xml:space="preserve">
          <source>Supporting trait for inherent methods of &lt;code&gt;f32&lt;/code&gt; and &lt;code&gt;f64&lt;/code&gt; such as &lt;code&gt;round_unchecked_to&lt;/code&gt;. Typically doesn&amp;rsquo;t need to be used directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9bc56f77e9d18067debc9d58dd2dd8d7d29330e" translate="yes" xml:space="preserve">
          <source>Suppose we have a struct &lt;code&gt;Foo&lt;/code&gt; and we would like to define some methods for it. The following definition leads to a compiler error:</source>
          <target state="translated">假设我们有一个结构 &lt;code&gt;Foo&lt;/code&gt; ，我们想为其定义一些方法。以下定义导致编译器错误：</target>
        </trans-unit>
        <trans-unit id="e7756b5d7efcfa4cb2a957256e406c4ea97bb40d" translate="yes" xml:space="preserve">
          <source>Suppose we have a struct &lt;code&gt;Foo&lt;/code&gt; and we would like to define some methods for it. The previous code example has a definition which leads to a compiler error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ad27b6d9aabd435b91994772194c4231b3bd84" translate="yes" xml:space="preserve">
          <source>Suspend execution until the result of a &lt;a href=&quot;future/trait.future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; is ready.</source>
          <target state="translated">暂停执行，直到准备好&lt;a href=&quot;future/trait.future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;的结果。</target>
        </trans-unit>
        <trans-unit id="f344580ac42f760d329f42fd603592846f6ea50b" translate="yes" xml:space="preserve">
          <source>Svenska</source>
          <target state="translated">Svenska</target>
        </trans-unit>
        <trans-unit id="6fa895abf66c2d0744bbd0ec4bce5f6077898e14" translate="yes" xml:space="preserve">
          <source>Swapping things out of difficult situations</source>
          <target state="translated">摆脱困境的事情</target>
        </trans-unit>
        <trans-unit id="4f392569a35880d21c54f7d35309db85e50ed430" translate="yes" xml:space="preserve">
          <source>Swapping two elements across slices:</source>
          <target state="translated">跨片交换两个元素。</target>
        </trans-unit>
        <trans-unit id="3678c097c4b9666e143868fcacfcde587989954f" translate="yes" xml:space="preserve">
          <source>Swapping two non-overlapping regions:</source>
          <target state="translated">交换两个非重叠的区域。</target>
        </trans-unit>
        <trans-unit id="3bcac73d2cc64502356e697972853f2c244973ce" translate="yes" xml:space="preserve">
          <source>Swapping two overlapping regions:</source>
          <target state="translated">交换两个重叠的区域。</target>
        </trans-unit>
        <trans-unit id="eedeb1e51aacec6141066634cd1988defdb9d0af" translate="yes" xml:space="preserve">
          <source>Swaps &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; bytes between the two regions of memory beginning at &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. The two regions must &lt;em&gt;not&lt;/em&gt; overlap.</source>
          <target state="translated">交换 &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; 从 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 开始的两个内存区域之间的size * of :: &amp;lt;T&amp;gt;（）个字节。这两个区域&lt;em&gt;不得&lt;/em&gt;重叠。</target>
        </trans-unit>
        <trans-unit id="c0aa3523939394db86c348e1e178ef2f7a3ecdf8" translate="yes" xml:space="preserve">
          <source>Swaps all elements in &lt;code&gt;self&lt;/code&gt; with those in &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">交换中的所有元素 &lt;code&gt;self&lt;/code&gt; 与那些在 &lt;code&gt;other&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d32971ccabef7f3d7a450cb84ee57876533c47c2" translate="yes" xml:space="preserve">
          <source>Swaps elements at indices &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;.</source>
          <target state="translated">交换索引为 &lt;code&gt;i&lt;/code&gt; 和 &lt;code&gt;j&lt;/code&gt; 的元素。</target>
        </trans-unit>
        <trans-unit id="fdce01c6df5169cc9979a89b19125d7bc51ad25e" translate="yes" xml:space="preserve">
          <source>Swaps the values at two mutable locations of the same type, without deinitializing either.</source>
          <target state="translated">交换同一类型的两个可变位置的值,而不对其中一个进行初始化。</target>
        </trans-unit>
        <trans-unit id="a3027ed7ad2411be1ff24cf181d51bf11eef914e" translate="yes" xml:space="preserve">
          <source>Swaps the values at two mutable locations of the same type, without deinitializing either. They may overlap, unlike &lt;code&gt;mem::swap&lt;/code&gt; which is otherwise equivalent.</source>
          <target state="translated">在相同类型的两个可变位置交换值，而无需取消初始化任何一个。它们可能重叠，不像 &lt;code&gt;mem::swap&lt;/code&gt; 那样等效。</target>
        </trans-unit>
        <trans-unit id="e5804e2680bbf409e9711fba23da7e1601664574" translate="yes" xml:space="preserve">
          <source>Swaps the values at two mutable locations, without deinitializing either one.</source>
          <target state="translated">交换两个可改变的位置的值,而不对其中任何一个进行初始化。</target>
        </trans-unit>
        <trans-unit id="1fd8ffb7f815e528ed8af409b60856c93a9a751c" translate="yes" xml:space="preserve">
          <source>Swaps the values of two Cells. Difference with &lt;code&gt;std::mem::swap&lt;/code&gt; is that this function doesn't require &lt;code&gt;&amp;amp;mut&lt;/code&gt; reference.</source>
          <target state="translated">交换两个单元格的值。与 &lt;code&gt;std::mem::swap&lt;/code&gt; 区别在于此函数不需要 &lt;code&gt;&amp;amp;mut&lt;/code&gt; 引用。</target>
        </trans-unit>
        <trans-unit id="6cd7b5422bbc044c815aff402efd2901b033d656" translate="yes" xml:space="preserve">
          <source>Swaps the wrapped value of &lt;code&gt;self&lt;/code&gt; with the wrapped value of &lt;code&gt;other&lt;/code&gt;, without deinitializing either one.</source>
          <target state="translated">将 &lt;code&gt;self&lt;/code&gt; 的包装值与 &lt;code&gt;other&lt;/code&gt; 的包装值交换，而无需对其中一个进行初始化。</target>
        </trans-unit>
        <trans-unit id="4c1c8cd4078d42e5c37f2b0d7d1520827b39d7c3" translate="yes" xml:space="preserve">
          <source>Swaps two elements in the slice.</source>
          <target state="translated">交换片中的两个元素。</target>
        </trans-unit>
        <trans-unit id="50323b1221425cdeeb66113fb7b9cdb3a3e5fd7f" translate="yes" xml:space="preserve">
          <source>Swift: optional bindings</source>
          <target state="translated">Swift:可选绑定</target>
        </trans-unit>
        <trans-unit id="089d821d217b96a759462aabcf6fff5c64ad4ce2" translate="yes" xml:space="preserve">
          <source>Switch to the Rust 2018 edition to use &lt;code&gt;async fn&lt;/code&gt;.</source>
          <target state="translated">切换到Rust 2018版本以使用 &lt;code&gt;async fn&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="95a08ed7860a49ec3205ac0ec2e36be644cf65f0" translate="yes" xml:space="preserve">
          <source>Switching from an &lt;code&gt;expect&lt;/code&gt; call to a &lt;code&gt;match&lt;/code&gt; expression is how you generally move from crashing on an error to handling the error. Remember that &lt;code&gt;parse&lt;/code&gt; returns a &lt;code&gt;Result&lt;/code&gt; type and &lt;code&gt;Result&lt;/code&gt; is an enum that has the variants &lt;code&gt;Ok&lt;/code&gt; or &lt;code&gt;Err&lt;/code&gt;. We&amp;rsquo;re using a &lt;code&gt;match&lt;/code&gt; expression here, as we did with the &lt;code&gt;Ordering&lt;/code&gt; result of the &lt;code&gt;cmp&lt;/code&gt; method.</source>
          <target state="translated">从 &lt;code&gt;expect&lt;/code&gt; 调用切换到 &lt;code&gt;match&lt;/code&gt; 表达式通常是您从崩溃崩溃到处理错误的过程。请记住， &lt;code&gt;parse&lt;/code&gt; 返回一个 &lt;code&gt;Result&lt;/code&gt; 类型，而 &lt;code&gt;Result&lt;/code&gt; 是一个具有 &lt;code&gt;Ok&lt;/code&gt; 或 &lt;code&gt;Err&lt;/code&gt; 变体的枚举。我们在这里使用 &lt;code&gt;match&lt;/code&gt; 表达式，就像对 &lt;code&gt;cmp&lt;/code&gt; 方法的 &lt;code&gt;Ordering&lt;/code&gt; 结果所做的那样。</target>
        </trans-unit>
        <trans-unit id="1aba4a88c1e39dbb48bcb07e6c57f7cedbc68985" translate="yes" xml:space="preserve">
          <source>Switching to &lt;code&gt;ManuallyDrop&lt;/code&gt; avoids both issues:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="4b48261a4e00a734fa110aa9af179acecea010bc" translate="yes" xml:space="preserve">
          <source>SymmetricDifference</source>
          <target state="translated">SymmetricDifference</target>
        </trans-unit>
        <trans-unit id="905f63092ff26517a7aa8083857b3c8af9707002" translate="yes" xml:space="preserve">
          <source>Sync</source>
          <target state="translated">Sync</target>
        </trans-unit>
        <trans-unit id="71fc7d58328fdff349813437fe961809ce1f715c" translate="yes" xml:space="preserve">
          <source>SyncLazy</source>
          <target state="translated">SyncLazy</target>
        </trans-unit>
        <trans-unit id="eee7844ceaab6f2f7f4e504271cd8552aff725c2" translate="yes" xml:space="preserve">
          <source>SyncOnceCell</source>
          <target state="translated">SyncOnceCell</target>
        </trans-unit>
        <trans-unit id="acda95d54ba680a07dc8d07beb95e6647f19554c" translate="yes" xml:space="preserve">
          <source>SyncSender</source>
          <target state="translated">SyncSender</target>
        </trans-unit>
        <trans-unit id="57ff11e64d0d6cfc9b8b16408456e9e9c94ecf10" translate="yes" xml:space="preserve">
          <source>Synchronous channels:</source>
          <target state="translated">同步通道。</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="42d920396ab185dc25079a48f6e8d88661b2cc69" translate="yes" xml:space="preserve">
          <source>Synthesizing a trait object with mismatched types&amp;mdash;one where the vtable does not correspond to the type of the value to which the data pointer points&amp;mdash;is highly likely to lead to undefined behavior.</source>
          <target state="translated">合成具有不匹配类型的特征对象（其中vtable与数据指针所指向的值的类型不对应的类型）很可能导致未定义的行为。</target>
        </trans-unit>
        <trans-unit id="bc0792d8dc81e8aa30b987246a5ce97c40cd6833" translate="yes" xml:space="preserve">
          <source>System</source>
          <target state="translated">System</target>
        </trans-unit>
        <trans-unit id="d15510a56a7d5a845e5cad6e39549853df210154" translate="yes" xml:space="preserve">
          <source>System call</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a4090eab26592089b75b988fa31111a7541205" translate="yes" xml:space="preserve">
          <source>System::alloc</source>
          <target state="translated">System::alloc</target>
        </trans-unit>
        <trans-unit id="54a4d3554f6cd3709461bf54d436f4c16d2ee0b5" translate="yes" xml:space="preserve">
          <source>System::alloc_array</source>
          <target state="translated">System::alloc_array</target>
        </trans-unit>
        <trans-unit id="65d6e3c2462c41179417d092e6854a6e9523dfad" translate="yes" xml:space="preserve">
          <source>System::alloc_excess</source>
          <target state="translated">System::alloc_excess</target>
        </trans-unit>
        <trans-unit id="5a28c8745d715d92a8fc760acf190672373404b3" translate="yes" xml:space="preserve">
          <source>System::alloc_one</source>
          <target state="translated">System::alloc_one</target>
        </trans-unit>
        <trans-unit id="557c1b99d016f4bce7bd87785f7d8ff396dfaa5f" translate="yes" xml:space="preserve">
          <source>System::alloc_zeroed</source>
          <target state="translated">System::alloc_zeroed</target>
        </trans-unit>
        <trans-unit id="be64b27274e3cecbecd34f9851715a023e7ca3b3" translate="yes" xml:space="preserve">
          <source>System::borrow</source>
          <target state="translated">System::borrow</target>
        </trans-unit>
        <trans-unit id="924a5dfdc6246e001f1718787e4f539852b735b5" translate="yes" xml:space="preserve">
          <source>System::borrow_mut</source>
          <target state="translated">System::borrow_mut</target>
        </trans-unit>
        <trans-unit id="a9a29409339d6dde8b813fa3dd59d0c508c62c37" translate="yes" xml:space="preserve">
          <source>System::clone</source>
          <target state="translated">System::clone</target>
        </trans-unit>
        <trans-unit id="acb6b7853c64a87ed86c6559ce0018845dbe735d" translate="yes" xml:space="preserve">
          <source>System::clone_from</source>
          <target state="translated">System::clone_from</target>
        </trans-unit>
        <trans-unit id="9f2214d86a1d870030f3cf722563ad7ca29aca35" translate="yes" xml:space="preserve">
          <source>System::clone_into</source>
          <target state="translated">System::clone_into</target>
        </trans-unit>
        <trans-unit id="fc1063d279e7c46582d7c4bf68cae7e266a26371" translate="yes" xml:space="preserve">
          <source>System::dealloc</source>
          <target state="translated">System::dealloc</target>
        </trans-unit>
        <trans-unit id="bfd2f54111f0bac9ba29a94cac444aa143f60b6d" translate="yes" xml:space="preserve">
          <source>System::dealloc_array</source>
          <target state="translated">System::dealloc_array</target>
        </trans-unit>
        <trans-unit id="74ad656983c908a3ebe0f98c614210f296bd1983" translate="yes" xml:space="preserve">
          <source>System::dealloc_one</source>
          <target state="translated">System::dealloc_one</target>
        </trans-unit>
        <trans-unit id="4fc3847c34aedea5258f4be144ec84ec1c395c81" translate="yes" xml:space="preserve">
          <source>System::default</source>
          <target state="translated">System::default</target>
        </trans-unit>
        <trans-unit id="faa9c7496c12529bc5030d129aa4abc0b1360ddf" translate="yes" xml:space="preserve">
          <source>System::fmt</source>
          <target state="translated">System::fmt</target>
        </trans-unit>
        <trans-unit id="2f9be0649f5627da66556ad4451342e18e6a839f" translate="yes" xml:space="preserve">
          <source>System::from</source>
          <target state="translated">System::from</target>
        </trans-unit>
        <trans-unit id="b1814bf067e1159aa0fbbbc5030c7bc803107618" translate="yes" xml:space="preserve">
          <source>System::grow_in_place</source>
          <target state="translated">System::grow_in_place</target>
        </trans-unit>
        <trans-unit id="67ea11fad484444d367b11f4dedf8659f527a43e" translate="yes" xml:space="preserve">
          <source>System::into</source>
          <target state="translated">System::into</target>
        </trans-unit>
        <trans-unit id="a3e701d278cc112d3cb7bad071e23913c72e29c5" translate="yes" xml:space="preserve">
          <source>System::realloc</source>
          <target state="translated">System::realloc</target>
        </trans-unit>
        <trans-unit id="de720799ebcfbbbc1c0cf105f4790e63b36c02ce" translate="yes" xml:space="preserve">
          <source>System::realloc_array</source>
          <target state="translated">System::realloc_array</target>
        </trans-unit>
        <trans-unit id="6d0361de5a3221f570b6ce17b3529919617bb827" translate="yes" xml:space="preserve">
          <source>System::realloc_excess</source>
          <target state="translated">System::realloc_excess</target>
        </trans-unit>
        <trans-unit id="6b6a830aee020e970b08bde51ae376893f7e4f63" translate="yes" xml:space="preserve">
          <source>System::shrink_in_place</source>
          <target state="translated">System::shrink_in_place</target>
        </trans-unit>
        <trans-unit id="19835154048921e40c04a195f21e2286f35f8332" translate="yes" xml:space="preserve">
          <source>System::to_owned</source>
          <target state="translated">System::to_owned</target>
        </trans-unit>
        <trans-unit id="32589a0ce565ea8bea9adf09415022dfe4622ef8" translate="yes" xml:space="preserve">
          <source>System::try_from</source>
          <target state="translated">System::try_from</target>
        </trans-unit>
        <trans-unit id="40d1da99e82a9fc567be0b189b54a1d346521b5d" translate="yes" xml:space="preserve">
          <source>System::try_into</source>
          <target state="translated">System::try_into</target>
        </trans-unit>
        <trans-unit id="2e5d3c93be7b6c0d01693b2fad7e0d06199fc24e" translate="yes" xml:space="preserve">
          <source>System::type_id</source>
          <target state="translated">System::type_id</target>
        </trans-unit>
        <trans-unit id="0ae4fd3d17652f62ba6d39cc3bc8c7b046ffa89a" translate="yes" xml:space="preserve">
          <source>System::usable_size</source>
          <target state="translated">System::usable_size</target>
        </trans-unit>
        <trans-unit id="cf2a95ca758b8bdeeb2ecf600f0df3a984af4e8f" translate="yes" xml:space="preserve">
          <source>SystemTime</source>
          <target state="translated">SystemTime</target>
        </trans-unit>
        <trans-unit id="6de28e70cd048e60438b7fb2fb2d338c28cc9d28" translate="yes" xml:space="preserve">
          <source>SystemTime::add</source>
          <target state="translated">SystemTime::add</target>
        </trans-unit>
        <trans-unit id="f53054c84083c87dad7a16797134a10dc05ad366" translate="yes" xml:space="preserve">
          <source>SystemTime::add_assign</source>
          <target state="translated">SystemTime::add_assign</target>
        </trans-unit>
        <trans-unit id="8b843630c6cc0a310c609322bf3aeedd203fc456" translate="yes" xml:space="preserve">
          <source>SystemTime::borrow</source>
          <target state="translated">SystemTime::borrow</target>
        </trans-unit>
        <trans-unit id="bcf2dbc4fa00587096c65fd909de305e779e3435" translate="yes" xml:space="preserve">
          <source>SystemTime::borrow_mut</source>
          <target state="translated">SystemTime::borrow_mut</target>
        </trans-unit>
        <trans-unit id="8911750515d5acee11f078578620e9d7b76b4907" translate="yes" xml:space="preserve">
          <source>SystemTime::checked_add</source>
          <target state="translated">SystemTime::checked_add</target>
        </trans-unit>
        <trans-unit id="6a74a25628c082c1f0211d7733d08444207c51c6" translate="yes" xml:space="preserve">
          <source>SystemTime::checked_sub</source>
          <target state="translated">SystemTime::checked_sub</target>
        </trans-unit>
        <trans-unit id="d25f5b3127de07dc72e4f4b5b76eec8c9afa7cd5" translate="yes" xml:space="preserve">
          <source>SystemTime::clamp</source>
          <target state="translated">SystemTime::clamp</target>
        </trans-unit>
        <trans-unit id="85d12e17b2a3e0886623c9a9330551e0e2dda827" translate="yes" xml:space="preserve">
          <source>SystemTime::clone</source>
          <target state="translated">SystemTime::clone</target>
        </trans-unit>
        <trans-unit id="d1812be2207dc89ec7492655f9534f26a47885ca" translate="yes" xml:space="preserve">
          <source>SystemTime::clone_from</source>
          <target state="translated">SystemTime::clone_from</target>
        </trans-unit>
        <trans-unit id="fefad6c61f3507df53f0c4d6729c6131b1ee31a0" translate="yes" xml:space="preserve">
          <source>SystemTime::clone_into</source>
          <target state="translated">SystemTime::clone_into</target>
        </trans-unit>
        <trans-unit id="d0735d903813fce7136f980ed8f9f5f0497d29d4" translate="yes" xml:space="preserve">
          <source>SystemTime::cmp</source>
          <target state="translated">SystemTime::cmp</target>
        </trans-unit>
        <trans-unit id="3ddfb12982d076992356eb84716fef9dac4e0b3f" translate="yes" xml:space="preserve">
          <source>SystemTime::duration_since</source>
          <target state="translated">SystemTime::duration_since</target>
        </trans-unit>
        <trans-unit id="50add06ac79a784bac330ff0b76948992a00ee87" translate="yes" xml:space="preserve">
          <source>SystemTime::elapsed</source>
          <target state="translated">SystemTime::elapsed</target>
        </trans-unit>
        <trans-unit id="de3695b0eb5e89b7df24005edb3f42fac52f9aa1" translate="yes" xml:space="preserve">
          <source>SystemTime::eq</source>
          <target state="translated">SystemTime::eq</target>
        </trans-unit>
        <trans-unit id="3313a47e892c0420901e9c43e13b9d4c90e978a8" translate="yes" xml:space="preserve">
          <source>SystemTime::fmt</source>
          <target state="translated">SystemTime::fmt</target>
        </trans-unit>
        <trans-unit id="d01f5ea82664e6cd13e4de055b6806c7e3492363" translate="yes" xml:space="preserve">
          <source>SystemTime::from</source>
          <target state="translated">SystemTime::from</target>
        </trans-unit>
        <trans-unit id="7a80f500b3f020bcc97e0ea02099d499bde9df33" translate="yes" xml:space="preserve">
          <source>SystemTime::ge</source>
          <target state="translated">SystemTime::ge</target>
        </trans-unit>
        <trans-unit id="cab608574690880943110e23fcdfff81353e2cec" translate="yes" xml:space="preserve">
          <source>SystemTime::gt</source>
          <target state="translated">SystemTime::gt</target>
        </trans-unit>
        <trans-unit id="eda842dc324de7b47a2da98fd6823f243fae85d5" translate="yes" xml:space="preserve">
          <source>SystemTime::hash</source>
          <target state="translated">SystemTime::hash</target>
        </trans-unit>
        <trans-unit id="270720e92dae3778dfad2c21f9b819c6ee14eb88" translate="yes" xml:space="preserve">
          <source>SystemTime::hash_slice</source>
          <target state="translated">SystemTime::hash_slice</target>
        </trans-unit>
        <trans-unit id="add4af9e8c4fcabc19c271d2e26044698ce5233c" translate="yes" xml:space="preserve">
          <source>SystemTime::into</source>
          <target state="translated">SystemTime::into</target>
        </trans-unit>
        <trans-unit id="c79d07b39045bf59844643181fe1a66d2d6a2a3c" translate="yes" xml:space="preserve">
          <source>SystemTime::le</source>
          <target state="translated">SystemTime::le</target>
        </trans-unit>
        <trans-unit id="e906ae906fd4fb8fed270fd61a1d1d891b0b09a5" translate="yes" xml:space="preserve">
          <source>SystemTime::lt</source>
          <target state="translated">SystemTime::lt</target>
        </trans-unit>
        <trans-unit id="c452a38b50fd3735966a65940a5b3e685a3822a7" translate="yes" xml:space="preserve">
          <source>SystemTime::max</source>
          <target state="translated">SystemTime::max</target>
        </trans-unit>
        <trans-unit id="0c8ffa986d1e91e73752403105c705d5b9cacee9" translate="yes" xml:space="preserve">
          <source>SystemTime::min</source>
          <target state="translated">SystemTime::min</target>
        </trans-unit>
        <trans-unit id="bf2e616661da6943d4186c4d8e0ce7bee8eaf123" translate="yes" xml:space="preserve">
          <source>SystemTime::ne</source>
          <target state="translated">SystemTime::ne</target>
        </trans-unit>
        <trans-unit id="e359e33ea2cab4f8cd9992e7068fda592729977b" translate="yes" xml:space="preserve">
          <source>SystemTime::now</source>
          <target state="translated">SystemTime::now</target>
        </trans-unit>
        <trans-unit id="d6d05eb8a7b681a7cbe7919a0b011648dedd4fff" translate="yes" xml:space="preserve">
          <source>SystemTime::partial_cmp</source>
          <target state="translated">SystemTime::partial_cmp</target>
        </trans-unit>
        <trans-unit id="2397159d232aa6e61bc7724148707096e3340707" translate="yes" xml:space="preserve">
          <source>SystemTime::sub</source>
          <target state="translated">SystemTime::sub</target>
        </trans-unit>
        <trans-unit id="0fa2a60f2bb6f2d53567ed62c2ed6f3f550c4259" translate="yes" xml:space="preserve">
          <source>SystemTime::sub_assign</source>
          <target state="translated">SystemTime::sub_assign</target>
        </trans-unit>
        <trans-unit id="4b4c217aaa63a449fd593dd51267f7acffd508ef" translate="yes" xml:space="preserve">
          <source>SystemTime::to_owned</source>
          <target state="translated">SystemTime::to_owned</target>
        </trans-unit>
        <trans-unit id="368655d42c3ebfa01a858407607efad9fe233b09" translate="yes" xml:space="preserve">
          <source>SystemTime::try_from</source>
          <target state="translated">SystemTime::try_from</target>
        </trans-unit>
        <trans-unit id="f5163a5b006f998cc68db71b6f8ed95122bf520b" translate="yes" xml:space="preserve">
          <source>SystemTime::try_into</source>
          <target state="translated">SystemTime::try_into</target>
        </trans-unit>
        <trans-unit id="75245c644ae203caa21b10140a838e8a354386c9" translate="yes" xml:space="preserve">
          <source>SystemTime::type_id</source>
          <target state="translated">SystemTime::type_id</target>
        </trans-unit>
        <trans-unit id="61843a9a7b438088df18e55acbfb813f2cb634cb" translate="yes" xml:space="preserve">
          <source>SystemTimeError</source>
          <target state="translated">SystemTimeError</target>
        </trans-unit>
        <trans-unit id="3c327bfb95e20921e2c45a7df2359d9e78fa0774" translate="yes" xml:space="preserve">
          <source>SystemTimeError::borrow</source>
          <target state="translated">SystemTimeError::borrow</target>
        </trans-unit>
        <trans-unit id="756ba79ba44d291fdc4d72af5ab65a63682b977f" translate="yes" xml:space="preserve">
          <source>SystemTimeError::borrow_mut</source>
          <target state="translated">SystemTimeError::borrow_mut</target>
        </trans-unit>
        <trans-unit id="a445192e48cb91b7ddcdc9fe5e6bbb748f5f824e" translate="yes" xml:space="preserve">
          <source>SystemTimeError::cause</source>
          <target state="translated">SystemTimeError::cause</target>
        </trans-unit>
        <trans-unit id="90af7cb006ad2ae95b0532ef83122e10317df3fa" translate="yes" xml:space="preserve">
          <source>SystemTimeError::clone</source>
          <target state="translated">SystemTimeError::clone</target>
        </trans-unit>
        <trans-unit id="62aa2086202093058f48c5a904b065728c5acf76" translate="yes" xml:space="preserve">
          <source>SystemTimeError::clone_from</source>
          <target state="translated">SystemTimeError::clone_from</target>
        </trans-unit>
        <trans-unit id="771c02c2b1582cbdf8239bab48068b44ea9ec4a5" translate="yes" xml:space="preserve">
          <source>SystemTimeError::clone_into</source>
          <target state="translated">SystemTimeError::clone_into</target>
        </trans-unit>
        <trans-unit id="a8d6a1c474bf33cfa63f362d5b1ab619524ba8fc" translate="yes" xml:space="preserve">
          <source>SystemTimeError::description</source>
          <target state="translated">SystemTimeError::description</target>
        </trans-unit>
        <trans-unit id="bfb8c3a3ded511c45ee591217758ae832873d576" translate="yes" xml:space="preserve">
          <source>SystemTimeError::duration</source>
          <target state="translated">SystemTimeError::duration</target>
        </trans-unit>
        <trans-unit id="141093a4af53e65aaae4bcb9a0e2551ee5a21d8e" translate="yes" xml:space="preserve">
          <source>SystemTimeError::fmt</source>
          <target state="translated">SystemTimeError::fmt</target>
        </trans-unit>
        <trans-unit id="064a1b4e4b4c9839707d55ca04bbb064105729ba" translate="yes" xml:space="preserve">
          <source>SystemTimeError::from</source>
          <target state="translated">SystemTimeError::from</target>
        </trans-unit>
        <trans-unit id="92137c5d1227debe366b2e935decfb37de6bca7a" translate="yes" xml:space="preserve">
          <source>SystemTimeError::into</source>
          <target state="translated">SystemTimeError::into</target>
        </trans-unit>
        <trans-unit id="f9fbd0e1ac763bcc77716e27807a2eb29e9ef379" translate="yes" xml:space="preserve">
          <source>SystemTimeError::source</source>
          <target state="translated">SystemTimeError::source</target>
        </trans-unit>
        <trans-unit id="6189ffe8d0f502e8dd110590a68f1b92c042b2a7" translate="yes" xml:space="preserve">
          <source>SystemTimeError::to_owned</source>
          <target state="translated">SystemTimeError::to_owned</target>
        </trans-unit>
        <trans-unit id="99c8707df39c678417307d659d8ec2643cf34c87" translate="yes" xml:space="preserve">
          <source>SystemTimeError::to_string</source>
          <target state="translated">SystemTimeError::to_string</target>
        </trans-unit>
        <trans-unit id="a571ff794b6e5e5a7042e4b35d8887fccecf1def" translate="yes" xml:space="preserve">
          <source>SystemTimeError::try_from</source>
          <target state="translated">SystemTimeError::try_from</target>
        </trans-unit>
        <trans-unit id="b43b4ddef54880135386b20279b4008857ba58fa" translate="yes" xml:space="preserve">
          <source>SystemTimeError::try_into</source>
          <target state="translated">SystemTimeError::try_into</target>
        </trans-unit>
        <trans-unit id="4dfc0af75d7c2e669650e816b66c9b168077cb71" translate="yes" xml:space="preserve">
          <source>SystemTimeError::type_id</source>
          <target state="translated">SystemTimeError::type_id</target>
        </trans-unit>
        <trans-unit id="62982af0908758670580c6edb499fa164bf62391" translate="yes" xml:space="preserve">
          <source>T is not part of the type of any other fields.</source>
          <target state="translated">T不属于任何其他字段的类型。</target>
        </trans-unit>
        <trans-unit id="5d8e119b694a3ad0a53f2da6776496644cbc9ace" translate="yes" xml:space="preserve">
          <source>TAU</source>
          <target state="translated">TAU</target>
        </trans-unit>
        <trans-unit id="88dab723a8048ac1748c6ac3ed61f66cca384674" translate="yes" xml:space="preserve">
          <source>TCP is the lower-level protocol that describes the details of how information gets from one server to another but doesn&amp;rsquo;t specify what that information is. HTTP builds on top of TCP by defining the contents of the requests and responses. It&amp;rsquo;s technically possible to use HTTP with other protocols, but in the vast majority of cases, HTTP sends its data over TCP. We&amp;rsquo;ll work with the raw bytes of TCP and HTTP requests and responses.</source>
          <target state="translated">TCP是较低级的协议，它描述了信息如何从一台服务器到达另一台服务器的详细信息，但未指定该信息是什么。HTTP通过定义请求和响应的内容在TCP之上构建。从技术上讲，可以将HTTP与其他协议一起使用，但是在大多数情况下，HTTP通过TCP发送其数据。我们将处理TCP和HTTP请求和响应的原始字节。</target>
        </trans-unit>
        <trans-unit id="d0e5af479d5d88b028bc8e426d2bad5fff91dfe1" translate="yes" xml:space="preserve">
          <source>TUPLE_INDEX :</source>
          <target state="translated">TUPLE_INDEX :</target>
        </trans-unit>
        <trans-unit id="93e2fc7411432d04fda574edd49997b4a1b99b05" translate="yes" xml:space="preserve">
          <source>TUPLE_INDEX:</source>
          <target state="translated">TUPLE_INDEX:</target>
        </trans-unit>
        <trans-unit id="fe06eb6459c87f0e497ce1805f076f104bfecf78" translate="yes" xml:space="preserve">
          <source>Tab</source>
          <target state="translated">Tab</target>
        </trans-unit>
        <trans-unit id="97b2dba627c5c69cbbe9e799ce7053600010979c" translate="yes" xml:space="preserve">
          <source>Tab is escaped as &lt;code&gt;\t&lt;/code&gt;.</source>
          <target state="translated">制表符转义为 &lt;code&gt;\t&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="107444e567e76aaf287da86db379437d4bca58d1" translate="yes" xml:space="preserve">
          <source>Table 3-1: Integer Types in Rust</source>
          <target state="translated">表3-1:Rust中的整数类型</target>
        </trans-unit>
        <trans-unit id="4841690bbbdfc16291049fbdf02eba44c26f1fe3" translate="yes" xml:space="preserve">
          <source>Table 3-2: Integer Literals in Rust</source>
          <target state="translated">表3-2:Rust中的整数字元</target>
        </trans-unit>
        <trans-unit id="c33f4867f17a5b96d7adebb6f5399b966869690d" translate="yes" xml:space="preserve">
          <source>Table B-1 contains the operators in Rust, an example of how the operator would appear in context, a short explanation, and whether that operator is overloadable. If an operator is overloadable, the relevant trait to use to overload that operator is listed.</source>
          <target state="translated">表B-1包含了Rust中的操作符,一个操作符在上下文中出现的例子,一个简短的解释,以及该操作符是否可过载。如果一个操作符是可过载的,则列出了用来过载该操作符的相关特征。</target>
        </trans-unit>
        <trans-unit id="06657d411733886ad4815d321e743fbac25fa35c" translate="yes" xml:space="preserve">
          <source>Table B-10 shows the contexts in which square brackets are used.</source>
          <target state="translated">表B-10显示了使用方括号的上下文。</target>
        </trans-unit>
        <trans-unit id="b0f55c131cec44e5644b700fd417c85f06fb616d" translate="yes" xml:space="preserve">
          <source>Table B-10: Square Brackets</source>
          <target state="translated">表B-10:方形托架</target>
        </trans-unit>
        <trans-unit id="4b8d696460a4a9fcc0bd9b82117a316b957d6d92" translate="yes" xml:space="preserve">
          <source>Table B-1: Operators</source>
          <target state="translated">表B-1:操作人员</target>
        </trans-unit>
        <trans-unit id="187573d7e017058a9ed2e4719fa7cf609635a69f" translate="yes" xml:space="preserve">
          <source>Table B-2 shows symbols that appear on their own and are valid in a variety of locations.</source>
          <target state="translated">表B-2是单独出现的符号,在各种位置都有效。</target>
        </trans-unit>
        <trans-unit id="5bcaa2d7409319767bd64f24bc2f5b698c31c2f6" translate="yes" xml:space="preserve">
          <source>Table B-2: Stand-Alone Syntax</source>
          <target state="translated">表B-2:独立语法</target>
        </trans-unit>
        <trans-unit id="d22f653aed1ed7601d671714f6ac72dc411879ec" translate="yes" xml:space="preserve">
          <source>Table B-3 shows symbols that appear in the context of a path through the module hierarchy to an item.</source>
          <target state="translated">表B-3显示了在模块层次结构中通往项目的路径中出现的符号。</target>
        </trans-unit>
        <trans-unit id="34ed3a50a31cc3bf2f8772b274e52fb1fba8bb0f" translate="yes" xml:space="preserve">
          <source>Table B-3: Path-Related Syntax</source>
          <target state="translated">表B-3:与路径相关的语法</target>
        </trans-unit>
        <trans-unit id="4f98443da31b276f343d03920ba370b5752a0e12" translate="yes" xml:space="preserve">
          <source>Table B-4 shows symbols that appear in the context of using generic type parameters.</source>
          <target state="translated">表B-4显示了在使用通用类型参数时出现的符号。</target>
        </trans-unit>
        <trans-unit id="a51bd646b6783d008d91206bd058642e25ccb613" translate="yes" xml:space="preserve">
          <source>Table B-4: Generics</source>
          <target state="translated">表B-4:通用名称</target>
        </trans-unit>
        <trans-unit id="7be53f4de27dd3e027a433732b5361994e8acf33" translate="yes" xml:space="preserve">
          <source>Table B-5 shows symbols that appear in the context of constraining generic type parameters with trait bounds.</source>
          <target state="translated">表B-5显示了在用性状边界约束通用类型参数的上下文中出现的符号。</target>
        </trans-unit>
        <trans-unit id="74d088e0d5105a150c11cd8201418a2cdf68ce02" translate="yes" xml:space="preserve">
          <source>Table B-5: Trait Bound Constraints</source>
          <target state="translated">表B-5:性状约束条件</target>
        </trans-unit>
        <trans-unit id="95a6989f46d2e1b6666effc627f0dfb8369e7126" translate="yes" xml:space="preserve">
          <source>Table B-6 shows symbols that appear in the context of calling or defining macros and specifying attributes on an item.</source>
          <target state="translated">表B-6显示了在调用或定义宏和指定项目上的属性时出现的符号。</target>
        </trans-unit>
        <trans-unit id="081245a408b8db11b7241a9aa12d47acc57ebbb1" translate="yes" xml:space="preserve">
          <source>Table B-6: Macros and Attributes</source>
          <target state="translated">表B-6:宏和属性</target>
        </trans-unit>
        <trans-unit id="5e0b9a29b00c6ee030b6432a864eb033a65415cb" translate="yes" xml:space="preserve">
          <source>Table B-7 shows symbols that create comments.</source>
          <target state="translated">表B-7显示了创建注释的符号。</target>
        </trans-unit>
        <trans-unit id="4ad0c419652bff27ff5c043b41e87164cc0fcd90" translate="yes" xml:space="preserve">
          <source>Table B-7: Comments</source>
          <target state="translated">表B-7:评论意见</target>
        </trans-unit>
        <trans-unit id="5e5041a9e3d4b92058040d4987d932b95e99c2a0" translate="yes" xml:space="preserve">
          <source>Table B-8 shows symbols that appear in the context of using tuples.</source>
          <target state="translated">表B-8显示了在使用元组的上下文中出现的符号。</target>
        </trans-unit>
        <trans-unit id="85c2ab407771f36e7df3b07094f3794d116c3d8c" translate="yes" xml:space="preserve">
          <source>Table B-8: Tuples</source>
          <target state="translated">表B-8:图组</target>
        </trans-unit>
        <trans-unit id="fb21f94ac7beb7e92db89eb376b6ab77aa7aee3c" translate="yes" xml:space="preserve">
          <source>Table B-9 shows the contexts in which curly braces are used.</source>
          <target state="translated">表B-9显示了使用大括号的上下文。</target>
        </trans-unit>
        <trans-unit id="5280511084907e7b3e0d40b5400f356c93c4f07d" translate="yes" xml:space="preserve">
          <source>Table B-9: Curly Brackets</source>
          <target state="translated">表B-9:卷曲括号</target>
        </trans-unit>
        <trans-unit id="68ddd91d0b9671a791224a07e7c4440e749e446a" translate="yes" xml:space="preserve">
          <source>Tagalog</source>
          <target state="translated">Tagalog</target>
        </trans-unit>
        <trans-unit id="56806a1ffdde7ef9980b8850997e6a7523aaf863" translate="yes" xml:space="preserve">
          <source>Take</source>
          <target state="translated">Take</target>
        </trans-unit>
        <trans-unit id="a6dbbbc65cd30f41925d4cc9cbaafbee7d6567d1" translate="yes" xml:space="preserve">
          <source>Take a look at Figure 4-1 to see what is happening to &lt;code&gt;String&lt;/code&gt; under the covers. A &lt;code&gt;String&lt;/code&gt; is made up of three parts, shown on the left: a pointer to the memory that holds the contents of the string, a length, and a capacity. This group of data is stored on the stack. On the right is the memory on the heap that holds the contents.</source>
          <target state="translated">看一下图4-1，看看幕后 &lt;code&gt;String&lt;/code&gt; 发生了什么。甲 &lt;code&gt;String&lt;/code&gt; 是由三个部分组成，左侧示出了：一个指针，它指向包含字符串，长度和容量的内容存储器中。这组数据存储在堆栈中。右边是保存内容的堆上的内存。</target>
        </trans-unit>
        <trans-unit id="36ec6cfef38f0db91a02b56f380c5dd23fbcdec5" translate="yes" xml:space="preserve">
          <source>Take ownership of the key and value from the map.</source>
          <target state="translated">从地图中掌握钥匙和价值的所有权。</target>
        </trans-unit>
        <trans-unit id="8c8c2173493e131ee8b48a42e8147c3b750d2630" translate="yes" xml:space="preserve">
          <source>Take ownership of the key.</source>
          <target state="translated">掌握钥匙的所有权。</target>
        </trans-unit>
        <trans-unit id="6da858ac7b477063b0ec9d1c06ffff8c75387904" translate="yes" xml:space="preserve">
          <source>Take the ownership of the key and value from the map.</source>
          <target state="translated">从地图中获取钥匙和价值的所有权。</target>
        </trans-unit>
        <trans-unit id="91d6dcfa01041153b7bffd73aa778c1ee9bded5c" translate="yes" xml:space="preserve">
          <source>Take, for example, &amp;ldquo;systems-level&amp;rdquo; work that deals with low-level details of memory management, data representation, and concurrency. Traditionally, this realm of programming is seen as arcane, accessible only to a select few who have devoted the necessary years learning to avoid its infamous pitfalls. And even those who practice it do so with caution, lest their code be open to exploits, crashes, or corruption.</source>
          <target state="translated">例如，&amp;ldquo;系统级&amp;rdquo;工作处理内存管理，数据表示和并发性的低级细节。传统上，这种编程领域被视为不可思议的事情，只有为数不多的那些已经花了必要时间学习以避免其臭名昭著的陷阱的少数人才能访问。甚至那些实践它的人也要谨慎行事，以免他们的代码容易受到攻击，崩溃或损坏。</target>
        </trans-unit>
        <trans-unit id="2f99659fc4357133905ac14735172ddd9f26ff12" translate="yes" xml:space="preserve">
          <source>Take::all</source>
          <target state="translated">Take::all</target>
        </trans-unit>
        <trans-unit id="fa84b4e334e8ffb11b0185b5d5b2059bbc588e04" translate="yes" xml:space="preserve">
          <source>Take::any</source>
          <target state="translated">Take::any</target>
        </trans-unit>
        <trans-unit id="644344a1bc287157a7afa8cd3d4802d748031cd9" translate="yes" xml:space="preserve">
          <source>Take::borrow</source>
          <target state="translated">Take::borrow</target>
        </trans-unit>
        <trans-unit id="df6979cefffdd2f4d3bbcfb1e822adc7a9293218" translate="yes" xml:space="preserve">
          <source>Take::borrow_mut</source>
          <target state="translated">Take::borrow_mut</target>
        </trans-unit>
        <trans-unit id="16ba68b0f6fff291bfa7e11d1289142f85246928" translate="yes" xml:space="preserve">
          <source>Take::by_ref</source>
          <target state="translated">Take::by_ref</target>
        </trans-unit>
        <trans-unit id="d66ca6caaca1439674289fd4eb15dc4bbef0041f" translate="yes" xml:space="preserve">
          <source>Take::bytes</source>
          <target state="translated">Take::bytes</target>
        </trans-unit>
        <trans-unit id="e098d2332710277d6884726c0b37aebcf6d05b6f" translate="yes" xml:space="preserve">
          <source>Take::chain</source>
          <target state="translated">Take::chain</target>
        </trans-unit>
        <trans-unit id="037f5b7d00803bd3613a8ff1175f4342224e6fce" translate="yes" xml:space="preserve">
          <source>Take::clone</source>
          <target state="translated">Take::clone</target>
        </trans-unit>
        <trans-unit id="8b7cdd4a2155c68828e3a6a4fd4c4d0e1bd38505" translate="yes" xml:space="preserve">
          <source>Take::clone_from</source>
          <target state="translated">Take::clone_from</target>
        </trans-unit>
        <trans-unit id="ef8c5a2dcf3ef6f62ca826010931a6cbb6acf63d" translate="yes" xml:space="preserve">
          <source>Take::clone_into</source>
          <target state="translated">Take::clone_into</target>
        </trans-unit>
        <trans-unit id="db1521c9f2ad232d30267c01d79b04b67738fe0a" translate="yes" xml:space="preserve">
          <source>Take::cloned</source>
          <target state="translated">Take::cloned</target>
        </trans-unit>
        <trans-unit id="0fbfdfb2676db7d0821ba964fab927f35118b020" translate="yes" xml:space="preserve">
          <source>Take::cmp</source>
          <target state="translated">Take::cmp</target>
        </trans-unit>
        <trans-unit id="28e3db5d351b7f10d2f5207128813ee23866b741" translate="yes" xml:space="preserve">
          <source>Take::collect</source>
          <target state="translated">Take::collect</target>
        </trans-unit>
        <trans-unit id="f9f7d91e6f8aebe8e972bb3877708579e50f8c53" translate="yes" xml:space="preserve">
          <source>Take::consume</source>
          <target state="translated">Take::consume</target>
        </trans-unit>
        <trans-unit id="d7d20739d10574a082d2d8dc9de0eeb531a7d6ea" translate="yes" xml:space="preserve">
          <source>Take::copied</source>
          <target state="translated">Take::copied</target>
        </trans-unit>
        <trans-unit id="41d79118de7924a2b1057bc724f6ab41ede2825d" translate="yes" xml:space="preserve">
          <source>Take::count</source>
          <target state="translated">Take::count</target>
        </trans-unit>
        <trans-unit id="fb8d89cf93235cb2f0ede4a3db0b188ba7471c01" translate="yes" xml:space="preserve">
          <source>Take::cycle</source>
          <target state="translated">Take::cycle</target>
        </trans-unit>
        <trans-unit id="f26504381e65bb5a0e296dc05009f75523a60b01" translate="yes" xml:space="preserve">
          <source>Take::enumerate</source>
          <target state="translated">Take::enumerate</target>
        </trans-unit>
        <trans-unit id="71758c4c9e5d6f9859af3d5deed53f3dffa8a29d" translate="yes" xml:space="preserve">
          <source>Take::eq</source>
          <target state="translated">Take::eq</target>
        </trans-unit>
        <trans-unit id="7c0673ce2b72d7f8075b3efeb2ef59721311ecd0" translate="yes" xml:space="preserve">
          <source>Take::fill_buf</source>
          <target state="translated">Take::fill_buf</target>
        </trans-unit>
        <trans-unit id="5a30e1ea16981cd11992bb422804463117bbe42b" translate="yes" xml:space="preserve">
          <source>Take::filter</source>
          <target state="translated">Take::filter</target>
        </trans-unit>
        <trans-unit id="56daf2a72739de2ab4afd0e7b888708d0e3be8d7" translate="yes" xml:space="preserve">
          <source>Take::filter_map</source>
          <target state="translated">Take::filter_map</target>
        </trans-unit>
        <trans-unit id="83bf9a26031e83bfd0ea4ad4c350aaabe753bc29" translate="yes" xml:space="preserve">
          <source>Take::find</source>
          <target state="translated">Take::find</target>
        </trans-unit>
        <trans-unit id="ee9337dc81980858c879c7427fc9ca8e985271cc" translate="yes" xml:space="preserve">
          <source>Take::find_map</source>
          <target state="translated">Take::find_map</target>
        </trans-unit>
        <trans-unit id="8f74d147cac58616dad76838f3006b54215628e5" translate="yes" xml:space="preserve">
          <source>Take::flat_map</source>
          <target state="translated">Take::flat_map</target>
        </trans-unit>
        <trans-unit id="a2c15a7a9022588f7d053abc05f4895da17e39cb" translate="yes" xml:space="preserve">
          <source>Take::flatten</source>
          <target state="translated">Take::flatten</target>
        </trans-unit>
        <trans-unit id="37752c3cd660a6c9fad3428f62425fb10e186654" translate="yes" xml:space="preserve">
          <source>Take::fmt</source>
          <target state="translated">Take::fmt</target>
        </trans-unit>
        <trans-unit id="8e6e0eb2c7ed378e0c0b67d5078ead14f6404c20" translate="yes" xml:space="preserve">
          <source>Take::fold</source>
          <target state="translated">Take::fold</target>
        </trans-unit>
        <trans-unit id="d69c2e1032d9ca8cdfdc032308452e43f66f1ab3" translate="yes" xml:space="preserve">
          <source>Take::for_each</source>
          <target state="translated">Take::for_each</target>
        </trans-unit>
        <trans-unit id="d062f90c8152829b635db5dfaf4a1c017b8fec1b" translate="yes" xml:space="preserve">
          <source>Take::from</source>
          <target state="translated">Take::from</target>
        </trans-unit>
        <trans-unit id="57d36e3553ba4f35423108a0c6d1dc12d3c118e8" translate="yes" xml:space="preserve">
          <source>Take::fuse</source>
          <target state="translated">Take::fuse</target>
        </trans-unit>
        <trans-unit id="14ce017aacc567616dcd221124371d517961806b" translate="yes" xml:space="preserve">
          <source>Take::ge</source>
          <target state="translated">Take::ge</target>
        </trans-unit>
        <trans-unit id="94602f9c049e55b20749048774a8ad063b1faacd" translate="yes" xml:space="preserve">
          <source>Take::get_mut</source>
          <target state="translated">Take::get_mut</target>
        </trans-unit>
        <trans-unit id="b0126421c3a15b8b1bc3fef86ac31fe40ea52cb1" translate="yes" xml:space="preserve">
          <source>Take::get_ref</source>
          <target state="translated">Take::get_ref</target>
        </trans-unit>
        <trans-unit id="350cb4e285cbb6b93ed77fcc25ffae4734065900" translate="yes" xml:space="preserve">
          <source>Take::gt</source>
          <target state="translated">Take::gt</target>
        </trans-unit>
        <trans-unit id="4fef59a0580d6449755183decfb5bdc6c6fd1a87" translate="yes" xml:space="preserve">
          <source>Take::initializer</source>
          <target state="translated">Take::initializer</target>
        </trans-unit>
        <trans-unit id="a17dc185152481cfa6d254124bbaca68590e36d6" translate="yes" xml:space="preserve">
          <source>Take::inspect</source>
          <target state="translated">Take::inspect</target>
        </trans-unit>
        <trans-unit id="b551aa5bf180dc9a42a570626bbad41ce58cbf4c" translate="yes" xml:space="preserve">
          <source>Take::into</source>
          <target state="translated">Take::into</target>
        </trans-unit>
        <trans-unit id="9c81e25d9cb4a6ea231d1730fef036851d62da4a" translate="yes" xml:space="preserve">
          <source>Take::into_inner</source>
          <target state="translated">Take::into_inner</target>
        </trans-unit>
        <trans-unit id="690d8211e27b2209f6443c61ba9f5d6b82f0ab0a" translate="yes" xml:space="preserve">
          <source>Take::into_iter</source>
          <target state="translated">Take::into_iter</target>
        </trans-unit>
        <trans-unit id="c3db51a2d5c6cf3a50237a92eeebd34087efbf9c" translate="yes" xml:space="preserve">
          <source>Take::is_empty</source>
          <target state="translated">Take::is_empty</target>
        </trans-unit>
        <trans-unit id="d5aa3b35319c3cfabee5112598ae4d95bd4760b8" translate="yes" xml:space="preserve">
          <source>Take::is_sorted</source>
          <target state="translated">Take::is_sorted</target>
        </trans-unit>
        <trans-unit id="c7a7a901a7f4b96f52a0ee09502f9fa86f52dd57" translate="yes" xml:space="preserve">
          <source>Take::is_sorted_by</source>
          <target state="translated">Take::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="d3b453542d922907484f0f0c04a0606e267e6675" translate="yes" xml:space="preserve">
          <source>Take::is_sorted_by_key</source>
          <target state="translated">Take::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="7a17b7815f75cfb59aeb5f6a46161e13fbfefa9f" translate="yes" xml:space="preserve">
          <source>Take::last</source>
          <target state="translated">Take::last</target>
        </trans-unit>
        <trans-unit id="a62fdfcb0b86b54a24ed75e1fcc56ea1febc28f3" translate="yes" xml:space="preserve">
          <source>Take::le</source>
          <target state="translated">Take::le</target>
        </trans-unit>
        <trans-unit id="c52c9e5c349d73ff44b03fe16ae20ce603c072bd" translate="yes" xml:space="preserve">
          <source>Take::len</source>
          <target state="translated">Take::len</target>
        </trans-unit>
        <trans-unit id="fc419e9744486960e9425d394adc0b9dcf90dca1" translate="yes" xml:space="preserve">
          <source>Take::limit</source>
          <target state="translated">Take::limit</target>
        </trans-unit>
        <trans-unit id="4b9fe90f6bdde3dc4f4c3a5813a4fc0481be0eda" translate="yes" xml:space="preserve">
          <source>Take::lines</source>
          <target state="translated">Take::lines</target>
        </trans-unit>
        <trans-unit id="914ef0291f7ced6860f526294681ef88bf528863" translate="yes" xml:space="preserve">
          <source>Take::lt</source>
          <target state="translated">Take::lt</target>
        </trans-unit>
        <trans-unit id="0ea12f56c3ca6b07e354de2ec3b9e270ee5e6d7a" translate="yes" xml:space="preserve">
          <source>Take::map</source>
          <target state="translated">Take::map</target>
        </trans-unit>
        <trans-unit id="289e06809e773f2407814cea93a4164a31b49e69" translate="yes" xml:space="preserve">
          <source>Take::max</source>
          <target state="translated">Take::max</target>
        </trans-unit>
        <trans-unit id="e70e720dfe58c7174ec8fb8d75433ae57bdeb88c" translate="yes" xml:space="preserve">
          <source>Take::max_by</source>
          <target state="translated">Take::max_by</target>
        </trans-unit>
        <trans-unit id="efceb7b8269a34401e398dbf818a37a7f5800afd" translate="yes" xml:space="preserve">
          <source>Take::max_by_key</source>
          <target state="translated">Take::max_by_key</target>
        </trans-unit>
        <trans-unit id="8cad337e79b36c57e83bdc9838a2cfd220fbbace" translate="yes" xml:space="preserve">
          <source>Take::min</source>
          <target state="translated">Take::min</target>
        </trans-unit>
        <trans-unit id="dcb496cce4ae794019de1ea001cf9e9be343b53a" translate="yes" xml:space="preserve">
          <source>Take::min_by</source>
          <target state="translated">Take::min_by</target>
        </trans-unit>
        <trans-unit id="ad7db3a0faaf142da3d12f9011d00fb703802c71" translate="yes" xml:space="preserve">
          <source>Take::min_by_key</source>
          <target state="translated">Take::min_by_key</target>
        </trans-unit>
        <trans-unit id="66ccdd13544d7c0426b8f5fad3c110a5cc85429d" translate="yes" xml:space="preserve">
          <source>Take::ne</source>
          <target state="translated">Take::ne</target>
        </trans-unit>
        <trans-unit id="5c311a3cbde242d60a470e5589b0a29485562e36" translate="yes" xml:space="preserve">
          <source>Take::next</source>
          <target state="translated">Take::next</target>
        </trans-unit>
        <trans-unit id="3362a9d47dbf6991be694a111b5fca7503b30eaf" translate="yes" xml:space="preserve">
          <source>Take::nth</source>
          <target state="translated">Take::nth</target>
        </trans-unit>
        <trans-unit id="ab21ae8f0fc4ae208887a6fdd7b3943ef10aaaf8" translate="yes" xml:space="preserve">
          <source>Take::partial_cmp</source>
          <target state="translated">Take::partial_cmp</target>
        </trans-unit>
        <trans-unit id="dcf4022c567f080c26833b94beefa427d3f92455" translate="yes" xml:space="preserve">
          <source>Take::partition</source>
          <target state="translated">Take::partition</target>
        </trans-unit>
        <trans-unit id="026dc2483c1a09268da4198b6ba9cc8ee678bd06" translate="yes" xml:space="preserve">
          <source>Take::peekable</source>
          <target state="translated">Take::peekable</target>
        </trans-unit>
        <trans-unit id="6964940d4ec09f8784e088cb3dc7a85e1f65676f" translate="yes" xml:space="preserve">
          <source>Take::position</source>
          <target state="translated">Take::position</target>
        </trans-unit>
        <trans-unit id="29e46e62c421c9f70ffb9b2d45050d1c695cd69f" translate="yes" xml:space="preserve">
          <source>Take::product</source>
          <target state="translated">Take::product</target>
        </trans-unit>
        <trans-unit id="b7159b9057e0d08a530082588bafac49c81b16bf" translate="yes" xml:space="preserve">
          <source>Take::read</source>
          <target state="translated">Take::read</target>
        </trans-unit>
        <trans-unit id="951c68a2ad2c7b6c8c47567bc558ad1eb9671a15" translate="yes" xml:space="preserve">
          <source>Take::read_exact</source>
          <target state="translated">Take::read_exact</target>
        </trans-unit>
        <trans-unit id="b79c4273727b2109fedb574f82ffa048030cb006" translate="yes" xml:space="preserve">
          <source>Take::read_line</source>
          <target state="translated">Take::read_line</target>
        </trans-unit>
        <trans-unit id="ead68e8fb88620a865b0b80676ca602341977ee4" translate="yes" xml:space="preserve">
          <source>Take::read_to_end</source>
          <target state="translated">Take::read_to_end</target>
        </trans-unit>
        <trans-unit id="8ad0fb8860aee4596cb4d19117f9339b3e96719c" translate="yes" xml:space="preserve">
          <source>Take::read_to_string</source>
          <target state="translated">Take::read_to_string</target>
        </trans-unit>
        <trans-unit id="ff7920e868c6efa0c1c63b311588c20d61a7f2d1" translate="yes" xml:space="preserve">
          <source>Take::read_until</source>
          <target state="translated">Take::read_until</target>
        </trans-unit>
        <trans-unit id="1c02379757cc2a474d5159acc562ebc53dbcc6e8" translate="yes" xml:space="preserve">
          <source>Take::read_vectored</source>
          <target state="translated">Take::read_vectored</target>
        </trans-unit>
        <trans-unit id="5be381a9d13a427bb958e06b2f91d8ac597dcaca" translate="yes" xml:space="preserve">
          <source>Take::rev</source>
          <target state="translated">Take::rev</target>
        </trans-unit>
        <trans-unit id="e18f2e0078c87ddca019d0df50c9be909eec7c73" translate="yes" xml:space="preserve">
          <source>Take::rposition</source>
          <target state="translated">Take::rposition</target>
        </trans-unit>
        <trans-unit id="a4ae23e28ee6482c4f37bfaf8961b5d3e6eaf38a" translate="yes" xml:space="preserve">
          <source>Take::scan</source>
          <target state="translated">Take::scan</target>
        </trans-unit>
        <trans-unit id="a861f4075d807611dc6e73d40237e1213bacd0eb" translate="yes" xml:space="preserve">
          <source>Take::set_limit</source>
          <target state="translated">Take::set_limit</target>
        </trans-unit>
        <trans-unit id="f818ff36e7ad711103d2ba4c077a8d734edde56f" translate="yes" xml:space="preserve">
          <source>Take::size_hint</source>
          <target state="translated">Take::size_hint</target>
        </trans-unit>
        <trans-unit id="a69293c506a3e6d03748938ad98a57cab2de68b6" translate="yes" xml:space="preserve">
          <source>Take::skip</source>
          <target state="translated">Take::skip</target>
        </trans-unit>
        <trans-unit id="24442e01a50200993c27435ef3f59852a0195fbc" translate="yes" xml:space="preserve">
          <source>Take::skip_while</source>
          <target state="translated">Take::skip_while</target>
        </trans-unit>
        <trans-unit id="786dff3f5c97ff2517eb703cddc2c48b45ce68d2" translate="yes" xml:space="preserve">
          <source>Take::split</source>
          <target state="translated">Take::split</target>
        </trans-unit>
        <trans-unit id="d02c36ab44977423b720fae9b8128bd7c9a17130" translate="yes" xml:space="preserve">
          <source>Take::step_by</source>
          <target state="translated">Take::step_by</target>
        </trans-unit>
        <trans-unit id="6cba5fe4e4d8782236905d48f50c0c8cf0b35ea1" translate="yes" xml:space="preserve">
          <source>Take::sum</source>
          <target state="translated">Take::sum</target>
        </trans-unit>
        <trans-unit id="68624d3ea1461494615761875eaee084707013a8" translate="yes" xml:space="preserve">
          <source>Take::take</source>
          <target state="translated">Take::take</target>
        </trans-unit>
        <trans-unit id="4d763cfe13619d7589c43fa8771dc666435ceb25" translate="yes" xml:space="preserve">
          <source>Take::take_while</source>
          <target state="translated">Take::take_while</target>
        </trans-unit>
        <trans-unit id="85075c5e0bed76afcc06d4d606cca841b62fafda" translate="yes" xml:space="preserve">
          <source>Take::to_owned</source>
          <target state="translated">Take::to_owned</target>
        </trans-unit>
        <trans-unit id="22b958c31c6c8794a04f72cf2eea76ceb4261bea" translate="yes" xml:space="preserve">
          <source>Take::try_fold</source>
          <target state="translated">Take::try_fold</target>
        </trans-unit>
        <trans-unit id="85671f0c2f90b03f64ac901cd58b292819f1adbc" translate="yes" xml:space="preserve">
          <source>Take::try_for_each</source>
          <target state="translated">Take::try_for_each</target>
        </trans-unit>
        <trans-unit id="3d0cc67e823487286711ff60f4a8af5c169b439c" translate="yes" xml:space="preserve">
          <source>Take::try_from</source>
          <target state="translated">Take::try_from</target>
        </trans-unit>
        <trans-unit id="0af1ec1e453882ae4eac152d32b6efc53464c4f6" translate="yes" xml:space="preserve">
          <source>Take::try_into</source>
          <target state="translated">Take::try_into</target>
        </trans-unit>
        <trans-unit id="030493ab8d39a3d39b2efaf8bc970f0ab4c107f4" translate="yes" xml:space="preserve">
          <source>Take::type_id</source>
          <target state="translated">Take::type_id</target>
        </trans-unit>
        <trans-unit id="835853dd1bc504d3a63584777f07d0b4864b121b" translate="yes" xml:space="preserve">
          <source>Take::unzip</source>
          <target state="translated">Take::unzip</target>
        </trans-unit>
        <trans-unit id="79bb484f90441904a0b701d7c5bb877e2e57a7f3" translate="yes" xml:space="preserve">
          <source>Take::zip</source>
          <target state="translated">Take::zip</target>
        </trans-unit>
        <trans-unit id="3a51f26ad628e90629aea4f7cb0d24e3af6895e3" translate="yes" xml:space="preserve">
          <source>TakeWhile</source>
          <target state="translated">TakeWhile</target>
        </trans-unit>
        <trans-unit id="5a4ee79ed44129d250af7f398ee902fbe44562d2" translate="yes" xml:space="preserve">
          <source>TakeWhile::all</source>
          <target state="translated">TakeWhile::all</target>
        </trans-unit>
        <trans-unit id="7e504c2bb32700532ccb00ad21b4a4f96ba4b32d" translate="yes" xml:space="preserve">
          <source>TakeWhile::any</source>
          <target state="translated">TakeWhile::any</target>
        </trans-unit>
        <trans-unit id="61e920f04bf2913ea28c4be57374db5b67bc882b" translate="yes" xml:space="preserve">
          <source>TakeWhile::borrow</source>
          <target state="translated">TakeWhile::borrow</target>
        </trans-unit>
        <trans-unit id="6889e05cc39c39dbd344c208d8ddf999af12f733" translate="yes" xml:space="preserve">
          <source>TakeWhile::borrow_mut</source>
          <target state="translated">TakeWhile::borrow_mut</target>
        </trans-unit>
        <trans-unit id="109fef7db94ab58206b2e6230cdfecdbc77a4097" translate="yes" xml:space="preserve">
          <source>TakeWhile::by_ref</source>
          <target state="translated">TakeWhile::by_ref</target>
        </trans-unit>
        <trans-unit id="a01c4cf198db99a56662a21b9ebe5a4c46c182e7" translate="yes" xml:space="preserve">
          <source>TakeWhile::chain</source>
          <target state="translated">TakeWhile::chain</target>
        </trans-unit>
        <trans-unit id="d76cb77b5bc08817a97e53dbe6ef2ae7b860ac16" translate="yes" xml:space="preserve">
          <source>TakeWhile::clone</source>
          <target state="translated">TakeWhile::clone</target>
        </trans-unit>
        <trans-unit id="1c3173ef6044b5c8977046cd5f0bf86ead851ada" translate="yes" xml:space="preserve">
          <source>TakeWhile::clone_from</source>
          <target state="translated">TakeWhile::clone_from</target>
        </trans-unit>
        <trans-unit id="40bcff411c1ac10064ef6c9a30082c6e1301cb18" translate="yes" xml:space="preserve">
          <source>TakeWhile::clone_into</source>
          <target state="translated">TakeWhile::clone_into</target>
        </trans-unit>
        <trans-unit id="e71eeceaa483aa4ac6954a174b4acff80b41e0bb" translate="yes" xml:space="preserve">
          <source>TakeWhile::cloned</source>
          <target state="translated">TakeWhile::cloned</target>
        </trans-unit>
        <trans-unit id="af006151b53d47e3e77126b4cb02c5ef2128101f" translate="yes" xml:space="preserve">
          <source>TakeWhile::cmp</source>
          <target state="translated">TakeWhile::cmp</target>
        </trans-unit>
        <trans-unit id="449927b87ae5776ce947f2b26362f6c5d21d8b41" translate="yes" xml:space="preserve">
          <source>TakeWhile::collect</source>
          <target state="translated">TakeWhile::collect</target>
        </trans-unit>
        <trans-unit id="6bb099291f07df9c2f7dbd50ff586598af6af625" translate="yes" xml:space="preserve">
          <source>TakeWhile::copied</source>
          <target state="translated">TakeWhile::copied</target>
        </trans-unit>
        <trans-unit id="81d7f945ac8fcd4d12fe33e652717c1fde6563b2" translate="yes" xml:space="preserve">
          <source>TakeWhile::count</source>
          <target state="translated">TakeWhile::count</target>
        </trans-unit>
        <trans-unit id="0943dffe36757c6679e098fc93d6c8597c886c1b" translate="yes" xml:space="preserve">
          <source>TakeWhile::cycle</source>
          <target state="translated">TakeWhile::cycle</target>
        </trans-unit>
        <trans-unit id="981c89ae8a1b88a1d6ef722f5febb04e9305d379" translate="yes" xml:space="preserve">
          <source>TakeWhile::enumerate</source>
          <target state="translated">TakeWhile::enumerate</target>
        </trans-unit>
        <trans-unit id="051ad73b3f1c122d17eba268840da57f91d9155b" translate="yes" xml:space="preserve">
          <source>TakeWhile::eq</source>
          <target state="translated">TakeWhile::eq</target>
        </trans-unit>
        <trans-unit id="cf7aa97e22c869c2aa178c4b74e98d507f377949" translate="yes" xml:space="preserve">
          <source>TakeWhile::filter</source>
          <target state="translated">TakeWhile::filter</target>
        </trans-unit>
        <trans-unit id="781d39f35a596d0d04db63ba8f23ab5a28e7f786" translate="yes" xml:space="preserve">
          <source>TakeWhile::filter_map</source>
          <target state="translated">TakeWhile::filter_map</target>
        </trans-unit>
        <trans-unit id="bb46578db058cb4085702b41a8ac2a3bd8e0e0e6" translate="yes" xml:space="preserve">
          <source>TakeWhile::find</source>
          <target state="translated">TakeWhile::find</target>
        </trans-unit>
        <trans-unit id="1836ae4e27d1d0a7611ca1a7a8e730e4b2ff7ba5" translate="yes" xml:space="preserve">
          <source>TakeWhile::find_map</source>
          <target state="translated">TakeWhile::find_map</target>
        </trans-unit>
        <trans-unit id="d6c2713acc857d51506ab063d1197dac1b94d74f" translate="yes" xml:space="preserve">
          <source>TakeWhile::flat_map</source>
          <target state="translated">TakeWhile::flat_map</target>
        </trans-unit>
        <trans-unit id="8fa786f386ff376f9d586e7e2603367b24f4309e" translate="yes" xml:space="preserve">
          <source>TakeWhile::flatten</source>
          <target state="translated">TakeWhile::flatten</target>
        </trans-unit>
        <trans-unit id="54dbb49e3694ba24da0862dc1394d925c2ec2e76" translate="yes" xml:space="preserve">
          <source>TakeWhile::fmt</source>
          <target state="translated">TakeWhile::fmt</target>
        </trans-unit>
        <trans-unit id="3b604659899acaa4c4fa880c65eaf60bdf338fb0" translate="yes" xml:space="preserve">
          <source>TakeWhile::fold</source>
          <target state="translated">TakeWhile::fold</target>
        </trans-unit>
        <trans-unit id="f857cfc8e4fffae22b25aa1af0746a8c07453739" translate="yes" xml:space="preserve">
          <source>TakeWhile::for_each</source>
          <target state="translated">TakeWhile::for_each</target>
        </trans-unit>
        <trans-unit id="10cc7ec12849fb8be521212b71c97f69b0e8be4d" translate="yes" xml:space="preserve">
          <source>TakeWhile::from</source>
          <target state="translated">TakeWhile::from</target>
        </trans-unit>
        <trans-unit id="b14ce3c49c60281107d8ff85cf5a45151d78c02b" translate="yes" xml:space="preserve">
          <source>TakeWhile::fuse</source>
          <target state="translated">TakeWhile::fuse</target>
        </trans-unit>
        <trans-unit id="5b533b69ce5d1b5fcca2290183f6ab3ff6f3bbe7" translate="yes" xml:space="preserve">
          <source>TakeWhile::ge</source>
          <target state="translated">TakeWhile::ge</target>
        </trans-unit>
        <trans-unit id="e41efbbd4b16c01a2406465143571ff38ddcc729" translate="yes" xml:space="preserve">
          <source>TakeWhile::gt</source>
          <target state="translated">TakeWhile::gt</target>
        </trans-unit>
        <trans-unit id="e82ad72130971476625180d15f9095a631008482" translate="yes" xml:space="preserve">
          <source>TakeWhile::inspect</source>
          <target state="translated">TakeWhile::inspect</target>
        </trans-unit>
        <trans-unit id="5bd8c51c1aaafd737286d930bac9c87c81fd2da0" translate="yes" xml:space="preserve">
          <source>TakeWhile::into</source>
          <target state="translated">TakeWhile::into</target>
        </trans-unit>
        <trans-unit id="9c41377ecc43d8e8e2038b8c95e46e6dc6672f6a" translate="yes" xml:space="preserve">
          <source>TakeWhile::into_iter</source>
          <target state="translated">TakeWhile::into_iter</target>
        </trans-unit>
        <trans-unit id="af8584c071284d9a15ed6e55178e48dac000af50" translate="yes" xml:space="preserve">
          <source>TakeWhile::is_sorted</source>
          <target state="translated">TakeWhile::is_sorted</target>
        </trans-unit>
        <trans-unit id="f9d98bc06d7cfd35aa276ac03a4bfb4fb9bcfdb9" translate="yes" xml:space="preserve">
          <source>TakeWhile::is_sorted_by</source>
          <target state="translated">TakeWhile::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="fdf72e0e188e7dabd3daf8f3e7aea8af3f66d06c" translate="yes" xml:space="preserve">
          <source>TakeWhile::is_sorted_by_key</source>
          <target state="translated">TakeWhile::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="e34b73af766b9c594c897565557e9397f6c161eb" translate="yes" xml:space="preserve">
          <source>TakeWhile::last</source>
          <target state="translated">TakeWhile::last</target>
        </trans-unit>
        <trans-unit id="b6dd1bba8f0ed8bafd55a7d850ca2eb0b195f34d" translate="yes" xml:space="preserve">
          <source>TakeWhile::le</source>
          <target state="translated">TakeWhile::le</target>
        </trans-unit>
        <trans-unit id="da5a93a2f06ebcd1f9f118d719a7e667df14e6d9" translate="yes" xml:space="preserve">
          <source>TakeWhile::lt</source>
          <target state="translated">TakeWhile::lt</target>
        </trans-unit>
        <trans-unit id="edb1877164deea21c7f4f55f4488b34d338728b1" translate="yes" xml:space="preserve">
          <source>TakeWhile::map</source>
          <target state="translated">TakeWhile::map</target>
        </trans-unit>
        <trans-unit id="6630ff71f282b1c99f5e6466ff97baa34cb4b2a6" translate="yes" xml:space="preserve">
          <source>TakeWhile::max</source>
          <target state="translated">TakeWhile::max</target>
        </trans-unit>
        <trans-unit id="fbc594d608402509f7e6a7fee20d755f4627aefe" translate="yes" xml:space="preserve">
          <source>TakeWhile::max_by</source>
          <target state="translated">TakeWhile::max_by</target>
        </trans-unit>
        <trans-unit id="a9cee1d9e0d49985b497cda56371f3884fe1400a" translate="yes" xml:space="preserve">
          <source>TakeWhile::max_by_key</source>
          <target state="translated">TakeWhile::max_by_key</target>
        </trans-unit>
        <trans-unit id="41c6ffd60ed5abd0718b176912c5901fdabb4c03" translate="yes" xml:space="preserve">
          <source>TakeWhile::min</source>
          <target state="translated">TakeWhile::min</target>
        </trans-unit>
        <trans-unit id="5ed99857707d76b683d55914ca131503d1ae98d5" translate="yes" xml:space="preserve">
          <source>TakeWhile::min_by</source>
          <target state="translated">TakeWhile::min_by</target>
        </trans-unit>
        <trans-unit id="70d6053ccb8872d131b60b10e6b3cfb7aa2feb7a" translate="yes" xml:space="preserve">
          <source>TakeWhile::min_by_key</source>
          <target state="translated">TakeWhile::min_by_key</target>
        </trans-unit>
        <trans-unit id="68db9e21593ec104a29ab24c04ba6067a7ba188c" translate="yes" xml:space="preserve">
          <source>TakeWhile::ne</source>
          <target state="translated">TakeWhile::ne</target>
        </trans-unit>
        <trans-unit id="dba525b0a0f3de0fbfdde5b19b4061145544bbf6" translate="yes" xml:space="preserve">
          <source>TakeWhile::next</source>
          <target state="translated">TakeWhile::next</target>
        </trans-unit>
        <trans-unit id="abe6f9c891ddb24679b3b68d9ffc6564f2011102" translate="yes" xml:space="preserve">
          <source>TakeWhile::nth</source>
          <target state="translated">TakeWhile::nth</target>
        </trans-unit>
        <trans-unit id="800e827a6bd80027fcc168148b39b2bc4798dafa" translate="yes" xml:space="preserve">
          <source>TakeWhile::partial_cmp</source>
          <target state="translated">TakeWhile::partial_cmp</target>
        </trans-unit>
        <trans-unit id="756f2fd59afc727df9fab561f13734ed10cc1035" translate="yes" xml:space="preserve">
          <source>TakeWhile::partition</source>
          <target state="translated">TakeWhile::partition</target>
        </trans-unit>
        <trans-unit id="b3708fa6ef243ab03b8f0e01148054537baba7c2" translate="yes" xml:space="preserve">
          <source>TakeWhile::peekable</source>
          <target state="translated">TakeWhile::peekable</target>
        </trans-unit>
        <trans-unit id="3ddf00384fd53b19d286b7ce9f31e5c8e130add2" translate="yes" xml:space="preserve">
          <source>TakeWhile::position</source>
          <target state="translated">TakeWhile::position</target>
        </trans-unit>
        <trans-unit id="103103944a1d96c94fd7efea8dc3417e1dcec47e" translate="yes" xml:space="preserve">
          <source>TakeWhile::product</source>
          <target state="translated">TakeWhile::product</target>
        </trans-unit>
        <trans-unit id="9db7de0140db3938f59bf212e7c6b8c4ab1a5b22" translate="yes" xml:space="preserve">
          <source>TakeWhile::rev</source>
          <target state="translated">TakeWhile::rev</target>
        </trans-unit>
        <trans-unit id="aa7afa9cbae96b3a55ad383eb829e62995e9d3b0" translate="yes" xml:space="preserve">
          <source>TakeWhile::rposition</source>
          <target state="translated">TakeWhile::rposition</target>
        </trans-unit>
        <trans-unit id="aad375a583a0085240c857eb42a8dfb87e2e4e1c" translate="yes" xml:space="preserve">
          <source>TakeWhile::scan</source>
          <target state="translated">TakeWhile::scan</target>
        </trans-unit>
        <trans-unit id="cd86cfe53884486177c23f0ff823be46500dc9e1" translate="yes" xml:space="preserve">
          <source>TakeWhile::size_hint</source>
          <target state="translated">TakeWhile::size_hint</target>
        </trans-unit>
        <trans-unit id="5e176c9b3bf37b02aef10f7907a61a6ac9a47da8" translate="yes" xml:space="preserve">
          <source>TakeWhile::skip</source>
          <target state="translated">TakeWhile::skip</target>
        </trans-unit>
        <trans-unit id="64e54491abe005b30c8d866999d58ab787b271b2" translate="yes" xml:space="preserve">
          <source>TakeWhile::skip_while</source>
          <target state="translated">TakeWhile::skip_while</target>
        </trans-unit>
        <trans-unit id="ba9f9f10db1b73ab0c564edb9c28453e72ee8d7c" translate="yes" xml:space="preserve">
          <source>TakeWhile::step_by</source>
          <target state="translated">TakeWhile::step_by</target>
        </trans-unit>
        <trans-unit id="9d9273a97581b55606d39ff31ae4fc4bd97d0343" translate="yes" xml:space="preserve">
          <source>TakeWhile::sum</source>
          <target state="translated">TakeWhile::sum</target>
        </trans-unit>
        <trans-unit id="c679b6dec55380d66c68043added100d9b1e3e12" translate="yes" xml:space="preserve">
          <source>TakeWhile::take</source>
          <target state="translated">TakeWhile::take</target>
        </trans-unit>
        <trans-unit id="98bc022ab936f48f4c132862157a433b58b1ed1d" translate="yes" xml:space="preserve">
          <source>TakeWhile::take_while</source>
          <target state="translated">TakeWhile::take_while</target>
        </trans-unit>
        <trans-unit id="b57cfb71237e7ec5ab624251b87030d240a46226" translate="yes" xml:space="preserve">
          <source>TakeWhile::to_owned</source>
          <target state="translated">TakeWhile::to_owned</target>
        </trans-unit>
        <trans-unit id="37e399f48eff7903115e7d86661abdf8e05fd4b1" translate="yes" xml:space="preserve">
          <source>TakeWhile::try_fold</source>
          <target state="translated">TakeWhile::try_fold</target>
        </trans-unit>
        <trans-unit id="759bc51854e6a28a5380a5f6b7a415cd0f555f0f" translate="yes" xml:space="preserve">
          <source>TakeWhile::try_for_each</source>
          <target state="translated">TakeWhile::try_for_each</target>
        </trans-unit>
        <trans-unit id="7fb911b85cc860ff38f3b721f59503e01735b148" translate="yes" xml:space="preserve">
          <source>TakeWhile::try_from</source>
          <target state="translated">TakeWhile::try_from</target>
        </trans-unit>
        <trans-unit id="5de7c55a9b68a872ef23f0276b88d1c9ecf0fc8a" translate="yes" xml:space="preserve">
          <source>TakeWhile::try_into</source>
          <target state="translated">TakeWhile::try_into</target>
        </trans-unit>
        <trans-unit id="87c136784211d463521272370803a4f358f45d54" translate="yes" xml:space="preserve">
          <source>TakeWhile::type_id</source>
          <target state="translated">TakeWhile::type_id</target>
        </trans-unit>
        <trans-unit id="2c32f5c719493f4a777e4c32b66c95f758c27273" translate="yes" xml:space="preserve">
          <source>TakeWhile::unzip</source>
          <target state="translated">TakeWhile::unzip</target>
        </trans-unit>
        <trans-unit id="d4376e438d96018f64f5876aa47fe4d14ae53315" translate="yes" xml:space="preserve">
          <source>TakeWhile::zip</source>
          <target state="translated">TakeWhile::zip</target>
        </trans-unit>
        <trans-unit id="686ef3911209faeb469101adcbd7e6e7d810ef4c" translate="yes" xml:space="preserve">
          <source>Takes &lt;code&gt;*O*(min(k, len() - k))&lt;/code&gt; time and no extra space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5ef4edffae6c9317836493dc9e695ad35618a15" translate="yes" xml:space="preserve">
          <source>Takes &lt;code&gt;*O*(min(mid, len() - mid))&lt;/code&gt; time and no extra space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a3fbbd6670f1404e88f845d8e70bb6e1310ad2" translate="yes" xml:space="preserve">
          <source>Takes &lt;code&gt;O(min(k, len() - k))&lt;/code&gt; time and no extra space.</source>
          <target state="translated">占用 &lt;code&gt;O(min(k, len() - k))&lt;/code&gt; 时间并且没有多余空间。</target>
        </trans-unit>
        <trans-unit id="2675fff809feea07b6b8e81b85ffeea6cb2ff42a" translate="yes" xml:space="preserve">
          <source>Takes &lt;code&gt;O(min(mid, len() - mid))&lt;/code&gt; time and no extra space.</source>
          <target state="translated">占用 &lt;code&gt;O(min(mid, len() - mid))&lt;/code&gt; 时间，没有多余的空间。</target>
        </trans-unit>
        <trans-unit id="cd9e4e1ce47cfbb22bdd9618d61401a9a4bbe1ab" translate="yes" xml:space="preserve">
          <source>Takes a closure and creates an iterator which calls that closure on each element.</source>
          <target state="translated">取一个闭包并创建一个迭代器,该迭代器在每个元素上调用该闭包。</target>
        </trans-unit>
        <trans-unit id="9d3b7aa7666b1bb97d700268dbfed96edd954290" translate="yes" xml:space="preserve">
          <source>Takes a closure and creates an iterator which calls that closure on each element. &lt;a href=&quot;../../../iter/trait.iterator#method.map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">采用闭包并创建一个迭代器，该迭代器在每个元素上调用该闭包。&lt;a href=&quot;../../../iter/trait.iterator#method.map&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="15197bb083d7273e4a694b7c5e032b5e1c0781f3" translate="yes" xml:space="preserve">
          <source>Takes a closure and creates an iterator which calls that closure on each element. &lt;a href=&quot;../../iter/trait.iterator#method.map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">采用闭包并创建一个迭代器，该迭代器在每个元素上调用该闭包。&lt;a href=&quot;../../iter/trait.iterator#method.map&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4434c8dd599ef23b0c9ba44e32c1fa55b943ae82" translate="yes" xml:space="preserve">
          <source>Takes a closure and creates an iterator which calls that closure on each element. &lt;a href=&quot;../iter/trait.iterator#method.map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">采用闭包并创建一个迭代器，该迭代器在每个元素上调用该闭包。&lt;a href=&quot;../iter/trait.iterator#method.map&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6257eea37e0de73bcadd8777f056a323db82c336" translate="yes" xml:space="preserve">
          <source>Takes a closure and creates an iterator which calls that closure on each element. &lt;a href=&quot;iter/trait.iterator#method.map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">采用闭包并创建一个迭代器，该迭代器在每个元素上调用该闭包。&lt;a href=&quot;iter/trait.iterator#method.map&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b1ad1d9466847f0b48f38483a158304137e697a6" translate="yes" xml:space="preserve">
          <source>Takes a closure and creates an iterator which calls that closure on each element. &lt;a href=&quot;trait.iterator#method.map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">采用闭包并创建一个迭代器，该迭代器在每个元素上调用该闭包。&lt;a href=&quot;trait.iterator#method.map&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b67dad0714b16a4867cfc86c2882827f4a196a85" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is &lt;a href=&quot;enum.option#None.v&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;enum.option#None.v&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;enum.option#None.v&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; occur, a container with the values of each &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">接受&lt;a href=&quot;../iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;中的每个元素：如果为&lt;a href=&quot;enum.option#None.v&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;，则不获取其他元素，并返回&lt;a href=&quot;enum.option#None.v&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;。如果没有&lt;a href=&quot;enum.option#None.v&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;发生，则返回包含每个&lt;a href=&quot;enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt;值的容器。</target>
        </trans-unit>
        <trans-unit id="c0d108a90f72b979216289a1535302bae686a314" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; occur, a container with the values of each &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae2387e48cfe171ba07e4b4b0225bc9c8162619" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is a &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; occur, the product of all elements is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc47bd052a8b6d5124696117910cb85d1a433ca" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is a &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; occur, the sum of all elements is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa16ae10062698ed9b295ae08170d14623d7392d" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is an &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; occur, the product of all elements is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b254b78336a4f1d88a19a88b9cd87eebc4af74" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is an &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; occur, the sum of all elements is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e929c2f84b980189b0ca395f9fd1ebf18d6a9b2" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is &lt;a href=&quot;../option/enum.option#None.v&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;../option/enum.option#None.v&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;../option/enum.option#None.v&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; occur, a container with the values of each &lt;a href=&quot;../option/enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">接受&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;中的每个元素：如果为&lt;a href=&quot;../option/enum.option#None.v&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;，则不获取其他元素，并返回&lt;a href=&quot;../option/enum.option#None.v&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;。如果没有&lt;a href=&quot;../option/enum.option#None.v&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;发生，则返回包含每个&lt;a href=&quot;../option/enum.option&quot;&gt; &lt;code&gt;Option&lt;/code&gt; &lt;/a&gt;值的容器。</target>
        </trans-unit>
        <trans-unit id="70a9e6b588aac0e816346721c7b37888db944102" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; occur, a container with the values of each &lt;a href=&quot;../option/enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7590beabf441bb63691e8eea48b72c9c8f6a403" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is a &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; occur, the product of all elements is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc7f913ad909dfc000ef9eb96b0c827728188e0" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is a &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; occur, the sum of all elements is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee1c7f91156f7afd567ca4e08a2abfd735e16c17" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is an &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; occur, the product of all elements is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ccdebe9d4ccf3b0664327970602a14b42c1657" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;: if it is an &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt;, no further elements are taken, and the &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; is returned. Should no &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; occur, the sum of all elements is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b39228003dfd9a65d31657d9ccd88aa95394f718" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;code&gt;Iterator&lt;/code&gt; and collects it into an &lt;code&gt;Arc&amp;lt;[T]&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80659447eb965dd52f894d84ba633d8bce5db96" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;code&gt;Iterator&lt;/code&gt; and collects it into an &lt;code&gt;Rc&amp;lt;[T]&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217627f67f88406b5f9f17a93f1493e04a1a8227" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;code&gt;Iterator&lt;/code&gt;: if it is a &lt;code&gt;None&lt;/code&gt;, no further elements are taken, and the &lt;code&gt;None&lt;/code&gt; is returned. Should no &lt;code&gt;None&lt;/code&gt; occur, the product of all elements is returned.</source>
          <target state="translated">接受 &lt;code&gt;Iterator&lt;/code&gt; 中的每个元素：如果它为 &lt;code&gt;None&lt;/code&gt; ，则不采用其他元素，并返回 &lt;code&gt;None&lt;/code&gt; 。如果没有 &lt;code&gt;None&lt;/code&gt; 发生，则返回所有元素的乘积。</target>
        </trans-unit>
        <trans-unit id="e4aa0fd801953cd40a086ec1d2ff51bb44eb736e" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;code&gt;Iterator&lt;/code&gt;: if it is a &lt;code&gt;None&lt;/code&gt;, no further elements are taken, and the &lt;code&gt;None&lt;/code&gt; is returned. Should no &lt;code&gt;None&lt;/code&gt; occur, the sum of all elements is returned.</source>
          <target state="translated">接受 &lt;code&gt;Iterator&lt;/code&gt; 中的每个元素：如果它为 &lt;code&gt;None&lt;/code&gt; ，则不采用其他元素，并返回 &lt;code&gt;None&lt;/code&gt; 。如果没有 &lt;code&gt;None&lt;/code&gt; 发生，则返回所有元素的总和。</target>
        </trans-unit>
        <trans-unit id="c1fb0a7041f8cb3602712be575a96b71a9c34edb" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;code&gt;Iterator&lt;/code&gt;: if it is an &lt;code&gt;Err&lt;/code&gt;, no further elements are taken, and the &lt;code&gt;Err&lt;/code&gt; is returned. Should no &lt;code&gt;Err&lt;/code&gt; occur, a container with the values of each &lt;code&gt;Result&lt;/code&gt; is returned.</source>
          <target state="translated">接受 &lt;code&gt;Iterator&lt;/code&gt; 中的每个元素：如果它是 &lt;code&gt;Err&lt;/code&gt; ，则不再获取其他元素，并返回 &lt;code&gt;Err&lt;/code&gt; 。如果没有发生 &lt;code&gt;Err&lt;/code&gt; ，则返回包含每个 &lt;code&gt;Result&lt;/code&gt; 值的容器。</target>
        </trans-unit>
        <trans-unit id="42c26fa2ecac3de7729494a9359458db2460cecc" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;code&gt;Iterator&lt;/code&gt;: if it is an &lt;code&gt;Err&lt;/code&gt;, no further elements are taken, and the &lt;code&gt;Err&lt;/code&gt; is returned. Should no &lt;code&gt;Err&lt;/code&gt; occur, the product of all elements is returned.</source>
          <target state="translated">接受 &lt;code&gt;Iterator&lt;/code&gt; 中的每个元素：如果它是 &lt;code&gt;Err&lt;/code&gt; ，则不再获取其他元素，并返回 &lt;code&gt;Err&lt;/code&gt; 。如果没有发生 &lt;code&gt;Err&lt;/code&gt; ，则返回所有元素的乘积。</target>
        </trans-unit>
        <trans-unit id="c82330496098a00243d3f411105f0f70776be883" translate="yes" xml:space="preserve">
          <source>Takes each element in the &lt;code&gt;Iterator&lt;/code&gt;: if it is an &lt;code&gt;Err&lt;/code&gt;, no further elements are taken, and the &lt;code&gt;Err&lt;/code&gt; is returned. Should no &lt;code&gt;Err&lt;/code&gt; occur, the sum of all elements is returned.</source>
          <target state="translated">接受 &lt;code&gt;Iterator&lt;/code&gt; 中的每个元素：如果它是 &lt;code&gt;Err&lt;/code&gt; ，则不再获取其他元素，并返回 &lt;code&gt;Err&lt;/code&gt; 。如果没有发生 &lt;code&gt;Err&lt;/code&gt; ，则返回所有元素的总和。</target>
        </trans-unit>
        <trans-unit id="01d5fda76710ca0641abcbb3e4cbb1bb6e17f736" translate="yes" xml:space="preserve">
          <source>Takes each element, adds them together, and returns the result.</source>
          <target state="translated">将每个元素加在一起,然后返回结果。</target>
        </trans-unit>
        <trans-unit id="6776e27751852b377b68c46a8017d15dd715c595" translate="yes" xml:space="preserve">
          <source>Takes linear (in &lt;code&gt;self.len()&lt;/code&gt;) time.</source>
          <target state="translated">采取线性（在 &lt;code&gt;self.len()&lt;/code&gt; 中）时间。</target>
        </trans-unit>
        <trans-unit id="fdca1895a18c3a298f6533b4c2e334951c66b62c" translate="yes" xml:space="preserve">
          <source>Takes ownership and &quot;forgets&quot; about the value &lt;strong&gt;without running its destructor&lt;/strong&gt;.</source>
          <target state="translated">在&lt;strong&gt;不运行其析构函数的情况下&lt;/strong&gt;获取所有权并&amp;ldquo;忘记&amp;rdquo;该值。</target>
        </trans-unit>
        <trans-unit id="b8fa769819072fbe610e5e9c85934d3a05171939" translate="yes" xml:space="preserve">
          <source>Takes the contained value out.</source>
          <target state="translated">将包含的值取出。</target>
        </trans-unit>
        <trans-unit id="4aec823974aa072f464dcb5cc764f9240e0f60dd" translate="yes" xml:space="preserve">
          <source>Takes the cubic root of a number.</source>
          <target state="translated">取一个数字的立方根。</target>
        </trans-unit>
        <trans-unit id="f045194d706e7e41fabb862c8032ea26f5f950f2" translate="yes" xml:space="preserve">
          <source>Takes the reciprocal (inverse) of a number, &lt;code&gt;1/x&lt;/code&gt;.</source>
          <target state="translated">取数字的倒数（倒数） &lt;code&gt;1/x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a48b57259f94b360feec04d91e3f646f9cba125" translate="yes" xml:space="preserve">
          <source>Takes the square root of a number.</source>
          <target state="translated">取一个数字的平方根。</target>
        </trans-unit>
        <trans-unit id="29583c6b4f13f8e1828da3f713db57dac29990e1" translate="yes" xml:space="preserve">
          <source>Takes the value from the &lt;code&gt;ManuallyDrop&amp;lt;T&amp;gt;&lt;/code&gt; container out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc799efc0b882851473c22ca2ca5ccf94ddabfe1" translate="yes" xml:space="preserve">
          <source>Takes the value of the cell, leaving &lt;code&gt;Default::default()&lt;/code&gt; in its place.</source>
          <target state="translated">获取单元格的值，并在其位置保留 &lt;code&gt;Default::default()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21859ca86840d9216ef1aca0008b5877f29f5e68" translate="yes" xml:space="preserve">
          <source>Takes the value of the entry out of the map, and returns it.</source>
          <target state="translated">将条目的值从地图中取出,并返回。</target>
        </trans-unit>
        <trans-unit id="e353877ad2ec8473ab467885d9861796b98bdada" translate="yes" xml:space="preserve">
          <source>Takes the value out of the entry, and returns it.</source>
          <target state="translated">从条目中取出数值,然后返回。</target>
        </trans-unit>
        <trans-unit id="761daab64ee172552a57dae50c6f8a92c4d9c366" translate="yes" xml:space="preserve">
          <source>Takes the value out of the option, leaving a &lt;a href=&quot;#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; in its place.</source>
          <target state="translated">从选项中取出值，并在其位置保留&lt;a href=&quot;#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b7c52a2ee2d265275374b5c1f093b7a06a9428c4" translate="yes" xml:space="preserve">
          <source>Takes the value out of the option, leaving a &lt;a href=&quot;enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; in its place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6c48a3fccb6e22a665d9cddaa208a1ef00450f" translate="yes" xml:space="preserve">
          <source>Takes the value out of this &lt;code&gt;OnceCell&lt;/code&gt;, moving it back to an uninitialized state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0f9786381b464d6f8e1277db444f32b741e79e" translate="yes" xml:space="preserve">
          <source>Takes the value out of this &lt;code&gt;SyncOnceCell&lt;/code&gt;, moving it back to an uninitialized state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba923f497880c808c6be64ea728bee38b782b657" translate="yes" xml:space="preserve">
          <source>Takes the wrapped value, leaving &lt;code&gt;Default::default()&lt;/code&gt; in its place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f95b9cdf9802bc6e9feca2c7b307fe24034be8d" translate="yes" xml:space="preserve">
          <source>Takes two iterators and creates a new iterator over both in sequence.</source>
          <target state="translated">取两个迭代器,并在两个迭代器上依次创建一个新的迭代器。</target>
        </trans-unit>
        <trans-unit id="787908ffef98464dc332707d755e2c4f129a3015" translate="yes" xml:space="preserve">
          <source>Takes two iterators and creates a new iterator over both in sequence. &lt;a href=&quot;../../../iter/trait.iterator#method.chain&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">接受两个迭代器，并依次在两个迭代器上创建一个新的迭代器。&lt;a href=&quot;../../../iter/trait.iterator#method.chain&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="96c4c94db35b0a5de2fc876c74307d69f4d1f941" translate="yes" xml:space="preserve">
          <source>Takes two iterators and creates a new iterator over both in sequence. &lt;a href=&quot;../../iter/trait.iterator#method.chain&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">接受两个迭代器，并依次在两个迭代器上创建一个新的迭代器。&lt;a href=&quot;../../iter/trait.iterator#method.chain&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="09c1398fa07d7872f8f96945eceb77ea195aaf9f" translate="yes" xml:space="preserve">
          <source>Takes two iterators and creates a new iterator over both in sequence. &lt;a href=&quot;../iter/trait.iterator#method.chain&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">接受两个迭代器，并依次在两个迭代器上创建一个新的迭代器。&lt;a href=&quot;../iter/trait.iterator#method.chain&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4e8033a8a0d88d9c00564885e5bd3facaba3011b" translate="yes" xml:space="preserve">
          <source>Takes two iterators and creates a new iterator over both in sequence. &lt;a href=&quot;iter/trait.iterator#method.chain&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">接受两个迭代器，并依次在两个迭代器上创建一个新的迭代器。&lt;a href=&quot;iter/trait.iterator#method.chain&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="772b77fdfc8e9968126bb233f7891ef8441c5352" translate="yes" xml:space="preserve">
          <source>Takes two iterators and creates a new iterator over both in sequence. &lt;a href=&quot;trait.iterator#method.chain&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">接受两个迭代器，并依次在两个迭代器上创建一个新的迭代器。&lt;a href=&quot;trait.iterator#method.chain&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e48610b94d0c8b865914c76042a0dd63c8ace3fb" translate="yes" xml:space="preserve">
          <source>Taking a &lt;a href=&quot;trait.fn&quot;&gt;&lt;code&gt;Fn&lt;/code&gt;&lt;/a&gt; as a parameter:</source>
          <target state="translated">以&lt;a href=&quot;trait.fn&quot;&gt; &lt;code&gt;Fn&lt;/code&gt; &lt;/a&gt;作为参数：</target>
        </trans-unit>
        <trans-unit id="4f62d9e379567856d558f8df128e53e7eeda59a9" translate="yes" xml:space="preserve">
          <source>Taking a &lt;a href=&quot;trait.fnmut&quot;&gt;&lt;code&gt;FnMut&lt;/code&gt;&lt;/a&gt; as a parameter:</source>
          <target state="translated">以&lt;a href=&quot;trait.fnmut&quot;&gt; &lt;code&gt;FnMut&lt;/code&gt; &lt;/a&gt;作为参数：</target>
        </trans-unit>
        <trans-unit id="acf17a2c9691dbabd08f8be26e62792363680f2f" translate="yes" xml:space="preserve">
          <source>Taking a &lt;a href=&quot;trait.fnonce&quot;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/a&gt; as a parameter:</source>
          <target state="translated">以&lt;a href=&quot;trait.fnonce&quot;&gt; &lt;code&gt;FnOnce&lt;/code&gt; &lt;/a&gt;作为参数：</target>
        </trans-unit>
        <trans-unit id="9b593af3c7f2108f31456b5ab2cb3574e71f3b6e" translate="yes" xml:space="preserve">
          <source>Taking ownership and then returning ownership with every function is a bit tedious. What if we want to let a function use a value but not take ownership? It&amp;rsquo;s quite annoying that anything we pass in also needs to be passed back if we want to use it again, in addition to any data resulting from the body of the function that we might want to return as well.</source>
          <target state="translated">拥有所有权然后返回所有功能的所有权有点乏味。如果我们想让函数使用值而不是所有权，该怎么办？令人非常烦恼的是，除了我们可能还想返回的函数主体所产生的任何数据之外，如果我们想要再次使用它，还需要将返回的信息传递回去。</target>
        </trans-unit>
        <trans-unit id="4aa5a6c5b61f9a1ca73ba483f7a4a44ead615a2c" translate="yes" xml:space="preserve">
          <source>Targets which do not support switching between linkage of the C runtime will ignore this flag. It's recommended to inspect the resulting binary to ensure that it's linked as you would expect after the compiler succeeds.</source>
          <target state="translated">不支持在C运行时的链接之间切换的目标将忽略这个标志。建议检查所产生的二进制文件,以确保在编译成功后,它是按照你所期望的方式链接的。</target>
        </trans-unit>
        <trans-unit id="0eecee1ef4d6e466bffed10ffafec520b9a50288" translate="yes" xml:space="preserve">
          <source>Task context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad8024a2c7b1265fb5e22250fc7a31283cdbd36" translate="yes" xml:space="preserve">
          <source>TcpListener</source>
          <target state="translated">TcpListener</target>
        </trans-unit>
        <trans-unit id="ece7cdbc23c076f1d64f752343ef7aec8eec539f" translate="yes" xml:space="preserve">
          <source>TcpListener::accept</source>
          <target state="translated">TcpListener::accept</target>
        </trans-unit>
        <trans-unit id="a2a291bb7ab19718d31f7478d18104e4158a939c" translate="yes" xml:space="preserve">
          <source>TcpListener::as_raw_fd</source>
          <target state="translated">TcpListener::as_raw_fd</target>
        </trans-unit>
        <trans-unit id="49f5fe2427c190a7f8a472e06e6d569a7ff427c4" translate="yes" xml:space="preserve">
          <source>TcpListener::as_raw_socket</source>
          <target state="translated">TcpListener::as_raw_socket</target>
        </trans-unit>
        <trans-unit id="2e2338f796fa51dd367f2f2c91e316fe98afe3a0" translate="yes" xml:space="preserve">
          <source>TcpListener::bind</source>
          <target state="translated">TcpListener::bind</target>
        </trans-unit>
        <trans-unit id="bc75d22ad0ef01f38f6f564c0448b514f01f2b1e" translate="yes" xml:space="preserve">
          <source>TcpListener::borrow</source>
          <target state="translated">TcpListener::borrow</target>
        </trans-unit>
        <trans-unit id="b7bf89d05dc43863ce7b237f1c9339841b44d828" translate="yes" xml:space="preserve">
          <source>TcpListener::borrow_mut</source>
          <target state="translated">TcpListener::borrow_mut</target>
        </trans-unit>
        <trans-unit id="67148bab8cc6c3ad3159fa098deca2df5084c5bc" translate="yes" xml:space="preserve">
          <source>TcpListener::fmt</source>
          <target state="translated">TcpListener::fmt</target>
        </trans-unit>
        <trans-unit id="e2222d5e97ec906a2d58760a4b094c72e792239f" translate="yes" xml:space="preserve">
          <source>TcpListener::from</source>
          <target state="translated">TcpListener::from</target>
        </trans-unit>
        <trans-unit id="965dc7a632243e984a2b9e894788c6c21d7eb5d8" translate="yes" xml:space="preserve">
          <source>TcpListener::from_raw_fd</source>
          <target state="translated">TcpListener::from_raw_fd</target>
        </trans-unit>
        <trans-unit id="482dc849c70cec776e4f8a473271ccf0cb6cf277" translate="yes" xml:space="preserve">
          <source>TcpListener::from_raw_socket</source>
          <target state="translated">TcpListener::from_raw_socket</target>
        </trans-unit>
        <trans-unit id="1934b5e7d2fb2d8224b23b4ad0d2399a5cb3b873" translate="yes" xml:space="preserve">
          <source>TcpListener::incoming</source>
          <target state="translated">TcpListener::incoming</target>
        </trans-unit>
        <trans-unit id="428c642a4eaf5906beb8fe4edf0ac026bb70054c" translate="yes" xml:space="preserve">
          <source>TcpListener::into</source>
          <target state="translated">TcpListener::into</target>
        </trans-unit>
        <trans-unit id="ecf165a93c2c3a51f657446508db4792cbb31eef" translate="yes" xml:space="preserve">
          <source>TcpListener::into_raw_fd</source>
          <target state="translated">TcpListener::into_raw_fd</target>
        </trans-unit>
        <trans-unit id="171dba66a0881e83fbf754117718cae198277962" translate="yes" xml:space="preserve">
          <source>TcpListener::into_raw_socket</source>
          <target state="translated">TcpListener::into_raw_socket</target>
        </trans-unit>
        <trans-unit id="2275a3d2aa672ca4311b697b11d81ca54319cd4f" translate="yes" xml:space="preserve">
          <source>TcpListener::local_addr</source>
          <target state="translated">TcpListener::local_addr</target>
        </trans-unit>
        <trans-unit id="ec11714ec8bf6a942994646bb7ec40f6ec987004" translate="yes" xml:space="preserve">
          <source>TcpListener::only_v6</source>
          <target state="translated">TcpListener::only_v6</target>
        </trans-unit>
        <trans-unit id="8f9762884937dfa70d1e7429478f09a0cb47d310" translate="yes" xml:space="preserve">
          <source>TcpListener::set_nonblocking</source>
          <target state="translated">TcpListener::set_nonblocking</target>
        </trans-unit>
        <trans-unit id="226f648e250e40bcc471fd5a673bff010846e472" translate="yes" xml:space="preserve">
          <source>TcpListener::set_only_v6</source>
          <target state="translated">TcpListener::set_only_v6</target>
        </trans-unit>
        <trans-unit id="4715bf3aa73135001a12ace3fe29f1f7e2fa4701" translate="yes" xml:space="preserve">
          <source>TcpListener::set_ttl</source>
          <target state="translated">TcpListener::set_ttl</target>
        </trans-unit>
        <trans-unit id="52dd134154d36dce171d232dad1f997d4a86ef76" translate="yes" xml:space="preserve">
          <source>TcpListener::take_error</source>
          <target state="translated">TcpListener::take_error</target>
        </trans-unit>
        <trans-unit id="346a3319242ccfb5f2d382bc3687dc41f26c3692" translate="yes" xml:space="preserve">
          <source>TcpListener::try_clone</source>
          <target state="translated">TcpListener::try_clone</target>
        </trans-unit>
        <trans-unit id="8774def23dc815607fb5f6d621a655e6351d76ed" translate="yes" xml:space="preserve">
          <source>TcpListener::try_from</source>
          <target state="translated">TcpListener::try_from</target>
        </trans-unit>
        <trans-unit id="4d964782d52d7cadd1d535988a4c17142f01c956" translate="yes" xml:space="preserve">
          <source>TcpListener::try_into</source>
          <target state="translated">TcpListener::try_into</target>
        </trans-unit>
        <trans-unit id="720c95f141c0826fd5fca57448ce533672b87275" translate="yes" xml:space="preserve">
          <source>TcpListener::ttl</source>
          <target state="translated">TcpListener::ttl</target>
        </trans-unit>
        <trans-unit id="8b5ab82dcc35d3a2cd49204d3a4a7a3449b42f85" translate="yes" xml:space="preserve">
          <source>TcpListener::type_id</source>
          <target state="translated">TcpListener::type_id</target>
        </trans-unit>
        <trans-unit id="35342d32149945519f7e31daff4e30855fbeba49" translate="yes" xml:space="preserve">
          <source>TcpStream</source>
          <target state="translated">TcpStream</target>
        </trans-unit>
        <trans-unit id="9eafc6b129d5efa5c4b0a83e50a95e30344816f3" translate="yes" xml:space="preserve">
          <source>TcpStream::as_raw_fd</source>
          <target state="translated">TcpStream::as_raw_fd</target>
        </trans-unit>
        <trans-unit id="09ec2aef24015b31ab23113ac683d2f8346c1f39" translate="yes" xml:space="preserve">
          <source>TcpStream::as_raw_socket</source>
          <target state="translated">TcpStream::as_raw_socket</target>
        </trans-unit>
        <trans-unit id="12e762e3cfe2aa9d71a2a757abb3507e964d1881" translate="yes" xml:space="preserve">
          <source>TcpStream::borrow</source>
          <target state="translated">TcpStream::borrow</target>
        </trans-unit>
        <trans-unit id="d91a58f6ef21ac04bf7fb8b19bbc87b6dbe9fb4c" translate="yes" xml:space="preserve">
          <source>TcpStream::borrow_mut</source>
          <target state="translated">TcpStream::borrow_mut</target>
        </trans-unit>
        <trans-unit id="11f8dcda0e1ccab974f38cf496de4e39b14b25cb" translate="yes" xml:space="preserve">
          <source>TcpStream::by_ref</source>
          <target state="translated">TcpStream::by_ref</target>
        </trans-unit>
        <trans-unit id="bfbef109c2e4f33f2aedd0c714f14f49404d152c" translate="yes" xml:space="preserve">
          <source>TcpStream::bytes</source>
          <target state="translated">TcpStream::bytes</target>
        </trans-unit>
        <trans-unit id="e1fe899d60189a16135ede51a667e0fdef40fd00" translate="yes" xml:space="preserve">
          <source>TcpStream::chain</source>
          <target state="translated">TcpStream::chain</target>
        </trans-unit>
        <trans-unit id="9b075e5500b6c35efe89a7d4bf0762c653e6221c" translate="yes" xml:space="preserve">
          <source>TcpStream::connect</source>
          <target state="translated">TcpStream::connect</target>
        </trans-unit>
        <trans-unit id="7c9bc4cc7e00f6a9f012c5c2f74296bd08fb3cd9" translate="yes" xml:space="preserve">
          <source>TcpStream::connect_timeout</source>
          <target state="translated">TcpStream::connect_timeout</target>
        </trans-unit>
        <trans-unit id="7e82ba30a964300fd5401b21bdde38ef8892a264" translate="yes" xml:space="preserve">
          <source>TcpStream::flush</source>
          <target state="translated">TcpStream::flush</target>
        </trans-unit>
        <trans-unit id="5e2f83b6ef3a2fd9f5722070fe250aef910cb0f5" translate="yes" xml:space="preserve">
          <source>TcpStream::fmt</source>
          <target state="translated">TcpStream::fmt</target>
        </trans-unit>
        <trans-unit id="3a3304a1471ecd9e54075022592709e4164425d3" translate="yes" xml:space="preserve">
          <source>TcpStream::from</source>
          <target state="translated">TcpStream::from</target>
        </trans-unit>
        <trans-unit id="0c544151d800149c130a2b4e5fa0242d2c6c5fe2" translate="yes" xml:space="preserve">
          <source>TcpStream::from_raw_fd</source>
          <target state="translated">TcpStream::from_raw_fd</target>
        </trans-unit>
        <trans-unit id="f33ab52a5f61c4e532d24e2b9d448a864ab588ef" translate="yes" xml:space="preserve">
          <source>TcpStream::from_raw_socket</source>
          <target state="translated">TcpStream::from_raw_socket</target>
        </trans-unit>
        <trans-unit id="ac8cf31a8273795291384f9b9a189065f0e4ddda" translate="yes" xml:space="preserve">
          <source>TcpStream::initializer</source>
          <target state="translated">TcpStream::initializer</target>
        </trans-unit>
        <trans-unit id="bb02adb8fb5756c502d5d11c517f31b37848f5b3" translate="yes" xml:space="preserve">
          <source>TcpStream::into</source>
          <target state="translated">TcpStream::into</target>
        </trans-unit>
        <trans-unit id="8b62d5f9b1506a6417ce6b1e7abc2fe81f1a512b" translate="yes" xml:space="preserve">
          <source>TcpStream::into_raw_fd</source>
          <target state="translated">TcpStream::into_raw_fd</target>
        </trans-unit>
        <trans-unit id="2d62e49030fac395488f03a44bc65385d791c4a1" translate="yes" xml:space="preserve">
          <source>TcpStream::into_raw_socket</source>
          <target state="translated">TcpStream::into_raw_socket</target>
        </trans-unit>
        <trans-unit id="2f15c295f6cbee27e4704ba77400c3f9cdb74347" translate="yes" xml:space="preserve">
          <source>TcpStream::local_addr</source>
          <target state="translated">TcpStream::local_addr</target>
        </trans-unit>
        <trans-unit id="3e41769cd3c7bc5fe0ffd071decfac8538fce3c8" translate="yes" xml:space="preserve">
          <source>TcpStream::nodelay</source>
          <target state="translated">TcpStream::nodelay</target>
        </trans-unit>
        <trans-unit id="b1c4ef3a856c377290ba0effe22fa456b4c5d618" translate="yes" xml:space="preserve">
          <source>TcpStream::peek</source>
          <target state="translated">TcpStream::peek</target>
        </trans-unit>
        <trans-unit id="02b5be94fe4bd3a77f45294ce309a022defb0142" translate="yes" xml:space="preserve">
          <source>TcpStream::peer_addr</source>
          <target state="translated">TcpStream::peer_addr</target>
        </trans-unit>
        <trans-unit id="168308bcf15754b94b3cd0ff91dc84d727c89085" translate="yes" xml:space="preserve">
          <source>TcpStream::read</source>
          <target state="translated">TcpStream::read</target>
        </trans-unit>
        <trans-unit id="a51f803ec2bc3d6b94f3630947f31e7b2bee3ed5" translate="yes" xml:space="preserve">
          <source>TcpStream::read_exact</source>
          <target state="translated">TcpStream::read_exact</target>
        </trans-unit>
        <trans-unit id="cddced3b85b2ead651c93e97a2f622b9f49035db" translate="yes" xml:space="preserve">
          <source>TcpStream::read_timeout</source>
          <target state="translated">TcpStream::read_timeout</target>
        </trans-unit>
        <trans-unit id="1957796c8b2bd9a577cc9018f30d0a2d1c2fe241" translate="yes" xml:space="preserve">
          <source>TcpStream::read_to_end</source>
          <target state="translated">TcpStream::read_to_end</target>
        </trans-unit>
        <trans-unit id="9f494c5d56be921420520740cf0cbafa75a20b7b" translate="yes" xml:space="preserve">
          <source>TcpStream::read_to_string</source>
          <target state="translated">TcpStream::read_to_string</target>
        </trans-unit>
        <trans-unit id="c6fa288859680339e04670a33f1a14f57af1e652" translate="yes" xml:space="preserve">
          <source>TcpStream::read_vectored</source>
          <target state="translated">TcpStream::read_vectored</target>
        </trans-unit>
        <trans-unit id="e83138e7f219d526516674b5550a795c09cf97fa" translate="yes" xml:space="preserve">
          <source>TcpStream::set_nodelay</source>
          <target state="translated">TcpStream::set_nodelay</target>
        </trans-unit>
        <trans-unit id="6f3db10df76b321eadb9c9c65b440fd1e62d4157" translate="yes" xml:space="preserve">
          <source>TcpStream::set_nonblocking</source>
          <target state="translated">TcpStream::set_nonblocking</target>
        </trans-unit>
        <trans-unit id="0ef1754192987fd2a71c4d09d1363328c40af9e8" translate="yes" xml:space="preserve">
          <source>TcpStream::set_read_timeout</source>
          <target state="translated">TcpStream::set_read_timeout</target>
        </trans-unit>
        <trans-unit id="1c0d37734b35b5aaae88202ef8744780ebadf163" translate="yes" xml:space="preserve">
          <source>TcpStream::set_ttl</source>
          <target state="translated">TcpStream::set_ttl</target>
        </trans-unit>
        <trans-unit id="cf06a99e15825f5af0170343a971d82291a1bb70" translate="yes" xml:space="preserve">
          <source>TcpStream::set_write_timeout</source>
          <target state="translated">TcpStream::set_write_timeout</target>
        </trans-unit>
        <trans-unit id="de9f03e4aaf65b0dacf8a1a510098378140fbad7" translate="yes" xml:space="preserve">
          <source>TcpStream::shutdown</source>
          <target state="translated">TcpStream::shutdown</target>
        </trans-unit>
        <trans-unit id="f729ec43f0af2f4768020c3c186531540aa6fe75" translate="yes" xml:space="preserve">
          <source>TcpStream::take</source>
          <target state="translated">TcpStream::take</target>
        </trans-unit>
        <trans-unit id="07ca37092d4865ff34b3da8842e6f13eb4a33726" translate="yes" xml:space="preserve">
          <source>TcpStream::take_error</source>
          <target state="translated">TcpStream::take_error</target>
        </trans-unit>
        <trans-unit id="3f33672645be4d6e5bd0541f33a42009a106b1ad" translate="yes" xml:space="preserve">
          <source>TcpStream::try_clone</source>
          <target state="translated">TcpStream::try_clone</target>
        </trans-unit>
        <trans-unit id="0e120d19ada990068a0b20ff52db32daba2c74d5" translate="yes" xml:space="preserve">
          <source>TcpStream::try_from</source>
          <target state="translated">TcpStream::try_from</target>
        </trans-unit>
        <trans-unit id="0b039d724a73bfa4d009fb758a03fb779a56b987" translate="yes" xml:space="preserve">
          <source>TcpStream::try_into</source>
          <target state="translated">TcpStream::try_into</target>
        </trans-unit>
        <trans-unit id="833adb6a3443ef8c2bc774bcc30192c98f27094a" translate="yes" xml:space="preserve">
          <source>TcpStream::ttl</source>
          <target state="translated">TcpStream::ttl</target>
        </trans-unit>
        <trans-unit id="ad00f68ee2a21774a182c99f9b2a83cd6f6f89e9" translate="yes" xml:space="preserve">
          <source>TcpStream::type_id</source>
          <target state="translated">TcpStream::type_id</target>
        </trans-unit>
        <trans-unit id="accd5bacb0184a5ab554a0ca248574c5b5ddbbcb" translate="yes" xml:space="preserve">
          <source>TcpStream::write</source>
          <target state="translated">TcpStream::write</target>
        </trans-unit>
        <trans-unit id="0058eeee13c9051b5e0a752af3087b29d7b02d7b" translate="yes" xml:space="preserve">
          <source>TcpStream::write_all</source>
          <target state="translated">TcpStream::write_all</target>
        </trans-unit>
        <trans-unit id="cb06fd9c7d1d55fc4b3f3e15dc0163521ac1465b" translate="yes" xml:space="preserve">
          <source>TcpStream::write_fmt</source>
          <target state="translated">TcpStream::write_fmt</target>
        </trans-unit>
        <trans-unit id="a5e3f17e3264af59b558a0fdcba770ba3c28fa37" translate="yes" xml:space="preserve">
          <source>TcpStream::write_timeout</source>
          <target state="translated">TcpStream::write_timeout</target>
        </trans-unit>
        <trans-unit id="6e74581726f107bfc541797c5b9030282bc56e97" translate="yes" xml:space="preserve">
          <source>TcpStream::write_vectored</source>
          <target state="translated">TcpStream::write_vectored</target>
        </trans-unit>
        <trans-unit id="b6eac90e1928ad9ea4411f97ebcf59a5c7e10ed0" translate="yes" xml:space="preserve">
          <source>Teams of Developers</source>
          <target state="translated">开发者团队</target>
        </trans-unit>
        <trans-unit id="260e040b381f220359095e13ffb45be2fbc63287" translate="yes" xml:space="preserve">
          <source>Tells LLVM that this point in the code is not reachable, enabling further optimizations.</source>
          <target state="translated">告诉LLVM,代码中的这一点是无法到达的,从而可以进一步优化。</target>
        </trans-unit>
        <trans-unit id="a946abf59c33631dd9c09fe026f5fda52ecefd51" translate="yes" xml:space="preserve">
          <source>Tells this buffer that &lt;code&gt;amt&lt;/code&gt; bytes have been consumed from the buffer, so they should no longer be returned in calls to &lt;code&gt;read&lt;/code&gt;.</source>
          <target state="translated">告知此缓冲区 &lt;code&gt;amt&lt;/code&gt; 字节已从缓冲区中消耗掉，因此不应再在 &lt;code&gt;read&lt;/code&gt; 调用中返回它们。</target>
        </trans-unit>
        <trans-unit id="092a16374b222f88ad28cf25d43d7648234ed176" translate="yes" xml:space="preserve">
          <source>Tells this buffer that &lt;code&gt;amt&lt;/code&gt; bytes have been consumed from the buffer, so they should no longer be returned in calls to &lt;code&gt;read&lt;/code&gt;. &lt;a href=&quot;../io/trait.bufread#tymethod.consume&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">告知此缓冲区 &lt;code&gt;amt&lt;/code&gt; 字节已从缓冲区中消耗掉，因此不应再在 &lt;code&gt;read&lt;/code&gt; 调用中返回它们。&lt;a href=&quot;../io/trait.bufread#tymethod.consume&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="027be37242a148e84d0572e0cc986124d9c751bc" translate="yes" xml:space="preserve">
          <source>Tells this buffer that &lt;code&gt;amt&lt;/code&gt; bytes have been consumed from the buffer, so they should no longer be returned in calls to &lt;code&gt;read&lt;/code&gt;. &lt;a href=&quot;io/trait.bufread#tymethod.consume&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">告知此缓冲区 &lt;code&gt;amt&lt;/code&gt; 字节已从缓冲区中消耗掉，因此不应再在 &lt;code&gt;read&lt;/code&gt; 调用中返回它们。&lt;a href=&quot;io/trait.bufread#tymethod.consume&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ea3b911565206879ae5d6cb4146bc834dfb6a7f3" translate="yes" xml:space="preserve">
          <source>Tells this buffer that &lt;code&gt;amt&lt;/code&gt; bytes have been consumed from the buffer, so they should no longer be returned in calls to &lt;code&gt;read&lt;/code&gt;. &lt;a href=&quot;trait.bufread#tymethod.consume&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">告知此缓冲区 &lt;code&gt;amt&lt;/code&gt; 字节已从缓冲区中消耗掉，因此不应再在 &lt;code&gt;read&lt;/code&gt; 调用中返回它们。&lt;a href=&quot;trait.bufread#tymethod.consume&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="68f4c5ea285ef679416734518ea1144f7f9f2cf1" translate="yes" xml:space="preserve">
          <source>Temporal quantification.</source>
          <target state="translated">时间上的量化。</target>
        </trans-unit>
        <trans-unit id="be80baca9006a4100bd6b71127149a07eb502503" translate="yes" xml:space="preserve">
          <source>Temporaries</source>
          <target state="translated">Temporaries</target>
        </trans-unit>
        <trans-unit id="b1380bff4b98c3f3b1a409ce860a8bd5d4ce8c7b" translate="yes" xml:space="preserve">
          <source>Temporaries are also created to hold the result of operands to an expression while the other operands are evaluated. The temporaries are associated to the scope of the expression with that operand. Since the temporaries are moved from once the expression is evaluated, dropping them has no effect unless one of the operands to an expression breaks out of the expression, returns, or panics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6121a6beed14a5f45c5406020e211d50eaf732ff" translate="yes" xml:space="preserve">
          <source>Temporaries are not always dropped at the end of the enclosing statement. In simple cases where the &lt;code&gt;&amp;amp;&lt;/code&gt; expression is immediately stored into a variable, the compiler will automatically extend the lifetime of the temporary until the end of the enclosing block. Therefore, an alternative way to fix the original program is to write &lt;code&gt;let tmp = &amp;amp;foo()&lt;/code&gt; and not &lt;code&gt;let tmp = foo()&lt;/code&gt;:</source>
          <target state="translated">临时语句并不总是在封闭语句的末尾删除。在将 &lt;code&gt;&amp;amp;&lt;/code&gt; 表达式立即存储到变量的简单情况下，编译器将自动延长临时项的生存期，直到封闭块结束。因此，修复原始程序的另一种方法是编写 &lt;code&gt;let tmp = &amp;amp;foo()&lt;/code&gt; 而不是 &lt;code&gt;let tmp = foo()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ff4686225d8fb1e953162a00f63d6b94d5a386fd" translate="yes" xml:space="preserve">
          <source>Temporaries that are created in the final expression of a function body are dropped &lt;em&gt;after&lt;/em&gt; any named variables bound in the function body, as there is no smaller enclosing temporary scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae8496ab0d5e20c300ea07a6c87645fbefee013" translate="yes" xml:space="preserve">
          <source>Temporary lifetime extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a237179150c9f45b00df9097591b1d7f10ef2038" translate="yes" xml:space="preserve">
          <source>Temporary lifetimes</source>
          <target state="translated">暂时性寿命</target>
        </trans-unit>
        <trans-unit id="ace2219c94d381961a79fb4617905c5cfbbacbf7" translate="yes" xml:space="preserve">
          <source>Temporary scopes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc9ea018278b216d5b6d6db9b73a7c2a6e7a8c8" translate="yes" xml:space="preserve">
          <source>Terminates the current process with the specified exit code.</source>
          <target state="translated">用指定的退出代码终止当前进程。</target>
        </trans-unit>
        <trans-unit id="4abcdd83ee3f3bce743cbed96b2ad9f965bea36e" translate="yes" xml:space="preserve">
          <source>Terminates the process in an abnormal fashion.</source>
          <target state="translated">以非正常方式终止该过程。</target>
        </trans-unit>
        <trans-unit id="2ee85218866a19e0d9f6c52c176e4eaf9d0877b2" translate="yes" xml:space="preserve">
          <source>Termination</source>
          <target state="translated">Termination</target>
        </trans-unit>
        <trans-unit id="4d00170cd71cecfb46cdbb7ebdf05a4a02fee721" translate="yes" xml:space="preserve">
          <source>Termination::report</source>
          <target state="translated">Termination::report</target>
        </trans-unit>
        <trans-unit id="00f441aa04210533cf8168c3d0baeda960edac55" translate="yes" xml:space="preserve">
          <source>Terminator for various items and statements, &lt;a href=&quot;types/array&quot;&gt;Array types&lt;/a&gt;</source>
          <target state="translated">各种项目和语句的终止符，&lt;a href=&quot;types/array&quot;&gt;数组类型&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="94aaabf5a007f6525e86dbe783c284fccc74a25c" translate="yes" xml:space="preserve">
          <source>Test Organization</source>
          <target state="translated">测试组织</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="da7894cbcc38e877e01ccb02e3c5e98f656c5624" translate="yes" xml:space="preserve">
          <source>Testing Equality with the &lt;code id=&quot;testing-equality-with-the-assert_eq-and-assert_ne-macros&quot;&gt;assert_eq!&lt;/code&gt; and &lt;code&gt;assert_ne!&lt;/code&gt; Macros</source>
          <target state="translated">用 &lt;code id=&quot;testing-equality-with-the-assert_eq-and-assert_ne-macros&quot;&gt;assert_eq!&lt;/code&gt; 测试平等！和 &lt;code&gt;assert_ne!&lt;/code&gt; 巨集</target>
        </trans-unit>
        <trans-unit id="117ea1d14f7b6fbe5fa90955d52644403f513522" translate="yes" xml:space="preserve">
          <source>Testing Private Functions</source>
          <target state="translated">测试私有功能</target>
        </trans-unit>
        <trans-unit id="932c5d1d0f6f5178e61a3f6e97a669a7ad5fc25b" translate="yes" xml:space="preserve">
          <source>Testing attributes</source>
          <target state="translated">测试属性</target>
        </trans-unit>
        <trans-unit id="6966e45073f574893b66ceb3ad6d45bb2ced06e0" translate="yes" xml:space="preserve">
          <source>Testing is a complex skill: although we can&amp;rsquo;t cover every detail about how to write good tests in one chapter, we&amp;rsquo;ll discuss the mechanics of Rust&amp;rsquo;s testing facilities. We&amp;rsquo;ll talk about the annotations and macros available to you when writing your tests, the default behavior and options provided for running your tests, and how to organize tests into unit tests and integration tests.</source>
          <target state="translated">测试是一项复杂的技能：尽管我们无法在一章中涵盖有关如何编写良好测试的所有细节，但我们将讨论Rust测试设施的机制。我们将讨论编写测试时为您提供的批注和宏，为运行测试提供的默认行为和选项，以及如何将测试组织为单元测试和集成测试。</target>
        </trans-unit>
        <trans-unit id="f7c988b9b3e507c053615421186791199dc1b08e" translate="yes" xml:space="preserve">
          <source>Testing the First Part</source>
          <target state="translated">测试第一部分</target>
        </trans-unit>
        <trans-unit id="833858d67cb9edd86a232319e147507d73e766ab" translate="yes" xml:space="preserve">
          <source>Tests are Rust functions that verify that the non-test code is functioning in the expected manner. The bodies of test functions typically perform these three actions:</source>
          <target state="translated">测试是验证非测试代码是否以预期方式运行的Rust函数。测试函数的主体通常执行这三个动作。</target>
        </trans-unit>
        <trans-unit id="9557b92aa71fea3ff4e10ad5c651a01d327198f2" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;person&lt;/code&gt; has the &lt;code&gt;car&lt;/code&gt; field filled with something.</source>
          <target state="translated">测试 &lt;code&gt;person&lt;/code&gt; 是否在 &lt;code&gt;car&lt;/code&gt; 场上装满东西。</target>
        </trans-unit>
        <trans-unit id="21b62ab2004ca1232d413d8d665d134b12791482" translate="yes" xml:space="preserve">
          <source>Tests if any element of the iterator matches a predicate.</source>
          <target state="translated">测试迭代器中是否有元素与谓词匹配。</target>
        </trans-unit>
        <trans-unit id="10d2dce236b59fb61d9321a2651527964d17f562" translate="yes" xml:space="preserve">
          <source>Tests if any element of the iterator matches a predicate. &lt;a href=&quot;../../../iter/trait.iterator#method.any&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">测试迭代器的任何元素是否与谓词匹配。&lt;a href=&quot;../../../iter/trait.iterator#method.any&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="209ac04cb187d92f123ce6700c9444025e5580b3" translate="yes" xml:space="preserve">
          <source>Tests if any element of the iterator matches a predicate. &lt;a href=&quot;../../iter/trait.iterator#method.any&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">测试迭代器的任何元素是否与谓词匹配。&lt;a href=&quot;../../iter/trait.iterator#method.any&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="80ec10f423a5beaec1ab62efd9e4031e5aaa4a11" translate="yes" xml:space="preserve">
          <source>Tests if any element of the iterator matches a predicate. &lt;a href=&quot;../iter/trait.iterator#method.any&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">测试迭代器的任何元素是否与谓词匹配。&lt;a href=&quot;../iter/trait.iterator#method.any&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="760ae5105c89912ab7a036138a76c59ddfecc44b" translate="yes" xml:space="preserve">
          <source>Tests if any element of the iterator matches a predicate. &lt;a href=&quot;iter/trait.iterator#method.any&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">测试迭代器的任何元素是否与谓词匹配。&lt;a href=&quot;iter/trait.iterator#method.any&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="df440409ef320551129c77bcadb79c6c4ba84e37" translate="yes" xml:space="preserve">
          <source>Tests if any element of the iterator matches a predicate. &lt;a href=&quot;trait.iterator#method.any&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">测试迭代器的任何元素是否与谓词匹配。&lt;a href=&quot;trait.iterator#method.any&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="42f540ef5575b87eda1bc58cc8c893cf2e3e2964" translate="yes" xml:space="preserve">
          <source>Tests if every element of the iterator matches a predicate.</source>
          <target state="translated">测试迭代器中的每一个元素是否匹配一个谓词。</target>
        </trans-unit>
        <trans-unit id="52e69927724e46dd631e47a69a4f2cdc74a668ca" translate="yes" xml:space="preserve">
          <source>Tests if every element of the iterator matches a predicate. &lt;a href=&quot;../../../iter/trait.iterator#method.all&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">测试迭代器的每个元素是否与谓词匹配。&lt;a href=&quot;../../../iter/trait.iterator#method.all&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c572c6f114e3b7b0e63531ab8e78116f0d5ac5de" translate="yes" xml:space="preserve">
          <source>Tests if every element of the iterator matches a predicate. &lt;a href=&quot;../../iter/trait.iterator#method.all&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">测试迭代器的每个元素是否与谓词匹配。&lt;a href=&quot;../../iter/trait.iterator#method.all&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a987e1ebbc5dd44d57ed09974bfdcc0f02c47b55" translate="yes" xml:space="preserve">
          <source>Tests if every element of the iterator matches a predicate. &lt;a href=&quot;../iter/trait.iterator#method.all&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">测试迭代器的每个元素是否与谓词匹配。&lt;a href=&quot;../iter/trait.iterator#method.all&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="74b456b0054dd24ca1a515d72ae7f4e5367d4633" translate="yes" xml:space="preserve">
          <source>Tests if every element of the iterator matches a predicate. &lt;a href=&quot;iter/trait.iterator#method.all&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">测试迭代器的每个元素是否与谓词匹配。&lt;a href=&quot;iter/trait.iterator#method.all&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="92be4e62f1c703e57b0a705c84b8aca1511558d2" translate="yes" xml:space="preserve">
          <source>Tests if every element of the iterator matches a predicate. &lt;a href=&quot;trait.iterator#method.all&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">测试迭代器的每个元素是否与谓词匹配。&lt;a href=&quot;trait.iterator#method.all&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6ebc400fe5bb7d000d0d73f12e63cdedd3140090" translate="yes" xml:space="preserve">
          <source>Tests if the person's &lt;code&gt;age&lt;/code&gt; field is between 13 and 19, and binds its value to the &lt;code&gt;person_age&lt;/code&gt; variable.</source>
          <target state="translated">测试人员的 &lt;code&gt;age&lt;/code&gt; 字段是否在13到19之间，并将其值绑定到 &lt;code&gt;person_age&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="13e062493861ff1e884762affb6f292d7aaa95d6" translate="yes" xml:space="preserve">
          <source>Tests that return &lt;code&gt;()&lt;/code&gt; pass as long as they terminate and do not panic. Tests that return a &lt;code&gt;Result&amp;lt;(), E&amp;gt;&lt;/code&gt; pass as long as they return &lt;code&gt;Ok(())&lt;/code&gt;. Tests that do not terminate neither pass nor fail.</source>
          <target state="translated">只要return &lt;code&gt;()&lt;/code&gt; 终止并且不慌不忙，它们就会通过测试。返回 &lt;code&gt;Result&amp;lt;(), E&amp;gt;&lt;/code&gt; 测试只要它们返回 &lt;code&gt;Ok(())&lt;/code&gt; 即可通过。不终止的测试既不会通过也不会失败。</target>
        </trans-unit>
        <trans-unit id="240e8d8b35fd6dbae3889295d03396f4179097df" translate="yes" xml:space="preserve">
          <source>Tests that use &lt;code&gt;should_panic&lt;/code&gt; can be imprecise because they only indicate that the code has caused some panic. A &lt;code&gt;should_panic&lt;/code&gt; test would pass even if the test panics for a different reason from the one we were expecting to happen. To make &lt;code&gt;should_panic&lt;/code&gt; tests more precise, we can add an optional &lt;code&gt;expected&lt;/code&gt; parameter to the &lt;code&gt;should_panic&lt;/code&gt; attribute. The test harness will make sure that the failure message contains the provided text. For example, consider the modified code for &lt;code&gt;Guess&lt;/code&gt; in Listing 11-9 where the &lt;code&gt;new&lt;/code&gt; function panics with different messages depending on whether the value is too small or too large.</source>
          <target state="translated">使用 &lt;code&gt;should_panic&lt;/code&gt; 的测试可能是不精确的，因为它们仅表明代码引起了一些恐慌。一个 &lt;code&gt;should_panic&lt;/code&gt; 测试会通过，即使从一个不同的原因的测试恐慌我们期待的事情发生。为了使 &lt;code&gt;should_panic&lt;/code&gt; 测试更加精确，我们可以在 &lt;code&gt;should_panic&lt;/code&gt; 属性中添加可选的 &lt;code&gt;expected&lt;/code&gt; 参数。测试工具将确保失败消息包含提供的文本。例如，考虑清单11-9中为 &lt;code&gt;Guess&lt;/code&gt; 修改的代码，其中， &lt;code&gt;new&lt;/code&gt; 函数会根据值是太小还是太大而出现不同的消息，从而出现紧急情况。</target>
        </trans-unit>
        <trans-unit id="6bb384831446531aa67968092446024f5dcdae5e" translate="yes" xml:space="preserve">
          <source>Tests whether this file type represents a directory. The result is mutually exclusive to the results of &lt;a href=&quot;struct.filetype#method.is_file&quot;&gt;&lt;code&gt;is_file&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.filetype#method.is_symlink&quot;&gt;&lt;code&gt;is_symlink&lt;/code&gt;&lt;/a&gt;; only zero or one of these tests may pass.</source>
          <target state="translated">测试此文件类型是否代表目录。结果与&lt;a href=&quot;struct.filetype#method.is_file&quot;&gt; &lt;code&gt;is_file&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;struct.filetype#method.is_symlink&quot;&gt; &lt;code&gt;is_symlink&lt;/code&gt; &lt;/a&gt;的结果互斥；这些测试只能通过零或其中一项。</target>
        </trans-unit>
        <trans-unit id="47c7f108fa56b78dae837cfbc2c1b6e6d82a8892" translate="yes" xml:space="preserve">
          <source>Tests whether this file type represents a regular file. The result is mutually exclusive to the results of &lt;a href=&quot;struct.filetype#method.is_dir&quot;&gt;&lt;code&gt;is_dir&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.filetype#method.is_symlink&quot;&gt;&lt;code&gt;is_symlink&lt;/code&gt;&lt;/a&gt;; only zero or one of these tests may pass.</source>
          <target state="translated">测试此文件类型是否代表常规文件。结果与&lt;a href=&quot;struct.filetype#method.is_dir&quot;&gt; &lt;code&gt;is_dir&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;struct.filetype#method.is_symlink&quot;&gt; &lt;code&gt;is_symlink&lt;/code&gt; &lt;/a&gt;的结果互斥；这些测试只能通过零或其中一项。</target>
        </trans-unit>
        <trans-unit id="8e2618283b789dcbc952fac3457682ad9646a29b" translate="yes" xml:space="preserve">
          <source>Tests whether this file type represents a symbolic link. The result is mutually exclusive to the results of &lt;a href=&quot;struct.filetype#method.is_dir&quot;&gt;&lt;code&gt;is_dir&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.filetype#method.is_file&quot;&gt;&lt;code&gt;is_file&lt;/code&gt;&lt;/a&gt;; only zero or one of these tests may pass.</source>
          <target state="translated">测试此文件类型是否代表符号链接。结果与&lt;a href=&quot;struct.filetype#method.is_dir&quot;&gt; &lt;code&gt;is_dir&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;struct.filetype#method.is_file&quot;&gt; &lt;code&gt;is_file&lt;/code&gt; &lt;/a&gt;的结果互斥；这些测试只能通过零或其中一项。</target>
        </trans-unit>
        <trans-unit id="24e8ed91cce37f2bfddb7d0a6e1b5b5dd3e13c8b" translate="yes" xml:space="preserve">
          <source>Text directionality</source>
          <target state="translated">文本方向性</target>
        </trans-unit>
        <trans-unit id="ece7c96ceb6b3c2888b8a50e4cc0084fdd3cc5ad" translate="yes" xml:space="preserve">
          <source>Textual Scope</source>
          <target state="translated">文本范围</target>
        </trans-unit>
        <trans-unit id="f351ed281e01f153c5130339693bdde4a4318e5b" translate="yes" xml:space="preserve">
          <source>Textual representation</source>
          <target state="translated">文字表述</target>
        </trans-unit>
        <trans-unit id="50a53707975aa4e011ef0d8fc19d6a0815b5a0af" translate="yes" xml:space="preserve">
          <source>Textual scope is based largely on the order that things appear in source files, and works similarly to the scope of local variables declared with &lt;code&gt;let&lt;/code&gt; except it also applies at the module level. When &lt;code&gt;macro_rules!&lt;/code&gt; is used to define a macro, the macro enters the scope after the definition (note that it can still be used recursively, since names are looked up from the invocation site), up until its surrounding scope, typically a module, is closed. This can enter child modules and even span across multiple files:</source>
          <target state="translated">文本范围主要基于事物在源文件中出现的顺序，并且类似于用 &lt;code&gt;let&lt;/code&gt; 声明的局部变量的范围，但它也适用于模块级别。当 &lt;code&gt;macro_rules!&lt;/code&gt; 用于定义宏，宏将在定义后进入范围（注意，由于从调用站点查找名称，因此仍可以递归使用），直到关闭其周围的范围（通常是模块）为止。这可以输入子模块，甚至可以跨越多个文件：</target>
        </trans-unit>
        <trans-unit id="3250cb346f89521461c9526f4b4c9e22ab7dec1d" translate="yes" xml:space="preserve">
          <source>Textual types</source>
          <target state="translated">文本类型</target>
        </trans-unit>
        <trans-unit id="43b22d6c26a5be334da039abbdd3a863691ba7f8" translate="yes" xml:space="preserve">
          <source>Thankfully, you won't need to worry about upholding this property when deriving both &lt;a href=&quot;../cmp/trait.eq&quot;&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;Hash&lt;/code&gt; with &lt;code&gt;#[derive(PartialEq, Eq, Hash)]&lt;/code&gt;.</source>
          <target state="translated">值得庆幸的是，在使用 &lt;code&gt;#[derive(PartialEq, Eq, Hash)]&lt;/code&gt; 导出&lt;a href=&quot;../cmp/trait.eq&quot;&gt; &lt;code&gt;Eq&lt;/code&gt; &lt;/a&gt;和 &lt;code&gt;Hash&lt;/code&gt; 时，您无需担心维护此属性。</target>
        </trans-unit>
        <trans-unit id="d87603b9cd3744161580179aa52163b0ef139449" translate="yes" xml:space="preserve">
          <source>Thanks to static lifetime elision, you usually don't have to explicitly use 'static:</source>
          <target state="translated">多亏了静态生命期的洗脱,你通常不必明确地使用 &quot;静态&quot;。</target>
        </trans-unit>
        <trans-unit id="ccd80fa4141d21f8d736b44824bc5d805727e80f" translate="yes" xml:space="preserve">
          <source>Thanks to static lifetime elision, you usually don't have to explicitly use &lt;code&gt;'static&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bdae0de8a5a5798d4caf783e96f237ed5528f2b" translate="yes" xml:space="preserve">
          <source>Thanks to this process, you can always check out the next build of Rust and verify for yourself that it&amp;rsquo;s easy to upgrade to: if a beta release doesn&amp;rsquo;t work as expected, you can report it to the team and get it fixed before the next stable release happens! Breakage in a beta release is relatively rare, but &lt;code&gt;rustc&lt;/code&gt; is still a piece of software, and bugs do exist.</source>
          <target state="translated">通过此过程，您始终可以签出Rust的下一个版本，并亲自验证其易于升级到：如果beta版本无法按预期工作，则可以将其报告给团队并在修复之前进行修复。下一个稳定版本发布了！Beta版本中出现破损的情况相对较少，但 &lt;code&gt;rustc&lt;/code&gt; 仍然是一款软件，并且确实存在错误。</target>
        </trans-unit>
        <trans-unit id="93b38f3306b86b6513f0666ee48835c2b21219b2" translate="yes" xml:space="preserve">
          <source>That first part is done by us: when we call &lt;code&gt;String::from&lt;/code&gt;, its implementation requests the memory it needs. This is pretty much universal in programming languages.</source>
          <target state="translated">第一部分由我们完成：当我们调用 &lt;code&gt;String::from&lt;/code&gt; ，其实现会请求所需的内存。这在编程语言中几乎是通用的。</target>
        </trans-unit>
        <trans-unit id="1348e5b21c821f227473000afcbce413f66d2f49" translate="yes" xml:space="preserve">
          <source>That is, for each element &lt;code&gt;a&lt;/code&gt; and its following element &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;a &amp;lt;= b&lt;/code&gt; must hold. If the iterator yields exactly zero or one element, &lt;code&gt;true&lt;/code&gt; is returned.</source>
          <target state="translated">也就是说，对于每个元素 &lt;code&gt;a&lt;/code&gt; 及其随后的元素 &lt;code&gt;b&lt;/code&gt; ， &lt;code&gt;a &amp;lt;= b&lt;/code&gt; 必须成立。如果迭代器的结果恰好为零或一个元素，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf20cf0a5a4308c50df24aa720ae0a415bab9777" translate="yes" xml:space="preserve">
          <source>That is, for each element &lt;code&gt;a&lt;/code&gt; and its following element &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;a &amp;lt;= b&lt;/code&gt; must hold. If the slice yields exactly zero or one element, &lt;code&gt;true&lt;/code&gt; is returned.</source>
          <target state="translated">也就是说，对于每个元素 &lt;code&gt;a&lt;/code&gt; 及其随后的元素 &lt;code&gt;b&lt;/code&gt; ， &lt;code&gt;a &amp;lt;= b&lt;/code&gt; 必须成立。如果切片精确地产生零或一个元素，则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6141d9d942518cd742366c4e9a373eaeca5ba99a" translate="yes" xml:space="preserve">
          <source>That number of bytes is always between 1 and 4, inclusive.</source>
          <target state="translated">这个字节数总是在1到4之间,包括。</target>
        </trans-unit>
        <trans-unit id="5636ef2e6fa0c7ceabc2956a6a83de732290f283" translate="yes" xml:space="preserve">
          <source>That said, leaking resources such as memory or I/O objects is usually undesirable, so &lt;code&gt;forget&lt;/code&gt; is only recommended for specialized use cases like those shown below.</source>
          <target state="translated">就是说，通常不希望泄漏诸如内存或I / O对象之类的资源，因此建议仅在特殊使用情况下（如以下所示），才建议 &lt;code&gt;forget&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="bb0090f499faa8dbbaeb7f14d05f8e092483990d" translate="yes" xml:space="preserve">
          <source>That said, leaking resources such as memory or I/O objects is usually undesirable. The need comes up in some specialized use cases for FFI or unsafe code, but even then, &lt;a href=&quot;struct.manuallydrop&quot;&gt;&lt;code&gt;ManuallyDrop&lt;/code&gt;&lt;/a&gt; is typically preferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e204c683273a7064bf611cb21bf25b6a58ab5e" translate="yes" xml:space="preserve">
          <source>That said, the implementation should provide a correct estimation, because otherwise it would be a violation of the trait's protocol.</source>
          <target state="translated">也就是说,实施应该提供一个正确的估计,因为否则就违反了性状的协议。</target>
        </trans-unit>
        <trans-unit id="7bf3790580feeb3b9968c1d5ee569f07fe6dc889" translate="yes" xml:space="preserve">
          <source>That said, there is no wrong way to read this book. Read it however you feel helps you best.</source>
          <target state="translated">也就是说,读这本书的方式没有错。你觉得怎么读对你最有帮助就怎么读。</target>
        </trans-unit>
        <trans-unit id="947746e61ef4047bc2347841bf565d094e7bdec0" translate="yes" xml:space="preserve">
          <source>That solves our problem! With only &lt;code&gt;s2&lt;/code&gt; valid, when it goes out of scope, it alone will free the memory, and we&amp;rsquo;re done.</source>
          <target state="translated">那解决了我们的问题！只有 &lt;code&gt;s2&lt;/code&gt; 有效，当它超出范围时，仅凭它就可以释放内存，我们就完成了。</target>
        </trans-unit>
        <trans-unit id="9ce801650086879dbc3fc82fa6315949a2552c96" translate="yes" xml:space="preserve">
          <source>That was a bit of a whirlwind tour of unwind safety, but for more information about unwind safety and how it applies to Rust, see an &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1236-stabilize-catch-panic.md&quot;&gt;associated RFC&lt;/a&gt;.</source>
          <target state="translated">放风安全有点儿麻烦，但有关放风安全及其如何应用于Rust的更多信息，请参阅&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1236-stabilize-catch-panic.md&quot;&gt;相关的RFC&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="92b56514bc3604cf70d965940d81ed28035240b2" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s 18 bytes and is how computers ultimately store this data. If we look at them as Unicode scalar values, which are what Rust&amp;rsquo;s &lt;code&gt;char&lt;/code&gt; type is, those bytes look like this:</source>
          <target state="translated">那是18个字节，这是计算机最终存储此数据的方式。如果我们将它们视为Unicode标量值（即Rust的 &lt;code&gt;char&lt;/code&gt; 类型），则这些字节如下所示：</target>
        </trans-unit>
        <trans-unit id="9fac4c3e9f71b06878dbbb47f3ce2814227f227f" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s a lot of &lt;code&gt;match&lt;/code&gt;! The &lt;code&gt;match&lt;/code&gt; expression is very useful but also very much a primitive. In Chapter 13, you&amp;rsquo;ll learn about closures; the &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; type has many methods that accept a closure and are implemented using &lt;code&gt;match&lt;/code&gt; expressions. Using those methods will make your code more concise. A more seasoned Rustacean might write this code instead of Listing 9-5:</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; 很多！该 &lt;code&gt;match&lt;/code&gt; 的表达是非常有用的，但也很原始。在第13章中，您将学习闭包。该 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 类型具有接纳封闭件，并使用被实现许多方法 &lt;code&gt;match&lt;/code&gt; 表达式。使用这些方法将使您的代码更简洁。经验丰富的Rustacean可能会编写以下代码，而不是清单9-5：</target>
        </trans-unit>
        <trans-unit id="ef238338d4e12acdba68729fda27f2648f9a373c" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s a lot of output! The exact output you see might be different depending on your operating system and Rust version. In order to get backtraces with this information, debug symbols must be enabled. Debug symbols are enabled by default when using &lt;code&gt;cargo build&lt;/code&gt; or &lt;code&gt;cargo run&lt;/code&gt; without the &lt;code&gt;--release&lt;/code&gt; flag, as we have here.</source>
          <target state="translated">大量的输出！您看到的确切输出可能会有所不同，具体取决于您的操作系统和Rust版本。为了获得带有此信息的回溯，必须启用调试符号。如此处所示，当使用无 &lt;code&gt;--release&lt;/code&gt; 标志的 &lt;code&gt;cargo build&lt;/code&gt; 或 &lt;code&gt;cargo run&lt;/code&gt; 时，默认情况下会启用调试符号。</target>
        </trans-unit>
        <trans-unit id="1b9244a451d65d27f90f013b616e273e2c23a8a2" translate="yes" xml:space="preserve">
          <source>That's it! Let's dig into iterators.</source>
          <target state="translated">就是这样!让我们来研究一下迭代器。</target>
        </trans-unit>
        <trans-unit id="061168032f743f39ddf71cf9c7a9d9f5d6f181f3" translate="yes" xml:space="preserve">
          <source>The &quot;default&quot; usage of this type as a queue is to use &lt;a href=&quot;#method.push_back&quot;&gt;&lt;code&gt;push_back&lt;/code&gt;&lt;/a&gt; to add to the queue, and &lt;a href=&quot;#method.pop_front&quot;&gt;&lt;code&gt;pop_front&lt;/code&gt;&lt;/a&gt; to remove from the queue. &lt;a href=&quot;#method.extend&quot;&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#method.append&quot;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt; push onto the back in this manner, and iterating over &lt;code&gt;VecDeque&lt;/code&gt; goes front to back.</source>
          <target state="translated">此类型作为队列的&amp;ldquo;默认&amp;rdquo;用法是使用&lt;a href=&quot;#method.push_back&quot;&gt; &lt;code&gt;push_back&lt;/code&gt; &lt;/a&gt;添加到队列中，使用&lt;a href=&quot;#method.pop_front&quot;&gt; &lt;code&gt;pop_front&lt;/code&gt; &lt;/a&gt;从队列中删除。以这种方式向后&lt;a href=&quot;#method.extend&quot;&gt; &lt;code&gt;extend&lt;/code&gt; &lt;/a&gt;并&lt;a href=&quot;#method.append&quot;&gt; &lt;code&gt;append&lt;/code&gt; &lt;/a&gt;推入，然后在 &lt;code&gt;VecDeque&lt;/code&gt; 上进行迭代。</target>
        </trans-unit>
        <trans-unit id="e1996b7a38e8030e5ba09e25339c72996ff81148" translate="yes" xml:space="preserve">
          <source>The &quot;default&quot; usage of this type as a queue is to use &lt;a href=&quot;../struct.vecdeque#method.push_back&quot;&gt;&lt;code&gt;push_back&lt;/code&gt;&lt;/a&gt; to add to the queue, and &lt;a href=&quot;../struct.vecdeque#method.pop_front&quot;&gt;&lt;code&gt;pop_front&lt;/code&gt;&lt;/a&gt; to remove from the queue. &lt;a href=&quot;../struct.vecdeque#method.extend&quot;&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../struct.vecdeque#method.append&quot;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt; push onto the back in this manner, and iterating over &lt;code&gt;VecDeque&lt;/code&gt; goes front to back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8660a906a07f3cb76ce3714efc3b35a643f54a" translate="yes" xml:space="preserve">
          <source>The &quot;default&quot; usage of this type as a queue is to use &lt;a href=&quot;struct.vecdeque#method.push_back&quot;&gt;&lt;code&gt;push_back&lt;/code&gt;&lt;/a&gt; to add to the queue, and &lt;a href=&quot;struct.vecdeque#method.pop_front&quot;&gt;&lt;code&gt;pop_front&lt;/code&gt;&lt;/a&gt; to remove from the queue. &lt;a href=&quot;struct.vecdeque#method.extend&quot;&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.vecdeque#method.append&quot;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt; push onto the back in this manner, and iterating over &lt;code&gt;VecDeque&lt;/code&gt; goes front to back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01cb9e838bce9598fdfd4c3684f101808c1294f8" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;Advanced Lifetimes&amp;rdquo; section in Chapter 19 was removed because compiler improvements have made the constructs in that section even rarer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f389fc23a4edc2c2a963efce47f9899bcc8519" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;Advanced Lifetimes&amp;rdquo; section of Chapter 19 was removed because compiler improvements have made the constructs in that section even rarer.</source>
          <target state="translated">删除了第19章的&amp;ldquo;高级生存时间&amp;rdquo;部分，因为编译器的改进使该部分中的构造更加罕见。</target>
        </trans-unit>
        <trans-unit id="f99557dc0a8fdf7a63f0792d647f548b4ff6f7ab" translate="yes" xml:space="preserve">
          <source>The 128-bit signed integer type.</source>
          <target state="translated">128位有符号整数类型。</target>
        </trans-unit>
        <trans-unit id="2ecb830f3b64176d279185c7c171382698dc346b" translate="yes" xml:space="preserve">
          <source>The 128-bit unsigned integer type.</source>
          <target state="translated">128位无符号整数类型。</target>
        </trans-unit>
        <trans-unit id="024e734140c83218cfd913643692a04c708db5ec" translate="yes" xml:space="preserve">
          <source>The 16-bit signed integer type.</source>
          <target state="translated">16位有符号整数类型。</target>
        </trans-unit>
        <trans-unit id="c45d15aa8a84f450baba97f342935672e6fa7c43" translate="yes" xml:space="preserve">
          <source>The 16-bit unsigned integer type.</source>
          <target state="translated">16位无符号整数类型。</target>
        </trans-unit>
        <trans-unit id="fca5433f25a52ee7287767b1930704d918391065" translate="yes" xml:space="preserve">
          <source>The 2015 edition does not allow use declarations to reference the &lt;a href=&quot;extern-crates#extern-prelude&quot;&gt;extern prelude&lt;/a&gt;. Thus &lt;a href=&quot;extern-crates&quot;&gt;&lt;code&gt;extern crate&lt;/code&gt;&lt;/a&gt; declarations are still required in 2015 to reference an external crate in a use declaration. Beginning with the 2018 edition, use declarations can specify an external crate dependency the same way &lt;code&gt;extern crate&lt;/code&gt; can.</source>
          <target state="translated">2015版不允许使用声明引用&lt;a href=&quot;extern-crates#extern-prelude&quot;&gt;外部前奏&lt;/a&gt;。因此，2015年仍然需要&lt;a href=&quot;extern-crates&quot;&gt; &lt;code&gt;extern crate&lt;/code&gt; &lt;/a&gt;声明，以在使用声明中引用外部包装箱。从2018年版本开始，use声明可以指定外部包装箱依赖关系，方式与 &lt;code&gt;extern crate&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="b6d857578ac6c78bfa58339fa5a83d29b7a47348" translate="yes" xml:space="preserve">
          <source>The 2018 Edition of the Rust language includes a number of improvements that make Rust more ergonomic and easier to learn. This iteration of the book contains a number of changes to reflect those improvements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b6de1c048ad3b08c5d50eb1e62ebf661747fc3" translate="yes" xml:space="preserve">
          <source>The 2018 Edition of the Rust language includes a number of improvements that make Rust more ergonomic and easier to learn. This printing of the book contains a number of changes to reflect those improvements:</source>
          <target state="translated">2018年版的Rust语言包括许多改进,使Rust更符合人体工程学,更容易学习。本书的这次印刷包含了一些变化,以反映这些改进。</target>
        </trans-unit>
        <trans-unit id="2c35b45536addab0f127b7ef2a73381bf5aab740" translate="yes" xml:space="preserve">
          <source>The 32-bit floating point type.</source>
          <target state="translated">32位浮点类型。</target>
        </trans-unit>
        <trans-unit id="ede6acb001e744d94e80e43f20515bed53288286" translate="yes" xml:space="preserve">
          <source>The 32-bit signed integer type.</source>
          <target state="translated">32位有符号整数类型。</target>
        </trans-unit>
        <trans-unit id="a9e99a82ec2d26441031e5f8781a5ebb65a83e0e" translate="yes" xml:space="preserve">
          <source>The 32-bit unsigned integer type.</source>
          <target state="translated">32位无符号整数类型。</target>
        </trans-unit>
        <trans-unit id="13cb697c6b75c7757e9c51749eb9c614ddc9a70f" translate="yes" xml:space="preserve">
          <source>The 64-bit floating point type.</source>
          <target state="translated">64位浮点类型。</target>
        </trans-unit>
        <trans-unit id="748e7d28f53e7a36937bb25af3f1a76e6a491ad6" translate="yes" xml:space="preserve">
          <source>The 64-bit signed integer type.</source>
          <target state="translated">64位有符号整数类型。</target>
        </trans-unit>
        <trans-unit id="25aeddd62dc36790a2166200538648d83779c0d0" translate="yes" xml:space="preserve">
          <source>The 64-bit unsigned integer type.</source>
          <target state="translated">64位无符号整数类型。</target>
        </trans-unit>
        <trans-unit id="0825a8c90a6add467ca53950b645a26af9033007" translate="yes" xml:space="preserve">
          <source>The 8-bit signed integer type.</source>
          <target state="translated">8位有符号的整数类型。</target>
        </trans-unit>
        <trans-unit id="6d1f46b751b47e95357a0c40c6e78729c3531e1e" translate="yes" xml:space="preserve">
          <source>The 8-bit unsigned integer type.</source>
          <target state="translated">8位无符号整数类型。</target>
        </trans-unit>
        <trans-unit id="b568b58db2fe5b477d28998d21858de250eecb32" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#method.clone&quot;&gt;&lt;code&gt;Arc::clone(&amp;amp;from)&lt;/code&gt;&lt;/a&gt; syntax is the most idiomatic because it conveys more explicitly the meaning of the code. In the example above, this syntax makes it easier to see that this code is creating a new reference rather than copying the whole content of foo.</source>
          <target state="translated">该&lt;a href=&quot;#method.clone&quot;&gt; &lt;code&gt;Arc::clone(&amp;amp;from)&lt;/code&gt; &lt;/a&gt;语法是最地道的，因为它传达更明确的代码的含义。在上面的示例中，使用此语法可以更轻松地看到此代码正在创建新引用，而不是复制foo的全部内容。</target>
        </trans-unit>
        <trans-unit id="fd0354b8e891bd703f8ef8a8ce8547a17dc2e4cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#method.connect&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt; method will connect the socket to a peer.</source>
          <target state="translated">该&lt;a href=&quot;#method.connect&quot;&gt; &lt;code&gt;connect&lt;/code&gt; &lt;/a&gt;方法将套接字连接到同行。</target>
        </trans-unit>
        <trans-unit id="de66ae551d77056e5d10cff2c3fd9dbcc9b63e6e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#method.connect&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt; method will connect this socket to a remote address. This method will fail if the socket is not connected.</source>
          <target state="translated">该&lt;a href=&quot;#method.connect&quot;&gt; &lt;code&gt;connect&lt;/code&gt; &lt;/a&gt;方法此套接字连接到远程地址。如果未连接套接字，此方法将失败。</target>
        </trans-unit>
        <trans-unit id="3822ea1855bf914e5a814986732fc459619fc61c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method can emulate &lt;code&gt;truncate&lt;/code&gt;, but causes the excess elements to be returned instead of dropped.</source>
          <target state="translated">所述&lt;a href=&quot;#method.drain&quot;&gt; &lt;code&gt;drain&lt;/code&gt; &lt;/a&gt;方法可以模拟 &lt;code&gt;truncate&lt;/code&gt; ，但导致要返回而不是丢弃多余的元件。</target>
        </trans-unit>
        <trans-unit id="a9d6dbd0eeefdb718b7113fea8088d62bd58b0d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#method.len&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/a&gt; method has a default implementation, so you usually shouldn't implement it. However, you may be able to provide a more performant implementation than the default, so overriding it in this case makes sense.</source>
          <target state="translated">该&lt;a href=&quot;#method.len&quot;&gt; &lt;code&gt;len&lt;/code&gt; &lt;/a&gt;方法具有缺省实现，因此你通常不应该实现它。但是，您可能能够提供比默认设置更有效的实现，因此在这种情况下将其覆盖是有意义的。</target>
        </trans-unit>
        <trans-unit id="dade93dc3cf6b97db5474305c3207f7c692d153c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; adapter is very useful, but only when the closure argument produces values. If it produces an iterator instead, there's an extra layer of indirection. &lt;code&gt;flat_map()&lt;/code&gt; will remove this extra layer on its own.</source>
          <target state="translated">该&lt;a href=&quot;#method.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt;适配器是非常有用的，但只有当闭合参数产生的值。如果它产生一个迭代器，则会有一个间接层。 &lt;code&gt;flat_map()&lt;/code&gt; 会自行删除此额​​外的图层。</target>
        </trans-unit>
        <trans-unit id="7a52c1262c15b7898ef7ba52e5c11aa28470cc03" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#method.new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; method will actually check that the provided &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; does not have 0 bytes in the middle, and return an error if it finds one.</source>
          <target state="translated">该&lt;a href=&quot;#method.new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt;方法将实际检查所提供的 &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; 没有在中间0字节，如果找到返回一个错误。</target>
        </trans-unit>
        <trans-unit id="156348d96d775ff156fee076f0f98b0084e3469d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; method may be used to send data to the specified address. &lt;a href=&quot;#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#method.recv_from&quot;&gt;&lt;code&gt;recv_from&lt;/code&gt;&lt;/a&gt; will only receive data from that address.</source>
          <target state="translated">所述&lt;a href=&quot;#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt;方法可被用于将数据发送到指定地址。&lt;a href=&quot;#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#method.recv_from&quot;&gt; &lt;code&gt;recv_from&lt;/code&gt; &lt;/a&gt;将仅从该地址接收数据。</target>
        </trans-unit>
        <trans-unit id="1ad11576c65e9334d7573beaf36142b4de74e09c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#primitive-representations&quot;&gt;primitive representations&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6b3d78fe45feec8a5741e2a3ac93f1ed3a19d8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#tymethod.flush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; method is useful for adaptors and explicit buffers themselves for ensuring that all buffered data has been pushed out to the 'true sink'.</source>
          <target state="translated">该&lt;a href=&quot;#tymethod.flush&quot;&gt; &lt;code&gt;flush&lt;/code&gt; &lt;/a&gt;方法是适配器和明确自己的缓冲区确保所有缓存数据已经被推到了&amp;ldquo;真汇&amp;rdquo;是有用的。</target>
        </trans-unit>
        <trans-unit id="8a62cb575b08d38c732e1bba9328976a264fdb19" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; method will attempt to write some data into the object, returning how many bytes were successfully written.</source>
          <target state="translated">该&lt;a href=&quot;#tymethod.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;方法将尝试一些数据写入到对象，返回多少字节被成功写入。</target>
        </trans-unit>
        <trans-unit id="8fcdedc3c9e84c7fa96e2530650c1bc070bc790b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../expressions/block-expr#async-blocks&quot;&gt;&lt;code&gt;async move&lt;/code&gt; block&lt;/a&gt; in the body captures all function parameters, including those that are unused or bound to a &lt;code&gt;_&lt;/code&gt; pattern. This ensures that function parameters are dropped in the same order as they would be if the function were not async, except that the drop occurs when the returned future has been fully awaited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78f52a30365dea52628c4ade488db0345ffa3ac" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../macro.eprint&quot;&gt;&lt;code&gt;eprint!&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../macro.eprintln&quot;&gt;&lt;code&gt;eprintln!&lt;/code&gt;&lt;/a&gt; macros are identical to &lt;a href=&quot;../macro.print&quot;&gt;&lt;code&gt;print!&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../macro.println&quot;&gt;&lt;code&gt;println!&lt;/code&gt;&lt;/a&gt;, respectively, except they emit their output to stderr.</source>
          <target state="translated">电子版&lt;a href=&quot;../macro.eprint&quot;&gt; &lt;code&gt;eprint!&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../macro.eprintln&quot;&gt; &lt;code&gt;eprintln!&lt;/code&gt; &lt;/a&gt;宏与&lt;a href=&quot;../macro.print&quot;&gt; &lt;code&gt;print!&lt;/code&gt; &lt;/a&gt;完全相同！和&lt;a href=&quot;../macro.println&quot;&gt; &lt;code&gt;println!&lt;/code&gt; &lt;/a&gt;，除了它们将输出发送到stderr之外。</target>
        </trans-unit>
        <trans-unit id="15b30e899910805c24344f039598ed4f0cfd76f0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; macro is intended to be familiar to those coming from C's &lt;code&gt;printf&lt;/code&gt;/&lt;code&gt;fprintf&lt;/code&gt; functions or Python's &lt;code&gt;str.format&lt;/code&gt; function.</source>
          <target state="translated">该&lt;a href=&quot;../macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt; &lt;code&gt;str.format&lt;/code&gt; 在使那些使用C的 &lt;code&gt;printf&lt;/code&gt; / &lt;code&gt;fprintf&lt;/code&gt; 函数或Python的str.format函数的用户熟悉。</target>
        </trans-unit>
        <trans-unit id="5d076b83cf0704732b7b9eb8c03c4bfbdeaffd03" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../macro.format_args&quot;&gt;&lt;code&gt;format_args!&lt;/code&gt;&lt;/a&gt; macro will safely create an instance of this structure. The macro validates the format string at compile-time so usage of the &lt;a href=&quot;fn.write&quot;&gt;&lt;code&gt;write()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.format&quot;&gt;&lt;code&gt;format()&lt;/code&gt;&lt;/a&gt; functions can be safely performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da9aedd3913426ccb3cbeae460a449f6f18fc2d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../macro.format_args&quot;&gt;&lt;code&gt;format_args!&lt;/code&gt;&lt;/a&gt; macro will safely create an instance of this structure. The macro validates the format string at compile-time so usage of the &lt;a href=&quot;fn.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.format&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt; functions can be safely performed.</source>
          <target state="translated">该&lt;a href=&quot;../macro.format_args&quot;&gt; &lt;code&gt;format_args!&lt;/code&gt; &lt;/a&gt;宏将安全地创建此结构的实例。该宏在编译时验证格式字符串，因此可以安全地执行&lt;a href=&quot;fn.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;fn.format&quot;&gt; &lt;code&gt;format&lt;/code&gt; &lt;/a&gt;函数的使用。</target>
        </trans-unit>
        <trans-unit id="d6220f58fc37e6b8b0afc01735948c86469d85de" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../macro.vec&quot;&gt;&lt;code&gt;vec!&lt;/code&gt;&lt;/a&gt; macro is provided to make initialization more convenient:</source>
          <target state="translated">该&lt;a href=&quot;../macro.vec&quot;&gt; &lt;code&gt;vec!&lt;/code&gt; &lt;/a&gt;提供了宏以使初始化更加方便：</target>
        </trans-unit>
        <trans-unit id="d6015eed300b7de406449e79cfdc1aa2f387182e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../macros-by-example#the-macro_use-attribute&quot;&gt;&lt;code&gt;macro_use&lt;/code&gt; attribute&lt;/a&gt; works as usual and import the macro names into the macro-use prelude.</source>
          <target state="translated">该&lt;a href=&quot;../macros-by-example#the-macro_use-attribute&quot;&gt; &lt;code&gt;macro_use&lt;/code&gt; 属性&lt;/a&gt;照常工作，并导入宏名到宏观使用的前奏。</target>
        </trans-unit>
        <trans-unit id="3ee79a0bb859db06f06e2ddc850e161230b3ef29" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../marker/trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt; constraint is because the closure will need to be passed &lt;em&gt;by value&lt;/em&gt; from the thread where it is spawned to the new thread. Its return value will need to be passed from the new thread to the thread where it is &lt;code&gt;join&lt;/code&gt;ed. As a reminder, the &lt;a href=&quot;../marker/trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt; marker trait expresses that it is safe to be passed from thread to thread. &lt;a href=&quot;../marker/trait.sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt; expresses that it is safe to have a reference be passed from thread to thread.</source>
          <target state="translated">该&lt;a href=&quot;../marker/trait.send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; &lt;/a&gt;约束是因为关闭将需要传递&lt;em&gt;的值&lt;/em&gt;从那里催生新线程的线程。它的返回值需要从新线程传递到 &lt;code&gt;join&lt;/code&gt; 它的线程。提醒一下，&lt;a href=&quot;../marker/trait.send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; &lt;/a&gt;标记特征表示从线程到线程传递是安全的。&lt;a href=&quot;../marker/trait.sync&quot;&gt; &lt;code&gt;Sync&lt;/code&gt; &lt;/a&gt;表示从线程到线程传递引用是安全的。</target>
        </trans-unit>
        <trans-unit id="9c69caf5cbc6ae5668ac370ea6aa28c0348ce679" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../paths&quot;&gt;path&lt;/a&gt; to an associated item is any path to the implementing type, followed by the associated item's identifier as the final path component.</source>
          <target state="translated">该&lt;a href=&quot;../paths&quot;&gt;路径&lt;/a&gt;到相关的项目是将实施类型的任何路径，接着由相关联的项的识别码作为最终路径组件。</target>
        </trans-unit>
        <trans-unit id="1dedee4df1c883aa9e7db0132fc24154a02120fc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../pin/struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt; type is used instead to prevent moves through the type system. Pointers &lt;code&gt;P&amp;lt;T&amp;gt;&lt;/code&gt; wrapped in the &lt;a href=&quot;../pin/struct.pin&quot;&gt;&lt;code&gt;Pin&amp;lt;P&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt; wrapper can't be moved out of. See the &lt;a href=&quot;../pin/index&quot;&gt;&lt;code&gt;pin&lt;/code&gt; module&lt;/a&gt; documentation for more information on pinning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c6d762c492370e5bdcdefde3e4fc5cf31a9b6e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../reference/items/unions&quot;&gt;Rust equivalent of a C-style union&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../reference/items/unions&quot;&gt;相当于C样式联合&lt;/a&gt;的Rust。</target>
        </trans-unit>
        <trans-unit id="86cbe7690d77cc63e21bdfee9a1e9528110648c5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../reference/types/trait-object&quot;&gt;Reference&lt;/a&gt; has more information about trait objects, their limitations and the differences between editions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6f479476a4a73b474dd9bb423ce981f3c3f329" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; variant of this result indicates that the primitive was not poisoned, and the &lt;code&gt;Guard&lt;/code&gt; is contained within. The &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; variant indicates that the primitive was poisoned. Note that the &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; variant &lt;em&gt;also&lt;/em&gt; carries the associated guard, and it can be acquired through the &lt;a href=&quot;struct.poisonerror#method.into_inner&quot;&gt;&lt;code&gt;into_inner&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">此结果的&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;变体表明该原语未中毒，并且其中包含 &lt;code&gt;Guard&lt;/code&gt; 。该&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;变种表明，原始是被毒死的。请注意，&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;变体&lt;em&gt;还&lt;/em&gt;带有关联的防护，可以通过&lt;a href=&quot;struct.poisonerror#method.into_inner&quot;&gt; &lt;code&gt;into_inner&lt;/code&gt; &lt;/a&gt;方法获取它。</target>
        </trans-unit>
        <trans-unit id="79df059e358a4241ab821f0fe6e918cdbba9f208" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/clone/trait.clone&quot;&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt; trait is a supertrait of &lt;code&gt;Copy&lt;/code&gt;, so it also needs compiler generated implementations. It is implemented by the compiler for the following types:</source>
          <target state="translated">该&lt;a href=&quot;../std/clone/trait.clone&quot;&gt; &lt;code&gt;Clone&lt;/code&gt; &lt;/a&gt;性状是的supertrait &lt;code&gt;Copy&lt;/code&gt; ，因此它也需要编译器生成实施方式。它由编译器针对以下类型实现：</target>
        </trans-unit>
        <trans-unit id="90ba5aefe61d573b28b76d88a60eabe0413d5c63" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; trait changes the semantics of a type implementing it. Values whose type implements &lt;code&gt;Copy&lt;/code&gt; are copied rather than moved upon assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeefbcb93aa9d7429fc3ba4a3a1ce956f75d5cfc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; trait changes the semantics of a type implementing it. Values whose type implements &lt;code&gt;Copy&lt;/code&gt; are copied rather than moved upon assignment. &lt;code&gt;Copy&lt;/code&gt; cannot be implemented for types which implement &lt;code&gt;Drop&lt;/code&gt;, or which have fields that are not &lt;code&gt;Copy&lt;/code&gt;. &lt;code&gt;Copy&lt;/code&gt; is implemented by the compiler for</source>
          <target state="translated">该&lt;a href=&quot;../std/marker/trait.copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt;特性改变实现它的类型的语义。类型实现 &lt;code&gt;Copy&lt;/code&gt; 的值将被复制而不是在赋值时移动。 &lt;code&gt;Copy&lt;/code&gt; 不能为它们实现类型来实现 &lt;code&gt;Drop&lt;/code&gt; ，或有不字段 &lt;code&gt;Copy&lt;/code&gt; 。 &lt;code&gt;Copy&lt;/code&gt; 是由编译器实现的</target>
        </trans-unit>
        <trans-unit id="0e14c3a80117b6ea49358dfdccbdf20f1c51a89c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/marker/trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt; trait indicates that a value of this type is safe to send from one thread to another.</source>
          <target state="translated">该&lt;a href=&quot;../std/marker/trait.send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; &lt;/a&gt;特质表明，这种类型的值是安全的，从一个线程发送到另一个。</target>
        </trans-unit>
        <trans-unit id="974ae2ba65e9e772d3c59ca8b9d11adff4f54e38" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/marker/trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../std/marker/trait.sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../std/marker/trait.unpin&quot;&gt;&lt;code&gt;Unpin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../std/panic/trait.unwindsafe&quot;&gt;&lt;code&gt;UnwindSafe&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../std/panic/trait.refunwindsafe&quot;&gt;&lt;code&gt;RefUnwindSafe&lt;/code&gt;&lt;/a&gt; traits are &lt;em&gt;auto traits&lt;/em&gt;. Auto traits have special properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd79bdd63f1cb15136ac63579db2daa51f56797" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/marker/trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../std/marker/trait.sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../std/panic/trait.unwindsafe&quot;&gt;&lt;code&gt;UnwindSafe&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../std/panic/trait.refunwindsafe&quot;&gt;&lt;code&gt;RefUnwindSafe&lt;/code&gt;&lt;/a&gt; traits are &lt;em&gt;auto traits&lt;/em&gt;. Auto traits have special properties.</source>
          <target state="translated">在&lt;a href=&quot;../std/marker/trait.send&quot;&gt; &lt;code&gt;Send&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../std/marker/trait.sync&quot;&gt; &lt;code&gt;Sync&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../std/panic/trait.unwindsafe&quot;&gt; &lt;code&gt;UnwindSafe&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../std/panic/trait.refunwindsafe&quot;&gt; &lt;code&gt;RefUnwindSafe&lt;/code&gt; &lt;/a&gt;特点是&lt;em&gt;自动特质&lt;/em&gt;。自动特征具有特殊的属性。</target>
        </trans-unit>
        <trans-unit id="292a56639a943e7a95497bb0cf72fbedd7460764" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/marker/trait.sized&quot;&gt;&lt;code&gt;Sized&lt;/code&gt;&lt;/a&gt; trait indicates that the size of this type is known at compile-time; that is, it's not a &lt;a href=&quot;dynamically-sized-types&quot;&gt;dynamically sized type&lt;/a&gt;. &lt;a href=&quot;types/parameters&quot;&gt;Type parameters&lt;/a&gt; are &lt;code&gt;Sized&lt;/code&gt; by default. &lt;code&gt;Sized&lt;/code&gt; is always implemented automatically by the compiler, not by &lt;a href=&quot;items/implementations&quot;&gt;implementation items&lt;/a&gt;.</source>
          <target state="translated">的&lt;a href=&quot;../std/marker/trait.sized&quot;&gt; &lt;code&gt;Sized&lt;/code&gt; &lt;/a&gt;性状表明这种类型的大小在编译时已知的; 也就是说，它不是&lt;a href=&quot;dynamically-sized-types&quot;&gt;动态大小的类型&lt;/a&gt;。默认情况下，&lt;a href=&quot;types/parameters&quot;&gt;类型参数&lt;/a&gt;的 &lt;code&gt;Sized&lt;/code&gt; 为。 &lt;code&gt;Sized&lt;/code&gt; 总是由编译器自动实现，而不是由&lt;a href=&quot;items/implementations&quot;&gt;实现项&lt;/a&gt;自动实现。</target>
        </trans-unit>
        <trans-unit id="bbed2a3ef9298a62094e0bee99c5f47d5609e39c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/marker/trait.sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt; trait indicates that a value of this type is safe to share between multiple threads. This trait must be implemented for all types used in immutable &lt;a href=&quot;items/static-items&quot;&gt;&lt;code&gt;static&lt;/code&gt; items&lt;/a&gt;.</source>
          <target state="translated">该&lt;a href=&quot;../std/marker/trait.sync&quot;&gt; &lt;code&gt;Sync&lt;/code&gt; &lt;/a&gt;特征表明，这种类型的值是安全的多线程之间共享。必须为不可变&lt;a href=&quot;items/static-items&quot;&gt; &lt;code&gt;static&lt;/code&gt; 项目中&lt;/a&gt;使用的所有类型实现此特征。</target>
        </trans-unit>
        <trans-unit id="0bd4f0026aa17cd077440ff412c90263cb35c5bd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/ops/trait.drop&quot;&gt;&lt;code&gt;Drop&lt;/code&gt;&lt;/a&gt; trait provides a &lt;a href=&quot;destructors&quot;&gt;destructor&lt;/a&gt;, to be run whenever a value of this type is to be destroyed.</source>
          <target state="translated">的&lt;a href=&quot;../std/ops/trait.drop&quot;&gt; &lt;code&gt;Drop&lt;/code&gt; &lt;/a&gt;性状提供了&lt;a href=&quot;destructors&quot;&gt;析构函数&lt;/a&gt;，要运行每当这种类型的值是要被破坏。</target>
        </trans-unit>
        <trans-unit id="767089bdc12afceff4b8eaec0f0a325f5d336e5b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../std/primitive.str#method.parse&quot;&gt;&lt;code&gt;parse&lt;/code&gt; method on strings&lt;/a&gt; parses a string into some kind of number. Because this method can parse a variety of number types, we need to tell Rust the exact number type we want by using &lt;code&gt;let guess: u32&lt;/code&gt;. The colon (&lt;code&gt;:&lt;/code&gt;) after &lt;code&gt;guess&lt;/code&gt; tells Rust we&amp;rsquo;ll annotate the variable&amp;rsquo;s type. Rust has a few built-in number types; the &lt;code&gt;u32&lt;/code&gt; seen here is an unsigned, 32-bit integer. It&amp;rsquo;s a good default choice for a small positive number. You&amp;rsquo;ll learn about other number types in Chapter 3. Additionally, the &lt;code&gt;u32&lt;/code&gt; annotation in this example program and the comparison with &lt;code&gt;secret_number&lt;/code&gt; means that Rust will infer that &lt;code&gt;secret_number&lt;/code&gt; should be a &lt;code&gt;u32&lt;/code&gt; as well. So now the comparison will be between two values of the same type!</source>
          <target state="translated">&lt;a href=&quot;../std/primitive.str#method.parse&quot;&gt;字符串&lt;/a&gt;的 &lt;code&gt;parse&lt;/code&gt; 方法将字符串解析为某种数字。因为此方法可以解析各种数字类型，所以我们需要通过 &lt;code&gt;let guess: u32&lt;/code&gt; 来告诉Rust我们想要的确切数字类型：u32。冒号（ &lt;code&gt;:&lt;/code&gt; ）之后 &lt;code&gt;guess&lt;/code&gt; 告诉锈我们将注释变量的类型。 Rust有一些内置的数字类型。这里看到的 &lt;code&gt;u32&lt;/code&gt; 是一个无符号的32位整数。对于较小的正数，这是一个很好的默认选择。你会在第3章此外了解其他数字类型，在 &lt;code&gt;u32&lt;/code&gt; 在这个示例程序注释和与比较 &lt;code&gt;secret_number&lt;/code&gt; 意味着生锈推断 &lt;code&gt;secret_number&lt;/code&gt; 应该是一个 &lt;code&gt;u32&lt;/code&gt; 也是。因此，现在将在相同类型的两个值之间进行比较！</target>
        </trans-unit>
        <trans-unit id="c4baaa152505c4dd10d0a8afc8811ba9994e6d24" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../str/pattern/index&quot;&gt;pattern&lt;/a&gt; can be a &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, a slice of &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s, or a function or closure that determines if a character matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a13bea0cade14eaae143cc58b002085ddc4bf19" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../str/pattern/index&quot;&gt;pattern&lt;/a&gt; can be a &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, a slice of &lt;a href=&quot;../primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s, or a function or closure that determines if a character matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac19fe7126085cad17eb0b418fa395ae25fa16f2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../str/struct.utf8error&quot;&gt;&lt;code&gt;Utf8Error&lt;/code&gt;&lt;/a&gt; type provided by &lt;a href=&quot;../str/index&quot;&gt;&lt;code&gt;std::str&lt;/code&gt;&lt;/a&gt; represents an error that may occur when converting a slice of &lt;a href=&quot;../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;s to a &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt;. In this sense, it's an analogue to &lt;code&gt;FromUtf8Error&lt;/code&gt;, and you can get one from a &lt;code&gt;FromUtf8Error&lt;/code&gt; through the &lt;a href=&quot;#method.utf8_error&quot;&gt;&lt;code&gt;utf8_error&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../str/index&quot;&gt; &lt;code&gt;std::str&lt;/code&gt; &lt;/a&gt;提供的&lt;a href=&quot;../str/struct.utf8error&quot;&gt; &lt;code&gt;Utf8Error&lt;/code&gt; &lt;/a&gt;类型表示将&lt;a href=&quot;../primitive.u8&quot;&gt; &lt;code&gt;u8&lt;/code&gt; &lt;/a&gt;的切片转换为&lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;&amp;amp;str&lt;/code&gt; &lt;/a&gt;时可能发生的错误。从这个意义上讲，它类似于 &lt;code&gt;FromUtf8Error&lt;/code&gt; ，您可以通过&lt;a href=&quot;#method.utf8_error&quot;&gt; &lt;code&gt;utf8_error&lt;/code&gt; &lt;/a&gt;方法从 &lt;code&gt;FromUtf8Error&lt;/code&gt; 中获得一个。</target>
        </trans-unit>
        <trans-unit id="7fb67cacdd201c958a0c7d558837d2a8082fe699" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../str/struct.utf8error&quot;&gt;&lt;code&gt;Utf8Error&lt;/code&gt;&lt;/a&gt; type provided by &lt;a href=&quot;../str/index&quot;&gt;&lt;code&gt;std::str&lt;/code&gt;&lt;/a&gt; represents an error that may occur when converting a slice of &lt;a href=&quot;../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;s to a &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt;. In this sense, it's an analogue to &lt;code&gt;FromUtf8Error&lt;/code&gt;. See its documentation for more details on using it.</source>
          <target state="translated">&lt;a href=&quot;../str/index&quot;&gt; &lt;code&gt;std::str&lt;/code&gt; &lt;/a&gt;提供的&lt;a href=&quot;../str/struct.utf8error&quot;&gt; &lt;code&gt;Utf8Error&lt;/code&gt; &lt;/a&gt;类型表示将&lt;a href=&quot;../primitive.u8&quot;&gt; &lt;code&gt;u8&lt;/code&gt; &lt;/a&gt;的切片转换为&lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;&amp;amp;str&lt;/code&gt; &lt;/a&gt;时可能发生的错误。从这个意义上讲，它类似于 &lt;code&gt;FromUtf8Error&lt;/code&gt; 。有关使用它的更多详细信息，请参见其文档。</target>
        </trans-unit>
        <trans-unit id="239e6c53cbac59da452aab2dc0d25e7124ea430b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../str/struct.utf8error&quot;&gt;&lt;code&gt;Utf8Error&lt;/code&gt;&lt;/a&gt; type provided by &lt;a href=&quot;https://doc.rust-lang.org/core/str/index.html&quot;&gt;&lt;code&gt;std::str&lt;/code&gt;&lt;/a&gt; represents an error that may occur when converting a slice of &lt;a href=&quot;../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;s to a &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt;. In this sense, it's an analogue to &lt;code&gt;FromUtf8Error&lt;/code&gt;, and you can get one from a &lt;code&gt;FromUtf8Error&lt;/code&gt; through the &lt;a href=&quot;struct.fromutf8error#method.utf8_error&quot;&gt;&lt;code&gt;utf8_error&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d50f09079feb56741d3701cde3c9928a1a6e9ce" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../str/struct.utf8error&quot;&gt;&lt;code&gt;Utf8Error&lt;/code&gt;&lt;/a&gt; type provided by &lt;a href=&quot;https://doc.rust-lang.org/core/str/index.html&quot;&gt;&lt;code&gt;std::str&lt;/code&gt;&lt;/a&gt; represents an error that may occur when converting a slice of &lt;a href=&quot;../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;s to a &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt;. In this sense, it's an analogue to &lt;code&gt;FromUtf8Error&lt;/code&gt;. See its documentation for more details on using it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddda8120a353c19c1143b9fe623d73b4dcc57ac8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;boxed/struct.box#method.into_raw&quot;&gt;&lt;code&gt;into_raw&lt;/code&gt;&lt;/a&gt; function consumes a box and returns the raw pointer. It doesn't destroy &lt;code&gt;T&lt;/code&gt; or deallocate any memory.</source>
          <target state="translated">该&lt;a href=&quot;boxed/struct.box#method.into_raw&quot;&gt; &lt;code&gt;into_raw&lt;/code&gt; &lt;/a&gt;功能会消耗一箱，并返回原始指针。它不会破坏 &lt;code&gt;T&lt;/code&gt; 或释放任何内存。</target>
        </trans-unit>
        <trans-unit id="f8812873ebf26389aa2891235cb5791e408b7568" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;collections/index&quot;&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; module defines maps, sets, linked lists and other typical collection types, including the common &lt;a href=&quot;collections/struct.hashmap&quot;&gt;&lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述&lt;a href=&quot;collections/index&quot;&gt; &lt;code&gt;collections&lt;/code&gt; &lt;/a&gt;模块定义映射，集合，链表和其他典型的集合类型，包括常见&lt;a href=&quot;collections/struct.hashmap&quot;&gt; &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a000df2416eeaceaee8b63bcc4f4d96683535efe" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;conditional-compilation#the-cfg-attribute&quot;&gt;&lt;code&gt;cfg&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;conditional-compilation#the-cfg_attr-attribute&quot;&gt;&lt;code&gt;cfg_attr&lt;/code&gt;&lt;/a&gt; attributes are active. The &lt;a href=&quot;attributes/testing#the-test-attribute&quot;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt; attribute is inert when compiling for tests and active otherwise. &lt;a href=&quot;procedural-macros#attribute-macros&quot;&gt;Attribute macros&lt;/a&gt; are active. All other attributes are inert.</source>
          <target state="translated">该&lt;a href=&quot;conditional-compilation#the-cfg-attribute&quot;&gt; &lt;code&gt;cfg&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;conditional-compilation#the-cfg_attr-attribute&quot;&gt; &lt;code&gt;cfg_attr&lt;/code&gt; &lt;/a&gt;属性是活动的。进行测试编译时，&lt;a href=&quot;attributes/testing#the-test-attribute&quot;&gt; &lt;code&gt;test&lt;/code&gt; &lt;/a&gt;属性为inert，否则为active。&lt;a href=&quot;procedural-macros#attribute-macros&quot;&gt;属性宏&lt;/a&gt;处于活动状态。所有其他属性均为惰性。</target>
        </trans-unit>
        <trans-unit id="6870dee47d3fe5b85f2f338b73c3f7cce4094df6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;dereference operator&lt;/a&gt; except for raw pointers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6a453b12ad8603a837d27104bf0cf09312a2b66" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;dereference operator&lt;/a&gt; for &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; produces a place which can be moved from. This means that the &lt;code&gt;*&lt;/code&gt; operator and the destructor of &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; are built-in to the language.</source>
          <target state="translated">的&lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;引用操作符&lt;/a&gt;为 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 产生可从被移动的地方。这意味着 &lt;code&gt;*&lt;/code&gt; 运算符和 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 的析构函数是该语言的内置函数。</target>
        </trans-unit>
        <trans-unit id="69b248ba9e2f044518c42fe197df63cfa4b2abff" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;dereference operator&lt;/a&gt;.</source>
          <target state="translated">该&lt;a href=&quot;expressions/operator-expr#the-dereference-operator&quot;&gt;引用操作符&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ecbb9300a5b716ea6923d97c4a33bcc05beabca8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fn.current&quot;&gt;&lt;code&gt;thread::current&lt;/code&gt;&lt;/a&gt; function is available even for threads not spawned by the APIs of this module.</source>
          <target state="translated">即使不是此模块的API产生的&lt;a href=&quot;fn.current&quot;&gt; &lt;code&gt;thread::current&lt;/code&gt; &lt;/a&gt;函数也可用。</target>
        </trans-unit>
        <trans-unit id="83c879af00d7b8c642fb06e560ce31570f391a07" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fn.escape_default&quot;&gt;&lt;code&gt;escape_default&lt;/code&gt;&lt;/a&gt; function provides an iterator over the bytes of an escaped version of the character given.</source>
          <target state="translated">该&lt;a href=&quot;fn.escape_default&quot;&gt; &lt;code&gt;escape_default&lt;/code&gt; &lt;/a&gt;功能提供超过给定的字符的转义版本字节的迭代器。</target>
        </trans-unit>
        <trans-unit id="04034ef7d1f4bac81675e414f3f0f4340588ab73" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fn.park&quot;&gt;&lt;code&gt;thread::park&lt;/code&gt;&lt;/a&gt; function blocks the current thread unless or until the token is available for its thread handle, at which point it atomically consumes the token. It may also return &lt;em&gt;spuriously&lt;/em&gt;, without consuming the token. &lt;a href=&quot;fn.park_timeout&quot;&gt;&lt;code&gt;thread::park_timeout&lt;/code&gt;&lt;/a&gt; does the same, but allows specifying a maximum time to block the thread for.</source>
          <target state="translated">该&lt;a href=&quot;fn.park&quot;&gt; &lt;code&gt;thread::park&lt;/code&gt; &lt;/a&gt;的功能块当前线程，除非或直到该令牌可用于它的线程处理，在这一点上，原子所消耗的令牌。它也可能&lt;em&gt;虚假地&lt;/em&gt;返回，而不消耗令牌。&lt;a href=&quot;fn.park_timeout&quot;&gt; &lt;code&gt;thread::park_timeout&lt;/code&gt; &lt;/a&gt;功能相同，但是允许指定最大时间来阻止线程。</target>
        </trans-unit>
        <trans-unit id="010183e81cf43fb24dc3ff708d62a66ab46d9a21" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fn.spawn&quot;&gt;&lt;code&gt;thread::spawn&lt;/code&gt;&lt;/a&gt; free function uses a &lt;code&gt;Builder&lt;/code&gt; with default configuration and &lt;a href=&quot;../result/enum.result#method.unwrap&quot;&gt;&lt;code&gt;unwrap&lt;/code&gt;&lt;/a&gt;s its return value.</source>
          <target state="translated">该&lt;a href=&quot;fn.spawn&quot;&gt; &lt;code&gt;thread::spawn&lt;/code&gt; &lt;/a&gt;免费功能使用 &lt;code&gt;Builder&lt;/code&gt; 的默认配置和&lt;a href=&quot;../result/enum.result#method.unwrap&quot;&gt; &lt;code&gt;unwrap&lt;/code&gt; &lt;/a&gt;开发它的返回值。</target>
        </trans-unit>
        <trans-unit id="29d01ae14bfbd0d95900d7de260d830e6b2aebdb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#scrutinee&quot;&gt;scrutinee&lt;/a&gt; of a &lt;code&gt;match&lt;/code&gt; expression is not a temporary scope, so temporaries in the scrutinee can be dropped after the &lt;code&gt;match&lt;/code&gt; expression. For example, the temporary for &lt;code&gt;1&lt;/code&gt; in &lt;code&gt;match 1 { ref mut z =&amp;gt; z };&lt;/code&gt; lives until the end of the statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d631316da22e8f49a59e622d46e415aca63cb44" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#scrutinee&quot;&gt;scrutinee&lt;/a&gt; of an &lt;a href=&quot;expressions/if-expr#if-let-expressions&quot;&gt;&lt;code&gt;if let&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;expressions/match-expr&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;expressions/loop-expr#predicate-pattern-loops&quot;&gt;&lt;code&gt;while let&lt;/code&gt;&lt;/a&gt; expression.</source>
          <target state="translated">所述&lt;a href=&quot;glossary#scrutinee&quot;&gt;scrutinee&lt;/a&gt;一个的&lt;a href=&quot;expressions/if-expr#if-let-expressions&quot;&gt; &lt;code&gt;if let&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;expressions/match-expr&quot;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt;，或者&lt;a href=&quot;expressions/loop-expr#predicate-pattern-loops&quot;&gt; &lt;code&gt;while let&lt;/code&gt; &lt;/a&gt;表达。</target>
        </trans-unit>
        <trans-unit id="f60d04280a375c73571ef4d8073dd6fd2b866e51" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://doc.rust-lang.org/nomicon/transmutes.html&quot;&gt;nomicon&lt;/a&gt; has additional documentation.</source>
          <target state="translated">该&lt;a href=&quot;https://doc.rust-lang.org/nomicon/transmutes.html&quot;&gt;nomicon&lt;/a&gt;有其他文档。</target>
        </trans-unit>
        <trans-unit id="234fa73a8f6dcc88ca3eeed24db16797666a2694" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1270-deprecation.md&quot;&gt;RFC&lt;/a&gt; contains motivations and more details.</source>
          <target state="translated">该&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1270-deprecation.md&quot;&gt;RFC&lt;/a&gt;包含动机和更多的细节。</target>
        </trans-unit>
        <trans-unit id="b6a13e231d1887805079fed3345d62d70fa98ffc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules#prelude-items&quot;&gt;&lt;code&gt;no_implicit_prelude&lt;/code&gt;&lt;/a&gt; attribute can be used on a module to disable prelude lookups within that module.</source>
          <target state="translated">所述&lt;a href=&quot;modules#prelude-items&quot;&gt; &lt;code&gt;no_implicit_prelude&lt;/code&gt; &lt;/a&gt;属性可以一个模块到该模块内禁止前奏查找上使用。</target>
        </trans-unit>
        <trans-unit id="2d090eed4aa4b11f0c7d0fffa892207e5f74b95a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;option/index&quot;&gt;&lt;code&gt;option&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;result/index&quot;&gt;&lt;code&gt;result&lt;/code&gt;&lt;/a&gt; modules define optional and error-handling types, &lt;a href=&quot;option/enum.option&quot;&gt;&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;result/enum.result&quot;&gt;&lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;iter/index&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; module defines Rust's iterator trait, &lt;a href=&quot;iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;, which works with the &lt;a href=&quot;../book/ch03-05-control-flow#looping-through-a-collection-with-for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; loop to access collections.</source>
          <target state="translated">的&lt;a href=&quot;option/index&quot;&gt; &lt;code&gt;option&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;result/index&quot;&gt; &lt;code&gt;result&lt;/code&gt; &lt;/a&gt;模块定义可选和错误处理的类型，&lt;a href=&quot;option/enum.option&quot;&gt; &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;result/enum.result&quot;&gt; &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; &lt;/a&gt;。在&lt;a href=&quot;iter/index&quot;&gt; &lt;code&gt;iter&lt;/code&gt; &lt;/a&gt;模块定义锈病的迭代特性，&lt;a href=&quot;iter/trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;，它与工作&lt;a href=&quot;../book/ch03-05-control-flow#looping-through-a-collection-with-for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt;循环来访问集合。</target>
        </trans-unit>
        <trans-unit id="a5d9a354e8b0f07a3115dc9b0844a83e58a8610e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;str/pattern/index&quot;&gt;pattern&lt;/a&gt; can be a &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, a slice of &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s, or a function or closure that determines if a character matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0a9260d9d3256bee11715c7bab554254f578e52" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;str/pattern/index&quot;&gt;pattern&lt;/a&gt; can be a &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, a slice of &lt;a href=&quot;primitive.char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;s, or a function or closure that determines if a character matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bee548c1faeb9c0868a59d1b0359e0916d54967" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.arc#method.downgrade&quot;&gt;&lt;code&gt;downgrade&lt;/code&gt;&lt;/a&gt; method can be used to create a non-owning &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer. A &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer can be &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/a&gt;d to an &lt;code&gt;Arc&lt;/code&gt;, but this will return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if the value has already been dropped.</source>
          <target state="translated">的&lt;a href=&quot;struct.arc#method.downgrade&quot;&gt; &lt;code&gt;downgrade&lt;/code&gt; &lt;/a&gt;方法可用于产生非拥有&lt;a href=&quot;struct.weak&quot;&gt; &lt;code&gt;Weak&lt;/code&gt; &lt;/a&gt;指针。一个&lt;a href=&quot;struct.weak&quot;&gt; &lt;code&gt;Weak&lt;/code&gt; &lt;/a&gt;指针可以&lt;a href=&quot;struct.weak#method.upgrade&quot;&gt; &lt;code&gt;upgrade&lt;/code&gt; &lt;/a&gt; d一个 &lt;code&gt;Arc&lt;/code&gt; ，但是这将返回&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;如果该值已经下降。</target>
        </trans-unit>
        <trans-unit id="74bc0ed50e554fb672c29105c76cd20026688a4b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.arc#method.downgrade&quot;&gt;&lt;code&gt;downgrade&lt;/code&gt;&lt;/a&gt; method can be used to create a non-owning &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer. A &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer can be &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/a&gt;d to an &lt;code&gt;Arc&lt;/code&gt;, but this will return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if the value stored in the allocation has already been dropped. In other words, &lt;code&gt;Weak&lt;/code&gt; pointers do not keep the value inside the allocation alive; however, they &lt;em&gt;do&lt;/em&gt; keep the allocation (the backing store for the value) alive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c3ecdf0be1261908d0f10ca942b75ee9286aef" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.arguments&quot;&gt;&lt;code&gt;Arguments&lt;/code&gt;&lt;/a&gt; instance can be created with the &lt;a href=&quot;../macro.format_args&quot;&gt;&lt;code&gt;format_args!&lt;/code&gt;&lt;/a&gt; macro.</source>
          <target state="translated">该&lt;a href=&quot;struct.arguments&quot;&gt; &lt;code&gt;Arguments&lt;/code&gt; &lt;/a&gt;例如可以与创建&lt;a href=&quot;../macro.format_args&quot;&gt; &lt;code&gt;format_args!&lt;/code&gt; &lt;/a&gt;宏。</target>
        </trans-unit>
        <trans-unit id="fa75ef55ee98f7d19f2ace1042e87faf9ee8ae65" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.bufwriter&quot;&gt;&lt;code&gt;BufWriter&lt;/code&gt;&lt;/a&gt; struct wraps a writer and buffers its output. But it only does this batched write when it goes out of scope, or when the internal buffer is full. Sometimes, you'd prefer to write each line as it's completed, rather than the entire buffer at once. Enter &lt;code&gt;LineWriter&lt;/code&gt;. It does exactly that.</source>
          <target state="translated">该&lt;a href=&quot;struct.bufwriter&quot;&gt; &lt;code&gt;BufWriter&lt;/code&gt; &lt;/a&gt;结构封装了一个作家和缓冲输出。但是，只有在超出范围或内部缓冲区已满时，才执行此批量写入。有时，您宁愿在完成时写每一行，而不是一次写整个缓冲区。输入 &lt;code&gt;LineWriter&lt;/code&gt; 。它确实做到了。</target>
        </trans-unit>
        <trans-unit id="a07405d582facf4ae9638d6c46ccf83d378ca9a4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.builder#method.spawn&quot;&gt;&lt;code&gt;spawn&lt;/code&gt;&lt;/a&gt; method will take ownership of the builder and create an &lt;a href=&quot;../io/type.result&quot;&gt;&lt;code&gt;io::Result&lt;/code&gt;&lt;/a&gt; to the thread handle with the given configuration.</source>
          <target state="translated">该&lt;a href=&quot;struct.builder#method.spawn&quot;&gt; &lt;code&gt;spawn&lt;/code&gt; &lt;/a&gt;方法将采取建设者的所有权，并创建一个&lt;a href=&quot;../io/type.result&quot;&gt; &lt;code&gt;io::Result&lt;/code&gt; &lt;/a&gt;与给定的配置线程句柄。</target>
        </trans-unit>
        <trans-unit id="8461a34249fb23d4197f5b2441105518f99e167b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.command&quot;&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt; struct is used to configure and spawn processes:</source>
          <target state="translated">该&lt;a href=&quot;struct.command&quot;&gt; &lt;code&gt;Command&lt;/code&gt; &lt;/a&gt;结构是用于配置和产卵的过程：</target>
        </trans-unit>
        <trans-unit id="c0f682c8845fc1182cef69275c8073a32be2d0f3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.command#method.stdout&quot;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.command#method.stdin&quot;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;struct.command#method.stderr&quot;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; of a child process can be configured by passing an &lt;a href=&quot;struct.stdio&quot;&gt;&lt;code&gt;Stdio&lt;/code&gt;&lt;/a&gt; to the corresponding method on &lt;a href=&quot;struct.command&quot;&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt;. Once spawned, they can be accessed from the &lt;a href=&quot;struct.child&quot;&gt;&lt;code&gt;Child&lt;/code&gt;&lt;/a&gt;. For example, piping output from one command into another command can be done like so:</source>
          <target state="translated">可以通过将&lt;a href=&quot;struct.stdio&quot;&gt; &lt;code&gt;Stdio&lt;/code&gt; &lt;/a&gt;传递给&lt;a href=&quot;struct.command&quot;&gt; &lt;code&gt;Command&lt;/code&gt; &lt;/a&gt;上的相应方法来配置子进程的&lt;a href=&quot;struct.command#method.stdout&quot;&gt; &lt;code&gt;stdout&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;struct.command#method.stdin&quot;&gt; &lt;code&gt;stdin&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;struct.command#method.stderr&quot;&gt; &lt;code&gt;stderr&lt;/code&gt; &lt;/a&gt;。生成后，可以从&lt;a href=&quot;struct.child&quot;&gt; &lt;code&gt;Child&lt;/code&gt; 中&lt;/a&gt;访问它们。例如，可以将一个命令的输出管道输送到另一命令，如下所示：</target>
        </trans-unit>
        <trans-unit id="f9ad904c74c4288c252921bb9ae74bd23e865305" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.cstring#method.new&quot;&gt;&lt;code&gt;CString::new&lt;/code&gt;&lt;/a&gt; method will actually check that the provided &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; does not have 0 bytes in the middle, and return an error if it finds one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979c5c1602643a6a3cebe7ffbfac71410fb43889" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.joinhandle#method.join&quot;&gt;&lt;code&gt;join&lt;/code&gt;&lt;/a&gt; method returns a &lt;a href=&quot;type.result&quot;&gt;&lt;code&gt;thread::Result&lt;/code&gt;&lt;/a&gt; containing &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; of the final value produced by the child thread, or &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; of the value given to a call to &lt;a href=&quot;../macro.panic&quot;&gt;&lt;code&gt;panic!&lt;/code&gt;&lt;/a&gt; if the child panicked.</source>
          <target state="translated">该&lt;a href=&quot;struct.joinhandle#method.join&quot;&gt; &lt;code&gt;join&lt;/code&gt; &lt;/a&gt;方法返回一个&lt;a href=&quot;type.result&quot;&gt; &lt;code&gt;thread::Result&lt;/code&gt; &lt;/a&gt;含有&lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt;由子线程产生的最终价值，或&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;给一个调用的值来&lt;a href=&quot;../macro.panic&quot;&gt; &lt;code&gt;panic!&lt;/code&gt; &lt;/a&gt;如果孩子惊慌失措。</target>
        </trans-unit>
        <trans-unit id="d70df5ac1306fbf7451739c8b7b5cbb316412dcd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.localkey#method.with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; method yields a reference to the contained value which cannot be sent across threads or escape the given closure.</source>
          <target state="translated">在&lt;a href=&quot;struct.localkey#method.with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;方法产生于不能跨线程发送或逸出所述给定封闭件所包含的值的引用。</target>
        </trans-unit>
        <trans-unit id="4cdf73c1055626ea58f2e6c5956631d7c37626c9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.rc#method.downgrade&quot;&gt;&lt;code&gt;downgrade&lt;/code&gt;&lt;/a&gt; method can be used to create a non-owning &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer. A &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer can be &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/a&gt;d to an &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;, but this will return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if the value has already been dropped.</source>
          <target state="translated">的&lt;a href=&quot;struct.rc#method.downgrade&quot;&gt; &lt;code&gt;downgrade&lt;/code&gt; &lt;/a&gt;方法可用于产生非拥有&lt;a href=&quot;struct.weak&quot;&gt; &lt;code&gt;Weak&lt;/code&gt; &lt;/a&gt;指针。一个&lt;a href=&quot;struct.weak&quot;&gt; &lt;code&gt;Weak&lt;/code&gt; &lt;/a&gt;指针可以&lt;a href=&quot;struct.weak#method.upgrade&quot;&gt; &lt;code&gt;upgrade&lt;/code&gt; &lt;/a&gt; d到&lt;a href=&quot;struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;，但是这将返回&lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;如果该值已经下降。</target>
        </trans-unit>
        <trans-unit id="bcfdea4875bc006b185727ffa377cb6c800ff1eb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.rc#method.downgrade&quot;&gt;&lt;code&gt;downgrade&lt;/code&gt;&lt;/a&gt; method can be used to create a non-owning &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer. A &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer can be &lt;a href=&quot;struct.weak#method.upgrade&quot;&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/a&gt;d to an &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;, but this will return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if the value stored in the allocation has already been dropped. In other words, &lt;code&gt;Weak&lt;/code&gt; pointers do not keep the value inside the allocation alive; however, they &lt;em&gt;do&lt;/em&gt; keep the allocation (the backing store for the inner value) alive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673675ebe57e0604b8f52dd76cd89f3cf84af682" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.receiver#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt; operation can only fail if the sending half of a &lt;a href=&quot;fn.channel&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;fn.sync_channel&quot;&gt;&lt;code&gt;sync_channel&lt;/code&gt;&lt;/a&gt;) is disconnected, implying that no further messages will ever be received.</source>
          <target state="translated">所述&lt;a href=&quot;struct.receiver#method.recv&quot;&gt; &lt;code&gt;recv&lt;/code&gt; &lt;/a&gt;如果一个的发送一半操作只能失败&lt;a href=&quot;fn.channel&quot;&gt; &lt;code&gt;channel&lt;/code&gt; &lt;/a&gt;（或&lt;a href=&quot;fn.sync_channel&quot;&gt; &lt;code&gt;sync_channel&lt;/code&gt; &lt;/a&gt;）断开，这意味着没有进一步的消息将永远被接收。</target>
        </trans-unit>
        <trans-unit id="2096b737ddfebc05d46f568e296a81f0a3d0197e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.sender&quot;&gt;&lt;code&gt;Sender&lt;/code&gt;&lt;/a&gt; can be cloned to &lt;a href=&quot;struct.sender#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; to the same channel multiple times, but only one &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt; is supported.</source>
          <target state="translated">的&lt;a href=&quot;struct.sender&quot;&gt; &lt;code&gt;Sender&lt;/code&gt; &lt;/a&gt;可以被克隆到&lt;a href=&quot;struct.sender#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt;多次，以相同的信道，但只有一个&lt;a href=&quot;struct.receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; &lt;/a&gt;被支持。</target>
        </trans-unit>
        <trans-unit id="d38fd997ec90eab994427a1fbc1ca66e988ed96b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.syncsender&quot;&gt;&lt;code&gt;SyncSender&lt;/code&gt;&lt;/a&gt; can be cloned to &lt;a href=&quot;struct.syncsender#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; to the same channel multiple times, but only one &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt; is supported.</source>
          <target state="translated">的&lt;a href=&quot;struct.syncsender&quot;&gt; &lt;code&gt;SyncSender&lt;/code&gt; &lt;/a&gt;可以被克隆到&lt;a href=&quot;struct.syncsender#method.send&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt;多次，以相同的信道，但只有一个&lt;a href=&quot;struct.receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; &lt;/a&gt;被支持。</target>
        </trans-unit>
        <trans-unit id="7001293def1e95a9d6c40ad63bf180d03eb64fd9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.thread#method.unpark&quot;&gt;&lt;code&gt;unpark&lt;/code&gt;&lt;/a&gt; method on a &lt;a href=&quot;struct.thread&quot;&gt;&lt;code&gt;Thread&lt;/code&gt;&lt;/a&gt; atomically makes the token available if it wasn't already. Because the token is initially absent, &lt;a href=&quot;struct.thread#method.unpark&quot;&gt;&lt;code&gt;unpark&lt;/code&gt;&lt;/a&gt; followed by &lt;a href=&quot;fn.park&quot;&gt;&lt;code&gt;park&lt;/code&gt;&lt;/a&gt; will result in the second call returning immediately.</source>
          <target state="translated">&lt;a href=&quot;struct.thread&quot;&gt; &lt;code&gt;Thread&lt;/code&gt; &lt;/a&gt;上的&lt;a href=&quot;struct.thread#method.unpark&quot;&gt; &lt;code&gt;unpark&lt;/code&gt; &lt;/a&gt;方法原子地使令牌可用（如果尚未存在）。由于令牌最初不存在，因此先&lt;a href=&quot;struct.thread#method.unpark&quot;&gt; &lt;code&gt;unpark&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;fn.park&quot;&gt; &lt;code&gt;park&lt;/code&gt; &lt;/a&gt;然后再进行驻留将导致第二个呼叫立即返回。</target>
        </trans-unit>
        <trans-unit id="3b63b1ad0bef3b06d878599f3be015ecfe5404bc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.unixdatagram#method.connect&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt; method will connect the socket to a peer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1599d30320e03334b98613759c0cb03ef5b8af44" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.unixdatagram#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; method may be used to send data to the specified address. &lt;a href=&quot;struct.unixdatagram#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.unixdatagram#method.recv_from&quot;&gt;&lt;code&gt;recv_from&lt;/code&gt;&lt;/a&gt; will only receive data from that address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a53484ac76a42814fdd6d0152dc58d8216dd587e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;struct.vec#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method can emulate &lt;code&gt;truncate&lt;/code&gt;, but causes the excess elements to be returned instead of dropped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6d0b5a4d7abf2551cbce00a21d08c3b9b0ea9b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;thread/index&quot;&gt;&lt;code&gt;thread&lt;/code&gt;&lt;/a&gt; module contains Rust's threading abstractions. &lt;a href=&quot;sync/index&quot;&gt;&lt;code&gt;sync&lt;/code&gt;&lt;/a&gt; contains further primitive shared memory types, including &lt;a href=&quot;sync/atomic/index&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;sync/mpsc/index&quot;&gt;&lt;code&gt;mpsc&lt;/code&gt;&lt;/a&gt;, which contains the channel types for message passing.</source>
          <target state="translated">该&lt;a href=&quot;thread/index&quot;&gt; &lt;code&gt;thread&lt;/code&gt; &lt;/a&gt;模块包含锈病的线程抽象。&lt;a href=&quot;sync/index&quot;&gt; &lt;code&gt;sync&lt;/code&gt; &lt;/a&gt;包含其他原始共享内存类型，包括&lt;a href=&quot;sync/atomic/index&quot;&gt; &lt;code&gt;atomic&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;sync/mpsc/index&quot;&gt; &lt;code&gt;mpsc&lt;/code&gt; &lt;/a&gt;，其中包含用于消息传递的通道类型。</target>
        </trans-unit>
        <trans-unit id="49a461a4d2bf3262db6f2402e2172259bf56947f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.asciiext&quot;&gt;&lt;code&gt;AsciiExt&lt;/code&gt;&lt;/a&gt; trait provides methods that allow for character operations that only act on the ASCII subset and leave non-ASCII characters alone.</source>
          <target state="translated">该&lt;a href=&quot;trait.asciiext&quot;&gt; &lt;code&gt;AsciiExt&lt;/code&gt; &lt;/a&gt;特征提供了允许字符操作只作用于ASCII子集，并独自离开非ASCII字符的方法。</target>
        </trans-unit>
        <trans-unit id="1a4c8cc0a085c3df1289a22cd8aaec879c0c1b9f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.doubleendediterator&quot;&gt;trait-level&lt;/a&gt; docs contain more details.</source>
          <target state="translated">该&lt;a href=&quot;trait.doubleendediterator&quot;&gt;特征级&lt;/a&gt;文档包含更多细节。</target>
        </trans-unit>
        <trans-unit id="a9baa3ad4d7314655f1af4e53b409fbc088f4b8e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.error#method.source&quot;&gt;&lt;code&gt;source&lt;/code&gt;&lt;/a&gt; method is generally used when errors cross &quot;abstraction boundaries&quot;. If one module must report an error that is caused by an error from a lower-level module, it can allow access to that error via the &lt;a href=&quot;trait.error#method.source&quot;&gt;&lt;code&gt;source&lt;/code&gt;&lt;/a&gt; method. This makes it possible for the high-level module to provide its own errors while also revealing some of the implementation for debugging via &lt;a href=&quot;trait.error#method.source&quot;&gt;&lt;code&gt;source&lt;/code&gt;&lt;/a&gt; chains.</source>
          <target state="translated">所述&lt;a href=&quot;trait.error#method.source&quot;&gt; &lt;code&gt;source&lt;/code&gt; &lt;/a&gt;当错误跨越&amp;ldquo;抽象边界&amp;rdquo;的方法，一般使用。如果一个模块必须报告由下级模块的错误引起的错误，则它可以允许通过&lt;a href=&quot;trait.error#method.source&quot;&gt; &lt;code&gt;source&lt;/code&gt; &lt;/a&gt;方法访问该错误。这使得高级模块可以提供自己的错误，同时还可以公开一些通过&lt;a href=&quot;trait.error#method.source&quot;&gt; &lt;code&gt;source&lt;/code&gt; &lt;/a&gt;链进行调试的实现。</target>
        </trans-unit>
        <trans-unit id="3fb97ac2277aef1f78113f1e75546370dbbdba9b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.exactsizeiterator#method.len&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/a&gt; method has a default implementation, so you usually shouldn't implement it. However, you may be able to provide a more performant implementation than the default, so overriding it in this case makes sense.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8960e05e681fd3c863585eb072cff67079ae758" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.fn&quot;&gt;&lt;code&gt;Fn&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;trait.fnmut&quot;&gt;&lt;code&gt;FnMut&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;trait.fnonce&quot;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/a&gt; traits are implemented by types that can be invoked like functions. Note that &lt;a href=&quot;trait.fn&quot;&gt;&lt;code&gt;Fn&lt;/code&gt;&lt;/a&gt; takes &lt;code&gt;&amp;amp;self&lt;/code&gt;, &lt;a href=&quot;trait.fnmut&quot;&gt;&lt;code&gt;FnMut&lt;/code&gt;&lt;/a&gt; takes &lt;code&gt;&amp;amp;mut self&lt;/code&gt; and &lt;a href=&quot;trait.fnonce&quot;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/a&gt; takes &lt;code&gt;self&lt;/code&gt;. These correspond to the three kinds of methods that can be invoked on an instance: call-by-reference, call-by-mutable-reference, and call-by-value. The most common use of these traits is to act as bounds to higher-level functions that take functions or closures as arguments.</source>
          <target state="translated">该&lt;a href=&quot;trait.fn&quot;&gt; &lt;code&gt;Fn&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;trait.fnmut&quot;&gt; &lt;code&gt;FnMut&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;trait.fnonce&quot;&gt; &lt;code&gt;FnOnce&lt;/code&gt; &lt;/a&gt;性状是由可调用类的函数类型实现的。注意，&lt;a href=&quot;trait.fn&quot;&gt; &lt;code&gt;Fn&lt;/code&gt; &lt;/a&gt;接受 &lt;code&gt;&amp;amp;self&lt;/code&gt; ，&lt;a href=&quot;trait.fnmut&quot;&gt; &lt;code&gt;FnMut&lt;/code&gt; &lt;/a&gt;接受 &lt;code&gt;&amp;amp;mut self&lt;/code&gt; ，&lt;a href=&quot;trait.fnonce&quot;&gt; &lt;code&gt;FnOnce&lt;/code&gt; &lt;/a&gt;接受 &lt;code&gt;self&lt;/code&gt; 。这些对应于可以在实例上调用的三种方法：按引用调用，按可变引用调用和按值调用。这些特征最常见的用法是充当以函数或闭包为参数的高级函数的边界。</target>
        </trans-unit>
        <trans-unit id="c33bacd306c2aa86080fee643cadd9fa3a5a922c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.iterator#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; adapter is very useful, but only when the closure argument produces values. If it produces an iterator instead, there's an extra layer of indirection. &lt;code&gt;flat_map()&lt;/code&gt; will remove this extra layer on its own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af84d72464a620d276e568d18222de12da4b2fde" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.iterator#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; iterator implements &lt;a href=&quot;trait.doubleendediterator&quot;&gt;&lt;code&gt;DoubleEndedIterator&lt;/code&gt;&lt;/a&gt;, meaning that you can also &lt;a href=&quot;trait.iterator#method.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; backwards:</source>
          <target state="translated">该&lt;a href=&quot;trait.iterator#method.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt;迭代器工具&lt;a href=&quot;trait.doubleendediterator&quot;&gt; &lt;code&gt;DoubleEndedIterator&lt;/code&gt; &lt;/a&gt;，这意味着你还可以&lt;a href=&quot;trait.iterator#method.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt;倒退：</target>
        </trans-unit>
        <trans-unit id="a0672d71e250ee0ec8fcc8dfa66640aade0f2d7e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.tryfrom&quot;&gt;&lt;code&gt;TryFrom&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.tryinto&quot;&gt;&lt;code&gt;TryInto&lt;/code&gt;&lt;/a&gt; traits behave like &lt;a href=&quot;trait.from&quot;&gt;&lt;code&gt;From&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.into&quot;&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt;, but should be implemented when the conversion can fail.</source>
          <target state="translated">该&lt;a href=&quot;trait.tryfrom&quot;&gt; &lt;code&gt;TryFrom&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;trait.tryinto&quot;&gt; &lt;code&gt;TryInto&lt;/code&gt; &lt;/a&gt;性状表现得像&lt;a href=&quot;trait.from&quot;&gt; &lt;code&gt;From&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;trait.into&quot;&gt; &lt;code&gt;Into&lt;/code&gt; &lt;/a&gt;，而应实现时，转换可能会失败。</target>
        </trans-unit>
        <trans-unit id="e376c9d77b7276078629a96e3397aaf50b87d100" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.write#tymethod.flush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; method is useful for adaptors and explicit buffers themselves for ensuring that all buffered data has been pushed out to the 'true sink'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaa424efe4823f7e6a6edaf5a49990756704380f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;trait.write#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; method will attempt to write some data into the object, returning how many bytes were successfully written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75436aa22cb5f73032a0aa74018fe133c992dee0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;type-layout#primitive-representations&quot;&gt;primitive representations&lt;/a&gt;</source>
          <target state="translated">在&lt;a href=&quot;type-layout#primitive-representations&quot;&gt;原始的陈述&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="76a754ff1ade7a85d17901c16d28f4fc1a0ec281" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;types/inferred&quot;&gt;inferred type&lt;/a&gt; which asks the compiler to determine the type.</source>
          <target state="translated">要求编译器确定类型的&lt;a href=&quot;types/inferred&quot;&gt;推断&lt;/a&gt;类型。</target>
        </trans-unit>
        <trans-unit id="bbc904b6676167d928a315d71b571002efe99186" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;types/never&quot;&gt;never&lt;/a&gt; type.</source>
          <target state="translated">该&lt;a href=&quot;types/never&quot;&gt;永不&lt;/a&gt;类型。</target>
        </trans-unit>
        <trans-unit id="2be3f45b2596938280efdad2e1e3c487cd3dd502" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the--operator-can-be-used-in-functions-that-return-result&quot;&gt;?&lt;/code&gt; Operator Can Be Used in Functions That Return &lt;code&gt;Result&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86dac89caf1fb6bb25d3f0271f01c85dae090eff" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the--operator-can-only-be-used-in-functions-that-return-result&quot;&gt;?&lt;/code&gt; Operator Can Only Be Used in Functions That Return &lt;code&gt;Result&lt;/code&gt;</source>
          <target state="translated">的 &lt;code id=&quot;the--operator-can-only-be-used-in-functions-that-return-result&quot;&gt;?&lt;/code&gt; 运算符只能用于返回 &lt;code&gt;Result&lt;/code&gt; 函数中</target>
        </trans-unit>
        <trans-unit id="bf416e54f0f3d3a2ee8340cdce3195c04f0662bc" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-_-placeholder&quot;&gt;_&lt;/code&gt; Placeholder</source>
          <target state="translated">该 &lt;code id=&quot;the-_-placeholder&quot;&gt;_&lt;/code&gt; 占位符</target>
        </trans-unit>
        <trans-unit id="7d36ad4c51a4dc937d643fbbbf54439f451168f2" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-args-function-and-invalid-unicode&quot;&gt;args&lt;/code&gt; Function and Invalid Unicode</source>
          <target state="translated">该 &lt;code id=&quot;the-args-function-and-invalid-unicode&quot;&gt;args&lt;/code&gt; 功能和无效的Unicode</target>
        </trans-unit>
        <trans-unit id="43afa187f9cf6582feca58fbbf7f12992daae6dc" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-automatically_derived-attribute&quot;&gt;automatically_derived&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae32b9d596051c5f8a6c5be151de5b2bd58f3f8" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-c-representation&quot;&gt;C&lt;/code&gt; Representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe7f8f8cbbf771865519c2bb3d21bb5f521d891" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-cfg-attribute&quot;&gt;cfg&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572d131266eef7422234c8cd8f4bf975d532a1c7" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-cfg-macro&quot;&gt;cfg&lt;/code&gt; macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff73ca7cbd9ceded9b08042dee3a7e44286d5879" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-cfg_attr-attribute&quot;&gt;cfg_attr&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab454a301e64c91054b75436344fb463ed4e31a" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-cold-attribute&quot;&gt;cold&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3918f7c748b8a6de02591e90a158be55e179161" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-crate_name-attribute&quot;&gt;crate_name&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56779e684809e370ff842b9fd00e8e8533305b15" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-deprecated-attribute&quot;&gt;deprecated&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d264c9c886b4e7e93efe14011caf84a4cb0f8edc" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-export_name-attribute&quot;&gt;export_name&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64953382ec25ebff3523c686f871b6cac0e50ffe" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-global_allocator-attribute&quot;&gt;global_allocator&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71beea8a8240cee1b864ee8a097da9cb395a0451" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-ignore-attribute&quot;&gt;ignore&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e444fdfbdbbdaea724f409a0908c1ddaf47280" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-inline-attribute&quot;&gt;inline&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f91b9733dfb285998974fd7a3ed63a6997485d" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-iterator-trait-and-the-next-method&quot;&gt;Iterator&lt;/code&gt; Trait and the &lt;code&gt;next&lt;/code&gt; Method</source>
          <target state="translated">该 &lt;code id=&quot;the-iterator-trait-and-the-next-method&quot;&gt;Iterator&lt;/code&gt; 特质和 &lt;code&gt;next&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="289229034807d95c3121d3bcf9cb7e25c1ac9ef2" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-link-attribute&quot;&gt;link&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf19b8ac8c37c88b76bf5924f5303e2d1b3cbfc" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-link_name-attribute&quot;&gt;link_name&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fca57741dda84795b52faabc81edaee2bb29077" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-link_section-attribute&quot;&gt;link_section&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8b70af9354cb75b7660a9b63a471bca4708883" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-macro_use-attribute&quot;&gt;macro_use&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="479b4a692bc6c43f38d4737f51dec06b4e143a16" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-match-control-flow-operator&quot;&gt;match&lt;/code&gt; Control Flow Operator</source>
          <target state="translated">在 &lt;code id=&quot;the-match-control-flow-operator&quot;&gt;match&lt;/code&gt; 的控制流程操作工</target>
        </trans-unit>
        <trans-unit id="3764cbd865c70d966aece7af300dfa7f637fe423" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-must_use-attribute&quot;&gt;must_use&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f1e16c1f0bc3e100253f9a6db177a6d4101ff1" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-no_builtins-attribute&quot;&gt;no_builtins&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc45c323650c2f34949e4b642c8e1bc1d4214794" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-no_link-attribute&quot;&gt;no_link&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12971ae998085805bad575f162d256452bcc1e0" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-no_main-attribute&quot;&gt;no_main&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f55be277b4754e64848202241f85fe626641b3d" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-no_mangle-attribute&quot;&gt;no_mangle&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b05901aeaab894c86cab85581e952e9c5d4125e" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-non_exhaustive-attribute&quot;&gt;non_exhaustive&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5417fc07a4925f25ebbeb5f618a1275243378ced" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-option-enum-and-its-advantages-over-null-values&quot;&gt;Option&lt;/code&gt; Enum and Its Advantages Over Null Values</source>
          <target state="translated">该 &lt;code id=&quot;the-option-enum-and-its-advantages-over-null-values&quot;&gt;Option&lt;/code&gt; 枚举和它所具有的优势空值</target>
        </trans-unit>
        <trans-unit id="456d9c623e0db72560e9d4ff7d18d6a3d51bb4a0" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-panic_handler-attribute&quot;&gt;panic_handler&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f2fa5a516f880089540c2827decd01d5a6e7d2" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-path-attribute&quot;&gt;path&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="272c0059788508ea23a5913dedfc781999a4329c" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-proc_macro-crate&quot;&gt;proc_macro&lt;/code&gt; crate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1850ba5995c1ec62eca62cf6b54da74c57b2f08" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-recursion_limit-attribute&quot;&gt;recursion_limit&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7debe8457b97e78697481f2ab2a13b2dce10763" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-should_panic-attribute&quot;&gt;should_panic&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93213a38ad3b67a68894b916ca83c68efaaa5823" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-string-type&quot;&gt;String&lt;/code&gt; Type</source>
          <target state="translated">该 &lt;code id=&quot;the-string-type&quot;&gt;String&lt;/code&gt; 类型</target>
        </trans-unit>
        <trans-unit id="1fa123d3091c3f529b13b66733146b6cc074b9ee" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-target_feature-attribute&quot;&gt;target_feature&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec1dda37a4f697fee6a707ed0b667ec2bc1a23e" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-test-attribute&quot;&gt;test&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf59ceebdbbaa090bce70ec65f673058503cd1c7" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-track_caller-attribute&quot;&gt;track_caller&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad072e3ed2e5bdacb782947af3c6085d2383d5f" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-transparent-representation&quot;&gt;transparent&lt;/code&gt; Representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222c253464f70dc2d46508fef9bded38b979180e" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-type_length_limit-attribute&quot;&gt;type_length_limit&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b350e27ebb9ddb5535abd7bc5f0b158500f6c7ea" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-used-attribute&quot;&gt;used&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b55666424bcbda4791627f5d3c1a25c9fd2797" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;the-windows_subsystem-attribute&quot;&gt;windows_subsystem&lt;/code&gt; attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="844971eb58988950f234035bf3b738d18df15983" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;!&lt;/code&gt; type, also called &quot;never&quot;.</source>
          <target state="translated">该 &lt;code&gt;!&lt;/code&gt; 类型，也称为&amp;ldquo;从不&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="1959101a4f878a742e6d622df58125da3c9ee8ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#![feature]&lt;/code&gt; attribute specified an unknown feature.</source>
          <target state="translated">该 &lt;code&gt;#![feature]&lt;/code&gt; 属性指定一个未知的功能。</target>
        </trans-unit>
        <trans-unit id="6772d2ae0b060a250746d33cd174746c466f1400" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[cfg(test)]&lt;/code&gt; annotation on the tests module tells Rust to compile and run the test code only when you run &lt;code&gt;cargo test&lt;/code&gt;, not when you run &lt;code&gt;cargo build&lt;/code&gt;. This saves compile time when you only want to build the library and saves space in the resulting compiled artifact because the tests are not included. You&amp;rsquo;ll see that because integration tests go in a different directory, they don&amp;rsquo;t need the &lt;code&gt;#[cfg(test)]&lt;/code&gt; annotation. However, because unit tests go in the same files as the code, you&amp;rsquo;ll use &lt;code&gt;#[cfg(test)]&lt;/code&gt; to specify that they shouldn&amp;rsquo;t be included in the compiled result.</source>
          <target state="translated">该 &lt;code&gt;#[cfg(test)]&lt;/code&gt; 的测试模块上的注解告诉锈编译只有当你运行运行测试代码 &lt;code&gt;cargo test&lt;/code&gt; ，而不是当您运行 &lt;code&gt;cargo build&lt;/code&gt; 。当您只想构建库时，这样可以节省编译时间，并且由于不包括测试，因此可以节省生成的编译工件中的空间。您会看到，因为集成测试位于另一个目录中，所以它们不需要 &lt;code&gt;#[cfg(test)]&lt;/code&gt; 批注。但是，由于单元测试与代码位于同一文件中，因此您将使用 &lt;code&gt;#[cfg(test)]&lt;/code&gt; 来指定不应将其包含在编译结果中。</target>
        </trans-unit>
        <trans-unit id="519f31417527ab16777c33990a8b19270d90ed97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[global_allocator]&lt;/code&gt; attribute</source>
          <target state="translated">的 &lt;code&gt;#[global_allocator]&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="e73c0e75e8ab048b307c0488b5dbff0af69bd767" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[global_allocator]&lt;/code&gt; can only be used once in a crate or its recursive dependencies.</source>
          <target state="translated">的 &lt;code&gt;#[global_allocator]&lt;/code&gt; 只能一次在一个箱子或它的递归依赖性使用。</target>
        </trans-unit>
        <trans-unit id="672159bbb94aa0ec135859c99523eca0ebc397f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[macro_export]&lt;/code&gt; annotation indicates that this macro should be made available whenever the crate in which the macro is defined is brought into scope. Without this annotation, the macro can&amp;rsquo;t be brought into scope.</source>
          <target state="translated">的 &lt;code&gt;#[macro_export]&lt;/code&gt; 注释指示该宏应该可每当在其中定义宏的板条箱被带入范围。没有此注释，宏将无法进入范围。</target>
        </trans-unit>
        <trans-unit id="859ec264725730980afa9483dd83d3f313613cc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[repr(C)]&lt;/code&gt; attribute can only be placed on structs and enums.</source>
          <target state="translated">的 &lt;code&gt;#[repr(C)]&lt;/code&gt; 属性只能被放置在结构和枚举。</target>
        </trans-unit>
        <trans-unit id="20ce08781d178cc7ecc1d0ee2405f13954a27792" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[repr(packed)]&lt;/code&gt; and &lt;code&gt;#[repr(simd)]&lt;/code&gt; attributes only work on structs.</source>
          <target state="translated">该 &lt;code&gt;#[repr(packed)]&lt;/code&gt; 和 &lt;code&gt;#[repr(simd)]&lt;/code&gt; 在结构属性唯一的工作。</target>
        </trans-unit>
        <trans-unit id="37e64d7cdeff0fe84feb89e7cacb8aa07bcc4dd2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[repr(u8)]&lt;/code&gt;, &lt;code&gt;#[repr(i16)]&lt;/code&gt;, etc attributes only work on enums.</source>
          <target state="translated">的 &lt;code&gt;#[repr(u8)]&lt;/code&gt; ， &lt;code&gt;#[repr(i16)]&lt;/code&gt; 等上枚举属性唯一的工作。</target>
        </trans-unit>
        <trans-unit id="c9b512964c382c5f5d5e0080e7203c876528ceb6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[rustc_on_unimplemented]&lt;/code&gt; attribute lets you specify a custom error message for when a particular trait isn't implemented on a type placed in a position that needs that trait. For example, when the following code is compiled:</source>
          <target state="translated">的 &lt;code&gt;#[rustc_on_unimplemented]&lt;/code&gt; 属性，可以指定用于当一个特定性状上不放置在一个位置，需要该性状的类型实现了自定义的错误消息。例如，当编译以下代码时：</target>
        </trans-unit>
        <trans-unit id="910d7829ddf09eb2fc4a2ff115280a7e351c19be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[simd]&lt;/code&gt; attribute can only be applied to non empty tuple structs, because it doesn't make sense to try to use SIMD operations when there are no values to operate on.</source>
          <target state="translated">该 &lt;code&gt;#[simd]&lt;/code&gt; 属性只能应用于非空的元组结构，因为它没有意义的尝试使用SIMD操作时，有没有值进行操作。</target>
        </trans-unit>
        <trans-unit id="20a3879322df478a4cc556128e471d1c66adae12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#[unwind]&lt;/code&gt; attribute should be used as follows:</source>
          <target state="translated">的 &lt;code&gt;#[unwind]&lt;/code&gt; 属性应该被使用如下：</target>
        </trans-unit>
        <trans-unit id="98359d44655df527d34cb1e33db3c37a01e294d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;&lt;/code&gt; (shared borrow) and &lt;code&gt;&amp;amp;mut&lt;/code&gt; (mutable borrow) operators are unary prefix operators. When applied to a &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;place expression&lt;/a&gt;, this expressions produces a reference (pointer) to the location that the value refers to. The memory location is also placed into a borrowed state for the duration of the reference. For a shared borrow (&lt;code&gt;&amp;amp;&lt;/code&gt;), this implies that the place may not be mutated, but it may be read or shared again. For a mutable borrow (&lt;code&gt;&amp;amp;mut&lt;/code&gt;), the place may not be accessed in any way until the borrow expires. &lt;code&gt;&amp;amp;mut&lt;/code&gt; evaluates its operand in a mutable place expression context. If the &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;&amp;amp;mut&lt;/code&gt; operators are applied to a &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;value expression&lt;/a&gt;, then a &lt;a href=&quot;../expressions#temporaries&quot;&gt;temporary value&lt;/a&gt; is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0afa92240bade4867a8d2b0fc7bc387cff228f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;&lt;/code&gt; (shared borrow) and &lt;code&gt;&amp;amp;mut&lt;/code&gt; (mutable borrow) operators are unary prefix operators. When applied to a &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;place expression&lt;/a&gt;, this expressions produces a reference (pointer) to the location that the value refers to. The memory location is also placed into a borrowed state for the duration of the reference. For a shared borrow (&lt;code&gt;&amp;amp;&lt;/code&gt;), this implies that the place may not be mutated, but it may be read or shared again. For a mutable borrow (&lt;code&gt;&amp;amp;mut&lt;/code&gt;), the place may not be accessed in any way until the borrow expires. &lt;code&gt;&amp;amp;mut&lt;/code&gt; evaluates its operand in a mutable place expression context. If the &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;&amp;amp;mut&lt;/code&gt; operators are applied to a &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;value expression&lt;/a&gt;, then a &lt;a href=&quot;../expressions#temporary-lifetimes&quot;&gt;temporary value&lt;/a&gt; is created.</source>
          <target state="translated">的 &lt;code&gt;&amp;amp;&lt;/code&gt; （共享借）和 &lt;code&gt;&amp;amp;mut&lt;/code&gt; （可变借）运算符是一元前缀运算符。当应用于&lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;位置表达式时&lt;/a&gt;，此表达式会生成对该值所引用位置的引用（指针）。在参考期间，存储位置也会置于借入状态。对于共享借用（ &lt;code&gt;&amp;amp;&lt;/code&gt; ），这意味着该位置可能不会发生突变，但可以再次读取或共享。对于可变借位（ &lt;code&gt;&amp;amp;mut&lt;/code&gt; ），在借位到期之前，无法以任何方式访问该位置。 &lt;code&gt;&amp;amp;mut&lt;/code&gt; 在可变的位置表达式上下文中评估其操作数。如果将 &lt;code&gt;&amp;amp;&lt;/code&gt; 或 &lt;code&gt;&amp;amp;mut&lt;/code&gt; 运算符应用于&lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;值表达式&lt;/a&gt;，然后创建一个&lt;a href=&quot;../expressions#temporary-lifetimes&quot;&gt;临时值&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="289f7ac6e65862e6021cefdfd8637885846add32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;&lt;/code&gt; indicates that this argument is a &lt;em&gt;reference&lt;/em&gt;, which gives you a way to let multiple parts of your code access one piece of data without needing to copy that data into memory multiple times. References are a complex feature, and one of Rust&amp;rsquo;s major advantages is how safe and easy it is to use references. You don&amp;rsquo;t need to know a lot of those details to finish this program. For now, all you need to know is that like variables, references are immutable by default. Hence, you need to write &lt;code&gt;&amp;amp;mut guess&lt;/code&gt; rather than &lt;code&gt;&amp;amp;guess&lt;/code&gt; to make it mutable. (Chapter 4 will explain references more thoroughly.)</source>
          <target state="translated">在 &lt;code&gt;&amp;amp;&lt;/code&gt; 表示，这种说法是一个&lt;em&gt;参考&lt;/em&gt;，它给你一个方法，让数据的代码访问一片多个部分，而无需将数据复制到内存中多次。引用是一个复杂的功能，Rust的主要优点之一是使用引用的安全性和简便性。您不需要了解很多这些细节即可完成此程序。现在，您只需要知道变量就像变量一样，默认情况下引用是不可变的。因此，您需要编写 &lt;code&gt;&amp;amp;mut guess&lt;/code&gt; 而不是 &lt;code&gt;&amp;amp;guess&lt;/code&gt; 使其可变。（第4章将更全面地解释参考资料。）</target>
        </trans-unit>
        <trans-unit id="0ba71ec6a87d61177d25877a820fc83d9405b11e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;s1&lt;/code&gt; syntax lets us create a reference that &lt;em&gt;refers&lt;/em&gt; to the value of &lt;code&gt;s1&lt;/code&gt; but does not own it. Because it does not own it, the value it points to will not be dropped when the reference goes out of scope.</source>
          <target state="translated">在 &lt;code&gt;&amp;amp;s1&lt;/code&gt; 的语法让我们创建一个基准&lt;em&gt;是指&lt;/em&gt;它的值 &lt;code&gt;s1&lt;/code&gt; 但不拥有它。因为它不拥有它，所以当引用超出范围时，它所指向的值将不会被删除。</target>
        </trans-unit>
        <trans-unit id="ac2092b7195c0e20492c6630d5e4fa162bb49bf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;str&lt;/code&gt; type guarantees that its contents are UTF-8, and so we can compare the length it would take if each code point was represented as a &lt;code&gt;char&lt;/code&gt; vs in the &lt;code&gt;&amp;amp;str&lt;/code&gt; itself:</source>
          <target state="translated">所述 &lt;code&gt;&amp;amp;str&lt;/code&gt; 型保证其内容是UTF-8，所以我们可以比较长，将采取如果每个码点被描绘成 &lt;code&gt;char&lt;/code&gt; 在VS &lt;code&gt;&amp;amp;str&lt;/code&gt; 的本身：</target>
        </trans-unit>
        <trans-unit id="9573f9c210e855e348b2b66cefde61b52fa3eea1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;str&lt;/code&gt; type is one of the two main string types, the other being &lt;code&gt;String&lt;/code&gt;. Unlike its &lt;code&gt;String&lt;/code&gt; counterpart, its contents are borrowed.</source>
          <target state="translated">所述 &lt;code&gt;&amp;amp;str&lt;/code&gt; 类型是两种主要串类型中的一种，另一种是 &lt;code&gt;String&lt;/code&gt; 。与 &lt;code&gt;String&lt;/code&gt; 对应项不同，它的内容是借来的。</target>
        </trans-unit>
        <trans-unit id="9dd45416e37868ecd085972d08ce3b564e5e5995" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;gt;&lt;/code&gt; syntax tells the shell to write the contents of standard output to &lt;em&gt;output.txt&lt;/em&gt; instead of the screen. We didn&amp;rsquo;t see the error message we were expecting printed to the screen, so that means it must have ended up in the file. This is what &lt;em&gt;output.txt&lt;/em&gt; contains:</source>
          <target state="translated">所述 &lt;code&gt;&amp;gt;&lt;/code&gt; 语法告诉shell到标准输出的内容写入到&lt;em&gt;output.txt的&lt;/em&gt;，而不是在屏幕上。我们没有在屏幕上看到我们期望的错误消息，因此这意味着该错误消息必须已存在于文件中。这是&lt;em&gt;output.txt&lt;/em&gt;包含的内容：</target>
        </trans-unit>
        <trans-unit id="b005addd17171fe396053ec0c62812c2c97cade4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; syntax is a feature of Rust we haven&amp;rsquo;t talked about yet. It&amp;rsquo;s a generic type parameter, and we&amp;rsquo;ll cover generics in more detail in Chapter 10. For now, all you need to know is that &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; means the &lt;code&gt;Some&lt;/code&gt; variant of the &lt;code&gt;Option&lt;/code&gt; enum can hold one piece of data of any type. Here are some examples of using &lt;code&gt;Option&lt;/code&gt; values to hold number types and string types:</source>
          <target state="translated">该 &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; 语法，我们还没有谈到尚锈的特点。这是一个泛型类型参数，我们将在第10章中更详细地介绍泛型。现在，您只需要知道 &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; 表示 &lt;code&gt;Option&lt;/code&gt; 枚举的 &lt;code&gt;Some&lt;/code&gt; 变体可以容纳任何类型的数据。以下是一些使用 &lt;code&gt;Option&lt;/code&gt; 值保存数字类型和字符串类型的示例：</target>
        </trans-unit>
        <trans-unit id="0e8f2a70b6f25c55e2febf941fcc1166aa49e75b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'static&lt;/code&gt; constraint means that the closure and its return value must have a lifetime of the whole program execution. The reason for this is that threads can &lt;code&gt;detach&lt;/code&gt; and outlive the lifetime they have been created in. Indeed if the thread, and by extension its return value, can outlive their caller, we need to make sure that they will be valid afterwards, and since we &lt;em&gt;can't&lt;/em&gt; know when it will return we need to have them valid as long as possible, that is until the end of the program, hence the &lt;code&gt;'static&lt;/code&gt; lifetime.</source>
          <target state="translated">在 &lt;code&gt;'static&lt;/code&gt; 约束手段，封闭和它的返回值必须在整个程序执行的寿命。这样做的原因是线程可以 &lt;code&gt;detach&lt;/code&gt; 并超过创建它们的生命周期。确实，如果线程及其扩展值可以超过调用者的寿命，那么我们需要确保它们之后才有效，并且我们&lt;em&gt;不&lt;/em&gt;知道何时返回，我们需要使它们尽可能长的有效，直到程序结束，因此才是 &lt;code&gt;'static&lt;/code&gt; 生命周期&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="d507c32a06112cec989a75204d96602b968865dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;()&lt;/code&gt; type has exactly one value &lt;code&gt;()&lt;/code&gt;, and is used when there is no other meaningful value that could be returned. &lt;code&gt;()&lt;/code&gt; is most commonly seen implicitly: functions without a &lt;code&gt;-&amp;gt; ...&lt;/code&gt; implicitly have return type &lt;code&gt;()&lt;/code&gt;, that is, these are equivalent:</source>
          <target state="translated">在 &lt;code&gt;()&lt;/code&gt; 类型具有一个值 &lt;code&gt;()&lt;/code&gt; ，并且当存在可能被返回任何其它有意义的值被使用。 &lt;code&gt;()&lt;/code&gt; 是最常见的隐式视图：不带 &lt;code&gt;-&amp;gt; ...&lt;/code&gt; 函数隐式具有返回类型 &lt;code&gt;()&lt;/code&gt; ，即，这些等效：</target>
        </trans-unit>
        <trans-unit id="e3861dba93432d9d5236ce5338f7751eb3d446a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;()&lt;/code&gt; type, also called &quot;unit&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7f39bcbd9c29a0b11698eda466dd66f20fff6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;()&lt;/code&gt; type, sometimes called &quot;unit&quot; or &quot;nil&quot;.</source>
          <target state="translated">在 &lt;code&gt;()&lt;/code&gt; 的类型，有时被称为&amp;ldquo;单元&amp;rdquo;或&amp;ldquo;无&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="918cd095e0c314aaf612bef93955c593d22df666" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(*m)&lt;/code&gt; dereferences the &lt;code&gt;MyBox&amp;lt;String&amp;gt;&lt;/code&gt; into a &lt;code&gt;String&lt;/code&gt;. Then the &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;[..]&lt;/code&gt; take a string slice of the &lt;code&gt;String&lt;/code&gt; that is equal to the whole string to match the signature of &lt;code&gt;hello&lt;/code&gt;. The code without deref coercions is harder to read, write, and understand with all of these symbols involved. Deref coercion allows Rust to handle these conversions for us automatically.</source>
          <target state="translated">的 &lt;code&gt;(*m)&lt;/code&gt; 取消引用 &lt;code&gt;MyBox&amp;lt;String&amp;gt;&lt;/code&gt; 成 &lt;code&gt;String&lt;/code&gt; 。然后 &lt;code&gt;&amp;amp;&lt;/code&gt; 和 &lt;code&gt;[..]&lt;/code&gt; 取 &lt;code&gt;String&lt;/code&gt; 的字符串切片，该字符串切片等于整个字符串，以匹配 &lt;code&gt;hello&lt;/code&gt; 的签名。带有反引用强制的代码更难以阅读，编写和理解，其中涉及所有这些符号。 Deref强制使Rust可以为我们自动处理这些转换。</target>
        </trans-unit>
        <trans-unit id="dceab58b2710b9293ff102afe19580771458da84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;/code&gt; (dereference) operator is also a unary prefix operator. When applied to a &lt;a href=&quot;../types/pointer&quot;&gt;pointer&lt;/a&gt; it denotes the pointed-to location. If the expression is of type &lt;code&gt;&amp;amp;mut T&lt;/code&gt; and &lt;code&gt;*mut T&lt;/code&gt;, and is either a local variable, a (nested) field of a local variable or is a mutable &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;place expression&lt;/a&gt;, then the resulting memory location can be assigned to. Dereferencing a raw pointer requires &lt;code&gt;unsafe&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;*&lt;/code&gt; （反引用）操作符也是一元前缀运算符。当应用于&lt;a href=&quot;../types/pointer&quot;&gt;指针时，&lt;/a&gt;它表示指向的位置。如果表达式的类型为 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; 和 &lt;code&gt;*mut T&lt;/code&gt; ，或者是局部变量，局部变量的（嵌套的）字段或者是可变的&lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;位置表达式&lt;/a&gt;，那么可以将结果存储位置分配给它。取消引用原始指针需要 &lt;code&gt;unsafe&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="96c2de9a14471a79061b864ae274566e62ce833a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;/code&gt; (dereference) operator is also a unary prefix operator. When applied to a &lt;a href=&quot;../types/pointer&quot;&gt;pointer&lt;/a&gt; it denotes the pointed-to location. If the expression is of type &lt;code&gt;&amp;amp;mut T&lt;/code&gt; or &lt;code&gt;*mut T&lt;/code&gt;, and is either a local variable, a (nested) field of a local variable or is a mutable &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;place expression&lt;/a&gt;, then the resulting memory location can be assigned to. Dereferencing a raw pointer requires &lt;code&gt;unsafe&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9081a0fc77deca2ae1677facd10e7e74970f88a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+&lt;/code&gt; syntax is also valid with trait bounds on generic types:</source>
          <target state="translated">本 &lt;code&gt;+&lt;/code&gt; 语法也与泛型类型的特征界限有效：</target>
        </trans-unit>
        <trans-unit id="afa4c918a009f5cfb91d99e9fea97354edfccd19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+&lt;/code&gt; type operator was used in an ambiguous context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf7d56124b7814800cfa939450d0c6d38a399da8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operators may be composed with the &lt;code&gt;=&lt;/code&gt; operator. The expression &lt;code&gt;place_exp OP= value&lt;/code&gt; is equivalent to &lt;code&gt;place_expr = place_expr OP val&lt;/code&gt;. For example, &lt;code&gt;x = x + 1&lt;/code&gt; may be written as &lt;code&gt;x += 1&lt;/code&gt;. Any such expression always has the &lt;a href=&quot;../types/tuple&quot;&gt;&lt;code&gt;unit&lt;/code&gt; type&lt;/a&gt;. These operators can all be overloaded using the trait with the same name as for the normal operation followed by 'Assign', for example, &lt;code&gt;std::ops::AddAssign&lt;/code&gt; is used to overload &lt;code&gt;+=&lt;/code&gt;. As with &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;place_expr&lt;/code&gt; must be a &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;place expression&lt;/a&gt;.</source>
          <target state="translated">的 &lt;code&gt;+&lt;/code&gt; ， &lt;code&gt;-&lt;/code&gt; ， &lt;code&gt;*&lt;/code&gt; ， &lt;code&gt;/&lt;/code&gt; ， &lt;code&gt;%&lt;/code&gt; ， &lt;code&gt;&amp;amp;&lt;/code&gt; ， &lt;code&gt;|&lt;/code&gt; ， &lt;code&gt;^&lt;/code&gt; ， &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 运算符可以由 &lt;code&gt;=&lt;/code&gt; 运算符组成。表达式 &lt;code&gt;place_exp OP= value&lt;/code&gt; 等效于 &lt;code&gt;place_expr = place_expr OP val&lt;/code&gt; 。例如， &lt;code&gt;x = x + 1&lt;/code&gt; 可以写成 &lt;code&gt;x += 1&lt;/code&gt; 。任何此类表达式始终具有&lt;a href=&quot;../types/tuple&quot;&gt; &lt;code&gt;unit&lt;/code&gt; 类型&lt;/a&gt;。这些操作符都可以使用具有与正常操作相同名称的特征来重载，例如后跟&amp;ldquo; Assign&amp;rdquo;， &lt;code&gt;std::ops::AddAssign&lt;/code&gt; 用于重载 &lt;code&gt;+=&lt;/code&gt; 。与 &lt;code&gt;=&lt;/code&gt; 一样， &lt;code&gt;place_expr&lt;/code&gt; 必须是一个&lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;位置表达式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a770a23638a823405304b5862ae9b043051acefe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-3&lt;/code&gt; is no longer there, because it was consumed in order to see if the iteration should stop, but wasn't placed back into the iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8565fcc01087bd00c830a709f76c89a8bec0ee11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;...&lt;/code&gt; syntax allows us to match to an inclusive range of values. In the following code, when a pattern matches any of the values within the range, that arm will execute:</source>
          <target state="translated">该 &lt;code&gt;...&lt;/code&gt; 语法允许我们以匹配值的包含范围。在以下代码中，当模式与范围内的任何值匹配时，该机械臂将执行：</target>
        </trans-unit>
        <trans-unit id="a4afeb6b704f2eeee4511dc907c8b58744889e53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;...&lt;/code&gt; syntax is kept for backwards compatibility.</source>
          <target state="translated">该 &lt;code&gt;...&lt;/code&gt; 语法是为了向后兼容性。</target>
        </trans-unit>
        <trans-unit id="e2e1f03ffc70a6a254885658fe3c94afc796ca12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..&lt;/code&gt; and &lt;code&gt;..=&lt;/code&gt; operators will construct an object of one of the &lt;code&gt;std::ops::Range&lt;/code&gt; (or &lt;code&gt;core::ops::Range&lt;/code&gt;) variants, according to the following table:</source>
          <target state="translated">所述 &lt;code&gt;..&lt;/code&gt; 和 &lt;code&gt;..=&lt;/code&gt; 运营商将构造中的一个的对象 &lt;code&gt;std::ops::Range&lt;/code&gt; （或 &lt;code&gt;core::ops::Range&lt;/code&gt; ）变体，根据下表：</target>
        </trans-unit>
        <trans-unit id="92e96dedbdbf92f3e2e6464ed4a171437558a608" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..&lt;/code&gt; syntax is a &lt;code&gt;RangeFull&lt;/code&gt;:</source>
          <target state="translated">该 &lt;code&gt;..&lt;/code&gt; 语法是 &lt;code&gt;RangeFull&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e498b96e1f982900a97ac68d2121f886fa57f814" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..=&lt;/code&gt; syntax allows us to match to an inclusive range of values. In the following code, when a pattern matches any of the values within the range, that arm will execute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc028c330bc0f9500e9f59b98e8ba94a546679b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..=end&lt;/code&gt; syntax is a &lt;code&gt;RangeToInclusive&lt;/code&gt;:</source>
          <target state="translated">所述 &lt;code&gt;..=end&lt;/code&gt; 语法是一个 &lt;code&gt;RangeToInclusive&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="06bff2e76574f65224a2d8263399ed02a85a5a5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..end&lt;/code&gt; syntax is a &lt;code&gt;RangeTo&lt;/code&gt;:</source>
          <target state="translated">该 &lt;code&gt;..end&lt;/code&gt; 语法是 &lt;code&gt;RangeTo&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e2942c55d614162c6590171ee52a6786d9039b19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;0 measured&lt;/code&gt; statistic is for benchmark tests that measure performance. Benchmark tests are, as of this writing, only available in nightly Rust. See &lt;a href=&quot;https://doc.rust-lang.org/unstable-book/library-features/test.html&quot;&gt;the documentation about benchmark tests&lt;/a&gt; to learn more.</source>
          <target state="translated">所 &lt;code&gt;0 measured&lt;/code&gt; 统计数据为0，用于衡量性能的基准测试。在撰写本文时，基准测试仅在每晚的Rust中提供。请参阅&lt;a href=&quot;https://doc.rust-lang.org/unstable-book/library-features/test.html&quot;&gt;有关基准测试的文档&lt;/a&gt;以了解更多信息。</target>
        </trans-unit>
        <trans-unit id="79584c510d0bdac6b79741ca275d743c77143fc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;3&lt;/code&gt; is no longer there, because it was consumed in order to see if the iteration should stop, but wasn't placed back into the iterator.</source>
          <target state="translated">在 &lt;code&gt;3&lt;/code&gt; 不再存在，因为它是为了消费，看看迭代应停止，但没有放回迭代器。</target>
        </trans-unit>
        <trans-unit id="e721998eb3ac8ff36164c3da054ad164e33f55c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;5&lt;/code&gt; in &lt;code&gt;five&lt;/code&gt; is the function&amp;rsquo;s return value, which is why the return type is &lt;code&gt;i32&lt;/code&gt;. Let&amp;rsquo;s examine this in more detail. There are two important bits: first, the line &lt;code&gt;let x = five();&lt;/code&gt; shows that we&amp;rsquo;re using the return value of a function to initialize a variable. Because the function &lt;code&gt;five&lt;/code&gt; returns a &lt;code&gt;5&lt;/code&gt;, that line is the same as the following:</source>
          <target state="translated">该 &lt;code&gt;5&lt;/code&gt; 中 &lt;code&gt;five&lt;/code&gt; 是函数的返回值，这就是为什么返回类型为 &lt;code&gt;i32&lt;/code&gt; 。让我们更详细地研究一下。有两个重要的位：首先，该行 &lt;code&gt;let x = five();&lt;/code&gt; 表明我们正在使用函数的返回值来初始化变量。由于函数 &lt;code&gt;five&lt;/code&gt; 返回 &lt;code&gt;5&lt;/code&gt; ，因此该行与以下内容相同：</target>
        </trans-unit>
        <trans-unit id="f64d85c43f38ffb1d9f69e7f8ec2961df3c8d6da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;::&lt;/code&gt; syntax in the &lt;code&gt;::new&lt;/code&gt; line indicates that &lt;code&gt;new&lt;/code&gt; is an &lt;em&gt;associated function&lt;/em&gt; of the &lt;code&gt;String&lt;/code&gt; type. An associated function is implemented on a type, in this case &lt;code&gt;String&lt;/code&gt;, rather than on a particular instance of a &lt;code&gt;String&lt;/code&gt;. Some languages call this a &lt;em&gt;static method&lt;/em&gt;.</source>
          <target state="translated">的 &lt;code&gt;::&lt;/code&gt; 语法在 &lt;code&gt;::new&lt;/code&gt; 行指示 &lt;code&gt;new&lt;/code&gt; 是一个&lt;em&gt;相关联的功能&lt;/em&gt;的的 &lt;code&gt;String&lt;/code&gt; 类型。相关联的功能的类型来实现，在这种情况下 &lt;code&gt;String&lt;/code&gt; ，而不是在一个特定实例 &lt;code&gt;String&lt;/code&gt; 。一些语言将其称为&lt;em&gt;静态方法&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="6c666ec2c7e67dbab00bbae26838dd52620a7c41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;::&lt;/code&gt; token is required before the opening &lt;code&gt;&amp;lt;&lt;/code&gt; for generic arguments to avoid ambiguity with the less-than operator. This is colloquially known as &quot;turbofish&quot; syntax.</source>
          <target state="translated">的 &lt;code&gt;::&lt;/code&gt; 令牌开口之前所需 &lt;code&gt;&amp;lt;&lt;/code&gt; 仿制参数以避免歧义与小于运算符。俗称&amp;ldquo; turbofish&amp;rdquo;语法。</target>
        </trans-unit>
        <trans-unit id="973f4c6b5b84dfca6c5a6d4e2198053b9adfe1f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?&lt;/code&gt; operator can be used in functions that have a return type of &lt;code&gt;Result&lt;/code&gt;, because it is defined to work in the same way as the &lt;code&gt;match&lt;/code&gt; expression we defined in Listing 9-6. The part of the &lt;code&gt;match&lt;/code&gt; that requires a return type of &lt;code&gt;Result&lt;/code&gt; is &lt;code&gt;return Err(e)&lt;/code&gt;, so the return type of the function can be a &lt;code&gt;Result&lt;/code&gt; to be compatible with this &lt;code&gt;return&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5e33293a6c0d4593bfbf22cfb9c472dd444a9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?&lt;/code&gt; operator can be used in functions that have a return type of &lt;code&gt;Result&lt;/code&gt;, because it is defined to work in the same way as the &lt;code&gt;match&lt;/code&gt; expression we defined in Listing 9-6. The part of the &lt;code&gt;match&lt;/code&gt; that requires a return type of &lt;code&gt;Result&lt;/code&gt; is &lt;code&gt;return Err(e)&lt;/code&gt;, so the return type of the function has to be a &lt;code&gt;Result&lt;/code&gt; to be compatible with this &lt;code&gt;return&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec4c0c2491bd5a54898bf44aa756701f4e9b5fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?&lt;/code&gt; operator can only be used in functions that have a return type of &lt;code&gt;Result&lt;/code&gt;, because it is defined to work in the same way as the &lt;code&gt;match&lt;/code&gt; expression we defined in Listing 9-6. The part of the &lt;code&gt;match&lt;/code&gt; that requires a return type of &lt;code&gt;Result&lt;/code&gt; is &lt;code&gt;return Err(e)&lt;/code&gt;, so the return type of the function must be a &lt;code&gt;Result&lt;/code&gt; to be compatible with this &lt;code&gt;return&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;?&lt;/code&gt; 运算符只能在返回类型为 &lt;code&gt;Result&lt;/code&gt; 的函数中使用，因为它的定义与清单9-6中定义的 &lt;code&gt;match&lt;/code&gt; 表达式的工作方式相同。所述的部分 &lt;code&gt;match&lt;/code&gt; ，需要返回类型 &lt;code&gt;Result&lt;/code&gt; 是 &lt;code&gt;return Err(e)&lt;/code&gt; ，因此，函数的返回类型必须是 &lt;code&gt;Result&lt;/code&gt; 为与此兼容 &lt;code&gt;return&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bd74ffef5a8c90c3fd4d6d76e29ea8086760c062" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?&lt;/code&gt; operator eliminates a lot of boilerplate and makes this function&amp;rsquo;s implementation simpler. We could even shorten this code further by chaining method calls immediately after the &lt;code&gt;?&lt;/code&gt;, as shown in Listing 9-8.</source>
          <target state="translated">的 &lt;code&gt;?&lt;/code&gt; 操作员省去了很多样板，并使此功能的实现更简单。我们甚至可以通过在 &lt;code&gt;?&lt;/code&gt; 之后立即链接方法调用来进一步缩短此代码。，如清单9-8所示。</target>
        </trans-unit>
        <trans-unit id="69d45072228b4f483bc2426682521ed37346faf8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?&lt;/code&gt; operator was added to replace &lt;code&gt;try!&lt;/code&gt; and should be used instead. Furthermore, &lt;code&gt;try&lt;/code&gt; is a reserved word in Rust 2018, so if you must use it, you will need to use the &lt;a href=&quot;https://doc.rust-lang.org/nightly/rust-by-example/compatibility/raw_identifiers.html&quot;&gt;raw-identifier syntax&lt;/a&gt;: &lt;code&gt;r#try&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;?&lt;/code&gt; 运算符被添加到替换 &lt;code&gt;try!&lt;/code&gt; 并且应改为使用。此外， &lt;code&gt;try&lt;/code&gt; 是Rust 2018中的保留字，因此如果必须使用它，则需要使用&lt;a href=&quot;https://doc.rust-lang.org/nightly/rust-by-example/compatibility/raw_identifiers.html&quot;&gt;raw-identifier语法&lt;/a&gt;： &lt;code&gt;r#try&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c02b9d3c4349fb0a9b0da69a54ee8f956959e334" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?&lt;/code&gt; placed after a &lt;code&gt;Result&lt;/code&gt; value is defined to work in almost the same way as the &lt;code&gt;match&lt;/code&gt; expressions we defined to handle the &lt;code&gt;Result&lt;/code&gt; values in Listing 9-6. If the value of the &lt;code&gt;Result&lt;/code&gt; is an &lt;code&gt;Ok&lt;/code&gt;, the value inside the &lt;code&gt;Ok&lt;/code&gt; will get returned from this expression, and the program will continue. If the value is an &lt;code&gt;Err&lt;/code&gt;, the &lt;code&gt;Err&lt;/code&gt; will be returned from the whole function as if we had used the &lt;code&gt;return&lt;/code&gt; keyword so the error value gets propagated to the calling code.</source>
          <target state="translated">的 &lt;code&gt;?&lt;/code&gt; 在定义 &lt;code&gt;Result&lt;/code&gt; 值之后放置的代码，其工作方式 &lt;code&gt;match&lt;/code&gt; 我们定义为处理清单9-6中的 &lt;code&gt;Result&lt;/code&gt; 值的匹配表达式几乎相同。如果值 &lt;code&gt;Result&lt;/code&gt; 是 &lt;code&gt;Ok&lt;/code&gt; ，内部值 &lt;code&gt;Ok&lt;/code&gt; 将得到该表达式返回，并计划将继续进行。如果该值是一个 &lt;code&gt;Err&lt;/code&gt; ，该 &lt;code&gt;Err&lt;/code&gt; 会从整体功能，如果我们使用了返回 &lt;code&gt;return&lt;/code&gt; 关键字所以错误值被传播到调用代码。</target>
        </trans-unit>
        <trans-unit id="1dcf74da2de6e2e77e988e297d47588fe8eb0ad5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Alloc&lt;/code&gt; trait is an &lt;code&gt;unsafe&lt;/code&gt; trait for a number of reasons, and implementors must ensure that they adhere to these contracts:</source>
          <target state="translated">由于多种原因， &lt;code&gt;Alloc&lt;/code&gt; 特质是 &lt;code&gt;unsafe&lt;/code&gt; 特质，实施者必须确保遵守以下合同：</target>
        </trans-unit>
        <trans-unit id="98e48446e54082f0c926a4f9b0d797094660f773" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AllocErr&lt;/code&gt; error indicates an allocation failure that may be due to resource exhaustion or to something wrong when combining the given input arguments with this allocator.</source>
          <target state="translated">该 &lt;code&gt;AllocErr&lt;/code&gt; 错误表示分配失败给定的输入参数与这个分配器结合时，可能是由于资源枯竭，或者有些不妥。</target>
        </trans-unit>
        <trans-unit id="40c7890578f6b7272b5ec64894b3d7a1fbafa432" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AllocError&lt;/code&gt; error indicates an allocation failure that may be due to resource exhaustion or to something wrong when combining the given input arguments with this allocator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6575ce6e474af9bb9592c2b7505db384dcb3435" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Backtrace::capture&lt;/code&gt; function may not actually capture a backtrace by default. Its behavior is governed by two environment variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15f84d510941143cdca2ea70c5b85337d8cfce7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Binary&lt;/code&gt; trait should format its output as a number in binary.</source>
          <target state="translated">该 &lt;code&gt;Binary&lt;/code&gt; 特质应在其输出格式为二进制的数字。</target>
        </trans-unit>
        <trans-unit id="379b6b1f35d3ee950871663ac9c0d0834cb49cc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Box&amp;lt;...&amp;gt;&lt;/code&gt; ensures that the result is of known size, and the pin is required to keep it in the same place in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e3077926ddb39580746ea9c9fb509f4ede0db3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; type is a smart pointer because it implements the &lt;code&gt;Deref&lt;/code&gt; trait, which allows &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; values to be treated like references. When a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; value goes out of scope, the heap data that the box is pointing to is cleaned up as well because of the &lt;code&gt;Drop&lt;/code&gt; trait implementation. Let&amp;rsquo;s explore these two traits in more detail. These two traits will be even more important to the functionality provided by the other smart pointer types we&amp;rsquo;ll discuss in the rest of this chapter.</source>
          <target state="translated">的 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 类型是一个智能指针因为它实现了 &lt;code&gt;Deref&lt;/code&gt; 性状，这允许 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 值以相同的附图标记进行处理。当 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 值超出范围时，由于 &lt;code&gt;Drop&lt;/code&gt; trait实现的原因，该Box指向的堆数据也会被清除。让我们更详细地探讨这两个特征。对于我们将在本章其余部分讨论的其他智能指针类型提供的功能，这两个特征将更加重要。</target>
        </trans-unit>
        <trans-unit id="66f94ad31e24eabd73aee0f8f7b4d3256d1ad7c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; type is ultimately defined as a tuple struct with one element, so Listing 15-8 defines a &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; type in the same way. We&amp;rsquo;ll also define a &lt;code&gt;new&lt;/code&gt; function to match the &lt;code&gt;new&lt;/code&gt; function defined on &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 型最终定义为具有一个元素的元组结构，因此清单15-8限定 &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; 以相同的方式类型。我们也将定义一个 &lt;code&gt;new&lt;/code&gt; 功能，以符合 &lt;code&gt;new&lt;/code&gt; 定义的功能 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf6505b6927d963f13c67732403dd5931ac1ed9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; type is called a &lt;em&gt;trait object&lt;/em&gt;, which we&amp;rsquo;ll talk about in the &lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;&amp;ldquo;Using Trait Objects that Allow for Values of Different Types&amp;rdquo;&lt;/a&gt; section in Chapter 17. For now, you can read &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; to mean &amp;ldquo;any kind of error.&amp;rdquo; Using &lt;code&gt;?&lt;/code&gt; in a &lt;code&gt;main&lt;/code&gt; function with this return type is allowed.</source>
          <target state="translated">该 &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; 类型称为&lt;em&gt;特征的对象&lt;/em&gt;，我们将在讨论&lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;&amp;ldquo;是允许不同类型的值使用特质对象&amp;rdquo;&lt;/a&gt;在第17章一节，现在，你可以阅读 &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; 到表示&amp;ldquo;任何类型的错误&amp;rdquo;。使用 &lt;code&gt;?&lt;/code&gt; 在具有此返回类型的 &lt;code&gt;main&lt;/code&gt; 函数中是允许的。</target>
        </trans-unit>
        <trans-unit id="f421012dfbbefb54564368d8001a12741e0df3e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; type is called a trait object, which we&amp;rsquo;ll talk about in the &lt;a href=&quot;ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;&amp;ldquo;Using Trait Objects that Allow for Values of Different Types&amp;rdquo;&lt;/a&gt; section in Chapter 17. For now, you can read &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; to mean &amp;ldquo;any kind of error.&amp;rdquo; Using &lt;code&gt;?&lt;/code&gt; in a &lt;code&gt;main&lt;/code&gt; function with this return type is allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da298387c32437955972d3bd8b7791a6a295347" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BufReader&amp;lt;R&amp;gt;&lt;/code&gt; struct adds buffering to any reader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1691172593fd486c5eabaf315f65ace8dbf6dcde" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BufReader&lt;/code&gt; struct adds buffering to any reader.</source>
          <target state="translated">该 &lt;code&gt;BufReader&lt;/code&gt; 结构增加了缓冲以任何读者。</target>
        </trans-unit>
        <trans-unit id="258a1854757eccfe175a683df1ba477ca28eb2bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;C&lt;/code&gt; Representation</source>
          <target state="translated">该 &lt;code&gt;C&lt;/code&gt; 表示</target>
        </trans-unit>
        <trans-unit id="13bde6b705c6f0c548e0105a8252725ac6ce4d78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;C&lt;/code&gt; representation for items has a defined layout. With this layout, the size of items is also stable as long as all fields have a stable size.</source>
          <target state="translated">项目的 &lt;code&gt;C&lt;/code&gt; 表示形式具有已定义的布局。使用此布局，只要所有字段的大小都稳定，则项目的大小也将保持稳定。</target>
        </trans-unit>
        <trans-unit id="51da5ab6258546c0e07e79893a79989cd376412d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;C&lt;/code&gt; representation is designed for dual purposes. One purpose is for creating types that are interoperable with the C Language. The second purpose is to create types that you can soundly perform operations on that rely on data layout such as reinterpreting values as a different type.</source>
          <target state="translated">该 &lt;code&gt;C&lt;/code&gt; 表示是专门为双重目的。目的之一是创建可与C语言互操作的类型。第二个目的是创建可以依靠数据布局可靠地执行操作的类型，例如将值重新解释为其他类型。</target>
        </trans-unit>
        <trans-unit id="d3b29c11032bb6739237ad8f95e6e66861078b0e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Cacher::new&lt;/code&gt; function takes a generic parameter &lt;code&gt;T&lt;/code&gt;, which we&amp;rsquo;ve defined as having the same trait bound as the &lt;code&gt;Cacher&lt;/code&gt; struct. Then &lt;code&gt;Cacher::new&lt;/code&gt; returns a &lt;code&gt;Cacher&lt;/code&gt; instance that holds the closure specified in the &lt;code&gt;calculation&lt;/code&gt; field and a &lt;code&gt;None&lt;/code&gt; value in the &lt;code&gt;value&lt;/code&gt; field, because we haven&amp;rsquo;t executed the closure yet.</source>
          <target state="translated">该 &lt;code&gt;Cacher::new&lt;/code&gt; 功能需要一个泛型参数 &lt;code&gt;T&lt;/code&gt; ，我们已经定义为具有约束为同一性状 &lt;code&gt;Cacher&lt;/code&gt; 结构。然后 &lt;code&gt;Cacher::new&lt;/code&gt; 回报 &lt;code&gt;Cacher&lt;/code&gt; 保存在指定的封闭实例 &lt;code&gt;calculation&lt;/code&gt; 领域和 &lt;code&gt;None&lt;/code&gt; 在值 &lt;code&gt;value&lt;/code&gt; 字段，因为我们还没有执行关闭呢。</target>
        </trans-unit>
        <trans-unit id="b4813a8ce2e935eef24c8392e81d63c3906c4494" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Cacher&lt;/code&gt; struct has a &lt;code&gt;calculation&lt;/code&gt; field of the generic type &lt;code&gt;T&lt;/code&gt;. The trait bounds on &lt;code&gt;T&lt;/code&gt; specify that it&amp;rsquo;s a closure by using the &lt;code&gt;Fn&lt;/code&gt; trait. Any closure we want to store in the &lt;code&gt;calculation&lt;/code&gt; field must have one &lt;code&gt;u32&lt;/code&gt; parameter (specified within the parentheses after &lt;code&gt;Fn&lt;/code&gt;) and must return a &lt;code&gt;u32&lt;/code&gt; (specified after the &lt;code&gt;-&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">该 &lt;code&gt;Cacher&lt;/code&gt; 结构有一个 &lt;code&gt;calculation&lt;/code&gt; 所述类型的字段 &lt;code&gt;T&lt;/code&gt; 。 &lt;code&gt;T&lt;/code&gt; 上的特征边界通过使用 &lt;code&gt;Fn&lt;/code&gt; 特征来指定它是闭包。我们要存储在 &lt;code&gt;calculation&lt;/code&gt; 字段中的任何闭包都必须具有一个 &lt;code&gt;u32&lt;/code&gt; 参数（在 &lt;code&gt;Fn&lt;/code&gt; 之后的括号内指定），并且必须返回 &lt;code&gt;u32&lt;/code&gt; （在 &lt;code&gt;-&amp;gt;&lt;/code&gt; 之后指定）。</target>
        </trans-unit>
        <trans-unit id="b2611487755ed0f487d8741cbb5ae43a528fa050" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CannotReallocInPlace&lt;/code&gt; error is used when &lt;code&gt;grow_in_place&lt;/code&gt; or &lt;code&gt;shrink_in_place&lt;/code&gt; were unable to reuse the given memory block for a requested layout.</source>
          <target state="translated">所述 &lt;code&gt;CannotReallocInPlace&lt;/code&gt; 当使用误差 &lt;code&gt;grow_in_place&lt;/code&gt; 或 &lt;code&gt;shrink_in_place&lt;/code&gt; 无法重新使用给定的存储块对于所请求的布局。</target>
        </trans-unit>
        <trans-unit id="66ff318ae517f73cd3f13be64857852133418c2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Clone&lt;/code&gt; trait allows you to explicitly create a deep copy of a value, and the duplication process might involve running arbitrary code and copying heap data. See the &lt;a href=&quot;ch04-01-what-is-ownership#ways-variables-and-data-interact-clone&quot;&gt;&amp;ldquo;Ways Variables and Data Interact: Clone&amp;rdquo;&lt;/a&gt; section in Chapter 4 for more information on &lt;code&gt;Clone&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;Clone&lt;/code&gt; 特性允许你明确地创建一个值的深层副本，并在复制过程可能涉及运行任意代码，并可复制堆数据。请参阅&lt;a href=&quot;ch04-01-what-is-ownership#ways-variables-and-data-interact-clone&quot;&gt;&amp;ldquo;方式变量和数据交互：克隆&amp;rdquo;&lt;/a&gt;一节中第4章的详细信息 &lt;code&gt;Clone&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ad03569cf96b66590827b19ede2029d2fc0e960d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Clone&lt;/code&gt; trait for types that cannot be 'implicitly copied'.</source>
          <target state="translated">无法&amp;ldquo;隐式复制&amp;rdquo;的类型的&amp;ldquo; &lt;code&gt;Clone&lt;/code&gt; 特征。</target>
        </trans-unit>
        <trans-unit id="18eff9d7482bec9f52eb9a085d95c11254b36933" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CoerceUnsized&lt;/code&gt; trait takes a struct type. Make sure the type you are providing to &lt;code&gt;CoerceUnsized&lt;/code&gt; is a struct with only the last field containing an unsized type.</source>
          <target state="translated">该 &lt;code&gt;CoerceUnsized&lt;/code&gt; 特质需要一个结构类型。确保您要提供给 &lt;code&gt;CoerceUnsized&lt;/code&gt; 的类型是一个结构，只有最后一个字段包含未定尺寸的类型。</target>
        </trans-unit>
        <trans-unit id="e548ae9701e88686017ab152887ae716380c763e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Config::new&lt;/code&gt; function definition</source>
          <target state="translated">在 &lt;code&gt;Config::new&lt;/code&gt; 功能定义</target>
        </trans-unit>
        <trans-unit id="501a0b9d21e10f396777e5d2959bafbe25f146ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Cons&lt;/code&gt; variant will need the size of an &lt;code&gt;i32&lt;/code&gt; plus the space to store the box&amp;rsquo;s pointer data. The &lt;code&gt;Nil&lt;/code&gt; variant stores no values, so it needs less space than the &lt;code&gt;Cons&lt;/code&gt; variant. We now know that any &lt;code&gt;List&lt;/code&gt; value will take up the size of an &lt;code&gt;i32&lt;/code&gt; plus the size of a box&amp;rsquo;s pointer data. By using a box, we&amp;rsquo;ve broken the infinite, recursive chain, so the compiler can figure out the size it needs to store a &lt;code&gt;List&lt;/code&gt; value. Figure 15-2 shows what the &lt;code&gt;Cons&lt;/code&gt; variant looks like now.</source>
          <target state="translated">该 &lt;code&gt;Cons&lt;/code&gt; 变体将需要一个规模 &lt;code&gt;i32&lt;/code&gt; 加上空间来存储箱的指针数据。在 &lt;code&gt;Nil&lt;/code&gt; 变形店的值，因此它需要比更小的空间 &lt;code&gt;Cons&lt;/code&gt; 变种。现在我们知道，任何 &lt;code&gt;List&lt;/code&gt; 值都将占用 &lt;code&gt;i32&lt;/code&gt; 的大小加上框的指针数据的大小。通过使用一个框，我们打破了无限的递归链，因此编译器可以确定存储 &lt;code&gt;List&lt;/code&gt; 值所需的大小。图15-2显示了 &lt;code&gt;Cons&lt;/code&gt; 变型现在的样子。</target>
        </trans-unit>
        <trans-unit id="a626d0216123ae4ac45161a1bdf7e2c4de5ee23a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Cons&lt;/code&gt; variants own the data they hold, so when we create the &lt;code&gt;b&lt;/code&gt; list, &lt;code&gt;a&lt;/code&gt; is moved into &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; owns &lt;code&gt;a&lt;/code&gt;. Then, when we try to use &lt;code&gt;a&lt;/code&gt; again when creating &lt;code&gt;c&lt;/code&gt;, we&amp;rsquo;re not allowed to because &lt;code&gt;a&lt;/code&gt; has been moved.</source>
          <target state="translated">该 &lt;code&gt;Cons&lt;/code&gt; 变型拥有其所持有的数据，所以当我们创建 &lt;code&gt;b&lt;/code&gt; 名单， &lt;code&gt;a&lt;/code&gt; 被移动到 &lt;code&gt;b&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 拥有 &lt;code&gt;a&lt;/code&gt; 。然后，当我们在创建 &lt;code&gt;c&lt;/code&gt; 时尝试再次使用 &lt;code&gt;a&lt;/code&gt; 时，由于 &lt;code&gt;a&lt;/code&gt; 已被移动，因此我们不允许这样做。</target>
        </trans-unit>
        <trans-unit id="0ddcf60586798598b647a102cf947282e0f109f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Context&lt;/code&gt; of an asynchronous task.</source>
          <target state="translated">异步任务的 &lt;code&gt;Context&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d2f260e119bb2a2221aaead7149c78bb8d75b87a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Copy&lt;/code&gt; trait allows you to duplicate a value by only copying bits stored on the stack; no arbitrary code is necessary. See the &lt;a href=&quot;ch04-01-what-is-ownership#stack-only-data-copy&quot;&gt;&amp;ldquo;Stack-Only Data: Copy&amp;rdquo;&lt;/a&gt; section in Chapter 4 for more information on &lt;code&gt;Copy&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;Copy&lt;/code&gt; 特性，您可以通过仅复制存储在堆栈上的比特重复的值; 无需任何代码。请参阅&lt;a href=&quot;ch04-01-what-is-ownership#stack-only-data-copy&quot;&gt;&amp;ldquo;堆栈的只读数据：复制&amp;rdquo;&lt;/a&gt;第4章一节的详细信息 &lt;code&gt;Copy&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6af89e2c9cf5d947b4b736850c9a97076811fab2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Copy&lt;/code&gt; trait doesn&amp;rsquo;t define any methods to prevent programmers from overloading those methods and violating the assumption that no arbitrary code is being run. That way, all programmers can assume that copying a value will be very fast.</source>
          <target state="translated">该 &lt;code&gt;Copy&lt;/code&gt; 特性并没有定义任何方法来阻止程序员重载这些方法，违反假定不任意代码正在运行。这样，所有程序员都可以假定复制值将非常快。</target>
        </trans-unit>
        <trans-unit id="d9a9d9ddc02bc50daec8b0c1f2146daf65e918a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Copy&lt;/code&gt; trait is implemented by default only on primitive types. If your type only contains primitive types, you'll be able to implement &lt;code&gt;Copy&lt;/code&gt; on it. Otherwise, it won't be possible.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
