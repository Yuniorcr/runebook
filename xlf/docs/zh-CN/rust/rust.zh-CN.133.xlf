<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="3018ad27db79c39f8145afd228804aab3254e82a" translate="yes" xml:space="preserve">
          <source>For a type like &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, both possibilites (structural pinning or not) make sense. A &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; with structural pinning could have &lt;code&gt;get_pin&lt;/code&gt;/&lt;code&gt;get_pin_mut&lt;/code&gt; methods to get pinned references to elements. However, it could &lt;em&gt;not&lt;/em&gt; allow calling &lt;code&gt;pop&lt;/code&gt; on a pinned &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; because that would move the (structurally pinned) contents! Nor could it allow &lt;code&gt;push&lt;/code&gt;, which might reallocate and thus also move the contents. A &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; without structural pinning could &lt;code&gt;impl&amp;lt;T&amp;gt; Unpin for Vec&amp;lt;T&amp;gt;&lt;/code&gt;, because the contents are never pinned and the &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; itself is fine with being moved as well. At that point pinning just has no effect on the vector at all.</source>
          <target state="translated">对于&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;这样的类型，这两种可能性（无论是否为结构固定）都是有意义的。甲 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 具有结构的钉扎可具有 &lt;code&gt;get_pin&lt;/code&gt; / &lt;code&gt;get_pin_mut&lt;/code&gt; 方法来获取到元件固定的引用。但是，它可能&lt;em&gt;不会&lt;/em&gt;允许调用 &lt;code&gt;pop&lt;/code&gt; 一个销固 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; ，因为这将移动（结构固定）内容！它也不允许 &lt;code&gt;push&lt;/code&gt; ，因为push可能会重新分配，因此也会移动内容。甲 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 没有结构钉扎所能 &lt;code&gt;impl&amp;lt;T&amp;gt; Unpin for Vec&amp;lt;T&amp;gt;&lt;/code&gt; ，因为内容从未被钉扎和 &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; 本身也可以移动。那时，固定对向量完全没有影响。</target>
        </trans-unit>
        <trans-unit id="8f35186e1bcfe1224be1716d0530b7876d335108" translate="yes" xml:space="preserve">
          <source>For a type like &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, both possibilities (structural pinning or not) make sense. A &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; with structural pinning could have &lt;code&gt;get_pin&lt;/code&gt;/&lt;code&gt;get_pin_mut&lt;/code&gt; methods to get pinned references to elements. However, it could &lt;em&gt;not&lt;/em&gt; allow calling &lt;a href=&quot;../vec/struct.vec#method.pop&quot;&gt;&lt;code&gt;pop&lt;/code&gt;&lt;/a&gt; on a pinned &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; because that would move the (structurally pinned) contents! Nor could it allow &lt;a href=&quot;../vec/struct.vec#method.push&quot;&gt;&lt;code&gt;push&lt;/code&gt;&lt;/a&gt;, which might reallocate and thus also move the contents.</source>
          <target state="translated">对于&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;这样的类型，这两种可能性（是否进行结构固定）都是有意义的。甲&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;具有结构的钉扎可具有 &lt;code&gt;get_pin&lt;/code&gt; / &lt;code&gt;get_pin_mut&lt;/code&gt; 方法来获取到元件固定的引用。但是，它可能&lt;em&gt;不会&lt;/em&gt;允许调用&lt;a href=&quot;../vec/struct.vec#method.pop&quot;&gt; &lt;code&gt;pop&lt;/code&gt; &lt;/a&gt;一个销固&lt;a href=&quot;../vec/struct.vec&quot;&gt; &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;/a&gt;，因为这将移动（结构固定）内容！它也不允许&lt;a href=&quot;../vec/struct.vec#method.push&quot;&gt; &lt;code&gt;push&lt;/code&gt; &lt;/a&gt;，因为push可能会重新分配，因此也会移动内容。</target>
        </trans-unit>
        <trans-unit id="67d296f2a80f5db17e16b446a5a9cfb39f9637e3" translate="yes" xml:space="preserve">
          <source>For active Rust users, a new edition brings together incremental changes into an easy-to-understand package.</source>
          <target state="translated">对于活跃的Rust用户来说,新版本将增量变化汇集成一个易于理解的包。</target>
        </trans-unit>
        <trans-unit id="73ca74581814e147e2e3595a2c92e5345d58125c" translate="yes" xml:space="preserve">
          <source>For additional practice, add an &lt;code&gt;add-two&lt;/code&gt; crate to this workspace in a similar way as the &lt;code&gt;add-one&lt;/code&gt; crate!</source>
          <target state="translated">要进行其他练习，请以与 &lt;code&gt;add-one&lt;/code&gt; 箱子相似的方式向该工作区添加一个 &lt;code&gt;add-two&lt;/code&gt; 箱子！</target>
        </trans-unit>
        <trans-unit id="d6837630c0df8773ee6d141d026932e22f322a94" translate="yes" xml:space="preserve">
          <source>For all other enumerations, the layout is unspecified.</source>
          <target state="translated">对于所有其他的枚举,布局是不指定的。</target>
        </trans-unit>
        <trans-unit id="f839518ecde1e4d473a1e1391c3cecd147a2688f" translate="yes" xml:space="preserve">
          <source>For all types, the &lt;code&gt;replace&lt;/code&gt; method replaces the current interior value and returns the replaced value and the &lt;code&gt;into_inner&lt;/code&gt; method consumes the &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; and returns the interior value. Additionally, the &lt;code&gt;set&lt;/code&gt; method replaces the interior value, dropping the replaced value.</source>
          <target state="translated">对于所有类型， &lt;code&gt;replace&lt;/code&gt; 方法将替换当前内部值并返回替换后的值， &lt;code&gt;into_inner&lt;/code&gt; 方法将使用 &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; 并返回内部值。此外， &lt;code&gt;set&lt;/code&gt; 方法替换内部值，删除替换后的值。</target>
        </trans-unit>
        <trans-unit id="4a74f1f69aa81d61ed79104423a7e929d2a5e90f" translate="yes" xml:space="preserve">
          <source>For an unsafe version of this function which ignores these checks, see &lt;a href=&quot;#method.from_u32_unchecked&quot;&gt;&lt;code&gt;from_u32_unchecked&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关忽略这些检查的此函数的不安全版本，请参见&lt;a href=&quot;#method.from_u32_unchecked&quot;&gt; &lt;code&gt;from_u32_unchecked&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="476b6d833d40fa72a41a7850a15d62e625fad288" translate="yes" xml:space="preserve">
          <source>For an unsafe version of this function which ignores these checks, see &lt;a href=&quot;fn.from_u32_unchecked&quot;&gt;&lt;code&gt;from_u32_unchecked&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关忽略这些检查的此函数的不安全版本，请参见&lt;a href=&quot;fn.from_u32_unchecked&quot;&gt; &lt;code&gt;from_u32_unchecked&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="deac77531516e2593df857782566c5a6bc6ab633" translate="yes" xml:space="preserve">
          <source>For an unseparated complex NT in a matcher, &lt;code&gt;M = ... $(tt ...) OP ...&lt;/code&gt;, if OP = &lt;code&gt;\*&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt;, we must have FOLLOW(&lt;code&gt;tt ...&lt;/code&gt;) &amp;supe; FIRST(&lt;code&gt;tt ...&lt;/code&gt;).</source>
          <target state="translated">对于匹配器中不分隔的复杂NT， &lt;code&gt;M = ... $(tt ...) OP ...&lt;/code&gt; ，如果OP = &lt;code&gt;\*&lt;/code&gt; 或 &lt;code&gt;+&lt;/code&gt; ，则必须具有FOLLOW（ &lt;code&gt;tt ...&lt;/code&gt; ）&amp;supe;FIRST（ &lt;code&gt;tt ...&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="567c47b2126f9c8ec60a221bb903f23b7c59a470" translate="yes" xml:space="preserve">
          <source>For another enhancement, let&amp;rsquo;s add a test of the &lt;code&gt;add_one::add_one&lt;/code&gt; function within the &lt;code&gt;add_one&lt;/code&gt; crate:</source>
          <target state="translated">为了进一步增强功能，让我们在 &lt;code&gt;add_one&lt;/code&gt; 板条箱中添加对 &lt;code&gt;add_one::add_one&lt;/code&gt; 函数的测试：</target>
        </trans-unit>
        <trans-unit id="a452ba88131c8535dae1f914470890abc9e80f80" translate="yes" xml:space="preserve">
          <source>For another example of an error, suppose there's another trait defined in &lt;code&gt;foo&lt;/code&gt; named &lt;code&gt;ForeignTrait2&lt;/code&gt; that takes two type parameters. Then this &lt;code&gt;impl&lt;/code&gt; results in the same rule violation:</source>
          <target state="translated">对于另一个错误示例，假设在 &lt;code&gt;foo&lt;/code&gt; 中定义了另一个名为 &lt;code&gt;ForeignTrait2&lt;/code&gt; 的特征，该特征具有两个类型参数。那么这 &lt;code&gt;impl&lt;/code&gt; 产生相同的违反规则：</target>
        </trans-unit>
        <trans-unit id="b298ee6634f789f7504bbe56b35081e11b1776b3" translate="yes" xml:space="preserve">
          <source>For any &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;, where no overflow occurs:</source>
          <target state="translated">对于任何 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;n&lt;/code&gt; ，都不会发生溢出：</target>
        </trans-unit>
        <trans-unit id="6e967e04cf21f07d7428cc8f9d5d43b5223ad6b6" translate="yes" xml:space="preserve">
          <source>For any &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;:</source>
          <target state="translated">对于任何 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;n&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d7177439b1c102fad0f955acbe04d8571f3bc735" translate="yes" xml:space="preserve">
          <source>For any &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;n&lt;/code&gt;:</source>
          <target state="translated">对于任何 &lt;code&gt;a&lt;/code&gt; ， &lt;code&gt;b&lt;/code&gt; 和 &lt;code&gt;n&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0400fbd14de605a36ca6850ba610aa532b5ec511" translate="yes" xml:space="preserve">
          <source>For any &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, and &lt;code&gt;m&lt;/code&gt; where &lt;code&gt;n + m&lt;/code&gt; does not overflow:</source>
          <target state="translated">对于任何 &lt;code&gt;a&lt;/code&gt; ， &lt;code&gt;n&lt;/code&gt; 和 &lt;code&gt;m&lt;/code&gt; ，其中 &lt;code&gt;n + m&lt;/code&gt; 不溢出：</target>
        </trans-unit>
        <trans-unit id="d3a4733d0f33a5abdaf576d0946acf68336e9c47" translate="yes" xml:space="preserve">
          <source>For any &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, and &lt;code&gt;m&lt;/code&gt;, where no overflow occurs:</source>
          <target state="translated">对于任何 &lt;code&gt;a&lt;/code&gt; ， &lt;code&gt;n&lt;/code&gt; 和 &lt;code&gt;m&lt;/code&gt; ，其中不会发生溢出：</target>
        </trans-unit>
        <trans-unit id="b420862395f4311806121a428bcf8094fcd87366" translate="yes" xml:space="preserve">
          <source>For any &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, and &lt;code&gt;m&lt;/code&gt;:</source>
          <target state="translated">对于任何 &lt;code&gt;a&lt;/code&gt; ， &lt;code&gt;n&lt;/code&gt; 和 &lt;code&gt;m&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="283c28e21e5d022c297a84900d000ac8c19d139f" translate="yes" xml:space="preserve">
          <source>For any &lt;code&gt;a&lt;/code&gt;:</source>
          <target state="translated">对于任何 &lt;code&gt;a&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3b45cf56ca7c18d52ba90d4d864763045b8b7c39" translate="yes" xml:space="preserve">
          <source>For any lint check &lt;code&gt;C&lt;/code&gt;:</source>
          <target state="translated">对于任何棉绒，请检查 &lt;code&gt;C&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="056c0dacdd55194f54d5847447d6f623af23b2c3" translate="yes" xml:space="preserve">
          <source>For any separated complex NT in a matcher, &lt;code&gt;M = ... $(tt ...) SEP OP ...&lt;/code&gt;, we must have &lt;code&gt;SEP&lt;/code&gt; &amp;isin; FOLLOW(&lt;code&gt;tt ...&lt;/code&gt;).</source>
          <target state="translated">对于任何一个匹配分离复杂NT， &lt;code&gt;M = ... $(tt ...) SEP OP ...&lt;/code&gt; ，我们必须有 &lt;code&gt;SEP&lt;/code&gt; &amp;isin;FOLLOW（ &lt;code&gt;tt ...&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1d2f6725c963b627309938adf90568e934652249" translate="yes" xml:space="preserve">
          <source>For any two successive token tree sequences in a matcher &lt;code&gt;M&lt;/code&gt; (i.e. &lt;code&gt;M = ... tt uu ...&lt;/code&gt;) with &lt;code&gt;uu ...&lt;/code&gt; nonempty, we must have FOLLOW(&lt;code&gt;... tt&lt;/code&gt;) &amp;cup; {&amp;epsilon;} &amp;supe; FIRST(&lt;code&gt;uu ...&lt;/code&gt;).</source>
          <target state="translated">对于 &lt;code&gt;uu ...&lt;/code&gt; 非空的匹配器 &lt;code&gt;M&lt;/code&gt; 中的任何两个连续的令牌树序列（即 &lt;code&gt;M = ... tt uu ...&lt;/code&gt; ），我们必须具有FOLLOW（ &lt;code&gt;... tt&lt;/code&gt; ）&amp;cup;{&amp;epsilon;}&amp;supe;FIRST（ &lt;code&gt;uu ...&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6cdbdbd6c13dc2fb6d28991d433130904066520c" translate="yes" xml:space="preserve">
          <source>For associated functions, there would not be a &lt;code&gt;receiver&lt;/code&gt;: there would only be the list of other arguments. You could use fully qualified syntax everywhere that you call functions or methods. However, you&amp;rsquo;re allowed to omit any part of this syntax that Rust can figure out from other information in the program. You only need to use this more verbose syntax in cases where there are multiple implementations that use the same name and Rust needs help to identify which implementation you want to call.</source>
          <target state="translated">对于关联的函数，将没有 &lt;code&gt;receiver&lt;/code&gt; ：只会有其他参数的列表。您可以在调用函数或方法的任何地方使用完全限定的语法。但是，您可以省略Rust可以从程序中的其他信息中找出的该语法的任何部分。仅在有多个使用相同名称的实现且Rust需要帮助来标识要调用的实现的情况下，才需要使用这种更详细的语法。</target>
        </trans-unit>
        <trans-unit id="a482aec762a0ae7cc8035a9d32a39718410a1d01" translate="yes" xml:space="preserve">
          <source>For builtin pointer types, pointers to &lt;code&gt;T&lt;/code&gt; will coerce to pointers to &lt;code&gt;U&lt;/code&gt; if &lt;code&gt;T: Unsize&amp;lt;U&amp;gt;&lt;/code&gt; by converting from a thin pointer to a fat pointer.</source>
          <target state="translated">对于内置指针类型，如果 &lt;code&gt;T: Unsize&amp;lt;U&amp;gt;&lt;/code&gt; 通过从精简指针转换为胖指针，则指向 &lt;code&gt;T&lt;/code&gt; 的指针将强制转换为指向 &lt;code&gt;U&lt;/code&gt; 的指针。</target>
        </trans-unit>
        <trans-unit id="cd4e266e3c4d23a572f017e57b60117e05b20fc7" translate="yes" xml:space="preserve">
          <source>For cases when one does need thread-safe interior mutability, Rust provides &lt;a href=&quot;../sync/atomic/index&quot;&gt;atomic data types&lt;/a&gt;, as well as explicit locking via &lt;a href=&quot;../sync/struct.mutex&quot;&gt;&lt;code&gt;sync::Mutex&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../sync/struct.rwlock&quot;&gt;&lt;code&gt;sync::RwLock&lt;/code&gt;&lt;/a&gt;. These types ensure that any mutation cannot cause data races, hence the types are &lt;code&gt;Sync&lt;/code&gt;. Likewise, &lt;a href=&quot;../sync/struct.arc&quot;&gt;&lt;code&gt;sync::Arc&lt;/code&gt;&lt;/a&gt; provides a thread-safe analogue of &lt;a href=&quot;../rc/struct.rc&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">对于确实需要线程安全的内部可变性的情况，Rust提供了&lt;a href=&quot;../sync/atomic/index&quot;&gt;原子数据类型&lt;/a&gt;，并通过&lt;a href=&quot;../sync/struct.mutex&quot;&gt; &lt;code&gt;sync::Mutex&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../sync/struct.rwlock&quot;&gt; &lt;code&gt;sync::RwLock&lt;/code&gt; &lt;/a&gt;显式锁定。这些类型确保任何变异都不会导致数据争用，因此类型为 &lt;code&gt;Sync&lt;/code&gt; 。同样，&lt;a href=&quot;../sync/struct.arc&quot;&gt; &lt;code&gt;sync::Arc&lt;/code&gt; &lt;/a&gt;提供&lt;a href=&quot;../rc/struct.rc&quot;&gt; &lt;code&gt;Rc&lt;/code&gt; &lt;/a&gt;的线程安全模拟。</target>
        </trans-unit>
        <trans-unit id="862c6a0aebea1113158c46f1472b585a3d948023" translate="yes" xml:space="preserve">
          <source>For convenience and historical reasons, the tuple type with no elements (&lt;code&gt;()&lt;/code&gt;) is often called &lt;em&gt;unit&lt;/em&gt; or &lt;em&gt;the unit type&lt;/em&gt;. It's one value is also called &lt;em&gt;unit&lt;/em&gt; or &lt;em&gt;the unit value&lt;/em&gt;.</source>
          <target state="translated">出于方便和历史原因，没有元素（ &lt;code&gt;()&lt;/code&gt; ）的元组类型通常称为&lt;em&gt;unit&lt;/em&gt;或&lt;em&gt;unit type&lt;/em&gt;。它是一个值，也称为&lt;em&gt;unit&lt;/em&gt;或&lt;em&gt;unit value&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="95ce88c6063c5e04848b361d4df1470f061a981a" translate="yes" xml:space="preserve">
          <source>For convenience, running &lt;code&gt;cargo doc --open&lt;/code&gt; will build the HTML for your current crate&amp;rsquo;s documentation (as well as the documentation for all of your crate&amp;rsquo;s dependencies) and open the result in a web browser. Navigate to the &lt;code&gt;add_one&lt;/code&gt; function and you&amp;rsquo;ll see how the text in the documentation comments is rendered, as shown in Figure 14-1:</source>
          <target state="translated">为了方便起见，运行 &lt;code&gt;cargo doc --open&lt;/code&gt; 将为您当前的板条箱的文档（以及所有板条箱的依存关系的文档）构建HTML，并在Web浏览器中打开结果。导航到 &lt;code&gt;add_one&lt;/code&gt; 函数，您将看到文档注释中文本的呈现方式，如图14-1所示：</target>
        </trans-unit>
        <trans-unit id="066c1d6d346620b3bed514578530bbc0f4c88848" translate="yes" xml:space="preserve">
          <source>For converting to strings use the &lt;a href=&quot;macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; macro, and for converting from strings use the &lt;a href=&quot;str/trait.fromstr&quot;&gt;&lt;code&gt;FromStr&lt;/code&gt;&lt;/a&gt; trait.</source>
          <target state="translated">要转换为字符串，请使用&lt;a href=&quot;macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt;宏，并使用&lt;a href=&quot;str/trait.fromstr&quot;&gt; &lt;code&gt;FromStr&lt;/code&gt; &lt;/a&gt;特性从字符串转换。</target>
        </trans-unit>
        <trans-unit id="b495fc173ff830e38cba8fae0764e0cd7d19620b" translate="yes" xml:space="preserve">
          <source>For custom types, the coercion here works by coercing &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; to &lt;code&gt;Foo&amp;lt;U&amp;gt;&lt;/code&gt; provided an impl of &lt;code&gt;CoerceUnsized&amp;lt;Foo&amp;lt;U&amp;gt;&amp;gt; for Foo&amp;lt;T&amp;gt;&lt;/code&gt; exists. Such an impl can only be written if &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; has only a single non-phantomdata field involving &lt;code&gt;T&lt;/code&gt;. If the type of that field is &lt;code&gt;Bar&amp;lt;T&amp;gt;&lt;/code&gt;, an implementation of &lt;code&gt;CoerceUnsized&amp;lt;Bar&amp;lt;U&amp;gt;&amp;gt; for Bar&amp;lt;T&amp;gt;&lt;/code&gt; must exist. The coercion will work by coercing the &lt;code&gt;Bar&amp;lt;T&amp;gt;&lt;/code&gt; field into &lt;code&gt;Bar&amp;lt;U&amp;gt;&lt;/code&gt; and filling in the rest of the fields from &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; to create a &lt;code&gt;Foo&amp;lt;U&amp;gt;&lt;/code&gt;. This will effectively drill down to a pointer field and coerce that.</source>
          <target state="translated">对于自定义类型，此处的强制通过将 &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; 强制为 &lt;code&gt;Foo&amp;lt;U&amp;gt;&lt;/code&gt; 前提是存在 &lt;code&gt;CoerceUnsized&amp;lt;Foo&amp;lt;U&amp;gt;&amp;gt; for Foo&amp;lt;T&amp;gt;&lt;/code&gt; 的CoerceUnsized &amp;lt;Foo &amp;lt;U &amp;gt;&amp;gt;的隐式表示。仅当 &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; 仅具有单个涉及 &lt;code&gt;T&lt;/code&gt; 的非幻像数据字段时，才可以写这样的暗示。如果该字段的类型为 &lt;code&gt;Bar&amp;lt;T&amp;gt;&lt;/code&gt; ，则必须存在 &lt;code&gt;CoerceUnsized&amp;lt;Bar&amp;lt;U&amp;gt;&amp;gt; for Bar&amp;lt;T&amp;gt;&lt;/code&gt; 的CoerceUnsize &amp;lt;Bar &amp;lt;U &amp;gt;&amp;gt;实现。强制将通过将 &lt;code&gt;Bar&amp;lt;T&amp;gt;&lt;/code&gt; 字段强制为 &lt;code&gt;Bar&amp;lt;U&amp;gt;&lt;/code&gt; 并填充 &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; 的其余字段以创建 &lt;code&gt;Foo&amp;lt;U&amp;gt;&lt;/code&gt; 来起作用。这将有效地向下钻取指针字段并将其强制。</target>
        </trans-unit>
        <trans-unit id="60d481b314010be795197eaef3eeb1b40bbbd1e2" translate="yes" xml:space="preserve">
          <source>For default impls in traits, the private helper solution won't work, however closures or copying the parameters should still work.</source>
          <target state="translated">对于traits中的默认impls,私有助手的解决方案将无法工作,然而关闭或复制参数应该仍然有效。</target>
        </trans-unit>
        <trans-unit id="18fd7ffece3fe76bf6c6f04f78a662dc5e132236" translate="yes" xml:space="preserve">
          <source>For detailed semantics of this method, see the documentation on &lt;a href=&quot;trait.bufread#method.read_line&quot;&gt;&lt;code&gt;BufRead::read_line&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此方法的详细语义，请参见&lt;a href=&quot;trait.bufread#method.read_line&quot;&gt; &lt;code&gt;BufRead::read_line&lt;/code&gt; &lt;/a&gt;上的文档。</target>
        </trans-unit>
        <trans-unit id="4cf690f8462a72a3256098f14214a450a9f6aa92" translate="yes" xml:space="preserve">
          <source>For each field in declaration order in the struct, first determine the size and alignment of the field. If the current offset is not a multiple of the field's alignment, then add padding bytes to the current offset until it is a multiple of the field's alignment. The offset for the field is what the current offset is now. Then increase the current offset by the size of the field.</source>
          <target state="translated">对于结构中声明顺序的每个字段,首先确定字段的大小和对齐方式。如果当前偏移量不是字段对齐方式的倍数,则在当前偏移量上增加填充字节,直到它是字段对齐方式的倍数。字段的偏移量就是当前偏移量的数值。然后按字段的大小增加当前偏移量。</target>
        </trans-unit>
        <trans-unit id="72130935b2d001683aa85f003dc696305f2bc73d" translate="yes" xml:space="preserve">
          <source>For each field in the struct ordered by declaration order:</source>
          <target state="translated">对于结构中的每个字段,按声明顺序排列。</target>
        </trans-unit>
        <trans-unit id="0b3508d4624d79af6901523f5a605066ff78ea42" translate="yes" xml:space="preserve">
          <source>For each instance of &lt;code&gt;BuildHasher&lt;/code&gt;, the &lt;a href=&quot;trait.hasher&quot;&gt;&lt;code&gt;Hasher&lt;/code&gt;&lt;/a&gt;s created by &lt;a href=&quot;#tymethod.build_hasher&quot;&gt;&lt;code&gt;build_hasher&lt;/code&gt;&lt;/a&gt; should be identical. That is, if the same stream of bytes is fed into each hasher, the same output will also be generated.</source>
          <target state="translated">对于每个实例 &lt;code&gt;BuildHasher&lt;/code&gt; ，所述&lt;a href=&quot;trait.hasher&quot;&gt; &lt;code&gt;Hasher&lt;/code&gt; &lt;/a&gt;通过创建小号&lt;a href=&quot;#tymethod.build_hasher&quot;&gt; &lt;code&gt;build_hasher&lt;/code&gt; &lt;/a&gt;应该是相同的。也就是说，如果将相同的字节流馈送到每个哈希器中，则还将生成相同的输出。</target>
        </trans-unit>
        <trans-unit id="840895a2afaae6a7f348dca1ec8fcc81fdac329e" translate="yes" xml:space="preserve">
          <source>For each instance of &lt;code&gt;BuildHasher&lt;/code&gt;, the &lt;a href=&quot;trait.hasher&quot;&gt;&lt;code&gt;Hasher&lt;/code&gt;&lt;/a&gt;s created by &lt;a href=&quot;trait.buildhasher#tymethod.build_hasher&quot;&gt;&lt;code&gt;build_hasher&lt;/code&gt;&lt;/a&gt; should be identical. That is, if the same stream of bytes is fed into each hasher, the same output will also be generated.</source>
          <target state="translated">对于每个实例 &lt;code&gt;BuildHasher&lt;/code&gt; ，所述&lt;a href=&quot;trait.hasher&quot;&gt; &lt;code&gt;Hasher&lt;/code&gt; &lt;/a&gt;通过创建小号&lt;a href=&quot;trait.buildhasher#tymethod.build_hasher&quot;&gt; &lt;code&gt;build_hasher&lt;/code&gt; &lt;/a&gt;应该是相同的。也就是说，如果将相同的字节流馈送到每个散列器，则还将生成相同的输出。</target>
        </trans-unit>
        <trans-unit id="cc391d5855b94ebf31185098078b770ff17af670" translate="yes" xml:space="preserve">
          <source>For enum variants without any data, like &lt;code&gt;Message::Quit&lt;/code&gt;, we can&amp;rsquo;t destructure the value any further. We can only match on the literal &lt;code&gt;Message::Quit&lt;/code&gt; value, and no variables are in that pattern.</source>
          <target state="translated">对于没有任何数据的枚举变量，例如 &lt;code&gt;Message::Quit&lt;/code&gt; ，我们无法进一步解构该值。我们只能在文字 &lt;code&gt;Message::Quit&lt;/code&gt; 值上进行匹配，并且该模式中没有变量。</target>
        </trans-unit>
        <trans-unit id="2444658cffe28e2cc2f850d1658b58b1e1a36719" translate="yes" xml:space="preserve">
          <source>For enums with fields, it is also possible to combine &lt;code&gt;repr(C)&lt;/code&gt; and a primitive representation (e.g., &lt;code&gt;repr(C, u8)&lt;/code&gt;). This modifies the &lt;a href=&quot;#reprc-enums-with-fields&quot;&gt;&lt;code&gt;repr(C)&lt;/code&gt;&lt;/a&gt; by changing the representation of the discriminant enum to the chosen primitive instead. So, if you chose the &lt;code&gt;u8&lt;/code&gt; representation, then the discriminant enum would have a size and alignment of 1 byte.</source>
          <target state="translated">对于具有字段的枚举，也可以将 &lt;code&gt;repr(C)&lt;/code&gt; 和原始表示形式（例如 &lt;code&gt;repr(C, u8)&lt;/code&gt; ）组合在一起。这通过将判别枚举的表示形式更改为所选原语来修改&lt;a href=&quot;#reprc-enums-with-fields&quot;&gt; &lt;code&gt;repr(C)&lt;/code&gt; &lt;/a&gt;。因此，如果选择 &lt;code&gt;u8&lt;/code&gt; 表示形式，则判别式枚举的大小和对齐方式为1个字节。</target>
        </trans-unit>
        <trans-unit id="e01828e4ae2c2ba5ffc6317469f77820dbf8111b" translate="yes" xml:space="preserve">
          <source>For example when polling on a resource, it is common to check that it is available, and if not to yield in order to avoid busy waiting.</source>
          <target state="translated">例如在对资源进行轮询时,通常会检查该资源是否可用,如果不可用则让步,以避免忙于等待。</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="4cd230a3a552ee68ec4ba47f5a2564073dbae972" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;../fs/struct.file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; implements &lt;a href=&quot;trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt;, but not &lt;code&gt;BufRead&lt;/code&gt;. &lt;a href=&quot;struct.bufreader&quot;&gt;&lt;code&gt;BufReader&lt;/code&gt;&lt;/a&gt; to the rescue!</source>
          <target state="translated">例如，&lt;a href=&quot;../fs/struct.file&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;实现&lt;a href=&quot;trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt;，但不实现 &lt;code&gt;BufRead&lt;/code&gt; 。&lt;a href=&quot;struct.bufreader&quot;&gt; &lt;code&gt;BufReader&lt;/code&gt; &lt;/a&gt;进行救援！</target>
        </trans-unit>
        <trans-unit id="361121404b53f092e2a50ba865c6a4b2bee21aac" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;struct.bufreader&quot;&gt;&lt;code&gt;BufReader&lt;/code&gt;&lt;/a&gt; works with the &lt;a href=&quot;trait.bufread&quot;&gt;&lt;code&gt;BufRead&lt;/code&gt;&lt;/a&gt; trait to add extra methods to any reader:</source>
          <target state="translated">例如，&lt;a href=&quot;struct.bufreader&quot;&gt; &lt;code&gt;BufReader&lt;/code&gt; &lt;/a&gt;与&lt;a href=&quot;trait.bufread&quot;&gt; &lt;code&gt;BufRead&lt;/code&gt; &lt;/a&gt;特性一起使用，可向任何阅读器添加额外的方法：</target>
        </trans-unit>
        <trans-unit id="6b55b0abb99e67319bb61c01d86a93c08d513103" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;&amp;amp;mut 42&lt;/code&gt; is coerced to have type &lt;code&gt;&amp;amp;i8&lt;/code&gt; in the following:</source>
          <target state="translated">例如，在以下情况下， &lt;code&gt;&amp;amp;mut 42&lt;/code&gt; 被强制为 &lt;code&gt;&amp;amp;i8&lt;/code&gt; 类型：</target>
        </trans-unit>
        <trans-unit id="67eaa2d704432ad951e8c12a7692afce83f73e05" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/&lt;/code&gt; on Unix and  on Windows.</source>
          <target state="translated">例如，在Unix和Windows上为 &lt;code&gt;/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5bb29cde4c0e0fc335df372cebebbd7ecb1d0966" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/&lt;/code&gt; on Unix and &lt;code&gt;\&lt;/code&gt; on Windows.</source>
          <target state="translated">例如，在Unix上为 &lt;code&gt;/&lt;/code&gt; ，在Windows上为 &lt;code&gt;\&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fbee0db43e5b9a6c95b5e074429ae3b04c296c30" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;2 + (3 * 4)&lt;/code&gt; is an expression that returns the value 14.</source>
          <target state="translated">例如， &lt;code&gt;2 + (3 * 4)&lt;/code&gt; 是一个返回值14的表达式。</target>
        </trans-unit>
        <trans-unit id="ca7ec8e9d4ad8d1018c384f60f3aa9bf305dff15" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;42&lt;/code&gt; is coerced to have type &lt;code&gt;i8&lt;/code&gt; in the following:</source>
          <target state="translated">例如，以下代码将 &lt;code&gt;42&lt;/code&gt; 强制为类型 &lt;code&gt;i8&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5371c62b3b65397d993bded38544b14c041e769c" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;match&lt;/code&gt; is a keyword. If you try to compile the following function that uses &lt;code&gt;match&lt;/code&gt; as its name:</source>
          <target state="translated">例如， &lt;code&gt;match&lt;/code&gt; 是一个关键字。如果您尝试编译以下使用 &lt;code&gt;match&lt;/code&gt; 作为其名称的函数：</target>
        </trans-unit>
        <trans-unit id="5e5ca1f4b6c9ffec30148620048c12e2abed5a4e" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;x&lt;/code&gt; is coerced to have type &lt;code&gt;&amp;amp;dyn Display&lt;/code&gt; in the following:</source>
          <target state="translated">例如，在下面的示例中， &lt;code&gt;x&lt;/code&gt; 被强制具有 &lt;code&gt;&amp;amp;dyn Display&lt;/code&gt; 类型：</target>
        </trans-unit>
        <trans-unit id="fce0a6199428243d121ad738edca52d7c9b01aad" translate="yes" xml:space="preserve">
          <source>For example, Listing 17-10 shows what happens if we try to create a &lt;code&gt;Screen&lt;/code&gt; with a &lt;code&gt;String&lt;/code&gt; as a component:</source>
          <target state="translated">例如，清单17-10显示了如果我们尝试创建一个以 &lt;code&gt;String&lt;/code&gt; 作为组件的 &lt;code&gt;Screen&lt;/code&gt; 会发生什么：</target>
        </trans-unit>
        <trans-unit id="7ae1a94372a4d885d5d7e8da154bdfbd122ab503" translate="yes" xml:space="preserve">
          <source>For example, Listing 9-6 shows a function that reads a username from a file. If the file doesn&amp;rsquo;t exist or can&amp;rsquo;t be read, this function will return those errors to the code that called this function.</source>
          <target state="translated">例如，清单9-6显示了一个从文件中读取用户名的函数。如果文件不存在或无法读取，则此函数会将这些错误返回给调用此函数的代码。</target>
        </trans-unit>
        <trans-unit id="ef753a93b41984ab0e06400f8bb2fb5a5a2abf4c" translate="yes" xml:space="preserve">
          <source>For example, a function like:</source>
          <target state="translated">例如,像这样的函数。</target>
        </trans-unit>
        <trans-unit id="3f4165e8867ad36b5f552b0f32d954c181e56a0b" translate="yes" xml:space="preserve">
          <source>For example, a function that reads a file into a string will error with &lt;code&gt;InvalidData&lt;/code&gt; if the file's contents are not valid UTF-8.</source>
          <target state="translated">例如，如果文件的内容不是有效的UTF-8，则将文件读入字符串的函数将因 &lt;code&gt;InvalidData&lt;/code&gt; 而出错。</target>
        </trans-unit>
        <trans-unit id="8e2494ae56a52ee6df403aa3b61355ff286423ad" translate="yes" xml:space="preserve">
          <source>For example, a logging library could use the standard formatting syntax, but it would internally pass around this structure until it has been determined where output should go to.</source>
          <target state="translated">例如,一个日志库可以使用标准的格式化语法,但它会在内部传递这个结构,直到确定了输出应该去哪里。</target>
        </trans-unit>
        <trans-unit id="5e2c5e436747dc3d24355943f34ee57e52844d68" translate="yes" xml:space="preserve">
          <source>For example, a vector with capacity 10 and length 0 would be an empty vector with space for 10 more elements. Pushing 10 or fewer elements onto the vector will not change its capacity or cause reallocation to occur. However, if the vector's length is increased to 11, it will have to reallocate, which can be slow. For this reason, it is recommended to use &lt;a href=&quot;struct.vec#method.with_capacity&quot;&gt;&lt;code&gt;Vec::with_capacity&lt;/code&gt;&lt;/a&gt; whenever possible to specify how big the vector is expected to get.</source>
          <target state="translated">例如，容量为10且长度为0的向量将是一个空向量，具有10个以上元素的空间。将10个或更少的元素推入向量不会改变其容量或导致重新分配。但是，如果向量的长度增加到11，则必须重新分配，这可能很慢。因此，建议尽可能使用&lt;a href=&quot;struct.vec#method.with_capacity&quot;&gt; &lt;code&gt;Vec::with_capacity&lt;/code&gt; &lt;/a&gt;来指定期望矢量的大小。</target>
        </trans-unit>
        <trans-unit id="15c054116144a3608c09f73dba885ef5e0021d4e" translate="yes" xml:space="preserve">
          <source>For example, both &lt;code&gt;'a'&lt;/code&gt; and &lt;code&gt;&quot;aa&quot;&lt;/code&gt; are patterns that would match at index &lt;code&gt;1&lt;/code&gt; in the string &lt;code&gt;&quot;baaaab&quot;&lt;/code&gt;.</source>
          <target state="translated">例如， &lt;code&gt;'a'&lt;/code&gt; 和 &lt;code&gt;&quot;aa&quot;&lt;/code&gt; 都是与字符串 &lt;code&gt;&quot;baaaab&quot;&lt;/code&gt; 中的索引 &lt;code&gt;1&lt;/code&gt; 匹配的模式。</target>
        </trans-unit>
        <trans-unit id="bdda7fdae278a2fce4f5c887aa83a373c5a696fb" translate="yes" xml:space="preserve">
          <source>For example, calling &lt;code&gt;Pin::new_unchecked&lt;/code&gt; on an &lt;code&gt;&amp;amp;'a mut T&lt;/code&gt; is unsafe because while you are able to pin it for the given lifetime &lt;code&gt;'a&lt;/code&gt;, you have no control over whether it is kept pinned once &lt;code&gt;'a&lt;/code&gt; ends:</source>
          <target state="translated">例如，在 &lt;code&gt;&amp;amp;'a mut T&lt;/code&gt; 上调用 &lt;code&gt;Pin::new_unchecked&lt;/code&gt; 是不安全的，因为尽管您可以将其固定在给定的生命周期 &lt;code&gt;'a&lt;/code&gt; 内，但是您无法控制它是否在 &lt;code&gt;'a&lt;/code&gt; 结束时保持固定状态：</target>
        </trans-unit>
        <trans-unit id="bfbfcca5281911965a5b0e44815f304c140950c7" translate="yes" xml:space="preserve">
          <source>For example, consider the case of a simple web server, which can be simplified to:</source>
          <target state="translated">例如,考虑一个简单的Web服务器的情况,可以简化为:。</target>
        </trans-unit>
        <trans-unit id="77381e13d866eca11479a03b8f4821b0157f9d3e" translate="yes" xml:space="preserve">
          <source>For example, dataflow uses this to inject static assertions so that &lt;code&gt;rustc_peek(potentially_uninitialized)&lt;/code&gt; would actually double-check that dataflow did indeed compute that it is uninitialized at that point in the control flow.</source>
          <target state="translated">例如，数据流使用此方法注入静态断言，以便 &lt;code&gt;rustc_peek(potentially_uninitialized)&lt;/code&gt; 实际上会再次检查数据流确实确实在控制流中计算出该点尚未初始化。</target>
        </trans-unit>
        <trans-unit id="95fe2e68803fedf130f77f394bc5d434187ebbd8" translate="yes" xml:space="preserve">
          <source>For example, given a trait &lt;code&gt;Trait&lt;/code&gt;, the following are all trait objects:</source>
          <target state="translated">例如，给定一个特征 &lt;code&gt;Trait&lt;/code&gt; ，以下是所有特征对象：</target>
        </trans-unit>
        <trans-unit id="072c7bf2984ac36fc73c1e383853c5c169bc7a47" translate="yes" xml:space="preserve">
          <source>For example, if for some reason we wanted to take the values produced by an instance of &lt;code&gt;Counter&lt;/code&gt;, pair them with values produced by another &lt;code&gt;Counter&lt;/code&gt; instance after skipping the first value, multiply each pair together, keep only those results that are divisible by 3, and add all the resulting values together, we could do so, as shown in the test in Listing 13-23:</source>
          <target state="translated">例如，如果由于某种原因，我们希望采取由实例产生的值 &lt;code&gt;Counter&lt;/code&gt; ，与由另一产生的值它们配对 &lt;code&gt;Counter&lt;/code&gt; 跳过第一值之后例如，乘法每一对一起，只保留属于被3整除的那些结果，并将所有结果值加在一起，我们可以这样做，如清单13-23中的测试所示：</target>
        </trans-unit>
        <trans-unit id="d1649808c8d99c391bdbb77f15f15e2efe15c030" translate="yes" xml:space="preserve">
          <source>For example, if we want to add documentation that describes the purpose of the &lt;code&gt;my_crate&lt;/code&gt; crate that contains the &lt;code&gt;add_one&lt;/code&gt; function, we can add documentation comments that start with &lt;code&gt;//!&lt;/code&gt; to the beginning of the &lt;em&gt;src/lib.rs&lt;/em&gt; file, as shown in Listing 14-2:</source>
          <target state="translated">例如，如果我们要添加描述包含 &lt;code&gt;add_one&lt;/code&gt; 函数的 &lt;code&gt;my_crate&lt;/code&gt; 装箱目的的文档，则可以添加以 &lt;code&gt;//!&lt;/code&gt; 开头的文档注释！到&lt;em&gt;src / lib.rs&lt;/em&gt;文件的开头，如清单14-2所示：&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="018dcc20bfe547cf343634d4cd949c5d217b88cd" translate="yes" xml:space="preserve">
          <source>For example, if you want to make sure that a specific field is dropped after the others, make it the last field of a struct:</source>
          <target state="translated">例如,如果你想确保一个特定的字段在其他字段之后被删除,就把它作为一个结构的最后一个字段。</target>
        </trans-unit>
        <trans-unit id="ed038364c42a5f7e182a80d72dbd7c44cb810818" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to get a &lt;code&gt;Pin&lt;/code&gt; of a field of something, you could use this to get access to that field in one line of code. However, there are several gotchas with these &quot;pinning projections&quot;; see the &lt;a href=&quot;index#projections-and-structural-pinning&quot;&gt;&lt;code&gt;pin&lt;/code&gt; module&lt;/a&gt; documentation for further details on that topic.</source>
          <target state="translated">例如，如果您想获取某字段的 &lt;code&gt;Pin&lt;/code&gt; ，则可以使用它在一行代码中访问该字段。但是，这些&amp;ldquo;固定预测&amp;rdquo;有几个陷阱。有关该主题的更多详细信息，请参见&lt;a href=&quot;index#projections-and-structural-pinning&quot;&gt; &lt;code&gt;pin&lt;/code&gt; 模块&lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="571bf6c61d49ae11d24afcb576448263d3d5f7ca" translate="yes" xml:space="preserve">
          <source>For example, in Chapter 12 we mentioned that there&amp;rsquo;s a Rust implementation of the &lt;code&gt;grep&lt;/code&gt; tool called &lt;code&gt;ripgrep&lt;/code&gt; for searching files. If we want to install &lt;code&gt;ripgrep&lt;/code&gt;, we can run the following:</source>
          <target state="translated">例如，在第12章中，我们提到了 &lt;code&gt;grep&lt;/code&gt; 工具的Rust实现，该工具称为 &lt;code&gt;ripgrep&lt;/code&gt; ,用于搜索文件。如果要安装 &lt;code&gt;ripgrep&lt;/code&gt; ，可以运行以下命令：</target>
        </trans-unit>
        <trans-unit id="7823fda3f1a738b0793d510efb6630e193e80753" translate="yes" xml:space="preserve">
          <source>For example, in Listing 10-13, we implemented the &lt;code&gt;Summary&lt;/code&gt; trait on the &lt;code&gt;NewsArticle&lt;/code&gt; and &lt;code&gt;Tweet&lt;/code&gt; types. We can define a &lt;code&gt;notify&lt;/code&gt; function that calls the &lt;code&gt;summarize&lt;/code&gt; method on its &lt;code&gt;item&lt;/code&gt; parameter, which is of some type that implements the &lt;code&gt;Summary&lt;/code&gt; trait. To do this, we can use the &lt;code&gt;impl Trait&lt;/code&gt; syntax, like this:</source>
          <target state="translated">例如，在清单10-13中，我们对 &lt;code&gt;NewsArticle&lt;/code&gt; 和 &lt;code&gt;Tweet&lt;/code&gt; 类型实现了 &lt;code&gt;Summary&lt;/code&gt; 特性。我们可以定义一个 &lt;code&gt;notify&lt;/code&gt; 函数调用 &lt;code&gt;summarize&lt;/code&gt; 其方法 &lt;code&gt;item&lt;/code&gt; 参数，这是某种类型的一个实现的 &lt;code&gt;Summary&lt;/code&gt; 特点。为此，我们可以使用 &lt;code&gt;impl Trait&lt;/code&gt; 语法，如下所示：</target>
        </trans-unit>
        <trans-unit id="486ea7dfb7b30caa97edaa5c45c8d899d49328bd" translate="yes" xml:space="preserve">
          <source>For example, in the below example, since the enum is marked as &lt;code&gt;non_exhaustive&lt;/code&gt;, it is required that downstream crates match non-exhaustively on it.</source>
          <target state="translated">例如，在下面的示例中，由于枚举被标记为 &lt;code&gt;non_exhaustive&lt;/code&gt; ，因此要求下游包装箱在其上进行非穷举匹配。</target>
        </trans-unit>
        <trans-unit id="ef1242010b70221ef0947673271efa44f22329d9" translate="yes" xml:space="preserve">
          <source>For example, in the code in Listing 3-4, if you changed the definition of the &lt;code&gt;a&lt;/code&gt; array to have four elements but forgot to update the condition to &lt;code&gt;while index &amp;lt; 4&lt;/code&gt;, the code would panic. Using the &lt;code&gt;for&lt;/code&gt; loop, you wouldn&amp;rsquo;t need to remember to change any other code if you changed the number of values in the array.</source>
          <target state="translated">例如，在清单3-4中的代码中，如果将 &lt;code&gt;a&lt;/code&gt; 数组的定义更改为具有四个元素，但是忘记将条件更新为 &lt;code&gt;while index &amp;lt; 4&lt;/code&gt; ，则代码将出现恐慌。使用 &lt;code&gt;for&lt;/code&gt; 循环，如果您更改了数组中的值数，则无需记住要更改任何其他代码。</target>
        </trans-unit>
        <trans-unit id="7ef6c4c588de41928f2df858cbeb2e205bc6fd49" translate="yes" xml:space="preserve">
          <source>For example, in the code in Listing 3-4, if you removed an item from the &lt;code&gt;a&lt;/code&gt; array but forgot to update the condition to &lt;code&gt;while index &amp;lt; 4&lt;/code&gt;, the code would panic. Using the &lt;code&gt;for&lt;/code&gt; loop, you wouldn&amp;rsquo;t need to remember to change any other code if you changed the number of values in the array.</source>
          <target state="translated">例如，在清单3-4中的代码中，如果您从 &lt;code&gt;a&lt;/code&gt; 数组中删除了一个项目，但是却忘记了将条件更新为 &lt;code&gt;while index &amp;lt; 4&lt;/code&gt; ，则代码将出现恐慌。使用 &lt;code&gt;for&lt;/code&gt; 循环，如果您更改了数组中的值数，则无需记住更改任何其他代码。</target>
        </trans-unit>
        <trans-unit id="e1af9e58057bb08d42a00f959d4a9482b5211903" translate="yes" xml:space="preserve">
          <source>For example, in the following code:</source>
          <target state="translated">例如,在下面的代码中。</target>
        </trans-unit>
        <trans-unit id="fa8a840ae5de7e7d26ee293da2703a78a823f744" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s change &lt;em&gt;src/main.rs&lt;/em&gt; to the following:</source>
          <target state="translated">例如，让我们将&lt;em&gt;src / main.rs&lt;/em&gt;更改为以下内容：</target>
        </trans-unit>
        <trans-unit id="bb34889b7e2a2e1630ad6fd19ca5c05805b4edf0" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say we have a function that greets people by name and we want to test that the name we pass into the function appears in the output:</source>
          <target state="translated">例如，假设我们有一个按姓名打招呼的函数，并且我们要测试传递给函数的名称是否出现在输出中：</target>
        </trans-unit>
        <trans-unit id="df2b03fc7d0094e8a94e4730123f2cb77700187c" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say we have multiple structs that hold various kinds and amounts of text: a &lt;code&gt;NewsArticle&lt;/code&gt; struct that holds a news story filed in a particular location and a &lt;code&gt;Tweet&lt;/code&gt; that can have at most 280 characters along with metadata that indicates whether it was a new tweet, a retweet, or a reply to another tweet.</source>
          <target state="translated">例如，假设我们有多个结构可容纳各种类型和数量的文本：一个 &lt;code&gt;NewsArticle&lt;/code&gt; 结构可容纳在特定位置归档的新闻故事，而 &lt;code&gt;Tweet&lt;/code&gt; 最多可包含280个字符以及指示它是否为新推文，转发推文或对另一条推文的回复。</target>
        </trans-unit>
        <trans-unit id="5beb741830fde205d90a1dcb79133d20364520e1" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say we want to make an &lt;code&gt;OutlinePrint&lt;/code&gt; trait with an &lt;code&gt;outline_print&lt;/code&gt; method that will print a value framed in asterisks. That is, given a &lt;code&gt;Point&lt;/code&gt; struct that implements &lt;code&gt;Display&lt;/code&gt; to result in &lt;code&gt;(x, y)&lt;/code&gt;, when we call &lt;code&gt;outline_print&lt;/code&gt; on a &lt;code&gt;Point&lt;/code&gt; instance that has &lt;code&gt;1&lt;/code&gt; for &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; for &lt;code&gt;y&lt;/code&gt;, it should print the following:</source>
          <target state="translated">例如，假设我们要使用 &lt;code&gt;outline_print&lt;/code&gt; 方法制作 &lt;code&gt;OutlinePrint&lt;/code&gt; 特征，该方法将打印以星号框起来的值。也就是说，给定一个 &lt;code&gt;Point&lt;/code&gt; 结构实现 &lt;code&gt;Display&lt;/code&gt; 导致 &lt;code&gt;(x, y)&lt;/code&gt; ，当我们调用 &lt;code&gt;outline_print&lt;/code&gt; 上 &lt;code&gt;Point&lt;/code&gt; 有实例 &lt;code&gt;1&lt;/code&gt; 的 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;3&lt;/code&gt; 为 &lt;code&gt;y&lt;/code&gt; ，它应该打印以下：</target>
        </trans-unit>
        <trans-unit id="67eefc842f1334a9710cea463d2936fc943cb35a" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s start from the code in Listing 7-17 and move the &lt;code&gt;front_of_house&lt;/code&gt; module to its own file &lt;em&gt;src/front_of_house.rs&lt;/em&gt; by changing the crate root file so it contains the code shown in Listing 7-21. In this case, the crate root file is &lt;em&gt;src/lib.rs&lt;/em&gt;, but this procedure also works with binary crates whose crate root file is &lt;em&gt;src/main.rs&lt;/em&gt;.</source>
          <target state="translated">例如，让我们从清单7-17中的代码开始，通过更改&lt;em&gt;包装箱根&lt;/em&gt;文件，将 &lt;code&gt;front_of_house&lt;/code&gt; 模块移动到其自己的文件&lt;em&gt;src / front_of_house.rs中&lt;/em&gt;，使其包含清单7-21中所示的代码。在这种情况下，板条箱根文件是&lt;em&gt;src / lib.rs&lt;/em&gt;，但是此过程也适用于板条箱根文件是&lt;em&gt;src / main.rs的&lt;/em&gt;二进制板条箱。</target>
        </trans-unit>
        <trans-unit id="79ba89b628a47ae9fac2bb7b0ff7554c4c375147" translate="yes" xml:space="preserve">
          <source>For example, reading line-by-line is inefficient without using a buffer, so if you want to read by line, you'll need &lt;code&gt;BufRead&lt;/code&gt;, which includes a &lt;a href=&quot;#method.read_line&quot;&gt;&lt;code&gt;read_line&lt;/code&gt;&lt;/a&gt; method as well as a &lt;a href=&quot;#method.lines&quot;&gt;&lt;code&gt;lines&lt;/code&gt;&lt;/a&gt; iterator.</source>
          <target state="translated">例如，在不使用缓冲区的情况下，逐行读取效率很低，因此，如果要逐行读取，则需要 &lt;code&gt;BufRead&lt;/code&gt; ，其中包括&lt;a href=&quot;#method.read_line&quot;&gt; &lt;code&gt;read_line&lt;/code&gt; &lt;/a&gt;方法和&lt;a href=&quot;#method.lines&quot;&gt; &lt;code&gt;lines&lt;/code&gt; &lt;/a&gt;迭代器。</target>
        </trans-unit>
        <trans-unit id="7ee5d959d1301ac8a3ca0cb560c0412e0eaf4ece" translate="yes" xml:space="preserve">
          <source>For example, reading line-by-line is inefficient without using a buffer, so if you want to read by line, you'll need &lt;code&gt;BufRead&lt;/code&gt;, which includes a &lt;a href=&quot;trait.bufread#method.read_line&quot;&gt;&lt;code&gt;read_line&lt;/code&gt;&lt;/a&gt; method as well as a &lt;a href=&quot;trait.bufread#method.lines&quot;&gt;&lt;code&gt;lines&lt;/code&gt;&lt;/a&gt; iterator.</source>
          <target state="translated">例如，在不使用缓冲区的情况下，逐行读取效率很低，因此，如果要逐行读取，则需要 &lt;code&gt;BufRead&lt;/code&gt; ，它包括&lt;a href=&quot;trait.bufread#method.read_line&quot;&gt; &lt;code&gt;read_line&lt;/code&gt; &lt;/a&gt;方法和&lt;a href=&quot;trait.bufread#method.lines&quot;&gt; &lt;code&gt;lines&lt;/code&gt; &lt;/a&gt;迭代器。</target>
        </trans-unit>
        <trans-unit id="5d283913d102f25021490de7addfaf1023c5a559" translate="yes" xml:space="preserve">
          <source>For example, recall the cons list example in Listing 15-18 where we used &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; to allow multiple lists to share ownership of another list. Because &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; holds only immutable values, we can&amp;rsquo;t change any of the values in the list once we&amp;rsquo;ve created them. Let&amp;rsquo;s add in &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; to gain the ability to change the values in the lists. Listing 15-24 shows that by using a &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; in the &lt;code&gt;Cons&lt;/code&gt; definition, we can modify the value stored in all the lists:</source>
          <target state="translated">例如，回想一下清单15-18中的cons列表示例，其中我们使用 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 允许多个列表共享另一个列表的所有权。由于 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 仅保存不可变的值，因此一旦创建它们就无法更改列表中的任何值。让我们添加 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; 以获得更改列表中值的能力。清单15-24显示，通过在 &lt;code&gt;Cons&lt;/code&gt; 定义中使用 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; ，我们可以修改存储在所有列表中的值：</target>
        </trans-unit>
        <trans-unit id="55a0a06bf1a6582afc9c911dda23940db684b038" translate="yes" xml:space="preserve">
          <source>For example, say each of your tests runs some code that creates a file on disk named &lt;em&gt;test-output.txt&lt;/em&gt; and writes some data to that file. Then each test reads the data in that file and asserts that the file contains a particular value, which is different in each test. Because the tests run at the same time, one test might overwrite the file between when another test writes and reads the file. The second test will then fail, not because the code is incorrect but because the tests have interfered with each other while running in parallel. One solution is to make sure each test writes to a different file; another solution is to run the tests one at a time.</source>
          <target state="translated">例如，假设您的每个测试运行一些代码，这些代码会在磁盘上创建一个名为&lt;em&gt;test-output.txt&lt;/em&gt;的文件，并将一些数据写入该文件。然后，每个测试读取该文件中的数据，并断言该文件包含特定值，该值在每个测试中都不同。因为测试是同时运行的，所以在另一个测试写入和读取文件之间，一个测试可能会覆盖文件。然后，第二个测试将失败，这不是因为代码不正确，而是因为在并行运行时测试之间相互干扰。一种解决方案是确保每个测试都写入不同的文件。另一种解决方案是一次运行一次测试。</target>
        </trans-unit>
        <trans-unit id="4814345fbf007312eaa1283d22f4721e9e65da7f" translate="yes" xml:space="preserve">
          <source>For example, say we had two functions: one that finds the largest item in a slice of &lt;code&gt;i32&lt;/code&gt; values and one that finds the largest item in a slice of &lt;code&gt;char&lt;/code&gt; values. How would we eliminate that duplication? Let&amp;rsquo;s find out!</source>
          <target state="translated">例如，假设我们有两个函数：一个函数在 &lt;code&gt;i32&lt;/code&gt; 值切片中找到最大的项，另一个函数在 &lt;code&gt;char&lt;/code&gt; 值切片中找到最大的项。我们将如何消除重复？让我们找出答案！</target>
        </trans-unit>
        <trans-unit id="4cba319e8cf72cafc05de924ba069b585b2c709d" translate="yes" xml:space="preserve">
          <source>For example, say we made a library named &lt;code&gt;art&lt;/code&gt; for modeling artistic concepts. Within this library are two modules: a &lt;code&gt;kinds&lt;/code&gt; module containing two enums named &lt;code&gt;PrimaryColor&lt;/code&gt; and &lt;code&gt;SecondaryColor&lt;/code&gt; and a &lt;code&gt;utils&lt;/code&gt; module containing a function named &lt;code&gt;mix&lt;/code&gt;, as shown in Listing 14-3:</source>
          <target state="translated">例如，假设我们建立了一个名为 &lt;code&gt;art&lt;/code&gt; 的图书馆来对艺术概念进行建模。在该库中两个模块：一个 &lt;code&gt;kinds&lt;/code&gt; 模块包含两个名为枚举 &lt;code&gt;PrimaryColor&lt;/code&gt; 和 &lt;code&gt;SecondaryColor&lt;/code&gt; 和 &lt;code&gt;utils&lt;/code&gt; 的模块包含函数名为 &lt;code&gt;mix&lt;/code&gt; ，如清单14-3中：</target>
        </trans-unit>
        <trans-unit id="6034956f55199745f53b082e0813b66b3ccd59d0" translate="yes" xml:space="preserve">
          <source>For example, say we want to get values from a row in a spreadsheet in which some of the columns in the row contain integers, some floating-point numbers, and some strings. We can define an enum whose variants will hold the different value types, and then all the enum variants will be considered the same type: that of the enum. Then we can create a vector that holds that enum and so, ultimately, holds different types. We&amp;rsquo;ve demonstrated this in Listing 8-10.</source>
          <target state="translated">例如，假设我们要从电子表格的一行中获取值，其中该行中的某些列包含整数，一些浮点数和一些字符串。我们可以定义一个枚举，其变量将包含不同的值类型，然后所有枚举变量将被视为相同的类型：枚举的类型。然后，我们可以创建一个包含该枚举的向量，从而最终包含不同的类型。我们已在清单8-10中对此进行了演示。</target>
        </trans-unit>
        <trans-unit id="fa13929a3b270eef2878bd884ac068ec70c4ce69" translate="yes" xml:space="preserve">
          <source>For example, say you write a program that uses an approximation of a mathematical constant, such as pi, as this program does:</source>
          <target state="translated">例如,假设你写了一个程序,使用一个数学常数的近似值,比如pi,就像这个程序一样。</target>
        </trans-unit>
        <trans-unit id="6a1d451b5816383f70b638071c7a253213366d2b" translate="yes" xml:space="preserve">
          <source>For example, the &lt;a href=&quot;trait.tryfrom&quot;&gt;&lt;code&gt;TryFrom&lt;/code&gt;&lt;/a&gt; trait (conversion that returns a &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;) has a blanket implementation for all types where a reverse &lt;a href=&quot;trait.into&quot;&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt; implementation exists.</source>
          <target state="translated">例如，对于存在反向&lt;a href=&quot;trait.into&quot;&gt; &lt;code&gt;Into&lt;/code&gt; &lt;/a&gt;实现的所有类型，&lt;a href=&quot;trait.tryfrom&quot;&gt; &lt;code&gt;TryFrom&lt;/code&gt; &lt;/a&gt;特性（返回&lt;a href=&quot;../result/enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; 的&lt;/a&gt;转换）都有一个通用实现。</target>
        </trans-unit>
        <trans-unit id="151702debd099e963ea8f32f250d147e3f891b7b" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;Foo&lt;/code&gt; struct below has no type parameters, but is supplied with two in the definition of &lt;code&gt;Bar&lt;/code&gt;:</source>
          <target state="translated">例如，下面的 &lt;code&gt;Foo&lt;/code&gt; 结构没有类型参数，但是在 &lt;code&gt;Bar&lt;/code&gt; 的定义中提供了两个：</target>
        </trans-unit>
        <trans-unit id="55ee334160f14fc8439e8031cfca7e75b754c140" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;Foo&lt;/code&gt; struct below is defined to be generic in &lt;code&gt;T&lt;/code&gt;, but the type parameter is missing in the definition of &lt;code&gt;Bar&lt;/code&gt;:</source>
          <target state="translated">例如，下面的 &lt;code&gt;Foo&lt;/code&gt; 结构被定义为 &lt;code&gt;T&lt;/code&gt; 中的泛型，但是 &lt;code&gt;Bar&lt;/code&gt; 的定义中缺少type参数：</target>
        </trans-unit>
        <trans-unit id="c5ce73524ef8f36dbf496c73993c1de5644cb594" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;Foo&lt;/code&gt; trait has a method &lt;code&gt;foo&lt;/code&gt; with a type parameter &lt;code&gt;T&lt;/code&gt;, but the implementation of &lt;code&gt;foo&lt;/code&gt; for the type &lt;code&gt;Bar&lt;/code&gt; is missing this parameter. To fix this error, they must have the same type parameters:</source>
          <target state="translated">例如， &lt;code&gt;Foo&lt;/code&gt; 特征具有类型参数为 &lt;code&gt;T&lt;/code&gt; 的方法 &lt;code&gt;foo&lt;/code&gt; ，但是 &lt;code&gt;Bar&lt;/code&gt; 类型的 &lt;code&gt;foo&lt;/code&gt; 的实现缺少此参数。要解决此错误，它们必须具有相同的类型参数：</target>
        </trans-unit>
        <trans-unit id="7f472151ef9c4c8e584f48b10f04fca2193dee33" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;Foo&lt;/code&gt; trait has a method &lt;code&gt;foo&lt;/code&gt; with two function parameters (&lt;code&gt;&amp;amp;self&lt;/code&gt; and &lt;code&gt;u8&lt;/code&gt;), but the implementation of &lt;code&gt;foo&lt;/code&gt; for the type &lt;code&gt;Bar&lt;/code&gt; omits the &lt;code&gt;u8&lt;/code&gt; parameter. To fix this error, they must have the same parameters:</source>
          <target state="translated">例如， &lt;code&gt;Foo&lt;/code&gt; 性状有一个方法 &lt;code&gt;foo&lt;/code&gt; 的具有两个功能参数（ &lt;code&gt;&amp;amp;self&lt;/code&gt; 和 &lt;code&gt;u8&lt;/code&gt; ），但实施 &lt;code&gt;foo&lt;/code&gt; 的类型 &lt;code&gt;Bar&lt;/code&gt; 省略 &lt;code&gt;u8&lt;/code&gt; 参数。要解决此错误，它们必须具有相同的参数：</target>
        </trans-unit>
        <trans-unit id="28582c1af9d66b47d8b372c20e239e80fd1b954e" translate="yes" xml:space="preserve">
          <source>For example, the code above can be fixed to:</source>
          <target state="translated">例如,上面的代码可以固定为。</target>
        </trans-unit>
        <trans-unit id="d4ec33ffd8a400e8731c3959c2108ca0e6ee81ff" translate="yes" xml:space="preserve">
          <source>For example, the following &lt;a href=&quot;../macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; expressions all use named argument:</source>
          <target state="translated">例如以下&lt;a href=&quot;../macro.format&quot;&gt; &lt;code&gt;format!&lt;/code&gt; &lt;/a&gt;表达式都使用命名参数：</target>
        </trans-unit>
        <trans-unit id="00c40dd32be2ecfc7a31834a5b9e57d6d91eabce" translate="yes" xml:space="preserve">
          <source>For example, the following &lt;code&gt;match&lt;/code&gt; block has too many arms:</source>
          <target state="translated">例如，以下 &lt;code&gt;match&lt;/code&gt; 区的武器过多：</target>
        </trans-unit>
        <trans-unit id="ccff2a62302aec83d3032aa28ffe87629cd5d301" translate="yes" xml:space="preserve">
          <source>For example, the following calls all print the same thing &lt;code&gt;Hello x is 0.01000&lt;/code&gt;:</source>
          <target state="translated">例如，以下所有调用均打印相同的东西 &lt;code&gt;Hello x is 0.01000&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="f8410f740d252ba94b087c65dca435d74ad4c130" translate="yes" xml:space="preserve">
          <source>For example, the following code defines an inert &lt;code&gt;some_inert_attribute&lt;/code&gt; attribute that is not formally defined anywhere and the &lt;code&gt;some_proc_macro_attribute&lt;/code&gt; procedural macro is responsible for detecting its presence and removing it from the output token stream.</source>
          <target state="translated">例如，以下代码定义了一个在任何地方都未正式定义的惰性 &lt;code&gt;some_inert_attribute&lt;/code&gt; 属性， &lt;code&gt;some_proc_macro_attribute&lt;/code&gt; 过程宏负责检测其存在并将其从输出令牌流中删除。</target>
        </trans-unit>
        <trans-unit id="aea53cb95724623abd128d3eeb0328ecf14aacb1" translate="yes" xml:space="preserve">
          <source>For example, the following code will always print &lt;code&gt;1.5&lt;/code&gt; even if the system locale uses a decimal separator other than a dot.</source>
          <target state="translated">例如，即使系统区域设置使用小数点分隔符（而不是点），以下代码也将始终显示 &lt;code&gt;1.5&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="885017323eb28c594e76743a2b0d28eacb31ef45" translate="yes" xml:space="preserve">
          <source>For example, the following defines the type &lt;code&gt;Point&lt;/code&gt; as a synonym for the type &lt;code&gt;(u8, u8)&lt;/code&gt;, the type of pairs of unsigned 8 bit integers:</source>
          <target state="translated">例如，以下将 &lt;code&gt;Point&lt;/code&gt; 类型定义为类型 &lt;code&gt;(u8, u8)&lt;/code&gt; 的同义词，该类型是无符号8位整数对的类型：</target>
        </trans-unit>
        <trans-unit id="7cf92604c65fd608b9bab83d5d85641029aff675" translate="yes" xml:space="preserve">
          <source>For example, the following derive macro defines a helper attribute &lt;code&gt;helper&lt;/code&gt;, but ultimately doesn't do anything with it.</source>
          <target state="translated">例如，以下派生宏定义了一个helper属性 &lt;code&gt;helper&lt;/code&gt; ，但最终对其不做任何事情。</target>
        </trans-unit>
        <trans-unit id="b4bc188ed3ec55a280f2bbbfb77e3725b58a7535" translate="yes" xml:space="preserve">
          <source>For example, the following macro definition ignores its input and outputs a function &lt;code&gt;answer&lt;/code&gt; into its scope.</source>
          <target state="translated">例如，以下宏定义将忽略其输入，并将函数 &lt;code&gt;answer&lt;/code&gt; 输出到其范围内。</target>
        </trans-unit>
        <trans-unit id="57464fd8804b2cf7021000e159e4c26bf42d7d2e" translate="yes" xml:space="preserve">
          <source>For example, the following will create an &lt;a href=&quot;../items/implementations&quot;&gt;&lt;code&gt;impl&lt;/code&gt; item&lt;/a&gt; for the &lt;a href=&quot;../../std/cmp/trait.partialeq&quot;&gt;&lt;code&gt;PartialEq&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../std/clone/trait.clone&quot;&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt; traits for &lt;code&gt;Foo&lt;/code&gt;, and the type parameter &lt;code&gt;T&lt;/code&gt; will be given the &lt;code&gt;PartialEq&lt;/code&gt; or &lt;code&gt;Clone&lt;/code&gt; constraints for the appropriate &lt;code&gt;impl&lt;/code&gt;:</source>
          <target state="translated">例如，以下将为 &lt;code&gt;Foo&lt;/code&gt; 的&lt;a href=&quot;../../std/cmp/trait.partialeq&quot;&gt; &lt;code&gt;PartialEq&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../std/clone/trait.clone&quot;&gt; &lt;code&gt;Clone&lt;/code&gt; &lt;/a&gt;特性创建一个&lt;a href=&quot;../items/implementations&quot;&gt; &lt;code&gt;impl&lt;/code&gt; 项&lt;/a&gt;，并且为类型参数 &lt;code&gt;T&lt;/code&gt; 赋予适当的 &lt;code&gt;impl&lt;/code&gt; 的 &lt;code&gt;PartialEq&lt;/code&gt; 或 &lt;code&gt;Clone&lt;/code&gt; 约束：</target>
        </trans-unit>
        <trans-unit id="54f0cc8d17f1c6f2f1e67596b770e99d8f237e11" translate="yes" xml:space="preserve">
          <source>For example, the function above behaves as if it was written as:</source>
          <target state="translated">例如,上面的函数的行为就像它被写成。</target>
        </trans-unit>
        <trans-unit id="6c27c96db626276f442777ef3f3477feae99f3a5" translate="yes" xml:space="preserve">
          <source>For example, the sized array type &lt;code&gt;[i8; 2]&lt;/code&gt; implements &lt;code&gt;Unsize&amp;lt;[i8]&amp;gt;&lt;/code&gt; and &lt;code&gt;Unsize&amp;lt;dyn fmt::Debug&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">例如，大小数组类型为 &lt;code&gt;[i8; 2]&lt;/code&gt; 实现 &lt;code&gt;Unsize&amp;lt;[i8]&amp;gt;&lt;/code&gt; 和 &lt;code&gt;Unsize&amp;lt;dyn fmt::Debug&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="366340c67c059c204db621f7eae2415b246044b0" translate="yes" xml:space="preserve">
          <source>For example, the sized array type &lt;code&gt;[i8; 2]&lt;/code&gt; implements &lt;code&gt;Unsize&amp;lt;[i8]&amp;gt;&lt;/code&gt; and &lt;code&gt;Unsize&amp;lt;fmt::Debug&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">例如，大小数组类型为 &lt;code&gt;[i8; 2]&lt;/code&gt; 实现 &lt;code&gt;Unsize&amp;lt;[i8]&amp;gt;&lt;/code&gt; 和 &lt;code&gt;Unsize&amp;lt;fmt::Debug&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9fd0eff00179b77af92d43c41f240143cf69cdfa" translate="yes" xml:space="preserve">
          <source>For example, the trait below has a method &lt;code&gt;foo&lt;/code&gt; with a type parameter &lt;code&gt;T&lt;/code&gt;, but the implementation of &lt;code&gt;foo&lt;/code&gt; for the type &lt;code&gt;Bar&lt;/code&gt; is missing this parameter:</source>
          <target state="translated">例如，下面的特征具有类型参数为 &lt;code&gt;T&lt;/code&gt; 的方法 &lt;code&gt;foo&lt;/code&gt; ，但是 &lt;code&gt;Bar&lt;/code&gt; 类型的 &lt;code&gt;foo&lt;/code&gt; 的实现缺少此参数：</target>
        </trans-unit>
        <trans-unit id="8b644523186dc68fa33f4525c4f5b85593ff99b3" translate="yes" xml:space="preserve">
          <source>For example, the trait below has a method &lt;code&gt;foo&lt;/code&gt; with two function parameters (&lt;code&gt;&amp;amp;self&lt;/code&gt; and &lt;code&gt;u8&lt;/code&gt;), but the implementation of &lt;code&gt;foo&lt;/code&gt; for the type &lt;code&gt;Bar&lt;/code&gt; omits the &lt;code&gt;u8&lt;/code&gt; parameter:</source>
          <target state="translated">例如，下面的性状有一个方法 &lt;code&gt;foo&lt;/code&gt; 的具有两个功能参数（ &lt;code&gt;&amp;amp;self&lt;/code&gt; 和 &lt;code&gt;u8&lt;/code&gt; ），但实施 &lt;code&gt;foo&lt;/code&gt; 的类型 &lt;code&gt;Bar&lt;/code&gt; 省略了 &lt;code&gt;u8&lt;/code&gt; 参数：</target>
        </trans-unit>
        <trans-unit id="b2054ac7104ff8f94e8f0fe677bda5de864b59e2" translate="yes" xml:space="preserve">
          <source>For example, these two matches on &lt;code&gt;x: &amp;amp;i32&lt;/code&gt; are equivalent:</source>
          <target state="translated">例如， &lt;code&gt;x: &amp;amp;i32&lt;/code&gt; 上的这两个匹配项是等效的：</target>
        </trans-unit>
        <trans-unit id="0f0ebafee793ef772176055bfbe1e63d094aa7f0" translate="yes" xml:space="preserve">
          <source>For example, this attribute macro takes the input stream and returns it as is, effectively being the no-op of attributes.</source>
          <target state="translated">例如,这个属性宏把输入流原封不动地返回,实际上是属性的不二法门。</target>
        </trans-unit>
        <trans-unit id="3b2d902f733498146c7d79ff0d4666385f011551" translate="yes" xml:space="preserve">
          <source>For example, this can happen when a drop has taken place:</source>
          <target state="translated">例如,当发生跌落时,就会出现这种情况。</target>
        </trans-unit>
        <trans-unit id="d7dedeceba4a8900e43a594ae72dc887e0a2e3eb" translate="yes" xml:space="preserve">
          <source>For example, this can happen when storing a &lt;code&gt;&amp;amp;mut&lt;/code&gt; inside an immutable &lt;code&gt;Box&lt;/code&gt;:</source>
          <target state="translated">例如，当将 &lt;code&gt;&amp;amp;mut&lt;/code&gt; 存储在不可变的 &lt;code&gt;Box&lt;/code&gt; 中时，可能会发生这种情况：</target>
        </trans-unit>
        <trans-unit id="5807b7a347e69661509cba501c2fe0d4b703ef04" translate="yes" xml:space="preserve">
          <source>For example, this function returns &lt;code&gt;true&lt;/code&gt; on unix platforms and &lt;code&gt;false&lt;/code&gt; on other platforms.</source>
          <target state="translated">例如，此函数在unix平台上返回 &lt;code&gt;true&lt;/code&gt; ，在其他平台上返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bfe3e762f0308c232acfe535a85b5bf692d7a562" translate="yes" xml:space="preserve">
          <source>For example, this is a simple function:</source>
          <target state="translated">例如,这是一个简单的函数。</target>
        </trans-unit>
        <trans-unit id="574f015c9f879de83a47af30c961f0cb2ef98124" translate="yes" xml:space="preserve">
          <source>For example, we can refactor the code in Listing 18-15 to support RGB and HSV colors in the &lt;code&gt;ChangeColor&lt;/code&gt; message, as shown in Listing 18-16.</source>
          <target state="translated">例如，我们可以重构清单18-15中的代码以在 &lt;code&gt;ChangeColor&lt;/code&gt; 消息中支持RGB和HSV颜色，如清单18-16所示。</target>
        </trans-unit>
        <trans-unit id="f82030bd7f1111a5c705663c05195d4bd4d79595" translate="yes" xml:space="preserve">
          <source>For example, while &lt;a href=&quot;../f64/index&quot;&gt;&lt;code&gt;f64&lt;/code&gt;&lt;/a&gt; doesn't implement &lt;a href=&quot;../cmp/trait.ord&quot;&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; because &lt;code&gt;NaN != NaN&lt;/code&gt;, we can use &lt;code&gt;partial_cmp&lt;/code&gt; as our sort function when we know the slice doesn't contain a &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">例如，虽然&lt;a href=&quot;../f64/index&quot;&gt; &lt;code&gt;f64&lt;/code&gt; &lt;/a&gt;没有实现&lt;a href=&quot;../cmp/trait.ord&quot;&gt; &lt;code&gt;Ord&lt;/code&gt; &lt;/a&gt;因为 &lt;code&gt;NaN != NaN&lt;/code&gt; ，我们可以用 &lt;code&gt;partial_cmp&lt;/code&gt; 作为我们的排序功能，当我们知道切片不包含 &lt;code&gt;NaN&lt;/code&gt; 的。</target>
        </trans-unit>
        <trans-unit id="6422942d92b193786388ab0bda397e05164540c1" translate="yes" xml:space="preserve">
          <source>For example, while &lt;a href=&quot;../primitive.f64&quot;&gt;&lt;code&gt;f64&lt;/code&gt;&lt;/a&gt; doesn't implement &lt;a href=&quot;../cmp/trait.ord&quot;&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; because &lt;code&gt;NaN != NaN&lt;/code&gt;, we can use &lt;code&gt;partial_cmp&lt;/code&gt; as our sort function when we know the slice doesn't contain a &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">例如，虽然&lt;a href=&quot;../primitive.f64&quot;&gt; &lt;code&gt;f64&lt;/code&gt; &lt;/a&gt;没有实现&lt;a href=&quot;../cmp/trait.ord&quot;&gt; &lt;code&gt;Ord&lt;/code&gt; &lt;/a&gt;因为 &lt;code&gt;NaN != NaN&lt;/code&gt; ，我们可以用 &lt;code&gt;partial_cmp&lt;/code&gt; 作为我们的排序功能，当我们知道切片不包含 &lt;code&gt;NaN&lt;/code&gt; 的。</target>
        </trans-unit>
        <trans-unit id="8b764d8204b44c3e5e2540dd303c676cd8f62e40" translate="yes" xml:space="preserve">
          <source>For example, while &lt;a href=&quot;f64/index&quot;&gt;&lt;code&gt;f64&lt;/code&gt;&lt;/a&gt; doesn't implement &lt;a href=&quot;cmp/trait.ord&quot;&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; because &lt;code&gt;NaN != NaN&lt;/code&gt;, we can use &lt;code&gt;partial_cmp&lt;/code&gt; as our sort function when we know the slice doesn't contain a &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">例如，虽然&lt;a href=&quot;f64/index&quot;&gt; &lt;code&gt;f64&lt;/code&gt; &lt;/a&gt;没有实现&lt;a href=&quot;cmp/trait.ord&quot;&gt; &lt;code&gt;Ord&lt;/code&gt; &lt;/a&gt;因为 &lt;code&gt;NaN != NaN&lt;/code&gt; ，我们可以用 &lt;code&gt;partial_cmp&lt;/code&gt; 作为我们的排序功能，当我们知道切片不包含 &lt;code&gt;NaN&lt;/code&gt; 的。</target>
        </trans-unit>
        <trans-unit id="e424d677e36813abb83127c7379735d7c5273964" translate="yes" xml:space="preserve">
          <source>For example, while &lt;a href=&quot;primitive.f64&quot;&gt;&lt;code&gt;f64&lt;/code&gt;&lt;/a&gt; doesn't implement &lt;a href=&quot;cmp/trait.ord&quot;&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; because &lt;code&gt;NaN != NaN&lt;/code&gt;, we can use &lt;code&gt;partial_cmp&lt;/code&gt; as our sort function when we know the slice doesn't contain a &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">例如，虽然&lt;a href=&quot;primitive.f64&quot;&gt; &lt;code&gt;f64&lt;/code&gt; &lt;/a&gt;没有实现&lt;a href=&quot;cmp/trait.ord&quot;&gt; &lt;code&gt;Ord&lt;/code&gt; &lt;/a&gt;因为 &lt;code&gt;NaN != NaN&lt;/code&gt; ，我们可以用 &lt;code&gt;partial_cmp&lt;/code&gt; 作为我们的排序功能，当我们知道切片不包含 &lt;code&gt;NaN&lt;/code&gt; 的。</target>
        </trans-unit>
        <trans-unit id="d8dc8734abe186200131ed8ac632d434e048366c" translate="yes" xml:space="preserve">
          <source>For example, with a &lt;code&gt;repr(C, u8)&lt;/code&gt; enum it is not possible to have 257 unique discriminants (&quot;tags&quot;) whereas the same enum with only a &lt;code&gt;repr(C)&lt;/code&gt; attribute will compile without any problems.</source>
          <target state="translated">例如，对于 &lt;code&gt;repr(C, u8)&lt;/code&gt; 枚举，不可能有257个唯一的判​​别式（&amp;ldquo;标签&amp;rdquo;），而只有 &lt;code&gt;repr(C)&lt;/code&gt; 属性的同一个枚举将编译而没有任何问题。</target>
        </trans-unit>
        <trans-unit id="c94d1535c10da4f2821748f9ce38729f26e00dbe" translate="yes" xml:space="preserve">
          <source>For example, with:</source>
          <target state="translated">例如,与。</target>
        </trans-unit>
        <trans-unit id="17eeedca2613fada694d9a21076a8833ab19837f" translate="yes" xml:space="preserve">
          <source>For example, you could implement &lt;code&gt;Drop&lt;/code&gt; as follows:</source>
          <target state="translated">例如，您可以按以下方式实现 &lt;code&gt;Drop&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0e89540393294fb9755a8c7be8446018477b85f9" translate="yes" xml:space="preserve">
          <source>For example, you may have done something like:</source>
          <target state="translated">例如,你可能做过这样的事情。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="e2ec009e5911b36cd0b755b32a4d4072a53597da" translate="yes" xml:space="preserve">
          <source>For example: By creating a generic function that takes an &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; we express that we want to accept all references that can be converted to &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt; as an argument. Since both &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt; implement &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; we can accept both as input argument.</source>
          <target state="translated">例如：通过创建一个采用 &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; 的泛型函数，我们表示我们希望接受所有可以转换为&lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;&amp;amp;str&lt;/code&gt; 的&lt;/a&gt;引用作为参数。由于&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../primitive.str&quot;&gt; &lt;code&gt;&amp;amp;str&lt;/code&gt; 都&lt;/a&gt;实现了 &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; 我们可以将二者都用作输入参数。</target>
        </trans-unit>
        <trans-unit id="c67a863b99ff7d27d3808154564c3bc4114136bc" translate="yes" xml:space="preserve">
          <source>For example: By creating a generic function that takes an &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; we express that we want to accept all references that can be converted to &lt;code&gt;&amp;amp;str&lt;/code&gt; as an argument. Since both &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;&amp;amp;str&lt;/code&gt; implement &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; we can accept both as input argument.</source>
          <target state="translated">例如：通过创建一个采用 &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; 的泛型函数，我们表示我们希望接受所有可以转换为 &lt;code&gt;&amp;amp;str&lt;/code&gt; 的引用作为参数。由于&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;和 &lt;code&gt;&amp;amp;str&lt;/code&gt; 都实现了 &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; 我们可以将两者都用作输入参数。</target>
        </trans-unit>
        <trans-unit id="7b85128b7000b81f6830c4ca37b9c6350ef69882" translate="yes" xml:space="preserve">
          <source>For example: By creating a generic function that takes an &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; we express that we want to accept all references that can be converted to [&lt;code&gt;&amp;amp;str&lt;/code&gt;] as an argument. Since both &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; and [&lt;code&gt;&amp;amp;str&lt;/code&gt;] implement &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; we can accept both as input argument.</source>
          <target state="translated">例如：通过创建一个采用 &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; 的泛型函数，我们表示我们希望接受所有可以转换为[ &lt;code&gt;&amp;amp;str&lt;/code&gt; ]作为参数的引用。由于&lt;a href=&quot;../string/struct.string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;和[ &lt;code&gt;&amp;amp;str&lt;/code&gt; ]都实现了 &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; 我们可以将二者都用作输入参数。</target>
        </trans-unit>
        <trans-unit id="c242c0b4118acc9ccca5d9ffb3d5007ec8e99339" translate="yes" xml:space="preserve">
          <source>For expensive key functions (e.g. functions that are not simple property accesses or basic operations), &lt;a href=&quot;#method.sort_by_cached_key&quot;&gt;&lt;code&gt;sort_by_cached_key&lt;/code&gt;&lt;/a&gt; is likely to be significantly faster, as it does not recompute element keys.</source>
          <target state="translated">对于昂贵的键函数（例如，不是简单属性访问或基本操作的函数），&lt;a href=&quot;#method.sort_by_cached_key&quot;&gt; &lt;code&gt;sort_by_cached_key&lt;/code&gt; &lt;/a&gt;可能会明显更快，因为它不会重新计算元素键。</target>
        </trans-unit>
        <trans-unit id="fac202d9a81aa406cb4f2aa07e7d19ccd78a9e21" translate="yes" xml:space="preserve">
          <source>For floating-point types, this indicates how many digits after the decimal point should be printed.</source>
          <target state="translated">对于浮点类型,这表示小数点后应该打印多少位数。</target>
        </trans-unit>
        <trans-unit id="60a97f7f70b38aec22b5767907484329e4b88190" translate="yes" xml:space="preserve">
          <source>For generic types (counting the built-in types above as generic over &lt;code&gt;T&lt;/code&gt;), if a generic implementation is available, then the compiler does not automatically implement it for types that could use the implementation except that they do not meet the requisite trait bounds. For instance, the standard library implements &lt;code&gt;Send&lt;/code&gt; for all &lt;code&gt;&amp;amp;T&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;Sync&lt;/code&gt;; this means that the compiler will not implement &lt;code&gt;Send&lt;/code&gt; for &lt;code&gt;&amp;amp;T&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;Send&lt;/code&gt; but not &lt;code&gt;Sync&lt;/code&gt;.</source>
          <target state="translated">对于泛型类型（将上面的内置类型算作 &lt;code&gt;T&lt;/code&gt; 之上的泛型），如果有泛型实现可用，则编译器不会自动为可以使用该实现的类型实现该实现，除非它们不符合必要的特征界限。例如，标准库为所有 &lt;code&gt;&amp;amp;T&lt;/code&gt; 实现 &lt;code&gt;Send&lt;/code&gt; ，其中 &lt;code&gt;T&lt;/code&gt; 为 &lt;code&gt;Sync&lt;/code&gt; ; 这意味着如果 &lt;code&gt;T&lt;/code&gt; 为 &lt;code&gt;Send&lt;/code&gt; 而不是 &lt;code&gt;Sync&lt;/code&gt; ，则编译器将不会实现 &lt;code&gt;Send&lt;/code&gt; for &lt;code&gt;&amp;amp;T&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a9bb6b1fc5ac516815924015fa9742f7f462b2df" translate="yes" xml:space="preserve">
          <source>For historical reasons and convenience, the tuple type with no elements (&lt;code&gt;()&lt;/code&gt;) is often called &amp;lsquo;unit&amp;rsquo; or &amp;lsquo;the unit type&amp;rsquo;.</source>
          <target state="translated">出于历史原因和方便起见，不包含元素（ &lt;code&gt;()&lt;/code&gt; ）的元组类型通常称为&amp;ldquo;单元&amp;rdquo;或&amp;ldquo;单元类型&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="0cae8f11b3fc955cca56e9644b85da41554bc0c8" translate="yes" xml:space="preserve">
          <source>For historical reasons, the Windows API uses a form of potentially ill-formed UTF-16 encoding for strings. Specifically, the 16-bit code units in Windows strings may contain &lt;a href=&quot;https://simonsapin.github.io/wtf-8/#ill-formed-utf-16&quot;&gt;isolated surrogate code points which are not paired together&lt;/a&gt;. The Unicode standard requires that surrogate code points (those in the range U+D800 to U+DFFF) always be &lt;em&gt;paired&lt;/em&gt;, because in the UTF-16 encoding a &lt;em&gt;surrogate code unit pair&lt;/em&gt; is used to encode a single character. For compatibility with code that does not enforce these pairings, Windows does not enforce them, either.</source>
          <target state="translated">由于历史原因，Windows API对字符串使用了一种形式可能不正确的UTF-16编码。具体来说，Windows字符串中的16位代码单元可能包含&lt;a href=&quot;https://simonsapin.github.io/wtf-8/#ill-formed-utf-16&quot;&gt;未配对的孤立的代理代码点&lt;/a&gt;。Unicode标准要求代理代码点（在U + D800到U + DFFF范围内）始终&lt;em&gt;配对&lt;/em&gt;，因为在UTF-16编码中，&lt;em&gt;代理代码单元对&lt;/em&gt;用于编码单个字符。为了与不强制执行这些配对的代码兼容，Windows也不强制执行它们。</target>
        </trans-unit>
        <trans-unit id="8916c85db1ffc957e4227acdfffd5e1133284b2f" translate="yes" xml:space="preserve">
          <source>For historical reasons, the scoping of macros by example does not work entirely like items. Macros have two forms of scope: textual scope, and path-based scope. Textual scope is based on the order that things appear in source files, or even across multiple files, and is the default scoping. It is explained further below. Path-based scope works exactly the same way that item scoping does. The scoping, exporting, and importing of macros is controlled largely by attributes.</source>
          <target state="translated">由于历史的原因,通过实例对宏的范围划分并不完全像项一样。宏有两种形式的作用域:文本作用域,和基于路径的作用域。文本范围是基于事物在源文件中,甚至在多个文件中出现的顺序,是默认的范围化。下面将进一步解释它。基于路径的作用域与项目作用域的工作方式完全相同。宏的作用域、导出和导入主要由属性控制。</target>
        </trans-unit>
        <trans-unit id="710b4db2d0c9327d5cbb0b2974185ecea3b00d3d" translate="yes" xml:space="preserve">
          <source>For information about possible values, see &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/winnt/ne-winnt-security_impersonation_level&quot;&gt;Impersonation Levels&lt;/a&gt; on the Windows Dev Center site. The &lt;code&gt;SECURITY_SQOS_PRESENT&lt;/code&gt; flag is set automatically when using this method.</source>
          <target state="translated">有关可能的值的信息，请参见Windows Dev Center网站上的&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/winnt/ne-winnt-security_impersonation_level&quot;&gt;模拟级别&lt;/a&gt;。所述 &lt;code&gt;SECURITY_SQOS_PRESENT&lt;/code&gt; 使用此方法时标志被自动设置。</target>
        </trans-unit>
        <trans-unit id="2a1e7857364d8e31bcd2215cbf664f2f9ca1f5e2" translate="yes" xml:space="preserve">
          <source>For information about possible values, see &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa379572.aspx&quot;&gt;Impersonation Levels&lt;/a&gt; on the Windows Dev Center site. The &lt;code&gt;SECURITY_SQOS_PRESENT&lt;/code&gt; flag is set automatically when using this method.</source>
          <target state="translated">有关可能的值的信息，请参见Windows Dev Center网站上的&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa379572.aspx&quot;&gt;模拟级别&lt;/a&gt;。所述 &lt;code&gt;SECURITY_SQOS_PRESENT&lt;/code&gt; 使用此方法时标志被自动设置。</target>
        </trans-unit>
        <trans-unit id="1b51d9cd63e79117823cb3a5577ae76f76a648aa" translate="yes" xml:space="preserve">
          <source>For information on the design of the orphan rules, see &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md&quot;&gt;RFC 1023&lt;/a&gt;.</source>
          <target state="translated">有关孤立规则设计的信息，请参阅&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md&quot;&gt;RFC 1023&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4f4337d5c37f28afdc9f6e968d52d47c802b104d" translate="yes" xml:space="preserve">
          <source>For information on the design of the orphan rules, see &lt;a href=&quot;https://rust-lang.github.io/rfcs/2451-re-rebalancing-coherence.html&quot;&gt;RFC 2451&lt;/a&gt; and &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md&quot;&gt;RFC 1023&lt;/a&gt;.</source>
          <target state="translated">有关孤立规则设计的信息，请参阅&lt;a href=&quot;https://rust-lang.github.io/rfcs/2451-re-rebalancing-coherence.html&quot;&gt;RFC 2451&lt;/a&gt;和&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md&quot;&gt;RFC 1023&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="225b6b46a542b54e86029105be58c6f2b15b07b2" translate="yes" xml:space="preserve">
          <source>For instance, if the receiver has type &lt;code&gt;Box&amp;lt;[i32;2]&amp;gt;&lt;/code&gt;, then the candidate types will be &lt;code&gt;Box&amp;lt;[i32;2]&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;amp;Box&amp;lt;[i32;2]&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;amp;mut Box&amp;lt;[i32;2]&amp;gt;&lt;/code&gt;, &lt;code&gt;[i32; 2]&lt;/code&gt; (by dereferencing), &lt;code&gt;&amp;amp;[i32; 2]&lt;/code&gt;, &lt;code&gt;&amp;amp;mut [i32; 2]&lt;/code&gt;, &lt;code&gt;[i32]&lt;/code&gt; (by unsized coercion), &lt;code&gt;&amp;amp;[i32]&lt;/code&gt;, and finally &lt;code&gt;&amp;amp;mut [i32]&lt;/code&gt;.</source>
          <target state="translated">例如，如果接收方的类型为 &lt;code&gt;Box&amp;lt;[i32;2]&amp;gt;&lt;/code&gt; ，则候选类型将为 &lt;code&gt;Box&amp;lt;[i32;2]&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;amp;Box&amp;lt;[i32;2]&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;amp;mut Box&amp;lt;[i32;2]&amp;gt;&lt;/code&gt; ， &lt;code&gt;[i32; 2]&lt;/code&gt; （通过取消引用）， &lt;code&gt;&amp;amp;[i32; 2]&lt;/code&gt; ， &lt;code&gt;&amp;amp;mut [i32; 2]&lt;/code&gt; ， &lt;code&gt;[i32]&lt;/code&gt; （通过大小强制转换）， &lt;code&gt;&amp;amp;[i32]&lt;/code&gt; ，最后是 &lt;code&gt;&amp;amp;mut [i32]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2cd16941ca5e3ae0d133c47349cf0b4a2aebe81d" translate="yes" xml:space="preserve">
          <source>For instance, you cannot &lt;a href=&quot;../io/trait.read&quot;&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; into an uninitialized buffer:</source>
          <target state="translated">例如，您不能&lt;a href=&quot;../io/trait.read&quot;&gt; &lt;code&gt;Read&lt;/code&gt; &lt;/a&gt;入未初始化的缓冲区：</target>
        </trans-unit>
        <trans-unit id="baaaebe339d6ce17ed6cfc031733bf141b61b1fd" translate="yes" xml:space="preserve">
          <source>For integral types, this is ignored.</source>
          <target state="translated">对于积分类型,这一点会被忽略。</target>
        </trans-unit>
        <trans-unit id="6b107823eaed82b9e1f15dcd767296d37bccac20" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;#method.match_indices&quot;&gt;&lt;code&gt;match_indices&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">为了从前面进行迭代，可以使用&lt;a href=&quot;#method.match_indices&quot;&gt; &lt;code&gt;match_indices&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="d88445f2a62566b0d770ee0bdb5ade912a95ab77" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;#method.matches&quot;&gt;&lt;code&gt;matches&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">为了从前面进行迭代，可以使用&lt;a href=&quot;#method.matches&quot;&gt; &lt;code&gt;matches&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="b7f9b888e8aa5560f84815a010ccb71f10239c27" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;#method.split&quot;&gt;&lt;code&gt;split&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">为了从前面进行迭代，可以使用&lt;a href=&quot;#method.split&quot;&gt; &lt;code&gt;split&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="e0637745021a8ec9092d57748f466adfb249ea99" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;#method.split_terminator&quot;&gt;&lt;code&gt;split_terminator&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">为了从前面进行迭代，可以使用&lt;a href=&quot;#method.split_terminator&quot;&gt; &lt;code&gt;split_terminator&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="1e9e4dafbc9ce6c65b15e4c57d7f5f65e014a32e" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;../primitive.str#method.match_indices&quot;&gt;&lt;code&gt;match_indices&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">为了从前面进行迭代，可以使用&lt;a href=&quot;../primitive.str#method.match_indices&quot;&gt; &lt;code&gt;match_indices&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="cb60863336a5828341624e45c853be30e7540908" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;../primitive.str#method.matches&quot;&gt;&lt;code&gt;matches&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">为了从前面进行迭代，可以使用&lt;a href=&quot;../primitive.str#method.matches&quot;&gt; &lt;code&gt;matches&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="4e1a5e53ef176500cb5cc5c96f0c172831e17377" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;../primitive.str#method.split&quot;&gt;&lt;code&gt;split&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">为了从前面进行迭代，可以使用&lt;a href=&quot;../primitive.str#method.split&quot;&gt; &lt;code&gt;split&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="8f1664e44bf9c6ccc6fd225330d68f0d37f3ab44" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;../primitive.str#method.split_terminator&quot;&gt;&lt;code&gt;split_terminator&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">为了从前面进行迭代，可以使用&lt;a href=&quot;../primitive.str#method.split_terminator&quot;&gt; &lt;code&gt;split_terminator&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="11475214701d372b10cbf16754495bc1940945f6" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;primitive.str#method.match_indices&quot;&gt;&lt;code&gt;match_indices&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">为了从前面进行迭代，可以使用&lt;a href=&quot;primitive.str#method.match_indices&quot;&gt; &lt;code&gt;match_indices&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="e160ba151777d5c8f04b9b2dbd5d16202c6f385d" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;primitive.str#method.matches&quot;&gt;&lt;code&gt;matches&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">为了从前面进行迭代，可以使用&lt;a href=&quot;primitive.str#method.matches&quot;&gt; &lt;code&gt;matches&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="9e8ad82d7847387c51f38511c2d2151c6a8665e2" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;primitive.str#method.split&quot;&gt;&lt;code&gt;split&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">为了从前面进行迭代，可以使用&lt;a href=&quot;primitive.str#method.split&quot;&gt; &lt;code&gt;split&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="18d8ce67fc7ac86d26b31c3c26679d8b19f654bc" translate="yes" xml:space="preserve">
          <source>For iterating from the front, the &lt;a href=&quot;primitive.str#method.split_terminator&quot;&gt;&lt;code&gt;split_terminator&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">为了从前面进行迭代，可以使用&lt;a href=&quot;primitive.str#method.split_terminator&quot;&gt; &lt;code&gt;split_terminator&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="3e44fb98adc45057811caa8d42750cc0e5fe8aeb" translate="yes" xml:space="preserve">
          <source>For matches of &lt;code&gt;pat&lt;/code&gt; within &lt;code&gt;self&lt;/code&gt; that overlap, only the indices corresponding to the first match are returned.</source>
          <target state="translated">对于 &lt;code&gt;self&lt;/code&gt; 内重叠的 &lt;code&gt;pat&lt;/code&gt; 匹配，仅返回与第一个匹配相对应的索引。</target>
        </trans-unit>
        <trans-unit id="abfb993550ab741f151661d1422d9018d04e9a77" translate="yes" xml:space="preserve">
          <source>For matches of &lt;code&gt;pat&lt;/code&gt; within &lt;code&gt;self&lt;/code&gt; that overlap, only the indices corresponding to the last match are returned.</source>
          <target state="translated">对于重叠的 &lt;code&gt;self&lt;/code&gt; 内的 &lt;code&gt;pat&lt;/code&gt; 匹配，仅返回与最后一个匹配相对应的索引。</target>
        </trans-unit>
        <trans-unit id="30e29f2a7f5a8332281828c6f9dfcd0e797d1dad" translate="yes" xml:space="preserve">
          <source>For method calls, the receiver (&lt;code&gt;self&lt;/code&gt; parameter) can only take advantage of &lt;a href=&quot;#unsized-coercions&quot;&gt;unsized coercions&lt;/a&gt;.</source>
          <target state="translated">对于方法调用，接收方（ &lt;code&gt;self&lt;/code&gt; 参数）只能利用&lt;a href=&quot;#unsized-coercions&quot;&gt;未定大小的强制&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5e2f959308ccc06c3abbb26c45f8c6f0b3f855b0" translate="yes" xml:space="preserve">
          <source>For method calls, the receiver (&lt;code&gt;self&lt;/code&gt; parameter) can only take advantage of &lt;a href=&quot;type-coercions#unsized-coercions&quot;&gt;unsized coercions&lt;/a&gt;.</source>
          <target state="translated">对于方法调用，接收方（ &lt;code&gt;self&lt;/code&gt; 参数）只能利用&lt;a href=&quot;type-coercions#unsized-coercions&quot;&gt;未定大小的强制&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bd5dd94d6e8475bf5fd070eb97a21cb66eb1d253" translate="yes" xml:space="preserve">
          <source>For more about tuples, see &lt;a href=&quot;../book/ch03-02-data-types#the-tuple-type&quot;&gt;the book&lt;/a&gt;.</source>
          <target state="translated">有关元组的更多信息，请参见&lt;a href=&quot;../book/ch03-02-data-types#the-tuple-type&quot;&gt;本书&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8eb606573f263490abda0eae447840de1fd6312f" translate="yes" xml:space="preserve">
          <source>For more detail on &lt;code&gt;const&lt;/code&gt;, see the &lt;a href=&quot;../book/ch03-01-variables-and-mutability#differences-between-variables-and-constants&quot;&gt;Rust Book&lt;/a&gt; or the &lt;a href=&quot;../reference/items/constant-items&quot;&gt;Reference&lt;/a&gt;</source>
          <target state="translated">有关 &lt;code&gt;const&lt;/code&gt; 的更多详细信息，请参见&lt;a href=&quot;../book/ch03-01-variables-and-mutability#differences-between-variables-and-constants&quot;&gt;Rust Book&lt;/a&gt;或&lt;a href=&quot;../reference/items/constant-items&quot;&gt;Reference&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="34901312029c002d808f1bf7b19bb2453b8fe980" translate="yes" xml:space="preserve">
          <source>For more detail on &lt;code&gt;const&lt;/code&gt;, see the &lt;a href=&quot;../book/ch03-01-variables-and-mutability#differences-between-variables-and-constants&quot;&gt;Rust Book&lt;/a&gt; or the &lt;a href=&quot;../reference/items/constant-items&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">有关 &lt;code&gt;const&lt;/code&gt; 的更多详细信息，请参见&lt;a href=&quot;../book/ch03-01-variables-and-mutability#differences-between-variables-and-constants&quot;&gt;Rust Book&lt;/a&gt;或&lt;a href=&quot;../reference/items/constant-items&quot;&gt;Reference&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4e291c473e6cc9b335b99368f64cbc1d71a0d4c0" translate="yes" xml:space="preserve">
          <source>For more detail, see the &lt;a href=&quot;macro-ambiguity&quot;&gt;formal specification&lt;/a&gt;.</source>
          <target state="translated">有关更多详细信息，请参见&lt;a href=&quot;macro-ambiguity&quot;&gt;正式规范&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="22cc9134960646cae2e564ac06646cd0ebd7a8d6" translate="yes" xml:space="preserve">
          <source>For more details consult the &lt;a href=&quot;../reference/expressions/loop-expr#break-expressions&quot;&gt;Reference on &quot;break expression&quot;&lt;/a&gt; and the &lt;a href=&quot;../reference/expressions/loop-expr#break-and-loop-values&quot;&gt;Reference on &quot;break and loop values&quot;&lt;/a&gt;.</source>
          <target state="translated">欲了解更多详情，请咨询在&lt;a href=&quot;../reference/expressions/loop-expr#break-expressions&quot;&gt;上&amp;ldquo;破发表达&amp;rdquo;参考&lt;/a&gt;和&lt;a href=&quot;../reference/expressions/loop-expr#break-and-loop-values&quot;&gt;关于&amp;ldquo;破环价值&amp;rdquo;参考&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2a550b344fcc2f00c8b16595ecc991ab71ffaa66" translate="yes" xml:space="preserve">
          <source>For more details, see the respective documentation of each item in the list.</source>
          <target state="translated">更多详情,请参见列表中各项目的相关文件。</target>
        </trans-unit>
        <trans-unit id="8026e54bc7efbcbe76562e4e5409a24d75961350" translate="yes" xml:space="preserve">
          <source>For more details, see the traits &lt;a href=&quot;trait.pattern&quot;&gt;&lt;code&gt;Pattern&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;trait.searcher&quot;&gt;&lt;code&gt;Searcher&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;trait.reversesearcher&quot;&gt;&lt;code&gt;ReverseSearcher&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;trait.doubleendedsearcher&quot;&gt;&lt;code&gt;DoubleEndedSearcher&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关更多详细信息，请参见特征&lt;a href=&quot;trait.pattern&quot;&gt; &lt;code&gt;Pattern&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;trait.searcher&quot;&gt; &lt;code&gt;Searcher&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;trait.reversesearcher&quot;&gt; &lt;code&gt;ReverseSearcher&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;trait.doubleendedsearcher&quot;&gt; &lt;code&gt;DoubleEndedSearcher&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0c2fb50eba7ae83c8f13df4bd900c89c668818e9" translate="yes" xml:space="preserve">
          <source>For more details, see the traits [&lt;code&gt;Pattern&lt;/code&gt;], [&lt;code&gt;Searcher&lt;/code&gt;], [&lt;code&gt;ReverseSearcher&lt;/code&gt;], and [&lt;code&gt;DoubleEndedSearcher&lt;/code&gt;].</source>
          <target state="translated">有关详细信息，请参阅特征[ &lt;code&gt;Pattern&lt;/code&gt; ]，[ &lt;code&gt;Searcher&lt;/code&gt; ]，[ &lt;code&gt;ReverseSearcher&lt;/code&gt; ]和[ &lt;code&gt;DoubleEndedSearcher&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="89263bf3e6beb75e4571e90b66b3c70d0427828c" translate="yes" xml:space="preserve">
          <source>For more details, the &lt;a href=&quot;https://doc.rust-lang.org/stable/edition-guide/index.html&quot;&gt;&lt;em&gt;Edition Guide&lt;/em&gt;&lt;/a&gt; is a complete book about editions that enumerates the differences between editions and explains how to automatically upgrade your code to a new edition via &lt;code&gt;cargo fix&lt;/code&gt;.</source>
          <target state="translated">有关更多详细信息，《&lt;a href=&quot;https://doc.rust-lang.org/stable/edition-guide/index.html&quot;&gt;&lt;em&gt;版本指南》&lt;/em&gt;&lt;/a&gt;是一本有关版本的完整书籍，其中列举了各个版本之间的差异，并说明了如何通过 &lt;code&gt;cargo fix&lt;/code&gt; 自动将代码升级到新版本。</target>
        </trans-unit>
        <trans-unit id="e6e6c205cbf7db8578d92757926cdfff233ef1ca" translate="yes" xml:space="preserve">
          <source>For more details, visit &lt;a href=&quot;../../book/ch15-02-deref&quot;&gt;the chapter in &lt;em&gt;The Rust Programming Language&lt;/em&gt;&lt;/a&gt; as well as the reference sections on &lt;a href=&quot;../../reference/expressions/operator-expr#the-dereference-operator&quot;&gt;the dereference operator&lt;/a&gt;, &lt;a href=&quot;../../reference/expressions/method-call-expr&quot;&gt;method resolution&lt;/a&gt; and &lt;a href=&quot;../../reference/type-coercions&quot;&gt;type coercions&lt;/a&gt;.</source>
          <target state="translated">有关更多详细信息，请访问&lt;a href=&quot;../../book/ch15-02-deref&quot;&gt;&lt;em&gt;The Rust Programming Language中&lt;/em&gt;&lt;/a&gt;的章节&lt;em&gt;&lt;/em&gt;以及有关&lt;a href=&quot;../../reference/expressions/operator-expr#the-dereference-operator&quot;&gt;解除引用运算符&lt;/a&gt;，&lt;a href=&quot;../../reference/expressions/method-call-expr&quot;&gt;方法解析&lt;/a&gt;和&lt;a href=&quot;../../reference/type-coercions&quot;&gt;类型强制&lt;/a&gt;的参考部分。</target>
        </trans-unit>
        <trans-unit id="c7b389f333511523f6507959ed7a6c82c5ac6a24" translate="yes" xml:space="preserve">
          <source>For more information about &lt;a href=&quot;book/ch03-02-data-types&quot;&gt;primitives&lt;/a&gt; and &lt;a href=&quot;book/ch05-00-structs&quot;&gt;structs&lt;/a&gt;, take a look at the Book.</source>
          <target state="translated">有关&lt;a href=&quot;book/ch03-02-data-types&quot;&gt;基元&lt;/a&gt;和&lt;a href=&quot;book/ch05-00-structs&quot;&gt;结构的&lt;/a&gt;更多信息，请看一本书。</target>
        </trans-unit>
        <trans-unit id="cc5cd9e3e865afa46a350086d1b1c96c19d01d7c" translate="yes" xml:space="preserve">
          <source>For more information about Cargo, check out &lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;its documentation&lt;/a&gt;.</source>
          <target state="translated">有关Cargo的更多信息，请查阅&lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;其文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fa0a4fd36684df6f8397d7fa9786ae835418c592" translate="yes" xml:space="preserve">
          <source>For more information about associated types, see &lt;a href=&quot;book/ch19-03-advanced-traits#specifying-placeholder-types-in-trait-definitions-with-associated-types&quot;&gt;the book&lt;/a&gt;. For more information on associated type bounds, see &lt;a href=&quot;https://rust-lang.github.io/rfcs/2289-associated-type-bounds.html&quot;&gt;RFC 2289&lt;/a&gt;.</source>
          <target state="translated">有关关联类型的更多信息，请参见&lt;a href=&quot;book/ch19-03-advanced-traits#specifying-placeholder-types-in-trait-definitions-with-associated-types&quot;&gt;本书&lt;/a&gt;。有关关联的类型范围的更多信息，请参见&lt;a href=&quot;https://rust-lang.github.io/rfcs/2289-associated-type-bounds.html&quot;&gt;RFC 2289&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e8da00a231113177386f7e47cc0a2389ab7cc277" translate="yes" xml:space="preserve">
          <source>For more information about casts, take a look at the Type cast section in &lt;a href=&quot;reference/expressions/operator-expr#type-cast-expressions&quot;&gt;The Reference Book&lt;/a&gt;.</source>
          <target state="translated">有关强制类型转换的更多信息，请参阅&lt;a href=&quot;reference/expressions/operator-expr#type-cast-expressions&quot;&gt;《参考书》&lt;/a&gt;中的&amp;ldquo;类型强制转换&amp;rdquo;部分。</target>
        </trans-unit>
        <trans-unit id="6cd0c62441350987a4762127fe18207f874a343a" translate="yes" xml:space="preserve">
          <source>For more information about named threads, see &lt;a href=&quot;index#naming-threads&quot;&gt;this module-level documentation&lt;/a&gt;.</source>
          <target state="translated">有关命名线程的更多信息，请参见此&lt;a href=&quot;index#naming-threads&quot;&gt;模块级文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="102d4511f19624e4e594eba5e2a713f736f94403" translate="yes" xml:space="preserve">
          <source>For more information about primitives and structs, take a look at The Book: https://doc.rust-lang.org/book/ch03-02-data-types.html https://doc.rust-lang.org/book/ch05-00-structs.html</source>
          <target state="translated">有关基元和结构的更多信息,请看书:https://doc.rust-lang.org/book/ch03-02-data-types.html https://doc.rust-lang.org/book/ch05-00-structs.html。</target>
        </trans-unit>
        <trans-unit id="c3bf4058fb0bfe3a7675bbb543b62e5dee4c6887" translate="yes" xml:space="preserve">
          <source>For more information about specifying representations, see the &lt;a href=&quot;https://doc.rust-lang.org/nomicon/other-reprs.html&quot;&gt;&quot;Alternative Representations&quot; section&lt;/a&gt; of the Rustonomicon.</source>
          <target state="translated">有关指定表示形式的更多信息，请参见Rustonomicon 的&lt;a href=&quot;https://doc.rust-lang.org/nomicon/other-reprs.html&quot;&gt;&amp;ldquo;其他表示形式&amp;rdquo;部分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8bd1cbeb47b7decd82b7fd7ecf8bae1087ce674f" translate="yes" xml:space="preserve">
          <source>For more information about the &lt;code&gt;cfg&lt;/code&gt; attribute, read the section on &lt;a href=&quot;reference/conditional-compilation&quot;&gt;Conditional Compilation&lt;/a&gt; in the Reference.</source>
          <target state="translated">有关 &lt;code&gt;cfg&lt;/code&gt; 属性的更多信息，请阅读《参考》中的&amp;ldquo;&lt;a href=&quot;reference/conditional-compilation&quot;&gt;条件编译&lt;/a&gt;&amp;rdquo;部分。</target>
        </trans-unit>
        <trans-unit id="4442c14c85c92ae0273cf16c727092964e793917" translate="yes" xml:space="preserve">
          <source>For more information about the cfg attribute, read: https://doc.rust-lang.org/reference.html#conditional-compilation</source>
          <target state="translated">关于cfg属性的更多信息,请阅读:https://doc.rust-lang.org/reference.html#conditional-compilation。</target>
        </trans-unit>
        <trans-unit id="992fc2eeb08dc25782d2fddc6c0b6015bc376de5" translate="yes" xml:space="preserve">
          <source>For more information about the inline attribute, https: read://doc.rust-lang.org/reference.html#inline-attributes</source>
          <target state="translated">关于内联属性的更多信息,https:read://doc.rust-lang.org/reference.html#inline-attributes。</target>
        </trans-unit>
        <trans-unit id="9db48592ab4095960e3e44f8b09079a0c0259f44" translate="yes" xml:space="preserve">
          <source>For more information about the inline attribute, read: https://doc.rust-lang.org/reference.html#inline-attributes</source>
          <target state="translated">关于内联属性的更多信息,请阅读:https://doc.rust-lang.org/reference.html#inline-attributes。</target>
        </trans-unit>
        <trans-unit id="cfa646f3fb3a336d8ee248174c90b109ddf1ff5a" translate="yes" xml:space="preserve">
          <source>For more information about the particulars of how the path is separated into components, see &lt;a href=&quot;#method.components&quot;&gt;&lt;code&gt;components&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关如何将路径分离为多个组件的详细信息，请参阅&lt;a href=&quot;#method.components&quot;&gt; &lt;code&gt;components&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d208a7a00016bd80eb36abc405d4d67532f3f3f6" translate="yes" xml:space="preserve">
          <source>For more information about the particulars of how the path is separated into components, see &lt;a href=&quot;struct.path#method.components&quot;&gt;&lt;code&gt;components&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关如何将路径分离为多个组件的详细信息，请参阅&lt;a href=&quot;struct.path#method.components&quot;&gt; &lt;code&gt;components&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cd76571f2b2b3e596e0b9a91b81882353dbf69b8" translate="yes" xml:space="preserve">
          <source>For more information about the stack size for threads, see &lt;a href=&quot;index#stack-size&quot;&gt;this module-level documentation&lt;/a&gt;.</source>
          <target state="translated">有关线程堆栈大小的更多信息，请参见此&lt;a href=&quot;index#stack-size&quot;&gt;模块级文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7fb8ee866c1b39714e1dcfd554e8800ff32ff81a" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;#method.join_multicast_v4&quot;&gt;&lt;code&gt;join_multicast_v4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;#method.join_multicast_v4&quot;&gt; &lt;code&gt;join_multicast_v4&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="57833ee07247599f44cb309fde1124280eb648a4" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;#method.join_multicast_v6&quot;&gt;&lt;code&gt;join_multicast_v6&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;#method.join_multicast_v6&quot;&gt; &lt;code&gt;join_multicast_v6&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3ce681618c57caf981736423d26acc94ae89b21d" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;#method.set_broadcast&quot;&gt;&lt;code&gt;set_broadcast&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;#method.set_broadcast&quot;&gt; &lt;code&gt;set_broadcast&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="395c58ec3f6bc027abde9bbf9fad1f4f5468d568" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;#method.set_multicast_loop_v4&quot;&gt;&lt;code&gt;set_multicast_loop_v4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;#method.set_multicast_loop_v4&quot;&gt; &lt;code&gt;set_multicast_loop_v4&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="19a25d5021da7a65fa90afdcaa8c94b2d240f4ea" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;#method.set_multicast_loop_v6&quot;&gt;&lt;code&gt;set_multicast_loop_v6&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;#method.set_multicast_loop_v6&quot;&gt; &lt;code&gt;set_multicast_loop_v6&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="df749fde579be395be3ce58123ceffc9653388c3" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;#method.set_multicast_ttl_v4&quot;&gt;&lt;code&gt;set_multicast_ttl_v4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;#method.set_multicast_ttl_v4&quot;&gt; &lt;code&gt;set_multicast_ttl_v4&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6c0d794b98dbf3eac083b7075a715bd37c850949" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;#method.set_nodelay&quot;&gt;&lt;code&gt;set_nodelay&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;#method.set_nodelay&quot;&gt; &lt;code&gt;set_nodelay&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f6e7cb5f78e58ab89345b5ca811fb23b56f9162d" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;#method.set_ttl&quot;&gt;&lt;code&gt;set_ttl&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;#method.set_ttl&quot;&gt; &lt;code&gt;set_ttl&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2a394bc2e818a902cb20ef60be1aacfb5b6bed5f" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.tcplistener#method.set_ttl&quot;&gt;&lt;code&gt;TcpListener::set_ttl&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;struct.tcplistener#method.set_ttl&quot;&gt; &lt;code&gt;TcpListener::set_ttl&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4aa7c5c36f089ee6dcc230b22a43e81dfd29e6b2" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.tcpstream#method.set_nodelay&quot;&gt;&lt;code&gt;TcpStream::set_nodelay&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;struct.tcpstream#method.set_nodelay&quot;&gt; &lt;code&gt;TcpStream::set_nodelay&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5f687f34df5c1fceb0c2f349452aeb54b4703e77" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.tcpstream#method.set_ttl&quot;&gt;&lt;code&gt;TcpStream::set_ttl&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;struct.tcpstream#method.set_ttl&quot;&gt; &lt;code&gt;TcpStream::set_ttl&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9e3059868c3caa8fd899a2dfbced1ef7fac82dec" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.udpsocket#method.join_multicast_v4&quot;&gt;&lt;code&gt;UdpSocket::join_multicast_v4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;struct.udpsocket#method.join_multicast_v4&quot;&gt; &lt;code&gt;UdpSocket::join_multicast_v4&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a3a6b546e03443d3c886b47248d82d04304e9248" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.udpsocket#method.join_multicast_v6&quot;&gt;&lt;code&gt;UdpSocket::join_multicast_v6&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;struct.udpsocket#method.join_multicast_v6&quot;&gt; &lt;code&gt;UdpSocket::join_multicast_v6&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8976685aa3713d913257de37c43c4da5f4633071" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.udpsocket#method.set_broadcast&quot;&gt;&lt;code&gt;UdpSocket::set_broadcast&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;struct.udpsocket#method.set_broadcast&quot;&gt; &lt;code&gt;UdpSocket::set_broadcast&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="07036701bb4372022b206f78e36755f596630148" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.udpsocket#method.set_multicast_loop_v4&quot;&gt;&lt;code&gt;UdpSocket::set_multicast_loop_v4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;struct.udpsocket#method.set_multicast_loop_v4&quot;&gt; &lt;code&gt;UdpSocket::set_multicast_loop_v4&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="35ff8940232500740f176ac52d9cff14d41ab14b" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.udpsocket#method.set_multicast_loop_v6&quot;&gt;&lt;code&gt;UdpSocket::set_multicast_loop_v6&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;struct.udpsocket#method.set_multicast_loop_v6&quot;&gt; &lt;code&gt;UdpSocket::set_multicast_loop_v6&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4078ff38e27b60f80025612aee1ce51e84fa1526" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.udpsocket#method.set_multicast_ttl_v4&quot;&gt;&lt;code&gt;UdpSocket::set_multicast_ttl_v4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;struct.udpsocket#method.set_multicast_ttl_v4&quot;&gt; &lt;code&gt;UdpSocket::set_multicast_ttl_v4&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ec0b5493666a5b9737f7e29ab01f3a736aa6fac1" translate="yes" xml:space="preserve">
          <source>For more information about this option, see &lt;a href=&quot;struct.udpsocket#method.set_ttl&quot;&gt;&lt;code&gt;UdpSocket::set_ttl&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此选项的更多信息，请参见&lt;a href=&quot;struct.udpsocket#method.set_ttl&quot;&gt; &lt;code&gt;UdpSocket::set_ttl&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d5fe57c8b77795ff593ae38ee9a6c491d030bcba" translate="yes" xml:space="preserve">
          <source>For more information about type casts, take a look at the section of the &lt;a href=&quot;reference/expressions/operator-expr#type-cast-expressions&quot;&gt;The Rust Reference&lt;/a&gt; on type cast expressions.</source>
          <target state="translated">有关类型转换的更多信息，请&lt;a href=&quot;reference/expressions/operator-expr#type-cast-expressions&quot;&gt;参见&amp;ldquo;锈参考&amp;rdquo;中&lt;/a&gt;有关类型转换表达式的部分。</target>
        </trans-unit>
        <trans-unit id="a26525f8ef356116ef471c0be5406f813dea377a" translate="yes" xml:space="preserve">
          <source>For more information and a list of supported ABIs, see &lt;a href=&quot;https://doc.rust-lang.org/nomicon/ffi.html#foreign-calling-conventions&quot;&gt;the nomicon's section on foreign calling conventions&lt;/a&gt;.</source>
          <target state="translated">有关更多信息和受支持的ABI列表，请参阅&lt;a href=&quot;https://doc.rust-lang.org/nomicon/ffi.html#foreign-calling-conventions&quot;&gt;nomicon的有关外部调用约定的部分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="16217596c793a9bbadfbe3ea0e828a9914e8bd03" translate="yes" xml:space="preserve">
          <source>For more information and a list of supported ABIs, see [the nomicon's section on foreign calling conventions][nomicon-abi].</source>
          <target state="translated">有关更多信息和支持的ABI列表,请参见[nomicon的国外呼叫公约部分][nomicon-abi]。</target>
        </trans-unit>
        <trans-unit id="d5bf128360e21745d96296482aa04348caf9fa97" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;if&lt;/code&gt; expressions, see the &lt;a href=&quot;../book/ch03-05-control-flow#if-expressions&quot;&gt;Rust book&lt;/a&gt; or the &lt;a href=&quot;../reference/expressions/if-expr&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">有关 &lt;code&gt;if&lt;/code&gt; 表达式的更多信息，请参见&lt;a href=&quot;../book/ch03-05-control-flow#if-expressions&quot;&gt;Rust书&lt;/a&gt;或&lt;a href=&quot;../reference/expressions/if-expr&quot;&gt;Reference&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="26c4f344d22bc81326bce9f0d84393a6ba5329dd" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;impl Trait&lt;/code&gt; syntax, see the &lt;a href=&quot;../book/ch10-02-traits#returning-types-that-implement-traits&quot;&gt;Rust book&lt;/a&gt;.</source>
          <target state="translated">有关 &lt;code&gt;impl Trait&lt;/code&gt; 语法的更多信息，请参见&lt;a href=&quot;../book/ch10-02-traits#returning-types-that-implement-traits&quot;&gt;Rust书&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8baad10e10ead72e523430c806f5046d53166956" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;loop&lt;/code&gt; and loops in general, see the &lt;a href=&quot;../reference/expressions/loop-expr&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">有关一般 &lt;code&gt;loop&lt;/code&gt; 更多信息，请参见《&lt;a href=&quot;../reference/expressions/loop-expr&quot;&gt;参考》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0d9e2e99793fab9dd3626d998768ee865c474bfd" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;match&lt;/code&gt; and matching in general, see the &lt;a href=&quot;../reference/expressions/match-expr&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">有关 &lt;code&gt;match&lt;/code&gt; 和一般匹配的更多信息，请参见《&lt;a href=&quot;../reference/expressions/match-expr&quot;&gt;参考》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0710e2e1ea383271033954b11a70c7bad7ea2cb4" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;use&lt;/code&gt; and paths in general, see the &lt;a href=&quot;../reference/items/use-declarations&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">有关一般 &lt;code&gt;use&lt;/code&gt; 和路径的更多信息，请参见《&lt;a href=&quot;../reference/items/use-declarations&quot;&gt;参考》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e3d8b3ebb20cee3aad696e4716ebdeb83e61bc82" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;while&lt;/code&gt; and loops in general, see the &lt;a href=&quot;../reference/expressions/loop-expr#predicate-loops&quot;&gt;reference&lt;/a&gt;.</source>
          <target state="translated">有关一般的 &lt;code&gt;while&lt;/code&gt; 和loop的更多信息，请参见&lt;a href=&quot;../reference/expressions/loop-expr#predicate-loops&quot;&gt;参考资料&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f290aa363db2393559b1506887c6b8507f90da13" translate="yes" xml:space="preserve">
          <source>For more information on Clippy, see &lt;a href=&quot;https://github.com/rust-lang/rust-clippy&quot;&gt;its documentation&lt;/a&gt;.</source>
          <target state="translated">有关Clippy的更多信息，请参&lt;a href=&quot;https://github.com/rust-lang/rust-clippy&quot;&gt;见其文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="38db950fcbbf4fcba31dce2f10974dd6a5fef98a" translate="yes" xml:space="preserve">
          <source>For more information on FFI, check the &lt;a href=&quot;../book/ch19-01-unsafe-rust#using-extern-functions-to-call-external-code&quot;&gt;Rust book&lt;/a&gt; or the &lt;a href=&quot;../reference/items/external-blocks&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">有关FFI的更多信息，请参阅&lt;a href=&quot;../book/ch19-01-unsafe-rust#using-extern-functions-to-call-external-code&quot;&gt;Rust书&lt;/a&gt;或&lt;a href=&quot;../reference/items/external-blocks&quot;&gt;参考书&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d641d6c32a05462a1486b1dc6324213dda8812b9" translate="yes" xml:space="preserve">
          <source>For more information on Rust's ownership system, take a look at the &lt;a href=&quot;book/ch04-02-references-and-borrowing&quot;&gt;References &amp;amp; Borrowing&lt;/a&gt; section of the Book.</source>
          <target state="translated">有关Rust的所有权系统的更多信息，请&lt;a href=&quot;book/ch04-02-references-and-borrowing&quot;&gt;参见《参考书目与借款》&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="285f1b877490199173d757dddff730450bb4b01f" translate="yes" xml:space="preserve">
          <source>For more information on floating point numbers, see &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-precision_floating-point_format&quot;&gt;Wikipedia&lt;/a&gt;.</source>
          <target state="translated">有关浮点数的更多信息，请参见&lt;a href=&quot;https://en.wikipedia.org/wiki/Single-precision_floating-point_format&quot;&gt;Wikipedia&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ee24777d534cc43d3f116683cebd1988effa8023" translate="yes" xml:space="preserve">
          <source>For more information on for-loops, see the &lt;a href=&quot;../book/ch03-05-control-flow#looping-through-a-collection-with-for&quot;&gt;Rust book&lt;/a&gt; or the &lt;a href=&quot;../reference/expressions/loop-expr#iterator-loops&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">有关for循环的更多信息，请参见&lt;a href=&quot;../book/ch03-05-control-flow#looping-through-a-collection-with-for&quot;&gt;Rust书&lt;/a&gt;或&lt;a href=&quot;../reference/expressions/loop-expr#iterator-loops&quot;&gt;参考书&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a24996038d4cee454655450978dea7d8a2b46904" translate="yes" xml:space="preserve">
          <source>For more information on formatters, see &lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt;the module-level documentation&lt;/a&gt;.</source>
          <target state="translated">有关格式化程序的更多信息，请参见&lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt;模块级文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="53ad00a80543ba5ff60480a82f25b9b9fc2fe15a" translate="yes" xml:space="preserve">
          <source>For more information on formatters, see &lt;a href=&quot;index&quot;&gt;the module-level documentation&lt;/a&gt;.</source>
          <target state="translated">有关格式化程序的更多信息，请参见&lt;a href=&quot;index&quot;&gt;模块级文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff3812b259ec258484f134f2413ea468207c8e57" translate="yes" xml:space="preserve">
          <source>For more information on how to use references, see &lt;a href=&quot;../book/ch04-02-references-and-borrowing&quot;&gt;the book's section on &quot;References and Borrowing&quot;&lt;/a&gt;.</source>
          <target state="translated">有关如何使用引用的更多信息，请参见&lt;a href=&quot;../book/ch04-02-references-and-borrowing&quot;&gt;本书的&amp;ldquo;引用和借阅&amp;rdquo;部分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ab47fbe22d48e3b8af90238a1671382c62540270" translate="yes" xml:space="preserve">
          <source>For more information on implementations, see the &lt;a href=&quot;../book/ch05-03-method-syntax&quot;&gt;Rust book&lt;/a&gt; or the &lt;a href=&quot;../reference/items/implementations&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">有关实现的更多信息，请参见&lt;a href=&quot;../book/ch05-03-method-syntax&quot;&gt;Rust书&lt;/a&gt;或&lt;a href=&quot;../reference/items/implementations&quot;&gt;参考书&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cd2bcc840b6d179d8b0cd5dcc59be377dcf31780" translate="yes" xml:space="preserve">
          <source>For more information on structs, take a look at the &lt;a href=&quot;../book/ch05-01-defining-structs&quot;&gt;Rust Book&lt;/a&gt; or the &lt;a href=&quot;../reference/items/structs&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">有关结构的更多信息，请参阅&lt;a href=&quot;../book/ch05-01-defining-structs&quot;&gt;Rust Book&lt;/a&gt;或&lt;a href=&quot;../reference/items/structs&quot;&gt;Reference&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5ce49c995bb1152375ebd2c5ecd45128ba41cc83" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;code&gt;let&lt;/code&gt; keyword, see the &lt;a href=&quot;../book/ch18-01-all-the-places-for-patterns#let-statements&quot;&gt;Rust book&lt;/a&gt; or the &lt;a href=&quot;../reference/statements#let-statements&quot;&gt;Reference&lt;/a&gt;</source>
          <target state="translated">有关 &lt;code&gt;let&lt;/code&gt; 关键字的更多信息，请参见&lt;a href=&quot;../book/ch18-01-all-the-places-for-patterns#let-statements&quot;&gt;Rust书&lt;/a&gt;或&lt;a href=&quot;../reference/statements#let-statements&quot;&gt;参考书。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="55f4ff0283f817ff45a08f2d5b8976730a7bb67c" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;code&gt;move&lt;/code&gt; keyword, see the &lt;a href=&quot;../book/ch13-01-closures&quot;&gt;closure&lt;/a&gt;'s section of the Rust book or the &lt;a href=&quot;../book/ch16-01-threads#using-move-closures-with-threads&quot;&gt;threads&lt;/a&gt; section</source>
          <target state="translated">有关 &lt;code&gt;move&lt;/code&gt; 关键字的更多信息，请参见Rust本书的&lt;a href=&quot;../book/ch13-01-closures&quot;&gt;闭包&lt;/a&gt;部分或&lt;a href=&quot;../book/ch16-01-threads#using-move-closures-with-threads&quot;&gt;线程&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="5404b7f8ed3a8699d7f7e7b750cd0c12cdb64a72" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;code&gt;pub&lt;/code&gt; keyword, please see the visibility section of the &lt;a href=&quot;../reference/visibility-and-privacy?highlight=pub#visibility-and-privacy&quot;&gt;reference&lt;/a&gt; and for some examples, see &lt;a href=&quot;https://doc.rust-lang.org/rust-by-example/mod/visibility.html&quot;&gt;Rust by Example&lt;/a&gt;.</source>
          <target state="translated">有关 &lt;code&gt;pub&lt;/code&gt; 关键字的更多信息，请参见&lt;a href=&quot;../reference/visibility-and-privacy?highlight=pub#visibility-and-privacy&quot;&gt;参考资料&lt;/a&gt;的可见性部分，有关示例，请参见&lt;a href=&quot;https://doc.rust-lang.org/rust-by-example/mod/visibility.html&quot;&gt;Rust by Example&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3cc632ff0cf0c0731c6a179ab2eab0a11d96c7a4" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;code&gt;rls&lt;/code&gt;, see &lt;a href=&quot;https://github.com/rust-lang/rls&quot;&gt;its documentation&lt;/a&gt;.</source>
          <target state="translated">有关 &lt;code&gt;rls&lt;/code&gt; 更多信息，请参&lt;a href=&quot;https://github.com/rust-lang/rls&quot;&gt;见其文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e3863c21d325c3c3d855add8a948767200d6c9d5" translate="yes" xml:space="preserve">
          <source>For more information on the effect of async, see &lt;a href=&quot;../expressions/block-expr#async-blocks&quot;&gt;&lt;code&gt;async&lt;/code&gt; blocks&lt;/a&gt;.</source>
          <target state="translated">有关异步效果的更多信息，请参见&lt;a href=&quot;../expressions/block-expr#async-blocks&quot;&gt; &lt;code&gt;async&lt;/code&gt; 块&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b5291eb6d53f544698352ae404ca44de78b99df0" translate="yes" xml:space="preserve">
          <source>For more information on the meaning and layout of the &lt;code&gt;flowinfo&lt;/code&gt; and &lt;code&gt;scope_id&lt;/code&gt; parameters, see &lt;a href=&quot;https://tools.ietf.org/html/rfc2553#section-3.3&quot;&gt;IETF RFC 2553, Section 3.3&lt;/a&gt;.</source>
          <target state="translated">有关 &lt;code&gt;flowinfo&lt;/code&gt; 和 &lt;code&gt;scope_id&lt;/code&gt; 参数的含义和布局的更多信息，请参见&lt;a href=&quot;https://tools.ietf.org/html/rfc2553#section-3.3&quot;&gt;IETF RFC 2553，第3.3节&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e9e3e7095c9863573782cdbe8dd1a7bbcbf2fb4f" translate="yes" xml:space="preserve">
          <source>For more information on the rust ownership system, take a look at https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html.</source>
          <target state="translated">想了解更多关于锈蚀所有权制度的信息,可以看看https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html。</target>
        </trans-unit>
        <trans-unit id="dd65d29db2c0c0e3fa4010b1a534ac28777bc593" translate="yes" xml:space="preserve">
          <source>For more information on the various types of functions and how they're used, consult the &lt;a href=&quot;../book/ch03-03-how-functions-work&quot;&gt;Rust book&lt;/a&gt; or the &lt;a href=&quot;../reference/items/functions&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">有关各种类型的函数以及如何使用它们的更多信息，请参阅&lt;a href=&quot;../book/ch03-03-how-functions-work&quot;&gt;Rust手册&lt;/a&gt;或&lt;a href=&quot;../reference/items/functions&quot;&gt;Reference&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ba53489dfe57a910985fb20af8e3e6d3e80de7b1" translate="yes" xml:space="preserve">
          <source>For more information on what &lt;code&gt;as&lt;/code&gt; is capable of, see the &lt;a href=&quot;../reference/expressions/operator-expr#type-cast-expressions&quot;&gt;Reference&lt;/a&gt;</source>
          <target state="translated">关于什么的更多信息 &lt;code&gt;as&lt;/code&gt; 能够见&lt;a href=&quot;../reference/expressions/operator-expr#type-cast-expressions&quot;&gt;参考&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="200342727dbc618ada8e648e6bb5b49b50685bf3" translate="yes" xml:space="preserve">
          <source>For more information on what &lt;code&gt;as&lt;/code&gt; is capable of, see the &lt;a href=&quot;../reference/expressions/operator-expr#type-cast-expressions&quot;&gt;Reference&lt;/a&gt;.</source>
          <target state="translated">关于什么的更多信息 &lt;code&gt;as&lt;/code&gt; 能够，看到了&lt;a href=&quot;../reference/expressions/operator-expr#type-cast-expressions&quot;&gt;参考&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1294a54cecd68adbf06bcf29dd93bf0d7224b50a" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;https://doc.rust-lang.org/nomicon/atomics.html&quot;&gt;nomicon&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://doc.rust-lang.org/nomicon/atomics.html&quot;&gt;nomicon&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8515ff7c1a2ff91adff1550ef7c0680acfebc183" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;reference/attributes/codegen&quot;&gt;&lt;code&gt;instruction_set&lt;/code&gt; attribute&lt;/a&gt; section of the Reference.</source>
          <target state="translated">有关更多信息，请参见《参考》中的&amp;ldquo; &lt;a href=&quot;reference/attributes/codegen&quot;&gt; &lt;code&gt;instruction_set&lt;/code&gt; 属性&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="2722cfdeb47cf791bc768e784fd872da493e862a" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;reference/attributes/codegen#the-inline-attribute&quot;&gt;&lt;code&gt;inline&lt;/code&gt; Attribute&lt;/a&gt; section of the Reference.</source>
          <target state="translated">有关更多信息，请参见参考的&lt;a href=&quot;reference/attributes/codegen#the-inline-attribute&quot;&gt; &lt;code&gt;inline&lt;/code&gt; 属性&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="430f53d43ce499b5fc6e5944890296c5d6682bce" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;reference/attributes/codegen#the-inline-attribute&quot;&gt;&lt;code&gt;inline&lt;/code&gt; attribute&lt;/a&gt; section of the Reference.</source>
          <target state="translated">有关更多信息，请参见参考中的&lt;a href=&quot;reference/attributes/codegen#the-inline-attribute&quot;&gt; &lt;code&gt;inline&lt;/code&gt; 属性&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="7be2448b1c40c0c0e54b5bb192d0485e421966fb" translate="yes" xml:space="preserve">
          <source>For more information see the Rust Reference on &lt;a href=&quot;reference/visibility-and-privacy&quot;&gt;Visibility&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见有关&lt;a href=&quot;reference/visibility-and-privacy&quot;&gt;可见性&lt;/a&gt;的Rust参考。</target>
        </trans-unit>
        <trans-unit id="8d5d738749a358bd9c9bd1e06a8750768118877d" translate="yes" xml:space="preserve">
          <source>For more information, please see &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0447-no-unused-impl-parameters.md&quot;&gt;RFC 447&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0447-no-unused-impl-parameters.md&quot;&gt;RFC 447&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="81e4e160a9649ee9d3702198e8d0083beee65f16" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;#capacity-and-reallocation&quot;&gt;Capacity and Reallocation&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;#capacity-and-reallocation&quot;&gt;容量和重新分配&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ad517b06e20ad9092f17ffc60fe635ca1c292a27" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md&quot;&gt;RFC 599&lt;/a&gt; and its amendment &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1156-adjust-default-object-bounds.md&quot;&gt;RFC 1156&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md&quot;&gt;RFC 599&lt;/a&gt;及其修订版&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1156-adjust-default-object-bounds.md&quot;&gt;RFC 1156&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9be296727789507d09db0e50484a6ee533f9b657" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://github.com/rust-lang/rust/issues/74052&quot;&gt;GitHub issue #74052&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://github.com/rust-lang/rust/issues/74052&quot;&gt;GitHub Issue＃74052&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="13280a26e699d624818597363ac11248df07682b" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;macro.write&quot;&gt;&lt;code&gt;write!&lt;/code&gt;&lt;/a&gt;. For information on the format string syntax, see &lt;a href=&quot;fmt/index&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;macro.write&quot;&gt; &lt;code&gt;write!&lt;/code&gt; &lt;/a&gt;。有关格式字符串语法的信息，请参见&lt;a href=&quot;fmt/index&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8b67eca63270d5078808d08322ebcadad733aa46" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;macro.write&quot;&gt;&lt;code&gt;write!&lt;/code&gt;&lt;/a&gt;. For information on the format string syntax, see &lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;macro.write&quot;&gt; &lt;code&gt;write!&lt;/code&gt; &lt;/a&gt;。有关格式字符串语法的信息，请参见&lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="105a7b06489677dc75af87ff58131cb813821718" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;type.lockresult&quot;&gt;&lt;code&gt;LockResult&lt;/code&gt;&lt;/a&gt;. A &lt;code&gt;TryLockResult&lt;/code&gt; doesn't necessarily hold the associated guard in the &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; type as the lock may not have been acquired for other reasons.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;type.lockresult&quot;&gt; &lt;code&gt;LockResult&lt;/code&gt; &lt;/a&gt;。一个 &lt;code&gt;TryLockResult&lt;/code&gt; 不一定成立相关的后卫在&lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt;类型的锁可能还未获得其他原因。</target>
        </trans-unit>
        <trans-unit id="061ee0b6c46c6f1de9b553ef8ec0ea2c4506aea3" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;fn.stderr&quot;&gt;&lt;code&gt;io::stderr&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;fn.stderr&quot;&gt; &lt;code&gt;io::stderr&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="2d8d91c96fdfd1707d627d52a81e7ba2e66f436d" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation in &lt;a href=&quot;fmt/index&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;fmt/index&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt;的文档。</target>
        </trans-unit>
        <trans-unit id="b075f87a0aa0ececd35398edb04098f5381d1784" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation in &lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt;&lt;code&gt;std::fmt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://doc.rust-lang.org/core/fmt/index.html&quot;&gt; &lt;code&gt;std::fmt&lt;/code&gt; &lt;/a&gt;的文档。</target>
        </trans-unit>
        <trans-unit id="22b73ddcf768c9c706f3f5ce7c0719488d3f3d0b" translate="yes" xml:space="preserve">
          <source>For more information, take a look at the &lt;a href=&quot;../book/ch06-01-defining-an-enum&quot;&gt;Rust Book&lt;/a&gt; or the &lt;a href=&quot;../reference/items/enumerations&quot;&gt;Reference&lt;/a&gt;</source>
          <target state="translated">有关更多信息，请参阅&lt;a href=&quot;../book/ch06-01-defining-an-enum&quot;&gt;Rust Book&lt;/a&gt;或&lt;a href=&quot;../reference/items/enumerations&quot;&gt;Reference&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1dcd53adc5b18c6de5c84d7a2eea62c7f636c8a4" translate="yes" xml:space="preserve">
          <source>For most filesystems, the operating system guarantees that all writes are atomic: no writes get mangled because another process writes at the same time.</source>
          <target state="translated">对于大多数文件系统来说,操作系统保证所有的写入都是原子性的:不会因为另一个进程在同一时间写入而导致写入混乱。</target>
        </trans-unit>
        <trans-unit id="e69c5be27e4e91243d49f0a635a88ca5efc30bd8" translate="yes" xml:space="preserve">
          <source>For most platforms a backtrace with a filename/line number requires that programs be compiled with debug information. Without debug information filenames/line numbers will not be reported.</source>
          <target state="translated">对于大多数平台来说,带有文件名/行号的回溯要求程序在编译时提供调试信息。如果没有调试信息,文件名/行号将不会被报告。</target>
        </trans-unit>
        <trans-unit id="0c93ed371993f23b715f83d6c14f6a2845f0553e" translate="yes" xml:space="preserve">
          <source>For most situations, having all libraries available as a dylib is recommended if dynamically linking. For other situations, the compiler will emit a warning if it is unable to determine which formats to link each library with.</source>
          <target state="translated">在大多数情况下,如果要动态链接,建议将所有的库都作为dylib来使用。对于其他情况,如果编译器无法确定每个库的链接格式,会发出警告。</target>
        </trans-unit>
        <trans-unit id="f60bc833f920bbe05de763c3c4c66d6c4df0a446" translate="yes" xml:space="preserve">
          <source>For non-numeric types, this can be considered a &quot;maximum width&quot;. If the resulting string is longer than this width, then it is truncated down to this many characters and that truncated value is emitted with proper &lt;code&gt;fill&lt;/code&gt;, &lt;code&gt;alignment&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; if those parameters are set.</source>
          <target state="translated">对于非数字类型，可以将其视为&amp;ldquo;最大宽度&amp;rdquo;。如果结果字符串长于该宽度，则将其截断为这么多字符，并且如果设置了这些参数，则以适当的 &lt;code&gt;fill&lt;/code&gt; ， &lt;code&gt;alignment&lt;/code&gt; 和 &lt;code&gt;width&lt;/code&gt; 发出该截断的值。</target>
        </trans-unit>
        <trans-unit id="759891ff1588306215a2ec66ea4ffdf3b900cc9a" translate="yes" xml:space="preserve">
          <source>For non-users, a new edition signals that some major advancements have landed, which might make Rust worth another look.</source>
          <target state="translated">对于非用户来说,新版本预示着一些重大的进步已经落地,这或许会让Rust值得再看看。</target>
        </trans-unit>
        <trans-unit id="032e9d1e38ac32b8d4f9cea98bf791c06db59c12" translate="yes" xml:space="preserve">
          <source>For non-zero-sized values, a &lt;a href=&quot;struct.box&quot;&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt; will use the &lt;a href=&quot;../alloc/struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; allocator for its allocation. It is valid to convert both ways between a &lt;a href=&quot;struct.box&quot;&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt; and a raw pointer allocated with the &lt;a href=&quot;../alloc/struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; allocator, given that the &lt;a href=&quot;../alloc/struct.layout&quot;&gt;&lt;code&gt;Layout&lt;/code&gt;&lt;/a&gt; used with the allocator is correct for the type. More precisely, a &lt;code&gt;value: *mut T&lt;/code&gt; that has been allocated with the &lt;a href=&quot;../alloc/struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; allocator with &lt;code&gt;Layout::for_value(&amp;amp;*value)&lt;/code&gt; may be converted into a box using &lt;a href=&quot;struct.box#method.from_raw&quot;&gt;&lt;code&gt;Box::&amp;lt;T&amp;gt;::from_raw(value)&lt;/code&gt;&lt;/a&gt;. Conversely, the memory backing a &lt;code&gt;value: *mut T&lt;/code&gt; obtained from &lt;a href=&quot;struct.box#method.into_raw&quot;&gt;&lt;code&gt;Box::&amp;lt;T&amp;gt;::into_raw&lt;/code&gt;&lt;/a&gt; may be deallocated using the &lt;a href=&quot;../alloc/struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; allocator with &lt;a href=&quot;../alloc/struct.layout#method.for_value&quot;&gt;&lt;code&gt;Layout::for_value(&amp;amp;*value)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">对于非零大小的值，&lt;a href=&quot;struct.box&quot;&gt; &lt;code&gt;Box&lt;/code&gt; &lt;/a&gt;将使用&lt;a href=&quot;../alloc/struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;分配器进行分配。假定与分配器一起使用的&lt;a href=&quot;../alloc/struct.layout&quot;&gt; &lt;code&gt;Layout&lt;/code&gt; &lt;/a&gt;对于该类型正确，则在&lt;a href=&quot;struct.box&quot;&gt; &lt;code&gt;Box&lt;/code&gt; &lt;/a&gt;和用&lt;a href=&quot;../alloc/struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;分配器分配的原始指针之间进行两种转换都是有效的。更确切地说，可以使用&lt;a href=&quot;struct.box#method.from_raw&quot;&gt; &lt;code&gt;Box::&amp;lt;T&amp;gt;::from_raw(value)&lt;/code&gt; &lt;/a&gt;将已经用 &lt;code&gt;Layout::for_value(&amp;amp;*value)&lt;/code&gt; &lt;a href=&quot;../alloc/struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;分配器分配的 &lt;code&gt;value: *mut T&lt;/code&gt; 转换为一个框。相反，可以使用&lt;a href=&quot;../alloc/struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;struct.box#method.into_raw&quot;&gt; &lt;code&gt;Box::&amp;lt;T&amp;gt;::into_raw&lt;/code&gt; &lt;/a&gt;释放从Box :: &amp;lt;T&amp;gt; :: into_raw获得的支持 &lt;code&gt;value: *mut T&lt;/code&gt; 的内存。具有&lt;a href=&quot;../alloc/struct.layout#method.for_value&quot;&gt; &lt;code&gt;Layout::for_value(&amp;amp;*value)&lt;/code&gt; &lt;/a&gt;分配器。</target>
        </trans-unit>
        <trans-unit id="8be924402e1b9e352b3e21f3848f1b4490ef1405" translate="yes" xml:space="preserve">
          <source>For non-zero-sized values, a &lt;a href=&quot;struct.box&quot;&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt; will use the &lt;a href=&quot;../alloc/struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; allocator for its allocation. It is valid to convert both ways between a &lt;a href=&quot;struct.box&quot;&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt; and a raw pointer allocated with the &lt;a href=&quot;../alloc/struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; allocator, given that the &lt;a href=&quot;../alloc/struct.layout&quot;&gt;&lt;code&gt;Layout&lt;/code&gt;&lt;/a&gt; used with the allocator is correct for the type. More precisely, a &lt;code&gt;value: *mut T&lt;/code&gt; that has been allocated with the &lt;a href=&quot;../alloc/struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; allocator with &lt;code&gt;Layout::for_value(&amp;amp;*value)&lt;/code&gt; may be converted into a box using &lt;code&gt;Box::&amp;lt;T&amp;gt;::from_raw(value)&lt;/code&gt;. Conversely, the memory backing a &lt;code&gt;value: *mut T&lt;/code&gt; obtained from &lt;code&gt;Box::&amp;lt;T&amp;gt;::into_raw&lt;/code&gt; may be deallocated using the &lt;a href=&quot;../alloc/struct.global&quot;&gt;&lt;code&gt;Global&lt;/code&gt;&lt;/a&gt; allocator with &lt;code&gt;Layout::for_value(&amp;amp;*value)&lt;/code&gt;.</source>
          <target state="translated">对于非零大小的值，&lt;a href=&quot;struct.box&quot;&gt; &lt;code&gt;Box&lt;/code&gt; &lt;/a&gt;将使用&lt;a href=&quot;../alloc/struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;分配器进行分配。假定与分配器一起使用的&lt;a href=&quot;../alloc/struct.layout&quot;&gt; &lt;code&gt;Layout&lt;/code&gt; &lt;/a&gt;对于该类型是正确的，则可以在&lt;a href=&quot;struct.box&quot;&gt; &lt;code&gt;Box&lt;/code&gt; &lt;/a&gt;和用&lt;a href=&quot;../alloc/struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;分配器分配的原始指针之间进行双向转换。更准确地说，可以使用 &lt;code&gt;Box::&amp;lt;T&amp;gt;::from_raw(value)&lt;/code&gt; 将已经用 &lt;code&gt;Layout::for_value(&amp;amp;*value)&lt;/code&gt; &lt;a href=&quot;../alloc/struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt;分配器分配的 &lt;code&gt;value: *mut T&lt;/code&gt; 转换为框。相反，可以使用&lt;a href=&quot;../alloc/struct.global&quot;&gt; &lt;code&gt;Global&lt;/code&gt; &lt;/a&gt; &lt;code&gt;Box::&amp;lt;T&amp;gt;::into_raw&lt;/code&gt; 释放从Box :: &amp;lt;T&amp;gt; :: into_raw获得的支持 &lt;code&gt;value: *mut T&lt;/code&gt; 的内存。具有 &lt;code&gt;Layout::for_value(&amp;amp;*value)&lt;/code&gt; 分配器。</target>
        </trans-unit>
        <trans-unit id="54643b534ba092bdf13786f2ee7895ae533d1d71" translate="yes" xml:space="preserve">
          <source>For now, let&amp;rsquo;s ignore the top two lines and focus on the function to see how it works. Note the &lt;code&gt;#[test]&lt;/code&gt; annotation before the &lt;code&gt;fn&lt;/code&gt; line: this attribute indicates this is a test function, so the test runner knows to treat this function as a test. We could also have non-test functions in the &lt;code&gt;tests&lt;/code&gt; module to help set up common scenarios or perform common operations, so we need to indicate which functions are tests by using the &lt;code&gt;#[test]&lt;/code&gt; attribute.</source>
          <target state="translated">现在，让我们忽略前两行，而专注于该函数以了解其工作原理。注意 &lt;code&gt;fn&lt;/code&gt; 行之前的 &lt;code&gt;#[test]&lt;/code&gt; 批注：此属性表示这是一个测试函数，因此测试运行程序知道将此函数视为测试。我们还可以在 &lt;code&gt;tests&lt;/code&gt; 模块中具有非测试功能，以帮助设置常见方案或执行常见操作，因此我们需要使用 &lt;code&gt;#[test]&lt;/code&gt; 属性指示哪些功能是测试。</target>
        </trans-unit>
        <trans-unit id="2e33cfb6813b2ec50a1428dbe54a0333feee6ab7" translate="yes" xml:space="preserve">
          <source>For now, our handling of the stream consists of calling &lt;code&gt;unwrap&lt;/code&gt; to terminate our program if the stream has any errors; if there aren&amp;rsquo;t any errors, the program prints a message. We&amp;rsquo;ll add more functionality for the success case in the next listing. The reason we might receive errors from the &lt;code&gt;incoming&lt;/code&gt; method when a client connects to the server is that we&amp;rsquo;re not actually iterating over connections. Instead, we&amp;rsquo;re iterating over &lt;em&gt;connection attempts&lt;/em&gt;. The connection might not be successful for a number of reasons, many of them operating system specific. For example, many operating systems have a limit to the number of simultaneous open connections they can support; new connection attempts beyond that number will produce an error until some of the open connections are closed.</source>
          <target state="translated">现在，我们对流的处理包括：如果流有任何错误，则调用 &lt;code&gt;unwrap&lt;/code&gt; 终止程序。如果没有任何错误，程序将显示一条消息。在下一个清单中，我们将为成功案例添加更多功能。当客户端连接到服务器时，我们可能会从 &lt;code&gt;incoming&lt;/code&gt; 方法中收到错误，原因是我们实际上并没有在连接上进行迭代。相反，我们遍历&lt;em&gt;连接尝试&lt;/em&gt;。由于多种原因，连接可能不成功，其中许多原因是特定于操作系统的。例如，许多操作系统都限制了它们可以支持的同时打开连接的数量。超过该数目的新连接尝试将产生错误，直到关闭某些打开的连接。</target>
        </trans-unit>
        <trans-unit id="a1f6c1be5a9e80f33cd381d2dcb445e8ff860c04" translate="yes" xml:space="preserve">
          <source>For optimal performance, collections will generally avoid shrinking themselves. If you believe that a collection will not soon contain any more elements, or just really need the memory, the &lt;code&gt;shrink_to_fit&lt;/code&gt; method prompts the collection to shrink the backing array to the minimum size capable of holding its elements.</source>
          <target state="translated">为了获得最佳性能，集合通常会避免自身缩小。如果您认为某个集合将很快不再包含任何元素，或者仅确实需要内存，那么 &lt;code&gt;shrink_to_fit&lt;/code&gt; 方法将提示该集合将后备数组缩小到能够容纳其元素的最小大小。</target>
        </trans-unit>
        <trans-unit id="cd7c16642fc855b86a6681106c12d1bc5cae24fe" translate="yes" xml:space="preserve">
          <source>For other types an index expression &lt;code&gt;a[b]&lt;/code&gt; is equivalent to &lt;code&gt;*std::ops::Index::index(&amp;amp;a, b)&lt;/code&gt;, or &lt;code&gt;*std::ops::IndexMut::index_mut(&amp;amp;mut a, b)&lt;/code&gt; in a mutable place expression context. Just as with methods, Rust will also insert dereference operations on &lt;code&gt;a&lt;/code&gt; repeatedly to find an implementation.</source>
          <target state="translated">对于其他类型的索引表达 &lt;code&gt;a[b]&lt;/code&gt; 相当于 &lt;code&gt;*std::ops::Index::index(&amp;amp;a, b)&lt;/code&gt; ，或 &lt;code&gt;*std::ops::IndexMut::index_mut(&amp;amp;mut a, b)&lt;/code&gt; 在一个可变位置表达上下文。正如方法，铁锈也会插上反引用操作 &lt;code&gt;a&lt;/code&gt; 反复寻找一个实现。</target>
        </trans-unit>
        <trans-unit id="13c849dda2f0ae7e001d50a92c5a1d89fda3d6fe" translate="yes" xml:space="preserve">
          <source>For our final project, we&amp;rsquo;ll make a web server that says &amp;ldquo;hello&amp;rdquo; and looks like Figure 20-1 in a web browser.</source>
          <target state="translated">对于最后一个项目，我们将制作一个网络服务器，该服务器显示&amp;ldquo; hello&amp;rdquo;，并在网络浏览器中如图20-1所示。</target>
        </trans-unit>
        <trans-unit id="d255769548dbb0d1d2dd3966fe6705e70e8ba063" translate="yes" xml:space="preserve">
          <source>For primitive signed integers (&lt;a href=&quot;../primitive.i8&quot;&gt;&lt;code&gt;i8&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../primitive.i128&quot;&gt;&lt;code&gt;i128&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../primitive.isize&quot;&gt;&lt;code&gt;isize&lt;/code&gt;&lt;/a&gt;), negative values are formatted as the two&amp;rsquo;s complement representation.</source>
          <target state="translated">对于原始有符号整数（&lt;a href=&quot;../primitive.i8&quot;&gt; &lt;code&gt;i8&lt;/code&gt; &lt;/a&gt;到&lt;a href=&quot;../primitive.i128&quot;&gt; &lt;code&gt;i128&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../primitive.isize&quot;&gt; &lt;code&gt;isize&lt;/code&gt; &lt;/a&gt;），负值的格式设置为二进制补码表示形式。</target>
        </trans-unit>
        <trans-unit id="aac9f771ea2b1ce33ddd4c4adcf5da0c753c4439" translate="yes" xml:space="preserve">
          <source>For primitive signed integers (&lt;code&gt;i8&lt;/code&gt; to &lt;code&gt;i128&lt;/code&gt;, and &lt;code&gt;isize&lt;/code&gt;), negative values are formatted as the two&amp;rsquo;s complement representation.</source>
          <target state="translated">对于原始有符号整数（ &lt;code&gt;i8&lt;/code&gt; 到 &lt;code&gt;i128&lt;/code&gt; 和 &lt;code&gt;isize&lt;/code&gt; ），负值的格式设置为二进制补码表示形式。</target>
        </trans-unit>
        <trans-unit id="ce2928dd11d16b979a65e7e0873fbf1de3498202" translate="yes" xml:space="preserve">
          <source>For regions of memory which might overlap, use &lt;a href=&quot;../ptr/fn.copy&quot;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">对于可能重叠的内存区域，请使用&lt;a href=&quot;../ptr/fn.copy&quot;&gt; &lt;code&gt;copy&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c3f7e3e69f692e2801e97c9dcecae515bd256300" translate="yes" xml:space="preserve">
          <source>For regions of memory which might overlap, use &lt;a href=&quot;fn.copy&quot;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">对于可能重叠的内存区域，请使用&lt;a href=&quot;fn.copy&quot;&gt; &lt;code&gt;copy&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="699bb35cf747c434fb017049f75ca63a96555a2f" translate="yes" xml:space="preserve">
          <source>For resources in languages other than English. Most are still in progress; see &lt;a href=&quot;https://github.com/rust-lang/book/issues?q=is%3Aopen+is%3Aissue+label%3ATranslations&quot;&gt;the Translations label&lt;/a&gt; to help or let us know about a new translation!</source>
          <target state="translated">对于英语以外的其他语言的资源。大多数仍在进行中。请参阅&lt;a href=&quot;https://github.com/rust-lang/book/issues?q=is%3Aopen+is%3Aissue+label%3ATranslations&quot;&gt;翻译标签&lt;/a&gt;以帮助或让我们知道新的翻译！</target>
        </trans-unit>
        <trans-unit id="b3ace2755d26172c16b8f52be41575cb599f9217" translate="yes" xml:space="preserve">
          <source>For similar reasons, &lt;strong&gt;this trait should never fail&lt;/strong&gt;. Failure during dereferencing can be extremely confusing when &lt;code&gt;Deref&lt;/code&gt; is invoked implicitly.</source>
          <target state="translated">出于类似的原因，&lt;strong&gt;这种特性也绝不能失败&lt;/strong&gt;。当隐式调用 &lt;code&gt;Deref&lt;/code&gt; 时，解除引用过程中的失败会造成极大的混乱。</target>
        </trans-unit>
        <trans-unit id="f143a2f7cb6b7d643f9e55d76c2173dbf1fa2576" translate="yes" xml:space="preserve">
          <source>For similar reasons, &lt;strong&gt;this trait should never fail&lt;/strong&gt;. Failure during dereferencing can be extremely confusing when &lt;code&gt;DerefMut&lt;/code&gt; is invoked implicitly.</source>
          <target state="translated">出于类似的原因，&lt;strong&gt;这种特性也绝不能失败&lt;/strong&gt;。当隐式调用 &lt;code&gt;DerefMut&lt;/code&gt; 时，解除引用过程中的失败会造成极大的混乱。</target>
        </trans-unit>
        <trans-unit id="651693930e4ce9c887254d6c0684024c66f33563" translate="yes" xml:space="preserve">
          <source>For simple key functions (e.g., functions that are property accesses or basic operations), &lt;a href=&quot;#method.sort_by_key&quot;&gt;&lt;code&gt;sort_by_key&lt;/code&gt;&lt;/a&gt; is likely to be faster.</source>
          <target state="translated">对于简单的键功能（例如，作为属性访问或基本操作的功能），&lt;a href=&quot;#method.sort_by_key&quot;&gt; &lt;code&gt;sort_by_key&lt;/code&gt; &lt;/a&gt;可能会更快。</target>
        </trans-unit>
        <trans-unit id="89523ea381daa16404e1b923b1eb9b76ace1d71b" translate="yes" xml:space="preserve">
          <source>For splitting from the front, the &lt;a href=&quot;#method.splitn&quot;&gt;&lt;code&gt;splitn&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">要从正面拆分，可以使用&lt;a href=&quot;#method.splitn&quot;&gt; &lt;code&gt;splitn&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="11e6e81fe37e9ab31f7eacdfb8dae37e44c66a22" translate="yes" xml:space="preserve">
          <source>For splitting from the front, the &lt;a href=&quot;../primitive.str#method.splitn&quot;&gt;&lt;code&gt;splitn&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">要从正面拆分，可以使用&lt;a href=&quot;../primitive.str#method.splitn&quot;&gt; &lt;code&gt;splitn&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="a3c0abfb259f7386ec06ccced34dac985722f5e3" translate="yes" xml:space="preserve">
          <source>For splitting from the front, the &lt;a href=&quot;primitive.str#method.splitn&quot;&gt;&lt;code&gt;splitn&lt;/code&gt;&lt;/a&gt; method can be used.</source>
          <target state="translated">要从正面拆分，可以使用&lt;a href=&quot;primitive.str#method.splitn&quot;&gt; &lt;code&gt;splitn&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="0ad7e92077f13212fee670b70ee5343cc7564f8c" translate="yes" xml:space="preserve">
          <source>For struct-like enum variants, such as &lt;code&gt;Message::Move&lt;/code&gt;, we can use a pattern similar to the pattern we specify to match structs. After the variant name, we place curly brackets and then list the fields with variables so we break apart the pieces to use in the code for this arm. Here we use the shorthand form as we did in Listing 18-13.</source>
          <target state="translated">对于类似于结构的枚举变量，例如 &lt;code&gt;Message::Move&lt;/code&gt; ，我们可以使用类似于我们为匹配结构指定的模式的模式。在变体名称之后，我们将大括号括起来，然后列出带有变量的字段，以便将这些段拆开以用于此分支的代码中。在这里，我们使用清单18-13中的简写形式。</target>
        </trans-unit>
        <trans-unit id="5810f8b96156118100100f4ed7849dc0cd2c9c1a" translate="yes" xml:space="preserve">
          <source>For such a small example, a &lt;code&gt;for&lt;/code&gt; loop may be cleaner, but &lt;code&gt;for_each&lt;/code&gt; might be preferable to keep a functional style with longer iterators:</source>
          <target state="translated">对于这么小的示例， &lt;code&gt;for&lt;/code&gt; 循环可能会更干净一些，但是 &lt;code&gt;for_each&lt;/code&gt; 可能更适合于保留具有较长迭代器的函数样式：</target>
        </trans-unit>
        <trans-unit id="e8118375098fa91fd1336cc1a1d200113a068697" translate="yes" xml:space="preserve">
          <source>For the error type, we used the &lt;em&gt;trait object&lt;/em&gt;&lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; (and we&amp;rsquo;ve brought &lt;code&gt;std::error::Error&lt;/code&gt; into scope with a &lt;code&gt;use&lt;/code&gt; statement at the top). We&amp;rsquo;ll cover trait objects in &lt;a href=&quot;ch17-00-oop&quot;&gt;Chapter 17&lt;/a&gt;. For now, just know that &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; means the function will return a type that implements the &lt;code&gt;Error&lt;/code&gt; trait, but we don&amp;rsquo;t have to specify what particular type the return value will be. This gives us flexibility to return error values that may be of different types in different error cases. The &lt;code&gt;dyn&lt;/code&gt; keyword is short for &amp;ldquo;dynamic.&amp;rdquo;</source>
          <target state="translated">对于错误类型，我们使用&lt;em&gt;特征对象&lt;/em&gt; &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; （并且我们将 &lt;code&gt;std::error::Error&lt;/code&gt; 引入作用域，并在顶部 &lt;code&gt;use&lt;/code&gt; 了use语句）。我们将在&lt;a href=&quot;ch17-00-oop&quot;&gt;第17章&lt;/a&gt;介绍特征对象。现在，只知道 &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt; 意味着该函数将返回实现 &lt;code&gt;Error&lt;/code&gt; 特征的类型，但是我们不必指定返回值将是哪种特定类型。这使我们可以灵活地返回在不同错误情况下可能属于不同类型的错误值。该 &lt;code&gt;dyn&lt;/code&gt; 关键字是短期的&amp;ldquo;动态的&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="ff1e8b621d2f0697fd650c7bd5bdebd31c66d8f4" translate="yes" xml:space="preserve">
          <source>For the first code example, please check the function definition. Example:</source>
          <target state="translated">关于第一个代码示例,请查看函数定义。例子</target>
        </trans-unit>
        <trans-unit id="f3f504eb5407df9eef6d4025ac7f91c4112cc6cf" translate="yes" xml:space="preserve">
          <source>For the full list of configuration options and defaults for each profile, see &lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;Cargo&amp;rsquo;s documentation&lt;/a&gt;.</source>
          <target state="translated">有关每个配置文件的配置选项和默认设置的完整列表，请参阅&lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;Cargo的文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="791c57d5635fae5aa217abb12eda43c0b9996769" translate="yes" xml:space="preserve">
          <source>For the full list of configuration options and defaults for each profile, see &lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/profiles.html&quot;&gt;Cargo&amp;rsquo;s documentation&lt;/a&gt;.</source>
          <target state="translated">有关每个配置文件的配置选项和默认设置的完整列表，请参阅&lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/profiles.html&quot;&gt;Cargo的文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6a68c719c83bfb13b132657f78b2e4ff48741b1d" translate="yes" xml:space="preserve">
          <source>For the implementation of the &lt;code&gt;send&lt;/code&gt; method, the first parameter is still an immutable borrow of &lt;code&gt;self&lt;/code&gt;, which matches the trait definition. We call &lt;code&gt;borrow_mut&lt;/code&gt; on the &lt;code&gt;RefCell&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; in &lt;code&gt;self.sent_messages&lt;/code&gt; to get a mutable reference to the value inside the &lt;code&gt;RefCell&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt;, which is the vector. Then we can call &lt;code&gt;push&lt;/code&gt; on the mutable reference to the vector to keep track of the messages sent during the test.</source>
          <target state="translated">对于 &lt;code&gt;send&lt;/code&gt; 方法的实现，第一个参数仍然是 &lt;code&gt;self&lt;/code&gt; 的不可变借项，它与trait定义匹配。我们呼吁 &lt;code&gt;borrow_mut&lt;/code&gt; 在 &lt;code&gt;RefCell&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; 在 &lt;code&gt;self.sent_messages&lt;/code&gt; 得到一个可变引用内部值 &lt;code&gt;RefCell&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; ，这是向量。然后，我们可以对向量的可变引用调用 &lt;code&gt;push&lt;/code&gt; ，以跟踪测试期间发送的消息。</target>
        </trans-unit>
        <trans-unit id="a95e91b27e6ad6f9ade905d772c0b6782aa828f3" translate="yes" xml:space="preserve">
          <source>For the mutable counterpart see &lt;a href=&quot;#method.as_mut&quot;&gt;&lt;code&gt;as_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">对于可变的对应项，请参见&lt;a href=&quot;#method.as_mut&quot;&gt; &lt;code&gt;as_mut&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6d5a9781a149f8d35fca4d184f08a35d9f2cbdac" translate="yes" xml:space="preserve">
          <source>For the mutable counterpart see &lt;a href=&quot;#method.as_uninit_mut&quot;&gt;&lt;code&gt;as_uninit_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关可变的副本，请参见&lt;a href=&quot;#method.as_uninit_mut&quot;&gt; &lt;code&gt;as_uninit_mut&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b1f973a0bac5133bff0149357edc17c4cb290249" translate="yes" xml:space="preserve">
          <source>For the mutable counterpart see &lt;a href=&quot;#method.as_uninit_slice_mut&quot;&gt;&lt;code&gt;as_uninit_slice_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关可变的副本，请参见&lt;a href=&quot;#method.as_uninit_slice_mut&quot;&gt; &lt;code&gt;as_uninit_slice_mut&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="07082323caa609052dde906dbd2a21a1ab51cf54" translate="yes" xml:space="preserve">
          <source>For the mutable counterpart see &lt;a href=&quot;struct.nonnull#method.as_mut&quot;&gt;&lt;code&gt;as_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">对于可变的对应项，请参见&lt;a href=&quot;struct.nonnull#method.as_mut&quot;&gt; &lt;code&gt;as_mut&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="69d924fe0e8c1a5d61d0c3d9dd1c49bf7a0308ea" translate="yes" xml:space="preserve">
          <source>For the mutable counterpart see &lt;a href=&quot;struct.nonnull#method.as_uninit_mut&quot;&gt;&lt;code&gt;as_uninit_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关可变的副本，请参见&lt;a href=&quot;struct.nonnull#method.as_uninit_mut&quot;&gt; &lt;code&gt;as_uninit_mut&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7fd7465e0cdaff95e9a716e4a710191845a70f5d" translate="yes" xml:space="preserve">
          <source>For the mutable counterpart see &lt;a href=&quot;struct.nonnull#method.as_uninit_slice_mut&quot;&gt;&lt;code&gt;as_uninit_slice_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关可变的副本，请参见&lt;a href=&quot;struct.nonnull#method.as_uninit_slice_mut&quot;&gt; &lt;code&gt;as_uninit_slice_mut&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="91c42187d149ce3b9fc55c3ad6f30f4360a292d3" translate="yes" xml:space="preserve">
          <source>For the platform's canonical successful and unsuccessful codes, see the &lt;a href=&quot;#associatedconstant.SUCCESS&quot;&gt;&lt;code&gt;SUCCESS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#associatedconstant.FAILURE&quot;&gt;&lt;code&gt;FAILURE&lt;/code&gt;&lt;/a&gt; associated items.</source>
          <target state="translated">有关平台的规范成功和失败代码，请参见&lt;a href=&quot;#associatedconstant.SUCCESS&quot;&gt; &lt;code&gt;SUCCESS&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#associatedconstant.FAILURE&quot;&gt; &lt;code&gt;FAILURE&lt;/code&gt; &lt;/a&gt;关联项目。</target>
        </trans-unit>
        <trans-unit id="75db543c6e1cfda586f4db237fb2c670d25637f5" translate="yes" xml:space="preserve">
          <source>For the platform's canonical successful and unsuccessful codes, see the &lt;a href=&quot;struct.exitcode#associatedconstant.SUCCESS&quot;&gt;&lt;code&gt;SUCCESS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.exitcode#associatedconstant.FAILURE&quot;&gt;&lt;code&gt;FAILURE&lt;/code&gt;&lt;/a&gt; associated items.</source>
          <target state="translated">有关平台的规范成功和失败代码，请参见&lt;a href=&quot;struct.exitcode#associatedconstant.SUCCESS&quot;&gt; &lt;code&gt;SUCCESS&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;struct.exitcode#associatedconstant.FAILURE&quot;&gt; &lt;code&gt;FAILURE&lt;/code&gt; &lt;/a&gt;关联项目。</target>
        </trans-unit>
        <trans-unit id="2e0af3f991c9f15f8f69d15c2eea87200f2b169c" translate="yes" xml:space="preserve">
          <source>For the reason why this trait is marked unsafe, see them parent trait &lt;a href=&quot;trait.searcher&quot;&gt;&lt;code&gt;Searcher&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">由于此特征被标记为不安全的原因，请参阅父特征&lt;a href=&quot;trait.searcher&quot;&gt; &lt;code&gt;Searcher&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9754d4ead8c14d2fd33aefe3de619c365fcc229c" translate="yes" xml:space="preserve">
          <source>For the reason why this trait is marked unsafe, see them parent trait &lt;code&gt;Searcher&lt;/code&gt;.</source>
          <target state="translated">由于此特征被标记为不安全的原因，请参阅父特征 &lt;code&gt;Searcher&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="317df28410901f8510f7434f828ef3205b9a7b8a" translate="yes" xml:space="preserve">
          <source>For the shared counterpart see &lt;a href=&quot;#method.as_ref-1&quot;&gt;&lt;code&gt;as_ref&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关共享副本，请参见&lt;a href=&quot;#method.as_ref-1&quot;&gt; &lt;code&gt;as_ref&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="be46a34ce569130657543d5be99d0ffccac5f531" translate="yes" xml:space="preserve">
          <source>For the shared counterpart see &lt;a href=&quot;#method.as_uninit_ref-1&quot;&gt;&lt;code&gt;as_uninit_ref&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关共享副本，请参见&lt;a href=&quot;#method.as_uninit_ref-1&quot;&gt; &lt;code&gt;as_uninit_ref&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="33c7d626908c572a51181ace97075c3c7c164cf4" translate="yes" xml:space="preserve">
          <source>For the shared counterpart see &lt;a href=&quot;#method.as_uninit_slice-1&quot;&gt;&lt;code&gt;as_uninit_slice&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关共享副本，请参见&lt;a href=&quot;#method.as_uninit_slice-1&quot;&gt; &lt;code&gt;as_uninit_slice&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1d048329557c415195915c976f34b9b3ebb4d30b" translate="yes" xml:space="preserve">
          <source>For the shared counterpart see &lt;a href=&quot;struct.nonnull#method.as_ref&quot;&gt;&lt;code&gt;as_ref&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关共享副本，请参见&lt;a href=&quot;struct.nonnull#method.as_ref&quot;&gt; &lt;code&gt;as_ref&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cbea4cb29a600931bdca0544ec0671b19cb48983" translate="yes" xml:space="preserve">
          <source>For the shared counterpart see &lt;a href=&quot;struct.nonnull#method.as_uninit_ref&quot;&gt;&lt;code&gt;as_uninit_ref&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关共享副本，请参见&lt;a href=&quot;struct.nonnull#method.as_uninit_ref&quot;&gt; &lt;code&gt;as_uninit_ref&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9ddf9342b49f23e6ec0f7fb2b4028f00c98f3be6" translate="yes" xml:space="preserve">
          <source>For the shared counterpart see &lt;a href=&quot;struct.nonnull#method.as_uninit_slice&quot;&gt;&lt;code&gt;as_uninit_slice&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关共享副本，请参见&lt;a href=&quot;struct.nonnull#method.as_uninit_slice&quot;&gt; &lt;code&gt;as_uninit_slice&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6e95ec06cdfac6e068dc9366f7700758986e2c5a" translate="yes" xml:space="preserve">
          <source>For the third example, when you match, all patterns must have the same type as the type you're matching on. Example:</source>
          <target state="translated">对于第三个例子,当你匹配时,所有的模式必须与你所匹配的类型相同。例子:</target>
        </trans-unit>
        <trans-unit id="d0fe8928fd32097dac9b918311b6eac0fcf339ce" translate="yes" xml:space="preserve">
          <source>For these reasons, Rust takes a different approach, using trait objects instead of inheritance. Let&amp;rsquo;s look at how trait objects enable polymorphism in Rust.</source>
          <target state="translated">由于这些原因，Rust采用了​​一种不同的方法，即使用特征对象而不是继承。让我们看一下特征对象如何在Rust中实现多态性。</target>
        </trans-unit>
        <trans-unit id="4710b0aeb278b541ab02b2df0abed515f474e4d8" translate="yes" xml:space="preserve">
          <source>For this reason, match arms must use refutable patterns, except for the last arm, which should match any remaining values with an irrefutable pattern. Rust allows us to use an irrefutable pattern in a &lt;code&gt;match&lt;/code&gt; with only one arm, but this syntax isn&amp;rsquo;t particularly useful and could be replaced with a simpler &lt;code&gt;let&lt;/code&gt; statement.</source>
          <target state="translated">因此，匹配臂必须使用可重复使用的模式，但最后一个手臂除外，后者应将任何剩余值与不可重复的模式匹配。Rust允许我们仅用一只手臂就可以在 &lt;code&gt;match&lt;/code&gt; 使用不可辩驳的模式，但是这种语法并不是特别有用，可以用更简单的 &lt;code&gt;let&lt;/code&gt; 语句代替。</target>
        </trans-unit>
        <trans-unit id="adfc989e88bb9c8c7181782f55b50dfadfa83f21" translate="yes" xml:space="preserve">
          <source>For this to work, some note must be specified. An empty attribute will not do anything, please remove the attribute or add some helpful note for users of the trait.</source>
          <target state="translated">为了使其发挥作用,必须指定一些说明。空属性不会有任何作用,请删除该属性或为该特征的用户添加一些有用的说明。</target>
        </trans-unit>
        <trans-unit id="04f657de0e5284c90b3775d6f50f0f7a8ada21dc" translate="yes" xml:space="preserve">
          <source>For this, the impl of &lt;a href=&quot;trait.searcher&quot;&gt;&lt;code&gt;Searcher&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;trait.reversesearcher&quot;&gt;&lt;code&gt;ReverseSearcher&lt;/code&gt;&lt;/a&gt; need to follow these conditions:</source>
          <target state="translated">为此，&lt;a href=&quot;trait.searcher&quot;&gt; &lt;code&gt;Searcher&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;trait.reversesearcher&quot;&gt; &lt;code&gt;ReverseSearcher&lt;/code&gt; 的隐含&lt;/a&gt;需要满足以下条件：</target>
        </trans-unit>
        <trans-unit id="bd561ec2ce563662749407f0433b939f5ebe794d" translate="yes" xml:space="preserve">
          <source>For this, the impl of &lt;code&gt;Searcher&lt;/code&gt; and &lt;code&gt;ReverseSearcher&lt;/code&gt; need to follow these conditions:</source>
          <target state="translated">为此， &lt;code&gt;Searcher&lt;/code&gt; 和 &lt;code&gt;ReverseSearcher&lt;/code&gt; 的隐含需要满足以下条件：</target>
        </trans-unit>
        <trans-unit id="97ccae7172bda964374e1bc586c6572634aaa703" translate="yes" xml:space="preserve">
          <source>For those developing Rust, a new edition provides a rallying point for the project as a whole.</source>
          <target state="translated">对于开发Rust的人来说,新版为整个项目提供了一个集结点。</target>
        </trans-unit>
        <trans-unit id="2fec446383d5f779e4c9aee400f1c7e1dddccd01" translate="yes" xml:space="preserve">
          <source>For those familiar with pointers, a reference is just a pointer that is assumed to be aligned, not null, and pointing to memory containing a valid value of &lt;code&gt;T&lt;/code&gt; - for example, &lt;code&gt;&amp;amp;bool&lt;/code&gt; can only point to an allocation containing the integer values &lt;code&gt;1&lt;/code&gt; (&lt;code&gt;true&lt;/code&gt;) or &lt;code&gt;0&lt;/code&gt; (&lt;code&gt;false&lt;/code&gt;), but creating a &lt;code&gt;&amp;amp;bool&lt;/code&gt; that points to an allocation containing the value &lt;code&gt;3&lt;/code&gt; causes undefined behaviour. In fact, &lt;code&gt;Option&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt; has the same memory representation as a nullable but aligned pointer, and can be passed across FFI boundaries as such.</source>
          <target state="translated">对于那些熟悉指针的人来说，引用只是一个假定为对齐的指针，而不是null，并指向包含有效值 &lt;code&gt;T&lt;/code&gt; 的内存-例如， &lt;code&gt;&amp;amp;bool&lt;/code&gt; 只能指向包含整数值 &lt;code&gt;1&lt;/code&gt; （ &lt;code&gt;true&lt;/code&gt; ）或 &lt;code&gt;0&lt;/code&gt; （ &lt;code&gt;false&lt;/code&gt; ），但是创建指向包含值 &lt;code&gt;3&lt;/code&gt; 的分配的 &lt;code&gt;&amp;amp;bool&lt;/code&gt; 会导致未定义的行为。实际上， &lt;code&gt;Option&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt; 与可为空但对齐的指针具有相同的内存表示形式，因此可以跨FFI边界传递。</target>
        </trans-unit>
        <trans-unit id="b6ace4ab9caa4dbb7631dba10e9c44e719dfc96f" translate="yes" xml:space="preserve">
          <source>For those familiar with pointers, a reference is just a pointer that is assumed to not be null. In fact, &lt;code&gt;Option&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt; has the same memory representation as a nullable pointer, and can be passed across FFI boundaries as such.</source>
          <target state="translated">对于那些熟悉指针的人，引用只是一个假定为不为null的指针。实际上， &lt;code&gt;Option&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt; 具有与可为空的指针相同的内存表示，并且可以像这样跨FFI边界传递。</target>
        </trans-unit>
        <trans-unit id="9aa62047cd03d84d541773dd2bfd34515672a0a9" translate="yes" xml:space="preserve">
          <source>For tuple-like enum variants, like &lt;code&gt;Message::Write&lt;/code&gt; that holds a tuple with one element and &lt;code&gt;Message::ChangeColor&lt;/code&gt; that holds a tuple with three elements, the pattern is similar to the pattern we specify to match tuples. The number of variables in the pattern must match the number of elements in the variant we&amp;rsquo;re matching.</source>
          <target state="translated">对于类似于元组的枚举变体，例如 &lt;code&gt;Message::Write&lt;/code&gt; 包含一个具有一个元素的元组，而 &lt;code&gt;Message::ChangeColor&lt;/code&gt; 包含一个具有三个元素的元组，该模式类似于我们为匹配元组指定的模式。模式中的变量数量必须与我们要匹配的变量中的元素数量匹配。</target>
        </trans-unit>
        <trans-unit id="aafd656a28f0a9eb0c651ab2742e994b8d5c6d74" translate="yes" xml:space="preserve">
          <source>For types that implement &lt;code&gt;Copy&lt;/code&gt;, the &lt;code&gt;get&lt;/code&gt; method retrieves the current interior value.</source>
          <target state="translated">对于实现类型的 &lt;code&gt;Copy&lt;/code&gt; ，则 &lt;code&gt;get&lt;/code&gt; 方法检索当前的内在价值。</target>
        </trans-unit>
        <trans-unit id="ec453568d8f91af81c4edd923841e5de4ffcf536" translate="yes" xml:space="preserve">
          <source>For types that implement &lt;code&gt;Default&lt;/code&gt;, the &lt;code&gt;take&lt;/code&gt; method replaces the current interior value with &lt;code&gt;Default::default()&lt;/code&gt; and returns the replaced value.</source>
          <target state="translated">对于实现类型的 &lt;code&gt;Default&lt;/code&gt; ，则 &lt;code&gt;take&lt;/code&gt; 方法替换当前内部值 &lt;code&gt;Default::default()&lt;/code&gt; 并返回替换值。</target>
        </trans-unit>
        <trans-unit id="4574e9c5392d2a058aa0fe0986ed5ef30945f81c" translate="yes" xml:space="preserve">
          <source>For types that implement the &lt;code&gt;Copy&lt;/code&gt; trait, like &lt;code&gt;i32&lt;/code&gt;, the values are copied into the hash map. For owned values like &lt;code&gt;String&lt;/code&gt;, the values will be moved and the hash map will be the owner of those values, as demonstrated in Listing 8-22.</source>
          <target state="translated">对于实现 &lt;code&gt;Copy&lt;/code&gt; 特征的类型，例如 &lt;code&gt;i32&lt;/code&gt; ，将值复制到哈希图中。对于诸如 &lt;code&gt;String&lt;/code&gt; 之类的拥有的值，这些值将被移动，并且哈希映射将成为这些值的所有者，如清单8-22所示。</target>
        </trans-unit>
        <trans-unit id="bbf61af8911febf6c19fe2a100148eac8f5a6b3d" translate="yes" xml:space="preserve">
          <source>For zero-sized &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;n == 0&lt;/code&gt;, may return either of &lt;code&gt;Ok&lt;/code&gt; or &lt;code&gt;Err&lt;/code&gt;, but will &lt;em&gt;not&lt;/em&gt; yield undefined behavior.</source>
          <target state="translated">对于零大小的 &lt;code&gt;T&lt;/code&gt; 或 &lt;code&gt;n == 0&lt;/code&gt; ，可以返回 &lt;code&gt;Ok&lt;/code&gt; 或 &lt;code&gt;Err&lt;/code&gt; 之一，但&lt;em&gt;不会&lt;/em&gt;产生未定义的行为。</target>
        </trans-unit>
        <trans-unit id="af9ebebeac598bb279c7f6871c1d2e5ff692e690" translate="yes" xml:space="preserve">
          <source>For zero-sized &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;n_new == 0&lt;/code&gt;, may return either of &lt;code&gt;Ok&lt;/code&gt; or &lt;code&gt;Err&lt;/code&gt;, but will &lt;em&gt;not&lt;/em&gt; yield undefined behavior.</source>
          <target state="translated">对于零大小的 &lt;code&gt;T&lt;/code&gt; 或 &lt;code&gt;n_new == 0&lt;/code&gt; ，可以返回 &lt;code&gt;Ok&lt;/code&gt; 或 &lt;code&gt;Err&lt;/code&gt; 之一，但&lt;em&gt;不会&lt;/em&gt;产生未定义的行为。</target>
        </trans-unit>
        <trans-unit id="d17558f17d3ddd4a1525907aa24c803b6d14144e" translate="yes" xml:space="preserve">
          <source>For zero-sized &lt;code&gt;T&lt;/code&gt;, may return either of &lt;code&gt;Ok&lt;/code&gt; or &lt;code&gt;Err&lt;/code&gt;, but will &lt;em&gt;not&lt;/em&gt; yield undefined behavior.</source>
          <target state="translated">对于零大小的 &lt;code&gt;T&lt;/code&gt; ，可以返回 &lt;code&gt;Ok&lt;/code&gt; 或 &lt;code&gt;Err&lt;/code&gt; 之一，但&lt;em&gt;不会&lt;/em&gt;产生未定义的行为。</target>
        </trans-unit>
        <trans-unit id="0ed657cacf2452e2d4d87aa4e0d79c2d3adc9373" translate="yes" xml:space="preserve">
          <source>For zero-sized values, the &lt;code&gt;Box&lt;/code&gt; pointer still has to be &lt;a href=&quot;../ptr/index#safety&quot;&gt;valid&lt;/a&gt; for reads and writes and sufficiently aligned. In particular, casting any aligned non-zero integer literal to a raw pointer produces a valid pointer, but a pointer pointing into previously allocated memory that since got freed is not valid. The recommended way to build a Box to a ZST if &lt;code&gt;Box::new&lt;/code&gt; cannot be used is to use &lt;a href=&quot;../ptr/struct.nonnull#method.dangling&quot;&gt;&lt;code&gt;ptr::NonNull::dangling&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">对于零大小的值， &lt;code&gt;Box&lt;/code&gt; 指针仍然必须对读取和写入&lt;a href=&quot;../ptr/index#safety&quot;&gt;有效&lt;/a&gt;，并且必须充分对齐。特别是，将任何对齐的非零整数文字转换为原始指针都会产生有效的指针，但指向先前分配的内存（由于释放后的指针）的指针无效。如果不能使用 &lt;code&gt;Box::new&lt;/code&gt; 则建议将方法构建为ZST的Box的方法是使用&lt;a href=&quot;../ptr/struct.nonnull#method.dangling&quot;&gt; &lt;code&gt;ptr::NonNull::dangling&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff122858fad706f1ffd37eb8ed4d2f766a5f5467" translate="yes" xml:space="preserve">
          <source>Forces the child process to exit. If the child has already exited, an &lt;a href=&quot;../io/enum.errorkind#variant.InvalidInput&quot;&gt;&lt;code&gt;InvalidInput&lt;/code&gt;&lt;/a&gt; error is returned.</source>
          <target state="translated">强制退出子进程。如果孩子已经退出，则返回&lt;a href=&quot;../io/enum.errorkind#variant.InvalidInput&quot;&gt; &lt;code&gt;InvalidInput&lt;/code&gt; &lt;/a&gt;错误。</target>
        </trans-unit>
        <trans-unit id="6018bb8b2d8928af0c1e3c1dd75506aa08720534" translate="yes" xml:space="preserve">
          <source>Forces the evaluation of this lazy value and returns a reference to result. This is equivalent to the &lt;code&gt;Deref&lt;/code&gt; impl, but is explicit.</source>
          <target state="translated">强制对此延迟值进行评估，并返回对结果的引用。这等效于 &lt;code&gt;Deref&lt;/code&gt; impl，但是显式的。</target>
        </trans-unit>
        <trans-unit id="978264598af5c4bf8957f52229b3577a194aae8b" translate="yes" xml:space="preserve">
          <source>Forces the evaluation of this lazy value and returns a reference to the result.</source>
          <target state="translated">强制评估这个懒惰值,并返回一个结果的引用。</target>
        </trans-unit>
        <trans-unit id="c60cb66cd46faeac62256677171f90f9aab99b37" translate="yes" xml:space="preserve">
          <source>Forces the length of the vector to &lt;code&gt;new_len&lt;/code&gt;.</source>
          <target state="translated">将向量的长度强制为 &lt;code&gt;new_len&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0d9370d24ba125a97c3acc14af7d6d55608591f2" translate="yes" xml:space="preserve">
          <source>Forcibly captures a disabled backtrace, regardless of environment variable configuration.</source>
          <target state="translated">强制捕获一个被禁用的回溯,而不考虑环境变量的配置。</target>
        </trans-unit>
        <trans-unit id="b736a57c50ca69a743556a035e80056efa69db13" translate="yes" xml:space="preserve">
          <source>Forcibly captures a full backtrace, regardless of environment variable configuration.</source>
          <target state="translated">强制捕获完整的回溯,无论环境变量配置如何。</target>
        </trans-unit>
        <trans-unit id="0a683f099c5cd32d972be2f3a92f5a845ceb5fd5" translate="yes" xml:space="preserve">
          <source>Foreword</source>
          <target state="translated">Foreword</target>
        </trans-unit>
        <trans-unit id="863ae1b2291a228e3b8c16c150fe043e32bd712d" translate="yes" xml:space="preserve">
          <source>Formally, the equality must be (for all &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;):</source>
          <target state="translated">形式上，等式必须为（对于所有 &lt;code&gt;a&lt;/code&gt; ， &lt;code&gt;b&lt;/code&gt; 和 &lt;code&gt;c&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="f923413c464f494d3946508ce5aa107762608185" translate="yes" xml:space="preserve">
          <source>Format the program and arguments of a Command for display. Any non-utf8 data is lossily converted using the utf8 replacement character.</source>
          <target state="translated">对命令的程序和参数进行格式化显示。任何非utf8数据都会使用utf8替换字符进行损失转换。</target>
        </trans-unit>
        <trans-unit id="140d331380e094ef881c81486bb2b41687984370" translate="yes" xml:space="preserve">
          <source>Format trait for an empty format, &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">空格式 &lt;code&gt;{}&lt;/code&gt; 的格式特征。</target>
        </trans-unit>
        <trans-unit id="6eb3be022b65dd3036c2394343c5d04639125d42" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter.</source>
          <target state="translated">使用给定的格式器对值进行格式化。</target>
        </trans-unit>
        <trans-unit id="5e15b9e7259e75f0fde9e02ca48db7008320ae92" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;../../../fmt/trait.debug#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">使用给定的格式化程序格式化该值。&lt;a href=&quot;../../../fmt/trait.debug#tymethod.fmt&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3864f640d862bc0209e506aa2fd5d8114b920b88" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;../../fmt/trait.debug#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">使用给定的格式化程序格式化该值。&lt;a href=&quot;../../fmt/trait.debug#tymethod.fmt&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="891ad2cdac8c5121fa8020663e91799426bda036" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;../../fmt/trait.display#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">使用给定的格式化程序格式化该值。&lt;a href=&quot;../../fmt/trait.display#tymethod.fmt&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="22b050e95494640f18b8653fa928145e7860a473" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;../fmt/trait.debug#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">使用给定的格式化程序格式化该值。&lt;a href=&quot;../fmt/trait.debug#tymethod.fmt&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ce70014ec2bb51274cea17fec1b3f94b02c50aa6" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;../fmt/trait.display#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">使用给定的格式化程序格式化该值。&lt;a href=&quot;../fmt/trait.display#tymethod.fmt&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fdf24f4d118b813631e61dbcdfc4c5c165a520a0" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;fmt/trait.debug#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">使用给定的格式化程序格式化该值。&lt;a href=&quot;fmt/trait.debug#tymethod.fmt&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="87c49f82e8dbca91bb2bb8879fec94750d470c75" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;fmt/trait.display#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">使用给定的格式化程序格式化该值。&lt;a href=&quot;fmt/trait.display#tymethod.fmt&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f5cc6401fc7f1f08cc68b76776fcc845c5120ae5" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;trait.debug#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">使用给定的格式化程序格式化该值。&lt;a href=&quot;trait.debug#tymethod.fmt&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="67729135661825a254f0d83fb3dccb9f72a3be19" translate="yes" xml:space="preserve">
          <source>Formats the value using the given formatter. &lt;a href=&quot;trait.display#tymethod.fmt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">使用给定的格式化程序格式化该值。&lt;a href=&quot;trait.display#tymethod.fmt&quot;&gt;阅读更多&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1ae42b52d64655839743c546b646a36f423ad845" translate="yes" xml:space="preserve">
          <source>Formatter</source>
          <target state="translated">Formatter</target>
        </trans-unit>
        <trans-unit id="5f8152f579616a1e2e7f90e547a18b826268e31e" translate="yes" xml:space="preserve">
          <source>Formatter::align</source>
          <target state="translated">Formatter::align</target>
        </trans-unit>
        <trans-unit id="9a6def787783ae143ee16edccd5c0a001ed91243" translate="yes" xml:space="preserve">
          <source>Formatter::alternate</source>
          <target state="translated">Formatter::alternate</target>
        </trans-unit>
        <trans-unit id="4ff01afb51f457cc2d85ff4291e6511c069e18e7" translate="yes" xml:space="preserve">
          <source>Formatter::borrow</source>
          <target state="translated">Formatter::borrow</target>
        </trans-unit>
        <trans-unit id="5d337fb59b434ef65405e46b43dd9298cf7d28ce" translate="yes" xml:space="preserve">
          <source>Formatter::borrow_mut</source>
          <target state="translated">Formatter::borrow_mut</target>
        </trans-unit>
        <trans-unit id="423e00ac2e2adbcb9bbef0b2b89bfd31aee767fd" translate="yes" xml:space="preserve">
          <source>Formatter::debug_list</source>
          <target state="translated">Formatter::debug_list</target>
        </trans-unit>
        <trans-unit id="2d2789bd6c0bf82cab25262ef760ac2db9d9dd87" translate="yes" xml:space="preserve">
          <source>Formatter::debug_map</source>
          <target state="translated">Formatter::debug_map</target>
        </trans-unit>
        <trans-unit id="a9ccdf007c23e02e293201f75e9a5c875ae07f89" translate="yes" xml:space="preserve">
          <source>Formatter::debug_set</source>
          <target state="translated">Formatter::debug_set</target>
        </trans-unit>
        <trans-unit id="71c2bd0a8b48dfeec742af4daf6fb65d4f40ffc9" translate="yes" xml:space="preserve">
          <source>Formatter::debug_struct</source>
          <target state="translated">Formatter::debug_struct</target>
        </trans-unit>
        <trans-unit id="00c1bd1d6a90da612560b76c5bf3d45e6291fc98" translate="yes" xml:space="preserve">
          <source>Formatter::debug_tuple</source>
          <target state="translated">Formatter::debug_tuple</target>
        </trans-unit>
        <trans-unit id="6fc7f1045521e6b9d4ff4360c00a2593331911c9" translate="yes" xml:space="preserve">
          <source>Formatter::fill</source>
          <target state="translated">Formatter::fill</target>
        </trans-unit>
        <trans-unit id="993174c205f2615b87f6bd9b99a1f83db77e9d92" translate="yes" xml:space="preserve">
          <source>Formatter::flags</source>
          <target state="translated">Formatter::flags</target>
        </trans-unit>
        <trans-unit id="1de3e4496f08f380dafc2f2099cb602dae373966" translate="yes" xml:space="preserve">
          <source>Formatter::from</source>
          <target state="translated">Formatter::from</target>
        </trans-unit>
        <trans-unit id="f20f7b5d51f57e44b5ca6cd8ab62bf45261e1970" translate="yes" xml:space="preserve">
          <source>Formatter::into</source>
          <target state="translated">Formatter::into</target>
        </trans-unit>
        <trans-unit id="8d6e0f2524599a9851fc44585f5a2d817e72ae6d" translate="yes" xml:space="preserve">
          <source>Formatter::pad</source>
          <target state="translated">Formatter::pad</target>
        </trans-unit>
        <trans-unit id="ac6ba2e959a06c5071bcc16b886f8d5d6cd7965f" translate="yes" xml:space="preserve">
          <source>Formatter::pad_integral</source>
          <target state="translated">Formatter::pad_integral</target>
        </trans-unit>
        <trans-unit id="2403b952317411744ba831a429e9297ab1c0e3b2" translate="yes" xml:space="preserve">
          <source>Formatter::precision</source>
          <target state="translated">Formatter::precision</target>
        </trans-unit>
        <trans-unit id="1f3d9e3d7faa47d0e222f72c63a039a75dc5c805" translate="yes" xml:space="preserve">
          <source>Formatter::sign_aware_zero_pad</source>
          <target state="translated">Formatter::sign_aware_zero_pad</target>
        </trans-unit>
        <trans-unit id="4177fcc3cea65ad6e0c1467fe2213bc4804199f2" translate="yes" xml:space="preserve">
          <source>Formatter::sign_minus</source>
          <target state="translated">Formatter::sign_minus</target>
        </trans-unit>
        <trans-unit id="29a954cef5d969b0ffeda4cda9b1e514ed59e128" translate="yes" xml:space="preserve">
          <source>Formatter::sign_plus</source>
          <target state="translated">Formatter::sign_plus</target>
        </trans-unit>
        <trans-unit id="4109341d852a7ae64ee2861415e3d2d47fd3985d" translate="yes" xml:space="preserve">
          <source>Formatter::try_from</source>
          <target state="translated">Formatter::try_from</target>
        </trans-unit>
        <trans-unit id="c7ea88c068c207062576e99264d8fe9db762e2ba" translate="yes" xml:space="preserve">
          <source>Formatter::try_into</source>
          <target state="translated">Formatter::try_into</target>
        </trans-unit>
        <trans-unit id="0770a06c1590caabbc6a280181ab045268a48d8b" translate="yes" xml:space="preserve">
          <source>Formatter::type_id</source>
          <target state="translated">Formatter::type_id</target>
        </trans-unit>
        <trans-unit id="0513c6c9a8b654eb3c836130d1141c065212130f" translate="yes" xml:space="preserve">
          <source>Formatter::width</source>
          <target state="translated">Formatter::width</target>
        </trans-unit>
        <trans-unit id="784e355bd41c9f5795702e1d4aa5cf5a90fcf70e" translate="yes" xml:space="preserve">
          <source>Formatter::write_char</source>
          <target state="translated">Formatter::write_char</target>
        </trans-unit>
        <trans-unit id="75462a0bc374b0c8071f850b3b54b93abf9106a0" translate="yes" xml:space="preserve">
          <source>Formatter::write_fmt</source>
          <target state="translated">Formatter::write_fmt</target>
        </trans-unit>
        <trans-unit id="b1c405b0e91eb401eaac8c2242a8de1a2f4c813d" translate="yes" xml:space="preserve">
          <source>Formatter::write_str</source>
          <target state="translated">Formatter::write_str</target>
        </trans-unit>
        <trans-unit id="177933136546eb5ae389ea27da971803b35a5e96" translate="yes" xml:space="preserve">
          <source>Formatting Parameters</source>
          <target state="translated">格式化参数</target>
        </trans-unit>
        <trans-unit id="0e705959b12f9001f69d3fd6ef3e8868e1a3fcac" translate="yes" xml:space="preserve">
          <source>Formatting traits</source>
          <target state="translated">格式化特征</target>
        </trans-unit>
        <trans-unit id="210abaf17ff3ec5eb2c7af6e5b16de32d6e6ae30" translate="yes" xml:space="preserve">
          <source>Forms a raw slice from a pointer and a length.</source>
          <target state="translated">从一个指针和一个长度形成一个原始切片。</target>
        </trans-unit>
        <trans-unit id="ea94791ea16dd8ff76446a6806bef950d2a35dda" translate="yes" xml:space="preserve">
          <source>Forms a slice from a pointer and a length.</source>
          <target state="translated">从一个指针和一个长度形成一个切片。</target>
        </trans-unit>
        <trans-unit id="06be2fafa00fc2fe5a6c9c357e8e8125e9d52b63" translate="yes" xml:space="preserve">
          <source>Forms of conditional compilation</source>
          <target state="translated">有条件的汇编形式</target>
        </trans-unit>
        <trans-unit id="95db96d50ddd63cc755c744c881b8149aa6240cb" translate="yes" xml:space="preserve">
          <source>Fortunately, &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;em&gt;is&lt;/em&gt; a type like &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; that is safe to use in concurrent situations. The &lt;em&gt;a&lt;/em&gt; stands for &lt;em&gt;atomic&lt;/em&gt;, meaning it&amp;rsquo;s an &lt;em&gt;atomically reference counted&lt;/em&gt; type. Atomics are an additional kind of concurrency primitive that we won&amp;rsquo;t cover in detail here: see the standard library documentation for &lt;a href=&quot;../std/sync/atomic/index&quot;&gt;&lt;code&gt;std::sync::atomic&lt;/code&gt;&lt;/a&gt; for more details. At this point, you just need to know that atomics work like primitive types but are safe to share across threads.</source>
          <target state="translated">幸运的是， &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; &lt;em&gt;是&lt;/em&gt;类似于 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 的类型，可以在并发情况下安全使用。的&lt;em&gt;一个&lt;/em&gt;代表&lt;em&gt;原子&lt;/em&gt;，这意味着它是一个&lt;em&gt;原子引用计数&lt;/em&gt;类型。原子是并发原语的另一种类型，我们在这里不做详细介绍：有关更多详细信息，请参见&lt;a href=&quot;../std/sync/atomic/index&quot;&gt; &lt;code&gt;std::sync::atomic&lt;/code&gt; &lt;/a&gt;的标准库文档。此时，您只需要知道原子就像原始类型一样工作，但是可以安全地在线程之间共享。</target>
        </trans-unit>
        <trans-unit id="5d73377b70640496419f6407086a0d313c7e7ff8" translate="yes" xml:space="preserve">
          <source>Fortunately, &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;em&gt;is&lt;/em&gt; a type like &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; that is safe to use in concurrent situations. The &lt;em&gt;a&lt;/em&gt; stands for &lt;em&gt;atomic&lt;/em&gt;, meaning it&amp;rsquo;s an &lt;em&gt;atomically reference counted&lt;/em&gt; type. Atomics are an additional kind of concurrency primitive that we won&amp;rsquo;t cover in detail here: see the standard library documentation for &lt;code&gt;std::sync::atomic&lt;/code&gt; for more details. At this point, you just need to know that atomics work like primitive types but are safe to share across threads.</source>
          <target state="translated">幸运的是， &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt; &lt;em&gt;是&lt;/em&gt;类似于 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 的类型，可以在并发情况下安全使用。的&lt;em&gt;一个&lt;/em&gt;代表&lt;em&gt;原子&lt;/em&gt;，这意味着它是一个&lt;em&gt;原子引用计数&lt;/em&gt;类型。原子是并发原语的另一种类型，我们在这里不做详细介绍：有关更多详细信息，请参见 &lt;code&gt;std::sync::atomic&lt;/code&gt; 的标准库文档。此时，您只需要知道原子就像原始类型一样工作，但是可以安全地在线程之间共享。</target>
        </trans-unit>
        <trans-unit id="666085c7aedfa1058109fb338307fe9135fa126f" translate="yes" xml:space="preserve">
          <source>Fortunately, Rust provides another, more reliable way to break out of a loop. You can place the &lt;code&gt;break&lt;/code&gt; keyword within the loop to tell the program when to stop executing the loop. Recall that we did this in the guessing game in the &lt;a href=&quot;ch02-00-guessing-game-tutorial#quitting-after-a-correct-guess&quot;&gt;&amp;ldquo;Quitting After a Correct Guess&amp;rdquo;&lt;/a&gt; section of Chapter 2 to exit the program when the user won the game by guessing the correct number.</source>
          <target state="translated">幸运的是，Rust提供了另一种更可靠的突破循环的方法。您可以将 &lt;code&gt;break&lt;/code&gt; 关键字放入循环中，以告知程序何时停止执行循环。回想一下，我们是在第2章&lt;a href=&quot;ch02-00-guessing-game-tutorial#quitting-after-a-correct-guess&quot;&gt;&amp;ldquo;在正确的猜测后退出&amp;rdquo;&lt;/a&gt;部分的猜测游戏中执行此操作的，以在用户通过猜测正确的数字赢得游戏时退出程序。</target>
        </trans-unit>
        <trans-unit id="2cb7a99620b68db8c37724516fdd41d698381b5f" translate="yes" xml:space="preserve">
          <source>Fortunately, another solution is available to us. We can create a struct that will hold the closure and the resulting value of calling the closure. The struct will execute the closure only if we need the resulting value, and it will cache the resulting value so the rest of our code doesn&amp;rsquo;t have to be responsible for saving and reusing the result. You may know this pattern as &lt;em&gt;memoization&lt;/em&gt; or &lt;em&gt;lazy evaluation&lt;/em&gt;.</source>
          <target state="translated">幸运的是，我们可以使用另一种解决方案。我们可以创建一个结构，该结构将保存闭包以及调用闭包的结果值。该结构仅在需要结果值时才执行闭包，并且将缓存结果值，因此我们的其余代码不必负责保存和重用结果。您可能将此模式称为&lt;em&gt;记忆&lt;/em&gt;或&lt;em&gt;惰性评估&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f7a735d42f1842468e27de670a61d95c695c7d77" translate="yes" xml:space="preserve">
          <source>Fortunately, you can access elements in a string in other ways.</source>
          <target state="translated">幸运的是,你可以用其他方式访问字符串中的元素。</target>
        </trans-unit>
        <trans-unit id="26c62d0f8742a3291654c368905359570c6ea25b" translate="yes" xml:space="preserve">
          <source>Forwards to the method defined on the type &lt;code&gt;Any&lt;/code&gt;.</source>
          <target state="translated">转发到类型 &lt;code&gt;Any&lt;/code&gt; 上定义的方法。</target>
        </trans-unit>
        <trans-unit id="24cfeaa5136f131a42d0f730ceb00f25ca26cc8d" translate="yes" xml:space="preserve">
          <source>Forwards to the method defined on the type &lt;code&gt;dyn Error&lt;/code&gt;.</source>
          <target state="translated">转发到在 &lt;code&gt;dyn Error&lt;/code&gt; 类型上定义的方法。</target>
        </trans-unit>
        <trans-unit id="0679572252c2b655ac576ff11e583e4913c131ee" translate="yes" xml:space="preserve">
          <source>Fourth, we end the line with a semicolon (&lt;code&gt;;&lt;/code&gt;), which indicates that this expression is over and the next one is ready to begin. Most lines of Rust code end with a semicolon.</source>
          <target state="translated">第四，我们以分号（ &lt;code&gt;;&lt;/code&gt; ）结束该行，这表明该表达式已结束，下一个表达式已准备好开始。Rust代码的大多数行以分号结尾。</target>
        </trans-unit>
        <trans-unit id="e91e4dcc96ac0d3266337d9de8422f466122555f" translate="yes" xml:space="preserve">
          <source>Fourth, we use &lt;code&gt;expect&lt;/code&gt; repeatedly to handle different errors, and if the user runs our program without specifying enough arguments, they&amp;rsquo;ll get an &lt;code&gt;index out of bounds&lt;/code&gt; error from Rust that doesn&amp;rsquo;t clearly explain the problem. It would be best if all the error-handling code were in one place so future maintainers had only one place to consult in the code if the error-handling logic needed to change. Having all the error-handling code in one place will also ensure that we&amp;rsquo;re printing messages that will be meaningful to our end users.</source>
          <target state="translated">第四，我们反复使用 &lt;code&gt;expect&lt;/code&gt; 处理不同的错误，如果用户在未指定足够参数的情况下运行我们的程序，则他们将从Rust中获得无法明确解释问题的 &lt;code&gt;index out of bounds&lt;/code&gt; 错误。最好将所有错误处理代码都放在一个位置，这样如果需要更改错误处理逻辑，将来的维护者只能在代码中查询一个位置。将所有错误处理代码都放在一个地方还可以确保我们打印出对最终用户有意义的消息。</target>
        </trans-unit>
        <trans-unit id="ed80c9c6442c4ef597a2552dbc33ed2f6b8de23a" translate="yes" xml:space="preserve">
          <source>FpCategory</source>
          <target state="translated">FpCategory</target>
        </trans-unit>
        <trans-unit id="c5c59edf4deff28b67b52b7a2d8ad2d144fc15b7" translate="yes" xml:space="preserve">
          <source>FpCategory::borrow</source>
          <target state="translated">FpCategory::borrow</target>
        </trans-unit>
        <trans-unit id="d23597cd1aa75ec546253dcec332bbc22c760f94" translate="yes" xml:space="preserve">
          <source>FpCategory::borrow_mut</source>
          <target state="translated">FpCategory::borrow_mut</target>
        </trans-unit>
        <trans-unit id="751583c9571b8ec42bb13ab3d996f5382f516c44" translate="yes" xml:space="preserve">
          <source>FpCategory::clone</source>
          <target state="translated">FpCategory::clone</target>
        </trans-unit>
        <trans-unit id="e4a9c0c7fcd7d91e6ce8dc4a84468c8dff226fb5" translate="yes" xml:space="preserve">
          <source>FpCategory::clone_from</source>
          <target state="translated">FpCategory::clone_from</target>
        </trans-unit>
        <trans-unit id="b09dd4eed7eb664a0468a101965945f86157a4f7" translate="yes" xml:space="preserve">
          <source>FpCategory::clone_into</source>
          <target state="translated">FpCategory::clone_into</target>
        </trans-unit>
        <trans-unit id="e5a224baf80bccef6b2c64c70bf061c66d0be643" translate="yes" xml:space="preserve">
          <source>FpCategory::eq</source>
          <target state="translated">FpCategory::eq</target>
        </trans-unit>
        <trans-unit id="77d96d469c7820ed9e8e2550859bf5e231b036bf" translate="yes" xml:space="preserve">
          <source>FpCategory::fmt</source>
          <target state="translated">FpCategory::fmt</target>
        </trans-unit>
        <trans-unit id="d3c55faf6a766af5731aad29ee9bd29b2c453928" translate="yes" xml:space="preserve">
          <source>FpCategory::from</source>
          <target state="translated">FpCategory::from</target>
        </trans-unit>
        <trans-unit id="69b2c07f9aa6d8ad6d30706f48ef52d237b2ba0a" translate="yes" xml:space="preserve">
          <source>FpCategory::into</source>
          <target state="translated">FpCategory::into</target>
        </trans-unit>
        <trans-unit id="f38a3329d567847d1d7020b8f9012bbd294a84cd" translate="yes" xml:space="preserve">
          <source>FpCategory::ne</source>
          <target state="translated">FpCategory::ne</target>
        </trans-unit>
        <trans-unit id="e71fe5458996e5a849fc677ae5804fc42c3dccda" translate="yes" xml:space="preserve">
          <source>FpCategory::to_owned</source>
          <target state="translated">FpCategory::to_owned</target>
        </trans-unit>
        <trans-unit id="54a1083e9a89cf3ecfe165675d7e0ab953ccd2ff" translate="yes" xml:space="preserve">
          <source>FpCategory::try_from</source>
          <target state="translated">FpCategory::try_from</target>
        </trans-unit>
        <trans-unit id="bbaf3ef7ecd842bc58b2772d5b932f8c39fd8488" translate="yes" xml:space="preserve">
          <source>FpCategory::try_into</source>
          <target state="translated">FpCategory::try_into</target>
        </trans-unit>
        <trans-unit id="ccefd29d45a4e40d6e9d86bb94af58e1a57d4c4b" translate="yes" xml:space="preserve">
          <source>FpCategory::type_id</source>
          <target state="translated">FpCategory::type_id</target>
        </trans-unit>
        <trans-unit id="a9d589b62118d02ae561f6231ff20e78ff11bc84" translate="yes" xml:space="preserve">
          <source>Fran&amp;ccedil;ais</source>
          <target state="translated">Fran&amp;ccedil;ais</target>
        </trans-unit>
        <trans-unit id="b358be1e7ac10187955efc826d6d6dee79296909" translate="yes" xml:space="preserve">
          <source>Free item</source>
          <target state="translated">免费项目</target>
        </trans-unit>
        <trans-unit id="3f66052a107eaf9bae7cad0f61fb462f47ec2c47" translate="yes" xml:space="preserve">
          <source>From</source>
          <target state="translated">From</target>
        </trans-unit>
        <trans-unit id="594a1d99ee61c47df541cb8769ebf939c8303d7b" translate="yes" xml:space="preserve">
          <source>From &lt;code&gt;&amp;amp;T&lt;/code&gt; to &lt;code&gt;&amp;amp;U&lt;/code&gt; when &lt;code&gt;T: Deref&amp;lt;Target=U&amp;gt;&lt;/code&gt;</source>
          <target state="translated">当 &lt;code&gt;T: Deref&amp;lt;Target=U&amp;gt;&lt;/code&gt; 时从 &lt;code&gt;&amp;amp;T&lt;/code&gt; 到 &lt;code&gt;&amp;amp;U&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="08bb11df769057fd0b8c167b5ec397162b1aeadb" translate="yes" xml:space="preserve">
          <source>From &lt;code&gt;&amp;amp;mut T&lt;/code&gt; to &lt;code&gt;&amp;amp;U&lt;/code&gt; when &lt;code&gt;T: Deref&amp;lt;Target=U&amp;gt;&lt;/code&gt;</source>
          <target state="translated">当 &lt;code&gt;T: Deref&amp;lt;Target=U&amp;gt;&lt;/code&gt; 时从 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; 到 &lt;code&gt;&amp;amp;U&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e62732420027526966136d3f7e0dfec52557b634" translate="yes" xml:space="preserve">
          <source>From &lt;code&gt;&amp;amp;mut T&lt;/code&gt; to &lt;code&gt;&amp;amp;mut U&lt;/code&gt; when &lt;code&gt;T: DerefMut&amp;lt;Target=U&amp;gt;&lt;/code&gt;</source>
          <target state="translated">当 &lt;code&gt;T: DerefMut&amp;lt;Target=U&amp;gt;&lt;/code&gt; 时从 &lt;code&gt;&amp;amp;mut T&lt;/code&gt; 到 &lt;code&gt;&amp;amp;mut U&lt;/code&gt; ：DerefMut &amp;lt;Target = U&amp;gt;</target>
        </trans-unit>
        <trans-unit id="5cc6d703e34af866105ca191df0b36dc89356e81" translate="yes" xml:space="preserve">
          <source>From there, clearly FIRST(M) can include any token from SEP_SET(M) or ALPHA_SET(M), and if the complex NT match is nonempty, then any token starting FIRST(&lt;code&gt;tt ...&lt;/code&gt;) could work too. The last piece to consider is &amp;epsilon;. SEP_SET(M) and FIRST(&lt;code&gt;tt ...&lt;/code&gt;) \ {&amp;epsilon;} cannot contain &amp;epsilon;, but ALPHA_SET(M) could. Hence, this definition allows M to accept &amp;epsilon; if and only if &amp;epsilon; &amp;isin; ALPHA_SET(M) does. This is correct because for M to accept &amp;epsilon; in the complex NT case, both the complex NT and &amp;alpha; must accept it. If OP = &lt;code&gt;+&lt;/code&gt;, meaning that the complex NT cannot be empty, then by definition &amp;epsilon; &amp;notin; ALPHA_SET(M). Otherwise, the complex NT can accept zero repetitions, and then ALPHA_SET(M) = FOLLOW(&lt;code&gt;&amp;alpha;&lt;/code&gt;). So this definition is correct with respect to \varepsilon as well.</source>
          <target state="translated">从那里开始，显然FIRST（M）可以包含SEP_SET（M）或ALPHA_SET（M）中的任何令牌，并且如果复杂的NT匹配为非空，那么任何以FIRST（ &lt;code&gt;tt ...&lt;/code&gt; ）开头的令牌也可以工作。最后要考虑的是&amp;epsilon;。 SEP_SET（M）和FIRST（ &lt;code&gt;tt ...&lt;/code&gt; ）\ {&amp;epsilon;}不能包含&amp;epsilon;，但是ALPHA_SET（M）可以。因此，当且仅当&amp;epsilon;&amp;isin;ALPHA_SET（M）接受时，此定义才允许M接受&amp;epsilon;。这是正确的，因为要使M在复数NT情况下接受&amp;epsilon;，​​复数NT和&amp;alpha;都必须接受它。如果OP = &lt;code&gt;+&lt;/code&gt; ，则意味着复数NT不能为空，则根据定义&amp;epsilon;&amp;notin;ALPHA_SET（M）。否则，复数NT可以接受零个重复，然后ALPHA_SET（M）= FOLLOW（ &lt;code&gt;&amp;alpha;&lt;/code&gt; ）。因此，此定义对于\ varepsilon也是正确的。</target>
        </trans-unit>
        <trans-unit id="6307b5e07877494d1ce0b104a2d8b0a5b885f84f" translate="yes" xml:space="preserve">
          <source>From these, you can see that the first argument is a format string. It is required by the compiler for this to be a string literal; it cannot be a variable passed in (in order to perform validity checking). The compiler will then parse the format string and determine if the list of arguments provided is suitable to pass to this format string.</source>
          <target state="translated">从这些可以看出,第一个参数是一个格式字符串。编译器要求这是一个字符串文字,它不能是一个传递进来的变量(为了进行有效性检查)。然后,编译器将对格式字符串进行解析,并确定所提供的参数列表是否适合传递给这个格式字符串。</target>
        </trans-unit>
        <trans-unit id="636e988ae72ddba156e347bc59d0f315352542a2" translate="yes" xml:space="preserve">
          <source>From::from</source>
          <target state="translated">From::from</target>
        </trans-unit>
        <trans-unit id="08e29d1fb00c3b7e4f55ea6c2152be52cb9cffd5" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError</source>
          <target state="translated">FromBytesWithNulError</target>
        </trans-unit>
        <trans-unit id="0fa886d5bcda7ff44295308c06a19bb9f2ca1ef2" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::borrow</source>
          <target state="translated">FromBytesWithNulError::borrow</target>
        </trans-unit>
        <trans-unit id="227e72c0ed27fb7c2db4228bdeaa7f1e2f4fbb2b" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::borrow_mut</source>
          <target state="translated">FromBytesWithNulError::borrow_mut</target>
        </trans-unit>
        <trans-unit id="917a76dd8d5ce07b2b32608e4fac2c07d85334ec" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::cause</source>
          <target state="translated">FromBytesWithNulError::cause</target>
        </trans-unit>
        <trans-unit id="d333ff8aac4bcb0b21149b90dd779023c26f7273" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::clone</source>
          <target state="translated">FromBytesWithNulError::clone</target>
        </trans-unit>
        <trans-unit id="da349bb088fcf13b909128e597aea220053fe70a" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::clone_from</source>
          <target state="translated">FromBytesWithNulError::clone_from</target>
        </trans-unit>
        <trans-unit id="e43ad4a91a8891363b5526c6aac70021b8e8b9f4" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::clone_into</source>
          <target state="translated">FromBytesWithNulError::clone_into</target>
        </trans-unit>
        <trans-unit id="fdc34d9df46754c7b93341a3863f600ff88ad5cd" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::description</source>
          <target state="translated">FromBytesWithNulError::description</target>
        </trans-unit>
        <trans-unit id="5258a1a84a0930cb189c0d18cfff3f7a1eb6f915" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::eq</source>
          <target state="translated">FromBytesWithNulError::eq</target>
        </trans-unit>
        <trans-unit id="b27518c7b2442b78dc66650a48141386af70ddd9" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::fmt</source>
          <target state="translated">FromBytesWithNulError::fmt</target>
        </trans-unit>
        <trans-unit id="69e350f5eddef56ca7534154dcbe130775e89c37" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::from</source>
          <target state="translated">FromBytesWithNulError::from</target>
        </trans-unit>
        <trans-unit id="830e5d4f61a30595ce8e6e3f78c6591c5a9b7752" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::into</source>
          <target state="translated">FromBytesWithNulError::into</target>
        </trans-unit>
        <trans-unit id="6b9fdbfff68a5cffa6a5604dd67451bcca2d12ad" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::ne</source>
          <target state="translated">FromBytesWithNulError::ne</target>
        </trans-unit>
        <trans-unit id="2e862184199a6c230f9f2243d8e321f0f31557e5" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::source</source>
          <target state="translated">FromBytesWithNulError::source</target>
        </trans-unit>
        <trans-unit id="54f826f0c977e84bbff8ed219c9607014ac9fd7e" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::to_owned</source>
          <target state="translated">FromBytesWithNulError::to_owned</target>
        </trans-unit>
        <trans-unit id="d83ad93be5deca6785c67b79fcb106d01b5a7e60" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::to_string</source>
          <target state="translated">FromBytesWithNulError::to_string</target>
        </trans-unit>
        <trans-unit id="36df31fcad872818b05aba9f12c079035a34e814" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::try_from</source>
          <target state="translated">FromBytesWithNulError::try_from</target>
        </trans-unit>
        <trans-unit id="d7d718854b40de2a9cbbf7938bd184275c5fbb3b" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::try_into</source>
          <target state="translated">FromBytesWithNulError::try_into</target>
        </trans-unit>
        <trans-unit id="1bc03244b37f99bdcf813bff54e53e08450612a6" translate="yes" xml:space="preserve">
          <source>FromBytesWithNulError::type_id</source>
          <target state="translated">FromBytesWithNulError::type_id</target>
        </trans-unit>
        <trans-unit id="aeea3b1e1e881ee75f416d42b6a41418a5524277" translate="yes" xml:space="preserve">
          <source>FromFn</source>
          <target state="translated">FromFn</target>
        </trans-unit>
        <trans-unit id="c8518b8fb7e55cb8991e5e6afc3e72d086748ed8" translate="yes" xml:space="preserve">
          <source>FromFn::all</source>
          <target state="translated">FromFn::all</target>
        </trans-unit>
        <trans-unit id="ee215b3f9bdf8dee097ae6be066d5141a74c4422" translate="yes" xml:space="preserve">
          <source>FromFn::any</source>
          <target state="translated">FromFn::any</target>
        </trans-unit>
        <trans-unit id="ccf5f67c540d5b91e0949ed126f30addc417daf6" translate="yes" xml:space="preserve">
          <source>FromFn::borrow</source>
          <target state="translated">FromFn::borrow</target>
        </trans-unit>
        <trans-unit id="e13f389bbae0dab5ea909e4eb43686476caf7c83" translate="yes" xml:space="preserve">
          <source>FromFn::borrow_mut</source>
          <target state="translated">FromFn::borrow_mut</target>
        </trans-unit>
        <trans-unit id="ac215cf840365da8e5c15c7bdaf15be9e7bb130d" translate="yes" xml:space="preserve">
          <source>FromFn::by_ref</source>
          <target state="translated">FromFn::by_ref</target>
        </trans-unit>
        <trans-unit id="9395f4718e1c738177a77570adb7ed3222bbacab" translate="yes" xml:space="preserve">
          <source>FromFn::chain</source>
          <target state="translated">FromFn::chain</target>
        </trans-unit>
        <trans-unit id="b9afae70b69d87da33ee72ad265f7577a8b521f0" translate="yes" xml:space="preserve">
          <source>FromFn::clone</source>
          <target state="translated">FromFn::clone</target>
        </trans-unit>
        <trans-unit id="f5d858a83a4b11765ad648f861ff5231f437bd27" translate="yes" xml:space="preserve">
          <source>FromFn::clone_from</source>
          <target state="translated">FromFn::clone_from</target>
        </trans-unit>
        <trans-unit id="b1269311c4f13149e8a6a84d90f870800d694c44" translate="yes" xml:space="preserve">
          <source>FromFn::clone_into</source>
          <target state="translated">FromFn::clone_into</target>
        </trans-unit>
        <trans-unit id="bb6aa8a11de5554807803affb28dee3aaf938492" translate="yes" xml:space="preserve">
          <source>FromFn::cloned</source>
          <target state="translated">FromFn::cloned</target>
        </trans-unit>
        <trans-unit id="9e2de70acc9938a364a71db569d88dd7084bb122" translate="yes" xml:space="preserve">
          <source>FromFn::cmp</source>
          <target state="translated">FromFn::cmp</target>
        </trans-unit>
        <trans-unit id="5dc944d29ed685b0903453522c86c34ab231d0d9" translate="yes" xml:space="preserve">
          <source>FromFn::collect</source>
          <target state="translated">FromFn::collect</target>
        </trans-unit>
        <trans-unit id="d23fcdf7cbb91c0e0f62994569131c297c4ddefc" translate="yes" xml:space="preserve">
          <source>FromFn::copied</source>
          <target state="translated">FromFn::copied</target>
        </trans-unit>
        <trans-unit id="3a168b114945b66f27edc167ced99723dbcea667" translate="yes" xml:space="preserve">
          <source>FromFn::count</source>
          <target state="translated">FromFn::count</target>
        </trans-unit>
        <trans-unit id="0f1dba887057a79ecd9d75a789118b1a760f1bf9" translate="yes" xml:space="preserve">
          <source>FromFn::cycle</source>
          <target state="translated">FromFn::cycle</target>
        </trans-unit>
        <trans-unit id="364eebc33448cd890e813a37012795c1cb46e143" translate="yes" xml:space="preserve">
          <source>FromFn::enumerate</source>
          <target state="translated">FromFn::enumerate</target>
        </trans-unit>
        <trans-unit id="25ecbb4825daa1bf477051b32ed08a14a60adb4e" translate="yes" xml:space="preserve">
          <source>FromFn::eq</source>
          <target state="translated">FromFn::eq</target>
        </trans-unit>
        <trans-unit id="893cabc068144c0b9718092e7068a32de2da2fab" translate="yes" xml:space="preserve">
          <source>FromFn::filter</source>
          <target state="translated">FromFn::filter</target>
        </trans-unit>
        <trans-unit id="c428a70eed23c8748e97d7b52c53163675f55635" translate="yes" xml:space="preserve">
          <source>FromFn::filter_map</source>
          <target state="translated">FromFn::filter_map</target>
        </trans-unit>
        <trans-unit id="93846947c2b596c22bfad404c3e09fd4600173a4" translate="yes" xml:space="preserve">
          <source>FromFn::find</source>
          <target state="translated">FromFn::find</target>
        </trans-unit>
        <trans-unit id="c2fa8bbc9e75620bd3f52ec77812c683d5720689" translate="yes" xml:space="preserve">
          <source>FromFn::find_map</source>
          <target state="translated">FromFn::find_map</target>
        </trans-unit>
        <trans-unit id="c247400a7e94cb47ecf9ec277ef05328b6da39a7" translate="yes" xml:space="preserve">
          <source>FromFn::flat_map</source>
          <target state="translated">FromFn::flat_map</target>
        </trans-unit>
        <trans-unit id="b8e395dd0daa535ba3a1b2d30ce2a2297e2749c0" translate="yes" xml:space="preserve">
          <source>FromFn::flatten</source>
          <target state="translated">FromFn::flatten</target>
        </trans-unit>
        <trans-unit id="291d5ac05a71cd905fd11a3c926116e9910a0f32" translate="yes" xml:space="preserve">
          <source>FromFn::fmt</source>
          <target state="translated">FromFn::fmt</target>
        </trans-unit>
        <trans-unit id="1d6bc4438b3ee6de07c8226628c01c605cc2c12f" translate="yes" xml:space="preserve">
          <source>FromFn::fold</source>
          <target state="translated">FromFn::fold</target>
        </trans-unit>
        <trans-unit id="b0cc978eb55c645b04d4748225713d097a016c16" translate="yes" xml:space="preserve">
          <source>FromFn::for_each</source>
          <target state="translated">FromFn::for_each</target>
        </trans-unit>
        <trans-unit id="696126195e64358c186e7c8c9ba70300c1a54795" translate="yes" xml:space="preserve">
          <source>FromFn::from</source>
          <target state="translated">FromFn::from</target>
        </trans-unit>
        <trans-unit id="9422f31b3fdd3444d7d9a657e431cfc6bf368554" translate="yes" xml:space="preserve">
          <source>FromFn::fuse</source>
          <target state="translated">FromFn::fuse</target>
        </trans-unit>
        <trans-unit id="f0898886063e02add23e81048db80e14869522c9" translate="yes" xml:space="preserve">
          <source>FromFn::ge</source>
          <target state="translated">FromFn::ge</target>
        </trans-unit>
        <trans-unit id="938bc9b27931508db8e9ec4ee7e2ecfffcce85a9" translate="yes" xml:space="preserve">
          <source>FromFn::gt</source>
          <target state="translated">FromFn::gt</target>
        </trans-unit>
        <trans-unit id="5f5242ca11d2be4a93763ad44cf5a1901bba1038" translate="yes" xml:space="preserve">
          <source>FromFn::inspect</source>
          <target state="translated">FromFn::inspect</target>
        </trans-unit>
        <trans-unit id="8b24481c5fe21f0d4eefc523e12c42563a9349cf" translate="yes" xml:space="preserve">
          <source>FromFn::into</source>
          <target state="translated">FromFn::into</target>
        </trans-unit>
        <trans-unit id="ae4f0c406ba5ce7367ef7c9f2f0ff1d657965af3" translate="yes" xml:space="preserve">
          <source>FromFn::into_iter</source>
          <target state="translated">FromFn::into_iter</target>
        </trans-unit>
        <trans-unit id="afff9a10d69a5add7ba160fd8944e5721b2448b0" translate="yes" xml:space="preserve">
          <source>FromFn::is_sorted</source>
          <target state="translated">FromFn::is_sorted</target>
        </trans-unit>
        <trans-unit id="65555425c11972ea9a43c73ece4221af77b37aac" translate="yes" xml:space="preserve">
          <source>FromFn::is_sorted_by</source>
          <target state="translated">FromFn::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="e962a84a22ee3e8286deb98ec6a05dc09fb7c1da" translate="yes" xml:space="preserve">
          <source>FromFn::is_sorted_by_key</source>
          <target state="translated">FromFn::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="8ce1a710f4a70c6d10a044e276250699320aaf07" translate="yes" xml:space="preserve">
          <source>FromFn::last</source>
          <target state="translated">FromFn::last</target>
        </trans-unit>
        <trans-unit id="84d790ccc1d625773ad60ff7dbafd9719b2c1e60" translate="yes" xml:space="preserve">
          <source>FromFn::le</source>
          <target state="translated">FromFn::le</target>
        </trans-unit>
        <trans-unit id="1d494ff0f71cf64264c61f3a0d0064224ba064b9" translate="yes" xml:space="preserve">
          <source>FromFn::lt</source>
          <target state="translated">FromFn::lt</target>
        </trans-unit>
        <trans-unit id="751b0a3e001bca29a735704d123f59f147dc51fa" translate="yes" xml:space="preserve">
          <source>FromFn::map</source>
          <target state="translated">FromFn::map</target>
        </trans-unit>
        <trans-unit id="9557f4915531898d81c94e1b4775a41a6bfc887c" translate="yes" xml:space="preserve">
          <source>FromFn::max</source>
          <target state="translated">FromFn::max</target>
        </trans-unit>
        <trans-unit id="773497baa5bf74230ff0d338cc91e10ae9beefb2" translate="yes" xml:space="preserve">
          <source>FromFn::max_by</source>
          <target state="translated">FromFn::max_by</target>
        </trans-unit>
        <trans-unit id="a9eb1b7e1e1ef9f1ccc894fc973f5685bd2ee298" translate="yes" xml:space="preserve">
          <source>FromFn::max_by_key</source>
          <target state="translated">FromFn::max_by_key</target>
        </trans-unit>
        <trans-unit id="4a3bb54490abbe7310741d5e0d22f11e79c14bac" translate="yes" xml:space="preserve">
          <source>FromFn::min</source>
          <target state="translated">FromFn::min</target>
        </trans-unit>
        <trans-unit id="21f309276fd1f5ad2886f9f09f747d01a840db3c" translate="yes" xml:space="preserve">
          <source>FromFn::min_by</source>
          <target state="translated">FromFn::min_by</target>
        </trans-unit>
        <trans-unit id="2d400ed7d58d506ce1a2d1a6674024793a847641" translate="yes" xml:space="preserve">
          <source>FromFn::min_by_key</source>
          <target state="translated">FromFn::min_by_key</target>
        </trans-unit>
        <trans-unit id="de781dccfea9f050f774daaef74a4dfd4b3cebfc" translate="yes" xml:space="preserve">
          <source>FromFn::ne</source>
          <target state="translated">FromFn::ne</target>
        </trans-unit>
        <trans-unit id="3e9810f0bdab4291492baf74a6bfa30aa21a77bd" translate="yes" xml:space="preserve">
          <source>FromFn::next</source>
          <target state="translated">FromFn::next</target>
        </trans-unit>
        <trans-unit id="5ec257b2ca69cb089b12e30887e2681f5aac401e" translate="yes" xml:space="preserve">
          <source>FromFn::nth</source>
          <target state="translated">FromFn::nth</target>
        </trans-unit>
        <trans-unit id="f77021ba879adead1d2e4228d87ef2663943b655" translate="yes" xml:space="preserve">
          <source>FromFn::partial_cmp</source>
          <target state="translated">FromFn::partial_cmp</target>
        </trans-unit>
        <trans-unit id="288b8538ae0f2879d43bf94297be3c6133a5f820" translate="yes" xml:space="preserve">
          <source>FromFn::partition</source>
          <target state="translated">FromFn::partition</target>
        </trans-unit>
        <trans-unit id="6ef8b8fdd33b9e08d9b7b53fc44edd140535fa87" translate="yes" xml:space="preserve">
          <source>FromFn::peekable</source>
          <target state="translated">FromFn::peekable</target>
        </trans-unit>
        <trans-unit id="9fd5da570ca929f5692e6716a06272746f0fa1d8" translate="yes" xml:space="preserve">
          <source>FromFn::position</source>
          <target state="translated">FromFn::position</target>
        </trans-unit>
        <trans-unit id="9fd628265dd15f36a0898f2dbb30e35b39ee8fc7" translate="yes" xml:space="preserve">
          <source>FromFn::product</source>
          <target state="translated">FromFn::product</target>
        </trans-unit>
        <trans-unit id="f309b4b73dbc1c831c32217194b232a41056a729" translate="yes" xml:space="preserve">
          <source>FromFn::rev</source>
          <target state="translated">FromFn::rev</target>
        </trans-unit>
        <trans-unit id="a0c49b380c128a9bc5de2c3faa4da44b9fc8bbc6" translate="yes" xml:space="preserve">
          <source>FromFn::rposition</source>
          <target state="translated">FromFn::rposition</target>
        </trans-unit>
        <trans-unit id="19e6db953101ebb606b1b19e2f9d1a4a26b6809c" translate="yes" xml:space="preserve">
          <source>FromFn::scan</source>
          <target state="translated">FromFn::scan</target>
        </trans-unit>
        <trans-unit id="5d0d63065b04c4b09f0aa2957112e2fe0f225430" translate="yes" xml:space="preserve">
          <source>FromFn::size_hint</source>
          <target state="translated">FromFn::size_hint</target>
        </trans-unit>
        <trans-unit id="38e4d5016859cd612a773350539b8a8f8ed4f69e" translate="yes" xml:space="preserve">
          <source>FromFn::skip</source>
          <target state="translated">FromFn::skip</target>
        </trans-unit>
        <trans-unit id="12a7c70e2490eae42133b8d79eb74bbc281ed3c1" translate="yes" xml:space="preserve">
          <source>FromFn::skip_while</source>
          <target state="translated">FromFn::skip_while</target>
        </trans-unit>
        <trans-unit id="b8e40ee23c90dfe55dc2adc6eb4e1fa68a56d3f2" translate="yes" xml:space="preserve">
          <source>FromFn::step_by</source>
          <target state="translated">FromFn::step_by</target>
        </trans-unit>
        <trans-unit id="b3529c28fcc7f21d0e3ae52857e07c43bb6c8013" translate="yes" xml:space="preserve">
          <source>FromFn::sum</source>
          <target state="translated">FromFn::sum</target>
        </trans-unit>
        <trans-unit id="6daa93fa94eca065b7334c99d285abb621f9ead1" translate="yes" xml:space="preserve">
          <source>FromFn::take</source>
          <target state="translated">FromFn::take</target>
        </trans-unit>
        <trans-unit id="156bad7396ba706178e8ea89088365ae093fa7cd" translate="yes" xml:space="preserve">
          <source>FromFn::take_while</source>
          <target state="translated">FromFn::take_while</target>
        </trans-unit>
        <trans-unit id="9839051411a51874292b5e676a817c3565f4cdb7" translate="yes" xml:space="preserve">
          <source>FromFn::to_owned</source>
          <target state="translated">FromFn::to_owned</target>
        </trans-unit>
        <trans-unit id="ea08cb40922d3bbf69b931ce4241edaff08bba49" translate="yes" xml:space="preserve">
          <source>FromFn::try_fold</source>
          <target state="translated">FromFn::try_fold</target>
        </trans-unit>
        <trans-unit id="bd6c17792affbcc25b9cd6f9d78ae20bb6d8b440" translate="yes" xml:space="preserve">
          <source>FromFn::try_for_each</source>
          <target state="translated">FromFn::try_for_each</target>
        </trans-unit>
        <trans-unit id="599426d9bfd33f5d58f1c89e6fe9a710264c9a4f" translate="yes" xml:space="preserve">
          <source>FromFn::try_from</source>
          <target state="translated">FromFn::try_from</target>
        </trans-unit>
        <trans-unit id="171a8267d3eee4bfef7510e89b3fcd5c1ca50a99" translate="yes" xml:space="preserve">
          <source>FromFn::try_into</source>
          <target state="translated">FromFn::try_into</target>
        </trans-unit>
        <trans-unit id="5dbbcba7b3548c91e4ba3998b160d580ba16ca70" translate="yes" xml:space="preserve">
          <source>FromFn::type_id</source>
          <target state="translated">FromFn::type_id</target>
        </trans-unit>
        <trans-unit id="aa009f7a09e21b409ed71bd642c5fa986b90aa2e" translate="yes" xml:space="preserve">
          <source>FromFn::unzip</source>
          <target state="translated">FromFn::unzip</target>
        </trans-unit>
        <trans-unit id="efab3519b36c349c534fa71bff1cf729099859a4" translate="yes" xml:space="preserve">
          <source>FromFn::zip</source>
          <target state="translated">FromFn::zip</target>
        </trans-unit>
        <trans-unit id="32b4bf2ef95e2d2aec7397ff0647d8babccdf02c" translate="yes" xml:space="preserve">
          <source>FromIterator</source>
          <target state="translated">FromIterator</target>
        </trans-unit>
        <trans-unit id="e1870c89bb148edb105f129409fab48efce69f62" translate="yes" xml:space="preserve">
          <source>FromIterator::from_iter</source>
          <target state="translated">FromIterator::from_iter</target>
        </trans-unit>
        <trans-unit id="4bad9f9fcb9b55d2910b83906b94cb3131b43c5d" translate="yes" xml:space="preserve">
          <source>FromRawFd</source>
          <target state="translated">FromRawFd</target>
        </trans-unit>
        <trans-unit id="a56a062331e31ac1c2b5a5dac0da0b0abb9d6001" translate="yes" xml:space="preserve">
          <source>FromRawHandle</source>
          <target state="translated">FromRawHandle</target>
        </trans-unit>
        <trans-unit id="c37ec0040cdbff3d1d305c56421552ddc2489011" translate="yes" xml:space="preserve">
          <source>FromRawSocket</source>
          <target state="translated">FromRawSocket</target>
        </trans-unit>
        <trans-unit id="4dd00b66acc9fd438c18fe918918688eac4eb0c2" translate="yes" xml:space="preserve">
          <source>FromStr</source>
          <target state="translated">FromStr</target>
        </trans-unit>
        <trans-unit id="dab7a59717331bdfe8b7ab641211c67a9dfb50eb" translate="yes" xml:space="preserve">
          <source>FromStr::from_str</source>
          <target state="translated">FromStr::from_str</target>
        </trans-unit>
        <trans-unit id="95bb1cb5923a9cd972fc547c7b002fc5ba2ce7a2" translate="yes" xml:space="preserve">
          <source>FromUtf16Error</source>
          <target state="translated">FromUtf16Error</target>
        </trans-unit>
        <trans-unit id="fcb0d72a120d0c67f17203436ea5960146d62ec2" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::borrow</source>
          <target state="translated">FromUtf16Error::borrow</target>
        </trans-unit>
        <trans-unit id="113c351153f138ad8e550bd5bc87e5b5707c2ec9" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::borrow_mut</source>
          <target state="translated">FromUtf16Error::borrow_mut</target>
        </trans-unit>
        <trans-unit id="97836107e76f8ba4b690e740298dc374f5970b10" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::cause</source>
          <target state="translated">FromUtf16Error::cause</target>
        </trans-unit>
        <trans-unit id="e94e007d11f3b1dda24c2465e9cb38303e308e73" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::description</source>
          <target state="translated">FromUtf16Error::description</target>
        </trans-unit>
        <trans-unit id="2c32d02e6ae646045db166c707624569fdae72d4" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::fmt</source>
          <target state="translated">FromUtf16Error::fmt</target>
        </trans-unit>
        <trans-unit id="ba0c3d406513bc34fdc41eb68be8108d0b00395d" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::from</source>
          <target state="translated">FromUtf16Error::from</target>
        </trans-unit>
        <trans-unit id="d5575256ab625def6f4f6cc664052c3b6a58df9c" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::into</source>
          <target state="translated">FromUtf16Error::into</target>
        </trans-unit>
        <trans-unit id="1037656b64535df6ad944739d9fe0fdcb97622a8" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::source</source>
          <target state="translated">FromUtf16Error::source</target>
        </trans-unit>
        <trans-unit id="b3d3ba376b016c98e88ee83c7eef33115c996117" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::to_string</source>
          <target state="translated">FromUtf16Error::to_string</target>
        </trans-unit>
        <trans-unit id="245023bdaeff4ddeb623b54723ef50f0ab4c73b2" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::try_from</source>
          <target state="translated">FromUtf16Error::try_from</target>
        </trans-unit>
        <trans-unit id="01065c5d7bcef1fc490d7e58b90a6f4dca50e4fb" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::try_into</source>
          <target state="translated">FromUtf16Error::try_into</target>
        </trans-unit>
        <trans-unit id="7abd332163a5c3ec4a4d4c52373ebd061517082b" translate="yes" xml:space="preserve">
          <source>FromUtf16Error::type_id</source>
          <target state="translated">FromUtf16Error::type_id</target>
        </trans-unit>
        <trans-unit id="f9cdf743b2bfb7c8f355315fba316a0105bfe790" translate="yes" xml:space="preserve">
          <source>FromUtf8Error</source>
          <target state="translated">FromUtf8Error</target>
        </trans-unit>
        <trans-unit id="748acfd665ce8fa3a2ec94e5db04d35258af238a" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::as_bytes</source>
          <target state="translated">FromUtf8Error::as_bytes</target>
        </trans-unit>
        <trans-unit id="67756ec60a16d0349c2bef1bfd6a9c4327f5ce92" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::borrow</source>
          <target state="translated">FromUtf8Error::borrow</target>
        </trans-unit>
        <trans-unit id="f2d6dcca426a9ff1031f09b28e7a3c7e7e95cac7" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::borrow_mut</source>
          <target state="translated">FromUtf8Error::borrow_mut</target>
        </trans-unit>
        <trans-unit id="934a60e32f54920b868089cc1b73dc891da641c4" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::cause</source>
          <target state="translated">FromUtf8Error::cause</target>
        </trans-unit>
        <trans-unit id="6102ea0bc31df9b0bd54ca8c6f45681afdc7f3be" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::description</source>
          <target state="translated">FromUtf8Error::description</target>
        </trans-unit>
        <trans-unit id="db9d99b90918d37a2499587faaadf8cc4c5ba1e8" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::fmt</source>
          <target state="translated">FromUtf8Error::fmt</target>
        </trans-unit>
        <trans-unit id="24fe7f678b98dc8e8766a2bc4809afc6de8f2446" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::from</source>
          <target state="translated">FromUtf8Error::from</target>
        </trans-unit>
        <trans-unit id="a6ad7612f0b82b4e8c1334c223cd16ae09fe7950" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::into</source>
          <target state="translated">FromUtf8Error::into</target>
        </trans-unit>
        <trans-unit id="b7463c02515f737098afa25500af32760dfea53f" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::into_bytes</source>
          <target state="translated">FromUtf8Error::into_bytes</target>
        </trans-unit>
        <trans-unit id="436ef25551c663c53e58d3b69c8eb9dcb10d3235" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::source</source>
          <target state="translated">FromUtf8Error::source</target>
        </trans-unit>
        <trans-unit id="e878d23af1cc95debb68e1cd9e006909c66b66ff" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::to_string</source>
          <target state="translated">FromUtf8Error::to_string</target>
        </trans-unit>
        <trans-unit id="4fbc2f11f0a6ae5317111c17fe4fc467bfab1283" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::try_from</source>
          <target state="translated">FromUtf8Error::try_from</target>
        </trans-unit>
        <trans-unit id="6ffa2b38a64b65974d8f8259323056cadca3d2ba" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::try_into</source>
          <target state="translated">FromUtf8Error::try_into</target>
        </trans-unit>
        <trans-unit id="240101bf524733a6227bf7410764c0c88b68ac25" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::type_id</source>
          <target state="translated">FromUtf8Error::type_id</target>
        </trans-unit>
        <trans-unit id="1520b6f9dab555ff5f00e3142608c852624a5bdc" translate="yes" xml:space="preserve">
          <source>FromUtf8Error::utf8_error</source>
          <target state="translated">FromUtf8Error::utf8_error</target>
        </trans-unit>
        <trans-unit id="66c90b064569c220f974a737cea488bb020847ab" translate="yes" xml:space="preserve">
          <source>FromVecWithNulError</source>
          <target state="translated">FromVecWithNulError</target>
        </trans-unit>
        <trans-unit id="c6a1521589825282f50a8f81cbc487bceb136c94" translate="yes" xml:space="preserve">
          <source>Fully Qualified Syntax for Disambiguation: Calling Methods with the Same Name</source>
          <target state="translated">完全限定的语法来消除歧义。调用同名方法</target>
        </trans-unit>
        <trans-unit id="5c898364acf0b0ec642107ce708180420a68b11c" translate="yes" xml:space="preserve">
          <source>Fully qualified paths allow for disambiguating the path for &lt;a href=&quot;items/implementations#trait-implementations&quot;&gt;trait implementations&lt;/a&gt; and for specifying &lt;a href=&quot;#canonical-paths&quot;&gt;canonical paths&lt;/a&gt;. When used in a type specification, it supports using the type syntax specified below.</source>
          <target state="translated">完全限定的路径可以消除&lt;a href=&quot;items/implementations#trait-implementations&quot;&gt;特征实现&lt;/a&gt;的路径歧义，并可以指定&lt;a href=&quot;#canonical-paths&quot;&gt;规范的路径&lt;/a&gt;。在类型规范中使用时，它支持使用下面指定的类型语法。</target>
        </trans-unit>
        <trans-unit id="627268cbc7ba4357c2bec7566f1dd46e677125cd" translate="yes" xml:space="preserve">
          <source>Fully qualified paths allow for disambiguating the path for &lt;a href=&quot;items/implementations#trait-implementations&quot;&gt;trait implementations&lt;/a&gt; and for specifying &lt;a href=&quot;paths#canonical-paths&quot;&gt;canonical paths&lt;/a&gt;. When used in a type specification, it supports using the type syntax specified below.</source>
          <target state="translated">完全限定的路径可以消除&lt;a href=&quot;items/implementations#trait-implementations&quot;&gt;特征实现&lt;/a&gt;的路径歧义，并可以指定&lt;a href=&quot;paths#canonical-paths&quot;&gt;规范的路径&lt;/a&gt;。在类型规范中使用时，它支持使用下面指定的类型语法。</target>
        </trans-unit>
        <trans-unit id="b6327f489e8e1ede1c999c25b8f597a08dc5e5e7" translate="yes" xml:space="preserve">
          <source>Function Bodies Contain Statements and Expressions</source>
          <target state="translated">函数体包含语句和表达式</target>
        </trans-unit>
        <trans-unit id="cec90ffa8d067cfb33c2b7e5ea59f57a4ab51f07" translate="yes" xml:space="preserve">
          <source>Function Parameters</source>
          <target state="translated">功能参数</target>
        </trans-unit>
        <trans-unit id="fa21ce3153a0bf08e0da8f6a18de7da525121cc9" translate="yes" xml:space="preserve">
          <source>Function Pointers</source>
          <target state="translated">功能指针</target>
        </trans-unit>
        <trans-unit id="691f82dd99cc6e11c5ba71e42753b5f300e68086" translate="yes" xml:space="preserve">
          <source>Function and closure return type</source>
          <target state="translated">功能和关闭返回类型</target>
        </trans-unit>
        <trans-unit id="d289dd66334349d57b2378d89d1ba44a53f0a66f" translate="yes" xml:space="preserve">
          <source>Function bodies are made up of a series of statements optionally ending in an expression. So far, we&amp;rsquo;ve only covered functions without an ending expression, but you have seen an expression as part of a statement. Because Rust is an expression-based language, this is an important distinction to understand. Other languages don&amp;rsquo;t have the same distinctions, so let&amp;rsquo;s look at what statements and expressions are and how their differences affect the bodies of functions.</source>
          <target state="translated">函数体由一系列可选地以表达式结尾的语句组成。到目前为止，我们仅介绍了没有结尾表达式的函数，但是您已经将表达式视为语句的一部分。由于Rust是一种基于表达式的语言，因此这是需要理解的重要区别。其他语言没有相同的区别，因此让我们看看什么是语句和表达式以及它们的差异如何影响函数体。</target>
        </trans-unit>
        <trans-unit id="36ed99d43dd98e906de43534c86aaa6329bc9711" translate="yes" xml:space="preserve">
          <source>Function call expression; also used to initialize tuple &lt;code&gt;struct&lt;/code&gt;s and tuple &lt;code&gt;enum&lt;/code&gt; variants</source>
          <target state="translated">函数调用表达式；也用于初始化元组 &lt;code&gt;struct&lt;/code&gt; 和元组 &lt;code&gt;enum&lt;/code&gt; 变量</target>
        </trans-unit>
        <trans-unit id="dd4883aafb3cdb86f14e39e1c7d1f7edcb15ec04" translate="yes" xml:space="preserve">
          <source>Function calls, array indexing</source>
          <target state="translated">函数调用,数组索引</target>
        </trans-unit>
        <trans-unit id="03a2a2fdcb8604503eda22208a226681c6707089" translate="yes" xml:space="preserve">
          <source>Function definitions are also statements; the entire preceding example is a statement in itself.</source>
          <target state="translated">函数定义也是语句,整个前面的例子本身就是一个语句。</target>
        </trans-unit>
        <trans-unit id="19f4a1aef809a484c5ab3c0d1a7708464ac28c08" translate="yes" xml:space="preserve">
          <source>Function definitions in Rust start with &lt;code&gt;fn&lt;/code&gt; and have a set of parentheses after the function name. The curly brackets tell the compiler where the function body begins and ends.</source>
          <target state="translated">Rust中的函数定义以 &lt;code&gt;fn&lt;/code&gt; 开头，并在函数名称后带有一组括号。大括号告诉编译器函数体的开始和结束位置。</target>
        </trans-unit>
        <trans-unit id="f527034de868b518981c857b1101b4a224d018cd" translate="yes" xml:space="preserve">
          <source>Function item</source>
          <target state="translated">功能项目</target>
        </trans-unit>
        <trans-unit id="da36bbe9a85b3247538cc3fec803f4a226bb9238" translate="yes" xml:space="preserve">
          <source>Function item to address cast</source>
          <target state="translated">需要解决的功能项目</target>
        </trans-unit>
        <trans-unit id="52aa3d6cb40fdb90563de7ef5199bdc225e74e20" translate="yes" xml:space="preserve">
          <source>Function item to function pointer cast</source>
          <target state="translated">函数项到函数指针的转换</target>
        </trans-unit>
        <trans-unit id="ac11f9c060fdae4134739658017e8fe749dedfd5" translate="yes" xml:space="preserve">
          <source>Function item to pointer cast</source>
          <target state="translated">功能项转指针投射</target>
        </trans-unit>
        <trans-unit id="fb2c99db471758809fdfaf0b8a6e27088636a20c" translate="yes" xml:space="preserve">
          <source>Function item types</source>
          <target state="translated">功能项目类型</target>
        </trans-unit>
        <trans-unit id="63984dbadb9d453a95bc957d9bd90bb4979166b9" translate="yes" xml:space="preserve">
          <source>Function item types (i.e., the distinct types defined for each function)</source>
          <target state="translated">函数项目类型(即为每个函数定义的不同类型)。</target>
        </trans-unit>
        <trans-unit id="2a993beecec2e700f82f799b3535fa3479b4141d" translate="yes" xml:space="preserve">
          <source>Function item types and function pointers automatically implement the trait.</source>
          <target state="translated">函数项类型和函数指针自动实现该特性。</target>
        </trans-unit>
        <trans-unit id="112c129d1e3d14e754ce4eeea68853b281f78ee9" translate="yes" xml:space="preserve">
          <source>Function or method declarations without a body only allow &lt;a href=&quot;../identifiers&quot;&gt;IDENTIFIER&lt;/a&gt; or &lt;code&gt;_&lt;/code&gt;&lt;a href=&quot;../patterns#wildcard-pattern&quot;&gt;wild card&lt;/a&gt; patterns. &lt;code&gt;mut&lt;/code&gt;&lt;a href=&quot;../identifiers&quot;&gt;IDENTIFIER&lt;/a&gt; is currently allowed, but it is deprecated and will become a hard error in the future.</source>
          <target state="translated">没有主体的函数或方法声明仅允许&lt;a href=&quot;../identifiers&quot;&gt;IDENTIFIER&lt;/a&gt;或 &lt;code&gt;_&lt;/code&gt; &lt;a href=&quot;../patterns#wildcard-pattern&quot;&gt;通配符&lt;/a&gt;模式。目前允许使用 &lt;code&gt;mut&lt;/code&gt; &lt;a href=&quot;../identifiers&quot;&gt;IDENTIFIER&lt;/a&gt;，但已不建议使用mut IDENTIFIER，将来它将成为硬错误。</target>
        </trans-unit>
        <trans-unit id="e3cf1b82dd9028df4aba63ebe0d8e6f3637f2b6a" translate="yes" xml:space="preserve">
          <source>Function parameters are immutable unless declared with &lt;code&gt;mut&lt;/code&gt;. The &lt;code&gt;mut&lt;/code&gt; keyword applies only to the following parameter. For example: &lt;code&gt;|mut x, y|&lt;/code&gt; and &lt;code&gt;fn f(mut x: Box&amp;lt;i32&amp;gt;, y: Box&amp;lt;i32&amp;gt;)&lt;/code&gt; declare one mutable variable &lt;code&gt;x&lt;/code&gt; and one immutable variable &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">除非使用 &lt;code&gt;mut&lt;/code&gt; 声明，否则函数参数是不可变的。该 &lt;code&gt;mut&lt;/code&gt; 关键字仅适用于以下参数。例如： &lt;code&gt;|mut x, y|&lt;/code&gt; 和 &lt;code&gt;fn f(mut x: Box&amp;lt;i32&amp;gt;, y: Box&amp;lt;i32&amp;gt;)&lt;/code&gt; 声明一个可变变量 &lt;code&gt;x&lt;/code&gt; 和一个不可变变量 &lt;code&gt;y&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4604d097c2775f4db1df4742036b1ee376e32c38" translate="yes" xml:space="preserve">
          <source>Function parameters can also be patterns. The code in Listing 18-6, which declares a function named &lt;code&gt;foo&lt;/code&gt; that takes one parameter named &lt;code&gt;x&lt;/code&gt; of type &lt;code&gt;i32&lt;/code&gt;, should by now look familiar.</source>
          <target state="translated">功能参数也可以是模式。清单18-6中的代码声明了一个名为 &lt;code&gt;foo&lt;/code&gt; 的函数，该函数带有一个名为 &lt;code&gt;i32&lt;/code&gt; 类型的 &lt;code&gt;x&lt;/code&gt; 的参数，现在应该看起来很熟悉。</target>
        </trans-unit>
        <trans-unit id="ec08d670fef2800f4026355b26b0c2e7326f8889" translate="yes" xml:space="preserve">
          <source>Function parameters, &lt;code&gt;let&lt;/code&gt; statements, and &lt;code&gt;for&lt;/code&gt; loops can only accept irrefutable patterns, because the program cannot do anything meaningful when values don&amp;rsquo;t match. The &lt;code&gt;if let&lt;/code&gt; and &lt;code&gt;while let&lt;/code&gt; expressions accept refutable and irrefutable patterns, but the compiler warns against irrefutable patterns because by definition they&amp;rsquo;re intended to handle possible failure: the functionality of a conditional is in its ability to perform differently depending on success or failure.</source>
          <target state="translated">函数参数， &lt;code&gt;let&lt;/code&gt; 语句和 &lt;code&gt;for&lt;/code&gt; 循环只能接受不可辩驳的模式，因为当值不匹配时，程序无法做任何有意义的事情。的 &lt;code&gt;if let&lt;/code&gt; 与 &lt;code&gt;while let&lt;/code&gt; 的表达接受证伪的和无可辩驳的模式，但是编译器警告不要无可辩驳的模式，因为根据定义，他们打算处理可能失败：有条件的功能是其取决于成功或失败来执行不同的能力。</target>
        </trans-unit>
        <trans-unit id="803b8d98596aa720a921c36dc97486686404539d" translate="yes" xml:space="preserve">
          <source>Function parameters, &lt;code&gt;let&lt;/code&gt; statements, and &lt;code&gt;for&lt;/code&gt; loops can only accept irrefutable patterns, because the program cannot do anything meaningful when values don&amp;rsquo;t match. The &lt;code&gt;if let&lt;/code&gt; and &lt;code&gt;while let&lt;/code&gt; expressions only accept refutable patterns, because by definition they&amp;rsquo;re intended to handle possible failure: the functionality of a conditional is in its ability to perform differently depending on success or failure.</source>
          <target state="translated">函数参数， &lt;code&gt;let&lt;/code&gt; 语句和 &lt;code&gt;for&lt;/code&gt; 循环只能接受不可辩驳的模式，因为当值不匹配时，程序无法做任何有意义的事情。的 &lt;code&gt;if let&lt;/code&gt; 与 &lt;code&gt;while let&lt;/code&gt; 的表达只接受证伪的模式，因为根据定义，他们打算处理可能失败：有条件的功能是其取决于成功或失败来执行不同的能力。</target>
        </trans-unit>
        <trans-unit id="0262efe3a9e70538318d9f40b5d5c3aee785392d" translate="yes" xml:space="preserve">
          <source>Function pointer</source>
          <target state="translated">函数指针</target>
        </trans-unit>
        <trans-unit id="3a6ad7fb74590fbb0ac18b89a46012671173169c" translate="yes" xml:space="preserve">
          <source>Function pointer to address cast</source>
          <target state="translated">地址投向的函数指针</target>
        </trans-unit>
        <trans-unit id="2ea9417e46d243404ec3c296058e12f5458be748" translate="yes" xml:space="preserve">
          <source>Function pointer to pointer cast</source>
          <target state="translated">函数指针投向指针</target>
        </trans-unit>
        <trans-unit id="aff25779a650561f51919916715a331dbe79e151" translate="yes" xml:space="preserve">
          <source>Function pointer types</source>
          <target state="translated">函数指针类型</target>
        </trans-unit>
        <trans-unit id="45d7a4aae060a99add3462979349c03f64926590" translate="yes" xml:space="preserve">
          <source>Function pointer types (e.g., &lt;code&gt;fn() -&amp;gt; i32&lt;/code&gt;)</source>
          <target state="translated">函数指针类型（例如 &lt;code&gt;fn() -&amp;gt; i32&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b24ffbdb9339fdeaf0aa7876f8b677a6e93905b1" translate="yes" xml:space="preserve">
          <source>Function pointer types, written using the &lt;code&gt;fn&lt;/code&gt; keyword, refer to a function whose identity is not necessarily known at compile-time. They can be created via a coercion from both &lt;a href=&quot;function-item&quot;&gt;function items&lt;/a&gt; and non-capturing &lt;a href=&quot;closure&quot;&gt;closures&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;fn&lt;/code&gt; 关键字编写的函数指针类型指向其身份在编译时不一定已知的函数。可以通过强制从&lt;a href=&quot;function-item&quot;&gt;功能项&lt;/a&gt;和非捕获&lt;a href=&quot;closure&quot;&gt;闭包&lt;/a&gt;创建它们。</target>
        </trans-unit>
        <trans-unit id="d6054df2c54398efbf27ace21713f95c0a24cb59" translate="yes" xml:space="preserve">
          <source>Function pointers</source>
          <target state="translated">功能指针</target>
        </trans-unit>
        <trans-unit id="fbcf7edbb2c6d77dc22438afcec72a59e2993480" translate="yes" xml:space="preserve">
          <source>Function pointers are pointers that point to &lt;em&gt;code&lt;/em&gt;, not data. They can be called just like functions. Like references, function pointers are, among other things, assumed to not be null, so if you want to pass a function pointer over FFI and be able to accommodate null pointers, make your type &lt;code&gt;Option&amp;lt;fn()&amp;gt;&lt;/code&gt; with your required signature.</source>
          <target state="translated">函数指针是指向&lt;em&gt;代码&lt;/em&gt;而不是数据的指针。它们可以像函数一样被调用。与引用类似，函数指针除其他外还假定为不为null，因此，如果您想在FFI上传递函数指针并能够容纳null指针，请使用所需的签名使您的 &lt;code&gt;Option&amp;lt;fn()&amp;gt;&lt;/code&gt; 类型成为可能。</target>
        </trans-unit>
        <trans-unit id="15cdfd633c5d7b0c70793f7c9489a755e1d6379f" translate="yes" xml:space="preserve">
          <source>Function pointers implement all three of the closure traits (&lt;code&gt;Fn&lt;/code&gt;, &lt;code&gt;FnMut&lt;/code&gt;, and &lt;code&gt;FnOnce&lt;/code&gt;), so you can always pass a function pointer as an argument for a function that expects a closure. It&amp;rsquo;s best to write functions using a generic type and one of the closure traits so your functions can accept either functions or closures.</source>
          <target state="translated">函数指针实现了所有三个闭包特征（ &lt;code&gt;Fn&lt;/code&gt; ， &lt;code&gt;FnMut&lt;/code&gt; 和 &lt;code&gt;FnOnce&lt;/code&gt; ），因此您始终可以将函数指针作为需要闭包的函数的参数传递。最好使用泛型类型和闭包特征之一编写函数，以便您的函数可以接受函数或闭包。</target>
        </trans-unit>
        <trans-unit id="e715fbc2788b68f15adb3e2fe42db1f1b3eb63be" translate="yes" xml:space="preserve">
          <source>Function pointers implement the following traits:</source>
          <target state="translated">函数指针实现以下特征。</target>
        </trans-unit>
        <trans-unit id="99b2ae8582343bc9c462a6f08e79b5d728c91e61" translate="yes" xml:space="preserve">
          <source>Function pointers, like &lt;code&gt;fn(usize) -&amp;gt; bool&lt;/code&gt;.</source>
          <target state="translated">函数指针，例如 &lt;code&gt;fn(usize) -&amp;gt; bool&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a456906988ca1f218d8ec9026e2b7d0d28b99d1f" translate="yes" xml:space="preserve">
          <source>Function results&amp;mdash;either the final line of a block if it is not semicolon-terminated or any expression in a &lt;code&gt;return&lt;/code&gt; statement</source>
          <target state="translated">函数结果-如果不是分号结尾的块的最后一行，或者 &lt;code&gt;return&lt;/code&gt; 语句中的任何表达式</target>
        </trans-unit>
        <trans-unit id="36a229e02f3fc60bc509ebb974aa38b72eb187af" translate="yes" xml:space="preserve">
          <source>Function results, either the final line of a block if it is not semicolon-terminated or any expression in a &lt;code&gt;return&lt;/code&gt; statement</source>
          <target state="translated">函数结果，如果不是分号结尾的块的最后一行，或者 &lt;code&gt;return&lt;/code&gt; 语句中的任何表达式</target>
        </trans-unit>
        <trans-unit id="29f4f46b2b3a18a824f7e4d35e9bedb57b1f2175" translate="yes" xml:space="preserve">
          <source>Function std::alloc::alloc</source>
          <target state="translated">函数 std::alloc::alloc</target>
        </trans-unit>
        <trans-unit id="c194290249edf0618f600e420e211418fd7ea58d" translate="yes" xml:space="preserve">
          <source>Function std::alloc::alloc_zeroed</source>
          <target state="translated">函数 std::alloc::alloc_zeroed。</target>
        </trans-unit>
        <trans-unit id="c55dc24d1719cca7c04e3e54ee8524fba6daf3ee" translate="yes" xml:space="preserve">
          <source>Function std::alloc::dealloc</source>
          <target state="translated">函数 std::alloc::dealloc</target>
        </trans-unit>
        <trans-unit id="f0a706cc72c3f62f4ea5f25a2d577f9c7dcb0b9c" translate="yes" xml:space="preserve">
          <source>Function std::alloc::handle_alloc_error</source>
          <target state="translated">函数 std::alloc::handle_alloc_error 的作用。</target>
        </trans-unit>
        <trans-unit id="5107e49cfb1f88cc3e2a0a8f7ef7e8b1243aeff1" translate="yes" xml:space="preserve">
          <source>Function std::alloc::realloc</source>
          <target state="translated">函数 std::alloc::realloc</target>
        </trans-unit>
        <trans-unit id="cdfb037e537e5020acc31cc65ff942f2e9f7206e" translate="yes" xml:space="preserve">
          <source>Function std::alloc::set_alloc_error_hook</source>
          <target state="translated">函数 std::alloc::set_alloc_error_hook</target>
        </trans-unit>
        <trans-unit id="d3914accafdbce71005fb9461f231fd4f5ddabd1" translate="yes" xml:space="preserve">
          <source>Function std::alloc::take_alloc_error_hook</source>
          <target state="translated">函数 std::alloc::take_alloc_error_hook</target>
        </trans-unit>
        <trans-unit id="08a3d4cf4b8c828b9ff65c00bd6f11e8584bca6c" translate="yes" xml:space="preserve">
          <source>Function std::any::type_name</source>
          <target state="translated">函数 std::any::type_name</target>
        </trans-unit>
        <trans-unit id="7b9a0c79fb1d3fd234f23de7c5b34911cfa81b34" translate="yes" xml:space="preserve">
          <source>Function std::any::type_name_of_val</source>
          <target state="translated">函数std::any::type_name_of_val。</target>
        </trans-unit>
        <trans-unit id="ca1768a755f4322f02560111cf18bb88f2cde355" translate="yes" xml:space="preserve">
          <source>Function std::array::from_mut</source>
          <target state="translated">函数 std::array::from_mut</target>
        </trans-unit>
        <trans-unit id="679f5406945109bebe64c531eab400a32406f941" translate="yes" xml:space="preserve">
          <source>Function std::array::from_ref</source>
          <target state="translated">函数 std::array::from_ref</target>
        </trans-unit>
        <trans-unit id="02460030ea5749077815712a0ec7615c21f8abed" translate="yes" xml:space="preserve">
          <source>Function std::ascii::escape_default</source>
          <target state="translated">函数 std::ascii::escape_default</target>
        </trans-unit>
        <trans-unit id="7c07dd33165ae734e5190fd9441a0896193554d6" translate="yes" xml:space="preserve">
          <source>Function std::char::decode_utf16</source>
          <target state="translated">函数 std::char::decode_utf16</target>
        </trans-unit>
        <trans-unit id="4247dc6a69dffc51becd83114cd73f82d393cde9" translate="yes" xml:space="preserve">
          <source>Function std::char::from_digit</source>
          <target state="translated">函数 std::char::from_digit</target>
        </trans-unit>
        <trans-unit id="01947a1ff576a2d0100c1951a0c5226b70685cd8" translate="yes" xml:space="preserve">
          <source>Function std::char::from_u32</source>
          <target state="translated">函数 std::char::from_u32</target>
        </trans-unit>
        <trans-unit id="6dfcd96fdbe2623e4e1d282ca8990e4d07c57639" translate="yes" xml:space="preserve">
          <source>Function std::char::from_u32_unchecked</source>
          <target state="translated">函数 std::char::from_u32_unchecked。</target>
        </trans-unit>
        <trans-unit id="966fc7af79edea1b5d808685aa0ece42863cd0bd" translate="yes" xml:space="preserve">
          <source>Function std::cmp::max</source>
          <target state="translated">函数 std::cmp::max</target>
        </trans-unit>
        <trans-unit id="654964706bd0b6371d33c88bca792ab7df2ef84f" translate="yes" xml:space="preserve">
          <source>Function std::cmp::max_by</source>
          <target state="translated">函数 std::cmp::max_by</target>
        </trans-unit>
        <trans-unit id="e9f49de713bede186b9e8e2bc75f0b938238fb79" translate="yes" xml:space="preserve">
          <source>Function std::cmp::max_by_key</source>
          <target state="translated">函数 std::cmp::max_by_key</target>
        </trans-unit>
        <trans-unit id="d81416a60431cc075bb472188b6b7e44301f4309" translate="yes" xml:space="preserve">
          <source>Function std::cmp::min</source>
          <target state="translated">函数 std::cmp::min</target>
        </trans-unit>
        <trans-unit id="4afe34f5a20d5be4f51e18e6a974860d77547753" translate="yes" xml:space="preserve">
          <source>Function std::cmp::min_by</source>
          <target state="translated">函数 std::cmp::min_by</target>
        </trans-unit>
        <trans-unit id="7dd40a1b936bdc62e359c5776f5de1a7197f73d1" translate="yes" xml:space="preserve">
          <source>Function std::cmp::min_by_key</source>
          <target state="translated">函数 std::cmp::min_by_key</target>
        </trans-unit>
        <trans-unit id="3e137b166d99decd00ae7a0d041b9dad569ce9b9" translate="yes" xml:space="preserve">
          <source>Function std::convert::identity</source>
          <target state="translated">函数 std::convert::identity</target>
        </trans-unit>
        <trans-unit id="0a18c6fd4283d782572219c61b78adc0f284163d" translate="yes" xml:space="preserve">
          <source>Function std::default::default</source>
          <target state="translated">函数 std::default::default</target>
        </trans-unit>
        <trans-unit id="bef3f6086da2cb5d3c82ba307db11b82bdd500e4" translate="yes" xml:space="preserve">
          <source>Function std::env::args</source>
          <target state="translated">函数 std::env::args</target>
        </trans-unit>
        <trans-unit id="a7011b47e8ac03fcbd9255878cf4c2155deab1f8" translate="yes" xml:space="preserve">
          <source>Function std::env::args_os</source>
          <target state="translated">函数 std::env::args_os</target>
        </trans-unit>
        <trans-unit id="fb6d2bc291dd13ab649f3064189f28948f498c90" translate="yes" xml:space="preserve">
          <source>Function std::env::current_dir</source>
          <target state="translated">函数 std::env::current_dir</target>
        </trans-unit>
        <trans-unit id="33c219e274f54fd4c2901cadeb8cb8a1716b07ee" translate="yes" xml:space="preserve">
          <source>Function std::env::current_exe</source>
          <target state="translated">函数 std::env::current_exe</target>
        </trans-unit>
        <trans-unit id="93bdb0baaee9eb9479f683bb8e51de0bf9436845" translate="yes" xml:space="preserve">
          <source>Function std::env::home_dir</source>
          <target state="translated">函数 std::env::home_dir</target>
        </trans-unit>
        <trans-unit id="dc6d846e434726288d053c67c7f123047bc5b25a" translate="yes" xml:space="preserve">
          <source>Function std::env::join_paths</source>
          <target state="translated">函数 std::env::join_paths</target>
        </trans-unit>
        <trans-unit id="bbe13942873b051106118872ceff377d6414cbd0" translate="yes" xml:space="preserve">
          <source>Function std::env::remove_var</source>
          <target state="translated">函数 std::env::remove_var</target>
        </trans-unit>
        <trans-unit id="a0ef2707df0c48fd4a3170eabef1fe897798e008" translate="yes" xml:space="preserve">
          <source>Function std::env::set_current_dir</source>
          <target state="translated">函数 std::env::set_current_dir</target>
        </trans-unit>
        <trans-unit id="40c0dc02c3e18407f97eaa7464d7aab31d55dfea" translate="yes" xml:space="preserve">
          <source>Function std::env::set_var</source>
          <target state="translated">函数 std::env::set_var</target>
        </trans-unit>
        <trans-unit id="59db75e19e909089d5b25a261bb16556aafffc1d" translate="yes" xml:space="preserve">
          <source>Function std::env::split_paths</source>
          <target state="translated">函数 std::env::split_paths</target>
        </trans-unit>
        <trans-unit id="c9d56410023af3d25f02f24fd607ad8d19e28e03" translate="yes" xml:space="preserve">
          <source>Function std::env::temp_dir</source>
          <target state="translated">函数 std::env::temp_dir</target>
        </trans-unit>
        <trans-unit id="b44ade5af9baa85bddb409115f11d8a3c50eb27b" translate="yes" xml:space="preserve">
          <source>Function std::env::var</source>
          <target state="translated">函数 std::env::var</target>
        </trans-unit>
        <trans-unit id="515bff141b585b0fb43f2fd81c4ab54894f59b00" translate="yes" xml:space="preserve">
          <source>Function std::env::var_os</source>
          <target state="translated">函数 std::env::var_os</target>
        </trans-unit>
        <trans-unit id="50d6f97705009dc1e9db00019a283d41dc6945fd" translate="yes" xml:space="preserve">
          <source>Function std::env::vars</source>
          <target state="translated">函数 std::env::vars</target>
        </trans-unit>
        <trans-unit id="d0827162d968005e34a0d42ba5ac51aa36efcf56" translate="yes" xml:space="preserve">
          <source>Function std::env::vars_os</source>
          <target state="translated">函数 std::env::vars_os</target>
        </trans-unit>
        <trans-unit id="797538d7608a17a03d5648866da9d6b3f078ba33" translate="yes" xml:space="preserve">
          <source>Function std::fmt::format</source>
          <target state="translated">函数 std::fmt::format</target>
        </trans-unit>
        <trans-unit id="76a06aa8251b2d9f167fedfb35746c3cf97e2ac8" translate="yes" xml:space="preserve">
          <source>Function std::fmt::write</source>
          <target state="translated">函数 std::fmt::write</target>
        </trans-unit>
        <trans-unit id="7fdb91a20cf7c4148e5350b6228d741645e0e6c4" translate="yes" xml:space="preserve">
          <source>Function std::fs::canonicalize</source>
          <target state="translated">函数 std::fs::canonicalize</target>
        </trans-unit>
        <trans-unit id="44ca34ff0e7fcde3369397bebf2cb450b447625e" translate="yes" xml:space="preserve">
          <source>Function std::fs::copy</source>
          <target state="translated">函数 std::fs::copy</target>
        </trans-unit>
        <trans-unit id="79b6cf93dfdb5969925a9bbf30fbc1a32165b6cc" translate="yes" xml:space="preserve">
          <source>Function std::fs::create_dir</source>
          <target state="translated">函数 std::fs::create_dir</target>
        </trans-unit>
        <trans-unit id="649c1df373944ba216c813f37e0990377d5a6ab3" translate="yes" xml:space="preserve">
          <source>Function std::fs::create_dir_all</source>
          <target state="translated">函数 std::fs::create_dir_all</target>
        </trans-unit>
        <trans-unit id="aec64a3774022c217f50a9076ac42b9fb6d48ec2" translate="yes" xml:space="preserve">
          <source>Function std::fs::hard_link</source>
          <target state="translated">函数 std::fs::hard_link</target>
        </trans-unit>
        <trans-unit id="2e6dfe4827a34c58684389da7b0164086c1599e4" translate="yes" xml:space="preserve">
          <source>Function std::fs::metadata</source>
          <target state="translated">函数 std::fs::metadata</target>
        </trans-unit>
        <trans-unit id="257ab42da62059ca592eb29ecce0ba6bb9f767ea" translate="yes" xml:space="preserve">
          <source>Function std::fs::read</source>
          <target state="translated">函数 std::fs::read</target>
        </trans-unit>
        <trans-unit id="488209597226b1646d1224bfbda57c84f45dc7d2" translate="yes" xml:space="preserve">
          <source>Function std::fs::read_dir</source>
          <target state="translated">函数 std::fs::read_dir</target>
        </trans-unit>
        <trans-unit id="0f7c945a8871e4c87b4c07b8880a2b36fc0ce855" translate="yes" xml:space="preserve">
          <source>Function std::fs::read_link</source>
          <target state="translated">函数 std::fs::read_link</target>
        </trans-unit>
        <trans-unit id="28b8da08cde6c3f8ae6f6e98d4dd66e03f939569" translate="yes" xml:space="preserve">
          <source>Function std::fs::read_to_string</source>
          <target state="translated">函数 std::fs::read_to_string</target>
        </trans-unit>
        <trans-unit id="1069c1141b6eaeb5de5bd2c0a071bfa97d894617" translate="yes" xml:space="preserve">
          <source>Function std::fs::remove_dir</source>
          <target state="translated">函数 std::fs::remove_dir</target>
        </trans-unit>
        <trans-unit id="c3cdc1eed161b18d3222b0df7bb2a073cb3a3c45" translate="yes" xml:space="preserve">
          <source>Function std::fs::remove_dir_all</source>
          <target state="translated">函数 std::fs::remove_dir_all</target>
        </trans-unit>
        <trans-unit id="cbcb0bbc9d59dd97c42d329740ea7f8f01cc1fb7" translate="yes" xml:space="preserve">
          <source>Function std::fs::remove_file</source>
          <target state="translated">函数 std::fs::remove_file</target>
        </trans-unit>
        <trans-unit id="af4b065e7ab7d2238b740f9812576377e5cd02d1" translate="yes" xml:space="preserve">
          <source>Function std::fs::rename</source>
          <target state="translated">函数 std::fs::rename</target>
        </trans-unit>
        <trans-unit id="62954bd39f77dcd80b31f5a005cdf3185851bf80" translate="yes" xml:space="preserve">
          <source>Function std::fs::set_permissions</source>
          <target state="translated">函数 std::fs::set_permissions</target>
        </trans-unit>
        <trans-unit id="b73007edcf070db673623f198d05db893c057abf" translate="yes" xml:space="preserve">
          <source>Function std::fs::soft_link</source>
          <target state="translated">函数 std::fs::soft_link</target>
        </trans-unit>
        <trans-unit id="c1609b2e48046eeca39f684e9f2c1c5ab0e14c04" translate="yes" xml:space="preserve">
          <source>Function std::fs::symlink_metadata</source>
          <target state="translated">函数 std::fs::symlink_metadata</target>
        </trans-unit>
        <trans-unit id="42a53d0022af817a39762880cd798efaddb33270" translate="yes" xml:space="preserve">
          <source>Function std::fs::write</source>
          <target state="translated">函数 std::fs::write</target>
        </trans-unit>
        <trans-unit id="62fd296f6f9b7133ed05bfd466c7521be0878aa1" translate="yes" xml:space="preserve">
          <source>Function std::future::pending</source>
          <target state="translated">函数 std::future::pending</target>
        </trans-unit>
        <trans-unit id="6699b0ab5f182e75bd293dd09c4b93781b378dbb" translate="yes" xml:space="preserve">
          <source>Function std::future::ready</source>
          <target state="translated">函数 std::future::ready</target>
        </trans-unit>
        <trans-unit id="44b1ca263375f3e80c5d474d85e7edb549b59317" translate="yes" xml:space="preserve">
          <source>Function std::hint::black_box</source>
          <target state="translated">函数 std::hint::black_box</target>
        </trans-unit>
        <trans-unit id="23fd76dd636e9b48c8e0406a01f4377257e851c2" translate="yes" xml:space="preserve">
          <source>Function std::hint::spin_loop</source>
          <target state="translated">函数 std::hint::spin_loop</target>
        </trans-unit>
        <trans-unit id="c1dcca4e40039d28eec49d9f033066ddf377892d" translate="yes" xml:space="preserve">
          <source>Function std::hint::unreachable_unchecked</source>
          <target state="translated">函数 std::hint::unreachable_unchecked</target>
        </trans-unit>
        <trans-unit id="c04a12aeb32eb6ee408f0172379e7189d04f7fa7" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::abort</source>
          <target state="translated">函数 std::intrinsics::abort</target>
        </trans-unit>
        <trans-unit id="083951e2b60b4a5d3ecc13ab8a8c68c9bcb5e379" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::add_with_overflow</source>
          <target state="translated">函数 std::intrinsics::add_with_overflow</target>
        </trans-unit>
        <trans-unit id="9576b2752f5e3b22d5d58bfbf2ee067369a00927" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::arith_offset</source>
          <target state="translated">函数 std::intrinsics::arith_offset</target>
        </trans-unit>
        <trans-unit id="d1ebe0c7b1746455b6d7f17b0dad2bb65a6220bc" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::assert_inhabited</source>
          <target state="translated">函数 std::intrinsics::assert_habited</target>
        </trans-unit>
        <trans-unit id="f408cd1d9ec75e6daddf85e169dfa1b0b29c8cdd" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::assert_uninit_valid</source>
          <target state="translated">函数 std::intrinsics::assert_uninit_valid</target>
        </trans-unit>
        <trans-unit id="52ee7c75a0303f4182be7832e7932f58a4cf0a1c" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::assert_zero_valid</source>
          <target state="translated">函数 std::intrinsics::assert_zero_valid</target>
        </trans-unit>
        <trans-unit id="55e9043125ea3a71432799ddbd5b5de5c59e4507" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::assume</source>
          <target state="translated">函数 std::intrinsics::assume</target>
        </trans-unit>
        <trans-unit id="97bd81f0aecc23f2c1c6e2f2556a8a5a193fa85e" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_and</source>
          <target state="translated">函数 std::intrinsics::atomic_and</target>
        </trans-unit>
        <trans-unit id="83db485cd65a9c1d60ee6553eeb93464c015dcd6" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_and_acq</source>
          <target state="translated">函数 std::intrinsics::atomic_and_acq</target>
        </trans-unit>
        <trans-unit id="2a136fca51e5841f60fee7bd01c6763f69802dd1" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_and_acqrel</source>
          <target state="translated">函数 std::intrinsics::atomic_and_acqrel</target>
        </trans-unit>
        <trans-unit id="de28434a57082bbad9e31bcf13a493f64eeed44c" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_and_rel</source>
          <target state="translated">函数 std::intrinsics::atomic_and_rel</target>
        </trans-unit>
        <trans-unit id="35b947f77ad8b80a16f2858b7963283c7447f554" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_and_relaxed</source>
          <target state="translated">函数std::intrinsics::atomic_and_relaxed</target>
        </trans-unit>
        <trans-unit id="a85031e9d18ed4fd2273a2554abf20d5d0e04d42" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchg</source>
          <target state="translated">函数 std::intrinsics::atomic_cxchg</target>
        </trans-unit>
        <trans-unit id="21bafabb725c8d186f53d9a39873b76562515d5e" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchg_acq</source>
          <target state="translated">函数 std::intrinsics::atomic_cxchg_acq</target>
        </trans-unit>
        <trans-unit id="9956c269fbb5ef5958060b15ea303e7f003fbf56" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchg_acq_failrelaxed</source>
          <target state="translated">函数 std::intrinsics::atomic_cxchg_acq_failrelaxed 的作用。</target>
        </trans-unit>
        <trans-unit id="e1a505536784b5179da9f68a2284af4a99c45b36" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchg_acqrel</source>
          <target state="translated">函数 std::intrinsics::atomic_cxchg_acqrel</target>
        </trans-unit>
        <trans-unit id="192a1cc6826d7c91266da1d6cb911584811f7a90" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchg_acqrel_failrelaxed</source>
          <target state="translated">函数 std::intrinsics::atomic_cxchg_acqrel_failrelaxed 的作用。</target>
        </trans-unit>
        <trans-unit id="0156b2ddfed79dfb74958e12504cd6470faf5b91" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchg_failacq</source>
          <target state="translated">函数 std::intrinsics::atomic_cxchg_failacq</target>
        </trans-unit>
        <trans-unit id="55409e6ca1ad5c432b928eb8ce23a904c33f647f" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchg_failrelaxed</source>
          <target state="translated">函数std::intrinsics::atomic_cxchg_failrelaxed</target>
        </trans-unit>
        <trans-unit id="39f0c4bec736294fa36eea7dac60d5fa82a8a97d" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchg_rel</source>
          <target state="translated">函数 std::intrinsics::atomic_cxchg_rel</target>
        </trans-unit>
        <trans-unit id="eaaab3b78d863b2e9f71342b771707d5b6ede81a" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchg_relaxed</source>
          <target state="translated">函数 std::intrinsics::atomic_cxchg_relaxed 的作用。</target>
        </trans-unit>
        <trans-unit id="23a2de8b090010417f7343ed9f647e4c4638c9fe" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchgweak</source>
          <target state="translated">函数 std::intrinsics::atomic_cxchgweak</target>
        </trans-unit>
        <trans-unit id="d32ebae9ccacf8b7aaf5dcdd672e08c3462188de" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchgweak_acq</source>
          <target state="translated">函数 std::intrinsics::atomic_cxchgweak_acq</target>
        </trans-unit>
        <trans-unit id="a0d6493411c30c055a9bbf2189993ff6cb18a401" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchgweak_acq_failrelaxed</source>
          <target state="translated">函数 std::intrinsics::atomic_cxchgweak_acq_failrelaxed 的作用。</target>
        </trans-unit>
        <trans-unit id="84d51cb5de7124a1441c5850c06600665e87afbf" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchgweak_acqrel</source>
          <target state="translated">函数 std::intrinsics::atomic_cxchgweak_acqrel</target>
        </trans-unit>
        <trans-unit id="be384c57178230ae73b1a71a2f45edbcd29561cb" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchgweak_acqrel_failrelaxed</source>
          <target state="translated">函数 std::intrinsics::atomic_cxchgweak_acqrel_failrelaxed 的作用。</target>
        </trans-unit>
        <trans-unit id="1cae0c31481303abd7d3122fbbb4550b4b0fe2ae" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchgweak_failacq</source>
          <target state="translated">函数 std::intrinsics::atomic_cxchgweak_failacq</target>
        </trans-unit>
        <trans-unit id="b2a3b45d3b55aecacb1cf5ad3f42130bd04b90ee" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchgweak_failrelaxed</source>
          <target state="translated">函数std::intrinsics::atomic_cxchgweak_failrelaxed。</target>
        </trans-unit>
        <trans-unit id="dbdc85ce325264420dee74eb369011abf2328c62" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchgweak_rel</source>
          <target state="translated">函数 std::intrinsics::atomic_cxchgweak_rel</target>
        </trans-unit>
        <trans-unit id="dfea14fc309810b18b76b8d8d9eea0624c669c56" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_cxchgweak_relaxed</source>
          <target state="translated">函数 std::intrinsics::atomic_cxchgweak_relaxed</target>
        </trans-unit>
        <trans-unit id="93e77549e8c09b3d6a47e1aae1153a3c86f218d6" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_fence</source>
          <target state="translated">函数 std::intrinsics::atomic_fence</target>
        </trans-unit>
        <trans-unit id="9e80e29f5375e2b133e83fcec9042440ad13c3ab" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_fence_acq</source>
          <target state="translated">函数 std::intrinsics::atomic_fence_acq</target>
        </trans-unit>
        <trans-unit id="e276f5f0bdfe137b7fb724ce874c30180445d419" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_fence_acqrel</source>
          <target state="translated">函数 std::intrinsics::atomic_fence_acqrel</target>
        </trans-unit>
        <trans-unit id="5e0c13004af1995e4249efaadcf55bab23d8b1f0" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_fence_rel</source>
          <target state="translated">函数 std::intrinsics::atomic_fence_rel</target>
        </trans-unit>
        <trans-unit id="fa5f8c9ce76fefde99e7d3efd807ca1a43f8ab6c" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_load</source>
          <target state="translated">函数 std::intrinsics::atomic_load</target>
        </trans-unit>
        <trans-unit id="12a79df9539f7af796dbd45e1c54ed05f27b0df6" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_load_acq</source>
          <target state="translated">函数 std::intrinsics::atomic_load_acq</target>
        </trans-unit>
        <trans-unit id="e773d44fb21e58e51b7c05a644c45d38cd9ed277" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_load_relaxed</source>
          <target state="translated">函数 std::intrinsics::atomic_load_relaxed。</target>
        </trans-unit>
        <trans-unit id="44d5fbea38425f45c85b674130abc87f20105c47" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_load_unordered</source>
          <target state="translated">函数 std::intrinsics::atomic_load_unordered</target>
        </trans-unit>
        <trans-unit id="76f39339c62e3cc8ba58c9228348d006ee9dc8cb" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_max</source>
          <target state="translated">函数 std::intrinsics::atomic_max</target>
        </trans-unit>
        <trans-unit id="adfa1e651df3ca8dba7602e63cea98a1124a3cd4" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_max_acq</source>
          <target state="translated">函数 std::intrinsics::atomic_max_acq</target>
        </trans-unit>
        <trans-unit id="a3b4665a7942063ce1a70d83d46c8633384f998d" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_max_acqrel</source>
          <target state="translated">函数 std::intrinsics::atomic_max_acqrel</target>
        </trans-unit>
        <trans-unit id="ac0d6a9ff3e4081282044c1c5ed630f732b0b4ef" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_max_rel</source>
          <target state="translated">函数 std::intrinsics::atomic_max_rel</target>
        </trans-unit>
        <trans-unit id="68181ba12e9fcb9131b0368bcff2f202617a904e" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_max_relaxed</source>
          <target state="translated">函数 std::intrinsics::atomic_max_relaxed</target>
        </trans-unit>
        <trans-unit id="03d60645d9fdf40f0cdeadc9c62a66beccce73b2" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_min</source>
          <target state="translated">函数 std::intrinsics::atomic_min</target>
        </trans-unit>
        <trans-unit id="f412529642bae09c91a2918ae76b0083cdd116a8" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_min_acq</source>
          <target state="translated">函数 std::intrinsics::atomic_min_acq</target>
        </trans-unit>
        <trans-unit id="4f0129fd24c052c26d2cff0213021ffaa5a26141" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_min_acqrel</source>
          <target state="translated">函数 std::intrinsics::atomic_min_acqrel</target>
        </trans-unit>
        <trans-unit id="accc88f6c6162721f5f1f08f16e77b97f84e8136" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_min_rel</source>
          <target state="translated">函数 std::intrinsics::atomic_min_rel</target>
        </trans-unit>
        <trans-unit id="1a894d7d0ff97fe3d1bff6f23c3876e0e8d5cf01" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_min_relaxed</source>
          <target state="translated">函数std::intrinsics::atomic_min_relaxed</target>
        </trans-unit>
        <trans-unit id="2d5cfe1e0da2c8b604a13fb0c4d5def3bcc0fe05" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_nand</source>
          <target state="translated">函数 std::intrinsics::atomic_nand</target>
        </trans-unit>
        <trans-unit id="20cb0e70c7eab21657d6b9196e100e7a7268e389" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_nand_acq</source>
          <target state="translated">函数 std::intrinsics::atomic_nand_acq</target>
        </trans-unit>
        <trans-unit id="d829c3f5e5c25cd5f078e02412ed8b497893e505" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_nand_acqrel</source>
          <target state="translated">函数 std::intrinsics::atomic_nand_acqrel</target>
        </trans-unit>
        <trans-unit id="51745bee93cb553dd515cd26d97a744e50b00f88" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_nand_rel</source>
          <target state="translated">函数 std::intrinsics::atomic_nand_rel</target>
        </trans-unit>
        <trans-unit id="8f2184a53d3faf2dfbc8096bda41da42742d4b11" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_nand_relaxed</source>
          <target state="translated">函数std::intrinsics::atomic_nand_relaxed。</target>
        </trans-unit>
        <trans-unit id="e15a1fa056a17ed12cc0ca7d799d64f4b13ff6b8" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_or</source>
          <target state="translated">函数 std::intrinsics::atomic_or</target>
        </trans-unit>
        <trans-unit id="b9d93151e4115df6ee3345d8dd3e7a0481a98842" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_or_acq</source>
          <target state="translated">函数std::intrinsics::atomic_or_acq</target>
        </trans-unit>
        <trans-unit id="aa3340aafd6e5592ddd2e22891c16b56b7d9e0a8" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_or_acqrel</source>
          <target state="translated">函数 std::intrinsics::atomic_or_acqrel</target>
        </trans-unit>
        <trans-unit id="c8119dff5e090cc7f4cf0747a6a6c6d4b63325b3" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_or_rel</source>
          <target state="translated">函数 std::intrinsics::atomic_or_rel</target>
        </trans-unit>
        <trans-unit id="dc81e065a9758719576edcdd6d60fa47c707097e" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_or_relaxed</source>
          <target state="translated">函数 std::intrinsics::atomic_or_relaxed</target>
        </trans-unit>
        <trans-unit id="e81aaceb1658f487c55b38d935c756ae401295c3" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_singlethreadfence</source>
          <target state="translated">函数 std::intrinsics::atomic_singlethreadfence</target>
        </trans-unit>
        <trans-unit id="4402db0d845f0af53cd4059d26807a4df5d6498c" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_singlethreadfence_acq</source>
          <target state="translated">函数 std::intrinsics::atomic_singlethreadfence_acq</target>
        </trans-unit>
        <trans-unit id="9ebbf7f70d332b8ce126f2b6c1afe34a6b19b914" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_singlethreadfence_acqrel</source>
          <target state="translated">函数 std::intrinsics::atomic_singlethreadfence_acqrel</target>
        </trans-unit>
        <trans-unit id="ffd7f5b2ce700d60a15d682ab64dd10cccc20ad4" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_singlethreadfence_rel</source>
          <target state="translated">函数 std::intrinsics::atomic_singlethreadfence_rel</target>
        </trans-unit>
        <trans-unit id="0c2a81d047c561e9cb87fb39f4b1b32eebbf8ca8" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_store</source>
          <target state="translated">函数 std::intrinsics::atomic_store</target>
        </trans-unit>
        <trans-unit id="2ee549969e877c7b27baf516286ad29d8db0c0dc" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_store_rel</source>
          <target state="translated">函数 std::intrinsics::atomic_store_rel</target>
        </trans-unit>
        <trans-unit id="590261a38bfb6fc19deeb0e18f6328d56154e62c" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_store_relaxed</source>
          <target state="translated">函数 std::intrinsics::atomic_store_relaxed。</target>
        </trans-unit>
        <trans-unit id="709a5314326fee461b3fe825b79f13e4bbc51906" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_store_unordered</source>
          <target state="translated">函数 std::intrinsics::atomic_store_unordered</target>
        </trans-unit>
        <trans-unit id="2f05d15ea8839ab0a5f6a982beb914d4cd94497f" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_umax</source>
          <target state="translated">函数 std::intrinsics::atomic_umax</target>
        </trans-unit>
        <trans-unit id="58caab0e44c28da818bfa8b21fb1e0a3854275db" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_umax_acq</source>
          <target state="translated">函数 std::intrinsics::atomic_umax_acq</target>
        </trans-unit>
        <trans-unit id="485410d09deb7d4db9b4294336198ec95c5aac38" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_umax_acqrel</source>
          <target state="translated">函数 std::intrinsics::atomic_umax_acqrel</target>
        </trans-unit>
        <trans-unit id="e7d030aa6897ab0c8e4b57031c7be08644c7d4a4" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_umax_rel</source>
          <target state="translated">函数 std::intrinsics::atomic_umax_rel</target>
        </trans-unit>
        <trans-unit id="1c60325138a8d36005ec6ea575e5ea16dc74339b" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_umax_relaxed</source>
          <target state="translated">函数 std::intrinsics::atomic_umax_relaxed。</target>
        </trans-unit>
        <trans-unit id="b5cd699b1fc54fbec84c2a134a8833717d98009a" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_umin</source>
          <target state="translated">函数 std::intrinsics::atomic_umin</target>
        </trans-unit>
        <trans-unit id="f66c3e7aa0946f69185ad6161b3e2b5d1c7c0360" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_umin_acq</source>
          <target state="translated">函数 std::intrinsics::atomic_umin_acq</target>
        </trans-unit>
        <trans-unit id="6e3486c411158f0476ad8b3eb187ad36f8e05522" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_umin_acqrel</source>
          <target state="translated">函数 std::intrinsics::atomic_umin_acqrel</target>
        </trans-unit>
        <trans-unit id="e8b768c6a791e83dfbc74046b1f169cc0824883d" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_umin_rel</source>
          <target state="translated">函数 std::intrinsics::atomic_umin_rel</target>
        </trans-unit>
        <trans-unit id="8152554e0ce02fe3689452d05678c8a75c70e6cb" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_umin_relaxed</source>
          <target state="translated">函数 std::intrinsics::atomic_umin_relaxed 的作用。</target>
        </trans-unit>
        <trans-unit id="2c9460022df088a0a553484dcfacf73c4d2c6c49" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xadd</source>
          <target state="translated">函数 std::intrinsics::atomic_xadd</target>
        </trans-unit>
        <trans-unit id="bbfbb2d9fa5b20d2d0a52f974a74a8be7d1250a3" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xadd_acq</source>
          <target state="translated">函数 std::intrinsics::atomic_xadd_acq</target>
        </trans-unit>
        <trans-unit id="80a5c9fa25e8dacd29916af7a7876806c0c7b801" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xadd_acqrel</source>
          <target state="translated">函数 std::intrinsics::atomic_xadd_acqrel</target>
        </trans-unit>
        <trans-unit id="2681580a518ae1108079209ad3e87c09ac578238" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xadd_rel</source>
          <target state="translated">函数 std::intrinsics::atomic_xadd_rel</target>
        </trans-unit>
        <trans-unit id="a6632774d34b6d8bdf98921289f3bf98305b65c3" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xadd_relaxed</source>
          <target state="translated">函数 std::intrinsics::atomic_xadd_relaxed。</target>
        </trans-unit>
        <trans-unit id="680cf8b973773ce9f5cb5d5e143980ef48d38f83" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xchg</source>
          <target state="translated">函数 std::intrinsics::atomic_xchg</target>
        </trans-unit>
        <trans-unit id="06fa06a9a882944323a8537e5812f44de2b15574" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xchg_acq</source>
          <target state="translated">函数 std::intrinsics::atomic_xchg_acq</target>
        </trans-unit>
        <trans-unit id="514738ba82bccec7209c92dc3e542667c9f46aa0" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xchg_acqrel</source>
          <target state="translated">函数 std::intrinsics::atomic_xchg_acqrel</target>
        </trans-unit>
        <trans-unit id="e7e8b533420ea0deb98c9b6023dbdbf8c22178a5" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xchg_rel</source>
          <target state="translated">函数 std::intrinsics::atomic_xchg_rel</target>
        </trans-unit>
        <trans-unit id="b92febd7f8f2a2256f778fadeb825e82008c19e9" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xchg_relaxed</source>
          <target state="translated">函数 std::intrinsics::atomic_xchg_relaxed。</target>
        </trans-unit>
        <trans-unit id="2ea2937587ac1814222761b67af1039837c7653d" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xor</source>
          <target state="translated">函数 std::intrinsics::atomic_xor</target>
        </trans-unit>
        <trans-unit id="707de9981acd22a67a9431dbb504cf4159395ac2" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xor_acq</source>
          <target state="translated">函数 std::intrinsics::atomic_xor_acq</target>
        </trans-unit>
        <trans-unit id="833e4418ab431a17a9d91675e43ac8138046eb6d" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xor_acqrel</source>
          <target state="translated">函数 std::intrinsics::atomic_xor_acqrel</target>
        </trans-unit>
        <trans-unit id="35ec5057adba987f011914a33d5a6c2d44c7e8e4" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xor_rel</source>
          <target state="translated">函数 std::intrinsics::atomic_xor_rel</target>
        </trans-unit>
        <trans-unit id="b44cf1a28973fbd20f73163fe499efb58d6f607f" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xor_relaxed</source>
          <target state="translated">函数 std::intrinsics::atomic_xor_relaxed。</target>
        </trans-unit>
        <trans-unit id="3b36393cd0aa9496b4ae784a4407d76dc0812c10" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xsub</source>
          <target state="translated">函数 std::intrinsics::atomic_xsub</target>
        </trans-unit>
        <trans-unit id="0e05edf4266ca38cec129d7cbea17e2b5615af9c" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xsub_acq</source>
          <target state="translated">函数 std::intrinsics::atomic_xsub_acq</target>
        </trans-unit>
        <trans-unit id="ec5065f3f0f50521d5a5dce38c88ff20b63d0fa5" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xsub_acqrel</source>
          <target state="translated">函数 std::intrinsics::atomic_xsub_acqrel</target>
        </trans-unit>
        <trans-unit id="8ef37695d8e866884c3d116d76da8d567f0eb2b0" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xsub_rel</source>
          <target state="translated">函数 std::intrinsics::atomic_xsub_rel</target>
        </trans-unit>
        <trans-unit id="9535a9ea988c35b98c9a100edb8dbbfcdb21cc0a" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::atomic_xsub_relaxed</source>
          <target state="translated">函数 std::intrinsics::atomic_xsub_relaxed。</target>
        </trans-unit>
        <trans-unit id="0260761aac2d147168334337babec7c746cf1e11" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::bitreverse</source>
          <target state="translated">函数 std::intrinsics::bitreverse</target>
        </trans-unit>
        <trans-unit id="349680778834fca16f9d706876d86fef2c5f6a4d" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::breakpoint</source>
          <target state="translated">函数 std::intrinsics::breakpoint</target>
        </trans-unit>
        <trans-unit id="44a50e7b9e7f8cceb58990743bc9f61879dd5383" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::bswap</source>
          <target state="translated">函数 std::intrinsics::bswap</target>
        </trans-unit>
        <trans-unit id="ae109593fcee3317c44f07c366f8e95547100492" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::caller_location</source>
          <target state="translated">函数 std::intrinsics::caller_location</target>
        </trans-unit>
        <trans-unit id="f8a2bd170e3a75454c4f05d5bbcb8639c2aa54ff" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::ceilf32</source>
          <target state="translated">函数 std::intrinsics::ceilf32</target>
        </trans-unit>
        <trans-unit id="976747cd2c5e09a74b339fc0666d68d4cfde0c5e" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::ceilf64</source>
          <target state="translated">函数 std::intrinsics::ceilf64</target>
        </trans-unit>
        <trans-unit id="92178f80cf649440eb1a78675233ea868603f646" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::const_allocate</source>
          <target state="translated">函数 std::intrinsics::const_allocate</target>
        </trans-unit>
        <trans-unit id="faffd8585027515ddae4f1331689122329742d1c" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::copy</source>
          <target state="translated">函数 std::intrinsics::copy</target>
        </trans-unit>
        <trans-unit id="7f8aef550653229ec93aa002745a05a7de864fc8" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::copy_nonoverlapping</source>
          <target state="translated">函数 std::intrinsics::copy_nonoverlapping</target>
        </trans-unit>
        <trans-unit id="b1913a2055a535ce3e7b5d8fcdb5564f85606921" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::copysignf32</source>
          <target state="translated">函数 std::intrinsics::copysignf32</target>
        </trans-unit>
        <trans-unit id="137086a9e3acf79d7f58e815b9cf53cf5c487284" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::copysignf64</source>
          <target state="translated">函数 std::intrinsics::copysignf64</target>
        </trans-unit>
        <trans-unit id="ba20d643ea9b3e1f178eae70ce17f616603801ed" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::cosf32</source>
          <target state="translated">函数 std::intrinsics::cosf32</target>
        </trans-unit>
        <trans-unit id="7844690936abbf209a7dc3fedfccc3bbd90ec9cc" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::cosf64</source>
          <target state="translated">函数 std::intrinsics::cosf64</target>
        </trans-unit>
        <trans-unit id="545d20596e2a8383e286ad517cc0ec75c2f9ab02" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::ctlz</source>
          <target state="translated">函数 std::intrinsics::ctlz</target>
        </trans-unit>
        <trans-unit id="586da9633fdd054b9e8a48419276b9ebfe15778d" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::ctlz_nonzero</source>
          <target state="translated">函数 std::intrinsics::ctlz_nonzero</target>
        </trans-unit>
        <trans-unit id="78aa0af231e9d9cdb012b5f501d915f806f6f319" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::ctpop</source>
          <target state="translated">函数 std::intrinsics::ctpop</target>
        </trans-unit>
        <trans-unit id="8e1aff64d8386fcb240654511fcd6b1efe27e021" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::cttz</source>
          <target state="translated">函数 std::intrinsics::cttz</target>
        </trans-unit>
        <trans-unit id="8203326fe691f7f3a7d6ceb9fbe41c6aa246d5ad" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::cttz_nonzero</source>
          <target state="translated">函数std::intrinsics::cttz_nonzero</target>
        </trans-unit>
        <trans-unit id="3cafd9582dca45d45f6436f5c5cc310e40a2e757" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::discriminant_value</source>
          <target state="translated">函数 std::intrinsics::discriminant_value</target>
        </trans-unit>
        <trans-unit id="310254651639c9db365ac028773fcd16703837c0" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::drop_in_place</source>
          <target state="translated">函数 std::intrinsics::drop_in_place</target>
        </trans-unit>
        <trans-unit id="6504fb6abec53cb5ae5ba0d14dc3bbdc1460d019" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::exact_div</source>
          <target state="translated">函数 std::intrinsics::exact_div</target>
        </trans-unit>
        <trans-unit id="82932dd085b91a4d031ba681d9948195cde3cd38" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::exp2f32</source>
          <target state="translated">函数 std::intrinsics::exp2f32</target>
        </trans-unit>
        <trans-unit id="e028afe12378e9a7dec9c17ebc90e34a8dc9600f" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::exp2f64</source>
          <target state="translated">函数 std::intrinsics::exp2f64</target>
        </trans-unit>
        <trans-unit id="18af580843073152f816810c9976eb7720febbca" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::expf32</source>
          <target state="translated">函数 std::intrinsics::expf32</target>
        </trans-unit>
        <trans-unit id="a487e6b4e2e45873fc4f641e5c506c952d1524af" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::expf64</source>
          <target state="translated">函数 std::intrinsics::expf64</target>
        </trans-unit>
        <trans-unit id="a8adaa7a58d666f4fbdf1e5525dfd0c198e51252" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::fabsf32</source>
          <target state="translated">函数 std::intrinsics::fabsf32</target>
        </trans-unit>
        <trans-unit id="7629eebcb33c16f80571048ef86b1dfdd1a0f885" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::fabsf64</source>
          <target state="translated">函数 std::intrinsics::fabsf64</target>
        </trans-unit>
        <trans-unit id="69b4f3a5e06eb557862c2a57da3d1fc73419e30a" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::fadd_fast</source>
          <target state="translated">函数 std::intrinsics::fadd_fast</target>
        </trans-unit>
        <trans-unit id="c7a18d7f11ba26cb1ed1051c2e9c904a9165cd84" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::fdiv_fast</source>
          <target state="translated">函数 std::intrinsics::fdiv_fast</target>
        </trans-unit>
        <trans-unit id="728738500bc610f4175ce66f13bc4fc3cdc7d6d4" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::float_to_int_unchecked</source>
          <target state="translated">函数 std::intrinsics::float_to_int_unchecked</target>
        </trans-unit>
        <trans-unit id="53805e4a6d094a1ed0fc8ae314253cf3d18e4925" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::floorf32</source>
          <target state="translated">函数 std::intrinsics::floorf32</target>
        </trans-unit>
        <trans-unit id="5087cca6667fde2e528e02304268dd29727f68d5" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::floorf64</source>
          <target state="translated">函数 std::intrinsics::floorf64</target>
        </trans-unit>
        <trans-unit id="6d9e80778a8a8bb7b076af29d264cc6ac4d31464" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::fmaf32</source>
          <target state="translated">函数 std::intrinsics::fmaf32</target>
        </trans-unit>
        <trans-unit id="69ccf507111b23d6b5f24105fccac6844e451347" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::fmaf64</source>
          <target state="translated">函数 std::intrinsics::fmaf64</target>
        </trans-unit>
        <trans-unit id="2349408da65549dbec5bb73465311981246bbf97" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::fmul_fast</source>
          <target state="translated">函数 std::intrinsics::fmul_fast</target>
        </trans-unit>
        <trans-unit id="cceed86fa20f56a919cf803345dd9b828df9674a" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::forget</source>
          <target state="translated">函数 std::intrinsics::getting</target>
        </trans-unit>
        <trans-unit id="86f07f2b4a1330c776c20237c7c64e5350fe7a5e" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::frem_fast</source>
          <target state="translated">函数 std::intrinsics::frem_fast</target>
        </trans-unit>
        <trans-unit id="231639afbfa8bf549bf19aa8a5784f9d60021d98" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::fsub_fast</source>
          <target state="translated">函数 std::intrinsics::fsub_fast</target>
        </trans-unit>
        <trans-unit id="ed9c4a8ed619340f92e2a9df5452869c312b0de1" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::init</source>
          <target state="translated">函数std::intrinsics::init</target>
        </trans-unit>
        <trans-unit id="7c1b33d44ee817a1195ff1ae434f17a8c881520d" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::likely</source>
          <target state="translated">函数 std::intrinsics::likely</target>
        </trans-unit>
        <trans-unit id="9c1a2ccf1bde488fbc644dc3f8f44d65849caac1" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::log10f32</source>
          <target state="translated">函数 std::intrinsics::log10f32</target>
        </trans-unit>
        <trans-unit id="20d4bfb5aa64df87eaa6900cf1beefc654cf4a7a" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::log10f64</source>
          <target state="translated">函数 std::intrinsics::log10f64。</target>
        </trans-unit>
        <trans-unit id="c6b24066c8aa075221162eedd883f8b99c6e7962" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::log2f32</source>
          <target state="translated">函数 std::intrinsics::log2f32</target>
        </trans-unit>
        <trans-unit id="9727143de27fc62370d2a1b5926f675d501a3b4d" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::log2f64</source>
          <target state="translated">函数 std::intrinsics::log2f64</target>
        </trans-unit>
        <trans-unit id="8932c55ef33afa4acde60b583c83ca8dc7bb2b5d" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::logf32</source>
          <target state="translated">函数 std::intrinsics::logf32</target>
        </trans-unit>
        <trans-unit id="7f22cdc0fa2dacd7415fc7e9d0a094184c3cb950" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::logf64</source>
          <target state="translated">函数 std::intrinsics::logf64</target>
        </trans-unit>
        <trans-unit id="5d69b377a76975ef03024043cab2db73bb7cfd6e" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::maxnumf32</source>
          <target state="translated">函数 std::intrinsics::maxnumf32。</target>
        </trans-unit>
        <trans-unit id="a61de5d98ba89ecd434c9fa3a3ec1e6ad271b371" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::maxnumf64</source>
          <target state="translated">函数 std::intrinsics::maxnumf64</target>
        </trans-unit>
        <trans-unit id="88db98a255bac3fca6c1a7aded0061f0c5ffb992" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::min_align_of</source>
          <target state="translated">函数 std::intrinsics::min_align_of</target>
        </trans-unit>
        <trans-unit id="247c74b0f39ff5d9c9103b8959e5632c25d36333" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::min_align_of_val</source>
          <target state="translated">函数 std::intrinsics::min_align_of_val。</target>
        </trans-unit>
        <trans-unit id="4e255574eb58b5b232e8ca21b4231687388852a6" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::minnumf32</source>
          <target state="translated">函数 std::intrinsics::minnumf32。</target>
        </trans-unit>
        <trans-unit id="4cb1c4535cd483762169b7280f6b0d67d38dc715" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::minnumf64</source>
          <target state="translated">函数 std::intrinsics::minnumf64</target>
        </trans-unit>
        <trans-unit id="64b7dd1362cd90b88d2e4cf4ba5b57fb272d0e86" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::move_val_init</source>
          <target state="translated">函数 std::intrinsics::move_val_init</target>
        </trans-unit>
        <trans-unit id="ba6b9dc8d20816d73a44eae1ff702793043a6c6b" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::mul_with_overflow</source>
          <target state="translated">函数 std::intrinsics::mul_with_overflow</target>
        </trans-unit>
        <trans-unit id="cc363bbfcaf0ddc1c5ccc5d4bf6c45a506adf48e" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::nearbyintf32</source>
          <target state="translated">函数 std::intrinsics::nearlyintf32。</target>
        </trans-unit>
        <trans-unit id="0e1ee55cf307484318085364bbe8e054ff2d4b2c" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::nearbyintf64</source>
          <target state="translated">函数 std::intrinsics::nearlyintf64</target>
        </trans-unit>
        <trans-unit id="d28a1a5c27c1207609e01cd087a0b7734625a4b6" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::needs_drop</source>
          <target state="translated">函数 std::intrinsics::needs_drop</target>
        </trans-unit>
        <trans-unit id="cb650b3e42edf7fc293ce90a39e6cb676d382183" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::nontemporal_store</source>
          <target state="translated">函数 std::intrinsics::nontemporal_store</target>
        </trans-unit>
        <trans-unit id="fafa1c6d37c3693abf8f4f9d868d6f55012eb92f" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::offset</source>
          <target state="translated">函数 std::intrinsics::offset</target>
        </trans-unit>
        <trans-unit id="5a22426f8e762b657e9fc40aeb64ce5e6c72d064" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::overflowing_add</source>
          <target state="translated">函数 std::intrinsics::overflowing_add</target>
        </trans-unit>
        <trans-unit id="4df7d5cfb3e78f525f98823f4fdfc3f1b6a232d3" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::overflowing_mul</source>
          <target state="translated">函数 std::intrinsics::overflowing_mul</target>
        </trans-unit>
        <trans-unit id="cfd20a808c9a3a59059a78ac374417c18c147162" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::overflowing_sub</source>
          <target state="translated">函数 std::intrinsics::overflowing_sub</target>
        </trans-unit>
        <trans-unit id="8aab4244d4cb857730352617a712962fe12596d7" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::panic_if_uninhabited</source>
          <target state="translated">函数 std::intrinsics::panic_if_uninhabited</target>
        </trans-unit>
        <trans-unit id="c0aa024e255736ab35130f77373eafc270b53271" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::powf32</source>
          <target state="translated">函数 std::intrinsics::powf32</target>
        </trans-unit>
        <trans-unit id="01ed7bdb862e4b6b2be4dd8a79730895bdce1811" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::powf64</source>
          <target state="translated">函数 std::intrinsics::powf64</target>
        </trans-unit>
        <trans-unit id="687108b30d40e0e24c3c047502aa9ccd4b054f8d" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::powif32</source>
          <target state="translated">函数 std::intrinsics::powif32</target>
        </trans-unit>
        <trans-unit id="1ac5843df07be2dac60ad62b042b4211533da2e6" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::powif64</source>
          <target state="translated">函数 std::intrinsics::powif64</target>
        </trans-unit>
        <trans-unit id="0a6e8570156d01a735127c81e305ad49d4e17077" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::pref_align_of</source>
          <target state="translated">函数 std::intrinsics::pref_align_of</target>
        </trans-unit>
        <trans-unit id="12a6591a462d811e6218d01e0da3c4ce046e4577" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::prefetch_read_data</source>
          <target state="translated">函数 std::intrinsics::prefetch_read_data</target>
        </trans-unit>
        <trans-unit id="b612cc839b74b18def501a5c39142a31d05c3251" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::prefetch_read_instruction</source>
          <target state="translated">函数 std::intrinsics::prefetch_read_instruction</target>
        </trans-unit>
        <trans-unit id="7cc4fef16b4e3346cf3e97a3bcfa63f4965a73fb" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::prefetch_write_data</source>
          <target state="translated">函数 std::intrinsics::prefetch_write_data</target>
        </trans-unit>
        <trans-unit id="98446d47acd3b1adcc37c4e4edac6c4d5d410bc1" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::prefetch_write_instruction</source>
          <target state="translated">函数 std::intrinsics::prefetch_write_instruction</target>
        </trans-unit>
        <trans-unit id="b78b0dde74d565e691e47d568598c8a5f9e96e8d" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::ptr_guaranteed_eq</source>
          <target state="translated">函数 std::intrinsics::ptr_guaranteed_eq</target>
        </trans-unit>
        <trans-unit id="9a7cfb34571d6cf78d023ca56021226516b0af6e" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::ptr_guaranteed_ne</source>
          <target state="translated">函数 std::intrinsics::ptr_guaranteed_ne</target>
        </trans-unit>
        <trans-unit id="61ccd968a4d5bc256abbd4d44ad47fe68c6ab584" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::ptr_offset_from</source>
          <target state="translated">函数 std::intrinsics::ptr_offset_from</target>
        </trans-unit>
        <trans-unit id="d3635ca7a4ece00d22e8745333a108e09321070e" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::rintf32</source>
          <target state="translated">函数 std::intrinsics::rintf32</target>
        </trans-unit>
        <trans-unit id="b52123f2feab6d81200c8b6c82009aa05af9d5e8" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::rintf64</source>
          <target state="translated">函数 std::intrinsics::rintf64</target>
        </trans-unit>
        <trans-unit id="5d25a2d6ed8eb295f10db9229d10b9b801b62aac" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::rotate_left</source>
          <target state="translated">函数 std::intrinsics::rotate_left</target>
        </trans-unit>
        <trans-unit id="6f64a0f1e08ebc04835dfcafc082dfa995ecca65" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::rotate_right</source>
          <target state="translated">函数 std::intrinsics::rotate_right</target>
        </trans-unit>
        <trans-unit id="01761bc7b91f5d00e064051e941086db75bc64eb" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::roundf32</source>
          <target state="translated">函数 std::intrinsics::roundf32</target>
        </trans-unit>
        <trans-unit id="e3f3c017ce47d7b4613d489a7dfa5c51d99c122a" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::roundf64</source>
          <target state="translated">函数 std::intrinsics::roundf64</target>
        </trans-unit>
        <trans-unit id="56592ea3364203da6002bb091c8b5ada90dd06be" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::rustc_peek</source>
          <target state="translated">函数 std::intrinsics::rustc_peek</target>
        </trans-unit>
        <trans-unit id="4b62ddf100ee5e23c3b1e9f82f34aa6e7bbce1af" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::saturating_add</source>
          <target state="translated">函数 std::intrinsics::saturating_add</target>
        </trans-unit>
        <trans-unit id="c47d89e89860bbcd6e10cd71fc55d76f9c148c16" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::saturating_sub</source>
          <target state="translated">函数 std::intrinsics::saturating_sub</target>
        </trans-unit>
        <trans-unit id="a2f910e6e38dfbab9f3fe62488dc49c833f38693" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::sinf32</source>
          <target state="translated">函数 std::intrinsics::sinf32</target>
        </trans-unit>
        <trans-unit id="5b619a447d74b5fd6738770896593b7fe76db6ca" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::sinf64</source>
          <target state="translated">函数 std::intrinsics::sinf64</target>
        </trans-unit>
        <trans-unit id="602d9a20834ba884f5b93e6b43af744d53b52e84" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::size_of</source>
          <target state="translated">函数 std::intrinsics::size_of</target>
        </trans-unit>
        <trans-unit id="d932ae577dbc34467190ebf5837932cf7fbb0e16" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::size_of_val</source>
          <target state="translated">函数 std::intrinsics::size_of_val</target>
        </trans-unit>
        <trans-unit id="d08e2158f5b8cfa3eab183618a77ec54b076b30a" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::sqrtf32</source>
          <target state="translated">函数 std::intrinsics::sqrtf32</target>
        </trans-unit>
        <trans-unit id="8dbb591c1397f0ba91c7f236b0a614975c326f6a" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::sqrtf64</source>
          <target state="translated">函数 std::intrinsics::sqrtf64</target>
        </trans-unit>
        <trans-unit id="740c5394484a39f579e83b184235503d95960198" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::sub_with_overflow</source>
          <target state="translated">函数 std::intrinsics::sub_with_overflow</target>
        </trans-unit>
        <trans-unit id="393e4373d62b400801116f27af3199376f6e2ca1" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::transmute</source>
          <target state="translated">函数 std::intrinsics::transmute</target>
        </trans-unit>
        <trans-unit id="1226c6bc2b3fcfeb6f782c3e8390b9416f380d57" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::truncf32</source>
          <target state="translated">函数 std::intrinsics::truncf32</target>
        </trans-unit>
        <trans-unit id="edb587d16baed0c03c665836869638e3d11d6f56" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::truncf64</source>
          <target state="translated">函数 std::intrinsics::truncf64</target>
        </trans-unit>
        <trans-unit id="a57d356a02b0ff34ec68a387e9131952f056f9aa" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::try</source>
          <target state="translated">函数 std::intrinsics::try</target>
        </trans-unit>
        <trans-unit id="048a5087acf80c0faff9b518dcc85010ea41ae06" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::type_id</source>
          <target state="translated">函数 std::intrinsics::type_id</target>
        </trans-unit>
        <trans-unit id="e75acaff03c74f3f8ac169c744a94d8a2861e33a" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::type_name</source>
          <target state="translated">函数 std::intrinsics::type_name</target>
        </trans-unit>
        <trans-unit id="187c861d5662a2fda8a4bf5846d843bd0201c65a" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::unaligned_volatile_load</source>
          <target state="translated">函数 std::intrinsics::unaligned_volatile_load。</target>
        </trans-unit>
        <trans-unit id="e8eb96d3a4cd10e2625c8223b4805c89ed68cf61" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::unaligned_volatile_store</source>
          <target state="translated">函数 std::intrinsics::unaligned_volatile_store</target>
        </trans-unit>
        <trans-unit id="93c26151cb053ed2646156176f682b5a446e90f0" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::unchecked_add</source>
          <target state="translated">函数 std::intrinsics::unchecked_add</target>
        </trans-unit>
        <trans-unit id="4e47211d92e063ddfd83890496af3139cde8fc16" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::unchecked_div</source>
          <target state="translated">函数 std::intrinsics::unchecked_div</target>
        </trans-unit>
        <trans-unit id="ad08da36331e84c72eea9029948dfa845c72a90e" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::unchecked_mul</source>
          <target state="translated">函数 std::intrinsics::unchecked_mul</target>
        </trans-unit>
        <trans-unit id="b2134ce439c68a3e1c68abdd0075fe3ce7125860" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::unchecked_rem</source>
          <target state="translated">函数 std::intrinsics::unchecked_rem</target>
        </trans-unit>
        <trans-unit id="4c92ba0932c92f93ec0a719533727714b58b0697" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::unchecked_shl</source>
          <target state="translated">函数 std::intrinsics::unchecked_shl</target>
        </trans-unit>
        <trans-unit id="ba6d2658ad2136cb3776c0d405847fb2996a7b26" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::unchecked_shr</source>
          <target state="translated">函数std::intrinsics::unchecked_shr</target>
        </trans-unit>
        <trans-unit id="3d1d1be087221db7a4bfc8d7ed23b90aa230d61e" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::unchecked_sub</source>
          <target state="translated">函数 std::intrinsics::unchecked_sub</target>
        </trans-unit>
        <trans-unit id="5a775a1f84e4e5935e7a1fa50f24f474b2f2ece9" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::uninit</source>
          <target state="translated">函数 std::intrinsics::uninit</target>
        </trans-unit>
        <trans-unit id="ac3412d8fdd72040d3536bb26f45818e160ddc4a" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::unlikely</source>
          <target state="translated">函数 std::intrinsics::unlikely</target>
        </trans-unit>
        <trans-unit id="bedb934a4c63e4e31201c35f9bd36ac2036acf4c" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::unreachable</source>
          <target state="translated">函数 std::intrinsics::unreachable</target>
        </trans-unit>
        <trans-unit id="13131be8bd373e055dd1cdba09cc15d8b667e96c" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::variant_count</source>
          <target state="translated">函数std::intrinsics::variant_count</target>
        </trans-unit>
        <trans-unit id="345df5921d118e19bbbe36d890c957478b05ad24" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::volatile_copy_memory</source>
          <target state="translated">函数 std::intrinsics::volatile_copy_memory</target>
        </trans-unit>
        <trans-unit id="d15cadb9febd1bff809e35db3daeb66b7188a917" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::volatile_copy_nonoverlapping_memory</source>
          <target state="translated">函数 std::intrinsics::volatile_copy_nonoverlapping_memory</target>
        </trans-unit>
        <trans-unit id="07c6d83d44a425af2f32ab2dd74d20f7a63f96d4" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::volatile_load</source>
          <target state="translated">函数 std::intrinsics::volatile_load</target>
        </trans-unit>
        <trans-unit id="c9412efc461309c92b831fdd57c484471b4f3eea" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::volatile_set_memory</source>
          <target state="translated">函数 std::intrinsics::volatile_set_memory</target>
        </trans-unit>
        <trans-unit id="1eb394e96696e1469e03dd3a669f002772e46b9a" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::volatile_store</source>
          <target state="translated">函数 std::intrinsics::volatile_store</target>
        </trans-unit>
        <trans-unit id="bb6344dfce8c3f3f3acf3313bad2be221b6611e8" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::wrapping_add</source>
          <target state="translated">函数 std::intrinsics::wrapping_add</target>
        </trans-unit>
        <trans-unit id="22514a7749b9bbbaf53c9706225dfc3714b3d78b" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::wrapping_mul</source>
          <target state="translated">函数 std::intrinsics::wrapping_mul</target>
        </trans-unit>
        <trans-unit id="cb76adfcef09944b7694dbf0862b1566ce5b4820" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::wrapping_sub</source>
          <target state="translated">函数 std::intrinsics::wrapping_sub</target>
        </trans-unit>
        <trans-unit id="4bb898dc02fd331bafb306f521470ae8500576f2" translate="yes" xml:space="preserve">
          <source>Function std::intrinsics::write_bytes</source>
          <target state="translated">函数 std::intrinsics::write_bytes</target>
        </trans-unit>
        <trans-unit id="1462d4d75a2c1721ae019391a3145504468f86be" translate="yes" xml:space="preserve">
          <source>Function std::io::copy</source>
          <target state="translated">函数 std::io::copy</target>
        </trans-unit>
        <trans-unit id="9d322972ffb0afbe003983c33a48b9602bb2f27f" translate="yes" xml:space="preserve">
          <source>Function std::io::empty</source>
          <target state="translated">函数 std::io::empty</target>
        </trans-unit>
        <trans-unit id="0e44261c77f2a9a37128f44301117effed40f1c3" translate="yes" xml:space="preserve">
          <source>Function std::io::repeat</source>
          <target state="translated">函数 std::io::repeat</target>
        </trans-unit>
        <trans-unit id="c29e5e3e5ed19f15f59bfadf33f1b68ff0bcec24" translate="yes" xml:space="preserve">
          <source>Function std::io::sink</source>
          <target state="translated">函数 std::io::sink</target>
        </trans-unit>
        <trans-unit id="f05871015518914000f1553345c9cdc1aacee082" translate="yes" xml:space="preserve">
          <source>Function std::io::stderr</source>
          <target state="translated">函数 std::io::stderr</target>
        </trans-unit>
        <trans-unit id="9f387e200f166807748357421615ad6cd24836ef" translate="yes" xml:space="preserve">
          <source>Function std::io::stdin</source>
          <target state="translated">函数 std::io::stdin</target>
        </trans-unit>
        <trans-unit id="08deee2644283017a2d65fbd802faf47f51890da" translate="yes" xml:space="preserve">
          <source>Function std::io::stdout</source>
          <target state="translated">函数 std::io::stdout</target>
        </trans-unit>
        <trans-unit id="3db86c4bbed75ef0f573f856b5cce7f9cf2ceefb" translate="yes" xml:space="preserve">
          <source>Function std::iter::empty</source>
          <target state="translated">函数 std::iter::empty</target>
        </trans-unit>
        <trans-unit id="66b49fad94d10ec92ebc41d1cee4b7f8d9b3b8fd" translate="yes" xml:space="preserve">
          <source>Function std::iter::from_fn</source>
          <target state="translated">函数 std::iter::from_fn</target>
        </trans-unit>
        <trans-unit id="dff51980c0868fb23253f76a41dc563a29201f61" translate="yes" xml:space="preserve">
          <source>Function std::iter::once</source>
          <target state="translated">函数 std::iter::once</target>
        </trans-unit>
        <trans-unit id="3d48207de32201be75ffe9021e62b76b7d2e78dd" translate="yes" xml:space="preserve">
          <source>Function std::iter::once_with</source>
          <target state="translated">函数 std::iter::once_with</target>
        </trans-unit>
        <trans-unit id="a2b35eb94e24a9505503301e6633d676822bef0c" translate="yes" xml:space="preserve">
          <source>Function std::iter::repeat</source>
          <target state="translated">函数 std::iter::repeak</target>
        </trans-unit>
        <trans-unit id="87a88047b36d48b765b5020959d507cb5f244ac7" translate="yes" xml:space="preserve">
          <source>Function std::iter::repeat_with</source>
          <target state="translated">函数 std::iter::repeat_with</target>
        </trans-unit>
        <trans-unit id="5ef587525044407aa0b4094d8f081edd2daddc8e" translate="yes" xml:space="preserve">
          <source>Function std::iter::successors</source>
          <target state="translated">函数 std::iter::successors</target>
        </trans-unit>
        <trans-unit id="e69ba0a2b2f3ad4e91cf8a195f315895ae885650" translate="yes" xml:space="preserve">
          <source>Function std::mem::align_of</source>
          <target state="translated">函数 std::mem::align_of</target>
        </trans-unit>
        <trans-unit id="f925a0568c240c6dd15386b07765248dacabf3db" translate="yes" xml:space="preserve">
          <source>Function std::mem::align_of_val</source>
          <target state="translated">函数 std::mem::align_of_val</target>
        </trans-unit>
        <trans-unit id="7b7c4699b803f66c38cc6d513902404f9aca8258" translate="yes" xml:space="preserve">
          <source>Function std::mem::align_of_val_raw</source>
          <target state="translated">函数 std::mem::align_of_val_raw</target>
        </trans-unit>
        <trans-unit id="d9e95f4da151ab2a40c7e9698a17adc132df0f46" translate="yes" xml:space="preserve">
          <source>Function std::mem::discriminant</source>
          <target state="translated">函数 std::mem::discriminant</target>
        </trans-unit>
        <trans-unit id="6475a81fa7667dcc4953d17a2ae5fd2196a16c35" translate="yes" xml:space="preserve">
          <source>Function std::mem::drop</source>
          <target state="translated">函数 std::mem::drop</target>
        </trans-unit>
        <trans-unit id="34977281a088ed668126c16ffced4c672d9ee045" translate="yes" xml:space="preserve">
          <source>Function std::mem::forget</source>
          <target state="translated">函数 std::mem::forget</target>
        </trans-unit>
        <trans-unit id="93c2b9571818c664355ea5a0dcd917eacf555574" translate="yes" xml:space="preserve">
          <source>Function std::mem::forget_unsized</source>
          <target state="translated">函数 std::mem::getting_unsized</target>
        </trans-unit>
        <trans-unit id="6ddede8e9373838661e83d5e49c5870ddfc635d4" translate="yes" xml:space="preserve">
          <source>Function std::mem::min_align_of</source>
          <target state="translated">函数 std::mem::min_align_of</target>
        </trans-unit>
        <trans-unit id="22810ad4b80752b76f6272e78e7f24408c71745f" translate="yes" xml:space="preserve">
          <source>Function std::mem::min_align_of_val</source>
          <target state="translated">函数 std::mem::min_align_of_val。</target>
        </trans-unit>
        <trans-unit id="e1b2757db0555bef1a5af563113bea383ea658f1" translate="yes" xml:space="preserve">
          <source>Function std::mem::needs_drop</source>
          <target state="translated">函数 std::mem::needs_drop</target>
        </trans-unit>
        <trans-unit id="1d250c3f7215728aec0a7bfa6379b0d693c87c55" translate="yes" xml:space="preserve">
          <source>Function std::mem::replace</source>
          <target state="translated">函数 std::mem::replace</target>
        </trans-unit>
        <trans-unit id="273ddf6ee92bb4e40157a902d61bcf24a9c611ad" translate="yes" xml:space="preserve">
          <source>Function std::mem::size_of</source>
          <target state="translated">函数 std::mem::size_of</target>
        </trans-unit>
        <trans-unit id="f9365fb71c6db7ab8823f257068c1fa0c61895c4" translate="yes" xml:space="preserve">
          <source>Function std::mem::size_of_val</source>
          <target state="translated">函数 std::mem::size_of_val。</target>
        </trans-unit>
        <trans-unit id="15eebd1032b9272993d22267fe558eea496dce70" translate="yes" xml:space="preserve">
          <source>Function std::mem::size_of_val_raw</source>
          <target state="translated">函数 std::mem::size_of_val_raw。</target>
        </trans-unit>
        <trans-unit id="5bf15dfcadccab356db41c543e7d2dd0719bc54b" translate="yes" xml:space="preserve">
          <source>Function std::mem::swap</source>
          <target state="translated">函数 std::mem::swap</target>
        </trans-unit>
        <trans-unit id="a9a358b3691976e722e4f46966a0191a117318e2" translate="yes" xml:space="preserve">
          <source>Function std::mem::take</source>
          <target state="translated">函数 std::mem::take</target>
        </trans-unit>
        <trans-unit id="8000c51bce3358a180dec44b363d021f765dee13" translate="yes" xml:space="preserve">
          <source>Function std::mem::transmute</source>
          <target state="translated">函数 std::mem::transmute</target>
        </trans-unit>
        <trans-unit id="a34058ce750ce0e9d7fea1e2756db0e58fabdb12" translate="yes" xml:space="preserve">
          <source>Function std::mem::transmute_copy</source>
          <target state="translated">函数 std::mem::transmute_copy</target>
        </trans-unit>
        <trans-unit id="e2168cf325d9fdb4bb40acb9002e87cae0a35230" translate="yes" xml:space="preserve">
          <source>Function std::mem::uninitialized</source>
          <target state="translated">函数 std::mem::uninitialized</target>
        </trans-unit>
        <trans-unit id="15b394955bbf59e3eb4f917be40b00478ba00bad" translate="yes" xml:space="preserve">
          <source>Function std::mem::variant_count</source>
          <target state="translated">函数std::mem::variant_count</target>
        </trans-unit>
        <trans-unit id="d6aee94a962f29ccad67cacb5695c37eb2e57120" translate="yes" xml:space="preserve">
          <source>Function std::mem::zeroed</source>
          <target state="translated">函数 std::mem::zeroed</target>
        </trans-unit>
        <trans-unit id="9fbabcc1415c98e197c63a5df4d5f8ec75a6fd2b" translate="yes" xml:space="preserve">
          <source>Function std::os::unix::fs::symlink</source>
          <target state="translated">函数 std::os::unix::fs::symlink</target>
        </trans-unit>
        <trans-unit id="0cb9d4491f67786e23110780ee139d285c647816" translate="yes" xml:space="preserve">
          <source>Function std::os::unix::process::parent_id</source>
          <target state="translated">函数 std::os::unix::process::parent_id</target>
        </trans-unit>
        <trans-unit id="4beb8a255740f5d07c6a59d5ae0917e17fc96853" translate="yes" xml:space="preserve">
          <source>Function std::os::unix::ucred::impl_linux::peer_cred</source>
          <target state="translated">函数 std::os::unix::ucred::impl_linux::peer_cred。</target>
        </trans-unit>
        <trans-unit id="221a56598ab4f515f7d1f48325b921251a1a8097" translate="yes" xml:space="preserve">
          <source>Function std::os::unix::ucred::peer_cred</source>
          <target state="translated">函数 std::os::unix::ucred::peer_cred</target>
        </trans-unit>
        <trans-unit id="955a8b38ef9ca7cc74dba342165900b733f89c71" translate="yes" xml:space="preserve">
          <source>Function std::os::windows::fs::symlink_dir</source>
          <target state="translated">函数 std::os::windows::fs::symlink_dir</target>
        </trans-unit>
        <trans-unit id="7030c8af6886acb93aefd94038042b18937920ce" translate="yes" xml:space="preserve">
          <source>Function std::os::windows::fs::symlink_file</source>
          <target state="translated">函数 std::os::windows::fs::symlink_file</target>
        </trans-unit>
        <trans-unit id="8561ba72a9691a11d16234536f898f0406c41e4b" translate="yes" xml:space="preserve">
          <source>Function std::panic::catch_unwind</source>
          <target state="translated">函数 std::panic::catch_unwind</target>
        </trans-unit>
        <trans-unit id="7db95b5853cd8e6470615625e376f10fb77b365a" translate="yes" xml:space="preserve">
          <source>Function std::panic::panic_any</source>
          <target state="translated">函数 std::panic::panic_any</target>
        </trans-unit>
        <trans-unit id="d0b54652683b0f081f3c450fac3c724be97e0e07" translate="yes" xml:space="preserve">
          <source>Function std::panic::resume_unwind</source>
          <target state="translated">函数 std::panic::resume_unwind</target>
        </trans-unit>
        <trans-unit id="39271975d3373b9cea19608740e1ec82ed2ae6b7" translate="yes" xml:space="preserve">
          <source>Function std::panic::set_hook</source>
          <target state="translated">函数 std::panic::set_hook</target>
        </trans-unit>
        <trans-unit id="bbe33939a3aefba77a1076ac9c7e64784a3a15b1" translate="yes" xml:space="preserve">
          <source>Function std::panic::take_hook</source>
          <target state="translated">函数 std::panic::take_hook</target>
        </trans-unit>
        <trans-unit id="25a8c22b45e0de0551522051b0461b2b6ab3b0ee" translate="yes" xml:space="preserve">
          <source>Function std::path::is_separator</source>
          <target state="translated">函数 std::path::is_separator</target>
        </trans-unit>
        <trans-unit id="f5cf3f4b834aa36120f315ecc6215ba2718045a8" translate="yes" xml:space="preserve">
          <source>Function std::process::abort</source>
          <target state="translated">函数 std::process::abort</target>
        </trans-unit>
        <trans-unit id="91cb6a8fd57a0224ea3dfbfbdf9c471db4732292" translate="yes" xml:space="preserve">
          <source>Function std::process::exit</source>
          <target state="translated">函数 std::process::exit</target>
        </trans-unit>
        <trans-unit id="64d60f6bf21bdc40c4034158a74b2e2029d72d52" translate="yes" xml:space="preserve">
          <source>Function std::process::id</source>
          <target state="translated">函数 std::process::id</target>
        </trans-unit>
        <trans-unit id="fde6de7146b98e72342b68e2f087fb2c0df102c7" translate="yes" xml:space="preserve">
          <source>Function std::ptr::copy</source>
          <target state="translated">函数 std::ptr::copy</target>
        </trans-unit>
        <trans-unit id="a761215fdab6c66c0e836d73083b80b5919290f7" translate="yes" xml:space="preserve">
          <source>Function std::ptr::copy_nonoverlapping</source>
          <target state="translated">函数 std::ptr::copy_nonoverlapping</target>
        </trans-unit>
        <trans-unit id="e5cd973501b571a40a9d66363842f4e1f61d69db" translate="yes" xml:space="preserve">
          <source>Function std::ptr::drop_in_place</source>
          <target state="translated">函数 std::ptr::drop_in_place</target>
        </trans-unit>
        <trans-unit id="7d8139ca630c43a21993cd3cc28785c5944a7309" translate="yes" xml:space="preserve">
          <source>Function std::ptr::eq</source>
          <target state="translated">函数 std::ptr::eq</target>
        </trans-unit>
        <trans-unit id="9f66565ab45d94ff05fc6926dcfe0bbd68272b62" translate="yes" xml:space="preserve">
          <source>Function std::ptr::hash</source>
          <target state="translated">函数 std::ptr::hash</target>
        </trans-unit>
        <trans-unit id="a03cdb32dfba992c5ba308341a9ecf47921cafcd" translate="yes" xml:space="preserve">
          <source>Function std::ptr::null</source>
          <target state="translated">函数 std::ptr::null</target>
        </trans-unit>
        <trans-unit id="4c7d5ac57a6bf5a7b544b85794d87b81e4bab2bb" translate="yes" xml:space="preserve">
          <source>Function std::ptr::null_mut</source>
          <target state="translated">函数 std::ptr::null_mut</target>
        </trans-unit>
        <trans-unit id="c850fed4a12786c6b64cf8983a8b4ed6836f871b" translate="yes" xml:space="preserve">
          <source>Function std::ptr::read</source>
          <target state="translated">函数 std::ptr::read</target>
        </trans-unit>
        <trans-unit id="b5627f9e5c58db99606464fa93bdcc9942395ffe" translate="yes" xml:space="preserve">
          <source>Function std::ptr::read_unaligned</source>
          <target state="translated">函数 std::ptr::read_unaligned</target>
        </trans-unit>
        <trans-unit id="cfe13a6b31ec05872aa7514cbd914f1bb5861485" translate="yes" xml:space="preserve">
          <source>Function std::ptr::read_volatile</source>
          <target state="translated">函数 std::ptr::read_volatile。</target>
        </trans-unit>
        <trans-unit id="d039612bde4c6048992efb15148a025858e32b3b" translate="yes" xml:space="preserve">
          <source>Function std::ptr::replace</source>
          <target state="translated">函数 std::ptr::replace</target>
        </trans-unit>
        <trans-unit id="d248267b6dd81ea6d45a36bf72ea24089aebcfc9" translate="yes" xml:space="preserve">
          <source>Function std::ptr::slice_from_raw_parts</source>
          <target state="translated">函数std::ptr::slice_from_raw_parts</target>
        </trans-unit>
        <trans-unit id="993ad2b27084f4ef376400115cc16edac21caa44" translate="yes" xml:space="preserve">
          <source>Function std::ptr::slice_from_raw_parts_mut</source>
          <target state="translated">函数std::ptr::slice_from_raw_parts_mut。</target>
        </trans-unit>
        <trans-unit id="9d32d4c811c372eac376d6b3bdbf406666808400" translate="yes" xml:space="preserve">
          <source>Function std::ptr::swap</source>
          <target state="translated">函数 std::ptr::swap</target>
        </trans-unit>
        <trans-unit id="ddca334754be5ad5ccbbcff1fdd2a964723a383a" translate="yes" xml:space="preserve">
          <source>Function std::ptr::swap_nonoverlapping</source>
          <target state="translated">函数std::ptr::swap_nonoverlapping</target>
        </trans-unit>
        <trans-unit id="0a29c6829aba2904ca27c5fa1c9fe49944ebe1c7" translate="yes" xml:space="preserve">
          <source>Function std::ptr::write</source>
          <target state="translated">函数 std::ptr::write</target>
        </trans-unit>
        <trans-unit id="6f751c45c330611925cbdc91328104f0d8563329" translate="yes" xml:space="preserve">
          <source>Function std::ptr::write_bytes</source>
          <target state="translated">函数 std::ptr::write_bytes</target>
        </trans-unit>
        <trans-unit id="1fda9527bc74f49c29a63948c2c6dbd1ab94b1f4" translate="yes" xml:space="preserve">
          <source>Function std::ptr::write_unaligned</source>
          <target state="translated">函数 std::ptr::write_unaligned</target>
        </trans-unit>
        <trans-unit id="6144b17aff45708885f2b21a0ccd281ad4b03511" translate="yes" xml:space="preserve">
          <source>Function std::ptr::write_volatile</source>
          <target state="translated">函数 std::ptr::write_volatile</target>
        </trans-unit>
        <trans-unit id="a2b7a6ea0f1d928fd925aaf7a8ce4d41592caaba" translate="yes" xml:space="preserve">
          <source>Function std::slice::from_mut</source>
          <target state="translated">函数 std::slice::from_mut</target>
        </trans-unit>
        <trans-unit id="c9b1f099f247a42a47b176a483889ae2efb191a9" translate="yes" xml:space="preserve">
          <source>Function std::slice::from_raw_parts</source>
          <target state="translated">函数 std::slice::from_raw_parts</target>
        </trans-unit>
        <trans-unit id="1572930120c6eeb9d2f52363340245d3c52eeaa2" translate="yes" xml:space="preserve">
          <source>Function std::slice::from_raw_parts_mut</source>
          <target state="translated">函数 std::slice::from_raw_parts_mut</target>
        </trans-unit>
        <trans-unit id="ec11607378374baf49258a7deea8633da5e2c00f" translate="yes" xml:space="preserve">
          <source>Function std::slice::from_ref</source>
          <target state="translated">函数 std::slice::from_ref</target>
        </trans-unit>
        <trans-unit id="5f10d43fc04f417378de60595b6a08287404fc58" translate="yes" xml:space="preserve">
          <source>Function std::str::from_boxed_utf8_unchecked</source>
          <target state="translated">函数 std::str::from_boxed_utf8_unchecked。</target>
        </trans-unit>
        <trans-unit id="b3494167f42728c01d009e107c9996379772b067" translate="yes" xml:space="preserve">
          <source>Function std::str::from_utf8</source>
          <target state="translated">函数 std::str::from_utf8</target>
        </trans-unit>
        <trans-unit id="8ab808fea002d56433d1a4c8010bde81eaf0bafe" translate="yes" xml:space="preserve">
          <source>Function std::str::from_utf8_mut</source>
          <target state="translated">函数 std::str::from_utf8_mut</target>
        </trans-unit>
        <trans-unit id="c9eb986ba9ada7c0b92ddab5aeb8be6542adebfb" translate="yes" xml:space="preserve">
          <source>Function std::str::from_utf8_unchecked</source>
          <target state="translated">函数 std::str::from_utf8_unchecked。</target>
        </trans-unit>
        <trans-unit id="ff6fb073e193843ab8761db003fa3d1397bde0ae" translate="yes" xml:space="preserve">
          <source>Function std::str::from_utf8_unchecked_mut</source>
          <target state="translated">函数 std::str::from_utf8_unchecked_mut。</target>
        </trans-unit>
        <trans-unit id="426edab7099b267d5c0fadbf655008d3c3071033" translate="yes" xml:space="preserve">
          <source>Function std::sync::atomic::compiler_fence</source>
          <target state="translated">函数 std::sync::atomic::compiler_fence</target>
        </trans-unit>
        <trans-unit id="746c3ced7e8fb5967d8a30871aeec3190755754d" translate="yes" xml:space="preserve">
          <source>Function std::sync::atomic::fence</source>
          <target state="translated">函数 std::sync::atomic::fence</target>
        </trans-unit>
        <trans-unit id="417c1f03a8782ffed0046f05147205a5928d2325" translate="yes" xml:space="preserve">
          <source>Function std::sync::atomic::spin_loop_hint</source>
          <target state="translated">函数 std::sync::atomic::spin_loop_hint</target>
        </trans-unit>
        <trans-unit id="ca876872e4c8a255561392341646d67ae0b513b3" translate="yes" xml:space="preserve">
          <source>Function std::sync::mpsc::channel</source>
          <target state="translated">函数 std::sync::mpsc::channel</target>
        </trans-unit>
        <trans-unit id="ed61e6291293ba5e6efc025a526a4ca0aeef12a5" translate="yes" xml:space="preserve">
          <source>Function std::sync::mpsc::sync_channel</source>
          <target state="translated">函数 std::sync::mpsc::sync_channel</target>
        </trans-unit>
        <trans-unit id="3113841f2a77c8762bb099b6ff3c3fa1652320a5" translate="yes" xml:space="preserve">
          <source>Function std::thread::available_concurrency</source>
          <target state="translated">函数 std::thread::available_concurrency</target>
        </trans-unit>
        <trans-unit id="0af550e5e373712dc2a979ef83bfd2ff92a021a5" translate="yes" xml:space="preserve">
          <source>Function std::thread::current</source>
          <target state="translated">函数 std::thread::current</target>
        </trans-unit>
        <trans-unit id="fe9807edb6332c001f6afe09456d514679fa63c2" translate="yes" xml:space="preserve">
          <source>Function std::thread::panicking</source>
          <target state="translated">函数 std::thread::panicking</target>
        </trans-unit>
        <trans-unit id="9315e3ef8d5452c0247f62dbf54f7a6f10da132d" translate="yes" xml:space="preserve">
          <source>Function std::thread::park</source>
          <target state="translated">函数 std::thread::park</target>
        </trans-unit>
        <trans-unit id="fcab5565f3d2f6769e2d47ead2f243674b5700e5" translate="yes" xml:space="preserve">
          <source>Function std::thread::park_timeout</source>
          <target state="translated">函数 std::线程::park_timeout</target>
        </trans-unit>
        <trans-unit id="2f1f8ca90cd667cbf91c70fd5328d42118f543d6" translate="yes" xml:space="preserve">
          <source>Function std::thread::park_timeout_ms</source>
          <target state="translated">函数 std::thread::park_timeout_ms</target>
        </trans-unit>
        <trans-unit id="11ae6d9580fb9910ca48b8e032535befd540831c" translate="yes" xml:space="preserve">
          <source>Function std::thread::sleep</source>
          <target state="translated">函数 std::thread::sleep</target>
        </trans-unit>
        <trans-unit id="1f22ee1120ba93e964441735b057a58abda65aa0" translate="yes" xml:space="preserve">
          <source>Function std::thread::sleep_ms</source>
          <target state="translated">函数 std::thread::sleep_ms</target>
        </trans-unit>
        <trans-unit id="659b9896115b8a757c17153932bb710d0018ce8b" translate="yes" xml:space="preserve">
          <source>Function std::thread::spawn</source>
          <target state="translated">函数 std::thread::spawn</target>
        </trans-unit>
        <trans-unit id="e317cb6f0697f119f701c359a0df2074f48a4962" translate="yes" xml:space="preserve">
          <source>Function std::thread::yield_now</source>
          <target state="translated">函数 std::thread::yield_now</target>
        </trans-unit>
        <trans-unit id="6cd47a4c3bb4392119be7e20d333f200330e1d43" translate="yes" xml:space="preserve">
          <source>Function types:</source>
          <target state="translated">功能类型:</target>
        </trans-unit>
        <trans-unit id="2e3030f5a7f048cef8382d50828336e71bb753d2" translate="yes" xml:space="preserve">
          <source>Function-like macros</source>
          <target state="translated">功能类宏</target>
        </trans-unit>
        <trans-unit id="2a9fd93daca58d7ebff71d8a39637cdf3ce39fd8" translate="yes" xml:space="preserve">
          <source>Function-like macros define macros that look like function calls. Similarly to &lt;code&gt;macro_rules!&lt;/code&gt; macros, they&amp;rsquo;re more flexible than functions; for example, they can take an unknown number of arguments. However, &lt;code&gt;macro_rules!&lt;/code&gt; macros can be defined only using the match-like syntax we discussed in the section &lt;a href=&quot;#declarative-macros-with-macro_rules-for-general-metaprogramming&quot;&gt;&amp;ldquo;Declarative Macros with &lt;code&gt;macro_rules!&lt;/code&gt; for General Metaprogramming&amp;rdquo;&lt;/a&gt; earlier. Function-like macros take a &lt;code&gt;TokenStream&lt;/code&gt; parameter and their definition manipulates that &lt;code&gt;TokenStream&lt;/code&gt; using Rust code as the other two types of procedural macros do. An example of a function-like macro is an &lt;code&gt;sql!&lt;/code&gt; macro that might be called like so:</source>
          <target state="translated">类函数宏定义看起来像函数调用的宏。类似于 &lt;code&gt;macro_rules!&lt;/code&gt; 宏，它们比函数更灵活；例如，它们可以接受未知数量的参数。但是， &lt;code&gt;macro_rules!&lt;/code&gt; 只能使用我们在&lt;a href=&quot;#declarative-macros-with-macro_rules-for-general-metaprogramming&quot;&gt;&amp;ldquo;带有 &lt;code&gt;macro_rules!&lt;/code&gt; 声明性宏！ &amp;rdquo;&lt;/a&gt;部分中讨论的类似于匹配的语法来定义宏。通用元编程&amp;rdquo;。类似函数的宏带有 &lt;code&gt;TokenStream&lt;/code&gt; 参数，并且它们的定义使用Rust代码像其他两种类型的过程宏一样操作 &lt;code&gt;TokenStream&lt;/code&gt; 。类似于函数的宏的一个示例是 &lt;code&gt;sql!&lt;/code&gt; 可以这样调用的宏：</target>
        </trans-unit>
        <trans-unit id="13e701d0c602544129b90642819e8ce654632b4a" translate="yes" xml:space="preserve">
          <source>Function-like macros that look like function calls but operate on the tokens specified as their argument</source>
          <target state="translated">类似函数的宏,看起来像函数调用,但操作的是作为其参数指定的标记。</target>
        </trans-unit>
        <trans-unit id="08300f312a4ed1b5c2034356b30682b98bac9713" translate="yes" xml:space="preserve">
          <source>Function-like procedural macros</source>
          <target state="translated">类似函数的程序宏</target>
        </trans-unit>
        <trans-unit id="f7211ee113b9788f705f277792fadeeb3dfa5aa3" translate="yes" xml:space="preserve">
          <source>Function-like procedural macros may be invoked in any macro invocation position, which includes &lt;a href=&quot;statements&quot;&gt;statements&lt;/a&gt;, &lt;a href=&quot;expressions&quot;&gt;expressions&lt;/a&gt;, &lt;a href=&quot;patterns&quot;&gt;patterns&lt;/a&gt;, &lt;a href=&quot;types#type-expressions&quot;&gt;type expressions&lt;/a&gt;, &lt;a href=&quot;items&quot;&gt;item&lt;/a&gt; positions, including items in &lt;a href=&quot;items/external-blocks&quot;&gt;&lt;code&gt;extern&lt;/code&gt; blocks&lt;/a&gt;, inherent and trait &lt;a href=&quot;items/implementations&quot;&gt;implementations&lt;/a&gt;, and &lt;a href=&quot;items/traits&quot;&gt;trait definitions&lt;/a&gt;.</source>
          <target state="translated">可以在任何宏调用位置（包括&lt;a href=&quot;statements&quot;&gt;语句&lt;/a&gt;，&lt;a href=&quot;expressions&quot;&gt;表达式&lt;/a&gt;，&lt;a href=&quot;patterns&quot;&gt;模式&lt;/a&gt;，&lt;a href=&quot;types#type-expressions&quot;&gt;类型表达式&lt;/a&gt;，&lt;a href=&quot;items&quot;&gt;项目&lt;/a&gt;位置（包括&lt;a href=&quot;items/external-blocks&quot;&gt; &lt;code&gt;extern&lt;/code&gt; 块中的&lt;/a&gt;项目），固有和特征&lt;a href=&quot;items/implementations&quot;&gt;实现&lt;/a&gt;以及&lt;a href=&quot;items/traits&quot;&gt;特征定义）&lt;/a&gt;调用类似函数的过程宏。</target>
        </trans-unit>
        <trans-unit id="95ee21bcc50578b01a326947473e22f8250802dc" translate="yes" xml:space="preserve">
          <source>Functional Language Features: Iterators and Closures</source>
          <target state="translated">功能性语言特性。迭代器和闭包</target>
        </trans-unit>
        <trans-unit id="4e21f7bee8221a74639e92992dc14d632a7c8af0" translate="yes" xml:space="preserve">
          <source>Functional update syntax</source>
          <target state="translated">功能更新语法</target>
        </trans-unit>
        <trans-unit id="1a08f42a1b56e730c49367ca1e924228662ea26b" translate="yes" xml:space="preserve">
          <source>Functionality for ordering and comparison.</source>
          <target state="translated">订货和比较的功能。</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="79a1ec8a61d65a41557e7d6041585e466687237c" translate="yes" xml:space="preserve">
          <source>Functions and consts can both be defined in an implementation. A function defined in an &lt;code&gt;impl&lt;/code&gt; block can be standalone, meaning it would be called like &lt;code&gt;Foo::bar()&lt;/code&gt;. If the function takes &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;&amp;amp;self&lt;/code&gt;, or &lt;code&gt;&amp;amp;mut self&lt;/code&gt; as its first argument, it can also be called using method-call syntax, a familiar feature to any object oriented programmer, like &lt;code&gt;foo.bar()&lt;/code&gt;.</source>
          <target state="translated">函数和const都可以在实现中定义。在 &lt;code&gt;impl&lt;/code&gt; 块中定义的函数可以是独立的，这意味着它将像 &lt;code&gt;Foo::bar()&lt;/code&gt; 那样被调用。如果函数以 &lt;code&gt;self&lt;/code&gt; ， &lt;code&gt;&amp;amp;self&lt;/code&gt; 或 &lt;code&gt;&amp;amp;mut self&lt;/code&gt; 作为其第一个参数，则也可以使用方法调用语法来调用它，这是任何面向对象的程序员都熟悉的功能，例如 &lt;code&gt;foo.bar()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="349871b1a6efea930aaaf0ae51e6d8084ba76744" translate="yes" xml:space="preserve">
          <source>Functions are pervasive in Rust code. You&amp;rsquo;ve already seen one of the most important functions in the language: the &lt;code&gt;main&lt;/code&gt; function, which is the entry point of many programs. You&amp;rsquo;ve also seen the &lt;code&gt;fn&lt;/code&gt; keyword, which allows you to declare new functions.</source>
          <target state="translated">Rust代码中普遍存在函数。您已经看到了该语言中最重要的功能之一： &lt;code&gt;main&lt;/code&gt; 函数，它是许多程序的入口。您还看到了 &lt;code&gt;fn&lt;/code&gt; 关键字，该关键字使您可以声明新功能。</target>
        </trans-unit>
        <trans-unit id="ec13d42591018f6323f28c9a51bc9ae1f1e62226" translate="yes" xml:space="preserve">
          <source>Functions are the primary way code is executed within Rust. Function blocks, usually just called functions, can be defined in a variety of different places and be assigned many different attributes and modifiers.</source>
          <target state="translated">函数是Rust中执行代码的主要方式。函数块,通常只是被称为函数,可以在不同的地方被定义,并被分配许多不同的属性和修饰符。</target>
        </trans-unit>
        <trans-unit id="0c9b40f565c06060c423846265af5229e6fca5a3" translate="yes" xml:space="preserve">
          <source>Functions can also be defined to have &lt;em&gt;parameters&lt;/em&gt;, which are special variables that are part of a function&amp;rsquo;s signature. When a function has parameters, you can provide it with concrete values for those parameters. Technically, the concrete values are called &lt;em&gt;arguments&lt;/em&gt;, but in casual conversation, people tend to use the words &lt;em&gt;parameter&lt;/em&gt; and &lt;em&gt;argument&lt;/em&gt; interchangeably for either the variables in a function&amp;rsquo;s definition or the concrete values passed in when you call a function.</source>
          <target state="translated">也可以将函数定义为具有&lt;em&gt;参数&lt;/em&gt;，这些&lt;em&gt;参数&lt;/em&gt;是作为函数签名一部分的特殊变量。当函数具有参数时，可以为其提供这些参数的具体值。从技术上讲，具体值称为自&lt;em&gt;变量&lt;/em&gt;，但是在随意的交谈中，人们倾向于将&lt;em&gt;参数&lt;/em&gt;和自&lt;em&gt;变量&lt;/em&gt;一词交替用于函数定义中的变量或调用函数时传递的具体值。</target>
        </trans-unit>
        <trans-unit id="f7772489f6a9ea8bcb945930292f262cd76d7056" translate="yes" xml:space="preserve">
          <source>Functions can declare an argument to be an anonymous type parameter where the callee must provide a type that has the bounds declared by the anonymous type parameter and the function can only use the methods available by the trait bounds of the anonymous type parameter.</source>
          <target state="translated">函数可以将一个参数声明为匿名类型参数,被调用者必须提供一个具有匿名类型参数所声明的边界的类型,函数只能使用匿名类型参数的特征边界所提供的方法。</target>
        </trans-unit>
        <trans-unit id="6e06e07a734b3acc49e3963f1c74ffeae667ea5a" translate="yes" xml:space="preserve">
          <source>Functions can return values to the code that calls them. We don&amp;rsquo;t name return values, but we do declare their type after an arrow (&lt;code&gt;-&amp;gt;&lt;/code&gt;). In Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function. You can return early from a function by using the &lt;code&gt;return&lt;/code&gt; keyword and specifying a value, but most functions return the last expression implicitly. Here&amp;rsquo;s an example of a function that returns a value:</source>
          <target state="translated">函数可以将值返回到调用它们的代码中。我们没有命名返回值，但确实在箭头（ &lt;code&gt;-&amp;gt;&lt;/code&gt; ）之后声明了它们的类型。在Rust中，函数的返回值与函数主体块中最终表达式的值同义。您可以通过使用 &lt;code&gt;return&lt;/code&gt; 关键字并指定一个值从函数中提前返回，但是大多数函数隐式返回最后一个表达式。这是一个返回值的函数的示例：</target>
        </trans-unit>
        <trans-unit id="8578e1edc63515b51db6bed787869c23c34bb35c" translate="yes" xml:space="preserve">
          <source>Functions do not capture local variables. To fix this error, you can replace the function with a closure:</source>
          <target state="translated">函数不能捕获局部变量。要解决这个错误,你可以用一个闭包来代替函数。</target>
        </trans-unit>
        <trans-unit id="2a188df8eec44f8cdac6c18fd47adbe486ec7642" translate="yes" xml:space="preserve">
          <source>Functions in Rust can be called by foreign code, and using an ABI that differs from Rust allows, for example, to provide functions that can be called from other programming languages like C:</source>
          <target state="translated">Rust中的函数可以被外国代码调用,使用与Rust不同的ABI,例如可以提供可以从C等其他编程语言中调用的函数。</target>
        </trans-unit>
        <trans-unit id="c048b3feb011016ec1af315c1f0d26b938c26a99" translate="yes" xml:space="preserve">
          <source>Functions in this module will block the current &lt;strong&gt;thread&lt;/strong&gt; of execution and are bindings to system-provided condition variables where possible. Note that this module places one additional restriction over the system condition variables: each condvar can be used with precisely one mutex at runtime. Any attempt to use multiple mutexes on the same condition variable will result in a runtime panic. If this is not desired, then the unsafe primitives in &lt;code&gt;sys&lt;/code&gt; do not have this restriction but may result in undefined behavior.</source>
          <target state="translated">该模块中的函数将阻止当前执行&lt;strong&gt;线程&lt;/strong&gt;，并在可能的情况下绑定到系统提供的条件变量。请注意，此模块对系统条件变量有一个附加限制：每个condvar在运行时可以与一个互斥体一起使用。任何试图在同一条件变量上使用多个互斥锁的尝试都将导致运行时恐慌。如果不希望这样做，则 &lt;code&gt;sys&lt;/code&gt; 中的不安全原语没有此限制，但可能导致未定义的行为。</target>
        </trans-unit>
        <trans-unit id="19486dfa520b69c11a03500cb78fcde335f9a159" translate="yes" xml:space="preserve">
          <source>Functions in this module will block the current &lt;strong&gt;thread&lt;/strong&gt; of execution. Note that any attempt to use multiple mutexes on the same condition variable may result in a runtime panic.</source>
          <target state="translated">该模块中的功能将阻止当前执行&lt;strong&gt;线程&lt;/strong&gt;。请注意，对同一条件变量使用多个互斥锁的任何尝试都可能导致运行时恐慌。</target>
        </trans-unit>
        <trans-unit id="a797a5b3b54d57d908332f50a0ff14a598f923ef" translate="yes" xml:space="preserve">
          <source>Functions marked with &lt;code&gt;target_feature&lt;/code&gt; are not inlined into a context that does not support the given features. The &lt;code&gt;#[inline(always)]&lt;/code&gt; attribute may not be used with a &lt;code&gt;target_feature&lt;/code&gt; attribute.</source>
          <target state="translated">标有 &lt;code&gt;target_feature&lt;/code&gt; 的函数未内联到不支持给定功能的上下文中。的 &lt;code&gt;#[inline(always)]&lt;/code&gt; 属性可以不与一个使用 &lt;code&gt;target_feature&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="0500c980225aaa328a97ddd71516215766d4d2c7" translate="yes" xml:space="preserve">
          <source>Functions may be qualified as async, and this can also be combined with the &lt;code&gt;unsafe&lt;/code&gt; qualifier:</source>
          <target state="translated">函数可以被定义为异步，也可以与 &lt;code&gt;unsafe&lt;/code&gt; 限定符结合使用：</target>
        </trans-unit>
        <trans-unit id="19ba2d6d6d2c4bf90e78758d9ffb195fa04a9907" translate="yes" xml:space="preserve">
          <source>Functions qualified with the &lt;code&gt;const&lt;/code&gt; keyword are &lt;a href=&quot;../const_eval#const-functions&quot;&gt;const functions&lt;/a&gt;, as are &lt;a href=&quot;structs&quot;&gt;tuple struct&lt;/a&gt; and &lt;a href=&quot;enumerations&quot;&gt;tuple variant&lt;/a&gt; constructors. &lt;em&gt;Const functions&lt;/em&gt; can be called from within &lt;a href=&quot;../const_eval#const-context&quot;&gt;const context&lt;/a&gt;s.</source>
          <target state="translated">用 &lt;code&gt;const&lt;/code&gt; 关键字限定的函数是&lt;a href=&quot;../const_eval#const-functions&quot;&gt;const函数&lt;/a&gt;，&lt;a href=&quot;structs&quot;&gt;元组struct&lt;/a&gt;和&lt;a href=&quot;enumerations&quot;&gt;元组变体&lt;/a&gt;构造函数也是如此。&lt;em&gt;const函数&lt;/em&gt;可以在&lt;a href=&quot;../const_eval#const-context&quot;&gt;const上下文中&lt;/a&gt;调用。</target>
        </trans-unit>
        <trans-unit id="debf8c3aa1da35922894a71fde41ce5baca3e6ad" translate="yes" xml:space="preserve">
          <source>Functions qualified with the &lt;code&gt;const&lt;/code&gt; keyword are const functions. &lt;em&gt;Const functions&lt;/em&gt; can be called from within &lt;a href=&quot;../const_eval#const-context&quot;&gt;const context&lt;/a&gt;s. When called from a const context, the function is interpreted by the compiler at compile time. The interpretation happens in the environment of the compilation target and not the host. So &lt;code&gt;usize&lt;/code&gt; is &lt;code&gt;32&lt;/code&gt; bits if you are compiling against a &lt;code&gt;32&lt;/code&gt; bit system, irrelevant of whether you are building on a &lt;code&gt;64&lt;/code&gt; bit or a &lt;code&gt;32&lt;/code&gt; bit system.</source>
          <target state="translated">用 &lt;code&gt;const&lt;/code&gt; 关键字限定的函数是const函数。&lt;em&gt;const函数&lt;/em&gt;可以在&lt;a href=&quot;../const_eval#const-context&quot;&gt;const上下文中&lt;/a&gt;调用。从const上下文调用时，编译器会在编译时解释该函数。解释发生在编译目标而不是宿主的环境中。因此，如果您是针对 &lt;code&gt;32&lt;/code&gt; 位系统进行编译，则 &lt;code&gt;usize&lt;/code&gt; 是 &lt;code&gt;32&lt;/code&gt; 位，而与您是在 &lt;code&gt;64&lt;/code&gt; 位系统还是 &lt;code&gt;32&lt;/code&gt; 位系统上进行构建无关。</target>
        </trans-unit>
        <trans-unit id="27716c2844ef6662e00babc6885a69e2dec63380" translate="yes" xml:space="preserve">
          <source>Functions return &lt;a href=&quot;enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; whenever errors are expected and recoverable. In the &lt;code&gt;std&lt;/code&gt; crate, &lt;a href=&quot;enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; is most prominently used for &lt;a href=&quot;../io/index&quot;&gt;I/O&lt;/a&gt;.</source>
          <target state="translated">只要预期到错误并且可以恢复，函数就会返回&lt;a href=&quot;enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt;。在 &lt;code&gt;std&lt;/code&gt; 箱子，&lt;a href=&quot;enum.result&quot;&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt;是最显着的用于&lt;a href=&quot;../io/index&quot;&gt;I / O&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9ba4110fcc3e4c930df9cd4a44d4369d4a726954" translate="yes" xml:space="preserve">
          <source>Functions which take an &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; and return another &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; are often called 'iterator adapters', as they're a form of the 'adapter pattern'.</source>
          <target state="translated">带有&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;并返回另一个&lt;a href=&quot;trait.iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;的函数通常称为&amp;ldquo;迭代器适配器&amp;rdquo;，因为它们是&amp;ldquo;适配器模式&amp;rdquo;的一种形式。</target>
        </trans-unit>
        <trans-unit id="e3428425ba667eae06c3ff2021c3de7d88b772af" translate="yes" xml:space="preserve">
          <source>Functions with Return Values</source>
          <target state="translated">带返回值的函数</target>
        </trans-unit>
        <trans-unit id="b18578d36545499a01a7076ba62b48fa01f0c848" translate="yes" xml:space="preserve">
          <source>Functions with an ABI that differs from &lt;code&gt;&quot;Rust&quot;&lt;/code&gt; do not support unwinding in the exact same way that Rust does. Therefore, unwinding past the end of functions with such ABIs causes the process to abort.</source>
          <target state="translated">具有不同于 &lt;code&gt;&quot;Rust&quot;&lt;/code&gt; 的ABI的函数不支持与Rust完全相同的展开方式。因此，使用此类ABI结束功能的结束会导致该过程中止。</target>
        </trans-unit>
        <trans-unit id="92807c856bd111462699f9e06c09bb56c14702fe" translate="yes" xml:space="preserve">
          <source>Functions within external blocks are declared in the same way as other Rust functions, with the exception that they may not have a body and are instead terminated by a semicolon. Patterns are not allowed in parameters, only &lt;a href=&quot;../identifiers&quot;&gt;IDENTIFIER&lt;/a&gt; or &lt;code&gt;_&lt;/code&gt; may be used.</source>
          <target state="translated">外部块中的函数与其他Rust函数的声明方式相同，不同之处在于它们可能没有主体，而是由分号终止。参数中不允许使用模式，只能使用&lt;a href=&quot;../identifiers&quot;&gt;IDENTIFIER&lt;/a&gt;或 &lt;code&gt;_&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bc77dcb074f08a32cc87de1996bea238f078997a" translate="yes" xml:space="preserve">
          <source>Functions within external blocks may be called by Rust code, just like functions defined in Rust. The Rust compiler automatically translates between the Rust ABI and the foreign ABI.</source>
          <target state="translated">外部块中的函数可以被Rust代码调用,就像Rust中定义的函数一样。Rust编译器会自动在Rust ABI和外部ABI之间进行翻译。</target>
        </trans-unit>
        <trans-unit id="255f924e1ffd5da6e3f850e0ae72ac4d9101aff6" translate="yes" xml:space="preserve">
          <source>Functions within external blocks may be variadic by specifying &lt;code&gt;...&lt;/code&gt; after one or more named arguments in the argument list:</source>
          <target state="translated">通过在参数列表中的一个或多个命名参数之后指定 &lt;code&gt;...&lt;/code&gt; ，可以在外部块中使用各种函数：</target>
        </trans-unit>
        <trans-unit id="559bba4281b9cbb5285ad035b18e638f9254aa96" translate="yes" xml:space="preserve">
          <source>Functions, except for associated trait functions, can return an abstract return type. These types stand in for another concrete type where the use-site may only use the trait methods declared by the trait bounds of the type.</source>
          <target state="translated">除了相关的特质函数,函数可以返回一个抽象的返回类型。这些类型是另一个具体类型的代名词,在这个类型中,使用方只能使用该类型的特质边界所声明的特质方法。</target>
        </trans-unit>
        <trans-unit id="5234ca15ccfb340b3c32fd38f23a4ff8df3cca57" translate="yes" xml:space="preserve">
          <source>Functions, type aliases, structs, enumerations, unions, traits and implementations may be &lt;em&gt;parameterized&lt;/em&gt; by types and lifetimes. These parameters are listed in angle brackets (&lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt;), usually immediately after the name of the item and before its definition. For implementations, which don't have a name, they come directly after &lt;code&gt;impl&lt;/code&gt;. Lifetime parameters must be declared before type parameters. Some examples of items with type and lifetime parameters:</source>
          <target state="translated">函数，类型别名，结构，枚举，联合，特征和实现可以通过类型和生存期进行&lt;em&gt;参数化&lt;/em&gt;。这些参数在尖括号（ &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; ）中列出，通常在项目名称之后和定义之前。对于没有名称的实现，它们直接在 &lt;code&gt;impl&lt;/code&gt; 之后出现。生命周期参数必须在类型参数之前声明。具有类型和生存期参数的项目的一些示例：</target>
        </trans-unit>
        <trans-unit id="d83a6029c4947c75a3d349d25be545ca402bff11" translate="yes" xml:space="preserve">
          <source>Functions, type aliases, structs, enumerations, unions, traits, and implementations may be &lt;em&gt;parameterized&lt;/em&gt; by types and lifetimes. These parameters are listed in angle brackets (&lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt;), usually immediately after the name of the item and before its definition. For implementations, which don't have a name, they come directly after &lt;code&gt;impl&lt;/code&gt;. Lifetime parameters must be declared before type parameters. Some examples of items with type and lifetime parameters:</source>
          <target state="translated">函数，类型别名，结构，枚举，联合，特征和实现可以通过类型和生存期进行&lt;em&gt;参数化&lt;/em&gt;。这些参数在尖括号（ &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; ）中列出，通常紧接在项目名称之后，在其定义之前。对于没有名称的实现，它们直接在 &lt;code&gt;impl&lt;/code&gt; 之后出现。生命周期参数必须在类型参数之前声明。具有类型和生存期参数的项目的一些示例：</target>
        </trans-unit>
        <trans-unit id="f57878d0751d3ab5ce8210b78147f1fbca3e0b4a" translate="yes" xml:space="preserve">
          <source>Fundamental traits</source>
          <target state="translated">基本特征</target>
        </trans-unit>
        <trans-unit id="9e006ca099899d227345d125f7604094fb4ac496" translate="yes" xml:space="preserve">
          <source>Fundamental type constructors</source>
          <target state="translated">基本类型构造器</target>
        </trans-unit>
        <trans-unit id="bc0f9166454ea8a2d6c4817bb65ab3b4f20a8394" translate="yes" xml:space="preserve">
          <source>Fundamentally, macros are a way of writing code that writes other code, which is known as &lt;em&gt;metaprogramming&lt;/em&gt;. In Appendix C, we discuss the &lt;code&gt;derive&lt;/code&gt; attribute, which generates an implementation of various traits for you. We&amp;rsquo;ve also used the &lt;code&gt;println!&lt;/code&gt; and &lt;code&gt;vec!&lt;/code&gt; macros throughout the book. All of these macros &lt;em&gt;expand&lt;/em&gt; to produce more code than the code you&amp;rsquo;ve written manually.</source>
          <target state="translated">从根本上讲，宏是一种编写代码的方法，该代码可以编写其他代码，这称为&lt;em&gt;元编程&lt;/em&gt;。在附录C中，我们讨论 &lt;code&gt;derive&lt;/code&gt; 属性，它产生的各种性状您的实现。我们还使用了 &lt;code&gt;println!&lt;/code&gt; 和 &lt;code&gt;vec!&lt;/code&gt; 全书中的宏。所有这些宏都可以&lt;em&gt;扩展&lt;/em&gt;以产生比您手动编写的代码更多的代码。</target>
        </trans-unit>
        <trans-unit id="33aa27b63995ba1fcb3ce7d14470a2ebda4e9afb" translate="yes" xml:space="preserve">
          <source>Further examples</source>
          <target state="translated">其他例子</target>
        </trans-unit>
        <trans-unit id="d09598b8462cb55fafc0925eb6b3707aebcdffff" translate="yes" xml:space="preserve">
          <source>Further methods that return iterators are &lt;a href=&quot;../primitive.slice#method.split&quot;&gt;&lt;code&gt;.split&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../primitive.slice#method.splitn&quot;&gt;&lt;code&gt;.splitn&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../primitive.slice#method.chunks&quot;&gt;&lt;code&gt;.chunks&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../primitive.slice#method.windows&quot;&gt;&lt;code&gt;.windows&lt;/code&gt;&lt;/a&gt; and more.</source>
          <target state="translated">返回迭代器的其他方法是&lt;a href=&quot;../primitive.slice#method.split&quot;&gt; &lt;code&gt;.split&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../primitive.slice#method.splitn&quot;&gt; &lt;code&gt;.splitn&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../primitive.slice#method.chunks&quot;&gt; &lt;code&gt;.chunks&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../primitive.slice#method.windows&quot;&gt; &lt;code&gt;.windows&lt;/code&gt; &lt;/a&gt;等。</target>
        </trans-unit>
        <trans-unit id="1ca30366a5d0ab34525f2208365c1ca94a1f8b77" translate="yes" xml:space="preserve">
          <source>Further, when providing implementations for additional traits, it needs to be considered whether they should behave identical to those of the underlying type as a consequence of acting as a representation of that underlying type. Generic code typically uses &lt;code&gt;Borrow&amp;lt;T&amp;gt;&lt;/code&gt; when it relies on the identical behavior of these additional trait implementations. These traits will likely appear as additional trait bounds.</source>
          <target state="translated">此外，在提供其他特征的实现时，需要考虑由于充当该基础类型的表示而导致它们是否应与基础类型的行为相同。当通用代码依赖于这些附加特征实现的相同行为时，通常会使用 &lt;code&gt;Borrow&amp;lt;T&amp;gt;&lt;/code&gt; 。这些特征可能会显示为其他特征界限。</target>
        </trans-unit>
        <trans-unit id="cb1960550ff747636004d7c48533ff64eb2c7cb0" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;code&gt;usize&lt;/code&gt; and &lt;code&gt;isize&lt;/code&gt; have the same size.</source>
          <target state="translated">此外， &lt;code&gt;usize&lt;/code&gt; 和 &lt;code&gt;isize&lt;/code&gt; 具有相同的大小。</target>
        </trans-unit>
        <trans-unit id="cdc25e51f3bd03cefd6c886e6015dd4e5ab94438" translate="yes" xml:space="preserve">
          <source>Fuse</source>
          <target state="translated">Fuse</target>
        </trans-unit>
        <trans-unit id="5b5bb3bd654173bbe0ca32ea3cdd799fc39be7e0" translate="yes" xml:space="preserve">
          <source>Fuse::all</source>
          <target state="translated">Fuse::all</target>
        </trans-unit>
        <trans-unit id="be234633fcc19983cf10e500a6cea263759de0ec" translate="yes" xml:space="preserve">
          <source>Fuse::any</source>
          <target state="translated">Fuse::any</target>
        </trans-unit>
        <trans-unit id="fb657f6faeb38bdc2196ebc9819c5d95fe340748" translate="yes" xml:space="preserve">
          <source>Fuse::borrow</source>
          <target state="translated">Fuse::borrow</target>
        </trans-unit>
        <trans-unit id="8f3044155e9d5c84cd57e23debc6442d0e4670b3" translate="yes" xml:space="preserve">
          <source>Fuse::borrow_mut</source>
          <target state="translated">Fuse::borrow_mut</target>
        </trans-unit>
        <trans-unit id="1d289dac98b2c0ee8af0ae119550bb75a8647436" translate="yes" xml:space="preserve">
          <source>Fuse::by_ref</source>
          <target state="translated">Fuse::by_ref</target>
        </trans-unit>
        <trans-unit id="831eb7c4481fb4be2c2082f7b1da24d8f9f757ec" translate="yes" xml:space="preserve">
          <source>Fuse::chain</source>
          <target state="translated">Fuse::chain</target>
        </trans-unit>
        <trans-unit id="438fd4561c9ccfadcfc75a150d349251bb6bad15" translate="yes" xml:space="preserve">
          <source>Fuse::clone</source>
          <target state="translated">Fuse::clone</target>
        </trans-unit>
        <trans-unit id="1430674975c3f47c8efafda98d99fb2a28139d1d" translate="yes" xml:space="preserve">
          <source>Fuse::clone_from</source>
          <target state="translated">Fuse::clone_from</target>
        </trans-unit>
        <trans-unit id="9be81b457f16a4af2ac97486a4694037294d9f73" translate="yes" xml:space="preserve">
          <source>Fuse::clone_into</source>
          <target state="translated">Fuse::clone_into</target>
        </trans-unit>
        <trans-unit id="98f760afb80a8eff0c0ef367859e40f090d49189" translate="yes" xml:space="preserve">
          <source>Fuse::cloned</source>
          <target state="translated">Fuse::cloned</target>
        </trans-unit>
        <trans-unit id="6da9651643728cd0c44496dee9b4303124cabbfa" translate="yes" xml:space="preserve">
          <source>Fuse::cmp</source>
          <target state="translated">Fuse::cmp</target>
        </trans-unit>
        <trans-unit id="0c4f37e97803f9d70993fa59d61809aea7d9011a" translate="yes" xml:space="preserve">
          <source>Fuse::collect</source>
          <target state="translated">Fuse::collect</target>
        </trans-unit>
        <trans-unit id="ddc6005989b65675ac3ce7404f4341aa3e45bd46" translate="yes" xml:space="preserve">
          <source>Fuse::copied</source>
          <target state="translated">Fuse::copied</target>
        </trans-unit>
        <trans-unit id="6086889f4261af2a35bbde15545aa2b38e286eb0" translate="yes" xml:space="preserve">
          <source>Fuse::count</source>
          <target state="translated">Fuse::count</target>
        </trans-unit>
        <trans-unit id="2c7439b70ce0f07bef285135b6810c8416ce3ceb" translate="yes" xml:space="preserve">
          <source>Fuse::cycle</source>
          <target state="translated">Fuse::cycle</target>
        </trans-unit>
        <trans-unit id="1d21878382d8db3eef5c3ccb0162b537561d5fe1" translate="yes" xml:space="preserve">
          <source>Fuse::enumerate</source>
          <target state="translated">Fuse::enumerate</target>
        </trans-unit>
        <trans-unit id="823d811ae87865a3afe81991f5b1ce5c5d3e05fb" translate="yes" xml:space="preserve">
          <source>Fuse::eq</source>
          <target state="translated">Fuse::eq</target>
        </trans-unit>
        <trans-unit id="bd7cbe6bf9c8e8d0dbf1a520e5d8f393c41d5e76" translate="yes" xml:space="preserve">
          <source>Fuse::filter</source>
          <target state="translated">Fuse::filter</target>
        </trans-unit>
        <trans-unit id="ff249feec5a8ff44c09ac4d58cf0c46bc03c2e27" translate="yes" xml:space="preserve">
          <source>Fuse::filter_map</source>
          <target state="translated">Fuse::filter_map</target>
        </trans-unit>
        <trans-unit id="d65f3a653005a9aca1a47f1daa9574aadcf81146" translate="yes" xml:space="preserve">
          <source>Fuse::find</source>
          <target state="translated">Fuse::find</target>
        </trans-unit>
        <trans-unit id="92189ce0a3d924bfcfe5daafee0096f97e345e8a" translate="yes" xml:space="preserve">
          <source>Fuse::find_map</source>
          <target state="translated">Fuse::find_map</target>
        </trans-unit>
        <trans-unit id="1cf8f29dde6618a7c7a45ae0ed611ea18dc6d814" translate="yes" xml:space="preserve">
          <source>Fuse::flat_map</source>
          <target state="translated">Fuse::flat_map</target>
        </trans-unit>
        <trans-unit id="9f855deea4a227b1c412204b1b500286ca9898ff" translate="yes" xml:space="preserve">
          <source>Fuse::flatten</source>
          <target state="translated">Fuse::flatten</target>
        </trans-unit>
        <trans-unit id="27bca4d23d19f854df553c1f82824f7edd33ecdd" translate="yes" xml:space="preserve">
          <source>Fuse::fmt</source>
          <target state="translated">Fuse::fmt</target>
        </trans-unit>
        <trans-unit id="8293be1030013adbfbddb7413ab47a9d5713fbb2" translate="yes" xml:space="preserve">
          <source>Fuse::fold</source>
          <target state="translated">Fuse::fold</target>
        </trans-unit>
        <trans-unit id="d70e6b78ab1bfb6ecef7e95f085adfaeb6422f4a" translate="yes" xml:space="preserve">
          <source>Fuse::for_each</source>
          <target state="translated">Fuse::for_each</target>
        </trans-unit>
        <trans-unit id="c637a607309c42c80a08d11fa1900890151225d1" translate="yes" xml:space="preserve">
          <source>Fuse::from</source>
          <target state="translated">Fuse::from</target>
        </trans-unit>
        <trans-unit id="3f4b35dca4545ef8a3669e274f565d795f26df61" translate="yes" xml:space="preserve">
          <source>Fuse::fuse</source>
          <target state="translated">Fuse::fuse</target>
        </trans-unit>
        <trans-unit id="d32ae472a05f042237f60672a294af6e0f780002" translate="yes" xml:space="preserve">
          <source>Fuse::ge</source>
          <target state="translated">Fuse::ge</target>
        </trans-unit>
        <trans-unit id="db14a349561c9657cb02ec4378f0041d394de512" translate="yes" xml:space="preserve">
          <source>Fuse::gt</source>
          <target state="translated">Fuse::gt</target>
        </trans-unit>
        <trans-unit id="8e137668bb3688ae855ccc5853810b47754a3872" translate="yes" xml:space="preserve">
          <source>Fuse::inspect</source>
          <target state="translated">Fuse::inspect</target>
        </trans-unit>
        <trans-unit id="5cfef3b06c43a18ed973402f005ed7cd09e8c04c" translate="yes" xml:space="preserve">
          <source>Fuse::into</source>
          <target state="translated">Fuse::into</target>
        </trans-unit>
        <trans-unit id="f0ca9438fb188b5b8dad26c6bf148f9659520041" translate="yes" xml:space="preserve">
          <source>Fuse::into_iter</source>
          <target state="translated">Fuse::into_iter</target>
        </trans-unit>
        <trans-unit id="391ea300511ad72ed0c52d931ec32f9ad0fd9c6f" translate="yes" xml:space="preserve">
          <source>Fuse::is_empty</source>
          <target state="translated">Fuse::is_empty</target>
        </trans-unit>
        <trans-unit id="dbc1aa11443b40a7ec81e5ce0dd280ae99df5395" translate="yes" xml:space="preserve">
          <source>Fuse::is_sorted</source>
          <target state="translated">Fuse::is_sorted</target>
        </trans-unit>
        <trans-unit id="6de34202c0045be112d2ee0f948bb537aa9be637" translate="yes" xml:space="preserve">
          <source>Fuse::is_sorted_by</source>
          <target state="translated">Fuse::is_sorted_by</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
