<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="haskell">
    <body>
      <group id="haskell">
        <trans-unit id="2b175850b2b4c7b73920a2bd09ee395823dfe991" translate="yes" xml:space="preserve">
          <source>O(n+m). Difference between two sets.</source>
          <target state="translated">O(n+m)。两组之间的差值。</target>
        </trans-unit>
        <trans-unit id="642024d6eebec205fb5e23871df26affc526f51e" translate="yes" xml:space="preserve">
          <source>O(n+m). Difference with a combining function.</source>
          <target state="translated">O(n+m)。与组合函数的区别。</target>
        </trans-unit>
        <trans-unit id="e82cae1cbcc151c7d43da06a29f3d4c4dd638d8d" translate="yes" xml:space="preserve">
          <source>O(n+m). Difference with a combining function. When two equal keys are encountered, the combining function is applied to the key and both values. If it returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is discarded (proper set difference). If it returns (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the element is updated with a new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">O（n + m）。与组合功能的区别。当遇到两个相等的键时，组合功能将应用于键和两个值。如果返回 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; ，则该元素将被丢弃（适当的设置差）。如果返回（ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt; ），则使用新值 &lt;code&gt;y&lt;/code&gt; 更新元素。</target>
        </trans-unit>
        <trans-unit id="d78a59691af3a1f463fcc648f48e7aa9af5140a2" translate="yes" xml:space="preserve">
          <source>O(n+m). Difference with a combining function. When two equal keys are encountered, the combining function is applied to the key and both values. If it returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is discarded (proper set difference). If it returns (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the element is updated with a new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8defb5abb9dc37227acdef0ddf8e9086576b96" translate="yes" xml:space="preserve">
          <source>O(n+m). Difference with a combining function. When two equal keys are encountered, the combining function is applied to the values of these keys. If it returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is discarded (proper set difference). If it returns (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the element is updated with a new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">O（n + m）。与组合功能的区别。当遇到两个相等的键时，组合功能将应用于这些键的值。如果返回 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; ，则该元素将被丢弃（适当的设置差）。如果返回（ &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt; ），则使用新值 &lt;code&gt;y&lt;/code&gt; 更新元素。</target>
        </trans-unit>
        <trans-unit id="9b9232eb6da84be956de3d86b2f9a3596b670d07" translate="yes" xml:space="preserve">
          <source>O(n+m). Difference with a combining function. When two equal keys are encountered, the combining function is applied to the values of these keys. If it returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the element is discarded (proper set difference). If it returns (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; y&lt;/code&gt;), the element is updated with a new value &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1893b5539e545690e9ffd683494151968ad95c91" translate="yes" xml:space="preserve">
          <source>O(n+m). Is this a proper submap? (ie. a submap but not equal). Defined as (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:isProperSubmapOf&quot;&gt;isProperSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-intmap-lazy#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt;).</source>
          <target state="translated">O（n + m）。这是合适的子图吗？（即子图，但不相等）。定义为（ &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:isProperSubmapOf&quot;&gt;isProperSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-intmap-lazy#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d0bcad9d148cb43a988e5d81559c7f98bfd4f571" translate="yes" xml:space="preserve">
          <source>O(n+m). Is this a proper submap? (ie. a submap but not equal). Defined as (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:isProperSubmapOf&quot;&gt;isProperSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-intmap-strict#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt;).</source>
          <target state="translated">O（n + m）。这是合适的子图吗？（即子图，但不相等）。定义为（ &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:isProperSubmapOf&quot;&gt;isProperSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-intmap-strict#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="259d7f16c8ef5c42b712b6bd1b6d835707d3fc6f" translate="yes" xml:space="preserve">
          <source>O(n+m). Is this a proper submap? (ie. a submap but not equal). Defined as (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:isProperSubmapOf&quot;&gt;isProperSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-intmap-strict-internal#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt;).</source>
          <target state="translated">O（n + m）。这是合适的子图吗？（即子图，但不相等）。定义为（ &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:isProperSubmapOf&quot;&gt;isProperSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-intmap-strict-internal#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="fa500881115a261c32e171d67351b5d2ec39a167" translate="yes" xml:space="preserve">
          <source>O(n+m). Is this a proper submap? (ie. a submap but not equal). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; are not equal, all keys in &lt;code&gt;m1&lt;/code&gt; are in &lt;code&gt;m2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">O（n + m）。这是合适的子图吗？（即子图，但不相等）。当 &lt;code&gt;m1&lt;/code&gt; 和 &lt;code&gt;m2&lt;/code&gt; 不相等， &lt;code&gt;m1&lt;/code&gt; 中的所有键都在 &lt;code&gt;m2&lt;/code&gt; 中时，表达式（ &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt; ）返回 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ，并且当 &lt;code&gt;f&lt;/code&gt; 应用于它们各自的值时，表达式f返回 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 。例如，以下表达式均为 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="086a4885e056a23c714c075d705073db4b763166" translate="yes" xml:space="preserve">
          <source>O(n+m). Is this a proper submap? (ie. a submap but not equal). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; are not equal, all keys in &lt;code&gt;m1&lt;/code&gt; are in &lt;code&gt;m2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f52f4b27c74c68545875153116cd3df8e8618e" translate="yes" xml:space="preserve">
          <source>O(n+m). Is this a proper submap? (ie. a submap but not equal). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; are not equal, all keys in &lt;code&gt;m1&lt;/code&gt; are in &lt;code&gt;m2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">O（n + m）。这是合适的子图吗？（即子图，但不相等）。当 &lt;code&gt;m1&lt;/code&gt; 和 &lt;code&gt;m2&lt;/code&gt; 不相等， &lt;code&gt;m1&lt;/code&gt; 中的所有键都在 &lt;code&gt;m2&lt;/code&gt; 中时，表达式（ &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt; ）返回 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ，并且当 &lt;code&gt;f&lt;/code&gt; 应用于它们各自的值时，表达式f返回 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 。例如，以下表达式均为 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="15f91d0ab0f998067f2adeb93623344211d85bda" translate="yes" xml:space="preserve">
          <source>O(n+m). Is this a proper submap? (ie. a submap but not equal). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; are not equal, all keys in &lt;code&gt;m1&lt;/code&gt; are in &lt;code&gt;m2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36e66134f49baa74c16748aa4fb1bc2f1b590a7" translate="yes" xml:space="preserve">
          <source>O(n+m). Is this a proper submap? (ie. a submap but not equal). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; are not equal, all keys in &lt;code&gt;m1&lt;/code&gt; are in &lt;code&gt;m2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">O（n + m）。这是合适的子图吗？（即子图，但不相等）。当 &lt;code&gt;m1&lt;/code&gt; 和 &lt;code&gt;m2&lt;/code&gt; 不相等， &lt;code&gt;m1&lt;/code&gt; 中的所有键都在 &lt;code&gt;m2&lt;/code&gt; 中时，表达式（ &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt; ）返回 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ，并且当 &lt;code&gt;f&lt;/code&gt; 应用于它们各自的值时，表达式f返回 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 。例如，以下表达式均为 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e04f7f18a1ae2e5b701ed54d8ae7d55bbc518436" translate="yes" xml:space="preserve">
          <source>O(n+m). Is this a proper submap? (ie. a submap but not equal). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:isProperSubmapOfBy&quot;&gt;isProperSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; are not equal, all keys in &lt;code&gt;m1&lt;/code&gt; are in &lt;code&gt;m2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a631953f81d0e447c8fdc69cf069142667e281d" translate="yes" xml:space="preserve">
          <source>O(n+m). Is this a proper subset? (ie. a subset but not equal).</source>
          <target state="translated">O(n+m)。这是一个合适的子集吗?(即子集但不相等)。</target>
        </trans-unit>
        <trans-unit id="eebc330ada31dc89576a052f1291e0814e19b344" translate="yes" xml:space="preserve">
          <source>O(n+m). Is this a submap? Defined as (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:isSubmapOf&quot;&gt;isSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-intmap-lazy#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt;).</source>
          <target state="translated">O（n + m）。这是子图吗？定义为（ &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:isSubmapOf&quot;&gt;isSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-intmap-lazy#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="77cf7a69469399af955924e2279784b9e2604e7f" translate="yes" xml:space="preserve">
          <source>O(n+m). Is this a submap? Defined as (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:isSubmapOf&quot;&gt;isSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-intmap-strict#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt;).</source>
          <target state="translated">O（n + m）。这是子图吗？定义为（ &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:isSubmapOf&quot;&gt;isSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-intmap-strict#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4431560a42f73900705f2d8f975011e0f9131735" translate="yes" xml:space="preserve">
          <source>O(n+m). Is this a submap? Defined as (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:isSubmapOf&quot;&gt;isSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-intmap-strict-internal#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt;).</source>
          <target state="translated">O（n + m）。这是子图吗？定义为（ &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:isSubmapOf&quot;&gt;isSubmapOf&lt;/a&gt; = &lt;a href=&quot;data-intmap-strict-internal#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; (==)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="95f1327cbb34c7f0d462f61ec2eb2bdb693eb58b" translate="yes" xml:space="preserve">
          <source>O(n+m). Is this a subset? &lt;code&gt;(s1 `isSubsetOf` s2)&lt;/code&gt; tells whether &lt;code&gt;s1&lt;/code&gt; is a subset of &lt;code&gt;s2&lt;/code&gt;.</source>
          <target state="translated">O（n + m）。这是子集吗？ &lt;code&gt;(s1 `isSubsetOf` s2)&lt;/code&gt; 判断 &lt;code&gt;s1&lt;/code&gt; 是否为 &lt;code&gt;s2&lt;/code&gt; 的子集。</target>
        </trans-unit>
        <trans-unit id="853dab43bcbe16991732c6d4b28495ea5732e019" translate="yes" xml:space="preserve">
          <source>O(n+m). Remove all the keys in a given set from a map.</source>
          <target state="translated">O(n+m)。从一个映射中删除给定集合中的所有键。</target>
        </trans-unit>
        <trans-unit id="c1b95d70a81d94d1b2f2943a9a8a879ae12ca499" translate="yes" xml:space="preserve">
          <source>O(n+m). See &lt;code&gt;&lt;a href=&quot;data-intset#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O（n + m）。看 &lt;code&gt;&lt;a href=&quot;data-intset#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8c0c033e78b5f044fb2891d9b4979b5fb0a3e771" translate="yes" xml:space="preserve">
          <source>O(n+m). See &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">O（n + m）。看 &lt;code&gt;&lt;a href=&quot;data-intset-internal#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aabc7bfe4185073a15a5de307d4e92518cd380a6" translate="yes" xml:space="preserve">
          <source>O(n+m). The (left-biased) intersection of two maps (based on keys).</source>
          <target state="translated">O(n+m)。两个地图的(左偏)交点(基于键)。</target>
        </trans-unit>
        <trans-unit id="06961d5d1ab5fa2c8570a9d85046d4a05dc7eb63" translate="yes" xml:space="preserve">
          <source>O(n+m). The (left-biased) union of two maps. It prefers the first map when duplicate keys are encountered, i.e. (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:union&quot;&gt;union&lt;/a&gt; == &lt;a href=&quot;data-intmap-lazy#v:unionWith&quot;&gt;unionWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">O（n + m）。两张地图的（左偏）联合。当遇到重复的键时，它倾向于第一个映射，即（ &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:union&quot;&gt;union&lt;/a&gt; == &lt;a href=&quot;data-intmap-lazy#v:unionWith&quot;&gt;unionWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c8af9eb1020703ed741e76dfbd54678ef12ddfe5" translate="yes" xml:space="preserve">
          <source>O(n+m). The (left-biased) union of two maps. It prefers the first map when duplicate keys are encountered, i.e. (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:union&quot;&gt;union&lt;/a&gt; == &lt;a href=&quot;data-intmap-lazy#v:unionWith&quot;&gt;unionWith&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafc90ea33c8a530d3beef31c5367384af63f7c0" translate="yes" xml:space="preserve">
          <source>O(n+m). The (left-biased) union of two maps. It prefers the first map when duplicate keys are encountered, i.e. (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:union&quot;&gt;union&lt;/a&gt; == &lt;a href=&quot;data-intmap-lazy#v:unionWith&quot;&gt;unionWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">O（n + m）。两张地图的（左偏）联合。当遇到重复的键时，它倾向于第一个映射，即（ &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:union&quot;&gt;union&lt;/a&gt; == &lt;a href=&quot;data-intmap-lazy#v:unionWith&quot;&gt;unionWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="06cca18a9ea62d448cb2ae8ce6046a32a6eeb7e5" translate="yes" xml:space="preserve">
          <source>O(n+m). The (left-biased) union of two maps. It prefers the first map when duplicate keys are encountered, i.e. (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:union&quot;&gt;union&lt;/a&gt; == &lt;a href=&quot;data-intmap-lazy#v:unionWith&quot;&gt;unionWith&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ad0a244b4a8b2f49ef3d414deb4d187f9a6cc2" translate="yes" xml:space="preserve">
          <source>O(n+m). The (left-biased) union of two maps. It prefers the first map when duplicate keys are encountered, i.e. (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:union&quot;&gt;union&lt;/a&gt; == &lt;a href=&quot;data-intmap-lazy#v:unionWith&quot;&gt;unionWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">O（n + m）。两张地图的（左偏）联合。当遇到重复的键时，它倾向于第一个映射，即（ &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:union&quot;&gt;union&lt;/a&gt; == &lt;a href=&quot;data-intmap-lazy#v:unionWith&quot;&gt;unionWith&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="31e89469c4001a829fde3233e342d7e9eec1929b" translate="yes" xml:space="preserve">
          <source>O(n+m). The (left-biased) union of two maps. It prefers the first map when duplicate keys are encountered, i.e. (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:union&quot;&gt;union&lt;/a&gt; == &lt;a href=&quot;data-intmap-lazy#v:unionWith&quot;&gt;unionWith&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2918486dc9d1b3d88c95caecdcf91f0062806a" translate="yes" xml:space="preserve">
          <source>O(n+m). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if all keys in &lt;code&gt;m1&lt;/code&gt; are in &lt;code&gt;m2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">O（n + m）。如果 &lt;code&gt;m1&lt;/code&gt; 中的所有键都在 &lt;code&gt;m2&lt;/code&gt; 中，则表达式（ &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt; ）返回 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ；当 &lt;code&gt;f&lt;/code&gt; 应用于它们各自的值时，返回f &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 。例如，以下表达式均为 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0a51544441efda5b774bf5ba7135522fa07aeb34" translate="yes" xml:space="preserve">
          <source>O(n+m). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if all keys in &lt;code&gt;m1&lt;/code&gt; are in &lt;code&gt;m2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c682f84ef41f26c41a860753eec9a7c1df03b072" translate="yes" xml:space="preserve">
          <source>O(n+m). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if all keys in &lt;code&gt;m1&lt;/code&gt; are in &lt;code&gt;m2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">O（n + m）。如果 &lt;code&gt;m1&lt;/code&gt; 中的所有键都在 &lt;code&gt;m2&lt;/code&gt; 中，则表达式（ &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt; ）返回 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ；当 &lt;code&gt;f&lt;/code&gt; 应用于它们各自的值时，返回f &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 。例如，以下表达式均为 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d46f07e5f2d5ba28c84ab4450e5f9330078bcc3c" translate="yes" xml:space="preserve">
          <source>O(n+m). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if all keys in &lt;code&gt;m1&lt;/code&gt; are in &lt;code&gt;m2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c133c2820ef14ec3aca95b5da1617ff047b0eb" translate="yes" xml:space="preserve">
          <source>O(n+m). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if all keys in &lt;code&gt;m1&lt;/code&gt; are in &lt;code&gt;m2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">O（n + m）。如果 &lt;code&gt;m1&lt;/code&gt; 中的所有键都在 &lt;code&gt;m2&lt;/code&gt; 中，则表达式（ &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt; ）返回 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ；当 &lt;code&gt;f&lt;/code&gt; 应用于它们各自的值时，返回f &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 。例如，以下表达式均为 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3c133848b5c3643fa590368299465506d198f3bc" translate="yes" xml:space="preserve">
          <source>O(n+m). The expression (&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:isSubmapOfBy&quot;&gt;isSubmapOfBy&lt;/a&gt; f m1 m2&lt;/code&gt;) returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if all keys in &lt;code&gt;m1&lt;/code&gt; are in &lt;code&gt;m2&lt;/code&gt;, and when &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; when applied to their respective values. For example, the following expressions are all &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f82649fd48787dfa3f6fb48e8009b24ac636f79" translate="yes" xml:space="preserve">
          <source>O(n+m). The intersection of two sets.</source>
          <target state="translated">O(n+m)。两个集合的交点。</target>
        </trans-unit>
        <trans-unit id="9cc718bb4770b7a90006261329b003135139c8ad" translate="yes" xml:space="preserve">
          <source>O(n+m). The intersection with a combining function.</source>
          <target state="translated">O(n+m)。与组合函数的交点。</target>
        </trans-unit>
        <trans-unit id="890f8c2b1acfa581b0c7f7e114b78e7d23366ee0" translate="yes" xml:space="preserve">
          <source>O(n+m). The restriction of a map to the keys in a set.</source>
          <target state="translated">O(n+m)。映射对集合中键的限制。</target>
        </trans-unit>
        <trans-unit id="5016a3d0debf2b50c789dd9e1a7b6671faab6a15" translate="yes" xml:space="preserve">
          <source>O(n+m). The union of two sets.</source>
          <target state="translated">O(n+m)。两个集合的结合。</target>
        </trans-unit>
        <trans-unit id="fd2cc7317cafb69298079beaf97e19917cd839b3" translate="yes" xml:space="preserve">
          <source>O(n+m). The union with a combining function.</source>
          <target state="translated">O(n+m)。与结合函数的结合。</target>
        </trans-unit>
        <trans-unit id="7d7e0023469558d3f70102c921ee4c3a9e3395fd" translate="yes" xml:space="preserve">
          <source>O(n/c) Append a byte to the end of a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O（n / c）将一个字节附加到 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 的末尾</target>
        </trans-unit>
        <trans-unit id="6cc37b0e22800234ef3f07b1490484598d0573ab" translate="yes" xml:space="preserve">
          <source>O(n/c) Append two ByteStrings</source>
          <target state="translated">O(n/c)添加两个ByteStrings。</target>
        </trans-unit>
        <trans-unit id="2d16b77d7608c5b05bf8bdfa8224cce8737fe128" translate="yes" xml:space="preserve">
          <source>O(n/c) Appends one &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; to another. Subject to fusion.</source>
          <target state="translated">O（n / c）将一个 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 附加到另一个文本。受到融合。</target>
        </trans-unit>
        <trans-unit id="83e9729beee8e50770bb2d1f1ad5ed715db824b2" translate="yes" xml:space="preserve">
          <source>O(n/c) Extract the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; of a ByteString, returning Nothing if it is empty.</source>
          <target state="translated">O（n / c）提取ByteString 的 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; ，如果为空则返回Nothing。</target>
        </trans-unit>
        <trans-unit id="8d9647ec0d877c0b2b247e8f277a0813bb9fa700" translate="yes" xml:space="preserve">
          <source>O(n/c) Extract the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; of a ByteString, returning Nothing if it is empty.</source>
          <target state="translated">O（n / c）提取ByteString 的 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; ，如果为空则返回Nothing。</target>
        </trans-unit>
        <trans-unit id="9b60c39448cd17dc08f0f768a3a97ebd3de0381d" translate="yes" xml:space="preserve">
          <source>O(n/c) Extract the last element of a ByteString, which must be finite and non-empty.</source>
          <target state="translated">O(n/c)提取ByteString的最后一个元素,该元素必须是有限的和非空的。</target>
        </trans-unit>
        <trans-unit id="37b6278fe47a64e98a0bf8147cadf1bb592f7472" translate="yes" xml:space="preserve">
          <source>O(n/c) Return all the elements of a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; except the last one.</source>
          <target state="translated">O（n / c）返回 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 的所有元素，但最后一个除外。</target>
        </trans-unit>
        <trans-unit id="6a2b4a041ecc6ab0616448e8c20b0c5a37880038" translate="yes" xml:space="preserve">
          <source>O(n/c) Return all the elements of a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; except the last one.</source>
          <target state="translated">O（n / c）返回 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 的所有元素，但最后一个除外。</target>
        </trans-unit>
        <trans-unit id="0e3ad70873ec194a1a39a69714dd21042af5e5ad" translate="yes" xml:space="preserve">
          <source>O(n/c) Returns all but the last character of a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, which must be non-empty. Subject to fusion.</source>
          <target state="translated">O（n / c）返回 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 的所有字符，但最后一个字符必须为非空。受到融合。</target>
        </trans-unit>
        <trans-unit id="27f439a72af29ea013e45190eb466312a751e58a" translate="yes" xml:space="preserve">
          <source>O(n/c) Returns the &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; of a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if empty.</source>
          <target state="translated">O（N / C）返回 &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 一个的 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; ，或者 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; ，如果是空的。</target>
        </trans-unit>
        <trans-unit id="1a9291bf9c091b55b1328473e44f843705375f3a" translate="yes" xml:space="preserve">
          <source>O(n/c) Returns the &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; of a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e459c0133a7fa1d77589eafc5ac9befb3f26dfe" translate="yes" xml:space="preserve">
          <source>O(n/c) Returns the last character of a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, which must be non-empty. Subject to fusion.</source>
          <target state="translated">O（n / c）返回 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 的最后一个字符，该字符必须为非空。受到融合。</target>
        </trans-unit>
        <trans-unit id="4b739d6be59fd1e3bd8ffa28a8cf4f0e86b46fcc" translate="yes" xml:space="preserve">
          <source>O(n/c)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns the suffix of &lt;code&gt;xs&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; elements, or &lt;code&gt;[]&lt;/code&gt; if &lt;code&gt;n &amp;gt; &lt;a href=&quot;data-bytestring-lazy#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">O（n / c） &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; 返回前 &lt;code&gt;n&lt;/code&gt; 个元素后的 &lt;code&gt;xs&lt;/code&gt; 后缀，如果 &lt;code&gt;n &amp;gt; &lt;a href=&quot;data-bytestring-lazy#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; &lt;a href=&quot;data-bytestring-lazy#v:length&quot;&gt;length&lt;/a&gt; xs则返回 &lt;code&gt;[]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3230bf165ab4f88bcfb24f3948a318fab7ae358c" translate="yes" xml:space="preserve">
          <source>O(n/c)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; returns the length of a ByteString as an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int64&quot;&gt;Int64&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O（n / c）的 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; 返回ByteString的长度作为 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int64&quot;&gt;Int64&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8f33a588e4903fd21668a1f7077c81aabda2ed64" translate="yes" xml:space="preserve">
          <source>O(n/c)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; returns the length of a ByteString as an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int64&quot;&gt;Int64&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279a301156ba949c3ca05606b442b0fe4820bb23" translate="yes" xml:space="preserve">
          <source>O(n/c)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; is equivalent to &lt;code&gt;(&lt;a href=&quot;data-bytestring-lazy#v:take&quot;&gt;take&lt;/a&gt; n xs, &lt;a href=&quot;data-bytestring-lazy#v:drop&quot;&gt;drop&lt;/a&gt; n xs)&lt;/code&gt;.</source>
          <target state="translated">O（N / C） &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; 相当于 &lt;code&gt;(&lt;a href=&quot;data-bytestring-lazy#v:take&quot;&gt;take&lt;/a&gt; n xs, &lt;a href=&quot;data-bytestring-lazy#v:drop&quot;&gt;drop&lt;/a&gt; n xs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="098f5344db1894ea2ce7cb94140d79449edea1d5" translate="yes" xml:space="preserve">
          <source>O(n/c)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a ByteString &lt;code&gt;xs&lt;/code&gt;, returns the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;xs&lt;/code&gt; itself if &lt;code&gt;n &amp;gt; &lt;a href=&quot;data-bytestring-lazy#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">O（N / C） &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; ，施加到一个字节串 &lt;code&gt;xs&lt;/code&gt; ，返回的前缀 &lt;code&gt;xs&lt;/code&gt; 长度的 &lt;code&gt;n&lt;/code&gt; ，或 &lt;code&gt;xs&lt;/code&gt; 本身如果 &lt;code&gt;n &amp;gt; &lt;a href=&quot;data-bytestring-lazy#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f36361a6522b2ae73d9a8f3d84f7bfb6f86caa03" translate="yes" xml:space="preserve">
          <source>O(n/c)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns the suffix of &lt;code&gt;xs&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; elements, or &lt;code&gt;[]&lt;/code&gt; if &lt;code&gt;n &amp;gt; &lt;a href=&quot;data-bytestring-lazy-char8#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">O（n / c） &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; 返回前 &lt;code&gt;n&lt;/code&gt; 个元素后的 &lt;code&gt;xs&lt;/code&gt; 后缀，如果 &lt;code&gt;n &amp;gt; &lt;a href=&quot;data-bytestring-lazy-char8#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; &lt;a href=&quot;data-bytestring-lazy-char8#v:length&quot;&gt;length&lt;/a&gt; xs则返回 &lt;code&gt;[]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dca9d892c44a82be4d56f29a65e495be62351350" translate="yes" xml:space="preserve">
          <source>O(n/c)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; returns the length of a ByteString as an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int64&quot;&gt;Int64&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">O（n / c）的 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; 返回ByteString的长度作为 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int64&quot;&gt;Int64&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="033d5573aff7a09739e31b4140066fa4a57ad5ae" translate="yes" xml:space="preserve">
          <source>O(n/c)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; returns the length of a ByteString as an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int64&quot;&gt;Int64&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5306bdfe59376f62c270fc886b633e2f6e1dcd87" translate="yes" xml:space="preserve">
          <source>O(n/c)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; is equivalent to &lt;code&gt;(&lt;a href=&quot;data-bytestring-lazy-char8#v:take&quot;&gt;take&lt;/a&gt; n xs, &lt;a href=&quot;data-bytestring-lazy-char8#v:drop&quot;&gt;drop&lt;/a&gt; n xs)&lt;/code&gt;.</source>
          <target state="translated">O（N / C） &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; 相当于 &lt;code&gt;(&lt;a href=&quot;data-bytestring-lazy-char8#v:take&quot;&gt;take&lt;/a&gt; n xs, &lt;a href=&quot;data-bytestring-lazy-char8#v:drop&quot;&gt;drop&lt;/a&gt; n xs)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c57cb3fd24a15391e066d7bb4903681e1cc442e" translate="yes" xml:space="preserve">
          <source>O(n/c)&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a ByteString &lt;code&gt;xs&lt;/code&gt;, returns the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;xs&lt;/code&gt; itself if &lt;code&gt;n &amp;gt; &lt;a href=&quot;data-bytestring-lazy-char8#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;.</source>
          <target state="translated">O（N / C） &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; ，施加到一个字节串 &lt;code&gt;xs&lt;/code&gt; ，返回的前缀 &lt;code&gt;xs&lt;/code&gt; 长度的 &lt;code&gt;n&lt;/code&gt; ，或 &lt;code&gt;xs&lt;/code&gt; 本身如果 &lt;code&gt;n &amp;gt; &lt;a href=&quot;data-bytestring-lazy-char8#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7fef8912f31d84073770a6dedf25eb44f12874e5" translate="yes" xml:space="preserve">
          <source>O(n^2). The &lt;code&gt;&lt;a href=&quot;data-list#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; function removes duplicate elements from a list. In particular, it keeps only the first occurrence of each element. (The name &lt;code&gt;&lt;a href=&quot;data-list#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; means `essence'.) It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own equality test.</source>
          <target state="translated">O（n ^ 2）。该 &lt;code&gt;&lt;a href=&quot;data-list#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; 功能从列表中移除重复的元素。特别是，它仅保留每个元素的第一次出现。（名称 &lt;code&gt;&lt;a href=&quot;data-list#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; 表示&amp;ldquo;本质&amp;rdquo;。）这是 &lt;code&gt;&lt;a href=&quot;data-list#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt; 的特例，它允许程序员提供自己的相等性测试。</target>
        </trans-unit>
        <trans-unit id="92f2f94e099bb7227cfcc768bf47b8c9015c9ce7" translate="yes" xml:space="preserve">
          <source>O(n^2). The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; function removes duplicate elements from a list. In particular, it keeps only the first occurrence of each element. (The name &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; means `essence'.) It is a special case of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own equality test.</source>
          <target state="translated">O（n ^ 2）。该 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; 功能从列表中移除重复的元素。特别是，它仅保留每个元素的第一次出现。（名称 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; 表示&amp;ldquo;本质&amp;rdquo;。）这是 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt; 的特例，它允许程序员提供自己的相等性测试。</target>
        </trans-unit>
        <trans-unit id="a61ad319127b680ea53570fe744c01d959f80faf" translate="yes" xml:space="preserve">
          <source>OSVERSIONINFOEX</source>
          <target state="translated">OSVERSIONINFOEX</target>
        </trans-unit>
        <trans-unit id="9beeba965ae8dfbfff40f9bb14dd3916873ca225" translate="yes" xml:space="preserve">
          <source>O_APPEND</source>
          <target state="translated">O_APPEND</target>
        </trans-unit>
        <trans-unit id="1d359ddeab5bd0bfc7e36286fbd4b017c0306eca" translate="yes" xml:space="preserve">
          <source>O_EXCL</source>
          <target state="translated">O_EXCL</target>
        </trans-unit>
        <trans-unit id="5cb2bdb342c206ea5f6f844817a04b4faff12dc1" translate="yes" xml:space="preserve">
          <source>O_NOCTTY</source>
          <target state="translated">O_NOCTTY</target>
        </trans-unit>
        <trans-unit id="4c2fbe88ccc156499e1adb5569ddb4a71e2a0944" translate="yes" xml:space="preserve">
          <source>O_NONBLOCK</source>
          <target state="translated">O_NONBLOCK</target>
        </trans-unit>
        <trans-unit id="2ee322829f78f74d8bacf972b329ca8066c9a6c7" translate="yes" xml:space="preserve">
          <source>O_SYNC</source>
          <target state="translated">O_SYNC</target>
        </trans-unit>
        <trans-unit id="ce320f21777d59129eeca3fbf91595d9a215b3b0" translate="yes" xml:space="preserve">
          <source>O_TRUNC</source>
          <target state="translated">O_TRUNC</target>
        </trans-unit>
        <trans-unit id="fa81ee290b985173ab2f672fb935281b2d2e6c39" translate="yes" xml:space="preserve">
          <source>Object (.o)</source>
          <target state="translated">对象(.o)</target>
        </trans-unit>
        <trans-unit id="6b2f496323a4895019ec0a9b369fe04ec7ca98eb" translate="yes" xml:space="preserve">
          <source>Object files linked into shared objects must be compiled with &lt;a href=&quot;#ghc-flag--fPIC&quot;&gt;&lt;code&gt;-fPIC&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&quot;#options-codegen&quot;&gt;Options affecting code generation&lt;/a&gt;</source>
          <target state="translated">链接到共享库中的目标文件必须使用&lt;a href=&quot;#ghc-flag--fPIC&quot;&gt; &lt;code&gt;-fPIC&lt;/code&gt; &lt;/a&gt;进行编译，请参见&lt;a href=&quot;#options-codegen&quot;&gt;影响代码生成的选项&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="47de13ee5612750157967f1515fc00db4a7c92bd" translate="yes" xml:space="preserve">
          <source>Objective C</source>
          <target state="translated">目标C</target>
        </trans-unit>
        <trans-unit id="706f81efadad70c24efce57ea6d4e51ec7d7b3af" translate="yes" xml:space="preserve">
          <source>Objective C++</source>
          <target state="translated">Objective C++</target>
        </trans-unit>
        <trans-unit id="007aa0511eafaf62149d25010b14a8bb508fb130" translate="yes" xml:space="preserve">
          <source>Observe a type representation for the type of a value.</source>
          <target state="translated">观察一个值的类型表示。</target>
        </trans-unit>
        <trans-unit id="cd150df10728118f52cdf23f860179c0fad85301" translate="yes" xml:space="preserve">
          <source>Observe the &lt;code&gt;&lt;a href=&quot;ghc-fingerprint-type#t:Fingerprint&quot;&gt;Fingerprint&lt;/a&gt;&lt;/code&gt; of a type representation</source>
          <target state="translated">观察类型表示的 &lt;code&gt;&lt;a href=&quot;ghc-fingerprint-type#t:Fingerprint&quot;&gt;Fingerprint&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="409bd195ee5312c03c5d82bb0a53f65357224327" translate="yes" xml:space="preserve">
          <source>Observe the argument types of a type representation</source>
          <target state="translated">观察类型表示的参数类型</target>
        </trans-unit>
        <trans-unit id="b4b8289ec30f6e1a557ff9064f1f6b20543a7105" translate="yes" xml:space="preserve">
          <source>Observe the kind of a type.</source>
          <target state="translated">观察一个类型的种类。</target>
        </trans-unit>
        <trans-unit id="053b657569ecb7e098a31a03ae84e78b99ac515b" translate="yes" xml:space="preserve">
          <source>Observe the type constructor of a quantified type representation.</source>
          <target state="translated">观察量化类型表示的类型构造函数。</target>
        </trans-unit>
        <trans-unit id="a2ccc102a2dfd9eb15f652450214c5947ce98f64" translate="yes" xml:space="preserve">
          <source>Observe the type constructor of a type representation</source>
          <target state="translated">观察类型表示的类型构造函数。</target>
        </trans-unit>
        <trans-unit id="0618a214d16e39be75c6315a11d086a7dcbea1b6" translate="yes" xml:space="preserve">
          <source>Observers</source>
          <target state="translated">Observers</target>
        </trans-unit>
        <trans-unit id="39a3a78d27464eeb6b4e25918dbf5c9b44c8072a" translate="yes" xml:space="preserve">
          <source>Observing type representations</source>
          <target state="translated">观察类型表示</target>
        </trans-unit>
        <trans-unit id="bde229174b59bd1c95b5316149d2ce6a8e8efb33" translate="yes" xml:space="preserve">
          <source>Obsolete helpers</source>
          <target state="translated">过时的助手</target>
        </trans-unit>
        <trans-unit id="0fb9100499fe89a0975e82b1a3a8f4e9d2fd735d" translate="yes" xml:space="preserve">
          <source>Obtain a temporary file path with the given suffix. The compiler will delete this file after compilation.</source>
          <target state="translated">获取一个后缀为给定的临时文件路径。编译器将在编译后删除这个文件。</target>
        </trans-unit>
        <trans-unit id="08504fa744e6ae985fd5e1d3159ba4d86ca141de" translate="yes" xml:space="preserve">
          <source>Obtain the Haskell value referenced by a stable pointer, i.e., the same value that was passed to the corresponding call to &lt;code&gt;&lt;a href=&quot;foreign-stableptr#v:newStablePtr&quot;&gt;newStablePtr&lt;/a&gt;&lt;/code&gt;. If the argument to &lt;code&gt;&lt;a href=&quot;foreign-stableptr#v:deRefStablePtr&quot;&gt;deRefStablePtr&lt;/a&gt;&lt;/code&gt; has already been freed using &lt;code&gt;&lt;a href=&quot;foreign-stableptr#v:freeStablePtr&quot;&gt;freeStablePtr&lt;/a&gt;&lt;/code&gt;, the behaviour of &lt;code&gt;&lt;a href=&quot;foreign-stableptr#v:deRefStablePtr&quot;&gt;deRefStablePtr&lt;/a&gt;&lt;/code&gt; is undefined.</source>
          <target state="translated">获取稳定指针引用的Haskell值，即与传递给 &lt;code&gt;&lt;a href=&quot;foreign-stableptr#v:newStablePtr&quot;&gt;newStablePtr&lt;/a&gt;&lt;/code&gt; 的相应调用的值相同的值。如果参数 &lt;code&gt;&lt;a href=&quot;foreign-stableptr#v:deRefStablePtr&quot;&gt;deRefStablePtr&lt;/a&gt;&lt;/code&gt; 已经使用释放 &lt;code&gt;&lt;a href=&quot;foreign-stableptr#v:freeStablePtr&quot;&gt;freeStablePtr&lt;/a&gt;&lt;/code&gt; ，行为 &lt;code&gt;&lt;a href=&quot;foreign-stableptr#v:deRefStablePtr&quot;&gt;deRefStablePtr&lt;/a&gt;&lt;/code&gt; 不确定。</target>
        </trans-unit>
        <trans-unit id="700d14839cf29e3aa8bb6f2235b72aaad3a7ed94" translate="yes" xml:space="preserve">
          <source>Obtain the Haskell value referenced by a stable pointer, i.e., the same value that was passed to the corresponding call to &lt;code&gt;&lt;a href=&quot;ghc-stable#v:newStablePtr&quot;&gt;newStablePtr&lt;/a&gt;&lt;/code&gt;. If the argument to &lt;code&gt;&lt;a href=&quot;ghc-stable#v:deRefStablePtr&quot;&gt;deRefStablePtr&lt;/a&gt;&lt;/code&gt; has already been freed using &lt;code&gt;&lt;a href=&quot;ghc-stable#v:freeStablePtr&quot;&gt;freeStablePtr&lt;/a&gt;&lt;/code&gt;, the behaviour of &lt;code&gt;&lt;a href=&quot;ghc-stable#v:deRefStablePtr&quot;&gt;deRefStablePtr&lt;/a&gt;&lt;/code&gt; is undefined.</source>
          <target state="translated">获取稳定指针引用的Haskell值，即与传递给 &lt;code&gt;&lt;a href=&quot;ghc-stable#v:newStablePtr&quot;&gt;newStablePtr&lt;/a&gt;&lt;/code&gt; 的相应调用的值相同的值。如果参数 &lt;code&gt;&lt;a href=&quot;ghc-stable#v:deRefStablePtr&quot;&gt;deRefStablePtr&lt;/a&gt;&lt;/code&gt; 已经使用释放 &lt;code&gt;&lt;a href=&quot;ghc-stable#v:freeStablePtr&quot;&gt;freeStablePtr&lt;/a&gt;&lt;/code&gt; ，行为 &lt;code&gt;&lt;a href=&quot;ghc-stable#v:deRefStablePtr&quot;&gt;deRefStablePtr&lt;/a&gt;&lt;/code&gt; 不确定。</target>
        </trans-unit>
        <trans-unit id="a2440e4e145be4eb215fcb093e788fb9960299cd" translate="yes" xml:space="preserve">
          <source>Obtain the current working directory as an absolute path.</source>
          <target state="translated">获取当前工作目录的绝对路径。</target>
        </trans-unit>
        <trans-unit id="c1dd9feacb8ad914196a33496bfe7966a0a186c8" translate="yes" xml:space="preserve">
          <source>Obtain the path to a special directory for storing user-specific application data (traditional Unix location). Newer applications may prefer the the XDG-conformant location provided by &lt;code&gt;&lt;a href=&quot;system-directory#v:getXdgDirectory&quot;&gt;getXdgDirectory&lt;/a&gt;&lt;/code&gt; (&lt;a href=&quot;https://github.com/haskell/directory/issues/6#issuecomment-96521020&quot;&gt;migration guide&lt;/a&gt;).</source>
          <target state="translated">获取用于存储用户特定的应用程序数据的特殊目录的路径（传统Unix位置）。较新的应用程序可能更喜欢 &lt;code&gt;&lt;a href=&quot;system-directory#v:getXdgDirectory&quot;&gt;getXdgDirectory&lt;/a&gt;&lt;/code&gt; （&lt;a href=&quot;https://github.com/haskell/directory/issues/6#issuecomment-96521020&quot;&gt;迁移指南&lt;/a&gt;）提供的符合XDG的位置。</target>
        </trans-unit>
        <trans-unit id="5c48b83679543b94189e3b3857193ee60a82c74c" translate="yes" xml:space="preserve">
          <source>Obtain the paths to special directories for storing user-specific application data, configuration, and cache files, conforming to the &lt;a href=&quot;http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG Base Directory Specification&lt;/a&gt;. Compared with &lt;code&gt;&lt;a href=&quot;system-directory#v:getAppUserDataDirectory&quot;&gt;getAppUserDataDirectory&lt;/a&gt;&lt;/code&gt;, this function provides a more fine-grained hierarchy as well as greater flexibility for the user.</source>
          <target state="translated">获得符合&lt;a href=&quot;http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG基本目录规范的&lt;/a&gt;用于存储用户特定的应用程序数据，配置和缓存文件的特殊目录的路径。与 &lt;code&gt;&lt;a href=&quot;system-directory#v:getAppUserDataDirectory&quot;&gt;getAppUserDataDirectory&lt;/a&gt;&lt;/code&gt; 相比，此函数为用户提供了更细粒度的层次结构和更大的灵活性。</target>
        </trans-unit>
        <trans-unit id="9ca83079153a8ef840b63ce27bb2fb8a367d26e7" translate="yes" xml:space="preserve">
          <source>Obtain the size of a file in bytes.</source>
          <target state="translated">获取文件的字节数。</target>
        </trans-unit>
        <trans-unit id="9fe9c6afc02350dde6bce9905666a177cb7718a2" translate="yes" xml:space="preserve">
          <source>Obtain the time at which the file or directory was last accessed.</source>
          <target state="translated">获取文件或目录最后被访问的时间。</target>
        </trans-unit>
        <trans-unit id="fe02e9af07ca18b2e182f9029db868dc37a5029e" translate="yes" xml:space="preserve">
          <source>Obtain the time at which the file or directory was last modified.</source>
          <target state="translated">获取文件或目录最后修改的时间。</target>
        </trans-unit>
        <trans-unit id="ff7dba47666639f94394aa3dd0febd37e4ecc275" translate="yes" xml:space="preserve">
          <source>Obtained from &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reify&quot;&gt;reify&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; Monad.</source>
          <target state="translated">从得到 &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reify&quot;&gt;reify&lt;/a&gt;&lt;/code&gt; 在 &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; 单子。</target>
        </trans-unit>
        <trans-unit id="8d89b30a22ab542b2220d609d797437caf3a9581" translate="yes" xml:space="preserve">
          <source>Obtained from &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reifyModule&quot;&gt;reifyModule&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; Monad.</source>
          <target state="translated">从获得 &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reifyModule&quot;&gt;reifyModule&lt;/a&gt;&lt;/code&gt; 在 &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; 单子。</target>
        </trans-unit>
        <trans-unit id="442dc1559deffb0ef963faf7fa54adec4e60807c" translate="yes" xml:space="preserve">
          <source>Obtained from &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reify&quot;&gt;reify&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; Monad.</source>
          <target state="translated">从得到 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reify&quot;&gt;reify&lt;/a&gt;&lt;/code&gt; 在 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; 单子。</target>
        </trans-unit>
        <trans-unit id="182d8ba16b92f752f26f4563dc36a9660282111d" translate="yes" xml:space="preserve">
          <source>Obtained from &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyModule&quot;&gt;reifyModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/template-haskell-2.16.0.0/Language-Haskell-TH-Lib.html#v:thisModule&quot;&gt;thisModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808af45a8c161f66c05c30204ffc7b09a12d4c71" translate="yes" xml:space="preserve">
          <source>Obtained from &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyModule&quot;&gt;reifyModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/template-haskell-2.15.0.0/Language-Haskell-TH-Lib.html#v:thisModule&quot;&gt;thisModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyModule&quot;&gt;reifyModule&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/template-haskell-2.15.0.0/Language-Haskell-TH-Lib.html#v:thisModule&quot;&gt;thisModule&lt;/a&gt;&lt;/code&gt; 获得。</target>
        </trans-unit>
        <trans-unit id="d46cc88ad2b7ebeb92e27c492df182c9102b8ed0" translate="yes" xml:space="preserve">
          <source>Obtained from &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyModule&quot;&gt;reifyModule&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; Monad.</source>
          <target state="translated">从获得 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyModule&quot;&gt;reifyModule&lt;/a&gt;&lt;/code&gt; 在 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; 单子。</target>
        </trans-unit>
        <trans-unit id="f7e2e85147570bbfd1afb948ab5b789d3478fe86" translate="yes" xml:space="preserve">
          <source>Obtaining file status</source>
          <target state="translated">获得档案状态</target>
        </trans-unit>
        <trans-unit id="e3870373daca7d25421aaf721af5436c7f6ea920" translate="yes" xml:space="preserve">
          <source>Obtaining the constructor from a given datum. For proper terms, this is meant to be the top-level constructor. Primitive datatypes are here viewed as potentially infinite sets of values (i.e., constructors).</source>
          <target state="translated">从一个给定的基准点获取构造函数。对于适当的术语,这意味着是顶层构造函数。基元数据类型在这里被看作是潜在的无限值集(即构造函数)。</target>
        </trans-unit>
        <trans-unit id="1f8c61df2bac9fbfd23bad2f0e9746f16edb8aa7" translate="yes" xml:space="preserve">
          <source>OccName</source>
          <target state="translated">OccName</target>
        </trans-unit>
        <trans-unit id="a8ecac7d31bbf740edf1b0b3ea851c89f44a5d30" translate="yes" xml:space="preserve">
          <source>Occasionally &lt;strong&gt;gv&lt;/strong&gt; will choke as it tries to read an incomplete copy of &lt;code&gt;FOO.ps&lt;/code&gt; (because &lt;strong&gt;hp2ps&lt;/strong&gt; is still running as an update occurs). A slightly more complicated script works around this problem, by using the fact that sending a SIGHUP to gv will cause it to re-read its input file:</source>
          <target state="translated">有时，&lt;strong&gt;gv&lt;/strong&gt;在尝试读取 &lt;code&gt;FOO.ps&lt;/code&gt; 的不完整副本时会感到窒息（因为更新时&lt;strong&gt;hp2ps&lt;/strong&gt;仍在运行）。通过使用将SIGHUP发送到gv将导致它重新读取其输入文件这一事实，一个稍微复杂一些的脚本可以解决此问题：</target>
        </trans-unit>
        <trans-unit id="7d892360b7aa6e79ccbbb2db9552ec0912fed1fe" translate="yes" xml:space="preserve">
          <source>Octal and hexadecimal numerics are not recognized as a single token</source>
          <target state="translated">八进制和十六进制数字不被识别为一个单一的标记。</target>
        </trans-unit>
        <trans-unit id="31ef00312f2e1ee7506655b11623866b09a38490" translate="yes" xml:space="preserve">
          <source>OddParity</source>
          <target state="translated">OddParity</target>
        </trans-unit>
        <trans-unit id="14ad9c3a886a6706b68193db972d3c2fd0f4dd48" translate="yes" xml:space="preserve">
          <source>Oddly enough, people really do use this option! Our pal in Durham (England), Paul Callaghan, writes: &amp;ldquo;Some people here use it for a variety of purposes&amp;mdash;honestly!&amp;mdash;e.g., confirmation that the code/machine is doing something, infinite loop detection, gauging cost of recently added code. Certain people can even tell what stage [the program] is in by the beep pattern. But the major use is for annoying others in the same office&amp;hellip;&amp;rdquo;</source>
          <target state="translated">奇怪的是，人们确实确实使用了该选项！我们在英国达勒姆（Durham）的朋友Paul Callaghan写道：&amp;ldquo;老实说，这里的某些人将其用于各种目的，例如，确认代码/机器正在做某事，无限循环检测，衡量最近添加代码的成本。某些人甚至可以通过蜂鸣声模式判断[程序]处于哪个阶段。但是主要用途是使同一办公室的其他人烦恼&amp;hellip;&amp;hellip;&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="0c0b0b1a2080b74e19b756494638ec92162f2758" translate="yes" xml:space="preserve">
          <source>Odds and ends, mostly functions for reading and showing &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt;-like kind of values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; ，主要是读取和显示类似RealFloat的值的功能。</target>
        </trans-unit>
        <trans-unit id="fb4aa7843d0c5581b08750305cac08a18952a151" translate="yes" xml:space="preserve">
          <source>Of course when running another interactive program in the console then we want to let that program handle Ctl-C. Under Unix however, Ctl-C sends &lt;code&gt;SIGINT&lt;/code&gt; to every process using the console. The standard solution is that while running an interactive program, ignore &lt;code&gt;SIGINT&lt;/code&gt; in the parent, and let it be handled in the child process. If that process then terminates due to the &lt;code&gt;SIGINT&lt;/code&gt; signal, then at that point treat it as if we had recieved the &lt;code&gt;SIGINT&lt;/code&gt; ourselves and begin an orderly shutdown.</source>
          <target state="translated">当然，当在控制台中运行另一个交互式程序时，我们希望让该程序处理Ctl-C。但是，在Unix下，Ctl-C 使用控制台将 &lt;code&gt;SIGINT&lt;/code&gt; 发送到每个进程。标准解决方案是在运行交互式程序时，忽略父级中的 &lt;code&gt;SIGINT&lt;/code&gt; ，并在子进程中对其进行处理。如果该过程随后由于 &lt;code&gt;SIGINT&lt;/code&gt; 信号而终止，则在此时将其视为我们自己已收到 &lt;code&gt;SIGINT&lt;/code&gt; 并开始有序关闭。</target>
        </trans-unit>
        <trans-unit id="13cbc7281dc8f2ba063030a73854a759868eae8d" translate="yes" xml:space="preserve">
          <source>Of course, &lt;code&gt;UndecidableInstances&lt;/code&gt; lifts the Paterson Conditions, as now.</source>
          <target state="translated">当然，像现在一样， &lt;code&gt;UndecidableInstances&lt;/code&gt; 会解除 Paterson条件。</target>
        </trans-unit>
        <trans-unit id="bd80101b7867bda9e4de541e2013550d0cd09fca" translate="yes" xml:space="preserve">
          <source>Of course, if you have foreign calls in your program then all bets are off, because you can trash the heap, the stack, or whatever.</source>
          <target state="translated">当然,如果你的程序里有国外的跟注,那么所有的赌注都是不对的,因为你可以糟蹋堆,堆,或者其他的东西。</target>
        </trans-unit>
        <trans-unit id="a37fd12339c76f03254c6a2485812a618d645f86" translate="yes" xml:space="preserve">
          <source>Of course, in this particular situation you can do even better:</source>
          <target state="translated">当然,在这种特殊情况下,你可以做得更好。</target>
        </trans-unit>
        <trans-unit id="959274964b08ed6b64f4a784f4ffb9f800fb0e15" translate="yes" xml:space="preserve">
          <source>Of course, you can also bind normal non-IO expressions using the &lt;code&gt;let&lt;/code&gt;-statement:</source>
          <target state="translated">当然，您也可以使用 &lt;code&gt;let&lt;/code&gt; -statement 绑定普通的非IO表达式：</target>
        </trans-unit>
        <trans-unit id="6b1e2c81f99bb1db90306be62673e1a90e706694" translate="yes" xml:space="preserve">
          <source>Of the form &lt;code&gt;TYPE r&lt;/code&gt; for some &lt;code&gt;r&lt;/code&gt; (see &lt;a href=&quot;#runtime-rep&quot;&gt;Levity polymorphism&lt;/a&gt;). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce667716547fa82bc8795ad7ef205e9410193ed0" translate="yes" xml:space="preserve">
          <source>Offset</source>
          <target state="translated">Offset</target>
        </trans-unit>
        <trans-unit id="1fa3c2ee363eec71d94c2c2d92dc5c6cd1bf213f" translate="yes" xml:space="preserve">
          <source>Offset from the pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea2c1b968cb14580f767587f854d5b3baa84a1fa" translate="yes" xml:space="preserve">
          <source>Offset into first</source>
          <target state="translated">偏移到第一个</target>
        </trans-unit>
        <trans-unit id="5c4232ca426c972654e6acef0e24307e9bf01cdb" translate="yes" xml:space="preserve">
          <source>Offset into second</source>
          <target state="translated">偏移到第二个</target>
        </trans-unit>
        <trans-unit id="f8e5c2c7cae1141a37276f0a36a8a63d24f1a869" translate="yes" xml:space="preserve">
          <source>Often a particular data structure is being retained by a chain of unevaluated closures, only the nearest of which will be reported by retainer profiling - for example &lt;code&gt;A&lt;/code&gt; retains &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt; retains &lt;code&gt;C&lt;/code&gt;, and &lt;code&gt;C&lt;/code&gt; retains a large structure. There might be a large number of &lt;code&gt;B&lt;/code&gt;s but only a single &lt;code&gt;A&lt;/code&gt;, so &lt;code&gt;A&lt;/code&gt; is really the one we&amp;rsquo;re interested in eliminating. However, retainer profiling will in this case report &lt;code&gt;B&lt;/code&gt; as the retainer of the large structure. To move further up the chain of retainers, we can ask for another retainer profile but this time restrict the profile to &lt;code&gt;B&lt;/code&gt; objects, so we get a profile of the retainers of &lt;code&gt;B&lt;/code&gt;:</source>
          <target state="translated">通常，特定的数据结构由未评估的闭包链保留，只有最接近的闭包将通过保留程序配置文件报告-例如 &lt;code&gt;A&lt;/code&gt; 保留 &lt;code&gt;B&lt;/code&gt; ， &lt;code&gt;B&lt;/code&gt; 保留 &lt;code&gt;C&lt;/code&gt; ，并且 &lt;code&gt;C&lt;/code&gt; 保留大结构。可能会有大量的 &lt;code&gt;B&lt;/code&gt; ,但只有一个 &lt;code&gt;A&lt;/code&gt; ，因此 &lt;code&gt;A&lt;/code&gt; 确实是我们有兴趣消除的一个。但是，在这种情况下，保持器性能分析将报告 &lt;code&gt;B&lt;/code&gt; 为大型结构的保持器。为了使固定器链进一步向上移动，我们可以请求另一个固定器配置文件，但是这次将配置文件限制为 &lt;code&gt;B&lt;/code&gt; 对象，因此我们获得了 &lt;code&gt;B&lt;/code&gt; 的保留者的资料：</target>
        </trans-unit>
        <trans-unit id="69167169d72ddc29203b8842fec5ca3158c37c4a" translate="yes" xml:space="preserve">
          <source>Old API kept to avoid breaking clients</source>
          <target state="translated">保留旧的API以避免破坏客户端</target>
        </trans-unit>
        <trans-unit id="9ce5a70368f8243b3801e08794befe07bb9b0130" translate="yes" xml:space="preserve">
          <source>Old deprecated functions</source>
          <target state="translated">旧的废弃功能</target>
        </trans-unit>
        <trans-unit id="199b0ae233b01261174a40c433e452bd8e11764e" translate="yes" xml:space="preserve">
          <source>Old path</source>
          <target state="translated">古道</target>
        </trans-unit>
        <trans-unit id="9b285d963737095a360d0a661d0df2fea803a4ac" translate="yes" xml:space="preserve">
          <source>Omit code generation</source>
          <target state="translated">省略代码生成</target>
        </trans-unit>
        <trans-unit id="06b348347f0fc6282795f8b8662b8c726c982724" translate="yes" xml:space="preserve">
          <source>Omit code generation (and all later phases) altogether. This is useful if you&amp;rsquo;re only interested in type checking code.</source>
          <target state="translated">完全省略代码生成（以及所有后续阶段）。如果您仅对类型检查代码感兴趣，这将很有用。</target>
        </trans-unit>
        <trans-unit id="143759d6a82a6e782ba8b006ab52848e42762c71" translate="yes" xml:space="preserve">
          <source>Omit heap checks when no allocation is being performed.</source>
          <target state="translated">当没有进行分配时,省略堆检查。</target>
        </trans-unit>
        <trans-unit id="7e25f9708b019df5d840bb95bec43db511395b29" translate="yes" xml:space="preserve">
          <source>Omits the link step. This option can be used with &lt;a href=&quot;using#ghc-flag---make&quot;&gt;&lt;code&gt;--make&lt;/code&gt;&lt;/a&gt; to avoid the automatic linking that takes place if the program contains a &lt;code&gt;Main&lt;/code&gt; module.</source>
          <target state="translated">省略链接步骤。此选项可与&lt;a href=&quot;using#ghc-flag---make&quot;&gt; &lt;code&gt;--make&lt;/code&gt; &lt;/a&gt;一起使用，以避免在程序包含 &lt;code&gt;Main&lt;/code&gt; 模块时发生自动链接。</target>
        </trans-unit>
        <trans-unit id="60e957e3d9a735dd58ec78b95add59bf7dee68af" translate="yes" xml:space="preserve">
          <source>Omitting &lt;code&gt;-N⟨x⟩&lt;/code&gt; entirely means &lt;code&gt;-N1&lt;/code&gt;.</source>
          <target state="translated">省略 &lt;code&gt;-N⟨x⟩&lt;/code&gt; 完全意味着 &lt;code&gt;-N1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="852085b8a1ca62c46bfcfacdf985dc281e39d842" translate="yes" xml:space="preserve">
          <source>Omitting generic instances</source>
          <target state="translated">省略通用实例</target>
        </trans-unit>
        <trans-unit id="02a33c2d0537913c5f5350486a8c3f93ad4f4e57" translate="yes" xml:space="preserve">
          <source>Omitting ⟨x⟩, i.e. &lt;code&gt;+RTS -N -RTS&lt;/code&gt;, lets the runtime choose the value of ⟨x⟩ itself based on how many processors are in your machine.</source>
          <target state="translated">省略⟨x⟩，即 &lt;code&gt;+RTS -N -RTS&lt;/code&gt; ，可以使运行时根据计算机中有多少个处理器来选择⟨x⟨本身的值。</target>
        </trans-unit>
        <trans-unit id="15d76fc4eb3563c85ec6bb33fc1966e50eaee83c" translate="yes" xml:space="preserve">
          <source>On 32-bit x86 platforms when using the native code generator, the &lt;a href=&quot;using-optimisation#ghc-flag--fexcess-precision&quot;&gt;&lt;code&gt;-fexcess-precision&lt;/code&gt;&lt;/a&gt; option is always on. This means that floating-point calculations are non-deterministic, because depending on how the program is compiled (optimisation settings, for example), certain calculations might be done at 80-bit precision instead of the intended 32-bit or 64-bit precision. Floating-point results may differ when optimisation is turned on. In the worst case, referential transparency is violated, because for example &lt;code&gt;let x = E1 in E2&lt;/code&gt; can evaluate to a different value than &lt;code&gt;E2[E1/x]&lt;/code&gt;.</source>
          <target state="translated">在使用本机代码生成器的32位x86平台上，&lt;a href=&quot;using-optimisation#ghc-flag--fexcess-precision&quot;&gt; &lt;code&gt;-fexcess-precision&lt;/code&gt; &lt;/a&gt;选项始终处于启用状态。这意味着浮点计算是不确定的，因为取决于程序的编译方式（例如，优化设置），某些计算可能以80位精度而不是预期的32位或64位精度进行。启用优化后，浮点结果可能会有所不同。在最坏的情况下，会违反参照透明性，因为例如， &lt;code&gt;let x = E1 in E2&lt;/code&gt; 可以得出与 &lt;code&gt;E2[E1/x]&lt;/code&gt; 不同的值。</target>
        </trans-unit>
        <trans-unit id="1391cbd23623d8953378e909f91a6612b37b28fe" translate="yes" xml:space="preserve">
          <source>On 64-bit machines, the RTS needs to allocate memory in the low 2Gb of the address space. Support for this across different operating systems is patchy, and sometimes fails. This option is there to give the RTS a hint about where it should be able to allocate memory in the low 2Gb of the address space. For example, &lt;code&gt;+RTS -xm20000000 -RTS&lt;/code&gt; would hint that the RTS should allocate starting at the 0.5Gb mark. The default is to use the OS&amp;rsquo;s built-in support for allocating memory in the low 2Gb if available (e.g. &lt;code&gt;mmap&lt;/code&gt; with &lt;code&gt;MAP_32BIT&lt;/code&gt; on Linux), or otherwise &lt;code&gt;-xm40000000&lt;/code&gt;.</source>
          <target state="translated">在64位计算机上，RTS需要在地址空间的低2Gb中分配内存。在不同的操作系统上对此的支持是不完整的，有时会失败。可以使用该选项向RTS提示有关它应该能够在地址空间的低2Gb中分配内存的位置。例如， &lt;code&gt;+RTS -xm20000000 -RTS&lt;/code&gt; 会暗示RTS应该从0.5Gb标记开始分配。默认设置是使用操作系统的内置支持（如果可用）在低2Gb内存中分配内存（例如，在Linux上具有 &lt;code&gt;MAP_32BIT&lt;/code&gt; 的 &lt;code&gt;mmap&lt;/code&gt; ），否则使用 &lt;code&gt;-xm40000000&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="097883c1f4907fb1b521ee5631f70e7ddf86398d" translate="yes" xml:space="preserve">
          <source>On 64-bit machines, the runtime linker usually needs to map object code into the low 2Gb of the address space, due to the x86_64 small memory model where most symbol references are 32 bits. The problem is that this 2Gb of address space can fill up, especially if you&amp;rsquo;re loading a very large number of object files into GHCi.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b14479147dc851f7df3c7d9e83023d77f4f785" translate="yes" xml:space="preserve">
          <source>On Darwin/OS X, dynamic libraries are stamped at build time with an &amp;ldquo;install name&amp;rdquo;, which is the ultimate install path of the library file. Any libraries or executables that subsequently link against it will pick up that path as their runtime search location for it. By default, ghc sets the install name to the location where the library is built. This option allows you to override it with the specified file path. (It passes &lt;code&gt;-install_name&lt;/code&gt; to Apple&amp;rsquo;s linker.) Ignored on other platforms.</source>
          <target state="translated">在Darwin / OS X上，动态库在构建时会用&amp;ldquo;安装名称&amp;rdquo;标记，这是库文件的最终安装路径。随后链接到该库的任何库或可执行文件都将使用该路径作为其运行时搜索位置。默认情况下，ghc将安装名称设置为构建库的位置。该选项允许您使用指定的文件路径覆盖它。（它将 &lt;code&gt;-install_name&lt;/code&gt; 传递给Apple的链接器。）在其他平台上被忽略。</target>
        </trans-unit>
        <trans-unit id="c502a4721745da19ad3306edaec1023d6b7312d6" translate="yes" xml:space="preserve">
          <source>On Darwin/OS X/iOS only, add ⟨dir⟩ to the list of directories searched for frameworks. This option corresponds to the &lt;code&gt;-F&lt;/code&gt; option for Apple&amp;rsquo;s Linker.</source>
          <target state="translated">仅在Darwin / OS X / iOS上，将⟨dir⟩添加到搜索框架的目录列表中。此选项与Apple的Linker 的 &lt;code&gt;-F&lt;/code&gt; 选项相对应。</target>
        </trans-unit>
        <trans-unit id="f8f858556433cf6929170371cf16d1d28b70f4f0" translate="yes" xml:space="preserve">
          <source>On Darwin/OS X/iOS only, add ⟨dir⟩ to the list of directories searched for frameworks. This option corresponds to the &lt;code&gt;-F&lt;/code&gt; option for Apple's Linker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="836aeb62038416ab5d18c1c4cccc6b7891cf00da" translate="yes" xml:space="preserve">
          <source>On Darwin/OS X/iOS only, link in the framework ⟨name⟩. This option corresponds to the &lt;code&gt;-framework&lt;/code&gt; option for Apple&amp;rsquo;s Linker.</source>
          <target state="translated">仅在Darwin / OS X / iOS上，链接框架⟨name⟩。此选项与Apple的Linker 的 &lt;code&gt;-framework&lt;/code&gt; 选项相对应。</target>
        </trans-unit>
        <trans-unit id="0d2f8a49d8d4c58193d7bce9934ad90451e92201" translate="yes" xml:space="preserve">
          <source>On Darwin/OS X/iOS only, link in the framework ⟨name⟩. This option corresponds to the &lt;code&gt;-framework&lt;/code&gt; option for Apple&amp;rsquo;s Linker. Please note that frameworks and packages are two different things - frameworks don&amp;rsquo;t contain any Haskell code. Rather, they are Apple&amp;rsquo;s way of packaging shared libraries. To link to Apple&amp;rsquo;s &amp;ldquo;Carbon&amp;rdquo; API, for example, you&amp;rsquo;d use &lt;code&gt;-framework Carbon&lt;/code&gt;.</source>
          <target state="translated">仅在Darwin / OS X / iOS上，链接框架⟨name⟩。此选项与Apple的Linker 的 &lt;code&gt;-framework&lt;/code&gt; 选项相对应。请注意，框架和包是两回事-框架不包含任何Haskell代码。相反，它们是Apple打包共享库的方式。例如，要链接到Apple的&amp;ldquo; Carbon&amp;rdquo; API，您可以使用 &lt;code&gt;-framework Carbon&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7cccac3a36668d1fdad31c6e062fb07a44e28644" translate="yes" xml:space="preserve">
          <source>On Darwin/OS X/iOS only, link in the framework ⟨name⟩. This option corresponds to the &lt;code&gt;-framework&lt;/code&gt; option for Apple's Linker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57aabecc887720cc819888b560ff938ff24a471" translate="yes" xml:space="preserve">
          <source>On Darwin/OS X/iOS only, prepend the directory ⟨dir⟩ to the framework directories path. This option corresponds to the &lt;code&gt;-F&lt;/code&gt; option for Apple&amp;rsquo;s Linker (&lt;code&gt;-F&lt;/code&gt; already means something else for GHC).</source>
          <target state="translated">仅在Darwin / OS X / iOS上，将目录dir放在框架目录路径之前。此选项与Apple的Linker 的 &lt;code&gt;-F&lt;/code&gt; 选项相对应（ &lt;code&gt;-F&lt;/code&gt; 对GHC而言已经意味着其他名称）。</target>
        </trans-unit>
        <trans-unit id="f6e8ba5a3fab15f9e41a75f470422c219a534bb8" translate="yes" xml:space="preserve">
          <source>On GHC, the runtime will ensure that any Haskell thread will only see &quot;its own&quot; &lt;code&gt;errno&lt;/code&gt;, by saving and restoring the value when Haskell threads are scheduled across OS threads.</source>
          <target state="translated">在GHC上，运行时将通过在跨OS线程调度Haskell线程时保存并还原该值，从而确保任何Haskell线程仅看到&amp;ldquo;自己的&amp;rdquo; &lt;code&gt;errno&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c71882ba581cd6bc6d41d871050d79d61de4659e" translate="yes" xml:space="preserve">
          <source>On Linux, MADV_FREE is newer and faster because it can avoid zeroing pages if they are re-used by the process later (see &lt;code&gt;man 2 madvise&lt;/code&gt;), but for the trade-off that memory inspection tools like &lt;code&gt;top&lt;/code&gt; will not immediately reflect the freeing in their display of resident memory (RSS column): Only under memory pressure will Linux actually remove the freed pages from the process and update its RSS statistics. Until then, the pages show up as &lt;code&gt;LazyFree&lt;/code&gt; in &lt;code&gt;/proc/PID/smaps&lt;/code&gt; (see &lt;code&gt;man 5 proc&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40cc400d7871c058aaff05bc589d341778622e21" translate="yes" xml:space="preserve">
          <source>On POSIX platforms these two new handles will always be Nothing</source>
          <target state="translated">在POSIX平台上,这两个新的句柄将始终是Nothing</target>
        </trans-unit>
        <trans-unit id="078d3ef4757340184bdc802a0b2704173202e340" translate="yes" xml:space="preserve">
          <source>On POSIX systems, this is equivalent to &lt;code&gt;stat&lt;/code&gt; followed by &lt;code&gt;chmod&lt;/code&gt;.</source>
          <target state="translated">在POSIX系统上，这等效于 &lt;code&gt;stat&lt;/code&gt; 和 &lt;code&gt;chmod&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e5150091903944c9e80b85e4f5491e74472f81c1" translate="yes" xml:space="preserve">
          <source>On POSIX systems, this returns the result of &lt;code&gt;access&lt;/code&gt;.</source>
          <target state="translated">在POSIX系统上，这将返回 &lt;code&gt;access&lt;/code&gt; 的结果。</target>
        </trans-unit>
        <trans-unit id="0e1256ac8aafae1c7e4adb4ddae8c68c82e5af71" translate="yes" xml:space="preserve">
          <source>On POSIX systems, this sets the &lt;em&gt;owner&lt;/em&gt; permissions.</source>
          <target state="translated">在POSIX系统上，这将设置&lt;em&gt;所有者&lt;/em&gt;权限。</target>
        </trans-unit>
        <trans-unit id="15a6eb7d1aee9c1397492586a65a460c544dbaea" translate="yes" xml:space="preserve">
          <source>On POSIX, equivalent to &lt;code&gt;&lt;a href=&quot;system-directory-internal#v:simplifyPosix&quot;&gt;simplifyPosix&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">在POSIX上，等效于 &lt;code&gt;&lt;a href=&quot;system-directory-internal#v:simplifyPosix&quot;&gt;simplifyPosix&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a057a4f6c4818787b76f3467f2b22b0d6a9e3b6d" translate="yes" xml:space="preserve">
          <source>On POSIX-compatible platforms GHC&amp;rsquo;s runtime system (when built with &lt;code&gt;libdw&lt;/code&gt; support) will produce a stack trace on &lt;code&gt;stderr&lt;/code&gt; when a &lt;code&gt;SIGQUIT&lt;/code&gt; signal is received (on many systems this signal can be sent using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c168ab7b60c55fc5b0097e465ca6c5d25010787" translate="yes" xml:space="preserve">
          <source>On POSIX-compatible platforms GHC&amp;rsquo;s runtime system (when built with &lt;code&gt;libdw&lt;/code&gt; support) will produce a stack trace on &lt;code&gt;stderr&lt;/code&gt; when a &lt;code&gt;SIGQUIT&lt;/code&gt; signal is received (on many systems this signal can be sent using &lt;code&gt;Ctrl-\&lt;/code&gt;). For instance (using the same &lt;code&gt;fib.hs&lt;/code&gt; as above),</source>
          <target state="translated">在兼容POSIX的平台上，GHC的运行时系统（当使用 &lt;code&gt;libdw&lt;/code&gt; 支持构建时）将在收到 &lt;code&gt;SIGQUIT&lt;/code&gt; 信号时在 &lt;code&gt;stderr&lt;/code&gt; 上生成堆栈跟踪（在许多系统上，可以使用 &lt;code&gt;Ctrl-\&lt;/code&gt; 发送该信号）。例如（使用与上述相同的 &lt;code&gt;fib.hs&lt;/code&gt; ），</target>
        </trans-unit>
        <trans-unit id="0422707a616b81e28b0b133b6079462f1cb7aac1" translate="yes" xml:space="preserve">
          <source>On Unix systems, &lt;code&gt;&lt;a href=&quot;system-process#v:terminateProcess&quot;&gt;terminateProcess&lt;/a&gt;&lt;/code&gt; sends the process the SIGTERM signal. On Windows systems, if &lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; then the Win32 &lt;code&gt;TerminateJobObject&lt;/code&gt; function is called to kill all processes associated with the job and passing the exit code of 1 to each of them. Otherwise if &lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; then the Win32 &lt;code&gt;TerminateProcess&lt;/code&gt; function is called, passing an exit code of 1.</source>
          <target state="translated">在Unix系统上， &lt;code&gt;&lt;a href=&quot;system-process#v:terminateProcess&quot;&gt;terminateProcess&lt;/a&gt;&lt;/code&gt; 向进程发送SIGTERM信号。在Windows系统上，如果 &lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; 为 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ，则将调用 Win32 &lt;code&gt;TerminateJobObject&lt;/code&gt; 函数来杀死与该作业关联的所有进程，并将退出代码1传递给每个进程。否则，如果 &lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; 为 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; ,则调用Win32 &lt;code&gt;TerminateProcess&lt;/code&gt; 函数，并传递退出代码1。</target>
        </trans-unit>
        <trans-unit id="2ee8ff777481e4647016777c942f48cad360e353" translate="yes" xml:space="preserve">
          <source>On Unix systems, &lt;code&gt;&lt;a href=&quot;system-process#v:terminateProcess&quot;&gt;terminateProcess&lt;/a&gt;&lt;/code&gt; sends the process the SIGTERM signal. On Windows systems, if &lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; then the Win32 &lt;code&gt;TerminateJobObject&lt;/code&gt; function is called to kill all processes associated with the job and passing the exit code of 1 to each of them. Otherwise if &lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; then the Win32 &lt;code&gt;TerminateProcess&lt;/code&gt; function is called, passing an exit code of 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26000ccdb50e03ab1029e35d0df1776d18e9ab0e" translate="yes" xml:space="preserve">
          <source>On Unix systems, it sends the group the SIGINT signal.</source>
          <target state="translated">在Unix系统中,它向该组发送SIGINT信号。</target>
        </trans-unit>
        <trans-unit id="c6d0966027827b87508cf93ba9e2a42091942bf2" translate="yes" xml:space="preserve">
          <source>On Unix systems, see &lt;code&gt;&lt;a href=&quot;system-process#v:waitForProcess&quot;&gt;waitForProcess&lt;/a&gt;&lt;/code&gt; for the meaning of exit codes when the process died as the result of a signal.</source>
          <target state="translated">在Unix系统上，请参见 &lt;code&gt;&lt;a href=&quot;system-process#v:waitForProcess&quot;&gt;waitForProcess&lt;/a&gt;&lt;/code&gt; 以获取当进程由于信号而死亡时退出代码的含义。</target>
        </trans-unit>
        <trans-unit id="09629c83332620e6e6759db7b31141b99ca9c762" translate="yes" xml:space="preserve">
          <source>On Unix there are two mechanisms. Shared libraries can be installed into standard locations that the dynamic linker knows about. For example &lt;code&gt;/usr/lib&lt;/code&gt; or &lt;code&gt;/usr/local/lib&lt;/code&gt; on most systems. The other mechanism is to use a &amp;ldquo;runtime path&amp;rdquo; or &amp;ldquo;rpath&amp;rdquo; embedded into programs and libraries themselves. These paths can either be absolute paths or on at least Linux and Solaris they can be paths relative to the program or library itself. In principle this makes it possible to construct fully relocatable sets of programs and libraries.</source>
          <target state="translated">在Unix上，有两种机制。可以将共享库安装到动态链接器知道的标准位置。例如，在大多数系统上， &lt;code&gt;/usr/lib&lt;/code&gt; 或 &lt;code&gt;/usr/local/lib&lt;/code&gt; 。另一种机制是使用嵌入到程序和库本身中的&amp;ldquo;运行时路径&amp;rdquo;或&amp;ldquo; rpath&amp;rdquo;。这些路径可以是绝对路径，或者至少在Linux和Solaris上，它们可以是相对于程序或库本身的路径。原则上，这使得构建完全可重定位的程序和库集成为可能。</target>
        </trans-unit>
        <trans-unit id="1aa9bf14869ffa0729b113a2919b90d3a99f83ea" translate="yes" xml:space="preserve">
          <source>On Unix, &lt;code&gt;&lt;a href=&quot;system-directory#v:getHomeDirectory&quot;&gt;getHomeDirectory&lt;/a&gt;&lt;/code&gt; behaves as follows:</source>
          <target state="translated">在Unix上， &lt;code&gt;&lt;a href=&quot;system-directory#v:getHomeDirectory&quot;&gt;getHomeDirectory&lt;/a&gt;&lt;/code&gt; 的行为如下：</target>
        </trans-unit>
        <trans-unit id="dbda9eb325b9c89423ab40811c09f445058a091b" translate="yes" xml:space="preserve">
          <source>On Unix, &lt;code&gt;&lt;a href=&quot;system-directory#v:getTemporaryDirectory&quot;&gt;getTemporaryDirectory&lt;/a&gt;&lt;/code&gt; returns the value of the &lt;code&gt;TMPDIR&lt;/code&gt; environment variable or &quot;/tmp&quot; if the variable isn't defined. On Windows, the function checks for the existence of environment variables in the following order and uses the first path found:</source>
          <target state="translated">在Unix上， &lt;code&gt;&lt;a href=&quot;system-directory#v:getTemporaryDirectory&quot;&gt;getTemporaryDirectory&lt;/a&gt;&lt;/code&gt; 返回 &lt;code&gt;TMPDIR&lt;/code&gt; 环境变量的值，如果未定义，则返回&amp;ldquo; / tmp&amp;rdquo;。在Windows上，该函数按以下顺序检查环境变量是否存在，并使用找到的第一个路径：</target>
        </trans-unit>
        <trans-unit id="db73ed697e88171697c761e2de6ba9e3b2fdb8f6" translate="yes" xml:space="preserve">
          <source>On Unix, &lt;code&gt;&lt;a href=&quot;system-directory#v:getUserDocumentsDirectory&quot;&gt;getUserDocumentsDirectory&lt;/a&gt;&lt;/code&gt; returns the value of the &lt;code&gt;HOME&lt;/code&gt; environment variable. On Windows, the system is queried for a suitable path; a typical path might be &lt;code&gt;C:/Users/&lt;em&gt;&amp;lt;user&amp;gt;&lt;/em&gt;/Documents&lt;/code&gt;.</source>
          <target state="translated">在Unix上， &lt;code&gt;&lt;a href=&quot;system-directory#v:getUserDocumentsDirectory&quot;&gt;getUserDocumentsDirectory&lt;/a&gt;&lt;/code&gt; 返回 &lt;code&gt;HOME&lt;/code&gt; 环境变量的值。在Windows上，系统会查询一条合适的路径。典型的路径可能是 &lt;code&gt;C:/Users/&lt;em&gt;&amp;lt;user&amp;gt;&lt;/em&gt;/Documents&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d6aec3d6d90c1ca53af23e974fd0a1470d206561" translate="yes" xml:space="preserve">
          <source>On Unix-like systems, permissions, access time, and modification time are preserved. If possible, the owner and group are also preserved. Note that the very act of copying can change the access time of the source file, hence the access times of the two files may differ after the operation completes.</source>
          <target state="translated">在类似Unix的系统中,权限、访问时间和修改时间都会被保留。如果可能的话,所有者和组也会被保留。需要注意的是,复制行为本身就会改变源文件的访问时间,因此在操作完成后,两个文件的访问时间可能会有所不同。</target>
        </trans-unit>
        <trans-unit id="1f67f27323ff913fec8fc3bce6fba0553de49353" translate="yes" xml:space="preserve">
          <source>On Unix-like systems, the path is &lt;code&gt;~/.&lt;em&gt;&amp;lt;app&amp;gt;&lt;/em&gt;&lt;/code&gt;.</source>
          <target state="translated">在类似Unix的系统上，路径为 &lt;code&gt;~/.&lt;em&gt;&amp;lt;app&amp;gt;&lt;/em&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2acf1d643c18794b5ab0d3288014560943c06f0b" translate="yes" xml:space="preserve">
          <source>On Unix: &lt;code&gt;$HOME/.ghc/ghci.conf&lt;/code&gt;</source>
          <target state="translated">在Unix上： &lt;code&gt;$HOME/.ghc/ghci.conf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="686bba75bbf12a7e94f3f601b8b2b6f1c767e5b6" translate="yes" xml:space="preserve">
          <source>On Win32 platforms, &lt;code&gt;renameDirectory&lt;/code&gt; fails if the &lt;em&gt;new&lt;/em&gt; directory already exists.</source>
          <target state="translated">在Win32平台上，如果&lt;em&gt;新&lt;/em&gt;目录已存在，则 &lt;code&gt;renameDirectory&lt;/code&gt; 失败。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4cf66c11f13f8d5cfb30fa66ff975ad9d16e7224" translate="yes" xml:space="preserve">
          <source>On Windows XP or earlier systems, junction expansion is not performed due to their lack of &lt;code&gt;GetFinalPathNameByHandle&lt;/code&gt;.</source>
          <target state="translated">在Windows XP或更早的系统上，由于缺少 &lt;code&gt;GetFinalPathNameByHandle&lt;/code&gt; 而不执行结点扩展。</target>
        </trans-unit>
        <trans-unit id="e2645284c47be98a8acf2a83e433b0e66594a2f2" translate="yes" xml:space="preserve">
          <source>On Windows a second wait method can be used to block for event completion. This requires two handles. A process job handle and a events handle to monitor.</source>
          <target state="translated">在Windows上,可以使用第二个等待方法来阻止事件的完成。这需要两个句柄。一个进程作业句柄和一个事件句柄来监控。</target>
        </trans-unit>
        <trans-unit id="9658f389cd47e6221668fd22bc06e990b9d9dd68" translate="yes" xml:space="preserve">
          <source>On Windows hs_init treats argv as UTF8-encoded. Passing other encodings might lead to unexpected results. Passing NULL as argv is valid but can lead to &amp;lt;unknown&amp;gt; showing up in error messages instead of the name of the executable.</source>
          <target state="translated">在Windows上，hs_init将argv视为UTF8编码。传递其他编码可能会导致意外结果。将argv作为NULL传递是有效的，但可能导致错误消息中显示&amp;lt;unknown&amp;gt;而不是可执行文件的名称。</target>
        </trans-unit>
        <trans-unit id="b4698d639ab062d2aed61863bbaa5096920591d6" translate="yes" xml:space="preserve">
          <source>On Windows systems this flag indicates that we should wait for the entire process tree to finish before unblocking. On POSIX systems this flag is ignored. See $exec-on-windows for details.</source>
          <target state="translated">在Windows系统中,这个标志表示我们应该等待整个进程树完成后再解锁。在POSIX系统中,这个标志被忽略。详情请参阅$exec-on-windows。</target>
        </trans-unit>
        <trans-unit id="45e04fe208e77db2f230b90c671409e216534e94" translate="yes" xml:space="preserve">
          <source>On Windows systems, it generates a CTRL_BREAK_EVENT and will only work for processes created using &lt;code&gt;createProcess&lt;/code&gt; and setting the &lt;code&gt;&lt;a href=&quot;system-process#v:create_group&quot;&gt;create_group&lt;/a&gt;&lt;/code&gt; flag</source>
          <target state="translated">在Windows系统上，它将生成CTRL_BREAK_EVENT，并且仅适用于使用 &lt;code&gt;createProcess&lt;/code&gt; 并设置 &lt;code&gt;&lt;a href=&quot;system-process#v:create_group&quot;&gt;create_group&lt;/a&gt;&lt;/code&gt; 标志创建的进程</target>
        </trans-unit>
        <trans-unit id="d883d2ded3f33c4ac5277dea1b34c15e47204a0e" translate="yes" xml:space="preserve">
          <source>On Windows systems, it generates a CTRL_BREAK_EVENT and will only work for processes created using &lt;code&gt;createProcess&lt;/code&gt; and setting the &lt;code&gt;&lt;a href=&quot;system-process-internals#v:create_group&quot;&gt;create_group&lt;/a&gt;&lt;/code&gt; flag</source>
          <target state="translated">在Windows系统上，它将生成CTRL_BREAK_EVENT，并且仅适用于使用 &lt;code&gt;createProcess&lt;/code&gt; 并设置 &lt;code&gt;&lt;a href=&quot;system-process-internals#v:create_group&quot;&gt;create_group&lt;/a&gt;&lt;/code&gt; 标志创建的进程</target>
        </trans-unit>
        <trans-unit id="1311c5b9754526fe0793423a543b261c1854ae36" translate="yes" xml:space="preserve">
          <source>On Windows systems, this calls &lt;code&gt;DeviceIoControl&lt;/code&gt; with &lt;code&gt;FSCTL_GET_REPARSE_POINT&lt;/code&gt;. In addition to symbolic links, the function also works on junction points. On POSIX systems, this calls &lt;code&gt;readlink&lt;/code&gt;.</source>
          <target state="translated">在Windows系统上，这会使用 &lt;code&gt;FSCTL_GET_REPARSE_POINT&lt;/code&gt; 调用 &lt;code&gt;DeviceIoControl&lt;/code&gt; 。除了符号链接，该功能还适用于接合点。在POSIX系统上，这称为 &lt;code&gt;readlink&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1567544926c7445013dc0be717298582cb416b6" translate="yes" xml:space="preserve">
          <source>On Windows this has no effect.</source>
          <target state="translated">在Windows上,这没有任何效果。</target>
        </trans-unit>
        <trans-unit id="8f02d4da8e0b35ffd3d2c36f1392b357f6c5f8d8" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;&lt;a href=&quot;system-cmd#v:system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; passes the command to the Windows command interpreter (&lt;code&gt;CMD.EXE&lt;/code&gt; or &lt;code&gt;COMMAND.COM&lt;/code&gt;), hence Unixy shell tricks will not work.</source>
          <target state="translated">在Windows上， &lt;code&gt;&lt;a href=&quot;system-cmd#v:system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 将命令传递给Windows命令解释器（ &lt;code&gt;CMD.EXE&lt;/code&gt; 或 &lt;code&gt;COMMAND.COM&lt;/code&gt; ），因此Unixy shell技巧将不起作用。</target>
        </trans-unit>
        <trans-unit id="48c350060f4cd8913452b9533ace5233eb42f47d" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;&lt;a href=&quot;system-directory#v:XdgData&quot;&gt;XdgData&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-directory#v:XdgConfig&quot;&gt;XdgConfig&lt;/a&gt;&lt;/code&gt; usually map to the same directory unless overridden.</source>
          <target state="translated">在Windows上，除非覆盖 &lt;code&gt;&lt;a href=&quot;system-directory#v:XdgData&quot;&gt;XdgData&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;system-directory#v:XdgConfig&quot;&gt;XdgConfig&lt;/a&gt;&lt;/code&gt; ，否则它们通常映射到同一目录。</target>
        </trans-unit>
        <trans-unit id="b2c2a5d7334002daf6e872673bc987f5bdaaf260" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;&lt;a href=&quot;system-directory#v:XdgDataDirs&quot;&gt;XdgDataDirs&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-directory#v:XdgConfigDirs&quot;&gt;XdgConfigDirs&lt;/a&gt;&lt;/code&gt; usually map to the same list of directories unless overridden.</source>
          <target state="translated">在Windows上，除非被覆盖，否则 &lt;code&gt;&lt;a href=&quot;system-directory#v:XdgDataDirs&quot;&gt;XdgDataDirs&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;system-directory#v:XdgConfigDirs&quot;&gt;XdgConfigDirs&lt;/a&gt;&lt;/code&gt; 通常映射到相同的目录列表。</target>
        </trans-unit>
        <trans-unit id="8b25994ba9790bb8044b9cc7287876fc972fce5c" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;&lt;a href=&quot;system-directory#v:findExecutable&quot;&gt;findExecutable&lt;/a&gt;&lt;/code&gt; calls the Win32 function &lt;code&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/aa365527.aspx&quot;&gt;SearchPath&lt;/a&gt;&lt;/code&gt;, which may search other places before checking the directories in the &lt;code&gt;PATH&lt;/code&gt; environment variable. Where it actually searches depends on registry settings, but notably includes the directory containing the current executable.</source>
          <target state="translated">在Windows上， &lt;code&gt;&lt;a href=&quot;system-directory#v:findExecutable&quot;&gt;findExecutable&lt;/a&gt;&lt;/code&gt; 调用Win32函数 &lt;code&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/aa365527.aspx&quot;&gt;SearchPath&lt;/a&gt;&lt;/code&gt; ，该函数可能会在检查 &lt;code&gt;PATH&lt;/code&gt; 环境变量中的目录之前搜索其他位置。它实际搜索的位置取决于注册表设置，但特别要包括包含当前可执行文件的目录。</target>
        </trans-unit>
        <trans-unit id="dca5f3e83bb026318939bea1cd25a1940f11ff0f" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;&lt;a href=&quot;system-process#v:system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; passes the command to the Windows command interpreter (&lt;code&gt;CMD.EXE&lt;/code&gt; or &lt;code&gt;COMMAND.COM&lt;/code&gt;), hence Unixy shell tricks will not work.</source>
          <target state="translated">在Windows上， &lt;code&gt;&lt;a href=&quot;system-process#v:system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 将命令传递给Windows命令解释器（ &lt;code&gt;CMD.EXE&lt;/code&gt; 或 &lt;code&gt;COMMAND.COM&lt;/code&gt; ），因此Unixy shell技巧将不起作用。</target>
        </trans-unit>
        <trans-unit id="c8886822cdea6ae2e0b2d173208997d3a1f79f72" translate="yes" xml:space="preserve">
          <source>On Windows, GHC normally generates a manifest file when linking a binary. The manifest is placed in the file &lt;code&gt;&lt;em&gt;prog&lt;/em&gt;.exe.manifest`&lt;/code&gt; where ⟨prog.exe⟩ is the name of the executable. The manifest file currently serves just one purpose: it disables the &amp;ldquo;installer detection&amp;rdquo; in Windows Vista that attempts to elevate privileges for executables with certain names (e.g. names containing &amp;ldquo;install&amp;rdquo;, &amp;ldquo;setup&amp;rdquo; or &amp;ldquo;patch&amp;rdquo;). Without the manifest file to turn off installer detection, attempting to run an executable that Windows deems to be an installer will return a permission error code to the invoker. Depending on the invoker, the result might be a dialog box asking the user for elevated permissions, or it might simply be a permission denied error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3c28898ffda6729df899cf284892444c82605a" translate="yes" xml:space="preserve">
          <source>On Windows, GHC normally generates a manifestmanifest file when linking a binary. The manifest is placed in the file &lt;code&gt;&lt;em&gt;prog&lt;/em&gt;.exe.manifest`&lt;/code&gt; where ⟨prog.exe⟩ is the name of the executable. The manifest file currently serves just one purpose: it disables the &amp;ldquo;installer detection&amp;rdquo; in Windows Vista that attempts to elevate privileges for executables with certain names (e.g. names containing &amp;ldquo;install&amp;rdquo;, &amp;ldquo;setup&amp;rdquo; or &amp;ldquo;patch&amp;rdquo;). Without the manifest file to turn off installer detection, attempting to run an executable that Windows deems to be an installer will return a permission error code to the invoker. Depending on the invoker, the result might be a dialog box asking the user for elevated permissions, or it might simply be a permission denied error.</source>
          <target state="translated">在Windows上，GHC通常在链接二进制文件时生成清单文件。该清单放置在文件 &lt;code&gt;&lt;em&gt;prog&lt;/em&gt;.exe.manifest`&lt;/code&gt; 其中⟨prog.exe⟩是可执行文件的名称。清单文件当前仅用于一个目的：它禁用Windows Vista中的&amp;ldquo;安装程序检测&amp;rdquo;，该程序试图为具有某些名称（例如，包含&amp;ldquo;安装&amp;rdquo;，&amp;ldquo;安装&amp;rdquo;或&amp;ldquo;补丁&amp;rdquo;的名称）的可执行文件提升特权。如果没有清单文件来关闭安装程序检测，尝试运行Windows认为是安装程序的可执行文件将向调用者返回一个权限错误代码。根据调用者的不同，结果可能是一个对话框，要求用户提供提升的权限，也可能只是一个权限被拒绝的错误。</target>
        </trans-unit>
        <trans-unit id="3857f1cd71ad0bc38aa45f3e4c0b66be30d8d39f" translate="yes" xml:space="preserve">
          <source>On Windows, from [1]: &quot;If a file name begins with only a disk designator but not the backslash after the colon, it is interpreted as a relative path to the current directory on the drive with the specified letter.&quot; The current behavior of &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; is to never combine these forms.</source>
          <target state="translated">在Windows上，从[1]开始：&amp;ldquo;如果文件名仅以磁盘标识符开头，而不以冒号后的反斜杠开头，则它将被解释为驱动器上具有指定字母的当前目录的相对路径。&amp;rdquo; &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; 当前的行为是永远不要合并这些形式。</target>
        </trans-unit>
        <trans-unit id="00fab97cf532bb811e9f99b70b73e208825c5f0f" translate="yes" xml:space="preserve">
          <source>On Windows, from [1]: &quot;If a file name begins with only a disk designator but not the backslash after the colon, it is interpreted as a relative path to the current directory on the drive with the specified letter.&quot; The current behavior of &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; is to never combine these forms.</source>
          <target state="translated">在Windows上，从[1]开始：&amp;ldquo;如果文件名仅以磁盘标识符开头，而不以冒号后的反斜杠开头，则它将被解释为驱动器上具有指定字母的当前目录的相对路径。&amp;rdquo; &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; 当前的行为是永远不要合并这些形式。</target>
        </trans-unit>
        <trans-unit id="1a1fc027f89a30d75d09af18559914b65d210c7f" translate="yes" xml:space="preserve">
          <source>On Windows, if a filepath starts with a single slash, it is relative to the root of the current drive. In [1], this is (confusingly) referred to as an absolute path. The current behavior of &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; is to never combine these forms.</source>
          <target state="translated">在Windows上，如果文件路径以单个斜杠开头，则它相对于当前驱动器的根目录。在[1]中，这（被混淆地）称为绝对路径。 &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; 当前的行为是永远不要合并这些形式。</target>
        </trans-unit>
        <trans-unit id="c91c78ad4fae4d53474ef709fdcd0ed43c7ee0a9" translate="yes" xml:space="preserve">
          <source>On Windows, if a filepath starts with a single slash, it is relative to the root of the current drive. In [1], this is (confusingly) referred to as an absolute path. The current behavior of &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; is to never combine these forms.</source>
          <target state="translated">在Windows上，如果文件路径以单个斜杠开头，则它相对于当前驱动器的根目录。在[1]中，这（被混淆地）称为绝对路径。 &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; 当前的行为是永远不要合并这些形式。</target>
        </trans-unit>
        <trans-unit id="4d3e5aee2864678aaa60dea89f1461abcedaa812" translate="yes" xml:space="preserve">
          <source>On Windows, it behaves like the Win32 function &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363851.aspx&quot;&gt;CopyFile&lt;/a&gt;, which copies various kinds of metadata including file attributes and security resource properties.</source>
          <target state="translated">在Windows上，其行为类似于Win32函数&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363851.aspx&quot;&gt;CopyFile&lt;/a&gt;，该函数复制各种元数据，包括文件属性和安全资源属性。</target>
        </trans-unit>
        <trans-unit id="abd019f889227ae682d9d79f35737ff6a44be1e1" translate="yes" xml:space="preserve">
          <source>On Windows, the &lt;code&gt;&lt;a href=&quot;system-directory#v:writable&quot;&gt;writable&lt;/a&gt;&lt;/code&gt; permission corresponds to the &quot;read-only&quot; attribute. The &lt;code&gt;&lt;a href=&quot;system-directory#v:executable&quot;&gt;executable&lt;/a&gt;&lt;/code&gt; permission is set if the file extension is of an executable file type. The &lt;code&gt;&lt;a href=&quot;system-directory#v:readable&quot;&gt;readable&lt;/a&gt;&lt;/code&gt; permission is always set.</source>
          <target state="translated">在Windows上， &lt;code&gt;&lt;a href=&quot;system-directory#v:writable&quot;&gt;writable&lt;/a&gt;&lt;/code&gt; 权限对应于&amp;ldquo;只读&amp;rdquo;属性。该 &lt;code&gt;&lt;a href=&quot;system-directory#v:executable&quot;&gt;executable&lt;/a&gt;&lt;/code&gt; ，如果文件扩展名是一个可执行文件类型的权限设置。该 &lt;code&gt;&lt;a href=&quot;system-directory#v:readable&quot;&gt;readable&lt;/a&gt;&lt;/code&gt; 权限始终设置。</target>
        </trans-unit>
        <trans-unit id="a82573349a58df428e5cf8f04f5449302de59c8f" translate="yes" xml:space="preserve">
          <source>On Windows, the &lt;code&gt;^Z&lt;/code&gt; character is interpreted as an end-of-file character, so if you read a file containing this character the file will appear to end just before it. To avoid this, use &lt;code&gt;IOExts.openFileEx&lt;/code&gt; to open a file in binary (untranslated) mode or change an already opened file handle into binary mode using &lt;code&gt;IOExts.hSetBinaryMode&lt;/code&gt;. The &lt;code&gt;IOExts&lt;/code&gt; module is part of the &lt;code&gt;lang&lt;/code&gt; package.</source>
          <target state="translated">在Windows上， &lt;code&gt;^Z&lt;/code&gt; 字符被解释为文件结尾字符，因此，如果您读取包含该字符的文件，则该文件似乎会在文件之前结束。为避免这种情况，请使用 &lt;code&gt;IOExts.openFileEx&lt;/code&gt; 以二进制（未翻译）模式打开文件，或使用 &lt;code&gt;IOExts.hSetBinaryMode&lt;/code&gt; 将已打开的文件句柄更改为二进制模式。所述 &lt;code&gt;IOExts&lt;/code&gt; 模块是的一部分 &lt;code&gt;lang&lt;/code&gt; 包。</target>
        </trans-unit>
        <trans-unit id="f4e0faedb7eb77e9f9303b4aee6bff531c17eba6" translate="yes" xml:space="preserve">
          <source>On Windows, the function is implemented using &lt;code&gt;CreateSymbolicLink&lt;/code&gt; with &lt;code&gt;SYMBOLIC_LINK_FLAG_DIRECTORY&lt;/code&gt;. Since 1.3.3.0, the &lt;code&gt;SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE&lt;/code&gt; flag is also included if supported by the operating system. On POSIX, this is an alias for &lt;code&gt;&lt;a href=&quot;system-directory#v:createFileLink&quot;&gt;createFileLink&lt;/a&gt;&lt;/code&gt; and is therefore atomic.</source>
          <target state="translated">在Windows上，功能是通过实施 &lt;code&gt;CreateSymbolicLink&lt;/code&gt; 与 &lt;code&gt;SYMBOLIC_LINK_FLAG_DIRECTORY&lt;/code&gt; 。由于1.3.3.0，该 &lt;code&gt;SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE&lt;/code&gt; 如果操作系统支持的标志也被包括在内。在POSIX上，这是 &lt;code&gt;&lt;a href=&quot;system-directory#v:createFileLink&quot;&gt;createFileLink&lt;/a&gt;&lt;/code&gt; 的别名，因此是原子的。</target>
        </trans-unit>
        <trans-unit id="a5bae1c687cf11ec3ed5ad2f9f8ff005ae0b6dfc" translate="yes" xml:space="preserve">
          <source>On Windows, the function is implemented using &lt;code&gt;CreateSymbolicLink&lt;/code&gt;. Since 1.3.3.0, the &lt;code&gt;SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE&lt;/code&gt; flag is included if supported by the operating system. On POSIX, the function uses &lt;code&gt;symlink&lt;/code&gt; and is therefore atomic.</source>
          <target state="translated">在Windows上，该功能是使用 &lt;code&gt;CreateSymbolicLink&lt;/code&gt; 实现的。由于1.3.3.0，该 &lt;code&gt;SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE&lt;/code&gt; 如果操作系统支持的标志是包括在内。在POSIX上，该函数使用 &lt;code&gt;symlink&lt;/code&gt; ，因此是原子的。</target>
        </trans-unit>
        <trans-unit id="e855d866abccd89156106ea9ff5c5937f3c49ead" translate="yes" xml:space="preserve">
          <source>On Windows, the operation fails if &lt;em&gt;dir&lt;/em&gt; is a directory symbolic link.</source>
          <target state="translated">在Windows上，如果&lt;em&gt;dir&lt;/em&gt;是目录符号链接，则操作将失败。</target>
        </trans-unit>
        <trans-unit id="e44cd211b73577bb580283a31fe9e11ec9d0f8fb" translate="yes" xml:space="preserve">
          <source>On Windows, the path is &lt;code&gt;%APPDATA%/&lt;em&gt;&amp;lt;app&amp;gt;&lt;/em&gt;&lt;/code&gt; (e.g. &lt;code&gt;C:/Users/&lt;em&gt;&amp;lt;user&amp;gt;&lt;/em&gt;/AppData/Roaming/&lt;em&gt;&amp;lt;app&amp;gt;&lt;/em&gt;&lt;/code&gt;)</source>
          <target state="translated">在Windows上，路径为 &lt;code&gt;%APPDATA%/&lt;em&gt;&amp;lt;app&amp;gt;&lt;/em&gt;&lt;/code&gt; （例如 &lt;code&gt;C:/Users/&lt;em&gt;&amp;lt;user&amp;gt;&lt;/em&gt;/AppData/Roaming/&lt;em&gt;&amp;lt;app&amp;gt;&lt;/em&gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="f11f1f05f568d29a8830243c65984fa477970a3c" translate="yes" xml:space="preserve">
          <source>On Windows, the system is queried for a suitable path; a typical path might be &lt;code&gt;C:/Users/&lt;em&gt;&amp;lt;user&amp;gt;&lt;/em&gt;&lt;/code&gt;.</source>
          <target state="translated">在Windows上，系统会查询一条合适的路径。典型的路径可能是 &lt;code&gt;C:/Users/&lt;em&gt;&amp;lt;user&amp;gt;&lt;/em&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d3e77adec84060bc903e2e912e15d0de80cff520" translate="yes" xml:space="preserve">
          <source>On Windows, there&amp;rsquo;s a GNU ld/BFD bug whereby it emits bogus PE object files that have more than 0xffff relocations. When GHCi tries to load a package affected by this bug, you get an error message of the form</source>
          <target state="translated">在Windows上，存在一个GNU ld / BFD错误，它会发出伪造的PE对象文件，这些文件的重定位次数超过0xffff。当GHCi尝试加载受此错误影响的软件包时，您将收到以下形式的错误消息：</target>
        </trans-unit>
        <trans-unit id="85e22f23309dbf90a94129f8db64b297cbb2f916" translate="yes" xml:space="preserve">
          <source>On Windows, this &lt;em&gt;only returns the first ocurrence&lt;/em&gt;, if any. Its behavior is therefore equivalent to &lt;code&gt;&lt;a href=&quot;system-directory#v:findExecutable&quot;&gt;findExecutable&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">在Windows上，这&lt;em&gt;仅会返回第一次出现&lt;/em&gt;（如果有）。因此，其行为等同于 &lt;code&gt;&lt;a href=&quot;system-directory#v:findExecutable&quot;&gt;findExecutable&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="da36f078a8e10da6023ea1ab8024e74f1183e975" translate="yes" xml:space="preserve">
          <source>On Windows, this checks for &lt;code&gt;FILE_ATTRIBUTE_REPARSE_POINT&lt;/code&gt;. In addition to symbolic links, the function also returns true on junction points. On POSIX systems, this checks for &lt;code&gt;S_IFLNK&lt;/code&gt;.</source>
          <target state="translated">在Windows上，这将检查 &lt;code&gt;FILE_ATTRIBUTE_REPARSE_POINT&lt;/code&gt; 。除符号链接外，该函数还在结点上返回true。在POSIX系统上，这将检查 &lt;code&gt;S_IFLNK&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52cfb4329fc32c0d833a61183ba7721cc4129515" translate="yes" xml:space="preserve">
          <source>On Windows, this copies only the read-only attribute.</source>
          <target state="translated">在Windows上,这将只复制只读属性。</target>
        </trans-unit>
        <trans-unit id="ed105f70828ccfdebad6090636cb8dc84666d5c9" translate="yes" xml:space="preserve">
          <source>On Windows, this encoding *should not* be used if possible because the use of code pages is deprecated: Strings should be retrieved via the &quot;wide&quot; W-family of UTF-16 APIs instead</source>
          <target state="translated">在Windows上,如果可能的话,不应该使用这种编码,因为代码页的使用已经被废弃。字符串应该通过UTF-16 API的 &quot;宽 &quot;W系列来检索。</target>
        </trans-unit>
        <trans-unit id="ac2cd505b24931f86258fdc4d09b1d6d6f31c478" translate="yes" xml:space="preserve">
          <source>On Windows, this is an alias for &lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectory&quot;&gt;removeDirectory&lt;/a&gt;&lt;/code&gt;. On POSIX systems, this is an alias for &lt;code&gt;&lt;a href=&quot;system-directory#v:removeFile&quot;&gt;removeFile&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">在Windows上，这是 &lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectory&quot;&gt;removeDirectory&lt;/a&gt;&lt;/code&gt; 的别名。在POSIX系统上，这是 &lt;code&gt;&lt;a href=&quot;system-directory#v:removeFile&quot;&gt;removeFile&lt;/a&gt;&lt;/code&gt; 的别名。</target>
        </trans-unit>
        <trans-unit id="721f4605ef1d86ca2dde42c37a045d3e3a154879" translate="yes" xml:space="preserve">
          <source>On Windows, this is only capable of changing the &lt;code&gt;&lt;a href=&quot;system-directory#v:writable&quot;&gt;writable&lt;/a&gt;&lt;/code&gt; permission, which corresponds to the &quot;read-only&quot; attribute. Changing the other permissions has no effect.</source>
          <target state="translated">在Windows上，这只能更改 &lt;code&gt;&lt;a href=&quot;system-directory#v:writable&quot;&gt;writable&lt;/a&gt;&lt;/code&gt; 权限，该权限对应于&amp;ldquo;只读&amp;rdquo;属性。更改其他权限无效。</target>
        </trans-unit>
        <trans-unit id="5b5fedbf70c277d93381f0f283d73b921d80d6e3" translate="yes" xml:space="preserve">
          <source>On Windows, you can access supported code pages with the prefix &lt;code&gt;CP&lt;/code&gt;; for example, &lt;code&gt;&quot;CP1250&quot;&lt;/code&gt;.</source>
          <target state="translated">在Windows上，您可以使用前缀 &lt;code&gt;CP&lt;/code&gt; 来访问支持的代码页；例如 &lt;code&gt;&quot;CP1250&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fcbabe85dcb1f0f6be8be76732501ee39274fba1" translate="yes" xml:space="preserve">
          <source>On a 64-bit platform it is not always possible to acquire the top 64 bits of the result. Therefore, a recommended implementation is to take the absolute value of both operands, and return 0 iff bits[63:31] of them are zero, since that means that their magnitudes fit within 31 bits, so the magnitude of the product must fit into 62 bits.</source>
          <target state="translated">在64位平台上,并不总是能够获得结果的前64位。因此,推荐的实现方式是取两个操作数的绝对值,如果其中的bit[63:31]为0,则返回0,因为这意味着它们的大小适合在31位之内,所以乘积的大小必须适合在62位之内。</target>
        </trans-unit>
        <trans-unit id="ca55a4a165c97ee87021e748a5999af653eb1351" translate="yes" xml:space="preserve">
          <source>On a Core2 Duo 2.20GHz on a 32-bit Linux, the above code takes 1ms to generate the 22'500 bytes long lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. Looking again at the definitions above, we see that we took care to avoid intermediate data structures, as otherwise we would sacrifice performance. For example, the following (arguably simpler) definition of &lt;code&gt;renderRow&lt;/code&gt; is about 20% slower.</source>
          <target state="translated">在32位Linux上的Core2 Duo 2.20GHz上，上面的代码花费1ms来生成22'500字节长的惰性 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 。再次看一下上面的定义，我们发现我们要小心避免中间数据结构，否则会牺牲性能。例如，以下（可能更简单）的 &lt;code&gt;renderRow&lt;/code&gt; 定义要慢大约20％。</target>
        </trans-unit>
        <trans-unit id="c8a5a9af1eb8c360fd6ffff320585505f281c939" translate="yes" xml:space="preserve">
          <source>On both reading and writing, the platform's native newline conversion is performed.</source>
          <target state="translated">在阅读和写作上,平台的原生新行转换都会进行。</target>
        </trans-unit>
        <trans-unit id="584fe990b6c406c5750b476c119e0a10d54a8c7d" translate="yes" xml:space="preserve">
          <source>On most UNIX platforms it is also possible to build executables that can be &lt;code&gt;dlopen&lt;/code&gt;&amp;lsquo;d like shared libraries using the &lt;a href=&quot;phases#ghc-flag--pie&quot;&gt;&lt;code&gt;-pie&lt;/code&gt;&lt;/a&gt; flag during linking.</source>
          <target state="translated">在大多数UNIX平台上，也可以在链接过程中使用&lt;a href=&quot;phases#ghc-flag--pie&quot;&gt; &lt;code&gt;-pie&lt;/code&gt; &lt;/a&gt;标志来构建类似于共享库的 &lt;code&gt;dlopen&lt;/code&gt; 可执行文件。</target>
        </trans-unit>
        <trans-unit id="43e3fc1e854dceae3b55c658433a092145204e78" translate="yes" xml:space="preserve">
          <source>On most UNIX platforms it is also possible to build executables that can be &lt;code&gt;dlopen&lt;/code&gt;&amp;rsquo;d like shared libraries using the &lt;a href=&quot;phases#ghc-flag--pie&quot;&gt;&lt;code&gt;-pie&lt;/code&gt;&lt;/a&gt; flag during linking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3ecb7f7003c5f8586cd3273747fd5240fdd03f" translate="yes" xml:space="preserve">
          <source>On non-Windows platforms, the behavior is equivalent to &lt;code&gt;&lt;a href=&quot;system-directory#v:findExecutablesInDirectories&quot;&gt;findExecutablesInDirectories&lt;/a&gt;&lt;/code&gt; using the search directories from the &lt;code&gt;PATH&lt;/code&gt; environment variable. Details can be found in the documentation of &lt;code&gt;&lt;a href=&quot;system-directory#v:findExecutablesInDirectories&quot;&gt;findExecutablesInDirectories&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">在非Windows平台上，此行为等效于使用 &lt;code&gt;PATH&lt;/code&gt; 环境变量中的搜索目录的 &lt;code&gt;&lt;a href=&quot;system-directory#v:findExecutablesInDirectories&quot;&gt;findExecutablesInDirectories&lt;/a&gt;&lt;/code&gt; 。可以在 &lt;code&gt;&lt;a href=&quot;system-directory#v:findExecutablesInDirectories&quot;&gt;findExecutablesInDirectories&lt;/a&gt;&lt;/code&gt; 文档中找到详细信息。</target>
        </trans-unit>
        <trans-unit id="7fb6c020bc093fa27959e91b43bb2cec678d112f" translate="yes" xml:space="preserve">
          <source>On non-Windows platforms, the behavior is equivalent to &lt;code&gt;&lt;a href=&quot;system-directory#v:findFileWith&quot;&gt;findFileWith&lt;/a&gt;&lt;/code&gt; using the search directories from the &lt;code&gt;PATH&lt;/code&gt; environment variable and testing each file for executable permissions. Details can be found in the documentation of &lt;code&gt;&lt;a href=&quot;system-directory#v:findFileWith&quot;&gt;findFileWith&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">在非Windows平台上，此行为等效于使用 &lt;code&gt;PATH&lt;/code&gt; 环境变量中的搜索目录并测试每个文件的可执行权限，从而实现 &lt;code&gt;&lt;a href=&quot;system-directory#v:findFileWith&quot;&gt;findFileWith&lt;/a&gt;&lt;/code&gt; 。可以在 &lt;code&gt;&lt;a href=&quot;system-directory#v:findFileWith&quot;&gt;findFileWith&lt;/a&gt;&lt;/code&gt; 的文档中找到详细信息。</target>
        </trans-unit>
        <trans-unit id="8188af56fd6edcf23beb2e9dcf2382a4e4902ffd" translate="yes" xml:space="preserve">
          <source>On program termination, the standard &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;s &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:stderr&quot;&gt;stderr&lt;/a&gt;&lt;/code&gt; are flushed automatically; any other buffered &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;s need to be flushed manually, otherwise the buffered data will be discarded.</source>
          <target state="translated">程序终止时，将自动刷新标准 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:stderr&quot;&gt;stderr&lt;/a&gt;&lt;/code&gt; ；任何其他缓冲的 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 需要手动刷新，否则缓冲的数据将被丢弃。</target>
        </trans-unit>
        <trans-unit id="b458bc64e60c4d81db682d145a7fc32242bb3944" translate="yes" xml:space="preserve">
          <source>On some hosts (e.g. SuSe and Ubuntu Linux) &lt;code&gt;RTLD_NEXT&lt;/code&gt; (and &lt;code&gt;RTLD_DEFAULT&lt;/code&gt;) are not visible without setting the macro &lt;code&gt;_GNU_SOURCE&lt;/code&gt;. Since we don't want to define this macro, you can use the function &lt;code&gt;&lt;a href=&quot;system-posix#v:haveRtldNext&quot;&gt;haveRtldNext&lt;/a&gt;&lt;/code&gt; to check wether the flag &lt;code&gt;&lt;a href=&quot;system-posix#v:Next&quot;&gt;Next&lt;/a&gt;&lt;/code&gt; is available. Ideally, this will be optimized by the compiler so that it should be as efficient as an &lt;code&gt;#ifdef&lt;/code&gt;.</source>
          <target state="translated">在某些主机（例如SuSe和Ubuntu Linux）上， &lt;code&gt;RTLD_DEFAULT&lt;/code&gt; 未设置宏 &lt;code&gt;_GNU_SOURCE&lt;/code&gt; ,则 &lt;code&gt;RTLD_NEXT&lt;/code&gt; （和RTLD_DEFAULT）不可见。由于我们不想定义此宏，因此可以使用功能 &lt;code&gt;&lt;a href=&quot;system-posix#v:haveRtldNext&quot;&gt;haveRtldNext&lt;/a&gt;&lt;/code&gt; 来检查标志 &lt;code&gt;&lt;a href=&quot;system-posix#v:Next&quot;&gt;Next&lt;/a&gt;&lt;/code&gt; 是否可用。理想情况下，将由编译器对其进行优化，以使其与 &lt;code&gt;#ifdef&lt;/code&gt; 一样高效。</target>
        </trans-unit>
        <trans-unit id="fe7652641a4b092db3389c67281410748d6204c1" translate="yes" xml:space="preserve">
          <source>On some hosts (e.g. SuSe and Ubuntu Linux) &lt;code&gt;RTLD_NEXT&lt;/code&gt; (and &lt;code&gt;RTLD_DEFAULT&lt;/code&gt;) are not visible without setting the macro &lt;code&gt;_GNU_SOURCE&lt;/code&gt;. Since we don't want to define this macro, you can use the function &lt;code&gt;&lt;a href=&quot;system-posix-bytestring#v:haveRtldNext&quot;&gt;haveRtldNext&lt;/a&gt;&lt;/code&gt; to check wether the flag &lt;code&gt;&lt;a href=&quot;system-posix-bytestring#v:Next&quot;&gt;Next&lt;/a&gt;&lt;/code&gt; is available. Ideally, this will be optimized by the compiler so that it should be as efficient as an &lt;code&gt;#ifdef&lt;/code&gt;.</source>
          <target state="translated">在某些主机（例如SuSe和Ubuntu Linux）上， &lt;code&gt;RTLD_DEFAULT&lt;/code&gt; 未设置宏 &lt;code&gt;_GNU_SOURCE&lt;/code&gt; ,则 &lt;code&gt;RTLD_NEXT&lt;/code&gt; （和RTLD_DEFAULT）不可见。由于我们不想定义此宏，因此可以使用功能 &lt;code&gt;&lt;a href=&quot;system-posix-bytestring#v:haveRtldNext&quot;&gt;haveRtldNext&lt;/a&gt;&lt;/code&gt; 来检查标志 &lt;code&gt;&lt;a href=&quot;system-posix-bytestring#v:Next&quot;&gt;Next&lt;/a&gt;&lt;/code&gt; 是否可用。理想情况下，将由编译器对其进行优化，以使其与 &lt;code&gt;#ifdef&lt;/code&gt; 一样高效。</target>
        </trans-unit>
        <trans-unit id="c440936ef0fa8d5c9fb4a5252385fb1aecb976b4" translate="yes" xml:space="preserve">
          <source>On some hosts (e.g. SuSe and Ubuntu Linux) &lt;code&gt;RTLD_NEXT&lt;/code&gt; (and &lt;code&gt;RTLD_DEFAULT&lt;/code&gt;) are not visible without setting the macro &lt;code&gt;_GNU_SOURCE&lt;/code&gt;. Since we don't want to define this macro, you can use the function &lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker-prim#v:haveRtldNext&quot;&gt;haveRtldNext&lt;/a&gt;&lt;/code&gt; to check wether the flag &lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker-prim#v:Next&quot;&gt;Next&lt;/a&gt;&lt;/code&gt; is available. Ideally, this will be optimized by the compiler so that it should be as efficient as an &lt;code&gt;#ifdef&lt;/code&gt;.</source>
          <target state="translated">在某些主机（例如SuSe和Ubuntu Linux）上， &lt;code&gt;RTLD_DEFAULT&lt;/code&gt; 未设置宏 &lt;code&gt;_GNU_SOURCE&lt;/code&gt; ,则 &lt;code&gt;RTLD_NEXT&lt;/code&gt; （和RTLD_DEFAULT）不可见。由于我们不想定义此宏，因此可以使用功能 &lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker-prim#v:haveRtldNext&quot;&gt;haveRtldNext&lt;/a&gt;&lt;/code&gt; 来检查标志 &lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker-prim#v:Next&quot;&gt;Next&lt;/a&gt;&lt;/code&gt; 是否可用。理想情况下，将由编译器对其进行优化，以使其与 &lt;code&gt;#ifdef&lt;/code&gt; 一样高效。</target>
        </trans-unit>
        <trans-unit id="15cb1a56421815ce54b1980f31648be5dff8f144" translate="yes" xml:space="preserve">
          <source>On some platforms GHC supports building Haskell code into shared libraries. Shared libraries are also sometimes known as dynamic libraries, in particular on Windows they are referred to as dynamic link libraries (DLLs).</source>
          <target state="translated">在某些平台上,GHC支持将Haskell代码构建到共享库中。共享库有时也被称为动态库,特别是在Windows上,它们被称为动态链接库(DLLs)。</target>
        </trans-unit>
        <trans-unit id="0d36502b7263f0b4485c96cc36bc155187135ea3" translate="yes" xml:space="preserve">
          <source>On some platforms where PIC is always the case, e.g. x86_64 MacOS X, this flag is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb8ce4db21a6bb265eeec2e7b65240ba8199bdd" translate="yes" xml:space="preserve">
          <source>On systems with &lt;code&gt;.dll&lt;/code&gt;-style shared libraries, the actual library loaded will be &lt;code&gt;lib.dll&lt;/code&gt;, &lt;code&gt;liblib.dll&lt;/code&gt;. GHCi also has full support for import libraries, either Microsoft style &lt;code&gt;.lib&lt;/code&gt;, or GNU GCC style &lt;code&gt;.a&lt;/code&gt; and &lt;code&gt;.dll.a&lt;/code&gt; libraries. If you have an import library it is advisable to always specify the import libary instead of the &lt;code&gt;.dll&lt;/code&gt;. e.g. use &lt;code&gt;-lgcc` instead of
``-llibgcc_s_seh-1&lt;/code&gt;. Again, GHCi will signal an error if it can&amp;rsquo;t find the library.</source>
          <target state="translated">在具有 &lt;code&gt;.dll&lt;/code&gt; 样式的共享库的系统上，实际加载的库将是 &lt;code&gt;lib.dll&lt;/code&gt; ， &lt;code&gt;liblib.dll&lt;/code&gt; 。GHCi还完全支持导入库，例如Microsoft样式 &lt;code&gt;.lib&lt;/code&gt; 或GNU GCC样式 &lt;code&gt;.a&lt;/code&gt; 和 &lt;code&gt;.dll.a&lt;/code&gt; 库。如果您有导入库，建议始终指定导入库而不是 &lt;code&gt;.dll&lt;/code&gt; 。例如使用 &lt;code&gt;-lgcc` instead of ``-llibgcc_s_seh-1&lt;/code&gt; 。同样，如果GHCi找不到该库，则会发出错误信号。</target>
        </trans-unit>
        <trans-unit id="79878901a3ff26ad9bef6e39ce6be8f5fbd886f1" translate="yes" xml:space="preserve">
          <source>On systems with &lt;code&gt;.so&lt;/code&gt;-style shared libraries, the actual library loaded will the &lt;code&gt;liblib.so&lt;/code&gt;. GHCi searches the following places for libraries, in this order:</source>
          <target state="translated">在具有 &lt;code&gt;.so&lt;/code&gt; - style共享库的系统上，实际加载的库将为 &lt;code&gt;liblib.so&lt;/code&gt; 。GHCi按以下顺序搜索以下位置的图书馆：</target>
        </trans-unit>
        <trans-unit id="0fdf7f76740d047b5e3edd87cc87a6a11d2158f4" translate="yes" xml:space="preserve">
          <source>On the World-Wide Web, there are several URLs of likely interest:</source>
          <target state="translated">在万维网上,有几个可能感兴趣的网址。</target>
        </trans-unit>
        <trans-unit id="d05a6ef32800b6777916856b927d4f8bd9b77ba3" translate="yes" xml:space="preserve">
          <source>On the left or right (see &lt;code&gt;f4&lt;/code&gt;, for example) of a function arrow</source>
          <target state="translated">在功能箭头的左侧或右侧（例如，参见 &lt;code&gt;f4&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="4f305cc5e3cb7028da9ff3cbac52003a8cb62b20" translate="yes" xml:space="preserve">
          <source>On the other hand, a derived &lt;code&gt;Functor&lt;/code&gt; instances for the &lt;code&gt;CovFun&lt;/code&gt;s are within the realm of possibility:</source>
          <target state="translated">在另一方面，派生 &lt;code&gt;Functor&lt;/code&gt; 的实例 &lt;code&gt;CovFun&lt;/code&gt; s为的可能做到的：</target>
        </trans-unit>
        <trans-unit id="a0c7bdbeeec14950364d5eba585fee5f46490af7" translate="yes" xml:space="preserve">
          <source>On the other hand, function &lt;code&gt;g&lt;/code&gt; works fine, because matching against &lt;code&gt;P2&lt;/code&gt; (which wraps the GADT &lt;code&gt;S&lt;/code&gt;) provides the local equality &lt;code&gt;(a~Bool)&lt;/code&gt;. If you were to give an explicit pattern signature &lt;code&gt;P2 :: Bool -&amp;gt; S Bool&lt;/code&gt;, then &lt;code&gt;P2&lt;/code&gt; would become less polymorphic, and would behave exactly like &lt;code&gt;P1&lt;/code&gt; so that &lt;code&gt;g&lt;/code&gt; would then be rejected.</source>
          <target state="translated">另一方面，函数 &lt;code&gt;g&lt;/code&gt; 可以正常工作，因为与 &lt;code&gt;P2&lt;/code&gt; 匹配（包装了GADT &lt;code&gt;S&lt;/code&gt; ）提供了局部等式 &lt;code&gt;(a~Bool)&lt;/code&gt; a〜Bool ）。如果要给显式模式签名 &lt;code&gt;P2 :: Bool -&amp;gt; S Bool&lt;/code&gt; ，则 &lt;code&gt;P2&lt;/code&gt; 的多态性会降低，并且表现得与 &lt;code&gt;P1&lt;/code&gt; 完全一样，因此 &lt;code&gt;g&lt;/code&gt; 将被拒绝。</target>
        </trans-unit>
        <trans-unit id="1c549059d60fda45dc8528cd8c34dd2387420acc" translate="yes" xml:space="preserve">
          <source>On the other hand, type families are exempt from this rule:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d363a29721400db631067ea9cb7bd7ce4d4eea" translate="yes" xml:space="preserve">
          <source>On this score, GHC usually does pretty well, especially if you &amp;ldquo;allow&amp;rdquo; it to be off by one or two. In the case of an instance or class declaration, the line number may only point you to the declaration, not to a specific method.</source>
          <target state="translated">在这个分数上，GHC通常表现不错，尤其是如果您&amp;ldquo;允许&amp;rdquo;它减少一到两个。在实例或类声明的情况下，行号可能仅指向您声明，而不指向特定方法。</target>
        </trans-unit>
        <trans-unit id="5ea755dd39d492e55b9e34b0a111d2cfb8276cb3" translate="yes" xml:space="preserve">
          <source>On transcoding errors, an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; exception is thrown. You can use the API in &lt;a href=&quot;data-text-encoding&quot;&gt;Data.Text.Encoding&lt;/a&gt; if you need more control over error handling or transcoding.</source>
          <target state="translated">发生转码错误时，将 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 异常。如果您需要对错误处理或代码转换的更多控制，则可以在&lt;a href=&quot;data-text-encoding&quot;&gt;Data.Text.Encoding中&lt;/a&gt;使用API 。</target>
        </trans-unit>
        <trans-unit id="4b575b6399010d5b474f9a9e19ba9246edb70b03" translate="yes" xml:space="preserve">
          <source>On transcoding errors, an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; exception is thrown. You can use the API in &lt;a href=&quot;data-text-encoding&quot;&gt;Data.Text.Encoding&lt;/a&gt; if you need more control over error handling or transcoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b1aac7c401101a39c4f55a428919092262060c" translate="yes" xml:space="preserve">
          <source>OnDecodeError</source>
          <target state="translated">OnDecodeError</target>
        </trans-unit>
        <trans-unit id="6f666943e43935b64269246162dcf5a1465ea5ff" translate="yes" xml:space="preserve">
          <source>OnEncodeError</source>
          <target state="translated">OnEncodeError</target>
        </trans-unit>
        <trans-unit id="1ec9c77019b9c571c284d11d62850d0be7f7d725" translate="yes" xml:space="preserve">
          <source>OnError</source>
          <target state="translated">OnError</target>
        </trans-unit>
        <trans-unit id="ed0ab25823975d83734fae1b6bd16e05190469eb" translate="yes" xml:space="preserve">
          <source>Once EOF is encountered, the Handle is closed.</source>
          <target state="translated">一旦遇到EOF,则关闭Handle。</target>
        </trans-unit>
        <trans-unit id="60e264a17495d5948da3fde8b611b62bef7e4a18" translate="yes" xml:space="preserve">
          <source>Once a semi-closed handle becomes closed, the contents of the associated list becomes fixed. The contents of this final list is only partially specified: it will contain at least all the items of the stream that were evaluated prior to the handle becoming closed.</source>
          <target state="translated">一旦一个半封闭的句柄被关闭,相关列表的内容就会固定下来。这个最终列表的内容只是部分指定:它将至少包含在句柄关闭之前被评估的流的所有项目。</target>
        </trans-unit>
        <trans-unit id="6cef81242bdb3dd15794848f47ffe89e35f13fea" translate="yes" xml:space="preserve">
          <source>Once again, the profiling facilities (&lt;a href=&quot;profiling#profiling&quot;&gt;Profiling&lt;/a&gt;) are the basic tool for demystifying the space behaviour of your program.</source>
          <target state="translated">再一次，分析工具（&lt;a href=&quot;profiling#profiling&quot;&gt;Profiling&lt;/a&gt;）是使程序的空间行为神秘化的基本工具。</target>
        </trans-unit>
        <trans-unit id="315e28f14a5749001346c76c600fc06cf79ac069" translate="yes" xml:space="preserve">
          <source>Once the user declares type family to be injective GHC must verify that this declaration is correct, i.e., that type family equations don&amp;rsquo;t violate the injectivity annotation. A general idea is that if at least one equation (bullets (1), (2) and (3) below) or a pair of equations (bullets (4) and (5) below) violates the injectivity annotation then a type family is not injective in a way the user claims and an error is reported. In the bullets below &lt;em&gt;RHS&lt;/em&gt; refers to the right-hand side of the type family equation being checked for injectivity. &lt;em&gt;LHS&lt;/em&gt; refers to the arguments of that type family equation. Below are the rules followed when checking injectivity of a type family:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc00d55d5cade6b9732f3047fd68f9150e53462" translate="yes" xml:space="preserve">
          <source>Once the user declares type family to be injective GHC must verify that this declaration is correct, ie. type family equations don&amp;rsquo;t violate the injectivity annotation. A general idea is that if at least one equation (bullets (1), (2) and (3) below) or a pair of equations (bullets (4) and (5) below) violates the injectivity annotation then a type family is not injective in a way user claims and an error is reported. In the bullets below &lt;em&gt;RHS&lt;/em&gt; refers to the right-hand side of the type family equation being checked for injectivity. &lt;em&gt;LHS&lt;/em&gt; refers to the arguments of that type family equation. Below are the rules followed when checking injectivity of a type family:</source>
          <target state="translated">一旦用户宣布类型族为可注射型，GHC必须确认该声明正确无误。类型族方程不违反注入性注释。一般的想法是，如果至少一个方程式（下面的项目符号（1），（2）和（3））或一对方程式（下面的项目符号（4）和（5））违反了内注性注释，则类型族是不能以用户要求的方式进行内射，并报告错误。在下面的项目符号中，&lt;em&gt;RHS&lt;/em&gt;指的是要检查内射性的类型族方程的右侧。&lt;em&gt;LHS&lt;/em&gt;引用该类型族方程的参数。以下是检查类型族的插入性时遵循的规则：</target>
        </trans-unit>
        <trans-unit id="c50b67bca5fb4c6603a23fdfb82c3d73e171c099" translate="yes" xml:space="preserve">
          <source>Once you have a library of GHCi macros, you may want to source them from separate files, or you may want to source your &lt;code&gt;.ghci&lt;/code&gt; file into your running GHCi session while debugging it</source>
          <target state="translated">拥有GHCi宏库后，您可能希望从单独的文件中获取它们，或者在调试时将 &lt;code&gt;.ghci&lt;/code&gt; 文件源到正在运行的GHCi会话中</target>
        </trans-unit>
        <trans-unit id="6e7e950f611ffeefb5dc8da946a455d9ce68ff45" translate="yes" xml:space="preserve">
          <source>Once you know the producer or the type of the heap in the drag or void states, the next step is usually to find the retainer(s):</source>
          <target state="translated">一旦你知道了生产者或堆在拖动或空闲状态下的类型,下一步通常是找到保持器。</target>
        </trans-unit>
        <trans-unit id="68e926d9c748359a8152a413a626288e329b3079" translate="yes" xml:space="preserve">
          <source>One can then use functions from &lt;code&gt;GHC.Stack&lt;/code&gt; to inspect or pretty print (as is done in &lt;code&gt;f&lt;/code&gt; below) the call stack.</source>
          <target state="translated">然后可以使用 &lt;code&gt;GHC.Stack&lt;/code&gt; 中的函数来检查或漂亮地打印（如下面 &lt;code&gt;f&lt;/code&gt; 所示）调用堆栈。</target>
        </trans-unit>
        <trans-unit id="4023758f19beece83257d349668ba73b4a5f55d3" translate="yes" xml:space="preserve">
          <source>One can think of this instance being implemented with the same code as the &lt;code&gt;Num Int&lt;/code&gt; instance, but with &lt;code&gt;Dollars&lt;/code&gt; and &lt;code&gt;getDollars&lt;/code&gt; added wherever necessary in order to make it typecheck. (In practice, GHC uses a somewhat different approach to code generation. See the &lt;a href=&quot;#precise-gnd-specification&quot;&gt;A more precise specification&lt;/a&gt; section below for more details.)</source>
          <target state="translated">可以想到该实例是用与 &lt;code&gt;Num Int&lt;/code&gt; 实例相同的代码实现的，但是在必要时添加了 &lt;code&gt;Dollars&lt;/code&gt; 和 &lt;code&gt;getDollars&lt;/code&gt; 以便进行类型检查。（实际上，GHC使用了一些不同的方法来生成代码。有关更多详细信息，请参见下面的&lt;a href=&quot;#precise-gnd-specification&quot;&gt;&amp;ldquo;更精确的规范&amp;rdquo;&lt;/a&gt;部分。）</target>
        </trans-unit>
        <trans-unit id="9743b7636df84ead47845f240cbbd477f19f70e0" translate="yes" xml:space="preserve">
          <source>One can use &lt;code&gt;&lt;a href=&quot;data-maybe#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; to avoid pattern matching when combined with a function that (safely) works on lists:</source>
          <target state="translated">当与（可以安全地）对列表使用的函数结合使用时，可以使用 &lt;code&gt;&lt;a href=&quot;data-maybe#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; 避免模​​式匹配：</target>
        </trans-unit>
        <trans-unit id="4ec55bf61d8ab5d04d04ebcb2ee2159a392ea14e" translate="yes" xml:space="preserve">
          <source>One can use &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; to avoid pattern matching when combined with a function that (safely) works on lists:</source>
          <target state="translated">当与（可以安全地）对列表使用的函数结合使用时，可以使用 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; 避免模​​式匹配：</target>
        </trans-unit>
        <trans-unit id="c3d9ffa5463e1c26285c5e33a8e8a9504fd92ef8" translate="yes" xml:space="preserve">
          <source>One can write data types with no constructors using the &lt;a href=&quot;#extension-EmptyDataDecls&quot;&gt;&lt;code&gt;-XEmptyDataDecls&lt;/code&gt;&lt;/a&gt; flag (see &lt;a href=&quot;#nullary-types&quot;&gt;Data types with no constructors&lt;/a&gt;), which is on by default in Haskell 2010. What is not on by default is the ability to derive type class instances for these types. This ability is enabled through use of the &lt;a href=&quot;#ghc-flag--XEmptyDataDeriving&quot;&gt;&lt;code&gt;-XEmptyDataDeriving&lt;/code&gt;&lt;/a&gt; flag. For instance, this lets one write:</source>
          <target state="translated">一个可以使用的没有构造函数写数据类型&lt;a href=&quot;#extension-EmptyDataDecls&quot;&gt; &lt;code&gt;-XEmptyDataDecls&lt;/code&gt; &lt;/a&gt;标志（请参见&lt;a href=&quot;#nullary-types&quot;&gt;数据类型与没有构造函数&lt;/a&gt;），这是由2010年的Haskell默认的不是在默认情况下是能够对这些类型的派生类型的类的实例。通过使用&lt;a href=&quot;#ghc-flag--XEmptyDataDeriving&quot;&gt; &lt;code&gt;-XEmptyDataDeriving&lt;/code&gt; &lt;/a&gt;标志可以启用此功能。例如，这让一个人写道：</target>
        </trans-unit>
        <trans-unit id="7322eb1a388043bfc4b465ffeaf47b177b19e690" translate="yes" xml:space="preserve">
          <source>One can write data types with no constructors using the &lt;a href=&quot;#extension-EmptyDataDecls&quot;&gt;&lt;code&gt;EmptyDataDecls&lt;/code&gt;&lt;/a&gt; flag (see &lt;a href=&quot;#nullary-types&quot;&gt;Data types with no constructors&lt;/a&gt;), which is on by default in Haskell 2010. What is not on by default is the ability to derive type class instances for these types. This ability is enabled through use of the &lt;a href=&quot;#extension-EmptyDataDeriving&quot;&gt;&lt;code&gt;EmptyDataDeriving&lt;/code&gt;&lt;/a&gt; flag. For instance, this lets one write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d496c6b9647ae6150efda24096b39fcf9eb1a86" translate="yes" xml:space="preserve">
          <source>One consequence of the way that GHCi follows dependencies to find modules to load is that every module must have a source file. The only exception to the rule is modules that come from a package, including the &lt;code&gt;Prelude&lt;/code&gt; and standard libraries such as &lt;code&gt;IO&lt;/code&gt; and &lt;code&gt;Complex&lt;/code&gt;. If you attempt to load a module for which GHCi can&amp;rsquo;t find a source file, even if there are object and interface files for the module, you&amp;rsquo;ll get an error message.</source>
          <target state="translated">GHCi遵循依赖关系以查找要加载的模块的方式的一个后果是，每个模块都必须具有一个源文件。该规则的唯一例外是来自软件包的模块，包括 &lt;code&gt;Prelude&lt;/code&gt; 和 &lt;code&gt;IO&lt;/code&gt; 和 &lt;code&gt;Complex&lt;/code&gt; 等标准库。如果尝试加载GHCi找不到源文件的模块，即使该模块有目标文件和接口文件，也会收到错误消息。</target>
        </trans-unit>
        <trans-unit id="5483c77e4f829cc17d6601c4ac4404068ce5302b" translate="yes" xml:space="preserve">
          <source>One could either pick the &lt;code&gt;DeriveAnyClass&lt;/code&gt; approach to deriving &lt;code&gt;C&lt;/code&gt; or the &lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt; approach to deriving &lt;code&gt;C&lt;/code&gt;, both of which would be equally as valid. GHC defaults to favoring &lt;code&gt;DeriveAnyClass&lt;/code&gt; in such a dispute, but this is not a satisfying solution, since that leaves users unable to use both language extensions in a single module.</source>
          <target state="translated">可以选择 &lt;code&gt;DeriveAnyClass&lt;/code&gt; 方法派生 &lt;code&gt;C&lt;/code&gt; 或 &lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt; 方法派生 &lt;code&gt;C&lt;/code&gt; ，这两种方法都同样有效。GHC 在这种争议中默认不支持 &lt;code&gt;DeriveAnyClass&lt;/code&gt; ，但这不是令人满意的解决方案，因为这使用户无法在单个模块中使用两种语言扩展。</target>
        </trans-unit>
        <trans-unit id="07da619a058ee72f68e35cbedda9fed2d2008eeb" translate="yes" xml:space="preserve">
          <source>One day in &lt;code&gt;&lt;a href=&quot;data-time-clock#t:NominalDiffTime&quot;&gt;NominalDiffTime&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;&lt;a href=&quot;data-time-clock#t:NominalDiffTime&quot;&gt;NominalDiffTime&lt;/a&gt;&lt;/code&gt; 中的一天。</target>
        </trans-unit>
        <trans-unit id="3d64ec6630f50a5fa3cc17dae6e273e1017ecb35" translate="yes" xml:space="preserve">
          <source>One equation of a type family instance or closed type family. The arguments are the left-hand-side type and the right-hand-side result.</source>
          <target state="translated">一个类型族实例或封闭类型族的一个方程。参数是左手边的类型和右手边的结果。</target>
        </trans-unit>
        <trans-unit id="8ad7e9507f922f5c3971e0839b353cb5b01d4c7f" translate="yes" xml:space="preserve">
          <source>One final note: the &lt;code&gt;aaaa&lt;/code&gt;&lt;code&gt;bbbb&lt;/code&gt; example may not work too well on GHC (see Scheduling, above), due to the locking on a &lt;code&gt;&lt;a href=&quot;system-io#v:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. Only one thread may hold the lock on a &lt;code&gt;&lt;a href=&quot;system-io#v:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; at any one time, so if a reschedule happens while a thread is holding the lock, the other thread won't be able to run. The upshot is that the switch from &lt;code&gt;aaaa&lt;/code&gt; to &lt;code&gt;bbbbb&lt;/code&gt; happens infrequently. It can be improved by lowering the reschedule tick period. We also have a patch that causes a reschedule whenever a thread waiting on a lock is woken up, but haven't found it to be useful for anything other than this example :-)</source>
          <target state="translated">最后一点： &lt;code&gt;aaaa&lt;/code&gt; &lt;code&gt;bbbb&lt;/code&gt; 示例在GHC上可能效果不佳（请参见上面的调度），这是由于 &lt;code&gt;&lt;a href=&quot;system-io#v:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 上的锁定。任何时候只有一个线程可以在一个 &lt;code&gt;&lt;a href=&quot;system-io#v:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 上持有该锁，因此，如果在一个线程持有该锁的同时进行了重新计划，则另一个线程将无法运行。结果是从 &lt;code&gt;aaaa&lt;/code&gt; 到 &lt;code&gt;bbbbb&lt;/code&gt; 的切换很少发生。可以通过减少重新计划的滴答周期来改进它。我们还提供了一个补丁程序，该补丁程序会在等待锁的线程被唤醒时导致重新计划，但除了本示例以外，它还没有发现其他有用的方法:-)</target>
        </trans-unit>
        <trans-unit id="cca5d9a52684589d02fe67865e293c54351f48de" translate="yes" xml:space="preserve">
          <source>One of the motivating examples was the ability to register compiler hooks from a plugin. For example, one might want to modify the way Template Haskell code is executed. This is achievable by updating the &lt;code&gt;hooks&lt;/code&gt; field of the &lt;code&gt;DynFlags&lt;/code&gt; type, recording our custom &amp;ldquo;meta hook&amp;rdquo; in the right place. A simple application of this idea can be seen below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ea55d691054154f178c4188946d4c03f7e9c26" translate="yes" xml:space="preserve">
          <source>One of these new quantified constraints can appear anywhere that any other constraint can, not just in instance declarations. Notably, it can appear in a type signature for a value binding, data constructor, or expression. For example</source>
          <target state="translated">这些新的量化约束之一可以出现在任何其他约束可以出现的地方,而不仅仅是在实例声明中。值得注意的是,它可以出现在值绑定、数据构造函数或表达式的类型签名中。例如</target>
        </trans-unit>
        <trans-unit id="61fc274a467ee7617c4b73c08349e4d3c37da810" translate="yes" xml:space="preserve">
          <source>One or more.</source>
          <target state="translated">一个或多个。</target>
        </trans-unit>
        <trans-unit id="4b9e1cd86b2ee828fde7016484a1c36fb1da2c89" translate="yes" xml:space="preserve">
          <source>One or none.</source>
          <target state="translated">一个或没有。</target>
        </trans-unit>
        <trans-unit id="2e17f5233f1634abadabdb2fd410bbc1afa1bc70" translate="yes" xml:space="preserve">
          <source>One simplification allowed by combining types and kinds is that the type of &lt;code&gt;Type&lt;/code&gt; is just &lt;code&gt;Type&lt;/code&gt;. It is true that the &lt;code&gt;Type :: Type&lt;/code&gt; axiom can lead to non-termination, but this is not a problem in GHC, as we already have other means of non-terminating programs in both types and expressions. This decision (among many, many others) &lt;em&gt;does&lt;/em&gt; mean that despite the expressiveness of GHC&amp;rsquo;s type system, a &amp;ldquo;proof&amp;rdquo; you write in Haskell is not an irrefutable mathematical proof. GHC promises only partial correctness, that if your programs compile and run to completion, their results indeed have the types assigned. It makes no claim about programs that do not finish in a finite amount of time.</source>
          <target state="translated">组合类型和种类所允许的一种简化是 &lt;code&gt;Type&lt;/code&gt; 的 &lt;code&gt;Type&lt;/code&gt; 就是Type。 &lt;code&gt;Type :: Type&lt;/code&gt; 公理确实可以导致非终止，但这在GHC中不是问题，因为我们已经有了其他非终止类型和表达式程序的方法。这个决定（在许多其他决定中）&lt;em&gt;确实&lt;/em&gt;意味着，尽管GHC的类型系统具有表现力，但是您在Haskell中编写的&amp;ldquo;证明&amp;rdquo;并不是无可辩驳的数学证明。 GHC仅保证部分正确，即如果您的程序编译并运行完成，则其结果确实具有指定的类型。对于没有在有限时间内完成的程序，它没有任何要求。</target>
        </trans-unit>
        <trans-unit id="04e45da5d15f7b84f75303b148b0c58446719a7a" translate="yes" xml:space="preserve">
          <source>One solution would be to represent an occurrence of &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Int-35-&quot;&gt;Int#&lt;/a&gt;&lt;/code&gt; with 'Rec0 Int' instead. With this approach, however, the programmer has no way of knowing whether the &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; is actually an &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Int-35-&quot;&gt;Int#&lt;/a&gt;&lt;/code&gt; in disguise.</source>
          <target state="translated">一种解决方案是改为用'Rec0 Int' 表示 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Int-35-&quot;&gt;Int#&lt;/a&gt;&lt;/code&gt; 的出现。但是，使用这种方法，程序员无法知道 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 实际上是否是变相的 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Int-35-&quot;&gt;Int#&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="71086252ab12cdaa049eefe6701cf95f5fcaa5cf" translate="yes" xml:space="preserve">
          <source>One stylistic reason for wanting to write a type signature is simple documentation. Another is that you may want to bring scoped type variables into scope. For example:</source>
          <target state="translated">想写类型签名的一个风格上的原因是简单的文档。另一个原因是,你可能想把范围内的类型变量纳入范围。例如</target>
        </trans-unit>
        <trans-unit id="45133c20fc7ccdca10220b7b14632f7d9475ba07" translate="yes" xml:space="preserve">
          <source>One time when &lt;code&gt;Float&lt;/code&gt; might be a good idea is if you have a &lt;em&gt;lot&lt;/em&gt; of them, say a giant array of &lt;code&gt;Float&lt;/code&gt;s. They take up half the space in the heap compared to &lt;code&gt;Doubles&lt;/code&gt;. However, this isn&amp;rsquo;t true on a 64-bit machine.</source>
          <target state="translated">有一次，当 &lt;code&gt;Float&lt;/code&gt; 可能是一个不错的想法是，如果你有&lt;em&gt;很多的&lt;/em&gt;人，说的巨型阵列 &lt;code&gt;Float&lt;/code&gt; 秒。与 &lt;code&gt;Doubles&lt;/code&gt; 相比，它们占据了堆空​​间的一半。但是，在64位计算机上并非如此。</target>
        </trans-unit>
        <trans-unit id="a12bfceb7507e74d1f52bf5268e41928d787ee56" translate="yes" xml:space="preserve">
          <source>One way out is to define an extended &lt;code&gt;assert&lt;/code&gt; function which also takes a descriptive string to include in the error message and perhaps combine this with the use of a pre-processor which inserts the source location where &lt;code&gt;assert&lt;/code&gt; was used.</source>
          <target state="translated">一种解决方法是定义一个扩展的 &lt;code&gt;assert&lt;/code&gt; 函数，该函数还需要在错误消息中包含一个描述性字符串，并可能与预处理器结合使用，该预处理器会插入使用 &lt;code&gt;assert&lt;/code&gt; 的源位置。</target>
        </trans-unit>
        <trans-unit id="fc58693ff257f4600136a2111c4960ba6926b129" translate="yes" xml:space="preserve">
          <source>One way to do this is to create a &lt;code&gt;foreign export&lt;/code&gt; that will do whatever needs to be done to wake up the Haskell thread - perhaps &lt;code&gt;putMVar&lt;/code&gt; - and then call this from our C callback. There are a couple of problems with this:</source>
          <target state="translated">一种方法是创建一个 &lt;code&gt;foreign export&lt;/code&gt; ，该文件将执行唤醒Haskell线程（可能是 &lt;code&gt;putMVar&lt;/code&gt; )所需的所有操作，然后从我们的C回调中调用它。这有两个问题：</target>
        </trans-unit>
        <trans-unit id="896496c9fe69e79ba2c5e72301d3696844b503d6" translate="yes" xml:space="preserve">
          <source>One way to use &lt;code&gt;INLINABLE&lt;/code&gt; is in conjunction with the special function &lt;code&gt;inline&lt;/code&gt; (&lt;a href=&quot;#special-ids&quot;&gt;Special built-in functions&lt;/a&gt;). The call &lt;code&gt;inline f&lt;/code&gt; tries very hard to inline &lt;code&gt;f&lt;/code&gt;. To make sure that &lt;code&gt;f&lt;/code&gt; can be inlined, it is a good idea to mark the definition of &lt;code&gt;f&lt;/code&gt; as &lt;code&gt;INLINABLE&lt;/code&gt;, so that GHC guarantees to expose an unfolding regardless of how big it is. Moreover, by annotating &lt;code&gt;f&lt;/code&gt; as &lt;code&gt;INLINABLE&lt;/code&gt;, you ensure that &lt;code&gt;f&lt;/code&gt;&amp;lsquo;s original RHS is inlined, rather than whatever random optimised version of &lt;code&gt;f&lt;/code&gt; GHC&amp;rsquo;s optimiser has produced.</source>
          <target state="translated">使用 &lt;code&gt;INLINABLE&lt;/code&gt; 的一种方法是与 &lt;code&gt;inline&lt;/code&gt; 特殊功能（&lt;a href=&quot;#special-ids&quot;&gt;内建&lt;/a&gt;特殊功能）结合使用。调用 &lt;code&gt;inline f&lt;/code&gt; 非常尝试内联 &lt;code&gt;f&lt;/code&gt; 。为了确保 &lt;code&gt;f&lt;/code&gt; 可以内联，最好将 &lt;code&gt;f&lt;/code&gt; 的定义标记为 &lt;code&gt;INLINABLE&lt;/code&gt; ，以便GHC保证暴露出展开的大小，而不管其大小如何。此外，通过将 &lt;code&gt;f&lt;/code&gt; 注释为 &lt;code&gt;INLINABLE&lt;/code&gt; ，可以确保内联 &lt;code&gt;f&lt;/code&gt; 的原始RHS，而不是生成 &lt;code&gt;f&lt;/code&gt; GHC优化器的任何随机优化版本。</target>
        </trans-unit>
        <trans-unit id="e1ca150617a20c94c6d991df08ea7fec8c13f698" translate="yes" xml:space="preserve">
          <source>One way to use &lt;code&gt;INLINABLE&lt;/code&gt; is in conjunction with the special function &lt;code&gt;inline&lt;/code&gt; (&lt;a href=&quot;#special-ids&quot;&gt;Special built-in functions&lt;/a&gt;). The call &lt;code&gt;inline f&lt;/code&gt; tries very hard to inline &lt;code&gt;f&lt;/code&gt;. To make sure that &lt;code&gt;f&lt;/code&gt; can be inlined, it is a good idea to mark the definition of &lt;code&gt;f&lt;/code&gt; as &lt;code&gt;INLINABLE&lt;/code&gt;, so that GHC guarantees to expose an unfolding regardless of how big it is. Moreover, by annotating &lt;code&gt;f&lt;/code&gt; as &lt;code&gt;INLINABLE&lt;/code&gt;, you ensure that &lt;code&gt;f&lt;/code&gt;&amp;rsquo;s original RHS is inlined, rather than whatever random optimised version of &lt;code&gt;f&lt;/code&gt; GHC&amp;rsquo;s optimiser has produced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dba5747f4551a506f4292cb3c2030f7b24af891" translate="yes" xml:space="preserve">
          <source>One way to use this flag is to set a breakpoint on &lt;code&gt;LongGCSync()&lt;/code&gt; in the debugger, and find the thread that is delaying the sync. You probably want to use &lt;a href=&quot;debug-info#ghc-flag--g&quot;&gt;&lt;code&gt;-g&lt;/code&gt;&lt;/a&gt; to provide more info to the debugger.</source>
          <target state="translated">使用此标志的一种方法是在调试器中的 &lt;code&gt;LongGCSync()&lt;/code&gt; 上设置一个断点，然后查找延迟同步的线程。您可能想使用&lt;a href=&quot;debug-info#ghc-flag--g&quot;&gt; &lt;code&gt;-g&lt;/code&gt; &lt;/a&gt;向调试器提供更多信息。</target>
        </trans-unit>
        <trans-unit id="d2c680b63b6bef62589b5937a565537e66960d46" translate="yes" xml:space="preserve">
          <source>One workaround is to use the &lt;a href=&quot;using#ghc-flag--msse2&quot;&gt;&lt;code&gt;-msse2&lt;/code&gt;&lt;/a&gt; option (see &lt;a href=&quot;using#options-platform&quot;&gt;Platform-specific Flags&lt;/a&gt;), which generates code to use the SSE2 instruction set instead of the x87 instruction set. SSE2 code uses the correct precision for all floating-point operations, and so gives deterministic results. However, note that this only works with processors that support SSE2 (Intel Pentium 4 or AMD Athlon 64 and later), which is why the option is not enabled by default. The libraries that come with GHC are probably built without this option, unless you built GHC yourself.</source>
          <target state="translated">一种解决方法是使用&lt;a href=&quot;using#ghc-flag--msse2&quot;&gt; &lt;code&gt;-msse2&lt;/code&gt; &lt;/a&gt;选项（请参阅&lt;a href=&quot;using#options-platform&quot;&gt;平台特定的标志&lt;/a&gt;），该选项生成代码以使用SSE2指令集而不是x87指令集。SSE2代码对所有浮点运算都使用正确的精度，因此可以提供确定的结果。但是，请注意，这仅适用于支持SSE2的处理器（Intel Pentium 4或AMD Athlon 64及更高版本），这就是默认情况下未启用该选项的原因。除非您自己构建GHC，否则GHC随附的库可能没有此选项即可构建。</target>
        </trans-unit>
        <trans-unit id="1dfc86abc6a3fb1a97eebda069c8175f292ebd73" translate="yes" xml:space="preserve">
          <source>OneLineGCStats</source>
          <target state="translated">OneLineGCStats</target>
        </trans-unit>
        <trans-unit id="927d5cf27de83f9a93bc0c43d5e9992d0e575568" translate="yes" xml:space="preserve">
          <source>OneLineMode</source>
          <target state="translated">OneLineMode</target>
        </trans-unit>
        <trans-unit id="293e0ad51fda89c714a301db9fbb3d1d9e6c34d7" translate="yes" xml:space="preserve">
          <source>OneShot</source>
          <target state="translated">OneShot</target>
        </trans-unit>
        <trans-unit id="92340949cbfd5f6b38df2be19df951ad335baa8c" translate="yes" xml:space="preserve">
          <source>Only &lt;em&gt;dynamic&lt;/em&gt; flags can be used in an &lt;code&gt;OPTIONS_GHC&lt;/code&gt; pragma (see &lt;a href=&quot;#mode-dynamic-flags&quot;&gt;Dynamic and Mode options&lt;/a&gt;).</source>
          <target state="translated">只有&lt;em&gt;动态的&lt;/em&gt;标志可以在使用 &lt;code&gt;OPTIONS_GHC&lt;/code&gt; 附注（见&lt;a href=&quot;#mode-dynamic-flags&quot;&gt;动态和模式选项&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="5805ff05f15235a01101ac5b0cf4fe9284ddd19e" translate="yes" xml:space="preserve">
          <source>Only a subset of &lt;code&gt;.hsc&lt;/code&gt; syntax is supported by &lt;code&gt;--cross-compile&lt;/code&gt;. The following are unsupported:</source>
          <target state="translated">&lt;code&gt;--cross-compile&lt;/code&gt; 仅支持 &lt;code&gt;.hsc&lt;/code&gt; 语法的子集。不支持以下内容：</target>
        </trans-unit>
        <trans-unit id="c0c7ea9b4b424e7701e19b198d45f22f5ddc88ca" translate="yes" xml:space="preserve">
          <source>Only defined for &lt;code&gt;base-4.7.0.0&lt;/code&gt; and later</source>
          <target state="translated">仅针对 &lt;code&gt;base-4.7.0.0&lt;/code&gt; 及更高版本定义</target>
        </trans-unit>
        <trans-unit id="4a596037bffe0627dd076aba851bf6d728006681" translate="yes" xml:space="preserve">
          <source>Only defined when &lt;code&gt;-fllvm&lt;/code&gt; is specified. When GHC is using version &lt;code&gt;x.y.z&lt;/code&gt; of LLVM, the value of &lt;code&gt;__GLASGOW_HASKELL_LLVM__&lt;/code&gt; is the integer ⟨xyy⟩ (if ⟨y⟩ is a single digit, then a leading zero is added, so for example when using version 3.7 of LLVM, &lt;code&gt;__GLASGOW_HASKELL_LLVM__==307&lt;/code&gt;).</source>
          <target state="translated">仅在指定 &lt;code&gt;-fllvm&lt;/code&gt; 时定义。当GHC使用LLVM的 &lt;code&gt;x.y.z&lt;/code&gt; 版本时， &lt;code&gt;__GLASGOW_HASKELL_LLVM__&lt;/code&gt; 的值是整数⟨xyy⟩（如果yy是一个数字，则添加前导零，因此例如，当使用LLVM 3.7版时， &lt;code&gt;__GLASGOW_HASKELL_LLVM__==307&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="77501c9a6b02892b95f0d3d080f47d0f67625a4e" translate="yes" xml:space="preserve">
          <source>Only defined when &lt;code&gt;-parallel&lt;/code&gt; is in use! This symbol is defined when pre-processing Haskell (input) and pre-processing C (GHC output).</source>
          <target state="translated">仅在使用 &lt;code&gt;-parallel&lt;/code&gt; 时定义！在预处理Haskell（输入）和预处理C（GHC输出）时定义此符号。</target>
        </trans-unit>
        <trans-unit id="7ff1cf96778de3d5827e74815c075270e8782040" translate="yes" xml:space="preserve">
          <source>Only one of the two class parameters is a parameter to the data family. Hence, the following instance declaration is invalid:</source>
          <target state="translated">两个类参数中只有一个是数据族的参数。因此,下面的实例声明是无效的。</target>
        </trans-unit>
        <trans-unit id="2721baf97a0c4efdd138d61549b8c89209e4143c" translate="yes" xml:space="preserve">
          <source>Only the instance head counts. In the example above, it is not good enough for &lt;code&gt;C&lt;/code&gt;&amp;lsquo;s declaration to be in module &lt;code&gt;A&lt;/code&gt;; it must be the declaration of &lt;code&gt;D&lt;/code&gt; or &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">仅实例头计数。在上面的示例中，将 &lt;code&gt;C&lt;/code&gt; 的声明放在模块 &lt;code&gt;A&lt;/code&gt; 中是不够的；它必须是 &lt;code&gt;D&lt;/code&gt; 或 &lt;code&gt;T&lt;/code&gt; 的声明。</target>
        </trans-unit>
        <trans-unit id="9c3f07cc6d0c90bb9379747728c0148950cf6bc3" translate="yes" xml:space="preserve">
          <source>Only the instance head counts. In the example above, it is not good enough for &lt;code&gt;C&lt;/code&gt;&amp;rsquo;s declaration to be in module &lt;code&gt;A&lt;/code&gt;; it must be the declaration of &lt;code&gt;D&lt;/code&gt; or &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7998f0bdcbff51167fe5e1c42e1067cc0272867" translate="yes" xml:space="preserve">
          <source>Only the outer constructor is taken into consideration:</source>
          <target state="translated">只考虑到外部构造者。</target>
        </trans-unit>
        <trans-unit id="868f341dfb14a799178bbe260757188c4e090543" translate="yes" xml:space="preserve">
          <source>Only used internally</source>
          <target state="translated">仅在内部使用</target>
        </trans-unit>
        <trans-unit id="1e5c03c4ca5dbc17c5a6129ff8dbe16f01a71ebd" translate="yes" xml:space="preserve">
          <source>Op</source>
          <target state="translated">Op</target>
        </trans-unit>
        <trans-unit id="c637aebe3a2825fb1f2be997a9434f3ce48a4b93" translate="yes" xml:space="preserve">
          <source>Opaque</source>
          <target state="translated">Opaque</target>
        </trans-unit>
        <trans-unit id="ab610cf3766e2ab5ebbdef1c372c6423bceb9405" translate="yes" xml:space="preserve">
          <source>Open a file and make an &lt;code&gt;&lt;a href=&quot;ghc-io-fd#t:FD&quot;&gt;FD&lt;/a&gt;&lt;/code&gt; for it. Truncates the file to zero size when the &lt;code&gt;&lt;a href=&quot;system-io#t:IOMode&quot;&gt;IOMode&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;system-io#v:WriteMode&quot;&gt;WriteMode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">打开文件并为其创建 &lt;code&gt;&lt;a href=&quot;ghc-io-fd#t:FD&quot;&gt;FD&lt;/a&gt;&lt;/code&gt; 。截断文件时零大小 &lt;code&gt;&lt;a href=&quot;system-io#t:IOMode&quot;&gt;IOMode&lt;/a&gt;&lt;/code&gt; 是 &lt;code&gt;&lt;a href=&quot;system-io#v:WriteMode&quot;&gt;WriteMode&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb658d04e484f6ef351935e7a9b766b60debe2d4" translate="yes" xml:space="preserve">
          <source>Open a named semaphore with the given name, flags, mode, and initial value.</source>
          <target state="translated">用给定的名称、标志、模式和初始值打开一个命名的信号体。</target>
        </trans-unit>
        <trans-unit id="f57c4790f7f34a8ca95eceb331923fb2088fdde1" translate="yes" xml:space="preserve">
          <source>Open a shared memory object with the given name, flags, and mode.</source>
          <target state="translated">用给定的名称、标志和模式打开一个共享内存对象。</target>
        </trans-unit>
        <trans-unit id="a4120aa06412e5adc4c600815d8ebb61aa98d422" translate="yes" xml:space="preserve">
          <source>Open and optionally create this file. See &lt;code&gt;&lt;a href=&quot;system-posix#v:Files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; for information on how to use the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:FileMode&quot;&gt;FileMode&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">打开并选择创建此文件。有关如何使用 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:FileMode&quot;&gt;FileMode&lt;/a&gt;&lt;/code&gt; 类型的信息，请参见 &lt;code&gt;&lt;a href=&quot;system-posix#v:Files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ea860b430753ad4955968e34ae243867a6c5fb04" translate="yes" xml:space="preserve">
          <source>Open and optionally create this file. See &lt;code&gt;&lt;a href=&quot;system-posix#v:Files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; for information on how to use the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:FileMode&quot;&gt;FileMode&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="316640348a429645fef91dfb05b3196eb965850e" translate="yes" xml:space="preserve">
          <source>Open indexed type families are introduced by a signature, such as</source>
          <target state="translated">开放式索引类型族是由一个签名引入的,例如</target>
        </trans-unit>
        <trans-unit id="62d19b763ce96acde6de1a0a0a137c190e97e371" translate="yes" xml:space="preserve">
          <source>Open type and data family declarations are exactly as in Haskell.</source>
          <target state="translated">开放类型和数据族的声明与Haskell中完全一样。</target>
        </trans-unit>
        <trans-unit id="345592cb9cc814b84d928db32f524bd68b8e8665" translate="yes" xml:space="preserve">
          <source>OpenExtHandle</source>
          <target state="translated">OpenExtHandle</target>
        </trans-unit>
        <trans-unit id="be4ef35b845f3f8742151ba042e927f175f32d3d" translate="yes" xml:space="preserve">
          <source>OpenFileFlags</source>
          <target state="translated">OpenFileFlags</target>
        </trans-unit>
        <trans-unit id="d4c5cbf148e8ab067ee8fcd91a86a68f327e2c93" translate="yes" xml:space="preserve">
          <source>OpenFileLimit</source>
          <target state="translated">OpenFileLimit</target>
        </trans-unit>
        <trans-unit id="b2a5470d265ed406614e0d033c4ebe86bf811418" translate="yes" xml:space="preserve">
          <source>OpenHandle</source>
          <target state="translated">OpenHandle</target>
        </trans-unit>
        <trans-unit id="f3dd14171959950898b3fb604b356ae109b6e608" translate="yes" xml:space="preserve">
          <source>OpenMode</source>
          <target state="translated">OpenMode</target>
        </trans-unit>
        <trans-unit id="528d57c38374a655a269ff7a2796f6152cc2b011" translate="yes" xml:space="preserve">
          <source>OpenPunctuation</source>
          <target state="translated">OpenPunctuation</target>
        </trans-unit>
        <trans-unit id="389682fb06c2c4c783f2fcf52cb3f6b658b5e3d8" translate="yes" xml:space="preserve">
          <source>OpenSemFlags</source>
          <target state="translated">OpenSemFlags</target>
        </trans-unit>
        <trans-unit id="8b0c300483c96f9ee4308ab45551ff569e61bab4" translate="yes" xml:space="preserve">
          <source>Opening and closing files</source>
          <target state="translated">打开和关闭文件</target>
        </trans-unit>
        <trans-unit id="a535bff5bb480bbb6c0b709154409086b9fa6c12" translate="yes" xml:space="preserve">
          <source>Opening files</source>
          <target state="translated">打开文件</target>
        </trans-unit>
        <trans-unit id="3ffea85c4926df7fcf793cfa4d81139f2c8578a1" translate="yes" xml:space="preserve">
          <source>Opens an editor to edit the file ⟨file⟩, or the most recently loaded module if ⟨file⟩ is omitted. If there were errors during the last loading, the cursor will be positioned at the line of the first error. The editor to invoke is taken from the &lt;code id=&quot;index-24&quot;&gt;EDITOR&lt;/code&gt; environment variable, or a default editor on your system if &lt;code id=&quot;index-25&quot;&gt;EDITOR&lt;/code&gt; is not set. You can change the editor using &lt;a href=&quot;#ghci-cmd-:set%20editor&quot;&gt;&lt;code&gt;:set editor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">打开编辑器来编辑文件&amp;ldquo;文件&amp;rdquo;，如果省略了&amp;ldquo;文件&amp;rdquo;，则打开最近加载的模块。如果在上一次加载期间发生错误，则光标将位于第一个错误的行。调用的编辑器取自 &lt;code id=&quot;index-24&quot;&gt;EDITOR&lt;/code&gt; 环境变量，如果未设置 &lt;code id=&quot;index-25&quot;&gt;EDITOR&lt;/code&gt; ，则取自系统上的默认编辑器。您可以使用&lt;a href=&quot;#ghci-cmd-:set%20editor&quot;&gt; &lt;code&gt;:set editor&lt;/code&gt; &lt;/a&gt;更改编辑器。</target>
        </trans-unit>
        <trans-unit id="ab766ba42381e7e73d60b327225011551bd62285" translate="yes" xml:space="preserve">
          <source>Opens an existing file and creates mapping object to it.</source>
          <target state="translated">打开现有的文件,并为其创建映射对象。</target>
        </trans-unit>
        <trans-unit id="b2e30baf3d135ff701a189f664d0aa02d8bc535e" translate="yes" xml:space="preserve">
          <source>Operate on the current user&amp;rsquo;s local package database. This flag affects the &lt;code&gt;register&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;unregister&lt;/code&gt;, &lt;code&gt;expose&lt;/code&gt;, and &lt;code&gt;hide&lt;/code&gt; commands.</source>
          <target state="translated">在当前用户的本地软件包数据库上进行操作。此标志影响 &lt;code&gt;register&lt;/code&gt; ， &lt;code&gt;update&lt;/code&gt; ， &lt;code&gt;unregister&lt;/code&gt; ， &lt;code&gt;expose&lt;/code&gt; 和 &lt;code&gt;hide&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="083cd84d11675eeddb18e443e875f6b6a3d95c50" translate="yes" xml:space="preserve">
          <source>Operate on the global package database (this is the default). This flag affects the &lt;code&gt;register&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;unregister&lt;/code&gt;, &lt;code&gt;expose&lt;/code&gt;, and &lt;code&gt;hide&lt;/code&gt; commands.</source>
          <target state="translated">在全局软件包数据库上操作（这是默认设置）。此标志影响 &lt;code&gt;register&lt;/code&gt; ， &lt;code&gt;update&lt;/code&gt; ， &lt;code&gt;unregister&lt;/code&gt; ， &lt;code&gt;expose&lt;/code&gt; 和 &lt;code&gt;hide&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="bf70e187ccc63f90f3e1fb5ec071ddb81220b4ff" translate="yes" xml:space="preserve">
          <source>Operating on the raw buffer as a Ptr</source>
          <target state="translated">将原始缓冲区作为一个Ptr进行操作。</target>
        </trans-unit>
        <trans-unit id="212e24ce1fc682d740e1dca655f0849d8ec6b1da" translate="yes" xml:space="preserve">
          <source>Operation comments contain the operation time complexity in the Big-O notation (&lt;a href=&quot;http://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;http://en.wikipedia.org/wiki/Big_O_notation&lt;/a&gt;).</source>
          <target state="translated">操作注释以Big-O表示法（&lt;a href=&quot;http://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;http://en.wikipedia.org/wiki/Big_O_notation&lt;/a&gt;）包含操作时间复杂度。</target>
        </trans-unit>
        <trans-unit id="30b4c034f9dfce3148616876e4eb785c3c71ce25" translate="yes" xml:space="preserve">
          <source>Operation comments contain the operation time complexity in the Big-O notation &lt;a href=&quot;http://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;http://en.wikipedia.org/wiki/Big_O_notation&lt;/a&gt;. Many operations have a worst-case complexity of O(min(n,W)). This means that the operation can become linear in the number of elements with a maximum of &lt;em&gt;W&lt;/em&gt; -- the number of bits in an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; (32 or 64).</source>
          <target state="translated">操作注释以Big-O表示法&lt;a href=&quot;http://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;http://en.wikipedia.org/wiki/Big_O_notation&lt;/a&gt;包含操作时间的复杂性。许多运算的最坏情况复杂度为O（min（n，W））。这意味着该运算的元素数可以线性化，最大为&lt;em&gt;W&lt;/em&gt; - &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 中的位数（32或64）。</target>
        </trans-unit>
        <trans-unit id="cc94aba5ba9874c8ccd3a8b0bd8fc45a51ca4e90" translate="yes" xml:space="preserve">
          <source>Operation comments contain the operation time complexity in the Big-O notation &lt;a href=&quot;http://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;http://en.wikipedia.org/wiki/Big_O_notation&lt;/a&gt;. Many operations have a worst-case complexity of O(min(n,W)). This means that the operation can become linear in the number of elements with a maximum of &lt;em&gt;W&lt;/em&gt; -- the number of bits in an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; (32 or 64).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1956fb1b777c2f5cb51b9aa2d865337af0a8590e" translate="yes" xml:space="preserve">
          <source>Operationally, in a dictionary-passing implementation, the constructors &lt;code&gt;Baz1&lt;/code&gt; and &lt;code&gt;Baz2&lt;/code&gt; must store the dictionaries for &lt;code&gt;Eq&lt;/code&gt; and &lt;code&gt;Show&lt;/code&gt; respectively, and extract it on pattern matching.</source>
          <target state="translated">在操作上，在传递字典的实现中，构造函数 &lt;code&gt;Baz1&lt;/code&gt; 和 &lt;code&gt;Baz2&lt;/code&gt; 必须分别存储 &lt;code&gt;Eq&lt;/code&gt; 和 &lt;code&gt;Show&lt;/code&gt; 的字典，并在模式匹配时将其提取。</target>
        </trans-unit>
        <trans-unit id="a1fdaa6b2a846c8fcf18d414bf8c61db610eda6a" translate="yes" xml:space="preserve">
          <source>Operations</source>
          <target state="translated">Operations</target>
        </trans-unit>
        <trans-unit id="010424427c51ae459956824d4f41c5856a7d7600" translate="yes" xml:space="preserve">
          <source>Operations for composing transactions: &lt;code&gt;retry&lt;/code&gt;, and &lt;code&gt;orElse&lt;/code&gt;.</source>
          <target state="translated">组成交易的操作： &lt;code&gt;retry&lt;/code&gt; 和 &lt;code&gt;orElse&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64c6bfa202489b3690a8497e85422b7af3c47ee6" translate="yes" xml:space="preserve">
          <source>Operations for creating and interacting with sub-processes.</source>
          <target state="translated">创建子流程并与子流程互动的操作。</target>
        </trans-unit>
        <trans-unit id="63e9af41f1576e5aa52ffaa696122d209a87d569" translate="yes" xml:space="preserve">
          <source>Operations for injecting values of arbitrary type into a dynamically typed value, Dynamic, are provided, together with operations for converting dynamic values into a concrete (monomorphic) type.</source>
          <target state="translated">提供了将任意类型的值注入到动态类型的值--Dynamic中的操作,以及将动态值转换为具体(单态)类型的操作。</target>
        </trans-unit>
        <trans-unit id="dfa672f70c432a2f16141a0afca1b4ff49e644e5" translate="yes" xml:space="preserve">
          <source>Operations on &lt;code&gt;Float&lt;/code&gt; and &lt;code&gt;Double&lt;/code&gt; numbers are &lt;em&gt;unchecked&lt;/em&gt; for overflow, underflow, and other sad occurrences. (note, however, that some architectures trap floating-point overflow and loss-of-precision and report a floating-point exception, probably terminating the program)</source>
          <target state="translated">在操作 &lt;code&gt;Float&lt;/code&gt; 和 &lt;code&gt;Double&lt;/code&gt; 数字是&lt;em&gt;选中&lt;/em&gt;了溢，下溢，和其他伤心的事件。（但是请注意，某些体系结构会捕获浮点溢出和精度损失，并报告浮点异常，可能会终止程序）</target>
        </trans-unit>
        <trans-unit id="70b889a0601ca0e0323fbe3001c86239d52c2976" translate="yes" xml:space="preserve">
          <source>Operations on handles</source>
          <target state="translated">对手柄的操作</target>
        </trans-unit>
        <trans-unit id="251fdb8c40a857d5de5aef3683ba18da16bd56ad" translate="yes" xml:space="preserve">
          <source>Operations on lists.</source>
          <target state="translated">对名单的操作:</target>
        </trans-unit>
        <trans-unit id="a187376dc1defee65e37c92ba05a3b6fa77db72f" translate="yes" xml:space="preserve">
          <source>Operations whose result would be negative &lt;code&gt;&lt;a href=&quot;control-exception#v:throw&quot;&gt;throw&lt;/a&gt;
 (&lt;a href=&quot;control-exception#v:Underflow&quot;&gt;Underflow&lt;/a&gt; :: &lt;a href=&quot;control-exception#v:ArithException&quot;&gt;ArithException&lt;/a&gt;)&lt;/code&gt;,</source>
          <target state="translated">操作，其结果将是负的 &lt;code&gt;&lt;a href=&quot;control-exception#v:throw&quot;&gt;throw&lt;/a&gt; (&lt;a href=&quot;control-exception#v:Underflow&quot;&gt;Underflow&lt;/a&gt; :: &lt;a href=&quot;control-exception#v:ArithException&quot;&gt;ArithException&lt;/a&gt;)&lt;/code&gt; ，</target>
        </trans-unit>
        <trans-unit id="d0e687b079fb70f2208d1f8d2c75d64d74925496" translate="yes" xml:space="preserve">
          <source>Operator</source>
          <target state="translated">Operator</target>
        </trans-unit>
        <trans-unit id="d4f31eb6a5e978c610c6b257f8e92dc5ac9b8f36" translate="yes" xml:space="preserve">
          <source>Operator symbols become type &lt;em&gt;constructors&lt;/em&gt; rather than type &lt;em&gt;variables&lt;/em&gt;.</source>
          <target state="translated">运算符成为类型&lt;em&gt;构造函数，&lt;/em&gt;而不是类型&lt;em&gt;变量&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="df4aab8de9b7c877a7baeb4198669b3c5323bb26" translate="yes" xml:space="preserve">
          <source>Operator symbols in types can be written infix, both in definitions and uses. For example:</source>
          <target state="translated">类型中的操作符符号可以写成infix,在定义和使用中都可以。比如说</target>
        </trans-unit>
        <trans-unit id="deefc1ebb8a6a9e9d71ba863ed305fcb6f2e73df" translate="yes" xml:space="preserve">
          <source>OperatorTable</source>
          <target state="translated">OperatorTable</target>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="e8b0a981c3293cd72332580a9bfaa03f3df518cf" translate="yes" xml:space="preserve">
          <source>OptDescr</source>
          <target state="translated">OptDescr</target>
        </trans-unit>
        <trans-unit id="e31d972229de381b461860014dd710856361917a" translate="yes" xml:space="preserve">
          <source>Option</source>
          <target state="translated">Option</target>
        </trans-unit>
        <trans-unit id="b293465e066906a2876636d4afb03e8ac6cf2ddc" translate="yes" xml:space="preserve">
          <source>Optional environment (otherwise inherit from the current process)</source>
          <target state="translated">可选环境(否则从当前进程继承)</target>
        </trans-unit>
        <trans-unit id="dd55d6c6a66ab5ddbc36d53946c786320ec3587d" translate="yes" xml:space="preserve">
          <source>Optional environment (otherwise inherit)</source>
          <target state="translated">可选环境(否则继承)</target>
        </trans-unit>
        <trans-unit id="0f14588d7b9710ada9394bfeaff05157c6f2476d" translate="yes" xml:space="preserve">
          <source>Optional path to the working directory</source>
          <target state="translated">工作目录的可选路径</target>
        </trans-unit>
        <trans-unit id="d91392285a0151b95f54b71ab44e6f6e738b5437" translate="yes" xml:space="preserve">
          <source>Optional path to the working directory for the new process</source>
          <target state="translated">新进程工作目录的可选路径。</target>
        </trans-unit>
        <trans-unit id="f439f2ba967862c2d5e67c16eed9a8d3ce132e3a" translate="yes" xml:space="preserve">
          <source>Optionally, the program may be linked with the &lt;a href=&quot;phases#ghc-flag--threaded&quot;&gt;&lt;code&gt;-threaded&lt;/code&gt;&lt;/a&gt; option (see &lt;a href=&quot;phases#options-linker&quot;&gt;Options affecting linking&lt;/a&gt;. This provides two benefits:</source>
          <target state="translated">（可选）程序可以与&lt;a href=&quot;phases#ghc-flag--threaded&quot;&gt; &lt;code&gt;-threaded&lt;/code&gt; &lt;/a&gt;选项&lt;a href=&quot;phases#options-linker&quot;&gt;链接&lt;/a&gt;（请参阅影响链接的选项。这提供了两个好处：</target>
        </trans-unit>
        <trans-unit id="150df3ba8f1d25b3d2442fb251bd0b8739a08f6c" translate="yes" xml:space="preserve">
          <source>Options can be forced through to a particular compilation phase, using the following flags:</source>
          <target state="translated">使用以下标志,可以将选项强制到特定的编译阶段。</target>
        </trans-unit>
        <trans-unit id="07de4eb670ca9b55e22ab8e74a884db849e506ae" translate="yes" xml:space="preserve">
          <source>Options may also be modified from within GHCi, using the &lt;a href=&quot;ghci#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">也可以使用&lt;a href=&quot;ghci#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; &lt;/a&gt;命令从GHCi内部修改选项。</target>
        </trans-unit>
        <trans-unit id="bbc525524ba745988196c2cf239dca851f2646d3" translate="yes" xml:space="preserve">
          <source>Or I could define a simple way to invoke &amp;ldquo;&lt;code&gt;ghc --make Main&lt;/code&gt;&amp;rdquo; in the current directory:</source>
          <target state="translated">或者，我可以定义一种简单的方法来在当前目录中调用&amp;ldquo; &lt;code&gt;ghc --make Main&lt;/code&gt; &amp;rdquo;：</target>
        </trans-unit>
        <trans-unit id="ed5f6d189422866d42c01faf2773a8db4acd9c2a" translate="yes" xml:space="preserve">
          <source>Or even simpler using applicative style:</source>
          <target state="translated">或者更简单的使用应用性风格。</target>
        </trans-unit>
        <trans-unit id="c3af411739703165e3837288b0679427c0978621" translate="yes" xml:space="preserve">
          <source>Or in a standalone deriving declaration</source>
          <target state="translated">或者在一个独立的派生声明中</target>
        </trans-unit>
        <trans-unit id="9e0ef2f0808aa7783d6cf8e9c6f90e88d912e8e1" translate="yes" xml:space="preserve">
          <source>Or using guards:</source>
          <target state="translated">或者使用防护罩。</target>
        </trans-unit>
        <trans-unit id="00fcdda14949d42c1610edfba9ca80d41d59564f" translate="yes" xml:space="preserve">
          <source>Or:</source>
          <target state="translated">Or:</target>
        </trans-unit>
        <trans-unit id="2813ca76372ef7834dbf7b83dd19ec3f7be3b60a" translate="yes" xml:space="preserve">
          <source>Ord</source>
          <target state="translated">Ord</target>
        </trans-unit>
        <trans-unit id="f5167f3705089803c8512ac674241dfd7724cb93" translate="yes" xml:space="preserve">
          <source>Ord1</source>
          <target state="translated">Ord1</target>
        </trans-unit>
        <trans-unit id="a846bf09723a1322f808ad711f192bb56fbfbec4" translate="yes" xml:space="preserve">
          <source>Ord2</source>
          <target state="translated">Ord2</target>
        </trans-unit>
        <trans-unit id="f67c47b80d23bf9aafb12517fa70e43e75dc9ce1" translate="yes" xml:space="preserve">
          <source>Ordered ByteStrings</source>
          <target state="translated">有序ByteStrings</target>
        </trans-unit>
        <trans-unit id="6b5d4e1e91de3c24915fa410d3ac4a21868bffb0" translate="yes" xml:space="preserve">
          <source>Ordered list</source>
          <target state="translated">订购清单</target>
        </trans-unit>
        <trans-unit id="9bed071603b37f170248ba8799e9c1e267fbd2f5" translate="yes" xml:space="preserve">
          <source>Ordered lists</source>
          <target state="translated">订购清单</target>
        </trans-unit>
        <trans-unit id="d3ed86c1334d74f0ae883f47feef902d83b9d8c6" translate="yes" xml:space="preserve">
          <source>Ordering</source>
          <target state="translated">Ordering</target>
        </trans-unit>
        <trans-unit id="5ee1f118f806c2954ead1243461f8f5c2a0d2524" translate="yes" xml:space="preserve">
          <source>Ordering of &lt;code&gt;-l&lt;/code&gt; options matters: a library should be mentioned &lt;em&gt;before&lt;/em&gt; the libraries it depends on (see &lt;a href=&quot;phases#options-linker&quot;&gt;Options affecting linking&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;-l&lt;/code&gt; 选项的顺序很重要：应该在依赖它的库&lt;em&gt;之前&lt;/em&gt;提及一个库（请参阅&lt;a href=&quot;phases#options-linker&quot;&gt;影响链接的选项&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="026197d403291a7a7c724e41228f7b3923b83a89" translate="yes" xml:space="preserve">
          <source>Orderings</source>
          <target state="translated">Orderings</target>
        </trans-unit>
        <trans-unit id="4cd6b596de672da2114ba27b5d0928eebf93910e" translate="yes" xml:space="preserve">
          <source>Ordinary inlining happens at the same time as rule rewriting, which may lead to unexpected results. Consider this (artificial) example</source>
          <target state="translated">普通内联与规则重写同时发生,这可能会导致意想不到的结果。考虑一下这个(人为的)例子</target>
        </trans-unit>
        <trans-unit id="04b00cb26f97f959a02aa6ce19955a72b8bd0a5f" translate="yes" xml:space="preserve">
          <source>Ordinary single-threaded Haskell programs will not benefit from enabling SMP parallelism alone: you must expose parallelism to the compiler. One way to do so is forking threads using Concurrent Haskell (&lt;a href=&quot;#concurrent-haskell&quot;&gt;Concurrent Haskell&lt;/a&gt;), but the simplest mechanism for extracting parallelism from pure code is to use the &lt;code&gt;par&lt;/code&gt; combinator, which is closely related to (and often used with) &lt;code&gt;seq&lt;/code&gt;. Both of these are available from the &lt;a href=&quot;http://hackage.haskell.org/package/parallel&quot;&gt;parallel library&lt;/a&gt;:</source>
          <target state="translated">普通的单线程Haskell程序将不能从仅启用SMP并行性中受益：您必须向编译器公开并行性。一种方法是使用Concurrent Haskell（&lt;a href=&quot;#concurrent-haskell&quot;&gt;Concurrent Haskell&lt;/a&gt;）分叉线程，但是从纯代码中提取并行性的最简单机制是使用 &lt;code&gt;par&lt;/code&gt; 组合器，该组合器与 &lt;code&gt;seq&lt;/code&gt; 密切相关（并且经常与seq一起使用）。这两个都可以从&lt;a href=&quot;http://hackage.haskell.org/package/parallel&quot;&gt;并行库中获得&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="a9e54f5fa5a278d112dceef67452d2651ffb1f7b" translate="yes" xml:space="preserve">
          <source>Original GHC implementation by Bryan O'Sullivan. Rewritten to use &lt;code&gt;&lt;a href=&quot;data-array-unboxed#v:UArray&quot;&gt;UArray&lt;/a&gt;&lt;/code&gt; by Simon Marlow. Rewritten to support slices and use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-foreignptr#v:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; by David Roundy. Rewritten again and extended by Don Stewart and Duncan Coutts. Lazy variant by Duncan Coutts and Don Stewart.</source>
          <target state="translated">Bryan O'Sullivan最初执行的GHC。Simon Marlow 重写为使用 &lt;code&gt;&lt;a href=&quot;data-array-unboxed#v:UArray&quot;&gt;UArray&lt;/a&gt;&lt;/code&gt; 。重写以支持切片，用 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-foreignptr#v:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 由戴维&amp;middot;罗迪。唐&amp;middot;斯图尔特（Don Stewart）和邓肯&amp;middot;库茨（Duncan Coutts）再次对其进行了扩展。Duncan Coutts和Don Stewart的懒惰变体。</target>
        </trans-unit>
        <trans-unit id="93598ac808fb05625f35e4f620de0f0e53817bdf" translate="yes" xml:space="preserve">
          <source>Original GHC implementation by Bryan O'Sullivan. Rewritten to use &lt;code&gt;&lt;a href=&quot;data-array-unboxed#v:UArray&quot;&gt;UArray&lt;/a&gt;&lt;/code&gt; by Simon Marlow. Rewritten to support slices and use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; by David Roundy. Rewritten again and extended by Don Stewart and Duncan Coutts.</source>
          <target state="translated">Bryan O'Sullivan最初执行的GHC。Simon Marlow 重写为使用 &lt;code&gt;&lt;a href=&quot;data-array-unboxed#v:UArray&quot;&gt;UArray&lt;/a&gt;&lt;/code&gt; 。重写以支持切片，用 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 由戴维&amp;middot;罗迪。唐&amp;middot;斯图尔特（Don Stewart）和邓肯&amp;middot;库茨（Duncan Coutts）再次对其进行了扩展。</target>
        </trans-unit>
        <trans-unit id="cb8e5613ec2d48a74c172ac7aa02cac4bef17d2b" translate="yes" xml:space="preserve">
          <source>Original GHC implementation by Bryan O'Sullivan. Rewritten to use &lt;code&gt;&lt;a href=&quot;data-array-unboxed#v:UArray&quot;&gt;UArray&lt;/a&gt;&lt;/code&gt; by Simon Marlow. Rewritten to support slices and use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-foreignptr#v:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; by David Roundy. Rewritten again and extended by Don Stewart and Duncan Coutts. Lazy variant by Duncan Coutts and Don Stewart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c96e5b47a54e6acfda288d441c2ec8fe32131b" translate="yes" xml:space="preserve">
          <source>Original GHC implementation by Bryan O'Sullivan. Rewritten to use &lt;code&gt;&lt;a href=&quot;data-array-unboxed#v:UArray&quot;&gt;UArray&lt;/a&gt;&lt;/code&gt; by Simon Marlow. Rewritten to support slices and use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; by David Roundy. Rewritten again and extended by Don Stewart and Duncan Coutts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9ce637b76a3e86159754092a5bff05de23030c" translate="yes" xml:space="preserve">
          <source>Originally designed by John Hughes's and Simon Peyton Jones's.</source>
          <target state="translated">最初是由约翰-休斯的和西蒙-佩顿-琼斯的设计。</target>
        </trans-unit>
        <trans-unit id="e0d11db984918c900a2e7615ec383a5f3eade238" translate="yes" xml:space="preserve">
          <source>Orphan instances</source>
          <target state="translated">孤儿实例</target>
        </trans-unit>
        <trans-unit id="6e6a6f2086bb5fe5dbfd17d8d5f502d48759834b" translate="yes" xml:space="preserve">
          <source>Other</source>
          <target state="translated">Other</target>
        </trans-unit>
        <trans-unit id="5ad09dd090c8718838113f73d1171adb4a590c71" translate="yes" xml:space="preserve">
          <source>Other &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; operations clash with &lt;a href=&quot;data-bytestring&quot;&gt;Data.ByteString&lt;/a&gt; or &lt;a href=&quot;../base-4.13.0.0/prelude&quot;&gt;Prelude&lt;/a&gt; functions however, so they should be imported &lt;code&gt;qualified&lt;/code&gt; with a different alias e.g.</source>
          <target state="translated">其他 &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; 操作与冲突&lt;a href=&quot;data-bytestring&quot;&gt;Data.ByteString&lt;/a&gt;或&lt;a href=&quot;../base-4.13.0.0/prelude&quot;&gt;前奏&lt;/a&gt;功能然而，那他们应该引进 &lt;code&gt;qualified&lt;/code&gt; 有不同的别名如</target>
        </trans-unit>
        <trans-unit id="97d83121e95b29befe338184898beb90ca66afb8" translate="yes" xml:space="preserve">
          <source>Other &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; operations clash with &lt;a href=&quot;data-bytestring&quot;&gt;Data.ByteString&lt;/a&gt; or &lt;a href=&quot;../base-4.14.1.0/prelude&quot;&gt;Prelude&lt;/a&gt; functions however, so they should be imported &lt;code&gt;qualified&lt;/code&gt; with a different alias e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d5fbcca333f989fd2b0f0cf8199618b39f1bd3" translate="yes" xml:space="preserve">
          <source>Other Haskell systems do not currently support multiple operating system threads.</source>
          <target state="translated">其他Haskell系统目前不支持多个操作系统线程。</target>
        </trans-unit>
        <trans-unit id="778e98a9766b655c4f188fb5d617327629ecdb0a" translate="yes" xml:space="preserve">
          <source>Other applications like the graphical Concurrent Haskell Debugger (&lt;a href=&quot;http://www.informatik.uni-kiel.de/~fhu/chd/&quot;&gt;http://www.informatik.uni-kiel.de/~fhu/chd/&lt;/a&gt;) may choose to overload &lt;code&gt;&lt;a href=&quot;ghc-conc#v:labelThread&quot;&gt;labelThread&lt;/a&gt;&lt;/code&gt; for their purposes as well.</source>
          <target state="translated">图形应用程序并发Haskell调试器（&lt;a href=&quot;http://www.informatik.uni-kiel.de/~fhu/chd/&quot;&gt;http://www.informatik.uni-kiel.de/~fhu/chd/&lt;/a&gt;）等其他应用程序也可能出于其目的选择重载 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:labelThread&quot;&gt;labelThread&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9086a30a19ab20bd7cd31262ef8e704a3c0e4890" translate="yes" xml:space="preserve">
          <source>Other applications like the graphical Concurrent Haskell Debugger (&lt;a href=&quot;http://www.informatik.uni-kiel.de/~fhu/chd/&quot;&gt;http://www.informatik.uni-kiel.de/~fhu/chd/&lt;/a&gt;) may choose to overload &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:labelThread&quot;&gt;labelThread&lt;/a&gt;&lt;/code&gt; for their purposes as well.</source>
          <target state="translated">图形应用程序并发Haskell调试器（&lt;a href=&quot;http://www.informatik.uni-kiel.de/~fhu/chd/&quot;&gt;http://www.informatik.uni-kiel.de/~fhu/chd/&lt;/a&gt;）等其他应用程序也可能出于其目的选择重载 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:labelThread&quot;&gt;labelThread&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31deb74a58fba669a7c2cb31b6bed8515ab85d00" translate="yes" xml:space="preserve">
          <source>Other combinators</source>
          <target state="translated">其他组合体</target>
        </trans-unit>
        <trans-unit id="f717c91b4ff7b4e9135a9458b2f8146b78bb74a3" translate="yes" xml:space="preserve">
          <source>Other operations</source>
          <target state="translated">其他业务</target>
        </trans-unit>
        <trans-unit id="82169c7fc5215cf20135048050c38ee826497c85" translate="yes" xml:space="preserve">
          <source>Other operations such as &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:quotBigNat&quot;&gt;quotBigNat&lt;/a&gt;&lt;/code&gt; may return &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:nullBigNat&quot;&gt;nullBigNat&lt;/a&gt;&lt;/code&gt; as well as a dummy/place-holder value instead of &lt;code&gt;undefined&lt;/code&gt; since we can't throw exceptions. But that behaviour should not be relied upon.</source>
          <target state="translated">其他操作，例如 &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:quotBigNat&quot;&gt;quotBigNat&lt;/a&gt;&lt;/code&gt; ,可能会返回 &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:nullBigNat&quot;&gt;nullBigNat&lt;/a&gt;&lt;/code&gt; 以及一个虚拟值/占位符值，而不是 &lt;code&gt;undefined&lt;/code&gt; 值，因为我们不能抛出异常。但是，这种行为不应该被依靠。</target>
        </trans-unit>
        <trans-unit id="9047c6f96c316a252e973efb632599db44d02ce4" translate="yes" xml:space="preserve">
          <source>Other special syntax: sequences of characters that have a different meaning when this particular option is turned on.</source>
          <target state="translated">其他特殊语法:当这个特殊选项被打开时,具有不同意义的字符序列。</target>
        </trans-unit>
        <trans-unit id="91b29ffa8ce218d650e0c973969ab7a599e5a143" translate="yes" xml:space="preserve">
          <source>Other stuff</source>
          <target state="translated">其他东西</target>
        </trans-unit>
        <trans-unit id="4b372c318a0ac15f1e50d7fd1a01e206248a8e63" translate="yes" xml:space="preserve">
          <source>Other than these two caveats, users can always expect that a finalizer will be run after its weak pointer's object becomes unreachable. However, the second caveat means that users need to trust that all of their transitive dependencies do not throw exceptions in finalizers, since any finalizers can end up queued together.</source>
          <target state="translated">除了这两个注意事项之外,用户总是可以期望在其弱指针的对象变得无法到达之后,最终确定器会被运行。然而,第二个注意事项意味着用户需要相信他们所有的转义依赖不会在最终确定器中抛出异常,因为任何最终确定器都可能最终一起排队。</target>
        </trans-unit>
        <trans-unit id="8c5befcc2e0951ae7c577c186d5015110ab50c93" translate="yes" xml:space="preserve">
          <source>Other types</source>
          <target state="translated">其他类型</target>
        </trans-unit>
        <trans-unit id="c871109d68307ac18e84ee307aacea963e4970b3" translate="yes" xml:space="preserve">
          <source>Other uses of &lt;code&gt;unsafeCoerce#&lt;/code&gt; are undefined. In particular, you should not use &lt;code&gt;unsafeCoerce#&lt;/code&gt; to cast a T to an algebraic data type D, unless T is also an algebraic data type. For example, do not cast &lt;code&gt;Int-&amp;gt;Int&lt;/code&gt; to &lt;code&gt;Bool&lt;/code&gt;, even if you later cast that &lt;code&gt;Bool&lt;/code&gt; back to &lt;code&gt;Int-&amp;gt;Int&lt;/code&gt; before applying it. The reasons have to do with GHC's internal representation details (for the cognoscenti, data values can be entered but function closures cannot). If you want a safe type to cast things to, use &lt;code&gt;Any&lt;/code&gt;, which is not an algebraic data type.</source>
          <target state="translated">&lt;code&gt;unsafeCoerce#&lt;/code&gt; 的其他用途是不确定的。特别是，除非T也是代数数据类型，否则不应使用 &lt;code&gt;unsafeCoerce#&lt;/code&gt; 将T转换为代数数据类型D。例如，请勿将 &lt;code&gt;Int-&amp;gt;Int&lt;/code&gt; 强制转换为 &lt;code&gt;Bool&lt;/code&gt; ，即使稍后在应用该 &lt;code&gt;Bool&lt;/code&gt; 之前将其转换为 &lt;code&gt;Int-&amp;gt;Int&lt;/code&gt; 。原因与GHC的内部表示详细信息有关（对于cognoscenti，可以输入数据值，但不能关闭函数）。如果要使用安全类型来强制转换，请使用 &lt;code&gt;Any&lt;/code&gt; ，这不是代数数据类型。</target>
        </trans-unit>
        <trans-unit id="3cca89d1c6f9e6b7edb2c91666360061ed277fff" translate="yes" xml:space="preserve">
          <source>OtherError</source>
          <target state="translated">OtherError</target>
        </trans-unit>
        <trans-unit id="b004f25ba2f862ca69a0ad498024ce48dcec48b4" translate="yes" xml:space="preserve">
          <source>OtherLetter</source>
          <target state="translated">OtherLetter</target>
        </trans-unit>
        <trans-unit id="79976ff76f967e06eb59c60ae5e3d4d8d8f1dea8" translate="yes" xml:space="preserve">
          <source>OtherNumber</source>
          <target state="translated">OtherNumber</target>
        </trans-unit>
        <trans-unit id="2fe5dcff8470fff0318c0b5bff7bb23017100fe8" translate="yes" xml:space="preserve">
          <source>OtherPunctuation</source>
          <target state="translated">OtherPunctuation</target>
        </trans-unit>
        <trans-unit id="7d352f6a13bd8fb7c6cafa22cba1529a45d2c13e" translate="yes" xml:space="preserve">
          <source>OtherSymbol</source>
          <target state="translated">OtherSymbol</target>
        </trans-unit>
        <trans-unit id="a8f27da35e68a9f7a5a97f1703ac92769848a8d4" translate="yes" xml:space="preserve">
          <source>Others have execute permission.</source>
          <target state="translated">其他人有执行权限。</target>
        </trans-unit>
        <trans-unit id="a4b5a656b29825a9211b83ccae7336ee695ce161" translate="yes" xml:space="preserve">
          <source>Others have read permission.</source>
          <target state="translated">其他人已经阅读了许可。</target>
        </trans-unit>
        <trans-unit id="25f01ea5949b3e11544a08901cd4fc6b386f3f43" translate="yes" xml:space="preserve">
          <source>Others have read, write and execute permission.</source>
          <target state="translated">其他人有读、写和执行权限。</target>
        </trans-unit>
        <trans-unit id="fc0d4f6a481380e178acd3897e6a60f3ade59b6a" translate="yes" xml:space="preserve">
          <source>Others have write permission.</source>
          <target state="translated">其他人有写权限。</target>
        </trans-unit>
        <trans-unit id="49385a99644f84243228dd0e51c68c048e901bf5" translate="yes" xml:space="preserve">
          <source>Otherwise GHC will solve the &lt;code&gt;HasCallStack&lt;/code&gt; constraint for the singleton &lt;code&gt;CallStack&lt;/code&gt; containing just the current call-site.</source>
          <target state="translated">否则，GHC将解决 &lt;code&gt;CallStack&lt;/code&gt; 包含当前呼叫站点的单例CallStack的 &lt;code&gt;HasCallStack&lt;/code&gt; 约束。</target>
        </trans-unit>
        <trans-unit id="73b9866b09caa352e14869afa4a22348cbf03067" translate="yes" xml:space="preserve">
          <source>Otherwise there is exactly one non-incoherent candidate; call it the &amp;ldquo;prime candidate&amp;rdquo;.</source>
          <target state="translated">否则，只有一个非相干候选者；称其为&amp;ldquo;主要候选人&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="fb76a4f7af9550821f6b9b31e5732f8573d196f6" translate="yes" xml:space="preserve">
          <source>Otherwise uses home directory returned by &lt;code&gt;getpwuid_r&lt;/code&gt; using the UID of the current proccesses user. This basically reads the &lt;em&gt;etc&lt;/em&gt;passwd file. An empty home directory field is considered valid.</source>
          <target state="translated">否则，使用当前进程用户的UID使用 &lt;code&gt;getpwuid_r&lt;/code&gt; 返回的主目录。这基本上是读取&lt;em&gt;etc&lt;/em&gt; passwd文件。空的主目录字段被视为有效。</target>
        </trans-unit>
        <trans-unit id="165546d2f6cedba70f1aef6539fe75331eec72db" translate="yes" xml:space="preserve">
          <source>Otherwise, in the common case of a simple type error such as typing &lt;code&gt;reverse True&lt;/code&gt; at the prompt, you would get a warning and then an immediately-following type error when the expression is evaluated.</source>
          <target state="translated">否则，在简单类型错误的常见情况下（例如在提示符下键入 &lt;code&gt;reverse True&lt;/code&gt; )，在计算表达式时，您将得到警告，然后是紧随其后的类型错误。</target>
        </trans-unit>
        <trans-unit id="9328699bfa5be08b83f54b0c37225de2cd8e0bd2" translate="yes" xml:space="preserve">
          <source>Otherwise, it behaves like &lt;code&gt;ghc-pkg list&lt;/code&gt;, including options.</source>
          <target state="translated">否则，其行为类似于 &lt;code&gt;ghc-pkg list&lt;/code&gt; ，包括选项。</target>
        </trans-unit>
        <trans-unit id="122c01da0c009875e86f7f7f7990dd90b8f65d05" translate="yes" xml:space="preserve">
          <source>Out of scope term variables</source>
          <target state="translated">范围外的术语变量</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="dcd804196c4ab4c07a7fb9d32d6dd85f499cdd67" translate="yes" xml:space="preserve">
          <source>Output a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; is executed directly on the buffer of the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. If the buffer is too small (or not present), then it is replaced with a large enough buffer.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 输出到 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 。所述 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 被直接执行对的缓冲器 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 。如果缓冲区太小（或不存在），则将其替换为足够大的缓冲区。</target>
        </trans-unit>
        <trans-unit id="ce49a024c5b74db9ad28503714f87c2bd1cb09a1" translate="yes" xml:space="preserve">
          <source>Output a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; is executed directly on the buffer of the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. If the buffer is too small (or not present), then it is replaced with a large enough buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faccf69b130383a7a701fa6e58ffeb062f573f54" translate="yes" xml:space="preserve">
          <source>Output errors in reverse order</source>
          <target state="translated">按相反顺序输出错误</target>
        </trans-unit>
        <trans-unit id="5218d9a3d99e1852dea200794dafd520fce146d7" translate="yes" xml:space="preserve">
          <source>Output full span in error messages</source>
          <target state="translated">在错误信息中输出完整的跨度</target>
        </trans-unit>
        <trans-unit id="364167f7b761668d223893cadae4f828c7c2fa44" translate="yes" xml:space="preserve">
          <source>Output functions</source>
          <target state="translated">输出功能</target>
        </trans-unit>
        <trans-unit id="fbd84c24ac8d22f5181f1bc88f9671c4344d5b53" translate="yes" xml:space="preserve">
          <source>Output is returned strictly, so this is not suitable for launching processes that require interaction over the standard file streams.</source>
          <target state="translated">输出是严格返回的,所以不适合启动需要通过标准文件流进行交互的进程。</target>
        </trans-unit>
        <trans-unit id="d56117c403f664c3e1ed706f67f62dcab08add06" translate="yes" xml:space="preserve">
          <source>Output preprocessor dependencies. This only has an effect when the CPP language extension is enabled. These dependencies are files included with the &lt;code&gt;#include&lt;/code&gt; preprocessor directive (as well as transitive includes) and implicitly included files such as standard c preprocessor headers and a GHC version header. One exception to this is that GHC generates a temporary header file (during compilation) containing package version macros. As this is only a temporary file that GHC will always generate, it is not output as a dependency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e103798c3274cee279fa6992b0f5932f325fa5ac" translate="yes" xml:space="preserve">
          <source>Output the &lt;code&gt;ghc-pkg&lt;/code&gt; version number.</source>
          <target state="translated">输出 &lt;code&gt;ghc-pkg&lt;/code&gt; 版本号。</target>
        </trans-unit>
        <trans-unit id="ec3a20e9b85c9c73b5f9e136d68ee50ad77983fe" translate="yes" xml:space="preserve">
          <source>Output the HTML without adding newlines or spaces within the markup. This should be the most time and space efficient way to render HTML, though the ouput is quite unreadable.</source>
          <target state="translated">输出HTML时,不在标记中添加换行或空格。这应该是最节省时间和空间的渲染HTML的方式,尽管输出的结果很难读。</target>
        </trans-unit>
        <trans-unit id="ed8e0c3be25bb282bdb7ed21575be0568a2ea8ce" translate="yes" xml:space="preserve">
          <source>Output version information and exit successfully.</source>
          <target state="translated">输出版本信息,成功退出。</target>
        </trans-unit>
        <trans-unit id="d76b710eda6d9732ae60ae3688eb9124d03137ca" translate="yes" xml:space="preserve">
          <source>OutputCap</source>
          <target state="translated">OutputCap</target>
        </trans-unit>
        <trans-unit id="3210573c1fb5e651cb8a6253bec6053d0ba32e16" translate="yes" xml:space="preserve">
          <source>OutputQueue</source>
          <target state="translated">OutputQueue</target>
        </trans-unit>
        <trans-unit id="1478d601c03c445a904d445d7c3e8cec48d16838" translate="yes" xml:space="preserve">
          <source>OutputUnderflow</source>
          <target state="translated">OutputUnderflow</target>
        </trans-unit>
        <trans-unit id="2bbfd1ba36d0c76586f52911ecb048b6eac561d8" translate="yes" xml:space="preserve">
          <source>Outputs a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to the specified &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 输出到指定的 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3921704966c02cc64ce4b5f314c1cf70c103f53f" translate="yes" xml:space="preserve">
          <source>Outputs a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to the specified &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdabf64a0b25e97a2bcdfbcbab9832f9fb21a8e2" translate="yes" xml:space="preserve">
          <source>Outputs a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to the specified &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 输出到指定的 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ce4268dda332085e9857fd93d80106998f5a9cf6" translate="yes" xml:space="preserve">
          <source>Outputs a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to the specified &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2be19b4f59c90e2b571c4c57a78af1c21f19989" translate="yes" xml:space="preserve">
          <source>Outputs a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to the specified &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. The chunks will be written one at a time. Other threads might write to the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; between the writes, and hence &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; alone might not be suitable for concurrent writes.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 输出到指定的 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 。这些块将一次写入一个。其他线程可能在 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; 写入之间向 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 写入，因此仅hPut可能不适用于并发写入。</target>
        </trans-unit>
        <trans-unit id="2b18f35ca8a8c8c01b6e67812f93b06a07030750" translate="yes" xml:space="preserve">
          <source>Outputs a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to the specified &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. The chunks will be written one at a time. Other threads might write to the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; between the writes, and hence &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; alone might not be suitable for concurrent writes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f34b67d163777be1cfe43137e0b8aa27949758" translate="yes" xml:space="preserve">
          <source>Outputs a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to the specified &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. The chunks will be written one at a time. Other threads might write to the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; between the writes, and hence &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; alone might not be suitable for concurrent writes.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 输出到指定的 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 。这些块将一次写入一个。其他线程可能在 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; 写入之间向 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 写入，因此仅hPut可能不适用于并发写入。</target>
        </trans-unit>
        <trans-unit id="92437970ef11779b851993774cf3f2a23f482a62" translate="yes" xml:space="preserve">
          <source>Outputs a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to the specified &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. The chunks will be written one at a time. Other threads might write to the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; between the writes, and hence &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:hPut&quot;&gt;hPut&lt;/a&gt;&lt;/code&gt; alone might not be suitable for concurrent writes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437c6c5b9e71301759333f52e620b482f7d4e6a3" translate="yes" xml:space="preserve">
          <source>Outputs indented HTML, with indentation inside elements. This can change the meaning of the HTML document, and is mostly useful for debugging the HTML output. The implementation is inefficient, and you are normally better off using &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#v:showHtml&quot;&gt;showHtml&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#v:renderHtml&quot;&gt;renderHtml&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">输出缩进的HTML，并在元素内部缩进。这可以更改HTML文档的含义，并且对于调试HTML输出最有用。实现效率低下，通常最好使用 &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#v:showHtml&quot;&gt;showHtml&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#v:renderHtml&quot;&gt;renderHtml&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e9342f2cf13303d6a47b5d18b92f9cf13b2e5169" translate="yes" xml:space="preserve">
          <source>Outputs indented HTML, with indentation inside elements. This can change the meaning of the HTML document, and is mostly useful for debugging the HTML output. The implementation is inefficient, and you are normally better off using &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#v:showHtml&quot;&gt;showHtml&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#v:renderHtml&quot;&gt;renderHtml&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">输出缩进的HTML，并在元素内部缩进。这可以更改HTML文档的含义，并且对于调试HTML输出最有用。实现效率低下，通常最好使用 &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#v:showHtml&quot;&gt;showHtml&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#v:renderHtml&quot;&gt;renderHtml&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="19430befa515c2d9064f3110f0aa35abc26dd1f3" translate="yes" xml:space="preserve">
          <source>Outputs indented HTML, with indentation inside elements. This can change the meaning of the HTML document, and is mostly useful for debugging the HTML output. The implementation is inefficient, and you are normally better off using &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#v:showHtml&quot;&gt;showHtml&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#v:renderHtml&quot;&gt;renderHtml&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">输出缩进的HTML，并在元素内部缩进。这可以更改HTML文档的含义，并且对于调试HTML输出最有用。实现效率低下，通常最好使用 &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#v:showHtml&quot;&gt;showHtml&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#v:renderHtml&quot;&gt;renderHtml&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="582cb8658b32442aec042d63a5cfab472fe58413" translate="yes" xml:space="preserve">
          <source>Outputs indented HTML. Because space matters in HTML, the output is quite messy.</source>
          <target state="translated">输出缩进的HTML。因为HTML中的空间很重要,所以输出的内容很乱。</target>
        </trans-unit>
        <trans-unit id="b7f803909184a1a75bdfd2d4f7c735bb61a3e949" translate="yes" xml:space="preserve">
          <source>Outputs indented XHTML. Because space matters in HTML, the output is quite messy.</source>
          <target state="translated">输出缩进的XHTML。因为HTML中的空间很重要,所以输出的内容很乱。</target>
        </trans-unit>
        <trans-unit id="eb7db7a58078fc2825bd0a031efa804f437af7c6" translate="yes" xml:space="preserve">
          <source>Outputs the command-line syntax.</source>
          <target state="translated">输出命令行语法。</target>
        </trans-unit>
        <trans-unit id="7119c6e28cbbe42a656bd510a3c7d9802856a05d" translate="yes" xml:space="preserve">
          <source>Outputting text</source>
          <target state="translated">输出文本</target>
        </trans-unit>
        <trans-unit id="4da7bc9200c71949eae8135d4a25bb5b299cf7cc" translate="yes" xml:space="preserve">
          <source>Overflow</source>
          <target state="translated">Overflow</target>
        </trans-unit>
        <trans-unit id="86b5bfa21ad7befe5b7734642489ec9bc1748da2" translate="yes" xml:space="preserve">
          <source>Overlap</source>
          <target state="translated">Overlap</target>
        </trans-unit>
        <trans-unit id="2e8a35cfdb5657a597ecf6c9392cc4a625880c7a" translate="yes" xml:space="preserve">
          <source>Overlappable</source>
          <target state="translated">Overlappable</target>
        </trans-unit>
        <trans-unit id="4595ccd7bc9e0af583db794795f5853d40095221" translate="yes" xml:space="preserve">
          <source>Overlapping</source>
          <target state="translated">Overlapping</target>
        </trans-unit>
        <trans-unit id="66015fffae6c6a9653fc601aa127c669c9f7f142" translate="yes" xml:space="preserve">
          <source>Overlapping instances must be used with care. They can give rise to incoherence (i.e. different instance choices are made in different parts of the program) even without &lt;a href=&quot;#extension-IncoherentInstances&quot;&gt;&lt;code&gt;IncoherentInstances&lt;/code&gt;&lt;/a&gt;. Consider:</source>
          <target state="translated">重叠实例必须谨慎使用。即使没有&lt;a href=&quot;#extension-IncoherentInstances&quot;&gt; &lt;code&gt;IncoherentInstances&lt;/code&gt; ,&lt;/a&gt;它们也可能引起不一致（即，在程序的不同部分中选择了不同的实例）。考虑：</target>
        </trans-unit>
        <trans-unit id="d1523bffa7a001e9a35e090d7fb6d2c81a06dbc6" translate="yes" xml:space="preserve">
          <source>OverlappingInstances</source>
          <target state="translated">OverlappingInstances</target>
        </trans-unit>
        <trans-unit id="a8f9e73a31d1ecafa5203f5b5c4b88f1a16e5e78" translate="yes" xml:space="preserve">
          <source>Overlaps</source>
          <target state="translated">Overlaps</target>
        </trans-unit>
        <trans-unit id="33bfb3c6026c4b45ecc7feb8aafe2ca9f3b3173c" translate="yes" xml:space="preserve">
          <source>Overlays are an experimental feature of HPC, a textual description of coverage. hpc draft is used to generate a draft overlay from a .tix file, and hpc overlay generates a .tix files from an overlay.</source>
          <target state="translated">叠加是HPC的一个实验性功能,是对覆盖范围的文字描述。hpc draft用于从.tix文件中生成一个草稿叠加,hpc overlay则从叠加中生成一个.tix文件。</target>
        </trans-unit>
        <trans-unit id="a8b4cac7022105ed5d28059687f452f232ee8a94" translate="yes" xml:space="preserve">
          <source>Overloaded functions are not your friend:</source>
          <target state="translated">过载的功能不是你的朋友。</target>
        </trans-unit>
        <trans-unit id="97176dd8fcd9d1389997c9bc3e797197c3840bf4" translate="yes" xml:space="preserve">
          <source>Overloaded lists</source>
          <target state="translated">超载名单</target>
        </trans-unit>
        <trans-unit id="e8bd3aa687e1a738e55c3636a509b286641773a4" translate="yes" xml:space="preserve">
          <source>Overloaded mutable array interface</source>
          <target state="translated">重载的可变数组接口</target>
        </trans-unit>
        <trans-unit id="e60511daee4f7111180ca7e032a2951fd849e4ee" translate="yes" xml:space="preserve">
          <source>Overloaded string literals</source>
          <target state="translated">字符串过载</target>
        </trans-unit>
        <trans-unit id="d6d7cf52e6ad94223f1634444b6ca253e18d7307" translate="yes" xml:space="preserve">
          <source>OverloadedLabels</source>
          <target state="translated">OverloadedLabels</target>
        </trans-unit>
        <trans-unit id="bfc0c0637f5d2341f692e6b4349a28ae53c2ed8b" translate="yes" xml:space="preserve">
          <source>OverloadedLists</source>
          <target state="translated">OverloadedLists</target>
        </trans-unit>
        <trans-unit id="21198418d476e74157738de8ed502c9d0fdf2bb9" translate="yes" xml:space="preserve">
          <source>OverloadedStrings</source>
          <target state="translated">OverloadedStrings</target>
        </trans-unit>
        <trans-unit id="f8883c62e6c0e5fff7f6dbed0dfb6ac51a5a5e1f" translate="yes" xml:space="preserve">
          <source>Override default behaviour for source files</source>
          <target state="translated">覆盖源文件的默认行为</target>
        </trans-unit>
        <trans-unit id="6d84840c6065dcaf391a05992267b78411ef4230" translate="yes" xml:space="preserve">
          <source>Owing to the vagaries of DLL linking, these hooks don&amp;rsquo;t work under Windows when the program is built dynamically.</source>
          <target state="translated">由于DLL链接的变化无常，因此在Windows动态构建程序时这些挂钩在Windows下不起作用。</target>
        </trans-unit>
        <trans-unit id="32e42d7cf1d8ef849a65b5a64f751115cac94630" translate="yes" xml:space="preserve">
          <source>Owner has execute permission.</source>
          <target state="translated">业主有执行权限。</target>
        </trans-unit>
        <trans-unit id="3602226bffa2bf2cc1004ff7d38eed8270dc876b" translate="yes" xml:space="preserve">
          <source>Owner has read permission.</source>
          <target state="translated">业主已阅读权限。</target>
        </trans-unit>
        <trans-unit id="77086e57cff582a02a6797d6af8ebc3a53898204" translate="yes" xml:space="preserve">
          <source>Owner has read, write and execute permission.</source>
          <target state="translated">所有者有读、写和执行权限。</target>
        </trans-unit>
        <trans-unit id="7347b7f7b6214962e6cdded97a0459692c3eb4cb" translate="yes" xml:space="preserve">
          <source>Owner has write permission.</source>
          <target state="translated">业主有书面许可。</target>
        </trans-unit>
        <trans-unit id="16f821171aa7e9231ae6975fc208a27c4266781f" translate="yes" xml:space="preserve">
          <source>Owner, group and others have read and write permission.</source>
          <target state="translated">业主、组等有读写权限。</target>
        </trans-unit>
        <trans-unit id="e523f78f39ca6a4d4e48aaa4794b482ae4b16989" translate="yes" xml:space="preserve">
          <source>Owner, group and others have read, write and execute permission.</source>
          <target state="translated">业主、组等有读、写、执行权限。</target>
        </trans-unit>
        <trans-unit id="804c55046a7d6c2cc06d260ab90e0d6beedbce3b" translate="yes" xml:space="preserve">
          <source>P's complete type is of the following form</source>
          <target state="translated">P的完整类型为以下形式。</target>
        </trans-unit>
        <trans-unit id="b38cb0ee15cbdc945a4dd5af71e0ea5ff7337a56" translate="yes" xml:space="preserve">
          <source>PACL</source>
          <target state="translated">PACL</target>
        </trans-unit>
        <trans-unit id="048499ce23d04eb40ace8750a382f648336913e9" translate="yes" xml:space="preserve">
          <source>PAINTSTRUCT</source>
          <target state="translated">PAINTSTRUCT</target>
        </trans-unit>
        <trans-unit id="ad09b4bfdbe4d101135fff62d526064595a08512" translate="yes" xml:space="preserve">
          <source>PHANDLE</source>
          <target state="translated">PHANDLE</target>
        </trans-unit>
        <trans-unit id="1dd2c6c79f5967008b3710173dafb5d91bf6f2af" translate="yes" xml:space="preserve">
          <source>PHANDLER_ROUTINE</source>
          <target state="translated">PHANDLER_ROUTINE</target>
        </trans-unit>
        <trans-unit id="7e7f65d76167ed1ddaafc5081c1471db12872a25" translate="yes" xml:space="preserve">
          <source>PHARDWAREINPUT</source>
          <target state="translated">PHARDWAREINPUT</target>
        </trans-unit>
        <trans-unit id="85e8f21e7df070dfbfb33b827711de398d912fd4" translate="yes" xml:space="preserve">
          <source>PINPUT</source>
          <target state="translated">PINPUT</target>
        </trans-unit>
        <trans-unit id="0b9ca3c7e43bcb3e5b2891c4396b2710f3cbde31" translate="yes" xml:space="preserve">
          <source>PKEY</source>
          <target state="translated">PKEY</target>
        </trans-unit>
        <trans-unit id="1820a15854141d70e90716d788ea58c3c229d171" translate="yes" xml:space="preserve">
          <source>PMOUSEINPUT</source>
          <target state="translated">PMOUSEINPUT</target>
        </trans-unit>
        <trans-unit id="aa6c6e71142e2a18efab6e799dedaa71f848c830" translate="yes" xml:space="preserve">
          <source>POSIX IO support. These types and functions correspond to the unix functions open(2), close(2), etc. For more portable functions which are more like fopen(3) and friends from stdio.h, see &lt;a href=&quot;../base-4.13.0.0/system-io&quot;&gt;System.IO&lt;/a&gt;.</source>
          <target state="translated">POSIX IO支持。这些类型和函数与unix函数open（2），close（2）等相对应。有关更多可移植函数，例如fopen（3）和stdio.h的朋友，请参见&lt;a href=&quot;../base-4.13.0.0/system-io&quot;&gt;System.IO&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="977519e345c48d6b762f0fe7418ce9a32ef4bccc" translate="yes" xml:space="preserve">
          <source>POSIX IO support. These types and functions correspond to the unix functions open(2), close(2), etc. For more portable functions which are more like fopen(3) and friends from stdio.h, see &lt;a href=&quot;../base-4.14.1.0/system-io&quot;&gt;System.IO&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="079d0f57f2334c2adbdc7591a011db4dd709359a" translate="yes" xml:space="preserve">
          <source>POSIX Terminal support</source>
          <target state="translated">POSIX终端支持</target>
        </trans-unit>
        <trans-unit id="22aca2377521adf00292736ce43c51b0c7e32ea3" translate="yes" xml:space="preserve">
          <source>POSIX Time support</source>
          <target state="translated">POSIX时间支持</target>
        </trans-unit>
        <trans-unit id="292baf4f2f262bc63b703e55a72343bbb3636618" translate="yes" xml:space="preserve">
          <source>POSIX data types</source>
          <target state="translated">POSIX数据类型</target>
        </trans-unit>
        <trans-unit id="318e90ecf5469e2adbc593a53864478fbcf3bad5" translate="yes" xml:space="preserve">
          <source>POSIX data types: Haskell equivalents of the types defined by the &lt;code&gt;&amp;lt;sys/types.h&amp;gt;&lt;/code&gt; C header on a POSIX system.</source>
          <target state="translated">POSIX数据类型：POSIX系统上由 &lt;code&gt;&amp;lt;sys/types.h&amp;gt;&lt;/code&gt; C头定义的类型的Haskell等效项。</target>
        </trans-unit>
        <trans-unit id="bb81ead9bcb349c7209884ed07f7695a7f46f32c" translate="yes" xml:space="preserve">
          <source>POSIX defines operations to get information, such as owner, permissions, size and access times, about a file. This information is represented by the &lt;code&gt;&lt;a href=&quot;system-posix-files#t:FileStatus&quot;&gt;FileStatus&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">POSIX定义用于获取有关文件的信息的操作，例如所有者，权限，大小和访问时间。此信息由 &lt;code&gt;&lt;a href=&quot;system-posix-files#t:FileStatus&quot;&gt;FileStatus&lt;/a&gt;&lt;/code&gt; 类型表示。</target>
        </trans-unit>
        <trans-unit id="4a83136c082ba1746dcd67b3e4264fcabc3118b4" translate="yes" xml:space="preserve">
          <source>POSIX defines operations to get information, such as owner, permissions, size and access times, about a file. This information is represented by the &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#t:FileStatus&quot;&gt;FileStatus&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">POSIX定义用于获取有关文件的信息的操作，例如所有者，权限，大小和访问时间。此信息由 &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#t:FileStatus&quot;&gt;FileStatus&lt;/a&gt;&lt;/code&gt; 类型表示。</target>
        </trans-unit>
        <trans-unit id="c2247d636852d4974c20bc81cef3eee8f8693cb1" translate="yes" xml:space="preserve">
          <source>POSIX environment support</source>
          <target state="translated">支持POSIX环境</target>
        </trans-unit>
        <trans-unit id="77ab5f467c12abe5e944670123be671c69f9c1ad" translate="yes" xml:space="preserve">
          <source>POSIX error support</source>
          <target state="translated">支持POSIX错误</target>
        </trans-unit>
        <trans-unit id="577fae15c03302f9533fba712b949371600860a0" translate="yes" xml:space="preserve">
          <source>POSIX file control support</source>
          <target state="translated">支持POSIX文件控制</target>
        </trans-unit>
        <trans-unit id="441cd303356e44c35c8b81962cf0dd9d836ac5e9" translate="yes" xml:space="preserve">
          <source>POSIX miscellaneous stuff, mostly from unistd.h</source>
          <target state="translated">POSIX杂七杂八的东西,大部分来自unistd.h。</target>
        </trans-unit>
        <trans-unit id="0f6ec8374b30a1b5c96490a77a0ceae4de07fc7d" translate="yes" xml:space="preserve">
          <source>POSIX named semaphore support.</source>
          <target state="translated">支持POSIX命名的旗语。</target>
        </trans-unit>
        <trans-unit id="08bafc86e53a454435af5c1c18fc679a44dc565c" translate="yes" xml:space="preserve">
          <source>POSIX process support. See also the System.Cmd and System.Process modules in the process package.</source>
          <target state="translated">POSIX进程支持。也请参见进程包中的System.Cmd和System.Process模块。</target>
        </trans-unit>
        <trans-unit id="654e2e0f35661132458d5d0822add53293643b2a" translate="yes" xml:space="preserve">
          <source>POSIX resource support</source>
          <target state="translated">POSIX资源支持</target>
        </trans-unit>
        <trans-unit id="ebcc5225834879beb7456c935b043f8860521e53" translate="yes" xml:space="preserve">
          <source>POSIX shared memory support.</source>
          <target state="translated">支持POSIX共享内存。</target>
        </trans-unit>
        <trans-unit id="45920651e67f5412a47b9d8f7bc47165c18613b2" translate="yes" xml:space="preserve">
          <source>POSIX signal support</source>
          <target state="translated">支持POSIX信号</target>
        </trans-unit>
        <trans-unit id="4502a50a73e2d715093b7326bc2eb514a0e679e0" translate="yes" xml:space="preserve">
          <source>POSIX temporary file and directory creation functions.</source>
          <target state="translated">POSIX临时文件和目录创建功能。</target>
        </trans-unit>
        <trans-unit id="3fab173d191fed500e90a6dee632c803a84facb1" translate="yes" xml:space="preserve">
          <source>POSIX time is the nominal time since 1970-01-01 00:00 UTC</source>
          <target state="translated">POSIX时间是自1970-01-01 00:00 UTC以来的名义时间。</target>
        </trans-unit>
        <trans-unit id="58f93d74398f0946ad737dd9368214ee4e669e99" translate="yes" xml:space="preserve">
          <source>POSIX time, if you need to deal with timestamps and the like. Most people won't need this module.</source>
          <target state="translated">POSIX时间,如果你需要处理时间戳之类的东西。大多数人不需要这个模块。</target>
        </trans-unit>
        <trans-unit id="b94c2396f7667c2847b93362ca54298f2a041bb0" translate="yes" xml:space="preserve">
          <source>POSIX user/group support</source>
          <target state="translated">POSIX用户/组支持</target>
        </trans-unit>
        <trans-unit id="1432f73e88b32fcc9fcbc2fc9541f54571421a18" translate="yes" xml:space="preserve">
          <source>POSIX: either file or directory link; Windows: file link</source>
          <target state="translated">POSIX:文件或目录链接;Windows:文件链接。</target>
        </trans-unit>
        <trans-unit id="c5f7093efb2198f16b7b44117d72ea5f7c731b36" translate="yes" xml:space="preserve">
          <source>POSIXTime</source>
          <target state="translated">POSIXTime</target>
        </trans-unit>
        <trans-unit id="6fa84fb314e576ad58ab64235ec9f5692ff698e9" translate="yes" xml:space="preserve">
          <source>POSVERSIONINFOEX</source>
          <target state="translated">POSVERSIONINFOEX</target>
        </trans-unit>
        <trans-unit id="bb2083b91dbcda1acd7b19d79a3721e0e2c32aa6" translate="yes" xml:space="preserve">
          <source>PROPORTION</source>
          <target state="translated">PROPORTION</target>
        </trans-unit>
        <trans-unit id="48a6bb377c2d242262af4edce1280a39ef449e2a" translate="yes" xml:space="preserve">
          <source>PSID</source>
          <target state="translated">PSID</target>
        </trans-unit>
        <trans-unit id="3051dda3f76f70a2a56f76bf7a6055149e32138b" translate="yes" xml:space="preserve">
          <source>PUCHAR</source>
          <target state="translated">PUCHAR</target>
        </trans-unit>
        <trans-unit id="8baf870b616352faf6c7c0ecdaf54c8968a6fcff" translate="yes" xml:space="preserve">
          <source>Pack the elements of an unboxed tuple into a vector.</source>
          <target state="translated">将一个未装箱的元组的元素打包成一个向量。</target>
        </trans-unit>
        <trans-unit id="f1a7e630429c6941a869ac578c4e8fd6c98967d0" translate="yes" xml:space="preserve">
          <source>Package &lt;code&gt;P&lt;/code&gt; is trusted by C</source>
          <target state="translated">程序包 &lt;code&gt;P&lt;/code&gt; 受C信任</target>
        </trans-unit>
        <trans-unit id="632c494fdb55eaa49a7e790eda0b61cb93138010" translate="yes" xml:space="preserve">
          <source>Package environments can be modified by further command line arguments; for example, if you specify &lt;code&gt;-package foo&lt;/code&gt; on the command line, then package ⟨foo⟩ will be visible even if it&amp;rsquo;s not listed in the currently active package environment.</source>
          <target state="translated">包环境可以通过其他命令行参数进行修改；例如，如果在命令行上指定 &lt;code&gt;-package foo&lt;/code&gt; ，则即使在当前活动的软件包环境中未列出软件包⟨foo⟩，也将可见。</target>
        </trans-unit>
        <trans-unit id="909c5fa9bb52d913940480e63569e9457c322a40" translate="yes" xml:space="preserve">
          <source>Package imports with thinning/renaming do not hide other versions of the package: e.g. if containers-0.9 is already exposed, &lt;code&gt;-package &quot;containers-0.8 (Data.List as ListV8)&quot;&lt;/code&gt; will only add an additional binding to the environment. Similarly, &lt;code&gt;-package &quot;base (Data.Bool as Bool)&quot; -package &quot;base (Data.List as List)&quot;&lt;/code&gt; is equivalent to &lt;code&gt;-package &quot;base (Data.Bool as Bool, Data.List as List)&quot;&lt;/code&gt;. Literal names must refer to modules defined by the original package, so for example &lt;code&gt;-package &quot;base (Data.Bool as Bool, Bool as Baz)&quot;&lt;/code&gt; is invalid unless there was a &lt;code&gt;Bool&lt;/code&gt; module defined in the original package. Hiding a package also clears all of its renamings.</source>
          <target state="translated">带有稀化/重新命名的软件包导入不会隐藏该软件包的其他版本：例如，如果已经暴露了container-0.9，则 &lt;code&gt;-package &quot;containers-0.8 (Data.List as ListV8)&quot;&lt;/code&gt; 将仅向环境添加附加绑定。类似地， &lt;code&gt;-package &quot;base (Data.Bool as Bool)&quot; -package &quot;base (Data.List as List)&quot;&lt;/code&gt; &lt;code&gt;-package &quot;base (Data.Bool as Bool, Data.List as List)&quot;&lt;/code&gt; 等效于-package&amp;ldquo; base（Data.Bool作为Bool，Data.List作为List）&amp;rdquo;。文字名称必须引用原始软件包定义的模块，因此，例如 &lt;code&gt;-package &quot;base (Data.Bool as Bool, Bool as Baz)&quot;&lt;/code&gt; 无效，除非原始软件包中定义了 &lt;code&gt;Bool&lt;/code&gt; 模块。隐藏软件包还会清除其所有重命名。</target>
        </trans-unit>
        <trans-unit id="5c9811b51086b6dfb42e84534c5b2b28e924b044" translate="yes" xml:space="preserve">
          <source>Package key of the package where the static pointer is defined</source>
          <target state="translated">定义了静态指针的包的包号。</target>
        </trans-unit>
        <trans-unit id="2218a05564cb586c32edc345988a8e44eb09178b" translate="yes" xml:space="preserve">
          <source>PackageImports</source>
          <target state="translated">PackageImports</target>
        </trans-unit>
        <trans-unit id="bd3f84301261878bbaaa34010d966279bf40adc1" translate="yes" xml:space="preserve">
          <source>Packed, unboxed, heap-resident arrays. Suitable for performance critical use, both in terms of large data quantities and high speed.</source>
          <target state="translated">打包、开箱、堆驻留阵列。适用于性能关键型的使用,无论是在大数据量还是高速方面。</target>
        </trans-unit>
        <trans-unit id="f01120d5c963de430516067cfc099589e4545ca8" translate="yes" xml:space="preserve">
          <source>Packing &lt;code&gt;CString&lt;/code&gt;s and pointers</source>
          <target state="translated">包装 &lt;code&gt;CString&lt;/code&gt; 和指针</target>
        </trans-unit>
        <trans-unit id="285f956c0084bc89a501b362eed07b802bf41e30" translate="yes" xml:space="preserve">
          <source>Packing CStrings and pointers</source>
          <target state="translated">包装CStrings和指针</target>
        </trans-unit>
        <trans-unit id="a0c8d65ca6bc539ca2a1b96b6e86e38a5baa9898" translate="yes" xml:space="preserve">
          <source>PageMode</source>
          <target state="translated">PageMode</target>
        </trans-unit>
        <trans-unit id="7bf87bd02ae06b49144154cc04ef67e79107b5b6" translate="yes" xml:space="preserve">
          <source>PairS</source>
          <target state="translated">PairS</target>
        </trans-unit>
        <trans-unit id="a0ef17e085dcffd83b4ea0ed40152454a057e949" translate="yes" xml:space="preserve">
          <source>Pairs of format characters and the corresponding part of the input.</source>
          <target state="translated">成对的格式字符和输入的相应部分。</target>
        </trans-unit>
        <trans-unit id="fa734be254acf2623327f645a9dcb22bb473a95a" translate="yes" xml:space="preserve">
          <source>Par1</source>
          <target state="translated">Par1</target>
        </trans-unit>
        <trans-unit id="5ef24093c55e5f8c5a103b53816f97bf24faf823" translate="yes" xml:space="preserve">
          <source>ParFlags</source>
          <target state="translated">ParFlags</target>
        </trans-unit>
        <trans-unit id="c48f526b9da677a33e39fdcf90d9349b58ca51c9" translate="yes" xml:space="preserve">
          <source>ParagraphSeparator</source>
          <target state="translated">ParagraphSeparator</target>
        </trans-unit>
        <trans-unit id="9588a94b078f52bbf1493d6bc87cb1b2c5cf0b63" translate="yes" xml:space="preserve">
          <source>Parallel list comprehensions are a natural extension to list comprehensions. List comprehensions can be thought of as a nice syntax for writing maps and filters. Parallel comprehensions extend this to include the &lt;code&gt;zipWith&lt;/code&gt; family.</source>
          <target state="translated">并行列表推导是列表推导的自然扩展。列表推导可以被认为是编写地图和过滤器的一种不错的语法。并行理解将其扩展到包括 &lt;code&gt;zipWith&lt;/code&gt; 系列。</target>
        </trans-unit>
        <trans-unit id="d2e51df32c5b57a230767d0f2b8d7fdcefacc103" translate="yes" xml:space="preserve">
          <source>Parallel statements (as with &lt;a href=&quot;#extension-ParallelListComp&quot;&gt;&lt;code&gt;ParallelListComp&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">并行语句（与&lt;a href=&quot;#extension-ParallelListComp&quot;&gt; &lt;code&gt;ParallelListComp&lt;/code&gt; 一样&lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="fea4bc6e4f648852182893a472b471676de0d12f" translate="yes" xml:space="preserve">
          <source>Parallel statements are translated using the &lt;code&gt;mzip&lt;/code&gt; function, which requires a &lt;code&gt;MonadZip&lt;/code&gt; instance defined in &lt;a href=&quot;../libraries/base-4.13.0.0/control-monad-zip&quot;&gt;Control.Monad.Zip&lt;/a&gt;:</source>
          <target state="translated">使用 &lt;code&gt;mzip&lt;/code&gt; 函数转换并行语句，该函数需要在&lt;a href=&quot;../libraries/base-4.13.0.0/control-monad-zip&quot;&gt;Control.Monad.Zip中&lt;/a&gt;定义的 &lt;code&gt;MonadZip&lt;/code&gt; 实例：</target>
        </trans-unit>
        <trans-unit id="8ae51b740caaf8903073ae521aa80b2a759b050a" translate="yes" xml:space="preserve">
          <source>Parallel statements are translated using the &lt;code&gt;mzip&lt;/code&gt; function, which requires a &lt;code&gt;MonadZip&lt;/code&gt; instance defined in &lt;a href=&quot;../libraries/base-4.14.1.0/control-monad-zip&quot;&gt;Control.Monad.Zip&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b857f551749600d7503643d97e6a057f00f03140" translate="yes" xml:space="preserve">
          <source>ParallelArrays</source>
          <target state="translated">ParallelArrays</target>
        </trans-unit>
        <trans-unit id="69e4ffd2f4416a199955cb75660e245acf30a524" translate="yes" xml:space="preserve">
          <source>ParallelListComp</source>
          <target state="translated">ParallelListComp</target>
        </trans-unit>
        <trans-unit id="26eaabc74e0ecdfad0e89f8cdfa1c0968e3e9ed4" translate="yes" xml:space="preserve">
          <source>Parameterizable list monad, with an inner monad.</source>
          <target state="translated">可参数化的列表单体,有一个内部单体。</target>
        </trans-unit>
        <trans-unit id="02627bceb378089ccc20d97b38e35aa601c5dccf" translate="yes" xml:space="preserve">
          <source>Parameters can also be given explicit kind signatures if needed. We call the number of parameters in a type family declaration, the family&amp;rsquo;s arity, and all applications of a type family must be fully saturated with respect to that arity. This requirement is unlike ordinary type synonyms and it implies that the kind of a type family is not sufficient to determine a family&amp;rsquo;s arity, and hence in general, also insufficient to determine whether a type family application is well formed. As an example, consider the following declaration:</source>
          <target state="translated">如果需要，还可以为参数提供明确的种类签名。我们称呼类型族声明中的参数数量，族的Arity，并且类型族的所有应用程序必须相对于该Arity完全饱和。此要求与普通的类型同义词不同，它意味着类型家族的种类不足以确定一个家族的归属，因此，通常也不足以确定一个类型家族申请是否格式正确。例如，考虑以下声明：</target>
        </trans-unit>
        <trans-unit id="0a9ec76bad7b4461d4a1d8543c0eaec740e99cd7" translate="yes" xml:space="preserve">
          <source>Parameters concerning context switching</source>
          <target state="translated">有关上下文切换的参数</target>
        </trans-unit>
        <trans-unit id="cf4b1fc0bf92b4cc879c4bcbd45ef9ceab45e50c" translate="yes" xml:space="preserve">
          <source>Parameters of the cost-center profiler</source>
          <target state="translated">成本中心剖析器的参数</target>
        </trans-unit>
        <trans-unit id="5457041fcc4bc9dce847560d14805ad2049bc05f" translate="yes" xml:space="preserve">
          <source>Parameters of the garbage collector.</source>
          <target state="translated">垃圾收集器的参数。</target>
        </trans-unit>
        <trans-unit id="f5c5e2b2e3b21a175ea9ad3d8e177b1de7b7db91" translate="yes" xml:space="preserve">
          <source>Parameters of the runtime system</source>
          <target state="translated">运行时系统的参数</target>
        </trans-unit>
        <trans-unit id="070eab54f987bb88657d5187688919e26117fb36" translate="yes" xml:space="preserve">
          <source>Parameters pertaining to event tracing</source>
          <target state="translated">与事件追踪有关的参数</target>
        </trans-unit>
        <trans-unit id="4c7921cf2c489ab76d8375681841d6fd080e0971" translate="yes" xml:space="preserve">
          <source>Parameters pertaining to parallelism</source>
          <target state="translated">与平行性有关的参数</target>
        </trans-unit>
        <trans-unit id="d33eae1bb8afa3f42df28e6f633413293fbaba1b" translate="yes" xml:space="preserve">
          <source>Parameters pertaining to the cost-center profiler.</source>
          <target state="translated">与成本中心剖析器有关的参数:</target>
        </trans-unit>
        <trans-unit id="c4c7a142cf5276b1d4ff46847b29bfe9297aa11a" translate="yes" xml:space="preserve">
          <source>Parameters pertaining to ticky-ticky profiler</source>
          <target state="translated">与ticky-ticky剖析器有关的参数。</target>
        </trans-unit>
        <trans-unit id="23d692f07a3fb646a8e54fcd2dc724f4ea2ed2c6" translate="yes" xml:space="preserve">
          <source>Parent</source>
          <target state="translated">Parent</target>
        </trans-unit>
        <trans-unit id="955199855b34047564f59f6340738ac93b4a24c6" translate="yes" xml:space="preserve">
          <source>Parent window, used for modal logon dialog</source>
          <target state="translated">父窗口,用于模态登录对话框。</target>
        </trans-unit>
        <trans-unit id="dcdb885a7f7995a4ae5f7735e2dbf7dd0df6c82b" translate="yes" xml:space="preserve">
          <source>ParentName</source>
          <target state="translated">ParentName</target>
        </trans-unit>
        <trans-unit id="fc2a5e24ef9b291c16b2d7d017af998e3868317a" translate="yes" xml:space="preserve">
          <source>Parenthesize an value if the boolean is true.</source>
          <target state="translated">如果布尔值为真,则用括号表示。</target>
        </trans-unit>
        <trans-unit id="f6fdd858f972c18cfc63e77f0f9f6ec35b5f5477" translate="yes" xml:space="preserve">
          <source>Parse a single lexeme</source>
          <target state="translated">解析单个词素</target>
        </trans-unit>
        <trans-unit id="7d1ffbe57b690c268aa7d881a60c206e50319514" translate="yes" xml:space="preserve">
          <source>Parse a string using the &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; instance. Succeeds if there is exactly one valid result.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; 实例解析字符串。成功是否有一个正确的结果。</target>
        </trans-unit>
        <trans-unit id="0be062266a17add68a7b668ce79822b3887a5efd" translate="yes" xml:space="preserve">
          <source>Parse a string using the &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; instance. Succeeds if there is exactly one valid result. A &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; value indicates a parse error.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; 实例解析字符串。成功是否有一个正确的结果。一个 &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; 值表明解析错误。</target>
        </trans-unit>
        <trans-unit id="89b7b9c3cafacbc3fbfa8f182d03db0eb57615a7" translate="yes" xml:space="preserve">
          <source>Parse a time value given a format string. Fails if the input could not be parsed using the given format. See &lt;code&gt;&lt;a href=&quot;data-time-format#v:parseTimeM&quot;&gt;parseTimeM&lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="translated">给定格式字符串解析时间值。如果无法使用给定格式解析输入，则失败。有关详细信息，请参见 &lt;code&gt;&lt;a href=&quot;data-time-format#v:parseTimeM&quot;&gt;parseTimeM&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01b9f449ab6343ea54f02e26f1e9faf3b8a4900b" translate="yes" xml:space="preserve">
          <source>Parse a time value given a format string. See &lt;code&gt;&lt;a href=&quot;data-time-format#v:parseTimeM&quot;&gt;parseTimeM&lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="translated">给定格式字符串解析时间值。有关详细信息，请参见 &lt;code&gt;&lt;a href=&quot;data-time-format#v:parseTimeM&quot;&gt;parseTimeM&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2bcd9fc04842aba6ce12e98373cf3b96da5c978b" translate="yes" xml:space="preserve">
          <source>Parse a value in either extended or basic format</source>
          <target state="translated">以扩展或基本格式解析一个值。</target>
        </trans-unit>
        <trans-unit id="2960f380b30894cf9484ebfaf5167a7bcf5265fb" translate="yes" xml:space="preserve">
          <source>Parse a value in the format</source>
          <target state="translated">解析一个值,格式为</target>
        </trans-unit>
        <trans-unit id="9f1ffb1644b47f32b305b727b8e2f0c4183a5335" translate="yes" xml:space="preserve">
          <source>Parse errors</source>
          <target state="translated">解析错误</target>
        </trans-unit>
        <trans-unit id="7d315fdee5a3dc981c3a0b2bb2a2a03e5b911e53" translate="yes" xml:space="preserve">
          <source>Parse the most commonly used ISO 8601 format.</source>
          <target state="translated">解析最常用的ISO 8601格式。</target>
        </trans-unit>
        <trans-unit id="ba0d4aca2cb647cf93798740ced61a0bfc954e4c" translate="yes" xml:space="preserve">
          <source>Parse the specified lexeme and continue as specified. Esp useful for nullary constructors; e.g. &lt;code&gt;choose [(&quot;A&quot;, return A), (&quot;B&quot;, return B)]&lt;/code&gt; We match both Ident and Symbol because the constructor might be an operator eg &lt;code&gt;(:~:)&lt;/code&gt;</source>
          <target state="translated">解析指定的词素并按指定继续。Esp对null构造函数有用；例如， &lt;code&gt;choose [(&quot;A&quot;, return A), (&quot;B&quot;, return B)]&lt;/code&gt; 我们匹配Ident和Symbol，因为构造函数可能是运算符，例如 &lt;code&gt;(:~:)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="df633b0d4b46131792d5ed485e94f872474b0ba2" translate="yes" xml:space="preserve">
          <source>ParseError</source>
          <target state="translated">ParseError</target>
        </trans-unit>
        <trans-unit id="e74c212b67cd9480fc62438093300cf8d7822087" translate="yes" xml:space="preserve">
          <source>ParseTime</source>
          <target state="translated">ParseTime</target>
        </trans-unit>
        <trans-unit id="6b8eadf238999f4577c899508ccf16700302cf3d" translate="yes" xml:space="preserve">
          <source>Parsec</source>
          <target state="translated">Parsec</target>
        </trans-unit>
        <trans-unit id="93d479a55d45ca812192b9c77cc2d7af365791e8" translate="yes" xml:space="preserve">
          <source>Parsec compatibility module</source>
          <target state="translated">Parsec兼容性模块</target>
        </trans-unit>
        <trans-unit id="0ebbdba417d24c756ec9c6928e541e59b0910456" translate="yes" xml:space="preserve">
          <source>ParsecT</source>
          <target state="translated">ParsecT</target>
        </trans-unit>
        <trans-unit id="1b3cf5033ed01a4fcbff3f2957e66cfe44af45a9" translate="yes" xml:space="preserve">
          <source>Parser</source>
          <target state="translated">Parser</target>
        </trans-unit>
        <trans-unit id="7a7dcdbfe4da553cb0bcd34e1518876f24101cf8" translate="yes" xml:space="preserve">
          <source>Parser from ParseLib with Hugs:</source>
          <target state="translated">从ParseLib与Hugs的解析器。</target>
        </trans-unit>
        <trans-unit id="e72f7d0405a8ed6b01d53d0eb6448cf48e5195fa" translate="yes" xml:space="preserve">
          <source>ParserT monad transformer and Parser type</source>
          <target state="translated">ParserT单项式变换器和Parser类型。</target>
        </trans-unit>
        <trans-unit id="efdb99a054fb37fae9696b10ed15efeeb9f36b28" translate="yes" xml:space="preserve">
          <source>Parsers</source>
          <target state="translated">Parsers</target>
        </trans-unit>
        <trans-unit id="028c9661ab1e61cb4cec3408691389cf51931b07" translate="yes" xml:space="preserve">
          <source>Parses a CRLF (see &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:crlf&quot;&gt;crlf&lt;/a&gt;&lt;/code&gt;) or LF (see &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:newline&quot;&gt;newline&lt;/a&gt;&lt;/code&gt;) end-of-line. Returns a newline character ('\n').</source>
          <target state="translated">解析CRLF（请参阅 &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:crlf&quot;&gt;crlf&lt;/a&gt;&lt;/code&gt; ）或LF（请参阅 &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:newline&quot;&gt;newline&lt;/a&gt;&lt;/code&gt; ）行尾。返回换行符（'\ n'）。</target>
        </trans-unit>
        <trans-unit id="8d0fe9ef051a87bd91f7557d4ccd0b8aa18260b8" translate="yes" xml:space="preserve">
          <source>Parses a alphabetic or numeric Unicode characters according to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#v:isAlphaNum&quot;&gt;isAlphaNum&lt;/a&gt;&lt;/code&gt;. Returns the parsed character.</source>
          <target state="translated">根据 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#v:isAlphaNum&quot;&gt;isAlphaNum&lt;/a&gt;&lt;/code&gt; 解析字母或数字Unicode字符。返回已解析的字符。</target>
        </trans-unit>
        <trans-unit id="9deeeeaf087ec53d20f87cb865f75c4b16fddfbf" translate="yes" xml:space="preserve">
          <source>Parses a alphabetic or numeric Unicode characters according to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#v:isAlphaNum&quot;&gt;isAlphaNum&lt;/a&gt;&lt;/code&gt;. Returns the parsed character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec0ce986154232212bbae5b429b845073d2f256" translate="yes" xml:space="preserve">
          <source>Parses a carriage return character ('\r') followed by a newline character ('\n'). Returns a newline character.</source>
          <target state="translated">解析一个回车字符('\r')和一个换行字符('\n')。返回一个换行符。</target>
        </trans-unit>
        <trans-unit id="6fcd7bd8ab3c7f5c13d44837c892a5fb90c8df7f" translate="yes" xml:space="preserve">
          <source>Parses a hexadecimal digit (a digit or a letter between 'a' and 'f' or 'A' and 'F'). Returns the parsed character.</source>
          <target state="translated">解析一个十六进制数字(介于'a'和'f'或'A'和'F'之间的数字或字母)。返回解析后的字符。</target>
        </trans-unit>
        <trans-unit id="dc1d6a166fc0a683ffa31ab7722f3e4d373d0800" translate="yes" xml:space="preserve">
          <source>Parses a lower case character (according to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#v:isLower&quot;&gt;isLower&lt;/a&gt;&lt;/code&gt;). Returns the parsed character.</source>
          <target state="translated">解析一个小写字符（根据 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#v:isLower&quot;&gt;isLower&lt;/a&gt;&lt;/code&gt; ）。返回已解析的字符。</target>
        </trans-unit>
        <trans-unit id="bb6d66af149d4f2597f57f132fa38ff395ba24cb" translate="yes" xml:space="preserve">
          <source>Parses a lower case character (according to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#v:isLower&quot;&gt;isLower&lt;/a&gt;&lt;/code&gt;). Returns the parsed character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fea022f0b2ddc5b11db2fc69fd4e212597b724d" translate="yes" xml:space="preserve">
          <source>Parses a newline character ('\n'). Returns a newline character.</source>
          <target state="translated">解析一个换行符('/n')。返回一个换行符。</target>
        </trans-unit>
        <trans-unit id="eb63a33324f0ad8223e6e2bee48f6654bd369140" translate="yes" xml:space="preserve">
          <source>Parses a non-negative whole number in the decimal system. Returns the value of the number.</source>
          <target state="translated">在十进制系统中解析一个非负的整数。返回数字的值。</target>
        </trans-unit>
        <trans-unit id="5df553864aa00be005f0685bbc7543dc85668e7b" translate="yes" xml:space="preserve">
          <source>Parses a non-negative whole number in the hexadecimal system. The number should be prefixed with &quot;x&quot; or &quot;X&quot;. Returns the value of the number.</source>
          <target state="translated">在十六进制系统中解析一个非负的整数。数字应该以 &quot;x &quot;或 &quot;X &quot;为前缀。返回数字的值。</target>
        </trans-unit>
        <trans-unit id="9fdb8835ffaf98232d803de2c75c7f642b6b9764" translate="yes" xml:space="preserve">
          <source>Parses a non-negative whole number in the octal system. The number should be prefixed with &quot;o&quot; or &quot;O&quot;. Returns the value of the number.</source>
          <target state="translated">在八进制系统中解析一个非负的整数。数字应该以 &quot;o &quot;或 &quot;O &quot;为前缀。返回数字的值。</target>
        </trans-unit>
        <trans-unit id="702ae31de69c688b66eaaac89301521608613ccc" translate="yes" xml:space="preserve">
          <source>Parses a tab character ('\t'). Returns a tab character.</source>
          <target state="translated">解析一个制表符('/t')。返回一个tab字符。</target>
        </trans-unit>
        <trans-unit id="a9324545ed792c080b35aa8a66315fcacf5866ec" translate="yes" xml:space="preserve">
          <source>Parses a time value given a format string. Supports the same %-codes as &lt;code&gt;formatTime&lt;/code&gt;, including &lt;code&gt;%-&lt;/code&gt;, &lt;code&gt;%_&lt;/code&gt; and &lt;code&gt;%0&lt;/code&gt; modifiers, however padding widths are not supported. Case is not significant in the input string. Some variations in the input are accepted:</source>
          <target state="translated">解析给定格式字符串的时间值。支持相同的％-codes如 &lt;code&gt;formatTime&lt;/code&gt; ，包括 &lt;code&gt;%-&lt;/code&gt; ， &lt;code&gt;%_&lt;/code&gt; 和 &lt;code&gt;%0&lt;/code&gt; 改性剂，但是填充的宽度不被支持。输入字符串中的大小写无关紧要。接受输入中的一些变化：</target>
        </trans-unit>
        <trans-unit id="05a240ec2c4ee54b0aafba8944a0f8fd2d337fdb" translate="yes" xml:space="preserve">
          <source>Parses a white space character (any character which satisfies &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#v:isSpace&quot;&gt;isSpace&lt;/a&gt;&lt;/code&gt;) Returns the parsed character.</source>
          <target state="translated">解析空白字符（任何满足 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#v:isSpace&quot;&gt;isSpace&lt;/a&gt;&lt;/code&gt; 的字符）返回已解析的字符。</target>
        </trans-unit>
        <trans-unit id="d903820e65a3e9a2aa9445b7aba2e9d2375393f9" translate="yes" xml:space="preserve">
          <source>Parses a white space character (any character which satisfies &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#v:isSpace&quot;&gt;isSpace&lt;/a&gt;&lt;/code&gt;) Returns the parsed character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2249741f599993c9ad36b1f2a0b1cf7813b2acd1" translate="yes" xml:space="preserve">
          <source>Parses an ASCII digit. Returns the parsed character.</source>
          <target state="translated">解析一个ASCII数字。返回解析后的字符。</target>
        </trans-unit>
        <trans-unit id="c370ae0764a200203299326c366ffab380d2d3ab" translate="yes" xml:space="preserve">
          <source>Parses an alphabetic Unicode characters (lower-case, upper-case and title-case letters, plus letters of caseless scripts and modifiers letters according to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#v:isAlpha&quot;&gt;isAlpha&lt;/a&gt;&lt;/code&gt;). Returns the parsed character.</source>
          <target state="translated">解析字母Unicode字符（小写，大写和标题大写字母，再加上无大小写的脚本字母和根据 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#v:isAlpha&quot;&gt;isAlpha&lt;/a&gt;&lt;/code&gt; 的修饰符字母）。返回已解析的字符。</target>
        </trans-unit>
        <trans-unit id="d33286169144156c705451434bd3458f2c243164" translate="yes" xml:space="preserve">
          <source>Parses an alphabetic Unicode characters (lower-case, upper-case and title-case letters, plus letters of caseless scripts and modifiers letters according to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#v:isAlpha&quot;&gt;isAlpha&lt;/a&gt;&lt;/code&gt;). Returns the parsed character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b02856d3ea3b460a7fe547f16d9711dbfd09488" translate="yes" xml:space="preserve">
          <source>Parses an octal digit (a character between '0' and '7'). Returns the parsed character.</source>
          <target state="translated">解析一个八进制数字('0'和'7'之间的字符)。返回解析后的字符。</target>
        </trans-unit>
        <trans-unit id="33366516b691b44fa5ef3fef5829a9e0268ab2e5" translate="yes" xml:space="preserve">
          <source>Parses an upper case letter (according to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#v:isUpper&quot;&gt;isUpper&lt;/a&gt;&lt;/code&gt;). Returns the parsed character.</source>
          <target state="translated">解析一个大写字母（根据 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#v:isUpper&quot;&gt;isUpper&lt;/a&gt;&lt;/code&gt; ）。返回已解析的字符。</target>
        </trans-unit>
        <trans-unit id="70ed6ac072bae182bcb0c4097a1ee90360d81c38" translate="yes" xml:space="preserve">
          <source>Parses an upper case letter (according to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#v:isUpper&quot;&gt;isUpper&lt;/a&gt;&lt;/code&gt;). Returns the parsed character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20d25499201ff10834936ff90921a8f64cf44d5" translate="yes" xml:space="preserve">
          <source>Parses and returns the specified character.</source>
          <target state="translated">解析并返回指定的字符。</target>
        </trans-unit>
        <trans-unit id="10734aa6302a05d65e718e02f8812ae26f28348b" translate="yes" xml:space="preserve">
          <source>Parses and returns the specified string.</source>
          <target state="translated">解析并返回指定的字符串。</target>
        </trans-unit>
        <trans-unit id="d6fafa4ab77dbc509075d8350b5ba85d1892f213" translate="yes" xml:space="preserve">
          <source>Parses any white space. White space consists of &lt;em&gt;zero&lt;/em&gt; or more occurrences of a &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:space&quot;&gt;space&lt;/a&gt;&lt;/code&gt;, a line comment or a block (multi line) comment. Block comments may be nested. How comments are started and ended is defined in the &lt;code&gt;&lt;a href=&quot;text-parsec-token#t:LanguageDef&quot;&gt;LanguageDef&lt;/a&gt;&lt;/code&gt; that is passed to &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:makeTokenParser&quot;&gt;makeTokenParser&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">解析任何空白。空白由&lt;em&gt;零个&lt;/em&gt;或多个出现的 &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:space&quot;&gt;space&lt;/a&gt;&lt;/code&gt; ，一行注释或一个块（多行）注释组成。块注释可能是嵌套的。注释的开始和结束方式在传递给 &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:makeTokenParser&quot;&gt;makeTokenParser&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;text-parsec-token#t:LanguageDef&quot;&gt;LanguageDef&lt;/a&gt;&lt;/code&gt; 中定义。</target>
        </trans-unit>
        <trans-unit id="7901356594fa3bfff82ffd8d1edc90fccbbbe877" translate="yes" xml:space="preserve">
          <source>Parses any white space. White space consists of &lt;em&gt;zero&lt;/em&gt; or more occurrences of a &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:space&quot;&gt;space&lt;/a&gt;&lt;/code&gt;, a line comment or a block (multi line) comment. Block comments may be nested. How comments are started and ended is defined in the &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#t:LanguageDef&quot;&gt;LanguageDef&lt;/a&gt;&lt;/code&gt; that is passed to &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:makeTokenParser&quot;&gt;makeTokenParser&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">解析任何空白。空白由&lt;em&gt;零个&lt;/em&gt;或多个出现的 &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:space&quot;&gt;space&lt;/a&gt;&lt;/code&gt; ，一行注释或一个块（多行）注释组成。块注释可能是嵌套的。注释的开始和结束方式在传递给 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:makeTokenParser&quot;&gt;makeTokenParser&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#t:LanguageDef&quot;&gt;LanguageDef&lt;/a&gt;&lt;/code&gt; 中定义。</target>
        </trans-unit>
        <trans-unit id="1e703e840a13f17d4e0aa6d6407f1c2c408c1f58" translate="yes" xml:space="preserve">
          <source>Parses one or more occurrences of the given parser.</source>
          <target state="translated">解析一个或多个给定解析器的出现。</target>
        </trans-unit>
        <trans-unit id="9d53b4cf7f3be2a61b0e8567c529b4e5312e73c2" translate="yes" xml:space="preserve">
          <source>Parses the first one or more characters satisfying the predicate. Fails if none, else succeeds exactly once having consumed all the characters Hence NOT the same as (many1 (satisfy p))</source>
          <target state="translated">解析第一个或多个满足谓词的字符。如果没有,则失败,否则在解析完所有字符后就成功一次,因此与(many1 (success p))不同。</target>
        </trans-unit>
        <trans-unit id="4ea87d4852d98a90a7eae890a816dda2be9b64c4" translate="yes" xml:space="preserve">
          <source>Parses the first zero or more characters satisfying the predicate. Always succeeds, exactly once having consumed all the characters Hence NOT the same as (many (satisfy p))</source>
          <target state="translated">解析第一个零或更多满足谓词的字符。总是成功的,只用了一次就用完了所有的字符,因此和(many (success p))不一样。</target>
        </trans-unit>
        <trans-unit id="572002c6d8895463e970cc35f3fcfe00a42feb77" translate="yes" xml:space="preserve">
          <source>Parses zero or more occurrences of the given parser.</source>
          <target state="translated">解析给定解析器的零次或多次出现。</target>
        </trans-unit>
        <trans-unit id="7294d33710169103141018bfcb0ee5ad3daa81e2" translate="yes" xml:space="preserve">
          <source>Parsing</source>
          <target state="translated">Parsing</target>
        </trans-unit>
        <trans-unit id="22a3a9fff72c57faae1e1019e01bc253d1b1b0fd" translate="yes" xml:space="preserve">
          <source>Parsing and counting</source>
          <target state="translated">解析和计数</target>
        </trans-unit>
        <trans-unit id="ba8c1940ba355106d471b605df97a6aaed96283a" translate="yes" xml:space="preserve">
          <source>Parsing of &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;s, producing values.</source>
          <target state="translated">解析 &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; ，产生值。</target>
        </trans-unit>
        <trans-unit id="d9978c1c7b4b043b4e8ba4d6fd699578663835c5" translate="yes" xml:space="preserve">
          <source>Parsing of &lt;code&gt;&lt;a href=&quot;prelude#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;s, producing values.</source>
          <target state="translated">解析 &lt;code&gt;&lt;a href=&quot;prelude#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; ，产生值。</target>
        </trans-unit>
        <trans-unit id="146ac34ef08d750fbdfddd6a4da5cec9cef4309b" translate="yes" xml:space="preserve">
          <source>Partial type signatures (&lt;a href=&quot;#partial-type-signatures&quot;&gt;Partial Type Signatures&lt;/a&gt;) work nicely with visible type application. If you want to specify only the second type argument to &lt;code&gt;wurble&lt;/code&gt;, then you can say &lt;code&gt;wurble @_ @Int&lt;/code&gt;. The first argument is a wildcard, just like in a partial type signature. However, if used in a visible type application/visible kind application, it is &lt;em&gt;not&lt;/em&gt; necessary to specify &lt;a href=&quot;#extension-PartialTypeSignatures&quot;&gt;&lt;code&gt;PartialTypeSignatures&lt;/code&gt;&lt;/a&gt; and your code will not generate a warning informing you of the omitted type.</source>
          <target state="translated">部分类型签名（&lt;a href=&quot;#partial-type-signatures&quot;&gt;Partial Type Signatures&lt;/a&gt;）与可见类型应用程序很好地配合。如果只想为 &lt;code&gt;wurble&lt;/code&gt; 指定第二个类型参数，则可以说 &lt;code&gt;wurble @_ @Int&lt;/code&gt; 。第一个参数是通配符，就像在部分类型签名中一样。然而，如果在一个可见的类型application /可见这类应用中使用，它是&lt;em&gt;不是&lt;/em&gt;必要指定&lt;a href=&quot;#extension-PartialTypeSignatures&quot;&gt; &lt;code&gt;PartialTypeSignatures&lt;/code&gt; &lt;/a&gt;和你的代码不会产生警告，通知您省略类型。</target>
        </trans-unit>
        <trans-unit id="1fba127279063c3a22121b9b4cb6f20bc4417959" translate="yes" xml:space="preserve">
          <source>Partial type signatures are allowed for bindings, pattern and expression signatures, except that extra-constraints wildcards are not supported in pattern or expression signatures. In the following example a wildcard is used in each of the three possible contexts.</source>
          <target state="translated">部分类型签名允许用于绑定、模式和表达式签名,但模式或表达式签名中不支持约束外通配符。在下面的例子中,在三种可能的上下文中都使用了通配符。</target>
        </trans-unit>
        <trans-unit id="99197905e62274bd86f62c48326e7d56161c0bff" translate="yes" xml:space="preserve">
          <source>Partial type signatures can also be used in &lt;a href=&quot;#template-haskell&quot;&gt;Template Haskell&lt;/a&gt; splices.</source>
          <target state="translated">部分类型签名也可以在&lt;a href=&quot;#template-haskell&quot;&gt;Template Haskell&lt;/a&gt;拼接中使用。</target>
        </trans-unit>
        <trans-unit id="cd1d72bf2e9837a6f932897368ed11b7f1f0901d" translate="yes" xml:space="preserve">
          <source>PartialTypeSignatures</source>
          <target state="translated">PartialTypeSignatures</target>
        </trans-unit>
        <trans-unit id="edf72a43b1f566581c4c8c61fcedab5c2b680b1f" translate="yes" xml:space="preserve">
          <source>Partially-applied type synonym.</source>
          <target state="translated">部分应用型同义词。</target>
        </trans-unit>
        <trans-unit id="cb737fe624c5231bedfcaa54cdb5adc3c111d709" translate="yes" xml:space="preserve">
          <source>Partitions a list of &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; into two lists. All the &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; elements are extracted, in order, to the first component of the output. Similarly the &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; elements are extracted to the second component of the output.</source>
          <target state="translated">分区的列表 &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; 为两个列表。按顺序将所有 &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; 元素提取到输出的第一部分。同样，将 &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; 元素提取到输出的第二部分。</target>
        </trans-unit>
        <trans-unit id="d7cd56f2a2a3f47830760edfb89946eb7b9e2cd1" translate="yes" xml:space="preserve">
          <source>Pass</source>
          <target state="translated">Pass</target>
        </trans-unit>
        <trans-unit id="b656895c2b247f1e0e70e028d10540d37d0e6599" translate="yes" xml:space="preserve">
          <source>Pass vector value in vector registers for function calls</source>
          <target state="translated">在向量寄存器中传递向量值,用于函数调用</target>
        </trans-unit>
        <trans-unit id="c54625ea849b5bef109f8ba0d861127d6f59b6f9" translate="yes" xml:space="preserve">
          <source>Pass ⟨option⟩ to &lt;code&gt;windres&lt;/code&gt; when embedding manifests on Windows. See &lt;code&gt;-fno-embed-manifest&lt;/code&gt; in &lt;a href=&quot;#options-linker&quot;&gt;Options affecting linking&lt;/a&gt;.</source>
          <target state="translated">在Windows上嵌入清单时，将 &lt;code&gt;windres&lt;/code&gt; 传递给windes。见 &lt;code&gt;-fno-embed-manifest&lt;/code&gt; 的&lt;a href=&quot;#options-linker&quot;&gt;选项链接的影响&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d8e81975f1a1782e659196379fb59c4474c28b85" translate="yes" xml:space="preserve">
          <source>Pass ⟨option⟩ to CPP (makes sense only if &lt;code&gt;-cpp&lt;/code&gt; is also on).</source>
          <target state="translated">将⟨option⟩传递给CPP（仅当 &lt;code&gt;-cpp&lt;/code&gt; 也打开时才有意义）。</target>
        </trans-unit>
        <trans-unit id="1ea097fe05a9a04a2624d60c283feabd36342c47" translate="yes" xml:space="preserve">
          <source>Pass ⟨option⟩ to the C compiler.</source>
          <target state="translated">将⟨option⟩传给C编译器。</target>
        </trans-unit>
        <trans-unit id="84280cb2173bd4a147ed2710a0aa106da9c6e256" translate="yes" xml:space="preserve">
          <source>Pass ⟨option⟩ to the C++ compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2245e044e2ee9c7852e79e8e7a89e223c413d0" translate="yes" xml:space="preserve">
          <source>Pass ⟨option⟩ to the DLL generator.</source>
          <target state="translated">将⟨option⟩传递给DLL生成器。</target>
        </trans-unit>
        <trans-unit id="3e2650a6a6f4302b3800e44c6e47bf2e4cf0ce70" translate="yes" xml:space="preserve">
          <source>Pass ⟨option⟩ to the LLVM compiler.</source>
          <target state="translated">将⟨option⟩传递给LLVM编译器。</target>
        </trans-unit>
        <trans-unit id="b7042edda33fdbf17c12be5107e2f71d34b5db58" translate="yes" xml:space="preserve">
          <source>Pass ⟨option⟩ to the LLVM optimiser.</source>
          <target state="translated">将⟨option⟩传递给LLVM优化器。</target>
        </trans-unit>
        <trans-unit id="87ef00b3846b0862a7242d922be5b1f78c247481" translate="yes" xml:space="preserve">
          <source>Pass ⟨option⟩ to the assembler.</source>
          <target state="translated">将⟨option⟩传递给汇编器。</target>
        </trans-unit>
        <trans-unit id="e1c14b71df065b66ba63fa6a047ddbfc4df7c5f0" translate="yes" xml:space="preserve">
          <source>Pass ⟨option⟩ to the custom pre-processor (see &lt;a href=&quot;#pre-processor&quot;&gt;Options affecting a Haskell pre-processor&lt;/a&gt;).</source>
          <target state="translated">将⟨option传递给自定义预处理器（请参阅&lt;a href=&quot;#pre-processor&quot;&gt;影响Haskell预处理器的选项&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d4e91bac9331b7ddc74206f5303bffcecba44d00" translate="yes" xml:space="preserve">
          <source>Pass ⟨option⟩ to the interpreter sub-process (see &lt;a href=&quot;ghci#external-interpreter&quot;&gt;Running the interpreter in a separate process&lt;/a&gt;). A common use for this is to pass RTS options e.g., &lt;code&gt;-opti+RTS -opti-A64m&lt;/code&gt;, or to enable verbosity with &lt;code&gt;-opti-v&lt;/code&gt; to see what messages are being exchanged by GHC and the interpreter.</source>
          <target state="translated">将&amp;ldquo; option&amp;rdquo;传递给解释器子流程（请参阅&lt;a href=&quot;ghci#external-interpreter&quot;&gt;在单独的进程中运行解释器&lt;/a&gt;）。为此，通常的用法是传递RTS选项，例如 &lt;code&gt;-opti+RTS -opti-A64m&lt;/code&gt; ，或使用 &lt;code&gt;-opti-v&lt;/code&gt; 启用详细信息以查看GHC和解释器正在交换的消息。</target>
        </trans-unit>
        <trans-unit id="123e7106bfca8a16ebd4af1ce4024a5589cb8353" translate="yes" xml:space="preserve">
          <source>Pass ⟨option⟩ to the linker when merging object files. In the case of a standard &lt;code&gt;ld&lt;/code&gt;-style linker this should generally include the &lt;code&gt;-r&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7477215f28d252ddc7702887bc7fd7f09e390008" translate="yes" xml:space="preserve">
          <source>Pass ⟨option⟩ to the linker.</source>
          <target state="translated">将⟨option⟩传递给链接器。</target>
        </trans-unit>
        <trans-unit id="ad6fb68d25dbefa94a70ca45187327b9fda1d37c" translate="yes" xml:space="preserve">
          <source>Pass ⟨option⟩ to the literate pre-processor</source>
          <target state="translated">将⟨选项⟩传给识字的预处理器</target>
        </trans-unit>
        <trans-unit id="b3edfb19da259e0de688de612c935956f2c99d75" translate="yes" xml:space="preserve">
          <source>Passed to the C compiler.</source>
          <target state="translated">传递给C编译器。</target>
        </trans-unit>
        <trans-unit id="8be3c943b1609fffbfc51aad666d0a04adf83c9d" translate="yes" xml:space="preserve">
          <source>Password</source>
          <target state="translated">Password</target>
        </trans-unit>
        <trans-unit id="702f90f9120506c7fbea366d22307493c04740b3" translate="yes" xml:space="preserve">
          <source>Password -- may be empty or fake if shadow is in use (pw_passwd)</source>
          <target state="translated">密码 --如果使用影子,密码可能是空的或假的 (pw_passwd)</target>
        </trans-unit>
        <trans-unit id="22002d5b59087455e3e7a19bdb64f504fafce246" translate="yes" xml:space="preserve">
          <source>Pat</source>
          <target state="translated">Pat</target>
        </trans-unit>
        <trans-unit id="eb730bfcc87dd3826515b26e8682ec5987a8eee0" translate="yes" xml:space="preserve">
          <source>PatQ</source>
          <target state="translated">PatQ</target>
        </trans-unit>
        <trans-unit id="9b6958725be0676bc2831daffab79014db1e02d1" translate="yes" xml:space="preserve">
          <source>PatSynArgs</source>
          <target state="translated">PatSynArgs</target>
        </trans-unit>
        <trans-unit id="e528cddb6d761afbae92bc5520282c106e797b9b" translate="yes" xml:space="preserve">
          <source>PatSynArgsQ</source>
          <target state="translated">PatSynArgsQ</target>
        </trans-unit>
        <trans-unit id="fe6ca4a2046e9092fc8b91acbe65f2196eafaf25" translate="yes" xml:space="preserve">
          <source>PatSynDir</source>
          <target state="translated">PatSynDir</target>
        </trans-unit>
        <trans-unit id="a00df6fba9cdb213b7e8fda3d468202a26221183" translate="yes" xml:space="preserve">
          <source>PatSynDirQ</source>
          <target state="translated">PatSynDirQ</target>
        </trans-unit>
        <trans-unit id="f84514555442628f00d3e5269a9f8b67460106af" translate="yes" xml:space="preserve">
          <source>PatSynType</source>
          <target state="translated">PatSynType</target>
        </trans-unit>
        <trans-unit id="519e39132bb98418cc0483cc446ccf5f3c8dcffe" translate="yes" xml:space="preserve">
          <source>Path</source>
          <target state="translated">Path</target>
        </trans-unit>
        <trans-unit id="de556ff45621853b72f3cba9bbc16ba72c53c17f" translate="yes" xml:space="preserve">
          <source>PathNameLimit</source>
          <target state="translated">PathNameLimit</target>
        </trans-unit>
        <trans-unit id="74b7902cc01d30f193138477b0b3be38408b6f9e" translate="yes" xml:space="preserve">
          <source>PathVar</source>
          <target state="translated">PathVar</target>
        </trans-unit>
        <trans-unit id="c605d6954cb5f7d896d41bcc8529b02fa99e63c3" translate="yes" xml:space="preserve">
          <source>Pathname conventions vary from system to system. In particular, the directory separator is &amp;ldquo;&lt;code&gt;/&lt;/code&gt;&amp;rdquo; on Unix systems and &amp;ldquo;&lt;code&gt;\&lt;/code&gt;&amp;rdquo; on Windows systems. In the sections that follow, we shall consistently use &amp;ldquo;&lt;code&gt;/&lt;/code&gt;&amp;rdquo; as the directory separator; substitute this for the appropriate character for your system.</source>
          <target state="translated">路径名约定因系统而异。特别是，目录分隔符在Unix系统上为&amp;ldquo; &lt;code&gt;/&lt;/code&gt; &amp;rdquo;，在Windows系统上为&amp;ldquo; &lt;code&gt;\&lt;/code&gt; &amp;rdquo;。在以下各节中，我们将始终使用&amp;ldquo; &lt;code&gt;/&lt;/code&gt; &amp;rdquo;作为目录分隔符；将其替换为适合您系统的字符。</target>
        </trans-unit>
        <trans-unit id="011311874049b892a9a1e123a9582477aceacecd" translate="yes" xml:space="preserve">
          <source>Paths specified using the &lt;code&gt;-L ⟨dir⟩&lt;/code&gt; command-line option,</source>
          <target state="translated">使用 &lt;code&gt;-L ⟨dir⟩&lt;/code&gt; 命令行选项指定的路径，</target>
        </trans-unit>
        <trans-unit id="32c2dd7f8e76f04657fd849dcf202fe7562da7ba" translate="yes" xml:space="preserve">
          <source>Paths with a drive letter are &lt;em&gt;legacy&lt;/em&gt; paths. The drive letters are actually meaningless to the kernel. Just like Unix operating systems, drive letters are just a mount point. You can view your mount points by using the &lt;strong&gt;mountvol&lt;/strong&gt; command.</source>
          <target state="translated">带驱动器号的路径是&lt;em&gt;旧&lt;/em&gt;路径。实际上，驱动器号对内核毫无意义。就像Unix操作系统一样，驱动器号只是一个安装点。您可以使用&lt;strong&gt;mountvol&lt;/strong&gt;命令查看安装点。</target>
        </trans-unit>
        <trans-unit id="1fff6a31661b491fc40cc9c1ad7fe5e479cb7500" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Pattern</target>
        </trans-unit>
        <trans-unit id="c986f82232ab7547ffc16ab2d32c4eed2d129027" translate="yes" xml:space="preserve">
          <source>Pattern &lt;code&gt;P1&lt;/code&gt; can only match against a value of type &lt;code&gt;Maybe Bool&lt;/code&gt;, so function &lt;code&gt;f&lt;/code&gt; is rejected because the type signature is &lt;code&gt;Maybe a&lt;/code&gt;. (To see this, imagine expanding the pattern synonym.)</source>
          <target state="translated">模式 &lt;code&gt;P1&lt;/code&gt; 只能与 &lt;code&gt;Maybe Bool&lt;/code&gt; 类型的值匹配，因此函数 &lt;code&gt;f&lt;/code&gt; 被拒绝，因为类型签名 &lt;code&gt;Maybe a&lt;/code&gt; 。（为此，请想象扩展模式同义词。）</target>
        </trans-unit>
        <trans-unit id="02736a97b0f28b320047652ff9db6e4230fbb7da" translate="yes" xml:space="preserve">
          <source>Pattern Synonyms (sub constructs)</source>
          <target state="translated">模式同义词(子结构)</target>
        </trans-unit>
        <trans-unit id="cc7430cf470514ab4cb77ac5dbdcb450d6be72dc" translate="yes" xml:space="preserve">
          <source>Pattern in Haskell given in &lt;code&gt;{}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{}&lt;/code&gt; 中给出的Haskell模式</target>
        </trans-unit>
        <trans-unit id="006f91db2b8fd81b325a7a341c644b6d5a498639" translate="yes" xml:space="preserve">
          <source>Pattern match on a type constructor</source>
          <target state="translated">类型构造函数的模式匹配</target>
        </trans-unit>
        <trans-unit id="429f1b07411fa0d99aa1398b100abdf4c33d79a4" translate="yes" xml:space="preserve">
          <source>Pattern match on a type constructor including its instantiated kind variables.</source>
          <target state="translated">类型构造函数的模式匹配,包括它的实例化种类变量。</target>
        </trans-unit>
        <trans-unit id="6bca3430dd62bc5373edba36f1b7fdbacb161c1c" translate="yes" xml:space="preserve">
          <source>Pattern splices introduce variable binders but scoping of variables in expressions inside the pattern&amp;rsquo;s scope is only checked when a splice is run. Note that pattern splices that occur outside of any quotation brackets are run at compile time. Pattern splices occurring inside a quotation bracket are &lt;em&gt;not&lt;/em&gt; run at compile time; they are run when the bracket is spliced in, sometime later. For example,</source>
          <target state="translated">模式拼接引入了变量绑定器，但是仅在运行拼接时才检查模式范围内表达式中变量的作用域。请注意，出现在任何引号括号之外的模式拼接在编译时运行。引号括弧内出现的模式拼接在编译时&lt;em&gt;不会&lt;/em&gt;运行；它们在拼接支架时运行，稍后再运行。例如，</target>
        </trans-unit>
        <trans-unit id="a6afa01cf2dd70cd7e0003f6ed14c46fc954840d" translate="yes" xml:space="preserve">
          <source>Pattern splices: anonymous and named wildcards can be used in pattern signatures. Note that &lt;a href=&quot;#extension-ScopedTypeVariables&quot;&gt;&lt;code&gt;ScopedTypeVariables&lt;/code&gt;&lt;/a&gt; has to be enabled to allow pattern signatures. Extra-constraints wildcards are not supported, just like in regular pattern signatures.</source>
          <target state="translated">模式拼接：模式签名中可以使用匿名通配符和命名通配符。请注意，必须启用&lt;a href=&quot;#extension-ScopedTypeVariables&quot;&gt; &lt;code&gt;ScopedTypeVariables&lt;/code&gt; &lt;/a&gt;才能允许模式签名。不像常规模式签名一样，不支持额外约束通配符。</target>
        </trans-unit>
        <trans-unit id="2f77741e8cc6b9f0b1d51a80487612daf3480f01" translate="yes" xml:space="preserve">
          <source>Pattern synonym declaration</source>
          <target state="translated">模式同义词声明</target>
        </trans-unit>
        <trans-unit id="87f1062186506aaa4f45d8a2e88afacdc300284d" translate="yes" xml:space="preserve">
          <source>Pattern synonym declarations can only occur in the top level of a module. In particular, they are not allowed as local definitions.</source>
          <target state="translated">模式同义词声明只能出现在一个模块的顶层。特别是,它们不允许作为本地定义。</target>
        </trans-unit>
        <trans-unit id="d2c3bb10828440ff7c7e123c5c710d07e5748ac9" translate="yes" xml:space="preserve">
          <source>Pattern synonym examples</source>
          <target state="translated">模式同义词例子</target>
        </trans-unit>
        <trans-unit id="c5e40750951e5693f88641df15605c5bd88c4b78" translate="yes" xml:space="preserve">
          <source>Pattern synonym type signature</source>
          <target state="translated">模式同义词类型签名</target>
        </trans-unit>
        <trans-unit id="51c5410ff060e342b214a06f194717b99df3b318" translate="yes" xml:space="preserve">
          <source>Pattern synonym types interact with TH when (a) reifying a pattern synonym, (b) pretty printing, or (c) specifying a pattern synonym's type signature explicitly:</source>
          <target state="translated">模式同义词类型在以下情况下与TH交互:(a)重述模式同义词,(b)漂亮打印,或(c)明确指定模式同义词的类型签名。</target>
        </trans-unit>
        <trans-unit id="f1ad9c9cdb2599bd5e1fe2e83cbb8368c9be95f6" translate="yes" xml:space="preserve">
          <source>Pattern synonyms</source>
          <target state="translated">模式的同义词</target>
        </trans-unit>
        <trans-unit id="f284b9c8384401a92e74a36de73bee9bba48c472" translate="yes" xml:space="preserve">
          <source>Pattern synonyms are enabled by the language extension &lt;a href=&quot;#extension-PatternSynonyms&quot;&gt;&lt;code&gt;PatternSynonyms&lt;/code&gt;&lt;/a&gt;, which is required for defining them, but &lt;em&gt;not&lt;/em&gt; for using them. More information and examples of pattern synonyms can be found on the &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/PatternSynonyms&quot;&gt;Wiki page&lt;/a&gt;.</source>
          <target state="translated">模式同义词由语言扩展&lt;a href=&quot;#extension-PatternSynonyms&quot;&gt; &lt;code&gt;PatternSynonyms&lt;/code&gt; &lt;/a&gt;启用，这是定义它们（而&lt;em&gt;不是&lt;/em&gt;使用它们）所必需的。可以在&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/PatternSynonyms&quot;&gt;Wiki页面&lt;/a&gt;上找到更多信息和模式同义词示例。</target>
        </trans-unit>
        <trans-unit id="3892448115b360ea1d603f7a781a0d734d72148a" translate="yes" xml:space="preserve">
          <source>Pattern synonyms are enabled by the language extension &lt;a href=&quot;#extension-PatternSynonyms&quot;&gt;&lt;code&gt;PatternSynonyms&lt;/code&gt;&lt;/a&gt;, which is required for defining them, but &lt;em&gt;not&lt;/em&gt; for using them. More information and examples of pattern synonyms can be found on the &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/pattern-synonyms&quot;&gt;Wiki page&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0924abc7007f369091850e500801334d4015307f" translate="yes" xml:space="preserve">
          <source>Pattern synonyms are not supported.</source>
          <target state="translated">不支持模式同义词。</target>
        </trans-unit>
        <trans-unit id="34d581f8945b7df9b46a71872a91832ad9199e66" translate="yes" xml:space="preserve">
          <source>Pattern synonyms cannot be defined recursively.</source>
          <target state="translated">模式同义词不能递归定义。</target>
        </trans-unit>
        <trans-unit id="2dc90cc727d872f8ad295d8c8e70891697a625b4" translate="yes" xml:space="preserve">
          <source>Pattern synonyms enable giving names to parametrized pattern schemes. They can also be thought of as abstract constructors that don&amp;rsquo;t have a bearing on data representation. For example, in a programming language implementation, we might represent types of the language as follows:</source>
          <target state="translated">模式同义词可以为参数化的模式方案命名。也可以将它们视为与数据表示形式无关的抽象构造函数。例如，在一种编程语言实现中，我们可能表示语言的类型如下：</target>
        </trans-unit>
        <trans-unit id="f21344d9f424a665540813e111458633c97a5bdc" translate="yes" xml:space="preserve">
          <source>Pattern synonyms permit abstracting from the representation to expose matchers that behave in a constructor-like manner with respect to pattern matching. We can create pattern synonyms for the known types we care about, without committing the representation to them (note that these don&amp;rsquo;t have to be defined in the same module as the &lt;code&gt;Type&lt;/code&gt; type):</source>
          <target state="translated">模式同义词允许从表示形式中抽象出来，以揭示匹配器，这些匹配器在模式匹配方面表现出类似于构造函数的方式。我们可以为我们关心的已知类型创建模式同义词，而无需将表示形式提交给它们（请注意，不必在与 &lt;code&gt;Type&lt;/code&gt; 类型相同的模块中定义它们）：</target>
        </trans-unit>
        <trans-unit id="f1b5e68af793661029a634f35b2a59b11f9b9320" translate="yes" xml:space="preserve">
          <source>PatternGuards</source>
          <target state="translated">PatternGuards</target>
        </trans-unit>
        <trans-unit id="b082623c56fa21b4be183e2556bcea6fc12a68f9" translate="yes" xml:space="preserve">
          <source>PatternMatchFail</source>
          <target state="translated">PatternMatchFail</target>
        </trans-unit>
        <trans-unit id="8b4c340e8567284d5ccd5a9a1b9deca1c715a890" translate="yes" xml:space="preserve">
          <source>PatternSynonyms</source>
          <target state="translated">PatternSynonyms</target>
        </trans-unit>
        <trans-unit id="4d34f7a2b0b3b6df62a051917d7e7ac2de8a38df" translate="yes" xml:space="preserve">
          <source>Patterns</source>
          <target state="translated">Patterns</target>
        </trans-unit>
        <trans-unit id="5aa426e2424e04e94a5a3e7b592a1b40bfa6724a" translate="yes" xml:space="preserve">
          <source>Pc: Punctuation, Connector</source>
          <target state="translated">Pc:标点符号,连接器</target>
        </trans-unit>
        <trans-unit id="30297337298c9a17c0e9ce8ff4fbffe4052874dd" translate="yes" xml:space="preserve">
          <source>Pd: Punctuation, Dash</source>
          <target state="translated">Pd:标点符号,破折号</target>
        </trans-unit>
        <trans-unit id="a80098f29b2d23293bbe78beff8b9cdca1b4c011" translate="yes" xml:space="preserve">
          <source>Pe: Punctuation, Close</source>
          <target state="translated">Pe:标点符号,关闭</target>
        </trans-unit>
        <trans-unit id="d2ade9ac589ddabb36b03a6f5440ab0dd29693cc" translate="yes" xml:space="preserve">
          <source>Per default the events are written to &lt;code&gt;&lt;em&gt;program&lt;/em&gt;.eventlog&lt;/code&gt; though the mechanism for writing event log data can be overridden with a custom &lt;code&gt;EventLogWriter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31566e3d063dad33b6e08c2f7f3e776d7e1473fd" translate="yes" xml:space="preserve">
          <source>Per default the events are written to &lt;code&gt;&lt;em&gt;program&lt;/em&gt;.eventlog&lt;/code&gt; though the mechanism for writing event log data can be overriden with a custom &lt;code&gt;EventLogWriter&lt;/code&gt;.</source>
          <target state="translated">尽管可以使用自定义 &lt;code&gt;EventLogWriter&lt;/code&gt; 覆盖写入事件日志数据的机制，但默认情况下，事件会写入 &lt;code&gt;&lt;em&gt;program&lt;/em&gt;.eventlog&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f7ef19e5bbcb51e651936b58513fef51416adde3" translate="yes" xml:space="preserve">
          <source>Perform a series of STM actions atomically.</source>
          <target state="translated">以原子方式执行一系列STM动作。</target>
        </trans-unit>
        <trans-unit id="4607f9e1b2aa67208f6265e145af0113fe0dbc2c" translate="yes" xml:space="preserve">
          <source>Perform an action with a finalizer action that is run, even if an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9ff4fe99f8968fc212ca25889a616ce793a23b" translate="yes" xml:space="preserve">
          <source>Perform compilation in parallel when possible. GHC will use up to ⟨N⟩ threads during compilation. If N is omitted, then it defaults to the number of processors. Note that compilation of a module may not begin until its dependencies have been built.</source>
          <target state="translated">尽可能地进行并行编译。GHC在编译过程中最多使用⟨N⟩线程。如果省略N,则默认为处理器的数量。需要注意的是,一个模块的编译可能要等到它的依赖关系被建立后才开始。</target>
        </trans-unit>
        <trans-unit id="f08a49b25677e2e61a727558011649fabe0e79a8" translate="yes" xml:space="preserve">
          <source>Perform other memory allocation, including in the GC, from node-local memory.</source>
          <target state="translated">从节点本地内存进行其他内存分配,包括在GC中。</target>
        </trans-unit>
        <trans-unit id="9c8aeaee99f19647da8cbc145bb54bbe2aea3ac7" translate="yes" xml:space="preserve">
          <source>Perform some computation without adding new entries to the &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">执行一些计算而无需向 &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; 添加新条目。</target>
        </trans-unit>
        <trans-unit id="bc6f40aca7e3932befef5ea8a6cf34162fbd455b" translate="yes" xml:space="preserve">
          <source>Perform some simplification of a built up &lt;code&gt;GDoc&lt;/code&gt;.</source>
          <target state="translated">对构建的 &lt;code&gt;GDoc&lt;/code&gt; 进行一些简化。</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="a40043065024f7a1212f7fbbfa9112c036c35b22" translate="yes" xml:space="preserve">
          <source>Performance information</source>
          <target state="translated">业绩信息</target>
        </trans-unit>
        <trans-unit id="2195bce8153488b859e69e630a7482f89cfcc5de" translate="yes" xml:space="preserve">
          <source>Performs &lt;code&gt;fdatasync(2)&lt;/code&gt; operation on file-descriptor.</source>
          <target state="translated">对文件描述符执行 &lt;code&gt;fdatasync(2)&lt;/code&gt; 操作。</target>
        </trans-unit>
        <trans-unit id="b7a0417e81aba8bc8d001bca03740cbc7548d90f" translate="yes" xml:space="preserve">
          <source>Performs &lt;code&gt;fsync(2)&lt;/code&gt; operation on file-descriptor.</source>
          <target state="translated">对文件描述符执行 &lt;code&gt;fsync(2)&lt;/code&gt; 操作。</target>
        </trans-unit>
        <trans-unit id="b29525a36bb807819b75d77b028444eec3dd3744" translate="yes" xml:space="preserve">
          <source>Performs &lt;code&gt;posix_fadvise(2)&lt;/code&gt; operation on file-descriptor.</source>
          <target state="translated">对文件描述符执行 &lt;code&gt;posix_fadvise(2)&lt;/code&gt; 操作。</target>
        </trans-unit>
        <trans-unit id="abc537c00b7a43d3addf179337e100cbe868862f" translate="yes" xml:space="preserve">
          <source>Performs &lt;code&gt;posix_fallocate(2)&lt;/code&gt; operation on file-descriptor.</source>
          <target state="translated">对文件描述符执行 &lt;code&gt;posix_fallocate(2)&lt;/code&gt; 操作。</target>
        </trans-unit>
        <trans-unit id="979b1f14628086440e0d691aadba7221f17405ab" translate="yes" xml:space="preserve">
          <source>Performs completions from the given line state.</source>
          <target state="translated">从给定的行状态中执行完成。</target>
        </trans-unit>
        <trans-unit id="d6f5806ebaf90276049ece561409944ce93d2f6e" translate="yes" xml:space="preserve">
          <source>PermParser</source>
          <target state="translated">PermParser</target>
        </trans-unit>
        <trans-unit id="4636c20125232583a78fcf9bd2b7beb3e0ee79a6" translate="yes" xml:space="preserve">
          <source>PermissionDenied</source>
          <target state="translated">PermissionDenied</target>
        </trans-unit>
        <trans-unit id="d06d55570938d12f87db3bf2b48caa9de22d9c67" translate="yes" xml:space="preserve">
          <source>Permissions</source>
          <target state="translated">Permissions</target>
        </trans-unit>
        <trans-unit id="d8940d325390445ba152697d12492c72d0b04785" translate="yes" xml:space="preserve">
          <source>Permit definition of instances which may lead to type-checker non-termination.</source>
          <target state="translated">允许定义可能导致类型检查员不终止的实例。</target>
        </trans-unit>
        <trans-unit id="393bb39440da7f4d26358355203d3146a3259f99" translate="yes" xml:space="preserve">
          <source>Permute</source>
          <target state="translated">Permute</target>
        </trans-unit>
        <trans-unit id="bf005fa540ff716e77993a2f382021660a60dc6a" translate="yes" xml:space="preserve">
          <source>Pf: Punctuation, Final quote</source>
          <target state="translated">Pf:标点符号,最后引用</target>
        </trans-unit>
        <trans-unit id="130c4886394ecb032566d46f2ceb00d5633b56b7" translate="yes" xml:space="preserve">
          <source>PhantomR</source>
          <target state="translated">PhantomR</target>
        </trans-unit>
        <trans-unit id="5c5efd35d4de06a56cd9d8bce7ff35054fbfb6e4" translate="yes" xml:space="preserve">
          <source>Phase of the compilation system</source>
          <target state="translated">汇编系统的阶段</target>
        </trans-unit>
        <trans-unit id="1299c5da4d36f7c6543acebafdc41ccf1b565939" translate="yes" xml:space="preserve">
          <source>Phases</source>
          <target state="translated">Phases</target>
        </trans-unit>
        <trans-unit id="9e4383ed7770bf7128e27cfd3770dcc6a2f9ac77" translate="yes" xml:space="preserve">
          <source>Pi: Punctuation, Initial quote</source>
          <target state="translated">皮。标点符号,初始报价</target>
        </trans-unit>
        <trans-unit id="6dc7779c6f76a5529f40811ad41c4010cc153569" translate="yes" xml:space="preserve">
          <source>Picking the right capability will help avoid unnecessary context switches. Ideally you should pass the capability that the thread that will be woken up last ran on, which you can find by calling &lt;code&gt;threadCapability&lt;/code&gt; in Haskell.</source>
          <target state="translated">选择正确的功能将有助于避免不必要的上下文切换。理想情况下，您应该传递上一次将被唤醒的线程所运行的功能，可以通过在Haskell中调用 &lt;code&gt;threadCapability&lt;/code&gt; 来找到该功能。</target>
        </trans-unit>
        <trans-unit id="6b18587952820d0dbe6bad15e1dae415748031e5" translate="yes" xml:space="preserve">
          <source>Pico</source>
          <target state="translated">Pico</target>
        </trans-unit>
        <trans-unit id="f298de9cea75ea5230dda5d9d28b4989aaf746f4" translate="yes" xml:space="preserve">
          <source>Pid</source>
          <target state="translated">Pid</target>
        </trans-unit>
        <trans-unit id="00dae071c082bb73eaed17b4bb3429280e110e8c" translate="yes" xml:space="preserve">
          <source>Pipe</source>
          <target state="translated">Pipe</target>
        </trans-unit>
        <trans-unit id="24a740d84ffcf739518c3074866ef1329aa79368" translate="yes" xml:space="preserve">
          <source>PipeBufferLimit</source>
          <target state="translated">PipeBufferLimit</target>
        </trans-unit>
        <trans-unit id="785af2a4ad3c4ee912623c6e0b6d4299ea305bf6" translate="yes" xml:space="preserve">
          <source>Pipes</source>
          <target state="translated">Pipes</target>
        </trans-unit>
        <trans-unit id="9e0a7d72506eac8eb62beb562cc0a99b2b58da61" translate="yes" xml:space="preserve">
          <source>PkgName</source>
          <target state="translated">PkgName</target>
        </trans-unit>
        <trans-unit id="323e26c5cebb97e7dbf03cace1de3f19bb3506f8" translate="yes" xml:space="preserve">
          <source>Place each generated function or data item into its own section in the output file if the target supports arbitrary sections. The name of the function or the name of the data item determines the section&amp;rsquo;s name in the output file.</source>
          <target state="translated">如果目标支持任意部分，则将每个生成的函数或数据项放入输出文件中其自己的部分中。函数的名称或数据项的名称决定了输出文件中该节的名称。</target>
        </trans-unit>
        <trans-unit id="7dccde26d3e873a5cc6c187e13a2e64082046864" translate="yes" xml:space="preserve">
          <source>Placing &lt;code&gt;INLINE&lt;/code&gt; pragmas on certain functions that are used a lot can have a dramatic effect. See &lt;a href=&quot;glasgow_exts#inline-pragma&quot;&gt;INLINE pragma&lt;/a&gt;.</source>
          <target state="translated">将 &lt;code&gt;INLINE&lt;/code&gt; 实用程序放在经常使用的某些功能上会产生巨大的影响。请参阅&lt;a href=&quot;glasgow_exts#inline-pragma&quot;&gt;INLINE编译指示&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a5104db6573a7bcd152469e6c86edf365a7ccbe8" translate="yes" xml:space="preserve">
          <source>Placing a &lt;code&gt;.ghci&lt;/code&gt; file in a directory with a Haskell project is a useful way to set certain project-wide options so you don&amp;rsquo;t have to type them every time you start GHCi: eg. if your project uses multi-parameter type classes, scoped type variables, and CPP, and has source files in three subdirectories A, B and C, you might put the following lines in &lt;code&gt;.ghci&lt;/code&gt;:</source>
          <target state="translated">将 &lt;code&gt;.ghci&lt;/code&gt; 文件放在具有Haskell项目的目录中是一种设置某些项目范围内选项的有用方法，因此您不必在每次启动GHCi时都键入它们：如果您的项目使用多参数类型类，作用域类型变量和CPP，并且源文件位于三个子目录A，B和C中，则可以在 &lt;code&gt;.ghci&lt;/code&gt; 中添加以下行：</target>
        </trans-unit>
        <trans-unit id="9c995f73efb3edc21d7f6d4456e31809091cc4f7" translate="yes" xml:space="preserve">
          <source>Platform differences</source>
          <target state="translated">平台差异</target>
        </trans-unit>
        <trans-unit id="f47156297a84abbf7baa9ecfe8129e469a19a3f7" translate="yes" xml:space="preserve">
          <source>Please advise us of other &amp;ldquo;helpful hints&amp;rdquo; that should go here!</source>
          <target state="translated">请告诉我们其他应该在此处的&amp;ldquo;有用提示&amp;rdquo;！</target>
        </trans-unit>
        <trans-unit id="7eaa184d05b12ec4d0c22d4d64c1a97838a9baab" translate="yes" xml:space="preserve">
          <source>Please also note that when doing incremental compilation (by &lt;code&gt;ghc --make&lt;/code&gt; or &lt;code&gt;ghc -c&lt;/code&gt;), this directory is where GHC looks into to find extended interface files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35f5a17562e092a639487a7dbd4558ee40520423" translate="yes" xml:space="preserve">
          <source>Please also note that when doing incremental compilation (by &lt;code&gt;ghc --make&lt;/code&gt; or &lt;code&gt;ghc -c&lt;/code&gt;), this directory is where GHC looks into to find interface files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc75381c4117eac8071f7754c526f344d1d5cfd7" translate="yes" xml:space="preserve">
          <source>Please also note that when doing incremental compilation, this directory is where GHC looks into to find object files from previous builds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506c81a0d84a987facc6b6cad61df64acf77c49e" translate="yes" xml:space="preserve">
          <source>Please do not confuse &lt;code&gt;&lt;a href=&quot;control-monad-except#t:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad-except#v:throwError&quot;&gt;throwError&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:SomeException&quot;&gt;SomeException&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt;, respectively. The latter are for exceptions built into GHC, by default, and are mostly used from within the IO monad. They do not interact with the &quot;exceptions&quot; in this package at all. This package allows you to define a new kind of exception control mechanism which does not necessarily need your code to be placed in the IO monad.</source>
          <target state="translated">请不要将 &lt;code&gt;&lt;a href=&quot;control-monad-except#t:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;control-monad-except#v:throwError&quot;&gt;throwError&lt;/a&gt;&lt;/code&gt; 与 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:SomeException&quot;&gt;SomeException&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; 分别混淆。默认情况下，后者是GHC内置的例外，通常在IO monad内部使用。它们根本不与该程序包中的&amp;ldquo;例外&amp;rdquo;进行交互。该软件包允许您定义一种新型的异常控制机制，该机制不一定需要将代码放置在IO monad中。</target>
        </trans-unit>
        <trans-unit id="c692e6e78b4a6c4d677fe5be7d6b2a1582726f5d" translate="yes" xml:space="preserve">
          <source>Please do not confuse &lt;code&gt;&lt;a href=&quot;control-monad-except#t:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad-except#v:throwError&quot;&gt;throwError&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:SomeException&quot;&gt;SomeException&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt;, respectively. The latter are for exceptions built into GHC, by default, and are mostly used from within the IO monad. They do not interact with the &quot;exceptions&quot; in this package at all. This package allows you to define a new kind of exception control mechanism which does not necessarily need your code to be placed in the IO monad.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c73afae87542d6e8cd63fcf7f4fddd71f7004f" translate="yes" xml:space="preserve">
          <source>Please make sure you know what is going on when using &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt;, otherwise you can be surprised by unexpected code growth or even corruption of the data structure.</source>
          <target state="translated">请确保您知道使用 &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt; 时发生了什么，否则您可能会因意外的代码增长甚至数据结构损坏而感到惊讶。</target>
        </trans-unit>
        <trans-unit id="5600a929920bed98ead548566e18fe4443f663d1" translate="yes" xml:space="preserve">
          <source>Please make sure you know what is going on when using &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt;, otherwise you can be surprised by unexpected code growth or even corruption of the data structure.</source>
          <target state="translated">请确保您知道使用 &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt; 时发生了什么，否则您可能会因意外的代码增长甚至数据结构损坏而感到惊讶。</target>
        </trans-unit>
        <trans-unit id="e69690c3be83e6b82a76a0137695bb5c56adc7bc" translate="yes" xml:space="preserve">
          <source>Please make sure you know what is going on when using &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt;, otherwise you can be surprised by unexpected code growth or even corruption of the data structure.</source>
          <target state="translated">请确保您知道使用 &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:mergeWithKey&quot;&gt;mergeWithKey&lt;/a&gt;&lt;/code&gt; 时发生了什么，否则您可能会因意外的代码增长甚至数据结构损坏而感到惊讶。</target>
        </trans-unit>
        <trans-unit id="11da447f43cf46de988876b5572b594db0d725d8" translate="yes" xml:space="preserve">
          <source>Please report any overly-slow GHC-compiled programs. Since GHC doesn&amp;rsquo;t have any credible competition in the performance department these days it&amp;rsquo;s hard to say what overly-slow means, so just use your judgement! Of course, if a GHC compiled program runs slower than the same program compiled with NHC or Hugs, then it&amp;rsquo;s definitely a bug.</source>
          <target state="translated">请报告任何GHC编译过慢的程序。由于GHC如今在绩效部门中没有任何可信的竞争，因此很难说过慢意味着什么，所以请使用您的判断！当然，如果GHC编译程序的运行速度比使用NHC或Hugs编译的程序慢，那么这肯定是一个错误。</target>
        </trans-unit>
        <trans-unit id="fe030bc44cd445dd18c598d2cb1edf112abb8e3c" translate="yes" xml:space="preserve">
          <source>Please report line-number errors that you find particularly unhelpful.</source>
          <target state="translated">请报告您认为特别无益的行号错误。</target>
        </trans-unit>
        <trans-unit id="4bd277cac9b50a94c530d065fbd95d2bb254e2e7" translate="yes" xml:space="preserve">
          <source>Please see the GHC API documentation for more about how to use internal APIs, etc.</source>
          <target state="translated">关于如何使用内部API等,请参见GHC API文档。</target>
        </trans-unit>
        <trans-unit id="cda26be1b0861c9ec0b102448fed676a99b6b48e" translate="yes" xml:space="preserve">
          <source>Please, oh please, use the &lt;code&gt;-v&lt;/code&gt; option when reporting bugs! Knowing that you ran the right bits in the right order is always the first thing we want to verify.</source>
          <target state="translated">请，哦，请在报告错误时使用 &lt;code&gt;-v&lt;/code&gt; 选项！知道您以正确的顺序运行了正确的位始终是我们要验证的第一件事。</target>
        </trans-unit>
        <trans-unit id="6f4d3ab5a5554b6ec4bae40adfb407a50ae52738" translate="yes" xml:space="preserve">
          <source>Plugin code runs in the &lt;code&gt;TcPluginM&lt;/code&gt; monad, which provides a restricted interface to GHC API functionality that is relevant for typechecker plugins, including &lt;code&gt;IO&lt;/code&gt; and reading the environment. If you need functionality that is not exposed in the &lt;code&gt;TcPluginM&lt;/code&gt; module, you can use &lt;code&gt;unsafeTcPluginTcM :: TcM a -&amp;gt; TcPluginM a&lt;/code&gt;, but are encouraged to contact the GHC team to suggest additions to the interface. Note that &lt;code&gt;TcPluginM&lt;/code&gt; can perform arbitrary IO via &lt;code&gt;tcPluginIO :: IO a -&amp;gt; TcPluginM a&lt;/code&gt;, although some care must be taken with side effects (particularly in &lt;code&gt;tcPluginSolve&lt;/code&gt;). In general, it is up to the plugin author to make sure that any IO they do is safe.</source>
          <target state="translated">插件代码在 &lt;code&gt;TcPluginM&lt;/code&gt; monad中运行，该插件提供GHC API功能的受限接口，该接口与typechecker插件（包括 &lt;code&gt;IO&lt;/code&gt; 和读取环境）相关。如果您需要 &lt;code&gt;TcPluginM&lt;/code&gt; 模块中未提供的功能，则可以使用 &lt;code&gt;unsafeTcPluginTcM :: TcM a -&amp;gt; TcPluginM a&lt;/code&gt; ，但是建议联系GHC团队以建议对该接口进行补充。请注意，尽管必须特别注意副作用，但 &lt;code&gt;TcPluginM&lt;/code&gt; 可以通过 &lt;code&gt;tcPluginIO :: IO a -&amp;gt; TcPluginM a&lt;/code&gt; 执行任意IO （尤其是在 &lt;code&gt;tcPluginSolve&lt;/code&gt; 中）。通常，由插件作者来确定他们所做的任何IO是安全的。</target>
        </trans-unit>
        <trans-unit id="0a02b13ee0dd37a4f7f44345efb7f4d0b31df1b9" translate="yes" xml:space="preserve">
          <source>Plugin modules live in a separate namespace from the user import namespace. By default, these two namespaces are the same; however, there are a few command line options which control specifically plugin packages:</source>
          <target state="translated">插件模块与用户导入的命名空间是分开的,默认情况下,这两个命名空间是一样的,但是,有一些命令行选项可以控制专门的插件包。默认情况下,这两个命名空间是相同的;然而,有一些命令行选项可以专门控制插件包。</target>
        </trans-unit>
        <trans-unit id="f76e0a28ea1fdb9e9e6ad3248cf9ef3d98836e8e" translate="yes" xml:space="preserve">
          <source>Plugins are modules that export at least a single identifier, &lt;code&gt;plugin&lt;/code&gt;, of type &lt;code&gt;GhcPlugins.Plugin&lt;/code&gt;. All plugins should &lt;code&gt;import GhcPlugins&lt;/code&gt; as it defines the interface to the compilation pipeline.</source>
          <target state="translated">插件是导出至少一个 &lt;code&gt;GhcPlugins.Plugin&lt;/code&gt; 类型的单个标识符 &lt;code&gt;plugin&lt;/code&gt; 的模块。所有插件都应 &lt;code&gt;import GhcPlugins&lt;/code&gt; 因为它定义了编译管道的接口。</target>
        </trans-unit>
        <trans-unit id="50a78f3b1666118502953351a9e4c0ece78555a4" translate="yes" xml:space="preserve">
          <source>Plugins are provided with all available constraints (including equalities and typeclass constraints), but it is easy for them to discard those that are not relevant to their domain, because they need return only those constraints for which they have made progress (either by solving or contradicting them).</source>
          <target state="translated">插件提供了所有可用的约束条件(包括等价性和类型类约束条件),但它们很容易抛弃那些与它们的领域无关的约束条件,因为它们只需要返回那些它们已经取得进展的约束条件(无论是通过解决还是矛盾)。</target>
        </trans-unit>
        <trans-unit id="bcfecc84377584d4ad3cb1e967e83c8d968b6d81" translate="yes" xml:space="preserve">
          <source>Plugins can be added on the command line with the &lt;a href=&quot;#ghc-flag--fplugin=%E2%9F%A8module%E2%9F%A9&quot;&gt;&lt;code&gt;-fplugin=⟨module⟩&lt;/code&gt;&lt;/a&gt; option where ⟨module⟩ is a module in a registered package that exports the plugin. Arguments can be passed to the plugins with the &lt;a href=&quot;#ghc-flag--fplugin-opt=%E2%9F%A8module%E2%9F%A9:%E2%9F%A8args%E2%9F%A9&quot;&gt;&lt;code&gt;-fplugin-opt=⟨module⟩:⟨args⟩&lt;/code&gt;&lt;/a&gt; option. The list of enabled plugins can be reset with the &lt;a href=&quot;#ghc-flag--fclear-plugins&quot;&gt;&lt;code&gt;-fclear-plugins&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">可以使用&lt;a href=&quot;#ghc-flag--fplugin=%E2%9F%A8module%E2%9F%A9&quot;&gt; &lt;code&gt;-fplugin=⟨module⟩&lt;/code&gt; &lt;/a&gt;选项在命令行中添加插件，其中⟨module⟩是已注册软件包中用于导出插件的模块。可以使用&lt;a href=&quot;#ghc-flag--fplugin-opt=%E2%9F%A8module%E2%9F%A9:%E2%9F%A8args%E2%9F%A9&quot;&gt; &lt;code&gt;-fplugin-opt=⟨module⟩:⟨args⟩&lt;/code&gt; &lt;/a&gt;选项将参数传递给插件。可以使用&lt;a href=&quot;#ghc-flag--fclear-plugins&quot;&gt; &lt;code&gt;-fclear-plugins&lt;/code&gt; &lt;/a&gt;选项重置启用的插件列表。</target>
        </trans-unit>
        <trans-unit id="9dae985525fa5c1bd52094480c5fadf0801829a6" translate="yes" xml:space="preserve">
          <source>Plugins cannot optimize/inspect C--, nor can they implement things like parser/front-end modifications like GCC, apart from limited changes to the constraint solver. If you feel strongly that any of these restrictions are too onerous, &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/mailing-lists-and-irc&quot;&gt;please give the GHC team a shout&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c33bcc738bc3d4e4633fbe0d574f0b8c7bf15d" translate="yes" xml:space="preserve">
          <source>Plugins cannot optimize/inspect C-\-, nor can they implement things like parser/front-end modifications like GCC, apart from limited changes to the constraint solver. If you feel strongly that any of these restrictions are too onerous, &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/MailingListsAndIRC&quot;&gt;please give the GHC team a shout&lt;/a&gt;.</source>
          <target state="translated">插件无法优化/检查C-\-，也不能实现诸如解析器/前端修改之类的功能（如GCC），除了对约束求解器的有限更改之外。如果您强烈认为上述限制中的任何一项都过于繁重，&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/MailingListsAndIRC&quot;&gt;请向GHC小组大喊一声&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="657ba732d1e87d8b93008540bca513f726773ecb" translate="yes" xml:space="preserve">
          <source>Plugins do not work with &lt;code&gt;-fexternal-interpreter&lt;/code&gt;. If you need to run plugins with &lt;code&gt;-fexternal-interpreter&lt;/code&gt; let GHC developers know in &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/14335&quot;&gt;#14335&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1acd4a0590b84ad78012a8281aa3759223cdd151" translate="yes" xml:space="preserve">
          <source>Plugins do not work with &lt;code&gt;-fexternal-interpreter&lt;/code&gt;. If you need to run plugins with &lt;code&gt;-fexternal-interpreter&lt;/code&gt; let GHC developers know in &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/14335&quot;&gt;Issue #14335&lt;/a&gt;.</source>
          <target state="translated">插件不适用于 &lt;code&gt;-fexternal-interpreter&lt;/code&gt; 。如果您需要使用 &lt;code&gt;-fexternal-interpreter&lt;/code&gt; 运行插件，请在&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/14335&quot;&gt;问题＃14335中&lt;/a&gt;告知GHC开发人员。</target>
        </trans-unit>
        <trans-unit id="0d1483c843780c87aec4fd3aa51d7d94a8b96a4e" translate="yes" xml:space="preserve">
          <source>Po: Punctuation, Other</source>
          <target state="translated">Po:标点符号,其他</target>
        </trans-unit>
        <trans-unit id="f79a28423ed1ae0232efb54ad41227d0955084f3" translate="yes" xml:space="preserve">
          <source>Point</source>
          <target state="translated">Point</target>
        </trans-unit>
        <trans-unit id="a7f9dff21b1ddcdcf80248743f347d8d0da9bd72" translate="yes" xml:space="preserve">
          <source>Pointer equality.</source>
          <target state="translated">指针平等。</target>
        </trans-unit>
        <trans-unit id="9b121b8b051ea2dd152358f19ef9a92d0061d863" translate="yes" xml:space="preserve">
          <source>Pointer to the data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e8cc6922489fcddbf0a22dd3e2de7b10d8bd37" translate="yes" xml:space="preserve">
          <source>Polar form</source>
          <target state="translated">极性形式</target>
        </trans-unit>
        <trans-unit id="08ec06c8c3d316a130a751bea478b9d8cd36463e" translate="yes" xml:space="preserve">
          <source>Poll the semaphore until it is available, then lock it. Unlike semWait, this will block only the current thread rather than the entire process.</source>
          <target state="translated">轮询信号体直到它可用,然后锁定它。与semWait不同的是,这将只阻塞当前线程而不是整个进程。</target>
        </trans-unit>
        <trans-unit id="f60030530d452b22d889af65e4dbea1ad5231ba6" translate="yes" xml:space="preserve">
          <source>PolyKinds</source>
          <target state="translated">PolyKinds</target>
        </trans-unit>
        <trans-unit id="778627418cb4b30cdfe47281afdbf30f1a173700" translate="yes" xml:space="preserve">
          <source>Pool</source>
          <target state="translated">Pool</target>
        </trans-unit>
        <trans-unit id="41b680d741ab1eaec7b7f722d04d7131ec90b3b5" translate="yes" xml:space="preserve">
          <source>Pool management</source>
          <target state="translated">泳池管理</target>
        </trans-unit>
        <trans-unit id="71deae26a59f4c366e9d565ae1eea4f3ace4a347" translate="yes" xml:space="preserve">
          <source>Pools are currently implemented using &lt;code&gt;malloc/free&lt;/code&gt;, so while they might be a more convenient way to structure your memory allocation than using one of the other forms of allocation, they won&amp;rsquo;t be any more efficient. We do plan to provide an improved-performance implementation of Pools in the future, however.</source>
          <target state="translated">池当前是使用 &lt;code&gt;malloc/free&lt;/code&gt; 实现的，因此尽管与使用其他形式的分配相比，它们可能是一种更方便的结构化内存分配方式，但它们的效率不会更高。但是，我们确实计划在将来提供性能更好的Pools实现。</target>
        </trans-unit>
        <trans-unit id="2df5eed666ad15052a9c4b2714990bcfc3e1bfe4" translate="yes" xml:space="preserve">
          <source>Pop the ByteString we have constructed so far, if any, yielding a new chunk in the result ByteString.</source>
          <target state="translated">弹出到目前为止我们已经构建的ByteString,如果有的话,在结果ByteString中产生一个新的块。</target>
        </trans-unit>
        <trans-unit id="fe9afec2cdc2c7d8517084a2d65a63864d25ccaa" translate="yes" xml:space="preserve">
          <source>Pop the most recent call-site off the &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; 弹出最近的呼叫站点。</target>
        </trans-unit>
        <trans-unit id="184d55340a7ea9436efac0e4b30658a294cc194c" translate="yes" xml:space="preserve">
          <source>Pop the smallest element from the queue, using the supplied comparator on the tag, deferring to the item's original position when the comparator returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ord#v:EQ&quot;&gt;EQ&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">使用标签上提供的比较器，从队列中弹出最小的元素，当比较器返回 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ord#v:EQ&quot;&gt;EQ&lt;/a&gt;&lt;/code&gt; 时，推迟到项目的原始位置。</target>
        </trans-unit>
        <trans-unit id="0c1beba4a0f9fa2d27717b6fdfbe4fe2c7701db7" translate="yes" xml:space="preserve">
          <source>Pop the smallest element from the queue, using the supplied comparator on the tag, deferring to the item's original position when the comparator returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-ord#v:EQ&quot;&gt;EQ&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b8d7b36ba997a86666ef5b0a2e955a7f3121f1d" translate="yes" xml:space="preserve">
          <source>Pop the smallest element from the queue, using the supplied comparator on the tag.</source>
          <target state="translated">使用标签上提供的比较器,从队列中弹出最小的元素。</target>
        </trans-unit>
        <trans-unit id="d0305355484ccbf0a5332dd6a8f21a5cc2b3e243" translate="yes" xml:space="preserve">
          <source>Pop the smallest element from the queue, using the supplied comparator, deferring to the item's original position when the comparator returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ord#v:EQ&quot;&gt;EQ&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">使用提供的比较器从队列中弹出最小的元素，当比较器返回 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ord#v:EQ&quot;&gt;EQ&lt;/a&gt;&lt;/code&gt; 时，推迟到项目的原始位置。</target>
        </trans-unit>
        <trans-unit id="01d0a772369a2f419cd1206d689c75ab3f892dbb" translate="yes" xml:space="preserve">
          <source>Pop the smallest element from the queue, using the supplied comparator, deferring to the item's original position when the comparator returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-ord#v:EQ&quot;&gt;EQ&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecde65687583e5067a6f236eb0adeaea9fb3c926" translate="yes" xml:space="preserve">
          <source>Pop the smallest element from the queue, using the supplied comparator.</source>
          <target state="translated">使用提供的比较器,从队列中取出最小的元素。</target>
        </trans-unit>
        <trans-unit id="b307b88c84327b1804aee227595be53342245965" translate="yes" xml:space="preserve">
          <source>Portability</source>
          <target state="translated">Portability</target>
        </trans-unit>
        <trans-unit id="1bacaf21b2fe90b21bbc565ba919a04acd5baee5" translate="yes" xml:space="preserve">
          <source>Portable</source>
          <target state="translated">Portable</target>
        </trans-unit>
        <trans-unit id="89d8f29ace289b18dbbef31338d9cf587f44295f" translate="yes" xml:space="preserve">
          <source>Portable to Hugs and GHC. Requires MPTCs</source>
          <target state="translated">便携于Hugs和GHC。需要MPTCs</target>
        </trans-unit>
        <trans-unit id="d67331323a539f65439ac2219e811fa90a48d4a1" translate="yes" xml:space="preserve">
          <source>Portions Copyright : (c) Tom Harper 2008-2009, (c) Bryan O'Sullivan 2009, (c) Duncan Coutts 2009</source>
          <target state="translated">部分版权:(c)Tom Harper 2008-2009,(c)Bryan O'Sullivan 2009,(c)Duncan Coutts 2009。</target>
        </trans-unit>
        <trans-unit id="3db8887ea19a282f0bf7fbe5de701083bec25186" translate="yes" xml:space="preserve">
          <source>Portions obtained from hbc (c) Lennart Augusstson</source>
          <target state="translated">从hbc获得的部分 (c)Lennart Augusstson。</target>
        </trans-unit>
        <trans-unit id="c9b1b30d011fe2b612eff7c95b1c553cdf039f7c" translate="yes" xml:space="preserve">
          <source>Pos</source>
          <target state="translated">Pos</target>
        </trans-unit>
        <trans-unit id="cf1c85adba548e8d681255278976584a7e4a44de" translate="yes" xml:space="preserve">
          <source>Position</source>
          <target state="translated">Position</target>
        </trans-unit>
        <trans-unit id="718239faf2c7ad4b5be8fc3d53f933e6298dd64c" translate="yes" xml:space="preserve">
          <source>Position in file</source>
          <target state="translated">在档案中的位置</target>
        </trans-unit>
        <trans-unit id="a98f91ff888a0baac961ccc11866ac56d92f3491" translate="yes" xml:space="preserve">
          <source>Position independent executables are required by some platforms as they enable address-space layout randomization (ASLR), a common security measure. They can also be useful as they can be dynamically loaded and used as shared libraries by other executables.</source>
          <target state="translated">一些平台需要独立于位置的可执行文件,因为它们可以实现地址-空间布局随机化(ASLR),这是一种常见的安全措施。它们也很有用,因为它们可以被其他可执行文件动态加载并作为共享库使用。</target>
        </trans-unit>
        <trans-unit id="6a42e40e7381223e58fc6699427898624e3d568b" translate="yes" xml:space="preserve">
          <source>Position independent executables should be dynamically-linked (e.g. built with &lt;a href=&quot;#ghc-flag--dynamic&quot;&gt;&lt;code&gt;-dynamic&lt;/code&gt;&lt;/a&gt; and only loaded into other dynamically-linked executables to ensure that only one &lt;code&gt;libHSrts&lt;/code&gt; is present if loaded into the address space of another Haskell process.</source>
          <target state="translated">位置无关的可执行文件应进行动态链接（例如，使用&lt;a href=&quot;#ghc-flag--dynamic&quot;&gt; &lt;code&gt;-dynamic&lt;/code&gt; &lt;/a&gt;构建，并且仅加载到其他动态链接的可执行文件中，以确保如果加载到另一个Haskell进程的地址空间中，则仅存在一个 &lt;code&gt;libHSrts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f21a0136d6ab8fb27cd7d944927f57c96bb35706" translate="yes" xml:space="preserve">
          <source>PosixVersion</source>
          <target state="translated">PosixVersion</target>
        </trans-unit>
        <trans-unit id="6662b9da87a72fea9bd249c0718c63c20d41c5e4" translate="yes" xml:space="preserve">
          <source>Postcomposition with a pure function (right-to-left variant).</source>
          <target state="translated">纯函数的后组合(从右到左的变体)。</target>
        </trans-unit>
        <trans-unit id="68b34bc77c96ccaa5d23f02c3788537d21fd9171" translate="yes" xml:space="preserve">
          <source>Postcomposition with a pure function.</source>
          <target state="translated">用纯函数进行后组合。</target>
        </trans-unit>
        <trans-unit id="c4450a1082e97ad779541d6b592b90e8113cd10b" translate="yes" xml:space="preserve">
          <source>PostfixOperators</source>
          <target state="translated">PostfixOperators</target>
        </trans-unit>
        <trans-unit id="5190c068a9cfa9fe6dafeaa183d9b2aaef45c829" translate="yes" xml:space="preserve">
          <source>Ppr</source>
          <target state="translated">Ppr</target>
        </trans-unit>
        <trans-unit id="0c19dcec06f6c91c0f2eff83d377b3454295bda3" translate="yes" xml:space="preserve">
          <source>PprM</source>
          <target state="translated">PprM</target>
        </trans-unit>
        <trans-unit id="38f93d32853eca4603a582eb7a404079e10b855d" translate="yes" xml:space="preserve">
          <source>Pragma</source>
          <target state="translated">Pragma</target>
        </trans-unit>
        <trans-unit id="6a503249a0dda8aeffc97783a04cdefe488d7002" translate="yes" xml:space="preserve">
          <source>Pragmas all take the form &lt;code&gt;{-# word ... #-}&lt;/code&gt; where ⟨word⟩ indicates the type of pragma, and is followed optionally by information specific to that type of pragma. Case is ignored in ⟨word⟩. The various values for ⟨word⟩ that GHC understands are described in the following sections; any pragma encountered with an unrecognised ⟨word⟩ is ignored. The layout rule applies in pragmas, so the closing &lt;code&gt;#-}&lt;/code&gt; should start in a column to the right of the opening &lt;code&gt;{-#&lt;/code&gt;.</source>
          <target state="translated">语法全都采用 &lt;code&gt;{-# word ... #-}&lt;/code&gt; ，其中⟨word⟩表示语法的类型，并在其后可选地包含特定于该语法的信息。在&amp;ldquo;单词&amp;rdquo;中忽略大小写。以下各节介绍了GHC可以理解的&amp;ldquo;单词&amp;rdquo;的各种值；遇到无法识别的&amp;ldquo;单词&amp;rdquo;时，将忽略所有杂语。布局规则适用于编译指示，因此结尾的 &lt;code&gt;#-}&lt;/code&gt; 应该在开头 &lt;code&gt;{-#&lt;/code&gt; 右边的一列中开始。</target>
        </trans-unit>
        <trans-unit id="de91c36fde9f78913dd737b3ac96a872a8cf867b" translate="yes" xml:space="preserve">
          <source>Pre-defined directories</source>
          <target state="translated">预先定义的目录</target>
        </trans-unit>
        <trans-unit id="b7f5558e808991eda01cbcf863b6fb9f860df9c3" translate="yes" xml:space="preserve">
          <source>Pre-emption</source>
          <target state="translated">Pre-emption</target>
        </trans-unit>
        <trans-unit id="616e1d6e6f47b2dc96ac1a5ae54540016239b6ef" translate="yes" xml:space="preserve">
          <source>Pre-processing is optional, the &lt;a href=&quot;phases#ghc-flag--cpp&quot;&gt;&lt;code&gt;-cpp&lt;/code&gt;&lt;/a&gt; flag turns it on. See &lt;a href=&quot;phases#c-pre-processor&quot;&gt;Options affecting the C pre-processor&lt;/a&gt; for more details.</source>
          <target state="translated">预处理是可选的，&lt;a href=&quot;phases#ghc-flag--cpp&quot;&gt; &lt;code&gt;-cpp&lt;/code&gt; &lt;/a&gt;标志将其打开。有关更多详细信息，请参见&lt;a href=&quot;phases#c-pre-processor&quot;&gt;影响C预处理程序的选项&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b56df0dc547f1c3c9c6bdf3cf6bc836ae75d592f" translate="yes" xml:space="preserve">
          <source>Prec</source>
          <target state="translated">Prec</target>
        </trans-unit>
        <trans-unit id="ab86fb82a986460447b29bbb55ca5b9bf867bad6" translate="yes" xml:space="preserve">
          <source>Precedence</source>
          <target state="translated">Precedence</target>
        </trans-unit>
        <trans-unit id="69d353b33ac29db4cf194048bdbcd68112b6f57f" translate="yes" xml:space="preserve">
          <source>Precedence operations</source>
          <target state="translated">优先权业务</target>
        </trans-unit>
        <trans-unit id="6e9db1fa77d52cf522ad8a7a915070250aa06a60" translate="yes" xml:space="preserve">
          <source>Precedences</source>
          <target state="translated">Precedences</target>
        </trans-unit>
        <trans-unit id="7d4c782369e2a524fee0cc4b706316c8a2f516ce" translate="yes" xml:space="preserve">
          <source>Precomposition with a pure function (right-to-left variant).</source>
          <target state="translated">纯函数的预组合(从右到左的变体)。</target>
        </trans-unit>
        <trans-unit id="7efe8aecf7d7ec9a6579a56c2d3f073a07aea88e" translate="yes" xml:space="preserve">
          <source>Precomposition with a pure function.</source>
          <target state="translated">用纯函数进行预组合。</target>
        </trans-unit>
        <trans-unit id="754ba6611e7bacba5a9fb90876697ee505efa3e8" translate="yes" xml:space="preserve">
          <source>Pred</source>
          <target state="translated">Pred</target>
        </trans-unit>
        <trans-unit id="7b11e8e297f569849de36b44d30fcbbb4fbbe8ad" translate="yes" xml:space="preserve">
          <source>PredQ</source>
          <target state="translated">PredQ</target>
        </trans-unit>
        <trans-unit id="9eee28bfd739e1debf4d3b892d013537ae16da9f" translate="yes" xml:space="preserve">
          <source>Predicate</source>
          <target state="translated">Predicate</target>
        </trans-unit>
        <trans-unit id="5d3249c48d800f447f533f0fa317e54353a59d06" translate="yes" xml:space="preserve">
          <source>Predicate determining whether the first argument is inside the second argument.</source>
          <target state="translated">确定第一个参数是否在第二个参数内部的谓词。</target>
        </trans-unit>
        <trans-unit id="55b56b7a38f2aaf5493f86b3d26035da3508b3bb" translate="yes" xml:space="preserve">
          <source>Predicate to select exceptions</source>
          <target state="translated">选择例外情况的谓词</target>
        </trans-unit>
        <trans-unit id="74ff649a3a1be6633677b33ec66e3623a45738d8" translate="yes" xml:space="preserve">
          <source>Predicates</source>
          <target state="translated">Predicates</target>
        </trans-unit>
        <trans-unit id="96b847cc7746c0d1f7662c2ba5e962da4df9bff5" translate="yes" xml:space="preserve">
          <source>Predicates on documents</source>
          <target state="translated">文件的谓词</target>
        </trans-unit>
        <trans-unit id="90eceb016c51a762f15c7287008c113f6f37296c" translate="yes" xml:space="preserve">
          <source>Prefix</source>
          <target state="translated">Prefix</target>
        </trans-unit>
        <trans-unit id="10a0703c5e9784ab6072eefca5e5d67b8bab1aea" translate="yes" xml:space="preserve">
          <source>PrefixI</source>
          <target state="translated">PrefixI</target>
        </trans-unit>
        <trans-unit id="3d7f56ffea75d06f65599fca02fef48b1a3c121a" translate="yes" xml:space="preserve">
          <source>Prefs</source>
          <target state="translated">Prefs</target>
        </trans-unit>
        <trans-unit id="2d8e8af65e69e615c74499754307d13c9b3e4bab" translate="yes" xml:space="preserve">
          <source>Prelude</source>
          <target state="translated">Prelude</target>
        </trans-unit>
        <trans-unit id="17951797c095385f82b7ed2be1b0b9cbd50b504e" translate="yes" xml:space="preserve">
          <source>Prepares an empty write buffer. This lets the device decide how to set up a write buffer: the buffer may need to point to a specific location in memory, for example. This is typically used by the client when switching from reading to writing on a buffered read/write device.</source>
          <target state="translated">准备一个空的写缓冲区。这让设备决定如何设置写缓冲区:例如,缓冲区可能需要指向内存中的特定位置。这通常是客户端在缓冲读/写设备上从读切换到写时使用的。</target>
        </trans-unit>
        <trans-unit id="e756fbcebaf305207bf892820ae2fb41ad4bdd3f" translate="yes" xml:space="preserve">
          <source>Prepend an element to the stream.</source>
          <target state="translated">将一个元素预置到流中。</target>
        </trans-unit>
        <trans-unit id="24451f10c39a033b9d567c3384a201089e447d0e" translate="yes" xml:space="preserve">
          <source>Present a visual alert using the &lt;code&gt;flash&lt;/code&gt; capability.</source>
          <target state="translated">使用 &lt;code&gt;flash&lt;/code&gt; 功能显示视觉警报。</target>
        </trans-unit>
        <trans-unit id="0f1fbb34fcfce7c17bb348ece516318a4a36a3e4" translate="yes" xml:space="preserve">
          <source>Presently, only standard constraints, tuples and type synonyms for those two sorts of constraint are permitted in instance contexts and superclasses (without extra flags). The reason is that permitting more general constraints can cause type checking to loop, as it would with these two programs:</source>
          <target state="translated">目前,在实例上下文和超类中只允许标准约束、元组和这两种约束的类型同义词(没有额外的标志)。原因是允许更多的通用约束会导致类型检查循环,就像这两个程序一样。</target>
        </trans-unit>
        <trans-unit id="3a533287e20f4ecff2b1e94d9ecd624990690055" translate="yes" xml:space="preserve">
          <source>Preserve, unchanged, the entries whose keys are missing from the other map.</source>
          <target state="translated">保留其他地图中键值缺失的条目,保持不变。</target>
        </trans-unit>
        <trans-unit id="b0f7adbbb69e916ea1927afb55f2ecddd2cc7a5f" translate="yes" xml:space="preserve">
          <source>Pretty</source>
          <target state="translated">Pretty</target>
        </trans-unit>
        <trans-unit id="9bfe234869187d35c7a0ae4cca314aded4bb1a5b" translate="yes" xml:space="preserve">
          <source>Pretty much anyone who uses this function is in a state of sin because whether or not a character is encodable will, in general, depend on the context in which it occurs.</source>
          <target state="translated">几乎所有使用这个功能的人都处于罪恶状态,因为一个字符是否可以编码,一般来说,会取决于它出现的上下文。</target>
        </trans-unit>
        <trans-unit id="9a3ba5e8fa76ce9f1f76507bf772a40b2714f091" translate="yes" xml:space="preserve">
          <source>Pretty print a &lt;code&gt;&lt;a href=&quot;ghc-exception#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">漂亮打印一个 &lt;code&gt;&lt;a href=&quot;ghc-exception#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6dedd939f5eb8f17de16de0deb9579148f161282" translate="yes" xml:space="preserve">
          <source>Pretty print a &lt;code&gt;&lt;a href=&quot;ghc-exception#t:SrcLoc&quot;&gt;SrcLoc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">漂亮地打印一个 &lt;code&gt;&lt;a href=&quot;ghc-exception#t:SrcLoc&quot;&gt;SrcLoc&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d2157c3e2c2e08e7d9469e18b1d6d2509fdc1116" translate="yes" xml:space="preserve">
          <source>Pretty print a &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">漂亮打印一个 &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="24a5908c42be14f75c50cae9cb71fef066d896a2" translate="yes" xml:space="preserve">
          <source>Pretty print a &lt;code&gt;&lt;a href=&quot;ghc-stack#t:SrcLoc&quot;&gt;SrcLoc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">漂亮地打印一个 &lt;code&gt;&lt;a href=&quot;ghc-stack#t:SrcLoc&quot;&gt;SrcLoc&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="296539186fb752a49f377917ff5a8b60910cd510" translate="yes" xml:space="preserve">
          <source>Pretty print a value with the &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespjclass#v:prettyNormal&quot;&gt;prettyNormal&lt;/a&gt;&lt;/code&gt; level.</source>
          <target state="translated">用 &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespjclass#v:prettyNormal&quot;&gt;prettyNormal&lt;/a&gt;&lt;/code&gt; 级别漂亮地打印一个值。</target>
        </trans-unit>
        <trans-unit id="dee0fe2bf13d7aeaf670d551f0f8e724a8229133" translate="yes" xml:space="preserve">
          <source>Pretty print a value with the &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespjclass#v:prettyNormal&quot;&gt;prettyNormal&lt;/a&gt;&lt;/code&gt; level.</source>
          <target state="translated">用 &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespjclass#v:prettyNormal&quot;&gt;prettyNormal&lt;/a&gt;&lt;/code&gt; 级别漂亮地打印一个值。</target>
        </trans-unit>
        <trans-unit id="3902ef81760a73ba152aafba884456ad6ae55826" translate="yes" xml:space="preserve">
          <source>Pretty print the type. &lt;code&gt;ShowType :: k -&amp;gt; ErrorMessage&lt;/code&gt;</source>
          <target state="translated">漂亮打印类型。 &lt;code&gt;ShowType :: k -&amp;gt; ErrorMessage&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0d1c61942f4d68589a44b45a71c4f04ff54f0e46" translate="yes" xml:space="preserve">
          <source>Pretty printing class, simlar to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; but nicer looking.</source>
          <target state="translated">漂亮的印刷课，类似的 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; 但看起来更好。</target>
        </trans-unit>
        <trans-unit id="fb9fb477d57eb6faf402bf1e5b55cd7c5bcd432d" translate="yes" xml:space="preserve">
          <source>Pretty printing class, simlar to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; but nicer looking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa35ad6c9b5033404eb8f0e2bfca62d78aef25b2" translate="yes" xml:space="preserve">
          <source>Pretty printing class. The precedence level is used in a similar way as in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; class. Minimal complete definition is either &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespjclass#v:pPrintPrec&quot;&gt;pPrintPrec&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespjclass#v:pPrint&quot;&gt;pPrint&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">漂亮的印刷课。优先级别的使用方式与 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; 类中的使用方式类似。最小的完整定义是 &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespjclass#v:pPrintPrec&quot;&gt;pPrintPrec&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespjclass#v:pPrint&quot;&gt;pPrint&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6003344bfaa462ef2829aa012e40d0f204fd8d4b" translate="yes" xml:space="preserve">
          <source>Pretty printing class. The precedence level is used in a similar way as in the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; class. Minimal complete definition is either &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespjclass#v:pPrintPrec&quot;&gt;pPrintPrec&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespjclass#v:pPrint&quot;&gt;pPrint&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">漂亮的印刷课。优先级别的使用方式与 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; 类中的使用方式类似。最小的完整定义是 &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespjclass#v:pPrintPrec&quot;&gt;pPrintPrec&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespjclass#v:pPrint&quot;&gt;pPrint&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7605fec354fe6f4bc05aa4679861cd3ca163d486" translate="yes" xml:space="preserve">
          <source>Pretty printing class. The precedence level is used in a similar way as in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; class. Minimal complete definition is either &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespjclass#v:pPrintPrec&quot;&gt;pPrintPrec&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespjclass#v:pPrint&quot;&gt;pPrint&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ed9c1885cc6441472c3a338a7ff234773679fa" translate="yes" xml:space="preserve">
          <source>Pretty printing class. The precedence level is used in a similar way as in the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; class. Minimal complete definition is either &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespjclass#v:pPrintPrec&quot;&gt;pPrintPrec&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespjclass#v:pPrint&quot;&gt;pPrint&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0b905e0e2fe34c10df06c3257897a0d4174db5" translate="yes" xml:space="preserve">
          <source>Pretty printing via &lt;code&gt;&lt;a href=&quot;language-haskell-th-ppr#v:pprPatSynType&quot;&gt;pprPatSynType&lt;/a&gt;&lt;/code&gt; abbreviates a pattern synonym's type unambiguously in concrete syntax: The rule of thumb is to print initial empty universals and the required context as &lt;code&gt;() =&amp;gt;&lt;/code&gt;, if existentials and a provided context follow. If only universals and their required context, but no existentials are specified, only the universals and their required context are printed. If both or none are specified, so both (or none) are printed.</source>
          <target state="translated">通过 &lt;code&gt;&lt;a href=&quot;language-haskell-th-ppr#v:pprPatSynType&quot;&gt;pprPatSynType&lt;/a&gt;&lt;/code&gt; 进行漂亮的打印将在具体语法中明确地缩写出模式同义词的类型：经验法则是，如果遵循存在和提供的上下文，则将初始的空通用字符和所需的上下文打印为 &lt;code&gt;() =&amp;gt;&lt;/code&gt; 。如果仅指定通用性及其所需的上下文，但未指定存在性，则仅打印通用性及其所需的上下文。如果未指定任何一个或全部，则同时打印两个（或全部）。</target>
        </trans-unit>
        <trans-unit id="913403112273ef6e2854bcf0f8c908964725c43b" translate="yes" xml:space="preserve">
          <source>Pretty prints a pattern synonym type signature</source>
          <target state="translated">漂亮的打印图案同义词类型签名</target>
        </trans-unit>
        <trans-unit id="d4e682f695f1f2c1d3c722dd6d5b3b250860bb3f" translate="yes" xml:space="preserve">
          <source>Pretty prints a pattern synonym's type; follows the usual conventions to print a pattern synonym type compactly, yet unambiguously. See the note on &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:PatSynType&quot;&gt;PatSynType&lt;/a&gt;&lt;/code&gt; and the section on pattern synonyms in the GHC user's guide for more information.</source>
          <target state="translated">Pretty打印模式同义词的类型；遵循通常的约定来紧凑而明确地打印模式同义词类型。有关更多信息，请参见GHC用户指南中有关 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:PatSynType&quot;&gt;PatSynType&lt;/a&gt;&lt;/code&gt; 的注释和有关模式同义词的部分。</target>
        </trans-unit>
        <trans-unit id="f7763808de129b1653f86f4b6c4478b1be06d267" translate="yes" xml:space="preserve">
          <source>Pretty typeclass</source>
          <target state="translated">漂亮的类型</target>
        </trans-unit>
        <trans-unit id="9e53c1cac90b48260e445d3942d8dc757e8a9ad1" translate="yes" xml:space="preserve">
          <source>Pretty-printer</source>
          <target state="translated">Pretty-printer</target>
        </trans-unit>
        <trans-unit id="299e09a4ecf7d0f0c71dd28f182c4640d6372f53" translate="yes" xml:space="preserve">
          <source>PrettyLevel</source>
          <target state="translated">PrettyLevel</target>
        </trans-unit>
        <trans-unit id="cfad1a2758e3a164bd5b4b3f7f8ff793ee9e089b" translate="yes" xml:space="preserve">
          <source>Prevent loading of the user&amp;rsquo;s local package database in the initial stack.</source>
          <target state="translated">防止在初始堆栈中加载用户的本地软件包数据库。</target>
        </trans-unit>
        <trans-unit id="82f73f32fff7781aec7b0b514e54e58cf7551ee7" translate="yes" xml:space="preserve">
          <source>Prevents the compiler from applying the monomorphism restriction to bindings lacking explicit type signatures.</source>
          <target state="translated">防止编译器将单形限制应用于缺乏显式类型签名的绑定。</target>
        </trans-unit>
        <trans-unit id="9628fe995a8e090e6fd2edb95cb73c1eb15224d5" translate="yes" xml:space="preserve">
          <source>Previous versions of GHC accepted &lt;code&gt;OPTIONS&lt;/code&gt; rather than &lt;code&gt;OPTIONS_GHC&lt;/code&gt;, but that is now deprecated.</source>
          <target state="translated">GHC的 &lt;code&gt;OPTIONS_GHC&lt;/code&gt; 版本接受 &lt;code&gt;OPTIONS&lt;/code&gt; 而不是OPTIONS_GHC，但现已弃用。</target>
        </trans-unit>
        <trans-unit id="91406666c314d5f229091e983a7d1e2bee142e52" translate="yes" xml:space="preserve">
          <source>Previously we discussed annotation pragmas (&lt;a href=&quot;#annotation-pragmas&quot;&gt;Source annotations&lt;/a&gt;), which we mentioned could be used to give compiler plugins extra guidance or information. Annotations for a module can be retrieved by a plugin, but you must go through the modules &lt;code&gt;ModGuts&lt;/code&gt; in order to get it. Because annotations can be arbitrary instances of &lt;code&gt;Data&lt;/code&gt; and &lt;code&gt;Typeable&lt;/code&gt;, you need to give a type annotation specifying the proper type of data to retrieve from the interface file, and you need to make sure the annotation type used by your users is the same one your plugin uses. For this reason, we advise distributing annotations as part of the package which also provides compiler plugins if possible.</source>
          <target state="translated">先前我们讨论了注释注释（&lt;a href=&quot;#annotation-pragmas&quot;&gt;源注释&lt;/a&gt;），我们提到的注释注释可用于为编译器插件提供额外的指导或信息。可以通过插件检索模块的注释，但是必须通过模块 &lt;code&gt;ModGuts&lt;/code&gt; 才能获取它。由于注释可以是 &lt;code&gt;Data&lt;/code&gt; 和 &lt;code&gt;Typeable&lt;/code&gt; 的任意实例，因此您需要提供一种类型注释，以指定要从接口文件中检索的数据的正确类型，并且需要确保用户使用的注释类型与您的插件相同用途。因此，我们建议在程序包中分发注释，如果可能的话，它还提供编译器插件。</target>
        </trans-unit>
        <trans-unit id="c4a698fc939e769737cd9fa4869e3c7f6a0dd613" translate="yes" xml:space="preserve">
          <source>Prim</source>
          <target state="translated">Prim</target>
        </trans-unit>
        <trans-unit id="097f7b8f054d460e64f528c1af758136a46531eb" translate="yes" xml:space="preserve">
          <source>PrimMVar</source>
          <target state="translated">PrimMVar</target>
        </trans-unit>
        <trans-unit id="b7683822a291cb2b58d760a6c293578f8d5053f1" translate="yes" xml:space="preserve">
          <source>Primality tests</source>
          <target state="translated">首要性测试</target>
        </trans-unit>
        <trans-unit id="82232b5d4e89a2db12db9f128d9da3055f65c345" translate="yes" xml:space="preserve">
          <source>Primarily, this module consists of an interface to the C-land dynamic linker.</source>
          <target state="translated">主要是这个模块包括一个C地动态链接器的接口。</target>
        </trans-unit>
        <trans-unit id="0889b00639729e1c129ac932d18003c7a198375f" translate="yes" xml:space="preserve">
          <source>Primary format character.</source>
          <target state="translated">主要格式字符:</target>
        </trans-unit>
        <trans-unit id="d2a03ab0b74a812f6fdc4dae75971c24107ba46b" translate="yes" xml:space="preserve">
          <source>Primary group ID (pw_gid)</source>
          <target state="translated">主要群体ID(pw_gid)</target>
        </trans-unit>
        <trans-unit id="7607b51c8e1274c8fe1e933fecba18513d4f362a" translate="yes" xml:space="preserve">
          <source>PrimaryLANGID</source>
          <target state="translated">PrimaryLANGID</target>
        </trans-unit>
        <trans-unit id="cdd32e5e2d189473b1b0376cb2f1fe6ef6aad406" translate="yes" xml:space="preserve">
          <source>Primitive (unboxed) types cannot be defined in Haskell, and are therefore built into the language and compiler. Primitive types are always unlifted; that is, a value of a primitive type cannot be bottom. (Note: a &amp;ldquo;boxed&amp;rdquo; type means that a value is represented by a pointer to a heap object; a &amp;ldquo;lifted&amp;rdquo; type means that terms of that type may be bottom. See the next paragraph for an example.) We use the convention (but it is only a convention) that primitive types, values, and operations have a &lt;code&gt;#&lt;/code&gt; suffix (see &lt;a href=&quot;#magic-hash&quot;&gt;The magic hash&lt;/a&gt;). For some primitive types we have special syntax for literals, also described in the &lt;a href=&quot;#magic-hash&quot;&gt;same section&lt;/a&gt;.</source>
          <target state="translated">无法在Haskell中定义原始（未装箱）类型，因此它们被内置在语言和编译器中。原始类型总是不被提升的。也就是说，基本类型的值不能为底部。 （注意：&amp;ldquo;盒装&amp;rdquo;类型表示值由指向堆对象的指针表示；&amp;ldquo;提升&amp;rdquo;类型表示该类型的术语可能在底部。有关示例，请参见下一段。）我们使用约定（但仅是一个约定）原始类型，值和操作都带有 &lt;code&gt;#&lt;/code&gt; 后缀（请参阅&lt;a href=&quot;#magic-hash&quot;&gt;魔术哈希&lt;/a&gt;）。对于某些原始类型，我们对文字有特殊的语法，这在&lt;a href=&quot;#magic-hash&quot;&gt;同一部分中&lt;/a&gt;也有介绍。</target>
        </trans-unit>
        <trans-unit id="81e9ce0c637b5622aea322e7cbd9b861a8cb4dc6" translate="yes" xml:space="preserve">
          <source>Primitive Documents</source>
          <target state="translated">原始文件</target>
        </trans-unit>
        <trans-unit id="f422d79426f666f61a7d39fe5b03b368a8e73a13" translate="yes" xml:space="preserve">
          <source>Primitive bytecode type.</source>
          <target state="translated">原始字节码类型。</target>
        </trans-unit>
        <trans-unit id="c1c26c88e959f52e5cf4888bbad7bcf524b8820f" translate="yes" xml:space="preserve">
          <source>Primitive combinators</source>
          <target state="translated">原始组合器</target>
        </trans-unit>
        <trans-unit id="2e21eceae717d39a08de608f7fc31fb7d5627808" translate="yes" xml:space="preserve">
          <source>Primitive movement capabilities</source>
          <target state="translated">原始的移动能力</target>
        </trans-unit>
        <trans-unit id="c2de126cf4ab0cd60ff18f3b3c4a2455396c348e" translate="yes" xml:space="preserve">
          <source>Primitive operations</source>
          <target state="translated">原始操作</target>
        </trans-unit>
        <trans-unit id="7e8cb2eba99c97514ca435a92c7b1f3eff1bdea3" translate="yes" xml:space="preserve">
          <source>Primitive values are often represented by a simple bit-pattern, such as &lt;code&gt;Int#&lt;/code&gt;, &lt;code&gt;Float#&lt;/code&gt;, &lt;code&gt;Double#&lt;/code&gt;. But this is not necessarily the case: a primitive value might be represented by a pointer to a heap-allocated object. Examples include &lt;code&gt;Array#&lt;/code&gt;, the type of primitive arrays. Thus, &lt;code&gt;Array#&lt;/code&gt; is an unlifted, boxed type. A primitive array is heap-allocated because it is too big a value to fit in a register, and would be too expensive to copy around; in a sense, it is accidental that it is represented by a pointer. If a pointer represents a primitive value, then it really does point to that value: no unevaluated thunks, no indirections. Nothing can be at the other end of the pointer than the primitive value. A numerically-intensive program using unboxed types can go a &lt;em&gt;lot&lt;/em&gt; faster than its &amp;ldquo;standard&amp;rdquo; counterpart&amp;mdash;we saw a threefold speedup on one example.</source>
          <target state="translated">原始值通常由简单的位模式表示，例如 &lt;code&gt;Int#&lt;/code&gt; ， &lt;code&gt;Float#&lt;/code&gt; ， &lt;code&gt;Double#&lt;/code&gt; 。但这不是必然的情况：原始值可能由指向堆分配对象的指针表示。示例包括 &lt;code&gt;Array#&lt;/code&gt; （原始数组的类型）。因此， &lt;code&gt;Array#&lt;/code&gt; 是未装箱的盒装类型。原始数组是堆分配的，因为它太大了以至于不能容纳在寄存器中，并且复制起来太昂贵了。从某种意义上说，它是由指针表示的。如果指针表示原始值，则它确实指向该值：没有未评估的重击，没有间接引用。指针的另一端不能是原始值。使用未装箱的类型可以去一个一个数字密集型程序&lt;em&gt;很多&lt;/em&gt;比它的&amp;ldquo;标准&amp;rdquo;更快的对方，我们看到的一个例子的三倍加速。</target>
        </trans-unit>
        <trans-unit id="ffafa88c6f976297b9421ad4171675a387b485a2" translate="yes" xml:space="preserve">
          <source>Primitives</source>
          <target state="translated">Primitives</target>
        </trans-unit>
        <trans-unit id="66914127445228947976717f3559fb76a49308ac" translate="yes" xml:space="preserve">
          <source>Primitives and basic combinators</source>
          <target state="translated">基元和基本组合器</target>
        </trans-unit>
        <trans-unit id="0f20585a9b902d862530a747335f7e0f0fd615e0" translate="yes" xml:space="preserve">
          <source>Primitives are available to decode words of various sizes, both big and little endian.</source>
          <target state="translated">基元可用于解码大小不一的字,包括大恩字和小恩字。</target>
        </trans-unit>
        <trans-unit id="c11324a450fecb745dc9a0165fed6d81224cd078" translate="yes" xml:space="preserve">
          <source>Print &lt;code&gt;RuntimeRep&lt;/code&gt; parameters as they appear; otherwise, they are defaulted to &lt;code&gt;'LiftedRep&lt;/code&gt;.</source>
          <target state="translated">打印出现的 &lt;code&gt;RuntimeRep&lt;/code&gt; 参数；否则，它们默认为 &lt;code&gt;'LiftedRep&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eeb81239159c8f60639d490579db34ba47cedde5" translate="yes" xml:space="preserve">
          <source>Print &lt;code&gt;RuntimeRep&lt;/code&gt; variables in types which are runtime-representation polymorphic.</source>
          <target state="translated">以运行时表示多态的类型打印 &lt;code&gt;RuntimeRep&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="eb7f33c02cf627c59368ecbf1b10534cd5ee7098" translate="yes" xml:space="preserve">
          <source>Print GHC&amp;rsquo;s numeric version number only.</source>
          <target state="translated">仅打印GHC的数字版本号。</target>
        </trans-unit>
        <trans-unit id="5a8565f8c11652d5f9aaf3cf4b7da14d30635811" translate="yes" xml:space="preserve">
          <source>Print a full list of the module dependencies to stdout. (This is the standard verbosity flag, so the list will also be displayed with &lt;code&gt;-v3&lt;/code&gt; and &lt;code&gt;-v4&lt;/code&gt;; see &lt;a href=&quot;using#options-help&quot;&gt;Verbosity options&lt;/a&gt;.)</source>
          <target state="translated">将模块依赖项的完整列表打印到stdout。（这是标准的详细程度标志，因此该列表还将与 &lt;code&gt;-v3&lt;/code&gt; 和 &lt;code&gt;-v4&lt;/code&gt; 一起显示；请参见&lt;a href=&quot;using#options-help&quot;&gt;详细选项&lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="80be7ba4189d5acb5419cc416166ad88b14a93ab" translate="yes" xml:space="preserve">
          <source>Print a one-line string including GHC&amp;rsquo;s version number.</source>
          <target state="translated">打印包含GHC版本号的单行字符串。</target>
        </trans-unit>
        <trans-unit id="2bc805e229391602d4747b2b177e7eedc95c2396" translate="yes" xml:space="preserve">
          <source>Print a one-line summary of the size of the Core program at the end of the optimisation pipeline</source>
          <target state="translated">在优化管道结束时,打印核心计划规模的单行摘要</target>
        </trans-unit>
        <trans-unit id="568fb95ae04c3a3502b02cfb9ffd902745997992" translate="yes" xml:space="preserve">
          <source>Print a one-line summary of the size of the Core program at the end of the optimisation pipeline.</source>
          <target state="translated">在优化管道结束时,打印核心程序规模的单行摘要。</target>
        </trans-unit>
        <trans-unit id="6606d0f053fe23bd0db8aac9087cd16974cb24e2" translate="yes" xml:space="preserve">
          <source>Print coercions in types</source>
          <target state="translated">类型的印刷品胁迫</target>
        </trans-unit>
        <trans-unit id="0432cd36a550ecbc08a2b9824c1b63189a9b6ee6" translate="yes" xml:space="preserve">
          <source>Print explicit &lt;code&gt;forall&lt;/code&gt; quantification in types. See also &lt;a href=&quot;glasgow_exts#extension-ExplicitForAll&quot;&gt;&lt;code&gt;-XExplicitForAll&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">打印类型的显式 &lt;code&gt;forall&lt;/code&gt; 定量。另请参见&lt;a href=&quot;glasgow_exts#extension-ExplicitForAll&quot;&gt; &lt;code&gt;-XExplicitForAll&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="37d21fefc9ecda651a1fad5250210b879a85ecad" translate="yes" xml:space="preserve">
          <source>Print explicit &lt;code&gt;forall&lt;/code&gt; quantification in types. See also &lt;a href=&quot;glasgow_exts#extension-ExplicitForAll&quot;&gt;&lt;code&gt;ExplicitForAll&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d90f3662f54252f7284d92a4b10054139a2658" translate="yes" xml:space="preserve">
          <source>Print explicit kind foralls and kind arguments in types. See also &lt;a href=&quot;glasgow_exts#extension-KindSignatures&quot;&gt;&lt;code&gt;-XKindSignatures&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">打印显式的kind forall和类型中的kind参数。另请参见&lt;a href=&quot;glasgow_exts#extension-KindSignatures&quot;&gt; &lt;code&gt;-XKindSignatures&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e56540a92be164f6f8a1c47dd5d494997f195e34" translate="yes" xml:space="preserve">
          <source>Print explicit kind foralls and kind arguments in types. See also &lt;a href=&quot;glasgow_exts#extension-KindSignatures&quot;&gt;&lt;code&gt;KindSignatures&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc5df58f6562a5f05e5a96496e219a954a057a2" translate="yes" xml:space="preserve">
          <source>Print extra information from typechecker.</source>
          <target state="translated">打印来自tyechecker的额外信息。</target>
        </trans-unit>
        <trans-unit id="1c689b67035c8c53f98145aff3c638fb305e66de" translate="yes" xml:space="preserve">
          <source>Print information about the compiler.</source>
          <target state="translated">打印关于编译器的信息。</target>
        </trans-unit>
        <trans-unit id="c17674ed7a508bc28415982ff7aee239af184532" translate="yes" xml:space="preserve">
          <source>Print out each pass name as it happens</source>
          <target state="translated">打印出每张通行证的名称,因为它发生</target>
        </trans-unit>
        <trans-unit id="6346e07b56af6623e4a5cded288d10867e65bab0" translate="yes" xml:space="preserve">
          <source>Print out each pass name, its runtime and heap allocations as it happens. Note that this may come at a slight performance cost as the compiler will be a bit more eager in forcing pass results to more accurately account for their costs.</source>
          <target state="translated">打印出每个通证的名称,它的运行时间和发生时的堆分配。请注意,这可能会带来轻微的性能代价,因为编译器会更急切地强迫传递结果更准确地计算其成本。</target>
        </trans-unit>
        <trans-unit id="5e4bdf4d18e7fa5c826928aec79e1ccb449c15ff" translate="yes" xml:space="preserve">
          <source>Print out summary of what kind of information the renamer had to bring in.</source>
          <target state="translated">打印出重命名者必须带入的信息摘要。</target>
        </trans-unit>
        <trans-unit id="bc9a53e87cca6954b36dc36c0f11d367ea1e424e" translate="yes" xml:space="preserve">
          <source>Print out usage information.</source>
          <target state="translated">打印出使用信息。</target>
        </trans-unit>
        <trans-unit id="b2c88a9f866c4e0f0dc02f44c6ee50187a966424" translate="yes" xml:space="preserve">
          <source>Print single alternative case expressions as strict lets.</source>
          <target state="translated">将单一的备选案例表达式打印成严格的让。</target>
        </trans-unit>
        <trans-unit id="8fb7a347c6a4aa8013e70856b20c399cd1c29ff8" translate="yes" xml:space="preserve">
          <source>Print single alternative case expressions as though they were strict let expressions. This is helpful when your code does a lot of unboxing.</source>
          <target state="translated">打印单个替代的case表达式,就像打印严格的let表达式一样。当你的代码需要进行大量的拆箱操作时,这很有帮助。</target>
        </trans-unit>
        <trans-unit id="2d376b6f72267ae8b071df5ba4178bc23f3f30f8" translate="yes" xml:space="preserve">
          <source>Print the name of each compilation phase as it is executed. (equivalent to &lt;a href=&quot;debugging#ghc-flag--dshow-passes&quot;&gt;&lt;code&gt;-dshow-passes&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">在执行时打印每个编译阶段的名称。（相当于&lt;a href=&quot;debugging#ghc-flag--dshow-passes&quot;&gt; &lt;code&gt;-dshow-passes&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="2d35a116b4eacba35aab727296180081e67d78e2" translate="yes" xml:space="preserve">
          <source>Print the path to GHC&amp;rsquo;s library directory. This is the top of the directory tree containing GHC&amp;rsquo;s libraries, interfaces, and include files (usually something like &lt;code&gt;/usr/local/lib/ghc-5.04&lt;/code&gt; on Unix). This is the value of &lt;code&gt;$libdir&lt;/code&gt; in the package configuration file (see &lt;a href=&quot;packages#packages&quot;&gt;Packages&lt;/a&gt;).</source>
          <target state="translated">打印到GHC的库目录的路径。这是目录树的顶部，其中包含GHC的库，接口和包含文件（在Unix上通常类似于 &lt;code&gt;/usr/local/lib/ghc-5.04&lt;/code&gt; ）。这是软件包配置文件中 &lt;code&gt;$libdir&lt;/code&gt; 的值（请参阅&lt;a href=&quot;packages#packages&quot;&gt;Packages&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="7dddff095a26ddf9987f527bca4da1fdb41bb6b7" translate="yes" xml:space="preserve">
          <source>Print the supported command line options. This flag can be used for autocompletion in a shell.</source>
          <target state="translated">打印支持的命令行选项。这个标志可以用于shell中的自动完成。</target>
        </trans-unit>
        <trans-unit id="0de10c90956a31b467677165023124cbf6667b11" translate="yes" xml:space="preserve">
          <source>Print the supported language extensions.</source>
          <target state="translated">打印支持的语言扩展。</target>
        </trans-unit>
        <trans-unit id="0536d584c0b1d66d30f2000068d79cde18e65738" translate="yes" xml:space="preserve">
          <source>Print values of type &lt;code&gt;Word#&lt;/code&gt; and &lt;code&gt;Word64#&lt;/code&gt; (but not values of type &lt;code&gt;Int#&lt;/code&gt; and &lt;code&gt;Int64#&lt;/code&gt;) in hexadecimal instead of decimal. The hexadecimal is zero-padded to make the length of the representation a power of two. For example: &lt;code&gt;0x0A0A##&lt;/code&gt;, &lt;code&gt;0x000FFFFF##&lt;/code&gt;, &lt;code&gt;0xC##&lt;/code&gt;. This flag may be helpful when you are producing a bit pattern that to expect to work correctly on a 32-bit or a 64-bit architecture. Dumping hexadecimal literals after optimizations and constant folding makes it easier to confirm that the generated bit pattern is correct.</source>
          <target state="translated">用十六进制而不是十进制打印 &lt;code&gt;Word#&lt;/code&gt; 和 &lt;code&gt;Word64#&lt;/code&gt; 类型的值（但不打印 &lt;code&gt;Int#&lt;/code&gt; 和 &lt;code&gt;Int64#&lt;/code&gt; 类型的值）。十六进制填充零以使表示的长度为2的幂。例如： &lt;code&gt;0x0A0A##&lt;/code&gt; ， &lt;code&gt;0x000FFFFF##&lt;/code&gt; ， &lt;code&gt;0xC##&lt;/code&gt; 。当您生成期望在32位或64位体系结构上正常工作的位模式时，此标志可能会有所帮助。经过优化和常量折叠后转储十六进制文字，可以更轻松地确认生成的位模式是否正确。</target>
        </trans-unit>
        <trans-unit id="3c8fc49ee76dfe430eaaae5d2c003a633432f9f0" translate="yes" xml:space="preserve">
          <source>Print values of type &lt;code&gt;Word#&lt;/code&gt; in hexadecimal.</source>
          <target state="translated">以十六进制打印 &lt;code&gt;Word#&lt;/code&gt; 类型的值。</target>
        </trans-unit>
        <trans-unit id="f7be34b673808f2d48e5ab2574882b799d823a21" translate="yes" xml:space="preserve">
          <source>PrintfArg</source>
          <target state="translated">PrintfArg</target>
        </trans-unit>
        <trans-unit id="7089bc7979848c154683cd0084ff2f7d3644e64b" translate="yes" xml:space="preserve">
          <source>PrintfType</source>
          <target state="translated">PrintfType</target>
        </trans-unit>
        <trans-unit id="78c20ed70f591c5b802ec52da8af22641a65cb47" translate="yes" xml:space="preserve">
          <source>Printing Functions</source>
          <target state="translated">打印功能</target>
        </trans-unit>
        <trans-unit id="81c35c214270ee006f5c56860fe38a2f038e3898" translate="yes" xml:space="preserve">
          <source>Prints a one-line summary of timing statistics for the GHC run. This option is equivalent to &lt;code&gt;+RTS -tstderr&lt;/code&gt;, see &lt;a href=&quot;runtime_control#rts-options-gc&quot;&gt;RTS options to control the garbage collector&lt;/a&gt;.</source>
          <target state="translated">打印GHC运行的时间统计信息的单行摘要。此选项等效于 &lt;code&gt;+RTS -tstderr&lt;/code&gt; ，请参阅&lt;a href=&quot;runtime_control#rts-options-gc&quot;&gt;RTS选项以控制垃圾收集器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0a32b1200253fea3bdcc41abafe3985fec209486" translate="yes" xml:space="preserve">
          <source>Prints a value without forcing its evaluation. &lt;a href=&quot;#ghci-cmd-:print&quot;&gt;&lt;code&gt;:print&lt;/code&gt;&lt;/a&gt; may be used on values whose types are unknown or partially known, which might be the case for local variables with polymorphic types at a breakpoint. While inspecting the runtime value, &lt;a href=&quot;#ghci-cmd-:print&quot;&gt;&lt;code&gt;:print&lt;/code&gt;&lt;/a&gt; attempts to reconstruct the type of the value, and will elaborate the type in GHCi&amp;rsquo;s environment if possible. If any unevaluated components (thunks) are encountered, then &lt;a href=&quot;#ghci-cmd-:print&quot;&gt;&lt;code&gt;:print&lt;/code&gt;&lt;/a&gt; binds a fresh variable with a name beginning with &lt;code&gt;_t&lt;/code&gt; to each thunk. See &lt;a href=&quot;#breakpoints&quot;&gt;Breakpoints and inspecting variables&lt;/a&gt; for more information. See also the &lt;a href=&quot;#ghci-cmd-:sprint&quot;&gt;&lt;code&gt;:sprint&lt;/code&gt;&lt;/a&gt; command, which works like &lt;a href=&quot;#ghci-cmd-:print&quot;&gt;&lt;code&gt;:print&lt;/code&gt;&lt;/a&gt; but does not bind new variables.</source>
          <target state="translated">打印一个值而不强制其求值。&lt;a href=&quot;#ghci-cmd-:print&quot;&gt; &lt;code&gt;:print&lt;/code&gt; &lt;/a&gt;可以用于类型未知或部分已知的值，断点处具有多态类型的局部变量可能是这种情况。在检查运行时值时，&lt;a href=&quot;#ghci-cmd-:print&quot;&gt; &lt;code&gt;:print&lt;/code&gt; &lt;/a&gt;尝试重建值的类型，并在可能的情况下在GHCi的环境中详细说明该类型。如果遇到任何未评估的组件（thunk），则&lt;a href=&quot;#ghci-cmd-:print&quot;&gt; &lt;code&gt;:print&lt;/code&gt; &lt;/a&gt;将名称以 &lt;code&gt;_t&lt;/code&gt; 开头的新鲜变量绑定到每个thunk。有关更多信息，请参见&lt;a href=&quot;#breakpoints&quot;&gt;断点和检查变量&lt;/a&gt;。另请参见&lt;a href=&quot;#ghci-cmd-:sprint&quot;&gt; &lt;code&gt;:sprint&lt;/code&gt; &lt;/a&gt;命令，该命令的工作方式类似于&lt;a href=&quot;#ghci-cmd-:print&quot;&gt; &lt;code&gt;:print&lt;/code&gt; ,&lt;/a&gt;但不绑定新变量。</target>
        </trans-unit>
        <trans-unit id="1901cde8b08fed8941230e3f83f1c3cf4a834d5a" translate="yes" xml:space="preserve">
          <source>Prints a value without forcing its evaluation. &lt;a href=&quot;#ghci-cmd-:sprint&quot;&gt;&lt;code&gt;:sprint&lt;/code&gt;&lt;/a&gt; is similar to &lt;a href=&quot;#ghci-cmd-:print&quot;&gt;&lt;code&gt;:print&lt;/code&gt;&lt;/a&gt;, with the difference that unevaluated subterms are not bound to new variables, they are simply denoted by &lt;code&gt;_&lt;/code&gt;.</source>
          <target state="translated">打印一个值而不强制其求值。&lt;a href=&quot;#ghci-cmd-:sprint&quot;&gt; &lt;code&gt;:sprint&lt;/code&gt; &lt;/a&gt;类似于&lt;a href=&quot;#ghci-cmd-:print&quot;&gt; &lt;code&gt;:print&lt;/code&gt; &lt;/a&gt;，不同之处在于未评估的子项未绑定到新变量，它们简单地用 &lt;code&gt;_&lt;/code&gt; 表示。</target>
        </trans-unit>
        <trans-unit id="ac4afe4944ea3331a3d2c608c60d31227edcb709" translate="yes" xml:space="preserve">
          <source>Prints the latest available version of package ⟨P⟩.</source>
          <target state="translated">打印最新版本的软件包⟨P⟩。</target>
        </trans-unit>
        <trans-unit id="7595d277dda450dbba120e42b0d8f0d521de9f36" translate="yes" xml:space="preserve">
          <source>Prints the value of ⟨identifier⟩ in the same way as &lt;a href=&quot;#ghci-cmd-:print&quot;&gt;&lt;code&gt;:print&lt;/code&gt;&lt;/a&gt;. Unlike &lt;a href=&quot;#ghci-cmd-:print&quot;&gt;&lt;code&gt;:print&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:force&quot;&gt;&lt;code&gt;:force&lt;/code&gt;&lt;/a&gt; evaluates each thunk that it encounters while traversing the value. This may cause exceptions or infinite loops, or further breakpoints (which are ignored, but displayed).</source>
          <target state="translated">以&lt;a href=&quot;#ghci-cmd-:print&quot;&gt; &lt;code&gt;:print&lt;/code&gt; &lt;/a&gt;相同的方式打印 ⟨identifier⟩的值。与&lt;a href=&quot;#ghci-cmd-:print&quot;&gt; &lt;code&gt;:print&lt;/code&gt; &lt;/a&gt;不同，&lt;a href=&quot;#ghci-cmd-:force&quot;&gt; &lt;code&gt;:force&lt;/code&gt; &lt;/a&gt;评估遍历值时遇到的每个重击。这可能会导致异常或无限循环，或导致其他断点（被忽略但显示）。</target>
        </trans-unit>
        <trans-unit id="c61486fb3c29083825fc530e85db902f694779e3" translate="yes" xml:space="preserve">
          <source>PrioIOAvailable</source>
          <target state="translated">PrioIOAvailable</target>
        </trans-unit>
        <trans-unit id="cbad2d411713243f18b25f4ad0c20cdf1f597155" translate="yes" xml:space="preserve">
          <source>Prior to GHC 8.10, when passing an &lt;code&gt;ArrayArray#&lt;/code&gt; argument to a foreign function, the foreign function would see a pointer to the &lt;code&gt;StgMutArrPtrs&lt;/code&gt; rather than just the payload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fabfc2adbe5a1490690f6f40c6d623b433df0934" translate="yes" xml:space="preserve">
          <source>Prior to version 1.4.0.0, the default implementation of the &lt;code&gt;&lt;a href=&quot;control-deepseq#v:rnf&quot;&gt;rnf&lt;/a&gt;&lt;/code&gt; method was defined as</source>
          <target state="translated">在1.4.0.0版之前， &lt;code&gt;&lt;a href=&quot;control-deepseq#v:rnf&quot;&gt;rnf&lt;/a&gt;&lt;/code&gt; 方法的默认实现定义为</target>
        </trans-unit>
        <trans-unit id="cda4f4476ac13bb2ae7bc15ee6736ba96cc21c68" translate="yes" xml:space="preserve">
          <source>PrivateUse</source>
          <target state="translated">PrivateUse</target>
        </trans-unit>
        <trans-unit id="77a4e6819b3e432af8190d38019f1fa2de3878fb" translate="yes" xml:space="preserve">
          <source>Probalistic Miller-Rabin primality test.</source>
          <target state="translated">Probalistic Miller-Rabin primality test.</target>
        </trans-unit>
        <trans-unit id="52ec5a32c2a80f826813962523827657c92e7c45" translate="yes" xml:space="preserve">
          <source>ProcRetHandles</source>
          <target state="translated">ProcRetHandles</target>
        </trans-unit>
        <trans-unit id="59240a07db79f390a176a1da2a0e4e73723df8cb" translate="yes" xml:space="preserve">
          <source>Proceed as normal, but do not delete any intermediate files.</source>
          <target state="translated">如常进行,但不要删除任何中间文件。</target>
        </trans-unit>
        <trans-unit id="3413e1941d2b768b5d94e902b36b50f24a0b9e21" translate="yes" xml:space="preserve">
          <source>Process completion</source>
          <target state="translated">进程完成</target>
        </trans-unit>
        <trans-unit id="78730cfe630ab980fa7c67900c84883cadf329d1" translate="yes" xml:space="preserve">
          <source>Process environment</source>
          <target state="translated">流程环境</target>
        </trans-unit>
        <trans-unit id="c650b71115a88a0c6c8c39f8cb70327da49c6469" translate="yes" xml:space="preserve">
          <source>Process groups</source>
          <target state="translated">流程组</target>
        </trans-unit>
        <trans-unit id="e19a92ef9380a074cb7ab3ec33973d7ac5dd17b1" translate="yes" xml:space="preserve">
          <source>Process status</source>
          <target state="translated">进程状态</target>
        </trans-unit>
        <trans-unit id="450d3838ec09ee134c6165b911e3bfce5c2da9f2" translate="yes" xml:space="preserve">
          <source>Process the command-line, and return the list of values that matched (and those that didn't). The arguments are:</source>
          <target state="translated">处理命令行,并返回匹配的值列表(和不匹配的值)。参数是:</target>
        </trans-unit>
        <trans-unit id="165237f99277fa9f8a75372d3b27ef4e2226ebb6" translate="yes" xml:space="preserve">
          <source>Process times</source>
          <target state="translated">流程时间</target>
        </trans-unit>
        <trans-unit id="b8940363e3104375a16f75f2a6c0076297b5bcc8" translate="yes" xml:space="preserve">
          <source>ProcessAccessRights</source>
          <target state="translated">ProcessAccessRights</target>
        </trans-unit>
        <trans-unit id="6feb0f0bc2fdaddeeb0ce66961c31fda1b5189f4" translate="yes" xml:space="preserve">
          <source>ProcessEntry32</source>
          <target state="translated">ProcessEntry32</target>
        </trans-unit>
        <trans-unit id="3c0317db948b70e6ca821af4a8b48f2b33ee6e46" translate="yes" xml:space="preserve">
          <source>ProcessGroupID</source>
          <target state="translated">ProcessGroupID</target>
        </trans-unit>
        <trans-unit id="21e8dd5d13542f0c6a51fa47c09f48b388d00925" translate="yes" xml:space="preserve">
          <source>ProcessHandle</source>
          <target state="translated">ProcessHandle</target>
        </trans-unit>
        <trans-unit id="2f4686b1023443590b468cf68975e34698d5dce7" translate="yes" xml:space="preserve">
          <source>ProcessHandle__</source>
          <target state="translated">ProcessHandle__</target>
        </trans-unit>
        <trans-unit id="5906efeedbc929caae1ebc56efbb67f6db7d732f" translate="yes" xml:space="preserve">
          <source>ProcessID</source>
          <target state="translated">ProcessID</target>
        </trans-unit>
        <trans-unit id="0e72272456a5dfc962478aaa4cd24c7dbdabd6cf" translate="yes" xml:space="preserve">
          <source>ProcessId</source>
          <target state="translated">ProcessId</target>
        </trans-unit>
        <trans-unit id="01ccef775dbbfe8438822cf4c77cb31753b62e29" translate="yes" xml:space="preserve">
          <source>ProcessId, number of threads, parent ProcessId, process base priority, path of executable file</source>
          <target state="translated">ProcessId,线程数,父ProcessId,进程基本优先级,可执行文件路径。</target>
        </trans-unit>
        <trans-unit id="14d4e6622d64799268058fe065228ec4cdce7733" translate="yes" xml:space="preserve">
          <source>ProcessInput</source>
          <target state="translated">ProcessInput</target>
        </trans-unit>
        <trans-unit id="b1f9a72a478a9193ff3d8c1d61ee84b82b8b55d5" translate="yes" xml:space="preserve">
          <source>ProcessOutput</source>
          <target state="translated">ProcessOutput</target>
        </trans-unit>
        <trans-unit id="b85a49842dd03687134a104f7f2c219a332fd41b" translate="yes" xml:space="preserve">
          <source>ProcessStatus</source>
          <target state="translated">ProcessStatus</target>
        </trans-unit>
        <trans-unit id="6f22a38212f7ae729981dc2920c82da11507b5bd" translate="yes" xml:space="preserve">
          <source>ProcessTimes</source>
          <target state="translated">ProcessTimes</target>
        </trans-unit>
        <trans-unit id="ed7308bb59f2876220e45299939d241199595df2" translate="yes" xml:space="preserve">
          <source>Processes</source>
          <target state="translated">Processes</target>
        </trans-unit>
        <trans-unit id="d9138d8dd701d266606ca4c3ec53b292b58d6a6e" translate="yes" xml:space="preserve">
          <source>Processing Strings into Html friendly things.</source>
          <target state="translated">将字符串处理成Html友好的东西。</target>
        </trans-unit>
        <trans-unit id="31e08f0a5d6400f5a893fc895b0737af9fc1c866" translate="yes" xml:space="preserve">
          <source>Processor features</source>
          <target state="translated">处理器功能</target>
        </trans-unit>
        <trans-unit id="51346a24d3f29d2ffa996e556945ed4655cf318e" translate="yes" xml:space="preserve">
          <source>ProcessorFeature</source>
          <target state="translated">ProcessorFeature</target>
        </trans-unit>
        <trans-unit id="3fb1ad2abc3a670a4b947bec2fed69232206dac4" translate="yes" xml:space="preserve">
          <source>Produce &amp;ldquo;ticky-ticky&amp;rdquo; statistics at the end of the program run (only available if the program was linked with &lt;a href=&quot;phases#ghc-flag--debug&quot;&gt;&lt;code&gt;-debug&lt;/code&gt;&lt;/a&gt;). The ⟨file⟩ business works just like on the &lt;a href=&quot;#rts-flag--S%20%5B%E2%9F%A8file%E2%9F%A9%5D&quot;&gt;&lt;code&gt;-S [⟨file⟩]&lt;/code&gt;&lt;/a&gt; RTS option, above.</source>
          <target state="translated">在程序运行结束时生成&amp;ldquo; ticky-ticky&amp;rdquo;统计信息（仅当程序与&lt;a href=&quot;phases#ghc-flag--debug&quot;&gt; &lt;code&gt;-debug&lt;/code&gt; &lt;/a&gt;链接时才可用）。⟨file⟩业务的工作方式与上面的&lt;a href=&quot;#rts-flag--S%20%5B%E2%9F%A8file%E2%9F%A9%5D&quot;&gt; &lt;code&gt;-S [⟨file⟩]&lt;/code&gt; &lt;/a&gt; RTS选项相同。</target>
        </trans-unit>
        <trans-unit id="6cf463b6f4624fb94cd58e7897c4e59d5fb1fb3f" translate="yes" xml:space="preserve">
          <source>Produce DWARF debug information in compiled object files. ⟨n⟩ can be 0, 1, or 2, with higher numbers producing richer output. If ⟨n⟩ is omitted, level 2 is assumed.</source>
          <target state="translated">在编译后的对象文件中产生DWARF调试信息。⟨n⟩可以是0、1或2,数字越高输出的信息越丰富。如果省略了⟨n⟩,则假设为2级。</target>
        </trans-unit>
        <trans-unit id="311b86090be24794748573ba1bb8b1841bef8144" translate="yes" xml:space="preserve">
          <source>Produces XHTML 1.0 Frameset.</source>
          <target state="translated">你制作XHTML 1.0框架集。</target>
        </trans-unit>
        <trans-unit id="f0bce322e51b0e5e1f30cc905d309ee358c3950a" translate="yes" xml:space="preserve">
          <source>Produces XHTML 1.0 Strict.</source>
          <target state="translated">你制作XHTML 1.0 Strict。</target>
        </trans-unit>
        <trans-unit id="feb762b8a956256336a4059b532f2566785ff8e7" translate="yes" xml:space="preserve">
          <source>Produces XHTML 1.0 Transitional.</source>
          <target state="translated">你制作XHTML 1.0过渡版。</target>
        </trans-unit>
        <trans-unit id="3514031227d8fe4f3d212805cc6af9c2eb3a4315" translate="yes" xml:space="preserve">
          <source>Produces an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-exts#t:Addr-35-&quot;&gt;Addr#&lt;/a&gt;&lt;/code&gt; literal from the NUL-terminated C-string starting at the given memory address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3b86d1ef21b9fb2e1edc30f524e7afb491b1ad" translate="yes" xml:space="preserve">
          <source>Product</source>
          <target state="translated">Product</target>
        </trans-unit>
        <trans-unit id="9436b2fdb0e7c34a33a3c91d959bba1406290a1a" translate="yes" xml:space="preserve">
          <source>ProductType</source>
          <target state="translated">ProductType</target>
        </trans-unit>
        <trans-unit id="0c7c0674cb4b4821337188133a7e093a0462c24f" translate="yes" xml:space="preserve">
          <source>Products, lifted to functors.</source>
          <target state="translated">产品,提升为漏斗。</target>
        </trans-unit>
        <trans-unit id="45873739b5a096f14b6618d0351cf66a0fc902fa" translate="yes" xml:space="preserve">
          <source>Products: encode multiple arguments to constructors</source>
          <target state="translated">产品:对构造函数的多个参数进行编码。</target>
        </trans-unit>
        <trans-unit id="3baa38b5927954f86d772798f9128466bb7cb156" translate="yes" xml:space="preserve">
          <source>ProfFlags</source>
          <target state="translated">ProfFlags</target>
        </trans-unit>
        <trans-unit id="684ae62f53358a3d6fa087ccc73007ad4415d51e" translate="yes" xml:space="preserve">
          <source>Profiling a program is a three-step process:</source>
          <target state="translated">剖析一个项目是一个三步走的过程。</target>
        </trans-unit>
        <trans-unit id="8b0bf225ec1be7116f5172952f591da561f081d7" translate="yes" xml:space="preserve">
          <source>Profiling call stacks</source>
          <target state="translated">剖析呼叫堆栈</target>
        </trans-unit>
        <trans-unit id="182323e605505b651eaa881921e0342a44be8b4d" translate="yes" xml:space="preserve">
          <source>Program arguments</source>
          <target state="translated">程序参数</target>
        </trans-unit>
        <trans-unit id="f0abc2008747749add9fef13512caaf5675a5840" translate="yes" xml:space="preserve">
          <source>Programmers using the &lt;code&gt;&lt;a href=&quot;system-posix-io#v:fdRead&quot;&gt;fdRead&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-io#v:fdWrite&quot;&gt;fdWrite&lt;/a&gt;&lt;/code&gt; API should be aware that EAGAIN exceptions may occur for non-blocking IO!</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;system-posix-io#v:fdRead&quot;&gt;fdRead&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;system-posix-io#v:fdWrite&quot;&gt;fdWrite&lt;/a&gt;&lt;/code&gt; API的程序员应注意，非阻塞IO可能会发生EAGAIN异常！</target>
        </trans-unit>
        <trans-unit id="6e4856079c43518428585d9f6f55af53723c39a0" translate="yes" xml:space="preserve">
          <source>Programmers using the &lt;code&gt;&lt;a href=&quot;system-posix-io-bytestring#v:fdRead&quot;&gt;fdRead&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-io-bytestring#v:fdWrite&quot;&gt;fdWrite&lt;/a&gt;&lt;/code&gt; API should be aware that EAGAIN exceptions may occur for non-blocking IO!</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;system-posix-io-bytestring#v:fdRead&quot;&gt;fdRead&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;system-posix-io-bytestring#v:fdWrite&quot;&gt;fdWrite&lt;/a&gt;&lt;/code&gt; API的程序员应注意，非阻塞IO可能会发生EAGAIN异常！</target>
        </trans-unit>
        <trans-unit id="f5db4bda11e8bec3e596786fc436f585dc33173f" translate="yes" xml:space="preserve">
          <source>Programs compiled with &lt;a href=&quot;using-warnings#ghc-flag--fdefer-type-errors&quot;&gt;&lt;code&gt;-fdefer-type-errors&lt;/code&gt;&lt;/a&gt; may fail a bit more eagerly than one might expect. For instance,</source>
          <target state="translated">用&lt;a href=&quot;using-warnings#ghc-flag--fdefer-type-errors&quot;&gt; &lt;code&gt;-fdefer-type-errors&lt;/code&gt; &lt;/a&gt;编译的程序可能比人们预期的要急得多。例如，</target>
        </trans-unit>
        <trans-unit id="ec0bc39a0924b82acddd145c4bb3e23cd22b3bc0" translate="yes" xml:space="preserve">
          <source>Progress will usually be made by skipping the first element of the &lt;code&gt;from&lt;/code&gt; buffer. This function should only be called if you are certain that you wish to do this skipping and if the &lt;code&gt;to&lt;/code&gt; buffer has at least one element of free space. Because this function deals with decoding failure, it assumes that the from buffer has at least one element.</source>
          <target state="translated">通常可以通过跳过 &lt;code&gt;from&lt;/code&gt; 缓冲区的第一个元素来取得进展。仅当您确定要跳过此步并且 &lt;code&gt;to&lt;/code&gt; 缓冲区至少具有一个可用空间元素时，才应调用此函数。因为此函数处理解码失败，所以它假定from缓冲区中至少有一个元素。</target>
        </trans-unit>
        <trans-unit id="a01e7be7e338ce65feff32bc980eb7c0c7eb6754" translate="yes" xml:space="preserve">
          <source>Projection to the other functor.</source>
          <target state="translated">投射到另一个漏斗上。</target>
        </trans-unit>
        <trans-unit id="aaf4dfbf169435dac06d1f7571397f1db30f3f9a" translate="yes" xml:space="preserve">
          <source>Promote a function to a monad, scanning the monadic arguments from left to right (cf. &lt;code&gt;&lt;a href=&quot;control-monad#v:liftM2&quot;&gt;liftM2&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">将功能提升为monad，从左到右扫描 &lt;code&gt;&lt;a href=&quot;control-monad#v:liftM2&quot;&gt;liftM2&lt;/a&gt;&lt;/code&gt; 参数（请参见liftM2）。</target>
        </trans-unit>
        <trans-unit id="90322d805d75363f5e2ba902de35d5fb3e329291" translate="yes" xml:space="preserve">
          <source>Promote a function to a monad, scanning the monadic arguments from left to right (cf. &lt;code&gt;&lt;a href=&quot;ghc-base#v:liftM2&quot;&gt;liftM2&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">将功能提升为monad，从左到右扫描 &lt;code&gt;&lt;a href=&quot;ghc-base#v:liftM2&quot;&gt;liftM2&lt;/a&gt;&lt;/code&gt; 参数（请参见liftM2）。</target>
        </trans-unit>
        <trans-unit id="5b1e023440a1d1251cab82a65c8a674a9ce8f45f" translate="yes" xml:space="preserve">
          <source>Promote a function to a monad, scanning the monadic arguments from left to right. For example,</source>
          <target state="translated">将一个函数推广到一个单项式,从左到右扫描单项式参数。例如:</target>
        </trans-unit>
        <trans-unit id="f05ff30359fcf6d0cd737c9742b3ce528d2a61e0" translate="yes" xml:space="preserve">
          <source>Promote a function to a monad.</source>
          <target state="translated">将一个函数推广到一个单体。</target>
        </trans-unit>
        <trans-unit id="bb699540cce051f9cc1055d53e69e00d6ddd26ac" translate="yes" xml:space="preserve">
          <source>PromotedConsT</source>
          <target state="translated">PromotedConsT</target>
        </trans-unit>
        <trans-unit id="6c11a71a788afd02567c23eab945ff6f9118b661" translate="yes" xml:space="preserve">
          <source>PromotedNilT</source>
          <target state="translated">PromotedNilT</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="0cbea5295e2b199673171bae00d25211a4daa049" translate="yes" xml:space="preserve">
          <source>Proposed replacement for &lt;code&gt;&lt;a href=&quot;ghc-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; using new-style parsers (GHC only). The default definition uses &lt;code&gt;&lt;a href=&quot;ghc-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt;. Instances that define &lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; should also define &lt;code&gt;&lt;a href=&quot;ghc-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; as &lt;code&gt;&lt;a href=&quot;ghc-read#v:readListPrecDefault&quot;&gt;readListPrecDefault&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">建议使用新型解析器替换 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; （仅限GHC）。默认定义使用 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; 。定义 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 的实例也应将 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; 定义为 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readListPrecDefault&quot;&gt;readListPrecDefault&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1c383bc233d01d9f33a1db1df2275ceb34c0bb2c" translate="yes" xml:space="preserve">
          <source>Proposed replacement for &lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; using new-style parsers (GHC only).</source>
          <target state="translated">建议使用新型解析器替换 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; （仅限GHC）。</target>
        </trans-unit>
        <trans-unit id="25cf3b2ae91b78e363c940dfba15d79fbbffe0a5" translate="yes" xml:space="preserve">
          <source>Proposed replacement for &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; using new-style parsers (GHC only). The default definition uses &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt;. Instances that define &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; should also define &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; as &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrecDefault&quot;&gt;readListPrecDefault&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">建议使用新型解析器替换 &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; （仅限GHC）。默认定义使用 &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; 。定义 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 的实例也应将 &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; 定义为 &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrecDefault&quot;&gt;readListPrecDefault&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d4f8243ce4f1bb9b8bfb0f67f0f3ba9911430da3" translate="yes" xml:space="preserve">
          <source>Proposed replacement for &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; using new-style parsers (GHC only).</source>
          <target state="translated">建议使用新型解析器替换 &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; （仅限GHC）。</target>
        </trans-unit>
        <trans-unit id="a22e8bd59e18b97a41af964d0ba41a98b37ab76a" translate="yes" xml:space="preserve">
          <source>Propositional equality</source>
          <target state="translated">命题平等</target>
        </trans-unit>
        <trans-unit id="a96dd404b246333ac1350164ef1732587afa0abb" translate="yes" xml:space="preserve">
          <source>Propositional equality. If &lt;code&gt;a :~: b&lt;/code&gt; is inhabited by some terminating value, then the type &lt;code&gt;a&lt;/code&gt; is the same as the type &lt;code&gt;b&lt;/code&gt;. To use this equality in practice, pattern-match on the &lt;code&gt;a :~: b&lt;/code&gt; to get out the &lt;code&gt;Refl&lt;/code&gt; constructor; in the body of the pattern-match, the compiler knows that &lt;code&gt;a ~ b&lt;/code&gt;.</source>
          <target state="translated">命题平等。如果 &lt;code&gt;a :~: b&lt;/code&gt; 被某个终止值占用，则类型 &lt;code&gt;a&lt;/code&gt; 与类型 &lt;code&gt;b&lt;/code&gt; 相同。要在实践中使用这种相等性，请在 &lt;code&gt;a :~: b&lt;/code&gt; 进行模式匹配以获取 &lt;code&gt;Refl&lt;/code&gt; 构造函数；在模式匹配的主体中，编译器知道 &lt;code&gt;a ~ b&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fcb3452df3c76dae9ccbe4cb023c0ba8d83c8c7a" translate="yes" xml:space="preserve">
          <source>ProtectSectionFlags</source>
          <target state="translated">ProtectSectionFlags</target>
        </trans-unit>
        <trans-unit id="a48acfe3b05f29ef5d32e9c4686c610f7573d3ab" translate="yes" xml:space="preserve">
          <source>ProtocolError</source>
          <target state="translated">ProtocolError</target>
        </trans-unit>
        <trans-unit id="f505fd6f5c51f1f0eb05dff31b6b08cb2672b51b" translate="yes" xml:space="preserve">
          <source>Provide a Semigroup for an arbitrary Monoid.</source>
          <target state="translated">提供一个任意Monoid的Semigroup。</target>
        </trans-unit>
        <trans-unit id="f283ee30918edc6de5015fa4f97d3ed7816f7d65" translate="yes" xml:space="preserve">
          <source>Provide a handler for exceptions thrown during execution of the first action. Note that type of the type of the argument to the handler will constrain which exceptions are caught. See &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;'s &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d826fc994ddc518cced2dcde7f6017e636b0aac9" translate="yes" xml:space="preserve">
          <source>Provide an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action with the current value of an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; will be empty for the duration that the action is running.</source>
          <target state="translated">提供具有 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 当前值的 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 操作。该 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 将是空的操作已运行的持续时间。</target>
        </trans-unit>
        <trans-unit id="d318ed93837d829decf4e305a098deca627cd45c" translate="yes" xml:space="preserve">
          <source>Provide sendInput function and INPUT types.</source>
          <target state="translated">提供sendInput功能和INPUT类型。</target>
        </trans-unit>
        <trans-unit id="08b1b035b9a9a2acbcca06ac2bc748267d24aace" translate="yes" xml:space="preserve">
          <source>Provided for backwards compatibility. The tok type is ignored.</source>
          <target state="translated">为向后兼容而提供。忽略tok类型。</target>
        </trans-unit>
        <trans-unit id="a7bc9561c0283aa709c213cb1d134bcbaf33279f" translate="yes" xml:space="preserve">
          <source>Provided that you also specify &lt;a href=&quot;#extension-ScopedTypeVariables&quot;&gt;&lt;code&gt;ScopedTypeVariables&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;#scoped-type-variables&quot;&gt;Lexically scoped type variables&lt;/a&gt;), the &lt;code&gt;forall b&lt;/code&gt; scopes over the definition of &lt;code&gt;foo&lt;/code&gt;, and in particular over the type signature for &lt;code&gt;xs&lt;/code&gt;.</source>
          <target state="translated">如果还指定&lt;a href=&quot;#extension-ScopedTypeVariables&quot;&gt; &lt;code&gt;ScopedTypeVariables&lt;/code&gt; &lt;/a&gt;（按&lt;a href=&quot;#scoped-type-variables&quot;&gt;词法&lt;/a&gt;定义的类型变量），则 &lt;code&gt;forall b&lt;/code&gt; 范围将覆盖 &lt;code&gt;foo&lt;/code&gt; 的定义，尤其是 &lt;code&gt;xs&lt;/code&gt; 的类型签名。</target>
        </trans-unit>
        <trans-unit id="a6e2d81ac00c42bbf57971469cfadfc86bb02898" translate="yes" xml:space="preserve">
          <source>Provided you compiled this plugin and registered it in a package (with cabal for instance,) you can then use it by just specifying &lt;code&gt;-fplugin=DoNothing.Plugin&lt;/code&gt; on the command line, and during the compilation you should see GHC say &amp;lsquo;Hello&amp;rsquo;.</source>
          <target state="translated">假设您已编译此插件并将其注册在软件包中（例如，cabal），则可以通过在命令行上指定 &lt;code&gt;-fplugin=DoNothing.Plugin&lt;/code&gt; 来使用它，并且在编译过程中，您应该会看到GHC说&amp;ldquo; Hello&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="91cdb89ab74dded95989b9c01dab7eab785914db" translate="yes" xml:space="preserve">
          <source>Provided you have compiled this plugin and registered it in a package, you can just use it by specifying &lt;code&gt;--frontend DoNothing.FrontendPlugin&lt;/code&gt; on the command line to GHC.</source>
          <target state="translated">如果您已经编译了该插件并将其注册到软件包中，则可以通过在GHC的命令行上指定 &lt;code&gt;--frontend DoNothing.FrontendPlugin&lt;/code&gt; 来使用它。</target>
        </trans-unit>
        <trans-unit id="97713c7be8cb2223c431b97c899d5f61eca5a254" translate="yes" xml:space="preserve">
          <source>Provides a collection of pretty printer combinators, a set of API's that provides a way to easily print out text in a consistent format of your choosing.</source>
          <target state="translated">提供了一个漂亮的打印机组合器的集合,一组API,提供了一种方法来轻松打印出你所选择的一致格式的文本。</target>
        </trans-unit>
        <trans-unit id="a3569e2937eb1626a3038f9ca0b0bd6a7c4988dd" translate="yes" xml:space="preserve">
          <source>Provides one possible concrete representation for &lt;code&gt;&lt;a href=&quot;data-version#t:Version&quot;&gt;Version&lt;/a&gt;&lt;/code&gt;. For a version with &lt;code&gt;&lt;a href=&quot;data-version#v:versionBranch&quot;&gt;versionBranch&lt;/a&gt;&lt;/code&gt;&lt;code&gt;= [1,2,3]&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-version#v:versionTags&quot;&gt;versionTags&lt;/a&gt;&lt;/code&gt;&lt;code&gt;= [&quot;tag1&quot;,&quot;tag2&quot;]&lt;/code&gt;, the output will be &lt;code&gt;1.2.3-tag1-tag2&lt;/code&gt;.</source>
          <target state="translated">提供了一个可能的具体表现 &lt;code&gt;&lt;a href=&quot;data-version#t:Version&quot;&gt;Version&lt;/a&gt;&lt;/code&gt; 。对于 &lt;code&gt;&lt;a href=&quot;data-version#v:versionBranch&quot;&gt;versionBranch&lt;/a&gt;&lt;/code&gt; &lt;code&gt;= [1,2,3]&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;data-version#v:versionTags&quot;&gt;versionTags&lt;/a&gt;&lt;/code&gt; &lt;code&gt;= [&quot;tag1&quot;,&quot;tag2&quot;]&lt;/code&gt; ，输出为 &lt;code&gt;1.2.3-tag1-tag2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f537eae177b03bcfe703fb9eae32845fd317076" translate="yes" xml:space="preserve">
          <source>Provides the standard warnings plus</source>
          <target state="translated">提供标准警告和</target>
        </trans-unit>
        <trans-unit id="0bd63287653bab9cbabb2d0d820a7d6b107dd1f0" translate="yes" xml:space="preserve">
          <source>Providing &lt;code&gt;-pgmi /path/to/iserv-proxy&lt;/code&gt;, &lt;code&gt;-pgmo ⟨option⟩&lt;/code&gt; and &lt;code&gt;-pgmo ⟨port⟩&lt;/code&gt; in addition to &lt;a href=&quot;#ghc-flag--fexternal-interpreter&quot;&gt;&lt;code&gt;-fexternal-interpreter&lt;/code&gt;&lt;/a&gt; will then make ghc go through the proxy instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e9e18be4d476228c864a05eb9ce60a2f180d98" translate="yes" xml:space="preserve">
          <source>Providing input</source>
          <target state="translated">提供投入</target>
        </trans-unit>
        <trans-unit id="e29e8eedc748840bd27ace9f3607818fa75df015" translate="yes" xml:space="preserve">
          <source>Provisional</source>
          <target state="translated">Provisional</target>
        </trans-unit>
        <trans-unit id="d1cea344353e26ba6f1565ed661d94f610ce9e4f" translate="yes" xml:space="preserve">
          <source>Proxy</source>
          <target state="translated">Proxy</target>
        </trans-unit>
        <trans-unit id="2da1b11ef737c06a07580fdc89d729829ccbcd4b" translate="yes" xml:space="preserve">
          <source>Proxy can even hold types of higher kinds,</source>
          <target state="translated">代理人甚至可以持有类型更高的种类。</target>
        </trans-unit>
        <trans-unit id="010320dc44b945f1389c719222db299dcff6de12" translate="yes" xml:space="preserve">
          <source>Proxy#</source>
          <target state="translated">Proxy#</target>
        </trans-unit>
        <trans-unit id="1ba5ef48b66f74ab8376d1e1f5b429151921ef64" translate="yes" xml:space="preserve">
          <source>Ps: Punctuation, Open</source>
          <target state="translated">Ps:标点符号,开放</target>
        </trans-unit>
        <trans-unit id="aee53da1d005df2b730db32fdeb589f79f6dcef6" translate="yes" xml:space="preserve">
          <source>Pseudoterminal operations</source>
          <target state="translated">伪终端操作</target>
        </trans-unit>
        <trans-unit id="90c83157f6f4a1cfac097841eb12dca4943e9e58" translate="yes" xml:space="preserve">
          <source>Ptr</source>
          <target state="translated">Ptr</target>
        </trans-unit>
        <trans-unit id="6ae22c161ea98cdfc51e0fe5643ee1613027f054" translate="yes" xml:space="preserve">
          <source>Public API</source>
          <target state="translated">公共API</target>
        </trans-unit>
        <trans-unit id="7f59b284c28fa26b669e4ff42d0673d94b35db1d" translate="yes" xml:space="preserve">
          <source>Public representation of constructors</source>
          <target state="translated">构造者的公开表示</target>
        </trans-unit>
        <trans-unit id="b6c8b265dd1cdc6347d98f2b84d442a954eb9c33" translate="yes" xml:space="preserve">
          <source>Public representation of datatypes</source>
          <target state="translated">数据类型的公开表示</target>
        </trans-unit>
        <trans-unit id="3a2bbb378012d44dd1acf3c097c561543bbe6aa6" translate="yes" xml:space="preserve">
          <source>Punctuation or reserved symbol, e.g. &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;::&lt;/code&gt;</source>
          <target state="translated">标点或保留符号，例如 &lt;code&gt;(&lt;/code&gt; ， &lt;code&gt;::&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2dfef0dd557351856f42ce75d6f0e19c19a4c0ef" translate="yes" xml:space="preserve">
          <source>Puns and other patterns can be mixed in the same record:</source>
          <target state="translated">双关语和其他模式可以混合在同一记录中。</target>
        </trans-unit>
        <trans-unit id="126aca4de6cf9f540218b2f37eb0a5ee3e8ee157" translate="yes" xml:space="preserve">
          <source>Puns are not necessarily supported:</source>
          <target state="translated">不一定支持双关语。</target>
        </trans-unit>
        <trans-unit id="f9f539fc385ba1011d4c087559f3df068ae7d719" translate="yes" xml:space="preserve">
          <source>Puns can be used wherever record patterns occur (e.g. in &lt;code&gt;let&lt;/code&gt; bindings or at the top-level).</source>
          <target state="translated">可以在出现记录模式的任何地方（例如，在 &lt;code&gt;let&lt;/code&gt; 绑定中或在顶层）使用Puun 。</target>
        </trans-unit>
        <trans-unit id="6b611b1b174cd71f53f8fab72d5be8b17f1336a4" translate="yes" xml:space="preserve">
          <source>Purity</source>
          <target state="translated">Purity</target>
        </trans-unit>
        <trans-unit id="9a02d38905933d4f8be56965d4333c36eabb3bcc" translate="yes" xml:space="preserve">
          <source>Push a call-site onto the stack.</source>
          <target state="translated">将一个调用点推到堆栈上。</target>
        </trans-unit>
        <trans-unit id="7fd768e4fe7bd6bb51e495079370749b0bfeabc8" translate="yes" xml:space="preserve">
          <source>Put</source>
          <target state="translated">Put</target>
        </trans-unit>
        <trans-unit id="31cfeabab1a1a50a1974ce9355eca97ad84b2ad5" translate="yes" xml:space="preserve">
          <source>Put a data item back onto a channel, where it will be the next item read.</source>
          <target state="translated">将一个数据项放回一个通道,在那里它将是下一个读取的项目。</target>
        </trans-unit>
        <trans-unit id="f2671cfd2bf701d44ddbd6aed0423a20b49e9b05" translate="yes" xml:space="preserve">
          <source>Put a data item back onto a channel, where it will be the next item read. Blocks if the queue is full.</source>
          <target state="translated">将一个数据项放回一个通道,在那里它将成为下一个读取的数据项。如果队列满了,就会被阻止。</target>
        </trans-unit>
        <trans-unit id="0488379e7024b984e65d02dffd4763eb7cd460ed" translate="yes" xml:space="preserve">
          <source>Put a value into a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;. If the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; is currently full, &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:putTMVar&quot;&gt;putTMVar&lt;/a&gt;&lt;/code&gt; will &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">将值放入 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; 。如果 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; 当前已满，则 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:putTMVar&quot;&gt;putTMVar&lt;/a&gt;&lt;/code&gt; 将 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bd93b0ceaf0ed39d5195f954abbfc8d76b2a79d6" translate="yes" xml:space="preserve">
          <source>Put a value into an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;. If the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is currently full, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; will wait until it becomes empty.</source>
          <target state="translated">将值放入 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 中。如果 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 当前已满，则 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 将等待直到变空。</target>
        </trans-unit>
        <trans-unit id="42a8fc7267ae8c1ccb347fa39255e3fe7bc6ca11" translate="yes" xml:space="preserve">
          <source>Put a value into an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;. If the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is currently full, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; will wait until it becomes empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c94d281c3905d94e39b3d263b1cf9b6250c58bee" translate="yes" xml:space="preserve">
          <source>Put a value into an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;. If the &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is currently full, &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; will wait until it becomes empty.</source>
          <target state="translated">将值放入 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 中。如果 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 当前已满，则 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 将等待直到变空。</target>
        </trans-unit>
        <trans-unit id="33e8d3ac33132ba689a91323286fa0c8d9cd0c54" translate="yes" xml:space="preserve">
          <source>Put a value into an &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;. If the &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is currently full, &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; will wait until it becomes empty.</source>
          <target state="translated">将值放入 &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 中。如果 &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 当前已满，则 &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 将等待直到变空。</target>
        </trans-unit>
        <trans-unit id="73b3278fe6bb373e8f3ee5addd3728dbee9dc19b" translate="yes" xml:space="preserve">
          <source>Put merely lifts Builder into a Writer monad, applied to ().</source>
          <target state="translated">Put只是将Builder提升为Writer单体,应用于()。</target>
        </trans-unit>
        <trans-unit id="798e33a0a2f8665389e39345a5dfc2a745e465a9" translate="yes" xml:space="preserve">
          <source>Put something inside an HTML element.</source>
          <target state="translated">把一些东西放在一个HTML元素里面。</target>
        </trans-unit>
        <trans-unit id="40d8d868890674e2158985b5244b5e97bbdc32ef" translate="yes" xml:space="preserve">
          <source>Put to run</source>
          <target state="translated">投入运行</target>
        </trans-unit>
        <trans-unit id="b438a3bf094fbf042e7f48cbd844a202bc700f5d" translate="yes" xml:space="preserve">
          <source>Put two pieces of error message next to each other.</source>
          <target state="translated">把两块错误信息挨在一起。</target>
        </trans-unit>
        <trans-unit id="353d5eefcc26e9ede7b76010beb4c768d6085770" translate="yes" xml:space="preserve">
          <source>PutM</source>
          <target state="translated">PutM</target>
        </trans-unit>
        <trans-unit id="f84ae14fa11d241b306d7b6dacccea9c11140d12" translate="yes" xml:space="preserve">
          <source>Putting a strictness annotation (&lt;code&gt;!&lt;/code&gt;) on a constructor field helps in two ways: it adds strictness to the program, which gives the strictness analyser more to work with, and it might help to reduce space leaks.</source>
          <target state="translated">在构造函数字段上放置严格性注释（ &lt;code&gt;!&lt;/code&gt; ）有两个方面的帮助：它增加了程序的严格性，这使严格性分析器可以更多地使用它，并且可能有助于减少空间泄漏。</target>
        </trans-unit>
        <trans-unit id="4d65a7ee4d88fd2fe1e2a7a6c25c43f4bace4b92" translate="yes" xml:space="preserve">
          <source>Putting info tables directly next to entry code is a useful performance optimisation that is not available on all platforms. This field tells you whether the program has been compiled with this optimisation. (Usually yes, except on unusual platforms.)</source>
          <target state="translated">将信息表直接放在输入代码旁边是一个有用的性能优化,但不是所有平台都能使用。这个字段告诉你程序是否已经被编译过这个优化。(通常是的,除非在特殊平台上。)</target>
        </trans-unit>
        <trans-unit id="fc4647bde0eb248bbe66e4e9d89dc56ee1bf2032" translate="yes" xml:space="preserve">
          <source>Putting inter-dependencies of the form &lt;code&gt;Foo.o : Bar.hi&lt;/code&gt; into your &lt;code&gt;Makefile&lt;/code&gt; by hand is rather error-prone. Don&amp;rsquo;t worry, GHC has support for automatically generating the required dependencies. Add the following to your &lt;code&gt;Makefile&lt;/code&gt;:</source>
          <target state="translated">用手将形式为 &lt;code&gt;Foo.o : Bar.hi&lt;/code&gt; 放入 &lt;code&gt;Makefile&lt;/code&gt; 中是很容易出错的。不用担心，GHC支持自动生成所需的依赖关系。将以下内容添加到您的 &lt;code&gt;Makefile&lt;/code&gt; 中：</target>
        </trans-unit>
        <trans-unit id="c3156e00d3c2588c639e0d3cf6821258b05761c7" translate="yes" xml:space="preserve">
          <source>Q</source>
          <target state="translated">Q</target>
        </trans-unit>
        <trans-unit id="b1bf446133c15f6e0cfb6c252c0760ca97cc2113" translate="yes" xml:space="preserve">
          <source>QException</source>
          <target state="translated">QException</target>
        </trans-unit>
        <trans-unit id="5c3e1075bb5ff5f786a2750d2110c97ca76bdb40" translate="yes" xml:space="preserve">
          <source>QList</source>
          <target state="translated">QList</target>
        </trans-unit>
        <trans-unit id="5063349bbf20d077106dd5a047c6294b3d6faa07" translate="yes" xml:space="preserve">
          <source>QResult</source>
          <target state="translated">QResult</target>
        </trans-unit>
        <trans-unit id="1b9473a808c71ad809b076a8f41d58515d649af1" translate="yes" xml:space="preserve">
          <source>QSem</source>
          <target state="translated">QSem</target>
        </trans-unit>
        <trans-unit id="83666298382103e09a359d83713e8de361f9fe1b" translate="yes" xml:space="preserve">
          <source>QSemN</source>
          <target state="translated">QSemN</target>
        </trans-unit>
        <trans-unit id="5979a484b578a0eaaccbbaa187d6db5be875c706" translate="yes" xml:space="preserve">
          <source>QState</source>
          <target state="translated">QState</target>
        </trans-unit>
        <trans-unit id="a8e2772564815455b855b5402a2b67edaeece741" translate="yes" xml:space="preserve">
          <source>QualBinBox</source>
          <target state="translated">QualBinBox</target>
        </trans-unit>
        <trans-unit id="6e364224ed95e99cc9c0e9bc962a7e7788451d4f" translate="yes" xml:space="preserve">
          <source>Qualified names are not handled properly</source>
          <target state="translated">未正确处理限定名称</target>
        </trans-unit>
        <trans-unit id="c78f05422fd2f2885a1a8363abe3991f2f66b957" translate="yes" xml:space="preserve">
          <source>Quantified</source>
          <target state="translated">Quantified</target>
        </trans-unit>
        <trans-unit id="98d966bd103c45a24b72c82c92fc882386ac5126" translate="yes" xml:space="preserve">
          <source>Quantified constraints can potentially lead to overlapping local axioms. Consider for instance the following example:</source>
          <target state="translated">量化约束有可能导致局部公理的重叠。例如,可以考虑以下例子。</target>
        </trans-unit>
        <trans-unit id="e07c2ce6f83e492712da4fb9336c9693d0145f90" translate="yes" xml:space="preserve">
          <source>Quantified constraints enable this property to be made explicit in the &lt;code&gt;Trans&lt;/code&gt; class declaration:</source>
          <target state="translated">量化约束使此属性可以在 &lt;code&gt;Trans&lt;/code&gt; 类声明中明确显示：</target>
        </trans-unit>
        <trans-unit id="313f18ee6bfe32a684a3623fe9ec8d0285e1564b" translate="yes" xml:space="preserve">
          <source>QuantifiedConstraints</source>
          <target state="translated">QuantifiedConstraints</target>
        </trans-unit>
        <trans-unit id="38dd040ad4dd1961b970e417a446a2cd00ec0112" translate="yes" xml:space="preserve">
          <source>Quantity semaphores in which each thread may wait for an arbitrary &quot;amount&quot;.</source>
          <target state="translated">数量符号,每个线程可以等待一个任意的 &quot;数量&quot;。</target>
        </trans-unit>
        <trans-unit id="ef37116e9e2794514df2a30b389623e522929de7" translate="yes" xml:space="preserve">
          <source>Quasi</source>
          <target state="translated">Quasi</target>
        </trans-unit>
        <trans-unit id="78b42522f21485e6763e2011e69bf1fb6467d5cd" translate="yes" xml:space="preserve">
          <source>Quasi-quotation allows patterns and expressions to be written using programmer-defined concrete syntax; the motivation behind the extension and several examples are documented in &amp;ldquo;&lt;a href=&quot;http://www.cs.tufts.edu/comp/150FP/archive/geoff-mainland/quasiquoting.pdf&quot;&gt;Why It&amp;rsquo;s Nice to be Quoted: Quasiquoting for Haskell&lt;/a&gt;&amp;rdquo; (Proc Haskell Workshop 2007). The example below shows how to write a quasiquoter for a simple expression language.</source>
          <target state="translated">准引号允许使用程序员定义的具体语法编写模式和表达式。扩展背后的动机和几个示例记录在&amp;ldquo; &lt;a href=&quot;http://www.cs.tufts.edu/comp/150FP/archive/geoff-mainland/quasiquoting.pdf&quot;&gt;为什么要被引用：Haskell的准报价&lt;/a&gt; &amp;rdquo;（Proc Haskell Workshop 2007）中。下面的示例显示了如何为一种简单的表达语言编写一个准引用。</target>
        </trans-unit>
        <trans-unit id="aeae4316f159225a12a41875ed5cda162b6be2c0" translate="yes" xml:space="preserve">
          <source>Quasi-quoter for declarations, invoked by top-level quotes</source>
          <target state="translated">声明的准引号,由顶层引号调用。</target>
        </trans-unit>
        <trans-unit id="7c4eccaa645a118a37207f34bc767fc3a301a004" translate="yes" xml:space="preserve">
          <source>Quasi-quoter for expressions, invoked by quotes like &lt;code&gt;lhs = $[q|...]&lt;/code&gt;</source>
          <target state="translated">表达式的准引用，由 &lt;code&gt;lhs = $[q|...]&lt;/code&gt; 类的引用调用</target>
        </trans-unit>
        <trans-unit id="cdfa152b402869c6f7ce110c7260465306996f0c" translate="yes" xml:space="preserve">
          <source>Quasi-quoter for patterns, invoked by quotes like &lt;code&gt;f $[q|...] = rhs&lt;/code&gt;</source>
          <target state="translated">模式的准引用，由诸如 &lt;code&gt;f $[q|...] = rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2f1c81121c7c915fc9fe161e70133e5fd79fdc0f" translate="yes" xml:space="preserve">
          <source>Quasi-quoter for types, invoked by quotes like &lt;code&gt;f :: $[q|...]&lt;/code&gt;</source>
          <target state="translated">类型的准引用，由诸如 &lt;code&gt;f :: $[q|...]&lt;/code&gt; 引用调用</target>
        </trans-unit>
        <trans-unit id="654d8edecc919612fe0b6f4ce5f5f07b94d042af" translate="yes" xml:space="preserve">
          <source>QuasiQuoter</source>
          <target state="translated">QuasiQuoter</target>
        </trans-unit>
        <trans-unit id="36eafab474a9ed345234950640432af8a19c94cf" translate="yes" xml:space="preserve">
          <source>QuasiQuotes</source>
          <target state="translated">QuasiQuotes</target>
        </trans-unit>
        <trans-unit id="d4a0b7daa1a07138f6cd3dd945862252eb44e73e" translate="yes" xml:space="preserve">
          <source>Quasiquoters must obey the same stage restrictions as Template Haskell, e.g., in the example, &lt;code&gt;expr&lt;/code&gt; cannot be defined in &lt;code&gt;Main.hs&lt;/code&gt; where it is used, but must be imported.</source>
          <target state="translated">准引用程序必须遵守与模板Haskell相同的阶段限制，例如，在示例中，不能在使用 &lt;code&gt;Main.hs&lt;/code&gt; 地方定义 &lt;code&gt;expr&lt;/code&gt; ，而必须将其导入。</target>
        </trans-unit>
        <trans-unit id="2644b7d942f174a4bbf0bc8675c1badf9352393e" translate="yes" xml:space="preserve">
          <source>Queries</source>
          <target state="translated">Queries</target>
        </trans-unit>
        <trans-unit id="702b96b7b97e9c49a9631b74e04d25040710ddfc" translate="yes" xml:space="preserve">
          <source>Queries the current state of the stopped child flag.</source>
          <target state="translated">查询停止的子旗的状态。</target>
        </trans-unit>
        <trans-unit id="a618b4be8d3ac72545f3085fe616d342b7139fba" translate="yes" xml:space="preserve">
          <source>Query</source>
          <target state="translated">Query</target>
        </trans-unit>
        <trans-unit id="6fafa7df09744bce9b17c8089123f793f4571cfc" translate="yes" xml:space="preserve">
          <source>Query the status of a breakpoint (True &lt;a href=&quot;=&quot;&gt;=&lt;/a&gt; enabled)</source>
          <target state="translated">查询断点的状态（True &lt;a href=&quot;=&quot;&gt;=已&lt;/a&gt;启用）</target>
        </trans-unit>
        <trans-unit id="3caf953d995669733dac7e8ef33e2624ffc487eb" translate="yes" xml:space="preserve">
          <source>Query whether the current runtime system supports the eventlog (e.g. whether the current executable was linked with &lt;a href=&quot;phases#ghc-flag--eventlog&quot;&gt;&lt;code&gt;-eventlog&lt;/code&gt;&lt;/a&gt;) and, if it is supported, whether it is currently logging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec6aec17edf79a10c680aff1016df32c0c809598" translate="yes" xml:space="preserve">
          <source>Querying file status</source>
          <target state="translated">查询文件状态</target>
        </trans-unit>
        <trans-unit id="e1568d2084e4729e281ef2ad2782d446f7281246" translate="yes" xml:space="preserve">
          <source>Querying sizes</source>
          <target state="translated">查询尺寸</target>
        </trans-unit>
        <trans-unit id="ec159e90e6803b6d4ebd5f32c771f6ca6e6e74a9" translate="yes" xml:space="preserve">
          <source>Querying the compiler</source>
          <target state="translated">查询编译器</target>
        </trans-unit>
        <trans-unit id="bfaa4612023c5d1f8ccc9c95a3472712517c8262" translate="yes" xml:space="preserve">
          <source>Querying the user environment</source>
          <target state="translated">查询用户环境</target>
        </trans-unit>
        <trans-unit id="18607581d63ad915cd6c4d5d3071d782b7938ac8" translate="yes" xml:space="preserve">
          <source>Question: How does GHC find the filename which contains module ⟨M⟩? Answer: it looks for the file &lt;code&gt;M.hs&lt;/code&gt;, or &lt;code&gt;M.lhs&lt;/code&gt;. This means that for most modules, the module name must match the filename. If it doesn&amp;rsquo;t, GHCi won&amp;rsquo;t be able to find it.</source>
          <target state="translated">问题：GHC如何找到包含模块&amp;ldquo; M&amp;rdquo;的文件名？答案：它将查找文件 &lt;code&gt;M.hs&lt;/code&gt; 或 &lt;code&gt;M.lhs&lt;/code&gt; 。这意味着对于大多数模块，模块名称必须与文件名匹配。如果没有，GHCi将无法找到它。</target>
        </trans-unit>
        <trans-unit id="d325fcd919384f395c02751e03d2cd0288b98cca" translate="yes" xml:space="preserve">
          <source>Queue</source>
          <target state="translated">Queue</target>
        </trans-unit>
        <trans-unit id="2e03f68003ba792e4b7e5bce0358c5b5efca5a74" translate="yes" xml:space="preserve">
          <source>QueueSelector</source>
          <target state="translated">QueueSelector</target>
        </trans-unit>
        <trans-unit id="1a2285d8881f226e13430515a9dd2b9fb6294200" translate="yes" xml:space="preserve">
          <source>Quit</source>
          <target state="translated">Quit</target>
        </trans-unit>
        <trans-unit id="29a754ad4dc6f5eb686a9faa7923466078bf2956" translate="yes" xml:space="preserve">
          <source>Quits GHCi. You can also quit by typing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b074b09be2d5847dd9450d55b6f0788a6c3fd1b4" translate="yes" xml:space="preserve">
          <source>Quits GHCi. You can also quit by typing &lt;code&gt;Control-D&lt;/code&gt; at the prompt.</source>
          <target state="translated">退出GHCi。您也可以在提示符下键入 &lt;code&gt;Control-D&lt;/code&gt; 退出。</target>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="fe89b57ca741803edb678214b1b10b8b1688ab79" translate="yes" xml:space="preserve">
          <source>R. N. Horspool: Practical Fast Searching in Strings. Software - Practice and Experience 10, 501-506 (1980)</source>
          <target state="translated">R.N.Horspool:在字符串中进行实用的快速搜索。软件-实践与经验10,501-506(1980年)。</target>
        </trans-unit>
        <trans-unit id="3bb8e3918a18086493d1beb88c7c61f2cff4fd6b" translate="yes" xml:space="preserve">
          <source>R. S. Boyer, J. S. Moore: A Fast String Searching Algorithm. Communications of the ACM, 20, 10, 762-772 (1977)</source>
          <target state="translated">R.S.Boyer,J.S.Moore:A Fast String Searching Algorithm.ACM通信,20,10,762-772(1977年)。</target>
        </trans-unit>
        <trans-unit id="bcd7a25b27aa3490f6e6a5d52d0d7b57716a72c0" translate="yes" xml:space="preserve">
          <source>R.Paterson@city.ac.uk</source>
          <target state="translated">R.Paterson@city.ac.uk</target>
        </trans-unit>
        <trans-unit id="75248a6efd7ebc0c173be4c755f47f7ae4c4606a" translate="yes" xml:space="preserve">
          <source>RIGHTWARDS ARROW</source>
          <target state="translated">向右箭头</target>
        </trans-unit>
        <trans-unit id="81f0ce7bb79894a5b7e3f20200c1491ae057a5b6" translate="yes" xml:space="preserve">
          <source>RIGHTWARDS ARROW-TAIL</source>
          <target state="translated">右向箭头-尾巴。</target>
        </trans-unit>
        <trans-unit id="d43d55d9c58cbcc25eb6620ba1f32e960004091e" translate="yes" xml:space="preserve">
          <source>RIGHTWARDS DOUBLE ARROW</source>
          <target state="translated">右侧双箭头。</target>
        </trans-unit>
        <trans-unit id="6140cdacfd2f40b8e8a4d0ef59628fa58ba4df25" translate="yes" xml:space="preserve">
          <source>RIGHTWARDS DOUBLE ARROW-TAIL</source>
          <target state="translated">RIGHTWARDS DOUBLE ARROWO-TAIL(双箭头-尾巴)</target>
        </trans-unit>
        <trans-unit id="54561fd891ee8d3bc3718283afdce5d24a9fb9d4" translate="yes" xml:space="preserve">
          <source>RS</source>
          <target state="translated">RS</target>
        </trans-unit>
        <trans-unit id="dff6d1ab4ff535388a3b81748b7e0a759af5b5d4" translate="yes" xml:space="preserve">
          <source>RTLDFlags</source>
          <target state="translated">RTLDFlags</target>
        </trans-unit>
        <trans-unit id="222fd2e5cef2e782850e7e961d3e145177fe55f7" translate="yes" xml:space="preserve">
          <source>RTLD_GLOBAL</source>
          <target state="translated">RTLD_GLOBAL</target>
        </trans-unit>
        <trans-unit id="596d9fed4ec6cd3691a13e454f91e5510fb9bd15" translate="yes" xml:space="preserve">
          <source>RTLD_LAZY</source>
          <target state="translated">RTLD_LAZY</target>
        </trans-unit>
        <trans-unit id="58a6bc97fe1b40864bb1226977041584bdd3246e" translate="yes" xml:space="preserve">
          <source>RTLD_LOCAL</source>
          <target state="translated">RTLD_LOCAL</target>
        </trans-unit>
        <trans-unit id="240dca00b5fccdf8eb9307a95d72a4564efd9a1f" translate="yes" xml:space="preserve">
          <source>RTLD_NOW</source>
          <target state="translated">RTLD_NOW</target>
        </trans-unit>
        <trans-unit id="21a3039e72db0527495ff86a20122cd08a41b0ee" translate="yes" xml:space="preserve">
          <source>RTS options taken from the &lt;a href=&quot;#envvar-GHCRTS&quot; id=&quot;index-6&quot;&gt;&lt;code&gt;GHCRTS&lt;/code&gt;&lt;/a&gt; environment variable can be overridden by options given on the command line.</source>
          <target state="translated">可以从命令行上给定的选项覆盖从&lt;a href=&quot;#envvar-GHCRTS&quot; id=&quot;index-6&quot;&gt; &lt;code&gt;GHCRTS&lt;/code&gt; &lt;/a&gt;环境变量获取的RTS选项。</target>
        </trans-unit>
        <trans-unit id="12038ce4fed76d468c97d3909bb5fa9da8cf36c1" translate="yes" xml:space="preserve">
          <source>RTSFlags</source>
          <target state="translated">RTSFlags</target>
        </trans-unit>
        <trans-unit id="398bdf865c486238761fe9e04c7014d7a95a8878" translate="yes" xml:space="preserve">
          <source>RTSStats</source>
          <target state="translated">RTSStats</target>
        </trans-unit>
        <trans-unit id="173ca40143a1db6b32512b7856cb8403ae881b82" translate="yes" xml:space="preserve">
          <source>RWS</source>
          <target state="translated">RWS</target>
        </trans-unit>
        <trans-unit id="5ed8266ce8d63f9438aafb5e6787b68efadeccab" translate="yes" xml:space="preserve">
          <source>RWS computation to execute</source>
          <target state="translated">执行RWS计算</target>
        </trans-unit>
        <trans-unit id="f1d8da392a9a97e4cb7c42ad2ccf6346e818ebc4" translate="yes" xml:space="preserve">
          <source>RWST</source>
          <target state="translated">RWST</target>
        </trans-unit>
        <trans-unit id="a618f78473842a7cf11f602fffdd35c35387d1a3" translate="yes" xml:space="preserve">
          <source>Raise an &lt;code&gt;&lt;a href=&quot;ghc-io-exception#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">引发 &lt;code&gt;&lt;a href=&quot;ghc-io-exception#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 在 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 单子。</target>
        </trans-unit>
        <trans-unit id="ce7820312231ab0cd45ab4d865cc302018e42e8e" translate="yes" xml:space="preserve">
          <source>Raise an &lt;code&gt;&lt;a href=&quot;prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">引发 &lt;code&gt;&lt;a href=&quot;prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 在 &lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 单子。</target>
        </trans-unit>
        <trans-unit id="280c8919cbe0b13ce2a3de884857678191c0df1d" translate="yes" xml:space="preserve">
          <source>Raise an &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">引发 &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 在 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 单子。</target>
        </trans-unit>
        <trans-unit id="933e208c50a30fc4995b36847c474fa5bd3740b5" translate="yes" xml:space="preserve">
          <source>Raises an &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; with a printf-specific prefix on the message string.</source>
          <target state="translated">在消息字符串上使用特定于printf的前缀引发 &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00474a4582227a35d8a8ed6e6d74aed95e4bfcf8" translate="yes" xml:space="preserve">
          <source>Raises an error if given an empty list.</source>
          <target state="translated">如果给定的是一个空列表,会引发错误。</target>
        </trans-unit>
        <trans-unit id="a21adad3deb90b02b29a429bf48fc817d912767f" translate="yes" xml:space="preserve">
          <source>Raising Errors</source>
          <target state="translated">提出错误</target>
        </trans-unit>
        <trans-unit id="80befa94c0796e21097bf414e22daac761f1ac3a" translate="yes" xml:space="preserve">
          <source>Ralf Hinze and Ross Paterson, &lt;a href=&quot;http://staff.city.ac.uk/~ross/papers/FingerTree.html&quot;&gt;&quot;Finger trees: a simple general-purpose data structure&quot;&lt;/a&gt;, &lt;em&gt;Journal of Functional Programming&lt;/em&gt; 16:2 (2006) pp 197-217.</source>
          <target state="translated">Ralf Hinze和Ross Paterson，&lt;a href=&quot;http://staff.city.ac.uk/~ross/papers/FingerTree.html&quot;&gt;&amp;ldquo;手指树：一种简单的通用数据结构&amp;rdquo;&lt;/a&gt;，&lt;em&gt;《功能编程杂志&lt;/em&gt;》 16：2（2006），第197-217页。</target>
        </trans-unit>
        <trans-unit id="a16c5bbe4bf996740f257aa1e81bd57e4c52c8dd" translate="yes" xml:space="preserve">
          <source>Range</source>
          <target state="translated">Range</target>
        </trans-unit>
        <trans-unit id="646152cf5c1a35e596164cfc5a137c57f6a78564" translate="yes" xml:space="preserve">
          <source>RangeQ</source>
          <target state="translated">RangeQ</target>
        </trans-unit>
        <trans-unit id="5f87625ea4411af78505260124c7f6d2a45e06b0" translate="yes" xml:space="preserve">
          <source>RankNTypes</source>
          <target state="translated">RankNTypes</target>
        </trans-unit>
        <trans-unit id="693f44324e1039b8be2752916af17049a0ad5dd9" translate="yes" xml:space="preserve">
          <source>Rather than generating code to call &lt;code&gt;f&lt;/code&gt; according to the platform&amp;rsquo;s ABI, we instead call &lt;code&gt;f&lt;/code&gt; using the C API defined in the header &lt;code&gt;header.h&lt;/code&gt;. Thus &lt;code&gt;f&lt;/code&gt; can be called even if it may be defined as a CPP &lt;code&gt;#define&lt;/code&gt; rather than a proper function.</source>
          <target state="translated">而不是生成的代码来呼叫 &lt;code&gt;f&lt;/code&gt; 根据平台的ABI，我们改为调用 &lt;code&gt;f&lt;/code&gt; 使用在报头中定义的C API &lt;code&gt;header.h&lt;/code&gt; 。因此，即使可以将 &lt;code&gt;f&lt;/code&gt; 定义为CPP &lt;code&gt;#define&lt;/code&gt; 而不是适当的函数，也可以调用它。</target>
        </trans-unit>
        <trans-unit id="09e0a509143e1597ce0e4b1a260f1ca99da1f7c7" translate="yes" xml:space="preserve">
          <source>Rather than using &lt;code&gt;(== &lt;a href=&quot;system-filepath-posix#v:pathSeparator&quot;&gt;pathSeparator&lt;/a&gt;)&lt;/code&gt;, use this. Test if something is a path separator.</source>
          <target state="translated">而不是使用 &lt;code&gt;(== &lt;a href=&quot;system-filepath-posix#v:pathSeparator&quot;&gt;pathSeparator&lt;/a&gt;)&lt;/code&gt; ，而是使用它。测试某些东西是否是路径分隔符。</target>
        </trans-unit>
        <trans-unit id="ed194d2af1d0512a43b9882e2bf53085c69471c2" translate="yes" xml:space="preserve">
          <source>Rather than using &lt;code&gt;(== &lt;a href=&quot;system-filepath-windows#v:pathSeparator&quot;&gt;pathSeparator&lt;/a&gt;)&lt;/code&gt;, use this. Test if something is a path separator.</source>
          <target state="translated">而不是使用 &lt;code&gt;(== &lt;a href=&quot;system-filepath-windows#v:pathSeparator&quot;&gt;pathSeparator&lt;/a&gt;)&lt;/code&gt; ，而是使用它。测试某些东西是否是路径分隔符。</target>
        </trans-unit>
        <trans-unit id="794f65e9d2064ab6bfab0fa351dcff2763db23d3" translate="yes" xml:space="preserve">
          <source>Ratio</source>
          <target state="translated">Ratio</target>
        </trans-unit>
        <trans-unit id="06abf42877351e1e2ad74c308971eb560fc0aab7" translate="yes" xml:space="preserve">
          <source>Ratio of line length to ribbon length. A ribbon refers to the characters on a line &lt;em&gt;excluding&lt;/em&gt; indentation. So a &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; of 100, with a &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;2.0&lt;/code&gt; would only allow up to 50 characters of ribbon to be displayed on a line, while allowing it to be indented up to 50 characters.</source>
          <target state="translated">线长与碳带长度之比。功能区是指一行上的字符（&lt;em&gt;不包括&lt;/em&gt;缩进）。因此，如果 &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; 为100， &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; 为 &lt;code&gt;2.0&lt;/code&gt; ，则最多只能在一行上显示Ribbon的50个字符，同时最多可以缩进50个字符。</target>
        </trans-unit>
        <trans-unit id="4fffe46763de726cdd41fc5ca5f40572f607297e" translate="yes" xml:space="preserve">
          <source>Ratio of line length to ribbon length. A ribbon refers to the characters on a line &lt;em&gt;excluding&lt;/em&gt; indentation. So a &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; of 100, with a &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;2.0&lt;/code&gt; would only allow up to 50 characters of ribbon to be displayed on a line, while allowing it to be indented up to 50 characters.</source>
          <target state="translated">线长与碳带长度之比。功能区是指一行上的字符（&lt;em&gt;不包括&lt;/em&gt;缩进）。因此，如果 &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; 为100， &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; 为 &lt;code&gt;2.0&lt;/code&gt; ，则最多只能在一行上显示Ribbon的50个字符，同时最多可以缩进50个字符。</target>
        </trans-unit>
        <trans-unit id="ed1304ccb2873b49ac5ad2857447e7d4958a9afc" translate="yes" xml:space="preserve">
          <source>Ratio of line length to ribbon length. A ribbon refers to the characters on a line &lt;em&gt;excluding&lt;/em&gt; indentation. So a &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; of 100, with a &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;2.0&lt;/code&gt; would only allow up to 50 characters of ribbon to be displayed on a line, while allowing it to be indented up to 50 characters.</source>
          <target state="translated">线长与碳带长度之比。功能区是指一行上的字符（&lt;em&gt;不包括&lt;/em&gt;缩进）。因此，如果 &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:lineLength&quot;&gt;lineLength&lt;/a&gt;&lt;/code&gt; 为100， &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:ribbonsPerLine&quot;&gt;ribbonsPerLine&lt;/a&gt;&lt;/code&gt; 为 &lt;code&gt;2.0&lt;/code&gt; ，则最多只能在一行上显示Ribbon的50个字符，同时最多可以缩进50个字符。</target>
        </trans-unit>
        <trans-unit id="4d9365e2d43f2f4d7432550032b047d13acc7dc0" translate="yes" xml:space="preserve">
          <source>RatioZeroDenominator</source>
          <target state="translated">RatioZeroDenominator</target>
        </trans-unit>
        <trans-unit id="28f8f8c0856fcd5b648ff5e28234ee17ac5b1a2e" translate="yes" xml:space="preserve">
          <source>Rational</source>
          <target state="translated">Rational</target>
        </trans-unit>
        <trans-unit id="405213edafc737f5ab6efbcc9727c7dbc43be834" translate="yes" xml:space="preserve">
          <source>Rational numbers, with numerator and denominator of some &lt;code&gt;&lt;a href=&quot;ghc-real#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">有理数，具有某种 &lt;code&gt;&lt;a href=&quot;ghc-real#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 类型的分子和分母。</target>
        </trans-unit>
        <trans-unit id="66898ef89145e3251520fcffa27276a730264b3d" translate="yes" xml:space="preserve">
          <source>Rational numbers, with numerator and denominator of some &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">有理数，具有某种 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 类型的分子和分母。</target>
        </trans-unit>
        <trans-unit id="998e2594b8623ea11ad1729045ff4b74f17b5bbb" translate="yes" xml:space="preserve">
          <source>Raw buffers</source>
          <target state="translated">原始缓冲器</target>
        </trans-unit>
        <trans-unit id="151c7faa3b6e8d13cea407d5faf552ccd90e93ef" translate="yes" xml:space="preserve">
          <source>Raw bytes embedded into the binary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25fb73f383d3356e6e16bbb4088572623344a39b" translate="yes" xml:space="preserve">
          <source>Raw pointer of array version of &lt;code&gt;&lt;a href=&quot;system-win32-automation-input#v:sendInput&quot;&gt;sendInput&lt;/a&gt;&lt;/code&gt;. Use this function to support non-list sequence.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-win32-automation-input#v:sendInput&quot;&gt;sendInput&lt;/a&gt;&lt;/code&gt; 的数组版本的原始指针。使用此功能支持非列表序列。</target>
        </trans-unit>
        <trans-unit id="cee6901eb5dcf876205fb0f25887ebe12845d3fb" translate="yes" xml:space="preserve">
          <source>Raw read/write operations on file descriptors</source>
          <target state="translated">对文件描述符进行原始读/写操作。</target>
        </trans-unit>
        <trans-unit id="157fea958671982fd82ff04ec9ed8c09a6ef6b39" translate="yes" xml:space="preserve">
          <source>RawBuffer</source>
          <target state="translated">RawBuffer</target>
        </trans-unit>
        <trans-unit id="a8a5d4f060e1544d5944caadfd158d5a2d980db6" translate="yes" xml:space="preserve">
          <source>RawCharBuffer</source>
          <target state="translated">RawCharBuffer</target>
        </trans-unit>
        <trans-unit id="8da7c86459d153b460979db3219ab54db7fdba1e" translate="yes" xml:space="preserve">
          <source>RawDevice</source>
          <target state="translated">RawDevice</target>
        </trans-unit>
        <trans-unit id="0f11c5246f5cfda145cd94cc2026acc7a8f85d00" translate="yes" xml:space="preserve">
          <source>RawFilePath</source>
          <target state="translated">RawFilePath</target>
        </trans-unit>
        <trans-unit id="84f85043304c606b67a09190e7260a74e66b4111" translate="yes" xml:space="preserve">
          <source>RawIO</source>
          <target state="translated">RawIO</target>
        </trans-unit>
        <trans-unit id="e601d52c0dfeb733b64b16fa8cfb0f09d668768c" translate="yes" xml:space="preserve">
          <source>RawObject</source>
          <target state="translated">RawObject</target>
        </trans-unit>
        <trans-unit id="64cb694cae0bed8753db87912cef88672b156273" translate="yes" xml:space="preserve">
          <source>RcBcc</source>
          <target state="translated">RcBcc</target>
        </trans-unit>
        <trans-unit id="8c924ffc452540914b6a5f1c353b075e91bb1bc7" translate="yes" xml:space="preserve">
          <source>RcCc</source>
          <target state="translated">RcCc</target>
        </trans-unit>
        <trans-unit id="af90b8ce4325e3befb6865f737325cee4b2f3074" translate="yes" xml:space="preserve">
          <source>RcOriginal</source>
          <target state="translated">RcOriginal</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
