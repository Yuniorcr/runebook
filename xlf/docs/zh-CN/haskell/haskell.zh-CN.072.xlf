<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="haskell">
    <body>
      <group id="haskell">
        <trans-unit id="5cf53f246d50f6260632d008d2b6db3a49861eea" translate="yes" xml:space="preserve">
          <source>Bounded-size builder primitives</source>
          <target state="translated">有界尺寸的构建器基元</target>
        </trans-unit>
        <trans-unit id="67c8c593c7bd9a6879a0fe1147f8534d16210197" translate="yes" xml:space="preserve">
          <source>Bounded-size primitives</source>
          <target state="translated">有界尺寸基元</target>
        </trans-unit>
        <trans-unit id="1d198c2728b2ed26f54e7cf85c8fe977ccb9dc30" translate="yes" xml:space="preserve">
          <source>BoundedPrim</source>
          <target state="translated">BoundedPrim</target>
        </trans-unit>
        <trans-unit id="b95a97052e20a036c292b97a8ef02a42631be78d" translate="yes" xml:space="preserve">
          <source>Bounds</source>
          <target state="translated">Bounds</target>
        </trans-unit>
        <trans-unit id="c32b8e824fbf6eb465582d1de11fcd8513bd5c9c" translate="yes" xml:space="preserve">
          <source>Bounds for &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; are as given by</source>
          <target state="translated">并 &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; 界限由给出</target>
        </trans-unit>
        <trans-unit id="dd273039c19f3757a5b2fd1fd257892b02f8e2dc" translate="yes" xml:space="preserve">
          <source>Bounds for &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-map-strict#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;data-map-strict#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; are as given by</source>
          <target state="translated">并 &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;data-map-strict#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;data-map-strict#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; 界限由给出</target>
        </trans-unit>
        <trans-unit id="c07a1483ae52efde58c537e9e0e90f76af8d10c2" translate="yes" xml:space="preserve">
          <source>Bounds for &lt;code&gt;&lt;a href=&quot;data-set#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-set#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;data-set#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; are as given by</source>
          <target state="translated">并 &lt;code&gt;&lt;a href=&quot;data-set#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;data-set#v:intersection&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;data-set#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; 界限由给出</target>
        </trans-unit>
        <trans-unit id="f69cf141b98e3135d46e5dad39602462872e7538" translate="yes" xml:space="preserve">
          <source>BoxLabel</source>
          <target state="translated">BoxLabel</target>
        </trans-unit>
        <trans-unit id="2ede889b135cd77a1e71ca9eac7d985ad2849d48" translate="yes" xml:space="preserve">
          <source>Boxed arrays</source>
          <target state="translated">盒式阵列</target>
        </trans-unit>
        <trans-unit id="b252e3099c6de97ebf23d4d3dad230e7eb5f4d7a" translate="yes" xml:space="preserve">
          <source>Break a string on a substring, returning a pair of the part of the string prior to the match, and the rest of the string.</source>
          <target state="translated">在子串上断开字符串,返回匹配前的字符串部分和字符串其余部分的一对。</target>
        </trans-unit>
        <trans-unit id="48c9c26fa469922bae1a8d989dbc3283a3056b99" translate="yes" xml:space="preserve">
          <source>Break on any exception thrown</source>
          <target state="translated">抛出的任何异常都要中断</target>
        </trans-unit>
        <trans-unit id="a3c2a397d9584ae0b3fce8742f96600f8f4f3b73" translate="yes" xml:space="preserve">
          <source>Break on uncaught exceptions and errors</source>
          <target state="translated">突破未捕获的异常和错误</target>
        </trans-unit>
        <trans-unit id="5255e26cd5c57de2f55fb7938271f8fe86a6ef18" translate="yes" xml:space="preserve">
          <source>Breaking into lines and words</source>
          <target state="translated">破解成线条和文字</target>
        </trans-unit>
        <trans-unit id="e436763b8c5113cc5e50ec031996d87ced4c8b9f" translate="yes" xml:space="preserve">
          <source>Breaking into many substrings</source>
          <target state="translated">分成多个子串</target>
        </trans-unit>
        <trans-unit id="9572241e9e3834b00e85795597b97e3ac3c0330f" translate="yes" xml:space="preserve">
          <source>Breaking on exceptions is particularly useful for finding out what your program was doing when it was in an infinite loop. Just hit Control-C, and examine the history to find out what was going on.</source>
          <target state="translated">在异常上的突破对于找出你的程序在无限循环中做了什么特别有用。只要按下Control-C键,检查历史记录,就能知道发生了什么。</target>
        </trans-unit>
        <trans-unit id="9ef5f02e366bdd5b1bc2750710d3b437ec6c866e" translate="yes" xml:space="preserve">
          <source>Breaking strings</source>
          <target state="translated">打破束缚</target>
        </trans-unit>
        <trans-unit id="9462db075d64fc4a3db967b37fffd444976427cc" translate="yes" xml:space="preserve">
          <source>Breakpoints can also be set by line (and optionally column) number:</source>
          <target state="translated">断点也可以通过行号(也可以选择列号)来设置。</target>
        </trans-unit>
        <trans-unit id="60a59cc6fc01f63be8e198f2fd5dd150495e86da" translate="yes" xml:space="preserve">
          <source>Breakpoints can be set in various ways. Perhaps the easiest way to set a breakpoint is to name a top-level function:</source>
          <target state="translated">断点可以用不同的方式来设置。也许最简单的设置断点的方法是命名一个顶层函数。</target>
        </trans-unit>
        <trans-unit id="5d7429ed06486112488321794f766798e806ffe7" translate="yes" xml:space="preserve">
          <source>Breaks down the graph by heap closure type.</source>
          <target state="translated">按堆闭合类型对图形进行分解。</target>
        </trans-unit>
        <trans-unit id="b6426715004373ae21dcdb366f81839cc52b183c" translate="yes" xml:space="preserve">
          <source>Bringing type variables into scope is particularly important for existential data constructors. For example:</source>
          <target state="translated">将类型变量带入作用域,对于存在式数据构造器来说尤为重要。例如:</target>
        </trans-unit>
        <trans-unit id="a676d7117cb70fed108c464413db56b7582a1b58" translate="yes" xml:space="preserve">
          <source>Broadcast a scalar to all elements of a vector.</source>
          <target state="translated">向一个向量的所有元素广播一个标量。</target>
        </trans-unit>
        <trans-unit id="2be5f64b36230104ef9c6e230215846a83d18df6" translate="yes" xml:space="preserve">
          <source>Buffer</source>
          <target state="translated">Buffer</target>
        </trans-unit>
        <trans-unit id="63915c89cc9540e39b93d3bbb0389bf834c12179" translate="yes" xml:space="preserve">
          <source>Buffer allocation function. If &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; is given, then a new first buffer should be allocated. If &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (oldBuf, minSize)&lt;/code&gt; is given, then a buffer with minimal size &lt;code&gt;minSize&lt;/code&gt; must be returned. The strategy may reuse the &lt;code&gt;oldBuffer&lt;/code&gt;, if it can guarantee that this referentially transparent and &lt;code&gt;oldBuffer&lt;/code&gt; is large enough.</source>
          <target state="translated">缓冲区分配功能。如果未给出 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 内容，则应分配一个新的第一个缓冲区。如果给出了 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (oldBuf, minSize)&lt;/code&gt; ，则必须返回最小大小为 &lt;code&gt;minSize&lt;/code&gt; 的缓冲区。如果该策略可以保证此参照透明且 &lt;code&gt;oldBuffer&lt;/code&gt; 足够大，则该策略可以重用 &lt;code&gt;oldBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3ffb5bb34208049e05e2848a2a464b9554b0c581" translate="yes" xml:space="preserve">
          <source>Buffer allocation function. If &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; is given, then a new first buffer should be allocated. If &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (oldBuf, minSize)&lt;/code&gt; is given, then a buffer with minimal size &lt;code&gt;minSize&lt;/code&gt; must be returned. The strategy may reuse the &lt;code&gt;oldBuffer&lt;/code&gt;, if it can guarantee that this referentially transparent and &lt;code&gt;oldBuffer&lt;/code&gt; is large enough.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1511aac3b884d36da1f7bb8a91d1b07265d2d60" translate="yes" xml:space="preserve">
          <source>Buffer allocation strategy to use</source>
          <target state="translated">使用的缓冲区分配策略</target>
        </trans-unit>
        <trans-unit id="efe38e877d87cf3a601574f61e8c6112056e7eb0" translate="yes" xml:space="preserve">
          <source>Buffer management</source>
          <target state="translated">缓冲区管理</target>
        </trans-unit>
        <trans-unit id="9824aaadc3118ca3339cc9676a3f0f7e0217d736" translate="yes" xml:space="preserve">
          <source>Buffer range to fill.</source>
          <target state="translated">要填充的缓冲区范围。</target>
        </trans-unit>
        <trans-unit id="07882a47335e43d38370ae44c05618c4c0286951" translate="yes" xml:space="preserve">
          <source>BufferCodec</source>
          <target state="translated">BufferCodec</target>
        </trans-unit>
        <trans-unit id="a9ae0ebad1f560c0b01d474fcf8a1259da2e45b3" translate="yes" xml:space="preserve">
          <source>BufferList</source>
          <target state="translated">BufferList</target>
        </trans-unit>
        <trans-unit id="85c84c25d56fc13d452000134b60f28ba5e1e022" translate="yes" xml:space="preserve">
          <source>BufferListNil</source>
          <target state="translated">BufferListNil</target>
        </trans-unit>
        <trans-unit id="f7f013f67bedbafe6a6a6713f8fba0341a8b5915" translate="yes" xml:space="preserve">
          <source>BufferMode</source>
          <target state="translated">BufferMode</target>
        </trans-unit>
        <trans-unit id="107a37d237e86ecf0a07109468ec7abb99d1adfa" translate="yes" xml:space="preserve">
          <source>BufferRange</source>
          <target state="translated">BufferRange</target>
        </trans-unit>
        <trans-unit id="322e5d09d79c6009f5674e7117a1114889fbffad" translate="yes" xml:space="preserve">
          <source>BufferState</source>
          <target state="translated">BufferState</target>
        </trans-unit>
        <trans-unit id="4e850fb4754d7daddef54b1081f53c061e2277d2" translate="yes" xml:space="preserve">
          <source>BufferWriter</source>
          <target state="translated">BufferWriter</target>
        </trans-unit>
        <trans-unit id="f000f6a3275f9800597ad7f1ac98d43bdd868368" translate="yes" xml:space="preserve">
          <source>BufferedIO</source>
          <target state="translated">BufferedIO</target>
        </trans-unit>
        <trans-unit id="9639fd1e6014e384d9b0d21001270a4532eabd44" translate="yes" xml:space="preserve">
          <source>Buffering operations</source>
          <target state="translated">缓冲操作</target>
        </trans-unit>
        <trans-unit id="1705358c6a0b24af297b254b2108454741ff4557" translate="yes" xml:space="preserve">
          <source>Buffers of any element</source>
          <target state="translated">任何元素的缓冲器</target>
        </trans-unit>
        <trans-unit id="aec7810cb2c876e23b0033e46aae5289ebf0c07c" translate="yes" xml:space="preserve">
          <source>Buffers used in the IO system</source>
          <target state="translated">IO系统中使用的缓冲器</target>
        </trans-unit>
        <trans-unit id="0c6dee2a7b5942268d8c231ef297e7abf881535b" translate="yes" xml:space="preserve">
          <source>Buggle only imports &lt;code&gt;Prelude&lt;/code&gt;, which is compiled with &lt;a href=&quot;#extension-Trustworthy&quot;&gt;&lt;code&gt;Trustworthy&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;Prelude&lt;/code&gt; resides in the &lt;code&gt;base&lt;/code&gt; package, which &lt;code&gt;C&lt;/code&gt; trusts, and (we&amp;rsquo;ll assume) all of &lt;code&gt;Prelude&lt;/code&gt;&amp;lsquo;s imports are trusted. So &lt;code&gt;C&lt;/code&gt; trusts &lt;code&gt;Prelude&lt;/code&gt;, and so &lt;code&gt;C&lt;/code&gt; also trusts Buggle. (While &lt;code&gt;Prelude&lt;/code&gt; is typically imported implicitly, it still obeys the same rules outlined here).</source>
          <target state="translated">Buggle仅导入使用&lt;a href=&quot;#extension-Trustworthy&quot;&gt; &lt;code&gt;Trustworthy&lt;/code&gt; &lt;/a&gt;编译的 &lt;code&gt;Prelude&lt;/code&gt; 。 &lt;code&gt;Prelude&lt;/code&gt; 驻留在 &lt;code&gt;C&lt;/code&gt; 信任的 &lt;code&gt;base&lt;/code&gt; 包中，并且（我们假设） &lt;code&gt;Prelude&lt;/code&gt; 的所有导入都是受信任的。因此 &lt;code&gt;C&lt;/code&gt; 信任 &lt;code&gt;Prelude&lt;/code&gt; ，因此 &lt;code&gt;C&lt;/code&gt; 也信任Buggle。（虽然 &lt;code&gt;Prelude&lt;/code&gt; 通常是隐式导入的，但仍遵循此处概述的相同规则）。</target>
        </trans-unit>
        <trans-unit id="dab94f662adaf1659e7f05eebbac08d52174fe85" translate="yes" xml:space="preserve">
          <source>Buggle only imports &lt;code&gt;Prelude&lt;/code&gt;, which is compiled with &lt;a href=&quot;#extension-Trustworthy&quot;&gt;&lt;code&gt;Trustworthy&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;Prelude&lt;/code&gt; resides in the &lt;code&gt;base&lt;/code&gt; package, which &lt;code&gt;C&lt;/code&gt; trusts, and (we&amp;rsquo;ll assume) all of &lt;code&gt;Prelude&lt;/code&gt;&amp;rsquo;s imports are trusted. So &lt;code&gt;C&lt;/code&gt; trusts &lt;code&gt;Prelude&lt;/code&gt;, and so &lt;code&gt;C&lt;/code&gt; also trusts Buggle. (While &lt;code&gt;Prelude&lt;/code&gt; is typically imported implicitly, it still obeys the same rules outlined here).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8081798290cefd3d54a8b9c792ffff9da0c521f1" translate="yes" xml:space="preserve">
          <source>Build a (possibly infinite) forest from a list of seed values in breadth-first order.</source>
          <target state="translated">按广度第一顺序从种子值列表中建立一个(可能是无限的)森林。</target>
        </trans-unit>
        <trans-unit id="4bf90ac98bb2341a2075164c532c21f819b14548" translate="yes" xml:space="preserve">
          <source>Build a (possibly infinite) tree from a seed value in breadth-first order.</source>
          <target state="translated">从一个种子值按广度一阶建立一棵(可能是无限的)树。</target>
        </trans-unit>
        <trans-unit id="c1d9cde7a54b308063f3fd73d9babe621683dd31" translate="yes" xml:space="preserve">
          <source>Build a function type.</source>
          <target state="translated">建立一个函数类型。</target>
        </trans-unit>
        <trans-unit id="884c3b47e0ba76cd8f3c27d14e011d3bd05577da" translate="yes" xml:space="preserve">
          <source>Build a graph from a list of edges.</source>
          <target state="translated">从边的列表中建立一个图。</target>
        </trans-unit>
        <trans-unit id="a94df834fcc88712c4822652bc46a21adf37eec8" translate="yes" xml:space="preserve">
          <source>Build a graph from a list of nodes uniquely identified by keys, with a list of keys of nodes this node should have edges to.</source>
          <target state="translated">从一个由键唯一标识的节点列表中构建一个图,这个节点应该有边到的节点的键列表。</target>
        </trans-unit>
        <trans-unit id="2fea8f78ed97ff98cabd9dfcff293718197383f4" translate="yes" xml:space="preserve">
          <source>Build a multi-module Haskell program, automatically figuring out dependencies. Likely to be much easier, and faster, than using &lt;code&gt;make&lt;/code&gt;; see &lt;a href=&quot;using#make-mode&quot;&gt;Using ghc &amp;ndash;make&lt;/a&gt; for details.</source>
          <target state="translated">构建一个多模块的Haskell程序，自动找出依赖性。可能比使用 &lt;code&gt;make&lt;/code&gt; 更容易，更快捷。有关详细信息，请参见&lt;a href=&quot;using#make-mode&quot;&gt;使用ghc &amp;ndash;make&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3a5960117b6ce95230aee2dd05eee4a451e3faba" translate="yes" xml:space="preserve">
          <source>Build a multi-module Haskell program, automatically figuring out dependencies. Likely to be much easier, and faster, than using &lt;code&gt;make&lt;/code&gt;; see &lt;a href=&quot;using#make-mode&quot;&gt;Using ghc --make&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecfe54531e239227dfe711c2483b41196f665224" translate="yes" xml:space="preserve">
          <source>Build a new &lt;code&gt;&lt;a href=&quot;control-concurrent-qsem#t:QSem&quot;&gt;QSem&lt;/a&gt;&lt;/code&gt; with a supplied initial quantity. The initial quantity must be at least 0.</source>
          <target state="translated">用提供的初始数量构建一个新的 &lt;code&gt;&lt;a href=&quot;control-concurrent-qsem#t:QSem&quot;&gt;QSem&lt;/a&gt;&lt;/code&gt; 。初始数量必须至少为0。</target>
        </trans-unit>
        <trans-unit id="0dbc0898ffb2401cdf281b35699fcbe7978e4839" translate="yes" xml:space="preserve">
          <source>Build a new &lt;code&gt;&lt;a href=&quot;control-concurrent-qsemn#t:QSemN&quot;&gt;QSemN&lt;/a&gt;&lt;/code&gt; with a supplied initial quantity. The initial quantity must be at least 0.</source>
          <target state="translated">用提供的初始数量构建一个新的 &lt;code&gt;&lt;a href=&quot;control-concurrent-qsemn#t:QSemN&quot;&gt;QSemN&lt;/a&gt;&lt;/code&gt; 。初始数量必须至少为0。</target>
        </trans-unit>
        <trans-unit id="70552251bfc019f0a6642059f0e75968472b7607" translate="yes" xml:space="preserve">
          <source>Build a new &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">建立一个新的 &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="203ae674b4968ad5dbc66e2600cec2ba9f05797f" translate="yes" xml:space="preserve">
          <source>Build a new &lt;code&gt;&lt;a href=&quot;data-stref#t:STRef&quot;&gt;STRef&lt;/a&gt;&lt;/code&gt; in the current state thread</source>
          <target state="translated">在当前状态线程中建立一个新的 &lt;code&gt;&lt;a href=&quot;data-stref#t:STRef&quot;&gt;STRef&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b2ccc32e3940757246852fc694480f4189287bca" translate="yes" xml:space="preserve">
          <source>Build a new &lt;code&gt;&lt;a href=&quot;ghc-ioarray#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">建立一个新的 &lt;code&gt;&lt;a href=&quot;ghc-ioarray#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2300e21cc0d85b3217ced13fe2e4d327643182d7" translate="yes" xml:space="preserve">
          <source>Build a new &lt;code&gt;&lt;a href=&quot;ghc-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">建立一个新的 &lt;code&gt;&lt;a href=&quot;ghc-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="82733393c21fc1714245da66647bbf83f8a411fd" translate="yes" xml:space="preserve">
          <source>Build a new &lt;code&gt;&lt;a href=&quot;ghc-stref#t:STRef&quot;&gt;STRef&lt;/a&gt;&lt;/code&gt; in the current state thread</source>
          <target state="translated">在当前状态线程中建立一个新的 &lt;code&gt;&lt;a href=&quot;ghc-stref#t:STRef&quot;&gt;STRef&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c48c92907a18be455e4e537a0232ec22e0c8bf45" translate="yes" xml:space="preserve">
          <source>Build a new &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">建立一个新的 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="97fae16599eb28b19c06553bf02629e165abbc5e" translate="yes" xml:space="preserve">
          <source>Build a term and use a generic function for subterms</source>
          <target state="translated">建立一个术语,并为子术语使用一个通用函数。</target>
        </trans-unit>
        <trans-unit id="cdf22117ef668c1724b6471862c994146899c2a2" translate="yes" xml:space="preserve">
          <source>Build a term skeleton</source>
          <target state="translated">建立术语骨架</target>
        </trans-unit>
        <trans-unit id="6e114d1f641bd96174ecb4be857124ba1201641c" translate="yes" xml:space="preserve">
          <source>Build and return a new instance of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">构建并返回新的 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt; 实例</target>
        </trans-unit>
        <trans-unit id="3ec1bed141573c1c17cf02d6a5d0bb6f437db403" translate="yes" xml:space="preserve">
          <source>Build and returns a new instance of &lt;code&gt;&lt;a href=&quot;control-concurrent-chan#t:Chan&quot;&gt;Chan&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">生成并返回 &lt;code&gt;&lt;a href=&quot;control-concurrent-chan#t:Chan&quot;&gt;Chan&lt;/a&gt;&lt;/code&gt; 的新实例。</target>
        </trans-unit>
        <trans-unit id="35be25a421fa9ce73459655bf04e9204af3809b5" translate="yes" xml:space="preserve">
          <source>Build and returns a new instance of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">生成并返回新的 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt; 实例</target>
        </trans-unit>
        <trans-unit id="e8370129f628872766fbc00d3f80875610f346b1" translate="yes" xml:space="preserve">
          <source>Build code for dynamic linking. This can reduce code size tremendously, but may slow-down cross-module calls of non-inlined functions. There can be some complications combining &lt;a href=&quot;#ghc-flag--shared&quot;&gt;&lt;code&gt;-shared&lt;/code&gt;&lt;/a&gt; with this flag relating to linking in the RTS under Linux. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/10352&quot;&gt;#10352&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f76d0f10c8f6fc4b46e538ab3beeacb47b224a" translate="yes" xml:space="preserve">
          <source>Build code for dynamic linking. This can reduce code size tremendously, but may slow-down cross-module calls of non-inlined functions. There can be some complications combining &lt;a href=&quot;#ghc-flag--shared&quot;&gt;&lt;code&gt;-shared&lt;/code&gt;&lt;/a&gt; with this flag relating to linking in the RTS under Linux. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/10352&quot;&gt;Issue #10352&lt;/a&gt;.</source>
          <target state="translated">构建用于动态链接的代码。这样可以极大地减少代码大小，但可能会减慢非内联函数的跨模块调用。与Linux下RTS中的链接链接相关的此标志&lt;a href=&quot;#ghc-flag--shared&quot;&gt; &lt;code&gt;-shared&lt;/code&gt; &lt;/a&gt;可能会带来一些麻烦。请参阅&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/10352&quot;&gt;第10352期&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a5add7a5a63c06d485a23e304e415303fa124ca5" translate="yes" xml:space="preserve">
          <source>Build dynamic object files &lt;em&gt;as well as&lt;/em&gt; static object files during compilation</source>
          <target state="translated">在编译过程中生成动态对象文件&lt;em&gt;和&lt;/em&gt;静态对象文件</target>
        </trans-unit>
        <trans-unit id="4d3910a254eaafd1fc8455fdeef9fbad4ea46494" translate="yes" xml:space="preserve">
          <source>Build dynamically-linked object files and executables</source>
          <target state="translated">构建动态链接的对象文件和可执行文件。</target>
        </trans-unit>
        <trans-unit id="eacb633fef8080b6f0e8a1849d462864fe4d86c5" translate="yes" xml:space="preserve">
          <source>Build signals and steps</source>
          <target state="translated">建立信号和步骤</target>
        </trans-unit>
        <trans-unit id="0b5df5cd9791079aa609e1eaab6f8fc1c1ffdb8d" translate="yes" xml:space="preserve">
          <source>Build step to use for filling the &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BufferRange&quot;&gt;BufferRange&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">构建步骤，用于填充 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BufferRange&quot;&gt;BufferRange&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="333dc9940206cf3fadb3fab2461dac23ee93f097" translate="yes" xml:space="preserve">
          <source>BuildSignal</source>
          <target state="translated">BuildSignal</target>
        </trans-unit>
        <trans-unit id="801f513654150879c914869a1ad18da56a51311a" translate="yes" xml:space="preserve">
          <source>BuildStep</source>
          <target state="translated">BuildStep</target>
        </trans-unit>
        <trans-unit id="4759bf14d7a511508e86c343c934894b6e8db533" translate="yes" xml:space="preserve">
          <source>Builder</source>
          <target state="translated">Builder</target>
        </trans-unit>
        <trans-unit id="364a8a9074eaff8c9a4b742aefb97068ac895a25" translate="yes" xml:space="preserve">
          <source>Builder construction</source>
          <target state="translated">建筑商建设</target>
        </trans-unit>
        <trans-unit id="9bb1e848b4810eae4e0aa47509b87fbea136f359" translate="yes" xml:space="preserve">
          <source>Builder primitives are contravariant so it's like the normal fmap, but backwards (look at the type). (If it helps to remember, the operator symbol is like (&lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt;) but backwards.)</source>
          <target state="translated">构建器原语是互变的，因此它就像普通的fmap一样，但是向后（查看类型）。（如果它有助于记住，则运算符符号类似于（&lt;a href=&quot;%24&quot;&gt;$&lt;/a&gt;），但倒退。）</target>
        </trans-unit>
        <trans-unit id="080b4431eac6064309a77089493ad982c5492b9a" translate="yes" xml:space="preserve">
          <source>Builder primitives come in two forms: fixed-size and bounded-size.</source>
          <target state="translated">Builder 基元有两种形式:固定大小和限定大小。</target>
        </trans-unit>
        <trans-unit id="9d914bfcf1c5bc9e6b83d3232349cae23d392f30" translate="yes" xml:space="preserve">
          <source>Building</source>
          <target state="translated">Building</target>
        </trans-unit>
        <trans-unit id="69f74097b2a4cac8d5c3948fa9f727f1ceca5558" translate="yes" xml:space="preserve">
          <source>Building ByteStrings</source>
          <target state="translated">构建ByteStrings</target>
        </trans-unit>
        <trans-unit id="e7a886492e100281858af7babfd3d1560f1a0fa1" translate="yes" xml:space="preserve">
          <source>Building Haskell code into a shared library is a good way to include Haskell code in a larger mixed-language project. While with static linking it is recommended to use GHC to perform the final link step, with shared libraries a Haskell library can be treated just like any other shared library. The linking can be done using the normal system C compiler or linker.</source>
          <target state="translated">将Haskell代码构建到共享库中是将Haskell代码包含在一个更大的混合语言项目中的好方法。虽然对于静态链接,建议使用GHC来执行最后的链接步骤,但对于共享库,Haskell库可以像其他共享库一样对待。链接可以使用普通的系统C编译器或链接器来完成。</target>
        </trans-unit>
        <trans-unit id="c345d8576de571b12d40732f130fe8f621f52549" translate="yes" xml:space="preserve">
          <source>Building a static library is done by using the &lt;strong&gt;ar&lt;/strong&gt; tool, like so:</source>
          <target state="translated">可以通过使用&lt;strong&gt;ar&lt;/strong&gt;工具来构建静态库，如下所示：</target>
        </trans-unit>
        <trans-unit id="8152d2ec7d17304f7305d9df262ac39349bac99f" translate="yes" xml:space="preserve">
          <source>Building and using shared libraries is slightly more complicated than building and using static libraries. When using Cabal much of the detail is hidden, just use &lt;code&gt;--enable-shared&lt;/code&gt; when configuring a package to build it into a shared library, or to link it against other packages built as shared libraries. The additional complexity when building code is to distinguish whether the code will be used in a shared library or will use shared library versions of other packages it depends on. There is additional complexity when installing and distributing shared libraries or programs that use shared libraries, to ensure that all shared libraries that are required at runtime are present in suitable locations.</source>
          <target state="translated">构建和使用共享库比构建和使用静态库稍微复杂一些。使用Cabal时，很多细节都是隐藏的，只需在配置软件包时将 &lt;code&gt;--enable-shared&lt;/code&gt; 配置为将其构建到共享库中，或将其链接到作为共享库构建的其他软件包。构建代码时，额外的复杂性是区分代码是在共享库中使用还是在其依赖的其他软件包的共享库版本中使用。在安装和分发共享库或使用共享库的程序时，存在额外的复杂性，以确保运行时所需的所有共享库都位于适当的位置。</target>
        </trans-unit>
        <trans-unit id="d2d47db5b33b51c402bdb2a8a2fb36f1133fc85e" translate="yes" xml:space="preserve">
          <source>Building computations from sequences of functions that may fail or using exception handling to structure error handling.</source>
          <target state="translated">从可能失败的函数序列中构建计算,或者使用异常处理来构建错误处理。</target>
        </trans-unit>
        <trans-unit id="5c9c803f9e45294cd3c242c8eff2a73203984f1b" translate="yes" xml:space="preserve">
          <source>Building lists</source>
          <target state="translated">建立名单</target>
        </trans-unit>
        <trans-unit id="59b3ac6a1ebc1aa3f0dee53bb672cdabad274ba4" translate="yes" xml:space="preserve">
          <source>Building streams</source>
          <target state="translated">建设流</target>
        </trans-unit>
        <trans-unit id="f2136c9449e4d2207252445899311ca019c571b7" translate="yes" xml:space="preserve">
          <source>Building your own packages is also quite straightforward: we provide the &lt;a href=&quot;http://www.haskell.org/cabal/&quot;&gt;Cabal&lt;/a&gt; infrastructure which automates the process of configuring, building, installing and distributing a package. All you need to do is write a simple configuration file, put a few files in the right places, and you have a package. See the &lt;a href=&quot;http://www.haskell.org/cabal/users-guide/&quot;&gt;Cabal documentation&lt;/a&gt; for details, and also the Cabal libraries (&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/Cabal-3.2.0.0/Distribution-Simple.html&quot;&gt;Distribution.Simple&lt;/a&gt;, for example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="468ffacf83b540eb8029fa77183ff7a6bbbe4845" translate="yes" xml:space="preserve">
          <source>Building your own packages is also quite straightforward: we provide the &lt;a href=&quot;http://www.haskell.org/cabal/&quot;&gt;Cabal&lt;/a&gt; infrastructure which automates the process of configuring, building, installing and distributing a package. All you need to do is write a simple configuration file, put a few files in the right places, and you have a package. See the &lt;a href=&quot;http://www.haskell.org/cabal/users-guide/&quot;&gt;Cabal documentation&lt;/a&gt; for details, and also the Cabal libraries (&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/Cabal-3.0.1.0/Distribution-Simple.html&quot;&gt;Distribution.Simple&lt;/a&gt;, for example).</source>
          <target state="translated">构建自己的软件包也非常简单：我们提供&lt;a href=&quot;http://www.haskell.org/cabal/&quot;&gt;Cabal&lt;/a&gt;基础结构，该基础结构可自动执行配置，构建，安装和分发软件包的过程。您需要做的就是编写一个简单的配置文件，在正确的位置放置几个文件，然后有了一个软件包。有关详细信息，请参见&lt;a href=&quot;http://www.haskell.org/cabal/users-guide/&quot;&gt;Cabal文档&lt;/a&gt;，以及Cabal库（例如&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/Cabal-3.0.1.0/Distribution-Simple.html&quot;&gt;Distribution.Simple&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="327fc0c96310e3524acc6da1fe01e6c67634802c" translate="yes" xml:space="preserve">
          <source>Builds a new array, with every element initialised to an undefined value. In a monadic context in which operations must be deterministic (e.g. the ST monad), the array elements are initialised to a fixed but undefined value, such as zero.</source>
          <target state="translated">建立一个新的数组,每个元素初始化为一个未定义的值。在单项式上下文中,操作必须是确定性的(例如ST单项式),数组元素被初始化为一个固定但未定义的值,例如零。</target>
        </trans-unit>
        <trans-unit id="9185529c0692a9b618d7cbf93f4568e19c94d3ee" translate="yes" xml:space="preserve">
          <source>Builds a new array, with every element initialised to the supplied value.</source>
          <target state="translated">建立一个新的数组,每个元素都初始化为提供的值。</target>
        </trans-unit>
        <trans-unit id="8214ecb33cfb7974c4f39c8c9d05735a2e2c8271" translate="yes" xml:space="preserve">
          <source>Builds a sequence from a seed value. Takes time linear in the number of generated elements. &lt;em&gt;WARNING:&lt;/em&gt; If the number of generated elements is infinite, this method will not terminate.</source>
          <target state="translated">从种子值构建序列。时间与生成的元素数量成线性关系。&lt;em&gt;警告：&lt;/em&gt;如果生成的元素数是无限的，则此方法不会终止。</target>
        </trans-unit>
        <trans-unit id="7b20d8714b6e61b13e739bc27b8ce588d42b92f5" translate="yes" xml:space="preserve">
          <source>Builds a time value from a parsed input string. If the input does not include all the information needed to construct a complete value, any missing parts should be taken from 1970-01-01 00:00:00 +0000 (which was a Thursday). In the absence of &lt;code&gt;%C&lt;/code&gt; or &lt;code&gt;%Y&lt;/code&gt;, century is 1969 - 2068.</source>
          <target state="translated">根据已解析的输入字符串构建时间值。如果输入不包括构造一个完整值所需的所有信息，则所有缺少的部分都应取自1970-01-01 00:00:00 +0000（这是星期四）。在没有 &lt;code&gt;%C&lt;/code&gt; 或 &lt;code&gt;%Y&lt;/code&gt; 的情况下，世纪是1969年-2068年。</target>
        </trans-unit>
        <trans-unit id="0e8e2b2ccd17965cacc18d35e9f5403a32e7112a" translate="yes" xml:space="preserve">
          <source>Builds and returns a new instance of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">生成并返回 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; 的新实例。</target>
        </trans-unit>
        <trans-unit id="76ca7a4e55fa9d29e200dbea08886efb9fb74322" translate="yes" xml:space="preserve">
          <source>Built-in names</source>
          <target state="translated">内置名称</target>
        </trans-unit>
        <trans-unit id="e2f8f611e0d7e4911d6a941a4fb69322eea24213" translate="yes" xml:space="preserve">
          <source>Built-in rule ensures that applications of this function to literal Word# are lifted into Natural literals.</source>
          <target state="translated">内建规则确保该函数对字面Word#的应用被提升为自然字面。</target>
        </trans-unit>
        <trans-unit id="396f77e795df5a4def2612076c16d77e30f3c69e" translate="yes" xml:space="preserve">
          <source>Bundled Patterns</source>
          <target state="translated">捆绑模式</target>
        </trans-unit>
        <trans-unit id="26b720e58894a51047c1c6e9ca37a4f1f3595b00" translate="yes" xml:space="preserve">
          <source>Bundled pattern synonyms are type checked to ensure that they are of the same type as the type constructor which they are bundled with. A pattern synonym &lt;code&gt;P&lt;/code&gt; can not be bundled with a type constructor &lt;code&gt;T&lt;/code&gt; if &lt;code&gt;P&lt;/code&gt;&amp;lsquo;s type is visibly incompatible with &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">对捆绑的模式同义词进行类型检查，以确保它们与捆绑的类型构造函数具有相同的类型。如果 &lt;code&gt;P&lt;/code&gt; 的类型明显与 &lt;code&gt;T&lt;/code&gt; 不兼容，则模式同义词 &lt;code&gt;P&lt;/code&gt; 不能与类型构造函数 &lt;code&gt;T&lt;/code&gt; 捆绑在一起。</target>
        </trans-unit>
        <trans-unit id="9bbc0ee622ef87f959fb1f6a96e0d378e9dec049" translate="yes" xml:space="preserve">
          <source>Bundled pattern synonyms are type checked to ensure that they are of the same type as the type constructor which they are bundled with. A pattern synonym &lt;code&gt;P&lt;/code&gt; can not be bundled with a type constructor &lt;code&gt;T&lt;/code&gt; if &lt;code&gt;P&lt;/code&gt;&amp;rsquo;s type is visibly incompatible with &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4464772fd83cffa489cd2cb879896c855ed166d2" translate="yes" xml:space="preserve">
          <source>But &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; have distinct types, and so can&amp;rsquo;t be compared. It&amp;rsquo;s just about possible to imagine examples in which the derived instance would make sense, but it seems altogether simpler simply to prohibit such declarations. Define your own instances!</source>
          <target state="translated">但是 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 具有不同的类型，因此无法进行比较。可以想象在派生实例中有意义的示例，但是简单地禁止这样的声明似乎完全简单。定义自己的实例！</target>
        </trans-unit>
        <trans-unit id="b6ef53f84ff5027bc07ac3842944ad3414ad9d1f" translate="yes" xml:space="preserve">
          <source>But Haskell programmers can safely think of the ordinary &lt;em&gt;universally&lt;/em&gt; quantified type given above, thereby avoiding adding a new existential quantification construct.</source>
          <target state="translated">但是Haskell程序员可以放心地想到上面给出的普通&lt;em&gt;通用&lt;/em&gt;量化类型，从而避免添加新的存在量化结构。</target>
        </trans-unit>
        <trans-unit id="1a5eaf2134b45ec93619a779aa721cc224a4fe25" translate="yes" xml:space="preserve">
          <source>But because &lt;a href=&quot;#extension-RebindableSyntax&quot;&gt;&lt;code&gt;RebindableSyntax&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#extension-OverloadedStrings&quot;&gt;&lt;code&gt;OverloadedStrings&lt;/code&gt;&lt;/a&gt; are enabled, the &lt;code&gt;&quot;Foo&quot;&lt;/code&gt; string literal would now be of type &lt;code&gt;Text&lt;/code&gt;, not &lt;code&gt;String&lt;/code&gt;, which &lt;code&gt;showString&lt;/code&gt; doesn&amp;rsquo;t accept! This causes the generated &lt;code&gt;Show&lt;/code&gt; instance to fail to typecheck. It&amp;rsquo;s hard to imagine any scenario where it would be desirable have &lt;a href=&quot;#extension-RebindableSyntax&quot;&gt;&lt;code&gt;RebindableSyntax&lt;/code&gt;&lt;/a&gt; behavior within derived code, so GHC simply ignores &lt;a href=&quot;#extension-RebindableSyntax&quot;&gt;&lt;code&gt;RebindableSyntax&lt;/code&gt;&lt;/a&gt; entirely when checking derived code.</source>
          <target state="translated">但是，因为启用了&lt;a href=&quot;#extension-RebindableSyntax&quot;&gt; &lt;code&gt;RebindableSyntax&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#extension-OverloadedStrings&quot;&gt; &lt;code&gt;OverloadedStrings&lt;/code&gt; &lt;/a&gt;，所以 &lt;code&gt;&quot;Foo&quot;&lt;/code&gt; 字符串文字现在将是 &lt;code&gt;Text&lt;/code&gt; 类型，而不是 &lt;code&gt;String&lt;/code&gt; 类型，而 &lt;code&gt;showString&lt;/code&gt; 不接受！这将导致生成的 &lt;code&gt;Show&lt;/code&gt; 实例无法进行类型检查。很难想象会有任何在派生代码中具有&lt;a href=&quot;#extension-RebindableSyntax&quot;&gt; &lt;code&gt;RebindableSyntax&lt;/code&gt; &lt;/a&gt;行为的情况，因此GHC 在检查派生代码时完全忽略了&lt;a href=&quot;#extension-RebindableSyntax&quot;&gt; &lt;code&gt;RebindableSyntax&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="513f043a73b80db70c830181c526df028997f561" translate="yes" xml:space="preserve">
          <source>But it is not clear what GHC would fill in for &lt;code&gt;???&lt;/code&gt;, as each data family instance must generate fresh data constructors.</source>
          <target state="translated">但不清楚GHC将填写什么 &lt;code&gt;???&lt;/code&gt; ，因为每个数据族实例都必须生成新的数据构造函数。</target>
        </trans-unit>
        <trans-unit id="35278e742589993fb14c61a18c5b5d7e9aec1d0d" translate="yes" xml:space="preserve">
          <source>But more efficiently than using length on the intermediate list.</source>
          <target state="translated">但比在中间列表上使用长度更有效。</target>
        </trans-unit>
        <trans-unit id="5845751806ebabdf9499df5449f17bf8fdf1e9d2" translate="yes" xml:space="preserve">
          <source>But not on lists with more than one element:</source>
          <target state="translated">但在有一个以上元素的列表上就不行了。</target>
        </trans-unit>
        <trans-unit id="1747f875a6f39afa8ae9cf4d467a26e849fc8649" translate="yes" xml:space="preserve">
          <source>But not this (since the free variable &lt;code&gt;a&lt;/code&gt; is in the wrong place):</source>
          <target state="translated">但这不是（因为自由变量 &lt;code&gt;a&lt;/code&gt; 在错误的位置）：</target>
        </trans-unit>
        <trans-unit id="65daa9e4b1075dc22f97b5e99c95b67c30d85438" translate="yes" xml:space="preserve">
          <source>But note that doing this will cause all currently loaded modules to be unloaded, and you&amp;rsquo;ll be dumped back into the &lt;code&gt;Prelude&lt;/code&gt;.</source>
          <target state="translated">但是请注意，这样做将导致当前所有已加载的模块被卸载，并且您将被转回到 &lt;code&gt;Prelude&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="5f500af96a3dd31762b3cd040fbfe22ac1abfff8" translate="yes" xml:space="preserve">
          <source>But some more exotic characters are (like HTML's &lt;code&gt;&amp;amp;nbsp;&lt;/code&gt;):</source>
          <target state="translated">但是还有一些更奇特的字符（例如HTML的 &lt;code&gt;&amp;amp;nbsp;&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="7a9f84020f58d91882dbfc0db953fb2f507004d2" translate="yes" xml:space="preserve">
          <source>But sometimes you really do need to catch any exception, and actually see what the exception is. One example is at the very top-level of a program, you may wish to catch any exception, print it to a logfile or the screen, and then exit gracefully. For these cases, you can use &lt;code&gt;&lt;a href=&quot;control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; (or one of the other exception-catching functions) with the &lt;code&gt;&lt;a href=&quot;control-exception#t:SomeException&quot;&gt;SomeException&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">但是有时您确实确实需要捕获任何异常，并实际查看异常是什么。一个示例位于程序的最顶层，您可能希望捕获任何异常，将其打印到日志文件或屏幕，然后正常退出。对于这些情况，可以将 &lt;code&gt;&lt;a href=&quot;control-exception#v:catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; （或其他异常捕获功能之一）与 &lt;code&gt;&lt;a href=&quot;control-exception#t:SomeException&quot;&gt;SomeException&lt;/a&gt;&lt;/code&gt; 类型一起使用。</target>
        </trans-unit>
        <trans-unit id="8e72f01b86fcf7d8b9f975c29c3a1117f8ed8c6a" translate="yes" xml:space="preserve">
          <source>But superclass constraints like these are sometimes useful, and the conservative check is annoying where no actual recursion is involved.</source>
          <target state="translated">但是像这样的超类约束有时是有用的,在不涉及实际递归的情况下,保守的检查是很烦人的。</target>
        </trans-unit>
        <trans-unit id="73f40a957f0eafaef43b7412e6b7eae8ca1629e4" translate="yes" xml:space="preserve">
          <source>But suppose we made a slight adjustment to the order of the instance context, putting &lt;code&gt;E a&lt;/code&gt; before &lt;code&gt;D a&lt;/code&gt;:</source>
          <target state="translated">但是，假设我们对实例上下文的顺序进行了一些调整，将 &lt;code&gt;E a&lt;/code&gt; 放在 &lt;code&gt;D a&lt;/code&gt; 之前：</target>
        </trans-unit>
        <trans-unit id="cfea8bf40fe32a0b6ae6eb32e50457a3bbe00861" translate="yes" xml:space="preserve">
          <source>But the following are all &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">但是以下所有内容都是 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="7731812692d70803e0e0e350c8da86a84a0c20be" translate="yes" xml:space="preserve">
          <source>But the following are all &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7717e46be083515ecb72e392ec90c5060d7fc5a3" translate="yes" xml:space="preserve">
          <source>But the following should fail overall, since the first operation where we attempt to parse &lt;code&gt;'m'&lt;/code&gt; as an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; will fail:</source>
          <target state="translated">但是以下操作应该总体上失败，因为我们尝试将 &lt;code&gt;'m'&lt;/code&gt; 解析为 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 的第一个操作将失败：</target>
        </trans-unit>
        <trans-unit id="1a58bd6d5d0e7ba62e5be7b51f024f151d484faf" translate="yes" xml:space="preserve">
          <source>But the following should fail overall, since the first operation where we attempt to parse &lt;code&gt;'m'&lt;/code&gt; as an &lt;code&gt;&lt;a href=&quot;prelude#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; will fail:</source>
          <target state="translated">但是以下操作应该总体上失败，因为我们尝试将 &lt;code&gt;'m'&lt;/code&gt; 解析为 &lt;code&gt;&lt;a href=&quot;prelude#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 的第一个操作将失败：</target>
        </trans-unit>
        <trans-unit id="8f2d73619f8d796daeb72fd392f5ed8f12263a1e" translate="yes" xml:space="preserve">
          <source>But there is one exception: free variables mentioned in the outermost kind signature on the right hand side are quantified implicitly. Thus, in the following example the variables &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;k&lt;/code&gt; are all in scope on the right hand side of &lt;code&gt;S&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca875b680fdb97fc74f9300d7be351d9a268b49" translate="yes" xml:space="preserve">
          <source>But these are not:</source>
          <target state="translated">但这些都不是。</target>
        </trans-unit>
        <trans-unit id="032c3ace0e924d44f9ac3686950012f6f9c642b4" translate="yes" xml:space="preserve">
          <source>But when pattern matching on &lt;code&gt;Baz1&lt;/code&gt; the matched values can be compared for equality, and when pattern matching on &lt;code&gt;Baz2&lt;/code&gt; the first matched value can be converted to a string (as well as applying the function to it). So this program is legal:</source>
          <target state="translated">但是，当在 &lt;code&gt;Baz1&lt;/code&gt; 上进行模式匹配时，可以比较匹配的值是否相等，并且在 &lt;code&gt;Baz2&lt;/code&gt; 上进行模式匹配时，可以将第一个匹配值转换为字符串（以及将函数应用于该字符串）。所以这个程序是合法的：</target>
        </trans-unit>
        <trans-unit id="48b6f05d33c295f64d2c3b6836ca407ebef98238" translate="yes" xml:space="preserve">
          <source>By &amp;ldquo;Maybe&amp;rdquo; we mean that the usual heuristic inlining rules apply (if the function body is small, or it is applied to interesting-looking arguments etc). Another way to understand the semantics is this:</source>
          <target state="translated">所谓&amp;ldquo;也许&amp;rdquo;，是指通常的启发式内联规则适用（如果函数主体较小，或者适用于看起来有趣的参数等）。理解语义的另一种方式是：</target>
        </trans-unit>
        <trans-unit id="e5e954f010734bc63857acf7253cb96bcc09c253" translate="yes" xml:space="preserve">
          <source>By &amp;ldquo;ambiguous&amp;rdquo; we mean that there is a type variable &lt;code&gt;e&lt;/code&gt; that appears on the left of the &lt;code&gt;=&amp;gt;&lt;/code&gt; symbol, but not on the right. The problem with this is that, according to the theoretical foundations of Haskell overloading, we cannot guarantee a well-defined semantics for any term with an ambiguous type.</source>
          <target state="translated">&amp;ldquo;模棱两可&amp;rdquo;是指在 &lt;code&gt;=&amp;gt;&lt;/code&gt; 符号的左侧而不是右侧出现类型变量 &lt;code&gt;e&lt;/code&gt; 。问题是，根据Haskell重载的理论基础，我们不能保证任何含糊类型的术语都具有明确定义的语义。</target>
        </trans-unit>
        <trans-unit id="9f8fa066b62ce9de7834b32b1ffd79abe4903ede" translate="yes" xml:space="preserve">
          <source>By convention, overloaded functions have a non-overloaded counterpart whose name is suffixed with `&lt;code&gt;By&lt;/code&gt;'.</source>
          <target state="translated">按照惯例，重载函数具有一个未重载的对应函数，其名称后缀为' &lt;code&gt;By&lt;/code&gt; '。</target>
        </trans-unit>
        <trans-unit id="896bbb1ee06a6fe71b9beeaa9d18f1143bc8c3b4" translate="yes" xml:space="preserve">
          <source>By default (when &lt;a href=&quot;#ghc-flag--hide-all-packages&quot;&gt;&lt;code&gt;-hide-all-packages&lt;/code&gt;&lt;/a&gt; is not specified), GHC exposes only one version of a package, all other versions become hidden. If &lt;code&gt;-package&lt;/code&gt; option is specified multiple times for the same package the last one overrides the previous ones. On the other hand, if &lt;a href=&quot;#ghc-flag--hide-all-packages&quot;&gt;&lt;code&gt;-hide-all-packages&lt;/code&gt;&lt;/a&gt; is used, GHC allows you to expose multiple versions of a package by using the &lt;code&gt;-package&lt;/code&gt; option multiple times with different versions of the same package.</source>
          <target state="translated">缺省情况下（未指定&lt;a href=&quot;#ghc-flag--hide-all-packages&quot;&gt; &lt;code&gt;-hide-all-packages&lt;/code&gt; 时&lt;/a&gt;），GHC仅公开一个版本的软件包，所有其他版本均被隐藏。如果为同一软件包多次指定 &lt;code&gt;-package&lt;/code&gt; 选项，则最后一个将覆盖先前的软件包。另一方面，如果使用&lt;a href=&quot;#ghc-flag--hide-all-packages&quot;&gt; &lt;code&gt;-hide-all-packages&lt;/code&gt; &lt;/a&gt;，则GHC允许您通过对同一软件包的不同版本多次使用 &lt;code&gt;-package&lt;/code&gt; 选项来公开软件包的多个版本。</target>
        </trans-unit>
        <trans-unit id="c08f7a94109584e7aa0e6d79a4e77ce07a68fae9" translate="yes" xml:space="preserve">
          <source>By default Ctl-C will generate a &lt;code&gt;SIGINT&lt;/code&gt; signal, causing a &lt;code&gt;UserInterrupt&lt;/code&gt; exception to be sent to the main Haskell thread of your program, which if not specially handled will terminate the program. Normally, this is exactly what is wanted: an orderly shutdown of the program in response to Ctl-C.</source>
          <target state="translated">默认情况下，Ctl-C将生成 &lt;code&gt;SIGINT&lt;/code&gt; 信号，从而将 &lt;code&gt;UserInterrupt&lt;/code&gt; 异常发送到您程序的主Haskell线程，如果没有特别处理，它将终止程序。通常，这正是需要的：响应Ctl-C有序关闭程序。</target>
        </trans-unit>
        <trans-unit id="85da6991904e0f3fd3e4bbad20cbc4f4be16d997" translate="yes" xml:space="preserve">
          <source>By default GHC builds applications that open a console window when they start. If you want to build a GUI-only application, with no console window, use the flag &lt;code&gt;-optl-mwindows&lt;/code&gt; in the link step.</source>
          <target state="translated">默认情况下，GHC构建的应用程序在启动时会打开控制台窗口。如果要构建没有控制台窗口的 &lt;code&gt;-optl-mwindows&lt;/code&gt; GUI应用程序，请在链接步骤中使用-optl-mwindows标志。</target>
        </trans-unit>
        <trans-unit id="e8d919b56909f1bc95e959f98255a58354f13898" translate="yes" xml:space="preserve">
          <source>By default GHC will be very quiet about what it is doing, only printing error messages. If you want to see in more detail what&amp;rsquo;s going on behind the scenes, add &lt;a href=&quot;#ghc-flag--v&quot;&gt;&lt;code&gt;-v&lt;/code&gt;&lt;/a&gt; to the command line.</source>
          <target state="translated">默认情况下，GHC将对正在执行的操作保持安静，仅打印错误消息。如果您想更详细地了解幕后情况，请在命令行中添加&lt;a href=&quot;#ghc-flag--v&quot;&gt; &lt;code&gt;-v&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="188b3edf5485565e6e6ef6439aa7adfb9f3f40c8" translate="yes" xml:space="preserve">
          <source>By default only type class methods and methods marked &lt;code&gt;INLINABLE&lt;/code&gt; or &lt;code&gt;INLINE&lt;/code&gt; are specialised. This flag will specialise any overloaded function regardless of size if its unfolding is available. This flag is not included in any optimisation level as it can massively increase code size. It can be used in conjunction with &lt;a href=&quot;#ghc-flag--fexpose-all-unfoldings&quot;&gt;&lt;code&gt;-fexpose-all-unfoldings&lt;/code&gt;&lt;/a&gt; if you want to ensure all calls are specialised.</source>
          <target state="translated">默认情况下，仅专门处理类型类方法和标记为 &lt;code&gt;INLINABLE&lt;/code&gt; 或 &lt;code&gt;INLINE&lt;/code&gt; 的方法。如果可以展开，此标志将专用于任何重载函数，而不管其大小如何。此标志未包含在任何优化级别中，因为它会大大增加代码大小。如果要确保所有调用都专用，可以将它与&lt;a href=&quot;#ghc-flag--fexpose-all-unfoldings&quot;&gt; &lt;code&gt;-fexpose-all-unfoldings&lt;/code&gt; &lt;/a&gt;结合使用。</target>
        </trans-unit>
        <trans-unit id="624e8cce7ea7cdb4e472abd23a004063a0206d28" translate="yes" xml:space="preserve">
          <source>By default the valid hole fits are sorted to show the most relevant hole fits at the top of the list of valid hole fits. This can be toggled off with this flag.</source>
          <target state="translated">默认情况下,有效的孔配合是排序的,在有效孔配合列表的顶部显示最相关的孔配合。这个可以用这个标志来关闭。</target>
        </trans-unit>
        <trans-unit id="c1764f7c7473b983f83b4e96209c1fd4c0ad4af0" translate="yes" xml:space="preserve">
          <source>By default this module is set up to parse character data. If you'd like to parse the result of your own tokenizer you should start with the following imports:</source>
          <target state="translated">默认情况下,该模块被设置为解析字符数据。如果你想解析你自己的tokenizer的结果,你应该从下面的导入开始。</target>
        </trans-unit>
        <trans-unit id="0ce3ebf665bc95b496362425218966d039437681" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ghc -M&lt;/code&gt; generates all the dependencies, and then concatenates them onto the end of &lt;code&gt;makefile&lt;/code&gt; (or &lt;code&gt;Makefile&lt;/code&gt; if &lt;code&gt;makefile&lt;/code&gt; doesn&amp;rsquo;t exist) bracketed by the lines &amp;ldquo;&lt;code&gt;# DO NOT DELETE: Beginning of Haskell dependencies&lt;/code&gt;&amp;rdquo; and &amp;ldquo;&lt;code&gt;# DO NOT DELETE: End of Haskell dependencies&lt;/code&gt;&amp;rdquo;. If these lines already exist in the &lt;code&gt;makefile&lt;/code&gt;, then the old dependencies are deleted first.</source>
          <target state="translated">默认情况下， &lt;code&gt;ghc -M&lt;/code&gt; 生成所有依赖项，然后将它们连接到 &lt;code&gt;makefile&lt;/code&gt; 的末尾（如果 &lt;code&gt;makefile&lt;/code&gt; 不存在，则将其合并到 &lt;code&gt;Makefile&lt;/code&gt; 的末尾），并用&amp;ldquo; &lt;code&gt;# DO NOT DELETE: Beginning of Haskell dependencies&lt;/code&gt; &amp;rdquo;和&amp;ldquo; &lt;code&gt;# DO NOT DELETE: End of Haskell dependencies&lt;/code&gt; &amp;rdquo;。如果 &lt;code&gt;makefile&lt;/code&gt; 中已经存在这些行，则首先删除旧的依赖项。</target>
        </trans-unit>
        <trans-unit id="a1836101dccd7400532d625ffcce0904ab5ebfa5" translate="yes" xml:space="preserve">
          <source>By default, GHC (as the Haskell 2010 standard prescribes) parses identifiers starting with an underscore in a type as type variables. To treat them as named wildcards, the &lt;a href=&quot;#extension-NamedWildCards&quot;&gt;&lt;code&gt;NamedWildCards&lt;/code&gt;&lt;/a&gt; extension should be enabled. The example below demonstrated the effect.</source>
          <target state="translated">默认情况下，GHC（按Haskell 2010标准的规定）将以下划线开头的标识符解析为类型变量。要将它们视为命名通配符，应启用&lt;a href=&quot;#extension-NamedWildCards&quot;&gt; &lt;code&gt;NamedWildCards&lt;/code&gt; &lt;/a&gt;扩展。下面的示例演示了效果。</target>
        </trans-unit>
        <trans-unit id="12df8ed1e15edda69c0c572579814ea973c3f99c" translate="yes" xml:space="preserve">
          <source>By default, GHC mainly aims to behave (mostly) like a Haskell 2010 compiler, although you can tell it to try to behave like a particular version of the language with the &lt;a href=&quot;glasgow_exts#extension-Haskell98&quot;&gt;&lt;code&gt;Haskell98&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;glasgow_exts#extension-Haskell2010&quot;&gt;&lt;code&gt;Haskell2010&lt;/code&gt;&lt;/a&gt; flags. The known deviations from the standards are described below. Unless otherwise stated, the deviation applies in Haskell 98, Haskell 2010 and the default modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9abdae9b40906f9cfda31d516ba3c096c45e1e1a" translate="yes" xml:space="preserve">
          <source>By default, GHC mainly aims to behave (mostly) like a Haskell 2010 compiler, although you can tell it to try to behave like a particular version of the language with the &lt;code&gt;-XHaskell98&lt;/code&gt; and &lt;code&gt;-XHaskell2010&lt;/code&gt; flags. The known deviations from the standards are described below. Unless otherwise stated, the deviation applies in Haskell 98, Haskell 2010 and the default modes.</source>
          <target state="translated">默认情况下，GHC的主要目的是（基本上）像Haskell 2010编译器那样运行，尽管您可以使用 &lt;code&gt;-XHaskell98&lt;/code&gt; 和 &lt;code&gt;-XHaskell2010&lt;/code&gt; 标志让它尝试像特定版本的语言一样运行。与标准的已知偏差如下所述。除非另有说明，否则该偏差适用于Haskell 98，Haskell 2010和默认模式。</target>
        </trans-unit>
        <trans-unit id="ec779fb59a0c807c306278944368725099b24555" translate="yes" xml:space="preserve">
          <source>By default, GHC will automatically link in the &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;rts&lt;/code&gt; packages. This flag disables that behaviour.</source>
          <target state="translated">默认情况下，GHC将自动链接 &lt;code&gt;base&lt;/code&gt; 和 &lt;code&gt;rts&lt;/code&gt; 软件包。此标志禁用该行为。</target>
        </trans-unit>
        <trans-unit id="df55ad44f83f85e9c4e4f4d6d779d38193eb5c3e" translate="yes" xml:space="preserve">
          <source>By default, GHCi compiles Haskell source code into byte-code that is interpreted by the runtime system. GHCi can also compile Haskell code to object code: to turn on this feature, use the &lt;a href=&quot;phases#ghc-flag--fobject-code&quot;&gt;&lt;code&gt;-fobject-code&lt;/code&gt;&lt;/a&gt; flag either on the command line or with &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt; (the option &lt;a href=&quot;phases#ghc-flag--fbyte-code&quot;&gt;&lt;code&gt;-fbyte-code&lt;/code&gt;&lt;/a&gt; restores byte-code compilation again). Compiling to object code takes longer, but typically the code will execute 10-20 times faster than byte-code.</source>
          <target state="translated">默认情况下，GHCi将Haskell源代码编译为运行时系统解释的字节码。GHCi也可以将Haskell代码编译为目标代码：要启用此功能，请在命令行上或通过&lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; &lt;/a&gt;使用&lt;a href=&quot;phases#ghc-flag--fobject-code&quot;&gt; &lt;code&gt;-fobject-code&lt;/code&gt; &lt;/a&gt;标志（选项&lt;a href=&quot;phases#ghc-flag--fbyte-code&quot;&gt; &lt;code&gt;-fbyte-code&lt;/code&gt; 可&lt;/a&gt;再次恢复字节码编译）。编译为目标代码需要更长的时间，但是通常，该代码的执行速度比字节码快10到20倍。</target>
        </trans-unit>
        <trans-unit id="5e88504b814b1fec26bf7b42a2f12aaadb66f2cc" translate="yes" xml:space="preserve">
          <source>By default, GHCi keeps global history in &lt;code&gt;~/.ghc/ghci_history&lt;/code&gt; or &lt;code&gt;%APPDATA%/&amp;lt;app&amp;gt;/ghci_history&lt;/code&gt;, but you can use current directory, e.g.:</source>
          <target state="translated">默认情况下，GHCi将全局历史记录保留在 &lt;code&gt;~/.ghc/ghci_history&lt;/code&gt; 或 &lt;code&gt;%APPDATA%/&amp;lt;app&amp;gt;/ghci_history&lt;/code&gt; 中，但是您可以使用当前目录，例如：</target>
        </trans-unit>
        <trans-unit id="fdbafe643d46838671b1a066fee2f9329338669e" translate="yes" xml:space="preserve">
          <source>By default, all exposed packages in the normal, source import namespace are also available for plugins. This causes those packages to be hidden by default. If you use this flag, then any packages with plugins you require need to be explicitly exposed using &lt;a href=&quot;#ghc-flag--plugin-package%20%E2%9F%A8pkg%E2%9F%A9&quot;&gt;&lt;code&gt;-plugin-package ⟨pkg⟩&lt;/code&gt;&lt;/a&gt; options.</source>
          <target state="translated">默认情况下，正常的源导入名称空间中的所有公开包也可用于插件。这将导致这些包在默认情况下被隐藏。如果使用此标志，则需要使用&lt;a href=&quot;#ghc-flag--plugin-package%20%E2%9F%A8pkg%E2%9F%A9&quot;&gt; &lt;code&gt;-plugin-package ⟨pkg⟩&lt;/code&gt; &lt;/a&gt;选项显式公开所需的所有带有插件的软件包。</target>
        </trans-unit>
        <trans-unit id="46539ad051a890125fb96d050b762a5dd85eaf9d" translate="yes" xml:space="preserve">
          <source>By default, all of the capabilities participate in parallel garbage collection. If we want to use a very large &lt;code&gt;-N&lt;/code&gt; value, however, this can reduce the performance of the GC. For this reason, the &lt;code&gt;-qn&lt;/code&gt; flag can be used to specify a lower number for the threads that should participate in GC. During GC, if there are more than this number of workers active, some of them will sleep for the duration of the GC.</source>
          <target state="translated">默认情况下，所有功能都参与并行垃圾回收。但是，如果我们要使用非常大的 &lt;code&gt;-N&lt;/code&gt; 值，则会降低GC的性能。因此，可以使用 &lt;code&gt;-qn&lt;/code&gt; 标志为应该参与GC的线程指定一个较小的数字。在GC期间，如果活动的工人数量超过此数目，则其中一些工人将在GC期间休眠。</target>
        </trans-unit>
        <trans-unit id="dff65f59491f27c9a1b1f59bb08671c0847e3677" translate="yes" xml:space="preserve">
          <source>By default, each hole fit shows the provenance information of its hole fit, i.e. where it was bound or defined, and what module it was originally defined in if it was imported. This can be toggled off using the reverse of this flag.</source>
          <target state="translated">默认情况下,每个孔配合都会显示其孔配合的出处信息,即它是在哪里绑定或定义的,如果是导入的,它最初是在哪个模块中定义的。这可以使用这个标志的反面来切换关闭。</target>
        </trans-unit>
        <trans-unit id="40b07e5a3f0d5d2adc75edc52198eb4a7127369d" translate="yes" xml:space="preserve">
          <source>By default, if idle GC is enabled in the threaded runtime, a major GC will be performed every time the process goes idle for a sufficiently long duration (see &lt;a href=&quot;#rts-flag--I%20%E2%9F%A8seconds%E2%9F%A9&quot;&gt;&lt;code&gt;-I ⟨seconds⟩&lt;/code&gt;&lt;/a&gt;). For large server processes accepting regular but infrequent requests (e.g., once per second), an expensive, major GC may run after every request. As an alternative to shutting off idle GC entirely (with &lt;code&gt;-I0&lt;/code&gt;), a minimum wait time between idle GCs can be specified with this flag. For example, &lt;code&gt;-Iw60&lt;/code&gt; will ensure that an idle GC runs at most once per minute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e1d7b164983ad889522ed53190607d61c4610f" translate="yes" xml:space="preserve">
          <source>By default, modules compiled with plugins are always recompiled even if the source file is unchanged. This most conservative option is taken due to the ability of plugins to perform arbitrary IO actions. In order to control the recompilation behaviour you can modify the &lt;code&gt;pluginRecompile&lt;/code&gt; field in &lt;code&gt;Plugin&lt;/code&gt;.</source>
          <target state="translated">默认情况下，即使源文件未更改，也始终会重新编译使用插件编译的模块。由于插件具有执行任意IO操作的能力，因此采用了这种最保守的选项。为了控制重新编译行为，您可以修改 &lt;code&gt;Plugin&lt;/code&gt; 中的 &lt;code&gt;pluginRecompile&lt;/code&gt; 字段。</target>
        </trans-unit>
        <trans-unit id="eb82d4dffabcd57e78239ea2df207ce6d76727da" translate="yes" xml:space="preserve">
          <source>By default, the compiler will warn you if a set of patterns are overlapping, e.g.,</source>
          <target state="translated">默认情况下,如果一组模式重叠,编译器会警告你,例如。</target>
        </trans-unit>
        <trans-unit id="069c263ac2190411cc9526082fc8f4fd76502131" translate="yes" xml:space="preserve">
          <source>By default, the compiler will warn you if types make a branch inaccessible. This generally requires GADTs or similar extensions.</source>
          <target state="translated">默认情况下,如果类型使一个分支无法访问,编译器会警告你。这通常需要GADTs或类似的扩展。</target>
        </trans-unit>
        <trans-unit id="42ececaa43e2537fc3e254dd2078e6ca5e31deaf" translate="yes" xml:space="preserve">
          <source>By default, the entry points of all the object files will be exported from the DLL when using &lt;code&gt;-shared&lt;/code&gt;. Should you want to constrain this, you can specify the &lt;em&gt;module definition file&lt;/em&gt; to use on the command line as follows:</source>
          <target state="translated">默认情况下，使用 &lt;code&gt;-shared&lt;/code&gt; 时，将从DLL中导出所有目标文件的入口点。如果要对此进行限制，可以按如下所示在命令行上指定要使用的&lt;em&gt;模块定义文件&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="8cda497389193e1649e303cab4fabec282743541" translate="yes" xml:space="preserve">
          <source>By default, the flag will cause a warning to be emitted to stderr when the sync time exceeds the specified time. This behaviour can be overridden, however: the &lt;code&gt;longGCSync()&lt;/code&gt; hook is called when the sync time is exceeded during the sync period, and the &lt;code&gt;longGCSyncEnd()&lt;/code&gt; hook at the end. Both of these hooks can be overridden in the &lt;code&gt;RtsConfig&lt;/code&gt; when the runtime is started with &lt;code&gt;hs_init_ghc()&lt;/code&gt;. The default implementations of these hooks (&lt;code&gt;LongGcSync()&lt;/code&gt; and &lt;code&gt;LongGCSyncEnd()&lt;/code&gt; respectively) print warnings to stderr.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe9a2f0fe153f620abcfa8682464add226d1fdb" translate="yes" xml:space="preserve">
          <source>By default, the flag will cause a warning to be emitted to stderr when the sync time exceeds the specified time. This behaviour can be overriden, however: the &lt;code&gt;longGCSync()&lt;/code&gt; hook is called when the sync time is exceeded during the sync period, and the &lt;code&gt;longGCSyncEnd()&lt;/code&gt; hook at the end. Both of these hooks can be overriden in the &lt;code&gt;RtsConfig&lt;/code&gt; when the runtime is started with &lt;code&gt;hs_init_ghc()&lt;/code&gt;. The default implementations of these hooks (&lt;code&gt;LongGcSync()&lt;/code&gt; and &lt;code&gt;LongGCSyncEnd()&lt;/code&gt; respectively) print warnings to stderr.</source>
          <target state="translated">默认情况下，当同步时间超过指定时间时，该标志将导致向stderr发出警告。此行为可以被覆盖，但是：在 &lt;code&gt;longGCSync()&lt;/code&gt; 在同步期间超过同步时间时钩被调用，并且 &lt;code&gt;longGCSyncEnd()&lt;/code&gt; 在端钩。使用 &lt;code&gt;hs_init_ghc()&lt;/code&gt; 启动运行 &lt;code&gt;RtsConfig&lt;/code&gt; ，可以在RtsConfig中覆盖这两个钩子。这些钩子的默认实现 &lt;code&gt;LongGCSyncEnd()&lt;/code&gt; 分别为 &lt;code&gt;LongGcSync()&lt;/code&gt; 和LongGCSyncEnd（））向stderr打印警告。</target>
        </trans-unit>
        <trans-unit id="7ddee701400360fbf24135d74284e1d2f92e56f8" translate="yes" xml:space="preserve">
          <source>By default, the hole fits show the type application needed to make this hole fit fit the type of the hole, e.g. for the hole &lt;code&gt;(_ :: Int -&amp;gt; [Int])&lt;/code&gt;, &lt;code&gt;mempty :: Monoid a =&amp;gt; a&lt;/code&gt; is a hole fit with &lt;code&gt;mempty @(Int -&amp;gt; [Int])&lt;/code&gt;. This flag toggles whether to show &lt;code&gt;a ~ (Int -&amp;gt; [Int])&lt;/code&gt; instead of &lt;code&gt;mempty @(Int -&amp;gt; [Int])&lt;/code&gt; in the where clause of the valid hole fit message.</source>
          <target state="translated">默认情况下，孔配合显示使该孔适合孔的类型所需的类型应用程序，例如，对于孔 &lt;code&gt;(_ :: Int -&amp;gt; [Int])&lt;/code&gt; &lt;code&gt;mempty :: Monoid a =&amp;gt; a&lt;/code&gt; &amp;gt; [Int]），mempty :: Monoid a =&amp;gt; a是一个孔适合 &lt;code&gt;mempty @(Int -&amp;gt; [Int])&lt;/code&gt; 。此标志切换是否在有效的孔拟合消息的where子句中显示 &lt;code&gt;a ~ (Int -&amp;gt; [Int])&lt;/code&gt; &lt;code&gt;mempty @(Int -&amp;gt; [Int])&lt;/code&gt; &amp;gt; [Int]）而不是mempty @（Int-&amp;gt; [Int]）。</target>
        </trans-unit>
        <trans-unit id="d54e2c2c7ff09cca548a7181b38ba4eb543ff3ab" translate="yes" xml:space="preserve">
          <source>By default, the hole fits show the type application needed to make this hole fit fit the type of the hole, e.g. for the hole &lt;code&gt;(_ :: Int -&amp;gt; [Int])&lt;/code&gt;, &lt;code&gt;mempty&lt;/code&gt; is a hole fit with &lt;code&gt;mempty @(Int -&amp;gt; [Int])&lt;/code&gt;. This can be toggled off with the reverse of this flag.</source>
          <target state="translated">默认情况下，孔配合显示使该孔适合孔的类型所需的类型应用程序，例如，对于孔 &lt;code&gt;(_ :: Int -&amp;gt; [Int])&lt;/code&gt; &lt;code&gt;mempty&lt;/code&gt; &amp;gt; [Int]），mempty是带有 &lt;code&gt;mempty @(Int -&amp;gt; [Int])&lt;/code&gt; 。可以通过此标志的相反方向将其关闭。</target>
        </trans-unit>
        <trans-unit id="35d5a2ec055ae5d603afdd7b0fe5afae1fc6be21" translate="yes" xml:space="preserve">
          <source>By default, the hole fits show the type of the hole fit. This can be turned off by the reverse of this flag.</source>
          <target state="translated">默认情况下,孔配合显示孔配合的类型。這可以通過這個標誌的反面來關閉。</target>
        </trans-unit>
        <trans-unit id="5f832c954f21105383f315f5795a3f1e4b92e9c8" translate="yes" xml:space="preserve">
          <source>By default, the type-checker will report an error message for each hole in a partial type signature, informing the programmer of the inferred type. When the &lt;a href=&quot;#extension-PartialTypeSignatures&quot;&gt;&lt;code&gt;PartialTypeSignatures&lt;/code&gt;&lt;/a&gt; extension is enabled, the type-checker will accept the inferred type for each hole, generating warnings instead of errors. Additionally, these warnings can be silenced with the &lt;a href=&quot;using-warnings#ghc-flag--Wpartial-type-signatures&quot;&gt;&lt;code&gt;-Wno-partial-type-signatures&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">默认情况下，类型检查器将报告部分类型签名中每个孔的错误消息，以将推断出的类型通知程序员。当&lt;a href=&quot;#extension-PartialTypeSignatures&quot;&gt; &lt;code&gt;PartialTypeSignatures&lt;/code&gt; &lt;/a&gt;启用扩展，类型检查器将接受该推断出的类型对于每个孔，生成警告，而不是错误。此外，可以使用&lt;a href=&quot;using-warnings#ghc-flag--Wpartial-type-signatures&quot;&gt; &lt;code&gt;-Wno-partial-type-signatures&lt;/code&gt; &lt;/a&gt;标志使这些警告静音。</target>
        </trans-unit>
        <trans-unit id="bbc06aef5e5a39593988fb4a13a30427cfe33d3b" translate="yes" xml:space="preserve">
          <source>By default, when a module is compiled with plugins, it will be marked as unsafe. With this flag passed, all plugins are treated as trustworthy and the safety inference will no longer be affected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174e61791c2af8c07db7989b5f30fdc0a9f3888b" translate="yes" xml:space="preserve">
          <source>By default, you get a standard set of warnings which are generally likely to indicate bugs in your program. These are:</source>
          <target state="translated">默认情况下,你会得到一组标准的警告,这些警告通常可能表明你的程序有错误。这些警告是:</target>
        </trans-unit>
        <trans-unit id="46283cfe9b92cf9ced3d37e5a425538fb2879a38" translate="yes" xml:space="preserve">
          <source>By feeding the ghc compiler driver the option &lt;code&gt;-shared&lt;/code&gt;, it will build a DLL rather than produce an executable. The DLL will consist of all the object files and archives given on the command line.</source>
          <target state="translated">通过为ghc编译器驱动程序提供 &lt;code&gt;-shared&lt;/code&gt; 选项，它将构建DLL而不是生成可执行文件。DLL将包含命令行上给定的所有目标文件和归档。</target>
        </trans-unit>
        <trans-unit id="8504674d3abb04bdd53121c5e1c8cc5547351f38" translate="yes" xml:space="preserve">
          <source>By including dependencies in a class declaration, we provide a mechanism for the programmer to specify each multiple parameter class more precisely. The compiler, on the other hand, is responsible for ensuring that the set of instances that are in scope at any given point in the program is consistent with any declared dependencies. For example, the following pair of instance declarations cannot appear together in the same scope because they violate the dependency for &lt;code&gt;D&lt;/code&gt;, even though either one on its own would be acceptable:</source>
          <target state="translated">通过在类声明中包含依赖项，我们为程序员提供了一种机制，可以更精确地指定每个多参数类。另一方面，编译器负责确保在程序中任何给定点范围内的实例集与任何声明的依赖项一致。例如，以下一对实例声明不能一起出现在同一作用域中，因为它们违反了对 &lt;code&gt;D&lt;/code&gt; 的依赖关系，即使它们中的任何一个都可以接受：</target>
        </trans-unit>
        <trans-unit id="a31672cadecf688e7c40679abceb4f7169dc8697" translate="yes" xml:space="preserve">
          <source>By inspecting the example &lt;code&gt;plugin&lt;/code&gt; defined above, we can see that it is pure. This means that if the two modules have the same fingerprint then the plugin will always return the same result. Declaring a plugin as pure means that the plugin will never cause a module to be recompiled.</source>
          <target state="translated">通过检查上面定义的示例 &lt;code&gt;plugin&lt;/code&gt; ，我们可以看到它是纯净的。这意味着，如果两个模块具有相同的指纹，则插件将始终返回相同的结果。将插件声明为纯插件意味着该插件将永远不会导致模块重新编译。</target>
        </trans-unit>
        <trans-unit id="85fd7daebedfdd6804e24888c9b0949a47ff5308" translate="yes" xml:space="preserve">
          <source>By making this a member of the class, idempotent semigroups and monoids can upgrade this to execute in O(1) by picking &lt;code&gt;stimes = &lt;a href=&quot;data-semigroup#v:stimesIdempotent&quot;&gt;stimesIdempotent&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;stimes =
 &lt;a href=&quot;data-semigroup#v:stimesIdempotentMonoid&quot;&gt;stimesIdempotentMonoid&lt;/a&gt;&lt;/code&gt; respectively.</source>
          <target state="translated">通过使其成为该类的成员，幂等半群和 &lt;code&gt;stimes = &lt;a href=&quot;data-semigroup#v:stimesIdempotentMonoid&quot;&gt;stimesIdempotentMonoid&lt;/a&gt;&lt;/code&gt; 分别通过选择 &lt;code&gt;stimes = &lt;a href=&quot;data-semigroup#v:stimesIdempotent&quot;&gt;stimesIdempotent&lt;/a&gt;&lt;/code&gt; 或stimes = stimesIdempotentMonoid将其升级为在O（1）中执行。</target>
        </trans-unit>
        <trans-unit id="60b0706ea95c7ca522f1b094a7d6011fac8bf09b" translate="yes" xml:space="preserve">
          <source>By overriding the &lt;code&gt;renamedResultAction&lt;/code&gt; field we can modify each &lt;code&gt;HsGroup&lt;/code&gt; after it has been renamed. A source file is separated into groups depending on the location of template haskell splices so the contents of these groups may not be intuitive. In order to save the entire renamed AST for inspection at the end of typechecking you can set &lt;code&gt;renamedResultAction&lt;/code&gt; to &lt;code&gt;keepRenamedSource&lt;/code&gt; which is provided by the &lt;code&gt;Plugins&lt;/code&gt; module. This is important because some parts of the renamed syntax tree (for example, imports) are not found in the typechecked one.</source>
          <target state="translated">通过覆盖重 &lt;code&gt;renamedResultAction&lt;/code&gt; 字段，我们可以在每个 &lt;code&gt;HsGroup&lt;/code&gt; 重命名后对其进行修改。根据模板haskell接头的位置，源文件分为几组，因此这些组的内容可能不直观。为了节省检查整个重命名AST的类型检查，您可以设置结束 &lt;code&gt;renamedResultAction&lt;/code&gt; 到 &lt;code&gt;keepRenamedSource&lt;/code&gt; 这是由提供 &lt;code&gt;Plugins&lt;/code&gt; 模块。这很重要，因为在类型检查的树中找不到重命名的语法树的某些部分（例如，导入）。</target>
        </trans-unit>
        <trans-unit id="96c953756e6001b89332797e663898838e62a7c0" translate="yes" xml:space="preserve">
          <source>By replacing &lt;code&gt;Str.hs&lt;/code&gt; with a signature &lt;code&gt;Str.hsig&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt; (and any other modules in this package) are now parametrized by a string implementation:</source>
          <target state="translated">通过更换 &lt;code&gt;Str.hs&lt;/code&gt; 与签名 &lt;code&gt;Str.hsig&lt;/code&gt; ， &lt;code&gt;A&lt;/code&gt; （并且在此包中的任何其它模块）现在由一个字符串实现参数化：</target>
        </trans-unit>
        <trans-unit id="bd2c213b8e4781cce6dcf36530ac2526d2c7bb34" translate="yes" xml:space="preserve">
          <source>By using them, you are telling GHC that you are willing to suffer longer compilation times for better-quality code.</source>
          <target state="translated">通过使用它们,你告诉GHC,你愿意为了更好的代码质量而忍受更长的编译时间。</target>
        </trans-unit>
        <trans-unit id="fc6baee463471fde1ecec97642f1d1ca74590180" translate="yes" xml:space="preserve">
          <source>Byte ordering.</source>
          <target state="translated">字节排序。</target>
        </trans-unit>
        <trans-unit id="a2e0dbd8b1ab09bde4319780f72a4d81435a048c" translate="yes" xml:space="preserve">
          <source>Byte swapping</source>
          <target state="translated">字节交换</target>
        </trans-unit>
        <trans-unit id="67ce106b074a2dd010e2ed6cebb15426f65787d3" translate="yes" xml:space="preserve">
          <source>ByteArray#</source>
          <target state="translated">ByteArray#</target>
        </trans-unit>
        <trans-unit id="b2ba0861bb06ea1a63c71749689a7beb9ea6b729" translate="yes" xml:space="preserve">
          <source>ByteCount</source>
          <target state="translated">ByteCount</target>
        </trans-unit>
        <trans-unit id="53bc4f0faf53dfa905efcd2b3b1d6b5236b29f9b" translate="yes" xml:space="preserve">
          <source>ByteOffset</source>
          <target state="translated">ByteOffset</target>
        </trans-unit>
        <trans-unit id="8a45cdc61d443f1d99e6a8e08a1a5cac63e13810" translate="yes" xml:space="preserve">
          <source>ByteOrder</source>
          <target state="translated">ByteOrder</target>
        </trans-unit>
        <trans-unit id="c237250b1379824c1dbf827faf23519fe09b6f29" translate="yes" xml:space="preserve">
          <source>ByteString</source>
          <target state="translated">ByteString</target>
        </trans-unit>
        <trans-unit id="f4fdba4ce7955a359ebc54c3d8b75dced1a5bcb3" translate="yes" xml:space="preserve">
          <source>ByteString I/O uses binary mode, without any character decoding or newline conversion. The fact that it does not respect the Handle newline mode is considered a flaw and may be changed in a future version.</source>
          <target state="translated">ByteString I/O使用二进制模式,没有任何字符解码或换行转换。它不尊重Handle换行模式的事实被认为是一个缺陷,可能会在未来的版本中被修改。</target>
        </trans-unit>
        <trans-unit id="141ecf8c9b6b748576d6f030e689b5ac01081c26" translate="yes" xml:space="preserve">
          <source>ByteStrings</source>
          <target state="translated">ByteStrings</target>
        </trans-unit>
        <trans-unit id="32096c2e0eff33d844ee6d675407ace18289357d" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="translated">C</target>
        </trans-unit>
        <trans-unit id="f8cd96f16d9102cf1ed4d9be9ee1b34e6dca04ee" translate="yes" xml:space="preserve">
          <source>C compiler (opt.)</source>
          <target state="translated">C语言编译器</target>
        </trans-unit>
        <trans-unit id="f4f28ebdbc8eb0a109bc7de54e138a24cbdfbe50" translate="yes" xml:space="preserve">
          <source>C file</source>
          <target state="translated">C档</target>
        </trans-unit>
        <trans-unit id="8db42ba5780c0869ea2cc63ca7f695f38e31b373" translate="yes" xml:space="preserve">
          <source>C functions are normally declared using prototypes in a C header file. Earlier versions of GHC (6.8.3 and earlier) &lt;code&gt;#include&lt;/code&gt;d the header file in the C source file generated from the Haskell code, and the C compiler could therefore check that the C function being called via the FFI was being called at the right type.</source>
          <target state="translated">通常使用C头文件中的原型声明C函数。GHC的早期版本（6.8.3和更早版本） &lt;code&gt;#include&lt;/code&gt; 头文件在从Haskell代码生成的C源文件中，因此C编译器可以检查通过FFI调用的C函数是否在右侧被调用类型。</target>
        </trans-unit>
        <trans-unit id="f30e8dc9993cbcb352b6de3b6f306c76123830fc" translate="yes" xml:space="preserve">
          <source>C header</source>
          <target state="translated">C头</target>
        </trans-unit>
        <trans-unit id="e0a32b6cde92a02c4d0079b04d003ea26b8c8425" translate="yes" xml:space="preserve">
          <source>C pre-processor (opt.)</source>
          <target state="translated">C语言预处理器(选择)</target>
        </trans-unit>
        <trans-unit id="05da97e8f671dc8e81bb497ab7d0b559bb48f35f" translate="yes" xml:space="preserve">
          <source>C strings</source>
          <target state="translated">C字串</target>
        </trans-unit>
        <trans-unit id="a19e3f51c16c6cf9751d0517111b9e9046598db1" translate="yes" xml:space="preserve">
          <source>C strings with a configurable encoding</source>
          <target state="translated">可配置编码的 C 字符串</target>
        </trans-unit>
        <trans-unit id="2a2bdbc5a70792af2d724997593731718b21fae4" translate="yes" xml:space="preserve">
          <source>C wide strings</source>
          <target state="translated">C宽弦</target>
        </trans-unit>
        <trans-unit id="9389a51d4da82d4389a58627b6e1618412013bd7" translate="yes" xml:space="preserve">
          <source>C&amp;rsquo;s command-line flags say to trust &lt;code&gt;P&lt;/code&gt; regardless of what is recorded in the package database.</source>
          <target state="translated">C的命令行标志表示信任 &lt;code&gt;P&lt;/code&gt; ,无论软件包数据库中记录了什么。</target>
        </trans-unit>
        <trans-unit id="be8c54d411949b31b40add83f394cd96144642ba" translate="yes" xml:space="preserve">
          <source>C&amp;rsquo;s package database records that &lt;code&gt;P&lt;/code&gt; is trusted (and no command-line arguments override this)</source>
          <target state="translated">C的程序包数据库记录 &lt;code&gt;P&lt;/code&gt; 是受信任的（并且没有命令行参数会覆盖此参数）</target>
        </trans-unit>
        <trans-unit id="fc2b4216164cfb01ac45112054b3fedda8b56c86" translate="yes" xml:space="preserve">
          <source>C++</source>
          <target state="translated">C++</target>
        </trans-unit>
        <trans-unit id="2db6df68dc5acc80ecf8fc1e995baa397dbbfd10" translate="yes" xml:space="preserve">
          <source>C-- representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c91c2588a480fcaf1c89f77c993a5b28cde7c85" translate="yes" xml:space="preserve">
          <source>C-\- pass sanity checking</source>
          <target state="translated">C------------------通过安全检查</target>
        </trans-unit>
        <trans-unit id="53224a3fe23d089d17e25bc63ef74d76f7140e70" translate="yes" xml:space="preserve">
          <source>C-\- representation</source>
          <target state="translated">C-/-代表</target>
        </trans-unit>
        <trans-unit id="31a8186414085b899b97c056b647bb5d6f3812d1" translate="yes" xml:space="preserve">
          <source>C-specific Marshalling support: Handling of C &quot;errno&quot; error codes.</source>
          <target state="translated">支持C语言特有的Marshalling。处理C语言 &quot;errno &quot;错误代码。</target>
        </trans-unit>
        <trans-unit id="28c27031fe7162d732a1c2e209a40bbfcb5fef90" translate="yes" xml:space="preserve">
          <source>C1</source>
          <target state="translated">C1</target>
        </trans-unit>
        <trans-unit id="6c0a03c4460fb3c0c00906dce789ea44d2c84225" translate="yes" xml:space="preserve">
          <source>CAF representing the value &lt;code&gt;0 :: BigNat&lt;/code&gt;</source>
          <target state="translated">CAF代表值 &lt;code&gt;0 :: BigNat&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d21200844f499d2358206dede07cd8324f4fd8d" translate="yes" xml:space="preserve">
          <source>CAF representing the value &lt;code&gt;1 :: BigNat&lt;/code&gt;</source>
          <target state="translated">代表值 &lt;code&gt;1 :: BigNat&lt;/code&gt; CAF :: BigNat</target>
        </trans-unit>
        <trans-unit id="3398da44f9b46eb47c2133df1dbc8f8ae4577ac5" translate="yes" xml:space="preserve">
          <source>CApi</source>
          <target state="translated">CApi</target>
        </trans-unit>
        <trans-unit id="121fd037efff290f65a5321e272862e0f357c01b" translate="yes" xml:space="preserve">
          <source>CApiFFI</source>
          <target state="translated">CApiFFI</target>
        </trans-unit>
        <trans-unit id="14db2db50b91a19fe259904927c84450dabfbabc" translate="yes" xml:space="preserve">
          <source>CBlkCnt</source>
          <target state="translated">CBlkCnt</target>
        </trans-unit>
        <trans-unit id="d700620d461bc690688d590b78ff1f6451076bc9" translate="yes" xml:space="preserve">
          <source>CBlkSize</source>
          <target state="translated">CBlkSize</target>
        </trans-unit>
        <trans-unit id="b7c2df6676202033e6f4b96ba59aff64b6a29f29" translate="yes" xml:space="preserve">
          <source>CBool</source>
          <target state="translated">CBool</target>
        </trans-unit>
        <trans-unit id="c5a976de7b5231fa616fbeac8a2d2805c1e84ee2" translate="yes" xml:space="preserve">
          <source>CC</source>
          <target state="translated">CC</target>
        </trans-unit>
        <trans-unit id="893cefd4dd78167c7a5a4ac0d06beb7f83dd928c" translate="yes" xml:space="preserve">
          <source>CCFlags</source>
          <target state="translated">CCFlags</target>
        </trans-unit>
        <trans-unit id="6042f4ccd2b35f8dec9caec98fc66b65acdc25f3" translate="yes" xml:space="preserve">
          <source>CCall</source>
          <target state="translated">CCall</target>
        </trans-unit>
        <trans-unit id="66f04a168f55eebf1080c6abb4c6b95b7048c658" translate="yes" xml:space="preserve">
          <source>CCc</source>
          <target state="translated">CCc</target>
        </trans-unit>
        <trans-unit id="0eaec9bae149e37a5ce9a0a7cb18d3a0521a4365" translate="yes" xml:space="preserve">
          <source>CChar</source>
          <target state="translated">CChar</target>
        </trans-unit>
        <trans-unit id="b922d01dfb7fbf4c7d572d9c0a302d24875c9465" translate="yes" xml:space="preserve">
          <source>CClock</source>
          <target state="translated">CClock</target>
        </trans-unit>
        <trans-unit id="00ffad0ad9d13dcd921b4ce8556a4127a2a6d9dd" translate="yes" xml:space="preserve">
          <source>CClockId</source>
          <target state="translated">CClockId</target>
        </trans-unit>
        <trans-unit id="058ca29cc6039cd32a619c31a884582dd9b365d7" translate="yes" xml:space="preserve">
          <source>CDev</source>
          <target state="translated">CDev</target>
        </trans-unit>
        <trans-unit id="a33f47bafc89a737517d547138493e904caede4a" translate="yes" xml:space="preserve">
          <source>CDouble</source>
          <target state="translated">CDouble</target>
        </trans-unit>
        <trans-unit id="a13df1b410bce84da0245d90f1b68f47e714bb5d" translate="yes" xml:space="preserve">
          <source>CFile</source>
          <target state="translated">CFile</target>
        </trans-unit>
        <trans-unit id="7207a00980deab52aac4c426e769595a330ba71f" translate="yes" xml:space="preserve">
          <source>CFloat</source>
          <target state="translated">CFloat</target>
        </trans-unit>
        <trans-unit id="f87722cf9f18251ddb2f5f220f7d782de8cb027d" translate="yes" xml:space="preserve">
          <source>CFpos</source>
          <target state="translated">CFpos</target>
        </trans-unit>
        <trans-unit id="3245250fcffb641fa52b5fc6b60ab78d806ce5a2" translate="yes" xml:space="preserve">
          <source>CFsBlkCnt</source>
          <target state="translated">CFsBlkCnt</target>
        </trans-unit>
        <trans-unit id="668bc46de7dfe8a5a87b82b4a14b2a9b3c2c4f39" translate="yes" xml:space="preserve">
          <source>CFsFilCnt</source>
          <target state="translated">CFsFilCnt</target>
        </trans-unit>
        <trans-unit id="9008ca0ab2fa0b88a1f9335f80a8e41eaf69719f" translate="yes" xml:space="preserve">
          <source>CGid</source>
          <target state="translated">CGid</target>
        </trans-unit>
        <trans-unit id="976337a037dec864a10c701cda46660bf59430a9" translate="yes" xml:space="preserve">
          <source>CHANGEATTRS</source>
          <target state="translated">CHANGEATTRS</target>
        </trans-unit>
        <trans-unit id="9573cfe4003d4063018bfabe8baccabc5dec5643" translate="yes" xml:space="preserve">
          <source>CHANGEATTRS is a more expressive alternative to ADDATTRS</source>
          <target state="translated">CHANGEATTRS是ADDATTRS的一个更有表现力的选择。</target>
        </trans-unit>
        <trans-unit id="4ddd94dd247fbf76059144dff88c2354f6004d0e" translate="yes" xml:space="preserve">
          <source>CId</source>
          <target state="translated">CId</target>
        </trans-unit>
        <trans-unit id="e7be63b330aaa816ff99dddf52aa901f13c3fabc" translate="yes" xml:space="preserve">
          <source>CIno</source>
          <target state="translated">CIno</target>
        </trans-unit>
        <trans-unit id="a00ab8ccad7bd52aaf161686d6fb6af78b9d90cb" translate="yes" xml:space="preserve">
          <source>CInt</source>
          <target state="translated">CInt</target>
        </trans-unit>
        <trans-unit id="afbea4a00e3b8d5fbee852694e9f0dbcb7b1e070" translate="yes" xml:space="preserve">
          <source>CIntMax</source>
          <target state="translated">CIntMax</target>
        </trans-unit>
        <trans-unit id="47afa26f3dfaeef25e893b6e001325c1745aac45" translate="yes" xml:space="preserve">
          <source>CIntPtr</source>
          <target state="translated">CIntPtr</target>
        </trans-unit>
        <trans-unit id="ac426a11e5deca23d2c52eb810c979f96bbedb83" translate="yes" xml:space="preserve">
          <source>CJmpBuf</source>
          <target state="translated">CJmpBuf</target>
        </trans-unit>
        <trans-unit id="3ed41ed1d90695511c38d0a153baab3b0aab617d" translate="yes" xml:space="preserve">
          <source>CKey</source>
          <target state="translated">CKey</target>
        </trans-unit>
        <trans-unit id="1966141ca85782abdda851368b2a0b7057d80562" translate="yes" xml:space="preserve">
          <source>CLLong</source>
          <target state="translated">CLLong</target>
        </trans-unit>
        <trans-unit id="a354353db32e9f98dfeeb3d33b8aaf84b8a163c2" translate="yes" xml:space="preserve">
          <source>CLong</source>
          <target state="translated">CLong</target>
        </trans-unit>
        <trans-unit id="689f2f5b3b386fc3317fb8b3163fa80d82e58f86" translate="yes" xml:space="preserve">
          <source>CMode</source>
          <target state="translated">CMode</target>
        </trans-unit>
        <trans-unit id="c0b6232c6ae7abd7cbb0bae2c172830f28afe3d7" translate="yes" xml:space="preserve">
          <source>CNlink</source>
          <target state="translated">CNlink</target>
        </trans-unit>
        <trans-unit id="49131fde8c7035d6dfd1fe50ce9178a13516766e" translate="yes" xml:space="preserve">
          <source>COff</source>
          <target state="translated">COff</target>
        </trans-unit>
        <trans-unit id="bb1b5dc31671aeff27893044e2275fa0f92d166f" translate="yes" xml:space="preserve">
          <source>CPid</source>
          <target state="translated">CPid</target>
        </trans-unit>
        <trans-unit id="885b63c2b62001411024f3d2c731364c5cee99eb" translate="yes" xml:space="preserve">
          <source>CPtrdiff</source>
          <target state="translated">CPtrdiff</target>
        </trans-unit>
        <trans-unit id="1e7cf4b3318228689b092ee37835b9eb42f41fcc" translate="yes" xml:space="preserve">
          <source>CRLF</source>
          <target state="translated">CRLF</target>
        </trans-unit>
        <trans-unit id="546a33567885515078f7a87477637b76336d1419" translate="yes" xml:space="preserve">
          <source>CRLim</source>
          <target state="translated">CRLim</target>
        </trans-unit>
        <trans-unit id="a28d95e9ceb07c9c8e7449a2375eb3ec11044c2f" translate="yes" xml:space="preserve">
          <source>CSChar</source>
          <target state="translated">CSChar</target>
        </trans-unit>
        <trans-unit id="75d3d4d8267acfcf111594d3887d3a5dd6134eae" translate="yes" xml:space="preserve">
          <source>CSUSeconds</source>
          <target state="translated">CSUSeconds</target>
        </trans-unit>
        <trans-unit id="ac8f56e35ed11b15a2832f15b0cb2a46ae988850" translate="yes" xml:space="preserve">
          <source>CSV is a character-based representation of tables. For maximal modularity, we could first render &lt;code&gt;Table&lt;/code&gt;s as &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;s and then encode this &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; using some Unicode character encoding. However, this sacrifices performance due to the intermediate &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; representation being built and thrown away right afterwards. We get rid of this intermediate &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; representation by fixing the character encoding to UTF-8 and using &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;s to convert &lt;code&gt;Table&lt;/code&gt;s directly to UTF-8 encoded CSV tables represented as lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">CSV是表的基于字符的表示形式。为了获得最大的模块化，我们可以首先将 &lt;code&gt;Table&lt;/code&gt; 呈现为 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; ，然后使用某种Unicode字符编码对该 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 进行编码。但是，由于中间的 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 表示被构建并随后被丢弃，这牺牲了性能。我们通过将字符编码固定为UTF-8并使用 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 来将 &lt;code&gt;Table&lt;/code&gt; 直接转换为UTF-8编码的懒惰 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 表示的CSV表，从而摆脱了中间的 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 表示形式。</target>
        </trans-unit>
        <trans-unit id="e46e637d7bf291d892a2acd0c0be182fc2c433c5" translate="yes" xml:space="preserve">
          <source>CSV is a character-based representation of tables. For maximal modularity, we could first render &lt;code&gt;Table&lt;/code&gt;s as &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;s and then encode this &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; using some Unicode character encoding. However, this sacrifices performance due to the intermediate &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; representation being built and thrown away right afterwards. We get rid of this intermediate &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; representation by fixing the character encoding to UTF-8 and using &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;s to convert &lt;code&gt;Table&lt;/code&gt;s directly to UTF-8 encoded CSV tables represented as lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794f1cc6fcdf266910baaaaa86b4abed6174089f" translate="yes" xml:space="preserve">
          <source>CShort</source>
          <target state="translated">CShort</target>
        </trans-unit>
        <trans-unit id="27cb76e132d99689a39828e8481058f89da270b5" translate="yes" xml:space="preserve">
          <source>CSigAtomic</source>
          <target state="translated">CSigAtomic</target>
        </trans-unit>
        <trans-unit id="066363f762e399c732848700263a21650f470940" translate="yes" xml:space="preserve">
          <source>CSize</source>
          <target state="translated">CSize</target>
        </trans-unit>
        <trans-unit id="3646574cc19c0a235322672991f1d68d3e2b739a" translate="yes" xml:space="preserve">
          <source>CSpeed</source>
          <target state="translated">CSpeed</target>
        </trans-unit>
        <trans-unit id="f87d0c18f3d1185d116c56fd0a55a68efac638e7" translate="yes" xml:space="preserve">
          <source>CSsize</source>
          <target state="translated">CSsize</target>
        </trans-unit>
        <trans-unit id="10fdabde5da32be8abb7d3568067d963d8ef529e" translate="yes" xml:space="preserve">
          <source>CString</source>
          <target state="translated">CString</target>
        </trans-unit>
        <trans-unit id="a23c591d96bc64ebb3bf49374a09dbdd388bf154" translate="yes" xml:space="preserve">
          <source>CStringLen</source>
          <target state="translated">CStringLen</target>
        </trans-unit>
        <trans-unit id="9b2eea83d1e0429c7833e421b94919e2cf388ec0" translate="yes" xml:space="preserve">
          <source>CTcflag</source>
          <target state="translated">CTcflag</target>
        </trans-unit>
        <trans-unit id="5f2bbbe0349a800c3f616f598f975d6fd04867c5" translate="yes" xml:space="preserve">
          <source>CTime</source>
          <target state="translated">CTime</target>
        </trans-unit>
        <trans-unit id="18430e50761b0e842a393b19db9ce285e6cc8054" translate="yes" xml:space="preserve">
          <source>CTimer</source>
          <target state="translated">CTimer</target>
        </trans-unit>
        <trans-unit id="dcb42bcafe594e90af67676c9e8c052fd5a939f5" translate="yes" xml:space="preserve">
          <source>CUChar</source>
          <target state="translated">CUChar</target>
        </trans-unit>
        <trans-unit id="d4a2582d6c16b4ba5d2c635b012416934740d9a4" translate="yes" xml:space="preserve">
          <source>CUInt</source>
          <target state="translated">CUInt</target>
        </trans-unit>
        <trans-unit id="bd076efc1995c3ed275a187edc0ef066f25ea188" translate="yes" xml:space="preserve">
          <source>CUIntMax</source>
          <target state="translated">CUIntMax</target>
        </trans-unit>
        <trans-unit id="e074910606a6a0a7045029bb34df02fd731ab117" translate="yes" xml:space="preserve">
          <source>CUIntPtr</source>
          <target state="translated">CUIntPtr</target>
        </trans-unit>
        <trans-unit id="5486c3338e80ad8846379dc8e8efd520cc4bb304" translate="yes" xml:space="preserve">
          <source>CULLong</source>
          <target state="translated">CULLong</target>
        </trans-unit>
        <trans-unit id="5a6a6d18d4f6db0b3cd3cb3ee6e11d2b638b36ea" translate="yes" xml:space="preserve">
          <source>CULong</source>
          <target state="translated">CULong</target>
        </trans-unit>
        <trans-unit id="897002c69b6a884ea8eefcb5421db84ebdef160d" translate="yes" xml:space="preserve">
          <source>CUSeconds</source>
          <target state="translated">CUSeconds</target>
        </trans-unit>
        <trans-unit id="5c8ed628cb7e45bc705eead76f1cbbebd239bed4" translate="yes" xml:space="preserve">
          <source>CUShort</source>
          <target state="translated">CUShort</target>
        </trans-unit>
        <trans-unit id="92c2830bba441303faf6bab856a7cb069b95ea73" translate="yes" xml:space="preserve">
          <source>CUid</source>
          <target state="translated">CUid</target>
        </trans-unit>
        <trans-unit id="418cbde1ba91d0f1d2a07615c5e0090662363499" translate="yes" xml:space="preserve">
          <source>CWString</source>
          <target state="translated">CWString</target>
        </trans-unit>
        <trans-unit id="8057975ee7505b53300ea225f8ab98d9c485a979" translate="yes" xml:space="preserve">
          <source>CWStringLen</source>
          <target state="translated">CWStringLen</target>
        </trans-unit>
        <trans-unit id="e1b7eb195fb8e47d10f92245d40ce0a83001bfc2" translate="yes" xml:space="preserve">
          <source>CWchar</source>
          <target state="translated">CWchar</target>
        </trans-unit>
        <trans-unit id="f28b182fd6c1e7864bf4df566f792efa2f287d19" translate="yes" xml:space="preserve">
          <source>Calculate the disjoint union of two sets.</source>
          <target state="translated">计算两个集合的不相联。</target>
        </trans-unit>
        <trans-unit id="4f4058eb0d05059b00bf8670b35dee8225ccc810" translate="yes" xml:space="preserve">
          <source>Calculate the integer base 2 logarithm of an &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;. The calculation is more efficient than for the general case, on platforms with 32- or 64-bit words much more efficient.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 的整数以2为底的对数。在具有32位或64位字的平台上，计算效率要比一般情况下更高。</target>
        </trans-unit>
        <trans-unit id="6b1934e0c8bea85b670349912e862bb717885de1" translate="yes" xml:space="preserve">
          <source>Calculate the integer logarithm for an arbitrary base.</source>
          <target state="translated">计算任意基数的整数对数。</target>
        </trans-unit>
        <trans-unit id="fb6671b4faab4d9f68221ca795a7d987f6a0b011" translate="yes" xml:space="preserve">
          <source>Calculate the power set of a set: the set of all its subsets.</source>
          <target state="translated">计算一个集合的幂集:它所有子集的集合。</target>
        </trans-unit>
        <trans-unit id="64d88731a775170b2c2441d20c5626fd611990f4" translate="yes" xml:space="preserve">
          <source>Calculating length of a list continuation-style:</source>
          <target state="translated">计算列表延续式的长度。</target>
        </trans-unit>
        <trans-unit id="d8643951a671cd22c32e5119288ea47182a9cfcf" translate="yes" xml:space="preserve">
          <source>Calendar Duration</source>
          <target state="translated">日历时间</target>
        </trans-unit>
        <trans-unit id="17b81c9701f67a03dd57e8dd0dc487ffc9b431f1" translate="yes" xml:space="preserve">
          <source>CalendarDiffDays</source>
          <target state="translated">CalendarDiffDays</target>
        </trans-unit>
        <trans-unit id="7409b1c71c8750958b11afbc94ff9c16ede064de" translate="yes" xml:space="preserve">
          <source>CalendarDiffTime</source>
          <target state="translated">CalendarDiffTime</target>
        </trans-unit>
        <trans-unit id="eb7dce9cb4dc86ccc09e9d78fd32dae9732b4f0b" translate="yes" xml:space="preserve">
          <source>Calendrical difference, with as many whole months as possible</source>
          <target state="translated">历法不同,尽量用整月的方式</target>
        </trans-unit>
        <trans-unit id="7768352cae2cf4a9e8a3254eb24cd7bb701e58be" translate="yes" xml:space="preserve">
          <source>Calendrical difference, with as many whole months as possible. Same as &lt;code&gt;&lt;a href=&quot;data-time-calendar#v:diffGregorianDurationClip&quot;&gt;diffGregorianDurationClip&lt;/a&gt;&lt;/code&gt; for positive durations.</source>
          <target state="translated">日历差异，尽可能多的整个月。与 &lt;code&gt;&lt;a href=&quot;data-time-calendar#v:diffGregorianDurationClip&quot;&gt;diffGregorianDurationClip&lt;/a&gt;&lt;/code&gt; 的持续时间相同。</target>
        </trans-unit>
        <trans-unit id="c553a4bbbf5e7eabf268248210393cf922adb6b0" translate="yes" xml:space="preserve">
          <source>Calendrical difference, with as many whole months as possible. Same as &lt;code&gt;&lt;a href=&quot;data-time-calendar-julian#v:diffJulianDurationClip&quot;&gt;diffJulianDurationClip&lt;/a&gt;&lt;/code&gt; for positive durations.</source>
          <target state="translated">日历差异，尽可能多的整个月。与 &lt;code&gt;&lt;a href=&quot;data-time-calendar-julian#v:diffJulianDurationClip&quot;&gt;diffJulianDurationClip&lt;/a&gt;&lt;/code&gt; 相同，持续时间为正。</target>
        </trans-unit>
        <trans-unit id="f49baea1e6b905de58ea91679cca46b40b81f9d9" translate="yes" xml:space="preserve">
          <source>Call frame information (CFI) necessary for stack unwinding to produce a call stack trace.</source>
          <target state="translated">调用帧信息(CFI),是堆栈展开产生调用堆栈跟踪所必需的。</target>
        </trans-unit>
        <trans-unit id="3812f07ff31cb5f1c7a312c2a62d7b06b2a82122" translate="yes" xml:space="preserve">
          <source>Call stacks</source>
          <target state="translated">呼叫堆栈</target>
        </trans-unit>
        <trans-unit id="369931f908b5d62b0161c02a5b22a7cc6f5cac8f" translate="yes" xml:space="preserve">
          <source>CallCC</source>
          <target state="translated">CallCC</target>
        </trans-unit>
        <trans-unit id="c880ae2dae683608578f800194affe123789856b" translate="yes" xml:space="preserve">
          <source>CallStack</source>
          <target state="translated">CallStack</target>
        </trans-unit>
        <trans-unit id="0056e80c1c5d28940be39ffae2973568ce16898b" translate="yes" xml:space="preserve">
          <source>Callback invoked on I/O events.</source>
          <target state="translated">在I/O事件中调用回调。</target>
        </trans-unit>
        <trans-unit id="daaca2c7f2ff8d9519d665fa41b06b2d69fccb29" translate="yes" xml:space="preserve">
          <source>Callback invoked on timeout events.</source>
          <target state="translated">超时事件时调用回调。</target>
        </trans-unit>
        <trans-unit id="bab9ef2996e7c7cd612ef756aaf74e75bf66e857" translate="yes" xml:space="preserve">
          <source>Callconv</source>
          <target state="translated">Callconv</target>
        </trans-unit>
        <trans-unit id="f2709480559f8e1ebfe51f5f922070ee5a0b317e" translate="yes" xml:space="preserve">
          <source>Called when event logging is about to stop. This can be &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">在事件记录即将停止时调用。这可以为 &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0e54dd6b0d6f06132a5ac9efba16065ebcb80fc" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;hs_free_fun_ptr&lt;/code&gt;.</source>
          <target state="translated">调用 &lt;code&gt;hs_free_fun_ptr&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f93440ac09595da765dfd7fce3c043e1340ddc7c" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;hs_thread_done()&lt;/code&gt; is entirely optional. You can call it as often or as little as you like. It is safe to call it from a thread that has never called any Haskell functions, or one that never will. If you forget to call it, the worst that can happen is that some memory remains allocated until &lt;code&gt;hs_exit()&lt;/code&gt; is called. If you call it too often, the worst that can happen is that the next call to a Haskell function incurs some extra overhead.</source>
          <target state="translated">调用 &lt;code&gt;hs_thread_done()&lt;/code&gt; 完全是可选的。您可以根据需要随意或不多地调用它。从从未调用过任何Haskell函数或从未调用过任何Haskell函数的线程中调用它是安全的。如果您忘记调用它，则可能发生的最坏情况是在调用 &lt;code&gt;hs_exit()&lt;/code&gt; 之前，仍会分配一些内存。如果您经常调用它，则可能发生的最坏情况是下一次调用Haskell函数会产生一些额外的开销。</target>
        </trans-unit>
        <trans-unit id="e8f8b83a7a11f59a3ed11ede1f3d1bacf0e929ec" translate="yes" xml:space="preserve">
          <source>Calling a foreign export has a lot of overhead: it creates a complete new Haskell thread, for example.</source>
          <target state="translated">调用国外的导出有很多开销:例如,它会创建一个完整的新的Haskell线程。</target>
        </trans-unit>
        <trans-unit id="ff08cba20a67e3d5df6255f93d1d83290d3ee9d5" translate="yes" xml:space="preserve">
          <source>Calling any FFI function that deals with the stable pointer table except for arbitrarily many calls to &lt;code&gt;hs_free_stable_ptr_unsafe&lt;/code&gt; and the final call to &lt;code&gt;hs_unlock_stable_ptr_table&lt;/code&gt;.</source>
          <target state="translated">调用任何处理稳定指针表的FFI函数，除了任意多次对 &lt;code&gt;hs_free_stable_ptr_unsafe&lt;/code&gt; 的调用以及对hs_unlock_stable_ptr_table的最终调用 &lt;code&gt;hs_unlock_stable_ptr_table&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9df609505c881df29223a688771547c8554de6d3" translate="yes" xml:space="preserve">
          <source>Calling any Haskell function, whether or not that function manipulates stable pointers.</source>
          <target state="translated">调用任何Haskell函数,无论该函数是否操纵稳定指针。</target>
        </trans-unit>
        <trans-unit id="9e7c37f4b93e87283ca9f6dfdb888042f1b6baeb" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;&lt;a href=&quot;ghci-ffi#v:prepareForeignCall&quot;&gt;prepareForeignCall&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">致电 &lt;code&gt;&lt;a href=&quot;ghci-ffi#v:prepareForeignCall&quot;&gt;prepareForeignCall&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b8a9e246fa76764839ff44eb2f103e773afd472" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;&lt;a href=&quot;text-printf#v:perror&quot;&gt;perror&lt;/a&gt;&lt;/code&gt; to indicate an unknown format letter for a given type.</source>
          <target state="translated">调用 &lt;code&gt;&lt;a href=&quot;text-printf#v:perror&quot;&gt;perror&lt;/a&gt;&lt;/code&gt; 表示给定类型的未知格式字母。</target>
        </trans-unit>
        <trans-unit id="bbeabbfe431946986773f5b91e4e429276bde50e" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;&lt;a href=&quot;text-printf#v:perror&quot;&gt;perror&lt;/a&gt;&lt;/code&gt; to indicate that the format string ended early.</source>
          <target state="translated">调用 &lt;code&gt;&lt;a href=&quot;text-printf#v:perror&quot;&gt;perror&lt;/a&gt;&lt;/code&gt; 表示格式字符串提前结束。</target>
        </trans-unit>
        <trans-unit id="d4d742c7c0092a147431c7f726520a71e74c9a5c" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;&lt;a href=&quot;text-printf#v:perror&quot;&gt;perror&lt;/a&gt;&lt;/code&gt; to indicate that there is a missing argument in the argument list.</source>
          <target state="translated">调用 &lt;code&gt;&lt;a href=&quot;text-printf#v:perror&quot;&gt;perror&lt;/a&gt;&lt;/code&gt; 表示参数列表中缺少参数。</target>
        </trans-unit>
        <trans-unit id="8f43ec8fc4303b258e938941fa0c2345e526a41e" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;&lt;a href=&quot;text-printf#v:perror&quot;&gt;perror&lt;/a&gt;&lt;/code&gt; to indicate that there is a type error or similar in the given argument.</source>
          <target state="translated">调用 &lt;code&gt;&lt;a href=&quot;text-printf#v:perror&quot;&gt;perror&lt;/a&gt;&lt;/code&gt; 表示给定参数中存在类型错误或类似错误。</target>
        </trans-unit>
        <trans-unit id="070d4130edcaf66aaea470ab76abbaddcd88f8ef" translate="yes" xml:space="preserve">
          <source>Calls to wrapper stubs like &lt;code&gt;mkCompare&lt;/code&gt; allocate storage, which should be released with &lt;code&gt;&lt;a href=&quot;foreign-ptr#v:freeHaskellFunPtr&quot;&gt;freeHaskellFunPtr&lt;/a&gt;&lt;/code&gt; when no longer required.</source>
          <target state="translated">调用 &lt;code&gt;mkCompare&lt;/code&gt; 之类的包装存根会分配存储，当不再需要时，应使用 &lt;code&gt;&lt;a href=&quot;foreign-ptr#v:freeHaskellFunPtr&quot;&gt;freeHaskellFunPtr&lt;/a&gt;&lt;/code&gt; 释放该存储。</target>
        </trans-unit>
        <trans-unit id="08a5398c4ef4368084de9b377c7ea4fe19382c35" translate="yes" xml:space="preserve">
          <source>Can be implemented using &lt;code&gt;&lt;a href=&quot;data-bits#v:bitDefault&quot;&gt;bitDefault&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; is also an instance of &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">如果 &lt;code&gt;a&lt;/code&gt; 也是 &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; 的实例，则可以使用 &lt;code&gt;&lt;a href=&quot;data-bits#v:bitDefault&quot;&gt;bitDefault&lt;/a&gt;&lt;/code&gt; 实现。</target>
        </trans-unit>
        <trans-unit id="4d3a970cf23a4db5acc2dcd82f2ea1d2d3114348" translate="yes" xml:space="preserve">
          <source>Can be implemented using &lt;code&gt;&lt;a href=&quot;data-bits#v:popCountDefault&quot;&gt;popCountDefault&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; is also an instance of &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">如果 &lt;code&gt;a&lt;/code&gt; 也是 &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; 的实例，则可以使用 &lt;code&gt;&lt;a href=&quot;data-bits#v:popCountDefault&quot;&gt;popCountDefault&lt;/a&gt;&lt;/code&gt; 实现。</target>
        </trans-unit>
        <trans-unit id="77df886f88f5ac11d91e40af1a385d5cf0c476b4" translate="yes" xml:space="preserve">
          <source>Can be implemented using &lt;code&gt;&lt;a href=&quot;data-bits#v:testBitDefault&quot;&gt;testBitDefault&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; is also an instance of &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">如果 &lt;code&gt;a&lt;/code&gt; 也是 &lt;code&gt;&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; 的实例，则可以使用 &lt;code&gt;&lt;a href=&quot;data-bits#v:testBitDefault&quot;&gt;testBitDefault&lt;/a&gt;&lt;/code&gt; 实现。</target>
        </trans-unit>
        <trans-unit id="dfff1eba5fd5e0ee04fd5ffa74f4d0a27cee0119" translate="yes" xml:space="preserve">
          <source>Cancel and clean up the user interaction session. Does not block on an existing call to &lt;code&gt;&lt;a href=&quot;system-console-haskeline-io#v:queryInput&quot;&gt;queryInput&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">取消并清理用户交互会话。不阻止对 &lt;code&gt;&lt;a href=&quot;system-console-haskeline-io#v:queryInput&quot;&gt;queryInput&lt;/a&gt;&lt;/code&gt; 的现有调用。</target>
        </trans-unit>
        <trans-unit id="ca09c54bff74a82bae543ebe259f7452ee8c5293" translate="yes" xml:space="preserve">
          <source>Capabilities</source>
          <target state="translated">Capabilities</target>
        </trans-unit>
        <trans-unit id="79fd1355be5e5c3a2d4b8536cbbd16e2b9043764" translate="yes" xml:space="preserve">
          <source>Capability</source>
          <target state="translated">Capability</target>
        </trans-unit>
        <trans-unit id="54d8a47a1e0d806a4cdef71377794d92327dfe08" translate="yes" xml:space="preserve">
          <source>Capability set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47decb03a85edffa821a50bbfb0d437fdc807e88" translate="yes" xml:space="preserve">
          <source>Case analysis for the &lt;code&gt;&lt;a href=&quot;data-bool#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; type. &lt;code&gt;&lt;a href=&quot;data-bool#v:bool&quot;&gt;bool&lt;/a&gt; x y p&lt;/code&gt; evaluates to &lt;code&gt;x&lt;/code&gt; when &lt;code&gt;p&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, and evaluates to &lt;code&gt;y&lt;/code&gt; when &lt;code&gt;p&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bool#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; 类型的案例分析。 &lt;code&gt;&lt;a href=&quot;data-bool#v:bool&quot;&gt;bool&lt;/a&gt; x y p&lt;/code&gt; 在 &lt;code&gt;p&lt;/code&gt; 为 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 时计算为 &lt;code&gt;x&lt;/code&gt; ，在 &lt;code&gt;p&lt;/code&gt; 为 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 时计算为 &lt;code&gt;y&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd61e6da694c7005c3bf09a8d6c6175a2aa43e8f" translate="yes" xml:space="preserve">
          <source>Case analysis for the &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; type. If the value is &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt; a&lt;/code&gt;, apply the first function to &lt;code&gt;a&lt;/code&gt;; if it is &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt; b&lt;/code&gt;, apply the second function to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; 类型的案例分析。如果值为 &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt; a&lt;/code&gt; ，则将第一个函数应用于 &lt;code&gt;a&lt;/code&gt; ；如果为 &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt; b&lt;/code&gt; ，则将第二个功能应用于 &lt;code&gt;b&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98c9b70590f3abe192e52616a49d1ce1c95797d5" translate="yes" xml:space="preserve">
          <source>Case analysis for the &lt;code&gt;&lt;a href=&quot;prelude#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; type. If the value is &lt;code&gt;&lt;a href=&quot;prelude#v:Left&quot;&gt;Left&lt;/a&gt; a&lt;/code&gt;, apply the first function to &lt;code&gt;a&lt;/code&gt;; if it is &lt;code&gt;&lt;a href=&quot;prelude#v:Right&quot;&gt;Right&lt;/a&gt; b&lt;/code&gt;, apply the second function to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; 类型的案例分析。如果值为 &lt;code&gt;&lt;a href=&quot;prelude#v:Left&quot;&gt;Left&lt;/a&gt; a&lt;/code&gt; ，则将第一个函数应用于 &lt;code&gt;a&lt;/code&gt; ；如果为 &lt;code&gt;&lt;a href=&quot;prelude#v:Right&quot;&gt;Right&lt;/a&gt; b&lt;/code&gt; ，则将第二个功能应用于 &lt;code&gt;b&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="475bc2fca6cb658692cd146b77f3134683e44d4e" translate="yes" xml:space="preserve">
          <source>Case conversion</source>
          <target state="translated">案件转换</target>
        </trans-unit>
        <trans-unit id="c384f0bd4de15126a4e648ecdb43ed85f0f9788d" translate="yes" xml:space="preserve">
          <source>Cast over &lt;code&gt;k1 -&amp;gt; k2 -&amp;gt; k3&lt;/code&gt;</source>
          <target state="translated">投放到 &lt;code&gt;k1 -&amp;gt; k2 -&amp;gt; k3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9b0c1cec3779c67b5a4198434044b6479333cc3b" translate="yes" xml:space="preserve">
          <source>Cast over &lt;code&gt;k1 -&amp;gt; k2&lt;/code&gt;</source>
          <target state="translated">投放到 &lt;code&gt;k1 -&amp;gt; k2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="418d5136974671468558a366b7adf4e1745babd1" translate="yes" xml:space="preserve">
          <source>Casting &lt;code&gt;Any&lt;/code&gt; back to the real type</source>
          <target state="translated">将 &lt;code&gt;Any&lt;/code&gt; 类型转换为实型</target>
        </trans-unit>
        <trans-unit id="14eaff82dc32a3dd06fbb2120fb55390d7aff2b7" translate="yes" xml:space="preserve">
          <source>Casting an unboxed type to another unboxed type of the same size. (Casting between floating-point and integral types does not work. See the &lt;code&gt;GHC.Float&lt;/code&gt; module for functions to do work.)</source>
          <target state="translated">将未装箱的类型转换为相同大小的另一个未装箱的类型。（在浮点和整数类型之间进行转换不起作用。有关 &lt;code&gt;GHC.Float&lt;/code&gt; 的功能，请参见GHC.Float模块。）</target>
        </trans-unit>
        <trans-unit id="a77a280b66f17718ca45f364c2549ea59ee231d5" translate="yes" xml:space="preserve">
          <source>Casting any lifted type to &lt;code&gt;Any&lt;/code&gt;</source>
          <target state="translated">将任何提升类型转换为 &lt;code&gt;Any&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8239393d85a3d2b20d80ac50aa2077b6cb2bbff9" translate="yes" xml:space="preserve">
          <source>Casting between two types that have the same runtime representation. One case is when the two types differ only in &quot;phantom&quot; type parameters, for example &lt;code&gt;Ptr Int&lt;/code&gt; to &lt;code&gt;Ptr Float&lt;/code&gt;, or &lt;code&gt;[Int]&lt;/code&gt; to &lt;code&gt;[Float]&lt;/code&gt; when the list is known to be empty. Also, a &lt;code&gt;newtype&lt;/code&gt; of a type &lt;code&gt;T&lt;/code&gt; has the same representation at runtime as &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">具有相同运行时表示形式的两种类型之间的转换。一种情况是两种类型的区别仅在于&amp;ldquo;幻像&amp;rdquo;类型参数，例如，当已知列表为空时，例如 &lt;code&gt;Ptr Int&lt;/code&gt; 到 &lt;code&gt;Ptr Float&lt;/code&gt; 或 &lt;code&gt;[Int]&lt;/code&gt; 到 &lt;code&gt;[Float]&lt;/code&gt; 。另外， &lt;code&gt;newtype&lt;/code&gt; 的类型 &lt;code&gt;T&lt;/code&gt; 具有在运行时为相同的表示 &lt;code&gt;T&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="817c5fda8cf761e409f0573537fe831f98dcc235" translate="yes" xml:space="preserve">
          <source>Casts a &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt; of a different type.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt; 为其他类型的FunPtr。</target>
        </trans-unit>
        <trans-unit id="3b87674433c2d83df21e90e5d30bb6ad8b8917b3" translate="yes" xml:space="preserve">
          <source>Casts a &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt; 强制转换为 &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a333b32a76b5f0846b0b562e4e374f98aa285d13" translate="yes" xml:space="preserve">
          <source>Casts a &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; 转换为 &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="95e8d467482a948856e848cedf6d867c0805e0eb" translate="yes" xml:space="preserve">
          <source>Casts a &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt; of a different type.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt; 为其他类型的FunPtr。</target>
        </trans-unit>
        <trans-unit id="b06ed4465a78c5cb3d6a85f1cc01b4e8f6b31063" translate="yes" xml:space="preserve">
          <source>Casts a &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt; 强制转换为 &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="19d6f9a00c0c2cabff3ad4bdfb625dab782fe4d7" translate="yes" xml:space="preserve">
          <source>Casts a &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; 转换为 &lt;code&gt;&lt;a href=&quot;ghc-ptr#t:FunPtr&quot;&gt;FunPtr&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c2924698e10e606808fa245512e94c5f68ae0c26" translate="yes" xml:space="preserve">
          <source>Casts an &lt;code&gt;&lt;a href=&quot;data-array-io#t:IOUArray&quot;&gt;IOUArray&lt;/a&gt;&lt;/code&gt; with one element type into one with a different element type. All the elements of the resulting array are undefined (unless you know what you're doing...).</source>
          <target state="translated">将一种元素类型的 &lt;code&gt;&lt;a href=&quot;data-array-io#t:IOUArray&quot;&gt;IOUArray&lt;/a&gt;&lt;/code&gt; 转换为另一种元素类型的IOUArray。结果数组的所有元素都是不确定的（除非您知道自己在做什么...）。</target>
        </trans-unit>
        <trans-unit id="a08750b8b38605ce21952c72bb767d5301c2b939" translate="yes" xml:space="preserve">
          <source>Casts an &lt;code&gt;&lt;a href=&quot;data-array-st#t:STUArray&quot;&gt;STUArray&lt;/a&gt;&lt;/code&gt; with one element type into one with a different element type. All the elements of the resulting array are undefined (unless you know what you're doing...).</source>
          <target state="translated">将一种元素类型的 &lt;code&gt;&lt;a href=&quot;data-array-st#t:STUArray&quot;&gt;STUArray&lt;/a&gt;&lt;/code&gt; 转换为另一种元素类型的STUArray。结果数组的所有元素都是不确定的（除非您知道自己在做什么...）。</target>
        </trans-unit>
        <trans-unit id="a7c51e67b60b0927212f25eb1aaefb172b8a7153" translate="yes" xml:space="preserve">
          <source>Catch</source>
          <target state="translated">Catch</target>
        </trans-unit>
        <trans-unit id="be3e0797dab02a979f34001bfab69a509009b77c" translate="yes" xml:space="preserve">
          <source>Catch an exception in the &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">在 &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad中捕获异常。</target>
        </trans-unit>
        <trans-unit id="dd822d9ac25676eae90dbd5e34d62a0eba9fb936" translate="yes" xml:space="preserve">
          <source>Catch and handle an exception of type &lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:Interrupt&quot;&gt;Interrupt&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">捕获并处理 &lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:Interrupt&quot;&gt;Interrupt&lt;/a&gt;&lt;/code&gt; 类型的异常。</target>
        </trans-unit>
        <trans-unit id="bb4abdda83b18367b6738ca6670fbc64a522dd00" translate="yes" xml:space="preserve">
          <source>Catch any &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#t:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; type in the &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">捕获 &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad 中的任何 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#t:Exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="85fb57b50b7c396aea28d0563de6686ac25936f8" translate="yes" xml:space="preserve">
          <source>Catch any &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; that occurs in the computation and throw a modified version.</source>
          <target state="translated">捕获计算中发生的任何 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 并抛出修改后的版本。</target>
        </trans-unit>
        <trans-unit id="3e8b90383da6530dd9f0567fb4058dd0c3408fd5" translate="yes" xml:space="preserve">
          <source>Catch any &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; that occurs in the computation and throw a modified version.</source>
          <target state="translated">捕获计算中发生的任何 &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 并抛出修改后的版本。</target>
        </trans-unit>
        <trans-unit id="4faa50ac1aedb089ef7ad23c0ec14c4788d3fa93" translate="yes" xml:space="preserve">
          <source>Catchable failure</source>
          <target state="translated">可捕获的故障</target>
        </trans-unit>
        <trans-unit id="cbf0eb43a0f74729b670cb70ee447e8dafe2ae8e" translate="yes" xml:space="preserve">
          <source>Catching Exceptions</source>
          <target state="translated">捕捉例外情况</target>
        </trans-unit>
        <trans-unit id="7c24a071f68091fc4b6c70d3a203d55c0991236d" translate="yes" xml:space="preserve">
          <source>Catching all exceptions</source>
          <target state="translated">捕捉所有异常情况</target>
        </trans-unit>
        <trans-unit id="a3c686e711e4720f99b4562bb3dbaae7ab658cf2" translate="yes" xml:space="preserve">
          <source>Category</source>
          <target state="translated">Category</target>
        </trans-unit>
        <trans-unit id="24116b77a8f36e799ebb282f0b37aa98b99674d4" translate="yes" xml:space="preserve">
          <source>Cause GHC to spew a long usage message to standard output and then exit.</source>
          <target state="translated">使GHC向标准输出喷出一条长长的使用信息,然后退出。</target>
        </trans-unit>
        <trans-unit id="cd4f2174d5c74263e2692df318af63043a136f0a" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;ghc-pkg&lt;/code&gt; to ignore missing dependencies, directories and libraries when registering a package, and just go ahead and add it anyway. This might be useful if your package installation system needs to add the package to GHC before building and installing the files.</source>
          <target state="translated">使 &lt;code&gt;ghc-pkg&lt;/code&gt; 在注册程序包时忽略缺少的依赖项，目录和库，并继续进行添加。如果您的软件包安装系统需要在构建和安装文件之前将软件包添加到GHC，这可能会很有用。</target>
        </trans-unit>
        <trans-unit id="51d690ac870a757a43255d7f87f9ba95fdebc250" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;ghc-pkg&lt;/code&gt; to interpret arguments as installed package IDs (e.g., an identifier like &lt;code&gt;unix-2.3.1.0-de7803f1a8cd88d2161b29b083c94240&lt;/code&gt;). This is useful if providing just the package name and version are ambiguous (in old versions of GHC, this was guaranteed to be unique, but this invariant no longer necessarily holds).</source>
          <target state="translated">使 &lt;code&gt;ghc-pkg&lt;/code&gt; 将参数解释为已安装的程序包ID（例如，诸如 &lt;code&gt;unix-2.3.1.0-de7803f1a8cd88d2161b29b083c94240&lt;/code&gt; 之类的标识符）。如果仅提供软件包名称和版本不明确，这将很有用（在GHC的旧版本中，这被保证是唯一的，但是这种不变性不再成立）。</target>
        </trans-unit>
        <trans-unit id="6c8b9bf99ddcbd146b3c845f7be476ec85530046" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;ghc-pkg&lt;/code&gt; to interpret arguments as unit IDs (e.g., an identifier like &lt;code&gt;I5BErHzyOm07EBNpKBEeUv&lt;/code&gt;). Package keys are used to prefix symbol names GHC produces (e.g., &lt;code&gt;6VWy06pWzzJq9evDvK2d4w6_DataziByteStringziInternal_unsafePackLenChars_info&lt;/code&gt;), so if you need to figure out what package a symbol belongs to, use &lt;code&gt;ghc-pkg&lt;/code&gt; with this flag.</source>
          <target state="translated">使 &lt;code&gt;ghc-pkg&lt;/code&gt; 将参数解释为单位ID（例如，类似 &lt;code&gt;I5BErHzyOm07EBNpKBEeUv&lt;/code&gt; 的标识符）。包密钥用于为GHC产生的符号名称添加前缀（例如 &lt;code&gt;6VWy06pWzzJq9evDvK2d4w6_DataziByteStringziInternal_unsafePackLenChars_info&lt;/code&gt; ），因此，如果需要确定符号属于哪个包，请使用带有该标志的 &lt;code&gt;ghc-pkg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00ace62f72694d4200557c472f90977b55426b58" translate="yes" xml:space="preserve">
          <source>Causes GHC to continue the compilation if a module has an error. Any reverse dependencies are pruned immediately and the whole compilation is still flagged as an error. This option has no effect if parallel compilation (&lt;a href=&quot;#ghc-flag--j%5B%E2%9F%A8n%E2%9F%A9%5D&quot;&gt;&lt;code&gt;-j[⟨n⟩]&lt;/code&gt;&lt;/a&gt;) is in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4e5c6ceb6d8c45565db992a2558a62eccda222" translate="yes" xml:space="preserve">
          <source>Causes GHC to display error messages with colors. To do this, the terminal must have support for ANSI color codes, or else garbled text will appear. The default value is &lt;code&gt;auto&lt;/code&gt;, which means GHC will make an attempt to detect whether terminal supports colors and choose accordingly.</source>
          <target state="translated">使GHC显示带有颜色的错误消息。为此，终端必须支持ANSI颜色代码，否则会出现乱码。默认值为 &lt;code&gt;auto&lt;/code&gt; ，这意味着GHC将尝试检测终端是否支持颜色并进行相应选择。</target>
        </trans-unit>
        <trans-unit id="20d2d68914c6346c2e95cbf24b6ec67960b9eecf" translate="yes" xml:space="preserve">
          <source>Causes GHC to emit the full source span of the syntactic entity relating to an error message. Normally, GHC emits the source location of the start of the syntactic entity only.</source>
          <target state="translated">使GHC发出与错误消息有关的句法实体的全部源跨度,通常情况下,GHC只发出句法实体起始的源位置。通常情况下,GHC只发出句法实体开始的源位置。</target>
        </trans-unit>
        <trans-unit id="d576e350cd2aa7e7096854355ee66b60b92ba0b0" translate="yes" xml:space="preserve">
          <source>Causes GHC to group diagnostic messages by severity and output them after other messages when building a multi-module Haskell program. This flag can make diagnostic messages more visible when used in conjunction with &lt;a href=&quot;#ghc-flag---make&quot;&gt;&lt;code&gt;--make&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ghc-flag--j%5B%E2%9F%A8n%E2%9F%A9%5D&quot;&gt;&lt;code&gt;-j[⟨n⟩]&lt;/code&gt;&lt;/a&gt;. Otherwise, it can be hard to find the relevant errors or likely to ignore the warnings when they are mixed with many other messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acca7ff63d9b6e41e528844003c34ddbdde2ee3a" translate="yes" xml:space="preserve">
          <source>Causes GHC to ignore uses of the function &lt;code&gt;Exception.assert&lt;/code&gt; in source code (in other words, rewriting &lt;code&gt;Exception.assert p e&lt;/code&gt; to &lt;code&gt;e&lt;/code&gt; (see &lt;a href=&quot;glasgow_exts#assertions&quot;&gt;Assertions&lt;/a&gt;).</source>
          <target state="translated">使GHC忽略源代码中对 &lt;code&gt;Exception.assert&lt;/code&gt; 函数的使用（换句话说，将 &lt;code&gt;Exception.assert p e&lt;/code&gt; 重写为 &lt;code&gt;e&lt;/code&gt; （请参见&lt;a href=&quot;glasgow_exts#assertions&quot;&gt;Assertions&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="a5c37beba2bad256ebd9f62113525cc50cf13289" translate="yes" xml:space="preserve">
          <source>Causes GHC to output errors in reverse line-number order, so that the errors and warnings that originate later in the file are displayed first.</source>
          <target state="translated">使GHC以相反的行号顺序输出错误,使文件中后面出现的错误和警告先显示。</target>
        </trans-unit>
        <trans-unit id="c74c8c8a50a946a1eb069af532c3b41c65914fde" translate="yes" xml:space="preserve">
          <source>Causes GHCi to halt evaluation and return to the interactive prompt in the event of an exception. &lt;a href=&quot;#ghc-flag--fbreak-on-error&quot;&gt;&lt;code&gt;-fbreak-on-error&lt;/code&gt;&lt;/a&gt; breaks on only those exceptions which would otherwise be uncaught.</source>
          <target state="translated">如果发生异常，使GHCi停止评估并返回交互式提示。&lt;a href=&quot;#ghc-flag--fbreak-on-error&quot;&gt; &lt;code&gt;-fbreak-on-error&lt;/code&gt; &lt;/a&gt;仅中断那些否则将无法捕获的异常。</target>
        </trans-unit>
        <trans-unit id="09fceabf67429fb54f490834d66c90cb5b2d87e7" translate="yes" xml:space="preserve">
          <source>Causes GHCi to halt evaluation and return to the interactive prompt in the event of an exception. &lt;a href=&quot;#ghc-flag--fbreak-on-exception&quot;&gt;&lt;code&gt;-fbreak-on-exception&lt;/code&gt;&lt;/a&gt; breaks on all exceptions.</source>
          <target state="translated">如果发生异常，使GHCi停止评估并返回交互式提示。&lt;a href=&quot;#ghc-flag--fbreak-on-exception&quot;&gt; &lt;code&gt;-fbreak-on-exception&lt;/code&gt; &lt;/a&gt;会在所有异常上中断。</target>
        </trans-unit>
        <trans-unit id="e7e4317b2c3f6f72a82cfdcbcf16addd4832d7ce" translate="yes" xml:space="preserve">
          <source>Causes a specific warning to be treated as normal warning, not fatal error.</source>
          <target state="translated">导致特定警告被视为正常警告,而不是致命错误。</target>
        </trans-unit>
        <trans-unit id="9013a7a5dd4b02050c445d6c8d02f8c9a5659e8f" translate="yes" xml:space="preserve">
          <source>Causes a the finalizer associated with a weak pointer to be run immediately.</source>
          <target state="translated">使与弱指针相关的定标器立即运行。</target>
        </trans-unit>
        <trans-unit id="d660793220cce4be870d303d08ede77e598c4e8a" translate="yes" xml:space="preserve">
          <source>Causes a warning to be emitted for foreign declarations that use unsupported calling conventions. In particular, if the &lt;code&gt;stdcall&lt;/code&gt; calling convention is used on an architecture other than i386 then it will be treated as &lt;code&gt;ccall&lt;/code&gt;.</source>
          <target state="translated">使使用不支持的调用约定的外部声明发出警告。特别是，如果在非i386的体系结构上使用 &lt;code&gt;stdcall&lt;/code&gt; 调用约定，则它将被视为 &lt;code&gt;ccall&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d9231b916d8fb538801ceb6978b5f7d56d89c46a" translate="yes" xml:space="preserve">
          <source>Causes a warning to be emitted for foreign imports of the following form:</source>
          <target state="translated">对以下形式的外国进口发出警告:</target>
        </trans-unit>
        <trans-unit id="e98a3a30d7733ed9dedcbabc936490c757372801" translate="yes" xml:space="preserve">
          <source>Causes a warning to be emitted if a literal will overflow, e.g. &lt;code&gt;300 :: Word8&lt;/code&gt;.</source>
          <target state="translated">如果文字溢出，则发出警告，例如 &lt;code&gt;300 :: Word8&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0cd1c01a0d1fd759549d7f5a255d840e89eea8c9" translate="yes" xml:space="preserve">
          <source>Causes a warning to be emitted if an enumeration is empty, e.g. &lt;code&gt;[5 .. 3]&lt;/code&gt;.</source>
          <target state="translated">如果枚举为空（例如 &lt;code&gt;[5 .. 3]&lt;/code&gt; ，则发出警告。</target>
        </trans-unit>
        <trans-unit id="2b03d60a421fef989bdabe6f59af3aafb863a3a2" translate="yes" xml:space="preserve">
          <source>Causes a warning to be emitted in the following cases:</source>
          <target state="translated">在下列情况下会发出警告:</target>
        </trans-unit>
        <trans-unit id="54a2ce2dcdf3de95961e4a84c06a6eb991218b3a" translate="yes" xml:space="preserve">
          <source>Causes a warning to be emitted when a datatype &lt;code&gt;T&lt;/code&gt; is exported with all constructors, i.e. &lt;code&gt;T(..)&lt;/code&gt;, but is it just a type synonym.</source>
          <target state="translated">使用所有构造函数导出数据类型 &lt;code&gt;T&lt;/code&gt; 时都会发出警告，即 &lt;code&gt;T(..)&lt;/code&gt; ，但它只是类型的同义词。</target>
        </trans-unit>
        <trans-unit id="5850209be2276082816894ad46c9d27f472d8244" translate="yes" xml:space="preserve">
          <source>Causes a warning to be emitted when a deprecated command-line flag is used.</source>
          <target state="translated">当使用废弃的命令行标志时,会发出警告。</target>
        </trans-unit>
        <trans-unit id="b17effd9a3e5c7c9e87b6669a7b23b62923d60da" translate="yes" xml:space="preserve">
          <source>Causes a warning to be emitted when a module, function or type with a &lt;code&gt;WARNING&lt;/code&gt; or &lt;code&gt;DEPRECATED pragma&lt;/code&gt; is used. See &lt;a href=&quot;glasgow_exts#warning-deprecated-pragma&quot;&gt;WARNING and DEPRECATED pragmas&lt;/a&gt; for more details on the pragmas.</source>
          <target state="translated">当使用带有 &lt;code&gt;WARNING&lt;/code&gt; 或已 &lt;code&gt;DEPRECATED pragma&lt;/code&gt; 的模块，功能或类型时，导致发出警告。有关&lt;a href=&quot;glasgow_exts#warning-deprecated-pragma&quot;&gt;实用&lt;/a&gt;程序的更多详细信息，请参见警告和不建议使用的实用程序。</target>
        </trans-unit>
        <trans-unit id="ae2b17da3f31748cf6562bc1e9f9fc0eea07082f" translate="yes" xml:space="preserve">
          <source>Causes a warning to be emitted when a module, function or type with a &lt;code&gt;WARNING&lt;/code&gt; or &lt;code&gt;DEPRECATED pragma&lt;/code&gt; is used. See &lt;a href=&quot;glasgow_exts#warning-deprecated-pragma&quot;&gt;WARNING and DEPRECATED pragmas&lt;/a&gt; for more details on the pragmas. An alias for &lt;a href=&quot;#ghc-flag--Wwarnings-deprecations&quot;&gt;&lt;code&gt;-Wwarnings-deprecations&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当使用带有 &lt;code&gt;WARNING&lt;/code&gt; 或不建议 &lt;code&gt;DEPRECATED pragma&lt;/code&gt; 的模块，功能或类型时，导致发出警告。有关&lt;a href=&quot;glasgow_exts#warning-deprecated-pragma&quot;&gt;实用&lt;/a&gt;程序的更多详细信息，请参见警告和不建议使用的实用程序。&lt;a href=&quot;#ghc-flag--Wwarnings-deprecations&quot;&gt; &lt;code&gt;-Wwarnings-deprecations&lt;/code&gt; &lt;/a&gt;的别名。</target>
        </trans-unit>
        <trans-unit id="98e20c4585a176d469e30cd83022bf0c8a9dc06c" translate="yes" xml:space="preserve">
          <source>Causes a warning to be emitted when a pragma that GHC doesn&amp;rsquo;t recognise is used. As well as pragmas that GHC itself uses, GHC also recognises pragmas known to be used by other tools, e.g. &lt;code&gt;OPTIONS_HUGS&lt;/code&gt; and &lt;code&gt;DERIVE&lt;/code&gt;.</source>
          <target state="translated">当使用GHC无法识别的编译指示时，发出警告。除了GHC本身使用的编译指示外，GHC还识别已知由其他工具（例如 &lt;code&gt;OPTIONS_HUGS&lt;/code&gt; 和 &lt;code&gt;DERIVE&lt;/code&gt; )使用的编译指示。</target>
        </trans-unit>
        <trans-unit id="79d06a9df074ba808cc5468d12706017603b0286" translate="yes" xml:space="preserve">
          <source>Causes a warning to be reported when a type error is deferred until runtime. See &lt;a href=&quot;glasgow_exts#defer-type-errors&quot;&gt;Deferring type errors to runtime&lt;/a&gt;</source>
          <target state="translated">将类型错误推迟到运行时，导致报告警告。请参见将&lt;a href=&quot;glasgow_exts#defer-type-errors&quot;&gt;类型错误推迟到运行时&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cd293507c41778581d65d30e7291dca340df36ce" translate="yes" xml:space="preserve">
          <source>Causes a warning when both &lt;a href=&quot;glasgow_exts#extension-DeriveAnyClass&quot;&gt;&lt;code&gt;DeriveAnyClass&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;glasgow_exts#extension-GeneralizedNewtypeDeriving&quot;&gt;&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt;&lt;/a&gt; are enabled and no explicit deriving strategy is in use. For example, this would result a warning:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b795c3c145457a6b91186e97358df9a2b6dccc0" translate="yes" xml:space="preserve">
          <source>Causes all files following this option on the command line to be processed as if they had the suffix ⟨suffix⟩. For example, to compile a Haskell module in the file &lt;code&gt;M.my-hs&lt;/code&gt;, use &lt;code&gt;ghc -c -x hs M.my-hs&lt;/code&gt;.</source>
          <target state="translated">使命令行上此选项之后的所有文件都被视为带有后缀&amp;ldquo; suffix&amp;rdquo;。例如，要在文件 &lt;code&gt;M.my-hs&lt;/code&gt; 中编译Haskell模块，请使用 &lt;code&gt;ghc -c -x hs M.my-hs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8292d38b8a6403c2a334f06412c37889687b00ef" translate="yes" xml:space="preserve">
          <source>Causes the compiler to behave as if package ⟨pkg⟩, and any packages that depend on ⟨pkg⟩, are not installed at all.</source>
          <target state="translated">导致编译器的行为就像包⟨pkg⟩,以及任何依赖⟨pkg⟩的包,根本没有安装一样。</target>
        </trans-unit>
        <trans-unit id="434952a5725e7de695b3a6a4b3a96155d48436c1" translate="yes" xml:space="preserve">
          <source>Causes the compiler to emit a warning when a Prelude numeric conversion converts a type &lt;code&gt;T&lt;/code&gt; to the same type &lt;code&gt;T&lt;/code&gt;; such calls are probably no-ops and can be omitted. The functions checked for are: &lt;code&gt;toInteger&lt;/code&gt;, &lt;code&gt;toRational&lt;/code&gt;, &lt;code&gt;fromIntegral&lt;/code&gt;, and &lt;code&gt;realToFrac&lt;/code&gt;.</source>
          <target state="translated">当Prelude数字转换将类型 &lt;code&gt;T&lt;/code&gt; 转换为相同的类型 &lt;code&gt;T&lt;/code&gt; 时，使编译器发出警告；这样的调用可能是无操作的，因此可以省略。检查的函数为： &lt;code&gt;toInteger&lt;/code&gt; ， &lt;code&gt;toRational&lt;/code&gt; ， &lt;code&gt;fromIntegral&lt;/code&gt; 和 &lt;code&gt;realToFrac&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99fb2233386feaebc8cae57990b88088c30ee46f" translate="yes" xml:space="preserve">
          <source>Causes the compiler to emit a warning when a module or interface file in the current directory is shadowing one with the same module name in a library or other directory.</source>
          <target state="translated">当当前目录下的模块或接口文件在库或其他目录下与相同模块名的文件产生影子时,导致编译器发出警告。</target>
        </trans-unit>
        <trans-unit id="afdfafb40e8a88887307fad43761f46853103015" translate="yes" xml:space="preserve">
          <source>Causes the finalizers associated with a foreign pointer to be run immediately.</source>
          <target state="translated">导致与外来指针相关联的定标器被立即运行。</target>
        </trans-unit>
        <trans-unit id="54fd86ce8e8302272d0e97f23989674677147c23" translate="yes" xml:space="preserve">
          <source>Causes the output from all of the flags listed below to be dumped to a file. The file name depends upon the output produced; for instance, output from &lt;a href=&quot;#ghc-flag--ddump-simpl&quot;&gt;&lt;code&gt;-ddump-simpl&lt;/code&gt;&lt;/a&gt; will end up in &lt;code&gt;&lt;em&gt;module&lt;/em&gt;.dump-simpl&lt;/code&gt;.</source>
          <target state="translated">使以下列出的所有标志的输出转储到文件中。文件名取决于产生的输出。例如，&lt;a href=&quot;#ghc-flag--ddump-simpl&quot;&gt; &lt;code&gt;-ddump-simpl&lt;/code&gt; 的&lt;/a&gt;输出将最终在 &lt;code&gt;&lt;em&gt;module&lt;/em&gt;.dump-simpl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ec4c4a9b78df554f2361cec3adb0f5b2c38f8d94" translate="yes" xml:space="preserve">
          <source>Caution: &lt;code&gt;&lt;a href=&quot;data-sequence#v:index&quot;&gt;index&lt;/a&gt;&lt;/code&gt; necessarily delays retrieving the requested element until the result is forced. It can therefore lead to a space leak if the result is stored, unforced, in another structure. To retrieve an element immediately without forcing it, use &lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-sequence#v:-33--63-&quot;&gt;(!?)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注意： &lt;code&gt;&lt;a href=&quot;data-sequence#v:index&quot;&gt;index&lt;/a&gt;&lt;/code&gt; 必须延迟检索请求的元素，直到强制执行结果为止。因此，如果结果未经强制存储在另一个结构中，则可能导致空间泄漏。要立即检索一个元素而不强制它，请使用 &lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;data-sequence#v:-33--63-&quot;&gt;(!?)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9452e73ef346ac944b5f51db164d667752e4ddf7" translate="yes" xml:space="preserve">
          <source>Caveat for POSIX systems: This function returns a timestamp with sub-second resolution only if this package is compiled against &lt;code&gt;unix-2.6.0.0&lt;/code&gt; or later and the underlying filesystem supports them.</source>
          <target state="translated">针对POSIX系统的警告：仅当此程序包针对 &lt;code&gt;unix-2.6.0.0&lt;/code&gt; 或更高版本进行编译且基础文件系统支持它们时，此函数才返回具有亚秒级分辨率的时间戳。</target>
        </trans-unit>
        <trans-unit id="ecb440a03f6dbd53a44110493f3da116c4ae1381" translate="yes" xml:space="preserve">
          <source>Cc: Other, Control</source>
          <target state="translated">抄送:其他,控制</target>
        </trans-unit>
        <trans-unit id="3f65512b343186766813dc45cc276246f8a4ec1a" translate="yes" xml:space="preserve">
          <source>Centi</source>
          <target state="translated">Centi</target>
        </trans-unit>
        <trans-unit id="c1a76f1c3c812a00183788cc7dee0166fabca31f" translate="yes" xml:space="preserve">
          <source>Certain lexical rules regarding qualified identifiers are slightly different in GHC compared to the Haskell report. When you have ⟨module⟩&lt;code&gt;.&lt;/code&gt;⟨reservedop⟩, such as &lt;code&gt;M.\&lt;/code&gt;, GHC will interpret it as a single qualified operator rather than the two lexemes &lt;code&gt;M&lt;/code&gt; and &lt;code&gt;.\&lt;/code&gt;.</source>
          <target state="translated">与Haskell报告相比，GHC中有关合格标识符的某些词汇规则略有不同。当你有⟨module⟩ &lt;code&gt;.&lt;/code&gt; &amp;ldquo; reservedop&amp;rdquo;，例如 &lt;code&gt;M.\&lt;/code&gt; ，GHC会将其解释为单个合格的运算符，而不是 &lt;code&gt;M&lt;/code&gt; 和 &lt;code&gt;.\&lt;/code&gt; 的两个词素。</target>
        </trans-unit>
        <trans-unit id="4a7b4652caf25e3351a7832df015e2959b0fbeda" translate="yes" xml:space="preserve">
          <source>Certain pragmas are &lt;em&gt;file-header pragmas&lt;/em&gt;:</source>
          <target state="translated">某些实用程序是&lt;em&gt;文件头实用程序&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="90ec155e49787cf6b35f15aacd48331aebf44025" translate="yes" xml:space="preserve">
          <source>Certain static options (&lt;code&gt;-package ⟨pkg⟩&lt;/code&gt;, &lt;code&gt;-I⟨dir⟩&lt;/code&gt;, &lt;code&gt;-i⟨dir⟩[:⟨dir⟩]*&lt;/code&gt;, and &lt;code&gt;-l ⟨lib⟩&lt;/code&gt; in particular) will also work, but some may not take effect until the next reload.</source>
          <target state="translated">某些静态选项（特别是 &lt;code&gt;-package ⟨pkg⟩&lt;/code&gt; ， &lt;code&gt;-I⟨dir⟩&lt;/code&gt; ， &lt;code&gt;-i⟨dir⟩[:⟨dir⟩]*&lt;/code&gt; 和 &lt;code&gt;-l ⟨lib⟩&lt;/code&gt; ）也将起作用，但是某些静态选项可能要等到下次重新加载。</target>
        </trans-unit>
        <trans-unit id="85fb7bc2cf9eae529cf203fca43ad1fafe544f1d" translate="yes" xml:space="preserve">
          <source>Cf: Other, Format</source>
          <target state="translated">参照 其他,格式</target>
        </trans-unit>
        <trans-unit id="8d2e02be6c58addb2b99edf9f0ec28ccb830c1c6" translate="yes" xml:space="preserve">
          <source>Chan</source>
          <target state="translated">Chan</target>
        </trans-unit>
        <trans-unit id="23d8c781bba25bcb2e23d6e6e1d1df6c5b04d4ed" translate="yes" xml:space="preserve">
          <source>Change a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; such that it first applies a function to the value to be encoded.</source>
          <target state="translated">更改 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; ，使其首先将函数应用于要编码的值。</target>
        </trans-unit>
        <trans-unit id="7fd9f6eb3359e7000ce00ff5cb820e7e2625290f" translate="yes" xml:space="preserve">
          <source>Change a primitives such that it first applies a function to the value to be encoded.</source>
          <target state="translated">更改基元,使其首先对要编码的值应用一个函数。</target>
        </trans-unit>
        <trans-unit id="263534a8d3cd1368405332d115a3e8a5e0916791" translate="yes" xml:space="preserve">
          <source>Change the current line input history.</source>
          <target state="translated">改变当前行输入历史。</target>
        </trans-unit>
        <trans-unit id="e135b569c9c36fdc4c10a1b8dd5606f2dde8cdda" translate="yes" xml:space="preserve">
          <source>Change the time at which the file or directory was last accessed.</source>
          <target state="translated">改变文件或目录最后一次被访问的时间。</target>
        </trans-unit>
        <trans-unit id="75a57fef1bcad1b10050502db22d105dd5b681bb" translate="yes" xml:space="preserve">
          <source>Change the time at which the file or directory was last modified.</source>
          <target state="translated">更改文件或目录最后修改的时间。</target>
        </trans-unit>
        <trans-unit id="b543b3e3f6d011d29dc48b49b65528b6bfe6213c" translate="yes" xml:space="preserve">
          <source>Change the working directory to the given path.</source>
          <target state="translated">将工作目录改为给定路径。</target>
        </trans-unit>
        <trans-unit id="6b7fe5344acf1d056f5c7f968f7d90a57f5755a8" translate="yes" xml:space="preserve">
          <source>Changes the current working directory to ⟨dir⟩. A &amp;ldquo;&lt;code&gt;~&lt;/code&gt;&amp;rdquo; symbol at the beginning of ⟨dir⟩ will be replaced by the contents of the environment variable &lt;code id=&quot;index-23&quot;&gt;HOME&lt;/code&gt;. See also the &lt;a href=&quot;#ghci-cmd-:show%20paths&quot;&gt;&lt;code&gt;:show paths&lt;/code&gt;&lt;/a&gt; command for showing the current working directory.</source>
          <target state="translated">将当前工作目录更改为&amp;ldquo;⟨dir&amp;rdquo;。⟨dir⟩开头的&amp;ldquo; &lt;code&gt;~&lt;/code&gt; &amp;rdquo;符号将替换为环境变量 &lt;code id=&quot;index-23&quot;&gt;HOME&lt;/code&gt; 的内容。也可以使用&lt;a href=&quot;#ghci-cmd-:show%20paths&quot;&gt; &lt;code&gt;:show paths&lt;/code&gt; &lt;/a&gt;命令显示当前的工作目录。</target>
        </trans-unit>
        <trans-unit id="02830b0e406321c00f4e989af81f77de40608024" translate="yes" xml:space="preserve">
          <source>Changing file ownership</source>
          <target state="translated">改变文件所有权</target>
        </trans-unit>
        <trans-unit id="67fe79d904122f61e2cdc2d493c6c81c184e8492" translate="yes" xml:space="preserve">
          <source>Changing file timestamps</source>
          <target state="translated">更改文件时间戳</target>
        </trans-unit>
        <trans-unit id="0f9ba953e35135a3f8ec268817cc92f2557202a9" translate="yes" xml:space="preserve">
          <source>Char</source>
          <target state="translated">Char</target>
        </trans-unit>
        <trans-unit id="6463234936cd262a8d045abb04db34f49114c50c" translate="yes" xml:space="preserve">
          <source>Char#</source>
          <target state="translated">Char#</target>
        </trans-unit>
        <trans-unit id="56bec3c9c8a8dad6071b1b6b042ef9a2a5bda1c1" translate="yes" xml:space="preserve">
          <source>Char7 encode a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Char7对 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 进行编码。</target>
        </trans-unit>
        <trans-unit id="ca25f4863f8e85cc61cbab5a040f8d62a44d6c3f" translate="yes" xml:space="preserve">
          <source>Char7 encode a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Char7编码一个 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7944d84952e03be4a7f69bb2af7dd857be996747" translate="yes" xml:space="preserve">
          <source>Char7 encode a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d8aa8dbc448bf6435de25a933ea14a00f8bd3e" translate="yes" xml:space="preserve">
          <source>Char7 encode a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a641cf47ecbd4c697e96c66aba11b0c68cdc70" translate="yes" xml:space="preserve">
          <source>Char8 encode a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Char8对 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 进行编码。</target>
        </trans-unit>
        <trans-unit id="73a137c3d21795e097bcef660d4a361b0293d6b9" translate="yes" xml:space="preserve">
          <source>Char8 encode a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Char8编码一个 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="806351eb1d21f41b4f14d2e5cb77c1d44de0b39d" translate="yes" xml:space="preserve">
          <source>Char8 encode a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066e74b4858d2de6b482fe998d3b517bff80ddaa" translate="yes" xml:space="preserve">
          <source>Char8 encode a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92af232f3a9bd64dcd64ea977038fd76b6e233ed" translate="yes" xml:space="preserve">
          <source>CharBufElem</source>
          <target state="translated">CharBufElem</target>
        </trans-unit>
        <trans-unit id="1029d1073715d0c2874bb05515b41e266c15b911" translate="yes" xml:space="preserve">
          <source>CharBuffer</source>
          <target state="translated">CharBuffer</target>
        </trans-unit>
        <trans-unit id="69cd83e8ac58e314719145762c2f1e00606d331f" translate="yes" xml:space="preserve">
          <source>CharParser</source>
          <target state="translated">CharParser</target>
        </trans-unit>
        <trans-unit id="40fd1d8ea17fad45eeb0dcb82eff37e2a5f260c9" translate="yes" xml:space="preserve">
          <source>CharPos</source>
          <target state="translated">CharPos</target>
        </trans-unit>
        <trans-unit id="cf26c45564a5d71f6fbcb46788282afd466cd0cd" translate="yes" xml:space="preserve">
          <source>CharRep</source>
          <target state="translated">CharRep</target>
        </trans-unit>
        <trans-unit id="fb8fc97261645407d2f98f04514273d3d0cb5189" translate="yes" xml:space="preserve">
          <source>Character Parsing</source>
          <target state="translated">字符解析</target>
        </trans-unit>
        <trans-unit id="11a965778572465b297760373bc0ab9a5fe50dd4" translate="yes" xml:space="preserve">
          <source>Character classification</source>
          <target state="translated">角色分类</target>
        </trans-unit>
        <trans-unit id="96ba4ad9b6b1f70ec2978c3be7ed7b307b7c2671" translate="yes" xml:space="preserve">
          <source>Character encodings</source>
          <target state="translated">字符编码</target>
        </trans-unit>
        <trans-unit id="4e9dedca31fc0a76de315c47da7f7ed9522f709a" translate="yes" xml:space="preserve">
          <source>Character literal</source>
          <target state="translated">字面意思</target>
        </trans-unit>
        <trans-unit id="e427563a8b5dc581e2494d6b8c388bc1ad418d61" translate="yes" xml:space="preserve">
          <source>Characters &lt;code&gt;'0'&lt;/code&gt; through &lt;code&gt;'9'&lt;/code&gt; are converted properly to &lt;code&gt;0..9&lt;/code&gt;:</source>
          <target state="translated">字符 &lt;code&gt;'0'&lt;/code&gt; 到 &lt;code&gt;'9'&lt;/code&gt; 正确转换为 &lt;code&gt;0..9&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="eb4562ddc1f04fb37fa10db9a68fa2f0e8c61127" translate="yes" xml:space="preserve">
          <source>Characters that appeared immediately to the left of &lt;code&gt;&lt;a href=&quot;text-printf#v:fmtChar&quot;&gt;fmtChar&lt;/a&gt;&lt;/code&gt; in the format and were accepted by the type's &lt;code&gt;&lt;a href=&quot;text-printf#v:parseFormat&quot;&gt;parseFormat&lt;/a&gt;&lt;/code&gt;. Normally the empty string.</source>
          <target state="translated">以格式立即出现在 &lt;code&gt;&lt;a href=&quot;text-printf#v:fmtChar&quot;&gt;fmtChar&lt;/a&gt;&lt;/code&gt; 左侧并被该类型的 &lt;code&gt;&lt;a href=&quot;text-printf#v:parseFormat&quot;&gt;parseFormat&lt;/a&gt;&lt;/code&gt; 接受的字符。通常为空字符串。</target>
        </trans-unit>
        <trans-unit id="908bf09306338791f760412f7c7988ee09c08be0" translate="yes" xml:space="preserve">
          <source>Characters which count as whitespace</source>
          <target state="translated">算作空格的字符</target>
        </trans-unit>
        <trans-unit id="9d410b862f74f639c4ccd481bdde8ba8344a5692" translate="yes" xml:space="preserve">
          <source>Characters which set off quotes</source>
          <target state="translated">衬托引号的字符</target>
        </trans-unit>
        <trans-unit id="fa756d077568ca3fa7947f31c705c22d117ea195" translate="yes" xml:space="preserve">
          <source>Chars</source>
          <target state="translated">Chars</target>
        </trans-unit>
        <trans-unit id="2e60ca723b4ed6f5fe1f74ebd6455919301f1401" translate="yes" xml:space="preserve">
          <source>Check consistency of dependencies in the package database, and report packages that have missing dependencies.</source>
          <target state="translated">检查包数据库中依赖关系的一致性,并报告有缺失依赖关系的包。</target>
        </trans-unit>
        <trans-unit id="ef742726504fae73624f1d2740eee33b1e18a5f5" translate="yes" xml:space="preserve">
          <source>Check for equivalence with &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">用 &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; 检查等效性。</target>
        </trans-unit>
        <trans-unit id="de449d61d494945947e42f41ad579bebeff5e057" translate="yes" xml:space="preserve">
          <source>Check for types that have all the fields being updated. For example:</source>
          <target state="translated">检查是否有所有字段被更新的类型。例如:</target>
        </trans-unit>
        <trans-unit id="25aad50f0d98555e9126477d94936281988cdbdd" translate="yes" xml:space="preserve">
          <source>Check that the boolean condition is true and, if not, &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">检查布尔条件是否为true，如果不是，则 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="11a65f40a8c0c96612141eee9a7f9eb387c8de3b" translate="yes" xml:space="preserve">
          <source>Check the invariant lazily.</source>
          <target state="translated">懒得检查不变式。</target>
        </trans-unit>
        <trans-unit id="bd68f45e63afd7b81448d1161a637f4740403686" translate="yes" xml:space="preserve">
          <source>Check the invariant strictly.</source>
          <target state="translated">严格检查不变性。</target>
        </trans-unit>
        <trans-unit id="2d152033bdb1cb8a45c7f057dae3baf09a98ae2a" translate="yes" xml:space="preserve">
          <source>Check whether a given &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">检查给定的 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 是否为空。</target>
        </trans-unit>
        <trans-unit id="7a141584193fc65caf312c7c3cddb0fcb2070af5" translate="yes" xml:space="preserve">
          <source>Check whether a given &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">检查给定的 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; 是否为空。</target>
        </trans-unit>
        <trans-unit id="4d28efe491390c6fe1ac8116c9cfdb5631d83fe1" translate="yes" xml:space="preserve">
          <source>Check whether a given &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">检查给定的 &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 是否为空。</target>
        </trans-unit>
        <trans-unit id="5a5443b9581579f42781516a697f0d0a7ee7f754" translate="yes" xml:space="preserve">
          <source>Check whether an existing &lt;code&gt;path&lt;/code&gt; is a symbolic link. If &lt;code&gt;path&lt;/code&gt; is a regular file or directory, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; is returned. If &lt;code&gt;path&lt;/code&gt; does not exist or is otherwise inaccessible, an exception is thrown (see below).</source>
          <target state="translated">检查现有 &lt;code&gt;path&lt;/code&gt; 是否为符号链接。如果 &lt;code&gt;path&lt;/code&gt; 是常规文件或目录，则返回 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 。如果 &lt;code&gt;path&lt;/code&gt; 不存在或无法访问，则会引发异常（请参见下文）。</target>
        </trans-unit>
        <trans-unit id="9aed78b9f2fc66a97f4b3828eefcf158c19b3680" translate="yes" xml:space="preserve">
          <source>Check whether an existing &lt;code&gt;path&lt;/code&gt; is a symbolic link. If &lt;code&gt;path&lt;/code&gt; is a regular file or directory, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; is returned. If &lt;code&gt;path&lt;/code&gt; does not exist or is otherwise inaccessible, an exception is thrown (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82dbd9b339d6f7f92f4bd0c72b0bef9f5a34c4a1" translate="yes" xml:space="preserve">
          <source>Check whether one string is a substring of another. &lt;code&gt;isInfixOf
 p s&lt;/code&gt; is equivalent to &lt;code&gt;not (null (findSubstrings p s))&lt;/code&gt;.</source>
          <target state="translated">检查一个字符串是否是另一个的子字符串。 &lt;code&gt;isInfixOf p s&lt;/code&gt; 等效于 &lt;code&gt;not (null (findSubstrings p s))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7fdf24713c560ff98cf452189cb048219eca67de" translate="yes" xml:space="preserve">
          <source>Check whether the given &lt;code&gt;&lt;a href=&quot;system-directory-internal#t:FileType&quot;&gt;FileType&lt;/a&gt;&lt;/code&gt; is considered a directory by the operating system. This affects the choice of certain functions e.g. &lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectory&quot;&gt;removeDirectory&lt;/a&gt;&lt;/code&gt; vs &lt;code&gt;&lt;a href=&quot;system-directory#v:removeFile&quot;&gt;removeFile&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">检查操作系统是否将给定的 &lt;code&gt;&lt;a href=&quot;system-directory-internal#t:FileType&quot;&gt;FileType&lt;/a&gt;&lt;/code&gt; 视为目录。这会影响某些功能的选择，例如 &lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectory&quot;&gt;removeDirectory&lt;/a&gt;&lt;/code&gt; 与 &lt;code&gt;&lt;a href=&quot;system-directory#v:removeFile&quot;&gt;removeFile&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52740c11c5d39eaa519b1832e56f1e95c8609f55" translate="yes" xml:space="preserve">
          <source>CheckParity</source>
          <target state="translated">CheckParity</target>
        </trans-unit>
        <trans-unit id="09a06f8efb932eccedb1dd7a9216909430208a61" translate="yes" xml:space="preserve">
          <source>Checked multiplication</source>
          <target state="translated">检查乘法</target>
        </trans-unit>
        <trans-unit id="ea3ac447c448b90e76751006f13e1748798bb639" translate="yes" xml:space="preserve">
          <source>Checked multiplication. Calls &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the result would overflow.</source>
          <target state="translated">检查乘法。如果结果溢出，则调用 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f0d53e241985069ceb51705a16b43d06a5acc8f" translate="yes" xml:space="preserve">
          <source>Checking file existence and permissions</source>
          <target state="translated">检查文件的存在和权限</target>
        </trans-unit>
        <trans-unit id="4464fb45383f2597a31ff80b2d8dbda1450c4726" translate="yes" xml:space="preserve">
          <source>Checking for consistency</source>
          <target state="translated">检查一致性</target>
        </trans-unit>
        <trans-unit id="ca3a7a57aa4a608fe51ddc03446b424b880acba0" translate="yes" xml:space="preserve">
          <source>Checking for determinism</source>
          <target state="translated">检查决定论</target>
        </trans-unit>
        <trans-unit id="a7f7acb822fded721293744105332288e2484ab2" translate="yes" xml:space="preserve">
          <source>Checks for the existence of the file.</source>
          <target state="translated">检查文件是否存在。</target>
        </trans-unit>
        <trans-unit id="b4ab3ea54f7e566d3d728008dc0c562ddc7c45d3" translate="yes" xml:space="preserve">
          <source>Checks if this file is a block device.</source>
          <target state="translated">检查该文件是否为块设备。</target>
        </trans-unit>
        <trans-unit id="a9eeb420f641371df249b8ac2aae9cd0ac5ba1bd" translate="yes" xml:space="preserve">
          <source>Checks if this file is a character device.</source>
          <target state="translated">检查该文件是否为字符设备。</target>
        </trans-unit>
        <trans-unit id="7a7a7cc4baffd5c22aa4dd7ed8e12cdbe92b8017" translate="yes" xml:space="preserve">
          <source>Checks if this file is a directory device.</source>
          <target state="translated">检查该文件是否为目录设备。</target>
        </trans-unit>
        <trans-unit id="a6b75a7cca0bb0ff7447a30447eb3daca3fc1c91" translate="yes" xml:space="preserve">
          <source>Checks if this file is a named pipe device.</source>
          <target state="translated">检查该文件是否为命名管道设备。</target>
        </trans-unit>
        <trans-unit id="fcc9d0081bb40037655c3ba6937c9168f5f71295" translate="yes" xml:space="preserve">
          <source>Checks if this file is a regular file device.</source>
          <target state="translated">检查该文件是否为常规文件设备。</target>
        </trans-unit>
        <trans-unit id="2fc3ff702b6140e0eb8eb69271ae1bd3182c40b0" translate="yes" xml:space="preserve">
          <source>Checks if this file is a socket device.</source>
          <target state="translated">检查该文件是否为套接字设备。</target>
        </trans-unit>
        <trans-unit id="b2afe097f238b20f51392bcd05b20dff1668d511" translate="yes" xml:space="preserve">
          <source>Checks if this file is a symbolic link device.</source>
          <target state="translated">检查这个文件是否是一个符号链接设备。</target>
        </trans-unit>
        <trans-unit id="a865b429ea0c77675a6dd025a7152c183a8bd24d" translate="yes" xml:space="preserve">
          <source>Checks whether the given piece of HTML is empty.</source>
          <target state="translated">检查给定的HTML是否为空。</target>
        </trans-unit>
        <trans-unit id="6842c74c4d5122bd28c5c4fc9d30c451e8a95d41" translate="yes" xml:space="preserve">
          <source>Child</source>
          <target state="translated">Child</target>
        </trans-unit>
        <trans-unit id="37ea6ef6e4338441ebeb5e096561bf600ba81fca" translate="yes" xml:space="preserve">
          <source>ChildLimit</source>
          <target state="translated">ChildLimit</target>
        </trans-unit>
        <trans-unit id="a1d44262e667f0e22eca44263d5bbb77be567d2c" translate="yes" xml:space="preserve">
          <source>Choice, for arrows that support it. This class underlies the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;case&lt;/code&gt; constructs in arrow notation.</source>
          <target state="translated">选择，寻找支持它的箭头。该类以箭头符号表示 &lt;code&gt;if&lt;/code&gt; 和 &lt;code&gt;case&lt;/code&gt; 构造的基础。</target>
        </trans-unit>
        <trans-unit id="13af4af8e3e12cca4c60c768de395cb0f257043c" translate="yes" xml:space="preserve">
          <source>Chris Dornan &amp;lt;chris@chrisdornan.com&amp;gt;</source>
          <target state="translated">克里斯&amp;middot;多南&amp;lt;chris@chrisdornan.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="daa5b3c4fad889858348d9c19a1c5933411b0421" translate="yes" xml:space="preserve">
          <source>Chris Okasaki and Andy Gill, &quot;&lt;em&gt;Fast Mergeable Integer Maps&lt;/em&gt;&quot;, Workshop on ML, September 1998, pages 77-86, &lt;a href=&quot;http://citeseer.ist.psu.edu/okasaki98fast.html&quot;&gt;http://citeseer.ist.psu.edu/okasaki98fast.html&lt;/a&gt;</source>
          <target state="translated">Chris Okasaki和Andy Gill，&amp;ldquo; &lt;em&gt;快速可合并整数映射&lt;/em&gt; &amp;rdquo;，关于ML的研讨会，1998年9月，第77-86页，&lt;a href=&quot;http://citeseer.ist.psu.edu/okasaki98fast.html&quot;&gt;http：&lt;/a&gt; //citeseer.ist.psu.edu/okasaki98fast.html</target>
        </trans-unit>
        <trans-unit id="ed6f6fc339c9088311874c37e2861e67295e97c2" translate="yes" xml:space="preserve">
          <source>Chris Okasaki and Andy Gill, &quot;&lt;em&gt;Fast Mergeable Integer Maps&lt;/em&gt;&quot;, Workshop on ML, September 1998, pages 77-86, &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.37.5452&quot;&gt;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.37.5452&lt;/a&gt;</source>
          <target state="translated">Chris Okasaki和Andy Gill，&amp;ldquo; &lt;em&gt;快速可合并整数映射&lt;/em&gt; &amp;rdquo;，关于ML的研讨会，1998年9月，第77-86页，&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.37.5452&quot;&gt;http：&lt;/a&gt; //citeseerx.ist.psu.edu/viewdoc/summary？doi = 10.1.1.37.5452</target>
        </trans-unit>
        <trans-unit id="bb618ab2d17116430268c3b604170b890ad43696" translate="yes" xml:space="preserve">
          <source>Chunk allocation sizes</source>
          <target state="translated">分块分配大小</target>
        </trans-unit>
        <trans-unit id="7777060af843be77aa5fec39d877f4b2ffeaee57" translate="yes" xml:space="preserve">
          <source>Chunk to insert.</source>
          <target state="translated">块插入。</target>
        </trans-unit>
        <trans-unit id="410001263d4aa32074ffb0d3a6eb2ff557bad6c2" translate="yes" xml:space="preserve">
          <source>Chunk-wise application of &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:primMapByteStringBounded&quot;&gt;primMapByteStringBounded&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:primMapByteStringBounded&quot;&gt;primMapByteStringBounded&lt;/a&gt;&lt;/code&gt; 明智地应用primMapByteStringBounded。</target>
        </trans-unit>
        <trans-unit id="b4f59873cb3e72fb38cf19d2b36fab47d679c94f" translate="yes" xml:space="preserve">
          <source>ChunkIOStream</source>
          <target state="translated">ChunkIOStream</target>
        </trans-unit>
        <trans-unit id="d97a67e9246e46a1be8dbb497eed30b48a60bc9d" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; defines operations on sequentially ordered types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-enum#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; 类定义对顺序排序的类型的操作。</target>
        </trans-unit>
        <trans-unit id="819336fd3db33e885f20dc739ecf93f47f1b9f76" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; defines operations on sequentially ordered types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; 类定义对顺序排序的类型的操作。</target>
        </trans-unit>
        <trans-unit id="d40184336a522bd6bc26b0c42ef807a3a543b2ad" translate="yes" xml:space="preserve">
          <source>Class and instance declarations (&lt;a href=&quot;#cls-inst-scoped-tyvars&quot;&gt;Class and instance declarations&lt;/a&gt;)</source>
          <target state="translated">类和实例声明（&lt;a href=&quot;#cls-inst-scoped-tyvars&quot;&gt;类和实例声明&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="924e048091aed52128ab74910590a52413dde333" translate="yes" xml:space="preserve">
          <source>Class and type-family instance declarations are simply added to the list of available instances, with one exception. Since you might want to re-define one, a class instance &lt;em&gt;replaces&lt;/em&gt; any earlier instance with an identical head. You aren&amp;rsquo;t allowed to re-define a type family instance, since it might not be type safe to do so. Instead, re-define the whole type-family. (See &lt;a href=&quot;glasgow_exts#type-families&quot;&gt;Type families&lt;/a&gt;.) For example:</source>
          <target state="translated">仅将类和类型家族实例声明添加到可用实例列表中，只有一个例外。由于您可能想重新定义一个，因此一个类实例&lt;em&gt;将&lt;/em&gt;用相同的头部&lt;em&gt;替换&lt;/em&gt;任何较早的实例。不允许您重新定义类型系列实例，因为这样做可能不安全。而是，重新定义整个类型族。（请参阅&lt;a href=&quot;glasgow_exts#type-families&quot;&gt;类型族&lt;/a&gt;。）例如：</target>
        </trans-unit>
        <trans-unit id="dbd6445135b61fd761e687dcf8a870f3ea1dea84" translate="yes" xml:space="preserve">
          <source>Class constraints, e.g. &lt;code&gt;Show a&lt;/code&gt;</source>
          <target state="translated">类约束，例如 &lt;code&gt;Show a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d7bca3e56080c23850f3acb90b54dcb1a96dc654" translate="yes" xml:space="preserve">
          <source>Class declarations is exactly as in Haskell, except that you may not put default method declarations. You can also omit all the superclasses and class methods entirely; but you must either omit them all or put them all in.</source>
          <target state="translated">类声明和Haskell中的完全一样,只是你可以不放默认方法声明。你也可以完全省略所有的超类和类方法;但你必须省略所有的超类和类方法,或者把它们全部放进去。</target>
        </trans-unit>
        <trans-unit id="c04fb6dc921e526046174553a4c408bf753d8ee0" translate="yes" xml:space="preserve">
          <source>Class for datatypes that represent data constructors</source>
          <target state="translated">表示数据构造器的数据类型的类。</target>
        </trans-unit>
        <trans-unit id="d7cc5c22214efa6a1295a7d24536607aca2083df" translate="yes" xml:space="preserve">
          <source>Class for datatypes that represent datatypes</source>
          <target state="translated">代表数据类型的数据类型类</target>
        </trans-unit>
        <trans-unit id="e127b45647c9a4c3ba8f7ac4875018fbb6a16737" translate="yes" xml:space="preserve">
          <source>Class for datatypes that represent records</source>
          <target state="translated">代表记录的数据类型的类</target>
        </trans-unit>
        <trans-unit id="8549ac8b4ee9bfeb8645985029308c53753bf854" translate="yes" xml:space="preserve">
          <source>Class for string-like datastructures; used by the overloaded string extension (-XOverloadedStrings in GHC).</source>
          <target state="translated">类似字符串的数据结构类;由重载字符串扩展(GHC中的-XOverloadedStrings)使用。</target>
        </trans-unit>
        <trans-unit id="4948308069f33f36a4053463c9649351542c16cf" translate="yes" xml:space="preserve">
          <source>Class methods&amp;rsquo; type arguments include the class type variables, followed by any variables an individual method is polymorphic in. So, &lt;code&gt;class Monad m where return :: a -&amp;gt; m a&lt;/code&gt; means that &lt;code&gt;return&lt;/code&gt;&amp;lsquo;s type arguments are &lt;code&gt;m, a&lt;/code&gt;.</source>
          <target state="translated">类方法的类型参数包括类类型变量，然后是单个方法是多态的所有变量。因此， &lt;code&gt;class Monad m where return :: a -&amp;gt; m a&lt;/code&gt; 表示 &lt;code&gt;return&lt;/code&gt; 的类型参数为 &lt;code&gt;m, a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="010e6b293a7b7949ca86158365e2fcf17d4dac85" translate="yes" xml:space="preserve">
          <source>Class methods&amp;rsquo; type arguments include the class type variables, followed by any variables an individual method is polymorphic in. So, &lt;code&gt;class Monad m where return :: a -&amp;gt; m a&lt;/code&gt; means that &lt;code&gt;return&lt;/code&gt;&amp;rsquo;s type arguments are &lt;code&gt;m, a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3b2c4ae4fed83178d28ffb4d6469c4f1fac0b3" translate="yes" xml:space="preserve">
          <source>Class of buffered IO devices</source>
          <target state="translated">缓冲IO设备类别</target>
        </trans-unit>
        <trans-unit id="dcb424210f30d3d1885a481fb6e80274f648bf66" translate="yes" xml:space="preserve">
          <source>Class of data structures that can be folded to a summary value.</source>
          <target state="translated">一类可以折叠成摘要值的数据结构。</target>
        </trans-unit>
        <trans-unit id="86acf5be4bcf0f38d7ad86842a5e8b8d12bdcd6f" translate="yes" xml:space="preserve">
          <source>Class of data structures that can be traversed from left to right, performing an action on each element.</source>
          <target state="translated">一类可以从左到右遍历的数据结构,对每个元素进行操作。</target>
        </trans-unit>
        <trans-unit id="0241949bfd1df7bd2b0081e06778e290d086e82f" translate="yes" xml:space="preserve">
          <source>Class of immutable array types.</source>
          <target state="translated">不可变数组类型的类。</target>
        </trans-unit>
        <trans-unit id="cac499272eb010644590cb8d20b3650649d0272d" translate="yes" xml:space="preserve">
          <source>Class of monads based on &lt;code&gt;IO&lt;/code&gt;.</source>
          <target state="translated">基于 &lt;code&gt;IO&lt;/code&gt; 的monad类。</target>
        </trans-unit>
        <trans-unit id="740da89f6aef37ca8e423a79a1d1e996f6b8fb03" translate="yes" xml:space="preserve">
          <source>Class of mutable array types</source>
          <target state="translated">可变数组类型的类别</target>
        </trans-unit>
        <trans-unit id="c31c068d3603ea16b7e5bf11e6ba00a6f58a81aa" translate="yes" xml:space="preserve">
          <source>Class of mutable array types.</source>
          <target state="translated">可变数组类型类。</target>
        </trans-unit>
        <trans-unit id="eeec90853fc9b89566dd858a99cee46219c6fb39" translate="yes" xml:space="preserve">
          <source>ClassName</source>
          <target state="translated">ClassName</target>
        </trans-unit>
        <trans-unit id="69ed6e820b1deef905c18fab761e23a80cfa9b95" translate="yes" xml:space="preserve">
          <source>ClassStyle</source>
          <target state="translated">ClassStyle</target>
        </trans-unit>
        <trans-unit id="ed1846afee3be21521286932b99e2aeae9e6414a" translate="yes" xml:space="preserve">
          <source>Classes</source>
          <target state="translated">Classes</target>
        </trans-unit>
        <trans-unit id="66fb29109f0accb4d436590329b4f5afec345136" translate="yes" xml:space="preserve">
          <source>Classes are subject to the same rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d405817f67f8ccd40d1f186d851d563829e280b7" translate="yes" xml:space="preserve">
          <source>Classes have their roles default to nominal to promote coherence of class instances. If a &lt;code&gt;C Int&lt;/code&gt; were stored in a datatype, it would be quite bad if that were somehow changed into a &lt;code&gt;C Age&lt;/code&gt; somewhere, especially if another &lt;code&gt;C Age&lt;/code&gt; had been declared!</source>
          <target state="translated">类的角色默认为名义角色，以促进类实例的一致性。如果将 &lt;code&gt;C Int&lt;/code&gt; 存储在数据类型中，如果以某种方式将C Int更改为 &lt;code&gt;C Age&lt;/code&gt; ，那将是非常糟糕的，特别是如果已经声明了另一个 &lt;code&gt;C Age&lt;/code&gt; ！</target>
        </trans-unit>
        <trans-unit id="93b7e7a75ba6d33fe9be07d2a3e2fa9626b54d48" translate="yes" xml:space="preserve">
          <source>Classifying I/O errors</source>
          <target state="translated">I/O错误的分类</target>
        </trans-unit>
        <trans-unit id="bfa26f82d31c6894fd22c56cda343f490718f895" translate="yes" xml:space="preserve">
          <source>Clause</source>
          <target state="translated">Clause</target>
        </trans-unit>
        <trans-unit id="9b872e330183d04e1a1a4290222d5cb47562a233" translate="yes" xml:space="preserve">
          <source>ClauseQ</source>
          <target state="translated">ClauseQ</target>
        </trans-unit>
        <trans-unit id="ee7cfdc9ab0d2f3ca826d7784900906fd869f0c4" translate="yes" xml:space="preserve">
          <source>Cleans up the process.</source>
          <target state="translated">清理过程。</target>
        </trans-unit>
        <trans-unit id="2e2883e56829ccbd086b2dd5718641dbc818fcfd" translate="yes" xml:space="preserve">
          <source>Clear display after cursor.</source>
          <target state="translated">清除光标后的显示。</target>
        </trans-unit>
        <trans-unit id="7d39c804b5f0f442455fdc7a9b1ab8e70d955dec" translate="yes" xml:space="preserve">
          <source>Clear from beginning of line to cursor.</source>
          <target state="translated">从行首到光标的清除。</target>
        </trans-unit>
        <trans-unit id="863fe34b6840d335bdcff9f93282d90d0ad96d1f" translate="yes" xml:space="preserve">
          <source>Clear from cursor to end of line.</source>
          <target state="translated">从光标到行尾清除。</target>
        </trans-unit>
        <trans-unit id="169f7f4047b8ceccc556f3729a697372b83a0de4" translate="yes" xml:space="preserve">
          <source>Clear the list of active plugins</source>
          <target state="translated">清除活动插件列表</target>
        </trans-unit>
        <trans-unit id="c6d618522c990e09135eec0305687f5879f50def" translate="yes" xml:space="preserve">
          <source>Clear the list of plugins previously specified with &lt;a href=&quot;#ghc-flag--fplugin=%E2%9F%A8module%E2%9F%A9&quot;&gt;&lt;code&gt;-fplugin&lt;/code&gt;&lt;/a&gt;. This is useful in GHCi where simply removing the &lt;a href=&quot;#ghc-flag--fplugin=%E2%9F%A8module%E2%9F%A9&quot;&gt;&lt;code&gt;-fplugin&lt;/code&gt;&lt;/a&gt; options from the command line is not possible. Instead &lt;code&gt;:set -fclear-plugins&lt;/code&gt; can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a119788b3630d8f3b45ede3cd009306fe477e64" translate="yes" xml:space="preserve">
          <source>Clear the list of plugins previously specified with &lt;code&gt;-fplugin&lt;/code&gt;. This is useful in GHCi where simply removing the &lt;code&gt;-fplugin&lt;/code&gt; options from the command line is not possible. Instead &lt;code&gt;:set -fclear-plugins&lt;/code&gt; can be used.</source>
          <target state="translated">清除先前用 &lt;code&gt;-fplugin&lt;/code&gt; 指定的插件列表。这在GHCi中非常有用，在GHCi中， &lt;code&gt;-fplugin&lt;/code&gt; 仅从命令行中删除-fplugin选项。相反，可以使用 &lt;code&gt;:set -fclear-plugins&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ffee99c0945047090206f8990265200cbc624e46" translate="yes" xml:space="preserve">
          <source>Clear the package db stack.</source>
          <target state="translated">清理包中的db堆栈。</target>
        </trans-unit>
        <trans-unit id="d480e0ec83525208c67c6460dd75891a7ca91e71" translate="yes" xml:space="preserve">
          <source>Clear the screen, and move the cursor to the upper left.</source>
          <target state="translated">清理屏幕,并将光标移至左上方。</target>
        </trans-unit>
        <trans-unit id="dc3e61dff076245afbb13dc5197f67c8287830f6" translate="yes" xml:space="preserve">
          <source>ClockTick</source>
          <target state="translated">ClockTick</target>
        </trans-unit>
        <trans-unit id="eee1c2870c3b40065a4220926d03eaeb0e857d08" translate="yes" xml:space="preserve">
          <source>Clone a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt;: similar to dupTChan, but the cloned channel starts with the same content available as the original channel.</source>
          <target state="translated">克隆 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt; ：类似于dupTChan，但是克隆的频道以与原始频道相同的内容开始。</target>
        </trans-unit>
        <trans-unit id="5d1cfcac4faffd2b08657d148dbd22de938d3212" translate="yes" xml:space="preserve">
          <source>Close a file descriptor in a concurrency-safe way (GHC only). If you are using &lt;code&gt;&lt;a href=&quot;ghc-conc#v:threadWaitRead&quot;&gt;threadWaitRead&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;ghc-conc#v:threadWaitWrite&quot;&gt;threadWaitWrite&lt;/a&gt;&lt;/code&gt; to perform blocking I/O, you &lt;em&gt;must&lt;/em&gt; use this function to close file descriptors, or blocked threads may not be woken.</source>
          <target state="translated">以并发安全的方式关闭文件描述符（仅适用于GHC）。如果使用 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:threadWaitRead&quot;&gt;threadWaitRead&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:threadWaitWrite&quot;&gt;threadWaitWrite&lt;/a&gt;&lt;/code&gt; 执行阻塞的I / O，则&lt;em&gt;必须&lt;/em&gt;使用此函数关闭文件描述符，否则可能不会唤醒阻塞的线程。</target>
        </trans-unit>
        <trans-unit id="fc87ec5b0ef750d4f2e2d9ec9a9ffcf65a6c4a96" translate="yes" xml:space="preserve">
          <source>Close a file descriptor in a concurrency-safe way (GHC only). If you are using &lt;code&gt;&lt;a href=&quot;ghc-conc-io#v:threadWaitRead&quot;&gt;threadWaitRead&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;ghc-conc-io#v:threadWaitWrite&quot;&gt;threadWaitWrite&lt;/a&gt;&lt;/code&gt; to perform blocking I/O, you &lt;em&gt;must&lt;/em&gt; use this function to close file descriptors, or blocked threads may not be woken.</source>
          <target state="translated">以并发安全的方式关闭文件描述符（仅适用于GHC）。如果使用 &lt;code&gt;&lt;a href=&quot;ghc-conc-io#v:threadWaitRead&quot;&gt;threadWaitRead&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;ghc-conc-io#v:threadWaitWrite&quot;&gt;threadWaitWrite&lt;/a&gt;&lt;/code&gt; 执行阻塞的I / O，则&lt;em&gt;必须&lt;/em&gt;使用此函数关闭文件描述符，否则可能不会唤醒阻塞的线程。</target>
        </trans-unit>
        <trans-unit id="d9092cf5ca26659c0b2af9e5b4531d24f8f6350d" translate="yes" xml:space="preserve">
          <source>Close a file descriptor in a race-safe way.</source>
          <target state="translated">以竞赛安全的方式关闭文件描述符。</target>
        </trans-unit>
        <trans-unit id="9d5c798e0344f77d1c996e5e81ff8d2b98453475" translate="yes" xml:space="preserve">
          <source>Close all file descriptors except stdin, stdout and stderr in the new process (on Windows, only works if std_in, std_out, and std_err are all Inherit). This implementation will call close an every fd from 3 to the maximum of open files, which can be slow for high maximum of open files.</source>
          <target state="translated">关闭新进程中除stdin、stdout和stderr以外的所有文件描述符(在Windows上,只有当std_in、std_out和std_err都是Inherit时才有效)。这个实现会在3到最大打开文件数的范围内,每隔一个fd就会调用关闭一个文件,这对于最大打开文件数较多的情况下会比较慢。</target>
        </trans-unit>
        <trans-unit id="98c3aa307a0312c2e11b280654b2f1d4079df142" translate="yes" xml:space="preserve">
          <source>Close the stream's file descriptor without passing a Handle. On POSIX systems this may lead to strange behavior in the child process because attempting to read or write after the file has been closed throws an error. This should only be used with child processes that don't use the file descriptor at all. If you wish to ignore the child process's output you should either create a pipe and drain it manually or pass a &lt;code&gt;Handle&lt;/code&gt; that writes to &lt;code&gt;/dev/null&lt;/code&gt;.</source>
          <target state="translated">在不传递句柄的情况下关闭流的文件描述符。在POSIX系统上，这可能导致子进程中的异常行为，因为在关闭文件后尝试读取或写入会引发错误。这仅应用于完全不使用文件描述符的子进程。如果您希望忽略子进程的输出，则应该创建一个管道并手动将其 &lt;code&gt;Handle&lt;/code&gt; ，或者传递一个写入 &lt;code&gt;/dev/null&lt;/code&gt; 的Handle。</target>
        </trans-unit>
        <trans-unit id="2ea2af70fc138f26f348cf6dad01ed75575e4e50" translate="yes" xml:space="preserve">
          <source>Close this file descriptor. May throw an exception if this is an invalid descriptor.</source>
          <target state="translated">关闭这个文件描述符。如果这是一个无效的描述符,可能会抛出一个异常。</target>
        </trans-unit>
        <trans-unit id="811752522d6efa2e6106b3e14a2e8c400418d872" translate="yes" xml:space="preserve">
          <source>CloseOnExec</source>
          <target state="translated">CloseOnExec</target>
        </trans-unit>
        <trans-unit id="74f5110afd9e5ed8f7ed4ee3f0d820b8ae840226" translate="yes" xml:space="preserve">
          <source>ClosePunctuation</source>
          <target state="translated">ClosePunctuation</target>
        </trans-unit>
        <trans-unit id="b5f942f4945ccd4503e37185b81abe3813c6153c" translate="yes" xml:space="preserve">
          <source>Closed type family declarations are permitted as in normal Haskell. They can also be given abstractly, as in the following example:</source>
          <target state="translated">像在普通的Haskell中一样,允许使用封闭式类型族声明。它们也可以抽象地给出,如下面的例子。</target>
        </trans-unit>
        <trans-unit id="9415135252407e489e4bef80489a80b7345ea075" translate="yes" xml:space="preserve">
          <source>Closed type family instances are subject to the same rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a22f8edc9ec00c1253daf3abe643715855ef7b2d" translate="yes" xml:space="preserve">
          <source>ClosedHandle</source>
          <target state="translated">ClosedHandle</target>
        </trans-unit>
        <trans-unit id="88cbb0e9b3665b84e68912220d84f4ccce482b9f" translate="yes" xml:space="preserve">
          <source>Closing files</source>
          <target state="translated">关闭文件</target>
        </trans-unit>
        <trans-unit id="6eff27329154e48d2497e2761cfc78ac4c290992" translate="yes" xml:space="preserve">
          <source>CmdSpec</source>
          <target state="translated">CmdSpec</target>
        </trans-unit>
        <trans-unit id="00c9ebb79d485779a8695c6f65000dd203007211" translate="yes" xml:space="preserve">
          <source>Cmm dumps don&amp;rsquo;t include unreachable blocks since we print blocks in reverse post-order.</source>
          <target state="translated">Cmm转储不包含无法访问的块，因为我们以相反的后顺序打印块。</target>
        </trans-unit>
        <trans-unit id="a72146b8b9af5c3ceb4aefd17f4f09c46ccaf1d2" translate="yes" xml:space="preserve">
          <source>CmpNat</source>
          <target state="translated">CmpNat</target>
        </trans-unit>
        <trans-unit id="af349cec81bbf377eb1d1b8aa70308944b0eb74a" translate="yes" xml:space="preserve">
          <source>CmpSymbol</source>
          <target state="translated">CmpSymbol</target>
        </trans-unit>
        <trans-unit id="c03c2f517bd68402abc80b64bf3c4c63c6929f29" translate="yes" xml:space="preserve">
          <source>Cn: Other, Not Assigned</source>
          <target state="translated">Cn:其他,未指定</target>
        </trans-unit>
        <trans-unit id="54221ba418721739a8ff14e82be112ff09a0e22b" translate="yes" xml:space="preserve">
          <source>Co: Other, Private Use</source>
          <target state="translated">有限公司 其他,私人用途</target>
        </trans-unit>
        <trans-unit id="416b4b5cbe12f3e7317518b4f66b2407e361a13f" translate="yes" xml:space="preserve">
          <source>Code coverage tools allow a programmer to determine what parts of their code have been actually executed, and which parts have never actually been invoked. GHC has an option for generating instrumented code that records code coverage as part of the Haskell Program Coverage (HPC) toolkit, which is included with GHC. HPC tools can be used to render the generated code coverage information into human understandable format.</source>
          <target state="translated">代码覆盖工具允许程序员确定他们的代码中哪些部分已经被实际执行,哪些部分从未被实际调用。GHC有一个选项用于生成记录代码覆盖率的工具代码,作为GHC中包含的Haskell程序覆盖率(HPC)工具包的一部分。HPC工具可以用来将生成的代码覆盖率信息渲染成人类可以理解的格式。</target>
        </trans-unit>
        <trans-unit id="d84ad6878edb87ffc63bd03d4c4722b820998eb1" translate="yes" xml:space="preserve">
          <source>Code duplication is common in instance declarations. A familiar pattern is lifting operations over an &lt;code&gt;Applicative&lt;/code&gt; functor. Instead of having catch-all instances for &lt;code&gt;f a&lt;/code&gt; which overlap with all other such instances, like so:</source>
          <target state="translated">代码复制在实例声明中很常见。熟悉的模式是在 &lt;code&gt;Applicative&lt;/code&gt; 函子上进行操作。而不是拥有与所有其他此类实例重叠的 &lt;code&gt;f a&lt;/code&gt; 全部实例，例如：</target>
        </trans-unit>
        <trans-unit id="f60f36f4db67f21e71a72761d315435a9c529b04" translate="yes" xml:space="preserve">
          <source>Code point</source>
          <target state="translated">代码点</target>
        </trans-unit>
        <trans-unit id="43c3c1202b40acaa8c60a0b568b196bc4472756d" translate="yes" xml:space="preserve">
          <source>Code that must be here for accessibility</source>
          <target state="translated">为了便于使用,这里必须有代码</target>
        </trans-unit>
        <trans-unit id="19853b6a9cc434dab30c8be6a98b0608be4cba57" translate="yes" xml:space="preserve">
          <source>CodePage</source>
          <target state="translated">CodePage</target>
        </trans-unit>
        <trans-unit id="26d60e31d9c3a523558e2dc242bf13dbf3396f76" translate="yes" xml:space="preserve">
          <source>CodingFailureMode</source>
          <target state="translated">CodingFailureMode</target>
        </trans-unit>
        <trans-unit id="41b57a1263ef8dd69abac21bfccbecfd18393172" translate="yes" xml:space="preserve">
          <source>CodingProgress</source>
          <target state="translated">CodingProgress</target>
        </trans-unit>
        <trans-unit id="d9ad8925f5fe3abf0c399e351d2f7304eb9b1b5e" translate="yes" xml:space="preserve">
          <source>Coerce a stable pointer to an address. No guarantees are made about the resulting value, except that the original stable pointer can be recovered by &lt;code&gt;&lt;a href=&quot;foreign-stableptr#v:castPtrToStablePtr&quot;&gt;castPtrToStablePtr&lt;/a&gt;&lt;/code&gt;. In particular, the address may not refer to an accessible memory location and any attempt to pass it to the member functions of the class &lt;code&gt;&lt;a href=&quot;foreign-storable#v:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; leads to undefined behaviour.</source>
          <target state="translated">强制指向地址的稳定指针。除了可以通过 &lt;code&gt;&lt;a href=&quot;foreign-stableptr#v:castPtrToStablePtr&quot;&gt;castPtrToStablePtr&lt;/a&gt;&lt;/code&gt; 恢复原始稳定指针之外，不保证结果值。特别是，该地址可能未引用可访问的内存位置，任何将其传递给 &lt;code&gt;&lt;a href=&quot;foreign-storable#v:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; 类的成员函数的尝试都将导致未定义的行为。</target>
        </trans-unit>
        <trans-unit id="f3a753242e593c3cac1ec904eafd7f1233ed77c5" translate="yes" xml:space="preserve">
          <source>Coerce a stable pointer to an address. No guarantees are made about the resulting value, except that the original stable pointer can be recovered by &lt;code&gt;&lt;a href=&quot;ghc-stable#v:castPtrToStablePtr&quot;&gt;castPtrToStablePtr&lt;/a&gt;&lt;/code&gt;. In particular, the address may not refer to an accessible memory location and any attempt to pass it to the member functions of the class &lt;code&gt;&lt;a href=&quot;foreign-storable#v:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; leads to undefined behaviour.</source>
          <target state="translated">强制指向地址的稳定指针。除了可以通过 &lt;code&gt;&lt;a href=&quot;ghc-stable#v:castPtrToStablePtr&quot;&gt;castPtrToStablePtr&lt;/a&gt;&lt;/code&gt; 恢复原始稳定指针之外，不保证结果值。特别是，该地址可能未引用可访问的内存位置，任何将其传递给 &lt;code&gt;&lt;a href=&quot;foreign-storable#v:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; 类的成员函数的尝试都将导致未定义的行为。</target>
        </trans-unit>
        <trans-unit id="ca19423ba5b20dbdc916f5f8a3dc500a52cd36db" translate="yes" xml:space="preserve">
          <source>Coerce directly from address to int.</source>
          <target state="translated">直接从地址胁迫到int。</target>
        </trans-unit>
        <trans-unit id="a4633d6025b85dfbf4ccf830e7d211bd0817e137" translate="yes" xml:space="preserve">
          <source>Coerce directly from int to address.</source>
          <target state="translated">直接从int胁迫到地址。</target>
        </trans-unit>
        <trans-unit id="c72f3c4e38a830abbf4c0149569760714debb495" translate="yes" xml:space="preserve">
          <source>Coercible</source>
          <target state="translated">Coercible</target>
        </trans-unit>
        <trans-unit id="a809433cf66e2c59e60de4aa71c982ddad377c2c" translate="yes" xml:space="preserve">
          <source>Coercion</source>
          <target state="translated">Coercion</target>
        </trans-unit>
        <trans-unit id="52d7ba5fbed6b59cde2f362b70b06b964ac9754e" translate="yes" xml:space="preserve">
          <source>Collect type and location information after loading modules. The commands &lt;a href=&quot;#ghci-cmd-:all-types&quot;&gt;&lt;code&gt;:all-types&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:loc-at&quot;&gt;&lt;code&gt;:loc-at&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:type-at&quot;&gt;&lt;code&gt;:type-at&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#ghci-cmd-:uses&quot;&gt;&lt;code&gt;:uses&lt;/code&gt;&lt;/a&gt; require &lt;code&gt;+c&lt;/code&gt; to be active.</source>
          <target state="translated">加载模块后收集类型和位置信息。命令&lt;a href=&quot;#ghci-cmd-:all-types&quot;&gt; &lt;code&gt;:all-types&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#ghci-cmd-:loc-at&quot;&gt; &lt;code&gt;:loc-at&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#ghci-cmd-:type-at&quot;&gt; &lt;code&gt;:type-at&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#ghci-cmd-:uses&quot;&gt; &lt;code&gt;:uses&lt;/code&gt; &lt;/a&gt;要求 &lt;code&gt;+c&lt;/code&gt; 处于活动状态。</target>
        </trans-unit>
        <trans-unit id="17a714fadd635197b2116c67227ed66f0ac0bcf5" translate="yes" xml:space="preserve">
          <source>CollectGCStats</source>
          <target state="translated">CollectGCStats</target>
        </trans-unit>
        <trans-unit id="32b4156b950cf504b11da81e465c1a2e42e07e67" translate="yes" xml:space="preserve">
          <source>Collecting errors</source>
          <target state="translated">收集错误</target>
        </trans-unit>
        <trans-unit id="6efff0338c27974aea0535f726a3188e30ffd9f2" translate="yes" xml:space="preserve">
          <source>Collects the list of elements of a structure, from left to right.</source>
          <target state="translated">从左到右收集一个结构的元素列表。</target>
        </trans-unit>
        <trans-unit id="1d0c8304baedcf8e3a78982c2e7c0b04622bf2a0" translate="yes" xml:space="preserve">
          <source>Color</source>
          <target state="translated">Color</target>
        </trans-unit>
        <trans-unit id="65ba00e95e60fb8971e699c771908e7c41d91624" translate="yes" xml:space="preserve">
          <source>Column</source>
          <target state="translated">Column</target>
        </trans-unit>
        <trans-unit id="25e719594fe4392044efc80322d910ef4492ead1" translate="yes" xml:space="preserve">
          <source>Combinators</source>
          <target state="translated">Combinators</target>
        </trans-unit>
        <trans-unit id="30d04e0fa9775766030300ce1babf8c3dc0c01f4" translate="yes" xml:space="preserve">
          <source>Combine</source>
          <target state="translated">Combine</target>
        </trans-unit>
        <trans-unit id="e3a781ea78ec285c4adbcbafd96b9cecd3645555" translate="yes" xml:space="preserve">
          <source>Combine the elements of a structure using a monoid.</source>
          <target state="translated">使用单体组合结构的元素。</target>
        </trans-unit>
        <trans-unit id="326743f99b0787ac5e15cb067df9da8c084bb783" translate="yes" xml:space="preserve">
          <source>Combine two paths with a path separator. If the second path starts with a path separator or a drive letter, then it returns the second. The intention is that &lt;code&gt;readFile (dir &lt;a href=&quot;system-filepath-posix#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt; file)&lt;/code&gt; will access the same file as &lt;code&gt;setCurrentDirectory dir; readFile file&lt;/code&gt;.</source>
          <target state="translated">将两个路径与路径分隔符结合在一起。如果第二条路径以路径分隔符或驱动器号开头，则它将返回第二条路径。目的是 &lt;code&gt;readFile (dir &lt;a href=&quot;system-filepath-posix#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt; file)&lt;/code&gt; 将访问与 &lt;code&gt;setCurrentDirectory dir; readFile file&lt;/code&gt; 相同的文件；readFile文件。</target>
        </trans-unit>
        <trans-unit id="078baed7b6f96f5ac4bcae9dd0fd976c0796a4ed" translate="yes" xml:space="preserve">
          <source>Combine two paths with a path separator. If the second path starts with a path separator or a drive letter, then it returns the second. The intention is that &lt;code&gt;readFile (dir &lt;a href=&quot;system-filepath-windows#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt; file)&lt;/code&gt; will access the same file as &lt;code&gt;setCurrentDirectory dir; readFile file&lt;/code&gt;.</source>
          <target state="translated">将两个路径与路径分隔符结合在一起。如果第二条路径以路径分隔符或驱动器号开头，则它将返回第二条路径。目的是 &lt;code&gt;readFile (dir &lt;a href=&quot;system-filepath-windows#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt; file)&lt;/code&gt; 将访问与 &lt;code&gt;setCurrentDirectory dir; readFile file&lt;/code&gt; 相同的文件；readFile文件。</target>
        </trans-unit>
        <trans-unit id="d371749c69756d64263bf1edcd9544ba068d339a" translate="yes" xml:space="preserve">
          <source>Combined allocation and marshalling</source>
          <target state="translated">合并分配和集结</target>
        </trans-unit>
        <trans-unit id="8c2bb286238fa0676a23f350beb14a91d4f1d379" translate="yes" xml:space="preserve">
          <source>Combined size of the filled and free space in the buffer.</source>
          <target state="translated">缓冲区内填充和空闲空间的组合大小。</target>
        </trans-unit>
        <trans-unit id="225d5977d8f87a56a27787ccff7686552cc76d19" translate="yes" xml:space="preserve">
          <source>Combined:</source>
          <target state="translated">Combined:</target>
        </trans-unit>
        <trans-unit id="a3baedfb2d4f69ab62a34902311439fb3ab84874" translate="yes" xml:space="preserve">
          <source>Combines all parsers in the specified list.</source>
          <target state="translated">合并指定列表中的所有解析器。</target>
        </trans-unit>
        <trans-unit id="bc34b78e49e60ab0df88484977f09e92b544b526" translate="yes" xml:space="preserve">
          <source>Combines the elements of a structure in a left associative manner. Given a hypothetical function &lt;code&gt;toEitherList :: p a b -&amp;gt; [Either a b]&lt;/code&gt; yielding a list of all elements of a structure in order, the following would hold:</source>
          <target state="translated">以左关联方式组合结构的元素。给定一个假设函数 &lt;code&gt;toEitherList :: p a b -&amp;gt; [Either a b]&lt;/code&gt; 产生按顺序列出结构中所有元素的列表，则以下内容将成立：</target>
        </trans-unit>
        <trans-unit id="21a0aac12edbd3a2453863bbf0b4359c2b22568b" translate="yes" xml:space="preserve">
          <source>Combines the elements of a structure in a right associative manner. Given a hypothetical function &lt;code&gt;toEitherList :: p a b -&amp;gt; [Either a b]&lt;/code&gt; yielding a list of all elements of a structure in order, the following would hold:</source>
          <target state="translated">以正确的关联方式组合结构的元素。给定一个假设函数 &lt;code&gt;toEitherList :: p a b -&amp;gt; [Either a b]&lt;/code&gt; 产生按顺序列出结构中所有元素的列表，则以下内容将成立：</target>
        </trans-unit>
        <trans-unit id="b15766e5b013b4e0a383e1d326453ad986906241" translate="yes" xml:space="preserve">
          <source>Combines the elements of a structure using a monoid.</source>
          <target state="translated">使用单体组合结构的元素。</target>
        </trans-unit>
        <trans-unit id="0d6850410c88f0cb9f5c453c497ed9e8e06dbe3d" translate="yes" xml:space="preserve">
          <source>Combines the elements of a structure, given ways of mapping them to a common monoid.</source>
          <target state="translated">结合一个结构的元素,给定它们映射到一个公共单体的方法。</target>
        </trans-unit>
        <trans-unit id="234c965158d8a66f7b8c4eca636aa31129a64470" translate="yes" xml:space="preserve">
          <source>Combines the two file modes into one that contains modes that appear in either.</source>
          <target state="translated">将两个文件模式合并成一个包含其中一个模式的模式。</target>
        </trans-unit>
        <trans-unit id="687b44f5f4bdb58538f25c112637bc3fbc0d5a31" translate="yes" xml:space="preserve">
          <source>Combines two file modes into one that only contains modes that appear in both.</source>
          <target state="translated">将两个文件模式合并成一个只包含两个模式的模式。</target>
        </trans-unit>
        <trans-unit id="afd4c024368ab6b220ce67fd02f540f219d8c426" translate="yes" xml:space="preserve">
          <source>Combining &lt;a href=&quot;phases#ghc-flag--threaded&quot;&gt;&lt;code&gt;-threaded&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ghc-flag--prof&quot;&gt;&lt;code&gt;-prof&lt;/code&gt;&lt;/a&gt; is perfectly fine, and indeed it is possible to profile a program running on multiple processors with the RTS &lt;code&gt;-N ⟨x⟩&lt;/code&gt; option. &lt;a href=&quot;#id7&quot; id=&quot;id4&quot;&gt;3&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d94bd5fd0802efbda98881240c8f23a765b78c53" translate="yes" xml:space="preserve">
          <source>Combining &lt;a href=&quot;phases#ghc-flag--threaded&quot;&gt;&lt;code&gt;-threaded&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ghc-flag--prof&quot;&gt;&lt;code&gt;-prof&lt;/code&gt;&lt;/a&gt; is perfectly fine, and indeed it is possible to profile a program running on multiple processors with the RTS &lt;code&gt;-N ⟨x⟩&lt;/code&gt; option. &lt;a href=&quot;#id7&quot; id=&quot;id4&quot;&gt;[3]&lt;/a&gt;</source>
          <target state="translated">结合使用&lt;a href=&quot;phases#ghc-flag--threaded&quot;&gt; &lt;code&gt;-threaded&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#ghc-flag--prof&quot;&gt; &lt;code&gt;-prof&lt;/code&gt; &lt;/a&gt;完全可以，并且确实可以使用RTS &lt;code&gt;-N ⟨x⟩&lt;/code&gt; 选项来分析在多个处理器上运行的程序。&lt;a href=&quot;#id7&quot; id=&quot;id4&quot;&gt;[3]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="932fc2151115c22c1df9b2b0817ce70119350f33" translate="yes" xml:space="preserve">
          <source>Combining documents</source>
          <target state="translated">合并文件</target>
        </trans-unit>
        <trans-unit id="f6e3493fae4182acd953cf6f9e003d4e48be2f96" translate="yes" xml:space="preserve">
          <source>Combining marks such as accent characters usually need to follow another character before they become printable:</source>
          <target state="translated">重音字符等组合标记通常需要跟在另一个字符后面才可打印。</target>
        </trans-unit>
        <trans-unit id="8901895fb1b1d4c4ea2fec368c25176bf73e2f7e" translate="yes" xml:space="preserve">
          <source>Command</source>
          <target state="translated">Command</target>
        </trans-unit>
        <trans-unit id="f6fe35e209171bf42b301a97ecb399ad5a56cfaf" translate="yes" xml:space="preserve">
          <source>Command line</source>
          <target state="translated">命令行</target>
        </trans-unit>
        <trans-unit id="c77b09f88b480c60ffb002c56bc70e50c802591d" translate="yes" xml:space="preserve">
          <source>Command-line arguments are either options or file names.</source>
          <target state="translated">命令行参数是选项或文件名。</target>
        </trans-unit>
        <trans-unit id="97746ca51646b7c285d878f982fc0bfe1f03e3b1" translate="yes" xml:space="preserve">
          <source>Command-line options begin with &lt;code&gt;-&lt;/code&gt;. They may &lt;em&gt;not&lt;/em&gt; be grouped: &lt;code&gt;-vO&lt;/code&gt; is different from &lt;code&gt;-v -O&lt;/code&gt;. Options need not precede filenames: e.g., &lt;code&gt;ghc *.o -o foo&lt;/code&gt;. All options are processed and then applied to all files; you cannot, for example, invoke &lt;code&gt;ghc -c -O1 Foo.hs -O2 Bar.hs&lt;/code&gt; to apply different optimisation levels to the files &lt;code&gt;Foo.hs&lt;/code&gt; and &lt;code&gt;Bar.hs&lt;/code&gt;.</source>
          <target state="translated">命令行选项以 &lt;code&gt;-&lt;/code&gt; 开头。它们可能&lt;em&gt;未&lt;/em&gt;分组： &lt;code&gt;-vO&lt;/code&gt; 与 &lt;code&gt;-v -O&lt;/code&gt; 不同。选项不必在文件名之前：例如 &lt;code&gt;ghc *.o -o foo&lt;/code&gt; 。处理所有选项，然后将其应用于所有文件；你不能，例如，调用 &lt;code&gt;ghc -c -O1 Foo.hs -O2 Bar.hs&lt;/code&gt; 不同的优化级别适用于文件 &lt;code&gt;Foo.hs&lt;/code&gt; 和 &lt;code&gt;Bar.hs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc82dd68c96d012c0cbf3ea8ef6eea8a8608b8d0" translate="yes" xml:space="preserve">
          <source>Commands produce values, but (like monadic computations) may yield more than one value, or none, and may do other things as well. For the most part, familiarity with monadic notation is a good guide to using commands. However the values of expressions, even monadic ones, are determined by the values of the variables they contain; this is not necessarily the case for commands.</source>
          <target state="translated">命令产生值,但(像单项计算一样)可能产生多个值,或者没有,也可能做其他事情。在大多数情况下,熟悉单项符号是使用命令的良好指南。然而表达式的值,即使是一元的表达式,也是由它们所包含的变量的值决定的;而命令则不一定是这样。</target>
        </trans-unit>
        <trans-unit id="3fd60311837613f6d5f756e7e2e7ad3c24dee6e4" translate="yes" xml:space="preserve">
          <source>Commands that query the package database (list, latest, describe, field, dot) operate on the list of databases specified by the flags &lt;code&gt;--user&lt;/code&gt;, &lt;code&gt;--global&lt;/code&gt;, and &lt;code&gt;--package-db&lt;/code&gt;. If none of these flags are given, the default is &lt;code&gt;--global --user&lt;/code&gt;.</source>
          <target state="translated">查询软件包数据库的命令（列表，最新，描述，字段，点）在由 &lt;code&gt;--user&lt;/code&gt; ，-- &lt;code&gt;--global&lt;/code&gt; 和 &lt;code&gt;--package-db&lt;/code&gt; 标志指定的数据库列表上运行。如果没有给出这些标志，则默认值为 &lt;code&gt;--global --user&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa3cebfbf6f771693249fc7ce6a3c38aa0b23801" translate="yes" xml:space="preserve">
          <source>Comments are not treated properly</source>
          <target state="translated">评论没有得到适当处理</target>
        </trans-unit>
        <trans-unit id="afae993471ec7ce7a7be6045f0a41cf9022e3b08" translate="yes" xml:space="preserve">
          <source>Common &lt;code&gt;errno&lt;/code&gt; symbols</source>
          <target state="translated">常见的 &lt;code&gt;errno&lt;/code&gt; 符号</target>
        </trans-unit>
        <trans-unit id="52343b241dc42a51fa6d140ac292e59f94917586" translate="yes" xml:space="preserve">
          <source>Common elements of &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:OpenTypeFamilyD&quot;&gt;OpenTypeFamilyD&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:ClosedTypeFamilyD&quot;&gt;ClosedTypeFamilyD&lt;/a&gt;&lt;/code&gt;. By analogy with &quot;head&quot; for type classes and type class instances as defined in &lt;em&gt;Type classes: an exploration of the design space&lt;/em&gt;, the &lt;code&gt;TypeFamilyHead&lt;/code&gt; is defined to be the elements of the declaration between &lt;code&gt;type family&lt;/code&gt; and &lt;code&gt;where&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:OpenTypeFamilyD&quot;&gt;OpenTypeFamilyD&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:ClosedTypeFamilyD&quot;&gt;ClosedTypeFamilyD&lt;/a&gt;&lt;/code&gt; 的共同元素。与类型类中定义的类型类和类型类实例的&amp;ldquo; head&amp;rdquo;类比&lt;em&gt;：对设计空间的探索&lt;/em&gt;，将 &lt;code&gt;TypeFamilyHead&lt;/code&gt; 定义为 &lt;code&gt;type family&lt;/code&gt; 和 &lt;code&gt;where&lt;/code&gt; 之间的声明元素。</target>
        </trans-unit>
        <trans-unit id="33a282e7465d506412ff779b9f08cd52c3d865ab" translate="yes" xml:space="preserve">
          <source>Common elements of &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:OpenTypeFamilyD&quot;&gt;OpenTypeFamilyD&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:ClosedTypeFamilyD&quot;&gt;ClosedTypeFamilyD&lt;/a&gt;&lt;/code&gt;. By analogy with &quot;head&quot; for type classes and type class instances as defined in &lt;em&gt;Type classes: an exploration of the design space&lt;/em&gt;, the &lt;code&gt;TypeFamilyHead&lt;/code&gt; is defined to be the elements of the declaration between &lt;code&gt;type family&lt;/code&gt; and &lt;code&gt;where&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:OpenTypeFamilyD&quot;&gt;OpenTypeFamilyD&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:ClosedTypeFamilyD&quot;&gt;ClosedTypeFamilyD&lt;/a&gt;&lt;/code&gt; 的共同元素。与类型类中定义的类型类和类型类实例的&amp;ldquo; head&amp;rdquo;类比&lt;em&gt;：对设计空间的探索&lt;/em&gt;，将 &lt;code&gt;TypeFamilyHead&lt;/code&gt; 定义为 &lt;code&gt;type family&lt;/code&gt; 和 &lt;code&gt;where&lt;/code&gt; 之间的声明元素。</target>
        </trans-unit>
        <trans-unit id="b59ec1942d8e9f013706dc9a24e9eb5c726a306b" translate="yes" xml:space="preserve">
          <source>Common formats</source>
          <target state="translated">常用格式</target>
        </trans-unit>
        <trans-unit id="e931eda41ccdc6c79825f108209c068d4815ee76" translate="yes" xml:space="preserve">
          <source>Common stream fusion functionality for text.</source>
          <target state="translated">文本的常见流融合功能。</target>
        </trans-unit>
        <trans-unit id="c9c7cbee5c9989529ec5925cc2476349c2d639f1" translate="yes" xml:space="preserve">
          <source>Common uses of &lt;code&gt;&lt;a href=&quot;control-monad#v:guard&quot;&gt;guard&lt;/a&gt;&lt;/code&gt; include conditionally signaling an error in an error monad and conditionally rejecting the current choice in an &lt;code&gt;&lt;a href=&quot;control-applicative#t:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt;-based parser.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:guard&quot;&gt;guard&lt;/a&gt;&lt;/code&gt; 常见用法包括有条件地在错误单子中发信号通知错误以及有条件地拒绝基于&amp;ldquo; &lt;code&gt;&lt;a href=&quot;control-applicative#t:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; 的解析器中的当前选择。</target>
        </trans-unit>
        <trans-unit id="3a797cab5e9f4cdef8a5b261c31c94ac959fed24" translate="yes" xml:space="preserve">
          <source>Commonly used character parsers.</source>
          <target state="translated">常用的字符解析器。</target>
        </trans-unit>
        <trans-unit id="6dbc52fcaf742bd3fb1fe8be15c8803b20c2641d" translate="yes" xml:space="preserve">
          <source>Commonly used generic combinators.</source>
          <target state="translated">常用的通用组合器。</target>
        </trans-unit>
        <trans-unit id="8b3636e1e55923a26c05e64ff5b55a880d9b28d5" translate="yes" xml:space="preserve">
          <source>Communication abstractions</source>
          <target state="translated">通信抽象</target>
        </trans-unit>
        <trans-unit id="11f0c32cc3e9b111d748fe5c3c72b6fa336d6a63" translate="yes" xml:space="preserve">
          <source>Comp1</source>
          <target state="translated">Comp1</target>
        </trans-unit>
        <trans-unit id="a613abf47784201711cd3857151c6baaf8c38146" translate="yes" xml:space="preserve">
          <source>Compact your data:</source>
          <target state="translated">压缩你的数据。</target>
        </trans-unit>
        <trans-unit id="de66cb0fded4835d2eef3e5c6acbf67820c3bab9" translate="yes" xml:space="preserve">
          <source>Compact#</source>
          <target state="translated">Compact#</target>
        </trans-unit>
        <trans-unit id="2e688d1607bf5b299794bf9babefe5b6b5b64725" translate="yes" xml:space="preserve">
          <source>Compaction doesn&amp;rsquo;t currently work when a single generation is requested using the &lt;code&gt;-G1&lt;/code&gt; option.</source>
          <target state="translated">使用 &lt;code&gt;-G1&lt;/code&gt; 选项请求单代生成时，压缩当前不起作用。</target>
        </trans-unit>
        <trans-unit id="2bd1ace8f92aa24691490f39739111ced50cae7a" translate="yes" xml:space="preserve">
          <source>Compaction found an object that cannot be compacted. Functions cannot be compacted, nor can mutable objects or pinned objects. See &lt;code&gt;&lt;a href=&quot;ghc-compact#v:compact&quot;&gt;compact&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">压缩发现无法压缩的对象。函数不能压缩，可变对象或固定对象也不能压缩。参见 &lt;code&gt;&lt;a href=&quot;ghc-compact#v:compact&quot;&gt;compact&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d94473fce37a944f8d15f4b44d1a7dc05875cc1" translate="yes" xml:space="preserve">
          <source>CompactionFailed</source>
          <target state="translated">CompactionFailed</target>
        </trans-unit>
        <trans-unit id="b5caa09841cf5ce42f4036c793d72ae158366c9a" translate="yes" xml:space="preserve">
          <source>Compare portions of two arrays for equality. No bounds checking is performed.</source>
          <target state="translated">比较两个数组的部分是否相等。不进行边界检查。</target>
        </trans-unit>
        <trans-unit id="220dbf8ed8f5a2b31430fba7a2177ab329aca604" translate="yes" xml:space="preserve">
          <source>Compare the two (identical) definitions for examples &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;; they are both legal whether or not &lt;code&gt;a&lt;/code&gt; is already in scope. They differ in that &lt;em&gt;if&lt;/em&gt;&lt;code&gt;a&lt;/code&gt; is already in scope, the signature constrains the pattern, rather than the pattern binding the variable.</source>
          <target state="translated">比较示例 &lt;code&gt;f&lt;/code&gt; ， &lt;code&gt;g&lt;/code&gt; 的两个（相同的）定义；无论 &lt;code&gt;a&lt;/code&gt; 是否已在范围内，它们均合法。它们的区别在于，&lt;em&gt;如果&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; 已在范围内，则签名将约束模式，而不是约束变量的模式。</target>
        </trans-unit>
        <trans-unit id="d90e6f44ce6797f04a00ccbe4cd93b22fa26b700" translate="yes" xml:space="preserve">
          <source>Compare using &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; 比较。</target>
        </trans-unit>
        <trans-unit id="2b7eb28a60393abac04cd18adf31dcf9dffe5e87" translate="yes" xml:space="preserve">
          <source>Compared to &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEvent&quot;&gt;traceEvent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEventIO&quot;&gt;traceEventIO&lt;/a&gt;&lt;/code&gt; sequences the event with respect to other IO actions.</source>
          <target state="translated">与 &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEvent&quot;&gt;traceEvent&lt;/a&gt;&lt;/code&gt; 相比， &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEventIO&quot;&gt;traceEventIO&lt;/a&gt;&lt;/code&gt; 相对于其他IO操作对事件进行排序。</target>
        </trans-unit>
        <trans-unit id="9de0d9277c7d6078bdc2dca756a37281882f8c6b" translate="yes" xml:space="preserve">
          <source>Compared to &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarker&quot;&gt;traceMarker&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarkerIO&quot;&gt;traceMarkerIO&lt;/a&gt;&lt;/code&gt; sequences the event with respect to other IO actions.</source>
          <target state="translated">与 &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarker&quot;&gt;traceMarker&lt;/a&gt;&lt;/code&gt; 相比， &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarkerIO&quot;&gt;traceMarkerIO&lt;/a&gt;&lt;/code&gt; 相对于其他IO操作对事件进行排序。</target>
        </trans-unit>
        <trans-unit id="901dceed97e0d79a8a18894fb6d8ed7cf068a2e9" translate="yes" xml:space="preserve">
          <source>Compared to using timeouts, allocation limits don't count time spent blocked or in foreign calls.</source>
          <target state="translated">与使用超时相比,分配限制不计算被屏蔽或在国外通话的时间。</target>
        </trans-unit>
        <trans-unit id="2dfcf898a3bd4e011123eee87384ecb67d0919d4" translate="yes" xml:space="preserve">
          <source>Comparison</source>
          <target state="translated">Comparison</target>
        </trans-unit>
        <trans-unit id="e921574fc44623c29c053d6b7fd240a163624042" translate="yes" xml:space="preserve">
          <source>Comparison of type-level naturals, as a constraint.</source>
          <target state="translated">类型级本体的比较,作为一种约束。</target>
        </trans-unit>
        <trans-unit id="aa8308777bcfcff2dec92d52b52443f203022452" translate="yes" xml:space="preserve">
          <source>Comparison of type-level naturals, as a function.</source>
          <target state="translated">类型级本位的比较,作为一个函数。</target>
        </trans-unit>
        <trans-unit id="aa4ca01f57fa56be5fd2598712735854c62eb4c5" translate="yes" xml:space="preserve">
          <source>Comparison of type-level naturals, as a function. NOTE: The functionality for this function should be subsumed by &lt;code&gt;&lt;a href=&quot;ghc-typelits#t:CmpNat&quot;&gt;CmpNat&lt;/a&gt;&lt;/code&gt;, so this might go away in the future. Please let us know, if you encounter discrepancies between the two.</source>
          <target state="translated">比较类型级自然函数。注意：此功能的功能应包含在 &lt;code&gt;&lt;a href=&quot;ghc-typelits#t:CmpNat&quot;&gt;CmpNat&lt;/a&gt;&lt;/code&gt; 中，因此将来可能会消失。如果您遇到两者之间的差异，请告诉我们。</target>
        </trans-unit>
        <trans-unit id="eb65d9b6fe233325df5863a365593aaebc62c3ce" translate="yes" xml:space="preserve">
          <source>Comparison of type-level naturals, as a function. NOTE: The functionality for this function should be subsumed by &lt;code&gt;&lt;a href=&quot;ghc-typenats#t:CmpNat&quot;&gt;CmpNat&lt;/a&gt;&lt;/code&gt;, so this might go away in the future. Please let us know, if you encounter discrepancies between the two.</source>
          <target state="translated">比较类型级自然函数。注意：此功能的功能应包含在 &lt;code&gt;&lt;a href=&quot;ghc-typenats#t:CmpNat&quot;&gt;CmpNat&lt;/a&gt;&lt;/code&gt; 中，因此将来可能会消失。如果您遇到两者之间的差异，请告诉我们。</target>
        </trans-unit>
        <trans-unit id="9e25b7c41fd0905eea4810870f0eab56fbd2824f" translate="yes" xml:space="preserve">
          <source>Comparison of type-level symbols, as a function.</source>
          <target state="translated">类型级符号的比较,作为一个函数。</target>
        </trans-unit>
        <trans-unit id="97374173ce83d8875cee826b6127f78ede00427a" translate="yes" xml:space="preserve">
          <source>Comparison predicates</source>
          <target state="translated">比较谓词</target>
        </trans-unit>
        <trans-unit id="e46ee00fde40e955c86abe019a61121e06d653c9" translate="yes" xml:space="preserve">
          <source>Comparisons</source>
          <target state="translated">Comparisons</target>
        </trans-unit>
        <trans-unit id="61d1c1d0543a4be4801ed83bba18544ce52b12ca" translate="yes" xml:space="preserve">
          <source>Compat wrapper</source>
          <target state="translated">兼容性包装纸</target>
        </trans-unit>
        <trans-unit id="2cb53559d09ec4706b50627aafe05c3f74ccaf5c" translate="yes" xml:space="preserve">
          <source>Compatibility Notes</source>
          <target state="translated">兼容性说明</target>
        </trans-unit>
        <trans-unit id="9008b604eab95237fc4f922da57e81197f19a6c3" translate="yes" xml:space="preserve">
          <source>Compatibility also affects closed type families. When simplifying an application of a closed type family, GHC will select an equation only when it is sure that no incompatible previous equation will ever apply. Here are some examples:</source>
          <target state="translated">兼容性也会影响封闭类型族。当简化一个封闭类型族的应用时,GHC只有在确定之前没有不兼容的方程时才会选择一个方程。下面是一些例子。</target>
        </trans-unit>
        <trans-unit id="08ce87af586a08b116960b3df6481bbd3bb52827" translate="yes" xml:space="preserve">
          <source>Compatibility with previous &lt;code&gt;deepseq&lt;/code&gt; versions</source>
          <target state="translated">与以前的 &lt;code&gt;deepseq&lt;/code&gt; 版本兼容</target>
        </trans-unit>
        <trans-unit id="986befebe402aca3d901c796be89790196522679" translate="yes" xml:space="preserve">
          <source>Compile Haskell 2010 language variant. Enables the following language extensions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a974edf66309c2d6908e505483c83f98fc68d89" translate="yes" xml:space="preserve">
          <source>Compile and run this program as before, and take a look at the new profiling results:</source>
          <target state="translated">像以前一样编译并运行这个程序,然后看看新的剖析结果。</target>
        </trans-unit>
        <trans-unit id="91ce6f974a8d3731fbe5eb1708d9cf19d31689d3" translate="yes" xml:space="preserve">
          <source>Compile and run this program as follows:</source>
          <target state="translated">编译并运行此程序如下。</target>
        </trans-unit>
        <trans-unit id="0c5321a6a5377746aa4249de3cd1656d0020532f" translate="yes" xml:space="preserve">
          <source>Compile in a sandbox, such as a chroot or similar container technology. Or simply as a user with very reduced system access.</source>
          <target state="translated">在沙箱中编译,如chroot或类似的容器技术。或者干脆以用户身份,减少系统访问。</target>
        </trans-unit>
        <trans-unit id="6bf66e78bebd666b8a85fd7bd219a06b8cb74c07" translate="yes" xml:space="preserve">
          <source>Compile the program for profiling (&lt;a href=&quot;#prof-compiler-options&quot;&gt;Compiler options for profiling&lt;/a&gt;).</source>
          <target state="translated">编译要进行分析的程序（用于分析的&lt;a href=&quot;#prof-compiler-options&quot;&gt;编译器选项&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="ad9a7464d9492dd9d47c62dcb7e5dcd686b01694" translate="yes" xml:space="preserve">
          <source>Compile the program or library first the normal way, without &lt;a href=&quot;profiling#ghc-flag--prof&quot;&gt;&lt;code&gt;-prof&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">不使用&lt;a href=&quot;profiling#ghc-flag--prof&quot;&gt; &lt;code&gt;-prof&lt;/code&gt; &lt;/a&gt;，首先以正常方式编译程序或库。</target>
        </trans-unit>
        <trans-unit id="a07000eb81b80056da99e252ad53cd685639acff" translate="yes" xml:space="preserve">
          <source>Compile to be part of unit (i.e. package) ⟨unit-id⟩</source>
          <target state="translated">编译成单元(即包)的一部分 ⟨unit-id⟩。</target>
        </trans-unit>
        <trans-unit id="406aa8d8d6e870538104dd59f38e61ce717b8dcc" translate="yes" xml:space="preserve">
          <source>Compile untrusted code with the &lt;code&gt;-XSafe&lt;/code&gt; flag being specified on the command line. This will ensure that modifications to the source being compiled can&amp;rsquo;t disable the use of the Safe Language as the command line flag takes precedence over a source level pragma.</source>
          <target state="translated">使用在命令行上指定的 &lt;code&gt;-XSafe&lt;/code&gt; 标志编译不受信任的代码。这将确保对正在编译的源的修改不会禁用安全语言的使用，因为命令行标志优先于源级别的编译指示。</target>
        </trans-unit>
        <trans-unit id="ec7b8dffbe107a7ba50c4ccbbe694e5b7570a02d" translate="yes" xml:space="preserve">
          <source>Compile using Haskell 98 language variant. Enables the following language extensions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b244c4678b38e3b0409a58a3cf7cfd854b5606dc" translate="yes" xml:space="preserve">
          <source>Compile using the &lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVM code generator&lt;/a&gt;</source>
          <target state="translated">使用&lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVM代码生成器进行&lt;/a&gt;编译</target>
        </trans-unit>
        <trans-unit id="8c792691e745ba40eed571e6a8110896f1362a49" translate="yes" xml:space="preserve">
          <source>Compile via &lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVM&lt;/a&gt; instead of using the native code generator. This will generally take slightly longer than the native code generator to compile. Produced code is generally the same speed or faster than the other two code generators. Compiling via LLVM requires LLVM&amp;rsquo;s &lt;strong&gt;opt&lt;/strong&gt; and &lt;strong&gt;llc&lt;/strong&gt; executables to be in &lt;code id=&quot;index-12&quot;&gt;PATH&lt;/code&gt;.</source>
          <target state="translated">通过&lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVM&lt;/a&gt;而不是使用本机代码生成器进行编译。通常，这将比本机代码生成器花费更长的时间来编译。产生的代码通常比其他两个代码生成器具有相同的速度或更快的速度。通过LLVM进行编译需要LLVM的&lt;strong&gt;opt&lt;/strong&gt;和&lt;strong&gt;llc&lt;/strong&gt;可执行文件位于 &lt;code id=&quot;index-12&quot;&gt;PATH&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="500837f016a3885e4e93218e293318560780de99" translate="yes" xml:space="preserve">
          <source>Compile via LLVM:</source>
          <target state="translated">通过LLVM编译。</target>
        </trans-unit>
        <trans-unit id="a3a539c351c31c8ac1d823504bbbecbf3dfcd431" translate="yes" xml:space="preserve">
          <source>Compile with alignment checks for all info table dereferences.</source>
          <target state="translated">编译时对所有信息表的脱引进行对齐检查。</target>
        </trans-unit>
        <trans-unit id="b1c9f6541aa06984a2159522a866f0cc1f4dfb94" translate="yes" xml:space="preserve">
          <source>Compile with alignment checks for all info table dereferences. This can be useful when finding pointer tagging issues.</source>
          <target state="translated">编译时对所有信息表的脱引进行对齐检查。这在发现指针标记问题时很有用。</target>
        </trans-unit>
        <trans-unit id="25cde5233438b79b38e53ab8e943382cef0ed33b" translate="yes" xml:space="preserve">
          <source>Compiling and executing untrusted code</source>
          <target state="translated">编译和执行不受信任的代码。</target>
        </trans-unit>
        <trans-unit id="53e8702909d1ebc72da3ae47338c3a148da61147" translate="yes" xml:space="preserve">
          <source>Compiling it results in:</source>
          <target state="translated">编制的结果是:</target>
        </trans-unit>
        <trans-unit id="b08f1ddb86984efef89d0d078f37bacde1a2fb02" translate="yes" xml:space="preserve">
          <source>Compiling this program with &lt;a href=&quot;#extension-NamedWildCards&quot;&gt;&lt;code&gt;NamedWildCards&lt;/code&gt;&lt;/a&gt; (as well as &lt;a href=&quot;#extension-PartialTypeSignatures&quot;&gt;&lt;code&gt;PartialTypeSignatures&lt;/code&gt;&lt;/a&gt;) enabled produces the following error message reporting the inferred type of the named wildcard &lt;code&gt;_a&lt;/code&gt;.</source>
          <target state="translated">在启用&lt;a href=&quot;#extension-NamedWildCards&quot;&gt; &lt;code&gt;NamedWildCards&lt;/code&gt; &lt;/a&gt;（以及&lt;a href=&quot;#extension-PartialTypeSignatures&quot;&gt; &lt;code&gt;PartialTypeSignatures&lt;/code&gt; &lt;/a&gt;）的情况下编译该程序会产生以下错误消息，报告命名通配符 &lt;code&gt;_a&lt;/code&gt; 的推断类型。</target>
        </trans-unit>
        <trans-unit id="d3117f2c03409f7cf1d821c695695c6c1fde32c7" translate="yes" xml:space="preserve">
          <source>Compiling this program with &lt;code&gt;-O&lt;/code&gt; results in &lt;code&gt;Hello&lt;/code&gt; to be printed, despite the fact that &lt;code&gt;evaluate&lt;/code&gt; should have bottomed. Compiling with &lt;code&gt;-O -fno-state-hack&lt;/code&gt; results in the exception one would expect.</source>
          <target state="translated">使用 &lt;code&gt;-O&lt;/code&gt; 编译该程序会导致打印 &lt;code&gt;Hello&lt;/code&gt; ，尽管 &lt;code&gt;evaluate&lt;/code&gt; 应该已经触底。使用 &lt;code&gt;-O -fno-state-hack&lt;/code&gt; 编译会导致例外。</target>
        </trans-unit>
        <trans-unit id="fee1f536d4bdba15881aca78bd2bb046f0532526" translate="yes" xml:space="preserve">
          <source>Compiling this program without enabling &lt;a href=&quot;#extension-NamedWildCards&quot;&gt;&lt;code&gt;NamedWildCards&lt;/code&gt;&lt;/a&gt; produces the following error message complaining about the type variable &lt;code&gt;_a&lt;/code&gt; no matching the actual type &lt;code&gt;Bool&lt;/code&gt;.</source>
          <target state="translated">在不启用&lt;a href=&quot;#extension-NamedWildCards&quot;&gt; &lt;code&gt;NamedWildCards&lt;/code&gt; 的&lt;/a&gt;情况下编译该程序会产生以下错误消息，抱怨类型变量 &lt;code&gt;_a&lt;/code&gt; 与实际类型 &lt;code&gt;Bool&lt;/code&gt; 不匹配。</target>
        </trans-unit>
        <trans-unit id="06099fdd18d60563ec395a192acb2b565f742e65" translate="yes" xml:space="preserve">
          <source>Compiling to object code inside GHCi is particularly useful if you are developing a compiled application, because the &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt; command typically runs much faster than restarting GHC with &lt;a href=&quot;using#ghc-flag---make&quot;&gt;&lt;code&gt;--make&lt;/code&gt;&lt;/a&gt; from the command-line, because all the interface files are already cached in memory.</source>
          <target state="translated">如果正在开发已编译的应用程序，则在GHCi内部编译为目标代码特别有用，因为&lt;a href=&quot;#ghci-cmd-:reload&quot;&gt; &lt;code&gt;:reload&lt;/code&gt; &lt;/a&gt;命令通常比从命令行使用&lt;a href=&quot;using#ghc-flag---make&quot;&gt; &lt;code&gt;--make&lt;/code&gt; &lt;/a&gt;重新启动GHC的运行速度快得多，因为所有接口文件已经缓存在内存中。</target>
        </trans-unit>
        <trans-unit id="2ff255684a2277f806fcebf3fe338ed27857f350" translate="yes" xml:space="preserve">
          <source>Completion</source>
          <target state="translated">Completion</target>
        </trans-unit>
        <trans-unit id="41b9f20265bec93dd558616fa397b05adcbe3b67" translate="yes" xml:space="preserve">
          <source>CompletionFunc</source>
          <target state="translated">CompletionFunc</target>
        </trans-unit>
        <trans-unit id="10b26b96b1c573965f14a325ef88109f84be8e3b" translate="yes" xml:space="preserve">
          <source>Complex</source>
          <target state="translated">Complex</target>
        </trans-unit>
        <trans-unit id="c3ae08546f0e5973ea7d96b40a7d7971cb5462c7" translate="yes" xml:space="preserve">
          <source>Complex control structures, error handling, and creating co-routines.</source>
          <target state="translated">复杂的控制结构、错误处理和创建协同程序。</target>
        </trans-unit>
        <trans-unit id="01688b183b7e89599b6518bb4975bb3ea424e76f" translate="yes" xml:space="preserve">
          <source>Complex numbers are an algebraic type.</source>
          <target state="translated">复数是一种代数类型。</target>
        </trans-unit>
        <trans-unit id="7611b3d644720e341343c4b145fe3d01e8fd3e09" translate="yes" xml:space="preserve">
          <source>Complex numbers.</source>
          <target state="translated">复数。</target>
        </trans-unit>
        <trans-unit id="47da6f0838f083d3a01f384d483b468a305c5a2c" translate="yes" xml:space="preserve">
          <source>Compose</source>
          <target state="translated">Compose</target>
        </trans-unit>
        <trans-unit id="7bcb41ba4e19f1985f7e7cf393d8e66dfe864d2f" translate="yes" xml:space="preserve">
          <source>Compose two alternative STM actions (GHC only).</source>
          <target state="translated">组成两个可供选择的STM行动(仅GHC)。</target>
        </trans-unit>
        <trans-unit id="8100607e5596f367342785baaf8eb8229db550d5" translate="yes" xml:space="preserve">
          <source>Composing &lt;code&gt;&lt;a href=&quot;data-maybe#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;data-maybe#v:listToMaybe&quot;&gt;listToMaybe&lt;/a&gt;&lt;/code&gt; should be the identity on singleton/empty lists:</source>
          <target state="translated">撰写 &lt;code&gt;&lt;a href=&quot;data-maybe#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; 与 &lt;code&gt;&lt;a href=&quot;data-maybe#v:listToMaybe&quot;&gt;listToMaybe&lt;/a&gt;&lt;/code&gt; 应该是单/空列表的身份：</target>
        </trans-unit>
        <trans-unit id="ca5e00120498b815c12de59fd45e93f8086a8bfc" translate="yes" xml:space="preserve">
          <source>Composition</source>
          <target state="translated">Composition</target>
        </trans-unit>
        <trans-unit id="da818419137937903a1858853ac80f87ce89c6c3" translate="yes" xml:space="preserve">
          <source>Composition of functors</source>
          <target state="translated">漏斗的构成</target>
        </trans-unit>
        <trans-unit id="13a40f8de1b8a7eb274a7a72a88d8183b4d42cb7" translate="yes" xml:space="preserve">
          <source>Composition of functors.</source>
          <target state="translated">漏斗的组成。</target>
        </trans-unit>
        <trans-unit id="414cc4c73ae313a535588c63d3f1f05526178a19" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-environment#v:getFullArgs&quot;&gt;getFullArgs&lt;/a&gt;&lt;/code&gt; is the &quot;raw&quot; version of &lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt;, similar to &lt;code&gt;argv&lt;/code&gt; in other languages. It returns a list of the program's command line arguments, starting with the program name, and including those normally eaten by the RTS (+RTS ... -RTS).</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-environment#v:getFullArgs&quot;&gt;getFullArgs&lt;/a&gt;&lt;/code&gt; 是&amp;ldquo;原始&amp;rdquo;版本 &lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; ，类似于 &lt;code&gt;argv&lt;/code&gt; 的其他语言。它返回程序命令行参数的列表，从程序名称开始，包括RTS通常吃掉的参数（+ RTS ... -RTS）。</target>
        </trans-unit>
        <trans-unit id="a062c1b66a07f883c944fa26db9ef0e1390c2371" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; makes handle &lt;code&gt;hdl&lt;/code&gt; closed. Before the computation finishes, if &lt;code&gt;hdl&lt;/code&gt; is writable its buffer is flushed as for &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hFlush&quot;&gt;hFlush&lt;/a&gt;&lt;/code&gt;. Performing &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; on a handle that has already been closed has no effect; doing so is not an error. All other operations on a closed handle will fail. If &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; fails for any reason, any further operations (apart from &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt;) on the handle will still fail as if &lt;code&gt;hdl&lt;/code&gt; had been successfully closed.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 使句柄 &lt;code&gt;hdl&lt;/code&gt; 关闭。在计算完成之前，如果 &lt;code&gt;hdl&lt;/code&gt; 是可写的，则其缓冲区与 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hFlush&quot;&gt;hFlush&lt;/a&gt;&lt;/code&gt; 一样被刷新。在已经关闭的句柄上执行 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 无效；这样做不是错误。在闭合句柄上的所有其他操作将失败。如果 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 由于任何原因失败，则该句柄上的任何其他操作（除 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 之外）仍将失败，就像 &lt;code&gt;hdl&lt;/code&gt; 已成功关闭一样。</target>
        </trans-unit>
        <trans-unit id="1a0f96d478fac21b58d80997f07ef016438eb9b6" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBuffering&quot;&gt;hGetBuffering&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the current buffering mode for &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBuffering&quot;&gt;hGetBuffering&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 返回当前缓冲模式 &lt;code&gt;hdl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="93fc702197413fd9cf0453efd7545ca16dd892fd" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetChar&quot;&gt;hGetChar&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; reads a character from the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;, blocking until a character is available.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetChar&quot;&gt;hGetChar&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 从 &lt;code&gt;hdl&lt;/code&gt; 管理的文件或通道中读取字符，并阻塞直到有字符可用为止。</target>
        </trans-unit>
        <trans-unit id="b3ea4c07e03478e8df1258a6d00d5232fa206e40" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the list of characters corresponding to the unread portion of the channel or file managed by &lt;code&gt;hdl&lt;/code&gt;, which is put into an intermediate state, &lt;em&gt;semi-closed&lt;/em&gt;. In this state, &lt;code&gt;hdl&lt;/code&gt; is effectively closed, but items are read from &lt;code&gt;hdl&lt;/code&gt; on demand and accumulated in a special list returned by &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 返回与由 &lt;code&gt;hdl&lt;/code&gt; 管理的通道或文件的未读部分相对应的字符列表，该字符处于&lt;em&gt;半封闭&lt;/em&gt;状态，&lt;em&gt;处于&lt;/em&gt;中间状态。在这种状态下， &lt;code&gt;hdl&lt;/code&gt; 实际上是关闭的，但是根据需要从 &lt;code&gt;hdl&lt;/code&gt; 中读取项目，并将其累积在 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 返回的特殊列表中。</target>
        </trans-unit>
        <trans-unit id="8ddb09fc7dbc5300dfd77b82562ad84e85308d89" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetLine&quot;&gt;hGetLine&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; reads a line from the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetLine&quot;&gt;hGetLine&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 从 &lt;code&gt;hdl&lt;/code&gt; 管理的文件或通道中读取一行。</target>
        </trans-unit>
        <trans-unit id="e034dc0672d6460334d5992bda74221b0145923e" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetPosn&quot;&gt;hGetPosn&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the current I/O position of &lt;code&gt;hdl&lt;/code&gt; as a value of the abstract type &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:HandlePosn&quot;&gt;HandlePosn&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetPosn&quot;&gt;hGetPosn&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 返回的当前I / O位置 &lt;code&gt;hdl&lt;/code&gt; 为抽象类型的值 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:HandlePosn&quot;&gt;HandlePosn&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8d0046166f9e6d4122802bb521c2c02515c40aa" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hLookAhead&quot;&gt;hLookAhead&lt;/a&gt;&lt;/code&gt; returns the next character from the handle without removing it from the input buffer, blocking until a character is available.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hLookAhead&quot;&gt;hLookAhead&lt;/a&gt;&lt;/code&gt; 从句柄中返回下一个字符，而不将其从输入缓冲区中删除，直到一个字符可用为止，它一直阻塞。</target>
        </trans-unit>
        <trans-unit id="c5e7bf72d6cbd9e1e6e59a9c1c754f4c447b3ce4" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutChar&quot;&gt;hPutChar&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl ch&lt;/code&gt; writes the character &lt;code&gt;ch&lt;/code&gt; to the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;. Characters may be buffered if buffering is enabled for &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutChar&quot;&gt;hPutChar&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl ch&lt;/code&gt; 写入字符 &lt;code&gt;ch&lt;/code&gt; 被管理的文件或通道 &lt;code&gt;hdl&lt;/code&gt; 。如果为 &lt;code&gt;hdl&lt;/code&gt; 启用了缓冲，则可以缓冲字符。</target>
        </trans-unit>
        <trans-unit id="858b261b3e7fc4abd46093960748e4d4805502c3" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl s&lt;/code&gt; writes the string &lt;code&gt;s&lt;/code&gt; to the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl s&lt;/code&gt; 写入字符串 &lt;code&gt;s&lt;/code&gt; 被管理的文件或通道 &lt;code&gt;hdl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="559786c97768f1282ab9399178ca49d2850e6eee" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSeek&quot;&gt;hSeek&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl mode i&lt;/code&gt; sets the position of handle &lt;code&gt;hdl&lt;/code&gt; depending on &lt;code&gt;mode&lt;/code&gt;. The offset &lt;code&gt;i&lt;/code&gt; is given in terms of 8-bit bytes.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSeek&quot;&gt;hSeek&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl mode i&lt;/code&gt; 根据 &lt;code&gt;mode&lt;/code&gt; 设置手柄 &lt;code&gt;hdl&lt;/code&gt; 的位置。偏移量 &lt;code&gt;i&lt;/code&gt; 以8位字节的形式给出。</target>
        </trans-unit>
        <trans-unit id="68f0fbaa1f670d7c60a1c1516d3c37f8bbbd3b1a" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSetBuffering&quot;&gt;hSetBuffering&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl mode&lt;/code&gt; sets the mode of buffering for handle &lt;code&gt;hdl&lt;/code&gt; on subsequent reads and writes.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSetBuffering&quot;&gt;hSetBuffering&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl mode&lt;/code&gt; 设置在后续读写中为句柄 &lt;code&gt;hdl&lt;/code&gt; 缓冲的模式。</target>
        </trans-unit>
        <trans-unit id="85e0d89d9ef8f280cace7df15993fd8c8a03cdde" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hTell&quot;&gt;hTell&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the current position of the handle &lt;code&gt;hdl&lt;/code&gt;, as the number of bytes from the beginning of the file. The value returned may be subsequently passed to &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSeek&quot;&gt;hSeek&lt;/a&gt;&lt;/code&gt; to reposition the handle to the current position.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hTell&quot;&gt;hTell&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 返回句柄 &lt;code&gt;hdl&lt;/code&gt; 的当前位置，作为从文件开头开始的字节数。返回的值可以随后传递给 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSeek&quot;&gt;hSeek&lt;/a&gt;&lt;/code&gt; 以将手柄重新定位到当前位置。</target>
        </trans-unit>
        <trans-unit id="984e716b71d09a30ae98a342c122c61dcaf6fb9d" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl t&lt;/code&gt; waits until input is available on handle &lt;code&gt;hdl&lt;/code&gt;. It returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; as soon as input is available on &lt;code&gt;hdl&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; if no input is available within &lt;code&gt;t&lt;/code&gt; milliseconds. Note that &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; waits until one or more full &lt;em&gt;characters&lt;/em&gt; are available, which means that it needs to do decoding, and hence may fail with a decoding error.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl t&lt;/code&gt; 等待直到输入在句柄 &lt;code&gt;hdl&lt;/code&gt; 上可用。它返回 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ，只要输入可用的 &lt;code&gt;hdl&lt;/code&gt; ，或 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; ，如果没有输入中提供 &lt;code&gt;t&lt;/code&gt; 毫秒。请注意， &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; 等待一个或多个完整&lt;em&gt;字符&lt;/em&gt;可用，这意味着它需要进行解码，因此可能会因解码错误而失败。</target>
        </trans-unit>
        <trans-unit id="fc82c6f8a8d504350e4c5428182b9899eef017fa" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;file mode&lt;/code&gt; allocates and returns a new, open handle to manage the file &lt;code&gt;file&lt;/code&gt;. It manages input if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;system-io#v:ReadMode&quot;&gt;ReadMode&lt;/a&gt;&lt;/code&gt;, output if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;system-io#v:WriteMode&quot;&gt;WriteMode&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system-io#v:AppendMode&quot;&gt;AppendMode&lt;/a&gt;&lt;/code&gt;, and both input and output if mode is &lt;code&gt;&lt;a href=&quot;system-io#v:ReadWriteMode&quot;&gt;ReadWriteMode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;file mode&lt;/code&gt; 分配并返回一个新的打开的句柄来管理文件 &lt;code&gt;file&lt;/code&gt; 。它管理如果输入 &lt;code&gt;mode&lt;/code&gt; 是 &lt;code&gt;&lt;a href=&quot;system-io#v:ReadMode&quot;&gt;ReadMode&lt;/a&gt;&lt;/code&gt; ，如果输出 &lt;code&gt;mode&lt;/code&gt; 是 &lt;code&gt;&lt;a href=&quot;system-io#v:WriteMode&quot;&gt;WriteMode&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;system-io#v:AppendMode&quot;&gt;AppendMode&lt;/a&gt;&lt;/code&gt; ，和输入和输出，如果模式是 &lt;code&gt;&lt;a href=&quot;system-io#v:ReadWriteMode&quot;&gt;ReadWriteMode&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9859745e8dd6e608e7892b279fd0713c0dd4c9d8" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetChar&quot;&gt;hGetChar&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; reads a character from the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;, blocking until a character is available.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetChar&quot;&gt;hGetChar&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 从 &lt;code&gt;hdl&lt;/code&gt; 管理的文件或通道中读取字符，并阻塞直到有字符可用为止。</target>
        </trans-unit>
        <trans-unit id="8b5afc8336038a96086c74a0d7659e3af511e919" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the list of characters corresponding to the unread portion of the channel or file managed by &lt;code&gt;hdl&lt;/code&gt;, which is put into an intermediate state, &lt;em&gt;semi-closed&lt;/em&gt;. In this state, &lt;code&gt;hdl&lt;/code&gt; is effectively closed, but items are read from &lt;code&gt;hdl&lt;/code&gt; on demand and accumulated in a special list returned by &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 返回与由 &lt;code&gt;hdl&lt;/code&gt; 管理的通道或文件的未读部分相对应的字符列表，该字符处于&lt;em&gt;半封闭&lt;/em&gt;状态，&lt;em&gt;处于&lt;/em&gt;中间状态。在这种状态下， &lt;code&gt;hdl&lt;/code&gt; 实际上是关闭的，但是根据需要从 &lt;code&gt;hdl&lt;/code&gt; 中读取项目，并将其累积在 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 返回的特殊列表中。</target>
        </trans-unit>
        <trans-unit id="196000078fd695d57daf6062cb233e1691317b4d" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetLine&quot;&gt;hGetLine&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; reads a line from the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetLine&quot;&gt;hGetLine&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 从 &lt;code&gt;hdl&lt;/code&gt; 管理的文件或通道中读取一行。</target>
        </trans-unit>
        <trans-unit id="0dbbac2e42edf5e29528cec77563dbae456ee29a" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutChar&quot;&gt;hPutChar&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl ch&lt;/code&gt; writes the character &lt;code&gt;ch&lt;/code&gt; to the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;. Characters may be buffered if buffering is enabled for &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutChar&quot;&gt;hPutChar&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl ch&lt;/code&gt; 写入字符 &lt;code&gt;ch&lt;/code&gt; 被管理的文件或通道 &lt;code&gt;hdl&lt;/code&gt; 。如果为 &lt;code&gt;hdl&lt;/code&gt; 启用了缓冲，则可以缓冲字符。</target>
        </trans-unit>
        <trans-unit id="82bbf466cac23dd0b8ebc1be4c0964365a2c3bb7" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl s&lt;/code&gt; writes the string &lt;code&gt;s&lt;/code&gt; to the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl s&lt;/code&gt; 写入字符串 &lt;code&gt;s&lt;/code&gt; 被管理的文件或通道 &lt;code&gt;hdl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1022b5517638ab91a72ea2cb271baf16c1e1ec75" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl t&lt;/code&gt; waits until input is available on handle &lt;code&gt;hdl&lt;/code&gt;. It returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; as soon as input is available on &lt;code&gt;hdl&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; if no input is available within &lt;code&gt;t&lt;/code&gt; milliseconds. Note that &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; waits until one or more full &lt;em&gt;characters&lt;/em&gt; are available, which means that it needs to do decoding, and hence may fail with a decoding error.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl t&lt;/code&gt; 等待直到输入在句柄 &lt;code&gt;hdl&lt;/code&gt; 上可用。它返回 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ，只要输入可用的 &lt;code&gt;hdl&lt;/code&gt; ，或 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; ，如果没有输入中提供 &lt;code&gt;t&lt;/code&gt; 毫秒。请注意， &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; 等待一个或多个完整&lt;em&gt;字符&lt;/em&gt;可用，这意味着它需要进行解码，因此可能会因解码错误而失败。</target>
        </trans-unit>
        <trans-unit id="81fb5ccf6d9b5e91fa9e4bc4650fe044ed66f61d" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-cputime#v:getCPUTime&quot;&gt;getCPUTime&lt;/a&gt;&lt;/code&gt; returns the number of picoseconds CPU time used by the current program. The precision of this result is implementation-dependent.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-cputime#v:getCPUTime&quot;&gt;getCPUTime&lt;/a&gt;&lt;/code&gt; 返回当前程序使用的皮秒CPU时间。此结果的精度取决于实现方式。</target>
        </trans-unit>
        <trans-unit id="333a46ef6dacf6c5a80f278b48fc1b418642c882" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; returns a list of the program's command line arguments (not including the program name).</source>
          <target state="translated">Computation &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; 返回程序的命令行参数列表（不包括程序名称）。</target>
        </trans-unit>
        <trans-unit id="dd6dbee1f3528160102b639d3ffa4216eea30bb4" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt;&lt;code&gt;var&lt;/code&gt; returns the value of the environment variable &lt;code&gt;var&lt;/code&gt;. For the inverse, the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; function can be used.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; &lt;code&gt;var&lt;/code&gt; 返回环境变量 &lt;code&gt;var&lt;/code&gt; 的值。反之，可以使用 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="8ca7f63fe3d0a903bfae6c5134c9430b61994835" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt;&lt;code&gt;var&lt;/code&gt; returns the value of the environment variable &lt;code&gt;var&lt;/code&gt;. For the inverse, the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; function can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d48baf2075c3ee22718940634bbbddb083ab881" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; makes handle &lt;code&gt;hdl&lt;/code&gt; closed. Before the computation finishes, if &lt;code&gt;hdl&lt;/code&gt; is writable its buffer is flushed as for &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hFlush&quot;&gt;hFlush&lt;/a&gt;&lt;/code&gt;. Performing &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; on a handle that has already been closed has no effect; doing so is not an error. All other operations on a closed handle will fail. If &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; fails for any reason, any further operations (apart from &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt;) on the handle will still fail as if &lt;code&gt;hdl&lt;/code&gt; had been successfully closed.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 使句柄 &lt;code&gt;hdl&lt;/code&gt; 关闭。在计算完成之前，如果 &lt;code&gt;hdl&lt;/code&gt; 是可写的，则其缓冲区与 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hFlush&quot;&gt;hFlush&lt;/a&gt;&lt;/code&gt; 一样被刷新。在已经关闭的句柄上执行 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 无效；这样做不是错误。在闭合句柄上的所有其他操作将失败。如果 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 由于任何原因失败，则该句柄上的任何其他操作（除 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 之外）仍将失败，就像 &lt;code&gt;hdl&lt;/code&gt; 已成功关闭一样。</target>
        </trans-unit>
        <trans-unit id="ae6369992b71cbb1678afb5376d9e6269c231cb1" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl s&lt;/code&gt; writes the string &lt;code&gt;s&lt;/code&gt; to the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl s&lt;/code&gt; 写入字符串 &lt;code&gt;s&lt;/code&gt; 被管理的文件或通道 &lt;code&gt;hdl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a6238acf0510b26a31458c62c98d733cf29782e" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; returns a list of the program's command line arguments (not including the program name).</source>
          <target state="translated">Computation &lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; 返回程序的命令行参数列表（不包括程序名称）。</target>
        </trans-unit>
        <trans-unit id="73c0cc06c24d549877e94bc38248d3ee6d646d88" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-environment#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt;&lt;code&gt;var&lt;/code&gt; returns the value of the environment variable &lt;code&gt;var&lt;/code&gt;. For the inverse, the &lt;code&gt;&lt;a href=&quot;system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; function can be used.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-environment#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; &lt;code&gt;var&lt;/code&gt; 返回环境变量 &lt;code&gt;var&lt;/code&gt; 的值。反之，可以使用 &lt;code&gt;&lt;a href=&quot;system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="983d00657a17c6db29e365b387a16723173ec1ad" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-environment#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; returns the name of the program as it was invoked.</source>
          <target state="translated">Computation &lt;code&gt;&lt;a href=&quot;system-environment#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; 返回被调用程序的名称。</target>
        </trans-unit>
        <trans-unit id="17000e1334d14d03ae1356f9f4e1fa55b98b5275" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; returns a list of the program's command line arguments (not including the program name).</source>
          <target state="translated">Computation &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; 返回程序的命令行参数列表（不包括程序名称）。</target>
        </trans-unit>
        <trans-unit id="f0c0fcf448bf5244743b9ac30e39970de524d214" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; returns the name of the program as it was invoked.</source>
          <target state="translated">Computation &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; 返回被调用程序的名称。</target>
        </trans-unit>
        <trans-unit id="3409f02406e5a33c426a5f87bde07ed79637fc0e" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-exit#v:exitWith&quot;&gt;exitWith&lt;/a&gt;&lt;/code&gt;&lt;code&gt;code&lt;/code&gt; throws &lt;code&gt;&lt;a href=&quot;system-exit#t:ExitCode&quot;&gt;ExitCode&lt;/a&gt;&lt;/code&gt;&lt;code&gt;code&lt;/code&gt;. Normally this terminates the program, returning &lt;code&gt;code&lt;/code&gt; to the program's caller.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-exit#v:exitWith&quot;&gt;exitWith&lt;/a&gt;&lt;/code&gt; &lt;code&gt;code&lt;/code&gt; 抛出 &lt;code&gt;&lt;a href=&quot;system-exit#t:ExitCode&quot;&gt;ExitCode&lt;/a&gt;&lt;/code&gt; &lt;code&gt;code&lt;/code&gt; 。通常，这会终止程序，并向程序的调用者返回 &lt;code&gt;code&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78b2e536d933878b74647d8bca3f6c8bcae1eeb8" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; makes handle &lt;code&gt;hdl&lt;/code&gt; closed. Before the computation finishes, if &lt;code&gt;hdl&lt;/code&gt; is writable its buffer is flushed as for &lt;code&gt;&lt;a href=&quot;system-io#v:hFlush&quot;&gt;hFlush&lt;/a&gt;&lt;/code&gt;. Performing &lt;code&gt;&lt;a href=&quot;system-io#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; on a handle that has already been closed has no effect; doing so is not an error. All other operations on a closed handle will fail. If &lt;code&gt;&lt;a href=&quot;system-io#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; fails for any reason, any further operations (apart from &lt;code&gt;&lt;a href=&quot;system-io#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt;) on the handle will still fail as if &lt;code&gt;hdl&lt;/code&gt; had been successfully closed.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-io#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 使句柄 &lt;code&gt;hdl&lt;/code&gt; 关闭。在计算完成之前，如果 &lt;code&gt;hdl&lt;/code&gt; 是可写的，则其缓冲区与 &lt;code&gt;&lt;a href=&quot;system-io#v:hFlush&quot;&gt;hFlush&lt;/a&gt;&lt;/code&gt; 一样被刷新。在已经关闭的句柄上执行 &lt;code&gt;&lt;a href=&quot;system-io#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 无效；这样做不是错误。在闭合句柄上的所有其他操作将失败。如果 &lt;code&gt;&lt;a href=&quot;system-io#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 由于任何原因失败，则该句柄上的任何其他操作（除 &lt;code&gt;&lt;a href=&quot;system-io#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 之外）仍将失败，就像 &lt;code&gt;hdl&lt;/code&gt; 已成功关闭一样。</target>
        </trans-unit>
        <trans-unit id="06feb11277fd1c39107474d92fe70ca3dd16e6e9" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuffering&quot;&gt;hGetBuffering&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the current buffering mode for &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuffering&quot;&gt;hGetBuffering&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 返回当前缓冲模式 &lt;code&gt;hdl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e42f92bdc28a95e571d0a397cee8fb23228323d8" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hGetChar&quot;&gt;hGetChar&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; reads a character from the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;, blocking until a character is available.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetChar&quot;&gt;hGetChar&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 从 &lt;code&gt;hdl&lt;/code&gt; 管理的文件或通道中读取字符，并阻塞直到有字符可用为止。</target>
        </trans-unit>
        <trans-unit id="66d82e9932953500676f78c08885c387094e6b9d" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the list of characters corresponding to the unread portion of the channel or file managed by &lt;code&gt;hdl&lt;/code&gt;, which is put into an intermediate state, &lt;em&gt;semi-closed&lt;/em&gt;. In this state, &lt;code&gt;hdl&lt;/code&gt; is effectively closed, but items are read from &lt;code&gt;hdl&lt;/code&gt; on demand and accumulated in a special list returned by &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 返回与由 &lt;code&gt;hdl&lt;/code&gt; 管理的通道或文件的未读部分相对应的字符列表，该字符处于&lt;em&gt;半封闭&lt;/em&gt;状态，&lt;em&gt;处于&lt;/em&gt;中间状态。在这种状态下， &lt;code&gt;hdl&lt;/code&gt; 实际上是关闭的，但是根据需要从 &lt;code&gt;hdl&lt;/code&gt; 中读取项目，并将其累积在 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 返回的特殊列表中。</target>
        </trans-unit>
        <trans-unit id="d4f0db17e2b8f97007d5f0849da51462b8ba8a79" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hGetLine&quot;&gt;hGetLine&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; reads a line from the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetLine&quot;&gt;hGetLine&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 从 &lt;code&gt;hdl&lt;/code&gt; 管理的文件或通道中读取一行。</target>
        </trans-unit>
        <trans-unit id="bb7baa9ab5bd0d03f4272f4add2817a242a78e22" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hGetPosn&quot;&gt;hGetPosn&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the current I/O position of &lt;code&gt;hdl&lt;/code&gt; as a value of the abstract type &lt;code&gt;&lt;a href=&quot;system-io#t:HandlePosn&quot;&gt;HandlePosn&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetPosn&quot;&gt;hGetPosn&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 返回的当前I / O位置 &lt;code&gt;hdl&lt;/code&gt; 为抽象类型的值 &lt;code&gt;&lt;a href=&quot;system-io#t:HandlePosn&quot;&gt;HandlePosn&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dcccb109f989ac7adbf8e833e8b7c9ff22baa840" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hLookAhead&quot;&gt;hLookAhead&lt;/a&gt;&lt;/code&gt; returns the next character from the handle without removing it from the input buffer, blocking until a character is available.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-io#v:hLookAhead&quot;&gt;hLookAhead&lt;/a&gt;&lt;/code&gt; 从句柄中返回下一个字符，而不将其从输入缓冲区中删除，直到一个字符可用为止，它一直阻塞。</target>
        </trans-unit>
        <trans-unit id="eaa75d6a9bd56419249769fb216f808b0f4b9eba" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hPrint&quot;&gt;hPrint&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl t&lt;/code&gt; writes the string representation of &lt;code&gt;t&lt;/code&gt; given by the &lt;code&gt;&lt;a href=&quot;text-show#v:shows&quot;&gt;shows&lt;/a&gt;&lt;/code&gt; function to the file or channel managed by &lt;code&gt;hdl&lt;/code&gt; and appends a newline.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-io#v:hPrint&quot;&gt;hPrint&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl t&lt;/code&gt; 写入的字符串表示 &lt;code&gt;t&lt;/code&gt; 由给定 &lt;code&gt;&lt;a href=&quot;text-show#v:shows&quot;&gt;shows&lt;/a&gt;&lt;/code&gt; 的功能所管理的文件或信道 &lt;code&gt;hdl&lt;/code&gt; 并附加一个新行。</target>
        </trans-unit>
        <trans-unit id="81b1c9708b1942bda0e7b068176a8e3bc516f577" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hPutChar&quot;&gt;hPutChar&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl ch&lt;/code&gt; writes the character &lt;code&gt;ch&lt;/code&gt; to the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;. Characters may be buffered if buffering is enabled for &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-io#v:hPutChar&quot;&gt;hPutChar&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl ch&lt;/code&gt; 写入字符 &lt;code&gt;ch&lt;/code&gt; 被管理的文件或通道 &lt;code&gt;hdl&lt;/code&gt; 。如果为 &lt;code&gt;hdl&lt;/code&gt; 启用了缓冲，则可以缓冲字符。</target>
        </trans-unit>
        <trans-unit id="918ecee63c912a23cc6dfa75cd690eee7bed9bc2" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl s&lt;/code&gt; writes the string &lt;code&gt;s&lt;/code&gt; to the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-io#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl s&lt;/code&gt; 写入字符串 &lt;code&gt;s&lt;/code&gt; 被管理的文件或通道 &lt;code&gt;hdl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="565f5e55a0fbc846dfe3436c847d4600597981b1" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hReady&quot;&gt;hReady&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; indicates whether at least one item is available for input from handle &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-io#v:hReady&quot;&gt;hReady&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 指示是否至少有一项可用于句柄 &lt;code&gt;hdl&lt;/code&gt; 的输入。</target>
        </trans-unit>
        <trans-unit id="30289a7e45689ee554f7c011744608dad361c1b9" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hSeek&quot;&gt;hSeek&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl mode i&lt;/code&gt; sets the position of handle &lt;code&gt;hdl&lt;/code&gt; depending on &lt;code&gt;mode&lt;/code&gt;. The offset &lt;code&gt;i&lt;/code&gt; is given in terms of 8-bit bytes.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-io#v:hSeek&quot;&gt;hSeek&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl mode i&lt;/code&gt; 根据 &lt;code&gt;mode&lt;/code&gt; 设置手柄 &lt;code&gt;hdl&lt;/code&gt; 的位置。偏移量 &lt;code&gt;i&lt;/code&gt; 以8位字节的形式给出。</target>
        </trans-unit>
        <trans-unit id="31865c99a7f0b8f829935ce8bc7dab155c6c5bb7" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hSetBuffering&quot;&gt;hSetBuffering&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl mode&lt;/code&gt; sets the mode of buffering for handle &lt;code&gt;hdl&lt;/code&gt; on subsequent reads and writes.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-io#v:hSetBuffering&quot;&gt;hSetBuffering&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl mode&lt;/code&gt; 设置在后续读写中为句柄 &lt;code&gt;hdl&lt;/code&gt; 缓冲的模式。</target>
        </trans-unit>
        <trans-unit id="8a7aa425aff4d649515373f238f25e6910189b1b" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hTell&quot;&gt;hTell&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the current position of the handle &lt;code&gt;hdl&lt;/code&gt;, as the number of bytes from the beginning of the file. The value returned may be subsequently passed to &lt;code&gt;&lt;a href=&quot;system-io#v:hSeek&quot;&gt;hSeek&lt;/a&gt;&lt;/code&gt; to reposition the handle to the current position.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-io#v:hTell&quot;&gt;hTell&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 返回句柄 &lt;code&gt;hdl&lt;/code&gt; 的当前位置，作为从文件开头开始的字节数。返回的值可以随后传递给 &lt;code&gt;&lt;a href=&quot;system-io#v:hSeek&quot;&gt;hSeek&lt;/a&gt;&lt;/code&gt; 以将手柄重新定位到当前位置。</target>
        </trans-unit>
        <trans-unit id="7374bf851b67b93fac4af7416c689532f833b474" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl t&lt;/code&gt; waits until input is available on handle &lt;code&gt;hdl&lt;/code&gt;. It returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; as soon as input is available on &lt;code&gt;hdl&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; if no input is available within &lt;code&gt;t&lt;/code&gt; milliseconds. Note that &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; waits until one or more full &lt;em&gt;characters&lt;/em&gt; are available, which means that it needs to do decoding, and hence may fail with a decoding error.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl t&lt;/code&gt; 等待直到输入在句柄 &lt;code&gt;hdl&lt;/code&gt; 上可用。它返回 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ，只要输入可用的 &lt;code&gt;hdl&lt;/code&gt; ，或 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; ，如果没有输入中提供 &lt;code&gt;t&lt;/code&gt; 毫秒。请注意， &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; 等待一个或多个完整&lt;em&gt;字符&lt;/em&gt;可用，这意味着它需要进行解码，因此可能会因解码错误而失败。</target>
        </trans-unit>
        <trans-unit id="b5d22abbd9e42ae89ac96d258c71de3c5efc1e9f" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;file mode&lt;/code&gt; allocates and returns a new, open handle to manage the file &lt;code&gt;file&lt;/code&gt;. It manages input if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;system-io#v:ReadMode&quot;&gt;ReadMode&lt;/a&gt;&lt;/code&gt;, output if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;system-io#v:WriteMode&quot;&gt;WriteMode&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system-io#v:AppendMode&quot;&gt;AppendMode&lt;/a&gt;&lt;/code&gt;, and both input and output if mode is &lt;code&gt;&lt;a href=&quot;system-io#v:ReadWriteMode&quot;&gt;ReadWriteMode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;file mode&lt;/code&gt; 分配并返回一个新的打开的句柄来管理文件 &lt;code&gt;file&lt;/code&gt; 。它管理如果输入 &lt;code&gt;mode&lt;/code&gt; 是 &lt;code&gt;&lt;a href=&quot;system-io#v:ReadMode&quot;&gt;ReadMode&lt;/a&gt;&lt;/code&gt; ，如果输出 &lt;code&gt;mode&lt;/code&gt; 是 &lt;code&gt;&lt;a href=&quot;system-io#v:WriteMode&quot;&gt;WriteMode&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;system-io#v:AppendMode&quot;&gt;AppendMode&lt;/a&gt;&lt;/code&gt; ，和输入和输出，如果模式是 &lt;code&gt;&lt;a href=&quot;system-io#v:ReadWriteMode&quot;&gt;ReadWriteMode&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0a267fc98e0887b06c428eb759a73b0a2415f8b5" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; returns a list of the program's command line arguments (not including the program name), as &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">Computation &lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; 以 &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 的形式返回程序命令行参数的列表（不包括程序名称）。</target>
        </trans-unit>
        <trans-unit id="173f16d1c29da35668fa25d3c5feae7903d9a190" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;system cmd&lt;/code&gt; returns the exit code produced when the operating system runs the shell command &lt;code&gt;cmd&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;system cmd&lt;/code&gt; 返回操作系统运行shell命令 &lt;code&gt;cmd&lt;/code&gt; 时产生的退出代码。</target>
        </trans-unit>
        <trans-unit id="5943a4fc5e2555aaac37422a0de78f765a8617a9" translate="yes" xml:space="preserve">
          <source>Computation to run</source>
          <target state="translated">计算运行</target>
        </trans-unit>
        <trans-unit id="c8a170a3b747ca22f1d4b56b6bc8091b936fb686" translate="yes" xml:space="preserve">
          <source>Computation to run in the modified environment.</source>
          <target state="translated">计算要在修改后的环境中运行。</target>
        </trans-unit>
        <trans-unit id="395564d952cf55d40bed153b5a7ea77f8f7361fb" translate="yes" xml:space="preserve">
          <source>Computation type:</source>
          <target state="translated">计算类型:</target>
        </trans-unit>
        <trans-unit id="528287b862f50905b7d4dac4caa370a0e3a882a7" translate="yes" xml:space="preserve">
          <source>Computations are actions that may produce a value or exit.</source>
          <target state="translated">计算是可能产生一个值或退出的动作。</target>
        </trans-unit>
        <trans-unit id="c36b791a16f2d2e83af649c48f9331faff40c774" translate="yes" xml:space="preserve">
          <source>Computations are either exceptions or normal values.</source>
          <target state="translated">计算是例外或正常值。</target>
        </trans-unit>
        <trans-unit id="ece7dbd68baf18a047d8ff86d1ae4523aa7a82e9" translate="yes" xml:space="preserve">
          <source>Computations are functions of a shared environment.</source>
          <target state="translated">计算是共享环境的功能。</target>
        </trans-unit>
        <trans-unit id="1231ea3805616498abbd9a29a9c71e500d80a589" translate="yes" xml:space="preserve">
          <source>Computations which can be interrupted and resumed.</source>
          <target state="translated">可以中断和恢复的计算。</target>
        </trans-unit>
        <trans-unit id="ed5e6b9fffa43d51b9cfbdef14affbd1d9cc0a99" translate="yes" xml:space="preserve">
          <source>Computations which may fail or throw exceptions.</source>
          <target state="translated">可能失败或引发异常的计算。</target>
        </trans-unit>
        <trans-unit id="e7b93e209bf365eeb2e47a2f67afda45f906497e" translate="yes" xml:space="preserve">
          <source>Computations which read values from a shared environment.</source>
          <target state="translated">从共享环境中读取数值的计算。</target>
        </trans-unit>
        <trans-unit id="ce49c21cca27f7efda439007b9520214424bc467" translate="yes" xml:space="preserve">
          <source>Compute absolute value of an &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 绝对值</target>
        </trans-unit>
        <trans-unit id="41f1f3c498e9e370bd509a5ca499e1687f0f4eed" translate="yes" xml:space="preserve">
          <source>Compute base-2 log of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt; 的 base- 2日志</target>
        </trans-unit>
        <trans-unit id="e371c66821c3c8601ec67ea6d81996b858684a1d" translate="yes" xml:space="preserve">
          <source>Compute greatest common divisor.</source>
          <target state="translated">计算最大公因子。</target>
        </trans-unit>
        <trans-unit id="9f517d7003ca1e6fa6ed101b53521d0a7777a04c" translate="yes" xml:space="preserve">
          <source>Compute least common multiple.</source>
          <target state="translated">计算最小公倍数。</target>
        </trans-unit>
        <trans-unit id="1c880a5fe1a5ab1eeb98ef65b0f69203e403e4b6" translate="yes" xml:space="preserve">
          <source>Compute n-ary logic exclusive OR operation on &lt;code&gt;&lt;a href=&quot;data-list-nonempty#t:NonEmpty&quot;&gt;NonEmpty&lt;/a&gt;&lt;/code&gt; list.</source>
          <target state="translated">计算 &lt;code&gt;&lt;a href=&quot;data-list-nonempty#t:NonEmpty&quot;&gt;NonEmpty&lt;/a&gt;&lt;/code&gt; 列表上的n元逻辑异或运算。</target>
        </trans-unit>
        <trans-unit id="b39667573824dacb99ea3b5c798fe22e8b493e4e" translate="yes" xml:space="preserve">
          <source>Compute next prime greater than &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; probalistically.</source>
          <target state="translated">计算出大于 &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; 的下一个质数。</target>
        </trans-unit>
        <trans-unit id="d33eedc2c81f4649c2634a937f86f162194eb380" translate="yes" xml:space="preserve">
          <source>Compute number of digits (without sign) in given &lt;code&gt;&lt;em&gt;base&lt;/em&gt;&lt;/code&gt;.</source>
          <target state="translated">计算给定 &lt;code&gt;&lt;em&gt;base&lt;/em&gt;&lt;/code&gt; 中的位数（不带符号）。</target>
        </trans-unit>
        <trans-unit id="31653fd8d49487dfb88104e07b384204607afa7d" translate="yes" xml:space="preserve">
          <source>Compute size of serialisation</source>
          <target state="translated">计算序列化的大小</target>
        </trans-unit>
        <trans-unit id="932be4bfd168bc37465e3549a403c6414b683f75" translate="yes" xml:space="preserve">
          <source>Compute the maximum size from a size hint, if possible.</source>
          <target state="translated">如果可能的话,根据尺寸提示计算最大尺寸。</target>
        </trans-unit>
        <trans-unit id="889d89291c16bb001ded3003749e279a017d05db" translate="yes" xml:space="preserve">
          <source>Computed value</source>
          <target state="translated">计算值</target>
        </trans-unit>
        <trans-unit id="d4170a2ec3c4bb825e6e8112ccad9cea837d259c" translate="yes" xml:space="preserve">
          <source>Computer Name</source>
          <target state="translated">计算机名称</target>
        </trans-unit>
        <trans-unit id="1489fd81a0417ecf958b9d01347167d1f10379a4" translate="yes" xml:space="preserve">
          <source>Computes the alignment constraint of the argument. An alignment constraint &lt;code&gt;x&lt;/code&gt; is fulfilled by any address divisible by &lt;code&gt;x&lt;/code&gt;. The value of the argument is not used.</source>
          <target state="translated">计算参数的对齐约束。对齐约束 &lt;code&gt;x&lt;/code&gt; 由 &lt;code&gt;x&lt;/code&gt; 整除的任何地址都可以满足。不使用参数的值。</target>
        </trans-unit>
        <trans-unit id="6e8be9a732d468673522e80c8afaee0e03727423" translate="yes" xml:space="preserve">
          <source>Computes the alignment, in bytes, of &lt;code&gt;struct_type&lt;/code&gt;. It will have type &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;struct_type&lt;/code&gt; 的对齐方式（以字节为单位）。它将具有 &lt;code&gt;Int&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="16ae87dbf75fe0a890fa8b40cc88399164adc272" translate="yes" xml:space="preserve">
          <source>Computes the hash of a given file. This function loops over the handle, running in constant memory.</source>
          <target state="translated">计算给定文件的哈希值。该函数在句柄上循环,在恒定内存中运行。</target>
        </trans-unit>
        <trans-unit id="e40774cf79f1d6668a3ee91a6d2146b564fb68eb" translate="yes" xml:space="preserve">
          <source>Computes the offset required to get from the second to the first argument. We have</source>
          <target state="translated">计算从第二个参数到第一个参数所需的偏移量。我们有</target>
        </trans-unit>
        <trans-unit id="e777d2021cc4a779dd595b85d7531e8e5da555cc" translate="yes" xml:space="preserve">
          <source>Computes the offset, in bytes, of &lt;code&gt;field&lt;/code&gt; in &lt;code&gt;struct_type&lt;/code&gt;. It will have type &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">计算的偏移量，以字节为单位的 &lt;code&gt;field&lt;/code&gt; 中 &lt;code&gt;struct_type&lt;/code&gt; 。它将具有 &lt;code&gt;Int&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="537d6be6337ae1a839c062f33d0cdd2379322fa3" translate="yes" xml:space="preserve">
          <source>Computes the position of a token.</source>
          <target state="translated">计算代币的位置。</target>
        </trans-unit>
        <trans-unit id="500d251f1f0a8c6255068cbba9713d60a1513f6a" translate="yes" xml:space="preserve">
          <source>Computes the size, in bytes, of &lt;code&gt;struct_type&lt;/code&gt;. It will have type &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">计算 &lt;code&gt;struct_type&lt;/code&gt; 的大小（以字节为单位）。它将具有 &lt;code&gt;Int&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="a8a9dd2d134353659dc9a798da68b82859ae1518" translate="yes" xml:space="preserve">
          <source>Computes the storage requirements (in bytes) of the argument. The value of the argument is not used.</source>
          <target state="translated">计算参数的存储需求(单位:字节)。不使用参数的值。</target>
        </trans-unit>
        <trans-unit id="f6b38904cc0da7828feea802c2bc7123fb8a090a" translate="yes" xml:space="preserve">
          <source>Con</source>
          <target state="translated">Con</target>
        </trans-unit>
        <trans-unit id="155d1779a179a9c816355eea6266197b27b09b96" translate="yes" xml:space="preserve">
          <source>Con&amp;#x27;</source>
          <target state="translated">Con&amp;#x27;</target>
        </trans-unit>
        <trans-unit id="dfd0ea26101cc0cb549bafb1a0ad08464a910111" translate="yes" xml:space="preserve">
          <source>ConIndex</source>
          <target state="translated">ConIndex</target>
        </trans-unit>
        <trans-unit id="1f51a40f68db3f804dc7221a60211e31eac51e42" translate="yes" xml:space="preserve">
          <source>ConLike</source>
          <target state="translated">ConLike</target>
        </trans-unit>
        <trans-unit id="6687920f3069bcec52c734754da20c563aaca3a2" translate="yes" xml:space="preserve">
          <source>ConQ</source>
          <target state="translated">ConQ</target>
        </trans-unit>
        <trans-unit id="26f08e846bd4fb0ff727cca18183acb384d61bb4" translate="yes" xml:space="preserve">
          <source>ConcFlags</source>
          <target state="translated">ConcFlags</target>
        </trans-unit>
        <trans-unit id="7e753af33c5e8b0b810748b18ff7f60b83d5a7d0" translate="yes" xml:space="preserve">
          <source>Concatenate a list of lists.</source>
          <target state="translated">连接一个列表。</target>
        </trans-unit>
        <trans-unit id="6fddd8991c881242e663fb2719b1935da7d4b553" translate="yes" xml:space="preserve">
          <source>Concatenate two &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;s. This function is only exported for use in rewriting rules. Use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">连接两个 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 。仅导出此功能以用于重写规则。否则使用 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b1f9185fadb26dc3dda1d2f233018d881fca3f99" translate="yes" xml:space="preserve">
          <source>Concatenate two &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;s. This function is only exported for use in rewriting rules. Use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec037fd21cdbe752cf956ee1da877b809e27461" translate="yes" xml:space="preserve">
          <source>Concatenation</source>
          <target state="translated">Concatenation</target>
        </trans-unit>
        <trans-unit id="25f0db722595c638f2891a9581d00e40d5c30f10" translate="yes" xml:space="preserve">
          <source>Concatenation of type-level symbols.</source>
          <target state="translated">类型级符号的连接。</target>
        </trans-unit>
        <trans-unit id="4cea7654fa1b91467fe76911980be1ab5326f949" translate="yes" xml:space="preserve">
          <source>Conceptually, the definition of the &lt;code&gt;gmap&lt;/code&gt; combinators in terms of the primitive &lt;code&gt;&lt;a href=&quot;data-data#v:gfoldl&quot;&gt;gfoldl&lt;/a&gt;&lt;/code&gt; requires the identification of the &lt;code&gt;&lt;a href=&quot;data-data#v:gfoldl&quot;&gt;gfoldl&lt;/a&gt;&lt;/code&gt; function arguments. Technically, we also need to identify the type constructor &lt;code&gt;c&lt;/code&gt; for the construction of the result type from the folded term type.</source>
          <target state="translated">从概念上讲，根据原始 &lt;code&gt;&lt;a href=&quot;data-data#v:gfoldl&quot;&gt;gfoldl&lt;/a&gt;&lt;/code&gt; 定义 &lt;code&gt;gmap&lt;/code&gt; 组合器需要识别 &lt;code&gt;&lt;a href=&quot;data-data#v:gfoldl&quot;&gt;gfoldl&lt;/a&gt;&lt;/code&gt; 函数参数。从技术上讲，我们还需要从折叠项类型中识别出用于构造结果类型的类型构造函数 &lt;code&gt;c&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d23fcea4daf97ef1036cd2456514834dc79655f" translate="yes" xml:space="preserve">
          <source>Concretely, consider the following code</source>
          <target state="translated">具体来说,考虑以下代码</target>
        </trans-unit>
        <trans-unit id="5b1efe2191a68a684d543e4bb322dd269b90561b" translate="yes" xml:space="preserve">
          <source>Concurrency is &quot;lightweight&quot;, which means that both thread creation and context switching overheads are extremely low. Scheduling of Haskell threads is done internally in the Haskell runtime system, and doesn't make use of any operating system-supplied thread packages.</source>
          <target state="translated">并发是 &quot;轻量级 &quot;的,这意味着线程创建和上下文切换的开销都极低。Haskell线程的调度是在Haskell运行时系统内部完成的,并没有使用任何操作系统提供的线程包。</target>
        </trans-unit>
        <trans-unit id="2e7a41309b89ac86304011c0bf55274a6f708a87" translate="yes" xml:space="preserve">
          <source>Concurrency-based &lt;code&gt;ForeignPtr&lt;/code&gt; operations</source>
          <target state="translated">基于并发的 &lt;code&gt;ForeignPtr&lt;/code&gt; 操作</target>
        </trans-unit>
        <trans-unit id="8e6395e744c1e58cf0ac43a4cddb054dece909f2" translate="yes" xml:space="preserve">
          <source>Concurrent Haskell</source>
          <target state="translated">并发的Haskell</target>
        </trans-unit>
        <trans-unit id="8da54ad7b1a1507fe2aeb1b7a9ae1a4e91a3e713" translate="yes" xml:space="preserve">
          <source>Concurrent Haskell is the name given to GHC&amp;rsquo;s concurrency extension. It is enabled by default, so no special flags are required. The &lt;a href=&quot;https://www.haskell.org/ghc/docs/papers/concurrent-haskell.ps.gz&quot;&gt;Concurrent Haskell paper&lt;/a&gt; is still an excellent resource, as is &lt;a href=&quot;http://research.microsoft.com/%7Esimonpj/papers/marktoberdorf/&quot;&gt;Tackling the awkward squad&lt;/a&gt;.</source>
          <target state="translated">并发Haskell是GHC的并发扩展名。默认情况下启用它，因此不需要特殊标志。在&lt;a href=&quot;https://www.haskell.org/ghc/docs/papers/concurrent-haskell.ps.gz&quot;&gt;并发哈斯克尔纸&lt;/a&gt;仍然是一个很好的资源，如&lt;a href=&quot;http://research.microsoft.com/%7Esimonpj/papers/marktoberdorf/&quot;&gt;应对尴尬的阵容&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="13390ebeda0b4bed1680907383941e27fcb28643" translate="yes" xml:space="preserve">
          <source>Concurrent threads don&amp;rsquo;t carry on running when GHCi is waiting for input.</source>
          <target state="translated">当GHCi等待输入时，并发线程不会继续运行。</target>
        </trans-unit>
        <trans-unit id="52dcbd4fd374ecdafc2e0d8e67a5e5660b3ec9fd" translate="yes" xml:space="preserve">
          <source>CondBinBox</source>
          <target state="translated">CondBinBox</target>
        </trans-unit>
        <trans-unit id="e308ff9f582e2ed2418ba0def59e798db0f15db7" translate="yes" xml:space="preserve">
          <source>CondBox</source>
          <target state="translated">CondBox</target>
        </trans-unit>
        <trans-unit id="16ff3c39aa1df66f0de6e8fb5fa8b2f30aa3253d" translate="yes" xml:space="preserve">
          <source>Conditional compilation directives are passed unmodified to the C program, C file, and C header. Putting them in the C program means that appropriate parts of the Haskell file will be skipped.</source>
          <target state="translated">条件编译指令不加修改地传递给C程序、C文件和C头。将它们放在 C 程序中意味着 Haskell 文件的适当部分将被跳过。</target>
        </trans-unit>
        <trans-unit id="130461107c667211620f8ce9b47b3259b61a2163" translate="yes" xml:space="preserve">
          <source>Conditional execution of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; expressions. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 表达式的条件执行。例如，</target>
        </trans-unit>
        <trans-unit id="0e84529d3218c6191555cc76b24770860872b0a0" translate="yes" xml:space="preserve">
          <source>Conditional execution of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; expressions. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb162b4c5d7281912e8372eba4648b6ba711a94" translate="yes" xml:space="preserve">
          <source>Conditional execution of &lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; expressions. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 表达式的条件执行。例如，</target>
        </trans-unit>
        <trans-unit id="f411034d4fd2c6cc6534d98bb6906efa3ba93aa8" translate="yes" xml:space="preserve">
          <source>Conditional execution of &lt;code&gt;&lt;a href=&quot;ghc-base#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; expressions. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-base#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 表达式的条件执行。例如，</target>
        </trans-unit>
        <trans-unit id="566f41ff6a81d32d387f3840948d99e44a4737ec" translate="yes" xml:space="preserve">
          <source>Conditional execution of monadic expressions</source>
          <target state="translated">单元表达式的条件执行</target>
        </trans-unit>
        <trans-unit id="94c006419889fc0dbc2ea0945043db19993802b9" translate="yes" xml:space="preserve">
          <source>Conditional failure of &lt;code&gt;&lt;a href=&quot;control-applicative#t:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; computations. Defined by</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-applicative#t:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; 计算的条件失败。被定义为</target>
        </trans-unit>
        <trans-unit id="ca2401387ad3b267393e50496be6a9aa8b97e675" translate="yes" xml:space="preserve">
          <source>Conditionally prove the equality of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">有条件地证明 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 相等。</target>
        </trans-unit>
        <trans-unit id="590b64e2731b9d71fb7dd6b74e8f8430a100f6cf" translate="yes" xml:space="preserve">
          <source>Conditionally prove the representational equality of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">有条件地证明 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 的表示相等性。</target>
        </trans-unit>
        <trans-unit id="465d19b1eca2928057588f1c0a3a232118c5e925" translate="yes" xml:space="preserve">
          <source>Conditionally select a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;. For example, we can implement the ASCII primitive that drops characters with Unicode codepoints above 127 as follows.</source>
          <target state="translated">有条件地选择 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 。例如，我们可以实现ASCII原语，该原语将Unicode代码点高于127的字符删除，如下所示。</target>
        </trans-unit>
        <trans-unit id="2275cbca87eca820e502f9ccc7688d5277fccaa3" translate="yes" xml:space="preserve">
          <source>Conditionally select a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;. For example, we can implement the ASCII primitive that drops characters with Unicode codepoints above 127 as follows.</source>
          <target state="translated">有条件地选择 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 。例如，我们可以实现ASCII原语，该原语将Unicode代码点高于127的字符删除，如下所示。</target>
        </trans-unit>
        <trans-unit id="d6a56385d0729f6ff4bf27671cc845cb6f2cfde5" translate="yes" xml:space="preserve">
          <source>Conditionals</source>
          <target state="translated">Conditionals</target>
        </trans-unit>
        <trans-unit id="666cdf1d4cacc1a0770eed791fdf23c246328dbf" translate="yes" xml:space="preserve">
          <source>Conditionals (e.g. &amp;ldquo;&lt;code&gt;if&lt;/code&gt; e1 &lt;code&gt;then&lt;/code&gt; e2 &lt;code&gt;else&lt;/code&gt; e3&amp;rdquo;) means &amp;ldquo;&lt;code&gt;ifThenElse&lt;/code&gt; e1 e2 e3&amp;rdquo;. However &lt;code&gt;case&lt;/code&gt; expressions are unaffected.</source>
          <target state="translated">条件语句（例如，&amp;ldquo; &lt;code&gt;if&lt;/code&gt; E1 &lt;code&gt;then&lt;/code&gt; E2 &lt;code&gt;else&lt;/code&gt; E3&amp;rdquo;）的意思是&amp;ldquo; &lt;code&gt;ifThenElse&lt;/code&gt; E1 E2 E3&amp;rdquo;。但是， &lt;code&gt;case&lt;/code&gt; 表达式不受影响。</target>
        </trans-unit>
        <trans-unit id="c872d2249b3ed3269c6ce50f0ffd0cb67089f40d" translate="yes" xml:space="preserve">
          <source>Confirm that &lt;code&gt;&lt;a href=&quot;data-bool#v:bool&quot;&gt;bool&lt;/a&gt; x y p&lt;/code&gt; and &lt;code&gt;if p then y else x&lt;/code&gt; are equivalent:</source>
          <target state="translated">确认 &lt;code&gt;&lt;a href=&quot;data-bool#v:bool&quot;&gt;bool&lt;/a&gt; x y p&lt;/code&gt; ， &lt;code&gt;if p then y else x&lt;/code&gt; 等效：</target>
        </trans-unit>
        <trans-unit id="18deff53cdd05b346de3253c1dd1e509db65c095" translate="yes" xml:space="preserve">
          <source>Conjugate</source>
          <target state="translated">Conjugate</target>
        </trans-unit>
        <trans-unit id="c50eb143c997c6c488a9dd7e244fe98a4087d50c" translate="yes" xml:space="preserve">
          <source>ConnectorPunctuation</source>
          <target state="translated">ConnectorPunctuation</target>
        </trans-unit>
        <trans-unit id="edd7f0ca8504937d01d607e07723ac46aa052210" translate="yes" xml:space="preserve">
          <source>Conor McBride and Ross Paterson 2005</source>
          <target state="translated">Conor McBride和Ross Paterson,2005年。</target>
        </trans-unit>
        <trans-unit id="adf92671c951691565d7070c7723f7d16bbef6c3" translate="yes" xml:space="preserve">
          <source>Consequences:</source>
          <target state="translated">Consequences:</target>
        </trans-unit>
        <trans-unit id="bd243da61bc83e255c691b0eeb1676f5cf315d17" translate="yes" xml:space="preserve">
          <source>Consider</source>
          <target state="translated">Consider</target>
        </trans-unit>
        <trans-unit id="5f6ea1d3e0aefd32c3e548a33f65c235ecc5ec3e" translate="yes" xml:space="preserve">
          <source>Consider a server that broadcasts messages to clients:</source>
          <target state="translated">考虑一个向客户端广播消息的服务器。</target>
        </trans-unit>
        <trans-unit id="b6fc02c5d9d768d1713ce738098380aec015b8f7" translate="yes" xml:space="preserve">
          <source>Consider inferring the kind for</source>
          <target state="translated">考虑推断出</target>
        </trans-unit>
        <trans-unit id="4e93ba43c70f76bdfa8c67f12b8bb7a26b1a408a" translate="yes" xml:space="preserve">
          <source>Consider the following class, intended as part of a library for collection types:</source>
          <target state="translated">考虑以下类,打算作为集合类型库的一部分。</target>
        </trans-unit>
        <trans-unit id="7ac04222a10e38f19c86cbfc8b2cee9271b488dd" translate="yes" xml:space="preserve">
          <source>Consider the following concurrent data structure, a skip channel. This is a channel for an intermittent source of high bandwidth information (for example, mouse movement events.) Writing to the channel never blocks, and reading from the channel only returns the most recent value, or blocks if there are no new values. Multiple readers are supported with a &lt;code&gt;dupSkipChan&lt;/code&gt; operation.</source>
          <target state="translated">考虑以下并发数据结构，即跳过通道。这是间歇性的高带宽信息源（例如，鼠标移动事件）的通道。写入该通道不会阻塞，从该通道读取只会返回最近的值，如果没有新值，则阻塞。 &lt;code&gt;dupSkipChan&lt;/code&gt; 操作支持多个阅读器。</target>
        </trans-unit>
        <trans-unit id="ab5b83c5a66bbdddaedee7ab1295c114ef96eac2" translate="yes" xml:space="preserve">
          <source>Consider the following example of a poly-kinded class and an instance for it:</source>
          <target state="translated">考虑下面的一个多亲属类的例子和它的一个实例。</target>
        </trans-unit>
        <trans-unit id="9c9abb7300d19ea6f39900d470fca65b3c7ac134" translate="yes" xml:space="preserve">
          <source>Consider the following examples:</source>
          <target state="translated">请考虑以下例子:</target>
        </trans-unit>
        <trans-unit id="4e519bef8cd17f981ed1232126e9a1bd8a6ad96a" translate="yes" xml:space="preserve">
          <source>Consider the following program:</source>
          <target state="translated">考虑以下程序。</target>
        </trans-unit>
        <trans-unit id="7d1112dda0a0046cb307c5b5dc63bd4b726f05a4" translate="yes" xml:space="preserve">
          <source>Consider the scoping rules for type synonyms and type family instances, such as these:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04cfc74606234c3bd3484f1142c20251f5d126c" translate="yes" xml:space="preserve">
          <source>Consider the type</source>
          <target state="translated">考虑类型</target>
        </trans-unit>
        <trans-unit id="6f1dc922bd88dfa0062a7f9f0d6263e729edf934" translate="yes" xml:space="preserve">
          <source>Consider these two code fragments:</source>
          <target state="translated">考虑这两个代码片段。</target>
        </trans-unit>
        <trans-unit id="87d852e021a93bddf899b5f28b58afd9c6974e91" translate="yes" xml:space="preserve">
          <source>Consider these two definitions:</source>
          <target state="translated">考虑这两个定义。</target>
        </trans-unit>
        <trans-unit id="b0d9bcf7bc58e7b27e69c575fdfb5a87d1ef0d68" translate="yes" xml:space="preserve">
          <source>Consider these two pattern synonyms:</source>
          <target state="translated">考虑这两个模式的同义词。</target>
        </trans-unit>
        <trans-unit id="1a11cf05b826f74b0437934930569c2c5eb2bee6" translate="yes" xml:space="preserve">
          <source>Consider this GHCi session:</source>
          <target state="translated">考虑本次GHCi会议。</target>
        </trans-unit>
        <trans-unit id="565e25b1be863570aa48357d4e37a3cb9b1014a4" translate="yes" xml:space="preserve">
          <source>Consider this example:</source>
          <target state="translated">考虑这个例子。</target>
        </trans-unit>
        <trans-unit id="e429601e69f5b4d1daf533944f4c1a13931e5e34" translate="yes" xml:space="preserve">
          <source>Considers all packages distrusted unless they are explicitly set to be trusted by subsequent command-line options.</source>
          <target state="translated">除非后续的命令行选项明确设置为可信任,否则会认为所有的软件包都是不可信任的。</target>
        </trans-unit>
        <trans-unit id="c512ecf111c7072432db358aea1b0d0808bfafdf" translate="yes" xml:space="preserve">
          <source>Console code pages</source>
          <target state="translated">控制台代码页</target>
        </trans-unit>
        <trans-unit id="56d0232c998d778ef55ad35e83c8072f0d14ad7f" translate="yes" xml:space="preserve">
          <source>Const</source>
          <target state="translated">Const</target>
        </trans-unit>
        <trans-unit id="733fd2b4c4e1bca4c7d0e3c2e1c341bcd1d34269" translate="yes" xml:space="preserve">
          <source>Constant</source>
          <target state="translated">Constant</target>
        </trans-unit>
        <trans-unit id="56741fe253b20e820ac9d4980cd91b02df83d27d" translate="yes" xml:space="preserve">
          <source>Constant functor.</source>
          <target state="translated">恒定的漏斗器。</target>
        </trans-unit>
        <trans-unit id="048991ab35f72179c70dcbb3608a1aa047c74519" translate="yes" xml:space="preserve">
          <source>Constant-time access to both the front and the rear with &lt;code&gt;&lt;a href=&quot;data-sequence#v:-60--124-&quot;&gt;&amp;lt;|&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:-124--62-&quot;&gt;|&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:viewl&quot;&gt;viewl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:viewr&quot;&gt;viewr&lt;/a&gt;&lt;/code&gt;. For recent GHC versions, this can be done more conveniently using the bidirectional patterns &lt;code&gt;&lt;a href=&quot;data-sequence#v:Empty&quot;&gt;Empty&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v::-60--124-&quot;&gt;:&amp;lt;|&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;data-sequence#v::-124--62-&quot;&gt;:|&amp;gt;&lt;/a&gt;&lt;/code&gt;. See the detailed explanation in the &quot;Pattern synonyms&quot; section.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;data-sequence#v:-60--124-&quot;&gt;&amp;lt;|&lt;/a&gt;&lt;/code&gt; 可以恒定时间访问前面和后面 ， &lt;code&gt;&lt;a href=&quot;data-sequence#v:-124--62-&quot;&gt;|&amp;gt;&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;data-sequence#v:viewl&quot;&gt;viewl&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;data-sequence#v:viewr&quot;&gt;viewr&lt;/a&gt;&lt;/code&gt; 。对于最新的GHC版本，可以使用双向模式 &lt;code&gt;&lt;a href=&quot;data-sequence#v:Empty&quot;&gt;Empty&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;data-sequence#v::-60--124-&quot;&gt;:&amp;lt;|&lt;/a&gt;&lt;/code&gt; 更方便地完成此操作。和 &lt;code&gt;&lt;a href=&quot;data-sequence#v::-124--62-&quot;&gt;:|&amp;gt;&lt;/a&gt;&lt;/code&gt; 。请参阅&amp;ldquo;模式同义词&amp;rdquo;部分中的详细说明。</target>
        </trans-unit>
        <trans-unit id="371f549ea50275a8fdad426a77dadc019f20bfac" translate="yes" xml:space="preserve">
          <source>Constants of unlifted kinds</source>
          <target state="translated">非升降式的常数</target>
        </trans-unit>
        <trans-unit id="1eb9dafcce160d5f1c0ebe79fa66ee190788984e" translate="yes" xml:space="preserve">
          <source>Constants, additional parameters and recursion of kind &lt;code&gt;*&lt;/code&gt;</source>
          <target state="translated">常量，附加参数和种类的递归 &lt;code&gt;*&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="57a4414bb7765f60b3f2ec385c9b24b5748f3665" translate="yes" xml:space="preserve">
          <source>Constr</source>
          <target state="translated">Constr</target>
        </trans-unit>
        <trans-unit id="21c820b69bf6c7c4b0ac91f54590652550002acd" translate="yes" xml:space="preserve">
          <source>ConstrRep</source>
          <target state="translated">ConstrRep</target>
        </trans-unit>
        <trans-unit id="01f8a6f673895ca3238e845234e6065ee2865d9c" translate="yes" xml:space="preserve">
          <source>ConstrainedClassMethods</source>
          <target state="translated">ConstrainedClassMethods</target>
        </trans-unit>
        <trans-unit id="cdd87b7907fb17673e884c148848c9c5e93b59ca" translate="yes" xml:space="preserve">
          <source>Constraint</source>
          <target state="translated">Constraint</target>
        </trans-unit>
        <trans-unit id="75786eb55c7c8b70c132b69502ae4ead847f4971" translate="yes" xml:space="preserve">
          <source>Constraint representing the fact that the field &lt;code&gt;x&lt;/code&gt; belongs to the record type &lt;code&gt;r&lt;/code&gt; and has field type &lt;code&gt;a&lt;/code&gt;. This will be solved automatically, but manual instances may be provided as well.</source>
          <target state="translated">表示字段 &lt;code&gt;x&lt;/code&gt; 属于记录类型 &lt;code&gt;r&lt;/code&gt; 且字段类型为 &lt;code&gt;a&lt;/code&gt; 的约束。这将自动解决，但也可以提供手动实例。</target>
        </trans-unit>
        <trans-unit id="524a5a84dda74ac067bc68274307126f82427aa8" translate="yes" xml:space="preserve">
          <source>ConstraintKinds</source>
          <target state="translated">ConstraintKinds</target>
        </trans-unit>
        <trans-unit id="caf70f8d01ddd9b74e3c756ed105855ca10f1157" translate="yes" xml:space="preserve">
          <source>ConstraintT</source>
          <target state="translated">ConstraintT</target>
        </trans-unit>
        <trans-unit id="67f8f093175dfad7d4cda8ae5154585d89127b22" translate="yes" xml:space="preserve">
          <source>Constraints on the non-default type signatures can play a role in inferring the instance context as well. For example, if you have this class:</source>
          <target state="translated">对非默认类型签名的约束在推断实例上下文中也能起到一定作用。例如,如果你有这个类。</target>
        </trans-unit>
        <trans-unit id="9e8638d0568cf3139dfd44edc291ff8d2d398ea8" translate="yes" xml:space="preserve">
          <source>Constraints that have been solved by the plugin must be provided with evidence in the form of an &lt;code&gt;EvTerm&lt;/code&gt; of the type of the constraint. This evidence is ignored for given and derived constraints, which GHC &amp;ldquo;solves&amp;rdquo; simply by discarding them; typically this is used when they are uninformative (e.g. reflexive equations). For wanted constraints, the evidence will form part of the Core term that is generated after typechecking, and can be checked by &lt;code&gt;-dcore-lint&lt;/code&gt;. It is possible for the plugin to create equality axioms for use in evidence terms, but GHC does not check their consistency, and inconsistent axiom sets may lead to segfaults or other runtime misbehaviour.</source>
          <target state="translated">插件已解决的约束必须以约束类型的 &lt;code&gt;EvTerm&lt;/code&gt; 形式提供证据。对于给定的和派生的约束，该证据将被忽略，GHC只是通过丢弃它们来&amp;ldquo;解决&amp;rdquo;。通常，当它们没有信息时（例如自反方程式），将使用此方法。对于所需的约束，证据将构成类型检查后生成的核心术语的一部分，并且可以由 &lt;code&gt;-dcore-lint&lt;/code&gt; 检查。插件有可能创建用于证明的相等公理，但GHC不会检查其一致性，并且公理集不一致可能会导致段错误或其他运行时异常。</target>
        </trans-unit>
        <trans-unit id="ce83dffb75ae10033babed14acf241eba3aff8b2" translate="yes" xml:space="preserve">
          <source>Construct 1-limb &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">从 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt; 构造1- &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="67bd7e1a6daf5e9472fe6fdb69116295ccccdb71" translate="yes" xml:space="preserve">
          <source>Construct &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; value from list of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Types.html#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">从 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Types.html#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 的列表构造 &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="0b943c713fdc28bb45933e7e2f0397324571603a" translate="yes" xml:space="preserve">
          <source>Construct &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; from existing &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt; containing &lt;em&gt;n&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:GmpLimb&quot;&gt;GmpLimb&lt;/a&gt;&lt;/code&gt;s in least-significant-first order.</source>
          <target state="translated">从现有的 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt; 构造 &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; ，其中 &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:GmpLimb&quot;&gt;GmpLimb&lt;/a&gt;&lt;/code&gt; 包含&lt;em&gt;n个&lt;/em&gt;GmpLimb，以最低有效优先顺序排列。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="546c7d91e365ed08852f86313d097f20c2743c02" translate="yes" xml:space="preserve">
          <source>Construct &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;data-word#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">从 &lt;code&gt;&lt;a href=&quot;data-word#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt; 值构造 &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="643f46731d056f74a8c6e4a19be28280ee88d08e" translate="yes" xml:space="preserve">
          <source>Construct &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; value from list of &lt;code&gt;&lt;a href=&quot;data-word#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">从 &lt;code&gt;&lt;a href=&quot;data-word#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt; 列表构造 &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="89c76f0f8f3ee74a0f8230bdec3d2aefb4ff500e" translate="yes" xml:space="preserve">
          <source>Construct &lt;code&gt;Integer&lt;/code&gt;s</source>
          <target state="translated">构建 &lt;code&gt;Integer&lt;/code&gt; 小号</target>
        </trans-unit>
        <trans-unit id="53668995e6cac4f7005b91abb6dee7ff39c02f4e" translate="yes" xml:space="preserve">
          <source>Construct BigNat from 2 limbs. The first argument is the most-significant limb.</source>
          <target state="translated">由2个肢体构建BigNat。第一个参数是最重要的肢体。</target>
        </trans-unit>
        <trans-unit id="5969202d507980e84b50c59a87e69ec14a08f411" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-array-storable#t:StorableArray&quot;&gt;StorableArray&lt;/a&gt;&lt;/code&gt; from an arbitrary &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;. It is the caller's responsibility to ensure that the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; points to an area of memory sufficient for the specified bounds.</source>
          <target state="translated">从任意的 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 构造一个 &lt;code&gt;&lt;a href=&quot;data-array-storable#t:StorableArray&quot;&gt;StorableArray&lt;/a&gt;&lt;/code&gt; 。调用者有责任确保 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 指向足以存储指定范围的内存区域。</target>
        </trans-unit>
        <trans-unit id="8df5c46ae1f3d372da1b0ed4c49cbaaca41c0dbe" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-array-storable#t:StorableArray&quot;&gt;StorableArray&lt;/a&gt;&lt;/code&gt; from an arbitrary &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;. It is the caller's responsibility to ensure that the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; points to an area of memory sufficient for the specified bounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca39844115fdfcf141d70ec5b637b00c55e4055" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that always inserts the strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; directly as a chunk.</source>
          <target state="translated">构造一个始终将严格 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 直接作为块插入的 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e447cfec4aa783ba093628c4f4c3610a2526157" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that copies the &lt;code&gt;&lt;a href=&quot;sh#v:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">构造一个复制 &lt;code&gt;&lt;a href=&quot;sh#v:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="82076a1b089015b2805c4f3aaeae7e1cfb399f4c" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that copies the lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">构造一个复制 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; ，复制延迟的 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ed3b7db4dcf48958be11a2f1e636f93893544a1" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that copies the strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">构建一个复制严格 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bb6b8d6db0bb055f860a0f94b00d34f5fb046647" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that copies the strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s, if it is smaller than the treshold, and inserts it directly otherwise.</source>
          <target state="translated">构造一个 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; ，如果它小于阈值，则复制严格的 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; ，否则直接将其插入。</target>
        </trans-unit>
        <trans-unit id="080faddfc6d1022396830af46ec675a3461a9c44" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that inserts all chunks of the lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; directly.</source>
          <target state="translated">构造一个 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; ，将直接插入惰性 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 的所有块。</target>
        </trans-unit>
        <trans-unit id="61948ff0bad46869d84bf9c199f30454a7371a4f" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that uses the thresholding strategy of &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-extra#v:byteStringThreshold&quot;&gt;byteStringThreshold&lt;/a&gt;&lt;/code&gt; for each chunk of the lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">构造一个 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; ，对惰性 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 的每个块都使用 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-extra#v:byteStringThreshold&quot;&gt;byteStringThreshold&lt;/a&gt;&lt;/code&gt; 的阈值化策略。</target>
        </trans-unit>
        <trans-unit id="43aa14046b04f6cfefe7b3855e0caffff3dd98fb" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that always inserts the strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; directly as a chunk.</source>
          <target state="translated">构造一个始终将严格 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 直接作为块插入的 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f307a277c3bbee41d07fd5830f6b9307b9d81c87" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that copies the &lt;code&gt;&lt;a href=&quot;sh#v:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">构造一个复制 &lt;code&gt;&lt;a href=&quot;sh#v:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fceee5706e1add7e5f23e1355b2319dcfd21e81f" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that copies the lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">构造一个复制 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; ，复制延迟的 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b7b25fd23e7f26312eafdda4e2bf443e4f863964" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that copies the strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">构建一个复制严格 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f6a225d573c02c3c260741be4849f4986b0ec32c" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that copies the strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s, if it is smaller than the treshold, and inserts it directly otherwise.</source>
          <target state="translated">构造一个 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; ，如果它小于阈值，则复制严格的 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; ，否则直接将其插入。</target>
        </trans-unit>
        <trans-unit id="8b21cab2be8964afd16d9f174dc888d825faaaa9" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that inserts all chunks of the lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; directly.</source>
          <target state="translated">构造一个 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; ，将直接插入惰性 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 的所有块。</target>
        </trans-unit>
        <trans-unit id="f7cbff3a7dc9228ccd4cc015fa6c0004acb9f113" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that uses the thresholding strategy of &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#v:byteStringThreshold&quot;&gt;byteStringThreshold&lt;/a&gt;&lt;/code&gt; for each chunk of the lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">构造一个 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; ，对惰性 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 的每个块都使用 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#v:byteStringThreshold&quot;&gt;byteStringThreshold&lt;/a&gt;&lt;/code&gt; 的阈值化策略。</target>
        </trans-unit>
        <trans-unit id="646ad7dbacc9300052c7e605b753d6f666ea4833" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;. In contrast to &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt;s, &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;s are referentially transparent.</source>
          <target state="translated">构造一个 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 。与 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt; 相比， &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 是参照透明的。</target>
        </trans-unit>
        <trans-unit id="c0fe2bfe9d2c472c2224740c1f5ef532280f7cab" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; action. In contrast to &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt;s, &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt;s are referentially transparent in the sense that sequencing the same &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; multiple times yields every time the same value with the same side-effect.</source>
          <target state="translated">构建一个 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; 动作。与 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt; 相比， &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; 是透明的，因为多次对相同的 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; 进行排序会在每次具有相同副作用的相同值时产生。</target>
        </trans-unit>
        <trans-unit id="43f4e84d1539c9f72160bf5eaed772879b40f624" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; without invisibly pinning its byte array in memory if its length has dwindled to zero.</source>
          <target state="translated">如果 &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 的长度减小到零，则构造文本时不要将其字节数组固定在内存中。</target>
        </trans-unit>
        <trans-unit id="3c1125c323d6822e0795fb650c9cb7e2349c0c97" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;system-process#t:CreateProcess&quot;&gt;CreateProcess&lt;/a&gt;&lt;/code&gt; record for passing to &lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt;, representing a command to be passed to the shell.</source>
          <target state="translated">构造要传递给 &lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;system-process#t:CreateProcess&quot;&gt;CreateProcess&lt;/a&gt;&lt;/code&gt; 记录，该记录表示要传递给shell的命令。</target>
        </trans-unit>
        <trans-unit id="5a63159034cf2c4f34bbd264ba1ab926754a84fa" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;system-process#t:CreateProcess&quot;&gt;CreateProcess&lt;/a&gt;&lt;/code&gt; record for passing to &lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt;, representing a raw command with arguments.</source>
          <target state="translated">构造要传递给 &lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;system-process#t:CreateProcess&quot;&gt;CreateProcess&lt;/a&gt;&lt;/code&gt; 记录，该记录表示带有参数的原始命令。</target>
        </trans-unit>
        <trans-unit id="9a3508787004dbd21f8461c38be23ad087070642" translate="yes" xml:space="preserve">
          <source>Construct a continuation-passing computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-cont#v:runCont&quot;&gt;runCont&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">从函数构造连续传递计算。（ &lt;code&gt;&lt;a href=&quot;control-monad-cont#v:runCont&quot;&gt;runCont&lt;/a&gt;&lt;/code&gt; 的反函数）</target>
        </trans-unit>
        <trans-unit id="40a8861c10af19deb91fcbb7b498cc61481ecce8" translate="yes" xml:space="preserve">
          <source>Construct a continuation-passing computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-cont#v:runCont&quot;&gt;runCont&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">从函数构造连续传递计算。（ &lt;code&gt;&lt;a href=&quot;control-monad-trans-cont#v:runCont&quot;&gt;runCont&lt;/a&gt;&lt;/code&gt; 的反函数）</target>
        </trans-unit>
        <trans-unit id="fafe012cf7ba57adfc109c825c282d785078fcab" translate="yes" xml:space="preserve">
          <source>Construct a path relative to the current directory, similar to &lt;code&gt;&lt;a href=&quot;../filepath-1.4.2.1/system-filepath-posix#v:makeRelative&quot;&gt;makeRelative&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">构造一个相对于当前目录的路径，类似于 &lt;code&gt;&lt;a href=&quot;../filepath-1.4.2.1/system-filepath-posix#v:makeRelative&quot;&gt;makeRelative&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7e744960d0a7a1397b4c24a9d34a5bc0d6b9d62d" translate="yes" xml:space="preserve">
          <source>Construct a representation for a type application.</source>
          <target state="translated">构建一个类型应用的表示。</target>
        </trans-unit>
        <trans-unit id="8e736b6db59081e88685c5059c6ecb455f59ce0f" translate="yes" xml:space="preserve">
          <source>Construct a representation for a type constructor applied at a monomorphic kind.</source>
          <target state="translated">为应用于单态的类型构造函数构造一个表示。</target>
        </trans-unit>
        <trans-unit id="9dd9db3e95212979125fe6e4bf88925811a42a45" translate="yes" xml:space="preserve">
          <source>Construct a state monad computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:runState&quot;&gt;runState&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">从函数构造状态monad计算。（ &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:runState&quot;&gt;runState&lt;/a&gt;&lt;/code&gt; 的倒数。）</target>
        </trans-unit>
        <trans-unit id="9f037c8b08c79bac52423ae62381e204b19fb85d" translate="yes" xml:space="preserve">
          <source>Construct a state monad computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-strict#v:runState&quot;&gt;runState&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">从函数构造状态monad计算。（ &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-strict#v:runState&quot;&gt;runState&lt;/a&gt;&lt;/code&gt; 的倒数。）</target>
        </trans-unit>
        <trans-unit id="53aec054094f2b28df182b46629d579290489263" translate="yes" xml:space="preserve">
          <source>Construct a state monad computation from a state transformer function.</source>
          <target state="translated">从状态变换函数构造一个状态单体计算。</target>
        </trans-unit>
        <trans-unit id="36c5989f501b9c2d93f9c2c4e272caca2c456aff" translate="yes" xml:space="preserve">
          <source>Construct a writer computation from a (result, output) computation. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-writer-cps#v:runWriterT&quot;&gt;runWriterT&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">根据（结果，输出）计算构造编写器计算。（ &lt;code&gt;&lt;a href=&quot;control-monad-trans-writer-cps#v:runWriterT&quot;&gt;runWriterT&lt;/a&gt;&lt;/code&gt; 的反函数。）</target>
        </trans-unit>
        <trans-unit id="aa055c344459e267691d83158c55afe6ac0d97fa" translate="yes" xml:space="preserve">
          <source>Construct a writer computation from a (result, output) pair.</source>
          <target state="translated">从一个(结果,输出)对中构造一个写入者计算。</target>
        </trans-unit>
        <trans-unit id="6794fac16c9b50c09c162f42def8b6509b4de34d" translate="yes" xml:space="preserve">
          <source>Construct a writer computation from a (result, output) pair. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-writer-cps#v:runWriter&quot;&gt;runWriter&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">从（结果，输出）对构造编写器计算。（ &lt;code&gt;&lt;a href=&quot;control-monad-trans-writer-cps#v:runWriter&quot;&gt;runWriter&lt;/a&gt;&lt;/code&gt; 的反函数。）</target>
        </trans-unit>
        <trans-unit id="ebd2ff56b014d733d97dae5115b1cfe78aeee682" translate="yes" xml:space="preserve">
          <source>Construct a writer computation from a (result, output) pair. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-writer-lazy#v:runWriter&quot;&gt;runWriter&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">从（结果，输出）对构造编写器计算。（ &lt;code&gt;&lt;a href=&quot;control-monad-trans-writer-lazy#v:runWriter&quot;&gt;runWriter&lt;/a&gt;&lt;/code&gt; 的反函数。）</target>
        </trans-unit>
        <trans-unit id="570f5647e39682a1aa49d822e5c073065351c2e5" translate="yes" xml:space="preserve">
          <source>Construct a writer computation from a (result, output) pair. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-writer-strict#v:runWriter&quot;&gt;runWriter&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">从（结果，输出）对构造编写器计算。（ &lt;code&gt;&lt;a href=&quot;control-monad-trans-writer-strict#v:runWriter&quot;&gt;runWriter&lt;/a&gt;&lt;/code&gt; 的反函数。）</target>
        </trans-unit>
        <trans-unit id="afa14a572fa87fba46902ade8aac3bafa0ea5af5" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;ghc-io-exception#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; value with a string describing the error. The &lt;code&gt;fail&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; instance of the &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class raises a &lt;code&gt;&lt;a href=&quot;ghc-io-exception#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt;, thus:</source>
          <target state="translated">使用描述错误的字符串构造 &lt;code&gt;&lt;a href=&quot;ghc-io-exception#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 值。 &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 类的 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 实例的 &lt;code&gt;fail&lt;/code&gt; 方法引发 &lt;code&gt;&lt;a href=&quot;ghc-io-exception#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt; ，因此：</target>
        </trans-unit>
        <trans-unit id="e11618239dca01a342d56c1c4910dc7e03f18843" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; value with a string describing the error. The &lt;code&gt;fail&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; instance of the &lt;code&gt;&lt;a href=&quot;prelude#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class raises a &lt;code&gt;&lt;a href=&quot;prelude#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt;, thus:</source>
          <target state="translated">使用描述错误的字符串构造 &lt;code&gt;&lt;a href=&quot;prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 值。 &lt;code&gt;&lt;a href=&quot;prelude#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 类的 &lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 实例的 &lt;code&gt;fail&lt;/code&gt; 方法引发 &lt;code&gt;&lt;a href=&quot;prelude#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt; ，因此：</target>
        </trans-unit>
        <trans-unit id="a84840578a93fcc813e462ae43d93aa06dd5cce9" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; of the given type where the second argument describes the error location and the third and fourth argument contain the file handle and file path of the file involved in the error if applicable.</source>
          <target state="translated">构造给定类型的 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; ，其中第二个参数描述错误位置，第三个和第四个参数包含错误所涉及文件的文件句柄和文件路径（如果适用）。</target>
        </trans-unit>
        <trans-unit id="0eb909b0100da50815034b4ea4273edfb0ccdbfe" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; value with a string describing the error. The &lt;code&gt;fail&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; instance of the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class raises a &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt;, thus:</source>
          <target state="translated">使用描述错误的字符串构造 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 值。 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 类的 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 实例的 &lt;code&gt;fail&lt;/code&gt; 方法引发 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt; ，因此：</target>
        </trans-unit>
        <trans-unit id="0c5391336f936e074ee003b6594fbe812721a3a1" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; value with a string describing the error. The &lt;code&gt;fail&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; instance of the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class raises a &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt;, thus:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d446782d7a0a6431559c109811d9cb6a12d2eb" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; based on the given &lt;code&gt;&lt;a href=&quot;foreign-c-error#t:Errno&quot;&gt;Errno&lt;/a&gt;&lt;/code&gt; value. The optional information can be used to improve the accuracy of error messages.</source>
          <target state="translated">根据给定的 &lt;code&gt;&lt;a href=&quot;foreign-c-error#t:Errno&quot;&gt;Errno&lt;/a&gt;&lt;/code&gt; 值构造一个 &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 。可选信息可用于提高错误消息的准确性。</target>
        </trans-unit>
        <trans-unit id="5c057289c4006f5004f40a92d1d18be0debe524b" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; of the given type where the second argument describes the error location and the third and fourth argument contain the file handle and file path of the file involved in the error if applicable.</source>
          <target state="translated">构造给定类型的 &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; ，其中第二个参数描述错误位置，第三个和第四个参数包含错误所涉及文件的文件句柄和文件路径（如果适用）。</target>
        </trans-unit>
        <trans-unit id="ba266a3cb1aac8c4f0d604e31cfe44ef07729188" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; value with a string describing the error. The &lt;code&gt;fail&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; instance of the &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class raises a &lt;code&gt;&lt;a href=&quot;system-io-error#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt;, thus:</source>
          <target state="translated">使用描述错误的字符串构造 &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 值。 &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 类的 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 实例的 &lt;code&gt;fail&lt;/code&gt; 方法引发 &lt;code&gt;&lt;a href=&quot;system-io-error#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt; ，因此：</target>
        </trans-unit>
        <trans-unit id="f76925adff9b7313e2fb2272df27ab5428c544bb" translate="yes" xml:space="preserve">
          <source>Construct an RWS computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-rws-lazy#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">从函数构造RWS计算。（ &lt;code&gt;&lt;a href=&quot;control-monad-rws-lazy#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt; 的逆函数。）</target>
        </trans-unit>
        <trans-unit id="6167a533277d2b8bcf216f55f388b90e1fabb718" translate="yes" xml:space="preserve">
          <source>Construct an RWS computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-rws-strict#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">从函数构造RWS计算。（ &lt;code&gt;&lt;a href=&quot;control-monad-rws-strict#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt; 的逆函数。）</target>
        </trans-unit>
        <trans-unit id="77270b4acbe724f22dc553a3a5f01f5ae711ef45" translate="yes" xml:space="preserve">
          <source>Construct an RWS computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-cps#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">从函数构造RWS计算。（ &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-cps#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt; 的逆函数。）</target>
        </trans-unit>
        <trans-unit id="35d22bddf20c8644753d465ef6b56ae4d777a697" translate="yes" xml:space="preserve">
          <source>Construct an RWS computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-lazy#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">从函数构造RWS计算。（ &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-lazy#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt; 的逆函数。）</target>
        </trans-unit>
        <trans-unit id="58c1ec1c33c68a0f9fef84a00a8d262058638a6f" translate="yes" xml:space="preserve">
          <source>Construct an RWS computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-strict#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">从函数构造RWS计算。（ &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-strict#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt; 的反函数。）</target>
        </trans-unit>
        <trans-unit id="0e94a51065102218cfb8a10a74bacfee87e2c998" translate="yes" xml:space="preserve">
          <source>Construct an RWST computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-cps#v:runRWST&quot;&gt;runRWST&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">从函数构造RWST计算。（ &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-cps#v:runRWST&quot;&gt;runRWST&lt;/a&gt;&lt;/code&gt; 的反函数。）</target>
        </trans-unit>
        <trans-unit id="229a1e04823558b3cb4d4978ff107b110ff894be" translate="yes" xml:space="preserve">
          <source>Construct an accumulation computation from a (result, output) pair. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-accum#v:runAccum&quot;&gt;runAccum&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">从（结果，输出）对构造累积计算。（ &lt;code&gt;&lt;a href=&quot;control-monad-trans-accum#v:runAccum&quot;&gt;runAccum&lt;/a&gt;&lt;/code&gt; 的反函数。）</target>
        </trans-unit>
        <trans-unit id="713effcd12b07bd1c1f823d565249a29943850a0" translate="yes" xml:space="preserve">
          <source>Construct an array from a pair of bounds and a list of values in index order.</source>
          <target state="translated">从一对边界和一个按索引顺序排列的值列表中构建一个数组。</target>
        </trans-unit>
        <trans-unit id="7ba3635ee2cbe52b09a32bddf71f04287d7ccefe" translate="yes" xml:space="preserve">
          <source>Construct an array with the specified bounds and containing values for given indices within these bounds.</source>
          <target state="translated">用指定的边界构造一个数组,并在这些边界内包含给定指数的值。</target>
        </trans-unit>
        <trans-unit id="5deb5b0bb6aac9d6666b492aa50d2eaf9cacd053" translate="yes" xml:space="preserve">
          <source>Construct an iconv-based &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; for the given character set and &lt;code&gt;&lt;a href=&quot;ghc-io-encoding-failure#t:CodingFailureMode&quot;&gt;CodingFailureMode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">为给定的字符集和 &lt;code&gt;&lt;a href=&quot;ghc-io-encoding-failure#t:CodingFailureMode&quot;&gt;CodingFailureMode&lt;/a&gt;&lt;/code&gt; 构造一个基于iconv的 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8bf4c1ac278b2e3f39f7e65171d8ed01b18bd269" translate="yes" xml:space="preserve">
          <source>Construct format string according to &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO-8601&lt;/a&gt;.</source>
          <target state="translated">根据&lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO-8601&lt;/a&gt;构造格式字符串。</target>
        </trans-unit>
        <trans-unit id="551df780808d8498c605c080d05f4c2963f2b5f1" translate="yes" xml:space="preserve">
          <source>Construct new &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt; with an initial counter value.</source>
          <target state="translated">使用初始计数器值构造新的 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7bdba9b06316a551e9130279b8de3424d0ef2ec" translate="yes" xml:space="preserve">
          <source>Construct tag-less &lt;code&gt;&lt;a href=&quot;data-version#t:Version&quot;&gt;Version&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">构造无标签 &lt;code&gt;&lt;a href=&quot;data-version#t:Version&quot;&gt;Version&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3a7471fa0a1b6b91ba3aa8a5ea29d6baf8bef32" translate="yes" xml:space="preserve">
          <source>Construct the tree of &lt;code&gt;Integer&lt;/code&gt;s where each node has two children: &lt;code&gt;left = 2*x&lt;/code&gt; and &lt;code&gt;right = 2*x + 1&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;data-tree#v:rootLabel&quot;&gt;rootLabel&lt;/a&gt;&lt;/code&gt; of the node. Stop when the values exceed 7.</source>
          <target state="translated">构造 &lt;code&gt;Integer&lt;/code&gt; 的树，其中每个节点都有两个孩子： &lt;code&gt;left = 2*x&lt;/code&gt; 和 &lt;code&gt;right = 2*x + 1&lt;/code&gt; ，其中 &lt;code&gt;x&lt;/code&gt; 是节点的 &lt;code&gt;&lt;a href=&quot;data-tree#v:rootLabel&quot;&gt;rootLabel&lt;/a&gt;&lt;/code&gt; 。值超过7时停止。</target>
        </trans-unit>
        <trans-unit id="3cdd8523e19cf65f3fa93bc20fc59b0ffec18b52" translate="yes" xml:space="preserve">
          <source>Constructing Builders</source>
          <target state="translated">建筑商</target>
        </trans-unit>
        <trans-unit id="5be18449f77f3a82cad130a1d05fd37b92f0c974" translate="yes" xml:space="preserve">
          <source>Constructing an explicitly bidirectional pattern synonym also:</source>
          <target state="translated">构建明确的双向模式同义词也。</target>
        </trans-unit>
        <trans-unit id="840c013a39932d3c804ee07ae47c9e5073d42a71" translate="yes" xml:space="preserve">
          <source>Constructing documents</source>
          <target state="translated">构建文件</target>
        </trans-unit>
        <trans-unit id="4c50a189529450d3380818281c6ab3f79f66124e" translate="yes" xml:space="preserve">
          <source>Constructing mutable arrays</source>
          <target state="translated">构造可变数组</target>
        </trans-unit>
        <trans-unit id="b094947bf88a8db80b50a2d24e17b5de2a41dddf" translate="yes" xml:space="preserve">
          <source>Constructing names</source>
          <target state="translated">构造名称</target>
        </trans-unit>
        <trans-unit id="da33e1b7e0c4eae1911ee4a15280f0990e1a6115" translate="yes" xml:space="preserve">
          <source>Construction</source>
          <target state="translated">Construction</target>
        </trans-unit>
        <trans-unit id="edb7861f190be64ab7c7a39786a00727bb16847d" translate="yes" xml:space="preserve">
          <source>Constructor</source>
          <target state="translated">Constructor</target>
        </trans-unit>
        <trans-unit id="2fd910a8e641e118ebbcd211b7150329f75700af" translate="yes" xml:space="preserve">
          <source>Constructor for computations in the exception monad. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:runExcept&quot;&gt;runExcept&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">异常monad中的计算构造函数。（ &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:runExcept&quot;&gt;runExcept&lt;/a&gt;&lt;/code&gt; 的反函数）。</target>
        </trans-unit>
        <trans-unit id="cdc55e56a6cb7e7ce5e5e0b10a76180957575a92" translate="yes" xml:space="preserve">
          <source>Constructor for computations in the reader monad (equivalent to &lt;code&gt;&lt;a href=&quot;control-monad-trans-reader#v:asks&quot;&gt;asks&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">读者monad中的计算构造函数（等效于 &lt;code&gt;&lt;a href=&quot;control-monad-trans-reader#v:asks&quot;&gt;asks&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="29753848500c22c85b434223bffee9144211bab6" translate="yes" xml:space="preserve">
          <source>Constructor for computations in the reader monad (equivalent to &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-cps#v:asks&quot;&gt;asks&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">读者monad中的计算构造函数（等效于 &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-cps#v:asks&quot;&gt;asks&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="eaa1e2ff4aaebb24966d925065b0b67eb6091c2e" translate="yes" xml:space="preserve">
          <source>Constructor for computations in the reader monad (equivalent to &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-lazy#v:asks&quot;&gt;asks&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">读者monad中的计算构造函数（等效于 &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-lazy#v:asks&quot;&gt;asks&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d01e8b4c92b72dc928b0a7994d007f4582b81724" translate="yes" xml:space="preserve">
          <source>Constructor for computations in the reader monad (equivalent to &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-strict#v:asks&quot;&gt;asks&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">读者monad中的计算构造函数（等效于 &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-strict#v:asks&quot;&gt;asks&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ccb57a04a6e11d67a842a8924dc83ab1e7a89f63" translate="yes" xml:space="preserve">
          <source>Constructor for computations in the selection monad.</source>
          <target state="translated">用于在选择单体中进行计算的构造函数。</target>
        </trans-unit>
        <trans-unit id="b5c9417824a65aca8745057dafb4c034175cb1b9" translate="yes" xml:space="preserve">
          <source>Constructor function</source>
          <target state="translated">构造函数</target>
        </trans-unit>
        <trans-unit id="52312b265be254029688404c1c716835f8169693" translate="yes" xml:space="preserve">
          <source>Constructor strictness lookup</source>
          <target state="translated">构造函数严格性查询</target>
        </trans-unit>
        <trans-unit id="60a5c966a71a24034f9238685790a526710ef75d" translate="yes" xml:space="preserve">
          <source>Constructors</source>
          <target state="translated">Constructors</target>
        </trans-unit>
        <trans-unit id="0db3840fb009c9e199a0811671b68463a30b0ba8" translate="yes" xml:space="preserve">
          <source>Constructors without fields: &lt;code&gt;U1&lt;/code&gt;</source>
          <target state="translated">没有字段的构造函数： &lt;code&gt;U1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9fe68d8828df1efd322944d2c1bf5d2db9456df8" translate="yes" xml:space="preserve">
          <source>Constructs a constructor</source>
          <target state="translated">构造一个构造函数</target>
        </trans-unit>
        <trans-unit id="84c67f8e4e905477fd9effb2e30fd3068019dcf3" translate="yes" xml:space="preserve">
          <source>Constructs a mutable array from a list of initial elements. The list gives the elements of the array in ascending order beginning with the lowest index.</source>
          <target state="translated">从一个初始元素列表中构建一个可变数组。列表中的元素从最低索引开始按升序排列。</target>
        </trans-unit>
        <trans-unit id="c37ac8e7192962c3cbf4fcbd43e92f84aa8089e6" translate="yes" xml:space="preserve">
          <source>Constructs a new array derived from the original array by applying a function to each of the elements.</source>
          <target state="translated">通过对每个元素应用一个函数,从原来的数组衍生出一个新的数组。</target>
        </trans-unit>
        <trans-unit id="183d3f225fea9472cb3e1633596bb10e9211c6be" translate="yes" xml:space="preserve">
          <source>Constructs a new array derived from the original array by applying a function to each of the indices.</source>
          <target state="translated">通过对每个索引应用一个函数,从原数组衍生出一个新数组。</target>
        </trans-unit>
        <trans-unit id="dc5c1437cce708210a0e3758246e0050b0e1c23b" translate="yes" xml:space="preserve">
          <source>Constructs a non-representation for a non-representable type</source>
          <target state="translated">为一个不可代表类型构造一个非代表类型。</target>
        </trans-unit>
        <trans-unit id="02e84422de576a5cd3dbab749aad68ed036386b8" translate="yes" xml:space="preserve">
          <source>Constructs an algebraic datatype</source>
          <target state="translated">构造一个代数数据类型。</target>
        </trans-unit>
        <trans-unit id="c07a9e34d54e72c1d3ca4ff75d114050b9077593" translate="yes" xml:space="preserve">
          <source>Constructs an array identical to the first argument except that it has been updated by the associations in the right argument. For example, if &lt;code&gt;m&lt;/code&gt; is a 1-origin, &lt;code&gt;n&lt;/code&gt; by &lt;code&gt;n&lt;/code&gt; matrix, then</source>
          <target state="translated">构造与第一个参数相同的数组，不同之处在于它已由右参数中的关联更新。例如，如果 &lt;code&gt;m&lt;/code&gt; 是1起点的 &lt;code&gt;n&lt;/code&gt; 乘 &lt;code&gt;n&lt;/code&gt; 矩阵，则</target>
        </trans-unit>
        <trans-unit id="351bb1bf05637d4ebcd251efe13b04b604395cda" translate="yes" xml:space="preserve">
          <source>Constructs an element with a custom name, and without any children.</source>
          <target state="translated">构造一个具有自定义名称的元素,并且没有任何子元素。</target>
        </trans-unit>
        <trans-unit id="ac73c83c4b36afe3f6b0b069ab11982d31c0dd2e" translate="yes" xml:space="preserve">
          <source>Constructs an element with a custom name.</source>
          <target state="translated">构造一个具有自定义名称的元素。</target>
        </trans-unit>
        <trans-unit id="1c5525518ac16e2ae61febd10f46980c2793f67c" translate="yes" xml:space="preserve">
          <source>Constructs an immutable array from a list of associations. Unlike &lt;code&gt;&lt;a href=&quot;data-array-iarray#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt;, the same index is allowed to occur multiple times in the list of associations; an &lt;em&gt;accumulating function&lt;/em&gt; is used to combine the values of elements with the same index.</source>
          <target state="translated">从关联列表构造一个不可变的数组。与 &lt;code&gt;&lt;a href=&quot;data-array-iarray#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt; 不同，同一索引在关联列表中允许多次出现；一个&lt;em&gt;累积功能&lt;/em&gt;用于元素的值具有相同索引相结合。</target>
        </trans-unit>
        <trans-unit id="503fc4c1015baa8a701a00fe83632ade0d4ac7c4" translate="yes" xml:space="preserve">
          <source>Constructs an immutable array from a list of initial elements. The list gives the elements of the array in ascending order beginning with the lowest index.</source>
          <target state="translated">从一个初始元素列表中构造一个不可更改的数组。列表中的元素从最低索引开始按升序排列。</target>
        </trans-unit>
        <trans-unit id="d9b7ba711df09eccc4710d3389aed461e3dbc536" translate="yes" xml:space="preserve">
          <source>Constructs an immutable array from a pair of bounds and a list of initial associations.</source>
          <target state="translated">从一对边界和一个初始关联列表中构造一个不可变数组。</target>
        </trans-unit>
        <trans-unit id="e9e69ade4383000dffc37611c195f7e5376c5981" translate="yes" xml:space="preserve">
          <source>Constructs the &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; type</source>
          <target state="translated">构造 &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 类型</target>
        </trans-unit>
        <trans-unit id="7d576d991cc2081c94d0c6f54096ca945fe0e6c3" translate="yes" xml:space="preserve">
          <source>Constructs the &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; type</source>
          <target state="translated">构造 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 类型</target>
        </trans-unit>
        <trans-unit id="8af8b05fff04159fdbfebae14dce835012fe098b" translate="yes" xml:space="preserve">
          <source>Constructs the &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; type</source>
          <target state="translated">构造 &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; 类型</target>
        </trans-unit>
        <trans-unit id="09bf43f01b48072a3c5378f5e196bd6447777b17" translate="yes" xml:space="preserve">
          <source>Consume the chunks of a lazy &lt;code&gt;&lt;a href=&quot;data-text-internal-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; with a natural right fold.</source>
          <target state="translated">消耗具有自然右折的惰性 &lt;code&gt;&lt;a href=&quot;data-text-internal-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 的块。</target>
        </trans-unit>
        <trans-unit id="5873c7e81d4758c499eb387c1f60b147ddd2dffd" translate="yes" xml:space="preserve">
          <source>Consume the chunks of a lazy &lt;code&gt;&lt;a href=&quot;data-text-internal-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; with a strict, tail-recursive, accumulating left fold.</source>
          <target state="translated">使用严格的，尾部递归的，累积左折的懒惰 &lt;code&gt;&lt;a href=&quot;data-text-internal-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 块。</target>
        </trans-unit>
        <trans-unit id="b9ce1f22a7507727e45b588cca6a8c2b1ffc5b1b" translate="yes" xml:space="preserve">
          <source>Consume the chunks of a lazy &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; with a natural right fold.</source>
          <target state="translated">消耗具有自然右折的惰性 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 的块。</target>
        </trans-unit>
        <trans-unit id="9bc1680efa5cec582f6aa88b4980972853912bd6" translate="yes" xml:space="preserve">
          <source>Consume the chunks of a lazy &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; with a strict, tail-recursive, accumulating left fold.</source>
          <target state="translated">使用严格的，尾部递归的，累积左折的懒惰 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 块。</target>
        </trans-unit>
        <trans-unit id="008bf2f62c091044db3bdb944b0e7b432e3a7322" translate="yes" xml:space="preserve">
          <source>Consume the chunks of a lazy ByteString with a natural right fold.</source>
          <target state="translated">以自然右折的方式消耗懒惰的ByteString的分块。</target>
        </trans-unit>
        <trans-unit id="2858b9cf2c03c4f1085ceb512d8f49fa3e00c28f" translate="yes" xml:space="preserve">
          <source>Consume the chunks of a lazy ByteString with a strict, tail-recursive, accumulating left fold.</source>
          <target state="translated">以严格的、尾部递归的、累积左折的方式消耗一个懒惰的ByteString的分块。</target>
        </trans-unit>
        <trans-unit id="cf12704be37bd6ccd3de06eea21b725a20d88ab4" translate="yes" xml:space="preserve">
          <source>Consumed</source>
          <target state="translated">Consumed</target>
        </trans-unit>
        <trans-unit id="4313c54a3c25ad540a82980f7e3dd5b931a8f67c" translate="yes" xml:space="preserve">
          <source>Consumes and returns the next character, if it satisfies the specified predicate.</source>
          <target state="translated">消耗并返回下一个字符,如果它满足指定的谓词。</target>
        </trans-unit>
        <trans-unit id="3f3766e538c9f981b8d9685d841c0000c29d719f" translate="yes" xml:space="preserve">
          <source>Consumes and returns the next character. Fails if there is no input left.</source>
          <target state="translated">消耗并返回下一个字符。如果没有剩余输入,则失败。</target>
        </trans-unit>
        <trans-unit id="cbc747123f7b7ecd93fd53d3c24d63e771fcde4f" translate="yes" xml:space="preserve">
          <source>Cont</source>
          <target state="translated">Cont</target>
        </trans-unit>
        <trans-unit id="f6d09d1bee516498d232f4748ebcb4f020174919" translate="yes" xml:space="preserve">
          <source>ContT</source>
          <target state="translated">ContT</target>
        </trans-unit>
        <trans-unit id="db786cc02bae301b5a9b0e190fc7850f8f1da28d" translate="yes" xml:space="preserve">
          <source>Contains the import list of the module.</source>
          <target state="translated">包含模块的导入列表。</target>
        </trans-unit>
        <trans-unit id="94caf119019f6e259e7477ddfc9cff4975eaeddf" translate="yes" xml:space="preserve">
          <source>Contains the various unsafe operations that can be performed on arrays.</source>
          <target state="translated">包含可以对数组进行的各种不安全操作。</target>
        </trans-unit>
        <trans-unit id="f5cbdf6bfb51439be085b5c6b7460a7c91eabc3c" translate="yes" xml:space="preserve">
          <source>Contents</source>
          <target state="translated">Contents</target>
        </trans-unit>
        <trans-unit id="e416e43f493dc03bd7f45d55965a398e7052a174" translate="yes" xml:space="preserve">
          <source>Contents:</source>
          <target state="translated">Contents:</target>
        </trans-unit>
        <trans-unit id="cc11b3a28fa30ae6d3d3ad1438824cbd5224ba5c" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="translated">Context</target>
        </trans-unit>
        <trans-unit id="759afc40e0ad3a48d4a339d746d617abcf884d69" translate="yes" xml:space="preserve">
          <source>Continuation &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">继续 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f5aac91d70abca445d7979bfc8b0c3a7dd9b72ea" translate="yes" xml:space="preserve">
          <source>Continuation monad. &lt;code&gt;Cont r a&lt;/code&gt; is a CPS (&quot;continuation-passing style&quot;) computation that produces an intermediate result of type &lt;code&gt;a&lt;/code&gt; within a CPS computation whose final result type is &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">延续单子。 &lt;code&gt;Cont r a&lt;/code&gt; 是CPS（&amp;ldquo;连续传递样式&amp;rdquo;）计算，在最终结果类型为 &lt;code&gt;r&lt;/code&gt; 的CPS计算中产生类型 &lt;code&gt;a&lt;/code&gt; 的中间结果。</target>
        </trans-unit>
        <trans-unit id="f0bb7b960cfef6ddaf9904fca03950cf9da86c51" translate="yes" xml:space="preserve">
          <source>Continuation monads.</source>
          <target state="translated">延续单体。</target>
        </trans-unit>
        <trans-unit id="b49577918a547ac64f63c58759e01d168ba6e73e" translate="yes" xml:space="preserve">
          <source>Continuation to use for computing the final result and the tail of its side-effect (the written bytes).</source>
          <target state="translated">继续用于计算最后的结果及其副效应的尾部(写入的字节)。</target>
        </trans-unit>
        <trans-unit id="2a779de660b6a7cee1b66b5e5c80edd2c856f030" translate="yes" xml:space="preserve">
          <source>Continue compilation as far as possible on errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1896bb514a2ea00bdcb533f36dbf51abda3d1eb2" translate="yes" xml:space="preserve">
          <source>Continue the current evaluation, when stopped at a breakpoint.</source>
          <target state="translated">当停止在断点时,继续当前的评估。</target>
        </trans-unit>
        <trans-unit id="b20d37a3583293b7dc41e6c569837e9748090ac3" translate="yes" xml:space="preserve">
          <source>Continuing with our example from the last section, we can write a simple plugin that just prints out the name of all the non-recursive bindings in a module it compiles:</source>
          <target state="translated">继续我们上一节的例子,我们可以写一个简单的插件,只需打印出它编译的模块中所有非递归绑定的名称。</target>
        </trans-unit>
        <trans-unit id="95a21dcc84564345047a8d939ae4ecb365bd1446" translate="yes" xml:space="preserve">
          <source>Contract a filename, based on a relative path. Note that the resulting path will never introduce &lt;code&gt;..&lt;/code&gt; paths, as the presence of symlinks means &lt;code&gt;../b&lt;/code&gt; may not reach &lt;code&gt;a/b&lt;/code&gt; if it starts from &lt;code&gt;a/c&lt;/code&gt;. For a worked example see &lt;a href=&quot;http://neilmitchell.blogspot.co.uk/2015/10/filepaths-are-subtle-symlinks-are-hard.html&quot;&gt;this blog post&lt;/a&gt;.</source>
          <target state="translated">根据相对路径收缩文件名。请注意，生成的路径将永远不会引入 &lt;code&gt;..&lt;/code&gt; 路径，因为符号链接的存在意味着 &lt;code&gt;../b&lt;/code&gt; 如果从 &lt;code&gt;a/c&lt;/code&gt; 开始，则可能不会到达 &lt;code&gt;a/b&lt;/code&gt; 。有关工作示例，请参阅&lt;a href=&quot;http://neilmitchell.blogspot.co.uk/2015/10/filepaths-are-subtle-symlinks-are-hard.html&quot;&gt;此博客文章&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="008c624abc4dd957c3b569ffba23b2ef6ff4774f" translate="yes" xml:space="preserve">
          <source>Contrast this with the special treatment of named wildcards in type signatures (&lt;a href=&quot;#named-wildcards&quot;&gt;Named Wildcards&lt;/a&gt;).</source>
          <target state="translated">将其与类型签名中的命名通配符的特殊处理（&lt;a href=&quot;#named-wildcards&quot;&gt;命名通配符&lt;/a&gt;）进行对比。</target>
        </trans-unit>
        <trans-unit id="18a8eb3dc8f8b2d90b0e435bb2073e587ebd6a81" translate="yes" xml:space="preserve">
          <source>Contravariant</source>
          <target state="translated">Contravariant</target>
        </trans-unit>
        <trans-unit id="e2653d10632c0f7beb41009c9e821fb1d07faa1c" translate="yes" xml:space="preserve">
          <source>Contravariant Functors</source>
          <target state="translated">共变向量</target>
        </trans-unit>
        <trans-unit id="443958f25681d009bb993fd1d5b07011d260a11f" translate="yes" xml:space="preserve">
          <source>Contravariant maps for tactics</source>
          <target state="translated">战术的共变图</target>
        </trans-unit>
        <trans-unit id="ea1d3df298ca84104dbf8b2f6f916c02f6f77c6e" translate="yes" xml:space="preserve">
          <source>Control</source>
          <target state="translated">Control</target>
        </trans-unit>
        <trans-unit id="db4db64a9e962ed5747e6b8156712fb90401488a" translate="yes" xml:space="preserve">
          <source>Control the rendering of floating point numbers.</source>
          <target state="translated">控制浮点数的渲染。</target>
        </trans-unit>
        <trans-unit id="0b6ef37e35fb2a9630357c328a739b15875132a9" translate="yes" xml:space="preserve">
          <source>Control verbosity. Verbosity levels range from 0-2, where the default is 1, and &lt;code&gt;-v&lt;/code&gt; alone selects level 2.</source>
          <target state="translated">控制详细程度。详细级别的范围是0-2，默认值为1，仅 &lt;code&gt;-v&lt;/code&gt; 选择级别2。</target>
        </trans-unit>
        <trans-unit id="2f72ca83ae117700d88b0cd7f55fcf4ae60a74d0" translate="yes" xml:space="preserve">
          <source>Control whether the RTS behaviour can be tweaked via command-line flags and the &lt;code&gt;GHCRTS&lt;/code&gt; environment variable. Using &lt;code&gt;none&lt;/code&gt; means no RTS flags can be given; &lt;code&gt;some&lt;/code&gt; means only a minimum of safe options can be given (the default); &lt;code&gt;all&lt;/code&gt; (or no argument at all) means that all RTS flags are permitted; &lt;code&gt;ignore&lt;/code&gt; means RTS flags can be given, but are treated as regular arguments and passed to the Haskell program as arguments; &lt;code&gt;ignoreAll&lt;/code&gt; is the same as &lt;code&gt;ignore&lt;/code&gt;, but &lt;code&gt;GHCRTS&lt;/code&gt; is also ignored. &lt;code&gt;-rtsopts&lt;/code&gt; does not affect &lt;code&gt;-with-rtsopts&lt;/code&gt; behavior; flags passed via &lt;code&gt;-with-rtsopts&lt;/code&gt; are used regardless of &lt;code&gt;-rtsopts&lt;/code&gt;.</source>
          <target state="translated">控制是否可以通过命令行标志和 &lt;code&gt;GHCRTS&lt;/code&gt; 环境变量来调整RTS行为。使用 &lt;code&gt;none&lt;/code&gt; 手段没有RTS标志可以给出; &lt;code&gt;some&lt;/code&gt; 意味着只能给出最少的安全选项（默认）； &lt;code&gt;all&lt;/code&gt; （或完全没有参数）表示允许所有RTS标志； &lt;code&gt;ignore&lt;/code&gt; 表示可以给出RTS标志，但是将其视为常规参数并作为参数传递给Haskell程序； &lt;code&gt;ignoreAll&lt;/code&gt; 与 &lt;code&gt;ignore&lt;/code&gt; 相同，但是 &lt;code&gt;GHCRTS&lt;/code&gt; 也被忽略。 &lt;code&gt;-rtsopts&lt;/code&gt; 不会影响 &lt;code&gt;-with-rtsopts&lt;/code&gt; 的行为；通过 &lt;code&gt;-with-rtsopts&lt;/code&gt; 传递的标志不管 &lt;code&gt;-rtsopts&lt;/code&gt; 都使用。</target>
        </trans-unit>
        <trans-unit id="9ddba1aa2b8740846582df2425d6760f92e3d0f1" translate="yes" xml:space="preserve">
          <source>Control-C</source>
          <target state="translated">Control-C</target>
        </trans-unit>
        <trans-unit id="a947c53f739ad81f1acf6d7e50f0e35ff6fe2716" translate="yes" xml:space="preserve">
          <source>Control-C handling on Unix</source>
          <target state="translated">在Unix上处理Control-C</target>
        </trans-unit>
        <trans-unit id="ba1eeec2c01c8f6e60827d09f9c5bfc96582a1fb" translate="yes" xml:space="preserve">
          <source>Control-D</source>
          <target state="translated">Control-D</target>
        </trans-unit>
        <trans-unit id="4511d631680da8a44e3325201a0809c9eb26c605" translate="yes" xml:space="preserve">
          <source>Control.Applicative</source>
          <target state="translated">Control.Applicative</target>
        </trans-unit>
        <trans-unit id="7cdb17ee9ff6600603494ff42270ffd016b9204f" translate="yes" xml:space="preserve">
          <source>Control.Applicative.Backwards</source>
          <target state="translated">Control.Applicative.Backwards</target>
        </trans-unit>
        <trans-unit id="edc5f3ca3d8db72769e30b42bb7ac57e3c6c1439" translate="yes" xml:space="preserve">
          <source>Control.Applicative.Lift</source>
          <target state="translated">Control.Applicative.Lift</target>
        </trans-unit>
        <trans-unit id="6ff5edd9d9ec603db5c46a14a631e95d05949658" translate="yes" xml:space="preserve">
          <source>Control.Arrow</source>
          <target state="translated">Control.Arrow</target>
        </trans-unit>
        <trans-unit id="37457c94fe6146a1b986239bf5c728bf98f6b094" translate="yes" xml:space="preserve">
          <source>Control.Category</source>
          <target state="translated">Control.Category</target>
        </trans-unit>
        <trans-unit id="cf26d765ed001864f5b2fcbe9ca44af826190c44" translate="yes" xml:space="preserve">
          <source>Control.Concurrent</source>
          <target state="translated">Control.Concurrent</target>
        </trans-unit>
        <trans-unit id="73fa379214f17675b6ae81e583feabee7d6208aa" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.Chan</source>
          <target state="translated">Control.Concurrent.Chan</target>
        </trans-unit>
        <trans-unit id="ed0308fb66d37563635d9e49be001913df1a8aca" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.MVar</source>
          <target state="translated">Control.Concurrent.MVar</target>
        </trans-unit>
        <trans-unit id="61f10c3323bc4d768a0b627cd4fae1ca08d953bf" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.QSem</source>
          <target state="translated">Control.Concurrent.QSem</target>
        </trans-unit>
        <trans-unit id="c5c49dac901a04507955d6163481c1b647d53aed" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.QSemN</source>
          <target state="translated">Control.Concurrent.QSemN</target>
        </trans-unit>
        <trans-unit id="c937b43e7fd67b62172df97e953fa49416eb3ead" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.STM.TArray</source>
          <target state="translated">Control.Concurrent.STM.TArray</target>
        </trans-unit>
        <trans-unit id="f8e53fde32d3ac5c13461f756ae00f5fa310680e" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.STM.TBQueue</source>
          <target state="translated">Control.Concurrent.STM.TBQueue</target>
        </trans-unit>
        <trans-unit id="ace5a1d4e657e7330376812687524e770f0e52b4" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.STM.TChan</source>
          <target state="translated">Control.Concurrent.STM.TChan</target>
        </trans-unit>
        <trans-unit id="6ed79ee66f306b0da615380cba46e5283be08865" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.STM.TMVar</source>
          <target state="translated">Control.Concurrent.STM.TMVar</target>
        </trans-unit>
        <trans-unit id="6d19c24669e701a2d7c4d03640bdc5ff1f04d3f4" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.STM.TQueue</source>
          <target state="translated">Control.Concurrent.STM.TQueue</target>
        </trans-unit>
        <trans-unit id="14544d7a03e24c9431c9f3a4880f83b145e7ab7b" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.STM.TSem</source>
          <target state="translated">Control.Concurrent.STM.TSem</target>
        </trans-unit>
        <trans-unit id="ab65f4db921c77efc32ced0c51f9a24ca1e480d1" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.STM.TVar</source>
          <target state="translated">Control.Concurrent.STM.TVar</target>
        </trans-unit>
        <trans-unit id="30887df360beccfa667ab4d2e8f50031842e6ffb" translate="yes" xml:space="preserve">
          <source>Control.DeepSeq</source>
          <target state="translated">Control.DeepSeq</target>
        </trans-unit>
        <trans-unit id="0e1aa0ea4d23e309d09d22e5d97b167abedb7823" translate="yes" xml:space="preserve">
          <source>Control.Exception</source>
          <target state="translated">Control.Exception</target>
        </trans-unit>
        <trans-unit id="ae0e25272afc82ddf0f1336bd7ff604af23b0eb3" translate="yes" xml:space="preserve">
          <source>Control.Monad</source>
          <target state="translated">Control.Monad</target>
        </trans-unit>
        <trans-unit id="072235ab16047be447ef5dbe9624632280a5cda7" translate="yes" xml:space="preserve">
          <source>Control.Monad.Cont</source>
          <target state="translated">Control.Monad.Cont</target>
        </trans-unit>
        <trans-unit id="a06adfcdd725cc45c7b777a5eabda1702940ae9a" translate="yes" xml:space="preserve">
          <source>Control.Monad.Error</source>
          <target state="translated">Control.Monad.Error</target>
        </trans-unit>
        <trans-unit id="090f5a2d43666e0b3b3364cf68f1e49b843e16ac" translate="yes" xml:space="preserve">
          <source>Control.Monad.Error.Class</source>
          <target state="translated">Control.Monad.Error.Class</target>
        </trans-unit>
        <trans-unit id="8dd2cf8685f98437d62feb2da158729074523ca8" translate="yes" xml:space="preserve">
          <source>Control.Monad.Except</source>
          <target state="translated">Control.Monad.Except</target>
        </trans-unit>
        <trans-unit id="606ac30d070e7171d627aedaae6a560de9e7bad3" translate="yes" xml:space="preserve">
          <source>Control.Monad.Fail</source>
          <target state="translated">Control.Monad.Fail</target>
        </trans-unit>
        <trans-unit id="1f0bfc4b673b6c810bd329b98ed961829ea42687" translate="yes" xml:space="preserve">
          <source>Control.Monad.Fix</source>
          <target state="translated">Control.Monad.Fix</target>
        </trans-unit>
        <trans-unit id="82dfb4fa8104b5914da63d078dc514adfe5e7148" translate="yes" xml:space="preserve">
          <source>Control.Monad.IO.Class</source>
          <target state="translated">Control.Monad.IO.Class</target>
        </trans-unit>
        <trans-unit id="27d09a75ae0a4657d5e5b791cda5b456aaaa0828" translate="yes" xml:space="preserve">
          <source>Control.Monad.Instances</source>
          <target state="translated">Control.Monad.Instances</target>
        </trans-unit>
        <trans-unit id="45f2844c57d18fb3e712e58b937c1a86db5462e2" translate="yes" xml:space="preserve">
          <source>Control.Monad.List</source>
          <target state="translated">Control.Monad.List</target>
        </trans-unit>
        <trans-unit id="145ea034a1a6bfa4d9a736992f0fb8b8de1f54a5" translate="yes" xml:space="preserve">
          <source>Control.Monad.RWS.Lazy</source>
          <target state="translated">Control.Monad.RWS.Lazy</target>
        </trans-unit>
        <trans-unit id="26558601213fe7fdac24a247fce6298eeb41324c" translate="yes" xml:space="preserve">
          <source>Control.Monad.RWS.Strict</source>
          <target state="translated">Control.Monad.RWS.Strict</target>
        </trans-unit>
        <trans-unit id="f4724058f59389b34b5817e067ae3b8c1e86971f" translate="yes" xml:space="preserve">
          <source>Control.Monad.Reader</source>
          <target state="translated">Control.Monad.Reader</target>
        </trans-unit>
        <trans-unit id="05cb4b25947768699d0141483ee2f038dcd61697" translate="yes" xml:space="preserve">
          <source>Control.Monad.Reader.Class</source>
          <target state="translated">Control.Monad.Reader.Class</target>
        </trans-unit>
        <trans-unit id="0b837a7b5848e20a3e3c8e3efa7e008263cea086" translate="yes" xml:space="preserve">
          <source>Control.Monad.ST</source>
          <target state="translated">Control.Monad.ST</target>
        </trans-unit>
        <trans-unit id="3f76fcc8a2ef0110e9175026f918b7ba69c323c0" translate="yes" xml:space="preserve">
          <source>Control.Monad.ST.Lazy</source>
          <target state="translated">Control.Monad.ST.Lazy</target>
        </trans-unit>
        <trans-unit id="418d57912482f4399c6c57d791c995a4f2b4a78d" translate="yes" xml:space="preserve">
          <source>Control.Monad.ST.Lazy.Safe</source>
          <target state="translated">Control.Monad.ST.Lazy.Safe</target>
        </trans-unit>
        <trans-unit id="045bbd90bf485252be2546913919c937fda5d3e8" translate="yes" xml:space="preserve">
          <source>Control.Monad.ST.Lazy.Unsafe</source>
          <target state="translated">Control.Monad.ST.Lazy.Unsafe</target>
        </trans-unit>
        <trans-unit id="a7f54b6294523d96bf7cae459e883fb4b80a0f34" translate="yes" xml:space="preserve">
          <source>Control.Monad.ST.Safe</source>
          <target state="translated">Control.Monad.ST.Safe</target>
        </trans-unit>
        <trans-unit id="2223de15e18690b25c4ad771884743118abbc8ec" translate="yes" xml:space="preserve">
          <source>Control.Monad.ST.Unsafe</source>
          <target state="translated">Control.Monad.ST.Unsafe</target>
        </trans-unit>
        <trans-unit id="29c2210f0e698c51d7585295ec24cc8d40e5559f" translate="yes" xml:space="preserve">
          <source>Control.Monad.STM</source>
          <target state="translated">Control.Monad.STM</target>
        </trans-unit>
        <trans-unit id="3d0faa8f2521422fc5b5727ad873944b27bcff6f" translate="yes" xml:space="preserve">
          <source>Control.Monad.Signatures</source>
          <target state="translated">Control.Monad.Signatures</target>
        </trans-unit>
        <trans-unit id="c2802414d1b059cb0094fd293a49743f94002cd3" translate="yes" xml:space="preserve">
          <source>Control.Monad.State.Class</source>
          <target state="translated">Control.Monad.State.Class</target>
        </trans-unit>
        <trans-unit id="15531a7195d4187f3cddd3166d49bc6b415f5931" translate="yes" xml:space="preserve">
          <source>Control.Monad.State.Lazy</source>
          <target state="translated">Control.Monad.State.Lazy</target>
        </trans-unit>
        <trans-unit id="b0eafe241f8970912c2cafd010efdd620fc9184a" translate="yes" xml:space="preserve">
          <source>Control.Monad.State.Strict</source>
          <target state="translated">Control.Monad.State.Strict</target>
        </trans-unit>
        <trans-unit id="81dc73a79818a33e2b02b8cf485869d0b8732aa8" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Accum</source>
          <target state="translated">Control.Monad.Trans.Accum</target>
        </trans-unit>
        <trans-unit id="7554c0a6f80ff2128ad69324c36d2e377129c041" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Class</source>
          <target state="translated">Control.Monad.Trans.Class</target>
        </trans-unit>
        <trans-unit id="f79921ad7fb410600b0a0c752805e701f1bf5e34" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Cont</source>
          <target state="translated">Control.Monad.Trans.Cont</target>
        </trans-unit>
        <trans-unit id="458fb22402868d5c4b5880060b4281a2095c63b8" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Error</source>
          <target state="translated">Control.Monad.Trans.Error</target>
        </trans-unit>
        <trans-unit id="10d041bae4f737af7274d65ab91df147c4d2aae8" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Except</source>
          <target state="translated">Control.Monad.Trans.Except</target>
        </trans-unit>
        <trans-unit id="de796ae786c3643528fd4d068522599a4b6c66dc" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Identity</source>
          <target state="translated">Control.Monad.Trans.Identity</target>
        </trans-unit>
        <trans-unit id="decb4a7b00dfe9b518249a4f7592246e1ee229f0" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.List</source>
          <target state="translated">Control.Monad.Trans.List</target>
        </trans-unit>
        <trans-unit id="c00964e20de662eee9d788996980ce96e611190b" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Maybe</source>
          <target state="translated">Control.Monad.Trans.Maybe</target>
        </trans-unit>
        <trans-unit id="a6e396a97b523509230d2cbe6cd660e53ec9dc37" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.RWS.CPS</source>
          <target state="translated">Control.Monad.Trans.RWS.CPS</target>
        </trans-unit>
        <trans-unit id="1bdccaf141a8f972c393e6447c09e138a9ae70b8" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.RWS.Lazy</source>
          <target state="translated">Control.Monad.Trans.RWS.Lazy</target>
        </trans-unit>
        <trans-unit id="274974d12143a83ecb78a678305e208ddd07c876" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.RWS.Strict</source>
          <target state="translated">Control.Monad.Trans.RWS.Strict</target>
        </trans-unit>
        <trans-unit id="313da9376b611ba462db7d9d7d0867d1291903c1" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Reader</source>
          <target state="translated">Control.Monad.Trans.Reader</target>
        </trans-unit>
        <trans-unit id="c27d6621d19100422e3c8ddb622fbf85f28df17b" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Select</source>
          <target state="translated">Control.Monad.Trans.Select</target>
        </trans-unit>
        <trans-unit id="8a2cfb8ddd1e04ccb44e6a026f03f56efe34a999" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.State.Lazy</source>
          <target state="translated">Control.Monad.Trans.State.Lazy</target>
        </trans-unit>
        <trans-unit id="a38e078f9ed2fdad6e6ad25947bc4156a33c8630" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.State.Strict</source>
          <target state="translated">Control.Monad.Trans.State.Strict</target>
        </trans-unit>
        <trans-unit id="8cc03e36817d3710074d888204004d99fd0c9d42" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Writer.CPS</source>
          <target state="translated">Control.Monad.Trans.Writer.CPS</target>
        </trans-unit>
        <trans-unit id="7aad1efd922305b7aab7e0a73230b9d451064cf6" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Writer.Lazy</source>
          <target state="translated">Control.Monad.Trans.Writer.Lazy</target>
        </trans-unit>
        <trans-unit id="e302a223cc41d81923a8e6c86cc7fb143de0ae4f" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Writer.Strict</source>
          <target state="translated">Control.Monad.Trans.Writer.Strict</target>
        </trans-unit>
        <trans-unit id="6fc5c908ab365348c8011d58474fe282894e7e49" translate="yes" xml:space="preserve">
          <source>Control.Monad.Writer.Class</source>
          <target state="translated">Control.Monad.Writer.Class</target>
        </trans-unit>
        <trans-unit id="28268221721a628c7904391064fb4353cb6f340d" translate="yes" xml:space="preserve">
          <source>Control.Monad.Writer.Lazy</source>
          <target state="translated">Control.Monad.Writer.Lazy</target>
        </trans-unit>
        <trans-unit id="71b8413cff57c260d48931edfb611c0648ce2f97" translate="yes" xml:space="preserve">
          <source>Control.Monad.Writer.Strict</source>
          <target state="translated">Control.Monad.Writer.Strict</target>
        </trans-unit>
        <trans-unit id="b14f785feedbb962ee56354141b1c432e908223b" translate="yes" xml:space="preserve">
          <source>Control.Monad.Zip</source>
          <target state="translated">Control.Monad.Zip</target>
        </trans-unit>
        <trans-unit id="4e339e42ff90594d3d6953c5325c9130c04bf74a" translate="yes" xml:space="preserve">
          <source>ControlCharacter</source>
          <target state="translated">ControlCharacter</target>
        </trans-unit>
        <trans-unit id="71f004fe90297850d5fabf4527dff81a7cfa4409" translate="yes" xml:space="preserve">
          <source>Controllable error handling</source>
          <target state="translated">可控的错误处理</target>
        </trans-unit>
        <trans-unit id="62f4bec8a3402e19d696b7f3b4bbf935d70ef75c" translate="yes" xml:space="preserve">
          <source>Controlling chunk boundaries</source>
          <target state="translated">控制分块边界</target>
        </trans-unit>
        <trans-unit id="525e46127102da694ad76f087b77331d6d9c30b9" translate="yes" xml:space="preserve">
          <source>Controls whether GHC displays a line of the original source code where the error was detected. This also affects the associated caret symbol that points at the region of code at fault. The flag is on by default.</source>
          <target state="translated">控制GHC是否在检测到错误的地方显示原始源码的一行。这也会影响到指向错误代码区域的相关卡口符号。默认情况下,该标志为 &quot;开启&quot;。</target>
        </trans-unit>
        <trans-unit id="85d7112dc03ecd7a181b360083728d01f6db75f0" translate="yes" xml:space="preserve">
          <source>Convenience definitions for working with lazy &lt;code&gt;&lt;a href=&quot;../text-1.2.3.2/data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f310e7c1c541dd9ac6157b55814e9889dc7b705f" translate="yes" xml:space="preserve">
          <source>Convenience definitions for working with lazy &lt;code&gt;&lt;a href=&quot;../text-1.2.4.0/data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">使用懒惰 &lt;code&gt;&lt;a href=&quot;../text-1.2.4.0/data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 便利定义。</target>
        </trans-unit>
        <trans-unit id="e3771c790b5f7ae4b73a634398817e36b854bd7d" translate="yes" xml:space="preserve">
          <source>Convenience function: algebraic data types</source>
          <target state="translated">便捷函数:代数数据类型</target>
        </trans-unit>
        <trans-unit id="1c4be7e6e4f92b537985118ffae61f13674d390a" translate="yes" xml:space="preserve">
          <source>Convenience functions</source>
          <target state="translated">便利功能</target>
        </trans-unit>
        <trans-unit id="8c00f8befc4093dd54ec39a47878bf39ae257a00" translate="yes" xml:space="preserve">
          <source>Convenience functions: take type constructors apart</source>
          <target state="translated">便利函数:将类型构造函数拆开</target>
        </trans-unit>
        <trans-unit id="3746e9bbd44ea64ae0e92d5854024253c89a7d89" translate="yes" xml:space="preserve">
          <source>Convenience re-exports</source>
          <target state="translated">便利转口</target>
        </trans-unit>
        <trans-unit id="61856b8c17a4ff32006fe4b7dcc6f96f253b2120" translate="yes" xml:space="preserve">
          <source>Conventions</source>
          <target state="translated">Conventions</target>
        </trans-unit>
        <trans-unit id="d1cc7b75ffd93dc0d3a0ea528b0cc946cb212f85" translate="yes" xml:space="preserve">
          <source>Conversely, any entity requested by a signature can be provided by a reexport from the implementing module. This is different from &lt;code&gt;hs-boot&lt;/code&gt; files, which require every entity to be defined locally in the implementing module.</source>
          <target state="translated">相反，签名所请求的任何实体都可以由实现模块中的重新导出来提供。这与 &lt;code&gt;hs-boot&lt;/code&gt; 文件不同，后者要求每个实体都在实现模块中本地定义。</target>
        </trans-unit>
        <trans-unit id="9151f8433f795cb0f0b5b6743aeb7de77ec49f00" translate="yes" xml:space="preserve">
          <source>Conversion</source>
          <target state="translated">Conversion</target>
        </trans-unit>
        <trans-unit id="03f98de60dba44602f5d22b2db4617355faad3bc" translate="yes" xml:space="preserve">
          <source>Conversion between &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;. Should compile to a no-op.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 之间的转换。应该编译为无操作。</target>
        </trans-unit>
        <trans-unit id="986e019e1554ed8aab166bb45b187eb2173e39bf" translate="yes" xml:space="preserve">
          <source>Conversion between &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;. Should compile to a no-op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a036cbcccc8b7bf9599b3a1632ae1c559d09835e" translate="yes" xml:space="preserve">
          <source>Conversion from &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; into &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;s in various encodings.</source>
          <target state="translated">从 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 转换为各种编码的 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="80f765369ff28710f3a5a6531c73911c37430d94" translate="yes" xml:space="preserve">
          <source>Conversion from &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; into &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;s in various encodings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b3f7717d1704bd9b51def9939f7b97cb65b991" translate="yes" xml:space="preserve">
          <source>Conversion from a &lt;code&gt;&lt;a href=&quot;ghc-real#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; (that is &lt;code&gt;&lt;a href=&quot;ghc-real#t:Ratio&quot;&gt;Ratio&lt;/a&gt; &lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;). A floating literal stands for an application of &lt;code&gt;&lt;a href=&quot;ghc-real#v:fromRational&quot;&gt;fromRational&lt;/a&gt;&lt;/code&gt; to a value of type &lt;code&gt;&lt;a href=&quot;ghc-real#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt;, so such literals have type &lt;code&gt;(&lt;a href=&quot;ghc-real#t:Fractional&quot;&gt;Fractional&lt;/a&gt; a) =&amp;gt; a&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;&lt;a href=&quot;ghc-real#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; 转换（即 &lt;code&gt;&lt;a href=&quot;ghc-real#t:Ratio&quot;&gt;Ratio&lt;/a&gt; &lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; ）。浮动文字表示将 &lt;code&gt;&lt;a href=&quot;ghc-real#v:fromRational&quot;&gt;fromRational&lt;/a&gt;&lt;/code&gt; 应用于 &lt;code&gt;&lt;a href=&quot;ghc-real#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; 类型的值，因此此类文字的类型为 &lt;code&gt;(&lt;a href=&quot;ghc-real#t:Fractional&quot;&gt;Fractional&lt;/a&gt; a) =&amp;gt; a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87d64cfad96fd6d4d5f6bc4485e81af8ea5782ad" translate="yes" xml:space="preserve">
          <source>Conversion from a &lt;code&gt;&lt;a href=&quot;prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; (that is &lt;code&gt;&lt;a href=&quot;data-ratio#t:Ratio&quot;&gt;Ratio&lt;/a&gt; &lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;). A floating literal stands for an application of &lt;code&gt;&lt;a href=&quot;prelude#v:fromRational&quot;&gt;fromRational&lt;/a&gt;&lt;/code&gt; to a value of type &lt;code&gt;&lt;a href=&quot;prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt;, so such literals have type &lt;code&gt;(&lt;a href=&quot;prelude#t:Fractional&quot;&gt;Fractional&lt;/a&gt; a) =&amp;gt; a&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;&lt;a href=&quot;prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; 转换（即 &lt;code&gt;&lt;a href=&quot;data-ratio#t:Ratio&quot;&gt;Ratio&lt;/a&gt; &lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; ）。浮动文字表示将 &lt;code&gt;&lt;a href=&quot;prelude#v:fromRational&quot;&gt;fromRational&lt;/a&gt;&lt;/code&gt; 应用于 &lt;code&gt;&lt;a href=&quot;prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; 类型的值，因此此类文字的类型为 &lt;code&gt;(&lt;a href=&quot;prelude#t:Fractional&quot;&gt;Fractional&lt;/a&gt; a) =&amp;gt; a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9354fe86ceef93fe0187009815d9b7830e12fbb4" translate="yes" xml:space="preserve">
          <source>Conversion from an &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;. An integer literal represents the application of the function &lt;code&gt;&lt;a href=&quot;ghc-num#v:fromInteger&quot;&gt;fromInteger&lt;/a&gt;&lt;/code&gt; to the appropriate value of type &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;, so such literals have type &lt;code&gt;(&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt; a) =&amp;gt; a&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 转换。整数文字表示将函数 &lt;code&gt;&lt;a href=&quot;ghc-num#v:fromInteger&quot;&gt;fromInteger&lt;/a&gt;&lt;/code&gt; 应用于类型 &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 的适当值，因此此类文字具有 &lt;code&gt;(&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt; a) =&amp;gt; a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8abc8ebb7e52b758f68315accd53b140e87db8e3" translate="yes" xml:space="preserve">
          <source>Conversion from an &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;. An integer literal represents the application of the function &lt;code&gt;&lt;a href=&quot;prelude#v:fromInteger&quot;&gt;fromInteger&lt;/a&gt;&lt;/code&gt; to the appropriate value of type &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;, so such literals have type &lt;code&gt;(&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt; a) =&amp;gt; a&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 转换。整数文字表示将函数 &lt;code&gt;&lt;a href=&quot;prelude#v:fromInteger&quot;&gt;fromInteger&lt;/a&gt;&lt;/code&gt; 应用于类型 &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 的适当值，因此此类文字具有 &lt;code&gt;(&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt; a) =&amp;gt; a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e1bc4facd67d8b9399bd6ab9408fa98f8d7288c5" translate="yes" xml:space="preserve">
          <source>Conversion functions will treat it as seconds. For example, &lt;code&gt;(0.010 :: NominalDiffTime)&lt;/code&gt; corresponds to 10 milliseconds.</source>
          <target state="translated">转换功能会将其视为秒。例如， &lt;code&gt;(0.010 :: NominalDiffTime)&lt;/code&gt; 对应于10毫秒。</target>
        </trans-unit>
        <trans-unit id="c18feefd417a0cbe14e4acfc8ed24349072dc9a8" translate="yes" xml:space="preserve">
          <source>Conversion of values to readable &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">将值转换为可读的 &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c41de73bd765f6dbd4ffbffd45f74c43aeabb1e7" translate="yes" xml:space="preserve">
          <source>Conversion of values to readable &lt;code&gt;&lt;a href=&quot;prelude#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">将值转换为可读的 &lt;code&gt;&lt;a href=&quot;prelude#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a91fdf58947502d3e0a163a058adc4eb08aaa8e6" translate="yes" xml:space="preserve">
          <source>Conversion to and from Builders</source>
          <target state="translated">改划为建筑商和从建筑商</target>
        </trans-unit>
        <trans-unit id="c6dddf065c92050d6a5f8fc85ad8fce05b414e39" translate="yes" xml:space="preserve">
          <source>Conversion to and from ForeignPtrs</source>
          <target state="translated">从ForeignPtrs转入和转出</target>
        </trans-unit>
        <trans-unit id="ebce3a96a378128b8ca5b23650b13b3b0fd6ca4c" translate="yes" xml:space="preserve">
          <source>Conversion to other integral types</source>
          <target state="translated">转换为其他积分类型</target>
        </trans-unit>
        <trans-unit id="30122a0db100fe4f54ba80eca7d6a679af7e1ccb" translate="yes" xml:space="preserve">
          <source>Conversion with lists: packing and unpacking</source>
          <target state="translated">用清单转换:包装和拆包</target>
        </trans-unit>
        <trans-unit id="b08eaadf77cfdba7944ddcaf69eee5a983b74af3" translate="yes" xml:space="preserve">
          <source>Conversions</source>
          <target state="translated">Conversions</target>
        </trans-unit>
        <trans-unit id="73a7edc577732e7ee07365acc9871acb8143265a" translate="yes" xml:space="preserve">
          <source>Conversions between mutable and immutable arrays</source>
          <target state="translated">可变数组和不可变数组之间的转换。</target>
        </trans-unit>
        <trans-unit id="aa753fdc419d0d2bd21377afcbed18ec686ab147" translate="yes" xml:space="preserve">
          <source>Conversions to/from &lt;code&gt;BigNat&lt;/code&gt;</source>
          <target state="translated">往返 &lt;code&gt;BigNat&lt;/code&gt; 的转换</target>
        </trans-unit>
        <trans-unit id="e53fb16a0856d0cb7ffedc37783a810764597c85" translate="yes" xml:space="preserve">
          <source>Convert &lt;a href=&quot;glasgow_exts#typed-holes&quot;&gt;typed hole&lt;/a&gt; errors into warnings, &lt;a href=&quot;glasgow_exts#defer-type-errors&quot;&gt;deferring the error until runtime&lt;/a&gt;. Implied by &lt;a href=&quot;using-warnings#ghc-flag--fdefer-type-errors&quot;&gt;&lt;code&gt;-fdefer-type-errors&lt;/code&gt;&lt;/a&gt;. See also &lt;a href=&quot;using-warnings#ghc-flag--Wtyped-holes&quot;&gt;&lt;code&gt;-Wtyped-holes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">将&lt;a href=&quot;glasgow_exts#typed-holes&quot;&gt;类型化的孔&lt;/a&gt;错误转换为警告，&lt;a href=&quot;glasgow_exts#defer-type-errors&quot;&gt;将错误推迟到runtime&lt;/a&gt;。由&lt;a href=&quot;using-warnings#ghc-flag--fdefer-type-errors&quot;&gt; &lt;code&gt;-fdefer-type-errors&lt;/code&gt; &lt;/a&gt;隐含表示。另请参见&lt;a href=&quot;using-warnings#ghc-flag--Wtyped-holes&quot;&gt; &lt;code&gt;-Wtyped-holes&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f6c2b2038e44c60303e29ec254e8c4dbb55f3cf4" translate="yes" xml:space="preserve">
          <source>Convert &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt;. Throws &lt;code&gt;&lt;a href=&quot;control-exception#v:Underflow&quot;&gt;Underflow&lt;/a&gt;&lt;/code&gt; when passed a negative &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 转换为 &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; 。传递负 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 时引发 &lt;code&gt;&lt;a href=&quot;control-exception#v:Underflow&quot;&gt;Underflow&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1354e45c028636f8da1812d39c09c7b75b774c28" translate="yes" xml:space="preserve">
          <source>Convert &lt;code&gt;&lt;a href=&quot;data-time-clock#t:UTCTime&quot;&gt;UTCTime&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt;, matching zero &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; to midnight of &lt;code&gt;&lt;a href=&quot;data-time-clock-system#v:systemEpochDay&quot;&gt;systemEpochDay&lt;/a&gt;&lt;/code&gt; UTC.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;data-time-clock#t:UTCTime&quot;&gt;UTCTime&lt;/a&gt;&lt;/code&gt; 转换为 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; ，将零 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; 匹配到 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#v:systemEpochDay&quot;&gt;systemEpochDay&lt;/a&gt;&lt;/code&gt; UTC的午夜。</target>
        </trans-unit>
        <trans-unit id="a09b0837999b09e91b54ee0d75c47ae892fd88e6" translate="yes" xml:space="preserve">
          <source>Convert &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;data-time-clock#t:UTCTime&quot;&gt;UTCTime&lt;/a&gt;&lt;/code&gt;, matching zero &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; to midnight of &lt;code&gt;&lt;a href=&quot;data-time-clock-system#v:systemEpochDay&quot;&gt;systemEpochDay&lt;/a&gt;&lt;/code&gt; UTC.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; 转换为 &lt;code&gt;&lt;a href=&quot;data-time-clock#t:UTCTime&quot;&gt;UTCTime&lt;/a&gt;&lt;/code&gt; ，将零 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; 匹配到 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#v:systemEpochDay&quot;&gt;systemEpochDay&lt;/a&gt;&lt;/code&gt; UTC的午夜。</target>
        </trans-unit>
        <trans-unit id="fac7818ee694c684710c555ffce6d02662bb549a" translate="yes" xml:space="preserve">
          <source>Convert &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;data-time-clock-tai#t:AbsoluteTime&quot;&gt;AbsoluteTime&lt;/a&gt;&lt;/code&gt;, matching zero &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; to midnight of &lt;code&gt;&lt;a href=&quot;data-time-clock-system#v:systemEpochDay&quot;&gt;systemEpochDay&lt;/a&gt;&lt;/code&gt; TAI.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; 转换为 &lt;code&gt;&lt;a href=&quot;data-time-clock-tai#t:AbsoluteTime&quot;&gt;AbsoluteTime&lt;/a&gt;&lt;/code&gt; ，将零 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; 匹配到 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#v:systemEpochDay&quot;&gt;systemEpochDay&lt;/a&gt;&lt;/code&gt; TAI的午夜。</target>
        </trans-unit>
        <trans-unit id="225f1292e0d1e11e71d5229c52352f75a1a8b9b0" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt;, converting characters that need to be escaped to HTML entities.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 转换为 &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt; ，将需要转义的字符转换为HTML实体。</target>
        </trans-unit>
        <trans-unit id="7093b43578478f99ff48ff5cfcef979da167ea1b" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt;, converting characters that need to be escaped to HTML entities.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 转换为 &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt; ，将需要转义的字符转换为HTML实体。</target>
        </trans-unit>
        <trans-unit id="27898c83d10ec111d83884e3e166a2e145f3541c" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt;, converting characters that need to be escaped to HTML entities.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 转换为 &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt; ，将需要转义的字符转换为HTML实体。</target>
        </trans-unit>
        <trans-unit id="8face85bea9b57ba416a12f86942432cd88df9ca" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt;, converting characters that need to be escaped to HTML entities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9508df496c86228bdcca3d8dc4afc75d34d406b5" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt;, converting characters that need to be escaped to HTML entities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b6ffc489e8fc7578e72d39bf31e9f9443eaba7" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt;, converting characters that need to be escaped to HTML entities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ead5afd69ddf93203b14bb57b2bcdf7910b417f" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#t:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; computation to &lt;code&gt;&lt;a href=&quot;control-monad-trans-maybe#t:MaybeT&quot;&gt;MaybeT&lt;/a&gt;&lt;/code&gt;, discarding the value of any exception.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#t:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; 计算转换为 &lt;code&gt;&lt;a href=&quot;control-monad-trans-maybe#t:MaybeT&quot;&gt;MaybeT&lt;/a&gt;&lt;/code&gt; ，丢弃任何异常的值。</target>
        </trans-unit>
        <trans-unit id="3b71074c790dcab4a6fefe131bcedd0f0fb3ea10" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;control-monad-trans-maybe#t:MaybeT&quot;&gt;MaybeT&lt;/a&gt;&lt;/code&gt; computation to &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#t:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt;, with a default exception value.</source>
          <target state="translated">转换一个 &lt;code&gt;&lt;a href=&quot;control-monad-trans-maybe#t:MaybeT&quot;&gt;MaybeT&lt;/a&gt;&lt;/code&gt; 计算来 &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#t:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; ，具有默认的异常值。</target>
        </trans-unit>
        <trans-unit id="91cf9c88591a73abb39623630b404d0de5e67ca0" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt;&lt;/code&gt; stream by executing it on &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Buffer&quot;&gt;Buffer&lt;/a&gt;&lt;/code&gt;s allocated according to the given &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:AllocationStrategy&quot;&gt;AllocationStrategy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">通过在根据给定 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:AllocationStrategy&quot;&gt;AllocationStrategy&lt;/a&gt;&lt;/code&gt; 分配的 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Buffer&quot;&gt;Buffer&lt;/a&gt;&lt;/code&gt; 上执行 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt; ，将 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt;&lt;/code&gt; 转换为ChunkIOStream流。</target>
        </trans-unit>
        <trans-unit id="e26b60596f796c7c2c441d6c0ddfa0d0dc5b2e09" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt; ()&lt;/code&gt; to a lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">转换一个 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt; ()&lt;/code&gt; 到一个懒惰的 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 用 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d25622eac920253d61e0aa69cdad640475475fe7" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt; ()&lt;/code&gt; to a lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ddacb8d6db585b9396ae6f414b4ed4bdb1a501" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt;&lt;/code&gt; to a lazy tuple of the result and the written &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">转换一个 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt;&lt;/code&gt; 到结果的懒惰元组和书面 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 使用 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0d6326ad6e22cbcf04fe3521f9983ac78cf04542" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt;&lt;/code&gt; to a lazy tuple of the result and the written &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ab4d261dbd9413a55631dbec9803e8597233bd" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt; ()&lt;/code&gt; action to a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt; ()&lt;/code&gt; 操作转换为 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="60e4754c6c58fa94215bb6e620a8b435ed45b584" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; 转换为 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6100385e2c51dcd20067f630c16ceecbf9c49f97" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;ghc-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt; to an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; returned is not necessarily unique; several &lt;code&gt;&lt;a href=&quot;ghc-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt;s may map to the same &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; (in practice however, the chances of this are small, so the result of &lt;code&gt;&lt;a href=&quot;ghc-stablename#v:hashStableName&quot;&gt;hashStableName&lt;/a&gt;&lt;/code&gt; makes a good hash key).</source>
          <target state="translated">转换 &lt;code&gt;&lt;a href=&quot;ghc-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt; 一个 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 。返回的 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 不一定是唯一的；几个 &lt;code&gt;&lt;a href=&quot;ghc-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt; 可以映射到同一个 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; （但是，实际上，这样做的机会很小，因此 &lt;code&gt;&lt;a href=&quot;ghc-stablename#v:hashStableName&quot;&gt;hashStableName&lt;/a&gt;&lt;/code&gt; 的结果是一个很好的哈希键）。</target>
        </trans-unit>
        <trans-unit id="32af3d5dd3e225fe3673711f6fe71bdf33e15fca" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;system-mem-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt; to an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; returned is not necessarily unique; several &lt;code&gt;&lt;a href=&quot;system-mem-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt;s may map to the same &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; (in practice however, the chances of this are small, so the result of &lt;code&gt;&lt;a href=&quot;system-mem-stablename#v:hashStableName&quot;&gt;hashStableName&lt;/a&gt;&lt;/code&gt; makes a good hash key).</source>
          <target state="translated">转换 &lt;code&gt;&lt;a href=&quot;system-mem-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt; 一个 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 。返回的 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 不一定是唯一的；几个 &lt;code&gt;&lt;a href=&quot;system-mem-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt; 可以映射到同一个 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; （但是，实际上，这样做的机会很小，因此 &lt;code&gt;&lt;a href=&quot;system-mem-stablename#v:hashStableName&quot;&gt;hashStableName&lt;/a&gt;&lt;/code&gt; 的结果是一个很好的哈希键）。</target>
        </trans-unit>
        <trans-unit id="49e58fc4b1ce8fdb1edeccf4026d54972e93401e" translate="yes" xml:space="preserve">
          <source>Convert a Boolean in numeric representation to a Haskell value</source>
          <target state="translated">将数值表示的布尔值转换为Haskell值。</target>
        </trans-unit>
        <trans-unit id="add57a579fbcbc7b16ccd3672e91b7fa3c349b2c" translate="yes" xml:space="preserve">
          <source>Convert a C &lt;code&gt;signed char&lt;/code&gt;, representing a Latin-1 character, to the corresponding Haskell character.</source>
          <target state="translated">将代表Latin-1字符的C &lt;code&gt;signed char&lt;/code&gt; 转换为相应的Haskell字符。</target>
        </trans-unit>
        <trans-unit id="9408d5e16c71eb46b7f791b4ee5933182b4f9aea" translate="yes" xml:space="preserve">
          <source>Convert a C &lt;code&gt;unsigned char&lt;/code&gt;, representing a Latin-1 character, to the corresponding Haskell character.</source>
          <target state="translated">将代表Latin-1字符的C &lt;code&gt;unsigned char&lt;/code&gt; 转换为相应的Haskell字符。</target>
        </trans-unit>
        <trans-unit id="1c61174035ed24642151950b9ed59d6a72e55c6d" translate="yes" xml:space="preserve">
          <source>Convert a C byte, representing a Latin-1 character, to the corresponding Haskell character.</source>
          <target state="translated">将代表Latin-1字符的C字节转换为相应的Haskell字符。</target>
        </trans-unit>
        <trans-unit id="9b7995722c1381aea793cbfef4cf08b9e9aedbfe" translate="yes" xml:space="preserve">
          <source>Convert a Haskell &lt;code&gt;&lt;a href=&quot;data-bool#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; to its numeric representation</source>
          <target state="translated">将Haskell &lt;code&gt;&lt;a href=&quot;data-bool#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; 转换为其数字表示形式</target>
        </trans-unit>
        <trans-unit id="78a88d0144531b579e58e385eb9438f51858e5d2" translate="yes" xml:space="preserve">
          <source>Convert a Haskell character to a C &lt;code&gt;signed char&lt;/code&gt;. This function is only safe on the first 256 characters.</source>
          <target state="translated">将Haskell字符转换为C &lt;code&gt;signed char&lt;/code&gt; 。此功能仅在前256个字符上安全。</target>
        </trans-unit>
        <trans-unit id="a986a3e036e3a2cc3cd0aee1a2f7d483f1688c07" translate="yes" xml:space="preserve">
          <source>Convert a Haskell character to a C &lt;code&gt;unsigned char&lt;/code&gt;. This function is only safe on the first 256 characters.</source>
          <target state="translated">将Haskell字符转换为C &lt;code&gt;unsigned char&lt;/code&gt; 。此功能仅在前256个字符上安全。</target>
        </trans-unit>
        <trans-unit id="b38588134e51b133267d7afb4a6741974cc50b0f" translate="yes" xml:space="preserve">
          <source>Convert a Haskell character to a C character. This function is only safe on the first 256 characters.</source>
          <target state="translated">将一个 Haskell 字符转换为 C 字符。这个函数只对前256个字符安全。</target>
        </trans-unit>
        <trans-unit id="dd33d417fbb44d20ec17b95d99a21d44693d7347" translate="yes" xml:space="preserve">
          <source>Convert a Word# into a Natural</source>
          <target state="translated">将单词#转换为自然语言</target>
        </trans-unit>
        <trans-unit id="cca866413f6e188d3a66231d0ec884291f9e0307" translate="yes" xml:space="preserve">
          <source>Convert a bit queue builder to a bit queue. This shifts in a new guard bit on the left, and shifts right until the old guard bit falls off.</source>
          <target state="translated">将位队列建立者转换为位队列。这将在左边移入一个新的保护位,并向右移位,直到旧的保护位脱落。</target>
        </trans-unit>
        <trans-unit id="e54977b34bb26a075a505f22f3cb19c02522b8bd" translate="yes" xml:space="preserve">
          <source>Convert a bit queue to a list of bits by unconsing. This is used to test that the queue functions properly.</source>
          <target state="translated">通过取消consing将位队列转换为位列表。这用于测试队列是否正常运行。</target>
        </trans-unit>
        <trans-unit id="1f3f317342c4c33d787139161d4a3ef9c58795fe" translate="yes" xml:space="preserve">
          <source>Convert a character to a string using only printable characters, using Haskell source-language escape conventions. For example:</source>
          <target state="translated">使用 Haskell 源语言转义约定,将一个字符转换为只使用可打印字符的字符串。例如</target>
        </trans-unit>
        <trans-unit id="461fea11388916477d6dcd61f862a5783f75cc17" translate="yes" xml:space="preserve">
          <source>Convert a count of days and a time of day since midnight into a period of time.</source>
          <target state="translated">将午夜以来的天数和时间转换为时间段。</target>
        </trans-unit>
        <trans-unit id="440236428189e86240a4304a31fcfaa848f47a40" translate="yes" xml:space="preserve">
          <source>Convert a lazy &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation into a strict one.</source>
          <target state="translated">将懒惰的 &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 计算转换为严格的计算。</target>
        </trans-unit>
        <trans-unit id="4a8848ddf3c54b6f57f6a9214c1c385e34929acb" translate="yes" xml:space="preserve">
          <source>Convert a lazy &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation into a strict one.</source>
          <target state="translated">将懒惰的 &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 计算转换为严格的计算。</target>
        </trans-unit>
        <trans-unit id="75aea82a106bb03cf50fe05303197cceb4e2a8ef" translate="yes" xml:space="preserve">
          <source>Convert a letter to the corresponding lower-case letter, if any. Any other character is returned unchanged.</source>
          <target state="translated">将一个字母转换为相应的小写字母(如果有的话)。任何其他字符都将被无条件返回。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
