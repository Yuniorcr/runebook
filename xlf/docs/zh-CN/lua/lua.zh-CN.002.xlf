<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="lua">
    <body>
      <group id="lua">
        <trans-unit id="77c0c811e0708693f332c243247f1f4509702b82" translate="yes" xml:space="preserve">
          <source>Returns the current hook mask.</source>
          <target state="translated">返回当前的钩子掩码。</target>
        </trans-unit>
        <trans-unit id="dfa58fd57235ee80a6d63769d911723e3534cac8" translate="yes" xml:space="preserve">
          <source>Returns the current hook settings of the thread, as three values: the current hook function, the current hook mask, and the current hook count (as set by the &lt;a href=&quot;#pdf-debug.sethook&quot;&gt;&lt;code&gt;debug.sethook&lt;/code&gt;&lt;/a&gt; function).</source>
          <target state="translated">返回线程的当前钩子设置，为三个值：当前钩子函数，当前钩子掩码和当前钩子计数（由&lt;a href=&quot;#pdf-debug.sethook&quot;&gt; &lt;code&gt;debug.sethook&lt;/code&gt; &lt;/a&gt;函数设置）。</target>
        </trans-unit>
        <trans-unit id="a4984b9b007c5eee4f424cfbc9e8ac599f7bc3b2" translate="yes" xml:space="preserve">
          <source>Returns the current time when called without arguments, or a time representing the local date and time specified by the given table. This table must have fields &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt;, and may have fields &lt;code&gt;hour&lt;/code&gt; (default is 12), &lt;code&gt;min&lt;/code&gt; (default is 0), &lt;code&gt;sec&lt;/code&gt; (default is 0), and &lt;code&gt;isdst&lt;/code&gt; (default is &lt;b&gt;nil&lt;/b&gt;). Other fields are ignored. For a description of these fields, see the &lt;a href=&quot;#pdf-os.date&quot;&gt;&lt;code&gt;os.date&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">不带参数调用时返回当前时间，或表示给定表指定的本地日期和时间的时间。该表必须具有字段 &lt;code&gt;year&lt;/code&gt; ， &lt;code&gt;month&lt;/code&gt; 和 &lt;code&gt;day&lt;/code&gt; ，并且可能具有字段 &lt;code&gt;hour&lt;/code&gt; （默认值为12）， &lt;code&gt;min&lt;/code&gt; （默认值为0）， &lt;code&gt;sec&lt;/code&gt; （默认值为0）和 &lt;code&gt;isdst&lt;/code&gt; （默认值为&lt;b&gt;nil&lt;/b&gt;）。其他字段将被忽略。有关这些字段的说明，请参见&lt;a href=&quot;#pdf-os.date&quot;&gt; &lt;code&gt;os.date&lt;/code&gt; &lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="1b56d9d3e264bf539db578bb8f6317e05525f18e" translate="yes" xml:space="preserve">
          <source>Returns the destination table &lt;code&gt;a2&lt;/code&gt;.</source>
          <target state="translated">返回目标表 &lt;code&gt;a2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4a89ca3dbaee05fa9562365bbb11bd2987b8b36f" translate="yes" xml:space="preserve">
          <source>Returns the difference, in seconds, from time &lt;code&gt;t1&lt;/code&gt; to time &lt;code&gt;t2&lt;/code&gt; (where the times are values returned by &lt;a href=&quot;#pdf-os.time&quot;&gt;&lt;code&gt;os.time&lt;/code&gt;&lt;/a&gt;). In POSIX, Windows, and some other systems, this value is exactly &lt;code&gt;t2&lt;/code&gt;&lt;em&gt;-&lt;/em&gt;&lt;code&gt;t1&lt;/code&gt;.</source>
          <target state="translated">返回从时间 &lt;code&gt;t1&lt;/code&gt; 到时间 &lt;code&gt;t2&lt;/code&gt; 的差（以秒为单位）（其中时间是&lt;a href=&quot;#pdf-os.time&quot;&gt; &lt;code&gt;os.time&lt;/code&gt; &lt;/a&gt;返回的值）。在POSIX，Windows和某些其他系统中，此值恰好是 &lt;code&gt;t2&lt;/code&gt; &lt;em&gt;- &lt;/em&gt; &lt;code&gt;t1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="74ef8f0d43907d8993cbf07845e98c64309c4c57" translate="yes" xml:space="preserve">
          <source>Returns the elements from the given list. This function is equivalent to</source>
          <target state="translated">返回给定列表中的元素。这个函数相当于</target>
        </trans-unit>
        <trans-unit id="a0ecb44d1768c16defe86a7226eb7cdb677c4d76" translate="yes" xml:space="preserve">
          <source>Returns the index of the top element in the stack. Because indices start at 1, this result is equal to the number of elements in the stack; in particular, 0 means an empty stack.</source>
          <target state="translated">返回堆栈中顶部元素的索引。因为索引从1开始,所以这个结果等于堆栈中的元素数,特别是0表示是空堆栈。</target>
        </trans-unit>
        <trans-unit id="aae1a98a2afe7e2f6164ed56d98f2c5601c177ce" translate="yes" xml:space="preserve">
          <source>Returns the integral part of &lt;code&gt;x&lt;/code&gt; and the fractional part of &lt;code&gt;x&lt;/code&gt;. Its second result is always a float.</source>
          <target state="translated">返回的组成部分， &lt;code&gt;x&lt;/code&gt; 和小数部分 &lt;code&gt;x&lt;/code&gt; 。第二个结果始终是浮点数。</target>
        </trans-unit>
        <trans-unit id="d07d66699f96edb0b840ccb7b505ca206ea713f8" translate="yes" xml:space="preserve">
          <source>Returns the internal numeric codes of the characters &lt;code&gt;s[i]&lt;/code&gt;, &lt;code&gt;s[i+1]&lt;/code&gt;, ..., &lt;code&gt;s[j]&lt;/code&gt;. The default value for &lt;code&gt;i&lt;/code&gt; is 1; the default value for &lt;code&gt;j&lt;/code&gt; is &lt;code&gt;i&lt;/code&gt;. These indices are corrected following the same rules of function &lt;a href=&quot;#pdf-string.sub&quot;&gt;&lt;code&gt;string.sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返回字符 &lt;code&gt;s[i]&lt;/code&gt; ， &lt;code&gt;s[i+1]&lt;/code&gt; ，...， &lt;code&gt;s[j]&lt;/code&gt; 的内部数字代码。 &lt;code&gt;i&lt;/code&gt; 的默认值为1；默认值为1。默认值 &lt;code&gt;j&lt;/code&gt; 是 &lt;code&gt;i&lt;/code&gt; 。这些索引将按照功能&lt;a href=&quot;#pdf-string.sub&quot;&gt; &lt;code&gt;string.sub&lt;/code&gt; &lt;/a&gt;的相同规则进行更正。</target>
        </trans-unit>
        <trans-unit id="37a74944cfaba1cf96089aa04c3aab36bd768194" translate="yes" xml:space="preserve">
          <source>Returns the largest integral value smaller than or equal to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">返回小于或等于 &lt;code&gt;x&lt;/code&gt; 的最大整数值。</target>
        </trans-unit>
        <trans-unit id="a82986faba63c6df7b4a7e1f2c3e8675bebec131" translate="yes" xml:space="preserve">
          <source>Returns the length of the object &lt;code&gt;v&lt;/code&gt;, which must be a table or a string, without invoking the &lt;code&gt;__len&lt;/code&gt; metamethod. Returns an integer.</source>
          <target state="translated">返回对象 &lt;code&gt;v&lt;/code&gt; 的长度，该对象必须是表或字符串，而不调用 &lt;code&gt;__len&lt;/code&gt; 元方法。返回一个整数。</target>
        </trans-unit>
        <trans-unit id="4d195539511c55ff9d09810f9cb9cabd46d5d2c6" translate="yes" xml:space="preserve">
          <source>Returns the length of the value at the given index. It is equivalent to the '&lt;code&gt;#&lt;/code&gt;' operator in Lua (see &lt;a href=&quot;#3.4.7&quot;&gt;&amp;sect;3.4.7&lt;/a&gt;) and may trigger a metamethod for the &quot;length&quot; event (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;). The result is pushed on the stack.</source>
          <target state="translated">返回给定索引处的值的长度。它等效于Lua中的' &lt;code&gt;#&lt;/code&gt; '运算符（请参阅第&lt;a href=&quot;#3.4.7&quot;&gt;3.4.7节&lt;/a&gt;），并且可能会触发&amp;ldquo;长度&amp;rdquo;事件的元方法（请参阅第&lt;a href=&quot;#2.4&quot;&gt;2.4节&lt;/a&gt;）。结果被压入堆栈。</target>
        </trans-unit>
        <trans-unit id="ca18490544ebe4ab9d2b88782ccfa4bfa597d5c6" translate="yes" xml:space="preserve">
          <source>Returns the logarithm of &lt;code&gt;x&lt;/code&gt; in the given base. The default for &lt;code&gt;base&lt;/code&gt; is &lt;em&gt;e&lt;/em&gt; (so that the function returns the natural logarithm of &lt;code&gt;x&lt;/code&gt;).</source>
          <target state="translated">返回给定底数的 &lt;code&gt;x&lt;/code&gt; 的对数。 &lt;code&gt;base&lt;/code&gt; 的默认值为&lt;em&gt;e&lt;/em&gt;（以便该函数返回 &lt;code&gt;x&lt;/code&gt; 的自然对数）。</target>
        </trans-unit>
        <trans-unit id="d3cb57918cd0fd4016648ae402c7074bcd73a43b" translate="yes" xml:space="preserve">
          <source>Returns the memory-allocation function of a given state. If &lt;code&gt;ud&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, Lua stores in &lt;code&gt;*ud&lt;/code&gt; the opaque pointer given when the memory-allocator function was set.</source>
          <target state="translated">返回给定状态的内存分配函数。如果 &lt;code&gt;ud&lt;/code&gt; 不为 &lt;code&gt;NULL&lt;/code&gt; ，则Lua将在设置内存分配器函数时给出的不透明指针存储在 &lt;code&gt;*ud&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="274b26f09340089c109b77fcaa34ab85c7b27be3" translate="yes" xml:space="preserve">
          <source>Returns the metatable of the given &lt;code&gt;value&lt;/code&gt; or &lt;b&gt;nil&lt;/b&gt; if it does not have a metatable.</source>
          <target state="translated">返回的元表给定的 &lt;code&gt;value&lt;/code&gt; 或者&lt;b&gt;为零&lt;/b&gt;，如果它没有元表。</target>
        </trans-unit>
        <trans-unit id="f827b993d336f39e4e067ba1cd00ca433786753f" translate="yes" xml:space="preserve">
          <source>Returns the name of the type encoded by the value &lt;code&gt;tp&lt;/code&gt;, which must be one the values returned by &lt;a href=&quot;#lua_type&quot;&gt;&lt;code&gt;lua_type&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返回由值 &lt;code&gt;tp&lt;/code&gt; 编码的类型的名称，该值必须是&lt;a href=&quot;#lua_type&quot;&gt; &lt;code&gt;lua_type&lt;/code&gt; &lt;/a&gt;返回的值之一。</target>
        </trans-unit>
        <trans-unit id="b5d2c5467f6b31c133d151a482f437390192631a" translate="yes" xml:space="preserve">
          <source>Returns the name of the type of the value at the given index.</source>
          <target state="translated">返回给定索引处的值的类型名称。</target>
        </trans-unit>
        <trans-unit id="09f17fbeecb99d8ceed703c8e378ebf644bfa53e" translate="yes" xml:space="preserve">
          <source>Returns the new state, or &lt;code&gt;NULL&lt;/code&gt; if there is a memory allocation error.</source>
          <target state="translated">返回新状态，如果存在内存分配错误，则返回 &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1fac8d97901da4fcfa21c51273c8ade3e30d4960" translate="yes" xml:space="preserve">
          <source>Returns the number of UTF-8 characters in string &lt;code&gt;s&lt;/code&gt; that start between positions &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; (both inclusive). The default for &lt;code&gt;i&lt;/code&gt; is 1 and for &lt;code&gt;j&lt;/code&gt; is -1. If it finds any invalid byte sequence, returns a false value plus the position of the first invalid byte.</source>
          <target state="translated">返回在位置 &lt;code&gt;i&lt;/code&gt; 和 &lt;code&gt;j&lt;/code&gt; （包括两端）之间的字符串 &lt;code&gt;s&lt;/code&gt; 中的UTF-8字符数。 &lt;code&gt;i&lt;/code&gt; 的默认值为1， &lt;code&gt;j&lt;/code&gt; 的默认值为-1。如果找到任何无效字节序列，则返回一个假值加上第一个无效字节的位置。</target>
        </trans-unit>
        <trans-unit id="56c4cc904851482307ead3085d1ccd1030454da6" translate="yes" xml:space="preserve">
          <source>Returns the position (in bytes) where the encoding of the &lt;code&gt;n&lt;/code&gt;-th character of &lt;code&gt;s&lt;/code&gt; (counting from position &lt;code&gt;i&lt;/code&gt;) starts. A negative &lt;code&gt;n&lt;/code&gt; gets characters before position &lt;code&gt;i&lt;/code&gt;. The default for &lt;code&gt;i&lt;/code&gt; is 1 when &lt;code&gt;n&lt;/code&gt; is non-negative and &lt;code&gt;#s + 1&lt;/code&gt; otherwise, so that &lt;code&gt;utf8.offset(s, -n)&lt;/code&gt; gets the offset of the &lt;code&gt;n&lt;/code&gt;-th character from the end of the string. If the specified character is neither in the subject nor right after its end, the function returns &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">返回 &lt;code&gt;s&lt;/code&gt; 的第 &lt;code&gt;n&lt;/code&gt; 个字符的编码（从位置 &lt;code&gt;i&lt;/code&gt; 开始）的位置（以字节为单位）。负数 &lt;code&gt;n&lt;/code&gt; 在位置 &lt;code&gt;i&lt;/code&gt; 之前得到字符。当 &lt;code&gt;n&lt;/code&gt; 为非负数时， &lt;code&gt;i&lt;/code&gt; 的默认值为1，否则为 &lt;code&gt;#s + 1&lt;/code&gt; ，因此 &lt;code&gt;utf8.offset(s, -n)&lt;/code&gt; 获得第 &lt;code&gt;n&lt;/code&gt; 个字符到字符串末尾的偏移量。如果指定的字符既不在主题中也不在其结尾之后，则该函数返回&lt;b&gt;nil&lt;/b&gt;。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="bc45c511f20e727c297897c4a412e04b9bb492de" translate="yes" xml:space="preserve">
          <source>Returns the pseudo-index that represents the &lt;code&gt;i&lt;/code&gt;-th upvalue of the running function (see &lt;a href=&quot;#4.4&quot;&gt;&amp;sect;4.4&lt;/a&gt;).</source>
          <target state="translated">返回表示正在运行的函数的第 &lt;code&gt;i&lt;/code&gt; 个上限值的伪索引（请参见&lt;a href=&quot;#4.4&quot;&gt;&amp;sect;4.4&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="39d8bb977f9b8a6f1742fd3f9dc45db22e1fcb68" translate="yes" xml:space="preserve">
          <source>Returns the raw &quot;length&quot; of the value at the given index: for strings, this is the string length; for tables, this is the result of the length operator ('&lt;code&gt;#&lt;/code&gt;') with no metamethods; for userdata, this is the size of the block of memory allocated for the userdata; for other values, it is 0.</source>
          <target state="translated">返回给定索引处值的原始&amp;ldquo;长度&amp;rdquo;：对于字符串，这是字符串长度；对于字符串，这是字符串长度。对于表，这是没有元方法的长度运算符（' &lt;code&gt;#&lt;/code&gt; '）的结果；对于用户数据，这是为用户数据分配的内存块的大小；其他值则为0。</target>
        </trans-unit>
        <trans-unit id="a4878c08432faeac78e45f44f0026ebddb8749ef" translate="yes" xml:space="preserve">
          <source>Returns the registry table (see &lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5&lt;/a&gt;).</source>
          <target state="translated">返回注册表表（请参见&lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="1f182d1d0910847b92e9f446a7345b1cf7e93ffa" translate="yes" xml:space="preserve">
          <source>Returns the remainder of the division of &lt;code&gt;x&lt;/code&gt; by &lt;code&gt;y&lt;/code&gt; that rounds the quotient towards zero. (integer/float)</source>
          <target state="translated">返回 &lt;code&gt;x&lt;/code&gt; 除以 &lt;code&gt;y&lt;/code&gt; 的余数，该余数将商四舍五入为零。（整数/浮点数）</target>
        </trans-unit>
        <trans-unit id="7d00adfd429e9ecb79de1d7e05907584e1f561cc" translate="yes" xml:space="preserve">
          <source>Returns the resulting name of the first file that it can open in read mode (after closing the file), or &lt;b&gt;nil&lt;/b&gt; plus an error message if none succeeds. (This error message lists all file names it tried to open.)</source>
          <target state="translated">返回它可以在读取模式下打开的第一个文件的结果名称（关闭文件后）；如果没有成功，则返回&lt;b&gt;nil&lt;/b&gt;和错误消息。（此错误消息列出了它尝试打开的所有文件名。）</target>
        </trans-unit>
        <trans-unit id="0cafeada936b9b3c536bfda3d7c114159746bc82" translate="yes" xml:space="preserve">
          <source>Returns the running coroutine plus a boolean, true when the running coroutine is the main one.</source>
          <target state="translated">Returns the running coroutine plus a boolean,true when the running coroutine is the main one。</target>
        </trans-unit>
        <trans-unit id="f520f4734dbc499082a5c134aebb7e5257b19210" translate="yes" xml:space="preserve">
          <source>Returns the sine of &lt;code&gt;x&lt;/code&gt; (assumed to be in radians).</source>
          <target state="translated">返回 &lt;code&gt;x&lt;/code&gt; 的正弦（假定为弧度）。</target>
        </trans-unit>
        <trans-unit id="da558ef5afc0fc9c0d21911a38e825ff24dcf0a2" translate="yes" xml:space="preserve">
          <source>Returns the size of a string resulting from &lt;a href=&quot;#pdf-string.pack&quot;&gt;&lt;code&gt;string.pack&lt;/code&gt;&lt;/a&gt; with the given format. The format string cannot have the variable-length options '&lt;code&gt;s&lt;/code&gt;' or '&lt;code&gt;z&lt;/code&gt;' (see &lt;a href=&quot;#6.4.2&quot;&gt;&amp;sect;6.4.2&lt;/a&gt;).</source>
          <target state="translated">以给定格式返回从&lt;a href=&quot;#pdf-string.pack&quot;&gt; &lt;code&gt;string.pack&lt;/code&gt; &lt;/a&gt;生成的字符串的大小。格式字符串不能具有可变长度选项&amp;ldquo; &lt;code&gt;s&lt;/code&gt; &amp;rdquo;或&amp;ldquo; &lt;code&gt;z&lt;/code&gt; &amp;rdquo;（请参见第&lt;a href=&quot;#6.4.2&quot;&gt;6.4.2节&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="33b392e0c4352ffea2f8586f23e071e85ca1ffec" translate="yes" xml:space="preserve">
          <source>Returns the smallest integral value larger than or equal to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">返回大于或等于 &lt;code&gt;x&lt;/code&gt; 的最小整数值。</target>
        </trans-unit>
        <trans-unit id="a156517157e4cb0343c49c32e737cf3b8fa30ca3" translate="yes" xml:space="preserve">
          <source>Returns the square root of &lt;code&gt;x&lt;/code&gt;. (You can also use the expression &lt;code&gt;x^0.5&lt;/code&gt; to compute this value.)</source>
          <target state="translated">返回 &lt;code&gt;x&lt;/code&gt; 的平方根。（您也可以使用表达式 &lt;code&gt;x^0.5&lt;/code&gt; 计算该值。）</target>
        </trans-unit>
        <trans-unit id="92c7a785497146b5964e3cfcb16d7bf24c7763b5" translate="yes" xml:space="preserve">
          <source>Returns the status of coroutine &lt;code&gt;co&lt;/code&gt;, as a string: &lt;code&gt;&quot;running&quot;&lt;/code&gt;, if the coroutine is running (that is, it called &lt;code&gt;status&lt;/code&gt;); &lt;code&gt;&quot;suspended&quot;&lt;/code&gt;, if the coroutine is suspended in a call to &lt;code&gt;yield&lt;/code&gt;, or if it has not started running yet; &lt;code&gt;&quot;normal&quot;&lt;/code&gt; if the coroutine is active but not running (that is, it has resumed another coroutine); and &lt;code&gt;&quot;dead&quot;&lt;/code&gt; if the coroutine has finished its body function, or if it has stopped with an error.</source>
          <target state="translated">如果协程正在运行（即称为 &lt;code&gt;status&lt;/code&gt; ），则以字符串形式返回协程 &lt;code&gt;co&lt;/code&gt; 的状态： &lt;code&gt;&quot;running&quot;&lt;/code&gt; 。 &lt;code&gt;&quot;suspended&quot;&lt;/code&gt; ，如果协程在调用 &lt;code&gt;yield&lt;/code&gt; 的过程中被暂停，或者尚未开始运行； &lt;code&gt;&quot;normal&quot;&lt;/code&gt; 如果协程处于活动状态但未运行（也就是说，它已恢复另一个协程）；与 &lt;code&gt;&quot;dead&quot;&lt;/code&gt; 如果协程完成其身体功能，或者如果它已停止错误。</target>
        </trans-unit>
        <trans-unit id="6643f34f054d2169fc15059330c9797cabe4b0f8" translate="yes" xml:space="preserve">
          <source>Returns the status of the thread &lt;code&gt;L&lt;/code&gt;.</source>
          <target state="translated">返回线程 &lt;code&gt;L&lt;/code&gt; 的状态。</target>
        </trans-unit>
        <trans-unit id="ce13df23b5d839e4a1b3c62a7a51b8e7083872ff" translate="yes" xml:space="preserve">
          <source>Returns the substring of &lt;code&gt;s&lt;/code&gt; that starts at &lt;code&gt;i&lt;/code&gt; and continues until &lt;code&gt;j&lt;/code&gt;; &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; can be negative. If &lt;code&gt;j&lt;/code&gt; is absent, then it is assumed to be equal to -1 (which is the same as the string length). In particular, the call &lt;code&gt;string.sub(s,1,j)&lt;/code&gt; returns a prefix of &lt;code&gt;s&lt;/code&gt; with length &lt;code&gt;j&lt;/code&gt;, and &lt;code&gt;string.sub(s, -i)&lt;/code&gt; (for a positive &lt;code&gt;i&lt;/code&gt;) returns a suffix of &lt;code&gt;s&lt;/code&gt; with length &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">返回 &lt;code&gt;s&lt;/code&gt; 的子字符串，该子字符串从 &lt;code&gt;i&lt;/code&gt; 开始并一直持续到 &lt;code&gt;j&lt;/code&gt; ； &lt;code&gt;i&lt;/code&gt; 和 &lt;code&gt;j&lt;/code&gt; 可以为负。如果 &lt;code&gt;j&lt;/code&gt; 不存在，则假定它等于-1（与字符串长度相同）。特别是，调用 &lt;code&gt;string.sub(s,1,j)&lt;/code&gt; 返回长度为 &lt;code&gt;j&lt;/code&gt; 的 &lt;code&gt;s&lt;/code&gt; 的前缀，而 &lt;code&gt;string.sub(s, -i)&lt;/code&gt; （对于正数 &lt;code&gt;i&lt;/code&gt; ）返回长度为 &lt;code&gt;i&lt;/code&gt; 的 &lt;code&gt;s&lt;/code&gt; 的后缀。</target>
        </trans-unit>
        <trans-unit id="0d879230a982638cb3037d087aec816766d1bff4" translate="yes" xml:space="preserve">
          <source>Returns the tangent of &lt;code&gt;x&lt;/code&gt; (assumed to be in radians).</source>
          <target state="translated">返回 &lt;code&gt;x&lt;/code&gt; 的切线（假定为弧度）。</target>
        </trans-unit>
        <trans-unit id="aeb49cdc670f656ecf94cc356e8482541619f67b" translate="yes" xml:space="preserve">
          <source>Returns the type of its only argument, coded as a string. The possible results of this function are &quot;&lt;code&gt;nil&lt;/code&gt;&quot; (a string, not the value &lt;b&gt;nil&lt;/b&gt;), &quot;&lt;code&gt;number&lt;/code&gt;&quot;, &quot;&lt;code&gt;string&lt;/code&gt;&quot;, &quot;&lt;code&gt;boolean&lt;/code&gt;&quot;, &quot;&lt;code&gt;table&lt;/code&gt;&quot;, &quot;&lt;code&gt;function&lt;/code&gt;&quot;, &quot;&lt;code&gt;thread&lt;/code&gt;&quot;, and &quot;&lt;code&gt;userdata&lt;/code&gt;&quot;.</source>
          <target state="translated">返回其唯一参数的类型，编码为字符串。该函数的可能结果是&amp;ldquo; &lt;code&gt;nil&lt;/code&gt; &amp;rdquo;（字符串，而不是值&lt;b&gt;nil&lt;/b&gt;），&amp;ldquo; &lt;code&gt;number&lt;/code&gt; &amp;rdquo;，&amp;ldquo; &lt;code&gt;string&lt;/code&gt; &amp;rdquo;，&amp;ldquo; &lt;code&gt;boolean&lt;/code&gt; &amp;rdquo;，&amp;ldquo; &lt;code&gt;table&lt;/code&gt; &amp;rdquo;，&amp;ldquo; &lt;code&gt;function&lt;/code&gt; &amp;rdquo;，&amp;ldquo; &lt;code&gt;thread&lt;/code&gt; &amp;rdquo;和&amp;ldquo; &lt;code&gt;userdata&lt;/code&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="b7cc3af32266285b487ea68c1fc6ffc164e146f6" translate="yes" xml:space="preserve">
          <source>Returns the type of the pushed value.</source>
          <target state="translated">返回推送值的类型。</target>
        </trans-unit>
        <trans-unit id="11efeaa1a0a1dad64efc60561b86e6d305ce3e58" translate="yes" xml:space="preserve">
          <source>Returns the type of the value in the given valid index, or &lt;code&gt;LUA_TNONE&lt;/code&gt; for a non-valid (but acceptable) index. The types returned by &lt;a href=&quot;#lua_type&quot;&gt;&lt;code&gt;lua_type&lt;/code&gt;&lt;/a&gt; are coded by the following constants defined in &lt;code&gt;lua.h&lt;/code&gt;: &lt;a id=&quot;pdf-LUA_TNIL&quot;&gt;&lt;code&gt;LUA_TNIL&lt;/code&gt;&lt;/a&gt; (0), &lt;a id=&quot;pdf-LUA_TNUMBER&quot;&gt;&lt;code&gt;LUA_TNUMBER&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TBOOLEAN&quot;&gt;&lt;code&gt;LUA_TBOOLEAN&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TSTRING&quot;&gt;&lt;code&gt;LUA_TSTRING&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TTABLE&quot;&gt;&lt;code&gt;LUA_TTABLE&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TFUNCTION&quot;&gt;&lt;code&gt;LUA_TFUNCTION&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TUSERDATA&quot;&gt;&lt;code&gt;LUA_TUSERDATA&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TTHREAD&quot;&gt;&lt;code&gt;LUA_TTHREAD&lt;/code&gt;&lt;/a&gt;, and &lt;a id=&quot;pdf-LUA_TLIGHTUSERDATA&quot;&gt;&lt;code&gt;LUA_TLIGHTUSERDATA&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返回给定有效索引中值的类型，或者 &lt;code&gt;LUA_TNONE&lt;/code&gt; 无效（但可接受）索引的LUA_TNONE。&lt;a href=&quot;#lua_type&quot;&gt; &lt;code&gt;lua_type&lt;/code&gt; &lt;/a&gt;返回的类型由 &lt;code&gt;lua.h&lt;/code&gt; 中定义的以下常量编码：&lt;a id=&quot;pdf-LUA_TNIL&quot;&gt; &lt;code&gt;LUA_TNIL&lt;/code&gt; &lt;/a&gt;（0），&lt;a id=&quot;pdf-LUA_TNUMBER&quot;&gt; &lt;code&gt;LUA_TNUMBER&lt;/code&gt; &lt;/a&gt;，&lt;a id=&quot;pdf-LUA_TBOOLEAN&quot;&gt; &lt;code&gt;LUA_TBOOLEAN&lt;/code&gt; &lt;/a&gt;，&lt;a id=&quot;pdf-LUA_TSTRING&quot;&gt; &lt;code&gt;LUA_TSTRING&lt;/code&gt; &lt;/a&gt;，&lt;a id=&quot;pdf-LUA_TTABLE&quot;&gt; &lt;code&gt;LUA_TTABLE&lt;/code&gt; &lt;/a&gt;，&lt;a id=&quot;pdf-LUA_TFUNCTION&quot;&gt; &lt;code&gt;LUA_TFUNCTION&lt;/code&gt; &lt;/a&gt;，&lt;a id=&quot;pdf-LUA_TUSERDATA&quot;&gt; &lt;code&gt;LUA_TUSERDATA&lt;/code&gt; &lt;/a&gt;，&lt;a id=&quot;pdf-LUA_TTHREAD&quot;&gt; &lt;code&gt;LUA_TTHREAD&lt;/code&gt; &lt;/a&gt;和&lt;a id=&quot;pdf-LUA_TLIGHTUSERDATA&quot;&gt; &lt;code&gt;LUA_TLIGHTUSERDATA&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c355c772b6a7cd3959fe3ff1b22ce6913ee6b493" translate="yes" xml:space="preserve">
          <source>Returns the value &lt;em&gt;e&lt;sup&gt;x&lt;/sup&gt;&lt;/em&gt; (where &lt;code&gt;e&lt;/code&gt; is the base of natural logarithms).</source>
          <target state="translated">返回值&lt;em&gt;e &lt;sup&gt;x&lt;/sup&gt;&lt;/em&gt;（其中 &lt;code&gt;e&lt;/code&gt; 是自然对数的底数）。</target>
        </trans-unit>
        <trans-unit id="a1f640b6a2396fe00ff3c46e513b55ada5898623" translate="yes" xml:space="preserve">
          <source>Returns the value of the process environment variable &lt;code&gt;varname&lt;/code&gt;, or &lt;b&gt;nil&lt;/b&gt; if the variable is not defined.</source>
          <target state="translated">返回流程环境变量 &lt;code&gt;varname&lt;/code&gt; 的值，如果未定义，则返回&lt;b&gt;nil&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="f3b86e22b7e07287e106fe5463ecf2e5e16d5d52" translate="yes" xml:space="preserve">
          <source>Returns the values packed in string &lt;code&gt;s&lt;/code&gt; (see &lt;a href=&quot;#pdf-string.pack&quot;&gt;&lt;code&gt;string.pack&lt;/code&gt;&lt;/a&gt;) according to the format string &lt;code&gt;fmt&lt;/code&gt; (see &lt;a href=&quot;#6.4.2&quot;&gt;&amp;sect;6.4.2&lt;/a&gt;). An optional &lt;code&gt;pos&lt;/code&gt; marks where to start reading in &lt;code&gt;s&lt;/code&gt; (default is 1). After the read values, this function also returns the index of the first unread byte in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">根据格式字符串 &lt;code&gt;fmt&lt;/code&gt; （请参见&lt;a href=&quot;#6.4.2&quot;&gt;&amp;sect;6.4.2&lt;/a&gt;），返回打包在字符串 &lt;code&gt;s&lt;/code&gt; （请参见&lt;a href=&quot;#pdf-string.pack&quot;&gt; &lt;code&gt;string.pack&lt;/code&gt; &lt;/a&gt;）中的值。可选的 &lt;code&gt;pos&lt;/code&gt; 标记从 &lt;code&gt;s&lt;/code&gt; 开始读取的位置（默认为1）。在读取值之后，此函数还返回 &lt;code&gt;s&lt;/code&gt; 中第一个未读取字节的索引。</target>
        </trans-unit>
        <trans-unit id="bcc3adbac55a1cae7b7dbc056f59867a7e653730" translate="yes" xml:space="preserve">
          <source>Returns three values (an iterator function, the table &lt;code&gt;t&lt;/code&gt;, and 0) so that the construction</source>
          <target state="translated">返回三个值（迭代器函数，表 &lt;code&gt;t&lt;/code&gt; 和0），以便构造</target>
        </trans-unit>
        <trans-unit id="7db585fd6f4edc4d15ef6261e32bad83a4e3fc94" translate="yes" xml:space="preserve">
          <source>Returns true when the running coroutine can yield.</source>
          <target state="translated">当运行中的coroutine可以产出时返回true。</target>
        </trans-unit>
        <trans-unit id="86872d97a4648c727afb8bd8743402fb113d9d79" translate="yes" xml:space="preserve">
          <source>Returns values so that the construction</source>
          <target state="translated">返回值,以便构造</target>
        </trans-unit>
        <trans-unit id="c0dd5c1f0b221305574b2b927c5b76675e55a510" translate="yes" xml:space="preserve">
          <source>Rotates the stack elements between the valid index &lt;code&gt;idx&lt;/code&gt; and the top of the stack. The elements are rotated &lt;code&gt;n&lt;/code&gt; positions in the direction of the top, for a positive &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;-n&lt;/code&gt; positions in the direction of the bottom, for a negative &lt;code&gt;n&lt;/code&gt;. The absolute value of &lt;code&gt;n&lt;/code&gt; must not be greater than the size of the slice being rotated. This function cannot be called with a pseudo-index, because a pseudo-index is not an actual stack position.</source>
          <target state="translated">在有效索引 &lt;code&gt;idx&lt;/code&gt; 和堆栈顶部之间旋转堆栈元素。元素在顶部方向上旋转 &lt;code&gt;n&lt;/code&gt; 个位置（对于正数 &lt;code&gt;n&lt;/code&gt; )，在-底部方向上旋转 &lt;code&gt;-n&lt;/code&gt; 位置，对于负数 &lt;code&gt;n&lt;/code&gt; 。 &lt;code&gt;n&lt;/code&gt; 的绝对值不得大于要旋转的切片的大小。不能使用伪索引调用此函数，因为伪索引不是实际的堆栈位置。</target>
        </trans-unit>
        <trans-unit id="cb167298f69784fe48c5d2a384e7c877c8d9492d" translate="yes" xml:space="preserve">
          <source>Saves any written data to &lt;code&gt;file&lt;/code&gt;.</source>
          <target state="translated">将所有书面数据保存到 &lt;code&gt;file&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="3440752ad05f6155ff5680caecbafde2dc649d9b" translate="yes" xml:space="preserve">
          <source>Searches for the given &lt;code&gt;name&lt;/code&gt; in the given &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">在给定 &lt;code&gt;path&lt;/code&gt; 搜索给定 &lt;code&gt;name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d2a18ffdb89ed379138be3152d18086f1d55d2a3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#pdf-debug.getlocal&quot;&gt;&lt;code&gt;debug.getlocal&lt;/code&gt;&lt;/a&gt; for more information about variable indices and names.</source>
          <target state="translated">有关变量索引和名称的更多信息，请参见&lt;a href=&quot;#pdf-debug.getlocal&quot;&gt; &lt;code&gt;debug.getlocal&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c3360426ce5422bc56d751e0aa6008fce46fc70e" translate="yes" xml:space="preserve">
          <source>See function &lt;a href=&quot;#pdf-next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; for the caveats of modifying the table during its traversal.</source>
          <target state="translated">有关在遍历过程中修改表的注意事项，请参见&lt;a href=&quot;#pdf-next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="19f37898f520273219e289bdee9a8581baa73269" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;x&lt;/code&gt; as the &quot;seed&quot; for the pseudo-random generator: equal seeds produce equal sequences of numbers.</source>
          <target state="translated">将 &lt;code&gt;x&lt;/code&gt; 设置为伪随机数生成器的&amp;ldquo;种子&amp;rdquo;：相等的种子产生相等的数字序列。</target>
        </trans-unit>
        <trans-unit id="0b2903d5c5e2f6aac5cee42b812f29848f11b229" translate="yes" xml:space="preserve">
          <source>Sets a new panic function and returns the old one (see &lt;a href=&quot;#4.6&quot;&gt;&amp;sect;4.6&lt;/a&gt;).</source>
          <target state="translated">设置新的应急函数并返回旧的应急函数（请参见第&lt;a href=&quot;#4.6&quot;&gt;4.6节&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="10482f8b5b12a1f1db635550932f8faad32fd81b" translate="yes" xml:space="preserve">
          <source>Sets and gets the file position, measured from the beginning of the file, to the position given by &lt;code&gt;offset&lt;/code&gt; plus a base specified by the string &lt;code&gt;whence&lt;/code&gt;, as follows:</source>
          <target state="translated">设置并获取文件位置（从文件开头开始测量）到 &lt;code&gt;offset&lt;/code&gt; 加上字符串 &lt;code&gt;whence&lt;/code&gt; 指定的基数所指定的位置，如下所示：</target>
        </trans-unit>
        <trans-unit id="c75eca40914b6c7ff395b6a435b1b2509e75386b" translate="yes" xml:space="preserve">
          <source>Sets the C function &lt;code&gt;f&lt;/code&gt; as the new value of global &lt;code&gt;name&lt;/code&gt;. It is defined as a macro:</source>
          <target state="translated">将C函数 &lt;code&gt;f&lt;/code&gt; 设置为global &lt;code&gt;name&lt;/code&gt; 的新值。它定义为宏：</target>
        </trans-unit>
        <trans-unit id="de2f1f4dd9362493d0d4861f3dfe60cc83af4578" translate="yes" xml:space="preserve">
          <source>Sets the buffering mode for an output file. There are three available modes:</source>
          <target state="translated">设置输出文件的缓冲模式。有三种可用的模式。</target>
        </trans-unit>
        <trans-unit id="772769933fe32ebc8452718b212f21e2ae3b3d0a" translate="yes" xml:space="preserve">
          <source>Sets the current locale of the program. &lt;code&gt;locale&lt;/code&gt; is a system-dependent string specifying a locale; &lt;code&gt;category&lt;/code&gt; is an optional string describing which category to change: &lt;code&gt;&quot;all&quot;&lt;/code&gt;, &lt;code&gt;&quot;collate&quot;&lt;/code&gt;, &lt;code&gt;&quot;ctype&quot;&lt;/code&gt;, &lt;code&gt;&quot;monetary&quot;&lt;/code&gt;, &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;, or &lt;code&gt;&quot;time&quot;&lt;/code&gt;; the default category is &lt;code&gt;&quot;all&quot;&lt;/code&gt;. The function returns the name of the new locale, or &lt;b&gt;nil&lt;/b&gt; if the request cannot be honored.</source>
          <target state="translated">设置程序的当前语言环境。 &lt;code&gt;locale&lt;/code&gt; 是一个系统相关的字符串，指定一个语言环境； &lt;code&gt;category&lt;/code&gt; 是描述要更改的类别的可选字符串： &lt;code&gt;&quot;all&quot;&lt;/code&gt; ， &lt;code&gt;&quot;collate&quot;&lt;/code&gt; ， &lt;code&gt;&quot;ctype&quot;&lt;/code&gt; ， &lt;code&gt;&quot;monetary&quot;&lt;/code&gt; ， &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;time&quot;&lt;/code&gt; ; 默认类别为 &lt;code&gt;&quot;all&quot;&lt;/code&gt; 。该函数返回新语言环境的名称，如果不能接受该请求，则返回&lt;b&gt;nil&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="577d8bdc520c0556720156fb048d7cc9591b0b65" translate="yes" xml:space="preserve">
          <source>Sets the debugging hook function.</source>
          <target state="translated">设置调试钩子功能。</target>
        </trans-unit>
        <trans-unit id="292ec4e82927af4194013aa2f75932b01e97689c" translate="yes" xml:space="preserve">
          <source>Sets the given &lt;code&gt;value&lt;/code&gt; as the Lua value associated to the given &lt;code&gt;udata&lt;/code&gt;. &lt;code&gt;udata&lt;/code&gt; must be a full userdata.</source>
          <target state="translated">将给定 &lt;code&gt;value&lt;/code&gt; 设置为与给定 &lt;code&gt;udata&lt;/code&gt; 关联的Lua值。 &lt;code&gt;udata&lt;/code&gt; 必须是完整的用户数据。</target>
        </trans-unit>
        <trans-unit id="0f680b53b706554348285320cb60fd7dd4bf3ce4" translate="yes" xml:space="preserve">
          <source>Sets the given function as a hook. The string &lt;code&gt;mask&lt;/code&gt; and the number &lt;code&gt;count&lt;/code&gt; describe when the hook will be called. The string mask may have any combination of the following characters, with the given meaning:</source>
          <target state="translated">将给定函数设置为钩子。字符串 &lt;code&gt;mask&lt;/code&gt; 和数字 &lt;code&gt;count&lt;/code&gt; 描述何时调用该挂钩。字符串掩码可以具有以下字符的任意组合，具有给定的含义：</target>
        </trans-unit>
        <trans-unit id="d7b8a030605b64f54e56dc4eb6882692a1e86465" translate="yes" xml:space="preserve">
          <source>Sets the metatable for the given &lt;code&gt;value&lt;/code&gt; to the given &lt;code&gt;table&lt;/code&gt; (which can be &lt;b&gt;nil&lt;/b&gt;). Returns &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">将给定 &lt;code&gt;value&lt;/code&gt; 的元表设置为给定 &lt;code&gt;table&lt;/code&gt; （可以为&lt;b&gt;nil&lt;/b&gt;）。返回 &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cc55fa8aad2a6ef152d3844b1dbc7d9854df5817" translate="yes" xml:space="preserve">
          <source>Sets the metatable for the given table. (To change the metatable of other types from Lua code, you must use the debug library (&lt;a href=&quot;#6.10&quot;&gt;&amp;sect;6.10&lt;/a&gt;).) If &lt;code&gt;metatable&lt;/code&gt; is &lt;b&gt;nil&lt;/b&gt;, removes the metatable of the given table. If the original metatable has a &lt;code&gt;__metatable&lt;/code&gt; field, raises an error.</source>
          <target state="translated">设置给定表的元表。（要从Lua代码中更改其他类型的元表，必须使用调试库（第&lt;a href=&quot;#6.10&quot;&gt;6.10节&lt;/a&gt;）。）如果 &lt;code&gt;metatable&lt;/code&gt; 为&lt;b&gt;nil&lt;/b&gt;，则删除给定表的元表。如果原始元表具有 &lt;code&gt;__metatable&lt;/code&gt; 字段，则会引发错误。</target>
        </trans-unit>
        <trans-unit id="587b6bacfd61f3dd529496795bf4b5531bf0411f" translate="yes" xml:space="preserve">
          <source>Sets the metatable of the object at the top of the stack as the metatable associated with name &lt;code&gt;tname&lt;/code&gt; in the registry (see &lt;a href=&quot;#luaL_newmetatable&quot;&gt;&lt;code&gt;luaL_newmetatable&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">将位于堆栈顶部的对象的元表设置为与注册表中名称 &lt;code&gt;tname&lt;/code&gt; 关联的元表（请参阅&lt;a href=&quot;#luaL_newmetatable&quot;&gt; &lt;code&gt;luaL_newmetatable&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="980d28e7c69235ce8818955ee39047b99459cc45" translate="yes" xml:space="preserve">
          <source>Sets the real value of &lt;code&gt;table[index]&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;, without invoking the &lt;code&gt;__newindex&lt;/code&gt; metamethod. &lt;code&gt;table&lt;/code&gt; must be a table, &lt;code&gt;index&lt;/code&gt; any value different from &lt;b&gt;nil&lt;/b&gt; and NaN, and &lt;code&gt;value&lt;/code&gt; any Lua value.</source>
          <target state="translated">将 &lt;code&gt;table[index]&lt;/code&gt; 的实际值设置为 &lt;code&gt;value&lt;/code&gt; ，而不调用 &lt;code&gt;__newindex&lt;/code&gt; 元方法。 &lt;code&gt;table&lt;/code&gt; 必须是一个表， &lt;code&gt;index&lt;/code&gt; 从任何值不同&lt;b&gt;零&lt;/b&gt;和NaN，并且 &lt;code&gt;value&lt;/code&gt; 任何的Lua值。</target>
        </trans-unit>
        <trans-unit id="64764244caf680f963cbe34576ef7f19047e51d8" translate="yes" xml:space="preserve">
          <source>Sets the value of a closure's upvalue. It assigns the value at the top of the stack to the upvalue and returns its name. It also pops the value from the stack.</source>
          <target state="translated">设置闭包的upvalue值。它将堆栈顶部的值分配给upvalue,并返回其名称。它还从堆栈中弹出值。</target>
        </trans-unit>
        <trans-unit id="ffba6d217c9340ff452d0b26d7bde601a75effed" translate="yes" xml:space="preserve">
          <source>Sets the value of a local variable of a given activation record. It assigns the value at the top of the stack to the variable and returns its name. It also pops the value from the stack.</source>
          <target state="translated">设置给定激活记录的局部变量的值。它将堆栈顶部的值分配给变量,并返回其名称。它还从堆栈中弹出该值。</target>
        </trans-unit>
        <trans-unit id="13dfadc7fc1e60158ee478b1d01c15a1a262b8f8" translate="yes" xml:space="preserve">
          <source>Several functions in the auxiliary library are used to check C function arguments. Because the error message is formatted for arguments (e.g., &quot;&lt;code&gt;bad argument #1&lt;/code&gt;&quot;), you should not use these functions for other stack values.</source>
          <target state="translated">辅助库中的几个函数用于检查C函数参数。因为错误消息是为参数设置的格式（例如，&amp;ldquo; &lt;code&gt;bad argument #1&lt;/code&gt; &amp;rdquo;），所以不应将这些函数用于其他堆栈值。</target>
        </trans-unit>
        <trans-unit id="d7d26a3bd3ccc1bc11907697040007c09639a73d" translate="yes" xml:space="preserve">
          <source>Several functions in the auxiliary library use internally some extra stack slots. When a function in the auxiliary library uses less than five slots, it does not check the stack size; it simply assumes that there are enough slots.</source>
          <target state="translated">辅助库中的一些函数在内部使用了一些额外的栈槽。当辅助库中的一个函数使用少于5个槽时,它不会检查栈的大小,它只是假设有足够的槽。</target>
        </trans-unit>
        <trans-unit id="4e6f5999f6739678269276a1253783f2e33caacc" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#lua_gettable&quot;&gt;&lt;code&gt;lua_gettable&lt;/code&gt;&lt;/a&gt;, but does a raw access (i.e., without metamethods).</source>
          <target state="translated">与&lt;a href=&quot;#lua_gettable&quot;&gt; &lt;code&gt;lua_gettable&lt;/code&gt; &lt;/a&gt;相似，但是进行原始访问（即，没有元方法）。</target>
        </trans-unit>
        <trans-unit id="98d6dc9d6d25a6a5bcf82cd4cb364da6adb19bc6" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#lua_settable&quot;&gt;&lt;code&gt;lua_settable&lt;/code&gt;&lt;/a&gt;, but does a raw assignment (i.e., without metamethods).</source>
          <target state="translated">与&lt;a href=&quot;#lua_settable&quot;&gt; &lt;code&gt;lua_settable&lt;/code&gt; &lt;/a&gt;相似，但是执行原始分配（即，没有元方法）。</target>
        </trans-unit>
        <trans-unit id="bb8fabad1f82bd899f79eae459334cf7e778fcba" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#pdf-io.input&quot;&gt;&lt;code&gt;io.input&lt;/code&gt;&lt;/a&gt;, but operates over the default output file.</source>
          <target state="translated">与&lt;a href=&quot;#pdf-io.input&quot;&gt; &lt;code&gt;io.input&lt;/code&gt; &lt;/a&gt;相似，但对默认输出文件进行操作。</target>
        </trans-unit>
        <trans-unit id="be9918f302436d602e28315cc5eff3fc1e73bb44" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#pdf-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt;, but gets the chunk from file &lt;code&gt;filename&lt;/code&gt; or from the standard input, if no file name is given.</source>
          <target state="translated">与&lt;a href=&quot;#pdf-load&quot;&gt; &lt;code&gt;load&lt;/code&gt; &lt;/a&gt;相似，但是如果未提供文件名，则从文件文件 &lt;code&gt;filename&lt;/code&gt; 或标准输入获取块。</target>
        </trans-unit>
        <trans-unit id="26f694e9b1074e2724d2aeb68c0547978de3e666" translate="yes" xml:space="preserve">
          <source>Similarly, Lua versions can always change the internal representation of precompiled chunks; precompiled chunks are not compatible between different Lua versions.</source>
          <target state="translated">同样,Lua版本可以随时改变预编译块的内部表示,预编译块在不同Lua版本之间是不兼容的。</target>
        </trans-unit>
        <trans-unit id="91f7e308fa2ec755f5b9629aa68bea063366955f" translate="yes" xml:space="preserve">
          <source>Sorts list elements in a given order, &lt;em&gt;in-place&lt;/em&gt;, from &lt;code&gt;list[1]&lt;/code&gt; to &lt;code&gt;list[#list]&lt;/code&gt;. If &lt;code&gt;comp&lt;/code&gt; is given, then it must be a function that receives two list elements and returns true when the first element must come before the second in the final order (so that, after the sort, &lt;code&gt;i &amp;lt; j&lt;/code&gt; implies &lt;code&gt;not comp(list[j],list[i])&lt;/code&gt;). If &lt;code&gt;comp&lt;/code&gt; is not given, then the standard Lua operator &lt;code&gt;&amp;lt;&lt;/code&gt; is used instead.</source>
          <target state="translated">在一个给定的顺序进行排序的列表元素，&lt;em&gt;就地&lt;/em&gt;，从 &lt;code&gt;list[1]&lt;/code&gt; 到 &lt;code&gt;list[#list]&lt;/code&gt; 。如果给出了 &lt;code&gt;comp&lt;/code&gt; ，则它必须是一个接收两个列表元素并在第一个元素必须按最终顺序排在第二个元素之前时返回true的函数（因此，在排序之后， &lt;code&gt;i &amp;lt; j&lt;/code&gt; 表示 &lt;code&gt;not comp(list[j],list[i])&lt;/code&gt; ）。如果没有给出 &lt;code&gt;comp&lt;/code&gt; ，则使用标准的Lua运算符 &lt;code&gt;&amp;lt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a010f7f7cdbd4258d79a8a94cbe56bc77bf2b5e7" translate="yes" xml:space="preserve">
          <source>Square brackets are used to index a table:</source>
          <target state="translated">方括号用于编制表的索引。</target>
        </trans-unit>
        <trans-unit id="a8857dbe9de4909ed5c2183cf91102dab19f054b" translate="yes" xml:space="preserve">
          <source>Standard Libraries</source>
          <target state="translated">标准图书馆</target>
        </trans-unit>
        <trans-unit id="3aa420e36a031586ffcaad7595673c265cb89fc8" translate="yes" xml:space="preserve">
          <source>Starts and resumes a coroutine in the given thread &lt;code&gt;L&lt;/code&gt;.</source>
          <target state="translated">在给定线程 &lt;code&gt;L&lt;/code&gt; 中启动和恢复协程。</target>
        </trans-unit>
        <trans-unit id="d40756a05671d2e92d48621babd1cb1ebcde9165" translate="yes" xml:space="preserve">
          <source>Starts or continues the execution of coroutine &lt;code&gt;co&lt;/code&gt;. The first time you resume a coroutine, it starts running its body. The values &lt;code&gt;val1&lt;/code&gt;, ... are passed as the arguments to the body function. If the coroutine has yielded, &lt;code&gt;resume&lt;/code&gt; restarts it; the values &lt;code&gt;val1&lt;/code&gt;, ... are passed as the results from the yield.</source>
          <target state="translated">开始或继续执行协程 &lt;code&gt;co&lt;/code&gt; 。第一次恢复协程时，它会开始运行它的身体。值 &lt;code&gt;val1&lt;/code&gt; ，...作为参数传递给body函数。如果协程已屈服，则 &lt;code&gt;resume&lt;/code&gt; 重新启动它；否则，重新启动协程。值 &lt;code&gt;val1&lt;/code&gt; ，...作为产量的结果传递。</target>
        </trans-unit>
        <trans-unit id="fdcf228dfc0fc5649ba85944b97fefcca7ffe43a" translate="yes" xml:space="preserve">
          <source>Starts program &lt;code&gt;prog&lt;/code&gt; in a separated process and returns a file handle that you can use to read data from this program (if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;&quot;r&quot;&lt;/code&gt;, the default) or to write data to this program (if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;&quot;w&quot;&lt;/code&gt;).</source>
          <target state="translated">在一个单独的进程中启动程序 &lt;code&gt;prog&lt;/code&gt; 并返回一个文件句柄，您可以使用该文件句柄从该程序读取数据（如果 &lt;code&gt;mode&lt;/code&gt; 为默认值 &lt;code&gt;&quot;r&quot;&lt;/code&gt; ）或向该程序写入数据（如果 &lt;code&gt;mode&lt;/code&gt; 为 &lt;code&gt;&quot;w&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5653cebc057d4791ce07031ad9286e729de6d691" translate="yes" xml:space="preserve">
          <source>Statements</source>
          <target state="translated">Statements</target>
        </trans-unit>
        <trans-unit id="4a3601848fbaa157ee7ad1bf17ef71628017fcdf" translate="yes" xml:space="preserve">
          <source>Suppose the running thread yields while executing the callee function. After the thread resumes, it eventually will finish running the callee function. However, the callee function cannot return to the original function, because its frame in the C stack was destroyed by the yield. Instead, Lua calls a &lt;em&gt;continuation function&lt;/em&gt;, which was given as an argument to the callee function. As the name implies, the continuation function should continue the task of the original function.</source>
          <target state="translated">假设正在执行被调用方函数时正在运行的线程屈服。线程恢复后，它将最终完成运行被调用函数。但是，被调用方函数无法返回到原始函数，因为C堆栈中其框架已被yield破坏。相反，Lua调用了&lt;em&gt;延续函数&lt;/em&gt;，该&lt;em&gt;函数&lt;/em&gt;作为被调用函数的参数提供。顾名思义，延续功能应继续原始功能的任务。</target>
        </trans-unit>
        <trans-unit id="e83b7d557c46acb05b744857e11a6cfdb7f1df00" translate="yes" xml:space="preserve">
          <source>Suspends the execution of the calling coroutine. Any arguments to &lt;code&gt;yield&lt;/code&gt; are passed as extra results to &lt;code&gt;resume&lt;/code&gt;.</source>
          <target state="translated">暂停调用协程的执行。传递 &lt;code&gt;yield&lt;/code&gt; 的任何参数作为要 &lt;code&gt;resume&lt;/code&gt; 额外结果。</target>
        </trans-unit>
        <trans-unit id="cf68697aa23858afae69b1650bbb5ac00b4caade" translate="yes" xml:space="preserve">
          <source>Table Constructors</source>
          <target state="translated">表格构造器</target>
        </trans-unit>
        <trans-unit id="ddade22015227084f0c0a4b0fb958ac23eef35ed" translate="yes" xml:space="preserve">
          <source>Table constructors are expressions that create tables. Every time a constructor is evaluated, a new table is created. A constructor can be used to create an empty table or to create a table and initialize some of its fields. The general syntax for constructors is</source>
          <target state="translated">表构造函数是创建表的表达式。每当一个构造函数被评估时,就会创建一个新表。构造函数可以用来创建一个空表,或者创建一个表并初始化它的一些字段。构造函数的一般语法是</target>
        </trans-unit>
        <trans-unit id="8eb8356b5217b3ad22882eb75be685d15131abcf" translate="yes" xml:space="preserve">
          <source>Tables and full userdata have individual metatables (although multiple tables and userdata can share their metatables). Values of all other types share one single metatable per type; that is, there is one single metatable for all numbers, one for all strings, etc. By default, a value has no metatable, but the string library sets a metatable for the string type (see &lt;a href=&quot;#6.4&quot;&gt;&amp;sect;6.4&lt;/a&gt;).</source>
          <target state="translated">表和完整的用户数据具有单独的元表（尽管多个表和用户数据可以共享其元表）。所有其他类型的值每种类型共享一个单一的元表；也就是说，所有数字都有一个单一的元表，所有字符串都有一个，等等。默认情况下，值没有元表，但是字符串库为字符串类型设置了元表（请参见&lt;a href=&quot;#6.4&quot;&gt;&amp;sect;6.4&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="790df16e07d28fbd0bc25fd6c6058d692af71b40" translate="yes" xml:space="preserve">
          <source>Tables are the sole data-structuring mechanism in Lua; they can be used to represent ordinary arrays, lists, symbol tables, sets, records, graphs, trees, etc. To represent records, Lua uses the field name as an index. The language supports this representation by providing &lt;code&gt;a.name&lt;/code&gt; as syntactic sugar for &lt;code&gt;a[&quot;name&quot;]&lt;/code&gt;. There are several convenient ways to create tables in Lua (see &lt;a href=&quot;#3.4.9&quot;&gt;&amp;sect;3.4.9&lt;/a&gt;).</source>
          <target state="translated">表是Lua中唯一的数据结构机制。它们可以用来表示普通的数组，列表，符号表，集合，记录，图形，树等。为了表示记录，Lua使用字段名称作为索引。该语言通过提供 &lt;code&gt;a.name&lt;/code&gt; 作为 &lt;code&gt;a[&quot;name&quot;]&lt;/code&gt; 语法糖来支持这种表示。有几种在Lua中创建表的便捷方法（请参见&lt;a href=&quot;#3.4.9&quot;&gt;&amp;sect;3.4.9&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="e421a06df75071a6abebc4fb3581855738824adb" translate="yes" xml:space="preserve">
          <source>Tables, functions, threads, and (full) userdata values are &lt;em&gt;objects&lt;/em&gt;: variables do not actually &lt;em&gt;contain&lt;/em&gt; these values, only &lt;em&gt;references&lt;/em&gt; to them. Assignment, parameter passing, and function returns always manipulate references to such values; these operations do not imply any kind of copy.</source>
          <target state="translated">表，函数，线程和（完整）用户数据值是&lt;em&gt;对象&lt;/em&gt;：变量实际上并不&lt;em&gt;包含&lt;/em&gt;这些值，而仅&lt;em&gt;包含&lt;/em&gt;对它们的&lt;em&gt;引用&lt;/em&gt;。赋值，参数传递和函数返回总是操纵对此类值的引用；这些操作并不意味着任何形式的复制。</target>
        </trans-unit>
        <trans-unit id="99385b30015343b5b8e00056e58a762956df3e7d" translate="yes" xml:space="preserve">
          <source>Tables, userdata, and threads are compared by reference: two objects are considered equal only if they are the same object. Every time you create a new object (a table, userdata, or thread), this new object is different from any previously existing object. Closures with the same reference are always equal. Closures with any detectable difference (different behavior, different definition) are always different.</source>
          <target state="translated">表、用户数据和线程是通过引用来比较的:只有当两个对象是同一个对象时,它们才被认为是相等的。每次创建一个新对象(表、用户数据或线程)时,这个新对象都与之前存在的任何对象不同。具有相同引用的闭包总是相等的。具有任何可检测的差异(不同的行为、不同的定义)的闭包总是不同的。</target>
        </trans-unit>
        <trans-unit id="446beb4016f56d03fb7aeada345cb1a7a86ea482" translate="yes" xml:space="preserve">
          <source>Terminates the last protected function called and returns &lt;code&gt;message&lt;/code&gt; as the error object. Function &lt;code&gt;error&lt;/code&gt; never returns.</source>
          <target state="translated">终止最后一个受保护的函数，并将 &lt;code&gt;message&lt;/code&gt; 作为错误对象返回。函数 &lt;code&gt;error&lt;/code&gt; 永不返回。</target>
        </trans-unit>
        <trans-unit id="aad621a873e57ea830369714dc4bd782c2449476" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt; function returns one of the following constants (defined in &lt;code&gt;lua.h&lt;/code&gt;):</source>
          <target state="translated">的&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;函数返回下列常数之一（定义在 &lt;code&gt;lua.h&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="b1d59a96e495b4ed1314e7a452acf7cf2be3dd16" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#pdf-ipairs&quot;&gt;&lt;code&gt;ipairs&lt;/code&gt;&lt;/a&gt; iterator now respects metamethods and its &lt;code&gt;__ipairs&lt;/code&gt; metamethod has been deprecated.</source>
          <target state="translated">该&lt;a href=&quot;#pdf-ipairs&quot;&gt; &lt;code&gt;ipairs&lt;/code&gt; &lt;/a&gt;迭代器现在尊重元方法及其 &lt;code&gt;__ipairs&lt;/code&gt; 元方法已被弃用。</target>
        </trans-unit>
        <trans-unit id="bc47dc2ae4b1f24c3a3899f4b1f9405cda8bd057" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;break&lt;/b&gt; statement terminates the execution of a &lt;b&gt;while&lt;/b&gt;, &lt;b&gt;repeat&lt;/b&gt;, or &lt;b&gt;for&lt;/b&gt; loop, skipping to the next statement after the loop:</source>
          <target state="translated">在&lt;b&gt;休息&lt;/b&gt;的语句终止执行&lt;b&gt;，同时&lt;/b&gt;，&lt;b&gt;重复&lt;/b&gt;，或&lt;b&gt;用于&lt;/b&gt;循环，跳到循环之后的下一条语句：</target>
        </trans-unit>
        <trans-unit id="be57b4db5d11ecd50b150a3c2c7baa57bca94b87" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;for&lt;/b&gt; statement has two forms: one numerical and one generic.</source>
          <target state="translated">该&lt;b&gt;对&lt;/b&gt;语句有两种形式：一个数字和一个通用的。</target>
        </trans-unit>
        <trans-unit id="b061702cc21366ebd955da1cbb0818c2844543b8" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;goto&lt;/b&gt; statement transfers the program control to a label. For syntactical reasons, labels in Lua are considered statements too:</source>
          <target state="translated">将&lt;b&gt;跳转&lt;/b&gt;语句将程序控制的标签。出于语法原因，Lua中的标签也被视为语句：</target>
        </trans-unit>
        <trans-unit id="b8c9f54acbc996a7d79b7252d182ed631a6a317f" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;return&lt;/b&gt; statement can only be written as the last statement of a block. If it is really necessary to &lt;b&gt;return&lt;/b&gt; in the middle of a block, then an explicit inner block can be used, as in the idiom &lt;code&gt;do return end&lt;/code&gt;, because now &lt;b&gt;return&lt;/b&gt; is the last statement in its (inner) block.</source>
          <target state="translated">在&lt;b&gt;返回&lt;/b&gt;语句只能写成块的最后陈述。如果确实有必要在一个块的中间&lt;b&gt;返回&lt;/b&gt;，那么可以使用一个显式的内部块，就像在习惯用法中 &lt;code&gt;do return end&lt;/code&gt; ，因为现在&lt;b&gt;return&lt;/b&gt;是其（内部）块中的最后一条语句。</target>
        </trans-unit>
        <trans-unit id="c44e88f5118a01354e009d7fa35997d3c87c7c1a" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;return&lt;/b&gt; statement is used to return values from a function or a chunk (which is an anonymous function). Functions can return more than one value, so the syntax for the &lt;b&gt;return&lt;/b&gt; statement is</source>
          <target state="translated">该&lt;b&gt;返回&lt;/b&gt;语句用来从一功能或一组块（这是一个匿名功能）返回值。函数可以返回多个值，因此&lt;b&gt;return&lt;/b&gt;语句的语法为</target>
        </trans-unit>
        <trans-unit id="2b646ffbbdcd054326d494ba2f5c649f95d36297" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bit32&lt;/code&gt; library has been deprecated. It is easy to require a compatible external library or, better yet, to replace its functions with appropriate bitwise operations. (Keep in mind that &lt;code&gt;bit32&lt;/code&gt; operates on 32-bit integers, while the bitwise operators in Lua 5.3 operate on Lua integers, which by default have 64 bits.)</source>
          <target state="translated">该 &lt;code&gt;bit32&lt;/code&gt; 库已被弃用。需要兼容的外部库很容易，或者更好的是，用适当的按位运算来替换其功能。（请记住， &lt;code&gt;bit32&lt;/code&gt; 使用32位整数，而Lua 5.3中的按位运算符则使用Lua整数（默认情况下为64位）。）</target>
        </trans-unit>
        <trans-unit id="3c35b56166af83b28a7e0e22c5d357b538f84788" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chunkname&lt;/code&gt; argument gives a name to the chunk, which is used for error messages and in debug information (see &lt;a href=&quot;#4.9&quot;&gt;&amp;sect;4.9&lt;/a&gt;).</source>
          <target state="translated">所述 &lt;code&gt;chunkname&lt;/code&gt; 参数给出一个名称组块，其用于错误消息和在调试信息（见&lt;a href=&quot;#4.9&quot;&gt;&amp;sect;4.9&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="bae62f5a0575c4f5ff2aabe5bf99d9776f3199b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lua_load&lt;/code&gt; function uses a user-supplied &lt;code&gt;reader&lt;/code&gt; function to read the chunk (see &lt;a href=&quot;#lua_Reader&quot;&gt;&lt;code&gt;lua_Reader&lt;/code&gt;&lt;/a&gt;). The &lt;code&gt;data&lt;/code&gt; argument is an opaque value passed to the reader function.</source>
          <target state="translated">所述 &lt;code&gt;lua_load&lt;/code&gt; 函数使用用户提供的 &lt;code&gt;reader&lt;/code&gt; 功能读取该块（见&lt;a href=&quot;#lua_Reader&quot;&gt; &lt;code&gt;lua_Reader&lt;/code&gt; &lt;/a&gt;）。该 &lt;code&gt;data&lt;/code&gt; 参数是传递给阅读器功能的不透明值。</target>
        </trans-unit>
        <trans-unit id="85f9907ce6878c8dc7e267337764d4964c7fae3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode&lt;/code&gt; string can also have a '&lt;code&gt;b&lt;/code&gt;' at the end, which is needed in some systems to open the file in binary mode.</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; 字符串的末尾也可以有一个' &lt;code&gt;b&lt;/code&gt; '，在某些系统中，以二进制模式打开文件时需要使用该字符串。</target>
        </trans-unit>
        <trans-unit id="2688f69f4c7b22c66219e46ee16c2eac721dcdfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode&lt;/code&gt; string can be any of the following:</source>
          <target state="translated">该 &lt;code&gt;mode&lt;/code&gt; 字符串可以是任何如下：</target>
        </trans-unit>
        <trans-unit id="dcce9d1975851c844f7c2f304003970e38bff938" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;q&lt;/code&gt; option formats a string between double quotes, using escape sequences when necessary to ensure that it can safely be read back by the Lua interpreter. For instance, the call</source>
          <target state="translated">该 &lt;code&gt;q&lt;/code&gt; 选项格式双引号之间的字符串，使用转义序列在必要的时候，以确保它可以安全地通过Lua解释读回。例如，通话</target>
        </trans-unit>
        <trans-unit id="ab9206bbe0932c07e692d615d61a36493a13a496" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;auxiliary library&lt;/em&gt; provides several convenient functions to interface C with Lua. While the basic API provides the primitive functions for all interactions between C and Lua, the auxiliary library provides higher-level functions for some common tasks.</source>
          <target state="translated">所述&lt;em&gt;辅助库&lt;/em&gt;提供了几个方便的功能的接口下用的Lua。基本API为C和Lua之间的所有交互提供了原始函数，而辅助库为某些常见任务提供了更高级别的函数。</target>
        </trans-unit>
        <trans-unit id="8ab6afc13be0118f613c20671f20dcaa66bf50fe" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;block&lt;/em&gt; is repeated for &lt;em&gt;name&lt;/em&gt; starting at the value of the first &lt;em&gt;exp&lt;/em&gt;, until it passes the second &lt;em&gt;exp&lt;/em&gt; by steps of the third &lt;em&gt;exp&lt;/em&gt;. More precisely, a &lt;b&gt;for&lt;/b&gt; statement like</source>
          <target state="translated">该&lt;em&gt;块&lt;/em&gt;被重复&lt;em&gt;名称&lt;/em&gt;起始于第一值&lt;em&gt;EXP&lt;/em&gt;，直到其通过所述第二&lt;em&gt;EXP&lt;/em&gt;由第三步骤&lt;em&gt;EXP&lt;/em&gt;。更确切地说，&lt;b&gt;for&lt;/b&gt;语句像</target>
        </trans-unit>
        <trans-unit id="d3b254f35dcb5161307fc6d343f99ec868c9f36b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;colon&lt;/em&gt; syntax is used for defining &lt;em&gt;methods&lt;/em&gt;, that is, functions that have an implicit extra parameter &lt;code&gt;self&lt;/code&gt;. Thus, the statement</source>
          <target state="translated">在&lt;em&gt;结肠&lt;/em&gt;语法用于定义&lt;em&gt;方法&lt;/em&gt;，即，具有一个隐含的额外的参数函数 &lt;code&gt;self&lt;/code&gt; 。因此，该声明</target>
        </trans-unit>
        <trans-unit id="171411617a28d7de2b0226c80067f77ec30897f7" translate="yes" xml:space="preserve">
          <source>The I/O library provides two different styles for file manipulation. The first one uses implicit file handles; that is, there are operations to set a default input file and a default output file, and all input/output operations are over these default files. The second style uses explicit file handles.</source>
          <target state="translated">I/O库提供了两种不同风格的文件操作。第一种使用隐式文件句柄,即有设置默认输入文件和默认输出文件的操作,所有的输入/输出操作都在这些默认文件之上。第二种风格使用显式文件句柄。</target>
        </trans-unit>
        <trans-unit id="fe26bd92623ecffd0ef5b0b7681c64345000ef38" translate="yes" xml:space="preserve">
          <source>The Length Operator</source>
          <target state="translated">长度运算符</target>
        </trans-unit>
        <trans-unit id="b46439f6fc2b5220d043e60a0c5b1b7e77db627e" translate="yes" xml:space="preserve">
          <source>The Lua library is fully reentrant: it has no global variables. It keeps all information it needs in a dynamic structure, called the &lt;em&gt;Lua state&lt;/em&gt;.</source>
          <target state="translated">Lua库是完全可重入的：它没有全局变量。它将所需的所有信息保持在动态结构中，称为&lt;em&gt;Lua状态&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="07b128e0f94f3f9a107ec1b9a4411b8083a41fce" translate="yes" xml:space="preserve">
          <source>The Table library now respects metamethods for setting and getting elements.</source>
          <target state="translated">表库现在尊重设置和获取元素的元方法。</target>
        </trans-unit>
        <trans-unit id="eb554fe048e1c8b347ad8a3da87d434c8b60f5db" translate="yes" xml:space="preserve">
          <source>The UTF-8 encoding of a Unicode character can be inserted in a literal string with the escape sequence &lt;code&gt;\u{&lt;em&gt;XXX&lt;/em&gt;}&lt;/code&gt; (note the mandatory enclosing brackets), where &lt;em&gt;XXX&lt;/em&gt; is a sequence of one or more hexadecimal digits representing the character code point.</source>
          <target state="translated">Unicode字符的UTF-8编码可以插入带有转义序列 &lt;code&gt;\u{&lt;em&gt;XXX&lt;/em&gt;}&lt;/code&gt; 的文字字符串中（请注意必填括号），其中&lt;em&gt;XXX&lt;/em&gt;是一个或多个十六进制数字的序列，代表字符代码点。</target>
        </trans-unit>
        <trans-unit id="3e71c6008a2054b02c7458c10af8db199b93e0fc" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;l&lt;/code&gt; must be the actual array, not a pointer to it.</source>
          <target state="translated">数组 &lt;code&gt;l&lt;/code&gt; 必须是实际数组，而不是指向它的指针。</target>
        </trans-unit>
        <trans-unit id="ec4ef8ac03868996fbe27096f10720a2a635fd47" translate="yes" xml:space="preserve">
          <source>The assignment statement first evaluates all its expressions and only then the assignments are performed. Thus the code</source>
          <target state="translated">赋值语句首先对其所有表达式进行评估,然后才进行赋值。因此,这段代码</target>
        </trans-unit>
        <trans-unit id="63ea036976be25a6fccc44715a31648a894a2cd9" translate="yes" xml:space="preserve">
          <source>The available formats are</source>
          <target state="translated">可用的格式有</target>
        </trans-unit>
        <trans-unit id="1bf5ee36dda4ba103acec9799a8f08fe38658693" translate="yes" xml:space="preserve">
          <source>The basic expressions in Lua are the following:</source>
          <target state="translated">Lua中的基本表达式如下。</target>
        </trans-unit>
        <trans-unit id="a90f0e6ef32f54b398b228c2483c97e99f92d4d7" translate="yes" xml:space="preserve">
          <source>The basic library provides core functions to Lua. If you do not include this library in your application, you should check carefully whether you need to provide implementations for some of its facilities.</source>
          <target state="translated">基本库为Lua提供了核心功能,如果你不在你的应用程序中包含这个库,你应该仔细检查是否需要为它的一些功能提供实现。如果你不在你的应用程序中包含这个库,你应该仔细检查你是否需要为它的一些设施提供实现。</target>
        </trans-unit>
        <trans-unit id="6a4e9c1cd28f7989f62ba005ba19f087fc3592ba" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;next&lt;/code&gt; is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may clear existing fields.</source>
          <target state="translated">如果在遍历期间将任何值分配给表中的不存在字段，则 &lt;code&gt;next&lt;/code&gt; 的行为是不确定的。但是，您可以修改现有字段。特别是，您可以清除现有字段。</target>
        </trans-unit>
        <trans-unit id="0dc90ae531b088f04f67083e165dbcb68af23283" translate="yes" xml:space="preserve">
          <source>The call &lt;code&gt;collectgarbage(&quot;count&quot;)&lt;/code&gt; now returns only one result. (You can compute that second result from the fractional part of the first result.)</source>
          <target state="translated">调用 &lt;code&gt;collectgarbage(&quot;count&quot;)&lt;/code&gt; 现在仅返回一个结果。（您可以根据第一个结果的小数部分来计算第二个结果。）</target>
        </trans-unit>
        <trans-unit id="c68441a4203b3cd2bfe34776a10e03a400a467cb" translate="yes" xml:space="preserve">
          <source>The call &lt;code&gt;io.lines()&lt;/code&gt; (with no file name) is equivalent to &lt;code&gt;io.input():lines(&quot;*l&quot;)&lt;/code&gt;; that is, it iterates over the lines of the default input file. In this case it does not close the file when the loop ends.</source>
          <target state="translated">调用 &lt;code&gt;io.lines()&lt;/code&gt; （没有文件名）等效于 &lt;code&gt;io.input():lines(&quot;*l&quot;)&lt;/code&gt; ；也就是说，迭代默认输入文件的各行。在这种情况下，循环结束时它不会关闭文件。</target>
        </trans-unit>
        <trans-unit id="ef37fdd6b0b5e41eab32a9928b1d9217a2a5737b" translate="yes" xml:space="preserve">
          <source>The computation of the length of a table has a guaranteed worst time of &lt;em&gt;O(log n)&lt;/em&gt;, where &lt;em&gt;n&lt;/em&gt; is the largest natural key in the table.</source>
          <target state="translated">表长度的计算具有保证的最差时间&lt;em&gt;O（log n）&lt;/em&gt;，其中&lt;em&gt;n&lt;/em&gt;是表中最大的自然键。</target>
        </trans-unit>
        <trans-unit id="0b56d75e0be562bbdd8ce192220fca509ed349d6" translate="yes" xml:space="preserve">
          <source>The condition expression of a control structure can return any value. Both &lt;b&gt;false&lt;/b&gt; and &lt;b&gt;nil&lt;/b&gt; are considered false. All values different from &lt;b&gt;nil&lt;/b&gt; and &lt;b&gt;false&lt;/b&gt; are considered true (in particular, the number 0 and the empty string are also true).</source>
          <target state="translated">控制结构的条件表达式可以返回任何值。这两种&lt;b&gt;假&lt;/b&gt;和&lt;b&gt;零&lt;/b&gt;被认为是假的。所有不同于&lt;b&gt;nil&lt;/b&gt;和&lt;b&gt;false的&lt;/b&gt;值都被视为true（特别是数字0和空字符串也为true）。</target>
        </trans-unit>
        <trans-unit id="c3733f14fe1543e4589c9195fb66e8ff53166d2c" translate="yes" xml:space="preserve">
          <source>The control structures &lt;b&gt;if&lt;/b&gt;, &lt;b&gt;while&lt;/b&gt;, and &lt;b&gt;repeat&lt;/b&gt; have the usual meaning and familiar syntax:</source>
          <target state="translated">控件结构&lt;b&gt;if&lt;/b&gt;，&lt;b&gt;while&lt;/b&gt;和&lt;b&gt;repeat&lt;/b&gt;具有通常的含义和熟悉的语法：</target>
        </trans-unit>
        <trans-unit id="fd0c2e7539b39e7334ffb646988e686084be276b" translate="yes" xml:space="preserve">
          <source>The conversion from float to integer checks whether the float has an exact representation as an integer (that is, the float has an integral value and it is in the range of integer representation). If it does, that representation is the result. Otherwise, the conversion fails.</source>
          <target state="translated">从float到整数的转换检查float是否有整数的精确表示(即float有一个积分值,并且它在整数表示的范围内)。如果有,则是该表示法的结果。否则,转换失败。</target>
        </trans-unit>
        <trans-unit id="2672e5ddb4380b4a0e9162708d0ffacc1d9552f5" translate="yes" xml:space="preserve">
          <source>The conversion from numbers to strings uses a non-specified human-readable format. For complete control over how numbers are converted to strings, use the &lt;code&gt;format&lt;/code&gt; function from the string library (see &lt;a href=&quot;#pdf-string.format&quot;&gt;&lt;code&gt;string.format&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">从数字到字符串的转换使用非指定的人类可读格式。要完全控制如何将数字转换为字符串，请使用字符串库中的 &lt;code&gt;format&lt;/code&gt; 函数（请参阅&lt;a href=&quot;#pdf-string.format&quot;&gt; &lt;code&gt;string.format&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="e4fc8189f226b883ce5f116eb5b865021736d178" translate="yes" xml:space="preserve">
          <source>The conversion from strings to numbers goes as follows: First, the string is converted to an integer or a float, following its syntax and the rules of the Lua lexer. (The string may have also leading and trailing spaces and a sign.) Then, the resulting number (float or integer) is converted to the type (float or integer) required by the context (e.g., the operation that forced the conversion).</source>
          <target state="translated">从字符串到数字的转换过程如下。首先,按照其语法和Lua词典的规则,将字符串转换为整数或浮点数。(字符串可能还有前导空格、尾部空格和符号。)然后,将得到的数字(float或整数)转换为上下文所要求的类型(float或整数)(例如,强制转换的操作)。</target>
        </trans-unit>
        <trans-unit id="f171e574fe61e971bf96a3990d066bb469d0ea25" translate="yes" xml:space="preserve">
          <source>The conversion of a float to a string now adds a &lt;code&gt;.0&lt;/code&gt; suffix to the result if it looks like an integer. (For instance, the float 2.0 will be printed as &lt;code&gt;2.0&lt;/code&gt;, not as &lt;code&gt;2&lt;/code&gt;.) You should always use an explicit format when you need a specific format for numbers.</source>
          <target state="translated">如果看起来像整数，则将float转换为字符串现在会向结果添加 &lt;code&gt;.0&lt;/code&gt; 后缀。（例如，float 2.0将被打印为 &lt;code&gt;2.0&lt;/code&gt; ，而不是 &lt;code&gt;2&lt;/code&gt; 。）当您需要数字的特定格式时，应始终使用显式格式。</target>
        </trans-unit>
        <trans-unit id="fde25091233105fea6baa5683b61b7b5603b3cd0" translate="yes" xml:space="preserve">
          <source>The conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see &lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1&lt;/a&gt;). (The string may have leading and trailing spaces and a sign.)</source>
          <target state="translated">根据Lua的词汇约定，字符串的转换可能导致整数或浮点数（请参阅第&lt;a href=&quot;#3.1&quot;&gt;3.1节&lt;/a&gt;）。 （字符串可能具有前导和尾随空格以及一个符号。）</target>
        </trans-unit>
        <trans-unit id="4a41a1a32246a11826a5d6e075e45733f76f3306" translate="yes" xml:space="preserve">
          <source>The conversion specifiers are quite restricted. There are no flags, widths, or precisions. The conversion specifiers can only be '&lt;code&gt;%%&lt;/code&gt;' (inserts the character '&lt;code&gt;%&lt;/code&gt;'), '&lt;code&gt;%s&lt;/code&gt;' (inserts a zero-terminated string, with no size restrictions), '&lt;code&gt;%f&lt;/code&gt;' (inserts a &lt;a href=&quot;#lua_Number&quot;&gt;&lt;code&gt;lua_Number&lt;/code&gt;&lt;/a&gt;), '&lt;code&gt;%I&lt;/code&gt;' (inserts a &lt;a href=&quot;#lua_Integer&quot;&gt;&lt;code&gt;lua_Integer&lt;/code&gt;&lt;/a&gt;), '&lt;code&gt;%p&lt;/code&gt;' (inserts a pointer as a hexadecimal numeral), '&lt;code&gt;%d&lt;/code&gt;' (inserts an &lt;code&gt;int&lt;/code&gt;), '&lt;code&gt;%c&lt;/code&gt;' (inserts an &lt;code&gt;int&lt;/code&gt; as a one-byte character), and '&lt;code&gt;%U&lt;/code&gt;' (inserts a &lt;code&gt;long int&lt;/code&gt; as a UTF-8 byte sequence).</source>
          <target state="translated">转换说明符非常受限制。没有标志，宽度或精度。转换说明符只能是' &lt;code&gt;%%&lt;/code&gt; '（插入字符' &lt;code&gt;%&lt;/code&gt; '），' &lt;code&gt;%s&lt;/code&gt; '（插入零终止字符串，没有大小限制），' &lt;code&gt;%f&lt;/code&gt; '（插入&lt;a href=&quot;#lua_Number&quot;&gt; &lt;code&gt;lua_Number&lt;/code&gt; &lt;/a&gt;），' &lt;code&gt;%I&lt;/code&gt; '（插入&lt;a href=&quot;#lua_Integer&quot;&gt; &lt;code&gt;lua_Integer&lt;/code&gt; &lt;/a&gt;），' &lt;code&gt;%p&lt;/code&gt; '（将指针插入为十六进制数字），' &lt;code&gt;%d&lt;/code&gt; '（插入 &lt;code&gt;int&lt;/code&gt; ），' &lt;code&gt;%c&lt;/code&gt; '（将 &lt;code&gt;int&lt;/code&gt; 作为一个字节的字符插入）和' &lt;code&gt;%U&lt;/code&gt; &amp;ldquo;（将 &lt;code&gt;long int&lt;/code&gt; 插入为UTF-8字节序列）。</target>
        </trans-unit>
        <trans-unit id="4a2b4eab7e7e8e47540c45b140f9d1c1edf8fd79" translate="yes" xml:space="preserve">
          <source>The current parser always sees such constructions in the first way, interpreting the open parenthesis as the start of the arguments to a call. To avoid this ambiguity, it is a good practice to always precede with a semicolon statements that start with a parenthesis:</source>
          <target state="translated">当前的解析器总是以第一种方式来看待这种结构,将打开的括号解释为调用的参数的开始。为了避免这种歧义,一个好的做法是总是在以小括号开头的语句前加上分号。</target>
        </trans-unit>
        <trans-unit id="1273a024b1e39aac89ab0ab6781ebe040b7fbcc0" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;pos&lt;/code&gt; is &lt;code&gt;#list&lt;/code&gt;, so that a call &lt;code&gt;table.remove(l)&lt;/code&gt; removes the last element of list &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="translated">为默认值 &lt;code&gt;pos&lt;/code&gt; 是 &lt;code&gt;#list&lt;/code&gt; ，使呼叫 &lt;code&gt;table.remove(l)&lt;/code&gt; 删除列表中的最后一个元素 &lt;code&gt;l&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13c08370b3a28f0fd5960d5a4c5c48fa16e93a96" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;whence&lt;/code&gt; is &lt;code&gt;&quot;cur&quot;&lt;/code&gt;, and for &lt;code&gt;offset&lt;/code&gt; is 0. Therefore, the call &lt;code&gt;file:seek()&lt;/code&gt; returns the current file position, without changing it; the call &lt;code&gt;file:seek(&quot;set&quot;)&lt;/code&gt; sets the position to the beginning of the file (and returns 0); and the call &lt;code&gt;file:seek(&quot;end&quot;)&lt;/code&gt; sets the position to the end of the file, and returns its size.</source>
          <target state="translated">作为默认值 &lt;code&gt;whence&lt;/code&gt; 是 &lt;code&gt;&quot;cur&quot;&lt;/code&gt; ，和用于 &lt;code&gt;offset&lt;/code&gt; 是0，因此，呼叫 &lt;code&gt;file:seek()&lt;/code&gt; 返回当前文件的位置，而不改变它; 调用 &lt;code&gt;file:seek(&quot;set&quot;)&lt;/code&gt; 将位置设置为文件的开头（并返回0）；调用 &lt;code&gt;file:seek(&quot;end&quot;)&lt;/code&gt; 将位置设置为文件的末尾，并返回其大小。</target>
        </trans-unit>
        <trans-unit id="6bc56dc8d299b9d15b00a924ab6b6763132d6c6e" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;x&lt;/code&gt; is 1, so that the call &lt;code&gt;math.atan(y)&lt;/code&gt; returns the arc tangent of &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">作为默认值 &lt;code&gt;x&lt;/code&gt; 为1，以使得呼叫 &lt;code&gt;math.atan(y)&lt;/code&gt; 返回的反正切值 &lt;code&gt;y&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6c1119d71f1c451d5f2fe0db217d85e8a5bba94c" translate="yes" xml:space="preserve">
          <source>The definitions of letter, space, and other character groups depend on the current locale. In particular, the class &lt;code&gt;[a-z]&lt;/code&gt; may not be equivalent to &lt;code&gt;%l&lt;/code&gt;.</source>
          <target state="translated">字母，空格和其他字符组的定义取决于当前的语言环境。特别地，类 &lt;code&gt;[a-z]&lt;/code&gt; 可能不等同于 &lt;code&gt;%l&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f71cbe788ea609ab97e549ccaa27836b38cc887d" translate="yes" xml:space="preserve">
          <source>The field list can have an optional trailing separator, as a convenience for machine-generated code.</source>
          <target state="translated">字段列表可以有一个可选的尾部分隔符,以方便机器生成的代码。</target>
        </trans-unit>
        <trans-unit id="e2dc2a9366caaece55ab74f5902257c1d9cc63e9" translate="yes" xml:space="preserve">
          <source>The fields of &lt;a href=&quot;#lua_Debug&quot;&gt;&lt;code&gt;lua_Debug&lt;/code&gt;&lt;/a&gt; have the following meaning:</source>
          <target state="translated">&lt;a href=&quot;#lua_Debug&quot;&gt; &lt;code&gt;lua_Debug&lt;/code&gt; &lt;/a&gt;的字段具有以下含义：</target>
        </trans-unit>
        <trans-unit id="5cf6a1464c2f6d6211946c68accd0138255e9433" translate="yes" xml:space="preserve">
          <source>The fifth line is a mark to ignore all text after it when building the &lt;code&gt;luaopen_&lt;/code&gt; function name. Default is '&lt;code&gt;-&lt;/code&gt;'.</source>
          <target state="translated">第五行是构建 &lt;code&gt;luaopen_&lt;/code&gt; 函数名称时忽略其后所有文本的标记。默认值为&amp;ldquo; &lt;code&gt;-&lt;/code&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="d550e1bb0cbfc7b8de8aa9f3e58a6e8b1e903f3a" translate="yes" xml:space="preserve">
          <source>The first argument to &lt;a href=&quot;#pdf-string.pack&quot;&gt;&lt;code&gt;string.pack&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-string.packsize&quot;&gt;&lt;code&gt;string.packsize&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#pdf-string.unpack&quot;&gt;&lt;code&gt;string.unpack&lt;/code&gt;&lt;/a&gt; is a format string, which describes the layout of the structure being created or read.</source>
          <target state="translated">&lt;a href=&quot;#pdf-string.pack&quot;&gt; &lt;code&gt;string.pack&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#pdf-string.packsize&quot;&gt; &lt;code&gt;string.packsize&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#pdf-string.unpack&quot;&gt; &lt;code&gt;string.unpack&lt;/code&gt; &lt;/a&gt;的第一个参数是格式字符串，它描述了正在创建或读取的结构的布局。</target>
        </trans-unit>
        <trans-unit id="35b2be930dbf43b40449e98f73501827b087ff5f" translate="yes" xml:space="preserve">
          <source>The first field, &lt;code&gt;o&lt;/code&gt;, is how many elements the function pops from the stack. The second field, &lt;code&gt;p&lt;/code&gt;, is how many elements the function pushes onto the stack. (Any function always pushes its results after popping its arguments.) A field in the form &lt;code&gt;x|y&lt;/code&gt; means the function can push (or pop) &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; elements, depending on the situation; an interrogation mark '&lt;code&gt;?&lt;/code&gt;' means that we cannot know how many elements the function pops/pushes by looking only at its arguments (e.g., they may depend on what is on the stack). The third field, &lt;code&gt;x&lt;/code&gt;, tells whether the function may raise errors: '&lt;code&gt;-&lt;/code&gt;' means the function never raises any error; '&lt;code&gt;m&lt;/code&gt;' means the function may raise out-of-memory errors and errors running a &lt;code&gt;__gc&lt;/code&gt; metamethod; '&lt;code&gt;e&lt;/code&gt;' means the function may raise any errors (it can run arbitrary Lua code, either directly or through metamethods); '&lt;code&gt;v&lt;/code&gt;' means the function may raise an error on purpose.</source>
          <target state="translated">第一个字段 &lt;code&gt;o&lt;/code&gt; 是函数从堆栈中弹出多少个元素。第二个字段 &lt;code&gt;p&lt;/code&gt; 是函数将多少个元素压入堆栈。 （任何函数总是在弹出其参数后才推送其结果。）形式为 &lt;code&gt;x|y&lt;/code&gt; 字段表示该函数可以根据情况推送（或弹出） &lt;code&gt;x&lt;/code&gt; 或 &lt;code&gt;y&lt;/code&gt; 元素。讯问标记' &lt;code&gt;?&lt;/code&gt; '意味着我们仅通过查看其参数就无法知道函数弹出/推入了多少个元素（例如，它们可能取决于堆栈中的内容）。第三个字段 &lt;code&gt;x&lt;/code&gt; 指示该函数是否可能引发错误：' &lt;code&gt;-&lt;/code&gt; '表示该函数从不引发任何错误； &amp;ldquo; &lt;code&gt;m&lt;/code&gt; '表示该函数可能会引发内存不足错误和运行 &lt;code&gt;__gc&lt;/code&gt; 元方法的错误；' &lt;code&gt;e&lt;/code&gt; '表示该函数可能会引发任何错误（它可以直接或通过元方法运行任意的Lua代码）；&amp;ldquo; &lt;code&gt;v&lt;/code&gt; &amp;rdquo;表示该函数可能会故意引发错误。</target>
        </trans-unit>
        <trans-unit id="080894d3f355773389e870abdc64bf22951aa7fd" translate="yes" xml:space="preserve">
          <source>The first line is the directory separator string. Default is '&lt;code&gt;\&lt;/code&gt;' for Windows and '&lt;code&gt;/&lt;/code&gt;' for all other systems.</source>
          <target state="translated">第一行是目录分隔符字符串。对于Windows，默认值为' &lt;code&gt;\&lt;/code&gt; '，对于所有其他系统，默认值为' &lt;code&gt;/&lt;/code&gt; '。</target>
        </trans-unit>
        <trans-unit id="b927b10bd57d8d0d9d2adab8cf882393f87f3f97" translate="yes" xml:space="preserve">
          <source>The first parameter or local variable has index 1, and so on, following the order that they are declared in the code, counting only the variables that are active in the current scope of the function. Negative indices refer to vararg parameters; -1 is the first vararg parameter. The function returns &lt;b&gt;nil&lt;/b&gt; if there is no variable with the given index, and raises an error when called with a level out of range. (You can call &lt;a href=&quot;#pdf-debug.getinfo&quot;&gt;&lt;code&gt;debug.getinfo&lt;/code&gt;&lt;/a&gt; to check whether the level is valid.)</source>
          <target state="translated">第一个参数或局部变量的索引为1，依此类推，遵循它们在代码中声明的顺序，仅计算在函数当前范围内处于活动状态的变量。负索引指的是vararg参数；-1是第一个vararg参数。如果没有给定索引的变量，该函数将返回&lt;b&gt;nil&lt;/b&gt;，并且在级别超出范围的情况下调用时会引发错误。（您可以调用&lt;a href=&quot;#pdf-debug.getinfo&quot;&gt; &lt;code&gt;debug.getinfo&lt;/code&gt; &lt;/a&gt;来检查级别是否有效。）</target>
        </trans-unit>
        <trans-unit id="ee8f303d70c303dd14cac48bd1f16c3b0dcbcc40" translate="yes" xml:space="preserve">
          <source>The first searcher simply looks for a loader in the &lt;a href=&quot;#pdf-package.preload&quot;&gt;&lt;code&gt;package.preload&lt;/code&gt;&lt;/a&gt; table.</source>
          <target state="translated">第一个搜索器只是在&lt;a href=&quot;#pdf-package.preload&quot;&gt; &lt;code&gt;package.preload&lt;/code&gt; &lt;/a&gt;表中查找装载程序。</target>
        </trans-unit>
        <trans-unit id="d265942ec96276d66e6ab599ec30b3a3b29815fd" translate="yes" xml:space="preserve">
          <source>The float value &lt;code&gt;HUGE_VAL&lt;/code&gt;, a value larger than any other numeric value.</source>
          <target state="translated">浮点值 &lt;code&gt;HUGE_VAL&lt;/code&gt; ，该值大于任何其他数值。</target>
        </trans-unit>
        <trans-unit id="196211405f17ee844517a47f2e8b2cb60db3f8ce" translate="yes" xml:space="preserve">
          <source>The following &lt;em&gt;keywords&lt;/em&gt; are reserved and cannot be used as names:</source>
          <target state="translated">以下&lt;em&gt;关键字&lt;/em&gt;是保留&lt;em&gt;关键字&lt;/em&gt;，不能用作名称：</target>
        </trans-unit>
        <trans-unit id="ab8a72a62eca0d1ef8ee4d0f5f153c9b1519bd5d" translate="yes" xml:space="preserve">
          <source>The following example shows how the host program can do the equivalent to this Lua code:</source>
          <target state="translated">下面的例子显示了主机程序如何做相当于这段Lua代码的工作。</target>
        </trans-unit>
        <trans-unit id="278e2855a1845e2a26526bc29fe7fac6d57babe0" translate="yes" xml:space="preserve">
          <source>The following functions were deprecated in the mathematical library: &lt;code&gt;atan2&lt;/code&gt;, &lt;code&gt;cosh&lt;/code&gt;, &lt;code&gt;sinh&lt;/code&gt;, &lt;code&gt;tanh&lt;/code&gt;, &lt;code&gt;pow&lt;/code&gt;, &lt;code&gt;frexp&lt;/code&gt;, and &lt;code&gt;ldexp&lt;/code&gt;. You can replace &lt;code&gt;math.pow(x,y)&lt;/code&gt; with &lt;code&gt;x^y&lt;/code&gt;; you can replace &lt;code&gt;math.atan2&lt;/code&gt; with &lt;code&gt;math.atan&lt;/code&gt;, which now accepts one or two parameters; you can replace &lt;code&gt;math.ldexp(x,exp)&lt;/code&gt; with &lt;code&gt;x * 2.0^exp&lt;/code&gt;. For the other operations, you can either use an external library or implement them in Lua.</source>
          <target state="translated">数学库中不推荐使用以下函数： &lt;code&gt;atan2&lt;/code&gt; ， &lt;code&gt;cosh&lt;/code&gt; ， &lt;code&gt;sinh&lt;/code&gt; ， &lt;code&gt;tanh&lt;/code&gt; ， &lt;code&gt;pow&lt;/code&gt; ， &lt;code&gt;frexp&lt;/code&gt; 和 &lt;code&gt;ldexp&lt;/code&gt; 。您可以用 &lt;code&gt;x^y&lt;/code&gt; 替换 &lt;code&gt;math.pow(x,y)&lt;/code&gt; ；您可以将 &lt;code&gt;math.atan2&lt;/code&gt; 替换为 &lt;code&gt;math.atan&lt;/code&gt; ，现在可以接受一个或两个参数；您可以替换 &lt;code&gt;math.ldexp(x,exp)&lt;/code&gt; 与 &lt;code&gt;x * 2.0^exp&lt;/code&gt; 。对于其他操作，您可以使用外部库或在Lua中实现它们。</target>
        </trans-unit>
        <trans-unit id="525a807668897271f1a9b9de59f3fdf8f64551a7" translate="yes" xml:space="preserve">
          <source>The following strings denote other tokens:</source>
          <target state="translated">以下字符串表示其他令牌。</target>
        </trans-unit>
        <trans-unit id="ba13fb8d8389b33ab088d4fc65f5ec35b8d33e18" translate="yes" xml:space="preserve">
          <source>The following syntactic sugar simplifies function definitions:</source>
          <target state="translated">下面的语法糖简化了函数定义。</target>
        </trans-unit>
        <trans-unit id="af2cb037b897b34b24d5a23238cf877011ea082c" translate="yes" xml:space="preserve">
          <source>The form</source>
          <target state="translated">形式</target>
        </trans-unit>
        <trans-unit id="7a0c21abdce99c6d3820ba447237185fd89bfedf" translate="yes" xml:space="preserve">
          <source>The formats &quot;&lt;code&gt;l&lt;/code&gt;&quot; and &quot;&lt;code&gt;L&lt;/code&gt;&quot; should be used only for text files.</source>
          <target state="translated">格式&amp;ldquo; &lt;code&gt;l&lt;/code&gt; &amp;rdquo;和&amp;ldquo; &lt;code&gt;L&lt;/code&gt; &amp;rdquo;应仅用于文本文件。</target>
        </trans-unit>
        <trans-unit id="dd4c785119c8c33799dde8b20447ed83f6ee2b11" translate="yes" xml:space="preserve">
          <source>The fourth line is a string that, in a path in Windows, is replaced by the executable's directory. Default is '&lt;code&gt;!&lt;/code&gt;'.</source>
          <target state="translated">第四行是一个字符串，在Windows的路径中，该字符串被可执行文件的目录替换。默认为' &lt;code&gt;!&lt;/code&gt; '。</target>
        </trans-unit>
        <trans-unit id="c4934c1b60689ce3f2c3bcb8e146450b0295d47d" translate="yes" xml:space="preserve">
          <source>The fourth searcher tries an &lt;em&gt;all-in-one loader&lt;/em&gt;. It searches the C path for a library for the root name of the given module. For instance, when requiring &lt;code&gt;a.b.c&lt;/code&gt;, it will search for a C library for &lt;code&gt;a&lt;/code&gt;. If found, it looks into it for an open function for the submodule; in our example, that would be &lt;code&gt;luaopen_a_b_c&lt;/code&gt;. With this facility, a package can pack several C submodules into one single library, with each submodule keeping its original open function.</source>
          <target state="translated">第四个搜索器尝试一个&lt;em&gt;多合一的加载器&lt;/em&gt;。它在C路径中搜索给定模块的根名称的库。例如，当需要时 &lt;code&gt;a.b.c&lt;/code&gt; ，它会搜索C库的 &lt;code&gt;a&lt;/code&gt; 。如果找到，它将在其中寻找子模块的打开功能；在我们的示例中，它将是 &lt;code&gt;luaopen_a_b_c&lt;/code&gt; 。借助此功能，一个程序包可以将多个C子模块打包到一个库中，每个子模块保持其原始的打开功能。</target>
        </trans-unit>
        <trans-unit id="f3fbd703ec3951b9eef95d2b7d4e3956a139b1f1" translate="yes" xml:space="preserve">
          <source>The garbage-collector pause controls how long the collector waits before starting a new cycle. Larger values make the collector less aggressive. Values smaller than 100 mean the collector will not wait to start a new cycle. A value of 200 means that the collector waits for the total memory in use to double before starting a new cycle.</source>
          <target state="translated">垃圾收集器暂停控制了收集器在开始新的循环之前等待的时间。数值越大,收集器的积极性越低。小于100的值意味着收集器不会等待开始一个新的循环。值为200表示收集器在开始新的循环之前,会等待使用的总内存增加一倍。</target>
        </trans-unit>
        <trans-unit id="3da0189eddd3acd188369ff8e9890d24f44cba07" translate="yes" xml:space="preserve">
          <source>The garbage-collector step multiplier controls the relative speed of the collector relative to memory allocation. Larger values make the collector more aggressive but also increase the size of each incremental step. You should not use values smaller than 100, because they make the collector too slow and can result in the collector never finishing a cycle. The default is 200, which means that the collector runs at &quot;twice&quot; the speed of memory allocation.</source>
          <target state="translated">垃圾收集器步骤乘数控制收集器相对于内存分配的相对速度。较大的值会使收集器更加激进,但也会增加每个增量步骤的大小。您不应该使用小于100的值,因为它们会使收集器太慢,并可能导致收集器永远无法完成一个周期。默认值是200,这意味着收集器以内存分配速度的 &quot;两倍 &quot;运行。</target>
        </trans-unit>
        <trans-unit id="9dc362bec1b0383d76bda32165a279742df9516d" translate="yes" xml:space="preserve">
          <source>The generational mode for the garbage collector was removed. (It was an experimental feature in Lua 5.2.)</source>
          <target state="translated">垃圾收集器的生成模式被移除。(这是Lua 5.2中的一个实验性功能。)</target>
        </trans-unit>
        <trans-unit id="3906554899c83e568ddf64f2f5b8f01161ffbe7d" translate="yes" xml:space="preserve">
          <source>The generic &lt;b&gt;for&lt;/b&gt; statement works over functions, called &lt;em&gt;iterators&lt;/em&gt;. On each iteration, the iterator function is called to produce a new value, stopping when this new value is &lt;b&gt;nil&lt;/b&gt;. The generic &lt;b&gt;for&lt;/b&gt; loop has the following syntax:</source>
          <target state="translated">通用的&lt;b&gt;for&lt;/b&gt;语句对称为&lt;em&gt;迭代器的&lt;/em&gt;函数起作用。在每次迭代中，将调用迭代器函数以生成一个新值，并在该新值为&lt;b&gt;nil&lt;/b&gt;时停止。通用的&lt;b&gt;for&lt;/b&gt;循环具有以下语法：</target>
        </trans-unit>
        <trans-unit id="dd954aa3fd6697b79eaabbdef5d75d8c6c7ba3dc" translate="yes" xml:space="preserve">
          <source>The grammar could see it in two ways:</source>
          <target state="translated">语法可以从两个方面来看。</target>
        </trans-unit>
        <trans-unit id="c16256befb5f873dad0793713187bd7e83a270f1" translate="yes" xml:space="preserve">
          <source>The indexing of tables follows the definition of raw equality in the language. The expressions &lt;code&gt;a[i]&lt;/code&gt; and &lt;code&gt;a[j]&lt;/code&gt; denote the same table element if and only if &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; are raw equal (that is, equal without metamethods). In particular, floats with integral values are equal to their respective integers (e.g., &lt;code&gt;1.0 == 1&lt;/code&gt;). To avoid ambiguities, any float with integral value used as a key is converted to its respective integer. For instance, if you write &lt;code&gt;a[2.0] = true&lt;/code&gt;, the actual key inserted into the table will be the integer &lt;code&gt;2&lt;/code&gt;. (On the other hand, 2 and &quot;&lt;code&gt;2&lt;/code&gt;&quot; are different Lua values and therefore denote different table entries.)</source>
          <target state="translated">表的索引遵循该语言中原始相等性的定义。表达式 &lt;code&gt;a[i]&lt;/code&gt; 和 &lt;code&gt;a[j]&lt;/code&gt; 表示相同的表元素，并且仅当 &lt;code&gt;i&lt;/code&gt; 和 &lt;code&gt;j&lt;/code&gt; 原始等于（即，没有元方法时等于）时。特别是，具有整数值的浮点数等于它们各自的整数（例如 &lt;code&gt;1.0 == 1&lt;/code&gt; ）。为避免歧义，任何将整数值用作键的浮点数都将转换为其各自的整数。例如，如果您编写 &lt;code&gt;a[2.0] = true&lt;/code&gt; ，则插入表中的实际键将是整数 &lt;code&gt;2&lt;/code&gt; 。 （另一方面，2和&amp;ldquo; &lt;code&gt;2&lt;/code&gt; &amp;rdquo;是不同的Lua值，因此表示不同的表条目。）</target>
        </trans-unit>
        <trans-unit id="7b21a8105ceb5ba09152263fc96b9536c63b0161" translate="yes" xml:space="preserve">
          <source>The integer keys in the registry are used by the reference mechanism (see &lt;a href=&quot;#luaL_ref&quot;&gt;&lt;code&gt;luaL_ref&lt;/code&gt;&lt;/a&gt;) and by some predefined values. Therefore, integer keys must not be used for other purposes.</source>
          <target state="translated">注册表中的整数键由引用机制（请参阅&lt;a href=&quot;#luaL_ref&quot;&gt; &lt;code&gt;luaL_ref&lt;/code&gt; &lt;/a&gt;）和一些预定义的值使用。因此，整数键不得用于其他目的。</target>
        </trans-unit>
        <trans-unit id="9e586180c1379ce5751eba407cc18f08a9cdeaf0" translate="yes" xml:space="preserve">
          <source>The interaction between ranges and classes is not defined. Therefore, patterns like &lt;code&gt;[%a-z]&lt;/code&gt; or &lt;code&gt;[a-%%]&lt;/code&gt; have no meaning.</source>
          <target state="translated">范围和类之间的交互未定义。因此， &lt;code&gt;[%a-z]&lt;/code&gt; 或 &lt;code&gt;[a-%%]&lt;/code&gt; 之类的模式没有意义。</target>
        </trans-unit>
        <trans-unit id="f2c90b056889f7693fbb491e97825cdc7458b557" translate="yes" xml:space="preserve">
          <source>The key for each event in a metatable is a string with the event name prefixed by two underscores; the corresponding values are called &lt;em&gt;metamethods&lt;/em&gt;. In the previous example, the key is &quot;&lt;code&gt;__add&lt;/code&gt;&quot; and the metamethod is the function that performs the addition.</source>
          <target state="translated">元表中每个事件的键是一个字符串，其事件名称以两个下划线为前缀；相应的值称为&lt;em&gt;元方法&lt;/em&gt;。在前面的示例中，键为&amp;ldquo; &lt;code&gt;__add&lt;/code&gt; &amp;rdquo;，元方法为执行加法的函数。</target>
        </trans-unit>
        <trans-unit id="a1e3c58922162233ff6ef255d5df925e8da6f663" translate="yes" xml:space="preserve">
          <source>The length of a string is its number of bytes (that is, the usual meaning of string length when each character is one byte).</source>
          <target state="translated">字符串的长度就是它的字节数(也就是通常意义上的字符串长度,当每个字符是一个字节时)。</target>
        </trans-unit>
        <trans-unit id="01dac97eea86a239bf3254b898850f4681c59248" translate="yes" xml:space="preserve">
          <source>The length operator applied on a table returns a border in that table. A &lt;em&gt;border&lt;/em&gt; in a table &lt;code&gt;t&lt;/code&gt; is any natural number that satisfies the following condition:</source>
          <target state="translated">应用于表的长度运算符返回该表中的边框。一个&lt;em&gt;边界&lt;/em&gt;表中的 &lt;code&gt;t&lt;/code&gt; 是任何自然数满足以下条件：</target>
        </trans-unit>
        <trans-unit id="3a0004633e5acb8c29842421799433ea833432d7" translate="yes" xml:space="preserve">
          <source>The length operator is denoted by the unary prefix operator &lt;code&gt;#&lt;/code&gt;.</source>
          <target state="translated">长度运算符由一元前缀运算符 &lt;code&gt;#&lt;/code&gt; 表示。</target>
        </trans-unit>
        <trans-unit id="13a462f71ac26baf154dba8703e365c0df2ac20a" translate="yes" xml:space="preserve">
          <source>The library function &lt;a href=&quot;#pdf-type&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; returns a string describing the type of a given value (see &lt;a href=&quot;#6.1&quot;&gt;&amp;sect;6.1&lt;/a&gt;).</source>
          <target state="translated">库函数&lt;a href=&quot;#pdf-type&quot;&gt; &lt;code&gt;type&lt;/code&gt; &lt;/a&gt;返回描述给定值类型的字符串（请参见&lt;a href=&quot;#6.1&quot;&gt;&amp;sect;6.1&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="6144a62a4a0e6d0612f6eb91c540d8aa8bcf7d08" translate="yes" xml:space="preserve">
          <source>The logical operators in Lua are &lt;b&gt;and&lt;/b&gt;, &lt;b&gt;or&lt;/b&gt;, and &lt;b&gt;not&lt;/b&gt;. Like the control structures (see &lt;a href=&quot;#3.3.4&quot;&gt;&amp;sect;3.3.4&lt;/a&gt;), all logical operators consider both &lt;b&gt;false&lt;/b&gt; and &lt;b&gt;nil&lt;/b&gt; as false and anything else as true.</source>
          <target state="translated">Lua中的逻辑运算符&lt;b&gt;和&lt;/b&gt;，&lt;b&gt;或&lt;/b&gt;和&lt;b&gt;不&lt;/b&gt;。与控制结构一样（请参见第&lt;a href=&quot;#3.3.4&quot;&gt;3.3.4节&lt;/a&gt;），所有逻辑运算符都将&lt;b&gt;false&lt;/b&gt;和&lt;b&gt;nil都&lt;/b&gt;视为false，并将其他任何内容都视为true。</target>
        </trans-unit>
        <trans-unit id="50f9701ab78d887f6625cde402aefbda0aeac6cc" translate="yes" xml:space="preserve">
          <source>The loop creates ten closures (that is, ten instances of the anonymous function). Each of these closures uses a different &lt;code&gt;y&lt;/code&gt; variable, while all of them share the same &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">该循环创建十个闭包（即，十个匿名函数实例）。每个闭包使用不同的 &lt;code&gt;y&lt;/code&gt; 变量，而它们都共享相同的 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4fdc614cc4ad6f49d0283a9ba3115c9056932e8c" translate="yes" xml:space="preserve">
          <source>The loop variable &lt;code&gt;v&lt;/code&gt; is local to the loop body. If you need its value after the loop, assign it to another variable before exiting the loop.</source>
          <target state="translated">循环变量 &lt;code&gt;v&lt;/code&gt; 对循环体而言是局部的。如果在循环后需要它的值，请在退出循环前将其分配给另一个变量。</target>
        </trans-unit>
        <trans-unit id="939c85d0694beae03ef42c252fc95eeaad38dd40" translate="yes" xml:space="preserve">
          <source>The loop variables &lt;code&gt;&lt;em&gt;var_i&lt;/em&gt;&lt;/code&gt; are local to the loop; you cannot use their values after the &lt;b&gt;for&lt;/b&gt; ends. If you need these values, then assign them to other variables before breaking or exiting the loop.</source>
          <target state="translated">循环变量 &lt;code&gt;&lt;em&gt;var_i&lt;/em&gt;&lt;/code&gt; 是循环的局部变量；您不能在&lt;b&gt;for&lt;/b&gt;结束后使用它们的值。如果需要这些值，请在中断或退出循环之前将它们分配给其他变量。</target>
        </trans-unit>
        <trans-unit id="b244dd1c7e2205379de1905e2e723510ea200bac" translate="yes" xml:space="preserve">
          <source>The main difference between Lua 5.2 and Lua 5.3 is the introduction of an integer subtype for numbers. Although this change should not affect &quot;normal&quot; computations, some computations (mainly those that involve some kind of overflow) can give different results.</source>
          <target state="translated">Lua 5.2和Lua 5.3的主要区别是为数字引入了一个整数子类型。虽然这个变化不应该影响 &quot;正常 &quot;的计算,但一些计算(主要是那些涉及某种溢出的计算)会产生不同的结果。</target>
        </trans-unit>
        <trans-unit id="fc3afb9da0c5e976f755e7c1da0bc9514acc6c24" translate="yes" xml:space="preserve">
          <source>The maximum value for &lt;code&gt;n&lt;/code&gt; is 255.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 的最大值为255。</target>
        </trans-unit>
        <trans-unit id="ab795f1f93d86887860588306bf3a809576817cd" translate="yes" xml:space="preserve">
          <source>The meaning of accesses to table fields can be changed via metatables. An access to an indexed variable &lt;code&gt;t[i]&lt;/code&gt; is equivalent to a call &lt;code&gt;gettable_event(t,i)&lt;/code&gt;. (See &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt; for a complete description of the &lt;code&gt;gettable_event&lt;/code&gt; function. This function is not defined or callable in Lua. We use it here only for explanatory purposes.)</source>
          <target state="translated">可以通过元表更改对表字段的访问的含义。访问索引变量 &lt;code&gt;t[i]&lt;/code&gt; 等效于调用 &lt;code&gt;gettable_event(t,i)&lt;/code&gt; 。 （参见&lt;a href=&quot;#2.4&quot;&gt;2.4节&lt;/a&gt;的完整描述 &lt;code&gt;gettable_event&lt;/code&gt; 功能，该功能不会在Lua中定义或调用。我们在这里使用它只是为了便于说明。）</target>
        </trans-unit>
        <trans-unit id="51f3fb78699ea2b9989d6abd1980c0cbe4cf6630" translate="yes" xml:space="preserve">
          <source>The meaning of assignments to global variables and table fields can be changed via metatables. An assignment to an indexed variable &lt;code&gt;t[i] = val&lt;/code&gt; is equivalent to &lt;code&gt;settable_event(t,i,val)&lt;/code&gt;. (See &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt; for a complete description of the &lt;code&gt;settable_event&lt;/code&gt; function. This function is not defined or callable in Lua. We use it here only for explanatory purposes.)</source>
          <target state="translated">可以通过元表更改全局变量和表字段的赋值含义。对索引变量 &lt;code&gt;t[i] = val&lt;/code&gt; 的赋值等效于 &lt;code&gt;settable_event(t,i,val)&lt;/code&gt; 。 （有关 &lt;code&gt;settable_event&lt;/code&gt; 函数的完整说明，请参见&lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;。此函数未在Lua中定义或调用。我们在这里仅将其用于解释目的。）</target>
        </trans-unit>
        <trans-unit id="e0fe8ffeb58ed09038372ff537610ec6335cea78" translate="yes" xml:space="preserve">
          <source>The negation operator &lt;b&gt;not&lt;/b&gt; always returns &lt;b&gt;false&lt;/b&gt; or &lt;b&gt;true&lt;/b&gt;. The conjunction operator &lt;b&gt;and&lt;/b&gt; returns its first argument if this value is &lt;b&gt;false&lt;/b&gt; or &lt;b&gt;nil&lt;/b&gt;; otherwise, &lt;b&gt;and&lt;/b&gt; returns its second argument. The disjunction operator &lt;b&gt;or&lt;/b&gt; returns its first argument if this value is different from &lt;b&gt;nil&lt;/b&gt; and &lt;b&gt;false&lt;/b&gt;; otherwise, &lt;b&gt;or&lt;/b&gt; returns its second argument. Both &lt;b&gt;and&lt;/b&gt; and &lt;b&gt;or&lt;/b&gt; use short-circuit evaluation; that is, the second operand is evaluated only if necessary. Here are some examples:</source>
          <target state="translated">否定运算符&lt;b&gt;并不&lt;/b&gt;总是返回&lt;b&gt;false&lt;/b&gt;或&lt;b&gt;true&lt;/b&gt;。联合运算符&lt;b&gt;，&lt;/b&gt;如果该值为&lt;b&gt;false&lt;/b&gt;或&lt;b&gt;nil&lt;/b&gt;，则返回其第一个参数；否则，&lt;b&gt;并且&lt;/b&gt;返回第二个参数。如果此值不同于&lt;b&gt;nil&lt;/b&gt;和&lt;b&gt;false&lt;/b&gt;，则析取运算符&lt;b&gt;或&lt;/b&gt;返回其第一个参数；否则，&lt;b&gt;或&lt;/b&gt;返回其第二个参数。既&lt;b&gt;与&lt;/b&gt;和&lt;b&gt;或&lt;/b&gt;使用短路评价;也就是说，仅在必要时才对第二个操作数求值。这里有些例子：&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="38ec12da384a6d35f4d20d38b437d28efd6741c1" translate="yes" xml:space="preserve">
          <source>The next example collects all pairs &lt;code&gt;key=value&lt;/code&gt; from the given string into a table:</source>
          <target state="translated">下一个示例将给定字符串中的所有对 &lt;code&gt;key=value&lt;/code&gt; 收集到一个表中：</target>
        </trans-unit>
        <trans-unit id="eb025962461d05ecdc613ae74134730113e392ef" translate="yes" xml:space="preserve">
          <source>The numerical &lt;b&gt;for&lt;/b&gt; loop repeats a block of code while a control variable runs through an arithmetic progression. It has the following syntax:</source>
          <target state="translated">当控制变量通过算术级数运行时，数字&lt;b&gt;for&lt;/b&gt;循环会重复代码块。它具有以下语法：</target>
        </trans-unit>
        <trans-unit id="17ab43bf243843bc19a105d07ba039f8f3f1779b" translate="yes" xml:space="preserve">
          <source>The operator &lt;code&gt;~=&lt;/code&gt; is exactly the negation of equality (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">运算符 &lt;code&gt;~=&lt;/code&gt; 完全等于等号（ &lt;code&gt;==&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="dbc030680dac1e5576f7a0a32beac02271b1de9f" translate="yes" xml:space="preserve">
          <source>The options are:</source>
          <target state="translated">这些选择是:</target>
        </trans-unit>
        <trans-unit id="c0e99c83b2c086ff1b9d5a58745baab04d9e1b8a" translate="yes" xml:space="preserve">
          <source>The order in which the indices are enumerated is not specified, &lt;em&gt;even for numeric indices&lt;/em&gt;. (To traverse a table in numerical order, use a numerical &lt;b&gt;for&lt;/b&gt;.)</source>
          <target state="translated">&lt;em&gt;甚至对于数字索引&lt;/em&gt;，&lt;em&gt;也&lt;/em&gt;未指定索引的枚举顺序。（要按数字顺序遍历表，请将数字&lt;b&gt;用于&lt;/b&gt;。）</target>
        </trans-unit>
        <trans-unit id="30b30ff9b28bb0a62b9d5eaa0e7b9c185acec6fd" translate="yes" xml:space="preserve">
          <source>The order of the assignments in a constructor is undefined. (This order would be relevant only when there are repeated keys.)</source>
          <target state="translated">构造函数中赋值的顺序是未定义的。(这种顺序只有在有重复键的情况下才有意义)。</target>
        </trans-unit>
        <trans-unit id="e03d986c8e2482e4650648398c1e744ca72bdc4f" translate="yes" xml:space="preserve">
          <source>The order operators work as follows. If both arguments are numbers, then they are compared according to their mathematical values (regardless of their subtypes). Otherwise, if both arguments are strings, then their values are compared according to the current locale. Otherwise, Lua tries to call the &quot;lt&quot; or the &quot;le&quot; metamethod (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;). A comparison &lt;code&gt;a &amp;gt; b&lt;/code&gt; is translated to &lt;code&gt;b &amp;lt; a&lt;/code&gt; and &lt;code&gt;a &amp;gt;= b&lt;/code&gt; is translated to &lt;code&gt;b &amp;lt;= a&lt;/code&gt;.</source>
          <target state="translated">订单操作员的工作方式如下。如果两个参数都是数字，则将根据其数学值（无论其子类型如何）对它们进行比较。否则，如果两个参数都是字符串，则将根据当前语言环境比较它们的值。否则，Lua尝试调用&amp;ldquo; lt&amp;rdquo;或&amp;ldquo; le&amp;rdquo;元方法（请参见第&lt;a href=&quot;#2.4&quot;&gt;2.4节&lt;/a&gt;）。比较 &lt;code&gt;a &amp;gt; b&lt;/code&gt; 转换为 &lt;code&gt;b &amp;lt; a&lt;/code&gt; 而 &lt;code&gt;a &amp;gt;= b&lt;/code&gt; 转换为 &lt;code&gt;b &amp;lt;= a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a0cda038c86954689aa106e41f099cb177ac64c" translate="yes" xml:space="preserve">
          <source>The package library provides basic facilities for loading modules in Lua. It exports one function directly in the global environment: &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt;. Everything else is exported in a table &lt;a id=&quot;pdf-package&quot;&gt;&lt;code&gt;package&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">软件包库提供了在Lua中加载模块的基本功能。它直接在全局环境中导出一个函数：&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;。其他所有内容都以表&lt;a id=&quot;pdf-package&quot;&gt; &lt;code&gt;package&lt;/code&gt; &lt;/a&gt;形式导出。</target>
        </trans-unit>
        <trans-unit id="31abba930e733e4da53e00b6f03a89251bd121d5" translate="yes" xml:space="preserve">
          <source>The panic function runs as if it were a message handler (see &lt;a href=&quot;#2.3&quot;&gt;&amp;sect;2.3&lt;/a&gt;); in particular, the error object is at the top of the stack. However, there is no guarantee about stack space. To push anything on the stack, the panic function must first check the available space (see &lt;a href=&quot;#4.2&quot;&gt;&amp;sect;4.2&lt;/a&gt;).</source>
          <target state="translated">panic函数就像是消息处理程序一样运行（请参见&lt;a href=&quot;#2.3&quot;&gt;&amp;sect;2.3&lt;/a&gt;）；特别是，错误对象位于堆栈的顶部。但是，不能保证堆栈空间。为了将任何东西压入堆栈，应急函数必须首先检查可用空间（请参见第&lt;a href=&quot;#4.2&quot;&gt;4.2节&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="248c6c24d6328dcec1eced4a5902bd1ca25c30a6" translate="yes" xml:space="preserve">
          <source>The panic function, as its name implies, is a mechanism of last resort. Programs should avoid it. As a general rule, when a C function is called by Lua with a Lua state, it can do whatever it wants on that Lua state, as it should be already protected. However, when C code operates on other Lua states (e.g., a Lua parameter to the function, a Lua state stored in the registry, or the result of &lt;a href=&quot;#lua_newthread&quot;&gt;&lt;code&gt;lua_newthread&lt;/code&gt;&lt;/a&gt;), it should use them only in API calls that cannot raise errors.</source>
          <target state="translated">顾名思义，应急功能是不得已的机制。程序应避免这种情况。通常，当Lua以Lua状态调用C函数时，它可以在该Lua状态上执行任何所需的操作，因为它应该已经受到保护。但是，当C代码在其他Lua状态（例如，函数的Lua参数，存储在注册表中的Lua状态或&lt;a href=&quot;#lua_newthread&quot;&gt; &lt;code&gt;lua_newthread&lt;/code&gt; &lt;/a&gt;的结果）上操作时，它应仅在不会引发错误的API调用中使用它们。</target>
        </trans-unit>
        <trans-unit id="af1c6d6c99e2e0d628fe3fc7ee1c5062d171bd6d" translate="yes" xml:space="preserve">
          <source>The parameter &lt;code&gt;f&lt;/code&gt; may also be a function. In that case, &lt;code&gt;getlocal&lt;/code&gt; returns only the name of function parameters.</source>
          <target state="translated">参数 &lt;code&gt;f&lt;/code&gt; 也可以是一个函数。在这种情况下， &lt;code&gt;getlocal&lt;/code&gt; 仅返回函数参数的名称。</target>
        </trans-unit>
        <trans-unit id="2ee0f1d943cdb63fea614a28b80243ba707db6c6" translate="yes" xml:space="preserve">
          <source>The parameter &lt;code&gt;from&lt;/code&gt; represents the coroutine that is resuming &lt;code&gt;L&lt;/code&gt;. If there is no such coroutine, this parameter can be &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">参数 &lt;code&gt;from&lt;/code&gt; 表示被恢复协程 &lt;code&gt;L&lt;/code&gt; 。如果没有这样的协程，则此参数可以为 &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="65650656d52c148c40e15fc089970d7544c3c111" translate="yes" xml:space="preserve">
          <source>The path used by &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; to search for a C loader.</source>
          <target state="translated">&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;用于搜索C加载程序的路径。</target>
        </trans-unit>
        <trans-unit id="a62c3b69148e7d0643526b28757764d931f17eab" translate="yes" xml:space="preserve">
          <source>The path used by &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; to search for a Lua loader.</source>
          <target state="translated">&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;用于搜索Lua加载程序的路径。</target>
        </trans-unit>
        <trans-unit id="c5695907c31c4cdbe5adbf65f538570d9f4bbc4f" translate="yes" xml:space="preserve">
          <source>The pattern (a string, not a function) &quot;&lt;code&gt;[\0-\x7F\xC2-\xF4][\x80-\xBF]*&lt;/code&gt;&quot; (see &lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1&lt;/a&gt;), which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.</source>
          <target state="translated">模式（一个字符串，不是一个函数）&amp;ldquo; &lt;code&gt;[\0-\x7F\xC2-\xF4][\x80-\xBF]*&lt;/code&gt; &amp;rdquo;（请参见&lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1&lt;/a&gt;），它与一个UTF-8字节序列完全匹配，假设主题是有效的UTF-8字符串。</target>
        </trans-unit>
        <trans-unit id="94196df3b0309cd7d7af8dbae4fe9b55da3dd1ee" translate="yes" xml:space="preserve">
          <source>The reader function used by &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;. Every time it needs another piece of the chunk, &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt; calls the reader, passing along its &lt;code&gt;data&lt;/code&gt; parameter. The reader must return a pointer to a block of memory with a new piece of the chunk and set &lt;code&gt;size&lt;/code&gt; to the block size. The block must exist until the reader function is called again. To signal the end of the chunk, the reader must return &lt;code&gt;NULL&lt;/code&gt; or set &lt;code&gt;size&lt;/code&gt; to zero. The reader function may return pieces of any size greater than zero.</source>
          <target state="translated">&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;使用的阅读器功能。每次需要另一个块时，&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; 都会&lt;/a&gt;调用读取器，并传递其 &lt;code&gt;data&lt;/code&gt; 参数。读取器必须使用一块新的块将指针返回到内存块，并将 &lt;code&gt;size&lt;/code&gt; 设置为块大小。该块必须存在，直到再次调用阅读器功能为止。要发信号通知块的结尾，读取器必须返回 &lt;code&gt;NULL&lt;/code&gt; 或将 &lt;code&gt;size&lt;/code&gt; 设置为零。读取器函数可以返回大于零的任何大小的片段。</target>
        </trans-unit>
        <trans-unit id="37f620be9ce9c46f8c6dc3707673277eb2ba004c" translate="yes" xml:space="preserve">
          <source>The return values of &lt;code&gt;lua_load&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;lua_load&lt;/code&gt; 的返回值为：</target>
        </trans-unit>
        <trans-unit id="2b6bd9b2d65f7c99bb3fd044a11a11e501baf7b6" translate="yes" xml:space="preserve">
          <source>The returned table can contain all the fields returned by &lt;a href=&quot;#lua_getinfo&quot;&gt;&lt;code&gt;lua_getinfo&lt;/code&gt;&lt;/a&gt;, with the string &lt;code&gt;what&lt;/code&gt; describing which fields to fill in. The default for &lt;code&gt;what&lt;/code&gt; is to get all information available, except the table of valid lines. If present, the option '&lt;code&gt;f&lt;/code&gt;' adds a field named &lt;code&gt;func&lt;/code&gt; with the function itself. If present, the option '&lt;code&gt;L&lt;/code&gt;' adds a field named &lt;code&gt;activelines&lt;/code&gt; with the table of valid lines.</source>
          <target state="translated">返回的表可以包含所有返回的字段&lt;a href=&quot;#lua_getinfo&quot;&gt; &lt;code&gt;lua_getinfo&lt;/code&gt; &lt;/a&gt;，以字符串 &lt;code&gt;what&lt;/code&gt; 说明哪些字段填写。对于默认 &lt;code&gt;what&lt;/code&gt; 是让所有可用的信息，除了有效线路表。如果存在，选项&amp;ldquo; &lt;code&gt;f&lt;/code&gt; &amp;rdquo;会在函数本身中添加一个名为 &lt;code&gt;func&lt;/code&gt; 的字段。如果存在，选项&amp;ldquo; &lt;code&gt;L&lt;/code&gt; &amp;rdquo;会在有效行表中添加一个名为 &lt;code&gt;activelines&lt;/code&gt; 的字段。</target>
        </trans-unit>
        <trans-unit id="f55f8b6574e5379a6bf6381df42f2bd48b5ec87a" translate="yes" xml:space="preserve">
          <source>The returned value is a number, whose meaning depends on your system. In POSIX, Windows, and some other systems, this number counts the number of seconds since some given start time (the &quot;epoch&quot;). In other systems, the meaning is not specified, and the number returned by &lt;code&gt;time&lt;/code&gt; can be used only as an argument to &lt;a href=&quot;#pdf-os.date&quot;&gt;&lt;code&gt;os.date&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pdf-os.difftime&quot;&gt;&lt;code&gt;os.difftime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返回值是一个数字，其含义取决于您的系统。在POSIX，Windows和某些其他系统中，此数字计算自某个给定的开始时间（&amp;ldquo;纪元&amp;rdquo;）以来的秒数。在其他系统中，未指定含义，并且 &lt;code&gt;time&lt;/code&gt; 返回的数字只能用作&lt;a href=&quot;#pdf-os.date&quot;&gt; &lt;code&gt;os.date&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#pdf-os.difftime&quot;&gt; &lt;code&gt;os.difftime&lt;/code&gt; &lt;/a&gt;的参数。</target>
        </trans-unit>
        <trans-unit id="cfbc7fd540fdc9556b78c0aa760e8e168374c2f5" translate="yes" xml:space="preserve">
          <source>The searcher for C loaders used by &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; changed the way it handles versioned names. Now, the version should come after the module name (as is usual in most other tools). For compatibility, that searcher still tries the old format if it cannot find an open function according to the new style. (Lua 5.2 already worked that way, but it did not document the change.)</source>
          <target state="translated">&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;使用的C加载程序的搜索器更改了其处理版本名称的方式。现在，版本应该在模块名称之后（与其他大多数工具一样）。为了兼容，如果该搜索器无法根据新样式找到打开的函数，则仍尝试使用旧格式。（Lua 5.2已经以这种方式工作，但是没有记录更改。）</target>
        </trans-unit>
        <trans-unit id="d15f5fb6601ee9ab09f9a53d09100cffc80fdb3d" translate="yes" xml:space="preserve">
          <source>The second line is the character that separates templates in a path. Default is '&lt;code&gt;;&lt;/code&gt;'.</source>
          <target state="translated">第二行是分隔路径中模板的字符。默认为' &lt;code&gt;;&lt;/code&gt; '。</target>
        </trans-unit>
        <trans-unit id="98a2720d48fa26f6e8827171e22966063e194996" translate="yes" xml:space="preserve">
          <source>The second searcher looks for a loader as a Lua library, using the path stored at &lt;a href=&quot;#pdf-package.path&quot;&gt;&lt;code&gt;package.path&lt;/code&gt;&lt;/a&gt;. The search is done as described in function &lt;a href=&quot;#pdf-package.searchpath&quot;&gt;&lt;code&gt;package.searchpath&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">第二个搜索者使用存储在&lt;a href=&quot;#pdf-package.path&quot;&gt; &lt;code&gt;package.path&lt;/code&gt; 中&lt;/a&gt;的路径来寻找一个装载器作为Lua库。如功能&lt;a href=&quot;#pdf-package.searchpath&quot;&gt; &lt;code&gt;package.searchpath&lt;/code&gt; 中&lt;/a&gt;所述完成搜索。</target>
        </trans-unit>
        <trans-unit id="ff10cde6ef36b0ce8ea3feff1924805fea5410a7" translate="yes" xml:space="preserve">
          <source>The sort algorithm is not stable: elements considered equal by the given order may have their relative positions changed by the sort.</source>
          <target state="translated">排序算法并不稳定:被给定顺序认为相等的元素可能会因为排序而改变其相对位置。</target>
        </trans-unit>
        <trans-unit id="5106e7eaf9b7ca3b362e6dc6b36e589c34ea6d05" translate="yes" xml:space="preserve">
          <source>The standard Lua libraries provide useful functions that are implemented directly through the C API. Some of these functions provide essential services to the language (e.g., &lt;a href=&quot;#pdf-type&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pdf-getmetatable&quot;&gt;&lt;code&gt;getmetatable&lt;/code&gt;&lt;/a&gt;); others provide access to &quot;outside&quot; services (e.g., I/O); and others could be implemented in Lua itself, but are quite useful or have critical performance requirements that deserve an implementation in C (e.g., &lt;a href=&quot;#pdf-table.sort&quot;&gt;&lt;code&gt;table.sort&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">标准的Lua库提供了直接通过C API实现的有用功能。其中一些功能为语言提供了必要的服务（例如，&lt;a href=&quot;#pdf-type&quot;&gt; &lt;code&gt;type&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#pdf-getmetatable&quot;&gt; &lt;code&gt;getmetatable&lt;/code&gt; &lt;/a&gt;）；其他提供对&amp;ldquo;外部&amp;rdquo;服务（例如I / O）的访问；其他的可以在Lua本身中实现，但是它们非常有用，或者具有关键的性能要求，值得在C中实现（例如&lt;a href=&quot;#pdf-table.sort&quot;&gt; &lt;code&gt;table.sort&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="f42f392bd799378902334c3d54a3414a4cf4d102" translate="yes" xml:space="preserve">
          <source>The standard paths in the official distribution may change between versions.</source>
          <target state="translated">官方发行版中的标准路径可能会在不同版本之间发生变化。</target>
        </trans-unit>
        <trans-unit id="bb7020ccdbf4af39d9ada89f1f68b18c849ca42e" translate="yes" xml:space="preserve">
          <source>The standard representation for file handles, which is used by the standard I/O library.</source>
          <target state="translated">文件句柄的标准表示法,由标准I/O库使用。</target>
        </trans-unit>
        <trans-unit id="9fd3499f821fa1f3548e8129d6b35f2161cdaff1" translate="yes" xml:space="preserve">
          <source>The statement</source>
          <target state="translated">该声明</target>
        </trans-unit>
        <trans-unit id="b51c68cae2ce99f1a793fe977a6ed087cdabd1ba" translate="yes" xml:space="preserve">
          <source>The status can be 0 (&lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt;) for a normal thread, an error code if the thread finished the execution of a &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt; with an error, or &lt;a id=&quot;pdf-LUA_YIELD&quot;&gt;&lt;code&gt;LUA_YIELD&lt;/code&gt;&lt;/a&gt; if the thread is suspended.</source>
          <target state="translated">对于正常线程，状态可以为0（&lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; &lt;/a&gt;），如果线程以错误结束了&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt;的执行，则状态为错误代码；如果线程被挂起，则状态为&lt;a id=&quot;pdf-LUA_YIELD&quot;&gt; &lt;code&gt;LUA_YIELD&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6107c417c0095d03331e66cca35b7fc41f404ee" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;mode&lt;/code&gt; controls whether the chunk can be text or binary (that is, a precompiled chunk). It may be the string &quot;&lt;code&gt;b&lt;/code&gt;&quot; (only binary chunks), &quot;&lt;code&gt;t&lt;/code&gt;&quot; (only text chunks), or &quot;&lt;code&gt;bt&lt;/code&gt;&quot; (both binary and text). The default is &quot;&lt;code&gt;bt&lt;/code&gt;&quot;.</source>
          <target state="translated">字符串 &lt;code&gt;mode&lt;/code&gt; 控制块可以是文本还是二进制（即，预编译的块）。它可以是字符串&amp;ldquo; &lt;code&gt;b&lt;/code&gt; &amp;rdquo;（仅二进制块），&amp;ldquo; &lt;code&gt;t&lt;/code&gt; &amp;rdquo;（仅文本块）或&amp;ldquo; &lt;code&gt;bt&lt;/code&gt; &amp;rdquo;（二进制和文本）。默认值为&amp;ldquo; &lt;code&gt;bt&lt;/code&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="eb61b3491c7ef29459d2f5f3b4868e8b5f23f56b" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;mode&lt;/code&gt; works as in function &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">字符串 &lt;code&gt;mode&lt;/code&gt; 工作方式与&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;函数相同。</target>
        </trans-unit>
        <trans-unit id="8627952ee0ea9e9e84752d1eff85ae25a6b8cff5" translate="yes" xml:space="preserve">
          <source>The string concatenation operator in Lua is denoted by two dots ('&lt;code&gt;..&lt;/code&gt;'). If both operands are strings or numbers, then they are converted to strings according to the rules described in &lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3&lt;/a&gt;. Otherwise, the &lt;code&gt;__concat&lt;/code&gt; metamethod is called (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">Lua中的字符串连接运算符由两个点（' &lt;code&gt;..&lt;/code&gt; '）表示。如果两个操作数都是字符串或数字，则根据&lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3中&lt;/a&gt;描述的规则将它们转换为字符串。否则，将 &lt;code&gt;__concat&lt;/code&gt; __concat元方法（请参见第&lt;a href=&quot;#2.4&quot;&gt;2.4节&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="9045fd903c161a4ac7a29583b9b8dcf0e5541479" translate="yes" xml:space="preserve">
          <source>The string library assumes one-byte character encodings.</source>
          <target state="translated">字符串库假定为一字节字符编码。</target>
        </trans-unit>
        <trans-unit id="b2b7ec0f9126a815843a8b6eedc7a7a4064d3eb8" translate="yes" xml:space="preserve">
          <source>The string library provides all its functions inside the table &lt;a id=&quot;pdf-string&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/a&gt;. It also sets a metatable for strings where the &lt;code&gt;__index&lt;/code&gt; field points to the &lt;code&gt;string&lt;/code&gt; table. Therefore, you can use the string functions in object-oriented style. For instance, &lt;code&gt;string.byte(s,i)&lt;/code&gt; can be written as &lt;code&gt;s:byte(i)&lt;/code&gt;.</source>
          <target state="translated">字符串库在表&lt;a id=&quot;pdf-string&quot;&gt; &lt;code&gt;string&lt;/code&gt; &lt;/a&gt;提供了其所有功能。它还会为 &lt;code&gt;__index&lt;/code&gt; 字段指向 &lt;code&gt;string&lt;/code&gt; 表的字符串设置一个元表。因此，您可以使用面向对象样式的字符串函数。例如， &lt;code&gt;string.byte(s,i)&lt;/code&gt; 可以写为 &lt;code&gt;s:byte(i)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="10a50517543fae51ebb08fb2ec16c2bc73963b6e" translate="yes" xml:space="preserve">
          <source>The syntax &lt;code&gt;var.Name&lt;/code&gt; is just syntactic sugar for &lt;code&gt;var[&quot;Name&quot;]&lt;/code&gt;:</source>
          <target state="translated">语法 &lt;code&gt;var.Name&lt;/code&gt; 只是 &lt;code&gt;var[&quot;Name&quot;]&lt;/code&gt; 语法糖：</target>
        </trans-unit>
        <trans-unit id="050ff8b5782f01590c86d4091d6bf58f847c8377" translate="yes" xml:space="preserve">
          <source>The syntax for function definition is</source>
          <target state="translated">函数定义的语法是</target>
        </trans-unit>
        <trans-unit id="632eb45dbc253afb0e4d9a6d182579e0f0a1fc32" translate="yes" xml:space="preserve">
          <source>The table &lt;code&gt;io&lt;/code&gt; also provides three predefined file handles with their usual meanings from C: &lt;a id=&quot;pdf-io.stdin&quot;&gt;&lt;code&gt;io.stdin&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-io.stdout&quot;&gt;&lt;code&gt;io.stdout&lt;/code&gt;&lt;/a&gt;, and &lt;a id=&quot;pdf-io.stderr&quot;&gt;&lt;code&gt;io.stderr&lt;/code&gt;&lt;/a&gt;. The I/O library never closes these files.</source>
          <target state="translated">表 &lt;code&gt;io&lt;/code&gt; 还提供了三个预定义的文件句柄，它们具有C的通常含义：&lt;a id=&quot;pdf-io.stdin&quot;&gt; &lt;code&gt;io.stdin&lt;/code&gt; &lt;/a&gt;，&lt;a id=&quot;pdf-io.stdout&quot;&gt; &lt;code&gt;io.stdout&lt;/code&gt; &lt;/a&gt;和&lt;a id=&quot;pdf-io.stderr&quot;&gt; &lt;code&gt;io.stderr&lt;/code&gt; &lt;/a&gt;。I / O库从不关闭这些文件。</target>
        </trans-unit>
        <trans-unit id="a5bb6863eedf039eb3411f3dbe0637455e54c4cb" translate="yes" xml:space="preserve">
          <source>The third line is the string that marks the substitution points in a template. Default is '&lt;code&gt;?&lt;/code&gt;'.</source>
          <target state="translated">第三行是标记模板中替换点的字符串。默认值为' &lt;code&gt;?&lt;/code&gt; '。</target>
        </trans-unit>
        <trans-unit id="2123107d9c2b8fa74113fcb8969ea618ea87943f" translate="yes" xml:space="preserve">
          <source>The third searcher looks for a loader as a C library, using the path given by the variable &lt;a href=&quot;#pdf-package.cpath&quot;&gt;&lt;code&gt;package.cpath&lt;/code&gt;&lt;/a&gt;. Again, the search is done as described in function &lt;a href=&quot;#pdf-package.searchpath&quot;&gt;&lt;code&gt;package.searchpath&lt;/code&gt;&lt;/a&gt;. For instance, if the C path is the string</source>
          <target state="translated">第三个搜索器使用变量&lt;a href=&quot;#pdf-package.cpath&quot;&gt; &lt;code&gt;package.cpath&lt;/code&gt; &lt;/a&gt;给出的路径将装载程序作为C库进行查找。同样，按照功能&lt;a href=&quot;#pdf-package.searchpath&quot;&gt; &lt;code&gt;package.searchpath&lt;/code&gt; 中的&lt;/a&gt;描述进行搜索。例如，如果C路径是字符串</target>
        </trans-unit>
        <trans-unit id="8accc1fdc3658380909273543cc837dcd9d22775" translate="yes" xml:space="preserve">
          <source>The type &lt;em&gt;number&lt;/em&gt; uses two internal representations, or two subtypes, one called &lt;em&gt;integer&lt;/em&gt; and the other called &lt;em&gt;float&lt;/em&gt;. Lua has explicit rules about when each representation is used, but it also converts between them automatically as needed (see &lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3&lt;/a&gt;). Therefore, the programmer may choose to mostly ignore the difference between integers and floats or to assume complete control over the representation of each number. Standard Lua uses 64-bit integers and double-precision (64-bit) floats, but you can also compile Lua so that it uses 32-bit integers and/or single-precision (32-bit) floats. The option with 32 bits for both integers and floats is particularly attractive for small machines and embedded systems. (See macro &lt;code&gt;LUA_32BITS&lt;/code&gt; in file &lt;code&gt;luaconf.h&lt;/code&gt;.)</source>
          <target state="translated">类型&lt;em&gt;号&lt;/em&gt;使用两个内部表示形式或两个子类型，一个称为&lt;em&gt;整数&lt;/em&gt;，另一个称为&lt;em&gt;float&lt;/em&gt;。 Lua有关于何时使用每种表示形式的明确规则，但是它也会根据需要在它们之间自动转换（请参见第&lt;a href=&quot;#3.4.3&quot;&gt;3.4.3节&lt;/a&gt;）。因此，程序员可以选择忽略整数和浮点数之间的差异，或者选择完全控制每个数字的表示形式。标准Lua使用64位整数和双精度（64位）浮点数，但您也可以编译Lua，使其使用32位整数和/或单精度（32位）浮点数。具有32位整数和浮点数的选项对于小型机器和嵌入式系统特别有吸引力。 （请参见宏 &lt;code&gt;LUA_32BITS&lt;/code&gt; 文件中的 &lt;code&gt;luaconf.h&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="afb6b5b3a4f6e457499e2efa89d3127e8a5239e3" translate="yes" xml:space="preserve">
          <source>The type &lt;em&gt;table&lt;/em&gt; implements associative arrays, that is, arrays that can be indexed not only with numbers, but with any Lua value except &lt;b&gt;nil&lt;/b&gt; and NaN. (&lt;em&gt;Not a Number&lt;/em&gt; is a special value used to represent undefined or unrepresentable numerical results, such as &lt;code&gt;0/0&lt;/code&gt;.) Tables can be &lt;em&gt;heterogeneous&lt;/em&gt;; that is, they can contain values of all types (except &lt;b&gt;nil&lt;/b&gt;). Any key with value &lt;b&gt;nil&lt;/b&gt; is not considered part of the table. Conversely, any key that is not part of a table has an associated value &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">类型&lt;em&gt;表&lt;/em&gt;实现关联数组，即，不仅可以使用数字索引，而且可以使用除&lt;b&gt;nil&lt;/b&gt;和NaN 之外的任何Lua值索引的数组。（&amp;ldquo; &lt;em&gt;非数字&amp;rdquo;&lt;/em&gt;是用于表示未定义或无法表示的数值结果的特殊值，例如 &lt;code&gt;0/0&lt;/code&gt; 。）表可以是&lt;em&gt;异构的&lt;/em&gt;；也就是说，它们可以包含所有类型的值（&lt;b&gt;nil&lt;/b&gt;除外）。任何值为&lt;b&gt;nil的&lt;/b&gt;键均不视为表的一部分。相反，任何不属于表的键都具有关联值&lt;b&gt;nil&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="4d9440269930bed052fd86cfbac01a1a963271db" translate="yes" xml:space="preserve">
          <source>The type &lt;em&gt;thread&lt;/em&gt; represents independent threads of execution and it is used to implement coroutines (see &lt;a href=&quot;#2.6&quot;&gt;&amp;sect;2.6&lt;/a&gt;). Lua threads are not related to operating-system threads. Lua supports coroutines on all systems, even those that do not support threads natively.</source>
          <target state="translated">类型&lt;em&gt;线程&lt;/em&gt;表示独立的执行线程，它用于实现协程（请参见&lt;a href=&quot;#2.6&quot;&gt;2.6节&lt;/a&gt;）。 Lua线程与操作系统线程无关。 Lua在所有系统上都支持协程，即使那些本机不支持线程的协程也是如此。</target>
        </trans-unit>
        <trans-unit id="549971961a231ddc4a1edb8a913953e6d0ac1c5d" translate="yes" xml:space="preserve">
          <source>The type &lt;em&gt;userdata&lt;/em&gt; is provided to allow arbitrary C data to be stored in Lua variables. A userdata value represents a block of raw memory. There are two kinds of userdata: &lt;em&gt;full userdata&lt;/em&gt;, which is an object with a block of memory managed by Lua, and &lt;em&gt;light userdata&lt;/em&gt;, which is simply a C pointer value. Userdata has no predefined operations in Lua, except assignment and identity test. By using &lt;em&gt;metatables&lt;/em&gt;, the programmer can define operations for full userdata values (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;). Userdata values cannot be created or modified in Lua, only through the C API. This guarantees the integrity of data owned by the host program.</source>
          <target state="translated">提供了&lt;em&gt;userdata&lt;/em&gt;类型，以允许将任意C数据存储在Lua变量中。 userdata值表示原始内存块。用户数据有两种：&lt;em&gt;完全用户数据&lt;/em&gt;（这是一个由Lua管理的具有一块内存的对象）和&lt;em&gt;轻用户数据&lt;/em&gt;（它只是一个C指针值）。除了赋值和身份测试外，Userdata在Lua中没有预定义的操作。通过使用&lt;em&gt;元表&lt;/em&gt;，程序员可以为完整的userdata值定义操作（请参见第&lt;a href=&quot;#2.4&quot;&gt;2.4节&lt;/a&gt;）。只能通过C API在Lua中无法创建或修改Userdata值。这保证了主机程序拥有的数据的完整性。</target>
        </trans-unit>
        <trans-unit id="cb2dae663cd0b88537f77f62b52ecd0fdceb5eb7" translate="yes" xml:space="preserve">
          <source>The type for continuation-function contexts. It must be a numeric type. This type is defined as &lt;code&gt;intptr_t&lt;/code&gt; when &lt;code&gt;intptr_t&lt;/code&gt; is available, so that it can store pointers too. Otherwise, it is defined as &lt;code&gt;ptrdiff_t&lt;/code&gt;.</source>
          <target state="translated">延续功能上下文的类型。它必须是数字类型。当 &lt;code&gt;intptr_t&lt;/code&gt; 可用时，此类型定义为 &lt;code&gt;intptr_t&lt;/code&gt; ，以便它也可以存储指针。否则，将其定义为 &lt;code&gt;ptrdiff_t&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b81ea3cf634f923ceea25ead913b80cfce712bbf" translate="yes" xml:space="preserve">
          <source>The type of floats in Lua.</source>
          <target state="translated">Lua中的浮动类型。</target>
        </trans-unit>
        <trans-unit id="7bd0bf99561dfbd918dc1bdb99594d59c184307f" translate="yes" xml:space="preserve">
          <source>The type of integers in Lua.</source>
          <target state="translated">Lua中的整数类型。</target>
        </trans-unit>
        <trans-unit id="f3373938fcc3069867ceda08c5889260b4eb48bd" translate="yes" xml:space="preserve">
          <source>The type of the memory-allocation function used by Lua states. The allocator function must provide a functionality similar to &lt;code&gt;realloc&lt;/code&gt;, but not exactly the same. Its arguments are &lt;code&gt;ud&lt;/code&gt;, an opaque pointer passed to &lt;a href=&quot;#lua_newstate&quot;&gt;&lt;code&gt;lua_newstate&lt;/code&gt;&lt;/a&gt;; &lt;code&gt;ptr&lt;/code&gt;, a pointer to the block being allocated/reallocated/freed; &lt;code&gt;osize&lt;/code&gt;, the original size of the block or some code about what is being allocated; and &lt;code&gt;nsize&lt;/code&gt;, the new size of the block.</source>
          <target state="translated">Lua状态使用的内存分配函数的类型。分配器功能必须提供类似于 &lt;code&gt;realloc&lt;/code&gt; 的功能，但不完全相同。它的参数是 &lt;code&gt;ud&lt;/code&gt; ，它是传递给&lt;a href=&quot;#lua_newstate&quot;&gt; &lt;code&gt;lua_newstate&lt;/code&gt; &lt;/a&gt;的不透明指针； &lt;code&gt;ptr&lt;/code&gt; ，指向要分配/重新分配/释放的块的指针； &lt;code&gt;osize&lt;/code&gt; ，块的原始大小或有关正在分配的内容的一些代码；和 &lt;code&gt;nsize&lt;/code&gt; ，块的新大小。</target>
        </trans-unit>
        <trans-unit id="ea2467b4ef42d2fed95d1a97e4a127587c63bf40" translate="yes" xml:space="preserve">
          <source>The type of the writer function used by &lt;a href=&quot;#lua_dump&quot;&gt;&lt;code&gt;lua_dump&lt;/code&gt;&lt;/a&gt;. Every time it produces another piece of chunk, &lt;a href=&quot;#lua_dump&quot;&gt;&lt;code&gt;lua_dump&lt;/code&gt;&lt;/a&gt; calls the writer, passing along the buffer to be written (&lt;code&gt;p&lt;/code&gt;), its size (&lt;code&gt;sz&lt;/code&gt;), and the &lt;code&gt;data&lt;/code&gt; parameter supplied to &lt;a href=&quot;#lua_dump&quot;&gt;&lt;code&gt;lua_dump&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#lua_dump&quot;&gt; &lt;code&gt;lua_dump&lt;/code&gt; &lt;/a&gt;使用的writer函数的类型。每次生成另一个块时，&lt;a href=&quot;#lua_dump&quot;&gt; &lt;code&gt;lua_dump&lt;/code&gt; 都会&lt;/a&gt;调用writer，并传递要写入的缓冲区（ &lt;code&gt;p&lt;/code&gt; ），其大小（ &lt;code&gt;sz&lt;/code&gt; ）和提供给&lt;a href=&quot;#lua_dump&quot;&gt; &lt;code&gt;lua_dump&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;data&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="979b7ad2557665ac8c789bc0692eee0412bef53c" translate="yes" xml:space="preserve">
          <source>The unit of compilation of Lua is called a &lt;em&gt;chunk&lt;/em&gt;. Syntactically, a chunk is simply a block:</source>
          <target state="translated">Lua的编译单元称为&lt;em&gt;块&lt;/em&gt;。从句法上讲，块只是一个块：</target>
        </trans-unit>
        <trans-unit id="1fd90de9694cbc90328b75bdffaf97623ca0a9b7" translate="yes" xml:space="preserve">
          <source>The unsigned version of &lt;a href=&quot;#lua_Integer&quot;&gt;&lt;code&gt;lua_Integer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#lua_Integer&quot;&gt; &lt;code&gt;lua_Integer&lt;/code&gt; &lt;/a&gt;的无符号版本。</target>
        </trans-unit>
        <trans-unit id="ea5edb4c646d2befa84cf3aa4de94da00e72b361" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;op&lt;/code&gt; must be one of the following constants:</source>
          <target state="translated">&lt;code&gt;op&lt;/code&gt; 的值必须是以下常量之一：</target>
        </trans-unit>
        <trans-unit id="afade59d4e86a697bf216612fdf19b790b49ed5e" translate="yes" xml:space="preserve">
          <source>The value of &lt;em&gt;&amp;pi;&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;&amp;pi;&lt;/em&gt;的值。</target>
        </trans-unit>
        <trans-unit id="9dc3bab908539601286c9612ae1893b48ba8219b" translate="yes" xml:space="preserve">
          <source>The value returned is the error code returned by the last call to the writer; 0 means no errors.</source>
          <target state="translated">返回的值是上次调用写入器时返回的错误代码,0表示没有错误。</target>
        </trans-unit>
        <trans-unit id="112b2baa6655f11d826fd17791c335badbd32d34" translate="yes" xml:space="preserve">
          <source>The values in these fields do not need to be inside their valid ranges. For instance, if &lt;code&gt;sec&lt;/code&gt; is -10, it means -10 seconds from the time specified by the other fields; if &lt;code&gt;hour&lt;/code&gt; is 1000, it means +1000 hours from the time specified by the other fields.</source>
          <target state="translated">这些字段中的值不必在其有效范围内。例如，如果 &lt;code&gt;sec&lt;/code&gt; 为-10，则表示从其他字段指定的时间开始为-10秒；如果 &lt;code&gt;hour&lt;/code&gt; 是1000，则表示从其他字段指定的时间开始+1000小时。</target>
        </trans-unit>
        <trans-unit id="a99a66eb862f6556290fc79e5e1c7450f919252a" translate="yes" xml:space="preserve">
          <source>The visibility rules for local variables are explained in &lt;a href=&quot;#3.5&quot;&gt;&amp;sect;3.5&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#3.5&quot;&gt;&amp;sect;3.5&lt;/a&gt;中解释了局部变量的可见性规则。</target>
        </trans-unit>
        <trans-unit id="1638bbae2e91cad1bcbf2314b579efab5e69fee7" translate="yes" xml:space="preserve">
          <source>The writer returns an error code: 0 means no errors; any other value means an error and stops &lt;a href=&quot;#lua_dump&quot;&gt;&lt;code&gt;lua_dump&lt;/code&gt;&lt;/a&gt; from calling the writer again.</source>
          <target state="translated">编写器返回错误代码：0表示没有错误；其他任何值均表示错误，并阻止&lt;a href=&quot;#lua_dump&quot;&gt; &lt;code&gt;lua_dump&lt;/code&gt; &lt;/a&gt;再次调用writer。</target>
        </trans-unit>
        <trans-unit id="e53998e37ed2ba9b38d4b4c370361cd1f8e85f86" translate="yes" xml:space="preserve">
          <source>Then add string pieces to the buffer calling any of the &lt;code&gt;luaL_add*&lt;/code&gt; functions.</source>
          <target state="translated">然后将字符串添加到调用 &lt;code&gt;luaL_add*&lt;/code&gt; 函数的缓冲区中。</target>
        </trans-unit>
        <trans-unit id="58d5ea479608da6d358fd4117e4c1650306f8953" translate="yes" xml:space="preserve">
          <source>Then copy the string into that space.</source>
          <target state="translated">然后将该字符串复制到该空格中。</target>
        </trans-unit>
        <trans-unit id="c38aad0ad68cbec114bc022549a75392e5ff942b" translate="yes" xml:space="preserve">
          <source>Then initialize it and preallocate a space of size &lt;code&gt;sz&lt;/code&gt; with a call &lt;code&gt;luaL_buffinitsize(L, &amp;amp;b, sz)&lt;/code&gt;.</source>
          <target state="translated">然后对其进行初始化，并通过调用 &lt;code&gt;luaL_buffinitsize(L, &amp;amp;b, sz)&lt;/code&gt; 预分配大小为 &lt;code&gt;sz&lt;/code&gt; 的空间。</target>
        </trans-unit>
        <trans-unit id="7fde5c748e0c5d875fb24467538da27e6356bfa2" translate="yes" xml:space="preserve">
          <source>Then initialize it with a call &lt;code&gt;luaL_buffinit(L, &amp;amp;b)&lt;/code&gt;.</source>
          <target state="translated">然后通过调用 &lt;code&gt;luaL_buffinit(L, &amp;amp;b)&lt;/code&gt; 对其进行初始化。</target>
        </trans-unit>
        <trans-unit id="7c089f6502b4ba313710d9bbf20645416ed3a409" translate="yes" xml:space="preserve">
          <source>Then, we have the following mapping from arguments to parameters and to the vararg expression:</source>
          <target state="translated">然后,我们有以下从参数到参数以及到vararg表达式的映射。</target>
        </trans-unit>
        <trans-unit id="08f15568d44d3dd2fb189f12b0a139775af30148" translate="yes" xml:space="preserve">
          <source>There are eight basic types in Lua: &lt;em&gt;nil&lt;/em&gt;, &lt;em&gt;boolean&lt;/em&gt;, &lt;em&gt;number&lt;/em&gt;, &lt;em&gt;string&lt;/em&gt;, &lt;em&gt;function&lt;/em&gt;, &lt;em&gt;userdata&lt;/em&gt;, &lt;em&gt;thread&lt;/em&gt;, and &lt;em&gt;table&lt;/em&gt;. The type &lt;em&gt;nil&lt;/em&gt; has one single value, &lt;b&gt;nil&lt;/b&gt;, whose main property is to be different from any other value; it usually represents the absence of a useful value. The type &lt;em&gt;boolean&lt;/em&gt; has two values, &lt;b&gt;false&lt;/b&gt; and &lt;b&gt;true&lt;/b&gt;. Both &lt;b&gt;nil&lt;/b&gt; and &lt;b&gt;false&lt;/b&gt; make a condition false; any other value makes it true. The type &lt;em&gt;number&lt;/em&gt; represents both integer numbers and real (floating-point) numbers. The type &lt;em&gt;string&lt;/em&gt; represents immutable sequences of bytes. Lua is 8-bit clean: strings can contain any 8-bit value, including embedded zeros ('&lt;code&gt;\0&lt;/code&gt;'). Lua is also encoding-agnostic; it makes no assumptions about the contents of a string.</source>
          <target state="translated">Lua中有八种基本类型：&lt;em&gt;nil&lt;/em&gt;，&lt;em&gt;boolean&lt;/em&gt;，&lt;em&gt;number&lt;/em&gt;，&lt;em&gt;string&lt;/em&gt;，&lt;em&gt;function&lt;/em&gt;，&lt;em&gt;userdata&lt;/em&gt;，&lt;em&gt;thread&lt;/em&gt;和&lt;em&gt;table&lt;/em&gt;。类型&lt;em&gt;nil&lt;/em&gt;有一个单一值&lt;b&gt;nil&lt;/b&gt;，其主要属性将不同于任何其他值。它通常表示没有有用的值。&lt;em&gt;布尔&lt;/em&gt;类型具有两个值&lt;b&gt;false&lt;/b&gt;和&lt;b&gt;true&lt;/b&gt;。两个&lt;b&gt;零&lt;/b&gt;和&lt;b&gt;假&lt;/b&gt;赚了条件为假;任何其他值均使其成立。该类型的&lt;em&gt;号码&lt;/em&gt;代表整数和实数（浮点数）。类型&lt;em&gt;字符串&lt;/em&gt;表示字节的不可变序列。Lua是8位纯净的：字符串可以包含任何8位值，包括嵌入的零（' &lt;code&gt;\0&lt;/code&gt; '）。Lua也与编码无关。它不对字符串的内容做任何假设。</target>
        </trans-unit>
        <trans-unit id="7846fd1d69e8fc588a803bcf086d6b71c1b7e6c8" translate="yes" xml:space="preserve">
          <source>There is a system-dependent limit on the number of values that a function may return. This limit is guaranteed to be larger than 1000.</source>
          <target state="translated">一个函数可以返回的值的数量是有系统限制的。这个限制保证大于1000。</target>
        </trans-unit>
        <trans-unit id="190864f70f817fcefb7920da72729737abc80388" translate="yes" xml:space="preserve">
          <source>There is no explicit function to close or to destroy a thread. Threads are subject to garbage collection, like any Lua object.</source>
          <target state="translated">没有显式函数来关闭或销毁线程。线程和任何Lua对象一样,都要进行垃圾收集。</target>
        </trans-unit>
        <trans-unit id="33a5b691e1bbd0d76427c85690ea834884923c9e" translate="yes" xml:space="preserve">
          <source>These operators always result in &lt;b&gt;false&lt;/b&gt; or &lt;b&gt;true&lt;/b&gt;.</source>
          <target state="translated">这些运算符总是导致&lt;b&gt;false&lt;/b&gt;或&lt;b&gt;true&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="23af1fc0e094c2dd4a126a0afba341a0993ddceb" translate="yes" xml:space="preserve">
          <source>These unique identifiers allow a program to check whether different closures share upvalues. Lua closures that share an upvalue (that is, that access a same external local variable) will return identical ids for those upvalue indices.</source>
          <target state="translated">这些唯一的标识符允许程序检查不同的闭包是否共享upvalue。Lua闭包如果共享一个upvalue(即访问同一个外部局部变量),将为这些upvalue指数返回相同的id。</target>
        </trans-unit>
        <trans-unit id="fcf0ac285f24f41a8021faef38d1d581f4af95ef" translate="yes" xml:space="preserve">
          <source>This function allocates a new block of memory with the given size, pushes onto the stack a new full userdata with the block address, and returns this address. The host program can freely use this memory.</source>
          <target state="translated">该函数分配一个新的给定大小的内存块,将一个新的带有块地址的完整用户数据推送到堆栈上,并返回这个地址。主机程序可以自由使用这个内存。</target>
        </trans-unit>
        <trans-unit id="02ee19d0f7467cfbd14cfa290c226be8222d4802" translate="yes" xml:space="preserve">
          <source>This function assigns the value &lt;code&gt;value&lt;/code&gt; to the local variable with index &lt;code&gt;local&lt;/code&gt; of the function at level &lt;code&gt;level&lt;/code&gt; of the stack. The function returns &lt;b&gt;nil&lt;/b&gt; if there is no local variable with the given index, and raises an error when called with a &lt;code&gt;level&lt;/code&gt; out of range. (You can call &lt;code&gt;getinfo&lt;/code&gt; to check whether the level is valid.) Otherwise, it returns the name of the local variable.</source>
          <target state="translated">此函数将值的 &lt;code&gt;value&lt;/code&gt; 分配给在堆栈级别 &lt;code&gt;level&lt;/code&gt; 具有函数索引 &lt;code&gt;local&lt;/code&gt; 的局部变量。如果没有给定索引的局部变量，该函数将返回&lt;b&gt;nil&lt;/b&gt;，并且在 &lt;code&gt;level&lt;/code&gt; 超出范围的情况下调用时会引发错误。（您可以调用 &lt;code&gt;getinfo&lt;/code&gt; 来检查级别是否有效。）否则，它将返回局部变量的名称。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="b7496e2514cb1dfc80c2cf0b9e57db48fa2c53f8" translate="yes" xml:space="preserve">
          <source>This function assigns the value &lt;code&gt;value&lt;/code&gt; to the upvalue with index &lt;code&gt;up&lt;/code&gt; of the function &lt;code&gt;f&lt;/code&gt;. The function returns &lt;b&gt;nil&lt;/b&gt; if there is no upvalue with the given index. Otherwise, it returns the name of the upvalue.</source>
          <target state="translated">此函数分配值 &lt;code&gt;value&lt;/code&gt; 给的upvalue与索引 &lt;code&gt;up&lt;/code&gt; 的功能的 &lt;code&gt;f&lt;/code&gt; 。如果给定索引没有升值，则该函数返回&lt;b&gt;nil&lt;/b&gt;。否则，它返回升值的名称。</target>
        </trans-unit>
        <trans-unit id="ca95f2234def804d470e8cb89141fa32f72381d2" translate="yes" xml:space="preserve">
          <source>This function assumes that &lt;code&gt;s&lt;/code&gt; is a valid UTF-8 string.</source>
          <target state="translated">此函数假定 &lt;code&gt;s&lt;/code&gt; 是有效的UTF-8字符串。</target>
        </trans-unit>
        <trans-unit id="580c46d5d2b043293bd752a3640317342ee77988" translate="yes" xml:space="preserve">
          <source>This function behaves exactly like &lt;a href=&quot;#lua_call&quot;&gt;&lt;code&gt;lua_call&lt;/code&gt;&lt;/a&gt;, but allows the called function to yield (see &lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;).</source>
          <target state="translated">此函数的行为与&lt;a href=&quot;#lua_call&quot;&gt; &lt;code&gt;lua_call&lt;/code&gt; &lt;/a&gt;完全相同，但允许被调用函数屈服（请参见&lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="228ffaca57d64d62cbfa46f275e2308925e5e66b" translate="yes" xml:space="preserve">
          <source>This function behaves exactly like &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt;, but allows the called function to yield (see &lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;).</source>
          <target state="translated">此函数的行为与&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;完全相同，但允许被调用的函数产生（请参见&lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="1bff58bee943ec12e3d7290610d93d1b1f73d8e7" translate="yes" xml:space="preserve">
          <source>This function can raise an error if it is called from a thread with a pending C call with no continuation function, or it is called from a thread that is not running inside a resume (e.g., the main thread).</source>
          <target state="translated">如果从一个没有延续函数的待定C调用的线程中调用这个函数,或者从一个没有在resume内运行的线程(例如主线程)中调用这个函数,会引发错误。</target>
        </trans-unit>
        <trans-unit id="54be94a59f0bc6784fed88d3a32e726d290eea51" translate="yes" xml:space="preserve">
          <source>This function does not pop the Lua function from the stack.</source>
          <target state="translated">这个函数不会从堆栈中弹出Lua函数。</target>
        </trans-unit>
        <trans-unit id="b380c64bb33a1e7916dc907712574229b22846ec" translate="yes" xml:space="preserve">
          <source>This function fills parts of a &lt;a href=&quot;#lua_Debug&quot;&gt;&lt;code&gt;lua_Debug&lt;/code&gt;&lt;/a&gt; structure with an identification of the &lt;em&gt;activation record&lt;/em&gt; of the function executing at a given level. Level 0 is the current running function, whereas level &lt;em&gt;n+1&lt;/em&gt; is the function that has called level &lt;em&gt;n&lt;/em&gt; (except for tail calls, which do not count on the stack). When there are no errors, &lt;a href=&quot;#lua_getstack&quot;&gt;&lt;code&gt;lua_getstack&lt;/code&gt;&lt;/a&gt; returns 1; when called with a level greater than the stack depth, it returns 0.</source>
          <target state="translated">该函数用在给定级别执行的函数的&lt;em&gt;激活记录&lt;/em&gt;的标识来填充&lt;a href=&quot;#lua_Debug&quot;&gt; &lt;code&gt;lua_Debug&lt;/code&gt; &lt;/a&gt;结构的各个部分。级别0是当前正在运行的函数，而级别&lt;em&gt;n + 1&lt;/em&gt;是已调用级别&lt;em&gt;n&lt;/em&gt;的函数（尾部调用除外，该调用不计入堆栈）。如果没有错误，则&lt;a href=&quot;#lua_getstack&quot;&gt; &lt;code&gt;lua_getstack&lt;/code&gt; &lt;/a&gt;返回1；否则，返回0。当调用的级别大于堆栈深度时，它将返回0。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="95f4de101d63040fc5211037c7343d4c56e0ad01" translate="yes" xml:space="preserve">
          <source>This function is a generic interface to the garbage collector. It performs different functions according to its first argument, &lt;code&gt;opt&lt;/code&gt;:</source>
          <target state="translated">此函数是垃圾回收器的通用接口。它根据第一个参数 &lt;code&gt;opt&lt;/code&gt; 执行不同的功能：</target>
        </trans-unit>
        <trans-unit id="d28a53b3b111db987336d2926f880313a09864bb" translate="yes" xml:space="preserve">
          <source>This function is an interface to the underling pseudo-random generator function provided by C.</source>
          <target state="translated">这个函数是C语言提供的下位伪随机发生器函数的接口。</target>
        </trans-unit>
        <trans-unit id="f98115d2ab8e4d7be0cefa4bae9be552429cd8c3" translate="yes" xml:space="preserve">
          <source>This function is equivalent to &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt;, but it has no continuation (see &lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;). Therefore, when the thread resumes, it continues the function that called the function calling &lt;code&gt;lua_yield&lt;/code&gt;.</source>
          <target state="translated">此函数等效于&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; &lt;/a&gt;，但没有延续（请参见&lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;）。因此，当线程恢复时，它将继续执行调用 &lt;code&gt;lua_yield&lt;/code&gt; 函数的函数。</target>
        </trans-unit>
        <trans-unit id="670f5f1a9510a05d3452d6c53437d60b035753b4" translate="yes" xml:space="preserve">
          <source>This function is equivalent to the ISO C function &lt;code&gt;system&lt;/code&gt;. It passes &lt;code&gt;command&lt;/code&gt; to be executed by an operating system shell. Its first result is &lt;b&gt;true&lt;/b&gt; if the command terminated successfully, or &lt;b&gt;nil&lt;/b&gt; otherwise. After this first result the function returns a string plus a number, as follows:</source>
          <target state="translated">此功能等效于ISO C功能 &lt;code&gt;system&lt;/code&gt; 。它传递要由操作系统外壳执行的 &lt;code&gt;command&lt;/code&gt; 。如果命令成功终止，则其第一个结果为&lt;b&gt;true&lt;/b&gt;，否则为&lt;b&gt;nil&lt;/b&gt;。在第一个结果之后，该函数将返回一个字符串和一个数字，如下所示：</target>
        </trans-unit>
        <trans-unit id="e1a39cb0734d0402904008bd0b6e1f1f1778321f" translate="yes" xml:space="preserve">
          <source>This function is not supported by Standard C. As such, it is only available on some platforms (Windows, Linux, Mac OS X, Solaris, BSD, plus other Unix systems that support the &lt;code&gt;dlfcn&lt;/code&gt; standard).</source>
          <target state="translated">Standard C不支持此功能。因此，它仅在某些平台（Windows，Linux，Mac OS X，Solaris，BSD以及其他支持 &lt;code&gt;dlfcn&lt;/code&gt; 标准的Unix系统）上可用。</target>
        </trans-unit>
        <trans-unit id="09ff91542609c4270a5672d90a1b6660e19831ef" translate="yes" xml:space="preserve">
          <source>This function is similar to &lt;a href=&quot;#pdf-pcall&quot;&gt;&lt;code&gt;pcall&lt;/code&gt;&lt;/a&gt;, except that it sets a new message handler &lt;code&gt;msgh&lt;/code&gt;.</source>
          <target state="translated">该函数类似于&lt;a href=&quot;#pdf-pcall&quot;&gt; &lt;code&gt;pcall&lt;/code&gt; &lt;/a&gt;，不同之处在于它设置了一个新的消息处理程序 &lt;code&gt;msgh&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="717f7af51aaada41e5e3c40f203c1a8fa9d3bad9" translate="yes" xml:space="preserve">
          <source>This function is system dependent and is not available on all platforms.</source>
          <target state="translated">该功能取决于系统,并非在所有平台上都可用。</target>
        </trans-unit>
        <trans-unit id="11f290796c947e6dfdea50bcfa8240bdb86eb8a0" translate="yes" xml:space="preserve">
          <source>This function is used to build a prefix for error messages.</source>
          <target state="translated">该函数用于为错误信息建立一个前缀。</target>
        </trans-unit>
        <trans-unit id="ab9f48a6c272547f77904d32d9efdba0ecb10345" translate="yes" xml:space="preserve">
          <source>This function may be not thread safe because of its reliance on C function &lt;code&gt;setlocale&lt;/code&gt;.</source>
          <target state="translated">由于此函数依赖C函数 &lt;code&gt;setlocale&lt;/code&gt; ,因此可能不是线程安全的。</target>
        </trans-unit>
        <trans-unit id="76e84460922436ebf110cd9c953279251f6cb0bb" translate="yes" xml:space="preserve">
          <source>This function never returns, but it is an idiom to use it in C functions as &lt;code&gt;return luaL_error(&lt;em&gt;args&lt;/em&gt;)&lt;/code&gt;.</source>
          <target state="translated">此函数从不返回，但是在C函数中将它用作 &lt;code&gt;return luaL_error(&lt;em&gt;args&lt;/em&gt;)&lt;/code&gt; 是一种习惯用法。</target>
        </trans-unit>
        <trans-unit id="7a6a8e72aaf1ce15e733e732a309d591ddf3339d" translate="yes" xml:space="preserve">
          <source>This function never returns.</source>
          <target state="translated">这个函数永远不会返回。</target>
        </trans-unit>
        <trans-unit id="dbd53ac438e83a0043cb356691fb688496f31d3d" translate="yes" xml:space="preserve">
          <source>This function opens a file, in the mode specified in the string &lt;code&gt;mode&lt;/code&gt;. In case of success, it returns a new file handle.</source>
          <target state="translated">此函数以字符串 &lt;code&gt;mode&lt;/code&gt; 指定的模式打开文件。如果成功，它将返回一个新的文件句柄。</target>
        </trans-unit>
        <trans-unit id="1586e455af396a0193bb677436a0ad64943d1618" translate="yes" xml:space="preserve">
          <source>This function performs several tasks, according to the value of the parameter &lt;code&gt;what&lt;/code&gt;:</source>
          <target state="translated">此功能根据参数的值执行多个任务， &lt;code&gt;what&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="bc205d90b6658beebf2ab75bca0642c69aa0ce84" translate="yes" xml:space="preserve">
          <source>This function pops &lt;code&gt;n&lt;/code&gt; values from the stack &lt;code&gt;from&lt;/code&gt;, and pushes them onto the stack &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="translated">此函数啪啪 &lt;code&gt;n&lt;/code&gt; 值从堆栈 &lt;code&gt;from&lt;/code&gt; ，并推动它们到堆栈 &lt;code&gt;to&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4693da6260e34753896c1e887316822f4ced3e1d" translate="yes" xml:space="preserve">
          <source>This function pops both the key and the value from the stack. As in Lua, this function may trigger a metamethod for the &quot;newindex&quot; event (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">此函数从堆栈中弹出键和值。像在Lua中一样，此函数可能会触发&amp;ldquo; newindex&amp;rdquo;事件的元方法（请参阅第&lt;a href=&quot;#2.4&quot;&gt;2.4节&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="02f15be23e4eaf0571f919cc7f7e66b956f4d346" translate="yes" xml:space="preserve">
          <source>This function pops the key from the stack, pushing the resulting value in its place. As in Lua, this function may trigger a metamethod for the &quot;index&quot; event (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">此函数从堆栈中弹出键，将结果值推入其位置。与Lua中一样，此函数可能会触发&amp;ldquo;索引&amp;rdquo;事件的元方法（请参见&lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="02c44d9ce8f4d61b45f6e95f4c2615a475b30c3d" translate="yes" xml:space="preserve">
          <source>This function pops the value from the stack. As in Lua, this function may trigger a metamethod for the &quot;newindex&quot; event (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">此函数从堆栈中弹出值。像在Lua中一样，此函数可能会触发&amp;ldquo; newindex&amp;rdquo;事件的元方法（请参阅第&lt;a href=&quot;#2.4&quot;&gt;2.4节&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d650072e7d52525aa4e9529e95f455ff101b8ac7" translate="yes" xml:space="preserve">
          <source>This function pops the value from the stack. The assignment is raw, that is, it does not invoke &lt;code&gt;__newindex&lt;/code&gt; metamethod.</source>
          <target state="translated">此函数从堆栈中弹出值。该分配是原始的，即它不调用 &lt;code&gt;__newindex&lt;/code&gt; 元方法。</target>
        </trans-unit>
        <trans-unit id="4dc9661dd76f18a4a7b7bac51f4e0d8886007ef1" translate="yes" xml:space="preserve">
          <source>This function pops the value from the stack. The assignment is raw, that is, it does not invoke the &lt;code&gt;__newindex&lt;/code&gt; metamethod.</source>
          <target state="translated">此函数从堆栈中弹出值。该分配是原始的，即它不调用 &lt;code&gt;__newindex&lt;/code&gt; 元方法。</target>
        </trans-unit>
        <trans-unit id="6ab41c2efc54cdc4ab08b428ef1fab2ac04e1717" translate="yes" xml:space="preserve">
          <source>This function produces the return values for file-related functions in the standard library (&lt;a href=&quot;#pdf-io.open&quot;&gt;&lt;code&gt;io.open&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-os.rename&quot;&gt;&lt;code&gt;os.rename&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-file:seek&quot;&gt;&lt;code&gt;file:seek&lt;/code&gt;&lt;/a&gt;, etc.).</source>
          <target state="translated">此函数在标准库（&lt;a href=&quot;#pdf-io.open&quot;&gt; &lt;code&gt;io.open&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#pdf-os.rename&quot;&gt; &lt;code&gt;os.rename&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#pdf-file:seek&quot;&gt; &lt;code&gt;file:seek&lt;/code&gt; &lt;/a&gt;等）中生成文件相关函数的返回值。</target>
        </trans-unit>
        <trans-unit id="7ba307bd4b8d4a518ec757e560baba91e283126d" translate="yes" xml:space="preserve">
          <source>This function produces the return values for process-related functions in the standard library (&lt;a href=&quot;#pdf-os.execute&quot;&gt;&lt;code&gt;os.execute&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pdf-io.close&quot;&gt;&lt;code&gt;io.close&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">此函数在标准库（&lt;a href=&quot;#pdf-os.execute&quot;&gt; &lt;code&gt;os.execute&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#pdf-io.close&quot;&gt; &lt;code&gt;io.close&lt;/code&gt; &lt;/a&gt;）中生成与流程相关的函数的返回值。</target>
        </trans-unit>
        <trans-unit id="b6746e2c8158506c924e3d9368f6e2be32b4e0d2" translate="yes" xml:space="preserve">
          <source>This function returns 0 on error (for instance, an invalid option in &lt;code&gt;what&lt;/code&gt;).</source>
          <target state="translated">错误时此函数返回0（例如， &lt;code&gt;what&lt;/code&gt; 中的选项无效）。</target>
        </trans-unit>
        <trans-unit id="9a4eda5d295976dd3059ff0cebee20501ad1d66f" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;table&lt;/code&gt;.</source>
          <target state="translated">此函数返回 &lt;code&gt;table&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cbb6c1599fe3ff6cd07d37a480afe2c16e49c014" translate="yes" xml:space="preserve">
          <source>This function returns the name and the value of the local variable with index &lt;code&gt;local&lt;/code&gt; of the function at level &lt;code&gt;f&lt;/code&gt; of the stack. This function accesses not only explicit local variables, but also parameters, temporaries, etc.</source>
          <target state="translated">此函数返回的名称和局部变量的索引值 &lt;code&gt;local&lt;/code&gt; 在水平的函数的 &lt;code&gt;f&lt;/code&gt; 堆。此函数不仅访问显式的局部变量，还访问参数，临时变量等。</target>
        </trans-unit>
        <trans-unit id="11dccabc4359a103d70b6a183c7d1b9e295f7d04" translate="yes" xml:space="preserve">
          <source>This function returns the name and the value of the upvalue with index &lt;code&gt;up&lt;/code&gt; of the function &lt;code&gt;f&lt;/code&gt;. The function returns &lt;b&gt;nil&lt;/b&gt; if there is no upvalue with the given index.</source>
          <target state="translated">该函数返回的名称和的upvalue的索引值 &lt;code&gt;up&lt;/code&gt; 功能 &lt;code&gt;f&lt;/code&gt; 。如果给定索引没有升值，则该函数返回&lt;b&gt;nil&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="bebb641f92b0e70a08302c805cbf864b58b36eaf" translate="yes" xml:space="preserve">
          <source>This function returns the same results as &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;, but it has an extra error code &lt;a id=&quot;pdf-LUA_ERRFILE&quot;&gt;&lt;code&gt;LUA_ERRFILE&lt;/code&gt;&lt;/a&gt; for file-related errors (e.g., it cannot open or read the file).</source>
          <target state="translated">此函数返回的结果与&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;相同，但是它具有一个额外的错误代码&lt;a id=&quot;pdf-LUA_ERRFILE&quot;&gt; &lt;code&gt;LUA_ERRFILE&lt;/code&gt; ,&lt;/a&gt;用于处理与文件相关的错误（例如，它无法打开或读取文件）。</target>
        </trans-unit>
        <trans-unit id="6596dd0254b38c840e56683db82740f29df06f33" translate="yes" xml:space="preserve">
          <source>This function returns the same results as &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">此函数返回与&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;相同的结果。</target>
        </trans-unit>
        <trans-unit id="c0db593e94c92390f3357b35159d95eee2be2609" translate="yes" xml:space="preserve">
          <source>This function returns the same results as &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;name&lt;/code&gt; is the chunk name, used for debug information and error messages. The string &lt;code&gt;mode&lt;/code&gt; works as in function &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">此函数返回与&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;相同的结果。 &lt;code&gt;name&lt;/code&gt; 是块名称，用于调试信息和错误消息。字符串 &lt;code&gt;mode&lt;/code&gt; 工作方式与&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;函数相同。</target>
        </trans-unit>
        <trans-unit id="5412475350d1ee79055711d0c4350d66e69ffd6d" translate="yes" xml:space="preserve">
          <source>This function uses &lt;a href=&quot;#lua_tolstring&quot;&gt;&lt;code&gt;lua_tolstring&lt;/code&gt;&lt;/a&gt; to get its result, so all conversions and caveats of that function apply here.</source>
          <target state="translated">该函数使用&lt;a href=&quot;#lua_tolstring&quot;&gt; &lt;code&gt;lua_tolstring&lt;/code&gt; &lt;/a&gt;来获取其结果，因此该函数的所有转换和警告均适用于此。</target>
        </trans-unit>
        <trans-unit id="e2d4ea61bcf0f5292e3f253adc7c53a2139d8438" translate="yes" xml:space="preserve">
          <source>This function works like &lt;a href=&quot;#luaL_checkudata&quot;&gt;&lt;code&gt;luaL_checkudata&lt;/code&gt;&lt;/a&gt;, except that, when the test fails, it returns &lt;code&gt;NULL&lt;/code&gt; instead of raising an error.</source>
          <target state="translated">该函数的工作方式与&lt;a href=&quot;#luaL_checkudata&quot;&gt; &lt;code&gt;luaL_checkudata&lt;/code&gt; 相似&lt;/a&gt;，除了测试失败时，它返回 &lt;code&gt;NULL&lt;/code&gt; 而不是引发错误。</target>
        </trans-unit>
        <trans-unit id="6563d8fb9cdba4b8e66ee93d7bd36fb67b77cff7" translate="yes" xml:space="preserve">
          <source>This is a low-level function. It completely bypasses the package and module system. Unlike &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt;, it does not perform any path searching and does not automatically adds extensions. &lt;code&gt;libname&lt;/code&gt; must be the complete file name of the C library, including if necessary a path and an extension. &lt;code&gt;funcname&lt;/code&gt; must be the exact name exported by the C library (which may depend on the C compiler and linker used).</source>
          <target state="translated">这是一个低级功能。它完全绕过了封装和模块系统。与&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;不同，它不执行任何路径搜索，并且不会自动添加扩展名。 &lt;code&gt;libname&lt;/code&gt; 必须是C库的完整文件名，如有必要，还包括路径和扩展名。 &lt;code&gt;funcname&lt;/code&gt; 必须是C库导出的确切名称（这可能取决于所使用的C编译器和链接器）。</target>
        </trans-unit>
        <trans-unit id="fd11429b923b744979c7d1f098bd69f96f85f6c0" translate="yes" xml:space="preserve">
          <source>This is a useful function for mapping strings to C enums. (The usual convention in Lua libraries is to use strings instead of numbers to select options.)</source>
          <target state="translated">这是一个用于将字符串映射到C语言枚举的有用函数。(Lua库中通常的惯例是使用字符串而不是数字来选择选项。)</target>
        </trans-unit>
        <trans-unit id="753037500c4fa6eda5c0c6251d0c5a1a859a582c" translate="yes" xml:space="preserve">
          <source>This is the only function on string buffers that can (and must) be called with an extra element on the stack, which is the value to be added to the buffer.</source>
          <target state="translated">这是唯一一个在字符串缓冲区上可以(也必须)调用的函数,在堆栈上有一个额外的元素,这就是要添加到缓冲区的值。</target>
        </trans-unit>
        <trans-unit id="90d6873741ea710dec0793ac5a59b32c0c418fac" translate="yes" xml:space="preserve">
          <source>This library comprises the operations to manipulate coroutines, which come inside the table &lt;a id=&quot;pdf-coroutine&quot;&gt;&lt;code&gt;coroutine&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;#2.6&quot;&gt;&amp;sect;2.6&lt;/a&gt; for a general description of coroutines.</source>
          <target state="translated">该库包含操作协程的操作，这些操作位于表&lt;a id=&quot;pdf-coroutine&quot;&gt; &lt;code&gt;coroutine&lt;/code&gt; &lt;/a&gt;内部。有关协程的一般说明，请参见&lt;a href=&quot;#2.6&quot;&gt;&amp;sect;2.6&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="90c1b961ab3b38c58be563362f0802d45e85c135" translate="yes" xml:space="preserve">
          <source>This library is implemented through table &lt;a id=&quot;pdf-os&quot;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该库通过表&lt;a id=&quot;pdf-os&quot;&gt; &lt;code&gt;os&lt;/code&gt; &lt;/a&gt;实现。</target>
        </trans-unit>
        <trans-unit id="677be47bd4a9ee27a5f7b1353939b6d0981e1e42" translate="yes" xml:space="preserve">
          <source>This library provides basic mathematical functions. It provides all its functions and constants inside the table &lt;a id=&quot;pdf-math&quot;&gt;&lt;code&gt;math&lt;/code&gt;&lt;/a&gt;. Functions with the annotation &quot;&lt;code&gt;integer/float&lt;/code&gt;&quot; give integer results for integer arguments and float results for float (or mixed) arguments. Rounding functions (&lt;a href=&quot;#pdf-math.ceil&quot;&gt;&lt;code&gt;math.ceil&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-math.floor&quot;&gt;&lt;code&gt;math.floor&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#pdf-math.modf&quot;&gt;&lt;code&gt;math.modf&lt;/code&gt;&lt;/a&gt;) return an integer when the result fits in the range of an integer, or a float otherwise.</source>
          <target state="translated">该库提供基本的数学功能。它在表格&lt;a id=&quot;pdf-math&quot;&gt; &lt;code&gt;math&lt;/code&gt; 中&lt;/a&gt;提供了所有函数和常量。带有注解&amp;ldquo; &lt;code&gt;integer/float&lt;/code&gt; &amp;rdquo;的函数为整数参数给出整数结果，为浮点（或混合）参数给出浮点结果。当结果适合整数范围时，舍入函数（&lt;a href=&quot;#pdf-math.ceil&quot;&gt; &lt;code&gt;math.ceil&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#pdf-math.floor&quot;&gt; &lt;code&gt;math.floor&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#pdf-math.modf&quot;&gt; &lt;code&gt;math.modf&lt;/code&gt; &lt;/a&gt;）返回一个整数，否则返回float。</target>
        </trans-unit>
        <trans-unit id="eff61c8c99df8abb4cc617e0a788ed6e1d7a8ab8" translate="yes" xml:space="preserve">
          <source>This library provides basic support for UTF-8 encoding. It provides all its functions inside the table &lt;a id=&quot;pdf-utf8&quot;&gt;&lt;code&gt;utf8&lt;/code&gt;&lt;/a&gt;. This library does not provide any support for Unicode other than the handling of the encoding. Any operation that needs the meaning of a character, such as character classification, is outside its scope.</source>
          <target state="translated">该库提供对UTF-8编码的基本支持。它在表&lt;a id=&quot;pdf-utf8&quot;&gt; &lt;code&gt;utf8&lt;/code&gt; &lt;/a&gt;内提供了所有功能。除了编码处理之外，该库不提供对Unicode的任何支持。任何需要字符含义的操作（例如字符分类）均超出其范围。</target>
        </trans-unit>
        <trans-unit id="f54156236b7b08469a0920a829130d4325d9534b" translate="yes" xml:space="preserve">
          <source>This library provides generic functions for string manipulation, such as finding and extracting substrings, and pattern matching. When indexing a string in Lua, the first character is at position 1 (not at 0, as in C). Indices are allowed to be negative and are interpreted as indexing backwards, from the end of the string. Thus, the last character is at position -1, and so on.</source>
          <target state="translated">这个库提供了字符串操作的通用函数,如查找和提取子串,以及模式匹配。当在Lua中对一个字符串进行索引时,第一个字符位于1的位置(而不是像C语言中的0)。索引允许为负数,并被解释为从字符串的末端开始向后索引。因此,最后一个字符位于-1位置,以此类推。</target>
        </trans-unit>
        <trans-unit id="eaff80ded470719d876c589d5513c23d7a2d941b" translate="yes" xml:space="preserve">
          <source>This library provides generic functions for table manipulation. It provides all its functions inside the table &lt;a id=&quot;pdf-table&quot;&gt;&lt;code&gt;table&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该库提供用于表操作的通用功能。它在表&lt;a id=&quot;pdf-table&quot;&gt; &lt;code&gt;table&lt;/code&gt; 中&lt;/a&gt;提供了所有功能。</target>
        </trans-unit>
        <trans-unit id="8d51d524a82a8aae4d9f2e0292c35c2b4f100e81" translate="yes" xml:space="preserve">
          <source>This library provides the functionality of the debug interface (&lt;a href=&quot;#4.9&quot;&gt;&amp;sect;4.9&lt;/a&gt;) to Lua programs. You should exert care when using this library. Several of its functions violate basic assumptions about Lua code (e.g., that variables local to a function cannot be accessed from outside; that userdata metatables cannot be changed by Lua code; that Lua programs do not crash) and therefore can compromise otherwise secure code. Moreover, some functions in this library may be slow.</source>
          <target state="translated">该库为Lua程序提供了调试接口（第&lt;a href=&quot;#4.9&quot;&gt;4.9节&lt;/a&gt;）的功能。使用此库时，应格外小心。它的一些功能违反了有关Lua代码的基本假设（例如，无法从外部访问函数本地变量； Lua代码无法更改userdata元表； Lua程序不会崩溃），因此可能会破坏安全代码。此外，该库中的某些功能可能很慢。</target>
        </trans-unit>
        <trans-unit id="aa99211cd2ffc6b2b1567c3fa58975b02bdbb57d" translate="yes" xml:space="preserve">
          <source>This macro is defined as follows:</source>
          <target state="translated">该宏定义如下:</target>
        </trans-unit>
        <trans-unit id="c062139aee69e54bd4a269563eddaa0f4e8798af" translate="yes" xml:space="preserve">
          <source>This macro is equivalent to &lt;a href=&quot;#lua_pushstring&quot;&gt;&lt;code&gt;lua_pushstring&lt;/code&gt;&lt;/a&gt;, but should be used only when &lt;code&gt;s&lt;/code&gt; is a literal string.</source>
          <target state="translated">该宏等效于&lt;a href=&quot;#lua_pushstring&quot;&gt; &lt;code&gt;lua_pushstring&lt;/code&gt; &lt;/a&gt;，但仅当 &lt;code&gt;s&lt;/code&gt; 是文字字符串时才应使用。</target>
        </trans-unit>
        <trans-unit id="73fca2eb54a811850b7ad4e17b0d35bfe7cf0032" translate="yes" xml:space="preserve">
          <source>This macro may evaluate its arguments more than once.</source>
          <target state="translated">这个宏可以评价它的参数一次以上。</target>
        </trans-unit>
        <trans-unit id="05f26abbbd5d35b2d22d1c051a71569b0f900ee1" translate="yes" xml:space="preserve">
          <source>This section describes the C API for Lua, that is, the set of C functions available to the host program to communicate with Lua. All API functions and related types and constants are declared in the header file &lt;a id=&quot;pdf-lua.h&quot;&gt;&lt;code&gt;lua.h&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">本节描述了用于Lua的C API，即，主机程序可用于与Lua通信的C函数集。所有API函数以及相关的类型和常量都在头文件&lt;a id=&quot;pdf-lua.h&quot;&gt; &lt;code&gt;lua.h&lt;/code&gt; &lt;/a&gt;中声明。</target>
        </trans-unit>
        <trans-unit id="f58c3cfe49431540420c4f54cf654f80f9192fd6" translate="yes" xml:space="preserve">
          <source>This section describes the basic concepts of the language.</source>
          <target state="translated">本节介绍语言的基本概念。</target>
        </trans-unit>
        <trans-unit id="8fa659ee1a4beeab1fc33f883314eeb2cadc844d" translate="yes" xml:space="preserve">
          <source>This section describes the lexis, the syntax, and the semantics of Lua. In other words, this section describes which tokens are valid, how they can be combined, and what their combinations mean.</source>
          <target state="translated">本节描述了Lua的词法、语法和语义。换句话说,本节描述了哪些标记是有效的,它们如何组合,以及它们的组合意味着什么。</target>
        </trans-unit>
        <trans-unit id="278be3240fe4a7ea3d08f92baa83623d2ac8fe27" translate="yes" xml:space="preserve">
          <source>This userdata must start with the structure &lt;code&gt;luaL_Stream&lt;/code&gt;; it can contain other data after this initial structure. Field &lt;code&gt;f&lt;/code&gt; points to the corresponding C stream (or it can be &lt;code&gt;NULL&lt;/code&gt; to indicate an incompletely created handle). Field &lt;code&gt;closef&lt;/code&gt; points to a Lua function that will be called to close the stream when the handle is closed or collected; this function receives the file handle as its sole argument and must return either &lt;b&gt;true&lt;/b&gt; (in case of success) or &lt;b&gt;nil&lt;/b&gt; plus an error message (in case of error). Once Lua calls this field, it changes the field value to &lt;code&gt;NULL&lt;/code&gt; to signal that the handle is closed.</source>
          <target state="translated">该用户数据必须以 &lt;code&gt;luaL_Stream&lt;/code&gt; 结构开头；在此初始结构之后，它可以包含其他数据。字段 &lt;code&gt;f&lt;/code&gt; 指向相应的C流（或者可以为 &lt;code&gt;NULL&lt;/code&gt; 表示未完全创建的句柄）。字段 &lt;code&gt;closef&lt;/code&gt; 指向一个Lua函数，当关闭或收集手柄时，该函​​数将被调用以关闭流。此函数将文件句柄作为其唯一参数，并且必须返回&lt;b&gt;true&lt;/b&gt;（如果成功）或&lt;b&gt;nil&lt;/b&gt;加错误消息（如果错误）。一旦Lua调用了该字段，它会将字段值更改为 &lt;code&gt;NULL&lt;/code&gt; ,以表示该句柄已关闭。</target>
        </trans-unit>
        <trans-unit id="a38b5444cc9ef2204e61edb4d9f6307dc07f0ac4" translate="yes" xml:space="preserve">
          <source>This variable is only a reference to the real table; assignments to this variable do not change the table used by &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该变量仅是对实际表的引用；对该变量的分配不会更改&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;使用的表。</target>
        </trans-unit>
        <trans-unit id="fd5b59d880561eb52ba3ed52be79a6fc246200cf" translate="yes" xml:space="preserve">
          <source>To allow possible side-effects, function calls can be executed as statements:</source>
          <target state="translated">为了允许可能的副作用,函数调用可以作为语句执行。</target>
        </trans-unit>
        <trans-unit id="888be864c9c88102be3a61e9065fc124fb157083" translate="yes" xml:space="preserve">
          <source>To allow the use of Lua as a script interpreter in Unix systems, the standalone interpreter skips the first line of a chunk if it starts with &lt;code&gt;#&lt;/code&gt;. Therefore, Lua scripts can be made into executable programs by using &lt;code&gt;chmod +x&lt;/code&gt; and the &lt;code&gt;#!&lt;/code&gt; form, as in</source>
          <target state="translated">为了允许将Lua用作Unix系统中的脚本解释器，如果独立解释器以 &lt;code&gt;#&lt;/code&gt; 开头，则跳过该块的第一行。因此，可以使用 &lt;code&gt;chmod +x&lt;/code&gt; 和 &lt;code&gt;#!&lt;/code&gt; 将Lua脚本制作为可执行程序。形式，如</target>
        </trans-unit>
        <trans-unit id="1e9c9099d2aea779a3a3f78d58160c9b66011127" translate="yes" xml:space="preserve">
          <source>To avoid this kind of problem, Lua raises an error whenever it tries to yield across an API call, except for three functions: &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#lua_callk&quot;&gt;&lt;code&gt;lua_callk&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#lua_pcallk&quot;&gt;&lt;code&gt;lua_pcallk&lt;/code&gt;&lt;/a&gt;. All those functions receive a &lt;em&gt;continuation function&lt;/em&gt; (as a parameter named &lt;code&gt;k&lt;/code&gt;) to continue execution after a yield.</source>
          <target state="translated">为了避免此类问题，Lua每当尝试通过API调用&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; &lt;/a&gt;时都会引发错误，但以下三个函数除外：lua_yieldk，&lt;a href=&quot;#lua_callk&quot;&gt; &lt;code&gt;lua_callk&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#lua_pcallk&quot;&gt; &lt;code&gt;lua_pcallk&lt;/code&gt; &lt;/a&gt;。所有这些函数都接收一个&lt;em&gt;继续函数&lt;/em&gt;（作为名为 &lt;code&gt;k&lt;/code&gt; 的参数）以在yield之后继续执行。</target>
        </trans-unit>
        <trans-unit id="5bb0e844a26e80a97eddacec1b0d3209d0d96606" translate="yes" xml:space="preserve">
          <source>To call a function you must use the following protocol: first, the function to be called is pushed onto the stack; then, the arguments to the function are pushed in direct order; that is, the first argument is pushed first. Finally you call &lt;a href=&quot;#lua_call&quot;&gt;&lt;code&gt;lua_call&lt;/code&gt;&lt;/a&gt;; &lt;code&gt;nargs&lt;/code&gt; is the number of arguments that you pushed onto the stack. All arguments and the function value are popped from the stack when the function is called. The function results are pushed onto the stack when the function returns. The number of results is adjusted to &lt;code&gt;nresults&lt;/code&gt;, unless &lt;code&gt;nresults&lt;/code&gt; is &lt;a id=&quot;pdf-LUA_MULTRET&quot;&gt;&lt;code&gt;LUA_MULTRET&lt;/code&gt;&lt;/a&gt;. In this case, all results from the function are pushed; Lua takes care that the returned values fit into the stack space, but it does not ensure any extra space in the stack. The function results are pushed onto the stack in direct order (the first result is pushed first), so that after the call the last result is on the top of the stack.</source>
          <target state="translated">要调用一个函数，您必须使用以下协议：首先，要调用的函数被压入堆栈。然后，该函数的参数按直接顺序推入；也就是说，第一个参数先被推入。最后，您调用&lt;a href=&quot;#lua_call&quot;&gt; &lt;code&gt;lua_call&lt;/code&gt; &lt;/a&gt;； &lt;code&gt;nargs&lt;/code&gt; 是您压入堆栈的参数数量。调用函数时，将从堆栈中弹出所有参数和函数值。函数返回时，函数结果将被压入堆栈。结果数调整为 &lt;code&gt;nresults&lt;/code&gt; ，除非 &lt;code&gt;nresults&lt;/code&gt; 为&lt;a id=&quot;pdf-LUA_MULTRET&quot;&gt; &lt;code&gt;LUA_MULTRET&lt;/code&gt; &lt;/a&gt;。在这种情况下，该函数的所有结果都会被推送；Lua会确保返回的值适合堆栈空间，但不能确保堆栈中有任何额外的空间。函数结果按直接顺序被推入堆栈（第一个结果首先被推入），因此在调用之后，最后一个结果在堆栈顶部。</target>
        </trans-unit>
        <trans-unit id="2e1e6304705c324bc934187373072b763f1a1066" translate="yes" xml:space="preserve">
          <source>To find a loader, &lt;code&gt;require&lt;/code&gt; is guided by the &lt;a href=&quot;#pdf-package.searchers&quot;&gt;&lt;code&gt;package.searchers&lt;/code&gt;&lt;/a&gt; sequence. By changing this sequence, we can change how &lt;code&gt;require&lt;/code&gt; looks for a module. The following explanation is based on the default configuration for &lt;a href=&quot;#pdf-package.searchers&quot;&gt;&lt;code&gt;package.searchers&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要查找加载程序， &lt;code&gt;require&lt;/code&gt; 由&lt;a href=&quot;#pdf-package.searchers&quot;&gt; &lt;code&gt;package.searchers&lt;/code&gt; &lt;/a&gt;序列指导。通过更改此顺序，我们可以更改 &lt;code&gt;require&lt;/code&gt; 查找模块的方式。以下说明基于&lt;a href=&quot;#pdf-package.searchers&quot;&gt; &lt;code&gt;package.searchers&lt;/code&gt; &lt;/a&gt;的默认配置。</target>
        </trans-unit>
        <trans-unit id="d328425732a8a8cf219c051476f3d38be1088896" translate="yes" xml:space="preserve">
          <source>To get information about a function invocation, the parameter &lt;code&gt;ar&lt;/code&gt; must be a valid activation record that was filled by a previous call to &lt;a href=&quot;#lua_getstack&quot;&gt;&lt;code&gt;lua_getstack&lt;/code&gt;&lt;/a&gt; or given as argument to a hook (see &lt;a href=&quot;#lua_Hook&quot;&gt;&lt;code&gt;lua_Hook&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">要获取有关函数调用的信息，参数 &lt;code&gt;ar&lt;/code&gt; 必须是有效的激活记录，该记录由先前对&lt;a href=&quot;#lua_getstack&quot;&gt; &lt;code&gt;lua_getstack&lt;/code&gt; 的&lt;/a&gt;调用填充或作为钩子的参数提供（请参见&lt;a href=&quot;#lua_Hook&quot;&gt; &lt;code&gt;lua_Hook&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="259bf849c0380d37169ac9c2c5ed68eef86ed762" translate="yes" xml:space="preserve">
          <source>To get information about a function you push it onto the stack and start the &lt;code&gt;what&lt;/code&gt; string with the character '&lt;code&gt;&amp;gt;&lt;/code&gt;'. (In that case, &lt;code&gt;lua_getinfo&lt;/code&gt; pops the function from the top of the stack.) For instance, to know in which line a function &lt;code&gt;f&lt;/code&gt; was defined, you can write the following code:</source>
          <target state="translated">要获得有关功能的信息你推入堆栈，开始 &lt;code&gt;what&lt;/code&gt; 字符&amp;ldquo;字符串 &lt;code&gt;&amp;gt;&lt;/code&gt; &amp;rdquo;。（在这种情况下， &lt;code&gt;lua_getinfo&lt;/code&gt; 从堆栈的顶部弹出该函数。）例如，要知道函数 &lt;code&gt;f&lt;/code&gt; 在哪一行定义，可以编写以下代码：</target>
        </trans-unit>
        <trans-unit id="4f65df24a4302e99c5805820ed2c9da17dcc1b4e" translate="yes" xml:space="preserve">
          <source>To have access to these libraries, the C host program should call the &lt;a href=&quot;#luaL_openlibs&quot;&gt;&lt;code&gt;luaL_openlibs&lt;/code&gt;&lt;/a&gt; function, which opens all standard libraries. Alternatively, the host program can open them individually by using &lt;a href=&quot;#luaL_requiref&quot;&gt;&lt;code&gt;luaL_requiref&lt;/code&gt;&lt;/a&gt; to call &lt;a id=&quot;pdf-luaopen_base&quot;&gt;&lt;code&gt;luaopen_base&lt;/code&gt;&lt;/a&gt; (for the basic library), &lt;a id=&quot;pdf-luaopen_package&quot;&gt;&lt;code&gt;luaopen_package&lt;/code&gt;&lt;/a&gt; (for the package library), &lt;a id=&quot;pdf-luaopen_coroutine&quot;&gt;&lt;code&gt;luaopen_coroutine&lt;/code&gt;&lt;/a&gt; (for the coroutine library), &lt;a id=&quot;pdf-luaopen_string&quot;&gt;&lt;code&gt;luaopen_string&lt;/code&gt;&lt;/a&gt; (for the string library), &lt;a id=&quot;pdf-luaopen_utf8&quot;&gt;&lt;code&gt;luaopen_utf8&lt;/code&gt;&lt;/a&gt; (for the UTF8 library), &lt;a id=&quot;pdf-luaopen_table&quot;&gt;&lt;code&gt;luaopen_table&lt;/code&gt;&lt;/a&gt; (for the table library), &lt;a id=&quot;pdf-luaopen_math&quot;&gt;&lt;code&gt;luaopen_math&lt;/code&gt;&lt;/a&gt; (for the mathematical library), &lt;a id=&quot;pdf-luaopen_io&quot;&gt;&lt;code&gt;luaopen_io&lt;/code&gt;&lt;/a&gt; (for the I/O library), &lt;a id=&quot;pdf-luaopen_os&quot;&gt;&lt;code&gt;luaopen_os&lt;/code&gt;&lt;/a&gt; (for the operating system library), and &lt;a id=&quot;pdf-luaopen_debug&quot;&gt;&lt;code&gt;luaopen_debug&lt;/code&gt;&lt;/a&gt; (for the debug library). These functions are declared in &lt;a id=&quot;pdf-lualib.h&quot;&gt;&lt;code&gt;lualib.h&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要访问这些库，C主机程序应调用&lt;a href=&quot;#luaL_openlibs&quot;&gt; &lt;code&gt;luaL_openlibs&lt;/code&gt; &lt;/a&gt;函数，该函数将打开所有标准库。或者，主机程序可以使用&lt;a href=&quot;#luaL_requiref&quot;&gt; &lt;code&gt;luaL_requiref&lt;/code&gt; &lt;/a&gt;分别调用&lt;a id=&quot;pdf-luaopen_base&quot;&gt; &lt;code&gt;luaopen_base&lt;/code&gt; &lt;/a&gt;（对于基本库），&lt;a id=&quot;pdf-luaopen_package&quot;&gt; &lt;code&gt;luaopen_package&lt;/code&gt; &lt;/a&gt;（对于包库），&lt;a id=&quot;pdf-luaopen_coroutine&quot;&gt; &lt;code&gt;luaopen_coroutine&lt;/code&gt; &lt;/a&gt;（对于coroutine库），&lt;a id=&quot;pdf-luaopen_string&quot;&gt; &lt;code&gt;luaopen_string&lt;/code&gt; &lt;/a&gt;（对于字符串库），&lt;a id=&quot;pdf-luaopen_utf8&quot;&gt; &lt;code&gt;luaopen_utf8&lt;/code&gt; &lt;/a&gt;（对于UTF8库），&lt;a id=&quot;pdf-luaopen_table&quot;&gt; &lt;code&gt;luaopen_table&lt;/code&gt; &lt;/a&gt;（用于表库），&lt;a id=&quot;pdf-luaopen_math&quot;&gt; &lt;code&gt;luaopen_math&lt;/code&gt; &lt;/a&gt;（用于数学库），&lt;a id=&quot;pdf-luaopen_io&quot;&gt; &lt;code&gt;luaopen_io&lt;/code&gt; &lt;/a&gt;（用于I / O库），&lt;a id=&quot;pdf-luaopen_os&quot;&gt; &lt;code&gt;luaopen_os&lt;/code&gt; &lt;/a&gt;（对于操作系统库）和&lt;a id=&quot;pdf-luaopen_debug&quot;&gt; &lt;code&gt;luaopen_debug&lt;/code&gt; &lt;/a&gt;（对于调试库）。这些函数在&lt;a id=&quot;pdf-lualib.h&quot;&gt; &lt;code&gt;lualib.h&lt;/code&gt; &lt;/a&gt;中声明。</target>
        </trans-unit>
        <trans-unit id="f7497be5097473a583f39ec52ec425732f31d8c7" translate="yes" xml:space="preserve">
          <source>To resume a coroutine, you remove any results from the last &lt;a href=&quot;#lua_yield&quot;&gt;&lt;code&gt;lua_yield&lt;/code&gt;&lt;/a&gt;, put on its stack only the values to be passed as results from &lt;code&gt;yield&lt;/code&gt;, and then call &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要恢复协程，请从最后一个&lt;a href=&quot;#lua_yield&quot;&gt; &lt;code&gt;lua_yield&lt;/code&gt; 中&lt;/a&gt;删除所有结果，仅将要作为 &lt;code&gt;yield&lt;/code&gt; 的结果传递的值放在其堆栈上，然后调用&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f5749af8d5e7fed727ed35d15b38114e430080b8" translate="yes" xml:space="preserve">
          <source>To start a coroutine, you push onto the thread stack the main function plus any arguments; then you call &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt;, with &lt;code&gt;nargs&lt;/code&gt; being the number of arguments. This call returns when the coroutine suspends or finishes its execution. When it returns, the stack contains all values passed to &lt;a href=&quot;#lua_yield&quot;&gt;&lt;code&gt;lua_yield&lt;/code&gt;&lt;/a&gt;, or all values returned by the body function. &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt; returns &lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt;&lt;code&gt;LUA_YIELD&lt;/code&gt;&lt;/a&gt; if the coroutine yields, &lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt; if the coroutine finishes its execution without errors, or an error code in case of errors (see &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">要启动协程，您可以将主函数以及任何参数推入线程堆栈。然后调用&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt;，其中 &lt;code&gt;nargs&lt;/code&gt; 是参数的数量。当协程暂停或完成其执行时，此调用返回。返回时，堆栈包含传递给&lt;a href=&quot;#lua_yield&quot;&gt; &lt;code&gt;lua_yield&lt;/code&gt; 的&lt;/a&gt;所有值，或主体函数返回的所有值。&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt;返回&lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt; &lt;code&gt;LUA_YIELD&lt;/code&gt; &lt;/a&gt;如果协程产率，&lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; &lt;/a&gt;如果协程完成它的执行没有错误，或在错误（见的情况下的误差代码&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="11a3a0ec973c2479f00cc8910cb72beb238ed2cd" translate="yes" xml:space="preserve">
          <source>Type for C functions.</source>
          <target state="translated">C函数的类型。</target>
        </trans-unit>
        <trans-unit id="bbac79126ad582b607fa7de417480b28246073cf" translate="yes" xml:space="preserve">
          <source>Type for a &lt;em&gt;string buffer&lt;/em&gt;.</source>
          <target state="translated">输入&lt;em&gt;字符串缓冲区&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="597df46ee98db369cefa88ec65178daff885f4c9" translate="yes" xml:space="preserve">
          <source>Type for arrays of functions to be registered by &lt;a href=&quot;#luaL_setfuncs&quot;&gt;&lt;code&gt;luaL_setfuncs&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;name&lt;/code&gt; is the function name and &lt;code&gt;func&lt;/code&gt; is a pointer to the function. Any array of &lt;a href=&quot;#luaL_Reg&quot;&gt;&lt;code&gt;luaL_Reg&lt;/code&gt;&lt;/a&gt; must end with a sentinel entry in which both &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;func&lt;/code&gt; are &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#luaL_setfuncs&quot;&gt; &lt;code&gt;luaL_setfuncs&lt;/code&gt; &lt;/a&gt;要注册的功能数组的类型。 &lt;code&gt;name&lt;/code&gt; 是函数名称， &lt;code&gt;func&lt;/code&gt; 是指向函数的指针。&lt;a href=&quot;#luaL_Reg&quot;&gt; &lt;code&gt;luaL_Reg&lt;/code&gt; 的&lt;/a&gt;任何数组都必须以哨兵条目结尾，其中 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;func&lt;/code&gt; 均为 &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="97624a7d15b8942c923346eb9827dfe7da1b1df0" translate="yes" xml:space="preserve">
          <source>Type for continuation functions (see &lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;).</source>
          <target state="translated">延续功能的类型（请参见第&lt;a href=&quot;#4.7&quot;&gt;4.7节&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="24445b5aafedd0f5dd84a959ce49844260c89cd8" translate="yes" xml:space="preserve">
          <source>Type for debugging hook functions.</source>
          <target state="translated">调试钩子函数的类型。</target>
        </trans-unit>
        <trans-unit id="bd045f19fb648f6e2a8a5ad73d4fd1e6a85d7f43" translate="yes" xml:space="preserve">
          <source>Typically this function is used only for hashing and debug information.</source>
          <target state="translated">通常这个函数只用于散列和调试信息。</target>
        </trans-unit>
        <trans-unit id="82aace29da601638b56c7fcfaece961d82f801a3" translate="yes" xml:space="preserve">
          <source>Typically, the message handler is used to add more debug information to the error object, such as a stack traceback. Such information cannot be gathered after the return of &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt;, since by then the stack has unwound.</source>
          <target state="translated">通常，消息处理程序用于将更多调试信息添加到错误对象，例如堆栈回溯。在&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;返回之后，无法收集此类信息，因为那时堆栈已解开。</target>
        </trans-unit>
        <trans-unit id="31727baa3a70e03cfa1528c55a7acf86c6c0a582" translate="yes" xml:space="preserve">
          <source>Unless otherwise stated, all I/O functions return &lt;b&gt;nil&lt;/b&gt; on failure (plus an error message as a second result and a system-dependent error code as a third result) and some value different from &lt;b&gt;nil&lt;/b&gt; on success. On non-POSIX systems, the computation of the error message and error code in case of errors may be not thread safe, because they rely on the global C variable &lt;code&gt;errno&lt;/code&gt;.</source>
          <target state="translated">除非另有说明，否则所有I / O函数在失败时都会返回&lt;b&gt;nil&lt;/b&gt;（加上错误消息作为第二个结果，并返回与系统相关的错误代码作为第三结果），并且某些值在成功时会返回&lt;b&gt;nil&lt;/b&gt;。在非POSIX系统上，错误情况下错误消息和错误代码的计算可能不是线程安全的，因为它们依赖于全局C变量 &lt;code&gt;errno&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b52e7d27a22d0d612f9608bbf1f1eccee941606" translate="yes" xml:space="preserve">
          <source>Unless stated otherwise, all functions that expect a byte position as a parameter assume that the given position is either the start of a byte sequence or one plus the length of the subject string. As in the string library, negative indices count from the end of the string.</source>
          <target state="translated">除非另有说明,所有期望以字节位置作为参数的函数都假定给定的位置是一个字节序列的开始,或者是一个加上主题字符串的长度。和字符串库中一样,负指数从字符串的末端开始计算。</target>
        </trans-unit>
        <trans-unit id="59b21f366bd62c88e740589d6190f38930d6eeac" translate="yes" xml:space="preserve">
          <source>Unlike other push functions, this function checks for the stack space it needs, including the slot for its result.</source>
          <target state="translated">与其他推送函数不同,这个函数检查它所需要的堆栈空间,包括其结果的槽位。</target>
        </trans-unit>
        <trans-unit id="2e42ec0a938ed392af0043f9b91ccccb6b8e5563" translate="yes" xml:space="preserve">
          <source>Upvalues have no particular order, as they are active through the whole function. They are numbered in an arbitrary order.</source>
          <target state="translated">上位值没有特定的顺序,因为它们在整个函数中都是活动的。它们的编号顺序是任意的。</target>
        </trans-unit>
        <trans-unit id="76f521b6a8d60e44bede4ff94d2d23d25dcfafa8" translate="yes" xml:space="preserve">
          <source>Userdata represent C values in Lua. A &lt;em&gt;light userdata&lt;/em&gt; represents a pointer, a &lt;code&gt;void*&lt;/code&gt;. It is a value (like a number): you do not create it, it has no individual metatable, and it is not collected (as it was never created). A light userdata is equal to &quot;any&quot; light userdata with the same C address.</source>
          <target state="translated">用户数据表示Lua中的C值。甲&lt;em&gt;光用户数据&lt;/em&gt;代表一个指针，一个 &lt;code&gt;void*&lt;/code&gt; 。它是一个值（如数字）：您不创建它，它没有单独的元表，也没有收集它（因为它从未创建过）。轻量用户数据等于具有相同C地址的&amp;ldquo;任何&amp;rdquo;轻量用户数据。</target>
        </trans-unit>
        <trans-unit id="e39e23cf8cc12b3b818ae1cbbd67ab727cb6080a" translate="yes" xml:space="preserve">
          <source>Usually, &lt;code&gt;error&lt;/code&gt; adds some information about the error position at the beginning of the message, if the message is a string. The &lt;code&gt;level&lt;/code&gt; argument specifies how to get the error position. With level 1 (the default), the error position is where the &lt;code&gt;error&lt;/code&gt; function was called. Level 2 points the error to where the function that called &lt;code&gt;error&lt;/code&gt; was called; and so on. Passing a level 0 avoids the addition of error position information to the message.</source>
          <target state="translated">通常，如果消息是字符串， &lt;code&gt;error&lt;/code&gt; 会在消息的开头添加一些有关错误位置的信息。该 &lt;code&gt;level&lt;/code&gt; 参数指定如何得到错误的位置。在级别1（默认值）下，错误位置是调用 &lt;code&gt;error&lt;/code&gt; 函数的位置。级别2将错误指向调用 &lt;code&gt;error&lt;/code&gt; 的函数所在的位置。等等。传递级别0可以避免将错误位置信息添加到消息中。</target>
        </trans-unit>
        <trans-unit id="ede0ea911a1e4e16232a1c52be2e25bf93574b23" translate="yes" xml:space="preserve">
          <source>Usually, this function does not return; when the coroutine eventually resumes, it continues executing the continuation function. However, there is one special case, which is when this function is called from inside a line or a count hook (see &lt;a href=&quot;#4.9&quot;&gt;&amp;sect;4.9&lt;/a&gt;). In that case, &lt;code&gt;lua_yieldk&lt;/code&gt; should be called with no continuation (probably in the form of &lt;a href=&quot;#lua_yield&quot;&gt;&lt;code&gt;lua_yield&lt;/code&gt;&lt;/a&gt;) and no results, and the hook should return immediately after the call. Lua will yield and, when the coroutine resumes again, it will continue the normal execution of the (Lua) function that triggered the hook.</source>
          <target state="translated">通常，此函数不返回；当协程最终恢复时，它将继续执行延续功能。但是，有一种特殊情况，即从行或计数挂钩内部调用此函数的情况（请参阅第&lt;a href=&quot;#4.9&quot;&gt;4.9节&lt;/a&gt;）。在这种情况下， &lt;code&gt;lua_yieldk&lt;/code&gt; 不应连续调用（可能以&lt;a href=&quot;#lua_yield&quot;&gt; &lt;code&gt;lua_yield&lt;/code&gt; &lt;/a&gt;形式）并且不返回任何结果，并且该挂钩应在调用后立即返回。 Lua将屈服，并且当协程再次恢复时，它将继续触发钩子的（Lua）函数的正常执行。</target>
        </trans-unit>
        <trans-unit id="14347ed892514b4d69c3b3bf601cd9c8fb3e904b" translate="yes" xml:space="preserve">
          <source>Values and Types</source>
          <target state="translated">价值和类型</target>
        </trans-unit>
        <trans-unit id="12bad2c7ac94b1eae85bb4982ce9b8d423815b52" translate="yes" xml:space="preserve">
          <source>Variable names starting with '&lt;code&gt;(&lt;/code&gt;' (open parenthesis) represent variables with no known names (internal variables such as loop control variables, and variables from chunks saved without debug information).</source>
          <target state="translated">以' &lt;code&gt;(&lt;/code&gt; '（开括号）开头的变量名称表示没有已知名称的变量（内部变量（如循环控制变量，以及来自块的变量，没有调试信息）。</target>
        </trans-unit>
        <trans-unit id="91ca405a6bcded978537314760080c405ac3d0b7" translate="yes" xml:space="preserve">
          <source>Variable names starting with '&lt;code&gt;(&lt;/code&gt;' (open parenthesis) represent variables with no known names (variables from chunks saved without debug information).</source>
          <target state="translated">以' &lt;code&gt;(&lt;/code&gt; '（开括号）开头的变量名称表示没有已知名称的变量（来自块的变量，没有调试信息）。</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="be26bb31c1703ed9ce7e9ecf54d6a6a8c765c6e5" translate="yes" xml:space="preserve">
          <source>Variables are places that store values. There are three kinds of variables in Lua: global variables, local variables, and table fields.</source>
          <target state="translated">变量是存储值的地方。Lua中的变量有三种:全局变量、局部变量和表域。</target>
        </trans-unit>
        <trans-unit id="c95e5bb697c2902b5736feab85b400b53ef72faf" translate="yes" xml:space="preserve">
          <source>Visibility Rules</source>
          <target state="translated">可见度规则</target>
        </trans-unit>
        <trans-unit id="e3ca3a5141d9967c701776eca46ec10c9e635787" translate="yes" xml:space="preserve">
          <source>We can specify any byte in a short literal string by its numeric value (including embedded zeros). This can be done with the escape sequence &lt;code&gt;\x&lt;em&gt;XX&lt;/em&gt;&lt;/code&gt;, where &lt;em&gt;XX&lt;/em&gt; is a sequence of exactly two hexadecimal digits, or with the escape sequence &lt;code&gt;\&lt;em&gt;ddd&lt;/em&gt;&lt;/code&gt;, where &lt;em&gt;ddd&lt;/em&gt; is a sequence of up to three decimal digits. (Note that if a decimal escape sequence is to be followed by a digit, it must be expressed using exactly three digits.)</source>
          <target state="translated">我们可以通过文字字符串的数字值（包括嵌入的零）来指定任何字节。这可以通过转义序列 &lt;code&gt;\x&lt;em&gt;XX&lt;/em&gt;&lt;/code&gt; 来完成，其中&lt;em&gt;XX&lt;/em&gt;是正好是两个十六进制数字的序列，或者可以使用转义序列 &lt;code&gt;\&lt;em&gt;ddd&lt;/em&gt;&lt;/code&gt; ，其中&lt;em&gt;ddd&lt;/em&gt;是最多三个十进制数字的序列。 （请注意，如果十进制转义序列后跟一个数字，则必须使用正好三位数字表示。）</target>
        </trans-unit>
        <trans-unit id="a75447b7504738d77e48aaf615cad9ff4faa5f14" translate="yes" xml:space="preserve">
          <source>We need to set some terminology to explain continuations. We have a C function called from Lua which we will call the &lt;em&gt;original function&lt;/em&gt;. This original function then calls one of those three functions in the C API, which we will call the &lt;em&gt;callee function&lt;/em&gt;, that then yields the current thread. (This can happen when the callee function is &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt;, or when the callee function is either &lt;a href=&quot;#lua_callk&quot;&gt;&lt;code&gt;lua_callk&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#lua_pcallk&quot;&gt;&lt;code&gt;lua_pcallk&lt;/code&gt;&lt;/a&gt; and the function called by them yields.)</source>
          <target state="translated">我们需要设置一些术语来解释续集。我们有一个从Lua调用的C函数，我们将调用&lt;em&gt;原始函数&lt;/em&gt;。然后，该原始函数将调用C API中这三个函数之一，我们将调用&lt;em&gt;被调用函数&lt;/em&gt;，然后产生当前线程。（当被调用方函数是&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; &lt;/a&gt;或被调用方函数是&lt;a href=&quot;#lua_callk&quot;&gt; &lt;code&gt;lua_callk&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#lua_pcallk&quot;&gt; &lt;code&gt;lua_pcallk&lt;/code&gt; &lt;/a&gt;并且它们调用的函数产生时，可能会发生这种情况。）</target>
        </trans-unit>
        <trans-unit id="d41db10b358155f4f013d45b45675b34f33d9ed3" translate="yes" xml:space="preserve">
          <source>Weak Tables</source>
          <target state="translated">弱电表</target>
        </trans-unit>
        <trans-unit id="b484eff0d117b27e8defcec4a0326a877ca574fe" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;n&lt;/code&gt; is zero, this function creates a &lt;em&gt;light C function&lt;/em&gt;, which is just a pointer to the C function. In that case, it never raises a memory error.</source>
          <target state="translated">当 &lt;code&gt;n&lt;/code&gt; 为零时，此函数创建一个&lt;em&gt;light C函数&lt;/em&gt;，它只是C函数的指针。在这种情况下，它永远不会引发内存错误。</target>
        </trans-unit>
        <trans-unit id="996f3bf8346e25b1239b5ab5057ae46c604d1002" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;nsize&lt;/code&gt; is not zero, the allocator must behave like &lt;code&gt;realloc&lt;/code&gt;. The allocator returns &lt;code&gt;NULL&lt;/code&gt; if and only if it cannot fulfill the request. Lua assumes that the allocator never fails when &lt;code&gt;osize &amp;gt;= nsize&lt;/code&gt;.</source>
          <target state="translated">当 &lt;code&gt;nsize&lt;/code&gt; 不为零时，分配器的行为必须类似于 &lt;code&gt;realloc&lt;/code&gt; 。当且仅当分配器无法满足请求时，分配器才返回 &lt;code&gt;NULL&lt;/code&gt; 。Lua假定当 &lt;code&gt;osize &amp;gt;= nsize&lt;/code&gt; 时，分配器永远不会失败。</target>
        </trans-unit>
        <trans-unit id="be7cbd666142d4c0c3a8b1ac15f72ec90fcd56bb" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;nsize&lt;/code&gt; is zero, the allocator must behave like &lt;code&gt;free&lt;/code&gt; and return &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">当 &lt;code&gt;nsize&lt;/code&gt; 为零时，分配器的行为必须类似于 &lt;code&gt;free&lt;/code&gt; 并返回 &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="63de127a2c08c3b5f3fa7d7ca6251d5614a09288" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;nup&lt;/code&gt; is not zero, all functions are created sharing &lt;code&gt;nup&lt;/code&gt; upvalues, which must be previously pushed on the stack on top of the library table. These values are popped from the stack after the registration.</source>
          <target state="translated">当 &lt;code&gt;nup&lt;/code&gt; 不为零时，将创建所有共享 &lt;code&gt;nup&lt;/code&gt; 上值的函数，这些值必须事先被推入库表顶部的堆栈中。这些值在注册后从堆栈中弹出。</target>
        </trans-unit>
        <trans-unit id="335a5475dbcacbd9ecdd1054fd0513668a84ec31" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;ptr&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt;, &lt;code&gt;osize&lt;/code&gt; encodes the kind of object that Lua is allocating. &lt;code&gt;osize&lt;/code&gt; is any of &lt;a href=&quot;#pdf-LUA_TSTRING&quot;&gt;&lt;code&gt;LUA_TSTRING&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-LUA_TTABLE&quot;&gt;&lt;code&gt;LUA_TTABLE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-LUA_TFUNCTION&quot;&gt;&lt;code&gt;LUA_TFUNCTION&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-LUA_TUSERDATA&quot;&gt;&lt;code&gt;LUA_TUSERDATA&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#pdf-LUA_TTHREAD&quot;&gt;&lt;code&gt;LUA_TTHREAD&lt;/code&gt;&lt;/a&gt; when (and only when) Lua is creating a new object of that type. When &lt;code&gt;osize&lt;/code&gt; is some other value, Lua is allocating memory for something else.</source>
          <target state="translated">当 &lt;code&gt;ptr&lt;/code&gt; 为 &lt;code&gt;NULL&lt;/code&gt; 时， &lt;code&gt;osize&lt;/code&gt; 编码Lua分配的对象的类型。当（且仅当）Lua创建该类型的新对象时， &lt;code&gt;osize&lt;/code&gt; 是&lt;a href=&quot;#pdf-LUA_TSTRING&quot;&gt; &lt;code&gt;LUA_TSTRING&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#pdf-LUA_TTABLE&quot;&gt; &lt;code&gt;LUA_TTABLE&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#pdf-LUA_TFUNCTION&quot;&gt; &lt;code&gt;LUA_TFUNCTION&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#pdf-LUA_TUSERDATA&quot;&gt; &lt;code&gt;LUA_TUSERDATA&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#pdf-LUA_TTHREAD&quot;&gt; &lt;code&gt;LUA_TTHREAD&lt;/code&gt; 中的&lt;/a&gt;任何一个。当 &lt;code&gt;osize&lt;/code&gt; 是其他值时，Lua将为其他内容分配内存。</target>
        </trans-unit>
        <trans-unit id="46d45ecf04d4c4d9ebff91c3f78c309dab0e87ef" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;ptr&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, &lt;code&gt;osize&lt;/code&gt; is the size of the block pointed by &lt;code&gt;ptr&lt;/code&gt;, that is, the size given when it was allocated or reallocated.</source>
          <target state="translated">当 &lt;code&gt;ptr&lt;/code&gt; 不为 &lt;code&gt;NULL&lt;/code&gt; 时， &lt;code&gt;osize&lt;/code&gt; 是 &lt;code&gt;ptr&lt;/code&gt; 指向的块的大小，即分配或重新分配块时给出的大小。</target>
        </trans-unit>
        <trans-unit id="0344be77d1524703e63d720dcdc36380a6d9b380" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;t&lt;/code&gt; is a sequence, &lt;code&gt;#t&lt;/code&gt; returns its only border, which corresponds to the intuitive notion of the length of the sequence. When &lt;code&gt;t&lt;/code&gt; is not a sequence, &lt;code&gt;#t&lt;/code&gt; can return any of its borders. (The exact one depends on details of the internal representation of the table, which in turn can depend on how the table was populated and the memory addresses of its non-numeric keys.)</source>
          <target state="translated">当 &lt;code&gt;t&lt;/code&gt; 是一个序列， &lt;code&gt;#t&lt;/code&gt; 返回其仅边界，其对应于所述序列的长度的直观概念。当 &lt;code&gt;t&lt;/code&gt; 不是一个序列， &lt;code&gt;#t&lt;/code&gt; 可以返回任何其边界。（确切的一个取决于表的内部表示的详细信息，而表的内部表示又取决于表的填充方式及其非数字键的内存地址。）</target>
        </trans-unit>
        <trans-unit id="3c915266f11381b28c8d7b3533ebdd9fec110c77" translate="yes" xml:space="preserve">
          <source>When Lua loads a chunk, the default value for its &lt;code&gt;_ENV&lt;/code&gt; upvalue is the global environment (see &lt;a href=&quot;#pdf-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt;). Therefore, by default, free names in Lua code refer to entries in the global environment (and, therefore, they are also called &lt;em&gt;global variables&lt;/em&gt;). Moreover, all standard libraries are loaded in the global environment and some functions there operate on that environment. You can use &lt;a href=&quot;#pdf-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;#pdf-loadfile&quot;&gt;&lt;code&gt;loadfile&lt;/code&gt;&lt;/a&gt;) to load a chunk with a different environment. (In C, you have to load the chunk and then change the value of its first upvalue.)</source>
          <target state="translated">当Lua加载一个块时，其 &lt;code&gt;_ENV&lt;/code&gt; 上值的默认值是全局环境（请参见&lt;a href=&quot;#pdf-load&quot;&gt; &lt;code&gt;load&lt;/code&gt; &lt;/a&gt;）。因此，默认情况下，Lua代码中的自由名称引用全局环境中的条目（因此，它们也称为&lt;em&gt;全局变量&lt;/em&gt;）。此外，所有标准库都加载在全局环境中，并且其中的某些功能在该环境中运行。您可以使用&lt;a href=&quot;#pdf-load&quot;&gt; &lt;code&gt;load&lt;/code&gt; &lt;/a&gt;（或&lt;a href=&quot;#pdf-loadfile&quot;&gt; &lt;code&gt;loadfile&lt;/code&gt; &lt;/a&gt;）在不同的环境下加载块。 （在C语言中，您必须加载块，然后更改其第一个上值的值。）</target>
        </trans-unit>
        <trans-unit id="9bf5cddf64fd956b790dcd47186d571d0648ca7d" translate="yes" xml:space="preserve">
          <source>When a C function calls &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt;, the running coroutine suspends its execution, and the call to &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt; that started this coroutine returns. The parameter &lt;code&gt;nresults&lt;/code&gt; is the number of values from the stack that will be passed as results to &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当C函数调用&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; 时&lt;/a&gt;，正在运行的协程将暂停其执行，然后返回对启动此协程的&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt;的调用。参数 &lt;code&gt;nresults&lt;/code&gt; 是堆栈中作为结果传递给&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt;的值的数量。</target>
        </trans-unit>
        <trans-unit id="6587795ac24fa71cf1c2a7e27096b42bc7a40713" translate="yes" xml:space="preserve">
          <source>When a C function is created, it is possible to associate some values with it, thus creating a &lt;em&gt;C closure&lt;/em&gt; (see &lt;a href=&quot;#lua_pushcclosure&quot;&gt;&lt;code&gt;lua_pushcclosure&lt;/code&gt;&lt;/a&gt;); these values are called &lt;em&gt;upvalues&lt;/em&gt; and are accessible to the function whenever it is called.</source>
          <target state="translated">创建C函数时，可以将一些值与之关联，从而创建&lt;em&gt;C闭包&lt;/em&gt;（请参见&lt;a href=&quot;#lua_pushcclosure&quot;&gt; &lt;code&gt;lua_pushcclosure&lt;/code&gt; &lt;/a&gt;）。这些值被称为&lt;em&gt;upvalues&lt;/em&gt;而且每当它被调用的函数访问。</target>
        </trans-unit>
        <trans-unit id="11ab54e362e4ae46fe6b07e57d87eadd11f23cbe" translate="yes" xml:space="preserve">
          <source>When a C function is created, it is possible to associate some values with it, thus creating a C closure (see &lt;a href=&quot;#4.4&quot;&gt;&amp;sect;4.4&lt;/a&gt;); these values are then accessible to the function whenever it is called. To associate values with a C function, first these values must be pushed onto the stack (when there are multiple values, the first value is pushed first). Then &lt;a href=&quot;#lua_pushcclosure&quot;&gt;&lt;code&gt;lua_pushcclosure&lt;/code&gt;&lt;/a&gt; is called to create and push the C function onto the stack, with the argument &lt;code&gt;n&lt;/code&gt; telling how many values will be associated with the function. &lt;a href=&quot;#lua_pushcclosure&quot;&gt;&lt;code&gt;lua_pushcclosure&lt;/code&gt;&lt;/a&gt; also pops these values from the stack.</source>
          <target state="translated">创建C函数时，可以将一些值与其关联，从而创建C闭包（请参见&lt;a href=&quot;#4.4&quot;&gt;&amp;sect;4.4&lt;/a&gt;）。这些值可在调用函数时访问。要将值与C函数相关联，必须首先将这些值压入堆栈（当有多个值时，首先压入第一个值）。然后，调用&lt;a href=&quot;#lua_pushcclosure&quot;&gt; &lt;code&gt;lua_pushcclosure&lt;/code&gt; &lt;/a&gt;来创建C函数并将其推入堆栈，其中参数 &lt;code&gt;n&lt;/code&gt; 表示将与该函数关联多少个值。&lt;a href=&quot;#lua_pushcclosure&quot;&gt; &lt;code&gt;lua_pushcclosure&lt;/code&gt; &lt;/a&gt;还会从堆栈中弹出这些值。</target>
        </trans-unit>
        <trans-unit id="e078eea66272045084e3f01aa8c505b53aa0ead0" translate="yes" xml:space="preserve">
          <source>When a function is called, the list of arguments is adjusted to the length of the list of parameters, unless the function is a &lt;em&gt;vararg function&lt;/em&gt;, which is indicated by three dots ('&lt;code&gt;...&lt;/code&gt;') at the end of its parameter list. A vararg function does not adjust its argument list; instead, it collects all extra arguments and supplies them to the function through a &lt;em&gt;vararg expression&lt;/em&gt;, which is also written as three dots. The value of this expression is a list of all actual extra arguments, similar to a function with multiple results. If a vararg expression is used inside another expression or in the middle of a list of expressions, then its return list is adjusted to one element. If the expression is used as the last element of a list of expressions, then no adjustment is made (unless that last expression is enclosed in parentheses).</source>
          <target state="translated">调用函数时，除非函数是&lt;em&gt;vararg函数&lt;/em&gt;，否则将参数列表调整为参数列表的长度，该函数由参数列表末尾的三个点（' &lt;code&gt;...&lt;/code&gt; '）表示。 vararg函数不会调整其参数列表。相反，它将收集所有额外的参数，并通过&lt;em&gt;vararg表达式&lt;/em&gt;将其提供给函数&lt;em&gt;&lt;/em&gt;，也被写成三个点。该表达式的值是所有实际额外参数的列表，类似于具有多个结果的函数。如果在另一个表达式内部或表达式列表中间使用了vararg表达式，则将其返回列表调整为一个元素。如果将表达式用作表达式列表的最后一个元素，则不会进行任何调整（除非最后一个表达式括在括号中）。</target>
        </trans-unit>
        <trans-unit id="da6fe573488f94135e6cdc83d520dc4a94e938c8" translate="yes" xml:space="preserve">
          <source>When a marked object becomes garbage, it is not collected immediately by the garbage collector. Instead, Lua puts it in a list. After the collection, Lua goes through that list. For each object in the list, it checks the object's &lt;code&gt;__gc&lt;/code&gt; metamethod: If it is a function, Lua calls it with the object as its single argument; if the metamethod is not a function, Lua simply ignores it.</source>
          <target state="translated">当标记的对象成为垃圾时，垃圾收集器不会立即对其进行收集。相反，Lua将其放在列表中。收集之后，Lua将遍历该列表。对于列表中的每个对象，它检查对象的 &lt;code&gt;__gc&lt;/code&gt; 元方法：如果是函数，则Lua将该对象作为其单个参数调用它；如果元方法不是函数，则Lua会忽略它。</target>
        </trans-unit>
        <trans-unit id="80897f837555b95f2cb104a59226a4a40d8e481f" translate="yes" xml:space="preserve">
          <source>When called with &lt;b&gt;nil&lt;/b&gt; as the first argument, this function only returns the name of the current locale for the given category.</source>
          <target state="translated">以&lt;b&gt;nil&lt;/b&gt;作为第一个参数调用时，此函数仅返回给定类别的当前语言环境的名称。</target>
        </trans-unit>
        <trans-unit id="641f9e62059a652c6e39c5a7f8f27534a9246ba4" translate="yes" xml:space="preserve">
          <source>When called with &lt;code&gt;base&lt;/code&gt;, then &lt;code&gt;e&lt;/code&gt; must be a string to be interpreted as an integer numeral in that base. The base may be any integer between 2 and 36, inclusive. In bases above 10, the letter '&lt;code&gt;A&lt;/code&gt;' (in either upper or lower case) represents 10, '&lt;code&gt;B&lt;/code&gt;' represents 11, and so forth, with '&lt;code&gt;Z&lt;/code&gt;' representing 35. If the string &lt;code&gt;e&lt;/code&gt; is not a valid numeral in the given base, the function returns &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">当使用 &lt;code&gt;base&lt;/code&gt; 调用时， &lt;code&gt;e&lt;/code&gt; 必须是一个字符串，才能在该base中解释为整数。基数可以是2到36（含2和36）之间的任何整数。在大于10的基数中，字母&amp;ldquo; &lt;code&gt;A&lt;/code&gt; &amp;rdquo;（大写或小写）表示10，&amp;ldquo; &lt;code&gt;B&lt;/code&gt; &amp;rdquo;表示11，以此类推，&amp;ldquo; &lt;code&gt;Z&lt;/code&gt; &amp;rdquo;表示35。如果字符串 &lt;code&gt;e&lt;/code&gt; 在给定的值中不是有效数字base，该函数返回&lt;b&gt;nil&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="ae1235a6e1b0d97767a88001b252dc354fc4428a" translate="yes" xml:space="preserve">
          <source>When called with a file name, it opens the named file (in text mode), and sets its handle as the default input file. When called with a file handle, it simply sets this file handle as the default input file. When called without parameters, it returns the current default input file.</source>
          <target state="translated">当用文件名调用时,它打开命名的文件(在文本模式下),并将其句柄设置为默认的输入文件。当使用文件句柄调用时,它只是简单地将这个文件句柄设置为默认输入文件。当不使用参数调用时,它返回当前的默认输入文件。</target>
        </trans-unit>
        <trans-unit id="0331839def59d1c279589644566be45521e46878" translate="yes" xml:space="preserve">
          <source>When called with no &lt;code&gt;base&lt;/code&gt;, &lt;code&gt;tonumber&lt;/code&gt; tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then &lt;code&gt;tonumber&lt;/code&gt; returns this number; otherwise, it returns &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">如果没有所谓的 &lt;code&gt;base&lt;/code&gt; ， &lt;code&gt;tonumber&lt;/code&gt; 尝试它的参数转换为数字。如果参数已经是数字或可转换为数字的字符串，则 &lt;code&gt;tonumber&lt;/code&gt; 返回此数字；否则，返回&lt;b&gt;nil&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="e694403948e49c3cdfc8883a69a69e59e1e2c12c" translate="yes" xml:space="preserve">
          <source>When called with option &lt;code&gt;-E&lt;/code&gt;, besides ignoring &lt;code&gt;LUA_INIT&lt;/code&gt;, Lua also ignores the values of &lt;code&gt;LUA_PATH&lt;/code&gt; and &lt;code&gt;LUA_CPATH&lt;/code&gt;, setting the values of &lt;a href=&quot;#pdf-package.path&quot;&gt;&lt;code&gt;package.path&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pdf-package.cpath&quot;&gt;&lt;code&gt;package.cpath&lt;/code&gt;&lt;/a&gt; with the default paths defined in &lt;code&gt;luaconf.h&lt;/code&gt;.</source>
          <target state="translated">当使用选项 &lt;code&gt;-E&lt;/code&gt; 调用时，除了忽略 &lt;code&gt;LUA_INIT&lt;/code&gt; 之外，Lua还将忽略 &lt;code&gt;LUA_PATH&lt;/code&gt; 和 &lt;code&gt;LUA_CPATH&lt;/code&gt; 的值，并使用 &lt;code&gt;luaconf.h&lt;/code&gt; 中定义的默认路径设置&lt;a href=&quot;#pdf-package.path&quot;&gt; &lt;code&gt;package.path&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#pdf-package.cpath&quot;&gt; &lt;code&gt;package.cpath&lt;/code&gt; &lt;/a&gt;的值。</target>
        </trans-unit>
        <trans-unit id="de667989e59831a06657a1b7bb1953b9b2690bfc" translate="yes" xml:space="preserve">
          <source>When called without a &lt;code&gt;command&lt;/code&gt;, &lt;code&gt;os.execute&lt;/code&gt; returns a boolean that is true if a shell is available.</source>
          <target state="translated">如果在没有 &lt;code&gt;command&lt;/code&gt; 情况下调用 &lt;code&gt;os.execute&lt;/code&gt; ，则返回一个布尔值，如果有可用的shell，则为true。</target>
        </trans-unit>
        <trans-unit id="08516ebb937ecdc973de2d47f44995af938578a2" translate="yes" xml:space="preserve">
          <source>When called without arguments, &lt;a href=&quot;#pdf-debug.sethook&quot;&gt;&lt;code&gt;debug.sethook&lt;/code&gt;&lt;/a&gt; turns off the hook.</source>
          <target state="translated">当不带参数调用时，&lt;a href=&quot;#pdf-debug.sethook&quot;&gt; &lt;code&gt;debug.sethook&lt;/code&gt; &lt;/a&gt;将关闭钩子。</target>
        </trans-unit>
        <trans-unit id="8dfc7d66f66b8d42b0606debc6628a523caba4e4" translate="yes" xml:space="preserve">
          <source>When called without arguments, &lt;code&gt;date&lt;/code&gt; returns a reasonable date and time representation that depends on the host system and on the current locale. (More specifically, &lt;code&gt;os.date()&lt;/code&gt; is equivalent to &lt;code&gt;os.date(&quot;%c&quot;)&lt;/code&gt;.)</source>
          <target state="translated">在不带参数的情况下调用 &lt;code&gt;date&lt;/code&gt; 时,将返回一个合理的日期和时间表示形式，该表示形式取决于主机系统和当前的语言环境。（更具体地说， &lt;code&gt;os.date()&lt;/code&gt; 等效于 &lt;code&gt;os.date(&quot;%c&quot;)&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="c64be510d7a1b577fd35233990dcc39ace49bc5f" translate="yes" xml:space="preserve">
          <source>When called without arguments, returns a pseudo-random float with uniform distribution in the range &lt;em&gt;[0,1)&lt;/em&gt;. When called with two integers &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;math.random&lt;/code&gt; returns a pseudo-random integer with uniform distribution in the range &lt;em&gt;[m, n]&lt;/em&gt;. (The value &lt;em&gt;n-m&lt;/em&gt; cannot be negative and must fit in a Lua integer.) The call &lt;code&gt;math.random(n)&lt;/code&gt; is equivalent to &lt;code&gt;math.random(1,n)&lt;/code&gt;.</source>
          <target state="translated">如果不带参数调用，则返回伪随机浮点数，该浮点数的均匀分布范围为&lt;em&gt;[0,1）&lt;/em&gt;。当使用两个整数 &lt;code&gt;m&lt;/code&gt; 和 &lt;code&gt;n&lt;/code&gt; 调用时， &lt;code&gt;math.random&lt;/code&gt; 返回一个伪随机整数，该伪随机整数具有&lt;em&gt;[m，n]&lt;/em&gt;范围内的均匀分布。 （值&lt;em&gt;nm&lt;/em&gt;不能为负，并且必须适合Lua整数。）调用 &lt;code&gt;math.random(n)&lt;/code&gt; 等效于 &lt;code&gt;math.random(1,n)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29766b7237675cb97603d39839cfd67a198b7d0e" translate="yes" xml:space="preserve">
          <source>When called without option &lt;code&gt;-E&lt;/code&gt;, the interpreter checks for an environment variable &lt;a id=&quot;pdf-LUA_INIT_5_3&quot;&gt;&lt;code&gt;LUA_INIT_5_3&lt;/code&gt;&lt;/a&gt; (or &lt;a id=&quot;pdf-LUA_INIT&quot;&gt;&lt;code&gt;LUA_INIT&lt;/code&gt;&lt;/a&gt; if the versioned name is not defined) before running any argument. If the variable content has the format &lt;code&gt;@&lt;em&gt;filename&lt;/em&gt;&lt;/code&gt;, then &lt;code&gt;lua&lt;/code&gt; executes the file. Otherwise, &lt;code&gt;lua&lt;/code&gt; executes the string itself.</source>
          <target state="translated">当不带选项称为 &lt;code&gt;-E&lt;/code&gt; ，对于环境变量解释检查&lt;a id=&quot;pdf-LUA_INIT_5_3&quot;&gt; &lt;code&gt;LUA_INIT_5_3&lt;/code&gt; &lt;/a&gt;（或&lt;a id=&quot;pdf-LUA_INIT&quot;&gt; &lt;code&gt;LUA_INIT&lt;/code&gt; &lt;/a&gt;运行任何参数之前，如果版本名称没有定义）。如果变量内容的格式为 &lt;code&gt;@&lt;em&gt;filename&lt;/em&gt;&lt;/code&gt; ，则 &lt;code&gt;lua&lt;/code&gt; 执行该文件。否则， &lt;code&gt;lua&lt;/code&gt; 会执行字符串本身。</target>
        </trans-unit>
        <trans-unit id="30a01c66de0f50f818dc4c5eb18a31a7ce0c4e4f" translate="yes" xml:space="preserve">
          <source>When closing a file handle created with &lt;a href=&quot;#pdf-io.popen&quot;&gt;&lt;code&gt;io.popen&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-file:close&quot;&gt;&lt;code&gt;file:close&lt;/code&gt;&lt;/a&gt; returns the same values returned by &lt;a href=&quot;#pdf-os.execute&quot;&gt;&lt;code&gt;os.execute&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当关闭与创建的文件句柄&lt;a href=&quot;#pdf-io.popen&quot;&gt; &lt;code&gt;io.popen&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#pdf-file:close&quot;&gt; &lt;code&gt;file:close&lt;/code&gt; &lt;/a&gt;返回相同的值返回由&lt;a href=&quot;#pdf-os.execute&quot;&gt; &lt;code&gt;os.execute&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="37e9db54045b382cd01f62245d15a65082274498" translate="yes" xml:space="preserve">
          <source>When finishing normally, the interpreter closes its main Lua state (see &lt;a href=&quot;#lua_close&quot;&gt;&lt;code&gt;lua_close&lt;/code&gt;&lt;/a&gt;). The script can avoid this step by calling &lt;a href=&quot;#pdf-os.exit&quot;&gt;&lt;code&gt;os.exit&lt;/code&gt;&lt;/a&gt; to terminate.</source>
          <target state="translated">正常完成后，解释器将关闭其主要Lua状态（请参见&lt;a href=&quot;#lua_close&quot;&gt; &lt;code&gt;lua_close&lt;/code&gt; &lt;/a&gt;）。该脚本可以通过调用&lt;a href=&quot;#pdf-os.exit&quot;&gt; &lt;code&gt;os.exit&lt;/code&gt; &lt;/a&gt;终止来避免此步骤。</target>
        </trans-unit>
        <trans-unit id="05829140d113fda20398a82789b93e3ec1b75792" translate="yes" xml:space="preserve">
          <source>When possible, you may prefer to use &lt;a href=&quot;#pdf-io.tmpfile&quot;&gt;&lt;code&gt;io.tmpfile&lt;/code&gt;&lt;/a&gt;, which automatically removes the file when the program ends.</source>
          <target state="translated">如果可能，您可能更喜欢使用&lt;a href=&quot;#pdf-io.tmpfile&quot;&gt; &lt;code&gt;io.tmpfile&lt;/code&gt; &lt;/a&gt;，它会在程序结束时自动删除该文件。</target>
        </trans-unit>
        <trans-unit id="e0d813e63ce1dec1bf88d125498265fe1c745f04" translate="yes" xml:space="preserve">
          <source>When the coroutine is resumed again, Lua calls the given continuation function &lt;code&gt;k&lt;/code&gt; to continue the execution of the C function that yielded (see &lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;). This continuation function receives the same stack from the previous function, with the &lt;code&gt;n&lt;/code&gt; results removed and replaced by the arguments passed to &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt;. Moreover, the continuation function receives the value &lt;code&gt;ctx&lt;/code&gt; that was passed to &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当协程再次恢复时，Lua调用给定的延续函数 &lt;code&gt;k&lt;/code&gt; 继续执行产生的C函数（请参见&lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;）。此延续函数与上一个函数接收相同的堆栈，其中 &lt;code&gt;n&lt;/code&gt; 个结果已删除，并由传递给&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt;的参数替换。此外，延续函数接收传递给&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; &lt;/a&gt;的值 &lt;code&gt;ctx&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4c6a10ad01c056a56db07a26afc7431181db765d" translate="yes" xml:space="preserve">
          <source>When the hook is called, its first parameter is a string describing the event that has triggered its call: &lt;code&gt;&quot;call&quot;&lt;/code&gt; (or &lt;code&gt;&quot;tail call&quot;&lt;/code&gt;), &lt;code&gt;&quot;return&quot;&lt;/code&gt;, &lt;code&gt;&quot;line&quot;&lt;/code&gt;, and &lt;code&gt;&quot;count&quot;&lt;/code&gt;. For line events, the hook also gets the new line number as its second parameter. Inside a hook, you can call &lt;code&gt;getinfo&lt;/code&gt; with level 2 to get more information about the running function (level 0 is the &lt;code&gt;getinfo&lt;/code&gt; function, and level 1 is the hook function).</source>
          <target state="translated">当钩子被调用时，它的第一个参数是描述触发其调用的事件的字符串： &lt;code&gt;&quot;call&quot;&lt;/code&gt; （或 &lt;code&gt;&quot;tail call&quot;&lt;/code&gt; ）， &lt;code&gt;&quot;return&quot;&lt;/code&gt; ， &lt;code&gt;&quot;line&quot;&lt;/code&gt; 和 &lt;code&gt;&quot;count&quot;&lt;/code&gt; 。对于线路事件，该钩子还将获取新的线路号作为其第二个参数。在挂钩内，您可以使用级别2 调用 &lt;code&gt;getinfo&lt;/code&gt; 以获得有关正在运行的函数的更多信息（级别0是 &lt;code&gt;getinfo&lt;/code&gt; 函数，级别1是挂钩函数）。</target>
        </trans-unit>
        <trans-unit id="eaa8e9df04a952020bd076482c3d60135f7f329c" translate="yes" xml:space="preserve">
          <source>When using implicit file handles, all operations are supplied by table &lt;a id=&quot;pdf-io&quot;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;. When using explicit file handles, the operation &lt;a href=&quot;#pdf-io.open&quot;&gt;&lt;code&gt;io.open&lt;/code&gt;&lt;/a&gt; returns a file handle and then all operations are supplied as methods of the file handle.</source>
          <target state="translated">使用隐式文件句柄时，所有操作均由表&lt;a id=&quot;pdf-io&quot;&gt; &lt;code&gt;io&lt;/code&gt; 提供&lt;/a&gt;。使用显式文件句柄时，操作&lt;a href=&quot;#pdf-io.open&quot;&gt; &lt;code&gt;io.open&lt;/code&gt; &lt;/a&gt;返回文件句柄，然后所有操作均作为文件句柄的方法提供。</target>
        </trans-unit>
        <trans-unit id="66e7217ccc689c6dec071df236389bbeca36a0c9" translate="yes" xml:space="preserve">
          <source>When you call a Lua function without a fixed number of results (see &lt;a href=&quot;#lua_call&quot;&gt;&lt;code&gt;lua_call&lt;/code&gt;&lt;/a&gt;), Lua ensures that the stack has enough space for all results, but it does not ensure any extra space. So, before pushing anything in the stack after such a call you should use &lt;a href=&quot;#lua_checkstack&quot;&gt;&lt;code&gt;lua_checkstack&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当您调用没有固定结果数的Lua函数时（请参见&lt;a href=&quot;#lua_call&quot;&gt; &lt;code&gt;lua_call&lt;/code&gt; &lt;/a&gt;），Lua确保堆栈具有足够的空间来容纳所有结果，但不能确保任何额外的空间。因此，在调用之后将任何东西压入堆栈之前，您应该使用&lt;a href=&quot;#lua_checkstack&quot;&gt; &lt;code&gt;lua_checkstack&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0fac89278e16d9cfb7afed920548790f04b59edb" translate="yes" xml:space="preserve">
          <source>When you close a state (see &lt;a href=&quot;#lua_close&quot;&gt;&lt;code&gt;lua_close&lt;/code&gt;&lt;/a&gt;), Lua calls the finalizers of all objects marked for finalization, following the reverse order that they were marked. If any finalizer marks objects for collection during that phase, these marks have no effect.</source>
          <target state="translated">当关闭状态时（请参见&lt;a href=&quot;#lua_close&quot;&gt; &lt;code&gt;lua_close&lt;/code&gt; &lt;/a&gt;），Lua会按照标记它们的相反顺序调用标记为终结的所有对象的终结器。如果在该阶段有任何终结器标记要收集的对象，则这些标记无效。</target>
        </trans-unit>
        <trans-unit id="bfa2a1bee37ec1b8b5edb99fbbb2457d178207e5" translate="yes" xml:space="preserve">
          <source>When you create a new Lua state, its registry comes with some predefined values. These predefined values are indexed with integer keys defined as constants in &lt;code&gt;lua.h&lt;/code&gt;. The following constants are defined:</source>
          <target state="translated">创建新的Lua状态时，其注册表会附带一些预定义的值。这些预定义的值用在 &lt;code&gt;lua.h&lt;/code&gt; 中定义为常量的整数键索引。定义了以下常量：</target>
        </trans-unit>
        <trans-unit id="7355d5bd1b6984cb05bdf3acfb6f9c1a447b9f50" translate="yes" xml:space="preserve">
          <source>When you interact with the Lua API, you are responsible for ensuring consistency. In particular, &lt;em&gt;you are responsible for controlling stack overflow&lt;/em&gt;. You can use the function &lt;a href=&quot;#lua_checkstack&quot;&gt;&lt;code&gt;lua_checkstack&lt;/code&gt;&lt;/a&gt; to ensure that the stack has enough space for pushing new elements.</source>
          <target state="translated">与Lua API交互时，您有责任确保一致性。特别是，&lt;em&gt;您负责控制堆栈溢出&lt;/em&gt;。您可以使用函数&lt;a href=&quot;#lua_checkstack&quot;&gt; &lt;code&gt;lua_checkstack&lt;/code&gt; &lt;/a&gt;来确保堆栈具有足够的空间来推送新元素。</target>
        </trans-unit>
        <trans-unit id="1e8b32f8352fd78bcc7ec48884a68493230c9360" translate="yes" xml:space="preserve">
          <source>When you run it, it produces the following output:</source>
          <target state="translated">当你运行它时,它会产生以下输出。</target>
        </trans-unit>
        <trans-unit id="59fc39a27b959170f68fd36bc3ff7103614c868a" translate="yes" xml:space="preserve">
          <source>When you use &lt;a href=&quot;#pdf-xpcall&quot;&gt;&lt;code&gt;xpcall&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt;, you may give a &lt;em&gt;message handler&lt;/em&gt; to be called in case of errors. This function is called with the original error object and returns a new error object. It is called before the error unwinds the stack, so that it can gather more information about the error, for instance by inspecting the stack and creating a stack traceback. This message handler is still protected by the protected call; so, an error inside the message handler will call the message handler again. If this loop goes on for too long, Lua breaks it and returns an appropriate message. (The message handler is called only for regular runtime errors. It is not called for memory-allocation errors nor for errors while running finalizers.)</source>
          <target state="translated">当使用&lt;a href=&quot;#pdf-xpcall&quot;&gt; &lt;code&gt;xpcall&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; 时&lt;/a&gt;，可以提供一个&lt;em&gt;消息处理程序&lt;/em&gt;，以防发生错误。原始错误对象将调用此函数，并返回新的错误对象。在错误展开堆栈之前调用它，以便它可以收集有关错误的更多信息，例如，通过检查堆栈并创建堆栈回溯。此消息处理程序仍受受保护的调用的保护；因此，消息处理程序内部的错误将再次调用消息处理程序。如果此循环持续的时间过长，Lua会将其中断并返回一条适当的消息。 （仅针对常规运行时错误调用消息处理程序。不针对内存分配错误或运行终结器时的错误调用消息处理程序。）</target>
        </trans-unit>
        <trans-unit id="15a645bbcf65be028c994caf05ae49cc42785d58" translate="yes" xml:space="preserve">
          <source>Whenever Lua calls C, it ensures that the stack has space for at least &lt;a id=&quot;pdf-LUA_MINSTACK&quot;&gt;&lt;code&gt;LUA_MINSTACK&lt;/code&gt;&lt;/a&gt; extra slots. &lt;code&gt;LUA_MINSTACK&lt;/code&gt; is defined as 20, so that usually you do not have to worry about stack space unless your code has loops pushing elements onto the stack.</source>
          <target state="translated">每当Lua调用C时，它都会确保堆栈至少有&lt;a id=&quot;pdf-LUA_MINSTACK&quot;&gt; &lt;code&gt;LUA_MINSTACK&lt;/code&gt; 个&lt;/a&gt;额外插槽的空间。 &lt;code&gt;LUA_MINSTACK&lt;/code&gt; 定义为20，因此通常您不必担心堆栈空间，除非您的代码具有将元素推入堆栈的循环。</target>
        </trans-unit>
        <trans-unit id="bc36795858181bb669bdb65cc9b9976ecc560ce7" translate="yes" xml:space="preserve">
          <source>Whenever Lua calls C, the called function gets a new stack, which is independent of previous stacks and of stacks of C functions that are still active. This stack initially contains any arguments to the C function and it is where the C function can store temporary Lua values and must push its results to be returned to the caller (see &lt;a href=&quot;#lua_CFunction&quot;&gt;&lt;code&gt;lua_CFunction&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">每当Lua调用C时，被调用函数都会获得一个新的堆栈，该堆栈独立于先前的堆栈和仍处于活动状态的C函数的堆栈。该堆栈最初包含C函数的任何参数，并且C函数可以在其中存储临时Lua值，并且必须将其结果压入返回给调用者（请参见&lt;a href=&quot;#lua_CFunction&quot;&gt; &lt;code&gt;lua_CFunction&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="0194275f7fed5a9af0589750161f145316d9d8f8" translate="yes" xml:space="preserve">
          <source>Whenever a C function is called, its upvalues are located at specific pseudo-indices. These pseudo-indices are produced by the macro &lt;a href=&quot;#lua_upvalueindex&quot;&gt;&lt;code&gt;lua_upvalueindex&lt;/code&gt;&lt;/a&gt;. The first upvalue associated with a function is at index &lt;code&gt;lua_upvalueindex(1)&lt;/code&gt;, and so on. Any access to &lt;code&gt;lua_upvalueindex(&lt;em&gt;n&lt;/em&gt;)&lt;/code&gt;, where &lt;em&gt;n&lt;/em&gt; is greater than the number of upvalues of the current function (but not greater than 256, which is one plus the maximum number of upvalues in a closure), produces an acceptable but invalid index.</source>
          <target state="translated">每当调用C函数时，其上值都位于特定的伪索引处。这些伪索引由宏&lt;a href=&quot;#lua_upvalueindex&quot;&gt; &lt;code&gt;lua_upvalueindex&lt;/code&gt; &lt;/a&gt;产生。与函数关联的第一个升值在索引 &lt;code&gt;lua_upvalueindex(1)&lt;/code&gt; 上，依此类推。对 &lt;code&gt;lua_upvalueindex(&lt;em&gt;n&lt;/em&gt;)&lt;/code&gt; 的任何访问（其中&lt;em&gt;n&lt;/em&gt;大于当前函数的升值数量（但不大于256，这是一个值加上闭包中最大升值的最大数量））都会产生可接受但无效的索引。</target>
        </trans-unit>
        <trans-unit id="7b599885fcde567666ae50c3832fa9901f1faa95" translate="yes" xml:space="preserve">
          <source>Whenever a hook is called, its &lt;code&gt;ar&lt;/code&gt; argument has its field &lt;code&gt;event&lt;/code&gt; set to the specific event that triggered the hook. Lua identifies these events with the following constants: &lt;a id=&quot;pdf-LUA_HOOKCALL&quot;&gt;&lt;code&gt;LUA_HOOKCALL&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_HOOKRET&quot;&gt;&lt;code&gt;LUA_HOOKRET&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_HOOKTAILCALL&quot;&gt;&lt;code&gt;LUA_HOOKTAILCALL&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_HOOKLINE&quot;&gt;&lt;code&gt;LUA_HOOKLINE&lt;/code&gt;&lt;/a&gt;, and &lt;a id=&quot;pdf-LUA_HOOKCOUNT&quot;&gt;&lt;code&gt;LUA_HOOKCOUNT&lt;/code&gt;&lt;/a&gt;. Moreover, for line events, the field &lt;code&gt;currentline&lt;/code&gt; is also set. To get the value of any other field in &lt;code&gt;ar&lt;/code&gt;, the hook must call &lt;a href=&quot;#lua_getinfo&quot;&gt;&lt;code&gt;lua_getinfo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">每当调用挂钩时，其 &lt;code&gt;ar&lt;/code&gt; 参数会将其字段 &lt;code&gt;event&lt;/code&gt; 设置为触发该挂钩的特定事件。Lua使用以下常量标识这些事件：&lt;a id=&quot;pdf-LUA_HOOKCALL&quot;&gt; &lt;code&gt;LUA_HOOKCALL&lt;/code&gt; &lt;/a&gt;，&lt;a id=&quot;pdf-LUA_HOOKRET&quot;&gt; &lt;code&gt;LUA_HOOKRET&lt;/code&gt; &lt;/a&gt;，&lt;a id=&quot;pdf-LUA_HOOKTAILCALL&quot;&gt; &lt;code&gt;LUA_HOOKTAILCALL&lt;/code&gt; &lt;/a&gt;，&lt;a id=&quot;pdf-LUA_HOOKLINE&quot;&gt; &lt;code&gt;LUA_HOOKLINE&lt;/code&gt; &lt;/a&gt;和&lt;a id=&quot;pdf-LUA_HOOKCOUNT&quot;&gt; &lt;code&gt;LUA_HOOKCOUNT&lt;/code&gt; &lt;/a&gt;。此外，对于线路事件，还将设置字段 &lt;code&gt;currentline&lt;/code&gt; 。为了获取 &lt;code&gt;ar&lt;/code&gt; 中任何其他字段的值，该挂钩必须调用&lt;a href=&quot;#lua_getinfo&quot;&gt; &lt;code&gt;lua_getinfo&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="77a4ffdfeb7ea6979c398f6e32e8da8ff060ce91" translate="yes" xml:space="preserve">
          <source>Whenever there is a &lt;code&gt;__newindex&lt;/code&gt; metamethod, Lua does not perform the primitive assignment. (If necessary, the metamethod itself can call &lt;a href=&quot;#pdf-rawset&quot;&gt;&lt;code&gt;rawset&lt;/code&gt;&lt;/a&gt; to do the assignment.)</source>
          <target state="translated">每当有 &lt;code&gt;__newindex&lt;/code&gt; 元方法时，Lua都不执行原始分配。（如果需要，元方法本身可以调用&lt;a href=&quot;#pdf-rawset&quot;&gt; &lt;code&gt;rawset&lt;/code&gt; &lt;/a&gt;进行分配。）</target>
        </trans-unit>
        <trans-unit id="380018403674372e84fb15d5ec3167aa3cf9c5cb" translate="yes" xml:space="preserve">
          <source>Whenever there is an error, an &lt;em&gt;error object&lt;/em&gt; (also called an &lt;em&gt;error message&lt;/em&gt;) is propagated with information about the error. Lua itself only generates errors whose error object is a string, but programs may generate errors with any value as the error object. It is up to the Lua program or its host to handle such error objects.</source>
          <target state="translated">只要有错误，就会传播有关&lt;em&gt;错误信息&lt;/em&gt;的&lt;em&gt;错误对象&lt;/em&gt;（也称为&lt;em&gt;错误消息&lt;/em&gt;）。Lua本身只会生成错误对象，该错误的错误对象是字符串，但是程序可能会生成具有任何值的错误作为错误对象。Lua程序或其主机负责处理此类错误对象。</target>
        </trans-unit>
        <trans-unit id="272f9a8e241eb8a55a33970a98b804e3cbb2993b" translate="yes" xml:space="preserve">
          <source>While Lua is running a hook, it disables other calls to hooks. Therefore, if a hook calls back Lua to execute a function or a chunk, this execution occurs without any calls to hooks.</source>
          <target state="translated">当Lua运行一个钩子时,它禁用其他对钩子的调用。因此,如果一个钩子回调Lua来执行一个函数或一个块,这个执行将在没有任何钩子调用的情况下进行。</target>
        </trans-unit>
        <trans-unit id="768488e627b06a1ccd84c86d3762c984059da019" translate="yes" xml:space="preserve">
          <source>While traversing a table, do not call &lt;a href=&quot;#lua_tolstring&quot;&gt;&lt;code&gt;lua_tolstring&lt;/code&gt;&lt;/a&gt; directly on a key, unless you know that the key is actually a string. Recall that &lt;a href=&quot;#lua_tolstring&quot;&gt;&lt;code&gt;lua_tolstring&lt;/code&gt;&lt;/a&gt; may change the value at the given index; this confuses the next call to &lt;a href=&quot;#lua_next&quot;&gt;&lt;code&gt;lua_next&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在遍历表时，请勿直接在键上调用&lt;a href=&quot;#lua_tolstring&quot;&gt; &lt;code&gt;lua_tolstring&lt;/code&gt; &lt;/a&gt;，除非您知道键实际上是字符串。回想一下&lt;a href=&quot;#lua_tolstring&quot;&gt; &lt;code&gt;lua_tolstring&lt;/code&gt; &lt;/a&gt;可能会更改给定索引处的值；这混淆了对&lt;a href=&quot;#lua_next&quot;&gt; &lt;code&gt;lua_next&lt;/code&gt; &lt;/a&gt;的下一次调用。</target>
        </trans-unit>
        <trans-unit id="518506b1bd272cc87115a976ea99ba83864b9064" translate="yes" xml:space="preserve">
          <source>With the exception of exponentiation and float division, the arithmetic operators work as follows: If both operands are integers, the operation is performed over integers and the result is an integer. Otherwise, if both operands are numbers or strings that can be converted to numbers (see &lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3&lt;/a&gt;), then they are converted to floats, the operation is performed following the usual rules for floating-point arithmetic (usually the IEEE 754 standard), and the result is a float.</source>
          <target state="translated">除求幂和浮点除法外，算术运算符的工作方式如下：如果两个操作数均为整数，则对整数进行运算，结果为整数。否则，如果两个操作数都是数字或可以转换为数字的字符串（请参见第&lt;a href=&quot;#3.4.3&quot;&gt;3.4.3节&lt;/a&gt;），然后将它们转换为浮点数，则将按照浮点算术的通常规则（通常是IEEE 754标准）执行操作。 ，结果是一个浮点数。</target>
        </trans-unit>
        <trans-unit id="ef23cb793be6d01c5592ed37d41262accad311cc" translate="yes" xml:space="preserve">
          <source>Writes the value of each of its arguments to &lt;code&gt;file&lt;/code&gt;. The arguments must be strings or numbers.</source>
          <target state="translated">将其每个参数的值写入 &lt;code&gt;file&lt;/code&gt; 。参数必须是字符串或数字。</target>
        </trans-unit>
        <trans-unit id="4b2eb6ac09b984e213b2d26d7367f553447ec91c" translate="yes" xml:space="preserve">
          <source>Yields a coroutine (thread).</source>
          <target state="translated">产生一个coroutine(线程)。</target>
        </trans-unit>
        <trans-unit id="4c14ae77965a71399e48d53e02bcb286bb93f6f2" translate="yes" xml:space="preserve">
          <source>You can also create and manipulate coroutines through the C API: see functions &lt;a href=&quot;#lua_newthread&quot;&gt;&lt;code&gt;lua_newthread&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#lua_yield&quot;&gt;&lt;code&gt;lua_yield&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">您还可以通过C API创建和操作协程：请参见函数&lt;a href=&quot;#lua_newthread&quot;&gt; &lt;code&gt;lua_newthread&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#lua_yield&quot;&gt; &lt;code&gt;lua_yield&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b7319a84c3be9c603d878df474f45dfa44f88afd" translate="yes" xml:space="preserve">
          <source>You can change the way that Lua compares tables and userdata by using the &quot;eq&quot; metamethod (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">您可以使用&amp;ldquo; eq&amp;rdquo;元方法来更改Lua比较表和用户数据的方式（请参见&lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="3102901d0caee19c958fcee9d58ed56ee554d4f9" translate="yes" xml:space="preserve">
          <source>You can change these numbers by calling &lt;a href=&quot;#lua_gc&quot;&gt;&lt;code&gt;lua_gc&lt;/code&gt;&lt;/a&gt; in C or &lt;a href=&quot;#pdf-collectgarbage&quot;&gt;&lt;code&gt;collectgarbage&lt;/code&gt;&lt;/a&gt; in Lua. You can also use these functions to control the collector directly (e.g., stop and restart it).</source>
          <target state="translated">你可以通过调用改变这些数字&lt;a href=&quot;#lua_gc&quot;&gt; &lt;code&gt;lua_gc&lt;/code&gt; &lt;/a&gt;在C或&lt;a href=&quot;#pdf-collectgarbage&quot;&gt; &lt;code&gt;collectgarbage&lt;/code&gt; &lt;/a&gt;在Lua。您也可以使用这些功能直接控制收集器（例如，停止并重新启动收集器）。</target>
        </trans-unit>
        <trans-unit id="1aa1c0455b97a9145781995effbd7a91d175f4dd" translate="yes" xml:space="preserve">
          <source>You can fix these differences by forcing a number to be a float (in Lua 5.2 all numbers were float), in particular writing constants with an ending &lt;code&gt;.0&lt;/code&gt; or using &lt;code&gt;x = x + 0.0&lt;/code&gt; to convert a variable. (This recommendation is only for a quick fix for an occasional incompatibility; it is not a general guideline for good programming. For good programming, use floats where you need floats and integers where you need integers.)</source>
          <target state="translated">您可以通过将数字强制为浮点数来解决这些差异（在Lua 5.2中，所有数字均为浮点数），尤其是编写以 &lt;code&gt;.0&lt;/code&gt; 结尾的常量或使用 &lt;code&gt;x = x + 0.0&lt;/code&gt; 转换变量。（此建议仅用于快速解决偶然的不兼容问题；它不是良好编程的一般准则。对于良好编程，请在需要浮点数的地方使用浮点数，在需要整数的地方使用整数。）</target>
        </trans-unit>
        <trans-unit id="6b9f9c8aada12f19e8959797fbd200469c989aaf" translate="yes" xml:space="preserve">
          <source>You can only call functions in threads with status &lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt;. You can resume threads with status &lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt; (to start a new coroutine) or &lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt;&lt;code&gt;LUA_YIELD&lt;/code&gt;&lt;/a&gt; (to resume a coroutine).</source>
          <target state="translated">您只能在状态为&lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; 的&lt;/a&gt;线程中调用函数。您可以恢复状态为&lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; &lt;/a&gt;（以启动新协程）或&lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt; &lt;code&gt;LUA_YIELD&lt;/code&gt; &lt;/a&gt;（以恢复协程）的线程。</target>
        </trans-unit>
        <trans-unit id="8061a68da1d074d2f5c5e92636b71ce2c9bfb53d" translate="yes" xml:space="preserve">
          <source>You can put a closing square bracket in a set by positioning it as the first character in the set. You can put an hyphen in a set by positioning it as the first or the last character in the set. (You can also use an escape for both cases.)</source>
          <target state="translated">您可以将一个方括号作为集合中的第一个字符放入集合中。你可以将连字符作为集合中的第一个或最后一个字符放入集合中。你也可以在这两种情况下使用转义符)。</target>
        </trans-unit>
        <trans-unit id="d2781e61b519fd47b1d4f450639555b1c01907b6" translate="yes" xml:space="preserve">
          <source>You can query the metatable of any value using the &lt;a href=&quot;#pdf-getmetatable&quot;&gt;&lt;code&gt;getmetatable&lt;/code&gt;&lt;/a&gt; function. Lua queries metamethods in metatables using a raw access (see &lt;a href=&quot;#pdf-rawget&quot;&gt;&lt;code&gt;rawget&lt;/code&gt;&lt;/a&gt;). So, to retrieve the metamethod for event &lt;code&gt;ev&lt;/code&gt; in object &lt;code&gt;o&lt;/code&gt;, Lua does the equivalent to the following code:</source>
          <target state="translated">您可以使用&lt;a href=&quot;#pdf-getmetatable&quot;&gt; &lt;code&gt;getmetatable&lt;/code&gt; &lt;/a&gt;函数查询任何值的元表。Lua使用原始访问来查询元表中的元方法（请参阅&lt;a href=&quot;#pdf-rawget&quot;&gt; &lt;code&gt;rawget&lt;/code&gt; &lt;/a&gt;）。因此，要检索对象 &lt;code&gt;o&lt;/code&gt; 中事件 &lt;code&gt;ev&lt;/code&gt; 的元方法，Lua等效于以下代码：</target>
        </trans-unit>
        <trans-unit id="d1dc46c8e9720bcf85f3abea3ac1cb55affdcb0d" translate="yes" xml:space="preserve">
          <source>You can replace the metatable of tables using the &lt;a href=&quot;#pdf-setmetatable&quot;&gt;&lt;code&gt;setmetatable&lt;/code&gt;&lt;/a&gt; function. You cannot change the metatable of other types from Lua code (except by using the debug library (&lt;a href=&quot;#6.10&quot;&gt;&amp;sect;6.10&lt;/a&gt;)); you should use the C API for that.</source>
          <target state="translated">您可以使用&lt;a href=&quot;#pdf-setmetatable&quot;&gt; &lt;code&gt;setmetatable&lt;/code&gt; &lt;/a&gt;函数替换表的元表。您不能从Lua代码更改其他类型的元表（除非使用调试库（第&lt;a href=&quot;#6.10&quot;&gt;6.10节&lt;/a&gt;））；您应该为此使用C API。</target>
        </trans-unit>
        <trans-unit id="7e58a48a2bbf52e5804761968441fe7ea238d5cc" translate="yes" xml:space="preserve">
          <source>You can set garbage-collector metamethods for tables and, using the C API, for full userdata (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;). These metamethods are also called &lt;em&gt;finalizers&lt;/em&gt;. Finalizers allow you to coordinate Lua's garbage collection with external resource management (such as closing files, network or database connections, or freeing your own memory).</source>
          <target state="translated">您可以为表设置垃圾收集器元方法，并使用C API设置完整的用户数据（请参见&lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;）。这些元方法也称为&lt;em&gt;终结器&lt;/em&gt;。使用终结器，您可以将Lua的垃圾回收与外部资源管理（例如，关闭文件，网络或数据库连接或释放自己的内存）进行协调。</target>
        </trans-unit>
        <trans-unit id="af1a4e1dd00034824534614f2bda7911ae8431cd" translate="yes" xml:space="preserve">
          <source>You can use &lt;b&gt;break&lt;/b&gt; and &lt;b&gt;goto&lt;/b&gt; to exit a &lt;b&gt;for&lt;/b&gt; loop.</source>
          <target state="translated">您可以使用&lt;b&gt;break&lt;/b&gt;和&lt;b&gt;goto&lt;/b&gt;退出&lt;b&gt;for&lt;/b&gt;循环。</target>
        </trans-unit>
        <trans-unit id="b27cc8080576c27c1dd2a0afb3a34a7a52ff85b8" translate="yes" xml:space="preserve">
          <source>You can use &lt;b&gt;break&lt;/b&gt; to exit a &lt;b&gt;for&lt;/b&gt; loop.</source>
          <target state="translated">您可以使用&lt;b&gt;break&lt;/b&gt;退出&lt;b&gt;for&lt;/b&gt;循环。</target>
        </trans-unit>
        <trans-unit id="d52df43ef083f76a03d8e01f3e9a36da3fc66f0d" translate="yes" xml:space="preserve">
          <source>You create a coroutine by calling &lt;a href=&quot;#pdf-coroutine.create&quot;&gt;&lt;code&gt;coroutine.create&lt;/code&gt;&lt;/a&gt;. Its sole argument is a function that is the main function of the coroutine. The &lt;code&gt;create&lt;/code&gt; function only creates a new coroutine and returns a handle to it (an object of type &lt;em&gt;thread&lt;/em&gt;); it does not start the coroutine.</source>
          <target state="translated">您可以通过调用&lt;a href=&quot;#pdf-coroutine.create&quot;&gt; &lt;code&gt;coroutine.create&lt;/code&gt; 来&lt;/a&gt;创建协程。它唯一的参数是协程的主要功能。在 &lt;code&gt;create&lt;/code&gt; 函数只创建一个新的协程，并返回它的句柄（类型的对象&lt;em&gt;线程&lt;/em&gt;）; 它不会启动协程。</target>
        </trans-unit>
        <trans-unit id="5ef445026cd0a146e81e995bc4681bfd5e57e5c5" translate="yes" xml:space="preserve">
          <source>You do not have to allocate space for the result: the result is a Lua string and Lua takes care of memory allocation (and deallocation, through garbage collection).</source>
          <target state="translated">你不需要为结果分配空间:结果是一个 Lua 字符串,Lua 负责内存分配(以及通过垃圾回收进行去分配)。</target>
        </trans-unit>
        <trans-unit id="76e561e2abeb8c3fca97fd50eca052b57e9c65f8" translate="yes" xml:space="preserve">
          <source>You execute a coroutine by calling &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt;. When you first call &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt;, passing as its first argument a thread returned by &lt;a href=&quot;#pdf-coroutine.create&quot;&gt;&lt;code&gt;coroutine.create&lt;/code&gt;&lt;/a&gt;, the coroutine starts its execution by calling its main function. Extra arguments passed to &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt; are passed as arguments to that function. After the coroutine starts running, it runs until it terminates or &lt;em&gt;yields&lt;/em&gt;.</source>
          <target state="translated">您可以通过调用&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;执行协程。当你第一次调用&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; 时&lt;/a&gt;，所需传入的第一个参数被返回的线程&lt;a href=&quot;#pdf-coroutine.create&quot;&gt; &lt;code&gt;coroutine.create&lt;/code&gt; 的&lt;/a&gt;，协程调用它的主要功能就开始执行它。传递给&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; 的&lt;/a&gt;额外参数将作为参数传递给该函数。协程开始运行后，它将运行直到终止或&lt;em&gt;屈服&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f53454c1d52c8e8625f900a3b2f28a52f9ab6262" translate="yes" xml:space="preserve">
          <source>_G</source>
          <target state="translated">_G</target>
        </trans-unit>
        <trans-unit id="2f7691c85ede2ffb322e774a60315181bf799f71" translate="yes" xml:space="preserve">
          <source>_VERSION</source>
          <target state="translated">_VERSION</target>
        </trans-unit>
        <trans-unit id="88f22daca599d25013aaf6d4c6cefa12b839e072" translate="yes" xml:space="preserve">
          <source>a single character class followed by '&lt;code&gt;*&lt;/code&gt;', which matches zero or more repetitions of characters in the class. These repetition items will always match the longest possible sequence;</source>
          <target state="translated">单个字符类，后跟' &lt;code&gt;*&lt;/code&gt; '，该字符类与零个或多个字符重复匹配。这些重复项将始终匹配最长的序列；</target>
        </trans-unit>
        <trans-unit id="9f3711be8dd7bfb74572554b6c7626ae533f6527" translate="yes" xml:space="preserve">
          <source>a single character class followed by '&lt;code&gt;+&lt;/code&gt;', which matches one or more repetitions of characters in the class. These repetition items will always match the longest possible sequence;</source>
          <target state="translated">单个字符类，后跟&amp;ldquo; &lt;code&gt;+&lt;/code&gt; &amp;rdquo;，它匹配该类中一个或多个字符的重复。这些重复项将始终匹配最长的序列；</target>
        </trans-unit>
        <trans-unit id="7c2c202847f17af45741edd719e4addc76505a81" translate="yes" xml:space="preserve">
          <source>a single character class followed by '&lt;code&gt;-&lt;/code&gt;', which also matches zero or more repetitions of characters in the class. Unlike '&lt;code&gt;*&lt;/code&gt;', these repetition items will always match the shortest possible sequence;</source>
          <target state="translated">单个字符类，后跟&amp;ldquo; &lt;code&gt;-&lt;/code&gt; &amp;rdquo;，它还与该类中的零个或多个字符重复匹配。与&amp;ldquo; &lt;code&gt;*&lt;/code&gt; &amp;rdquo; 不同，这些重复项将始终匹配最短的序列；</target>
        </trans-unit>
        <trans-unit id="237b908d85fd5486211190c63284fa599c924a55" translate="yes" xml:space="preserve">
          <source>a single character class followed by '&lt;code&gt;?&lt;/code&gt;', which matches zero or one occurrence of a character in the class. It always matches one occurrence if possible;</source>
          <target state="translated">单个字符类，后跟' &lt;code&gt;?&lt;/code&gt; '，它与该类中字符的零个或一次匹配。如果可能，它总是匹配一次。</target>
        </trans-unit>
        <trans-unit id="0c5e2141926ba6afbd01b9f0df61d70a7c93f57e" translate="yes" xml:space="preserve">
          <source>a single character class, which matches any single character in the class;</source>
          <target state="translated">一个单字类,它与该类中的任何一个单字相匹配。</target>
        </trans-unit>
        <trans-unit id="63ae10d79f4a0c4781e4e9b2dacd5c9896a57556" translate="yes" xml:space="preserve">
          <source>assert()</source>
          <target state="translated">assert()</target>
        </trans-unit>
        <trans-unit id="d9b7850ae45b39d5960b24328cbe68f8d5986e4d" translate="yes" xml:space="preserve">
          <source>basic UTF-8 support (&lt;a href=&quot;#6.5&quot;&gt;&amp;sect;6.5&lt;/a&gt;);</source>
          <target state="translated">基本的UTF-8支持（第&lt;a href=&quot;#6.5&quot;&gt;6.5节&lt;/a&gt;）；</target>
        </trans-unit>
        <trans-unit id="fefa5c394d291465c545b09029d833606f910bf8" translate="yes" xml:space="preserve">
          <source>basic library (&lt;a href=&quot;#6.1&quot;&gt;&amp;sect;6.1&lt;/a&gt;);</source>
          <target state="translated">基本库（&lt;a href=&quot;#6.1&quot;&gt;第6.1节&lt;/a&gt;）；</target>
        </trans-unit>
        <trans-unit id="74dcaf5215a85f0f3fdfba06d8dc2140d162bce8" translate="yes" xml:space="preserve">
          <source>by Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes</source>
          <target state="translated">作者:Roberto Ierusalimschy、Luiz Henrique de Figueiredo、Waldemar Celes。</target>
        </trans-unit>
        <trans-unit id="85f91b3e97f2cf4928f588f868b5b56e41f46ac7" translate="yes" xml:space="preserve">
          <source>can be used to call &quot;methods&quot;. A call &lt;code&gt;v:name(&lt;em&gt;args&lt;/em&gt;)&lt;/code&gt; is syntactic sugar for &lt;code&gt;v.name(v,&lt;em&gt;args&lt;/em&gt;)&lt;/code&gt;, except that &lt;code&gt;v&lt;/code&gt; is evaluated only once.</source>
          <target state="translated">可以用来称呼&amp;ldquo;方法&amp;rdquo;。调用 &lt;code&gt;v:name(&lt;em&gt;args&lt;/em&gt;)&lt;/code&gt; 是 &lt;code&gt;v.name(v,&lt;em&gt;args&lt;/em&gt;)&lt;/code&gt; 的语法糖，只是 &lt;code&gt;v&lt;/code&gt; 仅被评估一次。</target>
        </trans-unit>
        <trans-unit id="db3586e1e0bcc962d7bc2f3fead617414fb7e605" translate="yes" xml:space="preserve">
          <source>collectgarbage()</source>
          <target state="translated">collectgarbage()</target>
        </trans-unit>
        <trans-unit id="2d524624e9fa583630d5fa0595340fdebfe37ef7" translate="yes" xml:space="preserve">
          <source>coroutine library (&lt;a href=&quot;#6.2&quot;&gt;&amp;sect;6.2&lt;/a&gt;);</source>
          <target state="translated">协程库（&lt;a href=&quot;#6.2&quot;&gt;&amp;sect;6.2&lt;/a&gt;）;</target>
        </trans-unit>
        <trans-unit id="20cd53c84ed6149d722a861cd300131fe78d55e2" translate="yes" xml:space="preserve">
          <source>coroutine.create()</source>
          <target state="translated">coroutine.create()</target>
        </trans-unit>
        <trans-unit id="6817fb4ac877543987e9d2cf2bfa960bd73b02b0" translate="yes" xml:space="preserve">
          <source>coroutine.isyieldable()</source>
          <target state="translated">coroutine.isyieldable()</target>
        </trans-unit>
        <trans-unit id="1c13fd77eddf40ec2374814bf03a272d614ac054" translate="yes" xml:space="preserve">
          <source>coroutine.resume()</source>
          <target state="translated">coroutine.resume()</target>
        </trans-unit>
        <trans-unit id="b96ab0d2970d06f0cea57e5eaa71cf5ecdd618a8" translate="yes" xml:space="preserve">
          <source>coroutine.running()</source>
          <target state="translated">coroutine.running()</target>
        </trans-unit>
        <trans-unit id="ba662b8414ef9e3a4eaa77d2c840fa4c12339222" translate="yes" xml:space="preserve">
          <source>coroutine.status()</source>
          <target state="translated">coroutine.status()</target>
        </trans-unit>
        <trans-unit id="bf3b61ea5fdfb1c6f4aa0021505b10377c2744b9" translate="yes" xml:space="preserve">
          <source>coroutine.wrap()</source>
          <target state="translated">coroutine.wrap()</target>
        </trans-unit>
        <trans-unit id="28fa9aab8f13eb98b7d555b1121c4e2f64da5b24" translate="yes" xml:space="preserve">
          <source>coroutine.yield()</source>
          <target state="translated">coroutine.yield()</target>
        </trans-unit>
        <trans-unit id="bc4250ca52c74e734bc1d8dcc7ef8d0520de4aaa" translate="yes" xml:space="preserve">
          <source>cyclically permutes the values of &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">循环排列 &lt;code&gt;x&lt;/code&gt; ， &lt;code&gt;y&lt;/code&gt; 和 &lt;code&gt;z&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="7fc37eb5efdf9ff1862bafe05aed17223474f19e" translate="yes" xml:space="preserve">
          <source>debug facilities (&lt;a href=&quot;#6.10&quot;&gt;&amp;sect;6.10&lt;/a&gt;).</source>
          <target state="translated">调试工具（第&lt;a href=&quot;#6.10&quot;&gt;6.10节&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="c1a035b9bc9a59ee427755de3995caa474bf89cc" translate="yes" xml:space="preserve">
          <source>debug.debug()</source>
          <target state="translated">debug.debug()</target>
        </trans-unit>
        <trans-unit id="c971abb1fa089b8c01b33b3e61921a80abf7c06f" translate="yes" xml:space="preserve">
          <source>debug.gethook()</source>
          <target state="translated">debug.gethook()</target>
        </trans-unit>
        <trans-unit id="93d200866b9bcba05bb2fbdb0b02c21c4fcadd36" translate="yes" xml:space="preserve">
          <source>debug.getinfo()</source>
          <target state="translated">debug.getinfo()</target>
        </trans-unit>
        <trans-unit id="9c1f49683c1f31aa48e18ec3c6e238b90d9877a6" translate="yes" xml:space="preserve">
          <source>debug.getlocal()</source>
          <target state="translated">debug.getlocal()</target>
        </trans-unit>
        <trans-unit id="89340827a359650ba96d79c885a6ca4ba9aa8aef" translate="yes" xml:space="preserve">
          <source>debug.getmetatable()</source>
          <target state="translated">debug.getmetatable()</target>
        </trans-unit>
        <trans-unit id="fffbe040208115d0321d4eeace7d38146d8b779c" translate="yes" xml:space="preserve">
          <source>debug.getregistry()</source>
          <target state="translated">debug.getregistry()</target>
        </trans-unit>
        <trans-unit id="095455b157eeda9acc90fedb4797142620c5d14f" translate="yes" xml:space="preserve">
          <source>debug.getupvalue()</source>
          <target state="translated">debug.getupvalue()</target>
        </trans-unit>
        <trans-unit id="9162f2fe620127cc4293925b2377e32607ea8dc1" translate="yes" xml:space="preserve">
          <source>debug.getuservalue()</source>
          <target state="translated">debug.getuservalue()</target>
        </trans-unit>
        <trans-unit id="5d34b4b5c93313dfde5400d9a75ed878cf0387fa" translate="yes" xml:space="preserve">
          <source>debug.sethook()</source>
          <target state="translated">debug.sethook()</target>
        </trans-unit>
        <trans-unit id="8d6540f978db914670045fee4aeab3edf193a0f7" translate="yes" xml:space="preserve">
          <source>debug.setlocal()</source>
          <target state="translated">debug.setlocal()</target>
        </trans-unit>
        <trans-unit id="1114ca4ac80d07a2dd5b825ad95efef0ef3e793e" translate="yes" xml:space="preserve">
          <source>debug.setmetatable()</source>
          <target state="translated">debug.setmetatable()</target>
        </trans-unit>
        <trans-unit id="51aa91aad9ead0a16c3b18216ab378a0c7743c8a" translate="yes" xml:space="preserve">
          <source>debug.setupvalue()</source>
          <target state="translated">debug.setupvalue()</target>
        </trans-unit>
        <trans-unit id="f2501aa1b4b928ba1fabc7b41a5fb6149ff08df1" translate="yes" xml:space="preserve">
          <source>debug.setuservalue()</source>
          <target state="translated">debug.setuservalue()</target>
        </trans-unit>
        <trans-unit id="062b699a5c8040e4380b7e57fdbdd344d80078ab" translate="yes" xml:space="preserve">
          <source>debug.traceback()</source>
          <target state="translated">debug.traceback()</target>
        </trans-unit>
        <trans-unit id="4df320c6f6fe873dd83c68f666d97892b28ec64d" translate="yes" xml:space="preserve">
          <source>debug.upvalueid()</source>
          <target state="translated">debug.upvalueid()</target>
        </trans-unit>
        <trans-unit id="5f36f6ccf1f675b9be026448d71741416a53b37b" translate="yes" xml:space="preserve">
          <source>debug.upvaluejoin()</source>
          <target state="translated">debug.upvaluejoin()</target>
        </trans-unit>
        <trans-unit id="e89edbb9c58150e26495396202b965437b3a50b7" translate="yes" xml:space="preserve">
          <source>dofile()</source>
          <target state="translated">dofile()</target>
        </trans-unit>
        <trans-unit id="aca90d914519fdb9825352bdc0befb59f7c8510f" translate="yes" xml:space="preserve">
          <source>error()</source>
          <target state="translated">error()</target>
        </trans-unit>
        <trans-unit id="7de161b32a875844eeba37dec3fece9537cba714" translate="yes" xml:space="preserve">
          <source>exchanges the values of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, and</source>
          <target state="translated">交换 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 的值，并且</target>
        </trans-unit>
        <trans-unit id="8125a41f11b23917e7e65f29d3d2213542b187d6" translate="yes" xml:space="preserve">
          <source>file:close()</source>
          <target state="translated">file:close()</target>
        </trans-unit>
        <trans-unit id="7f9463f78fd5cd83c9041f64fea79cbc2be426fe" translate="yes" xml:space="preserve">
          <source>file:flush()</source>
          <target state="translated">file:flush()</target>
        </trans-unit>
        <trans-unit id="5350a8e4e9cb0246271da43a0fa066f5ae579d41" translate="yes" xml:space="preserve">
          <source>file:lines()</source>
          <target state="translated">file:lines()</target>
        </trans-unit>
        <trans-unit id="fedafec70b95fc957651a750d98a82f4f987be28" translate="yes" xml:space="preserve">
          <source>file:read()</source>
          <target state="translated">file:read()</target>
        </trans-unit>
        <trans-unit id="9f5590af86d743ff26b34c28e7536d697a016b27" translate="yes" xml:space="preserve">
          <source>file:seek()</source>
          <target state="translated">file:seek()</target>
        </trans-unit>
        <trans-unit id="4e7bf5fa403a667454318d150407999144cf27b5" translate="yes" xml:space="preserve">
          <source>file:setvbuf()</source>
          <target state="translated">file:setvbuf()</target>
        </trans-unit>
        <trans-unit id="9309e4bec0b7e7bd4928e73f4224b1260fd1601c" translate="yes" xml:space="preserve">
          <source>file:write()</source>
          <target state="translated">file:write()</target>
        </trans-unit>
        <trans-unit id="fbf75d56032c5bc04852f3d225c59fdc7c7f99d1" translate="yes" xml:space="preserve">
          <source>getmetatable()</source>
          <target state="translated">getmetatable()</target>
        </trans-unit>
        <trans-unit id="ba0178b11b8996b5f85446dda8d3e50657e671a9" translate="yes" xml:space="preserve">
          <source>input and output (&lt;a href=&quot;#6.8&quot;&gt;&amp;sect;6.8&lt;/a&gt;);</source>
          <target state="translated">输入和输出（第&lt;a href=&quot;#6.8&quot;&gt;6.8节&lt;/a&gt;）；</target>
        </trans-unit>
        <trans-unit id="6246bb83a026afe40f4ad10618e03e88e73e7a81" translate="yes" xml:space="preserve">
          <source>io.close()</source>
          <target state="translated">io.close()</target>
        </trans-unit>
        <trans-unit id="85d1bfb6c595e03540dff03731e49b68d1ff4a6a" translate="yes" xml:space="preserve">
          <source>io.flush()</source>
          <target state="translated">io.flush()</target>
        </trans-unit>
        <trans-unit id="e4b0b4836b0fa20db84c0844641175790a2a940e" translate="yes" xml:space="preserve">
          <source>io.input()</source>
          <target state="translated">io.input()</target>
        </trans-unit>
        <trans-unit id="02a116ac6887e9a612f57a4a78d1d9eb015ead5a" translate="yes" xml:space="preserve">
          <source>io.lines()</source>
          <target state="translated">io.lines()</target>
        </trans-unit>
        <trans-unit id="d01b5904d4df7b29d4d89db45c4049c0cad2592f" translate="yes" xml:space="preserve">
          <source>io.open()</source>
          <target state="translated">io.open()</target>
        </trans-unit>
        <trans-unit id="61fc2c48f2cfef754416be8f28365d49b792a924" translate="yes" xml:space="preserve">
          <source>io.output()</source>
          <target state="translated">io.output()</target>
        </trans-unit>
        <trans-unit id="e8ba874f180d58de6d9f409ad4e2404164b7e44d" translate="yes" xml:space="preserve">
          <source>io.popen()</source>
          <target state="translated">io.popen()</target>
        </trans-unit>
        <trans-unit id="8b2272babe05e59501ff1a6820f09f54cf16f8a2" translate="yes" xml:space="preserve">
          <source>io.read()</source>
          <target state="translated">io.read()</target>
        </trans-unit>
        <trans-unit id="a0b2a0ebdc9794b4aecbd87c2018d5ea828badea" translate="yes" xml:space="preserve">
          <source>io.tmpfile()</source>
          <target state="translated">io.tmpfile()</target>
        </trans-unit>
        <trans-unit id="b661232dc8780d573d2852bc920e9307b1388302" translate="yes" xml:space="preserve">
          <source>io.type()</source>
          <target state="translated">io.type()</target>
        </trans-unit>
        <trans-unit id="0cdd03129a4d3df494966138f684a6d1a11e522b" translate="yes" xml:space="preserve">
          <source>io.write()</source>
          <target state="translated">io.write()</target>
        </trans-unit>
        <trans-unit id="7f6ad977f87ec66b3c78d79c080664dfe651a035" translate="yes" xml:space="preserve">
          <source>ipairs()</source>
          <target state="translated">ipairs()</target>
        </trans-unit>
        <trans-unit id="88f91e6a3fad63baf72bfb22cd7f24d5b1819dea" translate="yes" xml:space="preserve">
          <source>is a more portable solution.)</source>
          <target state="translated">是一种更便携的解决方案)。)</target>
        </trans-unit>
        <trans-unit id="1ec285792f84b2006557cfe7a76ef03e4dffbd46" translate="yes" xml:space="preserve">
          <source>is equivalent to</source>
          <target state="translated">相当于</target>
        </trans-unit>
        <trans-unit id="653a2dec8925e5c13f534c35dab8997b7d2e737f" translate="yes" xml:space="preserve">
          <source>is equivalent to the code:</source>
          <target state="translated">相当于代码。</target>
        </trans-unit>
        <trans-unit id="d37326644b985922e36313c41fd9c9fdfe1ac47e" translate="yes" xml:space="preserve">
          <source>is syntactic sugar for</source>
          <target state="translated">是句法糖的</target>
        </trans-unit>
        <trans-unit id="94ea5f589396df68c37d6c28efac0a817a2fa0ce" translate="yes" xml:space="preserve">
          <source>load()</source>
          <target state="translated">load()</target>
        </trans-unit>
        <trans-unit id="990f79bf18f8afa5aa612d846565fb5fe7335f6a" translate="yes" xml:space="preserve">
          <source>loadfile()</source>
          <target state="translated">loadfile()</target>
        </trans-unit>
        <trans-unit id="4f6f69bf994e2e3978bd85ef12a2047556de548b" translate="yes" xml:space="preserve">
          <source>luaL_Buffer</source>
          <target state="translated">luaL_Buffer</target>
        </trans-unit>
        <trans-unit id="75ae9b49b15a3c972ba27eb22d44e99456d06ff8" translate="yes" xml:space="preserve">
          <source>luaL_Reg</source>
          <target state="translated">luaL_Reg</target>
        </trans-unit>
        <trans-unit id="7bfe1c05a8eee1e600a722d0939dfb9c2de61a21" translate="yes" xml:space="preserve">
          <source>luaL_Stream</source>
          <target state="translated">luaL_Stream</target>
        </trans-unit>
        <trans-unit id="ed2d6b35ba757f2b0183a8f125b5661f452a6328" translate="yes" xml:space="preserve">
          <source>luaL_addchar</source>
          <target state="translated">luaL_addchar</target>
        </trans-unit>
        <trans-unit id="2db82af979263253280a3bfa63cc1b723f3dbe80" translate="yes" xml:space="preserve">
          <source>luaL_addlstring</source>
          <target state="translated">luaL_addlstring</target>
        </trans-unit>
        <trans-unit id="8c1a978ed4cd9294733e68521841b4c2d122b294" translate="yes" xml:space="preserve">
          <source>luaL_addsize</source>
          <target state="translated">luaL_addsize</target>
        </trans-unit>
        <trans-unit id="acc1e95003d98b9547c52fa916d201ab47f15c3f" translate="yes" xml:space="preserve">
          <source>luaL_addstring</source>
          <target state="translated">luaL_addstring</target>
        </trans-unit>
        <trans-unit id="6e676a5af76c3e907d126b0fa168103ee32f76cf" translate="yes" xml:space="preserve">
          <source>luaL_addvalue</source>
          <target state="translated">luaL_addvalue</target>
        </trans-unit>
        <trans-unit id="512da00c5c9340484c3615f17562f2ecfd7d27f6" translate="yes" xml:space="preserve">
          <source>luaL_argcheck</source>
          <target state="translated">luaL_argcheck</target>
        </trans-unit>
        <trans-unit id="070a8a12838bd8eb3c9568a3882e05b41c2624e8" translate="yes" xml:space="preserve">
          <source>luaL_argerror</source>
          <target state="translated">luaL_argerror</target>
        </trans-unit>
        <trans-unit id="4bb2adb757eaa385f040aedd58266a13eef6017c" translate="yes" xml:space="preserve">
          <source>luaL_buffinit</source>
          <target state="translated">luaL_buffinit</target>
        </trans-unit>
        <trans-unit id="739387392e927bf4c3f3f3499dcaf9fc80133eb3" translate="yes" xml:space="preserve">
          <source>luaL_buffinitsize</source>
          <target state="translated">luaL_buffinitsize</target>
        </trans-unit>
        <trans-unit id="89e1118a10018ab78f55640b01b492a6010200fb" translate="yes" xml:space="preserve">
          <source>luaL_callmeta</source>
          <target state="translated">luaL_callmeta</target>
        </trans-unit>
        <trans-unit id="2ec02e2efd59e70841953d5cb667b2eaee24842b" translate="yes" xml:space="preserve">
          <source>luaL_checkany</source>
          <target state="translated">luaL_checkany</target>
        </trans-unit>
        <trans-unit id="45a4c0deec96469470bd9f8fec1176087e941d25" translate="yes" xml:space="preserve">
          <source>luaL_checkinteger</source>
          <target state="translated">luaL_checkinteger</target>
        </trans-unit>
        <trans-unit id="6c0b94a53d19f93ab224e9d73da9a53d3b57576e" translate="yes" xml:space="preserve">
          <source>luaL_checklstring</source>
          <target state="translated">luaL_checklstring</target>
        </trans-unit>
        <trans-unit id="bdd98c1069f52cfa0a77f6f1fa1f7a381bd319c8" translate="yes" xml:space="preserve">
          <source>luaL_checknumber</source>
          <target state="translated">luaL_checknumber</target>
        </trans-unit>
        <trans-unit id="dea4149bbeb5c96ab00e56f3a40a728177561895" translate="yes" xml:space="preserve">
          <source>luaL_checkoption</source>
          <target state="translated">luaL_checkoption</target>
        </trans-unit>
        <trans-unit id="7abcd7b0f9edc82d0b162b632cb5dce59ed546e0" translate="yes" xml:space="preserve">
          <source>luaL_checkstack</source>
          <target state="translated">luaL_checkstack</target>
        </trans-unit>
        <trans-unit id="a9ffe08b4654e57193b67999e8c605a524e35282" translate="yes" xml:space="preserve">
          <source>luaL_checkstring</source>
          <target state="translated">luaL_checkstring</target>
        </trans-unit>
        <trans-unit id="3b6564b6f77cf97b83b4afde8ba55c7415013932" translate="yes" xml:space="preserve">
          <source>luaL_checktype</source>
          <target state="translated">luaL_checktype</target>
        </trans-unit>
        <trans-unit id="ebb8e7fac5d3c22414b8b697dbe9c2f6292a9697" translate="yes" xml:space="preserve">
          <source>luaL_checkudata</source>
          <target state="translated">luaL_checkudata</target>
        </trans-unit>
        <trans-unit id="15b72fde083417bd29a134aa94b71a12faec83ac" translate="yes" xml:space="preserve">
          <source>luaL_checkversion</source>
          <target state="translated">luaL_checkversion</target>
        </trans-unit>
        <trans-unit id="1b12b8a5479fd8ca4a4aebe564adf3fd2e71aaaa" translate="yes" xml:space="preserve">
          <source>luaL_dofile</source>
          <target state="translated">luaL_dofile</target>
        </trans-unit>
        <trans-unit id="8da5c015a170dfc8aabf4073c0d9667459756e49" translate="yes" xml:space="preserve">
          <source>luaL_dostring</source>
          <target state="translated">luaL_dostring</target>
        </trans-unit>
        <trans-unit id="a88285e77f359da17643c8d59a9fe51f7fc90585" translate="yes" xml:space="preserve">
          <source>luaL_error</source>
          <target state="translated">luaL_error</target>
        </trans-unit>
        <trans-unit id="ffaca3d6f7817e03618805efe35aeeaa37125197" translate="yes" xml:space="preserve">
          <source>luaL_execresult</source>
          <target state="translated">luaL_execresult</target>
        </trans-unit>
        <trans-unit id="04244b804b3942a450aeaf5416bf2f26749d4aab" translate="yes" xml:space="preserve">
          <source>luaL_fileresult</source>
          <target state="translated">luaL_fileresult</target>
        </trans-unit>
        <trans-unit id="3a509cc11fa710f4c130ecb1ee2277d7af6c71ef" translate="yes" xml:space="preserve">
          <source>luaL_getmetafield</source>
          <target state="translated">luaL_getmetafield</target>
        </trans-unit>
        <trans-unit id="c30f269a05b1548ae99d842e49a1b574d4702024" translate="yes" xml:space="preserve">
          <source>luaL_getmetatable</source>
          <target state="translated">luaL_getmetatable</target>
        </trans-unit>
        <trans-unit id="0f310a9b09f35057b9b99ce12eb67091bb6b9b9a" translate="yes" xml:space="preserve">
          <source>luaL_getsubtable</source>
          <target state="translated">luaL_getsubtable</target>
        </trans-unit>
        <trans-unit id="86f359efca07adc64c17e43dd9f93adc9bc99bbe" translate="yes" xml:space="preserve">
          <source>luaL_gsub</source>
          <target state="translated">luaL_gsub</target>
        </trans-unit>
        <trans-unit id="9dcba4501006667792c83cca8d4a0a5353247cb5" translate="yes" xml:space="preserve">
          <source>luaL_len</source>
          <target state="translated">luaL_len</target>
        </trans-unit>
        <trans-unit id="69dbf01dbfc26d3db2fdbbeaee75362fdc212064" translate="yes" xml:space="preserve">
          <source>luaL_loadbuffer</source>
          <target state="translated">luaL_loadbuffer</target>
        </trans-unit>
        <trans-unit id="a77e6e5d663e4ba3bc0f0467aa33f88bccf64bb8" translate="yes" xml:space="preserve">
          <source>luaL_loadbufferx</source>
          <target state="translated">luaL_loadbufferx</target>
        </trans-unit>
        <trans-unit id="4d6d55445f32719fc15456f49f40569b17194693" translate="yes" xml:space="preserve">
          <source>luaL_loadfile</source>
          <target state="translated">luaL_loadfile</target>
        </trans-unit>
        <trans-unit id="f59b66bd9ce418b9e9dc168007b942d3eea34813" translate="yes" xml:space="preserve">
          <source>luaL_loadfilex</source>
          <target state="translated">luaL_loadfilex</target>
        </trans-unit>
        <trans-unit id="0274c764b14424421b072d40b8275e2177249298" translate="yes" xml:space="preserve">
          <source>luaL_loadstring</source>
          <target state="translated">luaL_loadstring</target>
        </trans-unit>
        <trans-unit id="17f06f1a51044653bb3b75032d97d5dcb5adf971" translate="yes" xml:space="preserve">
          <source>luaL_newlib</source>
          <target state="translated">luaL_newlib</target>
        </trans-unit>
        <trans-unit id="f5e32ee509764c7fb0cdc5a10584a057e357aba7" translate="yes" xml:space="preserve">
          <source>luaL_newlibtable</source>
          <target state="translated">luaL_newlibtable</target>
        </trans-unit>
        <trans-unit id="01a922aaee5e280338f45eefbc692a5cabcc2cce" translate="yes" xml:space="preserve">
          <source>luaL_newmetatable</source>
          <target state="translated">luaL_newmetatable</target>
        </trans-unit>
        <trans-unit id="bcece2773966cbc86bd710100a33ce9aa639cc79" translate="yes" xml:space="preserve">
          <source>luaL_newstate</source>
          <target state="translated">luaL_newstate</target>
        </trans-unit>
        <trans-unit id="7bdf4b6ba13f21a827617edbb6681261b474ac79" translate="yes" xml:space="preserve">
          <source>luaL_openlibs</source>
          <target state="translated">luaL_openlibs</target>
        </trans-unit>
        <trans-unit id="d6f99587381414400fc1872e7e2e8bb334d16bee" translate="yes" xml:space="preserve">
          <source>luaL_opt</source>
          <target state="translated">luaL_opt</target>
        </trans-unit>
        <trans-unit id="a89674c4effce38614662b1819cc770972c2e5d6" translate="yes" xml:space="preserve">
          <source>luaL_optinteger</source>
          <target state="translated">luaL_optinteger</target>
        </trans-unit>
        <trans-unit id="2a66aceb75d6c20448b21e86a65b02cfbecd5cee" translate="yes" xml:space="preserve">
          <source>luaL_optlstring</source>
          <target state="translated">luaL_optlstring</target>
        </trans-unit>
        <trans-unit id="e073fdb26e448e09038754b9d00254f6d5677a87" translate="yes" xml:space="preserve">
          <source>luaL_optnumber</source>
          <target state="translated">luaL_optnumber</target>
        </trans-unit>
        <trans-unit id="aec8086327bf6095f6265f43973f53e24fe44a1e" translate="yes" xml:space="preserve">
          <source>luaL_optstring</source>
          <target state="translated">luaL_optstring</target>
        </trans-unit>
        <trans-unit id="7f845281846b04a34b02ca950718fe1eb8926360" translate="yes" xml:space="preserve">
          <source>luaL_prepbuffer</source>
          <target state="translated">luaL_prepbuffer</target>
        </trans-unit>
        <trans-unit id="894cf6364aba958c224dabdee91724da16326f25" translate="yes" xml:space="preserve">
          <source>luaL_prepbuffsize</source>
          <target state="translated">luaL_prepbuffsize</target>
        </trans-unit>
        <trans-unit id="4de47cf904acfa941972bc2be93fa95344aef182" translate="yes" xml:space="preserve">
          <source>luaL_pushresult</source>
          <target state="translated">luaL_pushresult</target>
        </trans-unit>
        <trans-unit id="11fa7cbcb8e0f5efb6f0184dbfa55f82d5daf047" translate="yes" xml:space="preserve">
          <source>luaL_pushresultsize</source>
          <target state="translated">luaL_pushresultsize</target>
        </trans-unit>
        <trans-unit id="ef246b1a95e2efe047ca6f703c4265e0640812c8" translate="yes" xml:space="preserve">
          <source>luaL_ref</source>
          <target state="translated">luaL_ref</target>
        </trans-unit>
        <trans-unit id="9fdf3319005fdb3b8dd4728f6d3b67be5de64822" translate="yes" xml:space="preserve">
          <source>luaL_requiref</source>
          <target state="translated">luaL_requiref</target>
        </trans-unit>
        <trans-unit id="f04e97755a338c285b5b6a8075c54bfc46b40ecb" translate="yes" xml:space="preserve">
          <source>luaL_setfuncs</source>
          <target state="translated">luaL_setfuncs</target>
        </trans-unit>
        <trans-unit id="e6cb5586819f6125f0885528a3b32da820e5299b" translate="yes" xml:space="preserve">
          <source>luaL_setmetatable</source>
          <target state="translated">luaL_setmetatable</target>
        </trans-unit>
        <trans-unit id="e40b7540d25ef0b9e98e42bd512840b6671f50dd" translate="yes" xml:space="preserve">
          <source>luaL_testudata</source>
          <target state="translated">luaL_testudata</target>
        </trans-unit>
        <trans-unit id="358dab299846ee4bcc491f460fcb0cd749362044" translate="yes" xml:space="preserve">
          <source>luaL_tolstring</source>
          <target state="translated">luaL_tolstring</target>
        </trans-unit>
        <trans-unit id="60d74d771e08b88735fb47e3666d330c359ebc49" translate="yes" xml:space="preserve">
          <source>luaL_traceback</source>
          <target state="translated">luaL_traceback</target>
        </trans-unit>
        <trans-unit id="53ea0f5d8d80f709ab9b3625cb1b435a14f5f027" translate="yes" xml:space="preserve">
          <source>luaL_typename</source>
          <target state="translated">luaL_typename</target>
        </trans-unit>
        <trans-unit id="cdce63c7576a8364dcb1bc31478cf95c52021d96" translate="yes" xml:space="preserve">
          <source>luaL_unref</source>
          <target state="translated">luaL_unref</target>
        </trans-unit>
        <trans-unit id="e514931bfb388e46e3c698546863b742464a1401" translate="yes" xml:space="preserve">
          <source>luaL_where</source>
          <target state="translated">luaL_where</target>
        </trans-unit>
        <trans-unit id="c4473cc1755a9502465a512535908b47e9d0a188" translate="yes" xml:space="preserve">
          <source>lua_Alloc</source>
          <target state="translated">lua_Alloc</target>
        </trans-unit>
        <trans-unit id="39500a9286a2bc9576b8f7417935545359da1cea" translate="yes" xml:space="preserve">
          <source>lua_CFunction</source>
          <target state="translated">lua_CFunction</target>
        </trans-unit>
        <trans-unit id="4bfa0050295184372c05272e0d30dea1f1abb29c" translate="yes" xml:space="preserve">
          <source>lua_Debug</source>
          <target state="translated">lua_Debug</target>
        </trans-unit>
        <trans-unit id="42f8976b1ed2a8f8a5828ff3bd31e9a1c4305ecd" translate="yes" xml:space="preserve">
          <source>lua_Hook</source>
          <target state="translated">lua_Hook</target>
        </trans-unit>
        <trans-unit id="dc854ab35607a3553ed16eb076b57c6f21616e8e" translate="yes" xml:space="preserve">
          <source>lua_Integer</source>
          <target state="translated">lua_Integer</target>
        </trans-unit>
        <trans-unit id="e2ca502081291f44139bd92bddedcb09b3fa4ec6" translate="yes" xml:space="preserve">
          <source>lua_KContext</source>
          <target state="translated">lua_KContext</target>
        </trans-unit>
        <trans-unit id="0827ddac4869f69ad5a0a18d4c9bec798e7f82dd" translate="yes" xml:space="preserve">
          <source>lua_KFunction</source>
          <target state="translated">lua_KFunction</target>
        </trans-unit>
        <trans-unit id="4203e6beb33699f1966b07b52a67defe54f002a9" translate="yes" xml:space="preserve">
          <source>lua_Number</source>
          <target state="translated">lua_Number</target>
        </trans-unit>
        <trans-unit id="95a6ba2cc70122c2836a9456be5baeb0bac33936" translate="yes" xml:space="preserve">
          <source>lua_Reader</source>
          <target state="translated">lua_Reader</target>
        </trans-unit>
        <trans-unit id="62ad8789db186ef0893a533396712351c8ca9fcf" translate="yes" xml:space="preserve">
          <source>lua_State</source>
          <target state="translated">lua_State</target>
        </trans-unit>
        <trans-unit id="75e0f6226b214bb142a59cfc9c1a9ba4e845b588" translate="yes" xml:space="preserve">
          <source>lua_Unsigned</source>
          <target state="translated">lua_Unsigned</target>
        </trans-unit>
        <trans-unit id="c813048b63bfd9b5dee76172f7f6c56b73319106" translate="yes" xml:space="preserve">
          <source>lua_Writer</source>
          <target state="translated">lua_Writer</target>
        </trans-unit>
        <trans-unit id="9f01a11a1d2d52d6bbc857aabfa5634dabfef38c" translate="yes" xml:space="preserve">
          <source>lua_absindex</source>
          <target state="translated">lua_absindex</target>
        </trans-unit>
        <trans-unit id="fe0338d4bac8fcb1e5d3cd2e30da6ac02518aa6b" translate="yes" xml:space="preserve">
          <source>lua_arith</source>
          <target state="translated">lua_arith</target>
        </trans-unit>
        <trans-unit id="e67eec2cfced40a8ab600fb6616ad0e9360fb98c" translate="yes" xml:space="preserve">
          <source>lua_atpanic</source>
          <target state="translated">lua_atpanic</target>
        </trans-unit>
        <trans-unit id="f632e91bf017fe483ee7d01018e8213e050e067f" translate="yes" xml:space="preserve">
          <source>lua_call</source>
          <target state="translated">lua_call</target>
        </trans-unit>
        <trans-unit id="89979d6494beff051f7fdddc4a7f45ed3801a79a" translate="yes" xml:space="preserve">
          <source>lua_callk</source>
          <target state="translated">lua_callk</target>
        </trans-unit>
        <trans-unit id="edf26f2757c85a7b53ca48a7369ca96a625793d0" translate="yes" xml:space="preserve">
          <source>lua_checkstack</source>
          <target state="translated">lua_checkstack</target>
        </trans-unit>
        <trans-unit id="3df18358e400491ac2fdfc8cc5b559c6cd296d47" translate="yes" xml:space="preserve">
          <source>lua_close</source>
          <target state="translated">lua_close</target>
        </trans-unit>
        <trans-unit id="369d9cd9612b61f30d7166fa8dff946899613016" translate="yes" xml:space="preserve">
          <source>lua_compare</source>
          <target state="translated">lua_compare</target>
        </trans-unit>
        <trans-unit id="6efef92b55078f78eae884b0a3e6dedc3dbad6fb" translate="yes" xml:space="preserve">
          <source>lua_concat</source>
          <target state="translated">lua_concat</target>
        </trans-unit>
        <trans-unit id="2fe7c7f00edf584fe856c31d2aeebc23b415302c" translate="yes" xml:space="preserve">
          <source>lua_copy</source>
          <target state="translated">lua_copy</target>
        </trans-unit>
        <trans-unit id="c58c8acd75b979f465a72c1cd0b54745b4b46863" translate="yes" xml:space="preserve">
          <source>lua_createtable</source>
          <target state="translated">lua_createtable</target>
        </trans-unit>
        <trans-unit id="bdda5008883ecef564551a365ce28f0e934ca8d9" translate="yes" xml:space="preserve">
          <source>lua_dump</source>
          <target state="translated">lua_dump</target>
        </trans-unit>
        <trans-unit id="6f6b8d5bbb52329665fa70c1bfccd43af4f503ee" translate="yes" xml:space="preserve">
          <source>lua_error</source>
          <target state="translated">lua_error</target>
        </trans-unit>
        <trans-unit id="aa6cea174d4543e62fb6b3207a440dd49b4a5028" translate="yes" xml:space="preserve">
          <source>lua_gc</source>
          <target state="translated">lua_gc</target>
        </trans-unit>
        <trans-unit id="e22c71bf1d25b6193166543e3c5ff71fa05f13a0" translate="yes" xml:space="preserve">
          <source>lua_getallocf</source>
          <target state="translated">lua_getallocf</target>
        </trans-unit>
        <trans-unit id="80ff62538313f605d0df63ed70edb39d6cf14cc7" translate="yes" xml:space="preserve">
          <source>lua_getextraspace</source>
          <target state="translated">lua_getextraspace</target>
        </trans-unit>
        <trans-unit id="2ae02b6cd0546c5a015ace2833661efb3cd39257" translate="yes" xml:space="preserve">
          <source>lua_getfield</source>
          <target state="translated">lua_getfield</target>
        </trans-unit>
        <trans-unit id="d9e42fcda472bd9615c7bdc07cbc5198d0e7d55a" translate="yes" xml:space="preserve">
          <source>lua_getglobal</source>
          <target state="translated">lua_getglobal</target>
        </trans-unit>
        <trans-unit id="7f9024948700a7ecf63e128ce83441edc2a3287a" translate="yes" xml:space="preserve">
          <source>lua_gethook</source>
          <target state="translated">lua_gethook</target>
        </trans-unit>
        <trans-unit id="2d01999b580cbcfc088e9bb76c218767adbb465a" translate="yes" xml:space="preserve">
          <source>lua_gethookcount</source>
          <target state="translated">lua_gethookcount</target>
        </trans-unit>
        <trans-unit id="1e2613910ac9d928a70d3bec0691f4b6c09b7e2d" translate="yes" xml:space="preserve">
          <source>lua_gethookmask</source>
          <target state="translated">lua_gethookmask</target>
        </trans-unit>
        <trans-unit id="5cc0efe539093f93a8a1520c378b4c7351f10812" translate="yes" xml:space="preserve">
          <source>lua_geti</source>
          <target state="translated">lua_geti</target>
        </trans-unit>
        <trans-unit id="798a12cf117b1ca3279d26f5421416c25cb5f514" translate="yes" xml:space="preserve">
          <source>lua_getinfo</source>
          <target state="translated">lua_getinfo</target>
        </trans-unit>
        <trans-unit id="709eaff2c213d5ef6187285f54ad54b8a0fc0351" translate="yes" xml:space="preserve">
          <source>lua_getlocal</source>
          <target state="translated">lua_getlocal</target>
        </trans-unit>
        <trans-unit id="621a9a90e02a612851f12fd473537473e80625c5" translate="yes" xml:space="preserve">
          <source>lua_getmetatable</source>
          <target state="translated">lua_getmetatable</target>
        </trans-unit>
        <trans-unit id="8f121752dc757b89a3f2a270a37fbf085b98d6ba" translate="yes" xml:space="preserve">
          <source>lua_getstack</source>
          <target state="translated">lua_getstack</target>
        </trans-unit>
        <trans-unit id="937eea36347440e5fcf0e3a2d49b2473af0a84b8" translate="yes" xml:space="preserve">
          <source>lua_gettable</source>
          <target state="translated">lua_gettable</target>
        </trans-unit>
        <trans-unit id="41d075f1c4d1e79b6e07a116869f81c0509a1144" translate="yes" xml:space="preserve">
          <source>lua_gettop</source>
          <target state="translated">lua_gettop</target>
        </trans-unit>
        <trans-unit id="2920394eb9bf6b236e12247e25d9a01e3bad08e4" translate="yes" xml:space="preserve">
          <source>lua_getupvalue</source>
          <target state="translated">lua_getupvalue</target>
        </trans-unit>
        <trans-unit id="f9c0c4ce5b9918bbec21cae95879e267c6b83a90" translate="yes" xml:space="preserve">
          <source>lua_getuservalue</source>
          <target state="translated">lua_getuservalue</target>
        </trans-unit>
        <trans-unit id="25c1053838514e68472390703c19668e3f0c471e" translate="yes" xml:space="preserve">
          <source>lua_insert</source>
          <target state="translated">lua_insert</target>
        </trans-unit>
        <trans-unit id="bad021c0e6b6e2f88801b358c1156c2afebd46e5" translate="yes" xml:space="preserve">
          <source>lua_isboolean</source>
          <target state="translated">lua_isboolean</target>
        </trans-unit>
        <trans-unit id="648c44c3963b806286bafc840bf5bcdf1621520d" translate="yes" xml:space="preserve">
          <source>lua_iscfunction</source>
          <target state="translated">lua_iscfunction</target>
        </trans-unit>
        <trans-unit id="1a328c044b4418685c504472ab8ae6aff3c82cea" translate="yes" xml:space="preserve">
          <source>lua_isfunction</source>
          <target state="translated">lua_isfunction</target>
        </trans-unit>
        <trans-unit id="898653bfcf10c2e5269e3a96a68ad0b0765e232e" translate="yes" xml:space="preserve">
          <source>lua_isinteger</source>
          <target state="translated">lua_isinteger</target>
        </trans-unit>
        <trans-unit id="0acbfff9a51150a8f37f0e76b8eb34df986fabbd" translate="yes" xml:space="preserve">
          <source>lua_islightuserdata</source>
          <target state="translated">lua_islightuserdata</target>
        </trans-unit>
        <trans-unit id="0026560db7f4b72c4db0a74d6bd1fe162b94e209" translate="yes" xml:space="preserve">
          <source>lua_isnil</source>
          <target state="translated">lua_isnil</target>
        </trans-unit>
        <trans-unit id="f751e557c07317ead02de78278c2b9dcde6b660d" translate="yes" xml:space="preserve">
          <source>lua_isnone</source>
          <target state="translated">lua_isnone</target>
        </trans-unit>
        <trans-unit id="0af1471f35bdb8d9050ce90c4e882146389e2392" translate="yes" xml:space="preserve">
          <source>lua_isnoneornil</source>
          <target state="translated">lua_isnoneornil</target>
        </trans-unit>
        <trans-unit id="7ba04ce1c8cc281d1dc3c6bd698b19aff622a6bd" translate="yes" xml:space="preserve">
          <source>lua_isnumber</source>
          <target state="translated">lua_isnumber</target>
        </trans-unit>
        <trans-unit id="fc73ac8399e9f1924f623fe041c87574ce06a444" translate="yes" xml:space="preserve">
          <source>lua_isstring</source>
          <target state="translated">lua_isstring</target>
        </trans-unit>
        <trans-unit id="b56fdad36d8abdd8710b8f448d398d0bcd23865d" translate="yes" xml:space="preserve">
          <source>lua_istable</source>
          <target state="translated">lua_istable</target>
        </trans-unit>
        <trans-unit id="f9ca273c32fec850460137e6fb6a48a9f9584356" translate="yes" xml:space="preserve">
          <source>lua_isthread</source>
          <target state="translated">lua_isthread</target>
        </trans-unit>
        <trans-unit id="c3c76d4b1f3291f64519beeaf88f373ed5b9c403" translate="yes" xml:space="preserve">
          <source>lua_isuserdata</source>
          <target state="translated">lua_isuserdata</target>
        </trans-unit>
        <trans-unit id="4ad16f66cf2fe79e18d2ecc1b38458904d297cf4" translate="yes" xml:space="preserve">
          <source>lua_isyieldable</source>
          <target state="translated">lua_isyieldable</target>
        </trans-unit>
        <trans-unit id="f628ba7b66768c3df8f38a3efcacd260452da5f8" translate="yes" xml:space="preserve">
          <source>lua_len</source>
          <target state="translated">lua_len</target>
        </trans-unit>
        <trans-unit id="762fc5cc9c480897e9609796be5e3e2852175cd4" translate="yes" xml:space="preserve">
          <source>lua_load</source>
          <target state="translated">lua_load</target>
        </trans-unit>
        <trans-unit id="7b3f71643ec24d0b01f14ad14f14040cf4a98a23" translate="yes" xml:space="preserve">
          <source>lua_newstate</source>
          <target state="translated">lua_newstate</target>
        </trans-unit>
        <trans-unit id="9196bd91bb7576b1be5ae997b06cab1bd82ba057" translate="yes" xml:space="preserve">
          <source>lua_newtable</source>
          <target state="translated">lua_newtable</target>
        </trans-unit>
        <trans-unit id="0adea8683d898af072b191014837fdfa41b07737" translate="yes" xml:space="preserve">
          <source>lua_newthread</source>
          <target state="translated">lua_newthread</target>
        </trans-unit>
        <trans-unit id="3641d0dc55f76e80e98aafc9425f1fc69dc9e177" translate="yes" xml:space="preserve">
          <source>lua_newuserdata</source>
          <target state="translated">lua_newuserdata</target>
        </trans-unit>
        <trans-unit id="7bd0ed035877ba04849a03d6ca08982259f57417" translate="yes" xml:space="preserve">
          <source>lua_next</source>
          <target state="translated">lua_next</target>
        </trans-unit>
        <trans-unit id="98b0b51d387fac5a676b6a7f468b704cd1b57966" translate="yes" xml:space="preserve">
          <source>lua_numbertointeger</source>
          <target state="translated">lua_numbertointeger</target>
        </trans-unit>
        <trans-unit id="6b2414cca69b6a6d7734952e4479c4c7e40bc602" translate="yes" xml:space="preserve">
          <source>lua_pcall</source>
          <target state="translated">lua_pcall</target>
        </trans-unit>
        <trans-unit id="aa38f0c9074ee533663eebe170a8e2cb7363f9e1" translate="yes" xml:space="preserve">
          <source>lua_pcallk</source>
          <target state="translated">lua_pcallk</target>
        </trans-unit>
        <trans-unit id="3a84abf2ad1bc67eb677f8b2792cbaec7ee8765c" translate="yes" xml:space="preserve">
          <source>lua_pop</source>
          <target state="translated">lua_pop</target>
        </trans-unit>
        <trans-unit id="cb9a249b1f89670444f2bf5a75f348f58c2dbe61" translate="yes" xml:space="preserve">
          <source>lua_pushboolean</source>
          <target state="translated">lua_pushboolean</target>
        </trans-unit>
        <trans-unit id="12298529697a9cf1b73fb5edbd3345bf587b0cf9" translate="yes" xml:space="preserve">
          <source>lua_pushcclosure</source>
          <target state="translated">lua_pushcclosure</target>
        </trans-unit>
        <trans-unit id="2a4f47604d202f308f0155b4d22656305ae9097d" translate="yes" xml:space="preserve">
          <source>lua_pushcfunction</source>
          <target state="translated">lua_pushcfunction</target>
        </trans-unit>
        <trans-unit id="7ef4c94cea99414e5f266156046081afe490b907" translate="yes" xml:space="preserve">
          <source>lua_pushfstring</source>
          <target state="translated">lua_pushfstring</target>
        </trans-unit>
        <trans-unit id="9be64a191c577190203966fa558ef748f8edb9f3" translate="yes" xml:space="preserve">
          <source>lua_pushglobaltable</source>
          <target state="translated">lua_pushglobaltable</target>
        </trans-unit>
        <trans-unit id="fd8d65916a1b9ee4b97daf68bd044be20fcddf91" translate="yes" xml:space="preserve">
          <source>lua_pushinteger</source>
          <target state="translated">lua_pushinteger</target>
        </trans-unit>
        <trans-unit id="1c64adcde8affc25353ab0c366f62656e208831a" translate="yes" xml:space="preserve">
          <source>lua_pushlightuserdata</source>
          <target state="translated">lua_pushlightuserdata</target>
        </trans-unit>
        <trans-unit id="1f446dab77663410f4078cc7d47ff83793919b99" translate="yes" xml:space="preserve">
          <source>lua_pushliteral</source>
          <target state="translated">lua_pushliteral</target>
        </trans-unit>
        <trans-unit id="aa1d51a65df472f915e677a604a9311fb5ccbc59" translate="yes" xml:space="preserve">
          <source>lua_pushlstring</source>
          <target state="translated">lua_pushlstring</target>
        </trans-unit>
        <trans-unit id="958e215cf7c85e0d8236a3fe61ca66d0998b32e5" translate="yes" xml:space="preserve">
          <source>lua_pushnil</source>
          <target state="translated">lua_pushnil</target>
        </trans-unit>
        <trans-unit id="7547c248fba599e1a298075a9327c7b9dfd5dcf8" translate="yes" xml:space="preserve">
          <source>lua_pushnumber</source>
          <target state="translated">lua_pushnumber</target>
        </trans-unit>
        <trans-unit id="847d0db960681b04aaa6ac56045731f9625a81fd" translate="yes" xml:space="preserve">
          <source>lua_pushstring</source>
          <target state="translated">lua_pushstring</target>
        </trans-unit>
        <trans-unit id="05bd365a73b829ff506c963e2fb262d6bf766801" translate="yes" xml:space="preserve">
          <source>lua_pushthread</source>
          <target state="translated">lua_pushthread</target>
        </trans-unit>
        <trans-unit id="33bd34e2746e2230c9cb2ac61466183cbcec65d7" translate="yes" xml:space="preserve">
          <source>lua_pushvalue</source>
          <target state="translated">lua_pushvalue</target>
        </trans-unit>
        <trans-unit id="e7f23c1ece3f24ee0063d0f48cdcc58e318a1e2d" translate="yes" xml:space="preserve">
          <source>lua_pushvfstring</source>
          <target state="translated">lua_pushvfstring</target>
        </trans-unit>
        <trans-unit id="641f0227d3a74a7ef965ee2f203b7ff977af54f5" translate="yes" xml:space="preserve">
          <source>lua_rawequal</source>
          <target state="translated">lua_rawequal</target>
        </trans-unit>
        <trans-unit id="453f3ff0805e03b9ca41ac071befa0c7401b3faf" translate="yes" xml:space="preserve">
          <source>lua_rawget</source>
          <target state="translated">lua_rawget</target>
        </trans-unit>
        <trans-unit id="6eb9f34ff0adc44f1734710122b81835a7a8597a" translate="yes" xml:space="preserve">
          <source>lua_rawgeti</source>
          <target state="translated">lua_rawgeti</target>
        </trans-unit>
        <trans-unit id="18e85b55e231b061e530723fa859a5bd5c3ee89e" translate="yes" xml:space="preserve">
          <source>lua_rawgetp</source>
          <target state="translated">lua_rawgetp</target>
        </trans-unit>
        <trans-unit id="da764aabbe3f3dee6ef8ad2a36b87852858568a5" translate="yes" xml:space="preserve">
          <source>lua_rawlen</source>
          <target state="translated">lua_rawlen</target>
        </trans-unit>
        <trans-unit id="cedb8fcb8980649442a0db7ce7ee9782b6383f3d" translate="yes" xml:space="preserve">
          <source>lua_rawset</source>
          <target state="translated">lua_rawset</target>
        </trans-unit>
        <trans-unit id="b167e99d5d6fb14b20b29a8cca5c5a245ddd352b" translate="yes" xml:space="preserve">
          <source>lua_rawseti</source>
          <target state="translated">lua_rawseti</target>
        </trans-unit>
        <trans-unit id="67ef01d278aa93baf067ae755835477b884a2d3e" translate="yes" xml:space="preserve">
          <source>lua_rawsetp</source>
          <target state="translated">lua_rawsetp</target>
        </trans-unit>
        <trans-unit id="8bda295d3da259b29595490e8a0ef1cba21585b4" translate="yes" xml:space="preserve">
          <source>lua_register</source>
          <target state="translated">lua_register</target>
        </trans-unit>
        <trans-unit id="96f6042d1e7aa1eaf1c4e46041e7c1dbfc5b39c9" translate="yes" xml:space="preserve">
          <source>lua_remove</source>
          <target state="translated">lua_remove</target>
        </trans-unit>
        <trans-unit id="bb99b00e30d0d0a98386e36b47d7c59e7a744440" translate="yes" xml:space="preserve">
          <source>lua_replace</source>
          <target state="translated">lua_replace</target>
        </trans-unit>
        <trans-unit id="6ee981055f5b3f5f3041a901e01cde2c283034a4" translate="yes" xml:space="preserve">
          <source>lua_resume</source>
          <target state="translated">lua_resume</target>
        </trans-unit>
        <trans-unit id="29ac840486273b0afb3ba91ecd4c86e8f3274b17" translate="yes" xml:space="preserve">
          <source>lua_rotate</source>
          <target state="translated">lua_rotate</target>
        </trans-unit>
        <trans-unit id="cbab7789ef8ed6914f52f165b799dd0f7f8cff83" translate="yes" xml:space="preserve">
          <source>lua_setallocf</source>
          <target state="translated">lua_setallocf</target>
        </trans-unit>
        <trans-unit id="a1885bcf365afa45dd7febcbd3849eccb9f0843f" translate="yes" xml:space="preserve">
          <source>lua_setfield</source>
          <target state="translated">lua_setfield</target>
        </trans-unit>
        <trans-unit id="fe9de583661bda12e7ff6580cc849cd7fd34484f" translate="yes" xml:space="preserve">
          <source>lua_setglobal</source>
          <target state="translated">lua_setglobal</target>
        </trans-unit>
        <trans-unit id="9f30d215e6f35e37ce8d947456e4225c2b6d98b7" translate="yes" xml:space="preserve">
          <source>lua_sethook</source>
          <target state="translated">lua_sethook</target>
        </trans-unit>
        <trans-unit id="f296b63fe69308c3233765b6213252534378363b" translate="yes" xml:space="preserve">
          <source>lua_seti</source>
          <target state="translated">lua_seti</target>
        </trans-unit>
        <trans-unit id="1eb75f91df63aed7adb55474f73c3ee6456ff649" translate="yes" xml:space="preserve">
          <source>lua_setlocal</source>
          <target state="translated">lua_setlocal</target>
        </trans-unit>
        <trans-unit id="30090be00782afa9fca6b89da01c624eef7c9153" translate="yes" xml:space="preserve">
          <source>lua_setmetatable</source>
          <target state="translated">lua_setmetatable</target>
        </trans-unit>
        <trans-unit id="ed12596bd702bbef0d60edeed3c1c0512606b7a7" translate="yes" xml:space="preserve">
          <source>lua_settable</source>
          <target state="translated">lua_settable</target>
        </trans-unit>
        <trans-unit id="fd95b29fdac9ae3a5f2f9ff1e180bf4a20288f10" translate="yes" xml:space="preserve">
          <source>lua_settop</source>
          <target state="translated">lua_settop</target>
        </trans-unit>
        <trans-unit id="1aeb6c9d489afcc8f777f824740ff83ece953995" translate="yes" xml:space="preserve">
          <source>lua_setupvalue</source>
          <target state="translated">lua_setupvalue</target>
        </trans-unit>
        <trans-unit id="89a4359ca1eda521874b893162dacf89a2d0f2df" translate="yes" xml:space="preserve">
          <source>lua_setuservalue</source>
          <target state="translated">lua_setuservalue</target>
        </trans-unit>
        <trans-unit id="d928728ad66e6a2873a38809bb2c135976ad9d05" translate="yes" xml:space="preserve">
          <source>lua_status</source>
          <target state="translated">lua_status</target>
        </trans-unit>
        <trans-unit id="e45794edba5dc813600e7c9000c4ee9028f1b359" translate="yes" xml:space="preserve">
          <source>lua_stringtonumber</source>
          <target state="translated">lua_stringtonumber</target>
        </trans-unit>
        <trans-unit id="6fcb8673b5734e44237a477ecc4a0686703c74bc" translate="yes" xml:space="preserve">
          <source>lua_toboolean</source>
          <target state="translated">lua_toboolean</target>
        </trans-unit>
        <trans-unit id="d10d84a8b8241a1f651df55b5d0d6332dd770716" translate="yes" xml:space="preserve">
          <source>lua_tocfunction</source>
          <target state="translated">lua_tocfunction</target>
        </trans-unit>
        <trans-unit id="efb5245021aa7ca7ac3b8c0ee89ba9df1607b637" translate="yes" xml:space="preserve">
          <source>lua_tointeger</source>
          <target state="translated">lua_tointeger</target>
        </trans-unit>
        <trans-unit id="b82854896f984bbe40fe0c442fd6c0fe912900a8" translate="yes" xml:space="preserve">
          <source>lua_tointegerx</source>
          <target state="translated">lua_tointegerx</target>
        </trans-unit>
        <trans-unit id="a92cd3b92c41d137064f53409cced9f59c8fd2cb" translate="yes" xml:space="preserve">
          <source>lua_tolstring</source>
          <target state="translated">lua_tolstring</target>
        </trans-unit>
        <trans-unit id="d778b38e96455e8c69c322b30a66a5f671d303b0" translate="yes" xml:space="preserve">
          <source>lua_tonumber</source>
          <target state="translated">lua_tonumber</target>
        </trans-unit>
        <trans-unit id="6cf42ffc44e23891cefc974057e90bfa9239e3cf" translate="yes" xml:space="preserve">
          <source>lua_tonumberx</source>
          <target state="translated">lua_tonumberx</target>
        </trans-unit>
        <trans-unit id="95c8672f426f34974458893768a9e552e6d7f15b" translate="yes" xml:space="preserve">
          <source>lua_topointer</source>
          <target state="translated">lua_topointer</target>
        </trans-unit>
        <trans-unit id="2985285b05e8fad33f14c145232f9d2b47b2907d" translate="yes" xml:space="preserve">
          <source>lua_tostring</source>
          <target state="translated">lua_tostring</target>
        </trans-unit>
        <trans-unit id="bf0a37b4b8de81dfacb9205be5c207c9a3cd6aef" translate="yes" xml:space="preserve">
          <source>lua_tothread</source>
          <target state="translated">lua_tothread</target>
        </trans-unit>
        <trans-unit id="4fca87a78b0d16f1d9efad32a4ae73995549c9c6" translate="yes" xml:space="preserve">
          <source>lua_touserdata</source>
          <target state="translated">lua_touserdata</target>
        </trans-unit>
        <trans-unit id="9f7e019adf4e9ca6d493a2cabae66253575e86e5" translate="yes" xml:space="preserve">
          <source>lua_type</source>
          <target state="translated">lua_type</target>
        </trans-unit>
        <trans-unit id="eb78378595576e6f2ea13fdee5dff47a9344a2a1" translate="yes" xml:space="preserve">
          <source>lua_typename</source>
          <target state="translated">lua_typename</target>
        </trans-unit>
        <trans-unit id="2ab9634111a4c2ba9a3f5c1d74db411a1ce4bd7e" translate="yes" xml:space="preserve">
          <source>lua_upvalueid</source>
          <target state="translated">lua_upvalueid</target>
        </trans-unit>
        <trans-unit id="295089ec3ea29a8d0f77e07782c8001053ec22f2" translate="yes" xml:space="preserve">
          <source>lua_upvalueindex</source>
          <target state="translated">lua_upvalueindex</target>
        </trans-unit>
        <trans-unit id="8c73b78660948a6d0f9392e7fe37b457c1ba2da8" translate="yes" xml:space="preserve">
          <source>lua_upvaluejoin</source>
          <target state="translated">lua_upvaluejoin</target>
        </trans-unit>
        <trans-unit id="4b1d3a92c16f0634e767f3a54264a9def4baf851" translate="yes" xml:space="preserve">
          <source>lua_version</source>
          <target state="translated">lua_version</target>
        </trans-unit>
        <trans-unit id="ac5b545468d936827425d2d9dc84f367e265c9bb" translate="yes" xml:space="preserve">
          <source>lua_xmove</source>
          <target state="translated">lua_xmove</target>
        </trans-unit>
        <trans-unit id="2106e86be2c5b7c32b4d2830790a9690ac3def7b" translate="yes" xml:space="preserve">
          <source>lua_yield</source>
          <target state="translated">lua_yield</target>
        </trans-unit>
        <trans-unit id="67d82c098dd8204a77701c803938d2a842709c3c" translate="yes" xml:space="preserve">
          <source>lua_yieldk</source>
          <target state="translated">lua_yieldk</target>
        </trans-unit>
        <trans-unit id="14486fda1e254a8db9b3b855f4452a70146a8915" translate="yes" xml:space="preserve">
          <source>math.abs()</source>
          <target state="translated">math.abs()</target>
        </trans-unit>
        <trans-unit id="06627e4da56211ae35f7229b1edce7be9105ac96" translate="yes" xml:space="preserve">
          <source>math.acos()</source>
          <target state="translated">math.acos()</target>
        </trans-unit>
        <trans-unit id="0304e54b36652de26660e58896d1fe1f8672c293" translate="yes" xml:space="preserve">
          <source>math.asin()</source>
          <target state="translated">math.asin()</target>
        </trans-unit>
        <trans-unit id="19a39764f54e3e5a7f292316199235934849bb8b" translate="yes" xml:space="preserve">
          <source>math.atan()</source>
          <target state="translated">math.atan()</target>
        </trans-unit>
        <trans-unit id="565046f5373f5304d0a0946f2c2782a522e90251" translate="yes" xml:space="preserve">
          <source>math.ceil()</source>
          <target state="translated">math.ceil()</target>
        </trans-unit>
        <trans-unit id="a27ccff89f1a2c88cf91fb8f2fdfbeefa6591c9d" translate="yes" xml:space="preserve">
          <source>math.cos()</source>
          <target state="translated">math.cos()</target>
        </trans-unit>
        <trans-unit id="e453a2142dc0475524a8e1b87c4ae233e56b9480" translate="yes" xml:space="preserve">
          <source>math.deg()</source>
          <target state="translated">math.deg()</target>
        </trans-unit>
        <trans-unit id="aeb4334e3bda0aca62a45ddb17e3937bc409937c" translate="yes" xml:space="preserve">
          <source>math.exp()</source>
          <target state="translated">math.exp()</target>
        </trans-unit>
        <trans-unit id="fe1de4e4d94fb7b9924b1f9c64b94cdbe688ec9e" translate="yes" xml:space="preserve">
          <source>math.floor()</source>
          <target state="translated">math.floor()</target>
        </trans-unit>
        <trans-unit id="f9915470946a7c958df4d6ac8d92eeaf818d12b9" translate="yes" xml:space="preserve">
          <source>math.fmod()</source>
          <target state="translated">math.fmod()</target>
        </trans-unit>
        <trans-unit id="160afe7d95ea90ce8e90e603f6493a769e922ea9" translate="yes" xml:space="preserve">
          <source>math.huge</source>
          <target state="translated">math.huge</target>
        </trans-unit>
        <trans-unit id="5c5d9b74a0806c4357bc6c85738b618342b998ea" translate="yes" xml:space="preserve">
          <source>math.log()</source>
          <target state="translated">math.log()</target>
        </trans-unit>
        <trans-unit id="d6857224fcee08574793bb82cd4dca59c1d3fb49" translate="yes" xml:space="preserve">
          <source>math.max()</source>
          <target state="translated">math.max()</target>
        </trans-unit>
        <trans-unit id="8677ae38d193c4087a18fc39d21505892e60d0e0" translate="yes" xml:space="preserve">
          <source>math.maxinteger</source>
          <target state="translated">math.maxinteger</target>
        </trans-unit>
        <trans-unit id="c0fedb9a59de2aa4a979a6d37232d95dba37e71b" translate="yes" xml:space="preserve">
          <source>math.min()</source>
          <target state="translated">math.min()</target>
        </trans-unit>
        <trans-unit id="9e9798d323bf91facc80e74c9b1d6fb0fae242cc" translate="yes" xml:space="preserve">
          <source>math.mininteger</source>
          <target state="translated">math.mininteger</target>
        </trans-unit>
        <trans-unit id="be915d5557bc2382b715b722ba34a8afc18c0f62" translate="yes" xml:space="preserve">
          <source>math.modf()</source>
          <target state="translated">math.modf()</target>
        </trans-unit>
        <trans-unit id="e52478d6c76b149d1798c1b8ea53f24e9a9e07b0" translate="yes" xml:space="preserve">
          <source>math.pi</source>
          <target state="translated">math.pi</target>
        </trans-unit>
        <trans-unit id="55a739cb4d10e13c42de4cf57e6b19c01c7da201" translate="yes" xml:space="preserve">
          <source>math.rad()</source>
          <target state="translated">math.rad()</target>
        </trans-unit>
        <trans-unit id="b1121e1ef316fc6c09dc53b3bf6a8b378ef4156a" translate="yes" xml:space="preserve">
          <source>math.random()</source>
          <target state="translated">math.random()</target>
        </trans-unit>
        <trans-unit id="6bd6400623e09987abdb24b82d64d67a81e99462" translate="yes" xml:space="preserve">
          <source>math.randomseed()</source>
          <target state="translated">math.randomseed()</target>
        </trans-unit>
        <trans-unit id="7910d71eca1c8dbc95e1bdcb7451d104ca55acf6" translate="yes" xml:space="preserve">
          <source>math.sin()</source>
          <target state="translated">math.sin()</target>
        </trans-unit>
        <trans-unit id="6862a2055e6d6e4f44427537e335413b9ecf2c19" translate="yes" xml:space="preserve">
          <source>math.sqrt()</source>
          <target state="translated">math.sqrt()</target>
        </trans-unit>
        <trans-unit id="c87729e68db07bbbb1a584f15ddae0f905524d6d" translate="yes" xml:space="preserve">
          <source>math.tan()</source>
          <target state="translated">math.tan()</target>
        </trans-unit>
        <trans-unit id="da4d9f9c916d2c50238c34c35b3d91a5f40edb8a" translate="yes" xml:space="preserve">
          <source>math.tointeger()</source>
          <target state="translated">math.tointeger()</target>
        </trans-unit>
        <trans-unit id="c9c53608768ee3b617c39c88de6b18eed4396bb0" translate="yes" xml:space="preserve">
          <source>math.type()</source>
          <target state="translated">math.type()</target>
        </trans-unit>
        <trans-unit id="24e0a52473f397f581e3970eab8e0d4788658dd6" translate="yes" xml:space="preserve">
          <source>math.ult()</source>
          <target state="translated">math.ult()</target>
        </trans-unit>
        <trans-unit id="906a5a7917e6cb3a16060fec8a91746af3c5cf16" translate="yes" xml:space="preserve">
          <source>mathematical functions (&lt;a href=&quot;#6.7&quot;&gt;&amp;sect;6.7&lt;/a&gt;) (sin, log, etc.);</source>
          <target state="translated">数学函数（第&lt;a href=&quot;#6.7&quot;&gt;6.7节&lt;/a&gt;）（正弦，对数等）；</target>
        </trans-unit>
        <trans-unit id="b9f82bf32f4d577ef9caa50dfb51236f3e54e946" translate="yes" xml:space="preserve">
          <source>may produce the string:</source>
          <target state="translated">可以产生字符串。</target>
        </trans-unit>
        <trans-unit id="06c08f5fdce220335949982b45b0ee4c4b371027" translate="yes" xml:space="preserve">
          <source>next()</source>
          <target state="translated">next()</target>
        </trans-unit>
        <trans-unit id="e4fbf9e57086f58566afc3e17f28484c8c98343b" translate="yes" xml:space="preserve">
          <source>not to</source>
          <target state="translated">不得</target>
        </trans-unit>
        <trans-unit id="e382417e6422c7d2298f063ba1e16a76f01ca9a7" translate="yes" xml:space="preserve">
          <source>operating system facilities (&lt;a href=&quot;#6.9&quot;&gt;&amp;sect;6.9&lt;/a&gt;);</source>
          <target state="translated">操作系统设施（第&lt;a href=&quot;#6.9&quot;&gt;6.9节&lt;/a&gt;）；</target>
        </trans-unit>
        <trans-unit id="d0a2757924fd51520fc0527e76bfadf6be64427c" translate="yes" xml:space="preserve">
          <source>os.clock()</source>
          <target state="translated">os.clock()</target>
        </trans-unit>
        <trans-unit id="48a3cb0425ba00c4a0b0d7caef71b6a6c9d67cdd" translate="yes" xml:space="preserve">
          <source>os.date()</source>
          <target state="translated">os.date()</target>
        </trans-unit>
        <trans-unit id="5a0bf3e9ccd3c8b542f106afff3630910d85cea4" translate="yes" xml:space="preserve">
          <source>os.difftime()</source>
          <target state="translated">os.difftime()</target>
        </trans-unit>
        <trans-unit id="6bd8eebf8d03fcf0c07bc1388fcc7ee3e8424e18" translate="yes" xml:space="preserve">
          <source>os.execute()</source>
          <target state="translated">os.execute()</target>
        </trans-unit>
        <trans-unit id="cfee573beed45589563480460931ee2e6ab1a8ab" translate="yes" xml:space="preserve">
          <source>os.exit()</source>
          <target state="translated">os.exit()</target>
        </trans-unit>
        <trans-unit id="ab9bed2c9f45e6eaeb11b167e98d934079f30cce" translate="yes" xml:space="preserve">
          <source>os.getenv()</source>
          <target state="translated">os.getenv()</target>
        </trans-unit>
        <trans-unit id="72e23ce1ad420442e45d15a20bd5a0dfaeabc47b" translate="yes" xml:space="preserve">
          <source>os.remove()</source>
          <target state="translated">os.remove()</target>
        </trans-unit>
        <trans-unit id="a33d78af9ece7b6a8ad04c4ed2f647a0745b0c03" translate="yes" xml:space="preserve">
          <source>os.rename()</source>
          <target state="translated">os.rename()</target>
        </trans-unit>
        <trans-unit id="50f0f100bcbadc08f6c9864231da32ac8f499dc8" translate="yes" xml:space="preserve">
          <source>os.setlocale()</source>
          <target state="translated">os.setlocale()</target>
        </trans-unit>
        <trans-unit id="9f948446e3b970a65820369794a9da702c540c79" translate="yes" xml:space="preserve">
          <source>os.time()</source>
          <target state="translated">os.time()</target>
        </trans-unit>
        <trans-unit id="0ea17682c41cfc4b79e1b1d330c5f5befce1ac54" translate="yes" xml:space="preserve">
          <source>os.tmpname()</source>
          <target state="translated">os.tmpname()</target>
        </trans-unit>
        <trans-unit id="9f110c9faec960f23cc7e53e43a013287e262b3e" translate="yes" xml:space="preserve">
          <source>package library (&lt;a href=&quot;#6.3&quot;&gt;&amp;sect;6.3&lt;/a&gt;);</source>
          <target state="translated">程序包库（第&lt;a href=&quot;#6.3&quot;&gt;6.3节&lt;/a&gt;）；</target>
        </trans-unit>
        <trans-unit id="b06a02c26d0c7e5715b2071a862e9e3c234af10f" translate="yes" xml:space="preserve">
          <source>package.config</source>
          <target state="translated">package.config</target>
        </trans-unit>
        <trans-unit id="73cb1b10a9d5a43c96d3d2e4310ce4a524872dc6" translate="yes" xml:space="preserve">
          <source>package.cpath</source>
          <target state="translated">package.cpath</target>
        </trans-unit>
        <trans-unit id="ee265be558864ad7c6bb5f9860cb64ce17385554" translate="yes" xml:space="preserve">
          <source>package.loaded</source>
          <target state="translated">package.loaded</target>
        </trans-unit>
        <trans-unit id="c1dc67f26616f2fa44f17e58e5da2301a2923702" translate="yes" xml:space="preserve">
          <source>package.loadlib()</source>
          <target state="translated">package.loadlib()</target>
        </trans-unit>
        <trans-unit id="1349864236ab16652119d2fef7ed43677f48784a" translate="yes" xml:space="preserve">
          <source>package.path</source>
          <target state="translated">package.path</target>
        </trans-unit>
        <trans-unit id="0882187dd54510318a9374d5113c2474804b3788" translate="yes" xml:space="preserve">
          <source>package.preload</source>
          <target state="translated">package.preload</target>
        </trans-unit>
        <trans-unit id="dbfadc246d177bd440f2643e0c075ac27c51181d" translate="yes" xml:space="preserve">
          <source>package.searchers</source>
          <target state="translated">package.searchers</target>
        </trans-unit>
        <trans-unit id="48eaaccb2403257b5b03d32d6e1f489b1d7b5831" translate="yes" xml:space="preserve">
          <source>package.searchpath()</source>
          <target state="translated">package.searchpath()</target>
        </trans-unit>
        <trans-unit id="b9b4cc59dc3aeca62636a97763e2b62a1e1f5ac3" translate="yes" xml:space="preserve">
          <source>pairs()</source>
          <target state="translated">pairs()</target>
        </trans-unit>
        <trans-unit id="692aa3043d7ee19f6646b6dfad28c3090d74d69f" translate="yes" xml:space="preserve">
          <source>pcall()</source>
          <target state="translated">pcall()</target>
        </trans-unit>
        <trans-unit id="19c8a5cdef0f37df1bfbc1c66d27412754169588" translate="yes" xml:space="preserve">
          <source>print()</source>
          <target state="translated">print()</target>
        </trans-unit>
        <trans-unit id="0784215a7320685f5a14ac0fd0a7bb4c19955411" translate="yes" xml:space="preserve">
          <source>rawequal()</source>
          <target state="translated">rawequal()</target>
        </trans-unit>
        <trans-unit id="3ff486c6b0a9e73d3d9261a55ea563f5e12e84a8" translate="yes" xml:space="preserve">
          <source>rawget()</source>
          <target state="translated">rawget()</target>
        </trans-unit>
        <trans-unit id="676ffdd4d4658463b2a939e9515863d44f978477" translate="yes" xml:space="preserve">
          <source>rawlen()</source>
          <target state="translated">rawlen()</target>
        </trans-unit>
        <trans-unit id="7cf553b2b0fb777074b6ebecc9f2bbf81e459a8f" translate="yes" xml:space="preserve">
          <source>rawset()</source>
          <target state="translated">rawset()</target>
        </trans-unit>
        <trans-unit id="634b96c5c5c53297222823e53e126b5e4b24f441" translate="yes" xml:space="preserve">
          <source>require()</source>
          <target state="translated">require()</target>
        </trans-unit>
        <trans-unit id="44a272234265dca81cc29e0c2d97e7acb3e269b6" translate="yes" xml:space="preserve">
          <source>select()</source>
          <target state="translated">select()</target>
        </trans-unit>
        <trans-unit id="4baba792843a0740cbe688a3ffcd5961bdab0046" translate="yes" xml:space="preserve">
          <source>setmetatable()</source>
          <target state="translated">setmetatable()</target>
        </trans-unit>
        <trans-unit id="26d1c2c2daa3c2841780240be22241b86b9dbe66" translate="yes" xml:space="preserve">
          <source>sets &lt;code&gt;a[3]&lt;/code&gt; to 20, without affecting &lt;code&gt;a[4]&lt;/code&gt; because the &lt;code&gt;i&lt;/code&gt; in &lt;code&gt;a[i]&lt;/code&gt; is evaluated (to 3) before it is assigned 4. Similarly, the line</source>
          <target state="translated">将 &lt;code&gt;a[3]&lt;/code&gt; 为20，而不会影响 &lt;code&gt;a[4]&lt;/code&gt; 因为 &lt;code&gt;a[i]&lt;/code&gt; 的 &lt;code&gt;i&lt;/code&gt; 在赋值4之前已求值（等于3）。</target>
        </trans-unit>
        <trans-unit id="d3a766269877c040a2ead968293f8bc6e3f151b9" translate="yes" xml:space="preserve">
          <source>string manipulation (&lt;a href=&quot;#6.4&quot;&gt;&amp;sect;6.4&lt;/a&gt;);</source>
          <target state="translated">字符串操作（第&lt;a href=&quot;#6.4&quot;&gt;6.4节&lt;/a&gt;）；</target>
        </trans-unit>
        <trans-unit id="b7f6bb7c213c7e98914cad20477f12d3613a73e9" translate="yes" xml:space="preserve">
          <source>string.byte()</source>
          <target state="translated">string.byte()</target>
        </trans-unit>
        <trans-unit id="5eceb5e5192bec9538171a97c245dfe0e7a1e594" translate="yes" xml:space="preserve">
          <source>string.char()</source>
          <target state="translated">string.char()</target>
        </trans-unit>
        <trans-unit id="4e61c3d558da0bc29f7f78edc9affce794ec84e8" translate="yes" xml:space="preserve">
          <source>string.dump()</source>
          <target state="translated">string.dump()</target>
        </trans-unit>
        <trans-unit id="ab9bf2e48a7976b30b5974dcffb2c8ef7f261a8b" translate="yes" xml:space="preserve">
          <source>string.find()</source>
          <target state="translated">string.find()</target>
        </trans-unit>
        <trans-unit id="12fa4981058afc485e397e753c48afe88f2128f8" translate="yes" xml:space="preserve">
          <source>string.format()</source>
          <target state="translated">string.format()</target>
        </trans-unit>
        <trans-unit id="601ef3da5fa5325f46c53fbec4ffbb2c9ce7a2c3" translate="yes" xml:space="preserve">
          <source>string.gmatch()</source>
          <target state="translated">string.gmatch()</target>
        </trans-unit>
        <trans-unit id="63d794f0b7c156d2857cb138fbb13b0749025ead" translate="yes" xml:space="preserve">
          <source>string.gsub()</source>
          <target state="translated">string.gsub()</target>
        </trans-unit>
        <trans-unit id="45b35f30169155139a8db6adb5e5e6eb0d61d130" translate="yes" xml:space="preserve">
          <source>string.len()</source>
          <target state="translated">string.len()</target>
        </trans-unit>
        <trans-unit id="1c5c02653b245a5172435c8a954bdc1ccf070382" translate="yes" xml:space="preserve">
          <source>string.lower()</source>
          <target state="translated">string.lower()</target>
        </trans-unit>
        <trans-unit id="2d993d0d8cc8cf3f3171c6b0ba0b672c3c2f0fc0" translate="yes" xml:space="preserve">
          <source>string.match()</source>
          <target state="translated">string.match()</target>
        </trans-unit>
        <trans-unit id="aa5f760b2d79baa9b0f99be23beaec96a2914af1" translate="yes" xml:space="preserve">
          <source>string.pack()</source>
          <target state="translated">string.pack()</target>
        </trans-unit>
        <trans-unit id="74141e15ca4ee3ed63e233e3deda16e2b774fb3c" translate="yes" xml:space="preserve">
          <source>string.packsize()</source>
          <target state="translated">string.packsize()</target>
        </trans-unit>
        <trans-unit id="2ec92a5bc2be10279b788c84861101755037b120" translate="yes" xml:space="preserve">
          <source>string.rep()</source>
          <target state="translated">string.rep()</target>
        </trans-unit>
        <trans-unit id="e81691b567327dc79d0d23a3582b81e4d7ecd290" translate="yes" xml:space="preserve">
          <source>string.reverse()</source>
          <target state="translated">string.reverse()</target>
        </trans-unit>
        <trans-unit id="a4709ad56ef65904ebed2cc4bec787da53b4dcf6" translate="yes" xml:space="preserve">
          <source>string.sub()</source>
          <target state="translated">string.sub()</target>
        </trans-unit>
        <trans-unit id="e31e915460d94df27e3acedc85c303bf2710215a" translate="yes" xml:space="preserve">
          <source>string.unpack()</source>
          <target state="translated">string.unpack()</target>
        </trans-unit>
        <trans-unit id="0c2e5bedb9a6440d1326a97364898bbeb9eb43e8" translate="yes" xml:space="preserve">
          <source>string.upper()</source>
          <target state="translated">string.upper()</target>
        </trans-unit>
        <trans-unit id="02ff9dbfcb40bbc1b8445ad5c11305688e30ad91" translate="yes" xml:space="preserve">
          <source>table manipulation (&lt;a href=&quot;#6.6&quot;&gt;&amp;sect;6.6&lt;/a&gt;);</source>
          <target state="translated">表操作（第&lt;a href=&quot;#6.6&quot;&gt;6.6节&lt;/a&gt;）；</target>
        </trans-unit>
        <trans-unit id="61de801001f5d93ad59eab26e6b9de2a1779736b" translate="yes" xml:space="preserve">
          <source>table.concat()</source>
          <target state="translated">table.concat()</target>
        </trans-unit>
        <trans-unit id="0cf019b96c5b8b72c699692b2bd3d68ca90ad93f" translate="yes" xml:space="preserve">
          <source>table.insert()</source>
          <target state="translated">table.insert()</target>
        </trans-unit>
        <trans-unit id="41b8285b4e1b4e62b85ad8ff13128d5f5ca525b9" translate="yes" xml:space="preserve">
          <source>table.move()</source>
          <target state="translated">table.move()</target>
        </trans-unit>
        <trans-unit id="5ea9f24cca19d9a9ea8aa4c0ceeba4b8e5430938" translate="yes" xml:space="preserve">
          <source>table.pack()</source>
          <target state="translated">table.pack()</target>
        </trans-unit>
        <trans-unit id="53043acdf5dab106c810c59521cf27c739011b7f" translate="yes" xml:space="preserve">
          <source>table.remove()</source>
          <target state="translated">table.remove()</target>
        </trans-unit>
        <trans-unit id="7495a3cbe6034ff7d64d7bdf8d4a079316fe7073" translate="yes" xml:space="preserve">
          <source>table.sort()</source>
          <target state="translated">table.sort()</target>
        </trans-unit>
        <trans-unit id="60c2f65945a245cf41457db9052a01faf198866c" translate="yes" xml:space="preserve">
          <source>table.unpack()</source>
          <target state="translated">table.unpack()</target>
        </trans-unit>
        <trans-unit id="e5b647df43d09c8e42c5a1d5d582d03e96d3f43c" translate="yes" xml:space="preserve">
          <source>the search for the name &lt;code&gt;foo.a&lt;/code&gt; will try to open the files &lt;code&gt;./foo/a.lua&lt;/code&gt;, &lt;code&gt;./foo/a.lc&lt;/code&gt;, and &lt;code&gt;/usr/local/foo/a/init.lua&lt;/code&gt;, in that order.</source>
          <target state="translated">对于名称搜索 &lt;code&gt;foo.a&lt;/code&gt; 将尝试打开这些文件 &lt;code&gt;./foo/a.lua&lt;/code&gt; ， &lt;code&gt;./foo/a.lc&lt;/code&gt; 和 &lt;code&gt;/usr/local/foo/a/init.lua&lt;/code&gt; ，按照这个顺序。</target>
        </trans-unit>
        <trans-unit id="b580997dc742b0cb5cd1fc6a70bcdbac2b4eaba1" translate="yes" xml:space="preserve">
          <source>the searcher for module &lt;code&gt;foo&lt;/code&gt; will try to open the files &lt;code&gt;./foo.so&lt;/code&gt;, &lt;code&gt;./foo.dll&lt;/code&gt;, and &lt;code&gt;/usr/local/foo/init.so&lt;/code&gt;, in that order. Once it finds a C library, this searcher first uses a dynamic link facility to link the application with the library. Then it tries to find a C function inside the library to be used as the loader. The name of this C function is the string &quot;&lt;code&gt;luaopen_&lt;/code&gt;&quot; concatenated with a copy of the module name where each dot is replaced by an underscore. Moreover, if the module name has a hyphen, its suffix after (and including) the first hyphen is removed. For instance, if the module name is &lt;code&gt;a.b.c-v2.1&lt;/code&gt;, the function name will be &lt;code&gt;luaopen_a_b_c&lt;/code&gt;.</source>
          <target state="translated">对于模块搜索 &lt;code&gt;foo&lt;/code&gt; 将尝试打开这些文件 &lt;code&gt;./foo.so&lt;/code&gt; ， &lt;code&gt;./foo.dll&lt;/code&gt; 和 &lt;code&gt;/usr/local/foo/init.so&lt;/code&gt; ，按照这个顺序。一旦找到C库，该搜索者首先使用动态链接工具将应用程序与该库链接。然后，它尝试在库中查找要用作加载程序的C函数。这个C函数的名称是字符串&amp;ldquo; &lt;code&gt;luaopen_&lt;/code&gt; &amp;rdquo;，它与模块名称的副本连接在一起，其中每个点都由下划线代替。此外，如果模块名称带有连字符，则将删除第一个连字符（包括第一个连字符）后的后缀。例如，如果模块名称为 &lt;code&gt;a.b.c-v2.1&lt;/code&gt; ，则函数名称将为 &lt;code&gt;luaopen_a_b_c&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c977bccc91f0e0624ac1c030913a23c4d5a2cdd5" translate="yes" xml:space="preserve">
          <source>the table is like this:</source>
          <target state="translated">桌子是这样的。</target>
        </trans-unit>
        <trans-unit id="a5b582d5f4321bbc7606967d5525c7421e77a5ae" translate="yes" xml:space="preserve">
          <source>tonumber()</source>
          <target state="translated">tonumber()</target>
        </trans-unit>
        <trans-unit id="67335d97891434d9b2fc13c58d72fc58ea4a3509" translate="yes" xml:space="preserve">
          <source>tostring()</source>
          <target state="translated">tostring()</target>
        </trans-unit>
        <trans-unit id="a09ffb5c93c324094fe97d43e475793e48cd9cc2" translate="yes" xml:space="preserve">
          <source>translates to</source>
          <target state="translated">译为</target>
        </trans-unit>
        <trans-unit id="2f746d02fe588180e5eec4bbf6e7e14f76d8a306" translate="yes" xml:space="preserve">
          <source>type()</source>
          <target state="translated">type()</target>
        </trans-unit>
        <trans-unit id="01e58a219a3776ebc9720c996a37ce7aa1182c88" translate="yes" xml:space="preserve">
          <source>utf8.char()</source>
          <target state="translated">utf8.char()</target>
        </trans-unit>
        <trans-unit id="59eb83945a4772d78478b485d6f72d7fb152778c" translate="yes" xml:space="preserve">
          <source>utf8.charpattern</source>
          <target state="translated">utf8.charpattern</target>
        </trans-unit>
        <trans-unit id="78b16272b329d4f911b63850d6d379237d30869d" translate="yes" xml:space="preserve">
          <source>utf8.codepoint()</source>
          <target state="translated">utf8.codepoint()</target>
        </trans-unit>
        <trans-unit id="5ec7b2931dfb7c2e48b29f067f12b470a8e1c105" translate="yes" xml:space="preserve">
          <source>utf8.codes()</source>
          <target state="translated">utf8.codes()</target>
        </trans-unit>
        <trans-unit id="85188b5823c4024baf3316fc9d1b29a3870502ea" translate="yes" xml:space="preserve">
          <source>utf8.len()</source>
          <target state="translated">utf8.len()</target>
        </trans-unit>
        <trans-unit id="c8edb0148f3b9fc23c6177c7baee26c255d81017" translate="yes" xml:space="preserve">
          <source>utf8.offset()</source>
          <target state="translated">utf8.offset()</target>
        </trans-unit>
        <trans-unit id="ee87c12edd8318f8f8c6bbb87517c957c579e04c" translate="yes" xml:space="preserve">
          <source>will first set &lt;code&gt;a&lt;/code&gt; to 1, then print the value of &lt;code&gt;a&lt;/code&gt;, and finally run the file &lt;code&gt;script.lua&lt;/code&gt; with no arguments. (Here &lt;code&gt;$&lt;/code&gt; is the shell prompt. Your prompt may be different.)</source>
          <target state="translated">将首先设置 &lt;code&gt;a&lt;/code&gt; 为1，然后打印的价值 &lt;code&gt;a&lt;/code&gt; ，最后运行该文件 &lt;code&gt;script.lua&lt;/code&gt; 不带任何参数。（这里 &lt;code&gt;$&lt;/code&gt; 是shell提示符。您的提示符可能有所不同。）</target>
        </trans-unit>
        <trans-unit id="35c27b27a72e08637d00678476cc92429077bf95" translate="yes" xml:space="preserve">
          <source>will iterate over all characters in string &lt;code&gt;s&lt;/code&gt;, with &lt;code&gt;p&lt;/code&gt; being the position (in bytes) and &lt;code&gt;c&lt;/code&gt; the code point of each character. It raises an error if it meets any invalid byte sequence.</source>
          <target state="translated">将遍历字符串 &lt;code&gt;s&lt;/code&gt; 中的所有字符，其中 &lt;code&gt;p&lt;/code&gt; 是位置（以字节为单位）， &lt;code&gt;c&lt;/code&gt; 是每个字符的代码点。如果遇到任何无效的字节序列，则会引发错误。</target>
        </trans-unit>
        <trans-unit id="c1a06017b80342950867e029e780f34bc70b489b" translate="yes" xml:space="preserve">
          <source>will iterate over all characters of the file, starting at the current position. Unlike &lt;a href=&quot;#pdf-io.lines&quot;&gt;&lt;code&gt;io.lines&lt;/code&gt;&lt;/a&gt;, this function does not close the file when the loop ends.</source>
          <target state="translated">从当前位置开始，将遍历文件的所有字符。与&lt;a href=&quot;#pdf-io.lines&quot;&gt; &lt;code&gt;io.lines&lt;/code&gt; &lt;/a&gt;不同，该函数在循环结束时不会关闭文件。</target>
        </trans-unit>
        <trans-unit id="fff660b968f8fba0978e397e45f5bc32d0d92e3d" translate="yes" xml:space="preserve">
          <source>will iterate over all key&amp;ndash;value pairs of table &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">将遍历表 &lt;code&gt;t&lt;/code&gt; 的所有键-值对。</target>
        </trans-unit>
        <trans-unit id="2a1161751483cdc4039d463b29fdee6ddf66811a" translate="yes" xml:space="preserve">
          <source>will iterate over the key&amp;ndash;value pairs (&lt;code&gt;1,t[1]&lt;/code&gt;), (&lt;code&gt;2,t[2]&lt;/code&gt;), ..., up to the first nil value.</source>
          <target state="translated">将迭代键-值对（ &lt;code&gt;1,t[1]&lt;/code&gt; ），（ &lt;code&gt;2,t[2]&lt;/code&gt; ），...，直到第一个nil值。</target>
        </trans-unit>
        <trans-unit id="fed099758520aeb285c31c75d6579ec9d9a6d66c" translate="yes" xml:space="preserve">
          <source>will print &quot;&lt;code&gt;-e&lt;/code&gt;&quot;. If there is a script, the script is called with parameters &lt;code&gt;arg[1]&lt;/code&gt;, &amp;middot;&amp;middot;&amp;middot;, &lt;code&gt;arg[#arg]&lt;/code&gt;. (Like all chunks in Lua, the script is compiled as a vararg function.)</source>
          <target state="translated">将打印&amp;ldquo; &lt;code&gt;-e&lt;/code&gt; &amp;rdquo;。如果有脚本，则使用参数 &lt;code&gt;arg[1]&lt;/code&gt; ， &lt;code&gt;arg[#arg]&lt;/code&gt; ，arg [#arg]调用脚本。（与Lua中的所有块一样，脚本被编译为vararg函数。）</target>
        </trans-unit>
        <trans-unit id="4d5e3f44759c3410c81b3e34a722844bcd97a0a8" translate="yes" xml:space="preserve">
          <source>xpcall()</source>
          <target state="translated">xpcall()</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
