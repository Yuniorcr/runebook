<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="nim">
    <body>
      <group id="nim">
        <trans-unit id="1e8e7ed4df7e1d79df73533103355f606bd486f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;allowRemap&lt;/code&gt; only needs to be true if you want to call &lt;code&gt;mapMem&lt;/code&gt; on the resulting MemFile; else file handles are not kept open.</source>
          <target state="translated">&lt;code&gt;allowRemap&lt;/code&gt; 仅当要在生成的MemFile上调用 &lt;code&gt;mapMem&lt;/code&gt; 时，allowRemap才需要为true ；否则文件句柄不会保持打开状态。</target>
        </trans-unit>
        <trans-unit id="51fff43aca9a3f3d76b1af35103a5af6f22e4951" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;asyncdispatch&lt;/code&gt; module (event loop)</source>
          <target state="translated">&lt;code&gt;asyncdispatch&lt;/code&gt; 模块（事件循环）</target>
        </trans-unit>
        <trans-unit id="8fee4462a1fc6f7ca065434924f5269dc4e549ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;asyncnet&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;asyncnet&lt;/code&gt; 模块</target>
        </trans-unit>
        <trans-unit id="498123f82aff644359d1fd4cd6bfb34e823defde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;b[11..^2]&lt;/code&gt; is the portion &quot;useless&quot;, and &lt;code&gt;b[11..^2] = &quot;useful&quot;&lt;/code&gt; replaces the &quot;useless&quot; portion with &quot;useful&quot;, giving the result &quot;Slices are useful.&quot;</source>
          <target state="translated">&lt;code&gt;b[11..^2]&lt;/code&gt; 是&amp;ldquo;无用的&amp;rdquo;部分， &lt;code&gt;b[11..^2] = &quot;useful&quot;&lt;/code&gt; 将&amp;ldquo;无用的&amp;rdquo;部分替换为&amp;ldquo;有用的&amp;rdquo;，结果为&amp;ldquo;切片有用&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="d2ea31cf1c26dd26b1244e5ffea23471a18ded80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cast[T](x)&lt;/code&gt; in JavaScript is translated to &lt;code&gt;(x)&lt;/code&gt;, except for casting between signed/unsigned ints, in which case it behaves as static cast in C language.</source>
          <target state="translated">&lt;code&gt;cast[T](x)&lt;/code&gt; JavaScript中的cast [T]（x）转换为 &lt;code&gt;(x)&lt;/code&gt; ，除了有符号/无符号int之间的强制转换外，在这种情况下，它的行为与C语言中的静态强制转换相同。</target>
        </trans-unit>
        <trans-unit id="78e583a6ca5943602d2fea749731670fb16ec519" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const NimVersion = &quot;0.0.0&quot;&lt;/code&gt;&lt;strong&gt;=&amp;gt;&lt;/strong&gt;&lt;a href=&quot;system#NimVersion&quot;&gt;#NimVersion&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;const NimVersion = &quot;0.0.0&quot;&lt;/code&gt; &lt;strong&gt;=&amp;gt; &lt;/strong&gt;&lt;a href=&quot;system#NimVersion&quot;&gt;#NimVersion&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="61889a3978487883ade1aa88a933aede33e10d71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cstring&lt;/code&gt; in JavaScript means JavaScript string. It is a good practice to use &lt;code&gt;cstring&lt;/code&gt; only when it is semantically appropriate. E.g. don't use &lt;code&gt;cstring&lt;/code&gt; as a binary data buffer.</source>
          <target state="translated">&lt;code&gt;cstring&lt;/code&gt; JavaScript中的cstring表示JavaScript字符串。仅当在语义上适当时才使用 &lt;code&gt;cstring&lt;/code&gt; 是一个好习惯。例如，不要将 &lt;code&gt;cstring&lt;/code&gt; 用作二进制数据缓冲区。</target>
        </trans-unit>
        <trans-unit id="ac407e594720119511a2dff99e2c8cb540795818" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;do&lt;/code&gt; is written after the parentheses enclosing the regular proc params. The proc expression represented by the do block is appended to them. In calls using the command syntax, the do block will bind to the immediately preceeding expression, transforming it in a call.</source>
          <target state="translated">&lt;code&gt;do&lt;/code&gt; 是在圆括号内包含常规proc参数的。由do块表示的proc表达式将附加到它们之后。在使用命令语法的调用中，do块将绑定到紧随其后的表达式，并在调用中对其进行转换。</target>
        </trans-unit>
        <trans-unit id="560a65c3942b87610678dbe71906d997387954ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;do&lt;/code&gt; with parentheses is an anonymous &lt;code&gt;proc&lt;/code&gt;; however a &lt;code&gt;do&lt;/code&gt; without parentheses is just a block of code. The &lt;code&gt;do&lt;/code&gt; notation can be used to pass multiple blocks to a macro:</source>
          <target state="translated">&lt;code&gt;do&lt;/code&gt; 带括号的是匿名 &lt;code&gt;proc&lt;/code&gt; ; 但是， &lt;code&gt;do&lt;/code&gt; 带括号的代码只是一段代码。的 &lt;code&gt;do&lt;/code&gt; 符号可用于传递多个块，以宏：</target>
        </trans-unit>
        <trans-unit id="f8bfd3653988749a0a70c5e576012e23dd595dcb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; must be &lt;code&gt;gcsafe&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 必须是 &lt;code&gt;gcsafe&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d47873c2e8cae488fed6cb4e83f288d75cc0a265" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; must not have the calling convention &lt;code&gt;closure&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 不能具有调用约定 &lt;code&gt;closure&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0fc4e09f9db81a165920ce36aaee0a3d848f2fbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt;'s parameters may not be of type &lt;code&gt;var&lt;/code&gt;. This means one has to use raw &lt;code&gt;ptr&lt;/code&gt;'s for data passing reminding the programmer to be careful.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 的参数不能为 &lt;code&gt;var&lt;/code&gt; 类型。这意味着必须使用raw &lt;code&gt;ptr&lt;/code&gt; 进行数据传递，以提醒程序员要小心。</target>
        </trans-unit>
        <trans-unit id="a0a3e940e2d69b10dcd7b011d95e7e271faec390" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findFile&lt;/code&gt; is a proc used by the rst &lt;code&gt;include&lt;/code&gt; directive among others. The purpose of this proc is to mangle or filter paths. It receives paths specified in the rst document and has to return a valid path to existing files or the empty string otherwise. If you pass &lt;code&gt;nil&lt;/code&gt;, a default proc will be used which given a path returns the input path only if the file exists. One use for this proc is to transform relative paths found in the document to absolute path, useful if the rst file and the resources it references are not in the same directory as the current working directory.</source>
          <target state="translated">&lt;code&gt;findFile&lt;/code&gt; 是第一个 &lt;code&gt;include&lt;/code&gt; 指令使用的proc 等。此过程的目的是操纵或过滤路径。它接收第一个文档中指定的路径，并且必须返回到现有文件的有效路径，否则返回空字符串。如果传递 &lt;code&gt;nil&lt;/code&gt; ，则将使用默认proc，给定路径仅在文件存在时才返回输入路径。此proc的一种用法是将文档中找到的相对路径转换为绝对路径，如果rst文件及其引用的资源与当前工作目录不在同一目录中，则很有用。</target>
        </trans-unit>
        <trans-unit id="8300161461027b1d236fc8fcb5051bea30977ff2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fmt&lt;/code&gt; vs. &lt;code&gt;&amp;amp;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fmt&lt;/code&gt; 与 &lt;code&gt;&amp;amp;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7037da41cd9a367dd5a1197389e84235b7fd299" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;func&lt;/code&gt; is syntactic sugar for a proc with no side effects:</source>
          <target state="translated">&lt;code&gt;func&lt;/code&gt; 是一种无副作用的proc语法糖：</target>
        </trans-unit>
        <trans-unit id="924aa797cc590677bd14ef7705744856d8172a99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getTime&lt;/code&gt; should generally be prefered over this proc.</source>
          <target state="translated">&lt;code&gt;getTime&lt;/code&gt; 通常应优先于此过程使用getTime。</target>
        </trans-unit>
        <trans-unit id="d638e902f126f0c7aa4a0463f14fc91aa6e101cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gettimeofday&lt;/code&gt; on Posix systems.</source>
          <target state="translated">&lt;code&gt;gettimeofday&lt;/code&gt; Posix系统上的gettimeofday。</target>
        </trans-unit>
        <trans-unit id="d5b46867399a3ebc590baf66c27020db2279084c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hash(myBuf, 0, myBuf.high)&lt;/code&gt; is equivalent to &lt;code&gt;hash(myBuf)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;hash(myBuf, 0, myBuf.high)&lt;/code&gt; 等效于 &lt;code&gt;hash(myBuf)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="45dddddd2bbfedd088d7b3c125dbef25e0d38ba5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hash(myStr, 0, myStr.high)&lt;/code&gt; is equivalent to &lt;code&gt;hash(myStr)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;hash(myStr, 0, myStr.high)&lt;/code&gt; 等同于 &lt;code&gt;hash(myStr)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d09d0789db01f5a9c05f92add326a6c6418fad63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hashIgnoreCase(myBuf, 0, myBuf.high)&lt;/code&gt; is equivalent to &lt;code&gt;hashIgnoreCase(myBuf)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;hashIgnoreCase(myBuf, 0, myBuf.high)&lt;/code&gt; 等效于 &lt;code&gt;hashIgnoreCase(myBuf)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="539893790133747c72f0c3d326648e951cd62455" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hashIgnoreStyle(myBuf, 0, myBuf.high)&lt;/code&gt; is equivalent to &lt;code&gt;hashIgnoreStyle(myBuf)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;hashIgnoreStyle(myBuf, 0, myBuf.high)&lt;/code&gt; 等效于 &lt;code&gt;hashIgnoreStyle(myBuf)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a6dad588628bbfdda78e877da81dc4063efbca4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;httpMethod&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;httpMethod&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="446c4e7001b764a870cc632382c962e1c7846115" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init&lt;/code&gt; is used to create a value type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; 用于创建值类型 &lt;code&gt;T&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bac1f760d92cd7667c1edcfeeb152b5ca3e42fb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int8&lt;/code&gt;-&lt;code&gt;int16&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int8&lt;/code&gt;-&lt;code&gt;int16&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0f4bbdf85817b62fc87718830d3fcc8142efb089" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;items&lt;/code&gt; and &lt;code&gt;mitems&lt;/code&gt;, which provides immutable and mutable elements respectively, and</source>
          <target state="translated">&lt;code&gt;items&lt;/code&gt; 和 &lt;code&gt;mitems&lt;/code&gt; ，分别提供不可变和可变元素，以及</target>
        </trans-unit>
        <trans-unit id="d080c7c8dc2ed97f395585da2bba25e2810e6a4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iterator pairs[T](a: seq[T]): tuple[key: int, val: T] {.inline.}&lt;/code&gt;&lt;strong&gt;=&amp;gt;&lt;/strong&gt;&lt;a href=&quot;system#pairs.i,seq%5BT%5D&quot;&gt;#pairs.i,seq[T]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;iterator pairs[T](a: seq[T]): tuple[key: int, val: T] {.inline.}&lt;/code&gt; &lt;strong&gt;=&amp;gt; &lt;/strong&gt;&lt;a href=&quot;system#pairs.i,seq%5BT%5D&quot;&gt;＃pairs.i，seq [T]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db0b9a7913713991512790ae51161be2f487b7b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; - the current key, if it exists, or the key passed to &lt;code&gt;withKey&lt;/code&gt; otherwise;</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; -当前的密钥，如果它存在，或传递给关键 &lt;code&gt;withKey&lt;/code&gt; 另有;</target>
        </trans-unit>
        <trans-unit id="137d632b8d1a56e511b10636ac245a0a4100b468" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;koch temp&lt;/code&gt; creates a debug build of the compiler, which is useful to create stacktraces for compiler debugging.</source>
          <target state="translated">&lt;code&gt;koch temp&lt;/code&gt; 创建编译器的调试版本，这对于为编译器调试创建堆栈跟踪很有用。</target>
        </trans-unit>
        <trans-unit id="b79b05bec9bfe83a19a391ff0202f6c5f735d0bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;koch temp&lt;/code&gt; returns 125 as the exit code in case the compiler compilation fails. This exit code tells &lt;code&gt;git bisect&lt;/code&gt; to skip the current commit.:</source>
          <target state="translated">&lt;code&gt;koch temp&lt;/code&gt; 如果编译器编译失败，则koch temp返回125作为退出代码。此退出代码告诉 &lt;code&gt;git bisect&lt;/code&gt; 跳过当前提交。</target>
        </trans-unit>
        <trans-unit id="1e569b2cd12fd789d91b613969201b1b396b9248" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mach_absolute_time&lt;/code&gt; on Mac OS X.</source>
          <target state="translated">&lt;code&gt;mach_absolute_time&lt;/code&gt; 在Mac OS X上为mach_absolute_time。</target>
        </trans-unit>
        <trans-unit id="7edfc1fd9a182aafc615613438430cf9ea485a6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mappedSize&lt;/code&gt; and &lt;code&gt;offset&lt;/code&gt; can be used to map only a slice of the file.</source>
          <target state="translated">&lt;code&gt;mappedSize&lt;/code&gt; 和 &lt;code&gt;offset&lt;/code&gt; 只能用于映射文件的一部分。</target>
        </trans-unit>
        <trans-unit id="aa96a3fe1f430f3bd1fcff24de7ff608b318637e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mappedSize&lt;/code&gt; of &lt;code&gt;-1&lt;/code&gt; maps to the whole file, and &lt;code&gt;offset&lt;/code&gt; must be multiples of the PAGE SIZE of your OS</source>
          <target state="translated">&lt;code&gt;mappedSize&lt;/code&gt; 的 &lt;code&gt;-1&lt;/code&gt; 映射到整个文件，并 &lt;code&gt;offset&lt;/code&gt; 必须是你的操作系统的页大小的倍数</target>
        </trans-unit>
        <trans-unit id="7df7743ccba4158e36f639a44a77c1c52f23d01c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;match&lt;/code&gt; macros are subject to overload resolution. First the &lt;code&gt;case&lt;/code&gt;'s selector expression is used to determine which &lt;code&gt;match&lt;/code&gt; macro to call. To this macro is then passed the complete &lt;code&gt;case&lt;/code&gt; statement body and the macro is evaluated.</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; 宏受超载分辨率的约束。首先， &lt;code&gt;case&lt;/code&gt; 的选择器表达式用于确定要调用的 &lt;code&gt;match&lt;/code&gt; 宏。然后，将完整的 &lt;code&gt;case&lt;/code&gt; 语句主体传递给此宏，并对宏进行评估。</target>
        </trans-unit>
        <trans-unit id="33681e35af54b0be5e86cbe9c5c3384c078bfb89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxRedirects&lt;/code&gt; specifies the maximum amount of redirects to follow, default is 5.</source>
          <target state="translated">&lt;code&gt;maxRedirects&lt;/code&gt; 指定要遵循的最大重定向数量，默认值为5。</target>
        </trans-unit>
        <trans-unit id="a63e991a055d70ba87b68410a67988fbb7f80b2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new&lt;/code&gt; is used to create a reference type &lt;code&gt;P&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 用于创建引用类型 &lt;code&gt;P&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a602be3b30c82cb1f34df2de16159935bf9ca5cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newFileSize&lt;/code&gt; can only be set if the file does not exist and is opened with write access (e.g., with fmReadWrite).</source>
          <target state="translated">&lt;code&gt;newFileSize&lt;/code&gt; 如果文件不存在，只能设置并打开与写访问（例如，fmReadWrite）。</target>
        </trans-unit>
        <trans-unit id="c33624742e3075a81ef915e9323ccf924f4d420e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nim dump&lt;/code&gt; shows the contents of the PATH.</source>
          <target state="translated">&lt;code&gt;nim dump&lt;/code&gt; 显示了PATH的内容。</target>
        </trans-unit>
        <trans-unit id="1d05d87869603b415dc3e7648e8e314e881eaa16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nimvm&lt;/code&gt; is a special symbol, that may be used as expression of &lt;code&gt;when nimvm&lt;/code&gt; statement to differentiate execution path between runtime and compile time.</source>
          <target state="translated">&lt;code&gt;nimvm&lt;/code&gt; 是一个特殊的符号，可以用作 &lt;code&gt;when nimvm&lt;/code&gt; 语句何时在运行时和编译时间之间进行区分的表达式。</target>
        </trans-unit>
        <trans-unit id="e6d0deed51af5627d170be866f9c9b832e859b40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nnkBracketExpr(nnkIdent(&quot;array&quot;),...&lt;/code&gt;*</source>
          <target state="translated">&lt;code&gt;nnkBracketExpr(nnkIdent(&quot;array&quot;),...&lt;/code&gt;*</target>
        </trans-unit>
        <trans-unit id="eaef4608c727f153577ce8477a94c4a41016aa3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nnkIdentDefs&lt;/code&gt; need to have at least three children, but they can have more: first comes a list of identifiers followed by a type and value nodes. This helper proc creates a three node subtree, the first subnode being a single identifier name. Both the &lt;code&gt;kind&lt;/code&gt; node and &lt;code&gt;default&lt;/code&gt; (value) nodes may be empty depending on where the &lt;code&gt;nnkIdentDefs&lt;/code&gt; appears: tuple or object definitions will have an empty &lt;code&gt;default&lt;/code&gt; node, &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;var&lt;/code&gt; blocks may have an empty &lt;code&gt;kind&lt;/code&gt; node if the identifier is being assigned a value. Example:</source>
          <target state="translated">&lt;code&gt;nnkIdentDefs&lt;/code&gt; 至少需要三个孩子，但它们可以有更多孩子：首先是标识符列表，其次是类型和值节点。该帮助程序将创建一个三节点子树，第一个子节点是单个标识符名称。取决于 &lt;code&gt;nnkIdentDefs&lt;/code&gt; 出现的位置， &lt;code&gt;kind&lt;/code&gt; 节点和 &lt;code&gt;default&lt;/code&gt; （值）节点都可以为空：如果为标识符分配了值，则元组或对象定义的 &lt;code&gt;default&lt;/code&gt; 节点将为空， &lt;code&gt;let&lt;/code&gt; 或 &lt;code&gt;var&lt;/code&gt; 块的 &lt;code&gt;kind&lt;/code&gt; 节点可能为空。例：</target>
        </trans-unit>
        <trans-unit id="23cb81755297bb91f875d58a64e51a11f3bb1bba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nnkTypeClassTy&lt;/code&gt;*</source>
          <target state="translated">&lt;code&gt;nnkTypeClassTy&lt;/code&gt;*</target>
        </trans-unit>
        <trans-unit id="d979bfd7809af3f787da470102b84296dc43dee7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notin&lt;/code&gt; and &lt;code&gt;isnot&lt;/code&gt; have the obvious meanings.</source>
          <target state="translated">&lt;code&gt;notin&lt;/code&gt; 和 &lt;code&gt;isnot&lt;/code&gt; 具有明显的含义。</target>
        </trans-unit>
        <trans-unit id="b733da2df93ef65b306bd9461fe3ea6457795e78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; must be multiples of the PAGE SIZE of your OS (usually 4K or 8K but is unique to your OS)</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 必须是操作系统页面大小的倍数（通常为4K或8K，但对于您的操作系统是唯一的）</target>
        </trans-unit>
        <trans-unit id="8fb1b7b67c3dc439712f44d89e4d717f52f04357" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pairExists&lt;/code&gt; - &lt;code&gt;true&lt;/code&gt; if the key exists, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;pairExists&lt;/code&gt; - &lt;code&gt;true&lt;/code&gt; 如果键存在， &lt;code&gt;false&lt;/code&gt; ，否则。</target>
        </trans-unit>
        <trans-unit id="0e50d29d3877d70186a81b4d6f92422034d6a8bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pairs&lt;/code&gt; and &lt;code&gt;mpairs&lt;/code&gt; which provides the element and an index number (immutable and mutable respectively)</source>
          <target state="translated">&lt;code&gt;pairs&lt;/code&gt; 和 &lt;code&gt;mpairs&lt;/code&gt; 其提供元件和一个索引号（可变和不可变分别）</target>
        </trans-unit>
        <trans-unit id="46fd512967085e03b5725fc1b1c542ab6c02be40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proc getTotalMem(): int {.rtl, raises: [], tags: [].}&lt;/code&gt;&lt;strong&gt;=&amp;gt;&lt;/strong&gt;&lt;a href=&quot;system#getTotalMem,&quot;&gt;#getTotalMem,&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;proc getTotalMem(): int {.rtl, raises: [], tags: [].}&lt;/code&gt; &lt;strong&gt;=&amp;gt; &lt;/strong&gt;&lt;a href=&quot;system#getTotalMem,&quot;&gt;#getTotalMem，&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="196f6343dc5b835d948b2f0d904b1e516670f218" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proc len[T](x: seq[T]): int {.magic: &quot;LengthSeq&quot;, noSideEffect.}&lt;/code&gt;&lt;strong&gt;=&amp;gt;&lt;/strong&gt;&lt;a href=&quot;system#len,seq%5BT%5D&quot;&gt;#len,seq[T]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;proc len[T](x: seq[T]): int {.magic: &quot;LengthSeq&quot;, noSideEffect.}&lt;/code&gt; &lt;strong&gt;=&amp;gt; &lt;/strong&gt;&lt;a href=&quot;system#len,seq%5BT%5D&quot;&gt;＃len，seq [T]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5660e0b3db81a363a41e94bcdc8ef2c68d94a1ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proc&lt;/code&gt; types are currently always invariant, but future versions of Nim may relax this rule.</source>
          <target state="translated">&lt;code&gt;proc&lt;/code&gt; 类型当前始终不变，但是Nim的未来版本可能会放宽此规则。</target>
        </trans-unit>
        <trans-unit id="028210015ead3722db469fae99b22a73fd0cebdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proxy&lt;/code&gt; specifies an HTTP proxy to use for this HTTP client's connections.</source>
          <target state="translated">&lt;code&gt;proxy&lt;/code&gt; 指定用于此HTTP客户端连接的HTTP代理。</target>
        </trans-unit>
        <trans-unit id="4959eb23bdd78e53cb8af81bc9bb9ebcd2e0f5fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r&quot;&quot;&quot;&quot;&lt;/code&gt; is not possible with this notation, because the three leading quotes introduce a triple quoted string literal. &lt;code&gt;r&quot;&quot;&quot;&lt;/code&gt; is the same as &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt; since triple quoted string literals do not interpret escape sequences either.</source>
          <target state="translated">&lt;code&gt;r&quot;&quot;&quot;&quot;&lt;/code&gt; 用这种表示法不可能使用r&amp;ldquo;&amp;rdquo;&amp;ldquo;&amp;rdquo;，因为三个引号引起了一个三重引号的字符串文字。 &lt;code&gt;r&quot;&quot;&quot;&lt;/code&gt; 与 &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt; 相同，因为三引号引起来的字符串文字也不解释转义序列。</target>
        </trans-unit>
        <trans-unit id="2b075aac17257f2359ad806b6183d04e910a5afb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ref&lt;/code&gt; parameters are deeply copied which is a subtle semantic change and can cause performance problems but ensures memory safety. This deep copy is performed via &lt;code&gt;system.deepCopy&lt;/code&gt; and so can be overridden.</source>
          <target state="translated">&lt;code&gt;ref&lt;/code&gt; 参数被深深复制，这是一个细微的语义变化，可能导致性能问题，但确保了内存安全。此深层复制是通过 &lt;code&gt;system.deepCopy&lt;/code&gt; 执行的，因此可以被覆盖。</target>
        </trans-unit>
        <trans-unit id="35d9f8b60195dac2076797c209d92497e8a52809" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return&lt;/code&gt; is allowed in a closure iterator (but rarely useful) and ends iteration.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 在封闭迭代器中允许返回（但很少使用）并结束迭代。</target>
        </trans-unit>
        <trans-unit id="c6eb664148a5a03959b583e8dd19730950f68b68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return&lt;/code&gt; without an expression is a short notation for &lt;code&gt;return result&lt;/code&gt; if the proc has a return type. The &lt;span id=&quot;result_1&quot;&gt;result&lt;/span&gt; variable is always the return value of the procedure. It is automatically declared by the compiler. As all variables, &lt;code&gt;result&lt;/code&gt; is initialized to (binary) zero:</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 如果proc具有返回类型，则不带表达式的return是 &lt;code&gt;return result&lt;/code&gt; 的缩写。该&lt;span id=&quot;result_1&quot;&gt;结果&lt;/span&gt;变量始终是过程的返回值。它由编译器自动声明。作为所有变量， &lt;code&gt;result&lt;/code&gt; 初始化为（二进制）零：</target>
        </trans-unit>
        <trans-unit id="113c74a3fd2826389685dc9b0cc688a75bb22a6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scanf&lt;/code&gt; returns true if the input string &lt;strong&gt;starts with&lt;/strong&gt; the specified pattern. If instead it should only return true if there is also nothing left in the input, append &lt;code&gt;$.&lt;/code&gt; to your pattern.</source>
          <target state="translated">&lt;code&gt;scanf&lt;/code&gt; 如果输入字符串&lt;strong&gt;以&lt;/strong&gt;指定的模式&lt;strong&gt;开头，&lt;/strong&gt;则scanf返回true 。相反，如果仅在输入中还没有任何内容的情况下返回true，则追加 &lt;code&gt;$.&lt;/code&gt; 根据您的模式。</target>
        </trans-unit>
        <trans-unit id="b10ad8ca26a39b5bc50703ca1825380095c2b3f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;selectors&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;selectors&lt;/code&gt; 模块</target>
        </trans-unit>
        <trans-unit id="414b4c694a3b05d8c88e89f76d20d0406356c388" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; must be of exactly the size that was requested via &lt;code&gt;mapMem&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 必须与 &lt;code&gt;mapMem&lt;/code&gt; 要求的大小完全相同。</target>
        </trans-unit>
        <trans-unit id="7428fa040024da68196dbad3f187333725a9111f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;spawn&lt;/code&gt; executes the passed expression on the thread pool and returns a &lt;span id=&quot;data-flow-variable_1&quot;&gt;data flow variable&lt;/span&gt;&lt;code&gt;FlowVar[T]&lt;/code&gt; that can be read from. The reading with the &lt;code&gt;^&lt;/code&gt; operator is &lt;strong&gt;blocking&lt;/strong&gt;. However, one can use &lt;code&gt;blockUntilAny&lt;/code&gt; to wait on multiple flow variables at the same time:</source>
          <target state="translated">&lt;code&gt;spawn&lt;/code&gt; 在线程池上执行传递的表达式，并返回可以读取的&lt;span id=&quot;data-flow-variable_1&quot;&gt;数据流变量&lt;/span&gt; &lt;code&gt;FlowVar[T]&lt;/code&gt; 。使用 &lt;code&gt;^&lt;/code&gt; 运算符的读取正在&lt;strong&gt;阻塞&lt;/strong&gt;。但是，可以使用 &lt;code&gt;blockUntilAny&lt;/code&gt; 同时等待多个流变量：</target>
        </trans-unit>
        <trans-unit id="d6a078341ec3b81c9830d57f0b0899663805e59c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;spawn&lt;/code&gt; within a &lt;code&gt;parallel&lt;/code&gt; section has special semantics.</source>
          <target state="translated">&lt;code&gt;spawn&lt;/code&gt; 一个内 &lt;code&gt;parallel&lt;/code&gt; 部分具有特殊的语义。</target>
        </trans-unit>
        <trans-unit id="0a237f056e6830032577998fb90190fdcae2b2f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sslContext&lt;/code&gt; specifies the SSL context to use for HTTPS requests.</source>
          <target state="translated">&lt;code&gt;sslContext&lt;/code&gt; 指定用于HTTPS请求的SSL上下文。</target>
        </trans-unit>
        <trans-unit id="14ce006a57832b51af0da0a7cc6741ef70d10283" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stackTrace&lt;/code&gt; is provided only if the failure occurred due to an exception. &lt;code&gt;checkpoints&lt;/code&gt; is never &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stackTrace&lt;/code&gt; 仅当由于异常而导致失败时才提供stackTrace。 &lt;code&gt;checkpoints&lt;/code&gt; 永远不会 &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb4fe14b57e46dc6a68b8b91ce1197bfba9b9fbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;state&lt;/code&gt; may be overriden, i.e. if &lt;code&gt;sock&lt;/code&gt; is not connected it should be adjusted properly. By default it will be assumed that the socket is connected. Please note this is only applicable to TCP client sockets, if &lt;code&gt;sock&lt;/code&gt; is a different type of socket &lt;code&gt;state&lt;/code&gt; needs to be adjusted!!!</source>
          <target state="translated">&lt;code&gt;state&lt;/code&gt; 可能会被覆盖，即如果未连接 &lt;code&gt;sock&lt;/code&gt; ，则应进行适当调整。默认情况下，将假定套接字已连接。请注意，这仅适用于TCP客户端套接字，如果 &lt;code&gt;sock&lt;/code&gt; 是另一种类型的套接字 &lt;code&gt;state&lt;/code&gt; 需要调整！！！</target>
        </trans-unit>
        <trans-unit id="e674b50eb18e2a7db0371aad81cb1f5762665b1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template newException[](exceptn: type; message: string): expr&lt;/code&gt;&lt;strong&gt;=&amp;gt;&lt;/strong&gt;&lt;a href=&quot;system#newException.t,type,string&quot;&gt;#newException.t,type,string&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;template newException[](exceptn: type; message: string): expr&lt;/code&gt; &lt;strong&gt;=&amp;gt; &lt;/strong&gt;&lt;a href=&quot;system#newException.t,type,string&quot;&gt;＃newException.t，type，string&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2bb140ccbc87a6b939e9e3439c2e3cc8632b83d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; - timeout value in milliseconds.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; -超时值（以毫秒为单位）。</target>
        </trans-unit>
        <trans-unit id="96b9adea7cc07edd40eb34f2988f6e65b0f32008" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; is specified in milliseconds and &lt;code&gt;-1&lt;/code&gt; can be specified for an unlimited time.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; 以毫秒为单位，并且 &lt;code&gt;-1&lt;/code&gt; 可以指定为无限时间。</target>
        </trans-unit>
        <trans-unit id="bd67e5934c954c7a83cd4b013bf93f8697e48fe3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; is specified in milliseconds and &lt;code&gt;-1&lt;/code&gt; can be specified for an unlimited time. &lt;strong&gt;Warning:&lt;/strong&gt; This is deprecated since version 0.16.2. Use the &lt;code&gt;selectRead&lt;/code&gt; procedure instead.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; 以毫秒为单位，并且 &lt;code&gt;-1&lt;/code&gt; 可以指定为无限时间。&lt;strong&gt;警告：&lt;/strong&gt;从版本0.16.2开始不推荐使用。请改用 &lt;code&gt;selectRead&lt;/code&gt; 过程。</target>
        </trans-unit>
        <trans-unit id="47d67af238e56b35260c7cf302090a09b5d4e74c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; specifies the number of milliseconds to allow before a &lt;code&gt;TimeoutError&lt;/code&gt; is raised.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; 指定在引发 &lt;code&gt;TimeoutError&lt;/code&gt; 之前允许的毫秒数。</target>
        </trans-unit>
        <trans-unit id="0a3d983ab412f774a2d43a7773e59264a9986835" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type SignedInt = int | int8 | int16 | int32 | int64&lt;/code&gt;&lt;strong&gt;=&amp;gt;&lt;/strong&gt;&lt;a href=&quot;system#SignedInt&quot;&gt;#SignedInt&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;type SignedInt = int | int8 | int16 | int32 | int64&lt;/code&gt; &lt;strong&gt;=&amp;gt; &lt;/strong&gt;&lt;a href=&quot;system#SignedInt&quot;&gt;#SignedInt&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="36800177ee2b92e4b74725a1b76cc86e80ecbacc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; acts like a generic type. For instance, the type of the symbol &lt;code&gt;int&lt;/code&gt; is &lt;code&gt;type[int]&lt;/code&gt;. Just like with regular generic types, when the generic param is ommited, &lt;code&gt;type&lt;/code&gt; denotes the type class of all types. As a syntactic convenience, you can also use &lt;code&gt;type&lt;/code&gt; as a modifier. &lt;code&gt;type int&lt;/code&gt; is considered the same as &lt;code&gt;type[int]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 行为就像泛型类型。例如，符号 &lt;code&gt;int&lt;/code&gt; 的 &lt;code&gt;type[int]&lt;/code&gt; 是type [int]。就像常规泛型类型一样，当泛型参数被省略时， &lt;code&gt;type&lt;/code&gt; 表示所有类型的类型类。为了语法上的方便，您还可以将 &lt;code&gt;type&lt;/code&gt; 用作修饰符。 &lt;code&gt;type int&lt;/code&gt; 被认为与 &lt;code&gt;type[int]&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="ad64a4834d20179ee6e4e81e9e9cec9447164baf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uint8&lt;/code&gt;/&lt;code&gt;byte&lt;/code&gt;-&lt;code&gt;uint16&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;uint8&lt;/code&gt;/&lt;code&gt;byte&lt;/code&gt;-&lt;code&gt;uint16&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5524951be56e32fd2f7b7e27e9fb8dc263ca8215" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;untyped&lt;/code&gt; and &lt;code&gt;varargs[untyped]&lt;/code&gt; are the only metatype that are lazy in this sense, the other metatypes &lt;code&gt;typed&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; are not lazy.</source>
          <target state="translated">&lt;code&gt;untyped&lt;/code&gt; 从这个意义上说，untyped和 &lt;code&gt;varargs[untyped]&lt;/code&gt; 是唯一的惰性 &lt;code&gt;typed&lt;/code&gt; ，其他typetype 和 &lt;code&gt;type&lt;/code&gt; 的类型不是惰性的。</target>
        </trans-unit>
        <trans-unit id="dd2e83eaaa4d30da3388fb06180b2d9cdc38b178" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;userAgent&lt;/code&gt; specifies the user agent that will be used when making requests.</source>
          <target state="translated">&lt;code&gt;userAgent&lt;/code&gt; 指定发出请求时将使用的用户代理。</target>
        </trans-unit>
        <trans-unit id="6e8057947b214078488d318b597d51c19c74bced" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;val&lt;/code&gt; - the current value, if the key exists, or default value of the type otherwise;</source>
          <target state="translated">&lt;code&gt;val&lt;/code&gt; -当前值（如果键存在），否则为类型的默认值；</target>
        </trans-unit>
        <trans-unit id="70bd849b02a91f69a4faafb3130dd3312083ca7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var globalRaiseHook: proc (e: ref E_Base): bool {.nimcall.}&lt;/code&gt;&lt;strong&gt;=&amp;gt;&lt;/strong&gt;&lt;a href=&quot;system#globalRaiseHook&quot;&gt;#globalRaiseHook&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;var globalRaiseHook: proc (e: ref E_Base): bool {.nimcall.}&lt;/code&gt; &lt;strong&gt;=&amp;gt; &lt;/strong&gt;&lt;a href=&quot;system#globalRaiseHook&quot;&gt;#globalRaiseHook&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8fa91fdb54c79794b9a602441c5470976dba8159" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;varargs[typed]&lt;/code&gt; is treated specially: It matches a variable list of arguments of arbitrary type but &lt;em&gt;always&lt;/em&gt; constructs an implicit array. This is required so that the builtin &lt;code&gt;echo&lt;/code&gt; proc does what is expected:</source>
          <target state="translated">&lt;code&gt;varargs[typed]&lt;/code&gt; 被特殊对待：它匹配任意类型的参数变量列表，但&lt;em&gt;始终&lt;/em&gt;构造一个隐式数组。这是必需的，以便内置的 &lt;code&gt;echo&lt;/code&gt; proc可以完成预期的工作：</target>
        </trans-unit>
        <trans-unit id="cfb3b8046a3ab81ffe6881ac3de26835854c0b13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;when nimvm&lt;/code&gt; statement must meet the following requirements:</source>
          <target state="translated">&lt;code&gt;when nimvm&lt;/code&gt; 语句必须满足以下要求时：</target>
        </trans-unit>
        <trans-unit id="67ac27b54addce5df88f6ce1de6ac4b1806d80c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yield&lt;/code&gt; in a closure iterator can not occur in a &lt;code&gt;try&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; 在 &lt;code&gt;try&lt;/code&gt; 语句中不能出现闭包迭代器中的yield。</target>
        </trans-unit>
        <trans-unit id="b17d688332fc513102b8bb34b3b994661a671d9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zonedTimeFromTimeImpl&lt;/code&gt; and &lt;code&gt;zonedTimeFromAdjTimeImpl&lt;/code&gt; is used as the underlying implementations for &lt;code&gt;zonedTimeFromTime&lt;/code&gt; and &lt;code&gt;zonedTimeFromAdjTime&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;zonedTimeFromTimeImpl&lt;/code&gt; 和 &lt;code&gt;zonedTimeFromAdjTimeImpl&lt;/code&gt; 被用作底层实现 &lt;code&gt;zonedTimeFromTime&lt;/code&gt; 和 &lt;code&gt;zonedTimeFromAdjTime&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7de7681dca8728ba640e9addf663d66eea92586e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;%&lt;/em&gt; substitution operator for ropes. Does not support the &lt;code&gt;$identifier&lt;/code&gt; nor &lt;code&gt;${identifier}&lt;/code&gt; notations.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;绳索的&lt;em&gt;％&lt;/em&gt;替代运算符。不支持 &lt;code&gt;$identifier&lt;/code&gt; 或 &lt;code&gt;${identifier}&lt;/code&gt; 表示法。</target>
        </trans-unit>
        <trans-unit id="703376a559c520d84ae5746f8f84e6453c7ecbf2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Deprecated since version 0.18.1&lt;/em&gt;: No good usages of this feature are known.</source>
          <target state="translated">&lt;em&gt;从0.18.1版开始&lt;/em&gt;不推荐使用：&lt;em&gt;尚不清楚&lt;/em&gt;此功能的良好用法。</target>
        </trans-unit>
        <trans-unit id="a2e021efea2e75524a8b29d10b025f45cf8dcb6b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Expressions&lt;/em&gt; are parts of a statement which usually result in a value. The condition in an if statement is an example for an expression. Expressions can contain indentation at certain places for better readability:</source>
          <target state="translated">&lt;em&gt;表达式&lt;/em&gt;是语句的一部分，通常会产生一个值。if语句中的条件是表达式的示例。表达式可以在某些位置包含缩进以提高可读性：</target>
        </trans-unit>
        <trans-unit id="2e3cb0560107f66918fa3aedb67fc091d9d49443" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Ext&lt;/em&gt; should be given without the leading '.', because some filesystems may use a different character. (Although I know of none such beast.)</source>
          <target state="translated">&lt;em&gt;Ext&lt;/em&gt;应该不带前导&amp;ldquo;。&amp;rdquo;，因为某些文件系统可能使用不同的字符。（尽管我不知道有这样的野兽。）</target>
        </trans-unit>
        <trans-unit id="00e5801a705eb26208dbadfb059011bb00f52b91" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Runtime type information&lt;/em&gt; (RTTI) is needed for several aspects of the Nim programming language:</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;Nim编程语言的多个方面需要&lt;em&gt;运行时类型信息&lt;/em&gt;（RTTI）：</target>
        </trans-unit>
        <trans-unit id="17f8a43b2c8fe38ae5080e22a567a4a144d535c1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;arrow like operator&lt;/em&gt; (like &lt;code&gt;-&amp;gt;&lt;/code&gt;, &lt;code&gt;=&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;em&gt;箭头运算符&lt;/em&gt;（如 &lt;code&gt;-&amp;gt;&lt;/code&gt; ， &lt;code&gt;=&amp;gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="cd27f1fe3eae5b9a898f8a1ee22d88a9fa597511" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;assignment operator&lt;/em&gt; (like &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;)</source>
          <target state="translated">&lt;em&gt;赋值运算符&lt;/em&gt;（如 &lt;code&gt;+=&lt;/code&gt; ， &lt;code&gt;*=&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="f7455f98c99e60e6bbeb9b3baae8878c758ba3c6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;cmp&lt;/em&gt; is the comparator function to use, the expected return values are the same as that of system.cmp.</source>
          <target state="translated">&lt;em&gt;cmp&lt;/em&gt;是要使用的比较器函数，预期的返回值与system.cmp相同。</target>
        </trans-unit>
        <trans-unit id="d07d1bc0c8a2aa1948c3ee05610a44eaacab87f9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;decimalSep&lt;/em&gt; is used as the decimal separator.</source>
          <target state="translated">&lt;em&gt;decimalSep&lt;/em&gt;用作小数点分隔符。</target>
        </trans-unit>
        <trans-unit id="92cefe4d7882c47f6678d2ec5886a3672b587367" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;empty string&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;空字符串&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e8f65828700fd66a8e7a7fd5be187238ed98013b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;escape&lt;/em&gt;: removes any special meaning from the following character; '0' disables escaping; if escaping is disabled and &lt;em&gt;quote&lt;/em&gt; is not '0', two &lt;em&gt;quote&lt;/em&gt; characters are parsed one literal &lt;em&gt;quote&lt;/em&gt; character.</source>
          <target state="translated">&lt;em&gt;escape&lt;/em&gt;：删除以下字符的任何特殊含义；'0'禁止转义；如果禁用了转义并且&lt;em&gt;引号&lt;/em&gt;不为&amp;ldquo; 0&amp;rdquo;，则将两个&lt;em&gt;引号&lt;/em&gt;字符解析为一个文字&lt;em&gt;引号&lt;/em&gt;字符。</target>
        </trans-unit>
        <trans-unit id="db614d277a70f95c2f6d4d36c543390ce136c5ce" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;false&lt;/em&gt; - generate timeout events periodically</source>
          <target state="translated">&lt;em&gt;false-&lt;/em&gt;定期生成超时事件</target>
        </trans-unit>
        <trans-unit id="8e307a213a9d0cd9087e4fab61d048d2e75d42ba" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;i&lt;/em&gt; should be in the range &lt;em&gt;1..paramCount()&lt;/em&gt;, the &lt;em&gt;IndexError&lt;/em&gt; exception will be raised for invalid values. Instead of iterating over &lt;a href=&quot;#paramCount&quot;&gt;paramCount()&lt;/a&gt; with this proc you can call the convenience &lt;a href=&quot;#commandLineParams&quot;&gt;commandLineParams()&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;我&lt;/em&gt;应该在&lt;em&gt;1..paramCount（）&lt;/em&gt;范围内，将为无效值引发&lt;em&gt;IndexError&lt;/em&gt;异常。代替使用此proc 遍历&lt;a href=&quot;#paramCount&quot;&gt;paramCount（）&lt;/a&gt;，您可以调用便捷命令&lt;a href=&quot;#commandLineParams&quot;&gt;commandLineParams（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3f4bf9334d2490f523b663af6901783da21ac6a8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;includeSpace&lt;/em&gt; can be set to true to include the (SI preferred) space between the number and the unit (e.g. 1 KiB).</source>
          <target state="translated">&lt;em&gt;includeSpace&lt;/em&gt;可以设置为true以在数字和单位之间包含（SI首选）空格（例如1 KiB）。</target>
        </trans-unit>
        <trans-unit id="e71266691c1695dc862a4187873f4eb27e421c29" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;initialSize&lt;/em&gt; needs to be a power of two. If you need to accept runtime values for this you could use the &lt;code&gt;nextPowerOfTwo&lt;/code&gt; proc from the &lt;a href=&quot;math&quot;&gt;math&lt;/a&gt; module or the &lt;code&gt;rightSize&lt;/code&gt; method in this module.</source>
          <target state="translated">&lt;em&gt;initialSize&lt;/em&gt;必须为2的幂。如果您需要为此接受运行 &lt;code&gt;nextPowerOfTwo&lt;/code&gt; ，则可以使用&lt;a href=&quot;math&quot;&gt;math&lt;/a&gt;模块中的nextPowerOfTwo proc 或该模块中的 &lt;code&gt;rightSize&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="00959dbd3dd10aad40ca8d5088bb831b41a7779c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;initialSize&lt;/em&gt; needs to be a power of two. If you need to accept runtime values for this you could use the &lt;code&gt;nextPowerOfTwo&lt;/code&gt; proc from the &lt;a href=&quot;math&quot;&gt;math&lt;/a&gt; module or the &lt;code&gt;rightSize&lt;/code&gt; proc from this module.</source>
          <target state="translated">&lt;em&gt;initialSize&lt;/em&gt;需要为2的幂。如果您需要为此接受运行 &lt;code&gt;nextPowerOfTwo&lt;/code&gt; ，则可以使用&lt;a href=&quot;math&quot;&gt;math&lt;/a&gt;模块中的 &lt;code&gt;rightSize&lt;/code&gt; proc 或此模块中的rightSize proc。</target>
        </trans-unit>
        <trans-unit id="ea4791fbf3e42731dc51d96cd68f2db285a8f167" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;initialSize&lt;/em&gt; needs to be a power of two. If you need to accept runtime values for this you could use the &lt;code&gt;nextPowerOfTwo&lt;/code&gt; proc from the &lt;a href=&quot;math&quot;&gt;math&lt;/a&gt; module or the &lt;code&gt;rightSize&lt;/code&gt; proc in this module.</source>
          <target state="translated">&lt;em&gt;initialSize&lt;/em&gt;需要为2的幂。如果您需要为此接受运行 &lt;code&gt;nextPowerOfTwo&lt;/code&gt; ，则可以使用&lt;a href=&quot;math&quot;&gt;math&lt;/a&gt;模块中的 &lt;code&gt;rightSize&lt;/code&gt; proc 或该模块中的rightSize proc。</target>
        </trans-unit>
        <trans-unit id="9a840e66e23dce5bbe529077fe70ae32ae27b78c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;initialSize&lt;/em&gt; needs to be a power of two. If you need to accept runtime values for this you could use the &lt;code&gt;nextPowerOfTwo&lt;/code&gt; proc from the &lt;a href=&quot;math&quot;&gt;math&lt;/a&gt; module.</source>
          <target state="translated">&lt;em&gt;initialSize&lt;/em&gt;需要为2的幂。如果您需要为此接受运行 &lt;code&gt;nextPowerOfTwo&lt;/code&gt; ，则可以使用&lt;a href=&quot;math&quot;&gt;math&lt;/a&gt;模块中的nextPowerOfTwo proc 。</target>
        </trans-unit>
        <trans-unit id="7472432b84a3a2eab38f2db62373daa9e022086e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;isNil&lt;/em&gt; for an any &lt;em&gt;x&lt;/em&gt; that represents a sequence, string, cstring, proc or some pointer type.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;对于代表序列，字符串，cstring，proc或某种指针类型的任何&lt;em&gt;x&lt;/em&gt;，&lt;em&gt;isNil&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f70ae80be2c58fd29de80509ed00d5e2c9f1f429" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;padding&lt;/em&gt; characters (by default spaces) are added after &lt;em&gt;s&lt;/em&gt; resulting in left alignment. If &lt;code&gt;s.len &amp;gt;= count&lt;/code&gt;, no spaces are added and &lt;em&gt;s&lt;/em&gt; is returned unchanged. If you need to right align a string use the &lt;a href=&quot;#align&quot;&gt;align proc&lt;/a&gt;. Example:</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;在&lt;em&gt;s&lt;/em&gt;之后添加&lt;em&gt;填充&lt;/em&gt;字符（默认为空格），导致左对齐。如果 &lt;code&gt;s.len &amp;gt;= count&lt;/code&gt; ，则不添加空格，并且&lt;em&gt;s&lt;/em&gt;保持不变。如果需要右对齐字符串，请使用&lt;a href=&quot;#align&quot;&gt;align proc&lt;/a&gt;。例：</target>
        </trans-unit>
        <trans-unit id="8672d4b2f28ca97d242b9f9940ce8d1789ba04fb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;padding&lt;/em&gt; characters (by default spaces) are added before &lt;em&gt;s&lt;/em&gt; resulting in right alignment. If &lt;code&gt;s.len &amp;gt;= count&lt;/code&gt;, no spaces are added and &lt;em&gt;s&lt;/em&gt; is returned unchanged. If you need to left align a string use the &lt;a href=&quot;#alignLeft&quot;&gt;alignLeft proc&lt;/a&gt;. Example:</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;在&lt;em&gt;s&lt;/em&gt;之前添加&lt;em&gt;填充&lt;/em&gt;字符（默认情况下为空格），从而导致右对齐。如果 &lt;code&gt;s.len &amp;gt;= count&lt;/code&gt; ，则不添加空格，并且&lt;em&gt;s&lt;/em&gt;保持不变。如果需要左对齐字符串，请使用&lt;a href=&quot;#alignLeft&quot;&gt;alignLeft proc&lt;/a&gt;。例：</target>
        </trans-unit>
        <trans-unit id="8247e0fd6fcaa06e3944fbde836de9960b4b141c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pattern&lt;/em&gt; is OS dependent, but at least the &quot;*.ext&quot; notation is supported.</source>
          <target state="translated">&lt;em&gt;模式&lt;/em&gt;取决于操作系统，但是至少支持&amp;ldquo; * .ext&amp;rdquo;表示法。</target>
        </trans-unit>
        <trans-unit id="75461844b2cd9f0f721ba3326b4f70c797e25d69" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;precision&lt;/em&gt; can be used to set the number of digits to be shown after the decimal point or (if &lt;em&gt;trim&lt;/em&gt; is true) the maximum number of digits to be shown.</source>
          <target state="translated">&lt;em&gt;精度&lt;/em&gt;可用于设置小数点后要显示的位数或（如果&lt;em&gt;修剪&lt;/em&gt;为true时）要显示的最大位数。</target>
        </trans-unit>
        <trans-unit id="617209c0ac1f0365ddc9daa8adb400efad149a99" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;quote&lt;/em&gt;: Used to quote fields containing special characters like &lt;em&gt;separator&lt;/em&gt;, &lt;em&gt;quote&lt;/em&gt; or new-line characters. '0' disables the parsing of quotes.</source>
          <target state="translated">&lt;em&gt;quote&lt;/em&gt;：用于引用包含特殊字符的字段，例如&lt;em&gt;分隔符&lt;/em&gt;，&lt;em&gt;引号&lt;/em&gt;或换行符。'0'禁用引号解析。</target>
        </trans-unit>
        <trans-unit id="f3dae05aba49b918194a9396a45aa3565615f037" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;replacements&lt;/em&gt; is any proc that takes a word and returns a new word to fill it's place.</source>
          <target state="translated">&lt;em&gt;替换&lt;/em&gt;是需要一个单词并返回一个新单词以填充其位置的任何proc。</target>
        </trans-unit>
        <trans-unit id="fbc817a3080e1b6882164dc8caf322799358d878" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;select&lt;/em&gt; with a sensible Nim interface. &lt;em&gt;timeout&lt;/em&gt; is in milliseconds. Specify -1 for no timeout. Returns the number of processes that are ready to read from. The processes that are ready to be read from are removed from &lt;em&gt;readfds&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;使用明智的Nim界面进行&lt;em&gt;选择&lt;/em&gt;。&lt;em&gt;超时&lt;/em&gt;以毫秒为单位。指定-1表示没有超时。返回准备读取的进程数。准备从中读取的进程将从&lt;em&gt;readfds&lt;/em&gt;中删除。</target>
        </trans-unit>
        <trans-unit id="d7f259f2477167c821ca25fa51730ed7960a70b4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;separator&lt;/em&gt;: character used to separate fields</source>
          <target state="translated">&lt;em&gt;分隔符&lt;/em&gt;：用于分隔字段的字符</target>
        </trans-unit>
        <trans-unit id="208edbd229c8eae9f5eb36df289548d5304b4d7f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;skipInitialSpace&lt;/em&gt;: If true, whitespace immediately following the &lt;em&gt;separator&lt;/em&gt; is ignored.</source>
          <target state="translated">&lt;em&gt;skipInitialSpace&lt;/em&gt;：如果为true，则忽略紧跟在&lt;em&gt;分隔&lt;/em&gt;符之后的空格。</target>
        </trans-unit>
        <trans-unit id="273a15cf374a6c4f49fed8d98b7d8b9586b0faaf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;true&lt;/em&gt; - generate only one timeout event</source>
          <target state="translated">&lt;em&gt;true-&lt;/em&gt;仅生成一个超时事件</target>
        </trans-unit>
        <trans-unit id="14ee562aca33dc19b06533f7cf5920a2b50148e9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; are converted to &lt;code&gt;float&lt;/code&gt; and the other push operation is called.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;和&lt;em&gt;y&lt;/em&gt;转换为 &lt;code&gt;float&lt;/code&gt; 并调用另一个推操作。</target>
        </trans-unit>
        <trans-unit id="783ab28443368da5d8b24739fb4554949b0f9f72" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;x&lt;/em&gt; is simply converted to &lt;code&gt;float&lt;/code&gt; and the other push operation is called.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;会简单地转换为 &lt;code&gt;float&lt;/code&gt; ,然后调用另一个推操作。</target>
        </trans-unit>
        <trans-unit id="fae64b6ebd8e2c7bcc575d125a2000abb729e3ca" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;x&lt;/em&gt; raised to the power &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;提高到&lt;em&gt;y&lt;/em&gt;的幂。</target>
        </trans-unit>
        <trans-unit id="12323c312fd7de0e4ef8b6a4ab533d557d68adc8" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;alert_1&quot;&gt;alert&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;alert_1&quot;&gt;alert&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="56d285c47b35312e64820df42bf3a87fd1b7b319" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;alert_2&quot;&gt;alert&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;alert_2&quot;&gt;alert&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="dc8e48b403bc73650b187c7f7e7ea88d6cb233c6" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;apostrophe_1&quot;&gt;apostrophe&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;apostrophe_1&quot;&gt;apostrophe&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="aa4c0ec53f4daba1b0ecbab22044a4b311fd35ea" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;apostrophe_2&quot;&gt;apostrophe&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;apostrophe_2&quot;&gt;apostrophe&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="489a12332aa212cc707a62ebb576449c73813d0c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;automatic-type-conversion_1&quot;&gt;Automatic type conversion&lt;/span&gt; is performed in expressions where different kinds of integer types are used: the smaller type is converted to the larger.</source>
          <target state="translated">&lt;span id=&quot;automatic-type-conversion_1&quot;&gt;&lt;/span&gt;在使用不同类型的整数类型的表达式中执行&lt;span id=&quot;automatic-type-conversion_1&quot;&gt;自动类型转换&lt;/span&gt;：将较小的类型转换为较大的类型。</target>
        </trans-unit>
        <trans-unit id="ef114326cdf7ec64073b8d5c70949a59e4d16784" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;backslash_1&quot;&gt;backslash&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;backslash_1&quot;&gt;backslash&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="654a8f7f92faee492756a045bc4a4f5716bafc9a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;backslash_2&quot;&gt;backslash&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;backslash_2&quot;&gt;backslash&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b344cba5f1b85d441c18840ce9f4242eff677927" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;backspace_1&quot;&gt;backspace&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;backspace_1&quot;&gt;backspace&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3ef60dc7d037ac085bdffe500a7612d735b0c712" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;backspace_2&quot;&gt;backspace&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;backspace_2&quot;&gt;backspace&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="fc49500076e57365e635056cd3b75868d666ab71" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;carriage-return_1&quot;&gt;carriage return&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;carriage-return_1&quot;&gt;回车&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8ab206963e8b4940d40701cfc51c0f7e1851ffeb" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;carriage-return_2&quot;&gt;carriage return&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;carriage-return_2&quot;&gt;回车&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1cf7c76a0ff63e90fbc9727aa4db16092702311a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;cdecl_1&quot;&gt;cdecl&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;cdecl_1&quot;&gt;cdecl&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0733a6e3e51ba48347bd816e4d97acf3dbb10225" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;character-with-decimal-value-d_1&quot;&gt;character with decimal value d&lt;/span&gt;; all decimal digits directly following are used for the character</source>
          <target state="translated">&lt;span id=&quot;character-with-decimal-value-d_1&quot;&gt;十进制d的字符&lt;/span&gt; ; 紧随其后的所有十进制数字都用作该字符</target>
        </trans-unit>
        <trans-unit id="d33b972e48200cc4a6a49329f9bd2b0b86e9d179" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;character-with-decimal-value-d_2&quot;&gt;character with decimal value d&lt;/span&gt;; all decimal digits directly following are used for the character</source>
          <target state="translated">&lt;span id=&quot;character-with-decimal-value-d_2&quot;&gt;十进制d的字符&lt;/span&gt; ; 紧随其后的所有十进制数字都用作该字符</target>
        </trans-unit>
        <trans-unit id="598b3bddfa5c5d0fa5a106b08f17b0cd0a6928c4" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;character-with-hex-value-hh_1&quot;&gt;character with hex value HH&lt;/span&gt;; exactly two hex digits are allowed</source>
          <target state="translated">&lt;span id=&quot;character-with-hex-value-hh_1&quot;&gt;具有十六进制值HH的字符&lt;/span&gt; ; 正好允许两个十六进制数字</target>
        </trans-unit>
        <trans-unit id="899d46bdef3da49bf9a47052252021471e9deca1" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;character-with-hex-value-hh_2&quot;&gt;character with hex value HH&lt;/span&gt;; exactly two hex digits are allowed</source>
          <target state="translated">&lt;span id=&quot;character-with-hex-value-hh_2&quot;&gt;具有十六进制值HH的字符&lt;/span&gt; ; 正好允许两个十六进制数字</target>
        </trans-unit>
        <trans-unit id="06eb32c5efe204f53b8a3e469a651a6422b0ecef" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;closure_1&quot;&gt;closure&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;closure_1&quot;&gt;closure&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="69035165c7fe56ca0f544baab5f7ca6b3bb23e5f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;constants_1&quot;&gt;Constants&lt;/span&gt; are symbols which are bound to a value. The constant's value cannot change. The compiler must be able to evaluate the expression in a constant declaration at compile time.</source>
          <target state="translated">&lt;span id=&quot;constants_1&quot;&gt;常数&lt;/span&gt;是绑定到值的符号。该常数的值不能更改。编译器必须能够在编译时在常量声明中对表达式求值。</target>
        </trans-unit>
        <trans-unit id="bc7dc406312d3d989f8fded7366dc2a2ca439dfc" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;documentation-comments_1&quot;&gt;Documentation comments&lt;/span&gt; are comments that start with two &lt;code&gt;##&lt;/code&gt;. Documentation comments are tokens; they are only allowed at certain places in the input file as they belong to the syntax tree!</source>
          <target state="translated">&lt;span id=&quot;documentation-comments_1&quot;&gt;文档注释&lt;/span&gt;是以两个 &lt;code&gt;##&lt;/code&gt; 开头的注释。文档注释是标记；由于它们属于语法树，因此只能在输入文件中的某些位置使用它们！</target>
        </trans-unit>
        <trans-unit id="c983afd465ba80d2147e0b70ee70ed5b594ffd0c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;escape_1&quot;&gt;escape&lt;/span&gt;&lt;span id=&quot;esc_1&quot;&gt;[ESC]&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;escape_1&quot;&gt;escape&lt;/span&gt;&lt;span id=&quot;esc_1&quot;&gt;[ESC]&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="23e3ae456032cf7bfe12b54d4c30ef515b7e5769" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;escape_2&quot;&gt;escape&lt;/span&gt;&lt;span id=&quot;esc_2&quot;&gt;[ESC]&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;escape_2&quot;&gt;escape&lt;/span&gt;&lt;span id=&quot;esc_2&quot;&gt;[ESC]&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1f0669c885766923e22bc3a0cf1a25ecf09a7e71" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;fastcall_1&quot;&gt;fastcall&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;fastcall_1&quot;&gt;fastcall&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="61df4a1c082aef5508a11aa5f32360878c832316" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;form-feed_1&quot;&gt;form feed&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;form-feed_1&quot;&gt;换页&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c83e42d1968c9f81163b17f1f1a97a7f750bcc7b" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;form-feed_2&quot;&gt;form feed&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;form-feed_2&quot;&gt;换页&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="24ef9584feba6e596a828184a0614706f20342a7" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;inline_1&quot;&gt;inline&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;inline_1&quot;&gt;inline&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="97eb508c4f7e0532dda34314f3114ac62db38999" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;intdefine_1&quot;&gt;intdefine&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;intdefine_1&quot;&gt;intdefine&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="bf681f8157045b76a5b5cca6556c710b3d31af04" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;line-feed_1&quot;&gt;line feed&lt;/span&gt; (often called &lt;span id=&quot;newline_1&quot;&gt;newline&lt;/span&gt;)</source>
          <target state="translated">&lt;span id=&quot;line-feed_1&quot;&gt;换行符&lt;/span&gt;（通常称为&lt;span id=&quot;newline_1&quot;&gt;换行符&lt;/span&gt;）</target>
        </trans-unit>
        <trans-unit id="f069e5dc4bd5128fe57f984b98f0d1df33905e6c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;line-feed_2&quot;&gt;line feed&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;line-feed_2&quot;&gt;换行&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="370fea44cd56e7d13668a1518c6ed3e2793cd844" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;nimcall_1&quot;&gt;nimcall&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;nimcall_1&quot;&gt;nimcall&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="386493dc5a93f6552eed5a0c301e509bae171c3a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;noconv_1&quot;&gt;noconv&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;noconv_1&quot;&gt;noconv&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0d18cc4b434985ecdfad600d62beb278d037bd02" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;operators_1&quot;&gt;Operators&lt;/span&gt; are procedures with a special operator symbol as identifier:</source>
          <target state="translated">&lt;span id=&quot;operators_1&quot;&gt;运算符&lt;/span&gt;是具有特殊运算符符号作为标识符的过程：</target>
        </trans-unit>
        <trans-unit id="dd7a03ff3abf42e8baa1ecc1fffb484ad21a23af" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;quotation-mark_1&quot;&gt;quotation mark&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;quotation-mark_1&quot;&gt;引号&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c6aabef76f9a817672169780852e677ea046add2" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;quotation-mark_2&quot;&gt;quotation mark&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;quotation-mark_2&quot;&gt;引号&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c37b02a49dcefbd3153898422e9bb9a58594c0f5" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;safecall_1&quot;&gt;safecall&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;safecall_1&quot;&gt;safecall&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9075773ca58649470612eb72f9b476282ba11426" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;spawn_1&quot;&gt;spawn&lt;/span&gt; can be used to pass a task to the thread pool:</source>
          <target state="translated">&lt;span id=&quot;spawn_1&quot;&gt;spawn&lt;/span&gt;可用于将任务传递给线程池：</target>
        </trans-unit>
        <trans-unit id="f768c26556a449ea02596d87572b18bde70355d0" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;stdcall_1&quot;&gt;stdcall&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;stdcall_1&quot;&gt;stdcall&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="459d1365b562550b27ebf6a8974dd5ae8b46a70a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;strdefine_1&quot;&gt;strdefine&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;strdefine_1&quot;&gt;strdefine&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f2149f636a8a39166b70a1e1b85797ae880037d8" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;structured_1&quot;&gt;Structured&lt;/span&gt; parallelism via the &lt;code&gt;parallel&lt;/code&gt; statement.</source>
          <target state="translated">&lt;span id=&quot;structured_1&quot;&gt;&lt;/span&gt;通过 &lt;code&gt;parallel&lt;/code&gt; 语句进行&lt;span id=&quot;structured_1&quot;&gt;结构化&lt;/span&gt;并行处理。</target>
        </trans-unit>
        <trans-unit id="906052db691f512b87e944c4fa7ae79175ea0c21" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;syscall_1&quot;&gt;syscall&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;syscall_1&quot;&gt;syscall&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="2fce4fa4dbb6e8e47310c53145477e8e7e68ebe3" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;tabulator_1&quot;&gt;tabulator&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;tabulator_1&quot;&gt;tabulator&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b6b9690fa127b5c41c7a6608abe780996467b339" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;tabulator_2&quot;&gt;tabulator&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;tabulator_2&quot;&gt;tabulator&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="a0e78449bd2f86ea69106414c3a2d0d1430a9b77" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;unmarshals_1&quot;&gt;Unmarshals&lt;/span&gt; the specified node into the object type specified.</source>
          <target state="translated">&lt;span id=&quot;unmarshals_1&quot;&gt;&lt;/span&gt;将指定的节点&lt;span id=&quot;unmarshals_1&quot;&gt;解组&lt;/span&gt;为指定的对象类型。</target>
        </trans-unit>
        <trans-unit id="daac7f50d202881a5d6ee0367a0863d7aebf95c3" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;unstructured_1&quot;&gt;Unstructured&lt;/span&gt; parallelism via the standalone &lt;code&gt;spawn&lt;/code&gt; statement.</source>
          <target state="translated">&lt;span id=&quot;unstructured_1&quot;&gt;&lt;/span&gt;通过独立的 &lt;code&gt;spawn&lt;/code&gt; 语句进行&lt;span id=&quot;unstructured_1&quot;&gt;非结构化&lt;/span&gt;并行处理。</target>
        </trans-unit>
        <trans-unit id="d57fe270428bde77daa75ade4ed835d70900fc90" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;vertical-tabulator_1&quot;&gt;vertical tabulator&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;vertical-tabulator_1&quot;&gt;垂直制表符&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9cc1eadaa9721d4034ad25e0a89c479254a832df" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;vertical-tabulator_2&quot;&gt;vertical tabulator&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;vertical-tabulator_2&quot;&gt;垂直制表符&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="162d657293056b3b52f778e7e2ab66fe5d304524" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$MODULE&lt;/strong&gt;: like $TESTNIM but without extension, useful for expected output.</source>
          <target state="translated">&lt;strong&gt;$ MODULE&lt;/strong&gt;：类似于$ TESTNIM，但没有扩展名，可用于预期的输出。</target>
        </trans-unit>
        <trans-unit id="0f7f0e7e27fe39d47b743d1865954b56a2c07fd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$TESTNIM&lt;/strong&gt;: filename specified in the first line of the script.</source>
          <target state="translated">&lt;strong&gt;$ TESTNIM&lt;/strong&gt;：在脚本第一行中指定的文件名。</target>
        </trans-unit>
        <trans-unit id="a839ade11ae6dd196f2a9173f8f1d634964f9d53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Availability&lt;/strong&gt;: On Posix there is no portable way to get the command line from a DLL and thus the proc isn't defined in this environment. You can test for its availability with &lt;a href=&quot;system#declared&quot;&gt;declared()&lt;/a&gt;. Example:</source>
          <target state="translated">&lt;strong&gt;可用性&lt;/strong&gt;：在Posix上，没有从DLL获取命令行的可移植方式，因此在此环境中未定义proc。您可以使用&lt;a href=&quot;system#declared&quot;&gt;clarified（）&lt;/a&gt;测试其可用性。例：</target>
        </trans-unit>
        <trans-unit id="654a21dac651772b23f95ecd2222feacad79471f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Availability&lt;/strong&gt;: When generating a dynamic library (see --app:lib) on Posix this proc is not defined. Test for availability using &lt;a href=&quot;system#declared&quot;&gt;declared()&lt;/a&gt;. Example:</source>
          <target state="translated">&lt;strong&gt;可用性&lt;/strong&gt;：在Posix上生成动态库（请参阅--app：lib）时，未定义此proc。使用&lt;a href=&quot;system#declared&quot;&gt;clarified（）&lt;/a&gt;测试可用性。例：</target>
        </trans-unit>
        <trans-unit id="fcbe823732d2c9972cd2868d10967de104d96e54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Blocks&lt;/strong&gt; the current thread until the specified future completes.</source>
          <target state="translated">&lt;strong&gt;阻塞&lt;/strong&gt;当前线程，直到指定的将来完成为止。</target>
        </trans-unit>
        <trans-unit id="ade01956444b2bedb6ba0ce473524e122c45ab36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DEPRECATED&lt;/strong&gt; as it was confused for shell quoting function. For this application use &lt;a href=&quot;osproc#quoteShell&quot;&gt;osproc.quoteShell&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;已弃用，&lt;/strong&gt;因为它对shell引用功能感到困惑。对于此应用程序，请使用&lt;a href=&quot;osproc#quoteShell&quot;&gt;osproc.quoteShell&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8f9bcec4d297aa8b62e7707f49f12d5b91ee3e96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since 0.9.6&lt;/strong&gt;: Use &lt;code&gt;Uri&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从0.9.6开始不推荐使用&lt;/strong&gt;：改用 &lt;code&gt;Uri&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0edc0ae576cbf1405d25d406473d00a29f1efad5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.14.0:&lt;/strong&gt; use &lt;code&gt;toTime&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;自v0.14.0起不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;改为使用 &lt;code&gt;toTime&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64a9b956a337527118896d06cbe9ae7f050d636f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.14.0:&lt;/strong&gt; use &lt;code&gt;toTimeInterval&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;自v0.14.0起不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;改为使用 &lt;code&gt;toTimeInterval&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d42b15a342ba8260b2d18fb84c9410a31da17af0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.18.0:&lt;/strong&gt; Use &lt;code&gt;createNativeSocket&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从v0.18.0开始不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;改用 &lt;code&gt;createNativeSocket&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="07e0d4b10a5b7a0a71d906084234d0680ca5563e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.18.0:&lt;/strong&gt; Use &lt;code&gt;registerHandle&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从v0.18.0开始不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;改为使用 &lt;code&gt;registerHandle&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1129f505c350479aaa022b8a8003b02d2ff1812a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.18.0:&lt;/strong&gt; Use &lt;code&gt;trigger&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;自v0.18.0起不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;改为使用 &lt;code&gt;trigger&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df4c00b11b4bf37dc2f6430219a81fef666c3077" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.18.0:&lt;/strong&gt; Use &lt;code&gt;updateHandle&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从v0.18.0开始不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;改用 &lt;code&gt;updateHandle&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8fd9c517dc50477a5fbd53eadca39aa342cacc15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.18.0:&lt;/strong&gt; use &lt;code&gt;fromUnix&lt;/code&gt; instead</source>
          <target state="translated">&lt;strong&gt;：自从v0.18.0弃用&lt;/strong&gt;使用 &lt;code&gt;fromUnix&lt;/code&gt; 代替</target>
        </trans-unit>
        <trans-unit id="cb78393c2152a466222fd3a7fb4214ff908ccea1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.18.0:&lt;/strong&gt; use &lt;code&gt;getDayOfWeek(monthday: MonthdayRange; month: Month; year: int)&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从v0.18.0开始不推荐&lt;/strong&gt;使用 &lt;code&gt;getDayOfWeek(monthday: MonthdayRange; month: Month; year: int)&lt;/code&gt; 使用getDayOfWeek（monthday：MonthdayRange; month：Month; year：int）。</target>
        </trans-unit>
        <trans-unit id="a648b574225c4c5297a7b9e6a179de1fa70405ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.18.0:&lt;/strong&gt; use &lt;code&gt;initTimeInterval&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从v0.18.0开始不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;改为使用 &lt;code&gt;initTimeInterval&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b650e97ba36dce981193da56e9d3e90303aa2415" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.18.0:&lt;/strong&gt; use &lt;code&gt;local&lt;/code&gt; instead</source>
          <target state="translated">&lt;strong&gt;自v0.18.0起不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;改为使用 &lt;code&gt;local&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="be21164252193e55e3a53ee4fd307e3bd091719f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.18.0:&lt;/strong&gt; use &lt;code&gt;now().utcOffset&lt;/code&gt; to get the current utc offset (including DST).</source>
          <target state="translated">&lt;strong&gt;从v0.18.0开始不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;使用 &lt;code&gt;now().utcOffset&lt;/code&gt; 获取当前utc偏移量（包括DST）。</target>
        </trans-unit>
        <trans-unit id="7093a6b25b775ae7f81736fede1917ea4a624cb9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.18.0:&lt;/strong&gt; use &lt;code&gt;toUnix&lt;/code&gt; instead</source>
          <target state="translated">&lt;strong&gt;自v0.18.0起不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;改为使用 &lt;code&gt;toUnix&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5bfa49165457523fa77a7619996190f331b5e0fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.18.0:&lt;/strong&gt; use &lt;code&gt;utc&lt;/code&gt; instead</source>
          <target state="translated">&lt;strong&gt;：自从v0.18.0弃用&lt;/strong&gt;使用 &lt;code&gt;utc&lt;/code&gt; 代替</target>
        </trans-unit>
        <trans-unit id="a2f96fe2ad51bd3c2f12b80acad9b57384ced284" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.18.2:&lt;/strong&gt; use &lt;code&gt;getBool&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;自v0.18.2起不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;改用 &lt;code&gt;getBool&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df0e7fcddc8c3387b9579f61dc61f253f5817870" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.18.2:&lt;/strong&gt; use &lt;code&gt;getFloat&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;自v0.18.2起不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;改用 &lt;code&gt;getFloat&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c1b0c3af938100bdf91557ac9b93edb506162843" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.18.2:&lt;/strong&gt; use &lt;code&gt;getInt&lt;/code&gt; or &lt;code&gt;getBiggestInt&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从v0.18.2开始不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;改用 &lt;code&gt;getInt&lt;/code&gt; 或 &lt;code&gt;getBiggestInt&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff84ca124aa9ac594837f7d32a1435e66e43f038" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.19.0:&lt;/strong&gt; use &lt;code&gt;zonedTimeFromTime&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;自v0.19.0起不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;改为使用 &lt;code&gt;zonedTimeFromTime&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="595283a18cec59736002f87447f03a29696e5825" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.19.0:&lt;/strong&gt; use the &lt;code&gt;time&lt;/code&gt; field instead.</source>
          <target state="translated">&lt;strong&gt;自v0.19.0起不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;改为使用 &lt;code&gt;time&lt;/code&gt; 字段。</target>
        </trans-unit>
        <trans-unit id="5295b91fb2f0e30f39313327d56ecb8a32c45919" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.19.0:&lt;/strong&gt; use the &lt;code&gt;zonedTimeFromAdjTime&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;自v0.19.0起不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;改为使用 &lt;code&gt;zonedTimeFromAdjTime&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="abdd1f4767c098ae47e6067b7b37ea7d137a5e30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since v0.8.10:&lt;/strong&gt; use &lt;code&gt;epochTime&lt;/code&gt; or &lt;code&gt;cpuTime&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从v0.8.10开始不推荐&lt;/strong&gt;使用&lt;strong&gt;：&lt;/strong&gt;改为使用 &lt;code&gt;epochTime&lt;/code&gt; 或 &lt;code&gt;cpuTime&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="baa9f17ac8b7f5e394f4f3c35b922f174fd2bf83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.12.0:&lt;/strong&gt; Use the &lt;code&gt;apply&lt;/code&gt; proc instead.</source>
          <target state="translated">&lt;strong&gt;自0.12.0版本不推荐使用：&lt;/strong&gt;使用 &lt;code&gt;apply&lt;/code&gt; PROC代替。</target>
        </trans-unit>
        <trans-unit id="813f61ed56bd8727049251f3d658b7107660c2bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.12.0:&lt;/strong&gt; Use the &lt;code&gt;mapIt(seq1, op)&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;从0.12.0版开始不推荐使用：&lt;/strong&gt;使用 &lt;code&gt;mapIt(seq1, op)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f28367f57c9f2614afb958138d03a3bf3142b6ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.15.0&lt;/strong&gt;: Use &lt;code&gt;asyncnet.recvLine()&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从&lt;/strong&gt; &lt;code&gt;asyncnet.recvLine()&lt;/code&gt; &lt;strong&gt;版开始不推荐使用&lt;/strong&gt;：改为使用asyncnet.recvLine（）。</target>
        </trans-unit>
        <trans-unit id="e2d7de988f2acf5e38494443df673fdfae41dc37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.15.0&lt;/strong&gt;: use &lt;code&gt;HttpClient.get&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从版本0.15.0开始不推荐使用&lt;/strong&gt;：而是使用 &lt;code&gt;HttpClient.get&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="299961d38c046d81a057b39c87e1ea3541f2bbbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.15.0&lt;/strong&gt;: use &lt;code&gt;HttpClient.getContent&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从版本0.15.0开始不推荐使用&lt;/strong&gt;：而是使用 &lt;code&gt;HttpClient.getContent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="50ec41efadd97988380f7499bf68d5ceb1b22a59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.15.0&lt;/strong&gt;: use &lt;code&gt;HttpClient.post&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从版本0.15.0开始不推荐使用&lt;/strong&gt;：而是使用 &lt;code&gt;HttpClient.post&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7c32a49f3f9d3f8d7e600b14dd15502686a235da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.15.0&lt;/strong&gt;: use &lt;code&gt;HttpClient.postContent&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从版本0.15.0开始不推荐使用&lt;/strong&gt;：改用 &lt;code&gt;HttpClient.postContent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed96372a5060ce286aef82b0d3c6ae674a124053" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.15.0&lt;/strong&gt;: use &lt;code&gt;HttpClient.request&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从版本0.15.0开始不推荐使用&lt;/strong&gt;：而是使用 &lt;code&gt;HttpClient.request&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="813b7f383169e8184fc6c9b0e28773046ac68201" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.16.2&lt;/strong&gt;: use &lt;code&gt;HttpClient.downloadFile&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从版本0.16.2开始不推荐&lt;/strong&gt;使用：而是使用 &lt;code&gt;HttpClient.downloadFile&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23834ea822e2c6d9726d7ec8d8695d7fb373d3c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.17.0&lt;/strong&gt;: This procedure isn't cross-platform and so should not be used in newly written code.</source>
          <target state="translated">&lt;strong&gt;从版本0.17.0开始不推荐使用&lt;/strong&gt;：此过程不是跨平台的，因此不应在新编写的代码中使用。</target>
        </trans-unit>
        <trans-unit id="4df24020923200ebb62009aa073b6e02140c4500" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.18.0&lt;/strong&gt;. For the common excluding range write &lt;code&gt;0 ..&amp;lt; 10&lt;/code&gt; instead of &lt;code&gt;0 .. &amp;lt; 10&lt;/code&gt; (look at the spacing). For &lt;code&gt;&amp;lt;x&lt;/code&gt; write &lt;code&gt;pred(x)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;从0.18.0版开始不推荐使用&lt;/strong&gt;。对于公共排除范围，请写 &lt;code&gt;0 ..&amp;lt; 10&lt;/code&gt; 而不是 &lt;code&gt;0 .. &amp;lt; 10&lt;/code&gt; （看一下间距）。对于 &lt;code&gt;&amp;lt;x&lt;/code&gt; ,写 &lt;code&gt;pred(x)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68c7818b422a258b46806f0eafceaa44f6c79aeb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.18.1&lt;/strong&gt;. Use len() instead.</source>
          <target state="translated">&lt;strong&gt;从0.18.1版开始不推荐使用&lt;/strong&gt;。使用len（）代替。</target>
        </trans-unit>
        <trans-unit id="7ef1cf4f5f7fc799e0b35914ada5c795f1cd5725" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.18.1&lt;/strong&gt;; All functionality is defined on &lt;code&gt;NimNode&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;从0.18.1版开始不推荐使用&lt;/strong&gt; ; 所有功能都在 &lt;code&gt;NimNode&lt;/code&gt; 上定义。</target>
        </trans-unit>
        <trans-unit id="4e84173b0ac9d2fd4420a0991936918f4ee1a8ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.18.1&lt;/strong&gt;; Generate a new &lt;code&gt;NimNode&lt;/code&gt; with &lt;code&gt;genSym&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从0.18.1版开始不推荐使用&lt;/strong&gt; ; &lt;code&gt;NimNode&lt;/code&gt; 使用 &lt;code&gt;genSym&lt;/code&gt; 生成一个新的NimNode。</target>
        </trans-unit>
        <trans-unit id="16653bf53256723a0cc8002763700158bb2a42ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.18.1&lt;/strong&gt;; Generate a new &lt;code&gt;NimNode&lt;/code&gt; with &lt;code&gt;ident(string)&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从0.18.1版开始不推荐使用&lt;/strong&gt; ; &lt;code&gt;NimNode&lt;/code&gt; 使用 &lt;code&gt;ident(string)&lt;/code&gt; 生成一个新的NimNode。</target>
        </trans-unit>
        <trans-unit id="e7fca1a76838f997b6b479a7049316d7b71e5d23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.18.1&lt;/strong&gt;; Use &lt;code&gt;binarySearch&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从0.18.1版开始不推荐使用&lt;/strong&gt; ; 请改用 &lt;code&gt;binarySearch&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="07febc28bfa9d03d0fa4ee192105ba5a7d71b5d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.18.1&lt;/strong&gt;; Use one of &lt;code&gt;nestList(NimNode, ...)&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从0.18.1版开始不推荐使用&lt;/strong&gt; ; 请改用 &lt;code&gt;nestList(NimNode, ...)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4b359efb52a169b0f8e2ad570667904d89cf4c23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.8.12&lt;/strong&gt;: Use &lt;code&gt;parseWhile&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;从0.8.12版本开始不推荐&lt;/strong&gt;使用：改为使用 &lt;code&gt;parseWhile&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd66fa6e9cfcab65583dfb8b55c8ca91df2a0525" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.9.0:&lt;/strong&gt; Please use &lt;code&gt;existsFile&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;从0.9.0版开始不推荐使用：&lt;/strong&gt;请使用 &lt;code&gt;existsFile&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52c46f664e9ddbfa0ff79f37fc44b94ec7d81f29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.9.0:&lt;/strong&gt; Please use the function above.</source>
          <target state="translated">&lt;strong&gt;从0.9.0版开始不推荐使用：&lt;/strong&gt;请使用上面的功能。</target>
        </trans-unit>
        <trans-unit id="97dff7a47c48bdad8d984c2e2262de3696009ba8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.9.2&lt;/strong&gt;: This function has been deprecated in favour of readLine.</source>
          <target state="translated">&lt;strong&gt;从0.9.2版&lt;/strong&gt;开始不推荐使用：为了支持readLine，不推荐使用此功能。</target>
        </trans-unit>
        <trans-unit id="5f68edfa8278ec5885de09d908256c4b49e8634f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.9.2&lt;/strong&gt;: This function has been deprecated in favour of readLineAsync.</source>
          <target state="translated">&lt;strong&gt;从0.9.2版&lt;/strong&gt;开始不推荐使用：为了支持readLineAsync，不推荐使用此功能。</target>
        </trans-unit>
        <trans-unit id="c4af36b03e871c9cae4428903b9bca8534e6953e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated since version 0.9.2&lt;/strong&gt;: This function is not safe for use.</source>
          <target state="translated">&lt;strong&gt;从0.9.2版开始&lt;/strong&gt;不推荐使用：此功能不安全。</target>
        </trans-unit>
        <trans-unit id="fface47b088c778a2f4e77c02bf19ee55d18a8e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; use &lt;code&gt;fromWinTime&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;不推荐使用：&lt;/strong&gt;改用 &lt;code&gt;fromWinTime&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="06ec99b3afe2ae2cbe0edda32125eccea758f261" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; use &lt;code&gt;toWinTime&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;Deprecated:&lt;/strong&gt; use &lt;code&gt;toWinTime&lt;/code&gt; instead.</target>
        </trans-unit>
        <trans-unit id="3a884be761dae54201f8aa530278b417918acce3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; use &lt;em&gt;hasKey&lt;/em&gt; instead.</source>
          <target state="translated">&lt;strong&gt;不推荐使用：&lt;/strong&gt;改用&lt;em&gt;hasKey&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a22c0c29442195e4011e17d60edeee2f5d85fcea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Disclaimer&lt;/strong&gt;: This code is not well tested, may be very unsafe and prone to security vulnerabilities.</source>
          <target state="translated">&lt;strong&gt;免责声明&lt;/strong&gt;：此代码未经严格测试，可能非常不安全，并且容易出现安全漏洞。</target>
        </trans-unit>
        <trans-unit id="6ffe4dc5c4fc52ea3ea1e3a20dd64567380feece" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not use this module for cryptographic purposes!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;不要将此模块用于加密目的！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f928ed32bee5c29af52b00bc30f99ce156242335" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Docstring&lt;/strong&gt;: always the empty string.</source>
          <target state="translated">&lt;strong&gt;Docstring&lt;/strong&gt;：始终为空字符串。</target>
        </trans-unit>
        <trans-unit id="d4209dbb40d9185067bcb8ce189cd1c6eed7f25e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Docstring&lt;/strong&gt;: docstring if available.</source>
          <target state="translated">&lt;strong&gt;docstring&lt;/strong&gt;：docstring（如果可用）。</target>
        </trans-unit>
        <trans-unit id="1bc0a5d67820f61786ae04d054caabfe5bd3f6ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Examples:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="73e5c6a20cafb8203519ae745e546e8bb3f10e1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: always the empty string.</source>
          <target state="translated">&lt;strong&gt;第四列&lt;/strong&gt;：始终为空字符串。</target>
        </trans-unit>
        <trans-unit id="160ef9d36bed422272b88e68bd931cde20c08000" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: enum type grouping other enum fields.</source>
          <target state="translated">&lt;strong&gt;第四列&lt;/strong&gt;：将其他枚举字段分组的枚举类型。</target>
        </trans-unit>
        <trans-unit id="be7ebe20c5b6aef98f77a13140c9b09bb67359f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: signature of the iterator including return type.</source>
          <target state="translated">&lt;strong&gt;第四列&lt;/strong&gt;：迭代器的签名，包括返回类型。</target>
        </trans-unit>
        <trans-unit id="c6c20f7dbb204753d2338c8585a984c7c7fa8c25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: signature of the macro including return type.</source>
          <target state="translated">&lt;strong&gt;第四列&lt;/strong&gt;：宏的签名，包括返回类型。</target>
        </trans-unit>
        <trans-unit id="b6771fb30bab96fd8cf5d95cfd5b7411f13b3c15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: signature of the method including return type.</source>
          <target state="translated">&lt;strong&gt;第四列&lt;/strong&gt;：方法的签名，包括返回类型。</target>
        </trans-unit>
        <trans-unit id="8779f27a30500300592c1fbc44c5a869259d7284" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: signature of the proc including return type.</source>
          <target state="translated">&lt;strong&gt;第四列&lt;/strong&gt;：proc的签名，包括返回类型。</target>
        </trans-unit>
        <trans-unit id="5b4c52d33a04c0f32a87d9b5783e815726a1d81e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: signature of the template including return type.</source>
          <target state="translated">&lt;strong&gt;第四列&lt;/strong&gt;：模板的签名，包括返回类型。</target>
        </trans-unit>
        <trans-unit id="4dfd102fd6fbe96ece65dd9c1d384e0f16912006" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: the type of the const value.</source>
          <target state="translated">&lt;strong&gt;第四列&lt;/strong&gt;：const值的类型。</target>
        </trans-unit>
        <trans-unit id="63fb555122e12cadcd219b4c04854752ec0ed9fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: the type of the let variable.</source>
          <target state="translated">&lt;strong&gt;第四列&lt;/strong&gt;：let变量的类型。</target>
        </trans-unit>
        <trans-unit id="20edb7c031a399a27ff6ff092cecc38f0cd151a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: the type of the parameter.</source>
          <target state="translated">&lt;strong&gt;第四列&lt;/strong&gt;：参数的类型。</target>
        </trans-unit>
        <trans-unit id="d1c0d7dfb4af3e8e26314132e3d53473279ebfe5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: the type of the result.</source>
          <target state="translated">&lt;strong&gt;第四列&lt;/strong&gt;：结果的类型。</target>
        </trans-unit>
        <trans-unit id="c558e48e401e6265a17ebeab90f8b20f1f7e1e47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: the type of the var.</source>
          <target state="translated">&lt;strong&gt;第四列&lt;/strong&gt;：var的类型。</target>
        </trans-unit>
        <trans-unit id="9384cc6e440487319d842110001333299d831093" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: the type.</source>
          <target state="translated">&lt;strong&gt;第四栏&lt;/strong&gt;：类型。</target>
        </trans-unit>
        <trans-unit id="329b7e3326c98503c949ca9d39330b0e1c6794bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: type of the var.</source>
          <target state="translated">&lt;strong&gt;第四栏&lt;/strong&gt;：var的类型。</target>
        </trans-unit>
        <trans-unit id="978f10cfc82df92effeee967159555f49c21c819" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Future directions&lt;/strong&gt;: GC'ed memory should be allowed in unchecked arrays and there should be an explicit annotation of how the GC is to determine the runtime size of the array.</source>
          <target state="translated">&lt;strong&gt;未来发展方向&lt;/strong&gt;：未经检查的数组中应允许使用GC的内存，并且应该明确说明GC如何确定数组的运行时大小。</target>
        </trans-unit>
        <trans-unit id="150871409dc1ef45a59e74d4be5900fd8cf45ddc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Future directions&lt;/strong&gt;: GC'ed memory should be allowed in unions and the GC should scan unions conservatively.</source>
          <target state="translated">&lt;strong&gt;将来的方向&lt;/strong&gt;：应允许在联合中使用GC的内存，并且GC应保守地扫描联合。</target>
        </trans-unit>
        <trans-unit id="5f1330a349c9dedfd2b8b17d35746d232592d00d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Future directions&lt;/strong&gt;: The &lt;code&gt;acyclic&lt;/code&gt; pragma may become a property of a &lt;code&gt;ref&lt;/code&gt; type:</source>
          <target state="translated">&lt;strong&gt;未来发展方向&lt;/strong&gt;： &lt;code&gt;acyclic&lt;/code&gt; 编译指示可能会成为 &lt;code&gt;ref&lt;/code&gt; 类型的属性：</target>
        </trans-unit>
        <trans-unit id="75d19ae59ec3e06e328ace922bad09261db8a6c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Future directions&lt;/strong&gt;: Using GC'ed memory in packed pragma will result in compile-time error. Usage with inheritance should be defined and documented.</source>
          <target state="translated">&lt;strong&gt;未来发展方向&lt;/strong&gt;：在打包的编译指示中使用GC的内存将导致编译时错误。带有继承的用法应定义并记录下来。</target>
        </trans-unit>
        <trans-unit id="b59417140c3fc6f7e2c17f2c777a2f509360e62e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Hint:&lt;/strong&gt; With &lt;code&gt;--hint[codeBegin]:on```or ``--verbosity:2&lt;/code&gt; (or higher) Nim lists the processed code after each filter application.</source>
          <target state="translated">&lt;strong&gt;提示：&lt;/strong&gt;使用 &lt;code&gt;--hint[codeBegin]:on```or ``--verbosity:2&lt;/code&gt; （或更高版本）&amp;rdquo; Nim会在每个过滤器应用程序后列出已处理的代码。</target>
        </trans-unit>
        <trans-unit id="f555042911466061dac7f6fee69c396fc92108dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Known limitations:&lt;/strong&gt; In the JavaScript target, global variables using the &lt;code&gt;codegenDecl&lt;/code&gt; pragma will be re-initialized on each reload. Please guard the initialization with a &lt;em&gt;once&lt;/em&gt; block to work-around this.</source>
          <target state="translated">&lt;strong&gt;已知限制：&lt;/strong&gt;在JavaScript目标中，将在每次重新加载时重新初始化使用 &lt;code&gt;codegenDecl&lt;/code&gt; 编译指示的全局变量。请通过&lt;em&gt;一次代码&lt;/em&gt;块保护初始化，以解决此问题。</target>
        </trans-unit>
        <trans-unit id="5911ff88eb68bebee7d71b3a0d7b01ad6e208cea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: Nim currently does not detect these!</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：Nim当前无法检测到这些！</target>
        </trans-unit>
        <trans-unit id="140047e96ac4c58f01e73270812c9a51624feb38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; At the moment hot code reloading is supported only in JavaScript projects.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;目前，仅JavaScript项目支持热代码重载。</target>
        </trans-unit>
        <trans-unit id="a5ae990ae2793f586640459d0853bfff28f07ff8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Comment statement will be ignored.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt; Comment语句将被忽略。</target>
        </trans-unit>
        <trans-unit id="d4b69032440a3760c06332bd2946743c6dc04769" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Each delegate has a task associated with it. This gets called after each select() call, if you set timeout to &lt;code&gt;-1&lt;/code&gt; the tasks will only be executed after one or more file descriptors becomes readable or writeable.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;每个委托都有一个与之关联的任务。每次select（）调用之后都会调用此方法，如果将超时设置为 &lt;code&gt;-1&lt;/code&gt; ，则仅在一个或多个文件描述符变为可读或可写之后才执行任务。</target>
        </trans-unit>
        <trans-unit id="7f378938581797df4e574611774903888f75a977" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For leap years, start date is assumed to be 1 AD. counts the number of leap years up to January 1st of a given year. Keep in mind that if specified year is a leap year, the leap day has not happened before January 1st of that year.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;对于leap年，开始日期假定为1 AD。计算到给定年份的1月1日为止的leap年数。请记住，如果指定的年份是a年，则day年在该年的1月1日之前不会发生。</target>
        </trans-unit>
        <trans-unit id="8234ec32d945f2b0f03239d1b0eaae84f70df2af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you want to provide async ability to your module please do not use the &lt;code&gt;Delegate&lt;/code&gt; object, instead use &lt;code&gt;AsyncSocket&lt;/code&gt;. It is possible that in the future this type's fields will not be exported therefore breaking your code.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;如果要为模块提供异步功能，请不要使用 &lt;code&gt;Delegate&lt;/code&gt; 对象，而应使用 &lt;code&gt;AsyncSocket&lt;/code&gt; 。将来有可能不会导出此类型的字段，因此会破坏您的代码。</target>
        </trans-unit>
        <trans-unit id="6066c5e1dbc1c07031004fde7afa16f36e8afe0b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Most modules have tasks which need to be ran regularly, this is why you should not call &lt;code&gt;poll&lt;/code&gt; with a infinite timeout, or even a very long one. In most cases the default timeout is fine.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;大多数模块都有需要定期运行的任务，这就是为什么您不应以无限超时甚至很长的超时调用 &lt;code&gt;poll&lt;/code&gt; 。在大多数情况下，默认超时是可以的。</target>
        </trans-unit>
        <trans-unit id="4f92aa536204e6eaef641a2e69451b390e74e1bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;em&gt;project file name&lt;/em&gt; is the name of the &lt;code&gt;.nim&lt;/code&gt; file that is passed as a command line argument to the compiler.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;该&lt;em&gt;项目文件名&lt;/em&gt;是名 &lt;code&gt;.nim&lt;/code&gt; 被作为命令行参数传递到编译器的文件。</target>
        </trans-unit>
        <trans-unit id="2a72b0f5ef54ecdf16cb26a40bdbef5872800692" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The API of FutureStream is still new and so has a higher likelihood of changing in the future.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt; FutureStream的API仍然是新的，因此将来更改的可能性更高。</target>
        </trans-unit>
        <trans-unit id="fe5b130db131453d8df37e590c01fe6f08bec9e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The behaviour of this procedure changed in version 0.14.0. To get a list of usages and to restore the old behaviour of this procedure, compile with the &lt;code&gt;-d:nimJsonGet&lt;/code&gt; flag.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;此过程的行为在版本0.14.0中已更改。要获取用法列表并恢复该过程的旧行为，请使用 &lt;code&gt;-d:nimJsonGet&lt;/code&gt; 标志进行编译。</target>
        </trans-unit>
        <trans-unit id="c072da5e00ce440c3b93018b2a1ef17e9ee5503c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The current implementation of message passing does not work with cyclic data structures. &lt;strong&gt;Note:&lt;/strong&gt; Channels cannot be passed between threads. Use globals or pass them by &lt;em&gt;ptr&lt;/em&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;消息传递的当前实现不适用于循环数据结构。&lt;strong&gt;注意：&lt;/strong&gt;无法在线程之间传递通道。使用全局变量或通过&lt;em&gt;ptr&lt;/em&gt;传递它们。</target>
        </trans-unit>
        <trans-unit id="b999dbe7ed39e219e124bd0949367e2e3d56fe13" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The resulting &lt;code&gt;XmlNode&lt;/code&gt; already uses the &lt;code&gt;clientData&lt;/code&gt; field, so it cannot be used by clients of this library.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;生成的 &lt;code&gt;XmlNode&lt;/code&gt; 已经使用了 &lt;code&gt;clientData&lt;/code&gt; 字段，因此该库的客户端无法使用它。</target>
        </trans-unit>
        <trans-unit id="eb469a558a1fb80f9ffa7a37d87dd2f9adc314d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The server may return multiple lines of coded replies.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;服务器可能会返回多行编码的答复。</target>
        </trans-unit>
        <trans-unit id="0d1eacb2a91de8906a2993f50f4d1523095b2af2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; There are no postfix operators in Nim. However, the &lt;code&gt;nnkPostfix&lt;/code&gt; node is used for the &lt;em&gt;asterisk export marker&lt;/em&gt;&lt;code&gt;*&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt; Nim中没有后缀运算符。但是， &lt;code&gt;nnkPostfix&lt;/code&gt; 节点用于&lt;em&gt;星号导出标记&lt;/em&gt; &lt;code&gt;*&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2f905a6d385133393b2c96347260edc54f46375a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This does not preserve the new line characters used in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;这不会保留 &lt;code&gt;s&lt;/code&gt; 中使用的换行符。</target>
        </trans-unit>
        <trans-unit id="b7811fa53cf7abdc675dfee2447ec973dd431ac0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This function is not supported on &lt;code&gt;Windows&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt; &lt;code&gt;Windows&lt;/code&gt; 不支持此功能。</target>
        </trans-unit>
        <trans-unit id="10e606a3da78b8e2b189b92aa03f1f5e54c1d549" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This function is supported only by BSD and MacOSX.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;仅BSD和MacOSX支持此功能。</target>
        </trans-unit>
        <trans-unit id="b24c06d6eed7edbd4cef00490b4db7c0ca199c4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This module currently only supports select(), this is limited by FD_SETSIZE, which is usually 1024. So you may only be able to use 1024 sockets at a time.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;该模块当前仅支持select（），这受FD_SETSIZE限制，通常为1024。因此，您一次只能使用1024个套接字。</target>
        </trans-unit>
        <trans-unit id="be757c0b40131a488a140d8d6a5f654644bde753" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This proc is not available for SSL sockets.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;此过程不适用于SSL套接字。</target>
        </trans-unit>
        <trans-unit id="8996a73c32006599330b4aacfeffcd8eabd847e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Under POSIX OS's, the returned time may actually be the time at which the file's attribute's were last modified. See &lt;a href=&quot;https://github.com/nim-lang/Nim/issues/1058&quot;&gt;here&lt;/a&gt; for details.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;在POSIX OS的情况下，返回的时间实际上可能是文件属性的最后修改时间。有关详细信息，请参见&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/1058&quot;&gt;此处&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4326e562047392c7a998b1d78e1b1453866d2345" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You may wish to use the high-level version of this function which is defined below.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;您可能希望使用下面定义的此功能的高级版本。</target>
        </trans-unit>
        <trans-unit id="18f7852fedb7919a22f8ce639864908dfafb58b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You will need to run asynchronous examples in an async proc otherwise you will get an &lt;code&gt;Undeclared identifier: 'await'&lt;/code&gt; error.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;您将需要在异步proc中运行异步示例，否则将获得 &lt;code&gt;Undeclared identifier: 'await'&lt;/code&gt; 错误。</target>
        </trans-unit>
        <trans-unit id="e153549d82bb0553e51565bc85af72f16648f194" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;c2nim&quot;&gt;c2nim&lt;/a&gt; can parse a large subset of C++ and knows about the &lt;code&gt;importcpp&lt;/code&gt; pragma pattern language. It is not necessary to know all the details described here.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：&lt;a href=&quot;c2nim&quot;&gt;c2nim&lt;/a&gt;可以解析C ++的较大子集，并且了解 &lt;code&gt;importcpp&lt;/code&gt; 编译模式语言。不必知道这里描述的所有细节。</target>
        </trans-unit>
        <trans-unit id="752ddb5d050c961f8013cbe90d4ad9d26a7ee13a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;client&lt;/code&gt; must be initialised (with &lt;code&gt;new&lt;/code&gt;), this function makes no effort to initialise the &lt;code&gt;client&lt;/code&gt; variable.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：必须初始化 &lt;code&gt;client&lt;/code&gt; （使用 &lt;code&gt;new&lt;/code&gt; ），此功能不会初始化 &lt;code&gt;client&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="449eaada440261e910e8e598da9c4ed1cfb68e61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;client&lt;/code&gt; needs to be initialised.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;： &lt;code&gt;client&lt;/code&gt; 需要初始化。</target>
        </trans-unit>
        <trans-unit id="ed6c907ecc726f3524b1431bfea1378d7d591f2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;data&lt;/code&gt; must be initialised.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;： &lt;code&gt;data&lt;/code&gt; 必须初始化。</target>
        </trans-unit>
        <trans-unit id="79f23d79481e20b54cf233e31f8767bbf0d80411" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;var&lt;/code&gt; parameters are never necessary for efficient parameter passing. Since non-var parameters cannot be modified the compiler is always free to pass arguments by reference if it considers it can speed up execution.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;： &lt;code&gt;var&lt;/code&gt; 参数对于有效的参数传递从不需要。由于不能修改非var参数，因此编译器如果认为可以加快执行速度，则始终可以按引用传递参数。</target>
        </trans-unit>
        <trans-unit id="917b6bc95e7e2268d07e2f344f8fb05732bc1b22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: A &lt;code&gt;dynlib&lt;/code&gt; import can be overridden with the &lt;code&gt;--dynlibOverride:name&lt;/code&gt; command line option. The Compiler User Guide contains further information.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：可以使用 &lt;code&gt;--dynlibOverride:name&lt;/code&gt; 命令行选项覆盖 &lt;code&gt;dynlib&lt;/code&gt; 导入。《编译器用户指南》包含更多信息。</target>
        </trans-unit>
        <trans-unit id="a4c0c0109f9323e091c1b8f19f86e88886ea759e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: An &lt;span id=&quot;unresolved_1&quot;&gt;unresolved&lt;/span&gt; expression is an expression for which no symbol lookups and no type checking have been performed.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：&lt;span id=&quot;unresolved_1&quot;&gt;未解析的&lt;/span&gt;表达式是&lt;span id=&quot;unresolved_1&quot;&gt;未&lt;/span&gt;执行任何符号查找和类型检查的表达式。</target>
        </trans-unit>
        <trans-unit id="19158a8ced28ef096d6d098faea99e938f8aea45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: As a special syntactic extension if the whole PEG is only a single expression, identifiers are not interpreted as non-terminals, but are interpreted as verbatim string:</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：如果整个PEG仅是单个表达式，则作为特殊的语法扩展，标识符不会解释为非终结符，而是解释为逐字字符串：</target>
        </trans-unit>
        <trans-unit id="394b8821bf33b16092eceec91b4261c0182b2ffd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Code reordering is experimental and must be enabled via the &lt;code&gt;{.experimental.}&lt;/code&gt; pragma.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：代码重新排序是实验性的，必须通过 &lt;code&gt;{.experimental.}&lt;/code&gt; 编译指示启用。</target>
        </trans-unit>
        <trans-unit id="15d3410cbe9aaa0f2ff2edaf757af2c7376b1329" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Compile time evaluation is not (yet) supported for methods.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：方法尚不支持编译时间评估。</target>
        </trans-unit>
        <trans-unit id="1ec4927b4c9fc829236a51cac7723591db8396a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Composition (&lt;em&gt;has-a&lt;/em&gt; relation) is often preferable to inheritance (&lt;em&gt;is-a&lt;/em&gt; relation) for simple code reuse. Since objects are value types in Nim, composition is as efficient as inheritance.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：对于简单的代码重用，组合（&lt;em&gt;具有-&lt;/em&gt;关系）通常优于继承（&lt;em&gt;具有-&lt;/em&gt;关系）。由于对象是Nim中的值类型，因此组合与继承一样有效。</target>
        </trans-unit>
        <trans-unit id="0f588e4000ab499174937baf99ba9de907f81477" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Concepts are still in development.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：概念仍在开发中。</target>
        </trans-unit>
        <trans-unit id="af0cb2698b6f62001c812557400b5666b24c541b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Currently exceptions are not propagated between &lt;code&gt;spawn&lt;/code&gt;'ed tasks!</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：目前，异常不会在 &lt;code&gt;spawn&lt;/code&gt; 任务之间传播！</target>
        </trans-unit>
        <trans-unit id="e593de705b48a873244d353e72e0630bbbf7e8ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Currently the compiler recognizes but ignores this pragma.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：当前，编译器可以识别但忽略此编译指示。</target>
        </trans-unit>
        <trans-unit id="1b2d5b76dbe4b87b85248e2c9cb6a142ec8c770f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Currently the creation of &lt;code&gt;nimrtl.dll&lt;/code&gt; with thread support has never been tested and is unlikely to work!</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：目前， &lt;code&gt;nimrtl.dll&lt;/code&gt; 带有线程支持的nimrtl.dll的创建进行过测试，因此不太可能成功！</target>
        </trans-unit>
        <trans-unit id="fb2822c93615d44b3b3cc5966ff533ff418b8724" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Destructors are still experimental and the spec might change significantly in order to incorporate an escape analysis.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：析构函数仍处于实验阶段，为了合并逃逸分析，规格可能会发生重大变化。</target>
        </trans-unit>
        <trans-unit id="ee1ed6db845c184364f8097a01163d56d39e9c4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Dot operators are still experimental and so need to be enabled via &lt;code&gt;{.experimental: &quot;dotOperators&quot;.}&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：点运算符仍处于试验阶段，因此需要通过 &lt;code&gt;{.experimental: &quot;dotOperators&quot;.}&lt;/code&gt; 启用。</target>
        </trans-unit>
        <trans-unit id="76687951273781b82f6f05a64604534fc897b54a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For SSL sockets, the &lt;code&gt;handshake&lt;/code&gt; procedure must be called whenever the socket successfully connects to a server.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：对于SSL套接字，只要套接字成功连接到服务器，就必须调用 &lt;code&gt;handshake&lt;/code&gt; 过程。</target>
        </trans-unit>
        <trans-unit id="91e3db899bae0bbfb9a7d3d39b2d7c168b6e2d11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For historical reasons &lt;code&gt;stmt&lt;/code&gt; is an alias for &lt;code&gt;typed&lt;/code&gt; and &lt;code&gt;expr&lt;/code&gt; an alias for &lt;code&gt;untyped&lt;/code&gt;, but new code should use the newer, clearer names.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：由于历史原因， &lt;code&gt;stmt&lt;/code&gt; 是 &lt;code&gt;typed&lt;/code&gt; 的别名， &lt;code&gt;expr&lt;/code&gt; 是 &lt;code&gt;untyped&lt;/code&gt; 的别名，但是新代码应使用更新，更清晰的名称。</target>
        </trans-unit>
        <trans-unit id="35fa8c02b68bd348136724f65366d5d42363838f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For historical reasons &lt;code&gt;varargs[expr]&lt;/code&gt; is not equivalent to &lt;code&gt;varargs[untyped]&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：由于历史原因， &lt;code&gt;varargs[expr]&lt;/code&gt; 不等同于 &lt;code&gt;varargs[untyped]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9cc5314fa7beb1755c498007976fd6bffd4a8741" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Nim computes a SHA1 checksum and only recompiles the file if it has changed. You can use the &lt;code&gt;-f&lt;/code&gt; command line option to force recompilation of the file.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：Nim计算SHA1校验和，并且仅在文件已更改时才重新编译。您可以使用 &lt;code&gt;-f&lt;/code&gt; 命令行选项来强制重新编译文件。</target>
        </trans-unit>
        <trans-unit id="1271bb2722e7587eff37d0ec7806e796871dfb12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Openarrays can only be used for parameters.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：Openarray仅可用于参数。</target>
        </trans-unit>
        <trans-unit id="69090e5eea8eeff4b4d6ed39bda4ed8ea1e00303" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Passing variables to the &lt;code&gt;dynlib&lt;/code&gt; pragma will fail at runtime because of order of initialization problems.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：由于初始化问题的顺序，将变量传递给 &lt;code&gt;dynlib&lt;/code&gt; 编译指示将在运行时失败。</target>
        </trans-unit>
        <trans-unit id="3d949419e5e8c75fc524d73127b46fd0d96b06e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Patterns like &lt;code&gt;libtcl(|8.5|8.4).so&lt;/code&gt; are only supported in constant strings, because they are precompiled.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：像 &lt;code&gt;libtcl(|8.5|8.4).so&lt;/code&gt; 这样的模式仅在常量字符串中受支持，因为它们已预编译。</target>
        </trans-unit>
        <trans-unit id="5c87c54173a7af7c54802abf0f3667ebc67c0bd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Read/write tracking is not yet implemented!</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：尚未执行读/写跟踪！</target>
        </trans-unit>
        <trans-unit id="935e75468fab30bc8f181842cd16bcdfa062c5e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;.this&lt;/code&gt; pragma is deprecated and should not be used anymore.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;： &lt;code&gt;.this&lt;/code&gt; 编译指示已被弃用，不应再使用。</target>
        </trans-unit>
        <trans-unit id="e111e86a91d15663eda5e4e58e22260484c13d8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;$$&lt;/code&gt; operations are available at compile-time!</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;： &lt;code&gt;to&lt;/code&gt; 和 &lt;code&gt;$$&lt;/code&gt; 操作在编译时可用！</target>
        </trans-unit>
        <trans-unit id="1f9fdb234ef8ab9ea0cd0ee243a725c77f4c3646" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The asynchronous implementation is only asynchronous for long file transfers, calls to functions which use the command socket will block.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：异步实现仅对于长文件传输是异步的，使用命令套接字的函数调用将被阻止。</target>
        </trans-unit>
        <trans-unit id="21b5006b1c5b3e0551182aafd1ac04017eed31d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The data types declared here have &lt;em&gt;value semantics&lt;/em&gt;: This means that &lt;code&gt;=&lt;/code&gt; performs a copy of the set.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：这里声明的数据类型具有&lt;em&gt;值语义&lt;/em&gt;：这意味着 &lt;code&gt;=&lt;/code&gt; 执行该集合的副本。</target>
        </trans-unit>
        <trans-unit id="280898b023d47a8c9d92f2a9764ba5070e544d38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The example only works because the memory is initialized to zero (&lt;code&gt;alloc0&lt;/code&gt; instead of &lt;code&gt;alloc&lt;/code&gt; does this): &lt;code&gt;d.s&lt;/code&gt; is thus initialized to binary zero which the string assignment can handle. One needs to know low level details like this when mixing garbage collected data with unmanaged memory.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：该示例仅起作用，因为内存已初始化为零（用 &lt;code&gt;alloc0&lt;/code&gt; 而不是 &lt;code&gt;alloc&lt;/code&gt; 进行此操作）：因此， &lt;code&gt;d.s&lt;/code&gt; 初始化为字符串赋值可以处理的二进制零。将垃圾收集的数据与非托管内存混合时，需要了解这样的低级详细信息。</target>
        </trans-unit>
        <trans-unit id="47964f4e63f9364071ab4aeb6d699ff7f8c08bcd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There are also &lt;code&gt;--assumedef&lt;/code&gt; and &lt;code&gt;--assumendef&lt;/code&gt; command line options that can be used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：还有 &lt;code&gt;--assumedef&lt;/code&gt; 和 &lt;code&gt;--assumendef&lt;/code&gt; 命令行选项可用于相同目的。</target>
        </trans-unit>
        <trans-unit id="beec5a850cfc6f7745e1b0ecb5a58d4d3717ffad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There are also &lt;code&gt;--prefix&lt;/code&gt; and &lt;code&gt;--suffix&lt;/code&gt; command line options that can be used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：还有 &lt;code&gt;--prefix&lt;/code&gt; 和 &lt;code&gt;--suffix&lt;/code&gt; 命令行选项可用于相同目的。</target>
        </trans-unit>
        <trans-unit id="69ba15cf193dfbb62171a2742d239684c78daa69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There are also &lt;code&gt;--stdcall&lt;/code&gt; and &lt;code&gt;--cdecl&lt;/code&gt; command line options that can be used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：还有 &lt;code&gt;--stdcall&lt;/code&gt; 和 &lt;code&gt;--cdecl&lt;/code&gt; 命令行选项可用于相同目的。</target>
        </trans-unit>
        <trans-unit id="6eae5a3b83fbed6b6c57ab8bbef30bd246b16faa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There are two approaches to parameter substitution support by this module.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：此模块有两种方法支持参数替换。</target>
        </trans-unit>
        <trans-unit id="a5a42997a6733b871213621a8b95f824a807c7b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There is also a &lt;code&gt;--dynlib&lt;/code&gt; command line option that can be used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：还有 &lt;code&gt;--dynlib&lt;/code&gt; 命令行选项可用于相同目的。</target>
        </trans-unit>
        <trans-unit id="7af996a9b1410d0551b826fcf6f31d2982be4597" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There is also a &lt;code&gt;--header&lt;/code&gt; command line option that can be used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：还有一个 &lt;code&gt;--header&lt;/code&gt; 命令行选项可用于相同目的。</target>
        </trans-unit>
        <trans-unit id="0f6e6a5551e301a9206be409821f73e8efe724ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There is also a &lt;code&gt;--skipcomments&lt;/code&gt; command line option that can be used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：还有一个 &lt;code&gt;--skipcomments&lt;/code&gt; 命令行选项可用于相同目的。</target>
        </trans-unit>
        <trans-unit id="24001770e3fa5f62c6de4221e4016da922b0b6b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There is also a &lt;code&gt;--skipinclude&lt;/code&gt; command line option that can be used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：还有一个 &lt;code&gt;--skipinclude&lt;/code&gt; 命令行选项可用于相同目的。</target>
        </trans-unit>
        <trans-unit id="2a3d0067cf0a534d5914217a3b18410a03771aa4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There is also a &lt;code&gt;--typeprefixes&lt;/code&gt; command line option that can be used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：还有一个 &lt;code&gt;--typeprefixes&lt;/code&gt; 命令行选项可用于相同目的。</target>
        </trans-unit>
        <trans-unit id="e18e21cf48841adbc9777187ae8968f7fba53e98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This document is a draft! Several of Nim's features may need more precise wording. This manual is constantly evolving into a proper specification.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：本文档为草稿！Nim的某些功能可能需要更精确的措辞。本手册不断发展成为适当的规格。</target>
        </trans-unit>
        <trans-unit id="054e7ea2fe4b0d2089c5eb61f38663920957149a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This is a low-level function, you may be interested in the higher level versions of this function which are also named &lt;code&gt;recv&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：这是一个低级函数，您可能对该函数的更高版本（也称为 &lt;code&gt;recv&lt;/code&gt; )感兴趣。</target>
        </trans-unit>
        <trans-unit id="5282ba94e7660dfc3a29bcd1eed3c48d245d27d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This is a low-level version of &lt;code&gt;send&lt;/code&gt;. You likely should use the version below.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：这是 &lt;code&gt;send&lt;/code&gt; 的低级版本。您可能应该使用以下版本。</target>
        </trans-unit>
        <trans-unit id="a69e35e7b9f3081695456106f46697c03ffedd82" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This module is deprecated since version 0.11.3. You should use the async version of this module &lt;a href=&quot;asyncftpclient&quot;&gt;asyncftpclient&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：从0.11.3版本开始不推荐使用此模块。您应该使用此模块的异步版本&lt;a href=&quot;asyncftpclient&quot;&gt;asyncftpclient&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d2aa27f677d4a034cdeb59f9e8f5be392614db71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This pragma should only be used by procs which consist solely of assembler statements.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：此编译指示只能由仅由汇编程序语句组成的proc使用。</target>
        </trans-unit>
        <trans-unit id="c3942176661636505e686cd1e170c9c2c66c7838" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This pragma will not exist for the LLVM backend.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：LLVM后端不存在此杂&lt;strong&gt;注&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="e370238e58db64e0d5e09298f252112f6df12b8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This procedure is mostly used for testing. You likely want to use &lt;code&gt;asyncnet.recvLine&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：此过程主要用于测试。您可能想改用 &lt;code&gt;asyncnet.recvLine&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="322b2c09d6ee80b4e8d9ee5e387bb8ede9f8c9b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This procedure will &lt;strong&gt;NOT&lt;/strong&gt; register &lt;code&gt;fd&lt;/code&gt; with the global async dispatcher. You need to do this manually. If you have used &lt;code&gt;newAsyncNativeSocket&lt;/code&gt; to create &lt;code&gt;fd&lt;/code&gt; then it's already registered.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：此过程将&lt;strong&gt;不&lt;/strong&gt;注册 &lt;code&gt;fd&lt;/code&gt; 与全球异步调度。您需要手动执行此操作。如果您已使用 &lt;code&gt;newAsyncNativeSocket&lt;/code&gt; 创建 &lt;code&gt;fd&lt;/code&gt; ,则该fd已被注册。</target>
        </trans-unit>
        <trans-unit id="d932869f99df24b8242ec488c4a11db3770fcfc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This will not work for the LLVM backend.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：这不适用于LLVM后端。</target>
        </trans-unit>
        <trans-unit id="36372381e9ac840b308a26506bae63970c747486" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This will set &lt;code&gt;sock&lt;/code&gt; to be non-blocking.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：这会将 &lt;code&gt;sock&lt;/code&gt; 设置为非阻塞。</target>
        </trans-unit>
        <trans-unit id="1223df2703569d7a264f78da6a04381483fe3ce4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: static[T] is still in development.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：static [T]仍在开发中。</target>
        </trans-unit>
        <trans-unit id="cfc7fae090374e3f5581cc6d980013b1b5608dd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: this proc does not exist while using the JS backend.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：使用JS后端时，此proc不存在。</target>
        </trans-unit>
        <trans-unit id="3999835082895c400051c08efff687fac9d5116a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Performance note&lt;/strong&gt;: Nim does not produce a virtual method table, but generates dispatch trees. This avoids the expensive indirect branch for method calls and enables inlining. However, other optimizations like compile time evaluation or dead code elimination do not work with methods.</source>
          <target state="translated">&lt;strong&gt;性能说明&lt;/strong&gt;：Nim不会生成虚拟方法表，但会生成调度树。这避免了方法调用的昂贵的间接分支，并启用了内联。但是，其他优化（例如编译时评估或消除无效代码）不适用于这些方法。</target>
        </trans-unit>
        <trans-unit id="23e826b6b4ecba08efbc3138c61cefb888e1c674" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Please do not use this&lt;/strong&gt;: On Android, it currently returns &lt;code&gt;getHomeDir()&lt;/code&gt;, and on other Unix based systems it can cause security problems too. That said, you can override this implementation by adding &lt;code&gt;-d:tempDir=mytempname&lt;/code&gt; to your compiler invokation.</source>
          <target state="translated">&lt;strong&gt;请不要使用此方法&lt;/strong&gt;：在Android上，它当前返回 &lt;code&gt;getHomeDir()&lt;/code&gt; ，而在其他基于Unix的系统上，它也可能导致安全问题。也就是说，您可以通过在编译器调用中添加 &lt;code&gt;-d:tempDir=mytempname&lt;/code&gt; 来覆盖此实现。</target>
        </trans-unit>
        <trans-unit id="af53126db5be4c8aab90d27d5734b3708b192d3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Restriction&lt;/strong&gt;: For objects their type is &lt;strong&gt;not&lt;/strong&gt; serialized. This means essentially that it does not work if the object has some other runtime type than its compiletime type:</source>
          <target state="translated">&lt;strong&gt;限制&lt;/strong&gt;：对于对象，其类型&lt;strong&gt;未&lt;/strong&gt;序列化。从本质上讲，这意味着如果对象具有不同于其编译时类型的其他运行时类型，则它将不起作用：</target>
        </trans-unit>
        <trans-unit id="92e0079e41a5b0f8de60d18697948189f4c07fdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Style note&lt;/strong&gt;: For code readability, it is the best idea to use the least powerful programming construct that still suffices. So the &quot;check list&quot; is:</source>
          <target state="translated">&lt;strong&gt;样式说明&lt;/strong&gt;：为了使代码易于阅读，最好的方法是使用仍然足够满足要求的功能最弱的编程结构。因此，&amp;ldquo;检查清单&amp;rdquo;为：</target>
        </trans-unit>
        <trans-unit id="fe1515dd837d06ebdfb95963f4b433b9a9c3985a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + const name.</source>
          <target state="translated">&lt;strong&gt;第三列&lt;/strong&gt;：模块+ [n作用域嵌套] + const名称。</target>
        </trans-unit>
        <trans-unit id="89fa1ce97e4b1a8bbc8a7bdf79f0c84b5531d6c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + enum type + enum field name.</source>
          <target state="translated">&lt;strong&gt;第三列&lt;/strong&gt;：模块+ [n范围嵌套] +枚举类型+枚举字段名称。</target>
        </trans-unit>
        <trans-unit id="44cc69c566e0009f6ccc0fbac4d3567a0268b727" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + iterator name.</source>
          <target state="translated">&lt;strong&gt;第三列&lt;/strong&gt;：模块+ [n作用域嵌套] +迭代器名称。</target>
        </trans-unit>
        <trans-unit id="821988216adbe7cd1954ec0da5648027ef8dc44d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + let name.</source>
          <target state="translated">&lt;strong&gt;第三列&lt;/strong&gt;：模块+ [n范围嵌套] +让名称。</target>
        </trans-unit>
        <trans-unit id="57a25e461776b40d157a649de93257f5fe549d65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + macro name.</source>
          <target state="translated">&lt;strong&gt;第三列&lt;/strong&gt;：模块+ [n作用域嵌套] +宏名称。</target>
        </trans-unit>
        <trans-unit id="3166d2d68e6f9702d538e16e0e365a37f0f31329" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + method name.</source>
          <target state="translated">&lt;strong&gt;第三列&lt;/strong&gt;：模块+ [n范围嵌套] +方法名称。</target>
        </trans-unit>
        <trans-unit id="061167cd91100dd105e9d11351199c7b83c16430" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + name.</source>
          <target state="translated">&lt;strong&gt;第三列&lt;/strong&gt;：模块+ [n作用域嵌套] +名称。</target>
        </trans-unit>
        <trans-unit id="acf85825d2dfb7a2233737f8ada9679976415f1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + param name.</source>
          <target state="translated">&lt;strong&gt;第三列&lt;/strong&gt;：模块+ [n范围嵌套] +参数名称。</target>
        </trans-unit>
        <trans-unit id="546e3a8202699c79b7b925592249d4072a1845aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + proc name.</source>
          <target state="translated">&lt;strong&gt;第三列&lt;/strong&gt;：模块+ [n作用域嵌套] + proc名称。</target>
        </trans-unit>
        <trans-unit id="e1aaee074e6af2e4ed1a60de85b378cc36322c99" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + result.</source>
          <target state="translated">&lt;strong&gt;第三列&lt;/strong&gt;：模块+ [n范围嵌套] +结果。</target>
        </trans-unit>
        <trans-unit id="ca9583e48baa25b1239a744bd75804685b9425dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + template name.</source>
          <target state="translated">&lt;strong&gt;第三列&lt;/strong&gt;：模块+ [n作用域嵌套] +模板名称。</target>
        </trans-unit>
        <trans-unit id="e445dd6209bef0d057963888553bf05a22332bbe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + type name.</source>
          <target state="translated">&lt;strong&gt;第三列&lt;/strong&gt;：模块+ [n作用域嵌套] +类型名称。</target>
        </trans-unit>
        <trans-unit id="0e96cb006b66e97d61d546d8e4a627270ae7af33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + var name.</source>
          <target state="translated">&lt;strong&gt;第三列&lt;/strong&gt;：模块+ [n作用域嵌套] + var名称。</target>
        </trans-unit>
        <trans-unit id="96622873fb587ed595611ae4d0e283ece6697a93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is deprecated and should not be used&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;不推荐使用此方法，不应使用它&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="5a9df7eca11b12855add51f036ea9d3d1ea8ae1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage in JavaScript projects:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;在JavaScript项目中的用法：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e4316d6405c9f4c9d98f6e1f272b469fd25904ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING&lt;/strong&gt;: Use it with caution. If &lt;code&gt;buf&lt;/code&gt; refers to GC'ed object, you must use GC_ref/GC_unref calls to avoid early freeing of the buffer.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：请谨慎使用。如果 &lt;code&gt;buf&lt;/code&gt; 引用了GC的对象，则必须使用GC_ref / GC_unref调用，以避免提早释放缓冲区。</target>
        </trans-unit>
        <trans-unit id="5f8f9514a22b55ff9c78136da9ef8a81f67b0108" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; If the process has not finished executing, this will forcibly terminate the process. Doing so may result in zombie processes and &lt;a href=&quot;http://stackoverflow.com/questions/27021641/how-to-fix-request-failed-on-channel-0&quot;&gt;pty leaks&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;如果进程尚未完成执行，将强制终止进程。这样做可能会导致僵尸进程和&lt;a href=&quot;http://stackoverflow.com/questions/27021641/how-to-fix-request-failed-on-channel-0&quot;&gt;pty泄漏&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7648a978c3c5b08aa7a942fe439314fcbbd9e17c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; It's not recommended to use &lt;code&gt;between&lt;/code&gt; for &lt;code&gt;DateTime's&lt;/code&gt; in different &lt;code&gt;TimeZone's&lt;/code&gt;. &lt;code&gt;a + between(a, b) == b&lt;/code&gt; is only guaranteed when &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are in UTC.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;这不是推荐使用 &lt;code&gt;between&lt;/code&gt; 的 &lt;code&gt;DateTime's&lt;/code&gt; 在不同的 &lt;code&gt;TimeZone's&lt;/code&gt; 。仅当 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 在UTC中时，才能保证 &lt;code&gt;a + between(a, b) == b&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0a52c8fdc83d67244f36d1e45904b31b08be93b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Since version 0.10.2 this module is deprecated. Use the &lt;a href=&quot;net&quot;&gt;net&lt;/a&gt; or the &lt;a href=&quot;nativesockets&quot;&gt;nativesockets&lt;/a&gt; module instead.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;从版本0.10.2开始，不建议使用此模块。请使用&lt;a href=&quot;net&quot;&gt;net&lt;/a&gt;或&lt;a href=&quot;nativesockets&quot;&gt;nativesockets&lt;/a&gt;模块。</target>
        </trans-unit>
        <trans-unit id="9968b14e6044d19bea13d96a6048dbd5746bc726" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The &lt;code&gt;total&lt;/code&gt; reported by httpclient may be 0 in some cases.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;在某些情况下，httpclient报告的 &lt;code&gt;total&lt;/code&gt; 可能为0。</target>
        </trans-unit>
        <trans-unit id="24b0c00e568f6b8e8da0f3bc2db0c76c857a200b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The API of this module is unstable, and therefore is subject to change.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;此模块的API不稳定，因此可能会发生变化。</target>
        </trans-unit>
        <trans-unit id="9d0af0517916216290aedd9e00253fb0aa629d1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The buffer &lt;em&gt;a&lt;/em&gt; must be pre-allocated. This can be done using, for example, &lt;code&gt;newString&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;必须预先分配缓冲区&lt;em&gt;a&lt;/em&gt;。可以使用例如 &lt;code&gt;newString&lt;/code&gt; 完成此操作。</target>
        </trans-unit>
        <trans-unit id="0520baa64a72e7ee0281b0ddd067f506549b20a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The global list of handlers is a thread var, this means that the handlers must be re-added in each thread. &lt;strong&gt;Warning:&lt;/strong&gt; When logging on disk or console, only error and fatal messages are flushed out immediately. Use flushFile() where needed.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;处理程序的全局列表是线程var，这意味着必须在每个线程中重新添加处理程序。&lt;strong&gt;警告：&lt;/strong&gt;登录磁盘或控制台时，仅立即清除错误和致命消息。在需要的地方使用flushFile（）。</target>
        </trans-unit>
        <trans-unit id="1de5e055501cd9543ed70f0688cbf30ac70cdc1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This function does not yet have a buffered implementation, so when &lt;code&gt;socket&lt;/code&gt; is buffered the non-buffered implementation will be used. Therefore if &lt;code&gt;socket&lt;/code&gt; contains something in its buffer this function will make no effort to return it.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;该函数尚无缓冲实现，因此当 &lt;code&gt;socket&lt;/code&gt; 被缓冲时，将使用非缓冲实现。因此，如果 &lt;code&gt;socket&lt;/code&gt; 在其缓冲区中包含某些内容，则该函数将不做任何努力来返回它。</target>
        </trans-unit>
        <trans-unit id="854f87e513637b6e9a5ac650c51cff41b8f768e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This module is deprecated since version 0.10.2. Use the brand new &lt;a href=&quot;asyncdispatch&quot;&gt;asyncdispatch&lt;/a&gt; module together with the &lt;a href=&quot;asyncnet&quot;&gt;asyncnet&lt;/a&gt; module.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;从版本0.10.2开始不推荐使用此模块。使用全新的&lt;a href=&quot;asyncdispatch&quot;&gt;asyncdispatch&lt;/a&gt;与模块一起&lt;a href=&quot;asyncnet&quot;&gt;asyncnet&lt;/a&gt;模块。</target>
        </trans-unit>
        <trans-unit id="aa0b3c2a66d1cb7f1d4a063b94c4ce6ca1f2543b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This module is deprecated since version 0.14.0.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;从版本0.14.0开始不推荐使用此模块。</target>
        </trans-unit>
        <trans-unit id="7eb0dfd155d4b6f3b53e214b0ecc3fdf13f08633" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This module is deprecated, use the SSL procedures defined in the &lt;code&gt;net&lt;/code&gt; module instead.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;不建议使用此模块，请改用 &lt;code&gt;net&lt;/code&gt; 模块中定义的SSL过程。</target>
        </trans-unit>
        <trans-unit id="5c5666a07ce3875934c4c4fc973b2a781936f5f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This module only supports the old asynchronous interface. You may wish to use the &lt;a href=&quot;asynchttpserver&quot;&gt;asynchttpserver&lt;/a&gt; instead for web applications.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;此模块仅支持旧的异步接口。您可能希望对Web应用程序使用&lt;a href=&quot;asynchttpserver&quot;&gt;asynchttpserver&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="53266ecbd11ce935a7868dc21f59beb46ccb3aaa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; When using SSL with non-blocking sockets, it is best to use the acceptAddrSSL procedure as this procedure will most likely block.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;将SSL与非阻塞套接字一起使用时，最好使用acceptAddrSSL过程，因为此过程很可能会阻塞。</target>
        </trans-unit>
        <trans-unit id="808a8a1028dc1fed134e205c55ec27d7dd5b23fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: &lt;code&gt;recvLine&lt;/code&gt; on unbuffered sockets assumes that the protocol uses &lt;code&gt;\r\L&lt;/code&gt; to delimit a new line.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：无缓冲套接字上的 &lt;code&gt;recvLine&lt;/code&gt; 假定协议使用 &lt;code&gt;\r\L&lt;/code&gt; 分隔新行。</target>
        </trans-unit>
        <trans-unit id="ac11ca7b54f8ac76331d539b39687d412032a370" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: &lt;code&gt;recvLineInto&lt;/code&gt; on unbuffered sockets assumes that the protocol uses &lt;code&gt;\r\L&lt;/code&gt; to delimit a new line.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：无缓冲套接字上的 &lt;code&gt;recvLineInto&lt;/code&gt; 假定协议使用 &lt;code&gt;\r\L&lt;/code&gt; 分隔新行。</target>
        </trans-unit>
        <trans-unit id="5d163b20a95cadf02bed8abe7ed680f87b2b48bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Be careful when using waitForExit for processes created without poParentStreams because they may fill output buffers, causing deadlock.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：对没有poParentStreams创建的进程使用waitForExit时要小心，因为它们可能会填充输出缓冲区，从而导致死锁。</target>
        </trans-unit>
        <trans-unit id="0163b79bd484845ef77cdbb23264a20232b50266" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: If &lt;code&gt;state&lt;/code&gt; is set incorrectly the resulting &lt;code&gt;AsyncSocket&lt;/code&gt; object may not work properly.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：如果 &lt;code&gt;state&lt;/code&gt; 设置不正确，则生成的 &lt;code&gt;AsyncSocket&lt;/code&gt; 对象可能无法正常工作。</target>
        </trans-unit>
        <trans-unit id="6f6766ee200b64744878c681dde8b968c6f670b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Only the &lt;code&gt;SafeDisconn&lt;/code&gt; flag is currently supported.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：目前仅支持 &lt;code&gt;SafeDisconn&lt;/code&gt; 标志。</target>
        </trans-unit>
        <trans-unit id="5179a287236e2707d51c8ae92986184ef63e00df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Only use this if you know what you are doing.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：仅当您知道自己在做什么时才使用此功能。</target>
        </trans-unit>
        <trans-unit id="b8ef80f1f143a1f7de2004bb4e9cee1fed78e787" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Some OS's (such as Microsoft Windows) restrict the creation of symlinks to root users (administrators).</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：某些操作系统（例如Microsoft Windows）将创建符号链接限制为root用户（管理员）。</target>
        </trans-unit>
        <trans-unit id="1f61c1a4fea430f13537ed29d0765d587962a8f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Some OS's restrict the creation of hard links to root users (administrators).</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：某些操作系统限制了对根用户（管理员）的硬链接的创建。</target>
        </trans-unit>
        <trans-unit id="f9012f1b5937f6027293c08f92583d61921af08c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: The &lt;code&gt;Peek&lt;/code&gt; flag is not yet implemented.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;： &lt;code&gt;Peek&lt;/code&gt; 标志尚未实现。</target>
        </trans-unit>
        <trans-unit id="e86c259d83ff7290e4d751971a6fa6a8870f2e71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: The &lt;code&gt;Peek&lt;/code&gt; socket flag is not supported on Windows.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：Windows不支持 &lt;code&gt;Peek&lt;/code&gt; 套接字标志。</target>
        </trans-unit>
        <trans-unit id="67b4583abc34f87fcf6eff4869eef2bfd28629d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: The &lt;em&gt;tmpl&lt;/em&gt; argument is written to by &lt;em&gt;mkstemp&lt;/em&gt; and thus can't be a string literal. If in doubt copy the string before passing it.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：&lt;em&gt;tmpl&lt;/em&gt;参数由&lt;em&gt;mkstemp&lt;/em&gt;写入，因此不能是字符串文字。如有疑问，请在传递字符串之前将其复制。</target>
        </trans-unit>
        <trans-unit id="eae8834fd1ff75f9c078051184e01727261e31cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: The resulting &lt;code&gt;ptr AddrInfo&lt;/code&gt; must be freed using &lt;code&gt;freeAddrInfo&lt;/code&gt;!</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：必须使用 &lt;code&gt;freeAddrInfo&lt;/code&gt; 释放生成的 &lt;code&gt;ptr AddrInfo&lt;/code&gt; AddrInfo！</target>
        </trans-unit>
        <trans-unit id="9e788c203930a853b492baa9fb790e0baaa6f689" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: The returned &lt;em&gt;FileHandle&lt;/em&gt; should not be closed manually as it is closed when closing the Process &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：返回的&lt;em&gt;FileHandle&lt;/em&gt;不应手动关闭，因为在关闭进程 &lt;code&gt;p&lt;/code&gt; 时将其关闭。</target>
        </trans-unit>
        <trans-unit id="35816baa23c24b5f9e80530b286a99de07763458" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: The returned &lt;em&gt;Stream&lt;/em&gt; should not be closed manually as it is closed when closing the Process &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：返回的&lt;em&gt;Stream&lt;/em&gt;不应手动关闭，因为在关闭Process &lt;code&gt;p&lt;/code&gt; 时将其关闭。</target>
        </trans-unit>
        <trans-unit id="070d8f77f83eff23785cd22229e7c7593a9f015a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: This assumes that lines are delimited by &lt;code&gt;\r\L&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：这假定行由 &lt;code&gt;\r\L&lt;/code&gt; 分隔。</target>
        </trans-unit>
        <trans-unit id="a9df6a23fa581b51ba2e0e996ce854f48568ec52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: This function may give unexpected or completely wrong results on Windows.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：此功能可能会在Windows上导致意外或完全错误的结果。</target>
        </trans-unit>
        <trans-unit id="016fcff66b49f260c1c428fc4a770e9ba587d905" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: This module uses &lt;code&gt;immediate&lt;/code&gt; macros which are known to cause problems. Do yourself a favor and import the module as &lt;code&gt;from htmlgen import nil&lt;/code&gt; and then fully qualify the macros.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：此模块使用已知会导致问题的 &lt;code&gt;immediate&lt;/code&gt; 宏。帮个忙， &lt;code&gt;from htmlgen import nil&lt;/code&gt; 导入模块，然后完全限定宏。</target>
        </trans-unit>
        <trans-unit id="1ee8bac63489b4b65f1d77d36e0156115bbf2067" translate="yes" xml:space="preserve">
          <source>A &quot;word&quot; character is an underscore or any character less than 256 that is a letter or digit. The definition of letters and digits is controlled by PCRE's low-valued character tables, and may vary if locale-specific matching is taking place (see &quot;Locale support&quot; in the pcreapi page). For example, in the &quot;fr_FR&quot; (French) locale, some character codes greater than 128 are used for accented letters, and these are matched by &lt;code&gt;\w&lt;/code&gt;.</source>
          <target state="translated">&amp;ldquo;单词&amp;rdquo;字符是下划线或小于256的任何字母或数字字符。字母和数字的定义由PCRE的低值字符表控制，如果进行特定于语言环境的匹配，则可能会有所不同（请参阅pcreapi页中的&amp;ldquo;语言环境支持&amp;rdquo;）。例如，在&amp;ldquo; fr_FR&amp;rdquo;（法语）语言环境中，某些大于128的字符代码用于带重音的字母，并且这些字符由 &lt;code&gt;\w&lt;/code&gt; 匹配。</target>
        </trans-unit>
        <trans-unit id="aaba2403682a17469ecab3c6f2cc502e7be26d2b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;HttpRequestError&lt;/code&gt; will be raised if the server responds with a client error (status code 4xx) or a server error (status code 5xx).</source>
          <target state="translated">一个 &lt;code&gt;HttpRequestError&lt;/code&gt; 将提高如果服务器响应与客户端错误（状态码4XX）或服务器错误（状态码5XX）。</target>
        </trans-unit>
        <trans-unit id="d81d68641d8bf3ceba1aef0cf067b5ab815956a7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ValueError&lt;/code&gt; exception will be raised if the value is not an integer.</source>
          <target state="translated">一个 &lt;code&gt;ValueError&lt;/code&gt; 异常，如果该值不为整数，将引发异常。</target>
        </trans-unit>
        <trans-unit id="49a6495aba25fcc0345009a64738a98f0c760abf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;block&lt;/code&gt; doesn't need an name, in which case &lt;code&gt;nnkEmpty&lt;/code&gt; is used.</source>
          <target state="translated">阿 &lt;code&gt;block&lt;/code&gt; 不需要一个名字，在这种情况下 &lt;code&gt;nnkEmpty&lt;/code&gt; 被使用。</target>
        </trans-unit>
        <trans-unit id="bde4d27b77941b8a2e8d7b668c0d8b482525e40c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;closure&lt;/code&gt; proc var can call ordinary procs of the default Nim calling convention. But not the other way round! A closure is implemented as a &lt;code&gt;tuple[prc, env]&lt;/code&gt;. &lt;code&gt;env&lt;/code&gt; can be nil implying a call without a closure. This means that a call through a closure generates an &lt;code&gt;if&lt;/code&gt; but the interoperability is worth the cost of the &lt;code&gt;if&lt;/code&gt;. Thunk generation would be possible too, but it's slightly more effort to implement.</source>
          <target state="translated">一个 &lt;code&gt;closure&lt;/code&gt; PROC VAR可以调用默认稔调用约定的普通特效。但不是相反！闭包实现为 &lt;code&gt;tuple[prc, env]&lt;/code&gt; 。 &lt;code&gt;env&lt;/code&gt; 可以为nil，表示不带闭包的调用。这意味着通过闭包进行的调用会生成 &lt;code&gt;if&lt;/code&gt; ,但互操作性值得 &lt;code&gt;if&lt;/code&gt; 的代价。大规模生成也是可能的，但是实现起来要付出更多的努力。</target>
        </trans-unit>
        <trans-unit id="46ca6bf4504c12b38f73b70158bd4cc5686ceec6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;continue&lt;/code&gt; statement leads to the immediate next iteration of the surrounding loop construct. It is only allowed within a loop. A continue statement is syntactic sugar for a nested block:</source>
          <target state="translated">一个 &lt;code&gt;continue&lt;/code&gt; 语句导致周围循环结构的立即下一次迭代。仅允许在循环内进行。连续语句是嵌套块的语法糖：</target>
        </trans-unit>
        <trans-unit id="fa532fc8ce7dbe2864f24cd2a27ac73e6fc36afd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;distinct&lt;/code&gt; type is new type derived from a &lt;span id=&quot;base-type_1&quot;&gt;base type&lt;/span&gt; that is incompatible with its base type. In particular, it is an essential property of a distinct type that it &lt;strong&gt;does not&lt;/strong&gt; imply a subtype relation between it and its base type. Explicit type conversions from a distinct type to its base type and vice versa are allowed. See also &lt;code&gt;distinctBase&lt;/code&gt; to get the reverse operation.</source>
          <target state="translated">阿 &lt;code&gt;distinct&lt;/code&gt; 类型是从派生新型&lt;span id=&quot;base-type_1&quot;&gt;碱型&lt;/span&gt;，其与它的基类型不兼容。特别是，它是独特类型的基本属性，&lt;strong&gt;并不&lt;/strong&gt;意味着它与其基本类型之间存在子类型关系。允许从不同类型到基本类型的显式类型转换，反之亦然。另请参见 &lt;code&gt;distinctBase&lt;/code&gt; 以获取相反的操作。</target>
        </trans-unit>
        <trans-unit id="fec0b8e4f99548ff52eae3d0e8ec4be16fcde6a4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;let&lt;/code&gt; statement declares new local and global &lt;span id=&quot;single-assignment_1&quot;&gt;single assignment&lt;/span&gt; variables and binds a value to them. The syntax is the same as that of the &lt;code&gt;var&lt;/code&gt; statement, except that the keyword &lt;code&gt;var&lt;/code&gt; is replaced by the keyword &lt;code&gt;let&lt;/code&gt;. Let variables are not l-values and can thus not be passed to &lt;code&gt;var&lt;/code&gt; parameters nor can their address be taken. They cannot be assigned new values.</source>
          <target state="translated">一个 &lt;code&gt;let&lt;/code&gt; 语句声明新的本地和全局&lt;span id=&quot;single-assignment_1&quot;&gt;单赋值&lt;/span&gt;的变量并绑定一个值给他们。语法与 &lt;code&gt;var&lt;/code&gt; 语句的语法相同，只是关键字 &lt;code&gt;var&lt;/code&gt; 被关键字 &lt;code&gt;let&lt;/code&gt; 代替。设变量不是l值，因此不能传递给 &lt;code&gt;var&lt;/code&gt; 参数，也不能获取其地址。无法为它们分配新值。</target>
        </trans-unit>
        <trans-unit id="8fe78b3a2821fa1451c04e1ee9b03eb161700c9d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;raises&lt;/code&gt; list can also be attached to a proc type. This affects type compatibility:</source>
          <target state="translated">一个 &lt;code&gt;raises&lt;/code&gt; 名单也可以连接到一个PROC类型。这会影响类型兼容性：</target>
        </trans-unit>
        <trans-unit id="c8cb08453579d0f15d45b19ab781ad1eab51f587" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;varargs&lt;/code&gt; parameter is an openarray parameter that additionally allows to pass a variable number of arguments to a procedure. The compiler converts the list of arguments to an array implicitly:</source>
          <target state="translated">甲 &lt;code&gt;varargs&lt;/code&gt; 参数是openarray参数另外允许的参数个数可变传递给程序。编译器将参数列表隐式转换为数组：</target>
        </trans-unit>
        <trans-unit id="9932ed67f0c5e1f713b0339fd155b7567d8b4c9b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;varargs&lt;/code&gt; parameter is like an openarray parameter. However, it is also a means to implement passing a variable number of arguments to a procedure. The compiler converts the list of arguments to an array automatically:</source>
          <target state="translated">甲 &lt;code&gt;varargs&lt;/code&gt; 的参数是像一个openarray参数。但是，这也是一种实现将可变数量的参数传递给过程的方法。编译器自动将参数列表转换为数组：</target>
        </trans-unit>
        <trans-unit id="e982b06375e4d6cb9864cbab229ee93da8102df8" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;$&lt;/em&gt; proc is defined for cstrings that returns a string. Thus to get a nim string from a cstring:</source>
          <target state="translated">一个&lt;em&gt;$&lt;/em&gt; PROC是返回一个字符串cstrings定义。因此，要从cstring获取一个nim字符串：</target>
        </trans-unit>
        <trans-unit id="4924981c6cf86467817a6848ae253feb1dd3d357" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;Source Code Filter&lt;/em&gt; transforms the input character stream to an in-memory output stream before parsing. A filter can be used to provide templating systems or preprocessors.</source>
          <target state="translated">甲&lt;em&gt;源代码筛选&lt;/em&gt;分析之前的输入字符流转换到内存中的输出流。过滤器可用于提供模板系统或预处理器。</target>
        </trans-unit>
        <trans-unit id="787f1149d9267dbcf887509536779010033aad01" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;subex&lt;/em&gt; (&lt;em&gt;Substitution Expression&lt;/em&gt;) represents an advanced string substitution. In contrast to a &lt;span id=&quot;regex_1&quot;&gt;regex&lt;/span&gt; which deals with string analysis, a &lt;em&gt;subex&lt;/em&gt; deals with string synthesis.</source>
          <target state="translated">甲&lt;em&gt;SUBEX&lt;/em&gt;（&lt;em&gt;替换表达式&lt;/em&gt;）表示的高级字符串替换。相反，一个&lt;span id=&quot;regex_1&quot;&gt;正则表达式&lt;/span&gt;，其与串分析，一个涉及&lt;em&gt;SUBEX&lt;/em&gt;与串合成交易。</target>
        </trans-unit>
        <trans-unit id="889eb097f34d2cb2326af79e37dd19352cd4b767" translate="yes" xml:space="preserve">
          <source>A &lt;span id=&quot;checked-runtime-error_1&quot;&gt;checked runtime error&lt;/span&gt; is an error that the implementation detects and reports at runtime. The method for reporting such errors is via &lt;em&gt;raising exceptions&lt;/em&gt; or &lt;em&gt;dying with a fatal error&lt;/em&gt;. However, the implementation provides a means to disable these runtime checks. See the section &lt;a href=&quot;#pragmas&quot;&gt;pragmas&lt;/a&gt; for details.</source>
          <target state="translated">已&lt;span id=&quot;checked-runtime-error_1&quot;&gt;检查的运行时错误&lt;/span&gt;是实现在运行时检测并报告的错误。报告此类错误的方法是通过&lt;em&gt;引发异常&lt;/em&gt;或&lt;em&gt;死于致命错误&lt;/em&gt;。但是，该实现提供了一种禁用这些运行时检查的方法。有关详细信息，请参见部分&lt;a href=&quot;#pragmas&quot;&gt;编译指示&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="31c99118ea561948c45f870ebd2c2cce4b7b646d" translate="yes" xml:space="preserve">
          <source>A &lt;span id=&quot;guard_1&quot;&gt;guard&lt;/span&gt; annotation is introduced to prevent data races.</source>
          <target state="translated">一个&lt;span id=&quot;guard_1&quot;&gt;后卫&lt;/span&gt;注释介绍，以防止数据的比赛。</target>
        </trans-unit>
        <trans-unit id="386e659d1429b589f185720a9d5bf0ba95205db0" translate="yes" xml:space="preserve">
          <source>A &lt;span id=&quot;narrowing-type-conversion_1&quot;&gt;narrowing type conversion&lt;/span&gt; converts a larger to a smaller type (for example &lt;code&gt;int32 -&amp;gt; int16&lt;/code&gt;. A &lt;span id=&quot;widening-type-conversion_1&quot;&gt;widening type conversion&lt;/span&gt; converts a smaller type to a larger type (for example &lt;code&gt;int16 -&amp;gt; int32&lt;/code&gt;). In Nim only widening type conversions are &lt;em&gt;implicit&lt;/em&gt;:</source>
          <target state="translated">甲&lt;span id=&quot;narrowing-type-conversion_1&quot;&gt;变窄类型转换&lt;/span&gt;转换到一个较小的类型（例如较大 &lt;code&gt;int32 -&amp;gt; int16&lt;/code&gt; 甲。&lt;span id=&quot;widening-type-conversion_1&quot;&gt;加宽型转换&lt;/span&gt;器将较小的类型为较大的类型（例如 &lt;code&gt;int16 -&amp;gt; int32&lt;/code&gt; ）在稔仅扩大类型转换。&lt;em&gt;隐式&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="387048b351545e7cdb57e945c46d2fba04806529" translate="yes" xml:space="preserve">
          <source>A &lt;span id=&quot;static-error_1&quot;&gt;static error&lt;/span&gt; is an error that the implementation detects before program execution. Unless explicitly classified, an error is a static error.</source>
          <target state="translated">一个&lt;span id=&quot;static-error_1&quot;&gt;静态的错误&lt;/span&gt;是，执行程序执行前检测到错误。除非明确分类，否则错误是静态错误。</target>
        </trans-unit>
        <trans-unit id="130e98a36d1ad0d5fa779c624d02b3795704ff33" translate="yes" xml:space="preserve">
          <source>A Distinct type allows for the creation of new type that &quot;does not imply a subtype relationship between it and its base type&quot;. You must &lt;strong&gt;explicitly&lt;/strong&gt; define all behaviour for the distinct type. To help with this, both the distinct type and its base type can cast from one type to the other. Examples are provided in the &lt;a href=&quot;manual#types-distinct-type&quot;&gt;manual&lt;/a&gt;.</source>
          <target state="translated">Distinct类型允许创建新类型，该新类型&amp;ldquo;并不意味着它与其基本类型之间存在子类型关系&amp;rdquo;。您必须为不同类型&lt;strong&gt;明确&lt;/strong&gt;定义所有行为。为了解决这个问题，独特类型及其基本类型都可以从一种类型转换为另一种类型。&lt;a href=&quot;manual#types-distinct-type&quot;&gt;手册&lt;/a&gt;中提供了示例。</target>
        </trans-unit>
        <trans-unit id="79b065193cd9e9953658e8235e333843b91d5cf1" translate="yes" xml:space="preserve">
          <source>A Nim &lt;code&gt;string&lt;/code&gt; is implicitly convertible to &lt;code&gt;cstring&lt;/code&gt; for convenience. If a Nim string is passed to a C-style variadic proc, it is implicitly converted to &lt;code&gt;cstring&lt;/code&gt; too:</source>
          <target state="translated">为方便起见，Nim &lt;code&gt;string&lt;/code&gt; 可隐式转换为 &lt;code&gt;cstring&lt;/code&gt; 。如果将Nim字符串传递给C风格的可变参数proc，它也会隐式转换为 &lt;code&gt;cstring&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="69460fedc7d49aa8bfd391ea3c8be3ae26318394" translate="yes" xml:space="preserve">
          <source>A Nim procedure is asynchronous when it includes the &lt;code&gt;{.async.}&lt;/code&gt; pragma. It should always have a &lt;code&gt;Future[T]&lt;/code&gt; return type or not have a return type at all. A &lt;code&gt;Future[void]&lt;/code&gt; return type is assumed by default.</source>
          <target state="translated">当Nim过程包含 &lt;code&gt;{.async.}&lt;/code&gt; 编译指示时，它是异步的。它应该始终具有 &lt;code&gt;Future[T]&lt;/code&gt; 返回类型，或者根本不具有返回类型。默认情况下，假定使用 &lt;code&gt;Future[void]&lt;/code&gt; 返回类型。</target>
        </trans-unit>
        <trans-unit id="0bd52730a119bb22be3969f6811e2133725811be" translate="yes" xml:space="preserve">
          <source>A Nim program specifies a computation that acts on a memory consisting of components called &lt;span id=&quot;locations_1&quot;&gt;locations&lt;/span&gt;. A variable is basically a name for a location. Each variable and location is of a certain &lt;span id=&quot;type_1&quot;&gt;type&lt;/span&gt;. The variable's type is called &lt;span id=&quot;static-type_1&quot;&gt;static type&lt;/span&gt;, the location's type is called &lt;span id=&quot;dynamic-type_1&quot;&gt;dynamic type&lt;/span&gt;. If the static type is not the same as the dynamic type, it is a super-type or subtype of the dynamic type.</source>
          <target state="translated">Nim程序指定一种运算，该运算将作用于由称为&lt;span id=&quot;locations_1&quot;&gt;location&lt;/span&gt;的组件组成的内存中。变量基本上是位置的名称。每个变量和位置都是某种&lt;span id=&quot;type_1&quot;&gt;类型&lt;/span&gt;。变量的类型称为&lt;span id=&quot;static-type_1&quot;&gt;静态类型&lt;/span&gt;，位置的类型称为&lt;span id=&quot;dynamic-type_1&quot;&gt;动态类型&lt;/span&gt;。如果静态类型与动态类型不同，则它是动态类型的超类型或子类型。</target>
        </trans-unit>
        <trans-unit id="4d649a9b73eb1b75df006205a78131f546ab13c9" translate="yes" xml:space="preserve">
          <source>A PEG (Parsing expression grammar) is a simple deterministic grammar, that can be directly used for parsing. The current implementation has been designed as a more powerful replacement for regular expressions. UTF-8 is supported.</source>
          <target state="translated">PEG(Parsing expression grammar)是一种简单的确定性语法,可以直接用于解析。目前的实现已经被设计为更强大的正则表达式的替代品。支持UTF-8。</target>
        </trans-unit>
        <trans-unit id="33b07af826ffc1642e9db6c9aa9ff6e43b9cc68a" translate="yes" xml:space="preserve">
          <source>A application-level error condition. For example, some user input generated an exception. The application will continue to run, but functionality or data was impacted, possibly visible to users.</source>
          <target state="translated">一个应用程序级别的错误条件。例如,一些用户输入产生了一个异常。应用程序将继续运行,但功能或数据受到影响,可能对用户可见。</target>
        </trans-unit>
        <trans-unit id="5d9beef18f6feec8ed926e501f6bc8ef50b29384" translate="yes" xml:space="preserve">
          <source>A application-level fatal condition. FATAL usually means that the application cannot go on and will exit (but this logging event will not do that for you).</source>
          <target state="translated">一个应用程序级别的致命条件。FATAL通常意味着应用程序无法继续运行并将退出(但这个日志事件不会为你做这件事)。</target>
        </trans-unit>
        <trans-unit id="0bc66569c7f749a991c86255655ab99ac30e86d5" translate="yes" xml:space="preserve">
          <source>A backslash followed by a letter is a built-in macro, otherwise it is used for ordinary escaping:</source>
          <target state="translated">字母后面的反斜杠是内置宏,否则用于普通转义。</target>
        </trans-unit>
        <trans-unit id="519b373c181ee8d4be473dddf120c85a8c41428c" translate="yes" xml:space="preserve">
          <source>A block can be left prematurely with a &lt;code&gt;break&lt;/code&gt; statement. The break statement can leave a &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, or a &lt;code&gt;block&lt;/code&gt; statement. It leaves the innermost construct, unless a label of a block is given:</source>
          <target state="translated">可以使用 &lt;code&gt;break&lt;/code&gt; 语句过早地保留一个块。break语句可以保留 &lt;code&gt;while&lt;/code&gt; ， &lt;code&gt;for&lt;/code&gt; 或 &lt;code&gt;block&lt;/code&gt; 语句。除非给出块的标签，否则它将保留最内部的构造：</target>
        </trans-unit>
        <trans-unit id="8018e99c199800e7c1d485e8e8e1d2de44558695" translate="yes" xml:space="preserve">
          <source>A call to an asynchronous procedure usually needs &lt;code&gt;await&lt;/code&gt; to wait for the completion of the &lt;code&gt;Future&lt;/code&gt;.</source>
          <target state="translated">对异步过程的调用通常需要 &lt;code&gt;await&lt;/code&gt; 以等待 &lt;code&gt;Future&lt;/code&gt; 的完成。</target>
        </trans-unit>
        <trans-unit id="6bd1dcf8b598ce13fe780f11e538b4c3679116e3" translate="yes" xml:space="preserve">
          <source>A character is not an Unicode character but a single byte. The reason for this is efficiency: for the overwhelming majority of use-cases, the resulting programs will still handle UTF-8 properly as UTF-8 was specially designed for this. Another reason is that Nim can thus support &lt;code&gt;array[char, int]&lt;/code&gt; or &lt;code&gt;set[char]&lt;/code&gt; efficiently as many algorithms rely on this feature. The &lt;em&gt;Rune&lt;/em&gt; type is used for Unicode characters, it can represent any Unicode character. &lt;code&gt;Rune&lt;/code&gt; is declared in the &lt;a href=&quot;unicode&quot;&gt;unicode module&lt;/a&gt;.</source>
          <target state="translated">字符不是Unicode字符，而是单个字节。原因是效率：对于绝大多数用例，由于UTF-8是为此专门设计的，因此生成的程序仍将正确处理UTF-8。另一个原因是Nim可以有效地支持 &lt;code&gt;array[char, int]&lt;/code&gt; 或 &lt;code&gt;set[char]&lt;/code&gt; 因为许多算法都依赖此功能。的&lt;em&gt;符文&lt;/em&gt;类型用于Unicode字符，它可以代表任何Unicode字符。 &lt;code&gt;Rune&lt;/code&gt; 在&lt;a href=&quot;unicode&quot;&gt;unicode模块中&lt;/a&gt;声明。</target>
        </trans-unit>
        <trans-unit id="27a21ba557cb1102184eb887daf5fb2f0ee516b2" translate="yes" xml:space="preserve">
          <source>A compile-time error will be produced if the supplied type is not generic.</source>
          <target state="translated">如果提供的类型不是通用的,将产生一个编译时错误。</target>
        </trans-unit>
        <trans-unit id="9e63142b740226a78a46d8a1af8bf22743ac95c8" translate="yes" xml:space="preserve">
          <source>A config file was loaded.</source>
          <target state="translated">一个配置文件被加载。</target>
        </trans-unit>
        <trans-unit id="9d676346fde6cb6856b2edfe8fcc862ca9818983" translate="yes" xml:space="preserve">
          <source>A contains element e</source>
          <target state="translated">A包含要素e</target>
        </trans-unit>
        <trans-unit id="cd669926d307684088d5ef478be7b22480b9a5f4" translate="yes" xml:space="preserve">
          <source>A convenience procedure that executes &lt;code&gt;command&lt;/code&gt; with &lt;code&gt;startProcess&lt;/code&gt; and returns its output as a string. WARNING: this function uses poEvalCommand by default for backward compatibility. Make sure to pass options explicitly.</source>
          <target state="translated">一个方便的过程，该过程使用 &lt;code&gt;startProcess&lt;/code&gt; 执行 &lt;code&gt;command&lt;/code&gt; 并以字符串形式返回其输出。警告：默认情况下，此函数使用poEvalCommand以获得向后兼容性。确保明确传递选项。</target>
        </trans-unit>
        <trans-unit id="d5eda57047be93a6d8ede446c939b622a61fcad5" translate="yes" xml:space="preserve">
          <source>A convention is that exceptions should be raised in &lt;em&gt;exceptional&lt;/em&gt; cases: For example, if a file cannot be opened, this should not raise an exception since this is quite common (the file may not exist).</source>
          <target state="translated">约定在&lt;em&gt;特殊&lt;/em&gt;情况下应引发&lt;em&gt;异常&lt;/em&gt;：例如，如果无法打开文件，则不应引发异常，因为这很常见（文件可能不存在）。</target>
        </trans-unit>
        <trans-unit id="9dc4e7e8a36779be1253db430e17a3ece42f97f6" translate="yes" xml:space="preserve">
          <source>A converter can also be explicitly invoked for improved readability. Note that implicit converter chaining is not supported: If there is a converter from type A to type B and from type B to type C the implicit conversion from A to C is not provided.</source>
          <target state="translated">为了提高可读性,也可以显式调用转换器。注意,不支持隐式转换器链。如果有一个从A型到B型和从B型到C型的转换器,则不提供从A到C的隐式转换。</target>
        </trans-unit>
        <trans-unit id="0fabf98da32833f2ac2d72c57027f686f2dbd28b" translate="yes" xml:space="preserve">
          <source>A converter is like an ordinary proc except that it enhances the &quot;implicitly convertible&quot; type relation (see &lt;a href=&quot;#type-relations-convertible-relation&quot;&gt;Convertible relation&lt;/a&gt;):</source>
          <target state="translated">转换器与普通proc相似，除了它增强了&amp;ldquo;隐式可转换&amp;rdquo;类型关系（请参阅&lt;a href=&quot;#type-relations-convertible-relation&quot;&gt;Convertible关系&lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="ff0115af818672bc6f62e11d492d4642e32f4663" translate="yes" xml:space="preserve">
          <source>A converter is similar to a proc.</source>
          <target state="translated">转换器类似于一个程序。</target>
        </trans-unit>
        <trans-unit id="95b68e940e0a6eefa4655d5db413050f4aee06c6" translate="yes" xml:space="preserve">
          <source>A curly expression with commas in it like &lt;code&gt;{x, argA, argB}&lt;/code&gt; could be transformed to &lt;code&gt;format(x, argA, argB, res)&lt;/code&gt; in order to support formatters that do not need to parse a custom language within a custom language but instead prefer to use Nim's existing syntax. This also helps in readability since there is only so much you can cram into single letter DSLs.</source>
          <target state="translated">可以将其中带有逗号的卷曲表达式（如 &lt;code&gt;{x, argA, argB}&lt;/code&gt; 转换为 &lt;code&gt;format(x, argA, argB, res)&lt;/code&gt; ，以支持不需要在自定义语言中解析自定义语言的格式化程序，而更喜欢使用Nim的现有语法。这也有助于提高可读性，因为您只能塞入单字母DSL。</target>
        </trans-unit>
        <trans-unit id="af339bf252ebc6686a22fa957452c6666fabae1d" translate="yes" xml:space="preserve">
          <source>A destructible context is currently only the following:</source>
          <target state="translated">可破坏的上下文目前只有以下几种。</target>
        </trans-unit>
        <trans-unit id="a4828b4e1e76af08cdc61d3da41001844c8e7647" translate="yes" xml:space="preserve">
          <source>A destructor is attached to the type it destructs; expressions of this type can then only be used in &lt;em&gt;destructible contexts&lt;/em&gt; and as parameters:</source>
          <target state="translated">析构函数附加到其析构的类型；然后，这种类型的表达式只能在可&lt;em&gt;破坏的上下文中&lt;/em&gt;用作参数：</target>
        </trans-unit>
        <trans-unit id="5433f8711be01e7d00dc897cddea4967983783a7" translate="yes" xml:space="preserve">
          <source>A destructor must have a single parameter with a concrete type (the name of a generic type is allowed too). The name of the destructor has to be &lt;code&gt;=destroy&lt;/code&gt;.</source>
          <target state="translated">析构函数必须具有一个带有具体类型的参数（也可以使用通用类型的名称）。析构函数的名称必须为 &lt;code&gt;=destroy&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b51be317d37d0d9e5679921ffa2c4f39470a9227" translate="yes" xml:space="preserve">
          <source>A directory can also be a so called &quot;pseudo directory&quot;. They can be used to avoid ambiguity when there are multiple modules with the same path.</source>
          <target state="translated">一个目录也可以是一个所谓的 &quot;伪目录&quot;。当有多个模块的路径相同时,可以用它们来避免歧义。</target>
        </trans-unit>
        <trans-unit id="2010acb176bc59e66e9596fccd16c6be234aa62b" translate="yes" xml:space="preserve">
          <source>A distinct type can be used to model different physical &lt;span id=&quot;units_1&quot;&gt;units&lt;/span&gt; with a numerical base type, for example. The following example models currencies.</source>
          <target state="translated">例如，可以使用不同的类型对具有数字基类型的不同物理&lt;span id=&quot;units_1&quot;&gt;单位&lt;/span&gt;进行建模。以下示例对货币建模。</target>
        </trans-unit>
        <trans-unit id="0dcbf503ecd251b550b20573f306de222e9f6e39" translate="yes" xml:space="preserve">
          <source>A does not contain element e</source>
          <target state="translated">A不包含元素e</target>
        </trans-unit>
        <trans-unit id="7339291827f4b694e439170ba77d07b22a6ba2d9" translate="yes" xml:space="preserve">
          <source>A dot following the hash &lt;code&gt;#.&lt;/code&gt; indicates that the call should use C++'s dot or arrow notation.</source>
          <target state="translated">井号 &lt;code&gt;#.&lt;/code&gt; 之后的点。指示该调用应使用C ++的点或箭头表示法。</target>
        </trans-unit>
        <trans-unit id="91daa2e8d1d787e2cb1cebec501d70a447fbdd47" translate="yes" xml:space="preserve">
          <source>A double quotation mark preceded by a backslash (&quot;) is interpreted as a literal double quotation mark character (&quot;).</source>
          <target state="translated">双引号前的反斜杠(&quot;)被解释为字面的双引号字符(&quot;)。</target>
        </trans-unit>
        <trans-unit id="5b983689cc856655c0945357d3fc5752f335fd52" translate="yes" xml:space="preserve">
          <source>A double-ended queue backed with a ringed seq buffer.</source>
          <target state="translated">一个环形seq缓冲区支持的双端队列。</target>
        </trans-unit>
        <trans-unit id="01ed7c56b187204e313f1f9d97ebfebcc0fecee3" translate="yes" xml:space="preserve">
          <source>A for loop variable.</source>
          <target state="translated">一个for循环变量。</target>
        </trans-unit>
        <trans-unit id="7d654b825945bd5f2a34963e2ce499f362a2a00c" translate="yes" xml:space="preserve">
          <source>A friendlier version of &lt;em&gt;initRational&lt;/em&gt;. Example usage:</source>
          <target state="translated">一个更友好的&lt;em&gt;initRational&lt;/em&gt;版本。用法示例：</target>
        </trans-unit>
        <trans-unit id="d411518da35d7d553e49043b1323d3beb87db97b" translate="yes" xml:space="preserve">
          <source>A generic hash set that remembers insertion order.</source>
          <target state="translated">一个记住插入顺序的通用哈希集。</target>
        </trans-unit>
        <trans-unit id="e82bc7694d12c8d0a1eda93534f23d36363f6058" translate="yes" xml:space="preserve">
          <source>A generic hash set.</source>
          <target state="translated">一个通用的哈希集。</target>
        </trans-unit>
        <trans-unit id="9e98d244bf1a5c7aeeae52fd19acf41b5eb1f418" translate="yes" xml:space="preserve">
          <source>A hash &lt;code&gt;#&lt;/code&gt; symbol is replaced by the first or next argument.</source>
          <target state="translated">井号 &lt;code&gt;#&lt;/code&gt; 符号将替换为第一个或下一个参数。</target>
        </trans-unit>
        <trans-unit id="a53f6ddc26d79601afed6742fbd39fc945dc2d24" translate="yes" xml:space="preserve">
          <source>A helper for wrapping callback-based functions into promises and async procedures</source>
          <target state="translated">用于将基于回调的函数封装到承诺和异步过程中的辅助工具</target>
        </trans-unit>
        <trans-unit id="8f2cac0c1f19b93707af84e96c8e8344199be1d8" translate="yes" xml:space="preserve">
          <source>A higher level &lt;em&gt;ODBC&lt;/em&gt; database wrapper.</source>
          <target state="translated">更高级别的&lt;em&gt;ODBC&lt;/em&gt;数据库包装器。</target>
        </trans-unit>
        <trans-unit id="d7086b8bccfe459c43887557d6fccf6aaa7324be" translate="yes" xml:space="preserve">
          <source>A higher level &lt;span id=&quot;mysql_1&quot;&gt;mySQL&lt;/span&gt; database wrapper. The same interface is implemented for other databases too.</source>
          <target state="translated">更高级别的&lt;span id=&quot;mysql_1&quot;&gt;mySQL&lt;/span&gt;数据库包装器。其他数据库也实现了相同的接口。</target>
        </trans-unit>
        <trans-unit id="7ed449265b711e313a4301b54cee15ef550acdbf" translate="yes" xml:space="preserve">
          <source>A higher level &lt;span id=&quot;postgresql_1&quot;&gt;PostgreSQL&lt;/span&gt; database wrapper. This interface is implemented for other databases also.</source>
          <target state="translated">更高级别的&lt;span id=&quot;postgresql_1&quot;&gt;PostgreSQL&lt;/span&gt;数据库包装器。该接口也为其他数据库实现。</target>
        </trans-unit>
        <trans-unit id="18d9c046b2d8f8fc8c6daccb16db460900a01a66" translate="yes" xml:space="preserve">
          <source>A higher level &lt;span id=&quot;sqlite_1&quot;&gt;SQLite&lt;/span&gt; database wrapper. This interface is implemented for other databases too.</source>
          <target state="translated">更高级别的&lt;span id=&quot;sqlite_1&quot;&gt;SQLite&lt;/span&gt;数据库包装器。该接口也为其他数据库实现。</target>
        </trans-unit>
        <trans-unit id="17cc08bc05f9e3c22bbf4a01b73d4951016af63c" translate="yes" xml:space="preserve">
          <source>A label (used in &lt;code&gt;block&lt;/code&gt; statements).</source>
          <target state="translated">标签（在 &lt;code&gt;block&lt;/code&gt; 语句中使用）。</target>
        </trans-unit>
        <trans-unit id="89265eb4f02e06930cfb5c35dd5f76b04d9c0a16" translate="yes" xml:space="preserve">
          <source>A last tip when writing a macro: if you are not sure the AST you are building looks ok, you may be tempted to use the &lt;code&gt;dumpTree&lt;/code&gt; macro. But you can't use it &lt;em&gt;inside&lt;/em&gt; the macro you are writting/debugging. Instead &lt;code&gt;echo&lt;/code&gt; the string generated by &lt;a href=&quot;macros#treeRepr&quot;&gt;treeRepr&lt;/a&gt;. If at the end of the this example you add &lt;code&gt;echo treeRepr(result)&lt;/code&gt; you should get the same output as using the &lt;code&gt;dumpTree&lt;/code&gt; macro, but of course you can call that at any point of the macro where you might be having troubles.</source>
          <target state="translated">编写宏时的最后一个提示：如果不确定要构建的AST看起来还不错，则可能会想使用 &lt;code&gt;dumpTree&lt;/code&gt; 宏。但是您不能&lt;em&gt;在&lt;/em&gt;要编写/调试的宏中使用它。而是 &lt;code&gt;echo&lt;/code&gt; 显&lt;a href=&quot;macros#treeRepr&quot;&gt;treeRepr&lt;/a&gt;生成的字符串。如果在本示例的最后添加了 &lt;code&gt;echo treeRepr(result)&lt;/code&gt; ，则应该获得与使用 &lt;code&gt;dumpTree&lt;/code&gt; 宏相同的输出，但是当然可以在可能遇到麻烦的宏的任何位置调用它。</target>
        </trans-unit>
        <trans-unit id="e62c0496669da44a5936805a3cdfee1fe957384a" translate="yes" xml:space="preserve">
          <source>A leaf of the AST often corresponds to a terminal symbol in the concrete syntax. Note that the default &lt;code&gt;float&lt;/code&gt; in Nim maps to &lt;code&gt;float64&lt;/code&gt; such that the default AST for a float is &lt;code&gt;nnkFloat64Lit&lt;/code&gt; as below.</source>
          <target state="translated">AST的叶子通常在具体语法中对应于终端符号。请注意，Nim 中的默认 &lt;code&gt;float&lt;/code&gt; 映射到 &lt;code&gt;float64&lt;/code&gt; ，使得浮点数的默认AST为 &lt;code&gt;nnkFloat64Lit&lt;/code&gt; ，如下所示。</target>
        </trans-unit>
        <trans-unit id="af284b25e3830a68d5e3016b0dc1d22187bec97a" translate="yes" xml:space="preserve">
          <source>A local variable shadows another local variable of an outer scope.</source>
          <target state="translated">一个局部变量对外部作用域的另一个局部变量进行了遮挡。</target>
        </trans-unit>
        <trans-unit id="d15ac9d0ba716c535ed2ce2885c3b9d90285db47" translate="yes" xml:space="preserve">
          <source>A macro is a special function that is executed at compile-time. Normally the input for a macro is an abstract syntax tree (AST) of the code that is passed to it. The macro can then do transformations on it and return the transformed AST. The transformed AST is then passed to the compiler as if the macro invocation would have been replaced by its result in the source code. This can be used to implement &lt;span id=&quot;domain-specific-languages_1&quot;&gt;domain specific languages&lt;/span&gt;.</source>
          <target state="translated">宏是在编译时执行的特殊功能。通常，宏的输入是传递给它的代码的抽象语法树（AST）。然后宏可以对其进行转换并返回转换后的AST。然后将转换后的AST传递给编译器，就好像宏调用将被源代码中的结果替换一样。这可以用来实现&lt;span id=&quot;domain-specific-languages_1&quot;&gt;特定领域的语言&lt;/span&gt;。</target>
        </trans-unit>
        <trans-unit id="2320939f622f35d906ef2dffec7b8d388f8158e3" translate="yes" xml:space="preserve">
          <source>A macro that needs to be called &lt;span id=&quot;match_1&quot;&gt;match&lt;/span&gt; can be used to rewrite &lt;code&gt;case&lt;/code&gt; statements in order to implement &lt;span id=&quot;pattern-matching_1&quot;&gt;pattern matching&lt;/span&gt; for certain types. The following example implements a simplistic form of pattern matching for tuples, leveraging the existing equality operator for tuples (as provided in &lt;code&gt;system.==&lt;/code&gt;):</source>
          <target state="translated">可以将需要调用&lt;span id=&quot;match_1&quot;&gt;match的&lt;/span&gt;宏用于重写 &lt;code&gt;case&lt;/code&gt; 语句，以实现某些类型的&lt;span id=&quot;pattern-matching_1&quot;&gt;模式匹配&lt;/span&gt;。以下示例为元组实现了模式匹配的简化形式，利用了元组的现有相等运算符（如 &lt;code&gt;system.==&lt;/code&gt; 所提供）：</target>
        </trans-unit>
        <trans-unit id="c4a6d2ce7ae67ff08002aecf71f9b696f9005b38" translate="yes" xml:space="preserve">
          <source>A macro that takes as its only input parameter an expression of the special type &lt;code&gt;system.ForLoopStmt&lt;/code&gt; can rewrite the entirety of a &lt;code&gt;for&lt;/code&gt; loop:</source>
          <target state="translated">一个将特殊类型 &lt;code&gt;system.ForLoopStmt&lt;/code&gt; 的表达式作为唯一输入参数的宏。ForLoopStmt可以重写整个 &lt;code&gt;for&lt;/code&gt; 循环：</target>
        </trans-unit>
        <trans-unit id="d8df2d80cd89e184b1f75f28697093931c58d398" translate="yes" xml:space="preserve">
          <source>A module alias can be introduced via the &lt;code&gt;as&lt;/code&gt; keyword:</source>
          <target state="translated">可以通过 &lt;code&gt;as&lt;/code&gt; 关键字引入模块别名：</target>
        </trans-unit>
        <trans-unit id="d4afefca445f32ee9a9bac5a6c407d25bf9bc289" translate="yes" xml:space="preserve">
          <source>A module's top-level statements are executed at the start of the program. This can be used to initialize complex data structures for example.</source>
          <target state="translated">一个模块的顶层语句是在程序开始时执行的。例如,这可以用来初始化复杂的数据结构。</target>
        </trans-unit>
        <trans-unit id="a99c0a025e79be3ef687fadc0cc6086e9682f6fb" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;main&lt;/code&gt; async procedure must be declared to allow the use of the &lt;code&gt;await&lt;/code&gt; keyword. The connection will complete asynchronously and the client will be connected after the &lt;code&gt;await ftp.connect()&lt;/code&gt; call.</source>
          <target state="translated">必须声明一个新的 &lt;code&gt;main&lt;/code&gt; 异步过程以允许使用 &lt;code&gt;await&lt;/code&gt; 关键字。连接将异步完成，并且将在 &lt;code&gt;await ftp.connect()&lt;/code&gt; 调用之后连接客户端。</target>
        </trans-unit>
        <trans-unit id="b4f09c089b0b64dd84f87655d31d40b67c7f610c" translate="yes" xml:space="preserve">
          <source>A new entry will be added to the index using the format &lt;code&gt;term&amp;lt;tab&amp;gt;file#id&lt;/code&gt;. The file part will come from the &lt;em&gt;htmlFile&lt;/em&gt; parameter.</source>
          <target state="translated">将使用 &lt;code&gt;term&amp;lt;tab&amp;gt;file#id&lt;/code&gt; 格式将新条目添加到索引。文件部分将来自&lt;em&gt;htmlFile&lt;/em&gt;参数。</target>
        </trans-unit>
        <trans-unit id="fc67102da94ccd07b62bc7ef2e58c87c378eee76" translate="yes" xml:space="preserve">
          <source>A non-error message that may indicate a potential problem rising or impacted performance.</source>
          <target state="translated">可能表明潜在问题上升或影响性能的非错误信息。</target>
        </trans-unit>
        <trans-unit id="911a5ad83db128f4812253b45faa46d98027ca72" translate="yes" xml:space="preserve">
          <source>A parameter &lt;code&gt;p&lt;/code&gt; in a template is even substituted in the expression &lt;code&gt;x.p&lt;/code&gt;. Thus template arguments can be used as field names and a global symbol can be shadowed by the same argument name even when fully qualified:</source>
          <target state="translated">模板中的参数 &lt;code&gt;p&lt;/code&gt; 甚至被替换为表达式 &lt;code&gt;x.p&lt;/code&gt; 。因此，模板参数可以用作字段名称，并且即使在完全限定的情况下，全局符号也可以由相同的参数名称覆盖：</target>
        </trans-unit>
        <trans-unit id="b19cf459adbb632e3345bc4ce82a5563aa028fe2" translate="yes" xml:space="preserve">
          <source>A parameter may be declared with a default value which is used if the caller does not provide a value for the argument.</source>
          <target state="translated">一个参数可以声明一个默认值,如果调用者没有为参数提供一个值,那么这个值就会被使用。</target>
        </trans-unit>
        <trans-unit id="cd0e5a46bea204df5866abc8071f4ce20c751ed1" translate="yes" xml:space="preserve">
          <source>A parameter of type &lt;code&gt;untyped&lt;/code&gt; always matches any argument (as long as there is any argument passed to it).</source>
          <target state="translated">类型为 &lt;code&gt;untyped&lt;/code&gt; 的参数始终匹配任何参数（只要传递了任何参数）。</target>
        </trans-unit>
        <trans-unit id="dbc7adf040bff90855d92e494801c3ab8308d57e" translate="yes" xml:space="preserve">
          <source>A pattern expression can be bound to a pattern parameter via the &lt;code&gt;expr{param}&lt;/code&gt; notation:</source>
          <target state="translated">可以通过 &lt;code&gt;expr{param}&lt;/code&gt; 表示法将模式表达式绑定到模式参数：</target>
        </trans-unit>
        <trans-unit id="84dbef3c0526b967ebfd2aa664f1b6a0e87d7f54" translate="yes" xml:space="preserve">
          <source>A possible common use case for &lt;em&gt;rsplit&lt;/em&gt; is path manipulation, particularly on systems that don't use a common delimiter.</source>
          <target state="translated">&lt;em&gt;rsplit&lt;/em&gt;可能的常见用例是路径操纵，尤其是在不使用公共定界符的系统上。</target>
        </trans-unit>
        <trans-unit id="468ffea579d79393dcb2eb8fd23d5f70574b0406" translate="yes" xml:space="preserve">
          <source>A proc can be marked with the &lt;code&gt;asmNoStackFrame&lt;/code&gt; pragma to tell the compiler it should not generate a stack frame for the proc. There are also no exit statements like &lt;code&gt;return result;&lt;/code&gt; generated and the generated C function is declared as &lt;code&gt;__declspec(naked)&lt;/code&gt; or &lt;code&gt;__attribute__((naked))&lt;/code&gt; (depending on the used C compiler).</source>
          <target state="translated">可以使用 &lt;code&gt;asmNoStackFrame&lt;/code&gt; 编译指示标记proc，以告知编译器不应为proc生成堆栈帧。也没有退出语句，例如 &lt;code&gt;return result;&lt;/code&gt; 生成并且生成的C函数声明为 &lt;code&gt;__declspec(naked)&lt;/code&gt; 或 &lt;code&gt;__attribute__((naked))&lt;/code&gt; （取决于所使用的C编译器）。</target>
        </trans-unit>
        <trans-unit id="451fbc26f5ae1ee9316fb78b0e6ca76aa2f9e794" translate="yes" xml:space="preserve">
          <source>A proc that is executed as a new thread of execution should be marked by the &lt;code&gt;thread&lt;/code&gt; pragma for reasons of readability. The compiler checks for violations of the &lt;span id=&quot;no-heap-sharing-restriction_1&quot;&gt;no heap sharing restriction&lt;/span&gt;: This restriction implies that it is invalid to construct a data structure that consists of memory allocated from different (thread local) heaps.</source>
          <target state="translated">出于可读性考虑，应将执行为新执行线程的proc标记为 &lt;code&gt;thread&lt;/code&gt; 编译指示。编译器检查是否违反了&lt;span id=&quot;no-heap-sharing-restriction_1&quot;&gt;无堆共享限制&lt;/span&gt;：该限制意味着构造由不同（线程本地）堆分配的内存组成的数据结构是无效的。</target>
        </trans-unit>
        <trans-unit id="c8f7a283eb6acfde98dfa18ad4771346a71dcb69" translate="yes" xml:space="preserve">
          <source>A proc, converter or iterator may return a &lt;code&gt;var&lt;/code&gt; type which means that the returned value is an l-value and can be modified by the caller:</source>
          <target state="translated">proc，converter或iterator可能返回 &lt;code&gt;var&lt;/code&gt; 类型，这意味着返回的值是l值，并且可以由调用方修改：</target>
        </trans-unit>
        <trans-unit id="4ba9d6d1f4765955e60cabd2afda1cfb0cacfe70" translate="yes" xml:space="preserve">
          <source>A procedural type is a (somewhat abstract) pointer to a procedure. &lt;code&gt;nil&lt;/code&gt; is an allowed value for a variable of a procedural type. Nim uses procedural types to achieve &lt;span id=&quot;functional_1&quot;&gt;functional&lt;/span&gt; programming techniques.</source>
          <target state="translated">过程类型是指向过程的（有点抽象）指针。 &lt;code&gt;nil&lt;/code&gt; 是过程类型变量的允许值。Nim使用过程类型来实现&lt;span id=&quot;functional_1&quot;&gt;功能&lt;/span&gt;编程技术。</target>
        </trans-unit>
        <trans-unit id="dbca622df4cb9e116b8115ae0a141864eed44cd7" translate="yes" xml:space="preserve">
          <source>A procedural type is internally a pointer to a procedure. &lt;code&gt;nil&lt;/code&gt; is an allowed value for variables of a procedural type. Nim uses procedural types to achieve &lt;span id=&quot;functional_1&quot;&gt;functional&lt;/span&gt; programming techniques.</source>
          <target state="translated">过程类型在内部是指向过程的指针。 &lt;code&gt;nil&lt;/code&gt; 是过程类型变量的允许值。Nim使用过程类型来实现&lt;span id=&quot;functional_1&quot;&gt;功能&lt;/span&gt;编程技术。</target>
        </trans-unit>
        <trans-unit id="bf770f6e5979c1f778e9340dd0cdb848252fa2f0" translate="yes" xml:space="preserve">
          <source>A procedure may call itself recursively.</source>
          <target state="translated">一个过程可以递归地调用自己。</target>
        </trans-unit>
        <trans-unit id="198d46da979417aa29b92d0cafdd5b26b6aa26bb" translate="yes" xml:space="preserve">
          <source>A procedure that returns a value has an implicit &lt;code&gt;result&lt;/code&gt; variable declared that represents the return value. A &lt;code&gt;return&lt;/code&gt; statement with no expression is a shorthand for &lt;code&gt;return result&lt;/code&gt;. The &lt;code&gt;result&lt;/code&gt; value is always returned automatically at the end of a procedure if there is no &lt;code&gt;return&lt;/code&gt; statement at the exit.</source>
          <target state="translated">返回值的过程具有声明的隐式 &lt;code&gt;result&lt;/code&gt; 变量，该变量表示返回值。一 &lt;code&gt;return&lt;/code&gt; 不带表达式语句是一种简写 &lt;code&gt;return result&lt;/code&gt; 。该 &lt;code&gt;result&lt;/code&gt; 值总是自动在程序结束时，如果没有返回 &lt;code&gt;return&lt;/code&gt; 出口处的语句。</target>
        </trans-unit>
        <trans-unit id="4479e2a3631b65d0dd4c690b9db368a8f3b1652a" translate="yes" xml:space="preserve">
          <source>A project can also have a project specific configuration file named &lt;code&gt;$project.nim.cfg&lt;/code&gt; that resides in the same directory as &lt;code&gt;$project.nim&lt;/code&gt;. This file can be skipped with the &lt;code&gt;--skipProjCfg&lt;/code&gt; command line option.</source>
          <target state="translated">一个项目也可以有一个名为项目的具体配置文件 &lt;code&gt;$project.nim.cfg&lt;/code&gt; 驻留在同一目录 &lt;code&gt;$project.nim&lt;/code&gt; 。可以使用 &lt;code&gt;--skipProjCfg&lt;/code&gt; 命令行选项跳过此文件。</target>
        </trans-unit>
        <trans-unit id="e60afd1721ef96b7c6739e2759b02cb38c2c2d8c" translate="yes" xml:space="preserve">
          <source>A proxy can be specified as a param to any of the procedures defined in this module. To do this, use the &lt;code&gt;newProxy&lt;/code&gt; constructor. Unfortunately, only basic authentication is supported at the moment.</source>
          <target state="translated">可以将代理指定为该模块中定义的任何过程的参数。为此，请使用 &lt;code&gt;newProxy&lt;/code&gt; 构造函数。不幸的是，目前仅支持基本身份验证。</target>
        </trans-unit>
        <trans-unit id="eac1d47b4a0730fb9551845dd67bf5ea00259685" translate="yes" xml:space="preserve">
          <source>A regular expression is a pattern that is matched against a subject string from left to right. Most characters stand for themselves in a pattern, and match the corresponding characters in the subject. As a trivial example, the pattern:</source>
          <target state="translated">正则表达式是一种从左到右与主题字符串匹配的模式。大多数字符在模式中代表自己,并与主题中的相应字符相匹配。举个简单的例子,模式。</target>
        </trans-unit>
        <trans-unit id="5df947512d73d9e3cb7375e44d4a39fd584e964d" translate="yes" xml:space="preserve">
          <source>A routine &lt;code&gt;p&lt;/code&gt; matches better than a routine &lt;code&gt;q&lt;/code&gt; if the following algorithm returns true:</source>
          <target state="translated">如果以下算法返回true，则例程 &lt;code&gt;p&lt;/code&gt; 与例程 &lt;code&gt;q&lt;/code&gt; 的匹配更好：</target>
        </trans-unit>
        <trans-unit id="fdff97566890f772e04c8438a24bb2cbb00af4bb" translate="yes" xml:space="preserve">
          <source>A second use of backslash provides a way of encoding non-printing characters in patterns in a visible manner. There is no restriction on the appearance of non-printing characters, apart from the binary zero that terminates a pattern, but when a pattern is being prepared by text editing, it is usually easier to use one of the following escape sequences than the binary character it represents::</source>
          <target state="translated">反斜杠的第二种用法提供了一种以可见的方式对模式中的非打印字符进行编码的方法。除了终止图案的二进制零之外,对非打印字符的出现没有任何限制,但当通过文本编辑准备一个图案时,通常使用以下转义序列之一比使用它所代表的二进制字符更容易:。</target>
        </trans-unit>
        <trans-unit id="3eac564020abe821a021c684a0c7e182c5615b2f" translate="yes" xml:space="preserve">
          <source>A section you should use to mark &lt;span id=&quot;runnable-example_1&quot;&gt;runnable example&lt;/span&gt; code with.</source>
          <target state="translated">您应该用来标记&lt;span id=&quot;runnable-example_1&quot;&gt;可运行示例&lt;/span&gt;代码的部分。</target>
        </trans-unit>
        <trans-unit id="d3b57f32de0396cba5ad9e9d00b3af349a475164" translate="yes" xml:space="preserve">
          <source>A sequence may be passed to a parameter that is of type &lt;em&gt;open array&lt;/em&gt;.</source>
          <target state="translated">可以将序列传递给&lt;em&gt;open array&lt;/em&gt;类型的参数。</target>
        </trans-unit>
        <trans-unit id="42f4d3d39137f32b8ca5b909c4ff4309a61d6eac" translate="yes" xml:space="preserve">
          <source>A sequence may be passed to an openarray parameter.</source>
          <target state="translated">序列可以传递给openarray参数。</target>
        </trans-unit>
        <trans-unit id="e9939043c42e4aaaff588930f28e3fb87a4c1d18" translate="yes" xml:space="preserve">
          <source>A set with all the possible characters.</source>
          <target state="translated">一个包含所有可能的字符的集合。</target>
        </trans-unit>
        <trans-unit id="13fa5f0ea96be473acaa7e27bc838b91426d27e9" translate="yes" xml:space="preserve">
          <source>A shared GC'ed heap might be provided.</source>
          <target state="translated">可以提供一个共享的GC'ed堆。</target>
        </trans-unit>
        <trans-unit id="af38f1c5146159966de284e8a35e5d86d3ab12b9" translate="yes" xml:space="preserve">
          <source>A shorthand for:</source>
          <target state="translated">简称:</target>
        </trans-unit>
        <trans-unit id="dac4b4b7dce5d63bf65005785b5b8b3dd2313f8a" translate="yes" xml:space="preserve">
          <source>A similar thing happens with C code invoking Nim code which returns a &lt;code&gt;cstring&lt;/code&gt;. Consider the following proc:</source>
          <target state="translated">C代码调用Nim代码返回 &lt;code&gt;cstring&lt;/code&gt; 时,也会发生类似的情况。考虑以下过程：</target>
        </trans-unit>
        <trans-unit id="a48f6996b6131883f1b9650bc68f70d8d02303fe" translate="yes" xml:space="preserve">
          <source>A simple XML tree. More efficient and simpler than the DOM.</source>
          <target state="translated">一个简单的XML树。比DOM更高效、更简单。</target>
        </trans-unit>
        <trans-unit id="b881695a1cfe6f9170c0ac327d2994cb87b8beb2" translate="yes" xml:space="preserve">
          <source>A single &lt;code&gt;&quot;*&quot;&lt;/code&gt; can be used for globbing.</source>
          <target state="translated">单个 &lt;code&gt;&quot;*&quot;&lt;/code&gt; 可用于通配符。</target>
        </trans-unit>
        <trans-unit id="17eb06b5b98ef723497f736d4beb2106d493fd2b" translate="yes" xml:space="preserve">
          <source>A static statement/expression can be used to enforce compile time evaluation explicitly. Enforced compile time evaluation can even evaluate code that has side effects:</source>
          <target state="translated">静态声明/表达式可以用来显式地执行编译时评估。强制编译时评估甚至可以评估有副作用的代码。</target>
        </trans-unit>
        <trans-unit id="793061e8f68073a7cc2b6e8e7cb7430e9cb435af" translate="yes" xml:space="preserve">
          <source>A strict or proper subset &lt;em&gt;s&lt;/em&gt; has all of its members in &lt;em&gt;t&lt;/em&gt; but &lt;em&gt;t&lt;/em&gt; has more elements than &lt;em&gt;s&lt;/em&gt;. Example:</source>
          <target state="translated">严格或适当的子集&lt;em&gt;s的&lt;/em&gt;所有成员都在&lt;em&gt;t中，&lt;/em&gt;但&lt;em&gt;t的&lt;/em&gt;元素比&lt;em&gt;s多&lt;/em&gt;。例：</target>
        </trans-unit>
        <trans-unit id="692f4550479e6001b1a436a04309e4819905d924" translate="yes" xml:space="preserve">
          <source>A string surrounded by double quotation marks (&quot;string&quot;) is interpreted as a single argument, regardless of white space contained within. A quoted string can be embedded in an argument.</source>
          <target state="translated">由双引号(&quot;string&quot;)包围的字符串被解释为一个单一的参数,而不考虑其中包含的空白。引用的字符串可以嵌入一个参数中。</target>
        </trans-unit>
        <trans-unit id="ebec3b61b900cc32aa099451f2c6e12dd07c334c" translate="yes" xml:space="preserve">
          <source>A string variable is initialized with the empty string &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">字符串变量使用空字符串 &lt;code&gt;&quot;&quot;&lt;/code&gt; 初始化。</target>
        </trans-unit>
        <trans-unit id="c3a00e56e1710bd679d0173c57dab6fbeebbe31b" translate="yes" xml:space="preserve">
          <source>A subrange type has the same size as its base type (&lt;code&gt;int&lt;/code&gt; in the Subrange example).</source>
          <target state="translated">子范围类型与其基本类型的大小相同（子范围示例中的 &lt;code&gt;int&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7a08933979326f8850950a1173db1b99805f1785" translate="yes" xml:space="preserve">
          <source>A subrange type is a range of values from an integer or enumeration type (the base type). Example:</source>
          <target state="translated">子范围类型是指从整数或枚举类型(基础类型)中提取的值的范围。例子:&quot;子范围 &quot;是指从整数或枚举类型(基类型)中提取的数值范围。</target>
        </trans-unit>
        <trans-unit id="5216761dae1ae277a963814830873f1da9e08d5b" translate="yes" xml:space="preserve">
          <source>A subrange type is a range of values from an ordinal or floating point type (the base type). To define a subrange type, one must specify it's limiting values: the lowest and highest value of the type:</source>
          <target state="translated">子范围类型是指一个序数或浮点类型(基本类型)的值范围。要定义一个子范围类型,必须指定它的极限值:该类型的最低值和最高值。</target>
        </trans-unit>
        <trans-unit id="05319ab331bb8be9fb80a1ea2da5bff936f37a01" translate="yes" xml:space="preserve">
          <source>A subset &lt;em&gt;s&lt;/em&gt; has all of its members in &lt;em&gt;t&lt;/em&gt; and &lt;em&gt;t&lt;/em&gt; doesn't necessarily have more members than &lt;em&gt;s&lt;/em&gt;. That is, &lt;em&gt;s&lt;/em&gt; can be equal to &lt;em&gt;t&lt;/em&gt;. Example:</source>
          <target state="translated">子集&lt;em&gt;s的&lt;/em&gt;所有成员都在&lt;em&gt;t中，&lt;/em&gt;而&lt;em&gt;t的&lt;/em&gt;成员不必多于&lt;em&gt;s&lt;/em&gt;。也就是说，&lt;em&gt;s&lt;/em&gt;可以等于&lt;em&gt;t&lt;/em&gt;。例：</target>
        </trans-unit>
        <trans-unit id="23fcaa56fd8e693a2e943e96baf6a166ee24925f" translate="yes" xml:space="preserve">
          <source>A subtle issue with procedural types is that the calling convention of the procedure influences the type compatibility: procedural types are only compatible if they have the same calling convention. As a special extension, a procedure of the calling convention &lt;code&gt;nimcall&lt;/code&gt; can be passed to a parameter that expects a proc of the calling convention &lt;code&gt;closure&lt;/code&gt;.</source>
          <target state="translated">过程类型的一个细微问题是过程的调用约定会影响类型兼容性：过程类型只有在具有相同的调用约定时才兼容。作为特殊扩展，可以将调用约定 &lt;code&gt;nimcall&lt;/code&gt; 的过程传递给期望调用约定 &lt;code&gt;closure&lt;/code&gt; proc的参数。</target>
        </trans-unit>
        <trans-unit id="33ba9ca12af44d34318811768b34fc09edc238c4" translate="yes" xml:space="preserve">
          <source>A subtle issue with procedural types is that the calling convention of the procedure influences the type compatibility: procedural types are only compatible if they have the same calling convention. The different calling conventions are listed in the &lt;a href=&quot;manual#types-procedural-type&quot;&gt;manual&lt;/a&gt;.</source>
          <target state="translated">过程类型的一个细微问题是过程的调用约定会影响类型兼容性：过程类型只有在具有相同的调用约定时才兼容。&lt;a href=&quot;manual#types-procedural-type&quot;&gt;手册&lt;/a&gt;中列出了不同的调用约定。</target>
        </trans-unit>
        <trans-unit id="a98d0d55b4f56cd1973186508a85d670c67f313d" translate="yes" xml:space="preserve">
          <source>A symbol can be forced to be open by a &lt;span id=&quot;mixin_1&quot;&gt;mixin&lt;/span&gt; declaration:</source>
          <target state="translated">可以通过&lt;span id=&quot;mixin_1&quot;&gt;mixin&lt;/span&gt;声明强制打开符号：</target>
        </trans-unit>
        <trans-unit id="0462b1952d8449154ce73caf7ef4db9422926829" translate="yes" xml:space="preserve">
          <source>A symbol of a module &lt;em&gt;can&lt;/em&gt; be &lt;em&gt;qualified&lt;/em&gt; with the &lt;code&gt;module.symbol&lt;/code&gt; syntax. And if a symbol is ambiguous, it &lt;em&gt;must&lt;/em&gt; be qualified. A symbol is ambiguous if it is defined in two (or more) different modules and both modules are imported by a third one:</source>
          <target state="translated">&lt;em&gt;可以&lt;/em&gt;使用 &lt;code&gt;module.symbol&lt;/code&gt; 语法来&lt;em&gt;限定&lt;/em&gt;模块的符号。如果符号不明确，则&lt;em&gt;必须&lt;/em&gt;将其限定。如果符号在两个（或多个）不同的模块中定义并且两个模块均由第三个模块导入，则该符号是不明确的：&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b3a7ad38688e4496bf760973d6609aeb8d3bfad8" translate="yes" xml:space="preserve">
          <source>A symbol which is a &lt;code&gt;let&lt;/code&gt; variable.</source>
          <target state="translated">一个符号，它是一个 &lt;code&gt;let&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="25afae3a203b27eb5151fb8ba040656c33e3555a" translate="yes" xml:space="preserve">
          <source>A symbol which is a constant.</source>
          <target state="translated">一个符号,它是一个常数。</target>
        </trans-unit>
        <trans-unit id="18336a58e1597be288809ec54b26b76e902b5f18" translate="yes" xml:space="preserve">
          <source>A symbol which is a converter.</source>
          <target state="translated">一个符号,它是一个转换器。</target>
        </trans-unit>
        <trans-unit id="34e5a133463d35676b1ce7b0d26dcb4084186353" translate="yes" xml:space="preserve">
          <source>A symbol which is a field in a tuple or an object.</source>
          <target state="translated">一个符号,它是元组或对象中的一个字段。</target>
        </trans-unit>
        <trans-unit id="dbc7ff0193694a8a6df3edaa4feafaf08a548d9c" translate="yes" xml:space="preserve">
          <source>A symbol which is a field in an enumeration.</source>
          <target state="translated">符号是枚举中的一个字段。</target>
        </trans-unit>
        <trans-unit id="b0f4c02b65e3aca97fa198aef1b1d7f8f50540e1" translate="yes" xml:space="preserve">
          <source>A symbol which is a generic parameter.</source>
          <target state="translated">符号是一个通用参数。</target>
        </trans-unit>
        <trans-unit id="cee1e54f067d3a3df195ebd26b86fefccf9d512a" translate="yes" xml:space="preserve">
          <source>A symbol which is a macro.</source>
          <target state="translated">一个符号,它是一个宏。</target>
        </trans-unit>
        <trans-unit id="8ba65c84aa50b6b4fa8d3cfd3055d6bba8e59df2" translate="yes" xml:space="preserve">
          <source>A symbol which is a method.</source>
          <target state="translated">一个符号,它是一种方法。</target>
        </trans-unit>
        <trans-unit id="397a59c937f508b55f4f508768e9f30b05e604a7" translate="yes" xml:space="preserve">
          <source>A symbol which is a module.</source>
          <target state="translated">一个符号,它是一个模块。</target>
        </trans-unit>
        <trans-unit id="2ebe7a11b22366113570683c1b68d2ed707218ec" translate="yes" xml:space="preserve">
          <source>A symbol which is a parameter.</source>
          <target state="translated">作为参数的符号。</target>
        </trans-unit>
        <trans-unit id="28496412faf0d454dab9dc1a6af576954c0a1ed5" translate="yes" xml:space="preserve">
          <source>A symbol which is a proc.</source>
          <target state="translated">一个符号,它是一个程序。</target>
        </trans-unit>
        <trans-unit id="b83a50e7c38bef4fa30f012bba6b90bc90afc9ea" translate="yes" xml:space="preserve">
          <source>A symbol which is a template.</source>
          <target state="translated">一个符号,它是一个模板。</target>
        </trans-unit>
        <trans-unit id="3462dea1dd2d1f68df6439bcca6ca7bca98f2daf" translate="yes" xml:space="preserve">
          <source>A symbol which is a type.</source>
          <target state="translated">是一种类型的符号。</target>
        </trans-unit>
        <trans-unit id="2a1357b126b87914b1b6f8a549043e8db1b4ede2" translate="yes" xml:space="preserve">
          <source>A symbol which is a variable.</source>
          <target state="translated">符号是一个变量。</target>
        </trans-unit>
        <trans-unit id="2d0634ee6e934140b8250f79b8ba8901843ddbb9" translate="yes" xml:space="preserve">
          <source>A symbol which is an iterator.</source>
          <target state="translated">是一个迭代器的符号。</target>
        </trans-unit>
        <trans-unit id="4e393c2bf071d79fe321a01e0a6eea1010d9f40a" translate="yes" xml:space="preserve">
          <source>A system call for device-specific input/output operations and other operations which cannot be expressed by regular system calls</source>
          <target state="translated">系统调用,用于特定设备的输入/输出操作,以及其他不能用常规系统调用表达的操作。</target>
        </trans-unit>
        <trans-unit id="fc9ce8dd56e57484f7771a0858bc6ea64b79d22b" translate="yes" xml:space="preserve">
          <source>A table constructor is syntactic sugar for an array constructor:</source>
          <target state="translated">表构造函数是数组构造函数的语法糖。</target>
        </trans-unit>
        <trans-unit id="4a7a5f8021ef6500926b1cb58e60a0f63620d3dd" translate="yes" xml:space="preserve">
          <source>A table literal can be put into a &lt;code&gt;const&lt;/code&gt; section and the compiler can easily put it into the executable's data section just like it can for arrays and the generated data section requires a minimal amount of memory.</source>
          <target state="translated">可以将表文字放入 &lt;code&gt;const&lt;/code&gt; 节中，并且编译器可以轻松地将其放入可执行文件的数据节中，就像对数组一样，并且生成的数据节所需的内存最少。</target>
        </trans-unit>
        <trans-unit id="cfef19ba2df017b1840fca787af14959a3b9fbf8" translate="yes" xml:space="preserve">
          <source>A tag has to be a type name. A &lt;code&gt;tags&lt;/code&gt; list - like a &lt;code&gt;raises&lt;/code&gt; list - can also be attached to a proc type. This affects type compatibility.</source>
          <target state="translated">标签必须是类型名称。一个 &lt;code&gt;tags&lt;/code&gt; 列表-就像一个 &lt;code&gt;raises&lt;/code&gt; 名单-也可以连接到一个PROC类型。这会影响类型兼容性。</target>
        </trans-unit>
        <trans-unit id="c7c12a1bbcf06851adacdd13e78109f4548a353d" translate="yes" xml:space="preserve">
          <source>A template is a &lt;span id=&quot;hygienic_1&quot;&gt;hygienic&lt;/span&gt; macro and so opens a new scope. Most symbols are bound from the definition scope of the template:</source>
          <target state="translated">模板是一个&lt;span id=&quot;hygienic_1&quot;&gt;卫生&lt;/span&gt;宏，因此打开了一个新的作用域。大多数符号受模板定义范围的约束：</target>
        </trans-unit>
        <trans-unit id="3d0909aebdac7146ab483112e0cffc46ee0650d8" translate="yes" xml:space="preserve">
          <source>A template is a simple form of a macro: It is a simple substitution mechanism that operates on Nim's abstract syntax trees. It is processed in the semantic pass of the compiler.</source>
          <target state="translated">模板是宏的一种简单形式,它是一种简单的替换机制,在Nim的抽象语法树上运行。它是一种简单的替换机制,在Nim的抽象语法树上运行。它在编译器的语义通道中被处理。</target>
        </trans-unit>
        <trans-unit id="4957f2f98151d72020ad997ae5b0177dbfe8bd70" translate="yes" xml:space="preserve">
          <source>A template where every parameter is &lt;code&gt;untyped&lt;/code&gt; is called an &lt;span id=&quot;immediate_1&quot;&gt;immediate&lt;/span&gt; template. For historical reasons templates can be explicitly annotated with an &lt;code&gt;immediate&lt;/code&gt; pragma and then these templates do not take part in overloading resolution and the parameters' types are &lt;em&gt;ignored&lt;/em&gt; by the compiler. Explicit immediate templates are now deprecated.</source>
          <target state="translated">每个参数都没有 &lt;code&gt;untyped&lt;/code&gt; 的模板称为&lt;span id=&quot;immediate_1&quot;&gt;立即&lt;/span&gt;模板。由于历史原因，可以使用 &lt;code&gt;immediate&lt;/code&gt; 编译指示显式地注释模板，然后这些模板不参与重载分辨率，并且编译器将&lt;em&gt;忽略&lt;/em&gt;参数的类型。显式立即模板现已弃用。</target>
        </trans-unit>
        <trans-unit id="2c5c46bd6cd44a46ae88e10ca57070a21a6c5dbc" translate="yes" xml:space="preserve">
          <source>A test suite is a series of one or more related tests sharing a common fixture (&lt;code&gt;setup&lt;/code&gt;, &lt;code&gt;teardown&lt;/code&gt;). The fixture is executed for EACH test.</source>
          <target state="translated">一个测试套件是一系列的一个或多个相关测试，它们共享一个通用的夹具（ &lt;code&gt;setup&lt;/code&gt; ， &lt;code&gt;teardown&lt;/code&gt; ）。执行夹具以进行EACH测试。</target>
        </trans-unit>
        <trans-unit id="31bf8aebbb82c9b930fd2c075ab23a6c84bd7bab" translate="yes" xml:space="preserve">
          <source>A thread proc is passed to &lt;code&gt;createThread&lt;/code&gt; or &lt;code&gt;spawn&lt;/code&gt; and invoked indirectly; so the &lt;code&gt;thread&lt;/code&gt; pragma implies &lt;code&gt;procvar&lt;/code&gt;.</source>
          <target state="translated">线程proc被传递给 &lt;code&gt;createThread&lt;/code&gt; 或 &lt;code&gt;spawn&lt;/code&gt; 并间接调用；因此 &lt;code&gt;thread&lt;/code&gt; &lt;code&gt;procvar&lt;/code&gt; 注意味着procvar。</target>
        </trans-unit>
        <trans-unit id="41bb5d8b499e01e5a1190386e45f8f1ab3dfd432" translate="yes" xml:space="preserve">
          <source>A thunk would need to call 'returnsDefaultCC[i]' somehow and that would require an &lt;em&gt;additional&lt;/em&gt; closure generation... Ok, not really, but it requires to pass the function to call. So we'd end up with 2 indirect calls instead of one. Another much more severe problem which this solution is that it's not GC-safe to pass a proc pointer around via a generic &lt;code&gt;ref&lt;/code&gt; type.</source>
          <target state="translated">一个笨拙的人将需要以某种方式调用&amp;ldquo; returnsDefaultCC [i]&amp;rdquo;，这将需要&lt;em&gt;额外的&lt;/em&gt;闭包生成...好的，不是真的，但是它需要传递该函数以进行调用。因此，我们最终将进行两次间接调用，而不是一次。该解决方案的另一个更为严重的问题是，通过通用的 &lt;code&gt;ref&lt;/code&gt; 类型传递proc指针并不安全。</target>
        </trans-unit>
        <trans-unit id="a71df16ade8aee765ef43a13e09747416cdfc482" translate="yes" xml:space="preserve">
          <source>A timeout can be specified in milliseconds, if data is not received within the specified time an ETimeout exception will be raised.</source>
          <target state="translated">可以以毫秒为单位指定超时时间,如果在指定时间内没有收到数据,将引发ETimeout异常。</target>
        </trans-unit>
        <trans-unit id="9b5284b25f36831bd8cd3b0848696b52af7ef955" translate="yes" xml:space="preserve">
          <source>A timeout may be specified in milliseconds, if enough data is not received within the time specified an ETimeout exception will be raised.</source>
          <target state="translated">超时可以以毫秒为单位指定,如果在指定的时间内没有收到足够的数据,将引发ETimeout异常。</target>
        </trans-unit>
        <trans-unit id="b206d5f711dced99df1aa8e9ea0d1479edc748b9" translate="yes" xml:space="preserve">
          <source>A timeout may be specified in milliseconds, if enough data is not received within the time specified an TimeoutError exception will be raised.</source>
          <target state="translated">超时时间可以以毫秒为单位指定,如果在指定的时间内没有收到足够的数据,就会引发超时错误异常。</target>
        </trans-unit>
        <trans-unit id="5a5e0bec046a288f45da3539bee961bd4b7e1bc5" translate="yes" xml:space="preserve">
          <source>A tuple type defines various named &lt;em&gt;fields&lt;/em&gt; and an &lt;em&gt;order&lt;/em&gt; of the fields. The constructor &lt;code&gt;()&lt;/code&gt; can be used to construct tuples. The order of the fields in the constructor must match the order in the tuple's definition. Different tuple-types are &lt;em&gt;equivalent&lt;/em&gt; if they specify fields of the same type and of the same name in the same order.</source>
          <target state="translated">元组类型定义各种命名&lt;em&gt;字段&lt;/em&gt;和&lt;em&gt;字段&lt;/em&gt;&lt;em&gt;顺序&lt;/em&gt;。构造函数 &lt;code&gt;()&lt;/code&gt; 可用于构造元组。构造函数中字段的顺序必须与元组定义中的顺序匹配。如果不同的元组类型以相同的顺序指定相同类型和相同名称的字段，则它们是&lt;em&gt;等效的&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="5e6444b3f99eb953e87888c66966bcbc524ea4f4" translate="yes" xml:space="preserve">
          <source>A tuple with one unnamed field can be constructed with the parentheses and a trailing comma:</source>
          <target state="translated">一个有一个未命名字段的元组可以用括号和尾部的逗号来构造。</target>
        </trans-unit>
        <trans-unit id="14170c2ff1e7de54f4e2348d1e871df1403c7064" translate="yes" xml:space="preserve">
          <source>A type &lt;code&gt;a&lt;/code&gt; is &lt;strong&gt;explicitly&lt;/strong&gt; convertible to type &lt;code&gt;b&lt;/code&gt; iff the following algorithm returns true:</source>
          <target state="translated">如果以下算法返回true，则类型 &lt;code&gt;a&lt;/code&gt; 可&lt;strong&gt;显式&lt;/strong&gt;转换为类型 &lt;code&gt;b&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0e266a33b4be68e2d75b658bf09d5fcd023a82b7" translate="yes" xml:space="preserve">
          <source>A type &lt;code&gt;a&lt;/code&gt; is &lt;strong&gt;implicitly&lt;/strong&gt; convertible to type &lt;code&gt;b&lt;/code&gt; iff the following algorithm returns true:</source>
          <target state="translated">如果以下算法返回true，则类型 &lt;code&gt;a&lt;/code&gt; 可以&lt;strong&gt;隐式&lt;/strong&gt;转换为类型 &lt;code&gt;b&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="506a88b6ff206893ad4b7e57e9c4e7e99b518ff4" translate="yes" xml:space="preserve">
          <source>A type class is a special pseudo-type that can be used to match against types in the context of overload resolution or the &lt;code&gt;is&lt;/code&gt; operator. Nim supports the following built-in type classes:</source>
          <target state="translated">类型类是一种特殊的伪类型，可以在重载解析或 &lt;code&gt;is&lt;/code&gt; 运算符的上下文中与类型进行匹配。Nim支持以下内置类型类：</target>
        </trans-unit>
        <trans-unit id="ec2661446eb8287aeb52ad012da364775c3dbaac" translate="yes" xml:space="preserve">
          <source>A type section begins with the &lt;code&gt;type&lt;/code&gt; keyword. It contains multiple type definitions. A type definition binds a type to a name. Type definitions can be recursive or even mutually recursive. Mutually recursive types are only possible within a single &lt;code&gt;type&lt;/code&gt; section. Nominal types like &lt;code&gt;objects&lt;/code&gt; or &lt;code&gt;enums&lt;/code&gt; can only be defined in a &lt;code&gt;type&lt;/code&gt; section.</source>
          <target state="translated">类型部分以 &lt;code&gt;type&lt;/code&gt; 关键字开头。它包含多个类型定义。类型定义将类型绑定到名称。类型定义可以是递归的，甚至可以是相互递归的。相互递归类型只能在单个 &lt;code&gt;type&lt;/code&gt; 部分中使用。诸如 &lt;code&gt;objects&lt;/code&gt; 或 &lt;code&gt;enums&lt;/code&gt; 类的标称类型只能在 &lt;code&gt;type&lt;/code&gt; 部分中定义。</target>
        </trans-unit>
        <trans-unit id="0511cf3cc72e09256f19cf736ca74f42546431bf" translate="yes" xml:space="preserve">
          <source>A type specialized version of &lt;code&gt;..&lt;/code&gt; for convenience so that mixing integer types work better.</source>
          <target state="translated">为了方便起见， &lt;code&gt;..&lt;/code&gt; 的类型专用版本，以便混合整数类型更好地工作。</target>
        </trans-unit>
        <trans-unit id="1aca1ed394a97d0358e43ad02e64f2e9f0dad035" translate="yes" xml:space="preserve">
          <source>A valid identifier starts with a character of the set &lt;em&gt;IdentStartChars&lt;/em&gt; and is followed by any number of characters of the set &lt;em&gt;IdentChars&lt;/em&gt;.</source>
          <target state="translated">一个有效的标识符与该集合的字符开始&lt;em&gt;IdentStartChars&lt;/em&gt;和后跟任何数量的所述组的字符&lt;em&gt;IdentChars&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d0abd94780a5ea8e9be893452be742a7ec90a256" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;Option[T]&lt;/code&gt; either contains a value &lt;em&gt;x&lt;/em&gt; (represented as &lt;code&gt;some(x)&lt;/code&gt;) or is empty (&lt;code&gt;none(T)&lt;/code&gt;).</source>
          <target state="translated">类型 &lt;code&gt;Option[T]&lt;/code&gt; 的值要么包含值&lt;em&gt;x&lt;/em&gt;（表示为 &lt;code&gt;some(x)&lt;/code&gt; ），要么为空（ &lt;code&gt;none(T)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="061691c897942e6f7639e5b9fc01836fcff953a0" translate="yes" xml:space="preserve">
          <source>A variable can be marked with the &lt;code&gt;threadvar&lt;/code&gt; pragma, which makes it a &lt;span id=&quot;threadminuslocal_1&quot;&gt;thread-local&lt;/span&gt; variable; Additionally, this implies all the effects of the &lt;code&gt;global&lt;/code&gt; pragma.</source>
          <target state="translated">可以用 &lt;code&gt;threadvar&lt;/code&gt; pragma 标记变量，这使它成为&lt;span id=&quot;threadminuslocal_1&quot;&gt;线程局部&lt;/span&gt;变量。此外，这意味着 &lt;code&gt;global&lt;/code&gt; 编译指示的所有影响。</target>
        </trans-unit>
        <trans-unit id="6cf2d03ae6a2d13d0af73951ec3e536467f5ec85" translate="yes" xml:space="preserve">
          <source>A variable of a structured type can hold multiple values at the same time. Structured types can be nested to unlimited levels. Arrays, sequences, tuples, objects and sets belong to the structured types.</source>
          <target state="translated">一个结构化类型的变量可以同时容纳多个值。结构化类型可以无限地嵌套。数组、序列、元组、对象和集合都属于结构化类型。</target>
        </trans-unit>
        <trans-unit id="c3f3d14f490e58bdf5285ce0bef4d7745002ec1a" translate="yes" xml:space="preserve">
          <source>A variable of a tuple or object type is a heterogeneous storage container. A tuple or object defines various named &lt;em&gt;fields&lt;/em&gt; of a type. A tuple also defines an &lt;em&gt;order&lt;/em&gt; of the fields. Tuples are meant for heterogeneous storage types with no overhead and few abstraction possibilities. The constructor &lt;code&gt;()&lt;/code&gt; can be used to construct tuples. The order of the fields in the constructor must match the order of the tuple's definition. Different tuple-types are &lt;em&gt;equivalent&lt;/em&gt; if they specify the same fields of the same type in the same order. The &lt;em&gt;names&lt;/em&gt; of the fields also have to be identical.</source>
          <target state="translated">元组或对象类型的变量是异构存储容器。元组或对象定义类型的各种命名&lt;em&gt;字段&lt;/em&gt;。元组还定义字段的&lt;em&gt;顺序&lt;/em&gt;。元组用于异构存储类型，没有开销，并且抽象的可能性很小。构造函数 &lt;code&gt;()&lt;/code&gt; 可用于构造元组。构造函数中字段的顺序必须与元组定义的顺序匹配。如果不同的元组类型以相同的顺序指定相同类型的相同字段，则它们是&lt;em&gt;等效的&lt;/em&gt;。该&lt;em&gt;名称&lt;/em&gt;字段也必须是相同的。</target>
        </trans-unit>
        <trans-unit id="7bdc1f89d378b40222906883361628b1181e0aa3" translate="yes" xml:space="preserve">
          <source>A variable of an enumeration type can only be assigned one of the enumeration's specified values. These values are a set of ordered symbols. Each symbol is mapped to an integer value internally. The first symbol is represented at runtime by 0, the second by 1 and so on. For example:</source>
          <target state="translated">一个枚举类型的变量只能被分配给枚举的指定值之一。这些值是一组有序的符号。每个符号在内部被映射到一个整数值。第一个符号在运行时用0表示,第二个符号用1表示,以此类推。例如</target>
        </trans-unit>
        <trans-unit id="03eb03003aebc272b7eb136b33ffcf55da04a588" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;connect&lt;/code&gt; for non-blocking sockets.</source>
          <target state="translated">非阻塞套接字的 &lt;code&gt;connect&lt;/code&gt; 变体。</target>
        </trans-unit>
        <trans-unit id="71ed9093f7d2c5cbb9aa8a3933ec4cb522e39e48" translate="yes" xml:space="preserve">
          <source>A while (for) statement introduces an implicit block. Identifiers are only visible within the block they have been declared. The &lt;code&gt;block&lt;/code&gt; statement can be used to open a new block explicitly:</source>
          <target state="translated">while（for）语句引入隐式块。标识符仅在声明它们的块内可见。该 &lt;code&gt;block&lt;/code&gt; 语句可以用来显式地打开一个新的模块：</target>
        </trans-unit>
        <trans-unit id="bc56783853877b4342018f4f4752a7c166237a4d" translate="yes" xml:space="preserve">
          <source>A word boundary is a position in the subject string where the current character and the previous character do not both match &lt;code&gt;\w&lt;/code&gt; or &lt;code&gt;\W&lt;/code&gt; (i.e. one matches &lt;code&gt;\w&lt;/code&gt; and the other matches &lt;code&gt;\W&lt;/code&gt;), or the start or end of the string if the first or last character matches &lt;code&gt;\w&lt;/code&gt;, respectively.</source>
          <target state="translated">单词边界是主题字符串中当前字符和前一个字符都不都匹配 &lt;code&gt;\w&lt;/code&gt; 或 &lt;code&gt;\W&lt;/code&gt; （即，一个匹配 &lt;code&gt;\w&lt;/code&gt; ，另一个匹配 &lt;code&gt;\W&lt;/code&gt; ），或者字符串的开头或结尾，如果第一个或最后一个字符分别与 &lt;code&gt;\w&lt;/code&gt; 匹配。</target>
        </trans-unit>
        <trans-unit id="469aae2fa20a5b364724db93849620fbab87ad21" translate="yes" xml:space="preserve">
          <source>API naming design</source>
          <target state="translated">API命名设计</target>
        </trans-unit>
        <trans-unit id="6e86868dfa064831def0a9a32949fcd3f02c8b05" translate="yes" xml:space="preserve">
          <source>AST based overloading</source>
          <target state="translated">基于AST的超载</target>
        </trans-unit>
        <trans-unit id="b08670d9d509dc53f0d69a06ccafcdfc0680021a" translate="yes" xml:space="preserve">
          <source>AST:</source>
          <target state="translated">AST:</target>
        </trans-unit>
        <trans-unit id="ed89ae3b78e13637e55b85c4b03f6daaccfcbc6b" translate="yes" xml:space="preserve">
          <source>Abbreviated three-letter form of the month.</source>
          <target state="translated">缩写的三个字母形式的月份。</target>
        </trans-unit>
        <trans-unit id="02befbd420c9754ded8c9a688a174615ddafd2a6" translate="yes" xml:space="preserve">
          <source>About this document</source>
          <target state="translated">关于本文件</target>
        </trans-unit>
        <trans-unit id="d79da395b5d7a09c6439a5f2660d8c568186ab7e" translate="yes" xml:space="preserve">
          <source>Abstract</source>
          <target state="translated">Abstract</target>
        </trans-unit>
        <trans-unit id="1b33443d15e91efce2e27797d2c769792a4be765" translate="yes" xml:space="preserve">
          <source>Abstract base class for all exceptions that Nim's runtime raises but that are strictly uncatchable as they can also be mapped to a &lt;code&gt;quit&lt;/code&gt; / &lt;code&gt;trap&lt;/code&gt; / &lt;code&gt;exit&lt;/code&gt; operation.</source>
          <target state="translated">Nim的运行时引发的所有异常的抽象基类，这些异常严格不可 &lt;code&gt;trap&lt;/code&gt; 因为它们也可以映射到 &lt;code&gt;quit&lt;/code&gt; / trap / &lt;code&gt;exit&lt;/code&gt; 操作。</target>
        </trans-unit>
        <trans-unit id="07ade5cd2426cf2d96d9f115a542fdf23ea73fb2" translate="yes" xml:space="preserve">
          <source>Abstract class for all exceptions that are catchable.</source>
          <target state="translated">所有可捕获的异常的抽象类。</target>
        </trans-unit>
        <trans-unit id="1cf35ec1eeb0cdf41c798e53ae7c4bdbcf3c6e03" translate="yes" xml:space="preserve">
          <source>Accepts a block of nim code and prints the parsed abstract syntax tree using the &lt;em&gt;astGenRepr&lt;/em&gt; function. Printing is done &lt;em&gt;at compile time&lt;/em&gt;.</source>
          <target state="translated">接受一个nim代码块，并使用&lt;em&gt;astGenRepr&lt;/em&gt;函数打印已解析的抽象语法树。打印&lt;em&gt;在编译时&lt;/em&gt;完成。</target>
        </trans-unit>
        <trans-unit id="7c6e301f36546045d51728adbff6b973b0918094" translate="yes" xml:space="preserve">
          <source>Accepts a block of nim code and prints the parsed abstract syntax tree using the &lt;em&gt;lispRepr&lt;/em&gt; function. Printing is done &lt;em&gt;at compile time&lt;/em&gt;.</source>
          <target state="translated">接受一个nim代码块，并使用&lt;em&gt;lispRepr&lt;/em&gt;函数打印已解析的抽象语法树。打印&lt;em&gt;在编译时&lt;/em&gt;完成。</target>
        </trans-unit>
        <trans-unit id="7eb919c05e9f3591e4b18f0af2d7cce492e0545f" translate="yes" xml:space="preserve">
          <source>Accepts a block of nim code and prints the parsed abstract syntax tree using the &lt;em&gt;treeRepr&lt;/em&gt; function. Printing is done &lt;em&gt;at compile time&lt;/em&gt;.</source>
          <target state="translated">接受一个nim代码块，并使用&lt;em&gt;treeRepr&lt;/em&gt;函数打印已解析的抽象语法树。打印&lt;em&gt;在编译时&lt;/em&gt;完成。</target>
        </trans-unit>
        <trans-unit id="ce207f0652d5a79c6fb92d9892844f64c3c7bc7f" translate="yes" xml:space="preserve">
          <source>Accepts a new client connection.</source>
          <target state="translated">接受一个新的客户端连接。</target>
        </trans-unit>
        <trans-unit id="0612c97d4b20e5af1b9ee2e86992dd16c29c8cbf" translate="yes" xml:space="preserve">
          <source>Accepts a new connection. Returns a future containing the client socket corresponding to that connection and the remote address of the client. The future will complete when the connection is successfully accepted.</source>
          <target state="translated">接受一个新的连接。返回一个future,包含该连接对应的客户端套接字和客户端的远程地址。当连接被成功接受时,未来将完成。</target>
        </trans-unit>
        <trans-unit id="bb38da96bcf63ef07293cca8f7fae610327e435b" translate="yes" xml:space="preserve">
          <source>Accepts a new connection. Returns a future containing the client socket corresponding to that connection. The future will complete when the connection is successfully accepted.</source>
          <target state="translated">接受一个新的连接。返回一个包含该连接对应的客户端套接字的future。当连接被成功接受时,未来将完成。</target>
        </trans-unit>
        <trans-unit id="6813381cdc37c15725205e39fd4619d20653f02f" translate="yes" xml:space="preserve">
          <source>Accepts an instantiated generic type and returns its uninstantiated form.</source>
          <target state="translated">接受一个实例化的通用类型,并返回其未实例化的形式。</target>
        </trans-unit>
        <trans-unit id="faf4ef0e56229453f96a306fcf1a0f1923d413de" translate="yes" xml:space="preserve">
          <source>Acceses a specified &lt;em&gt;entry&lt;/em&gt; from the current row.</source>
          <target state="translated">在当前行中访问指定的&lt;em&gt;条目&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f9e9dd7a48db03f7a1f9615c265496ab948af3da" translate="yes" xml:space="preserve">
          <source>Access the currently matched character</source>
          <target state="translated">访问当前匹配的字符</target>
        </trans-unit>
        <trans-unit id="9e2f25bad75994a6d0402acd174ffe98487bb1e8" translate="yes" xml:space="preserve">
          <source>Access the i-th element of &lt;em&gt;deq&lt;/em&gt; and returns a mutable reference to it.</source>
          <target state="translated">访问&lt;em&gt;deq&lt;/em&gt;的第i个元素，并返回对其的可变引用。</target>
        </trans-unit>
        <trans-unit id="b235504e101d141812cbd31b5736348cbd949d54" translate="yes" xml:space="preserve">
          <source>Access the i-th element of &lt;em&gt;deq&lt;/em&gt; by order from first to last. deq[0] is the first, deq[^1] is the last.</source>
          <target state="translated">按&lt;em&gt;从头到尾&lt;/em&gt;的顺序访问&lt;em&gt;deq&lt;/em&gt;的第i个元素。deq [0]是第一个，deq [^ 1]是最后一个。</target>
        </trans-unit>
        <trans-unit id="c47d1e40dccddf8bf9622ec7b3c9e44c4af97584" translate="yes" xml:space="preserve">
          <source>Accumulator</source>
          <target state="translated">Accumulator</target>
        </trans-unit>
        <trans-unit id="737a162e2ca0961109be76dcbc40928b7272da0a" translate="yes" xml:space="preserve">
          <source>Acquires the given lock and then executes the code.</source>
          <target state="translated">获取给定的锁,然后执行代码。</target>
        </trans-unit>
        <trans-unit id="e94c5bb8f50ed78a7cd750db454d2af3ae23df56" translate="yes" xml:space="preserve">
          <source>Acquires the given lock, executes the statements in body and releases the lock after the statements finish executing.</source>
          <target state="translated">获取给定的锁,执行正文中的语句,语句执行完毕后释放锁。</target>
        </trans-unit>
        <trans-unit id="1a3e3046bdb90198f8603411233d3c6451ca3f0a" translate="yes" xml:space="preserve">
          <source>Acquires the given lock.</source>
          <target state="translated">获得指定的锁。</target>
        </trans-unit>
        <trans-unit id="d2f9d48fe60d96f7c86fe92fea51a30eef86ea2a" translate="yes" xml:space="preserve">
          <source>Acts in a similar fashion to the &lt;em&gt;recvLine&lt;/em&gt; in the sockets module. Returns false when no data is available to be read. &lt;em&gt;Line&lt;/em&gt; must be initialized and not nil!</source>
          <target state="translated">行为与套接字模块中的&lt;em&gt;recvLine&lt;/em&gt;相似。当没有数据可读取时返回false。&lt;em&gt;行&lt;/em&gt;必须初始化，不能为nil！</target>
        </trans-unit>
        <trans-unit id="b05779dfde7404de32c688c1c9a48959dd22bdd2" translate="yes" xml:space="preserve">
          <source>Add &lt;em&gt;y&lt;/em&gt; to &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">将&lt;em&gt;y&lt;/em&gt;添加到&lt;em&gt;x&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="4feee750a058b68182288ba271fbda6845aca1fd" translate="yes" xml:space="preserve">
          <source>Add &lt;em&gt;y&lt;/em&gt; to the complex number &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">将&lt;em&gt;y&lt;/em&gt;加到复数&lt;em&gt;x上&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="c680f465bd9dc1e03f6e6d6ea7255c81ff7a44a5" translate="yes" xml:space="preserve">
          <source>Add a duration of time to a &lt;code&gt;Time&lt;/code&gt;.</source>
          <target state="translated">将持续时间添加到 &lt;code&gt;Time&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="0329e59f93f564c5dfc0e70569d15fb9e15a73e3" translate="yes" xml:space="preserve">
          <source>Add a file to the multipart data &lt;em&gt;p&lt;/em&gt;, specifying filename, contentType and content manually.</source>
          <target state="translated">将文件添加到多部分数据&lt;em&gt;p中&lt;/em&gt;，手动指定文件名，contentType和内容。</target>
        </trans-unit>
        <trans-unit id="eec5847211247b4fd74ccdc819e2406c975b05b5" translate="yes" xml:space="preserve">
          <source>Add a list of multipart entries to the multipart data &lt;em&gt;p&lt;/em&gt;. All values are added without a filename and without a content type.</source>
          <target state="translated">将多部分条目列表添加到多部分数据&lt;em&gt;p中&lt;/em&gt;。所有值的添加都没有文件名和内容类型。</target>
        </trans-unit>
        <trans-unit id="798a336ba2abb70a55f061577e20dced31fde63c" translate="yes" xml:space="preserve">
          <source>Add a multipart entry to the multipart data &lt;em&gt;p&lt;/em&gt;. The value is added without a filename and without a content type.</source>
          <target state="translated">将多部分条目添加到多部分数据&lt;em&gt;p&lt;/em&gt;。该值添加时没有文件名，也没有内容类型。</target>
        </trans-unit>
        <trans-unit id="f04550fc57e117bf8d9e7db6f83bdeafaba0d38d" translate="yes" xml:space="preserve">
          <source>Add a value to the multipart data. Raises a &lt;em&gt;ValueError&lt;/em&gt; exception if &lt;em&gt;name&lt;/em&gt;, &lt;em&gt;filename&lt;/em&gt; or &lt;em&gt;contentType&lt;/em&gt; contain newline characters.</source>
          <target state="translated">向多部分数据添加一个值。如果&lt;em&gt;name&lt;/em&gt;，&lt;em&gt;filename&lt;/em&gt;或&lt;em&gt;contentType&lt;/em&gt;包含换行符，则引发&lt;em&gt;ValueError&lt;/em&gt;异常。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="772b15743a6941c602fc6966a8c9ad76de348c4b" translate="yes" xml:space="preserve">
          <source>Add an &lt;em&gt;item&lt;/em&gt; to the beginning of the &lt;em&gt;deq&lt;/em&gt;.</source>
          <target state="translated">在&lt;em&gt;deq&lt;/em&gt;的开头添加一个&lt;em&gt;项目&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2f6d2bfa601515402b5cd9a27e6de27a42f1ae49" translate="yes" xml:space="preserve">
          <source>Add an &lt;em&gt;item&lt;/em&gt; to the end of the &lt;em&gt;deq&lt;/em&gt;.</source>
          <target state="translated">在&lt;em&gt;deq&lt;/em&gt;的末尾添加一个&lt;em&gt;项目&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="804dca14340f9191ea44cbc9a5b612d3b7b60531" translate="yes" xml:space="preserve">
          <source>Add complex &lt;em&gt;x&lt;/em&gt; to float &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">将复数&lt;em&gt;x&lt;/em&gt;加到浮点&lt;em&gt;y上&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="91af401e69eb5db85492da365b587bfdcdd3c94f" translate="yes" xml:space="preserve">
          <source>Add files to a multipart data object. The file will be opened from your disk, read and sent with the automatically determined MIME type. Raises an &lt;em&gt;IOError&lt;/em&gt; if the file cannot be opened or reading fails. To manually specify file content, filename and MIME type, use &lt;em&gt;[]=&lt;/em&gt; instead.</source>
          <target state="translated">将文件添加到多部分数据对象。该文件将从您的磁盘打开，以自动确定的MIME类型读取和发送。如果无法打开文件或读取失败，则引发&lt;em&gt;IOError&lt;/em&gt;。要手动指定文件内容，文件名和MIME类型，请改用&lt;em&gt;[] =&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="406ccec3a46c7096b360cd3465737a8b535aea4c" translate="yes" xml:space="preserve">
          <source>Add float &lt;em&gt;x&lt;/em&gt; to complex &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">将float &lt;em&gt;x&lt;/em&gt;添加到&lt;em&gt;y&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="505c6693913fe1565ef1c731c3ebc737609d4c48" translate="yes" xml:space="preserve">
          <source>Add ident to dest if it is not present. This is intended for use with pragmas.</source>
          <target state="translated">如果不存在,则在 dest 中添加 ident。这是为了与实用名词一起使用。</target>
        </trans-unit>
        <trans-unit id="b50017805b1b6fc4f451182d9127fec897f8b761" translate="yes" xml:space="preserve">
          <source>Add int &lt;em&gt;x&lt;/em&gt; to rational &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">将int &lt;em&gt;x&lt;/em&gt;添加到有理&lt;em&gt;y&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9fd52413273ba8dedf3c71352a83c577246c8699" translate="yes" xml:space="preserve">
          <source>Add int &lt;em&gt;y&lt;/em&gt; to rational &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">将int &lt;em&gt;y&lt;/em&gt;添加到有理&lt;em&gt;x&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f18a8ab635db264a0fe3a0922ec6560932edcddf" translate="yes" xml:space="preserve">
          <source>Add rational &lt;em&gt;x&lt;/em&gt; to int &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">将有理数&lt;em&gt;x&lt;/em&gt;添加到int &lt;em&gt;y&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2aa6c134ddb31344adb0018507fd22c268b0cb12" translate="yes" xml:space="preserve">
          <source>Add rational &lt;em&gt;y&lt;/em&gt; to rational &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">将有理&lt;em&gt;y&lt;/em&gt;添加到有理&lt;em&gt;x&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d1747c4bec3777bff15f92b0cac11995facbb754" translate="yes" xml:space="preserve">
          <source>Add two complex numbers.</source>
          <target state="translated">加两个复数。</target>
        </trans-unit>
        <trans-unit id="10e886ac53c1940ea63eb1399092efb3e0175be5" translate="yes" xml:space="preserve">
          <source>Add two durations together.</source>
          <target state="translated">将两个期限加在一起。</target>
        </trans-unit>
        <trans-unit id="918bdd0b6e0ab8c7e512d1c14637656e65c676d4" translate="yes" xml:space="preserve">
          <source>Add two rational numbers.</source>
          <target state="translated">加两个有理数。</target>
        </trans-unit>
        <trans-unit id="f9f4e2a4ee342e53c003797651594c460da995fd" translate="yes" xml:space="preserve">
          <source>Adding a method to a class the programmer has no control over is impossible or needs ugly workarounds.</source>
          <target state="translated">在程序员无法控制的类中添加一个方法是不可能的,或者需要丑陋的变通方法。</target>
        </trans-unit>
        <trans-unit id="2025ebd7978991464bc4c04e553287e1846aa3ca" translate="yes" xml:space="preserve">
          <source>Additional Features</source>
          <target state="translated">附加功能</target>
        </trans-unit>
        <trans-unit id="050d53ae9db89d00328e7590301c21bc8b18552a" translate="yes" xml:space="preserve">
          <source>Additional compilation switches</source>
          <target state="translated">额外的编译开关</target>
        </trans-unit>
        <trans-unit id="40896bd1d7fb4e2d2b859f8c06ae9aa5ebd3ac5f" translate="yes" xml:space="preserve">
          <source>Additional documentation about Nim's GC and how to operate it in a</source>
          <target state="translated">关于Nim的GC的附加文件以及如何操作它。</target>
        </trans-unit>
        <trans-unit id="a15fa56393dfeea6e8ddbb0e0c2a6f3cc24b93de" translate="yes" xml:space="preserve">
          <source>Additional resources</source>
          <target state="translated">补充资源</target>
        </trans-unit>
        <trans-unit id="683593bbc9f4d0095e1a329b2a170a4f6b64749a" translate="yes" xml:space="preserve">
          <source>Additionally adds the encosed text to the index as a term. Since we are interested in different instances of the same term to have different entries, a table is used to keep track of the amount of times a term has previously appeared to give a different identifier value for each.</source>
          <target state="translated">另外将封装的文本作为一个术语添加到索引中。由于我们对同一术语的不同实例有不同的条目感兴趣,所以用一个表来跟踪一个术语以前出现的次数,以便为每个术语给出不同的标识符值。</target>
        </trans-unit>
        <trans-unit id="83025bdbec6a244fe913cb7d0ff67dac39e81e46" translate="yes" xml:space="preserve">
          <source>Additionally, you may pass a value along with the symbol: &lt;code&gt;-d:x=y&lt;/code&gt; which may be used in conjunction with the &lt;a href=&quot;manual#implementation-specific-pragmas-compile-time-define-pragmas&quot;&gt;compile time define pragmas&lt;/a&gt; to override symbols during build time.</source>
          <target state="translated">此外，您可以将值与符号一起传递： &lt;code&gt;-d:x=y&lt;/code&gt; ，可以将其与&lt;a href=&quot;manual#implementation-specific-pragmas-compile-time-define-pragmas&quot;&gt;编译时定义编译指示&lt;/a&gt;结合使用，以在构建期间覆盖符号。</target>
        </trans-unit>
        <trans-unit id="c9cc91072a9c61406bb688685c655da8fcf1e11e" translate="yes" xml:space="preserve">
          <source>Addr operator</source>
          <target state="translated">地址运营商</target>
        </trans-unit>
        <trans-unit id="e6513e72133cdea4324350e6d4ade50552f0fa2a" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;arg&lt;/code&gt; as a &lt;code&gt;Node&lt;/code&gt; to the &lt;code&gt;NList&lt;/code&gt; If a node with the same name is already present in this map, it is replaced by the new one.</source>
          <target state="translated">将 &lt;code&gt;arg&lt;/code&gt; 作为 &lt;code&gt;Node&lt;/code&gt; 添加到 &lt;code&gt;NList&lt;/code&gt; 如果此映射中已经存在具有相同名称的节点，则将其替换为新的节点。</target>
        </trans-unit>
        <trans-unit id="c0973ea96bcd93e616194aea6ada7ee253f95770" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;handler&lt;/code&gt; to the list of handlers.</source>
          <target state="translated">将 &lt;code&gt;handler&lt;/code&gt; 添加到处理程序列表中。</target>
        </trans-unit>
        <trans-unit id="09af7b91c6e7df51cd37d298bdc37f650d040831" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;interval&lt;/code&gt; to &lt;code&gt;dt&lt;/code&gt;. Components from &lt;code&gt;interval&lt;/code&gt; are added in the order of their size, i.e first the &lt;code&gt;years&lt;/code&gt; component, then the &lt;code&gt;months&lt;/code&gt; component and so on. The returned &lt;code&gt;DateTime&lt;/code&gt; will have the same timezone as the input.</source>
          <target state="translated">将 &lt;code&gt;interval&lt;/code&gt; 添加到 &lt;code&gt;dt&lt;/code&gt; 。来自 &lt;code&gt;interval&lt;/code&gt; 分量按其大小顺序添加，即首先是 &lt;code&gt;years&lt;/code&gt; 分量，然后是 &lt;code&gt;months&lt;/code&gt; 分量，依此类推。返回的 &lt;code&gt;DateTime&lt;/code&gt; 将具有与输入相同的时区。</target>
        </trans-unit>
        <trans-unit id="b3703e66f4731d1cd49994e51655ed816fcd0462" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;mimetype&lt;/code&gt; to the &lt;code&gt;mimedb&lt;/code&gt;.</source>
          <target state="translated">添加 &lt;code&gt;mimetype&lt;/code&gt; 的 &lt;code&gt;mimedb&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d55bd8510c4909907c3b0b1b51f22ef8bfe1dc23" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; unless &lt;code&gt;x&lt;/code&gt; is not yet initalized; in that case, &lt;code&gt;x&lt;/code&gt; becomes &lt;code&gt;y&lt;/code&gt;</source>
          <target state="translated">除非 &lt;code&gt;x&lt;/code&gt; 尚未初始化，否则将 &lt;code&gt;y&lt;/code&gt; 加到 &lt;code&gt;x&lt;/code&gt; 上；在这种情况下， &lt;code&gt;x&lt;/code&gt; 变成 &lt;code&gt;y&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="08dd7691271b1b3cf31cdaad9abf0dd1ed892c5b" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; unless &lt;code&gt;x&lt;/code&gt; is not yet initialized; in that case, &lt;code&gt;x&lt;/code&gt; becomes &lt;code&gt;@[y]&lt;/code&gt;</source>
          <target state="translated">除非 &lt;code&gt;x&lt;/code&gt; 尚未初始化，否则将 &lt;code&gt;y&lt;/code&gt; 加到 &lt;code&gt;x&lt;/code&gt; 上；在这种情况下， &lt;code&gt;x&lt;/code&gt; 变成 &lt;code&gt;@[y]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="910ee17a6a799e67a937708e73b9aedb33f3b0aa" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; it is initialized to &lt;code&gt;&quot;&quot;&lt;/code&gt;</source>
          <target state="translated">将 &lt;code&gt;y&lt;/code&gt; 加到 &lt;code&gt;x&lt;/code&gt; 上。如果 &lt;code&gt;x&lt;/code&gt; 是 &lt;code&gt;nil&lt;/code&gt; 它被初始化为 &lt;code&gt;&quot;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f4d013d42946fcbe3af0f01b7362386e1eb7f928" translate="yes" xml:space="preserve">
          <source>Adds &lt;em&gt;child&lt;/em&gt; to a JArray node &lt;em&gt;father&lt;/em&gt;.</source>
          <target state="translated">将&lt;em&gt;子项&lt;/em&gt;添加到JArray节点&lt;em&gt;父亲&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="277d7264e0b31954fb3f91658c21ef53fbc9f98b" translate="yes" xml:space="preserve">
          <source>Adds &lt;em&gt;child&lt;/em&gt; to a SList node &lt;em&gt;father&lt;/em&gt;.</source>
          <target state="translated">将&lt;em&gt;子级&lt;/em&gt;添加到SList节点&lt;em&gt;父亲&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="282a03494ac60232eca16c10011aa2a3e77244c0" translate="yes" xml:space="preserve">
          <source>Adds &lt;em&gt;interval&lt;/em&gt; to &lt;em&gt;time&lt;/em&gt;. If &lt;em&gt;interval&lt;/em&gt; contains any years, months, weeks or days the operation is performed in the local timezone.</source>
          <target state="translated">添加&lt;em&gt;间隔&lt;/em&gt;到&lt;em&gt;时&lt;/em&gt;。如果&lt;em&gt;间隔&lt;/em&gt;包含任何年，月，周或天，则在当地时区执行操作。</target>
        </trans-unit>
        <trans-unit id="168959e8e3da827112e6480f035af90769452610" translate="yes" xml:space="preserve">
          <source>Adds a &lt;em&gt;term&lt;/em&gt; to the index using the specified hyperlink identifier.</source>
          <target state="translated">使用指定的超链接标识符将&lt;em&gt;术语&lt;/em&gt;添加到索引。</target>
        </trans-unit>
        <trans-unit id="46517870669c98767730789efc1c2a63afe0fd37" translate="yes" xml:space="preserve">
          <source>Adds a char to string &lt;em&gt;s&lt;/em&gt; and applies the following escaping:</source>
          <target state="translated">向字符串&lt;em&gt;s&lt;/em&gt;添加一个char 并应用以下转义：</target>
        </trans-unit>
        <trans-unit id="1f8aac4240d0d2f3105af4d844dbcb2abbdecf97" translate="yes" xml:space="preserve">
          <source>Adds a new attribute node, if an attribute with the localName and namespaceURI of &lt;code&gt;newAttr&lt;/code&gt; is present, it is replaced by the new one and the replaced attribute is returned, otherwise &lt;code&gt;nil&lt;/code&gt; is returned.</source>
          <target state="translated">添加一个新的属性节点，如果存在具有 &lt;code&gt;newAttr&lt;/code&gt; 的localName和namespaceURI的属性，则将其替换为新属性节点，并返回被替换的属性，否则返回 &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="49966f2ea34f557267d410935160fd5454f498db" translate="yes" xml:space="preserve">
          <source>Adds a new attribute node, if an attribute with the same &lt;em&gt;nodeName&lt;/em&gt; is present, it is replaced by the new one and the replaced attribute is returned, otherwise &lt;code&gt;nil&lt;/code&gt; is returned.</source>
          <target state="translated">添加一个新的属性节点，如果存在具有相同&lt;em&gt;nodeName&lt;/em&gt;的属性，则将其替换为新属性节点，并返回被替换的属性，否则返回 &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8d941c7f90a962f0302be00a817bf48658be8c09" translate="yes" xml:space="preserve">
          <source>Adds a new attribute, as specified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; If an attribute with that name is already present in the element, its value is changed to be that of the value parameter Raises the EInvalidCharacterErr if the specified &lt;code&gt;name&lt;/code&gt; contains illegal characters</source>
          <target state="translated">添加由 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;value&lt;/code&gt; 指定的新属性如果元素中已经存在具有该名称的属性，则其值将更改为value参数的值。如果指定的 &lt;code&gt;name&lt;/code&gt; 包含非法字符，则引发EInvalidCharacterErr</target>
        </trans-unit>
        <trans-unit id="70b9921234cbd8dc467e865419512e1db5aa80e1" translate="yes" xml:space="preserve">
          <source>Adds a new attribute, as specified by &lt;code&gt;namespaceURI&lt;/code&gt;, &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">添加一个新的属性，如 &lt;code&gt;namespaceURI&lt;/code&gt; ， &lt;code&gt;localName&lt;/code&gt; 和 &lt;code&gt;value&lt;/code&gt; 所指定。</target>
        </trans-unit>
        <trans-unit id="175780a3fa3d64a9dc7aa37e3d80ca0adc76b294" translate="yes" xml:space="preserve">
          <source>Adds a node using its &lt;code&gt;namespaceURI&lt;/code&gt; and &lt;code&gt;localName&lt;/code&gt;</source>
          <target state="translated">使用其 &lt;code&gt;namespaceURI&lt;/code&gt; 和 &lt;code&gt;localName&lt;/code&gt; 添加节点</target>
        </trans-unit>
        <trans-unit id="71b9366e5b895a616623ffad66668f7f54484c12" translate="yes" xml:space="preserve">
          <source>Adds a separator to &lt;em&gt;dest&lt;/em&gt; only if its length is bigger than &lt;em&gt;startLen&lt;/em&gt;.</source>
          <target state="translated">仅当其长度大于&lt;em&gt;startLen时，&lt;/em&gt;才将分隔符添加到&lt;em&gt;dest中&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="719fea5dd090dc5f35241a78b628149a3f6e753c" translate="yes" xml:space="preserve">
          <source>Adds each child of &lt;em&gt;children&lt;/em&gt; to the &lt;em&gt;father&lt;/em&gt; node. Returns the &lt;em&gt;father&lt;/em&gt; node so that calls can be nested.</source>
          <target state="translated">每个孩子增加&lt;em&gt;孩子&lt;/em&gt;的&lt;em&gt;父亲&lt;/em&gt;节点。返回&lt;em&gt;父&lt;/em&gt;节点，以便可以嵌套调用。</target>
        </trans-unit>
        <trans-unit id="77594e2b861c1fa8f8e68498df51e03371d37a9b" translate="yes" xml:space="preserve">
          <source>Adds pragma to routine definition</source>
          <target state="translated">在例程定义中添加pragma。</target>
        </trans-unit>
        <trans-unit id="392b56977e8236b6698f4ca58ac6c2f28d25c68f" translate="yes" xml:space="preserve">
          <source>Adds the &lt;em&gt;child&lt;/em&gt; to the &lt;em&gt;father&lt;/em&gt; node. Returns the father node so that calls can be nested.</source>
          <target state="translated">将&lt;em&gt;子级&lt;/em&gt;添加到&lt;em&gt;父级&lt;/em&gt;节点。返回父节点，以便可以嵌套调用。</target>
        </trans-unit>
        <trans-unit id="4be1f166b02d308f1b99389ad08b9ecee806fca1" translate="yes" xml:space="preserve">
          <source>Adds the callbacks proc to be called when the future completes.</source>
          <target state="translated">增加了未来完成时调用的回调proc。</target>
        </trans-unit>
        <trans-unit id="087cbeb9fcc85f71b469524d8a7510230c6f6abc" translate="yes" xml:space="preserve">
          <source>Adds the file extension &lt;em&gt;ext&lt;/em&gt; to &lt;em&gt;filename&lt;/em&gt;, unless &lt;em&gt;filename&lt;/em&gt; already has an extension.</source>
          <target state="translated">将文件扩展名&lt;em&gt;ext&lt;/em&gt;添加到&lt;em&gt;filename&lt;/em&gt;，除非&lt;em&gt;filename&lt;/em&gt;已经具有扩展名。</target>
        </trans-unit>
        <trans-unit id="38e43d237023eab5acc2b848d42530e464a0a37f" translate="yes" xml:space="preserve">
          <source>Adds the node newChild to the end of the list of children of this node. If the newChild is already in the tree, it is first removed.</source>
          <target state="translated">将节点newChild添加到这个节点的子节点列表的最后。如果newChild已经在树中,则先将其删除。</target>
        </trans-unit>
        <trans-unit id="2a72a2ff357c75992d2d25db54f40e31c444189e" translate="yes" xml:space="preserve">
          <source>Adds the specified value to the specified key. Appends to any existing values associated with the key.</source>
          <target state="translated">将指定的值添加到指定的键中。将指定的值添加到与键相关联的任何现有值中。</target>
        </trans-unit>
        <trans-unit id="dcb76173f8b3f736f04cf7a85a76442e3061c9f2" translate="yes" xml:space="preserve">
          <source>Adds two &lt;code&gt;TimeInterval&lt;/code&gt; objects together.</source>
          <target state="translated">将两个 &lt;code&gt;TimeInterval&lt;/code&gt; 对象添加在一起。</target>
        </trans-unit>
        <trans-unit id="0cd028f03aa8100d6b3d714eae3d5348fe823a2f" translate="yes" xml:space="preserve">
          <source>Adds/registers a quit procedure.</source>
          <target state="translated">添加/注册一个退出程序。</target>
        </trans-unit>
        <trans-unit id="5090ef07df2944062324712ca6950298e056c7f1" translate="yes" xml:space="preserve">
          <source>Adopting type for gui inspector in a game engine:</source>
          <target state="translated">在游戏引擎中采用gui检查器的类型。</target>
        </trans-unit>
        <trans-unit id="cd58779782de2792380285200da5a98425f86d02" translate="yes" xml:space="preserve">
          <source>Advanced command line switches are:</source>
          <target state="translated">高级命令行开关是:</target>
        </trans-unit>
        <trans-unit id="7a3a43835953e413f721f837036117df744dbd00" translate="yes" xml:space="preserve">
          <source>Advanced commands:</source>
          <target state="translated">高级命令。</target>
        </trans-unit>
        <trans-unit id="21604196a5b5f020863aebeb14786b98a2ec02e1" translate="yes" xml:space="preserve">
          <source>Advanced options:</source>
          <target state="translated">高级选项。</target>
        </trans-unit>
        <trans-unit id="f1c748b61ceca05da788dea58f761592f09389bc" translate="yes" xml:space="preserve">
          <source>Advanced types</source>
          <target state="translated">高级类型</target>
        </trans-unit>
        <trans-unit id="4eaa54faaeebcdcf16ca6cecc39180523a7c29ea" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;\0&lt;/code&gt; up to two further octal digits are read. In both cases, if there are fewer than two digits, just those that are present are used. Thus the sequence &lt;code&gt;\0\x\07&lt;/code&gt; specifies two binary zeros followed by a BEL character (code value 7). Make sure you supply two digits after the initial zero if the pattern character that follows is itself an octal digit.</source>
          <target state="translated">之后 &lt;code&gt;\0&lt;/code&gt; 最多两个八进制数字被读取。在这两种情况下，如果少于两位数，则仅使用存在的那些。因此，序列 &lt;code&gt;\0\x\07&lt;/code&gt; 指定两个二进制零，后跟一个BEL字符（代码值7）。如果后面的图案字符本身是八进制数字，请确保在初始零之后提供两位数字。</target>
        </trans-unit>
        <trans-unit id="c71390a639ed6627641b3cfd1f9a329a5cc9c625" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;\x&lt;/code&gt;, from zero to two hexadecimal digits are read (letters can be in upper or lower case). In UTF-8 mode, any number of hexadecimal digits may appear between &lt;code&gt;\x{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;, but the value of the character code must be less than 2**31 (that is, the maximum hexadecimal value is 7FFFFFFF). If characters other than hexadecimal digits appear between &lt;code&gt;\x{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;, or if there is no terminating &lt;code&gt;}&lt;/code&gt;, this form of escape is not recognized. Instead, the initial &lt;code&gt;\x&lt;/code&gt; will be interpreted as a basic hexadecimal escape, with no following digits, giving a character whose value is zero.</source>
          <target state="translated">在 &lt;code&gt;\x&lt;/code&gt; ，读取从零到两个十六进制数字（字母可以大写或小写）。在UTF-8模式下， &lt;code&gt;\x{&lt;/code&gt; 和 &lt;code&gt;}&lt;/code&gt; 之间可以出现任意数量的十六进制数字，但是字符代码的值必须小于2 ** 31（即，最大十六进制值为7FFFFFFF）。如果 &lt;code&gt;\x{&lt;/code&gt; 和 &lt;code&gt;}&lt;/code&gt; 之间出现十六进制数字以外的字符，或者没有终止符 &lt;code&gt;}&lt;/code&gt; ，则无法识别这种转义形式。取而代之的是，初始 &lt;code&gt;\x&lt;/code&gt; 将被解释为基本的十六进制转义符，没有后续数字，从而给出一个值为零的字符。</target>
        </trans-unit>
        <trans-unit id="622cf30c89947b71767229b80f2f6c86dfa76768" translate="yes" xml:space="preserve">
          <source>After a connection is made you can use the &lt;code&gt;store&lt;/code&gt; procedure to upload a new file to the FTP server. Make sure to check you are in the correct working directory before you do so with the &lt;code&gt;pwd&lt;/code&gt; procedure, you can also instead specify an absolute path.</source>
          <target state="translated">建立连接后，您可以使用 &lt;code&gt;store&lt;/code&gt; 过程将新文件上传到FTP服务器。使用 &lt;code&gt;pwd&lt;/code&gt; 过程进行操作之前，请确保检查您是否位于正确的工作目录中，也可以指定绝对路径。</target>
        </trans-unit>
        <trans-unit id="f73d43ab167cd4ac21b418e91451904852662e79" translate="yes" xml:space="preserve">
          <source>After compilation is finished you will hopefully end up with the nim compiler in the &lt;code&gt;bin&lt;/code&gt; directory. You can add Nim's &lt;code&gt;bin&lt;/code&gt; directory to your &lt;code&gt;$PATH&lt;/code&gt; or use the &lt;a href=&quot;#install-command&quot;&gt;install command&lt;/a&gt; to place it where it will be found.</source>
          <target state="translated">编译完成后，您希望可以在 &lt;code&gt;bin&lt;/code&gt; 目录中使用nim编译器。您可以将Nim的 &lt;code&gt;bin&lt;/code&gt; 目录添加到 &lt;code&gt;$PATH&lt;/code&gt; 或使用&lt;a href=&quot;#install-command&quot;&gt;install命令&lt;/a&gt;将其放置在将其找到的位置。</target>
        </trans-unit>
        <trans-unit id="7e10a07a137ad912e35e4faef7ca70acb747eef5" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;from&lt;/code&gt; statement a module name follows followed by an &lt;code&gt;import&lt;/code&gt; to list the symbols one likes to use without explicit full qualification:</source>
          <target state="translated">在 &lt;code&gt;from&lt;/code&gt; 语句之后，模块名称后跟一个 &lt;code&gt;import&lt;/code&gt; 以列出无需显式完全限定就可以使用的符号：</target>
        </trans-unit>
        <trans-unit id="4f797b80df1f8d64852f55b778851d191514b53d" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;import&lt;/code&gt; statement a list of module names can follow or a single module name followed by an &lt;code&gt;except&lt;/code&gt; list to prevent some symbols to be imported:</source>
          <target state="translated">在 &lt;code&gt;import&lt;/code&gt; 语句之后，可以跟随一个模块名称列表，或者紧跟一个模块名称列表，然后是一个 &lt;code&gt;except&lt;/code&gt; 列表，以防止导入某些符号：</target>
        </trans-unit>
        <trans-unit id="ee8f6842719daac0ef2d06cdb2e7fa5bd3d11c84" translate="yes" xml:space="preserve">
          <source>After the execution of &lt;code&gt;handleRequest&lt;/code&gt; the client socket will be closed automatically unless it has already been closed.</source>
          <target state="translated">执行 &lt;code&gt;handleRequest&lt;/code&gt; 之后，除非已关闭客户端套接字，否则它将自动关闭。</target>
        </trans-unit>
        <trans-unit id="cf6dcadff9cc79e46d3555b76c916fb3ed022d34" translate="yes" xml:space="preserve">
          <source>After you add &lt;code&gt;hash&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; for your custom type everything will work. Currently however &lt;code&gt;hash&lt;/code&gt; for objects is not defined, whereas &lt;code&gt;system.==&lt;/code&gt; for objects does exist and performs a &quot;deep&quot; comparison (every field is compared) which is usually what you want. So in the following example implementing only &lt;code&gt;hash&lt;/code&gt; suffices:</source>
          <target state="translated">在为您的自定义类型添加 &lt;code&gt;hash&lt;/code&gt; 和 &lt;code&gt;==&lt;/code&gt; 之后，所有内容都将起作用。但是，当前没有定义对象的 &lt;code&gt;hash&lt;/code&gt; ，而确实存在对象的 &lt;code&gt;system.==&lt;/code&gt; 并执行通常想要的&amp;ldquo;深度&amp;rdquo;比较（比较每个字段）。因此，在下面的示例中，仅实现 &lt;code&gt;hash&lt;/code&gt; 就足够了：</target>
        </trans-unit>
        <trans-unit id="c3ae9a42c0ef5d71d82ed6ff94ea44fa57d69eaa" translate="yes" xml:space="preserve">
          <source>After you create a socket with the &lt;code&gt;newSocket&lt;/code&gt; procedure, you can create a TCP server by calling the &lt;code&gt;bindAddr&lt;/code&gt; and &lt;code&gt;listen&lt;/code&gt; procedures.</source>
          <target state="translated">使用 &lt;code&gt;newSocket&lt;/code&gt; 过程创建套接字后，可以通过调用 &lt;code&gt;bindAddr&lt;/code&gt; 和 &lt;code&gt;listen&lt;/code&gt; 过程来创建TCP服务器。</target>
        </trans-unit>
        <trans-unit id="19f5c4359047c1c4029762b09cefac6ce55773f8" translate="yes" xml:space="preserve">
          <source>After you create a socket with the &lt;code&gt;newSocket&lt;/code&gt; procedure, you can easily connect it to a server running at a known hostname (or IP address) and port. To do so over TCP, use the example below.</source>
          <target state="translated">使用 &lt;code&gt;newSocket&lt;/code&gt; 过程创建套接字后，可以轻松地将其连接到以已知主机名（或IP地址）和端口运行的服务器。要通过TCP进行操作，请使用以下示例。</target>
        </trans-unit>
        <trans-unit id="5458c4cb0f05f3f6ed419b885d419d370bdf563e" translate="yes" xml:space="preserve">
          <source>Again, if you are wrapping a library which &lt;em&gt;mallocs&lt;/em&gt; and &lt;em&gt;frees&lt;/em&gt; data structures, you need to expose the appropriate &lt;em&gt;free&lt;/em&gt; function to Nim so you can clean it up. And of course, once cleaned you should avoid accessing it from Nim (or C for that matter). Typically C data structures have their own &lt;code&gt;malloc_structure&lt;/code&gt; and &lt;code&gt;free_structure&lt;/code&gt; specific functions, so wrapping these for the Nim side should be enough.</source>
          <target state="translated">同样，如果要包装一个&lt;em&gt;malloc&lt;/em&gt;并&lt;em&gt;释放&lt;/em&gt;数据结构的库，&lt;em&gt;则&lt;/em&gt;需要向Nim 公开适当的&lt;em&gt;free&lt;/em&gt;函数，以便对其进行清理。当然，一旦清理，就应该避免从Nim（或C）访问它。通常，C数据结构具有其自己的 &lt;code&gt;malloc_structure&lt;/code&gt; 和 &lt;code&gt;free_structure&lt;/code&gt; 特定函数，因此将它们包装在Nim端应该足够了。</target>
        </trans-unit>
        <trans-unit id="2def8d1f86d78a731890a66e16deb2b5e1ea4254" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#difference&quot;&gt;difference(s1, s2)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#difference&quot;&gt;差异的&lt;/a&gt;别名（s1，s2）。</target>
        </trans-unit>
        <trans-unit id="f4a02e1746a71e7fb0864cabf7b39376b3a63a1f" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#intersection&quot;&gt;intersection(s1, s2)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#intersection&quot;&gt;交集（s1，s2）的&lt;/a&gt;别名。</target>
        </trans-unit>
        <trans-unit id="7e2391f38322eb20263936b3bfa8fc3471e6b69b" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#len,TOrderedSet%5BA%5D&quot;&gt;len()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#len,TOrderedSet%5BA%5D&quot;&gt;len（）的&lt;/a&gt;别名。</target>
        </trans-unit>
        <trans-unit id="d86fe62b7538063ec7bfae9f6c08a83088df2cff" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#len,TSet%5BA%5D&quot;&gt;len()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#len,TSet%5BA%5D&quot;&gt;len（）的&lt;/a&gt;别名。</target>
        </trans-unit>
        <trans-unit id="41b739a23c6fc05ac36095d9dd959eb84d6a5a1f" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#symmetricDifference&quot;&gt;symmetricDifference(s1, s2)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#symmetricDifference&quot;&gt;symmetricDifference（s1，s2）的&lt;/a&gt;别名。</target>
        </trans-unit>
        <trans-unit id="f3db9334116c6d200d159599181aa97f7e9eee70" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#union&quot;&gt;union(s1, s2)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#union&quot;&gt;union（s1，s2）的&lt;/a&gt;别名。</target>
        </trans-unit>
        <trans-unit id="8b5be6f17bdfd8cbcd14d0c4aa54788e9e3d34a0" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;none(T)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;none(T)&lt;/code&gt; 的别名。</target>
        </trans-unit>
        <trans-unit id="880b74f9b1a7d4cf4585f8c8f387bcb20192549a" translate="yes" xml:space="preserve">
          <source>Alias for for countSetBits (Hamming weight.)</source>
          <target state="translated">countSetBits的别名(Hamming weight.)</target>
        </trans-unit>
        <trans-unit id="2feaf49576ccc73f2b86d27faa6075fa943090f4" translate="yes" xml:space="preserve">
          <source>Aligns &lt;code&gt;s&lt;/code&gt; using &lt;code&gt;fill&lt;/code&gt; char. This is only of interest if you want to write a custom &lt;code&gt;format&lt;/code&gt; proc that should support the standard format specifiers.</source>
          <target state="translated">对齐 &lt;code&gt;s&lt;/code&gt; 使用 &lt;code&gt;fill&lt;/code&gt; 字符。仅当您要编写支持标准格式说明符的自定义 &lt;code&gt;format&lt;/code&gt; proc时，这才有意义。</target>
        </trans-unit>
        <trans-unit id="4a373b51ddb20415acc6f2cab49e7a886d4418f7" translate="yes" xml:space="preserve">
          <source>Aligns a string &lt;em&gt;s&lt;/em&gt; with &lt;em&gt;padding&lt;/em&gt;, so that it is of length &lt;em&gt;count&lt;/em&gt;.</source>
          <target state="translated">将字符串&lt;em&gt;s&lt;/em&gt;与&lt;em&gt;填充&lt;/em&gt;对齐，使其具有长度&lt;em&gt;计数&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="18f77fc6c5026c1d2d103f3b97daf7c1dbd054f5" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;db_*&lt;/code&gt; modules support the same form of parameter substitution. That is, using the &lt;code&gt;?&lt;/code&gt; (question mark) to signify the place where a value should be placed. For example:</source>
          <target state="translated">所有 &lt;code&gt;db_*&lt;/code&gt; 模块都支持相同形式的参数替换。也就是说，使用 &lt;code&gt;?&lt;/code&gt; （问号）表示应放置值的位置。例如：</target>
        </trans-unit>
        <trans-unit id="9552063c6dac2a0b2b6f80dd47ebd5c82800945e" translate="yes" xml:space="preserve">
          <source>All Nim source files are in the UTF-8 encoding (or its ASCII subset). Other encodings are not supported. Any of the standard platform line termination sequences can be used - the Unix form using ASCII LF (linefeed), the Windows form using the ASCII sequence CR LF (return followed by linefeed), or the old Macintosh form using the ASCII CR (return) character. All of these forms can be used equally, regardless of platform.</source>
          <target state="translated">所有Nim源文件均采用UTF-8编码(或其ASCII子集)。不支持其他编码。可以使用任何一种标准平台的行终止序列--Unix形式使用ASCII LF(换行),Windows形式使用ASCII序列CR LF(回车后换行),或者旧的Macintosh形式使用ASCII CR(回车)字符。所有这些表格都可以平等地使用,不受平台的影响。</target>
        </trans-unit>
        <trans-unit id="2c0abd1c94e3986f0fc217d43c9ce2e325e352e8" translate="yes" xml:space="preserve">
          <source>All asynchronous functions returning a &lt;code&gt;Future&lt;/code&gt; will not block. They will not however return immediately. An asynchronous function will have code which will be executed before an asynchronous request is made, in most cases this code sets up the request.</source>
          <target state="translated">所有返回 &lt;code&gt;Future&lt;/code&gt; 的异步函数都不会阻塞。但是他们不会立即返回。异步函数将具有将在发出异步请求之前执行的代码，在大多数情况下，该代码将建立请求。</target>
        </trans-unit>
        <trans-unit id="987c15958bc12d3f55c911e8dc5fec4777c6bc5e" translate="yes" xml:space="preserve">
          <source>All expressions have a type which is known at compile time. Nim is statically typed. One can declare new types, which is in essence defining an identifier that can be used to denote this custom type.</source>
          <target state="translated">所有的表达式都有一个在编译时已知的类型。Nim是静态类型的。人们可以声明新的类型,这实质上是定义了一个标识符,可以用来表示这个自定义类型。</target>
        </trans-unit>
        <trans-unit id="f984cab28f61b914c2bd533b03fae6756c4294ad" translate="yes" xml:space="preserve">
          <source>All identifiers of a module are valid from the point of declaration until the end of the module. Identifiers from indirectly dependent modules are &lt;em&gt;not&lt;/em&gt; available. The &lt;span id=&quot;system_1&quot;&gt;system&lt;/span&gt; module is automatically imported in every module.</source>
          <target state="translated">从声明到模块结束，模块的所有标识符均有效。间接依赖模块的标识符&lt;em&gt;不可&lt;/em&gt;用。该&lt;span id=&quot;system_1&quot;&gt;系统&lt;/span&gt;模块，每个模块中自动导入。</target>
        </trans-unit>
        <trans-unit id="cded9aa9ab6801c06f94e1f6e9e5425ed01952a5" translate="yes" xml:space="preserve">
          <source>All of the available idetools commands require you to specify a query location through the &lt;code&gt;--track&lt;/code&gt; or &lt;code&gt;--trackDirty&lt;/code&gt; switches. The general idetools invocations are:</source>
          <target state="translated">所有可用的idetools命令都要求您通过 &lt;code&gt;--track&lt;/code&gt; 或 &lt;code&gt;--trackDirty&lt;/code&gt; 开关指定查询位置。常规idetool调用为：</target>
        </trans-unit>
        <trans-unit id="96cbbecb3e99c48c7b4fe7081d99be9e034325bf" translate="yes" xml:space="preserve">
          <source>All string literals are of the type &lt;code&gt;string&lt;/code&gt;. A string in Nim is very similar to a sequence of characters. However, strings in Nim are both zero-terminated and have a length field. One can retrieve the length with the builtin &lt;code&gt;len&lt;/code&gt; procedure; the length never counts the terminating zero.</source>
          <target state="translated">所有字符串文字均属于 &lt;code&gt;string&lt;/code&gt; 类型。Nim中的字符串与字符序列非常相似。但是，Nim中的字符串都以零结尾并且具有长度字段。可以使用内置的 &lt;code&gt;len&lt;/code&gt; 程序检索长度；长度永远不会计入终止零。</target>
        </trans-unit>
        <trans-unit id="c6b1a1f14d43339564b33e2a129f631ca1f3956e" translate="yes" xml:space="preserve">
          <source>All the &lt;code&gt;tests/caas/*.txt&lt;/code&gt; files encode a session with the compiler:</source>
          <target state="translated">所有的 &lt;code&gt;tests/caas/*.txt&lt;/code&gt; 文件都编码与编译器的会话：</target>
        </trans-unit>
        <trans-unit id="d7d265f3de6bf8deede109e19dc230beea86f266" translate="yes" xml:space="preserve">
          <source>All the characters that count as whitespace.</source>
          <target state="translated">所有算作空白的字符。</target>
        </trans-unit>
        <trans-unit id="0858ffb5249b4b454db4fc31e3311bb8f257c071" translate="yes" xml:space="preserve">
          <source>All the comparison operators can be used with enumeration types.</source>
          <target state="translated">所有的比较运算符都可以和枚举类型一起使用。</target>
        </trans-unit>
        <trans-unit id="6c891dcf4573456ce1e2da5262b50d0a08307027" translate="yes" xml:space="preserve">
          <source>All the operations have to perform efficiently. Because a Cellset can become huge a hash table alone is not suitable for this.</source>
          <target state="translated">所有的操作都必须有效地执行。因为一个Cellset可能会变得很大,单单一个哈希表是不适合的。</target>
        </trans-unit>
        <trans-unit id="d7919c15f302a782639503db1ddcfd789a925698" translate="yes" xml:space="preserve">
          <source>All the sequences that define a single byte value or a single UTF-8 character (in UTF-8 mode) can be used both inside and outside character classes. In addition, inside a character class, the sequence &lt;code&gt;\b&lt;/code&gt; is interpreted as the backspace character (hex 08), and the sequence &lt;code&gt;\X&lt;/code&gt; is interpreted as the character &quot;X&quot;. Outside a character class, these sequences have different meanings (see below).</source>
          <target state="translated">定义单个字节值或单个UTF-8字符（在UTF-8模式下）的所有序列都可以在内部和外部字符类中使用。另外，在字符类内部，序列 &lt;code&gt;\b&lt;/code&gt; 被解释为退格字符（十六进制08），而序列 &lt;code&gt;\X&lt;/code&gt; 被解释为字符&amp;ldquo; X&amp;rdquo;。在字符类之外，这些序列具有不同的含义（请参见下文）。</target>
        </trans-unit>
        <trans-unit id="169951f4b6d1d7f1a4b31b9a082c85cf7bcb2136" translate="yes" xml:space="preserve">
          <source>All top level constants or types appearing within the concept body are accessible through the dot operator in procs where the concept was successfully matched to a concrete type:</source>
          <target state="translated">所有出现在概念体中的顶层常量或类型都可以通过点运算符在概念与具体类型成功匹配的procs中访问。</target>
        </trans-unit>
        <trans-unit id="3c975cb1e2ba6e75d38b206700dca326fdb354fc" translate="yes" xml:space="preserve">
          <source>All types for that &lt;code&gt;nil&lt;/code&gt; is a valid value can be annotated to exclude &lt;code&gt;nil&lt;/code&gt; as a valid value with the &lt;code&gt;not nil&lt;/code&gt; annotation:</source>
          <target state="translated">该 &lt;code&gt;nil&lt;/code&gt; 是有效值的所有类型都可以使用 &lt;code&gt;not nil&lt;/code&gt; 注释进行注释，以将 &lt;code&gt;nil&lt;/code&gt; 排除为有效值：</target>
        </trans-unit>
        <trans-unit id="029f6357cfa5fa54f588a79c60e26072ee6dc04a" translate="yes" xml:space="preserve">
          <source>Also, you won't find raw &lt;code&gt;\n&lt;/code&gt; characters breaking the one answer per line format. Instead you will need to parse sequences in the form &lt;code&gt;\xHH&lt;/code&gt;, where &lt;em&gt;HH&lt;/em&gt; is a hexadecimal value (e.g. newlines generate the sequence &lt;code&gt;\x0A&lt;/code&gt;).</source>
          <target state="translated">此外，您不会发现原始 &lt;code&gt;\n&lt;/code&gt; 字符会破坏每种行格式的一个答案。相反，您将需要解析 &lt;code&gt;\xHH&lt;/code&gt; 形式的序列，其中&lt;em&gt;HH&lt;/em&gt;是一个十六进制值（例如，换行符生成序列 &lt;code&gt;\x0A&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4521b364cb9ce19f839632eb99d99bb31f52f57b" translate="yes" xml:space="preserve">
          <source>Alternate version of the above.</source>
          <target state="translated">以上的备选版本。</target>
        </trans-unit>
        <trans-unit id="3b74e96e489cf616e54374e5e92ff3290101f441" translate="yes" xml:space="preserve">
          <source>Alternative</source>
          <target state="translated">Alternative</target>
        </trans-unit>
        <trans-unit id="24a6f9561b6fb31bcce22dd9eefb7cb23c8efb12" translate="yes" xml:space="preserve">
          <source>Alternatively, the &lt;code&gt;distinct&lt;/code&gt; type modifier can be applied to the type class to allow each param matching the type class to bind to a different type. Such type classes are called &lt;span id=&quot;bind-many_1&quot;&gt;bind many&lt;/span&gt; types.</source>
          <target state="translated">或者，可以将 &lt;code&gt;distinct&lt;/code&gt; 类型修饰符应用于类型类，以允许与该类型类匹配的每个参数绑定到不同的类型。这样的类型类称为&lt;span id=&quot;bind-many_1&quot;&gt;绑定许多&lt;/span&gt;类型。</target>
        </trans-unit>
        <trans-unit id="c5c9b8d75bae0a4e7883c1afe39fba029a2a402f" translate="yes" xml:space="preserve">
          <source>Alternatively, the &lt;em&gt;type&lt;/em&gt; operator can be used over the proc params for similar effect when anonymous or distinct type classes are used.</source>
          <target state="translated">另外，当使用匿名或不同类型的类时，可以在proc参数上使用&lt;em&gt;类型&lt;/em&gt;运算符，以获得相似的效果。</target>
        </trans-unit>
        <trans-unit id="5b30b701e37924ad0c27b052555995c52f8814d1" translate="yes" xml:space="preserve">
          <source>Although Nim supports a variety of code and formatting styles, it is nevertheless beneficial that certain community efforts, such as the standard library, should follow a consistent set of style guidelines when suitable. This enhancement proposal aims to list a series of guidelines that the standard library should follow.</source>
          <target state="translated">虽然Nim支持各种代码和格式化风格,但在合适的情况下,某些社区的工作(如标准库)应该遵循一套一致的风格准则,这是有益的。本增强提案旨在列出一系列标准库应该遵循的准则。</target>
        </trans-unit>
        <trans-unit id="e818f14ba9bbedb672b0a658dcc233bb37218e4d" translate="yes" xml:space="preserve">
          <source>Although the types use nanosecond time resolution, the underlying resolution used by &lt;code&gt;getTime()&lt;/code&gt; depends on the platform and backend (JS is limited to millisecond precision).</source>
          <target state="translated">尽管这些类型使用纳秒级的时间分辨率，但 &lt;code&gt;getTime()&lt;/code&gt; 使用的基础分辨率取决于平台和后端（JS限于毫秒精度）。</target>
        </trans-unit>
        <trans-unit id="d3c0c9ff9b3e9a28a9649fc31261da1cd44edd57" translate="yes" xml:space="preserve">
          <source>Although use of whitespace for stylistic reasons other than the ones endorsed by this guide are allowed, careful thought should be put into such practices. Not all editors support automatic alignment of code sections, and re-aligning long sections of code by hand can quickly become tedious.</source>
          <target state="translated">虽然除了本指南所认可的原因外,允许出于风格上的原因使用空白,但应仔细考虑这种做法。并非所有的编辑器都支持代码部分的自动对齐,用手重新对齐长长的代码部分会很快变得乏味。</target>
        </trans-unit>
        <trans-unit id="614ddcbf931903423c230b8f0212d11059c5ec82" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ValueError&lt;/code&gt; exception will be thrown if no exception exists in the specified Future.</source>
          <target state="translated">一个 &lt;code&gt;ValueError&lt;/code&gt; 异常，如果在指定的未来存在不例外，将引发异常。</target>
        </trans-unit>
        <trans-unit id="ef24e3c1b8f7b901d42c45e46f29ceddb0745dc1" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;export&lt;/code&gt; statement can be used for symbol forwarding so that client modules don't need to import a module's dependencies:</source>
          <target state="translated">一个 &lt;code&gt;export&lt;/code&gt; 语句可以用于符号转发功能，即客户端模块不需要导入一个模块的依赖关系：</target>
        </trans-unit>
        <trans-unit id="73a35d34d5220f34295669a5c8b933dc1ceedeca" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;untyped&lt;/code&gt; parameter means that symbol lookups and type resolution is not performed before the expression is passed to the template. This means that for example &lt;em&gt;undeclared&lt;/em&gt; identifiers can be passed to the template:</source>
          <target state="translated">一个 &lt;code&gt;untyped&lt;/code&gt; 那个符号的查找和类型分辨率不表达之前执行参数的装置被传递给模板。这意味着例如可以将&lt;em&gt;未声明的&lt;/em&gt;标识符传递给模板：</target>
        </trans-unit>
        <trans-unit id="bae34c49da483225476ede34178ee0a4cd7dbb4e" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;if expression&lt;/em&gt; is almost like an if statement, but it is an expression. Example:</source>
          <target state="translated">一个&lt;em&gt;如果表达式&lt;/em&gt;是几乎就像if语句，但它是一个表达式。例：</target>
        </trans-unit>
        <trans-unit id="6913655373469dbc7b3bf423a90b3116ade5a64c" translate="yes" xml:space="preserve">
          <source>An &lt;span id=&quot;identifier_1&quot;&gt;identifier&lt;/span&gt; is a symbol declared as a name for a variable, type, procedure, etc. The region of the program over which a declaration applies is called the &lt;span id=&quot;scope_1&quot;&gt;scope&lt;/span&gt; of the declaration. Scopes can be nested. The meaning of an identifier is determined by the smallest enclosing scope in which the identifier is declared unless overloading resolution rules suggest otherwise.</source>
          <target state="translated">一个&lt;span id=&quot;identifier_1&quot;&gt;标识符&lt;/span&gt;是声明为一个变量，类型，顺序的名称等在其上声明适用被称为节目的区域中的符号&lt;span id=&quot;scope_1&quot;&gt;范围&lt;/span&gt;的声明的。范围可以嵌套。标识符的含义由声明该标识符的最小包围范围确定，除非超载解析规则另有建议。</target>
        </trans-unit>
        <trans-unit id="27d850be93dc755d2b65d8e923239958da9648c2" translate="yes" xml:space="preserve">
          <source>An &lt;span id=&quot;unchecked-runtime-error_1&quot;&gt;unchecked runtime error&lt;/span&gt; is an error that is not guaranteed to be detected, and can cause the subsequent behavior of the computation to be arbitrary. Unchecked runtime errors cannot occur if only &lt;span id=&quot;safe_1&quot;&gt;safe&lt;/span&gt; language features are used.</source>
          <target state="translated">一个&lt;span id=&quot;unchecked-runtime-error_1&quot;&gt;未经检查的运行时错误&lt;/span&gt;是不能保证被检测到，并且可能导致所述计算的后续行为是任意一个错误。如果仅使用&lt;span id=&quot;safe_1&quot;&gt;安全&lt;/span&gt;语言功能，则不会发生未经检查的运行时错误。</target>
        </trans-unit>
        <trans-unit id="d086f48ed32221353a34e9e09e19fc50d2b08517" translate="yes" xml:space="preserve">
          <source>An EOS (or ESSL if socket is an SSL socket) exception is raised if an error occurs.</source>
          <target state="translated">如果发生错误,会引发一个EOS(如果套接字是SSL套接字,则为ESL)异常。</target>
        </trans-unit>
        <trans-unit id="fad595a4ff6c034a05915aa77a9cf525f3217cd5" translate="yes" xml:space="preserve">
          <source>An EOS exception will be raised in the case of a socket error.</source>
          <target state="translated">当出现套接字错误时,将引发EOS异常。</target>
        </trans-unit>
        <trans-unit id="3690729b1f993aa06abd14818e2a3ebd8ae6f4b1" translate="yes" xml:space="preserve">
          <source>An OS-dependent trailing slash is always present at the end of the returned string; &lt;em&gt;` on Windows and `/&lt;/em&gt; on all other OSs.</source>
          <target state="translated">返回字符串的末尾始终存在与OS相关的尾部斜杠；&lt;em&gt;Windows上的`和&lt;/em&gt;其他所有操作系统上的&lt;em&gt;`/&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="cb3c7dd4ccfc76b560ed8bea7cb91f6e590b5de7" translate="yes" xml:space="preserve">
          <source>An SQL statement that is passed from Nim to an SQL database might be modelled as a string. However, using string templates and filling in the values is vulnerable to the famous &lt;span id=&quot;sql-injection-attack_1&quot;&gt;SQL injection attack&lt;/span&gt;:</source>
          <target state="translated">从Nim传递到SQL数据库的SQL语句可以建模为字符串。但是，使用字符串模板并填充值很容易受到著名的&lt;span id=&quot;sql-injection-attack_1&quot;&gt;SQL注入攻击的攻击&lt;/span&gt;：</target>
        </trans-unit>
        <trans-unit id="d6b5b2a52bea6b4b6255ab33c977d4534669e142" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; 的别名。</target>
        </trans-unit>
        <trans-unit id="544692451d460228f4efd605a86e7c0dab8a35ee" translate="yes" xml:space="preserve">
          <source>An alias for &lt;em&gt;countup(a, b, 1)&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;countup（a，b，1）&lt;/em&gt;的别名。</target>
        </trans-unit>
        <trans-unit id="936583901537efa6474af706c7cbc7258cf9502a" translate="yes" xml:space="preserve">
          <source>An alias for &lt;em&gt;name&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;name&lt;/em&gt;的别名。</target>
        </trans-unit>
        <trans-unit id="d96ad4829046669ed22f88ed72333f46e46f422a" translate="yes" xml:space="preserve">
          <source>An alias for copyNimTree().</source>
          <target state="translated">copyNimTree()的别名。</target>
        </trans-unit>
        <trans-unit id="2bb4f7d6ba1dc1ca472b28bc42274504e162f7f7" translate="yes" xml:space="preserve">
          <source>An alternative character used by the operating system to separate pathname components, or the same as &lt;em&gt;DirSep&lt;/em&gt; if only one separator character exists. This is set to '/' on Windows systems where &lt;em&gt;DirSep&lt;/em&gt; is a backslash.</source>
          <target state="translated">操作系统用来分隔路径名组件的替代字符&lt;em&gt;；&lt;/em&gt;如果仅存在一个分隔符，则与&lt;em&gt;DirSep&lt;/em&gt;相同。在&lt;em&gt;DirSep&lt;/em&gt;是反斜杠的Windows系统上，将其设置为&amp;ldquo; /&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="b10f9786df0315b28bef975ab41acecfb36800af" translate="yes" xml:space="preserve">
          <source>An apostrophe &lt;code&gt;'&lt;/code&gt; followed by an integer &lt;code&gt;i&lt;/code&gt; in the range 0..9 is replaced by the i'th parameter &lt;em&gt;type&lt;/em&gt;. The 0th position is the result type. This can be used to pass types to C++ function templates. Between the &lt;code&gt;'&lt;/code&gt; and the digit an asterisk can be used to get to the base type of the type. (So it &quot;takes away a star&quot; from the type; &lt;code&gt;T*&lt;/code&gt; becomes &lt;code&gt;T&lt;/code&gt;.) Two stars can be used to get to the element type of the element type etc.</source>
          <target state="translated">第i个参数&lt;em&gt;类型&lt;/em&gt;替换了 &lt;code&gt;'&lt;/code&gt; 0'.9 后跟一个整数 &lt;code&gt;i&lt;/code&gt; 的撇号'。第0个位置是结果类型。这可用于将类型传递给C ++函数模板。在 &lt;code&gt;'&lt;/code&gt; 和数字之间，可以使用星号获取该类型的基本类型。 （因此它从类型中&amp;ldquo;夺走了一颗星星； &lt;code&gt;T*&lt;/code&gt; 变为 &lt;code&gt;T&lt;/code&gt; 。&amp;rdquo;）可以使用两颗星星来获取元素类型等的元素类型。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dcf4f417901eafdc569fc787f5454f9027073421" translate="yes" xml:space="preserve">
          <source>An array is a simple fixed length container. Each element in an array has the same type. The array's index type can be any ordinal type.</source>
          <target state="translated">数组是一个简单的固定长度容器。数组中的每个元素都有相同的类型。数组的索引类型可以是任何序数类型。</target>
        </trans-unit>
        <trans-unit id="00d1d57ff3f35fb4d74599ef1b920f45e23521b6" translate="yes" xml:space="preserve">
          <source>An asynchronous procedure is marked using the &lt;code&gt;{.async.}&lt;/code&gt; pragma. When marking a procedure with the &lt;code&gt;{.async.}&lt;/code&gt; pragma it must have a &lt;code&gt;Future[T]&lt;/code&gt; return type or no return type at all. If you do not specify a return type then &lt;code&gt;Future[void]&lt;/code&gt; is assumed.</source>
          <target state="translated">异步过程使用 &lt;code&gt;{.async.}&lt;/code&gt; 编译指示。在使用 &lt;code&gt;{.async.}&lt;/code&gt; 注标记过程时，它必须具有 &lt;code&gt;Future[T]&lt;/code&gt; 返回类型或根本没有返回类型。如果未指定返回类型，则将使用 &lt;code&gt;Future[void]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00cfb3b823850859ac087c9650335459fba3693e" translate="yes" xml:space="preserve">
          <source>An at symbol &lt;code&gt;@&lt;/code&gt; is replaced by the remaining arguments, separated by commas.</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; 符号会被其余参数替换，并用逗号分隔。</target>
        </trans-unit>
        <trans-unit id="e0a7ceb8146505e07f088182b71243011ca4cc3a" translate="yes" xml:space="preserve">
          <source>An empty &lt;code&gt;discard&lt;/code&gt; statement is often used as a null statement:</source>
          <target state="translated">空的 &lt;code&gt;discard&lt;/code&gt; 语句通常用作null语句：</target>
        </trans-unit>
        <trans-unit id="63b984f97355b1726a5cf0fa4b3612ccc2253bdc" translate="yes" xml:space="preserve">
          <source>An empty &lt;code&gt;raises&lt;/code&gt; list (&lt;code&gt;raises: []&lt;/code&gt;) means that no exception may be raised:</source>
          <target state="translated">空的 &lt;code&gt;raises&lt;/code&gt; 列表（ &lt;code&gt;raises: []&lt;/code&gt; ）表示不会引发任何异常：</target>
        </trans-unit>
        <trans-unit id="03f5c98cab13364c0bdb7873271e1f3fbcb787f2" translate="yes" xml:space="preserve">
          <source>An empty subscript &lt;code&gt;[]&lt;/code&gt; notation can be used to derefer a reference, the &lt;code&gt;addr&lt;/code&gt; procedure returns the address of an item. An address is always an untraced reference. Thus the usage of &lt;code&gt;addr&lt;/code&gt; is an &lt;em&gt;unsafe&lt;/em&gt; feature.</source>
          <target state="translated">空的下标 &lt;code&gt;[]&lt;/code&gt; 表示法可用于取消引用， &lt;code&gt;addr&lt;/code&gt; 过程返回项的地址。地址始终是未跟踪的引用。因此，使用 &lt;code&gt;addr&lt;/code&gt; 是&lt;em&gt;不安全的&lt;/em&gt;功能。</target>
        </trans-unit>
        <trans-unit id="fd0163ff197f89984c82c49af75d8bfe8b3b9a66" translate="yes" xml:space="preserve">
          <source>An enum can be marked with the &lt;code&gt;pure&lt;/code&gt; pragma so that it's fields are added to a special module specific hidden scope that is only queried as the last attempt. Only non-ambiguous symbols are added to this scope. But one can always access these via type qualification written as &lt;code&gt;MyEnum.value&lt;/code&gt;:</source>
          <target state="translated">枚举可以用 &lt;code&gt;pure&lt;/code&gt; pragma 标记，以便将其字段添加到特定于模块的特殊隐藏范围，该范围仅在最后一次尝试时才查询。仅将明确的符号添加到此范围。但是，人们总是可以通过写为 &lt;code&gt;MyEnum.value&lt;/code&gt; 的类型限定条件来访问它们：</target>
        </trans-unit>
        <trans-unit id="390d5ff2cbaae78dc0fa4290b4e9610666cc8fdf" translate="yes" xml:space="preserve">
          <source>An enum type can be marked as &lt;code&gt;pure&lt;/code&gt;. Then access of its fields always requires full qualification.</source>
          <target state="translated">枚举类型可以标记为 &lt;code&gt;pure&lt;/code&gt; 。然后，访问其字段始终需要完全资格。</target>
        </trans-unit>
        <trans-unit id="367c78270c2f231073a0357927182872afdf0f63" translate="yes" xml:space="preserve">
          <source>An enum which hold event types</source>
          <target state="translated">一个包含事件类型的枚举</target>
        </trans-unit>
        <trans-unit id="4dcfd8f767ff68c968ba90d84fa6dca78b2ac575" translate="yes" xml:space="preserve">
          <source>An enumeration's symbol can be qualified to avoid ambiguities: &lt;code&gt;Direction.south&lt;/code&gt;.</source>
          <target state="translated">可以对枚举的符号进行限定以避免歧义： &lt;code&gt;Direction.south&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="83a58494419b1a3e524ebfb95e03913553034371" translate="yes" xml:space="preserve">
          <source>An example &lt;code&gt;handleAccept&lt;/code&gt; follows:</source>
          <target state="translated">示例 &lt;code&gt;handleAccept&lt;/code&gt; 如下：</target>
        </trans-unit>
        <trans-unit id="f481ad49809e7c27b79d2e6d830283b22c04c1f7" translate="yes" xml:space="preserve">
          <source>An example:</source>
          <target state="translated">一个例子:</target>
        </trans-unit>
        <trans-unit id="993744896fbb24a8143d61db93a5b797f2af5f88" translate="yes" xml:space="preserve">
          <source>An explicit ordered enum can have &lt;em&gt;holes&lt;/em&gt;:</source>
          <target state="translated">一个显式的有序枚举可以有&lt;em&gt;漏洞&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="a5f3c80df868038bd59209ddaecef0136b0eb492" translate="yes" xml:space="preserve">
          <source>An exported helper proc that parses the &quot;standard format specifiers&quot;, as specified by the grammar:</source>
          <target state="translated">一个导出的帮助程序,用于解析语法指定的 &quot;标准格式指定符&quot;。</target>
        </trans-unit>
        <trans-unit id="129cc9980afbc0b6d02dd90e59a7e2eac8eb8d2f" translate="yes" xml:space="preserve">
          <source>An expression &lt;code&gt;b&lt;/code&gt; can be assigned to an expression &lt;code&gt;a&lt;/code&gt; iff &lt;code&gt;a&lt;/code&gt; is an &lt;em&gt;l-value&lt;/em&gt; and &lt;code&gt;isImplicitlyConvertible(b.typ, a.typ)&lt;/code&gt; holds.</source>
          <target state="translated">的表达式 &lt;code&gt;b&lt;/code&gt; 可以被分配到一个表达 &lt;code&gt;a&lt;/code&gt; 当且仅当 &lt;code&gt;a&lt;/code&gt; 是&lt;em&gt;L值&lt;/em&gt;和 &lt;code&gt;isImplicitlyConvertible(b.typ, a.typ)&lt;/code&gt; 成立。</target>
        </trans-unit>
        <trans-unit id="7d2a0ca1f92482471cb1498e046b1a61df5075bd" translate="yes" xml:space="preserve">
          <source>An expression like &lt;code&gt;&amp;amp;&quot;{key} is {value:arg} {{z}}&quot;&lt;/code&gt; is transformed into:</source>
          <target state="translated">像 &lt;code&gt;&amp;amp;&quot;{key} is {value:arg} {{z}}&quot;&lt;/code&gt; 这样的表达式将转换为：</target>
        </trans-unit>
        <trans-unit id="5cf1e65690ce8b0321d174674e5faf95e0f45bd9" translate="yes" xml:space="preserve">
          <source>An expression specifies a computation that produces a value or location. Expressions that produce locations are called &lt;span id=&quot;lminusvalues_1&quot;&gt;l-values&lt;/span&gt;. An l-value can denote either a location or the value the location contains, depending on the context. Expressions whose values can be determined statically are called &lt;span id=&quot;constant-expressions_1&quot;&gt;constant expressions&lt;/span&gt;; they are never l-values.</source>
          <target state="translated">表达式指定产生值或位置的计算。产生位置的表达式称为&lt;span id=&quot;lminusvalues_1&quot;&gt;l值&lt;/span&gt;。一个l值可以表示一个位置或该位置包含的值，具体取决于上下文。其值可以静态确定的&lt;span id=&quot;constant-expressions_1&quot;&gt;表达式&lt;/span&gt;称为&lt;span id=&quot;constant-expressions_1&quot;&gt;常量表达式&lt;/span&gt; ; 它们永远不是l值。</target>
        </trans-unit>
        <trans-unit id="1e306939f1b61ed5f05365a4a82b6e0e9f803e5d" translate="yes" xml:space="preserve">
          <source>An if expression always results in a value, so the &lt;code&gt;else&lt;/code&gt; part is required. &lt;code&gt;Elif&lt;/code&gt; parts are also allowed.</source>
          <target state="translated">if表达式始终会产生一个值，因此 &lt;code&gt;else&lt;/code&gt; 部分是必需的。 &lt;code&gt;Elif&lt;/code&gt; 部分也允许。</target>
        </trans-unit>
        <trans-unit id="55f00c59e69693d5b27bf05aeea67c1b5656b713" translate="yes" xml:space="preserve">
          <source>An implementation should always use the maximum precision available to evaluate floating pointer values at compile time; this means expressions like &lt;code&gt;0.09'f32 + 0.01'f32 == 0.09'f64 + 0.01'f64&lt;/code&gt; are true.</source>
          <target state="translated">在编译时，实现应始终使用最大的精度来评估浮动指针值。这意味着像 &lt;code&gt;0.09'f32 + 0.01'f32 == 0.09'f64 + 0.01'f64&lt;/code&gt; 这样的表达式为真。</target>
        </trans-unit>
        <trans-unit id="4faf8ef86d99d8f87188a85418d2cafbed7c672a" translate="yes" xml:space="preserve">
          <source>An integer with the column you are going to query. For the compiler columns start at &lt;strong&gt;0&lt;/strong&gt;.</source>
          <target state="translated">您要查询的列的整数。对于编译器，列从&lt;strong&gt;0&lt;/strong&gt;开始。</target>
        </trans-unit>
        <trans-unit id="7140df7bbe5e3e07dff6576529cef23b438e6cf3" translate="yes" xml:space="preserve">
          <source>An integer with the column you are going to query. For the compiler columns start at zero, so the first column will be &lt;strong&gt;0&lt;/strong&gt; and the last in an 80 column terminal will be &lt;strong&gt;79&lt;/strong&gt;.</source>
          <target state="translated">您要查询的列的整数。对于编译器，列从零开始，因此第一列将为&lt;strong&gt;0&lt;/strong&gt;，而80列终端的最后一列将为&lt;strong&gt;79&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="58c18cab7c4720f0e3aa95f69ca0b844006c41f0" translate="yes" xml:space="preserve">
          <source>An integer with the line you are going to query. For the compiler lines start at &lt;strong&gt;1&lt;/strong&gt;.</source>
          <target state="translated">您要查询的行的整数。对于编译器行，从&lt;strong&gt;1&lt;/strong&gt;开始。</target>
        </trans-unit>
        <trans-unit id="fd63b4dca2c3b56a63f528ea8506804126dab43c" translate="yes" xml:space="preserve">
          <source>An iterator is similar to a procedure, except that it can be called in the context of a &lt;code&gt;for&lt;/code&gt; loop. Iterators provide a way to specify the iteration over an abstract type. A key role in the execution of a &lt;code&gt;for&lt;/code&gt; loop plays the &lt;code&gt;yield&lt;/code&gt; statement in the called iterator. Whenever a &lt;code&gt;yield&lt;/code&gt; statement is reached the data is bound to the &lt;code&gt;for&lt;/code&gt; loop variables and control continues in the body of the &lt;code&gt;for&lt;/code&gt; loop. The iterator's local variables and execution state are automatically saved between calls. Example:</source>
          <target state="translated">迭代器类似于过程，不同之处在于可以在 &lt;code&gt;for&lt;/code&gt; 循环的上下文中调用它。迭代器提供了一种在抽象类型上指定迭代的方法。 &lt;code&gt;for&lt;/code&gt; 循环执行中的关键作用是在称为迭代器的 &lt;code&gt;yield&lt;/code&gt; 语句中。每当到达 &lt;code&gt;yield&lt;/code&gt; 语句时，数据就会绑定到 &lt;code&gt;for&lt;/code&gt; 循环变量，并且控制将继续在 &lt;code&gt;for&lt;/code&gt; 循环的主体中进行。迭代器的局部变量和执行状态在两次调用之间自动保存。例：</target>
        </trans-unit>
        <trans-unit id="1f5ff3abd757e3cba00a39f18b56b5fb6446a8c0" translate="yes" xml:space="preserve">
          <source>An object type can be marked with the &lt;code&gt;pure&lt;/code&gt; pragma so that its type field which is used for runtime type identification is omitted. This used to be necessary for binary compatibility with other compiled languages.</source>
          <target state="translated">可以用 &lt;code&gt;pure&lt;/code&gt; 编译指示符标记对象类型，以便省略用于运行时类型标识的对象类型字段。这对于与其他编译语言进行二进制兼容性是必需的。</target>
        </trans-unit>
        <trans-unit id="2e8278ca51d6d95aa64a5e6c057a546e2ca28c42" translate="yes" xml:space="preserve">
          <source>An object which holds descriptors to be checked for read/write status</source>
          <target state="translated">一个存放描述符的对象,用于检查读/写状态。</target>
        </trans-unit>
        <trans-unit id="3274465cde86ef19fbd6e85a8dde25fac63bf653" translate="yes" xml:space="preserve">
          <source>An object which holds result for descriptor</source>
          <target state="translated">为描述符保存结果的对象</target>
        </trans-unit>
        <trans-unit id="e62ca354a533c308819dea987dbbf454b1323735" translate="yes" xml:space="preserve">
          <source>An object which holds user defined event</source>
          <target state="translated">一个持有用户定义事件的对象</target>
        </trans-unit>
        <trans-unit id="004526c446f1ac6d78516b74ee9cfa40b5941993" translate="yes" xml:space="preserve">
          <source>An optional timeout can be specified in milliseconds, if reading from the</source>
          <target state="translated">可以指定一个可选的超时时间,如果从</target>
        </trans-unit>
        <trans-unit id="be0cf6034a987ab54cdc28a91621a1407148ad61" translate="yes" xml:space="preserve">
          <source>An optional timeout can be specified in milliseconds, if skipping the bytes takes longer than specified an ETimeout exception will be raised.</source>
          <target state="translated">可以指定一个可选的超时时间,单位是毫秒,如果跳过字节的时间比指定的时间长,将引发一个ETimeout异常。</target>
        </trans-unit>
        <trans-unit id="1436ea667171f8c043927d94a1771aba02c31130" translate="yes" xml:space="preserve">
          <source>An optional type that stores its value and state separately in a boolean.</source>
          <target state="translated">一个可选的类型,将其值和状态分别存储在一个布尔值中。</target>
        </trans-unit>
        <trans-unit id="1492892ce7573ee3544c47d10217feac9a1ffe27" translate="yes" xml:space="preserve">
          <source>Anchor: Matches at the end of the input. No character is consumed. Same as &lt;code&gt;!.&lt;/code&gt;.</source>
          <target state="translated">锚点：在输入末尾匹配。不会消耗任何字符。与 &lt;code&gt;!.&lt;/code&gt; 相同。。</target>
        </trans-unit>
        <trans-unit id="28501d5ba1b7346ee45610593888631bf0f75364" translate="yes" xml:space="preserve">
          <source>Anchor: Matches at the start of the input. No character is consumed.</source>
          <target state="translated">锚。匹配在输入的开始。不消耗字符。</target>
        </trans-unit>
        <trans-unit id="d5b80e8f8af7973d49e632e415ee520559b6880c" translate="yes" xml:space="preserve">
          <source>And &lt;code&gt;main&lt;/code&gt; imports &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;foo/x&lt;/code&gt; is imported. If &lt;code&gt;other&lt;/code&gt; imports &lt;code&gt;x&lt;/code&gt; then both &lt;code&gt;$lib/x.nim&lt;/code&gt; and &lt;code&gt;$lib/bar/x.nim&lt;/code&gt; match and so the compiler should reject it. Currently however this check is not implemented and instead the first matching file is used.</source>
          <target state="translated">并且 &lt;code&gt;main&lt;/code&gt; 导入 &lt;code&gt;x&lt;/code&gt; ， &lt;code&gt;foo/x&lt;/code&gt; 被导入。如果 &lt;code&gt;other&lt;/code&gt; 输入 &lt;code&gt;x&lt;/code&gt; 则 &lt;code&gt;$lib/x.nim&lt;/code&gt; 和 &lt;code&gt;$lib/bar/x.nim&lt;/code&gt; 匹配，因此编译器应拒绝它。但是，当前尚未执行此检查，而是使用了第一个匹配文件。</target>
        </trans-unit>
        <trans-unit id="242f34bf16bfc5e83d5742e55f63b87c019f679a" translate="yes" xml:space="preserve">
          <source>And copy the executable somewhere in your &lt;code&gt;$PATH&lt;/code&gt;.</source>
          <target state="translated">并将可执行文件复制到 &lt;code&gt;$PATH&lt;/code&gt; 某个位置。</target>
        </trans-unit>
        <trans-unit id="83dda4bc1c55dc87decca365a7ad42665d8106b1" translate="yes" xml:space="preserve">
          <source>And for a debug version compatible with GDB:</source>
          <target state="translated">而对于与GDB兼容的调试版本。</target>
        </trans-unit>
        <trans-unit id="4e8296500ed287ca2f86dd1c2fab187b68fe5d29" translate="yes" xml:space="preserve">
          <source>And predicate: Indicate success if expression &lt;em&gt;E&lt;/em&gt; matches the text ahead; otherwise indicate failure. Do not consume any text.</source>
          <target state="translated">和谓词：如果表达式&lt;em&gt;E&lt;/em&gt;与前面的文本匹配，则表明成功；否则表示失败。不要消耗任何文字。</target>
        </trans-unit>
        <trans-unit id="dd21179e471067255e31c8a35037ea42bc51b5d1" translate="yes" xml:space="preserve">
          <source>And the following code:</source>
          <target state="translated">还有下面的代码。</target>
        </trans-unit>
        <trans-unit id="529975d2ca1b9c8b1f9dc8715723302d776e3685" translate="yes" xml:space="preserve">
          <source>Annotating procs with raised exceptions</source>
          <target state="translated">对带有突起异常的procs进行注释</target>
        </trans-unit>
        <trans-unit id="1372df72c3414caae306a6854fbd73da2739c232" translate="yes" xml:space="preserve">
          <source>Anonymous Procs</source>
          <target state="translated">匿名程序</target>
        </trans-unit>
        <trans-unit id="fc69ddcac99b9b9a8d29c74edd5dd97109c0f888" translate="yes" xml:space="preserve">
          <source>Another common example is this:</source>
          <target state="translated">另一个常见的例子是这样的。</target>
        </trans-unit>
        <trans-unit id="46de23dafaa5135d298c4e6932bfd58f0a55fcd3" translate="yes" xml:space="preserve">
          <source>Another way is to make Nim invoke a cross compiler toolchain:</source>
          <target state="translated">另一种方法是让Nim调用一个交叉编译器工具链。</target>
        </trans-unit>
        <trans-unit id="220b3fd15cb7730c1f91330b6bd071c4acf9137b" translate="yes" xml:space="preserve">
          <source>Another way to branch is provided by the case statement. A case statement is a multi-branch:</source>
          <target state="translated">另一种分支方式是由case语句提供的。一个case语句就是一个多分支。</target>
        </trans-unit>
        <trans-unit id="b109a7f72d501d6581c64b2e20010ee624b143d1" translate="yes" xml:space="preserve">
          <source>Another way to do the same without &lt;code&gt;when&lt;/code&gt; is to leave the task of picking the appropriate code to a secondary proc which you overload for each field type and pass the &lt;em&gt;value&lt;/em&gt; to.</source>
          <target state="translated">另一种方法就是不一样 &lt;code&gt;when&lt;/code&gt; 是离开挑选合适的代码到你重载为每个字段类型的次级PROC的任务，并通过&lt;em&gt;价值&lt;/em&gt;来。</target>
        </trans-unit>
        <trans-unit id="cdcc64fe4174864c656f8d5ecbd49e1c1178af4e" translate="yes" xml:space="preserve">
          <source>Another way to look at the method call syntax is that it provides the missing postfix notation.</source>
          <target state="translated">另一种看待方法调用语法的方法是,它提供了缺失的postfix符号。</target>
        </trans-unit>
        <trans-unit id="a741689c8b0db1dc353a46642a34688e7e01c9fe" translate="yes" xml:space="preserve">
          <source>Any Unicode character: If there is an UTF-8 character ahead, consume it and indicate success. Otherwise indicate failure.</source>
          <target state="translated">任何Unicode字符。如果前面有一个UTF-8字符,则消耗它并表示成功。否则表示失败。</target>
        </trans-unit>
        <trans-unit id="5778ef8422665afffa8cd59a1ebfe6af7a70d367" translate="yes" xml:space="preserve">
          <source>Any character: If there is a character ahead, consume it and indicate success. Otherwise (that is, at the end of input) indicate failure.</source>
          <target state="translated">任何角色。如果前面有一个字符,就把它吃掉,并表示成功。否则(即在输入结束时)表示失败。</target>
        </trans-unit>
        <trans-unit id="7358bbc6ca3777f85150f64affeb40b274702a17" translate="yes" xml:space="preserve">
          <source>Any comments which are preceded by a double-hash (##), are interpreted as documentation. Comments are parsed as RST (see &lt;a href=&quot;http://docutils.sourceforge.net/docs/user/rst/quickref.html&quot;&gt;reference&lt;/a&gt;), providing Nim module authors the ability to easily generate richly formatted documentation with only their well-documented code.</source>
          <target state="translated">任何以双哈希（##）开头的注释均被解释为文档。注释被解析为RST（请参阅&lt;a href=&quot;http://docutils.sourceforge.net/docs/user/rst/quickref.html&quot;&gt;参考资料&lt;/a&gt;），从而使Nim模块作者仅使用他们有据可查的代码即可轻松生成格式丰富的文档。</target>
        </trans-unit>
        <trans-unit id="91e820fd709a7f87728034af624c9132692282ae" translate="yes" xml:space="preserve">
          <source>Any operator can be called like an ordinary proc with the '&lt;em&gt;opr&lt;/em&gt;' notation. (Thus an operator can have more than two parameters):</source>
          <target state="translated">任何运算符都可以像带有&amp;ldquo; &lt;em&gt;opr&lt;/em&gt; &amp;rdquo;符号的普通proc一样被调用。（因此，操作员可以具有两个以上的参数）：</target>
        </trans-unit>
        <trans-unit id="28a8d44708b00ee5f8ab5f8950f4590e672372e9" translate="yes" xml:space="preserve">
          <source>Any previously stored value will be overwritten.</source>
          <target state="translated">任何先前存储的值都会被覆盖。</target>
        </trans-unit>
        <trans-unit id="85cdc7b1f239ca6691d5ad4bd7ee32149be2368a" translate="yes" xml:space="preserve">
          <source>Any statements following the &lt;code&gt;defer&lt;/code&gt; in the current block will be considered to be in an implicit try block:</source>
          <target state="translated">在当前块中，在 &lt;code&gt;defer&lt;/code&gt; 之后的所有语句都将被视为在隐式try块中：</target>
        </trans-unit>
        <trans-unit id="f6cede9c40103cfeb38206a514d0e207b6286657" translate="yes" xml:space="preserve">
          <source>Any user defined destructors</source>
          <target state="translated">任何用户定义的析构器</target>
        </trans-unit>
        <trans-unit id="474bae604f6e9971bd49456c68cefe4610021141" translate="yes" xml:space="preserve">
          <source>Apart from &lt;code&gt;spawn&lt;/code&gt; and &lt;code&gt;parallel&lt;/code&gt; Nim also provides all the common low level concurrency mechanisms like locks, atomic intrinsics or condition variables.</source>
          <target state="translated">除了 &lt;code&gt;spawn&lt;/code&gt; 和 &lt;code&gt;parallel&lt;/code&gt; Nim还提供所有常见的低级并发机制，例如锁，原子内在函数或条件变量。</target>
        </trans-unit>
        <trans-unit id="562f1ef0862bc54a9d91c121544eee328c801e91" translate="yes" xml:space="preserve">
          <source>Apart from a few built-in keyword operators such as &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, operators always consist of these characters: &lt;code&gt;+ - * \ / &amp;lt; &amp;gt; = @ $ ~ &amp;amp; % ! ? ^ . |&lt;/code&gt;</source>
          <target state="translated">除了少数内置关键字运营商，如 &lt;code&gt;and&lt;/code&gt; ， &lt;code&gt;or&lt;/code&gt; ， &lt;code&gt;not&lt;/code&gt; ，运营商总是由这些字符： &lt;code&gt;+ - * \ / &amp;lt; &amp;gt; = @ $ ~ &amp;amp; % ! ? ^ . |&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bfe80b93d1b3cc277c929cdfd0838f7556135094" translate="yes" xml:space="preserve">
          <source>Apart from built-in operations like array indexing, memory allocation, etc. the &lt;code&gt;raise&lt;/code&gt; statement is the only way to raise an exception.</source>
          <target state="translated">除了诸如数组索引，内存分配等内置操作外， &lt;code&gt;raise&lt;/code&gt; 语句是引发异常的唯一方法。</target>
        </trans-unit>
        <trans-unit id="7dc1626458ca624671bbd7eb79e937465433fdf8" translate="yes" xml:space="preserve">
          <source>Apart from strings you can also encode lists of integers or characters:</source>
          <target state="translated">除了字符串,你还可以对整数或字符的列表进行编码。</target>
        </trans-unit>
        <trans-unit id="aafd7f63cf0cf31a35bff642569ecbe5c87f627c" translate="yes" xml:space="preserve">
          <source>Apart from the minimal syntactic sugar the language core does not need to know about tables.</source>
          <target state="translated">除了最起码的语法糖,语言核心不需要知道表。</target>
        </trans-unit>
        <trans-unit id="86d0496a927c4a27939c0fe3200738c8416afc23" translate="yes" xml:space="preserve">
          <source>Appends &lt;em&gt;x&lt;/em&gt; to string &lt;em&gt;s&lt;/em&gt; in place, applying quoting and escaping if &lt;em&gt;x&lt;/em&gt; is a string or char. See &lt;a href=&quot;system#addEscapedChar&quot;&gt;addEscapedChar&lt;/a&gt; for the escaping scheme. When &lt;em&gt;x&lt;/em&gt; is a string, characters in the range &lt;code&gt;{\128..\255}&lt;/code&gt; are never escaped so that multibyte UTF-8 characters are untouched (note that this behavior is different from &lt;code&gt;addEscapedChar&lt;/code&gt;).</source>
          <target state="translated">将&lt;em&gt;x&lt;/em&gt;附加在适当的字符串&lt;em&gt;s&lt;/em&gt;上，如果&lt;em&gt;x&lt;/em&gt;是字符串或char ，则应用引号和转义。有关转义方案，请参见&lt;a href=&quot;system#addEscapedChar&quot;&gt;addEscapedChar&lt;/a&gt;。当&lt;em&gt;x&lt;/em&gt;是字符串时，永远不会转义 &lt;code&gt;{\128..\255}&lt;/code&gt; 范围内的字符，以便不影响多字节UTF-8字符（请注意，此行为不同于 &lt;code&gt;addEscapedChar&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="646ba0c86d2da62ac809b41c7876c8d4d437f4fd" translate="yes" xml:space="preserve">
          <source>Appends &lt;em&gt;y&lt;/em&gt; to &lt;em&gt;x&lt;/em&gt; in place</source>
          <target state="translated">追加&lt;em&gt;&amp;Yuml;&lt;/em&gt;以&lt;em&gt;X&lt;/em&gt;代替</target>
        </trans-unit>
        <trans-unit id="621c0cff6d7cb368d8e84f223d0bb258c1851898" translate="yes" xml:space="preserve">
          <source>Appends element y to the end of the sequence. Requires copying of the sequence</source>
          <target state="translated">将元素y添加到序列的末端。需要复制序列</target>
        </trans-unit>
        <trans-unit id="4b93e2750d5e019c95354307daa55b9ae9ae1eb1" translate="yes" xml:space="preserve">
          <source>Appends url to url.</source>
          <target state="translated">将url附加到url上。</target>
        </trans-unit>
        <trans-unit id="8b39b7cf4b0a60e8defe6d54cb8868dcdb0f1e4b" translate="yes" xml:space="preserve">
          <source>Applies &lt;em&gt;op&lt;/em&gt; to every item in &lt;em&gt;s&lt;/em&gt; modifying it directly.</source>
          <target state="translated">将&lt;em&gt;op&lt;/em&gt;应用于&lt;em&gt;s中的&lt;/em&gt;每个项目，直接对其进行修改。</target>
        </trans-unit>
        <trans-unit id="47c68a697222d8231db69fecdc76aa3f8118fca0" translate="yes" xml:space="preserve">
          <source>Applies a callback to the value in this Option</source>
          <target state="translated">将回调应用于此选项中的值。</target>
        </trans-unit>
        <trans-unit id="1f6c6510cdda5cd1b191679d2ebcc3574091831b" translate="yes" xml:space="preserve">
          <source>Applies a callback to the value in this Option and returns an option containing the new value. If this option is None, None will be returned</source>
          <target state="translated">对该选项中的值进行回调,并返回一个包含新值的选项。如果该选项为None,则返回None。</target>
        </trans-unit>
        <trans-unit id="4405334856a221170be55f8b9f5688d6a0be9c57" translate="yes" xml:space="preserve">
          <source>Applies a callback to the value in this Option and returns an option containing the new value. If this option is None, None will be returned. Similar to &lt;code&gt;map&lt;/code&gt;, with the difference that the callback returns an Option, not a raw value. This allows multiple procs with a signature of &lt;code&gt;A -&amp;gt; Option[B]&lt;/code&gt; (including A = B) to be chained together.</source>
          <target state="translated">将回调应用于此Option中的值，并返回包含新值的选项。如果此选项为None，则将返回None。与 &lt;code&gt;map&lt;/code&gt; 相似，区别在于回调返回的是Option而不是原始值。这允许将具有 &lt;code&gt;A -&amp;gt; Option[B]&lt;/code&gt; （包括A = B）签名的多个proc 链接在一起。</target>
        </trans-unit>
        <trans-unit id="465dd40623dd93f42a5f03dcd0c6972a66643b81" translate="yes" xml:space="preserve">
          <source>Applies a callback to the value in this Option. If the callback returns &lt;em&gt;true&lt;/em&gt;, the option is returned as a Some. If it returns false, it is returned as a None.</source>
          <target state="translated">将回调应用于此Option中的值。如果回调返回&lt;em&gt;true&lt;/em&gt;，则该选项作为Some返回。如果返回false，则返回None。</target>
        </trans-unit>
        <trans-unit id="31b8834506fb3b7c5be5a3ce85e8e0c3db7c0b3f" translate="yes" xml:space="preserve">
          <source>Arguments are delimited by white space, which is either a space or a tab.</source>
          <target state="translated">参数以空格为界,可以是空格,也可以是制表符。</target>
        </trans-unit>
        <trans-unit id="401bb179f3db6b973c284e019e2540619d382218" translate="yes" xml:space="preserve">
          <source>Arguments that are passed to a &lt;code&gt;varargs&lt;/code&gt; parameter are wrapped in an array constructor expression. This is why &lt;code&gt;debug&lt;/code&gt; iterates over all of &lt;code&gt;n&lt;/code&gt;'s children.</source>
          <target state="translated">传递给 &lt;code&gt;varargs&lt;/code&gt; 参数的参数包装在数组构造函数表达式中。这就是为什么 &lt;code&gt;debug&lt;/code&gt; 迭代所有 &lt;code&gt;n&lt;/code&gt; 个孩子的原因。</target>
        </trans-unit>
        <trans-unit id="a0478ca5f4c068ca3ac12f9474f6a15865ce9053" translate="yes" xml:space="preserve">
          <source>Arguments:</source>
          <target state="translated">Arguments:</target>
        </trans-unit>
        <trans-unit id="52bae2349fbad4ef35978d796cfe4b7d32461d9e" translate="yes" xml:space="preserve">
          <source>Array access operator &lt;code&gt;[]&lt;/code&gt;</source>
          <target state="translated">数组访问运算符 &lt;code&gt;[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="935c34e59be520dab8667587be24775c6b59c8e5" translate="yes" xml:space="preserve">
          <source>Array and sequence types</source>
          <target state="translated">阵列和序列类型</target>
        </trans-unit>
        <trans-unit id="b66b4ebd826229d404911b2c9ca9b59007c74879" translate="yes" xml:space="preserve">
          <source>Array with no bounds checking</source>
          <target state="translated">无边界检查的阵列</target>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="7c78840740ada4caee391a3c7d72b96b3524a2c8" translate="yes" xml:space="preserve">
          <source>Arrays are a homogeneous type, meaning that each element in the array has the same type. Arrays always have a fixed length which is specified at compile time (except for open arrays). They can be indexed by any ordinal type. A parameter &lt;code&gt;A&lt;/code&gt; may be an &lt;em&gt;open array&lt;/em&gt;, in which case it is indexed by integers from 0 to &lt;code&gt;len(A)-1&lt;/code&gt;. An array expression may be constructed by the array constructor &lt;code&gt;[]&lt;/code&gt;. The element type of this array expression is inferred from the type of the first element. All other elements need to be implicitly convertable to this type.</source>
          <target state="translated">数组是同构类型，这意味着数组中的每个元素都具有相同的类型。数组始终具有在编译时指定的固定长度（开放数组除外）。它们可以按任何序数类型索引。参数 &lt;code&gt;A&lt;/code&gt; 可以是一个&lt;em&gt;开放数组&lt;/em&gt;，在这种情况下，它由0到 &lt;code&gt;len(A)-1&lt;/code&gt; 的整数索引。数组表达式可以由数组构造函数 &lt;code&gt;[]&lt;/code&gt; 构造。该数组表达式的元素类型是从第一个元素的类型推断出来的。所有其他元素都需要隐式转换为该类型。</target>
        </trans-unit>
        <trans-unit id="07316b5238311cac8e4fe1961ee02c15801cb68e" translate="yes" xml:space="preserve">
          <source>Arrays are always bounds checked (at compile-time or at runtime). These checks can be disabled via pragmas or invoking the compiler with the &lt;code&gt;--boundChecks:off&lt;/code&gt; command line switch.</source>
          <target state="translated">总是对数组进行边界检查（在编译时或运行时）。可以通过编译指示或使用 &lt;code&gt;--boundChecks:off&lt;/code&gt; 命令行开关调用编译器来禁用这些检查。</target>
        </trans-unit>
        <trans-unit id="5f5ec03ff46845d078f8cf64b1238f79972295a5" translate="yes" xml:space="preserve">
          <source>Arrays are value types, like any other Nim type. The assignment operator copies the whole array contents.</source>
          <target state="translated">数组和其他Nim类型一样,都是值类型。赋值操作符可以复制整个数组的内容。</target>
        </trans-unit>
        <trans-unit id="025a9e98dcb0da2dd59c51da809f12fce4980b2a" translate="yes" xml:space="preserve">
          <source>Arrays can be constructed using &lt;code&gt;[]&lt;/code&gt;:</source>
          <target state="translated">可以使用 &lt;code&gt;[]&lt;/code&gt; 构造数组：</target>
        </trans-unit>
        <trans-unit id="c735544485e105956e388f5a452d2502051ca6e1" translate="yes" xml:space="preserve">
          <source>Artifact being compiled.</source>
          <target state="translated">正在编纂的文物。</target>
        </trans-unit>
        <trans-unit id="2681d14f693853cb31e8a490d26bf55ce9311d0e" translate="yes" xml:space="preserve">
          <source>As a regular expression &lt;code&gt;\[.*\]&lt;/code&gt; matches the longest possible text between &lt;code&gt;'['&lt;/code&gt; and &lt;code&gt;']'&lt;/code&gt;. As a PEG it never matches anything, because a PEG is deterministic: &lt;code&gt;.*&lt;/code&gt; consumes the rest of the input, so &lt;code&gt;\]&lt;/code&gt; never matches. As a PEG this needs to be written as: &lt;code&gt;\[ ( !\] . )* \]&lt;/code&gt; (or &lt;code&gt;\[ @ \]&lt;/code&gt;).</source>
          <target state="translated">作为正则表达式 &lt;code&gt;\[.*\]&lt;/code&gt; 匹配 &lt;code&gt;'['&lt;/code&gt; 和 &lt;code&gt;']'&lt;/code&gt; 之间的最长文本。作为PEG，它永远不会匹配任何内容，因为PEG是确定性的： &lt;code&gt;.*&lt;/code&gt; 会消耗其余的输入，因此 &lt;code&gt;\]&lt;/code&gt; 不会匹配。作为PEG，它需要写为： &lt;code&gt;\[ ( !\] . )* \]&lt;/code&gt; （或 &lt;code&gt;\[ @ \]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7d98662c0a3a8c4fd899d63977fd61a1ce489676" translate="yes" xml:space="preserve">
          <source>As a result of using optimized function/intrinsics some functions can return undefined results if the input is invalid. You can use the flag &lt;em&gt;noUndefinedBitOpts&lt;/em&gt; to force predictable behaviour for all input, causing a small performance hit.</source>
          <target state="translated">由于使用了优化的函数/内部函数，因此如果输入无效，某些函数可能会返回未定义的结果。您可以使用标志&lt;em&gt;noUndefinedBitOpts&lt;/em&gt;对所有输入强制执行可预测的行为，从而降低性能。</target>
        </trans-unit>
        <trans-unit id="1664c8e0b3003ab199f6ca491156febd8a7827ee" translate="yes" xml:space="preserve">
          <source>As a rule of thumb, indentation within expressions is allowed after operators, an open parenthesis and after commas.</source>
          <target state="translated">根据经验,在表达式中,允许在运算符、开括号和逗号之后进行缩进。</target>
        </trans-unit>
        <trans-unit id="1bbf2a9820bf41bcc3ae860ff3066a54791d55a8" translate="yes" xml:space="preserve">
          <source>As a side note, if you choose to use infix operators in a prefix form, the AST behaves as a [parenthetical function call](./macros.html#calls-expressions-call-with) with &lt;code&gt;nnkAccQuoted&lt;/code&gt;, as follows:</source>
          <target state="translated">附带说明一下，如果您选择以前缀形式使用中缀运算符，则AST的行为与[nk附加函数调用]（./ macros.html＃calls-expressions-call-with）和 &lt;code&gt;nnkAccQuoted&lt;/code&gt; 相同，如下所示：</target>
        </trans-unit>
        <trans-unit id="15211f47465417179a8c67c3321dc2d1d401fb39" translate="yes" xml:space="preserve">
          <source>As a special more convenient notation, proc expressions involved in procedure calls can use the &lt;code&gt;do&lt;/code&gt; keyword:</source>
          <target state="translated">作为一种更方便的特殊表示法，过程调用中涉及的proc表达式可以使用 &lt;code&gt;do&lt;/code&gt; 关键字：</target>
        </trans-unit>
        <trans-unit id="ce683dd181064064b72fd86d9d3e2b66acc2d7ce" translate="yes" xml:space="preserve">
          <source>As a special rule to keep backwards compatibility with older versions of the &lt;code&gt;importcpp&lt;/code&gt; pragma, if there is no special pattern character (any of &lt;code&gt;# ' @&lt;/code&gt;) at all, C++'s dot or arrow notation is assumed, so the above example can also be written as:</source>
          <target state="translated">作为保持与较早版本的 &lt;code&gt;importcpp&lt;/code&gt; pragma的向后兼容性的特殊规则，如果根本没有特殊的模式字符（任何 &lt;code&gt;# ' @&lt;/code&gt; ），则假定使用C ++的点或箭头符号，因此上述示例也可以写成：</target>
        </trans-unit>
        <trans-unit id="afa79fbae0eabebb420b9fe3f09c01088cf66351" translate="yes" xml:space="preserve">
          <source>As a special rule, when the value of &lt;code&gt;decodePlus&lt;/code&gt; is true, &lt;code&gt;'+'&lt;/code&gt; characters are converted to a space.</source>
          <target state="translated">作为一条特殊规则，当 &lt;code&gt;decodePlus&lt;/code&gt; 的值为true时， &lt;code&gt;'+'&lt;/code&gt; 字符将转换为空格。</target>
        </trans-unit>
        <trans-unit id="1b120a7d9f07026a29d56a412d87eb19ed8fa37b" translate="yes" xml:space="preserve">
          <source>As a special rule, when the value of &lt;code&gt;usePlus&lt;/code&gt; is true, spaces are encoded as &lt;code&gt;'+'&lt;/code&gt; instead of &lt;code&gt;'%20'&lt;/code&gt;.</source>
          <target state="translated">作为特殊规则，当 &lt;code&gt;usePlus&lt;/code&gt; 的值为true时，空格编码为 &lt;code&gt;'+'&lt;/code&gt; 而不是 &lt;code&gt;'%20'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="babff93920d51965108f37a93de33ae42b21d0fb" translate="yes" xml:space="preserve">
          <source>As a special semantic extension, an expression in an &lt;code&gt;of&lt;/code&gt; branch of a case statement may evaluate to a set or array constructor; the set or array is then expanded into a list of its elements:</source>
          <target state="translated">作为特殊的语义扩展，case语句的 &lt;code&gt;of&lt;/code&gt; 分支中的表达式可以求值为set或array构造函数；然后将集合或数组扩展为其元素列表：</target>
        </trans-unit>
        <trans-unit id="d1d6a828142c8108ac0deb4cc6c8484c64faae27" translate="yes" xml:space="preserve">
          <source>As a special semantic rule, the built-in &lt;a href=&quot;system#debugEcho&quot;&gt;debugEcho&lt;/a&gt; pretends to be free of side effects, so that it can be used for debugging routines marked as &lt;code&gt;noSideEffect&lt;/code&gt;.</source>
          <target state="translated">作为特殊的语义规则，内置的&lt;a href=&quot;system#debugEcho&quot;&gt;debugEcho&lt;/a&gt;假装没有副作用，因此可用于调试标记为 &lt;code&gt;noSideEffect&lt;/code&gt; 的例程。</target>
        </trans-unit>
        <trans-unit id="71489e93932a05f2ea411285eaceb3bbe24614d1" translate="yes" xml:space="preserve">
          <source>As a syntactical extension &lt;code&gt;object&lt;/code&gt; types can be anonymous if declared in a type section via the &lt;code&gt;ref object&lt;/code&gt; or &lt;code&gt;ptr object&lt;/code&gt; notations. This feature is useful if an object should only gain reference semantics:</source>
          <target state="translated">作为语法扩展，如果在类型部分中通过 &lt;code&gt;ref object&lt;/code&gt; 或 &lt;code&gt;ptr object&lt;/code&gt; 符号声明，则 &lt;code&gt;object&lt;/code&gt; 类型可以是匿名的。如果对象仅应获得参考语义，则此功能很有用：</target>
        </trans-unit>
        <trans-unit id="7859c8bf7a7bf8df21005d62f29109f1c4a9707d" translate="yes" xml:space="preserve">
          <source>As a top level statement, the experimental pragma enables a feature for the rest of the module it's enabled in. This is problematic for macro and generic instantiations that cross a module scope. Currently these usages have to be put into a &lt;code&gt;.push/pop&lt;/code&gt; environment:</source>
          <target state="translated">作为顶层声明，实验性编译指示为启用该模块的其余模块启用了一项功能。这对于跨模块范围的宏和通用实例化来说是有问题的。目前，这些用法必须放入 &lt;code&gt;.push/pop&lt;/code&gt; 环境中：</target>
        </trans-unit>
        <trans-unit id="1cc9ba3f444ef5f2a70c370287d23a7b3c9d81c8" translate="yes" xml:space="preserve">
          <source>As an example,</source>
          <target state="translated">举个例子:</target>
        </trans-unit>
        <trans-unit id="4faf2cad17e66616bc46eb370913033cba7d7ffe" translate="yes" xml:space="preserve">
          <source>As can be seen from the example, C's macros with parameters are mapped to Nim's templates. This mapping is the best one can do, but it is of course not accurate: Nim's templates operate on syntax trees whereas C's macros work on the token level. c2nim cannot translate any macro that contains the &lt;code&gt;##&lt;/code&gt; token concatenation operator.</source>
          <target state="translated">从示例中可以看出，带有参数的C宏被映射到Nim的模板。这种映射是最好的映射，但是它当然不准确：Nim的模板在语法树上运行，而C的宏在令牌级别上运行。c2nim无法转换任何包含 &lt;code&gt;##&lt;/code&gt; 令牌串联运算符的宏。</target>
        </trans-unit>
        <trans-unit id="033710d5a2d1054844b9448ca63a783fde847ed0" translate="yes" xml:space="preserve">
          <source>As can be seen from the example, it is possible to both specify a field's ordinal value and its string value by using a tuple. It is also possible to only specify one of them.</source>
          <target state="translated">从这个例子中可以看出,通过使用元组,既可以指定字段的序数值,也可以指定其字符串值。也可以只指定其中之一。</target>
        </trans-unit>
        <trans-unit id="33db679c8421cd1a5bcfed816339b58d55a90cf0" translate="yes" xml:space="preserve">
          <source>As can be seen from the examples, strings are matched verbatim except for substrings starting with &lt;code&gt;$&lt;/code&gt;. These constructions are available:</source>
          <target state="translated">从示例中可以看出，字符串以逐字匹配，但以 &lt;code&gt;$&lt;/code&gt; 开头的子字符串除外。这些结构可用：</target>
        </trans-unit>
        <trans-unit id="3690ed0de51a088f748c4a5d9756e00f903b6456" translate="yes" xml:space="preserve">
          <source>As can be seen in the example, base methods have to be annotated with the &lt;span id=&quot;base_1&quot;&gt;base&lt;/span&gt; pragma. The &lt;code&gt;base&lt;/code&gt; pragma also acts as a reminder for the programmer that a base method &lt;code&gt;m&lt;/code&gt; is used as the foundation to determine all the effects that a call to &lt;code&gt;m&lt;/code&gt; might cause.</source>
          <target state="translated">从示例中可以看出，基本方法必须使用&lt;span id=&quot;base_1&quot;&gt;基本&lt;/span&gt;编译指示进行注释。所述 &lt;code&gt;base&lt;/code&gt; 编译还用作一个基方法程序员提醒 &lt;code&gt;m&lt;/code&gt; 被用作基础来确定对呼叫的所有效果 &lt;code&gt;m&lt;/code&gt; 可能导致。</target>
        </trans-unit>
        <trans-unit id="a5a364bd18b5eaef7b5722d6cd78c85c92bfa5dd" translate="yes" xml:space="preserve">
          <source>As can be seen in the productions, numerical constants can contain underscores for readability. Integer and floating point literals may be given in decimal (no prefix), binary (prefix &lt;code&gt;0b&lt;/code&gt;), octal (prefix &lt;code&gt;0o&lt;/code&gt;) and hexadecimal (prefix &lt;code&gt;0x&lt;/code&gt;) notation.</source>
          <target state="translated">从产品中可以看出，数字常数可以包含下划线以提高可读性。整数和浮点文字可以以十进制（无前缀），二进制（前缀 &lt;code&gt;0b&lt;/code&gt; ），八进制（前缀 &lt;code&gt;0o&lt;/code&gt; ）和十六进制（前缀 &lt;code&gt;0x&lt;/code&gt; ）表示。</target>
        </trans-unit>
        <trans-unit id="7dad921df2b5a3cd443f8e5461c7a9ccced2c050" translate="yes" xml:space="preserve">
          <source>As can been seen from the example, an advantage to an object hierarchy is that no casting between different object types is needed. Yet, access to invalid object fields raises an exception.</source>
          <target state="translated">从这个例子中可以看出,对象层次结构的一个优点是不需要在不同对象类型之间进行转换。然而,访问无效的对象字段会引起异常。</target>
        </trans-unit>
        <trans-unit id="86acee0719e4df42b833d89f9ce00671880b3bee" translate="yes" xml:space="preserve">
          <source>As can been seen from the example, an advantage to an object hierarchy is that no conversion between different object types is needed. Yet, access to invalid object fields raises an exception.</source>
          <target state="translated">从这个例子可以看出,对象层次结构的一个优点是不需要在不同的对象类型之间进行转换。然而,访问无效的对象字段会引起异常。</target>
        </trans-unit>
        <trans-unit id="8bd2dc16961a30c8b20a5aa5ef6562993b9d9ea9" translate="yes" xml:space="preserve">
          <source>As case statements perform compile-time exhaustiveness checks, the value in every &lt;code&gt;of&lt;/code&gt; branch must be known at compile time. This fact is also exploited to generate more performant code.</source>
          <target state="translated">作为case语句执行编译时全面性检查，在每一个的值 &lt;code&gt;of&lt;/code&gt; 分支必须在编译时是已知的。这个事实也被用来生成更多性能代码。</target>
        </trans-unit>
        <trans-unit id="a3cf4fdd8a46537cb17ba2fc74bca88aa30a4384" translate="yes" xml:space="preserve">
          <source>As convention this proc will split index files into two categories: documentation and API. API indices will be all joined together into a single big sorted index, making the bulk of the final index. This is good for API documentation because many symbols are repated in different modules. On the other hand, documentation indices are essentially table of contents plus a few special markers. These documents will be rendered in a separate section which tries to maintain the order and hierarchy of the symbols in the index file.</source>
          <target state="translated">按照惯例,这个proc将把索引文件分成两类:文档和API。API索引将全部加入到一个大的排序索引中,成为最终索引的主体。这对于API文档来说是很好的,因为很多符号会在不同的模块中重复出现。另一方面,文档索引基本上是目录加上一些特殊标记。这些文档将在一个单独的部分中呈现,它试图保持索引文件中符号的顺序和层次。</target>
        </trans-unit>
        <trans-unit id="e35fce15f7b6d0e8ddfe4a222398b9462fecc9a2" translate="yes" xml:space="preserve">
          <source>As in generics symbol binding can be influenced via &lt;code&gt;mixin&lt;/code&gt; or &lt;code&gt;bind&lt;/code&gt; statements.</source>
          <target state="translated">与泛型中的符号绑定一样，可以通过 &lt;code&gt;mixin&lt;/code&gt; 或 &lt;code&gt;bind&lt;/code&gt; 语句影响绑定。</target>
        </trans-unit>
        <trans-unit id="0887bf802c49a565d93917f60c9350172010518c" translate="yes" xml:space="preserve">
          <source>As it can be seen, for an &lt;code&gt;of&lt;/code&gt; branch a comma separated list of values is also allowed.</source>
          <target state="translated">如可以看到的，对于一个 &lt;code&gt;of&lt;/code&gt; 分支以逗号分隔的值的列表也被允许。</target>
        </trans-unit>
        <trans-unit id="026e19060b7027adb0d7fdc31274d77b9a547e42" translate="yes" xml:space="preserve">
          <source>As long as a type &lt;code&gt;T&lt;/code&gt; is incomplete &lt;code&gt;sizeof(T)&lt;/code&gt; or &quot;runtime type information&quot; for &lt;code&gt;T&lt;/code&gt; is not available.</source>
          <target state="translated">只要类型 &lt;code&gt;T&lt;/code&gt; 是不完整 &lt;code&gt;sizeof(T)&lt;/code&gt; 或&amp;ldquo;运行时类型信息&amp;rdquo; &lt;code&gt;T&lt;/code&gt; 不可用。</target>
        </trans-unit>
        <trans-unit id="2dca63b7a6f1fd2e2ca6e65f781d803b65614773" translate="yes" xml:space="preserve">
          <source>As long as you don't use the threadvar emulation Nim uses native thread variables, of which you get a fresh version whenever you create a thread. You can then attach a GC to this thread via</source>
          <target state="translated">只要你不使用 threadvar 仿真,Nim 就会使用本机线程变量,每当你创建一个线程时,都会得到一个新的版本。然后,你就可以通过</target>
        </trans-unit>
        <trans-unit id="26a74fa3cef27390dd0524bd6f48c70bfa5b9b01" translate="yes" xml:space="preserve">
          <source>As many &lt;code&gt;nnkIdent&lt;/code&gt; appear as there are pragmas between &lt;code&gt;{..}&lt;/code&gt;. Note that the declaration of new pragmas is essentially the same:</source>
          <target state="translated">与 &lt;code&gt;{..}&lt;/code&gt; 之间存在 &lt;code&gt;nnkIdent&lt;/code&gt; 出现了多少nnkIdent。请注意，新编译指示的声明本质上是相同的：</target>
        </trans-unit>
        <trans-unit id="45b0ed81197cf305d45603349a135b9f85fd6ed7" translate="yes" xml:space="preserve">
          <source>As mentioned earlier, the built-in &lt;a href=&quot;system#%24&quot;&gt;$&lt;/a&gt; (stringify) operator turns any basic type into a string, which you can then print to the console using the &lt;code&gt;echo&lt;/code&gt; proc. However, advanced types, and your own custom types, won't work with the &lt;code&gt;$&lt;/code&gt; operator until you define it for them. Sometimes you just want to debug the current value of a complex type without having to write its &lt;code&gt;$&lt;/code&gt; operator. You can use then the &lt;a href=&quot;system#repr&quot;&gt;repr&lt;/a&gt; proc which works with any type and even complex data graphs with cycles. The following example shows that even for basic types there is a difference between the &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;repr&lt;/code&gt; outputs:</source>
          <target state="translated">如前所述，内置的&lt;a href=&quot;system#%24&quot;&gt;$&lt;/a&gt;（stringify）运算符将任何基本类型转换为字符串，然后可以使用 &lt;code&gt;echo&lt;/code&gt; proc 将其打印到控制台。但是，高级类型和您自己的自定义类型将无法与 &lt;code&gt;$&lt;/code&gt; 运算符一起使用，除非为它们定义它们。有时，您只想调试复杂类型的当前值而不必编写其 &lt;code&gt;$&lt;/code&gt; 运算符。然后，您可以使用&lt;a href=&quot;system#repr&quot;&gt;repr&lt;/a&gt; proc，该prproc可用于任何类型甚至带有周期的复杂数据图。以下示例显示，即使对于基本类型， &lt;code&gt;$&lt;/code&gt; 和 &lt;code&gt;repr&lt;/code&gt; 输出之间也存在差异：</target>
        </trans-unit>
        <trans-unit id="5c0e6c3f6dc802ee854147fa74a0509740327d59" translate="yes" xml:space="preserve">
          <source>As seen in the above example, the case expression can also introduce side effects. When multiple statements are given for a branch, Nim will use the last expression as the result value, much like in an &lt;em&gt;expr&lt;/em&gt; template.</source>
          <target state="translated">从上面的示例中可以看出，case表达式也可能带来副作用。当为一个分支给出多个语句时，Nim将使用最后一个表达式作为结果值，就像在&lt;em&gt;expr&lt;/em&gt;模板中一样。</target>
        </trans-unit>
        <trans-unit id="439f48dfdc54a1d1cb2592abb741204d4e9306e5" translate="yes" xml:space="preserve">
          <source>As seen in the previous example, in such instantiations, it's not necessary to supply all type parameters of the generic type, because any missing ones will be inferred to have the equivalent of the &lt;em&gt;any&lt;/em&gt; type class and thus they will match anything without discrimination.</source>
          <target state="translated">如前面的示例所示，在此类实例化中，不必提供泛型类型的所有类型参数，因为会推断出任何缺失的参数都具有与&lt;em&gt;任何&lt;/em&gt;类型类等效的参数，因此它们将毫无区别地匹配任何内容。</target>
        </trans-unit>
        <trans-unit id="b6e6a7e96d415104630cd8f0ead0c140e77a0902" translate="yes" xml:space="preserve">
          <source>As seen in the previous examples, you can refer to generic concepts such as &lt;em&gt;Enumerable[T]&lt;/em&gt; just by their short name. Much like the regular generic types, the concept will be automatically instantiated with the bind once auto type in the place of each missing generic param.</source>
          <target state="translated">从前面的示例中可以看到，您可以通过泛型概念（例如&lt;em&gt;Enumerable [T]）&lt;/em&gt;的简称来引用它们。与常规泛型类型非常相似，该概念将通过bind一旦自动类型化自动替换每个缺失的泛型参数。</target>
        </trans-unit>
        <trans-unit id="e9c1fc890399facee98adf935d7347503148926c" translate="yes" xml:space="preserve">
          <source>As such it supports a resolution of nanoseconds internally; however the API uses microseconds for convenience.</source>
          <target state="translated">因此,它在内部支持纳秒的分辨率;但为了方便,API使用微秒。</target>
        </trans-unit>
        <trans-unit id="01367ae653af83b7f5aec2955cfd950745102be9" translate="yes" xml:space="preserve">
          <source>As such, a check to see if the deque is empty is needed before any access, unless your program logic guarantees it indirectly.</source>
          <target state="translated">因此,在任何访问之前,需要检查deque是否为空,除非你的程序逻辑间接地保证它。</target>
        </trans-unit>
        <trans-unit id="286afc9752bec98ed25f43fb3fd09c91c5151ede" translate="yes" xml:space="preserve">
          <source>As the above example shows, Nim has no need for &lt;em&gt;get-properties&lt;/em&gt;: Ordinary get-procedures that are called with the &lt;em&gt;method call syntax&lt;/em&gt; achieve the same. But setting a value is different; for this a special setter syntax is needed:</source>
          <target state="translated">如上面的示例所示，Nim不需要&lt;em&gt;get-properties&lt;/em&gt;：使用&lt;em&gt;方法调用语法调用的&lt;/em&gt;普通get-procedures可以达到相同的目的。但是设置值是不同的。为此，需要特殊的setter语法：</target>
        </trans-unit>
        <trans-unit id="e739d8d09978b2dcb0c312361958c802f83a064a" translate="yes" xml:space="preserve">
          <source>As the example demonstrates, invocation of a multi-method cannot be ambiguous: Collide 2 is preferred over collide 1 because the resolution works from left to right. Thus &lt;code&gt;Unit, Thing&lt;/code&gt; is preferred over &lt;code&gt;Thing, Unit&lt;/code&gt;.</source>
          <target state="translated">如示例所示，多重方法的调用不能是模棱两可的：碰撞2优于碰撞1，因为分辨率从左到右起作用。因此，&amp;ldquo; &lt;code&gt;Unit, Thing&lt;/code&gt; 优于&amp;ldquo; &lt;code&gt;Thing, Unit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4eb5ab0367cdd1ab709d3f90ffd6f79cf740c8bc" translate="yes" xml:space="preserve">
          <source>As the example shows &lt;code&gt;computedGoto&lt;/code&gt; is mostly useful for interpreters. If the underlying backend (C compiler) does not support the computed goto extension the pragma is simply ignored.</source>
          <target state="translated">如示例所示， &lt;code&gt;computedGoto&lt;/code&gt; 对于解释器而言最有用。如果基础后端（C编译器）不支持计算的goto扩展，则将忽略编译指示。</target>
        </trans-unit>
        <trans-unit id="aa6410949c68317244c63b45dcd8f86123a06792" translate="yes" xml:space="preserve">
          <source>As the example shows, passing arguments to a filter can be done just like an ordinary procedure call with named or positional arguments. The available parameters depend on the invoked filter. Before version 0.12.0 of the language &lt;code&gt;#!&lt;/code&gt; was used instead of &lt;code&gt;#?&lt;/code&gt;.</source>
          <target state="translated">如示例所示，将参数传递到过滤器可以像使用命名或位置参数的普通过程调用一样完成。可用参数取决于调用的过滤器。语言 &lt;code&gt;#!&lt;/code&gt; 0.1之前的版本！被用来代替 &lt;code&gt;#?&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="27d5a0e7057a8c33abd1db459e64ad340a213114" translate="yes" xml:space="preserve">
          <source>As the regular expressions supported by this module are enormous, the reader is referred to &lt;a href=&quot;http://perldoc.perl.org/perlre.html&quot;&gt;http://perldoc.perl.org/perlre.html&lt;/a&gt; for the full documentation of Perl's regular expressions.</source>
          <target state="translated">由于此模块支持的正则表达式数量众多，因此请参阅&lt;a href=&quot;http://perldoc.perl.org/perlre.html&quot;&gt;http://perldoc.perl.org/perlre.html&lt;/a&gt;，以获取有关Perl正则表达式的完整文档。</target>
        </trans-unit>
        <trans-unit id="868dd43083390b7b1e29d7736d8260c51c9f2330" translate="yes" xml:space="preserve">
          <source>As their name suggests, static parameters must be known at compile-time:</source>
          <target state="translated">顾名思义,静态参数必须在编译时知道。</target>
        </trans-unit>
        <trans-unit id="62dcfc00fb0387dbffe758f0f4162e7a2adedb56" translate="yes" xml:space="preserve">
          <source>As usual &lt;code&gt;locks&lt;/code&gt; is an inferred effect and there is a subtype relation: &lt;code&gt;proc () {.locks: N.}&lt;/code&gt; is a subtype of &lt;code&gt;proc () {.locks: M.}&lt;/code&gt; iff (M &amp;lt;= N).</source>
          <target state="translated">通常， &lt;code&gt;locks&lt;/code&gt; 是一种推断的效果，并且存在子类型关系： &lt;code&gt;proc () {.locks: N.}&lt;/code&gt; 是 &lt;code&gt;proc () {.locks: M.}&lt;/code&gt; iff（M &amp;lt;= N）的子类型。</target>
        </trans-unit>
        <trans-unit id="8a7e3825909e47cd662a1349cd9c1f9bb88f142c" translate="yes" xml:space="preserve">
          <source>Asm statement</source>
          <target state="translated">阿斯米声明</target>
        </trans-unit>
        <trans-unit id="02bb6749711a6c6662b3a9fd807816e9e50ff52d" translate="yes" xml:space="preserve">
          <source>Assembler statement</source>
          <target state="translated">汇编者声明</target>
        </trans-unit>
        <trans-unit id="e55df441e8955746182110c3946288f381520e83" translate="yes" xml:space="preserve">
          <source>Assignment</source>
          <target state="translated">Assignment</target>
        </trans-unit>
        <trans-unit id="d726d517f001352072c6361a864be12f97f89db4" translate="yes" xml:space="preserve">
          <source>Assignment compatibility</source>
          <target state="translated">任务兼容性</target>
        </trans-unit>
        <trans-unit id="d9203ef0427904fd0cb4f5281674fd37cff746c1" translate="yes" xml:space="preserve">
          <source>Assignments are not special, the left-hand-side expression is evaluated before the right-hand side:</source>
          <target state="translated">赋值并不特殊,左手边的表达式要先于右手边的表达式进行评估。</target>
        </trans-unit>
        <trans-unit id="1091ff5f3536a87992e1a98e7fdf3572d7d495bf" translate="yes" xml:space="preserve">
          <source>Associate application-defined &lt;code&gt;data&lt;/code&gt; with descriptor &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">将应用程序定义的 &lt;code&gt;data&lt;/code&gt; 与描述符 &lt;code&gt;fd&lt;/code&gt; 关联。</target>
        </trans-unit>
        <trans-unit id="d20b5a26a1cdf631954b50a5206246dff93d9c8a" translate="yes" xml:space="preserve">
          <source>Associativity</source>
          <target state="translated">Associativity</target>
        </trans-unit>
        <trans-unit id="c10e87299448214997c9ba36a197edc020ad8d7c" translate="yes" xml:space="preserve">
          <source>Assumes that &lt;a href=&quot;#readHeaderRow.CsvParser&quot;&gt;readHeaderRow&lt;/a&gt; has already been called.</source>
          <target state="translated">假设&lt;a href=&quot;#readHeaderRow.CsvParser&quot;&gt;readHeaderRow&lt;/a&gt;已经被调用。</target>
        </trans-unit>
        <trans-unit id="464eb5858db553f9a4e084882b2d692e14f18a75" translate="yes" xml:space="preserve">
          <source>Async IO in Nim consists of multiple layers (from highest to lowest):</source>
          <target state="translated">Nim中的异步IO由多层组成(从最高到最低)。</target>
        </trans-unit>
        <trans-unit id="d57562f32a2344e4a892e8ad77de461a0dddac00" translate="yes" xml:space="preserve">
          <source>Async alternative to TFTPClient.</source>
          <target state="translated">作为TFTPClient的异步选择。</target>
        </trans-unit>
        <trans-unit id="61a0af2d907e2fd6001d764ad03dc8d1c0e711f3" translate="yes" xml:space="preserve">
          <source>Async await</source>
          <target state="translated">异步等待</target>
        </trans-unit>
        <trans-unit id="bb9065007b1394a4c890c8c730359a31cd3d4af2" translate="yes" xml:space="preserve">
          <source>Async version of &lt;code&gt;recv&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;recv&lt;/code&gt; 的异步版本。</target>
        </trans-unit>
        <trans-unit id="48e12dfeb54ee671e650066950d5a652045b9307" translate="yes" xml:space="preserve">
          <source>AsyncDispatch</source>
          <target state="translated">AsyncDispatch</target>
        </trans-unit>
        <trans-unit id="8b371c51c3d43e683cda1ca13b2b61e13b7f6e7b" translate="yes" xml:space="preserve">
          <source>Asynchronous IO in Nim</source>
          <target state="translated">Nim中的异步IO</target>
        </trans-unit>
        <trans-unit id="7b9ef39877db01dd17657705a2bbb4a6bc49d720" translate="yes" xml:space="preserve">
          <source>Asynchronous procedures</source>
          <target state="translated">异步程序</target>
        </trans-unit>
        <trans-unit id="c80b1fc2540985a4b46e1a0759e789f85aac96b9" translate="yes" xml:space="preserve">
          <source>Asynchronous procedures remove the pain of working with callbacks. They do this by allowing you to write asynchronous code the same way as you would write synchronous code.</source>
          <target state="translated">异步过程消除了使用回调的痛苦。它们允许你以编写同步代码的方式来编写异步代码。</target>
        </trans-unit>
        <trans-unit id="b4324fe839ee2fc80392c528dbb2288500cc3cc5" translate="yes" xml:space="preserve">
          <source>Asynchronous sockets</source>
          <target state="translated">异步插座</target>
        </trans-unit>
        <trans-unit id="04fc05d16ff1681dbd084361e286ad3b082b3c13" translate="yes" xml:space="preserve">
          <source>Asynchronous sockets are supported, however a better alternative is to use the &lt;a href=&quot;asyncio&quot;&gt;asyncio&lt;/a&gt; module.</source>
          <target state="translated">支持异步套接字，但是更好的替代方法是使用&lt;a href=&quot;asyncio&quot;&gt;asyncio&lt;/a&gt;模块。</target>
        </trans-unit>
        <trans-unit id="6c54cd214970569c34b0894bafdff80b326240d3" translate="yes" xml:space="preserve">
          <source>At runtime the dynamic library is searched for (in this order):</source>
          <target state="translated">在运行时搜索动态库(按这个顺序)。</target>
        </trans-unit>
        <trans-unit id="1e0afa779399055030a34271b80bf03107242a5a" translate="yes" xml:space="preserve">
          <source>At the moment idetools support is still in development so the test suite is not integrated with the main test suite and you have to run it manually. First you have to compile the tester:</source>
          <target state="translated">目前idetools的支持还在开发中,所以测试套件并没有与主测试套件集成,你必须手动运行它。首先你必须编译测试器。</target>
        </trans-unit>
        <trans-unit id="f92987b2f51905d6ac8ecf565a309b7358bafb43" translate="yes" xml:space="preserve">
          <source>At this time only &lt;em&gt;fastLog2&lt;/em&gt;, &lt;em&gt;firstSetBit, `countLeadingZeroBits&lt;/em&gt;, &lt;em&gt;countTrailingZeroBits&lt;/em&gt; may return undefined and/or platform dependant value if given invalid input.</source>
          <target state="translated">此时，如果给定无效输入，&lt;em&gt;则&lt;/em&gt;只有&lt;em&gt;fastLog2&lt;/em&gt;，&lt;em&gt;firstSetBit，countLeadingZeroBits&lt;/em&gt;，&lt;em&gt;countTrailingZeroBits&lt;/em&gt;可能返回未定义和/或平台相关的值。</target>
        </trans-unit>
        <trans-unit id="dc088b4a46ed03929326ec3129e2350a99f0a990" translate="yes" xml:space="preserve">
          <source>Auto type</source>
          <target state="translated">自动型</target>
        </trans-unit>
        <trans-unit id="9e0bd780b5a4993d6aec3f619069ec9a81419d34" translate="yes" xml:space="preserve">
          <source>Automatic dereferencing</source>
          <target state="translated">自动取消引用</target>
        </trans-unit>
        <trans-unit id="b34f3f41021aba6582ca800065938665aaa25537" translate="yes" xml:space="preserve">
          <source>Automatic dereferencing is also performed for the first argument of a routine call. But currently this feature has to be only enabled via &lt;code&gt;{.experimental: &quot;implicitDeref&quot;.}&lt;/code&gt;:</source>
          <target state="translated">还对例程调用的第一个参数执行自动取消引用。但是目前只能通过 &lt;code&gt;{.experimental: &quot;implicitDeref&quot;.}&lt;/code&gt; 启用此功能：</target>
        </trans-unit>
        <trans-unit id="4f2f8a2fddb2e537990a2864cb34d8eee2d1446d" translate="yes" xml:space="preserve">
          <source>Automatic self insertions</source>
          <target state="translated">自动自插</target>
        </trans-unit>
        <trans-unit id="d489cd84b7c72c977a3c1f79e61d852ca4f5fd46" translate="yes" xml:space="preserve">
          <source>Automatic type conversion in expressions with different kinds of floating point types is performed: See &lt;a href=&quot;#type-relations-convertible-relation&quot;&gt;Convertible relation&lt;/a&gt; for further details. Arithmetic performed on floating point types follows the IEEE standard. Integer types are not converted to floating point types automatically and vice versa.</source>
          <target state="translated">在具有不同类型的浮点类型的表达式中执行自动类型转换：有关更多详细信息，请参见&lt;a href=&quot;#type-relations-convertible-relation&quot;&gt;可转换关系&lt;/a&gt;。对浮点类型执行的算术遵循IEEE标准。整数类型不会自动转换为浮点类型，反之亦然。</target>
        </trans-unit>
        <trans-unit id="b64d4599316074da7ef005b5cd10b87308f8b012" translate="yes" xml:space="preserve">
          <source>Automatic type conversion in expressions with different kinds of floating point types is performed: the smaller type is converted to the larger. Integer types are &lt;strong&gt;not&lt;/strong&gt; converted to floating point types automatically, nor vice versa. Use the &lt;a href=&quot;system#toInt&quot;&gt;toInt&lt;/a&gt; and &lt;a href=&quot;system#toFloat&quot;&gt;toFloat&lt;/a&gt; procs for these conversions.</source>
          <target state="translated">在具有不同浮点类型的表达式中执行自动类型转换：将较小的类型转换为较大的类型。整数类型&lt;strong&gt;不会&lt;/strong&gt;自动转换为浮点类型，反之亦然。将&lt;a href=&quot;system#toInt&quot;&gt;toInt&lt;/a&gt;和&lt;a href=&quot;system#toFloat&quot;&gt;toFloat proc&lt;/a&gt;用于这些转换。</target>
        </trans-unit>
        <trans-unit id="bc40764f7876b20ac068b0f8a1ac400c090ad482" translate="yes" xml:space="preserve">
          <source>Available filters</source>
          <target state="translated">可用的过滤器</target>
        </trans-unit>
        <trans-unit id="48dc005192dc15899b10a69113ce172a5a8e8e1d" translate="yes" xml:space="preserve">
          <source>Avoiding SQL injection attacks</source>
          <target state="translated">避免SQL注入攻击</target>
        </trans-unit>
        <trans-unit id="ed59754f17e7c2d9945cda54ca5d2aa1dec958df" translate="yes" xml:space="preserve">
          <source>Back reference to the &lt;code&gt;i``th capture. ``i&lt;/code&gt; counts from 1.</source>
          <target state="translated">回到第 &lt;code&gt;i``th capture. ``i&lt;/code&gt; 从1算起。</target>
        </trans-unit>
        <trans-unit id="c1b87da997dc3c85ddc08c2e6d0f37c746574592" translate="yes" xml:space="preserve">
          <source>Backend code calling Nim</source>
          <target state="translated">后台代码调用Nim</target>
        </trans-unit>
        <trans-unit id="d2d1e1c764fd65afb7dd5b1cfc7187320a368f3d" translate="yes" xml:space="preserve">
          <source>Backend code can interface with Nim code exposed through the &lt;a href=&quot;manual#exportc-pragma&quot;&gt;exportc pragma&lt;/a&gt;. The &lt;code&gt;exportc&lt;/code&gt; pragma is the &lt;em&gt;generic&lt;/em&gt; way of making Nim symbols available to the backends. By default the Nim compiler will mangle all the Nim symbols to avoid any name collision, so the most significant thing the &lt;code&gt;exportc&lt;/code&gt; pragma does is maintain the Nim symbol name, or if specified, use an alternative symbol for the backend in case the symbol rules don't match.</source>
          <target state="translated">后端代码可以与通过&lt;a href=&quot;manual#exportc-pragma&quot;&gt;exportc编译指示&lt;/a&gt;公开的Nim代码进行交互。该 &lt;code&gt;exportc&lt;/code&gt; 编译是&lt;em&gt;通用的&lt;/em&gt;制作提供给后端稔符号的方式。默认情况下，Nim编译器将修改所有Nim符号，以避免任何名称冲突，因此 &lt;code&gt;exportc&lt;/code&gt; 编译指示要做的最重要的事情是保持Nim符号名称，或者，如果指定，则在后端使用替代符号，以防符号规则不匹配。</target>
        </trans-unit>
        <trans-unit id="4409ab544e7304fef23a5593b1e7c39ba4acd8f5" translate="yes" xml:space="preserve">
          <source>Backend issues</source>
          <target state="translated">后端问题</target>
        </trans-unit>
        <trans-unit id="b76b69c33162b1653a17f2c6f93e78edc8380818" translate="yes" xml:space="preserve">
          <source>Backend language options</source>
          <target state="translated">后台语言选项</target>
        </trans-unit>
        <trans-unit id="b3776d63ad7b7a84bfe20d9c6d4a53a2b25d0e43" translate="yes" xml:space="preserve">
          <source>Backends</source>
          <target state="translated">Backends</target>
        </trans-unit>
        <trans-unit id="a826c283ce6a52f2d32eb19de6510cb9098ad99b" translate="yes" xml:space="preserve">
          <source>Backslash</source>
          <target state="translated">Backslash</target>
        </trans-unit>
        <trans-unit id="d761e5a62561f09ed0d44ad1cb46328e1f217a6f" translate="yes" xml:space="preserve">
          <source>Backslashes are interpreted literally, unless they immediately precede a double quotation mark.</source>
          <target state="translated">反斜杠按字面解释,除非它们紧接在双引号之前。</target>
        </trans-unit>
        <trans-unit id="927ec03da92f02ddd56de8e2adaa715fed9bcf2d" translate="yes" xml:space="preserve">
          <source>Base class for floating point exceptions.</source>
          <target state="translated">浮点异常的基类。</target>
        </trans-unit>
        <trans-unit id="c01b2a5ff5b7f9aeb57693046b04a30f8f31374f" translate="yes" xml:space="preserve">
          <source>Base exception class.</source>
          <target state="translated">基础异常类。</target>
        </trans-unit>
        <trans-unit id="a7eab2acbe559b446c1a8d7cd0fa8164b769b943" translate="yes" xml:space="preserve">
          <source>Base exception object for all DOM Exceptions</source>
          <target state="translated">所有DOM异常的基本异常对象</target>
        </trans-unit>
        <trans-unit id="83973edfe760182bfdbc649edc3760f5c0702635" translate="yes" xml:space="preserve">
          <source>Base filename plus anchor hyper link (eg. &lt;code&gt;algorithm.html#*,int,SortOrder&lt;/code&gt;).</source>
          <target state="translated">基本文件名加上锚点超链接（例如 &lt;code&gt;algorithm.html#*,int,SortOrder&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="18bb69613ad5672181aef86b3bcfc02639a73650" translate="yes" xml:space="preserve">
          <source>Basic command line switches are:</source>
          <target state="translated">基本的命令行开关有。</target>
        </trans-unit>
        <trans-unit id="65e84bd37e76307cd618b3b242847f165ff6ea89" translate="yes" xml:space="preserve">
          <source>Basic math routines for Nim. This module is available for the &lt;a href=&quot;backends#the-javascript-target&quot;&gt;JavaScript target&lt;/a&gt;.</source>
          <target state="translated">Nim的基本数学例程。该模块可用于&lt;a href=&quot;backends#the-javascript-target&quot;&gt;JavaScript目标&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3fc431b29bb2c2516db706b2f480a558166eba6d" translate="yes" xml:space="preserve">
          <source>Basic types</source>
          <target state="translated">基本类型</target>
        </trans-unit>
        <trans-unit id="8fc3f098aacbac78663d7394b49aef616d056323" translate="yes" xml:space="preserve">
          <source>Be aware that destructors are not called for objects allocated with &lt;code&gt;new&lt;/code&gt;. This may change in future versions of language, but for now the &lt;span id=&quot;finalizer_1&quot;&gt;finalizer&lt;/span&gt; parameter to &lt;code&gt;new&lt;/code&gt; has to be used.</source>
          <target state="translated">请注意，对于分配有 &lt;code&gt;new&lt;/code&gt; 的对象，不会调用析构函数。这可能会在将来的语言版本中更改，但现在必须使用 &lt;code&gt;new&lt;/code&gt; 的&lt;span id=&quot;finalizer_1&quot;&gt;finalizer&lt;/span&gt;参数。</target>
        </trans-unit>
        <trans-unit id="e3e15a7b46caea989a1213b44375d001f13628fc" translate="yes" xml:space="preserve">
          <source>Be sure your callback &lt;code&gt;cb&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, if you want to remove watch of &lt;em&gt;read&lt;/em&gt; notifications, and &lt;code&gt;false&lt;/code&gt;, if you want to continue receiving notifications.</source>
          <target state="translated">要确保你的回调 &lt;code&gt;cb&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; ，如果要删除的表&lt;em&gt;读出&lt;/em&gt;通知，以及 &lt;code&gt;false&lt;/code&gt; ，如果你想继续接收通知。</target>
        </trans-unit>
        <trans-unit id="8fba0a783eb77900741ec80cede356c924d6db33" translate="yes" xml:space="preserve">
          <source>Be sure your callback &lt;code&gt;cb&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, if you want to remove watch of &lt;em&gt;write&lt;/em&gt; notifications, and &lt;code&gt;false&lt;/code&gt;, if you want to continue receiving notifications.</source>
          <target state="translated">如果要删除监视&lt;em&gt;写&lt;/em&gt;通知，请确保回调 &lt;code&gt;cb&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; ，如果要继续接收通知，则返回 &lt;code&gt;false&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c4102f62e5cacc86882ccbd463d607ec09aa3efa" translate="yes" xml:space="preserve">
          <source>Because the backslash &lt;code&gt;\&lt;/code&gt; is a meta character both in the Nim programming language and in regular expressions, it is strongly recommended that one uses the &lt;em&gt;raw&lt;/em&gt; strings of Nim, so that backslashes are interpreted by the regular expression engine:</source>
          <target state="translated">因为反斜杠 &lt;code&gt;\&lt;/code&gt; 在Nim编程语言和正则表达式中都是元字符，所以强烈建议人们使用Nim 的&lt;em&gt;原始&lt;/em&gt;字符串，以便反斜杠由正则表达式引擎解释：</target>
        </trans-unit>
        <trans-unit id="9712a92a80197b448150bfcf6e22b8f9c9c72490" translate="yes" xml:space="preserve">
          <source>Because the literal is a raw string literal, the &lt;code&gt;\n&lt;/code&gt; is not interpreted as an escape sequence.</source>
          <target state="translated">因为文字是原始字符串文字，所以 &lt;code&gt;\n&lt;/code&gt; 不会解释为转义序列。</target>
        </trans-unit>
        <trans-unit id="d8fb87298b9236d186e536c812e43df39ea168a6" translate="yes" xml:space="preserve">
          <source>Because the underlying &lt;code&gt;cmp()&lt;/code&gt; is defined for tuples you can do a nested sort like in the following example:</source>
          <target state="translated">因为基础 &lt;code&gt;cmp()&lt;/code&gt; 是为元组定义的，所以您可以像下面的示例一样进行嵌套排序：</target>
        </trans-unit>
        <trans-unit id="d6d168f46ea8f3c36c56fc3253836f0e10427b1e" translate="yes" xml:space="preserve">
          <source>Before stopping the program the &quot;quit procedures&quot; are called in the opposite order they were added with &lt;a href=&quot;#addQuitProc&quot;&gt;addQuitProc&lt;/a&gt;. &lt;code&gt;quit&lt;/code&gt; never returns and ignores any exception that may have been raised by the quit procedures. It does &lt;em&gt;not&lt;/em&gt; call the garbage collector to free all the memory, unless a quit procedure calls &lt;a href=&quot;#GC_fullCollect&quot;&gt;GC_fullCollect&lt;/a&gt;.</source>
          <target state="translated">在停止程序之前，以与&lt;a href=&quot;#addQuitProc&quot;&gt;addQuitProc&lt;/a&gt;添加它们的相反顺序调用&amp;ldquo;退出过程&amp;rdquo; 。 &lt;code&gt;quit&lt;/code&gt; 从不返回，并且忽略quit过程可能引发的任何异常。它并&lt;em&gt;没有&lt;/em&gt;调用垃圾收集器释放所有的内存，除非退出过程调用&lt;a href=&quot;#GC_fullCollect&quot;&gt;GC_fullCollect&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="43d498bdad3123202c81edb42a89596ea2e8269d" translate="yes" xml:space="preserve">
          <source>Before the line is processed as a regular expression, some basic variables are searched for and replaced in the tests. The variables which will be replaced are:</source>
          <target state="translated">在将该行作为正则表达式处理之前,会在测试中搜索并替换一些基本变量。将被替换的变量有:</target>
        </trans-unit>
        <trans-unit id="b0e4a0c03109bf4544e258937ad71acfe78c0f79" translate="yes" xml:space="preserve">
          <source>Before the thread exits, you should tear down the thread's GC to prevent memory leaks by calling</source>
          <target state="translated">在线程退出之前,应该拆掉线程的GC,通过调用</target>
        </trans-unit>
        <trans-unit id="310e2e763625e5d6d59dce2240ea063af385856f" translate="yes" xml:space="preserve">
          <source>Before using this proc you need to initialise a &lt;code&gt;RstGenerator&lt;/code&gt; with &lt;code&gt;initRstGenerator&lt;/code&gt; and parse a rst file with &lt;code&gt;rstParse&lt;/code&gt; from the &lt;a href=&quot;rst&quot;&gt;packages/docutils/rst module&lt;/a&gt;. Example:</source>
          <target state="translated">使用此PROC之前，你需要初始化一个 &lt;code&gt;RstGenerator&lt;/code&gt; 与 &lt;code&gt;initRstGenerator&lt;/code&gt; 和分析了第一个文件 &lt;code&gt;rstParse&lt;/code&gt; 从&lt;a href=&quot;rst&quot;&gt;包/ docutils的/ RST模块&lt;/a&gt;。例：</target>
        </trans-unit>
        <trans-unit id="966b254aa9447e510a7ca9c23d5f788a878f610b" translate="yes" xml:space="preserve">
          <source>Begins a never ending global dispatcher poll loop.</source>
          <target state="translated">开始一个永无止境的全局调度器投票循环。</target>
        </trans-unit>
        <trans-unit id="700e73def7ceec3f6434ea58699b8763915742e0" translate="yes" xml:space="preserve">
          <source>Begins connecting &lt;code&gt;sock&lt;/code&gt; to &lt;code&gt;name&lt;/code&gt;:&lt;code&gt;port&lt;/code&gt;.</source>
          <target state="translated">开始将 &lt;code&gt;sock&lt;/code&gt; 连接到 &lt;code&gt;name&lt;/code&gt; ： &lt;code&gt;port&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3b6ca901e484b0f0288a15e878ab0c9feab7a2af" translate="yes" xml:space="preserve">
          <source>Behaves similar to &lt;code&gt;sockets.readLine&lt;/code&gt;, however it handles non-blocking sockets properly. This function guarantees that &lt;code&gt;line&lt;/code&gt; is a full line, if this function can only retrieve some data; it will save this data and add it to the result when a full line is retrieved, when this happens False will be returned. True will only be returned if a full line has been retrieved or the socket has been disconnected in which case &lt;code&gt;line&lt;/code&gt; will be set to &quot;&quot;.</source>
          <target state="translated">行为类似于 &lt;code&gt;sockets.readLine&lt;/code&gt; ，但是它可以正确处理非阻塞套接字。如果此函数只能检索某些数据，则该函数保证该 &lt;code&gt;line&lt;/code&gt; 是完整的行；当检索到整行时，它将保存此数据并将其添加到结果中；当发生这种情况时，将返回False。仅当检索到整行或套接字已断开时，才返回True。在这种情况下， &lt;code&gt;line&lt;/code&gt; 设置为&amp;ldquo;&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="c4326a5636a46dcb618755741f866f4b972d0a19" translate="yes" xml:space="preserve">
          <source>Behaves similar to &lt;code&gt;sockets.recvLine&lt;/code&gt;, however it handles non-blocking sockets properly. This function guarantees that &lt;code&gt;line&lt;/code&gt; is a full line, if this function can only retrieve some data; it will save this data and add it to the result when a full line is retrieved.</source>
          <target state="translated">行为类似于 &lt;code&gt;sockets.recvLine&lt;/code&gt; ，但是它可以正确处理非阻塞套接字。如果此函数只能检索某些数据，则该函数保证该 &lt;code&gt;line&lt;/code&gt; 是完整的行；它会保存此数据，并在检索到整行时将其添加到结果中。</target>
        </trans-unit>
        <trans-unit id="265943f4fdc43174a25de385d384224b6714c3a1" translate="yes" xml:space="preserve">
          <source>Better serialization/deserialization control:</source>
          <target state="translated">更好的序列化/反序列化控制。</target>
        </trans-unit>
        <trans-unit id="2f93848862aa5b35417b63e68af291d5b94657ce" translate="yes" xml:space="preserve">
          <source>Beware of nesting:</source>
          <target state="translated">谨防窝里斗。</target>
        </trans-unit>
        <trans-unit id="79d0274d51b13cfe02935327c0fc3f6297737534" translate="yes" xml:space="preserve">
          <source>Beware: This can lead to unoptimized code and slow execution! Most problems are solve more efficient by using an iterator or conversion to a seq of Rune.</source>
          <target state="translated">小心,这可能会导致代码不优化和执行缓慢。这可能会导致代码不优化和执行速度慢! 大多数问题通过使用迭代器或转换为Rune的seq来解决更有效率。</target>
        </trans-unit>
        <trans-unit id="07e70f2fb17a35e7addfb3cce97a4c40deb42dbf" translate="yes" xml:space="preserve">
          <source>Binary &lt;em&gt;*&lt;/em&gt; operator for an integer.</source>
          <target state="translated">二进制&lt;em&gt;*&lt;/em&gt;运算符，用于整数。</target>
        </trans-unit>
        <trans-unit id="b4d78a434e47f392f05a75db91b17acd6fe4fa07" translate="yes" xml:space="preserve">
          <source>Binary &lt;em&gt;*&lt;/em&gt; operator for unsigned integers.</source>
          <target state="translated">二进制&lt;em&gt;*&lt;/em&gt;运算符，用于无符号整数。</target>
        </trans-unit>
        <trans-unit id="26698f4bdcaf441cc8334749d82e3e3d352fb191" translate="yes" xml:space="preserve">
          <source>Binary &lt;em&gt;*=&lt;/em&gt; operator for ordinals</source>
          <target state="translated">二进制&lt;em&gt;* =普通&lt;/em&gt;运算符</target>
        </trans-unit>
        <trans-unit id="330bd303262cb5101ce0efe34c05186ca99997f7" translate="yes" xml:space="preserve">
          <source>Binary &lt;em&gt;+&lt;/em&gt; operator for an integer.</source>
          <target state="translated">二进制&lt;em&gt;+&lt;/em&gt;整数运算符。</target>
        </trans-unit>
        <trans-unit id="38c5372d40da823748edf7ea2383e6eece6eff5b" translate="yes" xml:space="preserve">
          <source>Binary &lt;em&gt;+&lt;/em&gt; operator for unsigned integers.</source>
          <target state="translated">二进制&lt;em&gt;+&lt;/em&gt;运算符，用于无符号整数。</target>
        </trans-unit>
        <trans-unit id="af8d9afe7721543aea25b34b98173554127fcd0b" translate="yes" xml:space="preserve">
          <source>Binary &lt;em&gt;-&lt;/em&gt; operator for an integer.</source>
          <target state="translated">二进制&lt;em&gt;-&lt;/em&gt;整数运算符。</target>
        </trans-unit>
        <trans-unit id="8ccf951823bb2d33004b173d71cc94c3047b4785" translate="yes" xml:space="preserve">
          <source>Binary &lt;em&gt;-&lt;/em&gt; operator for unsigned integers.</source>
          <target state="translated">二进制&lt;em&gt;-&lt;/em&gt;无符号整数的运算符。</target>
        </trans-unit>
        <trans-unit id="560f98c3ead9f955754deb12fba064845d75b979" translate="yes" xml:space="preserve">
          <source>Binary operators whose first character is &lt;code&gt;^&lt;/code&gt; are right-associative, all other binary operators are left-associative.</source>
          <target state="translated">第一个字符为 &lt;code&gt;^&lt;/code&gt; 的二进制运算符是右关联的，所有其他二进制运算符是左关联的。</target>
        </trans-unit>
        <trans-unit id="360d45a25b59088bfa51b40dd2c0ffd7a2333f6c" translate="yes" xml:space="preserve">
          <source>Binary. Outputs the number in base 2.</source>
          <target state="translated">二进制。输出基数为2的数字。</target>
        </trans-unit>
        <trans-unit id="d087993ff800b452527c7966565ad3f6a2e4d837" translate="yes" xml:space="preserve">
          <source>Bind matching to some action</source>
          <target state="translated">绑定匹配到某个动作</target>
        </trans-unit>
        <trans-unit id="af1a43872e0146a37b3fc6fec03f088b6f0c7d84" translate="yes" xml:space="preserve">
          <source>Bind statement</source>
          <target state="translated">绑定声明</target>
        </trans-unit>
        <trans-unit id="d59366ada08751ecfdb863b4a3641304d02f31a6" translate="yes" xml:space="preserve">
          <source>BindSym</source>
          <target state="translated">BindSym</target>
        </trans-unit>
        <trans-unit id="e09df968e0a484a9efbeb94427ec16a9be185b7d" translate="yes" xml:space="preserve">
          <source>Binds &lt;code&gt;address&lt;/code&gt;:&lt;code&gt;port&lt;/code&gt; to the socket.</source>
          <target state="translated">绑定 &lt;code&gt;address&lt;/code&gt; ： &lt;code&gt;port&lt;/code&gt; 到套接字。</target>
        </trans-unit>
        <trans-unit id="659ea289b78cfbcca53efa111220718b2e750524" translate="yes" xml:space="preserve">
          <source>Binds Unix socket to &lt;em&gt;path&lt;/em&gt;. This only works on Unix-style systems: Mac OS X, BSD and Linux</source>
          <target state="translated">将Unix套接字绑定到&lt;em&gt;path&lt;/em&gt;。这仅适用于Unix风格的系统：Mac OS X，BSD和Linux</target>
        </trans-unit>
        <trans-unit id="8e8aaeecce239b0f06469ead101c23881541a5d5" translate="yes" xml:space="preserve">
          <source>Bits for which fields are set</source>
          <target state="translated">设置字段的位数</target>
        </trans-unit>
        <trans-unit id="cd3e66f022e12b57b1f5fe62492942f67ba04841" translate="yes" xml:space="preserve">
          <source>Bitsize pragma</source>
          <target state="translated">Bitsize pragma</target>
        </trans-unit>
        <trans-unit id="234ac99e0a5dfd13079331f5a645966c4b4a76a7" translate="yes" xml:space="preserve">
          <source>Blank lines are skipped.</source>
          <target state="translated">空白线被跳过。</target>
        </trans-unit>
        <trans-unit id="40f4277d9e2e9642b7c7082b91e613d62eab845f" translate="yes" xml:space="preserve">
          <source>Block device.</source>
          <target state="translated">块设备。</target>
        </trans-unit>
        <trans-unit id="e681513340338ab189ae37b3a82732813788fc1e" translate="yes" xml:space="preserve">
          <source>Block scope</source>
          <target state="translated">区块范围</target>
        </trans-unit>
        <trans-unit id="d900d959e6c700afd03ab9e7a37649c54ebba876" translate="yes" xml:space="preserve">
          <source>Block statement</source>
          <target state="translated">块状声明</target>
        </trans-unit>
        <trans-unit id="f5b504d04d5a39d2d24b7595634cf4c7ea12b1e0" translate="yes" xml:space="preserve">
          <source>Blocks until a connection is being made from a client. When a connection is made sets &lt;code&gt;client&lt;/code&gt; to the client socket and &lt;code&gt;address&lt;/code&gt; to the address of the connecting client. If &lt;code&gt;server&lt;/code&gt; is non-blocking then this function returns immediately, and if there are no connections queued the returned socket will be &lt;code&gt;InvalidSocket&lt;/code&gt;. This function will raise EOS if an error occurs.</source>
          <target state="translated">阻塞，直到从客户端建立连接为止。当连接了套 &lt;code&gt;client&lt;/code&gt; 对客户端Socket与 &lt;code&gt;address&lt;/code&gt; 的连接客户端的地址。如果 &lt;code&gt;server&lt;/code&gt; 处于非阻塞状态，则此函数将立即返回，并且如果没有连接排队，则返回的套接字将为 &lt;code&gt;InvalidSocket&lt;/code&gt; 。如果发生错误，此功能将引发EOS。</target>
        </trans-unit>
        <trans-unit id="6d6f90513642da6009f2dec4733272a1e46e96f3" translate="yes" xml:space="preserve">
          <source>Blocks until a connection is being made from a client. When a connection is made sets &lt;code&gt;client&lt;/code&gt; to the client socket and &lt;code&gt;address&lt;/code&gt; to the address of the connecting client. This function will raise EOS if an error occurs.</source>
          <target state="translated">阻塞，直到从客户端建立连接为止。当连接了套 &lt;code&gt;client&lt;/code&gt; 对客户端Socket与 &lt;code&gt;address&lt;/code&gt; 的连接客户端的地址。如果发生错误，此功能将引发EOS。</target>
        </trans-unit>
        <trans-unit id="70bf1baa003257ad55f9ad962d42ef3e987cd33e" translate="yes" xml:space="preserve">
          <source>Boolean &lt;code&gt;and&lt;/code&gt;; returns true iff &lt;code&gt;x == y == true&lt;/code&gt;. Evaluation is lazy: if &lt;code&gt;x&lt;/code&gt; is false, &lt;code&gt;y&lt;/code&gt; will not even be evaluated.</source>
          <target state="translated">布尔 &lt;code&gt;and&lt;/code&gt; ; 如果 &lt;code&gt;x == y == true&lt;/code&gt; 返回true。评估是懒惰的：如果 &lt;code&gt;x&lt;/code&gt; 为假， &lt;code&gt;y&lt;/code&gt; 甚至不会被评估。</target>
        </trans-unit>
        <trans-unit id="8a3c45029fde7152ef764416ecfd26148ba5b9ad" translate="yes" xml:space="preserve">
          <source>Boolean &lt;code&gt;or&lt;/code&gt;; returns true iff &lt;code&gt;not (not x and not y)&lt;/code&gt;. Evaluation is lazy: if &lt;code&gt;x&lt;/code&gt; is true, &lt;code&gt;y&lt;/code&gt; will not even be evaluated.</source>
          <target state="translated">布尔值 &lt;code&gt;or&lt;/code&gt; ; 如果 &lt;code&gt;not (not x and not y)&lt;/code&gt; 返回true 。评估是懒惰的：如果 &lt;code&gt;x&lt;/code&gt; 为true， &lt;code&gt;y&lt;/code&gt; 甚至不会被评估。</target>
        </trans-unit>
        <trans-unit id="02bbffdde9a8f3f92162c50254a83eda75717823" translate="yes" xml:space="preserve">
          <source>Boolean &lt;em&gt;exclusive or&lt;/em&gt;; returns true iff &lt;code&gt;x != y&lt;/code&gt;.</source>
          <target state="translated">布尔&lt;em&gt;异或&lt;/em&gt; ; 返回true，如果 &lt;code&gt;x != y&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e4f6a62c295e099a6e5cc6ca486fd23a80fe9b9d" translate="yes" xml:space="preserve">
          <source>Boolean flag that indicates if the system supports nanosecond time resolution in the fields of &lt;code&gt;Stat&lt;/code&gt;. Note that the nanosecond based fields (&lt;code&gt;Stat.st_atim&lt;/code&gt;, &lt;code&gt;Stat.st_mtim&lt;/code&gt; and &lt;code&gt;Stat.st_ctim&lt;/code&gt;) can be accessed without checking this flag, because this module defines fallback procs when they are not available.</source>
          <target state="translated">布尔标志，指示系统是否在 &lt;code&gt;Stat&lt;/code&gt; 字段中支持纳秒级的时间分辨率。请注意，可以访问基于纳秒的字段（ &lt;code&gt;Stat.st_atim&lt;/code&gt; ， &lt;code&gt;Stat.st_mtim&lt;/code&gt; 和 &lt;code&gt;Stat.st_ctim&lt;/code&gt; ）而无需选中此标志，因为该模块在不可用时定义了后备过程。</target>
        </trans-unit>
        <trans-unit id="20ba3c881998fa4098ce5ba4cafd77d368e565ad" translate="yes" xml:space="preserve">
          <source>Boolean not; returns true iff &lt;code&gt;x == false&lt;/code&gt;.</source>
          <target state="translated">布尔值not; 如果 &lt;code&gt;x == false&lt;/code&gt; 返回true 。</target>
        </trans-unit>
        <trans-unit id="cad44960020fa76bebce8ad95937acc2bd15d81f" translate="yes" xml:space="preserve">
          <source>Boolean socket options.</source>
          <target state="translated">布尔型插座选项。</target>
        </trans-unit>
        <trans-unit id="49f29c844f200eead7503c6d10737135d242ba2b" translate="yes" xml:space="preserve">
          <source>Boolean type</source>
          <target state="translated">布尔型</target>
        </trans-unit>
        <trans-unit id="0786cdff946e6084c50bb7df6cacd8ed965599fa" translate="yes" xml:space="preserve">
          <source>Booleans</source>
          <target state="translated">Booleans</target>
        </trans-unit>
        <trans-unit id="0add89edb9f4ac0882e5974a2ed406404a13002f" translate="yes" xml:space="preserve">
          <source>Bootstrapping the compiler</source>
          <target state="translated">引导编译器</target>
        </trans-unit>
        <trans-unit id="bd4dea3d9dc65cab9bb66d4cc6a6ce01c2e41ab8" translate="yes" xml:space="preserve">
          <source>Both parts have the same sign as &lt;em&gt;x&lt;/em&gt;. Analogous to the &lt;em&gt;modf&lt;/em&gt; function in C.</source>
          <target state="translated">这两部分的符号与&lt;em&gt;x&lt;/em&gt;相同。类似于C中的&lt;em&gt;modf&lt;/em&gt;函数。</target>
        </trans-unit>
        <trans-unit id="35a56c974fb1825347f0fe1529b19d7c99f2d402" translate="yes" xml:space="preserve">
          <source>Both the multi method and the type converter problems are solved by the AST replay implementation.</source>
          <target state="translated">多方法和类型转换问题都由AST重放实现解决。</target>
        </trans-unit>
        <trans-unit id="19ab36d21e3e2bca80b33ef2b7f048e8235fb8c0" translate="yes" xml:space="preserve">
          <source>Brackets</source>
          <target state="translated">Brackets</target>
        </trans-unit>
        <trans-unit id="c53284da9f760cfe1b6f6b9f75108f3e5f34245e" translate="yes" xml:space="preserve">
          <source>Brackets are used as the array constructor.</source>
          <target state="translated">用括号作为数组构造函数。</target>
        </trans-unit>
        <trans-unit id="2f1e60578f3cd76d5527fed043c9442139cd2cd3" translate="yes" xml:space="preserve">
          <source>Break statement</source>
          <target state="translated">破解声明</target>
        </trans-unit>
        <trans-unit id="d1d87f5d380c5544ae2b99408021a09200064c57" translate="yes" xml:space="preserve">
          <source>Breaking the fastRows() iterator during a loop may cause a driver error for subsequenct queries</source>
          <target state="translated">在循环过程中中断fastRows()迭代器可能会导致后续查询的驱动错误。</target>
        </trans-unit>
        <trans-unit id="ec4a222af9465c04b4a8d052175ff58043442831" translate="yes" xml:space="preserve">
          <source>Breaking the fastRows() iterator during a loop will cause the next database query to raise a DbError exception &lt;code&gt;unable to close due to ...&lt;/code&gt;.</source>
          <target state="translated">在循环期间中断fastRows（）迭代器将导致下一个数据库查询引发DbError异常 &lt;code&gt;unable to close due to ...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c7a0ef890af1a51c57cdb3dba04d6c6a9bbd34e" translate="yes" xml:space="preserve">
          <source>Breaking the fastRows() iterator during a loop will cause the next database query to raise an [EDb] exception &lt;code&gt;Commands out of sync&lt;/code&gt;.</source>
          <target state="translated">在循环期间中断fastRows（）迭代器将导致下一个数据库查询引发[EDb]异常 &lt;code&gt;Commands out of sync&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a9c84b3329de1f9c1a856698aa2ec5cff34e5ad" translate="yes" xml:space="preserve">
          <source>Breaks &lt;em&gt;x&lt;/em&gt; into an integral and a fractional part.</source>
          <target state="translated">将&lt;em&gt;x&lt;/em&gt;分解为整数和小数部分。</target>
        </trans-unit>
        <trans-unit id="8b6724e85f24d7713d447fc9d1ecbadafa7df149" translate="yes" xml:space="preserve">
          <source>Breaks this node into two nodes at the specified offset, keeping both in the tree as siblings.</source>
          <target state="translated">在指定的偏移量处将此节点分解成两个节点,在树上保持两个节点为兄弟姐妹。</target>
        </trans-unit>
        <trans-unit id="425b1ac3be0544ab3f6c956fa14370b9d4fb8322" translate="yes" xml:space="preserve">
          <source>Build and test examples:</source>
          <target state="translated">构建和测试实例。</target>
        </trans-unit>
        <trans-unit id="6239081298122df79f8acd6439e80ca8b6b91469" translate="yes" xml:space="preserve">
          <source>Building your first macro</source>
          <target state="translated">建立你的第一个宏</target>
        </trans-unit>
        <trans-unit id="646a6e4f96059c15c08aa818c66b65c410dfb9b2" translate="yes" xml:space="preserve">
          <source>Built-in macro for a longer expression.</source>
          <target state="translated">内置宏,可进行较长时间的表达。</target>
        </trans-unit>
        <trans-unit id="4d613da9be22e4083b43024dca2bbeaca3d83302" translate="yes" xml:space="preserve">
          <source>Built-in macros</source>
          <target state="translated">内置宏程序</target>
        </trans-unit>
        <trans-unit id="b5a84b589b9501cdc3df0931004c7cc42b59cde3" translate="yes" xml:space="preserve">
          <source>Builtin 'addr' operator for taking the address of a memory location. Cannot be overloaded.</source>
          <target state="translated">内置的'addr'操作符,用于获取内存位置的地址。不能过载。</target>
        </trans-unit>
        <trans-unit id="c463568500df5b37582c13d23e61bcb20c8accaa" translate="yes" xml:space="preserve">
          <source>Builtin 'addr' operator for taking the address of a memory location. This works even for &lt;code&gt;let&lt;/code&gt; variables or parameters for better interop with C and so it is considered even more unsafe than the ordinary &lt;code&gt;addr&lt;/code&gt;. When you use it to write a wrapper for a C library, you should always check that the original library does never write to data behind the pointer that is returned from this procedure. Cannot be overloaded.</source>
          <target state="translated">内置的&amp;ldquo; addr&amp;rdquo;运算符，用于获取存储位置的地址。即使对于 &lt;code&gt;let&lt;/code&gt; 变量或参数更好地与C互操作，此方法也有效，因此，它被认为比普通的 &lt;code&gt;addr&lt;/code&gt; 更不安全。当您使用它为C库编写包装时，应始终检查原始库是否永远不会在此过程返回的指针后面写入数据。不能超载。</target>
        </trans-unit>
        <trans-unit id="f8ca99ea406ea54b032b966a06afdbf917b785d6" translate="yes" xml:space="preserve">
          <source>But a &lt;code&gt;bind&lt;/code&gt; is rarely useful because symbol binding from the definition scope is the default.</source>
          <target state="translated">但是 &lt;code&gt;bind&lt;/code&gt; 很少有用，因为默认情况下来自定义范围的符号绑定。</target>
        </trans-unit>
        <trans-unit id="f3a68bc3de013b49eccd2fd19fb51ef8acfea012" translate="yes" xml:space="preserve">
          <source>But it seems all this boilerplate code needs to be repeated for the &lt;code&gt;Euro&lt;/code&gt; currency. This can be solved with &lt;a href=&quot;#templates&quot;&gt;templates&lt;/a&gt;.</source>
          <target state="translated">但是似乎所有这些样板代码都需要针对 &lt;code&gt;Euro&lt;/code&gt; 进行重复。这可以用&lt;a href=&quot;#templates&quot;&gt;模板&lt;/a&gt;解决。</target>
        </trans-unit>
        <trans-unit id="6b442f85caf3d7cde4cea2e5e9eb91a280936441" translate="yes" xml:space="preserve">
          <source>But one has to watch out because other overloads might trigger the argument's resolution:</source>
          <target state="translated">但是必须要注意,因为其他的过载可能会触发参数的解析。</target>
        </trans-unit>
        <trans-unit id="c53e0632274551f5aa1f6a36373db50475b33d38" translate="yes" xml:space="preserve">
          <source>But the global symbol can properly be captured by a &lt;code&gt;bind&lt;/code&gt; statement:</source>
          <target state="translated">但是全局符号可以通过 &lt;code&gt;bind&lt;/code&gt; 语句正确捕获：</target>
        </trans-unit>
        <trans-unit id="527742dcc91f3b4388a5222a890c0118d3a5e0d7" translate="yes" xml:space="preserve">
          <source>But this rule does not apply to procedures or iterators. Here the overloading rules apply:</source>
          <target state="translated">但这个规则不适用于过程或迭代器。这里适用重载规则。</target>
        </trans-unit>
        <trans-unit id="9250d320cadcddd0ef262bd8559df915bc7e0bc6" translate="yes" xml:space="preserve">
          <source>By default Nim's &lt;code&gt;dynlib&lt;/code&gt; pragma causes the compiler to generate &lt;code&gt;GetProcAddress&lt;/code&gt; (or their Unix counterparts) calls to bind to a DLL. With the &lt;code&gt;dynlibOverride&lt;/code&gt; command line switch this can be prevented and then via &lt;code&gt;--passL&lt;/code&gt; the static library can be linked against. For instance, to link statically against Lua this command might work on Linux:</source>
          <target state="translated">默认情况下，Nim的 &lt;code&gt;dynlib&lt;/code&gt; 编译指示使编译器生成 &lt;code&gt;GetProcAddress&lt;/code&gt; （或其Unix对应文件）调用以绑定到DLL。使用 &lt;code&gt;dynlibOverride&lt;/code&gt; 命令行开关可以防止这种情况，然后可以通过 &lt;code&gt;--passL&lt;/code&gt; 链接静态库。例如，要针对Lua进行静态链接，此命令可能在Linux上有效：</target>
        </trans-unit>
        <trans-unit id="d02d9c4acff9cf60b68f15e507f7e43cd5939742" translate="yes" xml:space="preserve">
          <source>By default a debug version is created, passing this option will force a release build, which is much faster and should be preferred unless you are debugging the compiler.</source>
          <target state="translated">默认情况下,会创建一个调试版本,通过这个选项会强制执行一个发布版本的构建,这要快得多,应该是首选,除非你正在调试编译器。</target>
        </trans-unit>
        <trans-unit id="48b684a5792df5c5364095950ec05af76390e113" translate="yes" xml:space="preserve">
          <source>By default c2nim marks every top level identifier (proc name, variable, etc.) as exported (the export marker is &lt;code&gt;*&lt;/code&gt; in Nim). With the &lt;code&gt;#private&lt;/code&gt; directive identifiers can be marked as private so that the resulting Nim module does not export them. The &lt;code&gt;#private&lt;/code&gt; directive takes a PEG pattern:</source>
          <target state="translated">默认情况下，c2nim将每个顶级标识符（过程名称，变量等）标记为已导出（在Nim中，导出标记为 &lt;code&gt;*&lt;/code&gt; ）。使用 &lt;code&gt;#private&lt;/code&gt; 伪指令，可以将标识符标记为私有，以便生成的Nim模块不会导出它们。该 &lt;code&gt;#private&lt;/code&gt; 指令采用的PEG模式：</target>
        </trans-unit>
        <trans-unit id="0de21675c01f240e6592367c51b6d906f03a3d78" translate="yes" xml:space="preserve">
          <source>By default the Nim compiler generates a large amount of runtime checks aiming for your debugging pleasure. With &lt;code&gt;-d:release&lt;/code&gt; these checks are &lt;a href=&quot;nimc#compiler-usage-compile-time-symbols&quot;&gt;turned off and optimizations are turned on&lt;/a&gt;.</source>
          <target state="translated">默认情况下，Nim编译器会针对您的调试乐趣生成大量的运行时检查。使用 &lt;code&gt;-d:release&lt;/code&gt; 时，&lt;a href=&quot;nimc#compiler-usage-compile-time-symbols&quot;&gt;将关闭&lt;/a&gt;这些检查并打开优化。</target>
        </trans-unit>
        <trans-unit id="53714c20b023fb0e9acbdf38f380565e04810da2" translate="yes" xml:space="preserve">
          <source>By default the documentation will be built in parallel using the number of available CPU cores. If any documentation build sub commands fail, they will be rerun in serial fashion so that meaninful error output can be gathered for inspection. The &lt;code&gt;--parallelBuild:n&lt;/code&gt; switch or configuration option can be used to force a specific number of parallel jobs or run everything serially from the start (&lt;code&gt;n == 1&lt;/code&gt;).</source>
          <target state="translated">默认情况下，将使用可用的CPU内核数量并行构建文档。如果任何文档构建子命令失败，则将以串行方式重新运行它们，以便可以收集有意义的错误输出以进行检查。所述 &lt;code&gt;--parallelBuild:n&lt;/code&gt; 开关或配置选项可用于强制并行作业的特定数量或从一开始（运行一切串联 &lt;code&gt;n == 1&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2a12f023f59a39b1f378be96457f00762035b5df" translate="yes" xml:space="preserve">
          <source>By default, c2nim translates an &lt;code&gt;#include&lt;/code&gt; that is not followed by &lt;code&gt;&amp;lt;&lt;/code&gt; (like in &lt;code&gt;#include &amp;lt;stdlib&amp;gt;&lt;/code&gt;) to a Nim &lt;code&gt;import&lt;/code&gt; statement. This directive tells c2nim to just skip any &lt;code&gt;#include&lt;/code&gt;.</source>
          <target state="translated">默认情况下，c2nim平移一个 &lt;code&gt;#include&lt;/code&gt; 其后面没有 &lt;code&gt;&amp;lt;&lt;/code&gt; （像 &lt;code&gt;#include &amp;lt;stdlib&amp;gt;&lt;/code&gt; ）到稔 &lt;code&gt;import&lt;/code&gt; 语句。该指令告诉c2nim仅跳过任何 &lt;code&gt;#include&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5fae71acbfd2891a1634971f65ec8cdeff58500b" translate="yes" xml:space="preserve">
          <source>By default, during overload resolution each named type class will bind to exactly one concrete type. We call such type classes &lt;span id=&quot;bind-once_1&quot;&gt;bind once&lt;/span&gt; types. Here is an example taken directly from the system module to illustrate this:</source>
          <target state="translated">默认情况下，在重载解析期间，每个命名类型类都将精确绑定到一个具体类型。我们称这类类型为&lt;span id=&quot;bind-once_1&quot;&gt;绑定一次&lt;/span&gt;类型。这是直接从系统模块获取的示例以说明此问题：</target>
        </trans-unit>
        <trans-unit id="73cb09bc05777230e6e5fe1e7143a2c142ee2d0d" translate="yes" xml:space="preserve">
          <source>By default, the compiler will report the matching errors in concepts only when no other overload can be selected and a normal compilation error is produced. When you need to understand why the compiler is not matching a particular concept and, as a result, a wrong overload is selected, you can apply the &lt;code&gt;explain&lt;/code&gt; pragma to either the concept body or a particular call-site.</source>
          <target state="translated">默认情况下，仅当无法选择其他重载并且产生正常的编译错误时，编译器才会报告概念上的匹配错误。当你需要明白为什么编译器不匹配特定的概念，作为一个结果，一个错误的超载被选中，您可以将 &lt;code&gt;explain&lt;/code&gt; 编译要么概念体或特定调用点。</target>
        </trans-unit>
        <trans-unit id="80f5e65dfa0cd584e698223d82de76d94317241e" translate="yes" xml:space="preserve">
          <source>By default, uses the IEC/ISO standard binary prefixes, so 1024 will be formatted as 1KiB. Set prefix to &lt;em&gt;bpColloquial&lt;/em&gt; to use the colloquial names from the SI standard (e.g. k for 1000 being reused as 1024).</source>
          <target state="translated">默认情况下，使用IEC / ISO标准二进制前缀，因此1024将被格式化为1KiB。将前缀设置为&lt;em&gt;bpColloquial&lt;/em&gt;以使用来自SI标准的口语名称（例如1000的k被重用为1024）。</target>
        </trans-unit>
        <trans-unit id="bc61bfc923f0134f76f08848fd47d85a5225ef86" translate="yes" xml:space="preserve">
          <source>Bycopy pragma</source>
          <target state="translated">Bycopy pragma</target>
        </trans-unit>
        <trans-unit id="dc786d2e8550e65dba6f478b2c981035a039ff49" translate="yes" xml:space="preserve">
          <source>Byref pragma</source>
          <target state="translated">BYREF pragma</target>
        </trans-unit>
        <trans-unit id="e373e36949fb915e82bd278056c90511b6ce4a56" translate="yes" xml:space="preserve">
          <source>C implementation: &lt;a href=&quot;http://xoroshiro.di.unimi.it/xoroshiro128plus.c&quot;&gt;http://xoroshiro.di.unimi.it/xoroshiro128plus.c&lt;/a&gt;</source>
          <target state="translated">C实现：&lt;a href=&quot;http://xoroshiro.di.unimi.it/xoroshiro128plus.c&quot;&gt;http&lt;/a&gt;：//xoroshiro.di.unimi.it/xoroshiro128plus.c</target>
        </trans-unit>
        <trans-unit id="fbf459b1966378eb6b198b4db1484574fc622a26" translate="yes" xml:space="preserve">
          <source>C invocation example</source>
          <target state="translated">C语言调用示例</target>
        </trans-unit>
        <trans-unit id="cef9b186930ae3fbcdf84f2ca1df6e923c10face" translate="yes" xml:space="preserve">
          <source>C to Nim source converter. Translates C header files to Nim.</source>
          <target state="translated">C到Nim源码转换器。将C头文件翻译成Nim。</target>
        </trans-unit>
        <trans-unit id="aa0b476ef445e23e653ff55250eadd2a609d86ee" translate="yes" xml:space="preserve">
          <source>C's &lt;code&gt;,&lt;/code&gt; operator (comma operator) is not supported.</source>
          <target state="translated">C'S &lt;code&gt;,&lt;/code&gt; 运算符（逗号运算符）不支持。</target>
        </trans-unit>
        <trans-unit id="6e567e8ea65384f4c7990dd6fd015e5dc179fcdc" translate="yes" xml:space="preserve">
          <source>C's &lt;code&gt;union&lt;/code&gt; are translated to Nim's objects and only the first field is included in the object type. This way there is a high chance that it is binary compatible to the union.</source>
          <target state="translated">C的 &lt;code&gt;union&lt;/code&gt; 将转换为Nim的对象，并且对象类型中仅包含第一个字段。这样，与联合二进制兼容的可能性很大。</target>
        </trans-unit>
        <trans-unit id="8f522347c60c0922b17da1143403e53d860a58d2" translate="yes" xml:space="preserve">
          <source>C2nim</source>
          <target state="translated">C2nim</target>
        </trans-unit>
        <trans-unit id="f30d6a6fe6e12777a78cd63942d1e0466d7744a4" translate="yes" xml:space="preserve">
          <source>CANNOT BE int64 BECAUSE OF ALIGNMENT</source>
          <target state="translated">由于对齐关系,不能是int64。</target>
        </trans-unit>
        <trans-unit id="c5a976de7b5231fa616fbeac8a2d2805c1e84ee2" translate="yes" xml:space="preserve">
          <source>CC</source>
          <target state="translated">CC</target>
        </trans-unit>
        <trans-unit id="dfa0a6adb0d6b924e9559526a04fdb494693340f" translate="yes" xml:space="preserve">
          <source>Calculate the arc tangent of &lt;em&gt;y&lt;/em&gt; / &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">计算&lt;em&gt;y&lt;/em&gt; / &lt;em&gt;x的&lt;/em&gt;反正切&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a5de1a650a2f08daab441e97db705f2a8290b44f" translate="yes" xml:space="preserve">
          <source>Calculate the arc tangent of &lt;em&gt;y&lt;/em&gt; / &lt;em&gt;x&lt;/em&gt;. &lt;em&gt;atan2&lt;/em&gt; returns the arc tangent of &lt;em&gt;y&lt;/em&gt; / &lt;em&gt;x&lt;/em&gt;; it produces correct results even when the resulting angle is near pi/2 or -pi/2 (&lt;em&gt;x&lt;/em&gt; near 0).</source>
          <target state="translated">计算&lt;em&gt;y&lt;/em&gt; / &lt;em&gt;x的&lt;/em&gt;反正切。&lt;em&gt;atan2&lt;/em&gt;返回&lt;em&gt;y&lt;/em&gt; / &lt;em&gt;x的&lt;/em&gt;反正切值；即使结果角度接近pi / 2或-pi / 2（&lt;em&gt;x&lt;/em&gt;接近0），它也会产生正确的结果。</target>
        </trans-unit>
        <trans-unit id="56ec6774caee72173cca3d600df6df4ad5cea2f4" translate="yes" xml:space="preserve">
          <source>Calculate the bit parity in integer. If number of 1-bit is odd parity is 1, otherwise 0.</source>
          <target state="translated">计算整数中的位奇偶校验。如果1-bit的数量是奇数,则奇偶校验为1,否则为0。</target>
        </trans-unit>
        <trans-unit id="24670fb674da2394dd2a0f4959fd3a294516adae" translate="yes" xml:space="preserve">
          <source>Calculate the reciprocal of &lt;em&gt;x&lt;/em&gt;. (1/x)</source>
          <target state="translated">计算&lt;em&gt;x&lt;/em&gt;的倒数。（1 / x）</target>
        </trans-unit>
        <trans-unit id="932f4eb5f8468f8594b47ae0aae880a0c60dbe3e" translate="yes" xml:space="preserve">
          <source>Calculates the best rational numerator and denominator that approximates to &lt;em&gt;x&lt;/em&gt;, where the denominator is smaller than &lt;em&gt;n&lt;/em&gt; (default is the largest possible int to give maximum resolution).</source>
          <target state="translated">计算近似于&lt;em&gt;x&lt;/em&gt;的最佳有理分子和分母，其中分母小于&lt;em&gt;n&lt;/em&gt;（默认值是给出最大分辨率的最大可能的int）。</target>
        </trans-unit>
        <trans-unit id="3010c6d2f4fa47d3ebb08435fd6265b2c82ae435" translate="yes" xml:space="preserve">
          <source>Calculates the next lexicographic permutation, directly modifying &lt;code&gt;x&lt;/code&gt;. The result is whether a permutation happened, otherwise we have reached the last-ordered permutation.</source>
          <target state="translated">计算下一个字典编排，直接修改 &lt;code&gt;x&lt;/code&gt; 。结果是是否发生了排列，否则我们已经达到了最后排列的排列。</target>
        </trans-unit>
        <trans-unit id="926f466377c398ffb795b1c416217100d99d20d7" translate="yes" xml:space="preserve">
          <source>Calculates the previous lexicographic permutation, directly modifying &lt;code&gt;x&lt;/code&gt;. The result is whether a permutation happened, otherwise we have reached the first-ordered permutation.</source>
          <target state="translated">计算先前的字典顺序，直接修改 &lt;code&gt;x&lt;/code&gt; 。结果是是否发生排列，否则我们已经达到一阶排列。</target>
        </trans-unit>
        <trans-unit id="f5b27c0795360d24a64c7b68bf2cc3b1338d3199" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;cbproc&lt;/code&gt; &quot;soon&quot;.</source>
          <target state="translated">称 &lt;code&gt;cbproc&lt;/code&gt; 为 &amp;ldquo;很快&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="3ced0e76c83f56c5d573ca3272434ebf912be391" translate="yes" xml:space="preserve">
          <source>Call this if you scanned over 'L' in the buffer; it returns the the position to continue the scanning from. &lt;em&gt;pos&lt;/em&gt; must be the position of the 'L'.</source>
          <target state="translated">如果扫描缓冲区中的&amp;ldquo; L&amp;rdquo;，则调用此函数；它返回继续扫描的位置。&lt;em&gt;pos&lt;/em&gt;必须位于&amp;ldquo; L&amp;rdquo;的位置。</target>
        </trans-unit>
        <trans-unit id="77d5fa0614be1a0c2dc98ca10137b9644cb75099" translate="yes" xml:space="preserve">
          <source>Call this if you scanned over 'c' in the buffer; it returns the the position to continue the scanning from. &lt;em&gt;pos&lt;/em&gt; must be the position of the 'c'.</source>
          <target state="translated">如果您扫描缓冲区中的&amp;ldquo; c&amp;rdquo;，则调用此函数；它返回继续扫描的位置。&lt;em&gt;pos&lt;/em&gt;必须位于&amp;ldquo; c&amp;rdquo;的位置。</target>
        </trans-unit>
        <trans-unit id="1ef18f3ccda6fa4b7049be2ee5f84665bbb0ce03" translate="yes" xml:space="preserve">
          <source>Call user defined proc &lt;code&gt;foo&lt;/code&gt; to &lt;strong&gt;skip&lt;/strong&gt; some optional parts in the input string. See below for more details.</source>
          <target state="translated">调用用户定义的proc &lt;code&gt;foo&lt;/code&gt; 以&lt;strong&gt;跳过&lt;/strong&gt;输入字符串中的一些可选部分。请参阅下面的更多细节。</target>
        </trans-unit>
        <trans-unit id="02241663160dcc2a31527f886c0c708b65f901d7" translate="yes" xml:space="preserve">
          <source>Call with &lt;code&gt;()&lt;/code&gt;</source>
          <target state="translated">致电 &lt;code&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="da6c999c007bfe15edd1f0f081d6f9072a370ddb" translate="yes" xml:space="preserve">
          <source>Call with named arguments</source>
          <target state="translated">用命名参数调用</target>
        </trans-unit>
        <trans-unit id="4f1be644dd81e7d1af3decb76997fc722787c242" translate="yes" xml:space="preserve">
          <source>Call with raw string literal</source>
          <target state="translated">用原始字符串文字调用</target>
        </trans-unit>
        <trans-unit id="bfcb7c395fc4a2662bfef50abfeba239833faf54" translate="yes" xml:space="preserve">
          <source>Callable type</source>
          <target state="translated">可调用类型</target>
        </trans-unit>
        <trans-unit id="d6a9bd6a90d6905593fcbe3587fd9fc40af85f67" translate="yes" xml:space="preserve">
          <source>Calling a procedure can be done in many different ways:</source>
          <target state="translated">调用一个程序可以有很多不同的方式。</target>
        </trans-unit>
        <trans-unit id="f026609c17e6af082dd6bc47161a40d8bcada7a1" translate="yes" xml:space="preserve">
          <source>Calling ordinary Nim procs inside the macro is possible:</source>
          <target state="translated">可以在宏内调用普通的Nim procs。</target>
        </trans-unit>
        <trans-unit id="a6642199094bd906db4fb13f403e5d9864fe5992" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;styledWrite&lt;/code&gt; and appends a newline at the end.</source>
          <target state="translated">调用 &lt;code&gt;styledWrite&lt;/code&gt; 并在末尾添加换行符。</target>
        </trans-unit>
        <trans-unit id="7e723e08242f8573f5209a7864aabe4641ef9035" translate="yes" xml:space="preserve">
          <source>Calls/expressions</source>
          <target state="translated">Calls/expressions</target>
        </trans-unit>
        <trans-unit id="cfe2ed24a31b4d3b922301946dba17cf4d7769e4" translate="yes" xml:space="preserve">
          <source>Can a &lt;a href=&quot;system#countup&quot;&gt;countup&lt;/a&gt; proc be written that supports this loop? Lets try:</source>
          <target state="translated">可以编写支持此循环的&lt;a href=&quot;system#countup&quot;&gt;计数过程&lt;/a&gt;吗？我们试试吧：</target>
        </trans-unit>
        <trans-unit id="311200cff08c958701bc83ae616b08935d475e3d" translate="yes" xml:space="preserve">
          <source>Can be used to convert a pointer type to an option type. It converts &lt;code&gt;nil&lt;/code&gt; to the none-option.</source>
          <target state="translated">可用于将指针类型转换为选项类型。它将 &lt;code&gt;nil&lt;/code&gt; 转换为none选项。</target>
        </trans-unit>
        <trans-unit id="73a3789c9cc42ae286b2bc07d22e73c5d6441a2b" translate="yes" xml:space="preserve">
          <source>CannotOpenFile</source>
          <target state="translated">CannotOpenFile</target>
        </trans-unit>
        <trans-unit id="a4b36f5e09cea9865cb6993e0accb43f1789f9cd" translate="yes" xml:space="preserve">
          <source>Capture: Apply expression &lt;em&gt;E&lt;/em&gt; and store the substring that matched &lt;em&gt;E&lt;/em&gt; into a &lt;em&gt;capture&lt;/em&gt; that can be accessed after the matching process.</source>
          <target state="translated">捕获：应用表达式&lt;em&gt;E&lt;/em&gt;并将与&lt;em&gt;E&lt;/em&gt;匹配的子字符串存储到&lt;em&gt;捕获中&lt;/em&gt;，该匹配过程之后可以访问该&lt;em&gt;捕获&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="dada321496f3f4fb22895c4b7cd0802a93ca5d72" translate="yes" xml:space="preserve">
          <source>Captured Search: Shorthand for &lt;code&gt;{(!E .)*} E&lt;/code&gt;. (Search loop for the pattern &lt;em&gt;E&lt;/em&gt;.) Everything until and exluding &lt;em&gt;E&lt;/em&gt; is captured.</source>
          <target state="translated">捕获的搜索： &lt;code&gt;{(!E .)*} E&lt;/code&gt; 简写。（模式&lt;em&gt;E的&lt;/em&gt;搜索循环。）捕获直到&lt;em&gt;E&lt;/em&gt;为止的所有内容。</target>
        </trans-unit>
        <trans-unit id="58721ba126309ca208430cd499d98df05aa97730" translate="yes" xml:space="preserve">
          <source>Card stands for the &lt;a href=&quot;http://en.wikipedia.org/wiki/Cardinality&quot;&gt;cardinality&lt;/a&gt; of a set.</source>
          <target state="translated">卡代表集合的&lt;a href=&quot;http://en.wikipedia.org/wiki/Cardinality&quot;&gt;基数&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f3a52f7d1133fe19bed724efe1bcc5b99763e6ec" translate="yes" xml:space="preserve">
          <source>Case expression</source>
          <target state="translated">案例表达</target>
        </trans-unit>
        <trans-unit id="ca901f84d981e4405cbb31e5c66f958f39995d61" translate="yes" xml:space="preserve">
          <source>Case statement</source>
          <target state="translated">案例说明</target>
        </trans-unit>
        <trans-unit id="67a5699f66f3a4d73b5d418a7b08b0c7350d984e" translate="yes" xml:space="preserve">
          <source>Case statement macros</source>
          <target state="translated">案例陈述宏</target>
        </trans-unit>
        <trans-unit id="97ba68fc56a3efba444f7c6353ffce14d1fabcb2" translate="yes" xml:space="preserve">
          <source>Cast operator</source>
          <target state="translated">铸造操作员</target>
        </trans-unit>
        <trans-unit id="b883b50cc0a7ec97e8c1c6aa366453f73a26413f" translate="yes" xml:space="preserve">
          <source>Change current implementation of &lt;code&gt;callSoon&lt;/code&gt;. This is normally called when dispatcher from &lt;code&gt;asyncdispatcher&lt;/code&gt; is initialized.</source>
          <target state="translated">更改 &lt;code&gt;callSoon&lt;/code&gt; 的当前实现。这通常在初始化 &lt;code&gt;asyncdispatcher&lt;/code&gt; 的调度程序时调用。</target>
        </trans-unit>
        <trans-unit id="f5a7e15fb6b1d9ffe60a97b971875a5fd14c3986" translate="yes" xml:space="preserve">
          <source>Change the i-th element of &lt;em&gt;deq&lt;/em&gt;.</source>
          <target state="translated">更改&lt;em&gt;deq&lt;/em&gt;的第i个元素。</target>
        </trans-unit>
        <trans-unit id="a378d275114814e060b77abd531dd213c169f954" translate="yes" xml:space="preserve">
          <source>Changes permission of &lt;code&gt;path&lt;/code&gt; to &lt;code&gt;permissions&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;path&lt;/code&gt; 的 &lt;code&gt;permissions&lt;/code&gt; 更改为权限。</target>
        </trans-unit>
        <trans-unit id="9bc9d87771e5da3b869e9e85828f5d8bc801b455" translate="yes" xml:space="preserve">
          <source>Changes the current directory on the remote FTP server to &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">将远程FTP服务器上的当前目录更改为 &lt;code&gt;dir&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c055bf809996f18dce65f9e3f155faf78c41dcc7" translate="yes" xml:space="preserve">
          <source>Changes the current directory to the parent of the current directory.</source>
          <target state="translated">将当前目录改为当前目录的父目录。</target>
        </trans-unit>
        <trans-unit id="a9e433ae359b493762f4f0a4bb510351b98a08de" translate="yes" xml:space="preserve">
          <source>Changes the file extension to &lt;em&gt;ext&lt;/em&gt;.</source>
          <target state="translated">将文件扩展名更改为&lt;em&gt;ext&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3ca5b74490314ec55a9cac4706975c4e89ff805e" translate="yes" xml:space="preserve">
          <source>Changing of files' permissions.</source>
          <target state="translated">改变文件的权限。</target>
        </trans-unit>
        <trans-unit id="419e96b941fe3d26a3baefa01150ca56eff780d7" translate="yes" xml:space="preserve">
          <source>Channel support for threads. &lt;strong&gt;Note&lt;/strong&gt;: This is part of the system module. Do not import it directly. To activate thread support you need to compile with the &lt;code&gt;--threads:on&lt;/code&gt; command line switch.</source>
          <target state="translated">通道对线程的支持。&lt;strong&gt;注意&lt;/strong&gt;：这是系统模块的一部分。不要直接导入。要激活线程支持，您需要使用 &lt;code&gt;--threads:on&lt;/code&gt; 命令行开关进行编译。</target>
        </trans-unit>
        <trans-unit id="0abdb5ab8a3afbc3386522492aae1bd812508530" translate="yes" xml:space="preserve">
          <source>Character class: If the character ahead appears in the string &lt;em&gt;s&lt;/em&gt;, consume it and indicate success. Otherwise indicate failure.</source>
          <target state="translated">字符类：如果前面的字符出现在字符串&lt;em&gt;s中&lt;/em&gt;，请消耗它并表示成功。否则表示失败。</target>
        </trans-unit>
        <trans-unit id="1ce4e1be05a213a12afbc5b91825b11c73d700b6" translate="yes" xml:space="preserve">
          <source>Character device.</source>
          <target state="translated">角色装置。</target>
        </trans-unit>
        <trans-unit id="b86bbfa9fed7ada0a389375eb5146d27ca6ab1fb" translate="yes" xml:space="preserve">
          <source>Character literals</source>
          <target state="translated">字符</target>
        </trans-unit>
        <trans-unit id="7e96bdb902b32980dacb34ac72b2007caf92e425" translate="yes" xml:space="preserve">
          <source>Character literals are enclosed in single quotes &lt;code&gt;''&lt;/code&gt; and can contain the same escape sequences as strings - with one exception: the platform dependent &lt;span id=&quot;newline_2&quot;&gt;newline&lt;/span&gt; (&lt;code&gt;\p&lt;/code&gt;) is not allowed as it may be wider than one character (often it is the pair CR/LF for example). Here are the valid &lt;span id=&quot;escape-sequences_2&quot;&gt;escape sequences&lt;/span&gt; for character literals:</source>
          <target state="translated">字符文字用单引号 &lt;code&gt;''&lt;/code&gt; 括起来并且可以包含与字符串相同的转义序列-唯一的例外是：不允许平台相关的&lt;span id=&quot;newline_2&quot;&gt;换行符&lt;/span&gt;（ &lt;code&gt;\p&lt;/code&gt; ），因为它可能比一个字符宽（通常是CR /例如LF）。以下是字符文字的有效&lt;span id=&quot;escape-sequences_2&quot;&gt;转义序列&lt;/span&gt;：</target>
        </trans-unit>
        <trans-unit id="ed1a1da8d910c3e98f7e3471a4032afafec5eb29" translate="yes" xml:space="preserve">
          <source>Character range: If the character ahead is one from the range &lt;em&gt;a&lt;/em&gt; through &lt;em&gt;b&lt;/em&gt;, consume it and indicate success. Otherwise indicate failure.</source>
          <target state="translated">字符范围：如果前面的字符是从&lt;em&gt;a&lt;/em&gt;到&lt;em&gt;b的&lt;/em&gt;一个字符，请消耗它并表示成功。否则表示失败。</target>
        </trans-unit>
        <trans-unit id="b6a6c483aae1575a0185147caca2a33f4a949438" translate="yes" xml:space="preserve">
          <source>Character type</source>
          <target state="translated">字符类型</target>
        </trans-unit>
        <trans-unit id="d50cd4e4889823f54696871b43521ee7b2cd7335" translate="yes" xml:space="preserve">
          <source>Character with decimal code &lt;em&gt;ddd&lt;/em&gt;.</source>
          <target state="translated">十进制代码为&lt;em&gt;ddd的&lt;/em&gt;字符。</target>
        </trans-unit>
        <trans-unit id="b6f59f08fd6d58c6725e21a9ec24e068148ec586" translate="yes" xml:space="preserve">
          <source>Characters</source>
          <target state="translated">Characters</target>
        </trans-unit>
        <trans-unit id="bf30516c00576762fbbb621668144d424821087b" translate="yes" xml:space="preserve">
          <source>Chars can be compared with the &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt; operators. The &lt;code&gt;$&lt;/code&gt; operator converts a &lt;code&gt;char&lt;/code&gt; to a &lt;code&gt;string&lt;/code&gt;. Chars cannot be mixed with integers; to get the ordinal value of a &lt;code&gt;char&lt;/code&gt; use the &lt;code&gt;ord&lt;/code&gt; proc. Converting from an integer to a &lt;code&gt;char&lt;/code&gt; is done with the &lt;code&gt;chr&lt;/code&gt; proc.</source>
          <target state="translated">字符可以与 &lt;code&gt;==&lt;/code&gt; ， &lt;code&gt;&amp;lt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;=&lt;/code&gt; ， &lt;code&gt;&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;gt;=&lt;/code&gt; 运算符进行比较。在 &lt;code&gt;$&lt;/code&gt; 运算符将一个 &lt;code&gt;char&lt;/code&gt; 的 &lt;code&gt;string&lt;/code&gt; 。字符不能与整数混合；要获得 &lt;code&gt;char&lt;/code&gt; 的序数值，请使用 &lt;code&gt;ord&lt;/code&gt; proc。使用 &lt;code&gt;chr&lt;/code&gt; proc 完成从整数到 &lt;code&gt;char&lt;/code&gt; 的转换。</target>
        </trans-unit>
        <trans-unit id="68664dd02e350ea5073e0ae4aa9b4b05b3c91960" translate="yes" xml:space="preserve">
          <source>Chat server</source>
          <target state="translated">聊天服务器</target>
        </trans-unit>
        <trans-unit id="929ff11e672655b0a3b8087213ef8d4a743bae97" translate="yes" xml:space="preserve">
          <source>Check if &lt;em&gt;s&lt;/em&gt; matches Nim's &quot;while&quot; keyword:</source>
          <target state="translated">检查&lt;em&gt;s是否&lt;/em&gt;与Nim的&amp;ldquo; while&amp;rdquo;关键字匹配：</target>
        </trans-unit>
        <trans-unit id="8cf370f6b8ec38a29e2432bba075fad77aab417e" translate="yes" xml:space="preserve">
          <source>Check if a &lt;code&gt;FutureStream&lt;/code&gt; is finished. &lt;code&gt;true&lt;/code&gt; value means that no more data will be placed inside the stream _&lt;a href=&quot;#and&quot;&gt;and&lt;/a&gt; that there is no data waiting to be retrieved.</source>
          <target state="translated">检查 &lt;code&gt;FutureStream&lt;/code&gt; 是否完成。 &lt;code&gt;true&lt;/code&gt; 值表示没有更多数据将被放置在流_中，&lt;a href=&quot;#and&quot;&gt;并且&lt;/a&gt;没有等待检索的数据。</target>
        </trans-unit>
        <trans-unit id="f166d2a8f7a171d1bb127378eb23732d41da0d11" translate="yes" xml:space="preserve">
          <source>Check if a &lt;span id=&quot;directory_1&quot;&gt;directory&lt;/span&gt;&lt;em&gt;dir&lt;/em&gt; exists, and create it otherwise.</source>
          <target state="translated">检查&lt;span id=&quot;directory_1&quot;&gt;目录&lt;/span&gt;&lt;em&gt;dir是否&lt;/em&gt;存在，否则创建。</target>
        </trans-unit>
        <trans-unit id="984fcebb18e75b7e703ed2015d054cab99f8aaec" translate="yes" xml:space="preserve">
          <source>Check two nodes for equality</source>
          <target state="translated">检查两个节点是否相等</target>
        </trans-unit>
        <trans-unit id="da7416e40baa75d7c56d32d6f86dd948f4e19c78" translate="yes" xml:space="preserve">
          <source>Checking the progress of a file transfer</source>
          <target state="translated">检查文件传输的进度</target>
        </trans-unit>
        <trans-unit id="132dba3d8ecc2f1b5ab2812aeccdc98f5e82e566" translate="yes" xml:space="preserve">
          <source>Checks &lt;code&gt;osLastError&lt;/code&gt; for a valid error. If it has been reset it uses the last error stored in the socket object.</source>
          <target state="translated">检查 &lt;code&gt;osLastError&lt;/code&gt; 是否存在有效错误。如果已重置，它将使用存储在套接字对象中的最后一个错误。</target>
        </trans-unit>
        <trans-unit id="cc61b0718a3e619d1bd3a5d9f1cd5caf0d888789" translate="yes" xml:space="preserve">
          <source>Checks for equality between two &lt;em&gt;bool&lt;/em&gt; variables</source>
          <target state="translated">检查两个&lt;em&gt;布尔&lt;/em&gt;变量之间是否相等</target>
        </trans-unit>
        <trans-unit id="6f860c207f2a11f0e1a3d019e6937c4ffa577ce1" translate="yes" xml:space="preserve">
          <source>Checks for equality between two &lt;em&gt;char&lt;/em&gt; variables</source>
          <target state="translated">检查两个&lt;em&gt;char&lt;/em&gt;变量之间的相等性</target>
        </trans-unit>
        <trans-unit id="fb71cf56026acbd41603489b57883dd164a92da2" translate="yes" xml:space="preserve">
          <source>Checks for equality between two &lt;em&gt;cstring&lt;/em&gt; variables.</source>
          <target state="translated">检查两个&lt;em&gt;cstring&lt;/em&gt;变量之间的相等性。</target>
        </trans-unit>
        <trans-unit id="6693c72afaf2ac68bebd9822b5f0ce79ca5dfcae" translate="yes" xml:space="preserve">
          <source>Checks for equality between two &lt;em&gt;string&lt;/em&gt; variables</source>
          <target state="translated">检查两个&lt;em&gt;字符串&lt;/em&gt;变量之间的相等性</target>
        </trans-unit>
        <trans-unit id="5987179982937ecdc2f511a6d1b5e95c1f8fd6e8" translate="yes" xml:space="preserve">
          <source>Checks for equality between two variables of type &lt;em&gt;set&lt;/em&gt;</source>
          <target state="translated">检查两个类型&lt;em&gt;集合&lt;/em&gt;变量之间的相等性&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="99503e3efa2622079cb2940b4767dc3ac6ea82f5" translate="yes" xml:space="preserve">
          <source>Checks if &lt;em&gt;key&lt;/em&gt; exists in &lt;em&gt;node&lt;/em&gt;.</source>
          <target state="translated">检查&lt;em&gt;key是否&lt;/em&gt;存在于&lt;em&gt;node中&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a8474632e4fae06f8ce5b7c82b1279000374e87d" translate="yes" xml:space="preserve">
          <source>Checks if &lt;em&gt;s&lt;/em&gt; is nil or consists entirely of whitespace characters.</source>
          <target state="translated">检查&lt;em&gt;s&lt;/em&gt;是否为nil或完全由空格字符组成。</target>
        </trans-unit>
        <trans-unit id="c736c01c5bfa8a1c6f5bac3b24beb2893e45e7de" translate="yes" xml:space="preserve">
          <source>Checks if &lt;em&gt;s&lt;/em&gt; is nil or empty.</source>
          <target state="translated">检查&lt;em&gt;s&lt;/em&gt;是否为nil或为空。</target>
        </trans-unit>
        <trans-unit id="59f775bd733836ecb4200f87a57e67e9cfc67799" translate="yes" xml:space="preserve">
          <source>Checks if &lt;em&gt;val&lt;/em&gt; exists in array &lt;em&gt;node&lt;/em&gt;.</source>
          <target state="translated">检查数组&lt;em&gt;节点中&lt;/em&gt;是否存在&lt;em&gt;val&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f46cbda82eb5e9585af47785b7a218005abe05c4" translate="yes" xml:space="preserve">
          <source>Checks if &lt;em&gt;value&lt;/em&gt; is within the range of &lt;em&gt;s&lt;/em&gt;; returns true iff &lt;em&gt;value &amp;gt;= s.a and value &amp;lt;= s.b&lt;/em&gt;</source>
          <target state="translated">检查&lt;em&gt;值&lt;/em&gt;是否在&lt;em&gt;s&lt;/em&gt;的范围内；当&lt;em&gt;值&amp;gt; = sa和值&amp;lt;= sb时，&lt;/em&gt;返回true&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1f0ff90bf51c73226b0a0ba5e93e479486fcfc7a" translate="yes" xml:space="preserve">
          <source>Checks if &lt;em&gt;x&lt;/em&gt; has a type of &lt;em&gt;y&lt;/em&gt;</source>
          <target state="translated">检查&lt;em&gt;x&lt;/em&gt;是否具有&lt;em&gt;y&lt;/em&gt;类型&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="daf104d7238ae02de9f7b8d4b2ef3a9d0dd7836c" translate="yes" xml:space="preserve">
          <source>Checks if T is of the same type as S</source>
          <target state="translated">确认T是否与S为同一类型。</target>
        </trans-unit>
        <trans-unit id="3e2a37d26b80f14b9376ff0970807fa4ec421d07" translate="yes" xml:space="preserve">
          <source>Checks if a cookie of &lt;em&gt;name&lt;/em&gt; exists.</source>
          <target state="translated">检查&lt;em&gt;名称&lt;/em&gt; cookie是否存在。</target>
        </trans-unit>
        <trans-unit id="44e4d80ce5f7a1e55199005e073fe653afa2fabc" translate="yes" xml:space="preserve">
          <source>Checks if a string is an IP address Returns true if it is, false otherwise</source>
          <target state="translated">检查一个字符串是否是IP地址 如果是,则返回true,否则返回false。</target>
        </trans-unit>
        <trans-unit id="91fcb8e30c84d0132cb566b30317c70326d854cb" translate="yes" xml:space="preserve">
          <source>Checks if every item fulfills the predicate.</source>
          <target state="translated">检查是否每个项目都符合前提条件。</target>
        </trans-unit>
        <trans-unit id="af2565e07778c49efe297f906f075760048c0b14" translate="yes" xml:space="preserve">
          <source>Checks if some item fulfills the predicate.</source>
          <target state="translated">确认某个项目是否满足前提条件。</target>
        </trans-unit>
        <trans-unit id="239c89279a3bce5516e0481e4f55258a02a144dd" translate="yes" xml:space="preserve">
          <source>Checks that two &lt;em&gt;proc&lt;/em&gt; variables refer to the same procedure</source>
          <target state="translated">检查两个&lt;em&gt;proc&lt;/em&gt;变量是否引用同一过程</target>
        </trans-unit>
        <trans-unit id="ca5e50261c267853c17b8d0483f9eeeb373544ad" translate="yes" xml:space="preserve">
          <source>Checks that two &lt;em&gt;ptr&lt;/em&gt; variables refer to the same item</source>
          <target state="translated">检查两个&lt;em&gt;ptr&lt;/em&gt;变量是否引用同一项目</target>
        </trans-unit>
        <trans-unit id="e8feb74c6a474812ed4a3894be2a37759dfadb64" translate="yes" xml:space="preserve">
          <source>Checks that two &lt;em&gt;ref&lt;/em&gt; variables refer to the same item</source>
          <target state="translated">检查两个&lt;em&gt;ref&lt;/em&gt;变量是否引用同一项目</target>
        </trans-unit>
        <trans-unit id="2efb60769de3f5e8c0d857e5d64a4a1d598026d9" translate="yes" xml:space="preserve">
          <source>Checks to see whether &lt;em&gt;a&lt;/em&gt; is already sorted in &lt;em&gt;order&lt;/em&gt; using &lt;em&gt;cmp&lt;/em&gt; for the comparison. Parameters identical to &lt;em&gt;sort&lt;/em&gt;</source>
          <target state="translated">检查是否&lt;em&gt;一个&lt;/em&gt;是已经排序&lt;em&gt;顺序&lt;/em&gt;使用&lt;em&gt;CMP&lt;/em&gt;的比较。参数与&lt;em&gt;排序&lt;/em&gt;相同&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cb0fddbd515d81fc29a204bb7d47e5506b13b3dc" translate="yes" xml:space="preserve">
          <source>Checks whether &lt;code&gt;s&lt;/code&gt; is lower case.</source>
          <target state="translated">检查 &lt;code&gt;s&lt;/code&gt; 是否为小写。</target>
        </trans-unit>
        <trans-unit id="a95f9a2833efadf810a077d161631c3c1a37d62b" translate="yes" xml:space="preserve">
          <source>Checks whether &lt;code&gt;s&lt;/code&gt; is upper case.</source>
          <target state="translated">检查 &lt;code&gt;s&lt;/code&gt; 是否为大写。</target>
        </trans-unit>
        <trans-unit id="c19cc9513c0bf1c1425112be49c299ffd561ef33" translate="yes" xml:space="preserve">
          <source>Checks whether a given &lt;em&gt;path&lt;/em&gt; is a root directory</source>
          <target state="translated">检查给定&lt;em&gt;路径&lt;/em&gt;是否为根目录</target>
        </trans-unit>
        <trans-unit id="2b2e978aedf3c96424b9cc68407ee36744d6e1fe" translate="yes" xml:space="preserve">
          <source>Checks whether a given &lt;em&gt;path&lt;/em&gt; is absolute.</source>
          <target state="translated">检查给定&lt;em&gt;路径&lt;/em&gt;是否为绝对&lt;em&gt;路径&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ee4c2aa7f06d4dab8347c552766eb0e82241c0bc" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;c&lt;/em&gt; is a lower case character.</source>
          <target state="translated">检查&lt;em&gt;c&lt;/em&gt;是否为小写字符。</target>
        </trans-unit>
        <trans-unit id="e62669610340d11599af3c49e990b8563987c907" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;c&lt;/em&gt; is a number.</source>
          <target state="translated">检查&lt;em&gt;c&lt;/em&gt;是否为数字。</target>
        </trans-unit>
        <trans-unit id="dec21879462a972a9215d78983d9622f9e614ece" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;c&lt;/em&gt; is a whitespace character.</source>
          <target state="translated">检查&lt;em&gt;c&lt;/em&gt;是否为空格字符。</target>
        </trans-unit>
        <trans-unit id="66ef64629cfaff59e4dda1f006a57dd1a8b7a659" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;c&lt;/em&gt; is alphabetical.</source>
          <target state="translated">检查&lt;em&gt;c&lt;/em&gt;是否为字母。</target>
        </trans-unit>
        <trans-unit id="8bbff5e8bf3937ea9eac7179b7b1803460bcfd4b" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;c&lt;/em&gt; is alphanumeric.</source>
          <target state="translated">检查&lt;em&gt;c&lt;/em&gt;是否为字母数字。</target>
        </trans-unit>
        <trans-unit id="783f60adb58a778d0bdcb0ed1f898546ed698d6c" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;c&lt;/em&gt; is an upper case character.</source>
          <target state="translated">检查&lt;em&gt;c&lt;/em&gt;是否为大写字符。</target>
        </trans-unit>
        <trans-unit id="96e7693a15498ac9fcc81a271241dceee25a1fa0" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;s&lt;/em&gt; is a numeric value.</source>
          <target state="translated">检查&lt;em&gt;s&lt;/em&gt;是否为数值。</target>
        </trans-unit>
        <trans-unit id="bdff523a789009cf024b82e48a29ed38f90b665d" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;s&lt;/em&gt; is a unicode title.</source>
          <target state="translated">检查&lt;em&gt;s&lt;/em&gt;是否为unicode标题。</target>
        </trans-unit>
        <trans-unit id="e633a4c42c8c1c1a6b480f4086e931c947915d1a" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;s&lt;/em&gt; is alphabetical.</source>
          <target state="translated">检查&lt;em&gt;s&lt;/em&gt;是否为字母。</target>
        </trans-unit>
        <trans-unit id="05a69f1cbe4ef4451b315649a574990d236315ae" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;s&lt;/em&gt; is alphanumeric.</source>
          <target state="translated">检查&lt;em&gt;s&lt;/em&gt;是否为字母数字。</target>
        </trans-unit>
        <trans-unit id="a4cb2611d9b736cb54c98723c01635d46689fc8b" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;s&lt;/em&gt; is completely whitespace.</source>
          <target state="translated">检查&lt;em&gt;s&lt;/em&gt;是否完全为空格。</target>
        </trans-unit>
        <trans-unit id="5589a38b0e9e9fce2e0e9bb1532225529e28fbfc" translate="yes" xml:space="preserve">
          <source>Checks whether values within the &lt;em&gt;same enum&lt;/em&gt; have the same underlying value</source>
          <target state="translated">检查&lt;em&gt;同一枚举&lt;/em&gt;内的值是否具有相同的基础值</target>
        </trans-unit>
        <trans-unit id="60654a8d0b43196c10e1df25c6c3376b674ea1de" translate="yes" xml:space="preserve">
          <source>Checks, whether &lt;em&gt;x&lt;/em&gt; has a property of name &lt;em&gt;prop&lt;/em&gt;.</source>
          <target state="translated">检查&lt;em&gt;x&lt;/em&gt;是否具有名称&lt;em&gt;prop&lt;/em&gt;的属性。</target>
        </trans-unit>
        <trans-unit id="8a71440783140db7ed4f5845038e0d0ef495c4b8" translate="yes" xml:space="preserve">
          <source>Classifies a floating point value. Returns &lt;em&gt;x&lt;/em&gt;'s class as specified by &lt;em&gt;FloatClass&lt;/em&gt;.</source>
          <target state="translated">分类浮点值。返回&lt;em&gt;FloatClass&lt;/em&gt;指定的&lt;em&gt;x&lt;/em&gt;的类。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c0676a856119b9f43d3b722b7e1f13d155840cdb" translate="yes" xml:space="preserve">
          <source>Clear the supported exceptions represented by &lt;em&gt;excepts&lt;/em&gt;.</source>
          <target state="translated">清除由&lt;em&gt;excepts&lt;/em&gt;表示的受支持的异常。</target>
        </trans-unit>
        <trans-unit id="bbdc3e1cf1b38d523d6171b4db601a4ff9f5cdbb" translate="yes" xml:space="preserve">
          <source>Clears the HashSet back to an empty state, without shrinking any of the existing storage. O(n) where n is the size of the hash bucket.</source>
          <target state="translated">清除HashSet回到空状态,而不缩小任何现有的存储空间。O(n)其中n是哈希桶的大小。</target>
        </trans-unit>
        <trans-unit id="500eb6a58ee99ed5a10bac0307d2399525789e8b" translate="yes" xml:space="preserve">
          <source>Clears the OrderedSet back to an empty state, without shrinking any of the existing storage. O(n) where n is the size of the hash bucket.</source>
          <target state="translated">将OrderedSet清除回空状态,而不会缩小任何现有的存储空间。O(n)其中n是哈希桶的大小。</target>
        </trans-unit>
        <trans-unit id="3253f000f2b69e9ea7ef993e1158952274e09f15" translate="yes" xml:space="preserve">
          <source>Clears the list of callbacks and sets the callback proc to be called when the future completes.</source>
          <target state="translated">清空回调列表,并设置回调proc在未来完成时被调用。</target>
        </trans-unit>
        <trans-unit id="507ebd324f496a23794692a20495953cda164297" translate="yes" xml:space="preserve">
          <source>Clients can also use Postgres keyword/value connection strings to connect.</source>
          <target state="translated">客户端也可以使用Postgres关键字/值连接字符串进行连接。</target>
        </trans-unit>
        <trans-unit id="a9cbac01b8a8251fed166d82028202652414e266" translate="yes" xml:space="preserve">
          <source>Closes &lt;code&gt;sock&lt;/code&gt;. Terminates any current connections.</source>
          <target state="translated">关闭 &lt;code&gt;sock&lt;/code&gt; 。终止任何当前连接。</target>
        </trans-unit>
        <trans-unit id="a734b28e01c24d279132bdbcfaf68f5165797f44" translate="yes" xml:space="preserve">
          <source>Closes a socket and ensures that it is unregistered.</source>
          <target state="translated">关闭一个套接字,并确保它是未注册的。</target>
        </trans-unit>
        <trans-unit id="caf7e77bedd43df5afff7efafdc353d87046a94d" translate="yes" xml:space="preserve">
          <source>Closes a socket.</source>
          <target state="translated">关闭一个插座。</target>
        </trans-unit>
        <trans-unit id="1ced522c89f62b7dce08c4647da6d4cf514e789f" translate="yes" xml:space="preserve">
          <source>Closes any connections held by the HTTP client.</source>
          <target state="translated">关闭所有由HTTP客户端持有的连接。</target>
        </trans-unit>
        <trans-unit id="6e4ad07cceacc544c46a9fcbeb6a76c8d0de27a4" translate="yes" xml:space="preserve">
          <source>Closes event &lt;code&gt;ev&lt;/code&gt;.</source>
          <target state="translated">关闭事件 &lt;code&gt;ev&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="33c90fcaa7ffb78d8a27467591953ef2c7afae9a" translate="yes" xml:space="preserve">
          <source>Closes the &lt;code&gt;AsyncScgiState&lt;/code&gt;.</source>
          <target state="translated">关闭 &lt;code&gt;AsyncScgiState&lt;/code&gt; 。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
