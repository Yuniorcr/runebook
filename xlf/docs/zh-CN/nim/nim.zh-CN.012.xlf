<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="nim">
    <body>
      <group id="nim">
        <trans-unit id="95f94a22baed9e59f27d8a4126864041ec912710" translate="yes" xml:space="preserve">
          <source>In other words, the lifetime of what &lt;code&gt;result&lt;/code&gt; points to is attached to the lifetime of the first parameter and that is enough knowledge to verify memory safety at the callsite.</source>
          <target state="translated">换句话说， &lt;code&gt;result&lt;/code&gt; 指向的生命周期附加到第一个参数的生命周期，并且这是足够的知识来验证呼叫站点的内存安全性。</target>
        </trans-unit>
        <trans-unit id="102f6667e274b32df706ad020620d76cc4f12944" translate="yes" xml:space="preserve">
          <source>In other words, the macro needs to transform the full &lt;code&gt;case&lt;/code&gt; statement but only the statement's selector expression is used to determine which macro to call.</source>
          <target state="translated">换句话说，宏需要转换完整的 &lt;code&gt;case&lt;/code&gt; 语句，但是仅使用语句的选择器表达式来确定要调用哪个宏。</target>
        </trans-unit>
        <trans-unit id="f0ffdfd405410c78e024047ef7872e44df7c644e" translate="yes" xml:space="preserve">
          <source>In practice, things are worse still, consider &lt;code&gt;someGlobal[i][j].add arg&lt;/code&gt;. We only know the root is &lt;code&gt;someGlobal&lt;/code&gt; but the concrete path to the data is unknown as is the value that is added. We could compute a &quot;diff&quot; between the global states and use that to compute a symbol patchset, but this is quite some work, expensive to do at runtime (it would need to run after every module has been compiled) and also would break for hash tables.</source>
          <target state="translated">实际上，情况仍然更糟，请考虑 &lt;code&gt;someGlobal[i][j].add arg&lt;/code&gt; 。我们只知道根是 &lt;code&gt;someGlobal&lt;/code&gt; ,但是数据的具体路径以及所添加的值都是未知的。我们可以计算全局状态之间的&amp;ldquo;差异&amp;rdquo;，并使用它来计算符号补丁集，但这是相当多的工作，在运行时需要花费很多钱（它需要在编译完每个模块后运行），并且还会中断哈希表。</target>
        </trans-unit>
        <trans-unit id="17d616255346e231bf83d583877cbf5b0083249a" translate="yes" xml:space="preserve">
          <source>In practice, things are worse still, consider &lt;code&gt;someGlobal[i][j].add arg&lt;/code&gt;. We only know the root is &lt;code&gt;someGlobal&lt;/code&gt; but the concrete path to the data is unknown as is the value that is added. We could compute a &quot;diff&quot; between the global states and use that to compute a symbol patchset, but this is quite some work, expensive to do at runtime (it would need to run after every module has been compiled) and would also break for hash tables.</source>
          <target state="translated">实际上，情况仍然更糟，请考虑 &lt;code&gt;someGlobal[i][j].add arg&lt;/code&gt; 。我们只知道根是 &lt;code&gt;someGlobal&lt;/code&gt; ,但是数据的具体路径以及所添加的值都是未知的。我们可以计算全局状态之间的&amp;ldquo;差异&amp;rdquo;，然后使用它来计算符号补丁集，但这是一项相当大的工作，在运行时需要昂贵的工作（它需要在编译完每个模块之后运行），并且还会中断哈希表。</target>
        </trans-unit>
        <trans-unit id="b855cc2f2c105e6dd103557865ed5b380e3a2628" translate="yes" xml:space="preserve">
          <source>In raw literals the backslash is not an escape character.</source>
          <target state="translated">在生字中,反斜杠不是转义字。</target>
        </trans-unit>
        <trans-unit id="c7f10b9ab29ce16208f7daf440d19bf68a4e424e" translate="yes" xml:space="preserve">
          <source>In templates identifiers can be constructed with the backticks notation:</source>
          <target state="translated">在模板中,标识符可以用回标符号来构造。</target>
        </trans-unit>
        <trans-unit id="b2768586236fda36fbb8835c6640e3bbf9f72b7a" translate="yes" xml:space="preserve">
          <source>In the above example, because the string ends in a period, to get the portion of the string that is &quot;useless&quot; and replace it with &quot;useful&quot;.</source>
          <target state="translated">在上面的例子中,因为字符串以句号结束,所以要得到字符串中 &quot;无用 &quot;的部分,并用 &quot;有用 &quot;代替。</target>
        </trans-unit>
        <trans-unit id="1c735dfcff9ac999e211c2de3309c6b523627b0e" translate="yes" xml:space="preserve">
          <source>In the above example, providing the -d flag causes the symbol &lt;code&gt;FooBar&lt;/code&gt; to be overwritten at compile time, printing out 42. If the &lt;code&gt;-d:FooBar=42&lt;/code&gt; were to be omitted, the default value of 5 would be used.</source>
          <target state="translated">在上面的示例中，提供-d标志会使符号 &lt;code&gt;FooBar&lt;/code&gt; 在编译时被覆盖，打印出42。如果要省略 &lt;code&gt;-d:FooBar=42&lt;/code&gt; ，则将使用默认值5。</target>
        </trans-unit>
        <trans-unit id="d668a2ec82cc9fcd88ec0ae1ca74d80a2240aa67" translate="yes" xml:space="preserve">
          <source>In the above example, providing the -d flag causes the symbol &lt;code&gt;FooBar&lt;/code&gt; to be overwritten at compile-time, printing out 42. If the &lt;code&gt;-d:FooBar=42&lt;/code&gt; were to be omitted, the default value of 5 would be used. To see if a value was provided, &lt;code&gt;defined(FooBar)&lt;/code&gt; can be used.</source>
          <target state="translated">在上面的示例中，提供-d标志会使符号 &lt;code&gt;FooBar&lt;/code&gt; 在编译时被覆盖，并打印出42。如果要省略 &lt;code&gt;-d:FooBar=42&lt;/code&gt; ，则将使用默认值5。要查看是否提供了值，可以使用 &lt;code&gt;defined(FooBar)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6ef0c534b48c5ddbaf66e5a1fa0de3c409abe7be" translate="yes" xml:space="preserve">
          <source>In the above example, the &lt;code&gt;recv&lt;/code&gt; function will return a brand new &lt;code&gt;Future&lt;/code&gt; instance once the request for data to be read from the socket is made. This &lt;code&gt;Future&lt;/code&gt; instance will complete once the requested amount of data is read, in this case it is 100 bytes. The second line sets a callback on this future which will be called once the future completes. All the callback does is write the data stored in the future to &lt;code&gt;stdout&lt;/code&gt;. The &lt;code&gt;read&lt;/code&gt; function is used for this and it checks whether the future completes with an error for you (if it did it will simply raise the error), if there is no error however it returns the value of the future.</source>
          <target state="translated">在上面的示例中，一旦请求从套接字读取数据， &lt;code&gt;recv&lt;/code&gt; 函数将返回一个全新的 &lt;code&gt;Future&lt;/code&gt; 实例。读取请求的数据量后，此 &lt;code&gt;Future&lt;/code&gt; 实例将完成，在这种情况下为100字节。第二行在此未来上设置回调，一旦未来完成，将调用该回调。回调所做的只是将将来存储的数据写入 &lt;code&gt;stdout&lt;/code&gt; 。该 &lt;code&gt;read&lt;/code&gt; 功能被用于此，它检查是否有你的一个错误以后完成（如果它没有它只会引发错误），如果没有错误但它返回的未来价值。</target>
        </trans-unit>
        <trans-unit id="21c40f021cb3285301a10da6c518a7dfee56f66a" translate="yes" xml:space="preserve">
          <source>In the above example, the search loop is unrolled by a factor 4. The unroll factor can be left out too; the compiler then chooses an appropriate unroll factor.</source>
          <target state="translated">在上面的例子中,搜索循环的展开因子为4。展开因子也可以不放,编译器会选择一个合适的展开因子。</target>
        </trans-unit>
        <trans-unit id="447fba0bf5092295ea3ef5df369d20395a2954e0" translate="yes" xml:space="preserve">
          <source>In the age of HTTP, HTML, FTP, TCP, IP, UTF, WWW it is foolish to pretend these are somewhat special words requiring all uppercase. Instead treat them as what they are: Real words. So it's &lt;code&gt;parseUrl&lt;/code&gt; rather than &lt;code&gt;parseURL&lt;/code&gt;, &lt;code&gt;checkHttpHeader&lt;/code&gt; instead of &lt;code&gt;checkHTTPHeader&lt;/code&gt; etc.</source>
          <target state="translated">在HTTP，HTML，FTP，TCP，IP，UTF，WWW时代，假装这些是需要全部大写的特殊单词是愚蠢的。而是将它们视作它们是什么：真实的单词。因此，它是 &lt;code&gt;parseUrl&lt;/code&gt; 而不是 &lt;code&gt;parseURL&lt;/code&gt; ， &lt;code&gt;checkHttpHeader&lt;/code&gt; 而不是 &lt;code&gt;checkHTTPHeader&lt;/code&gt; 等。</target>
        </trans-unit>
        <trans-unit id="1aaaccd5328576322733f4b1a0d0cfc0189406e9" translate="yes" xml:space="preserve">
          <source>In the case of Nim's own documentation, the &lt;code&gt;txt&lt;/code&gt; value is just a commit hash to append to a formatted URL to &lt;a href=&quot;https://github.com/Araq/Nim&quot;&gt;https://github.com/Araq/Nim&lt;/a&gt;. The &lt;code&gt;tools/nimweb.nim&lt;/code&gt; helper queries the current git commit hash during doc generation, but since you might be working on an unpublished repository, it also allows specifying a &lt;code&gt;githash&lt;/code&gt; value in &lt;code&gt;web/website.ini&lt;/code&gt; to force a specific commit in the output.</source>
          <target state="translated">对于Nim自己的文档， &lt;code&gt;txt&lt;/code&gt; 值只是一个提交哈希，可以附加到&lt;a href=&quot;https://github.com/Araq/Nim&quot;&gt;https://github.com/Araq/Nim&lt;/a&gt;的格式化URL上。该 &lt;code&gt;tools/nimweb.nim&lt;/code&gt; 助手查询当前的git文档生成期间提交哈希值，但是因为你可能在一个未发布的库中工作，这也让指定 &lt;code&gt;githash&lt;/code&gt; 价值 &lt;code&gt;web/website.ini&lt;/code&gt; 强制输出特定的提交。</target>
        </trans-unit>
        <trans-unit id="f7bbacfbe7cce5758d2328c3b07e39032324321c" translate="yes" xml:space="preserve">
          <source>In the compiler these integer literal types are represented with the node kind &lt;code&gt;nkIntLit&lt;/code&gt;, type kind &lt;code&gt;tyInt&lt;/code&gt; and the member &lt;code&gt;n&lt;/code&gt; of the type pointing back to the integer literal node in the ast containing the integer value. These are the properties that hold true for integer literal types.</source>
          <target state="translated">在编译这些整数文字类型被表示与所述节点种类 &lt;code&gt;nkIntLit&lt;/code&gt; ，键入种类 &lt;code&gt;tyInt&lt;/code&gt; 和构件 &lt;code&gt;n&lt;/code&gt; 指向在包含整数值的AST回整数文字节点的类型。这些是对整数文字类型成立的属性。</target>
        </trans-unit>
        <trans-unit id="d00b94e745093f304c720c396d8d5aff9aa3553f" translate="yes" xml:space="preserve">
          <source>In the construct &lt;code&gt;let/var x = ...&lt;/code&gt; (var/let binding) hooks are generated for &lt;code&gt;typeof(x)&lt;/code&gt;.</source>
          <target state="translated">在构造 &lt;code&gt;let/var x = ...&lt;/code&gt; （var / let绑定）时，会为 &lt;code&gt;typeof(x)&lt;/code&gt; 生成钩子。</target>
        </trans-unit>
        <trans-unit id="2157cdb5eb2abc30a467f2496e41f6251f2619c2" translate="yes" xml:space="preserve">
          <source>In the current implementation &lt;code&gt;FloatDivByZeroDefect&lt;/code&gt; and &lt;code&gt;FloatInexactDefect&lt;/code&gt; are never raised. &lt;code&gt;FloatOverflowDefect&lt;/code&gt; is raised instead of &lt;code&gt;FloatDivByZeroDefect&lt;/code&gt;. There is also a &lt;span id=&quot;floatchecks_1&quot;&gt;floatChecks&lt;/span&gt; pragma that is a short-cut for the combination of &lt;code&gt;nanChecks&lt;/code&gt; and &lt;code&gt;infChecks&lt;/code&gt; pragmas. &lt;code&gt;floatChecks&lt;/code&gt; are turned off as default.</source>
          <target state="translated">在当前实现中，从未提出 &lt;code&gt;FloatDivByZeroDefect&lt;/code&gt; 和 &lt;code&gt;FloatInexactDefect&lt;/code&gt; 。 &lt;code&gt;FloatOverflowDefect&lt;/code&gt; 而不是 &lt;code&gt;FloatDivByZeroDefect&lt;/code&gt; 。还有一个&lt;span id=&quot;floatchecks_1&quot;&gt;floatChecks&lt;/span&gt;编译指示，它是 &lt;code&gt;nanChecks&lt;/code&gt; 和 &lt;code&gt;infChecks&lt;/code&gt; 编译指示的组合的捷径。 &lt;code&gt;floatChecks&lt;/code&gt; 默认关闭。</target>
        </trans-unit>
        <trans-unit id="222b18bf0bb9eca48a64b5eb7ba691094c380acc" translate="yes" xml:space="preserve">
          <source>In the current implementation &lt;code&gt;FloatDivByZeroError&lt;/code&gt; and &lt;code&gt;FloatInexactError&lt;/code&gt; are never raised. &lt;code&gt;FloatOverflowError&lt;/code&gt; is raised instead of &lt;code&gt;FloatDivByZeroError&lt;/code&gt;. There is also a &lt;span id=&quot;floatchecks_1&quot;&gt;floatChecks&lt;/span&gt; pragma that is a short-cut for the combination of &lt;code&gt;nanChecks&lt;/code&gt; and &lt;code&gt;infChecks&lt;/code&gt; pragmas. &lt;code&gt;floatChecks&lt;/code&gt; are turned off as default.</source>
          <target state="translated">在当前实现中，永远不会引发 &lt;code&gt;FloatDivByZeroError&lt;/code&gt; 和 &lt;code&gt;FloatInexactError&lt;/code&gt; 。 &lt;code&gt;FloatOverflowError&lt;/code&gt; 而不是 &lt;code&gt;FloatDivByZeroError&lt;/code&gt; 。还有一个&lt;span id=&quot;floatchecks_1&quot;&gt;floatChecks&lt;/span&gt;编译指示，它是 &lt;code&gt;nanChecks&lt;/code&gt; 和 &lt;code&gt;infChecks&lt;/code&gt; 编译指示的组合的捷径。 &lt;code&gt;floatChecks&lt;/code&gt; 默认关闭。</target>
        </trans-unit>
        <trans-unit id="bff2144a51b7a2c294698601ad8d94335ce9f207" translate="yes" xml:space="preserve">
          <source>In the example &lt;code&gt;name&lt;/code&gt; is instantiated with &lt;code&gt;myint&lt;/code&gt;, so `T name` becomes &lt;code&gt;Tmyint&lt;/code&gt;.</source>
          <target state="translated">在示例中， &lt;code&gt;name&lt;/code&gt; 用 &lt;code&gt;myint&lt;/code&gt; 实例化，因此`T name`成为 &lt;code&gt;Tmyint&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f3d915c7fda05ffa880f1a94fe575c45d57c7e6" translate="yes" xml:space="preserve">
          <source>In the example a new pragma named &lt;code&gt;rtl&lt;/code&gt; is introduced that either imports a symbol from a dynamic library or exports the symbol for dynamic library generation.</source>
          <target state="translated">在示例中，引入了一个名为 &lt;code&gt;rtl&lt;/code&gt; 的新编译指示，该编译指示从动态库中导入符号或导出该符号以用于动态库生成。</target>
        </trans-unit>
        <trans-unit id="93f65483d248fc770a9b18bebde69fbd09a74d5c" translate="yes" xml:space="preserve">
          <source>In the example a tree structure is declared with the &lt;code&gt;Node&lt;/code&gt; type. Note that the type definition is recursive and the GC has to assume that objects of this type may form a cyclic graph. The &lt;code&gt;acyclic&lt;/code&gt; pragma passes the information that this cannot happen to the GC. If the programmer uses the &lt;code&gt;acyclic&lt;/code&gt; pragma for data types that are in reality cyclic, the GC may leak memory, but nothing worse happens.</source>
          <target state="translated">在示例中，使用 &lt;code&gt;Node&lt;/code&gt; 类型声明树结构。请注意，类型定义是递归的，GC必须假定这种类型的对象可以形成循环图。该 &lt;code&gt;acyclic&lt;/code&gt; 编译通过，这不能发生在GC的信息。如果程序员将 &lt;code&gt;acyclic&lt;/code&gt; 编译指示用于实际上是循环的数据类型，则GC可能会泄漏内存，但没有更糟的事情发生。</target>
        </trans-unit>
        <trans-unit id="c223baf4c7b9145e95ff7b9ff3609cc1168a5f2c" translate="yes" xml:space="preserve">
          <source>In the example c2nim treats the declaration of &lt;code&gt;DECLARE_NO_COPY_CLASS&lt;/code&gt; as if it has been defined via &lt;code&gt;#def&lt;/code&gt;.</source>
          <target state="translated">在示例中，c2nim将 &lt;code&gt;DECLARE_NO_COPY_CLASS&lt;/code&gt; 的声明视为已通过 &lt;code&gt;#def&lt;/code&gt; 进行了定义。</target>
        </trans-unit>
        <trans-unit id="4931fb24c88d4a3add48a67517bb1d6df1d7d83b" translate="yes" xml:space="preserve">
          <source>In the example the &lt;code&gt;kind&lt;/code&gt; field is called the &lt;span id=&quot;discriminator_1&quot;&gt;discriminator&lt;/span&gt;: For safety its address cannot be taken and assignments to it are restricted: The new value must not lead to a change of the active object branch. For an object branch switch &lt;code&gt;system.reset&lt;/code&gt; has to be used. Also, when the fields of a particular branch are specified during object construction, the correct value for the discriminator must be supplied at compile-time.</source>
          <target state="translated">在示例中， &lt;code&gt;kind&lt;/code&gt; 字段称为&lt;span id=&quot;discriminator_1&quot;&gt;鉴别符&lt;/span&gt;：为安全起见，不能采用其地址，并且对其的分配受到限制：新值一定不能导致活动对象分支的更改。对于对象分支交换机 &lt;code&gt;system.reset&lt;/code&gt; 必须使用。同样，当在对象构造期间指定了特定分支的字段时，必须在编译时提供鉴别符的正确值。</target>
        </trans-unit>
        <trans-unit id="f870d1827ccced8c4dc81fc21ba54ed53d3b7fa4" translate="yes" xml:space="preserve">
          <source>In the example the constructors &lt;code&gt;newLit&lt;/code&gt; and &lt;code&gt;newPlus&lt;/code&gt; are procs because they should use static binding, but &lt;code&gt;eval&lt;/code&gt; is a method because it requires dynamic binding.</source>
          <target state="translated">在示例中，构造函数 &lt;code&gt;newLit&lt;/code&gt; 和 &lt;code&gt;newPlus&lt;/code&gt; 是proc，因为它们应该使用静态绑定，但是 &lt;code&gt;eval&lt;/code&gt; 是一种方法，因为它需要动态绑定。</target>
        </trans-unit>
        <trans-unit id="ffcf0c9fc73817d81ec1bb90e18296fae7f0e1e3" translate="yes" xml:space="preserve">
          <source>In the example the external name of &lt;code&gt;p&lt;/code&gt; is set to &lt;code&gt;prefixp&lt;/code&gt;. Only &lt;code&gt;$1&lt;/code&gt; is available and a literal dollar sign must be written as &lt;code&gt;$$&lt;/code&gt;.</source>
          <target state="translated">在示例中， &lt;code&gt;p&lt;/code&gt; 的外部名称设置为 &lt;code&gt;prefixp&lt;/code&gt; 。只有 &lt;code&gt;$1&lt;/code&gt; 可用，并且文字美元符号必须写为 &lt;code&gt;$$&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="207cdaa4265565920d4f81786bf2ce395e20de1e" translate="yes" xml:space="preserve">
          <source>In the example the generic &lt;code&gt;==&lt;/code&gt; for tuples (as defined in the system module) uses the &lt;code&gt;==&lt;/code&gt; operators of the tuple's components. However, the &lt;code&gt;==&lt;/code&gt; for the &lt;code&gt;Index&lt;/code&gt; type is defined &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;==&lt;/code&gt; for tuples; yet the example compiles as the instantiation takes the currently defined symbols into account too.</source>
          <target state="translated">在示例中，元组的通用 &lt;code&gt;==&lt;/code&gt; （在系统模块中定义）使用元组组件的 &lt;code&gt;==&lt;/code&gt; 运算符。然而， &lt;code&gt;==&lt;/code&gt; 为 &lt;code&gt;Index&lt;/code&gt; 型被定义&lt;em&gt;后&lt;/em&gt;的 &lt;code&gt;==&lt;/code&gt; 元组; 但是该示例在编译时也实例化了当前定义的符号。</target>
        </trans-unit>
        <trans-unit id="e3d09a6862f895be9685356eda8db42c91b15ade" translate="yes" xml:space="preserve">
          <source>In the example the two &lt;code&gt;writeLine&lt;/code&gt; statements are bound to the &lt;code&gt;body&lt;/code&gt; parameter. The &lt;code&gt;withFile&lt;/code&gt; template contains boilerplate code and helps to avoid a common bug: to forget to close the file. Note how the &lt;code&gt;let fn = filename&lt;/code&gt; statement ensures that &lt;code&gt;filename&lt;/code&gt; is evaluated only once.</source>
          <target state="translated">在示例中，两个 &lt;code&gt;writeLine&lt;/code&gt; 语句绑定到 &lt;code&gt;body&lt;/code&gt; 参数。该 &lt;code&gt;withFile&lt;/code&gt; 模板包含样板代码，并有助于避免常见错误：忘记关闭文件。请注意 &lt;code&gt;let fn = filename&lt;/code&gt; 语句如何确保 &lt;code&gt;filename&lt;/code&gt; 仅被评估一次。</target>
        </trans-unit>
        <trans-unit id="28bc7a2ca81c21104a39544430e57f057882ba82" translate="yes" xml:space="preserve">
          <source>In the example, &lt;code&gt;res&lt;/code&gt; and &lt;code&gt;remainder&lt;/code&gt; are &lt;code&gt;var parameters&lt;/code&gt;. Var parameters can be modified by the procedure and the changes are visible to the caller. The argument passed to a var parameter has to be an l-value. Var parameters are implemented as hidden pointers. The above example is equivalent to:</source>
          <target state="translated">在此示例中， &lt;code&gt;res&lt;/code&gt; 和 &lt;code&gt;remainder&lt;/code&gt; 为 &lt;code&gt;var parameters&lt;/code&gt; 。可以通过该过程修改Var参数，并且更改对调用者可见。传递给var参数的参数必须为l值。Var参数实现为隐藏的指针。上面的示例等效于：</target>
        </trans-unit>
        <trans-unit id="6e573c188d155c097bab8635e952a84f3906a513" translate="yes" xml:space="preserve">
          <source>In the example, &lt;code&gt;res&lt;/code&gt; and &lt;code&gt;remainder&lt;/code&gt; are &lt;em&gt;var parameters&lt;/em&gt;. Var parameters can be modified by the procedure and the changes are visible to the caller. Note that the above example would better make use of a tuple as a return value instead of using var parameters.</source>
          <target state="translated">在此示例中， &lt;code&gt;res&lt;/code&gt; 和 &lt;code&gt;remainder&lt;/code&gt; 为&lt;em&gt;var参数&lt;/em&gt;。可以通过该过程修改Var参数，并且更改对调用者可见。请注意，上面的示例将更好地利用元组作为返回值，而不是使用var参数。</target>
        </trans-unit>
        <trans-unit id="e99258ef6102af84c3e85eb151f26d0965f922fd" translate="yes" xml:space="preserve">
          <source>In the example, &lt;code&gt;res&lt;/code&gt; and &lt;code&gt;remainder&lt;/code&gt; are &lt;em&gt;var parameters&lt;/em&gt;. Var parameters can be modified by the procedure and the changes are visible to the caller. The argument passed to a var parameter has to be an l-value. Var parameters are implemented as hidden pointers. The above example is equivalent to:</source>
          <target state="translated">在此示例中， &lt;code&gt;res&lt;/code&gt; 和 &lt;code&gt;remainder&lt;/code&gt; 为&lt;em&gt;var参数&lt;/em&gt;。可以通过该过程修改Var参数，并且更改对调用者可见。传递给var参数的参数必须为l值。Var参数实现为隐藏的指针。上面的示例等效于：</target>
        </trans-unit>
        <trans-unit id="a33b88edb7abee803cf83b9a3f430807a4d54ee2" translate="yes" xml:space="preserve">
          <source>In the example, a new pragma named &lt;code&gt;rtl&lt;/code&gt; is introduced that either imports a symbol from a dynamic library or exports the symbol for dynamic library generation.</source>
          <target state="translated">在该示例中，引入了一个名为 &lt;code&gt;rtl&lt;/code&gt; 的新杂注，它可以从动态库中导入符号，也可以导出该符号以用于动态库生成。</target>
        </trans-unit>
        <trans-unit id="9dbe9fa44d2d3631a7a9bdc36dfbdaa88fb06e85" translate="yes" xml:space="preserve">
          <source>In the example, a tree structure is declared with the &lt;code&gt;Node&lt;/code&gt; type. Note that the type definition is recursive and the GC has to assume that objects of this type may form a cyclic graph. The &lt;code&gt;acyclic&lt;/code&gt; pragma passes the information that this cannot happen to the GC. If the programmer uses the &lt;code&gt;acyclic&lt;/code&gt; pragma for data types that are in reality cyclic, the memory leaks can be the result, but memory safety is preserved.</source>
          <target state="translated">在该示例中，使用 &lt;code&gt;Node&lt;/code&gt; 类型声明树结构。请注意，类型定义是递归的，GC必须假定此类型的对象可以形成循环图。该 &lt;code&gt;acyclic&lt;/code&gt; 编译通过，这不能发生在GC的信息。如果程序员将 &lt;code&gt;acyclic&lt;/code&gt; 编译指示用于实际上是循环的数据类型，则可能导致内存泄漏，但会保留内存安全性。</target>
        </trans-unit>
        <trans-unit id="25bda7fedd4585b4b00c843a5656d4816b805ed0" translate="yes" xml:space="preserve">
          <source>In the example, the &lt;code&gt;kind&lt;/code&gt; field is called the &lt;span id=&quot;discriminator_1&quot;&gt;discriminator&lt;/span&gt;: For safety its address cannot be taken and assignments to it are restricted: The new value must not lead to a change of the active object branch. Also, when the fields of a particular branch are specified during object construction, the corresponding discriminator value must be specified as a constant expression.</source>
          <target state="translated">在该示例中， &lt;code&gt;kind&lt;/code&gt; 字段称为&lt;span id=&quot;discriminator_1&quot;&gt;鉴别符&lt;/span&gt;：为了安全起见，不能采用其地址，并且对其的分配是受限制的：新值一定不能导致活动对象分支的更改。另外，在对象构造期间指定了特定分支的字段时，必须将对应的鉴别符值指定为常量表达式。</target>
        </trans-unit>
        <trans-unit id="643a7cc19ec57243ef20fdb14004efc223149cd0" translate="yes" xml:space="preserve">
          <source>In the example, the case branches &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; are much more common than the other cases. Therefore the generated assembler code should test for these values first so that the CPU's branch predictor has a good chance to succeed (avoiding an expensive CPU pipeline stall). The other cases might be put into a jump table for O(1) overhead but at the cost of a (very likely) pipeline stall.</source>
          <target state="translated">在该示例中，案例分支 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;1&lt;/code&gt; 比其他案例更为常见。因此，生成的汇编代码应首先测试这些值，以便CPU的分支预测器有很大的机会成功（避免昂贵的CPU管道停顿）。其他情况可能会放入O（1）开销的跳转表中，但代价是（很有可能）流水线停顿。</target>
        </trans-unit>
        <trans-unit id="2ce83aae39fe686c17231fc96b454e933bdbf835" translate="yes" xml:space="preserve">
          <source>In the example, the case branches &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; are much more common than the other cases. Therefore the generated assembler code should test for these values first, so that the CPU's branch predictor has a good chance to succeed (avoiding an expensive CPU pipeline stall). The other cases might be put into a jump table for O(1) overhead, but at the cost of a (very likely) pipeline stall.</source>
          <target state="translated">在该示例中，案例分支 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;1&lt;/code&gt; 比其他案例更为常见。因此，生成的汇编代码应首先测试这些值，以便CPU的分支预测器有很大的机会成功（避免昂贵的CPU管道停顿）。其他情况可能会放入O（1）开销的跳转表中，但会（非常可能）导致管道停顿。</target>
        </trans-unit>
        <trans-unit id="fd77d70848a9d919bcdee30486c6f939d747e70f" translate="yes" xml:space="preserve">
          <source>In the example, the external name of &lt;code&gt;p&lt;/code&gt; is set to &lt;code&gt;prefixp&lt;/code&gt;. Only &lt;code&gt;$1&lt;/code&gt; is available and a literal dollar sign must be written as &lt;code&gt;$$&lt;/code&gt;.</source>
          <target state="translated">在示例中，外部名称 &lt;code&gt;p&lt;/code&gt; 设置为 &lt;code&gt;prefixp&lt;/code&gt; 。只有 &lt;code&gt;$1&lt;/code&gt; 可用，并且文字美元符号必须写为 &lt;code&gt;$$&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="19a17743e370d7b0a8e8d723b544806a79a80e01" translate="yes" xml:space="preserve">
          <source>In the example, the generic &lt;code&gt;==&lt;/code&gt; for tuples (as defined in the system module) uses the &lt;code&gt;==&lt;/code&gt; operators of the tuple's components. However, the &lt;code&gt;==&lt;/code&gt; for the &lt;code&gt;Index&lt;/code&gt; type is defined &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;==&lt;/code&gt; for tuples; yet the example compiles as the instantiation takes the currently defined symbols into account too.</source>
          <target state="translated">在示例中，元组的通用 &lt;code&gt;==&lt;/code&gt; （在系统模块中定义）使用元组组件的 &lt;code&gt;==&lt;/code&gt; 运算符。然而， &lt;code&gt;==&lt;/code&gt; 为 &lt;code&gt;Index&lt;/code&gt; 型被定义&lt;em&gt;后&lt;/em&gt;的 &lt;code&gt;==&lt;/code&gt; 元组;但是该示例在编译时也将当前定义的符号也考虑在内。</target>
        </trans-unit>
        <trans-unit id="449891737730fed7e4e9e268f5440bde8cd00a54" translate="yes" xml:space="preserve">
          <source>In the example, the two &lt;code&gt;writeLine&lt;/code&gt; statements are bound to the &lt;code&gt;actions&lt;/code&gt; parameter.</source>
          <target state="translated">在示例中，两个 &lt;code&gt;writeLine&lt;/code&gt; 语句绑定到 &lt;code&gt;actions&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="05f29e9409204f7156a8b49a6edfe66f0ff90993" translate="yes" xml:space="preserve">
          <source>In the examples, var parameters or pointers are used to provide two return values. This can be done in a cleaner way by returning a tuple:</source>
          <target state="translated">在这些例子中,var参数或指针被用来提供两个返回值。这可以通过返回一个元组的方式来实现。</target>
        </trans-unit>
        <trans-unit id="d08188e2018f19c3aaefaadb03503daa50e55984" translate="yes" xml:space="preserve">
          <source>In the first component of the tuple is the name of the current variable stored, in the second its value.</source>
          <target state="translated">在元组的第一部分是当前存储的变量名称,第二部分是其值。</target>
        </trans-unit>
        <trans-unit id="cf1b069c247f4187c31c21ebbe40e040b094bad5" translate="yes" xml:space="preserve">
          <source>In the following sections &lt;em&gt;global&lt;/em&gt; means &lt;em&gt;shared between modules&lt;/em&gt; or &lt;em&gt;property of the whole program&lt;/em&gt;.</source>
          <target state="translated">在以下各节中，&lt;em&gt;全局&lt;/em&gt;表示&lt;em&gt;在整个程序的&lt;/em&gt;&lt;em&gt;模块&lt;/em&gt;或&lt;em&gt;属性&lt;/em&gt;&lt;em&gt;之间共享&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f42fa9bad92a4bca57282426b4b7870e70495fb5" translate="yes" xml:space="preserve">
          <source>In the previous example slices are used to modify a part of a string. The slice's bounds can hold any value supported by their type, but it is the proc using the slice object which defines what values are accepted.</source>
          <target state="translated">在前面的例子中,分片是用来修改字符串的一部分。分片的边界可以容纳其类型所支持的任何值,但使用分片对象的 proc 定义了接受的值。</target>
        </trans-unit>
        <trans-unit id="d9143e669402c29ee0475ca379b33b947a4800d5" translate="yes" xml:space="preserve">
          <source>In the previous sections the &lt;code&gt;NimMain()&lt;/code&gt; function reared its head. Since JavaScript already provides automatic memory management, you can freely pass objects between the two language without problems. In C and derivate languages you need to be careful about what you do and how you share memory. The previous examples only dealt with simple scalar values, but passing a Nim string to C, or reading back a C string in Nim already requires you to be aware of who controls what to avoid crashing.</source>
          <target state="translated">在前面的部分中， &lt;code&gt;NimMain()&lt;/code&gt; 函数抬起了头。由于JavaScript已经提供了自动内存管理，因此您可以在两种语言之间自由地传递对象，而不会出现问题。在C语言和派生语言中，您需要注意自己的工作方式和共享内存的方式。前面的示例仅处理简单的标量值，但是将Nim字符串传递给C或在Nim中读回C字符串已经要求您知道谁控制什么来避免崩溃。</target>
        </trans-unit>
        <trans-unit id="5c9afde1ecde472516002347fee65a65feb81e65" translate="yes" xml:space="preserve">
          <source>In the previous sections, the &lt;code&gt;NimMain()&lt;/code&gt; function reared its head. Since JavaScript already provides automatic memory management, you can freely pass objects between the two languages without problems. In C and derivate languages you need to be careful about what you do and how you share memory. The previous examples only dealt with simple scalar values, but passing a Nim string to C, or reading back a C string in Nim already requires you to be aware of who controls what to avoid crashing.</source>
          <target state="translated">在前面的部分中， &lt;code&gt;NimMain()&lt;/code&gt; 函数抬起了头。由于JavaScript已经提供了自动内存管理功能，因此您可以在两种语言之间自由地传递对象，而不会出现问题。在C语言和派生语言中，您需要注意自己的工作以及共享内存的方式。前面的示例仅处理简单的标量值，但是将Nim字符串传递给C或在Nim中读回C字符串已经要求您知道谁控制什么来避免崩溃。</target>
        </trans-unit>
        <trans-unit id="86065f88bb1b68aca98b8c18ec035e8c48eaa348" translate="yes" xml:space="preserve">
          <source>In the second pass information about the underlying object &quot;graphs&quot; is computed. Let &lt;code&gt;v&lt;/code&gt; be a parameter or a local variable. Let &lt;code&gt;G(v)&lt;/code&gt; be the graph that &lt;code&gt;v&lt;/code&gt; belongs to. A graph is defined by the set of variables that belong to the graph. Initially for all &lt;code&gt;v&lt;/code&gt;: &lt;code&gt;G(v) = {v}&lt;/code&gt;. Every variable can only be part of a single graph.</source>
          <target state="translated">在第二遍中，计算有关基础对象&amp;ldquo;图形&amp;rdquo;的信息。令 &lt;code&gt;v&lt;/code&gt; 为参数或局部变量。令 &lt;code&gt;G(v)&lt;/code&gt; 为 &lt;code&gt;v&lt;/code&gt; 所属的图。图由属于该图的一组变量定义。最初对于所有 &lt;code&gt;v&lt;/code&gt; ： &lt;code&gt;G(v) = {v}&lt;/code&gt; 。每个变量只能是单个图的一部分。</target>
        </trans-unit>
        <trans-unit id="fc60ca1bdf8783470bcdcc4595e252ff2ff1a192" translate="yes" xml:space="preserve">
          <source>In the semantic pass this is called in strategic places to ensure we lift assignment, destructors and moves properly. The later 'injectdestructors' pass depends on it.</source>
          <target state="translated">在语义通证中,在战略性的地方会调用它,以确保我们正确地解除赋值、destructors和移动。后面的'注入destructors'通证就依赖于它。</target>
        </trans-unit>
        <trans-unit id="1678b121aeb51003f37c84a3a8b55dda38dde0ae" translate="yes" xml:space="preserve">
          <source>In the standard library every name of a routine that returns a &lt;code&gt;var&lt;/code&gt; type starts with the prefix &lt;code&gt;m&lt;/code&gt; per convention.</source>
          <target state="translated">在标准库中，根据惯例，返回 &lt;code&gt;var&lt;/code&gt; 类型的例程的每个名称都以前缀 &lt;code&gt;m&lt;/code&gt; 开头。</target>
        </trans-unit>
        <trans-unit id="e4c5a8a9e7db0472a0505e8cc48984362a9686c3" translate="yes" xml:space="preserve">
          <source>In this context, a line is any string separated by a newline combination. A line can be an empty string.</source>
          <target state="translated">在此上下文中,行是指用换行组合分隔的任何字符串。一个行可以是一个空字符串。</target>
        </trans-unit>
        <trans-unit id="3573423166a3714205c4fd8df064a462e9f793fc" translate="yes" xml:space="preserve">
          <source>In this context, a line is any string seperated by a newline combination. A line can be an empty string.</source>
          <target state="translated">在此上下文中,行是由换行组合隔开的任何字符串。一个行可以是一个空字符串。</target>
        </trans-unit>
        <trans-unit id="f0c0be54e609e08ad5ac67f5c3b4c12362798deb" translate="yes" xml:space="preserve">
          <source>In this example &lt;a href=&quot;system#%24&quot;&gt;$&lt;/a&gt; is applied to any argument that is passed to the parameter &lt;code&gt;a&lt;/code&gt;. Note that &lt;a href=&quot;system#%24&quot;&gt;$&lt;/a&gt; applied to strings is a nop.</source>
          <target state="translated">在此示例中，&lt;a href=&quot;system#%24&quot;&gt;$&lt;/a&gt;应用于传递给参数 &lt;code&gt;a&lt;/code&gt; 的任何参数。请注意，应用于字符串的&lt;a href=&quot;system#%24&quot;&gt;$&lt;/a&gt;是nop。</target>
        </trans-unit>
        <trans-unit id="cd49a3b7329e865d00fe88035f180e3a31be031d" translate="yes" xml:space="preserve">
          <source>In this example &lt;code&gt;$&lt;/code&gt; is applied to any argument that is passed to the parameter &lt;code&gt;a&lt;/code&gt;. (Note that &lt;code&gt;$&lt;/code&gt; applied to strings is a nop.)</source>
          <target state="translated">在此示例中， &lt;code&gt;$&lt;/code&gt; 应用于传递给参数 &lt;code&gt;a&lt;/code&gt; 的任何参数。（请注意，应用于字符串的 &lt;code&gt;$&lt;/code&gt; 是nop。）</target>
        </trans-unit>
        <trans-unit id="caf41cefb1ec542e92b76fcef06da5301961d50c" translate="yes" xml:space="preserve">
          <source>In this example both macros are combined seamlessly in order to maximise efficiency and perform different checks.</source>
          <target state="translated">在这个例子中,为了最大限度地提高效率,两个宏都是无缝结合,并执行不同的检查。</target>
        </trans-unit>
        <trans-unit id="fbd15640684b666f33817b98a57e6ad3f6b44475" translate="yes" xml:space="preserve">
          <source>In this example custom pragmas are used to describe how Nim objects are mapped to the schema of the relational database. Custom pragmas can have zero or more arguments. In order to pass multiple arguments use one of template call syntaxes. All arguments are typed and follow standard overload resolution rules for templates. Therefore, it is possible to have default values for arguments, pass by name, varargs, etc.</source>
          <target state="translated">在这个例子中,自定义模式用于描述如何将Nim对象映射到关系数据库的模式。自定义模式可以有零个或多个参数。为了传递多个参数,请使用模板调用语法之一。所有的参数都是类型化的,并且遵循模板的标准重载解析规则。因此,可以为参数设置默认值,通过名称、varargs等方式传递。</target>
        </trans-unit>
        <trans-unit id="d51e14283b9522ab435397923f56710e310a3c5b" translate="yes" xml:space="preserve">
          <source>In this example, custom pragmas are used to describe how Nim objects are mapped to the schema of the relational database. Custom pragmas can have zero or more arguments. In order to pass multiple arguments use one of template call syntaxes. All arguments are typed and follow standard overload resolution rules for templates. Therefore, it is possible to have default values for arguments, pass by name, varargs, etc.</source>
          <target state="translated">在这个例子中,自定义模式用于描述如何将Nim对象映射到关系数据库的模式。自定义模式可以有零个或多个参数。为了传递多个参数,请使用模板调用语法之一。所有的参数都是类型化的,并且遵循模板的标准重载解析规则。因此,可以为参数设置默认值,通过名称、varargs等方式传递。</target>
        </trans-unit>
        <trans-unit id="a6f248d957c4c418906f3928f44e0269d82d3858" translate="yes" xml:space="preserve">
          <source>In this example, the compiler assumes that &lt;code&gt;s.setLen 0&lt;/code&gt; invalidates the borrow operation of &lt;code&gt;v&lt;/code&gt; even though a human being can easily see that it will never do that at runtime.</source>
          <target state="translated">在此示例中，编译器假定 &lt;code&gt;s.setLen 0&lt;/code&gt; 使 &lt;code&gt;v&lt;/code&gt; 的借位操作无效，即使人类可以很容易地看到它永远不会在运行时这样做。</target>
        </trans-unit>
        <trans-unit id="664c924f4e9ba31a6bee85a98d981b31c47a324a" translate="yes" xml:space="preserve">
          <source>In this example, we define a helper proc &lt;code&gt;someSep&lt;/code&gt; that skips some separators which we then use in our scanf pattern to help us in the matching process:</source>
          <target state="translated">在此示例中，我们定义了一个辅助过程proc &lt;code&gt;someSep&lt;/code&gt; ，该过程跳过了一些分隔符，这些分隔符随后在scanf模式中使用以帮助我们进行匹配过程：</target>
        </trans-unit>
        <trans-unit id="2f802f4b0bb2efda510c88e945aad6166591377d" translate="yes" xml:space="preserve">
          <source>Include element &lt;code&gt;y&lt;/code&gt; in the set &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">将元素 &lt;code&gt;y&lt;/code&gt; 包含在集合 &lt;code&gt;x&lt;/code&gt; 中</target>
        </trans-unit>
        <trans-unit id="3dc7c4e3fef8fa3f55dd83a3e9c6604013feffb7" translate="yes" xml:space="preserve">
          <source>Include file that imports all plugins that are active.</source>
          <target state="translated">包含导入所有活动插件的文件。</target>
        </trans-unit>
        <trans-unit id="534570485c11beb7704f319727846b8b4f022eb5" translate="yes" xml:space="preserve">
          <source>Include statement</source>
          <target state="translated">包括声明</target>
        </trans-unit>
        <trans-unit id="81f90017326cffe32d0fe31e95d05aadf2a073ec" translate="yes" xml:space="preserve">
          <source>Includes &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;c&lt;/code&gt; 中包含 &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c0b4096310fac70a46bef3c53e1cfdd624cfc28" translate="yes" xml:space="preserve">
          <source>Includes &lt;code&gt;key&lt;/code&gt; in the set &lt;code&gt;s&lt;/code&gt; and tells if &lt;code&gt;key&lt;/code&gt; was already in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">包括 &lt;code&gt;key&lt;/code&gt; 在设置 &lt;code&gt;s&lt;/code&gt; ，并告知用户，如果 &lt;code&gt;key&lt;/code&gt; 已经在 &lt;code&gt;s&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bbc642ae58ad84741186ba01bd7a4f6256a9bccf" translate="yes" xml:space="preserve">
          <source>Includes &lt;em&gt;key&lt;/em&gt; in the set &lt;em&gt;s&lt;/em&gt; and tells if &lt;em&gt;key&lt;/em&gt; was added to &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">包括&lt;em&gt;键&lt;/em&gt;在设置&lt;em&gt;小号&lt;/em&gt;，如果告诉&lt;em&gt;键&lt;/em&gt;加入&lt;em&gt;小号&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="c1b796fa5f3aa22a8ebc4d8748eb7bf27947a00b" translate="yes" xml:space="preserve">
          <source>Includes all elements from &lt;code&gt;other&lt;/code&gt; into &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;other&lt;/code&gt; 所有元素都包含到 &lt;code&gt;s&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="950d9dee82a260ecc2cb0c186ec7bc7b05f6e58e" translate="yes" xml:space="preserve">
          <source>Includes all elements from &lt;code&gt;other&lt;/code&gt; set into &lt;code&gt;s&lt;/code&gt; (must be declared as &lt;code&gt;var&lt;/code&gt;).</source>
          <target state="translated">将 &lt;code&gt;other&lt;/code&gt; 集合中的所有元素都包含到 &lt;code&gt;s&lt;/code&gt; 中（必须声明为 &lt;code&gt;var&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="64f932923a0eaeac8401c0d332e7ec2bbdcdc32c" translate="yes" xml:space="preserve">
          <source>Includes all elements from &lt;em&gt;other&lt;/em&gt; into &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">将&lt;em&gt;其他&lt;/em&gt;所有元素都包含到&lt;em&gt;s中&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a8760dbb37ab4f1fa60414a208dcf51dedd89884" translate="yes" xml:space="preserve">
          <source>Includes all elements from the OrderedSet &lt;code&gt;other&lt;/code&gt; into HashSet &lt;code&gt;s&lt;/code&gt; (must be declared as &lt;code&gt;var&lt;/code&gt;).</source>
          <target state="translated">包括从OrderedSet所有元素 &lt;code&gt;other&lt;/code&gt; 到HashSet的 &lt;code&gt;s&lt;/code&gt; （必须声明为 &lt;code&gt;var&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="18059d80537606fa3076f8d7fbb9aae9ee4a29e3" translate="yes" xml:space="preserve">
          <source>Includes an element &lt;code&gt;elem&lt;/code&gt; in &lt;code&gt;x&lt;/code&gt;. &lt;code&gt;x&lt;/code&gt; needs to represent a Nim bitset.</source>
          <target state="translated">在 &lt;code&gt;x&lt;/code&gt; 中包含元素 &lt;code&gt;elem&lt;/code&gt; 。 &lt;code&gt;x&lt;/code&gt; 需要代表一个Nim位集。</target>
        </trans-unit>
        <trans-unit id="7cc91c3bbdf6c2b1108bb5085e7f7fb5652bf156" translate="yes" xml:space="preserve">
          <source>Includes an element &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;s&lt;/code&gt; 中包含一个元素 &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a1bf1db1ba56c9fed3c108674752a59dfcd9da4" translate="yes" xml:space="preserve">
          <source>Includes an element &lt;em&gt;key&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">在&lt;em&gt;s中&lt;/em&gt;包含一个元素&lt;em&gt;键&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="baa7f2bf864bc6c51db9dd96ec43925505049852" translate="yes" xml:space="preserve">
          <source>Includes element &lt;code&gt;y&lt;/code&gt; in the set &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">将元素 &lt;code&gt;y&lt;/code&gt; 包含在集合 &lt;code&gt;x&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="c39adf671e0dced5df541685094700a0970fe79a" translate="yes" xml:space="preserve">
          <source>Includes the set &lt;code&gt;y&lt;/code&gt; in the set &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">将集合 &lt;code&gt;y&lt;/code&gt; 包含在集合 &lt;code&gt;x&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="a2bb98605da7acc7e227b0cc2dcd3646758159d5" translate="yes" xml:space="preserve">
          <source>Includes the value 60 to allow for a leap second. Note however that the &lt;code&gt;second&lt;/code&gt; of a &lt;code&gt;DateTime&lt;/code&gt; will never be a leap second.</source>
          <target state="translated">包括值60以允许a秒。但请注意， &lt;code&gt;second&lt;/code&gt; 一个的 &lt;code&gt;DateTime&lt;/code&gt; 永远不会成为一个闰秒。</target>
        </trans-unit>
        <trans-unit id="122d72fb5f4934f490f955173c3eef92832e3bcb" translate="yes" xml:space="preserve">
          <source>IncompleteStruct pragma</source>
          <target state="translated">IncompleteStruct pragma</target>
        </trans-unit>
        <trans-unit id="b900287c024610129112be852c5b48a82df21bff" translate="yes" xml:space="preserve">
          <source>Increases &lt;code&gt;a&lt;/code&gt; by &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">增加 &lt;code&gt;a&lt;/code&gt; 由 &lt;code&gt;b&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f086d14d7fef8dbca8e2fe7a021ad573b166cafb" translate="yes" xml:space="preserve">
          <source>Increment the ordinal</source>
          <target state="translated">递增序数</target>
        </trans-unit>
        <trans-unit id="ae54d14bda94db940864cd80dc5d34aba25da3cb" translate="yes" xml:space="preserve">
          <source>IncrementalCtx:</source>
          <target state="translated">IncrementalCtx:</target>
        </trans-unit>
        <trans-unit id="30073b0d62781ad5fb8c9dbb42912c95f76e61b2" translate="yes" xml:space="preserve">
          <source>Increments &lt;code&gt;c[key]&lt;/code&gt; by &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">增量 &lt;code&gt;c[key]&lt;/code&gt; 由 &lt;code&gt;val&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d84f99bcd176c5c9c789a01e619dc3a37c0a353" translate="yes" xml:space="preserve">
          <source>Increments &lt;code&gt;t[key]&lt;/code&gt; by &lt;code&gt;val&lt;/code&gt; (default: 1).</source>
          <target state="translated">增量 &lt;code&gt;t[key]&lt;/code&gt; 由 &lt;code&gt;val&lt;/code&gt; （默认值：1）。</target>
        </trans-unit>
        <trans-unit id="1de2c6e5f8005f6da387b96f860d3929350eb0f8" translate="yes" xml:space="preserve">
          <source>Increments an integer.</source>
          <target state="translated">递增一个整数。</target>
        </trans-unit>
        <trans-unit id="e458e98e024804e2195312b10a3a11a67d6582fd" translate="yes" xml:space="preserve">
          <source>Increments an ordinal</source>
          <target state="translated">递增一个序数</target>
        </trans-unit>
        <trans-unit id="3579152b0f13082bc2ed763d516b6eeee04f5e41" translate="yes" xml:space="preserve">
          <source>Increments in place a floating point number</source>
          <target state="translated">以浮点数递增。</target>
        </trans-unit>
        <trans-unit id="cb26353ce6e9409a4edb225d9573bd77b8a7bc16" translate="yes" xml:space="preserve">
          <source>Increments in place a floating point number.</source>
          <target state="translated">以浮点数递增。</target>
        </trans-unit>
        <trans-unit id="4e0f25820ddbbe3a0ee8d57570d101f444e069f3" translate="yes" xml:space="preserve">
          <source>Increments the ordinal &lt;code&gt;x&lt;/code&gt; by &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">增量序 &lt;code&gt;x&lt;/code&gt; 的 &lt;code&gt;y&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3917b825256b71ec29e2860d96b9f3c57a46e2bf" translate="yes" xml:space="preserve">
          <source>Indent with two spaces.</source>
          <target state="translated">缩进两个空格。</target>
        </trans-unit>
        <trans-unit id="c9ec7fcf0ce1c005cbdd2ae9ab39e1773e6bf368" translate="yes" xml:space="preserve">
          <source>Indentation</source>
          <target state="translated">Indentation</target>
        </trans-unit>
        <trans-unit id="3e69016e62b22706518f7fd44403f71f6f86a464" translate="yes" xml:space="preserve">
          <source>Indentation can be used after the &lt;code&gt;const&lt;/code&gt; keyword to list a whole section of constants:</source>
          <target state="translated">可以在 &lt;code&gt;const&lt;/code&gt; 关键字之后使用缩进来列出整个常量部分：</target>
        </trans-unit>
        <trans-unit id="6f45c825c4626280194b953ea0dec3e48ce7fccc" translate="yes" xml:space="preserve">
          <source>Indentation can be used after the &lt;code&gt;var&lt;/code&gt; keyword to list a whole section of variables:</source>
          <target state="translated">可以在 &lt;code&gt;var&lt;/code&gt; 关键字之后使用缩进来列出变量的整个部分：</target>
        </trans-unit>
        <trans-unit id="520792c3a2538ee8e56f0b4f71803ca37955634d" translate="yes" xml:space="preserve">
          <source>Indents each line in &lt;code&gt;s&lt;/code&gt; by &lt;code&gt;count&lt;/code&gt; amount of &lt;code&gt;padding&lt;/code&gt;.</source>
          <target state="translated">缩进在每行 &lt;code&gt;s&lt;/code&gt; 通过 &lt;code&gt;count&lt;/code&gt; 的量 &lt;code&gt;padding&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c2df9b932637fe9d32a0f16da1c11873398f873d" translate="yes" xml:space="preserve">
          <source>Index</source>
          <target state="translated">Index</target>
        </trans-unit>
        <trans-unit id="f2171e3002af9c53c4ea2469894d127d907cca3e" translate="yes" xml:space="preserve">
          <source>Index (idx) file format</source>
          <target state="translated">索引(idx)文件格式</target>
        </trans-unit>
        <trans-unit id="7086b5dce7145d779101ccd8901d9bbb698cae3d" translate="yes" xml:space="preserve">
          <source>Index files are line oriented and tab separated (newline and tab characters have to be escaped). Each line represents a record with at least two fields, but can have up to four (additional columns are ignored). The content of these columns is:</source>
          <target state="translated">索引文件是面向行和制表符分开的(换行和制表符必须被转义)。每一行代表一条记录,至少有两个字段,但最多可以有四个字段(额外的列会被忽略)。这些列的内容是:</target>
        </trans-unit>
        <trans-unit id="0c5d6204871842ba1c9f7cd8b0f7f94f787509f2" translate="yes" xml:space="preserve">
          <source>Index switch</source>
          <target state="translated">索引开关</target>
        </trans-unit>
        <trans-unit id="7d2d080b9c23631882a620ee4cef31b37b3e5e98" translate="yes" xml:space="preserve">
          <source>Index the collection with the proc provided.</source>
          <target state="translated">用所提供的proc对集合进行索引。</target>
        </trans-unit>
        <trans-unit id="9b0343473193cfc7e99b7802a4d65dded5509d30" translate="yes" xml:space="preserve">
          <source>Indicates that a leading space should be used on positive numbers.</source>
          <target state="translated">表示在正数上应使用前导空格。</target>
        </trans-unit>
        <trans-unit id="2c549fa4a0ba269a959c6226777ab5a0b50f1df5" translate="yes" xml:space="preserve">
          <source>Indicates that a sign should be used for both positive as well as negative numbers.</source>
          <target state="translated">表示正数和负数都要用符号。</target>
        </trans-unit>
        <trans-unit id="a0c8cf09bdbe9d14558c3f28be789e07866609de" translate="yes" xml:space="preserve">
          <source>Indicates that a sign should be used only for negative numbers (this is the default behavior).</source>
          <target state="translated">表示符号只能用于负数(这是默认行为)。</target>
        </trans-unit>
        <trans-unit id="b4450615d8ce467d37556973b1b5a5091600c498" translate="yes" xml:space="preserve">
          <source>Individual loggers have a &lt;code&gt;levelThreshold&lt;/code&gt; field that filters out any messages with a level lower than the threshold. There is also a global filter that applies to all log messages, and it can be changed using the &lt;a href=&quot;#setLogFilter,Level&quot;&gt;setLogFilter proc&lt;/a&gt;.</source>
          <target state="translated">各个记录器都有一个 &lt;code&gt;levelThreshold&lt;/code&gt; 字段，该字段过滤掉任何级别低于阈值的消息。还有一个全局过滤器适用于所有日志消息，可以使用&lt;a href=&quot;#setLogFilter,Level&quot;&gt;setLogFilter proc&lt;/a&gt;对其进行更改。</target>
        </trans-unit>
        <trans-unit id="02d4b08a1673b232bf3018ee2f9d0a8e9fa2025c" translate="yes" xml:space="preserve">
          <source>Inexact: operation produces a result that cannot be represented with infinite precision, for example, 2.0 / 3.0, log(1.1) and 0.1 in input.</source>
          <target state="translated">不精确:操作产生的结果不能用无限精度表示,例如,2.0/3.0,log(1.1)和0.1的输入。</target>
        </trans-unit>
        <trans-unit id="63d5b176942ca6a8ddb9add205f21b0d98945888" translate="yes" xml:space="preserve">
          <source>Infix operator call</source>
          <target state="translated">Infix操作员呼叫</target>
        </trans-unit>
        <trans-unit id="05b2f048278e50727268e29b1c4d85eb17ee93d4" translate="yes" xml:space="preserve">
          <source>Info messages are typically generated during the normal operation of an application and are of no particular importance. It can be useful to aggregate these messages for later analysis.</source>
          <target state="translated">信息消息通常是在应用程序的正常运行过程中产生的,并不特别重要。将这些信息汇总起来供以后分析是很有用的。</target>
        </trans-unit>
        <trans-unit id="d42473cc429103c815ee41c99ce227e6800bc064" translate="yes" xml:space="preserve">
          <source>Informally:</source>
          <target state="translated">Informally:</target>
        </trans-unit>
        <trans-unit id="eb712e4e263d88043891e59382c4f31c8c4157de" translate="yes" xml:space="preserve">
          <source>Inheritance is done with the &lt;code&gt;object of&lt;/code&gt; syntax. Multiple inheritance is currently not supported. If an object type has no suitable ancestor, &lt;code&gt;RootObj&lt;/code&gt; can be used as its ancestor, but this is only a convention. Objects that have no ancestor are implicitly &lt;code&gt;final&lt;/code&gt;. You can use the &lt;code&gt;inheritable&lt;/code&gt; pragma to introduce new object roots apart from &lt;code&gt;system.RootObj&lt;/code&gt;. (This is used in the GTK wrapper for instance.)</source>
          <target state="translated">继承是通过语法 &lt;code&gt;object of&lt;/code&gt; 完成的。当前不支持多重继承。如果对象类型没有合适的祖先， &lt;code&gt;RootObj&lt;/code&gt; 可以将RootObj用作其祖先，但这只是一个约定。没有祖先的对象隐式为 &lt;code&gt;final&lt;/code&gt; 。除了 &lt;code&gt;system.RootObj&lt;/code&gt; 之外，还可以使用 &lt;code&gt;inheritable&lt;/code&gt; 编译指示引入新的对象根。（例如，在GTK包装器中使用。）</target>
        </trans-unit>
        <trans-unit id="862fae5c64569c192f0058ccd3bbb5d19a019f65" translate="yes" xml:space="preserve">
          <source>Inhibit dynamic method resolution via procCall</source>
          <target state="translated">通过procCall抑制动态方法解析</target>
        </trans-unit>
        <trans-unit id="0c5cca889a407cf644e8302dd1aa6f401bc2f924" translate="yes" xml:space="preserve">
          <source>IniExt:</source>
          <target state="translated">IniExt:</target>
        </trans-unit>
        <trans-unit id="5c4f1d9bb4b4c00271c428db76888f539a5526ec" translate="yes" xml:space="preserve">
          <source>Init procs must not be &quot;forgotten&quot; to be called.</source>
          <target state="translated">Init procs不能被 &quot;忘记 &quot;调用。</target>
        </trans-unit>
        <trans-unit id="e0133811d52fc5e0ce7548998427d86c5ecbabc3" translate="yes" xml:space="preserve">
          <source>Initialises an AsyncSocket object. If a socket cannot be initialised EOS is raised.</source>
          <target state="translated">初始化一个AsyncSocket对象。如果一个套接字不能被初始化,EOS会被引发。</target>
        </trans-unit>
        <trans-unit id="0e8796999c73166ae179e51a98cc0d932f6227e2" translate="yes" xml:space="preserve">
          <source>Initialize SSL using OPENSSL_init_ssl for OpenSSL &amp;gt;= 1.1.0 otherwise SSL_library_init</source>
          <target state="translated">使用OpenSSL&amp;gt; = 1.1.0的OPENSSL_init_ssl初始化SSL，否则使用SSL_library_init</target>
        </trans-unit>
        <trans-unit id="d49e0da069898af776915456532c7a6fc5a8c016" translate="yes" xml:space="preserve">
          <source>Initializes a &lt;code&gt;MD5Context&lt;/code&gt;.</source>
          <target state="translated">初始化 &lt;code&gt;MD5Context&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="881e0294c3d407bde48feb8c4affbeeef0f33574" translate="yes" xml:space="preserve">
          <source>Initializes a &lt;code&gt;RstGenerator&lt;/code&gt;.</source>
          <target state="translated">初始化 &lt;code&gt;RstGenerator&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f575d4a043b2d99856d0b2805228e53ea26fcec" translate="yes" xml:space="preserve">
          <source>Initializes a URI with &lt;code&gt;scheme&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;hostname&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;anchor&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;scheme&lt;/code&gt; ， &lt;code&gt;username&lt;/code&gt; ， &lt;code&gt;password&lt;/code&gt; ， &lt;code&gt;hostname&lt;/code&gt; ， &lt;code&gt;port&lt;/code&gt; ， &lt;code&gt;path&lt;/code&gt; ， &lt;code&gt;query&lt;/code&gt; 和 &lt;code&gt;anchor&lt;/code&gt; 初始化URI 。</target>
        </trans-unit>
        <trans-unit id="a17cc26d8da8cbe959295951bb56fdabc70f6237" translate="yes" xml:space="preserve">
          <source>Initializes a URI with &lt;code&gt;scheme&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;hostname&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt;, &lt;code&gt;anchor&lt;/code&gt; and &lt;code&gt;isIpv6&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;scheme&lt;/code&gt; ， &lt;code&gt;username&lt;/code&gt; ， &lt;code&gt;password&lt;/code&gt; ， &lt;code&gt;hostname&lt;/code&gt; ， &lt;code&gt;port&lt;/code&gt; ， &lt;code&gt;path&lt;/code&gt; ， &lt;code&gt;query&lt;/code&gt; ， &lt;code&gt;anchor&lt;/code&gt; 和 &lt;code&gt;isIpv6&lt;/code&gt; 初始化URI 。</target>
        </trans-unit>
        <trans-unit id="40151f2c3d201480764280228665dd4a245cb8ae" translate="yes" xml:space="preserve">
          <source>Initializes a URI.</source>
          <target state="translated">初始化一个URI。</target>
        </trans-unit>
        <trans-unit id="405224e088cd409637c05da8068dcfb0b7324f95" translate="yes" xml:space="preserve">
          <source>Initializes a hash set.</source>
          <target state="translated">初始化一个哈希集。</target>
        </trans-unit>
        <trans-unit id="4b743382b1c978b8612236430f8cb0345cf1b494" translate="yes" xml:space="preserve">
          <source>Initializes a new &lt;a href=&quot;#Rand&quot;&gt;Rand&lt;/a&gt; state using the given seed.</source>
          <target state="translated">使用给定的种子初始化新的&lt;a href=&quot;#Rand&quot;&gt;Rand&lt;/a&gt;状态。</target>
        </trans-unit>
        <trans-unit id="e84a4c040ee7b5e4ea1966bc93e94a695c273213" translate="yes" xml:space="preserve">
          <source>Initializes an ordered hash set.</source>
          <target state="translated">初始化一个有序的哈希集。</target>
        </trans-unit>
        <trans-unit id="4d06419a4df7ca2600b2a7c6788a96d45e54a25d" translate="yes" xml:space="preserve">
          <source>Initializes the command line parser.</source>
          <target state="translated">初始化命令行解析器。</target>
        </trans-unit>
        <trans-unit id="580bcf0259f858c591c1bdfb9fe2dbcc9bf29a6d" translate="yes" xml:space="preserve">
          <source>Initializes the default random number generator with a specific seed.</source>
          <target state="translated">用一个特定的种子初始化默认的随机数发生器。</target>
        </trans-unit>
        <trans-unit id="761f6faceaafcbd78029cf099931070de60247f8" translate="yes" xml:space="preserve">
          <source>Initializes the default random number generator with a value based on the current time.</source>
          <target state="translated">初始化默认的随机数发生器,其值基于当前时间。</target>
        </trans-unit>
        <trans-unit id="bee58e90d6e31827b75a3ffcd8b2dde11686ac85" translate="yes" xml:space="preserve">
          <source>Initializes the default random number generator with the given seed.</source>
          <target state="translated">用给定的种子初始化默认的随机数发生器。</target>
        </trans-unit>
        <trans-unit id="dacee3e957999d4c882a7ef1c7b8e6793e30746e" translate="yes" xml:space="preserve">
          <source>Initializes the given condition variable.</source>
          <target state="translated">初始化给定的条件变量。</target>
        </trans-unit>
        <trans-unit id="0f32d11dbd1ff544f08160af91e946d34a75cd48" translate="yes" xml:space="preserve">
          <source>Initializes the given lock.</source>
          <target state="translated">初始化给定的锁。</target>
        </trans-unit>
        <trans-unit id="cc111a9c008069088c4cdf320f7b2e7926c4495b" translate="yes" xml:space="preserve">
          <source>Initializes the parser with an input stream. &lt;code&gt;Filename&lt;/code&gt; is only used for nice error messages. The parser's behaviour can be controlled by the diverse optional parameters:</source>
          <target state="translated">用输入流初始化解析器。 &lt;code&gt;Filename&lt;/code&gt; 仅用于显示错误消息。解析器的行为可以由各种可选参数控制：</target>
        </trans-unit>
        <trans-unit id="6ede6304ec6e7bf4a6a2e3d80c6b1eeb81cc73f8" translate="yes" xml:space="preserve">
          <source>Initializes the random number generator with a &quot;random&quot; number, i.e. a tickcount. Note: Does not work for NimScript.</source>
          <target state="translated">用一个 &quot;随机 &quot;数初始化随机数生成器,即 tickcount。注意:不适用于NimScript。</target>
        </trans-unit>
        <trans-unit id="7656a50f2e0ac5db2e06ce5648c4594fc345f831" translate="yes" xml:space="preserve">
          <source>InjectStmt pragma</source>
          <target state="translated">InjectStmt pragma</target>
        </trans-unit>
        <trans-unit id="010422bde6d8ffc4583d3c7153dbd2e08b3f0abb" translate="yes" xml:space="preserve">
          <source>Injects destructor calls into Nim code as well as an optimizer that optimizes copies to moves. This is implemented as an AST to AST transformation so that every backend benefits from it.See doc/destructors.rst for a spec of the implemented rewrite rules</source>
          <target state="translated">在Nim代码中注入destructor调用,以及优化拷贝到移动的优化器。这是以AST到AST转换的方式实现的,因此每个后端都能从中受益。请参见doc/destructors.rst,了解已实现的重写规则。</target>
        </trans-unit>
        <trans-unit id="058c8664dcced6f11d423c0a1ff1cbd60786d25f" translate="yes" xml:space="preserve">
          <source>Inline iterators are second class citizens; They can be passed as parameters only to other inlining code facilities like templates, macros, and other inline iterators.</source>
          <target state="translated">内联迭代器是二等公民;它们只能作为参数传递给模板、宏和其他内联迭代器等其他内联代码设施。</target>
        </trans-unit>
        <trans-unit id="1ee7de66fcff05572c93c829536da75cc7683b42" translate="yes" xml:space="preserve">
          <source>Input flags.</source>
          <target state="translated">输入标志。</target>
        </trans-unit>
        <trans-unit id="cdebe16ef167d59bd3f584afbff561d99000e527" translate="yes" xml:space="preserve">
          <source>Insert an item at a specific position</source>
          <target state="translated">在特定位置插入一个项目</target>
        </trans-unit>
        <trans-unit id="c8e7a843757f5c65a19602705725407af81d0b8c" translate="yes" xml:space="preserve">
          <source>Insert node &lt;code&gt;b&lt;/code&gt; into node &lt;code&gt;a&lt;/code&gt; at &lt;code&gt;pos&lt;/code&gt;.</source>
          <target state="translated">将节点 &lt;code&gt;b&lt;/code&gt; 插入 &lt;code&gt;pos&lt;/code&gt; 的节点 &lt;code&gt;a&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="f9e1ac91d7701d8e495d0f11ba5f1b00fdf6ed7f" translate="yes" xml:space="preserve">
          <source>Insert node B into A at pos</source>
          <target state="translated">将节点B插入A的位置</target>
        </trans-unit>
        <trans-unit id="2db3b3fd15b7bb4b34dad30c689dad9d16b24896" translate="yes" xml:space="preserve">
          <source>Inserting data</source>
          <target state="translated">插入数据</target>
        </trans-unit>
        <trans-unit id="db635bc37b2480d99f37c4d48dcb356115926122" translate="yes" xml:space="preserve">
          <source>Inserts &lt;code&gt;item&lt;/code&gt; into &lt;code&gt;x&lt;/code&gt; at position &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;item&lt;/code&gt; 插入到位置 &lt;code&gt;i&lt;/code&gt; 处的 &lt;code&gt;x&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="d566805bbc4b99025d37b9ff20615e3dd8fada71" translate="yes" xml:space="preserve">
          <source>Inserts &lt;code&gt;key&lt;/code&gt; with value &lt;code&gt;val&lt;/code&gt; into &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">插入 &lt;code&gt;key&lt;/code&gt; 与值 &lt;code&gt;val&lt;/code&gt; 到 &lt;code&gt;c&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3177be56509e1d6033678a8704a8a4b86722c344" translate="yes" xml:space="preserve">
          <source>Inserts a &lt;code&gt;(key, value)&lt;/code&gt; pair into &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;(key, value)&lt;/code&gt; 对插入 &lt;code&gt;t&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="59d6f4f966ce59d1f90bfd57eeaa096530103fe1" translate="yes" xml:space="preserve">
          <source>Inserts items from &lt;code&gt;src&lt;/code&gt; into &lt;code&gt;dest&lt;/code&gt; at position &lt;code&gt;pos&lt;/code&gt;. This modifies &lt;code&gt;dest&lt;/code&gt; itself, it does not return a copy.</source>
          <target state="translated">将 &lt;code&gt;src&lt;/code&gt; 中的项目插入 &lt;code&gt;dest&lt;/code&gt; 位置 &lt;code&gt;pos&lt;/code&gt; 处。这将修改 &lt;code&gt;dest&lt;/code&gt; 本身，而不返回副本。</target>
        </trans-unit>
        <trans-unit id="dd923f823166b6196d06cbdd3db676002c784b17" translate="yes" xml:space="preserve">
          <source>Inserts items from &lt;em&gt;src&lt;/em&gt; into &lt;em&gt;dest&lt;/em&gt; at position &lt;em&gt;pos&lt;/em&gt;. This modifies &lt;em&gt;dest&lt;/em&gt; itself, it does not return a copy.</source>
          <target state="translated">将&lt;em&gt;src中的&lt;/em&gt;项目插入&lt;em&gt;dest&lt;/em&gt;位置&lt;em&gt;pos处&lt;/em&gt;。这将修改&lt;em&gt;dest&lt;/em&gt;本身，而不返回副本。</target>
        </trans-unit>
        <trans-unit id="912e1e977606972eddcd0f38962b41b38ce160ed" translate="yes" xml:space="preserve">
          <source>Inserts the child &lt;code&gt;son&lt;/code&gt; to a given position in &lt;code&gt;father&lt;/code&gt;.</source>
          <target state="translated">将子 &lt;code&gt;son&lt;/code&gt; 插入 &lt;code&gt;father&lt;/code&gt; 的既定职位。</target>
        </trans-unit>
        <trans-unit id="04298198949aebc6d2892e5fc955264070b8ebb9" translate="yes" xml:space="preserve">
          <source>Inserts the node &lt;code&gt;newChild&lt;/code&gt; before the existing child node &lt;code&gt;refChild&lt;/code&gt;. If &lt;code&gt;refChild&lt;/code&gt; is nil, insert &lt;code&gt;newChild&lt;/code&gt; at the end of the list of children.</source>
          <target state="translated">插入节点 &lt;code&gt;newChild&lt;/code&gt; 对象现有的子节点之前 &lt;code&gt;refChild&lt;/code&gt; 。如果 &lt;code&gt;refChild&lt;/code&gt; 是零，插入 &lt;code&gt;newChild&lt;/code&gt; 对象在孩子的列表的末尾。</target>
        </trans-unit>
        <trans-unit id="0516b46b412793c8fb34cd47bc606c99d76f0ff2" translate="yes" xml:space="preserve">
          <source>Inserts the separator &lt;code&gt;sep&lt;/code&gt; after &lt;code&gt;digits&lt;/code&gt; characters (default: 3) from right to left.</source>
          <target state="translated">从右至左在 &lt;code&gt;digits&lt;/code&gt; 字符（默认值：3）后插入分隔符 &lt;code&gt;sep&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="786ea42ccb1f6bb0efafd8f2b61725cd22b7b01c" translate="yes" xml:space="preserve">
          <source>Inserts the separator &lt;em&gt;sep&lt;/em&gt; after &lt;em&gt;digits&lt;/em&gt; digits from right to left.</source>
          <target state="translated">在从右到左的&lt;em&gt;数字&lt;/em&gt;位后面插入分隔符&lt;em&gt;sep&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="873af15bd68c477178748ca072cfddf8b2be43af" translate="yes" xml:space="preserve">
          <source>Inside a character class, or if the decimal number is greater than 9 and there have not been that many capturing subpatterns, PCRE re-reads up to three octal digits following the backslash, and generates a single byte from the least significant 8 bits of the value. Any subsequent digits stand for themselves. For example:</source>
          <target state="translated">在一个字符类内,或者如果十进制数大于9,并且没有那么多的捕获子模式,PCRE会在反斜杠后重新读取最多3个八进制数,并从值的最小有意义的8位生成一个字节。任何后续的数字都是自成一格的。例如</target>
        </trans-unit>
        <trans-unit id="ca77b6367a8fe2f8a03241e2199780113a61f688" translate="yes" xml:space="preserve">
          <source>Inside asynchronous procedures &lt;code&gt;await&lt;/code&gt; can be used to call any procedures which return a &lt;code&gt;Future&lt;/code&gt;; this includes asynchronous procedures. When a procedure is &quot;awaited&quot;, the asynchronous procedure it is awaited in will suspend its execution until the awaited procedure's Future completes. At which point the asynchronous procedure will resume its execution. During the period when an asynchronous procedure is suspended other asynchronous procedures will be run by the dispatcher.</source>
          <target state="translated">内部异步过程 &lt;code&gt;await&lt;/code&gt; 可以用来调用任何返回 &lt;code&gt;Future&lt;/code&gt; 的过程；这包括异步过程。当&amp;ldquo;等待&amp;rdquo;过程时，等待它的异步过程将暂停其执行，直到等待过程的Future完成。此时异步过程将继续执行。在异步过程暂停期间，调度程序将运行其他异步过程。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="dab2e32e580a82a5f4a666220278539f752ad943" translate="yes" xml:space="preserve">
          <source>InstantiationInfo:</source>
          <target state="translated">InstantiationInfo:</target>
        </trans-unit>
        <trans-unit id="58445a9dc8fa874d6c0999c2be877243221f8374" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;#@ @#&lt;/code&gt; Nim's pragma brackets &lt;code&gt;{. .}&lt;/code&gt; can also be used, but not nested since the &lt;code&gt;.}&lt;/code&gt; doesn't have to be on a line of its own:</source>
          <target state="translated">而不是 &lt;code&gt;#@ @#&lt;/code&gt; Nim的实用括号 &lt;code&gt;{. .}&lt;/code&gt; 也可以使用。}，但不能嵌套使用，因为 &lt;code&gt;.}&lt;/code&gt; 不必自己一行：</target>
        </trans-unit>
        <trans-unit id="ed085b50e598c9e9c3c998d8d02d824b13f51bfb" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;self&lt;/code&gt; any other identifier can be used too, but &lt;code&gt;{.this: self.}&lt;/code&gt; will become the default directive for the whole language eventually.</source>
          <target state="translated">除了 &lt;code&gt;self&lt;/code&gt; 以外，还可以使用其他任何标识符，但是 &lt;code&gt;{.this: self.}&lt;/code&gt; 最终将成为整个语言的默认指令。</target>
        </trans-unit>
        <trans-unit id="97edad635aadc93c5522c720f6f1a9a8a3a47123" translate="yes" xml:space="preserve">
          <source>Instead of a &lt;code&gt;try finally&lt;/code&gt; statement a &lt;code&gt;defer&lt;/code&gt; statement can be used, which avoids lexical nesting and offers more flexibility in terms of scoping as shown below.</source>
          <target state="translated">取而代之的 &lt;code&gt;try finally&lt;/code&gt; 语句 &lt;code&gt;defer&lt;/code&gt; 可以使用语句，避免了范围界定方面词法嵌套和提供更高的灵活性，如下图所示。</target>
        </trans-unit>
        <trans-unit id="5150cf2c23ac3058436fce11d312cb4ab7dd9726" translate="yes" xml:space="preserve">
          <source>Instead of a &lt;code&gt;try finally&lt;/code&gt; statement a &lt;code&gt;defer&lt;/code&gt; statement can be used.</source>
          <target state="translated">代替的 &lt;code&gt;try finally&lt;/code&gt; 语句中的 &lt;code&gt;defer&lt;/code&gt; 可以使用的语句。</target>
        </trans-unit>
        <trans-unit id="83385d6b178b8e73007de79314cf2093ccf1e0d7" translate="yes" xml:space="preserve">
          <source>Instead of changing the active object branch, replace the old object in memory with a new one completely:</source>
          <target state="translated">不改变活动对象分支,而是用一个新的对象完全取代内存中的旧对象。</target>
        </trans-unit>
        <trans-unit id="03665382599317cc60a7efd5af43d25b36a35438" translate="yes" xml:space="preserve">
          <source>Instead of depending on the generation of the individual &lt;code&gt;.c&lt;/code&gt; files you can also ask the Nim compiler to generate a statically linked library:</source>
          <target state="translated">除了依赖于各个 &lt;code&gt;.c&lt;/code&gt; 文件的生成之外，您还可以要求Nim编译器生成一个静态链接的库：</target>
        </trans-unit>
        <trans-unit id="ff60c5d0007a18ea981f49f0360da2385ccc4565" translate="yes" xml:space="preserve">
          <source>Instead of keeping 2 versions of &lt;code&gt;define foo&lt;/code&gt; around, one &lt;code&gt;#def foo&lt;/code&gt; for c2nim and one ordinary &lt;code&gt;#define foo&lt;/code&gt; for C/C++, it is often more convenient to tell c2nim that &lt;code&gt;foo&lt;/code&gt; is to be interpreted as a &lt;code&gt;#def&lt;/code&gt;. This is what the &lt;code&gt;#pp&lt;/code&gt; directive accomplishes:</source>
          <target state="translated">与其保留两个版本的 &lt;code&gt;define foo&lt;/code&gt; ，而不是一个 &lt;code&gt;#def foo&lt;/code&gt; 和一个用于C / C ++的普通的 &lt;code&gt;#define foo&lt;/code&gt; ，通常更方便的是告诉c2nim &lt;code&gt;foo&lt;/code&gt; 被解释为 &lt;code&gt;#def&lt;/code&gt; 。这是 &lt;code&gt;#pp&lt;/code&gt; 指令完成的工作：</target>
        </trans-unit>
        <trans-unit id="c7301e8180a639fec5b0ce81d171622b155df52d" translate="yes" xml:space="preserve">
          <source>Instead of removing &lt;code&gt;EXTERN()&lt;/code&gt; from the input source file (which cannot be done reliably even with a regular expression!), one can tell c2nim that &lt;code&gt;EXTERN&lt;/code&gt; is a macro that should be expanded by c2nim too:</source>
          <target state="translated">不必从输入源文件中删除 &lt;code&gt;EXTERN()&lt;/code&gt; （即使使用正则表达式也无法可靠地完成！），您可以告诉c2nim &lt;code&gt;EXTERN&lt;/code&gt; 是也应由c2nim扩展的宏：</target>
        </trans-unit>
        <trans-unit id="a539176fcf1680650320e02900c39ec47d583b56" translate="yes" xml:space="preserve">
          <source>Instead of using &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;, consider using the &lt;code&gt;collect&lt;/code&gt; macro from the &lt;code&gt;sugar&lt;/code&gt; module.</source>
          <target state="translated">除了使用 &lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;filter&lt;/code&gt; 之外，还可以考虑使用 &lt;code&gt;sugar&lt;/code&gt; 模块中的 &lt;code&gt;collect&lt;/code&gt; 宏。</target>
        </trans-unit>
        <trans-unit id="ce5f8d550289e63d7819c4b59f86d7e06014419a" translate="yes" xml:space="preserve">
          <source>Instead of using &lt;code&gt;mapIt&lt;/code&gt; and &lt;code&gt;filterIt&lt;/code&gt;, consider using the &lt;code&gt;collect&lt;/code&gt; macro from the &lt;code&gt;sugar&lt;/code&gt; module.</source>
          <target state="translated">与其使用 &lt;code&gt;mapIt&lt;/code&gt; 和 &lt;code&gt;filterIt&lt;/code&gt; ，不如考虑使用 &lt;code&gt;sugar&lt;/code&gt; 模块中的 &lt;code&gt;collect&lt;/code&gt; 宏。</target>
        </trans-unit>
        <trans-unit id="c042f3d9b71b32db250543be269d410c99d13527" translate="yes" xml:space="preserve">
          <source>Instead of:</source>
          <target state="translated">而不是:</target>
        </trans-unit>
        <trans-unit id="84737859654b67b2b9a33e5c2db83b51683c5344" translate="yes" xml:space="preserve">
          <source>Instead this code has to be used:</source>
          <target state="translated">而是要用这个代码。</target>
        </trans-unit>
        <trans-unit id="5ef6a32cea77e75a956950556c5ac8e265959f05" translate="yes" xml:space="preserve">
          <source>Instr:</source>
          <target state="translated">Instr:</target>
        </trans-unit>
        <trans-unit id="2dc4c8a3feb950a94447eba251c5e84430a628a3" translate="yes" xml:space="preserve">
          <source>InstrKind.def</source>
          <target state="translated">InstrKind.def</target>
        </trans-unit>
        <trans-unit id="8763087046735452b2c14e2aafb2670921b98e0f" translate="yes" xml:space="preserve">
          <source>InstrKind.fork</source>
          <target state="translated">InstrKind.fork</target>
        </trans-unit>
        <trans-unit id="242560a445a0c9fdf7c6160bb0674597540d9780" translate="yes" xml:space="preserve">
          <source>InstrKind.goto</source>
          <target state="translated">InstrKind.goto</target>
        </trans-unit>
        <trans-unit id="c5203d823143bb8dfcc0f679e0c4e986b88723a3" translate="yes" xml:space="preserve">
          <source>InstrKind.use</source>
          <target state="translated">InstrKind.use</target>
        </trans-unit>
        <trans-unit id="114df6d11290c5ca50b0fe2c3577945135617b77" translate="yes" xml:space="preserve">
          <source>InstrKind:</source>
          <target state="translated">InstrKind:</target>
        </trans-unit>
        <trans-unit id="ea6886040cf2ef0ad4f797b3dc6d67433a396e6b" translate="yes" xml:space="preserve">
          <source>InstrTargetKind.Full</source>
          <target state="translated">InstrTargetKind.Full</target>
        </trans-unit>
        <trans-unit id="52f4574ed6f6c4d02d0cb29f4036bcccef7c0d70" translate="yes" xml:space="preserve">
          <source>InstrTargetKind.None</source>
          <target state="translated">InstrTargetKind.None</target>
        </trans-unit>
        <trans-unit id="0fb51209edb27582e6cdbdee73245a7be79ec011" translate="yes" xml:space="preserve">
          <source>InstrTargetKind.Partial</source>
          <target state="translated">InstrTargetKind.Partial</target>
        </trans-unit>
        <trans-unit id="6a8f13993368bcf13b499ddb308191373de6ec73" translate="yes" xml:space="preserve">
          <source>InstrTargetKind:</source>
          <target state="translated">InstrTargetKind:</target>
        </trans-unit>
        <trans-unit id="b3d70d908a6362f23ac218f91376170c43e197b8" translate="yes" xml:space="preserve">
          <source>Int values of &lt;code&gt;x&lt;/code&gt; are simply converted to &lt;code&gt;float&lt;/code&gt; and the other push operation is called.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 的int值被简单地转换为 &lt;code&gt;float&lt;/code&gt; ,并且调用了另一个push操作。</target>
        </trans-unit>
        <trans-unit id="ec54b2dcce7fd1b6d6a547c96c19205ad88a3d5d" translate="yes" xml:space="preserve">
          <source>Int values of &lt;em&gt;x&lt;/em&gt; are simply converted to &lt;code&gt;float&lt;/code&gt; and the other push operation is called.</source>
          <target state="translated">&lt;em&gt;x的&lt;/em&gt; int值被简单地转换为 &lt;code&gt;float&lt;/code&gt; ,并且调用了另一个push操作。</target>
        </trans-unit>
        <trans-unit id="deda97adb15cf9f410f1a62ae2f409969426ba15" translate="yes" xml:space="preserve">
          <source>Int128:</source>
          <target state="translated">Int128:</target>
        </trans-unit>
        <trans-unit id="b4aa8b9e0e7c816120ced52566c415046aa61c89" translate="yes" xml:space="preserve">
          <source>IntLike:</source>
          <target state="translated">IntLike:</target>
        </trans-unit>
        <trans-unit id="70d648e65d494f28a7240688bec60fdcef36d372" translate="yes" xml:space="preserve">
          <source>Integer division</source>
          <target state="translated">整数除法</target>
        </trans-unit>
        <trans-unit id="2adc71fa12ee88a61833caad8062097e6410346c" translate="yes" xml:space="preserve">
          <source>Integer division for durations.</source>
          <target state="translated">期限的整数除法。</target>
        </trans-unit>
        <trans-unit id="a3af0144177408ffaf9ca66538422c9598f49360" translate="yes" xml:space="preserve">
          <source>Integer literals:</source>
          <target state="translated">整数字。</target>
        </trans-unit>
        <trans-unit id="967e169d056059f8ebefe4866be09c6d9d6123e0" translate="yes" xml:space="preserve">
          <source>Integer modulo (remainder)</source>
          <target state="translated">整数模数(余数)</target>
        </trans-unit>
        <trans-unit id="724b5422dc05c791b8cf0befd732972c0409722e" translate="yes" xml:space="preserve">
          <source>Integers</source>
          <target state="translated">Integers</target>
        </trans-unit>
        <trans-unit id="584a126c172b3ef1ff0c69307f68a5ebdd0d1d09" translate="yes" xml:space="preserve">
          <source>Integers, bool, characters and enumeration types (and subranges of these types) belong to ordinal types. For reasons of simplicity of implementation the types &lt;code&gt;uint&lt;/code&gt; and &lt;code&gt;uint64&lt;/code&gt; are not ordinal types.</source>
          <target state="translated">整数，布尔，字符和枚举类型（以及这些类型的子范围）属于序数类型。为了简化实现， &lt;code&gt;uint&lt;/code&gt; 和 &lt;code&gt;uint64&lt;/code&gt; 类型不是序数类型。</target>
        </trans-unit>
        <trans-unit id="93fb45ea1fb665d4009b40b926e9f2ec253fb203" translate="yes" xml:space="preserve">
          <source>Integers, bool, characters, and enumeration types (and subranges of these types) belong to ordinal types. For reasons of simplicity of implementation the types &lt;code&gt;uint&lt;/code&gt; and &lt;code&gt;uint64&lt;/code&gt; are not ordinal types. (This will be changed in later versions of the language.)</source>
          <target state="translated">整数，布尔，字符和枚举类型（以及这些类型的子范围）属于序数类型。为了简化实现， &lt;code&gt;uint&lt;/code&gt; 和 &lt;code&gt;uint64&lt;/code&gt; 类型不是序数类型。（这将在更高版本的语言中更改。）</target>
        </trans-unit>
        <trans-unit id="90c35cf1c7e9e4b6aa47b681a51fc9aa23f2f3de" translate="yes" xml:space="preserve">
          <source>Integral conversion match: &lt;code&gt;a&lt;/code&gt; is convertible to &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; is some integer or floating point type.</source>
          <target state="translated">整数转换匹配： &lt;code&gt;a&lt;/code&gt; 可以转换为 &lt;code&gt;f&lt;/code&gt; 和 &lt;code&gt;f&lt;/code&gt; ,而 &lt;code&gt;a&lt;/code&gt; 是某种整数或浮点类型。</target>
        </trans-unit>
        <trans-unit id="5392092f4852542bfd7080327e71b10258c71bbf" translate="yes" xml:space="preserve">
          <source>Integral conversion match: &lt;code&gt;a&lt;/code&gt; is convertible to &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; is some integer or floating-point type.</source>
          <target state="translated">整数转换匹配： &lt;code&gt;a&lt;/code&gt; 可以转换为 &lt;code&gt;f&lt;/code&gt; 和 &lt;code&gt;f&lt;/code&gt; ,而 &lt;code&gt;a&lt;/code&gt; 是某种整数或浮点类型。</target>
        </trans-unit>
        <trans-unit id="de3208eaf79e1a99a103c6d62b538da30f3bfb1d" translate="yes" xml:space="preserve">
          <source>IntegralTypes:</source>
          <target state="translated">IntegralTypes:</target>
        </trans-unit>
        <trans-unit id="2cea7df8891dd1065020c3b86bf5bf912b6baca2" translate="yes" xml:space="preserve">
          <source>Interfacing</source>
          <target state="translated">Interfacing</target>
        </trans-unit>
        <trans-unit id="a954e42be7d65d0d68df6c2475675a3e2ab46fae" translate="yes" xml:space="preserve">
          <source>Internal documentation</source>
          <target state="translated">内部文件</target>
        </trans-unit>
        <trans-unit id="6be940d65e52db18b5d8edc969f415c8720649fa" translate="yes" xml:space="preserve">
          <source>Internal type representation</source>
          <target state="translated">内部类型表示</target>
        </trans-unit>
        <trans-unit id="664fc2f86af06c6988fa72f769d3e17fcd2731e8" translate="yes" xml:space="preserve">
          <source>Internally, we want mustRehash(rightSize(x), x) == false.</source>
          <target state="translated">在内部,我们希望 mustRehash(rightSize(x),x)==false。</target>
        </trans-unit>
        <trans-unit id="653edb0bfdb6bd20dfe7affb5776bc7d271237c7" translate="yes" xml:space="preserve">
          <source>Internals</source>
          <target state="translated">Internals</target>
        </trans-unit>
        <trans-unit id="2938da18cdb579e62b1141f39929cc36fdc8e917" translate="yes" xml:space="preserve">
          <source>Internals of the Nim Compiler</source>
          <target state="translated">Nim编译器的内部结构</target>
        </trans-unit>
        <trans-unit id="efedd1f6d18388871beb5b8937b0af027d8bf044" translate="yes" xml:space="preserve">
          <source>Internet Protocols and Support</source>
          <target state="translated">互联网协议和支持</target>
        </trans-unit>
        <trans-unit id="1e1f51443b0353cdbad01856560fdebd6b784636" translate="yes" xml:space="preserve">
          <source>Interpolates a format string with the values from &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">插值格式字符串从值 &lt;code&gt;a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c77102105a7e484189908c6c3aaa8b4fde6d5bd4" translate="yes" xml:space="preserve">
          <source>Interpolates a format string with the values from &lt;em&gt;a&lt;/em&gt;.</source>
          <target state="translated">插值格式字符串从值&lt;em&gt;一&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d0f596ba112a353008597117b57b10b067fc620b" translate="yes" xml:space="preserve">
          <source>Intersection</source>
          <target state="translated">Intersection</target>
        </trans-unit>
        <trans-unit id="d249f4886224f2e23bd35391438616d4b658f958" translate="yes" xml:space="preserve">
          <source>Interval &lt;code&gt;[a, b)&lt;/code&gt; (excluded upper bound)</source>
          <target state="translated">间隔 &lt;code&gt;[a, b)&lt;/code&gt; （上限除外）</target>
        </trans-unit>
        <trans-unit id="6f6c6dbceccb29752be8da46aa57f7a3b135a866" translate="yes" xml:space="preserve">
          <source>Interval &lt;code&gt;[a, b]&lt;/code&gt; but &lt;code&gt;b&lt;/code&gt; as reversed index</source>
          <target state="translated">间隔 &lt;code&gt;[a, b]&lt;/code&gt; 但 &lt;code&gt;b&lt;/code&gt; 为反向索引</target>
        </trans-unit>
        <trans-unit id="051adb37ba103a949f0c96a4d71cb5c34d93f9e7" translate="yes" xml:space="preserve">
          <source>Into:</source>
          <target state="translated">Into:</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="1a2e25ef70924b9dc72d6e9cae42a42464d5c3ae" translate="yes" xml:space="preserve">
          <source>Invalid SQL encountered</source>
          <target state="translated">遇到无效的SQL</target>
        </trans-unit>
        <trans-unit id="3579c51a9cfa004f6051766e66c67a34af9f5d6d" translate="yes" xml:space="preserve">
          <source>Invalid: operations with mathematically invalid operands, for example 0.0/0.0, sqrt(-1.0), and log(-37.8).</source>
          <target state="translated">无效:操作数在数学上无效的操作,例如0.0/0.0、sqrt(-1.0)和log(-37.8)。</target>
        </trans-unit>
        <trans-unit id="da5d8297acd1c19db82eed4ee9e25718eaeaf12d" translate="yes" xml:space="preserve">
          <source>InvalidFileIdx:</source>
          <target state="translated">InvalidFileIdx:</target>
        </trans-unit>
        <trans-unit id="d94bd76dcefd3aaeaf07e88fd1e63fc2292a2aea" translate="yes" xml:space="preserve">
          <source>InvalidKey:</source>
          <target state="translated">InvalidKey:</target>
        </trans-unit>
        <trans-unit id="c333a9fb42f3b4165ac73a5c16dc07d0d71c7eef" translate="yes" xml:space="preserve">
          <source>Investigating pending futures</source>
          <target state="translated">调查未决期货</target>
        </trans-unit>
        <trans-unit id="e0c13b2efd4e2d6dec9f73473d4c5e30f853cc74" translate="yes" xml:space="preserve">
          <source>Invocation context</source>
          <target state="translated">调用背景</target>
        </trans-unit>
        <trans-unit id="45e47edcb41b8a29e3a098022eba6bd2db5b9ca3" translate="yes" xml:space="preserve">
          <source>Invocation of a multi-method cannot be ambiguous: collide 2 is preferred over collide 1 because the resolution works from left to right. In the example &lt;code&gt;Unit, Thing&lt;/code&gt; is preferred over &lt;code&gt;Thing, Unit&lt;/code&gt;.</source>
          <target state="translated">多方法的调用不能是模棱两可的：碰撞2优于碰撞1，因为分辨率从左到右起作用。在示例 &lt;code&gt;Unit, Thing&lt;/code&gt; 优于 &lt;code&gt;Thing, Unit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b0eda3fd7457c0fb4308b75d0bf6df3d4719aced" translate="yes" xml:space="preserve">
          <source>Is equivalent to:</source>
          <target state="translated">相当于:</target>
        </trans-unit>
        <trans-unit id="c8dde73a048232b1b6d8ccb412e7a1056c7aad76" translate="yes" xml:space="preserve">
          <source>Is it possible to create custom exceptions. A custom exception is a custom type:</source>
          <target state="translated">是否可以创建自定义异常。自定义异常是一种自定义类型。</target>
        </trans-unit>
        <trans-unit id="a8f35cc2588d6df7883512e310eaf3cfe55f22b5" translate="yes" xml:space="preserve">
          <source>Is operator</source>
          <target state="translated">是运营商</target>
        </trans-unit>
        <trans-unit id="3bcc962b75eed7b2e391c690e8701aa2754af2d5" translate="yes" xml:space="preserve">
          <source>Is rewritten to:</source>
          <target state="translated">是改写为:</target>
        </trans-unit>
        <trans-unit id="41e7fee403015340d1195de277c32fe1acf8a866" translate="yes" xml:space="preserve">
          <source>Is short for:</source>
          <target state="translated">是简称。</target>
        </trans-unit>
        <trans-unit id="a559a239bb82de0629bcb6a428aeb5fd89db0826" translate="yes" xml:space="preserve">
          <source>Is the same as:</source>
          <target state="translated">是与。</target>
        </trans-unit>
        <trans-unit id="0b7411e89c7c2bc27af208e897d4f8a85d2d7e2c" translate="yes" xml:space="preserve">
          <source>Is transformed into:</source>
          <target state="translated">是转化为。</target>
        </trans-unit>
        <trans-unit id="ae0bcdcfc983072ff2e5010acbd964825c34f849" translate="yes" xml:space="preserve">
          <source>Is translated into:</source>
          <target state="translated">被翻译成。</target>
        </trans-unit>
        <trans-unit id="6f20666fec7d3538d857abddfabb7eb0323d351c" translate="yes" xml:space="preserve">
          <source>Is translated to:</source>
          <target state="translated">被翻译成:</target>
        </trans-unit>
        <trans-unit id="90d19d41b3a53b1379c3459c0faab9f64cca3759" translate="yes" xml:space="preserve">
          <source>It allows programmers to mostly use their own preferred spelling style, be it humpStyle or snake_style, and libraries written by different programmers cannot use incompatible conventions. A Nim-aware editor or IDE can show the identifiers as preferred. Another advantage is that it frees the programmer from remembering the exact spelling of an identifier. The exception with respect to the first letter allows common code like &lt;code&gt;var foo: Foo&lt;/code&gt; to be parsed unambiguously.</source>
          <target state="translated">它允许程序员主要使用自己喜欢的拼写样式（无论是humpStyle还是snake_style），并且由不同程序员编写的库不能使用不兼容的约定。Nim感知编辑器或IDE可以将标识符显示为首选。另一个优点是它使程序员不必记住标识符的确切拼写。关于第一个字母的例外允许诸如 &lt;code&gt;var foo: Foo&lt;/code&gt; 这样的通用代码被明确地解析。</target>
        </trans-unit>
        <trans-unit id="2fe9d58777a4819a056f680773675b458bc59f43" translate="yes" xml:space="preserve">
          <source>It also possible to pass arguments to a user definable matcher:</source>
          <target state="translated">也可以将参数传递给用户定义的匹配器。</target>
        </trans-unit>
        <trans-unit id="4b2feef416362147669a39cf0c612de62bb2d19e" translate="yes" xml:space="preserve">
          <source>It also provides some fast iterators over lines in text files (or other &quot;line-like&quot;, variable length, delimited records).</source>
          <target state="translated">它还提供了一些快速迭代文本文件中的行(或其他 &quot;类似行 &quot;的、可变长度、定界记录)。</target>
        </trans-unit>
        <trans-unit id="dff3ae584541038e537e5a342c1930160c45bf0a" translate="yes" xml:space="preserve">
          <source>It can also be used when defines are being referred to, as c2nim currently does not expand defines:</source>
          <target state="translated">它也可以在引用定义时使用,因为c2nim目前没有扩展定义。</target>
        </trans-unit>
        <trans-unit id="f0075f000dd30ff460292c5c1bbbe6ad98332e6c" translate="yes" xml:space="preserve">
          <source>It can be used to parse a wild HTML document and output it as valid XHTML document (well, if you are lucky):</source>
          <target state="translated">它可以用来解析一个野生的HTML文档,并将其输出为有效的XHTML文档(如果你幸运的话)。</target>
        </trans-unit>
        <trans-unit id="33c145d4c21074c897f61429ea0a33d2da04d093" translate="yes" xml:space="preserve">
          <source>It can improve performance when you know that there are no unique Nim references below a certain point on the stack. Make sure the size you specify is greater than the potential worst-case size.</source>
          <target state="translated">当你知道堆栈上某一点以下没有唯一的Nim引用时,它可以提高性能。确保你指定的大小大于潜在的最坏情况下的大小。</target>
        </trans-unit>
        <trans-unit id="707904f9e1813dbe7e84c3547fac62855c92b5e5" translate="yes" xml:space="preserve">
          <source>It consists of a &lt;code&gt;value&lt;/code&gt; field, and a pointer to &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">它由一个 &lt;code&gt;value&lt;/code&gt; 字段和一个指向 &lt;code&gt;next&lt;/code&gt; 的指针组成。</target>
        </trans-unit>
        <trans-unit id="9ac3baaf5c589d2ead0f8cecc0ad8169cdeedc3d" translate="yes" xml:space="preserve">
          <source>It consists of a &lt;code&gt;value&lt;/code&gt; field, and pointers to &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;prev&lt;/code&gt;.</source>
          <target state="translated">它由一个 &lt;code&gt;value&lt;/code&gt; 字段以及指向 &lt;code&gt;next&lt;/code&gt; 和 &lt;code&gt;prev&lt;/code&gt; 的指针组成。</target>
        </trans-unit>
        <trans-unit id="5dc87ef7de9cb3163f7db0caa4f1d2ef73020407" translate="yes" xml:space="preserve">
          <source>It consists of two public fields:</source>
          <target state="translated">它由两个公共场地组成。</target>
        </trans-unit>
        <trans-unit id="e120b4c3399a4ece308ce4ebd238f057f7928f21" translate="yes" xml:space="preserve">
          <source>It does &lt;strong&gt;not&lt;/strong&gt; fail if the directory already exists because for most usages this does not indicate an error.</source>
          <target state="translated">它并&lt;strong&gt;没有&lt;/strong&gt;，如果该目录已经存在，因为大多数情况的使用，这并不表示错误失败。</target>
        </trans-unit>
        <trans-unit id="1a8b554d95560acb8bc18f45089e0469567bfcff" translate="yes" xml:space="preserve">
          <source>It does not check for overflow. If the value represented by the string is too big to fit into &lt;code&gt;number&lt;/code&gt;, only the value of last fitting characters will be stored in &lt;code&gt;number&lt;/code&gt; without producing an error.</source>
          <target state="translated">它不检查溢出。如果字符串表示的值太大而无法放入 &lt;code&gt;number&lt;/code&gt; ，则只有最后一个适合字符的值将以 &lt;code&gt;number&lt;/code&gt; 存储，而不会产生错误。</target>
        </trans-unit>
        <trans-unit id="589d528fa76550fcfe67d75a7cc3b724508c0925" translate="yes" xml:space="preserve">
          <source>It does not make sense to multiply a dollar with a dollar, but with a number without unit; and the same holds for division:</source>
          <target state="translated">用一元钱乘一元钱,而用没有单位的数乘一元钱,是没有意义的;除法也是如此。</target>
        </trans-unit>
        <trans-unit id="450c4c60926c55d1452c423fc98b5c5022e616af" translate="yes" xml:space="preserve">
          <source>It has been designed to be as simple as possible to avoid bloat. If this library does not fulfill your needs, write your own.</source>
          <target state="translated">它的设计尽量简单,以避免臃肿。如果这个库不能满足你的需求,请自己编写。</target>
        </trans-unit>
        <trans-unit id="c9187f5ee38c2d68fe98474af10e0521e2ff318b" translate="yes" xml:space="preserve">
          <source>It helps to think that the iterator actually returns a pair &lt;code&gt;(value, done)&lt;/code&gt; and &lt;code&gt;finished&lt;/code&gt; is used to access the hidden &lt;code&gt;done&lt;/code&gt; field.</source>
          <target state="translated">可以认为迭代器实际上返回了一个对 &lt;code&gt;(value, done)&lt;/code&gt; ， &lt;code&gt;finished&lt;/code&gt; 用于访问隐藏的 &lt;code&gt;done&lt;/code&gt; 字段。</target>
        </trans-unit>
        <trans-unit id="b7934ea36bb3abaeb6de1ae68617ee4fa3e89f7c" translate="yes" xml:space="preserve">
          <source>It is &lt;strong&gt;not&lt;/strong&gt; safe to disable the garbage collector and enable it after the call from your background thread even if the code you are calling is short lived.</source>
          <target state="translated">它是&lt;strong&gt;不是&lt;/strong&gt;安全禁用垃圾收集器，并从你的后台线程调用，即使你是调用代码短命后启用它。</target>
        </trans-unit>
        <trans-unit id="0ce32c42207b074e8614eb82e24a7a71033a751d" translate="yes" xml:space="preserve">
          <source>It is a compile time error if the implicitly introduced pointer could be used to access a location beyond its lifetime:</source>
          <target state="translated">如果隐式引入的指针可以被用来访问一个超过其寿命的位置,这是一个编译时错误。</target>
        </trans-unit>
        <trans-unit id="1b3adbb46e2bdc0ed4b61c5387fc2fb105c361aa" translate="yes" xml:space="preserve">
          <source>It is a cross-platform scripting language that can run where Nim can run, e.g. you can not run Batch or PowerShell on Linux or Mac, the Bash for Linux might not run on Mac, there are no unit tests tools for Batch, etc.</source>
          <target state="translated">它是一种跨平台的脚本语言,可以在Nim可以运行的地方运行,比如你在Linux或Mac上不能运行Batch或PowerShell,Linux的Bash可能在Mac上运行不了,Batch没有单元测试工具等等。</target>
        </trans-unit>
        <trans-unit id="7d7b976004a0abc29787324000db9052ab84bbf8" translate="yes" xml:space="preserve">
          <source>It is a static error if the implicitly introduced pointer could be used to access a location beyond its lifetime:</source>
          <target state="translated">如果隐式引入的指针可以被用来访问一个超过其寿命的位置,这是一个静态错误。</target>
        </trans-unit>
        <trans-unit id="7834ad871782405d435b671bd87ad2f03c244a62" translate="yes" xml:space="preserve">
          <source>It is also important that the replay involves the &lt;code&gt;import&lt;/code&gt; statement so that dependencies are resolved properly.</source>
          <target state="translated">重播涉及 &lt;code&gt;import&lt;/code&gt; 语句，以便正确解决依赖关系也很重要。</target>
        </trans-unit>
        <trans-unit id="654b26d139effb1815e88b12fee61a0a858572c0" translate="yes" xml:space="preserve">
          <source>It is also important that the replay involves the &lt;code&gt;import&lt;/code&gt; statement so that the dependencies are resolved properly.</source>
          <target state="translated">重播涉及 &lt;code&gt;import&lt;/code&gt; 语句，以便正确解决依赖关系也很重要。</target>
        </trans-unit>
        <trans-unit id="53fd0344d13db43453267e290010e71aabfc6555" translate="yes" xml:space="preserve">
          <source>It is also not possible to use fully qualified identifiers with module symbol in method call syntax. The order in which the dot operator binds to symbols prohibits this.</source>
          <target state="translated">在方法调用语法中也不可能使用带有模块符号的完全限定标识符。点运算符与符号结合的顺序禁止这样做。</target>
        </trans-unit>
        <trans-unit id="2d729a9913be11aee103dc8aea1b73a4c4edcc41" translate="yes" xml:space="preserve">
          <source>It is an essential property of abstract types that they &lt;strong&gt;do not&lt;/strong&gt; imply a subtype relation between the abstract type and its base type. Explicit type conversions from &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;SQL&lt;/code&gt; are allowed:</source>
          <target state="translated">抽象类型的本质属性是它们&lt;strong&gt;不&lt;/strong&gt;暗示抽象类型与其基本类型之间存在子类型关系。允许从 &lt;code&gt;string&lt;/code&gt; 到 &lt;code&gt;SQL&lt;/code&gt; 的显式类型转换：</target>
        </trans-unit>
        <trans-unit id="65b004ad9101d94b43979371288c09a01997643d" translate="yes" xml:space="preserve">
          <source>It is completely up to the application how to utilize each level.</source>
          <target state="translated">如何利用每一个层次,完全取决于应用程序。</target>
        </trans-unit>
        <trans-unit id="3e31fcf4a46656a66279b459e1a0815babbcc226" translate="yes" xml:space="preserve">
          <source>It is important to note that reordering &lt;em&gt;only&lt;/em&gt; works for symbols at top level scope. Therefore, the following will &lt;em&gt;fail to compile:&lt;/em&gt;</source>
          <target state="translated">请务必注意，重新排序&lt;em&gt;仅&lt;/em&gt;适用于顶级范围的符号。因此，以下将&lt;em&gt;无法编译：&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f982cc575838305262f35478aa99ac62135b34f0" translate="yes" xml:space="preserve">
          <source>It is mostly accurate to picture semantic analysis proceeding top to bottom and left to right in the source code, with compile-time code execution interleaved when necessary to compute values that are required for subsequent semantic analysis. We will see much later in this document that macro invocation not only requires this interleaving, but also creates a situation where semantic analysis does not entirely proceed top to bottom and left to right.</source>
          <target state="translated">大多数情况下,准确的做法是将语义分析想象成在源代码中从上到下、从左到右地进行,编译时的代码执行在必要时进行交错,以计算后续语义分析所需的值。我们在本文后面会看到,宏调用不仅需要这种交错,而且还会造成语义分析并不完全从上到下、从左到右进行的情况。</target>
        </trans-unit>
        <trans-unit id="eccab016e9c85070b264d0771a05edb52b43822b" translate="yes" xml:space="preserve">
          <source>It is not checked that the &lt;code&gt;except&lt;/code&gt; list is really exported from the module. This feature allows to compile against an older version of the module that does not export these identifiers.</source>
          <target state="translated">不检查是否确实从模块中导出了 &lt;code&gt;except&lt;/code&gt; 列表。此功能允许针对不导出这些标识符的较旧版本的模块进行编译。</target>
        </trans-unit>
        <trans-unit id="96d95c97b424d831a7891fe9bd020f37cafefea4" translate="yes" xml:space="preserve">
          <source>It is not checked that the &lt;code&gt;except&lt;/code&gt; list is really exported from the module. This feature allows us to compile against an older version of the module that does not export these identifiers.</source>
          <target state="translated">不会检查是否确实从模块中导出了 &lt;code&gt;except&lt;/code&gt; 列表。此功能使我们可以针对不导出这些标识符的较旧版本的模块进行编译。</target>
        </trans-unit>
        <trans-unit id="0fcd3d044e40209d40cd612e95ebd82795dff46b" translate="yes" xml:space="preserve">
          <source>It is possible to define custom typed pragmas. Custom pragmas do not affect code generation directly, but their presence can be detected by macros. Custom pragmas are defined using templates annotated with pragma &lt;code&gt;pragma&lt;/code&gt;:</source>
          <target state="translated">可以定义自定义类型的编译指示。自定义实用程序不会直接影响代码生成，但是宏可以检测到它们的存在。使用带有pragma &lt;code&gt;pragma&lt;/code&gt; 注释的模板来定义自定义实用程序：</target>
        </trans-unit>
        <trans-unit id="f56aa33e889a1d3e8b0dbe2f53303f6d1de0ebdc" translate="yes" xml:space="preserve">
          <source>It is possible to define custom typed pragmas. Custom pragmas do not effect code generation directly, but their presence can be detected by macros. Custom pragmas are defined using templates annotated with pragma &lt;code&gt;pragma&lt;/code&gt;:</source>
          <target state="translated">可以定义自定义类型的编译指示。自定义实用程序不会直接影响代码生成，但是宏可以检测到它们的存在。使用带有pragma &lt;code&gt;pragma&lt;/code&gt; 注释的模板来定义自定义实用程序：</target>
        </trans-unit>
        <trans-unit id="e9ccb90931c9aae8ce40b72916123dc62b5d1dce" translate="yes" xml:space="preserve">
          <source>It is possible to raise/catch imported C++ exceptions. Types imported using &lt;code&gt;importcpp&lt;/code&gt; can be raised or caught. Exceptions are raised by value and caught by reference. Example:</source>
          <target state="translated">可以引发/捕获导入的C ++异常。可以引发或捕获使用 &lt;code&gt;importcpp&lt;/code&gt; 导入的类型。异常是通过值引发的，并通过引用来捕获的。例子：</target>
        </trans-unit>
        <trans-unit id="bc420b00d95b0079b6bcd9cda3e4f93970825224" translate="yes" xml:space="preserve">
          <source>It is possible to raise/catch imported C++ exceptions. Types imported using &lt;em&gt;importcpp&lt;/em&gt; can be raised or caught. Exceptions are raised by value and caught by reference. Example:</source>
          <target state="translated">可以引发/捕获导入的C ++异常。可以引发或捕获使用&lt;em&gt;importcpp&lt;/em&gt;导入的类型。异常是通过值引发的，并通过引用来捕获的。例：</target>
        </trans-unit>
        <trans-unit id="82b23252352db8b301d0df8ca78112f74b272448" translate="yes" xml:space="preserve">
          <source>It is quite common to have arrays start at zero, so there's a shortcut syntax to specify a range from zero to the specified index minus one:</source>
          <target state="translated">数组从零开始是很常见的,所以有一个快捷语法来指定从零到指定索引减一的范围。</target>
        </trans-unit>
        <trans-unit id="82118804703a69ba666b11e8579a1411bb333d2a" translate="yes" xml:space="preserve">
          <source>It may be surprising but the function as a whole can take longer than the specified timeout, only individual internal calls on the socket are affected. In practice this means that as long as the server is sending data an exception will not be raised, if however data does not reach the client within the specified timeout a &lt;code&gt;TimeoutError&lt;/code&gt; exception will be raised.</source>
          <target state="translated">可能令人惊讶，但是整个函数所花费的时间可能超过指定的超时时间，仅影响套接字上的各个内部调用。实际上，这意味着只要服务器正在发送数据，就不会引发异常，但是，如果数据在指定的超时时间内未到达客户端，则会引发 &lt;code&gt;TimeoutError&lt;/code&gt; 异常。</target>
        </trans-unit>
        <trans-unit id="919d2993bd870949c788657a2aacbe74a9e6d3fc" translate="yes" xml:space="preserve">
          <source>It must be a call expression &lt;code&gt;f(a, ...)&lt;/code&gt;.</source>
          <target state="translated">它必须是调用表达式 &lt;code&gt;f(a, ...)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b1bdeab513f38cc4e202661fc69c3b7e5aa7c684" translate="yes" xml:space="preserve">
          <source>It must contain &lt;code&gt;else&lt;/code&gt; branch.</source>
          <target state="translated">它必须包含 &lt;code&gt;else&lt;/code&gt; 分支。</target>
        </trans-unit>
        <trans-unit id="9f548d24fefd8a46690cd32590a6cce7dfd8f4a7" translate="yes" xml:space="preserve">
          <source>It must not contain &lt;code&gt;elif&lt;/code&gt; branches.</source>
          <target state="translated">它不能包含 &lt;code&gt;elif&lt;/code&gt; 分支。</target>
        </trans-unit>
        <trans-unit id="81fc55ee6fadfd8ef0741760bb3f9cca4c7346cd" translate="yes" xml:space="preserve">
          <source>It produces correct results even when the resulting angle is near pi/2 or -pi/2 (&lt;code&gt;x&lt;/code&gt; near 0).</source>
          <target state="translated">即使结果角度接近pi / 2或-pi / 2（ &lt;code&gt;x&lt;/code&gt; 接近0），它也会产生正确的结果。</target>
        </trans-unit>
        <trans-unit id="2a78364ce2930bd49b0b77d040013c455c807740" translate="yes" xml:space="preserve">
          <source>It provides a single proc that does Unicode to ASCII transliterations: It finds the sequence of ASCII characters that is the closest approximation to the Unicode string.</source>
          <target state="translated">它提供了一个单一的程序来完成Unicode到ASCII的翻译。它能找到与Unicode字符串最接近的ASCII字符序列。</target>
        </trans-unit>
        <trans-unit id="945f0d61d5e752a60e1efa28e451ae30a2da4995" translate="yes" xml:space="preserve">
          <source>It repeats semantic analysis of that region of the code.</source>
          <target state="translated">它重复对该区域代码的语义分析。</target>
        </trans-unit>
        <trans-unit id="d7f2a311341a850342d9d8b0aa0af7a94a5ab291" translate="yes" xml:space="preserve">
          <source>It replaces the AST of the macro invocation with the AST returned by the macro.</source>
          <target state="translated">它将宏调用的AST替换为宏返回的AST。</target>
        </trans-unit>
        <trans-unit id="89289cfedb95a2cf0dc479f4c4dd1b274fb7a914" translate="yes" xml:space="preserve">
          <source>It should be especially noted that the handling of days differs between &lt;code&gt;TimeInterval&lt;/code&gt; and &lt;code&gt;Duration&lt;/code&gt;. The &lt;code&gt;Duration&lt;/code&gt; type always treats a day as exactly 86400 seconds. For &lt;code&gt;TimeInterval&lt;/code&gt;, it's more complex.</source>
          <target state="translated">特别要注意的是， &lt;code&gt;TimeInterval&lt;/code&gt; 和 &lt;code&gt;Duration&lt;/code&gt; 的天数处理方式有所不同。在 &lt;code&gt;Duration&lt;/code&gt; 类型始终把每天的确切86400秒。对于 &lt;code&gt;TimeInterval&lt;/code&gt; ，它更加复杂。</target>
        </trans-unit>
        <trans-unit id="fef8e49e9dcbba00983188e55f9154c4477b0e2f" translate="yes" xml:space="preserve">
          <source>It works even for complex data graphs with cycles. This is a great debugging tool.</source>
          <target state="translated">即使是有周期的复杂数据图也能用。这是一个很好的调试工具。</target>
        </trans-unit>
        <trans-unit id="a0657d7c3802eac9139afa1fdbbc00243500a126" translate="yes" xml:space="preserve">
          <source>It's a static error if the compiler cannot perform the evaluation at compile time.</source>
          <target state="translated">如果编译器在编译时不能执行评估,这是一个静态错误。</target>
        </trans-unit>
        <trans-unit id="b08a29bb41e597ad7a05123c2e5513c91c059874" translate="yes" xml:space="preserve">
          <source>It's also possible to use &lt;code&gt;from module import nil&lt;/code&gt; if one wants to import the module but wants to enforce fully qualified access to every symbol in &lt;code&gt;module&lt;/code&gt;.</source>
          <target state="translated">它也可以使用 &lt;code&gt;from module import nil&lt;/code&gt; 如果一个人想导入模块，但要强制执行的在每一个符号完全合格的接入 &lt;code&gt;module&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4b99df4579542f338081d6530c4ef7ecb203070b" translate="yes" xml:space="preserve">
          <source>It's possible to get into a situation where an async proc, or more accurately a &lt;code&gt;Future[T]&lt;/code&gt; gets stuck and never completes. This can happen for various reasons and can cause serious memory leaks. When this occurs it's hard to identify the procedure that is stuck.</source>
          <target state="translated">可能会遇到异步proc或更准确地说 &lt;code&gt;Future[T]&lt;/code&gt; 被卡住而无法完成的情况。发生这种情况的原因可能多种多样，并可能导致严重的内存泄漏。发生这种情况时，很难确定被卡住的过程。</target>
        </trans-unit>
        <trans-unit id="de95b4993b261b85e3332b1324f8a0290c259dec" translate="yes" xml:space="preserve">
          <source>It's recommended to use &lt;code&gt;addCallback&lt;/code&gt; or &lt;code&gt;then&lt;/code&gt; instead.</source>
          <target state="translated">我们推荐使用 &lt;code&gt;addCallback&lt;/code&gt; 或 &lt;code&gt;then&lt;/code&gt; 代替。</target>
        </trans-unit>
        <trans-unit id="667a2f1f1daab6273f203ff594ed9af0d82540bc" translate="yes" xml:space="preserve">
          <source>Iterate over all &lt;span id=&quot;environments-variables_1&quot;&gt;environments variables&lt;/span&gt;.</source>
          <target state="translated">遍历所有&lt;span id=&quot;environments-variables_1&quot;&gt;环境变量&lt;/span&gt;。</target>
        </trans-unit>
        <trans-unit id="a60407ec90fd296604708d3171527c21d92f7253" translate="yes" xml:space="preserve">
          <source>Iterate over all the directories that match the &lt;code&gt;pattern&lt;/code&gt;.</source>
          <target state="translated">遍历所有与 &lt;code&gt;pattern&lt;/code&gt; 匹配的目录。</target>
        </trans-unit>
        <trans-unit id="cadaa83ad0b6b331d838560da721266dc244b734" translate="yes" xml:space="preserve">
          <source>Iterate over all the directories that match the &lt;em&gt;pattern&lt;/em&gt;. On POSIX this uses the &lt;span id=&quot;glob_3&quot;&gt;glob&lt;/span&gt; call.</source>
          <target state="translated">遍历所有与&lt;em&gt;模式&lt;/em&gt;匹配的目录。在POSIX上，它使用&lt;span id=&quot;glob_3&quot;&gt;glob&lt;/span&gt;调用。</target>
        </trans-unit>
        <trans-unit id="914c3605354b926822b16f09f305060522cce735" translate="yes" xml:space="preserve">
          <source>Iterate over all the files and directories that match the &lt;code&gt;pattern&lt;/code&gt;.</source>
          <target state="translated">遍历所有与 &lt;code&gt;pattern&lt;/code&gt; 匹配的文件和目录。</target>
        </trans-unit>
        <trans-unit id="e75e34b52a6961303566d6b4dd5b3c4b21d77274" translate="yes" xml:space="preserve">
          <source>Iterate over all the files and directories that match the &lt;em&gt;pattern&lt;/em&gt;. On POSIX this uses the &lt;span id=&quot;glob_1&quot;&gt;glob&lt;/span&gt; call.</source>
          <target state="translated">遍历所有与&lt;em&gt;模式&lt;/em&gt;匹配的文件和目录。在POSIX上，它使用&lt;span id=&quot;glob_1&quot;&gt;glob&lt;/span&gt;调用。</target>
        </trans-unit>
        <trans-unit id="0079b8089cf8ad91d1997b6ed43a718e45fa0a7d" translate="yes" xml:space="preserve">
          <source>Iterate over all the files that match the &lt;code&gt;pattern&lt;/code&gt;.</source>
          <target state="translated">遍历所有与 &lt;code&gt;pattern&lt;/code&gt; 匹配的文件。</target>
        </trans-unit>
        <trans-unit id="9d643234b1583c1062d05608e19e2329372f5e89" translate="yes" xml:space="preserve">
          <source>Iterate over all the files that match the &lt;em&gt;pattern&lt;/em&gt;. On POSIX this uses the &lt;span id=&quot;glob_2&quot;&gt;glob&lt;/span&gt; call.</source>
          <target state="translated">遍历所有与&lt;em&gt;模式&lt;/em&gt;匹配的文件。在POSIX上，它使用&lt;span id=&quot;glob_2&quot;&gt;glob&lt;/span&gt;调用。</target>
        </trans-unit>
        <trans-unit id="ff0603a15cffd61b64440d2652fdf8f9ec28297d" translate="yes" xml:space="preserve">
          <source>Iterate over any line in the file &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">遍历文件 &lt;code&gt;f&lt;/code&gt; 中的任何行。</target>
        </trans-unit>
        <trans-unit id="584cc308ff50e7947ff5a4e8292a45088ef391f4" translate="yes" xml:space="preserve">
          <source>Iterate over any line in the file &lt;em&gt;f&lt;/em&gt;.</source>
          <target state="translated">遍历文件&lt;em&gt;f&lt;/em&gt;中的任何行。</target>
        </trans-unit>
        <trans-unit id="8a01cd13803942f49dce1ee40b0598bbd70c4bd7" translate="yes" xml:space="preserve">
          <source>Iterates over [optional &lt;code&gt;eat&lt;/code&gt;] &lt;code&gt;delim&lt;/code&gt;-delimited slices in MemFile &lt;code&gt;mfile&lt;/code&gt;.</source>
          <target state="translated">循环访问MemFile &lt;code&gt;mfile&lt;/code&gt; 中的[可选 &lt;code&gt;eat&lt;/code&gt; ]以 &lt;code&gt;delim&lt;/code&gt; 分隔的切片。</target>
        </trans-unit>
        <trans-unit id="7a1c0deeb78059911d4801816fdd1f4f108e438a" translate="yes" xml:space="preserve">
          <source>Iterates over [optional &lt;em&gt;eat&lt;/em&gt;] &lt;em&gt;delim&lt;/em&gt;-delimited slices in MemFile &lt;em&gt;mfile&lt;/em&gt;.</source>
          <target state="translated">循环访问MemFile &lt;em&gt;mfile中的&lt;/em&gt; [可选&lt;em&gt;eat&lt;/em&gt; ]以&lt;em&gt;delim&lt;/em&gt;分隔的切片。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7b0876611122b040b94724049ac0553752d5368d" translate="yes" xml:space="preserve">
          <source>Iterates over all direct children of &lt;code&gt;n&lt;/code&gt; so that they can be modified.</source>
          <target state="translated">遍历 &lt;code&gt;n&lt;/code&gt; 的所有直接子代，以便可以对其进行修改。</target>
        </trans-unit>
        <trans-unit id="b351692568b5c50e1ba118087404b3736e9960b0" translate="yes" xml:space="preserve">
          <source>Iterates over all direct children of &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">迭代 &lt;code&gt;n&lt;/code&gt; 的所有直接子代。</target>
        </trans-unit>
        <trans-unit id="0098b53a51bac069a9bf317f592bfa1e82116299" translate="yes" xml:space="preserve">
          <source>Iterates over all the children of &lt;code&gt;n&lt;/code&gt; returning those matching &lt;code&gt;tag&lt;/code&gt;.</source>
          <target state="translated">迭代 &lt;code&gt;n&lt;/code&gt; 的所有子代，返回匹配的 &lt;code&gt;tag&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52d58a07e8a9d8fd6b99e5571402712d73dfd13e" translate="yes" xml:space="preserve">
          <source>Iterates over all the children of &lt;em&gt;n&lt;/em&gt; returning those matching &lt;em&gt;tag&lt;/em&gt;.</source>
          <target state="translated">迭代&lt;em&gt;n的&lt;/em&gt;所有子代，返回匹配的&lt;em&gt;tag&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2031131f2639740a8fdd82e0e0986820c732b7da" translate="yes" xml:space="preserve">
          <source>Iterates over any &lt;code&gt;(key, value)&lt;/code&gt; pair in the table &lt;code&gt;t&lt;/code&gt; (must be declared as &lt;code&gt;var&lt;/code&gt;) in insertion order. The values can be modified.</source>
          <target state="translated">按插入顺序遍历表 &lt;code&gt;t&lt;/code&gt; 中的任何 &lt;code&gt;(key, value)&lt;/code&gt; 对（必须声明为 &lt;code&gt;var&lt;/code&gt; ）。可以修改这些值。</target>
        </trans-unit>
        <trans-unit id="ed89886fdc220839aef034465d853b4c3533a981" translate="yes" xml:space="preserve">
          <source>Iterates over any &lt;code&gt;(key, value)&lt;/code&gt; pair in the table &lt;code&gt;t&lt;/code&gt; (must be declared as &lt;code&gt;var&lt;/code&gt;). The values can be modified.</source>
          <target state="translated">遍历表 &lt;code&gt;t&lt;/code&gt; 中的任何 &lt;code&gt;(key, value)&lt;/code&gt; 对（必须声明为 &lt;code&gt;var&lt;/code&gt; ）。可以修改这些值。</target>
        </trans-unit>
        <trans-unit id="d8b2ca433f04b4a8a749aad232f6bac889a4d0a6" translate="yes" xml:space="preserve">
          <source>Iterates over any &lt;code&gt;(key, value)&lt;/code&gt; pair in the table &lt;code&gt;t&lt;/code&gt; in insertion order.</source>
          <target state="translated">按插入顺序遍历表 &lt;code&gt;t&lt;/code&gt; 中的任何 &lt;code&gt;(key, value)&lt;/code&gt; 对。</target>
        </trans-unit>
        <trans-unit id="cefeeac9d9ad63762da10f605f04ac738c74d2bf" translate="yes" xml:space="preserve">
          <source>Iterates over any &lt;code&gt;(key, value)&lt;/code&gt; pair in the table &lt;code&gt;t&lt;/code&gt; in insertion order. The values can be modified.</source>
          <target state="translated">按插入顺序遍历表 &lt;code&gt;t&lt;/code&gt; 中的任何 &lt;code&gt;(key, value)&lt;/code&gt; 对。可以修改这些值。</target>
        </trans-unit>
        <trans-unit id="ee26bb77445513fd7072d8f60e7d5eaea99429b3" translate="yes" xml:space="preserve">
          <source>Iterates over any &lt;code&gt;(key, value)&lt;/code&gt; pair in the table &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">遍历表 &lt;code&gt;t&lt;/code&gt; 中的任何 &lt;code&gt;(key, value)&lt;/code&gt; 对。</target>
        </trans-unit>
        <trans-unit id="8ebeb94fbcc905ad4f95c5549b3a126c2a0483ae" translate="yes" xml:space="preserve">
          <source>Iterates over any &lt;code&gt;(key, value)&lt;/code&gt; pair in the table &lt;code&gt;t&lt;/code&gt;. The values can be modified.</source>
          <target state="translated">遍历表 &lt;code&gt;t&lt;/code&gt; 中的任何 &lt;code&gt;(key, value)&lt;/code&gt; 对。可以修改这些值。</target>
        </trans-unit>
        <trans-unit id="fa054480cc6d98fcff0dbbede18842a1f5616743" translate="yes" xml:space="preserve">
          <source>Iterates over any character in the rope &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">遍历绳索 &lt;code&gt;r&lt;/code&gt; 中的任何字符。</target>
        </trans-unit>
        <trans-unit id="c29e0d88daf7fc8f69fa95615ca4f89492721fbe" translate="yes" xml:space="preserve">
          <source>Iterates over any included element of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">遍历 &lt;code&gt;s&lt;/code&gt; 的任何包含元素。</target>
        </trans-unit>
        <trans-unit id="57adac8cbc9e3f8cf20fcc7cf47807c661d6dc7f" translate="yes" xml:space="preserve">
          <source>Iterates over any key in the table &lt;code&gt;t&lt;/code&gt; in insertion order.</source>
          <target state="translated">按插入顺序遍历表 &lt;code&gt;t&lt;/code&gt; 中的任何键。</target>
        </trans-unit>
        <trans-unit id="c3ca513c746e85ed7c0b22e03f73c175e6fa8d76" translate="yes" xml:space="preserve">
          <source>Iterates over any key in the table &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">遍历表 &lt;code&gt;t&lt;/code&gt; 中的任何键。</target>
        </trans-unit>
        <trans-unit id="cb00385955208235ad936764ab5453d705c92f63" translate="yes" xml:space="preserve">
          <source>Iterates over any leaf string in the rope &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">遍历绳索 &lt;code&gt;r&lt;/code&gt; 中的任何叶串。</target>
        </trans-unit>
        <trans-unit id="c16a371e1564d7b54df08a22cb19e1363c91b569" translate="yes" xml:space="preserve">
          <source>Iterates over any line in the file named &lt;code&gt;filename&lt;/code&gt;.</source>
          <target state="translated">遍历名为 &lt;code&gt;filename&lt;/code&gt; 的文件中的任何行。</target>
        </trans-unit>
        <trans-unit id="b19228b3b231795b187dec3bdf8a6cb478e6ffc7" translate="yes" xml:space="preserve">
          <source>Iterates over any line in the file named &lt;em&gt;filename&lt;/em&gt;.</source>
          <target state="translated">遍历文件名&lt;em&gt;filename&lt;/em&gt;中的任何行。</target>
        </trans-unit>
        <trans-unit id="2b12a5a5ce65783cb293349d9bbe6ba1a48e0db0" translate="yes" xml:space="preserve">
          <source>Iterates over any rune of the string &lt;code&gt;s&lt;/code&gt; returning runes.</source>
          <target state="translated">遍历所有符文字符串的 &lt;code&gt;s&lt;/code&gt; 返回符文。</target>
        </trans-unit>
        <trans-unit id="cd6032d3dc2a33aebf8a12f451e770d7fcbfc3d5" translate="yes" xml:space="preserve">
          <source>Iterates over any rune of the string &lt;code&gt;s&lt;/code&gt; returning utf8 values.</source>
          <target state="translated">迭代返回utf8值的字符串 &lt;code&gt;s&lt;/code&gt; 任何符文。</target>
        </trans-unit>
        <trans-unit id="232f547ddc65be9624e107036fe1044b4d2a410d" translate="yes" xml:space="preserve">
          <source>Iterates over any unicode character of the string &lt;code&gt;s&lt;/code&gt; returning runes</source>
          <target state="translated">遍历任何Unicode字符串的字符 &lt;code&gt;s&lt;/code&gt; 返回符文</target>
        </trans-unit>
        <trans-unit id="8bc06e9d0c093f624eaf1ffbfc94ebe52d5cb792" translate="yes" xml:space="preserve">
          <source>Iterates over any unicode character of the string &lt;code&gt;s&lt;/code&gt; returning utf8 values</source>
          <target state="translated">迭代返回utf8值的字符串 &lt;code&gt;s&lt;/code&gt; 任何unicode字符</target>
        </trans-unit>
        <trans-unit id="8a968911898fab15c09b5cbef048f480c161ff3e" translate="yes" xml:space="preserve">
          <source>Iterates over any value in the table &lt;code&gt;t&lt;/code&gt; (must be declared as &lt;code&gt;var&lt;/code&gt;) in insertion order. The values can be modified.</source>
          <target state="translated">按插入顺序遍历表 &lt;code&gt;t&lt;/code&gt; 中的任何值（必须声明为 &lt;code&gt;var&lt;/code&gt; ）。可以修改这些值。</target>
        </trans-unit>
        <trans-unit id="9962dd5b950cd7a1aeec54f89ae3dc0e167ddd50" translate="yes" xml:space="preserve">
          <source>Iterates over any value in the table &lt;code&gt;t&lt;/code&gt; (must be declared as &lt;code&gt;var&lt;/code&gt;). The values can be modified.</source>
          <target state="translated">遍历表 &lt;code&gt;t&lt;/code&gt; 中的任何值（必须声明为 &lt;code&gt;var&lt;/code&gt; ）。可以修改这些值。</target>
        </trans-unit>
        <trans-unit id="52cc07400698cf36bfdb4676dc30069c8b12a78c" translate="yes" xml:space="preserve">
          <source>Iterates over any value in the table &lt;code&gt;t&lt;/code&gt; in insertion order.</source>
          <target state="translated">按插入顺序遍历表 &lt;code&gt;t&lt;/code&gt; 中的任何值。</target>
        </trans-unit>
        <trans-unit id="dcd380b98c69751da5554a9f610c1576c3c5ecb4" translate="yes" xml:space="preserve">
          <source>Iterates over any value in the table &lt;code&gt;t&lt;/code&gt; in insertion order. The values can be modified.</source>
          <target state="translated">按插入顺序遍历表 &lt;code&gt;t&lt;/code&gt; 中的任何值。可以修改这些值。</target>
        </trans-unit>
        <trans-unit id="1d27d4bd380e435c26432e44231e870016163ff0" translate="yes" xml:space="preserve">
          <source>Iterates over any value in the table &lt;code&gt;t&lt;/code&gt; that belongs to the given &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">遍历表 &lt;code&gt;t&lt;/code&gt; 中属于给定 &lt;code&gt;key&lt;/code&gt; 任何值。</target>
        </trans-unit>
        <trans-unit id="f4b3e2ec828de0e05c3375daccbc62284231f825" translate="yes" xml:space="preserve">
          <source>Iterates over any value in the table &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">遍历表 &lt;code&gt;t&lt;/code&gt; 中的任何值。</target>
        </trans-unit>
        <trans-unit id="8f7c0f4de88c3ee24902c3c4f8a6435107fd325d" translate="yes" xml:space="preserve">
          <source>Iterates over any value in the table &lt;code&gt;t&lt;/code&gt;. The values can be modified.</source>
          <target state="translated">遍历表 &lt;code&gt;t&lt;/code&gt; 中的任何值。可以修改这些值。</target>
        </trans-unit>
        <trans-unit id="de5ff3aa8356329e05bbd326e0aee80c747c6738" translate="yes" xml:space="preserve">
          <source>Iterates over each element of &lt;code&gt;a&lt;/code&gt;. &lt;code&gt;items&lt;/code&gt; iterates only over the elements that are really in the set (and not over the ones the set is able to hold).</source>
          <target state="translated">迭代的每个元素 &lt;code&gt;a&lt;/code&gt; 。 &lt;code&gt;items&lt;/code&gt; 仅对集合中实际存在的元素进行迭代（而不对集合可容纳的元素进行迭代）。</target>
        </trans-unit>
        <trans-unit id="0baf741443c66b9e23ea1b0f1c51c04e55b4669b" translate="yes" xml:space="preserve">
          <source>Iterates over each item of &lt;code&gt;a&lt;/code&gt; so that you can modify the yielded value.</source>
          <target state="translated">遍历 &lt;code&gt;a&lt;/code&gt; 的每个项目，以便您可以修改产生的值。</target>
        </trans-unit>
        <trans-unit id="f774aa51ab2bfa088e66825c3ce64e1145c9d4b3" translate="yes" xml:space="preserve">
          <source>Iterates over each item of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">遍历每个项目 &lt;code&gt;a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d11dbcbe91cc1331818f452b217c0e46f21ab00" translate="yes" xml:space="preserve">
          <source>Iterates over each item of &lt;code&gt;a&lt;/code&gt;. Yields &lt;code&gt;(index, a[index])&lt;/code&gt; pairs.</source>
          <target state="translated">遍历每个项目 &lt;code&gt;a&lt;/code&gt; 。收益 &lt;code&gt;(index, a[index])&lt;/code&gt; 对。</target>
        </trans-unit>
        <trans-unit id="13a2b8124b042beac5f691248bcf8aee01b8f52f" translate="yes" xml:space="preserve">
          <source>Iterates over each item of &lt;code&gt;a&lt;/code&gt;. Yields &lt;code&gt;(index, a[index])&lt;/code&gt; pairs. &lt;code&gt;a[index]&lt;/code&gt; can be modified.</source>
          <target state="translated">遍历每个项目 &lt;code&gt;a&lt;/code&gt; 。收益 &lt;code&gt;(index, a[index])&lt;/code&gt; 对。可以修改 &lt;code&gt;a[index]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="16295892ede42eec1c24241f15531807cd815819" translate="yes" xml:space="preserve">
          <source>Iterates over elements of the set &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">遍历set &lt;code&gt;s&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="f5033a4350eddd3f6b82045959920b532e0fb3d1" translate="yes" xml:space="preserve">
          <source>Iterates over every &lt;code&gt;(key, value)&lt;/code&gt; pair in the table &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">遍历表 &lt;code&gt;t&lt;/code&gt; 中的每个 &lt;code&gt;(key, value)&lt;/code&gt; 对。</target>
        </trans-unit>
        <trans-unit id="23a3fe50138a2a75c5e3e00b3b587addb2301a7c" translate="yes" xml:space="preserve">
          <source>Iterates over every active field of the any &lt;code&gt;x&lt;/code&gt; that represents an object or a tuple.</source>
          <target state="translated">遍历表示对象或元组的任何 &lt;code&gt;x&lt;/code&gt; 的每个活动字段。</target>
        </trans-unit>
        <trans-unit id="42c3d5e552f1488c9c647cc8044a3fc4bb5296c1" translate="yes" xml:space="preserve">
          <source>Iterates over every element of &lt;code&gt;x&lt;/code&gt; that represents a Nim bitset.</source>
          <target state="translated">遍历代表Nim位集的 &lt;code&gt;x&lt;/code&gt; 的每个元素。</target>
        </trans-unit>
        <trans-unit id="01a00c8505d2a2f86de134948e537f412e7553b4" translate="yes" xml:space="preserve">
          <source>Iterates over every field of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">遍历 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 的每个字段。</target>
        </trans-unit>
        <trans-unit id="80913db20f3d16add1b8eba3fd162d81757f3392" translate="yes" xml:space="preserve">
          <source>Iterates over every field of &lt;code&gt;x&lt;/code&gt; returning their name and value.</source>
          <target state="translated">遍历 &lt;code&gt;x&lt;/code&gt; 的每个字段，返回它们的名称和值。</target>
        </trans-unit>
        <trans-unit id="23fffd92b3abfca44de9b0a12a23b2e648fb90cf" translate="yes" xml:space="preserve">
          <source>Iterates over every field of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">遍历 &lt;code&gt;x&lt;/code&gt; 的每个字段。</target>
        </trans-unit>
        <trans-unit id="0388ab64e5b2bc44c4842558d16b95e6873ca62a" translate="yes" xml:space="preserve">
          <source>Iterates over every field of &lt;em&gt;x&lt;/em&gt; returning their name and value.</source>
          <target state="translated">遍历&lt;em&gt;x的&lt;/em&gt;每个字段，以返回其名称和值。</target>
        </trans-unit>
        <trans-unit id="9bfd237b07cb45ecc2b51bca9ef184fb83390dda" translate="yes" xml:space="preserve">
          <source>Iterates over every key in the table &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">遍历表 &lt;code&gt;t&lt;/code&gt; 中的每个键。</target>
        </trans-unit>
        <trans-unit id="00e6300c1169713ff3c5939859f36401dc5c4eee" translate="yes" xml:space="preserve">
          <source>Iterates over every line in the stream. The iteration is based on &lt;code&gt;readLine&lt;/code&gt;.</source>
          <target state="translated">遍历流中的每一行。迭代基于 &lt;code&gt;readLine&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="808bfa0261846308bc30347f319972d5b75fe9e6" translate="yes" xml:space="preserve">
          <source>Iterates over every node of &lt;code&gt;x&lt;/code&gt;. Removing the current node from the list during traversal is supported.</source>
          <target state="translated">遍历 &lt;code&gt;x&lt;/code&gt; 的每个节点。支持在遍历期间从列表中删除当前节点。</target>
        </trans-unit>
        <trans-unit id="0f732f894847f9d1c88576b32ad4e82ccac6243a" translate="yes" xml:space="preserve">
          <source>Iterates over every value in the table &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">遍历表 &lt;code&gt;t&lt;/code&gt; 中的每个值。</target>
        </trans-unit>
        <trans-unit id="2df155bb93bf59cf25cb87e376867fed834ff8d4" translate="yes" xml:space="preserve">
          <source>Iterates over keys in the ordered set &lt;code&gt;s&lt;/code&gt; in insertion order.</source>
          <target state="translated">以插入顺序遍历有序集合 &lt;code&gt;s&lt;/code&gt; 中的键。</target>
        </trans-unit>
        <trans-unit id="d86ccc2321238c55eb2895e898e51e2cea46b931" translate="yes" xml:space="preserve">
          <source>Iterates over keys in the ordered set &lt;em&gt;s&lt;/em&gt; in insertion order.</source>
          <target state="translated">以插入顺序遍历有序集合&lt;em&gt;s&lt;/em&gt;中的键。</target>
        </trans-unit>
        <trans-unit id="c71c7420dcf70891eaaf12e2494e2aabe991e2e1" translate="yes" xml:space="preserve">
          <source>Iterates over keys in the set &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">遍历set中&lt;em&gt;的&lt;/em&gt;键。</target>
        </trans-unit>
        <trans-unit id="46bdee16e1d678daf2434ac56d4f6f640c4d7297" translate="yes" xml:space="preserve">
          <source>Iterates over the children of the NimNode &lt;code&gt;n&lt;/code&gt; and its indices.</source>
          <target state="translated">遍历NimNode &lt;code&gt;n&lt;/code&gt; 的子级及其索引。</target>
        </trans-unit>
        <trans-unit id="a478441af6bfca796118a06d6ecf3801a9262e8d" translate="yes" xml:space="preserve">
          <source>Iterates over the children of the NimNode &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">遍历NimNode &lt;code&gt;n&lt;/code&gt; 的子级。</target>
        </trans-unit>
        <trans-unit id="d403412658bffe2169d4774e13bc131bc0292b30" translate="yes" xml:space="preserve">
          <source>Iterates over the slice &lt;code&gt;s&lt;/code&gt;, yielding each value between &lt;code&gt;s.a&lt;/code&gt; and &lt;code&gt;s.b&lt;/code&gt; (inclusively).</source>
          <target state="translated">遍历切片 &lt;code&gt;s&lt;/code&gt; ，得出 &lt;code&gt;s.a&lt;/code&gt; 和 &lt;code&gt;s.b&lt;/code&gt; （含）之间的每个值。</target>
        </trans-unit>
        <trans-unit id="ffa199f835d15a303761e576ec9f5d81d4227843" translate="yes" xml:space="preserve">
          <source>Iterates over the values of the enum &lt;code&gt;E&lt;/code&gt;.</source>
          <target state="translated">遍历枚举 &lt;code&gt;E&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="84d6a497d60ec37deabf746a6e154eac30378ead" translate="yes" xml:space="preserve">
          <source>Iterates through (position, value) tuples of OrderedSet &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">遍历OrderedSet &lt;code&gt;s&lt;/code&gt; （位置，值）元组。</target>
        </trans-unit>
        <trans-unit id="cc74fc7791c801dc16732940c9fdf8c66d0021c9" translate="yes" xml:space="preserve">
          <source>Iterates through a container &lt;code&gt;s&lt;/code&gt; and yields every item that fulfills the predicate &lt;code&gt;pred&lt;/code&gt; (function that returns a &lt;code&gt;bool&lt;/code&gt;).</source>
          <target state="translated">遍历容器 &lt;code&gt;s&lt;/code&gt; 并产生满足谓词 &lt;code&gt;pred&lt;/code&gt; （返回 &lt;code&gt;bool&lt;/code&gt; 的函数）的每个项目。</target>
        </trans-unit>
        <trans-unit id="019eedce602970f3a59ce2f86870397544031ca8" translate="yes" xml:space="preserve">
          <source>Iterates through a container and checks if every item fulfills the predicate.</source>
          <target state="translated">遍历一个容器,并检查每个项目是否满足谓词。</target>
        </trans-unit>
        <trans-unit id="3501cb1c35511e4764121e28692134446b5075eb" translate="yes" xml:space="preserve">
          <source>Iterates through a container and checks if some item fulfills the predicate.</source>
          <target state="translated">遍历一个容器,检查是否有项目满足了谓词。</target>
        </trans-unit>
        <trans-unit id="7fbdcafeaa504e0cbb5d1d512e8dfbaba8410003" translate="yes" xml:space="preserve">
          <source>Iterates through a container and yields every item that fulfills the predicate.</source>
          <target state="translated">遍历一个容器,产生每一个满足谓词的项目。</target>
        </trans-unit>
        <trans-unit id="81ad0b1b4463be831a5785f4d06c130b3622cb6b" translate="yes" xml:space="preserve">
          <source>Iterator declaration</source>
          <target state="translated">迭代器声明</target>
        </trans-unit>
        <trans-unit id="54e7ed86aa8c68a9c6fae60948c19de8462b9bb9" translate="yes" xml:space="preserve">
          <source>Iterator for the child elements of &lt;code&gt;node&lt;/code&gt;. &lt;code&gt;node&lt;/code&gt; has to be a JObject.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 的子元素的迭代器。 &lt;code&gt;node&lt;/code&gt; 必须是JObject。</target>
        </trans-unit>
        <trans-unit id="4706edf4a5083b7e998fe39848d3df4e498b75d3" translate="yes" xml:space="preserve">
          <source>Iterator for the child elements of &lt;code&gt;node&lt;/code&gt;. &lt;code&gt;node&lt;/code&gt; has to be a JObject. Values can be modified</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 的子元素的迭代器。 &lt;code&gt;node&lt;/code&gt; 必须是JObject。值可以修改</target>
        </trans-unit>
        <trans-unit id="edfa2bc8a9c8c3896d560c27f80be0217d6f76a5" translate="yes" xml:space="preserve">
          <source>Iterator for the child elements of &lt;em&gt;node&lt;/em&gt;. &lt;em&gt;node&lt;/em&gt; has to be a JObject.</source>
          <target state="translated">&lt;em&gt;节点&lt;/em&gt;的子元素的迭代器。&lt;em&gt;节点&lt;/em&gt;必须是JObject。</target>
        </trans-unit>
        <trans-unit id="7b68d08a7df61a331ce7105b12ff381cd2542871" translate="yes" xml:space="preserve">
          <source>Iterator for the child elements of &lt;em&gt;node&lt;/em&gt;. &lt;em&gt;node&lt;/em&gt; has to be a JObject. Values can be modified</source>
          <target state="translated">&lt;em&gt;节点&lt;/em&gt;的子元素的迭代器。&lt;em&gt;节点&lt;/em&gt;必须是JObject。值可以修改</target>
        </trans-unit>
        <trans-unit id="47f262c1e0553bea30a1a72b984f55700296bfbf" translate="yes" xml:space="preserve">
          <source>Iterator for the items of &lt;code&gt;node&lt;/code&gt;. &lt;code&gt;node&lt;/code&gt; has to be a JArray.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 项的迭代器。 &lt;code&gt;node&lt;/code&gt; 必须是JArray。</target>
        </trans-unit>
        <trans-unit id="662b2317cd15badf38601a7b7c209f80e1036a4b" translate="yes" xml:space="preserve">
          <source>Iterator for the items of &lt;code&gt;node&lt;/code&gt;. &lt;code&gt;node&lt;/code&gt; has to be a JArray. Items can be modified.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 项的迭代器。 &lt;code&gt;node&lt;/code&gt; 必须是JArray。可以修改项目。</target>
        </trans-unit>
        <trans-unit id="6229022bcfa1dd29b2c2a761afb0d2b506503b49" translate="yes" xml:space="preserve">
          <source>Iterator for the items of &lt;em&gt;node&lt;/em&gt;. &lt;em&gt;node&lt;/em&gt; has to be a JArray.</source>
          <target state="translated">&lt;em&gt;节点&lt;/em&gt;项的迭代器。&lt;em&gt;节点&lt;/em&gt;必须是JArray。</target>
        </trans-unit>
        <trans-unit id="937eeb4e7eb8e59ed90bf865be25f2439aa4af89" translate="yes" xml:space="preserve">
          <source>Iterator for the items of &lt;em&gt;node&lt;/em&gt;. &lt;em&gt;node&lt;/em&gt; has to be a JArray. Items can be modified.</source>
          <target state="translated">&lt;em&gt;节点&lt;/em&gt;项的迭代器。&lt;em&gt;节点&lt;/em&gt;必须是JArray。可以修改项目。</target>
        </trans-unit>
        <trans-unit id="853abfbfe15cced2111de5887bb206586352e215" translate="yes" xml:space="preserve">
          <source>Iterator for the items of &lt;em&gt;node&lt;/em&gt;. &lt;em&gt;node&lt;/em&gt; has to be a SList.</source>
          <target state="translated">&lt;em&gt;节点&lt;/em&gt;项的迭代器。&lt;em&gt;节点&lt;/em&gt;必须是SList。</target>
        </trans-unit>
        <trans-unit id="cba2124d3f6e176e90018e400cd94d03ff65e532" translate="yes" xml:space="preserve">
          <source>Iterator for the items of &lt;em&gt;node&lt;/em&gt;. &lt;em&gt;node&lt;/em&gt; has to be a SList. Items can be modified.</source>
          <target state="translated">&lt;em&gt;节点&lt;/em&gt;项的迭代器。&lt;em&gt;节点&lt;/em&gt;必须是SList。可以修改项目。</target>
        </trans-unit>
        <trans-unit id="4f612d386d0478703d4cf5f1170e33dd6d701b97" translate="yes" xml:space="preserve">
          <source>Iterator for the keys in &lt;code&gt;node&lt;/code&gt;. &lt;code&gt;node&lt;/code&gt; has to be a JObject.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 键的迭代器。 &lt;code&gt;node&lt;/code&gt; 必须是JObject。</target>
        </trans-unit>
        <trans-unit id="909a5f0dfd8c3a4ef79cd1458e2b5fb136ad7fae" translate="yes" xml:space="preserve">
          <source>Iterators</source>
          <target state="translated">Iterators</target>
        </trans-unit>
        <trans-unit id="e0b6581a3426edca0a47a508b898e82d9d301321" translate="yes" xml:space="preserve">
          <source>Iterators and the for statement</source>
          <target state="translated">迭代器和for语句</target>
        </trans-unit>
        <trans-unit id="c425b7e3d2bb19788f1181a2d9b7a44e6225c0c2" translate="yes" xml:space="preserve">
          <source>Iterators can only be called from for loops.</source>
          <target state="translated">迭代器只能从for循环中调用。</target>
        </trans-unit>
        <trans-unit id="df973b05a9a30c48e0cd32ea43a5a32471fddcf5" translate="yes" xml:space="preserve">
          <source>Iterators cannot be forward declared, because the compiler must be able to inline an iterator. (This restriction will be gone in a future version of the compiler.)</source>
          <target state="translated">迭代器不能被向前声明,因为编译器必须能够内联迭代器。(这个限制将在未来的编译器版本中消失。)</target>
        </trans-unit>
        <trans-unit id="5ab10982165c8e92be42e548c908af50f06450ed" translate="yes" xml:space="preserve">
          <source>Iterators cannot contain a &lt;code&gt;return&lt;/code&gt; statement (and procs cannot contain a &lt;code&gt;yield&lt;/code&gt; statement).</source>
          <target state="translated">迭代器不能包含 &lt;code&gt;return&lt;/code&gt; 语句（而proc不能包含 &lt;code&gt;yield&lt;/code&gt; 语句）。</target>
        </trans-unit>
        <trans-unit id="6bf87542270934bc52223ff3fd2180cee9913ce5" translate="yes" xml:space="preserve">
          <source>Iterators do not support recursion.</source>
          <target state="translated">迭代器不支持递归。</target>
        </trans-unit>
        <trans-unit id="f13b815d55263a0262e1d3f448ea1ef694f0c5ac" translate="yes" xml:space="preserve">
          <source>Iterators have no implicit &lt;code&gt;result&lt;/code&gt; variable.</source>
          <target state="translated">迭代器没有隐式 &lt;code&gt;result&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="876bf01455350b312419f0cdb54d8032bb9cad66" translate="yes" xml:space="preserve">
          <source>Iterators look very similar to procedures, but there are several important differences:</source>
          <target state="translated">迭代器看起来与程序非常相似,但有几个重要的区别。</target>
        </trans-unit>
        <trans-unit id="6bc9cd0b4b1a838a8dbe53e1eea311fe67780b4c" translate="yes" xml:space="preserve">
          <source>Iterators that are neither marked &lt;code&gt;{.closure.}&lt;/code&gt; nor &lt;code&gt;{.inline.}&lt;/code&gt; explicitly default to being inline, but this may change in future versions of the implementation.</source>
          <target state="translated">既不是标记迭代器 &lt;code&gt;{.closure.}&lt;/code&gt; 也不是 &lt;code&gt;{.inline.}&lt;/code&gt; 明确默认为是线上，但这可能在执行的未来版本中改变。</target>
        </trans-unit>
        <trans-unit id="aa530e7c27dc03e2e278a61bf04effd2b9307526" translate="yes" xml:space="preserve">
          <source>Its dependent module stays the same.</source>
          <target state="translated">其依赖的模块保持不变。</target>
        </trans-unit>
        <trans-unit id="38589c6c98e2050e493732fa1ecf1db5355eff6a" translate="yes" xml:space="preserve">
          <source>Its expression must always be &lt;code&gt;nimvm&lt;/code&gt;. More complex expressions are not allowed.</source>
          <target state="translated">其表达式必须始终为 &lt;code&gt;nimvm&lt;/code&gt; 。不允许使用更复杂的表达式。</target>
        </trans-unit>
        <trans-unit id="b91338c3d8b9342814d28dcc9efb9aa9cbed7f85" translate="yes" xml:space="preserve">
          <source>Its implementation is based on the &lt;code&gt;xoroshiro128+&lt;/code&gt; (xor/rotate/shift/rotate) library.</source>
          <target state="translated">它的实现基于 &lt;code&gt;xoroshiro128+&lt;/code&gt; （xor / rotate / shift / rotate）库。</target>
        </trans-unit>
        <trans-unit id="c3c6069fc0e8fb3180386e713b619d38865f206f" translate="yes" xml:space="preserve">
          <source>JS backend uses native &lt;code&gt;String.prototype.endsWith&lt;/code&gt;.</source>
          <target state="translated">JS后端使用本机 &lt;code&gt;String.prototype.endsWith&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d13bd5598498d62123ce9d326f359037279386c8" translate="yes" xml:space="preserve">
          <source>JS backend uses native &lt;code&gt;String.prototype.startsWith&lt;/code&gt;.</source>
          <target state="translated">JS后端使用本机 &lt;code&gt;String.prototype.startsWith&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="cc51bafafaa93b2fbf580ec2042f2d93d08d2a66" translate="yes" xml:space="preserve">
          <source>JSON node</source>
          <target state="translated">JSON节点</target>
        </trans-unit>
        <trans-unit id="a9ebfd88be244d204864befb66a3f0873c5f9748" translate="yes" xml:space="preserve">
          <source>JSON often arrives into your program (via an API or a file) as a &lt;code&gt;string&lt;/code&gt;. The first step is to change it from its serialized form into a nested object structure called a &lt;code&gt;JsonNode&lt;/code&gt;.</source>
          <target state="translated">JSON通常以 &lt;code&gt;string&lt;/code&gt; （通过API或文件）进入您的程序。第一步是将其从序列化形式更改为称为 &lt;code&gt;JsonNode&lt;/code&gt; 的嵌套对象结构。</target>
        </trans-unit>
        <trans-unit id="507a41b622278ac1a633cf2405939bf40e6c52f4" translate="yes" xml:space="preserve">
          <source>JSON representation is stored in the passed &lt;code&gt;result&lt;/code&gt;</source>
          <target state="translated">JSON表示形式存储在传递的 &lt;code&gt;result&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="10e429d7ec1e1bc197f5757d96b736f7f4406dc2" translate="yes" xml:space="preserve">
          <source>JSON representation is stored in the passed &lt;em&gt;result&lt;/em&gt;</source>
          <target state="translated">JSON表示形式存储在传递的&lt;em&gt;结果中&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e07c7e84cb47307c315b0f9e4c311fa129b0c530" translate="yes" xml:space="preserve">
          <source>JSgenPass:</source>
          <target state="translated">JSgenPass:</target>
        </trans-unit>
        <trans-unit id="8c74f28d8bf8330962e596574f900ae47e150930" translate="yes" xml:space="preserve">
          <source>Java 11</source>
          <target state="translated">爪哇11</target>
        </trans-unit>
        <trans-unit id="6965b22569ccbc2d8dd3cf367d9c6b8f37411617" translate="yes" xml:space="preserve">
          <source>Java 6</source>
          <target state="translated">Java 6</target>
        </trans-unit>
        <trans-unit id="fbeb77483b6d1b3098e616abf683425d9a32b989" translate="yes" xml:space="preserve">
          <source>Java 8u31</source>
          <target state="translated">Java 8u31</target>
        </trans-unit>
        <trans-unit id="d58199ede61c8be4b203d8081423f4280c50eb7c" translate="yes" xml:space="preserve">
          <source>JavaScript compatibility</source>
          <target state="translated">JavaScript兼容性</target>
        </trans-unit>
        <trans-unit id="f916a308bc581d1790072c2938487f3e908716e7" translate="yes" xml:space="preserve">
          <source>JavaScript invocation example</source>
          <target state="translated">JavaScript调用示例</target>
        </trans-unit>
        <trans-unit id="3dbc9feff2ae28b051f4a43d91678090731d3d80" translate="yes" xml:space="preserve">
          <source>JavaScript's &lt;code&gt;delete&lt;/code&gt; operator</source>
          <target state="translated">JavaScript的 &lt;code&gt;delete&lt;/code&gt; 运算符</target>
        </trans-unit>
        <trans-unit id="5e45a204a3fc487735ace8c2735a3a1d7329cfce" translate="yes" xml:space="preserve">
          <source>JavaScript's &lt;code&gt;require&lt;/code&gt; function</source>
          <target state="translated">JavaScript的 &lt;code&gt;require&lt;/code&gt; 函数</target>
        </trans-unit>
        <trans-unit id="763eb4bbded920e91a4a60898d473e2e59d035cd" translate="yes" xml:space="preserve">
          <source>JavaScript's &lt;em&gt;delete&lt;/em&gt; operator</source>
          <target state="translated">JavaScript的&lt;em&gt;删除&lt;/em&gt;运算符</target>
        </trans-unit>
        <trans-unit id="7069adda83e85fa6bdd1af127a53c1cd02199edc" translate="yes" xml:space="preserve">
          <source>JavaScript's &lt;em&gt;require&lt;/em&gt; function</source>
          <target state="translated">JavaScript的&lt;em&gt;require&lt;/em&gt;函数</target>
        </trans-unit>
        <trans-unit id="e59bd4e62783475d358a55e576f9e1db556cc458" translate="yes" xml:space="preserve">
          <source>JavaScript's __dirname pseudo-variable</source>
          <target state="translated">JavaScript的__dirname伪变量</target>
        </trans-unit>
        <trans-unit id="c05cec6255459be0665ced8c38873552b1af2710" translate="yes" xml:space="preserve">
          <source>JavaScript's __filename pseudo-variable</source>
          <target state="translated">JavaScript的__filename伪变量</target>
        </trans-unit>
        <trans-unit id="48e39cbab3720cf60b021ee6573c7b065c55248f" translate="yes" xml:space="preserve">
          <source>JavaScript's arguments pseudo-variable</source>
          <target state="translated">JavaScript的参数伪变量。</target>
        </trans-unit>
        <trans-unit id="bcf9bbc0fa40a645579ccd598e9f2f8e3820fbe0" translate="yes" xml:space="preserve">
          <source>JavaScript's garbage collector is used for the &lt;a href=&quot;backends#backends-the-javascript-target&quot;&gt;JavaScript and NodeJS&lt;/a&gt; compilation targets. The &lt;a href=&quot;nims&quot;&gt;NimScript&lt;/a&gt; target uses the memory management strategy built into the Nim compiler.</source>
          <target state="translated">JavaScript的垃圾回收器用于&lt;a href=&quot;backends#backends-the-javascript-target&quot;&gt;JavaScript和NodeJS&lt;/a&gt;编译目标。该&lt;a href=&quot;nims&quot;&gt;NimScript&lt;/a&gt;目标使用内置到稔编译器的内存管理策略。</target>
        </trans-unit>
        <trans-unit id="54d029c76d92f4b9cfa620d278a0227c9c10f25f" translate="yes" xml:space="preserve">
          <source>JavaScript's null literal</source>
          <target state="translated">JavaScript的null literal</target>
        </trans-unit>
        <trans-unit id="cf269e0f71fff143464c4dce0ba8941aff38d4fb" translate="yes" xml:space="preserve">
          <source>JavaScript's undefined literal</source>
          <target state="translated">JavaScript的未定义文字</target>
        </trans-unit>
        <trans-unit id="dcbcd7e22ce06dbd66e5b01adffbd52ed0a91c58" translate="yes" xml:space="preserve">
          <source>Joins two URLs together, separating them with / if needed.</source>
          <target state="translated">将两个URL连接在一起,必要时用/分隔。</target>
        </trans-unit>
        <trans-unit id="6b949efa98af5de2c9a9e2aa57c0ac512664c7bb" translate="yes" xml:space="preserve">
          <source>Joins two directory names to one.</source>
          <target state="translated">将两个目录名连接成一个。</target>
        </trans-unit>
        <trans-unit id="3f12549d3c3738ea2a2071dc765437338e1221f8" translate="yes" xml:space="preserve">
          <source>JsonExt:</source>
          <target state="translated">JsonExt:</target>
        </trans-unit>
        <trans-unit id="7d73f45c01acbd4c90cbafdfa4ca052a1a953948" translate="yes" xml:space="preserve">
          <source>Just like an &lt;code&gt;if expression&lt;/code&gt;, but corresponding to the when statement.</source>
          <target state="translated">就像 &lt;code&gt;if expression&lt;/code&gt; ，但是与when语句相对应。</target>
        </trans-unit>
        <trans-unit id="f916106b08687c9b3604d03769854685d4185a21" translate="yes" xml:space="preserve">
          <source>Just like an &lt;em&gt;if expression&lt;/em&gt;, but corresponding to the when statement.</source>
          <target state="translated">就像&lt;em&gt;if表达式一样&lt;/em&gt;，但是对应于when语句。</target>
        </trans-unit>
        <trans-unit id="1f5a23579b9dec30ee62832658d6b0b949930854" translate="yes" xml:space="preserve">
          <source>Just like in regular type classes, Nim discriminates between &lt;code&gt;bind once&lt;/code&gt; and &lt;code&gt;bind many&lt;/code&gt; types when matching the concept. You can add the &lt;code&gt;distinct&lt;/code&gt; modifier to any of the otherwise inferable types to get a type that will be matched without permanently inferring it. This may be useful when you need to match several procs accepting the same wide class of types:</source>
          <target state="translated">就像在常规类型类中一样，Nim 在匹配概念时区分 &lt;code&gt;bind once&lt;/code&gt; &lt;code&gt;bind many&lt;/code&gt; 和多次绑定。您可以将 &lt;code&gt;distinct&lt;/code&gt; 修饰符添加到任何其他可推断类型中，以得到将被匹配而不会永久推断的类型。当您需要匹配多个接受相同广泛类型的proc时，这可能会很有用：</target>
        </trans-unit>
        <trans-unit id="3706f82fc751aa40a365d4e0255b0c559571efe9" translate="yes" xml:space="preserve">
          <source>Just like in this example we pass the path to the &lt;code&gt;mylib.a&lt;/code&gt; library (and we could as well pass &lt;code&gt;logic.o&lt;/code&gt;) we could be passing switches to link any other static C library.</source>
          <target state="translated">就像在此示例中一样，我们将路径传递到 &lt;code&gt;mylib.a&lt;/code&gt; 库（并且我们也可以传递 &lt;code&gt;logic.o&lt;/code&gt; ），我们可以传递用于链接任何其他静态C库的开关。</target>
        </trans-unit>
        <trans-unit id="ec69238a91ddb84ddd174a422a2bc6d89e341833" translate="yes" xml:space="preserve">
          <source>Just like strings, custom data types that are to be shared between Nim and the backend will need careful consideration of who controls who. If you want to hand a Nim reference to C code, you will need to use &lt;a href=&quot;system#GC_ref&quot;&gt;GC_ref&lt;/a&gt; to mark the reference as used, so it does not get freed. And for the C backend you will need to expose the &lt;a href=&quot;system#GC_unref&quot;&gt;GC_unref&lt;/a&gt; proc to clean up this memory when it is not required any more.</source>
          <target state="translated">就像字符串一样，要在Nim和后端之间共享的自定义数据类型将需要仔细考虑谁控制谁。如果要将Nim引用交给C代码，则需要使用&lt;a href=&quot;system#GC_ref&quot;&gt;GC_ref&lt;/a&gt;将引用标记为已使用，因此不会释放该引用。对于C后端，您将需要公开&lt;a href=&quot;system#GC_unref&quot;&gt;GC_unref&lt;/a&gt; proc来清理不再需要的内存。</target>
        </trans-unit>
        <trans-unit id="c9aee943f9cc2105f55aea489ff0c1e2c7a6e5c1" translate="yes" xml:space="preserve">
          <source>Just like strings, custom data types that are to be shared between Nim and the backend will need careful consideration of who controls who. If you want to hand a Nim reference to C code, you will need to use &lt;a href=&quot;system#GC_ref,ref.T&quot;&gt;GC_ref&lt;/a&gt; to mark the reference as used, so it does not get freed. And for the C backend you will need to expose the &lt;a href=&quot;system#GC_unref,ref.T&quot;&gt;GC_unref&lt;/a&gt; proc to clean up this memory when it is not required anymore.</source>
          <target state="translated">就像字符串一样，要在Nim和后端之间共享的自定义数据类型将需要仔细考虑谁控制谁。如果要将Nim引用传递给C代码，则需要使用&lt;a href=&quot;system#GC_ref,ref.T&quot;&gt;GC_ref&lt;/a&gt;将该引用标记为已使用，因此不会释放该引用。对于C后端，您将需要公开&lt;a href=&quot;system#GC_unref,ref.T&quot;&gt;GC_unref&lt;/a&gt; proc以清除不再需要的该内存。</target>
        </trans-unit>
        <trans-unit id="a1934a4d1d0bfda8c814a6f373c36bed11fcc1a9" translate="yes" xml:space="preserve">
          <source>Just like with regular pointers, covariance will be enabled only for immutable values:</source>
          <target state="translated">就像普通指针一样,协方差只对不可变的值启用。</target>
        </trans-unit>
        <trans-unit id="37ac036338fcd4bc1b7908c379b0d9fe8a481682" translate="yes" xml:space="preserve">
          <source>Kahan-Babu&amp;scaron;ka-Neumaier summation: O(1) error growth, at the expense of a considerable increase in computational expense.</source>
          <target state="translated">Kahan-Babu&amp;scaron;ka-Neumaier求和：O（1）误差增长，但以相当大的计算费用为代价。</target>
        </trans-unit>
        <trans-unit id="ba04be8caff7a5b413c929b67abe644a93a8234c" translate="yes" xml:space="preserve">
          <source>Keeping track of memory</source>
          <target state="translated">追踪记忆</target>
        </trans-unit>
        <trans-unit id="7fb5895917c093e038c93fbe4b4e17303a14ceb0" translate="yes" xml:space="preserve">
          <source>Keeps the items in the passed sequence (must be declared as a &lt;code&gt;var&lt;/code&gt;) if they fulfilled the predicate.</source>
          <target state="translated">如果项目满足谓词，则将它们保持在传递的序列中（必须声明为 &lt;code&gt;var&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="edce52f9a240fc90c7a478de6234e9c6a55da7ba" translate="yes" xml:space="preserve">
          <source>Keeps the items in the passed sequence &lt;code&gt;s&lt;/code&gt; if they fulfilled the predicate &lt;code&gt;pred&lt;/code&gt; (function that returns a &lt;code&gt;bool&lt;/code&gt;).</source>
          <target state="translated">如果项目满足谓词 &lt;code&gt;pred&lt;/code&gt; （返回 &lt;code&gt;bool&lt;/code&gt; 的函数），则将它们保持在传递的序列 &lt;code&gt;s&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="c3cc4a28dc3c7c50a7cedf645fccd862a77c3448" translate="yes" xml:space="preserve">
          <source>Keeps the items in the passed sequence if they fulfilled the predicate. Same as the &lt;code&gt;filter&lt;/code&gt; proc, but modifies the sequence directly.</source>
          <target state="translated">如果项目满足谓词，则将它们保持在传递的顺序中。与 &lt;code&gt;filter&lt;/code&gt; 相同，但是直接修改序列。</target>
        </trans-unit>
        <trans-unit id="8f39d6224e40fbd1b1d7fab87eb418cba3da74d2" translate="yes" xml:space="preserve">
          <source>Kill the process &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">终止进程 &lt;code&gt;p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd0b9402bb38009f565aff1f5e64a66bff29662b" translate="yes" xml:space="preserve">
          <source>Kill the process &lt;em&gt;p&lt;/em&gt;. On Posix OSes the procedure sends &lt;code&gt;SIGKILL&lt;/code&gt; to the process. On Windows &lt;code&gt;kill()&lt;/code&gt; is simply an alias for &lt;code&gt;terminate()&lt;/code&gt;.</source>
          <target state="translated">终止进程&lt;em&gt;p&lt;/em&gt;。在Posix OS上，该过程将 &lt;code&gt;SIGKILL&lt;/code&gt; 发送到该进程。在Windows &lt;code&gt;kill()&lt;/code&gt; 仅仅是一个别名 &lt;code&gt;terminate()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a5a5fafee83492d8b176cbbdd5bb0860a6fdbf28" translate="yes" xml:space="preserve">
          <source>Known limitations:</source>
          <target state="translated">已知的局限性。</target>
        </trans-unit>
        <trans-unit id="ce958a6e3d5b3cfc3e9d4db4ee8f257214086a1c" translate="yes" xml:space="preserve">
          <source>LF:</source>
          <target state="translated">LF:</target>
        </trans-unit>
        <trans-unit id="71e0d9df3f621a55340e5e059ae130eb41a5eb1c" translate="yes" xml:space="preserve">
          <source>Lambda lifting is implemented as part of the &lt;code&gt;transf&lt;/code&gt; pass. The &lt;code&gt;transf&lt;/code&gt; pass generates code to setup the environment and to pass it around. However, this pass does not change the types! So we have some kind of mismatch here; on the one hand the proc expression becomes an explicit tuple, on the other hand the tyProc(ccClosure) type is not changed. For C code generation it's also important the hidden formal param is &lt;code&gt;void*&lt;/code&gt; and not something more specialized. However the more specialized env type needs to passed to the backend somehow. We deal with this by modifying &lt;code&gt;s.ast[paramPos]&lt;/code&gt; to contain the formal hidden parameter, but not &lt;code&gt;s.typ&lt;/code&gt;!</source>
          <target state="translated">Lambda提升是 &lt;code&gt;transf&lt;/code&gt; Pass的一部分。该 &lt;code&gt;transf&lt;/code&gt; 过程生成的代码来设置环境，并通过它周围。但是，此通行证不会更改类型！所以我们这里有些不匹配；一方面proc表达式成为显式元组，另一方面tyProc（ccClosure）类型未更改。对于C代码生成，隐藏的形式参数是 &lt;code&gt;void*&lt;/code&gt; 而不是更专业的东西也很重要。但是，更专业的env类型需要以某种方式传递给后端。我们通过修改 &lt;code&gt;s.ast[paramPos]&lt;/code&gt; 使其包含正式的隐藏参数来解决此问题，而不是 &lt;code&gt;s.typ&lt;/code&gt; ！</target>
        </trans-unit>
        <trans-unit id="6f81dcaf384dc8f0c6782aafff539ab7cb63534e" translate="yes" xml:space="preserve">
          <source>Language Manual</source>
          <target state="translated">语文手册</target>
        </trans-unit>
        <trans-unit id="f1a81de77c30016ff417d2dc8525d90f0c658140" translate="yes" xml:space="preserve">
          <source>Large example</source>
          <target state="translated">大例子</target>
        </trans-unit>
        <trans-unit id="309493ddacc4fb8306467fc937e00c3cfc275435" translate="yes" xml:space="preserve">
          <source>Larger example</source>
          <target state="translated">更大的例子</target>
        </trans-unit>
        <trans-unit id="79ede199ddb018f4a0e7a1ccc650c19d1bc3a472" translate="yes" xml:space="preserve">
          <source>LastCallConv:</source>
          <target state="translated">LastCallConv:</target>
        </trans-unit>
        <trans-unit id="84d8b12a98abf233ce61b735b7f623dfa748d624" translate="yes" xml:space="preserve">
          <source>Later versions of Nim can be more precise about the borrowing rule with a syntax like:</source>
          <target state="translated">后期版本的Nim可以用类似这样的语法更精确地说明借用规则。</target>
        </trans-unit>
        <trans-unit id="b84ad3bb11b5b72ae8064b2e03ac6593bfc14c79" translate="yes" xml:space="preserve">
          <source>Later versions of the language will weaken the requirements for forward declarations.</source>
          <target state="translated">以后的语言版本会弱化对前向声明的要求。</target>
        </trans-unit>
        <trans-unit id="3b5648bcecc29c90aab376416ff190adac016122" translate="yes" xml:space="preserve">
          <source>LayeredIdTable:</source>
          <target state="translated">LayeredIdTable:</target>
        </trans-unit>
        <trans-unit id="b6e6ff1bcd7ed1a5e8f4c37ec0106d2e2587cae3" translate="yes" xml:space="preserve">
          <source>Lazy type resolution for untyped</source>
          <target state="translated">无类型的懒惰类型解析</target>
        </trans-unit>
        <trans-unit id="a4f7fe013eb75f3bd7abaac6e67f4376f5da9c25" translate="yes" xml:space="preserve">
          <source>Leaf nodes/Atoms</source>
          <target state="translated">叶节/原子</target>
        </trans-unit>
        <trans-unit id="97cc91dade46fa891f82c60b76ef4ad08ca98435" translate="yes" xml:space="preserve">
          <source>Leak</source>
          <target state="translated">Leak</target>
        </trans-unit>
        <trans-unit id="27d804f13dcec9190dd4f05d90510d5b42c28c5e" translate="yes" xml:space="preserve">
          <source>Leaked implementation detail. Do not use.</source>
          <target state="translated">泄露了实施细节。不要使用。</target>
        </trans-unit>
        <trans-unit id="c3e13a2a78be34be76ce3895da0a64f0d5f95cfd" translate="yes" xml:space="preserve">
          <source>Left-Aligns a string &lt;code&gt;s&lt;/code&gt; with &lt;code&gt;padding&lt;/code&gt;, so that it is of length &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">将字符串 &lt;code&gt;s&lt;/code&gt; 与 &lt;code&gt;padding&lt;/code&gt; 左对齐，使其长度为 &lt;code&gt;count&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6702a5291853b1308e7bd674d53f7e0975e6409" translate="yes" xml:space="preserve">
          <source>Left-Aligns a string &lt;em&gt;s&lt;/em&gt; with &lt;em&gt;padding&lt;/em&gt;, so that it is of length &lt;em&gt;count&lt;/em&gt;.</source>
          <target state="translated">将字符串&lt;em&gt;s&lt;/em&gt;与&lt;em&gt;padding&lt;/em&gt;左对齐，使其长度为&lt;em&gt;count&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="c7898d0c2421b5bc106fa03940f474e92657c7e9" translate="yes" xml:space="preserve">
          <source>Left-aligns a unicode string &lt;code&gt;s&lt;/code&gt; with &lt;code&gt;padding&lt;/code&gt;, so that it has a rune-length of &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">将Unicode字符串 &lt;code&gt;s&lt;/code&gt; 与 &lt;code&gt;padding&lt;/code&gt; 左对齐，使其具有 &lt;code&gt;count&lt;/code&gt; 的符文长度。</target>
        </trans-unit>
        <trans-unit id="581f4b8c009369b50e3d9ba5325d87417e6534b8" translate="yes" xml:space="preserve">
          <source>Left-rotate bits in a 16-bits value.</source>
          <target state="translated">在16位值中左旋位。</target>
        </trans-unit>
        <trans-unit id="d3409f80fea6038549fe1206956266f2e8a6fbb1" translate="yes" xml:space="preserve">
          <source>Left-rotate bits in a 32-bits value.</source>
          <target state="translated">在一个32位的值中左旋位。</target>
        </trans-unit>
        <trans-unit id="0aef55ce888f5b32fb20afe0a6d757edd1ce8821" translate="yes" xml:space="preserve">
          <source>Left-rotate bits in a 64-bits value.</source>
          <target state="translated">64位值中的左旋位。</target>
        </trans-unit>
        <trans-unit id="73e3851ee7450c9ad9c84aa2c1e0ca99eeb3856b" translate="yes" xml:space="preserve">
          <source>Left-rotate bits in a 8-bits value.</source>
          <target state="translated">8位值中的左旋位。</target>
        </trans-unit>
        <trans-unit id="3e63e88447c8379fbc91b3229c018b71ff7ef5dc" translate="yes" xml:space="preserve">
          <source>LegacyFeature.allowSemcheckedAstModification</source>
          <target state="translated">LegacyFeature.allowSemcheckedAstModification</target>
        </trans-unit>
        <trans-unit id="d34fb003360f79dc3503bb0f9c5e4cbd035488f5" translate="yes" xml:space="preserve">
          <source>LegacyFeature.checkUnsignedConversions</source>
          <target state="translated">LegacyFeature.checkUnsignedConversions</target>
        </trans-unit>
        <trans-unit id="9074155c1d8e374c60037b445d7d1d7c47f04a74" translate="yes" xml:space="preserve">
          <source>LegacyFeature:</source>
          <target state="translated">LegacyFeature:</target>
        </trans-unit>
        <trans-unit id="64abf2932d26373eca70a9286dff1a59ee0c9cf9" translate="yes" xml:space="preserve">
          <source>Length of ordinal slice. When x.b &amp;lt; x.a returns zero length.</source>
          <target state="translated">顺序切片的长度。当xb &amp;lt;xa返回零长度。</target>
        </trans-unit>
        <trans-unit id="1324320b92b87a5d97e0037c25426434c04566e6" translate="yes" xml:space="preserve">
          <source>Length of the last rune in &lt;code&gt;s[0..last]&lt;/code&gt;. Returns the rune and its length in bytes.</source>
          <target state="translated">&lt;code&gt;s[0..last]&lt;/code&gt; 最后一个符文的长度。返回符文及其长度（以字节为单位）。</target>
        </trans-unit>
        <trans-unit id="8bbb21663c852013305570c8611a710d132a2bb7" translate="yes" xml:space="preserve">
          <source>Lent type</source>
          <target state="translated">斋戒型</target>
        </trans-unit>
        <trans-unit id="bdb0abcb9526a6a4b05702c87855a674f79ae905" translate="yes" xml:space="preserve">
          <source>Let &lt;code&gt;A = range[a0..b0]&lt;/code&gt; be the argument's type, &lt;code&gt;F&lt;/code&gt; the formal parameter's type. Then an implicit conversion from &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;F&lt;/code&gt; exists if &lt;code&gt;a0 &amp;gt;= low(F) and b0 &amp;lt;= high(F)&lt;/code&gt; and both &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt; are signed integers or if both are unsigned integers.</source>
          <target state="translated">令 &lt;code&gt;A = range[a0..b0]&lt;/code&gt; 为参数的类型， &lt;code&gt;F&lt;/code&gt; 为形式参数的类型。然后，如果 &lt;code&gt;a0 &amp;gt;= low(F) and b0 &amp;lt;= high(F)&lt;/code&gt; 且 &lt;code&gt;T&lt;/code&gt; 和 &lt;code&gt;F&lt;/code&gt; 均为有符号整数，或者如果两者均为无符号整数，则存在从 &lt;code&gt;A&lt;/code&gt; 到 &lt;code&gt;F&lt;/code&gt; 的隐式转换。</target>
        </trans-unit>
        <trans-unit id="d4f0be1c4dec57baeea6969de04c107c4aa85088" translate="yes" xml:space="preserve">
          <source>Let &lt;code&gt;T&lt;/code&gt;'s be &lt;code&gt;p&lt;/code&gt;'s return type. NRVO applies for &lt;code&gt;T&lt;/code&gt; if &lt;code&gt;sizeof(T) &amp;gt;= N&lt;/code&gt; (where &lt;code&gt;N&lt;/code&gt; is implementation dependent), in other words, it applies for &quot;big&quot; structures.</source>
          <target state="translated">令 &lt;code&gt;T&lt;/code&gt; 为 &lt;code&gt;p&lt;/code&gt; 的返回类型。如果 &lt;code&gt;sizeof(T) &amp;gt;= N&lt;/code&gt; （其中 &lt;code&gt;N&lt;/code&gt; 取决于实现），则NRVO适用于 &lt;code&gt;T&lt;/code&gt; ，换句话说，它适用于&amp;ldquo;大&amp;rdquo;结构。</target>
        </trans-unit>
        <trans-unit id="c8e660f3844a83ae0dd775b972d1900cf764019b" translate="yes" xml:space="preserve">
          <source>Let &lt;code&gt;a0&lt;/code&gt;, &lt;code&gt;b0&lt;/code&gt; of type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">设 &lt;code&gt;a0&lt;/code&gt; ， &lt;code&gt;b0&lt;/code&gt; 为 &lt;code&gt;T&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="5a45b6d50e16e5d655e988c74590e71119a79c0c" translate="yes" xml:space="preserve">
          <source>Let &lt;code&gt;p&lt;/code&gt; the proc that is analysed for the correctness of the borrow operation.</source>
          <target state="translated">令 &lt;code&gt;p&lt;/code&gt; 为借位操作的正确性分析的proc。</target>
        </trans-unit>
        <trans-unit id="bc8c25bb6b7fcd5f126b9a316a3e3683f181bc9f" translate="yes" xml:space="preserve">
          <source>Let &lt;code&gt;source&lt;/code&gt; be one of:</source>
          <target state="translated">令 &lt;code&gt;source&lt;/code&gt; 为以下之一：</target>
        </trans-unit>
        <trans-unit id="08b05a7cc45a3cfbb0bd52f3553051c002b98ea9" translate="yes" xml:space="preserve">
          <source>Let section</source>
          <target state="translated">让部分</target>
        </trans-unit>
        <trans-unit id="62e49cdcca99feb8d9f8f37c1335ea60e6ab2bf6" translate="yes" xml:space="preserve">
          <source>Let statement</source>
          <target state="translated">让声明</target>
        </trans-unit>
        <trans-unit id="aa344992ab3c9cce0c812154c891a2082a0f43d5" translate="yes" xml:space="preserve">
          <source>Let us look at Nim's lexical elements in more detail: like other programming languages Nim consists of (string) literals, identifiers, keywords, comments, operators, and other punctuation marks.</source>
          <target state="translated">让我们更详细地看看Nim的词素:和其他编程语言一样,Nim由(字符串)字元、标识符、关键字、注释、运算符和其他标点符号组成。</target>
        </trans-unit>
        <trans-unit id="b472892cf2e180fd60510de81af55b7e2fd6e956" translate="yes" xml:space="preserve">
          <source>Let's return to the simple counting example:</source>
          <target state="translated">我们再来看看简单的计数例子。</target>
        </trans-unit>
        <trans-unit id="3714e6d8f0e24eacd7b52251a4d193e3636ffbc7" translate="yes" xml:space="preserve">
          <source>Let's start with an example: a procedure that finds the index of a character in a string.</source>
          <target state="translated">让我们从一个例子开始:一个在字符串中查找字符索引的过程。</target>
        </trans-unit>
        <trans-unit id="1be636c6149d23a6ac7030b7b471d95740b30580" translate="yes" xml:space="preserve">
          <source>Let's take a look at a procedure with a lot of interesting aspects to get a feel for how procedure calls are broken down.</source>
          <target state="translated">我们来看看一个有很多有趣的方面的程序,来感受一下程序调用是如何分解的。</target>
        </trans-unit>
        <trans-unit id="f090ebad1e9028f1098a5af4e5a797eb536bf181" translate="yes" xml:space="preserve">
          <source>Lets</source>
          <target state="translated">Lets</target>
        </trans-unit>
        <trans-unit id="235bf589f9ce53f4d181a8809fa8f58d997571a6" translate="yes" xml:space="preserve">
          <source>Letters:</source>
          <target state="translated">Letters:</target>
        </trans-unit>
        <trans-unit id="7c7f5d049fad2569721d446c4a811f9bd5da5393" translate="yes" xml:space="preserve">
          <source>Level</source>
          <target state="translated">Level</target>
        </trans-unit>
        <trans-unit id="faf588b9fbc0e6a941cbc2093766a1cce31a6349" translate="yes" xml:space="preserve">
          <source>Lexer:</source>
          <target state="translated">Lexer:</target>
        </trans-unit>
        <trans-unit id="0948974278e3b95cbbb246e9eab8bec6da78b254" translate="yes" xml:space="preserve">
          <source>Lexical Analysis</source>
          <target state="translated">词汇分析</target>
        </trans-unit>
        <trans-unit id="484504bca1de9d78289cf5ed0ff59489797fb25f" translate="yes" xml:space="preserve">
          <source>Lexical elements</source>
          <target state="translated">词汇要素</target>
        </trans-unit>
        <trans-unit id="fd70e598fcf927041c896f6dc4b87e917b2286bf" translate="yes" xml:space="preserve">
          <source>Library documentation</source>
          <target state="translated">图书馆文件</target>
        </trans-unit>
        <trans-unit id="850e532a72f1397362ed6c2e2c7768467301292f" translate="yes" xml:space="preserve">
          <source>Licence of the PCRE library</source>
          <target state="translated">PCRE图书馆的许可证</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">根据麻省理工学院许可证授权。</target>
        </trans-unit>
        <trans-unit id="1195c13905482de38eb8554ac2ef8181a370976e" translate="yes" xml:space="preserve">
          <source>Lifetime-tracking hooks</source>
          <target state="translated">终身跟踪钩子</target>
        </trans-unit>
        <trans-unit id="7babbd6a13612f2b75fad2536bf20e3a90be6f3a" translate="yes" xml:space="preserve">
          <source>Lifting Procs</source>
          <target state="translated">吊装程序</target>
        </trans-unit>
        <trans-unit id="f5579b6b851ab8d35945d73b583d54e4dd141c96" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#extractFilename,string&quot;&gt;extractFilename proc&lt;/a&gt;, but ignores trailing dir separator; aka: &lt;span id=&quot;basename_1&quot;&gt;baseName&lt;/span&gt; in some other languages.</source>
          <target state="translated">类似于&lt;a href=&quot;#extractFilename,string&quot;&gt;extractFilename proc&lt;/a&gt;，但忽略结尾的目录分隔符；aka：其他一些语言的&lt;span id=&quot;basename_1&quot;&gt;baseName&lt;/span&gt;。</target>
        </trans-unit>
        <trans-unit id="133720a88f4f0b2480df1a722653e8f80be2609a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;exportc&lt;/code&gt; or &lt;code&gt;importc&lt;/code&gt;, the &lt;code&gt;extern&lt;/code&gt; pragma affects name mangling. The string literal passed to &lt;code&gt;extern&lt;/code&gt; can be a format string:</source>
          <target state="translated">像 &lt;code&gt;exportc&lt;/code&gt; 或 &lt;code&gt;importc&lt;/code&gt; 一样， &lt;code&gt;extern&lt;/code&gt; 编译指示会影响名称修饰。传递给 &lt;code&gt;extern&lt;/code&gt; 的字符串文字可以是格式字符串：</target>
        </trans-unit>
        <trans-unit id="a89c659521de912108568798c30a4d3b9390dd11" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;return&lt;/code&gt;, but with &lt;code&gt;nnkDiscardStmt&lt;/code&gt; kind.</source>
          <target state="translated">像 &lt;code&gt;return&lt;/code&gt; 一样，但是具有 &lt;code&gt;nnkDiscardStmt&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="70b76be5ae3e05bda0dbd20d90abcc0ff40f9de9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;return&lt;/code&gt;, but with &lt;code&gt;nnkYieldStmt&lt;/code&gt; kind.</source>
          <target state="translated">像 &lt;code&gt;return&lt;/code&gt; 一样，但是具有 &lt;code&gt;nnkYieldStmt&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="b4cf638ae85ebba4736e92856cb8c627ef275c96" translate="yes" xml:space="preserve">
          <source>Like a plain &lt;code&gt;import&lt;/code&gt; statement but with &lt;code&gt;nnkIncludeStmt&lt;/code&gt;.</source>
          <target state="translated">就像一个简单的 &lt;code&gt;import&lt;/code&gt; 语句，但是带有 &lt;code&gt;nnkIncludeStmt&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="63a95e62d7c911dbac4f0639f9bb4cb823deae98" translate="yes" xml:space="preserve">
          <source>Like in many other programming languages, a &lt;code&gt;continue&lt;/code&gt; statement starts the next iteration immediately:</source>
          <target state="translated">像在许多其他编程语言中一样， &lt;code&gt;continue&lt;/code&gt; 语句立即开始下一次迭代：</target>
        </trans-unit>
        <trans-unit id="35a4297befbf3cbceda9715d4684f55b9e927a9e" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;if&lt;/code&gt; statement, but the root has the kind &lt;code&gt;nnkWhenStmt&lt;/code&gt;.</source>
          <target state="translated">类似于 &lt;code&gt;if&lt;/code&gt; 语句，但是根的类型为 &lt;code&gt;nnkWhenStmt&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ab04aac5a7e1d598d2f186753e388a3731d77143" translate="yes" xml:space="preserve">
          <source>Like tuples, objects are a means to pack different values together in a structured way. However, objects provide many features that tuples do not: They provide inheritance and information hiding. Because objects encapsulate data, the &lt;code&gt;T()&lt;/code&gt; object constructor should only be used internally and the programmer should provide a proc to initialize the object (this is called a &lt;em&gt;constructor&lt;/em&gt;).</source>
          <target state="translated">像元组一样，对象是一种以结构化方式将不同值打包在一起的方法。但是，对象提供了许多元组所没有的功能：它们提供了继承和信息隐藏。因为对象封装了数据，所以 &lt;code&gt;T()&lt;/code&gt; 对象构造函数只能在内部使用，程序员应提供proc来初始化对象（这称为&lt;em&gt;构造函数&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="07bc01629a98c42a6a26d28d793349cd9ddcb413" translate="yes" xml:space="preserve">
          <source>Likewise &lt;code&gt;T = ref T&lt;/code&gt; is an invalid type.</source>
          <target state="translated">同样， &lt;code&gt;T = ref T&lt;/code&gt; 是无效类型。</target>
        </trans-unit>
        <trans-unit id="012148b3c7c09fe4183a821ac0dfc3df94a4644a" translate="yes" xml:space="preserve">
          <source>Likewise for generic matches the most specialized generic type (that still matches) is preferred:</source>
          <target state="translated">同样,对于通用匹配,也是优先选择最专业的通用类型(仍然匹配)。</target>
        </trans-unit>
        <trans-unit id="9fe316ffb5c502363f1602369491e5771962db68" translate="yes" xml:space="preserve">
          <source>Likewise the following does not make sense as the name is &lt;code&gt;strutils&lt;/code&gt; already:</source>
          <target state="translated">同样，以下名称也没有意义，因为名称已经是 &lt;code&gt;strutils&lt;/code&gt; 了：</target>
        </trans-unit>
        <trans-unit id="7fd25d16a58c7cb1517958ac6667ebb3c8dd76e0" translate="yes" xml:space="preserve">
          <source>Likewise, the following does not make sense as the name is &lt;code&gt;strutils&lt;/code&gt; already:</source>
          <target state="translated">同样，以下名称也没有意义，因为该名称已经是 &lt;code&gt;strutils&lt;/code&gt; 了：</target>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="79cb6c70879ccadb6a188effd65c3c269014aee8" translate="yes" xml:space="preserve">
          <source>Limitations of the method call syntax</source>
          <target state="translated">方法调用语法的局限性</target>
        </trans-unit>
        <trans-unit id="7556b5753ea0ca8128d6f780d7fa036fc5b03486" translate="yes" xml:space="preserve">
          <source>Limitations/Bugs</source>
          <target state="translated">Limitations/Bugs</target>
        </trans-unit>
        <trans-unit id="23a0a4f9b2ce7f934e1a1f5332a6842a8be9b257" translate="yes" xml:space="preserve">
          <source>Limitations: If used for types that are imported from C or C++, sizeof should fallback to the &lt;code&gt;sizeof&lt;/code&gt; in the C compiler. The result isn't available for the Nim compiler and therefore can't be used inside of macros.</source>
          <target state="translated">限制：如果用于从C或C ++导入的类型，则sizeof应该回 &lt;code&gt;sizeof&lt;/code&gt; C编译器中的sizeof。结果不适用于Nim编译器，因此无法在宏内部使用。</target>
        </trans-unit>
        <trans-unit id="81e5623d345118d762dbee1a0e1de32ed5723969" translate="yes" xml:space="preserve">
          <source>Limitations: If used within nim VM context &lt;code&gt;sizeof&lt;/code&gt; will only work for simple types.</source>
          <target state="translated">限制：如果在nim VM上下文中使用， &lt;code&gt;sizeof&lt;/code&gt; 仅适用于简单类型。</target>
        </trans-unit>
        <trans-unit id="61beadd9dc48c52db141f5f8a21ecda841f7f1be" translate="yes" xml:space="preserve">
          <source>Limits the value &lt;code&gt;x&lt;/code&gt; within the interval [a, b].</source>
          <target state="translated">将值 &lt;code&gt;x&lt;/code&gt; 限制在间隔[a，b]之内。</target>
        </trans-unit>
        <trans-unit id="4c46adaafc40b789df2ecf20dd985f671faba467" translate="yes" xml:space="preserve">
          <source>Line exceeds the maximum length.</source>
          <target state="translated">线路超过最大长度。</target>
        </trans-unit>
        <trans-unit id="223cc1feb0fa894d9ee9937b64e7b5859c71bc96" translate="yes" xml:space="preserve">
          <source>Line where the symbol is located in the file. Lines start to count at &lt;strong&gt;1&lt;/strong&gt;.</source>
          <target state="translated">符号在文件中所在的行。行从&lt;strong&gt;1&lt;/strong&gt;开始计数。</target>
        </trans-unit>
        <trans-unit id="6975daf276430ee5b07e3f0247df76b80c98d27d" translate="yes" xml:space="preserve">
          <source>LineDir option</source>
          <target state="translated">LineDir选项</target>
        </trans-unit>
        <trans-unit id="268d8379173ac37e106048c36fff01d9c9b4910e" translate="yes" xml:space="preserve">
          <source>LineTooLong</source>
          <target state="translated">LineTooLong</target>
        </trans-unit>
        <trans-unit id="064387f46f31232c3427cd5f69fac7318fd9f966" translate="yes" xml:space="preserve">
          <source>LineTrace option</source>
          <target state="translated">线路追踪选项</target>
        </trans-unit>
        <trans-unit id="6cd840aca0be820c640e559e2530e3869e319939" translate="yes" xml:space="preserve">
          <source>Linear scan to find index of item &lt;code&gt;x&lt;/code&gt; or -1 if not found.</source>
          <target state="translated">线性扫描以找到项 &lt;code&gt;x&lt;/code&gt; 或-1的索引（如果找不到）。</target>
        </trans-unit>
        <trans-unit id="ac3679d78b17b02969cddb03c164e6e2d4dc3390" translate="yes" xml:space="preserve">
          <source>Lines should be no longer than 80 characters. Limiting the amount of information present on each line makes for more readable code - the reader has smaller chunks to process.</source>
          <target state="translated">行数不应超过80个字符。限制每行的信息量可以使代码更易读--读者有更小的块来处理。</target>
        </trans-unit>
        <trans-unit id="b0876c4bcec0ae3cbb0d666f7829f1981ec34562" translate="yes" xml:space="preserve">
          <source>Lines starting with &lt;code&gt;&amp;gt;&lt;/code&gt; indicate a command to be sent to the compiler and the lines following a command include checks for expected or forbidden output (&lt;code&gt;!&lt;/code&gt; for forbidden).</source>
          <target state="translated">以 &lt;code&gt;&amp;gt;&lt;/code&gt; 开头的行表示要发送到编译器的命令，而该命令后的行包括检查预期或禁止的输出（ &lt;code&gt;!&lt;/code&gt; 表示禁止）。</target>
        </trans-unit>
        <trans-unit id="d0517071aa376e797705058bbad4b658954b9930" translate="yes" xml:space="preserve">
          <source>Link</source>
          <target state="translated">Link</target>
        </trans-unit>
        <trans-unit id="1c3cb2684d19be6954dbbdc4f8e73df679e8e5d0" translate="yes" xml:space="preserve">
          <source>Link pragma</source>
          <target state="translated">链接原则</target>
        </trans-unit>
        <trans-unit id="9da74ab1a4b986bea87990a9a620e399e5636c76" translate="yes" xml:space="preserve">
          <source>Linking phase.</source>
          <target state="translated">链接阶段。</target>
        </trans-unit>
        <trans-unit id="8796e69abe940d498e760a9ceddadf988b762de2" translate="yes" xml:space="preserve">
          <source>List all the available NimScript tasks along with their docstrings.</source>
          <target state="translated">列出所有可用的NimScript任务及其docstrings。</target>
        </trans-unit>
        <trans-unit id="29298813156f944560ccc7706430702f6f4ee582" translate="yes" xml:space="preserve">
          <source>List comprehension, returns a sequence. &lt;em&gt;comp&lt;/em&gt; is the actual list comprehension, for example &lt;code&gt;x | (x &amp;lt;- 1..10, x mod 2 == 0)&lt;/code&gt;. &lt;em&gt;typ&lt;/em&gt; is the type that will be stored inside the result seq.</source>
          <target state="translated">列表理解，返回一个序列。&lt;em&gt;comp&lt;/em&gt;是实际的列表理解，例如 &lt;code&gt;x | (x &amp;lt;- 1..10, x mod 2 == 0)&lt;/code&gt; 。&lt;em&gt;typ&lt;/em&gt;是将存储在结果序列中的类型。</target>
        </trans-unit>
        <trans-unit id="f8243f1d71ba9600f36e4fd5c7ce82f383a50045" translate="yes" xml:space="preserve">
          <source>List of hints</source>
          <target state="translated">提示列表</target>
        </trans-unit>
        <trans-unit id="5516fee04290d8fb240eb1035f9649b7af9c46bc" translate="yes" xml:space="preserve">
          <source>List of warnings</source>
          <target state="translated">警告清单</target>
        </trans-unit>
        <trans-unit id="da7ca89372708dc7eaa34ef61b0cef5ae9fd5514" translate="yes" xml:space="preserve">
          <source>Listen to the given port and address.</source>
          <target state="translated">侦听给定的端口和地址。</target>
        </trans-unit>
        <trans-unit id="57c9502a7d7d48fd4a86b45fefb2b163491c3ae1" translate="yes" xml:space="preserve">
          <source>Lists</source>
          <target state="translated">Lists</target>
        </trans-unit>
        <trans-unit id="104e72166267b2e14189f97dfc051685f78e0501" translate="yes" xml:space="preserve">
          <source>Lists all files in &lt;code&gt;dir&lt;/code&gt;. If &lt;code&gt;dir&lt;/code&gt; is &lt;code&gt;&quot;&quot;&lt;/code&gt;, uses the current working directory.</source>
          <target state="translated">列出 &lt;code&gt;dir&lt;/code&gt; 中的所有文件。如果 &lt;code&gt;dir&lt;/code&gt; 为 &lt;code&gt;&quot;&quot;&lt;/code&gt; ，则使用当前工作目录。</target>
        </trans-unit>
        <trans-unit id="1ab878ae07a9cde029575d5b2c8f1f1831aa46a7" translate="yes" xml:space="preserve">
          <source>Lists all files in &lt;code&gt;dir&lt;/code&gt;. If &lt;code&gt;dir&lt;/code&gt; is &lt;code&gt;&quot;&quot;&lt;/code&gt;, uses the current working directory. If &lt;code&gt;async&lt;/code&gt; is true, this function will return immediately and it will be your job to call asyncio's &lt;code&gt;poll&lt;/code&gt; to progress this operation.</source>
          <target state="translated">列出 &lt;code&gt;dir&lt;/code&gt; 中的所有文件。如果 &lt;code&gt;dir&lt;/code&gt; 为 &lt;code&gt;&quot;&quot;&lt;/code&gt; ，则使用当前工作目录。如果 &lt;code&gt;async&lt;/code&gt; 为true，则此函数将立即返回，调用asyncio的 &lt;code&gt;poll&lt;/code&gt; 以进行此操作将是您的工作。</target>
        </trans-unit>
        <trans-unit id="eed8f42ab709c572e2f6ef3e5f70d4c90c506594" translate="yes" xml:space="preserve">
          <source>Lists all the files (non-recursively) in the directory &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">列出目录 &lt;code&gt;dir&lt;/code&gt; 中的所有文件（非递归）。</target>
        </trans-unit>
        <trans-unit id="83dc5d3731a7029453536affac1b0c536f706ef7" translate="yes" xml:space="preserve">
          <source>Lists all the subdirectories (non-recursively) in the directory &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">列出目录 &lt;code&gt;dir&lt;/code&gt; 中的所有子目录（非递归）。</target>
        </trans-unit>
        <trans-unit id="236263cf5e9fb34d2dba2a5c051ef5dc5349c21d" translate="yes" xml:space="preserve">
          <source>Literal &lt;code&gt;&quot;&lt;/code&gt;, etc.</source>
          <target state="translated">文字 &lt;code&gt;&quot;&lt;/code&gt; 等</target>
        </trans-unit>
        <trans-unit id="b0e13df3237422a975bbec14b9ac839dee36c914" translate="yes" xml:space="preserve">
          <source>Literal match: &lt;code&gt;a&lt;/code&gt; is an integer literal of value &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; is a signed or unsigned integer type and &lt;code&gt;v&lt;/code&gt; is in &lt;code&gt;f&lt;/code&gt;'s range. Or: &lt;code&gt;a&lt;/code&gt; is a floating point literal of value &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; is a floating point type and &lt;code&gt;v&lt;/code&gt; is in &lt;code&gt;f&lt;/code&gt;'s range.</source>
          <target state="translated">文字匹配： &lt;code&gt;a&lt;/code&gt; 是值 &lt;code&gt;v&lt;/code&gt; 的整数文字，而 &lt;code&gt;f&lt;/code&gt; 是有符号或无符号整数类型，并且 &lt;code&gt;v&lt;/code&gt; 在 &lt;code&gt;f&lt;/code&gt; 的范围内。或者： &lt;code&gt;a&lt;/code&gt; 是值的浮点字面 &lt;code&gt;v&lt;/code&gt; 和 &lt;code&gt;f&lt;/code&gt; 是一个浮点型和 &lt;code&gt;v&lt;/code&gt; 是在 &lt;code&gt;f&lt;/code&gt; 的范围。</target>
        </trans-unit>
        <trans-unit id="cfadb3413d7c66d88632e42a7748ea222f6db9de" translate="yes" xml:space="preserve">
          <source>Literal match: &lt;code&gt;a&lt;/code&gt; is an integer literal of value &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; is a signed or unsigned integer type and &lt;code&gt;v&lt;/code&gt; is in &lt;code&gt;f&lt;/code&gt;'s range. Or: &lt;code&gt;a&lt;/code&gt; is a floating-point literal of value &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; is a floating-point type and &lt;code&gt;v&lt;/code&gt; is in &lt;code&gt;f&lt;/code&gt;'s range.</source>
          <target state="translated">文字匹配： &lt;code&gt;a&lt;/code&gt; 是值 &lt;code&gt;v&lt;/code&gt; 的整数文字，而 &lt;code&gt;f&lt;/code&gt; 是有符号或无符号整数类型，并且 &lt;code&gt;v&lt;/code&gt; 在 &lt;code&gt;f&lt;/code&gt; 的范围内。或者： &lt;code&gt;a&lt;/code&gt; 是值 &lt;code&gt;v&lt;/code&gt; 的浮点文字，而 &lt;code&gt;f&lt;/code&gt; 是浮点类型，并且 &lt;code&gt;v&lt;/code&gt; 在 &lt;code&gt;f&lt;/code&gt; 的范围内。</target>
        </trans-unit>
        <trans-unit id="b9727a86e89a8cbd82800b60294dabca16499a86" translate="yes" xml:space="preserve">
          <source>Literals are bounds checked so that they fit the datatype. Non base-10 literals are used mainly for flags and bit pattern representations, therefore bounds checking is done on bit width, not value range. If the literal fits in the bit width of the datatype, it is accepted. Hence: 0b10000000'u8 == 0x80'u8 == 128, but, 0b10000000'i8 == 0x80'i8 == -1 instead of causing an overflow error.</source>
          <target state="translated">字符是经过边界检查的,以使它们符合数据类型。非基数为10的字元主要用于标志和位模式表示,因此边界检查是在位宽而非值范围内进行的。如果字符符合数据类型的位宽,它就被接受。因此,在数据类型的位宽中,它是被接受的。0b10000000'u8 ==0x80'u8 ==128,但是,0b10000000'i8 ==0x80'i8 ==-1,而不会造成溢出错误。</target>
        </trans-unit>
        <trans-unit id="a858a797df62e4ae00e3888485b1cc03a888e873" translate="yes" xml:space="preserve">
          <source>Literals are bounds checked so that they fit the datatype. Non-base-10 literals are used mainly for flags and bit pattern representations, therefore bounds checking is done on bit width, not value range. If the literal fits in the bit width of the datatype, it is accepted. Hence: 0b10000000'u8 == 0x80'u8 == 128, but, 0b10000000'i8 == 0x80'i8 == -1 instead of causing an overflow error.</source>
          <target state="translated">字符是经过边界检查的,以便它们适合数据类型。非base-10的字元主要用于标志和位模式表示,因此边界检查是在位宽而不是值范围内进行的。如果字元符合数据类型的位宽,它就被接受。因此,在数据类型的位宽中,它是被接受的。0b10000000'u8 ==0x80'u8 ==128,但是,0b10000000'i8 ==0x80'i8 ==-1 而不是导致溢出错误.</target>
        </trans-unit>
        <trans-unit id="8b2a6eba528cf2e8ab33fb4a2bec0b163b834789" translate="yes" xml:space="preserve">
          <source>Literals are compile-time computable.</source>
          <target state="translated">字符是可以在编译时计算的。</target>
        </trans-unit>
        <trans-unit id="9afb797d92f75eb6b6866d7d92c9cfae10f0de20" translate="yes" xml:space="preserve">
          <source>Load all &lt;code&gt;{.dynlib.}&lt;/code&gt; libraries with the &lt;code&gt;RTLD_GLOBAL&lt;/code&gt; flag on Posix systems to resolve symbols in subsequently loaded libraries.</source>
          <target state="translated">在Posix系统上使用 &lt;code&gt;RTLD_GLOBAL&lt;/code&gt; 标志加载所有 &lt;code&gt;{.dynlib.}&lt;/code&gt; 库，以解析随后加载的库中的符号。</target>
        </trans-unit>
        <trans-unit id="de51bd63110c92754499c41c1b9fc0a1062026bc" translate="yes" xml:space="preserve">
          <source>Load the specified configuration file into a new Config instance.</source>
          <target state="translated">将指定的配置文件加载到一个新的Config实例中。</target>
        </trans-unit>
        <trans-unit id="cbdf201543588ac78ea72c7f1747c51bd06dafcf" translate="yes" xml:space="preserve">
          <source>Load the specified configuration from stream into a new Config instance. &lt;code&gt;filename&lt;/code&gt; parameter is only used for nicer error messages.</source>
          <target state="translated">从流中将指定的配置加载到新的Config实例中。 &lt;code&gt;filename&lt;/code&gt; 参数仅用于更好的错误消息。</target>
        </trans-unit>
        <trans-unit id="1a9e1513745115068212c830b486292757f91900" translate="yes" xml:space="preserve">
          <source>Load the specified configuration from stream into a new Config instance. &lt;em&gt;filename&lt;/em&gt; parameter is only used for nicer error messages.</source>
          <target state="translated">从流中将指定的配置加载到新的Config实例中。&lt;em&gt;filename&lt;/em&gt;参数仅用于更好的错误消息。</target>
        </trans-unit>
        <trans-unit id="a139e4bbf5ca5504f1d17d1d98e927f4b59c9a47" translate="yes" xml:space="preserve">
          <source>Loading a simple C function</source>
          <target state="translated">加载一个简单的C函数</target>
        </trans-unit>
        <trans-unit id="85c9cf917135124aec604694dfda1bae2acf430a" translate="yes" xml:space="preserve">
          <source>Loads &lt;code&gt;data&lt;/code&gt; from the stream &lt;code&gt;s&lt;/code&gt;. Raises &lt;code&gt;IOError&lt;/code&gt; in case of an error.</source>
          <target state="translated">从流 &lt;code&gt;s&lt;/code&gt; 加载 &lt;code&gt;data&lt;/code&gt; 。出现错误时引发 &lt;code&gt;IOError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d468cd435069219754afbbe7d097d97a919d76a4" translate="yes" xml:space="preserve">
          <source>Loads and parses HTML from file specified by &lt;code&gt;path&lt;/code&gt;, and returns a &lt;code&gt;XmlNode&lt;/code&gt;. All parsing errors are ignored.</source>
          <target state="translated">从 &lt;code&gt;path&lt;/code&gt; 指定的文件加载并解析HTML ，并返回 &lt;code&gt;XmlNode&lt;/code&gt; 。所有解析错误都将被忽略。</target>
        </trans-unit>
        <trans-unit id="b860e17e53daf18f4b68114fe289f74c0083bbee" translate="yes" xml:space="preserve">
          <source>Loads and parses HTML from file specified by &lt;code&gt;path&lt;/code&gt;, and returns a &lt;code&gt;XmlNode&lt;/code&gt;. Every occurred parsing error is added to the &lt;code&gt;errors&lt;/code&gt; sequence.</source>
          <target state="translated">从 &lt;code&gt;path&lt;/code&gt; 指定的文件加载并解析HTML ，并返回 &lt;code&gt;XmlNode&lt;/code&gt; 。每个发生的解析错误都会添加到 &lt;code&gt;errors&lt;/code&gt; 序列中。</target>
        </trans-unit>
        <trans-unit id="e13175d1bc7af2e5d6755aeb721e7338069be90d" translate="yes" xml:space="preserve">
          <source>Loads and parses HTML from file specified by &lt;code&gt;path&lt;/code&gt;, and returns a &lt;code&gt;XmlNode&lt;/code&gt;. Every occurred parsing error is added to the &lt;em&gt;errors&lt;/em&gt; sequence.</source>
          <target state="translated">从 &lt;code&gt;path&lt;/code&gt; 指定的文件加载并解析HTML ，并返回 &lt;code&gt;XmlNode&lt;/code&gt; 。每个发生的解析错误都会添加到&lt;em&gt;错误&lt;/em&gt;序列中。</target>
        </trans-unit>
        <trans-unit id="4296f849be147d08fdb9d341d2ab77c8da850fd7" translate="yes" xml:space="preserve">
          <source>Loads and parses XML from a file specified by &lt;code&gt;path&lt;/code&gt;, and returns a &lt;code&gt;PDocument&lt;/code&gt;</source>
          <target state="translated">从 &lt;code&gt;path&lt;/code&gt; 指定的文件中加载和解析XML ，然后返回 &lt;code&gt;PDocument&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="26e2e2e83d566103f2e7459a72bbf8e836f49d66" translate="yes" xml:space="preserve">
          <source>Loads and parses XML from a stream specified by &lt;code&gt;stream&lt;/code&gt;, and returns a &lt;code&gt;PDocument&lt;/code&gt;</source>
          <target state="translated">从stream指定的 &lt;code&gt;stream&lt;/code&gt; 加载和解析XML ，并返回 &lt;code&gt;PDocument&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="045d13349b264d2eba76a0804c08fa59e6a17cff" translate="yes" xml:space="preserve">
          <source>Loads and parses XML from a string specified by &lt;code&gt;xml&lt;/code&gt;, and returns a &lt;code&gt;PDocument&lt;/code&gt;</source>
          <target state="translated">从 &lt;code&gt;xml&lt;/code&gt; 指定的字符串中加载和解析XML ，然后返回 &lt;code&gt;PDocument&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1f9e01e6b541364451c7b06cd42daa257c56a015" translate="yes" xml:space="preserve">
          <source>Loads and parses XML from file specified by &lt;code&gt;path&lt;/code&gt;, and returns a &lt;code&gt;XmlNode&lt;/code&gt;. All parsing errors are turned into an &lt;code&gt;XmlError&lt;/code&gt; exception.</source>
          <target state="translated">从 &lt;code&gt;path&lt;/code&gt; 指定的文件加载并解析XML ，然后返回 &lt;code&gt;XmlNode&lt;/code&gt; 。所有解析错误都将变成 &lt;code&gt;XmlError&lt;/code&gt; 异常。</target>
        </trans-unit>
        <trans-unit id="58715b2c04bf6ee07528232196803acf3ddcf9e8" translate="yes" xml:space="preserve">
          <source>Loads and parses XML from file specified by &lt;code&gt;path&lt;/code&gt;, and returns a &lt;code&gt;XmlNode&lt;/code&gt;. Every occurred parsing error is added to the &lt;code&gt;errors&lt;/code&gt; sequence.</source>
          <target state="translated">从 &lt;code&gt;path&lt;/code&gt; 指定的文件加载并解析XML ，然后返回 &lt;code&gt;XmlNode&lt;/code&gt; 。每个发生的解析错误都会添加到 &lt;code&gt;errors&lt;/code&gt; 序列中。</target>
        </trans-unit>
        <trans-unit id="dc99d54d9990e3c134420be3918e88f28531e630" translate="yes" xml:space="preserve">
          <source>Local</source>
          <target state="translated">Local</target>
        </trans-unit>
        <trans-unit id="9cc986c68f1431e010e3565660f79db5b295d31d" translate="yes" xml:space="preserve">
          <source>LocalPassc pragma</source>
          <target state="translated">LocalPassc pragma</target>
        </trans-unit>
        <trans-unit id="d7db461111deca6d0f8236779f0bb1263494a8e8" translate="yes" xml:space="preserve">
          <source>Lock levels</source>
          <target state="translated">锁定级别</target>
        </trans-unit>
        <trans-unit id="2d3eec8b8c6c462f1179b7a5687732b44d7f8dfc" translate="yes" xml:space="preserve">
          <source>Lock levels are used to enforce a global locking order in order to detect potential deadlocks during semantic analysis. A lock level is an constant integer in the range 0..1_000. Lock level 0 means that no lock is acquired at all.</source>
          <target state="translated">锁定级别用于强制执行全局锁定顺序,以便在语义分析期间检测潜在的死锁。锁定级别是一个范围为0...1_000的常数。锁定级别0意味着根本没有获取任何锁。</target>
        </trans-unit>
        <trans-unit id="98f1e767de995c2aa21fe38394145cda4db0f95d" translate="yes" xml:space="preserve">
          <source>Lock levels are used to enforce a global locking order in order to prevent deadlocks at compile-time. A lock level is an constant integer in the range 0..1_000. Lock level 0 means that no lock is acquired at all.</source>
          <target state="translated">锁定级别用于强制执行全局锁定顺序,以防止在编译时出现死锁。锁定级别是一个范围为0...1_000的常数。锁定级别为0意味着根本不获取任何锁。</target>
        </trans-unit>
        <trans-unit id="626c2de96fe392dcef18ddcb348cde44efd3b55a" translate="yes" xml:space="preserve">
          <source>Locks all memory for the running process to prevent swapping.</source>
          <target state="translated">锁定正在运行的进程的所有内存,防止交换。</target>
        </trans-unit>
        <trans-unit id="c1664fac300e5a13655e2a24509e2c414ac72c81" translate="yes" xml:space="preserve">
          <source>Locks and routines can be annotated with &lt;span id=&quot;lock-levels_1&quot;&gt;lock levels&lt;/span&gt; to allow potential deadlocks to be detected during semantic analysis.</source>
          <target state="translated">可以使用&lt;span id=&quot;lock-levels_1&quot;&gt;锁级别&lt;/span&gt;对锁和例程进行注释，以允许在语义分析期间检测到潜在的死锁。</target>
        </trans-unit>
        <trans-unit id="a026b72d4824601afcdf130fca670d0c8d13f97d" translate="yes" xml:space="preserve">
          <source>Locks and routines can be annotated with &lt;span id=&quot;lock-levels_1&quot;&gt;lock levels&lt;/span&gt; to prevent deadlocks at compile time.</source>
          <target state="translated">可以使用&lt;span id=&quot;lock-levels_1&quot;&gt;锁级别&lt;/span&gt;对锁和例程进行注释，以防止在编译时出现死锁。</target>
        </trans-unit>
        <trans-unit id="76a561aa63e506df08050f70920f4856cec459b0" translate="yes" xml:space="preserve">
          <source>Locks pages starting from a1 for a1 bytes and prevent them from being swapped.</source>
          <target state="translated">锁定从a1开始的页面,锁定a1个字节,防止它们被交换。</target>
        </trans-unit>
        <trans-unit id="33862b85b4c25c686ef40724480cd8ebcc8f0249" translate="yes" xml:space="preserve">
          <source>Log level name</source>
          <target state="translated">日志级别名称</target>
        </trans-unit>
        <trans-unit id="31c4c654289defdcf729f49108549a5e18d08f81" translate="yes" xml:space="preserve">
          <source>Log messages are prefixed with format strings. These strings contain placeholders for variables, such as &lt;code&gt;$time&lt;/code&gt;, that are replaced with their corresponding values, such as the current time, before they are prepended to a log message. Characters that are not part of variables are unaffected.</source>
          <target state="translated">日志消息以格式字符串为前缀。这些字符串包含变量（例如 &lt;code&gt;$time&lt;/code&gt; 占位符，在占位符被添加到日志消息之前，该占位符被其对应的值（例如当前时间）替换。不属于变量的字符不受影响。</target>
        </trans-unit>
        <trans-unit id="8e5c380132554658df14cbe018d3eebcce0b49de" translate="yes" xml:space="preserve">
          <source>Logs a debug message to all registered handlers.</source>
          <target state="translated">给所有注册的处理程序记录一条调试信息。</target>
        </trans-unit>
        <trans-unit id="4c7f919536de93b8ad43c3247437839e50803cac" translate="yes" xml:space="preserve">
          <source>Logs a fatal error message to all registered handlers.</source>
          <target state="translated">向所有注册的处理程序记录一个致命的错误信息。</target>
        </trans-unit>
        <trans-unit id="469b3cbccb535fe83e84650fa180e1bf49b43063" translate="yes" xml:space="preserve">
          <source>Logs a message at the specified level to all registered handlers.</source>
          <target state="translated">将指定级别的消息记录到所有注册的处理程序。</target>
        </trans-unit>
        <trans-unit id="cfa1e64c89de815a0318f1bbbf71a480294f882e" translate="yes" xml:space="preserve">
          <source>Logs a message at the specified level using the given &lt;a href=&quot;#FileLogger&quot;&gt;FileLogger&lt;/a&gt; only.</source>
          <target state="translated">仅使用给定的&lt;a href=&quot;#FileLogger&quot;&gt;FileLogger&lt;/a&gt;在指定级别记录消息。</target>
        </trans-unit>
        <trans-unit id="74e25fc4a87c5a8ede8b136f46f111fb645ee708" translate="yes" xml:space="preserve">
          <source>Logs a message at the specified level using the given &lt;a href=&quot;#RollingFileLogger&quot;&gt;RollingFileLogger&lt;/a&gt; only.</source>
          <target state="translated">仅使用给定的&lt;a href=&quot;#RollingFileLogger&quot;&gt;RollingFileLogger&lt;/a&gt;在指定级别记录消息。</target>
        </trans-unit>
        <trans-unit id="5dfc8bdbe4c51442cb3331391bf133dae2303823" translate="yes" xml:space="preserve">
          <source>Logs a message to all registered handlers at the given level.</source>
          <target state="translated">将消息记录到给定级别的所有注册处理程序。</target>
        </trans-unit>
        <trans-unit id="57d8e0636873737f16f4b7cc780f237140e75837" translate="yes" xml:space="preserve">
          <source>Logs a warning message to all registered handlers.</source>
          <target state="translated">向所有注册的处理程序记录一条警告信息。</target>
        </trans-unit>
        <trans-unit id="9317adaad7621328486bdf8c1ddb1b9fc41f1e55" translate="yes" xml:space="preserve">
          <source>Logs an error message to all registered handlers.</source>
          <target state="translated">向所有注册的处理程序记录错误信息。</target>
        </trans-unit>
        <trans-unit id="4b60a8dc51101a47288a87fdd0bfadc5f86cbf8e" translate="yes" xml:space="preserve">
          <source>Logs an info message to all registered handlers.</source>
          <target state="translated">向所有注册的处理者记录信息消息。</target>
        </trans-unit>
        <trans-unit id="d163792610c410f93f355f367ec68f39a5ba2888" translate="yes" xml:space="preserve">
          <source>Logs an notice message to all registered handlers.</source>
          <target state="translated">向所有注册的处理者记录通知信息。</target>
        </trans-unit>
        <trans-unit id="505c1129f621e83ae4c3cc60f5a4430ac1132a24" translate="yes" xml:space="preserve">
          <source>Logs an notice to all registered handlers.</source>
          <target state="translated">向所有注册的处理者记录一个通知。</target>
        </trans-unit>
        <trans-unit id="968b9d0e2a2ece8aa91b1cc23a28091c21b0a82f" translate="yes" xml:space="preserve">
          <source>Logs to a file using &lt;code&gt;logger&lt;/code&gt; only.</source>
          <target state="translated">仅使用 &lt;code&gt;logger&lt;/code&gt; 记录到文件。</target>
        </trans-unit>
        <trans-unit id="1a9ec4044346457b95a04e72c6feb17b0ce890ff" translate="yes" xml:space="preserve">
          <source>Logs to a file using rolling &lt;code&gt;logger&lt;/code&gt; only.</source>
          <target state="translated">仅使用滚动 &lt;code&gt;logger&lt;/code&gt; 记录到文件。</target>
        </trans-unit>
        <trans-unit id="50128c469a86270a2da91f8b00b431458f68392b" translate="yes" xml:space="preserve">
          <source>Logs to the console using &lt;code&gt;logger&lt;/code&gt; only.</source>
          <target state="translated">仅使用 &lt;code&gt;logger&lt;/code&gt; 登录到控制台。</target>
        </trans-unit>
        <trans-unit id="1f06fb3fd56364ec13715b29520bb2844d19c750" translate="yes" xml:space="preserve">
          <source>Logs to the console with the given &lt;a href=&quot;#ConsoleLogger&quot;&gt;ConsoleLogger&lt;/a&gt; only.</source>
          <target state="translated">仅使用给定的&lt;a href=&quot;#ConsoleLogger&quot;&gt;ConsoleLogger&lt;/a&gt;登录到控制台。</target>
        </trans-unit>
        <trans-unit id="de84a481681ade51a9e7c6fc6753c8daa39ce596" translate="yes" xml:space="preserve">
          <source>Long options: &lt;code&gt;--foo:bar&lt;/code&gt;, &lt;code&gt;--foo=bar&lt;/code&gt;, &lt;code&gt;--foo&lt;/code&gt;</source>
          <target state="translated">长选项：-- &lt;code&gt;--foo:bar&lt;/code&gt; ，-- &lt;code&gt;--foo=bar&lt;/code&gt; ，-- &lt;code&gt;--foo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0957862e5908bda0c0e3aed344445a129129b213" translate="yes" xml:space="preserve">
          <source>Look at the module &lt;a href=&quot;distros&quot;&gt;distros&lt;/a&gt; for some support of the OS's native package managers.</source>
          <target state="translated">查看模块&lt;a href=&quot;distros&quot;&gt;发行版&lt;/a&gt;，以获取对操作系统的本机软件包管理器的某些支持。</target>
        </trans-unit>
        <trans-unit id="e8ee53aa3b26fe91c5819ca15b134a56f645ac1e" translate="yes" xml:space="preserve">
          <source>Lookup rules for template parameters</source>
          <target state="translated">模板参数的查询规则</target>
        </trans-unit>
        <trans-unit id="ce44bf0dea95522d8571be7ae1c1bf020f1c61c5" translate="yes" xml:space="preserve">
          <source>Loopback address.</source>
          <target state="translated">回环地址。</target>
        </trans-unit>
        <trans-unit id="ed3b229a877674fc9085bfff9aad369487b7967d" translate="yes" xml:space="preserve">
          <source>Lossless &lt;span id=&quot;automatic-type-conversion_1&quot;&gt;Automatic type conversion&lt;/span&gt; is performed in expressions where different kinds of integer types are used. However, if the type conversion would cause loss of information, the &lt;span id=&quot;eoutofrange_1&quot;&gt;EOutOfRange&lt;/span&gt; exception is raised (if the error cannot be detected at compile time).</source>
          <target state="translated">在使用不同类型的整数类型的表达式中执行无损&lt;span id=&quot;automatic-type-conversion_1&quot;&gt;自动类型转换&lt;/span&gt;。但是，如果类型转换将导致信息丢失，则会引发&lt;span id=&quot;eoutofrange_1&quot;&gt;EOutOfRange&lt;/span&gt;异常（如果在编译时无法检测到错误）。</target>
        </trans-unit>
        <trans-unit id="5ca6f7c7b2f3fcead3d5cf315885d15734fca9dc" translate="yes" xml:space="preserve">
          <source>Lots of other small issues...</source>
          <target state="translated">其他很多小问题...</target>
        </trans-unit>
        <trans-unit id="aa2f8ccecdf2dbecd47e8cd4e048b6fc7f99bf4f" translate="yes" xml:space="preserve">
          <source>Low level proc that reads data into a string &lt;code&gt;buffer&lt;/code&gt; at &lt;code&gt;slice&lt;/code&gt;.</source>
          <target state="translated">低级proc，它将数据读取到 &lt;code&gt;slice&lt;/code&gt; 的字符串 &lt;code&gt;buffer&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="af722d53c5b6e574410e8f2dd2d6364389b6e03b" translate="yes" xml:space="preserve">
          <source>Low level proc that reads data into an untyped &lt;code&gt;buffer&lt;/code&gt; of &lt;code&gt;bufLen&lt;/code&gt; size without moving stream position.</source>
          <target state="translated">低级proc，它在不移动流位置的情况下，将数据读取到 &lt;code&gt;bufLen&lt;/code&gt; 大小的无类型 &lt;code&gt;buffer&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="d8fa99d3c67a5ee794c965ec46d69cb879851c0a" translate="yes" xml:space="preserve">
          <source>Low level proc that reads data into an untyped &lt;code&gt;buffer&lt;/code&gt; of &lt;code&gt;bufLen&lt;/code&gt; size.</source>
          <target state="translated">将数据读入 &lt;code&gt;bufLen&lt;/code&gt; 大小的无类型 &lt;code&gt;buffer&lt;/code&gt; 的低级proc 。</target>
        </trans-unit>
        <trans-unit id="c9cc70167dad54f443c772c8caab8d52d90e1ba8" translate="yes" xml:space="preserve">
          <source>Low level proc that writes an untyped &lt;code&gt;buffer&lt;/code&gt; of &lt;code&gt;bufLen&lt;/code&gt; size to the stream &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">低电平PROC写入非类型化的 &lt;code&gt;buffer&lt;/code&gt; 的 &lt;code&gt;bufLen&lt;/code&gt; 大小到流 &lt;code&gt;s&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="34d23c3d8e25fbb10696543f3025033e97764292" translate="yes" xml:space="preserve">
          <source>Low level proc. Undocumented.</source>
          <target state="translated">低级程序。没有记录。</target>
        </trans-unit>
        <trans-unit id="0ff7d11f87283cccf06948b3629f7172fac1347a" translate="yes" xml:space="preserve">
          <source>Low-level streams for high performance.</source>
          <target state="translated">低级流的高性能。</target>
        </trans-unit>
        <trans-unit id="8e2cb6d07d1da16689e1ad2e443c4f93b6383883" translate="yes" xml:space="preserve">
          <source>Lrz:</source>
          <target state="translated">Lrz:</target>
        </trans-unit>
        <trans-unit id="4b71f8a7d7395e02404a8c0f25df4b6d61905b7e" translate="yes" xml:space="preserve">
          <source>MAYBE-cases:</source>
          <target state="translated">MAYBE-cases:</target>
        </trans-unit>
        <trans-unit id="ad6379695d4f7d22a1edb379af92c2be6a1f72a6" translate="yes" xml:space="preserve">
          <source>MD5 checksum of a string, obtained with &lt;a href=&quot;#toMD5,string&quot;&gt;toMD5 proc&lt;/a&gt;.</source>
          <target state="translated">字符串的MD5校验和，使用&lt;a href=&quot;#toMD5,string&quot;&gt;toMD5 proc&lt;/a&gt;获得。</target>
        </trans-unit>
        <trans-unit id="b8a68b12b71fd0a8e62d67043581d497f4e0c387" translate="yes" xml:space="preserve">
          <source>Macro declaration</source>
          <target state="translated">宏观声明</target>
        </trans-unit>
        <trans-unit id="ef54f5fa1927706666d44a45ec92a8543508fbf0" translate="yes" xml:space="preserve">
          <source>Macro invocation is a case where semantic analysis does &lt;strong&gt;not&lt;/strong&gt; entirely proceed top to bottom and left to right. Instead, semantic analysis happens at least twice:</source>
          <target state="translated">宏调用是一种语义分析&lt;strong&gt;未&lt;/strong&gt;完全从上到下和从左到右进行的情况。相反，语义分析至少发生两次：</target>
        </trans-unit>
        <trans-unit id="851a2849c924ba5805a5b3b89271a39bdd0911e7" translate="yes" xml:space="preserve">
          <source>Macro pragmas</source>
          <target state="translated">宏观实用主义</target>
        </trans-unit>
        <trans-unit id="d5f312834ff09b9cbab1f1a3ebc0bbe0f1a19b93" translate="yes" xml:space="preserve">
          <source>Macro which converts normal procedures into javascript-compatible async procedures</source>
          <target state="translated">将普通程序转换为javascript兼容的async程序的宏。</target>
        </trans-unit>
        <trans-unit id="b723ba9d4b8543905b3d063848f2ca3b99a48c4b" translate="yes" xml:space="preserve">
          <source>Macro which processes async procedures into both asynchronous and synchronous procedures.</source>
          <target state="translated">宏,将异步过程处理成异步和同步过程。</target>
        </trans-unit>
        <trans-unit id="2a6fdfa4d79f422748ca4c66320d7abee74c2276" translate="yes" xml:space="preserve">
          <source>Macro which processes async procedures into the appropriate iterators and yield statements.</source>
          <target state="translated">将异步过程处理成适当的迭代器和屈服语句的宏。</target>
        </trans-unit>
        <trans-unit id="899bd694d29ace1be956ab35177075021977560b" translate="yes" xml:space="preserve">
          <source>Macros</source>
          <target state="translated">Macros</target>
        </trans-unit>
        <trans-unit id="bcf4850e55a2614c2efa81a2629e41ec19afef8b" translate="yes" xml:space="preserve">
          <source>Macros as pragmas</source>
          <target state="translated">巨集的实用性</target>
        </trans-unit>
        <trans-unit id="980cf51d761ff2e575f35b48bf655118288e07f9" translate="yes" xml:space="preserve">
          <source>Macros behave like templates, but &lt;code&gt;nnkTemplateDef&lt;/code&gt; is replaced with &lt;code&gt;nnkMacroDef&lt;/code&gt;.</source>
          <target state="translated">宏的行为类似于模板，但是 &lt;code&gt;nnkTemplateDef&lt;/code&gt; 替换为 &lt;code&gt;nnkMacroDef&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fabe264274a80515010384b77dc0559e962ca19d" translate="yes" xml:space="preserve">
          <source>Macros enable advanced compile-time code transformations, but they cannot change Nim's syntax. However, this is no real restriction because Nim's syntax is flexible enough anyway. Macros have to be implemented in pure Nim code if the &lt;a href=&quot;manual#foreign-function-interface&quot;&gt;foreign function interface (FFI)&lt;/a&gt; is not enabled in the compiler, but other than that restriction (which at some point in the future will go away) you can write any kind of Nim code and the compiler will run it at compile time.</source>
          <target state="translated">宏可以启用高级编译时代码转换，但是它们不能更改Nim的语法。但是，这并不是真正的限制，因为Nim的语法足够灵活。如果未在编译器中启用&lt;a href=&quot;manual#foreign-function-interface&quot;&gt;外部功能接口（FFI），&lt;/a&gt;则必须使用纯Nim代码实现宏，但是除了该限制（将来会消失）之外，您可以编写任何种类的Nim代码并编译器将在编译时运行它。</target>
        </trans-unit>
        <trans-unit id="ce636c3f836fa89098033372c15617a8aecb40ec" translate="yes" xml:space="preserve">
          <source>Macros module includes helpers which can be used to simplify custom pragma access &lt;code&gt;hasCustomPragma&lt;/code&gt;, &lt;code&gt;getCustomPragmaVal&lt;/code&gt;. Please consult the macros module documentation for details. These macros are not magic, everything they do can also be achieved by walking the AST of the object representation.</source>
          <target state="translated">宏模块包含帮助程序，可用于简化自定义 &lt;code&gt;hasCustomPragma&lt;/code&gt; 注访问hasCustomPragma和 &lt;code&gt;getCustomPragmaVal&lt;/code&gt; 。有关详细信息，请查阅宏模块文档。这些宏并不是魔术，它们的所有操作也可以通过遍历对象表示形式的AST来实现。</target>
        </trans-unit>
        <trans-unit id="4316199fa5a1551b8a3aa00b57acfb7552982193" translate="yes" xml:space="preserve">
          <source>Macros module includes helpers which can be used to simplify custom pragma access &lt;em&gt;hasCustomPragma&lt;/em&gt;, &lt;em&gt;getCustomPragmaVal&lt;/em&gt;. Please consult macros module documentation for details. These macros are no magic, they don't do anything you cannot do yourself by walking AST object representation.</source>
          <target state="translated">宏模块包括帮助程序，可用于简化自定义&lt;em&gt;杂&lt;/em&gt;注访问&lt;em&gt;hasCustomPragma&lt;/em&gt;和&lt;em&gt;getCustomPragmaVal&lt;/em&gt;。有关详细信息，请查阅宏模块文档。这些宏不是魔术，它们不会执行AST对象表示形式无法做的任何事情。</target>
        </trans-unit>
        <trans-unit id="fcb1a29368fba3810f040b19c708029e63713744" translate="yes" xml:space="preserve">
          <source>Makes &lt;code&gt;osproc&lt;/code&gt; use &lt;code&gt;fork&lt;/code&gt; instead of &lt;code&gt;posix_spawn&lt;/code&gt;.</source>
          <target state="translated">使 &lt;code&gt;osproc&lt;/code&gt; 使用 &lt;code&gt;fork&lt;/code&gt; 而不是 &lt;code&gt;posix_spawn&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8c651f2d69bb1c5e0aa5eb7b1418517d939a6973" translate="yes" xml:space="preserve">
          <source>Makes Nim output stacktraces to stdout, instead of server log.</source>
          <target state="translated">让Nim将堆栈跟踪输出到stdout,而不是服务器日志。</target>
        </trans-unit>
        <trans-unit id="499d78e3579f7c7ce46ccd08c0c7e05dcf497fe4" translate="yes" xml:space="preserve">
          <source>Makes Nim output stacktraces to stdout, instead of server log. Depracated alias for setStackTraceStdout.</source>
          <target state="translated">让 Nim 将栈跟踪输出到 stdout,而不是服务器日志。setStackTraceStdout的变形别名。</target>
        </trans-unit>
        <trans-unit id="2e3d974a9298c4b4ebf6fa1f9cde4cea6a610923" translate="yes" xml:space="preserve">
          <source>Makes Nim use C's &lt;span id=&quot;malloc_1&quot;&gt;malloc&lt;/span&gt; instead of Nim's own memory manager, ableit prefixing each allocation with its size to support clearing memory on reallocation. This only works with &lt;code&gt;gc:none&lt;/code&gt;.</source>
          <target state="translated">使Nim使用C的&lt;span id=&quot;malloc_1&quot;&gt;malloc&lt;/span&gt;而不是Nim自己的内存管理器，从而能够在每个分配之前为其大小加上前缀，以支持在重新分配时清除内存。这仅适用于 &lt;code&gt;gc:none&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="39dc4d166bd190699dd57d866cdd4f983ac9a647" translate="yes" xml:space="preserve">
          <source>Makes Nim use C's &lt;span id=&quot;malloc_1&quot;&gt;malloc&lt;/span&gt; instead of Nim's own memory manager, albeit prefixing each allocation with its size to support clearing memory on reallocation. This only works with &lt;code&gt;gc:none&lt;/code&gt; and with &lt;code&gt;--newruntime&lt;/code&gt;.</source>
          <target state="translated">使Nim使用C的&lt;span id=&quot;malloc_1&quot;&gt;malloc&lt;/span&gt;而不是Nim自己的内存管理器，尽管会在每个分配之前添加其大小，以支持在重新分配时清除内存。这仅适用于 &lt;code&gt;gc:none&lt;/code&gt; 和 &lt;code&gt;--newruntime&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c24f6fa722204e68ea302ade8ca94caa0a75902" translate="yes" xml:space="preserve">
          <source>Mandatory term being indexed. Terms can include quoting according to Nim's rules (eg. `^`).</source>
          <target state="translated">被索引的强制性术语。根据Nim的规则,术语可以包括引用(例如`^`)。</target>
        </trans-unit>
        <trans-unit id="24955129a4e7201aaac85fbb51e47c98263d5ba3" translate="yes" xml:space="preserve">
          <source>Manfred Tasche and Hansmartin Zeuner, Handbook of Analytic-Computational Methods in Applied Mathematics (2000).</source>
          <target state="translated">Manfred Tasche和Hansmartin Zeuner,Handbook of Analytic-Computational Methods in Applied Mathematics (2000).</target>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="8b04fd7fca9bde6ca081d5a883719b86d91603ee" translate="yes" xml:space="preserve">
          <source>Manual: AST based overloading</source>
          <target state="translated">手册。基于AST的超载</target>
        </trans-unit>
        <trans-unit id="defb0de64fe7ca08a6ed982374de4bb9a85c2662" translate="yes" xml:space="preserve">
          <source>Manual: Effect system</source>
          <target state="translated">手册。效果系统</target>
        </trans-unit>
        <trans-unit id="c96afc4df608947a129115509fc6ac1d02f56202" translate="yes" xml:space="preserve">
          <source>Manual: Exception handling</source>
          <target state="translated">手册。异常情况处理</target>
        </trans-unit>
        <trans-unit id="ddfc1de56c3bd1d03afdd4142362226685aca4b2" translate="yes" xml:space="preserve">
          <source>Manual: Foreign function interface</source>
          <target state="translated">手动。外来函数接口</target>
        </trans-unit>
        <trans-unit id="e56aa0932cbe0a4d0a9778061468fdfecc37f816" translate="yes" xml:space="preserve">
          <source>Manual: Generics</source>
          <target state="translated">手册:非专利产品</target>
        </trans-unit>
        <trans-unit id="5774a3094051cc1a01178d4abbdf9174054d2afa" translate="yes" xml:space="preserve">
          <source>Manual: Guards and locks</source>
          <target state="translated">手册。警卫和锁</target>
        </trans-unit>
        <trans-unit id="034ba2f8aa22d8c1659925669461f5c6bb46d48d" translate="yes" xml:space="preserve">
          <source>Manual: Implementation Specific Pragmas</source>
          <target state="translated">手册。具体实施办法</target>
        </trans-unit>
        <trans-unit id="5b04a062ff7cc9d86ce05472065106035a8097fa" translate="yes" xml:space="preserve">
          <source>Manual: Import statement Include statement Module names in imports Collective imports from a directory Pseudo import/include paths From import statement Export statement</source>
          <target state="translated">手动。导入语句 包含语句 导入中的模块名称 从目录中集体导入 伪导入/包含路径 从导入语句导出语句</target>
        </trans-unit>
        <trans-unit id="fd76cbedf6737eb16d94623f5ae0365ae0d604f1" translate="yes" xml:space="preserve">
          <source>Manual: Iterators and the for statement</source>
          <target state="translated">手册。迭代器和for语句</target>
        </trans-unit>
        <trans-unit id="a243b6fe56c421c23e6ef513dd30b788f1257a68" translate="yes" xml:space="preserve">
          <source>Manual: Lexical Analysis</source>
          <target state="translated">手册。词汇分析</target>
        </trans-unit>
        <trans-unit id="ed3d84a9118355ed8740c1a7b3f3b4c841535124" translate="yes" xml:space="preserve">
          <source>Manual: Macros</source>
          <target state="translated">手册:宏</target>
        </trans-unit>
        <trans-unit id="4bafc4dbfa5c0e3c58d2fb274d692bbf25d243fc" translate="yes" xml:space="preserve">
          <source>Manual: Modules</source>
          <target state="translated">手册。模块</target>
        </trans-unit>
        <trans-unit id="9a290e826830f6686d0f05fcc67ab7c270d95dbb" translate="yes" xml:space="preserve">
          <source>Manual: Multi-methods</source>
          <target state="translated">手册。多方法</target>
        </trans-unit>
        <trans-unit id="11714535fa66e7fe2732c23bbc152d68d14f704d" translate="yes" xml:space="preserve">
          <source>Manual: Overloading resolution</source>
          <target state="translated">手动。超载决议</target>
        </trans-unit>
        <trans-unit id="856ff8f109b24f9933255ac3581aadee568cd2dc" translate="yes" xml:space="preserve">
          <source>Manual: Parallel &amp;amp; Spawn</source>
          <target state="translated">手册：并行和生成</target>
        </trans-unit>
        <trans-unit id="7ec22936b55b7f305c2be8dba10aa5109567b287" translate="yes" xml:space="preserve">
          <source>Manual: Pragmas</source>
          <target state="translated">手册:实用主义</target>
        </trans-unit>
        <trans-unit id="770e4cc3468cd2ab34e2292349c2fc7f1254bba1" translate="yes" xml:space="preserve">
          <source>Manual: Procedures</source>
          <target state="translated">手册。程序</target>
        </trans-unit>
        <trans-unit id="1b494587e353e28a4fb14cede5251f048106d63a" translate="yes" xml:space="preserve">
          <source>Manual: Special Operators</source>
          <target state="translated">手册。特别操作员</target>
        </trans-unit>
        <trans-unit id="67456811ead6b001268c25ae75d8eb80bf9b78d4" translate="yes" xml:space="preserve">
          <source>Manual: Special Types</source>
          <target state="translated">手册。特殊类型</target>
        </trans-unit>
        <trans-unit id="6decf7713585353b542d22a07833a9e3f4608374" translate="yes" xml:space="preserve">
          <source>Manual: Statements and expressions</source>
          <target state="translated">手册。语句和表达方式</target>
        </trans-unit>
        <trans-unit id="c06b311819398e9a7a08be8caed1736017ac7522" translate="yes" xml:space="preserve">
          <source>Manual: Syntax</source>
          <target state="translated">手动。语法</target>
        </trans-unit>
        <trans-unit id="bacd5ce7b4fc6c233337b20743738357eb3d4917" translate="yes" xml:space="preserve">
          <source>Manual: Templates</source>
          <target state="translated">手册:模板</target>
        </trans-unit>
        <trans-unit id="817f3b64b7fab30fc4fa2987f47b2de7d799191c" translate="yes" xml:space="preserve">
          <source>Manual: Term rewriting macros</source>
          <target state="translated">手册。术语改写宏</target>
        </trans-unit>
        <trans-unit id="cbe3bd9f8e9a36414594a7b27bafcc1a597a3da5" translate="yes" xml:space="preserve">
          <source>Manual: Threads</source>
          <target state="translated">手册。线程</target>
        </trans-unit>
        <trans-unit id="aafb451a891596fbad0f0184b0ad302e74ebffc7" translate="yes" xml:space="preserve">
          <source>Manual: Type bound operations</source>
          <target state="translated">手册。类型约束操作</target>
        </trans-unit>
        <trans-unit id="166a47f26935d8e4d08a27d4c17c4e1d1999f722" translate="yes" xml:space="preserve">
          <source>Manual: Type relations</source>
          <target state="translated">手册。类型关系</target>
        </trans-unit>
        <trans-unit id="bd029877fffa549daa894766df47948479afd2f1" translate="yes" xml:space="preserve">
          <source>Manual: Types</source>
          <target state="translated">手册。类型</target>
        </trans-unit>
        <trans-unit id="ab91f6bb3ac38c08fb63699ef613a1997da99143" translate="yes" xml:space="preserve">
          <source>Many procs have two variations: one that takes in a Rand parameter and another that uses the default generator. The procs that use the default generator are &lt;strong&gt;not&lt;/strong&gt; thread-safe!</source>
          <target state="translated">许多proc有两种变体：一种使用Rand参数，另一种使用默认生成器。使用默认生成器的proc&lt;strong&gt;并非&lt;/strong&gt;线程安全的！</target>
        </trans-unit>
        <trans-unit id="d6a5ed515fa728d621fa969a4b107711dd85acb8" translate="yes" xml:space="preserve">
          <source>Mapping:</source>
          <target state="translated">Mapping:</target>
        </trans-unit>
        <trans-unit id="118bc77adfa6d6ed5dc12ea80c9cb6391933343c" translate="yes" xml:space="preserve">
          <source>Mark &amp;amp; Sweep</source>
          <target state="translated">扫一扫</target>
        </trans-unit>
        <trans-unit id="2a1633f65bbc398d71c3ebfc3241c0af807273d5" translate="yes" xml:space="preserve">
          <source>Mark the test as skipped. Should be used directly in case when it is not possible to perform test for reasons depending on outer environment, or certain application logic conditions or configurations. The test code is still executed.</source>
          <target state="translated">标记为跳过测试。当由于外部环境或某些应用逻辑条件或配置等原因无法进行测试时,可直接使用。测试代码仍然被执行。</target>
        </trans-unit>
        <trans-unit id="1d3b7aa9b4c642f5735f40da06dfed06fbca163e" translate="yes" xml:space="preserve">
          <source>Marks &lt;code&gt;socket&lt;/code&gt; as accepting connections. &lt;code&gt;Backlog&lt;/code&gt; specifies the maximum length of the queue of pending connections.</source>
          <target state="translated">将 &lt;code&gt;socket&lt;/code&gt; 标记为接受连接。 &lt;code&gt;Backlog&lt;/code&gt; 指定未决连接队列的最大长度。</target>
        </trans-unit>
        <trans-unit id="d8f396ee29f34a8a12822da6969d231d2b5cdae3" translate="yes" xml:space="preserve">
          <source>Marks a sequence &lt;code&gt;s&lt;/code&gt; as &lt;span id=&quot;shallow_1&quot;&gt;shallow&lt;/span&gt;. Subsequent assignments will not perform deep copies of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">将序列 &lt;code&gt;s&lt;/code&gt; 标记为&lt;span id=&quot;shallow_1&quot;&gt;浅&lt;/span&gt;。后续任务将不会执行的深层副本 &lt;code&gt;s&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8eb88523ff1c11187c59c8daaff194a812416069" translate="yes" xml:space="preserve">
          <source>Marks a string &lt;code&gt;s&lt;/code&gt; as &lt;span id=&quot;shallow_2&quot;&gt;shallow&lt;/span&gt;. Subsequent assignments will not perform deep copies of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">将字符串 &lt;code&gt;s&lt;/code&gt; 标记为&lt;span id=&quot;shallow_2&quot;&gt;浅&lt;/span&gt;。后续任务将不会执行的深层副本 &lt;code&gt;s&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c67f988dbf96c16caeb6a758973b048d373a222" translate="yes" xml:space="preserve">
          <source>Marks the object &lt;code&gt;x&lt;/code&gt; as referenced, so that it will not be freed until it is unmarked via &lt;code&gt;GC_unref&lt;/code&gt;. If called n-times for the same object &lt;code&gt;x&lt;/code&gt;, n calls to &lt;code&gt;GC_unref&lt;/code&gt; are needed to unmark &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">将对象 &lt;code&gt;x&lt;/code&gt; 标记为已引用，以便在通过 &lt;code&gt;GC_unref&lt;/code&gt; 将其取消标记之前不会释放它。如果对同一个对象 &lt;code&gt;x&lt;/code&gt; 进行n次调用，则需要对 &lt;code&gt;GC_unref&lt;/code&gt; 进行n次调用才能取消对 &lt;code&gt;x&lt;/code&gt; 的标记。</target>
        </trans-unit>
        <trans-unit id="f07f226b4437e06fea4e70beb870cd20dccb2b33" translate="yes" xml:space="preserve">
          <source>Matches a binary integer. This uses &lt;code&gt;parseutils.parseBin&lt;/code&gt;.</source>
          <target state="translated">匹配二进制整数。这使用 &lt;code&gt;parseutils.parseBin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61f72fda5d63c33af385805c251186ac41827a95" translate="yes" xml:space="preserve">
          <source>Matches a character set</source>
          <target state="translated">匹配一个字符集</target>
        </trans-unit>
        <trans-unit id="7c21df5bb89686108056b549eda7fc196d394426" translate="yes" xml:space="preserve">
          <source>Matches a decimal integer. This uses &lt;code&gt;parseutils.parseInt&lt;/code&gt;.</source>
          <target state="translated">匹配十进制整数。这使用 &lt;code&gt;parseutils.parseInt&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a12cb4b049a1da7e03f068b60b69ca0670549bfd" translate="yes" xml:space="preserve">
          <source>Matches a floating pointer number. Uses &lt;code&gt;parseFloat&lt;/code&gt;.</source>
          <target state="translated">与浮点数匹配。使用 &lt;code&gt;parseFloat&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2464cd36660069f3fcf2e58ee0a418607e32a9bc" translate="yes" xml:space="preserve">
          <source>Matches a hex integer. This uses &lt;code&gt;parseutils.parseHex&lt;/code&gt;.</source>
          <target state="translated">匹配十六进制整数。这使用 &lt;code&gt;parseutils.parseHex&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="532fa54ee42246846545dbf2fc331f03ad0daeed" translate="yes" xml:space="preserve">
          <source>Matches a single character</source>
          <target state="translated">匹配单个字符</target>
        </trans-unit>
        <trans-unit id="e01edc99d3df652b0b10d0cd88889a4c6db28db5" translate="yes" xml:space="preserve">
          <source>Matches a single dollar sign.</source>
          <target state="translated">匹配一个一元符号。</target>
        </trans-unit>
        <trans-unit id="56b8550638d15898163432e2ef863037d24cf3ab" translate="yes" xml:space="preserve">
          <source>Matches a string</source>
          <target state="translated">匹配一个字符串</target>
        </trans-unit>
        <trans-unit id="2b0f27dc90ddd03570b6691c4598abffade1d014" translate="yes" xml:space="preserve">
          <source>Matches an ASCII identifier: &lt;code&gt;[A-Z-a-z_][A-Za-z_0-9]*&lt;/code&gt;.</source>
          <target state="translated">匹配ASCII标识符： &lt;code&gt;[A-Z-a-z_][A-Za-z_0-9]*&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb11deb862e701ecf31d06dec19acebd903c72b7" translate="yes" xml:space="preserve">
          <source>Matches an ASCII identifier: &lt;code&gt;[A-Za-z_][A-Za-z_0-9]*&lt;/code&gt;.</source>
          <target state="translated">匹配ASCII标识符： &lt;code&gt;[A-Za-z_][A-Za-z_0-9]*&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f19ab90d0dfde58576111f53aea6162591341ee" translate="yes" xml:space="preserve">
          <source>Matches an octal integer. This uses &lt;code&gt;parseutils.parseOct&lt;/code&gt;.</source>
          <target state="translated">匹配八进制整数。这使用 &lt;code&gt;parseutils.parseOct&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8507509e46ea139d748c7c784f7cdc32a09d48f7" translate="yes" xml:space="preserve">
          <source>Matches if the end of the input string has been reached.</source>
          <target state="translated">匹配是否已经到达输入字符串的末端。</target>
        </trans-unit>
        <trans-unit id="44e83eb14a6d865158691b6ead9b69eedf905cb4" translate="yes" xml:space="preserve">
          <source>Matches until the token following the &lt;code&gt;$*&lt;/code&gt; was found. The match is allowed to be of 0 length.</source>
          <target state="translated">匹配直到找到 &lt;code&gt;$*&lt;/code&gt; 之后的令牌。匹配长度为0。</target>
        </trans-unit>
        <trans-unit id="548a91d3213ffddd1a11e82050c55439466aaf2f" translate="yes" xml:space="preserve">
          <source>Matches until the token following the &lt;code&gt;$+&lt;/code&gt; was found. The match must consist of at least one char.</source>
          <target state="translated">匹配直到找到 &lt;code&gt;$+&lt;/code&gt; 之后的令牌。比赛必须包含至少一个字符。</target>
        </trans-unit>
        <trans-unit id="ac458e6963c6ebdd9c5ca1f8b279a9eb42dfc913" translate="yes" xml:space="preserve">
          <source>Math libraries</source>
          <target state="translated">数学图书馆</target>
        </trans-unit>
        <trans-unit id="1f7cee102b27a0a36e1eff3591db70671169b25f" translate="yes" xml:space="preserve">
          <source>MathML</source>
          <target state="translated">MathML</target>
        </trans-unit>
        <trans-unit id="6e4c4838bcc55297c563147e236843926c319da6" translate="yes" xml:space="preserve">
          <source>Max line length is 80 characters.</source>
          <target state="translated">最大行长为80个字符。</target>
        </trans-unit>
        <trans-unit id="87bdd589c404753ad68a30e59291849a960dcfe9" translate="yes" xml:space="preserve">
          <source>MaxLineLength:</source>
          <target state="translated">MaxLineLength:</target>
        </trans-unit>
        <trans-unit id="e8cf9b9175f564fd8cc5f5f0e0776208f9a7f0a8" translate="yes" xml:space="preserve">
          <source>MaxLockLevel:</source>
          <target state="translated">MaxLockLevel:</target>
        </trans-unit>
        <trans-unit id="6d66136caa0c795208b0ffaf07f942a674bbb1b6" translate="yes" xml:space="preserve">
          <source>MaxSetElements:</source>
          <target state="translated">MaxSetElements:</target>
        </trans-unit>
        <trans-unit id="778023e3cc63dcb6efb42650922757955cc42d4d" translate="yes" xml:space="preserve">
          <source>MaxStackSize:</source>
          <target state="translated">MaxStackSize:</target>
        </trans-unit>
        <trans-unit id="353de93dd15ff6db8a4b838f009f42da8fc085cc" translate="yes" xml:space="preserve">
          <source>Maximum (positive) exponent for 32-bit floating-point numbers.</source>
          <target state="translated">32位浮点数的最大(正)指数。</target>
        </trans-unit>
        <trans-unit id="1d2ac0d1ca31ee91cf5ff6056f9a16027dd8fd2a" translate="yes" xml:space="preserve">
          <source>Maximum (positive) exponent for 64-bit floating-point numbers.</source>
          <target state="translated">64位浮点数的最大(正)指数。</target>
        </trans-unit>
        <trans-unit id="8bbd4cef55a64a4e58be3f1e60ec750e94d7d807" translate="yes" xml:space="preserve">
          <source>Maximum (positive) exponent in base 10 for 32-bit floating-point numbers.</source>
          <target state="translated">对于32位浮点数的最大(正)指数,以10为基数。</target>
        </trans-unit>
        <trans-unit id="50184f5eb64ad277177d238e645f028ed1a230ab" translate="yes" xml:space="preserve">
          <source>Maximum (positive) exponent in base 10 for 64-bit floating-point numbers.</source>
          <target state="translated">64位浮点数的最大(正)指数,以10为基数。</target>
        </trans-unit>
        <trans-unit id="34f56ea04f6538b2d158c4a3c323d6d8ec54b309" translate="yes" xml:space="preserve">
          <source>Maximum number of &quot;distinguished&quot; threads.</source>
          <target state="translated">&quot;杰出 &quot;线程的最大数量。</target>
        </trans-unit>
        <trans-unit id="79b3561771d4e66829c167e1d4a7d1255704ca3b" translate="yes" xml:space="preserve">
          <source>Maximum number of meaningful digits after the decimal point for Nim's &lt;code&gt;float32&lt;/code&gt; type.</source>
          <target state="translated">Nim的 &lt;code&gt;float32&lt;/code&gt; 类型的小数点后的最大有效位数。</target>
        </trans-unit>
        <trans-unit id="6fc24eb965d32e0e7f8d49ad888cb429bc9b1cac" translate="yes" xml:space="preserve">
          <source>Maximum number of meaningful digits after the decimal point for Nim's &lt;code&gt;float64&lt;/code&gt; type.</source>
          <target state="translated">Nim的 &lt;code&gt;float64&lt;/code&gt; 类型的小数点后的最大有效位数。</target>
        </trans-unit>
        <trans-unit id="85186079ae8566dcfcf83e0fa2620eae92047da6" translate="yes" xml:space="preserve">
          <source>Maximum number of meaningful digits after the decimal point for Nim's &lt;code&gt;float&lt;/code&gt; type.</source>
          <target state="translated">Nim的 &lt;code&gt;float&lt;/code&gt; 类型的小数点后的最大有效位数。</target>
        </trans-unit>
        <trans-unit id="63a131e73da1676fcd77d156e09bbf2bc95271c8" translate="yes" xml:space="preserve">
          <source>Maximum size of the thread pool. 256 threads should be good enough for anybody ;-)</source>
          <target state="translated">线程池的最大大小。256个线程对任何人来说都是足够的;-)</target>
        </trans-unit>
        <trans-unit id="de5ef7d420dc7014f3387053f613102ad7f562b5" translate="yes" xml:space="preserve">
          <source>May be used only in &lt;code&gt;when&lt;/code&gt; expression. It is true in Nim VM context and false otherwise.</source>
          <target state="translated">只能在 &lt;code&gt;when&lt;/code&gt; 表达式中使用。在Nim VM上下文中为true，否则为false。</target>
        </trans-unit>
        <trans-unit id="ed71d9f1d146dd9fd80c9fea6cf2280768a6a052" translate="yes" xml:space="preserve">
          <source>Maybe you didn't notice, but in the &lt;code&gt;dumpTree&lt;/code&gt; example the first constant explicitly specifies the type of the constant. That's why in the tree output the two last constants have their second child &lt;code&gt;Empty&lt;/code&gt; but the first has a string identifier. So basically a &lt;code&gt;const&lt;/code&gt; definition is made up from an identifier, optionally a type (can be an &lt;em&gt;empty&lt;/em&gt; node) and the value. Armed with this knowledge, let's look at the finished version of the AST building macro:</source>
          <target state="translated">也许您没有注意到，但是在 &lt;code&gt;dumpTree&lt;/code&gt; 示例中，第一个常量明确指定了常量的类型。这就是为什么在树输出中，最后两个常量的第二个子 &lt;code&gt;Empty&lt;/code&gt; 但是第一个常量的字符串标识符。因此，基本上， &lt;code&gt;const&lt;/code&gt; 定义由标识符，可选的类型（可以是&lt;em&gt;空&lt;/em&gt;节点）和值组成。掌握了这些知识之后，我们来看一下AST建筑宏的最终版本：</target>
        </trans-unit>
        <trans-unit id="19cd7d185cfd95a703e62d43597e9ae28e0646e5" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">Meaning</target>
        </trans-unit>
        <trans-unit id="e0efdce50032a40b3a3914e5fc8bfa6cd4288bb5" translate="yes" xml:space="preserve">
          <source>Memory Management</source>
          <target state="translated">内存管理</target>
        </trans-unit>
        <trans-unit id="1c5536b98ab016fe61807564b4a34c80211a7613" translate="yes" xml:space="preserve">
          <source>Memory management</source>
          <target state="translated">内存管理</target>
        </trans-unit>
        <trans-unit id="0a38fd0c75a4edd44f08cff5d6dee1bf1d895b56" translate="yes" xml:space="preserve">
          <source>Memory safety for returning by &lt;code&gt;var T&lt;/code&gt; is ensured by a simple borrowing rule: If &lt;code&gt;result&lt;/code&gt; does not refer to a location pointing to the heap (that is in &lt;code&gt;result = X&lt;/code&gt; the &lt;code&gt;X&lt;/code&gt; involves a &lt;code&gt;ptr&lt;/code&gt; or &lt;code&gt;ref&lt;/code&gt; access) then it has to be derived from the routine's first parameter:</source>
          <target state="translated">对通过返回存储安全 &lt;code&gt;var T&lt;/code&gt; 通过简单的借贷规则确保：如果 &lt;code&gt;result&lt;/code&gt; 不是指一个位置指向堆（即在 &lt;code&gt;result = X&lt;/code&gt; 的 &lt;code&gt;X&lt;/code&gt; 包括一个 &lt;code&gt;ptr&lt;/code&gt; 或者 &lt;code&gt;ref&lt;/code&gt; 存取），那么它必须被衍生自例程的第一个参数：</target>
        </trans-unit>
        <trans-unit id="9baa9878dfbef1d35fc905168a10b0c4a8c0fbd9" translate="yes" xml:space="preserve">
          <source>Memory safety for returning by &lt;code&gt;var T&lt;/code&gt; is ensured by a simple borrowing rule: If &lt;code&gt;result&lt;/code&gt; does not refer to a location pointing to the heap (that is in &lt;code&gt;result = X&lt;/code&gt; the &lt;code&gt;X&lt;/code&gt; involves a &lt;code&gt;ptr&lt;/code&gt; or &lt;code&gt;ref&lt;/code&gt; access) then it has to be deviated by the routine's first parameter:</source>
          <target state="translated">对通过返回存储安全 &lt;code&gt;var T&lt;/code&gt; 通过简单的借贷规则确保：如果 &lt;code&gt;result&lt;/code&gt; 不是指一个位置指向堆（即在 &lt;code&gt;result = X&lt;/code&gt; 的 &lt;code&gt;X&lt;/code&gt; 包括一个 &lt;code&gt;ptr&lt;/code&gt; 或者 &lt;code&gt;ref&lt;/code&gt; 存取），那么它必须通过偏离例程的第一个参数：</target>
        </trans-unit>
        <trans-unit id="68b01759ed73d2656f376537320817eccdacee45" translate="yes" xml:space="preserve">
          <source>Merges all index files in &lt;code&gt;dir&lt;/code&gt; and returns the generated index as HTML.</source>
          <target state="translated">合并 &lt;code&gt;dir&lt;/code&gt; 所有索引文件，并将生成的索引作为HTML返回。</target>
        </trans-unit>
        <trans-unit id="50ff34431595cf400d81245be2a86a83f82386dd" translate="yes" xml:space="preserve">
          <source>Merges all index files in &lt;em&gt;dir&lt;/em&gt; and returns the generated index as HTML.</source>
          <target state="translated">合并&lt;em&gt;目录中的&lt;/em&gt;所有索引文件，并将生成的索引作为HTML返回。</target>
        </trans-unit>
        <trans-unit id="c08446305ac72d52aeff6051e72faf9d7787f9fc" translate="yes" xml:space="preserve">
          <source>Merges all separated TextNodes together, and removes any empty TextNodes</source>
          <target state="translated">将所有分开的TextNodes合并在一起,并删除任何空的TextNodes。</target>
        </trans-unit>
        <trans-unit id="c42db407f8ba796f4e3f875584c617d02edd91ec" translate="yes" xml:space="preserve">
          <source>Merges the second table into the first one (must be declared as &lt;code&gt;var&lt;/code&gt;).</source>
          <target state="translated">将第二个表合并到第一个表中（必须声明为 &lt;code&gt;var&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7fb7c3fc486b91ac1b3d99ffad713c97f7f0fff2" translate="yes" xml:space="preserve">
          <source>Merges the second table into the first one.</source>
          <target state="translated">将第二个表格合并到第一个表格中。</target>
        </trans-unit>
        <trans-unit id="95ad9464050cf4d3ee343c86b03f2ad81189345c" translate="yes" xml:space="preserve">
          <source>Messages below the provided level will not be logged regardless of an individual logger's &lt;code&gt;levelThreshold&lt;/code&gt;. By default, all messages are logged.</source>
          <target state="translated">低于单个记录器的 &lt;code&gt;levelThreshold&lt;/code&gt; ,将不会记录低于提供的级别的消息。默认情况下，将记录所有消息。</target>
        </trans-unit>
        <trans-unit id="33ef168ac38cdf5d66a3f96ccc53c0bcb2bec97c" translate="yes" xml:space="preserve">
          <source>Messages that are generated during the normal operation of an application and are of no particular importance. Useful to aggregate for potential later analysis.</source>
          <target state="translated">在应用程序正常运行期间产生的消息,没有特别重要的意义。有助于汇总,以便日后进行分析。</target>
        </trans-unit>
        <trans-unit id="949ba2d44e279ebf601f54248d567bd067f76669" translate="yes" xml:space="preserve">
          <source>Messages that are useful to the application developer only and are usually turned off in release.</source>
          <target state="translated">只对应用开发者有用的消息,通常在发布时关闭。</target>
        </trans-unit>
        <trans-unit id="745b524d1313b50d56dc4991d7fc4ac3d21800cb" translate="yes" xml:space="preserve">
          <source>Meta type for any supported type.</source>
          <target state="translated">任何支持类型的元类型。</target>
        </trans-unit>
        <trans-unit id="69e5c5161e7a7c9285e03921cabfd568d0518d0a" translate="yes" xml:space="preserve">
          <source>Meta type for automatic type determination.</source>
          <target state="translated">用于自动确定类型的元类型。</target>
        </trans-unit>
        <trans-unit id="53ad96c9b95130a56606328afa6d6d10ebb1ba2e" translate="yes" xml:space="preserve">
          <source>Meta type representing all values that can be evaluated at compile-time.</source>
          <target state="translated">元类型代表所有可以在编译时评估的值。</target>
        </trans-unit>
        <trans-unit id="bbcba27001b21567b00d6f558d2497605e5c712b" translate="yes" xml:space="preserve">
          <source>Meta type representing the type of all type values.</source>
          <target state="translated">元类型代表所有类型值的类型。</target>
        </trans-unit>
        <trans-unit id="42755bad5b6307551c0eac2353fd3f894c84162d" translate="yes" xml:space="preserve">
          <source>Meta type to denote a type description.</source>
          <target state="translated">用来表示类型描述的元类型。</target>
        </trans-unit>
        <trans-unit id="d166ae24c012ef333326f369b157886d4c27a076" translate="yes" xml:space="preserve">
          <source>Meta type to denote an expression that is not resolved (for templates).</source>
          <target state="translated">元类型,用于表示未解析的表达式(对于模板)。</target>
        </trans-unit>
        <trans-unit id="7f9df6b2690537d3b2d8b0ba2b813d39fe2dc19b" translate="yes" xml:space="preserve">
          <source>Meta type to denote an expression that is resolved (for templates).</source>
          <target state="translated">元类型来表示一个已解析的表达式(对于模板)。</target>
        </trans-unit>
        <trans-unit id="a0b28d00950315a9c724dc36367a067b14aa413c" translate="yes" xml:space="preserve">
          <source>Meta type to denote the absence of any type.</source>
          <target state="translated">元类型,表示没有任何类型。</target>
        </trans-unit>
        <trans-unit id="de329f9988dc07ac218d31798f3d3fb0e319aeeb" translate="yes" xml:space="preserve">
          <source>Method call syntax</source>
          <target state="translated">方法调用语法</target>
        </trans-unit>
        <trans-unit id="b768cedc4687283126d9b1ed420f777b12a98828" translate="yes" xml:space="preserve">
          <source>Method dispatchers are global.</source>
          <target state="translated">方法调度器是全球性的。</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="3c397a7933a859382d85ab67743d94fecb8793cf" translate="yes" xml:space="preserve">
          <source>Methods and type converters</source>
          <target state="translated">方法和类型转换器</target>
        </trans-unit>
        <trans-unit id="97688c42bbe7b8796c3a711bbfe491fd460e5719" translate="yes" xml:space="preserve">
          <source>Methods imply &lt;a href=&quot;https://nim-lang.org/docs/tut2.html#object-oriented-programming-dynamic-dispatch&quot;&gt;dynamic dispatch&lt;/a&gt; and idetools performs a static analysis on the code. For this reason idetools may not return the definition of the correct method you are querying because it may be impossible to know until the code is executed. It will try to return the method which covers the most possible cases (i.e. for variations of different classes in a hierarchy it will prefer methods using the base class).</source>
          <target state="translated">方法意味着&lt;a href=&quot;https://nim-lang.org/docs/tut2.html#object-oriented-programming-dynamic-dispatch&quot;&gt;动态调度，&lt;/a&gt;而idetools对代码执行静态分析。因此，idetools可能不会返回您正在查询的正确方法的定义，因为在执行代码之前可能无法知道。它将尝试返回覆盖最可能情况的方法（即，对于层次结构中不同类的变体，它将更喜欢使用基类的方法）。</target>
        </trans-unit>
        <trans-unit id="70972ae112e939ad343653a1ba078194eea37b73" translate="yes" xml:space="preserve">
          <source>Methods imply &lt;a href=&quot;tut2#dynamic-dispatch&quot;&gt;dynamic dispatch&lt;/a&gt; and idetools performs a static analysis on the code. For this reason idetools may not return the definition of the correct method you are querying because it may be impossible to know until the code is executed. It will try to return the method which covers the most possible cases (i.e. for variations of different classes in a hierarchy it will prefer methods using the base class).</source>
          <target state="translated">方法意味着&lt;a href=&quot;tut2#dynamic-dispatch&quot;&gt;动态调度，&lt;/a&gt;而idetools对代码执行静态分析。因此，idetools可能不会返回您正在查询的正确方法的定义，因为在执行代码之前可能无法知道。它将尝试返回覆盖最可能情况的方法（即，对于层次结构中不同类的变体，它将倾向于使用基类的方法）。</target>
        </trans-unit>
        <trans-unit id="53abbdb21e81e3f2df2cf14c89d5b6dbabdbe501" translate="yes" xml:space="preserve">
          <source>Microseconds display</source>
          <target state="translated">微秒显示</target>
        </trans-unit>
        <trans-unit id="71a3c685e2a1c832e7011ccdc9b0d684ec6c5b11" translate="yes" xml:space="preserve">
          <source>Milliseconds display</source>
          <target state="translated">毫秒显示</target>
        </trans-unit>
        <trans-unit id="f0ba6bd90de6cbdc1ad731d5daa371ecb83efe18" translate="yes" xml:space="preserve">
          <source>Minimal output level for the compiler.</source>
          <target state="translated">编译器的最小输出级别。</target>
        </trans-unit>
        <trans-unit id="011feb85fd840211ebe3cbea6d10c757384f0950" translate="yes" xml:space="preserve">
          <source>Minimum (negative) exponent for 32-bit floating-point numbers.</source>
          <target state="translated">32位浮点数的最小(负)指数。</target>
        </trans-unit>
        <trans-unit id="a6a8707c6b54291fbf3e81a23b30ec1365b0f17e" translate="yes" xml:space="preserve">
          <source>Minimum (negative) exponent for 64-bit floating-point numbers.</source>
          <target state="translated">64位浮点数的最小(负)指数。</target>
        </trans-unit>
        <trans-unit id="c80cc0223dc92abbd631516781aea6a70a2336ee" translate="yes" xml:space="preserve">
          <source>Minimum (negative) exponent in base 10 for 32-bit floating-point numbers.</source>
          <target state="translated">对于32位浮点数的最小(负)指数,以10为基数。</target>
        </trans-unit>
        <trans-unit id="8c0da4d03317d4bba985f6d156cd17b8a1e9fe83" translate="yes" xml:space="preserve">
          <source>Minimum (negative) exponent in base 10 for 64-bit floating-point numbers.</source>
          <target state="translated">64位浮点数的最小(负)指数,以10为基数。</target>
        </trans-unit>
        <trans-unit id="0a893ece8e469a3ca3d935c49f41d08d04b75ecc" translate="yes" xml:space="preserve">
          <source>Misc</source>
          <target state="translated">Misc</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="028fd1a0a99c9d789b13fd91c79f7fe63aac28bd" translate="yes" xml:space="preserve">
          <source>MismatchInfo:</source>
          <target state="translated">MismatchInfo:</target>
        </trans-unit>
        <trans-unit id="96208c52bfe40b311451c19832de1dbf902b8cb4" translate="yes" xml:space="preserve">
          <source>MismatchKind.kAlreadyGiven</source>
          <target state="translated">MismatchKind.kAlreadyGiven</target>
        </trans-unit>
        <trans-unit id="dde8c986146b366dd5296c5704245b484940cf6e" translate="yes" xml:space="preserve">
          <source>MismatchKind.kExtraArg</source>
          <target state="translated">MismatchKind.kExtraArg</target>
        </trans-unit>
        <trans-unit id="2e27955aa62ddb079374eebc3687a381932877fe" translate="yes" xml:space="preserve">
          <source>MismatchKind.kMissingParam</source>
          <target state="translated">MismatchKind.kMissingParam</target>
        </trans-unit>
        <trans-unit id="7b4b3f8deac6bc906bf7655bec2bfa55b3317c96" translate="yes" xml:space="preserve">
          <source>MismatchKind.kPositionalAlreadyGiven</source>
          <target state="translated">MismatchKind.kPositionalAlreadyGiven</target>
        </trans-unit>
        <trans-unit id="290f807b942dddfb1b058ed0e84dfa3d2c1aacbd" translate="yes" xml:space="preserve">
          <source>MismatchKind.kTypeMismatch</source>
          <target state="translated">MismatchKind.kTypeMismatch</target>
        </trans-unit>
        <trans-unit id="842557c40ae02c3391d8dafcd59ce4e98a69a058" translate="yes" xml:space="preserve">
          <source>MismatchKind.kUnknown</source>
          <target state="translated">MismatchKind.kUnknown</target>
        </trans-unit>
        <trans-unit id="06db4a7e4881e00a062508f9c9478b6218bc9773" translate="yes" xml:space="preserve">
          <source>MismatchKind.kUnknownNamedParam</source>
          <target state="translated">MismatchKind.kUnknownNamedParam</target>
        </trans-unit>
        <trans-unit id="5e717dbad1395b6e5d0f9a8ec94ae1e7721011bb" translate="yes" xml:space="preserve">
          <source>MismatchKind.kVarNeeded</source>
          <target state="translated">MismatchKind.kVarNeeded</target>
        </trans-unit>
        <trans-unit id="85ddd1bf43e69e3d13fa6518199498a93186045a" translate="yes" xml:space="preserve">
          <source>MismatchKind:</source>
          <target state="translated">MismatchKind:</target>
        </trans-unit>
        <trans-unit id="e8150bc1e20b9baba6224e474d8f4f71061c9cca" translate="yes" xml:space="preserve">
          <source>Mixes a hash value &lt;code&gt;h&lt;/code&gt; with &lt;code&gt;val&lt;/code&gt; to produce a new hash value.</source>
          <target state="translated">将哈希值 &lt;code&gt;h&lt;/code&gt; 与 &lt;code&gt;val&lt;/code&gt; 混合以生成新的哈希值。</target>
        </trans-unit>
        <trans-unit id="fde8fd6d013071c5b0da03141012d8c86a59338b" translate="yes" xml:space="preserve">
          <source>Mixin statement</source>
          <target state="translated">混合声明</target>
        </trans-unit>
        <trans-unit id="6a1399a1dd8e426e9dc9e0c8af822db72d3d7a45" translate="yes" xml:space="preserve">
          <source>Mixing GC'ed memory with &lt;code&gt;ptr&lt;/code&gt;</source>
          <target state="translated">将GC的内存与 &lt;code&gt;ptr&lt;/code&gt; 混合</target>
        </trans-unit>
        <trans-unit id="54a58f4d81597ea468c275c465f53b922146c355" translate="yes" xml:space="preserve">
          <source>Mixing parameters that should use the &lt;code&gt;using&lt;/code&gt; declaration with parameters that are explicitly typed is possible and requires a semicolon between them.</source>
          <target state="translated">应该将应该使用 &lt;code&gt;using&lt;/code&gt; 声明的参数与显式键入的参数混合，并且需要在它们之间使用分号。</target>
        </trans-unit>
        <trans-unit id="4ecdff6e2393b538227b8c0c9548fc4c65635034" translate="yes" xml:space="preserve">
          <source>Modeling currencies</source>
          <target state="translated">建立货币模型</target>
        </trans-unit>
        <trans-unit id="e4544d11fd6da006e85425de7ccf9cc035a9102d" translate="yes" xml:space="preserve">
          <source>Modelling currencies</source>
          <target state="translated">建立货币模型</target>
        </trans-unit>
        <trans-unit id="aa74d48711737b61f9e3b5b05bb11e9299107ca2" translate="yes" xml:space="preserve">
          <source>Modifies the prefix of this node</source>
          <target state="translated">修改此节点的前缀</target>
        </trans-unit>
        <trans-unit id="08534cfcbbc9538479a2881f8f4160931eb1a4e4" translate="yes" xml:space="preserve">
          <source>Modify &lt;code&gt;a&lt;/code&gt; in place by adding &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">修改 &lt;code&gt;a&lt;/code&gt; 通过增加地方 &lt;code&gt;b&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d316a8d9b4204cded1b078dfca344f13947d6088" translate="yes" xml:space="preserve">
          <source>Modify &lt;code&gt;a&lt;/code&gt; in place by subtracting &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">修改 &lt;code&gt;a&lt;/code&gt; 减去到位 &lt;code&gt;b&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b6644cf977e14c9d8febd0df44cd34bcc74954d9" translate="yes" xml:space="preserve">
          <source>Modifying a configuration file</source>
          <target state="translated">修改配置文件</target>
        </trans-unit>
        <trans-unit id="3bf753b23cff3eb87675698eadfe1b3df8dc21c1" translate="yes" xml:space="preserve">
          <source>Modifying a configuration file.</source>
          <target state="translated">修改配置文件。</target>
        </trans-unit>
        <trans-unit id="b8ff02892916ff59f7fbd4e617fccd01f6bca576" translate="yes" xml:space="preserve">
          <source>Module</source>
          <target state="translated">Module</target>
        </trans-unit>
        <trans-unit id="37f0da15f20ceb74b60fd308e1dca9126540cb05" translate="yes" xml:space="preserve">
          <source>Module algorithm</source>
          <target state="translated">模块算法</target>
        </trans-unit>
        <trans-unit id="98195ccd152814f0ec7cb526f9dfddd0c0f2d040" translate="yes" xml:space="preserve">
          <source>Module asyncdispatch</source>
          <target state="translated">模块asyncdispatch</target>
        </trans-unit>
        <trans-unit id="4bc2eee542f289752eea25797a5b576fdb1f0212" translate="yes" xml:space="preserve">
          <source>Module asyncfile</source>
          <target state="translated">模块asyncfile</target>
        </trans-unit>
        <trans-unit id="1982b034043183e25a12a7f8201ac7aedfe1337c" translate="yes" xml:space="preserve">
          <source>Module asyncftpclient</source>
          <target state="translated">模块asyncftpclient</target>
        </trans-unit>
        <trans-unit id="c8ecdd97327b90a5e22c271e6446280bc42a28c4" translate="yes" xml:space="preserve">
          <source>Module asyncfutures</source>
          <target state="translated">模块asyncfutures</target>
        </trans-unit>
        <trans-unit id="36cb7286c251d44bed6e333ac6ff256e07f23e46" translate="yes" xml:space="preserve">
          <source>Module asynchttpserver</source>
          <target state="translated">模块asynchttpserver</target>
        </trans-unit>
        <trans-unit id="a17c24b3dfb9bd981141eb4c7df0cf7bc771a15a" translate="yes" xml:space="preserve">
          <source>Module asyncio</source>
          <target state="translated">模块asyncio</target>
        </trans-unit>
        <trans-unit id="c68f5ddf8354a55f6684c3fbe9c3bf177423a499" translate="yes" xml:space="preserve">
          <source>Module asyncjs</source>
          <target state="translated">模块asyncjs</target>
        </trans-unit>
        <trans-unit id="101489cc366780f3080d0d181d612c9897002730" translate="yes" xml:space="preserve">
          <source>Module asyncnet</source>
          <target state="translated">模块asyncnet</target>
        </trans-unit>
        <trans-unit id="6fed8121401f7f3d76d9ac08c713d6fc1d80130c" translate="yes" xml:space="preserve">
          <source>Module asyncstreams</source>
          <target state="translated">模块asyncstreams</target>
        </trans-unit>
        <trans-unit id="7760e4149a4aa9f2f5276da9842c763efe627d2d" translate="yes" xml:space="preserve">
          <source>Module base64</source>
          <target state="translated">模块base64</target>
        </trans-unit>
        <trans-unit id="90d38995e07bc5f4bab2517945813fb23c0f041c" translate="yes" xml:space="preserve">
          <source>Module bitops</source>
          <target state="translated">模块比特率</target>
        </trans-unit>
        <trans-unit id="50eadb9d8cc85daa18b406eb03722df6d8ad89ae" translate="yes" xml:space="preserve">
          <source>Module browsers</source>
          <target state="translated">模块浏览器</target>
        </trans-unit>
        <trans-unit id="541c25a9eda5bd8f8b769d4123a86bdd4573b52d" translate="yes" xml:space="preserve">
          <source>Module cgi</source>
          <target state="translated">模块cgi</target>
        </trans-unit>
        <trans-unit id="582466c566af045f4b9e5cd6e35678516157979c" translate="yes" xml:space="preserve">
          <source>Module channels</source>
          <target state="translated">模块通道</target>
        </trans-unit>
        <trans-unit id="9b8b21dabbac15d101b015114dad88029c7c9e26" translate="yes" xml:space="preserve">
          <source>Module colors</source>
          <target state="translated">模块颜色</target>
        </trans-unit>
        <trans-unit id="eed8ec6f020ff8aa124c5b37641c245a63ddde69" translate="yes" xml:space="preserve">
          <source>Module complex</source>
          <target state="translated">模块综合体</target>
        </trans-unit>
        <trans-unit id="374208eb48a6ab162ea9a9795c69a75d26d8d0d8" translate="yes" xml:space="preserve">
          <source>Module cookies</source>
          <target state="translated">模块cookies</target>
        </trans-unit>
        <trans-unit id="a4721d23b264afe3adb6840e441ad673c273dbe5" translate="yes" xml:space="preserve">
          <source>Module coro</source>
          <target state="translated">模块电晕</target>
        </trans-unit>
        <trans-unit id="0b7487264409b62ec77bc44946eb6949835043bd" translate="yes" xml:space="preserve">
          <source>Module cpuinfo</source>
          <target state="translated">模块cpuinfo</target>
        </trans-unit>
        <trans-unit id="65a4bb57d62e6d50e39758f49fa5d45582a06fcf" translate="yes" xml:space="preserve">
          <source>Module cpuload</source>
          <target state="translated">模块cpuload</target>
        </trans-unit>
        <trans-unit id="0eaf026ca68438c31c5ddb66759abefe57ca491a" translate="yes" xml:space="preserve">
          <source>Module critbits</source>
          <target state="translated">模块标准</target>
        </trans-unit>
        <trans-unit id="17fb6170e7c4b5192d13d3ef92b62003adec52ed" translate="yes" xml:space="preserve">
          <source>Module cstrutils</source>
          <target state="translated">模块结构</target>
        </trans-unit>
        <trans-unit id="dccbda4248191deb5d482692eac7fa4e615cc212" translate="yes" xml:space="preserve">
          <source>Module db_common</source>
          <target state="translated">模块db_common</target>
        </trans-unit>
        <trans-unit id="8d09576b4e94ea8a8b0016794ba4536d4b1759df" translate="yes" xml:space="preserve">
          <source>Module db_mysql</source>
          <target state="translated">模块db_mysql</target>
        </trans-unit>
        <trans-unit id="6624ca243c80fc450c0491ae2bd086e7f22e2273" translate="yes" xml:space="preserve">
          <source>Module db_odbc</source>
          <target state="translated">模块db_odbc</target>
        </trans-unit>
        <trans-unit id="fd6fae1e074c3591c208c14db853d9f0744b3fe6" translate="yes" xml:space="preserve">
          <source>Module db_postgres</source>
          <target state="translated">模块db_postgres</target>
        </trans-unit>
        <trans-unit id="b401aafda6e7b26047ce7d9b236e3e28ead3b900" translate="yes" xml:space="preserve">
          <source>Module db_sqlite</source>
          <target state="translated">模块db_sqlite</target>
        </trans-unit>
        <trans-unit id="a36cab96e59f81b2cfa2e287c992565577181e19" translate="yes" xml:space="preserve">
          <source>Module deques</source>
          <target state="translated">模块查询</target>
        </trans-unit>
        <trans-unit id="230fe8691288c49b13cd6d0d633b0aa094bba0ba" translate="yes" xml:space="preserve">
          <source>Module distros</source>
          <target state="translated">模块发行版</target>
        </trans-unit>
        <trans-unit id="b98b5015c00736657c4dd0da231c080c137bf240" translate="yes" xml:space="preserve">
          <source>Module docgen_sample</source>
          <target state="translated">模块docgen_sample</target>
        </trans-unit>
        <trans-unit id="9b3df8bd64b5aae95560173051cb9413193a2ac6" translate="yes" xml:space="preserve">
          <source>Module dom</source>
          <target state="translated">模块dom</target>
        </trans-unit>
        <trans-unit id="941b4acd398cb84658e8c03ee70acb8a6a6ad12b" translate="yes" xml:space="preserve">
          <source>Module dynlib</source>
          <target state="translated">模块 dynlib</target>
        </trans-unit>
        <trans-unit id="0b682ac70a1c85d9baf3957f2aa8f759d24240e0" translate="yes" xml:space="preserve">
          <source>Module encodings</source>
          <target state="translated">模块编码</target>
        </trans-unit>
        <trans-unit id="db5b0c91c31ae7c7d91818dc9b614356c8ac354a" translate="yes" xml:space="preserve">
          <source>Module endians</source>
          <target state="translated">模块endians</target>
        </trans-unit>
        <trans-unit id="bd74d2f3f124ee315af73875094015c9b005becf" translate="yes" xml:space="preserve">
          <source>Module fenv</source>
          <target state="translated">模块fenv</target>
        </trans-unit>
        <trans-unit id="4f649eaa7731f9dd2821a65a914c390a48c5977c" translate="yes" xml:space="preserve">
          <source>Module for computing &lt;a href=&quot;https://en.wikipedia.org/wiki/MD5&quot;&gt;MD5 checksums&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/MD5&quot;&gt;MD5校验和&lt;/a&gt;计算模块。</target>
        </trans-unit>
        <trans-unit id="731086b25ca52f0d4ba784e9023a512802282c5d" translate="yes" xml:space="preserve">
          <source>Module for computing MD5 checksums.</source>
          <target state="translated">计算MD5校验和的模块。</target>
        </trans-unit>
        <trans-unit id="b4be1b80500b5ac048dcc726ed598ece6701931b" translate="yes" xml:space="preserve">
          <source>Module ftpclient</source>
          <target state="translated">模块ftpclient</target>
        </trans-unit>
        <trans-unit id="3c4f086976fa89f11b3a0b18d36e2a8854016a20" translate="yes" xml:space="preserve">
          <source>Module hashes</source>
          <target state="translated">模块哈希</target>
        </trans-unit>
        <trans-unit id="a2e15c184ec6f1cb32588bee5d5ccb0d11dcc6e5" translate="yes" xml:space="preserve">
          <source>Module heapqueue</source>
          <target state="translated">模块堆栈</target>
        </trans-unit>
        <trans-unit id="83b2786d0af670a8727d352ab2cc17a4801a8fde" translate="yes" xml:space="preserve">
          <source>Module highlite</source>
          <target state="translated">高光模块</target>
        </trans-unit>
        <trans-unit id="68378bdbde20dbf762ba106c90a960cc76a0c343" translate="yes" xml:space="preserve">
          <source>Module htmlgen</source>
          <target state="translated">htmlgen模块</target>
        </trans-unit>
        <trans-unit id="11585b007040719709343df6d82764795667bb4d" translate="yes" xml:space="preserve">
          <source>Module htmlparser</source>
          <target state="translated">模块 htmlparser</target>
        </trans-unit>
        <trans-unit id="ce266765149cfec68daffab151c2d1cbb6ebb974" translate="yes" xml:space="preserve">
          <source>Module httpclient</source>
          <target state="translated">模块 httpclient</target>
        </trans-unit>
        <trans-unit id="ae17027dff9b5c5e08184e61c512b15de51aca77" translate="yes" xml:space="preserve">
          <source>Module httpcore</source>
          <target state="translated">模块httpcore</target>
        </trans-unit>
        <trans-unit id="efcdd786f2c6fa38c8e234f0d6d253c5564d8710" translate="yes" xml:space="preserve">
          <source>Module intsets</source>
          <target state="translated">模块内设</target>
        </trans-unit>
        <trans-unit id="ae1f8df6d1f31431338fdcd3f32d3d351bdb0f67" translate="yes" xml:space="preserve">
          <source>Module iup</source>
          <target state="translated">模块iup</target>
        </trans-unit>
        <trans-unit id="8abdec2103ddf3b91238dc0ef753306e3cf948a1" translate="yes" xml:space="preserve">
          <source>Module jscore</source>
          <target state="translated">模块jscore</target>
        </trans-unit>
        <trans-unit id="2445c7a3a0648ca25b67b51a400e8dde36b920dc" translate="yes" xml:space="preserve">
          <source>Module jsffi</source>
          <target state="translated">模块jsffi</target>
        </trans-unit>
        <trans-unit id="3e231af76878f00ab682498609250b7a33902b37" translate="yes" xml:space="preserve">
          <source>Module json</source>
          <target state="translated">模块json</target>
        </trans-unit>
        <trans-unit id="37345fc873fd9ef2206568b360b1c24cb44c6a79" translate="yes" xml:space="preserve">
          <source>Module lenientops</source>
          <target state="translated">模块 lenientops</target>
        </trans-unit>
        <trans-unit id="580e2f376943e7c873eabc0e8de78d45329a29d4" translate="yes" xml:space="preserve">
          <source>Module lexbase</source>
          <target state="translated">模块词库</target>
        </trans-unit>
        <trans-unit id="f7eb0bf35deb63519acf61a5dc69c51f5b06735f" translate="yes" xml:space="preserve">
          <source>Module lists</source>
          <target state="translated">模块列表</target>
        </trans-unit>
        <trans-unit id="5fa64d315f22284a510ec90f2b3766f8771aa4d3" translate="yes" xml:space="preserve">
          <source>Module locks</source>
          <target state="translated">模块锁</target>
        </trans-unit>
        <trans-unit id="d68a3f14f1246e34391c7c956005b435126a1feb" translate="yes" xml:space="preserve">
          <source>Module logging</source>
          <target state="translated">模块记录</target>
        </trans-unit>
        <trans-unit id="70e578149237a5fb397ecdf712216171be19d22c" translate="yes" xml:space="preserve">
          <source>Module macros</source>
          <target state="translated">模块宏</target>
        </trans-unit>
        <trans-unit id="8e11adceffbd4622428572ca4afc35c17c825d9b" translate="yes" xml:space="preserve">
          <source>Module marshal</source>
          <target state="translated">模块元帅</target>
        </trans-unit>
        <trans-unit id="33c70e8cca5fc846249c996c55efdccf09fa04af" translate="yes" xml:space="preserve">
          <source>Module matchers</source>
          <target state="translated">模块匹配器</target>
        </trans-unit>
        <trans-unit id="60528f0928b59cfa4557a3b1b994edb4024106b0" translate="yes" xml:space="preserve">
          <source>Module math</source>
          <target state="translated">数学模块</target>
        </trans-unit>
        <trans-unit id="56d8fbdebc1eb23f12cddf043b4f3037a450710a" translate="yes" xml:space="preserve">
          <source>Module md5</source>
          <target state="translated">模块md5</target>
        </trans-unit>
        <trans-unit id="bce77eb47d51483993e4fa0db56b0547cc3dd24c" translate="yes" xml:space="preserve">
          <source>Module memfiles</source>
          <target state="translated">模块 memfiles</target>
        </trans-unit>
        <trans-unit id="20df3a115fcb30f9b530aa03bdc18faa0ae695c2" translate="yes" xml:space="preserve">
          <source>Module mersenne</source>
          <target state="translated">模块mersenne</target>
        </trans-unit>
        <trans-unit id="cc1b82bbab0603a47f41c5adca38b87a9321bee7" translate="yes" xml:space="preserve">
          <source>Module mimetypes</source>
          <target state="translated">模块模拟类型</target>
        </trans-unit>
        <trans-unit id="6657cfabe7d07bf51cc2fb118ba722ffc96aba89" translate="yes" xml:space="preserve">
          <source>Module mysql</source>
          <target state="translated">模块 mysql</target>
        </trans-unit>
        <trans-unit id="31d0c7d344fc5c65774ddf00049b1876645f3b19" translate="yes" xml:space="preserve">
          <source>Module names in imports</source>
          <target state="translated">进口中的模块名称</target>
        </trans-unit>
        <trans-unit id="30df598104815cce6ad06791aec2a9d153b164f7" translate="yes" xml:space="preserve">
          <source>Module nativesockets</source>
          <target state="translated">模块nativesockets</target>
        </trans-unit>
        <trans-unit id="a3d7a3865b172afee6c2b7c8977de511e77b6757" translate="yes" xml:space="preserve">
          <source>Module net</source>
          <target state="translated">模块网</target>
        </trans-unit>
        <trans-unit id="6c357de2b2a9a1de2189540c4281941a77608057" translate="yes" xml:space="preserve">
          <source>Module odbcsql</source>
          <target state="translated">模块odbcsql</target>
        </trans-unit>
        <trans-unit id="9ac9afd12fcca720ece0b72dd61269f6e7843617" translate="yes" xml:space="preserve">
          <source>Module oids</source>
          <target state="translated">模块化操作</target>
        </trans-unit>
        <trans-unit id="df6c016676012b7a90d7af54c2025872180c6083" translate="yes" xml:space="preserve">
          <source>Module openssl</source>
          <target state="translated">模块openssl</target>
        </trans-unit>
        <trans-unit id="181f431ffc709c06a61935e69331ac8e4563f46c" translate="yes" xml:space="preserve">
          <source>Module options</source>
          <target state="translated">模块选项</target>
        </trans-unit>
        <trans-unit id="7f661395966d22306bb86d25ec0d945d397507a0" translate="yes" xml:space="preserve">
          <source>Module os</source>
          <target state="translated">模块操作系统</target>
        </trans-unit>
        <trans-unit id="dae29e69d6fcac477476832d0c04d256e4219700" translate="yes" xml:space="preserve">
          <source>Module ospaths</source>
          <target state="translated">模块ospaths</target>
        </trans-unit>
        <trans-unit id="5395928ecc4ce4edf1eabd8f020d30b8523fd803" translate="yes" xml:space="preserve">
          <source>Module osproc</source>
          <target state="translated">osproc模块</target>
        </trans-unit>
        <trans-unit id="2bfeeb302a2c2fb80d26255c95b4f0b069b97c41" translate="yes" xml:space="preserve">
          <source>Module parsecfg</source>
          <target state="translated">模块 parsecfg</target>
        </trans-unit>
        <trans-unit id="d9ee6d4bae252aefed2ecd2ae012f67dfe339140" translate="yes" xml:space="preserve">
          <source>Module parsecsv</source>
          <target state="translated">模块parsecsv</target>
        </trans-unit>
        <trans-unit id="348399e23d1c192b9c45e1b0c83d05337c92bf98" translate="yes" xml:space="preserve">
          <source>Module parsejson</source>
          <target state="translated">模块 parsejson</target>
        </trans-unit>
        <trans-unit id="682e643a35975c3826db50e0bb0cd0dd5c2ca34f" translate="yes" xml:space="preserve">
          <source>Module parseopt</source>
          <target state="translated">模块解析opt</target>
        </trans-unit>
        <trans-unit id="0ed92eaefc270e8b9dd075eb2dd08dbaa5b51f01" translate="yes" xml:space="preserve">
          <source>Module parsesql</source>
          <target state="translated">模块 parsesql</target>
        </trans-unit>
        <trans-unit id="855c130387d410a61e37f5b34d034cd98d89f8d8" translate="yes" xml:space="preserve">
          <source>Module parseutils</source>
          <target state="translated">工具模块</target>
        </trans-unit>
        <trans-unit id="9371c7c885849232742553f842dca9202b5ed289" translate="yes" xml:space="preserve">
          <source>Module parsexml</source>
          <target state="translated">模块 parsexml</target>
        </trans-unit>
        <trans-unit id="20024d265db3ebf3a4cb1f9d150f212626383df7" translate="yes" xml:space="preserve">
          <source>Module pcre</source>
          <target state="translated">Pcre模块</target>
        </trans-unit>
        <trans-unit id="a17a4c9cec16cef361a14841e228e5ed78a25395" translate="yes" xml:space="preserve">
          <source>Module pegs</source>
          <target state="translated">钉子模块</target>
        </trans-unit>
        <trans-unit id="5f3bf0ccd39bc7809674b2d661113030c738201e" translate="yes" xml:space="preserve">
          <source>Module posix</source>
          <target state="translated">Posix模块</target>
        </trans-unit>
        <trans-unit id="eef6ef7935050ba1da22c08049e0e742ab0545c6" translate="yes" xml:space="preserve">
          <source>Module postgres</source>
          <target state="translated">Postgres模块</target>
        </trans-unit>
        <trans-unit id="4c337d9754fa6144e8e8c63eb6714830a7bf2680" translate="yes" xml:space="preserve">
          <source>Module random</source>
          <target state="translated">随机模块</target>
        </trans-unit>
        <trans-unit id="6f3863bd09c8389a708515de060c50fe217a1fc5" translate="yes" xml:space="preserve">
          <source>Module rationals</source>
          <target state="translated">模块理由</target>
        </trans-unit>
        <trans-unit id="1c6043ad9977193e14836b1453a2c14e877b9c12" translate="yes" xml:space="preserve">
          <source>Module re</source>
          <target state="translated">模块重新</target>
        </trans-unit>
        <trans-unit id="beb8a46432b339ddaa74839d412412426afb7728" translate="yes" xml:space="preserve">
          <source>Module rlocks</source>
          <target state="translated">模块锁</target>
        </trans-unit>
        <trans-unit id="373d2a7e384e4c78df72f2a532ade493280ab5b9" translate="yes" xml:space="preserve">
          <source>Module ropes</source>
          <target state="translated">模块绳索</target>
        </trans-unit>
        <trans-unit id="791fafc4980538594d1205be2e024d8f062a8ef6" translate="yes" xml:space="preserve">
          <source>Module rst</source>
          <target state="translated">模块rst</target>
        </trans-unit>
        <trans-unit id="e62ac437c8e15e65ba3f4a9ec5166f39349d24d8" translate="yes" xml:space="preserve">
          <source>Module rstast</source>
          <target state="translated">模块rstast</target>
        </trans-unit>
        <trans-unit id="71d839f9565a57347512e1bcb1209ad6ecbd1571" translate="yes" xml:space="preserve">
          <source>Module rstgen</source>
          <target state="translated">模块rstgen</target>
        </trans-unit>
        <trans-unit id="64202e11eebaa8fdc9db2592feeeca4f21b321b4" translate="yes" xml:space="preserve">
          <source>Module rtarrays</source>
          <target state="translated">模块rtarrays</target>
        </trans-unit>
        <trans-unit id="34de3c41db61af2ec348412e142cf1de55f30e2c" translate="yes" xml:space="preserve">
          <source>Module scgi</source>
          <target state="translated">模块scgi</target>
        </trans-unit>
        <trans-unit id="9d18a075abac676c24c84bba7822fb5ce2702cec" translate="yes" xml:space="preserve">
          <source>Module scope</source>
          <target state="translated">模块范围</target>
        </trans-unit>
        <trans-unit id="b6a250923bc9b9d586fc748c435010dc3db2a298" translate="yes" xml:space="preserve">
          <source>Module segfaults</source>
          <target state="translated">模块隔离故障</target>
        </trans-unit>
        <trans-unit id="8208cbe439f9b79060081af450aa66cdb0a714b6" translate="yes" xml:space="preserve">
          <source>Module selectors</source>
          <target state="translated">模块选择器</target>
        </trans-unit>
        <trans-unit id="23026b5c559a2292c7babd2476fc9f08c5816964" translate="yes" xml:space="preserve">
          <source>Module sequtils</source>
          <target state="translated">模块化附件</target>
        </trans-unit>
        <trans-unit id="c3ea468cd06b16c0644d2bacc8da61f318bab4bb" translate="yes" xml:space="preserve">
          <source>Module sets</source>
          <target state="translated">模块组</target>
        </trans-unit>
        <trans-unit id="a16a3e9b2eb88fe04764ed85fb0218873cc38566" translate="yes" xml:space="preserve">
          <source>Module sexp</source>
          <target state="translated">模块sexp</target>
        </trans-unit>
        <trans-unit id="59d0872f6bd60a77e18aa4238e904f432277b85d" translate="yes" xml:space="preserve">
          <source>Module sha1</source>
          <target state="translated">模块sha1</target>
        </trans-unit>
        <trans-unit id="4ece62635ed6e99fbdb3e080b7996745d5c3b1f3" translate="yes" xml:space="preserve">
          <source>Module sharedlist</source>
          <target state="translated">模块共享列表</target>
        </trans-unit>
        <trans-unit id="b5e68bfc8c55fb54fde0c83c3f95af5feaf92c9b" translate="yes" xml:space="preserve">
          <source>Module sharedtables</source>
          <target state="translated">模块共享表</target>
        </trans-unit>
        <trans-unit id="c339964428c500099d3daed6fb8542e3b613f1ef" translate="yes" xml:space="preserve">
          <source>Module smtp</source>
          <target state="translated">模块smtp</target>
        </trans-unit>
        <trans-unit id="ac4edb7026adc886e3dd2c3c0e2fa6b2624eac99" translate="yes" xml:space="preserve">
          <source>Module sockets</source>
          <target state="translated">模块插座</target>
        </trans-unit>
        <trans-unit id="44b9eae64da1d100a47749f8e94861aceb4e1953" translate="yes" xml:space="preserve">
          <source>Module sqlite3</source>
          <target state="translated">模块 sqlite3</target>
        </trans-unit>
        <trans-unit id="8c907d2d3470228660aa0f1c6e876cce39cd9be0" translate="yes" xml:space="preserve">
          <source>Module ssl</source>
          <target state="translated">模块ssl</target>
        </trans-unit>
        <trans-unit id="5dddec2bc7b6889e3d6e4572f0e2abcd568ae642" translate="yes" xml:space="preserve">
          <source>Module stats</source>
          <target state="translated">模块统计</target>
        </trans-unit>
        <trans-unit id="af7ea72f6db5731696a9ec545d89e8dbf5355b5e" translate="yes" xml:space="preserve">
          <source>Module streams</source>
          <target state="translated">模块流</target>
        </trans-unit>
        <trans-unit id="d563539aac0aa375abd30d9cff848fd83c1d6b90" translate="yes" xml:space="preserve">
          <source>Module strformat</source>
          <target state="translated">模块strformat</target>
        </trans-unit>
        <trans-unit id="c5b35d487655735440b1511f4cbcb6212ffb09bf" translate="yes" xml:space="preserve">
          <source>Module strmisc</source>
          <target state="translated">模块strmisc</target>
        </trans-unit>
        <trans-unit id="39a556995953f0750f993afaabbda0fb9aa0c361" translate="yes" xml:space="preserve">
          <source>Module strscans</source>
          <target state="translated">模块strscans</target>
        </trans-unit>
        <trans-unit id="9add54a0554d7d5e3b57ccafbebed36cfff3a00a" translate="yes" xml:space="preserve">
          <source>Module strtabs</source>
          <target state="translated">模块strtabs</target>
        </trans-unit>
        <trans-unit id="2c2fe9377d124f6f70ba53c4aac93232b71c1394" translate="yes" xml:space="preserve">
          <source>Module strutils</source>
          <target state="translated">模块结构</target>
        </trans-unit>
        <trans-unit id="c427c4ed878b917bab65e9b41afb7305c3c93c47" translate="yes" xml:space="preserve">
          <source>Module subexes</source>
          <target state="translated">模块子外</target>
        </trans-unit>
        <trans-unit id="2ff9cf6c55f0b207b0fa1b96a01a770ee71c8eaa" translate="yes" xml:space="preserve">
          <source>Module sugar</source>
          <target state="translated">模块糖</target>
        </trans-unit>
        <trans-unit id="de70d79767a9e812db99a7c477172374c0a8abe1" translate="yes" xml:space="preserve">
          <source>Module system</source>
          <target state="translated">模块系统</target>
        </trans-unit>
        <trans-unit id="e9cc05615900094d98054d721ed949701ef00a47" translate="yes" xml:space="preserve">
          <source>Module tables</source>
          <target state="translated">模块表</target>
        </trans-unit>
        <trans-unit id="12b55983071a387f9c09feaf0f6a54c990c5be1d" translate="yes" xml:space="preserve">
          <source>Module terminal</source>
          <target state="translated">模块终端</target>
        </trans-unit>
        <trans-unit id="614274ba9e86ccebbb22de6ea6a0cbd12ff4b918" translate="yes" xml:space="preserve">
          <source>Module that implements &lt;code&gt;gorge&lt;/code&gt; for the compiler.</source>
          <target state="translated">为编译器实现 &lt;code&gt;gorge&lt;/code&gt; 的模块。</target>
        </trans-unit>
        <trans-unit id="84ba9986fea98d5aed3aa1e050cd37789056e75a" translate="yes" xml:space="preserve">
          <source>Module that implements a fixed length array whose size is determined at runtime. Note: This is not ready for other people to use!</source>
          <target state="translated">实现固定长度数组的模块,其大小在运行时确定。注意:这还没有准备好让其他人使用。</target>
        </trans-unit>
        <trans-unit id="3b2dabb54c51f17c55a0e6927caa5f742504ae33" translate="yes" xml:space="preserve">
          <source>Module threadpool</source>
          <target state="translated">模块线程池</target>
        </trans-unit>
        <trans-unit id="f92a75aeabfd1c4044569aecab8ccb991701806b" translate="yes" xml:space="preserve">
          <source>Module threads</source>
          <target state="translated">模块线程</target>
        </trans-unit>
        <trans-unit id="fb3625f5ec0037d48d6c0cb336a239dd3b00b7ca" translate="yes" xml:space="preserve">
          <source>Module times</source>
          <target state="translated">模块时间</target>
        </trans-unit>
        <trans-unit id="80fdbaacf746a3cedeab4e5928808c2384a50612" translate="yes" xml:space="preserve">
          <source>Module typeinfo</source>
          <target state="translated">模块类型信息</target>
        </trans-unit>
        <trans-unit id="2b741b4fc7fd10f81b2d720dc6c96f43017249fb" translate="yes" xml:space="preserve">
          <source>Module typetraits</source>
          <target state="translated">模块类型四</target>
        </trans-unit>
        <trans-unit id="9043c86e7cedc7aab24be69a0efdba5ddf0f80e5" translate="yes" xml:space="preserve">
          <source>Module unicode</source>
          <target state="translated">模块unicode</target>
        </trans-unit>
        <trans-unit id="7085badef4953ee4bbceb9688b13d4140b27c724" translate="yes" xml:space="preserve">
          <source>Module unittest</source>
          <target state="translated">模块单元测试</target>
        </trans-unit>
        <trans-unit id="8bbd7d4f48877a7314d216e6ebdb985da4bfafac" translate="yes" xml:space="preserve">
          <source>Module uri</source>
          <target state="translated">模块URI</target>
        </trans-unit>
        <trans-unit id="8a680992d6079b9c0e11b05251fd8f87bfbf1fe8" translate="yes" xml:space="preserve">
          <source>Module winlean</source>
          <target state="translated">模块winlean</target>
        </trans-unit>
        <trans-unit id="d8fdebbbc5615918cb9d798309cb31cd866e4994" translate="yes" xml:space="preserve">
          <source>Module xmldom</source>
          <target state="translated">模块xmldom</target>
        </trans-unit>
        <trans-unit id="f295719f36ed63526a4da7b30de4cad8a8999c32" translate="yes" xml:space="preserve">
          <source>Module xmldomparser</source>
          <target state="translated">模块xmldomparser</target>
        </trans-unit>
        <trans-unit id="634e83af2de2c8fae54f36c85ad255fa78fdc1fe" translate="yes" xml:space="preserve">
          <source>Module xmlparser</source>
          <target state="translated">模块xmlparser</target>
        </trans-unit>
        <trans-unit id="fffc921107774b45b37fb11a2ae26e6c1756df47" translate="yes" xml:space="preserve">
          <source>Module xmltree</source>
          <target state="translated">模块xmltree</target>
        </trans-unit>
        <trans-unit id="45af4cf6ccf032d5220bb10282d464dff0f1c268" translate="yes" xml:space="preserve">
          <source>ModuleGraph:</source>
          <target state="translated">ModuleGraph:</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="d4bb1d0c8920c90ab574ded6626feabfc7eb5056" translate="yes" xml:space="preserve">
          <source>Modules for JS backend</source>
          <target state="translated">JS后台模块</target>
        </trans-unit>
        <trans-unit id="04ed0b03aed0cadb43ffc6bfd838816a8c42b369" translate="yes" xml:space="preserve">
          <source>Modules like &lt;code&gt;os&lt;/code&gt; and &lt;code&gt;osproc&lt;/code&gt; use the Ansi versions of the Windows API. The default build uses the Unicode version.</source>
          <target state="translated">诸如 &lt;code&gt;os&lt;/code&gt; 和 &lt;code&gt;osproc&lt;/code&gt; 之类的模块使用Windows API的Ansi版本。默认版本使用Unicode版本。</target>
        </trans-unit>
        <trans-unit id="1c9091d31470e1e3096ea3102d2a4a3a375f35ee" translate="yes" xml:space="preserve">
          <source>Modules: &lt;a href=&quot;aliases&quot;&gt;aliases&lt;/a&gt;, &lt;a href=&quot;asciitables&quot;&gt;asciitables&lt;/a&gt;, &lt;a href=&quot;ast&quot;&gt;ast&lt;/a&gt;, &lt;a href=&quot;astalgo&quot;&gt;astalgo&lt;/a&gt;, &lt;a href=&quot;bitsets&quot;&gt;bitsets&lt;/a&gt;, &lt;a href=&quot;btrees&quot;&gt;btrees&lt;/a&gt;, &lt;a href=&quot;ccgmerge&quot;&gt;ccgmerge&lt;/a&gt;, &lt;a href=&quot;ccgutils&quot;&gt;ccgutils&lt;/a&gt;, &lt;a href=&quot;cgen&quot;&gt;cgen&lt;/a&gt;, &lt;a href=&quot;cgendata&quot;&gt;cgendata&lt;/a&gt;, &lt;a href=&quot;cgmeth&quot;&gt;cgmeth&lt;/a&gt;, &lt;a href=&quot;closureiters&quot;&gt;closureiters&lt;/a&gt;, &lt;a href=&quot;cmdlinehelper&quot;&gt;cmdlinehelper&lt;/a&gt;, &lt;a href=&quot;commands&quot;&gt;commands&lt;/a&gt;, &lt;a href=&quot;condsyms&quot;&gt;condsyms&lt;/a&gt;, &lt;a href=&quot;depends&quot;&gt;depends&lt;/a&gt;, &lt;a href=&quot;dfa&quot;&gt;dfa&lt;/a&gt;, &lt;a href=&quot;docgen&quot;&gt;docgen&lt;/a&gt;, &lt;a href=&quot;docgen2&quot;&gt;docgen2&lt;/a&gt;, &lt;a href=&quot;enumtostr&quot;&gt;enumtostr&lt;/a&gt;, &lt;a href=&quot;evaltempl&quot;&gt;evaltempl&lt;/a&gt;, &lt;a href=&quot;extccomp&quot;&gt;extccomp&lt;/a&gt;, &lt;a href=&quot;filter_tmpl&quot;&gt;filter_tmpl&lt;/a&gt;, &lt;a href=&quot;filters&quot;&gt;filters&lt;/a&gt;, &lt;a href=&quot;gorgeimpl&quot;&gt;gorgeimpl&lt;/a&gt;, &lt;a href=&quot;guards&quot;&gt;guards&lt;/a&gt;, &lt;a href=&quot;idents&quot;&gt;idents&lt;/a&gt;, &lt;a href=&quot;idgen&quot;&gt;idgen&lt;/a&gt;, &lt;a href=&quot;importer&quot;&gt;importer&lt;/a&gt;, &lt;a href=&quot;incremental&quot;&gt;incremental&lt;/a&gt;, &lt;a href=&quot;index&quot;&gt;index&lt;/a&gt;, &lt;a href=&quot;injectdestructors&quot;&gt;injectdestructors&lt;/a&gt;, &lt;a href=&quot;int128&quot;&gt;int128&lt;/a&gt;, &lt;a href=&quot;isolation_check&quot;&gt;isolation_check&lt;/a&gt;, &lt;a href=&quot;jsgen&quot;&gt;jsgen&lt;/a&gt;, &lt;a href=&quot;lambdalifting&quot;&gt;lambdalifting&lt;/a&gt;, &lt;a href=&quot;lexer&quot;&gt;lexer&lt;/a&gt;, &lt;a href=&quot;liftdestructors&quot;&gt;liftdestructors&lt;/a&gt;, &lt;a href=&quot;liftlocals&quot;&gt;liftlocals&lt;/a&gt;, &lt;a href=&quot;lineinfos&quot;&gt;lineinfos&lt;/a&gt;, &lt;a href=&quot;linter&quot;&gt;linter&lt;/a&gt;, &lt;a href=&quot;llstream&quot;&gt;llstream&lt;/a&gt;, &lt;a href=&quot;lookups&quot;&gt;lookups&lt;/a&gt;, &lt;a href=&quot;lowerings&quot;&gt;lowerings&lt;/a&gt;, &lt;a href=&quot;macrocacheimpl&quot;&gt;macrocacheimpl&lt;/a&gt;, &lt;a href=&quot;magicsys&quot;&gt;magicsys&lt;/a&gt;, &lt;a href=&quot;main&quot;&gt;main&lt;/a&gt;, &lt;a href=&quot;modulegraphs&quot;&gt;modulegraphs&lt;/a&gt;, &lt;a href=&quot;modulepaths&quot;&gt;modulepaths&lt;/a&gt;, &lt;a href=&quot;modules&quot;&gt;modules&lt;/a&gt;, &lt;a href=&quot;msgs&quot;&gt;msgs&lt;/a&gt;, &lt;a href=&quot;ndi&quot;&gt;ndi&lt;/a&gt;, &lt;a href=&quot;nimblecmd&quot;&gt;nimblecmd&lt;/a&gt;, &lt;a href=&quot;nimconf&quot;&gt;nimconf&lt;/a&gt;, &lt;a href=&quot;nimfix/prettybase&quot;&gt;nimfix/prettybase&lt;/a&gt;, &lt;a href=&quot;nimlexbase&quot;&gt;nimlexbase&lt;/a&gt;, &lt;a href=&quot;nimpaths&quot;&gt;nimpaths&lt;/a&gt;, &lt;a href=&quot;nimsets&quot;&gt;nimsets&lt;/a&gt;, &lt;a href=&quot;nodejs&quot;&gt;nodejs&lt;/a&gt;, &lt;a href=&quot;nversion&quot;&gt;nversion&lt;/a&gt;, &lt;a href=&quot;optimizer&quot;&gt;optimizer&lt;/a&gt;, &lt;a href=&quot;options&quot;&gt;options&lt;/a&gt;, &lt;a href=&quot;parampatterns&quot;&gt;parampatterns&lt;/a&gt;, &lt;a href=&quot;parser&quot;&gt;parser&lt;/a&gt;, &lt;a href=&quot;passaux&quot;&gt;passaux&lt;/a&gt;, &lt;a href=&quot;passes&quot;&gt;passes&lt;/a&gt;, &lt;a href=&quot;pathutils&quot;&gt;pathutils&lt;/a&gt;, &lt;a href=&quot;patterns&quot;&gt;patterns&lt;/a&gt;, &lt;a href=&quot;platform&quot;&gt;platform&lt;/a&gt;, &lt;a href=&quot;plugins/active&quot;&gt;plugins/active&lt;/a&gt;, &lt;a href=&quot;plugins/itersgen&quot;&gt;plugins/itersgen&lt;/a&gt;, &lt;a href=&quot;plugins/locals&quot;&gt;plugins/locals&lt;/a&gt;, &lt;a href=&quot;pluginsupport&quot;&gt;pluginsupport&lt;/a&gt;, &lt;a href=&quot;pragmas&quot;&gt;pragmas&lt;/a&gt;, &lt;a href=&quot;prefixmatches&quot;&gt;prefixmatches&lt;/a&gt;, &lt;a href=&quot;procfind&quot;&gt;procfind&lt;/a&gt;, &lt;a href=&quot;renderer&quot;&gt;renderer&lt;/a&gt;, &lt;a href=&quot;renderverbatim&quot;&gt;renderverbatim&lt;/a&gt;, &lt;a href=&quot;reorder&quot;&gt;reorder&lt;/a&gt;, &lt;a href=&quot;rod&quot;&gt;rod&lt;/a&gt;, &lt;a href=&quot;rodutils&quot;&gt;rodutils&lt;/a&gt;, &lt;a href=&quot;ropes&quot;&gt;ropes&lt;/a&gt;, &lt;a href=&quot;saturate&quot;&gt;saturate&lt;/a&gt;, &lt;a href=&quot;scriptconfig&quot;&gt;scriptconfig&lt;/a&gt;, &lt;a href=&quot;sem&quot;&gt;sem&lt;/a&gt;, &lt;a href=&quot;semdata&quot;&gt;semdata&lt;/a&gt;, &lt;a href=&quot;semfold&quot;&gt;semfold&lt;/a&gt;, &lt;a href=&quot;semmacrosanity&quot;&gt;semmacrosanity&lt;/a&gt;, &lt;a href=&quot;semparallel&quot;&gt;semparallel&lt;/a&gt;, &lt;a href=&quot;sempass2&quot;&gt;sempass2&lt;/a&gt;, &lt;a href=&quot;semtypinst&quot;&gt;semtypinst&lt;/a&gt;, &lt;a href=&quot;sighashes&quot;&gt;sighashes&lt;/a&gt;, &lt;a href=&quot;sigmatch&quot;&gt;sigmatch&lt;/a&gt;, &lt;a href=&quot;sourcemap&quot;&gt;sourcemap&lt;/a&gt;, &lt;a href=&quot;spawn&quot;&gt;spawn&lt;/a&gt;, &lt;a href=&quot;strutils2&quot;&gt;strutils2&lt;/a&gt;, &lt;a href=&quot;syntaxes&quot;&gt;syntaxes&lt;/a&gt;, &lt;a href=&quot;transf&quot;&gt;transf&lt;/a&gt;, &lt;a href=&quot;trees&quot;&gt;trees&lt;/a&gt;, &lt;a href=&quot;treetab&quot;&gt;treetab&lt;/a&gt;, &lt;a href=&quot;typeallowed&quot;&gt;typeallowed&lt;/a&gt;, &lt;a href=&quot;types&quot;&gt;types&lt;/a&gt;, &lt;a href=&quot;typesrenderer&quot;&gt;typesrenderer&lt;/a&gt;, &lt;a href=&quot;varpartitions&quot;&gt;varpartitions&lt;/a&gt;, &lt;a href=&quot;vm&quot;&gt;vm&lt;/a&gt;, &lt;a href=&quot;vmconv&quot;&gt;vmconv&lt;/a&gt;, &lt;a href=&quot;vmdef&quot;&gt;vmdef&lt;/a&gt;, &lt;a href=&quot;vmdeps&quot;&gt;vmdeps&lt;/a&gt;, &lt;a href=&quot;vmgen&quot;&gt;vmgen&lt;/a&gt;, &lt;a href=&quot;vmmarshal&quot;&gt;vmmarshal&lt;/a&gt;, &lt;a href=&quot;vmprofiler&quot;&gt;vmprofiler&lt;/a&gt;, &lt;a href=&quot;wordrecg&quot;&gt;wordrecg&lt;/a&gt;.</source>
          <target state="translated">模块：&lt;a href=&quot;aliases&quot;&gt;别名&lt;/a&gt;，&lt;a href=&quot;asciitables&quot;&gt;asciitables&lt;/a&gt;，&lt;a href=&quot;ast&quot;&gt;AST&lt;/a&gt;，&lt;a href=&quot;astalgo&quot;&gt;astalgo&lt;/a&gt;，&lt;a href=&quot;bitsets&quot;&gt;位集&lt;/a&gt;，&lt;a href=&quot;btrees&quot;&gt;B树&lt;/a&gt;，&lt;a href=&quot;ccgmerge&quot;&gt;ccgmerge&lt;/a&gt;，&lt;a href=&quot;ccgutils&quot;&gt;ccgutils&lt;/a&gt;，&lt;a href=&quot;cgen&quot;&gt;CGEN&lt;/a&gt;，&lt;a href=&quot;cgendata&quot;&gt;cgendata&lt;/a&gt;，&lt;a href=&quot;cgmeth&quot;&gt;cgmeth&lt;/a&gt;，&lt;a href=&quot;closureiters&quot;&gt;closureiters&lt;/a&gt;，&lt;a href=&quot;cmdlinehelper&quot;&gt;cmdlinehelper&lt;/a&gt;，&lt;a href=&quot;commands&quot;&gt;命令&lt;/a&gt;，&lt;a href=&quot;condsyms&quot;&gt;condsyms&lt;/a&gt;，&lt;a href=&quot;depends&quot;&gt;取决于&lt;/a&gt;，&lt;a href=&quot;dfa&quot;&gt;DFA&lt;/a&gt;，&lt;a href=&quot;docgen&quot;&gt;docgen&lt;/a&gt;，&lt;a href=&quot;docgen2&quot;&gt;docgen2&lt;/a&gt;，&lt;a href=&quot;enumtostr&quot;&gt;enumtostr&lt;/a&gt;，&lt;a href=&quot;evaltempl&quot;&gt;evaltempl&lt;/a&gt;，&lt;a href=&quot;extccomp&quot;&gt;extccomp&lt;/a&gt;，&lt;a href=&quot;filter_tmpl&quot;&gt;filter_tmpl&lt;/a&gt;，&lt;a href=&quot;filters&quot;&gt;过滤器&lt;/a&gt;，&lt;a href=&quot;gorgeimpl&quot;&gt;gorgeimpl&lt;/a&gt;，&lt;a href=&quot;guards&quot;&gt;警卫&lt;/a&gt;，&lt;a href=&quot;idents&quot;&gt;idents&lt;/a&gt;，&lt;a href=&quot;idgen&quot;&gt;idgen&lt;/a&gt;，&lt;a href=&quot;importer&quot;&gt;进口商&lt;/a&gt;，&lt;a href=&quot;incremental&quot;&gt;增量&lt;/a&gt;，&lt;a href=&quot;index&quot;&gt;指数&lt;/a&gt;，&lt;a href=&quot;injectdestructors&quot;&gt;injectdestructors&lt;/a&gt;，&lt;a href=&quot;int128&quot;&gt;int128&lt;/a&gt;，&lt;a href=&quot;isolation_check&quot;&gt;isolation_check&lt;/a&gt;，&lt;a href=&quot;jsgen&quot;&gt;jsgen&lt;/a&gt;，&lt;a href=&quot;lambdalifting&quot;&gt;lambdalifting&lt;/a&gt;，&lt;a href=&quot;lexer&quot;&gt;词法&lt;/a&gt;，&lt;a href=&quot;liftdestructors&quot;&gt;liftdestructors&lt;/a&gt;，&lt;a href=&quot;liftlocals&quot;&gt;liftlocals&lt;/a&gt;，&lt;a href=&quot;lineinfos&quot;&gt;lineinfos&lt;/a&gt;，&lt;a href=&quot;linter&quot;&gt;棉短绒&lt;/a&gt;，&lt;a href=&quot;llstream&quot;&gt;llstream&lt;/a&gt;，&lt;a href=&quot;lookups&quot;&gt;查找&lt;/a&gt;，&lt;a href=&quot;lowerings&quot;&gt;下降部&lt;/a&gt;，&lt;a href=&quot;macrocacheimpl&quot;&gt;macrocacheimpl&lt;/a&gt;，&lt;a href=&quot;magicsys&quot;&gt;magicsys&lt;/a&gt;，&lt;a href=&quot;main&quot;&gt;主&lt;/a&gt;，&lt;a href=&quot;modulegraphs&quot;&gt;modulegraphs&lt;/a&gt;，&lt;a href=&quot;modulepaths&quot;&gt;modulepaths&lt;/a&gt;，&lt;a href=&quot;modules&quot;&gt;模块&lt;/a&gt;，&lt;a href=&quot;msgs&quot;&gt;封邮件&lt;/a&gt;，&lt;a href=&quot;ndi&quot;&gt;NDI&lt;/a&gt;，&lt;a href=&quot;nimblecmd&quot;&gt;nimblecmd&lt;/a&gt;，&lt;a href=&quot;nimconf&quot;&gt;nimconf&lt;/a&gt;，&lt;a href=&quot;nimfix/prettybase&quot;&gt;nimfix / prettybase&lt;/a&gt;，&lt;a href=&quot;nimlexbase&quot;&gt;nimlexbase&lt;/a&gt;，&lt;a href=&quot;nimpaths&quot;&gt;nimpaths&lt;/a&gt;，&lt;a href=&quot;nimsets&quot;&gt;nimsets&lt;/a&gt;，&lt;a href=&quot;nodejs&quot;&gt;的NodeJS&lt;/a&gt;，&lt;a href=&quot;nversion&quot;&gt;n版本&lt;/a&gt;，&lt;a href=&quot;optimizer&quot;&gt;优化器&lt;/a&gt;，&lt;a href=&quot;options&quot;&gt;选择&lt;/a&gt;，&lt;a href=&quot;parampatterns&quot;&gt;parampatterns&lt;/a&gt;，&lt;a href=&quot;parser&quot;&gt;解析器&lt;/a&gt;，&lt;a href=&quot;passaux&quot;&gt;passaux&lt;/a&gt;，&lt;a href=&quot;passes&quot;&gt;传递&lt;/a&gt;，&lt;a href=&quot;pathutils&quot;&gt;pathutils&lt;/a&gt;，&lt;a href=&quot;patterns&quot;&gt;图案&lt;/a&gt;，&lt;a href=&quot;platform&quot;&gt;平台&lt;/a&gt;，&lt;a href=&quot;plugins/active&quot;&gt;插件/积极的&lt;/a&gt;，&lt;a href=&quot;plugins/itersgen&quot;&gt;插件/ itersgen&lt;/a&gt;，&lt;a href=&quot;plugins/locals&quot;&gt;插件/当地人&lt;/a&gt;，&lt;a href=&quot;pluginsupport&quot;&gt;pluginsupport&lt;/a&gt;，&lt;a href=&quot;pragmas&quot;&gt;编译指示&lt;/a&gt;，&lt;a href=&quot;prefixmatches&quot;&gt;prefixmatches&lt;/a&gt;，&lt;a href=&quot;procfind&quot;&gt;procfind&lt;/a&gt;，&lt;a href=&quot;renderer&quot;&gt;渲染器&lt;/a&gt;，&lt;a href=&quot;renderverbatim&quot;&gt;renderverbatim&lt;/a&gt;，&lt;a href=&quot;reorder&quot;&gt;重新排序&lt;/a&gt;，&lt;a href=&quot;rod&quot;&gt;杆&lt;/a&gt;，&lt;a href=&quot;rodutils&quot;&gt;rodutils&lt;/a&gt;，&lt;a href=&quot;ropes&quot;&gt;绳索&lt;/a&gt;，&lt;a href=&quot;saturate&quot;&gt;饱和&lt;/a&gt;，&lt;a href=&quot;scriptconfig&quot;&gt;scriptconfig&lt;/a&gt;，&lt;a href=&quot;sem&quot;&gt;SEM&lt;/a&gt;，&lt;a href=&quot;semdata&quot;&gt;semdata&lt;/a&gt;，&lt;a href=&quot;semfold&quot;&gt;semfold&lt;/a&gt;，&lt;a href=&quot;semmacrosanity&quot;&gt;semmacrosanity&lt;/a&gt;，&lt;a href=&quot;semparallel&quot;&gt;semparallel&lt;/a&gt;，&lt;a href=&quot;sempass2&quot;&gt;sempass2&lt;/a&gt;，&lt;a href=&quot;semtypinst&quot;&gt;semtypinst&lt;/a&gt;，&lt;a href=&quot;sighashes&quot;&gt;sighashes&lt;/a&gt;，&lt;a href=&quot;sigmatch&quot;&gt;sigmatch&lt;/a&gt;，&lt;a href=&quot;sourcemap&quot;&gt;sourcemap&lt;/a&gt;，&lt;a href=&quot;spawn&quot;&gt;产卵&lt;/a&gt;，&lt;a href=&quot;strutils2&quot;&gt;strutils2&lt;/a&gt;，&lt;a href=&quot;syntaxes&quot;&gt;语法&lt;/a&gt;，&lt;a href=&quot;transf&quot;&gt;TRANSF&lt;/a&gt;，&lt;a href=&quot;trees&quot;&gt;树木&lt;/a&gt;，&lt;a href=&quot;treetab&quot;&gt;treetab&lt;/a&gt;，&lt;a href=&quot;typeallowed&quot;&gt;typeallowed&lt;/a&gt;，&lt;a href=&quot;types&quot;&gt;类型&lt;/a&gt;，&lt;a href=&quot;typesrenderer&quot;&gt;typesrenderer&lt;/a&gt;，&lt;a href=&quot;varpartitions&quot;&gt;varpartitions&lt;/a&gt;，&lt;a href=&quot;vm&quot;&gt;VM&lt;/a&gt;，&lt;a href=&quot;vmconv&quot;&gt;vmconv&lt;/a&gt;，&lt;a href=&quot;vmdef&quot;&gt;vmdef&lt;/a&gt;，&lt;a href=&quot;vmdeps&quot;&gt;vmdeps&lt;/a&gt;，&lt;a href=&quot;vmgen&quot;&gt;VMGEN&lt;/a&gt;，&lt;a href=&quot;vmmarshal&quot;&gt;vmmarshal&lt;/a&gt;，&lt;a href=&quot;vmprofiler&quot;&gt;vmprofiler&lt;/a&gt;，&lt;a href=&quot;wordrecg&quot;&gt;wordrecg&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2571c920aab1823fe7e5db3bd08bf448ebf8ac40" translate="yes" xml:space="preserve">
          <source>Month and day names from the passed in &lt;code&gt;loc&lt;/code&gt; are used.</source>
          <target state="translated">使用传入的 &lt;code&gt;loc&lt;/code&gt; 中的月份和日期名称。</target>
        </trans-unit>
        <trans-unit id="5492a7b7e10ca5189dd3f4f7cd04aaa834acbe84" translate="yes" xml:space="preserve">
          <source>More examples with custom pragmas:</source>
          <target state="translated">更多的例子与自定义实用名词。</target>
        </trans-unit>
        <trans-unit id="02e1b6aeefcbcdce8ddb030e0d03e46f8f19c14b" translate="yes" xml:space="preserve">
          <source>More information: &lt;a href=&quot;http://xoroshiro.di.unimi.it&quot;&gt;http://xoroshiro.di.unimi.it&lt;/a&gt;/</source>
          <target state="translated">更多信息：&lt;a href=&quot;http://xoroshiro.di.unimi.it&quot;&gt;http://xoroshiro.di.unimi.it&lt;/a&gt; /</target>
        </trans-unit>
        <trans-unit id="9f084f0b8d3d49062654975a28486088dd9441d9" translate="yes" xml:space="preserve">
          <source>More than one level of &lt;code&gt;ref&lt;/code&gt; is generally not supported (for example, the type &lt;code&gt;ref ref int&lt;/code&gt;).</source>
          <target state="translated">通常不支持超过一个级别的 &lt;code&gt;ref&lt;/code&gt; （例如，类型 &lt;code&gt;ref ref int&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2fa11c0cc6358778587e65242e73c28f8b0ce69a" translate="yes" xml:space="preserve">
          <source>Most (if not all) modules that use asyncio provide a userArg which is passed on with the events. The type that you set userArg to must be inheriting from &lt;code&gt;RootObj&lt;/code&gt;!</source>
          <target state="translated">大多数使用asyncio的模块（如果不是全部的话）都提供一个userArg，随事件一起传递。您将userArg设置为的类型必须继承自 &lt;code&gt;RootObj&lt;/code&gt; ！</target>
        </trans-unit>
        <trans-unit id="3a3648df8257d95dad8a542820feec7313dcffba" translate="yes" xml:space="preserve">
          <source>Most calling conventions exist only for the Windows 32-bit platform.</source>
          <target state="translated">大多数调用惯例只存在于Windows 32位平台。</target>
        </trans-unit>
        <trans-unit id="d682310dcece700c3a8748a725359d19f632cdec" translate="yes" xml:space="preserve">
          <source>Most native Nim types support conversion to strings with the special &lt;code&gt;$&lt;/code&gt; proc. When calling the &lt;code&gt;echo&lt;/code&gt; proc, for example, the built-in stringify operation for the parameter is called:</source>
          <target state="translated">大多数本机Nim类型都支持使用特殊的 &lt;code&gt;$&lt;/code&gt; proc 转换为字符串。例如，在调用 &lt;code&gt;echo&lt;/code&gt; proc时，将调用参数的内置stringify操作：</target>
        </trans-unit>
        <trans-unit id="c330bf74003c40f0baff1596cb0fe1aa69f44229" translate="yes" xml:space="preserve">
          <source>Most often integers are used for counting objects that reside in memory, so &lt;code&gt;int&lt;/code&gt; has the same size as a pointer.</source>
          <target state="translated">大多数情况下，整数用于计数驻留在内存中的对象，因此 &lt;code&gt;int&lt;/code&gt; 与指针的大小相同。</target>
        </trans-unit>
        <trans-unit id="2dcc64ab52a078dbecfc23dc0e106a84a69bd521" translate="yes" xml:space="preserve">
          <source>Most operations over an uninitialized ordered set will crash at runtime and &lt;a href=&quot;system#assert&quot;&gt;assert&lt;/a&gt; in debug builds. You can use this proc in your own procs to verify that ordered sets passed to your procs are correctly initialized. Example:</source>
          <target state="translated">在未初始化的有序集合的大多数操作都将崩溃在运行时&lt;a href=&quot;system#assert&quot;&gt;断言&lt;/a&gt;在调试版本。您可以在自己的proc中使用此proc来验证传递给proc的有序集是否已正确初始化。例：</target>
        </trans-unit>
        <trans-unit id="b286a20955238c202888cbd22fcba1b32dbb5ccf" translate="yes" xml:space="preserve">
          <source>Most operations over an uninitialized set will crash at runtime and &lt;a href=&quot;system#assert&quot;&gt;assert&lt;/a&gt; in debug builds. You can use this proc in your own procs to verify that sets passed to your procs are correctly initialized. Example:</source>
          <target state="translated">在未初始化的集中的大部分操作都将崩溃，在运行时&lt;a href=&quot;system#assert&quot;&gt;断言&lt;/a&gt;在调试版本。您可以在自己的proc中使用此proc来验证传递给proc的集合是否已正确初始化。例：</target>
        </trans-unit>
        <trans-unit id="40f1f54ed50170dad3e2a2e1db2410306c0d2895" translate="yes" xml:space="preserve">
          <source>Most procedures raise OSError on error, but some may return &lt;code&gt;-1&lt;/code&gt; or a boolean &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">大多数过程都会在出错时引发OSError，但是有些过程可能返回 &lt;code&gt;-1&lt;/code&gt; 或布尔值 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fbb5ab88dfbf525d498b45d241a40f2698fed97a" translate="yes" xml:space="preserve">
          <source>Mostly used by the &lt;a href=&quot;tables&quot;&gt;tables&lt;/a&gt; module, it can also be raised by other collection modules like &lt;a href=&quot;sets&quot;&gt;sets&lt;/a&gt; or &lt;a href=&quot;strtabs&quot;&gt;strtabs&lt;/a&gt;.</source>
          <target state="translated">它通常由&lt;a href=&quot;tables&quot;&gt;表&lt;/a&gt;模块使用，也可以由其他集合模块（例如&lt;a href=&quot;sets&quot;&gt;set&lt;/a&gt;或&lt;a href=&quot;strtabs&quot;&gt;strtabs）引发&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="61f1a209e9ed6e562f9c1c6f124c69f9a9eba631" translate="yes" xml:space="preserve">
          <source>Motivating example</source>
          <target state="translated">激励的例子</target>
        </trans-unit>
        <trans-unit id="7ff0881f9033325d1090cbf272495b3ea89cd9ef" translate="yes" xml:space="preserve">
          <source>Move optimization</source>
          <target state="translated">搬迁优化</target>
        </trans-unit>
        <trans-unit id="2b6e8935b04cd95a844be3385c3603f73b9ed882" translate="yes" xml:space="preserve">
          <source>Move semantics</source>
          <target state="translated">移动语义</target>
        </trans-unit>
        <trans-unit id="1f288c51d72ed4edb51f67db3842455159c11d70" translate="yes" xml:space="preserve">
          <source>Move the parser to the next token if the current token is of type &lt;code&gt;tokType&lt;/code&gt;, otherwise error.</source>
          <target state="translated">如果当前令牌的类型为 &lt;code&gt;tokType&lt;/code&gt; ，则将解析器移至下一个令牌，否则为错误。</target>
        </trans-unit>
        <trans-unit id="c81c947a10f9c6143adc1c3a38d64f8f832fabbb" translate="yes" xml:space="preserve">
          <source>Moves</source>
          <target state="translated">Moves</target>
        </trans-unit>
        <trans-unit id="e0d64e3d5a93d37faf19b2af1f3ffdda5f60517a" translate="yes" xml:space="preserve">
          <source>Moves a directory from &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="translated">将目录从 &lt;code&gt;source&lt;/code&gt; 移动到 &lt;code&gt;dest&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4406458901a000581b1c862bae39b54d20d9bf38" translate="yes" xml:space="preserve">
          <source>Moves a directory from &lt;em&gt;source&lt;/em&gt; to &lt;em&gt;dest&lt;/em&gt;. If this fails, &lt;em&gt;OSError&lt;/em&gt; is raised.</source>
          <target state="translated">将目录从&lt;em&gt;源&lt;/em&gt;移动到&lt;em&gt;dest&lt;/em&gt;。如果失败，则引发&lt;em&gt;OSError&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="6b8279a081b3908bd4de59af37b8dbc5210c5758" translate="yes" xml:space="preserve">
          <source>Moves a file from &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="translated">将文件从 &lt;code&gt;source&lt;/code&gt; 移动到 &lt;code&gt;dest&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a88abf00e872b645596ba5706595492621b50d3" translate="yes" xml:space="preserve">
          <source>Moves a file from &lt;em&gt;source&lt;/em&gt; to &lt;em&gt;dest&lt;/em&gt;. If this fails, &lt;em&gt;OSError&lt;/em&gt; is raised. Can be used to &lt;span id=&quot;rename-files_1&quot;&gt;rename files&lt;/span&gt;</source>
          <target state="translated">将文件从&lt;em&gt;源&lt;/em&gt;移动到&lt;em&gt;dest&lt;/em&gt;。如果失败，则引发&lt;em&gt;OSError&lt;/em&gt;。可用于&lt;span id=&quot;rename-files_1&quot;&gt;重命名文件&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="2b470b5d09fa4dacd5f5dc009186f1ab76afd105" translate="yes" xml:space="preserve">
          <source>Moves the cursor backward by &lt;code&gt;count&lt;/code&gt; columns.</source>
          <target state="translated">按 &lt;code&gt;count&lt;/code&gt; 列向后移动光标。</target>
        </trans-unit>
        <trans-unit id="8720bd922009aac72de226d7d61d6fe73ea2154f" translate="yes" xml:space="preserve">
          <source>Moves the cursor backward by &lt;em&gt;count&lt;/em&gt; columns.</source>
          <target state="translated">将光标向后移动&lt;em&gt;计数&lt;/em&gt;列。</target>
        </trans-unit>
        <trans-unit id="61c6c86793b16fc10ffabb4e266e0e2cc20085a4" translate="yes" xml:space="preserve">
          <source>Moves the cursor down by &lt;code&gt;count&lt;/code&gt; rows.</source>
          <target state="translated">将光标向下移动 &lt;code&gt;count&lt;/code&gt; 行。</target>
        </trans-unit>
        <trans-unit id="5b4f5707c476bf0444f3d7ca4829bce587056960" translate="yes" xml:space="preserve">
          <source>Moves the cursor down by &lt;em&gt;count&lt;/em&gt; rows.</source>
          <target state="translated">将光标向下移动&lt;em&gt;计数&lt;/em&gt;行。</target>
        </trans-unit>
        <trans-unit id="0033ea4c09f09bc8cd31b5b4e68024962a297c8e" translate="yes" xml:space="preserve">
          <source>Moves the cursor forward by &lt;code&gt;count&lt;/code&gt; columns.</source>
          <target state="translated">按 &lt;code&gt;count&lt;/code&gt; 列向前移动光标。</target>
        </trans-unit>
        <trans-unit id="5731b74c9a2498294ab69fa71acf35d7129365e9" translate="yes" xml:space="preserve">
          <source>Moves the cursor forward by &lt;em&gt;count&lt;/em&gt; columns.</source>
          <target state="translated">按&lt;em&gt;计数&lt;/em&gt;列向前移动光标。</target>
        </trans-unit>
        <trans-unit id="196387a42b37c9fe00e4b04b4f4d1f1e517cd60c" translate="yes" xml:space="preserve">
          <source>Moves the cursor up by &lt;code&gt;count&lt;/code&gt; rows.</source>
          <target state="translated">将光标向上移动 &lt;code&gt;count&lt;/code&gt; 行。</target>
        </trans-unit>
        <trans-unit id="eb4d28da6332be8ce6373d9d339c7fe48fa23486" translate="yes" xml:space="preserve">
          <source>Moves the cursor up by &lt;em&gt;count&lt;/em&gt; rows.</source>
          <target state="translated">按&lt;em&gt;计数&lt;/em&gt;行向上移动光标。</target>
        </trans-unit>
        <trans-unit id="d61605fd307d99d67b560347364dc83c61cffa05" translate="yes" xml:space="preserve">
          <source>Moves the dir &lt;code&gt;from&lt;/code&gt; to &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="translated">移动DIR &lt;code&gt;from&lt;/code&gt; 到 &lt;code&gt;to&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8cc08a3a09585a5b7018f82f000e4d9ef96f770c" translate="yes" xml:space="preserve">
          <source>Moves the file &lt;code&gt;from&lt;/code&gt; to &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="translated">移动文件 &lt;code&gt;from&lt;/code&gt; 到 &lt;code&gt;to&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7741d7c731b0414e896fc2c0f802271d21f8e3a3" translate="yes" xml:space="preserve">
          <source>MsgConfig:</source>
          <target state="translated">MsgConfig:</target>
        </trans-unit>
        <trans-unit id="37e28c04b8d9df3b354f9cac2c7f58f505751614" translate="yes" xml:space="preserve">
          <source>MsgFlag.msgSkipHook</source>
          <target state="translated">MsgFlag.msgSkipHook</target>
        </trans-unit>
        <trans-unit id="443bca6bef2a5f87d4c1178c12a16972c544b7c3" translate="yes" xml:space="preserve">
          <source>MsgFlag.msgStdout</source>
          <target state="translated">MsgFlag.msgStdout</target>
        </trans-unit>
        <trans-unit id="70d4c1e3256fca40389df440c02fb8245f4c21b5" translate="yes" xml:space="preserve">
          <source>MsgFlag:</source>
          <target state="translated">MsgFlag:</target>
        </trans-unit>
        <trans-unit id="f7cbb8ef4a22d68dd396d496626ddcd378fd7460" translate="yes" xml:space="preserve">
          <source>MsgFlags:</source>
          <target state="translated">MsgFlags:</target>
        </trans-unit>
        <trans-unit id="cd11ecb92552a150ee8d68d77a48d155bf327259" translate="yes" xml:space="preserve">
          <source>MsgKindToStr:</source>
          <target state="translated">MsgKindToStr:</target>
        </trans-unit>
        <trans-unit id="78732a3d2d5bc767bacb10d82e232dfa8d87404f" translate="yes" xml:space="preserve">
          <source>Much like generics, concepts are instantiated exactly once for each tested type and any static code included within the body is executed only once.</source>
          <target state="translated">就像属相一样,概念对于每个被测试的类型只被实例化一次,任何包含在主体中的静态代码只被执行一次。</target>
        </trans-unit>
        <trans-unit id="1d5f2fd6e9c15080786fa9fc4a690a2cc1e48b6a" translate="yes" xml:space="preserve">
          <source>Multi-line procedure calls should continue on the same column as the opening parenthesis (like multi-line procedure declarations).</source>
          <target state="translated">多行过程调用应在与开头括号相同的列上继续(像多行过程声明一样)。</target>
        </trans-unit>
        <trans-unit id="9254f56fa866823471402ac94c86d60cd0bf7ec3" translate="yes" xml:space="preserve">
          <source>Multi-methods</source>
          <target state="translated">Multi-methods</target>
        </trans-unit>
        <trans-unit id="1354836b5835fb67a5c327fdebc775b85ce1f879" translate="yes" xml:space="preserve">
          <source>Multi-paradigm Memory Management Strategies</source>
          <target state="translated">多范式内存管理策略</target>
        </trans-unit>
        <trans-unit id="f038ab50dbba14467b3f2d54ae4453034bd4e0b4" translate="yes" xml:space="preserve">
          <source>Multicast address.</source>
          <target state="translated">多播地址。</target>
        </trans-unit>
        <trans-unit id="7eef768291d80681527aa60e3df38506cba1a219" translate="yes" xml:space="preserve">
          <source>Multicast global address.</source>
          <target state="translated">多播全局地址。</target>
        </trans-unit>
        <trans-unit id="48369fed2a551361b8045057023eecff834b5fb1" translate="yes" xml:space="preserve">
          <source>Multicast link-local address.</source>
          <target state="translated">多播链路本地地址。</target>
        </trans-unit>
        <trans-unit id="24dcc40f5a40c25ac2feb7b6c8089ae89a9733cc" translate="yes" xml:space="preserve">
          <source>Multicast node-local address.</source>
          <target state="translated">多播节点本地地址。</target>
        </trans-unit>
        <trans-unit id="7b7ea2cc81efabb6fd79723109a63d77b71fcdc4" translate="yes" xml:space="preserve">
          <source>Multicast organization-local address.</source>
          <target state="translated">多播组织-本地地址。</target>
        </trans-unit>
        <trans-unit id="3867c8b804a55ef6500439f739768f84c270b65d" translate="yes" xml:space="preserve">
          <source>Multicast site-local address.</source>
          <target state="translated">多播站点本地地址。</target>
        </trans-unit>
        <trans-unit id="d8164f83c1acb0822b6c1157de32950f13f00bf8" translate="yes" xml:space="preserve">
          <source>Multiline comments</source>
          <target state="translated">多线评论</target>
        </trans-unit>
        <trans-unit id="64ad927c3d1f8a60b8de3a4dcfa11cb5f9ed2b35" translate="yes" xml:space="preserve">
          <source>Multiline comments are started with &lt;code&gt;#[&lt;/code&gt; and terminated with &lt;code&gt;]#&lt;/code&gt;. Multiline comments can also be nested.</source>
          <target state="translated">多行注释以 &lt;code&gt;#[&lt;/code&gt; 开头，并以 &lt;code&gt;]#&lt;/code&gt; 结尾。多行注释也可以嵌套。</target>
        </trans-unit>
        <trans-unit id="51b13e7abf733936d7df1349e642855933b8c93f" translate="yes" xml:space="preserve">
          <source>Multiline comments support nesting:</source>
          <target state="translated">多行注释支持嵌套。</target>
        </trans-unit>
        <trans-unit id="d8b83fc7a7727ea41499ff067b6d0dbb7149942a" translate="yes" xml:space="preserve">
          <source>Multiline documentation comments also exist and support nesting too:</source>
          <target state="translated">多行文档注释也存在,也支持嵌套。</target>
        </trans-unit>
        <trans-unit id="cbf27a3ccf0fd00bcb0f6850421450358a6cae08" translate="yes" xml:space="preserve">
          <source>Multimedia support</source>
          <target state="translated">多媒体支持</target>
        </trans-unit>
        <trans-unit id="1d245255e60392f6b3e9f5ad4883534adffa2e25" translate="yes" xml:space="preserve">
          <source>Multimethods are not available.</source>
          <target state="translated">多方法不可用。</target>
        </trans-unit>
        <trans-unit id="09f3196845a8359a6ecedfa5af3141e1edccd739" translate="yes" xml:space="preserve">
          <source>Multiple arguments can be used.</source>
          <target state="translated">可以使用多个参数。</target>
        </trans-unit>
        <trans-unit id="89c80d6fde8463036c04f0c5cdcf2ec74dc53694" translate="yes" xml:space="preserve">
          <source>Multiplicatives inverse of complex number &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">复数 &lt;code&gt;z&lt;/code&gt; 的乘法逆。</target>
        </trans-unit>
        <trans-unit id="6fb98c1dd85668cfd605942346a6ffa272eacd99" translate="yes" xml:space="preserve">
          <source>Multiplies &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;x&lt;/code&gt; 与 &lt;code&gt;y&lt;/code&gt; 相乘。</target>
        </trans-unit>
        <trans-unit id="bb0b13e10d6341521e89bdb5336ed87b7a20e60d" translate="yes" xml:space="preserve">
          <source>Multiplies &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">乘 &lt;code&gt;y&lt;/code&gt; 至 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e85bfaa59d7dcafe3bad4ec5fb52969e0b983a7" translate="yes" xml:space="preserve">
          <source>Multiplies a complex number with a real number.</source>
          <target state="translated">将一个复数与一个实数相乘。</target>
        </trans-unit>
        <trans-unit id="016e3f71c384a0256f6b02cfbcb74b01f4bb3548" translate="yes" xml:space="preserve">
          <source>Multiplies a real number and a complex number.</source>
          <target state="translated">将一个实数和一个复数相乘。</target>
        </trans-unit>
        <trans-unit id="a89c998a8939bd86eba71a1abb06f5d85c817883" translate="yes" xml:space="preserve">
          <source>Multiplies in place a floating point number</source>
          <target state="translated">将一个浮点数相乘</target>
        </trans-unit>
        <trans-unit id="d359157118587856315e2ee8aff77c57a411836e" translate="yes" xml:space="preserve">
          <source>Multiplies in place a floating point number.</source>
          <target state="translated">将一个浮点数相乘。</target>
        </trans-unit>
        <trans-unit id="fcd886e69a9b9ba9f155b8a7f1e41875370c7b1d" translate="yes" xml:space="preserve">
          <source>Multiply &lt;em&gt;x&lt;/em&gt; with &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">乘&lt;em&gt;X&lt;/em&gt;与&lt;em&gt;Y ^&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e2f2f1bb918524a79ef38752dea6ec686cd665c1" translate="yes" xml:space="preserve">
          <source>Multiply &lt;em&gt;y&lt;/em&gt; to &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">乘&lt;em&gt;&amp;Yuml;&lt;/em&gt;至&lt;em&gt;X&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="cf4b7cc064435e9b222c2ae1ef88a90049e33ef7" translate="yes" xml:space="preserve">
          <source>Multiply &lt;em&gt;y&lt;/em&gt; to the complex number &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">将&lt;em&gt;y&lt;/em&gt;乘以复数&lt;em&gt;x&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="967a2a96e493c3fa19de6d580534df7c563be46e" translate="yes" xml:space="preserve">
          <source>Multiply a duration by some scalar.</source>
          <target state="translated">将持续时间乘以某个标量。</target>
        </trans-unit>
        <trans-unit id="3992914db890fb69ae7d33ac0b14f1598d61248c" translate="yes" xml:space="preserve">
          <source>Multiply complex &lt;em&gt;x&lt;/em&gt; with float &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">将复数&lt;em&gt;x&lt;/em&gt;与浮点&lt;em&gt;y&lt;/em&gt;相乘。</target>
        </trans-unit>
        <trans-unit id="1b5c2c91504b80f3c83b9e589314371f1f27f89a" translate="yes" xml:space="preserve">
          <source>Multiply float &lt;em&gt;x&lt;/em&gt; with complex &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">将float &lt;em&gt;x&lt;/em&gt;与&lt;em&gt;y&lt;/em&gt;相乘。</target>
        </trans-unit>
        <trans-unit id="eef8bfc2027f784bed00f50d73e2df6576f496e6" translate="yes" xml:space="preserve">
          <source>Multiply int &lt;code&gt;x&lt;/code&gt; with rational &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">将int &lt;code&gt;x&lt;/code&gt; 与有理 &lt;code&gt;y&lt;/code&gt; 相乘。</target>
        </trans-unit>
        <trans-unit id="442ce11e465bda2cb3059d4819efe979af1e6fa5" translate="yes" xml:space="preserve">
          <source>Multiply int &lt;code&gt;y&lt;/code&gt; to rational &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;y&lt;/code&gt; 乘以有理数 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0476878c0b1cabcde1afe8aa70cf6a429753af27" translate="yes" xml:space="preserve">
          <source>Multiply int &lt;em&gt;x&lt;/em&gt; with rational &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">将int &lt;em&gt;x&lt;/em&gt;与有理&lt;em&gt;y&lt;/em&gt;相乘。</target>
        </trans-unit>
        <trans-unit id="10cf9524fcce1f51fd3027d067a68e18439d699b" translate="yes" xml:space="preserve">
          <source>Multiply int &lt;em&gt;y&lt;/em&gt; to rational &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">将&lt;em&gt;y&lt;/em&gt;乘以有理数&lt;em&gt;x&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e483218ca20c168b62991bc272815587e5e4e426" translate="yes" xml:space="preserve">
          <source>Multiply rational &lt;code&gt;x&lt;/code&gt; with int &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">有理 &lt;code&gt;x&lt;/code&gt; 与int &lt;code&gt;y&lt;/code&gt; 相乘。</target>
        </trans-unit>
        <trans-unit id="bfb40c2a917440a979a3937c83ab1838a96e6061" translate="yes" xml:space="preserve">
          <source>Multiply rational &lt;em&gt;x&lt;/em&gt; with int &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">有理&lt;em&gt;x&lt;/em&gt;与int &lt;em&gt;y&lt;/em&gt;相乘。</target>
        </trans-unit>
        <trans-unit id="a78da0a48558e2fae8992fdb8ae319cce3d694fc" translate="yes" xml:space="preserve">
          <source>Multiply rationals &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">有理数乘法 &lt;code&gt;y&lt;/code&gt; 至 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="be6d2d49f08d8ce52cada7a4e40308b84089a378" translate="yes" xml:space="preserve">
          <source>Multiply rationals &lt;em&gt;y&lt;/em&gt; to &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">有理数乘法&lt;em&gt;&amp;Yuml;&lt;/em&gt;至&lt;em&gt;X&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="407f3e6e72365b49bada1f7c9b2babeb3f8c1e8f" translate="yes" xml:space="preserve">
          <source>Multiply two rational numbers.</source>
          <target state="translated">将两个有理数相乘。</target>
        </trans-unit>
        <trans-unit id="ee8f63af40668478d9b970238ac72d0d4b19f28b" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt; into an extracted (and shifted) slice of bits from &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;v&lt;/code&gt; 突变为从 &lt;code&gt;v&lt;/code&gt; 提取（并移位）的位片。</target>
        </trans-unit>
        <trans-unit id="facb9c42148a2e7389be02ea9d3a7f614f82f2e0" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with all the &lt;code&gt;1&lt;/code&gt; bits from &lt;code&gt;mask&lt;/code&gt; flipped.</source>
          <target state="translated">突变 &lt;code&gt;v&lt;/code&gt; ，将 &lt;code&gt;mask&lt;/code&gt; 所有 &lt;code&gt;1&lt;/code&gt; 位翻转。</target>
        </trans-unit>
        <trans-unit id="78a89d83625af6f5547f211dfa05927b15fe7dd1" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with all the &lt;code&gt;1&lt;/code&gt; bits from &lt;code&gt;mask&lt;/code&gt; set to 0.</source>
          <target state="translated">突变 &lt;code&gt;v&lt;/code&gt; ，并将 &lt;code&gt;mask&lt;/code&gt; 所有 &lt;code&gt;1&lt;/code&gt; 位都设置为0。</target>
        </trans-unit>
        <trans-unit id="cbc0182746d0beb681f034a9edb112352d05da34" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with all the &lt;code&gt;1&lt;/code&gt; bits from &lt;code&gt;mask&lt;/code&gt; set to 1.</source>
          <target state="translated">对 &lt;code&gt;v&lt;/code&gt; 进行突变，将 &lt;code&gt;mask&lt;/code&gt; 的所有 &lt;code&gt;1&lt;/code&gt; 位都设置为1。</target>
        </trans-unit>
        <trans-unit id="9ec6aa78d863ab9fc4fd0ae95768cf4cdb2954ce" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with all the &lt;code&gt;1&lt;/code&gt; bits in the range of &lt;code&gt;slice&lt;/code&gt; flipped.</source>
          <target state="translated">突变 &lt;code&gt;v&lt;/code&gt; ， &lt;code&gt;slice&lt;/code&gt; 范围内的所有 &lt;code&gt;1&lt;/code&gt; 位都被翻转。</target>
        </trans-unit>
        <trans-unit id="14045bc798df6dd294e92c15429ea925ea30bf35" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with all the &lt;code&gt;1&lt;/code&gt; bits in the range of &lt;code&gt;slice&lt;/code&gt; set to 0.</source>
          <target state="translated">突变 &lt;code&gt;v&lt;/code&gt; ，并将 &lt;code&gt;slice&lt;/code&gt; 范围内的所有 &lt;code&gt;1&lt;/code&gt; 位都设置为0。</target>
        </trans-unit>
        <trans-unit id="f4c3a893d6212268025d8e5d196a7acb17b7e1b9" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with all the &lt;code&gt;1&lt;/code&gt; bits in the range of &lt;code&gt;slice&lt;/code&gt; set to 1.</source>
          <target state="translated">突变 &lt;code&gt;v&lt;/code&gt; ，并将 &lt;code&gt;slice&lt;/code&gt; 范围内的所有 &lt;code&gt;1&lt;/code&gt; 位设置为1。</target>
        </trans-unit>
        <trans-unit id="48c37d2090976ee8e3d5fee6ec7741014101a9ec" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with only the &lt;code&gt;1&lt;/code&gt; bits from &lt;code&gt;mask&lt;/code&gt; matching those of &lt;code&gt;v&lt;/code&gt; set to 1.</source>
          <target state="translated">突变 &lt;code&gt;v&lt;/code&gt; ， &lt;code&gt;mask&lt;/code&gt; 只有与 &lt;code&gt;v&lt;/code&gt; 匹配的 &lt;code&gt;1&lt;/code&gt; 位设置为1。</target>
        </trans-unit>
        <trans-unit id="c64f667cf74bbcef8503b23a4acee6ed0887d732" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with only the &lt;code&gt;1&lt;/code&gt; bits in the range of &lt;code&gt;slice&lt;/code&gt; matching those of &lt;code&gt;v&lt;/code&gt; set to 1.</source>
          <target state="translated">突变 &lt;code&gt;v&lt;/code&gt; ， &lt;code&gt;slice&lt;/code&gt; 范围内只有与 &lt;code&gt;v&lt;/code&gt; 匹配的 &lt;code&gt;1&lt;/code&gt; 位设置为1。</target>
        </trans-unit>
        <trans-unit id="64b50fbfb29951fe6e8ef9592386658009794a46" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with the bit at position &lt;code&gt;bit&lt;/code&gt; flipped</source>
          <target state="translated">突变 &lt;code&gt;v&lt;/code&gt; ，位置的 &lt;code&gt;bit&lt;/code&gt; 翻转</target>
        </trans-unit>
        <trans-unit id="f9c268e6dc76523a04990f53e7375c84d616b8ef" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with the bit at position &lt;code&gt;bit&lt;/code&gt; set to 0</source>
          <target state="translated">对 &lt;code&gt;v&lt;/code&gt; 进行突变，并将位置 &lt;code&gt;bit&lt;/code&gt; 的位设置为0</target>
        </trans-unit>
        <trans-unit id="4dc72a1805780e646c98f4be333b44f1e0e1f1ac" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with the bit at position &lt;code&gt;bit&lt;/code&gt; set to 1</source>
          <target state="translated">变异 &lt;code&gt;v&lt;/code&gt; ，并将位置 &lt;code&gt;bit&lt;/code&gt; 的位设置为1</target>
        </trans-unit>
        <trans-unit id="b0f703e71600a89068805226c7bc06a14e941314" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with the bits at positions &lt;code&gt;bits&lt;/code&gt; set to 0</source>
          <target state="translated">变异 &lt;code&gt;v&lt;/code&gt; ，位置位置的 &lt;code&gt;bits&lt;/code&gt; 设置为0</target>
        </trans-unit>
        <trans-unit id="4ce6a3d609b998cf5e5fd6241cbdb65fdb6ee61a" translate="yes" xml:space="preserve">
          <source>Mutates &lt;code&gt;v&lt;/code&gt;, with the bits at positions &lt;code&gt;bits&lt;/code&gt; set to 1</source>
          <target state="translated">变异 &lt;code&gt;v&lt;/code&gt; ，并将位置 &lt;code&gt;bits&lt;/code&gt; 设置为1</target>
        </trans-unit>
        <trans-unit id="f46f9514f1b5c64247012a22f6423b6982c8ce0e" translate="yes" xml:space="preserve">
          <source>MutationInfo:</source>
          <target state="translated">MutationInfo:</target>
        </trans-unit>
        <trans-unit id="57d62a44db1dbaaab6871e35242edd989b03aa79" translate="yes" xml:space="preserve">
          <source>Mutually recursive types</source>
          <target state="translated">相互递归类型</target>
        </trans-unit>
        <trans-unit id="7f40638ab36009261af3e1d52e05984bcdb333ac" translate="yes" xml:space="preserve">
          <source>NO-cases: x !&amp;lt;| y # depending on type and symbol kind x[constA] !&amp;lt;| x[constB] x.f !&amp;lt;| x.g x.f !&amp;lt;| y.f iff x !&amp;lt;= y</source>
          <target state="translated">无情况：x！&amp;lt;| y＃取决于类型和符号种类x [constA]！&amp;lt;| x [constB] xf！&amp;lt;| xg xf！&amp;lt;| yf iff x！&amp;lt;= y</target>
        </trans-unit>
        <trans-unit id="f0d1c3c27252776cf6fab5b297dd84293196ad68" translate="yes" xml:space="preserve">
          <source>NRVO</source>
          <target state="translated">NRVO</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="c83bf68eaf2532d248d1885057b7fe59c910abf7" translate="yes" xml:space="preserve">
          <source>Name of the test suite that contains this test case. Can be &lt;code&gt;nil&lt;/code&gt; if the test case is not in a suite.</source>
          <target state="translated">包含此测试用例的测试套件的名称。如果测试用例不在套件中，则可以 &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b509dcb855dff49f60e407b23f6b0c2647e50755" translate="yes" xml:space="preserve">
          <source>Named argument overloading</source>
          <target state="translated">命名参数重载</target>
        </trans-unit>
        <trans-unit id="f2ab34573e168918bf72dc73ec10c4b5b1ba3f14" translate="yes" xml:space="preserve">
          <source>Named arguments</source>
          <target state="translated">已命名的参数</target>
        </trans-unit>
        <trans-unit id="7772a024609453bf08c15f5d275ff9fafde6c74b" translate="yes" xml:space="preserve">
          <source>Named parameters are special because a named parameter can be gensym'ed and then they have '`&amp;lt;number&amp;gt;' suffix that we need to ignore, see compiler / evaltempl.nim, snippet:</source>
          <target state="translated">命名参数是特殊的，因为可以对命名参数进行gensym'ed，然后它们具有我们需要忽略的后缀'&amp;lt;number&amp;gt;'，请参见编译器/ evaltempl.nim，摘录：</target>
        </trans-unit>
        <trans-unit id="dc74246cc093982dca8a3a3f276b5d8b65d59486" translate="yes" xml:space="preserve">
          <source>Named pipe, or FIFO.</source>
          <target state="translated">名管,或称FIFO。</target>
        </trans-unit>
        <trans-unit id="be09a63bd1995e99cd22064cdc39a4bae464033d" translate="yes" xml:space="preserve">
          <source>Namespaces</source>
          <target state="translated">Namespaces</target>
        </trans-unit>
        <trans-unit id="8af56df8a9cb35f56b67edd6d269d4e86defc0d0" translate="yes" xml:space="preserve">
          <source>Naming Conventions</source>
          <target state="translated">命名惯例</target>
        </trans-unit>
        <trans-unit id="c6c5f0ef33b66371fc9992be0b7555afe7072e1f" translate="yes" xml:space="preserve">
          <source>Naming scheme</source>
          <target state="translated">命名方案</target>
        </trans-unit>
        <trans-unit id="9a732a9b195778d45aff4c029836d8016c6d092a" translate="yes" xml:space="preserve">
          <source>Nanosecond-granularity time of last access.</source>
          <target state="translated">纳秒级的最后访问时间。</target>
        </trans-unit>
        <trans-unit id="44a8ea231c9b25a28c6b1bae13f6d58d8ab769bb" translate="yes" xml:space="preserve">
          <source>Nanosecond-granularity time of last data modification.</source>
          <target state="translated">上次数据修改的纳秒级时间。</target>
        </trans-unit>
        <trans-unit id="ac4471c1eac2668f96fa75ca630c4f282bc0b52a" translate="yes" xml:space="preserve">
          <source>Nanoseconds display</source>
          <target state="translated">纳秒显示</target>
        </trans-unit>
        <trans-unit id="8b8960e4540a492b4c2ade7385f3643ce326ec71" translate="yes" xml:space="preserve">
          <source>Natural log of the gamma function</source>
          <target state="translated">伽马函数的自然对数</target>
        </trans-unit>
        <trans-unit id="40ae5bdaf41bbc2df0ddd3ba6cd0e29b307d851a" translate="yes" xml:space="preserve">
          <source>Navigation through the FTP server's directories.</source>
          <target state="translated">在FTP服务器的目录中导航。</target>
        </trans-unit>
        <trans-unit id="0815b755eca5e681198ebaafc9d72ffda80723ea" translate="yes" xml:space="preserve">
          <source>NdiFile:</source>
          <target state="translated">NdiFile:</target>
        </trans-unit>
        <trans-unit id="a87e96bc47dcdb24143f7270a722c7d80e8b8619" translate="yes" xml:space="preserve">
          <source>NegOne:</source>
          <target state="translated">NegOne:</target>
        </trans-unit>
        <trans-unit id="1cc372e25138e902d67c0112cb8a3904890cbfec" translate="yes" xml:space="preserve">
          <source>Negated version of &lt;a href=&quot;#is,T,S&quot;&gt;is&lt;/a&gt;. Equivalent to &lt;code&gt;not(x is y)&lt;/code&gt;.</source>
          <target state="translated">的否定版本&lt;a href=&quot;#is,T,S&quot;&gt;为&lt;/a&gt;。等效于 &lt;code&gt;not(x is y)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c9051b995bf9fb56fe85246d9f53926cf4b1566a" translate="yes" xml:space="preserve">
          <source>Negated version of &lt;code&gt;is&lt;/code&gt;</source>
          <target state="translated">的否定版本 &lt;code&gt;is&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b5c25dae4dbbde41bb6194a297db2a60c41076f4" translate="yes" xml:space="preserve">
          <source>Negated version of &lt;em&gt;is&lt;/em&gt;. Equivalent to &lt;code&gt;not(x is y)&lt;/code&gt;.</source>
          <target state="translated">的否定版本&lt;em&gt;为&lt;/em&gt;。等效于 &lt;code&gt;not(x is y)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2fb11e6ad45582ef61d5229a5c99cb71ade8dea4" translate="yes" xml:space="preserve">
          <source>Neither inline nor closure iterators can be (directly)* recursive.</source>
          <target state="translated">内联迭代和闭包迭代都不能(直接)*递归。</target>
        </trans-unit>
        <trans-unit id="7c0ca5089d3b83be1bafc4d4d1a8a2d03a288270" translate="yes" xml:space="preserve">
          <source>Neither inline nor closure iterators can be recursive.</source>
          <target state="translated">内联和闭包迭代器都不能递归。</target>
        </trans-unit>
        <trans-unit id="800065abdf31340dea211e76a620e74e07164b74" translate="yes" xml:space="preserve">
          <source>Neither inline nor closure iterators have the special &lt;code&gt;result&lt;/code&gt; variable.</source>
          <target state="translated">内联和闭包迭代器都没有特殊的 &lt;code&gt;result&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="0db36e51e26b9948538aa75241b28b52b8a7c448" translate="yes" xml:space="preserve">
          <source>Neither the name of the University of Cambridge nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</source>
          <target state="translated">未经特定的事先书面许可,不得使用剑桥大学的名称或其贡献者的姓名来认可或推广本软件的衍生产品。</target>
        </trans-unit>
        <trans-unit id="39c942ec037779a44f7713d5b1b00db484fe69b1" translate="yes" xml:space="preserve">
          <source>Nests the list &lt;code&gt;pack&lt;/code&gt; into a tree of call expressions: &lt;code&gt;[a, b, c]&lt;/code&gt; is transformed into &lt;code&gt;op(a, op(c, d))&lt;/code&gt;. This is also known as fold expression.</source>
          <target state="translated">将列表 &lt;code&gt;pack&lt;/code&gt; 嵌套到调用表达式树中： &lt;code&gt;[a, b, c]&lt;/code&gt; 转换为 &lt;code&gt;op(a, op(c, d))&lt;/code&gt; 。这也称为折叠表达。</target>
        </trans-unit>
        <trans-unit id="d050b1bc6d5102e8c3c43e52f8c2bc1d471d35c1" translate="yes" xml:space="preserve">
          <source>Network Programming and Internet Protocols</source>
          <target state="translated">网络编程和互联网协议</target>
        </trans-unit>
        <trans-unit id="171eece6964ab33a2181793b80b9e480760fd86a" translate="yes" xml:space="preserve">
          <source>Never used by PCRE itself</source>
          <target state="translated">PCRE本身从未使用过</target>
        </trans-unit>
        <trans-unit id="17c5fe945bffa6ac038aff7b2982abfca0575621" translate="yes" xml:space="preserve">
          <source>New &lt;code&gt;AsyncEvent&lt;/code&gt; object is not automatically registered with dispatcher like &lt;code&gt;AsyncSocket&lt;/code&gt;.</source>
          <target state="translated">新的 &lt;code&gt;AsyncEvent&lt;/code&gt; 对象不会自动向 &lt;code&gt;AsyncSocket&lt;/code&gt; 之类的调度程序注册。</target>
        </trans-unit>
        <trans-unit id="28d212a8c45cffe38583de7b76bc156d6b77f1fb" translate="yes" xml:space="preserve">
          <source>New data is written into the future stream.</source>
          <target state="translated">新的数据被写入未来流。</target>
        </trans-unit>
        <trans-unit id="567bb6ab39291d029af6c28280c594e2fe015993" translate="yes" xml:space="preserve">
          <source>New nil literal shortcut</source>
          <target state="translated">新的 &quot;无 &quot;字形快捷键</target>
        </trans-unit>
        <trans-unit id="4d162ab936ae3c93a4762b2302f1dde8f07c853d" translate="yes" xml:space="preserve">
          <source>New nil literal shortcut.</source>
          <target state="translated">新的无字形快捷方式。</target>
        </trans-unit>
        <trans-unit id="d414101c8451a9c1e4d24a539c801a218a2cb25c" translate="yes" xml:space="preserve">
          <source>NewLines:</source>
          <target state="translated">NewLines:</target>
        </trans-unit>
        <trans-unit id="8a46f7e73851bd13e21c355b77945488312ba04a" translate="yes" xml:space="preserve">
          <source>Nil ---</source>
          <target state="translated">无----------。</target>
        </trans-unit>
        <trans-unit id="741085d08492cd26c47dc0ef9d2d8cb0183c046b" translate="yes" xml:space="preserve">
          <source>NilableTypes:</source>
          <target state="translated">NilableTypes:</target>
        </trans-unit>
        <trans-unit id="8bcd0a2c52378cf0d5699266d7e259ed99978f8c" translate="yes" xml:space="preserve">
          <source>Nim</source>
          <target state="translated">Nim</target>
        </trans-unit>
        <trans-unit id="7793ecd2f1c81dc748001f595a446d07a21dca61" translate="yes" xml:space="preserve">
          <source>Nim Backend Integration</source>
          <target state="translated">Nim后端集成</target>
        </trans-unit>
        <trans-unit id="16df2910cd311102e24b9deaaab6834d4ce68a59" translate="yes" xml:space="preserve">
          <source>Nim Compiler</source>
          <target state="translated">Nim编译器</target>
        </trans-unit>
        <trans-unit id="21f8909f95c6aa6f948aea798f908963482f9a9e" translate="yes" xml:space="preserve">
          <source>Nim Compiler User Guide</source>
          <target state="translated">Nim编译器用户指南</target>
        </trans-unit>
        <trans-unit id="f1205ea1b3f4a816aeafc80cdd7715c3db32e0cd" translate="yes" xml:space="preserve">
          <source>Nim Destructors and Move Semantics</source>
          <target state="translated">Nim Destructors和Move语义学</target>
        </trans-unit>
        <trans-unit id="4e729000a4923f3f92aa9b54b57cd9d13b461a42" translate="yes" xml:space="preserve">
          <source>Nim DocGen Tools Guide</source>
          <target state="translated">Nim DocGen工具指南</target>
        </trans-unit>
        <trans-unit id="3e73c9c60a5f0a7a9de0b9e82a823b0e9e25a26d" translate="yes" xml:space="preserve">
          <source>Nim Documentation</source>
          <target state="translated">Nim文件</target>
        </trans-unit>
        <trans-unit id="530555065f9d76896cc611a21ebc96466e9386f7" translate="yes" xml:space="preserve">
          <source>Nim Documentation Overview</source>
          <target state="translated">Nim文档概述</target>
        </trans-unit>
        <trans-unit id="f6faadf36850555183f2e6623ce564cd582735b7" translate="yes" xml:space="preserve">
          <source>Nim Enhancement Proposal #1</source>
          <target state="translated">Nim增强提案#1</target>
        </trans-unit>
        <trans-unit id="a017c7a8f194b967e2353a197aaf8085c32d102d" translate="yes" xml:space="preserve">
          <source>Nim Enhancement Proposal #1 - Standard Library Style Guide</source>
          <target state="translated">Nim增强提案#1--标准图书馆风格指南</target>
        </trans-unit>
        <trans-unit id="5b9961014f4b2b48d30bcee1ea56377ae0098790" translate="yes" xml:space="preserve">
          <source>Nim Experimental Features</source>
          <target state="translated">Nim实验功能</target>
        </trans-unit>
        <trans-unit id="088e91f2731d3d61908df7c6c9c0f48f04e35180" translate="yes" xml:space="preserve">
          <source>Nim IDE Integration Guide</source>
          <target state="translated">Nim IDE集成指南</target>
        </trans-unit>
        <trans-unit id="ff5833e01f31589edf6457bc7ab5ad35afc09f25" translate="yes" xml:space="preserve">
          <source>Nim Manual</source>
          <target state="translated">Nim手册</target>
        </trans-unit>
        <trans-unit id="a5cb0d9617774a42fc73cf0e3f868eb3b8c421d4" translate="yes" xml:space="preserve">
          <source>Nim OID support. An OID is a global ID that consists of a timestamp, a unique counter and a random value. This combination should suffice to produce a globally distributed unique ID. This implementation was extracted from the Mongodb interface and it thus binary compatible with a Mongo OID.</source>
          <target state="translated">Nim OID支持。OID是一个全局的ID,它由一个时间戳、一个唯一的计数器和一个随机值组成。这种组合应该足以产生一个全球分布的唯一ID。这个实现是从Mongodb接口中提取的,因此它与Mongo OID二进制兼容。</target>
        </trans-unit>
        <trans-unit id="8afe44256c32445d4aba7446f16d139424f08995" translate="yes" xml:space="preserve">
          <source>Nim Standard Library</source>
          <target state="translated">Nim标准库</target>
        </trans-unit>
        <trans-unit id="322ec21475cb7cfeb95acf76114506a7658630c5" translate="yes" xml:space="preserve">
          <source>Nim Tutorial (Part I)</source>
          <target state="translated">Nim教程(第一部分</target>
        </trans-unit>
        <trans-unit id="e48ab7d7dac65733835e8b6fac71558fd72d4d0c" translate="yes" xml:space="preserve">
          <source>Nim Tutorial (Part II)</source>
          <target state="translated">Nim教程(第二部分</target>
        </trans-unit>
        <trans-unit id="76322f500f58282cde660e73afc75612203543c6" translate="yes" xml:space="preserve">
          <source>Nim allows &lt;code&gt;.global, compiletime&lt;/code&gt; variables that can be filled by macro invocations across different modules. This feature breaks modularity in a severe way. Plenty of different solutions have been proposed:</source>
          <target state="translated">Nim允许 &lt;code&gt;.global, compiletime&lt;/code&gt; 变量，这些变量可由跨不同模块的宏调用填充。此功能严重破坏了模块性。已经提出了许多不同的解决方案：</target>
        </trans-unit>
        <trans-unit id="ab4a51307d67466d1629dcfcafd64254208d0d47" translate="yes" xml:space="preserve">
          <source>Nim allows &lt;code&gt;.global, compiletime&lt;/code&gt; variables that can be filled by macro invokations across different modules. This feature breaks modularity in a severe way. Plenty of different solutions have been proposed:</source>
          <target state="translated">Nim允许 &lt;code&gt;.global, compiletime&lt;/code&gt; 变量，这些变量可由跨不同模块的宏调用填充。此功能严重破坏了模块性。提出了许多不同的解决方案：</target>
        </trans-unit>
        <trans-unit id="f561db7eec45536c917f4b3178bd2feafbef4a97" translate="yes" xml:space="preserve">
          <source>Nim allows for type classes and regular types to be specified as &lt;span id=&quot;type-constraints_1&quot;&gt;type constraints&lt;/span&gt; of the generic type parameter:</source>
          <target state="translated">Nim允许将类型类和常规类型指定为通用类型参数的&lt;span id=&quot;type-constraints_1&quot;&gt;类型约束&lt;/span&gt;：</target>
        </trans-unit>
        <trans-unit id="e7723fae5b868ab64bfd1ed4f9d563b3f719c2a6" translate="yes" xml:space="preserve">
          <source>Nim allows user defined operators. An operator is any combination of the following characters:</source>
          <target state="translated">Nim允许用户定义运算符。操作符是以下字符的任意组合。</target>
        </trans-unit>
        <trans-unit id="dec77fd63ea6f3b6392da08312e8457c86c6a4ab" translate="yes" xml:space="preserve">
          <source>Nim allows user-definable operators. Binary operators have 11 different levels of precedence.</source>
          <target state="translated">Nim允许用户定义运算符。二进制运算符有11个不同的优先级。</target>
        </trans-unit>
        <trans-unit id="bb3ac87c3ce8cafa37c2ac5913d2e44f2c0fae11" translate="yes" xml:space="preserve">
          <source>Nim also allows for type classes and regular types to be specified as &lt;span id=&quot;type-constraints_1&quot;&gt;type constraints&lt;/span&gt; of the generic type parameter:</source>
          <target state="translated">Nim还允许将类型类和常规类型指定为通用类型参数的&lt;span id=&quot;type-constraints_1&quot;&gt;类型约束&lt;/span&gt;：</target>
        </trans-unit>
        <trans-unit id="c7367770c702c3c07c0edb5a157905ffed2fb24f" translate="yes" xml:space="preserve">
          <source>Nim avoids these problems by not assigning methods to a class. All methods in Nim are multi-methods. As we will see later, multi-methods are distinguished from procs only for dynamic binding purposes.</source>
          <target state="translated">Nim通过不给类分配方法来避免这些问题。Nim中的所有方法都是多方法。我们将在后面看到,多方法与procs的区别只是为了动态绑定。</target>
        </trans-unit>
        <trans-unit id="5fb26fe48597e8b904be37ef641797aa814138fa" translate="yes" xml:space="preserve">
          <source>Nim can also generate &lt;span id=&quot;javascript_1&quot;&gt;JavaScript&lt;/span&gt; code through the &lt;code&gt;js&lt;/code&gt; command.</source>
          <target state="translated">Nim还可以通过 &lt;code&gt;js&lt;/code&gt; 命令生成&lt;span id=&quot;javascript_1&quot;&gt;JavaScript&lt;/span&gt;代码。</target>
        </trans-unit>
        <trans-unit id="af85440d1b434e6ec278854daf1f3f305d5ad156" translate="yes" xml:space="preserve">
          <source>Nim code calling the backend</source>
          <target state="translated">调用后台的Nim代码</target>
        </trans-unit>
        <trans-unit id="6b156a5e46fd0f15d386450049ef7bee6965340f" translate="yes" xml:space="preserve">
          <source>Nim code can be compiled to JavaScript. However in order to write JavaScript-compatible code you should remember the following:</source>
          <target state="translated">Nim代码可以被编译成JavaScript。然而为了编写与JavaScript兼容的代码,你应该记住以下几点。</target>
        </trans-unit>
        <trans-unit id="b0d82977509b77ad993227e992fbe240e1a91ce1" translate="yes" xml:space="preserve">
          <source>Nim code can interface with the backend through the &lt;a href=&quot;manual#foreign-function-interface&quot;&gt;Foreign function interface&lt;/a&gt; mainly through the &lt;a href=&quot;manual#foreign-function-interface-importc-pragma&quot;&gt;importc pragma&lt;/a&gt;. The &lt;code&gt;importc&lt;/code&gt; pragma is the &lt;em&gt;generic&lt;/em&gt; way of making backend symbols available in Nim and is available in all the target backends (JavaScript too). The C++ or Objective-C backends have their respective &lt;a href=&quot;manual#implementation-specific-pragmas-importcpp-pragma&quot;&gt;ImportCpp&lt;/a&gt; and &lt;a href=&quot;manual#implementation-specific-pragmas-importobjc-pragma&quot;&gt;ImportObjC&lt;/a&gt; pragmas to call methods from classes.</source>
          <target state="translated">Nim代码可以通过&lt;a href=&quot;manual#foreign-function-interface&quot;&gt;外部功能接口（&lt;/a&gt;主要通过&lt;a href=&quot;manual#foreign-function-interface-importc-pragma&quot;&gt;importc编译指示）&lt;/a&gt;与后端进行接口。该 &lt;code&gt;importc&lt;/code&gt; 编译是&lt;em&gt;通用&lt;/em&gt;让位于稔提供后端符号的方式，是所有目标后端可用（JavaScript的太）。 C ++或Objective-C后端具有各自的&lt;a href=&quot;manual#implementation-specific-pragmas-importcpp-pragma&quot;&gt;ImportCpp&lt;/a&gt;和&lt;a href=&quot;manual#implementation-specific-pragmas-importobjc-pragma&quot;&gt;ImportObjC&lt;/a&gt;编译指示，可以从类中调用方法。</target>
        </trans-unit>
        <trans-unit id="0c9fa29ab6035f83a6a5d536db8f22202827f364" translate="yes" xml:space="preserve">
          <source>Nim code can interface with the backend through the &lt;a href=&quot;manual#foreign-function-interface&quot;&gt;Foreign function interface&lt;/a&gt; mainly through the &lt;a href=&quot;manual#importc-pragma&quot;&gt;importc pragma&lt;/a&gt;. The &lt;code&gt;importc&lt;/code&gt; pragma is the &lt;em&gt;generic&lt;/em&gt; way of making backend symbols available in Nim and is available in all the target backends (JavaScript too). The C++ or Objective-C backends have their respective &lt;a href=&quot;manual#implementation-specific-pragmas-importcpp-pragma&quot;&gt;ImportCpp&lt;/a&gt; and &lt;a href=&quot;manual#implementation-specific-pragmas-importobjc-pragma&quot;&gt;ImportObjC&lt;/a&gt; pragmas to call methods from classes.</source>
          <target state="translated">Nim代码可以通过&lt;a href=&quot;manual#foreign-function-interface&quot;&gt;外部功能接口（&lt;/a&gt;主要通过&lt;a href=&quot;manual#importc-pragma&quot;&gt;importc编译指示）&lt;/a&gt;与后端进行接口。该 &lt;code&gt;importc&lt;/code&gt; 编译是&lt;em&gt;通用&lt;/em&gt;让位于稔提供后端符号的方式，是所有目标后端可用（JavaScript的太）。 C ++或Objective-C后端具有各自的&lt;a href=&quot;manual#implementation-specific-pragmas-importcpp-pragma&quot;&gt;ImportCpp&lt;/a&gt;和&lt;a href=&quot;manual#implementation-specific-pragmas-importobjc-pragma&quot;&gt;ImportObjC&lt;/a&gt;编译指示，可以从类中调用方法。</target>
        </trans-unit>
        <trans-unit id="31a93bb37537ccf8bc65c227c96a067156777ba9" translate="yes" xml:space="preserve">
          <source>Nim code renderer (AST back to its textual form)</source>
          <target state="translated">Nim代码渲染器(AST恢复到文本形式)</target>
        </trans-unit>
        <trans-unit id="c49ab006b0df5c398487116e20dd9f9557fc4f7a" translate="yes" xml:space="preserve">
          <source>Nim code specifies a computation that acts on a memory consisting of components called &lt;span id=&quot;locations_1&quot;&gt;locations&lt;/span&gt;. A variable is basically a name for a location. Each variable and location is of a certain &lt;span id=&quot;type_1&quot;&gt;type&lt;/span&gt;. The variable's type is called &lt;span id=&quot;static-type_1&quot;&gt;static type&lt;/span&gt;, the location's type is called &lt;span id=&quot;dynamic-type_1&quot;&gt;dynamic type&lt;/span&gt;. If the static type is not the same as the dynamic type, it is a super-type or subtype of the dynamic type.</source>
          <target state="translated">Nim代码指定一种运算，该运算作用于由称为&lt;span id=&quot;locations_1&quot;&gt;location&lt;/span&gt;的组件组成的内存中。变量基本上是位置的名称。每个变量和位置都是特定&lt;span id=&quot;type_1&quot;&gt;类型的&lt;/span&gt;。变量的类型称为&lt;span id=&quot;static-type_1&quot;&gt;静态类型&lt;/span&gt;，位置的类型称为&lt;span id=&quot;dynamic-type_1&quot;&gt;动态类型&lt;/span&gt;。如果静态类型与动态类型不同，则它是动态类型的超类型或子类型。</target>
        </trans-unit>
        <trans-unit id="4b934fa65860d606d618e9d96d81cf38c8185b18" translate="yes" xml:space="preserve">
          <source>Nim code that will be executed at compile time cannot use the following language features:</source>
          <target state="translated">将在编译时执行的Nim代码不能使用以下语言特性。</target>
        </trans-unit>
        <trans-unit id="fabc8c2c3d55b64590195b71fee1f8bf15a0783b" translate="yes" xml:space="preserve">
          <source>Nim condition variable</source>
          <target state="translated">Nim条件变量</target>
        </trans-unit>
        <trans-unit id="d2f3eed8f027ae703cfbb62e68bece8443bf88e7" translate="yes" xml:space="preserve">
          <source>Nim contains a sophisticated compile-time evaluator, so procedures which have no side-effect can be used in constant expressions too:</source>
          <target state="translated">Nim 包含了一个复杂的编译时评估器,所以没有副作用的过程也可以用在常量表达式中。</target>
        </trans-unit>
        <trans-unit id="5a84a384a071f2c590cf4715be4dfac5778bd58a" translate="yes" xml:space="preserve">
          <source>Nim contains language features that are &lt;em&gt;global&lt;/em&gt;. The best example for that are multi methods: Introducing a new method with the same name and some compatible object parameter means that the method's dispatcher needs to take the new method into account. So the dispatching logic is only completely known after the whole program has been translated!</source>
          <target state="translated">Nim包含&lt;em&gt;全球&lt;/em&gt;语言功能。最好的示例是多种方法：引入具有相同名称和兼容对象参数的新方法意味着该方法的调度程序需要考虑新方法。因此，只有在翻译了整个程序之后，才能完全知道调度逻辑！</target>
        </trans-unit>
        <trans-unit id="fc85ea062290958c11ff84b074507e523841a2ee" translate="yes" xml:space="preserve">
          <source>Nim coroutines implementation supports several context switching methods: ucontext: available on unix and alike (default) setjmp: available on unix and alike (x86/64 only) Fibers: available and required on windows.</source>
          <target state="translated">Nim coroutines的实现支持几种上下文切换方法:ucontext:在unix和alike上可用(默认)setjmp:在unix和alike上可用(仅x86/64)Fibers:在windows上可用且需要。</target>
        </trans-unit>
        <trans-unit id="4eb61c7d8d93d62cf6c57a5ffd5601d51df16154" translate="yes" xml:space="preserve">
          <source>Nim coroutines implementation, supports several context switching methods:</source>
          <target state="translated">Nim coroutines实现,支持多种上下文切换方式。</target>
        </trans-unit>
        <trans-unit id="578f1deb3f7a2a37dd1477b06e2dff670c28a3a9" translate="yes" xml:space="preserve">
          <source>Nim currently generates &lt;code&gt;async/await&lt;/code&gt; JavaScript code which is supported in modern EcmaScript and most modern versions of browsers, Node.js and Electron. If you need to use this module with older versions of JavaScript, you can use a tool that backports the resulting JavaScript code, as babel.</source>
          <target state="translated">Nim当前生成 &lt;code&gt;async/await&lt;/code&gt; JavaScript代码，现代EcmaScript和大多数现代版本的浏览器Node.js和Electron都支持该代码。如果您需要将此模块与旧版JavaScript一起使用，则可以使用一个工具，将生成的JavaScript代码反向移植为babel。</target>
        </trans-unit>
        <trans-unit id="bd26dc8c514bd37794fcd3b5dc3270d84d36b348" translate="yes" xml:space="preserve">
          <source>Nim currently generates &lt;em&gt;async/await&lt;/em&gt; JavaScript code which is supported in modern EcmaScript and most modern versions of browsers, Node.js and Electron. If you need to use this module with older versions of JavaScript, you can use a tool that backports the resulting JavaScript code, as babel.</source>
          <target state="translated">Nim当前生成&lt;em&gt;异步/等待&lt;/em&gt; JavaScript代码，现代EcmaScript和大多数现代版本的浏览器Node.js和Electron都支持该代码。如果需要将此模块与旧版JavaScript一起使用，可以使用将生成的JavaScript代码反向移植为babel的工具。</target>
        </trans-unit>
        <trans-unit id="9bb9f4917308e21a1a3ea298a44a71e622ad4adc" translate="yes" xml:space="preserve">
          <source>Nim differs from many other compilers in that it is really fast, and being so fast makes it suited to provide external queries for text editors about the source code being written. Through the &lt;code&gt;idetools&lt;/code&gt; command of &lt;a href=&quot;nimc&quot;&gt;the compiler&lt;/a&gt;, any IDE can query a &lt;code&gt;.nim&lt;/code&gt; source file and obtain useful information like definition of symbols or suggestions for completion.</source>
          <target state="translated">Nim与许多其他编译器的不同之处在于，它的确非常快，而且速度如此之快使其适合为文本编辑器提供有关所编写源代码的外部查询。通过&lt;a href=&quot;nimc&quot;&gt;编译器&lt;/a&gt;的 &lt;code&gt;idetools&lt;/code&gt; 命令，任何IDE都可以查询 &lt;code&gt;.nim&lt;/code&gt; 源文件，并获取有用的信息，例如符号定义或完成建议。</target>
        </trans-unit>
        <trans-unit id="5f7c9cacf76b4e6e9b8bdb4149ed42fa0f2b0f03" translate="yes" xml:space="preserve">
          <source>Nim differs from many other compilers in that it is really fast, and being so fast makes it suited to provide external queries for text editors about the source code being written. Through the &lt;code&gt;nimsuggest&lt;/code&gt; tool, any IDE can query a &lt;code&gt;.nim&lt;/code&gt; source file and obtain useful information like definition of symbols or suggestions for completion.</source>
          <target state="translated">Nim与许多其他编译器的不同之处在于，它的确非常快，而且速度如此之快使其适合为文本编辑器提供有关所编写源代码的外部查询。通过 &lt;code&gt;nimsuggest&lt;/code&gt; 工具，任何IDE都可以查询 &lt;code&gt;.nim&lt;/code&gt; 源文件并获得有用的信息，例如符号定义或完成建议。</target>
        </trans-unit>
        <trans-unit id="2086951d5e25c94d3bcd3c946d696aab645c5e42" translate="yes" xml:space="preserve">
          <source>Nim distinguishes between &lt;span id=&quot;traced_1&quot;&gt;traced&lt;/span&gt; and &lt;span id=&quot;untraced_1&quot;&gt;untraced&lt;/span&gt; references. Untraced references are also called &lt;em&gt;pointers&lt;/em&gt;. Traced references point to objects in a garbage collected heap, untraced references point to manually allocated objects or to objects elsewhere in memory. Thus untraced references are &lt;em&gt;unsafe&lt;/em&gt;. However for certain low-level operations (e.g., accessing the hardware), untraced references are necessary.</source>
          <target state="translated">Nim区分&lt;span id=&quot;traced_1&quot;&gt;跟踪&lt;/span&gt;引用和未&lt;span id=&quot;untraced_1&quot;&gt;跟踪&lt;/span&gt;引用。未跟踪的引用也称为&lt;em&gt;指针&lt;/em&gt;。跟踪引用指向垃圾回收堆中的对象，未跟踪引用指向手动分配的对象或内存中其他位置的对象。因此，未跟踪的引用是&lt;em&gt;不安全的&lt;/em&gt;。但是，对于某些低级操作（例如，访问硬件），必须使用未跟踪的引用。</target>
        </trans-unit>
        <trans-unit id="ccd83d27c6d420699215e95b7549c5d18179dd95" translate="yes" xml:space="preserve">
          <source>Nim distinguishes between &lt;span id=&quot;traced_1&quot;&gt;traced&lt;/span&gt; and &lt;span id=&quot;untraced_1&quot;&gt;untraced&lt;/span&gt; references. Untraced references are also called &lt;em&gt;pointers&lt;/em&gt;. Traced references point to objects of a garbage collected heap, untraced references point to manually allocated objects or to objects somewhere else in memory. Thus untraced references are &lt;em&gt;unsafe&lt;/em&gt;. However for certain low-level operations (accessing the hardware) untraced references are unavoidable.</source>
          <target state="translated">Nim区分&lt;span id=&quot;traced_1&quot;&gt;跟踪&lt;/span&gt;引用和未&lt;span id=&quot;untraced_1&quot;&gt;跟踪&lt;/span&gt;引用。未跟踪的引用也称为&lt;em&gt;指针&lt;/em&gt;。跟踪引用指向垃圾回收堆的对象，未跟踪引用指向手动分配的对象或内存中其他位置的对象。因此，未跟踪的引用是&lt;em&gt;不安全的&lt;/em&gt;。但是，对于某些低级操作（访问硬件），不可避免的引用是不可避免的。</target>
        </trans-unit>
        <trans-unit id="7cebe776d80c8a7f686de5462c8b5f3c84649715" translate="yes" xml:space="preserve">
          <source>Nim distinguishes between &lt;span id=&quot;traced_1&quot;&gt;traced&lt;/span&gt; and &lt;span id=&quot;untraced_1&quot;&gt;untraced&lt;/span&gt; references. Untraced references are also called &lt;em&gt;pointers&lt;/em&gt;. Traced references point to objects of a garbage-collected heap, untraced references point to manually allocated objects or objects somewhere else in memory. Thus untraced references are &lt;em&gt;unsafe&lt;/em&gt;. However, for certain low-level operations (accessing the hardware) untraced references are unavoidable.</source>
          <target state="translated">Nim区分&lt;span id=&quot;traced_1&quot;&gt;跟踪&lt;/span&gt;引用和未&lt;span id=&quot;untraced_1&quot;&gt;跟踪&lt;/span&gt;引用。未跟踪的引用也称为&lt;em&gt;指针&lt;/em&gt;。跟踪引用指向垃圾回收堆的对象，未跟踪引用指向手动分配的对象或内存中其他位置的对象。因此，未跟踪的引用是&lt;em&gt;不安全的&lt;/em&gt;。但是，对于某些低级操作（访问硬件），不可避免的引用是不可避免的。</target>
        </trans-unit>
        <trans-unit id="dac7bba6bc8f19f6387033c2480f36e741751cd5" translate="yes" xml:space="preserve">
          <source>Nim distinguishes between &lt;span id=&quot;type-casts_1&quot;&gt;type casts&lt;/span&gt; and &lt;span id=&quot;type-conversions_1&quot;&gt;type conversions&lt;/span&gt;. Casts are done with the &lt;code&gt;cast&lt;/code&gt; operator and force the compiler to interpret a bit pattern to be of another type.</source>
          <target state="translated">Nim区分&lt;span id=&quot;type-casts_1&quot;&gt;类型转换&lt;/span&gt;和&lt;span id=&quot;type-conversions_1&quot;&gt;类型转换&lt;/span&gt;。强制类型转换与完成 &lt;code&gt;cast&lt;/code&gt; 操作和强制编译器解释的位模式是另一种类型。</target>
        </trans-unit>
        <trans-unit id="0dc26f37589711a4ebd6a75d29c4f31d6f5268ca" translate="yes" xml:space="preserve">
          <source>Nim documentation tools</source>
          <target state="translated">Nim文档工具</target>
        </trans-unit>
        <trans-unit id="32a303beaf961d29337f0ffeb398d9c829260321" translate="yes" xml:space="preserve">
          <source>Nim expression</source>
          <target state="translated">Nim表情</target>
        </trans-unit>
        <trans-unit id="835ecda86802386305ce589edd8369f0e4a635cf" translate="yes" xml:space="preserve">
          <source>Nim file input</source>
          <target state="translated">Nim文件输入</target>
        </trans-unit>
        <trans-unit id="07b88f09d9e474dda1eb0ea8c1cc96c629f4c605" translate="yes" xml:space="preserve">
          <source>Nim for embedded systems</source>
          <target state="translated">嵌入式系统的Nim</target>
        </trans-unit>
        <trans-unit id="a0e42e450f6ef10bfc996fbef965403967ca2952" translate="yes" xml:space="preserve">
          <source>Nim for realtime systems</source>
          <target state="translated">实时系统的Nim</target>
        </trans-unit>
        <trans-unit id="ad31881a208f486ef9ab2bb940bdcd789a709ad9" translate="yes" xml:space="preserve">
          <source>Nim generates some warnings and hints (&quot;line too long&quot;) that may annoy the user. A mechanism for disabling certain messages is provided: Each hint and warning message contains a symbol in brackets. This is the message's identifier that can be used to enable or disable it:</source>
          <target state="translated">Nim会产生一些警告和提示(&quot;行太长&quot;),这些警告和提示可能会让用户感到厌烦。我们提供了一个禁用某些信息的机制。每条提示和警告信息都包含一个括号内的符号。这是消息的标识符,可以用来启用或禁用它。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
