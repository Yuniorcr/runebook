<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="elisp">
    <body>
      <group id="elisp">
        <trans-unit id="772d2b9fdf23c3d163c286ee4fa36d24fb8ad72e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;beginning-of-defun-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;取消功能的开始&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d162ca2408549a8341b160b96d75c25bce2b197e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;bidi-display-reordering&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;bidi-display-reordering&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8a08279602dfcce01cdeef36d7249896ac2b3f95" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;bidi-paragraph-separate-re&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;bidi-paragraph-separate-re&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ff40d8b286789cb63d13eaf13acef63e5598914" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;bidi-paragraph-start-re&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;bidi-paragraph-start-re&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="18d149bc7ec32d5cf3972b111bb0b79ff749b2de" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;blink-paren-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;眨眼功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="329d7de8b8cfe1c815943ac69bc958aaeaf8a368" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-access-fontified-property&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲区访问字体属性&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a551f75d223a0ab7ec885477b95fca09e9f43fd7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-access-fontify-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;buffer-access-fontify-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f3597833ca99c1e75c74fd553371e8d545f2a0c8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-auto-save-file-format&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲区自动保存文件格式&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="615f3fdd1d2ce32af7b8537c0ea8ad451a7ad66a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-auto-save-file-name&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲区自动保存文件名&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc49432931c7562cd976a7638c7f255118114e66" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-backed-up&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲区备份&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b2b74d3aec67af0163bbf44dad639b8ff01e04dc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-display-count&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲区显示计数&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e3c4e3bfe8c23f7fa0ad77a29264506b09fa02ce" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-display-table&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲区显示表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d6b9f4219fdafc1cfe744b1e782eca6cf75bd425" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-display-time&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲区显示时间&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="81530e5415afba2eadead8c884373d28486b52bd" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-file-coding-system&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲文件编码系统&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b0efab2c319e42687ca840159e44b661d254a0ed" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-file-format&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲文件格式&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b4829afa2b5012d27c6a6a2435099a329b292b78" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-file-name&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲区文件名&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4d9a780b2ba95ca5ccd27079d0bfe72a2a2549b5" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-file-number&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲文件编号&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6aac11918e39674348f06ba9b899c87b94a0affe" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-file-truename&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;buffer-file-truename&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d2a06d907b5f3924887d87fbfaee355ba67efc11" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-invisibility-spec&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲区不可见规范&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="77cb440108a55b543ce3afc35fb43568ef8f940b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-list-update-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲区列表更新挂钩&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b5e48c4ebd90dfd345158701778425282a008e00" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-name-history&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲区名称历史&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8002a1ae5ea21ef50f058cbfe52b1edb89d3a871" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-read-only&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;只读缓冲区&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a57c43e7c8bf3e450c9a2e4e291d946e427cc248" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-save-without-query&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;无查询的缓冲区保存&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dab121293d32a8bd096dcd4d60e80dc31f942852" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-saved-size&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲区保存大小&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="938fac4b102264f4f09d96abb0bb7dd12aade3f2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-stale-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲区失效函数&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="735ab3e525afdef7c7eee4848cabadeaed98c98c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-substring-filters&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;buffer-substring-filters&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="06e25d2d4270540aef88663feec7bc94a21a6da5" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-undo-list&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缓冲区撤消列表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d6f28adb99965f69ae640b7707b0875c1fa8e592" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;byte-boolean-vars&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;byte-boolean-vars&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3699e79f2e1fc9aee81a2f23f411a69dc430be16" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;byte-compile-dynamic&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;字节编译动态&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a8e688bba5c1dc571affb376bde9d7356d24d024" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;change-major-mode-after-body-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;主体钩后更改主要模式&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e7069dd188311abbf96076c67d9ad0a8490aa518" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;change-major-mode-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;change-major-mode-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e82f9b7ca50645546eb014f66e686d05bca12501" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;char-property-alias-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;字符别名别名&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="70155b2e01ffd51a21a77ece8f167bd54b507037" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;char-script-table&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;char-script-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dab701e34eb03116428c1274f6f923d78b7da983" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;char-width-table&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;char-width-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e44a098f278fd20c44d59bb1cf1850f08b395be7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;charset-list&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;字符集列表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="38c45335d82065ece2eae54749b56a87d83767ff" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;clear-message-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;清除消息功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="06c48b2e653c3c4c5f23e4ccf17b08abf47dea2f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;coding-system-for-read&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;读取编码系统&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="237b3ec37bf4ffcd1163cb3241942cb39f0495ec" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;coding-system-for-write&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;写系统编码&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8a02ca7e84c05a2806a711eda7d62e442101dcec" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;coding-system-require-warning&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;编码系统要求警告&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8cdcbd46965566da527b9c0d91945176a9333907" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;command-debug-status&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;command-debug-status&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6ac5eb7bf45ed828c9a998f77ac84284867d1fef" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;command-error-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;命令错误功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7a46c52a5dcbac1c7555f39b1eed975802fb3304" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;command-history&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;命令历史&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="15991290f9fcd1b10e7c5161bd2abd606d2e7188" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;command-line-args-left&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;命令行参数左&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f740bda3f24c136675288e3b85d8eca12a180b37" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;command-line-args&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;命令行参数&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="05e180088f33c3694145f9997282c03e91ac3eac" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;command-line-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;命令行功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="973cba4bd40d06109656f6e222d62746a0c54e77" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;command-line-processed&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;命令行处理&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e0f98997365e84bc67073a659031c153ccdf5444" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;command-switch-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;命令切换助手&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e0544212a7a9fd29bdd834acde9042fff1945064" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;comment-end-can-be-escaped&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;可以结束注释端&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a972e830d788c516e07e8e1069348c44e8112782" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;completing-read-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;完成读取功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="56197906a16fbf5412e09405e8273d5e511e5002" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;completion-at-point-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;点完成功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d3ba38f455dddb925d82f9796cac5f20173f5541" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;completion-extra-properties&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;complete-extra-properties&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a9715499444aa58ded2d4575acf35f475402c5e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;completion-ignore-case&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;完成忽略情况&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9ff3bda33de242b922bedcb668295bf7d42f438e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;completion-regexp-list&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;completion-regexp-list&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="58a5282eefe23f39008cb178d130dba3bed31cf6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;completion-styles-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;完成样式助手&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e71579a15148aec951e74bf140f82c711ccf2cae" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;connection-local-criteria-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;connection-local-criteria-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="043f5967f3f7b3b167156deec2791d6aac3a4a4f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;connection-local-profile-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;connection-local-profile-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0ce57e5c1b0a8fcea1f950d76e4de5110813d074" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;cons-cells-consed&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;cons-cells-consed&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6918b55d20e3b4ca9be4d20891c03d67e79669ef" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;current-input-method&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;电流输入法&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="825b95f158eb32b6e25f63d24989ea2e1dcee797" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;current-prefix-arg&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;current-prefix-arg&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8f7f769cf1b07f06f2d59735dd5c6cb2d6c98258" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;cursor-in-echo-area&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;回声区域中的光标&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee5c44f0f6a1b1774ab1141e2d2461a287ef0f3e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;custom-known-themes&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;自定义已知主题&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dd00ff64457832b07a071512a0526b20547c2d62" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;custom-variable-history&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;自定义变量历史记录&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2d68fb85da48d3b5123954444e9ebca76216ea21" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;customize-package-emacs-version-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;customize-package-emacs-version-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="78aaf60f55ebb357b9c49070c6260ac533ac5309" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;data-directory&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;数据目录&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="58a344a54387c4d3cc3f8a135180c6330d774090" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;deactivate-mark-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;停用标记钩&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b53b3589f950da70ad7f1f25fdd1d05df9fbb20f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;deactivate-mark&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;停用标记&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="39dd7757ff1c5333e03254275d94fb280c321db8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;debug-on-message&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;消息调试&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="025f1d67816992df92152ebe279d65b9518f5615" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;debug-on-next-call&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;下次调用调试&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="50d338b5f23a809dc2a0cb9109abaec4324d4238" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;debugger&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;调试器&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6534bdaf2e2ba38c81da6e8d634f37465f8dd88c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;default-directory&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;默认目录&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="275bdca4549fcd8342f290882afdd8e418503f1c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;default-minibuffer-frame&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;default-minibuffer-frame&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02f9aa2f88c57d1ee05c7718935fc2ced046a877" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;default-process-coding-system&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;default-process-coding-system&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="91760fc229cc7edc4da0e20baa039bf6b1204b82" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;default-text-properties&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;default-text-properties&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2cafd55ad7e01593695f50891907a42c70bb710d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;defining-kbd-macro&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;define-kbd-macro&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b7adca875f4718d7921d41f390665433131c0010" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;delayed-warnings-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;延迟警告钩&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="893866261754a55185a42bbeba3db35a122e4a36" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;delayed-warnings-list&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;延迟警告列表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="998b448264ccd9ac2669d11874547faab39db821" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;delete-terminal-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;delete-terminal-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4609acd81e58b4c8feccb2fa5b99454639b1aeb1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;desktop-buffer-mode-handlers&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;桌面缓冲区模式处理程序&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d788b919041731306d1ed3119d25c4e3d05dbc0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;desktop-save-buffer&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;桌面保存缓冲区&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a030c59362bee119e34d5212c639c00f2995fae6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;dir-locals-class-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;dir-locals-class-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee359c15d9b05fdd28a1416beee90ffa0c78359f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;dir-locals-directory-cache&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;dir-locals-directory-cache&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5769de24ebf0a362e3ae0397ccd00822081e65ac" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;disable-point-adjustment&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;禁用点调整&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="16747d6e620da11d5bfac54379fc916cf8cd6744" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;disabled-command-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;禁用命令功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36376cf2e4eab1506ba8678c25cf5a9446845fae" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;display-buffer-overriding-action&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;显示缓冲区覆盖动作&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="11b1e365b77825bee10060a7efdeecab8ada0d7b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;doc-directory&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;文档目录&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="626d7212e019d152b500c7f29944f939c0d1274c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;dynamic-library-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;动态库管理员&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="89a55fe0d12a27c3430e2ba258035e97a38061fc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;echo-area-clear-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;echo-area-clear-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2c5b58bd144477d747ec4c7b213da60ad5c128ea" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;electric-future-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;电子未来地图&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1e572806cd8a1b31ec37dbf1bb0543b62ffd09a1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-build-number&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;emacs-build-number&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c0ff3ee648a18aea594a95f7ececbc237a2f4fc3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-build-time&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;emacs-build-time&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="03a7d12289e8c73c549b44bcf96e4731efd34482" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-major-version&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;emacs-major-version&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1d9dd7d9fc7e1909ad18700a0c992d54ab74c642" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-minor-version&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;emacs-minor-version&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cde688285cb63e6e47cd05b7a43cdfc6becf3530" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-repository-branch&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;emacs-repository-branch&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c79e2cde6a178ae85fb74875425b6570a91c3742" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-repository-version&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;emacs-repository-version&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="68bca76b22e84992fafedae258c451654ae6fe9a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-save-session-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;emacs保存会话功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3474b62651949c2ac00100f372c7fca5154f21a2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-startup-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;emacs-startup-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c103c2b6bac39dcb4a58c4c5fa99ec066ee4fd1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-version&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;emacs版本&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="695ad02566db163e5a095d9e16294685522a209e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emulation-mode-map-alists&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;仿真模式映射警报器&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83142f971da47b444028352263e23e4b2e004630" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;enable-connection-local-variables&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;enable-connection-local-variables&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d990c8adbf5a9051ccd8bb4ddc6e11f972b2fb9e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;enable-dir-local-variables&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;enable-dir-local-variables&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fa68ff277a4e1c1baab0a2eae6801f8ceb7c6dd6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;enable-multibyte-characters&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;enable-multibyte-characters&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9384f8e0da35165c269268c827c3b9400be030e1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;end-of-defun-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;终止功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bb2228773e3960a3562a5d0b4529f5a6fbb3913d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;exec-directory&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;exec-目录&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5f7a072909a05a7acfb2ce2787a33b3347643ab" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;executing-kbd-macro&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;executable-kbd-宏&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="834c14039e894e584c7b3d902fc981ca4a539569" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;extended-command-history&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;扩展命令历史&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff8f547fe22eed580ffc25dffb58b76bb3257aa2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;extra-keyboard-modifiers&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;额外的键盘修饰符&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a0aeb0a225689960d486ebdf69c2e38cd9e9ee83" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;face-filters-always-match&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;面部过滤器始终匹配&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="62541be3ae6f08037064f7c0bb564b0d180c908c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;face-font-rescale-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;face-font-rescale-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0b62dc8f353a7f5dd27b394ef7acc1c5e16b9e9b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;face-name-history&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;人名历史&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c2a308e761438a1704af8121ef5e2415c2a6330a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;face-remapping-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;面部重映射助手&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="faaba21d02cede45118faf08bfce32e5dda7c0d8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;features&lt;/strong&gt;</source>
          <target state="translated">可变：&lt;strong&gt;功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="91251a6d2a8edb55b95291421556302c81edaad1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;file-local-variables-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;文件本地变量警报器&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57b79c8ec03eec3862be2d6a6480af4839299e29" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;file-name-coding-system&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;文件名编码系统&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d8d558ad0cbff6804288b3d05654d202a1b159ed" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;file-name-history&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;文件名历史&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="14b8c1e425948c3184278e87044dbb8ca3c63512" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;fill-forward-paragraph-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;前馈段落功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c60ed11cd687952dfc052511e6c9f2c2e195008" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;fill-paragraph-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;填充段函数&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="591bce891a3c54f19fb55f0ad3c019e87b097bcb" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;filter-buffer-substring-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;filter-buffer-substring-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f2e1f9b5804d236ba09779f04d95675887ba394f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;filter-buffer-substring-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;filter-buffer-substring-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="585104e9374304c859e19d5667cb1f64900fa2bb" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;find-file-literally&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;逐字查找文件&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eb827ade32890a4fe0f8fc6a4c3e5342a327c92b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;find-file-not-found-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;找不到文件功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ed85746600a7dfa5dc23fe254e262b263f31c022" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;find-word-boundary-function-table&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;find-word-boundary-function-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="25306f8fd9fc42d16ab6abe41e38be90fb4b628a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;first-change-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;首次更换挂钩&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83845b8b3877cbe023af9234e29b4392b57b9add" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;float-e&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;float-e&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="027bc66973ac341a1e132966c194a359c88924ca" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;float-output-format&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;浮点输出格式&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ef73d36721a81f228697e5e4d457a3dd8323f13f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;float-pi&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;float-pi&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eef3414efac7c8d43e9d9bbf068c2e0b64caf85b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;floats-consed&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;浮动常量&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee7eec64b2bcd92dc96f1c273b98d250346dc8bd" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-defaults&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;font-lock-defaults&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db03ce99cd86a1454e0b5b57e7ffe4a3153e44d4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-ensure-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;字体锁定确保功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9464a2a14d824ace645bc668d35b60df1fb42517" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-extend-after-change-region-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;更改区域后字体锁定扩展功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02636e08e837432c2f3e40f575d8a2100c7e2f2b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-extra-managed-props&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;font-lock-extra-managed-props&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c71c5fd31b4541e464a5198a032fe8ff599a753a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-flush-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;font-lock-flush-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12cfe1ce4d216177efe622d37adba4c2f250227d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-fontify-buffer-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;font-lock-fontify-buffer-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db5473f5b4aabfeb0457b3d9aa747450a05dd451" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-fontify-region-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;font-lock-fontify-region-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="30e3a572298f59c2b7f7f9e74f14957464e36566" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-keywords-case-fold-search&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;font-lock-keywords-case-fold-search&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4a6fe37d5ff10375f3d780faadb23e68ceb198a7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-keywords-only&lt;/strong&gt;</source>
          <target state="translated">变量：仅&lt;strong&gt;字体锁关键字&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="21102dbbc493fd628cc24cdf265d17943d0793e3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-keywords&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;font-lock-keywords&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a36fa4c7e5ee47670c599a925a533ce771a9fd89" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-mark-block-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;字体锁定标记块功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="19eb2d1cfba942ae4c84708271c9163f9b06bc9d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-multiline&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;font-lock-multiline&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2196f924b36579e5fc9ee3390dbf45e66799817e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-syntactic-face-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;字体锁定句法人脸功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="84f4f72a765edcb7c39861e845caa9b59e2ba09a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-syntax-table&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;字体锁语法表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b5c43421370a8b59101b34e2068ad9af004ed645" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-unfontify-buffer-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;font-lock-unfontify-buffer-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec149d6877ab7d0bba8c5d27a589fdac4c2d3ca2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-unfontify-region-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;font-lock-unfontify-region-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="24f727ec96cf594b7b8aa5f6391db95e8a33dcf1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;fontification-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;字体功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f34e993525d6343f94a9827aded56abc7d6ef101" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;format-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;format-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="649f33a94aa49939d2fa245cb0e028f541ba4433" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;frame-inherited-parameters&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;框架继承的参数&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0f565f1138d3f3a7ce54f864a13be1dcec283109" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;frame-title-format&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;帧标题格式&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="07057d74b91061d9025776d121cce7ca5ba6aeba" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;fringe-cursor-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;边缘游标警报器&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="63d6c18885f7ad23a8d5754a1dbf24ced95ce67b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;fringe-indicator-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;边缘指示器警报器&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6041715157fe646c1c0c8c1d2bdb6ae72c12b0db" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;fringes-outside-margins&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;边缘外边距&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="88794fb04afccf3403ae9dccbfef23179b6a931c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;fundamental-mode-abbrev-table&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;基本模式缩写表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f3c22701d1fdf02da728289a3f73faf581b99cfb" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;gc-elapsed&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;gc经过&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8930565c355d5760c551e36543b675e0a33c70c6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;gcs-done&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;gcs-done&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48ea952abc9024944e3c7523862fd17e9879a1d0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;generate-autoload-cookie&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;generate-autoload-cookie&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ac6a250704ecaeb08adf9c23fb834141852876be" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;generated-autoload-file&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;生成自动加载文件&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9f41253b6b62b0db371ed8a1e330eceec28ccb3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;global-abbrev-table&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;全局缩写表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bc72fb4e4c67c3dee4b352f7baa97d361205738e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;global-disable-point-adjustment&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;全局禁用点调整&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c9d72d6617840f90a42a094068d79efd4f284db" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;global-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;全局地图&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a64319d323b168c2ee147692a7e2769ee8678646" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;global-mode-string&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;global-mode-string&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3d8266f7b5134d2783643aabf38542fcdaaa5a3a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;glyph-table&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;字形表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="972890e59e2e94041ffb0d3eb287638c7e67c603" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;glyphless-char-display&lt;/strong&gt;</source>
          <target state="translated">变量：无&lt;strong&gt;字形字符显示&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d5bd126732c5a689c60f4fa30f2fc99674b96fc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;hack-local-variables-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;hack-local-variables-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d33fb13795104cad204969a38c5497b29f76b4b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;header-line-format&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;标题行格式&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a4af2c637e941a26d3d19589a43bec81d254669f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;help-form&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;帮助表格&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f48969bf12c7cf4839db82e73855d85f267c5b70" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;help-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;帮助图&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="750f869fb23f23cee1fee2105c01417daaa4ad90" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;history-add-new-input&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;历史添加新输入&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="29465b30417743b333d7c84ef79146b1aa8ad90a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;horizontal-scroll-bar&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;水平滚动条&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4881cc80a7be12a1ea0e0c13378523bc6a758aa9" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;icon-title-format&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;icon-title-format&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="134ea33599fbe952e4b2f0430a8b7be9eba62633" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;ignore-window-parameters&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;忽略窗口参数&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1a6a9ebc069b334bd1989c295d318c71d537ccbd" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;ignored-local-variables&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;忽略的局部变量&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce976267f721e66fb9cdb2df0691a35b65f78830" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;image-cache-eviction-delay&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;图像缓存逐出延迟&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8f3f67543c0910582bc345ec8d8da12623bec259" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;image-format-suffixes&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;图像格式后缀&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="93076f3e181dd44e767f4cac8ee5c9914474fcf4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;image-types&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;图像类型&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bcb6301d7e02d199df35733be265b4f5dc58baf4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;imenu-case-fold-search&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;imenu-case-fold-search&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12841214bf1ee0abf3d90f9f16f636a3c02af2a1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;imenu-create-index-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;imenu-create-index-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf4daaa2d0345e3ad0f904211795269692a0e7ce" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;imenu-extract-index-name-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;imenu提取索引名称功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eecb03b08ff89084b8741eb2241e06dc00399d86" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;imenu-generic-expression&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;imenu-generic-expression&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="99011bbe7e103078ecd6305a69041849f359adaa" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;imenu-prev-index-position-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;imenu-上一个索引位置功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a4a7fea2af016e6f0a09cd0962be035e093bf5d6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;imenu-syntax-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;imenu-syntax-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ed73e5cee338c7da8c00206d21355602b2423f59" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;indent-line-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缩进线功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c5882339a055b45f93766ac3355b28df51f139c4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;indent-region-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;缩进区域功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8d284fb592c3cc8e50e327f982ca53e3cd64e5d2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-field-text-motion&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;禁止字段文字运动&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="afd80f320b5dca6e8beb50da8efa52ce375f703f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-file-name-handlers&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;禁止文件名处理程序&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca5f5890cefa08d0a543d569f04d99e965e96905" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-file-name-operation&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;禁止文件名操作&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="039ef8e8b4e638a35c2bc4e50df6b6b90d0351fc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-iso-escape-detection&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;禁止等逃逸检测&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ec319f37fdc63e67ecb3e58a626becfbc53d956" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-local-variables-regexps&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;禁止局部变量正则表达式&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d71cc032c21a7cfc38a023e2941a3afbbac59b3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-message&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;禁止消息&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="65f5708c068faf42c5b7286078887c104b886982" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-modification-hooks&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;禁止修改钩子&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ad0336fbb452882a0ccdb4c5b812731ba52747cf" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-nul-byte-detection&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;禁止检测字节&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d2f039dfdbbc072b3ad5281a953a5919378dceb" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-point-motion-hooks&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;抑制点运动钩&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="faaa955b0125731248af2398a7d66c47ceb8456c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-quit&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;禁止退出&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c031c9eb003d3b092f3dabe61a1dedc5db78a4d3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-read-only&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;禁止只读&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e3dde91c10dcfbf4886fae480fdd843dcca8b560" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-x-resources&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;抑制x资源&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0015ffbab64fe134a7d2e9a4724e27a55845763e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;init-file-user&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;init-file-user&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e12f2a805c8f1c9f3594978f7f73cdd40ba04edc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;initial-environment&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;初始环境&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a985547af432add4e3770c87690a50125d518898" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;initial-window-system&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;初始窗口系统&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="55034724c0dab295f75f1bff98c0963f249a62c6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;input-decode-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;input-decode-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="81bd6c10f538c08c57371beba88f4f30b8d0bca9" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;input-method-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;输入法警报&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bba40919ef2d21c050e0b7335238b6c6791180be" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;input-method-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;输入法功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee04aa78f14b7407883d8ca1cf2cb8e04d003e5e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;insert-directory-program&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;insert-directory-program&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5bab59ec28a0f277fc42f87f0f9b7460ca7373ac" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;installation-directory&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;安装目录&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="476d9c121bfcd62224bb96944fe580bb5a16b987" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;integer-width&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;整数宽度&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cb2d7b912c8d9b4daed1f37f2e74844c8a3dfabf" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;interpreter-mode-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;解释器模式助手&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="04df42f994c147d8b450ad8eeb717fcf322e9b97" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;interprogram-cut-function&lt;/strong&gt;</source>
          <target state="translated">变量：程序&lt;strong&gt;间剪切功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="449f09f32206b0efafab7bbbcb0bb99a3e1e4f1c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;interprogram-paste-function&lt;/strong&gt;</source>
          <target state="translated">变量：程序&lt;strong&gt;间粘贴功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8ceeea85c96a2b53a8147a9651d4ed6f86de385f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;interrupt-process-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;中断过程功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b7da71a51ca22f6d0649d4e49da2c6f532582e5" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;intervals-consed&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;间隔一致&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1841506aadcfa9c2345ec0fb933dccd7202407c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;invocation-directory&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;调用目录&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d6d374e7e1c262ae90d86f64fb90a0d9f2a49b5e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;invocation-name&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;调用名称&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c0dac215e7b7b8b9366c40ed4902aeecff38a6d7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;kbd-macro-termination-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;kbd宏终止钩&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f5574207789a0daa909861e150ab15bdc4e40d9d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;key-translation-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;键翻译映射&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3343ceddb7cc3efab5d188777f410e7c31d50ee" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;keyboard-translate-table&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;键盘翻译表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bfed6bf42f1bc8686bb5d859423b890d11e8b110" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;kill-buffer-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;kill-buffer-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f304cf696f1e632f8ba6c6f3f7cb1e0454e1509b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;kill-buffer-query-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;kill-buffer-query-functions功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="749877e0fc6c5aa02a13f97fc887fd8db1f6e476" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;kill-emacs-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;kill-emacs-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="40941afa9950702d326f1c9da0042f539f733a10" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;kill-ring-yank-pointer&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;kill-ring-yank-pointer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5059432d4ff9d735e103bc89015adc88b5adfee" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;kill-ring&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;杀人戒指&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1964fa4e6700a184342396a1d2bd401c8fd0720b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-abbrev-location&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;最后一个缩写位置&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b44dddd4d20daa9c41c65b545c820845da4ed61" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-abbrev-text&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;最后一个缩写文本&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f96b335a8c129e24aa3097b0fc86a899050ca7e2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-abbrev&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;最后一个缩写&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca26530c67f996e5541f0ab83dec583360a22f2e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-coding-system-used&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;系统最后使用的编码&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="51e3eb3975eec5c5759fd9a546287e64731599df" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-command-event&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;最后一个命令事件&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3380cb0f128839cd32c459048a4215f4926a4016" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-command&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;最后一个命令&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d078b5c5e51e95f9a7a268c5f2d9f851d179742a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-event-frame&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;最后一个事件帧&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae2a5b88183f50ea2726089d09b423ec138a6182" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-input-event&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;最后输入事件&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eb3a1cdd9122df6d277a06dc000cd7aa859effad" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-kbd-macro&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;last-kbd-宏&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f4848b4e152b3099900cb1a959ee4675ac9c2bd2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-nonmenu-event&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;上次非菜单事件&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="27e7c66cb75639059adf73d34bab5b5bd0c7cca5" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-prefix-arg&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;last-prefix-arg&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c32208b76441fd5ea9a3e76c03d6912d2ff47b3d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-repeatable-command&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;最后可重复的命令&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b9cbfca51379fc5fe9297a60cc5743e716a3fc9" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;left-fringe-width&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;左边缘宽度&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c95db88a3ef3b72bacdfaeecffbeb5ac4a55fa41" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;left-margin-width&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;左边距宽度&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2a8db3555a15edb3345757dfe61ad6d5b0783075" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;lexical-binding&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;词法绑定&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d68310d75a8c0ee563c1ec4e7aff36e695d0a0b4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;line-prefix&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;行前缀&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1404a9ebfce7ce4aa2e3035ae79670320daa7499" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;lisp-mode-abbrev-table&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;lisp-mode-abbrev-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6d5fb860b020172330fb869243b452da35b8d505" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;list-buffers-directory&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;list-buffers-directory&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bfdb8dce81c3d1d46af0a55b31a105593ae0989d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;load-file-name&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;加载文件名&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d92e6a91cb2f54dcef758a714a32ba306022835a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;load-file-rep-suffixes&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;load-file-rep-后缀&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4a3adcba049a8a1eb3b2f8db21046b838dada441" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;load-history&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;负载历史&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2652913099839783dda97daf2885c83512045b50" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;load-in-progress&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;正在进行中的负载&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="156a83c628b13502fceb68bce4ebddbce2f500c6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;load-path&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;加载路径&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c5c4ea914af7bf5b8fc5b4df05326e0d4d7b43bf" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;load-read-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;加载读取功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="524da005ae21cb2be7bba034c6ab91915be388a3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;load-suffixes&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;负载后缀&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52ba13393b38ffe6932edc53e5301d3fe4e7fef6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;local-abbrev-table&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;本地缩写表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f002f80933e739fddd590ca99382d39cc14f095b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;local-function-key-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;本地功能键映射&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9b13161aabecdf4c0615593e29aa09372a4ec0bc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;locale-coding-system&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;语言环境编码系统&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7883292371dd9a11c33eac750d16abb0d9df9d1c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;magic-fallback-mode-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;魔术后备模式警报器&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="467d984102d2abb25ab5382e6f1a5c574366d77d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;magic-mode-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;魔术模式助手&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ec82cf7fe2e7a62bc48aae427a05a9eaae5bff5" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;main-thread&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;主线程&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc5a9a7e98931e8d7e10153a0f7c7144f093c841" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mark-active&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;标记有效&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="045c81c631d3b2764659e78504e9d44a49a115a8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mark-ring&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;标记环&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9efe4d7ea63f72b8d724a0319952c7a28ab43bf6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;max-image-size&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;最大图像大小&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="28feacf8069377da4aa006c59fb32992cda1ff04" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;memory-full&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;内存已满&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a097ea61a90c49b8d606ccb60adc8e64511f1e63" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;menu-bar-final-items&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;菜单栏最终项目&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e069f19aed0c14bbbcf81984b8666ddb356dbf47" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;menu-bar-update-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;menu-bar-update-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a0529b052823000714aadfbf82fb4ff4ce7e6110" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;menu-prompt-more-char&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;菜单提示更多字符&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34b38083db8f5da8c612cf1e5a2134f6bdba0e95" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;message-truncate-lines&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;message-truncate-lines&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36e64c46211624bbb7a2f3439c98b2417a6816bb" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-allow-text-properties&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;minibuffer-allow-text-properties&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="86b47266ef2a3eae6c4b8962cb8a73d897d6e5ea" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-beginning-of-buffer-movement&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;最小缓冲开始于缓冲运动&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="37c700bdc7690fa0ad301820b3a2cdb5ab0c07d8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-completion-confirm&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;minibuffer-completion-confirm&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e62331aef18940cd6c49a50df7cf0575ecab6e3e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-completion-predicate&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;minibuffer-completion-predicate&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e0551ff0d7bf8af1580682c938e31b56936ca615" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-completion-table&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;minibuffer完成表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a5869206b9d91facdf9db29437298498742a3312" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-confirm-exit-commands&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;minibuffer-confirm-exit-commands&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34550c599fbf8b8bbc2a1fa54fb46642bf3b76eb" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-exit-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;minibuffer-exit-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a22995f59730cd89e9c1eb8927fdabacfa7de1e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-help-form&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;minibuffer-help-form&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0bd1acdcef197b3efe50a90aa8ba1f4b847eae1f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-history&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;minibuffer-history&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d00bd8f5e128d888b8abbc37b73e034daaf1686c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-local-completion-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;minibuffer-local-completion-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f999839f578fc1106e86e0e5b8ecd7460ad7890" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-local-filename-completion-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;minibuffer-local-filename-completion-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e4c20ba978278bf2a699d3aafcb093496e71d27c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-local-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;minibuffer-local-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dc3290e95d0abc5c5a4ffdd336d2234c0a1ed241" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-local-must-match-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;minibuffer-local-must-match-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="371c2aa40cf0069dfb0d401511c45d932d8238f6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-local-ns-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;minibuffer-local-ns-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5cbbfcc0ed02b54140603b63b89033d33dae2f92" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-local-shell-command-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;minibuffer-local-shell-command-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d7b4ce29a29a7c6f817da21c4909ef69ac3efb28" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-scroll-window&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;minibuffer-scroll-window&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a08709c9c2588b67608a23d1742a508b869f2542" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-setup-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;minibuffer-setup-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bc8e53c5bd52cd50b0b333e186c9367d3136e0e1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minor-mode-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;次要模式警报器&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b2c6b66a95d6dc19d899fbdb9c9112b5e4a751f1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minor-mode-list&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;次要模式列表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="75b26988be05941df375b7b79242dd83889e7bfe" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minor-mode-map-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;次要模式地图助手&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e74d14d7b54e493e613a0220791483515214e9ba" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minor-mode-overriding-map-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;次要模式覆盖地图助手&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9b6b5f09de50ea712ae5dda6a260a8b8a458650e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-buffer-identification&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;mode-line-buffer-identification&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a39b9719d0eb92aa934a11f68548787d75711a1f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-client&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;mode-line-client&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="193b431ced64a25d5c8de815f38c000a183a6f56" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-end-spaces&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;mode-line-end-spaces&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e592780a6bb8217f5a2cb4b75efc8f36fae68864" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-frame-identification&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;模式行框架标识&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="19a63c09c4d2c80b54f791ad3b590f8322dbf9cd" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-front-space&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;mode-line-front-space&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c54859dfb75068f2e71380e81e19ba090df19f84" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-misc-info&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;mode-line-misc-info&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="21ae1572fa855751b49de70b55d7840d072daec3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-modes&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;mode-line-modes&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="31be35ce48d60668b8d58487a6ac27b0568901f9" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-modified&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;模式行修改&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b0b36caa88ac8370144eec1c571477e56f52065" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-mule-info&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;mode-line-mule-info&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="43147db483c6f4a7c771e30c27461fe9cf96f66b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-position&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;模式行位置&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec09ff8078ff4edcc85cd6424826f8ed96c383a4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-process&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;mode-line-process&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a9caf1e759a19fc1db0810fb7b4e34454445d267" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-remote&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;mode-line-remote&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0701e4ff67cec7ea958aab00ee3cd086d8fe263d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-name&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;模式名&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8919b150b1fb6edb5ac01fbe97c9d96aad42abb2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;module-file-suffix&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;模块文件后缀&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="14f2aab67668982d108b9787519b786903ec5616" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;most-negative-fixnum&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;最负的fixnum&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="177381edcb8d6f7bc846ccc5afed7b1a41dc3e4c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;most-positive-fixnum&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;最正数&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e75a139cac8e7a6d5a7f1f9ae4935949865a8835" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mouse-fine-grained-tracking&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;鼠标细粒度跟踪&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b3b6d24c2c91a430784e9e79b4b57c6ed60330d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mouse-position-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;鼠标位置功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a63840e30d158bb98ba4e73f1adb0a02ac78e44f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;move-frame-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;移动框架功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff3e1902dda28b93b22a5fd0aaa492bacaa45273" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;multi-query-replace-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;multi-query-replace-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3e2034c1ca142d075989cc4ecba1b88fdc95449f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;multibyte-syntax-as-symbol&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;多字节语法为符号&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f5e8bf6ed474b07f85f77262ab0f53b5a661141" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;multiple-frames&lt;/strong&gt;</source>
          <target state="translated">可变：&lt;strong&gt;多帧&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="44829187d84e231d104c3f32ccb3e7363823b4ce" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;network-coding-system-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;网络编码系统助手&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5616abbb16ee2dd9ac85619d73481dc1589693f7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;noninteractive&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;非交互式&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a2510ab78884472b0f79a5e3d8e671650e020991" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;normal-auto-fill-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;正常自动填充功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="76791fb61d841a3f5f76587e39489a38c5798400" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;num-input-keys&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;num-input-keys&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b7abfe57f177c980f51dd02deb7bd33b443966c0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;num-nonmacro-input-events&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;num-nonmacro-input-events&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="baf513fcccc590093485e4d72dcfc0afeff09de0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;obarray&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;obarray&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8213a62a693e3766666dad4a7bd2a22373f177a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;other-window-scroll-buffer&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;other-window-scroll-buffer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3f2c60d4788d574c5a9cef281fc82cbd3a16e4aa" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;overlay-arrow-position&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;叠加箭头位置&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca1987d4674cf936e4b1fb4d2afa7ddfe232112c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;overlay-arrow-string&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;overlay-arrow-string&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e07efe1f447c463c1c08fb38d39c55ea30acbd98" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;overlay-arrow-variable-list&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;overlay-arrow-variable-list&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="20dd5d84417ea8ca8312a14b7914f7fc8eea3cee" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;overriding-local-map-menu-flag&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;覆盖本地地图菜单标志&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="be13b9a768581043e77c56f764d76fb94d660319" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;overriding-local-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;覆盖本地地图&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="98be6517446b95446c3d1709a616102fdf7644ff" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;overriding-terminal-local-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;overrideing-terminal-local-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8dc0f7318b1f19ef26b3bd67109c22c8467271af" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;overwrite-mode&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;覆盖模式&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9e8245cfaf85314e5235e930f971ef6ee8f9dc6d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;parse-sexp-lookup-properties&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;parse-sexp-lookup-properties&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f726b493c8fb9d6d8d69be4d17e1e6505d5a7cc4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;path-separator&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;路径分隔符&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="53cb9b52cf9d9b46ec49de66d098b2ec962b9fd0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;play-sound-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;播放声音功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c3584f80d28e5c0513edeaa1e092d476761b597" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;post-command-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;指令钩后&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d70f6026c68c1e06124135755d292c256c4c1db8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;post-gc-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;post-gc-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="08bd5edcc50375e7b65fac1fd0a3e04dfccb828e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;pre-command-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;命令前钩&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eb1b1cde643fe4cc480040f4519a81bc020c5761" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;pre-redisplay-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;预重显示功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e2ca063852b7b8e485ec89989264c7b77c73fac8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;pre-redisplay-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;预重显示功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba2467d8320e945004dfe3fc03effb39d9052088" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;prefix-arg&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;prefix-arg&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bab24bb81b6a382b7350fd86e8658845cd3d67f7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;prefix-help-command&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;前缀帮助命令&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6672468f034c87daa5836ec0f0b4d9b677154918" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-charset-text-property&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;print-charset-text-property&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="79882dccfc319f221de8f30046959567ce11ee96" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-circle&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;印刷圆&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2a2b6c11a9bc60be105ac033d07a0a66d9d78849" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-continuous-numbering&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;连续打印编号&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9714a11d0a7f99d9a01cd1c64315ece9a26b76db" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-escape-control-characters&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;print-escape-control-characters&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="714b8812329d456aefecfcf671cfc7dd1891d8fc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-escape-multibyte&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;print-escape-multibyte&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1feb35a095a241deb563cb8d9f690e6d84ded0dd" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-escape-newlines&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;print-escape-newlines&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bcbb9005440f3c38af11aec3fa222a5dea048308" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-escape-nonascii&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;print-escape-nonascii&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b89dd5b2970558e5b018540d117f3df1f3ade4d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-gensym&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;print-gensym&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="51c00282e03f0a5aa400ea87143c27f75327b598" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-length&lt;/strong&gt;</source>
          <target state="translated">可变：&lt;strong&gt;打印长度&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57b41f21e22342d0bbd7fffaef361e2d6e5f36f7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-level&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;打印级别&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="74ead417ddae9a2d75066b36d9e696a1a78d729d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-number-table&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;打印编号表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="037401177cb07b1411186c4aba51fe7c0c040adf" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-quoted&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;打印引用&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a65714133a8408f0bd7be560a8cdd47c8f4fc426" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;printable-chars&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;可打印字符&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="611ea996f10d4c25a854fc5ea8a54166d7a44148" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;process-adaptive-read-buffering&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;进程自适应读取缓冲&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d5e12b2e996994ec0cf11b9a8f4debfa0926e2d8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;process-coding-system-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;进程编码系统助手&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5f11e76a3793ebab21a369f36821f4a89bb4ba2c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;process-connection-type&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;进程连接类型&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b67b6b5510e69a1f4e3a022dd80be4c2e36d462d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;process-environment&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;过程环境&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d8ac6385b0dc4dc0ee1ee8f4c46ef6ebe503020b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;process-file-side-effects&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;进程文件的副作用&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1b2d7460a6b05a9bcb642a5700723553bae6847" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;prog-indentation-context&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;prog-indentation-context&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1830c06835a0e20db16bafca31f5834b929a50a1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;pure-bytes-used&lt;/strong&gt;</source>
          <target state="translated">变量：使用&lt;strong&gt;纯字节&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="66a3f792e474e308672f80838c4f10432f4e118a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;purify-flag&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;purify-flag&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3adf5b7133413df563c91a0ef11cdf76cb3790da" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;query-replace-history&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;查询替换历史&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff95803fedda17b5114acac43e82f5c140a4226a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;query-replace-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;query-replace-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6ce45a120c6e49a7b41bfc8716d2e9653fc4b7e8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;quit-flag&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;退出标志&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="72a441d06bb7a1bd54c919b6c6f3e874d524c2a1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;read-circle&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;读圈&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c4ac3e99cb62a29779dcd3ab7c007943ed1231a7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;read-expression-history&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;read-expression-history&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff19bc17082940aa0807bc01430858d484427adb" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;read-file-name-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;读取文件名功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e91adc5b898dad023be62b9a78c7b1c3a50dbc8a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;real-last-command&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;实最后一条命令&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="98810949447199bb0eb664559937043db90450a5" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;regexp-history&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;regexp-history&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="97489fd0dd0f3b7690d60f65e7052743ff8be68b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;regexp-unmatchable&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;regexp-unmatchable&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="675f28b09b2460be6c86903892d66725e86df6f8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;register-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;注册助理&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4387cf85b95bd49498e71693448f5e0d8dadb142" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;replace-re-search-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;替换搜索功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b0846d5930674e38df65035db55dd49557d1e765" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;replace-search-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;替换搜索功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4d37342bfc29ff0e0b5bbdc6b01ce20166eab36a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;revert-buffer-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;恢复缓冲区功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="41e3e32f56700d7ba77f106f5ce525fb99f1456e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;revert-buffer-in-progress-p&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;正在进行还原的p&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e2053393ff152cc2e43e01d7f777405fd47b93dc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;revert-buffer-insert-file-contents-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;恢复缓冲区插入文件内容功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9cd926fe96114e69f7b5c891374db5574c760fd9" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;right-fringe-width&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;右边缘宽度&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d96194d8740752b78f1a809dbd3478924eb6aed" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;right-margin-width&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;right-margin-width&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="889a66244500fe2d8c18b731ae5feae3f92bb45f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;save-buffer-coding-system&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;保存缓冲区编码系统&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57afdb21a853bff7428faa03cfad7c9a448ffcd8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;scroll-bar-height&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;滚动条高度&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="be5e7109c45594cf33f12b6ea4a9e7f3dadaf0f8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;scroll-bar-width&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;滚动条宽度&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="434e2b3dcefbafa5398278f5a61dfe4b7fcb8345" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;search-spaces-regexp&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;search-spaces-regexp&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4340847e2f67616ec787e195a7c2858210b56015" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;select-safe-coding-system-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;选择安全编码系统功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1831e733b22a056af98882b1552151fc46c02c59" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;selective-display&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;选择性显示&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="11b4c9eb78618adbff73e39b444a72117d7411d0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;set-message-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;设置消息功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3f491412f89b307e4a0ec96f592ab35133196c69" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;shell-command-history&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;shell命令历史&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b7e6c4d7ad25138d099d053482e6703291f7b7e7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;show-help-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;显示帮助功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="783ec957c651f7f83782b450a000b309a4ce1364" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;special-event-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;特殊事件图&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="99e7c5a93ad99e869e213461270445d9078f0d5c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;split-string-default-separators&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;分割字符串默认分隔符&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b2c521cb94f3c5649e630c4d705fe2d1926a77f4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;standard-display-table&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;标准显示表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9dd8c63e1fb4d533225e769169d3d10c63eb7088" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;standard-input&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;标准输入&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b9d4a7bd5f8b9fdb133e14531a6a698fd0b71bf0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;standard-output&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;标准输出&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="08f0ae2d7753d8824a05d6b6ad21e2889d5290db" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;standard-translation-table-for-decode&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;解码标准翻译表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dc2440913b14411c208887c1f19285ce0a191b96" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;standard-translation-table-for-encode&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;编码标准翻译表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="461a0aa834801ae75fd0086eaef04f87d5a78be8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;string-chars-consed&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;string-chars-consed&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="699b056f171c4f5afdd73367578c672468f29b60" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;strings-consed&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;字符串约束&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0dcf3720d4b860619097e3a21dafe1f7b9299d84" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;suspend-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;挂机钩&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1a71b978079f7cff48c84c8ecd0bcda1770d484" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;suspend-resume-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;suspend-resume-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e6337538882e76d02586bd36c531849a951d1cdf" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;symbols-consed&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;符号约束&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="25e6dec88de3f226b07d5e8bf0f69b2be742b7c1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;syntax-propertize-extend-region-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;语法专有扩展区域功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="87d9905c2701294a4109f6a48b8979936a068393" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;syntax-propertize-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;语法专有功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e3f87b4286f3265a19fb998dd555768298f25bba" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;system-configuration&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;系统配置&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="66df9703724b9d759fcd2b043b2d01184b130233" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;system-key-alist&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;system-key-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6786ef8a1f37da4d6319dd616ce81b8227b6eb8c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;system-messages-locale&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;system-messages-locale&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="371c0190f5ec25197c7630ba577cbf8c1331b042" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;system-time-locale&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;系统时间语言环境&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bf5639fde8821d5cc1ad48437ebfe6aa9738f61d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;system-type&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;系统类型&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a675e2d72ecd1da0387d63049b2828deb093673a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tabulated-list-entries&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;列表列表项&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4f2eb578ff0d245bd0dff6ecf8ee761a766a23de" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tabulated-list-format&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;列表格式&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f7067dd7254e3238c983aed1d37f4ebe77aa9b7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tabulated-list-printer&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;列表打印机&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3c97bf95b79e019d9b5182776a8f5c6609866827" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tabulated-list-revert-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;列表列表还原钩&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0f3e483f91a1d8dfa7b09ce5a22f77c609145824" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tabulated-list-sort-key&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;列表列表排序键&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1147eb98194a351344e2d997c3ee7bf11a9bb126" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;temp-buffer-setup-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;temp-buffer-setup-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0caa429d00a021bc1556866553fa6b73d4e0fc34" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;temp-buffer-show-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;temp-buffer-show-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f212a24b60e537a15e8f75d9119b9567ef469020" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;text-mode-abbrev-table&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;文本模式缩写表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f0844b40a97b4be956f62eae1cfbbff3d6258da" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;text-property-default-nonsticky&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;文本属性默认不粘&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1e419c165532c632e00ccd95f70d330d0f64a5b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;this-command&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;此命令&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="297d1979b7f5427b9509fa3cf06f815bb0af8a7f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;this-original-command&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;此原始命令&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b48a39108eff4653b524e31944527f365b05cd4d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;thread-list-refresh-seconds&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;线程列表刷新秒&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7884b8e2bb05230dbde0f0d7365de33252300aa0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tool-bar-border&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;工具栏边框&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="44f25abc25808c3a7744b9241a14d72bbd11ff8c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tool-bar-button-margin&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;工具栏按钮边距&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="14f8f2b605670e591498747110b0c33eb42a0af2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tool-bar-button-relief&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;工具栏按钮释放&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9b3a9b587a8775736da9d44a31e7c5d99336097" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tool-bar-map&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;工具栏图&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a05cad28a5e4d8b51cccde2de6a5fa7a94abd288" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tooltip-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;工具提示功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="573211452e6c4ef792ce21c1db73b1a814df64f0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;translation-table-for-input&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;输入翻译表&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b79311360ceb7e6638e083bedd1df2c417eb75c3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tty-erase-char&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;tty-erase-char&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3aa6e2d754f329ffbff935d1ac0a93ad80d0733c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tty-setup-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;tty-setup-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9b73efc43ce425c94e83e17f30f7449470d8dd86" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;undo-auto-current-boundary-timer&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;undo-auto-current-boundary-timer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e338284678203b7463487f3a38f18668a9d26d39" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;undo-in-progress&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;撤消进行中&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc3a27d0e93099cfc7171ba95e793bb7ed353ec6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;unicode-category-table&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;unicode-category-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7afe370e1d46249c18d745a0dc7fbf9bdb8eef67" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;unload-feature-special-hooks&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;卸载功能特殊挂钩&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fd11fc4e6e42b3cc0de62db98be3a4c0c8bccc1d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;unread-command-events&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;未读命令事件&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="946722b8cb0ff2ee2910d07130fdc7f7c782c426" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;use-hard-newlines&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;使用硬换行符&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="786c193f286ea5179898653206c020a80768c208" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;user-emacs-directory&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;user-emacs-directory&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ceebe7ba64bfea0f550ec298cc153ca246f98e86" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;user-init-file&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;用户初始化文件&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cfea75ea634eb8ad39199db99d8ba535b9ed2097" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;values&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;值&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="522e5625b0fbc01e798b27a4c5f94bdb885d18c4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;vc-mode&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;vc-mode&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="43e2a353a5150a903df3ca4b92c7ab3f88ce13fa" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;vector-cells-consed&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;vector-cells-consed&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c071c04398be6f2cb186133995742e61ccc7befc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;vertical-scroll-bar&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;垂直滚动条&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="81d4633888dccbafa8bde2eda5ec728b34192711" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;warning-fill-column&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;警告填充列&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3fa8b172d156adef920428241bd31b7cb754834c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;warning-fill-prefix&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;警告填充前缀&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6c69263a21bccd8bfbfed2061779efaee5079e32" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;warning-levels&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;警告级别&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="096047b56aa4383656a9ac163f7f38391c0c4089" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;warning-prefix-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;警告前缀功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c843af6368d9caae09ff7b4e66524346dd31636" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;warning-series&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;警告系列&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c63597e64edc181a5396ee2666084330c5edb71" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;warning-type-format&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;警告类型格式&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4bf59029547cbdbb42e4323a83f43477dbcfed16" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;while-no-input-ignore-events&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;while-no-input-ignore-events&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="69fbaf905df9b00d1942a22becc24ad885240319" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-buffer-change-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;窗口缓冲区更改功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="14679c115dc17fc87633dd0f01ba2be5c85754f1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-configuration-change-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;window-configuration-change-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb739634a1df959fb1dd68e97b424a1e72719e11" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-persistent-parameters&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;窗口持久参数&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="95fa8e8146f1850ede6c947edeb16d5d45c98b77" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-point-insertion-type&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;窗口点插入类型&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0ebb5e1d0bcd5e84e0a7dbbf5089a09750c2f68b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-scroll-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;窗口滚动功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c9809b2bd728344c75b4e3b6b9d2f9db98047b2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-selection-change-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;窗口选择更改功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="acb59aff6dbaa1554bd50a78e972502e8e5404ef" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-setup-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;window-setup-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c65e15c55a876fb6083a4b736809b2a104daf409" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-size-change-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;窗口大小更改功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d75612fc50a8d1813f4abe88bf49cdc0c8880dc8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-size-fixed&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;固定窗口大小&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b5627f954b0b8a495bfbe237b060b108651d3c6a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-state-change-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;窗口状态更改功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="757c57f59ca994c10853355266d4e88bba5288fd" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-state-change-hook&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;window-state-change-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8645cf95e9c550c8ed3f67ebc8fd826e42fc307" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-system&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;窗口系统&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="adbe12baa2db23a062813dd3a646e8edfa77ea37" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;wrap-prefix&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;环绕前缀&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c4549ca7273c71bfdf8b223c03f9d767e14e0478" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;write-contents-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;write-contents-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="29333e33d28e0e40a9904f8d0ffd91d95ab3effa" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;write-file-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;写文件功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d11877c1e6846044b38635ab52216f7c4b6c73b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;write-region-annotate-functions&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;写区域注释功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d2a14032fdb83dd7fe009543a2246d77fb45a62" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;write-region-inhibit-fsync&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;write-region-inhibit-fsync&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c076e43081d7a072111ddc45af25035b493dd5e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;write-region-post-annotation-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;写区域后注释功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8b6a885eab74f501f58feaae71104b968467c358" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-alt-keysym&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;x-alt-keysym&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fd8079b44c5955bef31cee1b7517d4cedaf4811f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-ctrl-keysym&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;x-ctrl-keysym&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="de0e63247b3545a9e78734530920dce49af33df8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-hyper-keysym&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;x-hyper-keysym&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="59dfd7c295892d35a49b7bdf7aa718574fe2e935" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-meta-keysym&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;x-meta-keysym&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7153899d926404f7f4bb38e2f4d1a0e234c70d1c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-pointer-shape&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;x指针形状&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3e847ce358f0ff8d292d83ad98b5d71abfbffdf1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-resource-class&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;x-资源类&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3dd14373280f6ec7ed9a984e9fc628e7bf92b467" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-resource-name&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;x-resource-name&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dacb08b5af492be0690f390524227c1097fad694" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-sensitive-text-pointer-shape&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;x敏感文本指针形状&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dcb26b46ff482368de45867502ed3f4cf6ed6d1d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-super-keysym&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;x-super-keysym&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b433ffb98ceda78f8bfff33db982f8f2bfe5f47" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;yank-undo-function&lt;/strong&gt;</source>
          <target state="translated">变量：&lt;strong&gt;撤销功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="5aa8072cb7560c375b88fab2c25f2edc71292437" translate="yes" xml:space="preserve">
          <source>Variables Affecting Output</source>
          <target state="translated">影响产出的变量</target>
        </trans-unit>
        <trans-unit id="4d580b8a57c61e0eb63214714c032421b8be0275" translate="yes" xml:space="preserve">
          <source>Variables Used in the Mode Line</source>
          <target state="translated">模式行中使用的变量</target>
        </trans-unit>
        <trans-unit id="485d8da4dbe56f282ec7d77c6e57875429143138" translate="yes" xml:space="preserve">
          <source>Variables can also have buffer-local bindings (see &lt;a href=&quot;buffer_002dlocal-variables#Buffer_002dLocal-Variables&quot;&gt;Buffer-Local Variables&lt;/a&gt;); a few variables have terminal-local bindings (see &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;). These kinds of bindings work somewhat like ordinary local bindings, but they are localized depending on where you are in Emacs.</source>
          <target state="translated">变量也可以具有局部缓冲区绑定（请参见&lt;a href=&quot;buffer_002dlocal-variables#Buffer_002dLocal-Variables&quot;&gt;局部缓冲区变量&lt;/a&gt;）。一些变量具有本地终端绑定（请参见&lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;）。这些绑定的工作方式与普通的本地绑定有些类似，但是它们的本地化取决于您在Emacs中的位置。</target>
        </trans-unit>
        <trans-unit id="d5d280c591e7e33c5e92151fce25a4e8e58e3f0e" translate="yes" xml:space="preserve">
          <source>Variables controlling completion behavior.</source>
          <target state="translated">控制完成行为的变量。</target>
        </trans-unit>
        <trans-unit id="7be681eb34254c92b95a0818571edd5b6ea48661" translate="yes" xml:space="preserve">
          <source>Variables of type &lt;code&gt;DEFVAR_BOOL&lt;/code&gt; can only take on the values &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;t&lt;/code&gt;. Attempting to assign them any other value will set them to &lt;code&gt;t&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;DEFVAR_BOOL&lt;/code&gt; 类型的变量只能采用 &lt;code&gt;nil&lt;/code&gt; 或 &lt;code&gt;t&lt;/code&gt; 值。尝试为它们分配任何其他值会将它们设置为 &lt;code&gt;t&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="58eb0b8c5a0676018a2981e2b03fce8d93b69a0f" translate="yes" xml:space="preserve">
          <source>Variables of type &lt;code&gt;DEFVAR_INT&lt;/code&gt; can take on only integer values. Attempting to assign them any other value will result in an error:</source>
          <target state="translated">&lt;code&gt;DEFVAR_INT&lt;/code&gt; 类型的变量只能采用整数值。尝试为它们分配任何其他值将导致错误：</target>
        </trans-unit>
        <trans-unit id="a760b32f10356fd693c0e949f3529b8609b2405d" translate="yes" xml:space="preserve">
          <source>Variables programs bind to customize their warnings.</source>
          <target state="translated">程序绑定的变量可以自定义其警告。</target>
        </trans-unit>
        <trans-unit id="5260444b76ef1bd438c61585595a2c39f70147c5" translate="yes" xml:space="preserve">
          <source>Variables set by the command loop for you to examine.</source>
          <target state="translated">命令循环设置的变量,供你检查。</target>
        </trans-unit>
        <trans-unit id="9e74dc189f2d7f134363b60d83dc79b5f8b9a1e5" translate="yes" xml:space="preserve">
          <source>Variables that Never Change</source>
          <target state="translated">永不改变的变量</target>
        </trans-unit>
        <trans-unit id="a3ec36552e7ef886e8d62fdcd9e40602c84c636a" translate="yes" xml:space="preserve">
          <source>Variables that are aliases for other variables.</source>
          <target state="translated">是其他变量的别称的变量。</target>
        </trans-unit>
        <trans-unit id="e4cdcb436e2561abd3e1325f7eefb1a1b1e71a30" translate="yes" xml:space="preserve">
          <source>Variables that control what the printing functions do.</source>
          <target state="translated">控制打印功能的变量。</target>
        </trans-unit>
        <trans-unit id="ff2c99475d7a3d9deddc9d798776c373e2470e09" translate="yes" xml:space="preserve">
          <source>Variables that hold kill ring data.</source>
          <target state="translated">保存杀戒数据的变量。</target>
        </trans-unit>
        <trans-unit id="29c9d74f4b54df072a8bc059ae81983cad7e4a7c" translate="yes" xml:space="preserve">
          <source>Variables that never change.</source>
          <target state="translated">永不改变的变量。</target>
        </trans-unit>
        <trans-unit id="a6083e693117f8c2616afa79a4ff3a68d44f37e9" translate="yes" xml:space="preserve">
          <source>Variables used in that data structure.</source>
          <target state="translated">该数据结构中使用的变量。</target>
        </trans-unit>
        <trans-unit id="a4d0dc31792c68fdca52220f79d3af04e609de89" translate="yes" xml:space="preserve">
          <source>Variables users set to control display of warnings.</source>
          <target state="translated">用户设置的变量用于控制警告的显示。</target>
        </trans-unit>
        <trans-unit id="b2a556c5d947fd30acff0aa48693d5eb2b778b10" translate="yes" xml:space="preserve">
          <source>Variables usually don&amp;rsquo;t need to be autoloaded. An exception is if the variable on its own is generally useful without the whole defining library being loaded. (An example of this might be something like &lt;code&gt;find-exec-terminator&lt;/code&gt;.)</source>
          <target state="translated">变量通常不需要自动加载。一个例外是，如果变量本身通常在不加载整个定义库的情况下是有用的。（一个例子可能是诸如 &lt;code&gt;find-exec-terminator&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="2766d9e281c08653c4618f82d2023d28bdbb7732" translate="yes" xml:space="preserve">
          <source>Variables with Restricted Values</source>
          <target state="translated">有限制值的变量</target>
        </trans-unit>
        <trans-unit id="6421a722adc5c1bcc5c731d9a977c2b5318c3f53" translate="yes" xml:space="preserve">
          <source>Various customization hooks and variables.</source>
          <target state="translated">各种自定义钩子和变量。</target>
        </trans-unit>
        <trans-unit id="4e1c7ebb12752ab41efb9466049f1adff93ab977" translate="yes" xml:space="preserve">
          <source>Various data types that can be used as input streams.</source>
          <target state="translated">可用作输入流的各种数据类型。</target>
        </trans-unit>
        <trans-unit id="839ac4fca006549962c3f7de05f36bcb82e169ab" translate="yes" xml:space="preserve">
          <source>Various data types that can be used as output streams.</source>
          <target state="translated">可用作输出流的各种数据类型。</target>
        </trans-unit>
        <trans-unit id="5ca1f5efe5ff9860ebf2a0c8b320c6474710eb78" translate="yes" xml:space="preserve">
          <source>Various other formats are supported.</source>
          <target state="translated">还支持其他各种格式。</target>
        </trans-unit>
        <trans-unit id="0ac489d9a1895c6f2eb014ecb11d0e2c0cdd725c" translate="yes" xml:space="preserve">
          <source>Vector Type</source>
          <target state="translated">矢量类型</target>
        </trans-unit>
        <trans-unit id="4cad8cb182489b679287441dffb83204bc591f30" translate="yes" xml:space="preserve">
          <source>Vector of &lt;var&gt;len&lt;/var&gt; elements of type &lt;var&gt;type&lt;/var&gt;, defaulting to bytes. The &lt;var&gt;type&lt;/var&gt; is any of the simple types above, or another vector specified as a list of the form &lt;code&gt;(vec &lt;var&gt;len&lt;/var&gt; [&lt;var&gt;type&lt;/var&gt;])&lt;/code&gt;.</source>
          <target state="translated">的矢量 &lt;var&gt;len&lt;/var&gt; 个类型的元素 &lt;var&gt;type&lt;/var&gt; ，默认为字节。的 &lt;var&gt;type&lt;/var&gt; 是指定为以下形式的列表中的任何上述简单的类型，或另一向量 &lt;code&gt;(vec &lt;var&gt;len&lt;/var&gt; [&lt;var&gt;type&lt;/var&gt;])&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4d8fa69b55a1468bf147abf44bbdbf7cd114cec" translate="yes" xml:space="preserve">
          <source>Vectors</source>
          <target state="translated">Vectors</target>
        </trans-unit>
        <trans-unit id="dd890137f12c8269fe2f6e2d8f00dbeec49853de" translate="yes" xml:space="preserve">
          <source>Vectors are printed with square brackets surrounding the elements. Thus, a vector whose elements are the symbols &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; is printed as &lt;code&gt;[a b a]&lt;/code&gt;. You can write vectors in the same way in Lisp input.</source>
          <target state="translated">向量在元素周围用方括号打印。因此，将元素为符号 &lt;code&gt;a&lt;/code&gt; ， &lt;code&gt;b&lt;/code&gt; 和 &lt;code&gt;a&lt;/code&gt; 的向量打印为 &lt;code&gt;[a b a]&lt;/code&gt; 。您可以在Lisp输入中以相同方式编写向量。</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="f6ac74c77426f288c7c85c95d3e2e0752da06bc7" translate="yes" xml:space="preserve">
          <source>Version Information</source>
          <target state="translated">版本信息</target>
        </trans-unit>
        <trans-unit id="6f961280b418e89ebf7d9a94a505fd17524de6c1" translate="yes" xml:space="preserve">
          <source>Vertical Fractional Scrolling</source>
          <target state="translated">垂直小数滚动</target>
        </trans-unit>
        <trans-unit id="24f114ffd0d6b48f33aeb1c66fd28edb81d979f9" translate="yes" xml:space="preserve">
          <source>Vertical scroll amount, in pixels. Normally, this is 0.</source>
          <target state="translated">垂直滚动量,单位为像素。通常情况下,这个数值为0。</target>
        </trans-unit>
        <trans-unit id="3f9b0b4839d8e13d831fc5b511adb5b36b696d39" translate="yes" xml:space="preserve">
          <source>Very fast lookup-tables.</source>
          <target state="translated">非常快速的查询表。</target>
        </trans-unit>
        <trans-unit id="b6da6c696ae90f36386ef2ac32097cf341e0e381" translate="yes" xml:space="preserve">
          <source>Via the Package Menu, users may download packages from &lt;em&gt;package archives&lt;/em&gt;. Such archives are specified by the variable &lt;code&gt;package-archives&lt;/code&gt;, whose default value contains a single entry: the archive hosted by the GNU project at &lt;a href=&quot;https://elpa.gnu.org&quot;&gt;https://elpa.gnu.org&lt;/a&gt;. This section describes how to set up and maintain a package archive.</source>
          <target state="translated">通过&amp;ldquo;程序包菜单&amp;rdquo;，用户可以从&lt;em&gt;程序包档案中&lt;/em&gt;下载程序&lt;em&gt;包&lt;/em&gt;。此类归档文件由变量 &lt;code&gt;package-archives&lt;/code&gt; 指定，其默认值包含一个条目：由GNU项目托管的归档文件，&lt;a href=&quot;https://elpa.gnu.org&quot;&gt;网址&lt;/a&gt;为https://elpa.gnu.org。本节介绍如何设置和维护程序包档案。</target>
        </trans-unit>
        <trans-unit id="968106212d48214e704ba7218007699b908cc011" translate="yes" xml:space="preserve">
          <source>Views inside and outside of Edebug.</source>
          <target state="translated">埃德布格内外景。</target>
        </trans-unit>
        <trans-unit id="d4cd645bdf9acd554823451c75a4b3ac95fd503c" translate="yes" xml:space="preserve">
          <source>Visibility is meaningless on text terminals, since only the selected frame is actually displayed in any case.</source>
          <target state="translated">可见性在文本终端上是没有意义的,因为在任何情况下,只有选定的框架才会实际显示。</target>
        </trans-unit>
        <trans-unit id="08d6eb9d7d0b70e1e2f7ff16375b109c59731e9d" translate="yes" xml:space="preserve">
          <source>Visibility of Frames</source>
          <target state="translated">框架的可见性</target>
        </trans-unit>
        <trans-unit id="d3a94bce45b2297d43744ffef2942438b299a47f" translate="yes" xml:space="preserve">
          <source>Visiting Files</source>
          <target state="translated">访问文件</target>
        </trans-unit>
        <trans-unit id="0c362d65c0b71c0282bdf8488948910da13a2012" translate="yes" xml:space="preserve">
          <source>Visiting a file means reading a file into a buffer. Once this is done, we say that the buffer is &lt;em&gt;visiting&lt;/em&gt; that file, and call the file &lt;em&gt;the visited file&lt;/em&gt; of the buffer.</source>
          <target state="translated">访问文件意味着将文件读入缓冲区。一旦做到这一点，我们说的缓冲区&lt;em&gt;访问&lt;/em&gt;该文件，并将该文件&lt;em&gt;被访问文件&lt;/em&gt;的缓冲区。</target>
        </trans-unit>
        <trans-unit id="0274a1e55edf09cbea63b919421a47f8e8c9255d" translate="yes" xml:space="preserve">
          <source>Visiting a file, with &lt;code&gt;find-file-noselect&lt;/code&gt; or the commands that use it, performs conversion likewise (because it calls &lt;code&gt;insert-file-contents&lt;/code&gt;); it also calls the mode function for each format that it decodes. It stores a list of the format names in the buffer-local variable &lt;code&gt;buffer-file-format&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;find-file-noselect&lt;/code&gt; 或使用该文件的命令访问文件的方式相同（因为它调用 &lt;code&gt;insert-file-contents&lt;/code&gt; ）；它还为它解码的每种格式调用mode函数。它将格式名称列表存储在局部 &lt;code&gt;buffer-file-format&lt;/code&gt; 变量buffer-file-format中。</target>
        </trans-unit>
        <trans-unit id="e2415cb7f63df0c9de23362326ad3c37a9adfc96" translate="yes" xml:space="preserve">
          <source>W</source>
          <target state="translated">W</target>
        </trans-unit>
        <trans-unit id="a7be8dbb65beeab8726a0f360d79b84f3d32f6e2" translate="yes" xml:space="preserve">
          <source>Wait for another thread to notify &lt;var&gt;cond&lt;/var&gt;, a condition variable. This function will block until the condition is notified, or until a signal is delivered to this thread using &lt;code&gt;thread-signal&lt;/code&gt;.</source>
          <target state="translated">等待另一个线程通知条件变量 &lt;var&gt;cond&lt;/var&gt; 。该函数将一直阻塞，直到通知条件为止，或者直到使用 &lt;code&gt;thread-signal&lt;/code&gt; 向该线程传递信号为止。</target>
        </trans-unit>
        <trans-unit id="749d36dff23d4698291f2b055c5b31742ec5a07c" translate="yes" xml:space="preserve">
          <source>Waiting for Elapsed Time or Input</source>
          <target state="translated">等待时间或输入</target>
        </trans-unit>
        <trans-unit id="1813a330b6da950a7eb66012d9aa259525fc97b5" translate="yes" xml:space="preserve">
          <source>Waiting for user input or elapsed time.</source>
          <target state="translated">等待用户输入或经过的时间。</target>
        </trans-unit>
        <trans-unit id="d0ceaaba51082c2077dd631e1a6651753c03c5ef" translate="yes" xml:space="preserve">
          <source>Warning Basics</source>
          <target state="translated">警报基础知识</target>
        </trans-unit>
        <trans-unit id="ea0ef30fd9bda293d78af05a20b81fc75c62d811" translate="yes" xml:space="preserve">
          <source>Warning Options</source>
          <target state="translated">警告选项</target>
        </trans-unit>
        <trans-unit id="21cc223192651b1e1f7f5e6e6bc104650334196f" translate="yes" xml:space="preserve">
          <source>Warning Variables</source>
          <target state="translated">警告变量</target>
        </trans-unit>
        <trans-unit id="950eb9ff619006f2694bdc4c44fc4914c6240d09" translate="yes" xml:space="preserve">
          <source>Warnings concepts and functions to report them.</source>
          <target state="translated">警告的概念和报告警告的功能。</target>
        </trans-unit>
        <trans-unit id="a8d4aaa3899c67cd460bfb444f7db67a1e36b907" translate="yes" xml:space="preserve">
          <source>Ways to compose advice</source>
          <target state="translated">撰写建议的方法</target>
        </trans-unit>
        <trans-unit id="79f5da6994eb4e0faa629213a3ff5a2cfe6f96b4" translate="yes" xml:space="preserve">
          <source>Ways to compose advice.</source>
          <target state="translated">撰写建议的方法。</target>
        </trans-unit>
        <trans-unit id="9f42c347cd6eb3cb730ffd48876b95e8ac4d10f8" translate="yes" xml:space="preserve">
          <source>We also speak of the &lt;em&gt;global binding&lt;/em&gt;, which is where (conceptually) the global value is kept.</source>
          <target state="translated">我们还谈到了&lt;em&gt;全球约束力&lt;/em&gt;，这是（从概念上）保持全球价值的地方。</target>
        </trans-unit>
        <trans-unit id="0d668e5cb1bf3fedea5caf8974c18fb37bb6627b" translate="yes" xml:space="preserve">
          <source>We can call this function by passing it to &lt;code&gt;funcall&lt;/code&gt;, like this:</source>
          <target state="translated">我们可以通过将其传递给 &lt;code&gt;funcall&lt;/code&gt; 来调用此函数，如下所示：</target>
        </trans-unit>
        <trans-unit id="34783863c944d7c3a4275a0a72a8a7a87a6a5772" translate="yes" xml:space="preserve">
          <source>We can, however, reasonably conclude that customizing &lt;code&gt;display-buffer-alist&lt;/code&gt; differs from customizing &lt;code&gt;display-buffer-base-action&lt;/code&gt; in two major aspects: it is stronger because it overrides the &lt;var&gt;action&lt;/var&gt; argument of &lt;code&gt;display-buffer&lt;/code&gt;, and it allows to explicitly specify the affected buffers. In fact, displaying other buffers is not affected in any way by a customization for</source>
          <target state="translated">但是，我们可以合理地得出结论，自定义 &lt;code&gt;display-buffer-alist&lt;/code&gt; 与自定义 &lt;code&gt;display-buffer-base-action&lt;/code&gt; 在两个主要方面不同：它更强大，因为它覆盖了 &lt;code&gt;display-buffer&lt;/code&gt; 的 &lt;var&gt;action&lt;/var&gt; 参数，并且允许显式指定受影响的缓冲区。实际上，显示其他缓冲区不受定制的任何影响</target>
        </trans-unit>
        <trans-unit id="9d3194adcf565512ddaefe5ff7ccea51d2f1f332" translate="yes" xml:space="preserve">
          <source>We could stop with our examples here but Lisp programs still have an ace up their sleeves which they can use to overrule any customization of &lt;code&gt;display-buffer-alist&lt;/code&gt;. It&amp;rsquo;s the variable &lt;code&gt;display-buffer-overriding-action&lt;/code&gt; which they can bind around &lt;code&gt;display-buffer&lt;/code&gt; calls as follows:</source>
          <target state="translated">我们可以在这里停止示例，但是Lisp程序仍然有其优势，可以用来推翻 &lt;code&gt;display-buffer-alist&lt;/code&gt; 的任何自定义。这是变量 &lt;code&gt;display-buffer-overriding-action&lt;/code&gt; ，它们可以围绕 &lt;code&gt;display-buffer&lt;/code&gt; 调用进行绑定，如下所示：</target>
        </trans-unit>
        <trans-unit id="bfc5ece5ba431e6c326e9f44789684fd3627a82c" translate="yes" xml:space="preserve">
          <source>We do not bind &lt;code&gt;this-command&lt;/code&gt; with &lt;code&gt;let&lt;/code&gt; because that would restore the old value in case of error&amp;mdash;a feature of &lt;code&gt;let&lt;/code&gt; which in this case does precisely what we want to avoid.</source>
          <target state="translated">我们不绑定 &lt;code&gt;this-command&lt;/code&gt; 与 &lt;code&gt;let&lt;/code&gt; ，因为这会在错误的特征的情况下，恢复旧的价值 &lt;code&gt;let&lt;/code&gt; ，在这种情况下，不正是我们希望避免的。</target>
        </trans-unit>
        <trans-unit id="159a9d35556998bedeef1f723841442c69d829a8" translate="yes" xml:space="preserve">
          <source>We do not list the error-strings of this error and its subcategories, because the error message is normally constructed from the data items alone when the error condition &lt;code&gt;file-error&lt;/code&gt; is present. Thus, the error-strings are not very relevant. However, these error symbols do have &lt;code&gt;error-message&lt;/code&gt; properties, and if no data is provided, the &lt;code&gt;error-message&lt;/code&gt; property &lt;em&gt;is&lt;/em&gt; used. See &lt;a href=&quot;files#Files&quot;&gt;Files&lt;/a&gt;.</source>
          <target state="translated">我们没有列出此错误及其子类别的错误字符串，因为当出现错误条件 &lt;code&gt;file-error&lt;/code&gt; 时，错误消息通常仅由数据项构成。因此，错误字符串不是很相关。然而，这些误差的符号做有 &lt;code&gt;error-message&lt;/code&gt; 的特性，并且如果没有提供数据，则 &lt;code&gt;error-message&lt;/code&gt; 属性&lt;em&gt;被&lt;/em&gt;使用。参见&lt;a href=&quot;files#Files&quot;&gt;文件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5decfae24bac2b0751e1b6135e50a2e5cd9a8a08" translate="yes" xml:space="preserve">
          <source>We do not wish to add new symbols to make finer distinctions unless it is absolutely necessary! In fact, we hope to eliminate some of these alternatives in the future. If you need to make a finer distinction than &lt;code&gt;system-type&lt;/code&gt; allows for, you can test &lt;code&gt;system-configuration&lt;/code&gt;, e.g., against a regexp.</source>
          <target state="translated">除非绝对必要，否则我们不希望添加新的符号来进行更好的区分！实际上，我们希望将来消除某些替代方案。如果您需要更好地区分 &lt;code&gt;system-type&lt;/code&gt; 所允许的范围，则可以测试 &lt;code&gt;system-configuration&lt;/code&gt; （例如，针对正则表达式）。</target>
        </trans-unit>
        <trans-unit id="7be098d6a87976d013ead5aa99eb0d69a9e5b2d1" translate="yes" xml:space="preserve">
          <source>We emphasize that, unlike &lt;code&gt;read-key-sequence&lt;/code&gt;, the functions &lt;code&gt;read-event&lt;/code&gt;, &lt;code&gt;read-char&lt;/code&gt;, and &lt;code&gt;read-char-exclusive&lt;/code&gt; do not perform the translations described in &lt;a href=&quot;translation-keymaps#Translation-Keymaps&quot;&gt;Translation Keymaps&lt;/a&gt;. If you wish to read a single key taking these translations into account, use the function &lt;code&gt;read-key&lt;/code&gt;:</source>
          <target state="translated">我们强调，与 &lt;code&gt;read-key-sequence&lt;/code&gt; 不同， &lt;code&gt;read-event&lt;/code&gt; ， &lt;code&gt;read-char&lt;/code&gt; 和 &lt;code&gt;read-char-exclusive&lt;/code&gt; 函数不执行&lt;a href=&quot;translation-keymaps#Translation-Keymaps&quot;&gt;Translation Keymaps中&lt;/a&gt;描述的翻译。如果您希望在考虑这些翻译的情况下阅读单个键，请使用 &lt;code&gt;read-key&lt;/code&gt; 函数：</target>
        </trans-unit>
        <trans-unit id="670f88a4884b1b803e1eba7ef68c45091b8b9985" translate="yes" xml:space="preserve">
          <source>We give functions names because it is convenient to refer to them by their names in Lisp expressions. Also, a named Lisp function can easily refer to itself&amp;mdash;it can be recursive. Furthermore, primitives can only be referred to textually by their names, since primitive function objects (see &lt;a href=&quot;primitive-function-type#Primitive-Function-Type&quot;&gt;Primitive Function Type&lt;/a&gt;) have no read syntax.</source>
          <target state="translated">我们给函数起名字是因为在Lisp表达式中方便地用它们的名字来引用它们。同样，一个命名为Lisp的函数可以很容易地引用其自身-它可以是递归的。此外，由于基元函数对象（请参见&amp;ldquo;基&lt;a href=&quot;primitive-function-type#Primitive-Function-Type&quot;&gt;元函数类型&amp;rdquo;&lt;/a&gt;）没有读取语法，因此只能用其名称在文本上引用基元。</target>
        </trans-unit>
        <trans-unit id="6a7c6edd92c0307bfe9f5ccde285aa6b6206dd77" translate="yes" xml:space="preserve">
          <source>We illustrate these possibilities by calling the following function with various prefixes:</source>
          <target state="translated">我们通过调用以下不同前缀的函数来说明这些可能性。</target>
        </trans-unit>
        <trans-unit id="fbd7c8d6e030bec37125599c7ed1141f965b2b86" translate="yes" xml:space="preserve">
          <source>We invite users to write Lisp programs to store and retrieve text properties in files, using these hooks, and thus to experiment with various data formats and find good ones. Eventually we hope users will produce good, general extensions we can install in Emacs.</source>
          <target state="translated">我们邀请用户使用这些钩子编写Lisp程序来存储和检索文件中的文本属性,从而尝试各种数据格式,并找到好的数据格式。最终我们希望用户能够制作出好的、通用的扩展,我们可以安装在Emacs中。</target>
        </trans-unit>
        <trans-unit id="5fadf83090f30144af161405290746495a705dbd" translate="yes" xml:space="preserve">
          <source>We now describe some technical details about the exact suffixes that &lt;code&gt;load&lt;/code&gt; tries.</source>
          <target state="translated">现在，我们描述一些有关 &lt;code&gt;load&lt;/code&gt; 尝试的确切后缀的技术细节。</target>
        </trans-unit>
        <trans-unit id="98dbbe6139420af597b3a2bbdb6e62506d894544" translate="yes" xml:space="preserve">
          <source>We recommend that modules always perform the compatibility verification, unless they do their job entirely in the initialization function, and don&amp;rsquo;t access any Lisp objects or use any Emacs functions accessible through the environment structure.</source>
          <target state="translated">我们建议模块始终执行兼容性验证，除非它们完全在初始化函数中完成其工作，并且不要访问任何Lisp对象或使用通过环境结构可访问的任何Emacs函数。</target>
        </trans-unit>
        <trans-unit id="57c90ae2691e132592b9cb39b509e4c7e9d9dffe" translate="yes" xml:space="preserve">
          <source>We recommend that new programs avoid dealing with these complexities by not storing keyboard events in strings. Here is how to do that:</source>
          <target state="translated">我们建议新程序不要将键盘事件存储在字符串中,以避免处理这些复杂的问题。下面是如何做到这一点。</target>
        </trans-unit>
        <trans-unit id="0d6e0d2496e8712d25196ff14ad46a0c40573ade" translate="yes" xml:space="preserve">
          <source>We recommend that you only bind this variable for modifications that do not result in lasting changes to buffer text contents (for example face changes or temporary modifications). If you need to delay change hooks during a series of changes (typically for performance reasons), use &lt;code&gt;combine-change-calls&lt;/code&gt; or &lt;code&gt;combine-after-change-calls&lt;/code&gt; instead.</source>
          <target state="translated">我们建议您仅将此变量绑定以进行修改，而这些修改不会导致对缓冲区文本内容进行持久更改（例如，面部更改或临时修改）。如果需要在一系列更改期间延迟更改挂接（通常出于性能原因），请改用 &lt;code&gt;combine-change-calls&lt;/code&gt; 或 &lt;code&gt;combine-after-change-calls&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="74eff4c45f3a86af34cf84ff95f9377a7b69ca68" translate="yes" xml:space="preserve">
          <source>We recommend that you use &lt;code&gt;with-suppressed-warnings&lt;/code&gt; instead, but if you do use this construct, that you use it around the smallest possible piece of code to avoid missing possible warnings other than one you intend to suppress.</source>
          <target state="translated">我们建议您改为使用 &lt;code&gt;with-suppressed-warnings&lt;/code&gt; ，但如果确实使用此构造，则应在尽可能小的代码段中使用它，以避免遗漏除了要抑制的警告以外的其他可能的警告。</target>
        </trans-unit>
        <trans-unit id="6b912ba2b2cf33a76a20dc963c1bb3be8ad475bb" translate="yes" xml:space="preserve">
          <source>We say that &amp;ldquo;the &lt;small&gt;CAR&lt;/small&gt; of this cons cell is&amp;rdquo; whatever object its &lt;small&gt;CAR&lt;/small&gt; slot currently holds, and likewise for the &lt;small&gt;CDR&lt;/small&gt;.</source>
          <target state="translated">我们说&amp;ldquo;此cons单元的&lt;small&gt;CAR&lt;/small&gt;是&amp;rdquo;其&lt;small&gt;CAR&lt;/small&gt;插槽当前拥有的任何对象，对于&lt;small&gt;CDR&lt;/small&gt;同样如此。</target>
        </trans-unit>
        <trans-unit id="465e576b1e106e138ab23c2c80f5f7c0d040d01e" translate="yes" xml:space="preserve">
          <source>We say that a variable is void if its symbol has an unassigned value cell (see &lt;a href=&quot;symbol-components#Symbol-Components&quot;&gt;Symbol Components&lt;/a&gt;).</source>
          <target state="translated">我们说如果变量的符号具有未分配的值单元格，则该变量为空（请参见&lt;a href=&quot;symbol-components#Symbol-Components&quot;&gt;Symbol Components&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="b9ff279e59573eaf1b4bba7e1686aa464914ac68" translate="yes" xml:space="preserve">
          <source>We still have two return points, but this time only the outer one has the tag &lt;code&gt;hack&lt;/code&gt;; the inner one has the tag &lt;code&gt;quux&lt;/code&gt; instead. Therefore, &lt;code&gt;throw&lt;/code&gt; makes the outer &lt;code&gt;catch&lt;/code&gt; return the value &lt;code&gt;yes&lt;/code&gt;. The function &lt;code&gt;print&lt;/code&gt; is never called, and the body-form &lt;code&gt;'no&lt;/code&gt; is never evaluated.</source>
          <target state="translated">我们仍然有两个返回点，但是这次只有外面的一个具有标记 &lt;code&gt;hack&lt;/code&gt; ；内部的则带有 &lt;code&gt;quux&lt;/code&gt; 标签。因此， &lt;code&gt;throw&lt;/code&gt; 使外部 &lt;code&gt;catch&lt;/code&gt; 返回值 &lt;code&gt;yes&lt;/code&gt; 。永远不会调用函数 &lt;code&gt;print&lt;/code&gt; ,也永远不会评估主体形式的 &lt;code&gt;'no&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="247b16deead2e69a7c5e42167c6021981978e59d" translate="yes" xml:space="preserve">
          <source>We suggest not trying to handle arbitrary Lisp objects as text property names or values&amp;mdash;because a program that general is probably difficult to write, and slow. Instead, choose a set of possible data types that are reasonably flexible, and not too hard to encode.</source>
          <target state="translated">我们建议不要尝试将任意Lisp对象作为文本属性名称或值来处理-因为一般的程序可能很难编写且运行缓慢。而是选择一组可能的数据类型，这些数据类型应具有一定的灵活性，并且不太难编码。</target>
        </trans-unit>
        <trans-unit id="71128c7fdcf74454bb577a9a486c3871ebdeee25" translate="yes" xml:space="preserve">
          <source>We use &lt;code&gt;&quot;p&quot;&lt;/code&gt; because the numeric prefix argument is never &lt;code&gt;nil&lt;/code&gt;. Defined in this way, the function does display the message when called from a keyboard macro.</source>
          <target state="translated">我们使用 &lt;code&gt;&quot;p&quot;&lt;/code&gt; 是因为数字前缀参数从不为 &lt;code&gt;nil&lt;/code&gt; 。以这种方式定义时，从键盘宏调用时，该函数的确显示消息。</target>
        </trans-unit>
        <trans-unit id="a0d8bcb390422815013c66894042de12f406dd8c" translate="yes" xml:space="preserve">
          <source>We usually give a name to a function when it is first created. This is called &lt;em&gt;defining a function&lt;/em&gt;, and we usually do it with the &lt;code&gt;defun&lt;/code&gt; macro. This section also describes other ways to define a function.</source>
          <target state="translated">我们通常在首次创建函数时为其命名。这称为&lt;em&gt;定义函数&lt;/em&gt;，我们通常使用 &lt;code&gt;defun&lt;/code&gt; 宏来实现。本节还介绍了定义函数的其他方式。</target>
        </trans-unit>
        <trans-unit id="873aa91f570e057f9aa3234f6805ed6332e2535e" translate="yes" xml:space="preserve">
          <source>We will forget about that form immediately after observing that it fails to create a new frame and uses a fallback action instead.</source>
          <target state="translated">在观察到它未能创建新的框架而使用回退动作后,我们将立即忘记该形式。</target>
        </trans-unit>
        <trans-unit id="c4a3883630468df1e98b0ca77da51ca930066e11" translate="yes" xml:space="preserve">
          <source>What &lt;code&gt;re-search-forward&lt;/code&gt; does when the search fails depends on the value of &lt;var&gt;noerror&lt;/var&gt;:</source>
          <target state="translated">什么 &lt;code&gt;re-search-forward&lt;/code&gt; 时，查找失败取决于价值确实 &lt;var&gt;noerror&lt;/var&gt; ：</target>
        </trans-unit>
        <trans-unit id="05ea3d35535da7f87673c1cd1eeb34b20cc37a96" translate="yes" xml:space="preserve">
          <source>What C variant Emacs is written in.</source>
          <target state="translated">Emacs是用什么C语言变体编写的。</target>
        </trans-unit>
        <trans-unit id="861fd8b53999b4a17c738d46511ecb936ab080b0" translate="yes" xml:space="preserve">
          <source>What Edebug does when matching fails.</source>
          <target state="translated">当匹配失败时,Edebug会怎么做。</target>
        </trans-unit>
        <trans-unit id="c67ade89bb4aa6b239a652f1f4b73337d1d0d6fc" translate="yes" xml:space="preserve">
          <source>What Emacs does when you report an error.</source>
          <target state="translated">当你报告一个错误时,Emacs会怎么做。</target>
        </trans-unit>
        <trans-unit id="28e86541f604237f1ddde85ce3753dcce2b65f73" translate="yes" xml:space="preserve">
          <source>What Is a Function?</source>
          <target state="translated">什么是功能?</target>
        </trans-unit>
        <trans-unit id="087378c8e38ed12b52d683f43c14ee8ece9e15c4" translate="yes" xml:space="preserve">
          <source>What a display table consists of.</source>
          <target state="translated">展示台由什么组成。</target>
        </trans-unit>
        <trans-unit id="ec616d2df336547dda35a45c17f3e58298ee87d6" translate="yes" xml:space="preserve">
          <source>What a keymap looks like as a Lisp object.</source>
          <target state="translated">作为Lisp对象的keymap是什么样子的。</target>
        </trans-unit>
        <trans-unit id="021ec0738237627ae757ca297d8c6b9599099f2f" translate="yes" xml:space="preserve">
          <source>What fraction of a line the vertical scrolling covers, or how many lines, depends on what the lines contain. A value of .5 could scroll a line whose height is very short off the screen, while a value of 3.3 could scroll just part of the way through a tall line or an image.</source>
          <target state="translated">垂直滚动所覆盖的行的几分之几,或多少行,取决于行的内容。0.5的值可以滚动一个高度很低的线条,而3.3的值可以滚动一个高线条或图像的一部分。</target>
        </trans-unit>
        <trans-unit id="6fdd046d2b8a52f691781e5e4b4065ce8a7e042a" translate="yes" xml:space="preserve">
          <source>What function a keystroke invokes.</source>
          <target state="translated">一个按键调用什么功能。</target>
        </trans-unit>
        <trans-unit id="443952c0cfcf874d30a07193a08c9c39f6a5cca4" translate="yes" xml:space="preserve">
          <source>What happens when the search fails depends on the value of &lt;var&gt;noerror&lt;/var&gt;. If &lt;var&gt;noerror&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, a &lt;code&gt;search-failed&lt;/code&gt; error is signaled. If &lt;var&gt;noerror&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;search-forward&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt; and does nothing. If &lt;var&gt;noerror&lt;/var&gt; is neither &lt;code&gt;nil&lt;/code&gt; nor &lt;code&gt;t&lt;/code&gt;, then &lt;code&gt;search-forward&lt;/code&gt; moves point to the upper bound and returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">搜索失败时会发生什么情况取决于 &lt;var&gt;noerror&lt;/var&gt; 的值。如果 &lt;var&gt;noerror&lt;/var&gt; 为 &lt;code&gt;nil&lt;/code&gt; ，则表明 &lt;code&gt;search-failed&lt;/code&gt; 错误。如果 &lt;var&gt;noerror&lt;/var&gt; 为 &lt;code&gt;t&lt;/code&gt; ，则 &lt;code&gt;search-forward&lt;/code&gt; 传将返回 &lt;code&gt;nil&lt;/code&gt; 并且不执行任何操作。如果 &lt;var&gt;noerror&lt;/var&gt; 既不是 &lt;code&gt;nil&lt;/code&gt; 也不是 &lt;code&gt;t&lt;/code&gt; ，那么 &lt;code&gt;search-forward&lt;/code&gt; 将指向上限并返回 &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f19193d2fbedb672944d0291bc293133d60a7942" translate="yes" xml:space="preserve">
          <source>What input looks like when you read it.</source>
          <target state="translated">你读的时候,输入是什么样子的。</target>
        </trans-unit>
        <trans-unit id="a42b5e44c394bd52777815237c3498ce41ae6bb8" translate="yes" xml:space="preserve">
          <source>What is a buffer?</source>
          <target state="translated">什么是缓冲区?</target>
        </trans-unit>
        <trans-unit id="5ae38b03174dc4954ba4b06e0e5e4b38a7bb839e" translate="yes" xml:space="preserve">
          <source>What is in a face?</source>
          <target state="translated">脸是什么?</target>
        </trans-unit>
        <trans-unit id="c4ae6bd14e01eb20113c18dbca5377d7ce068c17" translate="yes" xml:space="preserve">
          <source>What kind of comment is active: &lt;code&gt;nil&lt;/code&gt; if not in a comment or in a comment of style &amp;lsquo;</source>
          <target state="translated">哪种评论处于活动状态：如果未在评论中或在样式为'的评论中，则 &lt;code&gt;nil&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c9160ba4ba7268eb81a48fb489876b40899f70b7" translate="yes" xml:space="preserve">
          <source>What kinds of colors the terminal supports&amp;mdash;either &lt;code&gt;color&lt;/code&gt;, &lt;code&gt;grayscale&lt;/code&gt;, or &lt;code&gt;mono&lt;/code&gt;.</source>
          <target state="translated">什么样的颜色的终端支持，无论是 &lt;code&gt;color&lt;/code&gt; ， &lt;code&gt;grayscale&lt;/code&gt; ，或 &lt;code&gt;mono&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7206440741f715ed5c44ff6f60d315b4ef73962f" translate="yes" xml:space="preserve">
          <source>What text looks like in the kill ring.</source>
          <target state="translated">杀戒里的文字是什么样子的。</target>
        </trans-unit>
        <trans-unit id="eccb1f7107637b64a67d5c014009d8c69bfd5675" translate="yes" xml:space="preserve">
          <source>What the debugger does.</source>
          <target state="translated">调试器的作用。</target>
        </trans-unit>
        <trans-unit id="ed13d4d55780ebbe3cf675a642d9153cf539e6aa" translate="yes" xml:space="preserve">
          <source>What you see while in the debugger.</source>
          <target state="translated">你在调试器中看到的。</target>
        </trans-unit>
        <trans-unit id="cecc4af34db9dcdfa481eaa7cb202db99df882e8" translate="yes" xml:space="preserve">
          <source>Whatever the name under which the file is eventually found, and the directory where Emacs found it, Emacs sets the value of the variable &lt;code&gt;load-file-name&lt;/code&gt; to that file&amp;rsquo;s name.</source>
          <target state="translated">无论最终找到文件的名称是什么，还是Emacs找到文件的目录，Emacs都会将变量 &lt;code&gt;load-file-name&lt;/code&gt; 的值设置为该文件的名称。</target>
        </trans-unit>
        <trans-unit id="769bb19e615b7f8e2809e5882e2d05a18f57a531" translate="yes" xml:space="preserve">
          <source>When</source>
          <target state="translated">When</target>
        </trans-unit>
        <trans-unit id="97f07d6b05b134b6e3b2450078e6198580db985c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;auto-compression-mode&lt;/code&gt; is enabled, Emacs automatically uncompresses compressed files when you visit them, and automatically recompresses them if you alter and save them. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Compressed-Files.html#Compressed-Files&quot;&gt;Compressed Files&lt;/a&gt; in</source>
          <target state="translated">当 &lt;code&gt;auto-compression-mode&lt;/code&gt; 被启用时，Emacs自动解压缩，当你访问他们的压缩文件，如果你改变自动重新压缩它们，并将它们保存。见&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Compressed-Files.html#Compressed-Files&quot;&gt;压缩文件&lt;/a&gt;中</target>
        </trans-unit>
        <trans-unit id="29c280855fec978ae7ea588ae44343f3fa904554" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;bury-buffer&lt;/code&gt; (see &lt;a href=&quot;buffer-list#Buffer-List&quot;&gt;Buffer List&lt;/a&gt;) operates on the selected window (which shows the buffer that shall be buried), it handles case (2) by calling &lt;code&gt;frame-auto-hide-function&lt;/code&gt; (see &lt;a href=&quot;quitting-windows#Quitting-Windows&quot;&gt;Quitting Windows&lt;/a&gt;) to deal with the selected frame. The other two cases are handled as with &lt;code&gt;replace-buffer-in-windows&lt;/code&gt;.</source>
          <target state="translated">当 &lt;code&gt;bury-buffer&lt;/code&gt; （请参阅&amp;ldquo;&lt;a href=&quot;buffer-list#Buffer-List&quot;&gt;缓冲区列表&amp;rdquo;&lt;/a&gt;）在选定窗口（显示应被掩埋的缓冲区）上操作时，它通过调用 &lt;code&gt;frame-auto-hide-function&lt;/code&gt; 函数（请参见&lt;a href=&quot;quitting-windows#Quitting-Windows&quot;&gt;退出Windows&lt;/a&gt;）来处理情况（2）帧。其他两种情况与 &lt;code&gt;replace-buffer-in-windows&lt;/code&gt; 一样处理。</target>
        </trans-unit>
        <trans-unit id="62dc28175bde9a72a361f1efefa93526f51f8e0d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;capitalize-region&lt;/code&gt; is called interactively, &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; are point and the mark, with the smallest first.</source>
          <target state="translated">当以交互方式调用 &lt;code&gt;capitalize-region&lt;/code&gt; ， &lt;var&gt;start&lt;/var&gt; 和 &lt;var&gt;end&lt;/var&gt; 是点和标记，从小到大。</target>
        </trans-unit>
        <trans-unit id="d3633d4051e74c8040e753e9fc8ad78c48eac2b8" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;capitalize-word&lt;/code&gt; is called interactively, &lt;var&gt;count&lt;/var&gt; is set to the numeric prefix argument.</source>
          <target state="translated">当 &lt;code&gt;capitalize-word&lt;/code&gt; 被称为交互， &lt;var&gt;count&lt;/var&gt; 设置为数字前缀的说法。</target>
        </trans-unit>
        <trans-unit id="14c2c19840d8f51b1009fb410cb8b7577795b1ee" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;debug-on-entry&lt;/code&gt; is called interactively, it prompts for &lt;var&gt;function-name&lt;/var&gt; in the minibuffer. If the function is already set up to invoke the debugger on entry, &lt;code&gt;debug-on-entry&lt;/code&gt; does nothing. &lt;code&gt;debug-on-entry&lt;/code&gt; always returns &lt;var&gt;function-name&lt;/var&gt;.</source>
          <target state="translated">当 &lt;code&gt;debug-on-entry&lt;/code&gt; 以交互方式调用时，它会提示输入 &lt;var&gt;function-name&lt;/var&gt; 在迷你。如果已经将函数设置为在进入时调用调试器，则进入 &lt;code&gt;debug-on-entry&lt;/code&gt; 不执行任何操作。 &lt;code&gt;debug-on-entry&lt;/code&gt; 总是返回 &lt;var&gt;function-name&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="d9cdcbd511c7be9b7613226685d59905e4e81d54" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;downcase-region&lt;/code&gt; is called interactively, &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; are point and the mark, with the smallest first.</source>
          <target state="translated">当 &lt;code&gt;downcase-region&lt;/code&gt; 被称为交互， &lt;var&gt;start&lt;/var&gt; 和 &lt;var&gt;end&lt;/var&gt; 的点和标志，具有最小第一。</target>
        </trans-unit>
        <trans-unit id="9a91b4d51711faa0f3b607fbadd18a85bc85c025" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;downcase-word&lt;/code&gt; is called interactively, &lt;var&gt;count&lt;/var&gt; is set to the numeric prefix argument.</source>
          <target state="translated">当 &lt;code&gt;downcase-word&lt;/code&gt; 被称为交互， &lt;var&gt;count&lt;/var&gt; 设置为数字前缀的说法。</target>
        </trans-unit>
        <trans-unit id="ffdc0a04c7d29eefb34897364d931986470c13ac" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;find-file&lt;/code&gt; is called interactively, it prompts for &lt;var&gt;filename&lt;/var&gt; in the minibuffer.</source>
          <target state="translated">当 &lt;code&gt;find-file&lt;/code&gt; 被称为交互，它会提示输入 &lt;var&gt;filename&lt;/var&gt; 在迷你。</target>
        </trans-unit>
        <trans-unit id="41be64811f6682691b8ab255cfdf3b08798221d5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;fringe-cursor-alist&lt;/code&gt; has a buffer-local value, and there is no bitmap defined for a cursor type, the corresponding value from the default value of &lt;code&gt;fringes-indicator-alist&lt;/code&gt; is used.</source>
          <target state="translated">当 &lt;code&gt;fringe-cursor-alist&lt;/code&gt; 具有缓冲本地值，并且不存在对于一个光标类型定义的位图，从默认值对应的值 &lt;code&gt;fringes-indicator-alist&lt;/code&gt; 被使用。</target>
        </trans-unit>
        <trans-unit id="6102f7fe59282a53519abc9cd1a7ba36dafbcdb5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;fringe-indicator-alist&lt;/code&gt; has a buffer-local value, and there is no bitmap defined for a logical indicator, or the bitmap is &lt;code&gt;t&lt;/code&gt;, the corresponding value from the default value of &lt;code&gt;fringe-indicator-alist&lt;/code&gt; is used.</source>
          <target state="translated">当 &lt;code&gt;fringe-indicator-alist&lt;/code&gt; 具有本地缓冲区值，并且没有为逻辑指示符定义位图，或者位图为 &lt;code&gt;t&lt;/code&gt; 时，将使用 &lt;code&gt;fringe-indicator-alist&lt;/code&gt; 的默认值中的对应值。</target>
        </trans-unit>
        <trans-unit id="ff7569124d2f1bdb1909ed5176f270e51522c325" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;inhibit-message&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, no message will be displayed in the echo area, it will only be logged to &amp;lsquo;</source>
          <target state="translated">当 &lt;code&gt;inhibit-message&lt;/code&gt; 为非 &lt;code&gt;nil&lt;/code&gt; 时，回显区域中将不会显示任何消息，只会记录到&amp;ldquo;</target>
        </trans-unit>
        <trans-unit id="dc1103873e3db33b4aaa3401944505ce479e7276" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;locate-library&lt;/code&gt; is called from a program, it returns the file name as a string. When the user runs &lt;code&gt;locate-library&lt;/code&gt; interactively, the argument &lt;var&gt;interactive-call&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;, and this tells &lt;code&gt;locate-library&lt;/code&gt; to display the file name in the echo area.</source>
          <target state="translated">当 &lt;code&gt;locate-library&lt;/code&gt; 是由一个程序调用，它返回的文件名作为一个字符串。当用户以交互方式运行 &lt;code&gt;locate-library&lt;/code&gt; 时，参数 &lt;var&gt;interactive-call&lt;/var&gt; 为 &lt;code&gt;t&lt;/code&gt; ，这告诉 &lt;code&gt;locate-library&lt;/code&gt; 在回显区域中显示文件名。</target>
        </trans-unit>
        <trans-unit id="8be3636632ca887811e97095ce158e03f16a012c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;make-temp-file&lt;/code&gt; returns, the file has been created and is empty. At that point, you should write the intended contents into the file.</source>
          <target state="translated">当 &lt;code&gt;make-temp-file&lt;/code&gt; 的回报，已创建的文件，是空的。此时，您应该将预期的内容写入文件。</target>
        </trans-unit>
        <trans-unit id="4a54287d699c1137f2330e3d8c9d0d2560327885" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;nil&lt;/code&gt; is used for &lt;var&gt;end&lt;/var&gt;, it stands for the length of the string. Thus,</source>
          <target state="translated">当 &lt;code&gt;nil&lt;/code&gt; 用作 &lt;var&gt;end&lt;/var&gt; 时，它代表字符串的长度。从而，</target>
        </trans-unit>
        <trans-unit id="0e1b580ad41f89e13ab97c3895fac0b26641a1c1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;recenter&lt;/code&gt; is called interactively, &lt;var&gt;count&lt;/var&gt; is the raw prefix argument. Thus, typing</source>
          <target state="translated">当 &lt;code&gt;recenter&lt;/code&gt; 被称为交互， &lt;var&gt;count&lt;/var&gt; 是原始前缀的说法。因此，键入</target>
        </trans-unit>
        <trans-unit id="0d795c479f785a22c40363cc857c013c1e18d457" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;require&lt;/code&gt; is used at top level in a file, it takes effect when you byte-compile that file (see &lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;Byte Compilation&lt;/a&gt;) as well as when you load it. This is in case the required package contains macros that the byte compiler must know about. It also avoids byte compiler warnings for functions and variables defined in the file loaded with &lt;code&gt;require&lt;/code&gt;.</source>
          <target state="translated">当 &lt;code&gt;require&lt;/code&gt; 在文件顶层时，在其生效时字节编译的文件（见&lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;字节编译&lt;/a&gt;），以及当你加载它。这是在必需的程序包包含字节编译器必须知道的宏的情况下。它还避免了针对在 &lt;code&gt;require&lt;/code&gt; 加载的文件中定义的函数和变量的字节编译器警告。</target>
        </trans-unit>
        <trans-unit id="be3ab7615ce3da45abc454d09196bf106573f082" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;save-buffers-kill-terminal&lt;/code&gt; is killing Emacs, it calls the functions in this hook, after asking the standard questions and before calling &lt;code&gt;kill-emacs&lt;/code&gt;. The functions are called in order of appearance, with no arguments. Each function can ask for additional confirmation from the user. If any of them returns &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;save-buffers-kill-emacs&lt;/code&gt; does not kill Emacs, and does not run the remaining functions in this hook. Calling &lt;code&gt;kill-emacs&lt;/code&gt; directly does not run this hook.</source>
          <target state="translated">当 &lt;code&gt;save-buffers-kill-terminal&lt;/code&gt; 杀死Emacs时，它将在询问标准问题之后并在调用 &lt;code&gt;kill-emacs&lt;/code&gt; 之前调用此挂钩中的函数。这些函数按外观顺序调用，不带参数。每个功能都可以要求用户进一步确认。如果它们中的任何一个返回 &lt;code&gt;nil&lt;/code&gt; ，则 &lt;code&gt;save-buffers-kill-emacs&lt;/code&gt; 不会杀死Emacs，并且不会运行此挂钩中的其余功能。直接调用 &lt;code&gt;kill-emacs&lt;/code&gt; 不会运行此挂钩。</target>
        </trans-unit>
        <trans-unit id="e0ce83af193f6f7c9ff4ed6d0442606f8f22899c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;upcase-region&lt;/code&gt; is called interactively, &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; are point and the mark, with the smallest first.</source>
          <target state="translated">当 &lt;code&gt;upcase-region&lt;/code&gt; 被称为交互， &lt;var&gt;start&lt;/var&gt; 和 &lt;var&gt;end&lt;/var&gt; 的点和标志，具有最小第一。</target>
        </trans-unit>
        <trans-unit id="1fcf4096bb79a3729289a41ba9696402ad41fc4e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;upcase-word&lt;/code&gt; is called interactively, &lt;var&gt;count&lt;/var&gt; is set to the numeric prefix argument.</source>
          <target state="translated">当 &lt;code&gt;upcase-word&lt;/code&gt; 被称为交互， &lt;var&gt;count&lt;/var&gt; 设置为数字前缀的说法。</target>
        </trans-unit>
        <trans-unit id="b242d967f89d29cc4deaaa87e4fe29fd952b20f4" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;write-region&lt;/code&gt; actually writes the text from the buffer to the file, it intermixes the specified annotations at the corresponding positions. All this takes place without modifying the buffer.</source>
          <target state="translated">当 &lt;code&gt;write-region&lt;/code&gt; 实际上将缓冲区中的文本写入文件时，它将在指定位置混合指定的注释。所有这些操作都无需修改缓冲区。</target>
        </trans-unit>
        <trans-unit id="622bd1ed237bdc49bff8e369b92159969081e3a1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;write-region&lt;/code&gt; writes data into a file, it first calls the encoding functions for the formats listed in &lt;code&gt;buffer-file-format&lt;/code&gt;, in the order of appearance in the list.</source>
          <target state="translated">当 &lt;code&gt;write-region&lt;/code&gt; 将数据写入文件时，它首先按照列表中出现的顺序调用 &lt;code&gt;buffer-file-format&lt;/code&gt; 中列出的格式的编码功能。</target>
        </trans-unit>
        <trans-unit id="f58c2cefd6c24f0142fd39252193f0da0ed56609" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;Adaptive Fill Mode&lt;/em&gt; is enabled, Emacs determines the fill prefix automatically from the text in each paragraph being filled rather than using a predetermined value. During filling, this fill prefix gets inserted at the start of the second and subsequent lines of the paragraph as described in &lt;a href=&quot;filling#Filling&quot;&gt;Filling&lt;/a&gt;, and in &lt;a href=&quot;auto-filling#Auto-Filling&quot;&gt;Auto Filling&lt;/a&gt;.</source>
          <target state="translated">当&lt;em&gt;自适应填充模式&lt;/em&gt;被启用时，Emacs自动从在每个段落中的文本来确定填充前缀被填充，而不是使用一个预定值。在填充期间，如&lt;a href=&quot;filling#Filling&quot;&gt;Filling&lt;/a&gt;和&lt;a href=&quot;auto-filling#Auto-Filling&quot;&gt;Auto Filling中&lt;/a&gt;所述，此填充前缀将插入到段落的第二行和后续行的开头。</target>
        </trans-unit>
        <trans-unit id="95611c2ce3b163c164fe37e201833ea246ed2c76" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;alist&lt;/var&gt; specifies more than one parameter whose value can affect the new size of &lt;var&gt;frame&lt;/var&gt;, the final size of the frame may differ according to the toolkit used. For example, specifying that a frame should from now on have a menu and/or tool bar instead of none and simultaneously specifying the new height of the frame will inevitably lead to a recalculation of the frame&amp;rsquo;s height. Conceptually, in such case, this function will try to have the explicit height specification prevail. It cannot be excluded, however, that the addition (or removal) of the menu or tool bar, when eventually performed by the toolkit, will defeat this intention.</source>
          <target state="translated">当 &lt;var&gt;alist&lt;/var&gt; 指定多个参数，其值会影响 &lt;var&gt;frame&lt;/var&gt; 的新大小时，框架的最终大小可能会根据所使用的工具包而有所不同。例如，指定框架从现在开始应具有菜单和/或工具栏，而不是没有菜单和/或工具栏，同时指定框架的新高度将不可避免地导致重新计算框架的高度。从概念上讲，在这种情况下，此功能将尝试以明确的高度规格为准。但是，不能排除的是，当菜单或工具栏最终由工具包执行时，添加或删除菜单或工具栏将破坏此意图。</target>
        </trans-unit>
        <trans-unit id="36122306d706808c769481ee234345a7afcd9690" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;arg&lt;/var&gt; is a token, the function is called with point just before that token. A return value of &lt;code&gt;nil&lt;/code&gt; always means to fallback on the default behavior, so the function should return &lt;code&gt;nil&lt;/code&gt; for arguments it does not expect.</source>
          <target state="translated">当 &lt;var&gt;arg&lt;/var&gt; 是一个标记时，将在该标记之前的point处调用该函数。返回值 &lt;code&gt;nil&lt;/code&gt; 总是意味着会退回到默认行为，因此该函数应针对不需要的参数返回 &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="70afa656b8297636394f7bda1869f0f1b5584bea" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;function-object&lt;/var&gt; is a symbol and the code is byte compiled, the byte-compiler will warn if that function is not defined or might not be known at run time.</source>
          <target state="translated">当 &lt;var&gt;function-object&lt;/var&gt; 是一个符号并且代码被字节编译时，如果未定义该函数或在运行时未知该函数，则字节编译器将发出警告。</target>
        </trans-unit>
        <trans-unit id="c1b0783bfe169e954b315d95c75f22ea10f96602" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;function&lt;/var&gt; is called, it receives one argument, the limit of the search; it should begin searching at point, and not search beyond the limit. It should return non-&lt;code&gt;nil&lt;/code&gt; if it succeeds, and set the match data to describe the match that was found. Returning &lt;code&gt;nil&lt;/code&gt; indicates failure of the search.</source>
          <target state="translated">当 &lt;var&gt;function&lt;/var&gt; 被调用时，它接收一个参数，搜索的限制; 它应该从点开始搜索，而不是超出限制。它应该返回非 &lt;code&gt;nil&lt;/code&gt; 如果成功，并设置匹配的数据来描述被找到的匹配。返回 &lt;code&gt;nil&lt;/code&gt; 表示搜索失败。</target>
        </trans-unit>
        <trans-unit id="1c193cf78598fb2b982c1e7311aab178608c3fe8" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;function&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, it is called instead of &lt;code&gt;insert&lt;/code&gt; to insert the string, with one argument&amp;mdash;the string to insert.</source>
          <target state="translated">当 &lt;var&gt;function&lt;/var&gt; 为非 &lt;code&gt;nil&lt;/code&gt; 时，将使用一个参数（要插入的字符串）而不是 &lt;code&gt;insert&lt;/code&gt; 来调用它以插入字符串。</target>
        </trans-unit>
        <trans-unit id="7edfcd2927d7eb3ce9ee67df28d50f6d3f65913c" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;region&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, then if Transient Mark mode is enabled and the mark is active, this command calls &lt;code&gt;fill-region&lt;/code&gt; to fill all the paragraphs in the region, instead of filling only the current paragraph. When this command is called interactively, &lt;var&gt;region&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">当 &lt;var&gt;region&lt;/var&gt; 为非 &lt;code&gt;nil&lt;/code&gt; 时，如果启用了临时标记模式并且标记处于活动状态，此命令将调用 &lt;code&gt;fill-region&lt;/code&gt; 填充区域中的所有段落，而不是仅填充当前段落。交互式调用此命令时， &lt;var&gt;region&lt;/var&gt; 为 &lt;code&gt;t&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb96a32f33ce616e5d94a223da7e43cb71ce3e58" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;seqpat&lt;/var&gt; is &lt;code&gt;or&lt;/code&gt;, things are different: &lt;code&gt;or&lt;/code&gt; matches at the first sub-pattern that matches; the rest of the sub-patterns are ignored. It makes no sense for each sub-pattern to let-bind a different set of symbols because the body forms have no way to distinguish which sub-pattern matched and choose among the different sets. For example, the following is invalid:</source>
          <target state="translated">当 &lt;var&gt;seqpat&lt;/var&gt; 是 &lt;code&gt;or&lt;/code&gt; ，情况有所不同： &lt;code&gt;or&lt;/code&gt; 在匹配的第一个子模式处匹配；其余子模式将被忽略。让每个子模式绑定不同的符号集是没有意义的，因为主体形式无法区分哪个子模式匹配并在不同的集合中进行选择。例如，以下无效：</target>
        </trans-unit>
        <trans-unit id="5c6905373c56d1e189d1b9e72d2927ce0d02b25e" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;string-or-char&lt;/var&gt; is a character, this function does the same thing as &lt;code&gt;upcase&lt;/code&gt;.</source>
          <target state="translated">当 &lt;var&gt;string-or-char&lt;/var&gt; 为字符时，此函数与 &lt;code&gt;upcase&lt;/code&gt; 的作用相同。</target>
        </trans-unit>
        <trans-unit id="68993d69a5f33572faef27da041ff42b247bfdf5" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;string-or-char&lt;/var&gt; is a string, this function returns a new string in which each letter in the argument that is lower case is converted to upper case. When &lt;var&gt;string-or-char&lt;/var&gt; is a character, this function returns the corresponding upper case character (an integer); if the original character is upper case, or is not a letter, the return value is equal to the original character.</source>
          <target state="translated">当 &lt;var&gt;string-or-char&lt;/var&gt; 为字符串时，此函数返回一个新字符串，其中参数中的小写字母中的每个字母都转换为大写字母。当 &lt;var&gt;string-or-char&lt;/var&gt; 为字符时，此函数返回相应的大写字符（整数）；如果原始字符为大写字母或非字母，则返回值等于原始字符。</target>
        </trans-unit>
        <trans-unit id="548ed209f2ebeecb5ac09a3226d2177e0fc957e3" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;string-or-char&lt;/var&gt; is a string, this function returns a new string in which each letter in the argument that is upper case is converted to lower case. When &lt;var&gt;string-or-char&lt;/var&gt; is a character, this function returns the corresponding lower case character (an integer); if the original character is lower case, or is not a letter, the return value is equal to the original character.</source>
          <target state="translated">当 &lt;var&gt;string-or-char&lt;/var&gt; 为字符串时，此函数返回一个新字符串，其中参数中的每个字母都以大写形式转换为小写形式。当 &lt;var&gt;string-or-char&lt;/var&gt; 为字符时，此函数返回相应的小写字符（整数）；如果原始字符为小写字母或不是字母，则返回值等于原始字符。</target>
        </trans-unit>
        <trans-unit id="aec7bf298d655e4d79266c6f5395a36975ae5701" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;symbol&lt;/var&gt; occurs more than once in &lt;var&gt;seqpat&lt;/var&gt;, the second and subsequent occurrences do not expand to re-binding, but instead expand to an equality test using &lt;code&gt;eq&lt;/code&gt;.</source>
          <target state="translated">当 &lt;var&gt;symbol&lt;/var&gt; 在 &lt;var&gt;seqpat&lt;/var&gt; 中多次出现时，第二次及以后出现的事件不会扩展为重新绑定，而是会扩展为使用 &lt;code&gt;eq&lt;/code&gt; 进行的相等性测试。</target>
        </trans-unit>
        <trans-unit id="79ee6379a626450775445557cdc33e9ac77c6947" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;window&lt;/var&gt; is the selected window, the value returned is the value of point in that window&amp;rsquo;s buffer. Strictly speaking, it would be more correct to return the top-level value of point, outside of any &lt;code&gt;save-excursion&lt;/code&gt; forms. But that value is hard to find.</source>
          <target state="translated">当 &lt;var&gt;window&lt;/var&gt; 是选定窗口时，返回的值是该窗口缓冲区中的point的值。严格来说，返回点的顶级值（在任何 &lt;code&gt;save-excursion&lt;/code&gt; 形式之外）会更正确。但是很难找到这种价值。</target>
        </trans-unit>
        <trans-unit id="ff2b38e7398922085b671c3927f5aabf2d0875ce" translate="yes" xml:space="preserve">
          <source>When Delete Selection mode (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Using-Region.html#Using-Region&quot;&gt;Delete Selection&lt;/a&gt; in</source>
          <target state="translated">当删除选择模式（见&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Using-Region.html#Using-Region&quot;&gt;删除选择&lt;/a&gt;在</target>
        </trans-unit>
        <trans-unit id="ed8d89dce2db72b1d1fc0a9ce173807457faeded" translate="yes" xml:space="preserve">
          <source>When Edebug decides what to do.</source>
          <target state="translated">当艾德布格决定要做什么的时候。</target>
        </trans-unit>
        <trans-unit id="682a1c03e8a5f83dafa8b82bac23ab76dd35c93f" translate="yes" xml:space="preserve">
          <source>When Edebug instruments an expression that calls a Lisp macro, it needs additional information about the macro to do the job properly. This is because there is no a-priori way to tell which subexpressions of the macro call are forms to be evaluated. (Evaluation may occur explicitly in the macro body, or when the resulting expansion is evaluated, or any time later.)</source>
          <target state="translated">当Edebug对一个调用Lisp宏的表达式进行仪表化处理时,它需要关于宏的附加信息来正确地完成这项工作。这是因为没有一个先验的方法来判断宏调用的哪些子表达式是要被评估的形式。(评估可能会在宏体中显式地发生,或在对产生的扩展进行评估时发生,或在以后的任何时间发生)。</target>
        </trans-unit>
        <trans-unit id="f6ab1edab0ab78847a8335a5c30102a954d1d119" translate="yes" xml:space="preserve">
          <source>When Edebug is about to instrument code for the first time in a session, it runs the hook &lt;code&gt;edebug-setup-hook&lt;/code&gt;, then sets it to &lt;code&gt;nil&lt;/code&gt;. You can use this to load Edebug specifications associated with a package you are using, but only when you use Edebug.</source>
          <target state="translated">当Edebug即将在会话中首次检测代码时，它将运行钩子 &lt;code&gt;edebug-setup-hook&lt;/code&gt; ，然后将其设置为 &lt;code&gt;nil&lt;/code&gt; 。您可以使用它来加载与正在使用的软件包相关联的Edebug规范，但仅当您使用Edebug时才可以。</target>
        </trans-unit>
        <trans-unit id="86db9bb2c44cec8ea05f030677a24c74887d0c52" translate="yes" xml:space="preserve">
          <source>When Edebug is entered and actually reads commands from the user, it saves (and later restores) these additional data:</source>
          <target state="translated">当输入Edebug并实际读取用户的命令时,它会保存(并在以后恢复)这些附加数据。</target>
        </trans-unit>
        <trans-unit id="ee514d5086b47d2e011ce7bbf8930ee5f269b78a" translate="yes" xml:space="preserve">
          <source>When Edebug needs to display something (e.g., in trace mode), it saves the current window configuration from outside Edebug (see &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;Window Configurations&lt;/a&gt;). When you exit Edebug, it restores the previous window configuration.</source>
          <target state="translated">当Edebug需要显示某些内容时（例如，在跟踪模式下），它会从Edebug外部保存当前的窗口配置（请参见&lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;Window Configurations&lt;/a&gt;）。退出Edebug时，它将还原以前的窗口配置。</target>
        </trans-unit>
        <trans-unit id="76b7b5b962265dbb538b0806a45dc4fe39967e57" translate="yes" xml:space="preserve">
          <source>When Edebug responds to an error, it shows the last stop point encountered before the error. This may be the location of a call to a function which was not instrumented, and within which the error actually occurred. For an unbound variable error, the last known stop point might be quite distant from the offending variable reference. In that case, you might want to display a full backtrace (see &lt;a href=&quot;edebug-misc#Edebug-Misc&quot;&gt;Edebug Misc&lt;/a&gt;).</source>
          <target state="translated">当Edebug响应错误时，它将显示错误之前遇到的最后一个停止点。这可能是未检测到的函数的调用位置，并且在其中实际发生了错误。对于无界变量错误，最后一个已知的停止点可能与有问题的变量参考相距甚远。在这种情况下，您可能想要显示完整的回溯（请参阅&lt;a href=&quot;edebug-misc#Edebug-Misc&quot;&gt;Edebug Misc&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="6176eb9ac04a1b1ea4d273f0ed9eb65b0b655da7" translate="yes" xml:space="preserve">
          <source>When Edebug stops execution after an expression, it displays the expression&amp;rsquo;s value in the echo area.</source>
          <target state="translated">当Edebug在表达式后停止执行时，它将在回显区域中显示表达式的值。</target>
        </trans-unit>
        <trans-unit id="260e8d789584dc294a01939a6c450fc9752d90c7" translate="yes" xml:space="preserve">
          <source>When Edebug stops execution.</source>
          <target state="translated">当Edebug停止执行时。</target>
        </trans-unit>
        <trans-unit id="4ee25a0dac628201355c2b1fcdb34b79efca147e" translate="yes" xml:space="preserve">
          <source>When Edebug updates the display.</source>
          <target state="translated">当Edebug更新显示时。</target>
        </trans-unit>
        <trans-unit id="1c783d2dbc0911610c080668bcd92807c67e4f84" translate="yes" xml:space="preserve">
          <source>When Emacs Lisp attempts to evaluate a form that, for some reason, cannot be evaluated, it &lt;em&gt;signals&lt;/em&gt; an &lt;em&gt;error&lt;/em&gt;.</source>
          <target state="translated">当的Emacs Lisp试图评价的形式，由于某种原因，不能进行评价，它&lt;em&gt;标志着&lt;/em&gt;一个&lt;em&gt;错误&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="c9c93579fb954356e4374a2562c6d5dd7762d774" translate="yes" xml:space="preserve">
          <source>When Emacs Lisp programs contain string constants with non-</source>
          <target state="translated">当Emacs Lisp程序中包含了具有非</target>
        </trans-unit>
        <trans-unit id="ef0ba63035e5812ec8cf30d30919bc9010ab1f1f" translate="yes" xml:space="preserve">
          <source>When Emacs asks the user whether or not to obey a set of file-local variable specifications, the user can choose to mark them as safe. Doing so adds those variable/value pairs to &lt;code&gt;safe-local-variable-values&lt;/code&gt;, and saves it to the user&amp;rsquo;s custom file.</source>
          <target state="translated">当Emacs询问用户是否遵守一组文件本地变量规范时，用户可以选择将其标记为安全。这样做会将这些变量/值对添加到 &lt;code&gt;safe-local-variable-values&lt;/code&gt; ，并将其保存到用户的自定义文件中。</target>
        </trans-unit>
        <trans-unit id="ca273e1e51517c29f0f51d90a1b83aa74056e41e" translate="yes" xml:space="preserve">
          <source>When Emacs calls a process filter function, it provides the process output as a multibyte string or as a unibyte string according to the process&amp;rsquo;s filter coding system. Emacs decodes the output according to the process output coding system, which usually produces a multibyte string, except for coding systems such as &lt;code&gt;binary&lt;/code&gt; and &lt;code&gt;raw-text&lt;/code&gt;.</source>
          <target state="translated">当Emacs调用流程过滤器功能时，它将根据流程的过滤器编码系统以多字节字符串或单字节字符串形式提供流程输出。Emacs根据过程输出编码系统对输出进行解码，除了 &lt;code&gt;binary&lt;/code&gt; 和 &lt;code&gt;raw-text&lt;/code&gt; 类的编码系统外，该过程通常会产生一个多字节字符串。</target>
        </trans-unit>
        <trans-unit id="fa900a90494b2447338dc8d35032a8183faaaca3" translate="yes" xml:space="preserve">
          <source>When Emacs communicates directly with X, it ignores this argument and uses interrupts if that is the way it knows how to communicate.</source>
          <target state="translated">当Emacs直接与X通信时,它忽略这个参数,如果它知道如何通信,则使用中断。</target>
        </trans-unit>
        <trans-unit id="05940a516394b0e719a8192ae47954dbf634ca6f" translate="yes" xml:space="preserve">
          <source>When Emacs displays a given piece of text, the visual appearance of the text may be determined by faces drawn from different sources. If these various sources together specify more than one face for a particular character, Emacs merges the attributes of the various faces. Here is the order in which Emacs merges the faces, from highest to lowest priority:</source>
          <target state="translated">当Emacs显示一段给定的文本时,文本的视觉外观可能由来自不同来源的面孔决定。如果这些不同的来源为一个特定的字符指定了多个面孔,Emacs 会合并不同面孔的属性。以下是 Emacs 合并面孔的顺序,从最高优先级到最低优先级。</target>
        </trans-unit>
        <trans-unit id="73897f5fccae4d7e373fc474c00a800dd3da53e9" translate="yes" xml:space="preserve">
          <source>When Emacs displays its frames on several terminals (see &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;), each terminal has its own selected frame. But only one of these is &lt;em&gt;the&lt;/em&gt; selected frame: it&amp;rsquo;s the frame that belongs to the terminal from which the most recent input came. That is, when Emacs runs a command that came from a certain terminal, the selected frame is the one of that terminal. Since Emacs runs only a single command at any given time, it needs to consider only one selected frame at a time; this frame is what we call &lt;em&gt;the selected frame&lt;/em&gt; in this manual. The display on which the selected frame is shown is the &lt;em&gt;selected frame&amp;rsquo;s display&lt;/em&gt;.</source>
          <target state="translated">当Emacs在多个终端上显示其框架时（请参见&lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;），每个终端都有自己的选定框架。但只有其中一个是&lt;em&gt;在&lt;/em&gt;选择的框架：它是属于从最近来到输入端子框架。也就是说，当Emacs运行来自某个终端的命令时，所选帧就是该终端之一。由于Emacs在任何给定时间仅运行一个命令，因此它一次只需要考虑一个选定的帧即可；这个框架就是我们在本手册中所称&lt;em&gt;的选定框架&lt;/em&gt;。显示&lt;em&gt;所选帧的显示屏&lt;/em&gt;就是&lt;em&gt;所选帧的显示屏&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2d78f27244918217b23dc3674a1ede749010e4ad" translate="yes" xml:space="preserve">
          <source>When Emacs exhausts memory or other operating system resources, its behavior can be less reliable, in that computations that ordinarily run to completion may abort back to the top level. This may cause Emacs to neglect operations that it normally would have done.</source>
          <target state="translated">当Emacs耗尽内存或其他操作系统资源时,它的行为可能不那么可靠,因为通常运行到完成的计算可能会中止回到顶层。这可能会导致 Emacs 忽略它通常会完成的操作。</target>
        </trans-unit>
        <trans-unit id="721595b660b32b294a384ee588874d2425404613" translate="yes" xml:space="preserve">
          <source>When Emacs exits normally, it deletes this file; if Emacs crashes, you can look in the file to find all the auto-save files that might contain work that was otherwise lost. The &lt;code&gt;recover-session&lt;/code&gt; command uses this file to find them.</source>
          <target state="translated">当Emacs正常退出时，它将删除此文件；如果Emacs崩溃，则可以在文件中查找所有可能包含丢失工作的自动保存文件。在 &lt;code&gt;recover-session&lt;/code&gt; 命令使用此文件来找到它们。</target>
        </trans-unit>
        <trans-unit id="aa8e5347135f0be09e0c0987eace74507335ce70" translate="yes" xml:space="preserve">
          <source>When Emacs exits, it terminates all its subprocesses. For subprocesses that run a program, it sends them the &lt;code&gt;SIGHUP&lt;/code&gt; signal; connections are simply closed. Because subprocesses may be doing valuable work, Emacs normally asks the user to confirm that it is ok to terminate them. Each process has a query flag, which, if non-&lt;code&gt;nil&lt;/code&gt;, says that Emacs should ask for confirmation before exiting and thus killing that process. The default for the query flag is &lt;code&gt;t&lt;/code&gt;, meaning &lt;em&gt;do&lt;/em&gt; query.</source>
          <target state="translated">当Emacs退出时，它将终止其所有子进程。对于运行程序的子流程，它将向其发送 &lt;code&gt;SIGHUP&lt;/code&gt; 信号；连接只是关闭。因为子流程可能正在做有价值的工作，所以Emacs通常会要求用户确认可以终止它们。每个进程都有一个查询标志，如果不是 &lt;code&gt;nil&lt;/code&gt; ，则表示Emacs应该在退出之前要求确认，然后终止该进程。查询标志的默认值为 &lt;code&gt;t&lt;/code&gt; ，表示&lt;em&gt;执行&lt;/em&gt;查询。</target>
        </trans-unit>
        <trans-unit id="a531efbc87917902456b02438434d7bc899262eb" translate="yes" xml:space="preserve">
          <source>When Emacs is built with GTK+ support, it by default displays tooltips using GTK+ functions, and the appearance of the tooltips is then controlled by GTK+ settings. GTK+ tooltips can be disabled by changing the value of the variable &lt;code&gt;x-gtk-use-system-tooltips&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;. The rest of this subsection describes how to control non-GTK+ tooltips, which are presented by Emacs itself.</source>
          <target state="translated">当Emacs构建为具有GTK +支持时，默认情况下会使用GTK +功能显示工具提示，然后由GTK +设置控制工具提示的外观。通过将变量 &lt;code&gt;x-gtk-use-system-tooltips&lt;/code&gt; 的值更改为 &lt;code&gt;nil&lt;/code&gt; ,可以禁用GTK +工具提示。本小节的其余部分描述了如何控制Emacs本身提供的非GTK +工具提示。</target>
        </trans-unit>
        <trans-unit id="62def33471bd6066f54f227edc99f3fb9c53c88b" translate="yes" xml:space="preserve">
          <source>When Emacs is compiled with</source>
          <target state="translated">当Emacs用</target>
        </trans-unit>
        <trans-unit id="fad13f129d52068f507d7a1cdb6e9c459607627d" translate="yes" xml:space="preserve">
          <source>When Emacs is in the process of loading a file, this variable&amp;rsquo;s value is the name of that file, as Emacs found it during the search described earlier in this section.</source>
          <target state="translated">当Emacs正在加载文件时，此变量的值就是该文件的名称，因为Emacs在本节前面介绍的搜索过程中发现了它。</target>
        </trans-unit>
        <trans-unit id="651c0f6fc25b25ac8f39d30aea53d0c0bf063daa" translate="yes" xml:space="preserve">
          <source>When Emacs is installed, if the installation directory hierarchy can be modified by untrusted users, the application cannot be trusted. This applies also to the directory hierarchies of the programs that Emacs uses, and of the files that Emacs reads and writes.</source>
          <target state="translated">当Emacs安装时,如果安装目录层次结构可以被不受信任的用户修改,那么应用程序就不能被信任。这也适用于Emacs使用的程序和Emacs读写的文件的目录层次结构。</target>
        </trans-unit>
        <trans-unit id="e1e0980ee90daa94d4bbe7a41e5e59ab5026bf4d" translate="yes" xml:space="preserve">
          <source>When Emacs is killed, all the information in the Emacs process, aside from files that have been saved, is lost. Because killing Emacs inadvertently can lose a lot of work, the &lt;code&gt;save-buffers-kill-terminal&lt;/code&gt; command queries for confirmation if you have buffers that need saving or subprocesses that are running. It also runs the abnormal hook &lt;code&gt;kill-emacs-query-functions&lt;/code&gt;:</source>
          <target state="translated">当Emacs被杀死时，除已保存的文件外，Emacs进程中的所有信息都将丢失。由于无意中杀死Emacs可能会丢失很多工作，因此 &lt;code&gt;save-buffers-kill-terminal&lt;/code&gt; 命令查询以确认是否有需要保存的缓冲区或正在运行的子进程。它还运行异常的钩子 &lt;code&gt;kill-emacs-query-functions&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="10b1ca42c7e5562833e9929714587793d702d9aa" translate="yes" xml:space="preserve">
          <source>When Emacs is nearly out of memory for Lisp objects, a brief message saying so. Otherwise, this is empty.</source>
          <target state="translated">当Emacs的Lisp对象的内存快用完时,会有一条简短的消息说明。否则,这是空的。</target>
        </trans-unit>
        <trans-unit id="82223f5bcf52ab7b125dc53d52c9b5ab9ae9b00e" translate="yes" xml:space="preserve">
          <source>When Emacs is not idle, &lt;code&gt;current-idle-time&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;. This is a convenient way to test whether Emacs is idle.</source>
          <target state="translated">当Emacs不空闲时， &lt;code&gt;current-idle-time&lt;/code&gt; 返回 &lt;code&gt;nil&lt;/code&gt; 。这是测试Emacs是否空闲的便捷方法。</target>
        </trans-unit>
        <trans-unit id="ebd864041b3e164df73c4b5c73bd3d97aa2d40fc" translate="yes" xml:space="preserve">
          <source>When Emacs is running in batch mode, any request to read from the minibuffer actually reads a line from the standard input descriptor that was supplied when Emacs was started. This supports only basic input: none of the special minibuffer features (history, completion, etc.) are available in batch mode.</source>
          <target state="translated">当Emacs以批处理模式运行时,任何从迷你缓冲区读取的请求实际上是从Emacs启动时提供的标准输入描述符中读取一行。这只支持基本的输入:批处理模式下,特殊的迷你缓冲区功能(历史、完成等)都无法使用。</target>
        </trans-unit>
        <trans-unit id="494a76744e9128b2960f31be01919655045499b5" translate="yes" xml:space="preserve">
          <source>When Emacs is started up, it performs the following operations (see &lt;code&gt;normal-top-level&lt;/code&gt; in</source>
          <target state="translated">当Emacs的启动时，它会执行以下操作（请参阅 &lt;code&gt;normal-top-level&lt;/code&gt; 的</target>
        </trans-unit>
        <trans-unit id="1a1d14620acb1cf574a4a270597c85b458cf2d34" translate="yes" xml:space="preserve">
          <source>When Emacs loads a Lisp library, it searches for the library in a list of directories specified by the variable &lt;code&gt;load-path&lt;/code&gt;.</source>
          <target state="translated">当Emacs加载Lisp库时，它将在变量 &lt;code&gt;load-path&lt;/code&gt; 指定的目录列表中搜索该库。</target>
        </trans-unit>
        <trans-unit id="8a46d181efa7ff915beb48c6c5e4501bb1c20a19" translate="yes" xml:space="preserve">
          <source>When Emacs loads functions and variables from a byte-compiled file, it normally does not load their documentation strings into memory. Each documentation string is dynamically loaded from the byte-compiled file only when needed. This saves memory, and speeds up loading by skipping the processing of the documentation strings.</source>
          <target state="translated">当Emacs从字节编译文件中加载函数和变量时,通常不会将它们的文档字符串加载到内存中。只有在需要的时候,才会从字节编译的文件中动态加载每个文档字符串,这样可以节省内存,并通过跳过处理文档字符串来加快加载速度。这样可以节省内存,并通过跳过文档字符串的处理来加快加载速度。</target>
        </trans-unit>
        <trans-unit id="fd6a9034841fc5bb27a1ec385001272526bc68a7" translate="yes" xml:space="preserve">
          <source>When Emacs reads or writes a file, and when Emacs sends text to a subprocess or receives text from a subprocess, it normally performs character code conversion and end-of-line conversion as specified by a particular &lt;em&gt;coding system&lt;/em&gt;.</source>
          <target state="translated">当Emacs读取或写入文件时，以及当Emacs将文本发送到子流程或从子流程接收文本时，它通常会执行特定&lt;em&gt;编码系统&lt;/em&gt;指定的字符代码转换和行尾转换。</target>
        </trans-unit>
        <trans-unit id="9ad23996e44b97133257128f9eecfa2703f34fca" translate="yes" xml:space="preserve">
          <source>When Emacs runs on MS-Windows as a GUI session, it supports a small subset of the D-Bus notifications functionality via a native primitive:</source>
          <target state="translated">当Emacs作为GUI会话在MS-Windows上运行时,它通过一个本机基元支持一小部分D-Bus通知功能。</target>
        </trans-unit>
        <trans-unit id="bc45c6eeb8ef943a775378bb93e8c468b705489b" translate="yes" xml:space="preserve">
          <source>When Emacs runs on MS-Windows, it does not implement X selections in general, but it does support the clipboard. &lt;code&gt;gui-get-selection&lt;/code&gt; and &lt;code&gt;gui-set-selection&lt;/code&gt; on MS-Windows support the text data type only; if the clipboard holds other types of data, Emacs treats the clipboard as empty. The supported data type is &lt;code&gt;STRING&lt;/code&gt;.</source>
          <target state="translated">当Emacs在MS-Windows上运行时，通常不会实现X选择，但是它确实支持剪贴板。在MS-Windows上， &lt;code&gt;gui-get-selection&lt;/code&gt; 和 &lt;code&gt;gui-set-selection&lt;/code&gt; 仅支持文本数据类型。如果剪贴板包含其他类型的数据，则Emacs会将剪贴板视为空。支持的数据类型为 &lt;code&gt;STRING&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee2e007d9e7c9cdce5db36bc3c94e230e120d467" translate="yes" xml:space="preserve">
          <source>When Emacs starts up, it sets up the value of &lt;code&gt;load-path&lt;/code&gt; in several steps. First, it initializes &lt;code&gt;load-path&lt;/code&gt; using default locations set when Emacs was compiled. Normally, this is a directory something like</source>
          <target state="translated">当Emacs启动时，它将分几步设置 &lt;code&gt;load-path&lt;/code&gt; 的值。首先，它使用编译Emacs时设置的默认位置来初始化 &lt;code&gt;load-path&lt;/code&gt; 。通常，这是一个类似</target>
        </trans-unit>
        <trans-unit id="52a18c61573b84ddab859aad581875c9ff91491d" translate="yes" xml:space="preserve">
          <source>When Emacs visits a file, it automatically selects a major mode for the buffer based on information in the file name or in the file itself. It also processes local variables specified in the file text.</source>
          <target state="translated">当Emacs访问一个文件时,它会根据文件名或文件本身的信息自动为缓冲区选择一种主要模式。它还会处理文件文本中指定的局部变量。</target>
        </trans-unit>
        <trans-unit id="605a3b4c2931745a1a2d86235b7957d822fefa95" translate="yes" xml:space="preserve">
          <source>When Emacs writes process output directly into a multibyte buffer, it decodes the output according to the process output coding system. If the coding system is &lt;code&gt;raw-text&lt;/code&gt; or &lt;code&gt;no-conversion&lt;/code&gt;, Emacs converts the unibyte output to multibyte using &lt;code&gt;string-to-multibyte&lt;/code&gt;, and inserts the resulting multibyte text.</source>
          <target state="translated">当Emacs将流程输出直接写入多字节缓冲区时，它将根据流程输出编码系统对输出进行解码。如果编码系统是 &lt;code&gt;raw-text&lt;/code&gt; 或 &lt;code&gt;no-conversion&lt;/code&gt; ，则Emacs使用 &lt;code&gt;string-to-multibyte&lt;/code&gt; 到多字节将单字节输出转换为多字节，然后插入结果多字节文本。</target>
        </trans-unit>
        <trans-unit id="a266b19b2d02b82200082904f4b14cd6d1cc3ba3" translate="yes" xml:space="preserve">
          <source>When Font Lock is about to highlight a range of text, it first extends the boundaries of the range as necessary so that they do not fall within text marked with the &lt;code&gt;font-lock-multiline&lt;/code&gt; property. Then it removes any &lt;code&gt;font-lock-multiline&lt;/code&gt; properties from the range, and highlights it. The highlighting specification (mostly &lt;code&gt;font-lock-keywords&lt;/code&gt;) must reinstall this property each time, whenever it is appropriate.</source>
          <target state="translated">当字体锁定将突出显示文本范围时，它将首先根据需要扩展范围的边界，以使它们不会落在用 &lt;code&gt;font-lock-multiline&lt;/code&gt; 属性标记的文本内。然后，它从范围中删除所有 &lt;code&gt;font-lock-multiline&lt;/code&gt; 属性，并将其突出显示。突出显示规范（通常是 &lt;code&gt;font-lock-keywords&lt;/code&gt; ）每次都必须在适当的时候重新安装此属性。</target>
        </trans-unit>
        <trans-unit id="e854bf31a3863b140612f0097581c4fb72f24a20" translate="yes" xml:space="preserve">
          <source>When Font Lock is activated in a buffer, it calls this function with a non-&lt;code&gt;nil&lt;/code&gt; value of &lt;var&gt;contextual&lt;/var&gt; if the value of &lt;code&gt;font-lock-keywords-only&lt;/code&gt; (see &lt;a href=&quot;syntactic-font-lock#Syntactic-Font-Lock&quot;&gt;Syntactic Font Lock&lt;/a&gt;) is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">在缓冲区中激活字体锁定后，如果 &lt;code&gt;font-lock-keywords-only&lt;/code&gt; （请参见&lt;a href=&quot;syntactic-font-lock#Syntactic-Font-Lock&quot;&gt;语法字体锁定&lt;/a&gt;）为 &lt;code&gt;nil&lt;/code&gt; ，则它将使用 &lt;var&gt;contextual&lt;/var&gt; 非 &lt;code&gt;nil&lt;/code&gt; 值调用此函数。</target>
        </trans-unit>
        <trans-unit id="8c92048d20681de8310ca3537f534a52eac489ce" translate="yes" xml:space="preserve">
          <source>When NaNs and signed zeros are involved, non-numeric functions like &lt;code&gt;eql&lt;/code&gt;, &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;sxhash-eql&lt;/code&gt;, &lt;code&gt;sxhash-equal&lt;/code&gt; and &lt;code&gt;gethash&lt;/code&gt; determine whether values are indistinguishable, not whether they are numerically equal. For example, when &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; are the same NaN, &lt;code&gt;(equal x y)&lt;/code&gt; returns &lt;code&gt;t&lt;/code&gt; whereas &lt;code&gt;(= x y)&lt;/code&gt; uses numeric comparison and returns &lt;code&gt;nil&lt;/code&gt;; conversely, &lt;code&gt;(equal 0.0 -0.0)&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt; whereas &lt;code&gt;(= 0.0 -0.0)&lt;/code&gt; returns &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">当涉及到NaN和带符号的零时，诸如 &lt;code&gt;eql&lt;/code&gt; ， &lt;code&gt;equal&lt;/code&gt; ， &lt;code&gt;sxhash-eql&lt;/code&gt; ， &lt;code&gt;sxhash-equal&lt;/code&gt; 和 &lt;code&gt;gethash&lt;/code&gt; 之类的非数字函数确定值是否不可区分，而不是数值是否相等。例如，当 &lt;var&gt;x&lt;/var&gt; 和 &lt;var&gt;y&lt;/var&gt; 是相同的NaN时， &lt;code&gt;(equal x y)&lt;/code&gt; 返回 &lt;code&gt;t&lt;/code&gt; ,而 &lt;code&gt;(= x y)&lt;/code&gt; 使用数字比较并返回 &lt;code&gt;nil&lt;/code&gt; ；相反， &lt;code&gt;(equal 0.0 -0.0)&lt;/code&gt; 返回 &lt;code&gt;nil&lt;/code&gt; ,而 &lt;code&gt;(= 0.0 -0.0)&lt;/code&gt; 返回 &lt;code&gt;t&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f7628eedf7d5a55741cdd4254c8f9f4e3f8a48cd" translate="yes" xml:space="preserve">
          <source>When Transient Mark mode is enabled and the mark is active, many commands that normally apply to the text near point instead apply to the region. Such commands should use the function &lt;code&gt;use-region-p&lt;/code&gt; to test whether they should operate on the region. See &lt;a href=&quot;the-region#The-Region&quot;&gt;The Region&lt;/a&gt;.</source>
          <target state="translated">启用瞬变标记模式且标记处于活动状态时，通常应用于文本点附近的许多命令将应用于区域。此类命令应使用功能 &lt;code&gt;use-region-p&lt;/code&gt; 来测试它们是否应在该区域上运行。参见&lt;a href=&quot;the-region#The-Region&quot;&gt;区域&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7748fb9dee7da8e8fdc2df120965ca7b27bf6bc9" translate="yes" xml:space="preserve">
          <source>When a &amp;lsquo;</source>
          <target state="translated">当一个 '</target>
        </trans-unit>
        <trans-unit id="23ccc8d76cb3a5f6f72a7f75c504f21009fe6c44" translate="yes" xml:space="preserve">
          <source>When a Variable is Void</source>
          <target state="translated">当一个变量无效时</target>
        </trans-unit>
        <trans-unit id="4bdc00a97eac58b11693b2d0ca9889f59b932904" translate="yes" xml:space="preserve">
          <source>When a buffer is changed, the region that Font Lock refontifies is by default the smallest sequence of whole lines that spans the change. While this works well most of the time, sometimes it doesn&amp;rsquo;t&amp;mdash;for example, when a change alters the syntactic meaning of text on an earlier line.</source>
          <target state="translated">更改缓冲区后，默认情况下，字体锁重新字体化的区域是跨越更改的最小的整行序列。尽管这在大多数情况下都行之有效，但有时却行不通，例如，当更改更改了较早一行的文本的句法含义时。</target>
        </trans-unit>
        <trans-unit id="a84da298c04ef18b307cd5117078865d12124fb0" translate="yes" xml:space="preserve">
          <source>When a buffer is displayed with line numbers (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Display-Custom.html#Display-Custom&quot;&gt;Display Custom&lt;/a&gt; in</source>
          <target state="translated">当显示与行号的缓冲液（见&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Display-Custom.html#Display-Custom&quot;&gt;显示自定义&lt;/a&gt;在</target>
        </trans-unit>
        <trans-unit id="2cfe7af88a87c3ae11ebee495f5e55eb0adbabb5" translate="yes" xml:space="preserve">
          <source>When a child frame is used during minibuffer interaction, for example, to display completions in a separate window, the &lt;code&gt;minibuffer-exit&lt;/code&gt; parameter (see &lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;Frame Interaction Parameters&lt;/a&gt;) is useful in order to deal with the frame when the minibuffer is exited.</source>
          <target state="translated">例如，当在微型缓冲区交互过程中使用子帧以在一个单独的窗口中显示完成时，为了退出微型缓冲区时处理帧， &lt;code&gt;minibuffer-exit&lt;/code&gt; 参数（请参阅&lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;Frame Interaction Parameters&lt;/a&gt;）很有用。</target>
        </trans-unit>
        <trans-unit id="087c1187a1c448c9270824395c547ec4113f8445" translate="yes" xml:space="preserve">
          <source>When a child frame is used for displaying a buffer via &lt;code&gt;display-buffer-in-child-frame&lt;/code&gt; (see &lt;a href=&quot;buffer-display-action-functions#Buffer-Display-Action-Functions&quot;&gt;Buffer Display Action Functions&lt;/a&gt;), the frame&amp;rsquo;s &lt;code&gt;auto-hide-function&lt;/code&gt; parameter (see &lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;Frame Interaction Parameters&lt;/a&gt;) can be set to a function, in order to appropriately deal with the frame when the window displaying the buffer shall be quit.</source>
          <target state="translated">当子帧用于通过 &lt;code&gt;display-buffer-in-child-frame&lt;/code&gt; &lt;a href=&quot;buffer-display-action-functions#Buffer-Display-Action-Functions&quot;&gt;显示缓冲区时&lt;/a&gt;（请参见Buffer Display Action Functions），可以将帧的 &lt;code&gt;auto-hide-function&lt;/code&gt; 参数（请参阅&lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;Frame Interaction Parameters&lt;/a&gt;）设置为为了在退出显示缓冲区的窗口时适当处理帧。</target>
        </trans-unit>
        <trans-unit id="2d1f655bdefdfc9fe340c82147407511f9a46b06" translate="yes" xml:space="preserve">
          <source>When a closure is called as a function, any lexical variable references within its definition use the retained lexical environment. Here is an example:</source>
          <target state="translated">当一个闭包作为函数被调用时,在其定义中的任何词法变量引用都会使用保留的词法环境。下面是一个例子。</target>
        </trans-unit>
        <trans-unit id="e66189de57a74cfc4e86c13b679ebcd5ba04472c" translate="yes" xml:space="preserve">
          <source>When a command to save the buffer starts out to use &lt;code&gt;buffer-file-coding-system&lt;/code&gt; (or &lt;code&gt;save-buffer-coding-system&lt;/code&gt;), and that coding system cannot handle the actual text in the buffer, the command asks the user to choose another coding system (by calling &lt;code&gt;select-safe-coding-system&lt;/code&gt;). After that happens, the command also updates &lt;code&gt;buffer-file-coding-system&lt;/code&gt; to represent the coding system that the user specified.</source>
          <target state="translated">当用于保存缓冲区的命令开始使用 &lt;code&gt;buffer-file-coding-system&lt;/code&gt; （或 &lt;code&gt;save-buffer-coding-system&lt;/code&gt; ），并且该编码系统无法处理缓冲区中的实际文本时，该命令会要求用户选择另一个编码系统（通过调用 &lt;code&gt;select-safe-coding-system&lt;/code&gt; ）。在此之后，该命令还将更新 &lt;code&gt;buffer-file-coding-system&lt;/code&gt; 以表示用户指定的编码系统。</target>
        </trans-unit>
        <trans-unit id="f3acb80ad28b55e133f80b83c259f999c95278dc" translate="yes" xml:space="preserve">
          <source>When a cons cell is part of the shared structure of several lists, storing a new &lt;small&gt;CAR&lt;/small&gt; into the cons changes one element of each of these lists. Here is an example:</source>
          <target state="translated">当cons单元格是多个列表的共享结构的一部分时，将新的&lt;small&gt;CAR&lt;/small&gt;存储到cons中会更改这些列表中每个列表的一个元素。这是一个例子：</target>
        </trans-unit>
        <trans-unit id="24ce297f11d818aee0f401f1b75ca3ab16f216b8" translate="yes" xml:space="preserve">
          <source>When a divider is less than three pixels wide, it is drawn solidly with the foreground of this face. For larger dividers this face is used for the inner part only, excluding the first and last pixel.</source>
          <target state="translated">当分界线宽度小于3个像素时,它与这个面的前景绘制为实心。对于较大的分界线,这个面只用于内部,不包括第一个和最后一个像素。</target>
        </trans-unit>
        <trans-unit id="861b459804113837922aa9dbdf9df0cc85298e3e" translate="yes" xml:space="preserve">
          <source>When a file is loaded to satisfy an autoload, and it stops due to an error in the evaluation of its contents, any function definitions or &lt;code&gt;provide&lt;/code&gt; calls that occurred during the load are undone. See &lt;a href=&quot;autoload#Autoload&quot;&gt;Autoload&lt;/a&gt;.</source>
          <target state="translated">加载文件以满足自动加载的要求时，由于文件内容评估错误而停止运行时，将撤消在加载过程中发生的所有函数定义或 &lt;code&gt;provide&lt;/code&gt; 调用。请参阅&lt;a href=&quot;autoload#Autoload&quot;&gt;自动加载&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="36076467ece93a138319bd92ddfdda23365adb7f" translate="yes" xml:space="preserve">
          <source>When a file specifies local variable values, these become buffer-local values when you visit the file. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/File-Variables.html#File-Variables&quot;&gt;File Variables&lt;/a&gt; in</source>
          <target state="translated">当文件指定局部变量值时，当您访问该文件时，它们将成为局部缓冲区值。请参阅&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/File-Variables.html#File-Variables&quot;&gt;文件变量&lt;/a&gt;中</target>
        </trans-unit>
        <trans-unit id="68f2d158004444aa9ccf7548e354c7dbffab22bf" translate="yes" xml:space="preserve">
          <source>When a form is a macro call, it expands into a new form for Lisp to evaluate. We show the result of the expansion with &amp;lsquo;</source>
          <target state="translated">当表单是宏调用时，它将扩展为Lisp评估的新表单。我们用'显示扩展结果</target>
        </trans-unit>
        <trans-unit id="83eac9bafca98d01a15907eb91f4fe79f6bd983c" translate="yes" xml:space="preserve">
          <source>When a frame has side windows, the following function returns the main window of that frame.</source>
          <target state="translated">当一个框架有侧窗时,以下函数返回该框架的主窗口。</target>
        </trans-unit>
        <trans-unit id="f808ee525a7bb0fa88006d87d6523fc2f1a8b1ec" translate="yes" xml:space="preserve">
          <source>When a function recognizes and processes the argument in &lt;code&gt;argi&lt;/code&gt;, it should return a non-&lt;code&gt;nil&lt;/code&gt; value to say it has dealt with that argument. If it has also dealt with some of the following arguments, it can indicate that by deleting them from &lt;code&gt;command-line-args-left&lt;/code&gt;.</source>
          <target state="translated">当一个函数识别和处理的参数 &lt;code&gt;argi&lt;/code&gt; ，它应该返回一个非 &lt;code&gt;nil&lt;/code&gt; 值说它已经处理了这样的说法。如果它也处理了以下一些参数，则可以通过从 &lt;code&gt;command-line-args-left&lt;/code&gt; 中删除它们来表明这一点。</target>
        </trans-unit>
        <trans-unit id="53c12968a72f82623cb9cdd8ab8be9c144e6d8d5" translate="yes" xml:space="preserve">
          <source>When a function takes two or more arguments that must be file names, it checks each of those names for a handler. For example, if you do this:</source>
          <target state="translated">当一个函数接受两个或更多必须是文件名的参数时,它会检查每个参数的处理程序。例如,如果你这样做。</target>
        </trans-unit>
        <trans-unit id="15aca1807f4a43b6a6607c91b93863f63117ce73" translate="yes" xml:space="preserve">
          <source>When a generic function is invoked, it selects the applicable methods by comparing the actual arguments passed by the caller with the argument specializers of each method. A method is applicable if the actual arguments of the call are compatible with the method&amp;rsquo;s specializers. If more than one method is applicable, they are combined using certain rules, described below, and the combination then handles the call.</source>
          <target state="translated">调用泛型函数时，它通过将调用者传递的实际参数与每种方法的参数专门化子进行比较，来选择适用的方法。如果调用的实际参数与该方法的专用符兼容，则该方法适用。如果可以使用多个方法，则使用某些规则（如下所述）将它们组合在一起，然后该组合将处理调用。</target>
        </trans-unit>
        <trans-unit id="71a5e1c7f4395ec5c6d1fb3ede82f9e01cfc9590" translate="yes" xml:space="preserve">
          <source>When a handler function decides to call the ordinary Emacs primitive for the operation at hand, it needs to prevent the primitive from calling the same handler once again, thus leading to an infinite recursion. The example above shows how to do this, with the variables &lt;code&gt;inhibit-file-name-handlers&lt;/code&gt; and &lt;code&gt;inhibit-file-name-operation&lt;/code&gt;. Be careful to use them exactly as shown above; the details are crucial for proper behavior in the case of multiple handlers, and for operations that have two file names that may each have handlers.</source>
          <target state="translated">当处理程序函数决定为即将进行的操作调用普通Emacs原语时，需要防止该原语再次调用同一处理程序，从而导致无限递归。上面的示例显示了如何使用变量 &lt;code&gt;inhibit-file-name-handlers&lt;/code&gt; 和 &lt;code&gt;inhibit-file-name-operation&lt;/code&gt; 来执行此操作。请务必严格按照上面的说明使用它们。对于使用多个处理程序的情况下的正确行为，以及对于具有两个可能每个都有处理程序的文件名的操作而言，详细信息至关重要。</target>
        </trans-unit>
        <trans-unit id="3e3d75c0b75d9f3769c40a1a07432101f3bc7dea" translate="yes" xml:space="preserve">
          <source>When a key binding is found in one of the active keymaps, and that binding is a command, the search is over&amp;mdash;the command is executed. However, if the binding is a symbol with a value or a string, Emacs replaces the input key sequences with the variable&amp;rsquo;s value or the string, and restarts the search of the active keymaps. See &lt;a href=&quot;key-lookup#Key-Lookup&quot;&gt;Key Lookup&lt;/a&gt;.</source>
          <target state="translated">当在一个活动键盘映射中找到一个按键绑定，并且该绑定是一个命令时，搜索结束，该命令将被执行。但是，如果绑定是带有值或字符串的符号，则Emacs会将输入键序列替换为变量的值或字符串，然后重新开始对活动键映射的搜索。请参阅&lt;a href=&quot;key-lookup#Key-Lookup&quot;&gt;密钥查找&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="879e91eed40123d3428319aa38e604d0a9931f3e" translate="yes" xml:space="preserve">
          <source>When a line is exactly as wide as the window, Emacs displays the cursor in the right fringe instead of using two lines. Different bitmaps are used to represent the cursor in the fringe depending on the current buffer&amp;rsquo;s cursor type.</source>
          <target state="translated">当一行与窗口完全一样时，Emacs会在右边缘显示光标，而不是使用两行。根据当前缓冲区的光标类型，使用不同的位图来表示边缘中的光标。</target>
        </trans-unit>
        <trans-unit id="efa2f36d31bd662a1c15d5f57bdd3a139e686c70" translate="yes" xml:space="preserve">
          <source>When a line of text extends beyond the right edge of a window, Emacs can &lt;em&gt;continue&lt;/em&gt; the line (make it wrap to the next screen line), or &lt;em&gt;truncate&lt;/em&gt; the line (limit it to one screen line). The additional screen lines used to display a long text line are called &lt;em&gt;continuation&lt;/em&gt; lines. Continuation is not the same as filling; continuation happens on the screen only, not in the buffer contents, and it breaks a line precisely at the right margin, not at a word boundary. See &lt;a href=&quot;filling#Filling&quot;&gt;Filling&lt;/a&gt;.</source>
          <target state="translated">当一行文本超出窗口右边缘时，Emacs可以&lt;em&gt;继续&lt;/em&gt;该行（使其换行到下一个屏幕行），或&lt;em&gt;截断&lt;/em&gt;该行（将其限制为一个屏幕行）。用于显示长文本行的其他屏幕行称为&lt;em&gt;延续&lt;/em&gt;行。延续与填充不同；连续仅在屏幕上发生，而不在缓冲区内容中发生，并且它恰好在右边距而不是在单词边界处中断了一行。请参阅&lt;a href=&quot;filling#Filling&quot;&gt;填充&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ba9d289e0f20cab7c52b3068c87dd0cb613ad299" translate="yes" xml:space="preserve">
          <source>When a macro call appears in a Lisp program being compiled, the Lisp compiler calls the macro definition just as the interpreter would, and receives an expansion. But instead of evaluating this expansion, it compiles the expansion as if it had appeared directly in the program. As a result, the compiled code produces the value and side effects intended for the macro, but executes at full compiled speed. This would not work if the macro body computed the value and side effects itself&amp;mdash;they would be computed at compile time, which is not useful.</source>
          <target state="translated">当宏调用出现在正在编译的Lisp程序中时，Lisp编译器会像解释程序一样调用宏定义，并接收扩展。但是，它没有评估此扩展，而是像直接在程序中一样显示该扩展。结果，编译后的代码会产生宏的预期值和副作用，但会以完全编译后的速度执行。如果宏主体自己计算了值和副作用，那么这将不起作用-它们将在编译时进行计算，这是没有用的。</target>
        </trans-unit>
        <trans-unit id="1eb0dd1586afbfbb0e3724f438c3cd30d30714bc" translate="yes" xml:space="preserve">
          <source>When a major mode defines a system abbrev, it should call &lt;code&gt;define-abbrev&lt;/code&gt; and specify &lt;code&gt;t&lt;/code&gt; for the &lt;code&gt;:system&lt;/code&gt; property. Be aware that any saved non-system abbrevs are restored at startup, i.e., before some major modes are loaded. Therefore, major modes should not assume that their abbrev tables are empty when they are first loaded.</source>
          <target state="translated">当主模式定义系统缩写时，应调用 &lt;code&gt;define-abbrev&lt;/code&gt; 并为 &lt;code&gt;:system&lt;/code&gt; 属性指定 &lt;code&gt;t&lt;/code&gt; 。请注意，任何保存的非系统缩写都将在启动时（即在加载某些主要模式之前）恢复。因此，主要模式在首次加载时不应假定其缩写表为空。</target>
        </trans-unit>
        <trans-unit id="8a03105c21fb50ee3d93c13fa671419d66c0f8e1" translate="yes" xml:space="preserve">
          <source>When a minibuffer is inactive, its major mode is &lt;code&gt;minibuffer-inactive-mode&lt;/code&gt;, with keymap &lt;code&gt;minibuffer-inactive-mode-map&lt;/code&gt;. This is only really useful if the minibuffer is in a separate frame. See &lt;a href=&quot;minibuffers-and-frames#Minibuffers-and-Frames&quot;&gt;Minibuffers and Frames&lt;/a&gt;.</source>
          <target state="translated">当微型缓冲区处于非活动状态时，其主要模式为 &lt;code&gt;minibuffer-inactive-mode&lt;/code&gt; ，其键映射为 &lt;code&gt;minibuffer-inactive-mode-map&lt;/code&gt; 。仅当微型缓冲区位于单独的帧中时，这才真正有用。请参阅&lt;a href=&quot;minibuffers-and-frames#Minibuffers-and-Frames&quot;&gt;最小缓冲区和帧&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="48ac006d9a3055538851ac5d15d58ffe2652f56f" translate="yes" xml:space="preserve">
          <source>When a parent frame is about to be deleted (see &lt;a href=&quot;deleting-frames#Deleting-Frames&quot;&gt;Deleting Frames&lt;/a&gt;), its child frames are recursively deleted before it. There is one exception to this rule: When the child frame serves as a surrogate minibuffer frame (see &lt;a href=&quot;minibuffers-and-frames#Minibuffers-and-Frames&quot;&gt;Minibuffers and Frames&lt;/a&gt;) for another frame, it is retained until the parent frame has been deleted. If, at this time, no remaining frame uses the child frame as its minibuffer frame, Emacs will try to delete the child frame too. If that deletion fails for whatever reason, the child frame is made a top-level frame.</source>
          <target state="translated">当父框架即将被删除时（请参见&lt;a href=&quot;deleting-frames#Deleting-Frames&quot;&gt;Deleting Frames&lt;/a&gt;），其子框架将在此之前递归地删除。此规则有一个例外：当子帧用作另一个帧的替代&lt;a href=&quot;minibuffers-and-frames#Minibuffers-and-Frames&quot;&gt;微型&lt;/a&gt;缓冲区帧（请参见Minibuffers和Frames）时，它将保留直到删除父帧为止。如果此时没有剩余的帧使用子帧作为其迷你缓冲区帧，则Emacs也会尝试删除该子帧。如果删除由于某种原因而失败，则将子框架设为顶层框架。</target>
        </trans-unit>
        <trans-unit id="ed05a75e23177eb915215123c32f76bdb4c61bc4" translate="yes" xml:space="preserve">
          <source>When a parent frame is resized, its child frames conceptually retain their previous sizes and their positions relative to the left upper corner of the parent. This means that a child frame may become (partially) invisible when its parent frame shrinks. The parameter &lt;code&gt;keep-ratio&lt;/code&gt; (see &lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;Frame Interaction Parameters&lt;/a&gt;) can be used to resize and reposition a child frame proportionally whenever its parent frame is resized. This may avoid obscuring parts of a frame when its parent frame is shrunk.</source>
          <target state="translated">调整父框架的大小时，其子框架在概念上会保留其先前的大小和相对于父框架左上角的位置。这意味着子框架在其父框架缩小时可能（部分）不可见。每当调整父框架的大小时，可以使用参数 &lt;code&gt;keep-ratio&lt;/code&gt; （请参阅&amp;ldquo;&lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;框架交互参数&amp;rdquo;&lt;/a&gt;）按比例调整子框架的大小和位置。当其父框架缩小时，这可以避免遮挡框架的某些部分。</target>
        </trans-unit>
        <trans-unit id="b5c3f9b5837def7e9b15c164f72cd506efec7632" translate="yes" xml:space="preserve">
          <source>When a prefix key ending with a keyboard event (a character or function key) has a definition that is a menu keymap, the keymap operates as a keyboard menu; the user specifies the next event by choosing a menu item with the keyboard.</source>
          <target state="translated">当一个以键盘事件(字符或功能键)结尾的前缀键有一个菜单键图的定义时,键图就像键盘菜单一样操作;用户通过用键盘选择一个菜单项来指定下一个事件。</target>
        </trans-unit>
        <trans-unit id="f440b9496fba6ce132e0464b8bda1fe9486b9bae" translate="yes" xml:space="preserve">
          <source>When a process is deleted, the process object itself continues to exist as long as other Lisp objects point to it. All the Lisp primitives that work on process objects accept deleted processes, but those that do I/O or send signals will report an error. The process mark continues to point to the same place as before, usually into a buffer where output from the process was being inserted.</source>
          <target state="translated">当一个进程被删除时,只要其他Lisp对象指向它,进程对象本身就会继续存在。所有在进程对象上工作的Lisp基元都接受被删除的进程,但那些进行I/O或发送信号的基元会报告一个错误。进程标记继续指向与之前相同的地方,通常是插入进程输出的缓冲区中。</target>
        </trans-unit>
        <trans-unit id="56ddd4f83c391de6b941efd892052015c708047f" translate="yes" xml:space="preserve">
          <source>When a program creates a list or the user defines a new function (such as by loading a library), that data is placed in normal storage. If normal storage runs low, then Emacs asks the operating system to allocate more memory. Different types of Lisp objects, such as symbols, cons cells, small vectors, markers, etc., are segregated in distinct blocks in memory. (Large vectors, long strings, buffers and certain other editing types, which are fairly large, are allocated in individual blocks, one per object; small strings are packed into blocks of 8k bytes, and small vectors are packed into blocks of 4k bytes).</source>
          <target state="translated">当程序创建一个列表或用户定义一个新的函数(如加载一个库)时,这些数据会被放置在正常存储中。如果正常存储空间不足,那么Emacs会要求操作系统分配更多的内存。不同类型的Lisp对象,如符号、cons单元、小向量、标记等,在内存中被隔离在不同的块中。(大向量、长字符串、缓冲区和其他某些编辑类型的对象,体积相当大,都被分配在单独的块中,每个对象分配一个;小字符串被打包成8k字节的块,小向量被打包成4k字节的块)。</target>
        </trans-unit>
        <trans-unit id="e858995b7d6397134442bae4500cffe28c53d118" translate="yes" xml:space="preserve">
          <source>When a program loops infinitely and fails to return, your first problem is to stop the loop. On most operating systems, you can do this with</source>
          <target state="translated">当一个程序无限循环并且不能返回时,你的第一个问题是停止循环。在大多数的操作系统上,你可以用以下方法来停止循环</target>
        </trans-unit>
        <trans-unit id="99fc92ca1ef12829e3b40b2fdb5f985c36dc412c" translate="yes" xml:space="preserve">
          <source>When a single operation does both input and output, as do &lt;code&gt;call-process-region&lt;/code&gt; and &lt;code&gt;start-process&lt;/code&gt;, both &lt;code&gt;coding-system-for-read&lt;/code&gt; and &lt;code&gt;coding-system-for-write&lt;/code&gt; affect it.</source>
          <target state="translated">当一个单一的操作确实的输入和输出，因为这样做 &lt;code&gt;call-process-region&lt;/code&gt; 和 &lt;code&gt;start-process&lt;/code&gt; ，无论是 &lt;code&gt;coding-system-for-read&lt;/code&gt; 和 &lt;code&gt;coding-system-for-write&lt;/code&gt; 产生影响。</target>
        </trans-unit>
        <trans-unit id="516a97ac3ec0fdf483b3ca895c8f711f63330dd4" translate="yes" xml:space="preserve">
          <source>When a specification list involves alternatives or repetition, matching it against an actual macro call may require backtracking. For more details, see &lt;a href=&quot;backtracking#Backtracking&quot;&gt;Backtracking&lt;/a&gt;.</source>
          <target state="translated">当规范列表涉及替代方案或重复方案时，将其与实际的宏调用进行匹配可能需要回溯。有关更多详细信息，请参见&lt;a href=&quot;backtracking#Backtracking&quot;&gt;回溯&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a299fd429f9b94cfd9d16f7a978ab66b811cfe4f" translate="yes" xml:space="preserve">
          <source>When a subprocess terminates, Emacs reads any pending output, then stops reading output from that subprocess. Therefore, if the subprocess has children that are still live and still producing output, Emacs won&amp;rsquo;t receive that output.</source>
          <target state="translated">当子流程终止时，Emacs读取所有挂起的输出，然后停止从该子流程读取输出。因此，如果子进程中的子进程仍然存在并且仍在产生输出，则Emacs将不会收到该输出。</target>
        </trans-unit>
        <trans-unit id="d02327464eaa317bb28db233571b0947ae26b2fc" translate="yes" xml:space="preserve">
          <source>When a symbol appears as the car of a list, we find the real function via the symbol.</source>
          <target state="translated">当一个符号作为列表的车出现时,我们通过符号找到真正的函数。</target>
        </trans-unit>
        <trans-unit id="c9b22baeefc4620bae940ad60f585e0fdebdf930" translate="yes" xml:space="preserve">
          <source>When a symbol is evaluated, it is treated as a variable. The result is the variable&amp;rsquo;s value, if it has one. If the symbol has no value as a variable, the Lisp interpreter signals an error. For more information on the use of variables, see &lt;a href=&quot;variables#Variables&quot;&gt;Variables&lt;/a&gt;.</source>
          <target state="translated">计算符号时，将其视为变量。结果是变量的值（如果有的话）。如果该符号没有变量值，则Lisp解释器会发出错误信号。有关使用变量的更多信息，请参见&lt;a href=&quot;variables#Variables&quot;&gt;变量&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ca3260b389344f34b98f56c5734682c7799e0212" translate="yes" xml:space="preserve">
          <source>When a syntax error is detected, it might not be reported until much later, after higher-level alternatives have been exhausted, and with the point positioned further from the real error. But if backtracking is disabled when an error occurs, it can be reported immediately. Note that backtracking is also reenabled automatically in several situations; when a new alternative is established by &lt;code&gt;&amp;amp;optional&lt;/code&gt;, &lt;code&gt;&amp;amp;rest&lt;/code&gt;, or &lt;code&gt;&amp;amp;or&lt;/code&gt;, or at the start of processing a sublist, group, or indirect specification. The effect of enabling or disabling backtracking is limited to the remainder of the level currently being processed and lower levels.</source>
          <target state="translated">当检测到语法错误时，可能要等到更高级的替代方法用完后再报告，并且该错误点应远离实际错误。但是，如果在发生错误时禁用了回溯，则可以立即报告。请注意，在某些情况下，回溯功能也会自动重新启用。当通过 &lt;code&gt;&amp;amp;optional&lt;/code&gt; ， &lt;code&gt;&amp;amp;rest&lt;/code&gt; 或 &lt;code&gt;&amp;amp;or&lt;/code&gt; 建立新的替代方案时，或者在开始处理子列表，组或间接规范时。启用或禁用回溯的效果仅限于当前正在处理的其余级别和较低级别。</target>
        </trans-unit>
        <trans-unit id="b11e2d87637b03c717ef6efd4945b67ae857ecab" translate="yes" xml:space="preserve">
          <source>When a user drags something from another application over Emacs, that other application expects Emacs to tell it if Emacs can handle the data that is dragged. The variable &lt;code&gt;x-dnd-test-function&lt;/code&gt; is used by Emacs to determine what to reply. The default value is &lt;code&gt;x-dnd-default-test-function&lt;/code&gt; which accepts drops if the type of the data to be dropped is present in &lt;code&gt;x-dnd-known-types&lt;/code&gt;. You can customize &lt;code&gt;x-dnd-test-function&lt;/code&gt; and/or &lt;code&gt;x-dnd-known-types&lt;/code&gt; if you want Emacs to accept or reject drops based on some other criteria.</source>
          <target state="translated">当用户在Emacs上从另一个应用程序拖动某些东西时，该另一个应用程序希望Emacs告诉它Emacs是否可以处理被拖动的数据。Emacs使用变量 &lt;code&gt;x-dnd-test-function&lt;/code&gt; 来确定要回复的内容。默认值为 &lt;code&gt;x-dnd-default-test-function&lt;/code&gt; ，如果要删除的数据的类型以 &lt;code&gt;x-dnd-known-types&lt;/code&gt; 存在，则接受删除。如果希望Emacs根据其他条件接受或拒绝放置，则可以自定义 &lt;code&gt;x-dnd-test-function&lt;/code&gt; 和/或 &lt;code&gt;x-dnd-known-types&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1088cc10e444d7abc4d69e025d9a0f2f59cc4c10" translate="yes" xml:space="preserve">
          <source>When a user runs</source>
          <target state="translated">当用户运行</target>
        </trans-unit>
        <trans-unit id="013b54ee6a433237ecb0a87b09afb3684e276c9e" translate="yes" xml:space="preserve">
          <source>When a window is split, there are two live windows where previously there was one. One of these is represented by the same Lisp window object as the original window, and the other is represented by a newly-created Lisp window object. Both of these live windows become leaf nodes of the window tree, as &lt;em&gt;child windows&lt;/em&gt; of a single internal window. If necessary, Emacs automatically creates this internal window, which is also called the &lt;em&gt;parent window&lt;/em&gt;, and assigns it to the appropriate position in the window tree. A set of windows that share the same parent are called &lt;em&gt;siblings&lt;/em&gt;.</source>
          <target state="translated">拆分窗口时，有两个活动窗口，以前是一个。其中一个由与原始窗口相同的Lisp窗口对象表示，另一个由新创建的Lisp窗口对象表示。这两个活动窗口都成为窗口树的叶节点，就像单个内部窗口的&lt;em&gt;子&lt;/em&gt;窗口一样。如有必要，Emacs会自动创建此内部窗口（也称为&lt;em&gt;父窗口）&lt;/em&gt;，并将其分配给窗口树中的适当位置。一组共享同一父窗口的窗口称为&lt;em&gt;同级&lt;/em&gt;窗口。</target>
        </trans-unit>
        <trans-unit id="a0fff40bc687c049f98993acb43336fd2dbaafc1" translate="yes" xml:space="preserve">
          <source>When an URL is dropped on Emacs it may be a file, but it may also be another URL type (https, etc.). Emacs first checks &lt;code&gt;dnd-protocol-alist&lt;/code&gt; to determine what to do with the URL. If there is no match there and if &lt;code&gt;browse-url-browser-function&lt;/code&gt; is an alist, Emacs looks for a match there. If no match is found the text for the URL is inserted. If you want to alter Emacs behavior, you can customize these variables.</source>
          <target state="translated">将URL放在Emacs上时，它可能是文件，但也可能是其他URL类型（https等）。 Emacs首先检查 &lt;code&gt;dnd-protocol-alist&lt;/code&gt; 以确定如何处理URL。如果那里没有匹配项，并且如果 &lt;code&gt;browse-url-browser-function&lt;/code&gt; 是alist，则Emacs在那里寻找匹配项。如果找不到匹配项，则插入URL的文本。如果要更改Emacs的行为，可以自定义这些变量。</target>
        </trans-unit>
        <trans-unit id="d905b87f7dc12935b9ba5bafff41eb6ecc8d654c" translate="yes" xml:space="preserve">
          <source>When an editing command returns to the editor command loop, Emacs automatically calls &lt;code&gt;set-buffer&lt;/code&gt; on the buffer shown in the selected window. This is to prevent confusion: it ensures that the buffer that the cursor is in, when Emacs reads a command, is the buffer to which that command applies (see &lt;a href=&quot;command-loop#Command-Loop&quot;&gt;Command Loop&lt;/a&gt;). Thus, you should not use &lt;code&gt;set-buffer&lt;/code&gt; to switch visibly to a different buffer; for that, use the functions described in &lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;Switching Buffers&lt;/a&gt;.</source>
          <target state="translated">当编辑命令返回到编辑器命令循环时，Emacs会自动在选定窗口中显示 &lt;code&gt;set-buffer&lt;/code&gt; 上调用set-buffer。这是为了防止混淆：当Emacs读取命令时，它确保光标所在的缓冲区是该命令适用的缓冲区（请参见&lt;a href=&quot;command-loop#Command-Loop&quot;&gt;Command Loop&lt;/a&gt;）。因此，您不应使用 &lt;code&gt;set-buffer&lt;/code&gt; 来切换到其他缓冲区。为此，请使用&amp;ldquo;&lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;切换缓冲区&amp;rdquo;中&lt;/a&gt;描述的功能。</target>
        </trans-unit>
        <trans-unit id="a63b9424b082eb16ff6e47f9ec417106a08efb63" translate="yes" xml:space="preserve">
          <source>When an element to be deleted appears in the middle of the list, removing it involves changing the &lt;small&gt;CDR&lt;/small&gt;s (see &lt;a href=&quot;setcdr#Setcdr&quot;&gt;Setcdr&lt;/a&gt;).</source>
          <target state="translated">当要删除的元素出现在列表的中间时，将其删除涉及更改&lt;small&gt;CDR&lt;/small&gt;（请参阅&lt;a href=&quot;setcdr#Setcdr&quot;&gt;Setcdr&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="f91f46b78ede2a184a9ff10dc05a67b641f68fc1" translate="yes" xml:space="preserve">
          <source>When an error is due to invalid syntax in the program, the byte compiler might get confused about the error&amp;rsquo;s exact location. One way to investigate is to switch to the buffer</source>
          <target state="translated">当错误是由于程序中的语法无效而引起时，字节编译器可能会对错误的确切位置感到困惑。调查的一种方法是切换到缓冲区</target>
        </trans-unit>
        <trans-unit id="fe67ca8b13923e7334c27d3034d89eaf3eaeaf0e" translate="yes" xml:space="preserve">
          <source>When an error is signaled, &lt;code&gt;signal&lt;/code&gt; searches for an active &lt;em&gt;handler&lt;/em&gt; for the error. A handler is a sequence of Lisp expressions designated to be executed if an error happens in part of the Lisp program. If the error has an applicable handler, the handler is executed, and control resumes following the handler. The handler executes in the environment of the &lt;code&gt;condition-case&lt;/code&gt; that established it; all functions called within that &lt;code&gt;condition-case&lt;/code&gt; have already been exited, and the handler cannot return to them.</source>
          <target state="translated">当发出错误信号时， &lt;code&gt;signal&lt;/code&gt; 搜索该错误的活动&lt;em&gt;处理程序&lt;/em&gt;。处理程序是一系列Lisp表达式，如果Lisp程序的一部分发生错误，则指定执行该处理程序。如果错误具有适用的处理程序，则执行该处理程序，并在该处理程序之后继续进行控制。处理程序在建立 &lt;code&gt;condition-case&lt;/code&gt; 的环境中执行；在这种 &lt;code&gt;condition-case&lt;/code&gt; 调用的所有函数都已经退出，并且处理程序无法返回它们。</target>
        </trans-unit>
        <trans-unit id="526e253e8a5f3181a9d9da8a1b7155b742b86978" translate="yes" xml:space="preserve">
          <source>When an error is signaled, Emacs&amp;rsquo;s default reaction is to print an error message and terminate execution of the current command. This is the right thing to do in most cases, such as if you type</source>
          <target state="translated">当发出错误信号时，Emacs的默认反应是打印错误消息并终止当前命令的执行。这是大多数情况下的正确做法，例如，如果您键入</target>
        </trans-unit>
        <trans-unit id="57011ae63cb24d3bbaef9a2a30919d44a5c13eb5" translate="yes" xml:space="preserve">
          <source>When an operation can take a while to finish, you should inform the user about the progress it makes. This way the user can estimate remaining time and clearly see that Emacs is busy working, not hung. A convenient way to do this is to use a &lt;em&gt;progress reporter&lt;/em&gt;.</source>
          <target state="translated">当某项操作可能需要一段时间才能完成时，您应该通知用户其进度。这样，用户可以估计剩余时间，并清楚地看到Emacs忙于工作，而不是挂死。一种方便的方法是使用&lt;em&gt;进度报告器&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d7b21e47df479ca24f88848b86d2e4329934e81a" translate="yes" xml:space="preserve">
          <source>When any event happens, Emacs will call the &lt;var&gt;callback&lt;/var&gt; function passing it a single argument &lt;var&gt;event&lt;/var&gt;, which is of the form</source>
          <target state="translated">当发生任何事件时，Emacs将调用 &lt;var&gt;callback&lt;/var&gt; 函数，并向其传递单个参数 &lt;var&gt;event&lt;/var&gt; ，其形式为</target>
        </trans-unit>
        <trans-unit id="f54087aa444a51ff54f6c514333f1db9ca4b0182" translate="yes" xml:space="preserve">
          <source>When called after a change, each function receives five arguments: the overlay, &lt;code&gt;t&lt;/code&gt;, the beginning and end of the text range just modified, and the length of the pre-change text replaced by that range. (For an insertion, the pre-change length is zero; for a deletion, that length is the number of characters deleted, and the post-change beginning and end are equal.)</source>
          <target state="translated">更改后调用时，每个函数将接收五个参数：overlay， &lt;code&gt;t&lt;/code&gt; ，刚刚修改的文本范围的开始和结束，以及用该范围替换的更改前文本的长度。（对于插入，更改前的长度为零；对于删除，该长度为删除的字符数，并且更改后的开始和结尾相等。）</target>
        </trans-unit>
        <trans-unit id="32901ad7853d3072da02c269a04b96f55a95d101" translate="yes" xml:space="preserve">
          <source>When called before a change, each function receives four arguments: the overlay, &lt;code&gt;nil&lt;/code&gt;, and the beginning and end of the text range to be modified.</source>
          <target state="translated">在更改前被调用时，每个函数都会接收四个参数：overlay， &lt;code&gt;nil&lt;/code&gt; 以及要修改的文本范围的开始和结束。</target>
        </trans-unit>
        <trans-unit id="379e276f62a8b0d26dd454758763b3c43a823f7d" translate="yes" xml:space="preserve">
          <source>When called from Lisp, this function is completely equivalent to:</source>
          <target state="translated">当从Lisp调用时,这个函数完全等同于。</target>
        </trans-unit>
        <trans-unit id="1e4ecd1153bce92bc43401b33a3763adb2023a7d" translate="yes" xml:space="preserve">
          <source>When called from Lisp, this function prints a message listing the shadowed files, instead of displaying them in a buffer. If the optional argument &lt;code&gt;stringp&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, it instead returns the shadowed files as a string.</source>
          <target state="translated">从Lisp调用时，此函数将显示一条列出阴影文件的消息，而不是将其显示在缓冲区中。如果可选参数 &lt;code&gt;stringp&lt;/code&gt; 为non- &lt;code&gt;nil&lt;/code&gt; ，则将阴影文件作为字符串返回。</target>
        </trans-unit>
        <trans-unit id="1025d2ab7f41cbfd9c8680dcbf05ab1356f6200a" translate="yes" xml:space="preserve">
          <source>When called interactively, &lt;var&gt;column&lt;/var&gt; is the value of prefix numeric argument. If &lt;var&gt;column&lt;/var&gt; is not an integer, an error is signaled.</source>
          <target state="translated">当以交互方式调用时， &lt;var&gt;column&lt;/var&gt; 是前缀数字参数的值。如果 &lt;var&gt;column&lt;/var&gt; 不是整数，则会发出错误信号。</target>
        </trans-unit>
        <trans-unit id="ddbb33035ae6026ae4fcd8439b1ecc8b75c72889" translate="yes" xml:space="preserve">
          <source>When called interactively, it prints the uptime in the echo area.</source>
          <target state="translated">当交互式调用时,它会在回音区打印出运行时间。</target>
        </trans-unit>
        <trans-unit id="512b6ff9d518561c55b0c73d9b583830f1e19c4a" translate="yes" xml:space="preserve">
          <source>When called interactively, the command defaults to putting point after text, and a prefix argument inverts this behavior.</source>
          <target state="translated">当交互式调用时,命令默认将点放在文本之后,而前缀参数则会颠覆这种行为。</target>
        </trans-unit>
        <trans-unit id="c1e95c99e8bc8c354f749aa3affddeba03679d17" translate="yes" xml:space="preserve">
          <source>When choosing the key sequences for Lisp programs to rebind, please follow the Emacs conventions for use of various keys (see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html#Key-Binding-Conventions&quot;&gt;Key Binding Conventions&lt;/a&gt;).</source>
          <target state="translated">为Lisp程序选择要重新绑定的键序列时，请遵循Emacs约定以使用各种键（请参阅&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html#Key-Binding-Conventions&quot;&gt;键绑定约定&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="53b48e62ee1a029c3d507ab151392d9b81fa4a99" translate="yes" xml:space="preserve">
          <source>When code run by a thread signals an error that is unhandled, the thread exits. Other threads can access the error form which caused the thread to exit using the following function.</source>
          <target state="translated">当线程运行的代码发出未处理的错误信号时,线程就会退出。其他线程可以使用以下函数访问导致线程退出的错误形式。</target>
        </trans-unit>
        <trans-unit id="26fc8259867dd56763a05c30c19e9f26b5dbdaaa" translate="yes" xml:space="preserve">
          <source>When commands are remapped (see &lt;a href=&quot;remapping-commands#Remapping-Commands&quot;&gt;Remapping Commands&lt;/a&gt;), &lt;code&gt;key-binding&lt;/code&gt; normally processes command remappings so as to return the remapped command that will actually be executed. However, if &lt;var&gt;no-remap&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;key-binding&lt;/code&gt; ignores remappings and returns the binding directly specified for &lt;var&gt;key&lt;/var&gt;.</source>
          <target state="translated">重新&lt;a href=&quot;remapping-commands#Remapping-Commands&quot;&gt;映射命令时&lt;/a&gt;（请参阅Remapping Commands）， &lt;code&gt;key-binding&lt;/code&gt; 通常会处理命令重新映射，以便返回将实际执行的重新映射的命令。但是，如果 &lt;var&gt;no-remap&lt;/var&gt; 不为 &lt;code&gt;nil&lt;/code&gt; ，则 &lt;code&gt;key-binding&lt;/code&gt; 会忽略重新映射并返回直接为 &lt;var&gt;key&lt;/var&gt; 指定的绑定。</target>
        </trans-unit>
        <trans-unit id="1bcc346f6a00bc954a41f55bb8f168c5d28fa7bd" translate="yes" xml:space="preserve">
          <source>When constructing a case table, you can provide &lt;code&gt;nil&lt;/code&gt; for &lt;var&gt;canonicalize&lt;/var&gt;; then Emacs fills in this slot from the lower case and upper case mappings. You can also provide &lt;code&gt;nil&lt;/code&gt; for &lt;var&gt;equivalences&lt;/var&gt;; then Emacs fills in this slot from &lt;var&gt;canonicalize&lt;/var&gt;. In a case table that is actually in use, those components are non-&lt;code&gt;nil&lt;/code&gt;. Do not try to specify &lt;var&gt;equivalences&lt;/var&gt; without also specifying &lt;var&gt;canonicalize&lt;/var&gt;.</source>
          <target state="translated">构造案例表时，可以提供 &lt;code&gt;nil&lt;/code&gt; 进行 &lt;var&gt;canonicalize&lt;/var&gt; ；然后Emacs从小写和大写映射中填充此插槽。您也可以为 &lt;var&gt;equivalences&lt;/var&gt; 提供 &lt;code&gt;nil&lt;/code&gt; ；然后Emacs从 &lt;var&gt;canonicalize&lt;/var&gt; 填充此插槽。在实际使用的案例表中，这些组件为 &lt;code&gt;nil&lt;/code&gt; 。在未指定 &lt;var&gt;canonicalize&lt;/var&gt; 的情况下，请勿尝试指定 &lt;var&gt;equivalences&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c7036dd834760da23b77a262006bb0d858781c8" translate="yes" xml:space="preserve">
          <source>When defining a lambda expression that is to be used as an anonymous function, you can in principle use any method to construct the list. But typically you should use the &lt;code&gt;lambda&lt;/code&gt; macro, or the &lt;code&gt;function&lt;/code&gt; special form, or the &lt;code&gt;#'&lt;/code&gt; read syntax:</source>
          <target state="translated">在定义要用作匿名函数的lambda表达式时，原则上可以使用任何方法构造列表。但通常应使用 &lt;code&gt;lambda&lt;/code&gt; 宏， &lt;code&gt;function&lt;/code&gt; 特殊形式或 &lt;code&gt;#'&lt;/code&gt; 读取语法：</target>
        </trans-unit>
        <trans-unit id="d1ea493148249faf21a7954fe286fc73f09681a6" translate="yes" xml:space="preserve">
          <source>When defining a macro you must pay attention to the number of times the arguments will be evaluated when the expansion is executed. The following macro (used to facilitate iteration) illustrates the problem. This macro allows us to write a for-loop construct.</source>
          <target state="translated">在定义一个宏时,你必须注意扩展执行时,参数将被评估的次数。下面的宏(用于方便迭代)就说明了这个问题。这个宏允许我们编写一个for-loop结构。</target>
        </trans-unit>
        <trans-unit id="ea87e0d7dbdf5374ec0e7361bf0a991a49440aba" translate="yes" xml:space="preserve">
          <source>When defining a user option using &lt;code&gt;defcustom&lt;/code&gt;, you can set its &lt;code&gt;safe-local-variable&lt;/code&gt; property by adding the arguments &lt;code&gt;:safe &lt;var&gt;function&lt;/var&gt;&lt;/code&gt; to &lt;code&gt;defcustom&lt;/code&gt; (see &lt;a href=&quot;variable-definitions#Variable-Definitions&quot;&gt;Variable Definitions&lt;/a&gt;). However, a safety predicate defined using &lt;code&gt;:safe&lt;/code&gt; will only be known once the package that contains the &lt;code&gt;defcustom&lt;/code&gt; is loaded, which is often too late. As an alternative, you can use the autoload cookie (see &lt;a href=&quot;autoload#Autoload&quot;&gt;Autoload&lt;/a&gt;) to assign the option its safety predicate, like this:</source>
          <target state="translated">当使用定义用户选项 &lt;code&gt;defcustom&lt;/code&gt; ，你可以设置它的 &lt;code&gt;safe-local-variable&lt;/code&gt; 通过添加参数属性 &lt;code&gt;:safe &lt;var&gt;function&lt;/var&gt;&lt;/code&gt; ，以 &lt;code&gt;defcustom&lt;/code&gt; （见&lt;a href=&quot;variable-definitions#Variable-Definitions&quot;&gt;变量定义&lt;/a&gt;）。但是，只有在装入包含 &lt;code&gt;defcustom&lt;/code&gt; 的软件包后，才知道使用 &lt;code&gt;:safe&lt;/code&gt; 定义的安全谓词，这通常为时已晚。或者，您可以使用autoload cookie（请参阅&lt;a href=&quot;autoload#Autoload&quot;&gt;Autoload&lt;/a&gt;）为该选项分配其安全谓词，如下所示：</target>
        </trans-unit>
        <trans-unit id="2806d24cf47d96d2e5d91ed9a9c954116c18c451" translate="yes" xml:space="preserve">
          <source>When defining and initializing a variable that holds a complicated value (such as a keymap with bindings in it), it&amp;rsquo;s best to put the entire computation of the value into the &lt;code&gt;defvar&lt;/code&gt;, like this:</source>
          <target state="translated">在定义和初始化包含复杂值的变量（例如，其中包含绑定的键映射）时，最好将值的整个计算放入 &lt;code&gt;defvar&lt;/code&gt; 中，如下所示：</target>
        </trans-unit>
        <trans-unit id="c977341f7fff9083b488a6a6277d4ef2105523d4" translate="yes" xml:space="preserve">
          <source>When deleting the last sibling of a window &lt;var&gt;W&lt;/var&gt;, its parent window is deleted too, with &lt;var&gt;W&lt;/var&gt; replacing it in the window tree. This means that &lt;var&gt;W&lt;/var&gt; must be recombined with its parent&amp;rsquo;s siblings to form a new window combination (see &lt;a href=&quot;windows-and-frames#Windows-and-Frames&quot;&gt;Windows and Frames&lt;/a&gt;). In some occasions, deleting a live window may even entail the deletion of two internal windows.</source>
          <target state="translated">删除窗口 &lt;var&gt;W&lt;/var&gt; 的最后一个同级时，其父窗口也将被删除，而 &lt;var&gt;W&lt;/var&gt; 将其替换为窗口树。这意味着 &lt;var&gt;W&lt;/var&gt; 必须与其父级的同级重新组合以形成新的窗口组合（请参见&lt;a href=&quot;windows-and-frames#Windows-and-Frames&quot;&gt;Windows和Frames&lt;/a&gt;）。在某些情况下，删除活动窗口甚至可能需要删除两个内部窗口。</target>
        </trans-unit>
        <trans-unit id="1f21ac0b84af4a66f3cc646c451b88df78bbc28a" translate="yes" xml:space="preserve">
          <source>When documentation strings refer to key sequences, they should use the current, actual key bindings. They can do so using certain special text sequences described below. Accessing documentation strings in the usual way substitutes current key binding information for these special sequences. This works by calling &lt;code&gt;substitute-command-keys&lt;/code&gt;. You can also call that function yourself.</source>
          <target state="translated">当文档字符串引用键序列时，它们应使用当前的实际键绑定。他们可以使用下面描述的某些特殊文本序列来执行此操作。以通常的方式访问文档字符串将当前的键绑定信息替换为这些特殊序列。这可以通过调用 &lt;code&gt;substitute-command-keys&lt;/code&gt; 。您也可以自己调用该函数。</target>
        </trans-unit>
        <trans-unit id="38784df2dd5c218a5d66ce72d620d406cb126c89" translate="yes" xml:space="preserve">
          <source>When dynamic variable binding is in effect (the default), &lt;code&gt;set&lt;/code&gt; has the same effect as &lt;code&gt;setq&lt;/code&gt;, apart from the fact that &lt;code&gt;set&lt;/code&gt; evaluates its &lt;var&gt;symbol&lt;/var&gt; argument whereas &lt;code&gt;setq&lt;/code&gt; does not. But when a variable is lexically bound, &lt;code&gt;set&lt;/code&gt; affects its &lt;em&gt;dynamic&lt;/em&gt; value, whereas &lt;code&gt;setq&lt;/code&gt; affects its current (lexical) value. See &lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;Variable Scoping&lt;/a&gt;.</source>
          <target state="translated">当动态变量绑定有效时（默认设置）， &lt;code&gt;set&lt;/code&gt; 与 &lt;code&gt;setq&lt;/code&gt; 具有相同的作用，除了 &lt;code&gt;set&lt;/code&gt; 评估其 &lt;var&gt;symbol&lt;/var&gt; 参数而 &lt;code&gt;setq&lt;/code&gt; 无效的事实。但是，当变量按词法绑定时， &lt;code&gt;set&lt;/code&gt; 会影响其&lt;em&gt;动态&lt;/em&gt;值，而 &lt;code&gt;setq&lt;/code&gt; 会影响其当前（词法）值。请参阅&lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;可变作用域&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f1d9000f8f63f9308377ae130b2620fb8b2d598a" translate="yes" xml:space="preserve">
          <source>When enabling Read Only mode, this mode command also enables View mode if the option &lt;code&gt;view-read-only&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Misc-Buffer.html#Misc-Buffer&quot;&gt;Miscellaneous Buffer Operations&lt;/a&gt; in</source>
          <target state="translated">当启用只读模式，这种模式下的命令也使视图模式如果选择 &lt;code&gt;view-read-only&lt;/code&gt; 是非 &lt;code&gt;nil&lt;/code&gt; 。见&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Misc-Buffer.html#Misc-Buffer&quot;&gt;其他缓冲区操作&lt;/a&gt;中</target>
        </trans-unit>
        <trans-unit id="8aa5d17efedfa09b34f34f20b7fb94849c3e7350" translate="yes" xml:space="preserve">
          <source>When evaluating Emacs Lisp code directly using an &lt;code&gt;eval&lt;/code&gt; call, lexical binding is enabled if the &lt;var&gt;lexical&lt;/var&gt; argument to &lt;code&gt;eval&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;. See &lt;a href=&quot;eval#Eval&quot;&gt;Eval&lt;/a&gt;.</source>
          <target state="translated">当直接使用 &lt;code&gt;eval&lt;/code&gt; 调用评估Emacs Lisp代码时，如果 &lt;code&gt;eval&lt;/code&gt; 的 &lt;var&gt;lexical&lt;/var&gt; 参数为非 &lt;code&gt;nil&lt;/code&gt; ，则启用词法绑定。参见&lt;a href=&quot;eval#Eval&quot;&gt;Eval&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5ff58c996861fc90fd655da46d45167aa63d6f1a" translate="yes" xml:space="preserve">
          <source>When file I/O functions signal Lisp errors, they usually use the condition &lt;code&gt;file-error&lt;/code&gt; (see &lt;a href=&quot;handling-errors#Handling-Errors&quot;&gt;Handling Errors&lt;/a&gt;). The error message is in most cases obtained from the operating system, according to locale &lt;code&gt;system-messages-locale&lt;/code&gt;, and decoded using coding system &lt;code&gt;locale-coding-system&lt;/code&gt; (see &lt;a href=&quot;locales#Locales&quot;&gt;Locales&lt;/a&gt;).</source>
          <target state="translated">当文件I / O功能发出Lisp错误信号时，它们通常使用条件 &lt;code&gt;file-error&lt;/code&gt; （请参阅&lt;a href=&quot;handling-errors#Handling-Errors&quot;&gt;处理错误&lt;/a&gt;）。在大多数情况下，错误消息是根据locale &lt;code&gt;system-messages-locale&lt;/code&gt; 从操作系统获得的，并使用编码系统 &lt;code&gt;locale-coding-system&lt;/code&gt; 进行解码（请参阅&lt;a href=&quot;locales#Locales&quot;&gt;Locales&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="350c5b56322aaae92e48e1490682ff07a3544764" translate="yes" xml:space="preserve">
          <source>When horizontal scrolling (see &lt;a href=&quot;horizontal-scrolling#Horizontal-Scrolling&quot;&gt;Horizontal Scrolling&lt;/a&gt;) is in use in a window, that forces truncation.</source>
          <target state="translated">在窗口中使用水平滚动（请参见&amp;ldquo;&lt;a href=&quot;horizontal-scrolling#Horizontal-Scrolling&quot;&gt;水平滚动&amp;rdquo;&lt;/a&gt;）时，将强制截断。</target>
        </trans-unit>
        <trans-unit id="271aaab86b1337a5ba506711da21c73442cad0a7" translate="yes" xml:space="preserve">
          <source>When inserting text into a buffer, Emacs converts the text to the buffer&amp;rsquo;s representation, as specified by &lt;code&gt;enable-multibyte-characters&lt;/code&gt; in that buffer. In particular, when you insert multibyte text into a unibyte buffer, Emacs converts the text to unibyte, even though this conversion cannot in general preserve all the characters that might be in the multibyte text. The other natural alternative, to convert the buffer contents to multibyte, is not acceptable because the buffer&amp;rsquo;s representation is a choice made by the user that cannot be overridden automatically.</source>
          <target state="translated">将文本插入缓冲区时，Emacs会将文本转换为缓冲区的表示形式，这由该缓冲区中的 &lt;code&gt;enable-multibyte-characters&lt;/code&gt; 指定。尤其是，当您将多字节文本插入单字节缓冲区时，Emacs会将文本转换为单字节，即使这种转换通常不能保留多字节文本中的所有字符。将缓冲区内容转换为多字节的另一种自然选择是不可接受的，因为缓冲区的表示形式是用户做出的选择，不能自动覆盖。</target>
        </trans-unit>
        <trans-unit id="78400401d74f8d9f7e140a6ba21ba56a7349b7ae" translate="yes" xml:space="preserve">
          <source>When invoked from within the lexical body of a primary or an &lt;code&gt;:around&lt;/code&gt; auxiliary method, call the next applicable method for the same generic function. Normally, it is called with no arguments, which means to call the next applicable method with the same arguments that the calling method was invoked. Otherwise, the specified arguments are used instead.</source>
          <target state="translated">从主要方法或 &lt;code&gt;:around&lt;/code&gt; 辅助方法的词法主体内调用时，请为同一泛型函数调用下一个适用的方法。通常，它不带参数地调用，这意味着要使用与调用方法相同的参数来调用下一个适用的方法。否则，将使用指定的参数。</target>
        </trans-unit>
        <trans-unit id="22a73a2c2f52de133ad681f2f8a5379ca6fbcaa7" translate="yes" xml:space="preserve">
          <source>When invoked, &lt;var&gt;fname&lt;/var&gt; displays &lt;var&gt;help-text&lt;/var&gt; in a window, then reads and executes a key sequence according to &lt;var&gt;help-map&lt;/var&gt;. The string &lt;var&gt;help-text&lt;/var&gt; should describe the bindings available in &lt;var&gt;help-map&lt;/var&gt;.</source>
          <target state="translated">调用时， &lt;var&gt;fname&lt;/var&gt; 在窗口中显示 &lt;var&gt;help-text&lt;/var&gt; ，然后根据 &lt;var&gt;help-map&lt;/var&gt; 读取并执行键序列。字符串 &lt;var&gt;help-text&lt;/var&gt; 应该描述 &lt;var&gt;help-map&lt;/var&gt; 中可用的绑定。</target>
        </trans-unit>
        <trans-unit id="270e8799b814cfce4a286fe2e722afa5227a904d" translate="yes" xml:space="preserve">
          <source>When it appears inside a generator function, &lt;code&gt;iter-yield&lt;/code&gt; indicates that the current iterator should pause and return &lt;var&gt;value&lt;/var&gt; from &lt;code&gt;iter-next&lt;/code&gt;. &lt;code&gt;iter-yield&lt;/code&gt; evaluates to the &lt;code&gt;value&lt;/code&gt; parameter of next call to &lt;code&gt;iter-next&lt;/code&gt;.</source>
          <target state="translated">当 &lt;code&gt;iter-yield&lt;/code&gt; 出现在generator函数内部时，它指示当前迭代器应暂停并从 &lt;code&gt;iter-next&lt;/code&gt; 返回 &lt;var&gt;value&lt;/var&gt; 。 &lt;code&gt;iter-yield&lt;/code&gt; 评估为下一次调用 &lt;code&gt;iter-next&lt;/code&gt; 的 &lt;code&gt;value&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="8e06cf5c06f558efb415ea91b49073c2f1392b41" translate="yes" xml:space="preserve">
          <source>When it is called with no arguments, it should return the next character.</source>
          <target state="translated">当它在没有参数的情况下被调用时,它应该返回下一个字符。</target>
        </trans-unit>
        <trans-unit id="d04ba64362f113898459c5f6a31354c18e8509fe" translate="yes" xml:space="preserve">
          <source>When it is called with one argument (always a character), &lt;var&gt;function&lt;/var&gt; should save the argument and arrange to return it on the next call. This is called &lt;em&gt;unreading&lt;/em&gt; the character; it happens when the Lisp reader reads one character too many and wants to put it back where it came from. In this case, it makes no difference what value &lt;var&gt;function&lt;/var&gt; returns.</source>
          <target state="translated">当使用一个参数（总是一个字符） &lt;var&gt;function&lt;/var&gt; 该函数时，函数应保存该参数并安排在下一次调用时将其返回。这就是所谓的&lt;em&gt;unreading&lt;/em&gt;字符; 当Lisp读取器读取的一个字符太多并且想要将其放回原处时，就会发生这种情况。在这种情况下，返回什么值 &lt;var&gt;function&lt;/var&gt; 没有区别。</target>
        </trans-unit>
        <trans-unit id="95baf6905d346ff81689596bbb3b320ff6f3106c" translate="yes" xml:space="preserve">
          <source>When its value is non-&lt;code&gt;nil&lt;/code&gt;, this variable takes precedence over all other methods of specifying a coding system to use for input, including &lt;code&gt;file-coding-system-alist&lt;/code&gt;, &lt;code&gt;process-coding-system-alist&lt;/code&gt; and &lt;code&gt;network-coding-system-alist&lt;/code&gt;.</source>
          <target state="translated">当其值不为 &lt;code&gt;nil&lt;/code&gt; 时，此变量优先于指定用于输入的编码系统的所有其他方法，包括 &lt;code&gt;file-coding-system-alist&lt;/code&gt; ， &lt;code&gt;process-coding-system-alist&lt;/code&gt; 和 &lt;code&gt;network-coding-system-alist&lt;/code&gt; 。。</target>
        </trans-unit>
        <trans-unit id="75d41964794dd951ed71d985fbd5fd1e7a11f18e" translate="yes" xml:space="preserve">
          <source>When kill commands are interwoven with other commands, each kill command makes a new entry in the kill ring. Multiple kill commands in succession build up a single kill ring entry, which would be yanked as a unit; the second and subsequent consecutive kill commands add text to the entry made by the first one.</source>
          <target state="translated">当杀戮命令与其他命令交织在一起时,每条杀戮命令都会在杀戮环中建立一个新的条目。多个杀戮命令连续建立一个杀戮环条目,该条目将作为一个单元被拽出;第二个及以后的连续杀戮命令在第一个条目的基础上增加文字。</target>
        </trans-unit>
        <trans-unit id="b3160ac97062e53673f5b7ae6733ac8a5c41c006" translate="yes" xml:space="preserve">
          <source>When lexical binding is enabled, &lt;var&gt;function-object&lt;/var&gt; is converted into a closure. See &lt;a href=&quot;closures#Closures&quot;&gt;Closures&lt;/a&gt;.</source>
          <target state="translated">启用词法绑定后， &lt;var&gt;function-object&lt;/var&gt; 将转换为闭包。请参阅&lt;a href=&quot;closures#Closures&quot;&gt;闭包&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="649a0e0a802e8cb989511e43554feca7e3834c9d" translate="yes" xml:space="preserve">
          <source>When libxml2 support is available, the following functions can be used to parse HTML or XML text into Lisp object trees.</source>
          <target state="translated">当libxml2支持时,可以使用以下函数将HTML或XML文本解析为Lisp对象树。</target>
        </trans-unit>
        <trans-unit id="2fbc121df2e7d75994e696c8cd6756e93b4a9a7f" translate="yes" xml:space="preserve">
          <source>When loading a source file (not compiled), &lt;code&gt;load&lt;/code&gt; performs character set translation just as Emacs would do when visiting the file. See &lt;a href=&quot;coding-systems#Coding-Systems&quot;&gt;Coding Systems&lt;/a&gt;.</source>
          <target state="translated">加载源文件（未编译）时， &lt;code&gt;load&lt;/code&gt; 会执行字符集转换，就像Emacs在访问文件时所做的一样。请参阅&lt;a href=&quot;coding-systems#Coding-Systems&quot;&gt;编码系统&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f966d17e6f91b40f18d6f070e990c0794fe58fe3" translate="yes" xml:space="preserve">
          <source>When loading an Emacs Lisp file or evaluating a Lisp buffer, lexical binding is enabled if the buffer-local variable &lt;code&gt;lexical-binding&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;:</source>
          <target state="translated">在加载Emacs Lisp文件或评估Lisp缓冲区时，如果缓冲区局部变量 &lt;code&gt;lexical-binding&lt;/code&gt; 为非 &lt;code&gt;nil&lt;/code&gt; ，则启用词法绑定：</target>
        </trans-unit>
        <trans-unit id="e1913cebbaf53d7eca6a957e910ce8d79fca8ec9" translate="yes" xml:space="preserve">
          <source>When loading an uncompiled file, Emacs tries to expand any macros that the file contains (see &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt;). We refer to this as &lt;em&gt;eager macro expansion&lt;/em&gt;. Doing this (rather than deferring the expansion until the relevant code runs) can significantly speed up the execution of uncompiled code. Sometimes, this macro expansion cannot be done, owing to a cyclic dependency. In the simplest example of this, the file you are loading refers to a macro defined in another file, and that file in turn requires the file you are loading. This is generally harmless. Emacs prints a warning (&amp;lsquo;</source>
          <target state="translated">加载未编译的文件时，Emacs尝试扩展该文件包含的所有宏（请参见&lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt;）。我们将此称为&lt;em&gt;热切的宏扩展&lt;/em&gt;。这样做（而不是将扩展推迟到相关代码运行之前）可以大大加快未编译代码的执行速度。有时，由于周期依赖性，无法完成此宏扩展。在最简单的示例中，您正在加载的文件是指另一个文件中定义的宏，而该文件又需要您正在加载的文件。这通常是无害的。Emacs会显示警告（'</target>
        </trans-unit>
        <trans-unit id="d977efe2ca2e7e0c3c47bd1b756ac94422eccd1b" translate="yes" xml:space="preserve">
          <source>When marking is finished, all objects still unmarked are garbage. No matter what the Lisp program or the user does, it is impossible to refer to them, since there is no longer a way to reach them. Their space might as well be reused, since no one will miss them. The second (sweep) phase of the garbage collector arranges to reuse them.</source>
          <target state="translated">当标记完成后,所有仍未标记的对象都是垃圾。无论Lisp程序或用户做什么,都不可能引用它们,因为已经没有办法到达它们。它们的空间还不如被重新使用,因为没有人会错过它们。垃圾收集器的第二阶段(扫除)安排重用它们。</target>
        </trans-unit>
        <trans-unit id="100be2e7228977cae18240a2a3d8c8d9124982d4" translate="yes" xml:space="preserve">
          <source>When matching a buffer, &amp;lsquo;</source>
          <target state="translated">匹配缓冲区时，&amp;ldquo;</target>
        </trans-unit>
        <trans-unit id="3bae7d6a440557da3c24f776682bba86a8a7bfd3" translate="yes" xml:space="preserve">
          <source>When matching a string instead of a buffer, &amp;lsquo;</source>
          <target state="translated">当匹配字符串而不是缓冲区时，&amp;ldquo;</target>
        </trans-unit>
        <trans-unit id="5b36abe96eb4b6f19c26bd1ec5a147768f1c4a66" translate="yes" xml:space="preserve">
          <source>When modifying a variable (whose name will usually end with &lt;code&gt;-function&lt;/code&gt;), you can choose whether &lt;var&gt;function&lt;/var&gt; is used globally or only in the current buffer: if &lt;var&gt;place&lt;/var&gt; is just a symbol, then &lt;var&gt;function&lt;/var&gt; is added to the global value of &lt;var&gt;place&lt;/var&gt;. Whereas if &lt;var&gt;place&lt;/var&gt; is of the form &lt;code&gt;(local &lt;var&gt;symbol&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;symbol&lt;/var&gt; is an expression which returns the variable name, then &lt;var&gt;function&lt;/var&gt; will only be added in the current buffer. Finally, if you want to modify a lexical variable, you will have to use &lt;code&gt;(var &lt;var&gt;variable&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">修改变量时（其名称通常以 &lt;code&gt;-function&lt;/code&gt; 结尾），可以选择是全局使用 &lt;var&gt;function&lt;/var&gt; 还是仅在当前缓冲区中使用函数：如果 &lt;var&gt;place&lt;/var&gt; 只是一个符号，则将 &lt;var&gt;function&lt;/var&gt; 添加到 &lt;var&gt;place&lt;/var&gt; 的全局值中。如果 &lt;var&gt;place&lt;/var&gt; 的格式为 &lt;code&gt;(local &lt;var&gt;symbol&lt;/var&gt;)&lt;/code&gt; ，其中 &lt;var&gt;symbol&lt;/var&gt; 是一个返回变量名称的表达式，则仅将 &lt;var&gt;function&lt;/var&gt; 添加到当前缓冲区中。最后，如果要修改词法变量，则必须使用 &lt;code&gt;(var &lt;var&gt;variable&lt;/var&gt;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a3a3f2a8a8a6dc07a8079628465edef16d500fc7" translate="yes" xml:space="preserve">
          <source>When more than one active keymap defines the same function key for the menu bar, the item appears just once. If the user clicks on that menu bar item, it brings up a single, combined menu containing all the subcommands of that item&amp;mdash;the global subcommands, the local subcommands, and the minor mode subcommands.</source>
          <target state="translated">当一个以上的活动键盘映射为菜单栏定义了相同的功能键时，该项仅出现一次。如果用户单击该菜单栏项目，它将弹出一个组合菜单，其中包含该项目的所有子命令-全局子命令，本地子命令和次要模式子命令。</target>
        </trans-unit>
        <trans-unit id="69fd4885d44a5f3a4a20f7e032731c7f78263a05" translate="yes" xml:space="preserve">
          <source>When more than one minor mode keymap is active, the earlier one in &lt;code&gt;minor-mode-map-alist&lt;/code&gt; takes priority. But you should design minor modes so that they don&amp;rsquo;t interfere with each other. If you do this properly, the order will not matter.</source>
          <target state="translated">当一个以上的次要模式键盘映射处于活动状态时，&amp;ldquo; &lt;code&gt;minor-mode-map-alist&lt;/code&gt; &amp;rdquo;中较早的键盘优先。但是您应该设计次要模式，以免它们互相干扰。如果正确执行此操作，顺序将无关紧要。</target>
        </trans-unit>
        <trans-unit id="1a8050c7a27dcb66bca7ebd9d7f895d40aee87aa" translate="yes" xml:space="preserve">
          <source>When mouse events occur in special parts of a window, such as a mode line or a scroll bar, the event type shows nothing special&amp;mdash;it is the same symbol that would normally represent that combination of mouse button and modifier keys. The information about the window part is kept elsewhere in the event&amp;mdash;in the coordinates. But &lt;code&gt;read-key-sequence&lt;/code&gt; translates this information into imaginary prefix keys, all of which are symbols: &lt;code&gt;tab-line&lt;/code&gt;, &lt;code&gt;header-line&lt;/code&gt;, &lt;code&gt;horizontal-scroll-bar&lt;/code&gt;, &lt;code&gt;menu-bar&lt;/code&gt;, &lt;code&gt;tab-bar&lt;/code&gt;, &lt;code&gt;mode-line&lt;/code&gt;, &lt;code&gt;vertical-line&lt;/code&gt;, and &lt;code&gt;vertical-scroll-bar&lt;/code&gt;. You can define meanings for mouse clicks in special window parts by defining key sequences using these imaginary prefix keys.</source>
          <target state="translated">当鼠标事件发生在窗口的特定部分（例如模式行或滚动条）时，事件类型没有什么特别的显示-它是相同的符号，通常代表鼠标键和修饰键的组合。有关窗口部分的信息在事件中的其他位置（在坐标中）保留。但是 &lt;code&gt;read-key-sequence&lt;/code&gt; 会将这些信息转换为虚构的前缀键，所有这些符号都是符号： &lt;code&gt;tab-line&lt;/code&gt; ， &lt;code&gt;header-line&lt;/code&gt; ， &lt;code&gt;horizontal-scroll-bar&lt;/code&gt; ， &lt;code&gt;menu-bar&lt;/code&gt; ， &lt;code&gt;tab-bar&lt;/code&gt; ， &lt;code&gt;mode-line&lt;/code&gt; ， &lt;code&gt;vertical-line&lt;/code&gt; ，和 &lt;code&gt;vertical-scroll-bar&lt;/code&gt; 。您可以使用这些虚构的前缀键定义键序列，从而在特殊窗口部分中定义鼠标单击的含义。</target>
        </trans-unit>
        <trans-unit id="5c84b29b0559591bfde54d52963f64fa669d6447" translate="yes" xml:space="preserve">
          <source>When multiple overlays cover one character, an overlay with higher priority overrides those with lower priority. See &lt;a href=&quot;overlays#Overlays&quot;&gt;Overlays&lt;/a&gt;.</source>
          <target state="translated">当多个覆盖覆盖一个字符时，优先级较高的覆盖会覆盖优先级较低的覆盖。请参见&lt;a href=&quot;overlays#Overlays&quot;&gt;叠加&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="25eb5c698117c37d3a9783e95ab97ef5ef9f5588" translate="yes" xml:space="preserve">
          <source>When non-&lt;code&gt;nil&lt;/code&gt;, mouse motion events are generated even for very small movements. Otherwise, motion events are not generated as long as the mouse cursor remains pointing to the same glyph in the text.</source>
          <target state="translated">当为 &lt;code&gt;nil&lt;/code&gt; 时，即使很小的移动也会产生鼠标移动事件。否则，只要鼠标光标保持指向文本中的相同字形，就不会生成运动事件。</target>
        </trans-unit>
        <trans-unit id="047e53ac675fd24d28c78f6b730c89bfd8552535" translate="yes" xml:space="preserve">
          <source>When none of the simple types is appropriate, you can use composite types, which build new types from other types or from specified data. The specified types or data are called the &lt;em&gt;arguments&lt;/em&gt; of the composite type. The composite type normally looks like this:</source>
          <target state="translated">如果没有简单类型合适，则可以使用复合类型，复合类型可以从其他类型或从指定数据构建新类型。指定的类型或数据称为复合类型的&lt;em&gt;参数&lt;/em&gt;。复合类型通常如下所示：</target>
        </trans-unit>
        <trans-unit id="779d725ab8d9715d9f6601fd3bcd1e39eb8f6906" translate="yes" xml:space="preserve">
          <source>When one major mode command calls another, it should do so inside of &lt;code&gt;delay-mode-hooks&lt;/code&gt;.</source>
          <target state="translated">当一个主要模式命令调用另一个时，它应该在 &lt;code&gt;delay-mode-hooks&lt;/code&gt; 内部进行。</target>
        </trans-unit>
        <trans-unit id="de0947bb744aee21a132ab3b19d62edc58d7711a" translate="yes" xml:space="preserve">
          <source>When opening a TLS connection, this should be where the first element is the TLS type (which should either be &lt;code&gt;gnutls-x509pki&lt;/code&gt; or &lt;code&gt;gnutls-anon&lt;/code&gt;, and the remaining elements should form a keyword list acceptable for &lt;code&gt;gnutls-boot&lt;/code&gt;. (This keyword list can be obtained from the &lt;code&gt;gnutls-boot-parameters&lt;/code&gt; function.) The TLS connection will then be negotiated after completing the connection to the host.</source>
          <target state="translated">打开TLS连接时，这应该是第一个元素是TLS类型的位置（应该是 &lt;code&gt;gnutls-x509pki&lt;/code&gt; 或 &lt;code&gt;gnutls-anon&lt;/code&gt; ，其余元素应构成 &lt;code&gt;gnutls-boot&lt;/code&gt; 可接受的关键字列表。（此关键字列表可以可以从 &lt;code&gt;gnutls-boot-parameters&lt;/code&gt; 函数获得。）完成与主机的连接后，将协商TLS连接。</target>
        </trans-unit>
        <trans-unit id="53bf8b39424917bd24fe81e1c5d9a76120ed60ed" translate="yes" xml:space="preserve">
          <source>When performing &lt;code&gt;copy-keymap&lt;/code&gt;, any keymaps that appear directly as bindings in &lt;var&gt;keymap&lt;/var&gt; are also copied recursively, and so on to any number of levels. However, recursive copying does not take place when the definition of a character is a symbol whose function definition is a keymap; the same symbol appears in the new copy.</source>
          <target state="translated">在执行 &lt;code&gt;copy-keymap&lt;/code&gt; 时，还将直接在 &lt;var&gt;keymap&lt;/var&gt; 中显示为绑定的任何keymap进行递归复制，依此类推直至任意数量的级别。但是，当字符的定义是一个符号，而其功能定义是一个键映射时，则不会进行递归复制。同一符号将出现在新副本中。</target>
        </trans-unit>
        <trans-unit id="3a067675652faa97e22eb59de180ecad738e3406" translate="yes" xml:space="preserve">
          <source>When possible, this command actually works by calling the &lt;code&gt;sort&lt;/code&gt; utility program.</source>
          <target state="translated">如果可能，此命令实际上可以通过调用 &lt;code&gt;sort&lt;/code&gt; 实用程序来工作。</target>
        </trans-unit>
        <trans-unit id="22565d2a77541296c231ea9076bb0b93e0a926ea" translate="yes" xml:space="preserve">
          <source>When pre-allocating, you should make sure &lt;code&gt;(length &lt;var&gt;bindat-raw&lt;/var&gt;)&lt;/code&gt; meets or exceeds the total length to avoid an out-of-range error.</source>
          <target state="translated">进行预分配时，应确保 &lt;code&gt;(length &lt;var&gt;bindat-raw&lt;/var&gt;)&lt;/code&gt; 达到或超过总长度，以避免超出范围的错误。</target>
        </trans-unit>
        <trans-unit id="0ee0a4c579b96173c4d92e82677349c6811a11d2" translate="yes" xml:space="preserve">
          <source>When present, a list of strings containing escape sequences that Emacs will output while configuring a tty for rendering. Emacs emits these strings only when configuring a terminal: if you want to enable a mode on a terminal that is already active (for example, while in &lt;code&gt;tty-setup-hook&lt;/code&gt;), explicitly output the necessary escape sequence using &lt;code&gt;send-string-to-terminal&lt;/code&gt; in addition to adding the sequence to &lt;code&gt;tty-mode-set-strings&lt;/code&gt;.</source>
          <target state="translated">如果存在，则为包含Emacs在配置要渲染的tty时将输出的转义序列的字符串列表。Emacs仅在配置终端时才发出这些字符串：如果要在已经处于活动状态的终端上启用模式（例如，在 &lt;code&gt;tty-setup-hook&lt;/code&gt; 中时），请使用 &lt;code&gt;send-string-to-terminal&lt;/code&gt; 显式输出必要的转义序列。终端，除了将序列添加到 &lt;code&gt;tty-mode-set-strings&lt;/code&gt; 之外。</target>
        </trans-unit>
        <trans-unit id="9a83e89087505c41136f9017d7224c99949728e0" translate="yes" xml:space="preserve">
          <source>When present, a list of strings that undo the effects of the strings in &lt;code&gt;tty-mode-set-strings&lt;/code&gt;. Emacs emits these strings when exiting, deleting a terminal, or suspending itself.</source>
          <target state="translated">如果存在，则为撤消 &lt;code&gt;tty-mode-set-strings&lt;/code&gt; 中的字符串影响的字符串列表。Emacs在退出，删除终端或挂起自身时会发出这些字符串。</target>
        </trans-unit>
        <trans-unit id="08fd877eb8e87706105bac0db9a2794817e4b63a" translate="yes" xml:space="preserve">
          <source>When printing circular structures, this construct is used to represent where the structure loops back onto itself, and &amp;lsquo;</source>
          <target state="translated">在打印圆形结构时，此构造用于表示结构在其自身上循环的位置，并且'</target>
        </trans-unit>
        <trans-unit id="da6bcd1fadc74242a658fbfe9f9ad9c68afd303f" translate="yes" xml:space="preserve">
          <source>When reading input results in such a &lt;em&gt;shift-translation&lt;/em&gt;, Emacs sets the variable &lt;code&gt;this-command-keys-shift-translated&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value. Lisp programs can examine this variable if they need to modify their behavior when invoked by shift-translated keys. For example, the function &lt;code&gt;handle-shift-selection&lt;/code&gt; examines the value of this variable to determine how to activate or deactivate the region (see &lt;a href=&quot;the-mark#The-Mark&quot;&gt;handle-shift-selection&lt;/a&gt;).</source>
          <target state="translated">当读取输入结果时会产生这种&lt;em&gt;shift-translation&lt;/em&gt;，Emacs会将变量 &lt;code&gt;this-command-keys-shift-translated&lt;/code&gt; 设置为非 &lt;code&gt;nil&lt;/code&gt; 值。 Lisp程序在由shift转换键调用时是否需要修改其行为，可以检查此变量。例如，功能 &lt;code&gt;handle-shift-selection&lt;/code&gt; 检查此变量的值以确定如何激活或停用该区域（请参见&lt;a href=&quot;the-mark#The-Mark&quot;&gt;handle-shift-selection&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="dd04cadc13a94e0780eae3bc26ccc9f254510535" translate="yes" xml:space="preserve">
          <source>When reading or writing from the standard input/output streams of the Emacs process in batch mode, it is sometimes required to make sure any arbitrary binary data will be read/written verbatim, and/or that no translation of newlines to or from CR-LF pairs is performed. This issue does not exist on POSIX hosts, only on MS-Windows and MS-DOS. The following function allows you to control the I/O mode of any standard stream of the Emacs process.</source>
          <target state="translated">在批处理模式下从Emacs进程的标准输入/输出流中读写时,有时需要确保任何任意二进制数据将被逐字读/写,和/或不执行CR-LF对之间的换行翻译。这个问题在POSIX主机上不存在,只有在MS-Windows和MS-DOS上才存在。下面的功能可以让你控制Emacs进程的任何标准流的I/O模式。</target>
        </trans-unit>
        <trans-unit id="b67d232f5124d34368688aba61e81bd9b263a2df" translate="yes" xml:space="preserve">
          <source>When representing a system value (such as a file size or a count of seconds since the Epoch), prefer the corresponding system type (e.g., &lt;code&gt;off_t&lt;/code&gt;, &lt;code&gt;time_t&lt;/code&gt;). Do not assume that a system type is signed, unless this assumption is known to be safe. For example, although &lt;code&gt;off_t&lt;/code&gt; is always signed, &lt;code&gt;time_t&lt;/code&gt; need not be.</source>
          <target state="translated">在表示系统值（例如文件大小或自大纪元以来的秒数）时，请首选相应的系统类型（例如 &lt;code&gt;off_t&lt;/code&gt; ， &lt;code&gt;time_t&lt;/code&gt; ）。不要假定系统类型是带符号的，除非已知这种假设是安全的。例如，尽管 &lt;code&gt;off_t&lt;/code&gt; 始终是带符号的，但 &lt;code&gt;time_t&lt;/code&gt; 不必是带符号的。</target>
        </trans-unit>
        <trans-unit id="ac40e3df18fc1975f34cddbac15e959e496bbd8c" translate="yes" xml:space="preserve">
          <source>When set the server will not automatically remove the notification when an action has been invoked. The notification will remain resident in the server until it is explicitly removed by the user or by the sender. This hint is likely only useful when the server has the &lt;code&gt;:persistence&lt;/code&gt; capability.</source>
          <target state="translated">设置后，服务器将不会在调用操作后自动删除通知。通知将一直驻留在服务器中，直到被用户或发送方明确删除。仅当服务器具有 &lt;code&gt;:persistence&lt;/code&gt; 功能时，此提示才有用。</target>
        </trans-unit>
        <trans-unit id="f9368dc6fce3c40353f1e2bb0df437fe8d76702b" translate="yes" xml:space="preserve">
          <source>When set the server will treat the notification as transient and by-pass the server&amp;rsquo;s persistence capability, if it should exist.</source>
          <target state="translated">设置后，服务器会将通知视为临时通知，并绕过服务器的持久性功能（如果应该存在）。</target>
        </trans-unit>
        <trans-unit id="9e6e6c017b1e2de9bbba4574f219e054f0ed3f4f" translate="yes" xml:space="preserve">
          <source>When setting variables according to saved customizations, make sure to set the variables &lt;var&gt;variables&lt;/var&gt; before this one; i.e., delay setting this variable until after those others have been handled. Use &lt;code&gt;:set-after&lt;/code&gt; if setting this variable won&amp;rsquo;t work properly unless those other variables already have their intended values.</source>
          <target state="translated">根据保存的自定义设置变量时，请确保在此 &lt;var&gt;variables&lt;/var&gt; 之前设置变量；即，延迟设置此变量，直到处理完其他变量为止。如果设置此变量将无法正常工作，请使用 &lt;code&gt;:set-after&lt;/code&gt; ，除非那些其他变量已经具有其预期值。</target>
        </trans-unit>
        <trans-unit id="cfff7ef3ea4fdcd00a65945cf2e104dc5743d452" translate="yes" xml:space="preserve">
          <source>When several characters with consecutive</source>
          <target state="translated">当几个连续的字符</target>
        </trans-unit>
        <trans-unit id="2d8b4838128ea072c0106a113248abb6b63cf660" translate="yes" xml:space="preserve">
          <source>When similar constants occur as parts of a program, the Lisp interpreter might save time or space by reusing existing constants or their components. For example, &lt;code&gt;(eq &quot;abc&quot; &quot;abc&quot;)&lt;/code&gt; returns &lt;code&gt;t&lt;/code&gt; if the interpreter creates only one instance of the string literal &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, and returns &lt;code&gt;nil&lt;/code&gt; if it creates two instances. Lisp programs should be written so that they work regardless of whether this optimization is in use.</source>
          <target state="translated">当相似的常量作为程序的一部分出现时，Lisp解释器可以通过重用现有的常量或其组件来节省时间或空间。例如，如果解释器仅创建字符串文字 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; 一个实例，则 &lt;code&gt;(eq &quot;abc&quot; &quot;abc&quot;)&lt;/code&gt; 返回 &lt;code&gt;t&lt;/code&gt; ;如果解释器创建两个实例，则返回 &lt;code&gt;nil&lt;/code&gt; 。应该编写Lisp程序，以便无论是否使用此优化程序都可以工作。</target>
        </trans-unit>
        <trans-unit id="3f26b87f1bbbefd1a6d0f776d0a92015f1677217" translate="yes" xml:space="preserve">
          <source>When some Lisp code called by a module function signals an error or throws, the nonlocal exit is trapped, and the pending exit and its associated data are stored in the environment. Whenever a nonlocal exit is pending in the environment, any module</source>
          <target state="translated">当模块函数调用的一些Lisp代码发出错误信号或抛出时,非本地退出就会被捕获,而待定的退出及其相关数据会被存储在环境中。每当环境中的非本地退出待定时,任何模块的</target>
        </trans-unit>
        <trans-unit id="9db45b5609d26dfd7efc9feec92be1511642a357" translate="yes" xml:space="preserve">
          <source>When some portion of a buffer is hidden, the vertical movement commands operate as if that portion did not exist, allowing a single &lt;code&gt;next-line&lt;/code&gt; command to skip any number of hidden lines. However, character movement commands (such as &lt;code&gt;forward-char&lt;/code&gt;) do not skip the hidden portion, and it is possible (if tricky) to insert or delete text in a hidden portion.</source>
          <target state="translated">当缓冲区的某个部分被隐藏时，垂直移动命令的运行就好像该部分不存在一样，从而允许单个 &lt;code&gt;next-line&lt;/code&gt; 命令跳过任何数量的隐藏行。但是，字符移动命令（例如 &lt;code&gt;forward-char&lt;/code&gt; ）不会跳过隐藏部分，并且有可能（如果比较棘手）在隐藏部分中插入或删除文本。</target>
        </trans-unit>
        <trans-unit id="e574ca399de3ea69015e3e8671da1891747a608c" translate="yes" xml:space="preserve">
          <source>When specifying this attribute using &lt;code&gt;set-face-attribute&lt;/code&gt; or &lt;code&gt;set-face-font&lt;/code&gt; (see &lt;a href=&quot;attribute-functions#Attribute-Functions&quot;&gt;Attribute Functions&lt;/a&gt;), you may also supply a font spec, a font entity, or a string. Emacs converts such values to an appropriate font object, and stores that font object as the actual attribute value. If you specify a string, the contents of the string should be a font name (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html#Fonts&quot;&gt;Fonts&lt;/a&gt; in</source>
          <target state="translated">当使用 &lt;code&gt;set-face-attribute&lt;/code&gt; 或 &lt;code&gt;set-face-font&lt;/code&gt; 指定此属性时（请参阅&amp;ldquo;&lt;a href=&quot;attribute-functions#Attribute-Functions&quot;&gt;属性功能&amp;rdquo;&lt;/a&gt;），您还可以提供字体规格，字体实体或字符串。Emacs将此类值转换为适当的字体对象，并将该字体对象存储为实际属性值。如果指定一个字符串，字符串的内容应该是一个字体名称（见&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html#Fonts&quot;&gt;字体&lt;/a&gt;在</target>
        </trans-unit>
        <trans-unit id="4b11ce5d6802b26c7f2b961ad907723f9d570ab2" translate="yes" xml:space="preserve">
          <source>When text that includes mixed right-to-left and left-to-right characters and bidirectional controls is copied into a different location, it can change its visual appearance, and also can affect the visual appearance of the surrounding text at destination. This is because reordering of bidirectional text specified by the</source>
          <target state="translated">当包含从右到左和从左到右混合字符和双向控制的文本被复制到不同的位置时,它可能会改变其视觉外观,也可能会影响目的地周围文本的视觉外观。这是因为对双向文本进行重新排序是由</target>
        </trans-unit>
        <trans-unit id="15ed882fb69d01ac6fbd84eb0a9a01f6db124216" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;fac&lt;/code&gt; definition is instrumented and the function is called, the call to &lt;code&gt;edebug&lt;/code&gt; acts as a breakpoint. Depending on the execution mode, Edebug stops or pauses there.</source>
          <target state="translated">检测到 &lt;code&gt;fac&lt;/code&gt; 定义并调用函数后，对 &lt;code&gt;edebug&lt;/code&gt; 的调用将充当断点。根据执行模式，Edebug在此处停止或暂停。</target>
        </trans-unit>
        <trans-unit id="1139523c738a471ce6a2d8309dc3871f01ec27a0" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;read-key-sequence&lt;/code&gt; function reads a key sequence (see &lt;a href=&quot;key-sequence-input#Key-Sequence-Input&quot;&gt;Key Sequence Input&lt;/a&gt;), it uses &lt;em&gt;translation keymaps&lt;/em&gt; to translate certain event sequences into others. The translation keymaps are &lt;code&gt;input-decode-map&lt;/code&gt;, &lt;code&gt;local-function-key-map&lt;/code&gt;, and &lt;code&gt;key-translation-map&lt;/code&gt; (in order of priority).</source>
          <target state="translated">当 &lt;code&gt;read-key-sequence&lt;/code&gt; 函数读取一个键序列（请参见&lt;a href=&quot;key-sequence-input#Key-Sequence-Input&quot;&gt;Key Sequence Input&lt;/a&gt;）时，它使用&lt;em&gt;转换键映射&lt;/em&gt;将某些事件序列转换为其他事件序列。转换 &lt;code&gt;local-function-key-map&lt;/code&gt; 是 &lt;code&gt;input-decode-map&lt;/code&gt; ，local-function-key-map和 &lt;code&gt;key-translation-map&lt;/code&gt; （按优先级顺序）。</target>
        </trans-unit>
        <trans-unit id="510adf48c83c6cb02951a4ea57e9191853fd42fb" translate="yes" xml:space="preserve">
          <source>When the Lisp reader encounters a symbol, it reads all the characters of the name. Then it hashes those characters to find an index in a table called an &lt;em&gt;obarray&lt;/em&gt;. Hashing is an efficient method of looking something up. For example, instead of searching a telephone book cover to cover when looking up Jan Jones, you start with the J&amp;rsquo;s and go from there. That is a simple version of hashing. Each element of the obarray is a &lt;em&gt;bucket&lt;/em&gt; which holds all the symbols with a given hash code; to look for a given name, it is sufficient to look through all the symbols in the bucket for that name&amp;rsquo;s hash code. (The same idea is used for general Emacs hash tables, but they are a different data type; see &lt;a href=&quot;hash-tables#Hash-Tables&quot;&gt;Hash Tables&lt;/a&gt;.)</source>
          <target state="translated">Lisp阅读器遇到符号时，它将读取名称中的所有字符。然后，它对这些字符进行哈希处理以在称为&lt;em&gt;obarray&lt;/em&gt;的表中找到索引。哈希是一种有效的查找方法。例如，在查找Jan Jones时不必搜索电话簿的封面，而要从J开始并从那里开始。那是哈希的简单版本。 obarray的每个元素都是一个&lt;em&gt;存储桶&lt;/em&gt;，其中包含具有给定哈希码的所有符号。要查找给定名称，只需查看存储桶中的所有符号即可找到该名称的哈希码。 （通用Emacs哈希表使用了相同的想法，但是它们是不同的数据类型；请参阅&lt;a href=&quot;hash-tables#Hash-Tables&quot;&gt;哈希表&lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="28edbb235f4190b9615e134862d5947f7521701a" translate="yes" xml:space="preserve">
          <source>When the argument to &lt;code&gt;upcase-initials&lt;/code&gt; is a character, &lt;code&gt;upcase-initials&lt;/code&gt; has the same result as &lt;code&gt;upcase&lt;/code&gt;.</source>
          <target state="translated">当 &lt;code&gt;upcase-initials&lt;/code&gt; 的参数是一个字符时， &lt;code&gt;upcase-initials&lt;/code&gt; 的结果与 &lt;code&gt;upcase&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="903eba992e3e61c401fd6817aaa779226f6240ea" translate="yes" xml:space="preserve">
          <source>When the binding is &lt;code&gt;nil&lt;/code&gt;, it doesn&amp;rsquo;t constitute a definition but it does take precedence over a default binding or a binding in the parent keymap. On the other hand, a binding of &lt;code&gt;nil&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; override lower-precedence keymaps; thus, if the local map gives a binding of &lt;code&gt;nil&lt;/code&gt;, Emacs uses the binding from the global map.</source>
          <target state="translated">当绑定为 &lt;code&gt;nil&lt;/code&gt; 时，它不构成定义，但它的优先级高于默认绑定或父键映射中的绑定。在另一方面，的结合 &lt;code&gt;nil&lt;/code&gt; 并&lt;em&gt;没有&lt;/em&gt;覆盖较低优先级的键盘布局; 因此，如果本地映射给出了 &lt;code&gt;nil&lt;/code&gt; 的绑定，则Emacs将使用全局映射中的绑定。</target>
        </trans-unit>
        <trans-unit id="20571cabec1ca29dcf057e55fc1b7097d15497a2" translate="yes" xml:space="preserve">
          <source>When the buffer has many overlay strings (e.g., see &lt;a href=&quot;overlay-properties#Overlay-Properties&quot;&gt;before-string&lt;/a&gt;) that conceal some of the buffer text or &lt;code&gt;display&lt;/code&gt; properties that are strings, it is a good idea to use the &lt;code&gt;cursor&lt;/code&gt; property on these strings to cue the Emacs display about the places where to put the cursor while traversing these strings. This directly communicates to the display engine where the Lisp program wants to put the cursor, or where the user would expect the cursor, when point is located on some buffer position that is &amp;ldquo;covered&amp;rdquo; by the display or overlay string.</source>
          <target state="translated">当缓冲区有许多覆盖字符串（例如，参见&lt;a href=&quot;overlay-properties#Overlay-Properties&quot;&gt;before-string&lt;/a&gt;）隐藏某些缓冲区文本或 &lt;code&gt;display&lt;/code&gt; 属性的字符串时，最好在这些字符串上使用 &lt;code&gt;cursor&lt;/code&gt; 属性来提示Emacs显示有关位置的信息在遍历这些字符串时将光标放在何处。当点位于显示或覆盖字符串&amp;ldquo;覆盖&amp;rdquo;的某个缓冲区位置上时，这会直接与显示引擎通信，Lisp程序将在该显示引擎上放置光标，或者用户期望该光标所在。</target>
        </trans-unit>
        <trans-unit id="20eff5623e92ef1e3650b5301a263aee2445dae2" translate="yes" xml:space="preserve">
          <source>When the characters before and after &lt;var&gt;pos&lt;/var&gt; are part of the same field, there is no doubt which field contains &lt;var&gt;pos&lt;/var&gt;: the one those characters both belong to. When &lt;var&gt;pos&lt;/var&gt; is at a boundary between fields, which field it belongs to depends on the stickiness of the &lt;code&gt;field&lt;/code&gt; properties of the two surrounding characters (see &lt;a href=&quot;sticky-properties#Sticky-Properties&quot;&gt;Sticky Properties&lt;/a&gt;). The field whose property would be inherited by text inserted at &lt;var&gt;pos&lt;/var&gt; is the field that contains &lt;var&gt;pos&lt;/var&gt;.</source>
          <target state="translated">当 &lt;var&gt;pos&lt;/var&gt; 之前和之后的字符是同一字段的一部分时，毫无疑问，哪个字段包含 &lt;var&gt;pos&lt;/var&gt; ：这两个字符都属于该字段。当 &lt;var&gt;pos&lt;/var&gt; 位于字段之间的边界时，它属于哪个字段取决于周围两个字符的 &lt;code&gt;field&lt;/code&gt; 属性的粘性（请参见&lt;a href=&quot;sticky-properties#Sticky-Properties&quot;&gt;Sticky Properties&lt;/a&gt;）。其属性将被 &lt;var&gt;pos&lt;/var&gt; 处插入的文本继承的字段是包含 &lt;var&gt;pos&lt;/var&gt; 的字段。</target>
        </trans-unit>
        <trans-unit id="c85287eeb03ccaab5ae0349af6b14a141439609b" translate="yes" xml:space="preserve">
          <source>When the code is byte-compiled, &lt;var&gt;function-object&lt;/var&gt; is compiled into a byte-code function object (see &lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;Byte Compilation&lt;/a&gt;).</source>
          <target state="translated">当代码被字节编译时， &lt;var&gt;function-object&lt;/var&gt; 被编译为字节码功能对象（请参见&lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;Byte Compilation&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="16eb5d5db50ce3f76fa52383db660c768327699a" translate="yes" xml:space="preserve">
          <source>When the command &lt;code&gt;completion-at-point&lt;/code&gt; runs, it calls the functions in the list one by one, without any argument. Each function should return &lt;code&gt;nil&lt;/code&gt; unless it can and wants to take responsibility for the completion data for the text at point. Otherwise it should return a list of the following form:</source>
          <target state="translated">当命令 &lt;code&gt;completion-at-point&lt;/code&gt; 运行时，它将不带任何参数地一一调用列表中的函数。每个函数都应返回 &lt;code&gt;nil&lt;/code&gt; ,除非它可以并且想要对点处文本的完成数据负责。否则，它将返回以下形式的列表：</target>
        </trans-unit>
        <trans-unit id="cc9842d846c44bcb20fb609c0236af44d089fe37" translate="yes" xml:space="preserve">
          <source>When the data changes, you will want to update the text in the buffer. You can update all nodes by calling &lt;code&gt;ewoc-refresh&lt;/code&gt;, or just specific nodes using &lt;code&gt;ewoc-invalidate&lt;/code&gt;, or all nodes satisfying a predicate using &lt;code&gt;ewoc-map&lt;/code&gt;. Alternatively, you can delete invalid nodes using &lt;code&gt;ewoc-delete&lt;/code&gt; or &lt;code&gt;ewoc-filter&lt;/code&gt;, and add new nodes in their place. Deleting a node from an ewoc deletes its associated textual description from buffer, as well.</source>
          <target state="translated">当数据更改时，您将要更新缓冲区中的文本。您可以通过调用 &lt;code&gt;ewoc-refresh&lt;/code&gt; 更新所有节点，或者使用 &lt;code&gt;ewoc-invalidate&lt;/code&gt; 仅更新特定的节点，或者使用 &lt;code&gt;ewoc-map&lt;/code&gt; 满足谓词的所有节点。或者，您可以使用 &lt;code&gt;ewoc-delete&lt;/code&gt; 或 &lt;code&gt;ewoc-filter&lt;/code&gt; 删除无效节点，并在其位置添加新节点。从ewoc删除节点也会从缓冲区中删除其关联的文本描述。</target>
        </trans-unit>
        <trans-unit id="6388524eb3dc02caf6125a1a89d5a5245a8a2c27" translate="yes" xml:space="preserve">
          <source>When the debugger has been entered, the &lt;code&gt;debug-on-error&lt;/code&gt; variable is temporarily set according to &lt;code&gt;eval-expression-debug-on-error&lt;/code&gt;. If the latter variable is non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;debug-on-error&lt;/code&gt; will temporarily be set to &lt;code&gt;t&lt;/code&gt;. This means that any further errors that occur while doing a debugging session will (by default) trigger another backtrace. If this is not what you want, you can either set &lt;code&gt;eval-expression-debug-on-error&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;, or set &lt;code&gt;debug-on-error&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; in &lt;code&gt;debugger-mode-hook&lt;/code&gt;.</source>
          <target state="translated">输入调试器后，将根据 &lt;code&gt;eval-expression-debug-on-error&lt;/code&gt; 临时设置 &lt;code&gt;debug-on-error&lt;/code&gt; 变量。如果后一个变量为非 &lt;code&gt;nil&lt;/code&gt; ，则 &lt;code&gt;debug-on-error&lt;/code&gt; 将暂时设置为 &lt;code&gt;t&lt;/code&gt; 。这意味着在进行调试会话时发生的任何其他错误将（默认）触发另一个回溯。如果这不是您想要的，则可以在 &lt;code&gt;debugger-mode-hook&lt;/code&gt; 中将 &lt;code&gt;eval-expression-debug-on-error&lt;/code&gt; 设置为 &lt;code&gt;nil&lt;/code&gt; ，或者将 &lt;code&gt;debug-on-error&lt;/code&gt; 为 &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="116b487d24afef3c502923ab2671a73c01141758" translate="yes" xml:space="preserve">
          <source>When the debugger is entered, it displays the previously selected buffer in one window and a buffer named</source>
          <target state="translated">进入调试器后,在一个窗口中显示之前选择的缓冲区和一个名为</target>
        </trans-unit>
        <trans-unit id="1fc26a4083b90b099be3cf1a7e543139a468f085" translate="yes" xml:space="preserve">
          <source>When the developers of X labeled software distributors as &amp;ldquo;vendors&amp;rdquo;, they showed their false assumption that no system could ever be developed and distributed noncommercially.</source>
          <target state="translated">当X的开发人员将软件发行商标记为&amp;ldquo;供应商&amp;rdquo;时，他们表现出错误的假设，即没有系统可以非商业地开发和分发。</target>
        </trans-unit>
        <trans-unit id="868aa93cf62b554bd54442f30c7fbe16cecc3883" translate="yes" xml:space="preserve">
          <source>When the element-type is a &lt;code&gt;choice&lt;/code&gt;, you use &lt;code&gt;:inline&lt;/code&gt; not in the &lt;code&gt;choice&lt;/code&gt; itself, but in (some of) the alternatives of the &lt;code&gt;choice&lt;/code&gt;. For example, to match a list which must start with a file name, followed either by the symbol &lt;code&gt;t&lt;/code&gt; or two strings, use this customization type:</source>
          <target state="translated">当元素类型是一个 &lt;code&gt;choice&lt;/code&gt; ，你可以使用 &lt;code&gt;:inline&lt;/code&gt; 不能在 &lt;code&gt;choice&lt;/code&gt; 本身，而是在（一些）的替代 &lt;code&gt;choice&lt;/code&gt; 。例如，要匹配必须以文件名开头，后跟符号 &lt;code&gt;t&lt;/code&gt; 或两个字符串的列表，请使用以下定制类型：</target>
        </trans-unit>
        <trans-unit id="50f85733da0cca31724a927061810bc233cc29b7" translate="yes" xml:space="preserve">
          <source>When the first argument is &lt;code&gt;error&lt;/code&gt;, the debugger indicates that it is being entered because an error or &lt;code&gt;quit&lt;/code&gt; was signaled and not handled, by displaying &amp;lsquo;</source>
          <target state="translated">当第一参数为 &lt;code&gt;error&lt;/code&gt; ，调试程序指示它正被输入由于错误或 &lt;code&gt;quit&lt;/code&gt; 被发信号通知和没有被处理，通过显示'</target>
        </trans-unit>
        <trans-unit id="4aaff6bd65dbb250e1c7c10b992a01f561f55200" translate="yes" xml:space="preserve">
          <source>When the first argument is &lt;code&gt;exit&lt;/code&gt;, it indicates the exit of a stack frame previously marked to invoke the debugger on exit. The second argument given to &lt;code&gt;debug&lt;/code&gt; in this case is the value being returned from the frame. The debugger displays &amp;lsquo;</source>
          <target state="translated">当第一个参数是 &lt;code&gt;exit&lt;/code&gt; 时，它指示先前标记为在退出时调用调试器的堆栈帧的退出。在这种情况下，提供给 &lt;code&gt;debug&lt;/code&gt; 的第二个参数是从帧返回的值。调试器显示&amp;ldquo;</target>
        </trans-unit>
        <trans-unit id="2d2b82d4695d852dec34c98cac550f0643b2cad0" translate="yes" xml:space="preserve">
          <source>When the first argument is &lt;code&gt;t&lt;/code&gt;, this indicates a call to &lt;code&gt;debug&lt;/code&gt; due to evaluation of a function call form when &lt;code&gt;debug-on-next-call&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;. The debugger displays &amp;lsquo;</source>
          <target state="translated">当第一参数为 &lt;code&gt;t&lt;/code&gt; ，这表示一个呼叫 &lt;code&gt;debug&lt;/code&gt; 由于函数调用形式的评价当 &lt;code&gt;debug-on-next-call&lt;/code&gt; 是非 &lt;code&gt;nil&lt;/code&gt; 。调试器显示&amp;ldquo;</target>
        </trans-unit>
        <trans-unit id="437fb785eaff0110643951108b4c2601385f2eda" translate="yes" xml:space="preserve">
          <source>When the function &lt;code&gt;set-visited-file-name&lt;/code&gt; is called interactively, it prompts for &lt;var&gt;filename&lt;/var&gt; in the minibuffer.</source>
          <target state="translated">交互式调用 &lt;code&gt;set-visited-file-name&lt;/code&gt; 函数时，它将提示在迷你缓冲区中输入 &lt;var&gt;filename&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="88c8fa590b3fc15bf32a65bc9619b93076007948" translate="yes" xml:space="preserve">
          <source>When the key sequence consists of multiple events, key lookup processes the events sequentially: the binding of the first event is found, and must be a keymap; then the second event&amp;rsquo;s binding is found in that keymap, and so on until all the events in the key sequence are used up. (The binding thus found for the last event may or may not be a keymap.) Thus, the process of key lookup is defined in terms of a simpler process for looking up a single event in a keymap. How that is done depends on the type of object associated with the event in that keymap.</source>
          <target state="translated">当键序列包含多个事件时，键查找将按顺序处理事件：找到第一个事件的绑定，并且必须是一个键映射；然后在该键图中找到第二个事件的绑定，依此类推，直到键序列中的所有事件都用完。 （因此为最后一个事件找到的绑定可以是键映射，也可以不是键映射。）因此，键查找的过程是根据在键映射中查找单个事件的更简单过程来定义的。如何完成取决于与该键图中的事件关联的对象的类型。</target>
        </trans-unit>
        <trans-unit id="c78aa7d01e0f3dda797421d0f1e715ec1fc8cab9" translate="yes" xml:space="preserve">
          <source>When the last buffer position scanned was the (potential) first character of a two character construct (comment delimiter or escaped/char-quoted character pair), the &lt;var&gt;syntax-code&lt;/var&gt; (see &lt;a href=&quot;syntax-table-internals#Syntax-Table-Internals&quot;&gt;Syntax Table Internals&lt;/a&gt;) of that position. Otherwise &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">当最后扫描的缓冲区位置是两个字符构造（注释定界符或转义/字符引用的字符对）的（潜在）第一个字符时，该位置的 &lt;var&gt;syntax-code&lt;/var&gt; （请参见&lt;a href=&quot;syntax-table-internals#Syntax-Table-Internals&quot;&gt;语法表内部&lt;/a&gt;）。否则 &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="825967648fe4b8b05ea065a8874cda93ed1c6b99" translate="yes" xml:space="preserve">
          <source>When the length of a field is not fixed, it typically depends on the value of a preceding field. In this case, the length &lt;var&gt;len&lt;/var&gt; can be given either as a list &lt;code&gt;(&lt;var&gt;name&lt;/var&gt; ...)&lt;/code&gt; identifying a &lt;em&gt;field name&lt;/em&gt; in the format specified for &lt;code&gt;bindat-get-field&lt;/code&gt; below, or by an expression &lt;code&gt;(eval &lt;var&gt;form&lt;/var&gt;)&lt;/code&gt; where &lt;var&gt;form&lt;/var&gt; should evaluate to an integer, specifying the field length.</source>
          <target state="translated">当字段的长度不固定时，通常取决于前一个字段的值。在这种情况下，长度 &lt;var&gt;len&lt;/var&gt; 可以以列表 &lt;code&gt;(&lt;var&gt;name&lt;/var&gt; ...)&lt;/code&gt; 形式给出，该列表以下面为 &lt;code&gt;bindat-get-field&lt;/code&gt; 指定的格式标识&lt;em&gt;字段名称&lt;/em&gt;，或以表达式 &lt;code&gt;(eval &lt;var&gt;form&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;form&lt;/var&gt; ）给出，其中 &lt;var&gt;form&lt;/var&gt; 应计算为整数，指定字段长度。</target>
        </trans-unit>
        <trans-unit id="9aa6539eef0b2917849bccf8335e069d4701fcaf" translate="yes" xml:space="preserve">
          <source>When the list reaches &lt;code&gt;kill-ring-max&lt;/code&gt; entries in length, adding a new entry automatically deletes the last entry.</source>
          <target state="translated">当列表的长度达到 &lt;code&gt;kill-ring-max&lt;/code&gt; 条目时，添加新条目会自动删除最后一个条目。</target>
        </trans-unit>
        <trans-unit id="0f7bf8623de177bc6d5806aaa805e68bb56585b7" translate="yes" xml:space="preserve">
          <source>When the minibuffer is active, it is the next window if the selected window is the one at the bottom right corner. In this case, &lt;code&gt;scroll-other-window&lt;/code&gt; attempts to scroll the minibuffer. If the minibuffer contains just one line, it has nowhere to scroll to, so the line reappears after the echo area momentarily displays the message &amp;lsquo;</source>
          <target state="translated">当微型缓冲区处于活动状态时，如果所选窗口位于右下角，则为下一个窗口。在这种情况下， &lt;code&gt;scroll-other-window&lt;/code&gt; 会尝试滚动迷你缓冲区。如果小型缓冲区仅包含一行，则无处滚动，因此该行会在回显区域暂时显示消息&amp;ldquo;</target>
        </trans-unit>
        <trans-unit id="b511155a847eb0dd269cb9b74a381ee567232762" translate="yes" xml:space="preserve">
          <source>When the minor mode &lt;code&gt;cursor-intangible-mode&lt;/code&gt; is turned on, point is moved away from any position that has a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;cursor-intangible&lt;/code&gt; property, just before redisplay happens.</source>
          <target state="translated">当未成年人模式 &lt;code&gt;cursor-intangible-mode&lt;/code&gt; 开启时，点从具有非任意位置移动远离 &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;cursor-intangible&lt;/code&gt; 财产，重新显示发生之前。</target>
        </trans-unit>
        <trans-unit id="e67379465709e25367fcee329d3d8b8588cea3df" translate="yes" xml:space="preserve">
          <source>When the mode line refers to a variable which does not have a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;risky-local-variable&lt;/code&gt; property, any text properties given or specified within that variable&amp;rsquo;s values are ignored. This is because such properties could otherwise specify functions to be called, and those functions could come from file local variables.</source>
          <target state="translated">当模式线是指不具有非可变 &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;risky-local-variable&lt;/code&gt; 特性，该变量的值内给予或指定的任何文本属性被忽略。这是因为此类属性可以另外指定要调用的函数，而这些函数可能来自文件局部变量。</target>
        </trans-unit>
        <trans-unit id="867868a0f1c45320b706ebd1ebe235b75366cb8a" translate="yes" xml:space="preserve">
          <source>When the mouse pointer lies on a hot-spot area of an image, the &lt;var&gt;plist&lt;/var&gt; of that hot-spot is consulted; if it contains a &lt;code&gt;help-echo&lt;/code&gt; property, that defines a tool-tip for the hot-spot, and if it contains a &lt;code&gt;pointer&lt;/code&gt; property, that defines the shape of the mouse cursor when it is on the hot-spot. See &lt;a href=&quot;pointer-shape#Pointer-Shape&quot;&gt;Pointer Shape&lt;/a&gt;, for available pointer shapes.</source>
          <target state="translated">当鼠标指针位于上的图像的热点区域，则 &lt;var&gt;plist&lt;/var&gt; 中该热点的被咨询; 如果它包含 &lt;code&gt;help-echo&lt;/code&gt; 属性，则该属性定义热点的工具提示；如果它包含 &lt;code&gt;pointer&lt;/code&gt; 属性，则其定义鼠标光标在该热点上时的形状。见&lt;a href=&quot;pointer-shape#Pointer-Shape&quot;&gt;光标形状&lt;/a&gt;，可用指针的形状。</target>
        </trans-unit>
        <trans-unit id="72113dbbbb848882544104dd72c42be0c0e260c9" translate="yes" xml:space="preserve">
          <source>When the name of the terminal type contains a hyphen or underscore, and no library is found whose name is identical to the terminal&amp;rsquo;s name, Emacs strips from the terminal&amp;rsquo;s name the last hyphen or underscore and everything that follows it, and tries again. This process is repeated until Emacs finds a matching library, or until there are no more hyphens or underscores in the name (i.e., there is no terminal-specific library). For example, if the terminal name is &amp;lsquo;</source>
          <target state="translated">当终端类型的名称包含连字符或下划线，并且找不到名称与终端名称相同的库时，Emacs将从终端名称中去除最后一个连字符或下划线以及其后的所有内容，然后重试。重复此过程，直到Emacs找到匹配的库，或者名称中不再有连字符或下划线（即，没有特定于终端的库）为止。例如，如果终端名称为&amp;ldquo;</target>
        </trans-unit>
        <trans-unit id="08f7c1705d495e69780bc2bcc50f97a26e1059c3" translate="yes" xml:space="preserve">
          <source>When the optional argument &lt;var&gt;no-properties&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, this function strips text properties from the return value.</source>
          <target state="translated">当可选参数 &lt;var&gt;no-properties&lt;/var&gt; 为non - &lt;code&gt;nil&lt;/code&gt; 时，此函数从返回值中删除文本属性。</target>
        </trans-unit>
        <trans-unit id="1b74a1907b8b052e24ae5b68dcf685e26d16cb4b" translate="yes" xml:space="preserve">
          <source>When the paragraph already has two lines, the function next looks for a prefix candidate on the second line, in just the same way it did for the first line. If it doesn&amp;rsquo;t find one, it returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">当该段已经有两行时，该函数接下来将在第二行中查找候选前缀，就像在第一行中一样。如果找不到，则返回 &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f154952d92c35cb0658c37cf9dfc68160ea96f4" translate="yes" xml:space="preserve">
          <source>When the selected window is a member of a group of windows, this function returns a list of the windows in the group, ordered such that the first window in the list is displaying the earliest part of the buffer, and so on. Otherwise the function returns a list containing just the selected window.</source>
          <target state="translated">当选中的窗口是一组窗口的成员时,该函数返回一组窗口的列表,排序方式是列表中的第一个窗口显示缓冲区的最早部分,以此类推。否则,该函数返回一个只包含所选窗口的列表。</target>
        </trans-unit>
        <trans-unit id="7c1a91e1facfa16f4d1f57d01bd761ee745cfffc" translate="yes" xml:space="preserve">
          <source>When the selected window is the minibuffer, the next window is normally the leftmost one immediately above it. You can specify a different window to scroll, when the minibuffer is selected, by setting the variable &lt;code&gt;minibuffer-scroll-window&lt;/code&gt;. This variable has no effect when any other window is selected. When it is non-&lt;code&gt;nil&lt;/code&gt; and the minibuffer is selected, it takes precedence over &lt;code&gt;other-window-scroll-buffer&lt;/code&gt;. See &lt;a href=&quot;minibuffer-misc#Definition-of-minibuffer_002dscroll_002dwindow&quot;&gt;Definition of minibuffer-scroll-window&lt;/a&gt;.</source>
          <target state="translated">当所选择的窗口是迷你缓冲区，下一个窗口通常是最左边的一个立即它的上方。通过选择变量 &lt;code&gt;minibuffer-scroll-window&lt;/code&gt; ，可以在选择了迷你缓冲区时指定其他滚动窗口。选择任何其他窗口时，此变量无效。当它为非 &lt;code&gt;nil&lt;/code&gt; 并且选择了迷你缓冲区时，它将优先于 &lt;code&gt;other-window-scroll-buffer&lt;/code&gt; 。请参阅&lt;a href=&quot;minibuffer-misc#Definition-of-minibuffer_002dscroll_002dwindow&quot;&gt;minibuffer-scroll-window的定义&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="65b73cca993f2fe1cb5f748b78ef4aa722107d7b" translate="yes" xml:space="preserve">
          <source>When the session manager restarts a suspended session, it directs these applications to individually reload their saved state. It does this by specifying a special command-line argument that says what saved session to restore. For Emacs, this argument is &amp;lsquo;</source>
          <target state="translated">会话管理器重新启动挂起的会话时，它指示这些应用程序分别重新加载其保存的状态。它通过指定一个特殊的命令行参数来做到这一点，该参数指出要恢复的已保存会话。对于Emacs，此参数为'</target>
        </trans-unit>
        <trans-unit id="4e0bfac048c5fbdf0664b55932d085da1a85dae9" translate="yes" xml:space="preserve">
          <source>When the strings have different lengths, and they match up to the length of &lt;var&gt;string1&lt;/var&gt;, then the result is &lt;code&gt;t&lt;/code&gt;. If they match up to the length of &lt;var&gt;string2&lt;/var&gt;, the result is &lt;code&gt;nil&lt;/code&gt;. A string of no characters is less than any other string.</source>
          <target state="translated">当字符串具有不同的长度，并且匹配到 &lt;var&gt;string1&lt;/var&gt; 的长度时，则结果为 &lt;code&gt;t&lt;/code&gt; 。如果它们匹配到 &lt;var&gt;string2&lt;/var&gt; 的长度，则结果为 &lt;code&gt;nil&lt;/code&gt; 。没有字符的字符串小于任何其他字符串。</target>
        </trans-unit>
        <trans-unit id="af0300acfd03cbaa9a0a6bf99f2ac8060ee62768" translate="yes" xml:space="preserve">
          <source>When the syntax table is not flexible enough to specify the syntax of a language, you can override the syntax table for specific character occurrences in the buffer, by applying a &lt;code&gt;syntax-table&lt;/code&gt; text property. See &lt;a href=&quot;text-properties#Text-Properties&quot;&gt;Text Properties&lt;/a&gt;, for how to apply text properties.</source>
          <target state="translated">当语法表不够灵活以至无法指定语言的语法时，可以通过应用 &lt;code&gt;syntax-table&lt;/code&gt; text属性来覆盖缓冲区中特定字符出现的语法表。有关如何应用&lt;a href=&quot;text-properties#Text-Properties&quot;&gt;文本属性的信息&lt;/a&gt;，请参见文本属性。</target>
        </trans-unit>
        <trans-unit id="1db00d52e9bbcfea5035cd408802b3a0306b3dfc" translate="yes" xml:space="preserve">
          <source>When the user calls a completion command like &lt;code&gt;minibuffer-complete&lt;/code&gt; (see &lt;a href=&quot;completion-commands#Completion-Commands&quot;&gt;Completion Commands&lt;/a&gt;), Emacs looks for the first style listed in &lt;code&gt;completion-styles&lt;/code&gt; and calls its &lt;var&gt;try-completion&lt;/var&gt; function. If this function returns &lt;code&gt;nil&lt;/code&gt;, Emacs moves to the next listed completion style and calls its &lt;var&gt;try-completion&lt;/var&gt; function, and so on until one of the &lt;var&gt;try-completion&lt;/var&gt; functions successfully performs completion and returns a non-&lt;code&gt;nil&lt;/code&gt; value. A similar procedure is used for listing completions, via the &lt;var&gt;all-completions&lt;/var&gt; functions.</source>
          <target state="translated">当用户调用诸如 &lt;code&gt;minibuffer-complete&lt;/code&gt; 之类的完成命令（请参阅&lt;a href=&quot;completion-commands#Completion-Commands&quot;&gt;Completion Commands&lt;/a&gt;）时，Emacs会查找 &lt;code&gt;completion-styles&lt;/code&gt; 样式中列出的第一个样式，并调用其 &lt;var&gt;try-completion&lt;/var&gt; 函数。如果此函数返回 &lt;code&gt;nil&lt;/code&gt; ，则Emacs移至下一个列出的完成样式，并调用其 &lt;var&gt;try-completion&lt;/var&gt; 函数，依此类推，直到其中一个 &lt;var&gt;try-completion&lt;/var&gt; 函数成功执行完成并返回非 &lt;code&gt;nil&lt;/code&gt; 值。通过 &lt;var&gt;all-completions&lt;/var&gt; 功能，使用类似的过程来列出完成项。</target>
        </trans-unit>
        <trans-unit id="14f683f2a85a22a1e45fced6299295b17164ca51" translate="yes" xml:space="preserve">
          <source>When the user has found the desired alternative from the menu, he or she should type the corresponding character&amp;mdash;the one whose binding is that alternative.</source>
          <target state="translated">当用户从菜单中找到所需的替代项时，他或她应键入相应的字符-其绑定就是该替代项。</target>
        </trans-unit>
        <trans-unit id="9317c688985f82ebf84721bb442636b2f8139dd1" translate="yes" xml:space="preserve">
          <source>When the user is expected to enter input in the process buffer for transmission to the process, the process marker separates the new input from previous output.</source>
          <target state="translated">当用户要在进程缓冲区输入输入以便传送给进程时,进程标记将新的输入与先前的输出分开。</target>
        </trans-unit>
        <trans-unit id="ac010bcd028637555de6cf7eabeafb1cd4753b5c" translate="yes" xml:space="preserve">
          <source>When the user performs a double click, Emacs generates first an ordinary click event, and then a double-click event. Therefore, you must design the command binding of the double click event to assume that the single-click command has already run. It must produce the desired results of a double click, starting from the results of a single click.</source>
          <target state="translated">当用户执行双击时,Emacs会先生成一个普通的点击事件,然后再生成一个双击事件。因此,你必须设计双击事件的命令绑定,假设单击命令已经运行。它必须从单次点击的结果出发,产生双击的预期结果。</target>
        </trans-unit>
        <trans-unit id="42c946654a87e7d3b90db47be73a1375093f4282" translate="yes" xml:space="preserve">
          <source>When the user presses a mouse button and releases it at the same location, that generates a &lt;em&gt;click&lt;/em&gt; event. All mouse click event share the same format:</source>
          <target state="translated">当用户按下鼠标按钮并将其释放到相同位置时，将生成&lt;em&gt;单击&lt;/em&gt;事件。所有鼠标单击事件共享相同的格式：</target>
        </trans-unit>
        <trans-unit id="faec751060a4a3168faff64c732fb50f43804cfd" translate="yes" xml:space="preserve">
          <source>When the user responds with &lt;var&gt;char&lt;/var&gt;, &lt;code&gt;map-y-or-n-p&lt;/code&gt; calls &lt;var&gt;function&lt;/var&gt;. If it returns non-&lt;code&gt;nil&lt;/code&gt;, the object is considered acted upon, and &lt;code&gt;map-y-or-n-p&lt;/code&gt; advances to the next object in &lt;var&gt;list&lt;/var&gt;. If it returns &lt;code&gt;nil&lt;/code&gt;, the prompt is repeated for the same object.</source>
          <target state="translated">当用户使用 &lt;var&gt;char&lt;/var&gt; 响应时， &lt;code&gt;map-y-or-n-p&lt;/code&gt; 调用 &lt;var&gt;function&lt;/var&gt; 。如果返回non- &lt;code&gt;nil&lt;/code&gt; ，则认为该对象已作用，并且 &lt;code&gt;map-y-or-n-p&lt;/code&gt; 前进到 &lt;var&gt;list&lt;/var&gt; 中的下一个对象。如果返回 &lt;code&gt;nil&lt;/code&gt; ，则对同一对象重复提示。</target>
        </trans-unit>
        <trans-unit id="741ae86db3b85a667d27d7e6c6aae8b804c436b2" translate="yes" xml:space="preserve">
          <source>When the user supplies input, Emacs becomes non-idle while executing the input. Then it becomes idle again, and all the idle timers that are set up to repeat will subsequently run another time, one by one.</source>
          <target state="translated">当用户提供输入时,Emacs在执行输入的同时,会变成非空闲状态。然后又变成空闲状态,所有被设置为重复的空闲定时器随后会再运行一次,一个一个地运行。</target>
        </trans-unit>
        <trans-unit id="89716f5cb5eeb5b8c85a3590d36ec0859f4a7c29" translate="yes" xml:space="preserve">
          <source>When the user types a command to exit the minibuffer, &lt;code&gt;read-from-minibuffer&lt;/code&gt; constructs the return value from the text in the minibuffer. Normally it returns a string containing that text. However, if &lt;var&gt;read&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;read-from-minibuffer&lt;/code&gt; reads the text and returns the resulting Lisp object, unevaluated. (See &lt;a href=&quot;input-functions#Input-Functions&quot;&gt;Input Functions&lt;/a&gt;, for information about reading.)</source>
          <target state="translated">当用户键入命令以退出迷你缓冲区时， &lt;code&gt;read-from-minibuffer&lt;/code&gt; 将从迷你缓冲区中的文本构造返回值。通常，它返回包含该文本的字符串。但是，如果 &lt;var&gt;read&lt;/var&gt; 为非 &lt;code&gt;nil&lt;/code&gt; ，则 &lt;code&gt;read-from-minibuffer&lt;/code&gt; 读取文本并返回未评估的结果Lisp对象。（有关阅读的信息，请参见&lt;a href=&quot;input-functions#Input-Functions&quot;&gt;输入函数&lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="97f45c4ec31296ee422fe0b971089f7631eaa365" translate="yes" xml:space="preserve">
          <source>When the variable &lt;code&gt;cursor-sensor-inhibit&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the &lt;code&gt;cursor-intangible&lt;/code&gt; property and the &lt;code&gt;cursor-sensor-functions&lt;/code&gt; property (described below) are ignored.</source>
          <target state="translated">当变量 &lt;code&gt;cursor-sensor-inhibit&lt;/code&gt; 为 &lt;code&gt;nil&lt;/code&gt; 时， &lt;code&gt;cursor-intangible&lt;/code&gt; 属性和 &lt;code&gt;cursor-sensor-functions&lt;/code&gt; 属性（如下所述）将被忽略。</target>
        </trans-unit>
        <trans-unit id="2dde0528a1289ac3a5932cd0bf44f453463d97b7" translate="yes" xml:space="preserve">
          <source>When the variable &lt;code&gt;cursor-sensor-inhibit&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the &lt;code&gt;cursor-sensor-functions&lt;/code&gt; property is ignored.</source>
          <target state="translated">当变量 &lt;code&gt;cursor-sensor-inhibit&lt;/code&gt; 为 &lt;code&gt;nil&lt;/code&gt; 时， &lt;code&gt;cursor-sensor-functions&lt;/code&gt; 属性将被忽略。</target>
        </trans-unit>
        <trans-unit id="6144c35a4d6dfbb14e5c9c91910a7a2deb2b5670" translate="yes" xml:space="preserve">
          <source>When the variable &lt;code&gt;inhibit-point-motion-hooks&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt; (as it is by default), the &lt;code&gt;intangible&lt;/code&gt; property is ignored.</source>
          <target state="translated">当可变 &lt;code&gt;inhibit-point-motion-hooks&lt;/code&gt; 是非 &lt;code&gt;nil&lt;/code&gt; （因为它是通过缺省值）， &lt;code&gt;intangible&lt;/code&gt; 属性被忽略。</target>
        </trans-unit>
        <trans-unit id="ba305369b4288ce358505822a5c384bb32983af6" translate="yes" xml:space="preserve">
          <source>When these functions are called, &lt;code&gt;inhibit-modification-hooks&lt;/code&gt; is bound to non-&lt;code&gt;nil&lt;/code&gt;. If the functions modify the buffer, you might want to bind &lt;code&gt;inhibit-modification-hooks&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;, so as to cause the change hooks to run for these modifications. However, doing this may call your own change hook recursively, so be sure to prepare for that.</source>
          <target state="translated">调用这些函数时， &lt;code&gt;inhibit-modification-hooks&lt;/code&gt; 绑定到 &lt;code&gt;nil&lt;/code&gt; 。如果函数修改了缓冲区，则可能需要将 &lt;code&gt;inhibit-modification-hooks&lt;/code&gt; 绑定到 &lt;code&gt;nil&lt;/code&gt; ，以使变更挂钩针对这些修改运行。但是，这样做可能会递归调用您自己的更改挂钩，因此请确保为此做好准备。</target>
        </trans-unit>
        <trans-unit id="db50335fab79153d655d1d69d82d0d93bfc61107" translate="yes" xml:space="preserve">
          <source>When these functions are called, &lt;code&gt;inhibit-modification-hooks&lt;/code&gt; is bound to non-&lt;code&gt;nil&lt;/code&gt;. If the functions modify the buffer, you might want to bind &lt;code&gt;inhibit-modification-hooks&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;, so as to cause the change hooks to run for these modifications. However, doing this may call your own change hook recursively, so be sure to prepare for that. See &lt;a href=&quot;change-hooks#Change-Hooks&quot;&gt;Change Hooks&lt;/a&gt;.</source>
          <target state="translated">调用这些函数时， &lt;code&gt;inhibit-modification-hooks&lt;/code&gt; 绑定到 &lt;code&gt;nil&lt;/code&gt; 。如果函数修改了缓冲区，则可能需要将 &lt;code&gt;inhibit-modification-hooks&lt;/code&gt; 绑定到 &lt;code&gt;nil&lt;/code&gt; ，以使变更挂钩针对这些修改运行。但是，这样做可能会递归调用您自己的更改挂钩，因此请确保为此做好准备。请参阅&amp;ldquo;&lt;a href=&quot;change-hooks#Change-Hooks&quot;&gt;更改挂钩&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6b15446f7a271c0367154a83a6d06ed034256569" translate="yes" xml:space="preserve">
          <source>When this command is called interactively, it prompts for &lt;var&gt;filename&lt;/var&gt;.</source>
          <target state="translated">交互式调用此命令时，将提示输入 &lt;var&gt;filename&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="fed0c479d83fce5cc1e10bf3f041d1165c0811c5" translate="yes" xml:space="preserve">
          <source>When this function is called during the execution of a &lt;code&gt;delay-mode-hooks&lt;/code&gt; form, it does not run the hooks or &lt;code&gt;hack-local-variables&lt;/code&gt; or evaluate the forms immediately. Instead, it arranges for the next call to &lt;code&gt;run-mode-hooks&lt;/code&gt; to run them.</source>
          <target state="translated">在执行 &lt;code&gt;delay-mode-hooks&lt;/code&gt; 表单期间调用此函数时，它不会运行挂钩或 &lt;code&gt;hack-local-variables&lt;/code&gt; 或不立即评估表单。相反，它安排下一次调用 &lt;code&gt;run-mode-hooks&lt;/code&gt; 来运行它们。</target>
        </trans-unit>
        <trans-unit id="cba05056187d43b5da8624443810218851db7488" translate="yes" xml:space="preserve">
          <source>When this function is called interactively, &lt;var&gt;position&lt;/var&gt; is the numeric prefix argument, if provided; otherwise it is read from the minibuffer.</source>
          <target state="translated">以交互方式调用此函数时， &lt;var&gt;position&lt;/var&gt; 是数字前缀参数（如果提供）；否则，它将从小型缓冲区读取。</target>
        </trans-unit>
        <trans-unit id="596b547820cdaa6f0bcdaac5093b2c88521ba9b0" translate="yes" xml:space="preserve">
          <source>When this is &lt;code&gt;bidi&lt;/code&gt;, the drawing order is reversed if and only if the value of &lt;code&gt;bidi-paragraph-direction&lt;/code&gt; (see &lt;a href=&quot;bidirectional-display#Bidirectional-Display&quot;&gt;Bidirectional Display&lt;/a&gt;) is &lt;code&gt;right-to-left&lt;/code&gt; in the buffer displayed in the window most recently selected within the main window area of this frame. Sometimes that window may be hard to find, so heuristics are used to avoid that the drawing order changes inadvertently when another window gets selected.</source>
          <target state="translated">如果为 &lt;code&gt;bidi&lt;/code&gt; ，则且仅当在该窗口的主窗口区域中最近选择的窗口中显示的缓冲区中 &lt;code&gt;bidi-paragraph-direction&lt;/code&gt; （请参见&lt;a href=&quot;bidirectional-display#Bidirectional-Display&quot;&gt;Bidirectional Display&lt;/a&gt;）的值 &lt;code&gt;right-to-left&lt;/code&gt; 时，绘制顺序才反转帧。有时可能很难找到该窗口，因此使用启发式方法来避免在选择另一个窗口时意外改变了绘图顺序。</target>
        </trans-unit>
        <trans-unit id="3dad205ad2aecabde94354eb00231e56ad99a1c5" translate="yes" xml:space="preserve">
          <source>When this is called with &lt;code&gt;(inc x)&lt;/code&gt;, the argument &lt;var&gt;var&lt;/var&gt; is the symbol &lt;code&gt;x&lt;/code&gt;&amp;mdash;&lt;em&gt;not&lt;/em&gt; the &lt;em&gt;value&lt;/em&gt; of &lt;code&gt;x&lt;/code&gt;, as it would be in a function. The body of the macro uses this to construct the expansion, which is &lt;code&gt;(setq x (1+ x))&lt;/code&gt;. Once the macro definition returns this expansion, Lisp proceeds to evaluate it, thus incrementing &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">如果这就是所谓的有 &lt;code&gt;(inc x)&lt;/code&gt; ，参数 &lt;var&gt;var&lt;/var&gt; 是符号 &lt;code&gt;x&lt;/code&gt; -&lt;em&gt;不是&lt;/em&gt;该&lt;em&gt;值&lt;/em&gt;的 &lt;code&gt;x&lt;/code&gt; ，因为这将是一个函数。宏的主体使用它来构造扩展，即 &lt;code&gt;(setq x (1+ x))&lt;/code&gt; 。宏定义返回此扩展后，Lisp会对其求值，从而使 &lt;code&gt;x&lt;/code&gt; 递增。</target>
        </trans-unit>
        <trans-unit id="70ec9983d5d4c52908190215a3df6033c89819ff" translate="yes" xml:space="preserve">
          <source>When this is non-&lt;code&gt;nil&lt;/code&gt;, Emacs displays a special glyph in the fringe of each empty line at the end of the buffer, on graphical displays. See &lt;a href=&quot;fringes#Fringes&quot;&gt;Fringes&lt;/a&gt;. This variable is automatically buffer-local in every buffer.</source>
          <target state="translated">当此为非 &lt;code&gt;nil&lt;/code&gt; ，那么Emacs显示在缓冲器的末端每个空线的边缘一个特殊的字形，在图形显示。请参阅&lt;a href=&quot;fringes#Fringes&quot;&gt;边缘&lt;/a&gt;。此变量在每个缓冲区中自动为本地缓冲区。</target>
        </trans-unit>
        <trans-unit id="538e76672c08a7e7749673909c0c44f11608e76b" translate="yes" xml:space="preserve">
          <source>When this is non-&lt;code&gt;nil&lt;/code&gt;, all macro arguments will be instrumented in the generated code. For any macro, an &lt;code&gt;edebug-form-spec&lt;/code&gt; overrides this option. So to specify exceptions for macros that have some arguments evaluated and some not, use &lt;code&gt;def-edebug-spec&lt;/code&gt; to specify an &lt;code&gt;edebug-form-spec&lt;/code&gt;.</source>
          <target state="translated">如果此参数为非 &lt;code&gt;nil&lt;/code&gt; ，则所有宏参数都将插入生成的代码中。对于任何宏， &lt;code&gt;edebug-form-spec&lt;/code&gt; 都会覆盖此选项。因此，要为已评估某些参数而未评估某些参数的宏指定异常，请使用 &lt;code&gt;def-edebug-spec&lt;/code&gt; 指定 &lt;code&gt;edebug-form-spec&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de2b4a24778e77b285b4c2c9f14744354940bf00" translate="yes" xml:space="preserve">
          <source>When this is set non-&lt;code&gt;nil&lt;/code&gt;, an abbrev entered entirely in upper case is expanded using all upper case. Otherwise, an abbrev entered entirely in upper case is expanded by capitalizing each word of the expansion.</source>
          <target state="translated">如果将其设置为非 &lt;code&gt;nil&lt;/code&gt; ，则完全以大写形式输入的缩写将使用所有大写字母展开。否则，通过大写扩展中的每个单词来扩展完全以大写形式输入的缩写。</target>
        </trans-unit>
        <trans-unit id="41d0968ffa34e55de40f328d2e63e3f268a1d1c3" translate="yes" xml:space="preserve">
          <source>When this keyword is given, the &lt;var&gt;title&lt;/var&gt; string of the actions is interpreted as icon name.</source>
          <target state="translated">指定此关键字后，动作的 &lt;var&gt;title&lt;/var&gt; 字符串将解释为图标名称。</target>
        </trans-unit>
        <trans-unit id="d4c8a243d1bb8a9bda4f06cc416116ce664c6329" translate="yes" xml:space="preserve">
          <source>When this minor mode is enabled, windows showing a temporary buffer are automatically resized to fit their buffer&amp;rsquo;s contents.</source>
          <target state="translated">启用此次要模式后，显示临时缓冲区的窗口将自动调整大小以适合其缓冲区的内容。</target>
        </trans-unit>
        <trans-unit id="7aa9f8f7d9d30e1064e24ad0694a6eb136e28b2b" translate="yes" xml:space="preserve">
          <source>When this obsolete variable is non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;point-left&lt;/code&gt; and &lt;code&gt;point-entered&lt;/code&gt; hooks are not run, and the &lt;code&gt;intangible&lt;/code&gt; property has no effect. Do not set this variable globally; bind it with &lt;code&gt;let&lt;/code&gt;. Since the affected properties are obsolete, this variable&amp;rsquo;s default value is &lt;code&gt;t&lt;/code&gt;, to effectively disable them.</source>
          <target state="translated">当该过时的变量为 &lt;code&gt;nil&lt;/code&gt; 时，将不运行 &lt;code&gt;point-left&lt;/code&gt; 和 &lt;code&gt;point-entered&lt;/code&gt; 挂钩，并且 &lt;code&gt;intangible&lt;/code&gt; 属性无效。不要全局设置此变量；用 &lt;code&gt;let&lt;/code&gt; 绑定它。由于受影响的属性已过时，因此此变量的默认值为 &lt;code&gt;t&lt;/code&gt; ，以有效地禁用它们。</target>
        </trans-unit>
        <trans-unit id="ce5d9ccf3510c648f74876cddfb3f8fa432f414d" translate="yes" xml:space="preserve">
          <source>When this parameter is non-&lt;code&gt;nil&lt;/code&gt;, Emacs will by default make this frame invisible whenever the minibuffer (see &lt;a href=&quot;minibuffers#Minibuffers&quot;&gt;Minibuffers&lt;/a&gt;) is exited. Alternatively, it can specify the functions &lt;code&gt;iconify-frame&lt;/code&gt; and &lt;code&gt;delete-frame&lt;/code&gt;. This parameter is useful to make a child frame disappear automatically (similar to how Emacs deals with a window) when exiting the minibuffer.</source>
          <target state="translated">当此参数为非 &lt;code&gt;nil&lt;/code&gt; 时，无论何时退出&lt;a href=&quot;minibuffers#Minibuffers&quot;&gt;minibuffer&lt;/a&gt;（请参见Minibuffers），Emacs都会默认使该帧不可见。或者，它可以指定功能 &lt;code&gt;iconify-frame&lt;/code&gt; 和 &lt;code&gt;delete-frame&lt;/code&gt; 。退出迷你缓冲区时，此参数可用于使子框架自动消失（类似于Emacs处理窗口的方式）。</target>
        </trans-unit>
        <trans-unit id="65a370dce07b5f1356430e60c6962d6907472d6a" translate="yes" xml:space="preserve">
          <source>When this parameter specifies a function, that function will be called instead of the function specified by the variable &lt;code&gt;frame-auto-hide-function&lt;/code&gt; when quitting the frame&amp;rsquo;s only window (see &lt;a href=&quot;quitting-windows#Quitting-Windows&quot;&gt;Quitting Windows&lt;/a&gt;) and there are other frames left.</source>
          <target state="translated">当此参数指定一个函数时，在退出框架的唯一窗口（请参见&lt;a href=&quot;quitting-windows#Quitting-Windows&quot;&gt;退出Windows&lt;/a&gt;）并且还剩下其他框架时，将调用该函数，而不是由变量 &lt;code&gt;frame-auto-hide-function&lt;/code&gt; function指定的函数。</target>
        </trans-unit>
        <trans-unit id="ee3e7677010e786cb09365087ed57f54fcce0e2a" translate="yes" xml:space="preserve">
          <source>When this progress reporter is subsequently used, it will display &lt;var&gt;message&lt;/var&gt; in the echo area, followed by progress percentage. &lt;var&gt;message&lt;/var&gt; is treated as a simple string. If you need it to depend on a filename, for instance, use &lt;code&gt;format-message&lt;/code&gt; before calling this function.</source>
          <target state="translated">随后使用此进度报告程序时，它将在回显区域显示 &lt;var&gt;message&lt;/var&gt; ，后跟进度百分比。 &lt;var&gt;message&lt;/var&gt; 被视为简单字符串。例如，如果需要它依赖文件名，请在调用此函数之前使用 &lt;code&gt;format-message&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e061fdfe432d1444a6ef2c8ecfe8107d7e038ba0" translate="yes" xml:space="preserve">
          <source>When this variable is non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt; and related functions will not use the Echo Area to display messages.</source>
          <target state="translated">当此变量为非 &lt;code&gt;nil&lt;/code&gt; 时， &lt;code&gt;message&lt;/code&gt; 及其相关功能将不使用Echo Area显示消息。</target>
        </trans-unit>
        <trans-unit id="4021b690b71c815e17de814ae4283cefc26865b2" translate="yes" xml:space="preserve">
          <source>When this variable is non-&lt;code&gt;nil&lt;/code&gt;, Emacs does not create an error handler around process filter functions and sentinels. Therefore, errors in these functions also invoke the debugger. See &lt;a href=&quot;processes#Processes&quot;&gt;Processes&lt;/a&gt;.</source>
          <target state="translated">当此变量为非 &lt;code&gt;nil&lt;/code&gt; 时，Emacs不会围绕进程过滤器函数和标记来创建错误处理程序。因此，这些函数中的错误也会调用调试器。请参阅&lt;a href=&quot;processes#Processes&quot;&gt;流程&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5068bf891eebc3cb3bbda675336428c5e895d463" translate="yes" xml:space="preserve">
          <source>When this variable is non-&lt;code&gt;nil&lt;/code&gt;, it specifies a fill prefix to use for filling each warning&amp;rsquo;s text.</source>
          <target state="translated">当此变量为非 &lt;code&gt;nil&lt;/code&gt; 时，它将指定用于填充每个警告文本的填充前缀。</target>
        </trans-unit>
        <trans-unit id="81ca35ca79ea45a3fbfe9c0787260d134bf307a1" translate="yes" xml:space="preserve">
          <source>When this variable is non-&lt;code&gt;nil&lt;/code&gt;, no end-of-line conversion is done, no matter which coding system is specified. This applies to all the Emacs I/O and subprocess primitives, and to the explicit encoding and decoding functions (see &lt;a href=&quot;explicit-encoding#Explicit-Encoding&quot;&gt;Explicit Encoding&lt;/a&gt;).</source>
          <target state="translated">当此变量为非 &lt;code&gt;nil&lt;/code&gt; 时，无论指定哪种编码系统，都不会进行行尾转换。这适用于所有Emacs I / O和子流程原语，以及显式编码和解码功能（请参阅&lt;a href=&quot;explicit-encoding#Explicit-Encoding&quot;&gt;Explicit Encoding&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="8687cb3c3b79cbfcb026745e0f9f09477f64a956" translate="yes" xml:space="preserve">
          <source>When this variable is set to &lt;code&gt;nil&lt;/code&gt;, cached values are never expired. Use this setting with caution, only if you are sure nothing other than Emacs ever changes the remote files. If it is set to &lt;code&gt;t&lt;/code&gt;, cached values are never used. This is the safest value, but could result in performance degradation.</source>
          <target state="translated">当此变量设置为 &lt;code&gt;nil&lt;/code&gt; 时，缓存的值永不过期。仅当您确定除Emacs以外的其他任何东西都不能更改远程文件时，请谨慎使用此设置。如果将其设置为 &lt;code&gt;t&lt;/code&gt; ，则永远不会使用缓存的值。这是最安全的值，但可能导致性能下降。</target>
        </trans-unit>
        <trans-unit id="ab0579fa2fce2dc10de79c7ad712aaa99c2337cb" translate="yes" xml:space="preserve">
          <source>When to Use Autoload</source>
          <target state="translated">何时使用自动加载</target>
        </trans-unit>
        <trans-unit id="3ed62392e425d09f177ad5809b0daa952ff79ca8" translate="yes" xml:space="preserve">
          <source>When to Use Autoload.</source>
          <target state="translated">何时使用自动加载。</target>
        </trans-unit>
        <trans-unit id="fdf6d344287a175c6a8967387442678350b04d03" translate="yes" xml:space="preserve">
          <source>When trace recording is enabled, each function entry and exit adds lines to the trace buffer. A function entry record consists of &amp;lsquo;</source>
          <target state="translated">启用跟踪记录后，每个功能入口和出口都会向跟踪缓冲区添加行。功能条目记录由&amp;ldquo;</target>
        </trans-unit>
        <trans-unit id="834ea781fa499fac97ca17a9fe5554133e348a79" translate="yes" xml:space="preserve">
          <source>When two users edit the same file at the same time, they are likely to interfere with each other. Emacs tries to prevent this situation from arising by recording a &lt;em&gt;file lock&lt;/em&gt; when a file is being modified. Emacs can then detect the first attempt to modify a buffer visiting a file that is locked by another Emacs job, and ask the user what to do. The file lock is really a file, a symbolic link with a special name, stored in the same directory as the file you are editing. The name is constructed by prepending</source>
          <target state="translated">当两个用户同时编辑同一文件时，他们很可能会相互干扰。Emacs试图通过在修改&lt;em&gt;文件&lt;/em&gt;时记录&lt;em&gt;文件锁定&lt;/em&gt;来防止这种情况的发生。然后，Emacs可以检测到第一次尝试修改访问另一个Emacs作业锁定的文件的缓冲区的操作，并询问用户该怎么做。文件锁实际上是一个文件，具有特殊名称的符号链接，与您正在编辑的文件存储在同一目录中。名称是由前缀构成的</target>
        </trans-unit>
        <trans-unit id="5bc6bfbf01248a0c2fbe9946e76e0bc18182e404" translate="yes" xml:space="preserve">
          <source>When used interactively, this command will set the height of the currently selected frame to the number of lines specified by the numeric prefix.</source>
          <target state="translated">当交互式使用时,该命令将把当前所选框架的高度设置为数字前缀所指定的行数。</target>
        </trans-unit>
        <trans-unit id="5cafc503dcb04c5c70f5d47179201c8f2874b550" translate="yes" xml:space="preserve">
          <source>When used interactively, this command will set the width of the currently selected frame to the number of columns specified by the numeric prefix.</source>
          <target state="translated">当交互式使用时,该命令将把当前所选框架的宽度设置为数字前缀指定的列数。</target>
        </trans-unit>
        <trans-unit id="df05d2e62b078fec8b896bb8287c2d4222c3b139" translate="yes" xml:space="preserve">
          <source>When using X, you can specify what the &lt;code&gt;text&lt;/code&gt; pointer style really looks like by setting the variable &lt;code&gt;x-pointer-shape&lt;/code&gt;.</source>
          <target state="translated">使用X时，可以通过设置变量 &lt;code&gt;x-pointer-shape&lt;/code&gt; 来指定 &lt;code&gt;text&lt;/code&gt; 指针样式的外观。</target>
        </trans-unit>
        <trans-unit id="e9b92ac174a5019eef5c2e0102afe0200a8ed13b" translate="yes" xml:space="preserve">
          <source>When using a text terminal, only one frame can be displayed at a time on the terminal, so after a call to &lt;code&gt;select-frame&lt;/code&gt;, the next redisplay actually displays the newly selected frame. This frame remains selected until a subsequent call to &lt;code&gt;select-frame&lt;/code&gt;. Each frame on a text terminal has a number which appears in the mode line before the buffer name (see &lt;a href=&quot;mode-line-variables#Mode-Line-Variables&quot;&gt;Mode Line Variables&lt;/a&gt;).</source>
          <target state="translated">使用文本终端时，一次只能在终端上显示一帧，因此在调用 &lt;code&gt;select-frame&lt;/code&gt; 之后，下一次重新显示实际上会显示新选择的帧。该帧将保持选中状态，直到随后调用 &lt;code&gt;select-frame&lt;/code&gt; 为止。文本终端上的每个帧都有一个数字，该数字出现在模式行中的缓冲区名称之前（请参阅&lt;a href=&quot;mode-line-variables#Mode-Line-Variables&quot;&gt;模式行变量&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="1fb240f590926f4790a778103dba455bb7437554" translate="yes" xml:space="preserve">
          <source>When using a window system, the program can press any of the modifier keys in this way. Otherwise, only the</source>
          <target state="translated">当使用窗口系统时,程序可以通过这种方式按下任何一个修改键。否则,只能按</target>
        </trans-unit>
        <trans-unit id="743e4b1bde33abccc30e27027d01b2d431af1429" translate="yes" xml:space="preserve">
          <source>When using aliases in menus, often it is useful to display the equivalent key bindings for the real command name, not the aliases (which typically don&amp;rsquo;t have any key bindings except for the menu itself). To request this, give the alias symbol a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;menu-alias&lt;/code&gt; property. Thus,</source>
          <target state="translated">在菜单中使用别名时，通常有用的是显示真实命令名称的等效键绑定，而不是别名（除了菜单本身，别名通常没有任何键绑定）。要请求此请求，请为别名符号赋予 &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;menu-alias&lt;/code&gt; 属性。从而，</target>
        </trans-unit>
        <trans-unit id="2255f628b701429ffde71421b986144bd381a09c" translate="yes" xml:space="preserve">
          <source>When using this hook to save buffers that are not visiting files (for instance, special-mode buffers), keep in mind that, if the function fails to save correctly and returns a &lt;code&gt;nil&lt;/code&gt; value, &lt;code&gt;save-buffer&lt;/code&gt; will go on to prompt the user for a file to save the buffer in. If this is undesirable, consider having the function fail by raising an error.</source>
          <target state="translated">使用此钩子保存不访问文件的缓冲区（例如，特殊模式的缓冲区）时，请记住，如果函数无法正确保存并返回 &lt;code&gt;nil&lt;/code&gt; 值，则 &lt;code&gt;save-buffer&lt;/code&gt; 将继续提示用户用于保存缓冲区的文件。如果不希望这样做，请考虑通过引发错误使函数失败。</target>
        </trans-unit>
        <trans-unit id="52d9ebeef7f578e57680b4e7adf0127d0fce594f" translate="yes" xml:space="preserve">
          <source>When we added support for larger basic character codes beyond 127, and additional modifier bits, we had to change the representation of meta characters. Now the flag that represents the Meta modifier in a character is 2**27 and such numbers cannot be included in a string.</source>
          <target state="translated">当我们增加了对超过127的更大的基本字符代码的支持,以及额外的修饰位时,我们不得不改变元字符的表示方法。现在,在字符中表示元修饰符的标志是2**27,这样的数字不能包含在字符串中。</target>
        </trans-unit>
        <trans-unit id="5c65e6c00ce9da8e43ad1a0dd48d10b0a70b6e63" translate="yes" xml:space="preserve">
          <source>When windows that display buffers associated with process change their dimensions, the affected processes should be told about these changes. By default, when the window configuration changes, Emacs will automatically call &lt;code&gt;set-process-window-size&lt;/code&gt; on behalf of every process whose buffer is displayed in a window, passing it the smallest dimensions of all the windows displaying the process&amp;rsquo;s buffer. This works via &lt;code&gt;window-configuration-change-hook&lt;/code&gt; (see &lt;a href=&quot;window-hooks#Window-Hooks&quot;&gt;Window Hooks&lt;/a&gt;), which is told to invoke the function that is the value of the variable &lt;code&gt;window-adjust-process-window-size-function&lt;/code&gt; for each process whose buffer is displayed in at least one window. You can customize this behavior by setting the value of that variable.</source>
          <target state="translated">当显示与流程关联的缓冲区的窗口更改尺寸时，应将这些更改告知受影响的流程。默认情况下，当窗口配置更改时，Emacs会代表每个缓冲区显示在窗口中 &lt;code&gt;set-process-window-size&lt;/code&gt; 自动调用set-process-window-size，并向其传递显示该进程缓冲区的所有窗口中的最小尺寸。这是通过 &lt;code&gt;window-configuration-change-hook&lt;/code&gt; （请参阅&lt;a href=&quot;window-hooks#Window-Hooks&quot;&gt;Window Hooks&lt;/a&gt;）工作的，它被告知为缓冲区显示在以下位置的每个进程调用该函数，该函数是变量 &lt;code&gt;window-adjust-process-window-size-function&lt;/code&gt; 的值。至少一个窗口。您可以通过设置该变量的值来自定义此行为。</target>
        </trans-unit>
        <trans-unit id="06746e6b5df68fb0c28eb425241d6ff6da24c050" translate="yes" xml:space="preserve">
          <source>When writing a Lisp function, do &lt;em&gt;not&lt;/em&gt; rely on this behavior of the command loop to restore the current buffer after an operation. Editing commands can also be called as Lisp functions by other programs, not just from the command loop; it is convenient for the caller if the subroutine does not change which buffer is current (unless, of course, that is the subroutine&amp;rsquo;s purpose).</source>
          <target state="translated">当编写一个Lisp的功能，也&lt;em&gt;没有&lt;/em&gt;依靠命令循环的这种行为在手术后恢复当前的缓冲区。编辑命令也可以被其他程序称为Lisp函数，而不仅仅是从命令循环开始。如果子例程不更改哪个缓冲区是当前缓冲区，调用者会很方便（当然，除非这是子例程的目的）。</target>
        </trans-unit>
        <trans-unit id="699d5342c4bf3085a86ab0f7d9279ec17f711cd4" translate="yes" xml:space="preserve">
          <source>When writing an application, you should normally use &lt;code&gt;display-buffer&lt;/code&gt; (see &lt;a href=&quot;choosing-window#Choosing-Window&quot;&gt;Choosing Window&lt;/a&gt;) or the higher-level functions described in &lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;Switching Buffers&lt;/a&gt;, instead of calling &lt;code&gt;set-window-buffer&lt;/code&gt; directly.</source>
          <target state="translated">在编写应用程序时，通常应使用 &lt;code&gt;display-buffer&lt;/code&gt; （请参阅&lt;a href=&quot;choosing-window#Choosing-Window&quot;&gt;选择窗口&lt;/a&gt;）或&amp;ldquo;&lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;切换缓冲区&amp;rdquo;中&lt;/a&gt;描述的高级功能，而不是直接调用 &lt;code&gt;set-window-buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c82038cf5b058ded1e983cec027be8a019d1723f" translate="yes" xml:space="preserve">
          <source>When writing the forms in a Lisp library file, keep in mind that the file might be loaded more than once. For example, think about whether each variable should be reinitialized when you reload the library; &lt;code&gt;defvar&lt;/code&gt; does not change the value if the variable is already initialized. (See &lt;a href=&quot;defining-variables#Defining-Variables&quot;&gt;Defining Variables&lt;/a&gt;.)</source>
          <target state="translated">在Lisp库文件中编写表单时，请记住该文件可能被加载了多次。例如，考虑重新加载库时是否应重新初始化每个变量；如果变量已初始化，则 &lt;code&gt;defvar&lt;/code&gt; 不会更改该值。（请参阅&lt;a href=&quot;defining-variables#Defining-Variables&quot;&gt;定义变量&lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="382b15cd020a2d009645451fcf8e7fed06614cd0" translate="yes" xml:space="preserve">
          <source>When you access files using NFS, there may be a small probability that you and another user will both lock the same file simultaneously. If this happens, it is possible for the two users to make changes simultaneously, but Emacs will still warn the user who saves second. Also, the detection of modification of a buffer visiting a file changed on disk catches some cases of simultaneous editing; see &lt;a href=&quot;modification-time#Modification-Time&quot;&gt;Modification Time&lt;/a&gt;.</source>
          <target state="translated">当您使用NFS访问文件时，您和另一个用户同时锁定同一文件的可能性很小。如果发生这种情况，两个用户有可能同时进行更改，但是Emacs仍会警告保存第二个用户。同样，检测到访问磁盘上已更改文件的缓冲区的修改会引起某些同时编辑的情况。请参阅&lt;a href=&quot;modification-time#Modification-Time&quot;&gt;修改时间&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0bc690f6f6404e9a83bedaa30fd2ec320db85c84" translate="yes" xml:space="preserve">
          <source>When you add an association to a hash table and the table is full, it grows automatically. This value specifies how to make the hash table larger, at that time.</source>
          <target state="translated">当你向哈希表添加关联,表满了,它就会自动增长。这个值指定了如何使哈希表变大,当时。</target>
        </trans-unit>
        <trans-unit id="f5f338d0f03189daa964f980d00248ed9d67844e" translate="yes" xml:space="preserve">
          <source>When you add an element to &lt;code&gt;minor-mode-alist&lt;/code&gt;, use &lt;code&gt;assq&lt;/code&gt; to check for an existing element, to avoid duplication. For example:</source>
          <target state="translated">将元素添加到 &lt;code&gt;minor-mode-alist&lt;/code&gt; 时，请使用 &lt;code&gt;assq&lt;/code&gt; 检查现有元素，以避免重复。例如：</target>
        </trans-unit>
        <trans-unit id="3b7dc1a49eeb6202c3978c8353b9e37c0e990fc3" translate="yes" xml:space="preserve">
          <source>When you call &lt;code&gt;make-frame&lt;/code&gt;, you should specify a non-&lt;code&gt;nil&lt;/code&gt; value for this parameter if the values of the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; parameters represent the user&amp;rsquo;s stated preference; otherwise, use &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">当调用 &lt;code&gt;make-frame&lt;/code&gt; 时，如果 &lt;code&gt;left&lt;/code&gt; 和 &lt;code&gt;top&lt;/code&gt; 参数的值表示用户指定的首选项，则应为此参数指定一个非 &lt;code&gt;nil&lt;/code&gt; 值；否则，请使用 &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c9a0f4eb4f88581582ff9d8911f62ecfaf9f852" translate="yes" xml:space="preserve">
          <source>When you call a function that may search, you may need to save and restore the match data around that call, if you want to preserve the match data from an earlier search for later use. Here is an example that shows the problem that arises if you fail to save the match data:</source>
          <target state="translated">当你调用一个可能搜索的函数时,如果你想保存之前搜索的匹配数据供以后使用,你可能需要保存和恢复该调用周围的匹配数据。下面是一个例子,说明了如果没有保存匹配数据会出现的问题。</target>
        </trans-unit>
        <trans-unit id="8adf75ef3b7d98de1964eb6600f9c9a22a53218a" translate="yes" xml:space="preserve">
          <source>When you call the filling functions interactively, using a prefix argument implies the value &lt;code&gt;full&lt;/code&gt; for &lt;var&gt;justify&lt;/var&gt;.</source>
          <target state="translated">当您以交互方式调用填充功能，使用前缀参数意味着价值 &lt;code&gt;full&lt;/code&gt; 的 &lt;var&gt;justify&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="7cfab4b20b6c663c69d9cbc3db830f5a8762989f" translate="yes" xml:space="preserve">
          <source>When you change the value of this variable, the new value does not take effect in an existing buffer until the next time auto-save mode is reenabled in it. If auto-save mode is already enabled, auto-saves continue to go in the same file name until &lt;code&gt;auto-save-mode&lt;/code&gt; is called again.</source>
          <target state="translated">当您更改此变量的值时，新值将在现有缓冲区中生效，直到下一次在其中重新启用自动保存模式。如果已经启用自动保存模式，则自动保存将继续使用相同的文件名，直到再次调用 &lt;code&gt;auto-save-mode&lt;/code&gt; 为止。</target>
        </trans-unit>
        <trans-unit id="f5d2fa55b53970ef1e24e90fb466cf91b6bfbaff" translate="yes" xml:space="preserve">
          <source>When you click the mouse when the mouse pointer is over a hot-spot, an event is composed by combining the &lt;var&gt;id&lt;/var&gt; of the hot-spot with the mouse event; for instance, &lt;code&gt;[area4 mouse-1]&lt;/code&gt; if the hot-spot&amp;rsquo;s &lt;var&gt;id&lt;/var&gt; is &lt;code&gt;area4&lt;/code&gt;.</source>
          <target state="translated">当鼠标指针悬停在热点上时单击鼠标时，将热点 &lt;var&gt;id&lt;/var&gt; 与鼠标事件组合在一起组成一个事件；例如，如果热点的 &lt;var&gt;id&lt;/var&gt; 为 &lt;code&gt;area4&lt;/code&gt; ,则为 &lt;code&gt;[area4 mouse-1]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6d3ba12b14f1396bca73837bdcf2f3e95ccefc5b" translate="yes" xml:space="preserve">
          <source>When you compile a file, you can optionally enable the &lt;em&gt;dynamic function loading&lt;/em&gt; feature (also known as &lt;em&gt;lazy loading&lt;/em&gt;). With dynamic function loading, loading the file doesn&amp;rsquo;t fully read the function definitions in the file. Instead, each function definition contains a place-holder which refers to the file. The first time each function is called, it reads the full definition from the file, to replace the place-holder.</source>
          <target state="translated">编译文件时，可以选择启用&lt;em&gt;动态函数加载&lt;/em&gt;功能（也称为&lt;em&gt;延迟加载&lt;/em&gt;）。使用动态函数加载时，加载文件不会完全读取文件中的函数定义。而是，每个函数定义都包含一个引用文件的占位符。第一次调用每个函数时，它将从文件中读取完整定义，以替换占位符。</target>
        </trans-unit>
        <trans-unit id="8308354e56a292ba74b0e5ee1a6b1a8bb32c4bca" translate="yes" xml:space="preserve">
          <source>When you create a frame and specify its screen position with the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; parameters, use this parameter to say whether the specified position was user-specified (explicitly requested in some way by a human user) or merely program-specified (chosen by a program). A non-&lt;code&gt;nil&lt;/code&gt; value says the position was user-specified.</source>
          <target state="translated">创建框架并使用 &lt;code&gt;left&lt;/code&gt; 和 &lt;code&gt;top&lt;/code&gt; 参数指定其屏幕位置时，请使用此参数说明指定位置是用户指定的（人类用户以某种方式明确要求的）还是仅是程序指定的（由用户选择的）程序）。阿非 &lt;code&gt;nil&lt;/code&gt; 值表示的位置是用户指定的。</target>
        </trans-unit>
        <trans-unit id="6216690caef48b451a547d4473f7640a85757634" translate="yes" xml:space="preserve">
          <source>When you create a local binding for a variable, that binding takes effect only within a limited portion of the program (see &lt;a href=&quot;local-variables#Local-Variables&quot;&gt;Local Variables&lt;/a&gt;). This section describes exactly what this means.</source>
          <target state="translated">当为变量创建本地绑定时，该绑定仅在程序的有限部分内有效（请参见&lt;a href=&quot;local-variables#Local-Variables&quot;&gt;Local Variables&lt;/a&gt;）。本节准确描述了这意味着什么。</target>
        </trans-unit>
        <trans-unit id="ae6ddb6b4899f10919c333c5ad4b6f0c875117cc" translate="yes" xml:space="preserve">
          <source>When you create a new marker, you can make it point nowhere, or point to the present position of point, or to the beginning or end of the accessible portion of the buffer, or to the same place as another given marker.</source>
          <target state="translated">当你创建一个新的标记时,你可以让它无处可指,或指向点的当前位置,或指向缓冲区可访问部分的开始或结束,或指向与另一个给定标记相同的地方。</target>
        </trans-unit>
        <trans-unit id="bc07e734d3ee625873ceb670d1e297bf66f905b7" translate="yes" xml:space="preserve">
          <source>When you create a window, or display a different buffer in it, the display-start position is set to a display-start position recently used for the same buffer, or to &lt;code&gt;point-min&lt;/code&gt; if the buffer doesn&amp;rsquo;t have any.</source>
          <target state="translated">创建窗口或在其中显示其他缓冲区时，显示起始位置将设置为最近用于同一缓冲区的显示起始位置，如果没有缓冲区，则设置为 &lt;code&gt;point-min&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1f14104fde1b22ca43537088f2503e50d4d6208d" translate="yes" xml:space="preserve">
          <source>When you create an array, other than a char-table, you must specify its length. You cannot specify the length of a char-table, because that is determined by the range of character codes.</source>
          <target state="translated">当你创建一个数组,而不是一个字符表时,你必须指定它的长度,你不能指定一个字符表的长度,因为那是由字符代码的范围决定的。你不能指定char-table的长度,因为这是由字符代码的范围决定的。</target>
        </trans-unit>
        <trans-unit id="f498d932b50abb178ecbeec8eb4b30ad419fb787" translate="yes" xml:space="preserve">
          <source>When you create the frame, you can explicitly specify its minibuffer window (in some other frame) with the &lt;code&gt;minibuffer&lt;/code&gt; frame parameter (see &lt;a href=&quot;buffer-parameters#Buffer-Parameters&quot;&gt;Buffer Parameters&lt;/a&gt;). If you don&amp;rsquo;t, then the minibuffer is found in the frame which is the value of the variable &lt;code&gt;default-minibuffer-frame&lt;/code&gt;. Its value should be a frame that does have a minibuffer.</source>
          <target state="translated">创建框架时，可以使用 &lt;code&gt;minibuffer&lt;/code&gt; frame参数（请参见&lt;a href=&quot;buffer-parameters#Buffer-Parameters&quot;&gt;Buffer Parameters&lt;/a&gt;）显式指定其minibuffer窗口（在其他框架中）。如果不这样做，则在帧中找到最小缓冲区，它是变量 &lt;code&gt;default-minibuffer-frame&lt;/code&gt; 的值。它的值应该是确实具有迷你缓冲区的帧。</target>
        </trans-unit>
        <trans-unit id="a4c7bd55ccf34c0d514c7fbbf83e872160c62ddb" translate="yes" xml:space="preserve">
          <source>When you define a major mode using &lt;code&gt;define-derived-mode&lt;/code&gt;, it automatically makes sure these conventions are followed. If you define a major mode &amp;ldquo;by hand&amp;rdquo;, not using &lt;code&gt;define-derived-mode&lt;/code&gt;, use the following functions to handle these conventions automatically.</source>
          <target state="translated">使用 &lt;code&gt;define-derived-mode&lt;/code&gt; 定义主要模式时，它会自动确保遵循这些约定。如果您是&amp;ldquo;手动&amp;rdquo;定义主要模式，而不是使用 &lt;code&gt;define-derived-mode&lt;/code&gt; ，请使用以下功能自动处理这些约定。</target>
        </trans-unit>
        <trans-unit id="dfbf91163ec659ba66214fef082c1b87b2196d04" translate="yes" xml:space="preserve">
          <source>When you define a user option with &lt;code&gt;defcustom&lt;/code&gt;, you must specify its &lt;em&gt;customization type&lt;/em&gt;. That is a Lisp object which describes (1) which values are legitimate and (2) how to display the value in the customization buffer for editing.</source>
          <target state="translated">使用 &lt;code&gt;defcustom&lt;/code&gt; 定义用户选项时，必须指定其&lt;em&gt;自定义类型&lt;/em&gt;。这是一个Lisp对象，它描述（1）哪些值是合法的，以及（2）如何在定制缓冲区中显示该值以进行编辑。</target>
        </trans-unit>
        <trans-unit id="a9ef6e1fd038c8fa62c42e173a11f9fc1cc461a7" translate="yes" xml:space="preserve">
          <source>When you define a variable whose value is a function, or a list of functions, use a name that ends in &amp;lsquo;</source>
          <target state="translated">当您定义变量的值为函数或函数列表时，请使用以'结尾的名称</target>
        </trans-unit>
        <trans-unit id="3d1a6d288d8bfcd06e684f9ee90b340e528a3d00" translate="yes" xml:space="preserve">
          <source>When you define a variable, always consider whether you should mark it as safe or risky; see &lt;a href=&quot;file-local-variables#File-Local-Variables&quot;&gt;File Local Variables&lt;/a&gt;.</source>
          <target state="translated">定义变量时，请始终考虑应将其标记为安全还是有风险；请参阅&lt;a href=&quot;file-local-variables#File-Local-Variables&quot;&gt;文件局部变量&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="089dfe2b00a702a3713c6ffc6f296f35b798e416" translate="yes" xml:space="preserve">
          <source>When you do insertion with inheritance, &lt;em&gt;which&lt;/em&gt; properties are inherited, and from where, depends on which properties are &lt;em&gt;sticky&lt;/em&gt;. Insertion after a character inherits those of its properties that are &lt;em&gt;rear-sticky&lt;/em&gt;. Insertion before a character inherits those of its properties that are &lt;em&gt;front-sticky&lt;/em&gt;. When both sides offer different sticky values for the same property, the previous character&amp;rsquo;s value takes precedence.</source>
          <target state="translated">使用继承插入时，&lt;em&gt;哪些&lt;/em&gt;属性是继承的，从哪里继承的，取决于哪些属性是&lt;em&gt;粘滞的&lt;/em&gt;。在字符后插入将继承&lt;em&gt;其后粘&lt;/em&gt;属性。在字符之前插入会继承其&lt;em&gt;前粘特性&lt;/em&gt;。当双方为同一属性提供不同的粘性值时，前一个字符的值优先。</target>
        </trans-unit>
        <trans-unit id="37b7fd18304bc6eb9c8301a24ddc05493f27d27f" translate="yes" xml:space="preserve">
          <source>When you edit a file in Emacs, you are actually working on a buffer that is visiting that file&amp;mdash;that is, the contents of the file are copied into the buffer and the copy is what you edit. Changes to the buffer do not change the file until you &lt;em&gt;save&lt;/em&gt; the buffer, which means copying the contents of the buffer into the file. Buffers which are not visiting a file can still be &amp;ldquo;saved&amp;rdquo;, in a sense, using functions in the buffer-local &lt;code&gt;write-contents-functions&lt;/code&gt; hook.</source>
          <target state="translated">在Emacs中编辑文件时，实际上是在访问该文件的缓冲区上工作-也就是说，文件的内容被复制到缓冲区中，而副本就是您所编辑的。对缓冲区所做的更改在&lt;em&gt;保存&lt;/em&gt;缓冲区之前不会更改文件，这意味着将缓冲区的内容复制到文件中。从某种意义上说，仍可以使用buffer-local &lt;code&gt;write-contents-functions&lt;/code&gt; 挂钩中的函数来&amp;ldquo;保存&amp;rdquo;未访问文件的缓冲区。</target>
        </trans-unit>
        <trans-unit id="7f427de0f7b199c666b32e125fa591ceef64dc1a" translate="yes" xml:space="preserve">
          <source>When you enter a new Edebug level, Edebug will normally stop at the first instrumented function it encounters. If you prefer to stop only at a break point, or not at all (for example, when gathering coverage data), change the value of &lt;code&gt;edebug-initial-mode&lt;/code&gt; from its default &lt;code&gt;step&lt;/code&gt; to &lt;code&gt;go&lt;/code&gt;, or &lt;code&gt;Go-nonstop&lt;/code&gt;, or one of its other values (see &lt;a href=&quot;edebug-options#Edebug-Options&quot;&gt;Edebug Options&lt;/a&gt;). You can do this readily with</source>
          <target state="translated">当您输入新的Edebug级别时，Edebug通常会在遇到的第一个检测功能处停止。如果您希望仅在断点处停止，或者根本不停止（例如，在收集coverage数据时）， &lt;code&gt;edebug-initial-mode&lt;/code&gt; 的值从其默认 &lt;code&gt;step&lt;/code&gt; 更改为 &lt;code&gt;go&lt;/code&gt; 或 &lt;code&gt;Go-nonstop&lt;/code&gt; nonstop或其中之一其他值（请参阅&lt;a href=&quot;edebug-options#Edebug-Options&quot;&gt;Edebug选项&lt;/a&gt;）。您可以轻松地做到这一点</target>
        </trans-unit>
        <trans-unit id="940d8ca82d6954332936bae37ad5371c634676bd" translate="yes" xml:space="preserve">
          <source>When you evaluate a &lt;code&gt;defcustom&lt;/code&gt; form with</source>
          <target state="translated">当您使用评估 &lt;code&gt;defcustom&lt;/code&gt; 表单时</target>
        </trans-unit>
        <trans-unit id="d5707edb8d3bfbb1a648002d26ade65f6366c3b8" translate="yes" xml:space="preserve">
          <source>When you evaluate a top-level &lt;code&gt;defvar&lt;/code&gt; form with</source>
          <target state="translated">当您使用以下命令评估顶级 &lt;code&gt;defvar&lt;/code&gt; 表单时</target>
        </trans-unit>
        <trans-unit id="c02e2bd19a86bb2d429aa5ecdbb164c754d42b8b" translate="yes" xml:space="preserve">
          <source>When you evaluate an expression interactively, the Lisp interpreter first reads the textual representation of it, producing a Lisp object, and then evaluates that object (see &lt;a href=&quot;evaluation#Evaluation&quot;&gt;Evaluation&lt;/a&gt;). However, evaluation and reading are separate activities. Reading returns the Lisp object represented by the text that is read; the object may or may not be evaluated later. See &lt;a href=&quot;input-functions#Input-Functions&quot;&gt;Input Functions&lt;/a&gt;, for a description of &lt;code&gt;read&lt;/code&gt;, the basic function for reading objects.</source>
          <target state="translated">在以交互方式评估表达式时，Lisp解释器首先读取该表达式的文本表示形式，生成Lisp对象，然后评估该对象（请参阅&lt;a href=&quot;evaluation#Evaluation&quot;&gt;Evaluation&lt;/a&gt;）。但是，评估和阅读是分开的活动。读取返回由读取的文本表示的Lisp对象；该对象以后可能会评估，也可能不会评估。有关 &lt;code&gt;read&lt;/code&gt; 的说明，请参见&lt;a href=&quot;input-functions#Input-Functions&quot;&gt;输入函数&lt;/a&gt;，读取是读取对象的基本功能。</target>
        </trans-unit>
        <trans-unit id="71e2c1e3e799c338bea9e1fae2a8af5c0b8b11e8" translate="yes" xml:space="preserve">
          <source>When you have a series of similar questions to ask, such as &amp;ldquo;Do you want to save this buffer?&amp;rdquo; for each buffer in turn, you should use &lt;code&gt;map-y-or-n-p&lt;/code&gt; to ask the collection of questions, rather than asking each question individually. This gives the user certain convenient facilities such as the ability to answer the whole series at once.</source>
          <target state="translated">当您要提出一系列类似的问题时，例如&amp;ldquo;是否要保存此缓冲区？&amp;rdquo; 对于每个缓冲区，您应该使用 &lt;code&gt;map-y-or-n-p&lt;/code&gt; 来询问问题的集合，而不是单独询问每个问题。这为用户提供了一些便利的功能，例如可以立即回答整个系列。</target>
        </trans-unit>
        <trans-unit id="db140447ee8174a2469e79f3a449481bef9eb597" translate="yes" xml:space="preserve">
          <source>When you have to look at the contents of a key sequence that might be a string, use &lt;code&gt;listify-key-sequence&lt;/code&gt; (see &lt;a href=&quot;event-input-misc#Event-Input-Misc&quot;&gt;Event Input Misc&lt;/a&gt;) first, to convert it to a list.</source>
          <target state="translated">当您必须查看可能是字符串的键序列的内容时，请首先使用 &lt;code&gt;listify-key-sequence&lt;/code&gt; （请参阅&lt;a href=&quot;event-input-misc#Event-Input-Misc&quot;&gt;Event Input Misc&lt;/a&gt;），将其转换为列表。</target>
        </trans-unit>
        <trans-unit id="fa1c1f94288fba61082beac1e047b620c6c5c4e8" translate="yes" xml:space="preserve">
          <source>When you insert a new item in an existing menu, you probably want to put it in a particular place among the menu&amp;rsquo;s existing items. If you use &lt;code&gt;define-key&lt;/code&gt; to add the item, it normally goes at the front of the menu. To put it elsewhere in the menu, use &lt;code&gt;define-key-after&lt;/code&gt;:</source>
          <target state="translated">在现有菜单中插入新项目时，您可能希望将其放在菜单中现有项目中的特定位置。如果使用 &lt;code&gt;define-key&lt;/code&gt; 来添加项目，则该项目通常位于菜单的前面。要将其放在菜单中的其他位置，请使用 &lt;code&gt;define-key-after&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="4ace45c3d17a404d7ddc45441ae3c56685ab458e" translate="yes" xml:space="preserve">
          <source>When you insert text directly at the place where a marker points, there are two possible ways to relocate that marker: it can point before the inserted text, or point after it. You can specify which one a given marker should do by setting its &lt;em&gt;insertion type&lt;/em&gt;. Note that use of &lt;code&gt;insert-before-markers&lt;/code&gt; ignores markers&amp;rsquo; insertion types, always relocating a marker to point after the inserted text.</source>
          <target state="translated">当您直接在标记指向的位置插入文本时，有两种方法可以重新放置该标记：它可以指向插入的文本之前，也可以指向之后。您可以通过设置标记的&lt;em&gt;插入类型&lt;/em&gt;来指定给定标记应执行的操作。请注意，使用 &lt;code&gt;insert-before-markers&lt;/code&gt; 忽略标记的插入类型，始终将标记重新定位为指向插入文本之后。</target>
        </trans-unit>
        <trans-unit id="1376d36136c03ac766ebe953a082636da9bce32c" translate="yes" xml:space="preserve">
          <source>When you introduce a new group into Emacs, use the &lt;code&gt;:version&lt;/code&gt; keyword in the &lt;code&gt;defgroup&lt;/code&gt;; then you need not use it for the individual members of the group.</source>
          <target state="translated">当您向Emacs中引入新组时，请在 &lt;code&gt;defgroup&lt;/code&gt; 中使用 &lt;code&gt;:version&lt;/code&gt; 关键字；那么您无需将其用于组中的各个成员。</target>
        </trans-unit>
        <trans-unit id="dc2f909a65ee1114b4a704963febe2d4ed0ef40c" translate="yes" xml:space="preserve">
          <source>When you invoke command</source>
          <target state="translated">当你调用命令</target>
        </trans-unit>
        <trans-unit id="9e70d8400e251f1195c63d2550e6a672fed619c6" translate="yes" xml:space="preserve">
          <source>When you load or reload files, bear in mind that the &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;load-library&lt;/code&gt; functions automatically load a byte-compiled file rather than a non-compiled file of similar name. If you rewrite a file that you intend to save and reinstall, you need to byte-compile the new version; otherwise Emacs will load the older, byte-compiled file instead of your newer, non-compiled file! If that happens, the message displayed when loading the file includes, &amp;lsquo;</source>
          <target state="translated">加载或重新加载文件时，请记住， &lt;code&gt;load&lt;/code&gt; 和 &lt;code&gt;load-library&lt;/code&gt; 功能会自动加载字节编译的文件，而不是类似名称的未编译的文件。如果重写了要保存并重新安装的文件，则需要对新版本进行字节编译；否则，请执行以下操作。否则，Emacs将加载较旧的字节编译文件，而不是较新的未编译文件！如果发生这种情况，则在加载文件时显示的消息包括&amp;ldquo;</target>
        </trans-unit>
        <trans-unit id="2e43dc75880c5e42db7ee1d9da0158991a0b03f8" translate="yes" xml:space="preserve">
          <source>When you move to this item with &lt;code&gt;widget-forward&lt;/code&gt; or &lt;code&gt;widget-backward&lt;/code&gt;, it will display the string &lt;var&gt;motion-doc&lt;/var&gt; in the echo area. In addition, &lt;var&gt;motion-doc&lt;/var&gt; is used as the mouse &lt;code&gt;help-echo&lt;/code&gt; string and may actually be a function or form evaluated to yield a help string. If it is a function, it is called with one argument, the widget.</source>
          <target state="translated">当您使用 &lt;code&gt;widget-forward&lt;/code&gt; 或 &lt;code&gt;widget-backward&lt;/code&gt; 移至此项目时，它将在回显区域中显示字符串 &lt;var&gt;motion-doc&lt;/var&gt; 。此外， &lt;var&gt;motion-doc&lt;/var&gt; 用作鼠标 &lt;code&gt;help-echo&lt;/code&gt; 字符串，并且实际上可以是经过评估产生帮助字符串的函数或形式。如果它是一个函数，则使用一个参数即小部件来调用它。</target>
        </trans-unit>
        <trans-unit id="6f87e825d0eb5cf4f1104ba14fafbc8b0f0b6158" translate="yes" xml:space="preserve">
          <source>When you need to modify a function defined in another library, or when you need to modify a hook like &lt;code&gt;&lt;var&gt;foo&lt;/var&gt;-function&lt;/code&gt;, a process filter, or basically any variable or object field which holds a function value, you can use the appropriate setter function, such as &lt;code&gt;fset&lt;/code&gt; or &lt;code&gt;defun&lt;/code&gt; for named functions, &lt;code&gt;setq&lt;/code&gt; for hook variables, or &lt;code&gt;set-process-filter&lt;/code&gt; for process filters, but those are often too blunt, completely throwing away the previous value.</source>
          <target state="translated">如果您需要修改在另一个库中定义的函数，或者需要修改诸如 &lt;code&gt;&lt;var&gt;foo&lt;/var&gt;-function&lt;/code&gt; ，进程过滤器之类的钩子，或者基本上是任何包含函数值的变量或对象字段，则可以使用适当的setter函数，如 &lt;code&gt;fset&lt;/code&gt; 或 &lt;code&gt;defun&lt;/code&gt; 定义为命名的功能， &lt;code&gt;setq&lt;/code&gt; 对钩变量，或 &lt;code&gt;set-process-filter&lt;/code&gt; 工艺过滤器，但这些往往过于生硬，完全扔掉以前的值。</target>
        </trans-unit>
        <trans-unit id="a39b71d5d4babed1c190cd88fc543b454b1a30a9" translate="yes" xml:space="preserve">
          <source>When you run Emacs, it enters the &lt;em&gt;editor command loop&lt;/em&gt; almost immediately. This loop reads key sequences, executes their definitions, and displays the results. In this chapter, we describe how these things are done, and the subroutines that allow Lisp programs to do them.</source>
          <target state="translated">当您运行Emacs时，它几乎立即进入&lt;em&gt;编辑器命令循环&lt;/em&gt;。此循环读取键序列，执行其定义并显示结果。在本章中，我们描述如何完成这些事情，以及允许Lisp程序执行这些操作的子例程。</target>
        </trans-unit>
        <trans-unit id="bcb11ba33e37d812266385875ce1818f6c3b5d98" translate="yes" xml:space="preserve">
          <source>When you signal an error, you specify an &lt;em&gt;error symbol&lt;/em&gt; to specify the kind of error you have in mind. Each error has one and only one error symbol to categorize it. This is the finest classification of errors defined by the Emacs Lisp language.</source>
          <target state="translated">当您发出错误信号时，您可以指定一个&lt;em&gt;错误符号&lt;/em&gt;来指定您要记住的错误类型。每个错误都有一个且只有一个错误符号可以对其进行分类。这是Emacs Lisp语言定义的错误的最佳分类。</target>
        </trans-unit>
        <trans-unit id="b793737cfa50e1afd7288a0b029662a6368a275c" translate="yes" xml:space="preserve">
          <source>When you start Emacs, it normally attempts to load your &lt;em&gt;init file&lt;/em&gt;. This is either a file named</source>
          <target state="translated">启动Emacs时，它通常会尝试加载您的&lt;em&gt;init文件&lt;/em&gt;。这是一个名为</target>
        </trans-unit>
        <trans-unit id="c8ff56c98c659b4c2a82cbf9d308d3140f1a11bd" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;:group&lt;/code&gt; in a &lt;code&gt;defgroup&lt;/code&gt;, it makes the new group a subgroup of &lt;var&gt;group&lt;/var&gt;.</source>
          <target state="translated">在 &lt;code&gt;defgroup&lt;/code&gt; 中使用 &lt;code&gt;:group&lt;/code&gt; 时，它将使新组成为group的子 &lt;var&gt;group&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="9394c249d0193b7bb56563b934fca6beb80699b7" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;compute-motion&lt;/code&gt; for the minibuffer, you need to use &lt;code&gt;minibuffer-prompt-width&lt;/code&gt; to get the horizontal position of the beginning of the first screen line. See &lt;a href=&quot;minibuffer-contents#Minibuffer-Contents&quot;&gt;Minibuffer Contents&lt;/a&gt;.</source>
          <target state="translated">当您对微型缓冲区使用 &lt;code&gt;compute-motion&lt;/code&gt; 时，需要使用 &lt;code&gt;minibuffer-prompt-width&lt;/code&gt; 来获取第一条屏幕行开始处的水平位置。请参阅&lt;a href=&quot;minibuffer-contents#Minibuffer-Contents&quot;&gt;最小缓冲区内容&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9553413c3f23b971e4db382ac958c06f8af34a3d" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;frame-parameter&lt;/code&gt; to query the value of either of these two frame parameters, the return value is always an integer. When using &lt;code&gt;set-frame-parameter&lt;/code&gt;, passing a &lt;code&gt;nil&lt;/code&gt; value imposes an actual default value of 8 pixels.</source>
          <target state="translated">当使用 &lt;code&gt;frame-parameter&lt;/code&gt; 查询这两个框架参数中的任何一个的值时，返回值始终是整数。使用 &lt;code&gt;set-frame-parameter&lt;/code&gt; 时，传递 &lt;code&gt;nil&lt;/code&gt; 值会施加8个像素的实际默认值。</target>
        </trans-unit>
        <trans-unit id="44103a26b593a1a072ebe4f6ac9f1f8d807f5700" translate="yes" xml:space="preserve">
          <source>When you use the command</source>
          <target state="translated">当你使用命令</target>
        </trans-unit>
        <trans-unit id="b8ad75dd6a50d9891847f305b97c9d0dcb7f39a5" translate="yes" xml:space="preserve">
          <source>When you use the read syntax &amp;lsquo;</source>
          <target state="translated">当您使用读取语法时，</target>
        </trans-unit>
        <trans-unit id="b41758871c41b9129acbafdd3508fda1aa612647" translate="yes" xml:space="preserve">
          <source>When you visit a file whose expanded file name (see &lt;a href=&quot;file-name-expansion#File-Name-Expansion&quot;&gt;File Name Expansion&lt;/a&gt;), with version numbers and backup suffixes removed using &lt;code&gt;file-name-sans-versions&lt;/code&gt; (see &lt;a href=&quot;file-name-components#File-Name-Components&quot;&gt;File Name Components&lt;/a&gt;), matches a &lt;var&gt;regexp&lt;/var&gt;, &lt;code&gt;set-auto-mode&lt;/code&gt; calls the corresponding &lt;var&gt;mode-function&lt;/var&gt;. This feature enables Emacs to select the proper major mode for most files.</source>
          <target state="translated">当您访问其扩展文件名（请参见&lt;a href=&quot;file-name-expansion#File-Name-Expansion&quot;&gt;文件名扩展&lt;/a&gt;）（使用 &lt;code&gt;file-name-sans-versions&lt;/code&gt; 删除版本号和备份后缀）的文件（与&lt;a href=&quot;file-name-components#File-Name-Components&quot;&gt;文件名Components&lt;/a&gt;匹配）与 &lt;var&gt;regexp&lt;/var&gt; 匹配时， &lt;code&gt;set-auto-mode&lt;/code&gt; 会调用相应的 &lt;var&gt;mode-function&lt;/var&gt; 。此功能使Emacs可以为大多数文件选择适当的主模式。</target>
        </trans-unit>
        <trans-unit id="c40090d6c39f85f238b391a1e2407892e201a9c6" translate="yes" xml:space="preserve">
          <source>When you want to get rid of a window used for displaying a buffer, you can call &lt;code&gt;delete-window&lt;/code&gt; or &lt;code&gt;delete-windows-on&lt;/code&gt; (see &lt;a href=&quot;deleting-windows#Deleting-Windows&quot;&gt;Deleting Windows&lt;/a&gt;) to remove that window from its frame. If the buffer is shown on a separate frame, you might want to call &lt;code&gt;delete-frame&lt;/code&gt; (see &lt;a href=&quot;deleting-frames#Deleting-Frames&quot;&gt;Deleting Frames&lt;/a&gt;) instead. If, on the other hand, a window has been reused for displaying the buffer, you might prefer showing the buffer previously shown in that window, by calling the function &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; (see &lt;a href=&quot;window-history#Window-History&quot;&gt;Window History&lt;/a&gt;). Finally, you might want to either bury (see &lt;a href=&quot;buffer-list#Buffer-List&quot;&gt;Buffer List&lt;/a&gt;) or kill (see &lt;a href=&quot;killing-buffers#Killing-Buffers&quot;&gt;Killing Buffers&lt;/a&gt;) the window&amp;rsquo;s buffer.</source>
          <target state="translated">当要摆脱用于显示缓冲区的窗口时，可以调用 &lt;code&gt;delete-window&lt;/code&gt; 或 &lt;code&gt;delete-windows-on&lt;/code&gt; （请参阅&lt;a href=&quot;deleting-windows#Deleting-Windows&quot;&gt;Deleting Windows&lt;/a&gt;）将其从其框架中删除。如果缓冲区显示在单独的框架上，则可能需要调用 &lt;code&gt;delete-frame&lt;/code&gt; （请参阅&lt;a href=&quot;deleting-frames#Deleting-Frames&quot;&gt;Deleting Frames&lt;/a&gt;）。另一方面，如果窗口已被重新用于显示缓冲区，则您可能更喜欢通过调用 &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; 函数来显示该窗口中先前显示的缓冲区（请参见&lt;a href=&quot;window-history#Window-History&quot;&gt;Window History&lt;/a&gt;）。最后，您可能想要埋入（请参见&lt;a href=&quot;buffer-list#Buffer-List&quot;&gt;Buffer List&lt;/a&gt;）或杀死（请参见&lt;a href=&quot;killing-buffers#Killing-Buffers&quot;&gt;Killing Buffers&lt;/a&gt;）窗口缓冲区。</target>
        </trans-unit>
        <trans-unit id="707ae37eb58de80b6c30a330553423c84bd2692d" translate="yes" xml:space="preserve">
          <source>When you write a list as an expression in your program, you specify which function to call, and how many arguments to give it, in the text of the program. Usually that&amp;rsquo;s just what you want. Occasionally you need to compute at run time which function to call. To do that, use the function &lt;code&gt;funcall&lt;/code&gt;. When you also need to determine at run time how many arguments to pass, use &lt;code&gt;apply&lt;/code&gt;.</source>
          <target state="translated">当您在程序中将列表作为表达式编写时，您可以在程序的文本中指定要调用的函数以及为其指定多少个参数。通常，这就是您想要的。有时您需要在运行时计算要调用的函数。为此，请使用 &lt;code&gt;funcall&lt;/code&gt; 函数。当您还需要在运行时确定要传递多少个参数时，请使用 &lt;code&gt;apply&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="874bbfe629036b3a6d9635eb5f25968f20745e46" translate="yes" xml:space="preserve">
          <source>When you write a selectively displayed buffer into a file, all the control-m&amp;rsquo;s are output as newlines. This means that when you next read in the file, it looks OK, with nothing hidden. The selective display effect is seen only within Emacs.</source>
          <target state="translated">当您将选择性显示的缓冲区写入文件时，所有的control-m都将以换行符的形式输出。这意味着，当您下次读入文件时，它看起来不错，没有任何隐藏内容。选择性显示效果仅在Emacs中可见。</target>
        </trans-unit>
        <trans-unit id="b53fd76361fdcb42e825a91e2de7846b8aa8e17c" translate="yes" xml:space="preserve">
          <source>When your program encounters invalid input data, it can either signal a Lisp error by calling &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;signal&lt;/code&gt; or report a warning with severity &lt;code&gt;:error&lt;/code&gt;. Signaling a Lisp error is the easiest thing to do, but it means the program cannot continue processing. If you want to take the trouble to implement a way to continue processing despite the bad data, then reporting a warning of severity &lt;code&gt;:error&lt;/code&gt; is the right way to inform the user of the problem. For instance, the Emacs Lisp byte compiler can report an error that way and continue compiling other functions. (If the program signals a Lisp error and then handles it with &lt;code&gt;condition-case&lt;/code&gt;, the user won&amp;rsquo;t see the error message; it could show the message to the user by reporting it as a warning.)</source>
          <target state="translated">当您的程序遇到无效的输入数据时，它可以通过调用 &lt;code&gt;error&lt;/code&gt; 来表示Lisp错误，或者可以 &lt;code&gt;signal&lt;/code&gt; 或以严重性 &lt;code&gt;:error&lt;/code&gt; 报告警告。发出Lisp错误信号是最容易的事情，但这意味着程序无法继续处理。如果您想麻烦地实施一种尽管有坏数据也可以继续处理的方法，那么报告严重性 &lt;code&gt;:error&lt;/code&gt; 是将问题通知用户的正确方法。例如，Emacs Lisp字节编译器可以以这种方式报告错误并继续编译其他功能。（如果程序发出Lisp错误信号，然后根据 &lt;code&gt;condition-case&lt;/code&gt; 处理，用户将不会看到错误消息；它可以通过将其报告为警告来向用户显示该消息。）</target>
        </trans-unit>
        <trans-unit id="66c78cc9e204ca6eccaf9a3e94bebe32de83cbaf" translate="yes" xml:space="preserve">
          <source>Whenever Edebug is entered, it needs to save and restore certain data before even deciding whether to make trace information or stop the program.</source>
          <target state="translated">每当进入Edebug时,它需要保存和恢复某些数据,甚至决定是否制作跟踪信息或停止程序。</target>
        </trans-unit>
        <trans-unit id="25e25ae381cb2fae34d659db4a0640b5794226a9" translate="yes" xml:space="preserve">
          <source>Whenever Emacs starts up, it automatically calls the function &lt;code&gt;package-activate-all&lt;/code&gt; to make installed packages available to the current session. This is done after loading the early init file, but before loading the regular init file (see &lt;a href=&quot;startup-summary#Startup-Summary&quot;&gt;Startup Summary&lt;/a&gt;). Packages are not automatically made available if the user option &lt;code&gt;package-enable-at-startup&lt;/code&gt; is set to &lt;code&gt;nil&lt;/code&gt; in the early init file.</source>
          <target state="translated">每当Emacs启动时，它都会自动调用函数 &lt;code&gt;package-activate-all&lt;/code&gt; 使已安装的软件包可用于当前会话。这是在加载早期init文件之后但在加载常规init文件之前完成的（请参阅&amp;ldquo;&lt;a href=&quot;startup-summary#Startup-Summary&quot;&gt;启动摘要&amp;rdquo;&lt;/a&gt;）。如果用户选项 &lt;code&gt;package-enable-at-startup&lt;/code&gt; 在早期init文件中设置为 &lt;code&gt;nil&lt;/code&gt; ，则不会自动使软件包可用。</target>
        </trans-unit>
        <trans-unit id="43b31733a33654bdd2805cbb8407b551234cd747" translate="yes" xml:space="preserve">
          <source>Whenever Font Lock mode performs syntactic fontification on a stretch of text, it first calls the function specified by &lt;code&gt;syntax-propertize-function&lt;/code&gt;. Major modes can use this to apply &lt;code&gt;syntax-table&lt;/code&gt; text properties to override the buffer&amp;rsquo;s syntax table in special cases. See &lt;a href=&quot;syntax-properties#Syntax-Properties&quot;&gt;Syntax Properties&lt;/a&gt;.</source>
          <target state="translated">每当&amp;ldquo;字体锁定&amp;rdquo;模式对一段文本执行语法字体化时，它都会首先调用由 &lt;code&gt;syntax-propertize-function&lt;/code&gt; 专有功能指定的函数。在特殊情况下，主要模式可以使用它来应用 &lt;code&gt;syntax-table&lt;/code&gt; 文本属性以覆盖缓冲区的语法表。请参见&lt;a href=&quot;syntax-properties#Syntax-Properties&quot;&gt;语法属性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9701532f8ac11b4570ffcf320b2ed064240dd127" translate="yes" xml:space="preserve">
          <source>Whenever you change the sort direction in Tabulated List buffers, this indicator toggles between ascending (&amp;ldquo;asc&amp;rdquo;) and descending (&amp;ldquo;desc&amp;rdquo;).</source>
          <target state="translated">每当您在列表列表缓冲区中更改排序方向时，此指示符便会在升序（&amp;ldquo; asc&amp;rdquo;）和降序（&amp;ldquo; desc&amp;rdquo;）之间切换。</target>
        </trans-unit>
        <trans-unit id="3e1bafb7630a8bc5ab2531e22bb1081e38243747" translate="yes" xml:space="preserve">
          <source>Where a &lt;var&gt;button&lt;/var&gt; parameter is specified, it means an object referring to a specific button, either an overlay (for overlay buttons), or a buffer-position or marker (for text property buttons). Such an object is passed as the first argument to a button&amp;rsquo;s invocation function when it is invoked.</source>
          <target state="translated">在指定 &lt;var&gt;button&lt;/var&gt; 参数的情况下，它表示引用特定按钮的对象，该对象可以是叠加（对于叠加按钮）或缓冲区位置或标记（对于文本属性按钮）。此类对象在被调用时作为第一个参数传递给按钮的调用函数。</target>
        </trans-unit>
        <trans-unit id="d02666e8ab0c39778c99525936a2eaabd73b0532" translate="yes" xml:space="preserve">
          <source>Where doc strings are defined and stored.</source>
          <target state="translated">在这里定义和存储doc字符串。</target>
        </trans-unit>
        <trans-unit id="3f4813623d55184860c5f6a01f4e228c1283117a" translate="yes" xml:space="preserve">
          <source>Where exactly paragraphs start and end, for the purpose of the Emacs</source>
          <target state="translated">段落到底从哪里开始,从哪里结束,为了Emacs</target>
        </trans-unit>
        <trans-unit id="ba39325c6742aa442576d455038d87a41dd28808" translate="yes" xml:space="preserve">
          <source>Where removed text sometimes is saved for later use.</source>
          <target state="translated">其中删除的文字有时会被保存下来,以备日后使用。</target>
        </trans-unit>
        <trans-unit id="5462eb41ab2f1c98473618bced8fdcf5d18a95ce" translate="yes" xml:space="preserve">
          <source>Whether a child frame can have a menu or tool bar is window-system or window manager dependent. Most window-systems explicitly disallow menu bars for child frames. It seems advisable to disable both, menu and tool bars, via the frame&amp;rsquo;s initial parameters settings.</source>
          <target state="translated">子框架是否可以具有菜单或工具栏取决于窗口系统或窗口管理器。大多数窗口系统明确禁止子框架使用菜单栏。似乎建议通过框架的初始参数设置禁用菜单栏和工具栏。</target>
        </trans-unit>
        <trans-unit id="a101caa7a5eec779be4af1d0623f1d986489dd25" translate="yes" xml:space="preserve">
          <source>Whether or not a box should be drawn around characters, its color, the width of the box lines, and 3D appearance. Here are the possible values of the &lt;code&gt;:box&lt;/code&gt; attribute, and what they mean:</source>
          <target state="translated">是否应在字符，其颜色，框线的宽度和3D外观周围绘制框。以下是 &lt;code&gt;:box&lt;/code&gt; 属性的可能值及其含义：</target>
        </trans-unit>
        <trans-unit id="cd3ff50be6d445e1a4ed9f70f6f9b1bb63841a38" translate="yes" xml:space="preserve">
          <source>Whether or not characters should be displayed in inverse video. The value should be &lt;code&gt;t&lt;/code&gt; (yes) or &lt;code&gt;nil&lt;/code&gt; (no).</source>
          <target state="translated">字符是否应显示在反向视频中。该值应为 &lt;code&gt;t&lt;/code&gt; （是）或 &lt;code&gt;nil&lt;/code&gt; （否）。</target>
        </trans-unit>
        <trans-unit id="621368ad433e8ead587b19fc3ef1c07ad4ba1121" translate="yes" xml:space="preserve">
          <source>Whether or not characters should be overlined, and in what color. If the value is &lt;code&gt;t&lt;/code&gt;, overlining uses the foreground color of the face. If the value is a string, overlining uses that color. The value &lt;code&gt;nil&lt;/code&gt; means do not overline.</source>
          <target state="translated">字符是否应该上划线以及以什么颜色绘制。如果值为 &lt;code&gt;t&lt;/code&gt; ，则覆盖使用面部的前景色。如果该值为字符串，则上划线将使用该颜色。值 &lt;code&gt;nil&lt;/code&gt; 表示不上划线。</target>
        </trans-unit>
        <trans-unit id="87b82f71ddfeb6b5f036533b3f7f4860e4362d1a" translate="yes" xml:space="preserve">
          <source>Whether or not characters should be strike-through, and in what color. The value is used like that of &lt;code&gt;:overline&lt;/code&gt;.</source>
          <target state="translated">字符是否应该删除线以及以什么颜色显示。该值的用法与 &lt;code&gt;:overline&lt;/code&gt; 相似。</target>
        </trans-unit>
        <trans-unit id="a349727f4624f6ab021246da8483aa44028c8643" translate="yes" xml:space="preserve">
          <source>Whether or not characters should be underlined, and in what way. The possible values of the &lt;code&gt;:underline&lt;/code&gt; attribute are:</source>
          <target state="translated">是否应在字符上加上下划线，以及使用哪种方式。 &lt;code&gt;:underline&lt;/code&gt; 属性的可能值为：</target>
        </trans-unit>
        <trans-unit id="3a36329c0176b418cdd12abd5e5ccbc9ca3d83e2" translate="yes" xml:space="preserve">
          <source>Whether or not the terminal can display the face attributes given in &lt;var&gt;value&lt;/var&gt;&amp;hellip; (see &lt;a href=&quot;face-attributes#Face-Attributes&quot;&gt;Face Attributes&lt;/a&gt;). See &lt;a href=&quot;display-feature-testing#Display-Face-Attribute-Testing&quot;&gt;Display Face Attribute Testing&lt;/a&gt;, for more information on exactly how this testing is done.</source>
          <target state="translated">终端是否可以显示 &lt;var&gt;value&lt;/var&gt; &amp;hellip;中给出的面部属性（请参阅&amp;ldquo;&lt;a href=&quot;face-attributes#Face-Attributes&quot;&gt;面部属性&amp;rdquo;&lt;/a&gt;）。有关确切如何进行此测试的更多信息，请参见&lt;a href=&quot;display-feature-testing#Display-Face-Attribute-Testing&quot;&gt;显示面部属性测试&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9ee7143441116933b2b1d2fb74c143183a73d67e" translate="yes" xml:space="preserve">
          <source>Whether or not this face will be extended beyond end of line and will affect the display of the empty space between the end of line and the edge of the window. The value should be &lt;code&gt;t&lt;/code&gt; to display the empty space between end of line and edge of the window using this face, or &lt;code&gt;nil&lt;/code&gt; to not use this face for the space between the end of the line and the edge of the window. When Emacs merges several faces for displaying the empty space beyond end of line, only those faces with &lt;code&gt;:extend&lt;/code&gt; non-&lt;code&gt;nil&lt;/code&gt; will be merged. By default, only a small number of faces, notably, &lt;code&gt;region&lt;/code&gt;, have this attribute set. This attribute is different from the others in that when a theme doesn&amp;rsquo;t specify an explicit value for a face, the value from the original face definition by &lt;code&gt;defface&lt;/code&gt; is inherited (see &lt;a href=&quot;defining-faces#Defining-Faces&quot;&gt;Defining Faces&lt;/a&gt;).</source>
          <target state="translated">此面是否将延伸到行尾之外，并且会影响行尾与窗口边缘之间空白区域的显示。值应为 &lt;code&gt;t&lt;/code&gt; 以显示使用此面的线的末端和窗口边缘之间的空白，或者为 &lt;code&gt;nil&lt;/code&gt; 以不使用此面的线的末端和窗口边缘之间的空白。当Emacs的合并用于显示超出线的端部的空的空间几个面，只与这些面 &lt;code&gt;:extend&lt;/code&gt; 非 &lt;code&gt;nil&lt;/code&gt; 将被合并。默认情况下，只有少数人脸，特别是 &lt;code&gt;region&lt;/code&gt; ，设置此属性。此属性与其他属性的不同之处在于，当主题没有为面孔指定显式值时，将继承 &lt;code&gt;defface&lt;/code&gt; 原始面孔定义中的值（请参见&lt;a href=&quot;defining-faces#Defining-Faces&quot;&gt;定义面孔&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="1b103ae335cfa2bb9c78948f91ad92c8adb3c29b" translate="yes" xml:space="preserve">
          <source>Whether or not to pause for &lt;code&gt;edebug-sit-for-seconds&lt;/code&gt; on reaching a breakpoint. Set to &lt;code&gt;nil&lt;/code&gt; to prevent the pause, non-&lt;code&gt;nil&lt;/code&gt; to allow it.</source>
          <target state="translated">到达断点时是否暂停 &lt;code&gt;edebug-sit-for-seconds&lt;/code&gt; 。设为 &lt;code&gt;nil&lt;/code&gt; ，以防止暂停，非 &lt;code&gt;nil&lt;/code&gt; 允许它。</target>
        </trans-unit>
        <trans-unit id="3339a6de20f77bd40ffb1ed898ed4bb70552d7e6" translate="yes" xml:space="preserve">
          <source>Whether recursive entry to minibuffer is allowed.</source>
          <target state="translated">是否允许递归进入minibuffer。</target>
        </trans-unit>
        <trans-unit id="1ce168d2c5a0dc5c2330545c5a50a1abb3761466" translate="yes" xml:space="preserve">
          <source>Whether the action &lt;code&gt;renamed&lt;/code&gt; is returned, depends on the used watch library. Otherwise, the actions &lt;code&gt;deleted&lt;/code&gt; and &lt;code&gt;created&lt;/code&gt; could be returned in a random order.</source>
          <target state="translated">是否返回 &lt;code&gt;renamed&lt;/code&gt; 的动作，取决于所使用的监视库。否则， &lt;code&gt;deleted&lt;/code&gt; 和 &lt;code&gt;created&lt;/code&gt; 的动作可能会以随机顺序返回。</target>
        </trans-unit>
        <trans-unit id="96dabfa3befc4cf90264ef632624f49c9ceaaef3" translate="yes" xml:space="preserve">
          <source>Whether the frame has scroll bars (see &lt;a href=&quot;scroll-bars#Scroll-Bars&quot;&gt;Scroll Bars&lt;/a&gt;) for vertical scrolling, and which side of the frame they should be on. The possible values are &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, and &lt;code&gt;nil&lt;/code&gt; for no scroll bars.</source>
          <target state="translated">框架是否具有用于垂直滚动的滚动条（请参见&lt;a href=&quot;scroll-bars#Scroll-Bars&quot;&gt;滚动条&lt;/a&gt;），以及框架应位于框架的哪一侧。对于无滚动条，可能的值分别为 &lt;code&gt;left&lt;/code&gt; ， &lt;code&gt;right&lt;/code&gt; 和 &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="570cdec0afbab44285125073d07498367313b12c" translate="yes" xml:space="preserve">
          <source>Whether the frame has scroll bars for horizontal scrolling (&lt;code&gt;t&lt;/code&gt; and &lt;code&gt;bottom&lt;/code&gt; mean yes, &lt;code&gt;nil&lt;/code&gt; means no).</source>
          <target state="translated">框架是否具有用于水平滚动的滚动条（ &lt;code&gt;t&lt;/code&gt; 和 &lt;code&gt;bottom&lt;/code&gt; 表示是， &lt;code&gt;nil&lt;/code&gt; 表示否）。</target>
        </trans-unit>
        <trans-unit id="46c8e8c485a23a80ef755951ee8e139296254b76" translate="yes" xml:space="preserve">
          <source>Whether the menu bar is wrapped or truncated whenever its width becomes too large to fit on its frame depends on the toolkit . Usually, only Motif and MS-Windows builds can wrap the menu bar. When they (un-)wrap the menu bar, they try to keep the outer height of the frame unchanged, so the native height of the frame (see below) will change instead.</source>
          <target state="translated">当菜单栏的宽度变得太大而无法适应其框架时,菜单栏是被包裹还是被截断取决于工具包。通常情况下,只有Motif和MS-Windows的构建可以包裹菜单栏,当它们(取消)包裹菜单栏时,它们会尽量保持菜单栏的外部高度。当他们(取消)包裹菜单栏时,他们试图保持框架的外部高度不变,因此框架的本机高度(见下文)将发生变化。</target>
        </trans-unit>
        <trans-unit id="3225f8a8df7af5e6c1696d052e30a6fd5b493417" translate="yes" xml:space="preserve">
          <source>Whether this frame has its own minibuffer. The value &lt;code&gt;t&lt;/code&gt; means yes, &lt;code&gt;nil&lt;/code&gt; means no, &lt;code&gt;only&lt;/code&gt; means this frame is just a minibuffer. If the value is a minibuffer window (in some other frame), the frame uses that minibuffer.</source>
          <target state="translated">此帧是否具有自己的迷你缓冲区。 &lt;code&gt;t&lt;/code&gt; 值表示是， &lt;code&gt;nil&lt;/code&gt; 表示否， &lt;code&gt;only&lt;/code&gt; 表示该帧只是一个微型缓冲区。如果该值为迷你缓冲区窗口（在其他帧中），则该帧使用该迷你缓冲区。</target>
        </trans-unit>
        <trans-unit id="d2f6aa5530c5eed14409c879a79ce151a1ce3180" translate="yes" xml:space="preserve">
          <source>Whether to query if exiting will kill a process.</source>
          <target state="translated">是否查询退出是否会杀死一个进程。</target>
        </trans-unit>
        <trans-unit id="a30cb334b0a4c61c095185a2336a959e81e282e4" translate="yes" xml:space="preserve">
          <source>Which File Defined a Certain Symbol</source>
          <target state="translated">哪个文件定义了某个符号</target>
        </trans-unit>
        <trans-unit id="6333b28a91521bad756efc5b44c75736ce6349f6" translate="yes" xml:space="preserve">
          <source>Which buffer is current, and the positions of point and the mark in the current buffer, are saved and restored.</source>
          <target state="translated">当前是哪个缓冲区,点和标记在当前缓冲区的位置,都会被保存和还原。</target>
        </trans-unit>
        <trans-unit id="4604b0e4277280e8cbbfe834a63404bd4ec61668" translate="yes" xml:space="preserve">
          <source>Which buffers have been or should be shown.</source>
          <target state="translated">哪些缓冲器已经或应该被显示出来;</target>
        </trans-unit>
        <trans-unit id="d57ea32eeaa1bddbc30ef3b79fbf8e85b67e6b87" translate="yes" xml:space="preserve">
          <source>Which character sets are used in a buffer?</source>
          <target state="translated">缓冲区中使用哪些字符集?</target>
        </trans-unit>
        <trans-unit id="46c8ee6549ff4d0835a19102159828fa10263ac4" translate="yes" xml:space="preserve">
          <source>Which parameters are accepted by the notification server can be checked via &lt;code&gt;notifications-get-capabilities&lt;/code&gt;.</source>
          <target state="translated">可以通过 &lt;code&gt;notifications-get-capabilities&lt;/code&gt; 检查通知服务器接受哪些参数。</target>
        </trans-unit>
        <trans-unit id="d5d68f0edd1de7e191fb9888edee4a6bdb5cd0a8" translate="yes" xml:space="preserve">
          <source>Which window system is being used.</source>
          <target state="translated">使用的是哪种窗口系统。</target>
        </trans-unit>
        <trans-unit id="982c8a6972c3e9f30d81bf085e5ad89215bdf352" translate="yes" xml:space="preserve">
          <source>While Edebug is active, the command</source>
          <target state="translated">当Edebug处于活动状态时,命令</target>
        </trans-unit>
        <trans-unit id="e77219cea90f180ba9fd77cd16c9872f93dcfca6" translate="yes" xml:space="preserve">
          <source>While Emacs waits for the synchronous subprocess to terminate, the user can quit by typing</source>
          <target state="translated">当Emacs等待同步子进程终止时,用户可以通过键入</target>
        </trans-unit>
        <trans-unit id="a0e9cf839f5ec54d82aeb0511d9c2ac3ea7094c9" translate="yes" xml:space="preserve">
          <source>While a sentinel is running, the process sentinel is temporarily set to &lt;code&gt;nil&lt;/code&gt; so that the sentinel won&amp;rsquo;t run recursively. For this reason it is not possible for a sentinel to specify a new sentinel.</source>
          <target state="translated">在运行哨兵时，进程哨兵会暂时设置为 &lt;code&gt;nil&lt;/code&gt; ,以便哨兵不会递归运行。因此，前哨无法指定新的前哨。</target>
        </trans-unit>
        <trans-unit id="3bca0316676840ea135f514876dcb5d700c34bac" translate="yes" xml:space="preserve">
          <source>While a sentinel or filter function is running, this function returns non-&lt;code&gt;nil&lt;/code&gt; if Emacs was waiting for keyboard input from the user at the time the sentinel or filter function was called, or &lt;code&gt;nil&lt;/code&gt; if it was not.</source>
          <target state="translated">虽然前哨或过滤器功能运行时，该函数返回非 &lt;code&gt;nil&lt;/code&gt; 如果Emacs的是从当时的定点或过滤函数被调用，或等待用户键盘输入 &lt;code&gt;nil&lt;/code&gt; ，如果事实并非如此。</target>
        </trans-unit>
        <trans-unit id="44c6b48c29b2eea207adfb6603fdd19cc584e716" translate="yes" xml:space="preserve">
          <source>While executing or tracing, you can interrupt the execution by typing any Edebug command. Edebug stops the program at the next stop point and then executes the command you typed. For example, typing</source>
          <target state="translated">在执行或跟踪时,你可以通过输入任何Edebug命令来中断执行。Edebug会在下一个停止点停止程序,然后执行你输入的命令。例如,键入</target>
        </trans-unit>
        <trans-unit id="4b7d809185c9cf5559ee0f75e3a5509cf67c9b64" translate="yes" xml:space="preserve">
          <source>While global variables are shared among all Emacs Lisp threads, local variables are not&amp;mdash;a dynamic &lt;code&gt;let&lt;/code&gt; binding is local. Each thread also has its own current buffer (see &lt;a href=&quot;current-buffer#Current-Buffer&quot;&gt;Current Buffer&lt;/a&gt;) and its own match data (see &lt;a href=&quot;match-data#Match-Data&quot;&gt;Match Data&lt;/a&gt;).</source>
          <target state="translated">尽管全局变量在所有Emacs Lisp线程之间共享，但局部变量却不是&amp;mdash;动态的 &lt;code&gt;let&lt;/code&gt; 绑定是局部的。每个线程还具有自己的当前缓冲区（请参阅&lt;a href=&quot;current-buffer#Current-Buffer&quot;&gt;Current Buffer&lt;/a&gt;）和自己的匹配数据（请参见&lt;a href=&quot;match-data#Match-Data&quot;&gt;Match Data&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="9f6b6c536addb2d944507d585c2d3b9b43662ada" translate="yes" xml:space="preserve">
          <source>While holding down the meta and shift keys, the user might press the second mouse button on the window&amp;rsquo;s mode line, and then drag the mouse into another window. That produces a pair of events like these:</source>
          <target state="translated">在按住meta键和shift键的同时，用户可以按下窗口模式行上的第二个鼠标按钮，然后将鼠标拖到另一个窗口中。这会产生一对这样的事件：</target>
        </trans-unit>
        <trans-unit id="0ce07a1bc20c1df5be5ff473ceaca3be3b6dfe4d" translate="yes" xml:space="preserve">
          <source>While holding the control key down, the user might hold down the second mouse button, and drag the mouse from one line to the next. That produces two events, as shown here:</source>
          <target state="translated">在按住控制键的同时,用户可能会按住第二个鼠标键,并将鼠标从一行拖到下一行。这将产生两个事件,如图所示。</target>
        </trans-unit>
        <trans-unit id="aa2b138dc7a434874a587f2ea0714355fe7e8345" translate="yes" xml:space="preserve">
          <source>While in Edebug, you can set a breakpoint with</source>
          <target state="translated">在Edebug中,你可以通过使用</target>
        </trans-unit>
        <trans-unit id="b96e5a724c0ebbb3de9c153f70114adfb541cb53" translate="yes" xml:space="preserve">
          <source>While this function is mainly intended for use in auto-reverting, it could be used for other purposes as well. For instance, if auto-reverting is not enabled, it could be used to warn the user that the buffer needs reverting. The idea behind the &lt;var&gt;noconfirm&lt;/var&gt; argument is that it should be &lt;code&gt;t&lt;/code&gt; if the buffer is going to be reverted without asking the user and &lt;code&gt;nil&lt;/code&gt; if the function is just going to be used to warn the user that the buffer is out of date. In particular, for use in auto-reverting, &lt;var&gt;noconfirm&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;. If the function is only going to be used for auto-reverting, you can ignore the &lt;var&gt;noconfirm&lt;/var&gt; argument.</source>
          <target state="translated">虽然此功能主要用于自动恢复，但也可以用于其他目的。例如，如果未启用自动还原，则可以使用它来警告用户缓冲区需要还原。 &lt;var&gt;noconfirm&lt;/var&gt; 参数背后的想法是，如果在不询问用户的情况下将要还原缓冲区，则应该为 &lt;code&gt;t&lt;/code&gt; ;如果只是使用该函数来警告用户缓冲区已过期，则为 &lt;code&gt;nil&lt;/code&gt; 。特别是在自动恢复中， &lt;var&gt;noconfirm&lt;/var&gt; 为 &lt;code&gt;t&lt;/code&gt; 。如果该功能仅用于自动还原，则可以忽略 &lt;var&gt;noconfirm&lt;/var&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="09ec9a61d40e758f8a1ea280765235554cb46e51" translate="yes" xml:space="preserve">
          <source>While using Edebug, you can specify &lt;em&gt;breakpoints&lt;/em&gt; in the program you are testing: these are places where execution should stop. You can set a breakpoint at any stop point, as defined in &lt;a href=&quot;using-edebug#Using-Edebug&quot;&gt;Using Edebug&lt;/a&gt;. For setting and unsetting breakpoints, the stop point that is affected is the first one at or after point in the source code buffer. Here are the Edebug commands for breakpoints:</source>
          <target state="translated">使用Edebug时，您可以在要测试的程序中指定&lt;em&gt;断点&lt;/em&gt;：这些是应该停止执行的地方。您可以在任何停止点处设置断点，如&lt;a href=&quot;using-edebug#Using-Edebug&quot;&gt;使用Edebug中&lt;/a&gt;所定义。对于设置和取消断点，受影响的停靠点是源代码缓冲区中第一个停靠点。这是断点的Edebug命令：</target>
        </trans-unit>
        <trans-unit id="fa12cd365478af88379663588f57e8ff97a39d58" translate="yes" xml:space="preserve">
          <source>While window change functions are run, the functions described next can be called to get more insight into what has changed for a specific window or frame since the last redisplay. All these functions take a live window as single, optional argument, defaulting to the selected window.</source>
          <target state="translated">在运行窗口更改函数时,可以调用接下来描述的函数,以便更深入地了解自上次重新显示以来特定窗口或帧的变化。所有这些函数都将一个实时窗口作为单个可选参数,默认为所选窗口。</target>
        </trans-unit>
        <trans-unit id="21a7273c21de5277f0ec77123f7d544d0ae946c6" translate="yes" xml:space="preserve">
          <source>While within Edebug, you can evaluate expressions as if Edebug were not running. Edebug tries to be invisible to the expression&amp;rsquo;s evaluation and printing. Evaluation of expressions that cause side effects will work as expected, except for changes to data that Edebug explicitly saves and restores. See &lt;a href=&quot;the-outside-context#The-Outside-Context&quot;&gt;The Outside Context&lt;/a&gt;, for details on this process.</source>
          <target state="translated">在Edebug中时，您可以像未运行Edebug一样评估表达式。Edebug尝试使表达式的评估和打印不可见。对引起副作用的表达式的评估将按预期进行，除了Edebug明确保存和恢复的数据更改之外。有关此过程的详细信息，请参见&lt;a href=&quot;the-outside-context#The-Outside-Context&quot;&gt;外部上下文&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ddce35a991a7cc6488454c01eee293fd067c30fc" translate="yes" xml:space="preserve">
          <source>Whitespace characters before and after the commas are ignored.</source>
          <target state="translated">忽略逗号前后的空白字符。</target>
        </trans-unit>
        <trans-unit id="cefe02b00f13ea6c3bbe7d3da7dad90a1a52f9a6" translate="yes" xml:space="preserve">
          <source>Whitespace characters: &amp;lsquo;&amp;rsquo; or &amp;lsquo;</source>
          <target state="translated">空格字符：&amp;ldquo;或&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="6070f5330973d3f20cf4dd45a51e33df12e43edc" translate="yes" xml:space="preserve">
          <source>Whole number of seconds.</source>
          <target state="translated">整数秒。</target>
        </trans-unit>
        <trans-unit id="5978321d9551ea526dd1e41cdfbcda064a3e0c90" translate="yes" xml:space="preserve">
          <source>Why Text Properties are not Intervals</source>
          <target state="translated">为什么文本属性不是间隔</target>
        </trans-unit>
        <trans-unit id="7c8f385f8776abe3ee23cd356b28fcbf13f32163" translate="yes" xml:space="preserve">
          <source>Why text properties do not use Lisp-visible text intervals.</source>
          <target state="translated">为什么文本属性不使用Lisp可见的文本间隔。</target>
        </trans-unit>
        <trans-unit id="55b1b545af40f90e002eebaef362d6c451427538" translate="yes" xml:space="preserve">
          <source>Width and height in millimeters as &amp;lsquo;</source>
          <target state="translated">宽度和高度（以毫米为单位）</target>
        </trans-unit>
        <trans-unit id="4f2caf4fd01ef1de25a0fa06f078de09fbbe7ae0" translate="yes" xml:space="preserve">
          <source>Window Configuration Type</source>
          <target state="translated">窗口配置类型</target>
        </trans-unit>
        <trans-unit id="4719b364ada9ea80bc95dadf1a46b5d6e42f300b" translate="yes" xml:space="preserve">
          <source>Window Configurations</source>
          <target state="translated">窗口配置</target>
        </trans-unit>
        <trans-unit id="383fc633828b7f53a6347e277fbc6931a7fb4718" translate="yes" xml:space="preserve">
          <source>Window Dividers</source>
          <target state="translated">分隔窗</target>
        </trans-unit>
        <trans-unit id="f2acc5dfa54156a214d1606598b55d8bc1d36e43" translate="yes" xml:space="preserve">
          <source>Window Frame Parameters</source>
          <target state="translated">窗口框架参数</target>
        </trans-unit>
        <trans-unit id="23cfeec33d3985ca43bf26e706bb33e16524aae7" translate="yes" xml:space="preserve">
          <source>Window Header Lines</source>
          <target state="translated">窗头线</target>
        </trans-unit>
        <trans-unit id="aea40a08850dedc93176c8c25cbf6c46773b984b" translate="yes" xml:space="preserve">
          <source>Window History</source>
          <target state="translated">窗口历史</target>
        </trans-unit>
        <trans-unit id="2adeacaba642526348dabb53054e0f9ba68a48ff" translate="yes" xml:space="preserve">
          <source>Window Internals</source>
          <target state="translated">窗口内部</target>
        </trans-unit>
        <trans-unit id="0aa526e852b8c127dccb3d9d8f01d311682e7f8e" translate="yes" xml:space="preserve">
          <source>Window Management Parameters</source>
          <target state="translated">窗口管理参数</target>
        </trans-unit>
        <trans-unit id="7e63c35b290d11eceb95853777f7c66c956be145" translate="yes" xml:space="preserve">
          <source>Window Parameters</source>
          <target state="translated">窗口参数</target>
        </trans-unit>
        <trans-unit id="ddf6b6b64a3f967df5de0d5f500dc367c7816d58" translate="yes" xml:space="preserve">
          <source>Window Sizes</source>
          <target state="translated">窗户尺寸</target>
        </trans-unit>
        <trans-unit id="e3d90bae9b52e6df713535cc491f9d7260cb7e1d" translate="yes" xml:space="preserve">
          <source>Window System Selections</source>
          <target state="translated">窗口系统选择</target>
        </trans-unit>
        <trans-unit id="99cc4ccf3f53f630b2d30920cc334165dfa70c56" translate="yes" xml:space="preserve">
          <source>Window Systems</source>
          <target state="translated">窗口系统</target>
        </trans-unit>
        <trans-unit id="92bfda0dd090278d55f83c688172701c41d07f9e" translate="yes" xml:space="preserve">
          <source>Window Type</source>
          <target state="translated">窗口类型</target>
        </trans-unit>
        <trans-unit id="22a63e85e94d72b84de62c3dd1b814e7ef77e9dd" translate="yes" xml:space="preserve">
          <source>Window change functions are called during redisplay for each frame as follows: First, any buffer-local window buffer change function, window size change function, selected window change and window state change functions are called in this order. Next, the default values for these functions are called in the same order. Then any buffer-local window configuration change functions are called followed by functions specified by the default value of those functions. Finally, functions on &lt;code&gt;window-state-change-hook&lt;/code&gt; are run.</source>
          <target state="translated">在重新显示每个帧的过程中，将按以下方式调用窗口更改功能：首先，按此顺序调用任何本地缓冲区窗口缓冲区更改功能，窗口大小更改功能，所选窗口更改和窗口状态更改功能。接下来，以相同的顺序调用这些函数的默认值。然后，将调用所有缓冲区本地窗口配置更改功能，然后调用由这些功能的默认值指定的功能。最后，运行 &lt;code&gt;window-state-change-hook&lt;/code&gt; 上的函数。</target>
        </trans-unit>
        <trans-unit id="0a566afc3561cc5cec927cae0207cc941a9353aa" translate="yes" xml:space="preserve">
          <source>Window change functions are run for a specific frame only if a corresponding change was registered for that frame earlier. Such changes include the creation or deletion of a window or the assignment of another buffer or size to a window. Note that even when such a change has been registered, this does not mean that any of the hooks described above is run. If, for example, a change was registered within the scope of a window excursion (see &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;Window Configurations&lt;/a&gt;), this will trigger a call of window change functions only if that excursion still persists at the time change functions are run. If it is exited earlier, hooks will be run only if registered by a change outside the scope of that excursion.</source>
          <target state="translated">仅当先前为该帧注册了相应的更改时，窗口更改功能才针对特定的帧运行。此类更改包括创建或删除窗口，或为窗口分配另一个缓冲区或大小。注意，即使已经记录了这样的更改，也不意味着上面描述的任何钩子都会运行。例如，如果在窗口偏移范围内注册了更改（请参阅&amp;ldquo;&lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;窗口配置&amp;rdquo;&lt;/a&gt;），则只有在运行更改功能时该偏移仍然持续的情况下，才会触发窗口更改功能的调用。如果较早退出，则只有在该偏移范围之外的更改进行注册时，钩子才会运行。</target>
        </trans-unit>
        <trans-unit id="b6e565000823201cf9f76d83eeb2ce5e7ac9f359" translate="yes" xml:space="preserve">
          <source>Window change functions should not create or delete windows or change the buffer, size or selection status of any window because there is no guarantee that the information about such a change will be propagated to other window change functions. If at all, any such change should be executed only by the last function listed by the default value of &lt;code&gt;window-state-change-hook&lt;/code&gt;.</source>
          <target state="translated">窗口更改功能不应创建或删除窗口或更改任何窗口的缓冲区，大小或选择状态，因为不能保证有关此类更改的信息将传播到其他窗口更改功能。如果有的话，任何这样的更改都只能由 &lt;code&gt;window-state-change-hook&lt;/code&gt; 的默认值列出的最后一个函数执行。</target>
        </trans-unit>
        <trans-unit id="1ca7163596db4bd70d63749d7a570ef34f5c5069" translate="yes" xml:space="preserve">
          <source>Window configurations do not have a read syntax; their print syntax looks like &amp;lsquo;</source>
          <target state="translated">窗口配置没有读取语法。他们的打印语法看起来像是&amp;ldquo;</target>
        </trans-unit>
        <trans-unit id="1d3d93f781bc955d732be578f67fb0deca437299" translate="yes" xml:space="preserve">
          <source>Window dividers are bars drawn between a frame&amp;rsquo;s windows. A right divider is drawn between a window and any adjacent windows on the right. Its width (thickness) is specified by the frame parameter &lt;code&gt;right-divider-width&lt;/code&gt;. A bottom divider is drawn between a window and adjacent windows on the bottom or the echo area. Its width is specified by the frame parameter &lt;code&gt;bottom-divider-width&lt;/code&gt;. In either case, specifying a width of zero means to not draw such dividers. See &lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;Layout Parameters&lt;/a&gt;.</source>
          <target state="translated">窗口分隔线是在框架的窗口之间绘制的条。在窗口和右边的任何相邻窗口之间绘制一个右分隔线。其宽度（厚度）由frame参数 &lt;code&gt;right-divider-width&lt;/code&gt; 指定。在窗口和底部或回声区域上的相邻窗口之间绘制一个底部分隔线。其宽度由框架参数 &lt;code&gt;bottom-divider-width&lt;/code&gt; 指定。在任何一种情况下，将宽度指定为零意味着不会绘制此类分隔线。请参见&lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;布局参数&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7d7ad521e7ccb431c898f004aae10b9fcd97052e" translate="yes" xml:space="preserve">
          <source>Window managers generally heed user-specified positions, and some heed program-specified positions too. But many ignore program-specified positions, placing the window in a default fashion or letting the user place it with the mouse. Some window managers, including &lt;code&gt;twm&lt;/code&gt;, let the user specify whether to obey program-specified positions or ignore them.</source>
          <target state="translated">窗口管理器通常会注意用户指定的位置，有些也会注意程序指定的位置。但是许多人忽略了程序指定的位置，以默认方式放置窗口或让用户用鼠标放置窗口。一些窗口管理器（包括 &lt;code&gt;twm&lt;/code&gt; ）使用户可以指定是遵守程序指定的位置还是忽略它们。</target>
        </trans-unit>
        <trans-unit id="1ac30c43ebb99ef6fdeeea2b26ee628487f8b105" translate="yes" xml:space="preserve">
          <source>Window managers might not bother to extend their focus follows mouse policy to child frames. Customizing &lt;code&gt;mouse-autoselect-window&lt;/code&gt; can help in this regard (see &lt;a href=&quot;mouse-window-auto_002dselection#Mouse-Window-Auto_002dselection&quot;&gt;Mouse Window Auto-selection&lt;/a&gt;).</source>
          <target state="translated">窗口管理器可能不会费心地按照鼠标策略将焦点扩展到子框架。在这方面自定义 &lt;code&gt;mouse-autoselect-window&lt;/code&gt; 会有所帮助（请参阅&amp;ldquo;&lt;a href=&quot;mouse-window-auto_002dselection#Mouse-Window-Auto_002dselection&quot;&gt;鼠标窗口自动选择&amp;rdquo;&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="6e452eeb875beec394b3abe50031295c7bb2eae1" translate="yes" xml:space="preserve">
          <source>Window systems provide general ways for the user to control which window gets keyboard input. This choice of window is called the &lt;em&gt;focus&lt;/em&gt;. When the user does something to switch between Emacs frames, that generates a &lt;em&gt;focus event&lt;/em&gt;. The normal definition of a focus event, in the global keymap, is to select a new frame within Emacs, as the user would expect. See &lt;a href=&quot;input-focus#Input-Focus&quot;&gt;Input Focus&lt;/a&gt;, which also describes hooks related to focus events.</source>
          <target state="translated">窗口系统为用户提供控制哪个窗口获得键盘输入的通用方法。窗口的这种选择称为&lt;em&gt;焦点&lt;/em&gt;。当用户执行某些操作以在Emacs框架之间切换时，将生成一个&lt;em&gt;focus事件&lt;/em&gt;。焦点事件的一般定义是在全局键盘图中按用户期望的那样在Emacs中选择一个新框架。请参阅&lt;a href=&quot;input-focus#Input-Focus&quot;&gt;Input Focus&lt;/a&gt;，它也描述了与焦点事件有关的钩子。</target>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="be6f7128e1368ad70800befb826104ed0c1bda9a" translate="yes" xml:space="preserve">
          <source>Windows and Frames</source>
          <target state="translated">窗口和框架</target>
        </trans-unit>
        <trans-unit id="2e188987453ed30440b9c0e01d3bc06dc6caecbc" translate="yes" xml:space="preserve">
          <source>Windows and Point</source>
          <target state="translated">窗口和点</target>
        </trans-unit>
        <trans-unit id="8eaccfa1394601c417974424029ea241c342bf12" translate="yes" xml:space="preserve">
          <source>Windows are grouped into frames (see &lt;a href=&quot;frames#Frames&quot;&gt;Frames&lt;/a&gt;). Each frame contains at least one window; the user can subdivide it into multiple, non-overlapping windows to view several buffers at once. Lisp programs can use multiple windows for a variety of purposes. In Rmail, for example, you can view a summary of message titles in one window, and the contents of the selected message in another window.</source>
          <target state="translated">Windows被分组为框架（请参阅&lt;a href=&quot;frames#Frames&quot;&gt;Frames&lt;/a&gt;）。每一帧至少包含一个窗口。用户可以将其细分为多个不重叠的窗口，以一次查看多个缓冲区。Lisp程序可以出于多种目的使用多个窗口。例如，在Rmail中，您可以在一个窗口中查看消息标题的摘要，而在另一窗口中查看所选消息的内容。</target>
        </trans-unit>
        <trans-unit id="442df2648c226eb5a7b76a491a65f77c9ed3c717" translate="yes" xml:space="preserve">
          <source>Windows are grouped on the screen into frames; each window belongs to one and only one frame. See &lt;a href=&quot;frame-type#Frame-Type&quot;&gt;Frame Type&lt;/a&gt;.</source>
          <target state="translated">Windows在屏幕上分为几组；每个窗口仅属于一个框架。请参阅&lt;a href=&quot;frame-type#Frame-Type&quot;&gt;框架类型&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ae05c0cf1406d754b9681ad2b7e23e7ead25ad0e" translate="yes" xml:space="preserve">
          <source>Windows have no read syntax. They print in hash notation, giving the window number and the name of the buffer being displayed. The window numbers exist to identify windows uniquely, since the buffer displayed in any given window can change frequently.</source>
          <target state="translated">窗口没有读取语法,它们用哈希符号打印,给出窗口号和显示的缓冲区名称。它们以哈希符号打印,给出窗口号和显示的缓冲区名称。窗口号的存在是为了唯一地识别窗口,因为任何特定窗口中显示的缓冲区可能会经常变化。</target>
        </trans-unit>
        <trans-unit id="fdf9128b6bea0651ba58ad62c53b7ddaebe1ea6c" translate="yes" xml:space="preserve">
          <source>Windows icon file. If &lt;var&gt;icon&lt;/var&gt; is not a string, or if this parameter is not specified, the standard Emacs icon will be used.</source>
          <target state="translated">Windows图标文件。如果 &lt;var&gt;icon&lt;/var&gt; 不是字符串，或者未指定此参数，则将使用标准的Emacs图标。</target>
        </trans-unit>
        <trans-unit id="2eced8326ec21d9f7d69dba0bfb2bcdec56754d5" translate="yes" xml:space="preserve">
          <source>Windows in the same frame are organized into a &lt;em&gt;window tree&lt;/em&gt;, whose leaf nodes are the live windows. The internal nodes of a window tree are not live; they exist for the purpose of organizing the relationships between live windows. The root node of a window tree is called the &lt;em&gt;root window&lt;/em&gt;. It can be either a live window (if the frame has just one window), or an internal window.</source>
          <target state="translated">同一框架中的&lt;em&gt;窗口&lt;/em&gt;被组织成一个&lt;em&gt;窗口树&lt;/em&gt;，其叶节点是活动窗口。窗口树的内部节点不活动。它们的存在是为了组织活动窗口之间的关系。窗口树的&lt;em&gt;根节点&lt;/em&gt;称为&lt;em&gt;根窗口&lt;/em&gt;。它可以是活动窗口（如果框架只有一个窗口），也可以是内部窗口。</target>
        </trans-unit>
        <trans-unit id="fa199959bd4c34b8dec232ab0f4f26f817f32d3a" translate="yes" xml:space="preserve">
          <source>Windows subdivide frames.</source>
          <target state="translated">窗口分框。</target>
        </trans-unit>
        <trans-unit id="9625ad71e1126b85f0c9b31dbd77fa5cb6db2ec0" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;cl-case&lt;/code&gt;, you would need to explicitly declare a local variable &lt;code&gt;code&lt;/code&gt; to hold the return value of &lt;code&gt;get-return-code&lt;/code&gt;. Also &lt;code&gt;cl-case&lt;/code&gt; is difficult to use with strings because it uses &lt;code&gt;eql&lt;/code&gt; for comparison.</source>
          <target state="translated">使用 &lt;code&gt;cl-case&lt;/code&gt; 时，您需要显式声明一个局部变量 &lt;code&gt;code&lt;/code&gt; 以保存 &lt;code&gt;get-return-code&lt;/code&gt; 的返回值。同样， &lt;code&gt;cl-case&lt;/code&gt; 很难与字符串一起使用，因为它使用 &lt;code&gt;eql&lt;/code&gt; 进行比较。</target>
        </trans-unit>
        <trans-unit id="379c5ad0fc05121b28d86312f7275e845327cfdf" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;debugger-stack-frame-as-list&lt;/code&gt; non-&lt;code&gt;nil&lt;/code&gt;, the above example would look as follows:</source>
          <target state="translated">与 &lt;code&gt;debugger-stack-frame-as-list&lt;/code&gt; 非 &lt;code&gt;nil&lt;/code&gt; ，上面的例子将作为看起来如下：</target>
        </trans-unit>
        <trans-unit id="6100bd81973aa5e616388683b73c2c5e9ccd6566" translate="yes" xml:space="preserve">
          <source>With Emacs, you can have a drag event without even changing your clothes. A &lt;em&gt;drag event&lt;/em&gt; happens every time the user presses a mouse button and then moves the mouse to a different character position before releasing the button. Like all mouse events, drag events are represented in Lisp as lists. The lists record both the starting mouse position and the final position, like this:</source>
          <target state="translated">使用Emacs，即使没有换衣服也可以进行拖动事件。甲&lt;em&gt;拖拽事件&lt;/em&gt;发生在用户每次按下一个鼠标按钮，然后释放该按钮之前移动鼠标到不同的字符位置的时间。像所有鼠标事件一样，拖动事件在Lisp中表示为列表。列表记录了鼠标的起始位置和最终位置，如下所示：</target>
        </trans-unit>
        <trans-unit id="d1dc946c2f6fe89324445abc6e222b559616382c" translate="yes" xml:space="preserve">
          <source>With a prefix argument &lt;var&gt;n&lt;/var&gt;, the temporary breakpoint is placed &lt;var&gt;n&lt;/var&gt; sexps beyond point. If the containing list ends before &lt;var&gt;n&lt;/var&gt; more elements, then the place to stop is after the containing expression.</source>
          <target state="translated">使用前缀参数 &lt;var&gt;n&lt;/var&gt; ，将临时断点放置在超出该点 &lt;var&gt;n&lt;/var&gt; 个点的位置。如果包含列表在 &lt;var&gt;n&lt;/var&gt; 个其他元素之前结束，则停止位置在包含表达式之后。</target>
        </trans-unit>
        <trans-unit id="ecb154911a9d6e366231dc08d7ca7f3855eaa8fd" translate="yes" xml:space="preserve">
          <source>With a prefix argument,</source>
          <target state="translated">有一个前缀参数。</target>
        </trans-unit>
        <trans-unit id="210c23b8bcc2767909392a98f4eda932b17f5a83" translate="yes" xml:space="preserve">
          <source>With an argument of 0, unconditionally do &lt;em&gt;not&lt;/em&gt; make any backup file.</source>
          <target state="translated">如果参数为0，则无条件&lt;em&gt;不&lt;/em&gt;创建任何备份文件。</target>
        </trans-unit>
        <trans-unit id="8c81c5821676f0924542fa74b61fdd66d16a6e61" translate="yes" xml:space="preserve">
          <source>With an argument of 16 or 64, reflecting 2 or 3</source>
          <target state="translated">以16或64为论点,反映2或3</target>
        </trans-unit>
        <trans-unit id="87eba365dd983ee0592230b13c20c52100f40dd2" translate="yes" xml:space="preserve">
          <source>With an argument of 4 or 64, reflecting 1 or 3</source>
          <target state="translated">以4或64为论点,反映1或3</target>
        </trans-unit>
        <trans-unit id="e7ce6ed10fead795cfac1fde7a353d1e9aebcb87" translate="yes" xml:space="preserve">
          <source>With an argument of zero, &lt;code&gt;recenter&lt;/code&gt; positions the current line at the top of the window. The command &lt;code&gt;recenter-top-bottom&lt;/code&gt; offers a more convenient way to achieve this.</source>
          <target state="translated">具有零的参数， &lt;code&gt;recenter&lt;/code&gt; 定位在窗口顶部的当前行。命令 &lt;code&gt;recenter-top-bottom&lt;/code&gt; 提供了一种更方便的方法来实现此目的。</target>
        </trans-unit>
        <trans-unit id="347d2530c8917d08eba5b99f61f3aa4d6352f05f" translate="yes" xml:space="preserve">
          <source>With one or more &lt;var&gt;divisors&lt;/var&gt;, this function divides &lt;var&gt;number&lt;/var&gt; by each divisor in &lt;var&gt;divisors&lt;/var&gt; in turn, and returns the quotient. With no &lt;var&gt;divisors&lt;/var&gt;, this function returns 1/&lt;var&gt;number&lt;/var&gt;, i.e., the multiplicative inverse of &lt;var&gt;number&lt;/var&gt;. Each argument may be a number or a marker.</source>
          <target state="translated">与一个或多个 &lt;var&gt;divisors&lt;/var&gt; ，该功能划分 &lt;var&gt;number&lt;/var&gt; 在由每个除数 &lt;var&gt;divisors&lt;/var&gt; 反过来，并且返回的商。由于没有 &lt;var&gt;divisors&lt;/var&gt; ，此函数返回1 / &lt;var&gt;number&lt;/var&gt; ，即，乘法逆 &lt;var&gt;number&lt;/var&gt; 。每个参数可以是数字或标记。</target>
        </trans-unit>
        <trans-unit id="a3c3cd80ce77cd76a8344934a743105c47af6c03" translate="yes" xml:space="preserve">
          <source>With point at the start:</source>
          <target state="translated">以点为起点。</target>
        </trans-unit>
        <trans-unit id="3566916c616498258bd7794ada3495127a35c723" translate="yes" xml:space="preserve">
          <source>With rare exceptions, the only reasonable way to use &lt;code&gt;make-variable-buffer-local&lt;/code&gt; in a Lisp package is for a variable which is used only within that package. Using it on a variable used by other packages would interfere with them.</source>
          <target state="translated">除极少数例外，在Lisp软件包中使用 &lt;code&gt;make-variable-buffer-local&lt;/code&gt; 的唯一合理方法是仅在该软件包中使用变量。在其他程序包使用的变量上使用它会干扰它们。</target>
        </trans-unit>
        <trans-unit id="f49f278bd7d6fdff3d1215f4f54950d09d622b6c" translate="yes" xml:space="preserve">
          <source>With some window managers you may have to customize the variable &lt;code&gt;frame-resize-pixelwise&lt;/code&gt; (see &lt;a href=&quot;frame-size#Frame-Size&quot;&gt;Frame Size&lt;/a&gt;) in order to make a frame truly appear maximized or full-screen. Moreover, some window managers might not support smooth transition between the various full-screen or maximization states. Customizing the variable &lt;code&gt;x-frame-normalize-before-maximize&lt;/code&gt; can help to overcome that.</source>
          <target state="translated">对于某些窗口管理器，您可能必须自定义可变的 &lt;code&gt;frame-resize-pixelwise&lt;/code&gt; （请参阅&lt;a href=&quot;frame-size#Frame-Size&quot;&gt;Frame Size&lt;/a&gt;），以使框架真正显示为最大化或全屏显示。此外，某些窗口管理器可能不支持各种全屏或最大化状态之间的平滑过渡。自定义变量 &lt;code&gt;x-frame-normalize-before-maximize&lt;/code&gt; 可以帮助克服这一问题。</target>
        </trans-unit>
        <trans-unit id="46fdf2b4d7e3cd9b5e28a3b4a9a7952875281ecb" translate="yes" xml:space="preserve">
          <source>With some window managers you may have to set this to non-&lt;code&gt;nil&lt;/code&gt; in order to make a frame appear truly maximized or full-screen.</source>
          <target state="translated">对于某些窗口管理器，您可能必须将此值设置为 &lt;code&gt;nil&lt;/code&gt; 才能使框架看起来真正最大化或全屏显示。</target>
        </trans-unit>
        <trans-unit id="b1dfcbaccda3157f5fe6d62d6b90e1b8f41f4014" translate="yes" xml:space="preserve">
          <source>With the help of &lt;code&gt;apply&lt;/code&gt; (see &lt;a href=&quot;calling-functions#Calling-Functions&quot;&gt;Calling Functions&lt;/a&gt;), we can append all the lists in a list of lists:</source>
          <target state="translated">在 &lt;code&gt;apply&lt;/code&gt; 的帮助下（请参见&lt;a href=&quot;calling-functions#Calling-Functions&quot;&gt;调用函数&lt;/a&gt;），我们可以将所有列表追加到列表列表中：</target>
        </trans-unit>
        <trans-unit id="b2f47f160c5a2523aadfbc79ba2e6750a57bd5e3" translate="yes" xml:space="preserve">
          <source>With the return point in effect, &lt;code&gt;catch&lt;/code&gt; evaluates the forms of the &lt;var&gt;body&lt;/var&gt; in textual order. If the forms execute normally (without error or nonlocal exit) the value of the last body form is returned from the &lt;code&gt;catch&lt;/code&gt;.</source>
          <target state="translated">启用返回点后， &lt;code&gt;catch&lt;/code&gt; 会按文本顺序评估 &lt;var&gt;body&lt;/var&gt; 的形式。如果表单正常执行（没有错误或非本地退出），则最后一个主体表单的值将从 &lt;code&gt;catch&lt;/code&gt; 返回。</target>
        </trans-unit>
        <trans-unit id="10051c84c8f5c674f94fa417b4da657f0b49040c" translate="yes" xml:space="preserve">
          <source>With the second form of &lt;var&gt;variables&lt;/var&gt;, if &lt;var&gt;directory&lt;/var&gt; is the initial substring of the file&amp;rsquo;s directory, then &lt;var&gt;list&lt;/var&gt; is applied recursively by following the above rules; &lt;var&gt;list&lt;/var&gt; should be of one of the two forms accepted by this function in &lt;var&gt;variables&lt;/var&gt;.</source>
          <target state="translated">对于第二种 &lt;var&gt;variables&lt;/var&gt; 形式，如果 &lt;var&gt;directory&lt;/var&gt; 是文件目录的初始子字符串，则遵循上述规则以递归方式应用 &lt;var&gt;list&lt;/var&gt; ； &lt;var&gt;list&lt;/var&gt; 应该是此函数在 &lt;var&gt;variables&lt;/var&gt; 接受的两种形式之一。</target>
        </trans-unit>
        <trans-unit id="7d29af94b07c044caf68181642a1733e49ac59d4" translate="yes" xml:space="preserve">
          <source>With this erroneous macro definition, the program worked fine when interpreted but failed when compiled. This macro definition called &lt;code&gt;set-buffer-multibyte&lt;/code&gt; during compilation, which was wrong, and then did nothing when the compiled package was run. The definition that the programmer really wanted was this:</source>
          <target state="translated">使用此错误的宏定义，程序在解释时可以正常工作，但在编译时会失败。这个宏定义在编译期间称为 &lt;code&gt;set-buffer-multibyte&lt;/code&gt; ，这是错误的，然后在运行已编译的程序包时不执行任何操作。程序员真正想要的定义是：</target>
        </trans-unit>
        <trans-unit id="a1d036ceb743d38c138e7a131e52930adf1628cc" translate="yes" xml:space="preserve">
          <source>With this method, you can easily define different commands for different links. Furthermore, the global definition of</source>
          <target state="translated">通过这种方法,你可以很容易地为不同的链接定义不同的命令。此外,全局定义的</target>
        </trans-unit>
        <trans-unit id="35b5bb0fc1084b49d0782acec9ceac821436a3ab" translate="yes" xml:space="preserve">
          <source>With this method, you can specify any order for the list, but there is no danger of losing a buffer or adding something that is not a valid live buffer.</source>
          <target state="translated">使用这种方法,你可以为列表指定任何顺序,但不会有丢失缓冲区或添加一些不是有效的实时缓冲区的危险。</target>
        </trans-unit>
        <trans-unit id="4e98f5e43b9ac57e09faf03bee04730bd5197ff0" translate="yes" xml:space="preserve">
          <source>With very few exceptions, most modules need to exchange data with Lisp programs that call them: accept arguments to module functions and return values from module functions. For this purpose, the module</source>
          <target state="translated">除了极少数例外,大多数模块都需要与调用它们的Lisp程序交换数据:接受模块函数的参数和模块函数的返回值。为此,模块的</target>
        </trans-unit>
        <trans-unit id="7caf467bdd796e36080976d3906617d560556261" translate="yes" xml:space="preserve">
          <source>Within Edebug, the recursion depth appears one deeper than the recursion depth outside Edebug. This is not true of the automatically updated evaluation list window.</source>
          <target state="translated">在Edebug内,递归深度比Edebug外的递归深度深一个。在自动更新的评估列表窗口中,情况并非如此。</target>
        </trans-unit>
        <trans-unit id="4731ff9126f64e37ebf637bf6384565db7275f18" translate="yes" xml:space="preserve">
          <source>Within Edebug, you normally view an Emacs buffer showing the source of the Lisp code you are debugging. This is referred to as the &lt;em&gt;source code buffer&lt;/em&gt;, and it is temporarily read-only.</source>
          <target state="translated">在Edebug中，通常会查看一个Emacs缓冲区，其中显示了您正在调试的Lisp代码的来源。这被称为&lt;em&gt;源代码缓冲区&lt;/em&gt;，它是临时只读的。</target>
        </trans-unit>
        <trans-unit id="d1bb6325e0ab022386022d97ac9161d9afc1f618" translate="yes" xml:space="preserve">
          <source>Within a macro definition, you can use the &lt;code&gt;declare&lt;/code&gt; form (see &lt;a href=&quot;defining-macros#Defining-Macros&quot;&gt;Defining Macros&lt;/a&gt;) to specify how</source>
          <target state="translated">在宏定义内，您可以使用 &lt;code&gt;declare&lt;/code&gt; 形式（请参见&lt;a href=&quot;defining-macros#Defining-Macros&quot;&gt;定义宏&lt;/a&gt;）来指定</target>
        </trans-unit>
        <trans-unit id="9ec232c680982df144b8116755db517b98c19d63" translate="yes" xml:space="preserve">
          <source>Within the function &lt;code&gt;For&lt;/code&gt; itself, the local variable &lt;code&gt;args&lt;/code&gt; refers to objects controlled by Emacs&amp;rsquo;s stack-marking garbage collector. Although the garbage collector does not reclaim objects reachable from C &lt;code&gt;Lisp_Object&lt;/code&gt; stack variables, it may move some of the components of an object, such as the contents of a string or the text of a buffer. Therefore, functions that access these components must take care to refetch their addresses after performing Lisp evaluation. This means that instead of keeping C pointers to string contents or buffer text, the code should keep the buffer or string position, and recompute the C pointer from the position after performing Lisp evaluation. Lisp evaluation can occur via calls to &lt;code&gt;eval_sub&lt;/code&gt; or &lt;code&gt;Feval&lt;/code&gt;, either directly or indirectly.</source>
          <target state="translated">在函数 &lt;code&gt;For&lt;/code&gt; 本身内，局部变量 &lt;code&gt;args&lt;/code&gt; 引用由Emacs的堆栈标记垃圾收集器控制的对象。尽管垃圾收集器不会回收C &lt;code&gt;Lisp_Object&lt;/code&gt; 堆栈变量可访问的对象，但它可能会移动对象的某些组件，例如字符串的内容或缓冲区的文本。因此，执行Lisp评估后，访问这些组件的功能必须小心以重新获取其地址。这意味着代码不应该保留指向字符串内容或缓冲区文本的C指针，而应保留缓冲区或字符串的位置，并在执行Lisp评估后从该位置重新计算C指针。 Lisp评估可以通过调用 &lt;code&gt;eval_sub&lt;/code&gt; 或 &lt;code&gt;Feval&lt;/code&gt; ，直接或间接。</target>
        </trans-unit>
        <trans-unit id="4eeaacf4f0fbb0afa707847e230d8aa614f5ae4c" translate="yes" xml:space="preserve">
          <source>Word constituents: &amp;lsquo;</source>
          <target state="translated">词成分：</target>
        </trans-unit>
        <trans-unit id="9572417b1d5255e84a942b3aa87434cf833f506f" translate="yes" xml:space="preserve">
          <source>Word matching regards &lt;var&gt;string&lt;/var&gt; as a sequence of words, disregarding punctuation that separates them. It searches the buffer for the same sequence of words. Each word must be distinct in the buffer (searching for the word &amp;lsquo;</source>
          <target state="translated">单词匹配将 &lt;var&gt;string&lt;/var&gt; 视为单词序列，而忽略将它们分开的标点符号。它在缓冲区中搜索相同的单词序列。每个字词在缓冲区中必须是不同的（搜索字词&amp;ldquo;</target>
        </trans-unit>
        <trans-unit id="00040bab8a787438c2c0cf5248ac025642115fad" translate="yes" xml:space="preserve">
          <source>Work</source>
          <target state="translated">Work</target>
        </trans-unit>
        <trans-unit id="91af2af195b855fa2238bc0f535f365700aeec06" translate="yes" xml:space="preserve">
          <source>Working around the parser&amp;rsquo;s limitations.</source>
          <target state="translated">解决解析器的局限性。</target>
        </trans-unit>
        <trans-unit id="cb8d5d1705b3b9faf14d2484c5e4e44780d9afad" translate="yes" xml:space="preserve">
          <source>Write a documentation string for this command that describes the special commands available in this mode. See &lt;a href=&quot;mode-help#Mode-Help&quot;&gt;Mode Help&lt;/a&gt;.</source>
          <target state="translated">为此命令写一个文档字符串，描述此模式下可用的特殊命令。请参阅&lt;a href=&quot;mode-help#Mode-Help&quot;&gt;模式帮助&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="864a8eef75c1c894b7cab5feb09ac3718b4b9410" translate="yes" xml:space="preserve">
          <source>Write display actions without stress</source>
          <target state="translated">写出无压力的显示动作</target>
        </trans-unit>
        <trans-unit id="fd000642f00fc412d748e915b7fbf684c1227f4c" translate="yes" xml:space="preserve">
          <source>Writing C code for Emacs.</source>
          <target state="translated">为Emacs编写C代码。</target>
        </trans-unit>
        <trans-unit id="660c8694caa7ef2967d6e21173a5034c7875f8fd" translate="yes" xml:space="preserve">
          <source>Writing Code to Handle Errors</source>
          <target state="translated">编写代码来处理错误</target>
        </trans-unit>
        <trans-unit id="4af63b63f2a7ae43c3f6325bbc82300036f0434a" translate="yes" xml:space="preserve">
          <source>Writing Custom themes.</source>
          <target state="translated">编写自定义主题。</target>
        </trans-unit>
        <trans-unit id="f5c12b8b18b9d8c5848942dbd94e868460b590ae" translate="yes" xml:space="preserve">
          <source>Writing Dynamically-Loaded Modules</source>
          <target state="translated">编写动态加载的模块</target>
        </trans-unit>
        <trans-unit id="cad83bf497fdcbae89ec83a1f8895ba4a2abe72d" translate="yes" xml:space="preserve">
          <source>Writing Emacs Primitives</source>
          <target state="translated">编写Emacs基元</target>
        </trans-unit>
        <trans-unit id="fb433a8ef0470f85a2d44720d6d0064769e11ef9" translate="yes" xml:space="preserve">
          <source>Writing Module Functions</source>
          <target state="translated">编写模块函数</target>
        </trans-unit>
        <trans-unit id="8b1775056003275de1952faafc3b7f9ff185031c" translate="yes" xml:space="preserve">
          <source>Writing a good indentation function can be difficult and to a large extent it is still a black art. Many major mode authors will start by writing a simple indentation function that works for simple cases, for example by comparing with the indentation of the previous text line. For most programming languages that are not really line-based, this tends to scale very poorly: improving such a function to let it handle more diverse situations tends to become more and more difficult, resulting in the end with a large, complex, unmaintainable indentation function which nobody dares to touch.</source>
          <target state="translated">编写一个好的缩进函数是很难的,在很大程度上它还是一门黑科技。很多主要模式的作者会先写一个简单的缩进函数,对简单的情况有效,比如和前一个文本行的缩进进行比较。对于大多数不是真正基于行的编程语言来说,这种方式的扩展性往往很差:改进这样的函数,让它处理更多不同的情况,往往会变得越来越困难,最终导致一个庞大、复杂、不可维护的缩进函数,没有人敢碰。</target>
        </trans-unit>
        <trans-unit id="2a05f677633a2316415855a3c46061d24cc1bae7" translate="yes" xml:space="preserve">
          <source>Writing a module and integrating it into Emacs comprises the following tasks:</source>
          <target state="translated">编写一个模块并将其集成到Emacs中包括以下任务。</target>
        </trans-unit>
        <trans-unit id="87b5bc351f6388fc831c182bad1fddd07f5a27e5" translate="yes" xml:space="preserve">
          <source>Writing and using documentation strings.</source>
          <target state="translated">编写和使用文档字符串。</target>
        </trans-unit>
        <trans-unit id="e0cfa66332938119e483b2dd8067f05476ab0cd5" translate="yes" xml:space="preserve">
          <source>Writing changed buffers back into files.</source>
          <target state="translated">将改变的缓冲区写回文件中。</target>
        </trans-unit>
        <trans-unit id="a8d27d5a6ca7448a081f7d90c27269f1bafb63d4" translate="yes" xml:space="preserve">
          <source>Writing customization group definitions.</source>
          <target state="translated">编写自定义组定义。</target>
        </trans-unit>
        <trans-unit id="2676ae17d67dd3eff0363728ab580e2cc26726e5" translate="yes" xml:space="preserve">
          <source>Writing display actions can be a pain because one has to lump together action functions and action alists in one huge list. (Historical reasons prevented us from having &lt;code&gt;display-buffer&lt;/code&gt; support separate arguments for these.) It might help to memorize some basic forms like the ones listed below:</source>
          <target state="translated">编写显示动作可能会很痛苦，因为必须将动作功能和动作列表集中在一个庞大的列表中。（由于历史原因，我们无法让 &lt;code&gt;display-buffer&lt;/code&gt; 支持这些参数的单独参数。）这可能有助于记忆一些基本形式，例如以下所列形式：</target>
        </trans-unit>
        <trans-unit id="c745756ceb786034792158e8cc61d7e702e6c1d7" translate="yes" xml:space="preserve">
          <source>Writing initialization code for the module.</source>
          <target state="translated">编写模块的初始化代码。</target>
        </trans-unit>
        <trans-unit id="d56a22849f994b20f6600cd3460bcd34f83598c7" translate="yes" xml:space="preserve">
          <source>Writing loadable modules for Emacs.</source>
          <target state="translated">为Emacs编写可加载模块。</target>
        </trans-unit>
        <trans-unit id="959325f732b116da9f4c17d9d52b38658b0cbc9a" translate="yes" xml:space="preserve">
          <source>Writing new files from parts of buffers.</source>
          <target state="translated">从部分缓冲区中写入新文件。</target>
        </trans-unit>
        <trans-unit id="5bf31f22f8e9138838ff5aca48a3d16351326757" translate="yes" xml:space="preserve">
          <source>Writing one or more module functions.</source>
          <target state="translated">编写一个或多个模块函数。</target>
        </trans-unit>
        <trans-unit id="626850315f11a109b89b0e2ca304b47d1ebd1583" translate="yes" xml:space="preserve">
          <source>Writing to Files</source>
          <target state="translated">写入文件</target>
        </trans-unit>
        <trans-unit id="df13e2249d0344c5995feed860c249b907bbf885" translate="yes" xml:space="preserve">
          <source>Writing your own completion function.</source>
          <target state="translated">编写自己的完成功能。</target>
        </trans-unit>
        <trans-unit id="81cecdbcf5a884358d6d64dd07151bcc864ea3cb" translate="yes" xml:space="preserve">
          <source>Wrong Time</source>
          <target state="translated">错误的时间</target>
        </trans-unit>
        <trans-unit id="847312eff98f615b33d04af640ff3b0aef444a8d" translate="yes" xml:space="preserve">
          <source>Wrong number of arguments</source>
          <target state="translated">错误的参数数量</target>
        </trans-unit>
        <trans-unit id="6785d9d939e22abdd99b9e4cc3100ddf46a32841" translate="yes" xml:space="preserve">
          <source>Wrong type argument</source>
          <target state="translated">错误的类型参数</target>
        </trans-unit>
        <trans-unit id="1116afb51e066f31e7f64320374c74be96ef6620" translate="yes" xml:space="preserve">
          <source>Wrote &lt;var&gt;filename&lt;/var&gt;</source>
          <target state="translated">写 &lt;var&gt;filename&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="c032adc1ff629c9b66f22749ad667e6beadf144b" translate="yes" xml:space="preserve">
          <source>X</source>
          <target state="translated">X</target>
        </trans-unit>
        <trans-unit id="701b9b6003d2ac52c5714c24742c56c8bfed8cfd" translate="yes" xml:space="preserve">
          <source>X Resources</source>
          <target state="translated">X资源</target>
        </trans-unit>
        <trans-unit id="91ad8eeae3f28e745985c0e4c09aa39f01cb0d2a" translate="yes" xml:space="preserve">
          <source>X resource settings typically apply to all frames. If you want to specify some X resources solely for the sake of the initial frame, and you don&amp;rsquo;t want them to apply to subsequent frames, here&amp;rsquo;s how to achieve this. Specify parameters in &lt;code&gt;default-frame-alist&lt;/code&gt; to override the X resources for subsequent frames; then, to prevent these from affecting the initial frame, specify the same parameters in &lt;code&gt;initial-frame-alist&lt;/code&gt; with values that match the X resources.</source>
          <target state="translated">X资源设置通常适用于所有帧。如果您仅出于初始框架的目的而指定一些X资源，并且不希望它们应用于后续框架，则可通过以下方法实现此目的。在 &lt;code&gt;default-frame-alist&lt;/code&gt; 中指定参数以覆盖后续帧的X资源；然后，为防止这些影响初始帧，请在 &lt;code&gt;initial-frame-alist&lt;/code&gt; 与X资源相匹配的相同参数。</target>
        </trans-unit>
        <trans-unit id="295b502d3fe0cbfa2c47b23759be43a0d24bc09f" translate="yes" xml:space="preserve">
          <source>XBM Images</source>
          <target state="translated">XBM图片</target>
        </trans-unit>
        <trans-unit id="c0aa9ef764d832b80428d756a731a94251b0e3a1" translate="yes" xml:space="preserve">
          <source>XML</source>
          <target state="translated">XML</target>
        </trans-unit>
        <trans-unit id="6b648f9c53c1f8ff2d73b0125b92611fa1d058b9" translate="yes" xml:space="preserve">
          <source>XPM Images</source>
          <target state="translated">XPM图像</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
