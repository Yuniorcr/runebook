<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="8a9af4121f78134bb685216fbf44bd4f5d826951" translate="yes" xml:space="preserve">
          <source>An abstract base class which inherits from &lt;a href=&quot;#importlib.abc.InspectLoader&quot;&gt;&lt;code&gt;InspectLoader&lt;/code&gt;&lt;/a&gt; that, when implemented, helps a module to be executed as a script. The ABC represents an optional &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-17&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">从&lt;a href=&quot;#importlib.abc.InspectLoader&quot;&gt; &lt;code&gt;InspectLoader&lt;/code&gt; &lt;/a&gt;继承的抽象基类，在实现时可以帮助将模块作为脚本执行。ABC代表可选的&lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-17&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt;协议。</target>
        </trans-unit>
        <trans-unit id="11de885f0ab5a2d6a8da413f025f1f42a92914a8" translate="yes" xml:space="preserve">
          <source>An abstract base class which inherits from &lt;a href=&quot;#importlib.abc.ResourceLoader&quot;&gt;&lt;code&gt;ResourceLoader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#importlib.abc.ExecutionLoader&quot;&gt;&lt;code&gt;ExecutionLoader&lt;/code&gt;&lt;/a&gt;, providing concrete implementations of &lt;a href=&quot;#importlib.abc.ResourceLoader.get_data&quot;&gt;&lt;code&gt;ResourceLoader.get_data()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#importlib.abc.ExecutionLoader.get_filename&quot;&gt;&lt;code&gt;ExecutionLoader.get_filename()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">从&lt;a href=&quot;#importlib.abc.ResourceLoader&quot;&gt; &lt;code&gt;ResourceLoader&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#importlib.abc.ExecutionLoader&quot;&gt; &lt;code&gt;ExecutionLoader&lt;/code&gt; &lt;/a&gt;继承的抽象基类，提供&lt;a href=&quot;#importlib.abc.ResourceLoader.get_data&quot;&gt; &lt;code&gt;ResourceLoader.get_data()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#importlib.abc.ExecutionLoader.get_filename&quot;&gt; &lt;code&gt;ExecutionLoader.get_filename()&lt;/code&gt; 的&lt;/a&gt;具体实现。</target>
        </trans-unit>
        <trans-unit id="955770255554b096c2a2d0d00989cc8cb2114744" translate="yes" xml:space="preserve">
          <source>An abstract class that provides methods to execute calls asynchronously. It should not be used directly, but through its concrete subclasses.</source>
          <target state="translated">一个抽象类,它提供了异步执行调用的方法。它不应该直接使用,而是通过它的具体子类来使用。</target>
        </trans-unit>
        <trans-unit id="f134861215475c0febc28a88cff9f900d434fd5d" translate="yes" xml:space="preserve">
          <source>An abstract example would be the following to ensure correct resource management:</source>
          <target state="translated">一个抽象的例子是,为了确保正确的资源管理。</target>
        </trans-unit>
        <trans-unit id="7c833ccaac11f4d73ed6358d2404695fb39851cf" translate="yes" xml:space="preserve">
          <source>An abstract method for finding a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; for the specified module. Originally specified in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt;, this method was meant for use in &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt; and in the path-based import subsystem.</source>
          <target state="translated">查找指定模块的&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;加载程序&lt;/a&gt;的抽象方法。该方法最初在&lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;PEP 302中&lt;/strong&gt;&lt;/a&gt;指定，旨在用于&lt;a href=&quot;sys#sys.meta_path&quot;&gt; &lt;code&gt;sys.meta_path&lt;/code&gt; &lt;/a&gt;和基于路径的导入子系统。</target>
        </trans-unit>
        <trans-unit id="b301e64f6be02c979b39c0a7f2f8742151baec4c" translate="yes" xml:space="preserve">
          <source>An abstract method for finding a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module-spec&quot;&gt;spec&lt;/a&gt; for the specified module. If this is a top-level import, &lt;em&gt;path&lt;/em&gt; will be &lt;code&gt;None&lt;/code&gt;. Otherwise, this is a search for a subpackage or module and &lt;em&gt;path&lt;/em&gt; will be the value of &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__path__&quot;&gt;&lt;code&gt;__path__&lt;/code&gt;&lt;/a&gt; from the parent package. If a spec cannot be found, &lt;code&gt;None&lt;/code&gt; is returned. When passed in, &lt;code&gt;target&lt;/code&gt; is a module object that the finder may use to make a more educated guess about what spec to return. &lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt;&lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt;&lt;/a&gt; may be useful for implementing concrete &lt;code&gt;MetaPathFinders&lt;/code&gt;.</source>
          <target state="translated">查找指定模块&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module-spec&quot;&gt;规格&lt;/a&gt;的抽象方法。如果这是顶级导入，则&lt;em&gt;路径&lt;/em&gt;将为 &lt;code&gt;None&lt;/code&gt; 。否则，这是在搜索子包或模块，并且&lt;em&gt;路径&lt;/em&gt;将是父包中&lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__path__&quot;&gt; &lt;code&gt;__path__&lt;/code&gt; &lt;/a&gt;的值。如果找不到规范，则返回 &lt;code&gt;None&lt;/code&gt; 。传入时， &lt;code&gt;target&lt;/code&gt; 是发现者可以用来对返回的规格进行更有根据的猜测的模块对象。&lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt; &lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt; &lt;/a&gt;对于实现具体的 &lt;code&gt;MetaPathFinders&lt;/code&gt; 可能有用。</target>
        </trans-unit>
        <trans-unit id="dd63589c5c5bc876ea90a7b05def4d9308abd0ce" translate="yes" xml:space="preserve">
          <source>An abstract method for finding a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module-spec&quot;&gt;spec&lt;/a&gt; for the specified module. The finder will search for the module only within the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-entry&quot;&gt;path entry&lt;/a&gt; to which it is assigned. If a spec cannot be found, &lt;code&gt;None&lt;/code&gt; is returned. When passed in, &lt;code&gt;target&lt;/code&gt; is a module object that the finder may use to make a more educated guess about what spec to return. &lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt;&lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt;&lt;/a&gt; may be useful for implementing concrete &lt;code&gt;PathEntryFinders&lt;/code&gt;.</source>
          <target state="translated">查找指定模块&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module-spec&quot;&gt;规格&lt;/a&gt;的抽象方法。查找器将仅在分配该模块的&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-entry&quot;&gt;路径条目&lt;/a&gt;内搜索该模块。如果找不到规范，则返回 &lt;code&gt;None&lt;/code&gt; 。传入时， &lt;code&gt;target&lt;/code&gt; 是查找器可以用来对返回的规格进行更有根据的猜测的模块对象。&lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt; &lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt; &lt;/a&gt;对于实现具体的 &lt;code&gt;PathEntryFinders&lt;/code&gt; 可能有用。</target>
        </trans-unit>
        <trans-unit id="4ec7fa64597ec4d9362aa636f6c3e9342c5c3475" translate="yes" xml:space="preserve">
          <source>An abstract method for finding a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; for the specified module. Originally specified in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt;, this method was meant for use in &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt; and in the path-based import subsystem.</source>
          <target state="translated">查找指定模块的&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;加载程序&lt;/a&gt;的抽象方法。该方法最初在&lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;PEP 302中&lt;/strong&gt;&lt;/a&gt;指定，旨在用于&lt;a href=&quot;sys#sys.meta_path&quot;&gt; &lt;code&gt;sys.meta_path&lt;/code&gt; &lt;/a&gt;和基于路径的导入子系统。</target>
        </trans-unit>
        <trans-unit id="a078fcb028abf664294af6a6107d24c54ea703c8" translate="yes" xml:space="preserve">
          <source>An abstract method for finding a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-module-spec&quot;&gt;spec&lt;/a&gt; for the specified module. If this is a top-level import, &lt;em&gt;path&lt;/em&gt; will be &lt;code&gt;None&lt;/code&gt;. Otherwise, this is a search for a subpackage or module and &lt;em&gt;path&lt;/em&gt; will be the value of &lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__path__&quot;&gt;&lt;code&gt;__path__&lt;/code&gt;&lt;/a&gt; from the parent package. If a spec cannot be found, &lt;code&gt;None&lt;/code&gt; is returned. When passed in, &lt;code&gt;target&lt;/code&gt; is a module object that the finder may use to make a more educated guess about what spec to return. &lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt;&lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt;&lt;/a&gt; may be useful for implementing concrete &lt;code&gt;MetaPathFinders&lt;/code&gt;.</source>
          <target state="translated">查找指定模块&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-module-spec&quot;&gt;规格&lt;/a&gt;的抽象方法。如果这是顶级导入，则&lt;em&gt;路径&lt;/em&gt;将为 &lt;code&gt;None&lt;/code&gt; 。否则，这是在搜索子包或模块，并且&lt;em&gt;路径&lt;/em&gt;将是父包中&lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__path__&quot;&gt; &lt;code&gt;__path__&lt;/code&gt; &lt;/a&gt;的值。如果找不到规范，则返回 &lt;code&gt;None&lt;/code&gt; 。传入时， &lt;code&gt;target&lt;/code&gt; 是查找器可以用来对返回的规格进行更有根据的猜测的模块对象。&lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt; &lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt; &lt;/a&gt;对于实现具体的 &lt;code&gt;MetaPathFinders&lt;/code&gt; 可能有用。</target>
        </trans-unit>
        <trans-unit id="38df08fcaf14d4d9addb424c44c752bc5b9d7929" translate="yes" xml:space="preserve">
          <source>An abstract method for finding a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-module-spec&quot;&gt;spec&lt;/a&gt; for the specified module. The finder will search for the module only within the &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-entry&quot;&gt;path entry&lt;/a&gt; to which it is assigned. If a spec cannot be found, &lt;code&gt;None&lt;/code&gt; is returned. When passed in, &lt;code&gt;target&lt;/code&gt; is a module object that the finder may use to make a more educated guess about what spec to return. &lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt;&lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt;&lt;/a&gt; may be useful for implementing concrete &lt;code&gt;PathEntryFinders&lt;/code&gt;.</source>
          <target state="translated">查找指定模块&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-module-spec&quot;&gt;规格&lt;/a&gt;的抽象方法。查找程序将仅在分配该模块的&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-entry&quot;&gt;路径条目&lt;/a&gt;内搜索该模块。如果找不到规范，则返回 &lt;code&gt;None&lt;/code&gt; 。传入时， &lt;code&gt;target&lt;/code&gt; 是查找器可以用来对返回的规格进行更有根据的猜测的模块对象。&lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt; &lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt; &lt;/a&gt;对于实现具体的 &lt;code&gt;PathEntryFinders&lt;/code&gt; 可能有用。</target>
        </trans-unit>
        <trans-unit id="b518cc20074a6e012522371b44d4863fba9c6708" translate="yes" xml:space="preserve">
          <source>An abstract method that executes the module in its own namespace when a module is imported or reloaded. The module should already be initialized when &lt;code&gt;exec_module()&lt;/code&gt; is called. When this method exists, &lt;a href=&quot;#importlib.abc.Loader.create_module&quot;&gt;&lt;code&gt;create_module()&lt;/code&gt;&lt;/a&gt; must be defined.</source>
          <target state="translated">导入或重新加载模块时，将在其自己的名称空间中执行模块的抽象方法。调用 &lt;code&gt;exec_module()&lt;/code&gt; 时，模块应已初始化。存在此方法时，必须定义&lt;a href=&quot;#importlib.abc.Loader.create_module&quot;&gt; &lt;code&gt;create_module()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e6bf9688b7b004247ae61425719c8753e917df0c" translate="yes" xml:space="preserve">
          <source>An abstract method that is to return the value of &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__file__&quot;&gt;&lt;code&gt;__file__&lt;/code&gt;&lt;/a&gt; for the specified module. If no path is available, &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">一种抽象方法，该方法返回指定模块的&lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__file__&quot;&gt; &lt;code&gt;__file__&lt;/code&gt; &lt;/a&gt;的值。如果没有可用路径，则会引发&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="20672959b0be97ef0818210d53eef4fcf8b86803" translate="yes" xml:space="preserve">
          <source>An abstract method that is to return the value of &lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__file__&quot;&gt;&lt;code&gt;__file__&lt;/code&gt;&lt;/a&gt; for the specified module. If no path is available, &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">一种抽象方法，该方法返回指定模块的&lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__file__&quot;&gt; &lt;code&gt;__file__&lt;/code&gt; &lt;/a&gt;的值。如果没有可用路径，则会引发&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9546a7a2c25822b3aefc76fd55131bcac817f789" translate="yes" xml:space="preserve">
          <source>An abstract method to return a true value if the module is a package, a false value otherwise. &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; is raised if the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; cannot find the module.</source>
          <target state="translated">如果模块是包，则返回真值的抽象方法，否则返回假值。如果&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;加载程序&lt;/a&gt;找不到模块，则会引发&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="edbcbbce2983a4d0aa1b211eba4bdaace496fbb5" translate="yes" xml:space="preserve">
          <source>An abstract method to return a true value if the module is a package, a false value otherwise. &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; is raised if the &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; cannot find the module.</source>
          <target state="translated">如果模块是包，则返回一个真值的抽象方法，否则返回一个假值。如果&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;加载程序&lt;/a&gt;找不到模块，则会引发&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="800c0095cbad1a18da2d314befc33c5c39978794" translate="yes" xml:space="preserve">
          <source>An abstract method to return the bytes for the data located at &lt;em&gt;path&lt;/em&gt;. Loaders that have a file-like storage back-end that allows storing arbitrary data can implement this abstract method to give direct access to the data stored. &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is to be raised if the &lt;em&gt;path&lt;/em&gt; cannot be found. The &lt;em&gt;path&lt;/em&gt; is expected to be constructed using a module&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__file__&quot;&gt;&lt;code&gt;__file__&lt;/code&gt;&lt;/a&gt; attribute or an item from a package&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__path__&quot;&gt;&lt;code&gt;__path__&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一种用于返回位于&lt;em&gt;path&lt;/em&gt;的数据的字节的抽象方法。具有允许存储任意数据的类似文件的存储后端的加载程序可以实现此抽象方法，以直接访问存储的数据。如果找不到&lt;em&gt;路径&lt;/em&gt;，将引发&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;。的&lt;em&gt;路径&lt;/em&gt;预计使用模块来构造&lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__file__&quot;&gt; &lt;code&gt;__file__&lt;/code&gt; &lt;/a&gt;属性或从包装中的一个项目&lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__path__&quot;&gt; &lt;code&gt;__path__&lt;/code&gt; &lt;/a&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="09482733ccd9350dc7770f132c5a1e5936dc7a07" translate="yes" xml:space="preserve">
          <source>An abstract method to return the bytes for the data located at &lt;em&gt;path&lt;/em&gt;. Loaders that have a file-like storage back-end that allows storing arbitrary data can implement this abstract method to give direct access to the data stored. &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is to be raised if the &lt;em&gt;path&lt;/em&gt; cannot be found. The &lt;em&gt;path&lt;/em&gt; is expected to be constructed using a module&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__file__&quot;&gt;&lt;code&gt;__file__&lt;/code&gt;&lt;/a&gt; attribute or an item from a package&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__path__&quot;&gt;&lt;code&gt;__path__&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一种用于返回位于&lt;em&gt;path&lt;/em&gt;的数据的字节的抽象方法。具有允许存储任意数据的类似文件的存储后端的加载程序可以实现此抽象方法，以直接访问所存储的数据。如果找不到&lt;em&gt;路径&lt;/em&gt;，将引发&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;。的&lt;em&gt;路径&lt;/em&gt;预计使用模块来构造&lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__file__&quot;&gt; &lt;code&gt;__file__&lt;/code&gt; &lt;/a&gt;属性或从包装中的一个项目&lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__path__&quot;&gt; &lt;code&gt;__path__&lt;/code&gt; &lt;/a&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="563d61fc457a3bfb950c5833afc59f047a9c4836" translate="yes" xml:space="preserve">
          <source>An abstract method to return the source of a module. It is returned as a text string using &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-universal-newlines&quot;&gt;universal newlines&lt;/a&gt;, translating all recognized line separators into &lt;code&gt;'\n'&lt;/code&gt; characters. Returns &lt;code&gt;None&lt;/code&gt; if no source is available (e.g. a built-in module). Raises &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; if the loader cannot find the module specified.</source>
          <target state="translated">返回模块源的抽象方法。它使用&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-universal-newlines&quot;&gt;通用换行符&lt;/a&gt;作为文本字符串返回，将所有公认的行分隔符转换为 &lt;code&gt;'\n'&lt;/code&gt; 字符。如果没有可用的源（例如，内置模块），则返回 &lt;code&gt;None&lt;/code&gt; 。如果加载器找不到指定的模块，则引发&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6b19fc2d056eee4a7eec499bcdca3418e2a9c84c" translate="yes" xml:space="preserve">
          <source>An abstract method to return the source of a module. It is returned as a text string using &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-universal-newlines&quot;&gt;universal newlines&lt;/a&gt;, translating all recognized line separators into &lt;code&gt;'\n'&lt;/code&gt; characters. Returns &lt;code&gt;None&lt;/code&gt; if no source is available (e.g. a built-in module). Raises &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; if the loader cannot find the module specified.</source>
          <target state="translated">返回模块源的抽象方法。它使用&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-universal-newlines&quot;&gt;通用换行符&lt;/a&gt;作为文本字符串返回，将所有公认的行分隔符转换为 &lt;code&gt;'\n'&lt;/code&gt; 字符。如果没有可用的源（例如，内置模块），则返回 &lt;code&gt;None&lt;/code&gt; 。如果加载器找不到指定的模块，则引发&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6dc181f14f2a6fd494fcdfa6748662a11c18b1fd" translate="yes" xml:space="preserve">
          <source>An abstract syntax tree can be generated by passing &lt;a href=&quot;#ast.PyCF_ONLY_AST&quot;&gt;&lt;code&gt;ast.PyCF_ONLY_AST&lt;/code&gt;&lt;/a&gt; as a flag to the &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt; built-in function, or using the &lt;a href=&quot;#ast.parse&quot;&gt;&lt;code&gt;parse()&lt;/code&gt;&lt;/a&gt; helper provided in this module. The result will be a tree of objects whose classes all inherit from &lt;a href=&quot;#ast.AST&quot;&gt;&lt;code&gt;ast.AST&lt;/code&gt;&lt;/a&gt;. An abstract syntax tree can be compiled into a Python code object using the built-in &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">可以通过将&lt;a href=&quot;#ast.PyCF_ONLY_AST&quot;&gt; &lt;code&gt;ast.PyCF_ONLY_AST&lt;/code&gt; &lt;/a&gt;作为标志传递给&lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;内置函数，或使用此模块中提供的&lt;a href=&quot;#ast.parse&quot;&gt; &lt;code&gt;parse()&lt;/code&gt; &lt;/a&gt;帮助器来生成抽象语法树。结果将是一棵对象树，其所有类均继承自&lt;a href=&quot;#ast.AST&quot;&gt; &lt;code&gt;ast.AST&lt;/code&gt; &lt;/a&gt;。可以使用内置的&lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;函数将抽象语法树编译为Python代码对象。</target>
        </trans-unit>
        <trans-unit id="9ce1167dff3e80e3af3cc98084356e72a0bd3a36" translate="yes" xml:space="preserve">
          <source>An abstract syntax tree can be generated by passing &lt;code&gt;ast.PyCF_ONLY_AST&lt;/code&gt; as a flag to the &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt; built-in function, or using the &lt;a href=&quot;#ast.parse&quot;&gt;&lt;code&gt;parse()&lt;/code&gt;&lt;/a&gt; helper provided in this module. The result will be a tree of objects whose classes all inherit from &lt;a href=&quot;#ast.AST&quot;&gt;&lt;code&gt;ast.AST&lt;/code&gt;&lt;/a&gt;. An abstract syntax tree can be compiled into a Python code object using the built-in &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">通过将 &lt;code&gt;ast.PyCF_ONLY_AST&lt;/code&gt; 作为标志传递给&lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;内置函数，或使用此模块中提供的&lt;a href=&quot;#ast.parse&quot;&gt; &lt;code&gt;parse()&lt;/code&gt; &lt;/a&gt;帮助器，可以生成抽象语法树。结果将是一棵对象树，其所有类均继承自&lt;a href=&quot;#ast.AST&quot;&gt; &lt;code&gt;ast.AST&lt;/code&gt; &lt;/a&gt;。可以使用内置的&lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;函数将抽象语法树编译为Python代码对象。</target>
        </trans-unit>
        <trans-unit id="70da3ef21c99fc01e1c391e4ec0a45bb54025f8a" translate="yes" xml:space="preserve">
          <source>An abstraction of a pipeline.</source>
          <target state="translated">管道的抽象化。</target>
        </trans-unit>
        <trans-unit id="2b4487c478caae94a1d2a055c39dc744680ef17b" translate="yes" xml:space="preserve">
          <source>An abstraction to represent a connection between a parent and its child OS process.</source>
          <target state="translated">一个抽象的概念,用来表示父进程和子进程之间的连接。</target>
        </trans-unit>
        <trans-unit id="70554b33f749f867144e33b7010322e8a2d9c2f6" translate="yes" xml:space="preserve">
          <source>An additional example of normalization:</source>
          <target state="translated">另一个正常化的例子。</target>
        </trans-unit>
        <trans-unit id="1f8b93a1b318ef3b489264436cd2920634f37e5c" translate="yes" xml:space="preserve">
          <source>An additional section describes the exceptions defined for working with the DOM in Python.</source>
          <target state="translated">另外一节描述了在Python中使用DOM时定义的异常。</target>
        </trans-unit>
        <trans-unit id="7de5be9d95857a8f7fae738465f4f7a4ecbfe0bd" translate="yes" xml:space="preserve">
          <source>An additional utility function is provided to convert a file&amp;rsquo;s mode in a human readable string:</source>
          <target state="translated">提供了附加的实用程序功能，以人类可读的字符串形式转换文件的模式：</target>
        </trans-unit>
        <trans-unit id="b4bc718c3660ae312ee29fc3f760532b2ef990dd" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;#ssl.SSLCertVerificationError&quot;&gt;&lt;code&gt;SSLCertVerificationError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ssl.SSLCertVerificationError&quot;&gt; &lt;code&gt;SSLCertVerificationError&lt;/code&gt; &lt;/a&gt;的别名。</target>
        </trans-unit>
        <trans-unit id="d8d058f0ff4ac1d3e35f124836eb7543d9d30422" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;#tkinter.ttk.Treeview.move&quot;&gt;&lt;code&gt;Treeview.move()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tkinter.ttk.Treeview.move&quot;&gt; &lt;code&gt;Treeview.move()&lt;/code&gt; &lt;/a&gt;的别名。</target>
        </trans-unit>
        <trans-unit id="4f34bb1fd3121bf24f28736c112a6ea7ecb860b5" translate="yes" xml:space="preserve">
          <source>An alias for the built-in &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">内置&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;异常的别名。</target>
        </trans-unit>
        <trans-unit id="ee952a3e338de8476144642c2ed1be940175b262" translate="yes" xml:space="preserve">
          <source>An alias to &lt;a href=&quot;collections.abc#collections.abc.Hashable&quot;&gt;&lt;code&gt;collections.abc.Hashable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;collections.abc#collections.abc.Hashable&quot;&gt; &lt;code&gt;collections.abc.Hashable&lt;/code&gt; &lt;/a&gt;的别名</target>
        </trans-unit>
        <trans-unit id="72cf7f2af19bdbb20c360e706340e6ea11885d97" translate="yes" xml:space="preserve">
          <source>An alias to &lt;a href=&quot;collections.abc#collections.abc.Sized&quot;&gt;&lt;code&gt;collections.abc.Sized&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;collections.abc#collections.abc.Sized&quot;&gt; &lt;code&gt;collections.abc.Sized&lt;/code&gt; &lt;/a&gt;的别名</target>
        </trans-unit>
        <trans-unit id="a6540aa0e6b78ff35eaf43cee039535142533b79" translate="yes" xml:space="preserve">
          <source>An alternate constructor that bypasses the constructor&amp;rsquo;s cache. It is identical to the primary constructor, but returns a new object on each call. This is most likely to be useful for testing or demonstration purposes, but it can also be used to create a system with a different cache invalidation strategy.</source>
          <target state="translated">替代构造函数，绕过构造函数的缓存。它与主构造函数相同，但是在每次调用时都返回一个新对象。这最有可能用于测试或演示目的，但也可以用于创建具有不同缓存无效化策略的系统。</target>
        </trans-unit>
        <trans-unit id="a63391b1faab340a2bb4934be82d08de2b51040f" translate="yes" xml:space="preserve">
          <source>An alternative character used by the operating system to separate pathname components, or &lt;code&gt;None&lt;/code&gt; if only one separator character exists. This is set to &lt;code&gt;'/'&lt;/code&gt; on Windows systems where &lt;code&gt;sep&lt;/code&gt; is a backslash. Also available via &lt;a href=&quot;os.path#module-os.path&quot;&gt;&lt;code&gt;os.path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">操作系统用来分隔路径名组件的替代字符；如果仅存在一个分隔符，则为 &lt;code&gt;None&lt;/code&gt; 。在 &lt;code&gt;sep&lt;/code&gt; 是反斜杠的Windows系统上，将其设置为 &lt;code&gt;'/'&lt;/code&gt; 。也可以通过&lt;a href=&quot;os.path#module-os.path&quot;&gt; &lt;code&gt;os.path&lt;/code&gt; 获得&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a3d5b628a54d39bf8ee6093f8e0d37a9d4cee60c" translate="yes" xml:space="preserve">
          <source>An alternative dictionary type can be used for example to sort sections and options on write-back.</source>
          <target state="translated">另一种字典类型可用于例如对回写的部分和选项进行排序。</target>
        </trans-unit>
        <trans-unit id="7d850059763c1f7e51f2d1d11cf0427ad5eded88" translate="yes" xml:space="preserve">
          <source>An alternative event loop policy that uses the &lt;a href=&quot;asyncio-eventloop#asyncio.ProactorEventLoop&quot;&gt;&lt;code&gt;ProactorEventLoop&lt;/code&gt;&lt;/a&gt; event loop implementation.</source>
          <target state="translated">使用&lt;a href=&quot;asyncio-eventloop#asyncio.ProactorEventLoop&quot;&gt; &lt;code&gt;ProactorEventLoop&lt;/code&gt; &lt;/a&gt;事件循环实现的替代事件循环策略。</target>
        </trans-unit>
        <trans-unit id="84083d9dc2f2455c7f8ae18733c112f9f4922f99" translate="yes" xml:space="preserve">
          <source>An alternative event loop policy that uses the &lt;a href=&quot;asyncio-eventloop#asyncio.SelectorEventLoop&quot;&gt;&lt;code&gt;SelectorEventLoop&lt;/code&gt;&lt;/a&gt; event loop implementation.</source>
          <target state="translated">使用&lt;a href=&quot;asyncio-eventloop#asyncio.SelectorEventLoop&quot;&gt; &lt;code&gt;SelectorEventLoop&lt;/code&gt; &lt;/a&gt;事件循环实现的替代事件循环策略。</target>
        </trans-unit>
        <trans-unit id="8fe9d34c1b43e8d3bc59379cabc74d88762dfb06" translate="yes" xml:space="preserve">
          <source>An alternative handler for interpolation which implements a more advanced syntax, used for instance in &lt;code&gt;zc.buildout&lt;/code&gt;. Extended interpolation is using &lt;code&gt;${section:option}&lt;/code&gt; to denote a value from a foreign section. Interpolation can span multiple levels. For convenience, if the &lt;code&gt;section:&lt;/code&gt; part is omitted, interpolation defaults to the current section (and possibly the default values from the special section).</source>
          <target state="translated">插值的替代处理程序，它实现了更高级的语法，例如在 &lt;code&gt;zc.buildout&lt;/code&gt; 中使用。扩展插值使用 &lt;code&gt;${section:option}&lt;/code&gt; 表示来自外部部分的值。插值可以跨越多个级别。为方便起见，如果省略 &lt;code&gt;section:&lt;/code&gt; part，则插值默认为当前部分（可能还有特殊部分的默认值）。</target>
        </trans-unit>
        <trans-unit id="558c117d3161559bd859666a91b9bb66c414c1f5" translate="yes" xml:space="preserve">
          <source>An alternative header can be specified in the &lt;em&gt;header&lt;/em&gt; argument. When the &lt;em&gt;Content-Type&lt;/em&gt; header is set a &lt;em&gt;MIME-Version&lt;/em&gt; header is also added.</source>
          <target state="translated">可以在&lt;em&gt;header&lt;/em&gt;参数中指定备用头。设置&lt;em&gt;Content-Type&lt;/em&gt;标头后，还将添加一个&lt;em&gt;MIME-Version&lt;/em&gt;标头。</target>
        </trans-unit>
        <trans-unit id="f5ba665411f071ae5d955adbe5282d9694eae5c4" translate="yes" xml:space="preserve">
          <source>An alternative name can be specified with &lt;code&gt;metavar&lt;/code&gt;:</source>
          <target state="translated">可以使用 &lt;code&gt;metavar&lt;/code&gt; 指定备用名称：</target>
        </trans-unit>
        <trans-unit id="6416917ffae045c2865eba964ef88e695b8f701a" translate="yes" xml:space="preserve">
          <source>An alternative request handler class that makes use of streams (file-like objects that simplify communication by providing the standard file interface):</source>
          <target state="translated">一个利用流(类似文件的对象,通过提供标准的文件接口来简化通信)的替代请求处理类。</target>
        </trans-unit>
        <trans-unit id="affd50cda4dcf68b768688e4f672192d92888ed0" translate="yes" xml:space="preserve">
          <source>An analogue of &lt;a href=&quot;threading#threading.current_thread&quot;&gt;&lt;code&gt;threading.current_thread()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">类似的&lt;a href=&quot;threading#threading.current_thread&quot;&gt; &lt;code&gt;threading.current_thread()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8e8b2aaa418b53858967709906f3a78f69197dab" translate="yes" xml:space="preserve">
          <source>An application which needs both ST and code objects can package this code into readily available functions:</source>
          <target state="translated">一个同时需要ST和代码对象的应用程序可以将这些代码打包成现成的函数。</target>
        </trans-unit>
        <trans-unit id="c5a68e4a13d841bc92021b61944ccadf166e7e79" translate="yes" xml:space="preserve">
          <source>An appropriate &lt;code&gt;Content-Type&lt;/code&gt; header should be included if the &lt;em&gt;data&lt;/em&gt; argument is present. If this header has not been provided and &lt;em&gt;data&lt;/em&gt; is not None, &lt;code&gt;Content-Type: application/x-www-form-urlencoded&lt;/code&gt; will be added as a default.</source>
          <target state="translated">如果存在&lt;em&gt;data&lt;/em&gt;参数，则应包括适当的 &lt;code&gt;Content-Type&lt;/code&gt; 标头。如果未提供此标头并且&lt;em&gt;数据&lt;/em&gt;不是None，则默认添加 &lt;code&gt;Content-Type: application/x-www-form-urlencoded&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c475a455c39ee03168c8c78b435dcd38ae70e3df" translate="yes" xml:space="preserve">
          <source>An argument for using the original mbox format rather than a variation.</source>
          <target state="translated">争论使用原始的mbox格式,而不是变体。</target>
        </trans-unit>
        <trans-unit id="6ec278a245be82c537401d0aff88bd1ef6e21621" translate="yes" xml:space="preserve">
          <source>An array that represents the abbreviated days of the week in the current locale.</source>
          <target state="translated">一个数组,表示当前地区的一周的缩写日。</target>
        </trans-unit>
        <trans-unit id="2ba535593adca4dfcb800d6a4065c1b6b73e79fa" translate="yes" xml:space="preserve">
          <source>An array that represents the abbreviated months of the year in the current locale. This follows normal convention of January being month number 1, so it has a length of 13 and &lt;code&gt;month_abbr[0]&lt;/code&gt; is the empty string.</source>
          <target state="translated">表示当前语言环境中一年中缩写月份的数组。这遵循一月的常规惯例，即月份号1，因此长度为13， &lt;code&gt;month_abbr[0]&lt;/code&gt; 为空字符串。</target>
        </trans-unit>
        <trans-unit id="fcf4961a8aabb7adc6bcd479568762d6de58a7a7" translate="yes" xml:space="preserve">
          <source>An array that represents the days of the week in the current locale.</source>
          <target state="translated">一个代表当前地区的星期的数组。</target>
        </trans-unit>
        <trans-unit id="f186d41c71a389deb5bc2ad8c9d947ed1464a0a8" translate="yes" xml:space="preserve">
          <source>An array that represents the months of the year in the current locale. This follows normal convention of January being month number 1, so it has a length of 13 and &lt;code&gt;month_name[0]&lt;/code&gt; is the empty string.</source>
          <target state="translated">代表当前语言环境中一年中月份的数组。这遵循一月的常规约定，即月份号1，因此长度为13， &lt;code&gt;month_name[0]&lt;/code&gt; 为空字符串。</target>
        </trans-unit>
        <trans-unit id="4945cd01dba97e9df97bb4a5e0472f4c79b63619" translate="yes" xml:space="preserve">
          <source>An assertion. &lt;code&gt;test&lt;/code&gt; holds the condition, such as a &lt;a href=&quot;#ast.Compare&quot;&gt;&lt;code&gt;Compare&lt;/code&gt;&lt;/a&gt; node. &lt;code&gt;msg&lt;/code&gt; holds the failure message.</source>
          <target state="translated">一个断言。 &lt;code&gt;test&lt;/code&gt; 保存条件，例如&amp;ldquo;&lt;a href=&quot;#ast.Compare&quot;&gt; &lt;code&gt;Compare&lt;/code&gt; &lt;/a&gt;节点。 &lt;code&gt;msg&lt;/code&gt; 保存失败消息。</target>
        </trans-unit>
        <trans-unit id="b98f9befa7e21b68efee9fcdf15d47f44a0708eb" translate="yes" xml:space="preserve">
          <source>An assignment with a type annotation. &lt;code&gt;target&lt;/code&gt; is a single node and can be a &lt;a href=&quot;#ast.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;#ast.Attribute&quot;&gt;&lt;code&gt;Attribute&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;#ast.Subscript&quot;&gt;&lt;code&gt;Subscript&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;annotation&lt;/code&gt; is the annotation, such as a &lt;a href=&quot;#ast.Constant&quot;&gt;&lt;code&gt;Constant&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ast.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt; node. &lt;code&gt;value&lt;/code&gt; is a single optional node. &lt;code&gt;simple&lt;/code&gt; is a boolean integer set to True for a &lt;a href=&quot;#ast.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt; node in &lt;code&gt;target&lt;/code&gt; that do not appear in between parenthesis and are hence pure names and not expressions.</source>
          <target state="translated">具有类型注释的分配。 &lt;code&gt;target&lt;/code&gt; 是一个节点，可以是&lt;a href=&quot;#ast.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#ast.Attribute&quot;&gt; &lt;code&gt;Attribute&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#ast.Subscript&quot;&gt; &lt;code&gt;Subscript&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;annotation&lt;/code&gt; 是注解，例如&amp;ldquo;&lt;a href=&quot;#ast.Constant&quot;&gt; &lt;code&gt;Constant&lt;/code&gt; &lt;/a&gt;或&amp;ldquo;&lt;a href=&quot;#ast.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;节点。 &lt;code&gt;value&lt;/code&gt; 是一个可选节点。 &lt;code&gt;simple&lt;/code&gt; 是将 &lt;code&gt;target&lt;/code&gt; 中的&lt;a href=&quot;#ast.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;节点设置为True的布尔整数，它不会出现在括号之间，因此是纯名称而不是表达式。</target>
        </trans-unit>
        <trans-unit id="e372d92a12b5d0790318943d944a7cbc84547329" translate="yes" xml:space="preserve">
          <source>An assignment. &lt;code&gt;targets&lt;/code&gt; is a list of nodes, and &lt;code&gt;value&lt;/code&gt; is a single node.</source>
          <target state="translated">一项作业。 &lt;code&gt;targets&lt;/code&gt; 是节点列表， &lt;code&gt;value&lt;/code&gt; 是单个节点。</target>
        </trans-unit>
        <trans-unit id="2f78c0d8986a31d197009b378a1891659c6d5c40" translate="yes" xml:space="preserve">
          <source>An async generator can be annotated by the generic type &lt;code&gt;AsyncGenerator[YieldType, SendType]&lt;/code&gt;. For example:</source>
          <target state="translated">可以通过通用类型 &lt;code&gt;AsyncGenerator[YieldType, SendType]&lt;/code&gt; 注释异步生成器。例如：</target>
        </trans-unit>
        <trans-unit id="ca81f375b0f07ac473e89b02f52e35dc9a49c97b" translate="yes" xml:space="preserve">
          <source>An asynchronous version of &lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt;&lt;code&gt;MagicMock&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#unittest.mock.AsyncMock&quot;&gt;&lt;code&gt;AsyncMock&lt;/code&gt;&lt;/a&gt; object will behave so the object is recognized as an async function, and the result of a call is an awaitable.</source>
          <target state="translated">&lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt; &lt;code&gt;MagicMock&lt;/code&gt; &lt;/a&gt;的异步版本。该&lt;a href=&quot;#unittest.mock.AsyncMock&quot;&gt; &lt;code&gt;AsyncMock&lt;/code&gt; &lt;/a&gt;对象将表现得如此的对象被识别为一个异步函数，和一个调用的结果是一个awaitable。</target>
        </trans-unit>
        <trans-unit id="47a32ba6658f6bd3552449f82e57df961a67e806" translate="yes" xml:space="preserve">
          <source>An asynchronous version of &lt;a href=&quot;#unittest.mock.Mock&quot;&gt;&lt;code&gt;Mock&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#unittest.mock.AsyncMock&quot;&gt;&lt;code&gt;AsyncMock&lt;/code&gt;&lt;/a&gt; object will behave so the object is recognized as an async function, and the result of a call is an awaitable.</source>
          <target state="translated">&lt;a href=&quot;#unittest.mock.Mock&quot;&gt; &lt;code&gt;Mock&lt;/code&gt; &lt;/a&gt;的异步版本。该&lt;a href=&quot;#unittest.mock.AsyncMock&quot;&gt; &lt;code&gt;AsyncMock&lt;/code&gt; &lt;/a&gt;对象将表现得如此的对象被识别为一个异步函数，和一个调用的结果是一个awaitable。</target>
        </trans-unit>
        <trans-unit id="1fdc0779a5b2419f946e9654c6370c12f380766a" translate="yes" xml:space="preserve">
          <source>An asyncio condition primitive can be used by a task to wait for some event to happen and then get exclusive access to a shared resource.</source>
          <target state="translated">一个asyncio条件基元可以被任务用来等待某个事件的发生,然后获得对共享资源的独占访问权。</target>
        </trans-unit>
        <trans-unit id="ce693ef39f956e4dfceff810a01b25898982c4eb" translate="yes" xml:space="preserve">
          <source>An asyncio event can be used to notify multiple asyncio tasks that some event has happened.</source>
          <target state="translated">一个asyncio事件可以用来通知多个asyncio任务发生了一些事件。</target>
        </trans-unit>
        <trans-unit id="d221089bb63278ae2eac9dba4c559652680a0628" translate="yes" xml:space="preserve">
          <source>An asyncio lock can be used to guarantee exclusive access to a shared resource.</source>
          <target state="translated">asyncio锁可以用来保证对共享资源的独占访问。</target>
        </trans-unit>
        <trans-unit id="d8132e7095ff57a267c20149288415aebe2314d5" translate="yes" xml:space="preserve">
          <source>An attempt to resume the parser was made when the parser had not been suspended.</source>
          <target state="translated">在解析器没有被暂停时,试图恢复解析器。</target>
        </trans-unit>
        <trans-unit id="06688b12c4727b91b1013a9b4b85afe3f1de51e7" translate="yes" xml:space="preserve">
          <source>An attribute value that must be a tuple listing valid path portions of the URL for receiving XML-RPC requests. Requests posted to other paths will result in a 404 &amp;ldquo;no such page&amp;rdquo; HTTP error. If this tuple is empty, all paths will be considered valid. The default value is &lt;code&gt;('/', '/RPC2')&lt;/code&gt;.</source>
          <target state="translated">一个属性值，必须是一个元组，列出接收XML-RPC请求的URL的有效路径部分。发布到其他路径的请求将导致404&amp;ldquo;无此页面&amp;rdquo; HTTP错误。如果该元组为空，则所有路径都将视为有效。默认值为 &lt;code&gt;('/', '/RPC2')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="247e09baf71df7f71e226b7096feb96275db6196" translate="yes" xml:space="preserve">
          <source>An attribute was used more than once in a start tag.</source>
          <target state="translated">一个属性在起始标签中使用了不止一次。</target>
        </trans-unit>
        <trans-unit id="cca38611cc7b83df2236356ffa28d63d72e96458" translate="yes" xml:space="preserve">
          <source>An authentication key is a byte string which can be thought of as a password: once a connection is established both ends will demand proof that the other knows the authentication key. (Demonstrating that both ends are using the same key does &lt;strong&gt;not&lt;/strong&gt; involve sending the key over the connection.)</source>
          <target state="translated">身份验证密钥是一个字节字符串，可以将其视为密码：建立连接后，两端将要求证明对方知道身份验证密钥。（证明两端都使用相同的密钥并&lt;strong&gt;没有&lt;/strong&gt;涉及发送通过连接键。）</target>
        </trans-unit>
        <trans-unit id="c23b9bb5bd999d4e26c014cb734e6fa9c87b39aa" translate="yes" xml:space="preserve">
          <source>An email message consists of &lt;em&gt;headers&lt;/em&gt; and a &lt;em&gt;payload&lt;/em&gt; (which is also referred to as the &lt;em&gt;content&lt;/em&gt;). Headers are &lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&quot;https://tools.ietf.org/html/rfc6532.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 6532&lt;/strong&gt;&lt;/a&gt; style field names and values, where the field name and value are separated by a colon. The colon is not part of either the field name or the field value. The payload may be a simple text message, or a binary object, or a structured sequence of sub-messages each with their own set of headers and their own payload. The latter type of payload is indicated by the message having a MIME type such as &lt;em&gt;multipart/*&lt;/em&gt; or &lt;em&gt;message/rfc822&lt;/em&gt;.</source>
          <target state="translated">电子邮件包含&lt;em&gt;标题&lt;/em&gt;和&lt;em&gt;有效负载&lt;/em&gt;（也称为&lt;em&gt;content&lt;/em&gt;）。标头是&lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt;或&lt;a href=&quot;https://tools.ietf.org/html/rfc6532.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 6532&lt;/strong&gt;&lt;/a&gt;样式的字段名称和值，其中字段名称和值用冒号分隔。冒号既不是字段名也不是字段值的一部分。有效负载可以是简单的文本消息，也可以是二进制对象，也可以是子消息的结构化序列，每个子消息都具有自己的标头集和自己的有效负载。有效负载的后一种类型由具有MIME类型的消息（例如&lt;em&gt;multipart / *&lt;/em&gt;或&lt;em&gt;message / rfc822&lt;/em&gt;）指示。</target>
        </trans-unit>
        <trans-unit id="9c372588e305c30fd92a3064303d38c2f969de76" translate="yes" xml:space="preserve">
          <source>An email message consists of &lt;em&gt;headers&lt;/em&gt; and a &lt;em&gt;payload&lt;/em&gt;. Headers must be &lt;a href=&quot;https://tools.ietf.org/html/rfc5233.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 5233&lt;/strong&gt;&lt;/a&gt; style names and values, where the field name and value are separated by a colon. The colon is not part of either the field name or the field value. The payload may be a simple text message, or a binary object, or a structured sequence of sub-messages each with their own set of headers and their own payload. The latter type of payload is indicated by the message having a MIME type such as &lt;em&gt;multipart/*&lt;/em&gt; or &lt;em&gt;message/rfc822&lt;/em&gt;.</source>
          <target state="translated">电子邮件由&lt;em&gt;标题&lt;/em&gt;和&lt;em&gt;有效载荷组成&lt;/em&gt;。标头必须是&lt;a href=&quot;https://tools.ietf.org/html/rfc5233.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 5233&lt;/strong&gt;&lt;/a&gt;样式名称和值，其中字段名称和值用冒号分隔。冒号既不是字段名也不是字段值的一部分。有效负载可以是简单的文本消息，也可以是二进制对象，也可以是子消息的结构化序列，每个子消息都具有自己的一组标头和自己的有效负载。有效负载的后一种类型由具有MIME类型的消息（例如&lt;em&gt;multipart / *&lt;/em&gt;或&lt;em&gt;message / rfc822&lt;/em&gt;）指示。</target>
        </trans-unit>
        <trans-unit id="b9ac870ddd7b9cee7af970522ac0cb62cc665869" translate="yes" xml:space="preserve">
          <source>An empty string is returned if the value cannot be determined. Note that many platforms do not provide this information or simply return the same value as for &lt;a href=&quot;#platform.machine&quot;&gt;&lt;code&gt;machine()&lt;/code&gt;&lt;/a&gt;. NetBSD does this.</source>
          <target state="translated">如果无法确定该值，则返回一个空字符串。请注意，许多平台不提供此信息，或仅返回与&lt;a href=&quot;#platform.machine&quot;&gt; &lt;code&gt;machine()&lt;/code&gt; &lt;/a&gt;相同的值。NetBSD执行此操作。</target>
        </trans-unit>
        <trans-unit id="0626a6597dc747aecf4b27d088ed3268190477de" translate="yes" xml:space="preserve">
          <source>An end tag did not match the innermost open start tag.</source>
          <target state="translated">一个结束标签与最里面的开放开始标签不匹配。</target>
        </trans-unit>
        <trans-unit id="e204644cad08d09082fc0881f67657a40116f7c5" translate="yes" xml:space="preserve">
          <source>An end-of-file on input is passed back as the string &lt;code&gt;'EOF'&lt;/code&gt;.</source>
          <target state="translated">输入文件的末尾作为字符串 &lt;code&gt;'EOF'&lt;/code&gt; 传回。</target>
        </trans-unit>
        <trans-unit id="a7b3b2a0614b25738aef986d351e59fa4b2b82de" translate="yes" xml:space="preserve">
          <source>An entity reference contained another reference to the same entity; possibly via a different name, and possibly indirectly.</source>
          <target state="translated">一个实体参照包含了对同一实体的另一个参照;可能是通过不同的名称,也可能是间接的。</target>
        </trans-unit>
        <trans-unit id="3703befccbd34b5b25cb780b7ad45fd641ab0fee" translate="yes" xml:space="preserve">
          <source>An entity reference in an attribute value referred to an external entity instead of an internal entity.</source>
          <target state="translated">属性值中的实体引用是指外部实体,而不是内部实体。</target>
        </trans-unit>
        <trans-unit id="3d37f6c8e1d729e4b74279866b363474e3ce5063" translate="yes" xml:space="preserve">
          <source>An entity reference referred to an entity which was declared with a notation, so cannot be parsed.</source>
          <target state="translated">实体引用指的是用符号声明的实体,因此不能解析。</target>
        </trans-unit>
        <trans-unit id="35cf344fbad219897b2d51ae8eba44868eff1f92" translate="yes" xml:space="preserve">
          <source>An entry in a &lt;a href=&quot;#symtable.SymbolTable&quot;&gt;&lt;code&gt;SymbolTable&lt;/code&gt;&lt;/a&gt; corresponding to an identifier in the source. The constructor is not public.</source>
          <target state="translated">&lt;a href=&quot;#symtable.SymbolTable&quot;&gt; &lt;code&gt;SymbolTable&lt;/code&gt; &lt;/a&gt;中与源中的标识符相对应的条目。构造函数不是公共的。</target>
        </trans-unit>
        <trans-unit id="f406f6ad3dfbdd6e32c42a45910cc78a6fbc0eb9" translate="yes" xml:space="preserve">
          <source>An enumeration is a set of symbolic names (members) bound to unique, constant values. Within an enumeration, the members can be compared by identity, and the enumeration itself can be iterated over.</source>
          <target state="translated">枚举是一组与唯一的常量值绑定的符号名(成员)。在一个枚举中,成员可以通过身份进行比较,枚举本身也可以进行迭代。</target>
        </trans-unit>
        <trans-unit id="7ceb56cb5ae384a7c045483416aaaa181587fc4e" translate="yes" xml:space="preserve">
          <source>An enumeration of &lt;a href=&quot;#uuid.SafeUUID&quot;&gt;&lt;code&gt;SafeUUID&lt;/code&gt;&lt;/a&gt; which indicates whether the platform generated the UUID in a multiprocessing-safe way.</source>
          <target state="translated">&lt;a href=&quot;#uuid.SafeUUID&quot;&gt; &lt;code&gt;SafeUUID&lt;/code&gt; &lt;/a&gt;的枚举，指示平台是否以多处理安全的方式生成UUID。</target>
        </trans-unit>
        <trans-unit id="191e9b46b39612e5a45fb6724e6abdd03694c710" translate="yes" xml:space="preserve">
          <source>An equality comparison between one &lt;code&gt;dict.values()&lt;/code&gt; view and another will always return &lt;code&gt;False&lt;/code&gt;. This also applies when comparing &lt;code&gt;dict.values()&lt;/code&gt; to itself:</source>
          <target state="translated">一个 &lt;code&gt;dict.values()&lt;/code&gt; 视图和另一个dict.values（）视图之间的相等比较将始终返回 &lt;code&gt;False&lt;/code&gt; 。在将 &lt;code&gt;dict.values()&lt;/code&gt; 与自身进行比较时，这也适用：</target>
        </trans-unit>
        <trans-unit id="a01448ba36fc6180ade36d1e4999112151667f7e" translate="yes" xml:space="preserve">
          <source>An error is produced for arguments that could produce more than one options. This feature can be disabled by setting &lt;a href=&quot;#allow-abbrev&quot;&gt;allow_abbrev&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">对于可能产生多个选项的参数会产生错误。可以通过将&lt;a href=&quot;#allow-abbrev&quot;&gt;allow_abbrev&lt;/a&gt;设置为 &lt;code&gt;False&lt;/code&gt; 来禁用此功能。</target>
        </trans-unit>
        <trans-unit id="2dc2e93e3b7a317994b5c3eb2e52e7df07abc268" translate="yes" xml:space="preserve">
          <source>An error is returned whenever the resulting exponent is greater than &lt;code&gt;Emax&lt;/code&gt; or less than &lt;code&gt;Etiny&lt;/code&gt;.</source>
          <target state="translated">每当结果指数大于 &lt;code&gt;Emax&lt;/code&gt; 或小于 &lt;code&gt;Etiny&lt;/code&gt; 时，将返回错误。</target>
        </trans-unit>
        <trans-unit id="516d3d6e48e258e621be2b2a76babfa7dc02e706" translate="yes" xml:space="preserve">
          <source>An error raised when a NIS function returns an error code.</source>
          <target state="translated">当NIS函数返回错误代码时引发的错误。</target>
        </trans-unit>
        <trans-unit id="58377c1e23ec237f7e5eaaef750df18f85b3cb45" translate="yes" xml:space="preserve">
          <source>An error raised when something is impossible because it violates the WAV specification or hits an implementation deficiency.</source>
          <target state="translated">当某件事情因为违反WAV规范或遇到实现上的缺陷而无法实现时,就会产生错误。</target>
        </trans-unit>
        <trans-unit id="4593a10048262564ce6c822735e42f44f346b661" translate="yes" xml:space="preserve">
          <source>An event loop based on the &lt;a href=&quot;selectors#module-selectors&quot;&gt;&lt;code&gt;selectors&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">基于&lt;a href=&quot;selectors#module-selectors&quot;&gt; &lt;code&gt;selectors&lt;/code&gt; &lt;/a&gt;模块的事件循环。</target>
        </trans-unit>
        <trans-unit id="f3adc0d9c6ca30e1ba3e56151e0bcf79cc795c22" translate="yes" xml:space="preserve">
          <source>An event loop for Windows that uses &amp;ldquo;I/O Completion Ports&amp;rdquo; (IOCP).</source>
          <target state="translated">Windows的事件循环，使用&amp;ldquo; I / O完成端口&amp;rdquo;（IOCP）。</target>
        </trans-unit>
        <trans-unit id="fd91140b0fe187a666b9e9bf676cecb25b813937" translate="yes" xml:space="preserve">
          <source>An event loop policy is a global per-process object that controls the management of the event loop. Each event loop has a default policy, which can be changed and customized using the policy API.</source>
          <target state="translated">事件循环策略是一个全局的每进程对象,用于控制事件循环的管理。每个事件循环都有一个默认策略,可以使用策略 API 对其进行更改和自定义。</target>
        </trans-unit>
        <trans-unit id="d2e556041e787dfb19531ed6bea3ca88bb68687f" translate="yes" xml:space="preserve">
          <source>An event loop runs in a thread (typically the main thread) and executes all callbacks and Tasks in its thread. While a Task is running in the event loop, no other Tasks can run in the same thread. When a Task executes an &lt;code&gt;await&lt;/code&gt; expression, the running Task gets suspended, and the event loop executes the next Task.</source>
          <target state="translated">事件循环在线程（通常是主线程）中运行，并在其线程中执行所有回调和任务。当任务在事件循环中运行时，没有其他任务可以在同一线程中运行。当Task执行 &lt;code&gt;await&lt;/code&gt; 表达式时，正在运行的Task被挂起，事件循环执行下一个Task。</target>
        </trans-unit>
        <trans-unit id="608baac34ec6b479b1e075077346da843d886918" translate="yes" xml:space="preserve">
          <source>An event object manages an internal flag that can be set to true with the &lt;a href=&quot;#threading.Event.set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt; method and reset to false with the &lt;a href=&quot;#threading.Event.clear&quot;&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/a&gt; method. The &lt;a href=&quot;#threading.Event.wait&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt; method blocks until the flag is true.</source>
          <target state="translated">一个事件对象管理一个内部标志，该标志可以通过set &lt;a href=&quot;#threading.Event.set&quot;&gt; &lt;code&gt;set()&lt;/code&gt; &lt;/a&gt;方法设置为true，而可以通过&lt;a href=&quot;#threading.Event.clear&quot;&gt; &lt;code&gt;clear()&lt;/code&gt; &lt;/a&gt;方法设置为false 。的&lt;a href=&quot;#threading.Event.wait&quot;&gt; &lt;code&gt;wait()&lt;/code&gt; &lt;/a&gt;方法将阻塞，直到标记为真。</target>
        </trans-unit>
        <trans-unit id="9cf919b4535184a2bac9b21b394a3391ed3be52c" translate="yes" xml:space="preserve">
          <source>An event object.</source>
          <target state="translated">一个事件对象。</target>
        </trans-unit>
        <trans-unit id="3197165a12532ea18a4db9c10db35c9e41c35331" translate="yes" xml:space="preserve">
          <source>An event object. Not thread-safe.</source>
          <target state="translated">一个事件对象。不是线程安全的。</target>
        </trans-unit>
        <trans-unit id="58be36b1fcb18ab8fd811be0960165993ee1b495" translate="yes" xml:space="preserve">
          <source>An example for &lt;a href=&quot;#csv.Sniffer&quot;&gt;&lt;code&gt;Sniffer&lt;/code&gt;&lt;/a&gt; use:</source>
          <target state="translated">&lt;a href=&quot;#csv.Sniffer&quot;&gt; &lt;code&gt;Sniffer&lt;/code&gt; &lt;/a&gt;使用示例：</target>
        </trans-unit>
        <trans-unit id="d24bd94253a9e026200e1be3ce54276cf7eb1d9f" translate="yes" xml:space="preserve">
          <source>An example for the &lt;a href=&quot;#socketserver.ThreadingMixIn&quot;&gt;&lt;code&gt;ThreadingMixIn&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">&lt;a href=&quot;#socketserver.ThreadingMixIn&quot;&gt; &lt;code&gt;ThreadingMixIn&lt;/code&gt; &lt;/a&gt;类的示例：</target>
        </trans-unit>
        <trans-unit id="2b1abaee744f811fdecf714da38ec6d05c1976f7" translate="yes" xml:space="preserve">
          <source>An example illustrating the order:</source>
          <target state="translated">一个例子说明了这个顺序。</target>
        </trans-unit>
        <trans-unit id="71f4f4affa7b143203b514eaf53d7bbc4a253b38" translate="yes" xml:space="preserve">
          <source>An example may make it more understandable:</source>
          <target state="translated">举个例子可能更容易理解。</target>
        </trans-unit>
        <trans-unit id="f80b147a88b6b8cb2d7f13419efc055fe8a5741d" translate="yes" xml:space="preserve">
          <source>An example of a callback displaying the current date every second. The callback uses the &lt;a href=&quot;#asyncio.loop.call_later&quot;&gt;&lt;code&gt;loop.call_later()&lt;/code&gt;&lt;/a&gt; method to reschedule itself after 5 seconds, and then stops the event loop:</source>
          <target state="translated">每秒显示当前日期的回调示例。回调使用&lt;a href=&quot;#asyncio.loop.call_later&quot;&gt; &lt;code&gt;loop.call_later()&lt;/code&gt; &lt;/a&gt;方法在5秒后重新安排自身的时间，然后停止事件循环：</target>
        </trans-unit>
        <trans-unit id="11af1171f8dc0175c6f96364b3dfa7e2608ea195" translate="yes" xml:space="preserve">
          <source>An example of a context manager that returns a related object is the one returned by &lt;a href=&quot;decimal#decimal.localcontext&quot;&gt;&lt;code&gt;decimal.localcontext()&lt;/code&gt;&lt;/a&gt;. These managers set the active decimal context to a copy of the original decimal context and then return the copy. This allows changes to be made to the current decimal context in the body of the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement without affecting code outside the &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="translated">返回相关对象的上下文管理器的一个示例是由&lt;a href=&quot;decimal#decimal.localcontext&quot;&gt; &lt;code&gt;decimal.localcontext()&lt;/code&gt; &lt;/a&gt;返回的对象。这些管理器将活动的十进制上下文设置为原始十进制上下文的副本，然后返回该副本。这允许对&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;语句主体中的当前十进制上下文进行更改，而不会影响 &lt;code&gt;with&lt;/code&gt; 语句之外的代码。</target>
        </trans-unit>
        <trans-unit id="aaa6de7586c2063984c7b7c3d3b5cb79168e0d34" translate="yes" xml:space="preserve">
          <source>An example of a context manager that returns a related object is the one returned by &lt;a href=&quot;decimal#decimal.localcontext&quot;&gt;&lt;code&gt;decimal.localcontext()&lt;/code&gt;&lt;/a&gt;. These managers set the active decimal context to a copy of the original decimal context and then return the copy. This allows changes to be made to the current decimal context in the body of the &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement without affecting code outside the &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="translated">返回相关对象的上下文管理器的一个示例是由&lt;a href=&quot;decimal#decimal.localcontext&quot;&gt; &lt;code&gt;decimal.localcontext()&lt;/code&gt; &lt;/a&gt;返回的对象。这些管理器将活动的十进制上下文设置为原始十进制上下文的副本，然后返回该副本。这允许对&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;语句主体中的当前十进制上下文进行更改，而不会影响 &lt;code&gt;with&lt;/code&gt; 语句之外的代码。</target>
        </trans-unit>
        <trans-unit id="229e46ea428fdf9847aacb2de4467c37f32f31e2" translate="yes" xml:space="preserve">
          <source>An example of a context manager that returns itself is a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;. File objects return themselves from __enter__() to allow &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; to be used as the context expression in a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">返回自身的上下文管理器的一个示例是&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;文件对象&lt;/a&gt;。文件对象从__enter __（）返回自身，以允许&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;在&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;语句中用作上下文表达式。</target>
        </trans-unit>
        <trans-unit id="26e0ecb0e14afdc2a9657a109cdda63266fd0dd1" translate="yes" xml:space="preserve">
          <source>An example of a context manager that returns itself is a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;. File objects return themselves from __enter__() to allow &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; to be used as the context expression in a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">返回自身的上下文管理器的一个示例是&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;文件对象&lt;/a&gt;。文件对象从__enter __（）返回自身，以允许&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;在&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;语句中用作上下文表达式。</target>
        </trans-unit>
        <trans-unit id="a36c0094a4d20f58e22fab2dc6ea6b13c4064617" translate="yes" xml:space="preserve">
          <source>An example of a custom action:</source>
          <target state="translated">一个自定义动作的例子。</target>
        </trans-unit>
        <trans-unit id="bd79d7fcb90941297a732fcb5d7d3317ee346397" translate="yes" xml:space="preserve">
          <source>An example of a mock that raises an exception (to test exception handling of an API):</source>
          <target state="translated">一个引发异常的mock例子(用于测试API的异常处理)。</target>
        </trans-unit>
        <trans-unit id="16f4febaa13c59704ab69ba35886f8105bd56383" translate="yes" xml:space="preserve">
          <source>An example of a subprocess protocol used to get the output of a subprocess and to wait for the subprocess exit.</source>
          <target state="translated">子进程协议的一个例子,用于获取子进程的输出并等待子进程的退出。</target>
        </trans-unit>
        <trans-unit id="359da9d396e7a3381bf357db2dce0ae96d67afdf" translate="yes" xml:space="preserve">
          <source>An example of dictionary view usage:</source>
          <target state="translated">词典视图的使用实例。</target>
        </trans-unit>
        <trans-unit id="195305d65f73569e3259a2afbec9afedbef3ecc9" translate="yes" xml:space="preserve">
          <source>An example of extending &lt;code&gt;EnvBuilder&lt;/code&gt;</source>
          <target state="translated">扩展 &lt;code&gt;EnvBuilder&lt;/code&gt; 的示例</target>
        </trans-unit>
        <trans-unit id="009b99e279ffcfd9cbdb98ce048a15df969325ea" translate="yes" xml:space="preserve">
          <source>An example of passing some arguments to an external program as a sequence is:</source>
          <target state="translated">将一些参数以序列形式传递给外部程序的例子是。</target>
        </trans-unit>
        <trans-unit id="1081cc9057f681139574ba8aa1d51a1b7326375e" translate="yes" xml:space="preserve">
          <source>An example of reading the configuration file again:</source>
          <target state="translated">一个再次读取配置文件的例子。</target>
        </trans-unit>
        <trans-unit id="a17cbc95ce9a012142cb3b9171e1c0a196a14699" translate="yes" xml:space="preserve">
          <source>An example of setting some log options, these would include the process ID in logged messages, and write the messages to the destination facility used for mail logging:</source>
          <target state="translated">一个设置一些日志选项的例子,这些选项将在记录的消息中包括进程ID,并将消息写入用于邮件记录的目标设施。</target>
        </trans-unit>
        <trans-unit id="0fc1f9040cc5763e678640ef2363a997c9953de5" translate="yes" xml:space="preserve">
          <source>An example of the extended interface with non-ASCII characters:</source>
          <target state="translated">一个非ASCII字符的扩展接口的例子。</target>
        </trans-unit>
        <trans-unit id="cc391b585ed780ac543ae3ed4c184e7ef73852d8" translate="yes" xml:space="preserve">
          <source>An example of the usage of &lt;a href=&quot;#multiprocessing.managers.BaseProxy._callmethod&quot;&gt;&lt;code&gt;_callmethod()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.managers.BaseProxy._callmethod&quot;&gt; &lt;code&gt;_callmethod()&lt;/code&gt; &lt;/a&gt;用法的示例：</target>
        </trans-unit>
        <trans-unit id="b0374afa67447b447f7a013a60acd58beb789bd8" translate="yes" xml:space="preserve">
          <source>An example of writing to a configuration file:</source>
          <target state="translated">写入配置文件的一个例子。</target>
        </trans-unit>
        <trans-unit id="678e726964a2ce10c4c1a7c983eb935e47f7d7bc" translate="yes" xml:space="preserve">
          <source>An example showing how to use queues to feed tasks to a collection of worker processes and collect the results:</source>
          <target state="translated">这个例子展示了如何使用队列将任务馈送至工人进程集合并收集结果。</target>
        </trans-unit>
        <trans-unit id="ce7f7b7a4c5476e3cc316370c635a0a929e3cae0" translate="yes" xml:space="preserve">
          <source>An example that will remove &lt;em&gt;remove_this&lt;/em&gt; from email addresses:</source>
          <target state="translated">从电子邮件地址中删除&lt;em&gt;remove_this&lt;/em&gt;的示例：</target>
        </trans-unit>
        <trans-unit id="81981452dd23b6b05db05d7cfb0589b85b814ed7" translate="yes" xml:space="preserve">
          <source>An example to show the &lt;code&gt;_ignore_&lt;/code&gt; attribute in use:</source>
          <target state="translated">显示使用中的 &lt;code&gt;_ignore_&lt;/code&gt; 属性的示例：</target>
        </trans-unit>
        <trans-unit id="85eca7d3c00b4de3339c2e436d45332986ea35c3" translate="yes" xml:space="preserve">
          <source>An example usage of the module:</source>
          <target state="translated">该模块的使用实例。</target>
        </trans-unit>
        <trans-unit id="b8690b021b6b6b9da606f08de01ded9048222325" translate="yes" xml:space="preserve">
          <source>An example usage:</source>
          <target state="translated">一个使用实例。</target>
        </trans-unit>
        <trans-unit id="7c60e5df7208cba172a6b4861bef2a01e85722af" translate="yes" xml:space="preserve">
          <source>An example using &lt;em&gt;enter_result&lt;/em&gt;:</source>
          <target state="translated">使用&lt;em&gt;enter_result&lt;/em&gt;的示例：</target>
        </trans-unit>
        <trans-unit id="619d126046efa510fbee514e656faac7c28fa578" translate="yes" xml:space="preserve">
          <source>An example using only Unix style options:</source>
          <target state="translated">一个只使用Unix风格选项的例子。</target>
        </trans-unit>
        <trans-unit id="cb40c2136fa42deb9a36926aa145be2f5a4b420f" translate="yes" xml:space="preserve">
          <source>An example using the &lt;a href=&quot;#asyncio.asyncio.subprocess.Process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; class to control a subprocess and the &lt;a href=&quot;asyncio-stream#asyncio.StreamReader&quot;&gt;&lt;code&gt;StreamReader&lt;/code&gt;&lt;/a&gt; class to read from its standard output.</source>
          <target state="translated">一个使用&lt;a href=&quot;#asyncio.asyncio.subprocess.Process&quot;&gt; &lt;code&gt;Process&lt;/code&gt; &lt;/a&gt;类控制子流程以及使用&lt;a href=&quot;asyncio-stream#asyncio.StreamReader&quot;&gt; &lt;code&gt;StreamReader&lt;/code&gt; &lt;/a&gt;类从其标准输出读取的示例。</target>
        </trans-unit>
        <trans-unit id="99f3529798fae53307059d813edb69b2362e7c71" translate="yes" xml:space="preserve">
          <source>An example using the &lt;a href=&quot;#asyncio.loop.call_soon&quot;&gt;&lt;code&gt;loop.call_soon()&lt;/code&gt;&lt;/a&gt; method to schedule a callback. The callback displays &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; and then stops the event loop:</source>
          <target state="translated">使用&lt;a href=&quot;#asyncio.loop.call_soon&quot;&gt; &lt;code&gt;loop.call_soon()&lt;/code&gt; &lt;/a&gt;方法安排回调的示例。回调显示 &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; ，然后停止事件循环：</target>
        </trans-unit>
        <trans-unit id="ff40ba096df117ee2ce62d129f289e94ce50d311" translate="yes" xml:space="preserve">
          <source>An example which will deadlock is the following:</source>
          <target state="translated">以下是一个会死锁的例子。</target>
        </trans-unit>
        <trans-unit id="1449c62b11b34c51038e54fc84c6c14e5bdd420c" translate="yes" xml:space="preserve">
          <source>An example with non-ASCII characters:</source>
          <target state="translated">一个带有非ASCII字符的例子。</target>
        </trans-unit>
        <trans-unit id="f71f4e4b07c8d3bd6da392502d651c55e4d66276" translate="yes" xml:space="preserve">
          <source>An example&amp;rsquo;s doctest directives modify doctest&amp;rsquo;s behavior for that single example. Use &lt;code&gt;+&lt;/code&gt; to enable the named behavior, or &lt;code&gt;-&lt;/code&gt; to disable it.</source>
          <target state="translated">示例的doctest指令针对该单个示例修改doctest的行为。使用 &lt;code&gt;+&lt;/code&gt; 启用命名的行为，或 &lt;code&gt;-&lt;/code&gt; 禁用它。</target>
        </trans-unit>
        <trans-unit id="f481ad49809e7c27b79d2e6d830283b22c04c1f7" translate="yes" xml:space="preserve">
          <source>An example:</source>
          <target state="translated">一个例子:</target>
        </trans-unit>
        <trans-unit id="23a14600961e92118a1b9c9768e9bc704485af4b" translate="yes" xml:space="preserve">
          <source>An exception has occurred. The local trace function is called; &lt;em&gt;arg&lt;/em&gt; is a tuple &lt;code&gt;(exception, value, traceback)&lt;/code&gt;; the return value specifies the new local trace function.</source>
          <target state="translated">发生异常。局部跟踪函数被调用；&lt;em&gt;arg&lt;/em&gt;是一个元组 &lt;code&gt;(exception, value, traceback)&lt;/code&gt; ；返回值指定新的本地跟踪函数。</target>
        </trans-unit>
        <trans-unit id="077f3a8d799c59c87a7879ae93f65a8b265b382c" translate="yes" xml:space="preserve">
          <source>An exception inheriting &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; that is raised when an unsupported operation is called on a stream.</source>
          <target state="translated">在流上调用不受支持的操作时引发的继承&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;的异常。</target>
        </trans-unit>
        <trans-unit id="90348b9ec43ea456461b13b883f04b6adc7d95fc" translate="yes" xml:space="preserve">
          <source>An exception raised by &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt;&lt;code&gt;DocTestRunner&lt;/code&gt;&lt;/a&gt; to signal that a doctest example raised an unexpected exception. The constructor arguments are used to initialize the attributes of the same names.</source>
          <target state="translated">一个异常上调&lt;a href=&quot;#doctest.DocTestRunner&quot;&gt; &lt;code&gt;DocTestRunner&lt;/code&gt; &lt;/a&gt;到信号，一个文档测试例子提出意外的异常。构造函数参数用于初始化相同名称的属性。</target>
        </trans-unit>
        <trans-unit id="2a2d6bd0f6bfde706cbcad0479411815ccfff05d" translate="yes" xml:space="preserve">
          <source>An exception raised by &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt;&lt;code&gt;DocTestRunner&lt;/code&gt;&lt;/a&gt; to signal that a doctest example&amp;rsquo;s actual output did not match its expected output. The constructor arguments are used to initialize the attributes of the same names.</source>
          <target state="translated">&lt;a href=&quot;#doctest.DocTestRunner&quot;&gt; &lt;code&gt;DocTestRunner&lt;/code&gt; &lt;/a&gt;引发的异常表明doctest示例的实际输出与预期输出不匹配。构造函数参数用于初始化相同名称的属性。</target>
        </trans-unit>
        <trans-unit id="d371cb40c11f76c5c36febec63cfec9705178506" translate="yes" xml:space="preserve">
          <source>An exception raised for invalid gzip files. It inherits &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;zlib#zlib.error&quot;&gt;&lt;code&gt;zlib.error&lt;/code&gt;&lt;/a&gt; can also be raised for invalid gzip files.</source>
          <target state="translated">无效的gzip文件引发的异常。它继承了&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;。对于无效的gzip文件，也可以引发&lt;a href=&quot;exceptions#EOFError&quot;&gt; &lt;code&gt;EOFError&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;zlib#zlib.error&quot;&gt; &lt;code&gt;zlib.error&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="595cdbaab3299ecf183e16949385b4ed75622bb8" translate="yes" xml:space="preserve">
          <source>An exception tuple, or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">异常元组或 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6b714867157f6242c971860d61ec3d6ff7556a5" translate="yes" xml:space="preserve">
          <source>An executable line in a &lt;code&gt;.pth&lt;/code&gt; file is run at every Python startup, regardless of whether a particular module is actually going to be used. Its impact should thus be kept to a minimum. The primary intended purpose of executable lines is to make the corresponding module(s) importable (load 3rd-party import hooks, adjust &lt;code id=&quot;index-3&quot;&gt;PATH&lt;/code&gt; etc). Any other initialization is supposed to be done upon a module&amp;rsquo;s actual import, if and when it happens. Limiting a code chunk to a single line is a deliberate measure to discourage putting anything more complex here.</source>
          <target state="translated">&lt;code&gt;.pth&lt;/code&gt; 文件中的可执行行在每次Python启动时都会运行，而不管是否实际上要使用特定的模块。因此，其影响应保持最小。可执行行的主要预期目的是使相应模块可导入（加载第三方导入钩子，调整 &lt;code id=&quot;index-3&quot;&gt;PATH&lt;/code&gt; 等）。任何其他初始化都应该在模块实际导入时进行（如果发生的话）。将代码块限制为一行是一种有意采取的措施，不鼓励在此处放置任何更复杂的内容。</target>
        </trans-unit>
        <trans-unit id="b1add73ad794c032de45e9a10a3307ac96e89eae" translate="yes" xml:space="preserve">
          <source>An executor can be used to run a task in a different thread or even in a different process to avoid blocking the OS thread with the event loop. See the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.run_in_executor&quot;&gt;&lt;code&gt;loop.run_in_executor()&lt;/code&gt;&lt;/a&gt; method for more details.</source>
          <target state="translated">执行程序可用于在不同线程甚至不同进程中运行任务，以避免事件循环阻塞OS线程。有关更多详细信息，请参见&lt;a href=&quot;asyncio-eventloop#asyncio.loop.run_in_executor&quot;&gt; &lt;code&gt;loop.run_in_executor()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="9e11c12943faf16444ceedb9804a38db006485b2" translate="yes" xml:space="preserve">
          <source>An existing file of the same name is overwritten.</source>
          <target state="translated">现有的同名文件将被覆盖。</target>
        </trans-unit>
        <trans-unit id="2e1fe8390882dfde7bc76d70b8e2cafd23494e82" translate="yes" xml:space="preserve">
          <source>An existing file of the same name is overwritten. The optional parameters have the same meaning as in &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">具有相同名称的现有文件将被覆盖。可选参数的含义与&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; 中的&lt;/a&gt;含义相同。</target>
        </trans-unit>
        <trans-unit id="02ba8d7a14486c8e174ff533d6d9c0663952b29e" translate="yes" xml:space="preserve">
          <source>An explanation of some terminology and conventions is in order.</source>
          <target state="translated">在此对一些术语和惯例进行解释。</target>
        </trans-unit>
        <trans-unit id="afcd75246a2757517247035db4d172b90f008625" translate="yes" xml:space="preserve">
          <source>An expression such as &lt;code&gt;a if b else c&lt;/code&gt;. Each field holds a single node, so in the following example, all three are &lt;a href=&quot;#ast.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt; nodes.</source>
          <target state="translated">诸如 &lt;code&gt;a if b else c&lt;/code&gt; 之类的表达式。每个字段都包含一个节点，因此在下面的示例中，所有三个都是&amp;ldquo;&lt;a href=&quot;#ast.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;节点。</target>
        </trans-unit>
        <trans-unit id="890aae396d7bacf660f2e6509a7c070fac630d67" translate="yes" xml:space="preserve">
          <source>An extended example which also demonstrates the use of pointers accesses the &lt;a href=&quot;https://docs.python.org/3.8/c-api/import.html#c.PyImport_FrozenModules&quot;&gt;&lt;code&gt;PyImport_FrozenModules&lt;/code&gt;&lt;/a&gt; pointer exported by Python.</source>
          <target state="translated">一个扩展的示例也演示了如何使用指针访问由Python导出的&lt;a href=&quot;https://docs.python.org/3.8/c-api/import.html#c.PyImport_FrozenModules&quot;&gt; &lt;code&gt;PyImport_FrozenModules&lt;/code&gt; &lt;/a&gt;指针。</target>
        </trans-unit>
        <trans-unit id="786f4b149806f265b7a77db548ada758892c3ee6" translate="yes" xml:space="preserve">
          <source>An extended example which also demonstrates the use of pointers accesses the &lt;a href=&quot;https://docs.python.org/3.9/c-api/import.html#c.PyImport_FrozenModules&quot;&gt;&lt;code&gt;PyImport_FrozenModules&lt;/code&gt;&lt;/a&gt; pointer exported by Python.</source>
          <target state="translated">一个扩展的示例也演示了如何使用指针访问由Python导出的&lt;a href=&quot;https://docs.python.org/3.9/c-api/import.html#c.PyImport_FrozenModules&quot;&gt; &lt;code&gt;PyImport_FrozenModules&lt;/code&gt; &lt;/a&gt;指针。</target>
        </trans-unit>
        <trans-unit id="d874aff9356fc6c2a27e76364bce500fa2c6518e" translate="yes" xml:space="preserve">
          <source>An extensive list of Python testing tools including functional testing frameworks and mock object libraries.</source>
          <target state="translated">一个广泛的Python测试工具列表,包括功能测试框架和mock对象库。</target>
        </trans-unit>
        <trans-unit id="5db187c411091906fb89eaeff2e7a3de90c9b6af" translate="yes" xml:space="preserve">
          <source>An f-string, comprising a series of &lt;a href=&quot;#ast.FormattedValue&quot;&gt;&lt;code&gt;FormattedValue&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ast.Constant&quot;&gt;&lt;code&gt;Constant&lt;/code&gt;&lt;/a&gt; nodes.</source>
          <target state="translated">一个f字符串，包括一系列&lt;a href=&quot;#ast.FormattedValue&quot;&gt; &lt;code&gt;FormattedValue&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#ast.Constant&quot;&gt; &lt;code&gt;Constant&lt;/code&gt; &lt;/a&gt;节点。</target>
        </trans-unit>
        <trans-unit id="0a23d9f159c83bfe97b484a3e6115e80af5d4380" translate="yes" xml:space="preserve">
          <source>An hour is converted to 3600 seconds.</source>
          <target state="translated">一小时换算为3600秒。</target>
        </trans-unit>
        <trans-unit id="8b6236d6ba69aedf0745fd1ea63614a9e2262bf5" translate="yes" xml:space="preserve">
          <source>An id which does not have a corresponding destination.</source>
          <target state="translated">一个没有对应目的地的ID。</target>
        </trans-unit>
        <trans-unit id="b4dfb427510e074283a39a54e4d9dbf2b185f2a3" translate="yes" xml:space="preserve">
          <source>An idealized naive date, assuming the current Gregorian calendar always was, and always will be, in effect. Attributes: &lt;a href=&quot;#datetime.date.year&quot;&gt;&lt;code&gt;year&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#datetime.date.month&quot;&gt;&lt;code&gt;month&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#datetime.date.day&quot;&gt;&lt;code&gt;day&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">假设当前公历始终有效，并且是永远有效，那么这是一个理想的天真日期。属性：&lt;a href=&quot;#datetime.date.year&quot;&gt; &lt;code&gt;year&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#datetime.date.month&quot;&gt; &lt;code&gt;month&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#datetime.date.day&quot;&gt; &lt;code&gt;day&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0a5099199c1ac259aae0741f72ef6e8d7849ea93" translate="yes" xml:space="preserve">
          <source>An idealized time, independent of any particular day, assuming that every day has exactly 24*60*60 seconds. (There is no notion of &amp;ldquo;leap seconds&amp;rdquo; here.) Attributes: &lt;a href=&quot;#datetime.time.hour&quot;&gt;&lt;code&gt;hour&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#datetime.time.minute&quot;&gt;&lt;code&gt;minute&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#datetime.time.second&quot;&gt;&lt;code&gt;second&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#datetime.time.microsecond&quot;&gt;&lt;code&gt;microsecond&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#datetime.time.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一个理想的时间，独立于任何特定的一天，假设每天正好有24 * 60 * 60秒。（没有的&amp;ldquo;闰秒&amp;rdquo;在这里的概念）属性：&lt;a href=&quot;#datetime.time.hour&quot;&gt; &lt;code&gt;hour&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#datetime.time.minute&quot;&gt; &lt;code&gt;minute&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#datetime.time.second&quot;&gt; &lt;code&gt;second&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#datetime.time.microsecond&quot;&gt; &lt;code&gt;microsecond&lt;/code&gt; &lt;/a&gt;，和&lt;a href=&quot;#datetime.time.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5610b3c1cc31886ddf86db3b6bfe9dce38bb3a3c" translate="yes" xml:space="preserve">
          <source>An immutable sequence providing access to the logical ancestors of the path:</source>
          <target state="translated">一个不可改变的序列,提供对路径的逻辑祖先的访问。</target>
        </trans-unit>
        <trans-unit id="6b6c96734c11fca9ebe4c7cbcdfffa8db89d5e28" translate="yes" xml:space="preserve">
          <source>An implementation of the built-in &lt;a href=&quot;functions#__import__&quot;&gt;&lt;code&gt;__import__()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">内置&lt;a href=&quot;functions#__import__&quot;&gt; &lt;code&gt;__import__()&lt;/code&gt; &lt;/a&gt;函数的实现。</target>
        </trans-unit>
        <trans-unit id="c90f6d36b2a0d230cb3491ea18751b34717c64b0" translate="yes" xml:space="preserve">
          <source>An import statement. &lt;code&gt;names&lt;/code&gt; is a list of &lt;a href=&quot;#ast.alias&quot;&gt;&lt;code&gt;alias&lt;/code&gt;&lt;/a&gt; nodes.</source>
          <target state="translated">导入声明。 &lt;code&gt;names&lt;/code&gt; 是&lt;a href=&quot;#ast.alias&quot;&gt; &lt;code&gt;alias&lt;/code&gt; &lt;/a&gt;节点的列表。</target>
        </trans-unit>
        <trans-unit id="f7720d17fff53dae117343d8e9e4e3bdf42554ea" translate="yes" xml:space="preserve">
          <source>An important feature of proxy objects is that they are picklable so they can be passed between processes. As such, a referent can contain &lt;a href=&quot;#multiprocessing-proxy-objects&quot;&gt;Proxy Objects&lt;/a&gt;. This permits nesting of these managed lists, dicts, and other &lt;a href=&quot;#multiprocessing-proxy-objects&quot;&gt;Proxy Objects&lt;/a&gt;:</source>
          <target state="translated">代理对象的一个​​重要功能是可拾取的，因此可以在进程之间传递。这样，引用对象可以包含&lt;a href=&quot;#multiprocessing-proxy-objects&quot;&gt;Proxy对象&lt;/a&gt;。这允许嵌套这些托管列表，字典和其他&lt;a href=&quot;#multiprocessing-proxy-objects&quot;&gt;代理对象&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="0ca5c2b2d5e23075377145528c4bb6a274c41020" translate="yes" xml:space="preserve">
          <source>An in-memory stream for text I/O. The text buffer is discarded when the &lt;a href=&quot;#io.IOBase.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method is called.</source>
          <target state="translated">文本I / O的内存流。调用&lt;a href=&quot;#io.IOBase.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;方法时，将丢弃文本缓冲区。</target>
        </trans-unit>
        <trans-unit id="7c40d804be737d2c53024a9e0ca00bbefc518b84" translate="yes" xml:space="preserve">
          <source>An incomplete character was found in the input.</source>
          <target state="translated">在输入中发现一个不完整的字符。</target>
        </trans-unit>
        <trans-unit id="90ea41c9a0216bd11cc24452f4b96fc38cb07e7e" translate="yes" xml:space="preserve">
          <source>An indicator of the native byte order. This will have the value &lt;code&gt;'big'&lt;/code&gt; on big-endian (most-significant byte first) platforms, and &lt;code&gt;'little'&lt;/code&gt; on little-endian (least-significant byte first) platforms.</source>
          <target state="translated">本机字节顺序的指示符。在big-endian（最高有效字节在前）平台上，该值将为 &lt;code&gt;'big'&lt;/code&gt; ，在little-endian（最低有效字节在前）平台上的值为&amp;ldquo; &lt;code&gt;'little'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="703b3bb1868e2e8bc5b77367f969f62a6671a60f" translate="yes" xml:space="preserve">
          <source>An instance &lt;em&gt;tz&lt;/em&gt; of a &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass that models both standard and daylight times must be consistent in this sense:</source>
          <target state="translated">在这个意义上，同时模拟标准时间和夏令时的&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;子类的实例&lt;em&gt;tz&lt;/em&gt;必须保持一致：</target>
        </trans-unit>
        <trans-unit id="2f07dcb4a65f5f3cfefa434bd9d52d248683b91d" translate="yes" xml:space="preserve">
          <source>An instance of (a concrete subclass of) &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; can be passed to the constructors for &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; objects. The latter objects view their attributes as being in local time, and the &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; object supports methods revealing offset of local time from UTC, the name of the time zone, and DST offset, all relative to a date or time object passed to them.</source>
          <target state="translated">可以将&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;的实例（其具体子类）传递给&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;对象的构造函数。后者的对象将其属性视为本地时间，并且&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;对象支持显示相对于传递给它们的日期或时间对象而言，相对于UTC的本地时间偏移，时区名称和DST偏移的方法。</target>
        </trans-unit>
        <trans-unit id="e4b67a267f48e3562f47079d2bb418c11e0684d5" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;#asyncio.Handle&quot;&gt;&lt;code&gt;asyncio.Handle&lt;/code&gt;&lt;/a&gt; is returned, which can be used later to cancel the callback.</source>
          <target state="translated">返回&lt;a href=&quot;#asyncio.Handle&quot;&gt; &lt;code&gt;asyncio.Handle&lt;/code&gt; &lt;/a&gt;的实例，以后可用于取消回调。</target>
        </trans-unit>
        <trans-unit id="d80ce39420c2628cfc7e1e9324435012f462488d" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;#asyncio.TimerHandle&quot;&gt;&lt;code&gt;asyncio.TimerHandle&lt;/code&gt;&lt;/a&gt; is returned which can be used to cancel the callback.</source>
          <target state="translated">返回&lt;a href=&quot;#asyncio.TimerHandle&quot;&gt; &lt;code&gt;asyncio.TimerHandle&lt;/code&gt; &lt;/a&gt;的实例，该实例可用于取消回调。</target>
        </trans-unit>
        <trans-unit id="01872a127016c725833502fe1517e9a8bb1110fd" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;#ctypes.PyDLL&quot;&gt;&lt;code&gt;PyDLL&lt;/code&gt;&lt;/a&gt; that exposes Python C API functions as attributes. Note that all these functions are assumed to return C &lt;code&gt;int&lt;/code&gt;, which is of course not always the truth, so you have to assign the correct &lt;code&gt;restype&lt;/code&gt; attribute to use these functions.</source>
          <target state="translated">将Python C API函数公开为属性的&lt;a href=&quot;#ctypes.PyDLL&quot;&gt; &lt;code&gt;PyDLL&lt;/code&gt; &lt;/a&gt;实例。请注意，假定所有这些函数都返回C &lt;code&gt;int&lt;/code&gt; ，这当然并不总是正确的，因此您必须分配正确的 &lt;code&gt;restype&lt;/code&gt; 属性才能使用这些函数。</target>
        </trans-unit>
        <trans-unit id="c664e0f73090f1e1bd70299e8da8a6073f9919cd" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;#email.policy.Compat32&quot;&gt;&lt;code&gt;Compat32&lt;/code&gt;&lt;/a&gt;, providing backward compatibility with the behavior of the email package in Python 3.2.</source>
          <target state="translated">&lt;a href=&quot;#email.policy.Compat32&quot;&gt; &lt;code&gt;Compat32&lt;/code&gt; &lt;/a&gt;的实例，与Python 3.2中的电子邮件包的行为向后兼容。</target>
        </trans-unit>
        <trans-unit id="753712898d5c60e92ce9fc7f47232fd4e688b279" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;EmailPolicy&lt;/code&gt; with all defaults unchanged. This policy uses the standard Python &lt;code&gt;\n&lt;/code&gt; line endings rather than the RFC-correct &lt;code&gt;\r\n&lt;/code&gt;.</source>
          <target state="translated">所有默认设置不变的 &lt;code&gt;EmailPolicy&lt;/code&gt; 实例。此策略使用标准的Python &lt;code&gt;\n&lt;/code&gt; 行尾而不是RFC正确的 &lt;code&gt;\r\n&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6eefcaafe768844d20d2285a9ea781eccd2b0ead" translate="yes" xml:space="preserve">
          <source>An int containing the default buffer size used by the module&amp;rsquo;s buffered I/O classes. &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; uses the file&amp;rsquo;s blksize (as obtained by &lt;a href=&quot;os#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt;) if possible.</source>
          <target state="translated">一个int，包含模块的缓冲I / O类使用的默认缓冲区大小。如果可能，&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;使用文件的blksize（由&lt;a href=&quot;os#os.stat&quot;&gt; &lt;code&gt;os.stat()&lt;/code&gt; &lt;/a&gt;获得）。</target>
        </trans-unit>
        <trans-unit id="6753a22067c075c8c9a4c5a84ef7830915742ad2" translate="yes" xml:space="preserve">
          <source>An integer between zero and the number of tabs</source>
          <target state="translated">一个介于零和标签数之间的整数。</target>
        </trans-unit>
        <trans-unit id="645936da5c83c45f9587c17d8b318b09bd721e60" translate="yes" xml:space="preserve">
          <source>An integer containing the number of characters written to the stream before it blocked. This attribute is available when using the buffered I/O classes from the &lt;a href=&quot;io#module-io&quot;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">一个整数，包含在阻止之前写入流的字符数。当使用&lt;a href=&quot;io#module-io&quot;&gt; &lt;code&gt;io&lt;/code&gt; &lt;/a&gt;模块中的缓冲I / O类时，此属性可用。</target>
        </trans-unit>
        <trans-unit id="7f40b0022f33627acc9876d1e86f6750f237785b" translate="yes" xml:space="preserve">
          <source>An integer giving the maximum value a variable of type &lt;code&gt;Py_ssize_t&lt;/code&gt; can take. It&amp;rsquo;s usually &lt;code&gt;2**31 - 1&lt;/code&gt; on a 32-bit platform and &lt;code&gt;2**63 - 1&lt;/code&gt; on a 64-bit platform.</source>
          <target state="translated">一个提供最大值的整数，类型为 &lt;code&gt;Py_ssize_t&lt;/code&gt; 的变量可以采用。它通常是 &lt;code&gt;2**31 - 1&lt;/code&gt; 32位的平台上和 &lt;code&gt;2**63 - 1&lt;/code&gt; 64位的平台上。</target>
        </trans-unit>
        <trans-unit id="b4f6a82aa8fc81a2e88d2ec14a5abf2c015f9ab5" translate="yes" xml:space="preserve">
          <source>An integer giving the number of sub keys this key has.</source>
          <target state="translated">一个整数,表示该键的子键数。</target>
        </trans-unit>
        <trans-unit id="e3671820be7fdb3b8d7153be88789dda60eca34a" translate="yes" xml:space="preserve">
          <source>An integer giving the number of values this key has.</source>
          <target state="translated">一个整数,表示该键的值的数量。</target>
        </trans-unit>
        <trans-unit id="61158287398e3913556fd8de17d987f121a49ce2" translate="yes" xml:space="preserve">
          <source>An integer giving the registry type for this value (see table in docs for &lt;a href=&quot;#winreg.SetValueEx&quot;&gt;&lt;code&gt;SetValueEx()&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">给出此值的注册表类型的整数（请参阅docs中的表以获取&lt;a href=&quot;#winreg.SetValueEx&quot;&gt; &lt;code&gt;SetValueEx()&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="9c4fb4071cc7728855d3b16ff06baa25bc7f67a5" translate="yes" xml:space="preserve">
          <source>An integer giving the value of the largest Unicode code point, i.e. &lt;code&gt;1114111&lt;/code&gt; (&lt;code&gt;0x10FFFF&lt;/code&gt; in hexadecimal).</source>
          <target state="translated">一个整数，给出最大的Unicode代码点的值，即 &lt;code&gt;1114111&lt;/code&gt; （十六进制为 &lt;code&gt;0x10FFFF&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="70ed9451b9be56604da549be2ff4d27c0a823db6" translate="yes" xml:space="preserve">
          <source>An integer giving when the key was last modified (if available) as 100&amp;rsquo;s of nanoseconds since Jan 1, 1601.</source>
          <target state="translated">自1601年1月1日以来，最后一次修改密钥（如果有）时给出的整数，为100纳秒。</target>
        </trans-unit>
        <trans-unit id="17b0fef7eb70950fd1875b2099b192af05f223df" translate="yes" xml:space="preserve">
          <source>An integer indicating how many dimensions of a multi-dimensional array the memory represents.</source>
          <target state="translated">一个整数,表示一个多维数组的内存有多少维。</target>
        </trans-unit>
        <trans-unit id="8bef0117d73063c1a4d56593cf70e5fec7f031c6" translate="yes" xml:space="preserve">
          <source>An integer keeping track of how many times the mock object has been awaited.</source>
          <target state="translated">一个整数,记录mock对象被等待的次数。</target>
        </trans-unit>
        <trans-unit id="ae0518f4d7529a2d85bc7601acec4302104bbbbb" translate="yes" xml:space="preserve">
          <source>An integer n, specifying the nth data column.</source>
          <target state="translated">一个整数n,指定第n个数据列。</target>
        </trans-unit>
        <trans-unit id="b0d279e661a8927158d65f021e9f995b44d56314" translate="yes" xml:space="preserve">
          <source>An integer packed into a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object of length 16, big-endian.</source>
          <target state="translated">打包为长度为16 的&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;对象的大整数。</target>
        </trans-unit>
        <trans-unit id="646e733efcef9696eb9443aa091caa22bf73aa29" translate="yes" xml:space="preserve">
          <source>An integer packed into a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object of length 16, big-endian. The interpretation is similar to an integer &lt;em&gt;address&lt;/em&gt;.</source>
          <target state="translated">打包为长度为16 的&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;对象的大整数。解释类似于整数&lt;em&gt;地址&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f6f5ca0496bffcd3b5349fb91457405154481dd3" translate="yes" xml:space="preserve">
          <source>An integer packed into a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object of length 4 (most significant octet first).</source>
          <target state="translated">打包到长度为4 的&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;对象中的整数（最重要的八位字节在前）。</target>
        </trans-unit>
        <trans-unit id="64aac0469b4285c7ace562fb45219c88f4d45beb" translate="yes" xml:space="preserve">
          <source>An integer packed into a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object of length 4, big-endian. The interpretation is similar to an integer &lt;em&gt;address&lt;/em&gt;.</source>
          <target state="translated">打包为长度为4，big-endian 的&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;对象的整数。解释类似于整数&lt;em&gt;地址&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="882a8de446fcecf6cab8bc081fa438fcd87c37bf" translate="yes" xml:space="preserve">
          <source>An integer preceded by &lt;code&gt;@&lt;/code&gt;, as in &lt;code&gt;@6&lt;/code&gt;, where the integer is interpreted as a y pixel coordinate in the menu&amp;rsquo;s coordinate system;</source>
          <target state="translated">以 &lt;code&gt;@&lt;/code&gt; 开头的整数，如 &lt;code&gt;@6&lt;/code&gt; ，其中该整数在菜单的坐标系中被解释为ay像素坐标；</target>
        </trans-unit>
        <trans-unit id="dc8c87923a15988fabf3c441c9e1307e478e6d10" translate="yes" xml:space="preserve">
          <source>An integer representing the node type. Symbolic constants for the types are on the &lt;code&gt;Node&lt;/code&gt; object: &lt;code&gt;ELEMENT_NODE&lt;/code&gt;, &lt;code&gt;ATTRIBUTE_NODE&lt;/code&gt;, &lt;code&gt;TEXT_NODE&lt;/code&gt;, &lt;code&gt;CDATA_SECTION_NODE&lt;/code&gt;, &lt;code&gt;ENTITY_NODE&lt;/code&gt;, &lt;code&gt;PROCESSING_INSTRUCTION_NODE&lt;/code&gt;, &lt;code&gt;COMMENT_NODE&lt;/code&gt;, &lt;code&gt;DOCUMENT_NODE&lt;/code&gt;, &lt;code&gt;DOCUMENT_TYPE_NODE&lt;/code&gt;, &lt;code&gt;NOTATION_NODE&lt;/code&gt;. This is a read-only attribute.</source>
          <target state="translated">表示节点类型的整数。类型的符号常量位于 &lt;code&gt;Node&lt;/code&gt; 对象上： &lt;code&gt;ELEMENT_NODE&lt;/code&gt; ， &lt;code&gt;ATTRIBUTE_NODE&lt;/code&gt; ， &lt;code&gt;TEXT_NODE&lt;/code&gt; ， &lt;code&gt;CDATA_SECTION_NODE&lt;/code&gt; ， &lt;code&gt;ENTITY_NODE&lt;/code&gt; ， &lt;code&gt;PROCESSING_INSTRUCTION_NODE&lt;/code&gt; ， &lt;code&gt;COMMENT_NODE&lt;/code&gt; ， &lt;code&gt;DOCUMENT_NODE&lt;/code&gt; ， &lt;code&gt;DOCUMENT_TYPE_NODE&lt;/code&gt; ， &lt;code&gt;NOTATION_NODE&lt;/code&gt; 。这是一个只读属性。</target>
        </trans-unit>
        <trans-unit id="f1a555fc41c7502bfba0c65b97ab4ac5b9cd080b" translate="yes" xml:space="preserve">
          <source>An integer representing the set of SSL options enabled on this context. The default value is &lt;a href=&quot;#ssl.OP_ALL&quot;&gt;&lt;code&gt;OP_ALL&lt;/code&gt;&lt;/a&gt;, but you can specify other options such as &lt;a href=&quot;#ssl.OP_NO_SSLv2&quot;&gt;&lt;code&gt;OP_NO_SSLv2&lt;/code&gt;&lt;/a&gt; by ORing them together.</source>
          <target state="translated">一个整数，表示在此上下文中启用的SSL选项集。缺省值为&lt;a href=&quot;#ssl.OP_ALL&quot;&gt; &lt;code&gt;OP_ALL&lt;/code&gt; &lt;/a&gt;，但是您可以通过对它们进行&amp;ldquo;或&amp;rdquo;运算来指定其他选项，例如&lt;a href=&quot;#ssl.OP_NO_SSLv2&quot;&gt; &lt;code&gt;OP_NO_SSLv2&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3e38281ba09868abdfe8882473c5fa3690e426a3" translate="yes" xml:space="preserve">
          <source>An integer representing the version of the NNTP protocol supported by the server. In practice, this should be &lt;code&gt;2&lt;/code&gt; for servers advertising &lt;a href=&quot;https://tools.ietf.org/html/rfc3977.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 3977&lt;/strong&gt;&lt;/a&gt; compliance and &lt;code&gt;1&lt;/code&gt; for others.</source>
          <target state="translated">代表服务器支持的NNTP协议版本的整数。在实践中，这应该是 &lt;code&gt;2&lt;/code&gt; 的广告服务器&lt;a href=&quot;https://tools.ietf.org/html/rfc3977.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 3977&lt;/strong&gt;&lt;/a&gt;合规和 &lt;code&gt;1&lt;/code&gt; 他人。</target>
        </trans-unit>
        <trans-unit id="543f543f7b3326e3df52c58c046ecc3ca49dcfe2" translate="yes" xml:space="preserve">
          <source>An integer telling you how many times the mock object has been called:</source>
          <target state="translated">一个整数,告诉你mock对象被调用了多少次。</target>
        </trans-unit>
        <trans-unit id="187f154843eb20b15b663f5ef77b74ffa766be88" translate="yes" xml:space="preserve">
          <source>An integer that fits into 128 bits.</source>
          <target state="translated">一个适合128位的整数。</target>
        </trans-unit>
        <trans-unit id="4243e776fd6616aba00dbcc2c2488ad7be2afc37" translate="yes" xml:space="preserve">
          <source>An integer that fits into 128 bits. This is equivalent to a single-address network, with the network address being &lt;em&gt;address&lt;/em&gt; and the mask being &lt;code&gt;/128&lt;/code&gt;.</source>
          <target state="translated">可容纳128位的整数。这等效于单地址网络，网络地址为&lt;em&gt;address&lt;/em&gt;，掩码为 &lt;code&gt;/128&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="44316d770fca56bd5eaaf3a3511c5ee64cecdc22" translate="yes" xml:space="preserve">
          <source>An integer that fits into 32 bits.</source>
          <target state="translated">一个适合32位的整数。</target>
        </trans-unit>
        <trans-unit id="ecdd55c3c245e5b3b8388fa54918c20b35e6e67f" translate="yes" xml:space="preserve">
          <source>An integer that fits into 32 bits. This is equivalent to a single-address network, with the network address being &lt;em&gt;address&lt;/em&gt; and the mask being &lt;code&gt;/32&lt;/code&gt;.</source>
          <target state="translated">可以容纳32位的整数。这等效于单地址网络，网络地址为&lt;em&gt;address&lt;/em&gt;，掩码为 &lt;code&gt;/32&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a078dc74c1c703bd1abf51f26bcdd05ff58dc2cc" translate="yes" xml:space="preserve">
          <source>An integer that identifies the type of the value data (see table in docs for &lt;a href=&quot;#winreg.SetValueEx&quot;&gt;&lt;code&gt;SetValueEx()&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">一个整数，用于标识值数据的类型（请参阅docs中的表以获取&lt;a href=&quot;#winreg.SetValueEx&quot;&gt; &lt;code&gt;SetValueEx()&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="6221568d61a57ce1a59e1d75f271d5b94fd58a61" translate="yes" xml:space="preserve">
          <source>An integer, the default &lt;a href=&quot;#pickle-protocols&quot;&gt;protocol version&lt;/a&gt; used for pickling. May be less than &lt;a href=&quot;#pickle.HIGHEST_PROTOCOL&quot;&gt;&lt;code&gt;HIGHEST_PROTOCOL&lt;/code&gt;&lt;/a&gt;. Currently the default protocol is 4, first introduced in Python 3.4 and incompatible with previous versions.</source>
          <target state="translated">整数，用于酸洗的默认&lt;a href=&quot;#pickle-protocols&quot;&gt;协议版本&lt;/a&gt;。可能小于&lt;a href=&quot;#pickle.HIGHEST_PROTOCOL&quot;&gt; &lt;code&gt;HIGHEST_PROTOCOL&lt;/code&gt; &lt;/a&gt;。当前，默认协议是4，该协议最早是在Python 3.4中引入的，并且与以前的版本不兼容。</target>
        </trans-unit>
        <trans-unit id="b3ff29ab8afde8b6ee23d29bb72e09168c7b6f37" translate="yes" xml:space="preserve">
          <source>An integer, the highest &lt;a href=&quot;#pickle-protocols&quot;&gt;protocol version&lt;/a&gt; available. This value can be passed as a &lt;em&gt;protocol&lt;/em&gt; value to functions &lt;a href=&quot;#pickle.dump&quot;&gt;&lt;code&gt;dump()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pickle.dumps&quot;&gt;&lt;code&gt;dumps()&lt;/code&gt;&lt;/a&gt; as well as the &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">整数，可用的最高&lt;a href=&quot;#pickle-protocols&quot;&gt;协议版本&lt;/a&gt;。该值可以作为&lt;em&gt;协议&lt;/em&gt;值传递给函数&lt;a href=&quot;#pickle.dump&quot;&gt; &lt;code&gt;dump()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#pickle.dumps&quot;&gt; &lt;code&gt;dumps()&lt;/code&gt; &lt;/a&gt;以及&lt;a href=&quot;#pickle.Pickler&quot;&gt; &lt;code&gt;Pickler&lt;/code&gt; &lt;/a&gt;构造函数。</target>
        </trans-unit>
        <trans-unit id="89f7acaa85bea0ee87dbe1ef47defa1dd89b2cca" translate="yes" xml:space="preserve">
          <source>An interface to the group database, similar to this.</source>
          <target state="translated">组数据库的接口,类似于这样。</target>
        </trans-unit>
        <trans-unit id="59cb6ef37b0cd57060129e4c5a383119176babe9" translate="yes" xml:space="preserve">
          <source>An interface to the normal password database, similar to this.</source>
          <target state="translated">普通密码数据库的接口,类似于这样。</target>
        </trans-unit>
        <trans-unit id="23aa9ac5ddca3f3d883d5cc83284856548229022" translate="yes" xml:space="preserve">
          <source>An interface to the shadow password database, similar to this.</source>
          <target state="translated">影子密码数据库的接口,类似于这样。</target>
        </trans-unit>
        <trans-unit id="994fe15ee3ca3aa04c018a8fe65a5d200d8e16aa" translate="yes" xml:space="preserve">
          <source>An interface to the user database, similar to this.</source>
          <target state="translated">用户数据库的接口,类似于这样。</target>
        </trans-unit>
        <trans-unit id="8d1844ce395b8e9fdc98c2cc653690def38555f0" translate="yes" xml:space="preserve">
          <source>An interpreter instance will recognize a command name &lt;code&gt;foo&lt;/code&gt; if and only if it has a method &lt;code&gt;do_foo()&lt;/code&gt;. As a special case, a line beginning with the character &lt;code&gt;'?'&lt;/code&gt; is dispatched to the method &lt;code&gt;do_help()&lt;/code&gt;. As another special case, a line beginning with the character &lt;code&gt;'!'&lt;/code&gt; is dispatched to the method &lt;code&gt;do_shell()&lt;/code&gt; (if such a method is defined).</source>
          <target state="translated">且仅当解释器实例具有方法 &lt;code&gt;do_foo()&lt;/code&gt; 时,它才能识别命令名称 &lt;code&gt;foo&lt;/code&gt; 。作为特殊情况，以字符 &lt;code&gt;'?'&lt;/code&gt; 开头的行 被调度到 &lt;code&gt;do_help()&lt;/code&gt; 方法。作为另一种特殊情况，以字符 &lt;code&gt;'!'&lt;/code&gt; 开头的行 被分派到方法 &lt;code&gt;do_shell()&lt;/code&gt; （如果定义了这样的方法）。</target>
        </trans-unit>
        <trans-unit id="a6fc8b26e70e09d313612cac6794fdb4aad1682f" translate="yes" xml:space="preserve">
          <source>An invalid logger name.</source>
          <target state="translated">无效的记录仪名称。</target>
        </trans-unit>
        <trans-unit id="74a940fd099263dda413cd8757526ef0956f8af4" translate="yes" xml:space="preserve">
          <source>An invalid operation was performed.</source>
          <target state="translated">进行了无效的操作。</target>
        </trans-unit>
        <trans-unit id="7a26e16375583adf85ddeccaecb2b8c4ef50d837" translate="yes" xml:space="preserve">
          <source>An object containing information about the implementation of the currently running Python interpreter. The following attributes are required to exist in all Python implementations.</source>
          <target state="translated">一个包含当前运行的 Python 解释器实现信息的对象。以下属性是所有 Python 实现中必须存在的。</target>
        </trans-unit>
        <trans-unit id="998e5eccbd293e12c5532b4dc44ce7656abeec0b" translate="yes" xml:space="preserve">
          <source>An object of type &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; may be aware or naive.</source>
          <target state="translated">类型为&lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;的对象可能是感知的或幼稚的。</target>
        </trans-unit>
        <trans-unit id="b174b298545e9f1f9dff3565076e2ed782564e88" translate="yes" xml:space="preserve">
          <source>An object that holds the value data, and whose type depends on the underlying registry type</source>
          <target state="translated">保存值数据的对象,其类型取决于基础登记处类型。</target>
        </trans-unit>
        <trans-unit id="97080ae4ed5d803c9b0a23c71de971dafd14c52c" translate="yes" xml:space="preserve">
          <source>An object that wraps OS processes created by the &lt;a href=&quot;#asyncio.create_subprocess_exec&quot;&gt;&lt;code&gt;create_subprocess_exec()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asyncio.create_subprocess_shell&quot;&gt;&lt;code&gt;create_subprocess_shell()&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">封装由&lt;a href=&quot;#asyncio.create_subprocess_exec&quot;&gt; &lt;code&gt;create_subprocess_exec()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#asyncio.create_subprocess_shell&quot;&gt; &lt;code&gt;create_subprocess_shell()&lt;/code&gt; &lt;/a&gt;函数创建的OS进程的对象。</target>
        </trans-unit>
        <trans-unit id="6159e0ee946985cc1c35519ceaa4c338a8e80214" translate="yes" xml:space="preserve">
          <source>An object with a subset of pathlib.Path methods suitable for traversing directories and opening files.</source>
          <target state="translated">一个包含pathlib.Path方法子集的对象,适用于遍历目录和打开文件。</target>
        </trans-unit>
        <trans-unit id="647c7a24d6cf9ebcbec2e05257e54cb377032a7a" translate="yes" xml:space="preserve">
          <source>An object with at least two methods: get_content and set_content. When the &lt;a href=&quot;email.message#email.message.EmailMessage.get_content&quot;&gt;&lt;code&gt;get_content()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;email.message#email.message.EmailMessage.set_content&quot;&gt;&lt;code&gt;set_content()&lt;/code&gt;&lt;/a&gt; method of an &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; object is called, it calls the corresponding method of this object, passing it the message object as its first argument, and any arguments or keywords that were passed to it as additional arguments. By default &lt;code&gt;content_manager&lt;/code&gt; is set to &lt;a href=&quot;email.contentmanager#email.contentmanager.raw_data_manager&quot;&gt;&lt;code&gt;raw_data_manager&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">具有至少两个方法的对象：get_content和set_content。调用&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt;对象的&lt;a href=&quot;email.message#email.message.EmailMessage.get_content&quot;&gt; &lt;code&gt;get_content()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;email.message#email.message.EmailMessage.set_content&quot;&gt; &lt;code&gt;set_content()&lt;/code&gt; &lt;/a&gt;方法时，它将调用此对象的相应方法，将消息对象作为第一个参数传递给它，并将传递给它的所有参数或关键字作为附加参数传递给该对象。默认情况下， &lt;code&gt;content_manager&lt;/code&gt; 设置为&lt;a href=&quot;email.contentmanager#email.contentmanager.raw_data_manager&quot;&gt; &lt;code&gt;raw_data_manager&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1865264489923958e5df1f2c9473facc3252cce6" translate="yes" xml:space="preserve">
          <source>An operation was requested that requires DTD support to be compiled in, but Expat was configured without DTD support. This should never be reported by a standard build of the &lt;a href=&quot;#module-xml.parsers.expat&quot;&gt;&lt;code&gt;xml.parsers.expat&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">请求了需要编译DTD支持的操作，但是Expat配置为没有DTD支持。切勿通过&lt;a href=&quot;#module-xml.parsers.expat&quot;&gt; &lt;code&gt;xml.parsers.expat&lt;/code&gt; &lt;/a&gt;模块的标准内部版本来报告此情况。</target>
        </trans-unit>
        <trans-unit id="4947a546c6d3f34597067ace626c8f1253938be2" translate="yes" xml:space="preserve">
          <source>An optional keyword-only &lt;em&gt;context&lt;/em&gt; argument allows specifying a custom &lt;a href=&quot;contextvars#contextvars.Context&quot;&gt;&lt;code&gt;contextvars.Context&lt;/code&gt;&lt;/a&gt; for the &lt;em&gt;callback&lt;/em&gt; to run in. The current context is used when no &lt;em&gt;context&lt;/em&gt; is provided.</source>
          <target state="translated">可选只有关键字的&lt;em&gt;上下文&lt;/em&gt;参数允许指定自定义&lt;a href=&quot;contextvars#contextvars.Context&quot;&gt; &lt;code&gt;contextvars.Context&lt;/code&gt; &lt;/a&gt;为&lt;em&gt;回调&lt;/em&gt;在运行。当没有当前上下文被用于&lt;em&gt;上下文&lt;/em&gt;中提供的。</target>
        </trans-unit>
        <trans-unit id="9ea3a8a5b272ed84ab311819ca2985d04005ee2d" translate="yes" xml:space="preserve">
          <source>An optional method which, when called, should invalidate any internal cache used by the finder. Used by &lt;a href=&quot;#importlib.invalidate_caches&quot;&gt;&lt;code&gt;importlib.invalidate_caches()&lt;/code&gt;&lt;/a&gt; when invalidating the caches of all finders on &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可选方法，该方法在被调用时应使查找程序使用的任何内部缓存无效。在使&lt;a href=&quot;sys#sys.meta_path&quot;&gt; &lt;code&gt;sys.meta_path&lt;/code&gt; &lt;/a&gt;上所有查找器的缓存无效时，由&lt;a href=&quot;#importlib.invalidate_caches&quot;&gt; &lt;code&gt;importlib.invalidate_caches()&lt;/code&gt; &lt;/a&gt;使用。</target>
        </trans-unit>
        <trans-unit id="9077f55d2b0b62326a8204fc9578f269c9e7d89a" translate="yes" xml:space="preserve">
          <source>An optional method which, when called, should invalidate any internal cache used by the finder. Used by &lt;code&gt;PathFinder.invalidate_caches()&lt;/code&gt; when invalidating the caches of all cached finders.</source>
          <target state="translated">可选方法，该方法在被调用时应使查找程序使用的任何内部缓存无效。当使所有缓存的 &lt;code&gt;PathFinder.invalidate_caches()&lt;/code&gt; 的缓存无效时，由PathFinder.invalidate_caches（）使用。</target>
        </trans-unit>
        <trans-unit id="1c77488f2592943bd451545ce7ed54c2b1a12d3c" translate="yes" xml:space="preserve">
          <source>An optional sequence that lists the names of unnamed (anonymous) fields. &lt;a href=&quot;#ctypes.Structure._anonymous_&quot;&gt;&lt;code&gt;_anonymous_&lt;/code&gt;&lt;/a&gt; must be already defined when &lt;a href=&quot;#ctypes.Structure._fields_&quot;&gt;&lt;code&gt;_fields_&lt;/code&gt;&lt;/a&gt; is assigned, otherwise it will have no effect.</source>
          <target state="translated">可选序列，列出未命名（匿名）字段的名称。&lt;a href=&quot;#ctypes.Structure._anonymous_&quot;&gt; &lt;code&gt;_anonymous_&lt;/code&gt; &lt;/a&gt;必须已经定义&lt;a href=&quot;#ctypes.Structure._fields_&quot;&gt; &lt;code&gt;_fields_&lt;/code&gt; &lt;/a&gt;，否则它将无效。</target>
        </trans-unit>
        <trans-unit id="b40583112592749895ecadcf35532f5fbb351912" translate="yes" xml:space="preserve">
          <source>An optional shebang line, containing the characters &lt;code&gt;b'#!'&lt;/code&gt; followed by an interpreter name, and then a newline (&lt;code&gt;b'\n'&lt;/code&gt;) character. The interpreter name can be anything acceptable to the OS &amp;ldquo;shebang&amp;rdquo; processing, or the Python launcher on Windows. The interpreter should be encoded in UTF-8 on Windows, and in &lt;a href=&quot;sys#sys.getfilesystemencoding&quot;&gt;&lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt;&lt;/a&gt; on POSIX.</source>
          <target state="translated">可选的shebang行，其中包含字符 &lt;code&gt;b'#!'&lt;/code&gt; 然后是解释器名称，然后是换行符（ &lt;code&gt;b'\n'&lt;/code&gt; ）。解释器名称可以是操作系统&amp;ldquo; shebang&amp;rdquo;处理可接受的任何名称，也可以是Windows上的Python启动器。解释程序应在Windows上以UTF-8编码，在POSIX上以&lt;a href=&quot;sys#sys.getfilesystemencoding&quot;&gt; &lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt; &lt;/a&gt;编码。</target>
        </trans-unit>
        <trans-unit id="eadbfe27c0b9f4036e4c5d9ffd152ecaddfb607d" translate="yes" xml:space="preserve">
          <source>An optional small integer that allows overriding the alignment of structure fields in the instance. &lt;a href=&quot;#ctypes.Structure._pack_&quot;&gt;&lt;code&gt;_pack_&lt;/code&gt;&lt;/a&gt; must already be defined when &lt;a href=&quot;#ctypes.Structure._fields_&quot;&gt;&lt;code&gt;_fields_&lt;/code&gt;&lt;/a&gt; is assigned, otherwise it will have no effect.</source>
          <target state="translated">一个可选的小整数，允许覆盖实例中结构字段的对齐方式。&lt;a href=&quot;#ctypes.Structure._pack_&quot;&gt; &lt;code&gt;_pack_&lt;/code&gt; &lt;/a&gt;必须已经定义&lt;a href=&quot;#ctypes.Structure._fields_&quot;&gt; &lt;code&gt;_fields_&lt;/code&gt; &lt;/a&gt;，否则它将无效。</target>
        </trans-unit>
        <trans-unit id="79293485a901f4be4341911a3c3007d1e643a627" translate="yes" xml:space="preserve">
          <source>An ordered enumeration that is not based on &lt;a href=&quot;#enum.IntEnum&quot;&gt;&lt;code&gt;IntEnum&lt;/code&gt;&lt;/a&gt; and so maintains the normal &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; invariants (such as not being comparable to other enumerations):</source>
          <target state="translated">一个不基于&lt;a href=&quot;#enum.IntEnum&quot;&gt; &lt;code&gt;IntEnum&lt;/code&gt; &lt;/a&gt;的有序枚举，因此保留了正常的&lt;a href=&quot;#enum.Enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;不变式（例如与其他枚举不具有可比性）：</target>
        </trans-unit>
        <trans-unit id="a54eaeb427bd767e9c78a3fcf6309d624d005ab3" translate="yes" xml:space="preserve">
          <source>An ordered mapping of parameters&amp;rsquo; names to the corresponding &lt;a href=&quot;#inspect.Parameter&quot;&gt;&lt;code&gt;Parameter&lt;/code&gt;&lt;/a&gt; objects. Parameters appear in strict definition order, including keyword-only parameters.</source>
          <target state="translated">参数名称到相应&lt;a href=&quot;#inspect.Parameter&quot;&gt; &lt;code&gt;Parameter&lt;/code&gt; &lt;/a&gt;对象的有序映射。参数以严格的定义顺序出现，包括仅关键字参数。</target>
        </trans-unit>
        <trans-unit id="e73d51218d474d87723969e9844e08e443986117" translate="yes" xml:space="preserve">
          <source>An ordered, mutable mapping (&lt;a href=&quot;collections#collections.OrderedDict&quot;&gt;&lt;code&gt;collections.OrderedDict&lt;/code&gt;&lt;/a&gt;) of parameters&amp;rsquo; names to arguments&amp;rsquo; values. Contains only explicitly bound arguments. Changes in &lt;a href=&quot;#inspect.BoundArguments.arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; will reflect in &lt;a href=&quot;#inspect.BoundArguments.args&quot;&gt;&lt;code&gt;args&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#inspect.BoundArguments.kwargs&quot;&gt;&lt;code&gt;kwargs&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">参数名称到参数值的有序可变映射（&lt;a href=&quot;collections#collections.OrderedDict&quot;&gt; &lt;code&gt;collections.OrderedDict&lt;/code&gt; &lt;/a&gt;）。仅包含显式绑定的参数。&lt;a href=&quot;#inspect.BoundArguments.arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;变化将反映在&lt;a href=&quot;#inspect.BoundArguments.args&quot;&gt; &lt;code&gt;args&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#inspect.BoundArguments.kwargs&quot;&gt; &lt;code&gt;kwargs&lt;/code&gt; 中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6b5b35b74ba6101747c9d4196b50ff8061dcc151" translate="yes" xml:space="preserve">
          <source>An output filename must be specified if the &lt;em&gt;source&lt;/em&gt; is an archive (and in that case, &lt;em&gt;output&lt;/em&gt; must not be the same as &lt;em&gt;source&lt;/em&gt;).</source>
          <target state="translated">如果&lt;em&gt;源&lt;/em&gt;是存档，则必须指定输出文件名（在这种情况下，&lt;em&gt;输出&lt;/em&gt;不得与&lt;em&gt;source&lt;/em&gt;相同）。</target>
        </trans-unit>
        <trans-unit id="521aa7e611225a521017270940523db0f976f977" translate="yes" xml:space="preserve">
          <source>An undeclared prefix was found when namespace processing was enabled.</source>
          <target state="translated">启用命名空间处理时,发现一个未声明的前缀。</target>
        </trans-unit>
        <trans-unit id="9656bc89a24603fa1dca440ac3a2361066df5ac5" translate="yes" xml:space="preserve">
          <source>An unrelated but handy function that takes a time tuple such as returned by the &lt;a href=&quot;time#time.gmtime&quot;&gt;&lt;code&gt;gmtime()&lt;/code&gt;&lt;/a&gt; function in the &lt;a href=&quot;time#module-time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; module, and returns the corresponding Unix timestamp value, assuming an epoch of 1970, and the POSIX encoding. In fact, &lt;a href=&quot;time#time.gmtime&quot;&gt;&lt;code&gt;time.gmtime()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#calendar.timegm&quot;&gt;&lt;code&gt;timegm()&lt;/code&gt;&lt;/a&gt; are each others&amp;rsquo; inverse.</source>
          <target state="translated">一个不相关但方便的函数，它采用一个时间元组，例如由&lt;a href=&quot;time#module-time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;模块中的&lt;a href=&quot;time#time.gmtime&quot;&gt; &lt;code&gt;gmtime()&lt;/code&gt; &lt;/a&gt;函数返回，并返回相应的Unix时间戳值（假定为1970年）和POSIX编码。实际上，&lt;a href=&quot;time#time.gmtime&quot;&gt; &lt;code&gt;time.gmtime()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#calendar.timegm&quot;&gt; &lt;code&gt;timegm()&lt;/code&gt; &lt;/a&gt;彼此相反。</target>
        </trans-unit>
        <trans-unit id="3a0de6a3a36da0eabd1ed37cb78f0a84df8288d5" translate="yes" xml:space="preserve">
          <source>Analyse the bytecode corresponding to a function, generator, asynchronous generator, coroutine, method, string of source code, or a code object (as returned by &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">分析与函数，生成器，异步生成器，协程，方法，源代码字符串或代码对象（由&lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;返回）相对应的字节码。</target>
        </trans-unit>
        <trans-unit id="819da723c3c425f237bdf8f03b696821a94f3e1f" translate="yes" xml:space="preserve">
          <source>Analysis functions</source>
          <target state="translated">分析功能</target>
        </trans-unit>
        <trans-unit id="975f7b4df518f323a30297a1f1be4e096d3fcec3" translate="yes" xml:space="preserve">
          <source>Analysis of the profiler data is done using the &lt;a href=&quot;#pstats.Stats&quot;&gt;&lt;code&gt;Stats&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">使用&lt;a href=&quot;#pstats.Stats&quot;&gt; &lt;code&gt;Stats&lt;/code&gt; &lt;/a&gt;类对探查器数据进行分析。</target>
        </trans-unit>
        <trans-unit id="25ad53cf48f04b7c123150cc524cc9d87c444927" translate="yes" xml:space="preserve">
          <source>Analyze the contents of the &lt;em&gt;pathname&lt;/em&gt; file, which must contain Python code.</source>
          <target state="translated">分析&lt;em&gt;路径名&lt;/em&gt;文件的内容，该文件必须包含Python代码。</target>
        </trans-unit>
        <trans-unit id="4623f537e597cbfacf24dc615db20b47e0e3c5c7" translate="yes" xml:space="preserve">
          <source>Analyze the given &lt;em&gt;sample&lt;/em&gt; and return a &lt;a href=&quot;#csv.Dialect&quot;&gt;&lt;code&gt;Dialect&lt;/code&gt;&lt;/a&gt; subclass reflecting the parameters found. If the optional &lt;em&gt;delimiters&lt;/em&gt; parameter is given, it is interpreted as a string containing possible valid delimiter characters.</source>
          <target state="translated">分析给定的&lt;em&gt;样本&lt;/em&gt;并返回反映所找到参数的&lt;a href=&quot;#csv.Dialect&quot;&gt; &lt;code&gt;Dialect&lt;/code&gt; &lt;/a&gt;子类。如果给出了可选的&lt;em&gt;定界符&lt;/em&gt;参数，则将其解释为包含可能的有效定界符字符的字符串。</target>
        </trans-unit>
        <trans-unit id="d3c77624248a182e0208b43d1dd511b74c035283" translate="yes" xml:space="preserve">
          <source>Analyze the sample text (presumed to be in CSV format) and return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the first row appears to be a series of column headers.</source>
          <target state="translated">分析示例文本（假定为CSV格式），如果第一行似乎是一系列列标题，则返回&lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b15cefd38640764e47311aa1a3c3174217ea802b" translate="yes" xml:space="preserve">
          <source>Anchor type. Denotes where the packer is to place each slave in its parcel.</source>
          <target state="translated">锚类型。表示包装者将在其包裹中放置每个从属物的位置。</target>
        </trans-unit>
        <trans-unit id="8a680a6b219fde5428a49a155c5016f2f6534116" translate="yes" xml:space="preserve">
          <source>And also as a function decorator:</source>
          <target state="translated">同时作为功能装饰者。</target>
        </trans-unit>
        <trans-unit id="e25b174a26dc77d7bd4c171e7b788567380cfcad" translate="yes" xml:space="preserve">
          <source>And for reading files:</source>
          <target state="translated">而对于读取文件。</target>
        </trans-unit>
        <trans-unit id="8ea4f6d1b5164f1de2cd6425075d887c2f52dc7b" translate="yes" xml:space="preserve">
          <source>And go back to listening for new client connections (of course, a real server would probably handle each client connection in a separate thread, or put the sockets in &lt;a href=&quot;#ssl-nonblocking&quot;&gt;non-blocking mode&lt;/a&gt; and use an event loop).</source>
          <target state="translated">然后返回侦听新的客户端连接（当然，真正的服务器可能会在单独的线程中处理每个客户端连接，或者将套接字置于&lt;a href=&quot;#ssl-nonblocking&quot;&gt;非阻塞模式&lt;/a&gt;并使用事件循环）。</target>
        </trans-unit>
        <trans-unit id="e01a2b18c0aa33d0bf1ebb4b61f24aa85532e4a4" translate="yes" xml:space="preserve">
          <source>And lets you write code like this:</source>
          <target state="translated">并让你写这样的代码。</target>
        </trans-unit>
        <trans-unit id="02c80b8291de4e65f0384d5df0e931faa6f06e26" translate="yes" xml:space="preserve">
          <source>And so on, eventually ending with:</source>
          <target state="translated">以此类推,最终的结局是:</target>
        </trans-unit>
        <trans-unit id="56675d3775ea977079a196ffe5d39d5c6e0ed45d" translate="yes" xml:space="preserve">
          <source>And some mathematical functions are also available to Decimal:</source>
          <target state="translated">而一些数学函数也可用于Decimal。</target>
        </trans-unit>
        <trans-unit id="e030fd6f202d12a04313413b21ce123caf324f74" translate="yes" xml:space="preserve">
          <source>And while the module doesn&amp;rsquo;t directly support parsing strings, it can easily be done:</source>
          <target state="translated">尽管该模块不直接支持解析字符串，但可以轻松实现：</target>
        </trans-unit>
        <trans-unit id="f29a859de34d8206276e4fbe86c78577ef463680" translate="yes" xml:space="preserve">
          <source>And:</source>
          <target state="translated">And:</target>
        </trans-unit>
        <trans-unit id="5d25066343c14fdbc8cd148ee308e69f694558d6" translate="yes" xml:space="preserve">
          <source>Angular conversion</source>
          <target state="translated">角度转换</target>
        </trans-unit>
        <trans-unit id="fa955e785130d1bfb76908f175692b42dcf5a748" translate="yes" xml:space="preserve">
          <source>Animation control</source>
          <target state="translated">动画控制</target>
        </trans-unit>
        <trans-unit id="e17e6aa01f27f483f31ae9a05f633ce17a08ca63" translate="yes" xml:space="preserve">
          <source>Annotate each line with a short opcode description.</source>
          <target state="translated">用简短的操作码说明对每一行进行注释。</target>
        </trans-unit>
        <trans-unit id="c1fbe3f2c0adda2514893a924abcd2d00ba0c968" translate="yes" xml:space="preserve">
          <source>Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations. The advice applies to the region of the file specified by &lt;em&gt;fd&lt;/em&gt; starting at &lt;em&gt;offset&lt;/em&gt; and continuing for &lt;em&gt;len&lt;/em&gt; bytes. &lt;em&gt;advice&lt;/em&gt; is one of &lt;a href=&quot;#os.POSIX_FADV_NORMAL&quot;&gt;&lt;code&gt;POSIX_FADV_NORMAL&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.POSIX_FADV_SEQUENTIAL&quot;&gt;&lt;code&gt;POSIX_FADV_SEQUENTIAL&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.POSIX_FADV_RANDOM&quot;&gt;&lt;code&gt;POSIX_FADV_RANDOM&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.POSIX_FADV_NOREUSE&quot;&gt;&lt;code&gt;POSIX_FADV_NOREUSE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.POSIX_FADV_WILLNEED&quot;&gt;&lt;code&gt;POSIX_FADV_WILLNEED&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#os.POSIX_FADV_DONTNEED&quot;&gt;&lt;code&gt;POSIX_FADV_DONTNEED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">宣布打算以特定模式访问数据，从而允许内核进行优化。该建议适用于&lt;em&gt;fd&lt;/em&gt;指定的文件区域，该区域从&lt;em&gt;offset&lt;/em&gt;开始并持续&lt;em&gt;len&lt;/em&gt;个字节。&lt;em&gt;建议&lt;/em&gt;是&lt;a href=&quot;#os.POSIX_FADV_NORMAL&quot;&gt; &lt;code&gt;POSIX_FADV_NORMAL&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#os.POSIX_FADV_SEQUENTIAL&quot;&gt; &lt;code&gt;POSIX_FADV_SEQUENTIAL&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#os.POSIX_FADV_RANDOM&quot;&gt; &lt;code&gt;POSIX_FADV_RANDOM&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#os.POSIX_FADV_NOREUSE&quot;&gt; &lt;code&gt;POSIX_FADV_NOREUSE&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#os.POSIX_FADV_WILLNEED&quot;&gt; &lt;code&gt;POSIX_FADV_WILLNEED&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#os.POSIX_FADV_DONTNEED&quot;&gt; &lt;code&gt;POSIX_FADV_DONTNEED&lt;/code&gt; 之一&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="eddbfc47bdf2815567f148a943ae50904ef48c9e" translate="yes" xml:space="preserve">
          <source>Another Modular Crypt Format method with 16 character salt and 43 character hash based on the SHA-256 hash function.</source>
          <target state="translated">另一种基于SHA-256哈希函数的16字符盐和43字符哈希的模块化密码格式方法。</target>
        </trans-unit>
        <trans-unit id="1489f7e40318e54fcbeae8f12ceaa2e676f89a1d" translate="yes" xml:space="preserve">
          <source>Another Modular Crypt Format method with 22 character salt and 31 character hash based on the Blowfish cipher.</source>
          <target state="translated">另一种基于Blowfish密码的22字符盐和31字符哈希的模块化密码格式方法。</target>
        </trans-unit>
        <trans-unit id="cfaedd99a89f28548596fb67a7f378505de1e4e9" translate="yes" xml:space="preserve">
          <source>Another Modular Crypt Format method with 8 character salt and 22 character hash based on the MD5 hash function.</source>
          <target state="translated">另一种基于MD5哈希函数的8字符盐和22字符哈希的模块化密码格式方法。</target>
        </trans-unit>
        <trans-unit id="59264d0e98298421242f9f70b711b5e947525220" translate="yes" xml:space="preserve">
          <source>Another approach to handling multiple simultaneous requests in an environment that supports neither threads nor &lt;a href=&quot;os#os.fork&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt; (or where these are too expensive or inappropriate for the service) is to maintain an explicit table of partially finished requests and to use &lt;a href=&quot;selectors#module-selectors&quot;&gt;&lt;code&gt;selectors&lt;/code&gt;&lt;/a&gt; to decide which request to work on next (or whether to handle a new incoming request). This is particularly important for stream services where each client can potentially be connected for a long time (if threads or subprocesses cannot be used). See &lt;a href=&quot;asyncore#module-asyncore&quot;&gt;&lt;code&gt;asyncore&lt;/code&gt;&lt;/a&gt; for another way to manage this.</source>
          <target state="translated">在既不支持线程也不支持&lt;a href=&quot;os#os.fork&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt;的环境中（或对于服务而言太昂贵或不合适的环境）中处理多个同时请求的另一种方法是维护部分完成的请求的显式表，并使用&lt;a href=&quot;selectors#module-selectors&quot;&gt; &lt;code&gt;selectors&lt;/code&gt; &lt;/a&gt;来确定要处理的请求接下来的工作（或是否处理新的传入请求）。对于每个客户端都可能长时间连接的流服务（如果无法使用线程或子进程），这尤其重要。另请参见&lt;a href=&quot;asyncore#module-asyncore&quot;&gt; &lt;code&gt;asyncore&lt;/code&gt; &lt;/a&gt;来管理此问题。</target>
        </trans-unit>
        <trans-unit id="7a6eaecc1b4becc1ce97180c1ca37fd242427bac" translate="yes" xml:space="preserve">
          <source>Another approach to using deques is to maintain a sequence of recently added elements by appending to the right and popping to the left:</source>
          <target state="translated">使用deques的另一种方法是通过向右追加和向左弹出来保持最近添加的元素序列。</target>
        </trans-unit>
        <trans-unit id="154eea36fb4a3e04d9685d308f84e6f97bb356c1" translate="yes" xml:space="preserve">
          <source>Another bad idea is to print things that embed an object address, like</source>
          <target state="translated">另一个不好的想法是打印嵌入对象地址的东西,如</target>
        </trans-unit>
        <trans-unit id="857365788cdb8b0f09e1949a46fb3dc32e28e350" translate="yes" xml:space="preserve">
          <source>Another client can also use it:</source>
          <target state="translated">另一个客户也可以使用它。</target>
        </trans-unit>
        <trans-unit id="bf9dd39551f08b3b4f74c2740c180fe41caccd4b" translate="yes" xml:space="preserve">
          <source>Another example for &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-mapping&quot;&gt;mapping&lt;/a&gt; objects, using a &lt;a href=&quot;#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;, which is a generic type expecting two type parameters representing the key type and the value type. In this example, the function expects a &lt;code&gt;dict&lt;/code&gt; with keys of type &lt;a href=&quot;#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; and values of type &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">另一个使用&lt;a href=&quot;#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-mapping&quot;&gt;映射&lt;/a&gt;对象的示例，这是一个通用类型，需要两个表示键类型和值类型的类型参数。在此示例中，该函数期望一个 &lt;code&gt;dict&lt;/code&gt; ，该字典具有&lt;a href=&quot;#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;类型的键和&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;类型的值：</target>
        </trans-unit>
        <trans-unit id="830cb7a34d4e9668c5f056cdbb14f9a43e0de2af" translate="yes" xml:space="preserve">
          <source>Another example of a reusable, but not reentrant, context manager is &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt;, as it invokes &lt;em&gt;all&lt;/em&gt; currently registered callbacks when leaving any with statement, regardless of where those callbacks were added:</source>
          <target state="translated">可重用但不能重入的上下文管理器的另一个示例是&lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt;，因为它在离开任何with语句时调用&lt;em&gt;所有&lt;/em&gt;当前注册的回调，而不管这些回调的添加位置如何：</target>
        </trans-unit>
        <trans-unit id="970d45390b614e57c3adbeccf052061f6cbb7027" translate="yes" xml:space="preserve">
          <source>Another example that may behave differently from what one would expect is this:</source>
          <target state="translated">另一个可能与人们预期不同的例子是:</target>
        </trans-unit>
        <trans-unit id="1524e3727b5a15e1e58deafe30417f1f9c6a01f4" translate="yes" xml:space="preserve">
          <source>Another example that uses the &lt;a href=&quot;#shutil.ignore_patterns&quot;&gt;&lt;code&gt;ignore_patterns()&lt;/code&gt;&lt;/a&gt; helper:</source>
          <target state="translated">使用&lt;a href=&quot;#shutil.ignore_patterns&quot;&gt; &lt;code&gt;ignore_patterns()&lt;/code&gt; &lt;/a&gt;帮助器的另一个示例：</target>
        </trans-unit>
        <trans-unit id="5cd67ff52eb9c7ecece2900a3c7ca5a0e8906891" translate="yes" xml:space="preserve">
          <source>Another example that uses the &lt;em&gt;ignore&lt;/em&gt; argument to add a logging call:</source>
          <target state="translated">使用&lt;em&gt;ignore&lt;/em&gt;参数添加日志记录调用的另一个示例：</target>
        </trans-unit>
        <trans-unit id="a012876e7eec4d9cf2933f51ae341f5f02747bc6" translate="yes" xml:space="preserve">
          <source>Another function is provided to reverse the tokenization process. This is useful for creating tools that tokenize a script, modify the token stream, and write back the modified script.</source>
          <target state="translated">另一个函数是用来反转标记化过程的。这对于创建标记化脚本、修改标记流并写回修改后的脚本的工具非常有用。</target>
        </trans-unit>
        <trans-unit id="1345847ee9d2d8f4b40cf2bd43a2a8f4b81d19c5" translate="yes" xml:space="preserve">
          <source>Another important difference between &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; is that if no flags are set (the value is 0), its boolean evaluation is &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#enum.IntFlag&quot;&gt; &lt;code&gt;IntFlag&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#enum.Enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;之间的另一个重要区别是，如果未设置任何标志（值为0），则其布尔值评估为&lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="0bd138c705d1febdcd3cd71c72f455f7d8136282" translate="yes" xml:space="preserve">
          <source>Another option is to pass &lt;a href=&quot;functions#globals&quot;&gt;&lt;code&gt;globals()&lt;/code&gt;&lt;/a&gt; to the &lt;em&gt;globals&lt;/em&gt; parameter, which will cause the code to be executed within your current global namespace. This can be more convenient than individually specifying imports:</source>
          <target state="translated">另一个选择是将&lt;a href=&quot;functions#globals&quot;&gt; &lt;code&gt;globals()&lt;/code&gt; &lt;/a&gt;传递给&lt;em&gt;globals&lt;/em&gt;参数，这将导致代码在您当前的全局名称空间中执行。这比分别指定导入更方便：</target>
        </trans-unit>
        <trans-unit id="7d89ebe791f42c5af101c46d42ea21377b531087" translate="yes" xml:space="preserve">
          <source>Another similar &lt;a href=&quot;asyncio-stream#asyncio-example-create-connection-streams&quot;&gt;example&lt;/a&gt; using the high-level &lt;a href=&quot;asyncio-stream#asyncio.open_connection&quot;&gt;&lt;code&gt;asyncio.open_connection()&lt;/code&gt;&lt;/a&gt; function and streams.</source>
          <target state="translated">使用高级&lt;a href=&quot;asyncio-stream#asyncio.open_connection&quot;&gt; &lt;code&gt;asyncio.open_connection()&lt;/code&gt; &lt;/a&gt;函数和流的另一个类似&lt;a href=&quot;asyncio-stream#asyncio-example-create-connection-streams&quot;&gt;示例&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b12cf40ba46cdbcdda739851e799c9deed7beda0" translate="yes" xml:space="preserve">
          <source>Another simple application of doctest is testing interactive examples in a text file. This can be done with the &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">doctest的另一个简单应用是在文本文件中测试交互式示例。这可以通过&lt;a href=&quot;#doctest.testfile&quot;&gt; &lt;code&gt;testfile()&lt;/code&gt; &lt;/a&gt;函数完成：</target>
        </trans-unit>
        <trans-unit id="380a1673c02d6ffedb7ef8ccb17de0d7583fd47b" translate="yes" xml:space="preserve">
          <source>Another solution to the problem of non-comparable tasks is to create a wrapper class that ignores the task item and only compares the priority field:</source>
          <target state="translated">另一种解决不可比较任务问题的方法是创建一个忽略任务项,只比较优先级字段的封装类。</target>
        </trans-unit>
        <trans-unit id="0f5e78d9ba1c7a1f17d713904f11c8fb976e77d2" translate="yes" xml:space="preserve">
          <source>Another specification of the format, with details on locking.</source>
          <target state="translated">另一种规格的格式,有详细的锁定。</target>
        </trans-unit>
        <trans-unit id="e0a6209aa300b723ce63cb3581b82c93359f079d" translate="yes" xml:space="preserve">
          <source>Another specification of the format. Describes a common extension for supporting folders.</source>
          <target state="translated">该格式的另一种规格。描述了支持文件夹的通用扩展。</target>
        </trans-unit>
        <trans-unit id="259c6f7c7f71afa5d1276a3716f6996db84a2e2c" translate="yes" xml:space="preserve">
          <source>Another test-support module with a very different flavor.</source>
          <target state="translated">又是一个风味迥异的测试支持模块。</target>
        </trans-unit>
        <trans-unit id="e52e511337918750293ba11f89a9f569c1bc3067" translate="yes" xml:space="preserve">
          <source>Another use case might be to replace an object with an &lt;a href=&quot;io#io.StringIO&quot;&gt;&lt;code&gt;io.StringIO&lt;/code&gt;&lt;/a&gt; instance:</source>
          <target state="translated">另一个用例可能是用&lt;a href=&quot;io#io.StringIO&quot;&gt; &lt;code&gt;io.StringIO&lt;/code&gt; &lt;/a&gt;实例替换对象：</target>
        </trans-unit>
        <trans-unit id="62a6c1f548ab752cd5952e7bc0d4d963e5bf6502" translate="yes" xml:space="preserve">
          <source>Another way to encode binary hashes for non-binary environments.</source>
          <target state="translated">另一种为非二进制环境编码二进制哈希的方法。</target>
        </trans-unit>
        <trans-unit id="fefd86df1dfa20cdf5dc78f24eca9be7a5e90b0f" translate="yes" xml:space="preserve">
          <source>Another way to handle this is with the following example:</source>
          <target state="translated">另一种处理方式是用下面的例子。</target>
        </trans-unit>
        <trans-unit id="16e0cebdfbbfd2a87dc6c52fdedb0b3db0e01e83" translate="yes" xml:space="preserve">
          <source>Another way to use variable-sized data types with &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; is to use the dynamic nature of Python, and (re-)define the data type after the required size is already known, on a case by case basis.</source>
          <target state="translated">将可变大小的数据类型与&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; &lt;/a&gt;一起使用的另一种方法是使用Python的动态特性，并根据具体情况在已知所需大小之后重新定义数据类型。</target>
        </trans-unit>
        <trans-unit id="e0aafffa028c1a77c7cc61a286a8bfa21a85356c" translate="yes" xml:space="preserve">
          <source>Answered</source>
          <target state="translated">Answered</target>
        </trans-unit>
        <trans-unit id="082fb2ca7290eae9e50333c559aae463c44ee785" translate="yes" xml:space="preserve">
          <source>Any *args and **kwargs supplied for this function are directly passed to &lt;em&gt;func&lt;/em&gt;. Also, the current &lt;a href=&quot;contextvars#contextvars.Context&quot;&gt;&lt;code&gt;contextvars.Context&lt;/code&gt;&lt;/a&gt; is propogated, allowing context variables from the event loop thread to be accessed in the separate thread.</source>
          <target state="translated">为此功能提供的所有* args和** kwargs都直接传递给&lt;em&gt;func&lt;/em&gt;。此外，&lt;a href=&quot;contextvars#contextvars.Context&quot;&gt; &lt;code&gt;contextvars.Context&lt;/code&gt; &lt;/a&gt;传播当前的contextvars.Context，从而允许在单独的线程中访问事件循环线程中的上下文变量。</target>
        </trans-unit>
        <trans-unit id="af5a6d2c7bcbd0595666bd7855f0f03cca3bf497" translate="yes" xml:space="preserve">
          <source>Any changes to any context variables that &lt;em&gt;callable&lt;/em&gt; makes will be contained in the context object:</source>
          <target state="translated">对&lt;em&gt;可调用的&lt;/em&gt;上下文变量的任何更改将包含在上下文对象中：</target>
        </trans-unit>
        <trans-unit id="8e39a27177f793a03dc9f620dad817066a7f33c1" translate="yes" xml:space="preserve">
          <source>Any classes found are recursively searched similarly, to test docstrings in their contained methods and nested classes.</source>
          <target state="translated">找到的任何类都会被类似地递归搜索,以测试其包含的方法和嵌套类中的docstrings。</target>
        </trans-unit>
        <trans-unit id="f798ac81b2f74b659d7f586dd5eabb5ce15db13e" translate="yes" xml:space="preserve">
          <source>Any container can be passed as the &lt;em&gt;choices&lt;/em&gt; value, so &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; objects, &lt;a href=&quot;stdtypes#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; objects, and custom containers are all supported.</source>
          <target state="translated">任何容器都可以作为&lt;em&gt;options&lt;/em&gt;值传递，因此&lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt;对象，&lt;a href=&quot;stdtypes#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;对象和自定义容器都受支持。</target>
        </trans-unit>
        <trans-unit id="808d1aeb7f37ecb67a57bc678598df13336e350c" translate="yes" xml:space="preserve">
          <source>Any container can be passed as the &lt;em&gt;choices&lt;/em&gt; value, so &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; objects, &lt;a href=&quot;stdtypes#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; objects, and custom containers are all supported. This includes &lt;a href=&quot;enum#enum.Enum&quot;&gt;&lt;code&gt;enum.Enum&lt;/code&gt;&lt;/a&gt;, which could be used to restrain argument&amp;rsquo;s choices; if we reuse previous rock/paper/scissors game example, this could be as follows:</source>
          <target state="translated">任何容器都可以作为&lt;em&gt;options&lt;/em&gt;值传递，因此&lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt;对象，&lt;a href=&quot;stdtypes#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;对象和自定义容器都受支持。这包括&lt;a href=&quot;enum#enum.Enum&quot;&gt; &lt;code&gt;enum.Enum&lt;/code&gt; &lt;/a&gt;，它可以用来限制参数的选择；如果我们重用以前的摇滚/剪纸/剪刀游戏示例，则可能如下所示：</target>
        </trans-unit>
        <trans-unit id="96d6483718787eb0c399b57df09b4bd366515f2b" translate="yes" xml:space="preserve">
          <source>Any detected nonconformance results in an &lt;a href=&quot;exceptions#AssertionError&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt; being raised; note, however, that how these errors are handled is server-dependent. For example, &lt;a href=&quot;#module-wsgiref.simple_server&quot;&gt;&lt;code&gt;wsgiref.simple_server&lt;/code&gt;&lt;/a&gt; and other servers based on &lt;a href=&quot;#module-wsgiref.handlers&quot;&gt;&lt;code&gt;wsgiref.handlers&lt;/code&gt;&lt;/a&gt; (that don&amp;rsquo;t override the error handling methods to do something else) will simply output a message that an error has occurred, and dump the traceback to &lt;code&gt;sys.stderr&lt;/code&gt; or some other error stream.</source>
          <target state="translated">任何检测到的不符合都会导致引发&lt;a href=&quot;exceptions#AssertionError&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt;；但是请注意，如何处理这些错误取决于服务器。例如，&lt;a href=&quot;#module-wsgiref.simple_server&quot;&gt; &lt;code&gt;wsgiref.simple_server&lt;/code&gt; &lt;/a&gt;和其他基于&lt;a href=&quot;#module-wsgiref.handlers&quot;&gt; &lt;code&gt;wsgiref.handlers&lt;/code&gt; 的&lt;/a&gt;服务器（不会重写错误处理方法以执行其他操作）将仅输出一条消息，指出发生了错误，并将追溯信息转储到 &lt;code&gt;sys.stderr&lt;/code&gt; 或其他其他错误流。</target>
        </trans-unit>
        <trans-unit id="c3161a1f48d49aece84ad1e7ba2994c99487c066" translate="yes" xml:space="preserve">
          <source>Any expected output must immediately follow the final &lt;code&gt;'&amp;gt;&amp;gt;&amp;gt; '&lt;/code&gt; or &lt;code&gt;'... '&lt;/code&gt; line containing the code, and the expected output (if any) extends to the next &lt;code&gt;'&amp;gt;&amp;gt;&amp;gt; '&lt;/code&gt; or all-whitespace line.</source>
          <target state="translated">任何预期的输出必须紧随包含代码的最后 &lt;code&gt;'&amp;gt;&amp;gt;&amp;gt; '&lt;/code&gt; 或 &lt;code&gt;'... '&lt;/code&gt; 行之后，并且预期的输出（如果有）扩展到下一个 &lt;code&gt;'&amp;gt;&amp;gt;&amp;gt; '&lt;/code&gt; 或全空白行。</target>
        </trans-unit>
        <trans-unit id="16ef8204c61c9a1813182c916e1e34ec0c335625" translate="yes" xml:space="preserve">
          <source>Any files may be present in the ZIP archive, but only files &lt;code&gt;.py&lt;/code&gt; and &lt;code&gt;.pyc&lt;/code&gt; are available for import. ZIP import of dynamic modules (&lt;code&gt;.pyd&lt;/code&gt;, &lt;code&gt;.so&lt;/code&gt;) is disallowed. Note that if an archive only contains &lt;code&gt;.py&lt;/code&gt; files, Python will not attempt to modify the archive by adding the corresponding &lt;code&gt;.pyc&lt;/code&gt; file, meaning that if a ZIP archive doesn&amp;rsquo;t contain &lt;code&gt;.pyc&lt;/code&gt; files, importing may be rather slow.</source>
          <target state="translated">ZIP档案中可能存在任何文件，但是只有 &lt;code&gt;.py&lt;/code&gt; 和 &lt;code&gt;.pyc&lt;/code&gt; 文件可用于导入。不允许对动态模块（ &lt;code&gt;.pyd&lt;/code&gt; ， &lt;code&gt;.so&lt;/code&gt; ）进行ZIP导入。请注意，如果存档仅包含 &lt;code&gt;.py&lt;/code&gt; 文件，Python将不会尝试通过添加相应的 &lt;code&gt;.pyc&lt;/code&gt; 文件来修改存档，这意味着，如果ZIP存档中不包含 &lt;code&gt;.pyc&lt;/code&gt; 文件，则导入可能会非常缓慢。</target>
        </trans-unit>
        <trans-unit id="f8dee1375bcf6a8c6c517898f5fc97f065da4ba9" translate="yes" xml:space="preserve">
          <source>Any form of network IO; &lt;code&gt;recv()&lt;/code&gt; and &lt;code&gt;send()&lt;/code&gt; read and write only to the underlying &lt;a href=&quot;#ssl.MemoryBIO&quot;&gt;&lt;code&gt;MemoryBIO&lt;/code&gt;&lt;/a&gt; buffers.</source>
          <target state="translated">任何形式的网络IO； &lt;code&gt;recv()&lt;/code&gt; 和 &lt;code&gt;send()&lt;/code&gt; 只能读写底层的&lt;a href=&quot;#ssl.MemoryBIO&quot;&gt; &lt;code&gt;MemoryBIO&lt;/code&gt; &lt;/a&gt;缓冲区。</target>
        </trans-unit>
        <trans-unit id="0f114f3ceee9858acec62bd48fb36dd2e76f81ac" translate="yes" xml:space="preserve">
          <source>Any header object, or any header that is refolded due to the policy settings, is folded using an algorithm that fully implements the RFC folding algorithms, including knowing where encoded words are required and allowed.</source>
          <target state="translated">任何头对象,或者任何由于策略设置而重新折叠的头,都会使用完全实现RFC折叠算法的算法进行折叠,包括知道哪里需要和允许使用编码词。</target>
        </trans-unit>
        <trans-unit id="87a66302b5c5f0a22de125246046b1cdfffefa6b" translate="yes" xml:space="preserve">
          <source>Any object can be tested for truth value, for use in an &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; condition or as operand of the Boolean operations below.</source>
          <target state="translated">可以测试任何对象的真值，以在&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt;条件中使用，或用作以下布尔运算的操作数。</target>
        </trans-unit>
        <trans-unit id="d1110e65f07bb65d564abb72e4ad0a27d774a7b9" translate="yes" xml:space="preserve">
          <source>Any object can be tested for truth value, for use in an &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; condition or as operand of the Boolean operations below.</source>
          <target state="translated">可以测试任何对象的真值，以在&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt;条件中使用，或用作以下布尔运算的操作数。</target>
        </trans-unit>
        <trans-unit id="b871425be90d75ff7f0f750362354908800f258b" translate="yes" xml:space="preserve">
          <source>Any other appearance of &lt;code&gt;$&lt;/code&gt; in the string will result in a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; being raised.</source>
          <target state="translated">字符串中 &lt;code&gt;$&lt;/code&gt; 的任何其他外观将导致引发&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="32e241730c485594f505f9764a3cbc96f2e45b62" translate="yes" xml:space="preserve">
          <source>Any other keys in the dictionary are ignored, to allow for future extensions. If the path cannot be handled, &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">字典中的任何其他键都将被忽略，以允许将来扩展。如果无法处理该路径，则会引发&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e32d9113d754ea90473171c0599a4afdcc0feabd" translate="yes" xml:space="preserve">
          <source>Any truncated integers at the end of the list of file descriptors.</source>
          <target state="translated">文件描述符列表末尾的任何截断的整数。</target>
        </trans-unit>
        <trans-unit id="8d4f45530c29236c208822a755f335ab895f7ae9" translate="yes" xml:space="preserve">
          <source>Any valid Python identifier may be used for a fieldname except for names starting with an underscore. Valid identifiers consist of letters, digits, and underscores but do not start with a digit or underscore and cannot be a &lt;a href=&quot;keyword#module-keyword&quot;&gt;&lt;code&gt;keyword&lt;/code&gt;&lt;/a&gt; such as &lt;em&gt;class&lt;/em&gt;, &lt;em&gt;for&lt;/em&gt;, &lt;em&gt;return&lt;/em&gt;, &lt;em&gt;global&lt;/em&gt;, &lt;em&gt;pass&lt;/em&gt;, or &lt;em&gt;raise&lt;/em&gt;.</source>
          <target state="translated">除下划线开头的名称外，任何有效的Python标识符均可用于字段名。有效标识符由字母，数字和下划线组成，但不能以数字或下划线开头，并且不能是诸如&lt;em&gt;class&lt;/em&gt;，&lt;em&gt;for&lt;/em&gt;，&lt;em&gt;return&lt;/em&gt;，&lt;em&gt;global&lt;/em&gt;，&lt;em&gt;pass&lt;/em&gt;或&lt;em&gt;raise之&lt;/em&gt;&lt;em&gt;类&lt;/em&gt;的&lt;a href=&quot;keyword#module-keyword&quot;&gt; &lt;code&gt;keyword&lt;/code&gt; &lt;/a&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1518232458ae063224b67a33fbc39f874e6e7652" translate="yes" xml:space="preserve">
          <source>Any value error related to the address.</source>
          <target state="translated">任何与地址有关的数值错误。</target>
        </trans-unit>
        <trans-unit id="71a52ce7a5fdb3bd7ec0934cf4eb202d8034ff6e" translate="yes" xml:space="preserve">
          <source>Any value error related to the net mask.</source>
          <target state="translated">任何与净掩码有关的数值错误。</target>
        </trans-unit>
        <trans-unit id="f5f7839523439ed5db0c3285770ed6a7ad0ef07d" translate="yes" xml:space="preserve">
          <source>Apart from &lt;a href=&quot;#configparser.ConfigParser.getboolean&quot;&gt;&lt;code&gt;getboolean()&lt;/code&gt;&lt;/a&gt;, config parsers also provide equivalent &lt;a href=&quot;#configparser.ConfigParser.getint&quot;&gt;&lt;code&gt;getint()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#configparser.ConfigParser.getfloat&quot;&gt;&lt;code&gt;getfloat()&lt;/code&gt;&lt;/a&gt; methods. You can register your own converters and customize the provided ones. &lt;a href=&quot;#id14&quot; id=&quot;id4&quot;&gt;1&lt;/a&gt;</source>
          <target state="translated">除了&lt;a href=&quot;#configparser.ConfigParser.getboolean&quot;&gt; &lt;code&gt;getboolean()&lt;/code&gt; 之外&lt;/a&gt;，配置解析器还提供等效的&lt;a href=&quot;#configparser.ConfigParser.getint&quot;&gt; &lt;code&gt;getint()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#configparser.ConfigParser.getfloat&quot;&gt; &lt;code&gt;getfloat()&lt;/code&gt; &lt;/a&gt;方法。您可以注册自己的转换器并自定义提供的转换器。&lt;a href=&quot;#id14&quot; id=&quot;id4&quot;&gt;1个&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="004e30185abf19283aba3fcb4dd5458909228910" translate="yes" xml:space="preserve">
          <source>Apart from making the code (potentially) compatible with Windows and the other start methods this also ensures that as long as the child process is still alive the object will not be garbage collected in the parent process. This might be important if some resource is freed when the object is garbage collected in the parent process.</source>
          <target state="translated">除了使代码(可能)与Windows和其他启动方法兼容之外,这也确保了只要子进程还活着,对象就不会在父进程中被垃圾回收。如果当对象在父进程中被垃圾回收时,一些资源被释放,这一点可能很重要。</target>
        </trans-unit>
        <trans-unit id="e2f8e3f0f5b15c39aef46bc951d434aa2f994181" translate="yes" xml:space="preserve">
          <source>Apart from the node classes, the &lt;a href=&quot;#module-ast&quot;&gt;&lt;code&gt;ast&lt;/code&gt;&lt;/a&gt; module defines these utility functions and classes for traversing abstract syntax trees:</source>
          <target state="translated">除了节点类之外，&lt;a href=&quot;#module-ast&quot;&gt; &lt;code&gt;ast&lt;/code&gt; &lt;/a&gt;模块还定义了以下实用程序函数和类，用于遍历抽象语法树：</target>
        </trans-unit>
        <trans-unit id="41def7a0febe741da87c5b79ce78ce27b83f3ae7" translate="yes" xml:space="preserve">
          <source>Appearance</source>
          <target state="translated">Appearance</target>
        </trans-unit>
        <trans-unit id="7c6156597bec64b2efa893f896b414ba015b84f0" translate="yes" xml:space="preserve">
          <source>Append &lt;em&gt;line&lt;/em&gt; to the history buffer, as if it was the last line typed. This calls &lt;code&gt;add_history()&lt;/code&gt; in the underlying library.</source>
          <target state="translated">将&lt;em&gt;行&lt;/em&gt;追加到历史记录缓冲区，就像它是最后键入的行一样。这将在基础库中调用 &lt;code&gt;add_history()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="15e3d810f53a90235f3be7ee31ad204835b47079" translate="yes" xml:space="preserve">
          <source>Append &lt;em&gt;message&lt;/em&gt; to named mailbox.</source>
          <target state="translated">将&lt;em&gt;邮件&lt;/em&gt;追加到命名邮箱。</target>
        </trans-unit>
        <trans-unit id="5012b56fdb1fabff75d417024359f5123b3c7cf5" translate="yes" xml:space="preserve">
          <source>Append a new action at the end. The &lt;em&gt;cmd&lt;/em&gt; variable must be a valid bourne shell command. The &lt;em&gt;kind&lt;/em&gt; variable consists of two letters.</source>
          <target state="translated">最后追加一个新动作。在&lt;em&gt;CMD&lt;/em&gt;变量必须是一个有效的Bourne shell命令。该&lt;em&gt;种&lt;/em&gt;变量由两个字母组成。</target>
        </trans-unit>
        <trans-unit id="ccb2f2dddbf426366118168a9e541a67ab5450c2" translate="yes" xml:space="preserve">
          <source>Append a new item with value &lt;em&gt;x&lt;/em&gt; to the end of the array.</source>
          <target state="translated">将值&lt;em&gt;x&lt;/em&gt;的新项目追加到数组的末尾。</target>
        </trans-unit>
        <trans-unit id="bec2f10908ba5de36daf156b98af3c60ee338f32" translate="yes" xml:space="preserve">
          <source>Append items from &lt;em&gt;iterable&lt;/em&gt; to the end of the array. If &lt;em&gt;iterable&lt;/em&gt; is another array, it must have &lt;em&gt;exactly&lt;/em&gt; the same type code; if not, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be raised. If &lt;em&gt;iterable&lt;/em&gt; is not an array, it must be iterable and its elements must be the right type to be appended to the array.</source>
          <target state="translated">将项目从&lt;em&gt;iterable&lt;/em&gt;追加到数组的末尾。如果&lt;em&gt;iterable&lt;/em&gt;是另一个数组，则它必须具有&lt;em&gt;完全相同&lt;/em&gt;的类型代码。否则，将引发&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;。如果&lt;em&gt;iterable&lt;/em&gt;不是数组，则它必须是可迭代的，并且其元素必须是要附加到数组的正确类型。</target>
        </trans-unit>
        <trans-unit id="70b18019b4972b108e37841f15945c9d21d175bf" translate="yes" xml:space="preserve">
          <source>Append items from the list. This is equivalent to &lt;code&gt;for x in list:
a.append(x)&lt;/code&gt; except that if there is a type error, the array is unchanged.</source>
          <target state="translated">追加列表中的项目。这等效 &lt;code&gt;for x in list: a.append(x)&lt;/code&gt; 不同之处在于如果存在类型错误，则数组不变。</target>
        </trans-unit>
        <trans-unit id="44b7a672882b72ed3eb65f4fc161e2735a4aad2e" translate="yes" xml:space="preserve">
          <source>Append the callable &lt;em&gt;hook&lt;/em&gt; to the list of active auditing hooks for the current interpreter.</source>
          <target state="translated">将可调用的&lt;em&gt;挂钩&lt;/em&gt;附加到当前解释器的活动审核挂钩列表中。</target>
        </trans-unit>
        <trans-unit id="cb08b061999d25be95bd753505fb9df32467aab4" translate="yes" xml:space="preserve">
          <source>Append the last &lt;em&gt;nelements&lt;/em&gt; items of history to a file. The default filename is &lt;code&gt;~/.history&lt;/code&gt;. The file must already exist. This calls &lt;code&gt;append_history()&lt;/code&gt; in the underlying library. This function only exists if Python was compiled for a version of the library that supports it.</source>
          <target state="translated">将历史记录的最后一个&lt;em&gt;元素&lt;/em&gt;追加到文件中。默认文件名是 &lt;code&gt;~/.history&lt;/code&gt; 。该文件必须已经存在。这将在基础库中调用 &lt;code&gt;append_history()&lt;/code&gt; 。仅当Python是针对支持该库的版本编译的时，此函数才存在。</target>
        </trans-unit>
        <trans-unit id="2c421a3b35b989d4ece772b4d7f4d642bcef1d02" translate="yes" xml:space="preserve">
          <source>Append the record to the buffer. If &lt;a href=&quot;#logging.handlers.BufferingHandler.shouldFlush&quot;&gt;&lt;code&gt;shouldFlush()&lt;/code&gt;&lt;/a&gt; returns true, call &lt;a href=&quot;#logging.handlers.BufferingHandler.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt; to process the buffer.</source>
          <target state="translated">将记录追加到缓冲区。如果&lt;a href=&quot;#logging.handlers.BufferingHandler.shouldFlush&quot;&gt; &lt;code&gt;shouldFlush()&lt;/code&gt; &lt;/a&gt;返回true，则调用&lt;a href=&quot;#logging.handlers.BufferingHandler.flush&quot;&gt; &lt;code&gt;flush()&lt;/code&gt; &lt;/a&gt;处理缓冲区。</target>
        </trans-unit>
        <trans-unit id="b6428efcfa3b692ae0853afc12b91104655bc067" translate="yes" xml:space="preserve">
          <source>Append the string &lt;em&gt;s&lt;/em&gt; to the MIME header.</source>
          <target state="translated">将字符串&lt;em&gt;s&lt;/em&gt;附加到MIME标头。</target>
        </trans-unit>
        <trans-unit id="63afd5dcef3cb2a0dae141c8bb5ab6871063eaa8" translate="yes" xml:space="preserve">
          <source>Appends &lt;em&gt;subelements&lt;/em&gt; from a sequence object with zero or more elements. Raises &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if a subelement is not an &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">从具有零个或多个元素的序列对象中追加&lt;em&gt;子&lt;/em&gt;元素。如果子元素不是&lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt; &lt;code&gt;Element&lt;/code&gt; ,&lt;/a&gt;则引发&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5bceea9f719c67ae44ec147e59a3ff45f6a13a85" translate="yes" xml:space="preserve">
          <source>Appends items from the string, interpreting the string as an array of machine values (as if it had been read from a file using the &lt;a href=&quot;#array.array.fromfile&quot;&gt;&lt;code&gt;fromfile()&lt;/code&gt;&lt;/a&gt; method).</source>
          <target state="translated">附加字符串中的项，将字符串解释为机器值的数组（就像已使用&lt;a href=&quot;#array.array.fromfile&quot;&gt; &lt;code&gt;fromfile()&lt;/code&gt; &lt;/a&gt;方法从文件中读取字符串一样）。</target>
        </trans-unit>
        <trans-unit id="7f55a9d7c4f227e50d8f45b68bd0268e8a04c0f7" translate="yes" xml:space="preserve">
          <source>Appends whitespace to the subtree to indent the tree visually. This can be used to generate pretty-printed XML output. &lt;em&gt;tree&lt;/em&gt; can be an Element or ElementTree. &lt;em&gt;space&lt;/em&gt; is the whitespace string that will be inserted for each indentation level, two space characters by default. For indenting partial subtrees inside of an already indented tree, pass the initial indentation level as &lt;em&gt;level&lt;/em&gt;.</source>
          <target state="translated">将空白附加到子树以可视地缩进树。这可用于生成漂亮的XML输出。&lt;em&gt;树&lt;/em&gt;可以是Element或ElementTree。&lt;em&gt;空格&lt;/em&gt;是将在每个缩进级别插入的空白字符串，默认情况下为两个空格字符。要在已缩进的树内缩进部分子树，请将初始缩进级别传递为&lt;em&gt;level&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e26d38984e101ccc199d48ef993f80d0a613b479" translate="yes" xml:space="preserve">
          <source>Apple&amp;rsquo;s documentation of the file format.</source>
          <target state="translated">Apple的文件格式文档。</target>
        </trans-unit>
        <trans-unit id="09c258e5edf35ac67db5d64e7635e8a3d86b778e" translate="yes" xml:space="preserve">
          <source>Application developers should typically use the high-level asyncio functions, such as &lt;a href=&quot;asyncio-task#asyncio.run&quot;&gt;&lt;code&gt;asyncio.run()&lt;/code&gt;&lt;/a&gt;, and should rarely need to reference the loop object or call its methods. This section is intended mostly for authors of lower-level code, libraries, and frameworks, who need finer control over the event loop behavior.</source>
          <target state="translated">应用程序开发人员通常应使用高级asyncio函数，例如&lt;a href=&quot;asyncio-task#asyncio.run&quot;&gt; &lt;code&gt;asyncio.run()&lt;/code&gt; &lt;/a&gt;，并且几乎不需要引用循环对象或调用其方法。本部分主要面向需要更好地控制事件循环行为的较低级代码，库和框架的作者。</target>
        </trans-unit>
        <trans-unit id="ad91f8ac2108f501e8aa1719fa2b68f46b05d5af" translate="yes" xml:space="preserve">
          <source>Applications can add their own callbacks to this list. The primary use cases are:</source>
          <target state="translated">应用程序可以向这个列表添加自己的回调。主要的用例是:</target>
        </trans-unit>
        <trans-unit id="15e3de344c6c36974c5693ae0deb456a758bdd3d" translate="yes" xml:space="preserve">
          <source>Applications may store arbitrary objects in these attributes.</source>
          <target state="translated">应用程序可以在这些属性中存储任意对象。</target>
        </trans-unit>
        <trans-unit id="9c498690ce78323bc09d2e18d14d4892b6e8abd0" translate="yes" xml:space="preserve">
          <source>Applications should not &lt;a href=&quot;http://cwe.mitre.org/data/definitions/257.html&quot;&gt;store passwords in a recoverable format&lt;/a&gt;, whether plain text or encrypted. They should be salted and hashed using a cryptographically-strong one-way (irreversible) hash function.</source>
          <target state="translated">应用程序不应&lt;a href=&quot;http://cwe.mitre.org/data/definitions/257.html&quot;&gt;以可恢复的格式&lt;/a&gt;（纯文本格式或加密格式）存储密码。应该使用加密强度高的单向（不可逆）哈希函数对它们进行加盐和哈希处理。</target>
        </trans-unit>
        <trans-unit id="b490480b364b96a3b5b0f26f0dabadfc5c63c79e" translate="yes" xml:space="preserve">
          <source>Applications should not &lt;a href=&quot;https://cwe.mitre.org/data/definitions/257.html&quot;&gt;store passwords in a recoverable format&lt;/a&gt;, whether plain text or encrypted. They should be salted and hashed using a cryptographically-strong one-way (irreversible) hash function.</source>
          <target state="translated">应用程序不应&lt;a href=&quot;https://cwe.mitre.org/data/definitions/257.html&quot;&gt;以可恢复的格式&lt;/a&gt;（无论是纯文本格式还是加密格式）存储密码。应该使用加密强度高的单向（不可逆）哈希函数对它们进行加盐和哈希处理。</target>
        </trans-unit>
        <trans-unit id="9516d3c40d5579ce0328d2d1808e751ea327f8e2" translate="yes" xml:space="preserve">
          <source>Applications that can&amp;rsquo;t bear wall-time ambiguities should explicitly check the value of the &lt;a href=&quot;#datetime.datetime.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; attribute or avoid using hybrid &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclasses; there are no ambiguities when using &lt;a href=&quot;#datetime.timezone&quot;&gt;&lt;code&gt;timezone&lt;/code&gt;&lt;/a&gt;, or any other fixed-offset &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass (such as a class representing only EST (fixed offset -5 hours), or only EDT (fixed offset -4 hours)).</source>
          <target state="translated">无法忍受时间不确定性的应用程序应显式检查&lt;a href=&quot;#datetime.datetime.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; &lt;/a&gt;属性的值，或避免使用混合的&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;子类。使用&lt;a href=&quot;#datetime.timezone&quot;&gt; &lt;code&gt;timezone&lt;/code&gt; &lt;/a&gt;或任何其他固定偏移量的&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;子类（例如仅表示EST（固定偏移量-5小时）或仅EDT（固定偏移量-4小时）的类）时，没有任何歧义。</target>
        </trans-unit>
        <trans-unit id="0719959018ae4f7d3b51e5a78769bd3b0ca3df46" translate="yes" xml:space="preserve">
          <source>Applications that need to operate on potentially improperly quoted URLs that may contain non-ASCII data will need to do their own decoding from bytes to characters before invoking the URL parsing methods.</source>
          <target state="translated">需要对可能包含非ASCII数据的潜在不当引用的URL进行操作的应用程序,需要在调用URL解析方法之前,自己进行从字节到字符的解码。</target>
        </trans-unit>
        <trans-unit id="fafdab997b122fcdc3b5c0971f1785992cabff68" translate="yes" xml:space="preserve">
          <source>Applications will create objects of this class for use in the &lt;a href=&quot;#xml.sax.xmlreader.XMLReader.parse&quot;&gt;&lt;code&gt;XMLReader.parse()&lt;/code&gt;&lt;/a&gt; method and for returning from EntityResolver.resolveEntity.</source>
          <target state="translated">应用程序将创建此类的对象，以用于&lt;a href=&quot;#xml.sax.xmlreader.XMLReader.parse&quot;&gt; &lt;code&gt;XMLReader.parse()&lt;/code&gt; &lt;/a&gt;方法并从EntityResolver.resolveEntity返回。</target>
        </trans-unit>
        <trans-unit id="e7284143fe53744047558a065875930ca468cf98" translate="yes" xml:space="preserve">
          <source>Applies the logical operation &lt;em&gt;and&lt;/em&gt; between each operand&amp;rsquo;s digits.</source>
          <target state="translated">应用逻辑操作&lt;em&gt;和&lt;/em&gt;每个操作数的数字之间。</target>
        </trans-unit>
        <trans-unit id="37c10a7d11316205bdac710e988348ca767a1a19" translate="yes" xml:space="preserve">
          <source>Applies the logical operation &lt;em&gt;or&lt;/em&gt; between each operand&amp;rsquo;s digits.</source>
          <target state="translated">应用逻辑运算&lt;em&gt;或&lt;/em&gt;在每个操作数的数字之间。</target>
        </trans-unit>
        <trans-unit id="a0b520db8cdcd1e798321610d25b1d0aa46d3781" translate="yes" xml:space="preserve">
          <source>Applies the logical operation &lt;em&gt;xor&lt;/em&gt; between each operand&amp;rsquo;s digits.</source>
          <target state="translated">在每个操作数的数字之间应用逻辑运算&amp;ldquo; &lt;em&gt;异或&amp;rdquo;&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="c6347e1f0ae0fe6eb691488a3a3790d194631241" translate="yes" xml:space="preserve">
          <source>Apply &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-19&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; rules on unverifiable transactions even to Netscape cookies.</source>
          <target state="translated">将&lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-19&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt;规则应用于不可验证的事务，甚至应用于Netscape cookie。</target>
        </trans-unit>
        <trans-unit id="b6c11221fbbce04188875f4bbd9a5712dd69e34a" translate="yes" xml:space="preserve">
          <source>Apply &lt;em&gt;function&lt;/em&gt; of two arguments cumulatively to the items of &lt;em&gt;iterable&lt;/em&gt;, from left to right, so as to reduce the iterable to a single value. For example, &lt;code&gt;reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])&lt;/code&gt; calculates &lt;code&gt;((((1+2)+3)+4)+5)&lt;/code&gt;. The left argument, &lt;em&gt;x&lt;/em&gt;, is the accumulated value and the right argument, &lt;em&gt;y&lt;/em&gt;, is the update value from the &lt;em&gt;iterable&lt;/em&gt;. If the optional &lt;em&gt;initializer&lt;/em&gt; is present, it is placed before the items of the iterable in the calculation, and serves as a default when the iterable is empty. If &lt;em&gt;initializer&lt;/em&gt; is not given and &lt;em&gt;iterable&lt;/em&gt; contains only one item, the first item is returned.</source>
          <target state="translated">将两个参数的&lt;em&gt;函数&lt;/em&gt;从左到右累计应用于&lt;em&gt;iterable&lt;/em&gt;的项，以将iterable减小为单个值。例如， &lt;code&gt;reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])&lt;/code&gt; 计算 &lt;code&gt;((((1+2)+3)+4)+5)&lt;/code&gt; 。左边的参数&lt;em&gt;x&lt;/em&gt;是累加值，右边的参数&lt;em&gt;y&lt;/em&gt;是&lt;em&gt;iterable中&lt;/em&gt;的更新值。如果存在可选的&lt;em&gt;初始&lt;/em&gt;值设定项，则将其放在计算中可迭代项的前面，并在可迭代项为空时用作默认值。如果未给出&lt;em&gt;初始&lt;/em&gt;值设定项，并且&lt;em&gt;iterable&lt;/em&gt;仅包含一项，则返回第一项。</target>
        </trans-unit>
        <trans-unit id="6f6b8050ae59615c4994444f8cdf9e2812e29cae" translate="yes" xml:space="preserve">
          <source>Apply this handler&amp;rsquo;s filters to the record and return &lt;code&gt;True&lt;/code&gt; if the record is to be processed. The filters are consulted in turn, until one of them returns a false value. If none of them return a false value, the record will be emitted. If one returns a false value, the handler will not emit the record.</source>
          <target state="translated">将此处理程序的过滤器应用于记录，如果要处理记录，则返回 &lt;code&gt;True&lt;/code&gt; 。依次查询过滤器，直到其中一个返回假值为止。如果它们都不返回假值，则将发出记录。如果返回一个假值，则处理程序将不会发出记录。</target>
        </trans-unit>
        <trans-unit id="75727d4b37b8d6f61c121aa55945e43277e79623" translate="yes" xml:space="preserve">
          <source>Apply this logger&amp;rsquo;s filters to the record and return &lt;code&gt;True&lt;/code&gt; if the record is to be processed. The filters are consulted in turn, until one of them returns a false value. If none of them return a false value, the record will be processed (passed to handlers). If one returns a false value, no further processing of the record occurs.</source>
          <target state="translated">将记录器的过滤器应用于记录，如果要处理记录，则返回 &lt;code&gt;True&lt;/code&gt; 。依次查询过滤器，直到其中一个返回假值为止。如果它们都不返回假值，则记录将被处理（传递给处理程序）。如果返回一个假值，则不会对该记录进行进一步处理。</target>
        </trans-unit>
        <trans-unit id="f5f8992ee05391b7dd15844b0a81da4dcbca1d1a" translate="yes" xml:space="preserve">
          <source>Apply, test or remove a POSIX lock on an open file descriptor. &lt;em&gt;fd&lt;/em&gt; is an open file descriptor. &lt;em&gt;cmd&lt;/em&gt; specifies the command to use - one of &lt;a href=&quot;#os.F_LOCK&quot;&gt;&lt;code&gt;F_LOCK&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.F_TLOCK&quot;&gt;&lt;code&gt;F_TLOCK&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.F_ULOCK&quot;&gt;&lt;code&gt;F_ULOCK&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#os.F_TEST&quot;&gt;&lt;code&gt;F_TEST&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;len&lt;/em&gt; specifies the section of the file to lock.</source>
          <target state="translated">在打开的文件描述符上应用，测试或删除POSIX锁。&lt;em&gt;fd&lt;/em&gt;是一个打开的文件描述符。&lt;em&gt;cmd&lt;/em&gt;指定要使用的命令&lt;a href=&quot;#os.F_LOCK&quot;&gt; &lt;code&gt;F_LOCK&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#os.F_TLOCK&quot;&gt; &lt;code&gt;F_TLOCK&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#os.F_ULOCK&quot;&gt; &lt;code&gt;F_ULOCK&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#os.F_TEST&quot;&gt; &lt;code&gt;F_TEST&lt;/code&gt; 之一&lt;/a&gt;。&lt;em&gt;len&lt;/em&gt;指定要锁定的文件部分。</target>
        </trans-unit>
        <trans-unit id="83c16cf7fbf4a6d50f42643443798c0192cc0915" translate="yes" xml:space="preserve">
          <source>Applying the reverse conversion to &lt;code&gt;3740.0&lt;/code&gt; gives a different hexadecimal string representing the same number:</source>
          <target state="translated">将反向转换应用到 &lt;code&gt;3740.0&lt;/code&gt; 可以得到表示相同数字的不同十六进制字符串：</target>
        </trans-unit>
        <trans-unit id="06bee686a5eaf240f9c56fe230e927f0bbd2a171" translate="yes" xml:space="preserve">
          <source>Applying the same patch to every test method</source>
          <target state="translated">将相同的补丁应用到每个测试方法中</target>
        </trans-unit>
        <trans-unit id="c570ce78a064ac6afc5df19b2e24947c18c38dc5" translate="yes" xml:space="preserve">
          <source>Approximating &lt;a href=&quot;#importlib.import_module&quot;&gt;&lt;code&gt;importlib.import_module()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">近似&lt;a href=&quot;#importlib.import_module&quot;&gt; &lt;code&gt;importlib.import_module()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="af4f4762f9bd3f0f4a10caf5b6e63dc4ce543724" translate="yes" xml:space="preserve">
          <source>Arabic</source>
          <target state="translated">Arabic</target>
        </trans-unit>
        <trans-unit id="aa559da736898dbd0d15602df291a370ff954c58" translate="yes" xml:space="preserve">
          <source>Archive names should be relative to the archive root, that is, they should not start with a path separator.</source>
          <target state="translated">归档名称应相对于归档根目录,即不应以路径分隔符开头。</target>
        </trans-unit>
        <trans-unit id="4e93a940c9f8e4f679d6284bd8a795953316844a" translate="yes" xml:space="preserve">
          <source>Archiving example</source>
          <target state="translated">归档实例</target>
        </trans-unit>
        <trans-unit id="9655f90a40f38717dd6a2cdaf52344b6f73b99eb" translate="yes" xml:space="preserve">
          <source>Archiving example with &lt;em&gt;base_dir&lt;/em&gt;</source>
          <target state="translated">使用&lt;em&gt;base_dir&lt;/em&gt;归档的示例&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c6824fef37d7d6af51ce46cec76775f0abf31cfe" translate="yes" xml:space="preserve">
          <source>Archiving example with base_dir</source>
          <target state="translated">用base_dir归档的例子</target>
        </trans-unit>
        <trans-unit id="0c2ca1a37605ad24f1be144c9f7d4cb1b3101631" translate="yes" xml:space="preserve">
          <source>Archiving operations</source>
          <target state="translated">归档业务</target>
        </trans-unit>
        <trans-unit id="71f392576d7e147141bf396686950b09802b28f4" translate="yes" xml:space="preserve">
          <source>Arg list too long</source>
          <target state="translated">Arg列表太长</target>
        </trans-unit>
        <trans-unit id="8126f6e897947aa2bcce9fdc2c65455309bc87d1" translate="yes" xml:space="preserve">
          <source>Argument &lt;em&gt;flags&lt;/em&gt; takes the &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#bitwise&quot;&gt;bitwise OR&lt;/a&gt; of option flags. See section &lt;a href=&quot;#doctest-options&quot;&gt;Option Flags&lt;/a&gt;. Only &amp;ldquo;reporting flags&amp;rdquo; can be used.</source>
          <target state="translated">参数&lt;em&gt;标志&lt;/em&gt;采用选项标志的&lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#bitwise&quot;&gt;按位或&lt;/a&gt;。请参阅&lt;a href=&quot;#doctest-options&quot;&gt;选项标志&lt;/a&gt;部分。只能使用&amp;ldquo;报告标志&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="11697c2fb890c0f6657adb297715eca2a57c6b85" translate="yes" xml:space="preserve">
          <source>Argument &lt;em&gt;flags&lt;/em&gt; takes the &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#bitwise&quot;&gt;bitwise OR&lt;/a&gt; of option flags. See section &lt;a href=&quot;#doctest-options&quot;&gt;Option Flags&lt;/a&gt;. Only &amp;ldquo;reporting flags&amp;rdquo; can be used.</source>
          <target state="translated">参数&lt;em&gt;标志&lt;/em&gt;采用选项标志的&lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#bitwise&quot;&gt;按位或&lt;/a&gt;。请参阅&lt;a href=&quot;#doctest-options&quot;&gt;选项标志&lt;/a&gt;部分。只能使用&amp;ldquo;报告标志&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="49cda49e510f79a25d5fe2cd3ec5f12c16ca5615" translate="yes" xml:space="preserve">
          <source>Argument &lt;em&gt;module&lt;/em&gt; is a module object, or dotted name of a module, containing the object whose doctests are of interest. Argument &lt;em&gt;name&lt;/em&gt; is the name (within the module) of the object with the doctests of interest. The result is a string, containing the object&amp;rsquo;s docstring converted to a Python script, as described for &lt;a href=&quot;#doctest.script_from_examples&quot;&gt;&lt;code&gt;script_from_examples()&lt;/code&gt;&lt;/a&gt; above. For example, if module &lt;code&gt;a.py&lt;/code&gt; contains a top-level function &lt;code&gt;f()&lt;/code&gt;, then</source>
          <target state="translated">参数&lt;em&gt;模块&lt;/em&gt;是一个模块对象，或模块的点名称，包含感兴趣的文档测试的对象。参数&lt;em&gt;名称&lt;/em&gt;是具有感兴趣的doctest的对象的名称（在模块内）。结果是一个字符串，其中包含转换为Python脚本的对象的文档字符串，如上面对&lt;a href=&quot;#doctest.script_from_examples&quot;&gt; &lt;code&gt;script_from_examples()&lt;/code&gt; &lt;/a&gt;所述。例如，如果模块 &lt;code&gt;a.py&lt;/code&gt; 包含顶级函数 &lt;code&gt;f()&lt;/code&gt; ，则</target>
        </trans-unit>
        <trans-unit id="d13ab8175963907a3c38cd5c0e397fdc5a88b925" translate="yes" xml:space="preserve">
          <source>Argument &lt;em&gt;s&lt;/em&gt; is a string containing doctest examples. The string is converted to a Python script, where doctest examples in &lt;em&gt;s&lt;/em&gt; are converted to regular code, and everything else is converted to Python comments. The generated script is returned as a string. For example,</source>
          <target state="translated">参数&lt;em&gt;s&lt;/em&gt;是一个包含doctest示例的字符串。字符串将转换为Python脚本，其中&lt;em&gt;s&lt;/em&gt;中的doctest示例将转换为常规代码，其他所有内容将转换为Python注释。生成的脚本作为字符串返回。例如，</target>
        </trans-unit>
        <trans-unit id="dc60f0a9ed6b8901fa4738eb86c947f1aba137a8" translate="yes" xml:space="preserve">
          <source>Argument abbreviations (prefix matching)</source>
          <target state="translated">参数缩略语(前缀匹配)</target>
        </trans-unit>
        <trans-unit id="646f35c0fe5203eb12ebdfc5f6722d5f4ee8b9f2" translate="yes" xml:space="preserve">
          <source>Argument groups</source>
          <target state="translated">争论组</target>
        </trans-unit>
        <trans-unit id="3c66f14d2ce5db0e563f7a0a9cea03ef993a86f3" translate="yes" xml:space="preserve">
          <source>Argument names are not part of the specification, and only the arguments of &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; are intended to be used as keyword arguments.</source>
          <target state="translated">参数名称不是规范的一部分，并且仅打算将&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;的参数用作关键字参数。</target>
        </trans-unit>
        <trans-unit id="6331038cb6dd518cc8a1c33aa6d56e471c0a5793" translate="yes" xml:space="preserve">
          <source>ArgumentParser objects</source>
          <target state="translated">ArgumentParser对象</target>
        </trans-unit>
        <trans-unit id="81018876e5e0fb20f6d9b1140eb03c00025d7bd7" translate="yes" xml:space="preserve">
          <source>ArgumentParser objects usually associate a single command-line argument with a single action to be taken. The &lt;code&gt;nargs&lt;/code&gt; keyword argument associates a different number of command-line arguments with a single action. The supported values are:</source>
          <target state="translated">ArgumentParser对象通常将单个命令行参数与要执行的单个操作相关联。所述 &lt;code&gt;nargs&lt;/code&gt; 关键字参数与单个动作不同数量的命令行参数。支持的值为：</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="74013187b9b262d759763c71b93fc2050badc103" translate="yes" xml:space="preserve">
          <source>Arguments &lt;em&gt;file&lt;/em&gt;, &lt;em&gt;fix_imports&lt;/em&gt;, &lt;em&gt;encoding&lt;/em&gt;, &lt;em&gt;errors&lt;/em&gt;, &lt;em&gt;strict&lt;/em&gt; and &lt;em&gt;buffers&lt;/em&gt; have the same meaning as in the &lt;a href=&quot;#pickle.Unpickler&quot;&gt;&lt;code&gt;Unpickler&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">参数&lt;em&gt;file&lt;/em&gt;，&lt;em&gt;fix_imports&lt;/em&gt;，&lt;em&gt;encoding&lt;/em&gt;，&lt;em&gt;errors&lt;/em&gt;，&lt;em&gt;strict&lt;/em&gt;和&lt;em&gt;buffers&lt;/em&gt;与&lt;a href=&quot;#pickle.Unpickler&quot;&gt; &lt;code&gt;Unpickler&lt;/code&gt; &lt;/a&gt;构造函数中的含义相同。</target>
        </trans-unit>
        <trans-unit id="d89665ba13ee62d24ea7f2b734e91ef581e6bf8d" translate="yes" xml:space="preserve">
          <source>Arguments &lt;em&gt;file&lt;/em&gt;, &lt;em&gt;protocol&lt;/em&gt;, &lt;em&gt;fix_imports&lt;/em&gt; and &lt;em&gt;buffer_callback&lt;/em&gt; have the same meaning as in the &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">参数&lt;em&gt;file&lt;/em&gt;，&lt;em&gt;protocol&lt;/em&gt;，&lt;em&gt;fix_imports&lt;/em&gt;和&lt;em&gt;buffer_callback&lt;/em&gt;具有与&lt;a href=&quot;#pickle.Pickler&quot;&gt; &lt;code&gt;Pickler&lt;/code&gt; &lt;/a&gt;构造函数相同的含义。</target>
        </trans-unit>
        <trans-unit id="062cac0907e3b6761cd5955db7e55e88c29370c5" translate="yes" xml:space="preserve">
          <source>Arguments &lt;em&gt;protocol&lt;/em&gt;, &lt;em&gt;fix_imports&lt;/em&gt; and &lt;em&gt;buffer_callback&lt;/em&gt; have the same meaning as in the &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">参数&lt;em&gt;protocol&lt;/em&gt;，&lt;em&gt;fix_imports&lt;/em&gt;和&lt;em&gt;buffer_callback&lt;/em&gt;具有与&lt;a href=&quot;#pickle.Pickler&quot;&gt; &lt;code&gt;Pickler&lt;/code&gt; &lt;/a&gt;构造函数相同的含义。</target>
        </trans-unit>
        <trans-unit id="abe50e0f8895e96e60e7ed8a520f00b347b19db9" translate="yes" xml:space="preserve">
          <source>Arguments are as for &lt;a href=&quot;#http.cookiejar.FileCookieJar.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">参数与&lt;a href=&quot;#http.cookiejar.FileCookieJar.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; 相同&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="31b8834506fb3b7c5be5a3ce85e8e0c3db7c0b3f" translate="yes" xml:space="preserve">
          <source>Arguments are delimited by white space, which is either a space or a tab.</source>
          <target state="translated">参数以空格为界,可以是空格,也可以是制表符。</target>
        </trans-unit>
        <trans-unit id="ca383ab55205e5fb89e07118c8e14e4621db4341" translate="yes" xml:space="preserve">
          <source>Arguments containing &lt;code&gt;-&lt;/code&gt;</source>
          <target state="translated">包含 &lt;code&gt;-&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c7d8d9a6376cd495ec8cafea6a5b8bff545de70d" translate="yes" xml:space="preserve">
          <source>Arguments for which &lt;a href=&quot;#inspect.Signature.bind&quot;&gt;&lt;code&gt;Signature.bind()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#inspect.Signature.bind_partial&quot;&gt;&lt;code&gt;Signature.bind_partial()&lt;/code&gt;&lt;/a&gt; relied on a default value are skipped. However, if needed, use &lt;a href=&quot;#inspect.BoundArguments.apply_defaults&quot;&gt;&lt;code&gt;BoundArguments.apply_defaults()&lt;/code&gt;&lt;/a&gt; to add them.</source>
          <target state="translated">对于哪些参数&lt;a href=&quot;#inspect.Signature.bind&quot;&gt; &lt;code&gt;Signature.bind()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#inspect.Signature.bind_partial&quot;&gt; &lt;code&gt;Signature.bind_partial()&lt;/code&gt; &lt;/a&gt;上的默认值依赖被跳过。但是，如果需要，请使用&lt;a href=&quot;#inspect.BoundArguments.apply_defaults&quot;&gt; &lt;code&gt;BoundArguments.apply_defaults()&lt;/code&gt; &lt;/a&gt;添加它们。</target>
        </trans-unit>
        <trans-unit id="cc5642db0a84a9bfcf6fa6b2be3d81eb1124eeef" translate="yes" xml:space="preserve">
          <source>Arguments read from a file must by default be one per line (but see also &lt;a href=&quot;#argparse.ArgumentParser.convert_arg_line_to_args&quot;&gt;&lt;code&gt;convert_arg_line_to_args()&lt;/code&gt;&lt;/a&gt;) and are treated as if they were in the same place as the original file referencing argument on the command line. So in the example above, the expression &lt;code&gt;['-f', 'foo', '@args.txt']&lt;/code&gt; is considered equivalent to the expression &lt;code&gt;['-f', 'foo', '-f', 'bar']&lt;/code&gt;.</source>
          <target state="translated">默认情况下，从文件中读取的参数每行必须为一个（但另请参见&lt;a href=&quot;#argparse.ArgumentParser.convert_arg_line_to_args&quot;&gt; &lt;code&gt;convert_arg_line_to_args()&lt;/code&gt; &lt;/a&gt;），并且将其视为与命令行上原始文件引用参数位于同一位置。因此，在上面的示例中，表达式 &lt;code&gt;['-f', 'foo', '@args.txt']&lt;/code&gt; 等效于表达式 &lt;code&gt;['-f', 'foo', '-f', 'bar']&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="254fe913b44f0083c86b3a72eb64233d6c9c9037" translate="yes" xml:space="preserve">
          <source>Arguments that are read from a file (see the &lt;em&gt;fromfile_prefix_chars&lt;/em&gt; keyword argument to the &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; constructor) are read one argument per line. &lt;a href=&quot;#argparse.ArgumentParser.convert_arg_line_to_args&quot;&gt;&lt;code&gt;convert_arg_line_to_args()&lt;/code&gt;&lt;/a&gt; can be overridden for fancier reading.</source>
          <target state="translated">从文件读取的参数（请参见&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;构造函数的&lt;em&gt;fromfile_prefix_chars&lt;/em&gt;关键字参数）每行读取一个参数。可以重写&lt;a href=&quot;#argparse.ArgumentParser.convert_arg_line_to_args&quot;&gt; &lt;code&gt;convert_arg_line_to_args()&lt;/code&gt; &lt;/a&gt;以进行更高级的阅读。</target>
        </trans-unit>
        <trans-unit id="6c888f0156e119be7fcf794112bbc633d3a855af" translate="yes" xml:space="preserve">
          <source>Arguments, return values and exceptions raised should be the same as for &lt;code&gt;http_error_default()&lt;/code&gt;.</source>
          <target state="translated">参数，返回值和引发的异常应与 &lt;code&gt;http_error_default()&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="a0478ca5f4c068ca3ac12f9474f6a15865ce9053" translate="yes" xml:space="preserve">
          <source>Arguments:</source>
          <target state="translated">Arguments:</target>
        </trans-unit>
        <trans-unit id="05d9f54c2dee44d1764ce455fe2d7d6a602d3b2c" translate="yes" xml:space="preserve">
          <source>Arithmetic mean (&amp;ldquo;average&amp;rdquo;) of data.</source>
          <target state="translated">数据的算术平均值（&amp;ldquo;平均值&amp;rdquo;）。</target>
        </trans-unit>
        <trans-unit id="d077356b7b5076ff62409f2fbd19527762e29c71" translate="yes" xml:space="preserve">
          <source>Arithmetic operators</source>
          <target state="translated">算术运算符</target>
        </trans-unit>
        <trans-unit id="5509c94c0f9f738717633e15c4c8dbc85e63a4c9" translate="yes" xml:space="preserve">
          <source>ArithmeticError</source>
          <target state="translated">ArithmeticError</target>
        </trans-unit>
        <trans-unit id="00bda803d743e23213c7aa7e2ecbc5b4d57d34e7" translate="yes" xml:space="preserve">
          <source>Arrange for &lt;code&gt;callback(pid, returncode, *args)&lt;/code&gt; to be called when a process with PID equal to &lt;em&gt;pid&lt;/em&gt; terminates. Specifying another callback for the same process replaces the previous handler.</source>
          <target state="translated">当PID等于&lt;em&gt;pid&lt;/em&gt;的进程终止时 &lt;code&gt;callback(pid, returncode, *args)&lt;/code&gt; 安排要调用的回调（pid，returncode，* args）。为同一进程指定另一个回调将替换先前的处理程序。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9e83bc7d750aaf3109a4f2191f8a594db7bc12dc" translate="yes" xml:space="preserve">
          <source>Arrange for &lt;em&gt;func&lt;/em&gt; to be called in the specified executor.</source>
          <target state="translated">安排在指定的执行程序中调用&lt;em&gt;func&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ce67aeaeb955aba8123768b6b67cd81cceff896b" translate="yes" xml:space="preserve">
          <source>Arrange the given list of classes into a hierarchy of nested lists. Where a nested list appears, it contains classes derived from the class whose entry immediately precedes the list. Each entry is a 2-tuple containing a class and a tuple of its base classes. If the &lt;em&gt;unique&lt;/em&gt; argument is true, exactly one entry appears in the returned structure for each class in the given list. Otherwise, classes using multiple inheritance and their descendants will appear multiple times.</source>
          <target state="translated">将给定的类列表排列为嵌套列表的层次结构。在出现嵌套列表的地方，它包含派生自该类的类，这些类的条目紧接在列表之前。每个条目都是一个2元组，其中包含一个类及其基类的元组。如果&lt;em&gt;unique&lt;/em&gt;参数为true，则对于给定列表中的每个类，将在返回的结构中恰好出现一个条目。否则，使用多重继承的类及其子代将出现多次。</target>
        </trans-unit>
        <trans-unit id="e09bcef1e1561563a4c3e831676e473af1795dff" translate="yes" xml:space="preserve">
          <source>Array objects support the ordinary sequence operations of indexing, slicing, concatenation, and multiplication. When using slice assignment, the assigned value must be an array object with the same type code; in all other cases, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised. Array objects also implement the buffer interface, and may be used wherever &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; are supported.</source>
          <target state="translated">数组对象支持索引，切片，串联和乘法的普通序列操作。使用切片分配时，分配的值必须是具有相同类型代码的数组对象；在所有其他情况下，都会&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;。数组对象还实现了缓冲区接口，并且可以在支持&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;类似字节的对象的&lt;/a&gt;任何地方使用。</target>
        </trans-unit>
        <trans-unit id="5629452c562743594978bfd2aa7bcc43bf09bd7f" translate="yes" xml:space="preserve">
          <source>Array objects support the ordinary sequence operations of indexing, slicing, concatenation, and multiplication. When using slice assignment, the assigned value must be an array object with the same type code; in all other cases, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised. Array objects also implement the buffer interface, and may be used wherever &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; are supported.</source>
          <target state="translated">数组对象支持索引，切片，串联和乘法的普通序列操作。使用切片分配时，分配的值必须是具有相同类型代码的数组对象；在所有其他情况下，都会&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;。数组对象还实现了缓冲区接口，并且可以在支持&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;类似字节的对象的&lt;/a&gt;任何地方使用。</target>
        </trans-unit>
        <trans-unit id="a038e3af2ef2f9438b219a899eb40b5d237a4ed2" translate="yes" xml:space="preserve">
          <source>Array subclass constructors accept positional arguments, used to initialize the elements in order.</source>
          <target state="translated">数组子类构造函数接受位置参数,用于按顺序初始化元素。</target>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="2116ae0173d1a47165ce7b4c6dd99787a4f44df7" translate="yes" xml:space="preserve">
          <source>Arrays and pointers</source>
          <target state="translated">数组和指针</target>
        </trans-unit>
        <trans-unit id="d2ba2d6827acb128b9bc6dce24cfef791a15ff8e" translate="yes" xml:space="preserve">
          <source>Arrays are sequences, containing a fixed number of instances of the same type.</source>
          <target state="translated">数组是一个序列,包含一个固定数量的相同类型的实例。</target>
        </trans-unit>
        <trans-unit id="ea1bebde72fbc4b9eac4d8bc3c178b395db87608" translate="yes" xml:space="preserve">
          <source>Arrow keys and</source>
          <target state="translated">方向键和</target>
        </trans-unit>
        <trans-unit id="492a48af0242c28b406dd17c1e3f267f5f7d0dde" translate="yes" xml:space="preserve">
          <source>As &lt;a href=&quot;#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt;, return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned by &lt;a href=&quot;#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt; using &lt;code&gt;\x&lt;/code&gt;, &lt;code&gt;\u&lt;/code&gt; or &lt;code&gt;\U&lt;/code&gt; escapes. This generates a string similar to that returned by &lt;a href=&quot;#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt; in Python 2.</source>
          <target state="translated">作为&lt;a href=&quot;#repr&quot;&gt; &lt;code&gt;repr()&lt;/code&gt; &lt;/a&gt;，返回一个包含对象可打印表示形式的字符串，但是使用 &lt;code&gt;\x&lt;/code&gt; ， &lt;code&gt;\u&lt;/code&gt; 或 &lt;code&gt;\U&lt;/code&gt; 转义来对&lt;a href=&quot;#repr&quot;&gt; &lt;code&gt;repr()&lt;/code&gt; &lt;/a&gt;返回的字符串中的非ASCII字符进行转义。这将生成类似于Python 2中&lt;a href=&quot;#repr&quot;&gt; &lt;code&gt;repr()&lt;/code&gt; &lt;/a&gt;返回的字符串。</target>
        </trans-unit>
        <trans-unit id="02f76a37b3c37f88ec864fc817fca31de5c8cd6a" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;__enter__&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; invoked, this method can be used to cover part of an &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt; implementation with a context manager&amp;rsquo;s own &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">由于 &lt;code&gt;__enter__&lt;/code&gt; 是&lt;em&gt;没有&lt;/em&gt;调用，这种方法可以用于将顶盖部分&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt; &lt;code&gt;__enter__()&lt;/code&gt; &lt;/a&gt;与上下文经理自己的实现&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="4fd9aad41fb0d98af1b5721b9ec8f46889133ea0" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;__enter__&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; invoked, this method can be used to cover part of an &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt; implementation with a context manager&amp;rsquo;s own &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">由于 &lt;code&gt;__enter__&lt;/code&gt; 是&lt;em&gt;没有&lt;/em&gt;调用，这种方法可以用于将顶盖部分&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__enter__&quot;&gt; &lt;code&gt;__enter__()&lt;/code&gt; &lt;/a&gt;与上下文经理自己的实现&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="21a1436804ffd6271fbdf496e469190ad95cfadb" translate="yes" xml:space="preserve">
          <source>As IPv4 does not define a shorthand notation for addresses with octets set to zero, these two attributes are always the same as &lt;code&gt;str(addr)&lt;/code&gt; for IPv4 addresses. Exposing these attributes makes it easier to write display code that can handle both IPv4 and IPv6 addresses.</source>
          <target state="translated">由于IPv4并未为八位位组设置为零的地址定义速记符号，因此这两个属性始终与IPv4地址的 &lt;code&gt;str(addr)&lt;/code&gt; 相同。公开这些属性使编写可同时处理IPv4和IPv6地址的显示代码更加容易。</target>
        </trans-unit>
        <trans-unit id="01b75b6a03e85825e5ae6f5174dafbcc20884f22" translate="yes" xml:space="preserve">
          <source>As UTF-8 is an 8-bit encoding no BOM is required and any &lt;code&gt;U+FEFF&lt;/code&gt; character in the decoded string (even if it&amp;rsquo;s the first character) is treated as a &lt;code&gt;ZERO
WIDTH NO-BREAK SPACE&lt;/code&gt;.</source>
          <target state="translated">由于UTF-8是8位编码，因此不需要BOM且已解码字符串中的任何 &lt;code&gt;U+FEFF&lt;/code&gt; 字符（即使它是第一个字符）也将被视为 &lt;code&gt;ZERO WIDTH NO-BREAK SPACE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e93d4b1e7a80c62c1fe29ce1183609ea319edc6b" translate="yes" xml:space="preserve">
          <source>As a basic example, below is a simple HTML parser that uses the &lt;a href=&quot;#html.parser.HTMLParser&quot;&gt;&lt;code&gt;HTMLParser&lt;/code&gt;&lt;/a&gt; class to print out start tags, end tags, and data as they are encountered:</source>
          <target state="translated">作为一个基本示例，下面是一个简单的HTML解析器，该解析器使用&lt;a href=&quot;#html.parser.HTMLParser&quot;&gt; &lt;code&gt;HTMLParser&lt;/code&gt; &lt;/a&gt;类在遇到开始标记，结束标记和数据时将它们打印出来：</target>
        </trans-unit>
        <trans-unit id="56cc68f817847f0888385ee2f0ae8a8820897e0f" translate="yes" xml:space="preserve">
          <source>As a consequence, the list &lt;code&gt;[1, 2]&lt;/code&gt; is considered equal to &lt;code&gt;[1.0, 2.0]&lt;/code&gt;, and similarly for tuples.</source>
          <target state="translated">结果，列表 &lt;code&gt;[1, 2]&lt;/code&gt; 被认为等于 &lt;code&gt;[1.0, 2.0]&lt;/code&gt; ，并且对于元组类似。</target>
        </trans-unit>
        <trans-unit id="3c47037d0ed57ce0ffcb9e6f5f456d8a5dfad7c5" translate="yes" xml:space="preserve">
          <source>As a convenience &lt;em&gt;addr_spec&lt;/em&gt; can be specified instead of &lt;em&gt;username&lt;/em&gt; and &lt;em&gt;domain&lt;/em&gt;, in which case &lt;em&gt;username&lt;/em&gt; and &lt;em&gt;domain&lt;/em&gt; will be parsed from the &lt;em&gt;addr_spec&lt;/em&gt;. An &lt;em&gt;addr_spec&lt;/em&gt; must be a properly RFC quoted string; if it is not &lt;code&gt;Address&lt;/code&gt; will raise an error. Unicode characters are allowed and will be property encoded when serialized. However, per the RFCs, unicode is &lt;em&gt;not&lt;/em&gt; allowed in the username portion of the address.</source>
          <target state="translated">为方便&lt;em&gt;起见，&lt;/em&gt;可以指定&lt;em&gt;addr_spec&lt;/em&gt;而不是&lt;em&gt;username&lt;/em&gt;和&lt;em&gt;domain&lt;/em&gt;，在这种情况下，将从&lt;em&gt;addr_spec中&lt;/em&gt;解析出&lt;em&gt;username&lt;/em&gt;和&lt;em&gt;domain&lt;/em&gt;。一个&lt;em&gt;addr_spec&lt;/em&gt;必须正确RFC引号的字符串;如果不是， &lt;code&gt;Address&lt;/code&gt; 将引发错误。允许使用Unicode字符，并在序列化时对其进行属性编码。然而，每上述RFC Unicode是&lt;em&gt;未&lt;/em&gt;在地址的用户名部分允许的。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="56d9575dc7f90bc34c436a75f7caf3eeeecd477e" translate="yes" xml:space="preserve">
          <source>As a convenience for processing lists of addresses that consist of a mixture of groups and single addresses, a &lt;code&gt;Group&lt;/code&gt; may also be used to represent single addresses that are not part of a group by setting &lt;em&gt;display_name&lt;/em&gt; to &lt;code&gt;None&lt;/code&gt; and providing a list of the single address as &lt;em&gt;addresses&lt;/em&gt;.</source>
          <target state="translated">作为一种用于处理包括基团和单个地址的混合物的地址的列表方便起见，一个 &lt;code&gt;Group&lt;/code&gt; 也可以用来表示单个地址不属于基团的一部分通过设置&lt;em&gt;DISPLAY_NAME&lt;/em&gt;到 &lt;code&gt;None&lt;/code&gt; ，并提供作为单个地址列表&lt;em&gt;地址&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="21c6d9923ff5341e64ead3588bfe1b0fc8708eec" translate="yes" xml:space="preserve">
          <source>As a convenience, &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; provides the methods &lt;a href=&quot;email.message#email.message.EmailMessage.as_bytes&quot;&gt;&lt;code&gt;as_bytes()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;bytes(aMessage)&lt;/code&gt; (a.k.a. &lt;a href=&quot;email.message#email.message.EmailMessage.__bytes__&quot;&gt;&lt;code&gt;__bytes__()&lt;/code&gt;&lt;/a&gt;), which simplify the generation of a serialized binary representation of a message object. For more detail, see &lt;a href=&quot;email.message#module-email.message&quot;&gt;&lt;code&gt;email.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">为了方便起见，&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt;提供了&lt;a href=&quot;email.message#email.message.EmailMessage.as_bytes&quot;&gt; &lt;code&gt;as_bytes()&lt;/code&gt; &lt;/a&gt;和 &lt;code&gt;bytes(aMessage)&lt;/code&gt; （又称为&lt;a href=&quot;email.message#email.message.EmailMessage.__bytes__&quot;&gt; &lt;code&gt;__bytes__()&lt;/code&gt; &lt;/a&gt;）方法，它们简化了消息对象的序列化二进制表示形式的生成。有关更多详细信息，请参见&lt;a href=&quot;email.message#module-email.message&quot;&gt; &lt;code&gt;email.message&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4abff2ddf7e07b5dde53a45acae67c7d73f15471" translate="yes" xml:space="preserve">
          <source>As a convenience, &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; provides the methods &lt;a href=&quot;email.message#email.message.EmailMessage.as_string&quot;&gt;&lt;code&gt;as_string()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;str(aMessage)&lt;/code&gt; (a.k.a. &lt;a href=&quot;email.message#email.message.EmailMessage.__str__&quot;&gt;&lt;code&gt;__str__()&lt;/code&gt;&lt;/a&gt;), which simplify the generation of a formatted string representation of a message object. For more detail, see &lt;a href=&quot;email.message#module-email.message&quot;&gt;&lt;code&gt;email.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">为了方便起见，&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt;提供了&lt;a href=&quot;email.message#email.message.EmailMessage.as_string&quot;&gt; &lt;code&gt;as_string()&lt;/code&gt; &lt;/a&gt;和 &lt;code&gt;str(aMessage)&lt;/code&gt; 方法（又名&lt;a href=&quot;email.message#email.message.EmailMessage.__str__&quot;&gt; &lt;code&gt;__str__()&lt;/code&gt; &lt;/a&gt;），它们简化了消息对象的格式化字符串表示形式的生成。有关更多详细信息，请参见&lt;a href=&quot;email.message#module-email.message&quot;&gt; &lt;code&gt;email.message&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="702d8b69bc2e4520c3ea7fda0210ac4d16730354" translate="yes" xml:space="preserve">
          <source>As a convenience, it is allowed to call this method more than once; only the first call, however, will have an effect.</source>
          <target state="translated">为了方便起见,可以多次调用这个方法,但只有第一次调用才会有效果。</target>
        </trans-unit>
        <trans-unit id="246fcbe17d21c864d76f20a8ea7b1030891cbcc5" translate="yes" xml:space="preserve">
          <source>As a default namespace, if &lt;em&gt;globs&lt;/em&gt; is not specified.</source>
          <target state="translated">作为默认名称空间，如果未指定&lt;em&gt;globs&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="59fca4637f2c6a11c94c0115101f5eb5fe7f8b54" translate="yes" xml:space="preserve">
          <source>As a hint: &lt;em&gt;ptype&lt;/em&gt; is &lt;code&gt;'Uniprocessor Free'&lt;/code&gt; on single processor NT machines and &lt;code&gt;'Multiprocessor Free'&lt;/code&gt; on multi processor machines. The &lt;em&gt;&amp;lsquo;Free&amp;rsquo;&lt;/em&gt; refers to the OS version being free of debugging code. It could also state &lt;em&gt;&amp;lsquo;Checked&amp;rsquo;&lt;/em&gt; which means the OS version uses debugging code, i.e. code that checks arguments, ranges, etc.</source>
          <target state="translated">提示：&lt;em&gt;ptype&lt;/em&gt;在单处理器NT计算机上为 &lt;code&gt;'Uniprocessor Free'&lt;/code&gt; 单处理器 &lt;code&gt;'Multiprocessor Free'&lt;/code&gt; 在多处理器计算机上为&amp;ldquo;无多处理器&amp;rdquo;。在&lt;em&gt;&amp;ldquo;免费&amp;rdquo;&lt;/em&gt;指的是操作系统版本是免费的调试代码。它还可以声明&lt;em&gt;&amp;ldquo;已检查&amp;rdquo;&lt;/em&gt;，这意味着操作系统版本使用调试代码，即用于检查参数，范围等的代码。</target>
        </trans-unit>
        <trans-unit id="01542f6485eff7fcd66532527eb2903905db20bd" translate="yes" xml:space="preserve">
          <source>As a last resort, the current working directory.</source>
          <target state="translated">作为最后的手段,当前工作目录。</target>
        </trans-unit>
        <trans-unit id="4394d88d5506fb6bad90992f89785a34f016a9f1" translate="yes" xml:space="preserve">
          <source>As a practical example, a web application can symmetrically sign cookies sent to users and later verify them to make sure they weren&amp;rsquo;t tampered with:</source>
          <target state="translated">作为一个实际示例，Web应用程序可以对发送给用户的cookie进行对称签名，然后对其进行验证以确保它们未被篡改：</target>
        </trans-unit>
        <trans-unit id="7a3250916881530139f1d3c3f521304a2d00f953" translate="yes" xml:space="preserve">
          <source>As a resource for sharing data across processes, shared memory blocks may outlive the original process that created them. When one process no longer needs access to a shared memory block that might still be needed by other processes, the &lt;a href=&quot;#multiprocessing.shared_memory.SharedMemory.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method should be called. When a shared memory block is no longer needed by any process, the &lt;a href=&quot;#multiprocessing.shared_memory.SharedMemory.unlink&quot;&gt;&lt;code&gt;unlink()&lt;/code&gt;&lt;/a&gt; method should be called to ensure proper cleanup.</source>
          <target state="translated">作为跨进程共享数据的资源，共享内存块可能会超过创建它们的原始进程的寿命。当一个进程不再需要访问其他进程可能仍需要的共享内存块时，应调用&lt;a href=&quot;#multiprocessing.shared_memory.SharedMemory.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;方法。当任何进程不再需要共享内存块时，应调用&lt;a href=&quot;#multiprocessing.shared_memory.SharedMemory.unlink&quot;&gt; &lt;code&gt;unlink()&lt;/code&gt; &lt;/a&gt;方法以确保正确清理。</target>
        </trans-unit>
        <trans-unit id="461cbf814397c1a6ad159d386793e5950747ea9b" translate="yes" xml:space="preserve">
          <source>As a result, these tables are exposed as functions, not as data structures. There are two kinds of tables in the RFC: sets and mappings. For a set, &lt;a href=&quot;#module-stringprep&quot;&gt;&lt;code&gt;stringprep&lt;/code&gt;&lt;/a&gt; provides the &amp;ldquo;characteristic function&amp;rdquo;, i.e. a function that returns &lt;code&gt;True&lt;/code&gt; if the parameter is part of the set. For mappings, it provides the mapping function: given the key, it returns the associated value. Below is a list of all functions available in the module.</source>
          <target state="translated">结果，这些表作为函数而不是数据结构公开。RFC中有两种表：集和映射。对于集合，&lt;a href=&quot;#module-stringprep&quot;&gt; &lt;code&gt;stringprep&lt;/code&gt; &lt;/a&gt;提供&amp;ldquo;特征函数&amp;rdquo;，即，如果参数是集合的一部分，则该函数返回 &lt;code&gt;True&lt;/code&gt; 。对于映射，它提供了映射功能：给定键，它返回关联的值。以下是模块中所有可用功能的列表。</target>
        </trans-unit>
        <trans-unit id="2a184ffa1e02bb553c3cf1bb5908fd5b4956ff6b" translate="yes" xml:space="preserve">
          <source>As a shortcut, &lt;code&gt;python -m unittest&lt;/code&gt; is the equivalent of &lt;code&gt;python -m unittest discover&lt;/code&gt;. If you want to pass arguments to test discovery the &lt;code&gt;discover&lt;/code&gt; sub-command must be used explicitly.</source>
          <target state="translated">作为快捷方式， &lt;code&gt;python -m unittest&lt;/code&gt; 等同于 &lt;code&gt;python -m unittest discover&lt;/code&gt; 。如果要传递参数以测试发现，则必须显式使用 &lt;code&gt;discover&lt;/code&gt; 子命令。</target>
        </trans-unit>
        <trans-unit id="8c6052cb2b7ab711a2dfe70683f2ac20c152dc62" translate="yes" xml:space="preserve">
          <source>As a shortcut, you can pass the first chunk of data to update directly to the constructor as the positional argument:</source>
          <target state="translated">作为一种快捷方式,你可以将要更新的第一块数据作为位置参数直接传递给构造函数。</target>
        </trans-unit>
        <trans-unit id="589b7e27763c67c7426c653620d97a4afe45eed8" translate="yes" xml:space="preserve">
          <source>As a shorthand for this type, &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; can be used to annotate arguments of any of the types mentioned above.</source>
          <target state="translated">作为此类型的简写，&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;可用于注释上述任何类型的参数。</target>
        </trans-unit>
        <trans-unit id="edc30d222e457c2b86d38c6dc2682bd1cf49fbc5" translate="yes" xml:space="preserve">
          <source>As a single multi-line string it looks like this:</source>
          <target state="translated">作为一个单一的多行字符串,它看起来像这样。</target>
        </trans-unit>
        <trans-unit id="31fec187f046cbb0fe0fcc91b7f32ecb2bd751ff" translate="yes" xml:space="preserve">
          <source>As an &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;root&lt;/code&gt; has a tag and a dictionary of attributes:</source>
          <target state="translated">作为&lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt; &lt;code&gt;Element&lt;/code&gt; &lt;/a&gt;， &lt;code&gt;root&lt;/code&gt; 具有标签和属性字典：</target>
        </trans-unit>
        <trans-unit id="f8f3227359947ab2ce5b9947bd2e229fe5f93f58" translate="yes" xml:space="preserve">
          <source>As an added bonus you no longer need to keep a reference to the &lt;code&gt;patcher&lt;/code&gt; object.</source>
          <target state="translated">另外，您不再需要保留对 &lt;code&gt;patcher&lt;/code&gt; 对象的引用。</target>
        </trans-unit>
        <trans-unit id="b503ab5544f8b7e846527fe7cd3425f0b5545263" translate="yes" xml:space="preserve">
          <source>As an alternative to using the &lt;code&gt;request()&lt;/code&gt; method described above, you can also send your request step by step, by using the four functions below.</source>
          <target state="translated">作为使用上述 &lt;code&gt;request()&lt;/code&gt; 方法的替代方法，您还可以使用以下四个函数逐步发送请求。</target>
        </trans-unit>
        <trans-unit id="e7336776d38139cf85922861d97a6c8dfca4d4e8" translate="yes" xml:space="preserve">
          <source>As an example, here are two useful aliases (especially when placed in the &lt;code&gt;.pdbrc&lt;/code&gt; file):</source>
          <target state="translated">例如，以下是两个有用的别名（尤其是放在 &lt;code&gt;.pdbrc&lt;/code&gt; 文件中时）：</target>
        </trans-unit>
        <trans-unit id="5a80b839cbf77be14d284871859db2716a2d8281" translate="yes" xml:space="preserve">
          <source>As an example, here is a simple way to synchronize a client and server thread:</source>
          <target state="translated">举个例子,这里是一个简单的同步客户端和服务器线程的方法。</target>
        </trans-unit>
        <trans-unit id="0f4562ba3c72351908cae38e3fc969623aaf1135" translate="yes" xml:space="preserve">
          <source>As an example, let&amp;rsquo;s change the Combobox for the default theme a bit:</source>
          <target state="translated">例如，让我们稍微更改默认主题的组合框：</target>
        </trans-unit>
        <trans-unit id="4228081bb4db5df72a0d8ad128755e932ebc79ee" translate="yes" xml:space="preserve">
          <source>As an example, the following calls to &lt;a href=&quot;#os.spawnlp&quot;&gt;&lt;code&gt;spawnlp()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.spawnvpe&quot;&gt;&lt;code&gt;spawnvpe()&lt;/code&gt;&lt;/a&gt; are equivalent:</source>
          <target state="translated">例如，以下对&lt;a href=&quot;#os.spawnlp&quot;&gt; &lt;code&gt;spawnlp()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#os.spawnvpe&quot;&gt; &lt;code&gt;spawnvpe()&lt;/code&gt; 的&lt;/a&gt;调用是等效的：</target>
        </trans-unit>
        <trans-unit id="ba4b1a6703f8b07e5a6b60e4bad30c91c5890466" translate="yes" xml:space="preserve">
          <source>As an example, the following code could be used to read an email message from a file on disk and pass it to the system &lt;code&gt;sendmail&lt;/code&gt; program on a Unix system:</source>
          <target state="translated">例如，以下代码可用于从磁盘上的文件读取电子邮件，并将其传递给Unix系统上的系统 &lt;code&gt;sendmail&lt;/code&gt; 程序：</target>
        </trans-unit>
        <trans-unit id="fdbacbe7504a62ca3305f0051ceceb7ce7683b37" translate="yes" xml:space="preserve">
          <source>As an implementation detail, most modules have the name &lt;code&gt;__builtins__&lt;/code&gt; made available as part of their globals. The value of &lt;code&gt;__builtins__&lt;/code&gt; is normally either this module or the value of this module&amp;rsquo;s &lt;a href=&quot;stdtypes#object.__dict__&quot;&gt;&lt;code&gt;__dict__&lt;/code&gt;&lt;/a&gt; attribute. Since this is an implementation detail, it may not be used by alternate implementations of Python.</source>
          <target state="translated">作为实现细节，大多数模块的名称 &lt;code&gt;__builtins__&lt;/code&gt; 作为其全局变量的一部分提供。 &lt;code&gt;__builtins__&lt;/code&gt; 的值通常是该模块或该模块的&lt;a href=&quot;stdtypes#object.__dict__&quot;&gt; &lt;code&gt;__dict__&lt;/code&gt; &lt;/a&gt;属性的值。由于这是一个实现细节，因此Python的其他实现可能不会使用它。</target>
        </trans-unit>
        <trans-unit id="3c7b885f679999067032935a1aa6716b565ddb72" translate="yes" xml:space="preserve">
          <source>As at any time a re-negotiation is possible, a call to &lt;a href=&quot;#ssl.SSLSocket.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; can also cause write operations.</source>
          <target state="translated">由于任何时候都可以进行重新协商，因此对&lt;a href=&quot;#ssl.SSLSocket.read&quot;&gt; &lt;code&gt;read()&lt;/code&gt; &lt;/a&gt;的调用也可能导致写操作。</target>
        </trans-unit>
        <trans-unit id="5fd487951e11f4d42348b340f0a9fb430d37c5cc" translate="yes" xml:space="preserve">
          <source>As at any time a re-negotiation is possible, a call to &lt;a href=&quot;#ssl.SSLSocket.write&quot;&gt;&lt;code&gt;write()&lt;/code&gt;&lt;/a&gt; can also cause read operations.</source>
          <target state="translated">由于任何时候都可以进行重新协商，因此对&lt;a href=&quot;#ssl.SSLSocket.write&quot;&gt; &lt;code&gt;write()&lt;/code&gt; &lt;/a&gt;的调用也可能导致读取操作。</target>
        </trans-unit>
        <trans-unit id="1e24aa9e1ac5aea4c36f22d36193b3afce59ac93" translate="yes" xml:space="preserve">
          <source>As bytearray objects are mutable, they support the &lt;a href=&quot;#typesseq-mutable&quot;&gt;mutable&lt;/a&gt; sequence operations in addition to the common bytes and bytearray operations described in &lt;a href=&quot;#bytes-methods&quot;&gt;Bytes and Bytearray Operations&lt;/a&gt;.</source>
          <target state="translated">由于&lt;a href=&quot;#bytes-methods&quot;&gt;字节数组&lt;/a&gt;对象是可变的，因此除了&amp;ldquo;字节&amp;rdquo;和&amp;ldquo; 字节数组操作&amp;rdquo;中介绍的常见字节和字节数组操作外，它们还支持&lt;a href=&quot;#typesseq-mutable&quot;&gt;可变&lt;/a&gt;序列操作。</target>
        </trans-unit>
        <trans-unit id="78bf9d41f9b029450b419cb811cff375582f4159" translate="yes" xml:space="preserve">
          <source>As described before, SQLite supports only a limited set of types natively. To use other Python types with SQLite, you must &lt;strong&gt;adapt&lt;/strong&gt; them to one of the sqlite3 module&amp;rsquo;s supported types for SQLite: one of NoneType, int, float, str, bytes.</source>
          <target state="translated">如前所述，SQLite本机仅支持有限类型的集合。要将其他Python类型与SQLite一起使用，必须&lt;strong&gt;将&lt;/strong&gt;它们&lt;strong&gt;调整&lt;/strong&gt;为sqlite3模块支持的SQLite类型之一：NoneType，int，float，str，bytes。</target>
        </trans-unit>
        <trans-unit id="12104d6983d2c0ac8c4e8e3db3bbb26e8a81d6cd" translate="yes" xml:space="preserve">
          <source>As explained in the previous section, foreign functions can be accessed as attributes of loaded shared libraries. The function objects created in this way by default accept any number of arguments, accept any ctypes data instances as arguments, and return the default result type specified by the library loader. They are instances of a private class:</source>
          <target state="translated">正如上一节所解释的那样,外来函数可以作为加载的共享库的属性进行访问,默认情况下,以这种方式创建的函数对象可以接受任何数量的参数,接受任何ctypes数据实例作为参数,并返回由库加载器指定的默认结果类型。以这种方式创建的函数对象默认接受任意数量的参数,接受任何ctypes数据实例作为参数,并返回由库加载器指定的默认结果类型。它们是一个私有类的实例。</target>
        </trans-unit>
        <trans-unit id="c1c8f40732d97a4b4e90b1a6e8a0be872ac0ea63" translate="yes" xml:space="preserve">
          <source>As far as possible one should try to avoid shifting large amounts of data between processes.</source>
          <target state="translated">应尽量避免在流程之间转移大量数据。</target>
        </trans-unit>
        <trans-unit id="1dbfa2bc97572579991ca5c4ddb17267e21f80e3" translate="yes" xml:space="preserve">
          <source>As has been mentioned before, all Python types except integers, strings, and bytes objects have to be wrapped in their corresponding &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; type, so that they can be converted to the required C data type:</source>
          <target state="translated">如前所述，除整数，字符串和字节对象外，所有Python类型都必须包装在其对应的&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; &lt;/a&gt;类型中，以便可以将它们转换为所需的C数据类型：</target>
        </trans-unit>
        <trans-unit id="4ddf55edc3a51e93aacbc734fc2d7fe5eb787249" translate="yes" xml:space="preserve">
          <source>As initialized upon program startup, the first item of this list, &lt;code&gt;path[0]&lt;/code&gt;, is the directory containing the script that was used to invoke the Python interpreter. If the script directory is not available (e.g. if the interpreter is invoked interactively or if the script is read from standard input), &lt;code&gt;path[0]&lt;/code&gt; is the empty string, which directs Python to search modules in the current directory first. Notice that the script directory is inserted &lt;em&gt;before&lt;/em&gt; the entries inserted as a result of &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONPATH&quot; id=&quot;index-21&quot;&gt;&lt;code&gt;PYTHONPATH&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在程序启动时进行初始化，该列表的第一项 &lt;code&gt;path[0]&lt;/code&gt; 是包含用于调用Python解释器的脚本的目录。如果脚本目录不可用（例如，如果解释器是交互式调用的，或者从标准输入中读取了脚本），则 &lt;code&gt;path[0]&lt;/code&gt; 是空字符串，它指示Python首先在当前目录中搜索模块。请注意，由于&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONPATH&quot; id=&quot;index-21&quot;&gt; &lt;code&gt;PYTHONPATH&lt;/code&gt; &lt;/a&gt;的结果，在插入条目&lt;em&gt;之前&lt;/em&gt;插入了脚本目录。</target>
        </trans-unit>
        <trans-unit id="56a04625be80324cea19908dff1bffa8f839b261" translate="yes" xml:space="preserve">
          <source>As initialized upon program startup, the first item of this list, &lt;code&gt;path[0]&lt;/code&gt;, is the directory containing the script that was used to invoke the Python interpreter. If the script directory is not available (e.g. if the interpreter is invoked interactively or if the script is read from standard input), &lt;code&gt;path[0]&lt;/code&gt; is the empty string, which directs Python to search modules in the current directory first. Notice that the script directory is inserted &lt;em&gt;before&lt;/em&gt; the entries inserted as a result of &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONPATH&quot; id=&quot;index-22&quot;&gt;&lt;code&gt;PYTHONPATH&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在程序启动时进行初始化，该列表的第一项 &lt;code&gt;path[0]&lt;/code&gt; 是包含用于调用Python解释器的脚本的目录。如果脚本目录不可用（例如，如果交互式调用解释器或从标准输入中读取脚本），则 &lt;code&gt;path[0]&lt;/code&gt; 为空字符串，该字符串将引导Python首先搜索当前目录中的模块。请注意，由于&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONPATH&quot; id=&quot;index-22&quot;&gt; &lt;code&gt;PYTHONPATH&lt;/code&gt; &lt;/a&gt;的结果，将脚本目录插入到插入的条目&lt;em&gt;之前&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="19b1c3ec635acfaf81b14d105d3a7b1195ceafe9" translate="yes" xml:space="preserve">
          <source>As introduced in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0526&quot; id=&quot;index-18&quot;&gt;&lt;strong&gt;PEP 526&lt;/strong&gt;&lt;/a&gt;, a variable annotation wrapped in ClassVar indicates that a given attribute is intended to be used as a class variable and should not be set on instances of that class. Usage:</source>
          <target state="translated">如&lt;a href=&quot;https://www.python.org/dev/peps/pep-0526&quot; id=&quot;index-18&quot;&gt;&lt;strong&gt;PEP 526中所述&lt;/strong&gt;&lt;/a&gt;，包裹在ClassVar中的变量注释指示给定属性旨在用作类变量，并且不应在该类的实例上设置。用法：</target>
        </trans-unit>
        <trans-unit id="6d02dd5a1c0be670a5afec6d8bf7ade0cbe0a443" translate="yes" xml:space="preserve">
          <source>As introduced in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0526&quot; id=&quot;index-22&quot;&gt;&lt;strong&gt;PEP 526&lt;/strong&gt;&lt;/a&gt;, a variable annotation wrapped in ClassVar indicates that a given attribute is intended to be used as a class variable and should not be set on instances of that class. Usage:</source>
          <target state="translated">如&lt;a href=&quot;https://www.python.org/dev/peps/pep-0526&quot; id=&quot;index-22&quot;&gt;&lt;strong&gt;PEP 526中所述&lt;/strong&gt;&lt;/a&gt;，包装在ClassVar中的变量注释指示给定属性旨在用作类变量，并且不应在该类的实例上设置。用法：</target>
        </trans-unit>
        <trans-unit id="b975573d762213d718d91e5a19d0201d6f4a860f" translate="yes" xml:space="preserve">
          <source>As is the case with all named tuples, the subclass has a few additional methods and attributes that are particularly useful. One such method is &lt;code&gt;_replace()&lt;/code&gt;. The &lt;code&gt;_replace()&lt;/code&gt; method will return a new ParseResult object replacing specified fields with new values.</source>
          <target state="translated">与所有命名元组一样，该子类还具有一些特别有用的附加方法和属性。一种这样的方法是 &lt;code&gt;_replace()&lt;/code&gt; 。所述 &lt;code&gt;_replace()&lt;/code&gt; 方法将返回一个新ParseResult对象用新值替换指定的字段。</target>
        </trans-unit>
        <trans-unit id="1c24eca1bdc966d5e836feb3ab27d1d9ed3eb23f" translate="yes" xml:space="preserve">
          <source>As long as the view exists, the &lt;a href=&quot;#io.BytesIO&quot;&gt;&lt;code&gt;BytesIO&lt;/code&gt;&lt;/a&gt; object cannot be resized or closed.</source>
          <target state="translated">只要该视图存在，就无法调整&lt;a href=&quot;#io.BytesIO&quot;&gt; &lt;code&gt;BytesIO&lt;/code&gt; &lt;/a&gt;对象的大小或将其关闭。</target>
        </trans-unit>
        <trans-unit id="610fcdc735062bf431e7a9e2ee300d06d531c84b" translate="yes" xml:space="preserve">
          <source>As mentioned above, if a child process has put items on a queue (and it has not used &lt;a href=&quot;#multiprocessing.Queue.cancel_join_thread&quot;&gt;&lt;code&gt;JoinableQueue.cancel_join_thread&lt;/code&gt;&lt;/a&gt;), then that process will not terminate until all buffered items have been flushed to the pipe.</source>
          <target state="translated">如上所述，如果子进程已将项目放入队列中（并且未使用&lt;a href=&quot;#multiprocessing.Queue.cancel_join_thread&quot;&gt; &lt;code&gt;JoinableQueue.cancel_join_thread&lt;/code&gt; &lt;/a&gt;），则该进程将不会终止，直到所有缓冲的项目都已刷新到管道中为止。</target>
        </trans-unit>
        <trans-unit id="c946dacfc8f875db22dfcdba42153aefbf4569f0" translate="yes" xml:space="preserve">
          <source>As mentioned above, when doing concurrent programming it is usually best to avoid using shared state as far as possible. This is particularly true when using multiple processes.</source>
          <target state="translated">如上所述,在进行并发编程时,通常最好尽量避免使用共享状态。在使用多个进程时尤其如此。</target>
        </trans-unit>
        <trans-unit id="741a8166c57402ebadd253e7254391864f2e0259" translate="yes" xml:space="preserve">
          <source>As mentioned in the &lt;a href=&quot;io#io-overview&quot;&gt;Overview&lt;/a&gt;, Python distinguishes between binary and text I/O. Files opened in binary mode (including &lt;code&gt;'b'&lt;/code&gt; in the &lt;em&gt;mode&lt;/em&gt; argument) return contents as &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; objects without any decoding. In text mode (the default, or when &lt;code&gt;'t'&lt;/code&gt; is included in the &lt;em&gt;mode&lt;/em&gt; argument), the contents of the file are returned as &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, the bytes having been first decoded using a platform-dependent encoding or using the specified &lt;em&gt;encoding&lt;/em&gt; if given.</source>
          <target state="translated">如&lt;a href=&quot;io#io-overview&quot;&gt;概述所述&lt;/a&gt;，Python区分二进制I / O和文本I / O。以二进制模式打开的文件（包括&lt;em&gt;mode&lt;/em&gt;参数中的 &lt;code&gt;'b'&lt;/code&gt; ）以&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;对象的形式返回内容，而无需进行任何解码。在文本模式下（默认设置，或者在&lt;em&gt;mode&lt;/em&gt;参数中包含 &lt;code&gt;'t'&lt;/code&gt; 时），文件的内容以&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;形式返回，首先使用平台相关的编码或指定的&lt;em&gt;编码（&lt;/em&gt;如果给定的话）对字节进行解码。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="554761a2dd1c786ee19c7c8d095e92534e85fcea" translate="yes" xml:space="preserve">
          <source>As mentioned in the introduction, &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; has grown to have three primary uses:</source>
          <target state="translated">如简介中所述，&lt;a href=&quot;#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; &lt;/a&gt;已发展为具有三个主要用途：</target>
        </trans-unit>
        <trans-unit id="2dd3237ecb3ed79cf4cebba9859ab17d40aea008" translate="yes" xml:space="preserve">
          <source>As noted in &lt;a href=&quot;https://www.rfc-editor.org/errata_search.php?rfc=7159&quot;&gt;the errata for RFC 7159&lt;/a&gt;, JSON permits literal U+2028 (LINE SEPARATOR) and U+2029 (PARAGRAPH SEPARATOR) characters in strings, whereas JavaScript (as of ECMAScript Edition 5.1) does not.</source>
          <target state="translated">如&lt;a href=&quot;https://www.rfc-editor.org/errata_search.php?rfc=7159&quot;&gt;RFC 7159的勘误中所述&lt;/a&gt;，JSON允许字符串中的文字U + 2028（行分隔符）和U + 2029（PARAGRAPH SEPARATOR）字符，而JavaScript（从ECMAScript Edition 5.1开始）不允许。</target>
        </trans-unit>
        <trans-unit id="e1d391aeb07828e2c8ece6409fe0c3895c39bf56" translate="yes" xml:space="preserve">
          <source>As noted in the documentation of &lt;a href=&quot;#contextlib.ExitStack.push&quot;&gt;&lt;code&gt;ExitStack.push()&lt;/code&gt;&lt;/a&gt;, this method can be useful in cleaning up an already allocated resource if later steps in the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt; implementation fail.</source>
          <target state="translated">如&lt;a href=&quot;#contextlib.ExitStack.push&quot;&gt; &lt;code&gt;ExitStack.push()&lt;/code&gt; &lt;/a&gt;的文档中所述，如果__enter &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt; &lt;code&gt;__enter__()&lt;/code&gt; &lt;/a&gt;实现中的后续步骤失败，则此方法在清理已分配的资源时很有用。</target>
        </trans-unit>
        <trans-unit id="64b8dfa9189fa9c6b65ee7c6f6f91e92dfd48dc4" translate="yes" xml:space="preserve">
          <source>As noted in the documentation of &lt;a href=&quot;#contextlib.ExitStack.push&quot;&gt;&lt;code&gt;ExitStack.push()&lt;/code&gt;&lt;/a&gt;, this method can be useful in cleaning up an already allocated resource if later steps in the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt; implementation fail.</source>
          <target state="translated">如&lt;a href=&quot;#contextlib.ExitStack.push&quot;&gt; &lt;code&gt;ExitStack.push()&lt;/code&gt; &lt;/a&gt;的文档中所述，如果__enter &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__enter__&quot;&gt; &lt;code&gt;__enter__()&lt;/code&gt; &lt;/a&gt;实现中的后续步骤失败，则此方法在清理已分配的资源时会很有用。</target>
        </trans-unit>
        <trans-unit id="0a4749ff1ae4127c8c5d53e09d2473530212eedd" translate="yes" xml:space="preserve">
          <source>As of Python 3.3, this is equivalent to &lt;code&gt;os.pathconf(fd, name)&lt;/code&gt;.</source>
          <target state="translated">从Python 3.3开始，这等效于 &lt;code&gt;os.pathconf(fd, name)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="254ec21e59cc0a2f51b3d99a3106cbbf6e86b501" translate="yes" xml:space="preserve">
          <source>As of Python 3.3, this is equivalent to &lt;code&gt;os.stat(fd)&lt;/code&gt;.</source>
          <target state="translated">从Python 3.3开始，这等效于 &lt;code&gt;os.stat(fd)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de72d09fd1ee5572d4a2be6e2e876c81871f619b" translate="yes" xml:space="preserve">
          <source>As of Python 3.3, this is equivalent to &lt;code&gt;os.stat(path, dir_fd=dir_fd,
follow_symlinks=False)&lt;/code&gt;.</source>
          <target state="translated">从Python 3.3开始，这等效于 &lt;code&gt;os.stat(path, dir_fd=dir_fd, follow_symlinks=False)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="020b6b46db7feae3d90b1504ca1411e18c36a07a" translate="yes" xml:space="preserve">
          <source>As our examples shows, you have to be careful with what you allow to be unpickled. Therefore if security is a concern, you may want to consider alternatives such as the marshalling API in &lt;a href=&quot;xmlrpc.client#module-xmlrpc.client&quot;&gt;&lt;code&gt;xmlrpc.client&lt;/code&gt;&lt;/a&gt; or third-party solutions.</source>
          <target state="translated">如我们的示例所示，您必须小心允许解开的内容。因此，如果出于安全考虑，您可能需要考虑其他方法，例如&lt;a href=&quot;xmlrpc.client#module-xmlrpc.client&quot;&gt; &lt;code&gt;xmlrpc.client&lt;/code&gt; 中&lt;/a&gt;的编组API 或第三方解决方案。</target>
        </trans-unit>
        <trans-unit id="94873ca8fb7d049aa1f358ba21e1835b6d80677c" translate="yes" xml:space="preserve">
          <source>As permitted, though not required, by the RFC, this module&amp;rsquo;s serializer sets &lt;em&gt;ensure_ascii=True&lt;/em&gt; by default, thus escaping the output so that the resulting strings only contain ASCII characters.</source>
          <target state="translated">如果RFC允许（尽管不是必需的），则此模块的序列化&lt;em&gt;程序&lt;/em&gt;默认情况下会设置&lt;em&gt;sure_ascii = True&lt;/em&gt;，从而转义输出，以便结果字符串仅包含ASCII字符。</target>
        </trans-unit>
        <trans-unit id="ab552d0f5d2aaec29b8f53a32c1edd92d2547512" translate="yes" xml:space="preserve">
          <source>As required by the Python DB API Spec, the &lt;a href=&quot;#sqlite3.Cursor.rowcount&quot;&gt;&lt;code&gt;rowcount&lt;/code&gt;&lt;/a&gt; attribute &amp;ldquo;is -1 in case no &lt;code&gt;executeXX()&lt;/code&gt; has been performed on the cursor or the rowcount of the last operation is not determinable by the interface&amp;rdquo;. This includes &lt;code&gt;SELECT&lt;/code&gt; statements because we cannot determine the number of rows a query produced until all rows were fetched.</source>
          <target state="translated">根据Python DB API规范的要求，&lt;a href=&quot;#sqlite3.Cursor.rowcount&quot;&gt; &lt;code&gt;rowcount&lt;/code&gt; &lt;/a&gt;属性为&amp;ldquo; -1，以防在游标上未执行 &lt;code&gt;executeXX()&lt;/code&gt; 或接口无法确定最后一个操作的行数&amp;rdquo;。这包括 &lt;code&gt;SELECT&lt;/code&gt; 语句，因为在获取所有行之前，我们无法确定查询产生的行数。</target>
        </trans-unit>
        <trans-unit id="3d9ef0be3fa5743d16dd6068d735d43da1ed1d14" translate="yes" xml:space="preserve">
          <source>As seen below, you usually mark the strings in your application that are candidates for translation, by wrapping them in a call to the &lt;code&gt;_()&lt;/code&gt; function, like this:</source>
          <target state="translated">如下所示，通常通过将它们包装在对 &lt;code&gt;_()&lt;/code&gt; 函数的调用中来标记应用程序中待翻译的字符串，如下所示：</target>
        </trans-unit>
        <trans-unit id="777c0664c56b282dce066ba8bdfa9c0f273bd6e5" translate="yes" xml:space="preserve">
          <source>As shown above, the &lt;a href=&quot;#decimal.getcontext&quot;&gt;&lt;code&gt;getcontext()&lt;/code&gt;&lt;/a&gt; function accesses the current context and allows the settings to be changed. This approach meets the needs of most applications.</source>
          <target state="translated">如上所示，&lt;a href=&quot;#decimal.getcontext&quot;&gt; &lt;code&gt;getcontext()&lt;/code&gt; &lt;/a&gt;函数访问当前上下文并允许更改设置。这种方法可以满足大多数应用程序的需求。</target>
        </trans-unit>
        <trans-unit id="ca7a4ca36c98546dcbae60adf434cc1fdf31f390" translate="yes" xml:space="preserve">
          <source>As shown above, the &lt;code&gt;MISSING&lt;/code&gt; value is a sentinel object used to detect if the &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;default_factory&lt;/code&gt; parameters are provided. This sentinel is used because &lt;code&gt;None&lt;/code&gt; is a valid value for &lt;code&gt;default&lt;/code&gt;. No code should directly use the &lt;code&gt;MISSING&lt;/code&gt; value.</source>
          <target state="translated">如上所示， &lt;code&gt;MISSING&lt;/code&gt; 值是一个哨兵对象，用于检测是否提供了 &lt;code&gt;default&lt;/code&gt; 和 &lt;code&gt;default_factory&lt;/code&gt; 参数。使用此标记是因为 &lt;code&gt;None&lt;/code&gt; 是 &lt;code&gt;default&lt;/code&gt; 的有效值。没有代码应直接使用 &lt;code&gt;MISSING&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="e77922c76564f11dd7e1353e59f5212f7c398d9d" translate="yes" xml:space="preserve">
          <source>As shown, &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; also makes it quite easy to use &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statements to manage arbitrary resources that don&amp;rsquo;t natively support the context management protocol.</source>
          <target state="translated">如图所示，&lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt;还使&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;语句一起使用来管理本来不支持上下文管理协议的任意资源变得非常容易。</target>
        </trans-unit>
        <trans-unit id="5fb7bd38776b3eebef09256f660c5e1b512cbe36" translate="yes" xml:space="preserve">
          <source>As shown, &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; also makes it quite easy to use &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statements to manage arbitrary resources that don&amp;rsquo;t natively support the context management protocol.</source>
          <target state="translated">如图所示，&lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt;还使&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;语句一起使用来管理本来不支持上下文管理协议的任意资源变得非常容易。</target>
        </trans-unit>
        <trans-unit id="afcd78e93b46d440282cd0af672c39772532099d" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;cProfile.Profile&lt;/code&gt; class cannot be calibrated, custom timer functions should be used with care and should be as fast as possible. For the best results with a custom timer, it might be necessary to hard-code it in the C source of the internal &lt;code&gt;_lsprof&lt;/code&gt; module.</source>
          <target state="translated">由于无法对 &lt;code&gt;cProfile.Profile&lt;/code&gt; 类进行校准，因此应谨慎使用自定义计时器函数，并且应尽可能快。为了使用自定义计时器获得最佳结果，可能有必要在内部 &lt;code&gt;_lsprof&lt;/code&gt; 模块的C源代码中对其进行硬编码。</target>
        </trans-unit>
        <trans-unit id="45e79820db8ac841bcd7b5678fd84162e5edd5f6" translate="yes" xml:space="preserve">
          <source>As the circle is approximated by an inscribed regular polygon, &lt;em&gt;steps&lt;/em&gt; determines the number of steps to use. If not given, it will be calculated automatically. May be used to draw regular polygons.</source>
          <target state="translated">由于圆是由内接正则多边形逼近的，因此，&lt;em&gt;步&lt;/em&gt;数决定了要使用的步数。如果未给出，它将自动计算。可用于绘制常规多边形。</target>
        </trans-unit>
        <trans-unit id="471b958617fa3e20177a04beca298db4067ef76f" translate="yes" xml:space="preserve">
          <source>As the decorated function must be able to be called multiple times, the underlying context manager must support use in multiple &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statements. If this is not the case, then the original construct with the explicit &lt;code&gt;with&lt;/code&gt; statement inside the function should be used.</source>
          <target state="translated">由于修饰的函数必须能够被多次调用，因此基础上下文管理器必须支持在多个&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;语句中使用。如果不是这种情况，则应使用函数内部带有显式 &lt;code&gt;with&lt;/code&gt; 语句的原始构造。</target>
        </trans-unit>
        <trans-unit id="cb86e3413c4f286f84d17583ff8db93cd75dbf02" translate="yes" xml:space="preserve">
          <source>As the decorated function must be able to be called multiple times, the underlying context manager must support use in multiple &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statements. If this is not the case, then the original construct with the explicit &lt;code&gt;with&lt;/code&gt; statement inside the function should be used.</source>
          <target state="translated">由于修饰的函数必须能够被多次调用，因此基础上下文管理器必须支持在多个&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;语句中使用。如果不是这种情况，则应使用函数内部带有显式 &lt;code&gt;with&lt;/code&gt; 语句的原始构造。</target>
        </trans-unit>
        <trans-unit id="68dd2b46461463b5dc81b3ce8b1f5caf9be1fe6b" translate="yes" xml:space="preserve">
          <source>As the example shows, if an option is marked as &lt;code&gt;required&lt;/code&gt;, &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; will report an error if that option is not present at the command line.</source>
          <target state="translated">如示例所示，如果将选项标记为 &lt;code&gt;required&lt;/code&gt; ，则如果命令行中不存在该选项，&lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt; &lt;code&gt;parse_args()&lt;/code&gt; &lt;/a&gt;将报告错误。</target>
        </trans-unit>
        <trans-unit id="76e64b80b59b5f1ae7b48ded543b566b2c5fea6e" translate="yes" xml:space="preserve">
          <source>As the help string supports %-formatting, if you want a literal &lt;code&gt;%&lt;/code&gt; to appear in the help string, you must escape it as &lt;code&gt;%%&lt;/code&gt;.</source>
          <target state="translated">由于帮助字符串支持％格式，因此，如果希望文字 &lt;code&gt;%&lt;/code&gt; 出现在帮助字符串中，则必须以 &lt;code&gt;%%&lt;/code&gt; 对其进行转义。</target>
        </trans-unit>
        <trans-unit id="a59b1810ad2366588e1560b21083e815a61d7702" translate="yes" xml:space="preserve">
          <source>As the output from the example shows, reusing a single stack object across multiple with statements works correctly, but attempting to nest them will cause the stack to be cleared at the end of the innermost with statement, which is unlikely to be desirable behaviour.</source>
          <target state="translated">正如示例中的输出所示,在多个with语句中重用一个堆栈对象是正确的,但试图嵌套它们会导致堆栈在最里面的with语句结束时被清空,这不太可能是理想的行为。</target>
        </trans-unit>
        <trans-unit id="7432cc881a9c7f8b1e82bf98956cfaf69b88ec94" translate="yes" xml:space="preserve">
          <source>As the previous example shows, you can add &lt;code&gt;...&lt;/code&gt; lines to your example containing only directives. This can be useful when an example is too long for a directive to comfortably fit on the same line:</source>
          <target state="translated">如前面的示例所示，您可以在仅包含指令的示例中添加 &lt;code&gt;...&lt;/code&gt; 行。当示例太长而指令无法舒适地放在同一行上时，这将很有用：</target>
        </trans-unit>
        <trans-unit id="bad0a4f610137a71fbd404f93777ff0fbaf5382a" translate="yes" xml:space="preserve">
          <source>As the python.org website uses &lt;em&gt;utf-8&lt;/em&gt; encoding as specified in its meta tag, we will use the same for decoding the bytes object.</source>
          <target state="translated">由于python.org网站使用其meta标签中指定的&lt;em&gt;utf-8&lt;/em&gt;编码，因此我们将使用&lt;em&gt;utf-8&lt;/em&gt;编码来解码bytes对象。</target>
        </trans-unit>
        <trans-unit id="f9ef874d7307cc69342eb69c015b2b52804bc24e" translate="yes" xml:space="preserve">
          <source>As we can easily check, our array is sorted now:</source>
          <target state="translated">我们可以很容易地检查,我们的数组现在已经排序了。</target>
        </trans-unit>
        <trans-unit id="c23b38ddb6aef5ba6269faf72685d2b4793ec969" translate="yes" xml:space="preserve">
          <source>As we can see above, the API is pretty straightforward. The only bit of magic involves the &lt;code&gt;DEFAULT&lt;/code&gt; section which provides default values for all other sections &lt;a href=&quot;#id14&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;. Note also that keys in sections are case-insensitive and stored in lowercase &lt;a href=&quot;#id14&quot; id=&quot;id2&quot;&gt;1&lt;/a&gt;.</source>
          <target state="translated">正如我们在上面看到的，API非常简单。唯一的妙处涉及 &lt;code&gt;DEFAULT&lt;/code&gt; 部分，该部分为所有其他部分&lt;a href=&quot;#id14&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;提供默认值。还要注意，各节中的键不区分大小写，并存储在小写字母&lt;a href=&quot;#id14&quot; id=&quot;id2&quot;&gt;1中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fd35f4640dac53d4cba2d342193297bc4fce7dc6" translate="yes" xml:space="preserve">
          <source>As we shall see, pickle does not use directly the methods described above. In fact, these methods are part of the copy protocol which implements the &lt;a href=&quot;#object.__reduce__&quot;&gt;&lt;code&gt;__reduce__()&lt;/code&gt;&lt;/a&gt; special method. The copy protocol provides a unified interface for retrieving the data necessary for pickling and copying objects. &lt;a href=&quot;#id10&quot; id=&quot;id5&quot;&gt;4&lt;/a&gt;</source>
          <target state="translated">正如我们将看到的，泡菜没有直接使用上述方法。实际上，这些方法是复制协议的一部分，该协议实现了&lt;a href=&quot;#object.__reduce__&quot;&gt; &lt;code&gt;__reduce__()&lt;/code&gt; &lt;/a&gt;特殊方法。复制协议提供了一个统一的接口，用于检索腌制和复制对象所需的数据。&lt;a href=&quot;#id10&quot; id=&quot;id5&quot;&gt;4&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="debea2eb93150eb2d1b36d8b1bf25e4f62753e5c" translate="yes" xml:space="preserve">
          <source>As well as a decorator &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; can be used as a context manager in a with statement:</source>
          <target state="translated">以及装饰器&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;可以在with语句中用作上下文管理器：</target>
        </trans-unit>
        <trans-unit id="b9da1c5bbe7d0c4d318b5718e8cf13b1be346dab" translate="yes" xml:space="preserve">
          <source>As well as attributes on the created mock attributes, like the &lt;a href=&quot;#unittest.mock.Mock.return_value&quot;&gt;&lt;code&gt;return_value&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt;&lt;code&gt;side_effect&lt;/code&gt;&lt;/a&gt;, of child mocks can also be configured. These aren&amp;rsquo;t syntactically valid to pass in directly as keyword arguments, but a dictionary with these as keys can still be expanded into a &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; call using &lt;code&gt;**&lt;/code&gt;:</source>
          <target state="translated">除了创建的模拟属性的属性（例如子模拟的&lt;a href=&quot;#unittest.mock.Mock.return_value&quot;&gt; &lt;code&gt;return_value&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt; &lt;code&gt;side_effect&lt;/code&gt; )外&lt;/a&gt;，还可以对其进行配置。这些在语法上不能直接作为关键字参数传递，但使用它们作为键的字典仍然可以使用 &lt;code&gt;**&lt;/code&gt; 扩展为&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;调用：</target>
        </trans-unit>
        <trans-unit id="f8beeb01a1af78f02464bc704487f07739d5804d" translate="yes" xml:space="preserve">
          <source>As well as being a path it is possible to pass a package name, for example &lt;code&gt;myproject.subpackage.test&lt;/code&gt;, as the start directory. The package name you supply will then be imported and its location on the filesystem will be used as the start directory.</source>
          <target state="translated">除了作为路径外，还可以将包名称（例如 &lt;code&gt;myproject.subpackage.test&lt;/code&gt; ）作为起始目录传递。然后，将提供您提供的软件包名称，并将其在文件系统上的位置用作起始目录。</target>
        </trans-unit>
        <trans-unit id="2ac654a9b0a771a253377851cbe7d9dcdd53aa08" translate="yes" xml:space="preserve">
          <source>As well as external objects, there is sometimes also a need to refer to objects in the configuration. This will be done implicitly by the configuration system for things that it knows about. For example, the string value &lt;code&gt;'DEBUG'&lt;/code&gt; for a &lt;code&gt;level&lt;/code&gt; in a logger or handler will automatically be converted to the value &lt;code&gt;logging.DEBUG&lt;/code&gt;, and the &lt;code&gt;handlers&lt;/code&gt;, &lt;code&gt;filters&lt;/code&gt; and &lt;code&gt;formatter&lt;/code&gt; entries will take an object id and resolve to the appropriate destination object.</source>
          <target state="translated">除外部对象外，有时还需要引用配置中的对象。配置系统将针对它所了解的内容隐式完成此操作。例如，记录器或处理程序中某个 &lt;code&gt;level&lt;/code&gt; 的字符串值 &lt;code&gt;'DEBUG'&lt;/code&gt; 将自动转换为值 &lt;code&gt;logging.DEBUG&lt;/code&gt; ，并且 &lt;code&gt;handlers&lt;/code&gt; ， &lt;code&gt;filters&lt;/code&gt; 和 &lt;code&gt;formatter&lt;/code&gt; 条目将获取对象ID并解析为适当的目标对象。</target>
        </trans-unit>
        <trans-unit id="8a2e6cebd59a22f19c5763adb2176795f3405ba5" translate="yes" xml:space="preserve">
          <source>As well as tracking calls to themselves, mocks also track calls to methods and attributes, and &lt;em&gt;their&lt;/em&gt; methods and attributes:</source>
          <target state="translated">除了跟踪对自身的调用之外，模拟还跟踪对方法和属性&lt;em&gt;及其&lt;/em&gt;方法和属性的调用：</target>
        </trans-unit>
        <trans-unit id="eba8324196b8dfc54af3887d0a5dc2b00afccd66" translate="yes" xml:space="preserve">
          <source>As well as using &lt;em&gt;autospec&lt;/em&gt; through &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; there is a &lt;a href=&quot;#unittest.mock.create_autospec&quot;&gt;&lt;code&gt;create_autospec()&lt;/code&gt;&lt;/a&gt; for creating autospecced mocks directly:</source>
          <target state="translated">除了通过&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;使用自动&lt;em&gt;规格外&lt;/em&gt;，还有一个&lt;a href=&quot;#unittest.mock.create_autospec&quot;&gt; &lt;code&gt;create_autospec()&lt;/code&gt; &lt;/a&gt;用于直接创建自动规格的模拟：</target>
        </trans-unit>
        <trans-unit id="0630c32a8836c172a8afec7c1702dc1fc98e8c01" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt; won&amp;rsquo;t display anything unless an example fails. If an example does fail, then the failing example(s) and the cause(s) of the failure(s) are printed to stdout, using the same format as &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">与&lt;a href=&quot;#doctest.testmod&quot;&gt; &lt;code&gt;testmod()&lt;/code&gt; 一样&lt;/a&gt;，除非示例失败，否则&lt;a href=&quot;#doctest.testfile&quot;&gt; &lt;code&gt;testfile()&lt;/code&gt; &lt;/a&gt;不会显示任何内容。如果某个示例确实失败了，那么将使用与&lt;a href=&quot;#doctest.testmod&quot;&gt; &lt;code&gt;testmod()&lt;/code&gt; &lt;/a&gt;相同的格式将失败的示例和失败的原因打印到stdout 。</target>
        </trans-unit>
        <trans-unit id="8d2f16ec04ec8da2a8b6d28bff1e96ae0730df2f" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;#mailbox.Mailbox.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt;, parameter &lt;em&gt;message&lt;/em&gt; may be a &lt;a href=&quot;#mailbox.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; instance, an &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;email.message.Message&lt;/code&gt;&lt;/a&gt; instance, a string, a byte string, or a file-like object (which should be open in binary mode). If &lt;em&gt;message&lt;/em&gt; is an instance of the appropriate format-specific &lt;a href=&quot;#mailbox.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; subclass (e.g., if it&amp;rsquo;s an &lt;a href=&quot;#mailbox.mboxMessage&quot;&gt;&lt;code&gt;mboxMessage&lt;/code&gt;&lt;/a&gt; instance and this is an &lt;a href=&quot;#mailbox.mbox&quot;&gt;&lt;code&gt;mbox&lt;/code&gt;&lt;/a&gt; instance), its format-specific information is used. Otherwise, the format-specific information of the message that currently corresponds to &lt;em&gt;key&lt;/em&gt; is left unchanged.</source>
          <target state="translated">与&lt;a href=&quot;#mailbox.Mailbox.add&quot;&gt; &lt;code&gt;add()&lt;/code&gt; 一样&lt;/a&gt;，参数&lt;em&gt;message&lt;/em&gt;可以是&lt;a href=&quot;#mailbox.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt;实例，&lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt; &lt;code&gt;email.message.Message&lt;/code&gt; &lt;/a&gt;实例，字符串，字节字符串或类似文件的对象（应以二进制模式打开）。如果&lt;em&gt;message&lt;/em&gt;是适当的特定于格式的&lt;a href=&quot;#mailbox.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt;子类的实例（例如，如果它是&lt;a href=&quot;#mailbox.mboxMessage&quot;&gt; &lt;code&gt;mboxMessage&lt;/code&gt; &lt;/a&gt;实例并且这是&lt;a href=&quot;#mailbox.mbox&quot;&gt; &lt;code&gt;mbox&lt;/code&gt; &lt;/a&gt;实例），则使用其特定于格式的信息。否则，当前与&lt;em&gt;密钥&lt;/em&gt;对应的消息的格式特定信息将保持不变。</target>
        </trans-unit>
        <trans-unit id="0bf2339fc3da041c7b40d65293bdd95b7f0f7885" translate="yes" xml:space="preserve">
          <source>As with a dictionary, you can use a section&amp;rsquo;s &lt;code&gt;get()&lt;/code&gt; method to provide fallback values:</source>
          <target state="translated">与字典一样，您可以使用部分的 &lt;code&gt;get()&lt;/code&gt; 方法来提供后备值：</target>
        </trans-unit>
        <trans-unit id="57771b08d272fad9dc8b1be5068d86775d7fa3ca" translate="yes" xml:space="preserve">
          <source>As with all other objects in Python the old objects are only reclaimed after their reference counts drop to zero.</source>
          <target state="translated">与Python中的所有其他对象一样,旧的对象只有在其引用计数降到零之后才会被回收。</target>
        </trans-unit>
        <trans-unit id="de44bc643f497be8df1b37fe142eb3754e000e16" translate="yes" xml:space="preserve">
          <source>As with any &lt;code&gt;try&lt;/code&gt; statement based code, this can cause problems for development and review, because the setup code and the cleanup code can end up being separated by arbitrarily long sections of code.</source>
          <target state="translated">与任何基于 &lt;code&gt;try&lt;/code&gt; 语句的代码一样，这可能会导致开发和审查方面的问题，因为设置代码和清除代码最终可能会被任意长的代码段分隔开。</target>
        </trans-unit>
        <trans-unit id="b3ab064145c449d1616c3eb8354b791e442472ff" translate="yes" xml:space="preserve">
          <source>As with any other mechanism that completely suppresses exceptions, this context manager should be used only to cover very specific errors where silently continuing with program execution is known to be the right thing to do.</source>
          <target state="translated">与任何其他完全抑制异常的机制一样,这个上下文管理器应该只用于覆盖非常特殊的错误,在这种情况下,沉默地继续执行程序是已知正确的事情。</target>
        </trans-unit>
        <trans-unit id="61ba626904718f435e8bb9195d72a3d4e176bd46" translate="yes" xml:space="preserve">
          <source>As with message in an mbox mailbox, MMDF messages are stored with the sender&amp;rsquo;s address and the delivery date in an initial line beginning with &amp;ldquo;From &amp;ldquo;. Likewise, flags that indicate the state of the message are typically stored in &lt;em&gt;Status&lt;/em&gt; and &lt;em&gt;X-Status&lt;/em&gt; headers.</source>
          <target state="translated">与mbox邮箱中的邮件一样，MMDF邮件与发件人的地址和发送日期一起存储在以&amp;ldquo; From&amp;rdquo;开头的首行中。同样，指示消息状态的标志通常存储在&lt;em&gt;Status&lt;/em&gt;和&lt;em&gt;X-Status&lt;/em&gt;标头中。</target>
        </trans-unit>
        <trans-unit id="cdc2d00aa5d268d13b0deb99289a5e17c7efb442" translate="yes" xml:space="preserve">
          <source>As with other methods, case-sensitivity follows platform defaults:</source>
          <target state="translated">与其他方法一样,大小写敏感度遵循平台默认值。</target>
        </trans-unit>
        <trans-unit id="8bb7354faa685cfe016fc2268268a70658988eb5" translate="yes" xml:space="preserve">
          <source>As with other methods, case-sensitivity is observed:</source>
          <target state="translated">与其他方法一样,观察到了大小写的敏感性。</target>
        </trans-unit>
        <trans-unit id="31db4d814a8ee3a9c296a0ac9ab18e1168c00cb9" translate="yes" xml:space="preserve">
          <source>As with string literals, bytes literals may also use a &lt;code&gt;r&lt;/code&gt; prefix to disable processing of escape sequences. See &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#strings&quot;&gt;String and Bytes literals&lt;/a&gt; for more about the various forms of bytes literal, including supported escape sequences.</source>
          <target state="translated">与字符串文字一样，字节文字也可以使用 &lt;code&gt;r&lt;/code&gt; 前缀来禁用转义序列的处理。有关&lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#strings&quot;&gt;字节&lt;/a&gt;形式的各种形式（包括受支持的转义序列）的更多信息，请参见字符串和字节形式。</target>
        </trans-unit>
        <trans-unit id="5ba3c5f5300a18dcc61c9484deef226967d8c18a" translate="yes" xml:space="preserve">
          <source>As with string literals, bytes literals may also use a &lt;code&gt;r&lt;/code&gt; prefix to disable processing of escape sequences. See &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#strings&quot;&gt;String and Bytes literals&lt;/a&gt; for more about the various forms of bytes literal, including supported escape sequences.</source>
          <target state="translated">与字符串文字一样，字节文字也可以使用 &lt;code&gt;r&lt;/code&gt; 前缀来禁用转义序列的处理。有关&lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#strings&quot;&gt;字节字面量&lt;/a&gt;的各种形式（包括受支持的转义序列）的更多信息，请参见字符串和字节字面量。</target>
        </trans-unit>
        <trans-unit id="6084fcb644e26dce144964d5ce8fd1b644c1bcfd" translate="yes" xml:space="preserve">
          <source>As with the &lt;a href=&quot;#description&quot;&gt;description&lt;/a&gt; argument, the &lt;code&gt;epilog=&lt;/code&gt; text is by default line-wrapped, but this behavior can be adjusted with the &lt;a href=&quot;#formatter-class&quot;&gt;formatter_class&lt;/a&gt; argument to &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">与&lt;a href=&quot;#description&quot;&gt;description&lt;/a&gt;参数一样， &lt;code&gt;epilog=&lt;/code&gt; 文本默认情况下是用换行符包装的，但是可以通过&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;的&lt;a href=&quot;#formatter-class&quot;&gt;formatter_class&lt;/a&gt;参数来调整此行为。</target>
        </trans-unit>
        <trans-unit id="50d385a8286d57094c5ce3df7ad9daf11b5640f8" translate="yes" xml:space="preserve">
          <source>As with the &lt;a href=&quot;email.parser#module-email.parser&quot;&gt;&lt;code&gt;email.parser&lt;/code&gt;&lt;/a&gt; module, you aren&amp;rsquo;t limited to the functionality of the bundled generator; you could write one from scratch yourself. However the bundled generator knows how to generate most email in a standards-compliant way, should handle MIME and non-MIME email messages just fine, and is designed so that the bytes-oriented parsing and generation operations are inverses, assuming the same non-transforming &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/a&gt; is used for both. That is, parsing the serialized byte stream via the &lt;a href=&quot;email.parser#email.parser.BytesParser&quot;&gt;&lt;code&gt;BytesParser&lt;/code&gt;&lt;/a&gt; class and then regenerating the serialized byte stream using &lt;a href=&quot;#email.generator.BytesGenerator&quot;&gt;&lt;code&gt;BytesGenerator&lt;/code&gt;&lt;/a&gt; should produce output identical to the input &lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;. (On the other hand, using the generator on an &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; constructed by program may result in changes to the &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; object as defaults are filled in.)</source>
          <target state="translated">与&lt;a href=&quot;email.parser#module-email.parser&quot;&gt; &lt;code&gt;email.parser&lt;/code&gt; &lt;/a&gt;模块一样，您不仅限于捆绑生成器的功能；您可以自己从头开始写一个。但是，捆绑的生成器知道如何以符合标准的方式生成大多数电子邮件，应该能够很好地处理MIME和非MIME电子邮件，并且设计成使得面向字节的解析和生成操作是相反的，并假定相同的非两者都使用了转换&lt;a href=&quot;email.policy#module-email.policy&quot;&gt; &lt;code&gt;policy&lt;/code&gt; &lt;/a&gt;。也就是说，通过&lt;a href=&quot;email.parser#email.parser.BytesParser&quot;&gt; &lt;code&gt;BytesParser&lt;/code&gt; &lt;/a&gt;类解析序列化的字节流，然后使用&lt;a href=&quot;#email.generator.BytesGenerator&quot;&gt; &lt;code&gt;BytesGenerator&lt;/code&gt; &lt;/a&gt;重新生成序列化的字节流，应产生与输入&lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;相同的输出。 （另一方面，在&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt;上使用生成器由程序构造的结构可能会导致在填充默认值后更改&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt;对象。）</target>
        </trans-unit>
        <trans-unit id="98b68bf763d9b565df24602f94e028fb7d75d354" translate="yes" xml:space="preserve">
          <source>As with the constructor for &lt;a href=&quot;#bz2.BZ2File&quot;&gt;&lt;code&gt;BZ2File&lt;/code&gt;&lt;/a&gt;, the &lt;em&gt;filename&lt;/em&gt; argument can be an actual filename (a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object), or an existing file object to read from or write to.</source>
          <target state="translated">与&lt;a href=&quot;#bz2.BZ2File&quot;&gt; &lt;code&gt;BZ2File&lt;/code&gt; &lt;/a&gt;的构造函数一样，&lt;em&gt;filename&lt;/em&gt;参数可以是实际的文件名（&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;对象），也可以是要读取或写入的现有文件对象。</target>
        </trans-unit>
        <trans-unit id="39b89ac3cbb6042a6b76daccce240847a7e0deae" translate="yes" xml:space="preserve">
          <source>As with the normal socket object, &lt;em&gt;address&lt;/em&gt; is a tuple with the first element the host to connect to, and the second the port number.</source>
          <target state="translated">与普通套接字对象一样，&lt;em&gt;address&lt;/em&gt;是一个元组，其中主机要连接的第一个元素，第二个是端口号。</target>
        </trans-unit>
        <trans-unit id="f590c8191e52a5707968f655cd53f953a854a829" translate="yes" xml:space="preserve">
          <source>As you can see, we can treat a config parser much like a dictionary. There are differences, &lt;a href=&quot;#mapping-protocol-access&quot;&gt;outlined later&lt;/a&gt;, but the behavior is very close to what you would expect from a dictionary.</source>
          <target state="translated">如您所见，我们可以像对待字典一样对待配置解析器。有一些差异，&lt;a href=&quot;#mapping-protocol-access&quot;&gt;稍后&lt;/a&gt;将概述，但是其行为与您从字典中所期望的非常接近。</target>
        </trans-unit>
        <trans-unit id="59f904f27b756361ae89156e1ce717db987f76ba" translate="yes" xml:space="preserve">
          <source>As you&amp;rsquo;d expect, the legal values for &lt;em&gt;someAction&lt;/em&gt; will depend on the widget&amp;rsquo;s class: &lt;code&gt;.fred disable&lt;/code&gt; works if fred is a button (fred gets greyed out), but does not work if fred is a label (disabling of labels is not supported in Tk).</source>
          <target state="translated">如您所料，&lt;em&gt;someAction&lt;/em&gt;的合法值将取决于窗口小部件的类： &lt;code&gt;.fred disable&lt;/code&gt; 如果fred是按钮（fred变灰）则有效，但是如果fred是标签（不支持禁用标签）则不起作用在Tk中）。</target>
        </trans-unit>
        <trans-unit id="61b9f99dea4285cc76b6c48cda8a14e52d2b891d" translate="yes" xml:space="preserve">
          <source>As your collection of doctest&amp;rsquo;ed modules grows, you&amp;rsquo;ll want a way to run all their doctests systematically. &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; provides two functions that can be used to create &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; test suites from modules and text files containing doctests. To integrate with &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; test discovery, include a &lt;code&gt;load_tests()&lt;/code&gt; function in your test module:</source>
          <target state="translated">随着doctest模块的集合的增长，您将需要一种系统地运行其所有doctest的方法。&lt;a href=&quot;#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; &lt;/a&gt;提供了可用于创建两个功能&lt;a href=&quot;unittest#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;从模块和包含文档测试的文本文件的测试套件。要与&lt;a href=&quot;unittest#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;测试发现集成，请在测试模块中包含 &lt;code&gt;load_tests()&lt;/code&gt; 函数：</target>
        </trans-unit>
        <trans-unit id="2a9978f5d754841b336538c4c5a01a51bbcd2678" translate="yes" xml:space="preserve">
          <source>Assert that &lt;em&gt;iter&lt;/em&gt; is deallocated after iterating.</source>
          <target state="translated">声明&lt;em&gt;迭代后&lt;/em&gt;已释放Iter。</target>
        </trans-unit>
        <trans-unit id="fd264d50fb4b9eeefc754b5a58a5fcba3dedc28e" translate="yes" xml:space="preserve">
          <source>Assert that running the interpreter with &lt;em&gt;args&lt;/em&gt; and optional environment variables &lt;em&gt;env_vars&lt;/em&gt; fails (&lt;code&gt;rc != 0&lt;/code&gt;) and return a &lt;code&gt;(return code,
stdout, stderr)&lt;/code&gt; tuple.</source>
          <target state="translated">断言使用&lt;em&gt;args&lt;/em&gt;和可选的环境变量&lt;em&gt;env_vars&lt;/em&gt;运行解释器&lt;em&gt;会&lt;/em&gt;失败（ &lt;code&gt;rc != 0&lt;/code&gt; ），并返回一个 &lt;code&gt;(return code, stdout, stderr)&lt;/code&gt; 元组。</target>
        </trans-unit>
        <trans-unit id="1e0d6e30e5daa962c493e2c53bfd3e5bd71e7f71" translate="yes" xml:space="preserve">
          <source>Assert that running the interpreter with &lt;em&gt;args&lt;/em&gt; and optional environment variables &lt;em&gt;env_vars&lt;/em&gt; succeeds (&lt;code&gt;rc == 0&lt;/code&gt;) and return a &lt;code&gt;(return code,
stdout, stderr)&lt;/code&gt; tuple.</source>
          <target state="translated">断言，使用&lt;em&gt;args&lt;/em&gt;和可选的环境变量&lt;em&gt;env_vars&lt;/em&gt;运行解释器成功（ &lt;code&gt;rc == 0&lt;/code&gt; ），并返回一个 &lt;code&gt;(return code, stdout, stderr)&lt;/code&gt; 元组。</target>
        </trans-unit>
        <trans-unit id="f8fb3abe58177e5028044ca5b20cc140fb7d71a8" translate="yes" xml:space="preserve">
          <source>Assert that the &lt;code&gt;__all__&lt;/code&gt; variable of &lt;em&gt;module&lt;/em&gt; contains all public names.</source>
          <target state="translated">声明&lt;em&gt;模块&lt;/em&gt;的 &lt;code&gt;__all__&lt;/code&gt; 变量包含所有公共名称。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="55a3005fb29b0592036701f49249b35f6fe4e576" translate="yes" xml:space="preserve">
          <source>Assert that the last await was with the specified arguments.</source>
          <target state="translated">断言最后一次等待是用指定的参数。</target>
        </trans-unit>
        <trans-unit id="0ab3c9a0f942a4e5218663ad1728f419192ba180" translate="yes" xml:space="preserve">
          <source>Assert that the mock was awaited at least once. Note that this is separate from the object having been called, the &lt;code&gt;await&lt;/code&gt; keyword must be used:</source>
          <target state="translated">断言该模拟至少等待了一次。请注意，这与被调用的对象是分开的，必须使用 &lt;code&gt;await&lt;/code&gt; 关键字：</target>
        </trans-unit>
        <trans-unit id="559c5d43237366024e3609d35920dccb6c140415" translate="yes" xml:space="preserve">
          <source>Assert that the mock was awaited exactly once and with the specified arguments.</source>
          <target state="translated">断言mock被准确地等待了一次,并且有指定的参数。</target>
        </trans-unit>
        <trans-unit id="5ad7deeafb38bd4aeb17622c34aa957e7bdb88a1" translate="yes" xml:space="preserve">
          <source>Assert that the mock was awaited exactly once.</source>
          <target state="translated">断言嘲讽被等待了正好一次。</target>
        </trans-unit>
        <trans-unit id="1f4df423286b9ac2be8365c78eafe1774099f5f2" translate="yes" xml:space="preserve">
          <source>Assert that the mock was called at least once.</source>
          <target state="translated">断言至少叫了一次模拟。</target>
        </trans-unit>
        <trans-unit id="3324ced759f5d86b62cf891c7da413bc53b68560" translate="yes" xml:space="preserve">
          <source>Assert that the mock was called exactly once and that that call was with the specified arguments.</source>
          <target state="translated">断言mock被精确地调用了一次,并且该调用是用指定的参数进行的。</target>
        </trans-unit>
        <trans-unit id="5bf57493612b2763417d96c9bf7967affcea4272" translate="yes" xml:space="preserve">
          <source>Assert that the mock was called exactly once.</source>
          <target state="translated">断言嘲讽正好叫一次。</target>
        </trans-unit>
        <trans-unit id="3db0fab7867c814616ac71a3a5143ce2dff5900d" translate="yes" xml:space="preserve">
          <source>Assert that the mock was never awaited.</source>
          <target state="translated">断言从来没有等待过嘲讽。</target>
        </trans-unit>
        <trans-unit id="c1c646d111dcc42ccae26bbe43d3ddada473ab0f" translate="yes" xml:space="preserve">
          <source>Assert the mock has been awaited with the specified calls. The &lt;a href=&quot;#unittest.mock.AsyncMock.await_args_list&quot;&gt;&lt;code&gt;await_args_list&lt;/code&gt;&lt;/a&gt; list is checked for the awaits.</source>
          <target state="translated">声明已通过指定的调用等待模拟。该&lt;a href=&quot;#unittest.mock.AsyncMock.await_args_list&quot;&gt; &lt;code&gt;await_args_list&lt;/code&gt; &lt;/a&gt;列表检查的等待着。</target>
        </trans-unit>
        <trans-unit id="aeceb688911f6dcdcfa555a84d22383aa56d4db7" translate="yes" xml:space="preserve">
          <source>Assert the mock has ever been awaited with the specified arguments.</source>
          <target state="translated">断言mock曾经被指定的参数所等待。</target>
        </trans-unit>
        <trans-unit id="3d67cb9aa133440c8ea1ec7d7cc69fcf71038d22" translate="yes" xml:space="preserve">
          <source>Assert the mock was never called.</source>
          <target state="translated">断言嘲讽从未被叫过。</target>
        </trans-unit>
        <trans-unit id="e3292c12a856a02722a46d87471ff4e6faefa104" translate="yes" xml:space="preserve">
          <source>AssertionError</source>
          <target state="translated">AssertionError</target>
        </trans-unit>
        <trans-unit id="096ae7879fe3ac7e3285826b7966eb892e08f3e2" translate="yes" xml:space="preserve">
          <source>Assign a Python function or another callable to this attribute. The callable will be called with three or more arguments:</source>
          <target state="translated">为这个属性指定一个 Python 函数或其他可调用的函数。这个可调用的函数将被调用三个或多个参数。</target>
        </trans-unit>
        <trans-unit id="2d6b37186bcf31c990ffb06dcf0507a39bd37db6" translate="yes" xml:space="preserve">
          <source>Assign a ctypes type to specify the result type of the foreign function. Use &lt;code&gt;None&lt;/code&gt; for &lt;code&gt;void&lt;/code&gt;, a function not returning anything.</source>
          <target state="translated">分配ctypes类型以指定外部函数的结果类型。将 &lt;code&gt;None&lt;/code&gt; 用于 &lt;code&gt;void&lt;/code&gt; ，该函数不返回任何内容。</target>
        </trans-unit>
        <trans-unit id="87af2d9b58846a93bc5651822c3deea453207ca5" translate="yes" xml:space="preserve">
          <source>Assign a tuple of ctypes types to specify the argument types that the function accepts. Functions using the &lt;code&gt;stdcall&lt;/code&gt; calling convention can only be called with the same number of arguments as the length of this tuple; functions using the C calling convention accept additional, unspecified arguments as well.</source>
          <target state="translated">分配一个ctypes类型的元组以指定该函数接受的参数类型。使用 &lt;code&gt;stdcall&lt;/code&gt; 调用约定的函数只能使用与此元组的长度相同数量的参数来调用。使用C调用约定的函数也接受其他未指定的参数。</target>
        </trans-unit>
        <trans-unit id="24cd252fad6840a721b5d763b587fe334065ad54" translate="yes" xml:space="preserve">
          <source>Assigning a new value to instances of the pointer types &lt;a href=&quot;#ctypes.c_char_p&quot;&gt;&lt;code&gt;c_char_p&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ctypes.c_wchar_p&quot;&gt;&lt;code&gt;c_wchar_p&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#ctypes.c_void_p&quot;&gt;&lt;code&gt;c_void_p&lt;/code&gt;&lt;/a&gt; changes the &lt;em&gt;memory location&lt;/em&gt; they point to, &lt;em&gt;not the contents&lt;/em&gt; of the memory block (of course not, because Python bytes objects are immutable):</source>
          <target state="translated">为指针类型&lt;a href=&quot;#ctypes.c_char_p&quot;&gt; &lt;code&gt;c_char_p&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#ctypes.c_wchar_p&quot;&gt; &lt;code&gt;c_wchar_p&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#ctypes.c_void_p&quot;&gt; &lt;code&gt;c_void_p&lt;/code&gt; 的&lt;/a&gt;实例分配新值会更改它们指向的&lt;em&gt;内存位置&lt;/em&gt;，&lt;em&gt;而不是&lt;/em&gt;内存块&lt;em&gt;的内容&lt;/em&gt;（当然不会，因为Python字节对象是不可变的）：</target>
        </trans-unit>
        <trans-unit id="4ad21f0fedcc6176cc70cb700d98f976d15416af" translate="yes" xml:space="preserve">
          <source>Assigning another &lt;a href=&quot;#ctypes.c_int&quot;&gt;&lt;code&gt;c_int&lt;/code&gt;&lt;/a&gt; instance to the pointer&amp;rsquo;s contents attribute would cause the pointer to point to the memory location where this is stored:</source>
          <target state="translated">将另一个&lt;a href=&quot;#ctypes.c_int&quot;&gt; &lt;code&gt;c_int&lt;/code&gt; &lt;/a&gt;实例分配给指针的contents属性将导致指针指向存储该指针的存储位置：</target>
        </trans-unit>
        <trans-unit id="0b02ed6e18cfc24fbfbfe9a5ea607ee75077dc86" translate="yes" xml:space="preserve">
          <source>Assigning to an integer index changes the pointed to value:</source>
          <target state="translated">赋值给一个整数索引,改变指向的值。</target>
        </trans-unit>
        <trans-unit id="d425ffd0dc0c03777b86385bf81e964839a8b08e" translate="yes" xml:space="preserve">
          <source>Assignment statements in Python do not copy objects, they create bindings between a target and an object. For collections that are mutable or contain mutable items, a copy is sometimes needed so one can change one copy without changing the other. This module provides generic shallow and deep copy operations (explained below).</source>
          <target state="translated">Python 中的赋值语句并不复制对象,它们在目标和对象之间创建绑定。对于可突变或包含可突变项的集合,有时需要复制,因此可以在不改变另一个副本的情况下改变一个副本。这个模块提供了通用的浅层和深层复制操作 (下面会解释)。</target>
        </trans-unit>
        <trans-unit id="8e44ce9ac8ed3d578e4f315bbe0851d670b4c1ce" translate="yes" xml:space="preserve">
          <source>Assignment to these attributes should not be necessary other than in rare circumstances in a &lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt;&lt;code&gt;CookiePolicy&lt;/code&gt;&lt;/a&gt; method. The class does not enforce internal consistency, so you should know what you&amp;rsquo;re doing if you do that.</source>
          <target state="translated">除了在&lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt; &lt;code&gt;CookiePolicy&lt;/code&gt; &lt;/a&gt;方法中的极少数情况下，不需要分配这些属性。该类不强制内部一致性，因此您应该知道自己在做什么。</target>
        </trans-unit>
        <trans-unit id="88cccee59dd04afc77be1302263482ef8771b4eb" translate="yes" xml:space="preserve">
          <source>Assignments to items in &lt;code&gt;os.environ&lt;/code&gt; are automatically translated into corresponding calls to &lt;a href=&quot;#os.putenv&quot;&gt;&lt;code&gt;putenv()&lt;/code&gt;&lt;/a&gt;; however, calls to &lt;a href=&quot;#os.putenv&quot;&gt;&lt;code&gt;putenv()&lt;/code&gt;&lt;/a&gt; don&amp;rsquo;t update &lt;code&gt;os.environ&lt;/code&gt;, so it is actually preferable to assign to items of &lt;code&gt;os.environ&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;os.environ&lt;/code&gt; 中项目的分配将自动转换为对&lt;a href=&quot;#os.putenv&quot;&gt; &lt;code&gt;putenv()&lt;/code&gt; 的&lt;/a&gt;相应调用；但是，对&lt;a href=&quot;#os.putenv&quot;&gt; &lt;code&gt;putenv()&lt;/code&gt; 的&lt;/a&gt;调用不会更新 &lt;code&gt;os.environ&lt;/code&gt; ，因此实际上最好将其分配给 &lt;code&gt;os.environ&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4bdbb7b0403c9ed5b42c0c1a8e706970ef50e63c" translate="yes" xml:space="preserve">
          <source>Associate &lt;em&gt;dialect&lt;/em&gt; with &lt;em&gt;name&lt;/em&gt;. &lt;em&gt;name&lt;/em&gt; must be a string. The dialect can be specified either by passing a sub-class of &lt;a href=&quot;#csv.Dialect&quot;&gt;&lt;code&gt;Dialect&lt;/code&gt;&lt;/a&gt;, or by &lt;em&gt;fmtparams&lt;/em&gt; keyword arguments, or both, with keyword arguments overriding parameters of the dialect. For full details about the dialect and formatting parameters, see section &lt;a href=&quot;#csv-fmt-params&quot;&gt;Dialects and Formatting Parameters&lt;/a&gt;.</source>
          <target state="translated">将&lt;em&gt;方言&lt;/em&gt;与&lt;em&gt;名称相关联&lt;/em&gt;。&lt;em&gt;名称&lt;/em&gt;必须是字符串。可以通过传递&lt;a href=&quot;#csv.Dialect&quot;&gt; &lt;code&gt;Dialect&lt;/code&gt; &lt;/a&gt;的子类或通过&lt;em&gt;fmtparams&lt;/em&gt;关键字参数（或两者都使用关键字参数覆盖方言的参数）来指定方言。有关方言和格式&lt;a href=&quot;#csv-fmt-params&quot;&gt;设置参数的&lt;/a&gt;完整详细信息，请参见&amp;ldquo; 方言和格式设置参数&amp;rdquo;部分。</target>
        </trans-unit>
        <trans-unit id="3f3bcabdd04e1667230d7f6889c5454cd909ae99" translate="yes" xml:space="preserve">
          <source>Associates a value with a specified key.</source>
          <target state="translated">将一个值与一个指定的键关联起来。</target>
        </trans-unit>
        <trans-unit id="57c2abf791222401df793e61a9b604ada26f9510" translate="yes" xml:space="preserve">
          <source>Associates level &lt;em&gt;level&lt;/em&gt; with text &lt;em&gt;levelName&lt;/em&gt; in an internal dictionary, which is used to map numeric levels to a textual representation, for example when a &lt;a href=&quot;#logging.Formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; formats a message. This function can also be used to define your own levels. The only constraints are that all levels used must be registered using this function, levels should be positive integers and they should increase in increasing order of severity.</source>
          <target state="translated">将级别&lt;em&gt;级别&lt;/em&gt;与内部字典中的文本&lt;em&gt;levelName关联&lt;/em&gt;，该字典用于将数字级别映射到文本表示形式，例如，当&lt;a href=&quot;#logging.Formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;消息时。此功能还可用于定义您自己的级别。唯一的限制是所使用的所有级别都必须使用此功能进行注册，级别应为正整数，并且级别应按严重性递增顺序递增。</target>
        </trans-unit>
        <trans-unit id="99867ade566e46b388e954ef09df2f75d1038b85" translate="yes" xml:space="preserve">
          <source>Assume authentication as &lt;em&gt;user&lt;/em&gt;. Allows an authorised administrator to proxy into any user&amp;rsquo;s mailbox.</source>
          <target state="translated">假设以&lt;em&gt;用户&lt;/em&gt;身份验证。允许授权管理员代理到任何用户的邮箱。</target>
        </trans-unit>
        <trans-unit id="26bb7ee1e82bfd124b995cad27c9d2ea8e6c6188" translate="yes" xml:space="preserve">
          <source>Assume the end of the document. That will check well-formedness conditions that can be checked only at the end, invoke handlers, and may clean up resources allocated during parsing.</source>
          <target state="translated">假设是文档的结尾。这将检查只能在结尾处检查的完好性条件,调用处理程序,并可能清理解析过程中分配的资源。</target>
        </trans-unit>
        <trans-unit id="1a6fb61e671a32cacd481771d74554c4616cd64b" translate="yes" xml:space="preserve">
          <source>Assuming the Python code above is saved into a file called &lt;code&gt;prog.py&lt;/code&gt;, it can be run at the command line and provides useful help messages:</source>
          <target state="translated">假设上面的Python代码已保存到名为 &lt;code&gt;prog.py&lt;/code&gt; 的文件中，则可以在命令行中运行它并提供有用的帮助消息：</target>
        </trans-unit>
        <trans-unit id="17acdde866027b94b28efa16a0a09a1e51553c63" translate="yes" xml:space="preserve">
          <source>Assuming the associated lock is recursive (which it is by default) you can instead do</source>
          <target state="translated">假设关联的锁是递归的(默认情况下是递归的),你可以做的是</target>
        </trans-unit>
        <trans-unit id="005edc07fe911b0da3e54105325e3a3dbe1f1711" translate="yes" xml:space="preserve">
          <source>Assuming your script has no syntax errors, yet it does not work, you have no choice but to read the next section.</source>
          <target state="translated">假设你的脚本没有语法错误,但它却不能工作,你别无选择,只能阅读下一节。</target>
        </trans-unit>
        <trans-unit id="f329190d0fd15344dac730aabc63c032720e1284" translate="yes" xml:space="preserve">
          <source>Asterisk</source>
          <target state="translated">Asterisk</target>
        </trans-unit>
        <trans-unit id="f5e07612cc5bcc0cfaeae3b9a0358117f2681619" translate="yes" xml:space="preserve">
          <source>Asychronously run a function in a separate OS thread.</source>
          <target state="translated">在一个单独的操作系统线程中不同步地运行一个函数。</target>
        </trans-unit>
        <trans-unit id="1bd5673736a4b97f46b75295ed686c6410f3f563" translate="yes" xml:space="preserve">
          <source>Async and await</source>
          <target state="translated">异步和等待</target>
        </trans-unit>
        <trans-unit id="7011bcb2a149d047c8ec7153896517a23adc9f65" translate="yes" xml:space="preserve">
          <source>Asynchronous I/O</source>
          <target state="translated">异步I/O</target>
        </trans-unit>
        <trans-unit id="76a9f4eccd2719060ed9b323830b0077d403caed" translate="yes" xml:space="preserve">
          <source>Asynchronous Mixins</source>
          <target state="translated">异步混频器</target>
        </trans-unit>
        <trans-unit id="104c39ddd5b87efe32adc15b6d214b9332b179b7" translate="yes" xml:space="preserve">
          <source>Asynchronous iteration methods: &lt;code&gt;__aiter__&lt;/code&gt; and &lt;code&gt;__anext__&lt;/code&gt;</source>
          <target state="translated">异步迭代方法： &lt;code&gt;__aiter__&lt;/code&gt; 和 &lt;code&gt;__anext__&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b14c98bb24b89858352c275883aab384afdbd313" translate="yes" xml:space="preserve">
          <source>Asynchronous programming</source>
          <target state="translated">异步编程</target>
        </trans-unit>
        <trans-unit id="209a40d7b9cbb542c52bb05184d751a0e19a14bd" translate="yes" xml:space="preserve">
          <source>Asynchronous programming is different from classic &amp;ldquo;sequential&amp;rdquo; programming.</source>
          <target state="translated">异步编程不同于经典的&amp;ldquo;顺序&amp;rdquo;编程。</target>
        </trans-unit>
        <trans-unit id="120004888d9e7b45090be61175fabb0ddafb7dcc" translate="yes" xml:space="preserve">
          <source>Asynchronous version of &lt;a href=&quot;socket#socket.getaddrinfo&quot;&gt;&lt;code&gt;socket.getaddrinfo()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;socket#socket.getaddrinfo&quot;&gt; &lt;code&gt;socket.getaddrinfo()&lt;/code&gt; 的&lt;/a&gt;异步版本。</target>
        </trans-unit>
        <trans-unit id="9704ec7e27d093412e9ffd17b2f9417c95ee49f0" translate="yes" xml:space="preserve">
          <source>Asynchronous version of &lt;a href=&quot;socket#socket.getnameinfo&quot;&gt;&lt;code&gt;socket.getnameinfo()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;socket#socket.getnameinfo&quot;&gt; &lt;code&gt;socket.getnameinfo()&lt;/code&gt; 的&lt;/a&gt;异步版本。</target>
        </trans-unit>
        <trans-unit id="e75a6e60c21cef60290f8db343e2dd2f1b6b1276" translate="yes" xml:space="preserve">
          <source>Asynchronous version of &lt;a href=&quot;socket#socket.socket.connect&quot;&gt;&lt;code&gt;socket.connect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;socket#socket.socket.connect&quot;&gt; &lt;code&gt;socket.connect()&lt;/code&gt; 的&lt;/a&gt;异步版本。</target>
        </trans-unit>
        <trans-unit id="e50fde5f44e91a6cb4dcbfaaaadebf896e7d84b9" translate="yes" xml:space="preserve">
          <source>Asynchronous version of &lt;a href=&quot;socket#socket.socket.sendfile&quot;&gt;&lt;code&gt;socket.sendfile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;socket#socket.socket.sendfile&quot;&gt; &lt;code&gt;socket.sendfile()&lt;/code&gt; 的&lt;/a&gt;异步版本。</target>
        </trans-unit>
        <trans-unit id="8bcb500e2adace81f9483ea905e903583d45817b" translate="yes" xml:space="preserve">
          <source>Asynchronously run function &lt;em&gt;func&lt;/em&gt; in a separate thread.</source>
          <target state="translated">在单独的线程中异步运行函数&lt;em&gt;func&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a23dd13ee19c13bb7c352d2501d29036e264def5" translate="yes" xml:space="preserve">
          <source>At &lt;a href=&quot;#zoneinfo-data-runtime-config&quot;&gt;runtime&lt;/a&gt;, the search path can be manipulated using the &lt;a href=&quot;#zoneinfo.reset_tzpath&quot;&gt;&lt;code&gt;reset_tzpath()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">在&lt;a href=&quot;#zoneinfo-data-runtime-config&quot;&gt;运行时&lt;/a&gt;，可以使用&lt;a href=&quot;#zoneinfo.reset_tzpath&quot;&gt; &lt;code&gt;reset_tzpath()&lt;/code&gt; &lt;/a&gt;函数来操纵搜索路径。</target>
        </trans-unit>
        <trans-unit id="03e876b72734198f8efacaee16cfa51b70b11561" translate="yes" xml:space="preserve">
          <source>At least one of the following options must be specified when invoking &lt;a href=&quot;#module-trace&quot;&gt;&lt;code&gt;trace&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#cmdoption-trace-l&quot;&gt;&lt;code&gt;--listfuncs&lt;/code&gt;&lt;/a&gt; option is mutually exclusive with the &lt;a href=&quot;#cmdoption-trace-t&quot;&gt;&lt;code&gt;--trace&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#cmdoption-trace-c&quot;&gt;&lt;code&gt;--count&lt;/code&gt;&lt;/a&gt; options. When &lt;a href=&quot;#cmdoption-trace-l&quot;&gt;&lt;code&gt;--listfuncs&lt;/code&gt;&lt;/a&gt; is provided, neither &lt;a href=&quot;#cmdoption-trace-c&quot;&gt;&lt;code&gt;--count&lt;/code&gt;&lt;/a&gt; nor &lt;a href=&quot;#cmdoption-trace-t&quot;&gt;&lt;code&gt;--trace&lt;/code&gt;&lt;/a&gt; are accepted, and vice versa.</source>
          <target state="translated">调用&lt;a href=&quot;#module-trace&quot;&gt; &lt;code&gt;trace&lt;/code&gt; &lt;/a&gt;时，必须至少指定以下选项之一。该&lt;a href=&quot;#cmdoption-trace-l&quot;&gt; &lt;code&gt;--listfuncs&lt;/code&gt; &lt;/a&gt;选项与互斥&lt;a href=&quot;#cmdoption-trace-t&quot;&gt; &lt;code&gt;--trace&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#cmdoption-trace-c&quot;&gt; &lt;code&gt;--count&lt;/code&gt; &lt;/a&gt;选项。当&lt;a href=&quot;#cmdoption-trace-l&quot;&gt; &lt;code&gt;--listfuncs&lt;/code&gt; &lt;/a&gt;设置，既不&lt;a href=&quot;#cmdoption-trace-c&quot;&gt; &lt;code&gt;--count&lt;/code&gt; &lt;/a&gt;也不&lt;a href=&quot;#cmdoption-trace-t&quot;&gt; &lt;code&gt;--trace&lt;/code&gt; &lt;/a&gt;被接受，并且反之亦然。</target>
        </trans-unit>
        <trans-unit id="005c763745673715312660addc3a03a01b8c8624" translate="yes" xml:space="preserve">
          <source>At normal program termination (for instance, if &lt;a href=&quot;sys#sys.exit&quot;&gt;&lt;code&gt;sys.exit()&lt;/code&gt;&lt;/a&gt; is called or the main module&amp;rsquo;s execution completes), all functions registered are called in last in, first out order. The assumption is that lower level modules will normally be imported before higher level modules and thus must be cleaned up later.</source>
          <target state="translated">在正常程序终止时（例如，如果&lt;a href=&quot;sys#sys.exit&quot;&gt; &lt;code&gt;sys.exit()&lt;/code&gt; &lt;/a&gt;或完成主模块的执行），则将以后进先出的顺序调用所有注册的函数。假设通常将在较低级别的模块之前导入较低级别的模块，因此必须稍后对其进行清理。</target>
        </trans-unit>
        <trans-unit id="4212a7fb6907badcb796ef9f8a9820ede2ad461f" translate="yes" xml:space="preserve">
          <source>At object creation time, using keyword arguments</source>
          <target state="translated">在创建对象时,使用关键字参数</target>
        </trans-unit>
        <trans-unit id="b9dffbcc195db46cf07fd560bf9cf819a6052dfc" translate="yes" xml:space="preserve">
          <source>At runtime, &lt;code&gt;isinstance(x, T)&lt;/code&gt; will raise &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In general, &lt;a href=&quot;functions#isinstance&quot;&gt;&lt;code&gt;isinstance()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;functions#issubclass&quot;&gt;&lt;code&gt;issubclass()&lt;/code&gt;&lt;/a&gt; should not be used with types.</source>
          <target state="translated">在运行时， &lt;code&gt;isinstance(x, T)&lt;/code&gt; 将引发&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;。通常，&lt;a href=&quot;functions#isinstance&quot;&gt; &lt;code&gt;isinstance()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;functions#issubclass&quot;&gt; &lt;code&gt;issubclass()&lt;/code&gt; &lt;/a&gt;不应与类型一起使用。</target>
        </trans-unit>
        <trans-unit id="86ca4076074ecbdd662b657c7418c10266e2fae5" translate="yes" xml:space="preserve">
          <source>At the end of the module, there is a test section that contains a more extensive example of usage.</source>
          <target state="translated">在该模块的最后,有一个测试部分,其中包含了一个更广泛的使用实例。</target>
        </trans-unit>
        <trans-unit id="73eae57537773d1ac17b68b2f125d8fe89f21f11" translate="yes" xml:space="preserve">
          <source>At the highest level, the transport is concerned with &lt;em&gt;how&lt;/em&gt; bytes are transmitted, while the protocol determines &lt;em&gt;which&lt;/em&gt; bytes to transmit (and to some extent when).</source>
          <target state="translated">在最高级别，传输涉及&lt;em&gt;如何&lt;/em&gt;字节被传输，而协议确定&lt;em&gt;哪个&lt;/em&gt;字节以发射（和至当在一定程度上）。</target>
        </trans-unit>
        <trans-unit id="7b93ef8974634ba1eeddb05cd6f4fb7beae6e9cc" translate="yes" xml:space="preserve">
          <source>At the moment, there is only one possible parameter:</source>
          <target state="translated">目前,只有一个可能的参数。</target>
        </trans-unit>
        <trans-unit id="8578bb4b0c201f731d20286e27c500875b32217c" translate="yes" xml:space="preserve">
          <source>At the operating system level, sockets in &lt;em&gt;timeout mode&lt;/em&gt; are internally set in non-blocking mode. Also, the blocking and timeout modes are shared between file descriptors and socket objects that refer to the same network endpoint. This implementation detail can have visible consequences if e.g. you decide to use the &lt;a href=&quot;#socket.socket.fileno&quot;&gt;&lt;code&gt;fileno()&lt;/code&gt;&lt;/a&gt; of a socket.</source>
          <target state="translated">在操作系统级别，&lt;em&gt;超时模式下的&lt;/em&gt;套接字在内部设置为非阻塞模式。同样，阻塞和超时模式在引用相同网络端点的文件描述符和套接字对象之间共享。如果例如您决定使用套接字的&lt;a href=&quot;#socket.socket.fileno&quot;&gt; &lt;code&gt;fileno()&lt;/code&gt; &lt;/a&gt;，则此实现细节可能会产生明显的后果。</target>
        </trans-unit>
        <trans-unit id="de79fa22e86445c74c1c60a24771c2ff1fcf7262" translate="yes" xml:space="preserve">
          <source>At the point where the generator yields, the block nested in the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement is executed. The generator is then resumed after the block is exited. If an unhandled exception occurs in the block, it is reraised inside the generator at the point where the yield occurred. Thus, you can use a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt;&amp;hellip;&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#except&quot;&gt;&lt;code&gt;except&lt;/code&gt;&lt;/a&gt;&amp;hellip;&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; statement to trap the error (if any), or ensure that some cleanup takes place. If an exception is trapped merely in order to log it or to perform some action (rather than to suppress it entirely), the generator must reraise that exception. Otherwise the generator context manager will indicate to the &lt;code&gt;with&lt;/code&gt; statement that the exception has been handled, and execution will resume with the statement immediately following the &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="translated">在生成器屈服的时刻，执行嵌套在&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;语句中的块。退出该块后，将恢复生成器。如果在块中发生未处理的异常，则会在生成器内部产生收益的位置将其重新引发。因此，您可以使用&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt; &lt;code&gt;try&lt;/code&gt; &lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#except&quot;&gt; &lt;code&gt;except&lt;/code&gt; &lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt; &lt;code&gt;finally&lt;/code&gt; &lt;/a&gt;语句来捕获错误（如果有），或确保进行一些清理。如果仅为了记录日志或执行某些操作（而不是完全抑制它）而捕获了异常，则生成器必须重新引发该异常。否则，发电机上下文管理器将指示 &lt;code&gt;with&lt;/code&gt; 该异常被处理语句，执行将与该语句紧随恢复 &lt;code&gt;with&lt;/code&gt; 声明。</target>
        </trans-unit>
        <trans-unit id="4680ce2767581e01529e2346cba283fd88f47fee" translate="yes" xml:space="preserve">
          <source>At the point where the generator yields, the block nested in the &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement is executed. The generator is then resumed after the block is exited. If an unhandled exception occurs in the block, it is reraised inside the generator at the point where the yield occurred. Thus, you can use a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt;&amp;hellip;&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#except&quot;&gt;&lt;code&gt;except&lt;/code&gt;&lt;/a&gt;&amp;hellip;&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; statement to trap the error (if any), or ensure that some cleanup takes place. If an exception is trapped merely in order to log it or to perform some action (rather than to suppress it entirely), the generator must reraise that exception. Otherwise the generator context manager will indicate to the &lt;code&gt;with&lt;/code&gt; statement that the exception has been handled, and execution will resume with the statement immediately following the &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="translated">在生成器屈服的时刻，执行嵌套在&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;语句中的块。退出该块后，将恢复生成器。如果在块中发生未处理的异常，则会在生成器内部产生收益的位置将其重新引发。因此，您可以使用&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#try&quot;&gt; &lt;code&gt;try&lt;/code&gt; &lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#except&quot;&gt; &lt;code&gt;except&lt;/code&gt; &lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#finally&quot;&gt; &lt;code&gt;finally&lt;/code&gt; &lt;/a&gt;语句来捕获错误（如果有），或确保进行一些清理。如果仅出于记录日志或执行某些操作（而不是完全抑制它）的目的捕获了异常，则生成器必须重新引发该异常。否则，发电机上下文管理器将指示 &lt;code&gt;with&lt;/code&gt; 该异常被处理语句，执行将与该语句紧随恢复 &lt;code&gt;with&lt;/code&gt; 声明。</target>
        </trans-unit>
        <trans-unit id="2f936198137a924a78693853317db45f419b314f" translate="yes" xml:space="preserve">
          <source>At the time of this writing there are docstring dictionaries in German and in Italian. (Requests please to &lt;a href=&quot;mailto:glingl%40aon.at&quot;&gt;glingl@aon.at&lt;/a&gt;.)</source>
          <target state="translated">在撰写本文时，有德文和意大利文的文档字符串词典。（请发送&lt;a href=&quot;mailto:glingl%40aon.at&quot;&gt;邮件&lt;/a&gt;至glingl@aon.at。）</target>
        </trans-unit>
        <trans-unit id="bd54bc6b94be573dbc110a2ed3dd2570d7474e92" translate="yes" xml:space="preserve">
          <source>At the top of the I/O hierarchy is the abstract base class &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt;. It defines the basic interface to a stream. Note, however, that there is no separation between reading and writing to streams; implementations are allowed to raise &lt;a href=&quot;#io.UnsupportedOperation&quot;&gt;&lt;code&gt;UnsupportedOperation&lt;/code&gt;&lt;/a&gt; if they do not support a given operation.</source>
          <target state="translated">I / O层次结构的顶部是抽象基类&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; &lt;/a&gt;。它定义了流的基本接口。但是请注意，对流的读取和写入之间没有分隔。如果实现不支持给定的操作，则允许它们提高&lt;a href=&quot;#io.UnsupportedOperation&quot;&gt; &lt;code&gt;UnsupportedOperation&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="546ddf033018c3a7e711de15f41a05346f8ae2b5" translate="yes" xml:space="preserve">
          <source>At the top of the stack are either &lt;code&gt;NULL&lt;/code&gt; (pushed by &lt;a href=&quot;#opcode-BEGIN_FINALLY&quot;&gt;&lt;code&gt;BEGIN_FINALLY&lt;/code&gt;&lt;/a&gt;) or 6 values pushed if an exception has been raised in the with block. Below is the context manager&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aexit__&quot;&gt;&lt;code&gt;__aexit__()&lt;/code&gt;&lt;/a&gt; bound method.</source>
          <target state="translated">如果在with块中引发了异常，则堆栈的顶部&lt;a href=&quot;#opcode-BEGIN_FINALLY&quot;&gt; &lt;code&gt;BEGIN_FINALLY&lt;/code&gt; &lt;/a&gt; &lt;code&gt;NULL&lt;/code&gt; （由BEGIN_FINALLY推送）或6个值。下面是上下文管理器的&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aexit__&quot;&gt; &lt;code&gt;__aexit__()&lt;/code&gt; &lt;/a&gt;绑定方法。</target>
        </trans-unit>
        <trans-unit id="3a9ec1befa4a5306b468dc7e8631beee73bd6981" translate="yes" xml:space="preserve">
          <source>At this point, you can remove the application name from the registry as a source of event log entries. However, if you do this, you will not be able to see the events as you intended in the Event Log Viewer - it needs to be able to access the registry to get the .dll name. The current version does not do this.</source>
          <target state="translated">此时,您可以从注册表中删除应用程序名称作为事件日志条目的来源。但是,如果您这样做,您将无法按照您的意图在事件日志查看器中查看事件-它需要能够访问注册表以获得.dll名称。目前的版本无法做到这一点。</target>
        </trans-unit>
        <trans-unit id="77945ec79bafc1b696c30defadbc717e1a79af37" translate="yes" xml:space="preserve">
          <source>At unpickling time, some methods like &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt;&lt;code&gt;__getattr__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattribute__&quot;&gt;&lt;code&gt;__getattribute__()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__setattr__&quot;&gt;&lt;code&gt;__setattr__()&lt;/code&gt;&lt;/a&gt; may be called upon the instance. In case those methods rely on some internal invariant being true, the type should implement &lt;a href=&quot;#object.__getnewargs__&quot;&gt;&lt;code&gt;__getnewargs__()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#object.__getnewargs_ex__&quot;&gt;&lt;code&gt;__getnewargs_ex__()&lt;/code&gt;&lt;/a&gt; to establish such an invariant; otherwise, neither &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt; nor &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="translated">在启动时，可能会在实例上调用&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt; &lt;code&gt;__getattr__()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattribute__&quot;&gt; &lt;code&gt;__getattribute__()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__setattr__&quot;&gt; &lt;code&gt;__setattr__()&lt;/code&gt; &lt;/a&gt;或__setattr __（）之类的方法。如果这些方法依赖于某个内部不变式为真，则该类型应实现&lt;a href=&quot;#object.__getnewargs__&quot;&gt; &lt;code&gt;__getnewargs__()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#object.__getnewargs_ex__&quot;&gt; &lt;code&gt;__getnewargs_ex__()&lt;/code&gt; &lt;/a&gt;来建立此类不变式；否则，将不会&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="318d3dfbb35956ce0abcc8243ea0ae78bda19078" translate="yes" xml:space="preserve">
          <source>At unpickling time, some methods like &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getattr__&quot;&gt;&lt;code&gt;__getattr__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getattribute__&quot;&gt;&lt;code&gt;__getattribute__()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__setattr__&quot;&gt;&lt;code&gt;__setattr__()&lt;/code&gt;&lt;/a&gt; may be called upon the instance. In case those methods rely on some internal invariant being true, the type should implement &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt; to establish such an invariant, as &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; is not called when unpickling an instance.</source>
          <target state="translated">在启动时，可能会在实例上调用&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getattr__&quot;&gt; &lt;code&gt;__getattr__()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getattribute__&quot;&gt; &lt;code&gt;__getattribute__()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__setattr__&quot;&gt; &lt;code&gt;__setattr__()&lt;/code&gt; &lt;/a&gt;或__setattr __（）之类的方法。如果这些方法依赖于某些内部不变式为真，则该类型应实现&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt;来建立这样的不变式，因为取消实例化时不调用&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="eb9837a1d06939ed7ea8bb756a82ada0870d4850" translate="yes" xml:space="preserve">
          <source>Attach a mock as an attribute of this one, replacing its name and parent. Calls to the attached mock will be recorded in the &lt;a href=&quot;#unittest.mock.Mock.method_calls&quot;&gt;&lt;code&gt;method_calls&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.mock.Mock.mock_calls&quot;&gt;&lt;code&gt;mock_calls&lt;/code&gt;&lt;/a&gt; attributes of this one.</source>
          <target state="translated">附加一个模拟作为此模拟的属性，替换其名称和父代。对附加模拟的调用将记录在该模拟的&lt;a href=&quot;#unittest.mock.Mock.method_calls&quot;&gt; &lt;code&gt;method_calls&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#unittest.mock.Mock.mock_calls&quot;&gt; &lt;code&gt;mock_calls&lt;/code&gt; &lt;/a&gt;属性中。</target>
        </trans-unit>
        <trans-unit id="b00d5eac33db6facb2e7b7a2c2ed13c7c2c1b486" translate="yes" xml:space="preserve">
          <source>Attach the watcher to an event loop.</source>
          <target state="translated">将监视者连接到事件循环。</target>
        </trans-unit>
        <trans-unit id="8968365a321bb5b470f5dd2910dc56d308443a45" translate="yes" xml:space="preserve">
          <source>Attaches the callable &lt;em&gt;fn&lt;/em&gt; to the future. &lt;em&gt;fn&lt;/em&gt; will be called, with the future as its only argument, when the future is cancelled or finishes running.</source>
          <target state="translated">将可调用的&lt;em&gt;fn&lt;/em&gt;附加到将来。当取消未来或完成运行时，将以&lt;em&gt;fn&lt;/em&gt;作为唯一参数来调用&lt;em&gt;fn&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2de4844092811a250638c499c463f6e1183dadac" translate="yes" xml:space="preserve">
          <source>Attaching Mocks as Attributes</source>
          <target state="translated">将Mocks附加为属性</target>
        </trans-unit>
        <trans-unit id="05d7b70d5d34350cfab01a5105b6cadb19208146" translate="yes" xml:space="preserve">
          <source>Attempt to cancel the call. If the call is currently being executed or finished running and cannot be cancelled then the method will return &lt;code&gt;False&lt;/code&gt;, otherwise the call will be cancelled and the method will return &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">尝试取消呼叫。如果该调用当前正在执行或已完成运行，并且无法取消，则该方法将返回 &lt;code&gt;False&lt;/code&gt; ，否则该调用将被取消并且该方法将返回 &lt;code&gt;True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a94ab803dbe317473c0a7010ac4289475d2e741b" translate="yes" xml:space="preserve">
          <source>Attempt to find the loader to handle &lt;em&gt;fullname&lt;/em&gt; within &lt;a href=&quot;#importlib.machinery.FileFinder.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">试图找到加载器手柄&lt;em&gt;全名&lt;/em&gt;中&lt;a href=&quot;#importlib.machinery.FileFinder.path&quot;&gt; &lt;code&gt;path&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="87e96da2c623edd35028d89720f05572c7ca81a6" translate="yes" xml:space="preserve">
          <source>Attempt to find the spec to handle &lt;em&gt;fullname&lt;/em&gt; within &lt;a href=&quot;#importlib.machinery.FileFinder.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">试图找到该规范来处理&lt;em&gt;全名&lt;/em&gt;中&lt;a href=&quot;#importlib.machinery.FileFinder.path&quot;&gt; &lt;code&gt;path&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d2ad8c10f0d76337b6eb760519bcf124aa2fa5b5" translate="yes" xml:space="preserve">
          <source>Attempt to read and parse an iterable of filenames, returning a list of filenames which were successfully parsed.</source>
          <target state="translated">试图读取和解析文件名的迭代,返回一个成功解析的文件名列表。</target>
        </trans-unit>
        <trans-unit id="cec2196c119a8750bee0a499c586caefe53531d9" translate="yes" xml:space="preserve">
          <source>Attempt to set up a connection to the listener which is using address &lt;em&gt;address&lt;/em&gt;, returning a &lt;a href=&quot;#multiprocessing.connection.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">尝试建立到使用地址&lt;em&gt;address&lt;/em&gt;的侦听器的&lt;a href=&quot;#multiprocessing.connection.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt;，并返回Connection。</target>
        </trans-unit>
        <trans-unit id="bcfcda249f8236d3c4a374364c689dafac6d094d" translate="yes" xml:space="preserve">
          <source>Attempting to create a member with the same name as an already defined attribute (another member, a method, etc.) or attempting to create an attribute with the same name as a member is not allowed.</source>
          <target state="translated">试图创建一个与已经定义的属性(另一个成员、方法等)同名的成员,或者试图创建一个与成员同名的属性是不允许的。</target>
        </trans-unit>
        <trans-unit id="582daf17ef09c37849d7cd683a4bf531834c0538" translate="yes" xml:space="preserve">
          <source>Attempting to decompress data after the end of stream is reached raises an &lt;code&gt;EOFError&lt;/code&gt;. Any data found after the end of the stream is ignored and saved in the &lt;a href=&quot;#bz2.BZ2Decompressor.unused_data&quot;&gt;&lt;code&gt;unused_data&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">在达到流的末尾后尝试解压缩数据会 &lt;code&gt;EOFError&lt;/code&gt; 。流结束后找到的所有数据将被忽略，并保存在&lt;a href=&quot;#bz2.BZ2Decompressor.unused_data&quot;&gt; &lt;code&gt;unused_data&lt;/code&gt; &lt;/a&gt;属性。</target>
        </trans-unit>
        <trans-unit id="0b665a0261d8155c9a7fef41d1c6d0fafe94af38" translate="yes" xml:space="preserve">
          <source>Attempting to decompress data after the end of stream is reached raises an &lt;code&gt;EOFError&lt;/code&gt;. Any data found after the end of the stream is ignored and saved in the &lt;a href=&quot;#lzma.LZMADecompressor.unused_data&quot;&gt;&lt;code&gt;unused_data&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">在达到流的末尾后尝试解压缩数据会 &lt;code&gt;EOFError&lt;/code&gt; 。流结束后找到的所有数据将被忽略，并保存在&lt;a href=&quot;#lzma.LZMADecompressor.unused_data&quot;&gt; &lt;code&gt;unused_data&lt;/code&gt; &lt;/a&gt;属性。</target>
        </trans-unit>
        <trans-unit id="e681818ae46e966f6a5519bb892f806874ff3de9" translate="yes" xml:space="preserve">
          <source>Attempting to hash an immutable sequence that contains unhashable values will result in &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">尝试对包含不可哈希值的不可变序列进行哈希处理将导致&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4315a818f5b166adfafe5e6b5bedd0f534c2d06f" translate="yes" xml:space="preserve">
          <source>Attempting to link in too many shared libraries</source>
          <target state="translated">试图在过多的共享库中进行链接。</target>
        </trans-unit>
        <trans-unit id="5c1642b2606e4707280aebbdbf990340b047aa2c" translate="yes" xml:space="preserve">
          <source>Attempting to mix &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; data with &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt; in a single function call will result in a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; being raised, while attempting to pass in non-ASCII byte values will trigger &lt;a href=&quot;exceptions#UnicodeDecodeError&quot;&gt;&lt;code&gt;UnicodeDecodeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">尝试在单个函数调用中将&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;数据与&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;或字节&lt;a href=&quot;stdtypes#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; &lt;/a&gt;混合，将&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;，而尝试传递非ASCII字节值将触发&lt;a href=&quot;exceptions#UnicodeDecodeError&quot;&gt; &lt;code&gt;UnicodeDecodeError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f6184f80184272af2a3f2d6c0b9b164e1af53cf1" translate="yes" xml:space="preserve">
          <source>Attempting to pass an invalid interval timer will cause an &lt;a href=&quot;#signal.ItimerError&quot;&gt;&lt;code&gt;ItimerError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">尝试通过无效的间隔计时器将导致&lt;a href=&quot;#signal.ItimerError&quot;&gt; &lt;code&gt;ItimerError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6e116626d01e2573360701151c730543d251d466" translate="yes" xml:space="preserve">
          <source>Attempting to remove a file descriptor that was never registered causes a &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; exception to be raised.</source>
          <target state="translated">尝试删除从未注册的文件描述符会引发&lt;a href=&quot;exceptions#KeyError&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;异常。</target>
        </trans-unit>
        <trans-unit id="3488e5797ae34b2740e12aca784ebb804aa2a11a" translate="yes" xml:space="preserve">
          <source>Attempting to remove a file descriptor that was never registered is safely ignored.</source>
          <target state="translated">试图删除一个从未注册过的文件描述符会被安全忽略。</target>
        </trans-unit>
        <trans-unit id="413a8b0ee7fbafdd8b138da7cc28cc290a17232c" translate="yes" xml:space="preserve">
          <source>Attempts to parse a date according to the rules in &lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt;. however, some mailers don&amp;rsquo;t follow that format as specified, so &lt;a href=&quot;#email.utils.parsedate&quot;&gt;&lt;code&gt;parsedate()&lt;/code&gt;&lt;/a&gt; tries to guess correctly in such cases. &lt;em&gt;date&lt;/em&gt; is a string containing an &lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt; date, such as &lt;code&gt;&quot;Mon, 20 Nov 1995 19:12:08 -0500&quot;&lt;/code&gt;. If it succeeds in parsing the date, &lt;a href=&quot;#email.utils.parsedate&quot;&gt;&lt;code&gt;parsedate()&lt;/code&gt;&lt;/a&gt; returns a 9-tuple that can be passed directly to &lt;a href=&quot;time#time.mktime&quot;&gt;&lt;code&gt;time.mktime()&lt;/code&gt;&lt;/a&gt;; otherwise &lt;code&gt;None&lt;/code&gt; will be returned. Note that indexes 6, 7, and 8 of the result tuple are not usable.</source>
          <target state="translated">尝试根据&lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 2822中&lt;/strong&gt;&lt;/a&gt;的规则解析日期。但是，某些邮件程序未遵循指定的格式，因此&lt;a href=&quot;#email.utils.parsedate&quot;&gt; &lt;code&gt;parsedate()&lt;/code&gt; 会&lt;/a&gt;在这种情况下尝试正确猜测。&lt;em&gt;date&lt;/em&gt;是包含&lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt;日期的字符串，例如 &lt;code&gt;&quot;Mon, 20 Nov 1995 19:12:08 -0500&quot;&lt;/code&gt; 。如果成功解析日期，则&lt;a href=&quot;#email.utils.parsedate&quot;&gt; &lt;code&gt;parsedate()&lt;/code&gt; &lt;/a&gt;返回一个9元组，可以直接将其传递给&lt;a href=&quot;time#time.mktime&quot;&gt; &lt;code&gt;time.mktime()&lt;/code&gt; &lt;/a&gt; ;否则 &lt;code&gt;None&lt;/code&gt; 将被退回。请注意，结果元组的索引6、7和8不可用。</target>
        </trans-unit>
        <trans-unit id="8f8f0a192956c468d1f05450c3d0f99e1ed3eb87" translate="yes" xml:space="preserve">
          <source>Attempts to pickle unpicklable objects will raise the &lt;a href=&quot;#pickle.PicklingError&quot;&gt;&lt;code&gt;PicklingError&lt;/code&gt;&lt;/a&gt; exception; when this happens, an unspecified number of bytes may have already been written to the underlying file. Trying to pickle a highly recursive data structure may exceed the maximum recursion depth, a &lt;a href=&quot;exceptions#RecursionError&quot;&gt;&lt;code&gt;RecursionError&lt;/code&gt;&lt;/a&gt; will be raised in this case. You can carefully raise this limit with &lt;a href=&quot;sys#sys.setrecursionlimit&quot;&gt;&lt;code&gt;sys.setrecursionlimit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">尝试腌制unpicklable对象将提高&lt;a href=&quot;#pickle.PicklingError&quot;&gt; &lt;code&gt;PicklingError&lt;/code&gt; &lt;/a&gt;除外; 发生这种情况时，未指定的字节数可能已被写入基础文件。尝试腌制高度递归的数据结构可能会超出最大递归深度，在这种情况下将引发&lt;a href=&quot;exceptions#RecursionError&quot;&gt; &lt;code&gt;RecursionError&lt;/code&gt; &lt;/a&gt;。您可以使用&lt;a href=&quot;sys#sys.setrecursionlimit&quot;&gt; &lt;code&gt;sys.setrecursionlimit()&lt;/code&gt; &lt;/a&gt;小心地提高此限制。</target>
        </trans-unit>
        <trans-unit id="b271428a65f77bc781cd47b969a5bc6e419af63a" translate="yes" xml:space="preserve">
          <source>Attention: &lt;em&gt;speed&lt;/em&gt; = 0 means that &lt;em&gt;no&lt;/em&gt; animation takes place. forward/back makes turtle jump and likewise left/right make the turtle turn instantly.</source>
          <target state="translated">注意：&lt;em&gt;speed&lt;/em&gt; = 0表示&lt;em&gt;没有&lt;/em&gt;动画发生。前进/后退使乌龟跳跃，同样，左/右使乌龟立即转弯。</target>
        </trans-unit>
        <trans-unit id="4704ccf5d9826a4b8c3ff2f628be8f9ea11d5c58" translate="yes" xml:space="preserve">
          <source>Attr Objects</source>
          <target state="translated">Attr Objects</target>
        </trans-unit>
        <trans-unit id="a086d942884a301b827479029ba19c2746237425" translate="yes" xml:space="preserve">
          <source>Attribute</source>
          <target state="translated">Attribute</target>
        </trans-unit>
        <trans-unit id="f6a291a4083dcfd41b19b0b5972f9a151abebd51" translate="yes" xml:space="preserve">
          <source>Attribute access, e.g. &lt;code&gt;d.keys&lt;/code&gt;. &lt;code&gt;value&lt;/code&gt; is a node, typically a &lt;a href=&quot;#ast.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;attr&lt;/code&gt; is a bare string giving the name of the attribute, and &lt;code&gt;ctx&lt;/code&gt; is &lt;a href=&quot;#ast.Load&quot;&gt;&lt;code&gt;Load&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ast.Store&quot;&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ast.Del&quot;&gt;&lt;code&gt;Del&lt;/code&gt;&lt;/a&gt; according to how the attribute is acted on.</source>
          <target state="translated">属性访问，例如 &lt;code&gt;d.keys&lt;/code&gt; 。 &lt;code&gt;value&lt;/code&gt; 是一个节点，通常是&lt;a href=&quot;#ast.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;attr&lt;/code&gt; 是给出属性名称的裸字符串，而 &lt;code&gt;ctx&lt;/code&gt; 根据属性的作用方式为&lt;a href=&quot;#ast.Load&quot;&gt; &lt;code&gt;Load&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#ast.Store&quot;&gt; &lt;code&gt;Store&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#ast.Del&quot;&gt; &lt;code&gt;Del&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fd11efd3b2bb215beb5fe4deac5b15c31b49871e" translate="yes" xml:space="preserve">
          <source>Attribute name</source>
          <target state="translated">属性名称</target>
        </trans-unit>
        <trans-unit id="44b0ecb440f33452e3b57f0fc1355b5b83b53b65" translate="yes" xml:space="preserve">
          <source>Attribute value nodes on element nodes.</source>
          <target state="translated">元素节点上的属性值节点。</target>
        </trans-unit>
        <trans-unit id="e30390c6b25519953f15954ce4132cba67fdd587" translate="yes" xml:space="preserve">
          <source>AttributeError</source>
          <target state="translated">AttributeError</target>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="79c3aeb6146abe2231f5b89a475ab249029d088e" translate="yes" xml:space="preserve">
          <source>Attributes and methods for customizing the WSGI environment:</source>
          <target state="translated">自定义WSGI环境的属性和方法。</target>
        </trans-unit>
        <trans-unit id="e9b663bf28955d0808f846d124c86b6d0183b33f" translate="yes" xml:space="preserve">
          <source>Attributes and methods on a &lt;code&gt;os.DirEntry&lt;/code&gt; instance are as follows:</source>
          <target state="translated">&lt;code&gt;os.DirEntry&lt;/code&gt; 实例上的属性和方法如下：</target>
        </trans-unit>
        <trans-unit id="73692911ebd863a9a87e4961881d432666982309" translate="yes" xml:space="preserve">
          <source>Attributes are created on demand when you access them by name. Accessing the same attribute will always return the same object. The objects returned have a sensible repr so that test failure messages are readable.</source>
          <target state="translated">当你通过名称访问属性时,属性是按需创建的。访问同一个属性总是会返回同一个对象。返回的对象有一个合理的repr,所以测试失败的消息是可读的。</target>
        </trans-unit>
        <trans-unit id="101df875704c7152821017f27b87995406582c71" translate="yes" xml:space="preserve">
          <source>Attributes plus return values and side effects can be set on child mocks using standard dot notation and unpacking a dictionary in the method call:</source>
          <target state="translated">可以使用标准的点符号和在方法调用中解包一个字典,在子mock上设置属性加返回值和副作用。</target>
        </trans-unit>
        <trans-unit id="6c886066a950b07e9817b943cf62493312e7bdd7" translate="yes" xml:space="preserve">
          <source>Attributes set when an exception is catched:</source>
          <target state="translated">捕获异常时设置的属性。</target>
        </trans-unit>
        <trans-unit id="b8087185e5ee37cef4c337de5697d35d75d909fd" translate="yes" xml:space="preserve">
          <source>Attributes:</source>
          <target state="translated">Attributes:</target>
        </trans-unit>
        <trans-unit id="5c7c68f4b64e821cb3bb3f3f760a898c036a3f74" translate="yes" xml:space="preserve">
          <source>Audio Device Objects</source>
          <target state="translated">音频设备对象</target>
        </trans-unit>
        <trans-unit id="16176810d7decb98eb62c4c87a10dd432035c88f" translate="yes" xml:space="preserve">
          <source>Audio device objects also support several read-only attributes:</source>
          <target state="translated">音频设备对象还支持几个只读属性。</target>
        </trans-unit>
        <trans-unit id="6e947bb134465c1c6a6e453065d0c48e8ca8c64a" translate="yes" xml:space="preserve">
          <source>Audio files have a number of parameters that describe the audio data. The sampling rate or frame rate is the number of times per second the sound is sampled. The number of channels indicate if the audio is mono, stereo, or quadro. Each frame consists of one sample per channel. The sample size is the size in bytes of each sample. Thus a frame consists of &lt;code&gt;nchannels * samplesize&lt;/code&gt; bytes, and a second&amp;rsquo;s worth of audio consists of &lt;code&gt;nchannels * samplesize * framerate&lt;/code&gt; bytes.</source>
          <target state="translated">音频文件具有许多描述音频数据的参数。采样率或帧率是每秒采样声音的次数。通道数指示音频是单声道，立体声还是四声道。每个帧每个通道包含一个样本。样本大小是每个样本的大小（以字节为单位）。因此，一帧包含n个 &lt;code&gt;nchannels * samplesize&lt;/code&gt; 字节，而一秒钟的音频包含n个 &lt;code&gt;nchannels * samplesize * framerate&lt;/code&gt; 字节。</target>
        </trans-unit>
        <trans-unit id="ff3e0d680200101f6f9f4009685f904d7888a4b5" translate="yes" xml:space="preserve">
          <source>Audit event</source>
          <target state="translated">审计事件</target>
        </trans-unit>
        <trans-unit id="14c2893dc5aedb9cac7688ec4357a58cad8f48e8" translate="yes" xml:space="preserve">
          <source>Audit events table</source>
          <target state="translated">审计事件表</target>
        </trans-unit>
        <trans-unit id="929db3b0bd47cefe7a1842f9fc90bc8e40629a8d" translate="yes" xml:space="preserve">
          <source>Augmented assignment, such as &lt;code&gt;a += 1&lt;/code&gt;. In the following example, &lt;code&gt;target&lt;/code&gt; is a &lt;a href=&quot;#ast.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt; node for &lt;code&gt;x&lt;/code&gt; (with the &lt;a href=&quot;#ast.Store&quot;&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/a&gt; context), &lt;code&gt;op&lt;/code&gt; is &lt;a href=&quot;#ast.Add&quot;&gt;&lt;code&gt;Add&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;value&lt;/code&gt; is a &lt;a href=&quot;#ast.Constant&quot;&gt;&lt;code&gt;Constant&lt;/code&gt;&lt;/a&gt; with value for 1.</source>
          <target state="translated">增强分配，例如 &lt;code&gt;a += 1&lt;/code&gt; 。在以下示例中， &lt;code&gt;target&lt;/code&gt; 是 &lt;code&gt;x&lt;/code&gt; 的&lt;a href=&quot;#ast.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;节点（具有&lt;a href=&quot;#ast.Store&quot;&gt; &lt;code&gt;Store&lt;/code&gt; &lt;/a&gt;上下文）， &lt;code&gt;op&lt;/code&gt; 是&lt;a href=&quot;#ast.Add&quot;&gt; &lt;code&gt;Add&lt;/code&gt; &lt;/a&gt;， &lt;code&gt;value&lt;/code&gt; 是一个&lt;a href=&quot;#ast.Constant&quot;&gt; &lt;code&gt;Constant&lt;/code&gt; &lt;/a&gt;，其值为1。</target>
        </trans-unit>
        <trans-unit id="6922a9610304991071bd728c3a287a51b532d68c" translate="yes" xml:space="preserve">
          <source>Authenticate command &amp;mdash; requires response processing.</source>
          <target state="translated">验证命令-需要响应处理。</target>
        </trans-unit>
        <trans-unit id="8ccb8a1076f255643cd045f9684ad5f445deae31" translate="yes" xml:space="preserve">
          <source>Authentication is supported, using the regular SMTP mechanism. When using a Unix socket, LMTP generally don&amp;rsquo;t support or require any authentication, but your mileage might vary.</source>
          <target state="translated">使用常规SMTP机制支持身份验证。使用Unix套接字时，LMTP通常不支持或不需要任何身份验证，但是您的里程可能会有所不同。</target>
        </trans-unit>
        <trans-unit id="34762561a060645d5e694a00f5c15f22688272cc" translate="yes" xml:space="preserve">
          <source>Authentication keys</source>
          <target state="translated">认证密钥</target>
        </trans-unit>
        <trans-unit id="b6d03350228ac0bf7f8b015328effcfd7281fdb3" translate="yes" xml:space="preserve">
          <source>Auto-negotiate the highest protocol version like &lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt;&lt;code&gt;PROTOCOL_TLS&lt;/code&gt;&lt;/a&gt;, but only support client-side &lt;a href=&quot;#ssl.SSLSocket&quot;&gt;&lt;code&gt;SSLSocket&lt;/code&gt;&lt;/a&gt; connections. The protocol enables &lt;a href=&quot;#ssl.CERT_REQUIRED&quot;&gt;&lt;code&gt;CERT_REQUIRED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ssl.SSLContext.check_hostname&quot;&gt;&lt;code&gt;check_hostname&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="translated">自动协商最高协议版本，例如&lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt; &lt;code&gt;PROTOCOL_TLS&lt;/code&gt; &lt;/a&gt;，但仅支持客户端&lt;a href=&quot;#ssl.SSLSocket&quot;&gt; &lt;code&gt;SSLSocket&lt;/code&gt; &lt;/a&gt;连接。该协议默认情况下启用&lt;a href=&quot;#ssl.CERT_REQUIRED&quot;&gt; &lt;code&gt;CERT_REQUIRED&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#ssl.SSLContext.check_hostname&quot;&gt; &lt;code&gt;check_hostname&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b1b09a77c9093ba1c2df03bc5d6beeb4959883e7" translate="yes" xml:space="preserve">
          <source>Auto-negotiate the highest protocol version like &lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt;&lt;code&gt;PROTOCOL_TLS&lt;/code&gt;&lt;/a&gt;, but only support server-side &lt;a href=&quot;#ssl.SSLSocket&quot;&gt;&lt;code&gt;SSLSocket&lt;/code&gt;&lt;/a&gt; connections.</source>
          <target state="translated">自动协商最高协议版本，例如&lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt; &lt;code&gt;PROTOCOL_TLS&lt;/code&gt; &lt;/a&gt;，但仅支持服务器端&lt;a href=&quot;#ssl.SSLSocket&quot;&gt; &lt;code&gt;SSLSocket&lt;/code&gt; &lt;/a&gt;连接。</target>
        </trans-unit>
        <trans-unit id="f47c5ab52bbe1a984f857a4d21dd996e64a02f48" translate="yes" xml:space="preserve">
          <source>Auto-open Stack Viewer</source>
          <target state="translated">自动打开堆栈浏览器</target>
        </trans-unit>
        <trans-unit id="197be9c04cb2e21653d60342178244091efa77b8" translate="yes" xml:space="preserve">
          <source>Auto-speccing solves this problem. You can either pass &lt;code&gt;autospec=True&lt;/code&gt; to &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;#unittest.mock.patch.object&quot;&gt;&lt;code&gt;patch.object()&lt;/code&gt;&lt;/a&gt; or use the &lt;a href=&quot;#unittest.mock.create_autospec&quot;&gt;&lt;code&gt;create_autospec()&lt;/code&gt;&lt;/a&gt; function to create a mock with a spec. If you use the &lt;code&gt;autospec=True&lt;/code&gt; argument to &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; then the object that is being replaced will be used as the spec object. Because the speccing is done &amp;ldquo;lazily&amp;rdquo; (the spec is created as attributes on the mock are accessed) you can use it with very complex or deeply nested objects (like modules that import modules that import modules) without a big performance hit.</source>
          <target state="translated">自动指定解决了此问题。您可以将 &lt;code&gt;autospec=True&lt;/code&gt; 传递给&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#unittest.mock.patch.object&quot;&gt; &lt;code&gt;patch.object()&lt;/code&gt; ,&lt;/a&gt;也可以使用&lt;a href=&quot;#unittest.mock.create_autospec&quot;&gt; &lt;code&gt;create_autospec()&lt;/code&gt; &lt;/a&gt;函数来创建带有规范的模拟。如果对&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;使用 &lt;code&gt;autospec=True&lt;/code&gt; 参数，则将替换的对象用作spec对象。由于规范是&amp;ldquo;懒惰地&amp;rdquo;完成的（规范是在访问模拟对象的属性时创建的），因此可以将其用于非常复杂或深度嵌套的对象（例如，导入模块的模块，然后导入模块），而不会对性能造成很大的影响。</target>
        </trans-unit>
        <trans-unit id="c61da791d8a006bda906f9ae1ff768b72eb7dc76" translate="yes" xml:space="preserve">
          <source>Automatic indentation</source>
          <target state="translated">自动缩进</target>
        </trans-unit>
        <trans-unit id="6403e37e9140843598c5440d1e8bc72de007ae50" translate="yes" xml:space="preserve">
          <source>Automatically determine how many times to call &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt;&lt;code&gt;timeit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">自动确定调用&lt;a href=&quot;#timeit.Timer.timeit&quot;&gt; &lt;code&gt;timeit()&lt;/code&gt; 的次数&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4d5117dbfc630c5ff47b8c4726c276df15d1bd1e" translate="yes" xml:space="preserve">
          <source>Autospeccing</source>
          <target state="translated">Autospeccing</target>
        </trans-unit>
        <trans-unit id="aae79d454597517030f9ce7ec36250067a2b9f35" translate="yes" xml:space="preserve">
          <source>Autospeccing is based on the existing &lt;code&gt;spec&lt;/code&gt; feature of mock. It limits the api of mocks to the api of an original object (the spec), but it is recursive (implemented lazily) so that attributes of mocks only have the same api as the attributes of the spec. In addition mocked functions / methods have the same call signature as the original so they raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if they are called incorrectly.</source>
          <target state="translated">自动指定基于模拟的现有 &lt;code&gt;spec&lt;/code&gt; 功能。它将模拟的api限制为原始对象（规范）的api，但是它是递归的（延迟实现），因此模拟的属性仅具有与规范的属性相同的api。此外，模拟的函数/方法具有与原始函数相同的调用签名，因此如果调用不正确，则会引发&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6e04a76e0651512ad3b1c9b3855e894e52bacec7" translate="yes" xml:space="preserve">
          <source>Auxiliary method for getting a filename in a canonical form, that is, as a case-normalized (on case-insensitive filesystems) absolute path, stripped of surrounding angle brackets.</source>
          <target state="translated">以规范形式获取文件名的辅助方法,即作为一个大小写归一化的(对大小写不敏感的文件系统)绝对路径,去掉周围的角括号。</target>
        </trans-unit>
        <trans-unit id="d15ede98b9b5686d60eb679c69ff709aea96450e" translate="yes" xml:space="preserve">
          <source>Availability: SQLite 3.6.11 or higher</source>
          <target state="translated">可用性。SQLite 3.6.11或更高版本</target>
        </trans-unit>
        <trans-unit id="0648a25bb67f0b4d3be9ad2e32d5343d5884c667" translate="yes" xml:space="preserve">
          <source>Availability: Systems with the &lt;code&gt;madvise()&lt;/code&gt; system call.</source>
          <target state="translated">可用性：具有 &lt;code&gt;madvise()&lt;/code&gt; 系统调用的系统。</target>
        </trans-unit>
        <trans-unit id="fcc09c1546fd2002ad5bda6442ec6858c4d44e94" translate="yes" xml:space="preserve">
          <source>Availability: Systems with the madvise() system call.</source>
          <target state="translated">可用性。使用madvise()系统调用的系统。</target>
        </trans-unit>
        <trans-unit id="c9fcd2b619f3ed9f21f2ae1dc44a712e8e0c1b0c" translate="yes" xml:space="preserve">
          <source>Availability: Tk 8.6</source>
          <target state="translated">可用性。8.6塔卡</target>
        </trans-unit>
        <trans-unit id="fb3bce3637a32f6ce35b6791b2442a57507592a0" translate="yes" xml:space="preserve">
          <source>Availability: Tk 8.6.</source>
          <target state="translated">可用性。8.6塔卡。</target>
        </trans-unit>
        <trans-unit id="dad7b53c45f37c3a8f080b151e9238c41b4b613e" translate="yes" xml:space="preserve">
          <source>Availability: if the ncurses library is used.</source>
          <target state="translated">可用性:如果使用了ncurses库。</target>
        </trans-unit>
        <trans-unit id="90ede860852b2d88bce6f917c8c626dd1ebd0863" translate="yes" xml:space="preserve">
          <source>Available Context Managers</source>
          <target state="translated">可用的上下文管理器</target>
        </trans-unit>
        <trans-unit id="e8fb788cf6307a8cd78a358b3227f7e4460f4896" translate="yes" xml:space="preserve">
          <source>Available Functions</source>
          <target state="translated">可用功能</target>
        </trans-unit>
        <trans-unit id="886aad58c06c842c7cf3407ff5f794bccc525568" translate="yes" xml:space="preserve">
          <source>Available Types</source>
          <target state="translated">可用类型</target>
        </trans-unit>
        <trans-unit id="c1743168e4383b0ceeb14b5166304e0f0f3be9ec" translate="yes" xml:space="preserve">
          <source>Available for read</source>
          <target state="translated">可供阅读</target>
        </trans-unit>
        <trans-unit id="247b0d4f98d15c3f067f1f036f9a2288ba9508e3" translate="yes" xml:space="preserve">
          <source>Available for write</source>
          <target state="translated">可供书写</target>
        </trans-unit>
        <trans-unit id="d5cbfc01dab58f33d6399bdf92d34e12742cc326" translate="yes" xml:space="preserve">
          <source>Available on Unix and Windows. The default on Windows and macOS.</source>
          <target state="translated">在Unix和Windows上可用。Windows和macOS上的默认值。</target>
        </trans-unit>
        <trans-unit id="5bd9dd81c594faef45bb68cd8e2f6b57306afbb3" translate="yes" xml:space="preserve">
          <source>Available on Unix only. The default on Unix.</source>
          <target state="translated">仅在Unix上可用。Unix上的默认值。</target>
        </trans-unit>
        <trans-unit id="8b289188b8156e0915761af80089ec725b1d7c5e" translate="yes" xml:space="preserve">
          <source>Available on Unix platforms which support passing file descriptors over Unix pipes.</source>
          <target state="translated">在支持通过Unix管道传递文件描述符的Unix平台上可用。</target>
        </trans-unit>
        <trans-unit id="f6c3e2a80c9a11385439b399a1bbc1528532103f" translate="yes" xml:space="preserve">
          <source>Averages and measures of central location</source>
          <target state="translated">平均数和中心位置的计量</target>
        </trans-unit>
        <trans-unit id="63dece88439aa338ed47cd03f066290634af6ebb" translate="yes" xml:space="preserve">
          <source>Avoid shared state</source>
          <target state="translated">避免共享状态</target>
        </trans-unit>
        <trans-unit id="49cd5a5cd25205ca8554e1312e26ecf321d1c177" translate="yes" xml:space="preserve">
          <source>Avoid terminating processes</source>
          <target state="translated">避免终止进程</target>
        </trans-unit>
        <trans-unit id="9dfd80c478c083df370ff07aeddda8591a1285bc" translate="yes" xml:space="preserve">
          <source>Awaitables</source>
          <target state="translated">Awaitables</target>
        </trans-unit>
        <trans-unit id="da49b3337696e8a2b4c64d3033aa0a3a5fbc2d3f" translate="yes" xml:space="preserve">
          <source>Awaiting on a coroutine. The following snippet of code will print &amp;ldquo;hello&amp;rdquo; after waiting for 1 second, and then print &amp;ldquo;world&amp;rdquo; after waiting for &lt;em&gt;another&lt;/em&gt; 2 seconds:</source>
          <target state="translated">等待协程。下面的代码片段将在等待1秒后显示&amp;ldquo; hello&amp;rdquo;，然后在等待&lt;em&gt;另外&lt;/em&gt; 2秒后显示&amp;ldquo; world&amp;rdquo; ：</target>
        </trans-unit>
        <trans-unit id="d09738049226150f62d909b1178a56d0dfe67bbd" translate="yes" xml:space="preserve">
          <source>Aware and Naive Objects</source>
          <target state="translated">有意识和天真的对象</target>
        </trans-unit>
        <trans-unit id="708e5124ff648e8126313adce762960fdf915375" translate="yes" xml:space="preserve">
          <source>BLAKE2</source>
          <target state="translated">BLAKE2</target>
        </trans-unit>
        <trans-unit id="9bc500c21c3285144fc28bd0e912a7783b167e8c" translate="yes" xml:space="preserve">
          <source>BLAKE2 can be personalized by passing bytes to the &lt;em&gt;person&lt;/em&gt; argument:</source>
          <target state="translated">可以通过将字节传递给&lt;em&gt;person&lt;/em&gt;参数来个性化BLAKE2 ：</target>
        </trans-unit>
        <trans-unit id="c571b2356698c401ae7c55f2f7327fe7d7dcc208" translate="yes" xml:space="preserve">
          <source>BLAKE2 has configurable size of digests up to 64 bytes for BLAKE2b and up to 32 bytes for BLAKE2s. For example, to replace SHA-1 with BLAKE2b without changing the size of output, we can tell BLAKE2b to produce 20-byte digests:</source>
          <target state="translated">BLAKE2的摘要大小可配置,BLAKE2b的摘要最大为64字节,BLAKE2s的摘要最大为32字节。例如,如果要用BLAKE2b代替SHA-1而不改变输出大小,我们可以告诉BLAKE2b产生20字节的摘要。</target>
        </trans-unit>
        <trans-unit id="eef9c659e49da103106b41ae1c8a79320baba6dc" translate="yes" xml:space="preserve">
          <source>BLAKE2 specification defines constant lengths for salt and personalization parameters, however, for convenience, this implementation accepts byte strings of any size up to the specified length. If the length of the parameter is less than specified, it is padded with zeros, thus, for example, &lt;code&gt;b'salt'&lt;/code&gt; and &lt;code&gt;b'salt\x00'&lt;/code&gt; is the same value. (This is not the case for &lt;em&gt;key&lt;/em&gt;.)</source>
          <target state="translated">BLAKE2规范为salt和个性化参数定义了恒定长度，但是，为方便起见，此实现接受任何大小的字节字符串，直到指定长度。如果参数的长度小于指定的长度，则会用零填充，例如， &lt;code&gt;b'salt'&lt;/code&gt; 和 &lt;code&gt;b'salt\x00'&lt;/code&gt; 是相同的值。（这不是&lt;em&gt;key&lt;/em&gt;的情况。）</target>
        </trans-unit>
        <trans-unit id="cd2ef75abf83ba49f622d80373a85346c04a5b37" translate="yes" xml:space="preserve">
          <source>BLAKE2 supports &lt;strong&gt;keyed mode&lt;/strong&gt; (a faster and simpler replacement for &lt;a href=&quot;https://en.wikipedia.org/wiki/Hash-based_message_authentication_code&quot;&gt;HMAC&lt;/a&gt;), &lt;strong&gt;salted hashing&lt;/strong&gt;, &lt;strong&gt;personalization&lt;/strong&gt;, and &lt;strong&gt;tree hashing&lt;/strong&gt;.</source>
          <target state="translated">BLAKE2支持&lt;strong&gt;键控模式&lt;/strong&gt;（一种更快，更简单的&lt;a href=&quot;https://en.wikipedia.org/wiki/Hash-based_message_authentication_code&quot;&gt;HMAC&lt;/a&gt;替代），&lt;strong&gt;盐化哈希&lt;/strong&gt;，&lt;strong&gt;个性化&lt;/strong&gt;和&lt;strong&gt;树哈希&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="cc708fbeac5b1cf0a46d24793514cf456186e0b0" translate="yes" xml:space="preserve">
          <source>BLAKE2b</source>
          <target state="translated">BLAKE2b</target>
        </trans-unit>
        <trans-unit id="b5b58babc24a9c4ee1a0847d9544ddb7d16f7c8f" translate="yes" xml:space="preserve">
          <source>BLAKE2s</source>
          <target state="translated">BLAKE2s</target>
        </trans-unit>
        <trans-unit id="e0e381dd5fc1fcdbadce37e6a061ba49795a568d" translate="yes" xml:space="preserve">
          <source>BMP files</source>
          <target state="translated">BMP文件</target>
        </trans-unit>
        <trans-unit id="a42a05330f8bf46c41ac1665544187ff109c2243" translate="yes" xml:space="preserve">
          <source>Babyl is a single-file mailbox format used by the Rmail mail user agent included with Emacs. The beginning of a message is indicated by a line containing the two characters Control-Underscore (&lt;code&gt;'\037'&lt;/code&gt;) and Control-L (&lt;code&gt;'\014'&lt;/code&gt;). The end of a message is indicated by the start of the next message or, in the case of the last message, a line containing a Control-Underscore (&lt;code&gt;'\037'&lt;/code&gt;) character.</source>
          <target state="translated">Babyl是Emacs附带的Rmail邮件用户代理使用的单文件邮箱格式。消息的开头由包含两个字符Control-Underscore（ &lt;code&gt;'\037'&lt;/code&gt; ）和Control-L（ &lt;code&gt;'\014'&lt;/code&gt; ）的行指示。消息的结尾由下一条消息的开头或在最后一条消息的情况下由包含Control-Underscore（ &lt;code&gt;'\037'&lt;/code&gt; ）字符的行指示。</target>
        </trans-unit>
        <trans-unit id="51e1b906cbdb74be5ef8d171c417a6f96c704e55" translate="yes" xml:space="preserve">
          <source>Back tab</source>
          <target state="translated">后标签</target>
        </trans-unit>
        <trans-unit id="fcf84c7c42731b104d6bb1ee61a75ed5dec2fca1" translate="yes" xml:space="preserve">
          <source>Back up your cookies before saving if you have cookies whose loss / corruption would be inconvenient (there are some subtleties which may lead to slight changes in the file over a load / save round-trip).</source>
          <target state="translated">如果你的cookie丢失/损坏会带来不便,请在保存前备份你的cookie(有一些微妙的地方可能会导致文件在加载/保存过程中发生轻微变化)。</target>
        </trans-unit>
        <trans-unit id="f7cabb8d741c7dccd3373c3e1b45a4517c4bc9a5" translate="yes" xml:space="preserve">
          <source>Backend function used by &lt;a href=&quot;#curses.resizeterm&quot;&gt;&lt;code&gt;resizeterm()&lt;/code&gt;&lt;/a&gt;, performing most of the work; when resizing the windows, &lt;a href=&quot;#curses.resize_term&quot;&gt;&lt;code&gt;resize_term()&lt;/code&gt;&lt;/a&gt; blank-fills the areas that are extended. The calling application should fill in these areas with appropriate data. The &lt;code&gt;resize_term()&lt;/code&gt; function attempts to resize all windows. However, due to the calling convention of pads, it is not possible to resize these without additional interaction with the application.</source>
          <target state="translated">&lt;a href=&quot;#curses.resizeterm&quot;&gt; &lt;code&gt;resizeterm()&lt;/code&gt; &lt;/a&gt;使用的后端函数，执行大部分工作；调整窗口大小时，&lt;a href=&quot;#curses.resize_term&quot;&gt; &lt;code&gt;resize_term()&lt;/code&gt; &lt;/a&gt;空白填充扩展的区域。调用应用程序应在这些区域中填充适当的数据。该 &lt;code&gt;resize_term()&lt;/code&gt; 函数试图调整所有窗口。但是，由于pad的调用约定，如果不与应用程序进行其他交互，则无法调整它们的大小。</target>
        </trans-unit>
        <trans-unit id="ad8d0fed9a547cc64ffb221201642666f0011ab4" translate="yes" xml:space="preserve">
          <source>Background, details, hints, tips and caveats</source>
          <target state="translated">背景、细节、提示、技巧和注意事项。</target>
        </trans-unit>
        <trans-unit id="d761e5a62561f09ed0d44ad1cb46328e1f217a6f" translate="yes" xml:space="preserve">
          <source>Backslashes are interpreted literally, unless they immediately precede a double quotation mark.</source>
          <target state="translated">反斜杠按字面解释,除非它们紧接在双引号之前。</target>
        </trans-unit>
        <trans-unit id="88d130a66de8e5db01660642d9f23e1f0eef97dd" translate="yes" xml:space="preserve">
          <source>Backspace</source>
          <target state="translated">Backspace</target>
        </trans-unit>
        <trans-unit id="a3b4e1ecc274bf718cbbd8a1a3fe637f6e1d74f9" translate="yes" xml:space="preserve">
          <source>Backspace (unreliable)</source>
          <target state="translated">退格(不可靠)</target>
        </trans-unit>
        <trans-unit id="e55f2cbe5dc4e91bd91593c8be3a8399315bbfdf" translate="yes" xml:space="preserve">
          <source>Backward-compatible usage:</source>
          <target state="translated">向后兼容使用。</target>
        </trans-unit>
        <trans-unit id="1afefdad8f394c65ed6d000a865d699a38489c6f" translate="yes" xml:space="preserve">
          <source>Bad address</source>
          <target state="translated">地址错误</target>
        </trans-unit>
        <trans-unit id="becfc2da6183284441f36b6385c24b70a600038b" translate="yes" xml:space="preserve">
          <source>Bad file descriptor error example</source>
          <target state="translated">坏文件描述符错误示例</target>
        </trans-unit>
        <trans-unit id="a9ac5297b2f804cdafa5d88f5e271e340ba5cf37" translate="yes" xml:space="preserve">
          <source>Bad file number</source>
          <target state="translated">坏的文件号</target>
        </trans-unit>
        <trans-unit id="d42cb962824573639b58c8ac6238174cbbe0902e" translate="yes" xml:space="preserve">
          <source>Bad font file format</source>
          <target state="translated">字体文件格式错误</target>
        </trans-unit>
        <trans-unit id="09b7225a7007de0840d3002393babbaf7c304ea8" translate="yes" xml:space="preserve">
          <source>Baltic languages</source>
          <target state="translated">波罗的海语</target>
        </trans-unit>
        <trans-unit id="5e5a05a8b84deb1f27d7d9a68b519e2daa6a3749" translate="yes" xml:space="preserve">
          <source>Barrier Objects</source>
          <target state="translated">障碍物</target>
        </trans-unit>
        <trans-unit id="c5376071164581eb584cba9b3620cf0285ee49f3" translate="yes" xml:space="preserve">
          <source>Barry Warsaw</source>
          <target state="translated">Barry Warsaw</target>
        </trans-unit>
        <trans-unit id="cbfa89884cf762b2c8452214a9cb7c8b56848102" translate="yes" xml:space="preserve">
          <source>Base Protocol</source>
          <target state="translated">基本协议</target>
        </trans-unit>
        <trans-unit id="e7847ef64ed125924cd719af4769f2b49be1f954" translate="yes" xml:space="preserve">
          <source>Base Protocols</source>
          <target state="translated">基础协议</target>
        </trans-unit>
        <trans-unit id="b1fa70ba520aae580db170cd80267cedd66c66af" translate="yes" xml:space="preserve">
          <source>Base Transport</source>
          <target state="translated">基地运输</target>
        </trans-unit>
        <trans-unit id="0f7c08675f792982cba4bf468bb32f3974d128d6" translate="yes" xml:space="preserve">
          <source>Base category for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python.</source>
          <target state="translated">当这些警告的对象是用Python编写的应用程序的终端用户时,这些警告的基本类别。</target>
        </trans-unit>
        <trans-unit id="ded4acb00e3e9a0e2c6d819d2be38745cb197828" translate="yes" xml:space="preserve">
          <source>Base category for warnings about deprecated features when those warnings are intended for other Python developers (ignored by default, unless triggered by code in &lt;code&gt;__main__&lt;/code&gt;).</source>
          <target state="translated">当警告已针对其他Python开发人员使用时，有关警告的基本类别（默认情况下将被忽略，除非由 &lt;code&gt;__main__&lt;/code&gt; 中的代码触发）。</target>
        </trans-unit>
        <trans-unit id="aecd2a13287ac24c073616d7be9ca1bac4b820e3" translate="yes" xml:space="preserve">
          <source>Base category for warnings about dubious runtime features.</source>
          <target state="translated">对可疑的运行时功能发出警告的基本类别。</target>
        </trans-unit>
        <trans-unit id="adbf72d780c57a442a1d40e971f0bafb4ba000b7" translate="yes" xml:space="preserve">
          <source>Base category for warnings about dubious syntactic features.</source>
          <target state="translated">对可疑句法特征发出警告的基本类别。</target>
        </trans-unit>
        <trans-unit id="b961e19180b568120a243fe8a965f885400f3963" translate="yes" xml:space="preserve">
          <source>Base category for warnings about features that will be deprecated in the future (ignored by default).</source>
          <target state="translated">基本类别,用于警告未来将被废弃的功能(默认情况下忽略)。</target>
        </trans-unit>
        <trans-unit id="271b2d511f8d7cb0d37d60a7165a2a6be096fb2d" translate="yes" xml:space="preserve">
          <source>Base category for warnings related to &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">与&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;stdtypes#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; &lt;/a&gt;相关的警告的基本类别。</target>
        </trans-unit>
        <trans-unit id="e56c87eafe934bdffdcf80bbda3a3f1bafd3951a" translate="yes" xml:space="preserve">
          <source>Base category for warnings related to Unicode.</source>
          <target state="translated">与Unicode相关的警告的基本类别。</target>
        </trans-unit>
        <trans-unit id="8aca1ccdde79b14ca072dd8196fe1a8eaa20e816" translate="yes" xml:space="preserve">
          <source>Base category for warnings related to resource usage.</source>
          <target state="translated">与资源使用有关的警告的基本类别。</target>
        </trans-unit>
        <trans-unit id="9db12d86e6ccca93eb8b1b63e07ce33c90af51f7" translate="yes" xml:space="preserve">
          <source>Base category for warnings triggered during the process of importing a module (ignored by default).</source>
          <target state="translated">在导入模块过程中触发的警告的基本类别(默认忽略)。</target>
        </trans-unit>
        <trans-unit id="62c7f7b7e6449dee51da32f88ce059c9f0a6e133" translate="yes" xml:space="preserve">
          <source>Base class for C callable foreign functions.</source>
          <target state="translated">C语言可调用外来函数的基类。</target>
        </trans-unit>
        <trans-unit id="93b278fdd49d1caec7588ea1619ab8693a3d6aea" translate="yes" xml:space="preserve">
          <source>Base class for all &lt;a href=&quot;#module-tarfile&quot;&gt;&lt;code&gt;tarfile&lt;/code&gt;&lt;/a&gt; exceptions.</source>
          <target state="translated">所有&lt;a href=&quot;#module-tarfile&quot;&gt; &lt;code&gt;tarfile&lt;/code&gt; &lt;/a&gt;异常的基类。</target>
        </trans-unit>
        <trans-unit id="83a2ff960e585bade07c251fc6907e1766bfdcea" translate="yes" xml:space="preserve">
          <source>Base class for all exceptions that include an SMTP error code. These exceptions are generated in some instances when the SMTP server returns an error code. The error code is stored in the &lt;code&gt;smtp_code&lt;/code&gt; attribute of the error, and the &lt;code&gt;smtp_error&lt;/code&gt; attribute is set to the error message.</source>
          <target state="translated">所有包含SMTP错误代码的异常的基类。在某些情况下，当SMTP服务器返回错误代码时，会生成这些异常。错误代码存储在错误的 &lt;code&gt;smtp_code&lt;/code&gt; 属性中，并且 &lt;code&gt;smtp_error&lt;/code&gt; 属性设置为错误消息。</target>
        </trans-unit>
        <trans-unit id="bc4d1cfe65641ccd75006d6cb0c5273ca53b06fc" translate="yes" xml:space="preserve">
          <source>Base class for all other &lt;a href=&quot;#module-configparser&quot;&gt;&lt;code&gt;configparser&lt;/code&gt;&lt;/a&gt; exceptions.</source>
          <target state="translated">所有其他&lt;a href=&quot;#module-configparser&quot;&gt; &lt;code&gt;configparser&lt;/code&gt; &lt;/a&gt;异常的基类。</target>
        </trans-unit>
        <trans-unit id="2e79acf9343097cfca004b026b1e289b6e81d9e7" translate="yes" xml:space="preserve">
          <source>Base class for all other exceptions from this module.</source>
          <target state="translated">本模块中所有其他异常的基类。</target>
        </trans-unit>
        <trans-unit id="0094874eb16d8f35c44e0f11faca44e7bc129804" translate="yes" xml:space="preserve">
          <source>Base class for all transports. Contains methods that all asyncio transports share.</source>
          <target state="translated">所有传输的基础类。包含所有asyncio传输共享的方法。</target>
        </trans-unit>
        <trans-unit id="bc8dc0e5d7f463652bc46330f069074014733a53" translate="yes" xml:space="preserve">
          <source>Base class for binary streams that support some kind of buffering. It inherits &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt;. There is no public constructor.</source>
          <target state="translated">支持某种缓冲的二进制流的基类。它继承了&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; &lt;/a&gt;。没有公共构造函数。</target>
        </trans-unit>
        <trans-unit id="111505a2e2f1c5d720f4dbb20b18464824cc26d2" translate="yes" xml:space="preserve">
          <source>Base class for content managers. Provides the standard registry mechanisms to register converters between MIME content and other representations, as well as the &lt;code&gt;get_content&lt;/code&gt; and &lt;code&gt;set_content&lt;/code&gt; dispatch methods.</source>
          <target state="translated">内容管理器的基类。提供标准的注册机制，以注册MIME内容和其他表示形式之间的转换器，以及 &lt;code&gt;get_content&lt;/code&gt; 和 &lt;code&gt;set_content&lt;/code&gt; 调度方法。</target>
        </trans-unit>
        <trans-unit id="77e0fa5fb9d9cb92c49e07f64d986e277b736562" translate="yes" xml:space="preserve">
          <source>Base class for creating enumerated constants that are also subclasses of &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">用于创建枚举常量的基类，这些常量也是&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; 的&lt;/a&gt;子类。</target>
        </trans-unit>
        <trans-unit id="bc4710022b4a59f7309e498f9784b89980698d53" translate="yes" xml:space="preserve">
          <source>Base class for creating enumerated constants that can be combined using the bitwise operations without losing their &lt;a href=&quot;#enum.Flag&quot;&gt;&lt;code&gt;Flag&lt;/code&gt;&lt;/a&gt; membership.</source>
          <target state="translated">用于创建枚举常量的基类，这些常量可以使用按位运算进行组合而不会丢失其&lt;a href=&quot;#enum.Flag&quot;&gt; &lt;code&gt;Flag&lt;/code&gt; &lt;/a&gt;成员资格。</target>
        </trans-unit>
        <trans-unit id="8067a9d2bd64f504a0ed0bf642eba1d2667cdb0d" translate="yes" xml:space="preserve">
          <source>Base class for creating enumerated constants that can be combined using the bitwise operators without losing their &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt; membership. &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt; members are also subclasses of &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">用于创建枚举常量的基类，可以使用按位运算符对其进行组合而不会丢失其&lt;a href=&quot;#enum.IntFlag&quot;&gt; &lt;code&gt;IntFlag&lt;/code&gt; &lt;/a&gt;成员资格。&lt;a href=&quot;#enum.IntFlag&quot;&gt; &lt;code&gt;IntFlag&lt;/code&gt; &lt;/a&gt;成员也是&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; 的&lt;/a&gt;子类。</target>
        </trans-unit>
        <trans-unit id="49651f12dd69e9fc5b9eb9a491dae1396c8f4820" translate="yes" xml:space="preserve">
          <source>Base class for creating enumerated constants. See section &lt;a href=&quot;#functional-api&quot;&gt;Functional API&lt;/a&gt; for an alternate construction syntax.</source>
          <target state="translated">用于创建枚举常量的基类。有关替代的构造语法，请参见&lt;a href=&quot;#functional-api&quot;&gt;功能性API&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="c8496250f8d316f4c2fb71bb6afeaf2db8d55ba5" translate="yes" xml:space="preserve">
          <source>Base class for exceptions raised when problems occur performing string interpolation.</source>
          <target state="translated">当执行字符串插值时出现问题时引发异常的基类。</target>
        </trans-unit>
        <trans-unit id="7a8cc99e6dd0fa75e5d9d18d1e2f0b6d159ef64b" translate="yes" xml:space="preserve">
          <source>Base class for opening and reading URLs. Unless you need to support opening objects using schemes other than &lt;code&gt;http:&lt;/code&gt;, &lt;code&gt;ftp:&lt;/code&gt;, or &lt;code&gt;file:&lt;/code&gt;, you probably want to use &lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt;&lt;code&gt;FancyURLopener&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">用于打开和读取URL的基类。除非您需要使用 &lt;code&gt;http:&lt;/code&gt; ， &lt;code&gt;ftp:&lt;/code&gt; 或 &lt;code&gt;file:&lt;/code&gt; 以外的方案来支持打开对象，否则您可能要使用&lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt; &lt;code&gt;FancyURLopener&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa942d873b8cc2045025e1cba883f43a926d1060" translate="yes" xml:space="preserve">
          <source>Base class for other signals and a subclass of &lt;a href=&quot;exceptions#ArithmeticError&quot;&gt;&lt;code&gt;ArithmeticError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">其他信号的基类和&lt;a href=&quot;exceptions#ArithmeticError&quot;&gt; &lt;code&gt;ArithmeticError&lt;/code&gt; &lt;/a&gt;的子类。</target>
        </trans-unit>
        <trans-unit id="d78011d81daf58732134a6e10362b07bb6ae789f" translate="yes" xml:space="preserve">
          <source>Base class for policy objects.</source>
          <target state="translated">策略对象的基础类。</target>
        </trans-unit>
        <trans-unit id="37baa2206d896a594f1f8aa5a3db8477752589d1" translate="yes" xml:space="preserve">
          <source>Base class for protocol classes. Protocol classes are defined like this:</source>
          <target state="translated">协议类的基础类。协议类的定义是这样的。</target>
        </trans-unit>
        <trans-unit id="6a52a47b306d18d17af6700a5e02d334eea68489" translate="yes" xml:space="preserve">
          <source>Base class for raw binary I/O. It inherits &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt;. There is no public constructor.</source>
          <target state="translated">原始二进制I / O的基类。它继承了&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; &lt;/a&gt;。没有公共构造函数。</target>
        </trans-unit>
        <trans-unit id="c30962a539a3522164dd18b568addcfb57b7dc0a" translate="yes" xml:space="preserve">
          <source>Base class for raw binary streams. It inherits &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt;. There is no public constructor.</source>
          <target state="translated">原始二进制流的基类。它继承了&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; &lt;/a&gt;。没有公共构造函数。</target>
        </trans-unit>
        <trans-unit id="ec5274c46b7e76247d7c11c675e64556818455ea" translate="yes" xml:space="preserve">
          <source>Base class for syntax errors related to incorrect indentation. This is a subclass of &lt;a href=&quot;#SyntaxError&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">与缩进不正确相关的语法错误的基类。这是&lt;a href=&quot;#SyntaxError&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;的子类。</target>
        </trans-unit>
        <trans-unit id="f8034f1f619a25403ea22ca32afe23c323c69db0" translate="yes" xml:space="preserve">
          <source>Base class for text streams. This class provides a character and line based interface to stream I/O. It inherits &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt;. There is no public constructor.</source>
          <target state="translated">文本流的基类。此类提供基于字符和行的接口来流I / O。它继承了&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; &lt;/a&gt;。没有公共构造函数。</target>
        </trans-unit>
        <trans-unit id="115592b440ded17229a2be8652ec1583576bd6be" translate="yes" xml:space="preserve">
          <source>Base class for the dialogs defined in the other modules listed here.</source>
          <target state="translated">这里列出的其他模块中定义的对话框的基类。</target>
        </trans-unit>
        <trans-unit id="1a767590a449f53c349f02ce7bd8efd407590883" translate="yes" xml:space="preserve">
          <source>Base class for warning categories.</source>
          <target state="translated">警告类别的基础类。</target>
        </trans-unit>
        <trans-unit id="30e62bee9558e07fac538cacc23a8c4434dcd550" translate="yes" xml:space="preserve">
          <source>Base class for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python.</source>
          <target state="translated">当这些警告的对象是用Python编写的应用程序的终端用户时,用于警告废弃特性的基类。</target>
        </trans-unit>
        <trans-unit id="bef4dbd3cc05db0caaef10bd33d535aef6000686" translate="yes" xml:space="preserve">
          <source>Base class for warnings about deprecated features when those warnings are intended for other Python developers.</source>
          <target state="translated">当这些警告的对象是其他 Python 开发者时,用于警告废弃特性的基类。</target>
        </trans-unit>
        <trans-unit id="1d911ad966f332393c3708556614e73ed1cbd284" translate="yes" xml:space="preserve">
          <source>Base class for warnings about dubious runtime behavior.</source>
          <target state="translated">用于警告可疑的运行时行为的基类。</target>
        </trans-unit>
        <trans-unit id="ed11da738626db6bc66dc76605890a35049a6b1f" translate="yes" xml:space="preserve">
          <source>Base class for warnings about dubious syntax.</source>
          <target state="translated">用于警告可疑语法的基类。</target>
        </trans-unit>
        <trans-unit id="1e39f8ab9b8f97932eee2df10cc6b10cd8aec138" translate="yes" xml:space="preserve">
          <source>Base class for warnings about features which are obsolete and expected to be deprecated in the future, but are not deprecated at the moment.</source>
          <target state="translated">基类,用于警告那些已经过时的、预计将来会被废弃的、但目前还没有被废弃的功能。</target>
        </trans-unit>
        <trans-unit id="9dda81dec15bfcd224d1e4d932c986e759a07e6a" translate="yes" xml:space="preserve">
          <source>Base class for warnings about probable mistakes in module imports.</source>
          <target state="translated">用于警告模块导入中可能出现的错误的基类。</target>
        </trans-unit>
        <trans-unit id="a020b0a894b4052b6ee113d3143b9d2aef84bb79" translate="yes" xml:space="preserve">
          <source>Base class for warnings generated by user code.</source>
          <target state="translated">用于用户代码产生的警告的基类。</target>
        </trans-unit>
        <trans-unit id="b307ddcc59f65f2e18cfc4a546c8cbf5e9483f01" translate="yes" xml:space="preserve">
          <source>Base class for warnings related to &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">与&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;stdtypes#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; &lt;/a&gt;相关的警告的基类。</target>
        </trans-unit>
        <trans-unit id="14f1306f10d78b1a318d2d99f7741e21a1990aab" translate="yes" xml:space="preserve">
          <source>Base class for warnings related to Unicode.</source>
          <target state="translated">与Unicode相关的警告的基类。</target>
        </trans-unit>
        <trans-unit id="63ad316f901fe1156baedc6cf362aaa798a4fe84" translate="yes" xml:space="preserve">
          <source>Base class for warnings related to resource usage.</source>
          <target state="translated">资源使用警告的基类。</target>
        </trans-unit>
        <trans-unit id="d1c1a39f6eb8799e6d29048479dd3cf5cc598666" translate="yes" xml:space="preserve">
          <source>Base class for warnings related to resource usage. Ignored by the default warning filters.</source>
          <target state="translated">与资源使用相关的警告的基类。被默认的警告过滤器忽略。</target>
        </trans-unit>
        <trans-unit id="b1dd274748a920e7e6b6531ecc973725498ebb54" translate="yes" xml:space="preserve">
          <source>Base class of the dialog controls. &lt;em&gt;dlg&lt;/em&gt; is the dialog object the control belongs to, and &lt;em&gt;name&lt;/em&gt; is the control&amp;rsquo;s name.</source>
          <target state="translated">对话框控件的基类。&lt;em&gt;dlg&lt;/em&gt;是控件所属的对话框对象，&lt;em&gt;name&lt;/em&gt;是控件的名称。</target>
        </trans-unit>
        <trans-unit id="8f20f1270a9dcc163b4e1c85af830ebcf1500698" translate="yes" xml:space="preserve">
          <source>Base class which can be inherited by SAX parsers.</source>
          <target state="translated">可由SAX解析器继承的基类。</target>
        </trans-unit>
        <trans-unit id="597d1d5f179914ea7470a3760bd8ee3a2400c1bc" translate="yes" xml:space="preserve">
          <source>Base classes</source>
          <target state="translated">基础班</target>
        </trans-unit>
        <trans-unit id="f532cd83f6f9947116baa3849ec23355cdfb324d" translate="yes" xml:space="preserve">
          <source>Base exception class used for all specific DOM exceptions. This exception class cannot be directly instantiated.</source>
          <target state="translated">用于所有特定DOM异常的基础异常类。这个异常类不能直接被实例化。</target>
        </trans-unit>
        <trans-unit id="f00864be99f44fa68097e7a11c50dc2553483317" translate="yes" xml:space="preserve">
          <source>Base interface for most objects in a document.</source>
          <target state="translated">文档中大多数对象的基础接口。</target>
        </trans-unit>
        <trans-unit id="0691eb22ac03b573f0c69a50a9e4abca05842012" translate="yes" xml:space="preserve">
          <source>Base protocol with methods that all protocols share.</source>
          <target state="translated">具有所有协议共享方法的基本协议。</target>
        </trans-unit>
        <trans-unit id="0433583846f35c2ba0aec03a821f97c49d6fc91d" translate="yes" xml:space="preserve">
          <source>BaseException</source>
          <target state="translated">BaseException</target>
        </trans-unit>
        <trans-unit id="2139b25cc7ba47829b2613ecd5640b728063f573" translate="yes" xml:space="preserve">
          <source>BaseException.args</source>
          <target state="translated">BaseException.args</target>
        </trans-unit>
        <trans-unit id="f8a3365a764654373607fbb6ccc5794d20c265b0" translate="yes" xml:space="preserve">
          <source>BaseException.with_traceback()</source>
          <target state="translated">BaseException.with_traceback()</target>
        </trans-unit>
        <trans-unit id="74d736dbe7da7ac2d79279fada28cb6cbb8192ea" translate="yes" xml:space="preserve">
          <source>BaseHandler Objects</source>
          <target state="translated">BaseHandler对象</target>
        </trans-unit>
        <trans-unit id="34ce97d8702b53323f2a4a2c72c66dc5a0eb4e72" translate="yes" xml:space="preserve">
          <source>BaseRotatingHandler</source>
          <target state="translated">BaseRotatingHandler</target>
        </trans-unit>
        <trans-unit id="7348670742e76aaa11d877df8fca9b83a11d1757" translate="yes" xml:space="preserve">
          <source>Basic API</source>
          <target state="translated">基本API</target>
        </trans-unit>
        <trans-unit id="dac6b24f78471a132bc9a7ec7774530351b54fb0" translate="yes" xml:space="preserve">
          <source>Basic Example</source>
          <target state="translated">基本示例</target>
        </trans-unit>
        <trans-unit id="9a289e7dff9101f26b8dc18725557c4f9fdf82bd" translate="yes" xml:space="preserve">
          <source>Basic Examples</source>
          <target state="translated">基本例子</target>
        </trans-unit>
        <trans-unit id="0d3f6e8e2e15cd0179d1216f1c988e44f90d868e" translate="yes" xml:space="preserve">
          <source>Basic Tutorial</source>
          <target state="translated">基础教程</target>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">基本使用方法</target>
        </trans-unit>
        <trans-unit id="03cdc9f64fd1c085bb10854b62f123e70ce40ba7" translate="yes" xml:space="preserve">
          <source>Basic Widgets</source>
          <target state="translated">基本小工具</target>
        </trans-unit>
        <trans-unit id="af90dc70fae02c63e1b5bfb27dfff83393f621b5" translate="yes" xml:space="preserve">
          <source>Basic dialogs and convenience functions.</source>
          <target state="translated">基本对话框和便利功能。</target>
        </trans-unit>
        <trans-unit id="20b19d89ef0aed3f2d4f1afed1d3f801c6b85aa5" translate="yes" xml:space="preserve">
          <source>Basic example</source>
          <target state="translated">基本例子</target>
        </trans-unit>
        <trans-unit id="cfd84c756956f6869f891f756d2ed679a18b4696" translate="yes" xml:space="preserve">
          <source>Basic examples:</source>
          <target state="translated">基本例子:</target>
        </trans-unit>
        <trans-unit id="c58a44745c80d118117b0a04466e564264a9e678" translate="yes" xml:space="preserve">
          <source>Basic interface for resolving entities. If you create an object implementing this interface, then register the object with your Parser, the parser will call the method in your object to resolve all external entities.</source>
          <target state="translated">用于解析实体的基本接口。如果你创建了一个实现该接口的对象,然后将该对象注册到你的解析器中,解析器将调用你对象中的方法来解析所有外部实体。</target>
        </trans-unit>
        <trans-unit id="dc42d64e6761d3023d0a23567aa37e8faeed769a" translate="yes" xml:space="preserve">
          <source>Basic skipping looks like this:</source>
          <target state="translated">基本的跳转是这样的。</target>
        </trans-unit>
        <trans-unit id="955f12253b570691dddd89d6664ff86c6ffea525" translate="yes" xml:space="preserve">
          <source>Basic turtle commands such as &lt;a href=&quot;turtle#turtle.forward&quot;&gt;&lt;code&gt;forward()&lt;/code&gt;&lt;/a&gt; are added to a &lt;a href=&quot;#cmd.Cmd&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;&lt;/a&gt; subclass with method named &lt;code&gt;do_forward()&lt;/code&gt;. The argument is converted to a number and dispatched to the turtle module. The docstring is used in the help utility provided by the shell.</source>
          <target state="translated">基本的乌龟命令（例如&lt;a href=&quot;turtle#turtle.forward&quot;&gt; &lt;code&gt;forward()&lt;/code&gt; )&lt;/a&gt;通过名为 &lt;code&gt;do_forward()&lt;/code&gt; 的方法添加到&lt;a href=&quot;#cmd.Cmd&quot;&gt; &lt;code&gt;Cmd&lt;/code&gt; &lt;/a&gt;子类中。该参数将转换为数字，然后分派给turtle模块。该文档字符串在外壳程序提供的帮助实用程序中使用。</target>
        </trans-unit>
        <trans-unit id="168929183d2470cb5fd9c8ab272eed288ccb698d" translate="yes" xml:space="preserve">
          <source>Basic use</source>
          <target state="translated">基本用途</target>
        </trans-unit>
        <trans-unit id="de3816b07b2c1c67b6c5d0b0c0ef9af019f07757" translate="yes" xml:space="preserve">
          <source>Be aware that setting &lt;em&gt;followlinks&lt;/em&gt; to &lt;code&gt;True&lt;/code&gt; can lead to infinite recursion if a link points to a parent directory of itself. &lt;a href=&quot;#os.walk&quot;&gt;&lt;code&gt;walk()&lt;/code&gt;&lt;/a&gt; does not keep track of the directories it visited already.</source>
          <target state="translated">请注意，如果链接指向自身的父目录，&lt;em&gt;则将followlinks&lt;/em&gt;设置为 &lt;code&gt;True&lt;/code&gt; 可能导致无限递归。&lt;a href=&quot;#os.walk&quot;&gt; &lt;code&gt;walk()&lt;/code&gt; &lt;/a&gt;不会跟踪它已经访问过的目录。</target>
        </trans-unit>
        <trans-unit id="c4d410bcf0f1e8b0447d1481b24eeff8e98f8899" translate="yes" xml:space="preserve">
          <source>Be careful to not use this module where deadlock might occur from a thread being created that blocks waiting for another thread to be created. This often occurs with blocking I/O.</source>
          <target state="translated">要注意不要使用这个模块,因为创建的线程可能会发生死锁,而死锁是在等待另一个线程被创建时阻塞的。这种情况经常发生在阻塞的I/O中。</target>
        </trans-unit>
        <trans-unit id="d1cc029ce668972e8e992f6e3aa06dc274e72815" translate="yes" xml:space="preserve">
          <source>Be forewarned about how &lt;code&gt;init=False&lt;/code&gt; fields work during a call to &lt;a href=&quot;#dataclasses.replace&quot;&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/a&gt;. They are not copied from the source object, but rather are initialized in &lt;code&gt;__post_init__()&lt;/code&gt;, if they&amp;rsquo;re initialized at all. It is expected that &lt;code&gt;init=False&lt;/code&gt; fields will be rarely and judiciously used. If they are used, it might be wise to have alternate class constructors, or perhaps a custom &lt;code&gt;replace()&lt;/code&gt; (or similarly named) method which handles instance copying.</source>
          <target state="translated">警告有关在调用&lt;a href=&quot;#dataclasses.replace&quot;&gt; &lt;code&gt;replace()&lt;/code&gt; &lt;/a&gt;期间 &lt;code&gt;init=False&lt;/code&gt; 字段如何工作。它们不是从源对象复制的，而是在 &lt;code&gt;__post_init__()&lt;/code&gt; 中初始化的（如果已初始化）。预期将很少且明智地使用 &lt;code&gt;init=False&lt;/code&gt; 字段。如果使用它们，明智的选择是使用替代的类构造函数，或者使用处理实例复制的自定义 &lt;code&gt;replace()&lt;/code&gt; （或类似命名）方法。</target>
        </trans-unit>
        <trans-unit id="abae3c10b04d3f45674d8d84138847d156e5d77c" translate="yes" xml:space="preserve">
          <source>Be very cautious when modifying mailboxes that might be simultaneously changed by some other process. The safest mailbox format to use for such tasks is Maildir; try to avoid using single-file formats such as mbox for concurrent writing. If you&amp;rsquo;re modifying a mailbox, you &lt;em&gt;must&lt;/em&gt; lock it by calling the &lt;a href=&quot;#mailbox.Mailbox.lock&quot;&gt;&lt;code&gt;lock()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#mailbox.Mailbox.unlock&quot;&gt;&lt;code&gt;unlock()&lt;/code&gt;&lt;/a&gt; methods &lt;em&gt;before&lt;/em&gt; reading any messages in the file or making any changes by adding or deleting a message. Failing to lock the mailbox runs the risk of losing messages or corrupting the entire mailbox.</source>
          <target state="translated">修改可能被某些其他过程同时更改的邮箱时，请务必谨慎。用于此类任务的最安全的邮箱格式是Maildir；尝试避免使用诸如mbox之类的单文件格式进行并发写入。如果要修改邮箱，则&lt;em&gt;必须&lt;/em&gt;&lt;em&gt;在&lt;/em&gt;读取文件中的任何消息或通过添加或删除消息进行任何更改&lt;em&gt;之前&lt;/em&gt;，通过调用&lt;a href=&quot;#mailbox.Mailbox.lock&quot;&gt; &lt;code&gt;lock()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#mailbox.Mailbox.unlock&quot;&gt; &lt;code&gt;unlock()&lt;/code&gt; &lt;/a&gt;方法将其锁定。未能锁定邮箱会带来丢失消息或损坏整个邮箱的风险。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c0c1fe83f49ee94713ba4bebb01d2337218d28eb" translate="yes" xml:space="preserve">
          <source>Be warned that you should calibrate the profiler class for the timer function that you choose (see &lt;a href=&quot;#profile-calibration&quot;&gt;Calibration&lt;/a&gt;). For most machines, a timer that returns a lone integer value will provide the best results in terms of low overhead during profiling. (&lt;a href=&quot;os#os.times&quot;&gt;&lt;code&gt;os.times()&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;pretty&lt;/em&gt; bad, as it returns a tuple of floating point values). If you want to substitute a better timer in the cleanest fashion, derive a class and hardwire a replacement dispatch method that best handles your timer call, along with the appropriate calibration constant.</source>
          <target state="translated">警告您应该为所选的计时器功能校准探查器类（请参见&amp;ldquo; &lt;a href=&quot;#profile-calibration&quot;&gt;校准&amp;rdquo;&lt;/a&gt;）。对于大多数计算机而言，返回一个单独的整数值的计时器将提供最佳的结果，因为它们在分析过程中的开销较低。 （&lt;a href=&quot;os#os.times&quot;&gt; &lt;code&gt;os.times()&lt;/code&gt; &lt;/a&gt;是&lt;em&gt;非常&lt;/em&gt;糟糕的，因为它返回浮点值的元组）。如果您想以最简洁的方式替换更好的计时器，请派生一个类，并用硬接线方式替代最能处理您的计时器调用的调度方法以及适当的校准常数。</target>
        </trans-unit>
        <trans-unit id="fb941ef4dc684b044e6e45b9283386b1eb3e83df" translate="yes" xml:space="preserve">
          <source>Bear in mind that a process that has put items in a queue will wait before terminating until all the buffered items are fed by the &amp;ldquo;feeder&amp;rdquo; thread to the underlying pipe. (The child process can call the &lt;a href=&quot;#multiprocessing.Queue.cancel_join_thread&quot;&gt;&lt;code&gt;Queue.cancel_join_thread&lt;/code&gt;&lt;/a&gt; method of the queue to avoid this behaviour.)</source>
          <target state="translated">请记住，将项目放入队列的进程将在终止之前等待，直到所有缓冲的项目由&amp;ldquo; feeder&amp;rdquo;线程馈送到基础管道。（子进程可以调用队列的&lt;a href=&quot;#multiprocessing.Queue.cancel_join_thread&quot;&gt; &lt;code&gt;Queue.cancel_join_thread&lt;/code&gt; &lt;/a&gt;方法来避免这种行为。）</target>
        </trans-unit>
        <trans-unit id="5a4332bde329f74d1a7a1aff8d1cef2c7d17c810" translate="yes" xml:space="preserve">
          <source>Bear in mind that if code run in a child process tries to access a global variable, then the value it sees (if any) may not be the same as the value in the parent process at the time that &lt;a href=&quot;#multiprocessing.Process.start&quot;&gt;&lt;code&gt;Process.start&lt;/code&gt;&lt;/a&gt; was called.</source>
          <target state="translated">请记住，如果在子进程中运行的代码尝试访问全局变量，则它看到的值（如果有）可能与调用&lt;a href=&quot;#multiprocessing.Process.start&quot;&gt; &lt;code&gt;Process.start&lt;/code&gt; &lt;/a&gt;时父进程中的值不同。</target>
        </trans-unit>
        <trans-unit id="10e62a51dfa0dc36185ec273da331d0a6fb29a35" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;#dir&quot;&gt;&lt;code&gt;dir()&lt;/code&gt;&lt;/a&gt; is supplied primarily as a convenience for use at an interactive prompt, it tries to supply an interesting set of names more than it tries to supply a rigorously or consistently defined set of names, and its detailed behavior may change across releases. For example, metaclass attributes are not in the result list when the argument is a class.</source>
          <target state="translated">因为&lt;a href=&quot;#dir&quot;&gt; &lt;code&gt;dir()&lt;/code&gt; 的&lt;/a&gt;主要提供是为了方便在交互式提示符下使用，所以它尝试提供一组有趣的名称，而不是尝试提供一组严格或一致定义的名称，并且其详细行为可能会因版本而异。例如，当参数为类时，元类属性不在结果列表中。</target>
        </trans-unit>
        <trans-unit id="0ed699fc6637c9326d06d5f91cf8cfe03647969a" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt; members are also subclasses of &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; they can be combined with them:</source>
          <target state="translated">因为&lt;a href=&quot;#enum.IntFlag&quot;&gt; &lt;code&gt;IntFlag&lt;/code&gt; &lt;/a&gt;成员也是&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; 的&lt;/a&gt;子类，所以可以将它们与它们组合：</target>
        </trans-unit>
        <trans-unit id="af4876b04dc65b9b21062f7a28c0edf2c6a14336" translate="yes" xml:space="preserve">
          <source>Because Enums are used to represent constants we recommend using UPPER_CASE names for enum members, and will be using that style in our examples.</source>
          <target state="translated">因为Enums是用来表示常量的,所以我们建议对enum成员使用UPPER_CASE的名称,并将在我们的例子中使用这种风格。</target>
        </trans-unit>
        <trans-unit id="5676d312428ed566fc5e55055b04a8a487aa66cb" translate="yes" xml:space="preserve">
          <source>Because NIS exists only on Unix systems, this module is only available for Unix.</source>
          <target state="translated">因为NIS只存在于Unix系统上,所以这个模块只适用于Unix。</target>
        </trans-unit>
        <trans-unit id="449b33e822195d1cb40d26026e8bbadbe72c580f" translate="yes" xml:space="preserve">
          <source>Because all asyncio subprocess functions are asynchronous and asyncio provides many tools to work with such functions, it is easy to execute and monitor multiple subprocesses in parallel. It is indeed trivial to modify the above example to run several commands simultaneously:</source>
          <target state="translated">因为所有的asyncio子进程函数都是异步的,而且asyncio提供了很多工具来处理这种函数,所以很容易并行执行和监控多个子进程。修改上面的例子来同时运行几个命令确实是小事一桩。</target>
        </trans-unit>
        <trans-unit id="cd024808dd20391db9a5d87efaaa473460d75e55" translate="yes" xml:space="preserve">
          <source>Because deep copy copies everything it may copy too much, such as data which is intended to be shared between copies.</source>
          <target state="translated">因为深层拷贝会拷贝所有东西,它可能会拷贝的太多,比如拷贝之间要共享的数据。</target>
        </trans-unit>
        <trans-unit id="6fe4a8056160b609c3f4db4e7d117d78cac2ac63" translate="yes" xml:space="preserve">
          <source>Because it requires the &lt;a href=&quot;termios#module-termios&quot;&gt;&lt;code&gt;termios&lt;/code&gt;&lt;/a&gt; module, it will work only on Unix.</source>
          <target state="translated">因为它需要&lt;a href=&quot;termios#module-termios&quot;&gt; &lt;code&gt;termios&lt;/code&gt; &lt;/a&gt;模块，所以它只能在Unix上工作。</target>
        </trans-unit>
        <trans-unit id="512d82a1a965117bb846701b126fb31120198553" translate="yes" xml:space="preserve">
          <source>Because it&amp;rsquo;s so flexible, &lt;a href=&quot;#xml.etree.ElementTree.XMLPullParser&quot;&gt;&lt;code&gt;XMLPullParser&lt;/code&gt;&lt;/a&gt; can be inconvenient to use for simpler use-cases. If you don&amp;rsquo;t mind your application blocking on reading XML data but would still like to have incremental parsing capabilities, take a look at &lt;a href=&quot;#xml.etree.ElementTree.iterparse&quot;&gt;&lt;code&gt;iterparse()&lt;/code&gt;&lt;/a&gt;. It can be useful when you&amp;rsquo;re reading a large XML document and don&amp;rsquo;t want to hold it wholly in memory.</source>
          <target state="translated">因为它是如此灵活，所以&lt;a href=&quot;#xml.etree.ElementTree.XMLPullParser&quot;&gt; &lt;code&gt;XMLPullParser&lt;/code&gt; &lt;/a&gt;可能不方便用于更简单的用例。如果您不介意应用程序阻塞读取XML数据，但仍希望具有增量解析功能，请查看&lt;a href=&quot;#xml.etree.ElementTree.iterparse&quot;&gt; &lt;code&gt;iterparse()&lt;/code&gt; &lt;/a&gt;。当您阅读大型XML文档并且不想将其完全保存在内存中时，此功能很有用。</target>
        </trans-unit>
        <trans-unit id="97e478af3d6ae73e7bc440c377cd0710be8dd209" translate="yes" xml:space="preserve">
          <source>Because magic methods are looked up differently from normal methods &lt;a href=&quot;#id9&quot; id=&quot;id7&quot;&gt;2&lt;/a&gt;, this support has been specially implemented. This means that only specific magic methods are supported. The supported list includes &lt;em&gt;almost&lt;/em&gt; all of them. If there are any missing that you need please let us know.</source>
          <target state="translated">由于查找魔术方法的方法与常规方法&lt;a href=&quot;#id9&quot; id=&quot;id7&quot;&gt;2&lt;/a&gt;不同，因此已特别实现了此支持。这意味着仅支持特定的魔术方法。支持的列表&lt;em&gt;几乎&lt;/em&gt;包括所有这些。如果您有任何遗漏，请告诉我们。</target>
        </trans-unit>
        <trans-unit id="ff5644c87e7d8c8596308ff2c76d404cdc5f9f5e" translate="yes" xml:space="preserve">
          <source>Because many of the traps are enabled, this context is useful for debugging.</source>
          <target state="translated">因为很多陷阱都被启用了,所以这个上下文对调试很有用。</target>
        </trans-unit>
        <trans-unit id="0682abf783b1442ff30ccebb13d38ee0bde7ce7f" translate="yes" xml:space="preserve">
          <source>Because mocks auto-create attributes on demand, and allow you to call them with arbitrary arguments, if you misspell one of these assert methods then your assertion is gone:</source>
          <target state="translated">因为嘲讽会根据需求自动创建属性,并允许你用任意的参数来调用它们,如果你拼错了其中的一个断言方法,那么你的断言就没有了。</target>
        </trans-unit>
        <trans-unit id="d2f324a634323f6253d750beb01677494c624217" translate="yes" xml:space="preserve">
          <source>Because most of the operations on any given type will be very similar, it can be useful to define a helper function which generates the forward and reverse instances of any given operator. For example, &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt;&lt;code&gt;fractions.Fraction&lt;/code&gt;&lt;/a&gt; uses:</source>
          <target state="translated">因为任何给定类型上的大多数操作都非常相似，所以定义一个辅助函数来生成任何给定运算符的正向和反向实例会很有用。例如，&lt;a href=&quot;fractions#fractions.Fraction&quot;&gt; &lt;code&gt;fractions.Fraction&lt;/code&gt; &lt;/a&gt;使用：</target>
        </trans-unit>
        <trans-unit id="f37e0b8c6e2c7fbb2cc8dfb353efdeb9905b90d4" translate="yes" xml:space="preserve">
          <source>Because multiple signatures (ie. overloading) is permitted, this method returns a list of signatures rather than a singleton.</source>
          <target state="translated">因为允许有多个签名(即重载),所以这个方法返回的是一个签名列表,而不是一个单子。</target>
        </trans-unit>
        <trans-unit id="f8d328dbf9ad55c5ef4fe48e9b55f65c19053b49" translate="yes" xml:space="preserve">
          <source>Because naive &lt;code&gt;datetime&lt;/code&gt; objects are treated by many &lt;code&gt;datetime&lt;/code&gt; methods as local times, it is preferred to use aware datetimes to represent times in UTC. As such, the recommended way to create an object representing a specific timestamp in UTC is by calling &lt;code&gt;datetime.fromtimestamp(timestamp, tz=timezone.utc)&lt;/code&gt;.</source>
          <target state="translated">因为许多 &lt;code&gt;datetime&lt;/code&gt; 方法都将朴素的 &lt;code&gt;datetime&lt;/code&gt; 对象视为本地时间，所以最好使用可感知的日期时间来表示UTC时间。因此，建议使用UTC创建代表特定时间戳记的对象的方法是调用 &lt;code&gt;datetime.fromtimestamp(timestamp, tz=timezone.utc)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6c258a614b92ea7ab843f0053cb8a4745997da95" translate="yes" xml:space="preserve">
          <source>Because naive &lt;code&gt;datetime&lt;/code&gt; objects are treated by many &lt;code&gt;datetime&lt;/code&gt; methods as local times, it is preferred to use aware datetimes to represent times in UTC. As such, the recommended way to create an object representing the current time in UTC is by calling &lt;code&gt;datetime.now(timezone.utc)&lt;/code&gt;.</source>
          <target state="translated">因为许多 &lt;code&gt;datetime&lt;/code&gt; 方法都将朴素的 &lt;code&gt;datetime&lt;/code&gt; 对象视为本地时间，所以最好使用可感知的日期时间来表示UTC时间。因此，建议使用UTC创建表示当前时间的对象的方法是调用 &lt;code&gt;datetime.now(timezone.utc)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f47a5630dcb74119e881ec10d145701d12e134d9" translate="yes" xml:space="preserve">
          <source>Because naive &lt;code&gt;datetime&lt;/code&gt; objects are treated by many &lt;code&gt;datetime&lt;/code&gt; methods as local times, it is preferred to use aware datetimes to represent times in UTC; as a result, using &lt;code&gt;utcfromtimetuple&lt;/code&gt; may give misleading results. If you have a naive &lt;code&gt;datetime&lt;/code&gt; representing UTC, use &lt;code&gt;datetime.replace(tzinfo=timezone.utc)&lt;/code&gt; to make it aware, at which point you can use &lt;a href=&quot;#datetime.datetime.timetuple&quot;&gt;&lt;code&gt;datetime.timetuple()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">由于许多 &lt;code&gt;datetime&lt;/code&gt; 方法都将朴素的 &lt;code&gt;datetime&lt;/code&gt; 对象视为本地时间，因此最好使用可感知的日期时间来表示UTC时间。结果，使用 &lt;code&gt;utcfromtimetuple&lt;/code&gt; 可能会产生误导性的结果。如果您有一个表示UTC 的原始 &lt;code&gt;datetime&lt;/code&gt; 时间，请使用 &lt;code&gt;datetime.replace(tzinfo=timezone.utc)&lt;/code&gt; 进行通知，此时可以使用&lt;a href=&quot;#datetime.datetime.timetuple&quot;&gt; &lt;code&gt;datetime.timetuple()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="05c1292e4567d219d1d4e44f189debf054b0b060" translate="yes" xml:space="preserve">
          <source>Because of Python semantics, a shelf cannot know when a mutable persistent-dictionary entry is modified. By default modified objects are written &lt;em&gt;only&lt;/em&gt; when assigned to the shelf (see &lt;a href=&quot;#shelve-example&quot;&gt;Example&lt;/a&gt;). If the optional &lt;em&gt;writeback&lt;/em&gt; parameter is set to &lt;code&gt;True&lt;/code&gt;, all entries accessed are also cached in memory, and written back on &lt;a href=&quot;#shelve.Shelf.sync&quot;&gt;&lt;code&gt;sync()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#shelve.Shelf.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;; this can make it handier to mutate mutable entries in the persistent dictionary, but, if many entries are accessed, it can consume vast amounts of memory for the cache, and it can make the close operation very slow since all accessed entries are written back (there is no way to determine which accessed entries are mutable, nor which ones were actually mutated).</source>
          <target state="translated">由于Python的语义，货架无法得知何时修改了可变持久词典条目。默认情况下，&lt;em&gt;仅&lt;/em&gt;在将修改后的对象分配到架子&lt;em&gt;时才&lt;/em&gt;写入它们（请参见&lt;a href=&quot;#shelve-example&quot;&gt;Example&lt;/a&gt;）。如果可选的&lt;em&gt;writeback&lt;/em&gt;参数设置为 &lt;code&gt;True&lt;/code&gt; ，则所有访问的条目也将缓存在内存中，并写回&lt;a href=&quot;#shelve.Shelf.sync&quot;&gt; &lt;code&gt;sync()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#shelve.Shelf.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;; 这样可以更容易地更改持久性字典中的可变条目，但是，如果访问了许多条目，则可能会占用大量内存用于缓存，并且由于所有访问的条目都被写回，因此它会使关闭操作非常慢（无法确定哪些访问的条目是可变的，也没有确定哪些实际上是突变的）。</target>
        </trans-unit>
        <trans-unit id="8a25338cf8065d3938e8ff0b097c26f981ba9436" translate="yes" xml:space="preserve">
          <source>Because of the way Tk handles the X option database, after Tix has been has imported and inited, it is not possible to reset the color schemes and font sets using the &lt;code&gt;tix_config()&lt;/code&gt; method. Instead, the &lt;a href=&quot;#tkinter.tix.tixCommand.tix_resetoptions&quot;&gt;&lt;code&gt;tix_resetoptions()&lt;/code&gt;&lt;/a&gt; method must be used.</source>
          <target state="translated">由于Tk处理X选项数据库的方式，在导入并初始化Tix之后，无法使用 &lt;code&gt;tix_config()&lt;/code&gt; 方法来重置配色方案和字体集。相反，必须使用&lt;a href=&quot;#tkinter.tix.tixCommand.tix_resetoptions&quot;&gt; &lt;code&gt;tix_resetoptions()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="80d71e1d1d10cd40808346877ec280d341096ac6" translate="yes" xml:space="preserve">
          <source>Because of the way mock attributes are stored you can&amp;rsquo;t directly attach a &lt;a href=&quot;#unittest.mock.PropertyMock&quot;&gt;&lt;code&gt;PropertyMock&lt;/code&gt;&lt;/a&gt; to a mock object. Instead you can attach it to the mock type object:</source>
          <target state="translated">由于模拟属性的存储方式，您无法直接将&lt;a href=&quot;#unittest.mock.PropertyMock&quot;&gt; &lt;code&gt;PropertyMock&lt;/code&gt; &lt;/a&gt;附加到模拟对象。相反，您可以将其附加到模拟类型对象：</target>
        </trans-unit>
        <trans-unit id="b5e20bbafee23cd5f05c72608abea4eaae32bb05" translate="yes" xml:space="preserve">
          <source>Because package metadata is not available through &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; searches, or package loaders directly, the metadata for a package is found through import system &lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#finders-and-loaders&quot;&gt;finders&lt;/a&gt;. To find a distribution package&amp;rsquo;s metadata, &lt;code&gt;importlib.metadata&lt;/code&gt; queries the list of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-meta-path-finder&quot;&gt;meta path finders&lt;/a&gt; on &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">由于无法通过&lt;a href=&quot;sys#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; &lt;/a&gt;搜索或直接通过程序包加载器获得程序包元数据，因此可以通过导入系统&lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#finders-and-loaders&quot;&gt;查找器&lt;/a&gt;找到程序包的元数据。为了找到一个分发包的元数据， &lt;code&gt;importlib.metadata&lt;/code&gt; 查询列表&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-meta-path-finder&quot;&gt;元路径查找器&lt;/a&gt;上&lt;a href=&quot;sys#sys.meta_path&quot;&gt; &lt;code&gt;sys.meta_path&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="400e21a04dc1ea4ab9991dc7b7931687ece1123f" translate="yes" xml:space="preserve">
          <source>Because package metadata is not available through &lt;code&gt;sys.path&lt;/code&gt; searches, or package loaders directly, the metadata for a package is found through import system &lt;a href=&quot;https://docs.python.org/3/reference/import.html#finders-and-loaders&quot;&gt;finders&lt;/a&gt;. To find a distribution package&amp;rsquo;s metadata, &lt;code&gt;importlib.metadata&lt;/code&gt; queries the list of &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-meta-path-finder&quot;&gt;meta path finders&lt;/a&gt; on &lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.meta_path&quot;&gt;sys.meta_path&lt;/a&gt;.</source>
          <target state="translated">由于无法通过 &lt;code&gt;sys.path&lt;/code&gt; 搜索或直接通过程序包加载器获得程序包元数据，因此可以通过导入系统&lt;a href=&quot;https://docs.python.org/3/reference/import.html#finders-and-loaders&quot;&gt;查找器&lt;/a&gt;找到程序包的元数据。为了找到一个分发包的元数据， &lt;code&gt;importlib.metadata&lt;/code&gt; 查询列表&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-meta-path-finder&quot;&gt;元路径查找器&lt;/a&gt;上&lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.meta_path&quot;&gt;sys.meta_path&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d55b59f6bf0508d0270277c6f73d5728e5bbe79f" translate="yes" xml:space="preserve">
          <source>Because portions of the configuration are passed through &lt;a href=&quot;functions#eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt;, use of this function may open its users to a security risk. While the function only binds to a socket on &lt;code&gt;localhost&lt;/code&gt;, and so does not accept connections from remote machines, there are scenarios where untrusted code could be run under the account of the process which calls &lt;a href=&quot;#logging.config.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt;. Specifically, if the process calling &lt;a href=&quot;#logging.config.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; runs on a multi-user machine where users cannot trust each other, then a malicious user could arrange to run essentially arbitrary code in a victim user&amp;rsquo;s process, simply by connecting to the victim&amp;rsquo;s &lt;a href=&quot;#logging.config.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; socket and sending a configuration which runs whatever code the attacker wants to have executed in the victim&amp;rsquo;s process. This is especially easy to do if the default port is used, but not hard even if a different port is used). To avoid the risk of this happening, use the &lt;code&gt;verify&lt;/code&gt; argument to &lt;a href=&quot;#logging.config.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; to prevent unrecognised configurations from being applied.</source>
          <target state="translated">由于部分配置是通过&lt;a href=&quot;functions#eval&quot;&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;/a&gt;传递的，因此使用此函数可能会使其用户面临安全风险。尽管该函数仅绑定到 &lt;code&gt;localhost&lt;/code&gt; 上的套接字，因此不接受来自远程计算机的连接，但在某些情况下，可以在调用&lt;a href=&quot;#logging.config.listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; &lt;/a&gt;的进程的帐户下运行不受信任的代码。具体来说，如果调用&lt;a href=&quot;#logging.config.listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; &lt;/a&gt;的进程在用户无法互相信任的多用户计算机上运行，​​则恶意用户可以通过连接到受害者的&lt;a href=&quot;#logging.config.listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; &lt;/a&gt;来安排在受害者用户的进程中运行基本上任意的代码。套接字并发送配置，该配置运行攻击者希望在受害者的进程中执行的任何代码。如果使用默认端口，这样做特别容易，但是即使使用其他端口也不难。为避免发生这种情况的风险，请使用 &lt;code&gt;verify&lt;/code&gt; 参数来&lt;a href=&quot;#logging.config.listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; &lt;/a&gt;以防止应用无法识别的配置。</target>
        </trans-unit>
        <trans-unit id="5624fe7445294e1d731602dabe55a2ad5baa3be9" translate="yes" xml:space="preserve">
          <source>Because pseudo-terminal handling is highly platform dependent, there is code to do it only for Linux. (The Linux code is supposed to work on other platforms, but hasn&amp;rsquo;t been tested yet.)</source>
          <target state="translated">由于伪终端处理高度依赖平台，因此有代码仅适用于Linux。（Linux代码应该可以在其他平台上运行，但是尚未经过测试。）</target>
        </trans-unit>
        <trans-unit id="d26513ebec365d3c671c97db0de645fa9c2e3b1f" translate="yes" xml:space="preserve">
          <source>Because strings cannot represent binary data, the &lt;a href=&quot;#email.generator.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; class must convert any binary data in any message it flattens to an ASCII compatible format, by converting them to an ASCII compatible &lt;em&gt;Content-Transfer_Encoding&lt;/em&gt;. Using the terminology of the email RFCs, you can think of this as &lt;a href=&quot;#email.generator.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; serializing to an I/O stream that is not &amp;ldquo;8 bit clean&amp;rdquo;. In other words, most applications will want to be using &lt;a href=&quot;#email.generator.BytesGenerator&quot;&gt;&lt;code&gt;BytesGenerator&lt;/code&gt;&lt;/a&gt;, and not &lt;a href=&quot;#email.generator.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">因为字符串不能表示二进制数据，所以&lt;a href=&quot;#email.generator.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt;类必须将其平整的任何消息中的任何二进制数据转换为ASCII兼容格式，方法是将它们转换为ASCII兼容&lt;em&gt;Content-Transfer_Encoding&lt;/em&gt;。使用电子邮件RFC的术语，您可以将其视为&lt;a href=&quot;#email.generator.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt;序列化为不是&amp;ldquo; 8位干净&amp;rdquo;的I / O流。换句话说，大多数应用程序将要使用&lt;a href=&quot;#email.generator.BytesGenerator&quot;&gt; &lt;code&gt;BytesGenerator&lt;/code&gt; &lt;/a&gt;而不是&lt;a href=&quot;#email.generator.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="89da8e115c0fb8ba5661a24d5093eacb1e6421a5" translate="yes" xml:space="preserve">
          <source>Because the &lt;a href=&quot;#module-shelve&quot;&gt;&lt;code&gt;shelve&lt;/code&gt;&lt;/a&gt; module is backed by &lt;a href=&quot;pickle#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt;, it is insecure to load a shelf from an untrusted source. Like with pickle, loading a shelf can execute arbitrary code.</source>
          <target state="translated">由于&lt;a href=&quot;#module-shelve&quot;&gt; &lt;code&gt;shelve&lt;/code&gt; &lt;/a&gt;模块由&lt;a href=&quot;pickle#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;支持，因此从不受信任的来源加载书架是不安全的。像泡菜一样，装载架子可以执行任意代码。</target>
        </trans-unit>
        <trans-unit id="73d13ce7f4ddc06362be70a3eb8a64c34f10a0b7" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;os.DirEntry&lt;/code&gt; methods can make operating system calls, they may also raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;. If you need very fine-grained control over errors, you can catch &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; when calling one of the &lt;code&gt;os.DirEntry&lt;/code&gt; methods and handle as appropriate.</source>
          <target state="translated">因为 &lt;code&gt;os.DirEntry&lt;/code&gt; 方法可以进行操作系统调用，所以它们也可能引发&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;。如果您需要对错误进行非常细粒度的控制，则可以在调用 &lt;code&gt;os.DirEntry&lt;/code&gt; 方法之一并适当处理时捕获&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f5cc4736c7fbeafded92a9d1efa62626a33de504" translate="yes" xml:space="preserve">
          <source>Because the default behavior of &lt;code&gt;Message.__setitem__&lt;/code&gt; is to append the value to the list of headers, it is easy to create duplicate headers without realizing it. This method allows certain headers to be limited in the number of instances of that header that may be added to a &lt;code&gt;Message&lt;/code&gt; programmatically. (The limit is not observed by the parser, which will faithfully produce as many headers as exist in the message being parsed.)</source>
          <target state="translated">由于 &lt;code&gt;Message.__setitem__&lt;/code&gt; 的默认行为是将值附加到标题列表中，因此很容易创建重复的标题而无需意识到。此方法允许将某些标头限制为可以通过编程方式添加到 &lt;code&gt;Message&lt;/code&gt; 中的该标头的实例数。（解析器未遵守该限制，解析器将忠实地生成与要解析的消息中存在的标头一样多的标头。）</target>
        </trans-unit>
        <trans-unit id="e508e7ca842cae56ee0fee2a7255d491cd76f437" translate="yes" xml:space="preserve">
          <source>Because the file name does not end with &lt;code&gt;.py&lt;/code&gt;, &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; infers that it must be run with &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt;, not &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">由于文件名不是以 &lt;code&gt;.py&lt;/code&gt; 结尾，因此&lt;a href=&quot;#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; &lt;/a&gt;推断它必须使用&lt;a href=&quot;#doctest.testfile&quot;&gt; &lt;code&gt;testfile()&lt;/code&gt; &lt;/a&gt;而不是&lt;a href=&quot;#doctest.testmod&quot;&gt; &lt;code&gt;testmod()&lt;/code&gt; &lt;/a&gt;来运行。</target>
        </trans-unit>
        <trans-unit id="7bdfdaaeb849970dad8f9e9818061fb878cb7999" translate="yes" xml:space="preserve">
          <source>Because the format depends on the current locale, care should be taken when making assumptions about the output value. Field orderings will vary (for example, &amp;ldquo;month/day/year&amp;rdquo; versus &amp;ldquo;day/month/year&amp;rdquo;), and the output may contain Unicode characters encoded using the locale&amp;rsquo;s default encoding (for example, if the current locale is &lt;code&gt;ja_JP&lt;/code&gt;, the default encoding could be any one of &lt;code&gt;eucJP&lt;/code&gt;, &lt;code&gt;SJIS&lt;/code&gt;, or &lt;code&gt;utf-8&lt;/code&gt;; use &lt;a href=&quot;locale#locale.getlocale&quot;&gt;&lt;code&gt;locale.getlocale()&lt;/code&gt;&lt;/a&gt; to determine the current locale&amp;rsquo;s encoding).</source>
          <target state="translated">由于格式取决于当前的语言环境，因此在对输出值进行假设时应格外小心。字段顺序将有所不同（例如，&amp;ldquo;月/日/年&amp;rdquo;与&amp;ldquo;日/月/年&amp;rdquo;），并且输出中可能包含使用语言环境默认编码编码的Unicode字符（例如，如果当前语言环境为 &lt;code&gt;ja_JP&lt;/code&gt; ，则默认编码可以是 &lt;code&gt;eucJP&lt;/code&gt; ， &lt;code&gt;SJIS&lt;/code&gt; 或 &lt;code&gt;utf-8&lt;/code&gt; 中的任何一种；请使用&lt;a href=&quot;locale#locale.getlocale&quot;&gt; &lt;code&gt;locale.getlocale()&lt;/code&gt; &lt;/a&gt;确定当前语言环境的编码）。</target>
        </trans-unit>
        <trans-unit id="19cc5a3ec7f1feac3debf6aac3103f1d83152c83" translate="yes" xml:space="preserve">
          <source>Because the module uses &lt;strong&gt;/bin/sh&lt;/strong&gt; command lines, a POSIX or compatible shell for &lt;a href=&quot;os#os.system&quot;&gt;&lt;code&gt;os.system()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;os#os.popen&quot;&gt;&lt;code&gt;os.popen()&lt;/code&gt;&lt;/a&gt; is required.</source>
          <target state="translated">由于模块使用&lt;strong&gt;/ bin / sh&lt;/strong&gt;命令行，因此需要POSIX或&lt;a href=&quot;os#os.system&quot;&gt; &lt;code&gt;os.system()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;os#os.popen&quot;&gt; &lt;code&gt;os.popen()&lt;/code&gt; &lt;/a&gt;兼容的外壳。</target>
        </trans-unit>
        <trans-unit id="3f1f9af0dfdfed0a5be1b6b9e51ad5d7c030fac2" translate="yes" xml:space="preserve">
          <source>Because the pattern is passed into &lt;code&gt;load_tests&lt;/code&gt; the package is free to continue (and potentially modify) test discovery. A &amp;lsquo;do nothing&amp;rsquo; &lt;code&gt;load_tests&lt;/code&gt; function for a test package would look like:</source>
          <target state="translated">由于该模式已传递到 &lt;code&gt;load_tests&lt;/code&gt; 中,因此程序包可以自由继续（并可能修改）测试发现。测试包的&amp;ldquo;不执行任何操作&amp;rdquo; &lt;code&gt;load_tests&lt;/code&gt; 函数如下所示：</target>
        </trans-unit>
        <trans-unit id="b7eeaba1ce3974d485fc10bfd66f07a672724c5b" translate="yes" xml:space="preserve">
          <source>Because the traps are disabled, this context is useful for applications that prefer to have result value of &lt;code&gt;NaN&lt;/code&gt; or &lt;code&gt;Infinity&lt;/code&gt; instead of raising exceptions. This allows an application to complete a run in the presence of conditions that would otherwise halt the program.</source>
          <target state="translated">因为禁用了陷阱，所以此上下文对于希望具有 &lt;code&gt;NaN&lt;/code&gt; 或 &lt;code&gt;Infinity&lt;/code&gt; 的结果值而不是引发异常的应用程序很有用。这允许应用程序在可能会导致程序停止的条件下完成运行。</target>
        </trans-unit>
        <trans-unit id="85f8021b79e3f19e12b4eea6f7791f976cf9c551" translate="yes" xml:space="preserve">
          <source>Because this function has rather complex behavior (especially when custom event loop policies are in use), using the &lt;a href=&quot;#asyncio.get_running_loop&quot;&gt;&lt;code&gt;get_running_loop()&lt;/code&gt;&lt;/a&gt; function is preferred to &lt;a href=&quot;#asyncio.get_event_loop&quot;&gt;&lt;code&gt;get_event_loop()&lt;/code&gt;&lt;/a&gt; in coroutines and callbacks.</source>
          <target state="translated">因为此函数的行为相当复杂（尤其是在使用自定义事件循环策略时），所以在协程和回调中，与&lt;a href=&quot;#asyncio.get_event_loop&quot;&gt; &lt;code&gt;get_event_loop()&lt;/code&gt; 相比&lt;/a&gt;，首选使用&lt;a href=&quot;#asyncio.get_running_loop&quot;&gt; &lt;code&gt;get_running_loop()&lt;/code&gt; &lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="945f996940a3d1a131b75aea9889abba3eb63002" translate="yes" xml:space="preserve">
          <source>Because this is a naive &lt;code&gt;datetime&lt;/code&gt; it will be interpreted as a UTC timestamp, and the resulting value will have a timezone of &lt;code&gt;-0000&lt;/code&gt;. Much more useful is to use the &lt;a href=&quot;email.utils#email.utils.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; function from the &lt;a href=&quot;email.utils#module-email.utils&quot;&gt;&lt;code&gt;utils&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">因为这是一个简单的 &lt;code&gt;datetime&lt;/code&gt; ，它将被解释为UTC时间戳，并且结果值的时区为 &lt;code&gt;-0000&lt;/code&gt; 。更有用的是使用&lt;a href=&quot;email.utils#module-email.utils&quot;&gt; &lt;code&gt;utils&lt;/code&gt; &lt;/a&gt;模块中的&lt;a href=&quot;email.utils#email.utils.localtime&quot;&gt; &lt;code&gt;localtime()&lt;/code&gt; &lt;/a&gt;函数：</target>
        </trans-unit>
        <trans-unit id="aa017ba24b44b99db1534c67404110bcb6547224" translate="yes" xml:space="preserve">
          <source>Beep the PC&amp;rsquo;s speaker. The &lt;em&gt;frequency&lt;/em&gt; parameter specifies frequency, in hertz, of the sound, and must be in the range 37 through 32,767. The &lt;em&gt;duration&lt;/em&gt; parameter specifies the number of milliseconds the sound should last. If the system is not able to beep the speaker, &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">发出哔哔声。的&lt;em&gt;频率&lt;/em&gt;参数指定的频率，以赫兹为单位的声音的，并且必须通过32767在范围37。在&lt;em&gt;时间&lt;/em&gt;参数指定毫秒的声音应该持续数。如果系统无法发出蜂鸣声，则会引发&lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="20b32ebd2fd01cdbc476b447b812c4f108a6392b" translate="yes" xml:space="preserve">
          <source>Before &lt;a href=&quot;#itertools.product&quot;&gt;&lt;code&gt;product()&lt;/code&gt;&lt;/a&gt; runs, it completely consumes the input iterables, keeping pools of values in memory to generate the products. Accordingly, it only useful with finite inputs.</source>
          <target state="translated">在&lt;a href=&quot;#itertools.product&quot;&gt; &lt;code&gt;product()&lt;/code&gt; &lt;/a&gt;运行之前，它会完全消耗输入的可迭代对象，并在内存中保留值池以生成产品。因此，它仅对有限输入有用。</target>
        </trans-unit>
        <trans-unit id="9decded3226de91a3370052bd429264360dba835" translate="yes" xml:space="preserve">
          <source>Before I explain how auto-speccing works, here&amp;rsquo;s why it is needed.</source>
          <target state="translated">在解释自动指定的工作原理之前，这就是为什么需要它的原因。</target>
        </trans-unit>
        <trans-unit id="648ed538fe4d41e0992f761cec23ce4dc2546702" translate="yes" xml:space="preserve">
          <source>Before Python 3.6, when printing a dict, Python did not guarantee that the key-value pairs was printed in any particular order.</source>
          <target state="translated">在 Python 3.6 之前,当打印 dict 时,Python 并不保证键值对以任何特定的顺序打印。</target>
        </trans-unit>
        <trans-unit id="46d337986d57f221ecbc2aaa26bd0ab430008b76" translate="yes" xml:space="preserve">
          <source>Before the end of the stream is reached, this will be &lt;code&gt;b&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">在到达流的末尾之前，这将是 &lt;code&gt;b&quot;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48c0f47c1261299c0864a67fc685c6a3005db48e" translate="yes" xml:space="preserve">
          <source>Before we move on calling functions with other parameter types, we have to learn more about &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; data types.</source>
          <target state="translated">在继续使用其他参数类型调用函数之前，我们必须了解有关&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; &lt;/a&gt;数据类型的更多信息。</target>
        </trans-unit>
        <trans-unit id="483be28c0eaadf9f1aa628c534f11b5e079a5451" translate="yes" xml:space="preserve">
          <source>Before you can write to or read from an audio device, you must call three methods in the correct order:</source>
          <target state="translated">在向音频设备写入或读取之前,必须以正确的顺序调用三个方法。</target>
        </trans-unit>
        <trans-unit id="c68a6e6a64dac6bce2f425b8bf2ec3d1606a381e" translate="yes" xml:space="preserve">
          <source>Beg (beginning)</source>
          <target state="translated">开始</target>
        </trans-unit>
        <trans-unit id="40f9d4d10702ae8642d1d7383cb9d28d940dec80" translate="yes" xml:space="preserve">
          <source>Begin autoincrement mode: schedules a recurring timer event that calls &lt;a href=&quot;#tkinter.ttk.Progressbar.step&quot;&gt;&lt;code&gt;Progressbar.step()&lt;/code&gt;&lt;/a&gt; every &lt;em&gt;interval&lt;/em&gt; milliseconds. If omitted, &lt;em&gt;interval&lt;/em&gt; defaults to 50 milliseconds.</source>
          <target state="translated">开始自动递增模式：安排一个调用重复计时器事件&lt;a href=&quot;#tkinter.ttk.Progressbar.step&quot;&gt; &lt;code&gt;Progressbar.step()&lt;/code&gt; &lt;/a&gt;每&lt;em&gt;间隔&lt;/em&gt;毫秒。如果省略，则&lt;em&gt;间隔&lt;/em&gt;默认为50毫秒。</target>
        </trans-unit>
        <trans-unit id="1fa1a5c3ae45577ab117ab821ac5874e521c6ac6" translate="yes" xml:space="preserve">
          <source>Begin by writing &lt;code&gt;import cgi&lt;/code&gt;.</source>
          <target state="translated">首先编写 &lt;code&gt;import cgi&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d21290f4ef30d771e174960f4bd7877417e7b443" translate="yes" xml:space="preserve">
          <source>Begin the scope of a prefix-URI Namespace mapping.</source>
          <target state="translated">开始前缀-URI命名空间映射的范围。</target>
        </trans-unit>
        <trans-unit id="df80a1098d80f4a77aa0c5fa9359c3f1b5d396a4" translate="yes" xml:space="preserve">
          <source>Behavior is the same as in &lt;a href=&quot;threading#threading.Lock.release&quot;&gt;&lt;code&gt;threading.Lock.release()&lt;/code&gt;&lt;/a&gt; except that when invoked on an unlocked lock, a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">行为与&lt;a href=&quot;threading#threading.Lock.release&quot;&gt; &lt;code&gt;threading.Lock.release()&lt;/code&gt; 中的&lt;/a&gt;行为相同，除了在解锁锁上调用时会引发&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa8a60766ac333f80dc11610250a1865830afb33" translate="yes" xml:space="preserve">
          <source>Behind the scenes, the &lt;a href=&quot;#ctypes.pointer&quot;&gt;&lt;code&gt;pointer()&lt;/code&gt;&lt;/a&gt; function does more than simply create pointer instances, it has to create pointer &lt;em&gt;types&lt;/em&gt; first. This is done with the &lt;a href=&quot;#ctypes.POINTER&quot;&gt;&lt;code&gt;POINTER()&lt;/code&gt;&lt;/a&gt; function, which accepts any &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; type, and returns a new type:</source>
          <target state="translated">在幕后，&lt;a href=&quot;#ctypes.pointer&quot;&gt; &lt;code&gt;pointer()&lt;/code&gt; &lt;/a&gt;函数所做的不仅仅是简单地创建指针实例，它还必须首先创建指针&lt;em&gt;类型&lt;/em&gt;。这是通过&lt;a href=&quot;#ctypes.POINTER&quot;&gt; &lt;code&gt;POINTER()&lt;/code&gt; &lt;/a&gt;函数完成的，该函数接受任何&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; &lt;/a&gt;类型，并返回一个新类型：</target>
        </trans-unit>
        <trans-unit id="bca285402106aa0f0f7b601a2f8df4f157534b63" translate="yes" xml:space="preserve">
          <source>Being able to tell if a line of input completes a Python statement: in short, telling whether to print &amp;lsquo;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&amp;rsquo; or &amp;lsquo;&lt;code&gt;...&lt;/code&gt;&amp;rsquo; next.</source>
          <target state="translated">能够判断输入行是否完成了Python语句：简而言之，告诉接下来要打印' &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; '还是' &lt;code&gt;...&lt;/code&gt; '。</target>
        </trans-unit>
        <trans-unit id="d4198662a72fd519a4f968a74051bafac710dc07" translate="yes" xml:space="preserve">
          <source>Bell</source>
          <target state="translated">Bell</target>
        </trans-unit>
        <trans-unit id="f8c124cc977ebefe3c2c86720bb514be851e243e" translate="yes" xml:space="preserve">
          <source>Below are some examples of typical usage of the &lt;a href=&quot;#module-bz2&quot;&gt;&lt;code&gt;bz2&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">以下是&lt;a href=&quot;#module-bz2&quot;&gt; &lt;code&gt;bz2&lt;/code&gt; &lt;/a&gt;模块典型用法的一些示例。</target>
        </trans-unit>
        <trans-unit id="5d357b659dbe283278a24199979dd7871083127a" translate="yes" xml:space="preserve">
          <source>Below is a table mapping various &lt;a href=&quot;os#module-os&quot;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt; functions to their corresponding &lt;a href=&quot;#pathlib.PurePath&quot;&gt;&lt;code&gt;PurePath&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#pathlib.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; equivalent.</source>
          <target state="translated">下表是将各种&lt;a href=&quot;os#module-os&quot;&gt; &lt;code&gt;os&lt;/code&gt; &lt;/a&gt;函数映射到其对应的&lt;a href=&quot;#pathlib.PurePath&quot;&gt; &lt;code&gt;PurePath&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#pathlib.Path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; 的表&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ab4a051ee0b5f6099448f93c169d9e07992b08e7" translate="yes" xml:space="preserve">
          <source>Below is an example session with logging turned on:</source>
          <target state="translated">下面是一个开启了日志记录的实例会话。</target>
        </trans-unit>
        <trans-unit id="a1129a8f113198207df5b47176143371497861ab" translate="yes" xml:space="preserve">
          <source>Below is an example where a number of ctypes objects are modified by a child process:</source>
          <target state="translated">下面是一个例子,一些ctypes对象被子进程修改。</target>
        </trans-unit>
        <trans-unit id="3e802043d7d026781c9db6d85cb3061d11ca8b23" translate="yes" xml:space="preserve">
          <source>Besides the methods described below, the &lt;code&gt;ttk.Widget&lt;/code&gt; supports the methods &lt;code&gt;tkinter.Widget.cget()&lt;/code&gt; and &lt;code&gt;tkinter.Widget.configure()&lt;/code&gt;.</source>
          <target state="translated">除了下面描述的方法外， &lt;code&gt;ttk.Widget&lt;/code&gt; 还支持方法 &lt;code&gt;tkinter.Widget.cget()&lt;/code&gt; 和 &lt;code&gt;tkinter.Widget.configure()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2e1367870fdc44f776287e47700c866b325754e2" translate="yes" xml:space="preserve">
          <source>Besides the methods inherited from &lt;a href=&quot;#tkinter.ttk.Widget&quot;&gt;&lt;code&gt;Widget&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;Widget.cget()&lt;/code&gt;, &lt;code&gt;Widget.configure()&lt;/code&gt;, &lt;a href=&quot;#tkinter.ttk.Widget.identify&quot;&gt;&lt;code&gt;Widget.identify()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tkinter.ttk.Widget.instate&quot;&gt;&lt;code&gt;Widget.instate()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#tkinter.ttk.Widget.state&quot;&gt;&lt;code&gt;Widget.state()&lt;/code&gt;&lt;/a&gt;, and the following inherited from &lt;code&gt;Entry&lt;/code&gt;: &lt;code&gt;Entry.bbox()&lt;/code&gt;, &lt;code&gt;Entry.delete()&lt;/code&gt;, &lt;code&gt;Entry.icursor()&lt;/code&gt;, &lt;code&gt;Entry.index()&lt;/code&gt;, &lt;code&gt;Entry.insert()&lt;/code&gt;, &lt;code&gt;Entry.selection()&lt;/code&gt;, &lt;code&gt;Entry.xview()&lt;/code&gt;, it has some other methods, described at &lt;code&gt;ttk.Combobox&lt;/code&gt;.</source>
          <target state="translated">除了从&lt;a href=&quot;#tkinter.ttk.Widget&quot;&gt; &lt;code&gt;Widget&lt;/code&gt; &lt;/a&gt;继承的方法： &lt;code&gt;Widget.cget()&lt;/code&gt; ， &lt;code&gt;Widget.configure()&lt;/code&gt; ，&lt;a href=&quot;#tkinter.ttk.Widget.identify&quot;&gt; &lt;code&gt;Widget.identify()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#tkinter.ttk.Widget.instate&quot;&gt; &lt;code&gt;Widget.instate()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#tkinter.ttk.Widget.state&quot;&gt; &lt;code&gt;Widget.state()&lt;/code&gt; &lt;/a&gt;，以及从 &lt;code&gt;Entry&lt;/code&gt; 继承的以下方法： &lt;code&gt;Entry.bbox()&lt;/code&gt; ， &lt;code&gt;Entry.delete()&lt;/code&gt; ， &lt;code&gt;Entry.icursor()&lt;/code&gt; ， &lt;code&gt;Entry.index()&lt;/code&gt; ， &lt;code&gt;Entry.insert()&lt;/code&gt; ， &lt;code&gt;Entry.selection()&lt;/code&gt; ， &lt;code&gt;Entry.xview()&lt;/code&gt; ，它还有一些其他方法，在 &lt;code&gt;ttk.Combobox&lt;/code&gt; 中进行了介绍。</target>
        </trans-unit>
        <trans-unit id="19f831523d7c6cadde7e0cb39c81a22ba24bb9ec" translate="yes" xml:space="preserve">
          <source>Besides the methods inherited from &lt;a href=&quot;#tkinter.ttk.Widget&quot;&gt;&lt;code&gt;Widget&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;Widget.cget()&lt;/code&gt;, &lt;code&gt;Widget.configure()&lt;/code&gt;, &lt;a href=&quot;#tkinter.ttk.Widget.identify&quot;&gt;&lt;code&gt;Widget.identify()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tkinter.ttk.Widget.instate&quot;&gt;&lt;code&gt;Widget.instate()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#tkinter.ttk.Widget.state&quot;&gt;&lt;code&gt;Widget.state()&lt;/code&gt;&lt;/a&gt;, and the following inherited from &lt;code&gt;Entry&lt;/code&gt;: &lt;code&gt;Entry.bbox()&lt;/code&gt;, &lt;code&gt;Entry.delete()&lt;/code&gt;, &lt;code&gt;Entry.icursor()&lt;/code&gt;, &lt;code&gt;Entry.index()&lt;/code&gt;, &lt;code&gt;Entry.insert()&lt;/code&gt;, &lt;code&gt;Entry.xview()&lt;/code&gt;, it has some other methods, described at &lt;code&gt;ttk.Spinbox&lt;/code&gt;.</source>
          <target state="translated">除了从&lt;a href=&quot;#tkinter.ttk.Widget&quot;&gt; &lt;code&gt;Widget&lt;/code&gt; &lt;/a&gt;继承的方法： &lt;code&gt;Widget.cget()&lt;/code&gt; ， &lt;code&gt;Widget.configure()&lt;/code&gt; ，&lt;a href=&quot;#tkinter.ttk.Widget.identify&quot;&gt; &lt;code&gt;Widget.identify()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#tkinter.ttk.Widget.instate&quot;&gt; &lt;code&gt;Widget.instate()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#tkinter.ttk.Widget.state&quot;&gt; &lt;code&gt;Widget.state()&lt;/code&gt; &lt;/a&gt;，以及从 &lt;code&gt;Entry&lt;/code&gt; 继承的以下方法： &lt;code&gt;Entry.bbox()&lt;/code&gt; ， &lt;code&gt;Entry.delete()&lt;/code&gt; ， &lt;code&gt;Entry.icursor()&lt;/code&gt; ， &lt;code&gt;Entry.index()&lt;/code&gt; ， &lt;code&gt;Entry.insert()&lt;/code&gt; ， &lt;code&gt;Entry.xview()&lt;/code&gt; ，它还有其他一些方法，在 &lt;code&gt;ttk.Spinbox&lt;/code&gt; 中进行了介绍。</target>
        </trans-unit>
        <trans-unit id="2c3ff9eb01f9273b0084e00951f1623a111bedef" translate="yes" xml:space="preserve">
          <source>Besides, only the main thread is allowed to set a new signal handler.</source>
          <target state="translated">此外,只有主线程可以设置新的信号处理程序。</target>
        </trans-unit>
        <trans-unit id="49aeffbbcfcc4f4ba7dd665a66bd39194335e4c7" translate="yes" xml:space="preserve">
          <source>Besides, only the main thread of the main interpreter is allowed to set a new signal handler.</source>
          <target state="translated">此外,只有主解释器的主线程才允许设置新的信号处理程序。</target>
        </trans-unit>
        <trans-unit id="bf8d3be729847deb19b6a44bdd74975d6befe47c" translate="yes" xml:space="preserve">
          <source>Besides, the &lt;a href=&quot;#io.BufferedIOBase.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; method does not have a default implementation that defers to &lt;a href=&quot;#io.BufferedIOBase.readinto&quot;&gt;&lt;code&gt;readinto()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">此外，&lt;a href=&quot;#io.BufferedIOBase.read&quot;&gt; &lt;code&gt;read()&lt;/code&gt; &lt;/a&gt;方法没有默认的实现，它默认为&lt;a href=&quot;#io.BufferedIOBase.readinto&quot;&gt; &lt;code&gt;readinto()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e83a3ab69e9fd0abbfb55d96374f52bcbc103b5f" translate="yes" xml:space="preserve">
          <source>Best defaults</source>
          <target state="translated">最佳默认值</target>
        </trans-unit>
        <trans-unit id="a5e1caaf3a558a5215965e11aae5b2c42a62435b" translate="yes" xml:space="preserve">
          <source>Best practice is to omit the traceback stack, unless it adds significant documentation value to the example. So the last example is probably better as:</source>
          <target state="translated">最好的做法是省略回溯栈,除非它为这个例子增加了重要的文档价值。所以最后一个例子可能更好的是。</target>
        </trans-unit>
        <trans-unit id="fb8df3d1388d60aad85d2be198e574d70525685d" translate="yes" xml:space="preserve">
          <source>Beta distribution. Conditions on the parameters are &lt;code&gt;alpha &amp;gt; 0&lt;/code&gt; and &lt;code&gt;beta &amp;gt; 0&lt;/code&gt;. Returned values range between 0 and 1.</source>
          <target state="translated">Beta发行版。参数的条件是 &lt;code&gt;alpha &amp;gt; 0&lt;/code&gt; 和 &lt;code&gt;beta &amp;gt; 0&lt;/code&gt; 。返回值的范围是0到1。</target>
        </trans-unit>
        <trans-unit id="d8ba6dd6cc0d2b6353ea52b89942547287c30fad" translate="yes" xml:space="preserve">
          <source>Better to inherit than pickle/unpickle</source>
          <target state="translated">继承比腌制/不腌制更好</target>
        </trans-unit>
        <trans-unit id="9c1dda353e343c24e7708a72b54529d23347826a" translate="yes" xml:space="preserve">
          <source>Between -999999999 and 999999999 inclusive</source>
          <target state="translated">在-999999999999和999999999999之间(含)。</target>
        </trans-unit>
        <trans-unit id="b6c74a472b928b3de7f142f2f611644179e766ce" translate="yes" xml:space="preserve">
          <source>Between 0 and 86399 inclusive</source>
          <target state="translated">0至86399(含)之间</target>
        </trans-unit>
        <trans-unit id="954ca93f131384b9558ca914d678c167bd92e718" translate="yes" xml:space="preserve">
          <source>Between 0 and 999999 inclusive</source>
          <target state="translated">0到999999之间(含)</target>
        </trans-unit>
        <trans-unit id="ed2cf7c590b6e7f609a00c26affc3a6e2749ead7" translate="yes" xml:space="preserve">
          <source>Between 1 and 12 inclusive.</source>
          <target state="translated">1至12岁(含)之间。</target>
        </trans-unit>
        <trans-unit id="08bfcd2e1cae8c1d62e31e45c7e3c998b88e587e" translate="yes" xml:space="preserve">
          <source>Between 1 and the number of days in the given month of the given year.</source>
          <target state="translated">1和某年某月的天数之间。</target>
        </trans-unit>
        <trans-unit id="74437956ab6159c55badf4bbc91e7ad2175fad4e" translate="yes" xml:space="preserve">
          <source>Between &lt;a href=&quot;#datetime.MINYEAR&quot;&gt;&lt;code&gt;MINYEAR&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#datetime.MAXYEAR&quot;&gt;&lt;code&gt;MAXYEAR&lt;/code&gt;&lt;/a&gt; inclusive.</source>
          <target state="translated">在&lt;a href=&quot;#datetime.MINYEAR&quot;&gt; &lt;code&gt;MINYEAR&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#datetime.MAXYEAR&quot;&gt; &lt;code&gt;MAXYEAR&lt;/code&gt; (&lt;/a&gt;含）之间。</target>
        </trans-unit>
        <trans-unit id="4c36aee3637e0b2b5bfaa0e70a4ebeb4eee3c90f" translate="yes" xml:space="preserve">
          <source>Between the sending side and the receiving side, the communications system is free to implement its own transfer mechanism for out-of-band buffers. Potential optimizations include the use of shared memory or datatype-dependent compression.</source>
          <target state="translated">在发送端和接收端之间,通信系统可以自由实现自己的带外缓冲区传输机制。潜在的优化包括使用共享内存或依赖数据类型的压缩。</target>
        </trans-unit>
        <trans-unit id="dc3aa2f92c76e508acf2bfaca08ad2ba1baa2d87" translate="yes" xml:space="preserve">
          <source>Beware of replacing &lt;a href=&quot;sys#sys.stdin&quot;&gt;&lt;code&gt;sys.stdin&lt;/code&gt;&lt;/a&gt; with a &amp;ldquo;file like object&amp;rdquo;</source>
          <target state="translated">当心用&amp;ldquo;类似于对象的文件&amp;rdquo; 替换&lt;a href=&quot;sys#sys.stdin&quot;&gt; &lt;code&gt;sys.stdin&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c9a0688daec7baa0367d0ff67569d3d33eb4a71a" translate="yes" xml:space="preserve">
          <source>Beyond &lt;code&gt;sys.argv&lt;/code&gt;</source>
          <target state="translated">超越 &lt;code&gt;sys.argv&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="892bf0fc9ced21536073b10f72d8a317557e88d9" translate="yes" xml:space="preserve">
          <source>Binary Data</source>
          <target state="translated">二进制数据</target>
        </trans-unit>
        <trans-unit id="74dc05f939b4de6df10ded1ad85cd87cf64bc9f7" translate="yes" xml:space="preserve">
          <source>Binary Data Services</source>
          <target state="translated">二进制数据服务</target>
        </trans-unit>
        <trans-unit id="077a15b13db556c78b4bfbf28994d6f478f129e0" translate="yes" xml:space="preserve">
          <source>Binary I/O</source>
          <target state="translated">二进制I/O</target>
        </trans-unit>
        <trans-unit id="0c9ab2e214f4e3d68626fcb0f6f6f4976f56998f" translate="yes" xml:space="preserve">
          <source>Binary I/O (also called &lt;em&gt;buffered I/O&lt;/em&gt;) expects &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; and produces &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; objects. No encoding, decoding, or newline translation is performed. This category of streams can be used for all kinds of non-text data, and also when manual control over the handling of text data is desired.</source>
          <target state="translated">二进制I / O（也称为&lt;em&gt;缓冲I / O&lt;/em&gt;）需要&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;类似字节的对象&lt;/a&gt;并生成&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;对象。不执行编码，解码或换行转换。此类流可用于所有类型的非文本数据，并且还可以用于需要手动控制文本数据处理的情况。</target>
        </trans-unit>
        <trans-unit id="670fe96f19bc636b28e8bbfc569f0fe00c664e38" translate="yes" xml:space="preserve">
          <source>Binary I/O (also called &lt;em&gt;buffered I/O&lt;/em&gt;) expects &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; and produces &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; objects. No encoding, decoding, or newline translation is performed. This category of streams can be used for all kinds of non-text data, and also when manual control over the handling of text data is desired.</source>
          <target state="translated">二进制I / O（也称为&lt;em&gt;缓冲I / O&lt;/em&gt;）需要&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;类似字节的对象&lt;/a&gt;并产生&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;对象。不执行编码，解码或换行转换。此类流可用于所有类型的非文本数据，并且还可以用于需要手动控制文本数据处理的情况。</target>
        </trans-unit>
        <trans-unit id="9d18c326fb8b019f2ba7dcc08e612917c6ba14d2" translate="yes" xml:space="preserve">
          <source>Binary Objects</source>
          <target state="translated">二进制对象</target>
        </trans-unit>
        <trans-unit id="9cf3342675aa01229892e963ccc770d42fd0df53" translate="yes" xml:space="preserve">
          <source>Binary Sequence Types &amp;mdash; &lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;memoryview&lt;/code&gt;</source>
          <target state="translated">二进制序列类型- &lt;code&gt;bytes&lt;/code&gt; ， &lt;code&gt;bytearray&lt;/code&gt; ， &lt;code&gt;memoryview&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5926a354af36f8d3a781a27eef2ef8a43ed8d3ed" translate="yes" xml:space="preserve">
          <source>Binary Sequence Types &amp;mdash; bytes, bytearray, memoryview</source>
          <target state="translated">二进制序列类型-字节，字节数组，内存视图</target>
        </trans-unit>
        <trans-unit id="3926624312f99b7ac129db6c0c454a3ff48903bd" translate="yes" xml:space="preserve">
          <source>Binary Transforms</source>
          <target state="translated">二进制变换</target>
        </trans-unit>
        <trans-unit id="21fe5e3cd9c91723a039c52415394d9d03534dd3" translate="yes" xml:space="preserve">
          <source>Binary buffered objects (instances of &lt;a href=&quot;#io.BufferedReader&quot;&gt;&lt;code&gt;BufferedReader&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#io.BufferedWriter&quot;&gt;&lt;code&gt;BufferedWriter&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#io.BufferedRandom&quot;&gt;&lt;code&gt;BufferedRandom&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#io.BufferedRWPair&quot;&gt;&lt;code&gt;BufferedRWPair&lt;/code&gt;&lt;/a&gt;) are not reentrant. While reentrant calls will not happen in normal situations, they can arise from doing I/O in a &lt;a href=&quot;signal#module-signal&quot;&gt;&lt;code&gt;signal&lt;/code&gt;&lt;/a&gt; handler. If a thread tries to re-enter a buffered object which it is already accessing, a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised. Note this doesn&amp;rsquo;t prohibit a different thread from entering the buffered object.</source>
          <target state="translated">二进制缓冲对象（&lt;a href=&quot;#io.BufferedReader&quot;&gt; &lt;code&gt;BufferedReader&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#io.BufferedWriter&quot;&gt; &lt;code&gt;BufferedWriter&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#io.BufferedRandom&quot;&gt; &lt;code&gt;BufferedRandom&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#io.BufferedRWPair&quot;&gt; &lt;code&gt;BufferedRWPair&lt;/code&gt; 的&lt;/a&gt;实例）不是可重入的。尽管在正常情况下不会发生可重入调用，但是它们可能是由于在&lt;a href=&quot;signal#module-signal&quot;&gt; &lt;code&gt;signal&lt;/code&gt; &lt;/a&gt;处理程序中执行I / O而引起的。如果线程试图重新输入已经访问的缓冲对象，则会引发&lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;。请注意，这并不禁止其他线程进入缓冲对象。</target>
        </trans-unit>
        <trans-unit id="4406f8baf70aa1a1308d895faa78af8d9e41d899" translate="yes" xml:space="preserve">
          <source>Binary buffered objects (instances of &lt;a href=&quot;#io.BufferedReader&quot;&gt;&lt;code&gt;BufferedReader&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#io.BufferedWriter&quot;&gt;&lt;code&gt;BufferedWriter&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#io.BufferedRandom&quot;&gt;&lt;code&gt;BufferedRandom&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#io.BufferedRWPair&quot;&gt;&lt;code&gt;BufferedRWPair&lt;/code&gt;&lt;/a&gt;) protect their internal structures using a lock; it is therefore safe to call them from multiple threads at once.</source>
          <target state="translated">二进制缓冲对象（&lt;a href=&quot;#io.BufferedReader&quot;&gt; &lt;code&gt;BufferedReader&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#io.BufferedWriter&quot;&gt; &lt;code&gt;BufferedWriter&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#io.BufferedRandom&quot;&gt; &lt;code&gt;BufferedRandom&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#io.BufferedRWPair&quot;&gt; &lt;code&gt;BufferedRWPair&lt;/code&gt; 的&lt;/a&gt;实例）使用锁来保护其内部结构；因此，可以安全地一次从多个线程中调用它们。</target>
        </trans-unit>
        <trans-unit id="62f7f2783ce89c5bb6d5fe79cd3bd1c11179b462" translate="yes" xml:space="preserve">
          <source>Binary data in any form.</source>
          <target state="translated">任何形式的二进制数据。</target>
        </trans-unit>
        <trans-unit id="b418b66c57a5a2313398824ab306a08b3b9421cc" translate="yes" xml:space="preserve">
          <source>Binary files are buffered in fixed-size chunks; the size of the buffer is chosen using a heuristic trying to determine the underlying device&amp;rsquo;s &amp;ldquo;block size&amp;rdquo; and falling back on &lt;a href=&quot;io#io.DEFAULT_BUFFER_SIZE&quot;&gt;&lt;code&gt;io.DEFAULT_BUFFER_SIZE&lt;/code&gt;&lt;/a&gt;. On many systems, the buffer will typically be 4096 or 8192 bytes long.</source>
          <target state="translated">二进制文件以固定大小的块缓冲；缓冲区的大小是通过试探法来确定底层设备的&amp;ldquo;块大小&amp;rdquo;，然后使用&lt;a href=&quot;io#io.DEFAULT_BUFFER_SIZE&quot;&gt; &lt;code&gt;io.DEFAULT_BUFFER_SIZE&lt;/code&gt; 来选择的&lt;/a&gt;。在许多系统上，缓冲区的长度通常为4096或8192字节。</target>
        </trans-unit>
        <trans-unit id="6b48357f7d4a42846626a5244d044b564edfcf86" translate="yes" xml:space="preserve">
          <source>Binary format. Outputs the number in base 2.</source>
          <target state="translated">二进制格式。输出以2为基准的数字。</target>
        </trans-unit>
        <trans-unit id="82f1ab06b67bdfb6757c6103375f928cf440f008" translate="yes" xml:space="preserve">
          <source>Binary operations remove the top of the stack (TOS) and the second top-most stack item (TOS1) from the stack. They perform the operation, and put the result back on the stack.</source>
          <target state="translated">二进制操作将栈顶(TOS)和最上面的第二个栈项(TOS1)从栈中移除。它们执行操作,并将结果放回栈中。</target>
        </trans-unit>
        <trans-unit id="343454e4d9b2acf169be0d953fb0fb79d39cb3cc" translate="yes" xml:space="preserve">
          <source>Binary operations that mix &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; instances with &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt; return the type of the first operand. For example: &lt;code&gt;frozenset('ab') |
set('bc')&lt;/code&gt; returns an instance of &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">将&lt;a href=&quot;#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;实例与&lt;a href=&quot;#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; &lt;/a&gt;混合在一起的二进制运算将返回第一个操作数的类型。例如： &lt;code&gt;frozenset('ab') | set('bc')&lt;/code&gt; 返回&lt;a href=&quot;#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; &lt;/a&gt;的实例。</target>
        </trans-unit>
        <trans-unit id="9c441e1be7900ba6369f9d1e8b770e422d0ae553" translate="yes" xml:space="preserve">
          <source>Binary operator tokens.</source>
          <target state="translated">二进制运算符令牌。</target>
        </trans-unit>
        <trans-unit id="1606bce466a3fb6e4e13c59af6b1a64d90c92104" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to key-press event of key if key is given, or to any key-press-event if no key is given. Remark: in order to be able to register key-events, TurtleScreen must have focus. (See method &lt;a href=&quot;#turtle.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">如果给定了键，则将&lt;em&gt;乐趣&lt;/em&gt;绑定到键的按键事件；如果未给定键，则将&lt;em&gt;乐趣&lt;/em&gt;绑定到任何按键事件。备注：为了能够注册键事件，TurtleScreen必须具有焦点。（请参见方法&lt;a href=&quot;#turtle.listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; &lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="c360811010b1ba8b6a9cf0d69579acc60a3e6bac" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to key-release event of key. If &lt;em&gt;fun&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, event bindings are removed. Remark: in order to be able to register key-events, TurtleScreen must have the focus. (See method &lt;a href=&quot;#turtle.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">将&lt;em&gt;乐趣&lt;/em&gt;绑定到密钥的释放事件。如果&lt;em&gt;fun&lt;/em&gt;为 &lt;code&gt;None&lt;/code&gt; ，那么将删除事件绑定。备注：为了能够注册键事件，TurtleScreen必须具有焦点。（请参见方法&lt;a href=&quot;#turtle.listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; &lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="88250fa997071f51f9a8c6f6b2b0aff6f79ab7aa" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to mouse-button-release events on this turtle. If &lt;em&gt;fun&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, existing bindings are removed.</source>
          <target state="translated">将&lt;em&gt;乐趣&lt;/em&gt;与该乌龟上的鼠标按钮释放事件绑定在一起。如果&lt;em&gt;fun&lt;/em&gt;为 &lt;code&gt;None&lt;/code&gt; ，那么将删除现有绑定。</target>
        </trans-unit>
        <trans-unit id="8981cb59d50b3e142bec1ed6694170c1d04c3e93" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to mouse-click events on this screen. If &lt;em&gt;fun&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, existing bindings are removed.</source>
          <target state="translated">将&lt;em&gt;乐趣&lt;/em&gt;绑定到此屏幕上的鼠标单击事件。如果&lt;em&gt;fun&lt;/em&gt;为 &lt;code&gt;None&lt;/code&gt; ，那么将删除现有绑定。</target>
        </trans-unit>
        <trans-unit id="eae217269ecbcd53a0c67a6d42f2541196eef9ba" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to mouse-click events on this turtle. If &lt;em&gt;fun&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, existing bindings are removed. Example for the anonymous turtle, i.e. the procedural way:</source>
          <target state="translated">将&lt;em&gt;乐趣&lt;/em&gt;与该乌龟上的鼠标单击事件绑定。如果&lt;em&gt;fun&lt;/em&gt;为 &lt;code&gt;None&lt;/code&gt; ，那么将删除现有绑定。匿名乌龟的示例，即程序方式：</target>
        </trans-unit>
        <trans-unit id="f2c696385e54300e88da723431117d0a4a8e9d3c" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to mouse-move events on this turtle. If &lt;em&gt;fun&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, existing bindings are removed.</source>
          <target state="translated">将&lt;em&gt;乐趣&lt;/em&gt;与该乌龟上的鼠标移动事件绑定在一起。如果&lt;em&gt;fun&lt;/em&gt;为 &lt;code&gt;None&lt;/code&gt; ，那么将删除现有绑定。</target>
        </trans-unit>
        <trans-unit id="8afe0450ccf1ed51bd4d76038ec0971fe964de5c" translate="yes" xml:space="preserve">
          <source>Bind a callback for the given event &lt;em&gt;sequence&lt;/em&gt; to the tag &lt;em&gt;tagname&lt;/em&gt;. When an event is delivered to an item, the callbacks for each of the item&amp;rsquo;s tags option are called.</source>
          <target state="translated">将给定事件&lt;em&gt;序列&lt;/em&gt;的回调绑定到标签&lt;em&gt;tagname&lt;/em&gt;。将事件传递给项目时，将调用该项目的每个标签选项的回调。</target>
        </trans-unit>
        <trans-unit id="62a0e995f722ce9bd473d6c69d16b2dc42dd47fe" translate="yes" xml:space="preserve">
          <source>Bind a unix socket, raising &lt;a href=&quot;unittest#unittest.SkipTest&quot;&gt;&lt;code&gt;unittest.SkipTest&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;exceptions#PermissionError&quot;&gt;&lt;code&gt;PermissionError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">绑定unix套接字，如果引发&lt;a href=&quot;exceptions#PermissionError&quot;&gt; &lt;code&gt;PermissionError&lt;/code&gt; ,&lt;/a&gt;则引发&lt;a href=&quot;unittest#unittest.SkipTest&quot;&gt; &lt;code&gt;unittest.SkipTest&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3ec9eed3827520279516114577184ceeb4151b81" translate="yes" xml:space="preserve">
          <source>Bind bye() method to mouse clicks on the Screen.</source>
          <target state="translated">将bye()方法绑定到屏幕上的鼠标点击。</target>
        </trans-unit>
        <trans-unit id="efbdacada9d39467e2d8f8e1aba79f1562fdc7db" translate="yes" xml:space="preserve">
          <source>Bind the &lt;em&gt;args&lt;/em&gt; and &lt;em&gt;kwds&lt;/em&gt; to the argument names of the Python function or method &lt;em&gt;func&lt;/em&gt;, as if it was called with them. For bound methods, bind also the first argument (typically named &lt;code&gt;self&lt;/code&gt;) to the associated instance. A dict is returned, mapping the argument names (including the names of the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; arguments, if any) to their values from &lt;em&gt;args&lt;/em&gt; and &lt;em&gt;kwds&lt;/em&gt;. In case of invoking &lt;em&gt;func&lt;/em&gt; incorrectly, i.e. whenever &lt;code&gt;func(*args, **kwds)&lt;/code&gt; would raise an exception because of incompatible signature, an exception of the same type and the same or similar message is raised. For example:</source>
          <target state="translated">将&lt;em&gt;args&lt;/em&gt;和&lt;em&gt;kwds&lt;/em&gt;绑定到Python函数或方法&lt;em&gt;func&lt;/em&gt;的参数名称，就好像它们是用它们调用的一样。对于绑定方法，还将第一个参数（通常称为 &lt;code&gt;self&lt;/code&gt; ）绑定到关联的实例。返回一个dict，将参数名称（包括 &lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;**&lt;/code&gt; 参数的名称，如果有的话）&lt;em&gt;映射&lt;/em&gt;到&lt;em&gt;args&lt;/em&gt;和&lt;em&gt;kwds中&lt;/em&gt;的值。在错误调用&lt;em&gt;func的&lt;/em&gt;情况下，即每当 &lt;code&gt;func(*args, **kwds)&lt;/code&gt; 由于签名不兼容而引发异常时，都会引发相同类型和相同或相似消息的异常。例如：</target>
        </trans-unit>
        <trans-unit id="466b061fcff1561dff2e7055a677ac36776d8605" translate="yes" xml:space="preserve">
          <source>Bind the &lt;em&gt;domain&lt;/em&gt; to &lt;em&gt;codeset&lt;/em&gt;, changing the encoding of byte strings returned by the &lt;a href=&quot;#gettext.lgettext&quot;&gt;&lt;code&gt;lgettext()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#gettext.ldgettext&quot;&gt;&lt;code&gt;ldgettext()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#gettext.lngettext&quot;&gt;&lt;code&gt;lngettext()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#gettext.ldngettext&quot;&gt;&lt;code&gt;ldngettext()&lt;/code&gt;&lt;/a&gt; functions. If &lt;em&gt;codeset&lt;/em&gt; is omitted, then the current binding is returned.</source>
          <target state="translated">Bind the &lt;em&gt;domain&lt;/em&gt; to &lt;em&gt;codeset&lt;/em&gt;, changing the encoding of byte strings returned by the &lt;a href=&quot;#gettext.lgettext&quot;&gt; &lt;code&gt;lgettext()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#gettext.ldgettext&quot;&gt; &lt;code&gt;ldgettext()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#gettext.lngettext&quot;&gt; &lt;code&gt;lngettext()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;#gettext.ldngettext&quot;&gt; &lt;code&gt;ldngettext()&lt;/code&gt; &lt;/a&gt; functions. If &lt;em&gt;codeset&lt;/em&gt; is omitted, then the current binding is returned.</target>
        </trans-unit>
        <trans-unit id="971f75ed3a8b9b21ee56302a74bf55b47cdbf22e" translate="yes" xml:space="preserve">
          <source>Bind the &lt;em&gt;domain&lt;/em&gt; to the locale directory &lt;em&gt;localedir&lt;/em&gt;. More concretely, &lt;a href=&quot;#module-gettext&quot;&gt;&lt;code&gt;gettext&lt;/code&gt;&lt;/a&gt; will look for binary &lt;code&gt;.mo&lt;/code&gt; files for the given domain using the path (on Unix): &lt;code&gt;&lt;em&gt;localedir&lt;/em&gt;/&lt;em&gt;language&lt;/em&gt;/LC_MESSAGES/&lt;em&gt;domain&lt;/em&gt;.mo&lt;/code&gt;, where &lt;em&gt;language&lt;/em&gt; is searched for in the environment variables &lt;code id=&quot;index-0&quot;&gt;LANGUAGE&lt;/code&gt;, &lt;code id=&quot;index-1&quot;&gt;LC_ALL&lt;/code&gt;, &lt;code id=&quot;index-2&quot;&gt;LC_MESSAGES&lt;/code&gt;, and &lt;code id=&quot;index-3&quot;&gt;LANG&lt;/code&gt; respectively.</source>
          <target state="translated">Bind the &lt;em&gt;domain&lt;/em&gt; to the locale directory &lt;em&gt;localedir&lt;/em&gt;. More concretely, &lt;a href=&quot;#module-gettext&quot;&gt; &lt;code&gt;gettext&lt;/code&gt; &lt;/a&gt; will look for binary &lt;code&gt;.mo&lt;/code&gt; files for the given domain using the path (on Unix): &lt;code&gt;&lt;em&gt;localedir&lt;/em&gt;/&lt;em&gt;language&lt;/em&gt;/LC_MESSAGES/&lt;em&gt;domain&lt;/em&gt;.mo&lt;/code&gt; , where &lt;em&gt;language&lt;/em&gt; is searched for in the environment variables &lt;code id=&quot;index-0&quot;&gt;LANGUAGE&lt;/code&gt; , &lt;code id=&quot;index-1&quot;&gt;LC_ALL&lt;/code&gt; , &lt;code id=&quot;index-2&quot;&gt;LC_MESSAGES&lt;/code&gt; , and &lt;code id=&quot;index-3&quot;&gt;LANG&lt;/code&gt; respectively.</target>
        </trans-unit>
        <trans-unit id="6ef7c31f3723921d8fdf4d1ae7e78f574951d17b" translate="yes" xml:space="preserve">
          <source>Bind the socket to &lt;em&gt;address&lt;/em&gt;. The socket must not already be bound. (The format of &lt;em&gt;address&lt;/em&gt; depends on the address family &amp;mdash; refer to the &lt;a href=&quot;socket#module-socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt; documentation for more information.) To mark the socket as re-usable (setting the &lt;code&gt;SO_REUSEADDR&lt;/code&gt; option), call the &lt;a href=&quot;#asyncore.dispatcher&quot;&gt;&lt;code&gt;dispatcher&lt;/code&gt;&lt;/a&gt; object&amp;rsquo;s &lt;code&gt;set_reuse_addr()&lt;/code&gt; method.</source>
          <target state="translated">将套接字绑定到&lt;em&gt;address&lt;/em&gt;。套接字必须尚未绑定。（&lt;em&gt;地址&lt;/em&gt;的格式取决于地址系列- 有关更多信息，请参阅&lt;a href=&quot;socket#module-socket&quot;&gt; &lt;code&gt;socket&lt;/code&gt; &lt;/a&gt;文档。）要将套接字标记为可重用（设置 &lt;code&gt;SO_REUSEADDR&lt;/code&gt; 选项），请调用&lt;a href=&quot;#asyncore.dispatcher&quot;&gt; &lt;code&gt;dispatcher&lt;/code&gt; &lt;/a&gt;对象的 &lt;code&gt;set_reuse_addr()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="04f4492e920673119f99caa126daf7111e8679ef" translate="yes" xml:space="preserve">
          <source>Bind the socket to &lt;em&gt;address&lt;/em&gt;. The socket must not already be bound. (The format of &lt;em&gt;address&lt;/em&gt; depends on the address family &amp;mdash; see above.)</source>
          <target state="translated">将套接字绑定到&lt;em&gt;address&lt;/em&gt;。套接字必须尚未绑定。（&lt;em&gt;地址&lt;/em&gt;的格式取决于地址系列-参见上文。）</target>
        </trans-unit>
        <trans-unit id="de75e0400dc3db591ad5734f114577fa0875a522" translate="yes" xml:space="preserve">
          <source>Bind the socket to a free port and return the port number. Relies on ephemeral ports in order to ensure we are using an unbound port. This is important as many tests may be running simultaneously, especially in a buildbot environment. This method raises an exception if the &lt;code&gt;sock.family&lt;/code&gt; is &lt;a href=&quot;socket#socket.AF_INET&quot;&gt;&lt;code&gt;AF_INET&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;sock.type&lt;/code&gt; is &lt;a href=&quot;socket#socket.SOCK_STREAM&quot;&gt;&lt;code&gt;SOCK_STREAM&lt;/code&gt;&lt;/a&gt;, and the socket has &lt;code&gt;SO_REUSEADDR&lt;/code&gt; or &lt;code&gt;SO_REUSEPORT&lt;/code&gt; set on it. Tests should never set these socket options for TCP/IP sockets. The only case for setting these options is testing multicasting via multiple UDP sockets.</source>
          <target state="translated">将套接字绑定到空闲端口并返回端口号。依靠临时端口以确保我们使用的是未绑定端口。这很重要，因为许多测试可能同时运行，尤其是在buildbot环境中。如果 &lt;code&gt;sock.family&lt;/code&gt; 是&lt;a href=&quot;socket#socket.AF_INET&quot;&gt; &lt;code&gt;AF_INET&lt;/code&gt; &lt;/a&gt;并且 &lt;code&gt;sock.type&lt;/code&gt; 是&lt;a href=&quot;socket#socket.SOCK_STREAM&quot;&gt; &lt;code&gt;SOCK_STREAM&lt;/code&gt; &lt;/a&gt;，并且套接字上设置了 &lt;code&gt;SO_REUSEADDR&lt;/code&gt; 或 &lt;code&gt;SO_REUSEPORT&lt;/code&gt; ，则此方法引发异常。测试绝对不要为TCP / IP套接字设置这些套接字选项。设置这些选项的唯一情况是通过多个UDP套接字测试多播。</target>
        </trans-unit>
        <trans-unit id="1fd8b3b29ad1340858fecc05585a82b44392fdd8" translate="yes" xml:space="preserve">
          <source>Bindings and Events</source>
          <target state="translated">绑定和事件</target>
        </trans-unit>
        <trans-unit id="f86116810e0f75c5cdd1a62f7f2104592005bc20" translate="yes" xml:space="preserve">
          <source>Bit fields in structures and unions</source>
          <target state="translated">结构和联合中的位域</target>
        </trans-unit>
        <trans-unit id="320415496f3946f94011e0ced3cddcdc515c3da5" translate="yes" xml:space="preserve">
          <source>Bit-mask</source>
          <target state="translated">Bit-mask</target>
        </trans-unit>
        <trans-unit id="10b264ac40d76c9c94d3cc50bd7202a39865e32f" translate="yes" xml:space="preserve">
          <source>Bit-mask to extract a character</source>
          <target state="translated">提取一个字符的位掩码</target>
        </trans-unit>
        <trans-unit id="0b5b215b81a34d81da07b12a57a05ded49214f16" translate="yes" xml:space="preserve">
          <source>Bit-mask to extract attributes</source>
          <target state="translated">提取属性的位掩码</target>
        </trans-unit>
        <trans-unit id="2061b16edd78d2e593621fabec13afb636e32ce9" translate="yes" xml:space="preserve">
          <source>Bit-mask to extract color-pair field information</source>
          <target state="translated">位掩码提取颜色对场信息。</target>
        </trans-unit>
        <trans-unit id="55bcce66fdecceeb947a789cd32be9b93c7eca65" translate="yes" xml:space="preserve">
          <source>Bitwise And</source>
          <target state="translated">位元和</target>
        </trans-unit>
        <trans-unit id="5fef320a5b6e9f946d0c0be2f1804caae7326297" translate="yes" xml:space="preserve">
          <source>Bitwise Exclusive Or</source>
          <target state="translated">位元独占或</target>
        </trans-unit>
        <trans-unit id="92108ddfd25fd3b1ca3cfcbb1ac3acde1d93a1d2" translate="yes" xml:space="preserve">
          <source>Bitwise Inversion</source>
          <target state="translated">位向反转</target>
        </trans-unit>
        <trans-unit id="c6d024785d8011a85a2c45a248d86ff4be52b077" translate="yes" xml:space="preserve">
          <source>Bitwise Operations on Integer Types</source>
          <target state="translated">整数类型的位运算</target>
        </trans-unit>
        <trans-unit id="5b0861023775ab83f9aeb2c2b3492420398fae85" translate="yes" xml:space="preserve">
          <source>Bitwise Or</source>
          <target state="translated">位式或</target>
        </trans-unit>
        <trans-unit id="2e17feeadb67d1865e9a3b140b95f9721af9f8fa" translate="yes" xml:space="preserve">
          <source>Bitwise operations only make sense for integers. The result of bitwise operations is calculated as though carried out in two&amp;rsquo;s complement with an infinite number of sign bits.</source>
          <target state="translated">按位运算仅对整数有意义。按位运算的结果就像是用无穷多个符号位的二进制补码执行的。</target>
        </trans-unit>
        <trans-unit id="b406fb57b29fc76f71864fbb37f0238045f84d9d" translate="yes" xml:space="preserve">
          <source>Black</source>
          <target state="translated">Black</target>
        </trans-unit>
        <trans-unit id="480135dda7d845bc82b347dfaa91bf347ee099af" translate="yes" xml:space="preserve">
          <source>Blink mode</source>
          <target state="translated">闪烁模式</target>
        </trans-unit>
        <trans-unit id="cfbe395b6ff593ced03bac36c099d59799a6252c" translate="yes" xml:space="preserve">
          <source>Block device required</source>
          <target state="translated">需要阻挡装置</target>
        </trans-unit>
        <trans-unit id="40f4277d9e2e9642b7c7082b91e613d62eab845f" translate="yes" xml:space="preserve">
          <source>Block device.</source>
          <target state="translated">块设备。</target>
        </trans-unit>
        <trans-unit id="2bb009addf624a9cc048897e81f81ead20e469bf" translate="yes" xml:space="preserve">
          <source>Block for &lt;em&gt;delay&lt;/em&gt; seconds.</source>
          <target state="translated">块&lt;em&gt;延迟&lt;/em&gt;秒。</target>
        </trans-unit>
        <trans-unit id="8fb197cebcc8478cf7165d9dc1e9b4feeed49cd6" translate="yes" xml:space="preserve">
          <source>Block until all items in the queue have been gotten and processed.</source>
          <target state="translated">阻止,直到队列中的所有项目都得到了处理。</target>
        </trans-unit>
        <trans-unit id="5c76bb4026cbe07b72909b50d70c6d76ce00a1bf" translate="yes" xml:space="preserve">
          <source>Block until all items in the queue have been received and processed.</source>
          <target state="translated">阻止,直到队列中的所有项目都被接收和处理。</target>
        </trans-unit>
        <trans-unit id="4270873346fe4ac8413b26a31ec9f3e286371ccc" translate="yes" xml:space="preserve">
          <source>Block until the internal flag is true. If the internal flag is true on entry, return immediately. Otherwise, block until another thread calls &lt;a href=&quot;#threading.Event.set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt; to set the flag to true, or until the optional timeout occurs.</source>
          <target state="translated">阻塞直到内部标志为真。如果内部标志在输入时为true，请立即返回。否则，阻塞直到另一个线程调用&lt;a href=&quot;#threading.Event.set&quot;&gt; &lt;code&gt;set()&lt;/code&gt; &lt;/a&gt;将标志设置为true，或者直到发生可选的超时为止。</target>
        </trans-unit>
        <trans-unit id="d2058396a2147f5165863444e9ce5b13713a8108" translate="yes" xml:space="preserve">
          <source>Blocking (CPU-bound) code should not be called directly. For example, if a function performs a CPU-intensive calculation for 1 second, all concurrent asyncio Tasks and IO operations would be delayed by 1 second.</source>
          <target state="translated">不应直接调用阻塞(CPU绑定)代码。例如,如果一个函数执行了1秒的CPU密集型计算,那么所有并发的asyncio Tasks和IO操作将被延迟1秒。</target>
        </trans-unit>
        <trans-unit id="323ffdcd95156ec320100a2972820824ccb6d91f" translate="yes" xml:space="preserve">
          <source>BlockingIOError</source>
          <target state="translated">BlockingIOError</target>
        </trans-unit>
        <trans-unit id="92a08db9399061aa0f5eacfe511b7a6126dc9df0" translate="yes" xml:space="preserve">
          <source>BlockingIOError.characters_written</source>
          <target state="translated">BlockingIOError.characters_written</target>
        </trans-unit>
        <trans-unit id="dddf0e18cab12f3c2b4594834412adc72d47d3d6" translate="yes" xml:space="preserve">
          <source>Blocks until all items in the queue have been gotten and processed.</source>
          <target state="translated">阻止,直到队列中的所有项目都得到了处理。</target>
        </trans-unit>
        <trans-unit id="7d44bc449c2a26374800a503f10f3d8949505f40" translate="yes" xml:space="preserve">
          <source>Blue</source>
          <target state="translated">Blue</target>
        </trans-unit>
        <trans-unit id="15913dcb3fc24a61ba6adcc4afcd21df3d2a5af6" translate="yes" xml:space="preserve">
          <source>Body-encode the string &lt;em&gt;string&lt;/em&gt;.</source>
          <target state="translated">对字符串&lt;em&gt;string&lt;/em&gt;进行身体编码。</target>
        </trans-unit>
        <trans-unit id="6718f0f90ac337fe59d6d08c1ec08dbb38b7cc92" translate="yes" xml:space="preserve">
          <source>Bold mode</source>
          <target state="translated">粗体模式</target>
        </trans-unit>
        <trans-unit id="beddf259d4873df4879b851076af94752cb94065" translate="yes" xml:space="preserve">
          <source>Book by John Grayson (ISBN 1-884777-81-3).</source>
          <target state="translated">约翰-格雷森的书(ISBN 1-884777-81-3)。</target>
        </trans-unit>
        <trans-unit id="5deb34b87b8d065639971c2d9e0fede0fcbaa391" translate="yes" xml:space="preserve">
          <source>Book by John Ousterhout, the inventor of Tcl.</source>
          <target state="translated">Tcl的发明者John Ousterhout的书。</target>
        </trans-unit>
        <trans-unit id="cba993e6c506a168367bd3edaf5e342b70b7db99" translate="yes" xml:space="preserve">
          <source>Book by Mark Lutz, has excellent coverage of Tkinter.</source>
          <target state="translated">马克-卢茨的书,对Tkinter有很好的报道。</target>
        </trans-unit>
        <trans-unit id="51b03cb2dbfc1444695bab06adfaeb141fdc235f" translate="yes" xml:space="preserve">
          <source>Book by Mark Roseman about building attractive and modern graphical user interfaces with Python and Tkinter.</source>
          <target state="translated">Mark Roseman写的关于用Python和Tkinter构建有吸引力的现代图形用户界面的书。</target>
        </trans-unit>
        <trans-unit id="786bfd749778b9b25aa01178659c90f4e19011ff" translate="yes" xml:space="preserve">
          <source>Bookkeeping functions</source>
          <target state="translated">簿记职能</target>
        </trans-unit>
        <trans-unit id="f8a8b062c380ba221961a2f8e03c873f4208921d" translate="yes" xml:space="preserve">
          <source>Boolean Operations &amp;mdash; &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;</source>
          <target state="translated">布尔运算- &lt;code&gt;and&lt;/code&gt; ， &lt;code&gt;or&lt;/code&gt; ， &lt;code&gt;not&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21e36e8bd93b3ea3b4b742ce8bb2a6ec3b2ab721" translate="yes" xml:space="preserve">
          <source>Boolean Values</source>
          <target state="translated">布尔值</target>
        </trans-unit>
        <trans-unit id="88306a31305db52140bbd33e277c2a177ea102f3" translate="yes" xml:space="preserve">
          <source>Boolean indicating whether or not the module&amp;rsquo;s &amp;ldquo;origin&amp;rdquo; attribute refers to a loadable location.</source>
          <target state="translated">布尔值，指示模块的&amp;ldquo;原始&amp;rdquo;属性是否引用可加载位置。</target>
        </trans-unit>
        <trans-unit id="524796582178b3ce40400d6b1bce1725e41cb620" translate="yes" xml:space="preserve">
          <source>Boolean indicating whether the device has been closed.</source>
          <target state="translated">表示设备是否已关闭的布尔值。</target>
        </trans-unit>
        <trans-unit id="3b8b1c68be3b092bc5a2b53c093951beb9f55cb0" translate="yes" xml:space="preserve">
          <source>Boolean operator tokens.</source>
          <target state="translated">布尔运算符令牌。</target>
        </trans-unit>
        <trans-unit id="7ae5f84c90d6d770c192b8c5eb2f83cd02192067" translate="yes" xml:space="preserve">
          <source>Boolean that should be set before &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.handle_one_request&quot;&gt;&lt;code&gt;handle_one_request()&lt;/code&gt;&lt;/a&gt; returns, indicating if another request may be expected, or if the connection should be shut down.</source>
          <target state="translated">应该在&lt;a href=&quot;#http.server.BaseHTTPRequestHandler.handle_one_request&quot;&gt; &lt;code&gt;handle_one_request()&lt;/code&gt; &lt;/a&gt;返回之前设置的布尔值，指示是否可能期望另一个请求，或者是否应该关闭连接。</target>
        </trans-unit>
        <trans-unit id="33269d07fca93166bdf65e0bd7b3092befe1aa4a" translate="yes" xml:space="preserve">
          <source>Boolean value of &lt;code&gt;Enum&lt;/code&gt; classes and members</source>
          <target state="translated">&lt;code&gt;Enum&lt;/code&gt; 类和成员的布尔值</target>
        </trans-unit>
        <trans-unit id="cb62ebe2f6b3f6e458c9478ab40f08a930df3242" translate="yes" xml:space="preserve">
          <source>Boolean value that is normally &lt;code&gt;False&lt;/code&gt;, but is set to &lt;code&gt;True&lt;/code&gt; if an &lt;a href=&quot;#imaplib.IMAP4.enable&quot;&gt;&lt;code&gt;enable()&lt;/code&gt;&lt;/a&gt; command is successfully issued for the &lt;code&gt;UTF8=ACCEPT&lt;/code&gt; capability.</source>
          <target state="translated">布尔值，通常为 &lt;code&gt;False&lt;/code&gt; ，但如果成功针对 &lt;code&gt;UTF8=ACCEPT&lt;/code&gt; 功能发出了&lt;a href=&quot;#imaplib.IMAP4.enable&quot;&gt; &lt;code&gt;enable()&lt;/code&gt; &lt;/a&gt;命令，则将其设置为 &lt;code&gt;True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d12838d2902df351d82539f77e5196fe220e18b" translate="yes" xml:space="preserve">
          <source>Boolean value. If &lt;code&gt;True&lt;/code&gt;, increment and decrement buttons will cycle from the &lt;code&gt;to&lt;/code&gt; value to the &lt;code&gt;from&lt;/code&gt; value or the &lt;code&gt;from&lt;/code&gt; value to the &lt;code&gt;to&lt;/code&gt; value, respectively.</source>
          <target state="translated">布尔值。如果 &lt;code&gt;True&lt;/code&gt; ，增加和减少按钮将会从周期 &lt;code&gt;to&lt;/code&gt; 价值， &lt;code&gt;from&lt;/code&gt; 价值还是 &lt;code&gt;from&lt;/code&gt; 价值到 &lt;code&gt;to&lt;/code&gt; 分别价值。</target>
        </trans-unit>
        <trans-unit id="9245a6ae2d0c51a552e5f3f9fc78c7e345278524" translate="yes" xml:space="preserve">
          <source>Boolean value. If set, the widget selection is linked to the Window Manager selection (which can be returned by invoking Misc.selection_get, for example).</source>
          <target state="translated">布尔值。如果设置,小组件的选择将被链接到窗口管理器的选择(例如,可以通过调用Misc.selection_get返回)。</target>
        </trans-unit>
        <trans-unit id="2fa9e93e36190ed14338b888b01919ba853c4130" translate="yes" xml:space="preserve">
          <source>Boolean values are the two constant objects &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;True&lt;/code&gt;. They are used to represent truth values (although other values can also be considered false or true). In numeric contexts (for example when used as the argument to an arithmetic operator), they behave like the integers 0 and 1, respectively. The built-in function &lt;a href=&quot;functions#bool&quot;&gt;&lt;code&gt;bool()&lt;/code&gt;&lt;/a&gt; can be used to convert any value to a Boolean, if the value can be interpreted as a truth value (see section &lt;a href=&quot;#truth&quot;&gt;Truth Value Testing&lt;/a&gt; above).</source>
          <target state="translated">布尔值是两个常量对象 &lt;code&gt;False&lt;/code&gt; 和 &lt;code&gt;True&lt;/code&gt; 。它们用于表示真值（尽管也可以将其他值视为假或真）。在数字上下文中（例如，当用作算术运算符的参数时），它们的行为分别类似于整数0和1。如果可以将该值解释为真值，则可以使用内置函数&lt;a href=&quot;functions#bool&quot;&gt; &lt;code&gt;bool()&lt;/code&gt; &lt;/a&gt;将任何值转换为布尔值（请参见上面的&lt;a href=&quot;#truth&quot;&gt;真值测试&lt;/a&gt;部分）。</target>
        </trans-unit>
        <trans-unit id="d18c0bfba1757c5e30d0bc7a733fee5173697958" translate="yes" xml:space="preserve">
          <source>Boolean, &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">布尔值， &lt;code&gt;0&lt;/code&gt; 或 &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="720fd7e99ee4b1def571b8830a99782dae891a6d" translate="yes" xml:space="preserve">
          <source>Bootstraps &lt;code&gt;pip&lt;/code&gt; into the current or designated environment.</source>
          <target state="translated">引导 &lt;code&gt;pip&lt;/code&gt; 进入当前或指定的环境。</target>
        </trans-unit>
        <trans-unit id="71d8f86363b63766bbf05a4f680a13a4e028d724" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#asyncio.create_subprocess_exec&quot;&gt;&lt;code&gt;create_subprocess_exec()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asyncio.create_subprocess_shell&quot;&gt;&lt;code&gt;create_subprocess_shell()&lt;/code&gt;&lt;/a&gt; functions return instances of the &lt;em&gt;Process&lt;/em&gt; class. &lt;em&gt;Process&lt;/em&gt; is a high-level wrapper that allows communicating with subprocesses and watching for their completion.</source>
          <target state="translated">既&lt;a href=&quot;#asyncio.create_subprocess_exec&quot;&gt; &lt;code&gt;create_subprocess_exec()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#asyncio.create_subprocess_shell&quot;&gt; &lt;code&gt;create_subprocess_shell()&lt;/code&gt; &lt;/a&gt;函数返回的实例&lt;em&gt;过程&lt;/em&gt;类。&lt;em&gt;流程&lt;/em&gt;是一个高级包装，它允许与子流程进行通信并监视其完成情况。</target>
        </trans-unit>
        <trans-unit id="0678a3c848604f505fcb4b2ec36b17b684c82040" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#patch&quot;&gt;patch&lt;/a&gt; and &lt;a href=&quot;#patch-object&quot;&gt;patch.object&lt;/a&gt; correctly patch and restore descriptors: class methods, static methods and properties. You should patch these on the &lt;em&gt;class&lt;/em&gt; rather than an instance. They also work with &lt;em&gt;some&lt;/em&gt; objects that proxy attribute access, like the &lt;a href=&quot;http://www.voidspace.org.uk/python/weblog/arch_d7_2010_12_04.shtml#e1198&quot;&gt;django settings object&lt;/a&gt;.</source>
          <target state="translated">这两个&lt;a href=&quot;#patch&quot;&gt;补丁&lt;/a&gt;和&lt;a href=&quot;#patch-object&quot;&gt;patch.object&lt;/a&gt;正确地修补和恢复描述：类方法，静态方法和属性。您应该在&lt;em&gt;类&lt;/em&gt;而不是实例上打补丁。它们还与代理属性访问的&lt;em&gt;某些&lt;/em&gt;对象一起使用，例如&lt;a href=&quot;http://www.voidspace.org.uk/python/weblog/arch_d7_2010_12_04.shtml#e1198&quot;&gt;django settings对象&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="76150bda2b159ac2e4297d9994115a0259b6b98e" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt; support set to set comparisons. Two sets are equal if and only if every element of each set is contained in the other (each is a subset of the other). A set is less than another set if and only if the first set is a proper subset of the second set (is a subset, but is not equal). A set is greater than another set if and only if the first set is a proper superset of the second set (is a superset, but is not equal).</source>
          <target state="translated">这两个&lt;a href=&quot;#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; &lt;/a&gt;支集到一套比较。当且仅当每个集合的每个元素都包含在另一个集合中（每个元素都是另一个子集）时，两个集合才相等。当且仅当第一集合是第二集合的适当子集（是子集，但不相等）时，一个集合小于另一个集合。当且仅当第一个集合是第二个集合的适当超集（是一个超集，但不相等）时，一个集合才大于另一个集合。</target>
        </trans-unit>
        <trans-unit id="da97eda7ef7c14e12c43a76638620729271ea928" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;functions#getattr&quot;&gt;&lt;code&gt;getattr()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;functions#hasattr&quot;&gt;&lt;code&gt;hasattr()&lt;/code&gt;&lt;/a&gt; can trigger code execution when fetching or checking for the existence of attributes. Descriptors, like properties, will be invoked and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt;&lt;code&gt;__getattr__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattribute__&quot;&gt;&lt;code&gt;__getattribute__()&lt;/code&gt;&lt;/a&gt; may be called.</source>
          <target state="translated">既&lt;a href=&quot;functions#getattr&quot;&gt; &lt;code&gt;getattr()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;functions#hasattr&quot;&gt; &lt;code&gt;hasattr()&lt;/code&gt; &lt;/a&gt;提取或检查属性的存在时可以触发代码的执行。描述符（如属性）将被调用，并可以调用&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt; &lt;code&gt;__getattr__()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattribute__&quot;&gt; &lt;code&gt;__getattribute__()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6378a682eec1b6aafdd9cf2087b6ced6760eeb7a" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;functions#getattr&quot;&gt;&lt;code&gt;getattr()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;functions#hasattr&quot;&gt;&lt;code&gt;hasattr()&lt;/code&gt;&lt;/a&gt; can trigger code execution when fetching or checking for the existence of attributes. Descriptors, like properties, will be invoked and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getattr__&quot;&gt;&lt;code&gt;__getattr__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getattribute__&quot;&gt;&lt;code&gt;__getattribute__()&lt;/code&gt;&lt;/a&gt; may be called.</source>
          <target state="translated">既&lt;a href=&quot;functions#getattr&quot;&gt; &lt;code&gt;getattr()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;functions#hasattr&quot;&gt; &lt;code&gt;hasattr()&lt;/code&gt; &lt;/a&gt;提取或检查属性的存在时可以触发代码的执行。描述符（如属性）将被调用，并可以调用&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getattr__&quot;&gt; &lt;code&gt;__getattr__()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getattribute__&quot;&gt; &lt;code&gt;__getattribute__()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bc6402ce03954c13678974692e26ec34f0d6f91d" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-14&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; and Netscape cookies are covered. RFC 2965 handling is switched off by default.</source>
          <target state="translated">无论&lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-14&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt;和Netscape cookie被覆盖。RFC 2965处理默认情况下处于关闭状态。</target>
        </trans-unit>
        <trans-unit id="70830bd6073fa55b1bb77c2a936de0cd6ec08ac0" translate="yes" xml:space="preserve">
          <source>Both &lt;em&gt;input_charset&lt;/em&gt; and &lt;em&gt;output_charset&lt;/em&gt; must have Unicode codec entries in the module&amp;rsquo;s character set-to-codec mapping; use &lt;a href=&quot;#email.charset.add_codec&quot;&gt;&lt;code&gt;add_codec()&lt;/code&gt;&lt;/a&gt; to add codecs the module does not know about. See the &lt;a href=&quot;codecs#module-codecs&quot;&gt;&lt;code&gt;codecs&lt;/code&gt;&lt;/a&gt; module&amp;rsquo;s documentation for more information.</source>
          <target state="translated">无论&lt;em&gt;input_charset&lt;/em&gt;和&lt;em&gt;output_charset&lt;/em&gt;必须在模块的字符集到编码解码器映射的Unicode编码解码器条目; 使用&lt;a href=&quot;#email.charset.add_codec&quot;&gt; &lt;code&gt;add_codec()&lt;/code&gt; &lt;/a&gt;添加模块不知道的编解码器。有关更多信息，请参见&lt;a href=&quot;codecs#module-codecs&quot;&gt; &lt;code&gt;codecs&lt;/code&gt; &lt;/a&gt;模块的文档。</target>
        </trans-unit>
        <trans-unit id="ead411397e614cee6d46ba321f1ee1902f0d3551" translate="yes" xml:space="preserve">
          <source>Both binary and decimal floating point are implemented in terms of published standards. While the built-in float type exposes only a modest portion of its capabilities, the decimal module exposes all required parts of the standard. When needed, the programmer has full control over rounding and signal handling. This includes an option to enforce exact arithmetic by using exceptions to block any inexact operations.</source>
          <target state="translated">二进制和十进制浮点都是按照公布的标准来实现的。虽然内置的浮点类型只暴露了它的一小部分功能,但十进制模块暴露了标准的所有必要部分。当需要时,程序员可以完全控制四舍五入和信号处理。这包括一个选项,通过使用异常来阻止任何不精确的操作来强制执行精确的算术。</target>
        </trans-unit>
        <trans-unit id="412827b4525eb3aa564b3e476acee9a6c164827a" translate="yes" xml:space="preserve">
          <source>Both bytes and bytearray objects support the &lt;a href=&quot;#typesseq-common&quot;&gt;common&lt;/a&gt; sequence operations. They interoperate not just with operands of the same type, but with any &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;. Due to this flexibility, they can be freely mixed in operations without causing errors. However, the return type of the result may depend on the order of operands.</source>
          <target state="translated">字节对象和字节数组对象都支持&lt;a href=&quot;#typesseq-common&quot;&gt;公共&lt;/a&gt;序列操作。它们不仅与相同类型的操作数互操作，而且还与任何&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;类似字节的object&lt;/a&gt;互操作。由于这种灵活性，它们可以在操作中自由混合而不会引起错误。但是，结果的返回类型可能取决于操作数的顺序。</target>
        </trans-unit>
        <trans-unit id="b726eeef2b94c2c79f2826c463146ce420620ef3" translate="yes" xml:space="preserve">
          <source>Both bytes and bytearray objects support the &lt;a href=&quot;#typesseq-common&quot;&gt;common&lt;/a&gt; sequence operations. They interoperate not just with operands of the same type, but with any &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;. Due to this flexibility, they can be freely mixed in operations without causing errors. However, the return type of the result may depend on the order of operands.</source>
          <target state="translated">字节对象和字节数组对象都支持&lt;a href=&quot;#typesseq-common&quot;&gt;公共&lt;/a&gt;序列操作。它们不仅与相同类型的操作数互操作，而且还与任何&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;类似字节的object&lt;/a&gt;互操作。由于具有这种灵活性，它们可以在操作中自由混合而不会引起错误。但是，结果的返回类型可能取决于操作数的顺序。</target>
        </trans-unit>
        <trans-unit id="906dcaa49ef8791b7ba8c7a06dc1b0bb61aebfb9" translate="yes" xml:space="preserve">
          <source>Both functions return a &lt;code&gt;Document&lt;/code&gt; object representing the content of the document.</source>
          <target state="translated">这两个函数都返回一个表示 &lt;code&gt;Document&lt;/code&gt; 内容的Document对象。</target>
        </trans-unit>
        <trans-unit id="9308f7b7021d711fb78ce76e026ff4c70b252ac9" translate="yes" xml:space="preserve">
          <source>Both of these factory functions are called with the result type as first argument, and the callback functions expected argument types as the remaining arguments.</source>
          <target state="translated">这两个工厂函数的调用都是以结果类型作为第一个参数,回调函数的预期参数类型作为其余参数。</target>
        </trans-unit>
        <trans-unit id="da4ed773045485a36fd9e210e667a5f7330053db" translate="yes" xml:space="preserve">
          <source>Both parameters are raw strings of the names. &lt;code&gt;asname&lt;/code&gt; can be &lt;code&gt;None&lt;/code&gt; if the regular name is to be used.</source>
          <target state="translated">这两个参数都是名称的原始字符串。如果要使用常规名称，则 &lt;code&gt;asname&lt;/code&gt; 可以为 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e40771c73ac3142db1cd6a2924473530d9c63415" translate="yes" xml:space="preserve">
          <source>Both patterns and strings to be searched can be Unicode strings (&lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;) as well as 8-bit strings (&lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;). However, Unicode strings and 8-bit strings cannot be mixed: that is, you cannot match a Unicode string with a byte pattern or vice-versa; similarly, when asking for a substitution, the replacement string must be of the same type as both the pattern and the search string.</source>
          <target state="translated">模式和要搜索的字符串都可以是Unicode字符串（&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;）以及8位字符串（&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;）。但是，不能将Unicode字符串和8位字符串混合使用：也就是说，您不能将Unicode字符串与字节模式匹配，反之亦然。类似地，当请求替换时，替换字符串必须与模式和搜索字符串具有相同的类型。</target>
        </trans-unit>
        <trans-unit id="60524711bf7cd6ddd3a6f75407a2f25953c838b6" translate="yes" xml:space="preserve">
          <source>Both the &lt;a href=&quot;#module-profile&quot;&gt;&lt;code&gt;profile&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#module-cProfile&quot;&gt;&lt;code&gt;cProfile&lt;/code&gt;&lt;/a&gt; modules provide the following functions:</source>
          <target state="translated">无论是&lt;a href=&quot;#module-profile&quot;&gt; &lt;code&gt;profile&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#module-cProfile&quot;&gt; &lt;code&gt;cProfile&lt;/code&gt; &lt;/a&gt;模块提供以下功能：</target>
        </trans-unit>
        <trans-unit id="a8fa6107edcf0d7fe5de5f35cf96f9376975a492" translate="yes" xml:space="preserve">
          <source>Both the HTTP and HTTPS transports support the URL syntax extension for HTTP Basic Authentication: &lt;code&gt;http://user:pass@host:port/path&lt;/code&gt;. The &lt;code&gt;user:pass&lt;/code&gt; portion will be base64-encoded as an HTTP &amp;lsquo;Authorization&amp;rsquo; header, and sent to the remote server as part of the connection process when invoking an XML-RPC method. You only need to use this if the remote server requires a Basic Authentication user and password. If an HTTPS URL is provided, &lt;em&gt;context&lt;/em&gt; may be &lt;a href=&quot;ssl#ssl.SSLContext&quot;&gt;&lt;code&gt;ssl.SSLContext&lt;/code&gt;&lt;/a&gt; and configures the SSL settings of the underlying HTTPS connection.</source>
          <target state="translated">HTTP和HTTPS传输都支持HTTP基本身份验证的URL语法扩展： &lt;code&gt;http://user:pass@host:port/path&lt;/code&gt; 。的 &lt;code&gt;user:pass&lt;/code&gt; 部分将base64编码作为HTTP&amp;ldquo;授权&amp;rdquo;标头，并调用的XML-RPC方法时发送到远程服务器作为连接过程的一部分。仅当远程服务器需要基本身份验证用户和密码时，才需要使用此选项。如果提供了HTTPS URL，则&lt;em&gt;上下文&lt;/em&gt;可以是&lt;a href=&quot;ssl#ssl.SSLContext&quot;&gt; &lt;code&gt;ssl.SSLContext&lt;/code&gt; &lt;/a&gt;并配置基础HTTPS连接的SSL设置。</target>
        </trans-unit>
        <trans-unit id="e1cca2d2cf2cc882468f5dfa827706c1805375d8" translate="yes" xml:space="preserve">
          <source>Both the regular Netscape cookie protocol and the protocol defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; are handled. RFC 2965 handling is switched off by default. &lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; cookies are parsed as Netscape cookies and subsequently treated either as Netscape or RFC 2965 cookies according to the &amp;lsquo;policy&amp;rsquo; in effect. Note that the great majority of cookies on the Internet are Netscape cookies. &lt;a href=&quot;#module-http.cookiejar&quot;&gt;&lt;code&gt;http.cookiejar&lt;/code&gt;&lt;/a&gt; attempts to follow the de-facto Netscape cookie protocol (which differs substantially from that set out in the original Netscape specification), including taking note of the &lt;code&gt;max-age&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; cookie-attributes introduced with RFC 2965.</source>
          <target state="translated">常规Netscape cookie协议和&lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt;定义的协议都可以处理。 RFC 2965处理默认情况下处于关闭状态。&lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; cookie被解析为Netscape cookie，随后根据有效的&amp;ldquo;策略&amp;rdquo;被视为Netscape或RFC 2965 cookie。请注意，Internet上的大多数cookie是Netscape cookie。&lt;a href=&quot;#module-http.cookiejar&quot;&gt; &lt;code&gt;http.cookiejar&lt;/code&gt; &lt;/a&gt;尝试遵循事实上的Netscape cookie协议（该协议与原始Netscape规范中的设置有很大不同），包括记下RFC 2965引入的 &lt;code&gt;max-age&lt;/code&gt; 和 &lt;code&gt;port&lt;/code&gt; cookie属性。</target>
        </trans-unit>
        <trans-unit id="7dbcf66e0e3c0a5508b03432a2f3df368782d85e" translate="yes" xml:space="preserve">
          <source>Both ways are described in section &lt;a href=&quot;#sqlite3-module-contents&quot;&gt;Module functions and constants&lt;/a&gt;, in the entries for the constants &lt;a href=&quot;#sqlite3.PARSE_DECLTYPES&quot;&gt;&lt;code&gt;PARSE_DECLTYPES&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#sqlite3.PARSE_COLNAMES&quot;&gt;&lt;code&gt;PARSE_COLNAMES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">这两种方式部分中描述的&lt;a href=&quot;#sqlite3-module-contents&quot;&gt;模块函数和常数&lt;/a&gt;为常数，在条目&lt;a href=&quot;#sqlite3.PARSE_DECLTYPES&quot;&gt; &lt;code&gt;PARSE_DECLTYPES&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#sqlite3.PARSE_COLNAMES&quot;&gt; &lt;code&gt;PARSE_COLNAMES&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cce7f2f2f0dc525117a70d581d9c335212145e5b" translate="yes" xml:space="preserve">
          <source>Bottom</source>
          <target state="translated">Bottom</target>
        </trans-unit>
        <trans-unit id="e1dbd823dfdfc2d17617830a8f74f4d932681cc4" translate="yes" xml:space="preserve">
          <source>Bottom-left corner</source>
          <target state="translated">左下角</target>
        </trans-unit>
        <trans-unit id="80aa1874eb99dccda2276381f9f4ffdec7143eaf" translate="yes" xml:space="preserve">
          <source>Bottom-right corner</source>
          <target state="translated">右下角</target>
        </trans-unit>
        <trans-unit id="b2e002ea925c38ed1d57bf37ef5d40426841b702" translate="yes" xml:space="preserve">
          <source>Bounded Semaphore is a version of &lt;a href=&quot;#asyncio.Semaphore&quot;&gt;&lt;code&gt;Semaphore&lt;/code&gt;&lt;/a&gt; that raises a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;#asyncio.Semaphore.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; if it increases the internal counter above the initial &lt;em&gt;value&lt;/em&gt;.</source>
          <target state="translated">界信号量是一个版本的&lt;a href=&quot;#asyncio.Semaphore&quot;&gt; &lt;code&gt;Semaphore&lt;/code&gt; &lt;/a&gt;即引起了&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; 异常&lt;/a&gt;在&lt;a href=&quot;#asyncio.Semaphore.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt;如果它增加上述初始内部计数器&lt;em&gt;值&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f27d46d2bc64f4ff7fc02b97b058167483c819b5" translate="yes" xml:space="preserve">
          <source>Bounded length deques provide functionality similar to the &lt;code&gt;tail&lt;/code&gt; filter in Unix:</source>
          <target state="translated">有界长度双端队列提供的功能类似于Unix中的 &lt;code&gt;tail&lt;/code&gt; 过滤器：</target>
        </trans-unit>
        <trans-unit id="a2756e8ad9a82c890a07dc2ba959f75c6165deec" translate="yes" xml:space="preserve">
          <source>BoundedSemaphore</source>
          <target state="translated">BoundedSemaphore</target>
        </trans-unit>
        <trans-unit id="db506c7b5783724a0ae667647def25dde4ac8c16" translate="yes" xml:space="preserve">
          <source>Branch-Call-Jump (BCJ) filters:</source>
          <target state="translated">分支-调用-跳跃(BCJ)过滤器。</target>
        </trans-unit>
        <trans-unit id="6818e738c2b21bdaaa174d945a5a8d955f9b4660" translate="yes" xml:space="preserve">
          <source>Break internal references within the DOM so that it will be garbage collected on versions of Python without cyclic GC. Even when cyclic GC is available, using this can make large amounts of memory available sooner, so calling this on DOM objects as soon as they are no longer needed is good practice. This only needs to be called on the &lt;code&gt;Document&lt;/code&gt; object, but may be called on child nodes to discard children of that node.</source>
          <target state="translated">在DOM中中断内部引用，以便在没有循环GC的Python版本上将其垃圾收集。即使有可用的循环GC，使用它也可以更快地使大量内存可用，因此，在不再需要DOM对象时对其进行调用是一个好习惯。这仅需要在 &lt;code&gt;Document&lt;/code&gt; 对象上调用，但可以在子节点上调用以丢弃该节点的子级。</target>
        </trans-unit>
        <trans-unit id="057f53976b47c840e7d4ea51556fe76a4983b160" translate="yes" xml:space="preserve">
          <source>Break key (unreliable)</source>
          <target state="translated">断键(不可靠)</target>
        </trans-unit>
        <trans-unit id="26d339cfcc10acc619584ccfcecd8aee58a08229" translate="yes" xml:space="preserve">
          <source>Breakpoints are indexed by number through a list called &lt;code&gt;bpbynumber&lt;/code&gt; and by &lt;code&gt;(file, line)&lt;/code&gt; pairs through &lt;code&gt;bplist&lt;/code&gt;. The former points to a single instance of class &lt;a href=&quot;#bdb.Breakpoint&quot;&gt;&lt;code&gt;Breakpoint&lt;/code&gt;&lt;/a&gt;. The latter points to a list of such instances since there may be more than one breakpoint per line.</source>
          <target state="translated">断点由数字在列表称为索引 &lt;code&gt;bpbynumber&lt;/code&gt; 和 &lt;code&gt;(file, line)&lt;/code&gt; 通过对 &lt;code&gt;bplist&lt;/code&gt; 的。前者指向类&lt;a href=&quot;#bdb.Breakpoint&quot;&gt; &lt;code&gt;Breakpoint&lt;/code&gt; &lt;/a&gt;的单个实例。后者指向此类实例的列表，因为每行可能有多个断点。</target>
        </trans-unit>
        <trans-unit id="b10a6960c4012f359c0ce6bee9b19ff172792a7d" translate="yes" xml:space="preserve">
          <source>Brent Welch&amp;rsquo;s encyclopedic book.</source>
          <target state="translated">布伦特&amp;middot;韦尔奇（Brent Welch）的百科全书。</target>
        </trans-unit>
        <trans-unit id="5457d94057ed4418eb771b358e421dae5522d307" translate="yes" xml:space="preserve">
          <source>Broadly speaking, &lt;code&gt;d.strftime(fmt)&lt;/code&gt; acts like the &lt;a href=&quot;time#module-time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; module&amp;rsquo;s &lt;code&gt;time.strftime(fmt, d.timetuple())&lt;/code&gt; although not all objects support a &lt;code&gt;timetuple()&lt;/code&gt; method.</source>
          <target state="translated">从广义上讲， &lt;code&gt;d.strftime(fmt)&lt;/code&gt; 的行为类似于&lt;a href=&quot;time#module-time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;模块的 &lt;code&gt;time.strftime(fmt, d.timetuple())&lt;/code&gt; 尽管并非所有对象都支持 &lt;code&gt;timetuple()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="c7dfd8323fd5e72ce649953eb9bbb100abdbf328" translate="yes" xml:space="preserve">
          <source>Broken pipe</source>
          <target state="translated">管块</target>
        </trans-unit>
        <trans-unit id="f987aa52401269ae9bd2277e6533a55308a7fc04" translate="yes" xml:space="preserve">
          <source>Broken pipe: write to pipe with no readers.</source>
          <target state="translated">断管:写到管子上,没有读者。</target>
        </trans-unit>
        <trans-unit id="46eaefda847b8f294ab091c272ac7c3caec75b7d" translate="yes" xml:space="preserve">
          <source>BrokenPipeError</source>
          <target state="translated">BrokenPipeError</target>
        </trans-unit>
        <trans-unit id="65cda754ede1327c252b27907e2e257c94decd6f" translate="yes" xml:space="preserve">
          <source>Browser Controller Objects</source>
          <target state="translated">浏览器控制器对象</target>
        </trans-unit>
        <trans-unit id="a327e47ded8f65f6d258b4a730e569ee168be6db" translate="yes" xml:space="preserve">
          <source>Browser controllers provide these methods which parallel three of the module-level convenience functions:</source>
          <target state="translated">浏览器控制器提供了这些方法,这些方法与模块级的三个方便功能并行。</target>
        </trans-unit>
        <trans-unit id="cce48398db484398ea1c477d2844426c417b73bf" translate="yes" xml:space="preserve">
          <source>Buffer overflow</source>
          <target state="translated">缓冲区溢出</target>
        </trans-unit>
        <trans-unit id="52b12a6415af8c93a85ddb213e23fb21922c5ef9" translate="yes" xml:space="preserve">
          <source>Buffer size in bytes for sending a file-like message body.</source>
          <target state="translated">发送类似文件的消息体的缓冲区大小,以字节为单位。</target>
        </trans-unit>
        <trans-unit id="25d5353daf56aa3d45af53312311f4d3864fffdd" translate="yes" xml:space="preserve">
          <source>Buffer the bytes &lt;em&gt;data&lt;/em&gt; for transmission to the client. It&amp;rsquo;s okay if this method actually transmits the data; &lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt;&lt;code&gt;BaseHandler&lt;/code&gt;&lt;/a&gt; just separates write and flush operations for greater efficiency when the underlying system actually has such a distinction.</source>
          <target state="translated">缓冲字节&lt;em&gt;数据&lt;/em&gt;以传输到客户端。如果该方法实际传输数据也可以；当基础系统实际上有这种区别时，&lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt; &lt;code&gt;BaseHandler&lt;/code&gt; &lt;/a&gt;只是将写操作和刷新操作分开，以提高效率。</target>
        </trans-unit>
        <trans-unit id="657141fd493f1544370d627da1300193e53e95d7" translate="yes" xml:space="preserve">
          <source>Buffer underflow</source>
          <target state="translated">缓冲区漏水</target>
        </trans-unit>
        <trans-unit id="686e3ac1e8c5ee3c1c5629d53729cf9e049cd6ce" translate="yes" xml:space="preserve">
          <source>BufferError</source>
          <target state="translated">BufferError</target>
        </trans-unit>
        <trans-unit id="c7b39b7a30837e3319a6b2c6ed8a735c8561e2c6" translate="yes" xml:space="preserve">
          <source>Buffered I/O streams provide a higher-level interface to an I/O device than raw I/O does.</source>
          <target state="translated">与原始I/O相比,缓冲I/O流为I/O设备提供了一个更高级别的接口。</target>
        </trans-unit>
        <trans-unit id="959e8e27a1a7517d9d6fea8d34bd9b957b635286" translate="yes" xml:space="preserve">
          <source>Buffered Protocols can be used with any event loop method that supports &lt;a href=&quot;#streaming-protocols&quot;&gt;Streaming Protocols&lt;/a&gt;.</source>
          <target state="translated">缓冲协议可以与任何支持&lt;a href=&quot;#streaming-protocols&quot;&gt;流协议的&lt;/a&gt;事件循环方法一起使用。</target>
        </trans-unit>
        <trans-unit id="574102792f7c7c7e47baae36d954590700cb065f" translate="yes" xml:space="preserve">
          <source>Buffered Streaming Protocols</source>
          <target state="translated">缓冲流协议</target>
        </trans-unit>
        <trans-unit id="b311ee6c0f812e0972743c0b62829df0f807921a" translate="yes" xml:space="preserve">
          <source>Buffered Streams</source>
          <target state="translated">缓冲流</target>
        </trans-unit>
        <trans-unit id="c8eea1b80ba437eb2c7d9d8e4a7a1c0c36ddce4e" translate="yes" xml:space="preserve">
          <source>Bugs</source>
          <target state="translated">Bugs</target>
        </trans-unit>
        <trans-unit id="e2a08d31bdd8d081756ba38c56ba4d641e93dc37" translate="yes" xml:space="preserve">
          <source>Build a pair of connected socket objects using the given address family, socket type, and protocol number. Address family, socket type, and protocol number are as for the &lt;a href=&quot;#socket.socket&quot;&gt;&lt;code&gt;socket()&lt;/code&gt;&lt;/a&gt; function above. The default family is &lt;a href=&quot;#socket.AF_UNIX&quot;&gt;&lt;code&gt;AF_UNIX&lt;/code&gt;&lt;/a&gt; if defined on the platform; otherwise, the default is &lt;a href=&quot;#socket.AF_INET&quot;&gt;&lt;code&gt;AF_INET&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用给定的地址族，套接字类型和协议号构建一对连接的套接字对象。地址族，套接字类型和协议号与上面的&lt;a href=&quot;#socket.socket&quot;&gt; &lt;code&gt;socket()&lt;/code&gt; &lt;/a&gt;函数相同。如果在平台上定义，则默认系列为&lt;a href=&quot;#socket.AF_UNIX&quot;&gt; &lt;code&gt;AF_UNIX&lt;/code&gt; &lt;/a&gt;。否则，默认值为&lt;a href=&quot;#socket.AF_INET&quot;&gt; &lt;code&gt;AF_INET&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6e9656b5fcacde2351e066c227427c3e012c98d2" translate="yes" xml:space="preserve">
          <source>Building XML documents</source>
          <target state="translated">构建XML文档</target>
        </trans-unit>
        <trans-unit id="9fa5c035dd72ed1a6c59d2333e838d715c597849" translate="yes" xml:space="preserve">
          <source>Building generic types</source>
          <target state="translated">建立通用类型</target>
        </trans-unit>
        <trans-unit id="bd6340131dc0513bc11d497bc3d1cf2f8b579961" translate="yes" xml:space="preserve">
          <source>Built-in Constants</source>
          <target state="translated">内置常量</target>
        </trans-unit>
        <trans-unit id="82e330488e4f4db6f630ff4b0e83b77d370d478e" translate="yes" xml:space="preserve">
          <source>Built-in Exceptions</source>
          <target state="translated">内置的例外情况</target>
        </trans-unit>
        <trans-unit id="d2c05904ba07a6ff264de1d75f78c6ff5dce9860" translate="yes" xml:space="preserve">
          <source>Built-in Functions</source>
          <target state="translated">内置功能</target>
        </trans-unit>
        <trans-unit id="9383071c87bb3c0b8b13c806952ce07e9c48a3bd" translate="yes" xml:space="preserve">
          <source>Built-in Types</source>
          <target state="translated">内置类型</target>
        </trans-unit>
        <trans-unit id="f2f9b8a4a5c37edcd59988672dfcfd3c6c2d4a94" translate="yes" xml:space="preserve">
          <source>Bulgarian, Byelorussian, Macedonian, Russian, Serbian</source>
          <target state="translated">保加利亚语、白俄罗斯语、马其顿语、俄语、塞尔维亚语。</target>
        </trans-unit>
        <trans-unit id="484a7d24c1efecafaa0613f78c13ce044b371cb5" translate="yes" xml:space="preserve">
          <source>Bus error (bad memory access).</source>
          <target state="translated">总线错误(内存访问不良)。</target>
        </trans-unit>
        <trans-unit id="f07f4711cba2866b61759ea0e7b48922ec7fe786" translate="yes" xml:space="preserve">
          <source>But for strings with more than &lt;code&gt;sys.float_info.dig&lt;/code&gt; significant digits, this isn&amp;rsquo;t always true:</source>
          <target state="translated">但是对于超过 &lt;code&gt;sys.float_info.dig&lt;/code&gt; 有效数字的字符串，并非总是如此：</target>
        </trans-unit>
        <trans-unit id="004c5cf93a775636561b365abba996971a9aedc3" translate="yes" xml:space="preserve">
          <source>But if we pass a &lt;em&gt;buffer_callback&lt;/em&gt; and then give back the accumulated buffers when unserializing, we are able to get back the original object:</source>
          <target state="translated">但是，如果我们传递&lt;em&gt;buffer_callback&lt;/em&gt;，然后在反序列化时交还累积的缓冲区，则可以取回原始对象：</target>
        </trans-unit>
        <trans-unit id="a9a6dc0dea2456e6fdbe63316e135e168e69bbbc" translate="yes" xml:space="preserve">
          <source>But this is allowed:</source>
          <target state="translated">但这是允许的。</target>
        </trans-unit>
        <trans-unit id="bcc92d564bd4808e09d06300f9cf1c685ab17806" translate="yes" xml:space="preserve">
          <source>By &amp;ldquo;installed package&amp;rdquo; we generally mean a third-party package installed into Python&amp;rsquo;s &lt;code&gt;site-packages&lt;/code&gt; directory via tools such as &lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip&lt;/a&gt;. Specifically, it means a package with either a discoverable &lt;code&gt;dist-info&lt;/code&gt; or &lt;code&gt;egg-info&lt;/code&gt; directory, and metadata defined by &lt;a href=&quot;https://www.python.org/dev/peps/pep-0566&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 566&lt;/strong&gt;&lt;/a&gt; or its older specifications. By default, package metadata can live on the file system or in zip archives on &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt;. Through an extension mechanism, the metadata can live almost anywhere.</source>
          <target state="translated">&amp;ldquo;安装的软件包&amp;rdquo;通常是指通过诸如&lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip之类的&lt;/a&gt;工具安装到Python的 &lt;code&gt;site-packages&lt;/code&gt; 目录中的第三方软件包。具体而言，它表示具有可发现的 &lt;code&gt;dist-info&lt;/code&gt; 或 &lt;code&gt;egg-info&lt;/code&gt; 目录以及由&lt;a href=&quot;https://www.python.org/dev/peps/pep-0566&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 566&lt;/strong&gt;&lt;/a&gt;或更旧的规范定义的元数据的软件包。默认情况下，程序包元数据可以存在于文件系统上，也可以存在于&lt;a href=&quot;sys#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; 的&lt;/a&gt;zip归档文件中。通过扩展机制，元数据几乎可以存在于任何地方。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4a6147a8ef54b0c6f733b2e259793dcd5ecdd996" translate="yes" xml:space="preserve">
          <source>By &amp;ldquo;installed package&amp;rdquo; we generally mean a third-party package installed into Python&amp;rsquo;s &lt;code&gt;site-packages&lt;/code&gt; directory via tools such as &lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip&lt;/a&gt;. Specifically, it means a package with either a discoverable &lt;code&gt;dist-info&lt;/code&gt; or &lt;code&gt;egg-info&lt;/code&gt; directory, and metadata defined by &lt;a href=&quot;https://www.python.org/dev/peps/pep-0566/&quot;&gt;PEP 566&lt;/a&gt; or its older specifications. By default, package metadata can live on the file system or in zip archives on &lt;code&gt;sys.path&lt;/code&gt;. Through an extension mechanism, the metadata can live almost anywhere.</source>
          <target state="translated">&amp;ldquo;安装的软件包&amp;rdquo;通常是指通过诸如&lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip之类的&lt;/a&gt;工具安装到Python的 &lt;code&gt;site-packages&lt;/code&gt; 目录中的第三方软件包。具体而言，它表示具有可发现的 &lt;code&gt;dist-info&lt;/code&gt; 或 &lt;code&gt;egg-info&lt;/code&gt; 目录以及由&lt;a href=&quot;https://www.python.org/dev/peps/pep-0566/&quot;&gt;PEP 566&lt;/a&gt;或更旧的规范定义的元数据的软件包。默认情况下，程序包元数据可以存在于文件系统上或 &lt;code&gt;sys.path&lt;/code&gt; 的 zip归档文件中。通过扩展机制，元数据几乎可以存在于任何地方。</target>
        </trans-unit>
        <trans-unit id="eb6eed428fae77be28a2a3bf7fc36fab40ed7e17" translate="yes" xml:space="preserve">
          <source>By combining together these and similar commands, intricate shapes and pictures can easily be drawn.</source>
          <target state="translated">通过将这些命令和类似的命令组合在一起,可以很容易地绘制复杂的形状和图片。</target>
        </trans-unit>
        <trans-unit id="286ee8278fd8ab4e0bb68f3b03113179bc8da4c6" translate="yes" xml:space="preserve">
          <source>By contrast, if you create the SSL context by calling the &lt;a href=&quot;#ssl.SSLContext&quot;&gt;&lt;code&gt;SSLContext&lt;/code&gt;&lt;/a&gt; constructor yourself, it will not have certificate validation nor hostname checking enabled by default. If you do so, please read the paragraphs below to achieve a good security level.</source>
          <target state="translated">相反，如果您通过自己调用&lt;a href=&quot;#ssl.SSLContext&quot;&gt; &lt;code&gt;SSLContext&lt;/code&gt; &lt;/a&gt;构造函数来创建SSL上下文，则默认情况下不会启用证书验证或主机名检查。如果这样做，请阅读以下段落以达到良好的安全级别。</target>
        </trans-unit>
        <trans-unit id="4925b83b2b2b23aaf1c66fff18b8c0029cc678e1" translate="yes" xml:space="preserve">
          <source>By default &lt;a href=&quot;#module-shutil&quot;&gt;&lt;code&gt;shutil&lt;/code&gt;&lt;/a&gt; provides these formats:</source>
          <target state="translated">默认情况下，&lt;a href=&quot;#module-shutil&quot;&gt; &lt;code&gt;shutil&lt;/code&gt; &lt;/a&gt;提供以下格式：</target>
        </trans-unit>
        <trans-unit id="a442e6847fcb81d8e12f5ccd5522ffb613f8b302" translate="yes" xml:space="preserve">
          <source>By default &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; will fail to replace attributes that don&amp;rsquo;t exist. If you pass in &lt;code&gt;create=True&lt;/code&gt;, and the attribute doesn&amp;rsquo;t exist, patch will create the attribute for you when the patched function is called, and delete it again after the patched function has exited. This is useful for writing tests against attributes that your production code creates at runtime. It is off by default because it can be dangerous. With it switched on you can write passing tests against APIs that don&amp;rsquo;t actually exist!</source>
          <target state="translated">默认情况下，&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;将无法替换不存在的属性。如果您传入 &lt;code&gt;create=True&lt;/code&gt; ，并且该属性不存在，则修补程序将在调用修补函数时为您创建该属性，并在退出修补函数后再次将其删除。这对于根据生产代码在运行时创建的属性编写测试很有用。默认情况下处于禁用状态，因为它可能很危险。打开它，您可以针对实际上不存在的API编写通过测试！</target>
        </trans-unit>
        <trans-unit id="e11f6ec8c72c6430bc9c389fb2edfddc8c054485" translate="yes" xml:space="preserve">
          <source>By default Unicode alphanumerics are the ones used in Unicode patterns, but this can be changed by using the &lt;a href=&quot;#re.ASCII&quot;&gt;&lt;code&gt;ASCII&lt;/code&gt;&lt;/a&gt; flag. Word boundaries are determined by the current locale if the &lt;a href=&quot;#re.LOCALE&quot;&gt;&lt;code&gt;LOCALE&lt;/code&gt;&lt;/a&gt; flag is used. Inside a character range, &lt;code&gt;\b&lt;/code&gt; represents the backspace character, for compatibility with Python&amp;rsquo;s string literals.</source>
          <target state="translated">默认情况下，Unicode字母数字是Unicode模式中使用的字母数字，但是可以通过使用&lt;a href=&quot;#re.ASCII&quot;&gt; &lt;code&gt;ASCII&lt;/code&gt; &lt;/a&gt;标志进行更改。如果使用&lt;a href=&quot;#re.LOCALE&quot;&gt; &lt;code&gt;LOCALE&lt;/code&gt; &lt;/a&gt;标志，则字边界由当前语言环境确定。在字符范围内， &lt;code&gt;\b&lt;/code&gt; 表示退格字符，以与Python的字符串文字兼容。</target>
        </trans-unit>
        <trans-unit id="a555dcde94361baeb4a969d6e2aba5d45aab6d18" translate="yes" xml:space="preserve">
          <source>By default all tasks for the current event loop are returned. If &lt;em&gt;loop&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, the &lt;a href=&quot;asyncio-eventloop#asyncio.get_event_loop&quot;&gt;&lt;code&gt;get_event_loop()&lt;/code&gt;&lt;/a&gt; function is used to get the current loop.</source>
          <target state="translated">默认情况下，返回当前事件循环的所有任务。如果&lt;em&gt;loop&lt;/em&gt;为 &lt;code&gt;None&lt;/code&gt; ，则使用&lt;a href=&quot;asyncio-eventloop#asyncio.get_event_loop&quot;&gt; &lt;code&gt;get_event_loop()&lt;/code&gt; &lt;/a&gt;函数获取当前循环。</target>
        </trans-unit>
        <trans-unit id="348aa774128c8876086cc6859a2d1a237faf35da" translate="yes" xml:space="preserve">
          <source>By default asyncio is configured to use &lt;a href=&quot;#asyncio.SelectorEventLoop&quot;&gt;&lt;code&gt;SelectorEventLoop&lt;/code&gt;&lt;/a&gt; on Unix and &lt;a href=&quot;#asyncio.ProactorEventLoop&quot;&gt;&lt;code&gt;ProactorEventLoop&lt;/code&gt;&lt;/a&gt; on Windows.</source>
          <target state="translated">默认情况下，asyncio配置为在Unix 上使用&lt;a href=&quot;#asyncio.SelectorEventLoop&quot;&gt; &lt;code&gt;SelectorEventLoop&lt;/code&gt; &lt;/a&gt;，在Windows 上使用&lt;a href=&quot;#asyncio.ProactorEventLoop&quot;&gt; &lt;code&gt;ProactorEventLoop&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fbe8db946f6c4039aedf3337f510e5fb4d84a3b8" translate="yes" xml:space="preserve">
          <source>By default asyncio runs in production mode. In order to ease the development asyncio has a &lt;em&gt;debug mode&lt;/em&gt;.</source>
          <target state="translated">默认情况下，asyncio在生产模式下运行。为了简化开发，asyncio具有&lt;em&gt;调试模式&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f2d0e2958afe24ad181976d5e62c588dde7221db" translate="yes" xml:space="preserve">
          <source>By default functions are assumed to return the C &lt;code&gt;int&lt;/code&gt; type. Other return types can be specified by setting the &lt;code&gt;restype&lt;/code&gt; attribute of the function object.</source>
          <target state="translated">默认情况下，假定函数返回C &lt;code&gt;int&lt;/code&gt; 类型。可以通过设置函数对象的 &lt;code&gt;restype&lt;/code&gt; 属性来指定其他返回类型。</target>
        </trans-unit>
        <trans-unit id="83606b363ba65c4bdc94a570461388ab6e60c908" translate="yes" xml:space="preserve">
          <source>By default if a process is not the creator of the queue then on exit it will attempt to join the queue&amp;rsquo;s background thread. The process can call &lt;a href=&quot;#multiprocessing.Queue.cancel_join_thread&quot;&gt;&lt;code&gt;cancel_join_thread()&lt;/code&gt;&lt;/a&gt; to make &lt;a href=&quot;#multiprocessing.Queue.join_thread&quot;&gt;&lt;code&gt;join_thread()&lt;/code&gt;&lt;/a&gt; do nothing.</source>
          <target state="translated">默认情况下，如果进程不是队列的创建者，则退出时它将尝试加入队列的后台线程。该进程可以调用&lt;a href=&quot;#multiprocessing.Queue.cancel_join_thread&quot;&gt; &lt;code&gt;cancel_join_thread()&lt;/code&gt; &lt;/a&gt;使&lt;a href=&quot;#multiprocessing.Queue.join_thread&quot;&gt; &lt;code&gt;join_thread()&lt;/code&gt; &lt;/a&gt;不执行任何操作。</target>
        </trans-unit>
        <trans-unit id="2235fc8bdd0df529b51b9b98a249362b87248fd8" translate="yes" xml:space="preserve">
          <source>By default many of the protocol methods are required to return objects of a specific type. These methods are preconfigured with a default return value, so that they can be used without you having to do anything if you aren&amp;rsquo;t interested in the return value. You can still &lt;em&gt;set&lt;/em&gt; the return value manually if you want to change the default.</source>
          <target state="translated">默认情况下，需要许多协议方法来返回特定类型的对象。这些方法已预先配置了默认的返回值，因此，如果您对返回值不感兴趣，则无需执行任何操作即可使用它们。如果要更改默认值，仍然可以手动&lt;em&gt;设置&lt;/em&gt;返回值。</target>
        </trans-unit>
        <trans-unit id="47e5ba4cdbf45dc6469e9b93a83211483f2c3df3" translate="yes" xml:space="preserve">
          <source>By default this runner shows &lt;a href=&quot;exceptions#DeprecationWarning&quot;&gt;&lt;code&gt;DeprecationWarning&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#PendingDeprecationWarning&quot;&gt;&lt;code&gt;PendingDeprecationWarning&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#ResourceWarning&quot;&gt;&lt;code&gt;ResourceWarning&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;exceptions#ImportWarning&quot;&gt;&lt;code&gt;ImportWarning&lt;/code&gt;&lt;/a&gt; even if they are &lt;a href=&quot;warnings#warning-ignored&quot;&gt;ignored by default&lt;/a&gt;. Deprecation warnings caused by &lt;a href=&quot;#deprecated-aliases&quot;&gt;deprecated unittest methods&lt;/a&gt; are also special-cased and, when the warning filters are &lt;code&gt;'default'&lt;/code&gt; or &lt;code&gt;'always'&lt;/code&gt;, they will appear only once per-module, in order to avoid too many warning messages. This behavior can be overridden using Python&amp;rsquo;s &lt;code&gt;-Wd&lt;/code&gt; or &lt;code&gt;-Wa&lt;/code&gt; options (see &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#using-on-warnings&quot;&gt;Warning control&lt;/a&gt;) and leaving &lt;em&gt;warnings&lt;/em&gt; to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">默认情况下，该运行程序显示&lt;a href=&quot;exceptions#DeprecationWarning&quot;&gt; &lt;code&gt;DeprecationWarning&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;exceptions#PendingDeprecationWarning&quot;&gt; &lt;code&gt;PendingDeprecationWarning&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;exceptions#ResourceWarning&quot;&gt; &lt;code&gt;ResourceWarning&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;exceptions#ImportWarning&quot;&gt; &lt;code&gt;ImportWarning&lt;/code&gt; ,&lt;/a&gt;即使&lt;a href=&quot;warnings#warning-ignored&quot;&gt;默认情况下&lt;/a&gt;将忽略它们。不&lt;a href=&quot;#deprecated-aliases&quot;&gt;推荐使用的unittest方法&lt;/a&gt;引起的不推荐使用的警告也是特殊情况，并且警告过滤器为 &lt;code&gt;'default'&lt;/code&gt; 或 &lt;code&gt;'always'&lt;/code&gt; ，每个模块仅出现一次，以避免过多的警告消息。可以使用Python的 &lt;code&gt;-Wd&lt;/code&gt; 或 &lt;code&gt;-Wa&lt;/code&gt; 选项（请参阅&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#using-on-warnings&quot;&gt;警告控件&lt;/a&gt;）并将&lt;em&gt;警告&lt;/em&gt;保留为 &lt;code&gt;None&lt;/code&gt; 来覆盖此行为。</target>
        </trans-unit>
        <trans-unit id="ffe1ee682848dcbf8b31aad1ec757414332a0eb9" translate="yes" xml:space="preserve">
          <source>By default this runner shows &lt;a href=&quot;exceptions#DeprecationWarning&quot;&gt;&lt;code&gt;DeprecationWarning&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#PendingDeprecationWarning&quot;&gt;&lt;code&gt;PendingDeprecationWarning&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#ResourceWarning&quot;&gt;&lt;code&gt;ResourceWarning&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;exceptions#ImportWarning&quot;&gt;&lt;code&gt;ImportWarning&lt;/code&gt;&lt;/a&gt; even if they are &lt;a href=&quot;warnings#warning-ignored&quot;&gt;ignored by default&lt;/a&gt;. Deprecation warnings caused by &lt;a href=&quot;#deprecated-aliases&quot;&gt;deprecated unittest methods&lt;/a&gt; are also special-cased and, when the warning filters are &lt;code&gt;'default'&lt;/code&gt; or &lt;code&gt;'always'&lt;/code&gt;, they will appear only once per-module, in order to avoid too many warning messages. This behavior can be overridden using Python&amp;rsquo;s &lt;code&gt;-Wd&lt;/code&gt; or &lt;code&gt;-Wa&lt;/code&gt; options (see &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#using-on-warnings&quot;&gt;Warning control&lt;/a&gt;) and leaving &lt;em&gt;warnings&lt;/em&gt; to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">默认情况下，该运行程序显示&lt;a href=&quot;exceptions#DeprecationWarning&quot;&gt; &lt;code&gt;DeprecationWarning&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;exceptions#PendingDeprecationWarning&quot;&gt; &lt;code&gt;PendingDeprecationWarning&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;exceptions#ResourceWarning&quot;&gt; &lt;code&gt;ResourceWarning&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;exceptions#ImportWarning&quot;&gt; &lt;code&gt;ImportWarning&lt;/code&gt; ,&lt;/a&gt;即使&lt;a href=&quot;warnings#warning-ignored&quot;&gt;默认情况下&lt;/a&gt;它们也被忽略。由&lt;a href=&quot;#deprecated-aliases&quot;&gt;过时的unittest方法&lt;/a&gt;引起的弃用警告也是特殊情况，并且当警告过滤器为 &lt;code&gt;'default'&lt;/code&gt; 或 &lt;code&gt;'always'&lt;/code&gt; ，每个模块将仅出现一次，以避免过多的警告消息。可以使用Python的 &lt;code&gt;-Wd&lt;/code&gt; 或 &lt;code&gt;-Wa&lt;/code&gt; 选项（请参阅&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#using-on-warnings&quot;&gt;警告控件&lt;/a&gt;）并将&lt;em&gt;警告&lt;/em&gt;保留为 &lt;code&gt;None&lt;/code&gt; 来覆盖此行为。</target>
        </trans-unit>
        <trans-unit id="5ae01e3d2789afe7d1a9556247cf9d3863cbe4da" translate="yes" xml:space="preserve">
          <source>By default this skips private attributes beginning with &amp;lsquo;_&amp;rsquo; but includes all magic methods, i.e. those starting and ending in &amp;lsquo;__&amp;rsquo;.</source>
          <target state="translated">默认情况下，它会跳过以&amp;ldquo; _&amp;rdquo;开头的私有属性，但包括所有魔术方法，即以&amp;ldquo; __&amp;rdquo;开头和结尾的魔术方法。</target>
        </trans-unit>
        <trans-unit id="52f7dbe5b41ae8611a2810a429a49fbad90c7410" translate="yes" xml:space="preserve">
          <source>By default when using &lt;a href=&quot;#configparser.ConfigParser.getboolean&quot;&gt;&lt;code&gt;getboolean()&lt;/code&gt;&lt;/a&gt;, config parsers consider the following values &lt;code&gt;True&lt;/code&gt;: &lt;code&gt;'1'&lt;/code&gt;, &lt;code&gt;'yes'&lt;/code&gt;, &lt;code&gt;'true'&lt;/code&gt;, &lt;code&gt;'on'&lt;/code&gt; and the following values &lt;code&gt;False&lt;/code&gt;: &lt;code&gt;'0'&lt;/code&gt;, &lt;code&gt;'no'&lt;/code&gt;, &lt;code&gt;'false'&lt;/code&gt;, &lt;code&gt;'off'&lt;/code&gt;. You can override this by specifying a custom dictionary of strings and their Boolean outcomes. For example:</source>
          <target state="translated">默认情况下，使用&lt;a href=&quot;#configparser.ConfigParser.getboolean&quot;&gt; &lt;code&gt;getboolean()&lt;/code&gt; 时&lt;/a&gt;，配置解析器会考虑以下值 &lt;code&gt;True&lt;/code&gt; ： &lt;code&gt;'1'&lt;/code&gt; ， &lt;code&gt;'yes'&lt;/code&gt; ， &lt;code&gt;'true'&lt;/code&gt; ， &lt;code&gt;'on'&lt;/code&gt; 和以下值 &lt;code&gt;False&lt;/code&gt; ： &lt;code&gt;'0'&lt;/code&gt; ， &lt;code&gt;'no'&lt;/code&gt; ， &lt;code&gt;'false'&lt;/code&gt; ， &lt;code&gt;'off'&lt;/code&gt; 。您可以通过指定一个自定义的字符串字典及其布尔结果来覆盖它。例如：</target>
        </trans-unit>
        <trans-unit id="21b2fa9e8bd653d25936c1ef6f64b883a8409f29" translate="yes" xml:space="preserve">
          <source>By default you will not get any tracebacks in user-defined functions, aggregates, converters, authorizer callbacks etc. If you want to debug them, you can call this function with &lt;em&gt;flag&lt;/em&gt; set to &lt;code&gt;True&lt;/code&gt;. Afterwards, you will get tracebacks from callbacks on &lt;code&gt;sys.stderr&lt;/code&gt;. Use &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; to disable the feature again.</source>
          <target state="translated">默认情况下，您不会在用户定义的函数，聚合，转换器，授权者回调等中获得任何回溯。如果要调试它们，则可以将该&lt;em&gt;标志&lt;/em&gt;设置为 &lt;code&gt;True&lt;/code&gt; 来调用此函数。之后，您将从 &lt;code&gt;sys.stderr&lt;/code&gt; 上的回调获得回溯。使用&lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; &lt;/a&gt;可以再次禁用该功能。</target>
        </trans-unit>
        <trans-unit id="f132014d689a5cf73b7e430ffb2dcd6bdf06fb85" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; calculates the usage message from the arguments it contains:</source>
          <target state="translated">默认情况下，&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;根据其包含的参数计算使用情况消息：</target>
        </trans-unit>
        <trans-unit id="024605f88e757d67ce6f6e4fd5acb4d11c9a071b" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; groups command-line arguments into &amp;ldquo;positional arguments&amp;rdquo; and &amp;ldquo;optional arguments&amp;rdquo; when displaying help messages. When there is a better conceptual grouping of arguments than this default one, appropriate groups can be created using the &lt;a href=&quot;#argparse.ArgumentParser.add_argument_group&quot;&gt;&lt;code&gt;add_argument_group()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">默认情况下，在显示帮助消息时，&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;将命令行参数分为&amp;ldquo;位置参数&amp;rdquo;和&amp;ldquo;可选参数&amp;rdquo;。如果参数的概念分组比此默认参数更好，则可以使用&lt;a href=&quot;#argparse.ArgumentParser.add_argument_group&quot;&gt; &lt;code&gt;add_argument_group()&lt;/code&gt; &lt;/a&gt;方法创建适当的组：</target>
        </trans-unit>
        <trans-unit id="32cb386527e775896cd057a28fa7c4bd40470da8" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; objects read command-line arguments in as simple strings. However, quite often the command-line string should instead be interpreted as another type, like a &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;type&lt;/code&gt; keyword argument of &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;add_argument()&lt;/code&gt;&lt;/a&gt; allows any necessary type-checking and type conversions to be performed. Common built-in types and functions can be used directly as the value of the &lt;code&gt;type&lt;/code&gt; argument:</source>
          <target state="translated">默认情况下，&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;对象以简单字符串的形式读取命令行参数。但是，命令行字符串通常应解释为另一种类型，例如&lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt; &lt;code&gt;add_argument()&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;type&lt;/code&gt; 关键字参数允许执行任何必要的类型检查和类型转换。常见的内置类型和函数可以直接用作 &lt;code&gt;type&lt;/code&gt; 参数的值：</target>
        </trans-unit>
        <trans-unit id="94b437bedcb22203818d42f82de4da353c13eba3" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; objects use &lt;code&gt;sys.argv[0]&lt;/code&gt; to determine how to display the name of the program in help messages. This default is almost always desirable because it will make the help messages match how the program was invoked on the command line. For example, consider a file named &lt;code&gt;myprogram.py&lt;/code&gt; with the following code:</source>
          <target state="translated">默认情况下，&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;对象使用 &lt;code&gt;sys.argv[0]&lt;/code&gt; 确定如何在帮助消息中显示程序的名称。几乎总是希望使用此默认值，因为它将使帮助消息与在命令行上调用程序的方式匹配。例如，考虑使用以下代码的名为 &lt;code&gt;myprogram.py&lt;/code&gt; 的文件：</target>
        </trans-unit>
        <trans-unit id="bb58169c2afcd07d3793490e9bfb11ff16d131cb" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#dataclasses.dataclass&quot;&gt;&lt;code&gt;dataclass()&lt;/code&gt;&lt;/a&gt; will not implicitly add a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method unless it is safe to do so. Neither will it add or change an existing explicitly defined &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method. Setting the class attribute &lt;code&gt;__hash__ = None&lt;/code&gt; has a specific meaning to Python, as described in the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">默认情况下，除非安全，否则&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#dataclasses.dataclass&quot;&gt; &lt;code&gt;dataclass()&lt;/code&gt; &lt;/a&gt;不会隐式添加__hash __（）方法。它既不会添加也不会更改现有的显式定义的&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt;方法。如&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt;文档中所述，设置类属性 &lt;code&gt;__hash__ = None&lt;/code&gt; 对Python具有特定的含义。</target>
        </trans-unit>
        <trans-unit id="b3d4b25fbd6a7584fd2bda12b7dee94351f4abb3" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#dataclasses.dataclass&quot;&gt;&lt;code&gt;dataclass()&lt;/code&gt;&lt;/a&gt; will not implicitly add a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method unless it is safe to do so. Neither will it add or change an existing explicitly defined &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method. Setting the class attribute &lt;code&gt;__hash__ = None&lt;/code&gt; has a specific meaning to Python, as described in the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">默认情况下，除非安全，否则&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#dataclasses.dataclass&quot;&gt; &lt;code&gt;dataclass()&lt;/code&gt; &lt;/a&gt;不会隐式添加__hash __（）方法。它既不会添加也不会更改现有的显式定义的&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt;方法。如&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt;文档中所述，设置类属性 &lt;code&gt;__hash__ = None&lt;/code&gt; 对Python具有特定的含义。</target>
        </trans-unit>
        <trans-unit id="ddd4450bf8d89a24f78314fc96e96f3a51a2cfe1" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt; looks for files in the calling module&amp;rsquo;s directory. See section &lt;a href=&quot;#doctest-basic-api&quot;&gt;Basic API&lt;/a&gt; for a description of the optional arguments that can be used to tell it to look for files in other locations.</source>
          <target state="translated">默认情况下，&lt;a href=&quot;#doctest.testfile&quot;&gt; &lt;code&gt;testfile()&lt;/code&gt; &lt;/a&gt;在调用模块目录中查找文件。有关可选参数的描述，请参见&amp;ldquo; &lt;a href=&quot;#doctest-basic-api&quot;&gt;基本API&amp;rdquo;&lt;/a&gt;部分，该参数可用于告诉其在其他位置查找文件。</target>
        </trans-unit>
        <trans-unit id="7f5935e8f63ee8aab7d9c10c622d79fc87c370ea" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#os.walk&quot;&gt;&lt;code&gt;walk()&lt;/code&gt;&lt;/a&gt; will not walk down into symbolic links that resolve to directories. Set &lt;em&gt;followlinks&lt;/em&gt; to &lt;code&gt;True&lt;/code&gt; to visit directories pointed to by symlinks, on systems that support them.</source>
          <target state="translated">默认情况下，&lt;a href=&quot;#os.walk&quot;&gt; &lt;code&gt;walk()&lt;/code&gt; &lt;/a&gt;不会向下浏览到解析为目录的符号链接。将&lt;em&gt;Followlinks&lt;/em&gt;设置为 &lt;code&gt;True&lt;/code&gt; ,以在支持符号链接的系统上访问由符号链接指向的目录。</target>
        </trans-unit>
        <trans-unit id="bc029c94a9abc8785480c4cc10cbe10a76a8afe0" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt;&lt;code&gt;timeit()&lt;/code&gt;&lt;/a&gt; temporarily turns off &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-garbage-collection&quot;&gt;garbage collection&lt;/a&gt; during the timing. The advantage of this approach is that it makes independent timings more comparable. The disadvantage is that GC may be an important component of the performance of the function being measured. If so, GC can be re-enabled as the first statement in the &lt;em&gt;setup&lt;/em&gt; string. For example:</source>
          <target state="translated">默认情况下，&lt;a href=&quot;#timeit.Timer.timeit&quot;&gt; &lt;code&gt;timeit()&lt;/code&gt; &lt;/a&gt;在计时期间临时关闭&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-garbage-collection&quot;&gt;垃圾收集&lt;/a&gt;。这种方法的优势在于，它使独立计时更具可比性。缺点是GC可能是被测功能性能的重要组成部分。如果是这样，可以将GC作为&lt;em&gt;设置&lt;/em&gt;字符串中的第一条语句重新启用。例如：</target>
        </trans-unit>
        <trans-unit id="b90ba17cb5f8a8a6266285e3345bbcee3dd5e688" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt;&lt;code&gt;timeit()&lt;/code&gt;&lt;/a&gt; temporarily turns off &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-garbage-collection&quot;&gt;garbage collection&lt;/a&gt; during the timing. The advantage of this approach is that it makes independent timings more comparable. The disadvantage is that GC may be an important component of the performance of the function being measured. If so, GC can be re-enabled as the first statement in the &lt;em&gt;setup&lt;/em&gt; string. For example:</source>
          <target state="translated">默认情况下，&lt;a href=&quot;#timeit.Timer.timeit&quot;&gt; &lt;code&gt;timeit()&lt;/code&gt; &lt;/a&gt;在计时期间临时关闭&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-garbage-collection&quot;&gt;垃圾收集&lt;/a&gt;。这种方法的优势在于，它使独立计时更具可比性。缺点是GC可能是被测功能性能的重要组成部分。如果是这样，可以将GC作为&lt;em&gt;设置&lt;/em&gt;字符串中的第一条语句重新启用。例如：</target>
        </trans-unit>
        <trans-unit id="11d5d8210634b80549b5b63361003e12a84937bc" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;pip&lt;/code&gt; is installed into the current virtual environment (if one is active) or into the system site packages (if there is no active virtual environment). The installation location can be controlled through two additional command line options:</source>
          <target state="translated">默认情况下，将 &lt;code&gt;pip&lt;/code&gt; 安装到当前虚拟环境（如果一个处于活动状态）或系统站点程序包（如果没有活动的虚拟环境）中。可以通过两个附加的命令行选项来控制安装位置：</target>
        </trans-unit>
        <trans-unit id="e04756eee7f0460d985177205e10b1a23503c069" translate="yes" xml:space="preserve">
          <source>By default, &lt;em&gt;check_same_thread&lt;/em&gt; is &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; and only the creating thread may use the connection. If set &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;, the returned connection may be shared across multiple threads. When using multiple threads with the same connection writing operations should be serialized by the user to avoid data corruption.</source>
          <target state="translated">默认情况下，&lt;em&gt;check_same_thread&lt;/em&gt;为&lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; &lt;/a&gt;，只有创建线程可以使用该连接。如果设置为&lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; &lt;/a&gt;，则返回的连接可以在多个线程之间共享。当使用具有相同连接的多个线程时，用户应对写入操作进行序列化，以避免数据损坏。</target>
        </trans-unit>
        <trans-unit id="9796dc7a23b90b4d977cc10e77473ff593a1938d" translate="yes" xml:space="preserve">
          <source>By default, &lt;em&gt;prefix&lt;/em&gt; is added to all lines that do not consist solely of whitespace (including any line endings).</source>
          <target state="translated">默认情况下，将&lt;em&gt;前缀&lt;/em&gt;添加到并非仅由空格组成的所有行（包括任何行尾）。</target>
        </trans-unit>
        <trans-unit id="fc4ca20bdc6fbea8397ef04133950e8434765b2e" translate="yes" xml:space="preserve">
          <source>By default, ArgumentParser objects add an option which simply displays the parser&amp;rsquo;s help message. For example, consider a file named &lt;code&gt;myprogram.py&lt;/code&gt; containing the following code:</source>
          <target state="translated">默认情况下，ArgumentParser对象添加一个选项，该选项仅显示解析器的帮助消息。例如，考虑一个名为 &lt;code&gt;myprogram.py&lt;/code&gt; 的文件，其中包含以下代码：</target>
        </trans-unit>
        <trans-unit id="746866251cfb3e555774dcd8af3a46db19750c77" translate="yes" xml:space="preserve">
          <source>By default, C types are represented in the machine&amp;rsquo;s native format and byte order, and properly aligned by skipping pad bytes if necessary (according to the rules used by the C compiler).</source>
          <target state="translated">默认情况下，C类型以机器的本机格式和字节顺序表示，并在必要时通过跳过填充字节来正确对齐（根据C编译器使用的规则）。</target>
        </trans-unit>
        <trans-unit id="3512445457ee9e1000f6118054d51f83a71dc8bb" translate="yes" xml:space="preserve">
          <source>By default, IDLE executes user code in a separate subprocess via a socket, which uses the internal loopback interface. This connection is not externally visible and no data is sent to or received from the Internet. If firewall software complains anyway, you can ignore it.</source>
          <target state="translated">默认情况下,IDLE通过套接字在一个单独的子进程中执行用户代码,套接字使用内部回环接口。这种连接在外部是不可见的,也不会向互联网发送或接收数据。如果防火墙软件反正抱怨,可以忽略它。</target>
        </trans-unit>
        <trans-unit id="0cb79819df474427622fdc62a2ac6ec7a2e31bb5" translate="yes" xml:space="preserve">
          <source>By default, IDLE runs user code in a separate OS process rather than in the user interface process that runs the shell and editor. In the execution process, it replaces &lt;code&gt;sys.stdin&lt;/code&gt;, &lt;code&gt;sys.stdout&lt;/code&gt;, and &lt;code&gt;sys.stderr&lt;/code&gt; with objects that get input from and send output to the Shell window. The original values stored in &lt;code&gt;sys.__stdin__&lt;/code&gt;, &lt;code&gt;sys.__stdout__&lt;/code&gt;, and &lt;code&gt;sys.__stderr__&lt;/code&gt; are not touched, but may be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">默认情况下，IDLE在单独的OS进程中而不是在运行Shell和编辑器的用户界面进程中运行用户代码。在执行过程中，它将 &lt;code&gt;sys.stdin&lt;/code&gt; ， &lt;code&gt;sys.stdout&lt;/code&gt; 和 &lt;code&gt;sys.stderr&lt;/code&gt; 替换为从Shell窗口获取输入并将输出发送到Shell窗口的对象。存储在 &lt;code&gt;sys.__stdin__&lt;/code&gt; ， &lt;code&gt;sys.__stdout__&lt;/code&gt; 和 &lt;code&gt;sys.__stderr__&lt;/code&gt; 中的原始值不会受到影响，但可能为 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4338c28f624cd168dc6e6a993f6edcf0b0caa8e8" translate="yes" xml:space="preserve">
          <source>By default, IIS gives a &lt;code&gt;PATH_INFO&lt;/code&gt; that duplicates the &lt;code&gt;SCRIPT_NAME&lt;/code&gt; at the front, causing problems for WSGI applications that wish to implement routing. This handler strips any such duplicated path.</source>
          <target state="translated">默认情况下，IIS提供的 &lt;code&gt;PATH_INFO&lt;/code&gt; 在最前面复制了 &lt;code&gt;SCRIPT_NAME&lt;/code&gt; ，这对希望实现路由的WSGI应用程序造成了问题。该处理程序将剥离所有此类重复路径。</target>
        </trans-unit>
        <trans-unit id="34a08824cf61e85f3edd280a072e1ba951239abf" translate="yes" xml:space="preserve">
          <source>By default, Pdb sets a handler for the SIGINT signal (which is sent when the user presses</source>
          <target state="translated">默认情况下,Pdb为SIGINT信号设置了一个处理程序(当用户按下</target>
        </trans-unit>
        <trans-unit id="e4fc14c745c41ff2c1c0f6a1f3b4203d646932e6" translate="yes" xml:space="preserve">
          <source>By default, Python does not emit any warning:</source>
          <target state="translated">默认情况下,Python 不会发出任何警告。</target>
        </trans-unit>
        <trans-unit id="43d58b5909b4209e333296709be9cee88202e059" translate="yes" xml:space="preserve">
          <source>By default, Python installs several warning filters, which can be overridden by the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W&lt;/code&gt;&lt;/a&gt; command-line option, the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-3&quot;&gt;&lt;code&gt;PYTHONWARNINGS&lt;/code&gt;&lt;/a&gt; environment variable and calls to &lt;a href=&quot;#warnings.filterwarnings&quot;&gt;&lt;code&gt;filterwarnings()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">默认情况下，Python安装几个警告过滤器，可以通过&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-W&lt;/code&gt; &lt;/a&gt;命令行选项，&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-3&quot;&gt; &lt;code&gt;PYTHONWARNINGS&lt;/code&gt; &lt;/a&gt;环境变量和对&lt;a href=&quot;#warnings.filterwarnings&quot;&gt; &lt;code&gt;filterwarnings()&lt;/code&gt; 的&lt;/a&gt;调用来覆盖这些警告过滤器。</target>
        </trans-unit>
        <trans-unit id="6d68d125a82e363e01456961fa33c1b3dc16a8eb" translate="yes" xml:space="preserve">
          <source>By default, Python installs several warning filters, which can be overridden by the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W&lt;/code&gt;&lt;/a&gt; command-line option, the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-3&quot;&gt;&lt;code&gt;PYTHONWARNINGS&lt;/code&gt;&lt;/a&gt; environment variable and calls to &lt;a href=&quot;#warnings.filterwarnings&quot;&gt;&lt;code&gt;filterwarnings()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">默认情况下，Python安装几个警告过滤器，可以通过&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-W&lt;/code&gt; &lt;/a&gt;命令行选项，&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-3&quot;&gt; &lt;code&gt;PYTHONWARNINGS&lt;/code&gt; &lt;/a&gt;环境变量和对&lt;a href=&quot;#warnings.filterwarnings&quot;&gt; &lt;code&gt;filterwarnings()&lt;/code&gt; 的&lt;/a&gt;调用来覆盖这些警告过滤器。</target>
        </trans-unit>
        <trans-unit id="194edc12a70011820b7389989028ffc9cc56fa43" translate="yes" xml:space="preserve">
          <source>By default, Rmail displays only visible headers. The &lt;a href=&quot;#mailbox.BabylMessage&quot;&gt;&lt;code&gt;BabylMessage&lt;/code&gt;&lt;/a&gt; class, though, uses the original headers because they are more complete. Visible headers may be accessed explicitly if desired.</source>
          <target state="translated">默认情况下，Rmail仅显示可见的标题。该&lt;a href=&quot;#mailbox.BabylMessage&quot;&gt; &lt;code&gt;BabylMessage&lt;/code&gt; &lt;/a&gt;类，不过，使用原来的头，因为他们都比较齐全。如果需要，可以显式访问可见的标头。</target>
        </trans-unit>
        <trans-unit id="d1631d9dffd1975805f1afb15caa3c01281e60e0" translate="yes" xml:space="preserve">
          <source>By default, Structure and Union fields are aligned in the same way the C compiler does it. It is possible to override this behavior by specifying a &lt;code&gt;_pack_&lt;/code&gt; class attribute in the subclass definition. This must be set to a positive integer and specifies the maximum alignment for the fields. This is what &lt;code&gt;#pragma pack(n)&lt;/code&gt; also does in MSVC.</source>
          <target state="translated">默认情况下，Structure和Union字段以与C编译器相同的方式对齐。通过在子类定义中指定 &lt;code&gt;_pack_&lt;/code&gt; 类属性，可以覆盖此行为。必须将其设置为正整数，并指定字段的最大对齐方式。这就是 &lt;code&gt;#pragma pack(n)&lt;/code&gt; 在MSVC中的作用。</target>
        </trans-unit>
        <trans-unit id="b6eb82dd6665f910dee0adea7123f213a064029b" translate="yes" xml:space="preserve">
          <source>By default, a pickler object will not have a &lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt;&lt;code&gt;dispatch_table&lt;/code&gt;&lt;/a&gt; attribute, and it will instead use the global dispatch table managed by the &lt;a href=&quot;copyreg#module-copyreg&quot;&gt;&lt;code&gt;copyreg&lt;/code&gt;&lt;/a&gt; module. However, to customize the pickling for a specific pickler object one can set the &lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt;&lt;code&gt;dispatch_table&lt;/code&gt;&lt;/a&gt; attribute to a dict-like object. Alternatively, if a subclass of &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; has a &lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt;&lt;code&gt;dispatch_table&lt;/code&gt;&lt;/a&gt; attribute then this will be used as the default dispatch table for instances of that class.</source>
          <target state="translated">默认情况下，pickler对象将不具有&lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt; &lt;code&gt;dispatch_table&lt;/code&gt; &lt;/a&gt;属性，而是使用由&lt;a href=&quot;copyreg#module-copyreg&quot;&gt; &lt;code&gt;copyreg&lt;/code&gt; &lt;/a&gt;模块管理的全局调度表。但是，要为特定的酸洗器对象自定义酸洗，可以将&lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt; &lt;code&gt;dispatch_table&lt;/code&gt; &lt;/a&gt;属性设置为类似dict的对象。另外，如果&lt;a href=&quot;#pickle.Pickler&quot;&gt; &lt;code&gt;Pickler&lt;/code&gt; &lt;/a&gt;的子类具有&lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt; &lt;code&gt;dispatch_table&lt;/code&gt; &lt;/a&gt;属性，则它将用作该类实例的默认调度表。</target>
        </trans-unit>
        <trans-unit id="53801121724a8b51bc2f424f971489d6286912cc" translate="yes" xml:space="preserve">
          <source>By default, a trace of an allocated memory block only stores the most recent frame (1 frame). To store 25 frames at startup: set the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-1&quot;&gt;&lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt;&lt;/a&gt; environment variable to &lt;code&gt;25&lt;/code&gt;, or use the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;tracemalloc=25&lt;/code&gt; command line option.</source>
          <target state="translated">默认情况下，分配的内存块的跟踪仅存储最近的帧（1帧）。要在启动时存储25帧，请执行以下操作：将&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-1&quot;&gt; &lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt; &lt;/a&gt;环境变量设置为 &lt;code&gt;25&lt;/code&gt; ，或使用&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;tracemalloc=25&lt;/code&gt; 命令行选项。</target>
        </trans-unit>
        <trans-unit id="235f1643814d54cc51678475522595afc16e865c" translate="yes" xml:space="preserve">
          <source>By default, a trace of an allocated memory block only stores the most recent frame (1 frame). To store 25 frames at startup: set the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-1&quot;&gt;&lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt;&lt;/a&gt; environment variable to &lt;code&gt;25&lt;/code&gt;, or use the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;tracemalloc=25&lt;/code&gt; command line option.</source>
          <target state="translated">默认情况下，分配的内存块的跟踪仅存储最近的帧（1帧）。要在启动时存储25帧：将&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-1&quot;&gt; &lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt; &lt;/a&gt;环境变量设置为 &lt;code&gt;25&lt;/code&gt; ，或使用&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;tracemalloc=25&lt;/code&gt; 命令行选项。</target>
        </trans-unit>
        <trans-unit id="20f9c9b32bdc318c5c18acd3766a8add6de519ab" translate="yes" xml:space="preserve">
          <source>By default, accepts the name of a module and prints the source of that module. A class or function within the module can be printed instead by appended a colon and the qualified name of the target object.</source>
          <target state="translated">默认情况下,接受一个模块的名称,并打印该模块的源代码。模块中的类或函数可以通过添加冒号和目标对象的限定名称来代替打印。</target>
        </trans-unit>
        <trans-unit id="eaec6d27e5f37d0c8c91b7a089060ddcb01dba03" translate="yes" xml:space="preserve">
          <source>By default, all keys in sections are accessible in a case-insensitive manner &lt;a href=&quot;#id14&quot; id=&quot;id10&quot;&gt;1&lt;/a&gt;. E.g. &lt;code&gt;for option in parser[&quot;section&quot;]&lt;/code&gt; yields only &lt;code&gt;optionxform&lt;/code&gt;&amp;rsquo;ed option key names. This means lowercased keys by default. At the same time, for a section that holds the key &lt;code&gt;'a'&lt;/code&gt;, both expressions return &lt;code&gt;True&lt;/code&gt;:</source>
          <target state="translated">默认情况下，可以不区分大小写的方式访问节中的所有键&lt;a href=&quot;#id14&quot; id=&quot;id10&quot;&gt;1&lt;/a&gt;。例如 &lt;code&gt;for option in parser[&quot;section&quot;]&lt;/code&gt; option 仅产生 &lt;code&gt;optionxform&lt;/code&gt; 'ed选项键名。这意味着默认情况下小写的键。同时，对于包含键 &lt;code&gt;'a'&lt;/code&gt; 的部分，两个表达式都返回 &lt;code&gt;True&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c2c533a2bae92633bb096ca2ac9b6447f1dac0ff" translate="yes" xml:space="preserve">
          <source>By default, all keys must be present in a TypedDict. It is possible to override this by specifying totality. Usage:</source>
          <target state="translated">默认情况下,所有键都必须存在于TypedDict中。可以通过指定 totality 来覆盖这一点。用法:在TypedDict中,所有的键都必须存在。</target>
        </trans-unit>
        <trans-unit id="df77a2f5e1f9b841bf3693ba08d7b2ecd3c51127" translate="yes" xml:space="preserve">
          <source>By default, an object is considered true unless its class defines either a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__bool__&quot;&gt;&lt;code&gt;__bool__()&lt;/code&gt;&lt;/a&gt; method that returns &lt;code&gt;False&lt;/code&gt; or a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__len__&quot;&gt;&lt;code&gt;__len__()&lt;/code&gt;&lt;/a&gt; method that returns zero, when called with the object. &lt;a href=&quot;#id12&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt; Here are most of the built-in objects considered false:</source>
          <target state="translated">缺省情况下，对象被认为是真实的，除非它的类或者定义&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__bool__&quot;&gt; &lt;code&gt;__bool__()&lt;/code&gt; &lt;/a&gt;方法，该方法返回 &lt;code&gt;False&lt;/code&gt; 或&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__len__&quot;&gt; &lt;code&gt;__len__()&lt;/code&gt; &lt;/a&gt;方法返回零，当与对象调用。&lt;a href=&quot;#id12&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;以下是大多数被认为是错误的内置对象：</target>
        </trans-unit>
        <trans-unit id="b0d59253386482a6284666394f1f4661fa312626" translate="yes" xml:space="preserve">
          <source>By default, an object is considered true unless its class defines either a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__bool__&quot;&gt;&lt;code&gt;__bool__()&lt;/code&gt;&lt;/a&gt; method that returns &lt;code&gt;False&lt;/code&gt; or a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__len__&quot;&gt;&lt;code&gt;__len__()&lt;/code&gt;&lt;/a&gt; method that returns zero, when called with the object. &lt;a href=&quot;#id12&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt; Here are most of the built-in objects considered false:</source>
          <target state="translated">缺省情况下，对象被认为是真实的，除非它的类或者定义&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__bool__&quot;&gt; &lt;code&gt;__bool__()&lt;/code&gt; &lt;/a&gt;方法，该方法返回 &lt;code&gt;False&lt;/code&gt; 或&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__len__&quot;&gt; &lt;code&gt;__len__()&lt;/code&gt; &lt;/a&gt;方法返回零，当与对象调用。&lt;a href=&quot;#id12&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;以下是被认为是错误的大多数内置对象：</target>
        </trans-unit>
        <trans-unit id="3ea474f9f38dc663c8a08f500f58696344e668cc" translate="yes" xml:space="preserve">
          <source>By default, attempting to patch a function in a module (or a method or an attribute in a class) that does not exist will fail with &lt;a href=&quot;exceptions#AttributeError&quot;&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">默认情况下，尝试修补不存在的模块中的函数（或类中的方法或属性）将失败，并显示&lt;a href=&quot;exceptions#AttributeError&quot;&gt; &lt;code&gt;AttributeError&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="ba6f8ccaf5287f458e74dcc3c521955c22632ec1" translate="yes" xml:space="preserve">
          <source>By default, each time &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; finds a docstring to test, it uses a &lt;em&gt;shallow copy&lt;/em&gt; of &lt;code&gt;M&lt;/code&gt;&amp;rsquo;s globals, so that running tests doesn&amp;rsquo;t change the module&amp;rsquo;s real globals, and so that one test in &lt;code&gt;M&lt;/code&gt; can&amp;rsquo;t leave behind crumbs that accidentally allow another test to work. This means examples can freely use any names defined at top-level in &lt;code&gt;M&lt;/code&gt;, and names defined earlier in the docstring being run. Examples cannot see names defined in other docstrings.</source>
          <target state="translated">默认情况下，每次&lt;a href=&quot;#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; &lt;/a&gt;发现一个文档字符串测试，它采用的是&lt;em&gt;浅拷贝&lt;/em&gt;的 &lt;code&gt;M&lt;/code&gt; 的全局，使运行测试不会改变模块真实的全局，因此，在一个测试 &lt;code&gt;M&lt;/code&gt; 不能离开屑背后不小心允许另一个测试起作用。这意味着示例可以自由使用在 &lt;code&gt;M&lt;/code&gt; 顶级定义的任何名称，以及在运行的文档字符串中较早定义的名称。示例无法看到其他文档字符串中定义的名称。</target>
        </trans-unit>
        <trans-unit id="dced44bdbcc5d88045afe23f3049d96083bbec3f" translate="yes" xml:space="preserve">
          <source>By default, enumerations allow multiple names as aliases for the same value. When this behavior isn&amp;rsquo;t desired, the following decorator can be used to ensure each value is used only once in the enumeration:</source>
          <target state="translated">默认情况下，枚举允许将多个名称用作同一值的别名。当不需要这种行为时，可以使用以下装饰器来确保每个值在枚举中仅使用一次：</target>
        </trans-unit>
        <trans-unit id="5ab285e785eb1c48a8796719be9a670c6e97df9b" translate="yes" xml:space="preserve">
          <source>By default, errors from the &lt;a href=&quot;#os.scandir&quot;&gt;&lt;code&gt;scandir()&lt;/code&gt;&lt;/a&gt; call are ignored. If optional argument &lt;em&gt;onerror&lt;/em&gt; is specified, it should be a function; it will be called with one argument, an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; instance. It can report the error to continue with the walk, or raise the exception to abort the walk. Note that the filename is available as the &lt;code&gt;filename&lt;/code&gt; attribute of the exception object.</source>
          <target state="translated">默认情况下，&lt;a href=&quot;#os.scandir&quot;&gt; &lt;code&gt;scandir()&lt;/code&gt; &lt;/a&gt;调用中的错误将被忽略。如果指定了可选参数&lt;em&gt;onerror&lt;/em&gt;，则它应该是一个函数。将使用一个参数&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;实例来调用它。它可以报告错误以继续进行遍历，或者引发异常以中止遍历。请注意，文件名可用作异常对象的 &lt;code&gt;filename&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="936f21d2588c2a060ae9ea52d1267f952c5ea2bf" translate="yes" xml:space="preserve">
          <source>By default, for best performance, the &lt;em&gt;errors&lt;/em&gt; argument is only checked at the first encoding/decoding error and the &lt;em&gt;encoding&lt;/em&gt; argument is sometimes ignored for empty strings.</source>
          <target state="translated">默认情况下，为了获得最佳性能，仅在出现第一个编码/解码错误时才检查&lt;em&gt;errors&lt;/em&gt;参数，并且对于空字符串有时会忽略&lt;em&gt;encoding&lt;/em&gt;参数。</target>
        </trans-unit>
        <trans-unit id="e5fd2a1ebe99a0d3917c731d7846b7f02865b33d" translate="yes" xml:space="preserve">
          <source>By default, if an expected output block contains a line containing only the string &lt;code&gt;&amp;lt;BLANKLINE&amp;gt;&lt;/code&gt;, then that line will match a blank line in the actual output. Because a genuinely blank line delimits the expected output, this is the only way to communicate that a blank line is expected. When &lt;a href=&quot;#doctest.DONT_ACCEPT_BLANKLINE&quot;&gt;&lt;code&gt;DONT_ACCEPT_BLANKLINE&lt;/code&gt;&lt;/a&gt; is specified, this substitution is not allowed.</source>
          <target state="translated">默认情况下，如果预期的输出块包含仅包含字符串 &lt;code&gt;&amp;lt;BLANKLINE&amp;gt;&lt;/code&gt; 的行，则该行将与实际输出中的空白行匹配。因为真正的空白行界定了预期的输出，所以这是传达预期的空白行的唯一方法。当指定&lt;a href=&quot;#doctest.DONT_ACCEPT_BLANKLINE&quot;&gt; &lt;code&gt;DONT_ACCEPT_BLANKLINE&lt;/code&gt; 时&lt;/a&gt;，不允许此替换。</target>
        </trans-unit>
        <trans-unit id="f2508fc55ad92f5457b99f4d98df22c95e511d0e" translate="yes" xml:space="preserve">
          <source>By default, if an expected output block contains just &lt;code&gt;1&lt;/code&gt;, an actual output block containing just &lt;code&gt;1&lt;/code&gt; or just &lt;code&gt;True&lt;/code&gt; is considered to be a match, and similarly for &lt;code&gt;0&lt;/code&gt; versus &lt;code&gt;False&lt;/code&gt;. When &lt;a href=&quot;#doctest.DONT_ACCEPT_TRUE_FOR_1&quot;&gt;&lt;code&gt;DONT_ACCEPT_TRUE_FOR_1&lt;/code&gt;&lt;/a&gt; is specified, neither substitution is allowed. The default behavior caters to that Python changed the return type of many functions from integer to boolean; doctests expecting &amp;ldquo;little integer&amp;rdquo; output still work in these cases. This option will probably go away, but not for several years.</source>
          <target state="translated">默认情况下，如果期望的输出块仅包含 &lt;code&gt;1&lt;/code&gt; ，则仅包含 &lt;code&gt;1&lt;/code&gt; 或仅 &lt;code&gt;True&lt;/code&gt; 的实际输出块被视为匹配，并且 &lt;code&gt;0&lt;/code&gt; 与 &lt;code&gt;False&lt;/code&gt; 相似。当指定&lt;a href=&quot;#doctest.DONT_ACCEPT_TRUE_FOR_1&quot;&gt; &lt;code&gt;DONT_ACCEPT_TRUE_FOR_1&lt;/code&gt; 时&lt;/a&gt;，不允许任何替换。Python的默认行为是将许多函数的返回类型从整数更改为布尔值。期望&amp;ldquo;小整数&amp;rdquo;输出的doctest在这些情况下仍然有效。该选项可能会消失，但不会持续数年。</target>
        </trans-unit>
        <trans-unit id="f9b9cb578b338579d6cbb60c27b43fc1a3cceffa" translate="yes" xml:space="preserve">
          <source>By default, no arguments are passed to &lt;em&gt;target&lt;/em&gt;.</source>
          <target state="translated">默认情况下，没有参数传递给&lt;em&gt;target&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="008b3b178e4b68b1e60ef93709f10afc91405af4" translate="yes" xml:space="preserve">
          <source>By default, or when &lt;em&gt;pages&lt;/em&gt; is either &lt;code&gt;0&lt;/code&gt; or a negative integer, the entire database is copied in a single step; otherwise the method performs a loop copying up to &lt;em&gt;pages&lt;/em&gt; pages at a time.</source>
          <target state="translated">默认情况下，或者当&lt;em&gt;页面&lt;/em&gt;为 &lt;code&gt;0&lt;/code&gt; 或负整数时，整个数据库将一步一步复制；否则，该方法将执行一次循环，一次最多复制&lt;em&gt;一页&lt;/em&gt;页面。</target>
        </trans-unit>
        <trans-unit id="7fb1ffcd7df10e13bd50a132b07d1a02253cb944" translate="yes" xml:space="preserve">
          <source>By default, server binds itself to all interfaces. The option &lt;code&gt;-b/--bind&lt;/code&gt; specifies a specific address to which it should bind. Both IPv4 and IPv6 addresses are supported. For example, the following command causes the server to bind to localhost only:</source>
          <target state="translated">默认情况下，服务器将自身绑定到所有接口。选项 &lt;code&gt;-b/--bind&lt;/code&gt; 指定应绑定的特定地址。IPv4和IPv6地址均受支持。例如，以下命令导致服务器仅绑定到本地主机：</target>
        </trans-unit>
        <trans-unit id="77eeefe6f3c358b478358f7fcd4bb93cba700b29" translate="yes" xml:space="preserve">
          <source>By default, server uses the current directory. The option &lt;code&gt;-d/--directory&lt;/code&gt; specifies a directory to which it should serve the files. For example, the following command uses a specific directory:</source>
          <target state="translated">默认情况下，服务器使用当前目录。选项 &lt;code&gt;-d/--directory&lt;/code&gt; 指定应将文件提供到的目录。例如，以下命令使用特定目录：</target>
        </trans-unit>
        <trans-unit id="301b7f7ac742594093987dfcc029e8f93e2dbe64" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; data format uses a relatively compact binary representation. If you need optimal size characteristics, you can efficiently &lt;a href=&quot;archiving&quot;&gt;compress&lt;/a&gt; pickled data.</source>
          <target state="translated">默认情况下，&lt;a href=&quot;#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;数据格式使用相对紧凑的二进制表示形式。如果需要最佳的大小特征，则可以有效地&lt;a href=&quot;archiving&quot;&gt;压缩&lt;/a&gt;腌制的数据。</target>
        </trans-unit>
        <trans-unit id="094a33ba83d7519f725e162343187dcd2696de2d" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; module uses its &lt;a href=&quot;#sqlite3.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; class for the connect call. You can, however, subclass the &lt;a href=&quot;#sqlite3.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; class and make &lt;a href=&quot;#sqlite3.connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; use your class instead by providing your class for the &lt;em&gt;factory&lt;/em&gt; parameter.</source>
          <target state="translated">默认情况下，&lt;a href=&quot;#module-sqlite3&quot;&gt; &lt;code&gt;sqlite3&lt;/code&gt; &lt;/a&gt;模块将其&lt;a href=&quot;#sqlite3.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt;类用于connect调用。但是，您可以为&lt;a href=&quot;#sqlite3.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt;类提供子类，并通过为&lt;em&gt;factory&lt;/em&gt;参数提供类来使&lt;a href=&quot;#sqlite3.connect&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; &lt;/a&gt;使用该类。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6462d732918c01c641bc37dfaab3963a19f0d248" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;#urllib.request.URLopener&quot;&gt;&lt;code&gt;URLopener&lt;/code&gt;&lt;/a&gt; class sends a &lt;em&gt;User-Agent&lt;/em&gt; header of &lt;code&gt;urllib/VVV&lt;/code&gt;, where &lt;em&gt;VVV&lt;/em&gt; is the &lt;a href=&quot;urllib#module-urllib&quot;&gt;&lt;code&gt;urllib&lt;/code&gt;&lt;/a&gt; version number. Applications can define their own &lt;em&gt;User-Agent&lt;/em&gt; header by subclassing &lt;a href=&quot;#urllib.request.URLopener&quot;&gt;&lt;code&gt;URLopener&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt;&lt;code&gt;FancyURLopener&lt;/code&gt;&lt;/a&gt; and setting the class attribute &lt;a href=&quot;#urllib.request.URLopener.version&quot;&gt;&lt;code&gt;version&lt;/code&gt;&lt;/a&gt; to an appropriate string value in the subclass definition.</source>
          <target state="translated">默认情况下，&lt;a href=&quot;#urllib.request.URLopener&quot;&gt; &lt;code&gt;URLopener&lt;/code&gt; &lt;/a&gt;类发送 &lt;code&gt;urllib/VVV&lt;/code&gt; 的&lt;em&gt;User-Agent&lt;/em&gt;标头，其中&lt;em&gt;VVV&lt;/em&gt;是&lt;a href=&quot;urllib#module-urllib&quot;&gt; &lt;code&gt;urllib&lt;/code&gt; &lt;/a&gt;版本号。应用程序可以通过子类化&lt;a href=&quot;#urllib.request.URLopener&quot;&gt; &lt;code&gt;URLopener&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt; &lt;code&gt;FancyURLopener&lt;/code&gt; &lt;/a&gt;并将类属性&lt;a href=&quot;#urllib.request.URLopener.version&quot;&gt; &lt;code&gt;version&lt;/code&gt; &lt;/a&gt;设置为子类定义中的适当字符串值，来定义自己的&lt;em&gt;User-Agent&lt;/em&gt;标头。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="24a0dabed54df7a1b18bb8440a0376bac5366831" translate="yes" xml:space="preserve">
          <source>By default, the &lt;em&gt;errors&lt;/em&gt; argument is not checked for best performances, but only used at the first decoding error. Enable the &lt;a href=&quot;devmode#devmode&quot;&gt;Python Development Mode&lt;/a&gt;, or use a debug build to check &lt;em&gt;errors&lt;/em&gt;.</source>
          <target state="translated">默认情况下，不检查&lt;em&gt;errors&lt;/em&gt;参数以获得最佳性能，而仅在第一个解码错误时使用。启用&lt;a href=&quot;devmode#devmode&quot;&gt;Python开发模式&lt;/a&gt;，或使用调试版本检查&lt;em&gt;错误&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9c9bf05ff10e8d81625ba313ef44e9675125f4fd" translate="yes" xml:space="preserve">
          <source>By default, the &lt;em&gt;errors&lt;/em&gt; argument is not checked for best performances, but only used at the first encoding error. Enable the &lt;a href=&quot;devmode#devmode&quot;&gt;Python Development Mode&lt;/a&gt;, or use a debug build to check &lt;em&gt;errors&lt;/em&gt;.</source>
          <target state="translated">默认情况下，不检查&lt;em&gt;errors&lt;/em&gt;参数以获得最佳性能，而仅在第一个编码错误时使用。启用&lt;a href=&quot;devmode#devmode&quot;&gt;Python开发模式&lt;/a&gt;，或使用调试版本检查&lt;em&gt;错误&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3680d558cfec6850bcf6d9a77a8cad55df9c5560" translate="yes" xml:space="preserve">
          <source>By default, the &lt;strong&gt;href&lt;/strong&gt; attribute is treated as a file name. You can use custom loaders to override this behaviour. Also note that the standard helper does not support XPointer syntax.</source>
          <target state="translated">默认情况下，&lt;strong&gt;href&lt;/strong&gt;属性被视为文件名。您可以使用自定义加载程序来替代此行为。另请注意，标准帮助程序不支持XPointer语法。</target>
        </trans-unit>
        <trans-unit id="d10ea8597ea642766854d45414b54ceba2e795c6" translate="yes" xml:space="preserve">
          <source>By default, the Python traceback is written to &lt;a href=&quot;sys#sys.stderr&quot;&gt;&lt;code&gt;sys.stderr&lt;/code&gt;&lt;/a&gt;. To see tracebacks, applications must be run in the terminal. A log file can alternatively be passed to &lt;a href=&quot;#faulthandler.enable&quot;&gt;&lt;code&gt;faulthandler.enable()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">默认情况下，Python追溯被写入&lt;a href=&quot;sys#sys.stderr&quot;&gt; &lt;code&gt;sys.stderr&lt;/code&gt; &lt;/a&gt;。要查看回溯，必须在终端中运行应用程序。可以选择将日志文件传递给&lt;a href=&quot;#faulthandler.enable&quot;&gt; &lt;code&gt;faulthandler.enable()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="920a6566848376fec069ad7573aa5aa7bb437561" translate="yes" xml:space="preserve">
          <source>By default, the class also implements the parse method of the XMLReader interface using the feed, close and reset methods of the IncrementalParser interface as a convenience to SAX 2.0 driver writers.</source>
          <target state="translated">默认情况下,该类还使用IncrementalParser接口的feed、close和reset方法实现XMLReader接口的解析方法,以方便SAX 2.0驱动编写者。</target>
        </trans-unit>
        <trans-unit id="c77b39dd4b69e05f235e3b85ecffeea127e6edc1" translate="yes" xml:space="preserve">
          <source>By default, the description will be line-wrapped so that it fits within the given space. To change this behavior, see the &lt;a href=&quot;#formatter-class&quot;&gt;formatter_class&lt;/a&gt; argument.</source>
          <target state="translated">默认情况下，描述将被换行，以使其适合给定的空间。若要更改此行为，请参见&lt;a href=&quot;#formatter-class&quot;&gt;formatter_class&lt;/a&gt;参数。</target>
        </trans-unit>
        <trans-unit id="72cdb093d0d5c4a0811bf0713c0a0594ccf746c2" translate="yes" xml:space="preserve">
          <source>By default, the diff control lines (those with &lt;code&gt;***&lt;/code&gt; or &lt;code&gt;---&lt;/code&gt;) are created with a trailing newline. This is helpful so that inputs created from &lt;a href=&quot;io#io.IOBase.readlines&quot;&gt;&lt;code&gt;io.IOBase.readlines()&lt;/code&gt;&lt;/a&gt; result in diffs that are suitable for use with &lt;a href=&quot;io#io.IOBase.writelines&quot;&gt;&lt;code&gt;io.IOBase.writelines()&lt;/code&gt;&lt;/a&gt; since both the inputs and outputs have trailing newlines.</source>
          <target state="translated">默认情况下，差异控制行（带有 &lt;code&gt;***&lt;/code&gt; 或 &lt;code&gt;---&lt;/code&gt; 的那些）是用尾随换行符创建的。这很有用，因为从&lt;a href=&quot;io#io.IOBase.readlines&quot;&gt; &lt;code&gt;io.IOBase.readlines()&lt;/code&gt; &lt;/a&gt;创建的输入将导致差异适合与&lt;a href=&quot;io#io.IOBase.writelines&quot;&gt; &lt;code&gt;io.IOBase.writelines()&lt;/code&gt; &lt;/a&gt;一起使用，因为输入和输出均具有尾随换行符。</target>
        </trans-unit>
        <trans-unit id="701fa93323cbf8ce2e905edfa806eadfe2ba9ee4" translate="yes" xml:space="preserve">
          <source>By default, the diff control lines (those with &lt;code&gt;---&lt;/code&gt;, &lt;code&gt;+++&lt;/code&gt;, or &lt;code&gt;@@&lt;/code&gt;) are created with a trailing newline. This is helpful so that inputs created from &lt;a href=&quot;io#io.IOBase.readlines&quot;&gt;&lt;code&gt;io.IOBase.readlines()&lt;/code&gt;&lt;/a&gt; result in diffs that are suitable for use with &lt;a href=&quot;io#io.IOBase.writelines&quot;&gt;&lt;code&gt;io.IOBase.writelines()&lt;/code&gt;&lt;/a&gt; since both the inputs and outputs have trailing newlines.</source>
          <target state="translated">默认情况下，diff控制行（带有 &lt;code&gt;---&lt;/code&gt; ， &lt;code&gt;+++&lt;/code&gt; 或 &lt;code&gt;@@&lt;/code&gt; 的那些）是用尾随换行符创建的。这很有用，因为从&lt;a href=&quot;io#io.IOBase.readlines&quot;&gt; &lt;code&gt;io.IOBase.readlines()&lt;/code&gt; &lt;/a&gt;创建的输入将导致差异适合与&lt;a href=&quot;io#io.IOBase.writelines&quot;&gt; &lt;code&gt;io.IOBase.writelines()&lt;/code&gt; &lt;/a&gt;一起使用，因为输入和输出均具有尾随换行符。</target>
        </trans-unit>
        <trans-unit id="195dae096c798b9d4b95b13edb7f663ede7d0d8a" translate="yes" xml:space="preserve">
          <source>By default, the result of packing a given C struct includes pad bytes in order to maintain proper alignment for the C types involved; similarly, alignment is taken into account when unpacking. This behavior is chosen so that the bytes of a packed struct correspond exactly to the layout in memory of the corresponding C struct. To handle platform-independent data formats or omit implicit pad bytes, use &lt;code&gt;standard&lt;/code&gt; size and alignment instead of &lt;code&gt;native&lt;/code&gt; size and alignment: see &lt;a href=&quot;#struct-alignment&quot;&gt;Byte Order, Size, and Alignment&lt;/a&gt; for details.</source>
          <target state="translated">默认情况下，打包给定C结构的结果包括填充字节，以维护所涉及C类型的正确对齐；同样，拆箱时也要考虑对齐方式。选择此行为是为了使打包结构的字节与对应的C结构的内存中的布局完全对应。要处理与平台无关的数据格式或忽略隐式填充字节，请使用 &lt;code&gt;standard&lt;/code&gt; 大小和对齐方式，而不是 &lt;code&gt;native&lt;/code&gt; 大小和对齐方式：有关详细信息&lt;a href=&quot;#struct-alignment&quot;&gt;，&lt;/a&gt;请参见字节顺序，大小和对齐方式。</target>
        </trans-unit>
        <trans-unit id="2f8d31485f1cf87f768e5f2e59061661f7d4b972" translate="yes" xml:space="preserve">
          <source>By default, the scripts &lt;code&gt;pipX&lt;/code&gt; and &lt;code&gt;pipX.Y&lt;/code&gt; will be installed (where X.Y stands for the current version of Python).</source>
          <target state="translated">默认情况下，将安装脚本 &lt;code&gt;pipX&lt;/code&gt; 和 &lt;code&gt;pipX.Y&lt;/code&gt; （其中XY代表当前版本的Python）。</target>
        </trans-unit>
        <trans-unit id="fdf79e7494f0c8e40aa022f705fa4a17ed0f4359" translate="yes" xml:space="preserve">
          <source>By default, the scripts &lt;code&gt;pipX&lt;/code&gt; and &lt;code&gt;pipX.Y&lt;/code&gt; will be installed (where X.Y stands for the version of Python used to invoke &lt;code&gt;ensurepip&lt;/code&gt;). The scripts installed can be controlled through two additional command line options:</source>
          <target state="translated">默认情况下，将安装脚本 &lt;code&gt;pipX&lt;/code&gt; 和 &lt;code&gt;pipX.Y&lt;/code&gt; （其中XY代表用于调用 &lt;code&gt;ensurepip&lt;/code&gt; 的Python版本）。可以通过两个附加的命令行选项来控制安装的脚本：</target>
        </trans-unit>
        <trans-unit id="5200803235e477dfe23987b607e2285ed5feca81" translate="yes" xml:space="preserve">
          <source>By default, the sub-window will extend from the specified position to the lower right corner of the window.</source>
          <target state="translated">默认情况下,子窗口将从指定位置延伸到窗口的右下角。</target>
        </trans-unit>
        <trans-unit id="3b06468131c77687172a2610a996c3423867c90f" translate="yes" xml:space="preserve">
          <source>By default, the window will extend from the specified position to the lower right corner of the screen.</source>
          <target state="translated">默认情况下,窗口会从指定位置延伸到屏幕的右下角。</target>
        </trans-unit>
        <trans-unit id="9477a9bea084d85882bf3b402a08fa167abb59ff" translate="yes" xml:space="preserve">
          <source>By default, this function will return the data as encoded bytes. The actual encoding of the output data may depend on the command being invoked, so the decoding to text will often need to be handled at the application level.</source>
          <target state="translated">默认情况下,该函数将以编码字节的形式返回数据。输出数据的实际编码可能取决于正在调用的命令,所以解码为文本通常需要在应用程序级别处理。</target>
        </trans-unit>
        <trans-unit id="31f19246d0599116d8e34379c8cd902758801c53" translate="yes" xml:space="preserve">
          <source>By default, unpickling will import any class or function that it finds in the pickle data. For many applications, this behaviour is unacceptable as it permits the unpickler to import and invoke arbitrary code. Just consider what this hand-crafted pickle data stream does when loaded:</source>
          <target state="translated">默认情况下,unpickling会导入它在pickle数据中找到的任何类或函数。对于许多应用来说,这种行为是不可接受的,因为它允许unpickler导入并调用任意代码。只要考虑一下这个手工制作的pickle数据流在加载时的作用。</target>
        </trans-unit>
        <trans-unit id="3ef1793786e54340ce8bfbe17daf119d10d21483" translate="yes" xml:space="preserve">
          <source>By default, version 3 pickles are used to serialize values. The version of the pickle protocol can be specified with the &lt;em&gt;protocol&lt;/em&gt; parameter.</source>
          <target state="translated">默认情况下，版本3的泡菜用于序列化值。可以使用&lt;em&gt;protocol&lt;/em&gt;参数指定pickle协议的版本。</target>
        </trans-unit>
        <trans-unit id="b38308bfeb6ea74147739e7c4c985e750ec529ef" translate="yes" xml:space="preserve">
          <source>By default, version 3 pickles are used to serialize values. The version of the pickle protocol can be specified with the &lt;em&gt;protocol&lt;/em&gt; parameter. See the &lt;a href=&quot;pickle#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; documentation for a discussion of the pickle protocols.</source>
          <target state="translated">默认情况下，版本3的泡菜用于序列化值。可以使用&lt;em&gt;protocol&lt;/em&gt;参数指定pickle协议的版本。有关酱菜协议的讨论，请参见&lt;a href=&quot;pickle#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="eff56d0e72b6ce61e999e3149679525f60cc22e6" translate="yes" xml:space="preserve">
          <source>By default, wake up one thread waiting on this condition, if any. If the calling thread has not acquired the lock when this method is called, a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">默认情况下，唤醒一个线程等待这种情况（如果有）。如果在调用此方法时调用线程未获取锁，则会引发&lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="854aa6f56f9c0d27436b46f46a4a43f383857560" translate="yes" xml:space="preserve">
          <source>By default, when reading from &lt;code&gt;/dev/random&lt;/code&gt;, &lt;a href=&quot;#os.getrandom&quot;&gt;&lt;code&gt;getrandom()&lt;/code&gt;&lt;/a&gt; blocks if no random bytes are available, and when reading from &lt;code&gt;/dev/urandom&lt;/code&gt;, it blocks if the entropy pool has not yet been initialized.</source>
          <target state="translated">默认情况下，从 &lt;code&gt;/dev/random&lt;/code&gt; 读取时，如果没有可用的随机字节，则&lt;a href=&quot;#os.getrandom&quot;&gt; &lt;code&gt;getrandom()&lt;/code&gt; 会&lt;/a&gt;阻塞；从 &lt;code&gt;/dev/urandom&lt;/code&gt; 读取时，如果尚未初始化熵池，则会阻塞。</target>
        </trans-unit>
        <trans-unit id="7b516742d0bb1873f6652a665f55b4757162ced1" translate="yes" xml:space="preserve">
          <source>By reading and writing only large chunks of data even when the user asks for a single byte, buffered I/O hides any inefficiency in calling and executing the operating system&amp;rsquo;s unbuffered I/O routines. The gain depends on the OS and the kind of I/O which is performed. For example, on some modern OSes such as Linux, unbuffered disk I/O can be as fast as buffered I/O. The bottom line, however, is that buffered I/O offers predictable performance regardless of the platform and the backing device. Therefore, it is almost always preferable to use buffered I/O rather than unbuffered I/O for binary data.</source>
          <target state="translated">通过即使在用户要求单个字节时也仅读取和写入大块数据，缓冲的I / O可以隐藏调用和执行操作系统的非缓冲I / O例程的任何低效率。增益取决于OS和执行的I / O类型。例如，在某些现代操作系统（例如Linux）上，无缓冲磁盘I / O可以与缓冲I / O一样快。但最重要的是，无论平台和支持设备如何，缓冲I / O都能提供可预测的性能。因此，对于二进制数据，几乎总是首选使用缓冲I / O而不是非缓冲I / O。</target>
        </trans-unit>
        <trans-unit id="dd46034571b47794a0bda9d3d583cb9fd6cb5cec" translate="yes" xml:space="preserve">
          <source>By returning true values, these callbacks can suppress exceptions the same way context manager &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; methods can.</source>
          <target state="translated">通过返回真实值，这些回调可以像上下文管理器&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt;方法一样抑制异常。</target>
        </trans-unit>
        <trans-unit id="07389109df8d85f0cfe4e8ae88013d95963809e8" translate="yes" xml:space="preserve">
          <source>By returning true values, these callbacks can suppress exceptions the same way context manager &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; methods can.</source>
          <target state="translated">通过返回真实值，这些回调可以像上下文管理器&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt;方法一样抑制异常。</target>
        </trans-unit>
        <trans-unit id="e560960e3ca3501b7d01f95836df6c7554b4bf3e" translate="yes" xml:space="preserve">
          <source>By setting &lt;em&gt;salt&lt;/em&gt; parameter users can introduce randomization to the hash function. Randomized hashing is useful for protecting against collision attacks on the hash function used in digital signatures.</source>
          <target state="translated">通过设置&lt;em&gt;盐&lt;/em&gt;参数，用户可以将随机化引入哈希函数。随机散列可用于防止对数字签名中使用的散列函数的冲突攻击。</target>
        </trans-unit>
        <trans-unit id="32fe99c22402d3f9cd7abfeb71dfafa391c5a113" translate="yes" xml:space="preserve">
          <source>By using a custom event loop policy, the behavior of &lt;a href=&quot;asyncio-eventloop#asyncio.get_event_loop&quot;&gt;&lt;code&gt;get_event_loop()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.set_event_loop&quot;&gt;&lt;code&gt;set_event_loop()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;asyncio-eventloop#asyncio.new_event_loop&quot;&gt;&lt;code&gt;new_event_loop()&lt;/code&gt;&lt;/a&gt; functions can be customized.</source>
          <target state="translated">通过使用自定义事件循环策略，可以自定义&lt;a href=&quot;asyncio-eventloop#asyncio.get_event_loop&quot;&gt; &lt;code&gt;get_event_loop()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;asyncio-eventloop#asyncio.set_event_loop&quot;&gt; &lt;code&gt;set_event_loop()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;asyncio-eventloop#asyncio.new_event_loop&quot;&gt; &lt;code&gt;new_event_loop()&lt;/code&gt; &lt;/a&gt;函数的行为。</target>
        </trans-unit>
        <trans-unit id="b091b4f9c8ca0872cda8cde6431e148f093daeaf" translate="yes" xml:space="preserve">
          <source>Byte Order, Size, and Alignment</source>
          <target state="translated">字节顺序、大小和对齐方式</target>
        </trans-unit>
        <trans-unit id="8a0d6d3439bd2ad80ce89b16b070f185d6471f83" translate="yes" xml:space="preserve">
          <source>Byte index at which an error occurred.</source>
          <target state="translated">发生错误的字节索引。</target>
        </trans-unit>
        <trans-unit id="1cc655c3485fc15dd7ca0afb59d9aa38bd081838" translate="yes" xml:space="preserve">
          <source>Byte offset to the file header.</source>
          <target state="translated">文件头的字节偏移。</target>
        </trans-unit>
        <trans-unit id="8333e6eadb360031f488d25d73b03263c17d5cd1" translate="yes" xml:space="preserve">
          <source>Byte order</source>
          <target state="translated">字节顺序</target>
        </trans-unit>
        <trans-unit id="4597d8ef411d59e1d9be06348c147c4dc042b844" translate="yes" xml:space="preserve">
          <source>Byte-compile a single source file.</source>
          <target state="translated">字节编译单个源文件。</target>
        </trans-unit>
        <trans-unit id="8f44d65c941475def9c425dea9272a82770ad20f" translate="yes" xml:space="preserve">
          <source>Byte-compile all the &lt;code&gt;.py&lt;/code&gt; files found along &lt;code&gt;sys.path&lt;/code&gt;. Return a true value if all the files compiled successfully, and a false value otherwise.</source>
          <target state="translated">字节编译 &lt;code&gt;sys.path&lt;/code&gt; 中找到的所有 &lt;code&gt;.py&lt;/code&gt; 文件。如果所有文件编译成功，则返回true，否则返回false。</target>
        </trans-unit>
        <trans-unit id="d77f09e0e7b15c9cb3b575a00f1091dc029bc527" translate="yes" xml:space="preserve">
          <source>Bytearray Objects</source>
          <target state="translated">字节数组对象</target>
        </trans-unit>
        <trans-unit id="f3f31d2587c2659748200906697b7e426ebe3937" translate="yes" xml:space="preserve">
          <source>Bytecode analysis</source>
          <target state="translated">字节码分析</target>
        </trans-unit>
        <trans-unit id="29c3e8776cc54b4a3d00a06a3057380e1328a8bd" translate="yes" xml:space="preserve">
          <source>Bytes (any object that follows the &lt;a href=&quot;https://docs.python.org/3.8/c-api/buffer.html#bufferobjects&quot;&gt;buffer protocol&lt;/a&gt; or has &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__bytes__&quot;&gt;&lt;code&gt;__bytes__()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">字节（遵循&lt;a href=&quot;https://docs.python.org/3.8/c-api/buffer.html#bufferobjects&quot;&gt;缓冲区协议&lt;/a&gt;或具有&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__bytes__&quot;&gt; &lt;code&gt;__bytes__()&lt;/code&gt; &lt;/a&gt;任何对象）。</target>
        </trans-unit>
        <trans-unit id="dc7b82a1c67cd7fdb773f18fb987493810bcff8a" translate="yes" xml:space="preserve">
          <source>Bytes (any object that follows the &lt;a href=&quot;https://docs.python.org/3.9/c-api/buffer.html#bufferobjects&quot;&gt;buffer protocol&lt;/a&gt; or has &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__bytes__&quot;&gt;&lt;code&gt;__bytes__()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">字节（遵循&lt;a href=&quot;https://docs.python.org/3.9/c-api/buffer.html#bufferobjects&quot;&gt;缓冲区协议&lt;/a&gt;或具有&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__bytes__&quot;&gt; &lt;code&gt;__bytes__()&lt;/code&gt; &lt;/a&gt;任何对象）。</target>
        </trans-unit>
        <trans-unit id="87b953d5d72682cb2132578bfed73b5853f4110b" translate="yes" xml:space="preserve">
          <source>Bytes (converts any Python object using &lt;code&gt;repr(obj).encode('ascii','backslashreplace)&lt;/code&gt;).</source>
          <target state="translated">字节（使用 &lt;code&gt;repr(obj).encode('ascii','backslashreplace)&lt;/code&gt; 转换任何Python对象）。</target>
        </trans-unit>
        <trans-unit id="240fc4227ac064b6af55b8039b1a8a4d447e7719" translate="yes" xml:space="preserve">
          <source>Bytes Objects</source>
          <target state="translated">字节对象</target>
        </trans-unit>
        <trans-unit id="691d2567928500c0d6dcc3954f0ec2324402cb5d" translate="yes" xml:space="preserve">
          <source>Bytes and Bytearray Operations</source>
          <target state="translated">字节和字节数组操作</target>
        </trans-unit>
        <trans-unit id="7df78136784a7bc228bd395f315bea3a22a1309a" translate="yes" xml:space="preserve">
          <source>Bytes objects (&lt;code&gt;bytes&lt;/code&gt;/&lt;code&gt;bytearray&lt;/code&gt;) have one unique built-in operation: the &lt;code&gt;%&lt;/code&gt; operator (modulo). This is also known as the bytes &lt;em&gt;formatting&lt;/em&gt; or &lt;em&gt;interpolation&lt;/em&gt; operator. Given &lt;code&gt;format % values&lt;/code&gt; (where &lt;em&gt;format&lt;/em&gt; is a bytes object), &lt;code&gt;%&lt;/code&gt; conversion specifications in &lt;em&gt;format&lt;/em&gt; are replaced with zero or more elements of &lt;em&gt;values&lt;/em&gt;. The effect is similar to using the &lt;code&gt;sprintf()&lt;/code&gt; in the C language.</source>
          <target state="translated">Bytes对象（ &lt;code&gt;bytes&lt;/code&gt; / &lt;code&gt;bytearray&lt;/code&gt; ）具有一种独特的内置操作： &lt;code&gt;%&lt;/code&gt; 运算符（模）。这也称为字节&lt;em&gt;格式化&lt;/em&gt;或&lt;em&gt;插值&lt;/em&gt;运算符。给定 &lt;code&gt;format % values&lt;/code&gt; （其中&lt;em&gt;format&lt;/em&gt;是字节对象），&lt;em&gt;格式&lt;/em&gt; &lt;code&gt;%&lt;/code&gt; 的转换规范被零个或多个&lt;em&gt;value&lt;/em&gt;元素代替。效果类似于在C语言中使用 &lt;code&gt;sprintf()&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0abcedbcee06f3e9a3a9f49f28bb8293fda9dbce" translate="yes" xml:space="preserve">
          <source>Bytes objects are immutable sequences of single bytes. Since many major binary protocols are based on the ASCII text encoding, bytes objects offer several methods that are only valid when working with ASCII compatible data and are closely related to string objects in a variety of other ways.</source>
          <target state="translated">字节对象是单字节的不可改变的序列。由于许多主要的二进制协议都是基于ASCII文本编码的,所以字节对象提供了一些只有在处理ASCII兼容数据时才有效的方法,并且在许多其他方面与字符串对象密切相关。</target>
        </trans-unit>
        <trans-unit id="47d7f1da06c57177341c3d9ef2119c5d7eaec765" translate="yes" xml:space="preserve">
          <source>Bytes objects can also be created with literals, see &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#strings&quot;&gt;String and Bytes literals&lt;/a&gt;.</source>
          <target state="translated">字节对象也可以使用文字创建，请参见&lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#strings&quot;&gt;String和Bytes文字&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5788b743017e2ad56183056bf128f2cd77af475e" translate="yes" xml:space="preserve">
          <source>Bytes objects can also be created with literals, see &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#strings&quot;&gt;String and Bytes literals&lt;/a&gt;.</source>
          <target state="translated">字节对象也可以使用文字创建，请参见&lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#strings&quot;&gt;String和Bytes文字&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f91b8d8bed8c0993bf0eb2d6b6ee7a3409cd568f" translate="yes" xml:space="preserve">
          <source>Bytes version of &lt;a href=&quot;#os.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt;: a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-mapping&quot;&gt;mapping&lt;/a&gt; object representing the environment as byte strings. &lt;a href=&quot;#os.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.environb&quot;&gt;&lt;code&gt;environb&lt;/code&gt;&lt;/a&gt; are synchronized (modify &lt;a href=&quot;#os.environb&quot;&gt;&lt;code&gt;environb&lt;/code&gt;&lt;/a&gt; updates &lt;a href=&quot;#os.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt;, and vice versa).</source>
          <target state="translated">字节的&lt;a href=&quot;#os.environ&quot;&gt; &lt;code&gt;environ&lt;/code&gt; &lt;/a&gt;版本：一个&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-mapping&quot;&gt;将&lt;/a&gt;字节表示为环境的映射对象。&lt;a href=&quot;#os.environ&quot;&gt; &lt;code&gt;environ&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#os.environb&quot;&gt; &lt;code&gt;environb&lt;/code&gt; &lt;/a&gt;是同步的（修改&lt;a href=&quot;#os.environb&quot;&gt; &lt;code&gt;environb&lt;/code&gt; &lt;/a&gt;更新&lt;a href=&quot;#os.environ&quot;&gt; &lt;code&gt;environ&lt;/code&gt; &lt;/a&gt;，反之亦然）。</target>
        </trans-unit>
        <trans-unit id="9cc583b53680a3f7ed79a980ea7403e317ec981c" translate="yes" xml:space="preserve">
          <source>Bytes version of &lt;a href=&quot;#os.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt;: a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-mapping&quot;&gt;mapping&lt;/a&gt; object representing the environment as byte strings. &lt;a href=&quot;#os.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.environb&quot;&gt;&lt;code&gt;environb&lt;/code&gt;&lt;/a&gt; are synchronized (modify &lt;a href=&quot;#os.environb&quot;&gt;&lt;code&gt;environb&lt;/code&gt;&lt;/a&gt; updates &lt;a href=&quot;#os.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt;, and vice versa).</source>
          <target state="translated">字节的&lt;a href=&quot;#os.environ&quot;&gt; &lt;code&gt;environ&lt;/code&gt; &lt;/a&gt;版本：一个&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-mapping&quot;&gt;将&lt;/a&gt;字节表示为环境的映射对象。&lt;a href=&quot;#os.environ&quot;&gt; &lt;code&gt;environ&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#os.environb&quot;&gt; &lt;code&gt;environb&lt;/code&gt; &lt;/a&gt;是同步的（修改&lt;a href=&quot;#os.environb&quot;&gt; &lt;code&gt;environb&lt;/code&gt; &lt;/a&gt;更新&lt;a href=&quot;#os.environ&quot;&gt; &lt;code&gt;environ&lt;/code&gt; &lt;/a&gt;，反之亦然）。</target>
        </trans-unit>
        <trans-unit id="4c17a08f748a73c44dbe27e96cafd97e19083491" translate="yes" xml:space="preserve">
          <source>BytesWarning</source>
          <target state="translated">BytesWarning</target>
        </trans-unit>
        <trans-unit id="53cd5afff77d718a16da7a261addfd2e7a746175" translate="yes" xml:space="preserve">
          <source>C Type</source>
          <target state="translated">C型</target>
        </trans-unit>
        <trans-unit id="502ca6c945d9f8aee115c49e01f9edd12a50b0c8" translate="yes" xml:space="preserve">
          <source>C type</source>
          <target state="translated">C型</target>
        </trans-unit>
        <trans-unit id="23c8bef685fe7f8e5ab76b80f3a180f9b6022855" translate="yes" xml:space="preserve">
          <source>C++ programmers should note that Python&amp;rsquo;s virtual base class concept is not the same as C++&amp;rsquo;s.</source>
          <target state="translated">C ++程序员应注意，Python的虚拟基类概念与C ++不同。</target>
        </trans-unit>
        <trans-unit id="1034f70b6f9ddd2bcb58956fc970e5f50cec8bd2" translate="yes" xml:space="preserve">
          <source>C-Backspace</source>
          <target state="translated">C-Backspace</target>
        </trans-unit>
        <trans-unit id="235d9f2cf895c1719d46fc1198d0f621032d1477" translate="yes" xml:space="preserve">
          <source>C-Del</source>
          <target state="translated">C-Del</target>
        </trans-unit>
        <trans-unit id="a13b54dca6c09f524e525a2fe3f23ea99ba36108" translate="yes" xml:space="preserve">
          <source>C-End</source>
          <target state="translated">C-End</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
