<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="eslint">
    <body>
      <group id="eslint">
        <trans-unit id="546fa02adabca3448dcb8a362469072d1db5cf13" translate="yes" xml:space="preserve">
          <source>Removed Rules</source>
          <target state="translated">删除的规则</target>
        </trans-unit>
        <trans-unit id="9e30b455061dff243e207fa18925b8c54a0ca2ad" translate="yes" xml:space="preserve">
          <source>Removed rule</source>
          <target state="translated">删除规则</target>
        </trans-unit>
        <trans-unit id="4db98af9e39320a953bbea6bb998fe7493c40e5e" translate="yes" xml:space="preserve">
          <source>Replaced by</source>
          <target state="translated">代之以</target>
        </trans-unit>
        <trans-unit id="8ada39071f07cad84f271436e272e3f53d42073a" translate="yes" xml:space="preserve">
          <source>Report Unused &lt;code&gt;eslint-disable&lt;/code&gt; Comments</source>
          <target state="translated">报告未使用的 &lt;code&gt;eslint-disable&lt;/code&gt; 注释</target>
        </trans-unit>
        <trans-unit id="a5bb62e8d7d2cc84df075be591e2610b579c891d" translate="yes" xml:space="preserve">
          <source>Reported problems have the following location information:</source>
          <target state="translated">报告的问题有以下位置信息。</target>
        </trans-unit>
        <trans-unit id="2c54bc0da768d4c877c77485784187863c28ad3c" translate="yes" xml:space="preserve">
          <source>Reporting Bugs</source>
          <target state="translated">报告错误</target>
        </trans-unit>
        <trans-unit id="e73f2c6a276df317f0e8251b594b9c3a7772ea2d" translate="yes" xml:space="preserve">
          <source>Reporting a security vulnerability</source>
          <target state="translated">报告安全漏洞</target>
        </trans-unit>
        <trans-unit id="4ba09f6e2cd39c11132e45ba62fe27e6d6484469" translate="yes" xml:space="preserve">
          <source>Reporting back the results of the execution</source>
          <target state="translated">汇报执行结果</target>
        </trans-unit>
        <trans-unit id="7fb8531d32f9fc2cf4e7e644d67cb16c9b2b084a" translate="yes" xml:space="preserve">
          <source>Reporting warnings when certain patterns are found</source>
          <target state="translated">当发现某些模式时,报告警告</target>
        </trans-unit>
        <trans-unit id="924d4980aa5047bdf606a251026020006a83efbe" translate="yes" xml:space="preserve">
          <source>Requesting a &lt;a href=&quot;changes&quot;&gt;Change&lt;/a&gt;</source>
          <target state="translated">要求&lt;a href=&quot;changes&quot;&gt;变更&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9670695fdbad92ea104f8e7230b9955bfb27da6e" translate="yes" xml:space="preserve">
          <source>Require === and !== (eqeqeq)</source>
          <target state="translated">要求 ===和 !==(eqeqeq)</target>
        </trans-unit>
        <trans-unit id="c9f4e2dc2e937fe6aab7b4d4c5b9b14070f93f68" translate="yes" xml:space="preserve">
          <source>Require Brace Style (brace-style)</source>
          <target state="translated">需要支架样式(支架样式</target>
        </trans-unit>
        <trans-unit id="29f8a3517efa09985e94aaa3daa4acd42449e8f9" translate="yes" xml:space="preserve">
          <source>Require CamelCase (camelcase)</source>
          <target state="translated">要求CamelCase (camelcase)</target>
        </trans-unit>
        <trans-unit id="e6c502a34157a55662fdb96c649dfac3dca1c26c" translate="yes" xml:space="preserve">
          <source>Require Consistent This (consistent-this)</source>
          <target state="translated">要求一致这(一致这)。</target>
        </trans-unit>
        <trans-unit id="32bfc48d08ec21670f3f949a648100cdfb446f0d" translate="yes" xml:space="preserve">
          <source>Require Default Case in Switch Statements (default-case)</source>
          <target state="translated">在开关语句中要求默认大小写(default-case)</target>
        </trans-unit>
        <trans-unit id="c4bf33ba1bc063ecb08ea78c74d6e52247e78f9e" translate="yes" xml:space="preserve">
          <source>Require Dot Notation (dot-notation)</source>
          <target state="translated">要求点符号(dot-notation)</target>
        </trans-unit>
        <trans-unit id="a3af1a645caf25364b15e6b49f5552b803adff40" translate="yes" xml:space="preserve">
          <source>Require Following Curly Brace Conventions (curly)</source>
          <target state="translated">要求遵循卷曲括号约定(卷曲)</target>
        </trans-unit>
        <trans-unit id="11631863fa9bc606f91797315db692789e0485a5" translate="yes" xml:space="preserve">
          <source>Require Guarding for-in (guard-for-in)</source>
          <target state="translated">要求守卫在(守卫在)</target>
        </trans-unit>
        <trans-unit id="ad26fbff7070e7dd41742c51df353b22c939a838" translate="yes" xml:space="preserve">
          <source>Require IIFEs to be Wrapped (wrap-iife)</source>
          <target state="translated">要求综合保税区要有包装(wrap-iife)</target>
        </trans-unit>
        <trans-unit id="eedd486c2cd16ec02fb12f728bf82116a2f3dc18" translate="yes" xml:space="preserve">
          <source>Require Object Literal Shorthand Syntax (object-shorthand)</source>
          <target state="translated">需要对象文字速记语法(object-shorthand)</target>
        </trans-unit>
        <trans-unit id="0f941f716fc3ec6b74fefe19704d5a768596d353" translate="yes" xml:space="preserve">
          <source>Require Or Disallow Space Before Blocks (space-before-blocks)</source>
          <target state="translated">要求或不允许在块前留有空格(空格前块)。</target>
        </trans-unit>
        <trans-unit id="ba41a13b01bc7714d82241f45ba769d95682a9b8" translate="yes" xml:space="preserve">
          <source>Require Radix Parameter (radix)</source>
          <target state="translated">要求半径参数(radix)</target>
        </trans-unit>
        <trans-unit id="4649036a73fddd6b7bf8df27f93ba7f530bd0494" translate="yes" xml:space="preserve">
          <source>Require Regex Literals to be Wrapped (wrap-regex)</source>
          <target state="translated">要求对Regex字元进行封装(wrap-regex)</target>
        </trans-unit>
        <trans-unit id="7b4e071d32a73a0c6741662339d8cb1bea0829d1" translate="yes" xml:space="preserve">
          <source>Require Variable Declarations to be at the top of their scope (vars-on-top)</source>
          <target state="translated">要求变量声明在其作用域的顶部(vars-on-top)。</target>
        </trans-unit>
        <trans-unit id="c6b80ff02932afc7cc099abcdbfedd2d3d1808fb" translate="yes" xml:space="preserve">
          <source>Require braces in arrow function body (arrow-body-style)</source>
          <target state="translated">箭头函数体中要求使用大括号(箭头体式)。</target>
        </trans-unit>
        <trans-unit id="5f98bbcd6bc31019c27bf6149a981097646acd25" translate="yes" xml:space="preserve">
          <source>Require grouped accessor pairs in object literals and classes (grouped-accessor-pairs)</source>
          <target state="translated">要求在对象字面和类中使用分组访问器对(grouped-accessor-pairs)</target>
        </trans-unit>
        <trans-unit id="be3fbbc21cd8535fe4650e22a2253265af6b017c" translate="yes" xml:space="preserve">
          <source>Require or disallow Yoda Conditions (yoda)</source>
          <target state="translated">要求或不允许Yoda条件(Yoda)</target>
        </trans-unit>
        <trans-unit id="3150215ce32a56ca1cf1f6ef2c30ca41b3749bd6" translate="yes" xml:space="preserve">
          <source>Require or disallow a space before function parenthesis (space-before-function-paren)</source>
          <target state="translated">要求或不允许在函数括号前留有空格(空格前函数括号)。</target>
        </trans-unit>
        <trans-unit id="5b30f13883fdda696fb76a56e4bd8aac05c52c33" translate="yes" xml:space="preserve">
          <source>Require or disallow named &lt;code&gt;function&lt;/code&gt; expressions (func-names)</source>
          <target state="translated">要求或禁止命名 &lt;code&gt;function&lt;/code&gt; 表达式（函数名称）</target>
        </trans-unit>
        <trans-unit id="6923954808ca2c5768d91fe26208484172008328" translate="yes" xml:space="preserve">
          <source>Require or disallow padding lines between statements (padding-line-between-statements)</source>
          <target state="translated">要求或不允许在语句之间使用填充线(padding-line-between-statements)。</target>
        </trans-unit>
        <trans-unit id="64d620bf8940dde332be8b599fc3f3b67a15d6b1" translate="yes" xml:space="preserve">
          <source>Require or disallow spaces before/after unary operators (space-unary-ops)</source>
          <target state="translated">在单数运算符前/后要求或禁止空格(空格单数运算符)。</target>
        </trans-unit>
        <trans-unit id="2e4ed016a312c06b04085359a4f3ce7e5514db8a" translate="yes" xml:space="preserve">
          <source>Require or disallow spacing between template tags and their literals (template-tag-spacing)</source>
          <target state="translated">要求或不允许模板标签与其字面之间的间距(模板-标签-间距)。</target>
        </trans-unit>
        <trans-unit id="9a6d4f3d8ac0a43fa465b1bfeb17312af22eec9d" translate="yes" xml:space="preserve">
          <source>Require or disallow the Unicode Byte Order Mark (BOM) (unicode-bom)</source>
          <target state="translated">要求或不允许使用Unicode字节顺序标记(BOM)(unicode-bom)。</target>
        </trans-unit>
        <trans-unit id="5414253a02d05bc00109d790a3a30b0adf3a9258" translate="yes" xml:space="preserve">
          <source>Require parens in arrow function arguments (arrow-parens)</source>
          <target state="translated">在箭头函数参数中要求使用保护符(arrow-parens)。</target>
        </trans-unit>
        <trans-unit id="6c6d01b7d910c82fc9e7e87b504603648dc910c7" translate="yes" xml:space="preserve">
          <source>Require regex literals to escape division operators.</source>
          <target state="translated">要求用 regex 字符来转义除法运算符。</target>
        </trans-unit>
        <trans-unit id="c6c78079204bca77a98f474edfbb061ab779251e" translate="yes" xml:space="preserve">
          <source>Require space before/after arrow function's arrow (arrow-spacing)</source>
          <target state="translated">箭头函数的箭头前/后需要空格(箭头间距)</target>
        </trans-unit>
        <trans-unit id="3d1e419b6e19b50c4107c427e372b159f6aa3f96" translate="yes" xml:space="preserve">
          <source>Require spaces following &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, and &lt;code&gt;case&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;return&lt;/code&gt; ， &lt;code&gt;throw&lt;/code&gt; 和 &lt;code&gt;case&lt;/code&gt; 之后需要空格。</target>
        </trans-unit>
        <trans-unit id="2aa899302df0644585abff63972bace73e121583" translate="yes" xml:space="preserve">
          <source>Require spaces following unary word operators.</source>
          <target state="translated">要求在单数词运算符后有空格。</target>
        </trans-unit>
        <trans-unit id="72a6e138634f7c51472518cc96850ccfd3e29b3f" translate="yes" xml:space="preserve">
          <source>Require using arrow functions for callbacks (prefer-arrow-callback)</source>
          <target state="translated">要求使用箭头函数进行回调(prefer-arrow-callback)。</target>
        </trans-unit>
        <trans-unit id="1d4909a86e26429441b20437aa655cdf89900831" translate="yes" xml:space="preserve">
          <source>Requires or disallows a whitespace (space or tab) beginning a comment (spaced-comment)</source>
          <target state="translated">要求或不允许在注释的开头使用空格(空格或制表符)(间隔注释)。</target>
        </trans-unit>
        <trans-unit id="76af06a553a0453a9044a446da55d272ab01d8fe" translate="yes" xml:space="preserve">
          <source>Requires that every file have a top-level &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; statement.</source>
          <target state="translated">要求每个文件都具有顶级的 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 语句。</target>
        </trans-unit>
        <trans-unit id="e58d216d4c343337c98dbf82f961ebd1b1a6fd84" translate="yes" xml:space="preserve">
          <source>Requiring Configuration to Run</source>
          <target state="translated">需要配置才能运行</target>
        </trans-unit>
        <trans-unit id="a190ae07585f55210601db70caeb73d10cf5a08d" translate="yes" xml:space="preserve">
          <source>Reserved words as property names</source>
          <target state="translated">保留字作为属性名称</target>
        </trans-unit>
        <trans-unit id="87df60de337fb58864343e396696d74611e0d403" translate="yes" xml:space="preserve">
          <source>Resources</source>
          <target state="translated">Resources</target>
        </trans-unit>
        <trans-unit id="787f008daf743bf86dcef2a2f647bc232a0260e8" translate="yes" xml:space="preserve">
          <source>Respond to comments left on the pull request from team members. Remember, we want to help you land your code, so please be receptive to our feedback.</source>
          <target state="translated">回复团队成员在拉取请求上留下的评论。记住,我们希望帮助你落地代码,所以请接受我们的反馈。</target>
        </trans-unit>
        <trans-unit id="5e8db4f15f13d726195782f734cfad7c22163767" translate="yes" xml:space="preserve">
          <source>Restrict what can be thrown as an exception (no-throw-literal)</source>
          <target state="translated">限制可以作为异常抛出的内容(无抛出字面意思)</target>
        </trans-unit>
        <trans-unit id="d0dfe217a11c007cdb80ffac3d869a5f9a91d024" translate="yes" xml:space="preserve">
          <source>Restricting syntax with selectors</source>
          <target state="translated">用选择器限制语法</target>
        </trans-unit>
        <trans-unit id="0cde1762953d450159956d185082cff8d76cd6b3" translate="yes" xml:space="preserve">
          <source>Resulting actual config: &lt;code&gt;&quot;eqeqeq&quot;: [&quot;warn&quot;, &quot;allow-null&quot;]&lt;/code&gt;</source>
          <target state="translated">产生的实际配置： &lt;code&gt;&quot;eqeqeq&quot;: [&quot;warn&quot;, &quot;allow-null&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="637d7bf830d8b7c31d75616f1f6184a3ad69451f" translate="yes" xml:space="preserve">
          <source>Resulting actual config: &lt;code&gt;&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]&lt;/code&gt;</source>
          <target state="translated">产生的实际配置： &lt;code&gt;&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b969c8dc0ad380e6594b1beedc5370d8f8a5d756" translate="yes" xml:space="preserve">
          <source>Retrieves a formatter, which you can then use to format a report object. The argument is either the name of a built-in formatter:</source>
          <target state="translated">检索一个格式化器,然后你可以用它来格式化报表对象。参数是内置格式化器的名称。</target>
        </trans-unit>
        <trans-unit id="426dd4f5734405b3041af3bb0cf97c4f743e8aa6" translate="yes" xml:space="preserve">
          <source>Returning the correct exit code</source>
          <target state="translated">返回正确的退出代码</target>
        </trans-unit>
        <trans-unit id="a8af8ce64c5e78a1bab5c7411bdc15d47c7d3cee" translate="yes" xml:space="preserve">
          <source>Rollup: &lt;a href=&quot;https://www.npmjs.com/package/rollup-plugin-eslint&quot;&gt;rollup-plugin-eslint&lt;/a&gt;</source>
          <target state="translated">汇总：&lt;a href=&quot;https://www.npmjs.com/package/rollup-plugin-eslint&quot;&gt;rollup-plugin-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ee3c4356687403593882e1c450ecd5fa91ef9176" translate="yes" xml:space="preserve">
          <source>Rule Acceptance Criteria</source>
          <target state="translated">规则接受标准</target>
        </trans-unit>
        <trans-unit id="4fea3171fe249e115dde51b612942d51ff597112" translate="yes" xml:space="preserve">
          <source>Rule Basics</source>
          <target state="translated">规则基础</target>
        </trans-unit>
        <trans-unit id="58f4d8dcadb0bda6b1de9bc0a5d352f60cf07234" translate="yes" xml:space="preserve">
          <source>Rule Changes</source>
          <target state="translated">规则变更</target>
        </trans-unit>
        <trans-unit id="7fd1351f99409305b16b0a09a4498bd284b5d93e" translate="yes" xml:space="preserve">
          <source>Rule Deprecation</source>
          <target state="translated">弃用规则</target>
        </trans-unit>
        <trans-unit id="2f74fe952a58aefbda52fe4dd186b37f5595f912" translate="yes" xml:space="preserve">
          <source>Rule Details</source>
          <target state="translated">规则细节</target>
        </trans-unit>
        <trans-unit id="a6cbaaefbab1ddfd94efe95cec74c44f36be693f" translate="yes" xml:space="preserve">
          <source>Rule Naming Conventions</source>
          <target state="translated">规则命名公约</target>
        </trans-unit>
        <trans-unit id="3183951c7dd470388a3c3557d1a5436eae05d87f" translate="yes" xml:space="preserve">
          <source>Rule Schema Changes</source>
          <target state="translated">规则模式变化</target>
        </trans-unit>
        <trans-unit id="793bcb95f3d538bb319a28344fffc4123fe887c4" translate="yes" xml:space="preserve">
          <source>Rule Unit Tests</source>
          <target state="translated">规则单元测试</target>
        </trans-unit>
        <trans-unit id="ebc497fdd0042b59fbb043aa6dad9e62ad6aaedd" translate="yes" xml:space="preserve">
          <source>Rule configuration are validated more strictly</source>
          <target state="translated">规则配置的验证更加严格</target>
        </trans-unit>
        <trans-unit id="b423a892d42c8b952873772e3d160731bd071f84" translate="yes" xml:space="preserve">
          <source>Rule source</source>
          <target state="translated">规则来源</target>
        </trans-unit>
        <trans-unit id="c79090f879452ce67b81c8904f848b8ac0346c07" translate="yes" xml:space="preserve">
          <source>Rule to disallow a duplicate case label (no-duplicate-case)</source>
          <target state="translated">不允许使用重复的大小写标签的规则(no-duplicat-case)</target>
        </trans-unit>
        <trans-unit id="a6dc24b3b766471c01f26defe2df961bd51fa80c" translate="yes" xml:space="preserve">
          <source>RuleTester</source>
          <target state="translated">RuleTester</target>
        </trans-unit>
        <trans-unit id="bb11a8e3f8712e36e7cd9d1c615a4e3dbb03336a" translate="yes" xml:space="preserve">
          <source>Rules</source>
          <target state="translated">Rules</target>
        </trans-unit>
        <trans-unit id="8af516527308d5f596f472b28e50707a3c2ec990" translate="yes" xml:space="preserve">
          <source>Rules are now required to provide messages along with reports</source>
          <target state="translated">现在要求规则在提供报告的同时提供信息。</target>
        </trans-unit>
        <trans-unit id="c130e2f455ef978067c1ba9937f4a4b55ad9b4d6" translate="yes" xml:space="preserve">
          <source>Rules in ESLint are grouped by category to help you understand their purpose.</source>
          <target state="translated">ESLint中的规则是按类别分组的,以帮助您了解它们的目的。</target>
        </trans-unit>
        <trans-unit id="a375a11830a6fc15a9c077874fa2553a5e211c2a" translate="yes" xml:space="preserve">
          <source>Rules in Plugins</source>
          <target state="translated">插件中的规则</target>
        </trans-unit>
        <trans-unit id="6012963a27096009406f4a3e3efbeb71a5dd3e0c" translate="yes" xml:space="preserve">
          <source>Rules like &lt;a href=&quot;../rules/max-len&quot;&gt;&lt;code&gt;max-len&lt;/code&gt;&lt;/a&gt; accept a string option which is interpreted as a regular expression. In ESLint v6.0.0, these regular expressions are interpreted with the &lt;a href=&quot;https://mathiasbynens.be/notes/es6-unicode-regex&quot;&gt;unicode flag&lt;/a&gt;, which should exhibit more reasonable behavior when matching characters like astral symbols. Unicode regexes also validate escape sequences more strictly than non-unicode regexes.</source>
          <target state="translated">像&lt;a href=&quot;../rules/max-len&quot;&gt; &lt;code&gt;max-len&lt;/code&gt; &lt;/a&gt;这样的规则接受一个字符串选项，该选项被解释为正则表达式。在ESLint v6.0.0中，这些正则表达式使用&lt;a href=&quot;https://mathiasbynens.be/notes/es6-unicode-regex&quot;&gt;unicode标志&lt;/a&gt;解释，当匹配诸如星体符号之类的字符时，unicode标志应表现出更合理的行为。Unicode正则表达式还比非Unicode正则表达式更严格地验证转义序列。</target>
        </trans-unit>
        <trans-unit id="ce446a008739b0122bfbf913623e68d18926810d" translate="yes" xml:space="preserve">
          <source>Rules may export a &lt;code&gt;schema&lt;/code&gt; property, which is a &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON schema&lt;/a&gt; format description of a rule's options which will be used by ESLint to validate configuration options and prevent invalid or unexpected inputs before they are passed to the rule in &lt;code&gt;context.options&lt;/code&gt;.</source>
          <target state="translated">规则可以导出 &lt;code&gt;schema&lt;/code&gt; 属性，该属性是规则选项的&lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON模式&lt;/a&gt;格式描述，ESLint将使用该属性来验证配置选项并防止无效或意外的输入在传递给 &lt;code&gt;context.options&lt;/code&gt; 中的规则之前。</target>
        </trans-unit>
        <trans-unit id="93c2759fe03a902a67d153b036b0d4f1c07d1f3c" translate="yes" xml:space="preserve">
          <source>Rules will be deprecated as needed, and marked as such in all documentation.</source>
          <target state="translated">规则将根据需要被废止,并在所有文档中标明。</target>
        </trans-unit>
        <trans-unit id="e93f0f77000adc61fb508077599d138239b58cd6" translate="yes" xml:space="preserve">
          <source>Rules will never be removed from ESLint.</source>
          <target state="translated">规则永远不会从ESLint中删除。</target>
        </trans-unit>
        <trans-unit id="3d27ff71d65030f0e00381932a052d2a17b92776" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;../user-guide/command-line-interface&quot;&gt;command line interface&lt;/a&gt; using the &lt;code&gt;--rulesdir&lt;/code&gt; option to specify the location of your runtime rules.</source>
          <target state="translated">使用 &lt;code&gt;--rulesdir&lt;/code&gt; 选项运行&lt;a href=&quot;../user-guide/command-line-interface&quot;&gt;命令行界面&lt;/a&gt;，以指定运行时规则的位置。</target>
        </trans-unit>
        <trans-unit id="95227c2b581e8476ae8110dc2d62c41753abc92b" translate="yes" xml:space="preserve">
          <source>Run the tests</source>
          <target state="translated">运行测试</target>
        </trans-unit>
        <trans-unit id="82584eccefdf0e64733530fb7b37a5c4e7baadbe" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;eslint&lt;/code&gt; with the previous custom formatter,</source>
          <target state="translated">使用先前的自定义格式化程序运行 &lt;code&gt;eslint&lt;/code&gt; ，</target>
        </trans-unit>
        <trans-unit id="cc4ca7c771cd08213f4b8be7b584910f7669bad1" translate="yes" xml:space="preserve">
          <source>Running Individual Tests</source>
          <target state="translated">运行单个测试</target>
        </trans-unit>
        <trans-unit id="441a534445ce234b3c86dbe18e6044480f3bedfd" translate="yes" xml:space="preserve">
          <source>Running individual tests is useful when you're working on a specific bug and iterating on the solution. You should be sure to run &lt;code&gt;npm test&lt;/code&gt; before submitting a pull request.</source>
          <target state="translated">当您处理一个特定的错误并迭代解决方案时，运行单个测试非常有用。在提交拉取请求之前，您应该确保运行 &lt;code&gt;npm test&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d976eb8e273ca6d6ba9fdfa6ef367a56a3b6ffd" translate="yes" xml:space="preserve">
          <source>Running the tests is the best way to ensure you have correctly set up your development environment. Make sure you're in the &lt;code&gt;eslint&lt;/code&gt; directory and run:</source>
          <target state="translated">运行测试是确保正确设置开发环境的最佳方法。确保您在 &lt;code&gt;eslint&lt;/code&gt; 目录中并运行：</target>
        </trans-unit>
        <trans-unit id="d106aea3ee94c9ea07b2d08364473f5561ff6c88" translate="yes" xml:space="preserve">
          <source>Runs a subset of tests in PhantomJS</source>
          <target state="translated">在PhantomJS中运行测试的子集。</target>
        </trans-unit>
        <trans-unit id="3a49577a7bd2d4bd0341a073ea8ac28454947600" translate="yes" xml:space="preserve">
          <source>Runs all tests on Node.js</source>
          <target state="translated">在Node.js上运行所有测试。</target>
        </trans-unit>
        <trans-unit id="2242ca7138a532d29176cff8e842e87d6315b52e" translate="yes" xml:space="preserve">
          <source>Runs just the JavaScript and JSON linting on the repository</source>
          <target state="translated">在版本库上只运行JavaScript和JSON linting。</target>
        </trans-unit>
        <trans-unit id="16d64887294214d8ed081b14945edfe9e11fdda5" translate="yes" xml:space="preserve">
          <source>Runtime Rules</source>
          <target state="translated">运行时规则</target>
        </trans-unit>
        <trans-unit id="735c74977973d2da5bffd227fd5f002279654583" translate="yes" xml:space="preserve">
          <source>Runtime rules are written in the same format as all other rules. Create your rule as you would any other and then follow these steps:</source>
          <target state="translated">运行时规则的编写格式与所有其他规则相同。像创建其他规则一样创建规则,然后按照这些步骤进行。</target>
        </trans-unit>
        <trans-unit id="d4a37f09fbd0b4d14017c11606211cf2ba713d3b" translate="yes" xml:space="preserve">
          <source>Sails.js: &lt;a href=&quot;https://www.npmjs.com/package/sails-hook-lint&quot;&gt;sails-hook-lint&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/sails-eslint&quot;&gt;sails-eslint&lt;/a&gt;</source>
          <target state="translated">Sails.js：sails &lt;a href=&quot;https://www.npmjs.com/package/sails-hook-lint&quot;&gt;-hook-lint&lt;/a&gt;，&lt;a href=&quot;https://www.npmjs.com/package/sails-eslint&quot;&gt;sails-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="09d7f145b9b7e1d0c79daf58a80e9abbdc849945" translate="yes" xml:space="preserve">
          <source>Same reason as the point above: You shouldn't configure terms that are used very often (e.g. central parts of the native language used in your comments).</source>
          <target state="translated">和上面一点原因一样。你不应该配置经常使用的术语(如评论中使用的母语中心部分)。</target>
        </trans-unit>
        <trans-unit id="7c671e8c47943a8c325952dde1f0ea58ab681314" translate="yes" xml:space="preserve">
          <source>Scope Analysis Changes</source>
          <target state="translated">范围分析变化</target>
        </trans-unit>
        <trans-unit id="36ab5b6d2a8bb7e55f7b1d6b39e4e5ce11688937" translate="yes" xml:space="preserve">
          <source>Scope Type</source>
          <target state="translated">范围类型</target>
        </trans-unit>
        <trans-unit id="1ababc4ffaa5b7bdf69961b71c11caa9ddda5aef" translate="yes" xml:space="preserve">
          <source>Scope interface</source>
          <target state="translated">范围接口</target>
        </trans-unit>
        <trans-unit id="0a313e66995747d51d210db31cc5a359aecf5923" translate="yes" xml:space="preserve">
          <source>ScopeManager</source>
          <target state="translated">ScopeManager</target>
        </trans-unit>
        <trans-unit id="f83f415575654aec918367fa7b4efd53484afeb7" translate="yes" xml:space="preserve">
          <source>ScopeManager interface</source>
          <target state="translated">范围管理器接口</target>
        </trans-unit>
        <trans-unit id="9f61e165e4f63a9799a4482983a897b3c392fb00" translate="yes" xml:space="preserve">
          <source>Second option</source>
          <target state="translated">第二种选择</target>
        </trans-unit>
        <trans-unit id="37b1dc04082b220b42be965eea192bef3c547ba5" translate="yes" xml:space="preserve">
          <source>Second, it advances to &lt;code&gt;ForStatement.body&lt;/code&gt;. Of course the &lt;code&gt;body&lt;/code&gt; segment is preceded by the &lt;code&gt;test&lt;/code&gt; segment. It keeps the &lt;code&gt;update&lt;/code&gt; segment hovering.</source>
          <target state="translated">其次，它前进到 &lt;code&gt;ForStatement.body&lt;/code&gt; 。当然， &lt;code&gt;body&lt;/code&gt; 部分之前是 &lt;code&gt;test&lt;/code&gt; 部分。它使 &lt;code&gt;update&lt;/code&gt; 段保持悬停。</target>
        </trans-unit>
        <trans-unit id="8323971eba037489129f23f49f88dde8358fa8ad" translate="yes" xml:space="preserve">
          <source>Second, it creates the looping path. At this time, the next segment has existed already, so the &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; event is not fired. It fires &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; instead.</source>
          <target state="translated">其次，它创建了循环路径。目前，下一个段已经存在，因此不会触发 &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; 事件。它会触发 &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b4acc9dc16ce636a836361190495f1196e2d6f8" translate="yes" xml:space="preserve">
          <source>Section 1: Get the &lt;a href=&quot;source-code&quot;&gt;Source Code&lt;/a&gt;</source>
          <target state="translated">第1节：获取&lt;a href=&quot;source-code&quot;&gt;源代码&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3b1637242cb5f4b3e36d4492cd36c48e74446f57" translate="yes" xml:space="preserve">
          <source>Section 2: Set up a &lt;a href=&quot;development-environment&quot;&gt;Development Environment&lt;/a&gt;</source>
          <target state="translated">第2节：建立&lt;a href=&quot;development-environment&quot;&gt;开发环境&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="78f0e7c8b704185ecfe739a5f8c33c68a075ef9e" translate="yes" xml:space="preserve">
          <source>Section 3: Run the &lt;a href=&quot;unit-tests&quot;&gt;Unit Tests&lt;/a&gt;</source>
          <target state="translated">第3节：运行&lt;a href=&quot;unit-tests&quot;&gt;单元测试&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d3b79d5d78e14a8c4b0ba5bc3059259a23cad08b" translate="yes" xml:space="preserve">
          <source>Section 4: &lt;a href=&quot;working-with-rules&quot;&gt;Working with Rules&lt;/a&gt;</source>
          <target state="translated">第4节：&lt;a href=&quot;working-with-rules&quot;&gt;使用规则&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="03c3cb69551b14b8df9cb910afaab136f027242f" translate="yes" xml:space="preserve">
          <source>Section 5: &lt;a href=&quot;working-with-plugins&quot;&gt;Working with Plugins&lt;/a&gt;</source>
          <target state="translated">第5节：&lt;a href=&quot;working-with-plugins&quot;&gt;使用插件&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7b994bfa5badb9f811f171491ad2085ca2163162" translate="yes" xml:space="preserve">
          <source>Section 6: &lt;a href=&quot;working-with-custom-parsers&quot;&gt;Working with Custom Parsers&lt;/a&gt;</source>
          <target state="translated">第6节：&lt;a href=&quot;working-with-custom-parsers&quot;&gt;使用自定义解析器&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7cef9b81d7487df40316eccfb3ac59bb6e5049a8" translate="yes" xml:space="preserve">
          <source>Section 7: &lt;a href=&quot;nodejs-api&quot;&gt;Node.js API&lt;/a&gt;</source>
          <target state="translated">第7节：&lt;a href=&quot;nodejs-api&quot;&gt;Node.js API&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b89f1494eec98976470a195404c75143a7d87a8b" translate="yes" xml:space="preserve">
          <source>Section 8: &lt;a href=&quot;contributing/index&quot;&gt;Contributing&lt;/a&gt;</source>
          <target state="translated">第8节：&lt;a href=&quot;contributing/index&quot;&gt;贡献&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a36f58a29f1275ec5d968141f07cf060b746bc67" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../user-guide/configuring#specifying-processor&quot;&gt;Specifying Processor&lt;/a&gt; for details.</source>
          <target state="translated">有关详细信息，请参见&lt;a href=&quot;../user-guide/configuring#specifying-processor&quot;&gt;指定处理器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1b6969594f8da02157a002f4a80fcf1d497e64bb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;no-dupe-class-members&quot;&gt;no-dupe-class-members&lt;/a&gt; if you also want to disallow duplicate names in class definitions.</source>
          <target state="translated">如果您还想在类定义中禁止重复的名称，请参见&lt;a href=&quot;no-dupe-class-members&quot;&gt;no-dupe-class-members&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b75b5956411bc41a59d15e137400fe418c3a0502" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;no-dupe-keys&quot;&gt;no-dupe-keys&lt;/a&gt; if you also want to disallow duplicate keys in object literals.</source>
          <target state="translated">如果您还想禁止对象文字中的重复键，请参见&lt;a href=&quot;no-dupe-keys&quot;&gt;no-dupe-keys&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="61a08f389a25b863d0fca5015a2885ff6fd5c8cd" translate="yes" xml:space="preserve">
          <source>See Also:</source>
          <target state="translated">另见:</target>
        </trans-unit>
        <trans-unit id="2601bab23f6d6b7f8c2a0b4d06f87b74ca15b5fc" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/constructor-super.js&quot;&gt;constructor-super&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-this-before-super.js&quot;&gt;no-this-before-super&lt;/a&gt;</source>
          <target state="translated">另请参见：&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/constructor-super.js&quot;&gt;Constructor-super&lt;/a&gt;，&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-this-before-super.js&quot;&gt;no-this-before-super&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1f2f2da9007ba35b167fb5fbeeeef552aaaf5204" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-unreachable.js&quot;&gt;no-unreachable&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-fallthrough.js&quot;&gt;no-fallthrough&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/consistent-return.js&quot;&gt;consistent-return&lt;/a&gt;</source>
          <target state="translated">另请参见：&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-unreachable.js&quot;&gt;不可达&lt;/a&gt;，&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-fallthrough.js&quot;&gt;不中断&lt;/a&gt;，&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/consistent-return.js&quot;&gt;一致返回&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5475994619c5659ff506420bcda0f2341a59e086" translate="yes" xml:space="preserve">
          <source>See all &lt;a href=&quot;https://www.npmjs.com/search?q=eslint-formatter&quot;&gt;formatters on npm&lt;/a&gt;;</source>
          <target state="translated">查看&lt;a href=&quot;https://www.npmjs.com/search?q=eslint-formatter&quot;&gt;npm上的&lt;/a&gt;所有格式化程序；</target>
        </trans-unit>
        <trans-unit id="d711728163616d324e06d612e575de7b428f280d" translate="yes" xml:space="preserve">
          <source>See also: the &lt;a href=&quot;https://github.com/eslint/eslint/commit/e3e9dbd9876daf4bdeb4e15f8a76a9d5e6e03e39#diff-b01a5cfd9361ca9280a460fd6bb8edbbL1&quot;&gt;full diff&lt;/a&gt; where the defaults were changed.</source>
          <target state="translated">另请参阅：更改默认值的&lt;a href=&quot;https://github.com/eslint/eslint/commit/e3e9dbd9876daf4bdeb4e15f8a76a9d5e6e03e39#diff-b01a5cfd9361ca9280a460fd6bb8edbbL1&quot;&gt;完整差异&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4df28d2cb8a74e0553a8b501f660f7fd482671ed" translate="yes" xml:space="preserve">
          <source>Selectors</source>
          <target state="translated">Selectors</target>
        </trans-unit>
        <trans-unit id="ba1dd4d24595765d36380d449f2f63da8783485e" translate="yes" xml:space="preserve">
          <source>Selectors are not limited to matching against single node types. For example, the selector &lt;code&gt;VariableDeclarator &amp;gt; Identifier&lt;/code&gt; will match all &lt;code&gt;Identifier&lt;/code&gt; nodes that have a &lt;code&gt;VariableDeclarator&lt;/code&gt; as a direct parent. In the program above, this will match the node for &lt;code&gt;foo&lt;/code&gt;, but not the nodes for &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt;.</source>
          <target state="translated">选择器不限于与单个节点类型匹配。例如，选择器 &lt;code&gt;VariableDeclarator &amp;gt; Identifier&lt;/code&gt; 将匹配所有具有 &lt;code&gt;VariableDeclarator&lt;/code&gt; 作为直接父级的 &lt;code&gt;Identifier&lt;/code&gt; 节点。在上面的程序中，它将匹配 &lt;code&gt;foo&lt;/code&gt; 的节点，但不匹配 &lt;code&gt;bar&lt;/code&gt; 和 &lt;code&gt;baz&lt;/code&gt; 的节点。</target>
        </trans-unit>
        <trans-unit id="52a3f1908b1bbd91b0b9259682b062315f687ab1" translate="yes" xml:space="preserve">
          <source>Self assignments have no effect, so probably those are an error due to incomplete refactoring. Those indicate that what you should do is still remaining.</source>
          <target state="translated">自身的作业没有效果,所以可能那些是重构不完全导致的错误。这些说明你该做的事情还没做完。</target>
        </trans-unit>
        <trans-unit id="f7959cd9f43abd1103f282c5754afbee5224b16f" translate="yes" xml:space="preserve">
          <source>Semicolons are usually optional in JavaScript, because of automatic semicolon insertion (ASI). You can require or disallow semicolons with the &lt;a href=&quot;semi&quot;&gt;semi&lt;/a&gt; rule.</source>
          <target state="translated">由于自动分号插入（ASI），分号在JavaScript中通常是可选的。您可以要求或与不允许分号&lt;a href=&quot;semi&quot;&gt;半&lt;/a&gt;规则。</target>
        </trans-unit>
        <trans-unit id="7ef827951df1f89ec5fb16c5c417655c418fa285" translate="yes" xml:space="preserve">
          <source>Sequence expressions (those using a comma, such as &lt;code&gt;a = 1, b = 2&lt;/code&gt;) are always considered unused unless their return value is assigned or used in a condition evaluation, or a function call is made with the sequence expression value.</source>
          <target state="translated">序列表达式（使用逗号的表达式，例如 &lt;code&gt;a = 1, b = 2&lt;/code&gt; ）始终被认为是未使用的，除非为其返回值分配或用于条件评估中，或者使用序列表达式值进行函数调用。</target>
        </trans-unit>
        <trans-unit id="a171fcac3dd876a9a68a177995635a2d7e821db8" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;capIsConstructor&quot;&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; if you want those functions to be treated as 'regular' functions.</source>
          <target state="translated">如果要将那些函数视为&amp;ldquo;常规&amp;rdquo;函数，请将 &lt;code&gt;&quot;capIsConstructor&quot;&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0180f010e4da395331d6d54df6959189e9dae8b" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;enforceForIndexOf&quot;&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if you want this rule to report &lt;code&gt;indexOf(NaN)&lt;/code&gt; and &lt;code&gt;lastIndexOf(NaN)&lt;/code&gt; method calls.</source>
          <target state="translated">如果希望此规则报告 &lt;code&gt;indexOf(NaN)&lt;/code&gt; 和 &lt;code&gt;lastIndexOf(NaN)&lt;/code&gt; 方法调用，则将 &lt;code&gt;&quot;enforceForIndexOf&quot;&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="618ceba957897722ae596312a10c551288948191" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;enforceForSwitchCase&quot;&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if you want this rule to report &lt;code&gt;case NaN&lt;/code&gt; and &lt;code&gt;switch(NaN)&lt;/code&gt; in &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">如果希望此规则在 &lt;code&gt;switch&lt;/code&gt; 语句中报告 &lt;code&gt;case NaN&lt;/code&gt; 和 &lt;code&gt;switch(NaN)&lt;/code&gt; ，则将 &lt;code&gt;&quot;enforceForSwitchCase&quot;&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa3491e34539a3ccbb31246fccfeafd612faa9f3" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;lexicalBindings&quot;&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if you want this rule to check &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; declarations as well.</source>
          <target state="translated">如果您希望此规则也检查 &lt;code&gt;const&lt;/code&gt; ， &lt;code&gt;let&lt;/code&gt; 和 &lt;code&gt;class&lt;/code&gt; 声明，请将 &lt;code&gt;&quot;lexicalBindings&quot;&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="faf94416ab2a050dcb6bbfd98218d385084c3972" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;allowKeywords&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt; (default is &lt;code&gt;true&lt;/code&gt;) to follow ECMAScript version 3 compatible style, avoiding dot notation for reserved word properties.</source>
          <target state="translated">将 &lt;code&gt;allowKeywords&lt;/code&gt; 选项设置为 &lt;code&gt;false&lt;/code&gt; （默认为 &lt;code&gt;true&lt;/code&gt; ）以遵循ECMAScript版本3兼容样式，避免保留字属性使用点表示法。</target>
        </trans-unit>
        <trans-unit id="be2fe335d32f03aea39945e0531758a541f8d75d" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;allowPattern&lt;/code&gt; option to a regular expression string to allow bracket notation for property names that match a pattern (by default, no pattern is tested).</source>
          <target state="translated">将 &lt;code&gt;allowPattern&lt;/code&gt; 选项设置为正则表达式字符串，以允许使用括号符号表示与模式匹配的属性名称（默认情况下，不测试任何模式）。</target>
        </trans-unit>
        <trans-unit id="1c81c3037407b2aa16474a63ef04fe8a38928ef4" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;commentPattern&lt;/code&gt; option to a regular expression string to change the default &lt;code&gt;/^no default$/i&lt;/code&gt; comment test pattern</source>
          <target state="translated">将 &lt;code&gt;commentPattern&lt;/code&gt; 选项设置为正则表达式字符串以更改默认的 &lt;code&gt;/^no default$/i&lt;/code&gt; 注释测试模式</target>
        </trans-unit>
        <trans-unit id="0013f5c88955deac87e1686900438d34e9741c2d" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;commentPattern&lt;/code&gt; option to a regular expression string to change the test for intentional fallthrough comment</source>
          <target state="translated">将 &lt;code&gt;commentPattern&lt;/code&gt; 选项设置为正则表达式字符串，以更改针对故意掉线注释的测试</target>
        </trans-unit>
        <trans-unit id="68ce687ddf0f134fff7cf81f9dc938e6b3878d8a" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;int32Hint&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; (default is &lt;code&gt;false&lt;/code&gt;) to allow write &lt;code&gt;a|0&lt;/code&gt; without space.</source>
          <target state="translated">将 &lt;code&gt;int32Hint&lt;/code&gt; 选项设置为 &lt;code&gt;true&lt;/code&gt; （默认为 &lt;code&gt;false&lt;/code&gt; ）以允许写 &lt;code&gt;a|0&lt;/code&gt; 而没有空格。</target>
        </trans-unit>
        <trans-unit id="3134ee2112bdc78853bd1511d97b31e6159ccb88" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; by default. Setting this option to &lt;code&gt;false&lt;/code&gt; allows constant expressions in loops.</source>
          <target state="translated">默认情况下设置为 &lt;code&gt;true&lt;/code&gt; 。将此选项设置为 &lt;code&gt;false&lt;/code&gt; 允许循环中使用常量表达式。</target>
        </trans-unit>
        <trans-unit id="70eda033c7f0c498a86724919e7320f305b80b0d" translate="yes" xml:space="preserve">
          <source>Set up a &lt;a href=&quot;../development-environment&quot;&gt;development environment&lt;/a&gt;.</source>
          <target state="translated">搭建&lt;a href=&quot;../development-environment&quot;&gt;开发环境&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f8322127967adf862ac72c512b139ae1854bca05" translate="yes" xml:space="preserve">
          <source>Setters cannot return values.</source>
          <target state="translated">设置者不能返回值。</target>
        </trans-unit>
        <trans-unit id="c9c749d001ff268cbeb4ea4c24c216a86d9a6a4d" translate="yes" xml:space="preserve">
          <source>Setting parser options helps ESLint determine what is a parsing error. All language options are &lt;code&gt;false&lt;/code&gt; by default.</source>
          <target state="translated">设置解析器选项可帮助ESLint确定什么是解析错误。默认情况下，所有语言选项均为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="37c53c1b3fac94914ae01b6fca4c4e53991f792a" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;ignoreInlineComments&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; means that comments in the middle of code (with a token on the same line as the beginning of the comment, and another token on the same line as the end of the comment) will not be reported by this rule.</source>
          <target state="translated">将 &lt;code&gt;ignoreInlineComments&lt;/code&gt; 选项设置为 &lt;code&gt;true&lt;/code&gt; 意味着该规则将不会报告代码中间的注释（在注释的开头与注释在同一行，而在注释的末尾与在注释的同一行） 。</target>
        </trans-unit>
        <trans-unit id="7a21f615bd35450d045383608de1e8b616f708b6" translate="yes" xml:space="preserve">
          <source>Shadowing is the process by which a local variable shares the same name as a variable in its containing scope. For example:</source>
          <target state="translated">影子是指一个局部变量与它所包含的作用域中的变量共享同一名称的过程。例如:</target>
        </trans-unit>
        <trans-unit id="6bf3b29e45e3e5e600d18ebc1d069a9b49cb2211" translate="yes" xml:space="preserve">
          <source>Share Plugins</source>
          <target state="translated">分享插件</target>
        </trans-unit>
        <trans-unit id="d411f634d35296374dbb079a9b10699e721c60b8" translate="yes" xml:space="preserve">
          <source>Shareable Configs</source>
          <target state="translated">可共享配置</target>
        </trans-unit>
        <trans-unit id="f7728f13ff64a72cf6ff58838bc2cf984afc2062" translate="yes" xml:space="preserve">
          <source>Shareable configs are designed to work with the &lt;code&gt;extends&lt;/code&gt; feature of &lt;code&gt;.eslintrc&lt;/code&gt; files. Instead of using a file path for the value of &lt;code&gt;extends&lt;/code&gt;, use your module name. For example:</source>
          <target state="translated">可共享的配置旨在与 &lt;code&gt;.eslintrc&lt;/code&gt; 文件的 &lt;code&gt;extends&lt;/code&gt; 功能一起使用。不用 &lt;code&gt;extends&lt;/code&gt; 名的值使用文件路径，而使用模块名。例如：</target>
        </trans-unit>
        <trans-unit id="ac98661439154e24e66154b8b56ea65970febcd8" translate="yes" xml:space="preserve">
          <source>Shareable configs are simply npm packages that export a configuration object. To start, &lt;a href=&quot;https://docs.npmjs.com/getting-started/creating-node-modules&quot;&gt;create a Node.js module&lt;/a&gt; like you normally would. Make sure the module name begins with &lt;code&gt;eslint-config-&lt;/code&gt;, such as &lt;code&gt;eslint-config-myconfig&lt;/code&gt;.</source>
          <target state="translated">可共享的配置只是导出配置对象的npm软件包。首先，像往常一样&lt;a href=&quot;https://docs.npmjs.com/getting-started/creating-node-modules&quot;&gt;创建一个Node.js模块&lt;/a&gt;。确保模块名称以 &lt;code&gt;eslint-config-&lt;/code&gt; 开头，例如 &lt;code&gt;eslint-config-myconfig&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5de27ab2273537b3d6d14a587e6661a643b307d7" translate="yes" xml:space="preserve">
          <source>Sharing Multiple Configs</source>
          <target state="translated">共享多个配置</target>
        </trans-unit>
        <trans-unit id="8fc88f1b91b2fde5e1092771afaef36f9a2e347a" translate="yes" xml:space="preserve">
          <source>Shebangs are now returned from comment APIs</source>
          <target state="translated">现在,评论API会返回Shebangs。</target>
        </trans-unit>
        <trans-unit id="7017708c1c06a3f1e90941c34316e9d4607c7d9c" translate="yes" xml:space="preserve">
          <source>Shebangs are represented by tokens of type &lt;code&gt;&quot;Shebang&quot;&lt;/code&gt;. They are treated as comments and can be accessed by the methods outlined above.</source>
          <target state="translated">Shebangs由类型为 &lt;code&gt;&quot;Shebang&quot;&lt;/code&gt; 的标记表示。它们被视为注释，可以通过上面概述的方法进行访问。</target>
        </trans-unit>
        <trans-unit id="23210f846566656bab3b173307947416d7f3ca0b" translate="yes" xml:space="preserve">
          <source>Sign our &lt;a href=&quot;https://cla.js.foundation/eslint/eslint&quot;&gt;Contributor License Agreement&lt;/a&gt;.</source>
          <target state="translated">签署我们的&lt;a href=&quot;https://cla.js.foundation/eslint/eslint&quot;&gt;贡献者许可协议&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2be01717d65543f816e780251a90121cfccc7576" translate="yes" xml:space="preserve">
          <source>Signing the CLA</source>
          <target state="translated">签署《CLA》</target>
        </trans-unit>
        <trans-unit id="0ec28340f6b30cc1ce90c43020055c994f7d5efb" translate="yes" xml:space="preserve">
          <source>Similar to the valid cases, you can also specify &lt;code&gt;options&lt;/code&gt; to be passed to the rule:</source>
          <target state="translated">与有效情况类似，您还可以指定要传递给规则的 &lt;code&gt;options&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="83f59937d173df040577971290f0e1cacd671a9c" translate="yes" xml:space="preserve">
          <source>Simple Statements</source>
          <target state="translated">简单声明</target>
        </trans-unit>
        <trans-unit id="24da9670085c68ec6aa7a55a98200997a7091b66" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;context.options&lt;/code&gt; is just an array, you can use it to determine how many options have been passed as well as retrieving the actual options themselves. Keep in mind that the error level is not part of &lt;code&gt;context.options&lt;/code&gt;, as the error level cannot be known or modified from inside a rule.</source>
          <target state="translated">由于 &lt;code&gt;context.options&lt;/code&gt; 只是一个数组，因此您可以使用它来确定传递了多少个选项以及检索实际的选项本身。请记住，错误级别不是 &lt;code&gt;context.options&lt;/code&gt; 的一部分，因为不能从规则内部知道或修改错误级别。</target>
        </trans-unit>
        <trans-unit id="3dec31ada8554ba1a6a6debc16cb59773af96567" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;index.js&lt;/code&gt; is just JavaScript, you can optionally read these settings from a file or generate them dynamically.</source>
          <target state="translated">由于 &lt;code&gt;index.js&lt;/code&gt; 只是JavaScript，因此您可以选择从文件中读取这些设置或动态生成它们。</target>
        </trans-unit>
        <trans-unit id="48bb4d613279d48459f21ef7090afc2c9bd1a5ba" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;require()&lt;/code&gt; does a synchronous load, it can cause performance problems when used in other locations.</source>
          <target state="translated">由于 &lt;code&gt;require()&lt;/code&gt; 会执行同步加载，因此在其他位置使用它可能会导致性能问题。</target>
        </trans-unit>
        <trans-unit id="c4072153bf32cdf523ee16f38e671d010ceab044" translate="yes" xml:space="preserve">
          <source>Since ESLint v5, &lt;code&gt;ecmaFeatures: { experimentalObjectRestSpread: true }&lt;/code&gt; has been equivalent to &lt;code&gt;ecmaVersion: 2018&lt;/code&gt;, and has also emitted a deprecation warning. In ESLint v6, the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; feature has been removed entirely and has no effect. If your config was relying on &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; to enable ES2018 parsing, you might start seeing parsing errors for recent syntax.</source>
          <target state="translated">从ESLint v5开始， &lt;code&gt;ecmaFeatures: { experimentalObjectRestSpread: true }&lt;/code&gt; 等效于 &lt;code&gt;ecmaVersion: 2018&lt;/code&gt; ，并且还发出了弃用警告。在ESLint v6中， &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; 功能已完全删除，并且无效。如果您的配置依赖 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; 来启用ES2018解析，则可能会开始看到针对最新语法的解析错误。</target>
        </trans-unit>
        <trans-unit id="d13ae6387ed366be6d8b805801c5cfb3cfb9ad21" translate="yes" xml:space="preserve">
          <source>Since all rules are run again after the initial round of fixes is applied, it's not necessary for a rule to check whether the code style of a fix will cause errors to be reported by another rule.</source>
          <target state="translated">由于所有的规则都是在应用了最初一轮的修复后再次运行,所以一条规则没有必要检查修复的代码风格是否会导致另一条规则报错。</target>
        </trans-unit>
        <trans-unit id="18fb1e3007320b11f3d7fd9d833d2b32f18f24bd" translate="yes" xml:space="preserve">
          <source>Since deprecated rules will never be removed, you can continue to use them indefinitely if they are working for you. However, keep in mind that deprecated rules will effectively be unmaintained.</source>
          <target state="translated">由于过时的规则永远不会被删除,如果它们对你有用,你可以继续无限期地使用它们。但是,请记住,被废弃的规则实际上将无法维护。</target>
        </trans-unit>
        <trans-unit id="0b45593d5f75200b1272e2e445af7ba7a6ca42cb" translate="yes" xml:space="preserve">
          <source>Since it's good to have a consistent code style, you should either always write padded blocks or never do it.</source>
          <target state="translated">既然好不容易有了一致的代码风格,你应该要么一直写垫块,要么永远不写。</target>
        </trans-unit>
        <trans-unit id="20e1b60daaa62f4d5667736af96bfb991b249553" translate="yes" xml:space="preserve">
          <source>Single-Line Comments</source>
          <target state="translated">单行评论</target>
        </trans-unit>
        <trans-unit id="56f06f07d3754fea01009119715bfd5517b24da3" translate="yes" xml:space="preserve">
          <source>Single-line comments should be used to document one line of code or a group of related lines of code. A single-line comment may be used in three ways:</source>
          <target state="translated">单行注释应该用来记录一行代码或一组相关的代码。单行注释可以用三种方式使用:</target>
        </trans-unit>
        <trans-unit id="d5725de7b903a8b05de6ad0470647699fe07e580" translate="yes" xml:space="preserve">
          <source>Small - Runs ESLint on KnockoutJS</source>
          <target state="translated">小-在KnockoutJS上运行ESLint。</target>
        </trans-unit>
        <trans-unit id="8a314d2e7d6188c8847f81a281bc5f5ae16c1c06" translate="yes" xml:space="preserve">
          <source>Smart Tabs</source>
          <target state="translated">智能标签</target>
        </trans-unit>
        <trans-unit id="f4e452300a2b0f07b41745625016cd897fb85bfe" translate="yes" xml:space="preserve">
          <source>So running &lt;code&gt;eslint&lt;/code&gt; with this custom formatter:</source>
          <target state="translated">因此，使用此自定义格式化程序运行 &lt;code&gt;eslint&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="65f774dd6ab39438c5f5df28e0b861b09e448b2d" translate="yes" xml:space="preserve">
          <source>So the second argument &lt;code&gt;ast&lt;/code&gt; also should be parsed from stripped text.</source>
          <target state="translated">因此，第二个参数 &lt;code&gt;ast&lt;/code&gt; 也应该从剥离的文本中解析。</target>
        </trans-unit>
        <trans-unit id="31a71f85cf4f793cf2a2e4f0097c3f2e95ba388a" translate="yes" xml:space="preserve">
          <source>Software Module size and file size</source>
          <target state="translated">软件模块大小和文件大小</target>
        </trans-unit>
        <trans-unit id="be134f7c50807cfb772cbc0bcb5081b5a12c45d8" translate="yes" xml:space="preserve">
          <source>Some code conventions require that all &lt;code&gt;switch&lt;/code&gt; statements have a &lt;code&gt;default&lt;/code&gt; case, even if the default case is empty, such as:</source>
          <target state="translated">某些代码约定要求所有 &lt;code&gt;switch&lt;/code&gt; 语句都具有 &lt;code&gt;default&lt;/code&gt; 大小写，即使默认大小写为空也是如此，例如：</target>
        </trans-unit>
        <trans-unit id="c8b6c94f005c780b423c192df3948fbf6b0bc032" translate="yes" xml:space="preserve">
          <source>Some code styles prohibit &lt;code&gt;void&lt;/code&gt; operator, marking it as non-obvious and hard to read.</source>
          <target state="translated">一些代码样式禁止 &lt;code&gt;void&lt;/code&gt; 运算符，将其标记为非显而易见的且难以阅读。</target>
        </trans-unit>
        <trans-unit id="5c5510f077de709ac2acb2de150530c1a834f95a" translate="yes" xml:space="preserve">
          <source>Some consider this to be a bad practice as it was an undocumented feature of JavaScript that was only formalized later.</source>
          <target state="translated">有些人认为这是一种不好的做法,因为这是JavaScript的一个未被记录的功能,只是后来才被正式化。</target>
        </trans-unit>
        <trans-unit id="5c13b92416e3720dc9efdcd598e2b13bb218f8f0" translate="yes" xml:space="preserve">
          <source>Some developers declare multiple var statements on the same line:</source>
          <target state="translated">有些开发人员在同一行声明多个var语句。</target>
        </trans-unit>
        <trans-unit id="88fde2b94b3e6e7f06f28f5ca48809414c632781" translate="yes" xml:space="preserve">
          <source>Some developers find that placing operators at the beginning of the line makes the code more readable.</source>
          <target state="translated">一些开发人员发现,将运算符放在行首,可以使代码更易读。</target>
        </trans-unit>
        <trans-unit id="da83d59be8d3c1fa61746c9667b3e144b3b46f21" translate="yes" xml:space="preserve">
          <source>Some developers prefer to have multiple blank lines removed, while others feel that it helps improve readability. Whitespace is useful for separating logical sections of code, but excess whitespace takes up more of the screen.</source>
          <target state="translated">有些开发者喜欢去掉多个空行,而另一些开发者则认为这有助于提高可读性。空格对于分隔代码的逻辑部分很有用,但过多的空格会占用更多的屏幕。</target>
        </trans-unit>
        <trans-unit id="319b3df86b7ba843599bf2b2dd9f3af029a3c402" translate="yes" xml:space="preserve">
          <source>Some exposed APIs are now ES2015 classes</source>
          <target state="translated">一些暴露的API现在是ES2015类</target>
        </trans-unit>
        <trans-unit id="70eec175aefc8c0ac35582826149396333b51a6a" translate="yes" xml:space="preserve">
          <source>Some global variables have been deprecated or removed for code running in Node.js, browsers, and Jest. (For example, browsers used to expose an &lt;code&gt;SVGAltGlyphElement&lt;/code&gt; global variable to JavaScript code, but this global has been removed from web standards and is no longer present in browsers.) As a result, we have removed these globals from the corresponding &lt;code&gt;eslint&lt;/code&gt; environments, so use of these globals will trigger an error when using rules such as &lt;a href=&quot;../rules/no-undef&quot;&gt;&lt;code&gt;no-undef&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">对于在Node.js，浏览器和Jest中运行的代码，某些全局变量已被弃用或删除。（例如，用于将 &lt;code&gt;SVGAltGlyphElement&lt;/code&gt; 全局变量公开给JavaScript代码的浏览器，但是该全局已从Web标准中删除，并且不再存在于浏览器中。）因此，我们从相应的 &lt;code&gt;eslint&lt;/code&gt; 环境中删除了这些全局，因此当使用诸如&lt;a href=&quot;../rules/no-undef&quot;&gt; &lt;code&gt;no-undef&lt;/code&gt; 之类的&lt;/a&gt;规则时，使用这些全局变量将触发错误。</target>
        </trans-unit>
        <trans-unit id="f062f278fdeadb9e299ef656855a628748c5bb85" translate="yes" xml:space="preserve">
          <source>Some imports might not make sense in a particular environment. For example, Node.js' &lt;code&gt;fs&lt;/code&gt; module would not make sense in an environment that didn't have a file system.</source>
          <target state="translated">在特定环境中，某些导入可能没有意义。例如，Node.js的 &lt;code&gt;fs&lt;/code&gt; 模块在没有文件系统的环境中就没有意义。</target>
        </trans-unit>
        <trans-unit id="8a1845bade3c1e32522c230c7fd34c3040711d50" translate="yes" xml:space="preserve">
          <source>Some issues have had monetary rewards attached to them. Those are labeled &lt;code&gt;bounty&lt;/code&gt;. Bounties are assigned via &lt;a href=&quot;https://www.bountysource.com/teams/eslint/issues&quot;&gt;BountySource&lt;/a&gt;.</source>
          <target state="translated">有些问题附有金钱奖励。那些被贴为 &lt;code&gt;bounty&lt;/code&gt; 。赏金是通过&lt;a href=&quot;https://www.bountysource.com/teams/eslint/issues&quot;&gt;BountySource&lt;/a&gt;分配的。</target>
        </trans-unit>
        <trans-unit id="cc97f15ec33a8fb0d8f181362b5bbc40bdbb948d" translate="yes" xml:space="preserve">
          <source>Some modules provide similar or identical functionality, think &lt;code&gt;lodash&lt;/code&gt; and &lt;code&gt;underscore&lt;/code&gt;. Your project may have standardized on a module. You want to make sure that the other alternatives are not being used as this would unnecessarily bloat the project and provide a higher maintenance cost of two dependencies when one would suffice.</source>
          <target state="translated">某些模块提供相似或相同的功能，请使用 &lt;code&gt;lodash&lt;/code&gt; 和 &lt;code&gt;underscore&lt;/code&gt; 。您的项目可能已在模块上标准化。您要确保不使用其他替代方法，因为这将不必要地使项目肿，并在满足一个条件时提供两个依赖关系的更高维护成本。</target>
        </trans-unit>
        <trans-unit id="264939a2d43fd66c197012a9cf9648b42c36337b" translate="yes" xml:space="preserve">
          <source>Some modules return a constructor which can potentially lead to code such as:</source>
          <target state="translated">有些模块会返回一个构造函数,这可能会导致这样的代码。</target>
        </trans-unit>
        <trans-unit id="29ba1427e8c92e96a16255e3f6eb4ecbfabc34f6" translate="yes" xml:space="preserve">
          <source>Some people consider large files a code smell. Large files tend to do a lot of things and can make it hard following what's going. While there is not an objective maximum number of lines considered acceptable in a file, most people would agree it should not be in the thousands. Recommendations usually range from 100 to 500 lines.</source>
          <target state="translated">有些人认为大文件是一种代码味。大文件往往会做很多事情,会让人很难跟上进度。虽然没有一个客观的最大行数被认为是可以接受的文件,但大多数人都会同意它不应该是数千行。建议通常从100行到500行不等。</target>
        </trans-unit>
        <trans-unit id="a357eb75979b31ab9472de29b249e979f6b6b141" translate="yes" xml:space="preserve">
          <source>Some people consider large functions a code smell. Large functions tend to do a lot of things and can make it hard following what's going on. Many coding style guides dictate a limit of the number of lines that a function can comprise of. This rule can help enforce that style.</source>
          <target state="translated">有些人认为大函数是一种代码味。大的函数往往会做很多事情,会让人很难跟上正在发生的事情。许多编码风格指南规定了一个函数可以组成的行数限制。这个规则可以帮助执行这个风格。</target>
        </trans-unit>
        <trans-unit id="b516222d790d0bfe6d8641c249e0071402e077c0" translate="yes" xml:space="preserve">
          <source>Some rules and APIs allow the use of selectors to query an AST. This page is intended to:</source>
          <target state="translated">一些规则和API允许使用选择器来查询AST。本页的目的是:</target>
        </trans-unit>
        <trans-unit id="d46d7f40436527e02e15f42c4b8e72f68eaadfc8" translate="yes" xml:space="preserve">
          <source>Some rules require options in order to function correctly. These options appear in configuration (&lt;code&gt;.eslintrc&lt;/code&gt;, command line, or in comments). For example:</source>
          <target state="translated">某些规则需要选项才能正常运行。这些选项显示在配置中（ &lt;code&gt;.eslintrc&lt;/code&gt; ，命令行或注释中）。例如：</target>
        </trans-unit>
        <trans-unit id="00275b3b345f6b9172064ad3c4803175ae258c34" translate="yes" xml:space="preserve">
          <source>Some style guides disallow comments on the same line as code. Code can become difficult to read if comments immediately follow the code on the same line. On the other hand, it is sometimes faster and more obvious to put comments immediately following code.</source>
          <target state="translated">有些风格指南不允许在代码的同一行上加注。如果注释紧跟在代码之后,代码会变得难以阅读。另一方面,有时将注释紧跟在代码后面会更快、更明显。</target>
        </trans-unit>
        <trans-unit id="1849aab38ed123bdc6d7b029034a46313136fc00" translate="yes" xml:space="preserve">
          <source>Some style guides don't allow the use of tab characters at all, including within comments.</source>
          <target state="translated">有些样式指南根本不允许使用制表符,包括在注释中。</target>
        </trans-unit>
        <trans-unit id="2244458667f3ce520967956eda4ce510fbeed0c1" translate="yes" xml:space="preserve">
          <source>Some style guides may require a consistent spacing for function names.</source>
          <target state="translated">一些样式指南可能要求函数名的间距一致。</target>
        </trans-unit>
        <trans-unit id="030befb9cb1b6a4b5dacb92a3f92d4b8ba5e2c62" translate="yes" xml:space="preserve">
          <source>Some style guides require JSDoc comments for all functions as a way of explaining function behavior.</source>
          <target state="translated">一些样式指南要求对所有函数进行JSDoc注释,作为解释函数行为的一种方式。</target>
        </trans-unit>
        <trans-unit id="dc237e4772e0207c27c1e378f2525052a1ff94c6" translate="yes" xml:space="preserve">
          <source>Some style guides require block statements to start and end with blank lines. The goal is to improve readability by visually separating the block content and the surrounding code.</source>
          <target state="translated">一些样式指南要求块语句以空行开始和结束。这样做的目的是通过视觉上分离块内容和周围的代码来提高可读性。</target>
        </trans-unit>
        <trans-unit id="201550e6abc7ddd420de4b881ba83ce28f29f0b9" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow a whitespace immediately after the initial &lt;code&gt;//&lt;/code&gt; of a line comment. Whitespace after the &lt;code&gt;//&lt;/code&gt; makes it easier to read text in comments. On the other hand, commenting out code is easier without having to put a whitespace right after the &lt;code&gt;//&lt;/code&gt;.</source>
          <target state="translated">某些样式指南会在行注释的初始 &lt;code&gt;//&lt;/code&gt; 后立即要求或禁止使用空格。 &lt;code&gt;//&lt;/code&gt; 后面的空格使阅读注释中的文本更容易。另一方面，注释代码更容易，而不必在 &lt;code&gt;//&lt;/code&gt; 后添加空格。</target>
        </trans-unit>
        <trans-unit id="a1c5fdd2ea4191bb42ab7f9fca487d91da02843c" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow a whitespace immediately after the initial &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt; of a comment. Whitespace after the &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt; makes it easier to read text in comments. On the other hand, commenting out code is easier without having to put a whitespace right after the &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt;.</source>
          <target state="translated">某些样式指南在注释的初始 &lt;code&gt;//&lt;/code&gt; 或 &lt;code&gt;/*&lt;/code&gt; 之后立即要求或禁止使用空格。 &lt;code&gt;//&lt;/code&gt; 或 &lt;code&gt;/*&lt;/code&gt; 后面的空格使阅读注释中的文本更容易。另一方面，注释代码更容易，而不必在 &lt;code&gt;//&lt;/code&gt; 或 &lt;code&gt;/*&lt;/code&gt; 后面放置空格。</target>
        </trans-unit>
        <trans-unit id="9568a858ccab377c3f347cbea8a8037f371d4712" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow spaces before or after unary operators. This is mainly a stylistic issue, however, some JavaScript expressions can be written without spacing which makes it harder to read and maintain.</source>
          <target state="translated">一些样式指南要求或不允许在单列运算符之前或之后有空格。这主要是一个风格问题,然而,一些JavaScript表达式可以不需要空格,这使得它更难阅读和维护。</target>
        </trans-unit>
        <trans-unit id="1cd1de3034a3fc730da0bea8dd9b8d360a4330f4" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow spaces inside of parentheses:</source>
          <target state="translated">有些样式指南要求或不允许括号内有空格。</target>
        </trans-unit>
        <trans-unit id="c3070c75d033320e5f7ebe414b6237a3ba652bf4" translate="yes" xml:space="preserve">
          <source>Some style guides will require or disallow spaces following the certain keywords.</source>
          <target state="translated">有些样式指南会要求或不允许在某些关键词后面有空格。</target>
        </trans-unit>
        <trans-unit id="c4be317e60f6aa965f4ab059cd2ad659412f195d" translate="yes" xml:space="preserve">
          <source>Some tests require that a certain parser configuration must be used. This can be specified in test specifications via the &lt;code&gt;parserOptions&lt;/code&gt; setting.</source>
          <target state="translated">一些测试要求必须使用特定的解析器配置。可以通过 &lt;code&gt;parserOptions&lt;/code&gt; 设置在测试规范中指定。</target>
        </trans-unit>
        <trans-unit id="838af6a85f479a1fedfe1a6da00a3f1b6a2a4200" translate="yes" xml:space="preserve">
          <source>Sometimes (especially in big projects) the name of the error variable is not consistent across the project, so you need a more flexible configuration to ensure that the rule reports all unhandled errors.</source>
          <target state="translated">有时(尤其是在大型项目中),错误变量的名称在整个项目中并不一致,因此你需要更灵活的配置来确保规则报告所有未处理的错误。</target>
        </trans-unit>
        <trans-unit id="50c696bd306a1b3a43860828cc49620093926e56" translate="yes" xml:space="preserve">
          <source>Sometimes during the course of code maintenance, the &lt;code&gt;this&lt;/code&gt; value is removed from the function body. In that case, you can end up with a call to &lt;code&gt;bind()&lt;/code&gt; that doesn't accomplish anything:</source>
          <target state="translated">有时在代码维护过程中， &lt;code&gt;this&lt;/code&gt; 值会从函数体中删除。在这种情况下，您可以结束对 &lt;code&gt;bind()&lt;/code&gt; 的调用，但该调用什么都做不了：</target>
        </trans-unit>
        <trans-unit id="e1239a4ef3312baebd03a9fadd3dc1da7a196cfc" translate="yes" xml:space="preserve">
          <source>Sometimes in the course of editing files, you can end up with extra whitespace at the end of lines. These whitespace differences can be picked up by source control systems and flagged as diffs, causing frustration for developers. While this extra whitespace causes no functional issues, many code conventions require that trailing spaces be removed before check-in.</source>
          <target state="translated">有时在编辑文件的过程中,你可能会在行末出现额外的空白。这些空格的差异可能会被源码控制系统发现,并标记为差异,从而给开发人员带来挫折感。虽然这种额外的空白不会引起功能问题,但许多代码惯例要求在签入前删除尾部的空格。</target>
        </trans-unit>
        <trans-unit id="7b37110e5b01350732eac4676af2611966b9ccef" translate="yes" xml:space="preserve">
          <source>Source Code</source>
          <target state="translated">源代码</target>
        </trans-unit>
        <trans-unit id="f13b901ad76229dac734487a39808cdde93abfe1" translate="yes" xml:space="preserve">
          <source>Source Control</source>
          <target state="translated">源头控制</target>
        </trans-unit>
        <trans-unit id="d7f23e409b1f9d227333564c23108a422010e901" translate="yes" xml:space="preserve">
          <source>SourceCode</source>
          <target state="translated">SourceCode</target>
        </trans-unit>
        <trans-unit id="bce4c495898f1faddcaa7c35b37ab4481ede3b00" translate="yes" xml:space="preserve">
          <source>SourceCode constructor (Node API) changes</source>
          <target state="translated">SourceCode构造函数(Node API)的变化。</target>
        </trans-unit>
        <trans-unit id="4295a0eca57863562626d681cbe158963892a6fd" translate="yes" xml:space="preserve">
          <source>SourceCode#splitLines()</source>
          <target state="translated">SourceCode#splitLines()</target>
        </trans-unit>
        <trans-unit id="db40a182aaf7dc66373c8652a068c39e88c92f7e" translate="yes" xml:space="preserve">
          <source>Space issues can also cause code to look inconsistent and harder to read.</source>
          <target state="translated">空间问题也会导致代码看起来不一致,难以阅读。</target>
        </trans-unit>
        <trans-unit id="9b903a63fa074533e05ee538bb400f7ae7d25ae0" translate="yes" xml:space="preserve">
          <source>Spacing around colons improves readability of &lt;code&gt;case&lt;/code&gt;/&lt;code&gt;default&lt;/code&gt; clauses.</source>
          <target state="translated">冒号之间的间距提高了 &lt;code&gt;case&lt;/code&gt; / &lt;code&gt;default&lt;/code&gt; 子句的可读性。</target>
        </trans-unit>
        <trans-unit id="bee60614d09a5dc287b728aa03f9ca804bb2765e" translate="yes" xml:space="preserve">
          <source>Spacing around commas improves readability of a list of items. Although most of the style guidelines for languages prescribe adding a space after a comma and not before it, it is subjective to the preferences of a project.</source>
          <target state="translated">逗号周围的间隔可以提高项目清单的可读性。虽然大多数语言风格指南都规定在逗号后而不是逗号前加一个空格,但这是根据项目的喜好而定的。</target>
        </trans-unit>
        <trans-unit id="85517ae7d9ab81a8dc4d785d38d52af351849a64" translate="yes" xml:space="preserve">
          <source>Sparse arrays contain empty slots, most frequently due to multiple commas being used in an array literal, such as:</source>
          <target state="translated">稀疏数组包含空槽,最常见的原因是数组文字中使用了多个逗号,如:。</target>
        </trans-unit>
        <trans-unit id="0b7e749be12e1d4e6f29f80172dc19cac2d01996" translate="yes" xml:space="preserve">
          <source>Specifying Environments</source>
          <target state="translated">指定环境</target>
        </trans-unit>
        <trans-unit id="056af97903e3dc6e6f43b88d96ae94278918b7f2" translate="yes" xml:space="preserve">
          <source>Specifying File extensions to Lint</source>
          <target state="translated">向Lint指定文件扩展名</target>
        </trans-unit>
        <trans-unit id="42e1afab26529373a5755f37ed73c9992e7a1f27" translate="yes" xml:space="preserve">
          <source>Specifying Globals</source>
          <target state="translated">指定全局</target>
        </trans-unit>
        <trans-unit id="615655edaa8435cea59ad96bf63fd800fe901df4" translate="yes" xml:space="preserve">
          <source>Specifying Parser</source>
          <target state="translated">指定解析器</target>
        </trans-unit>
        <trans-unit id="3fdf1ff8c15b6bfb3e42d6729c40289a364a0934" translate="yes" xml:space="preserve">
          <source>Specifying Parser Options</source>
          <target state="translated">指定解析器选项</target>
        </trans-unit>
        <trans-unit id="a5dba7920ee9d85457d6a302a8028c1f41b8cc64" translate="yes" xml:space="preserve">
          <source>Specifying Processor</source>
          <target state="translated">指定处理器</target>
        </trans-unit>
        <trans-unit id="ec5cdef761600831584f51b13c5e7e1af51231d0" translate="yes" xml:space="preserve">
          <source>Specifying Processor in Config Files</source>
          <target state="translated">在配置文件中指定处理器</target>
        </trans-unit>
        <trans-unit id="fd3a805a25d509c02dbba7487be2139a847549f5" translate="yes" xml:space="preserve">
          <source>Specifying rules and plugins</source>
          <target state="translated">指定规则和插件</target>
        </trans-unit>
        <trans-unit id="96c2be7c78e35ecedf2f6d32e197f0983c7d3765" translate="yes" xml:space="preserve">
          <source>Start Developing</source>
          <target state="translated">开始发展</target>
        </trans-unit>
        <trans-unit id="d5ebef5b5d844222a804e3497fcaed1e87e4a705" translate="yes" xml:space="preserve">
          <source>Start: &lt;a href=&quot;https://www.npmjs.com/package/@start/plugin-lib-eslint&quot;&gt;@start/plugin-lib-eslint&lt;/a&gt;</source>
          <target state="translated">开始：&lt;a href=&quot;https://www.npmjs.com/package/@start/plugin-lib-eslint&quot;&gt;@ start / plugin-lib-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="67086f02eed6ec69807b5ddb9e07150ee0b0c38d" translate="yes" xml:space="preserve">
          <source>Starting Work</source>
          <target state="translated">开始工作</target>
        </trans-unit>
        <trans-unit id="91b0ca4a9a5191f5469dcbd23531b6ea8254d67c" translate="yes" xml:space="preserve">
          <source>Starting in 3.1.0, rules have been able to specify the &lt;em&gt;end&lt;/em&gt; location of a reported problem, in addition to the start location, by explicitly specifying an end location in the &lt;code&gt;report&lt;/code&gt; call. This is useful for tools like editor integrations, which can use the range to precisely display where a reported problem occurs. Starting in 4.0, if a &lt;em&gt;node&lt;/em&gt; is reported rather than a location, the end location of the range will automatically be inferred from the end location of the node. As a result, many more reported problems will have end locations.</source>
          <target state="translated">从3.1.0开始，规则可以通过在 &lt;code&gt;report&lt;/code&gt; 调用中显式指定结束位置来指定报告问题的&lt;em&gt;结束&lt;/em&gt;位置（除了开始位置之外）。这对于编辑器集成之类的工具很有用，该工具可以使用范围来精确显示发生问题的位置。从4.0开始，如果报告的是&lt;em&gt;节点&lt;/em&gt;而不是位置，则将从节点的结束位置自动推断范围的结束位置。结果，更多已报告的问题将具有终止位置。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f2ecf2f7eb4335fbd187d0845b33268b44df84a" translate="yes" xml:space="preserve">
          <source>Starting in 4.0, &lt;code&gt;LineComment&lt;/code&gt; and &lt;code&gt;BlockComments&lt;/code&gt; events will not be emitted during AST traversal. There are two reasons for this:</source>
          <target state="translated">从4.0开始，在AST遍历期间将不发出 &lt;code&gt;LineComment&lt;/code&gt; 和 &lt;code&gt;BlockComments&lt;/code&gt; 事件。有两个原因：</target>
        </trans-unit>
        <trans-unit id="4a9fefe6ba1eb3abeeec5967b3b58b648a035245" translate="yes" xml:space="preserve">
          <source>Starting in 4.0, the &lt;code&gt;RuleTester&lt;/code&gt; utility will validate properties of test case objects, and an error will be thrown if an unknown property is encountered. This change was added because we found that it was relatively common for developers to make typos in rule tests, often invalidating the assertions that the test cases were trying to make.</source>
          <target state="translated">从4.0开始， &lt;code&gt;RuleTester&lt;/code&gt; 实用程序将验证测试用例对象的属性，如果遇到未知属性，将引发错误。添加此更改的原因是，我们发现开发人员在规则测试中进行错别字是相对普遍的，通常会使测试用例试图做出的断言无效。</target>
        </trans-unit>
        <trans-unit id="5653cebc057d4791ce07031ad9286e729de6d691" translate="yes" xml:space="preserve">
          <source>Statements</source>
          <target state="translated">Statements</target>
        </trans-unit>
        <trans-unit id="6a5813201a4580fe5f1fbb25f1a522d4d505bf2d" translate="yes" xml:space="preserve">
          <source>Static Methods</source>
          <target state="translated">静态方法</target>
        </trans-unit>
        <trans-unit id="633c64990d0fd3fb0088750ad9faa31590a9c3f0" translate="yes" xml:space="preserve">
          <source>Step 1: Create a new branch</source>
          <target state="translated">第一步:创建一个新的分支机构</target>
        </trans-unit>
        <trans-unit id="c743a1387584019a5b9e49c171021066a9274bbd" translate="yes" xml:space="preserve">
          <source>Step 1: Install Node.js</source>
          <target state="translated">第一步:安装Node.js</target>
        </trans-unit>
        <trans-unit id="ebb615d0e8fbd3bc64c658bdeea517e1be8a7501" translate="yes" xml:space="preserve">
          <source>Step 2: Fork and checkout your own ESLint repository</source>
          <target state="translated">第二步:叉开并检查你自己的ESLint资源库。</target>
        </trans-unit>
        <trans-unit id="4b277bac8f09c41a896b5778dc93caf8cea1b8d1" translate="yes" xml:space="preserve">
          <source>Step 2: Make your changes</source>
          <target state="translated">第二步:进行修改</target>
        </trans-unit>
        <trans-unit id="162e5376e301468cf0fb8feee5902817e041ced1" translate="yes" xml:space="preserve">
          <source>Step 3: Add the upstream source</source>
          <target state="translated">第三步:添加上游源</target>
        </trans-unit>
        <trans-unit id="c69e88aa3310028acfe11e07da987e642ed7401d" translate="yes" xml:space="preserve">
          <source>Step 3: Rebase onto upstream</source>
          <target state="translated">第3步:重垒到上游</target>
        </trans-unit>
        <trans-unit id="11d3053005d884cc0baea0d55f626ee5d58a2a6e" translate="yes" xml:space="preserve">
          <source>Step 4: Install the Yeoman Generator</source>
          <target state="translated">第四步:安装Yeoman发电机</target>
        </trans-unit>
        <trans-unit id="d2be3c72779cd587be34e70421fd2467e7894ea1" translate="yes" xml:space="preserve">
          <source>Step 4: Run the tests</source>
          <target state="translated">第四步:运行测试</target>
        </trans-unit>
        <trans-unit id="e9fd76aa2302af763cd9bb123a722b970152c5fc" translate="yes" xml:space="preserve">
          <source>Step 5: Double check your submission</source>
          <target state="translated">第五步:仔细检查你的提交</target>
        </trans-unit>
        <trans-unit id="1c864ce6457173a3a941ae978f55091a735f72c1" translate="yes" xml:space="preserve">
          <source>Step 5: Run the tests</source>
          <target state="translated">第五步:运行测试</target>
        </trans-unit>
        <trans-unit id="b96518c7b052df6c7c228843ed78292c66a91d9a" translate="yes" xml:space="preserve">
          <source>Step 6: Push your changes</source>
          <target state="translated">第六步:推动你的改变</target>
        </trans-unit>
        <trans-unit id="baa82a802e0780c46eb5d8b0c851c905af055f75" translate="yes" xml:space="preserve">
          <source>Step 7: Send the pull request</source>
          <target state="translated">第七步:发送拉动请求</target>
        </trans-unit>
        <trans-unit id="f1823ff4064066ec41c29ab620ef5de461f12793" translate="yes" xml:space="preserve">
          <source>Store the info about processed files in order to only operate on the changed ones. The cache is stored in &lt;code&gt;.eslintcache&lt;/code&gt; by default. Enabling this option can dramatically improve ESLint's running time by ensuring that only changed files are linted.</source>
          <target state="translated">存储有关已处理文件的信息，以便仅对已更改的文件进行操作。默认情况下，缓存存储在 &lt;code&gt;.eslintcache&lt;/code&gt; 中。启用此选项可以确保仅对更改的文件进行掉毛处理，从而可以大大缩短ESLint的运行时间。</target>
        </trans-unit>
        <trans-unit id="040fdcc5343129a76b072a4ce16081703504850c" translate="yes" xml:space="preserve">
          <source>Storing Node.js application config data - Ben Hall's blog</source>
          <target state="translated">存储Node.js应用配置数据-Ben Hall的博客</target>
        </trans-unit>
        <trans-unit id="7c183131363f4251f89993f5090afc10d8f0caad" translate="yes" xml:space="preserve">
          <source>Strict Mode</source>
          <target state="translated">严格模式</target>
        </trans-unit>
        <trans-unit id="10944d62374d1d35c0aa7618089752217945a8f3" translate="yes" xml:space="preserve">
          <source>Strict mode is enabled by using the following pragma in your code:</source>
          <target state="translated">在你的代码中使用下面的pragma来启用严格模式。</target>
        </trans-unit>
        <trans-unit id="4c2e19e5bce9b19bbc0b58f76bc3e3dfe6a9b44a" translate="yes" xml:space="preserve">
          <source>Strict mode should be used in all modules, specified below the file overview comment and above everything else:</source>
          <target state="translated">严格模式应该在所有模块中使用,在文件概览注释下面指定,并在其他一切之上。</target>
        </trans-unit>
        <trans-unit id="3c519ccf5be0c1f36a3bbdf75106a4c822cfcb9f" translate="yes" xml:space="preserve">
          <source>String option:</source>
          <target state="translated">字符串选项。</target>
        </trans-unit>
        <trans-unit id="7c0095620910afa8aafa46572a5f1abcd3e6d132" translate="yes" xml:space="preserve">
          <source>String options are:</source>
          <target state="translated">字符串选项有:</target>
        </trans-unit>
        <trans-unit id="219423ce2478de8f7bc615787c69eeec3ac8cfbb" translate="yes" xml:space="preserve">
          <source>Strings should always use double quotes (never single quotes) and should always appear on a single line. Never use a slash to create a new line in a string.</source>
          <target state="translated">字符串应始终使用双引号(绝不是单引号),并应始终出现在单行上。切勿使用斜杠在字符串中创建新行。</target>
        </trans-unit>
        <trans-unit id="2bd1e348298a2cd13100d6cde33eeacf35aa2449" translate="yes" xml:space="preserve">
          <source>Style guides may require a space after the &lt;code&gt;function&lt;/code&gt; keyword for anonymous functions, while others specify no whitespace. Similarly, the space after a function name may or may not be required.</source>
          <target state="translated">对于匿名函数，样式指南可能在 &lt;code&gt;function&lt;/code&gt; 关键字后需要一个空格，而其他指南则不指定空格。同样，功能名称后的空格可能会也可能不需要。</target>
        </trans-unit>
        <trans-unit id="d2602aec88a266da02fb6e6a39ad0ff098e617d0" translate="yes" xml:space="preserve">
          <source>Stylistic Issues</source>
          <target state="translated">风格问题</target>
        </trans-unit>
        <trans-unit id="ff5943f72b414aaa4a17049e5bbb2634c96a77ee" translate="yes" xml:space="preserve">
          <source>Sublime Text 3:</source>
          <target state="translated">崇高的文字3。</target>
        </trans-unit>
        <trans-unit id="030c1749f522d7238c0443341747221266a4ca54" translate="yes" xml:space="preserve">
          <source>SublimeLinter-eslint</source>
          <target state="translated">SublimeLinter-eslint</target>
        </trans-unit>
        <trans-unit id="6ecdca9060c4831fb381d364edb6e63d253d9af3" translate="yes" xml:space="preserve">
          <source>Submit the pull request</source>
          <target state="translated">提交拉动请求</target>
        </trans-unit>
        <trans-unit id="583b503cc37a3a03e3fd4c13e083b2095261ea25" translate="yes" xml:space="preserve">
          <source>Submitting a &lt;a href=&quot;pull-requests&quot;&gt;Pull Request&lt;/a&gt;</source>
          <target state="translated">提交&lt;a href=&quot;pull-requests&quot;&gt;拉取请求&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0198b462f882ff4a84867d9897d73f6245ad627e" translate="yes" xml:space="preserve">
          <source>Such as:</source>
          <target state="translated">如:</target>
        </trans-unit>
        <trans-unit id="3374f6918890228b021e90be8c3993cedad5f95b" translate="yes" xml:space="preserve">
          <source>Suggest using &lt;code&gt;const&lt;/code&gt; (prefer-const)</source>
          <target state="translated">建议使用 &lt;code&gt;const&lt;/code&gt; （prefer-const）</target>
        </trans-unit>
        <trans-unit id="d7fda7e48105f11ea112f4b9190ecb9e41f8c30a" translate="yes" xml:space="preserve">
          <source>Suggest using Reflect methods where applicable (prefer-reflect)</source>
          <target state="translated">建议在适用的情况下使用反射方法(首选反射)。</target>
        </trans-unit>
        <trans-unit id="73a842e9ea440efda64fd80635a0d7967bf45ec9" translate="yes" xml:space="preserve">
          <source>Suggest using named capture group in regular expression (prefer-named-capture-group)</source>
          <target state="translated">建议在正则表达式中使用命名的捕获组(prefer-named-capture-group)</target>
        </trans-unit>
        <trans-unit id="28675d097f0b67789bcf9a4622cdbd9ec701d7ad" translate="yes" xml:space="preserve">
          <source>Suggest using spread syntax instead of &lt;code&gt;.apply()&lt;/code&gt;. (prefer-spread)</source>
          <target state="translated">建议使用传播语法而不是 &lt;code&gt;.apply()&lt;/code&gt; 。（优先点差）</target>
        </trans-unit>
        <trans-unit id="3ff97015207b9f4a9f111ed9aa1e794add36b5bd" translate="yes" xml:space="preserve">
          <source>Suggest using template literals instead of string concatenation. (prefer-template)</source>
          <target state="translated">建议使用模板字元而不是字符串连接。(prefer-template)</target>
        </trans-unit>
        <trans-unit id="73db0ab9a4b1b8fe9efa5f9e4facb96f6382eb3d" translate="yes" xml:space="preserve">
          <source>Suggest using the rest parameters instead of &lt;code&gt;arguments&lt;/code&gt; (prefer-rest-params)</source>
          <target state="translated">建议使用rest参数代替 &lt;code&gt;arguments&lt;/code&gt; （prefer-rest-params）</target>
        </trans-unit>
        <trans-unit id="2eb3a8ff27b81cae5e0a8c513b02aac9cbb867f5" translate="yes" xml:space="preserve">
          <source>Suggestion &lt;code&gt;messageId&lt;/code&gt;s</source>
          <target state="translated">建议 &lt;code&gt;messageId&lt;/code&gt; 小号</target>
        </trans-unit>
        <trans-unit id="c916d9f4a8ffd629b95d93d9124a2f7c4e41d96c" translate="yes" xml:space="preserve">
          <source>Suggestions can be tested by defining a &lt;code&gt;suggestions&lt;/code&gt; key on an errors object. The options to check for the suggestions are the following (all are optional): * &lt;code&gt;desc&lt;/code&gt; (string): The suggestion &lt;code&gt;desc&lt;/code&gt; value * &lt;code&gt;messageId&lt;/code&gt; (string): The suggestion &lt;code&gt;messageId&lt;/code&gt; value for suggestions that use &lt;code&gt;messageId&lt;/code&gt;s * &lt;code&gt;output&lt;/code&gt; (string): A code string representing the result of applying the suggestion fix to the input code</source>
          <target state="translated">可以通过在错误对象上定义 &lt;code&gt;suggestions&lt;/code&gt; 键来测试建议。检查建议的选项如下（所有都是可选的）：* &lt;code&gt;desc&lt;/code&gt; （字符串）：建议 &lt;code&gt;desc&lt;/code&gt; 值* &lt;code&gt;messageId&lt;/code&gt; （字符串）：使用 &lt;code&gt;messageId&lt;/code&gt; 的建议的建议 &lt;code&gt;messageId&lt;/code&gt; 值* &lt;code&gt;output&lt;/code&gt; （字符串）：代码字符串，表示将建议修订应用于输入代码的结果</target>
        </trans-unit>
        <trans-unit id="3e50b8781a635b4ef2043bf1c55b61ebd430b444" translate="yes" xml:space="preserve">
          <source>Summary formatter</source>
          <target state="translated">摘要格式化</target>
        </trans-unit>
        <trans-unit id="f728bb607703d5d8840e57203c2748461be1c478" translate="yes" xml:space="preserve">
          <source>Supplied callback names</source>
          <target state="translated">提供的回调名称</target>
        </trans-unit>
        <trans-unit id="9e4bceec48f473d3d0d75720f392d38042d15367" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;scopeManager&lt;/code&gt; was added in ESLint v4.14.0. ESLint versions which support &lt;code&gt;scopeManager&lt;/code&gt; will provide an &lt;code&gt;eslintScopeManager: true&lt;/code&gt; property in &lt;code&gt;parserOptions&lt;/code&gt;, which can be used for feature detection.</source>
          <target state="translated">支持 &lt;code&gt;scopeManager&lt;/code&gt; 在ESLint v4.14.0加入。支持 &lt;code&gt;scopeManager&lt;/code&gt; 的 ESLint版本将在 &lt;code&gt;parserOptions&lt;/code&gt; 中提供 &lt;code&gt;eslintScopeManager: true&lt;/code&gt; 属性，可用于特征检测。</target>
        </trans-unit>
        <trans-unit id="d3be2b0d911459b5814d53e32d33fa047f7443bd" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;visitorKeys&lt;/code&gt; was added in ESLint v4.14.0. ESLint versions which support &lt;code&gt;visitorKeys&lt;/code&gt; will provide an &lt;code&gt;eslintVisitorKeys: true&lt;/code&gt; property in &lt;code&gt;parserOptions&lt;/code&gt;, which can be used for feature detection.</source>
          <target state="translated">支持 &lt;code&gt;visitorKeys&lt;/code&gt; 在ESLint v4.14.0加入。支持 &lt;code&gt;visitorKeys&lt;/code&gt; 的 ESLint版本将在 &lt;code&gt;parserOptions&lt;/code&gt; 中提供 &lt;code&gt;eslintVisitorKeys: true&lt;/code&gt; 属性，可用于特征检测。</target>
        </trans-unit>
        <trans-unit id="998fadcd171167b554bf2c08de343941a1465d16" translate="yes" xml:space="preserve">
          <source>SwitchCase</source>
          <target state="translated">SwitchCase</target>
        </trans-unit>
        <trans-unit id="3253b8236b095baad85b618af991aec7e4b807ea" translate="yes" xml:space="preserve">
          <source>Symbol Objects specification</source>
          <target state="translated">符号对象规格</target>
        </trans-unit>
        <trans-unit id="4b8745ced25b460b42f0ffff119fb7e742454610" translate="yes" xml:space="preserve">
          <source>Symbol Objects specification: Symbol description</source>
          <target state="translated">符号对象规范。符号说明</target>
        </trans-unit>
        <trans-unit id="5c1a0f585424dee7b8554275b5954f6b460c63ba" translate="yes" xml:space="preserve">
          <source>Syntastic</source>
          <target state="translated">Syntastic</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="translated">目录</target>
        </trans-unit>
        <trans-unit id="1bb44ac0ce6df50699361a74b6a78b3bcf6d27e3" translate="yes" xml:space="preserve">
          <source>Tabs: jQuery</source>
          <target state="translated">标签:jQuery</target>
        </trans-unit>
        <trans-unit id="b56e0af9912b57fe07bd022ded51e9d34177d6b8" translate="yes" xml:space="preserve">
          <source>Template literals (MDN)</source>
          <target state="translated">模板字数(MDN)</target>
        </trans-unit>
        <trans-unit id="3760c9870e77d722186e405789b255d1fc4397f6" translate="yes" xml:space="preserve">
          <source>Temporal Dead Zone</source>
          <target state="translated">暂时死区</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="40735bc727ae1db7f555635000520d9343037f8c" translate="yes" xml:space="preserve">
          <source>Ternary Operator</source>
          <target state="translated">三元运算符</target>
        </trans-unit>
        <trans-unit id="73ae0e17a1d0167b6266afc4c66bc3cd1157963b" translate="yes" xml:space="preserve">
          <source>Ternary Operator: &lt;code&gt;?:&lt;/code&gt;</source>
          <target state="translated">三元运算符： &lt;code&gt;?:&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="aa91a5a624af7d8296afa52521f68fe2c22fbe6f" translate="yes" xml:space="preserve">
          <source>Testing Suggestions</source>
          <target state="translated">测试建议</target>
        </trans-unit>
        <trans-unit id="d720305ae3061bec3ca536cef916c4141b41323c" translate="yes" xml:space="preserve">
          <source>TextMate 2:</source>
          <target state="translated">TextMate 2:</target>
        </trans-unit>
        <trans-unit id="9d341ea56c03bc023005aac875b425f57d6428b2" translate="yes" xml:space="preserve">
          <source>That works fine when you don't want a fallthrough, but what if the fallthrough is intentional, there is no way to indicate that in the language. It's considered a best practice to always indicate when a fallthrough is intentional using a comment which matches the &lt;code&gt;/falls?\s?through/i&lt;/code&gt; regular expression:</source>
          <target state="translated">当您不希望遇到失败时，这种方法就可以很好地工作，但是如果失败是故意的，那么就没有办法用语言来表明这一点。始终使用与 &lt;code&gt;/falls?\s?through/i&lt;/code&gt; 正则表达式匹配的注释来始终指示何时故意插入是一种最佳做法：</target>
        </trans-unit>
        <trans-unit id="6ae09c7ad75a7a8f54ad7a675b476d63d3d4806c" translate="yes" xml:space="preserve">
          <source>The &quot;max&quot; object property is optional (default: 1).</source>
          <target state="translated">最大 &quot;对象属性是可选的(默认值:1)。</target>
        </trans-unit>
        <trans-unit id="b16353fd54f2f4a9ee74c0161bfe191f44ad0ae0" translate="yes" xml:space="preserve">
          <source>The 1st option is &lt;code&gt;&quot;asc&quot;&lt;/code&gt; or &lt;code&gt;&quot;desc&quot;&lt;/code&gt;.</source>
          <target state="translated">第一个选项是 &lt;code&gt;&quot;asc&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;desc&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="45905a15b4e98684c96286c7a579ca2e9122122b" translate="yes" xml:space="preserve">
          <source>The 2nd option is an object which has 3 properties.</source>
          <target state="translated">第2个选项是一个对象,它有3个属性。</target>
        </trans-unit>
        <trans-unit id="29ce05a67597e0643fcdc8100c44eaa9d1419d89" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#using-rule-metadata&quot;&gt;Using Rule metadata&lt;/a&gt; example shows how to use the &lt;code&gt;data&lt;/code&gt; object in a custom formatter. See the &lt;a href=&quot;working-with-rules&quot;&gt;Working with Rules&lt;/a&gt; page for more information about rules.</source>
          <target state="translated">该&lt;a href=&quot;#using-rule-metadata&quot;&gt;使用规则的元数据&lt;/a&gt;的示例演示了如何使用 &lt;code&gt;data&lt;/code&gt; 对象的自定义格式。有关&lt;a href=&quot;working-with-rules&quot;&gt;规则&lt;/a&gt;的更多信息，请参见使用规则页面。</target>
        </trans-unit>
        <trans-unit id="5b1896cdaec6c51ba10667d39b756eedd5551922" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../rules/no-undef&quot;&gt;no-undef&lt;/a&gt; rule will warn on variables that are accessed but not defined within the same file. If you are using global variables inside of a file then it's worthwhile to define those globals so that ESLint will not warn about their usage. You can define global variables either using comments inside of a file or in the configuration file.</source>
          <target state="translated">在&lt;a href=&quot;../rules/no-undef&quot;&gt;没有民主基金&lt;/a&gt;规则将警告在被访问的，但在同一个文件中没有定义的变量。如果要在文件内部使用全局变量，则值得定义这些全局变量，以使ESLint不会警告它们的用法。您可以使用文件内部或配置文件中的注释来定义全局变量。</target>
        </trans-unit>
        <trans-unit id="047eac5397259d4ad14b6243aa57de4dae1a614d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://es5.github.io/#x15.8&quot;&gt;ECMAScript 5 specification&lt;/a&gt; makes it clear that both &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;JSON&lt;/code&gt; cannot be invoked:</source>
          <target state="translated">在&lt;a href=&quot;https://es5.github.io/#x15.8&quot;&gt;ECMAScript的5规范&lt;/a&gt;明确规定，既 &lt;code&gt;Math&lt;/code&gt; 和 &lt;code&gt;JSON&lt;/code&gt; 不能调用：</target>
        </trans-unit>
        <trans-unit id="1a35e82f6be72b6be61cd4a886d86c858f228012" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect-object&quot;&gt;ECMAScript 2015 specification&lt;/a&gt; makes it clear that &lt;code&gt;Reflect&lt;/code&gt; cannot be invoked:</source>
          <target state="translated">在&lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect-object&quot;&gt;ECMAScript的2015年规范&lt;/a&gt;明确指出， &lt;code&gt;Reflect&lt;/code&gt; 不能被调用：</target>
        </trans-unit>
        <trans-unit id="81c1cb58f2de5577eeb597a1918e8584414249b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;always&quot;&lt;/code&gt; option (default) enforces the use of &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; in every situation (except when you opt-in to more specific handling of &lt;code&gt;null&lt;/code&gt; [see below]).</source>
          <target state="translated">该 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 选项（默认）强制使用 &lt;code&gt;===&lt;/code&gt; 和 &lt;code&gt;!==&lt;/code&gt; 在任何情况下（当您选择加入更具体的处理，除了 &lt;code&gt;null&lt;/code&gt; [见下文]）。</target>
        </trans-unit>
        <trans-unit id="0234b9d3610f2d5c0d1890c03b252abd7cefab7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;as-needed&quot;, { &quot;requireForBlockBody&quot;: true }&lt;/code&gt; rule is directly inspired by the Airbnb &lt;a href=&quot;https://github.com/airbnb/javascript#arrows--one-arg-parens&quot;&gt;JS Style Guide&lt;/a&gt;.</source>
          <target state="translated">在 &lt;code&gt;&quot;as-needed&quot;, { &quot;requireForBlockBody&quot;: true }&lt;/code&gt; 规则是直接由制作的Airbnb启发&lt;a href=&quot;https://github.com/airbnb/javascript#arrows--one-arg-parens&quot;&gt;JS风格指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d82ce97069386b44a427b995707c718f99559346" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; option will check for redeclaration of built-in globals in global scope.</source>
          <target state="translated">该 &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; 选项将检查在内置全球范围内全局重复声明。</target>
        </trans-unit>
        <trans-unit id="258321fe90655819f22eef5ffbb3f4fe1c32eec4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;empty&quot;&lt;/code&gt; exception concerns empty parentheses, and works the same way as the other exceptions, inverting the first option.</source>
          <target state="translated">在 &lt;code&gt;&quot;empty&quot;&lt;/code&gt; 异常关注空括号，并且其工作方式和其它的异常一样，反转的第一个选项。</target>
        </trans-unit>
        <trans-unit id="3b02d6c73ff7b77ebcbfdce42ad57c73245465b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; configuration contains many of the same default rule settings from 0.x, but not all. These rules are no longer on by default, so you should review your settings to ensure they are still as you expect:</source>
          <target state="translated">该 &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; 的配置包含了许多从0.X相同的默认规则设置，但不是全部。这些规则默认情况下不再处于启用状态，因此您应查看设置以确保它们仍然符合您的期望：</target>
        </trans-unit>
        <trans-unit id="5913f4b04b709c4a37956c8f0a355bb3e59d6045" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; value is an array of string patterns which are considered exceptions to the rule. Please note that exceptions are ignored if the first argument is &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; 值是被认为例外的规则的字符串模式的阵列。请注意，如果第一个参数为 &lt;code&gt;&quot;never&quot;&lt;/code&gt; ，则忽略异常。</target>
        </trans-unit>
        <trans-unit id="e34f8d72a6e0abd2b6cd46f7f53eb977a9c25ad6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; property in a configuration file enables this rule.</source>
          <target state="translated">配置文件中的 &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; 属性启用此规则。</target>
        </trans-unit>
        <trans-unit id="ec76be0c108097d6838a0ac4fbb38e16745647e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;markers&quot;&lt;/code&gt; value is an array of string patterns which are considered markers for docblock-style comments, such as an additional &lt;code&gt;/&lt;/code&gt;, used to denote documentation read by doxygen, vsdoc, etc. which must have additional characters. The &lt;code&gt;&quot;markers&quot;&lt;/code&gt; array will apply regardless of the value of the first argument, e.g. &lt;code&gt;&quot;always&quot;&lt;/code&gt; or &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;&quot;markers&quot;&lt;/code&gt; 值是被认为用于文档块样式的注释标记，诸如附加的字符串模式的阵列 &lt;code&gt;/&lt;/code&gt; ，用于表示文档读取的doxygen，vsdoc等，它们必须有附加的字符。该 &lt;code&gt;&quot;markers&quot;&lt;/code&gt; ，无论第一个参数的值的阵列将适用，例如， &lt;code&gt;&quot;always&quot;&lt;/code&gt; 或者 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5df38b7cf9b33c3fdba20972fad0ce2f4e5d6596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;never&quot;&lt;/code&gt; option ignores &lt;code&gt;const&lt;/code&gt; variable initializations.</source>
          <target state="translated">该 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 选项忽略 &lt;code&gt;const&lt;/code&gt; 变量初始化。</target>
        </trans-unit>
        <trans-unit id="665c133a9b40f2ee21d1a8c214ccb5968d500388" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;property&quot;&lt;/code&gt; option requires the dot to be on the same line as the property.</source>
          <target state="translated">在 &lt;code&gt;&quot;property&quot;&lt;/code&gt; 选项需要的点是在同一行的属性。</target>
        </trans-unit>
        <trans-unit id="a8917282c9e6924d8221f022d420501eebe8dd61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;safe&quot;&lt;/code&gt; option corresponds to the &lt;code&gt;&quot;global&quot;&lt;/code&gt; option if ESLint considers a file to be a &lt;strong&gt;Node.js&lt;/strong&gt; or &lt;strong&gt;CommonJS&lt;/strong&gt; module because the configuration specifies either of the following:</source>
          <target state="translated">在 &lt;code&gt;&quot;safe&quot;&lt;/code&gt; 选项对应于 &lt;code&gt;&quot;global&quot;&lt;/code&gt; 选项，如果ESLint认为一个文件是一个&lt;strong&gt;Node.js的&lt;/strong&gt;或&lt;strong&gt;CommonJS的&lt;/strong&gt;模块，因为配置指定以下任一操作：</target>
        </trans-unit>
        <trans-unit id="335d3d2aadf4b8cd6d235ef1c1ab85d30c55e2fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;smart&quot;&lt;/code&gt; option enforces the use of &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; except for these cases:</source>
          <target state="translated">该 &lt;code&gt;&quot;smart&quot;&lt;/code&gt; 选项强制使用 &lt;code&gt;===&lt;/code&gt; 与 &lt;code&gt;!==&lt;/code&gt; 除了这些情况：</target>
        </trans-unit>
        <trans-unit id="757da32c45a012c497f6f5b85d15dfd792bd342d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; directive applies to the scope in which it appears and all inner scopes contained within that scope. Therefore, using the &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; directive in one of these inner scopes is unnecessary.</source>
          <target state="translated">在 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; 指令适用于它出现的范围以及该范围内包含的所有内部范围。因此，使用 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; 这些内部作用域之一中的指令是不必要的。</target>
        </trans-unit>
        <trans-unit id="34c46639b01057382b6b9a17c0ce73084f411d5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;command line&lt;/a&gt; automatically fixed problems reported by this rule.</source>
          <target state="translated">该 &lt;code&gt;--fix&lt;/code&gt; on选项&lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;命令行&lt;/a&gt;自动修复的问题报道这条规则。</target>
        </trans-unit>
        <trans-unit id="8c7a3a09ba8e134da02e62a2b097beafa2f467a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;../user-guide/command-line-interface#fixing-problems&quot;&gt;command line&lt;/a&gt; can automatically fix some of the problems reported by this rule.</source>
          <target state="translated">该 &lt;code&gt;--fix&lt;/code&gt; on选项&lt;a href=&quot;../user-guide/command-line-interface#fixing-problems&quot;&gt;命令行&lt;/a&gt;可以自动修复一些被这条规则反映的问题。</target>
        </trans-unit>
        <trans-unit id="1ad561df4151ebb76e63f840b52ab0f6ae886e08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a &lt;code&gt;typeof&lt;/code&gt; expression, or if both operands are literals with the same type.</source>
          <target state="translated">该 &lt;code&gt;--fix&lt;/code&gt; 在命令行选项自动修复此规则报告的一些问题。仅当其中一个操作数是 &lt;code&gt;typeof&lt;/code&gt; 表达式，或者两个操作数都是具有相同类型的文字时，问题才得以解决。</target>
        </trans-unit>
        <trans-unit id="cfc6a5d47bc7a83b2362366b0d3b2b186202a528" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line automatically fixes some problems reported by this rule: multiple members on a single line are automatically sorted (e.g. &lt;code&gt;import { b, a } from 'foo.js'&lt;/code&gt; is corrected to &lt;code&gt;import { a, b } from 'foo.js'&lt;/code&gt;), but multiple lines are not reordered.</source>
          <target state="translated">的 &lt;code&gt;--fix&lt;/code&gt; 在命令行上的选项自动修复一些问题报告这样的规则：在一行上的多个构件被自动排序（例如 &lt;code&gt;import { b, a } from 'foo.js'&lt;/code&gt; 被修正为 &lt;code&gt;import { a, b } from 'foo.js'&lt;/code&gt; ），但多行不重新排序。</target>
        </trans-unit>
        <trans-unit id="6ee7ab0d0ef494b690762e7c764488b7d5a3c387" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line does not insert new &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; statements, but only removes unneeded statements.</source>
          <target state="translated">该 &lt;code&gt;--fix&lt;/code&gt; 在命令行选项不会插入新的 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 声明，但只删除不需要的语句。</target>
        </trans-unit>
        <trans-unit id="651165c0cfafa6ed91a01ff2f3a275112628a26a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@author&lt;/code&gt; field gives you credit for having created the file.</source>
          <target state="translated">该 &lt;code&gt;@author&lt;/code&gt; 现场为您提供信贷已经创建的文件。</target>
        </trans-unit>
        <trans-unit id="8d050940abfee32adbac0c6eb00b3c5418a91500" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; method has changed to work more like &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt;. In v2.x, &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; warned about ignored files by default and didn't have a way to opt-out of those warnings whereas &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt; did not warn about ignored files by default and allowed you to opt-in to warning about them. The &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; method now also does not warn about ignored files by default and allows you to opt-in with a new, third argument (a boolean, &lt;code&gt;true&lt;/code&gt; to warn about ignored files and &lt;code&gt;false&lt;/code&gt; to not warn).</source>
          <target state="translated">该 &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; 方法已经改变工作更像 &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt; 。在v2.x中， &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; 默认情况下会警告忽略的文件，并且没有办法选择退出那些警告，而 &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt; 默认情况下不会警告被忽略的文件，并允许您选择来警告他们。该 &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; 方法现在也没有警告默认情况下被忽略的文件，并允许您选择在一个新的，第三个参数（一个布尔值， &lt;code&gt;true&lt;/code&gt; 以警告或忽略的文件和 &lt;code&gt;false&lt;/code&gt; 不警告）。</target>
        </trans-unit>
        <trans-unit id="cd01e52d3805d8a62d247b8499d65fa83701f436" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; is a constructor, and you can create a new instance by passing in the options you want to use. The available options are:</source>
          <target state="translated">该 &lt;code&gt;CLIEngine&lt;/code&gt; 是一个构造函数，你可以通过在你想要使用的选项创建一个新的实例。可用的选项有：</target>
        </trans-unit>
        <trans-unit id="36a91b8e915150c788d9aa4f17ae522dfcd51ab4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; object</source>
          <target state="translated">该 &lt;code&gt;CLIEngine&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="cb04e559741ded700b750c763c58609e67280d3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; type represents the core functionality of the CLI except that it reads nothing from the command line and doesn't output anything by default. Instead, it accepts many (but not all) of the arguments that are passed into the CLI. It reads both configuration and source files as well as managing the environment that is passed into the &lt;code&gt;Linter&lt;/code&gt; object.</source>
          <target state="translated">该 &lt;code&gt;CLIEngine&lt;/code&gt; 类型表示CLI的不同之处在于它读取命令行进行任何操作，默认情况下不输出任何东西的核心功能。相反，它接受传递到CLI的许多（但不是全部）参数。它读取配置文件和源文件，以及管理传递到 &lt;code&gt;Linter&lt;/code&gt; 对象中的环境。</target>
        </trans-unit>
        <trans-unit id="7c04bc333459294a802b327b5827d0068e581953" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt;, &lt;code&gt;SourceCode&lt;/code&gt;, and &lt;code&gt;RuleTester&lt;/code&gt; modules from ESLint's Node.js API are now ES2015 classes. This will not break any documented behavior, but it does have some observable effects (for example, the methods on &lt;code&gt;CLIEngine.prototype&lt;/code&gt; are now non-enumerable).</source>
          <target state="translated">ESLint的Node.js API 的 &lt;code&gt;CLIEngine&lt;/code&gt; ， &lt;code&gt;SourceCode&lt;/code&gt; 和 &lt;code&gt;RuleTester&lt;/code&gt; 模块现在为ES2015类。这不会破坏任何已记录的行为，但是确实具有一些可观察到的效果（例如， &lt;code&gt;CLIEngine.prototype&lt;/code&gt; 上的方法现在不可枚举）。</target>
        </trans-unit>
        <trans-unit id="5c9b20fb5b6252830eb519435c0219003fa37dba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Linter&lt;/code&gt; object</source>
          <target state="translated">该 &lt;code&gt;Linter&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="1d37bb325bb6d585cfb9ad4d89a7dcea80388f30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Linter&lt;/code&gt; object does the actual evaluation of the JavaScript code. It doesn't do any filesystem operations, it simply parses and reports on the code. In particular, the &lt;code&gt;Linter&lt;/code&gt; object does not process configuration objects or files. The &lt;code&gt;Linter&lt;/code&gt; is a constructor, and you can create a new instance by passing in the options you want to use. The available options are:</source>
          <target state="translated">该 &lt;code&gt;Linter&lt;/code&gt; 对象做的JavaScript代码的实际评价。它不执行任何文件系统操作，仅分析和报告代码。特别是， &lt;code&gt;Linter&lt;/code&gt; 对象不处理配置对象或文件。该 &lt;code&gt;Linter&lt;/code&gt; 是一个构造函数，你可以通过在你想要使用的选项创建一个新的实例。可用的选项有：</target>
        </trans-unit>
        <trans-unit id="6b3697f8c0f76c13f38759df3544e6dd3e1c83db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Literal&lt;/code&gt; node must have &lt;code&gt;raw&lt;/code&gt; property.</source>
          <target state="translated">该 &lt;code&gt;Literal&lt;/code&gt; 节点必须有 &lt;code&gt;raw&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="6199c13da52a235cf644776c5b0a32c08d65bf50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Literal&lt;/code&gt; node:</source>
          <target state="translated">该 &lt;code&gt;Literal&lt;/code&gt; 节点：</target>
        </trans-unit>
        <trans-unit id="b0e719a9b8eee0a7e784f9393820037edebb8384" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; constructor is used to create new generic objects in JavaScript, such as:</source>
          <target state="translated">该 &lt;code&gt;Object&lt;/code&gt; 构造函数用于创建在JavaScript新的通用对象，如：</target>
        </trans-unit>
        <trans-unit id="26fa98a82c9b4be9d13ddb25b7b39470825fc8b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Program&lt;/code&gt; node must have &lt;code&gt;tokens&lt;/code&gt; and &lt;code&gt;comments&lt;/code&gt; properties. Both properties are an array of the below Token interface.</source>
          <target state="translated">该 &lt;code&gt;Program&lt;/code&gt; 节点必须有 &lt;code&gt;tokens&lt;/code&gt; 和 &lt;code&gt;comments&lt;/code&gt; 性质。这两个属性都是下面的Token接口的数组。</target>
        </trans-unit>
        <trans-unit id="bcf1f4affa5a7dea7c1e9653f4ab221ce29cdab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Program&lt;/code&gt; node:</source>
          <target state="translated">该 &lt;code&gt;Program&lt;/code&gt; 节点：</target>
        </trans-unit>
        <trans-unit id="70ccd03ac71f531e40460156a41567e273392912" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RegExp&lt;/code&gt; constructor function, e.g., &lt;code&gt;new RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt; or &lt;code&gt;RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;RegExp&lt;/code&gt; 的构造函数，例如， &lt;code&gt;new RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt; 或 &lt;code&gt;RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="18ac7817ce0d8138e79809c23852f9087177a2fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleTester#run()&lt;/code&gt; method is used to run the tests. It should be passed the following arguments:</source>
          <target state="translated">所述 &lt;code&gt;RuleTester#run()&lt;/code&gt; 方法被用来运行测试。应该传递以下参数：</target>
        </trans-unit>
        <trans-unit id="e3f4c9bab5a0c5a3adc959e3a3fdfbbb58b5ebf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleTester&lt;/code&gt; constructor accepts an optional object argument, which can be used to specify defaults for your test cases. For example, if all of your test cases use ES2015, you can set it as a default:</source>
          <target state="translated">该 &lt;code&gt;RuleTester&lt;/code&gt; 构造函数接受一个可选的对象参数，它可以用来指定测试用例的默认值。例如，如果所有测试用例都使用ES2015，则可以将其设置为默认值：</target>
        </trans-unit>
        <trans-unit id="3a5077bac9449562ad14f14c5e522a6fd8f8637a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; constructor strips Unicode BOM. Please note the AST also should be parsed from stripped text.</source>
          <target state="translated">该 &lt;code&gt;SourceCode&lt;/code&gt; 构造条的Unicode BOM。请注意，AST也应从剥离的文本中进行解析。</target>
        </trans-unit>
        <trans-unit id="db75fab00b139e2cb8ebf27b845a2a26e0849306" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; constructor throws an error if the AST is missing any of the required information.</source>
          <target state="translated">该 &lt;code&gt;SourceCode&lt;/code&gt; 构造函数抛出如果AST缺少任何所需信息的错误。</target>
        </trans-unit>
        <trans-unit id="1218e56286f97f65b8425325264eb5a0d40ee097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; object is the main object for getting more information about the source code being linted. You can retrieve the &lt;code&gt;SourceCode&lt;/code&gt; object at any time by using the &lt;code&gt;getSourceCode()&lt;/code&gt; method:</source>
          <target state="translated">的 &lt;code&gt;SourceCode&lt;/code&gt; 对象是获得更多有关的源代码被LINTED的主要对象。您可以随时使用 &lt;code&gt;getSourceCode()&lt;/code&gt; 方法检索 &lt;code&gt;SourceCode&lt;/code&gt; 对象：</target>
        </trans-unit>
        <trans-unit id="479675aca73cae5c11d5d90c4454a08ce8e61d27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; type represents the parsed source code that ESLint executes on. It's used internally in ESLint and is also available so that already-parsed code can be used. You can create a new instance of &lt;code&gt;SourceCode&lt;/code&gt; by passing in the text string representing the code and an abstract syntax tree (AST) in &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt; format (including location information, range information, comments, and tokens):</source>
          <target state="translated">的 &lt;code&gt;SourceCode&lt;/code&gt; 类型表示所解析的源代码，ESLint上执行。它在ESLint内部使用，并且也可用，以便可以使用已经解析的代码。您可以通过传入表示代码的文本字符串和&lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;格式的抽象语法树（AST）（包括位置信息，范围信息，注释和标记）来创建 &lt;code&gt;SourceCode&lt;/code&gt; 的新实例：</target>
        </trans-unit>
        <trans-unit id="0f460ba3a888cb7885538cd22b45cfa2e1993d93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol&lt;/code&gt; function may have an optional description:</source>
          <target state="translated">该 &lt;code&gt;Symbol&lt;/code&gt; 功能可能有一个可选的描述：</target>
        </trans-unit>
        <trans-unit id="2d21736c63a542408cd25bebb0064399dafd3380" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Tag&lt;/code&gt; is one of the following:</source>
          <target state="translated">该 &lt;code&gt;Tag&lt;/code&gt; 是以下情况之一：</target>
        </trans-unit>
        <trans-unit id="4017431bd4ca04209028b2fd7c8155020d0e96be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__iterator__&lt;/code&gt; property was a SpiderMonkey extension to JavaScript that could be used to create custom iterators that are compatible with JavaScript's &lt;code&gt;for in&lt;/code&gt; and &lt;code&gt;for each&lt;/code&gt; constructs. However, this property is now obsolete, so it should not be used. Here's an example of how this used to work:</source>
          <target state="translated">该 &lt;code&gt;__iterator__&lt;/code&gt; 财产是SpiderMonkey的扩展JavaScript代码可用于创建与JavaScript的兼容定制迭代器 &lt;code&gt;for in&lt;/code&gt; ，并 &lt;code&gt;for each&lt;/code&gt; 构造。但是，此属性现在已过时，因此不应使用。这是此工作方式的示例：</target>
        </trans-unit>
        <trans-unit id="5c5ed6ba19e731544b6cd87b09fe8abbca32c289" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_linter&lt;/code&gt; property has been removed in ESLint v5.0, so it is no longer possible to implement rules with this functionality. However, the &lt;a href=&quot;command-line-interface#--report-unused-disable-directives&quot;&gt;&lt;code&gt;--report-unused-disable-directives&lt;/code&gt;&lt;/a&gt; CLI flag can be used to flag unused directive comments.</source>
          <target state="translated">该 &lt;code&gt;_linter&lt;/code&gt; 属性已在ESLint V5.0被删除，因此它不再是可以实现这个功能的规则。但是，-- &lt;a href=&quot;command-line-interface#--report-unused-disable-directives&quot;&gt; &lt;code&gt;--report-unused-disable-directives&lt;/code&gt; &lt;/a&gt; CLI标志可用于标记未使用的指令注释。</target>
        </trans-unit>
        <trans-unit id="e9b2ca0a9deb95b8d07936a6b72107ed5085c1aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_linter&lt;/code&gt; property on rule context objects has been removed</source>
          <target state="translated">规则上下文对象的 &lt;code&gt;_linter&lt;/code&gt; 属性已删除</target>
        </trans-unit>
        <trans-unit id="1540bf038d822cce14da545ed574c51549eac1e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;align&lt;/code&gt; option can take additional configuration through the &lt;code&gt;beforeColon&lt;/code&gt;, &lt;code&gt;afterColon&lt;/code&gt;, &lt;code&gt;mode&lt;/code&gt;, and &lt;code&gt;on&lt;/code&gt; options.</source>
          <target state="translated">所述 &lt;code&gt;align&lt;/code&gt; 选项可以通过采取额外的配置 &lt;code&gt;beforeColon&lt;/code&gt; ， &lt;code&gt;afterColon&lt;/code&gt; ， &lt;code&gt;mode&lt;/code&gt; ，和 &lt;code&gt;on&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="d05ba21959dd3bd33b13539a51873b945545c638" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;allow&lt;/code&gt; option is an array of identifier names for which shadowing is allowed. For example, &lt;code&gt;&quot;resolve&quot;&lt;/code&gt;, &lt;code&gt;&quot;reject&quot;&lt;/code&gt;, &lt;code&gt;&quot;done&quot;&lt;/code&gt;, &lt;code&gt;&quot;cb&quot;&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;allow&lt;/code&gt; 选择是，其遮蔽允许标识符名称的数组。例如， &lt;code&gt;&quot;resolve&quot;&lt;/code&gt; ， &lt;code&gt;&quot;reject&quot;&lt;/code&gt; ， &lt;code&gt;&quot;done&quot;&lt;/code&gt; ， &lt;code&gt;&quot;cb&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a3afd6725b2244693e0d6e156a1e44afd3600d41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;args&lt;/code&gt; option has three settings:</source>
          <target state="translated">该 &lt;code&gt;args&lt;/code&gt; 选项有三个设置：</target>
        </trans-unit>
        <trans-unit id="4cadc8103349def3aa303140050911f6d8949c38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;argsIgnorePattern&lt;/code&gt; option specifies exceptions not to check for usage: arguments whose names match a regexp pattern. For example, variables whose names begin with an underscore.</source>
          <target state="translated">该 &lt;code&gt;argsIgnorePattern&lt;/code&gt; 选项指定的异常不检查用法：参数的名字是正规表达式匹配。例如，名称以下划线开头的变量。</target>
        </trans-unit>
        <trans-unit id="6bb74f27a7dcda830e7e3515e710fd44a61861b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bind()&lt;/code&gt; method is used to create functions with specific &lt;code&gt;this&lt;/code&gt; values and, optionally, binds arguments to specific values. When used to specify the value of &lt;code&gt;this&lt;/code&gt;, it's important that the function actually uses &lt;code&gt;this&lt;/code&gt; in its function body. For example:</source>
          <target state="translated">的 &lt;code&gt;bind()&lt;/code&gt; 方法用于具有特定创建函数 &lt;code&gt;this&lt;/code&gt; 值和任选地，结合参数的特定值。当用于指定 &lt;code&gt;this&lt;/code&gt; 的值时，重要的是函数必须在其函数主体中实际使用 &lt;code&gt;this&lt;/code&gt; 。例如：</target>
        </trans-unit>
        <trans-unit id="23c983ff96826f2c7de4f17b4756b8bba9663c70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;block-scoped-var&lt;/code&gt; rule generates warnings when variables are used outside of the block in which they were defined. This emulates C-style block scope.</source>
          <target state="translated">当在定义变量的块之外使用变量时， &lt;code&gt;block-scoped-var&lt;/code&gt; 规则将生成警告。这模拟了C样式的块作用域。</target>
        </trans-unit>
        <trans-unit id="53bdd73b3413849fa66b3556c625138c24847f8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;break outer&lt;/code&gt; statement ensures that this code will not result in an infinite loop because control is returned to the next statement after the &lt;code&gt;outer&lt;/code&gt; label was applied. If this statement was changed to be just &lt;code&gt;break&lt;/code&gt;, control would flow back to the outer &lt;code&gt;while&lt;/code&gt; statement and an infinite loop would result.</source>
          <target state="translated">该 &lt;code&gt;break outer&lt;/code&gt; 语句确保该代码不会导致无限循环，因为后控制返回到下一条语句 &lt;code&gt;outer&lt;/code&gt; 应用的标签。如果将此语句更改为 &lt;code&gt;break&lt;/code&gt; ，控制权将流回外部 &lt;code&gt;while&lt;/code&gt; 语句，从而导致无限循环。</target>
        </trans-unit>
        <trans-unit id="e35e957bc5c45db7810cd6dc9b85c777f96b5c7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;browser&lt;/code&gt; environment has many built-in global variables (for example, &lt;code&gt;top&lt;/code&gt;). Some of built-in global variables cannot be redeclared.</source>
          <target state="translated">在 &lt;code&gt;browser&lt;/code&gt; 环境中有很多内置的全局变量（例如， &lt;code&gt;top&lt;/code&gt; ）。某些内置全局变量无法重新声明。</target>
        </trans-unit>
        <trans-unit id="9c91130ea2cd4ecd093fc52993fc6956e053783c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;builtinGlobals&lt;/code&gt; option is &lt;code&gt;false&lt;/code&gt; by default. If it is &lt;code&gt;true&lt;/code&gt;, the rule prevents shadowing of built-in global variables: &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, and so on.</source>
          <target state="translated">默认情况下， &lt;code&gt;builtinGlobals&lt;/code&gt; 选项为 &lt;code&gt;false&lt;/code&gt; 。如果为 &lt;code&gt;true&lt;/code&gt; ，则该规则将防止隐藏全局全局变量： &lt;code&gt;Object&lt;/code&gt; ， &lt;code&gt;Array&lt;/code&gt; ， &lt;code&gt;Number&lt;/code&gt; 等。</target>
        </trans-unit>
        <trans-unit id="2e369ffae5876263cbc79c574ac64d2933232f47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;call/apply/bind&lt;/code&gt; method of the function is called directly.</source>
          <target state="translated">该函数的 &lt;code&gt;call/apply/bind&lt;/code&gt; 方法被直接调用。</target>
        </trans-unit>
        <trans-unit id="980901839cc98d894fc636088c44f1085352a1ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;caughtErrors&lt;/code&gt; option is used for &lt;code&gt;catch&lt;/code&gt; block arguments validation.</source>
          <target state="translated">该 &lt;code&gt;caughtErrors&lt;/code&gt; 选项用于 &lt;code&gt;catch&lt;/code&gt; 块参数验证。</target>
        </trans-unit>
        <trans-unit id="ce4f2ac1f670fbb48541447196e9d9315225fdf2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;caughtErrorsIgnorePattern&lt;/code&gt; option specifies exceptions not to check for usage: catch arguments whose names match a regexp pattern. For example, variables whose names begin with a string 'ignore'.</source>
          <target state="translated">该 &lt;code&gt;caughtErrorsIgnorePattern&lt;/code&gt; 选项指定的异常不检查用法：捕捉参数名称匹配一个正规表达式模式。例如，名称以字符串'ignore'开头的变量。</target>
        </trans-unit>
        <trans-unit id="8b0cd31aec7aa29af2f5a3abfb81a77e7a641899" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cli&lt;/code&gt; object</source>
          <target state="translated">该 &lt;code&gt;cli&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="6a94eb63df1e6ac352e9b186b0e6694f22a6e525" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cli&lt;/code&gt; object is the API for the command line interface. Literally, the &lt;code&gt;bin/eslint.js&lt;/code&gt; file simply passes arguments to the &lt;code&gt;cli&lt;/code&gt; object and then sets &lt;code&gt;process.exitCode&lt;/code&gt; to the returned exit code.</source>
          <target state="translated">该 &lt;code&gt;cli&lt;/code&gt; 对象是命令行界面的API。从字面上看， &lt;code&gt;bin/eslint.js&lt;/code&gt; 文件只是将参数传递给 &lt;code&gt;cli&lt;/code&gt; 对象，然后将 &lt;code&gt;process.exitCode&lt;/code&gt; 设置为返回的退出代码。</target>
        </trans-unit>
        <trans-unit id="cdf300be717f0ef1b9048b6ac9761ea3a6565f01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;comma-dangle&lt;/code&gt; rule is now more strict by default</source>
          <target state="translated">默认情况下， &lt;code&gt;comma-dangle&lt;/code&gt; 规则现在更加严格</target>
        </trans-unit>
        <trans-unit id="b16f7c12a77c8c69c18c6cd7c66a8ffbf55f6b7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context.getScope()&lt;/code&gt; method now returns more proper scopes</source>
          <target state="translated">该 &lt;code&gt;context.getScope()&lt;/code&gt; 方法现在返回更适当的范围</target>
        </trans-unit>
        <trans-unit id="922325a01666733ad05e06be2a7e01ae31e121a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; object contains additional functionality that is helpful for rules to do their jobs. As the name implies, the &lt;code&gt;context&lt;/code&gt; object contains information that is relevant to the context of the rule. The &lt;code&gt;context&lt;/code&gt; object has the following properties:</source>
          <target state="translated">该 &lt;code&gt;context&lt;/code&gt; 对象包含的附加功能是有帮助的规则来完成他们的工作。顾名思义， &lt;code&gt;context&lt;/code&gt; 对象包含与规则的上下文相关的信息。所述 &lt;code&gt;context&lt;/code&gt; 对象具有以下属性：</target>
        </trans-unit>
        <trans-unit id="42b1848493047b28e69ceb4cc9991185d8cabd5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;continue&lt;/code&gt; statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration. When used incorrectly it makes code less testable, less readable and less maintainable. Structured control flow statements such as &lt;code&gt;if&lt;/code&gt; should be used instead.</source>
          <target state="translated">将 &lt;code&gt;continue&lt;/code&gt; 在当前或标签的循环的当前迭代的陈述语句终止执行，并继续下一个迭代循环的执行。如果使用不当，它将使代码的可测试性，可读性和可维护性降低。应该使用结构化的控制流语句，例如 &lt;code&gt;if&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b85184b855dad09a62d467252a42e39fc124a249" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; Argument</source>
          <target state="translated">该 &lt;code&gt;data&lt;/code&gt; 论证</target>
        </trans-unit>
        <trans-unit id="78eb3b7cfb10f4790691c3c7134c3e3e580dff94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;debugger&lt;/code&gt; statement is used to tell the executing JavaScript environment to stop execution and start up a debugger at the current point in the code. This has fallen out of favor as a good practice with the advent of modern debugging and development tools. Production code should definitely not contain &lt;code&gt;debugger&lt;/code&gt;, as it will cause the browser to stop executing code and open an appropriate debugger.</source>
          <target state="translated">在 &lt;code&gt;debugger&lt;/code&gt; 语句用来告诉执行JavaScript环境停止执行，并在代码中的当前点启动调试器。随着现代调试和开发工具的出现，这已不再是一种好的做法。生产代码绝对不应包含 &lt;code&gt;debugger&lt;/code&gt; ，因为它将导致浏览器停止执行代码并打开适当的调试器。</target>
        </trans-unit>
        <trans-unit id="64766836102f731f14e0abe461d47d745b9f3795" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">语句的 &lt;code&gt;do&lt;/code&gt; 类应具有以下形式：</target>
        </trans-unit>
        <trans-unit id="0d9bf1e7a06807b0d9dd6dee731608e28dac63d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmaFeatures.modules&lt;/code&gt; flag has been replaced by a &lt;code&gt;sourceType&lt;/code&gt; property under &lt;code&gt;parserOptions&lt;/code&gt; which can be set to &lt;code&gt;&quot;script&quot;&lt;/code&gt; (default) or &lt;code&gt;&quot;module&quot;&lt;/code&gt; for ES6 modules.</source>
          <target state="translated">所述 &lt;code&gt;ecmaFeatures.modules&lt;/code&gt; 标志已被替换为 &lt;code&gt;sourceType&lt;/code&gt; 的下属性 &lt;code&gt;parserOptions&lt;/code&gt; 其可以被设置为 &lt;code&gt;&quot;script&quot;&lt;/code&gt; （默认）或 &lt;code&gt;&quot;module&quot;&lt;/code&gt; 用于ES6模块。</target>
        </trans-unit>
        <trans-unit id="114daf2c10a876d1a0119d1127fb9645cebbe320" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmaFeatures&lt;/code&gt; property is now under a top-level &lt;code&gt;parserOptions&lt;/code&gt; property.</source>
          <target state="translated">该 &lt;code&gt;ecmaFeatures&lt;/code&gt; 属性现在是下一个顶级 &lt;code&gt;parserOptions&lt;/code&gt; 财产。</target>
        </trans-unit>
        <trans-unit id="e77d2b26470f6a64bf6847f6dfa1ccf21481c369" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmaVersion&lt;/code&gt; parser option is set to something other than a number, such as the string &lt;code&gt;&quot;2015&quot;&lt;/code&gt;. (Previously, a non-number option would simply be ignored.)</source>
          <target state="translated">该 &lt;code&gt;ecmaVersion&lt;/code&gt; 解析器选项设置为比一些其他的东西，如字符串 &lt;code&gt;&quot;2015&quot;&lt;/code&gt; 。（以前，非数字选项将被忽略。）</target>
        </trans-unit>
        <trans-unit id="e8001be05979a363d68c0b97cd9a4ec677d66ab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint --init&lt;/code&gt; command can create a configuration so you can extend a popular style guide (for example, &lt;code&gt;eslint-config-standard&lt;/code&gt;).</source>
          <target state="translated">所述 &lt;code&gt;eslint --init&lt;/code&gt; 命令可以创建一个配置，以便可以延长一个流行的款式引导（例如， &lt;code&gt;eslint-config-standard&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="76fc19e1d805a61118a2c1a81a45040f447d9365" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint --init&lt;/code&gt; command can create a configuration so you can extend the recommended rules.</source>
          <target state="translated">该 &lt;code&gt;eslint --init&lt;/code&gt; 命令可以创建一个配置，这样可以延长建议的规则。</target>
        </trans-unit>
        <trans-unit id="c4229b7a6eefed924206c9eb78fcfba7b8bfcf1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint-plugin-&lt;/code&gt; prefix can be omitted for non-scoped packages</source>
          <target state="translated">该 &lt;code&gt;eslint-plugin-&lt;/code&gt; 前缀可以为非范围的包被忽略</target>
        </trans-unit>
        <trans-unit id="61707a8cc213e8d436fdfb7b834fbdfa71c295b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint-tester&lt;/code&gt; module, which has long been the primary tester for ESLint rules, has now been moved into the &lt;code&gt;eslint&lt;/code&gt; module. This was the result of a difficult relationship between these two modules that created circular dependencies and was causing a lot of problems in rule tests. Moving the tester into the &lt;code&gt;eslint&lt;/code&gt; module fixed a lot of those issues.</source>
          <target state="translated">所述 &lt;code&gt;eslint-tester&lt;/code&gt; 模块，这早已为ESLint规则的主测试仪，现已移入 &lt;code&gt;eslint&lt;/code&gt; 模块。这是由于这两个模块之间的困难关系导致循环依赖，并在规则测试中引起了很多问题。将测试仪移到 &lt;code&gt;eslint&lt;/code&gt; 模块中解决了许多问题。</target>
        </trans-unit>
        <trans-unit id="8900c3358f2163358ec0b84e6c957c7b7bbbb087" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint.linter&lt;/code&gt; object (deprecated) is an instance of the &lt;code&gt;Linter&lt;/code&gt; class as defined &lt;a href=&quot;#linter&quot;&gt;above&lt;/a&gt;. &lt;code&gt;eslint.linter&lt;/code&gt; exists for backwards compatibility, but we do not recommend using it because any mutations to it are shared among every module that uses &lt;code&gt;eslint&lt;/code&gt;. Instead, please create your own instance of &lt;code&gt;eslint.Linter&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;eslint.linter&lt;/code&gt; 对象（不推荐）是实例 &lt;code&gt;Linter&lt;/code&gt; 定义类&lt;a href=&quot;#linter&quot;&gt;以上&lt;/a&gt;。 &lt;code&gt;eslint.linter&lt;/code&gt; 是为了向后兼容而存在的，但我们不建议您使用它，因为在使用 &lt;code&gt;eslint&lt;/code&gt; 的每个模块之间都共享对它的任何突变。相反，请创建自己的 &lt;code&gt;eslint.Linter&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="d379a4d77b2607390afe7d33df57381bc7286ee9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint.linter&lt;/code&gt; property is now non-enumerable</source>
          <target state="translated">该 &lt;code&gt;eslint.linter&lt;/code&gt; 属性现在不可枚举</target>
        </trans-unit>
        <trans-unit id="a9a4221ba818f86c812a9ad87857f70725c68eaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; scope analysis property has been removed</source>
          <target state="translated">该 &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; 范围分析属性已被删除</target>
        </trans-unit>
        <trans-unit id="127d896dfbc583589aff8498ff51854129f845e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exceptMethods&lt;/code&gt; option allows you to pass an array of method names for which you would like to ignore warnings. For example, you might have a spec from an external library that requires you to overwrite a method as a regular function (and not as a static method) and does not use &lt;code&gt;this&lt;/code&gt; inside the function body. In this case, you can add that method to ignore in the warnings.</source>
          <target state="translated">该 &lt;code&gt;exceptMethods&lt;/code&gt; 选项允许你通过了，你想忽略警告的方法名称的数组。例如，您可能有一个来自外部库的规范，该规范要求您将方法覆盖为常规函数（而不是静态方法），并且不要在函数体内使用 &lt;code&gt;this&lt;/code&gt; 方法。在这种情况下，您可以添加该方法以在警告中忽略。</target>
        </trans-unit>
        <trans-unit id="8077695416ecc34868ba7b9a8633341faa182787" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exceptions&lt;/code&gt; option allows you to pass an array of methods names you'd like to continue to use in the old style.</source>
          <target state="translated">该 &lt;code&gt;exceptions&lt;/code&gt; 选项允许你传递方法的名称数组你想继续在旧的风格来使用。</target>
        </trans-unit>
        <trans-unit id="252d44a66cbab7b2a0ad26d5562589f321a9a54d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option has been deprecated</source>
          <target state="translated">该 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; 选项已被弃用</target>
        </trans-unit>
        <trans-unit id="837260e2c2d2bb0e44d170f7a8580e9382461154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can be &lt;code&gt;&quot;eslint:all&quot;&lt;/code&gt; to enable all core rules in the currently installed version of ESLint. The set of core rules can change at any minor or major version of ESLint.</source>
          <target state="translated">该 &lt;code&gt;extends&lt;/code&gt; 属性值可以是 &lt;code&gt;&quot;eslint:all&quot;&lt;/code&gt; ，以使在ESLint当前安装的版本中的所有核心规则。核心规则集可以在ESLint的任何次要或主要版本上更改。</target>
        </trans-unit>
        <trans-unit id="6b1c15d923b6c7281b7fb8242da0395d1224b9fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can be an absolute or relative path to a base &lt;a href=&quot;#using-configuration-files&quot;&gt;configuration file&lt;/a&gt;. ESLint resolves a relative path to a base configuration file relative to the configuration file that uses it.</source>
          <target state="translated">的 &lt;code&gt;extends&lt;/code&gt; 属性值可以是在基座的绝对或相对路径&lt;a href=&quot;#using-configuration-files&quot;&gt;的配置文件&lt;/a&gt;。ESLint解析基本配置文件相对于使用它的配置文件的相对路径。</target>
        </trans-unit>
        <trans-unit id="5fa785db2037479c7f03a5b52934be5b58f71e97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can consist of:</source>
          <target state="translated">该 &lt;code&gt;extends&lt;/code&gt; 属性值可以包括：</target>
        </trans-unit>
        <trans-unit id="003522290cdebe1b2fbd30a1f0cbdc59c0904961" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can omit the &lt;code&gt;eslint-config-&lt;/code&gt; prefix of the package name.</source>
          <target state="translated">该 &lt;code&gt;extends&lt;/code&gt; 属性值可以省略 &lt;code&gt;eslint-config-&lt;/code&gt; 包名称的前缀。</target>
        </trans-unit>
        <trans-unit id="0a2b44eee9bddc2d60e480fea08a5f4ceb3bdae2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value is either:</source>
          <target state="translated">该 &lt;code&gt;extends&lt;/code&gt; 属性值可以是：</target>
        </trans-unit>
        <trans-unit id="1cb5e8d9c216034fade7c978ad13805a9c312bc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fixer&lt;/code&gt; object has the following methods:</source>
          <target state="translated">该 &lt;code&gt;fixer&lt;/code&gt; 对象有以下方法：</target>
        </trans-unit>
        <trans-unit id="a3edba7f97a325dd3428ee6498ff770178efa766" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">语句的 &lt;code&gt;for&lt;/code&gt; 类应具有以下形式：</target>
        </trans-unit>
        <trans-unit id="d49f70042d3e336aa930fa3d8a67c5746bfb590f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;global&lt;/code&gt; property in the &lt;code&gt;linter.verify()&lt;/code&gt; API is no longer supported</source>
          <target state="translated">不再支持 &lt;code&gt;linter.verify()&lt;/code&gt; API中的 &lt;code&gt;global&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="21aab0ed37e0be4d941cff2e17dc050a87694419" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hoist&lt;/code&gt; option has three settings:</source>
          <target state="translated">该 &lt;code&gt;hoist&lt;/code&gt; 选项有三个设置：</target>
        </trans-unit>
        <trans-unit id="462609b8b9ea4983f2b2d00bf8596dc0d30d89b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">语句的 &lt;code&gt;if&lt;/code&gt; 类应具有以下形式：</target>
        </trans-unit>
        <trans-unit id="0d8118a2bec951d156bb19df18c746496e386f70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignorePattern&lt;/code&gt; object takes a string value, which is used as a regular expression applied to the first word of a comment.</source>
          <target state="translated">所述 &lt;code&gt;ignorePattern&lt;/code&gt; 对象需要一个字符串值，作为施加到一个注释的第一个字中的正则表达式，其被使用。</target>
        </trans-unit>
        <trans-unit id="ae972c6712702d048215995c50a75a39891b07a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignorePatterns&lt;/code&gt; property affects only the directory that the config file placed.</source>
          <target state="translated">该 &lt;code&gt;ignorePatterns&lt;/code&gt; 属性只影响配置文件放置的目录。</target>
        </trans-unit>
        <trans-unit id="b5e9061da183286584b4711c4a63bfba8da71be2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignoreRestSiblings&lt;/code&gt; option is a boolean (default: &lt;code&gt;false&lt;/code&gt;). Using a &lt;a href=&quot;https://github.com/tc39/proposal-object-rest-spread&quot;&gt;Rest Property&lt;/a&gt; it is possible to &quot;omit&quot; properties from an object, but by default the sibling properties are marked as &quot;unused&quot;. With this option enabled the rest property's siblings are ignored.</source>
          <target state="translated">该 &lt;code&gt;ignoreRestSiblings&lt;/code&gt; 选项是一个布尔值（默认值： &lt;code&gt;false&lt;/code&gt; ）。使用&lt;a href=&quot;https://github.com/tc39/proposal-object-rest-spread&quot;&gt;Rest属性&lt;/a&gt;可以从对象中&amp;ldquo;忽略&amp;rdquo;属性，但是默认情况下，同级属性被标记为&amp;ldquo;未使用&amp;rdquo;。启用此选项后，将忽略rest属性的同级。</target>
        </trans-unit>
        <trans-unit id="85cb7a860cbd820f9d90f12cf28b759ca78ece90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;indent&lt;/code&gt; rule is more strict</source>
          <target state="translated">该 &lt;code&gt;indent&lt;/code&gt; 规则更为严格</target>
        </trans-unit>
        <trans-unit id="7da93c489e9178d0f216041fee0bdfd9d92b14f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main&lt;/code&gt; entry should be the JavaScript file implementing your custom formatter.</source>
          <target state="translated">在 &lt;code&gt;main&lt;/code&gt; 入口应该是实现您的自定义格式的JavaScript文件。</target>
        </trans-unit>
        <trans-unit id="b638eabe7da26a08a3d704c7037df4934e4bc5a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max-statements&lt;/code&gt; rule allows you to specify the maximum number of statements allowed in a function.</source>
          <target state="translated">在 &lt;code&gt;max-statements&lt;/code&gt; 规则允许您指定允许在函数语句的最大数量。</target>
        </trans-unit>
        <trans-unit id="a13c3e797d7391ff2cce66ebe8056f876d975eb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;message&lt;/code&gt; Object</source>
          <target state="translated">该 &lt;code&gt;message&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="7cfb0e1495e0c320f6699634a8ccde094dae7f26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;multiLine&lt;/code&gt; and &lt;code&gt;align&lt;/code&gt; options can differ, which allows for fine-tuned control over the &lt;code&gt;key-spacing&lt;/code&gt; of your files. &lt;code&gt;align&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; inherit from &lt;code&gt;multiLine&lt;/code&gt; if &lt;code&gt;align&lt;/code&gt; is configured as an object.</source>
          <target state="translated">该 &lt;code&gt;multiLine&lt;/code&gt; 和 &lt;code&gt;align&lt;/code&gt; 选项可以不同，它允许对微调控制 &lt;code&gt;key-spacing&lt;/code&gt; 您的文件。 &lt;code&gt;align&lt;/code&gt; 将&lt;strong&gt;不&lt;/strong&gt;从继承 &lt;code&gt;multiLine&lt;/code&gt; 如果 &lt;code&gt;align&lt;/code&gt; 被配置为一个对象。</target>
        </trans-unit>
        <trans-unit id="d09e48c81deff2fe74829687d8d386203bf2e1ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new Promise&lt;/code&gt; constructor accepts an &lt;em&gt;executor&lt;/em&gt; function as an argument, which has &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; parameters that can be used to control the state of the created Promise. For example:</source>
          <target state="translated">该 &lt;code&gt;new Promise&lt;/code&gt; 构造函数接受的&lt;em&gt;执行&lt;/em&gt;功能作为一个参数，其具有 &lt;code&gt;resolve&lt;/code&gt; 和 &lt;code&gt;reject&lt;/code&gt; ，可以用来控制所创建的无极的状态参数。例如：</target>
        </trans-unit>
        <trans-unit id="098f4a5cbac65ca4cffcaba3c9ba560edcebc8fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; operator in JavaScript creates a new instance of a particular type of object. That type of object is represented by a constructor function. Since constructor functions are just regular functions, the only defining characteristic is that &lt;code&gt;new&lt;/code&gt; is being used as part of the call. Native JavaScript functions begin with an uppercase letter to distinguish those functions that are to be used as constructors from functions that are not. Many style guides recommend following this pattern to more easily determine which functions are to be used as constructors.</source>
          <target state="translated">JavaScript中的 &lt;code&gt;new&lt;/code&gt; 运算符会创建特定类型对象的新实例。该类型的对象由构造函数表示。由于构造函数只是常规函数，因此唯一的定义特征是将 &lt;code&gt;new&lt;/code&gt; 用作调用的一部分。本机JavaScript函数以大写字母开头，以区分那些将用作构造函数的函数与未使用的函数。许多样式指南建议遵循此模式，以便更轻松地确定将哪些函数用作构造函数。</target>
        </trans-unit>
        <trans-unit id="4b9844e9b711c0c78b88e1df4f24b4e7ffcc90b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-confusing-arrow&lt;/code&gt; rule is now more lenient by default</source>
          <target state="translated">默认情况下， &lt;code&gt;no-confusing-arrow&lt;/code&gt; 规则现在更加宽松</target>
        </trans-unit>
        <trans-unit id="6d1a64da4353dccbefcdf2ee522647ae870b3b07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-eq-null&lt;/code&gt; rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to &lt;code&gt;null&lt;/code&gt; only match &lt;code&gt;null&lt;/code&gt;, and not also &lt;code&gt;undefined&lt;/code&gt;. As such it will flag comparisons to null when using &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;no-eq-null&lt;/code&gt; 规则旨在通过确保比较，以减少潜在的错误和不必要的行为 &lt;code&gt;null&lt;/code&gt; 只匹配 &lt;code&gt;null&lt;/code&gt; ，而不是还 &lt;code&gt;undefined&lt;/code&gt; 。这样，当使用 &lt;code&gt;==&lt;/code&gt; 和 &lt;code&gt;!=&lt;/code&gt; 时，它将比较标记为null 。</target>
        </trans-unit>
        <trans-unit id="2cf7599f9ca5e81f4584651a246f272a61b94bee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-magic-numbers&lt;/code&gt; rule aims to make code more readable and refactoring easier by ensuring that special numbers are declared as constants to make their meaning explicit.</source>
          <target state="translated">在 &lt;code&gt;no-magic-numbers&lt;/code&gt; 规则的目的是使代码的可读性和重构，通过确保特殊号码被声明为常量，使他们的意思是明确的容易。</target>
        </trans-unit>
        <trans-unit id="584d3863241e3dd7bef2bc890fe46f1e0dacede5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-multi-spaces&lt;/code&gt; rule is more strict by default</source>
          <target state="translated">默认情况下， &lt;code&gt;no-multi-spaces&lt;/code&gt; 规则更加严格</target>
        </trans-unit>
        <trans-unit id="22f51e16b3d2fa232175e558615aef4ba7d91884" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-nested-ternary&lt;/code&gt; rule disallows nested ternary expressions.</source>
          <target state="translated">在 &lt;code&gt;no-nested-ternary&lt;/code&gt; 规则不允许嵌套的三元运算表达式。</target>
        </trans-unit>
        <trans-unit id="116b22d947fe1ce535309217a88923e033d53bfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-redeclare&lt;/code&gt; rule is now more strict by default</source>
          <target state="translated">默认情况下， &lt;code&gt;no-redeclare&lt;/code&gt; 规则现在更加严格</target>
        </trans-unit>
        <trans-unit id="0aeabea2c1edc1a249245bfe09f229e42dd63ee8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;npm run perf&lt;/code&gt; command gives a high-level overview of ESLint running time with default rules (&lt;code&gt;eslint:recommended&lt;/code&gt;) enabled.</source>
          <target state="translated">在 &lt;code&gt;npm run perf&lt;/code&gt; 命令给出的默认规则（ESLint运行时间的一个高度概括 &lt;code&gt;eslint:recommended&lt;/code&gt; ）启用。</target>
        </trans-unit>
        <trans-unit id="02b6ae240bb49fb262b6c6c5aa5ce3a0f704dc54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onlyEquality&lt;/code&gt; option allows a superset of the exceptions which &lt;code&gt;exceptRange&lt;/code&gt; allows, thus both options are not useful together.</source>
          <target state="translated">所述 &lt;code&gt;onlyEquality&lt;/code&gt; 选项允许该例外的超集 &lt;code&gt;exceptRange&lt;/code&gt; 允许，从而这两个选项是没有用在一起。</target>
        </trans-unit>
        <trans-unit id="3664b7a3e8295f10c165e69c19822430ecc4a8ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; property must be an array of options. This gets passed through to &lt;code&gt;context.options&lt;/code&gt; in the rule.</source>
          <target state="translated">的 &lt;code&gt;options&lt;/code&gt; 属性必须是一组选项。这将传递到规则中的 &lt;code&gt;context.options&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="138b40a2090025ead37bb2b810503f00fc28051a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;padded-blocks&lt;/code&gt; rule is more strict by default</source>
          <target state="translated">默认情况下， &lt;code&gt;padded-blocks&lt;/code&gt; 规则更严格</target>
        </trans-unit>
        <trans-unit id="8d637daeacbd8ce09ca4965da79910941e8f067c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; property of AST nodes is now set before rules start running</source>
          <target state="translated">现在，在规则开始运行之前已设置AST节点的 &lt;code&gt;parent&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="853c13962a666c12683d5753aa639223e6ad5a5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; property of all nodes must be rewriteable. ESLint sets each node's &lt;code&gt;parent&lt;/code&gt; property to its parent node while traversing, before any rules have access to the AST.</source>
          <target state="translated">所有节点的 &lt;code&gt;parent&lt;/code&gt; 属性必须是可重写的。在任何规则都可以访问AST之前，ESLint会在遍历时将每个节点的 &lt;code&gt;parent&lt;/code&gt; 属性设置为其父节点。</target>
        </trans-unit>
        <trans-unit id="944a63b184acd73eda9811179639d595d02aa85d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseInt()&lt;/code&gt; and &lt;code&gt;Number.parseInt()&lt;/code&gt; functions can be used to turn binary, octal, and hexadecimal strings into integers. As binary, octal, and hexadecimal literals are supported in ES6, this rule encourages use of those numeric literals instead of &lt;code&gt;parseInt()&lt;/code&gt; or &lt;code&gt;Number.parseInt()&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;parseInt()&lt;/code&gt; 和 &lt;code&gt;Number.parseInt()&lt;/code&gt; 函数可以被用来打开的二进制，八进制，和十六进制字符串到整数。由于ES6支持二进制，八进制和十六进制文字，因此此规则鼓励使用这些数字文字而不是 &lt;code&gt;parseInt()&lt;/code&gt; 或 &lt;code&gt;Number.parseInt()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6a8b14c45ea844b14e7b8898d1ed3a957925154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;plugins&lt;/code&gt;&lt;a href=&quot;#configuring-plugins&quot;&gt;property value&lt;/a&gt; can omit the &lt;code&gt;eslint-plugin-&lt;/code&gt; prefix of the package name.</source>
          <target state="translated">该 &lt;code&gt;plugins&lt;/code&gt; &lt;a href=&quot;#configuring-plugins&quot;&gt;的属性值&lt;/a&gt;可以省略 &lt;code&gt;eslint-plugin-&lt;/code&gt; 包名称的前缀。</target>
        </trans-unit>
        <trans-unit id="379ae11932b2a6155c0dd857a96208194dd56ffa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;position&lt;/code&gt; option has two settings:</source>
          <target state="translated">该 &lt;code&gt;position&lt;/code&gt; 选项有两个设置：</target>
        </trans-unit>
        <trans-unit id="c999b4122281345d94d147575183f7bf02e84b31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.env&lt;/code&gt; object in Node.js is used to store deployment/configuration parameters. Littering it through out a project could lead to maintenance issues as it's another kind of global dependency. As such, it could lead to merge conflicts in a multi-user setup and deployment issues in a multi-server setup. Instead, one of the best practices is to define all those parameters in a single configuration/settings file which could be accessed throughout the project.</source>
          <target state="translated">Node.js中的 &lt;code&gt;process.env&lt;/code&gt; 对象用于存储部署/配置参数。在整个项目中乱扔垃圾可能会导致维护问题，因为它是另一种全球依赖性。这样，它可能导致多用户设置中的合并冲突以及多服务器设置中的部署问题。相反，最佳实践之一是在单个配置/设置文件中定义所有这些参数，可以在整个项目中进行访问。</target>
        </trans-unit>
        <trans-unit id="53444e809ed43079efe95348d4604d7a24ea38a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.exit()&lt;/code&gt; method in Node.js is used to immediately stop the Node.js process and exit. This is a dangerous operation because it can occur in any method at any point in time, potentially stopping a Node.js application completely when an error occurs. For example:</source>
          <target state="translated">Node.js中的 &lt;code&gt;process.exit()&lt;/code&gt; 方法用于立即停止Node.js进程并退出。这是危险的操作，因为它可能在任何时间出现在任何方法中，有可能在发生错误时完全停止Node.js应用程序。例如：</target>
        </trans-unit>
        <trans-unit id="00253dead4a64430ced775a37d1801dbac8821d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;quotes&lt;/code&gt; rule in this example has one option, &lt;code&gt;&quot;double&quot;&lt;/code&gt; (the &lt;code&gt;2&lt;/code&gt; is the error level). You can retrieve the options for a rule by using &lt;code&gt;context.options&lt;/code&gt;, which is an array containing every configured option for the rule. In this case, &lt;code&gt;context.options[0]&lt;/code&gt; would contain &lt;code&gt;&quot;double&quot;&lt;/code&gt;:</source>
          <target state="translated">在此示例中， &lt;code&gt;quotes&lt;/code&gt; 规则具有一个选项 &lt;code&gt;&quot;double&quot;&lt;/code&gt; （ &lt;code&gt;2&lt;/code&gt; 是错误级别）。您可以使用 &lt;code&gt;context.options&lt;/code&gt; 检索规则的选项，context.options是一个数组，其中包含该规则的每个已配置选项。在这种情况下， &lt;code&gt;context.options[0]&lt;/code&gt; 将包含 &lt;code&gt;&quot;double&quot;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="15bbabad9361578bf4fae1f2a49b29be60fa376b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;quotes&lt;/code&gt; rule in this example has one option, &lt;code&gt;&quot;double&quot;&lt;/code&gt; (the &lt;code&gt;error&lt;/code&gt; is the error level). You can retrieve the options for a rule by using &lt;code&gt;context.options&lt;/code&gt;, which is an array containing every configured option for the rule. In this case, &lt;code&gt;context.options[0]&lt;/code&gt; would contain &lt;code&gt;&quot;double&quot;&lt;/code&gt;:</source>
          <target state="translated">在此示例中， &lt;code&gt;quotes&lt;/code&gt; 规则具有一个选项 &lt;code&gt;&quot;double&quot;&lt;/code&gt; （ &lt;code&gt;error&lt;/code&gt; 是错误级别）。您可以使用 &lt;code&gt;context.options&lt;/code&gt; 检索规则的选项，context.options是一个数组，其中包含该规则的每个已配置选项。在这种情况下， &lt;code&gt;context.options[0]&lt;/code&gt; 将包含 &lt;code&gt;&quot;double&quot;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="472145e67d0e65f7aa06bad378cebc04916b8bba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;range&lt;/code&gt; property contains two indexes in the code, referring to the start and end location of a contiguous section of text that will be replaced. The &lt;code&gt;text&lt;/code&gt; property refers to the text that will replace the given range.</source>
          <target state="translated">所述 &lt;code&gt;range&lt;/code&gt; 属性包含在代码两个索引，参考文本的连续部分，其将被替换的开始和结束位置。该 &lt;code&gt;text&lt;/code&gt; 属性指的是将取代指定范围内的文本。</target>
        </trans-unit>
        <trans-unit id="e4064f447f590c1765f1771747724c820f183198" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;report&lt;/code&gt; returned from &lt;code&gt;executeOnText()&lt;/code&gt; is in the same format as from &lt;code&gt;executeOnFiles()&lt;/code&gt;, but there is only ever one result in &lt;code&gt;report.results&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;report&lt;/code&gt; 从返回 &lt;code&gt;executeOnText()&lt;/code&gt; 是相同的格式从 &lt;code&gt;executeOnFiles()&lt;/code&gt; ，但始终只导致 &lt;code&gt;report.results&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="92953a45beba64856673b9e8fbcb1ed126d0847b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require&lt;/code&gt; function is used to include modules that exist in separate files, such as:</source>
          <target state="translated">的 &lt;code&gt;require&lt;/code&gt; 功能用于包括存在于单独的文件，如模块：</target>
        </trans-unit>
        <trans-unit id="064be5c0f666fc3e35b5524048c68a20f53a49bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;result&lt;/code&gt; Object</source>
          <target state="translated">该 &lt;code&gt;result&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="9af8b29a9523a61b024585850f17334d070e6e12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;results&lt;/code&gt; Object</source>
          <target state="translated">该 &lt;code&gt;results&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="61d30c932bc83cd2faa8787d31852a2a495de05f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;results&lt;/code&gt; object passed into a formatter is an array of objects containing the lint results for individual files. Here's some example output:</source>
          <target state="translated">传递给格式化程序的 &lt;code&gt;results&lt;/code&gt; 对象是一个对象数组，其中包含各个文件的皮棉结果。这是一些示例输出：</target>
        </trans-unit>
        <trans-unit id="3993cb0067ab7703186a7c2f2b6970449e1be544" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rules&lt;/code&gt; property can do any of the following to extend (or override) the set of rules:</source>
          <target state="translated">的 &lt;code&gt;rules&lt;/code&gt; 性可以做任何以下的延伸（或覆盖）的一组规则：</target>
        </trans-unit>
        <trans-unit id="561e9293e5a8d3ad27376df8faff3ae931698040" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; property is no longer available on individual linting messages</source>
          <target state="translated">该 &lt;code&gt;source&lt;/code&gt; 属性不再提供个人信息掉毛</target>
        </trans-unit>
        <trans-unit id="0a93eec94b022c4aa2a02db660060ca362fa877f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; parser option is set while &lt;code&gt;ecmaVersion&lt;/code&gt; is set to &lt;code&gt;5&lt;/code&gt; or left unspecified. (Previously, setting &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; would implicitly cause &lt;code&gt;ecmaVersion&lt;/code&gt; to be set to a minimum of 2015, which could be surprising.)</source>
          <target state="translated">该 &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; ，而解析器选项设置 &lt;code&gt;ecmaVersion&lt;/code&gt; 设定为 &lt;code&gt;5&lt;/code&gt; 或不指定。（以前，设置 &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; 会隐式地将 &lt;code&gt;ecmaVersion&lt;/code&gt; 设置为2015的最小值，这可能令人惊讶。）</target>
        </trans-unit>
        <trans-unit id="4c9529163ca9cdfc78596b70a0088a17d7d3a0b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceType&lt;/code&gt; is set to anything other than &lt;code&gt;&quot;script&quot;&lt;/code&gt; or &lt;code&gt;&quot;module&quot;&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;sourceType&lt;/code&gt; 的设置比其他任何东西 &lt;code&gt;&quot;script&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;module&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77552117314df4545a21208d082a3e6e878f860f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;space-before-function-paren&lt;/code&gt; rule is more strict by default</source>
          <target state="translated">在 &lt;code&gt;space-before-function-paren&lt;/code&gt; 规则是在默认情况下更加严格</target>
        </trans-unit>
        <trans-unit id="3f8f7815159b1b5e0f229864128c1f7bd11839da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">语句的 &lt;code&gt;switch&lt;/code&gt; 类应具有以下形式：</target>
        </trans-unit>
        <trans-unit id="e7bd19d734e1f9c5b8f9f98d650cecfc8c20f132" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; statement in JavaScript is one of the more error-prone constructs of the language thanks in part to the ability to &quot;fall through&quot; from one &lt;code&gt;case&lt;/code&gt; to the next. For example:</source>
          <target state="translated">JavaScript中的 &lt;code&gt;switch&lt;/code&gt; 语句是该语言中更容易出错的结构之一，部分原因是它能够从一种 &lt;code&gt;case&lt;/code&gt; 转移到另一种情况。例如：</target>
        </trans-unit>
        <trans-unit id="b828067e8b794059a7226d1fb4af5dcfec1299b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; statement internally uses the &lt;code&gt;===&lt;/code&gt; comparison to match the expression's value to a case clause. Therefore, it can never match &lt;code&gt;case NaN&lt;/code&gt;. Also, &lt;code&gt;switch(NaN)&lt;/code&gt; can never match a case clause.</source>
          <target state="translated">所述 &lt;code&gt;switch&lt;/code&gt; 语句在内部使用 &lt;code&gt;===&lt;/code&gt; 比较表达式的值匹配的情况下子句。因此，它永远无法匹配 &lt;code&gt;case NaN&lt;/code&gt; 。另外， &lt;code&gt;switch(NaN)&lt;/code&gt; 永远不能匹配case子句。</target>
        </trans-unit>
        <trans-unit id="2ada90da9d605eb89fdcd67423cc995f53e41596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">语句的 &lt;code&gt;try&lt;/code&gt; 类应具有以下形式：</target>
        </trans-unit>
        <trans-unit id="8692ce1aa1a507fdbc0506510178169257caaf18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u&lt;/code&gt; flag disables the recovering logic Annex B defined. As a result, you can find errors early. This is similar to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;the strict mode&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;u&lt;/code&gt; 标志禁用回收逻辑附件B中定义。因此，您可以及早发现错误。这类似于&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;严格模式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c13131f24eb9329164eba24a2cd91b75577b1971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;undefined&lt;/code&gt; variable in JavaScript is actually a property of the global object. As such, in ECMAScript 3 it was possible to overwrite the value of &lt;code&gt;undefined&lt;/code&gt;. While ECMAScript 5 disallows overwriting &lt;code&gt;undefined&lt;/code&gt;, it's still possible to shadow &lt;code&gt;undefined&lt;/code&gt;, such as:</source>
          <target state="translated">JavaScript中的 &lt;code&gt;undefined&lt;/code&gt; 变量实际上是全局对象的属性。因此，在ECMAScript 3中，可以覆盖 &lt;code&gt;undefined&lt;/code&gt; 的值。尽管ECMAScript 5不允许覆盖 &lt;code&gt;undefined&lt;/code&gt; ，但是仍然可以隐藏 &lt;code&gt;undefined&lt;/code&gt; ，例如：</target>
        </trans-unit>
        <trans-unit id="e4e9951e2f561acaf841dbfd8453226510314be0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vars-on-top&lt;/code&gt; rule generates warnings when variable declarations are not used serially at the top of a function scope or the top of a program. By default variable declarations are always moved (&amp;ldquo;hoisted&amp;rdquo;) invisibly to the top of their containing scope by the JavaScript interpreter. This rule forces the programmer to represent that behavior by manually moving the variable declaration to the top of its containing scope.</source>
          <target state="translated">如果在函数作用域的顶部或程序的顶部未连续使用变量声明，则 &lt;code&gt;vars-on-top&lt;/code&gt; 规则将生成警告。默认情况下，JavaScript解释器总是将变量声明不可见地移动（&amp;ldquo;提升&amp;rdquo;）到其包含范围的顶部。该规则通过手动将变量声明移至其包含范围的顶部来强制程序员表示该行为。</target>
        </trans-unit>
        <trans-unit id="8437526de99e51c9af62b182483b3c46ca377dbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vars&lt;/code&gt; option has two settings:</source>
          <target state="translated">该 &lt;code&gt;vars&lt;/code&gt; 选项有两个设置：</target>
        </trans-unit>
        <trans-unit id="7f313683e74a50e68d4d012882437f3a941bbebc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;varsIgnorePattern&lt;/code&gt; option specifies exceptions not to check for usage: variables whose names match a regexp pattern. For example, variables whose names contain &lt;code&gt;ignored&lt;/code&gt; or &lt;code&gt;Ignored&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;varsIgnorePattern&lt;/code&gt; 选项指定的异常不检查用法：变量，其名称是正规表达式匹配。例如，名称包含 &lt;code&gt;ignored&lt;/code&gt; 或 &lt;code&gt;Ignored&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="c6c8741b7358a7fc6ab1d9e9c87df7567465e2dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verify()&lt;/code&gt; method returns an array of objects containing information about the linting warnings and errors. Here's an example:</source>
          <target state="translated">的 &lt;code&gt;verify()&lt;/code&gt; 方法返回包含关于起绒警告和错误信息的对象的阵列。这是一个例子：</target>
        </trans-unit>
        <trans-unit id="8f646bffb41dff01a7acc0aab19c45366759c6bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; operator takes an operand and returns &lt;code&gt;undefined&lt;/code&gt;: &lt;code&gt;void expression&lt;/code&gt; will evaluate &lt;code&gt;expression&lt;/code&gt; and return &lt;code&gt;undefined&lt;/code&gt;. It can be used to ignore any side effects &lt;code&gt;expression&lt;/code&gt; may produce:</source>
          <target state="translated">该 &lt;code&gt;void&lt;/code&gt; 操作需要一个操作数，并返回 &lt;code&gt;undefined&lt;/code&gt; ： &lt;code&gt;void expression&lt;/code&gt; 将评估 &lt;code&gt;expression&lt;/code&gt; 和回报 &lt;code&gt;undefined&lt;/code&gt; 。它可以用于忽略 &lt;code&gt;expression&lt;/code&gt; 可能产生的任何副作用：</target>
        </trans-unit>
        <trans-unit id="2556ce629f24ecc77f8ee75b29af595f5d1ce4bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">在 &lt;code&gt;while&lt;/code&gt; 类的语句应该有如下形式：</target>
        </trans-unit>
        <trans-unit id="16267e1a7f6497f96f435d3ed8e9d95c9f05b4e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;with&lt;/code&gt; statement is potentially problematic because it adds members of an object to the current scope, making it impossible to tell what a variable inside the block actually refers to.</source>
          <target state="translated">该 &lt;code&gt;with&lt;/code&gt; ，因为它增加了一个对象的成员，以目前的范围，使它不可能告诉什么块中的变量实际上指的陈述可能存在问题。</target>
        </trans-unit>
        <trans-unit id="23d60138df9b187d83c9c312e2d8240dbd86a484" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;one true brace style&lt;/em&gt; is one of the most common brace styles in JavaScript, in which the opening brace of a block is placed on the same line as its corresponding statement or declaration. For example:</source>
          <target state="translated">在&lt;em&gt;一个真正的大括号的风格&lt;/em&gt;是在JavaScript中最常见的支柱款式，其中一个块的左大括号放在同一行及其相应的说明或声明中的一个。例如：</target>
        </trans-unit>
        <trans-unit id="318db8bc3442a0b948f2278731ddfaa2b3371483" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;upstream source&lt;/em&gt; is the main ESLint repository that active development happens on. While you won't have push access to upstream, you will have pull access, allowing you to pull in the latest code whenever you want.</source>
          <target state="translated">的&lt;em&gt;上游源&lt;/em&gt;是主ESLint存储库活性发展发生在。虽然您没有向上游的推送访问权限，但您将具有拉取访问权限，从而可以随时提取最新的代码。</target>
        </trans-unit>
        <trans-unit id="00a652484a4e470b827e739fbc799706911bd125" translate="yes" xml:space="preserve">
          <source>The AST specification</source>
          <target state="translated">AST规格</target>
        </trans-unit>
        <trans-unit id="e60cbbce8f620754c9d5e236855c0dfac9399492" translate="yes" xml:space="preserve">
          <source>The AST that custom parsers should create is based on &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;. The AST requires some additional properties about detail information of the source code.</source>
          <target state="translated">定制解析器应该创建的AST基于&lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;。AST需要有关源代码详细信息的一些其他属性。</target>
        </trans-unit>
        <trans-unit id="d12093d685b556a69445173fd5520486f1407941" translate="yes" xml:space="preserve">
          <source>The Art Of Node: Callbacks</source>
          <target state="translated">The Art Of Node:回调</target>
        </trans-unit>
        <trans-unit id="dc42f36cf4efb4177d2faa05bda904369e189f7a" translate="yes" xml:space="preserve">
          <source>The Atomics object does not have a &lt;code&gt;[[Call]]&lt;/code&gt; internal method; it is not possible to invoke the Atomics object as a function.</source>
          <target state="translated">Atomics对象没有内部 &lt;code&gt;[[Call]]&lt;/code&gt; 方法；不能将Atomics对象作为函数调用。</target>
        </trans-unit>
        <trans-unit id="121e8d7f53d94f39796abb445eea1ec6c84df947" translate="yes" xml:space="preserve">
          <source>The Comma Style rule enforces styles for comma-separated lists. There are two comma styles primarily used in JavaScript:</source>
          <target state="translated">逗号样式规则为逗号分隔的列表执行样式。有两种逗号样式主要用于JavaScript中。</target>
        </trans-unit>
        <trans-unit id="751c7e36741c66d3a05895481f8942a38ca2dce1" translate="yes" xml:space="preserve">
          <source>The Context Object</source>
          <target state="translated">上下文对象</target>
        </trans-unit>
        <trans-unit id="699ac6d6b4ec2baa85b4732c274fadb3ca039ae9" translate="yes" xml:space="preserve">
          <source>The ECMAScript 5 Annotated Specification - Strict Mode</source>
          <target state="translated">ECMAScript 5注释规范--严格模式。</target>
        </trans-unit>
        <trans-unit id="80e0be2b0df7dc0f52165f27603e2898ae8a5e99" translate="yes" xml:space="preserve">
          <source>The ES6 Reflect API comes with a handful of methods which somewhat deprecate methods on old constructors:</source>
          <target state="translated">ES6 Reflect API带有一些方法,这些方法在一定程度上废弃了旧构造函数上的方法。</target>
        </trans-unit>
        <trans-unit id="66003f739f69d29de4ae86e20e78496ebb3153ae" translate="yes" xml:space="preserve">
          <source>The ESLint directory and file structure is as follows:</source>
          <target state="translated">ESLint目录和文件结构如下。</target>
        </trans-unit>
        <trans-unit id="d93e8b36b02e3c814ab20860021ac1e2f00ac494" translate="yes" xml:space="preserve">
          <source>The ESLint team doesn't implement new rules that are suggested by users because we have a limited number of people and need to focus on the overall roadmap. Once a rule is accepted, you are responsible for implementing and documenting the rule. You may, alternately, recruit another person to help you implement the rule. The ESLint team member who championed the rule is your resource to help guide you through the rest of this process.</source>
          <target state="translated">ESLint团队不会实施用户建议的新规则,因为我们的人数有限,需要专注于整体路线图。一旦一个规则被接受,您将负责实施和记录该规则。您也可以招募另一个人帮助您实施该规则。支持该规则的 ESLint 团队成员是您的资源,可以帮助指导您完成这个过程的其余部分。</target>
        </trans-unit>
        <trans-unit id="0c711d16f14ea7343d52f05830b40ccdb9522bc8" translate="yes" xml:space="preserve">
          <source>The ESLint team doesn't implement rule changes that are suggested by users because we have a limited number of people and need to focus on the overall roadmap. Once a rule change is accepted, you are responsible for implementing and documenting it. You may, alternately, recruit another person to help you. The ESLint team member who championed the rule is your resource to help guide you through the rest of this process.</source>
          <target state="translated">ESLint团队不执行用户建议的规则变更,因为我们的人数有限,需要关注整体的路线图。一旦规则变更被接受,您将负责实施和记录它。您也可以招募其他人来帮助您。支持该规则的 ESLint 团队成员是您的资源,可以帮助指导您完成这个过程的其余部分。</target>
        </trans-unit>
        <trans-unit id="aeda0c340295fff5de3b84af83b961b23c1f657b" translate="yes" xml:space="preserve">
          <source>The ESLint team is committed to making upgrading as easy and painless as possible. This section outlines the guidelines the team has set in place for the deprecation of rules in future releases.</source>
          <target state="translated">ESLint团队致力于使升级尽可能的简单和无痛。本节概述了团队为未来版本中规则的废弃所制定的指导方针。</target>
        </trans-unit>
        <trans-unit id="42ccbdbc3911d666627517f8ffa3964275678b01" translate="yes" xml:space="preserve">
          <source>The ESLint team is committed to making upgrading as easy and painless as possible. To that end, the team has agreed upon the following set of guidelines for deprecating rules in the future. The goal of these guidelines is to allow for improvements and changes to be made without breaking existing configurations.</source>
          <target state="translated">ESLint团队致力于使升级尽可能的简单和无痛。为此,团队已经同意以下一套关于未来废弃规则的指导原则。这些指南的目标是允许在不破坏现有配置的情况下进行改进和改变。</target>
        </trans-unit>
        <trans-unit id="d4e733f98b935c588d211926e08fdfd98589d4ae" translate="yes" xml:space="preserve">
          <source>The JSCS &lt;code&gt;--auto-configure&lt;/code&gt; option created a configuration based on what it found in a given file:</source>
          <target state="translated">JSCS &lt;code&gt;--auto-configure&lt;/code&gt; 选项基于在给定文件中找到的配置创建了一个配置：</target>
        </trans-unit>
        <trans-unit id="fa1c39fed1338615abafccd715f9a9ceec0208c2" translate="yes" xml:space="preserve">
          <source>The Math Object</source>
          <target state="translated">数学对象</target>
        </trans-unit>
        <trans-unit id="9459a63048e2fc499f7aeacaa3d20ab484e34e90" translate="yes" xml:space="preserve">
          <source>The Math object does not have a &lt;code&gt;[[Call]]&lt;/code&gt; internal property; it is not possible to invoke the Math object as a function.</source>
          <target state="translated">Math对象没有 &lt;code&gt;[[Call]]&lt;/code&gt; 内部属性；不能将Math对象作为函数调用。</target>
        </trans-unit>
        <trans-unit id="03344790500f2127bf5b89f81cc0b7f1bd8cbe99" translate="yes" xml:space="preserve">
          <source>The Reflect object also does not have a &lt;code&gt;[[Call]]&lt;/code&gt; internal method; it is not possible to invoke the Reflect object as a function.</source>
          <target state="translated">Reflect对象也没有 &lt;code&gt;[[Call]]&lt;/code&gt; 内部方法。不能将Reflect对象作为函数调用。</target>
        </trans-unit>
        <trans-unit id="d8e01d191666fc3fab613c0e7605b0dd8117adb5" translate="yes" xml:space="preserve">
          <source>The Unicode Byte Order Mark (BOM) is used to specify whether code units are big endian or little endian. That is, whether the most significant or least significant bytes come first. UTF-8 does not require a BOM because byte ordering does not matter when characters are a single byte. Since UTF-8 is the dominant encoding of the web, we make &lt;code&gt;&quot;never&quot;&lt;/code&gt; the default option.</source>
          <target state="translated">Unicode字节顺序标记（BOM）用于指定代码单位是大端还是小端。即，最高有效字节还是最低有效字节在前。UTF-8不需要BOM，因为当字符为单个字节时，字节顺序无关紧要。由于UTF-8是网络的主要编码，因此我们将 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 为默认选项。</target>
        </trans-unit>
        <trans-unit id="dee0f2bfcb123659c532724653e8c4e345e84a42" translate="yes" xml:space="preserve">
          <source>The `--fix` option on the &lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;command line&lt;/a&gt; automatically fixes problems (currently mostly whitespace) reported by rules which have a wrench  below.</source>
          <target state="translated">&lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;命令行&lt;/a&gt;上的--fix选项可自动修复由下面带有扳手的规则报告的问题（当前主要是空格）。</target>
        </trans-unit>
        <trans-unit id="db8728aed09dfa6de429370be79c24bb69a35744" translate="yes" xml:space="preserve">
          <source>The above can be rewritten as the following to improve readability and more clearly delineate the operands:</source>
          <target state="translated">上述内容可改写为以下内容,以提高可读性,更清楚地划分操作数。</target>
        </trans-unit>
        <trans-unit id="65f3cb6e1b55fcacecc756bb976bc88a3674a7e6" translate="yes" xml:space="preserve">
          <source>The above methods return a &lt;code&gt;fixing&lt;/code&gt; object. The &lt;code&gt;fix()&lt;/code&gt; function can return the following values:</source>
          <target state="translated">上面的方法返回一个 &lt;code&gt;fixing&lt;/code&gt; 对象。该 &lt;code&gt;fix()&lt;/code&gt; 函数可以返回以下值：</target>
        </trans-unit>
        <trans-unit id="0c94f2b50ef7b0d53ba00f8a03e35b8008133138" translate="yes" xml:space="preserve">
          <source>The basic pattern for a rule unit test file is:</source>
          <target state="translated">规则单元测试文件的基本模式是。</target>
        </trans-unit>
        <trans-unit id="56d7ca1af2103271f042bd642392c591643ab810" translate="yes" xml:space="preserve">
          <source>The best practice is to always use a function for the first argument of &lt;code&gt;setTimeout()&lt;/code&gt; and &lt;code&gt;setInterval()&lt;/code&gt; (and avoid &lt;code&gt;execScript()&lt;/code&gt;).</source>
          <target state="translated">最佳实践是始终对 &lt;code&gt;setTimeout()&lt;/code&gt; 和 &lt;code&gt;setInterval()&lt;/code&gt; 的第一个参数使用函数（并避免使用 &lt;code&gt;execScript()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1e8c340ffa3f95f2957d6bb3facc83797eb47d1e" translate="yes" xml:space="preserve">
          <source>The built-in formatter options are:</source>
          <target state="translated">内置的格式化选项有:</target>
        </trans-unit>
        <trans-unit id="f4a074b29cc31436f926afa21bd394791fa680f4" translate="yes" xml:space="preserve">
          <source>The callback pattern is at the heart of most I/O and event-driven programming in JavaScript.</source>
          <target state="translated">回调模式是JavaScript中大多数I/O和事件驱动编程的核心。</target>
        </trans-unit>
        <trans-unit id="17cf8e65252c53144326fa3b3cb3dee6a9c49a73" translate="yes" xml:space="preserve">
          <source>The change introduces no functional regression. Be sure to run &lt;code&gt;npm test&lt;/code&gt; to verify your changes before submitting a pull request.</source>
          <target state="translated">所做的更改不会导致功能退化。在提交拉取请求之前，请确保运行 &lt;code&gt;npm test&lt;/code&gt; 来验证您的更改。</target>
        </trans-unit>
        <trans-unit id="95b1da556ce89be353ded0ac57710b104d6f438e" translate="yes" xml:space="preserve">
          <source>The closing brace should be on a separate line.</source>
          <target state="translated">闭合支架应单独成行。</target>
        </trans-unit>
        <trans-unit id="0e877e0656f0ec69724c1b6cc3a12731f64fac75" translate="yes" xml:space="preserve">
          <source>The code above creates an object with just a setter for the property &lt;code&gt;&quot;a&quot;&lt;/code&gt;.</source>
          <target state="translated">上面的代码创建一个只带有属性 &lt;code&gt;&quot;a&quot;&lt;/code&gt; 的设置器的对象。</target>
        </trans-unit>
        <trans-unit id="7d7fe0fd83bc9845d159f7bbddda58e021a2af8e" translate="yes" xml:space="preserve">
          <source>The code can be rewritten as:</source>
          <target state="translated">该代码可以改写为:</target>
        </trans-unit>
        <trans-unit id="eae223ac7cf3bcd6d761f22884ef878f4080872a" translate="yes" xml:space="preserve">
          <source>The code might be mistaken for an error.</source>
          <target state="translated">该代码可能被误认为是一个错误。</target>
        </trans-unit>
        <trans-unit id="07b81fa2d7c3787fd397d4cedde653ceddf32951" translate="yes" xml:space="preserve">
          <source>The combining characters are characters which belong to one of &lt;code&gt;Mc&lt;/code&gt;, &lt;code&gt;Me&lt;/code&gt;, and &lt;code&gt;Mn&lt;/code&gt;&lt;a href=&quot;http://www.unicode.org/L2/L1999/UnicodeData.html#General%20Category&quot;&gt;Unicode general categories&lt;/a&gt;.</source>
          <target state="translated">组合字符是属于 &lt;code&gt;Mc&lt;/code&gt; ， &lt;code&gt;Me&lt;/code&gt; 和 &lt;code&gt;Mn&lt;/code&gt; &lt;a href=&quot;http://www.unicode.org/L2/L1999/UnicodeData.html#General%20Category&quot;&gt;Unicode常规类别&lt;/a&gt;之一的字符。</target>
        </trans-unit>
        <trans-unit id="73d750e0d0367037fdad99a42bc958f0afea170d" translate="yes" xml:space="preserve">
          <source>The comma and any whitespace that delimit property specifications are not considered parts of them. Therefore, the rule permits both of these formats:</source>
          <target state="translated">逗号和任何分隔属性规格的空白都不被认为是它们的一部分。因此,该规则允许使用这两种格式。</target>
        </trans-unit>
        <trans-unit id="d9368f1df7787717cd62dddc2cb7c148f9058bfd" translate="yes" xml:space="preserve">
          <source>The comma operator includes multiple expressions where only one is expected. It evaluates each operand from left to right and returns the value of the last operand. However, this frequently obscures side effects, and its use is often an accident. Here are some examples of sequences:</source>
          <target state="translated">逗号运算符包括多个表达式,而在这些表达式中,只有一个是预期的。它从左到右评估每个操作数,并返回最后一个操作数的值。然而,这经常会掩盖副作用,它的使用往往是一个意外。下面是一些序列的例子。</target>
        </trans-unit>
        <trans-unit id="6cbddd96542ae6a1209e95d3af05dcfc89e192c0" translate="yes" xml:space="preserve">
          <source>The command line utility has several options. You can view the options by running &lt;code&gt;eslint -h&lt;/code&gt;.</source>
          <target state="translated">命令行实用程序具有多个选项。您可以通过运行 &lt;code&gt;eslint -h&lt;/code&gt; 来查看选项。</target>
        </trans-unit>
        <trans-unit id="9c80af650686399cb1e0e7040218608587eb5be3" translate="yes" xml:space="preserve">
          <source>The commit message format is important because these messages are used to create a changelog for each release. The tag and issue number help to create more consistent and useful changelogs.</source>
          <target state="translated">提交消息的格式很重要,因为这些消息用于为每个版本创建变更日志。标签和问题编号有助于创建更加一致和有用的变更日志。</target>
        </trans-unit>
        <trans-unit id="a8123064f7d126e4a3b589e9af343947dfe7c445" translate="yes" xml:space="preserve">
          <source>The commit message is properly formatted.</source>
          <target state="translated">提交信息的格式正确。</target>
        </trans-unit>
        <trans-unit id="e4677fbe3218552fdaa136e42baa9d0c902d41ca" translate="yes" xml:space="preserve">
          <source>The common case of using &lt;code&gt;void&lt;/code&gt; operator is to get a &quot;pure&quot; &lt;code&gt;undefined&lt;/code&gt; value as prior to ES5 the &lt;code&gt;undefined&lt;/code&gt; variable was mutable:</source>
          <target state="translated">使用 &lt;code&gt;void&lt;/code&gt; 运算符的常见情况是获取&amp;ldquo;纯&amp;rdquo; &lt;code&gt;undefined&lt;/code&gt; 值，因为在ES5之前， &lt;code&gt;undefined&lt;/code&gt; 变量是可变的：</target>
        </trans-unit>
        <trans-unit id="affdad1a3137988828bd199a2283a60df1bc5075" translate="yes" xml:space="preserve">
          <source>The complete configuration hierarchy, from highest precedence to lowest precedence, is as follows:</source>
          <target state="translated">完整的配置层次结构,从最高优先级到最低优先级,如下所示。</target>
        </trans-unit>
        <trans-unit id="7505181a37b9fb762478197cf4096ed5622b8d1b" translate="yes" xml:space="preserve">
          <source>The config in &lt;code&gt;app/.eslintrc.json&lt;/code&gt; defines the glob pattern &lt;code&gt;**/*Spec.js&lt;/code&gt;. This pattern is relative to the base directory of &lt;code&gt;app/.eslintrc.json&lt;/code&gt;. So, this pattern would match &lt;code&gt;app/lib/fooSpec.js&lt;/code&gt; and &lt;code&gt;app/components/barSpec.js&lt;/code&gt; but &lt;strong&gt;NOT&lt;/strong&gt;&lt;code&gt;server/serverSpec.js&lt;/code&gt;. If you defined the same pattern in the &lt;code&gt;.eslintrc.json&lt;/code&gt; file within in the &lt;code&gt;project-root&lt;/code&gt; folder, it would match all three of the &lt;code&gt;*Spec&lt;/code&gt; files.</source>
          <target state="translated">的配置在 &lt;code&gt;app/.eslintrc.json&lt;/code&gt; 定义glob模式 &lt;code&gt;**/*Spec.js&lt;/code&gt; 。此模式相对于 &lt;code&gt;app/.eslintrc.json&lt;/code&gt; 的基本目录。因此，此模式将匹配 &lt;code&gt;app/lib/fooSpec.js&lt;/code&gt; 和 &lt;code&gt;app/components/barSpec.js&lt;/code&gt; ,但&lt;strong&gt;不&lt;/strong&gt; &lt;code&gt;server/serverSpec.js&lt;/code&gt; 。如果在 &lt;code&gt;project-root&lt;/code&gt; 文件夹中的 &lt;code&gt;.eslintrc.json&lt;/code&gt; 文件中定义了相同的模式，则它将匹配所有三个 &lt;code&gt;*Spec&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="761a0c741d5f1588ef78c2680d748e9585f5469d" translate="yes" xml:space="preserve">
          <source>The configuration cascade works by using the closest &lt;code&gt;.eslintrc&lt;/code&gt; file to the file being linted as the highest priority, then any configuration files in the parent directory, and so on. When you run ESLint on this project, all files in &lt;code&gt;lib/&lt;/code&gt; will use the &lt;code&gt;.eslintrc&lt;/code&gt; file at the root of the project as their configuration. When ESLint traverses into the &lt;code&gt;tests/&lt;/code&gt; directory, it will then use &lt;code&gt;your-project/tests/.eslintrc&lt;/code&gt; in addition to &lt;code&gt;your-project/.eslintrc&lt;/code&gt;. So &lt;code&gt;your-project/tests/test.js&lt;/code&gt; is linted based on the combination of the two &lt;code&gt;.eslintrc&lt;/code&gt; files in its directory hierarchy, with the closest one taking priority. In this way, you can have project-level ESLint settings and also have directory-specific overrides.</source>
          <target state="translated">配置级联的工作方式是：使用与最接近文件优先级的文件最接近的 &lt;code&gt;.eslintrc&lt;/code&gt; 文件，然后使用父目录中的所有配置文件，依此类推。在此项目上运行ESLint时， &lt;code&gt;lib/&lt;/code&gt; 所有文件都将使用项目根目录下的 &lt;code&gt;.eslintrc&lt;/code&gt; 文件作为其配置。当ESLint遍历到 &lt;code&gt;tests/&lt;/code&gt; 目录时，除了 &lt;code&gt;your-project/.eslintrc&lt;/code&gt; 之外，它还将使用 &lt;code&gt;your-project/tests/.eslintrc&lt;/code&gt; / .eslintrc。因此， &lt;code&gt;your-project/tests/test.js&lt;/code&gt; 会基于两个 &lt;code&gt;.eslintrc&lt;/code&gt; 的组合而减少文件在其目录层次结构中，最接近的文件优先。这样，您可以具有项目级别的ESLint设置，还可以具有特定于目录的替代。</target>
        </trans-unit>
        <trans-unit id="dcdf3251f61da2ed7fea4070dd8de83ac8b210fc" translate="yes" xml:space="preserve">
          <source>The configuration that you have in your &lt;code&gt;.eslintrc&lt;/code&gt; file is an important part of your project, and as such, you may want to share it with other projects or people. Shareable configs allow you to publish your configuration settings on &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; and have others download and use it in their ESLint projects.</source>
          <target state="translated">&lt;code&gt;.eslintrc&lt;/code&gt; 文件中的配置是项目的重要组成部分，因此，您可能希望与其他项目或人员共享该配置。可共享的配置允许您在&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;上发布配置设置，并让其他人下载并在其ESLint项目中使用它。</target>
        </trans-unit>
        <trans-unit id="32170e7d3eae30d6911a8ee9094599efb5b60bbf" translate="yes" xml:space="preserve">
          <source>The confusion around sparse arrays defined in this manner is enough that it's recommended to avoid using them unless you are certain that they are useful in your code.</source>
          <target state="translated">以这种方式定义的稀疏数组引起的混乱足以说明,建议避免使用它们,除非你确定它们在你的代码中是有用的。</target>
        </trans-unit>
        <trans-unit id="84a32a3cbfb78fbed02519d25670fc0e1cc660ca" translate="yes" xml:space="preserve">
          <source>The constructor function is particularly useful when you want to dynamically generate the pattern, because it takes string arguments.</source>
          <target state="translated">当你想动态生成模式时,构造函数特别有用,因为它接受字符串参数。</target>
        </trans-unit>
        <trans-unit id="1c3dff42ca3b1d5caf72f42e977b149fee7f9002" translate="yes" xml:space="preserve">
          <source>The contents of the &lt;code&gt;if&lt;/code&gt; statement is an arrow function, not a comparison.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 语句的内容是一个箭头函数，而不是一个比较。</target>
        </trans-unit>
        <trans-unit id="dc960e48baa84799c5c10650483220ba5c93ce2e" translate="yes" xml:space="preserve">
          <source>The custom message will be appended to the default error message. Please note that you may not specify custom error messages for restricted patterns as a particular import may match more than one pattern.</source>
          <target state="translated">自定义信息将附加到默认错误信息中。请注意,您不能为受限模式指定自定义错误信息,因为一个特定的导入可能会匹配多个模式。</target>
        </trans-unit>
        <trans-unit id="02091995aebc0237ea1f370d1e9e697cb283fce5" translate="yes" xml:space="preserve">
          <source>The custom message will be appended to the default error message. Please note that you may not specify custom error messages for restricted patterns as a particular module may match more than one pattern.</source>
          <target state="translated">自定义信息将附加到默认错误信息中。请注意,您不能为受限模式指定自定义错误信息,因为一个特定的模块可能会匹配多个模式。</target>
        </trans-unit>
        <trans-unit id="2db40330539be8a023ce70cd6de477ff5ec12779" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;&quot;never&quot;&lt;/code&gt; option can have exception options in an object literal:</source>
          <target state="translated">默认的 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 选项可以在对象文字中包含异常选项：</target>
        </trans-unit>
        <trans-unit id="aad36d23c9c66cf621dc65a4fdf5357b747ebf25" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;&quot;object&quot;&lt;/code&gt; option requires the dot to be on the same line as the object.</source>
          <target state="translated">默认的 &lt;code&gt;&quot;object&quot;&lt;/code&gt; 选项要求点与对象在同一行。</target>
        </trans-unit>
        <trans-unit id="eb214d0a96891b20944eb86c406846b8c0682ec0" translate="yes" xml:space="preserve">
          <source>The default configuration is &lt;code&gt;&quot;after&quot;, { &quot;overrides&quot;: { &quot;?&quot;: &quot;before&quot;, &quot;:&quot;: &quot;before&quot; } }&lt;/code&gt;</source>
          <target state="translated">默认配置为 &lt;code&gt;&quot;after&quot;, { &quot;overrides&quot;: { &quot;?&quot;: &quot;before&quot;, &quot;:&quot;: &quot;before&quot; } }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="796093e436a921806e600ed6ffc0bb010636d015" translate="yes" xml:space="preserve">
          <source>The default configuration is &lt;code&gt;{ &quot;before&quot;: true, &quot;after&quot;: true }&lt;/code&gt;.</source>
          <target state="translated">默认配置为 &lt;code&gt;{ &quot;before&quot;: true, &quot;after&quot;: true }&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ffd96c78ae8b308cef5ee180c2cafbcfe74c3226" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">默认值为 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d709b74ae2cf658c17f26fdf6ce2c1bfe069742" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;{&quot;before&quot;: false, &quot;after&quot;: true}&lt;/code&gt;.</source>
          <target state="translated">默认值为 &lt;code&gt;{&quot;before&quot;: false, &quot;after&quot;: true}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="535a63e8e2a6cdd1ad85243a0f44cac231300bc7" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: false}&lt;/code&gt;.</source>
          <target state="translated">默认值为 &lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: false}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="baa5bd9ea8cd406c936d48459561cdc0703e1522" translate="yes" xml:space="preserve">
          <source>The default option (that is, no string option specified) for this rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0. The &lt;code&gt;&quot;function&quot;&lt;/code&gt; option is most similar to the removed option.</source>
          <target state="translated">ESLint v1.0 中&lt;strong&gt;删除&lt;/strong&gt;了此规则的默认选项（即，未指定字符串选项）。在 &lt;code&gt;&quot;function&quot;&lt;/code&gt; 选项是最相似的移除选项。</target>
        </trans-unit>
        <trans-unit id="ea560e9329be81e2a97fb02fb917528a08a7dfda" translate="yes" xml:space="preserve">
          <source>The default options for some rules have changed</source>
          <target state="translated">一些规则的默认选项已经改变</target>
        </trans-unit>
        <trans-unit id="e1b30fc08a505ea690637325f1e931c67ab9c7ce" translate="yes" xml:space="preserve">
          <source>The default options for the &lt;a href=&quot;../rules/no-confusing-arrow&quot;&gt;&lt;code&gt;no-confusing-arrow&lt;/code&gt;&lt;/a&gt; rule have changed from &lt;code&gt;{ allowParens: false }&lt;/code&gt; to &lt;code&gt;{ allowParens: true }&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../rules/no-confusing-arrow&quot;&gt; &lt;code&gt;no-confusing-arrow&lt;/code&gt; &lt;/a&gt;规则的默认选项已从 &lt;code&gt;{ allowParens: false }&lt;/code&gt; 更改为 &lt;code&gt;{ allowParens: true }&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="544468a6bb41999c9c49e104c2162d56de2501c3" translate="yes" xml:space="preserve">
          <source>The default options for the &lt;a href=&quot;../rules/no-redeclare&quot;&gt;&lt;code&gt;no-redeclare&lt;/code&gt;&lt;/a&gt; rule have changed from &lt;code&gt;{ builtinGlobals: false }&lt;/code&gt; to &lt;code&gt;{ builtinGlobals: true }&lt;/code&gt;. Additionally, the &lt;code&gt;no-redeclare&lt;/code&gt; rule will now report an error for globals enabled by comments like &lt;code&gt;/* global foo */&lt;/code&gt; if those globals were already enabled through configuration anyway.</source>
          <target state="translated">&lt;a href=&quot;../rules/no-redeclare&quot;&gt; &lt;code&gt;no-redeclare&lt;/code&gt; &lt;/a&gt;规则的默认选项已从 &lt;code&gt;{ builtinGlobals: false }&lt;/code&gt; 更改为 &lt;code&gt;{ builtinGlobals: true }&lt;/code&gt; 。此外，如果无论如何已经通过配置启用了这些全局变量，则 &lt;code&gt;no-redeclare&lt;/code&gt; 规则现在将报告由 &lt;code&gt;/* global foo */&lt;/code&gt; 等注释启用的全局变量的错误。</target>
        </trans-unit>
        <trans-unit id="4b68ac7ed408d41719943a7ec2a3599de96e8bf8" translate="yes" xml:space="preserve">
          <source>The default options for the &lt;a href=&quot;../rules/object-curly-newline&quot;&gt;&lt;code&gt;object-curly-newline&lt;/code&gt;&lt;/a&gt; rule have changed from &lt;code&gt;{ multiline: true }&lt;/code&gt; to &lt;code&gt;{ consistent: true }&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../rules/object-curly-newline&quot;&gt; &lt;code&gt;object-curly-newline&lt;/code&gt; &lt;/a&gt;规则的默认选项已从 &lt;code&gt;{ multiline: true }&lt;/code&gt; 更改为 &lt;code&gt;{ consistent: true }&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b7ab1e46a9e7c204637eb33434f00becfe8a66d" translate="yes" xml:space="preserve">
          <source>The default options object for the &lt;a href=&quot;../rules/no-self-assign&quot;&gt;&lt;code&gt;no-self-assign&lt;/code&gt;&lt;/a&gt; rule has changed from &lt;code&gt;{ props: false }&lt;/code&gt; to &lt;code&gt;{ props: true }&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../rules/no-self-assign&quot;&gt; &lt;code&gt;no-self-assign&lt;/code&gt; &lt;/a&gt;规则的默认选项对象已从 &lt;code&gt;{ props: false }&lt;/code&gt; 更改为 &lt;code&gt;{ props: true }&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f7d8ef8740358e7014a22b0fc66ddeed7cc30fcc" translate="yes" xml:space="preserve">
          <source>The default parser now validates options more strictly</source>
          <target state="translated">默认解析器现在可以更严格地验证选项。</target>
        </trans-unit>
        <trans-unit id="cb91917a4ee5c4169d24eee0779ed1f5fecc0213" translate="yes" xml:space="preserve">
          <source>The deprecated &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option has been removed</source>
          <target state="translated">不推荐使用的 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; 选项已被删除</target>
        </trans-unit>
        <trans-unit id="417c3b37d6ea8d516aaec94e4251e5a47c517230" translate="yes" xml:space="preserve">
          <source>The difference between a marker and an exception is that a marker only appears at the beginning of the comment whereas exceptions can occur anywhere in the comment string.</source>
          <target state="translated">标记和异常之间的区别在于,标记只出现在注释的开头,而异常可以出现在注释字符串的任何地方。</target>
        </trans-unit>
        <trans-unit id="be6b4fc0012e62a768e63daa1d092d896e9cd14d" translate="yes" xml:space="preserve">
          <source>The difference between these two patterns is subtle, especially because the problematic empty pattern looks just like an object literal.</source>
          <target state="translated">这两种模式之间的区别是微妙的,尤其是有问题的空模式看起来就像一个对象文字。</target>
        </trans-unit>
        <trans-unit id="5f8c988db3120f6ad6d74976827259fee73007f6" translate="yes" xml:space="preserve">
          <source>The easiest way to start creating a plugin is to use the &lt;a href=&quot;https://www.npmjs.com/package/generator-eslint&quot;&gt;Yeoman generator&lt;/a&gt;. The generator will guide you through setting up the skeleton of a plugin.</source>
          <target state="translated">开始创建插件的最简单方法是使用&lt;a href=&quot;https://www.npmjs.com/package/generator-eslint&quot;&gt;Yeoman生成器&lt;/a&gt;。生成器将指导您设置插件框架。</target>
        </trans-unit>
        <trans-unit id="43705ef6db2efcf221d0e395d353b64954c6c747" translate="yes" xml:space="preserve">
          <source>The enclosed statements should be indented one more level than the compound statement.</source>
          <target state="translated">所附报表应比复合报表多缩进一级。</target>
        </trans-unit>
        <trans-unit id="b118bf659a71ae3c29fa483a5256dbcff0e3c82c" translate="yes" xml:space="preserve">
          <source>The end of the &lt;code&gt;try&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; 块的末尾。</target>
        </trans-unit>
        <trans-unit id="8db72bff78f8373ee30f8c8fd310da3156ec6caa" translate="yes" xml:space="preserve">
          <source>The executor function can also be an &lt;code&gt;async function&lt;/code&gt;. However, this is usually a mistake, for a few reasons:</source>
          <target state="translated">执行程序功能也可以是 &lt;code&gt;async function&lt;/code&gt; 。但是，这通常是一个错误，原因如下：</target>
        </trans-unit>
        <trans-unit id="67f85a36ed894f5ee40529023db3887ad5bbee0c" translate="yes" xml:space="preserve">
          <source>The exported function receives an optional second argument named &lt;code&gt;data&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; object provides extended information related to the analysis results. Currently, the &lt;code&gt;data&lt;/code&gt; object consists of a single property named &lt;code&gt;rulesMeta&lt;/code&gt;. This property is a dictionary of rule metadata, keyed with &lt;code&gt;ruleId&lt;/code&gt;. The value for each entry is the &lt;code&gt;meta&lt;/code&gt; property from the corresponding rule object. The dictionary contains an entry for each rule that was run during the analysis.</source>
          <target state="translated">导出的函数接收一个名为 &lt;code&gt;data&lt;/code&gt; 的可选第二个参数。所述 &lt;code&gt;data&lt;/code&gt; 对象提供与分析结果的扩展信息。当前， &lt;code&gt;data&lt;/code&gt; 对象由一个名为 &lt;code&gt;rulesMeta&lt;/code&gt; 的属性组成。此属性是规则元数据的字典，以 &lt;code&gt;ruleId&lt;/code&gt; 为键。每个条目的值是相应规则对象的 &lt;code&gt;meta&lt;/code&gt; 属性。词典包含分析期间运行的每个规则的条目。</target>
        </trans-unit>
        <trans-unit id="10638ad26a2336c237513cb7fa8ba9e360e6572f" translate="yes" xml:space="preserve">
          <source>The expressions in a &lt;code&gt;for&lt;/code&gt; statement should be separated by blank spaces. Blank spaces should only be used after semicolons, not before.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; 语句中的表达式应该用空格分隔。空格只能在分号后使用，而不能在分号后使用。</target>
        </trans-unit>
        <trans-unit id="0857209508949425ce9520e024dc97908dd75683" translate="yes" xml:space="preserve">
          <source>The first is a string which be either &lt;code&gt;&quot;always&quot;&lt;/code&gt; or &lt;code&gt;&quot;never&quot;&lt;/code&gt;. The default is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">第一个是 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 的字符串。默认值为 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6c11e634588bcc74080a015687bda5aa0bfac1d9" translate="yes" xml:space="preserve">
          <source>The first is using &lt;code&gt;setTimeout()&lt;/code&gt;, &lt;code&gt;setInterval()&lt;/code&gt; or &lt;code&gt;execScript()&lt;/code&gt; (Internet Explorer only), all of which can accept a string of JavaScript code as their first argument. For example:</source>
          <target state="translated">第一种是使用 &lt;code&gt;setTimeout()&lt;/code&gt; ， &lt;code&gt;setInterval()&lt;/code&gt; 或 &lt;code&gt;execScript()&lt;/code&gt; （仅限Internet Explorer），所有这些方法都可以接受JavaScript代码字符串作为第一个参数。例如：</target>
        </trans-unit>
        <trans-unit id="6d4bbf2fb18f805ebaadc20bfc29b2a73d3969ac" translate="yes" xml:space="preserve">
          <source>The first line contains only the &lt;code&gt;/*&lt;/code&gt; comment opening. No further text is allowed on this line.</source>
          <target state="translated">第一行仅包含 &lt;code&gt;/*&lt;/code&gt; 注释开头。此行上不允许有其他文本。</target>
        </trans-unit>
        <trans-unit id="6154e02adfa070a6b3e169f562e328e046578b3d" translate="yes" xml:space="preserve">
          <source>The first line of multi-comments should be indented to the same level as the code it describes. Each subsequent line should have the same indentation plus one space (for proper alignment of the &lt;code&gt;*&lt;/code&gt; characters). Each multi-line comment should be preceded by one empty line.</source>
          <target state="translated">多注释的第一行应缩进至与其描述的代码相同的级别。随后的每一行都应具有相同的缩进加一个空格（以正确对齐 &lt;code&gt;*&lt;/code&gt; 字符）。每条多行注释之前应加一个空行。</target>
        </trans-unit>
        <trans-unit id="5072260dd42b4b3af826cc62dd8fbb33239f1233" translate="yes" xml:space="preserve">
          <source>The first line of the commit message (the summary) must have a specific format. This format is checked by our build tools.</source>
          <target state="translated">提交消息的第一行(摘要)必须有特定的格式。我们的构建工具会检查这个格式。</target>
        </trans-unit>
        <trans-unit id="eaba518aba6a1d6f3d301b713e35495cf26fd58b" translate="yes" xml:space="preserve">
          <source>The first problem is that primitive wrapper objects are, in fact, objects. That means &lt;code&gt;typeof&lt;/code&gt; will return &lt;code&gt;&quot;object&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;string&quot;&lt;/code&gt;, &lt;code&gt;&quot;number&quot;&lt;/code&gt;, or &lt;code&gt;&quot;boolean&quot;&lt;/code&gt;. The second problem comes with boolean objects. Every object is truthy, that means an instance of &lt;code&gt;Boolean&lt;/code&gt; always resolves to &lt;code&gt;true&lt;/code&gt; even when its actual value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">第一个问题是原始包装对象实际上是对象。这意味着 &lt;code&gt;typeof&lt;/code&gt; 将返回 &lt;code&gt;&quot;object&quot;&lt;/code&gt; 而不是 &lt;code&gt;&quot;string&quot;&lt;/code&gt; ， &lt;code&gt;&quot;number&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;boolean&quot;&lt;/code&gt; 。第二个问题来自布尔对象。每个对象都是真实的，这意味着 &lt;code&gt;Boolean&lt;/code&gt; 的实例即使其实际值为 &lt;code&gt;false&lt;/code&gt; ,也始终解析为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="984bf5268b0ddf754b28d771410a618bd31b5080" translate="yes" xml:space="preserve">
          <source>The first step to sending a pull request is to create a new branch in your ESLint fork. Give the branch a descriptive name that describes what it is you're fixing, such as:</source>
          <target state="translated">发送拉取请求的第一步是在你的 ESLint fork 中创建一个新的分支。给这个分支起一个描述性的名字,来描述你要修复的东西,比如:。</target>
        </trans-unit>
        <trans-unit id="89a5d6f7116af9ee2720543818896897a369050f" translate="yes" xml:space="preserve">
          <source>The first throwable node (e.g. a function call) in the &lt;code&gt;try&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; 块中的第一个可抛出节点（例如，函数调用）。</target>
        </trans-unit>
        <trans-unit id="d71475a3d6080cbad00254ef62ed2324f9e45663" translate="yes" xml:space="preserve">
          <source>The first way to use configuration files is via &lt;code&gt;.eslintrc.*&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files. ESLint will automatically look for them in the directory of the file to be linted, and in successive parent directories all the way up to the root directory of the filesystem (unless &lt;code&gt;root: true&lt;/code&gt; is specified). This option is useful when you want different configurations for different parts of a project or when you want others to be able to use ESLint directly without needing to remember to pass in the configuration file.</source>
          <target state="translated">使用配置文件的第一种方法是通过 &lt;code&gt;.eslintrc.*&lt;/code&gt; 和 &lt;code&gt;package.json&lt;/code&gt; 文件。ESLint会在要插入文件的目录中以及在连续的父目录中一直到文件系统的根目录中自动寻找它们（除非指定 &lt;code&gt;root: true&lt;/code&gt; ）。当您希望为项目的不同部分进行不同的配置时，或者希望其他人能够直接使用ESLint而无需记住传递配置文件时，此选项很有用。</target>
        </trans-unit>
        <trans-unit id="7899f93b94b39beef8a71db444282ddbbd5e7124" translate="yes" xml:space="preserve">
          <source>The following configuration ignores indentation in the body of IIFEs.</source>
          <target state="translated">以下配置会忽略IIFEs正文中的缩进。</target>
        </trans-unit>
        <trans-unit id="41c40b6e586fc5cb09bbc72af12c8f09e123d736" translate="yes" xml:space="preserve">
          <source>The following configuration ignores the indentation of &lt;code&gt;ConditionalExpression&lt;/code&gt; (&quot;ternary expression&quot;) nodes:</source>
          <target state="translated">以下配置忽略 &lt;code&gt;ConditionalExpression&lt;/code&gt; （&amp;ldquo;三元表达式&amp;rdquo;）节点的缩进：</target>
        </trans-unit>
        <trans-unit id="d5fa8b20b228bdd086131e38e40e897cbd6cbf7a" translate="yes" xml:space="preserve">
          <source>The following examples &lt;strong&gt;will not&lt;/strong&gt; be flagged:</source>
          <target state="translated">以下示例&lt;strong&gt;将不会&lt;/strong&gt;被标记：</target>
        </trans-unit>
        <trans-unit id="f5287d99a37de7104aa2ed235baa902a0ec5078d" translate="yes" xml:space="preserve">
          <source>The following examples &lt;strong&gt;will&lt;/strong&gt; be flagged:</source>
          <target state="translated">以下示例&lt;strong&gt;将&lt;/strong&gt;被标记：</target>
        </trans-unit>
        <trans-unit id="c14ba9c0ea8a095e66d6957614fae22fac370baf" translate="yes" xml:space="preserve">
          <source>The following exceptions are available:</source>
          <target state="translated">以下是例外情况:</target>
        </trans-unit>
        <trans-unit id="cf3496b833b4ce7626fcd6541bf610fb0c36af11" translate="yes" xml:space="preserve">
          <source>The following exceptions are available: &lt;code&gt;[&quot;{}&quot;, &quot;[]&quot;, &quot;()&quot;, &quot;empty&quot;]&lt;/code&gt;.</source>
          <target state="translated">可以使用以下例外： &lt;code&gt;[&quot;{}&quot;, &quot;[]&quot;, &quot;()&quot;, &quot;empty&quot;]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc06f672c1606cd07e74f3dea672e030eb3b9e95" translate="yes" xml:space="preserve">
          <source>The following is another example of this behavior:</source>
          <target state="translated">下面是这种行为的另一个例子。</target>
        </trans-unit>
        <trans-unit id="2a56e159d769ca06392168750d10004a388bb2d2" translate="yes" xml:space="preserve">
          <source>The following methods internally use the &lt;code&gt;===&lt;/code&gt; comparison to match the given value with an array element:</source>
          <target state="translated">以下方法在内部使用 &lt;code&gt;===&lt;/code&gt; 比较将给定值与数组元素进行匹配：</target>
        </trans-unit>
        <trans-unit id="5d5534fd1ddcbfd687919d332b483e9a80e0f5bb" translate="yes" xml:space="preserve">
          <source>The following operators can be used in &lt;code&gt;groups&lt;/code&gt; option:</source>
          <target state="translated">可以在 &lt;code&gt;groups&lt;/code&gt; 选项中使用以下运算符：</target>
        </trans-unit>
        <trans-unit id="6b976bf24d5d6d504746e7c6ab5309ec8057839f" translate="yes" xml:space="preserve">
          <source>The following parsers are compatible with ESLint:</source>
          <target state="translated">以下解析器与ESLint兼容。</target>
        </trans-unit>
        <trans-unit id="0d78993759d70053fb65fd89fcd97c00ecd762fb" translate="yes" xml:space="preserve">
          <source>The following pattern is under strict mode globally and is considered valid with the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option and a warning with the &lt;code&gt;&quot;never&quot;&lt;/code&gt; option.</source>
          <target state="translated">以下模式在全局处于严格模式下，并且使用 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 选项被视为有效，而使用 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 选项则被视为警告。</target>
        </trans-unit>
        <trans-unit id="d729325dfb7e6f59aa92e87801a3213c9448843d" translate="yes" xml:space="preserve">
          <source>The following patterns apply strict mode only to functions so are valid with the &lt;code&gt;&quot;never&quot;&lt;/code&gt; option but are problems with the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option.</source>
          <target state="translated">以下模式仅对功能应用严格模式，因此对 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 选项有效，而对 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 选项有效。</target>
        </trans-unit>
        <trans-unit id="4c8beda3159d864bcb7168811d6ca919b1da89c2" translate="yes" xml:space="preserve">
          <source>The following rules have been added to the &lt;a href=&quot;configuring#using-eslintrecommended&quot;&gt;&lt;code&gt;eslint:recommended&lt;/code&gt;&lt;/a&gt; config:</source>
          <target state="translated">以下规则已添加到&lt;a href=&quot;configuring#using-eslintrecommended&quot;&gt; &lt;code&gt;eslint:recommended&lt;/code&gt; &lt;/a&gt;配置：</target>
        </trans-unit>
        <trans-unit id="43d343a3ec041d356d216b275ad524155322bd82" translate="yes" xml:space="preserve">
          <source>The following rules have been deprecated with new rules created to take their place. The following is a list of the removed rules and their replacements:</source>
          <target state="translated">以下规则已被废止,并制定了新的规则来取代。以下是被删除的规则及其替代规则的清单:</target>
        </trans-unit>
        <trans-unit id="fd8fba26361e9e9eea3de62de397689436cfaa0d" translate="yes" xml:space="preserve">
          <source>The following rules were modified:</source>
          <target state="translated">修改了以下规则:</target>
        </trans-unit>
        <trans-unit id="cbf28d7aa679ef7fb32bcf23869dde2a833ca6c5" translate="yes" xml:space="preserve">
          <source>The following rules were removed from &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;:</source>
          <target state="translated">以下规则已从 &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; 中删除：</target>
        </trans-unit>
        <trans-unit id="4b1c496bbd734835e82ecba2dcd535dd72437441" translate="yes" xml:space="preserve">
          <source>The following selectors are supported:</source>
          <target state="translated">支持以下选择器:</target>
        </trans-unit>
        <trans-unit id="50fe0ca19519467513afe9de899977912a5dca9e" translate="yes" xml:space="preserve">
          <source>The function declaration portion rule will be rendered obsolete when &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=585536&quot;&gt;block-scoped functions&lt;/a&gt; land in ES6, but until then, it should be left on to enforce valid constructions. Disable checking variable declarations when using &lt;a href=&quot;block-scoped-var&quot;&gt;block-scoped-var&lt;/a&gt; or if declaring variables in nested blocks is acceptable despite hoisting.</source>
          <target state="translated">当&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=585536&quot;&gt;块作用域函数&lt;/a&gt;进入ES6时，函数声明部分规则将被废弃，但在此之前，应保留该规则以强制执行有效构造。当使用&lt;a href=&quot;block-scoped-var&quot;&gt;block-scoped-var&lt;/a&gt;或尽管吊装仍可接受在嵌套块中声明变量时，请禁用检查变量声明。</target>
        </trans-unit>
        <trans-unit id="db3dccfd930abb34e566f04f78fc9ed70b467b0b" translate="yes" xml:space="preserve">
          <source>The function has &lt;code&gt;@this&lt;/code&gt; tag in its JSDoc comment.</source>
          <target state="translated">该函数在其JSDoc注释中具有 &lt;code&gt;@this&lt;/code&gt; 标记。</target>
        </trans-unit>
        <trans-unit id="5620d241e1ebd93a4e8ac57b317c474f477713ad" translate="yes" xml:space="preserve">
          <source>The function invocation can be written by &lt;code&gt;Function.prototype.call()&lt;/code&gt; and &lt;code&gt;Function.prototype.apply()&lt;/code&gt;. But &lt;code&gt;Function.prototype.call()&lt;/code&gt; and &lt;code&gt;Function.prototype.apply()&lt;/code&gt; are slower than the normal function invocation.</source>
          <target state="translated">可以通过 &lt;code&gt;Function.prototype.call()&lt;/code&gt; 和 &lt;code&gt;Function.prototype.apply()&lt;/code&gt; 编写函数调用。但是 &lt;code&gt;Function.prototype.call()&lt;/code&gt; 和 &lt;code&gt;Function.prototype.apply()&lt;/code&gt; 比正常的函数调用慢。</target>
        </trans-unit>
        <trans-unit id="a5351ac484a8bf3cb3ea45d7dd69d4667a894926" translate="yes" xml:space="preserve">
          <source>The function is a callback of array methods (such as &lt;code&gt;.forEach()&lt;/code&gt;) if &lt;code&gt;thisArg&lt;/code&gt; is given.</source>
          <target state="translated">如果给定 &lt;code&gt;thisArg&lt;/code&gt; ,则该函数是数组方法（例如 &lt;code&gt;.forEach()&lt;/code&gt; ）的回调。</target>
        </trans-unit>
        <trans-unit id="deb40c3066f6e38deb8139ba56f87dc333a2a42d" translate="yes" xml:space="preserve">
          <source>The function is a constructor of ES2015 Classes.</source>
          <target state="translated">该函数是ES2015类的构造函数。</target>
        </trans-unit>
        <trans-unit id="de02b593b295da2bc2bad8e8f15be1427537b0d8" translate="yes" xml:space="preserve">
          <source>The function is a method/getter/setter of ES2015 Classes. (excepts static methods)</source>
          <target state="translated">该函数是ES2015类的方法/getter/setter。(静态方法除外)</target>
        </trans-unit>
        <trans-unit id="58b8b313fb5fc9cea0cb6de31e257ad439368b79" translate="yes" xml:space="preserve">
          <source>The function is assigned to a property.</source>
          <target state="translated">该函数被分配给一个属性。</target>
        </trans-unit>
        <trans-unit id="1ec2f55a7c94721043c141bc1c6ef3a223affda5" translate="yes" xml:space="preserve">
          <source>The function is assigned to a variable which starts with an uppercase letter.</source>
          <target state="translated">该函数被分配给一个以大写字母开头的变量。</target>
        </trans-unit>
        <trans-unit id="f1a468e18550838069874f9e16dfdc8a15a09a28" translate="yes" xml:space="preserve">
          <source>The function is on an object literal.</source>
          <target state="translated">该函数是在一个对象文字上。</target>
        </trans-unit>
        <trans-unit id="24287496e1c3d7550a774298bb9d98fa77335f61" translate="yes" xml:space="preserve">
          <source>The function's</source>
          <target state="translated">该函数的</target>
        </trans-unit>
        <trans-unit id="aeaafe54aaf295b5e3e4fde9b2befddf145018a6" translate="yes" xml:space="preserve">
          <source>The get syntax binds an object property to a function that will be called when that property is looked up. It was first introduced in ECMAScript 5:</source>
          <target state="translated">get语法将一个对象属性绑定到一个函数上,该函数将在查询该属性时被调用。它最早是在ECMAScript 5中引入的。</target>
        </trans-unit>
        <trans-unit id="5303cca7341f758ff7259b4665508fac4ca8d017" translate="yes" xml:space="preserve">
          <source>The global's</source>
          <target state="translated">全球的</target>
        </trans-unit>
        <trans-unit id="cd1ea1f16f00e056aa55de069fc2ba6f16e8946b" translate="yes" xml:space="preserve">
          <source>The goal of using &lt;code&gt;new&lt;/code&gt; with a constructor is typically to create an object of a particular type and store that object in a variable, such as:</source>
          <target state="translated">与构造函数一起使用 &lt;code&gt;new&lt;/code&gt; 的目标通常是创建特定类型的对象并将该对象存储在变量中，例如：</target>
        </trans-unit>
        <trans-unit id="acac3d2c78a0442ff5e1d6b8f826069158684f0b" translate="yes" xml:space="preserve">
          <source>The implementation is not aware of any local functions with the name &lt;code&gt;require&lt;/code&gt; that may shadow Node.js' global &lt;code&gt;require&lt;/code&gt;.</source>
          <target state="translated">该实现不知道任何名称为 &lt;code&gt;require&lt;/code&gt; 的本地函数可能会遮蔽Node.js的global &lt;code&gt;require&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="032f95f2ad52750fe42b95d8612f0f3b8a88f333" translate="yes" xml:space="preserve">
          <source>The import statement can also import a module without exported bindings. Used when the module does not export anything, but runs it own code or changes the global context object.</source>
          <target state="translated">import语句也可以导入一个没有导出绑定的模块。当模块没有导出任何东西,但运行自己的代码或改变全局上下文对象时使用。</target>
        </trans-unit>
        <trans-unit id="0eeaf642c54558bc59a95b083b854c711c38cc2b" translate="yes" xml:space="preserve">
          <source>The import statement is used to import members (functions, objects or primitives) that have been exported from an external module. Using a specific member syntax:</source>
          <target state="translated">导入语句用于导入从外部模块导出的成员(函数、对象或基元)。使用特定的成员语法。</target>
        </trans-unit>
        <trans-unit id="4a80f2125f069a5f1c92caf6dad61a91aa823038" translate="yes" xml:space="preserve">
          <source>The information available for each linting message is:</source>
          <target state="translated">每条绒毛信息的可用信息是:</target>
        </trans-unit>
        <trans-unit id="7675327e3125cbdffe94a48f7416e4309f48e134" translate="yes" xml:space="preserve">
          <source>The information available is:</source>
          <target state="translated">现有的信息是:</target>
        </trans-unit>
        <trans-unit id="026fee076803b9a433c8e9acb756fb2b3e489841" translate="yes" xml:space="preserve">
          <source>The kind of the way to address variables in destructuring. There are 2 values:</source>
          <target state="translated">破坏构造中变量的那种处理方式。有2种值。</target>
        </trans-unit>
        <trans-unit id="c38f57d73e2ff10d4366adce9c62d418943b8650" translate="yes" xml:space="preserve">
          <source>The last line has the &lt;code&gt;*/&lt;/code&gt; comment opening aligned with the preceding lines. No other text is allowed on this line.</source>
          <target state="translated">最后一行的 &lt;code&gt;*/&lt;/code&gt; 注释开头与前面的行对齐。此行上不允许有其他文本。</target>
        </trans-unit>
        <trans-unit id="cf2418cd74bfe3b3574af71ae7e2102cc8457373" translate="yes" xml:space="preserve">
          <source>The line comment &lt;code&gt;// exported variableName&lt;/code&gt; will not work as &lt;code&gt;exported&lt;/code&gt; is not line-specific.</source>
          <target state="translated">行注释 &lt;code&gt;// exported variableName&lt;/code&gt; 将不起作用，因为 &lt;code&gt;exported&lt;/code&gt; 的不是特定于行的。</target>
        </trans-unit>
        <trans-unit id="dd3923f68fea3cc32c62bea7c26b00e55243f62f" translate="yes" xml:space="preserve">
          <source>The line is &lt;code&gt;--&lt;/code&gt; or &lt;code&gt;++&lt;/code&gt; (in which case it will decrement/increment the next token.)</source>
          <target state="translated">该行是 &lt;code&gt;--&lt;/code&gt; 或 &lt;code&gt;++&lt;/code&gt; （在这种情况下，它将减少/增加下一个标记。）</target>
        </trans-unit>
        <trans-unit id="8fc6d3dc22f28ddac02852365e2f486c4a9fbcb1" translate="yes" xml:space="preserve">
          <source>The linebreaks (new lines) used in windows operating system are usually &lt;em&gt;carriage returns&lt;/em&gt; (CR) followed by a &lt;em&gt;line feed&lt;/em&gt; (LF) making it a &lt;em&gt;carriage return line feed&lt;/em&gt; (CRLF) whereas Linux and Unix use a simple &lt;em&gt;line feed&lt;/em&gt; (LF). The corresponding &lt;em&gt;control sequences&lt;/em&gt; are &lt;code&gt;&quot;\n&quot;&lt;/code&gt; (for LF) and &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; for (CRLF).</source>
          <target state="translated">Windows操作系统中使用的换行符（换行符）通常是&lt;em&gt;回车符&lt;/em&gt;（CR），后跟&lt;em&gt;换行符&lt;/em&gt;（LF），使其成为&lt;em&gt;回车符换行符&lt;/em&gt;（CRLF），而Linux和Unix使用简单&lt;em&gt;换行符&lt;/em&gt;（LF）。相应的&lt;em&gt;控制序列&lt;/em&gt;是 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; （对于LF）和 &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; （对于CRLF）。</target>
        </trans-unit>
        <trans-unit id="2201d7d5091e9b276f0386c81e6c9e6b5aad5f13" translate="yes" xml:space="preserve">
          <source>The lists below are ordered roughly by the number of users each change is expected to affect, where the first items are expected to affect the most users.</source>
          <target state="translated">下面的列表大致按每项变更预计影响的用户数排序,其中第一项预计影响的用户最多。</target>
        </trans-unit>
        <trans-unit id="cd5ba3dd3a61a71ce3c2df5c8c27632dbb8e611b" translate="yes" xml:space="preserve">
          <source>The main method is &lt;code&gt;cli.execute()&lt;/code&gt;, which accepts an array of strings that represent the command line options (as if &lt;code&gt;process.argv&lt;/code&gt; were passed without the first two arguments). If you want to run ESLint from inside of another program and have it act like the CLI, then &lt;code&gt;cli&lt;/code&gt; is the object to use.</source>
          <target state="translated">主要方法是 &lt;code&gt;cli.execute()&lt;/code&gt; ，它接受代表命令行选项的字符串数组（就像 &lt;code&gt;process.argv&lt;/code&gt; 是在没有前两个参数的情况下传递的一样）。如果要从另一个程序内部运行ESLint并使它像CLI一样运行，则 &lt;code&gt;cli&lt;/code&gt; 是要使用的对象。</target>
        </trans-unit>
        <trans-unit id="82c7fc418c96dfe485b72e97d5785c7b1f84d1d1" translate="yes" xml:space="preserve">
          <source>The main method of the &lt;code&gt;CLIEngine&lt;/code&gt; is &lt;code&gt;executeOnFiles()&lt;/code&gt;, which accepts an array of file and directory names to run the linter on.</source>
          <target state="translated">&lt;code&gt;CLIEngine&lt;/code&gt; 的主要方法是 &lt;code&gt;executeOnFiles()&lt;/code&gt; ，该方法接受文件名和目录名的数组以运行linter。</target>
        </trans-unit>
        <trans-unit id="aa5cd71ecca317561d0f3120437420e4eb266e86" translate="yes" xml:space="preserve">
          <source>The main method of the &lt;code&gt;Linter&lt;/code&gt; object is &lt;code&gt;verify()&lt;/code&gt; and accepts two arguments: the source text to verify and a configuration object (the baked configuration of the given configuration file plus command line options). The method first parses the given text with &lt;code&gt;espree&lt;/code&gt; (or whatever the configured parser is) and retrieves the AST. The AST is produced with both line/column and range locations which are useful for reporting location of issues and retrieving the source text related to an AST node, respectively.</source>
          <target state="translated">&lt;code&gt;Linter&lt;/code&gt; 对象的主要方法是 &lt;code&gt;verify()&lt;/code&gt; ，它接受两个参数：要验证的源文本和一个配置对象（给定配置文件的烘焙配置以及命令行选项）。该方法首先使用 &lt;code&gt;espree&lt;/code&gt; （或任何配置的解析器）解析给定的文本，然后检索AST。AST具有行/列和范围位置，分别用于报告问题的位置和检索与AST节点有关的源文本。</target>
        </trans-unit>
        <trans-unit id="b71267395abe4b458e8e16055642b9f1606731d6" translate="yes" xml:space="preserve">
          <source>The main method you'll use is &lt;code&gt;context.report()&lt;/code&gt;, which publishes a warning or error (depending on the configuration being used). This method accepts a single argument, which is an object containing the following properties:</source>
          <target state="translated">您将使用的主要方法是 &lt;code&gt;context.report()&lt;/code&gt; ，它发布警告或错误（取决于所使用的配置）。此方法接受单个参数，该参数是一个包含以下属性的对象：</target>
        </trans-unit>
        <trans-unit id="2aa043d4f97cda6b2c4e5a4d1829ce7593f304b2" translate="yes" xml:space="preserve">
          <source>The message summary should be a one-sentence description of the change, and it must be 72 characters in length or shorter. If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use &lt;code&gt;(refs #1234)&lt;/code&gt; instead of &lt;code&gt;(fixes #1234)&lt;/code&gt;.</source>
          <target state="translated">消息摘要应该是更改的一句话描述，并且长度必须小于或等于72个字符。如果拉取请求解决了问题，则应在末尾提及问题编号。如果提交不能完全解决问题，请使用 &lt;code&gt;(refs #1234)&lt;/code&gt; 代替 &lt;code&gt;(fixes #1234)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="447ba6b4ad05e52da0b122358fe9cf1656020fec" translate="yes" xml:space="preserve">
          <source>The modification does not depend on whether the object option is set to &lt;code&gt;true&lt;/code&gt;. In other words, ESLint never collects all the property specifications onto a single line, even when the object option would permit that.</source>
          <target state="translated">修改不取决于object选项是否设置为 &lt;code&gt;true&lt;/code&gt; 。换句话说，即使对象选项允许，ESLint也不会将所有属性规范收集到一行上。</target>
        </trans-unit>
        <trans-unit id="d8b8c078bf2e1f6851bd595f2c2f5cc6bbf13048" translate="yes" xml:space="preserve">
          <source>The module name can also be customized, just note that when using &lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;scoped modules&lt;/a&gt; it is not possible to omit the &lt;code&gt;eslint-config-&lt;/code&gt; prefix. Doing so would result in package naming conflicts, and thus in resolution errors in most of cases. For example a package named &lt;code&gt;@scope/eslint-config-myconfig&lt;/code&gt; vs &lt;code&gt;@scope/my-config&lt;/code&gt;, since both are valid scoped package names, the configuration should be specified as:</source>
          <target state="translated">模块名称也可以自定义，只需注意，在使用&lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;作用域模块时&lt;/a&gt;，无法省略 &lt;code&gt;eslint-config-&lt;/code&gt; 前缀。这样做将导致程序包命名冲突，从而在大多数情况下导致解析错误。例如，名为 &lt;code&gt;@scope/eslint-config-myconfig&lt;/code&gt; 与 &lt;code&gt;@scope/my-config&lt;/code&gt; 软件包，由于两者都是有效的作用域软件包名称，因此应将配置指定为：</target>
        </trans-unit>
        <trans-unit id="391d507111f772a5e622a4978aa02bebdf000901" translate="yes" xml:space="preserve">
          <source>The most important difference in v1.0.0 is that all rules are off by default. We made this change after numerous requests to allow turning off the default rules from within configuration files. While that wasn't technically feasible, it was feasible to have all rules off by default and then re-enable rules in configuration files using &lt;code&gt;extends&lt;/code&gt;. As such, we've made the &lt;code&gt;--reset&lt;/code&gt; behavior the default and removed this command line option.</source>
          <target state="translated">v1.0.0中最重要的区别是默认情况下所有规则都处于关闭状态。我们在无数次请求后做出了此更改，以允许从配置文件中关闭默认规则。尽管这在技术上不可行，但可以将默认情况下的所有规则都关闭，然后使用 &lt;code&gt;extends&lt;/code&gt; 在配置文件中重新启用规则是可行的。因此，我们将 &lt;code&gt;--reset&lt;/code&gt; 行为设为默认行为，并删除了此命令行选项。</target>
        </trans-unit>
        <trans-unit id="2981f174eb319000ec7b9dc71dff618ba3924b94" translate="yes" xml:space="preserve">
          <source>The most important method on &lt;code&gt;Linter&lt;/code&gt; is &lt;code&gt;verify()&lt;/code&gt;, which initiates linting of the given text. This method accepts three arguments:</source>
          <target state="translated">&lt;code&gt;Linter&lt;/code&gt; 上最重要的方法是 &lt;code&gt;verify()&lt;/code&gt; ，它会启动给定文本的整理。此方法接受三个参数：</target>
        </trans-unit>
        <trans-unit id="2d9309f4804540bc446c7db5a5a0e204ff20ebd8" translate="yes" xml:space="preserve">
          <source>The name of the function starts with uppercase.</source>
          <target state="translated">函数名称以大写字母开头。</target>
        </trans-unit>
        <trans-unit id="c187d7bc3b11447dcbf3b003402ff51671b83ee4" translate="yes" xml:space="preserve">
          <source>The name of the rule (string)</source>
          <target state="translated">规则的名称(字符串)</target>
        </trans-unit>
        <trans-unit id="3d05f85495e18f50c10102d3389fcbc9d5973e21" translate="yes" xml:space="preserve">
          <source>The names &lt;code&gt;&quot;semi&quot;&lt;/code&gt; and &lt;code&gt;&quot;quotes&quot;&lt;/code&gt; are the names of &lt;a href=&quot;https://eslint.org/docs/rules&quot;&gt;rules&lt;/a&gt; in ESLint. The first value is the error level of the rule and can be one of these values:</source>
          <target state="translated">名称 &lt;code&gt;&quot;semi&quot;&lt;/code&gt; 和 &lt;code&gt;&quot;quotes&quot;&lt;/code&gt; 是ESLint 中&lt;a href=&quot;https://eslint.org/docs/rules&quot;&gt;规则&lt;/a&gt;的名称。第一个值是规则的错误级别，可以是以下值之一：</target>
        </trans-unit>
        <trans-unit id="03f1e3c6076e63d911680ce1f195f2b2861a99e5" translate="yes" xml:space="preserve">
          <source>The next line starts with &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, or some other binary operator that can only be found between two tokens in a single expression.</source>
          <target state="translated">下一行开始于 &lt;code&gt;[&lt;/code&gt; ， &lt;code&gt;(&lt;/code&gt; ， &lt;code&gt;+&lt;/code&gt; ， &lt;code&gt;*&lt;/code&gt; ， &lt;code&gt;/&lt;/code&gt; ， &lt;code&gt;-&lt;/code&gt; ,， &lt;code&gt;,&lt;/code&gt; 。 &lt;code&gt;.&lt;/code&gt; 或一些其它二元运算，可以只有两个标记之间在一个单一的表达被发现。</target>
        </trans-unit>
        <trans-unit id="ed3de168e4acf1680325d171a28dd7b74b024412" translate="yes" xml:space="preserve">
          <source>The next line(s) have a &lt;code&gt;*&lt;/code&gt; aligned with the &lt;code&gt;*&lt;/code&gt; in the first line. Text is allowed on these lines.</source>
          <target state="translated">下一行（多个）具有 &lt;code&gt;*&lt;/code&gt; 与对准 &lt;code&gt;*&lt;/code&gt; 中的第一行。这些行上允许文本。</target>
        </trans-unit>
        <trans-unit id="00194fc1917a102824f66484638b388a032a7482" translate="yes" xml:space="preserve">
          <source>The node contains all of the information necessary to figure out the line and column number of the offending text as well the source text representing the node.</source>
          <target state="translated">该节点包含所有必要的信息,以找出违规文本的行号和列号,以及代表该节点的源文本。</target>
        </trans-unit>
        <trans-unit id="d45e635828bcb31db112256ea444b8c6bf3fd18e" translate="yes" xml:space="preserve">
          <source>The only acceptable time to have multiple single-line comments on successive lines is to comment out large sections of code. Multi-line comments should not be used for this purpose.</source>
          <target state="translated">唯一可以接受的在连续行上有多个单行注释的时间是注释出大段的代码。多行注释不应用于此目的。</target>
        </trans-unit>
        <trans-unit id="6a644e143491953839301b85bb8b200e474de5ab" translate="yes" xml:space="preserve">
          <source>The only time you would compare a variable against itself is when you are testing for &lt;code&gt;NaN&lt;/code&gt;. However, it is far more appropriate to use &lt;code&gt;typeof x === 'number' &amp;amp;&amp;amp; isNaN(x)&lt;/code&gt; or the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN&quot;&gt;Number.isNaN ES2015 function&lt;/a&gt; for that use case rather than leaving the reader of the code to determine the intent of self comparison.</source>
          <target state="translated">唯一将变量与自身进行比较的时间是在测试 &lt;code&gt;NaN&lt;/code&gt; 时。但是，对于该用例，更适合使用 &lt;code&gt;typeof x === 'number' &amp;amp;&amp;amp; isNaN(x)&lt;/code&gt; 或&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN&quot;&gt;Number.isNaN ES2015函数&lt;/a&gt;，而不是让代码的读者确定自我比较的意图。</target>
        </trans-unit>
        <trans-unit id="fae2f2bc90a52f0d6909f6ceb19aaafac0a26360" translate="yes" xml:space="preserve">
          <source>The opening brace should be at the end of the line that begins the compound statement; the closing brace should begin a line and be indented to the beginning of the compound statement.</source>
          <target state="translated">开头的括号应在复合语句开始的行末;结尾的括号应从一行开始,缩进到复合语句的开头。</target>
        </trans-unit>
        <trans-unit id="abfabb83ce95a74f0937675f7094af1e6695a2c0" translate="yes" xml:space="preserve">
          <source>The opening brace should be on the same line as the containing statement.</source>
          <target state="translated">开头的括号应与包含的语句在同一行。</target>
        </trans-unit>
        <trans-unit id="e9b551f3ef4076d91cd7f96a1f41ae4787a40977" translate="yes" xml:space="preserve">
          <source>The option also has a string shorthand:</source>
          <target state="translated">该选项还有一个字符串速记。</target>
        </trans-unit>
        <trans-unit id="de7031af6085176060b0ac36063990d91e8f177b" translate="yes" xml:space="preserve">
          <source>The optional exception does not excuse this case, because the entire collection of property specifications spans 4 lines, not 1.</source>
          <target state="translated">可选例外并不能为这种情况开脱,因为整个财产规格的集合跨越了4行,而不是1行。</target>
        </trans-unit>
        <trans-unit id="dcedceca0a5fbd9f7abfd655550b7f46c22973d8" translate="yes" xml:space="preserve">
          <source>The options allow labels with loop or switch statements:</source>
          <target state="translated">该选项允许标签带有循环或开关语句。</target>
        </trans-unit>
        <trans-unit id="cf49b44308f034d8aba18fe071fc2b7ec04bd224" translate="yes" xml:space="preserve">
          <source>The options available and the expected syntax for &lt;code&gt;parserOptions&lt;/code&gt; is the same as those used in &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;parserOptions&lt;/code&gt; 的可用选项和预期语法与&lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;配置中&lt;/a&gt;使用的选项相同。</target>
        </trans-unit>
        <trans-unit id="a61791ccd424eca040a7f63b8afadbed687c913a" translate="yes" xml:space="preserve">
          <source>The output will be</source>
          <target state="translated">输出将是</target>
        </trans-unit>
        <trans-unit id="f4dc89186e373e825b6dfa59c8110b3946aeee21" translate="yes" xml:space="preserve">
          <source>The output would be:</source>
          <target state="translated">产出将是:</target>
        </trans-unit>
        <trans-unit id="9789ff50f50df37207f7264a43f1a689f0688f0a" translate="yes" xml:space="preserve">
          <source>The patterns are applied against the file path relative to the directory of the config file. For example, if your config file has the path &lt;code&gt;/Users/john/workspace/any-project/.eslintrc.js&lt;/code&gt; and the file you want to lint has the path &lt;code&gt;/Users/john/workspace/any-project/lib/util.js&lt;/code&gt;, then the pattern provided in &lt;code&gt;.eslintrc.js&lt;/code&gt; will be executed against the relative path &lt;code&gt;lib/util.js&lt;/code&gt;.</source>
          <target state="translated">模式针对相对于配置文件目录的文件路径应用。例如，如果您的配置文件的路径为 &lt;code&gt;/Users/john/workspace/any-project/.eslintrc.js&lt;/code&gt; ，而您要加载的文件的路径为 &lt;code&gt;/Users/john/workspace/any-project/lib/util.js&lt;/code&gt; ，则 &lt;code&gt;.eslintrc.js&lt;/code&gt; 中提供的模式将针对相对路径 &lt;code&gt;lib/util.js&lt;/code&gt; 执行。</target>
        </trans-unit>
        <trans-unit id="d7c7d55489a5efe043679a245ed2e68741b450b6" translate="yes" xml:space="preserve">
          <source>The pitfalls of using objects as maps in JavaScript</source>
          <target state="translated">在JavaScript中使用对象作为地图的陷阱</target>
        </trans-unit>
        <trans-unit id="05157eccd9a4d06e6ff4c2778c2a6f7b853c19e7" translate="yes" xml:space="preserve">
          <source>The prefer-reflect rule will flag usage of any older method, suggesting to instead use the newer Reflect version.</source>
          <target state="translated">prefer-reflect规则将标记任何旧方法的使用,建议使用较新的Reflect版本。</target>
        </trans-unit>
        <trans-unit id="019176c59859ffc7e6915010bb0d29fc4116cb11" translate="yes" xml:space="preserve">
          <source>The primary Node.js API is &lt;code&gt;CLIEngine&lt;/code&gt;, which is the underlying utility that runs the ESLint command line interface. This object will read the filesystem for configuration and file information but will not output any results. Instead, it allows you direct access to the important information so you can deal with the output yourself.</source>
          <target state="translated">主要的Node.js API是 &lt;code&gt;CLIEngine&lt;/code&gt; ，它是运行ESLint命令行界面的基础实用程序。该对象将读取文件系统以获取配置和文件信息，但不会输出任何结果。相反，它允许您直接访问重要信息，以便您自己处理输出。</target>
        </trans-unit>
        <trans-unit id="c476b276186c6fb97acc415f8441c0d6359f3d36" translate="yes" xml:space="preserve">
          <source>The primary difference between &lt;code&gt;function&lt;/code&gt; declarations and &lt;code&gt;function expressions&lt;/code&gt; is that declarations are &lt;em&gt;hoisted&lt;/em&gt; to the top of the scope in which they are defined, which allows you to write code that uses the function before its declaration. For example:</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 声明和 &lt;code&gt;function expressions&lt;/code&gt; 之间的主要区别在于声明被&lt;em&gt;提升&lt;/em&gt;到定义它们的作用域的顶部，这使您可以在声明函数之前编写使用函数的代码。例如：</target>
        </trans-unit>
        <trans-unit id="cc5cca2ea790657770c377a55c8c2c9d38976e25" translate="yes" xml:space="preserve">
          <source>The primary reason to use asynchronous functions is typically to use the &lt;code&gt;await&lt;/code&gt; operator, such as this:</source>
          <target state="translated">使用异步函数的主要原因通常是使用 &lt;code&gt;await&lt;/code&gt; 运算符，例如：</target>
        </trans-unit>
        <trans-unit id="27f63a6807abd8b3bd2aa20888273f48ea3fa67c" translate="yes" xml:space="preserve">
          <source>The primary script to use is &lt;code&gt;npm test&lt;/code&gt;, which does several things:</source>
          <target state="translated">要使用的主要脚本是 &lt;code&gt;npm test&lt;/code&gt; ，它执行以下操作：</target>
        </trans-unit>
        <trans-unit id="88571aeb3633660582e146f8ca69889ac98fb83d" translate="yes" xml:space="preserve">
          <source>The problem is when these developers work together in a project. This rule enforces a coding style where empty newlines are allowed or disallowed after &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;const&lt;/code&gt; statements. It helps the code to look consistent across the entire project.</source>
          <target state="translated">问题是这些开发人员在项目中一起工作时。此规则强制执行一种编码样式，其中在 &lt;code&gt;var&lt;/code&gt; ， &lt;code&gt;let&lt;/code&gt; 或 &lt;code&gt;const&lt;/code&gt; 语句之后允许或不允许使用空换行符。它有助于使代码在整个项目中看起来一致。</target>
        </trans-unit>
        <trans-unit id="c7abf9c98248c9d5e551542e1f7cf64b22ee6b71" translate="yes" xml:space="preserve">
          <source>The problem you want to solve.</source>
          <target state="translated">你想解决的问题。</target>
        </trans-unit>
        <trans-unit id="fbe43fced48ce154fc594e0d7efd5a4fe22b0e58" translate="yes" xml:space="preserve">
          <source>The process of submitting a pull request is fairly straightforward and generally follows the same pattern each time:</source>
          <target state="translated">提交拉取请求的过程相当简单,一般每次都遵循相同的模式。</target>
        </trans-unit>
        <trans-unit id="c3bb0c19b313c5a8f9e87aaba0c7d42779858d8a" translate="yes" xml:space="preserve">
          <source>The proponents of these extra spaces believe it make the code easier to read and can more easily highlight potential errors, such as:</source>
          <target state="translated">这些额外空间的支持者认为,它使代码更容易阅读,并可以更容易地突出潜在的错误,如。</target>
        </trans-unit>
        <trans-unit id="842b4413185a6f29a14a60bf357af03cfc8c67fc" translate="yes" xml:space="preserve">
          <source>The pull request must have a description. The description should explain what you did and how its effects can be seen.</source>
          <target state="translated">拉取请求必须有一个描述。描述应该解释你做了什么,以及如何看到它的效果。</target>
        </trans-unit>
        <trans-unit id="9f51bbd346695224f5a3bba69d99964bfc48d685" translate="yes" xml:space="preserve">
          <source>The purpose is to avoid expressions such as &lt;code&gt;! a &amp;lt; b&lt;/code&gt; (which is equivalent to &lt;code&gt;(a ? 0 : 1) &amp;lt; b&lt;/code&gt;) when what is really intended is &lt;code&gt;!(a &amp;lt; b)&lt;/code&gt;.</source>
          <target state="translated">目的是避免使用诸如 &lt;code&gt;! a &amp;lt; b&lt;/code&gt; 当真正想要的是 &lt;code&gt;!(a &amp;lt; b)&lt;/code&gt; 时，a &amp;lt;b（等于 &lt;code&gt;(a ? 0 : 1) &amp;lt; b&lt;/code&gt; &amp;lt;b）。</target>
        </trans-unit>
        <trans-unit id="d6c661a567da1e6f27caf7616e695a2df7785021" translate="yes" xml:space="preserve">
          <source>The purpose of the &lt;code&gt;delete&lt;/code&gt; operator is to remove a property from an object. Using the &lt;code&gt;delete&lt;/code&gt; operator on a variable might lead to unexpected behavior.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 运算符的目的是从对象中删除属性。在变量上使用 &lt;code&gt;delete&lt;/code&gt; 运算符可能会导致意外行为。</target>
        </trans-unit>
        <trans-unit id="8dc19192de8fb3195f72308a36d5ed027027af0b" translate="yes" xml:space="preserve">
          <source>The range indexes of all tokens and comments must not overlap with the range of other tokens and comments.</source>
          <target state="translated">所有令牌和注释的范围索引不得与其他令牌和注释的范围重叠。</target>
        </trans-unit>
        <trans-unit id="b0a76dd0dfcefbc58816ee112b837c5543da7412" translate="yes" xml:space="preserve">
          <source>The reason for this is that &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; do type coercion which follows the rather obscure &lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;Abstract Equality Comparison Algorithm&lt;/a&gt;. For instance, the following statements are all considered &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">这是因为 &lt;code&gt;==&lt;/code&gt; 和 &lt;code&gt;!=&lt;/code&gt; 会执行类型强制，它遵循相当晦涩的&amp;ldquo; &lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;抽象相等比较算法&amp;rdquo;&lt;/a&gt;。例如，以下语句均被视为 &lt;code&gt;true&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="01205e0f79602a8ffcecdc5bb5ff7825b476d8a2" translate="yes" xml:space="preserve">
          <source>The replacement for &lt;code&gt;eslint-tester&lt;/code&gt; is called &lt;code&gt;RuleTester&lt;/code&gt;. It's a simplified version of &lt;code&gt;ESLintTester&lt;/code&gt; that's designed to work with any testing framework. This object is exposed by the package.</source>
          <target state="translated">&lt;code&gt;eslint-tester&lt;/code&gt; 的替代品称为 &lt;code&gt;RuleTester&lt;/code&gt; 。它是 &lt;code&gt;ESLintTester&lt;/code&gt; 的简化版本，旨在与任何测试框架一起使用。该对象由包装暴露。</target>
        </trans-unit>
        <trans-unit id="ec0504699dd72d01190815f60c9e51a4931c510f" translate="yes" xml:space="preserve">
          <source>The resulting configuration file will be created in the current directory.</source>
          <target state="translated">由此产生的配置文件将在当前目录下创建。</target>
        </trans-unit>
        <trans-unit id="e5b1d156a93c697ddb2fcff08bf4e5ddbeae4405" translate="yes" xml:space="preserve">
          <source>The return value is always a &lt;code&gt;Promise&lt;/code&gt;.</source>
          <target state="translated">返回值始终是 &lt;code&gt;Promise&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fed8bcfb8b284135209f390faca018017c1afbc2" translate="yes" xml:space="preserve">
          <source>The return value is an object containing the results of the linting operation. Here's an example of a report object:</source>
          <target state="translated">返回值是一个包含绒毛操作结果的对象。下面是一个报告对象的例子。</target>
        </trans-unit>
        <trans-unit id="66df5448c616e295ecb49452adc535d44bedae83" translate="yes" xml:space="preserve">
          <source>The returned value is a &lt;a href=&quot;scope-manager-interface&quot;&gt;&lt;code&gt;Scope&lt;/code&gt; object&lt;/a&gt; defined by the &lt;code&gt;eslint-scope&lt;/code&gt; package. The &lt;code&gt;Variable&lt;/code&gt; objects of global variables have some additional properties.</source>
          <target state="translated">返回的值是 &lt;code&gt;eslint-scope&lt;/code&gt; 包定义的&lt;a href=&quot;scope-manager-interface&quot;&gt; &lt;code&gt;Scope&lt;/code&gt; 对象&lt;/a&gt;。全局变量的 &lt;code&gt;Variable&lt;/code&gt; 对象具有一些其他属性。</target>
        </trans-unit>
        <trans-unit id="5fb2e185527cd54c372b96c8a8cf85ca7037ac9b" translate="yes" xml:space="preserve">
          <source>The rule &lt;code&gt;func-style&lt;/code&gt; has a default configuration of &lt;code&gt;&quot;expression&quot;&lt;/code&gt;, but in ESLint &lt;code&gt;1.x&lt;/code&gt;, &lt;code&gt;eslint:recommended&lt;/code&gt; defaulted it to &lt;code&gt;&quot;declaration&quot;&lt;/code&gt;.</source>
          <target state="translated">规则 &lt;code&gt;func-style&lt;/code&gt; 的默认配置为 &lt;code&gt;&quot;expression&quot;&lt;/code&gt; ，但是在ESLint &lt;code&gt;1.x&lt;/code&gt; 中， &lt;code&gt;eslint:recommended&lt;/code&gt; 将其默认设置为 &lt;code&gt;&quot;declaration&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21a84406c09ff8a1049a29b0ba218718b7bf5a81" translate="yes" xml:space="preserve">
          <source>The rule &lt;code&gt;no-multiple-empty-lines&lt;/code&gt; has no default exceptions, but in ESLint &lt;code&gt;1.x&lt;/code&gt;, a default from &lt;code&gt;eslint:recommended&lt;/code&gt; was applied such that a maximum of two empty lines would be permitted.</source>
          <target state="translated">规则 &lt;code&gt;no-multiple-empty-lines&lt;/code&gt; 没有默认例外，但是在ESLint &lt;code&gt;1.x&lt;/code&gt; 中，应用了 &lt;code&gt;eslint:recommended&lt;/code&gt; 的默认值，以便最多允许两个空行。</target>
        </trans-unit>
        <trans-unit id="7adf5f9d34968505ac2e7499ab22de53834a46bf" translate="yes" xml:space="preserve">
          <source>The rule always ignores directive comments such as &lt;code&gt;/* eslint-disable */&lt;/code&gt;. Additionally, unless the mode is &lt;code&gt;&quot;starred-block&quot;&lt;/code&gt;, the rule ignores JSDoc comments.</source>
          <target state="translated">该规则始终忽略指令注释，例如 &lt;code&gt;/* eslint-disable */&lt;/code&gt; 。另外，除非模式为 &lt;code&gt;&quot;starred-block&quot;&lt;/code&gt; ，否则规则将忽略JSDoc注释。</target>
        </trans-unit>
        <trans-unit id="1171a6f455e8b040c25a7ba3151c5477780f5c03" translate="yes" xml:space="preserve">
          <source>The rule can also be configured to discourage the use of parens when they are not required:</source>
          <target state="translated">该规则还可以配置为在不需要时不鼓励使用parens。</target>
        </trans-unit>
        <trans-unit id="f8d163ee49a74afcc2907a73bba3064a962e824c" translate="yes" xml:space="preserve">
          <source>The rule cannot easily verify that the assignment is safe (e.g. if an assigned variable is local and would not be readable from anywhere else while the function is paused).</source>
          <target state="translated">该规则不容易验证赋值是否安全(例如,如果一个赋值的变量是本地的,在函数暂停时不能从其他地方读取)。</target>
        </trans-unit>
        <trans-unit id="4e9a5ee2475613eb335126f52cf5aaa9b33b67b5" translate="yes" xml:space="preserve">
          <source>The rule disallows octal literals.</source>
          <target state="translated">该规则不允许使用八进制文字。</target>
        </trans-unit>
        <trans-unit id="bed31bfa847f3bb2487f9e377612a105ec30b864" translate="yes" xml:space="preserve">
          <source>The rule does not disallow all use of the &lt;code&gt;RegExp&lt;/code&gt; constructor. It should be still used for dynamically generated regular expressions.</source>
          <target state="translated">该规则并不禁止所有使用 &lt;code&gt;RegExp&lt;/code&gt; 构造函数。它仍应用于动态生成的正则表达式。</target>
        </trans-unit>
        <trans-unit id="888d43f5f339c3eab2911b0abe2728f2ab5aeaab" translate="yes" xml:space="preserve">
          <source>The rule has a second object with a single key, &lt;code&gt;enforceForRenamedProperties&lt;/code&gt;, which determines whether the &lt;code&gt;object&lt;/code&gt; destructuring applies to renamed variables.</source>
          <target state="translated">该规则具有第二个对象，该对象具有单个键 &lt;code&gt;enforceForRenamedProperties&lt;/code&gt; ，该 &lt;code&gt;object&lt;/code&gt; 确定对象解构是否适用于重命名的变量。</target>
        </trans-unit>
        <trans-unit id="ac3e6cce45a94e0899d9d17de8ece5be87643b66" translate="yes" xml:space="preserve">
          <source>The rule naming conventions for ESLint are fairly simple:</source>
          <target state="translated">ESLint的规则命名惯例相当简单。</target>
        </trans-unit>
        <trans-unit id="6a2d5c1c9e0896db23badf6274b8965eaac23cce" translate="yes" xml:space="preserve">
          <source>The rule object itself (see &lt;a href=&quot;working-with-rules&quot;&gt;&quot;working with rules&quot;&lt;/a&gt;)</source>
          <target state="translated">规则对象本身（请参阅&lt;a href=&quot;working-with-rules&quot;&gt;&amp;ldquo;使用规则&amp;rdquo;&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="573e671e86a4cf56bbe5f205a42e8701c29ec3d5" translate="yes" xml:space="preserve">
          <source>The rule offers one object option, &lt;code&gt;allowAllPropertiesOnSameLine&lt;/code&gt; (a deprecated synonym is &lt;code&gt;allowMultiplePropertiesPerLine&lt;/code&gt;). If you set it to &lt;code&gt;true&lt;/code&gt;, object literals such as the first two above, with all property specifications on the same line, will be permitted, but one like</source>
          <target state="translated">该规则提供一个对象选项 &lt;code&gt;allowAllPropertiesOnSameLine&lt;/code&gt; （不赞成使用的同义词是 &lt;code&gt;allowMultiplePropertiesPerLine&lt;/code&gt; ）。如果将其设置为 &lt;code&gt;true&lt;/code&gt; ，则允许使用诸如上面的前两个之类的对象文字，并且所有属性说明都在同一行上，但是类似</target>
        </trans-unit>
        <trans-unit id="eb4b25449f8d19c4a4b92c230c486f587789325f" translate="yes" xml:space="preserve">
          <source>The rule prohibits the colocation on any line of at least 1 character of one property specification with at least 1 character of any other property specification. For example, the rule prohibits</source>
          <target state="translated">该规则禁止在任何线路上将一个属性规范的至少1个字符与任何其他属性规范的至少1个字符并列。例如,该规则禁止</target>
        </trans-unit>
        <trans-unit id="bdcc4c0ed6a72ea505652fd2189129b9ba9488a3" translate="yes" xml:space="preserve">
          <source>The rule should warn against code that tries to compare against -0, since that will not work as intended. That is, code like x === -0 will pass for both +0 and -0. The author probably intended Object.is(x, -0).</source>
          <target state="translated">这条规则应该对试图与-0进行比较的代码发出警告,因为这不会像预期的那样工作,也就是说,像x ===-0这样的代码对+0和-0都会通过。也就是说,像x ===-0这样的代码对+0和-0都会通过。作者可能是想让Object.is(x,-0)。</target>
        </trans-unit>
        <trans-unit id="9b89d3d9863252a32c9946759fd7f3504dc7b79d" translate="yes" xml:space="preserve">
          <source>The rule takes a single option - an array of possible callback names - which may include object methods. The default callback names are &lt;code&gt;callback&lt;/code&gt;, &lt;code&gt;cb&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">该规则采用一个选项-可能的回调名称数组-其中可能包含对象方法。默认的回调名称是 &lt;code&gt;callback&lt;/code&gt; ， &lt;code&gt;cb&lt;/code&gt; 和 &lt;code&gt;next&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e78c1edcadc43d22698299cf6fb661f963ea1c1d" translate="yes" xml:space="preserve">
          <source>The rule takes a single string option: the name of the error parameter. The default is &lt;code&gt;&quot;err&quot;&lt;/code&gt;.</source>
          <target state="translated">该规则采用单个字符串选项：error参数的名称。默认值为 &lt;code&gt;&quot;err&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="73945e310046d0fe600a76487db931bee8eb7989" translate="yes" xml:space="preserve">
          <source>The rule takes an option which specifies when it should be applied. It can be set to one of the following values:</source>
          <target state="translated">该规则有一个选项,指定何时应用。它可以设置为下列数值之一:</target>
        </trans-unit>
        <trans-unit id="c17458aebea2edf7596655f8173de5c166baa09e" translate="yes" xml:space="preserve">
          <source>The rule takes one option, a string, which must contain one of the following values:</source>
          <target state="translated">该规则只有一个选项,即一个字符串,它必须包含以下值之一:</target>
        </trans-unit>
        <trans-unit id="1f25147392b3d78c1603fd60eeee2d70ca798f11" translate="yes" xml:space="preserve">
          <source>The rule takes one option, a string:</source>
          <target state="translated">该规则只需要一个选项,一个字符串。</target>
        </trans-unit>
        <trans-unit id="742233dad80fe18547618108d6a2b86bff76a785" translate="yes" xml:space="preserve">
          <source>The rule takes one option, an object, which has two keys &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; having boolean values &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">该规则采用一个选项，即一个对象，该对象 &lt;code&gt;after&lt;/code&gt; 布尔值 &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt; &lt;code&gt;before&lt;/code&gt; 和之后都有两个键。</target>
        </trans-unit>
        <trans-unit id="827020a96c9caecec65cc7a0552676f015b27688" translate="yes" xml:space="preserve">
          <source>The rule takes one option, an object, which has two keys &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; having boolean values &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;before&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, space is enforced before semicolons and if it's &lt;code&gt;false&lt;/code&gt;, space is disallowed before semicolons. If &lt;code&gt;after&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, space is enforced after semicolons and if it's &lt;code&gt;false&lt;/code&gt;, space is disallowed after semicolons. The &lt;code&gt;after&lt;/code&gt; option will be only applied if a semicolon is not at the end of line.</source>
          <target state="translated">该规则采用一个选项，即一个对象，该对象 &lt;code&gt;after&lt;/code&gt; 布尔值 &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt; &lt;code&gt;before&lt;/code&gt; 和之后都有两个键。如果 &lt;code&gt;before&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则在分号之前强制使用空格，如果为 &lt;code&gt;false&lt;/code&gt; ，则在分号之前禁止使用空格。如果 &lt;code&gt;after&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则在分号后强制使用空格，如果为 &lt;code&gt;false&lt;/code&gt; ，则在分号后禁止使用空格。在 &lt;code&gt;after&lt;/code&gt; 选项将如果分号不在行尾仅应用于。</target>
        </trans-unit>
        <trans-unit id="96c7f241e413db9d83cd41a7c8e69e1a5a46c14d" translate="yes" xml:space="preserve">
          <source>The rule takes one or more strings as options: the names of restricted identifiers.</source>
          <target state="translated">该规则将一个或多个字符串作为选项:受限标识符的名称。</target>
        </trans-unit>
        <trans-unit id="4375aa6346f33b27f068e7c881fdcd22248263e0" translate="yes" xml:space="preserve">
          <source>The rule takes one or more strings as options: the names of restricted modules.</source>
          <target state="translated">该规则需要一个或多个字符串作为选项:受限模块的名称。</target>
        </trans-unit>
        <trans-unit id="a9cca4aaa304d533ffa99e0d4d45692dc6af248a" translate="yes" xml:space="preserve">
          <source>The rule takes one or two options. The first is a string, which can be:</source>
          <target state="translated">该规则需要一个或两个选项。第一个是一个字符串,它可以是:</target>
        </trans-unit>
        <trans-unit id="2047f79a374a9de4c018efebf01b37f2c42427b1" translate="yes" xml:space="preserve">
          <source>The rule takes two options.</source>
          <target state="translated">该规则采取两种方案。</target>
        </trans-unit>
        <trans-unit id="47e30af986fb27902392df154c435e433c1df14f" translate="yes" xml:space="preserve">
          <source>The rule takes two options:</source>
          <target state="translated">该规则采取两种方案。</target>
        </trans-unit>
        <trans-unit id="8014e10667a7389e5554d8b3b067d38491926c25" translate="yes" xml:space="preserve">
          <source>The rules for ASI are relatively straightforward: As once described by Isaac Schlueter, a newline character always ends a statement, just like a semicolon, &lt;strong&gt;except&lt;/strong&gt; where one of the following is true:</source>
          <target state="translated">ASI的规则相对简单：正如Isaac Schlueter所述，换行符总是以分号结尾，就像分号一样，&lt;strong&gt;除非&lt;/strong&gt;满足以下条件之一：</target>
        </trans-unit>
        <trans-unit id="031820acd6f073ce407b24b6015d596945b36976" translate="yes" xml:space="preserve">
          <source>The rules in your custom rules directory must follow the same format as bundled rules to work properly. You can also specify multiple locations for custom rules by including multiple &lt;code&gt;--rulesdir&lt;/code&gt; options:</source>
          <target state="translated">自定义规则目录中的规则必须遵循与捆绑规则相同的格式，才能正常工作。您还可以通过包含多个 &lt;code&gt;--rulesdir&lt;/code&gt; 选项为自定义规则指定多个位置：</target>
        </trans-unit>
        <trans-unit id="4f407752be68d13cfd5b93589acf43759c14d2f6" translate="yes" xml:space="preserve">
          <source>The same rule does apply to scoped packages:</source>
          <target state="translated">同样的规则确实适用于范围内的包。</target>
        </trans-unit>
        <trans-unit id="bfddd41eadd81befb51598e392aaccc185efc70f" translate="yes" xml:space="preserve">
          <source>The second argument is an object with one key, &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt;. The value is an array of string patterns which are considered exceptions to the rule. It is important to note that the exceptions are ignored if the first argument is &lt;code&gt;&quot;never&quot;&lt;/code&gt;. Exceptions cannot be mixed.</source>
          <target state="translated">第二个参数是带有一个键 &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; 的对象。该值是一个字符串模式数组，被认为是该规则的例外。重要的是要注意，如果第一个参数为 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 则忽略异常。例外不能混在一起。</target>
        </trans-unit>
        <trans-unit id="2e888e2ddf0328509e3f74a9a7c6bebd8faf02e4" translate="yes" xml:space="preserve">
          <source>The second is to save the file wherever you would like and pass its location to the CLI using the &lt;code&gt;-c&lt;/code&gt; option, such as:</source>
          <target state="translated">第二种是将文件保存在任何位置，然后使用 &lt;code&gt;-c&lt;/code&gt; 选项将其位置传递给CLI ，例如：</target>
        </trans-unit>
        <trans-unit id="414ed43decb6eceb64655ac8086b20e4b3916b91" translate="yes" xml:space="preserve">
          <source>The second one is an object for more fine-grained configuration when the first option is &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt;. Currently, the only available option is &lt;code&gt;requireReturnForObjectLiteral&lt;/code&gt;, a boolean property. It's &lt;code&gt;false&lt;/code&gt; by default. If set to &lt;code&gt;true&lt;/code&gt;, it requires braces and an explicit return for object literals.</source>
          <target state="translated">当第一个选项是 &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; 时，第二个对象是用于更细粒度配置的对象。当前，唯一可用的选项是 &lt;code&gt;requireReturnForObjectLiteral&lt;/code&gt; ，这是一个布尔型属性。这是 &lt;code&gt;false&lt;/code&gt; 默认。如果设置为 &lt;code&gt;true&lt;/code&gt; ，则需要大括号和对象文字的显式返回。</target>
        </trans-unit>
        <trans-unit id="13894c1b5ba8814ae6cea3f9f081dfbf8a0d8858" translate="yes" xml:space="preserve">
          <source>The selector &quot;&lt;code&gt;Identifier&lt;/code&gt;&quot; will match all &lt;code&gt;Identifier&lt;/code&gt; nodes in the program. In this case, the selector will match the nodes for &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;, and &lt;code&gt;baz&lt;/code&gt;.</source>
          <target state="translated">选择器&amp;ldquo; &lt;code&gt;Identifier&lt;/code&gt; &amp;rdquo;将匹配程序中的所有 &lt;code&gt;Identifier&lt;/code&gt; 节点。在这种情况下，选择器将匹配 &lt;code&gt;foo&lt;/code&gt; ， &lt;code&gt;bar&lt;/code&gt; 和 &lt;code&gt;baz&lt;/code&gt; 的节点。</target>
        </trans-unit>
        <trans-unit id="8edd9e143d8665e59cc0b39cb5fd1623512f2c40" translate="yes" xml:space="preserve">
          <source>The shortened object literal syntax for generators is not affected by this rule.</source>
          <target state="translated">生成器的缩短对象文字语法不受此规则影响。</target>
        </trans-unit>
        <trans-unit id="05a4cde718543d121082d5debd9a3bdb1d814202" translate="yes" xml:space="preserve">
          <source>The simplest example is to use just &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt;:</source>
          <target state="translated">最简单的示例是仅使用 &lt;code&gt;node&lt;/code&gt; 和 &lt;code&gt;message&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="58e6895bfed7fd7cc1d658c75e9fdd7ba3d0ec89" translate="yes" xml:space="preserve">
          <source>The simplest selector is just a node type. A node type selector will match all nodes with the given type. For example, consider the following program:</source>
          <target state="translated">最简单的选择器就是一个节点类型。节点类型选择器将匹配所有给定类型的节点。例如,考虑以下程序。</target>
        </trans-unit>
        <trans-unit id="62b57f47427459031359008bfc01d02938d4e4ea" translate="yes" xml:space="preserve">
          <source>The single-declaration school of thought is based in pre-ECMAScript 6 behaviors, where there was no such thing as block scope, only function scope. Since all &lt;code&gt;var&lt;/code&gt; statements are hoisted to the top of the function anyway, some believe that declaring all variables in a single declaration at the top of the function removes confusion around scoping rules.</source>
          <target state="translated">单声明的思想流派基于ECMAScript 6之前的行为，其中没有诸如块范围之类的东西，只有函数范围之类的东西。由于无论如何所有的 &lt;code&gt;var&lt;/code&gt; 语句都被提升到函数的顶部，因此有人认为在函数顶部的单个声明中声明所有变量可以消除范围界定规则的混乱。</target>
        </trans-unit>
        <trans-unit id="98081cf0b97551ce142d7f451c1b647ed7d9f73b" translate="yes" xml:space="preserve">
          <source>The source file for a rule exports an object with the following properties.</source>
          <target state="translated">规则的源文件会导出一个具有以下属性的对象。</target>
        </trans-unit>
        <trans-unit id="13c2d1557a31408916c7784e491c197a095f73af" translate="yes" xml:space="preserve">
          <source>The spacing after the semicolon if it is the first token in the line.</source>
          <target state="translated">如果分号是该行的第一个标记,则分号后的间距。</target>
        </trans-unit>
        <trans-unit id="cb8aafac65e7fc97800fb3d3dac293cf6812e694" translate="yes" xml:space="preserve">
          <source>The spacing around the semicolon in a for loop with an empty condition (&lt;code&gt;for(;;)&lt;/code&gt;).</source>
          <target state="translated">在条件 &lt;code&gt;for(;;)&lt;/code&gt; 空（for（;;））的for循环中，分号周围的间距。</target>
        </trans-unit>
        <trans-unit id="e3e73e8052d68647147779e7d358e891ec3d4c7d" translate="yes" xml:space="preserve">
          <source>The spacing before the semicolon if it is after an opening parenthesis (&lt;code&gt;(&lt;/code&gt; or &lt;code&gt;{&lt;/code&gt;), or the spacing after the semicolon if it is before a closing parenthesis (&lt;code&gt;)&lt;/code&gt; or &lt;code&gt;}&lt;/code&gt;). That spacing is checked by &lt;code&gt;space-in-parens&lt;/code&gt; or &lt;code&gt;block-spacing&lt;/code&gt;.</source>
          <target state="translated">如果分号前的空格在圆括号（ &lt;code&gt;(&lt;/code&gt; 或 &lt;code&gt;{&lt;/code&gt; ）后面），或者分号后的空格在圆括号（ &lt;code&gt;)&lt;/code&gt; 或 &lt;code&gt;}&lt;/code&gt; 之前）。该间距通过有效 &lt;code&gt;space-in-parens&lt;/code&gt; 或 &lt;code&gt;block-spacing&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="115bcb8edde69d7ab538f77d4ffd79b7c96251f6" translate="yes" xml:space="preserve">
          <source>The special value &lt;code&gt;null&lt;/code&gt; should be used only in the following situations:</source>
          <target state="translated">特殊值 &lt;code&gt;null&lt;/code&gt; 仅应在以下情况下使用：</target>
        </trans-unit>
        <trans-unit id="55d71491bd24bf8e9266ef7d9b3ed94580c8ef81" translate="yes" xml:space="preserve">
          <source>The standard style, in which commas are placed at the end of the current line</source>
          <target state="translated">标准样式,逗号放在当前行的末尾。</target>
        </trans-unit>
        <trans-unit id="66b17246512ea6227166b244bbc0ac43dcd2b7c9" translate="yes" xml:space="preserve">
          <source>The statement beginning keyword, such as &lt;code&gt;if&lt;/code&gt;, should be followed by one space and the opening brace should be preceded by a space.</source>
          <target state="translated">语句的开始关键字（例如 &lt;code&gt;if&lt;/code&gt; ）后应该有一个空格，而大括号前应有一个空格。</target>
        </trans-unit>
        <trans-unit id="940d15ed0a28b1df513a69296639eec227beace3" translate="yes" xml:space="preserve">
          <source>The statement has an unclosed paren, array literal, or object literal or ends in some other way that is not a valid way to end a statement. (For instance, ending with &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;,&lt;/code&gt;.)</source>
          <target state="translated">该语句具有未封闭的括号，数组文字或对象文字，或者以某种不是结束语句的有效方式的其他方式结束。（例如，结尾 &lt;code&gt;.&lt;/code&gt; 或者 &lt;code&gt;,&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="ad8b8f54b2a420ddeed65e63d39098cd71d92cbc" translate="yes" xml:space="preserve">
          <source>The static analysis of this rule does not detect that the program calls the callback from within a nested function or an immediately-invoked function expression (IIFE).</source>
          <target state="translated">该规则的静态分析不会检测到程序从嵌套函数或立即调用函数表达式(IIFE)内调用回调。</target>
        </trans-unit>
        <trans-unit id="f3fcd362b8cea026256d5c99fc33540bb48255c4" translate="yes" xml:space="preserve">
          <source>The static analysis of this rule does not detect that the program calls the callback if it is an argument of a function (for example, &lt;code&gt;setTimeout&lt;/code&gt;).</source>
          <target state="translated">如果该规则是函数的参数（例如 &lt;code&gt;setTimeout&lt;/code&gt; ），则对该规则的静态分析不会检测到程序是否调用了回调。</target>
        </trans-unit>
        <trans-unit id="b0d50eb0c6a5a75a5254c188fa79ce03846654c4" translate="yes" xml:space="preserve">
          <source>The static analysis of this rule does not detect that the program calls the callback only one time in each branch of an &lt;code&gt;if&lt;/code&gt; statement.</source>
          <target state="translated">此规则的静态分析不会检测到程序在 &lt;code&gt;if&lt;/code&gt; 语句的每个分支中仅调用一次回调。</target>
        </trans-unit>
        <trans-unit id="2f6cfcf93f0774ec1b281ebd4cefac2327a634e4" translate="yes" xml:space="preserve">
          <source>The string and object formats can be freely mixed in the configuration as needed.</source>
          <target state="translated">字符串和对象格式可以根据需要在配置中自由混合。</target>
        </trans-unit>
        <trans-unit id="dd57f78073587288601a6f8bd191a69e0806d4ed" translate="yes" xml:space="preserve">
          <source>The string option does not check async arrow function expressions for backward compatibility.</source>
          <target state="translated">字符串选项不检查异步箭头函数表达式的向后兼容性。</target>
        </trans-unit>
        <trans-unit id="311d87885350cd8d74996d157aa1c8fa01351e72" translate="yes" xml:space="preserve">
          <source>The syntax for AST selectors is similar to the syntax for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot;&gt;CSS selectors&lt;/a&gt;. If you've used CSS selectors before, the syntax for AST selectors should be easy to understand.</source>
          <target state="translated">AST选择器的语法类似于&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot;&gt;CSS选择器&lt;/a&gt;的语法。如果您以前使用过CSS选择器，则AST选择器的语法应该易于理解。</target>
        </trans-unit>
        <trans-unit id="224d6b2ad3ce554f3d0f9f8c4d66cbd9efd8197b" translate="yes" xml:space="preserve">
          <source>The syntax to specify restricted imports looks like this:</source>
          <target state="translated">指定受限进口的语法是这样的。</target>
        </trans-unit>
        <trans-unit id="b7efceeec030359c477714b00506090fb8984485" translate="yes" xml:space="preserve">
          <source>The ternary operator is used to conditionally assign a value to a variable. Some believe that the use of ternary operators leads to unclear code.</source>
          <target state="translated">三元运算符用于有条件地给一个变量赋值。有人认为使用三元运算符会导致代码不清晰。</target>
        </trans-unit>
        <trans-unit id="d10f8a42895796da61c03baea8c9b4879c335514" translate="yes" xml:space="preserve">
          <source>The ternary operator should be used only for assigning values conditionally and never as a shortcut for an &lt;code&gt;if&lt;/code&gt; statement.</source>
          <target state="translated">三元运算符应仅用于有条件地分配值，而不能用作 &lt;code&gt;if&lt;/code&gt; 语句的快捷方式。</target>
        </trans-unit>
        <trans-unit id="f096cdc8dc30e248084bfa4304f67adc152c3c50" translate="yes" xml:space="preserve">
          <source>The testing takes a few minutes to complete. If any tests fail, that likely means one or more parts of the environment setup didn't complete correctly. The upstream tests always pass.</source>
          <target state="translated">测试需要几分钟的时间才能完成。如果任何测试失败,很可能意味着环境设置的一个或多个部分没有正确完成。上游测试总是能通过。</target>
        </trans-unit>
        <trans-unit id="7bbb1f82d6c0a19e1279187e629a297da44271f1" translate="yes" xml:space="preserve">
          <source>The thing that makes ESLint different from other linters is the ability to define custom rules at runtime. This is perfect for rules that are specific to your project or company and wouldn't make sense for ESLint to ship with. With runtime rules, you don't have to wait for the next version of ESLint or be disappointed that your rule isn't general enough to apply to the larger JavaScript community, just write your rules and include them at runtime.</source>
          <target state="translated">ESLint与其他linters的不同之处在于它能够在运行时定义自定义规则。这对于那些特定于您的项目或公司的规则来说是完美的,而且ESLint也没有任何意义。有了运行时规则,您不必等待ESLint的下一个版本,也不必因为您的规则不够通用而对更大的JavaScript社区感到失望,只需写下您的规则并在运行时包含它们。</target>
        </trans-unit>
        <trans-unit id="aeba12234ad663f0a0ec6980e71a7b41b7d994ef" translate="yes" xml:space="preserve">
          <source>The thinking is that it's better to always explicitly state what the default behavior should be so that it's clear whether or not the developer forgot to include the default behavior by mistake.</source>
          <target state="translated">我们的想法是,最好总是明确地说明默认行为应该是什么,这样就可以清楚地知道开发者是否因为错误而忘记加入默认行为。</target>
        </trans-unit>
        <trans-unit id="da7d071d3f4e1e51df3ea8518936e97a10e59509" translate="yes" xml:space="preserve">
          <source>The three error levels allow you fine-grained control over how ESLint applies rules (for more configuration options and details, see the &lt;a href=&quot;user-guide/configuring&quot;&gt;configuration docs&lt;/a&gt;).</source>
          <target state="translated">这三个错误级别使您可以细粒度控制ESLint如何应用规则（有关更多配置选项和详细信息，请参阅&lt;a href=&quot;user-guide/configuring&quot;&gt;配置文档&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="41d769ab16b1f7f3308de0b859c5b9860b2b26e5" translate="yes" xml:space="preserve">
          <source>The top-level report object also has &lt;code&gt;errorCount&lt;/code&gt; and &lt;code&gt;warningCount&lt;/code&gt; which give the exact number of errors and warnings respectively on all the files. Additionally, &lt;code&gt;usedDeprecatedRules&lt;/code&gt; signals any deprecated rules used and their replacement (if available). Specifically, it is array of objects with properties like so:</source>
          <target state="translated">顶级报告对象还具有 &lt;code&gt;errorCount&lt;/code&gt; 和 &lt;code&gt;warningCount&lt;/code&gt; ，它们分别提供所有文件上的错误和警告的确切数量。此外， &lt;code&gt;usedDeprecatedRules&lt;/code&gt; 会发出信号通知已使用的任何不赞成使用的规则及其替换（如果有）。具体来说，它是具有以下属性的对象数组：</target>
        </trans-unit>
        <trans-unit id="df600fd43354fe093f2997a1e86f286e369b6a13" translate="yes" xml:space="preserve">
          <source>The top-level report object has a &lt;code&gt;results&lt;/code&gt; array containing all linting results for files that had warnings or errors (any files that did not produce a warning or error are omitted). Each file result includes:</source>
          <target state="translated">顶级报告对象具有一个 &lt;code&gt;results&lt;/code&gt; 数组，其中包含具有警告或错误的文件的所有掉毛结果（所有未产生警告或错误的文件都将被省略）。每个文件的结果包括：</target>
        </trans-unit>
        <trans-unit id="594a7b21bd7855de18adf0c69dd40a240b1def08" translate="yes" xml:space="preserve">
          <source>The two properties, &lt;code&gt;VariableDeclarator&lt;/code&gt; and &lt;code&gt;AssignmentExpression&lt;/code&gt;, which can be used to turn on or off the destructuring requirement for &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;. By default, all values are true.</source>
          <target state="translated">两个属性 &lt;code&gt;VariableDeclarator&lt;/code&gt; 和 &lt;code&gt;AssignmentExpression&lt;/code&gt; 可用于打开或关闭 &lt;code&gt;array&lt;/code&gt; 和 &lt;code&gt;object&lt;/code&gt; 的解构要求。默认情况下，所有值均为true。</target>
        </trans-unit>
        <trans-unit id="e8bf7a9dd0b016497dca472797a392ec1424c8b6" translate="yes" xml:space="preserve">
          <source>The two properties, &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;, can be used to turn on or off the destructuring requirement for each of those types independently. By default, both are true.</source>
          <target state="translated">可以使用 &lt;code&gt;array&lt;/code&gt; 和 &lt;code&gt;object&lt;/code&gt; 这两个属性来分别打开或关闭这些类型中每个类型的解构要求。默认情况下，两者均为真。</target>
        </trans-unit>
        <trans-unit id="d35a58b0a18350e1534de85ad73ac8b06f837e84" translate="yes" xml:space="preserve">
          <source>The two properties, &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;, which can be used to turn on or off the destructuring requirement for each of those types independently. By default, both are true.</source>
          <target state="translated">可以使用两个属性 &lt;code&gt;array&lt;/code&gt; 和 &lt;code&gt;object&lt;/code&gt; 来分别打开或关闭这些类型的销毁需求。默认情况下，两者均为真。</target>
        </trans-unit>
        <trans-unit id="4f16a3bf5e4813936b00b45e231c747c7726a1d4" translate="yes" xml:space="preserve">
          <source>The updates of imported bindings by ES Modules cause runtime errors.</source>
          <target state="translated">ES模块对导入的绑定的更新会导致运行时错误。</target>
        </trans-unit>
        <trans-unit id="5514e8b27889c92b548abd8ebff5998bdf418288" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;arguments.caller&lt;/code&gt; and &lt;code&gt;arguments.callee&lt;/code&gt; make several code optimizations impossible. They have been deprecated in future versions of JavaScript and their use is forbidden in ECMAScript 5 while in strict mode.</source>
          <target state="translated">使用 &lt;code&gt;arguments.caller&lt;/code&gt; 和 &lt;code&gt;arguments.callee&lt;/code&gt; 使得无法进行几种代码优化。在将来的JavaScript版本中已不推荐使用它们，并且在严格模式下ECMAScript 5中禁止使用它们。</target>
        </trans-unit>
        <trans-unit id="2924f354dcd960a1ab58164e2009cd5c61e0aa99" translate="yes" xml:space="preserve">
          <source>The use of bitwise operators in JavaScript is very rare and often &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;|&lt;/code&gt; is simply a mistyped &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt;, which will lead to unexpected behavior.</source>
          <target state="translated">使用在JavaScript位运算符是非常罕见的，往往 &lt;code&gt;&amp;amp;&lt;/code&gt; 或 &lt;code&gt;|&lt;/code&gt; 只是一个错误的 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 或 &lt;code&gt;||&lt;/code&gt; ，这将导致意外行为。</target>
        </trans-unit>
        <trans-unit id="e8c966ed7def78def5c80c88dca826c0a9cd55fd" translate="yes" xml:space="preserve">
          <source>The version of ESLint you are using.</source>
          <target state="translated">您正在使用的ESLint版本。</target>
        </trans-unit>
        <trans-unit id="eac9f3d4f7ff9fa27be37b9559de95a3dfd24dc8" translate="yes" xml:space="preserve">
          <source>Then any code used within the same scope would not get the global &lt;code&gt;undefined&lt;/code&gt;, but rather the local version with a very different meaning.</source>
          <target state="translated">这样，在同一范围内使用的任何代码都不会得到全局 &lt;code&gt;undefined&lt;/code&gt; ，而是具有不同含义的本地版本。</target>
        </trans-unit>
        <trans-unit id="91dec8db4a7ce736df71ea88ef47e6b7cca8d86f" translate="yes" xml:space="preserve">
          <source>Then the &lt;code&gt;array&lt;/code&gt; part of this rule is not recommended, as destructuring does not match this use case very well.</source>
          <target state="translated">然后不建议使用此规则的 &lt;code&gt;array&lt;/code&gt; 部分，因为解构与该用例非常不匹配。</target>
        </trans-unit>
        <trans-unit id="1e7df54ba4b2f3d2b8de3ddfb22cf55076b84b07" translate="yes" xml:space="preserve">
          <source>Then you can change to:</source>
          <target state="translated">那么你可以改成。</target>
        </trans-unit>
        <trans-unit id="6ece258a004458918b4a9b465e59a062ce1c5448" translate="yes" xml:space="preserve">
          <source>Then you should enable ES6 using &lt;code&gt;ecmaVersion&lt;/code&gt;:</source>
          <target state="translated">然后，您应该使用 &lt;code&gt;ecmaVersion&lt;/code&gt; 启用ES6 ：</target>
        </trans-unit>
        <trans-unit id="99179c89c62e68c70478cf6465b8ea928c3d5143" translate="yes" xml:space="preserve">
          <source>Then you should move &lt;code&gt;ecmaFeatures&lt;/code&gt; under &lt;code&gt;parserOptions&lt;/code&gt;:</source>
          <target state="translated">然后你要移走 &lt;code&gt;ecmaFeatures&lt;/code&gt; 下 &lt;code&gt;parserOptions&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3039d0ca1aa2f7e206fbb9a1bd4f394c4c999ec2" translate="yes" xml:space="preserve">
          <source>Then, assuming you're using the package name &lt;code&gt;eslint-config-myconfig&lt;/code&gt;, you can access the additional config via:</source>
          <target state="translated">然后，假设您使用的软件包名称为 &lt;code&gt;eslint-config-myconfig&lt;/code&gt; ，则可以通过以下方式访问其他配置：</target>
        </trans-unit>
        <trans-unit id="f25801971afeae4363e40fabd963bdc80f985e55" translate="yes" xml:space="preserve">
          <source>Then, in your project that wants to use your shareable config, type:</source>
          <target state="translated">然后,在你想使用你的可共享配置的项目中,输入。</target>
        </trans-unit>
        <trans-unit id="353db37a3c8a86c69c78b807d1c427cfb81575aa" translate="yes" xml:space="preserve">
          <source>Then, you can install the ESLint Yeoman generator:</source>
          <target state="translated">然后,你可以安装ESLint Yeoman生成器。</target>
        </trans-unit>
        <trans-unit id="7429e55770a7db6e1f799e481661c23075ea68a0" translate="yes" xml:space="preserve">
          <source>There are a lot of command line flags for ESLint and this section explains what they do.</source>
          <target state="translated">ESLint有很多命令行标志,本节将解释它们的作用。</target>
        </trans-unit>
        <trans-unit id="80da262ce40592a7a4ec9cf4f30bca5562293bb5" translate="yes" xml:space="preserve">
          <source>There are a lot of unit tests included with ESLint to make sure that we're keeping on top of code quality. This section explains how to run the unit tests.</source>
          <target state="translated">ESLint中包含了很多单元测试,以确保我们的代码质量。本节将介绍如何运行单元测试。</target>
        </trans-unit>
        <trans-unit id="cdec16b05bc1e8b3e8a535ea7297a5e3f4035c95" translate="yes" xml:space="preserve">
          <source>There are also cases where the usage of &lt;code&gt;=&amp;gt;&lt;/code&gt; can be ambiguous and should be rewritten to more clearly show the author's intent:</source>
          <target state="translated">在某些情况下， &lt;code&gt;=&amp;gt;&lt;/code&gt; 的用法可能含糊不清，应重写以更清楚地表明作者的意图：</target>
        </trans-unit>
        <trans-unit id="320a38d150f5e795565c18aa62c12c2350485cbd" translate="yes" xml:space="preserve">
          <source>There are also some properties you can access:</source>
          <target state="translated">还有一些属性你可以进入。</target>
        </trans-unit>
        <trans-unit id="6665f51b7045a2fee788e7afb911686880b53609" translate="yes" xml:space="preserve">
          <source>There are cases where it may be safe for your application to ignore errors, however only ignore errors if you are confident that some other form of monitoring will help you catch the problem.</source>
          <target state="translated">在某些情况下,忽略错误对你的应用程序来说可能是安全的,但是只有当你确信其他形式的监控会帮助你发现问题时才会忽略错误。</target>
        </trans-unit>
        <trans-unit id="77159dc5778802775842bc1ad78d4c7a0b0534fa" translate="yes" xml:space="preserve">
          <source>There are five events related to code paths, and you can define event handlers in rules.</source>
          <target state="translated">有五个事件与代码路径有关,你可以在规则中定义事件处理程序。</target>
        </trans-unit>
        <trans-unit id="e2c161633c01783c2c492dc2f82954fa87f98f0e" translate="yes" xml:space="preserve">
          <source>There are four different styles and the default member syntax sort order is:</source>
          <target state="translated">有四种不同的风格,默认的成员语法排序顺序是。</target>
        </trans-unit>
        <trans-unit id="73182a6c9f6d8f8a463d75ad9c8c1f7a1954215f" translate="yes" xml:space="preserve">
          <source>There are many commonly used aliases for &lt;code&gt;this&lt;/code&gt; such as &lt;code&gt;that&lt;/code&gt;, &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;me&lt;/code&gt;. It is desirable to ensure that whichever alias the team agrees upon is used consistently throughout the application.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; ，有很多常用的别名，例如 &lt;code&gt;that&lt;/code&gt; ， &lt;code&gt;self&lt;/code&gt; 或 &lt;code&gt;me&lt;/code&gt; 。希望确保在整个应用程序中一致使用团队同意的任何别名。</target>
        </trans-unit>
        <trans-unit id="778d71a993fc4934f67d793df316de2759b96d65" translate="yes" xml:space="preserve">
          <source>There are rest parameters in ES2015. We can use that feature for variadic functions instead of the &lt;code&gt;arguments&lt;/code&gt; variable.</source>
          <target state="translated">ES2015中有其余参数。我们可以将该功能用于可变函数而不是 &lt;code&gt;arguments&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="117709bbbf6fc954ac87eb9e1642b49467ac9606" translate="yes" xml:space="preserve">
          <source>There are several common guidelines which require specific indentation of nested blocks and statements, like:</source>
          <target state="translated">有几个常见的准则要求嵌套块和语句有特定的缩进,比如。</target>
        </trans-unit>
        <trans-unit id="09bf0b1004131d5cbb653018ebf059cb68d11044" translate="yes" xml:space="preserve">
          <source>There are several pieces of information that can be configured:</source>
          <target state="translated">有几个信息可以配置。</target>
        </trans-unit>
        <trans-unit id="1c953a0cd08a66ee80bdb67484900a4f8c19fb94" translate="yes" xml:space="preserve">
          <source>There are shareable configs available for most JSCS presets. The equivalent shareable configs for each JSCS preset are listed in the following table:</source>
          <target state="translated">大多数JSCS预置都有可共享的配置。下表列出了每个JSCS预置的等效可共享配置。</target>
        </trans-unit>
        <trans-unit id="7939cad36b767508efc1de1d7ff66357f07843a6" translate="yes" xml:space="preserve">
          <source>There are some cases where you might want to call a callback function more than once. In those cases this rule may lead to incorrect behavior. In those cases you may want to reserve a special name for those callbacks and not include that in the list of callbacks that trigger warnings.</source>
          <target state="translated">在某些情况下,你可能想调用一个回调函数一次以上。在这些情况下,这个规则可能会导致不正确的行为。在这些情况下,你可能想为这些回调保留一个特殊的名称,而不是将其包含在会触发警告的回调列表中。</target>
        </trans-unit>
        <trans-unit id="8dbaf6481b7dab508d130fe84b6a20188b6da785" translate="yes" xml:space="preserve">
          <source>There are three primitive types in JavaScript that have wrapper objects: string, number, and boolean. These are represented by the constructors &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, and &lt;code&gt;Boolean&lt;/code&gt;, respectively. The primitive wrapper types are used whenever one of these primitive values is read, providing them with object-like capabilities such as methods. Behind the scenes, an object of the associated wrapper type is created and then destroyed, which is why you can call methods on primitive values, such as:</source>
          <target state="translated">JavaScript中有三种具有包装对象的原始类型：字符串，数字和布尔值。这些分别由构造函数 &lt;code&gt;String&lt;/code&gt; ， &lt;code&gt;Number&lt;/code&gt; 和 &lt;code&gt;Boolean&lt;/code&gt; 表示。每当读取这些原始值之一时，就会使用原始包装器类型，从而为它们提供类似对象的功能，例如方法。在幕后，创建了一个关联包装类型的对象，然后将其销毁，这就是为什么您可以对原始值调用方法的原因，例如：</target>
        </trans-unit>
        <trans-unit id="09b78e56913ec7f5884521cf5e33b733c08a8425" translate="yes" xml:space="preserve">
          <source>There are two formats for a rule's exported &lt;code&gt;schema&lt;/code&gt;. The first is a full JSON Schema object describing all possible options the rule accepts, including the rule's error level as the first argument and any optional arguments thereafter.</source>
          <target state="translated">规则的导出 &lt;code&gt;schema&lt;/code&gt; 有两种格式。第一个是完整的JSON模式对象，描述了该规则接受的所有可能选项，包括规则的错误级别作为第一个参数，其后包括任何可选参数。</target>
        </trans-unit>
        <trans-unit id="6e4161ef27c6d8d2328512ff0c53aa33ebb66d6d" translate="yes" xml:space="preserve">
          <source>There are two options for this rule:</source>
          <target state="translated">这条规则有两种选择。</target>
        </trans-unit>
        <trans-unit id="c5b03151c21194f8185c6c4c16037975222ef285" translate="yes" xml:space="preserve">
          <source>There are two schools of thought in this regard:</source>
          <target state="translated">在这方面有两派观点。</target>
        </trans-unit>
        <trans-unit id="187de8e977c674d5524ac7c3cf7fd7ff80275095" translate="yes" xml:space="preserve">
          <source>There are two ways of defining functions in JavaScript: &lt;code&gt;function&lt;/code&gt; declarations and &lt;code&gt;function&lt;/code&gt; expressions. Declarations contain the &lt;code&gt;function&lt;/code&gt; keyword first, followed by a name and then its arguments and the function body, for example:</source>
          <target state="translated">在JavaScript中定义函数的方式有两种： &lt;code&gt;function&lt;/code&gt; 声明和 &lt;code&gt;function&lt;/code&gt; 表达式。声明首先包含 &lt;code&gt;function&lt;/code&gt; 关键字，然后是名称，然后是其参数和函数体，例如：</target>
        </trans-unit>
        <trans-unit id="1e031938fbb5ab85e074efc0c3921234cc1f1c89" translate="yes" xml:space="preserve">
          <source>There are two ways to create a regular expression:</source>
          <target state="translated">有两种方法可以创建正则表达式。</target>
        </trans-unit>
        <trans-unit id="d52e9915f94a31af6aaead1be831dbb80f676371" translate="yes" xml:space="preserve">
          <source>There are two ways to use configuration files.</source>
          <target state="translated">使用配置文件有两种方式。</target>
        </trans-unit>
        <trans-unit id="d1a8bd447439a90516a50974c91e0f6c8ad77c25" translate="yes" xml:space="preserve">
          <source>There are valid reasons to use assignment operators in conditional statements. However, it can be difficult to tell whether a specific assignment was intentional.</source>
          <target state="translated">在条件语句中使用赋值运算符有合理的理由。但是,很难判断一个特定的赋值是否是故意的。</target>
        </trans-unit>
        <trans-unit id="4715777b3c61a89e3562896681adc37a424d282e" translate="yes" xml:space="preserve">
          <source>There are, however, some occasions when you must use quotes:</source>
          <target state="translated">然而,在某些场合,你必须使用引号。</target>
        </trans-unit>
        <trans-unit id="eb6f41837f8cfadd5c03780bba3f02ff7b3c971d" translate="yes" xml:space="preserve">
          <source>There are, however, some who prefer to only use braces when there is more than one statement to be executed.</source>
          <target state="translated">然而,也有一些人喜欢只在有多个语句要执行时使用大括号。</target>
        </trans-unit>
        <trans-unit id="342cd48e476dc7314107f25dac7c78229501f3ce" translate="yes" xml:space="preserve">
          <source>There is actually a long history of using dangling underscores to indicate &quot;private&quot; members of objects in JavaScript (though JavaScript doesn't have truly private members, this convention served as a warning). This began with SpiderMonkey adding nonstandard methods such as &lt;code&gt;__defineGetter__()&lt;/code&gt;. The intent with the underscores was to make it obvious that this method was special in some way. Since that time, using a single underscore prefix has become popular as a way to indicate &quot;private&quot; members of objects.</source>
          <target state="translated">实际上，使用悬挂的下划线指示JavaScript中对象的&amp;ldquo;私有&amp;rdquo;成员已有很长的历史（尽管JavaScript没有真正的私有成员，该约定作为警告）。这始于SpiderMonkey添加非标准方法，例如 &lt;code&gt;__defineGetter__()&lt;/code&gt; 。下划线的目的是使该方法在某种程度上很特别。从那时起，使用单个下划线前缀已成为指示对象&amp;ldquo;私有&amp;rdquo;成员的一种方式。</target>
        </trans-unit>
        <trans-unit id="4a96991a903b3e1ff68ea9a24be9b087a375a49f" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;Linter.version&lt;/code&gt; property that you can read without instantiating &lt;code&gt;Linter&lt;/code&gt;:</source>
          <target state="translated">还有一个 &lt;code&gt;Linter.version&lt;/code&gt; 属性，您无需实例化 &lt;code&gt;Linter&lt;/code&gt; 就可以读取它：</target>
        </trans-unit>
        <trans-unit id="871b96618532f5a624a5eebc653ef9799b4af97b" translate="yes" xml:space="preserve">
          <source>There is an explicit way to create a global variable when needed, by assigning to a property of the global object.</source>
          <target state="translated">有一种显式的方法可以在需要的时候创建一个全局变量,通过分配给全局对象的一个属性。</target>
        </trans-unit>
        <trans-unit id="a847459418c85beaf5623fd3b6978b33df19c866" translate="yes" xml:space="preserve">
          <source>There is no hard and fast rule about whether empty lines should precede &lt;code&gt;return&lt;/code&gt; statements in JavaScript. However, clearly delineating where a function is returning can greatly increase the readability and clarity of the code. For example:</source>
          <target state="translated">关于空行是否应该在JavaScript中的 &lt;code&gt;return&lt;/code&gt; 语句之前没有严格的规定。但是，清楚地描述函数将返回的位置可以大大提高代码的可读性和清晰度。例如：</target>
        </trans-unit>
        <trans-unit id="7c688c9ecfeeb2e718d9853398cce5aa37907224" translate="yes" xml:space="preserve">
          <source>There is one situation where initializing to &lt;code&gt;undefined&lt;/code&gt; behaves differently than omitting the initialization, and that's when a &lt;code&gt;var&lt;/code&gt; declaration occurs inside of a loop. For example:</source>
          <target state="translated">在一种情况下，初始化为 &lt;code&gt;undefined&lt;/code&gt; 的行为与省略初始化的行为不同，那就是在循环内部发生 &lt;code&gt;var&lt;/code&gt; 声明时。例如：</target>
        </trans-unit>
        <trans-unit id="f393cd7001d9c02a6a4db52334b4f6aa81c0dd84" translate="yes" xml:space="preserve">
          <source>There may be a part of a Node.js application that is responsible for determining the correct exit code to return upon exiting. In that case, you should turn this rule off to allow proper handling of the exit code.</source>
          <target state="translated">Node.js 应用程序中可能有一部分负责确定退出时返回的正确退出代码。在这种情况下,您应该关闭此规则,以便正确处理退出代码。</target>
        </trans-unit>
        <trans-unit id="3f8f96957f0116bd3dee02cc31450b17131c06e6" translate="yes" xml:space="preserve">
          <source>There should be just one variable declaration for all variables in the function. That declaration typically appears at the top of the function.</source>
          <target state="translated">函数中的所有变量应该只有一个变量声明。这个声明通常出现在函数的顶部。</target>
        </trans-unit>
        <trans-unit id="af6c3ae1870f67e9ba1a6645267df7a0ed8e6f39" translate="yes" xml:space="preserve">
          <source>There's a &lt;code&gt;jquery&lt;/code&gt; environment defined in this plugin. To use the environment in ESLint, you would use the unprefixed plugin name, followed by a slash, followed by the environment name. So if this plugin were named &lt;code&gt;eslint-plugin-myplugin&lt;/code&gt;, then you would set the environment in your configuration to be &lt;code&gt;&quot;myplugin/jquery&quot;&lt;/code&gt;.</source>
          <target state="translated">在此插件中定义了一个 &lt;code&gt;jquery&lt;/code&gt; 环境。要在ESLint中使用环境，可以使用未加前缀的插件名称，后跟斜杠，然后是环境名称。因此，如果此插件名为 &lt;code&gt;eslint-plugin-myplugin&lt;/code&gt; ，则可以将配置中的环境设置为 &lt;code&gt;&quot;myplugin/jquery&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4649a897c49ce8c22f4047b05ff4f46b049d69e6" translate="yes" xml:space="preserve">
          <source>Therefore, for any array &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;foo.indexOf(NaN)&lt;/code&gt; and &lt;code&gt;foo.lastIndexOf(NaN)&lt;/code&gt; will always return &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">因此，对于任何数组 &lt;code&gt;foo&lt;/code&gt; ， &lt;code&gt;foo.indexOf(NaN)&lt;/code&gt; 和 &lt;code&gt;foo.lastIndexOf(NaN)&lt;/code&gt; 将始终返回 &lt;code&gt;-1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee735b7f7a5f024f90771cc2fdec6e27abf7cb89" translate="yes" xml:space="preserve">
          <source>Therefore, the &lt;code&gt;u&lt;/code&gt; flag lets us work better with regular expressions.</source>
          <target state="translated">因此， &lt;code&gt;u&lt;/code&gt; 标志使我们可以更好地使用正则表达式。</target>
        </trans-unit>
        <trans-unit id="772ede07a4703392f30e23da9503d4982ba7ac6d" translate="yes" xml:space="preserve">
          <source>Therefore, use &lt;code&gt;Number.isNaN()&lt;/code&gt; or global &lt;code&gt;isNaN()&lt;/code&gt; functions to test whether a value is &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">因此，请使用 &lt;code&gt;Number.isNaN()&lt;/code&gt; 或全局 &lt;code&gt;isNaN()&lt;/code&gt; 函数来测试值是否为 &lt;code&gt;NaN&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="201cc4664da2bdb9c50a7d4f0ca2e44472bb57f6" translate="yes" xml:space="preserve">
          <source>These annotations may be used with either single-line or multi-line comments and should follow the same formatting rules as the general comment type. Examples:</source>
          <target state="translated">这些注释可与单行或多行注释一起使用,并应遵循与一般注释类型相同的格式规则。例如:</target>
        </trans-unit>
        <trans-unit id="4c52137db447105931b557eed8e46933af4bdec4" translate="yes" xml:space="preserve">
          <source>These are the most common scenarios recommended in different style guides:</source>
          <target state="translated">这些是不同风格指南中推荐的最常见的情况。</target>
        </trans-unit>
        <trans-unit id="acdb0470966c593cea7812a42d4a917d42c23356" translate="yes" xml:space="preserve">
          <source>These can be combined as much as you like. To make all methods exceptions (thereby rendering this rule useless), use &lt;code&gt;prefer-reflect: [2, { &quot;exceptions&quot;: [&quot;apply&quot;, &quot;call&quot;, &quot;defineProperty&quot;, &quot;getOwnPropertyDescriptor&quot;, &quot;getPrototypeOf&quot;, &quot;setPrototypeOf&quot;, &quot;isExtensible&quot;, &quot;getOwnPropertyNames&quot;, &quot;preventExtensions&quot;, &quot;delete&quot;] }]&lt;/code&gt;</source>
          <target state="translated">这些可以任意组合。要使所有方法都异常（从而使该规则无效），请使用 &lt;code&gt;prefer-reflect: [2, { &quot;exceptions&quot;: [&quot;apply&quot;, &quot;call&quot;, &quot;defineProperty&quot;, &quot;getOwnPropertyDescriptor&quot;, &quot;getPrototypeOf&quot;, &quot;setPrototypeOf&quot;, &quot;isExtensible&quot;, &quot;getOwnPropertyNames&quot;, &quot;preventExtensions&quot;, &quot;delete&quot;] }]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16b0a2f3a34d0787ea10fc5517dc6d1c9a76c309" translate="yes" xml:space="preserve">
          <source>These environments are not mutually exclusive, so you can define more than one at a time.</source>
          <target state="translated">这些环境并不相互排斥,因此您可以同时定义多个环境。</target>
        </trans-unit>
        <trans-unit id="2e07ccde13ac7d3cc1e366526a62fc1dd9f6bdde" translate="yes" xml:space="preserve">
          <source>These examples allow &lt;code&gt;var1&lt;/code&gt; to be overwritten in your code, but disallow it for &lt;code&gt;var2&lt;/code&gt;.</source>
          <target state="translated">这些示例允许在代码中覆盖 &lt;code&gt;var1&lt;/code&gt; ，但不允许 &lt;code&gt;var2&lt;/code&gt; 覆盖它。</target>
        </trans-unit>
        <trans-unit id="5b4016a79f53202f5d9431f3853fbef74d3b8610" translate="yes" xml:space="preserve">
          <source>These methods return an array of comments that appear directly before, directly after, and inside nodes, respectively. They are useful for rules that need to check comments in relation to a given node or token.</source>
          <target state="translated">这些方法分别返回直接出现在节点之前、直接出现在节点之后和节点内部的注释数组。它们对于需要检查与给定节点或标记相关的注释的规则非常有用。</target>
        </trans-unit>
        <trans-unit id="9ebcefc4be23db9deefd68d4795e030b4db83239" translate="yes" xml:space="preserve">
          <source>These objects may not:</source>
          <target state="translated">这些物体可能不。</target>
        </trans-unit>
        <trans-unit id="b293d56025264cb725163337a97e77e49487f3f5" translate="yes" xml:space="preserve">
          <source>These objects' responsibilities are:</source>
          <target state="translated">这些对象的责任是:</target>
        </trans-unit>
        <trans-unit id="dd3da68786bd031bdc775145f224453e0dd6417c" translate="yes" xml:space="preserve">
          <source>These options allow unused expressions &lt;em&gt;only if all&lt;/em&gt; of the code paths either directly change the state (for example, assignment statement) or could have &lt;em&gt;side effects&lt;/em&gt; (for example, function call).</source>
          <target state="translated">&lt;em&gt;仅当所有&lt;/em&gt;代码路径都直接更改状态（例如，赋值语句）或可能有&lt;em&gt;副作用&lt;/em&gt;（例如，函数调用）时，这些选项才允许使用未使用的表达式。</target>
        </trans-unit>
        <trans-unit id="d4ca9fe55e32c924b83ce46d998ac795270b1873" translate="yes" xml:space="preserve">
          <source>These rules from older versions of ESLint (before the [deprecation policy](/docs/user-guide/rule-deprecation) existed) have been replaced by newer rules:</source>
          <target state="translated">这些来自 ESLint 旧版本的规则(在 [deprecation policy](/docs/user-guide/rule-deprecation)存在之前)已经被新的规则所取代。</target>
        </trans-unit>
        <trans-unit id="1c10097ffacc1c485ac6032b4e5f64b78ed11f9f" translate="yes" xml:space="preserve">
          <source>These rules have been deprecated in accordance with the [deprecation policy](/docs/user-guide/rule-deprecation), and replaced by newer rules:</source>
          <target state="translated">根据[弃用政策](/docs/user-guide/rule-deprecation),这些规则已被弃用,并被新规则取代。</target>
        </trans-unit>
        <trans-unit id="5b4a9c4f9cab970df6595988dd4e0581f563d2df" translate="yes" xml:space="preserve">
          <source>These rules relate to ES6, also known as ES2015:</source>
          <target state="translated">这些规则涉及ES6,也就是ES2015。</target>
        </trans-unit>
        <trans-unit id="94068d755b38f00b794f755ab1776f6ba8d5af3d" translate="yes" xml:space="preserve">
          <source>These rules relate to better ways of doing things to help you avoid problems:</source>
          <target state="translated">这些规则涉及到更好的做事方法,以帮助你避免问题。</target>
        </trans-unit>
        <trans-unit id="6407bf99d5998c9e0fef54717f8eb0ec5ebfd745" translate="yes" xml:space="preserve">
          <source>These rules relate to code running in Node.js, or in browsers with CommonJS:</source>
          <target state="translated">这些规则涉及到在Node.js中运行的代码,或者在使用CommonJS的浏览器中运行的代码。</target>
        </trans-unit>
        <trans-unit id="2c800b49f52cfb2c02793919534a03b1de5ad3a3" translate="yes" xml:space="preserve">
          <source>These rules relate to possible syntax or logic errors in JavaScript code:</source>
          <target state="translated">这些规则与JavaScript代码中可能出现的语法或逻辑错误有关。</target>
        </trans-unit>
        <trans-unit id="7d762fa25dfbf7bdd07460cee8d398e88a51d344" translate="yes" xml:space="preserve">
          <source>These rules relate to strict mode directives:</source>
          <target state="translated">这些规则与严格模式指令有关。</target>
        </trans-unit>
        <trans-unit id="c8321a3f35b15048cb55738fb106514521cfe231" translate="yes" xml:space="preserve">
          <source>These rules relate to style guidelines, and are therefore quite subjective:</source>
          <target state="translated">这些规则涉及到风格准则,因此是相当主观的。</target>
        </trans-unit>
        <trans-unit id="0d081ea96820ff5654d3db473d43162f105b1f8c" translate="yes" xml:space="preserve">
          <source>These rules relate to variable declarations:</source>
          <target state="translated">这些规则与变量声明有关。</target>
        </trans-unit>
        <trans-unit id="cfba5d7e75af3b7e2807c06e5034c9af4096fa98" translate="yes" xml:space="preserve">
          <source>Things to Avoid</source>
          <target state="translated">要避免的事情</target>
        </trans-unit>
        <trans-unit id="1988fde0b51715dd909d42c7a4aa01100331ad2f" translate="yes" xml:space="preserve">
          <source>Think you found a problem? We'd love to hear about it. This section explains how to submit a bug, the type of information we need to properly verify it, and the overall process.</source>
          <target state="translated">你认为你发现了一个问题?我们很乐意听到它。本节解释了如何提交错误,我们需要正确验证的信息类型,以及整体流程。</target>
        </trans-unit>
        <trans-unit id="f06f2b5e218ca06ae1bd67c1145935c9e1aabdba" translate="yes" xml:space="preserve">
          <source>Thinking of comments in the context of tokens is more predictable and easier to reason about than thinking about comment tokens in the context of AST nodes</source>
          <target state="translated">在标记的上下文中思考评论,比在AST节点的上下文中思考评论标记更可预测,也更容易推理。</target>
        </trans-unit>
        <trans-unit id="2050eef925ba3c231aec703d38a33757acef6aa9" translate="yes" xml:space="preserve">
          <source>Third, it creates the looping path from &lt;code&gt;body&lt;/code&gt; segment to &lt;code&gt;update&lt;/code&gt; segment. At this time, the next segment has existed already, so the &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; event is not fired. It fires &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; instead.</source>
          <target state="translated">第三，它创建了从 &lt;code&gt;body&lt;/code&gt; 段到 &lt;code&gt;update&lt;/code&gt; 段的循环路径。目前，下一个段已经存在，因此不会触发 &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; 事件。它会触发 &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="415be4f10478e1046c67a83032a6f4a8f849fe2a" translate="yes" xml:space="preserve">
          <source>This allows you to avoid retyping error messages. It also prevents errors reported in different sections of your rule from having out-of-date messages.</source>
          <target state="translated">这样可以避免重新输入错误信息。它还可以防止在规则的不同部分报告的错误信息过期。</target>
        </trans-unit>
        <trans-unit id="13fa28b1d868c6cd569942c00fe12d33c91d2c69" translate="yes" xml:space="preserve">
          <source>This automatically starts Mocha and runs all tests in the &lt;code&gt;tests&lt;/code&gt; directory. You need only add yours and it will automatically be picked up when running tests.</source>
          <target state="translated">这会自动启动Mocha并运行 &lt;code&gt;tests&lt;/code&gt; 目录中的所有测试。您只需要添加您的内容，它将在运行测试时自动提取。</target>
        </trans-unit>
        <trans-unit id="cb4bd44fc1b6c85e9764f5ab63ec69c2b7dbea0b" translate="yes" xml:space="preserve">
          <source>This behavior was relying on comment attachment happening at the parser level, which does not happen anymore, to ensure that all comments would be accounted for</source>
          <target state="translated">这种行为依赖于在解析器级别上发生的注释附件,现在不会再发生了,以确保所有的注释都会被记录下来。</target>
        </trans-unit>
        <trans-unit id="f18fe7d0f8dbbc8445c9163810cbe362da97229f" translate="yes" xml:space="preserve">
          <source>This change was made to help new ESLint users who are frequently confused that ESLint does nothing by default besides reporting parser errors. We anticipate this change will have minimal impact on most established users because you're more likely to have configuration files already.</source>
          <target state="translated">这个变化是为了帮助ESLint的新用户,他们经常感到困惑,因为ESLint除了报告解析器错误之外,默认情况下什么也不做。我们预计这个变化对大多数老用户的影响很小,因为你更可能已经有了配置文件。</target>
        </trans-unit>
        <trans-unit id="bc26638966505856d54d65c1178254da87bced09" translate="yes" xml:space="preserve">
          <source>This code could appear in any module and will stop the entire application when &lt;code&gt;somethingBadHappened&lt;/code&gt; is truthy. This doesn't give the application any chance to respond to the error. It's usually better to throw an error and allow the application to handle it appropriately:</source>
          <target state="translated">该代码可以出现在任何模块中，并且当 &lt;code&gt;somethingBadHappened&lt;/code&gt; 为真时，它将停止整个应用程序。这不会给应用程序任何机会响应该错误。通常最好抛出一个错误并允许应用程序适当地处理它：</target>
        </trans-unit>
        <trans-unit id="6a1a606524e7605868cb030ae98dda8a50f6c11c" translate="yes" xml:space="preserve">
          <source>This code is an example of a good use of &lt;code&gt;bind()&lt;/code&gt; for setting the value of &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">这段代码很好地使用了 &lt;code&gt;bind()&lt;/code&gt; 来设置 &lt;code&gt;this&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="188ba6fbc8e6fe291e33a72f0675afd9594eb52a" translate="yes" xml:space="preserve">
          <source>This code is equivalent to:</source>
          <target state="translated">这个代码相当于:</target>
        </trans-unit>
        <trans-unit id="753da87c758e9ab0fcb2b2a117dfb70f5117fba4" translate="yes" xml:space="preserve">
          <source>This code is likely the result of refactoring where a variable was removed from the concatenation (such as &lt;code&gt;&quot;a&quot; + b + &quot;b&quot;&lt;/code&gt;). In such a case, the concatenation isn't important and the code can be rewritten as:</source>
          <target state="translated">该代码可能是重构从串联中删除变量的结果（例如 &lt;code&gt;&quot;a&quot; + b + &quot;b&quot;&lt;/code&gt; ）。在这种情况下，连接并不重要，可以将代码重写为：</target>
        </trans-unit>
        <trans-unit id="9f3828fead792474a4d824e09a1e9cb9a66c9622" translate="yes" xml:space="preserve">
          <source>This code looks like it will sum the results of calling &lt;code&gt;getPageLength(1)&lt;/code&gt; and &lt;code&gt;getPageLength(2)&lt;/code&gt;, but in reality the final value of &lt;code&gt;totalLength&lt;/code&gt; will only be the length of one of the two pages. The bug is in the statement &lt;code&gt;totalLength += await getPageLength(pageNum);&lt;/code&gt;. This statement first reads an initial value of &lt;code&gt;totalLength&lt;/code&gt;, then calls &lt;code&gt;getPageLength(pageNum)&lt;/code&gt; and waits for that Promise to fulfill. Finally, it sets the value of &lt;code&gt;totalLength&lt;/code&gt; to the sum of &lt;code&gt;await getPageLength(pageNum)&lt;/code&gt; and the &lt;em&gt;initial&lt;/em&gt; value of &lt;code&gt;totalLength&lt;/code&gt;. If the &lt;code&gt;totalLength&lt;/code&gt; variable is updated in a separate function call during the time that the &lt;code&gt;getPageLength(pageNum)&lt;/code&gt; Promise is pending, that update will be lost because the new value is overwritten without being read.</source>
          <target state="translated">此代码看起来将总结调用的结果 &lt;code&gt;getPageLength(1)&lt;/code&gt; 和 &lt;code&gt;getPageLength(2)&lt;/code&gt; ，但在现实中的终值 &lt;code&gt;totalLength&lt;/code&gt; 只会是两个网页其中之一的长度。该错误在语句 &lt;code&gt;totalLength += await getPageLength(pageNum);&lt;/code&gt; 。该声明首先读取的初始值 &lt;code&gt;totalLength&lt;/code&gt; ，然后调用 &lt;code&gt;getPageLength(pageNum)&lt;/code&gt; ，并在这个承诺履行等待。最后，它设置的值 &lt;code&gt;totalLength&lt;/code&gt; 到的总和 &lt;code&gt;await getPageLength(pageNum)&lt;/code&gt; 和&lt;em&gt;初始&lt;/em&gt;的值 &lt;code&gt;totalLength&lt;/code&gt; 。如果总 &lt;code&gt;totalLength&lt;/code&gt; 在 &lt;code&gt;getPageLength(pageNum)&lt;/code&gt; Promise待处理期间，将在单独的函数调用中更新变量，该更新将丢失，因为新值将被覆盖而不会被读取。</target>
        </trans-unit>
        <trans-unit id="684f202df475b56b50fb6fd729383d048e7a34fd" translate="yes" xml:space="preserve">
          <source>This command is used for intensive profiling of ESLint using Chrome Developer Tools. It starts a development server that runs through three profiles:</source>
          <target state="translated">该命令用于使用 Chrome 开发工具对 ESLint 进行密集剖析。它启动一个开发服务器,通过三个配置文件运行。</target>
        </trans-unit>
        <trans-unit id="ad05d4ce57e7c2b8d71120892681f0fd7b8a2986" translate="yes" xml:space="preserve">
          <source>This comment specifies the &quot;double&quot; option for the &lt;a href=&quot;../rules/quotes&quot;&gt;&lt;code&gt;quotes&lt;/code&gt;&lt;/a&gt; rule. The first item in the array is always the rule severity (number or string).</source>
          <target state="translated">此注释为&lt;a href=&quot;../rules/quotes&quot;&gt; &lt;code&gt;quotes&lt;/code&gt; &lt;/a&gt;规则指定&amp;ldquo;双&amp;rdquo;选项。数组中的第一项始终是规则严重性（数字或字符串）。</target>
        </trans-unit>
        <trans-unit id="c7f36a8542f8ca497d5ce67e7924c214e3e2553a" translate="yes" xml:space="preserve">
          <source>This configuration would require blank lines after all directive prologues, like the &lt;a href=&quot;lines-around-directive&quot;&gt;lines-around-directive&lt;/a&gt; rule.</source>
          <target state="translated">此配置在所有指令序言之后都需要空白行，例如，&lt;a href=&quot;lines-around-directive&quot;&gt;行周围指令&lt;/a&gt;规则。</target>
        </trans-unit>
        <trans-unit id="9dbff86ed4fd7400b47ff47a0dd5eda756a4d90b" translate="yes" xml:space="preserve">
          <source>This configuration would require blank lines after every sequence of variable declarations, like the &lt;a href=&quot;newline-after-var&quot;&gt;newline-after-var&lt;/a&gt; rule.</source>
          <target state="translated">此配置在每个变量声明序列之后都需要空白行，例如&lt;a href=&quot;newline-after-var&quot;&gt;newline-after-var&lt;/a&gt;规则。</target>
        </trans-unit>
        <trans-unit id="1e26ce16017121a05fb352bf06244e7be23d0979" translate="yes" xml:space="preserve">
          <source>This configuration would require blank lines before all &lt;code&gt;return&lt;/code&gt; statements, like the &lt;a href=&quot;newline-before-return&quot;&gt;newline-before-return&lt;/a&gt; rule.</source>
          <target state="translated">此配置在所有 &lt;code&gt;return&lt;/code&gt; 语句之前需要空白行，例如&lt;a href=&quot;newline-before-return&quot;&gt;newline-before-return&lt;/a&gt;规则。</target>
        </trans-unit>
        <trans-unit id="6b66a4e4cfa3e14529aa4fa898e5f7863716da98" translate="yes" xml:space="preserve">
          <source>This confusion led to the suggestion that you always use the radix parameter to &lt;code&gt;parseInt()&lt;/code&gt; to eliminate unintended consequences. So instead of doing this:</source>
          <target state="translated">这种混淆导致建议您始终使用基数参数 &lt;code&gt;parseInt()&lt;/code&gt; 来消除意外的后果。因此，不要这样做：</target>
        </trans-unit>
        <trans-unit id="83e16d377b13bc51965962233959b781d483d56b" translate="yes" xml:space="preserve">
          <source>This creates a &lt;code&gt;.eslintrc.json&lt;/code&gt; with the equivalent rules from &lt;code&gt;.jscsrc.json&lt;/code&gt;.</source>
          <target state="translated">这将创建一个 &lt;code&gt;.eslintrc.json&lt;/code&gt; 从等价规则 &lt;code&gt;.jscsrc.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="35b6118aa09ead4292a552cdefd4bf660c36121a" translate="yes" xml:space="preserve">
          <source>This defines two global variables, &lt;code&gt;var1&lt;/code&gt; and &lt;code&gt;var2&lt;/code&gt;. If you want to optionally specify that these global variables can be written to (rather than only being read), then you can set each with a &lt;code&gt;&quot;writable&quot;&lt;/code&gt; flag:</source>
          <target state="translated">这定义了两个全局变量 &lt;code&gt;var1&lt;/code&gt; 和 &lt;code&gt;var2&lt;/code&gt; 。如果您希望有选择地指定可以写入这些全局变量（而不是仅读取它们），则可以为每个全局变量设置一个 &lt;code&gt;&quot;writable&quot;&lt;/code&gt; 标志：</target>
        </trans-unit>
        <trans-unit id="3ca397cac4d7710b96570663c5edc9bb83de7535" translate="yes" xml:space="preserve">
          <source>This document was written based on the implementation of &lt;a href=&quot;https://github.com/eslint/eslint-scope&quot;&gt;eslint-scope&lt;/a&gt;, a fork of &lt;a href=&quot;https://github.com/estools/escope&quot;&gt;escope&lt;/a&gt;, and deprecates some members ESLint is not using.</source>
          <target state="translated">本文档基于&lt;a href=&quot;https://github.com/eslint/eslint-scope&quot;&gt;eslint-scope&lt;/a&gt;的实现（escope的一个分支）而&lt;a href=&quot;https://github.com/estools/escope&quot;&gt;编写&lt;/a&gt;，并弃用了ESLint未使用的某些成员。</target>
        </trans-unit>
        <trans-unit id="2b59eaeb1ba84dbe4d0f62e580e35a843870fadf" translate="yes" xml:space="preserve">
          <source>This does not apply to ES modules since the module code is implicitly in &lt;code&gt;strict&lt;/code&gt; mode.</source>
          <target state="translated">这不适用于ES模块，因为模块代码隐式处于 &lt;code&gt;strict&lt;/code&gt; 模式下。</target>
        </trans-unit>
        <trans-unit id="fb51c33d469f4a38ec64dfb8e217007e9ea2b0d3" translate="yes" xml:space="preserve">
          <source>This enables Node.js and Mocha environments.</source>
          <target state="translated">这样就可以实现Node.js和Mocha环境。</target>
        </trans-unit>
        <trans-unit id="96d81fc1760eedae232eea6c704c64e8eb216135" translate="yes" xml:space="preserve">
          <source>This error is raised to highlight a piece of code that may not work as you expect it to and could also indicate a misunderstanding of how the language works. Your code may run without any problems if you do not fix this error, but in some situations it could behave unexpectedly.</source>
          <target state="translated">该错误的出现是为了突出显示一段可能无法按照您的期望工作的代码,也可能表明对语言工作方式的误解。如果你不修复这个错误,你的代码可能会毫无问题地运行,但在某些情况下,它可能会出现意外的行为。</target>
        </trans-unit>
        <trans-unit id="1319046b42ad8a423f26271e5a8f9e3897afb48f" translate="yes" xml:space="preserve">
          <source>This error is raised to highlight a potentially confusing and potentially pointless piece of code. There are almost no situations in which you would need to compare something to itself.</source>
          <target state="translated">提出这个错误是为了强调一段可能会引起混淆和可能毫无意义的代码。几乎没有任何情况下,你需要将某物与自身进行比较。</target>
        </trans-unit>
        <trans-unit id="e531d4e1a4e5ab163fb0aa73581a1e29f4d1b370" translate="yes" xml:space="preserve">
          <source>This error is raised to highlight the use of a bad practice. By passing a string to the Function constructor, you are requiring the engine to parse that string much in the way it has to when you call the &lt;code&gt;eval&lt;/code&gt; function.</source>
          <target state="translated">出现此错误是为了突出说明不良做法的使用。通过将字符串传递给Function构造函数，您需要引擎以调用 &lt;code&gt;eval&lt;/code&gt; 函数时所需的方式来解析该字符串。</target>
        </trans-unit>
        <trans-unit id="f2f1895eb1d8a20e008d9ead1693d3546a812ebc" translate="yes" xml:space="preserve">
          <source>This error occurs when a label is used to mark a statement that is not an iteration or switch</source>
          <target state="translated">当一个标签被用来标记一个不是迭代或开关的语句时,就会出现这个错误。</target>
        </trans-unit>
        <trans-unit id="0066921471bb97a77df66b0fbbcd0a1701ecc926" translate="yes" xml:space="preserve">
          <source>This event is always fired when the next segment has existed already. That timing is the end of loops mainly.</source>
          <target state="translated">这个事件总是在下一段已经存在的时候被触发。这个时机主要是循环的结束。</target>
        </trans-unit>
        <trans-unit id="bb4b12cc9ff8e27a5e1e8dc331ee5e01a59914a3" translate="yes" xml:space="preserve">
          <source>This example doesn't need to include separators as &lt;code&gt;path.join()&lt;/code&gt; will do it in the most appropriate manner. Alternately, you can use &lt;code&gt;path.resolve()&lt;/code&gt; to retrieve the fully-qualified path:</source>
          <target state="translated">这个示例不需要包含分隔符，因为 &lt;code&gt;path.join()&lt;/code&gt; 将以最合适的方式进行分隔。另外，您可以使用 &lt;code&gt;path.resolve()&lt;/code&gt; 检索完全限定的路径：</target>
        </trans-unit>
        <trans-unit id="a1489f70baffad0b363356684d7ebc01fe6e95fe" translate="yes" xml:space="preserve">
          <source>This example is checking whether or not the parameter &lt;code&gt;cb&lt;/code&gt; is called in every path. Instances of &lt;code&gt;CodePath&lt;/code&gt; and &lt;code&gt;CodePathSegment&lt;/code&gt; are shared to every rule. So a rule must not modify those instances. Please use a map of information instead.</source>
          <target state="translated">本示例正在检查是否在每个路径中都调用了参数 &lt;code&gt;cb&lt;/code&gt; 。 &lt;code&gt;CodePath&lt;/code&gt; 和 &lt;code&gt;CodePathSegment&lt;/code&gt; 的实例共享给每个规则。因此，规则不得修改这些实例。请改用信息图。</target>
        </trans-unit>
        <trans-unit id="6b1cbc4d68b7ab7330711ad6c1fdf27c26b1979f" translate="yes" xml:space="preserve">
          <source>This example is the same as the last example, only it uses the numeric codes instead of the string values. The &lt;code&gt;eqeqeq&lt;/code&gt; rule is off and the &lt;code&gt;curly&lt;/code&gt; rule is set to be an error.</source>
          <target state="translated">此示例与上一个示例相同，只不过它使用数字代码而不是字符串值。该 &lt;code&gt;eqeqeq&lt;/code&gt; 规则是关闭和 &lt;code&gt;curly&lt;/code&gt; 规则设置为是一个错误。</target>
        </trans-unit>
        <trans-unit id="5b80ceb7cc1a3b04b54119a40781bdb6e7bf6522" translate="yes" xml:space="preserve">
          <source>This example uses the configuration file at &lt;code&gt;~/my-eslint.json&lt;/code&gt;.</source>
          <target state="translated">本示例使用位于 &lt;code&gt;~/my-eslint.json&lt;/code&gt; 的配置文件。</target>
        </trans-unit>
        <trans-unit id="5750c517a5090dcd054e93a3ee543572116cb885" translate="yes" xml:space="preserve">
          <source>This fixer can just select a quote type arbitrarily. If it guesses wrong, the resulting code will be automatically reported and fixed by the &lt;a href=&quot;../rules/quotes&quot;&gt;&lt;code&gt;quotes&lt;/code&gt;&lt;/a&gt; rule.</source>
          <target state="translated">该修复程序可以随意选择报价类型。如果猜错了，结果代码将自动被&lt;a href=&quot;../rules/quotes&quot;&gt; &lt;code&gt;quotes&lt;/code&gt; &lt;/a&gt;规则报告并修复。</target>
        </trans-unit>
        <trans-unit id="72e5ad7dfae2aad2273d8fb43485335becf7a8e7" translate="yes" xml:space="preserve">
          <source>This flag can be useful for integrations (e.g. editor plugins) which need to autofix text from the command line without saving it to the filesystem.</source>
          <target state="translated">这个标志对于需要从命令行自动修复文本而不需要将其保存到文件系统的集成(例如编辑器插件)非常有用。</target>
        </trans-unit>
        <trans-unit id="157309b8637b779bbae6ea2553e72ed4cf1ac2da" translate="yes" xml:space="preserve">
          <source>This guide is intended for anyone who wants to contribute to an ESLint project. Please read it carefully as it answers a lot of the questions many newcomers have when first working with our projects.</source>
          <target state="translated">本指南适用于任何想为ESLint项目做贡献的人。请仔细阅读它,因为它回答了许多新人在第一次使用我们的项目时的问题。</target>
        </trans-unit>
        <trans-unit id="253a5fabdebd34fd1ff274b7348e9288f83d7161" translate="yes" xml:space="preserve">
          <source>This guide is intended for those who wish to use ESLint as an end-user. If you're looking for how to extend ESLint or work with the ESLint source code, please see the &lt;a href=&quot;../developer-guide&quot;&gt;Developer Guide&lt;/a&gt;.</source>
          <target state="translated">本指南适用于希望使用ESLint作为最终用户的用户。如果您正在寻找如何扩展ESLint或使用ESLint源代码，请参见&lt;a href=&quot;../developer-guide&quot;&gt;开发人员指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="473f2b9ad42cc05ec316de78004da7a5bf503dd5" translate="yes" xml:space="preserve">
          <source>This guide is intended for those who wish to:</source>
          <target state="translated">本指南是为那些希望:</target>
        </trans-unit>
        <trans-unit id="9ce127fc5333e8fad7ca9180cee5cf2786869645" translate="yes" xml:space="preserve">
          <source>This installs the ESLint CLI from the npm repository. To run ESLint, use the following format:</source>
          <target state="translated">这将从 npm 资源库中安装 ESLint CLI。要运行ESLint,请使用以下格式。</target>
        </trans-unit>
        <trans-unit id="6d6a6a6ef3fa256f73c341751311b151c76aafa7" translate="yes" xml:space="preserve">
          <source>This is a convenience method similar to &lt;code&gt;Linter#defineRule&lt;/code&gt;, except that it allows you to define many rules at once using an object.</source>
          <target state="translated">这是类似于 &lt;code&gt;Linter#defineRule&lt;/code&gt; 的便捷方法，不同之处在于，它允许您使用一个对象一次定义许多规则。</target>
        </trans-unit>
        <trans-unit id="11670f5644a3f050b8ea016868b68ee8847819a8" translate="yes" xml:space="preserve">
          <source>This is a static function on &lt;code&gt;CLIEngine&lt;/code&gt; that is used to output fixes from &lt;code&gt;report&lt;/code&gt; to disk. It does by looking for files that have an &lt;code&gt;output&lt;/code&gt; property in their results. Here's an example:</source>
          <target state="translated">这是 &lt;code&gt;CLIEngine&lt;/code&gt; 上的静态函数，用于将修复程序从 &lt;code&gt;report&lt;/code&gt; 输出到磁盘。它通过查找结果中具有 &lt;code&gt;output&lt;/code&gt; 属性的文件来实现。这是一个例子：</target>
        </trans-unit>
        <trans-unit id="1adc98f9996e37b1c7669ea22572879ca414a9b1" translate="yes" xml:space="preserve">
          <source>This is a static function on &lt;code&gt;CLIEngine&lt;/code&gt;. It can be used to filter out all the non error messages from the report object.</source>
          <target state="translated">这是 &lt;code&gt;CLIEngine&lt;/code&gt; 上的静态函数。它可用于过滤掉报表对象中的所有非错误消息。</target>
        </trans-unit>
        <trans-unit id="411339a1879450f98c5e40e4c8f17c9ae2ac5b07" translate="yes" xml:space="preserve">
          <source>This is a static function on &lt;code&gt;SourceCode&lt;/code&gt; that is used to split the source code text into an array of lines.</source>
          <target state="translated">这是 &lt;code&gt;SourceCode&lt;/code&gt; 上的静态函数，用于将源代码文本拆分为行数组。</target>
        </trans-unit>
        <trans-unit id="5c6b39c351ca401855c1034cdb4244faf9090c89" translate="yes" xml:space="preserve">
          <source>This is also valid:</source>
          <target state="translated">这也是有效的。</target>
        </trans-unit>
        <trans-unit id="05cabcf8fe7c5a7502ad5f2210a082e0f0df43f2" translate="yes" xml:space="preserve">
          <source>This is an option to avoid conflicting with &lt;code&gt;no-use-before-define&lt;/code&gt; rule (without &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; option). If &lt;code&gt;true&lt;/code&gt; is specified, this rule will ignore variables that are read between the declaration and the first assignment. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">这是一个避免与 &lt;code&gt;no-use-before-define&lt;/code&gt; 规则冲突的选项（不带 &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; 选项）。如果指定 &lt;code&gt;true&lt;/code&gt; ，则此规则将忽略在声明和第一个赋值之间读取的变量。默认值为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f2e67931876380560ac0e1af9b3fd1d55a7d952" translate="yes" xml:space="preserve">
          <source>This is called a Yoda condition because it reads as, &quot;if red equals the color&quot;, similar to the way the Star Wars character Yoda speaks. Compare to the other way of arranging the operands:</source>
          <target state="translated">这被称为尤达条件,因为它的读法是:&quot;如果红色等于颜色&quot;,类似于星球大战人物尤达的说话方式。与另一种排列操作数的方式相比。</target>
        </trans-unit>
        <trans-unit id="f9f1cbf0a10293e94b068250d8c44dd714c9617f" translate="yes" xml:space="preserve">
          <source>This is considered an implied &lt;code&gt;eval()&lt;/code&gt; because a string of JavaScript code is passed in to be interpreted. The same can be done with &lt;code&gt;setInterval()&lt;/code&gt; and &lt;code&gt;execScript()&lt;/code&gt;. Both interpret the JavaScript code in the global scope. For both &lt;code&gt;setTimeout()&lt;/code&gt; and &lt;code&gt;setInterval()&lt;/code&gt;, the first argument can also be a function, and that is considered safer and is more performant:</source>
          <target state="translated">这被认为是隐含的 &lt;code&gt;eval()&lt;/code&gt; ,因为传入了JavaScript代码字符串以进行解释。使用 &lt;code&gt;setInterval()&lt;/code&gt; 和 &lt;code&gt;execScript()&lt;/code&gt; 可以完成相同的操作。两者都在全局范围内解释JavaScript代码。对于 &lt;code&gt;setTimeout()&lt;/code&gt; 和 &lt;code&gt;setInterval()&lt;/code&gt; ，第一个参数也可以是一个函数，并且被认为更安全且性能更高：</target>
        </trans-unit>
        <trans-unit id="885353f2c68ea0bab26fa60d3a09af64f1ec283e" translate="yes" xml:space="preserve">
          <source>This is considered by many to be a bad practice due to the difficulty in debugging and reading these types of functions.</source>
          <target state="translated">这被很多人认为是一种不好的做法,因为调试和读取这类函数很困难。</target>
        </trans-unit>
        <trans-unit id="71789ba820d3432452cd5210c7e76d1350d5fa8c" translate="yes" xml:space="preserve">
          <source>This is not expected to cause breakage. However, it will likely result in larger report locations than before. For example, if a rule reports the root node of the AST, the reported problem's range will be the entire program. In some integrations, this could result in a poor user experience (e.g. if the entire program is highlighted to indicate an error).</source>
          <target state="translated">预计这不会造成破损。然而,它可能会导致报告位置比以前更大。例如,如果一个规则报告AST的根节点,报告问题的范围将是整个程序。在一些集成中,这可能会导致糟糕的用户体验(例如,如果整个程序被突出显示以表示错误)。</target>
        </trans-unit>
        <trans-unit id="09772e314d49341cf87eb2642be70a9dc5fc7d9f" translate="yes" xml:space="preserve">
          <source>This is the default option.</source>
          <target state="translated">这是默认选项。</target>
        </trans-unit>
        <trans-unit id="d56606d1292924eedc2be3d66c63677095b21441" translate="yes" xml:space="preserve">
          <source>This is the default option. It disallows assignments unless they are enclosed in parentheses.</source>
          <target state="translated">这是默认选项。它不允许转让,除非将其放在括号中。</target>
        </trans-unit>
        <trans-unit id="9ee2c2a8cccc55fcecc1d76de320e24ae82e812d" translate="yes" xml:space="preserve">
          <source>This is the default option. It enforces spacing after semicolons and disallows spacing before semicolons.</source>
          <target state="translated">这是默认选项。它强制要求分号后的间距,不允许分号前的间距。</target>
        </trans-unit>
        <trans-unit id="8c3fab8ba68001a6f97fcb8826756ef27d34444f" translate="yes" xml:space="preserve">
          <source>This is used to disambiguate the division operator to not confuse users.</source>
          <target state="translated">这是为了消除除法运算符的歧义,以免用户混淆。</target>
        </trans-unit>
        <trans-unit id="34f305c3c8978f968bfdd0149b0fd14a4716185a" translate="yes" xml:space="preserve">
          <source>This is used to disambiguate the slash operator and facilitates more readable code.</source>
          <target state="translated">这是为了消除斜线操作符的歧义,方便代码的可读性。</target>
        </trans-unit>
        <trans-unit id="8bd301643debec8b3d995a82000f4930e1a7b0d5" translate="yes" xml:space="preserve">
          <source>This is valid as well:</source>
          <target state="translated">这也是有效的。</target>
        </trans-unit>
        <trans-unit id="3cad551b2177908dacdd49bf4d5fd3dc7d354609" translate="yes" xml:space="preserve">
          <source>This may look alright at first sight, but this code in fact throws a syntax error in ECMAScript 5 strict mode. This happens because &lt;code&gt;1e2&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt; are coerced into strings before getting used as the property name. Both &lt;code&gt;String(1e2)&lt;/code&gt; and &lt;code&gt;String(100)&lt;/code&gt; happen to be equal to &lt;code&gt;&quot;100&quot;&lt;/code&gt;, which causes the &quot;Duplicate data property in object literal not allowed in strict mode&quot; error. Issues like that can be tricky to debug, so some prefer to require quotes around all property names.</source>
          <target state="translated">乍一看，这似乎还不错，但是实际上，此代码在ECMAScript 5严格模式下引发了语法错误。发生这种情况是因为 &lt;code&gt;1e2&lt;/code&gt; 和 &lt;code&gt;100&lt;/code&gt; 在用作属性名称之前被强制转换为字符串。两个 &lt;code&gt;String(1e2)&lt;/code&gt; 和 &lt;code&gt;String(100)&lt;/code&gt; 正好等于 &lt;code&gt;&quot;100&quot;&lt;/code&gt; ，这将导致错误&amp;ldquo;在对象的重复数据属性字面不严格模式中使用&amp;rdquo;。诸如此类的问题很难调试，因此有些人倾向于要求在所有属性名称周围都加上引号。</target>
        </trans-unit>
        <trans-unit id="5f324b335e29b3bc2325916661c3691bcbdcc494" translate="yes" xml:space="preserve">
          <source>This may look like a &lt;code&gt;return&lt;/code&gt; statement that returns an object literal, however, the JavaScript engine will interpret this code as:</source>
          <target state="translated">这看起来像是返回对象文字的 &lt;code&gt;return&lt;/code&gt; 语句，但是，JavaScript引擎会将以下代码解释为：</target>
        </trans-unit>
        <trans-unit id="9469e264aeefd6b881ec26f4966d916d417a81b0" translate="yes" xml:space="preserve">
          <source>This message occurs because ESLint is unsure if you wanted to actually lint the file or not. As the message indicates, you can use &lt;code&gt;--no-ignore&lt;/code&gt; to omit using the ignore rules.</source>
          <target state="translated">出现此消息的原因是，ESLint无法确定您是否希望实际对文件进行处理。如消息所示，您可以使用 &lt;code&gt;--no-ignore&lt;/code&gt; 来使用忽略规则来忽略。</target>
        </trans-unit>
        <trans-unit id="9acfa8cb4bab952e8f358b4acdd87a3e87086a7e" translate="yes" xml:space="preserve">
          <source>This method is similar to verify except that it also runs autofixing logic, similar to the &lt;code&gt;--fix&lt;/code&gt; flag on the command line. The result object will contain the autofixed code, along with any remaining linting messages for the code that were not autofixed.</source>
          <target state="translated">此方法类似于验证，除了它还运行自动修复逻辑之外，类似于命令行上的 &lt;code&gt;--fix&lt;/code&gt; 标志。结果对象将包含自动修复的代码，以及未自动修复的代码的其余所有掉毛消息。</target>
        </trans-unit>
        <trans-unit id="6e28456cfd122c5d695be0c36d1639aa0cd9e8fd" translate="yes" xml:space="preserve">
          <source>This method returns a map of all loaded rules.</source>
          <target state="translated">此方法返回所有加载规则的映射。</target>
        </trans-unit>
        <trans-unit id="96118f25ecbb0711c0de11b20891644868f6d5a0" translate="yes" xml:space="preserve">
          <source>This method returns a map of all loaded rules. Under the hood, it calls &lt;a href=&quot;#lintergetrules&quot;&gt;Linter#getRules&lt;/a&gt;.</source>
          <target state="translated">此方法返回所有已加载规则的映射。在&lt;a href=&quot;#lintergetrules&quot;&gt;后台&lt;/a&gt;，它称为Linter＃getRules。</target>
        </trans-unit>
        <trans-unit id="750daf348b86f808d9b8eaf3ba8fb5c90d1422b3" translate="yes" xml:space="preserve">
          <source>This method returns an array of all the comments found in the program. This is useful for rules that need to check all comments regardless of location.</source>
          <target state="translated">此方法返回一个包含程序中所有注释的数组。这对于需要检查所有注释的规则非常有用,无论其位置如何。</target>
        </trans-unit>
        <trans-unit id="cf8d820e1cad68596ca7105185382c1dd8c45533" translate="yes" xml:space="preserve">
          <source>This method returns the scope which has the following types:</source>
          <target state="translated">本方法返回具有以下类型的作用域。</target>
        </trans-unit>
        <trans-unit id="dbe677f233ad08e453df8fbf6a0cc972e5133856" translate="yes" xml:space="preserve">
          <source>This object may not:</source>
          <target state="translated">这个对象可能不。</target>
        </trans-unit>
        <trans-unit id="07af4924baef123f1b198a3210ee8db9f97b124a" translate="yes" xml:space="preserve">
          <source>This object's responsibilities include:</source>
          <target state="translated">该对象的职责包括:</target>
        </trans-unit>
        <trans-unit id="e8c3a3349dc261fe599ac47a9d7990013dfe7db9" translate="yes" xml:space="preserve">
          <source>This option allows you to disable reporting on warnings. If you enable this option, only errors are reported by ESLint.</source>
          <target state="translated">此选项允许您禁用警告报告。如果启用该选项,ESLint只报告错误。</target>
        </trans-unit>
        <trans-unit id="85dd27a30c2a375f5a8fd794ae0e7f82e1be6296" translate="yes" xml:space="preserve">
          <source>This option allows you to specify a filename to process STDIN as. This is useful when processing files from STDIN and you have rules which depend on the filename.</source>
          <target state="translated">这个选项允许你指定一个文件名来处理STDIN。当处理 STDIN 中的文件,并且有依赖于文件名的规则时,这个选项很有用。</target>
        </trans-unit>
        <trans-unit id="186734fe42d275a33186e1772b91f3f61e44c344" translate="yes" xml:space="preserve">
          <source>This option allows you to specify a parser to be used by ESLint. By default, &lt;code&gt;espree&lt;/code&gt; will be used.</source>
          <target state="translated">此选项允许您指定ESLint使用的解析器。默认情况下，将使用 &lt;code&gt;espree&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="74b60e3e65cac66b94ee54882199faebdc7d7526" translate="yes" xml:space="preserve">
          <source>This option allows you to specify a warning threshold, which can be used to force ESLint to exit with an error status if there are too many warning-level rule violations in your project.</source>
          <target state="translated">这个选项允许您指定一个警告阈值,如果您的项目中有太多的警告级规则违反,可以用这个阈值来强制ESLint以错误状态退出。</target>
        </trans-unit>
        <trans-unit id="d9cfbfc188b072be5cf23949f06fff9feb06dd57" translate="yes" xml:space="preserve">
          <source>This option allows you to specify an additional configuration file for ESLint (see &lt;a href=&quot;configuring&quot;&gt;Configuring ESLint&lt;/a&gt; for more).</source>
          <target state="translated">此选项使您可以为ESLint指定其他配置文件（有关更多信息，请参阅&lt;a href=&quot;configuring&quot;&gt;配置ESLint&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d39ed50a5fad1fe2517fc4c0e41bff667e641b14" translate="yes" xml:space="preserve">
          <source>This option allows you to specify another directory from which to load rules files. This allows you to dynamically load new rules at run time. This is useful when you have custom rules that aren't suitable for being bundled with ESLint.</source>
          <target state="translated">该选项允许您指定另一个目录来加载规则文件。这允许您在运行时动态加载新规则。当您有不适合与 ESLint 捆绑的自定义规则时,这很有用。</target>
        </trans-unit>
        <trans-unit id="1b65a3229193445946c07836b34241f12c03d02d" translate="yes" xml:space="preserve">
          <source>This option allows you to specify parser options to be used by ESLint. Note that the available parser options are determined by the parser being used.</source>
          <target state="translated">这个选项允许您指定ESLint要使用的解析器选项。请注意,可用的解析器选项由正在使用的解析器决定。</target>
        </trans-unit>
        <trans-unit id="106d9c8368dbe004a8c5fe9daebbd29c87af1e91" translate="yes" xml:space="preserve">
          <source>This option allows you to specify patterns of files to ignore (in addition to those in &lt;code&gt;.eslintignore&lt;/code&gt;). You can repeat the option to provide multiple patterns. The supported syntax is the same as for &lt;code&gt;.eslintignore&lt;/code&gt;&lt;a href=&quot;configuring#.eslintignore&quot;&gt;files&lt;/a&gt;, which use the same patterns as the &lt;code&gt;.gitignore&lt;/code&gt;&lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;specification&lt;/a&gt;. You should quote your patterns in order to avoid shell interpretation of glob patterns.</source>
          <target state="translated">使用此选项，您可以指定要忽略的文件模式（ &lt;code&gt;.eslintignore&lt;/code&gt; 中的模式除外）。您可以重复该选项以提供多种模式。支持的语法与 &lt;code&gt;.eslintignore&lt;/code&gt; &lt;a href=&quot;configuring#.eslintignore&quot;&gt;文件的&lt;/a&gt;语法相同，后者使用与 &lt;code&gt;.gitignore&lt;/code&gt; &lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;规范&lt;/a&gt;相同的模式。您应该引用您的模式，以避免shell解释glob模式。</target>
        </trans-unit>
        <trans-unit id="4e1a28f3ded9a3b9eb6475943dff5e4939f78ddd" translate="yes" xml:space="preserve">
          <source>This option allows you to specify the file to use as your &lt;code&gt;.eslintignore&lt;/code&gt;. By default, ESLint looks in the current working directory for &lt;code&gt;.eslintignore&lt;/code&gt;. You can override this behavior by providing a path to a different file.</source>
          <target state="translated">此选项使您可以指定用作 &lt;code&gt;.eslintignore&lt;/code&gt; 的文件。默认情况下，ESLint在当前工作目录中查找 &lt;code&gt;.eslintignore&lt;/code&gt; 。您可以通过提供其他文件的路径来覆盖此行为。</target>
        </trans-unit>
        <trans-unit id="c32bf7172dd146fc567e0246ac0c8ff17f262721" translate="yes" xml:space="preserve">
          <source>This option allows you to specify the type of fixes to apply when using either &lt;code&gt;--fix&lt;/code&gt; or &lt;code&gt;--fix-dry-run&lt;/code&gt;. The three types of fixes are:</source>
          <target state="translated">使用此选项，您可以指定使用 &lt;code&gt;--fix&lt;/code&gt; 或 &lt;code&gt;--fix-dry-run&lt;/code&gt; 时要应用的修补程序的类型。修复的三种类型是：</target>
        </trans-unit>
        <trans-unit id="c914fe341609fcaa321048e85e99b3c111eac45d" translate="yes" xml:space="preserve">
          <source>This option allows you to specify which file extensions ESLint will use when searching for JavaScript files in the directories you specify. By default, it uses &lt;code&gt;.js&lt;/code&gt; as the only file extension.</source>
          <target state="translated">使用此选项，您可以指定在指定目录中搜​​索JavaScript文件时，ESLint将使用哪些文件扩展名。默认情况下，它使用 &lt;code&gt;.js&lt;/code&gt; 作为唯一的文件扩展名。</target>
        </trans-unit>
        <trans-unit id="5cefe1392a8f9c174c272d0205d79e85976936f0" translate="yes" xml:space="preserve">
          <source>This option causes ESLint to report directive comments like &lt;code&gt;// eslint-disable-line&lt;/code&gt; when no errors would have been reported on that line anyway. This can be useful to prevent future errors from unexpectedly being suppressed, by cleaning up old &lt;code&gt;eslint-disable&lt;/code&gt; comments which are no longer applicable.</source>
          <target state="translated">如果该 &lt;code&gt;// eslint-disable-line&lt;/code&gt; 未报告任何错误，则此选项会使ESLint报告// // eslint-disable-line这样的指令注释。通过清除不再适用 &lt;code&gt;eslint-disable&lt;/code&gt; 旧注释，这对于防止将来的错误意外被抑制很有用。</target>
        </trans-unit>
        <trans-unit id="c661c2f3569528801054ee87219857863dcf11b9" translate="yes" xml:space="preserve">
          <source>This option checks methods with the given names, &lt;em&gt;even if&lt;/em&gt; the object which has the method is &lt;em&gt;not&lt;/em&gt; an array.</source>
          <target state="translated">&lt;em&gt;即使&lt;/em&gt;具有该方法的对象&lt;em&gt;不是&lt;/em&gt;数组，此选项&lt;em&gt;也会&lt;/em&gt;使用给定名称检查方法。</target>
        </trans-unit>
        <trans-unit id="fccdeab5132a30722aca041dac694817c9dc5d44" translate="yes" xml:space="preserve">
          <source>This option defines global variables so that they will not be flagged as undefined by the &lt;code&gt;no-undef&lt;/code&gt; rule. Any specified global variables are assumed to be read-only by default, but appending &lt;code&gt;:true&lt;/code&gt; to a variable's name ensures that &lt;code&gt;no-undef&lt;/code&gt; will also allow writes. To specify multiple global variables, separate them using commas, or use the option multiple times.</source>
          <target state="translated">此选项定义全局变量，以便它们不会被 &lt;code&gt;no-undef&lt;/code&gt; 规则标记为未定义。默认情况下，所有指定的全局变量都假定为只读，但是在变量名称后附加 &lt;code&gt;:true&lt;/code&gt; 可以确保 &lt;code&gt;no-undef&lt;/code&gt; 也将允许写入。要指定多个全局变量，请使用逗号分隔它们，或多次使用该选项。</target>
        </trans-unit>
        <trans-unit id="8ba2372568bac2be3ed8079d1b145a3ad1c564b1" translate="yes" xml:space="preserve">
          <source>This option disallows all assignments in &lt;code&gt;return&lt;/code&gt; statements. All assignments are treated as problems.</source>
          <target state="translated">此选项禁止在 &lt;code&gt;return&lt;/code&gt; 语句中进行所有分配。所有作业均视为问题。</target>
        </trans-unit>
        <trans-unit id="c64a3a7bb5ddd0c764741c6306006a0d08071747" translate="yes" xml:space="preserve">
          <source>This option enables specific environments. Details about the global variables defined by each environment are available on the &lt;a href=&quot;configuring&quot;&gt;configuration&lt;/a&gt; documentation. This option only enables environments; it does not disable environments set in other configuration files. To specify multiple environments, separate them using commas, or use the option multiple times.</source>
          <target state="translated">此选项启用特定的环境。有关每个环境定义的全局变量的详细信息，可在&lt;a href=&quot;configuring&quot;&gt;配置&lt;/a&gt;文档中找到。此选项仅启用环境。它不会禁用在其他配置文件中设置的环境。要指定多个环境，请使用逗号分隔它们，或多次使用该选项。</target>
        </trans-unit>
        <trans-unit id="ea6b9d897dea32cb3a7adac81f91222a4f84f0b0" translate="yes" xml:space="preserve">
          <source>This option enforces spacing before semicolons and disallows spacing after semicolons.</source>
          <target state="translated">这个选项强制执行分号前的间距,不允许分号后的间距。</target>
        </trans-unit>
        <trans-unit id="de4b303d3dec233dfe8862afdb1eb4eeb8a2fe5e" translate="yes" xml:space="preserve">
          <source>This option ensures that all function bodies are strict mode code, while global code is not. Particularly if a build step concatenates multiple scripts, a strict mode directive in global code of one script could unintentionally enable strict mode in another script that was not intended to be strict code.</source>
          <target state="translated">这个选项确保所有的函数体都是严格模式代码,而全局代码不是。特别是当一个构建步骤连接了多个脚本时,一个脚本的全局代码中的严格模式指令可能会无意中在另一个不打算成为严格代码的脚本中启用严格模式。</target>
        </trans-unit>
        <trans-unit id="e647d69856373f96f3407afed5013f48346bdfe2" translate="yes" xml:space="preserve">
          <source>This option ensures that all functions are executed in strict mode. A strict mode directive must be present in global code or in every top-level function declaration or expression. It does not concern itself with unnecessary strict mode directives in nested functions that are already strict, nor with multiple strict mode directives at the same level.</source>
          <target state="translated">这个选项确保所有函数都以严格模式执行。全局代码或每个顶层函数声明或表达式中都必须有严格模式指令。它不关心已经是严格模式的嵌套函数中不必要的严格模式指令,也不关心同一层次的多个严格模式指令。</target>
        </trans-unit>
        <trans-unit id="aa35f1a43f3c3018915a36e743fa5634d8ffb97c" translate="yes" xml:space="preserve">
          <source>This option forces the enabling/disabling of colorized output. You can use this to override the default behavior, which is to enable colorized output unless no TTY is detected, such as when piping &lt;code&gt;eslint&lt;/code&gt; through &lt;code&gt;cat&lt;/code&gt; or &lt;code&gt;less&lt;/code&gt;.</source>
          <target state="translated">此选项强制启用/禁用彩色输出。您可以使用它来覆盖默认行为，即除非未检测到TTY，否则将启用彩色输出，例如，通过 &lt;code&gt;eslint&lt;/code&gt; 通过 &lt;code&gt;cat&lt;/code&gt; 或 &lt;code&gt;less&lt;/code&gt; 小号管道输送时。</target>
        </trans-unit>
        <trans-unit id="4aca571b443c66494cfaa66d1259c007fcbd6a87" translate="yes" xml:space="preserve">
          <source>This option has no effect on code that uses a processor, unless the processor opts into allowing autofixes.</source>
          <target state="translated">这个选项对使用处理器的代码没有影响,除非处理器选择允许自动修复。</target>
        </trans-unit>
        <trans-unit id="930e8c0ad2927b8cda5d231d103927440d79a6ec" translate="yes" xml:space="preserve">
          <source>This option has the same effect as &lt;code&gt;--fix&lt;/code&gt; with one difference: the fixes are not saved to the file system. This makes it possible to fix code from &lt;code&gt;stdin&lt;/code&gt; (when used with the &lt;code&gt;--stdin&lt;/code&gt; flag).</source>
          <target state="translated">此选项与 &lt;code&gt;--fix&lt;/code&gt; 具有相同的效果，但有一个区别：修复未保存到文件系统。这样就可以修复来自 &lt;code&gt;stdin&lt;/code&gt; 的代码（当与 &lt;code&gt;--stdin&lt;/code&gt; 标志一起使用时）。</target>
        </trans-unit>
        <trans-unit id="9e29912dbfa3dcdc6bb50600a52b9ed9b3d16f1d" translate="yes" xml:space="preserve">
          <source>This option instructs ESLint to try to fix as many issues as possible. The fixes are made to the actual files themselves and only the remaining unfixed issues are output. Not all problems are fixable using this option, and the option does not work in these situations:</source>
          <target state="translated">此选项指示 ESLint 尽可能多地修复问题。修复的是实际文件本身,只输出剩余的未修复的问题。并非所有的问题都可以使用该选项进行修复,在这些情况下,该选项不起作用。</target>
        </trans-unit>
        <trans-unit id="a3916f03fe6ee5dfd351fc13d5bd08fbc91a2d7e" translate="yes" xml:space="preserve">
          <source>This option is an object that expects property names to be AST node types as defined by &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;. The easiest way to determine the node types for &lt;code&gt;exceptions&lt;/code&gt; is to use &lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt; with the espree parser.</source>
          <target state="translated">此选项是一个对象，期望属性名称是&lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;定义的AST节点类型。确定 &lt;code&gt;exceptions&lt;/code&gt; 的节点类型的最简单方法是将&lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt;与espree解析器一起使用。</target>
        </trans-unit>
        <trans-unit id="159d5bb23b26711ee83d3678da55988d09236463" translate="yes" xml:space="preserve">
          <source>This option is helpful if you are using another program to format your code but you would still like ESLint to apply other types of fixes.</source>
          <target state="translated">如果您使用另一个程序来格式化您的代码,但您仍然希望ESLint应用其他类型的修复,这个选项很有帮助。</target>
        </trans-unit>
        <trans-unit id="989aa7bf5f70f7e2a3435a849e6284b29b04f576" translate="yes" xml:space="preserve">
          <source>This option is only applicable when used in conjunction with the &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; option.</source>
          <target state="translated">仅当与 &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; 选项一起使用时，此选项才适用。</target>
        </trans-unit>
        <trans-unit id="e46b21d025dfd75b6276b72215872d951e5d3ce7" translate="yes" xml:space="preserve">
          <source>This option outputs debugging information to the console. This information is useful when you're seeing a problem and having a hard time pinpointing it. The ESLint team may ask for this debugging information to help solve bugs.</source>
          <target state="translated">该选项将调试信息输出到控制台。当你看到一个问题,但很难确定它的位置时,这些信息很有用。ESLint 团队可能会要求提供这些调试信息来帮助解决错误。</target>
        </trans-unit>
        <trans-unit id="85f6c4676d557f8e8848d9f14da2b55b5cf4fe52" translate="yes" xml:space="preserve">
          <source>This option outputs information about the execution environment, including the version of Node, npm, and local and global installations of ESLint. The ESLint team may ask for this information to help solve bugs.</source>
          <target state="translated">这个选项输出有关执行环境的信息,包括Node、npm的版本,以及ESLint的本地和全局安装情况。ESLint团队可能会要求这些信息来帮助解决错误。</target>
        </trans-unit>
        <trans-unit id="79b6e22672dda2878136d9153ec178619788c515" translate="yes" xml:space="preserve">
          <source>This option outputs the configuration to be used for the file passed. When present, no linting is performed and only config-related options are valid.</source>
          <target state="translated">这个选项输出要用于传递文件的配置。当该选项存在时,不进行脱毛,只有与配置相关的选项才有效。</target>
        </trans-unit>
        <trans-unit id="4561c938534c79e5470a90cddc468484882c9f8a" translate="yes" xml:space="preserve">
          <source>This option outputs the current ESLint version onto the console. All other options are ignored when this is present.</source>
          <target state="translated">该选项将当前的ESLint版本输出到控制台。当该选项存在时,所有其他选项都被忽略。</target>
        </trans-unit>
        <trans-unit id="65771294e9a528c9fae00635bda7f17cf756ffd2" translate="yes" xml:space="preserve">
          <source>This option outputs the help menu, displaying all of the available options. All other options are ignored when this is present.</source>
          <target state="translated">此选项输出帮助菜单,显示所有可用的选项。当有此选项时,所有其他选项都会被忽略。</target>
        </trans-unit>
        <trans-unit id="014a955006c294dba1206349cb62b15f2fa55f4b" translate="yes" xml:space="preserve">
          <source>This option prevents errors when a quoted glob pattern or &lt;code&gt;--ext&lt;/code&gt; is unmatched. This will not prevent errors when your shell can't match a glob.</source>
          <target state="translated">当引用的glob模式或 &lt;code&gt;--ext&lt;/code&gt; 不匹配时，此选项可防止错误。当您的外壳无法匹配全局时，这将无法避免错误。</target>
        </trans-unit>
        <trans-unit id="cf662cff85e17bdc6570d9489d7e4f778a8da7a6" translate="yes" xml:space="preserve">
          <source>This option prevents inline comments like &lt;code&gt;/*eslint-disable*/&lt;/code&gt; or &lt;code&gt;/*global foo*/&lt;/code&gt; from having any effect. This allows you to set an ESLint config without files modifying it. All inline config comments are ignored, e.g.:</source>
          <target state="translated">此选项可防止 &lt;code&gt;/*eslint-disable*/&lt;/code&gt; 或 &lt;code&gt;/*global foo*/&lt;/code&gt; 之类的内联注释无效。这使您可以设置ESLint配置，而无需文件对其进行修改。所有内联配置注释将被忽略，例如：</target>
        </trans-unit>
        <trans-unit id="09d5ab8aec2ed9eac65dc2e722437afabedfeeda" translate="yes" xml:space="preserve">
          <source>This option specifies a plugin to load. You can omit the prefix &lt;code&gt;eslint-plugin-&lt;/code&gt; from the plugin name.</source>
          <target state="translated">此选项指定要加载的插件。您可以从插件名称中省略前缀 &lt;code&gt;eslint-plugin-&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ecc4f96fd72856887578c22e2739205f34b01a7f" translate="yes" xml:space="preserve">
          <source>This option specifies rules to be used. These rules will be merged with any rules specified with configuration files. (You can use &lt;code&gt;--no-eslintrc&lt;/code&gt; to change that behavior.) To define multiple rules, separate them using commas, or use the option multiple times. The &lt;a href=&quot;https://github.com/gkz/levn#levn--&quot;&gt;levn&lt;/a&gt; format is used for specifying the rules.</source>
          <target state="translated">此选项指定要使用的规则。这些规则将与配置文件指定的任何规则合并。（您可以使用 &lt;code&gt;--no-eslintrc&lt;/code&gt; 更改该行为。）要定义多个规则，请使用逗号将它们分开，或多次使用该选项。该&lt;a href=&quot;https://github.com/gkz/levn#levn--&quot;&gt;平LevN&lt;/a&gt;格式被用于指定的规则。</target>
        </trans-unit>
        <trans-unit id="05912c8c31018cfdeb17e60450fe0d50675682cf" translate="yes" xml:space="preserve">
          <source>This option specifies the output format for the console. Possible formats are:</source>
          <target state="translated">这个选项指定了控制台的输出格式。可能的格式有:</target>
        </trans-unit>
        <trans-unit id="38e0c8b514c59731527607b405cb80b1143de6b5" translate="yes" xml:space="preserve">
          <source>This option tells ESLint to read and lint source code from STDIN instead of from files. You can use this to pipe code to ESLint.</source>
          <target state="translated">这个选项告诉 ESLint 从 STDIN 而不是从文件中读取和打印源代码。你可以用它来管代码到 ESLint。</target>
        </trans-unit>
        <trans-unit id="eedfdca0c59f3541f1d00d88f1dc3ea700e5c34e" translate="yes" xml:space="preserve">
          <source>This option throws an error when code is piped to ESLint.</source>
          <target state="translated">当代码被传送到ESLint时,这个选项会产生一个错误。</target>
        </trans-unit>
        <trans-unit id="cc2ef91e90fb16bf6596a58b63c2929f9ada53cb" translate="yes" xml:space="preserve">
          <source>This option will start config initialization wizard. It's designed to help new users quickly create .eslintrc file by answering a few questions, choosing a popular style guide, or inspecting your source files and attempting to automatically generate a suitable configuration.</source>
          <target state="translated">这个选项将启动配置初始化向导。它的目的是帮助新用户通过回答几个问题,选择一个流行的样式指南,或者检查你的源文件并尝试自动生成一个合适的配置来快速创建.eslintrc文件。</target>
        </trans-unit>
        <trans-unit id="3538e1fc4e1c6f22a20277c44b5ede4d53eb3ec8" translate="yes" xml:space="preserve">
          <source>This produces a different outcome than defining &lt;code&gt;var x = undefined&lt;/code&gt; in the loop, as &lt;code&gt;x&lt;/code&gt; is no longer reset to &lt;code&gt;undefined&lt;/code&gt; each time through the loop.</source>
          <target state="translated">与在循环中定义 &lt;code&gt;var x = undefined&lt;/code&gt; 相比，这产生了不同的结果，因为在每次循环中 &lt;code&gt;x&lt;/code&gt; 不再重置为 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="24feca745e6bc0163194940d4e596f152f9004dc" translate="yes" xml:space="preserve">
          <source>This rule &lt;em&gt;does not&lt;/em&gt; report any of the following less obvious approaches to modify the prototype of builtin objects:</source>
          <target state="translated">该规则&lt;em&gt;未&lt;/em&gt;报告以下任何不太明显的方法来修改内置对象的原型：</target>
        </trans-unit>
        <trans-unit id="6e2c9a67c2f55b28f4688bb17e111a3bc3326b22" translate="yes" xml:space="preserve">
          <source>This rule accepts &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; string as an option. &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; is the same as &lt;code&gt;{ &quot;functions&quot;: false, &quot;classes&quot;: true }&lt;/code&gt;.</source>
          <target state="translated">此规则接受 &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; 字符串作为选项。 &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; 与 &lt;code&gt;{ &quot;functions&quot;: false, &quot;classes&quot;: true }&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b8239df1c5225b6270e03ba8dacfb109fb9d7ed5" translate="yes" xml:space="preserve">
          <source>This rule accepts a single options argument with the following defaults:</source>
          <target state="translated">这条规则接受一个选项参数,默认值如下。</target>
        </trans-unit>
        <trans-unit id="28da8e87fba0048902246ac61ce6db8b783253e1" translate="yes" xml:space="preserve">
          <source>This rule accepts a single options argument:</source>
          <target state="translated">本规则接受一个单一的选项参数。</target>
        </trans-unit>
        <trans-unit id="036f5a811a913e4a7dcd75bca8c0f804ba9473c6" translate="yes" xml:space="preserve">
          <source>This rule accepts a string option:</source>
          <target state="translated">该规则接受一个字符串选项。</target>
        </trans-unit>
        <trans-unit id="9343f1b69e9de70215bc3d173faca7334f9fc04a" translate="yes" xml:space="preserve">
          <source>This rule accepts an &lt;code&gt;exceptions&lt;/code&gt; option, which can be used to specify a list of builtins for which extensions will be allowed.</source>
          <target state="translated">该规则接受一个 &lt;code&gt;exceptions&lt;/code&gt; 选项，该选项可用于指定允许扩展的内建列表。</target>
        </trans-unit>
        <trans-unit id="2c4f097e6d73193e66a7d59e690145b7eda43865" translate="yes" xml:space="preserve">
          <source>This rule accepts an &lt;code&gt;exceptions&lt;/code&gt; option, which can be used to specify a list of builtins for which reassignments will be allowed:</source>
          <target state="translated">该规则接受一个 &lt;code&gt;exceptions&lt;/code&gt; 选项，该选项可用于指定允许重新分配的内置列表：</target>
        </trans-unit>
        <trans-unit id="5c4d59be86b758fee018aea0cff47e0cb013368c" translate="yes" xml:space="preserve">
          <source>This rule accepts an object with its properties as</source>
          <target state="translated">该规则接受一个对象,其属性为</target>
        </trans-unit>
        <trans-unit id="2b8ef0c60ad3557c3f770d7f127c29c889a75bc2" translate="yes" xml:space="preserve">
          <source>This rule aims to bring consistency to variable initializations and declarations.</source>
          <target state="translated">这条规则旨在使变量的初始化和声明保持一致。</target>
        </trans-unit>
        <trans-unit id="fdf2ca3bdb84cdf7771de92d50733bd97f5e3a66" translate="yes" xml:space="preserve">
          <source>This rule aims to create clearer code by disallowing the bad practice of creating a label that shares a name with a variable that is in scope.</source>
          <target state="translated">这条规则旨在创建更清晰的代码,不允许创建一个与范围内的变量共享名称的标签。</target>
        </trans-unit>
        <trans-unit id="082b8455e1ec0b9e8221bb19258d9bf25d7fc205" translate="yes" xml:space="preserve">
          <source>This rule aims to disallow async Promise executor functions.</source>
          <target state="translated">该规则旨在禁止异步Promise执行器函数。</target>
        </trans-unit>
        <trans-unit id="1ab33d4820af7bc07046f46739d6891755a40cd3" translate="yes" xml:space="preserve">
          <source>This rule aims to disallow multiple whitespace around logical expressions, conditional expressions, declarations, array elements, object properties, sequences and function parameters.</source>
          <target state="translated">这条规则旨在不允许在逻辑表达式、条件表达式、声明、数组元素、对象属性、序列和函数参数周围出现多个空格。</target>
        </trans-unit>
        <trans-unit id="5bdbb4fae36aec73469b0df2d2cfda42e720c8a1" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate assignments from &lt;code&gt;return&lt;/code&gt; statements. As such, it will warn whenever an assignment is found as part of &lt;code&gt;return&lt;/code&gt;.</source>
          <target state="translated">该规则旨在消除 &lt;code&gt;return&lt;/code&gt; 语句中的赋值。因此，只要找到作为 &lt;code&gt;return&lt;/code&gt; 一部分的赋值，它将发出警告。</target>
        </trans-unit>
        <trans-unit id="60c130e79350c186199b9fd520e4228357e4b0c5" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate implied &lt;code&gt;eval()&lt;/code&gt; through the use of &lt;code&gt;setTimeout()&lt;/code&gt;, &lt;code&gt;setInterval()&lt;/code&gt; or &lt;code&gt;execScript()&lt;/code&gt;. As such, it will warn when either function is used with a string as the first argument.</source>
          <target state="translated">该规则旨在通过使用 &lt;code&gt;setTimeout()&lt;/code&gt; ， &lt;code&gt;setInterval()&lt;/code&gt; 或 &lt;code&gt;execScript()&lt;/code&gt; 消除隐含的 &lt;code&gt;eval()&lt;/code&gt; （）。这样，当将任一函数与字符串作为第一个参数一起使用时，它将发出警告。</target>
        </trans-unit>
        <trans-unit id="ee8e3a04c82e7ee5427ed1829b4dacbec3fd6b59" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate shadowed variable declarations.</source>
          <target state="translated">该规则旨在消除影子变量声明。</target>
        </trans-unit>
        <trans-unit id="48d4ea04200e208a668599befd84b34f6eb5dfe7" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate the use of &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, and &lt;code&gt;Boolean&lt;/code&gt; with the &lt;code&gt;new&lt;/code&gt; operator. As such, it warns whenever it sees &lt;code&gt;new String&lt;/code&gt;, &lt;code&gt;new Number&lt;/code&gt;, or &lt;code&gt;new Boolean&lt;/code&gt;.</source>
          <target state="translated">该规则旨在消除在 &lt;code&gt;new&lt;/code&gt; 运算符中使用 &lt;code&gt;String&lt;/code&gt; ， &lt;code&gt;Number&lt;/code&gt; 和 &lt;code&gt;Boolean&lt;/code&gt; 。这样，只要看到 &lt;code&gt;new String&lt;/code&gt; ， &lt;code&gt;new Number&lt;/code&gt; 或 &lt;code&gt;new Boolean&lt;/code&gt; ，它就会发出警告。</target>
        </trans-unit>
        <trans-unit id="1ceaffe704a185e71600f586cd092634bbdc428f" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate the use of &lt;code&gt;undefined&lt;/code&gt;, and as such, generates a warning whenever it is used.</source>
          <target state="translated">此规则旨在消除对 &lt;code&gt;undefined&lt;/code&gt; 的使用，因此，每当使用undefined时都会生成警告。</target>
        </trans-unit>
        <trans-unit id="4a1e90a159c38bcad9dbea6c4a3426a3c8fe82df" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate the use of labeled statements in JavaScript. It will warn whenever a labeled statement is encountered and whenever &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; are used with a label.</source>
          <target state="translated">该规则旨在消除在JavaScript中使用带标签的语句。每当遇到带有标签的语句以及将 &lt;code&gt;break&lt;/code&gt; 或 &lt;code&gt;continue&lt;/code&gt; 与标签一起使用时，它将发出警告。</target>
        </trans-unit>
        <trans-unit id="fbf95a07c8896cae54c5b32fab00ac676fef5a06" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate unnecessary and potentially confusing blocks at the top level of a script or within other blocks.</source>
          <target state="translated">这条规则的目的是消除脚本顶层或其他区块中不必要的和可能造成混乱的区块。</target>
        </trans-unit>
        <trans-unit id="7428d8b9c63ecd07f513e4d208a88842d2ea4291" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate unused expressions which have no effect on the state of the program.</source>
          <target state="translated">这条规则旨在消除对程序状态没有影响的未使用的表达式。</target>
        </trans-unit>
        <trans-unit id="f4592be8513a34c0ee9c31116baf895be639d00d" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate use of the &lt;code&gt;new require&lt;/code&gt; expression.</source>
          <target state="translated">该规则旨在消除对 &lt;code&gt;new require&lt;/code&gt; 表达式的使用。</target>
        </trans-unit>
        <trans-unit id="5c45676927d70f598783253e0bea435ad66234ed" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate use of void operator.</source>
          <target state="translated">这条规则旨在消除无效操作符的使用。</target>
        </trans-unit>
        <trans-unit id="48d1f57364c5256d0ae461b9199819e3a8b9a78b" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate variable declarations that initialize to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">该规则旨在消除初始化为 &lt;code&gt;undefined&lt;/code&gt; 的变量声明。</target>
        </trans-unit>
        <trans-unit id="fbcce07eac2aa6192b1ddc51290a27b70c2f04eb" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce a consistent location for an arrow function containing an implicit return.</source>
          <target state="translated">这条规则旨在为包含隐式返回的箭头函数执行一个一致的位置。</target>
        </trans-unit>
        <trans-unit id="eb1977fa84b455feda9d85eeaa544101fd9f3fbf" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce a consistent location for single-line statements.</source>
          <target state="translated">这条规则旨在对单行报表实施一致的定位。</target>
        </trans-unit>
        <trans-unit id="b867f1fa85c3f2e39f5c14f4c8ac390156b6d095" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce a consistent spacing after function names. It takes one argument. If it is &lt;code&gt;&quot;always&quot;&lt;/code&gt; then all function names must be followed by at least one space. If &lt;code&gt;&quot;never&quot;&lt;/code&gt; then there should be no spaces between the name and the parameter list. The default is &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">该规则旨在在函数名称后强制保持一致的间距。这需要一个论点。如果它是 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 则所有函数名都必须至少跟一个空格。如果 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 则名称和参数列表之间不应有空格。默认值为 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e1a6efa92543cd5aa3a3a596f4883486404ece7e" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce a consistent style of comments across your codebase, specifically by either requiring or disallowing a capitalized letter as the first word character in a comment. This rule will not issue warnings when non-cased letters are used.</source>
          <target state="translated">这条规则的目的是在整个代码库中执行一致的注释风格,特别是通过要求或不允许将大写字母作为注释中的第一个单词字符。当使用非大写字母时,本规则不会发出警告。</target>
        </trans-unit>
        <trans-unit id="e791249ab8dca492c1f2141589f3eb6bc72cf3c8" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce a particular style for multiline comments.</source>
          <target state="translated">这条规则旨在为多行注释执行一种特殊的风格。</target>
        </trans-unit>
        <trans-unit id="6262c51d84ae60e80179b10f10d0c494db5871ba" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce consistent spacing before function parentheses and as such, will warn whenever whitespace doesn't match the preferences specified.</source>
          <target state="translated">这条规则的目的是在函数括号前执行一致的间距,因此,每当whitespace不符合指定的偏好时,就会发出警告。</target>
        </trans-unit>
        <trans-unit id="4b6f5f82c41166d5305feac3b424a64f24ec2de7" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce consistent spacing between rest and spread operators and their expressions. The rule also supports object rest and spread properties in ES2018:</source>
          <target state="translated">该规则旨在强制执行休止符和展开符及其表达式之间的一致间距。该规则还支持ES2018中的对象休止符和展开属性。</target>
        </trans-unit>
        <trans-unit id="4f731649e3b7f7e5efcc5565b59ac49bf339b9bd" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce consistent style of conditions which compare a variable to a literal value.</source>
          <target state="translated">这条规则的目的是执行一致的条件风格,将一个变量与一个字面值进行比较。</target>
        </trans-unit>
        <trans-unit id="2b6b2668cbac3cad09e1c9734a8a1441d9917508" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce newline consistency in member expressions. This rule prevents the use of mixed newlines around the dot in a member expression.</source>
          <target state="translated">这条规则旨在加强成员表达式中换行的一致性。这条规则防止在成员表达式中的点周围使用混合换行。</target>
        </trans-unit>
        <trans-unit id="2cffeea6a2a1e0f1c63e68ad1fed69c744d4cd42" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce spacing around a semicolon. This rule prevents the use of spaces before a semicolon in expressions.</source>
          <target state="translated">这条规则旨在强制执行分号周围的间距。这条规则防止在表达式中分号前使用空格。</target>
        </trans-unit>
        <trans-unit id="b22c8565bc9c79a0eb4dd976c541072f09cd27cb" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce spacing around the &lt;code&gt;*&lt;/code&gt; of generator functions.</source>
          <target state="translated">该规则旨在强制生成器函数 &lt;code&gt;*&lt;/code&gt; 周围的间距。</target>
        </trans-unit>
        <trans-unit id="c6c8cae0c3746b9ee1294846ab4deb169a03fb7e" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce the use of &lt;code&gt;u&lt;/code&gt; flag on regular expressions.</source>
          <target state="translated">该规则旨在强制在正则表达式上使用 &lt;code&gt;u&lt;/code&gt; 标志。</target>
        </trans-unit>
        <trans-unit id="b724413bbc7774cb9e7213cadf0d9d98737efe2e" translate="yes" xml:space="preserve">
          <source>This rule aims to ensure that Promises are only rejected with &lt;code&gt;Error&lt;/code&gt; objects.</source>
          <target state="translated">该规则旨在确保Promises仅被 &lt;code&gt;Error&lt;/code&gt; 对象拒绝。</target>
        </trans-unit>
        <trans-unit id="2d2be7aea466d03ae53aad72ce5fdd33c3645ba7" translate="yes" xml:space="preserve">
          <source>This rule aims to flag any empty patterns in destructured objects and arrays, and as such, will report a problem whenever one is encountered.</source>
          <target state="translated">这条规则的目的是标记解构对象和数组中的任何空模式,因此,只要遇到问题,就会报告。</target>
        </trans-unit>
        <trans-unit id="a592c858175b10142eb43e999ebc64a50dcfe373" translate="yes" xml:space="preserve">
          <source>This rule aims to flag the concatenation of 2 literals when they could be combined into a single literal. Literals can be strings or template literals.</source>
          <target state="translated">这条规则的目的是,当2个字元可以组合成一个字元时,标记出它们的连接。字符可以是字符串或模板字符。</target>
        </trans-unit>
        <trans-unit id="214fb7b3fd0b5bc6164a95a24b81675437853823" translate="yes" xml:space="preserve">
          <source>This rule aims to flag usage of &lt;code&gt;this&lt;/code&gt; keywords outside of classes or class-like objects.</source>
          <target state="translated">该规则旨在标记在类或类对象之外的 &lt;code&gt;this&lt;/code&gt; 关键字的用法。</target>
        </trans-unit>
        <trans-unit id="24c3e70e3fae7f58f9b980f59921f130b41ed78b" translate="yes" xml:space="preserve">
          <source>This rule aims to keep all variable declarations in the leading series of statements. Allowing multiple declarations helps promote maintainability and is thus allowed.</source>
          <target state="translated">这条规则的目的是让所有的变量声明都在语句的前导系列中。允许多声明有助于促进可维护性,因此允许多声明。</target>
        </trans-unit>
        <trans-unit id="71e5f7302fd24c06c3efb5405b78c57959dcce5f" translate="yes" xml:space="preserve">
          <source>This rule aims to maintain consistency around the spacing between template tag functions and their template literals.</source>
          <target state="translated">这条规则旨在保持模板标签函数与其模板字元之间间距的一致性。</target>
        </trans-unit>
        <trans-unit id="150c5f9e13764b9a65e880ca75d609ec9ecae313" translate="yes" xml:space="preserve">
          <source>This rule aims to maintain consistency around the spacing inside of square brackets, either by disallowing spaces inside of brackets between the brackets and other tokens or enforcing spaces. Brackets that are separated from the adjacent value by a new line are excepted from this rule, as this is a common pattern. Object literals that are used as the first or last element in an array are also ignored.</source>
          <target state="translated">这条规则的目的是保持方括号内间距的一致性,要么不允许括号内与其他标记之间有空格,要么强制要求有空格。与相邻值之间用新行隔开的方括号不适用本规则,因为这是一种常见的模式。作为数组中第一个或最后一个元素的对象字元也会被忽略。</target>
        </trans-unit>
        <trans-unit id="36eab5f56c34b2954c3d688b8b69b5773b3b090b" translate="yes" xml:space="preserve">
          <source>This rule aims to maintain consistency around the spacing inside of template literals.</source>
          <target state="translated">这条规则的目的是保持模板字元内部间距的一致性。</target>
        </trans-unit>
        <trans-unit id="30783eb72cfbe7fb69dfa6cec962580e1d72bd33" translate="yes" xml:space="preserve">
          <source>This rule aims to prevent a likely common performance hazard due to a lack of understanding of the semantics of &lt;code&gt;async function&lt;/code&gt;.</source>
          <target state="translated">该规则旨在防止由于对 &lt;code&gt;async function&lt;/code&gt; 的语义缺乏了解而可能造成的常见性能危害。</target>
        </trans-unit>
        <trans-unit id="5e1ef57685846ed4d51c42c899ec1fd92fafeff6" translate="yes" xml:space="preserve">
          <source>This rule aims to prevent access to uninitialized lexical bindings as well as accessing hoisted functions across case clauses.</source>
          <target state="translated">这条规则的目的是防止访问未初始化的词汇绑定,以及跨大小写子句访问被挂起的函数。</target>
        </trans-unit>
        <trans-unit id="6e5eb8f772bf314b89f7928efd7b90f261f03737" translate="yes" xml:space="preserve">
          <source>This rule aims to prevent string concatenation of directory paths in Node.js</source>
          <target state="translated">这条规则的目的是防止Node.js中的目录路径的字符串连接</target>
        </trans-unit>
        <trans-unit id="cf1c4fed65963f6d5de090064570d7556a966719" translate="yes" xml:space="preserve">
          <source>This rule aims to prevent the use of &lt;code&gt;process.exit()&lt;/code&gt; in Node.js JavaScript. As such, it warns whenever &lt;code&gt;process.exit()&lt;/code&gt; is found in code.</source>
          <target state="translated">该规则旨在防止在Node.js JavaScript中使用 &lt;code&gt;process.exit()&lt;/code&gt; 。因此，只要在代码中找到 &lt;code&gt;process.exit()&lt;/code&gt; ，它都会发出警告。</target>
        </trans-unit>
        <trans-unit id="409f6777783015e5d446da7aabb24274cd2af6bc" translate="yes" xml:space="preserve">
          <source>This rule aims to prevent unintended behavior caused by modification or reassignment of function parameters.</source>
          <target state="translated">该规则旨在防止因修改或重新分配函数参数而引起的意外行为。</target>
        </trans-unit>
        <trans-unit id="e3d17d4fab4db7dafa21d53edc13a12c25850ade" translate="yes" xml:space="preserve">
          <source>This rule aims to reduce the scrolling required when reading through your code. It will warn when the maximum amount of empty lines has been exceeded.</source>
          <target state="translated">这个规则的目的是为了减少阅读代码时所需的滚动。当超过最大空行数时,它将发出警告。</target>
        </trans-unit>
        <trans-unit id="1f6fbb75638c174bd1e172892eb514a0a34a8d3f" translate="yes" xml:space="preserve">
          <source>This rule aims to reduce the usage of variables outside of their binding context and emulate traditional block scope from other languages. This is to help newcomers to the language avoid difficult bugs with variable hoisting.</source>
          <target state="translated">这条规则旨在减少变量在其绑定上下文之外的使用,并模仿其他语言的传统块范围。这是为了帮助语言新手避免变量提升的困难bug。</target>
        </trans-unit>
        <trans-unit id="b539890ebe3260afc1fcb09ef9f086c07d001574" translate="yes" xml:space="preserve">
          <source>This rule aims to report assignments to variables or properties where all of the following are true:</source>
          <target state="translated">这条规则的目的是报告下列所有情况下对变量或属性的赋值。</target>
        </trans-unit>
        <trans-unit id="93abe223f86c93c950b6940428eb85c499aebf5e" translate="yes" xml:space="preserve">
          <source>This rule aims to report redundant &lt;code&gt;return&lt;/code&gt; statements.</source>
          <target state="translated">该规则旨在报告多余的 &lt;code&gt;return&lt;/code&gt; 单。</target>
        </trans-unit>
        <trans-unit id="d867bee8c0ef9d1755baf36ec331ce21d92cfc42" translate="yes" xml:space="preserve">
          <source>This rule aims to require &lt;code&gt;default&lt;/code&gt; case in &lt;code&gt;switch&lt;/code&gt; statements. You may optionally include a &lt;code&gt;// no default&lt;/code&gt; after the last &lt;code&gt;case&lt;/code&gt; if there is no &lt;code&gt;default&lt;/code&gt; case. The comment may be in any desired case, such as &lt;code&gt;// No Default&lt;/code&gt;.</source>
          <target state="translated">该规则旨在要求 &lt;code&gt;switch&lt;/code&gt; 语句中使用 &lt;code&gt;default&lt;/code&gt; 大小写。如果 &lt;code&gt;// no default&lt;/code&gt; &lt;code&gt;case&lt;/code&gt; 则可以选择在最后一个情况之后添加//无默认 &lt;code&gt;default&lt;/code&gt; 。注释可以是任何所需的情况，例如 &lt;code&gt;// No Default&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d516ffc4d6d0f8cdf67c20a1d6d200eecd43071" translate="yes" xml:space="preserve">
          <source>This rule aims to warn when a regular string contains what looks like a template literal placeholder. It will warn when it finds a string containing the template literal placeholder (&lt;code&gt;${something}&lt;/code&gt;) that uses either &lt;code&gt;&quot;&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt; for the quotes.</source>
          <target state="translated">该规则旨在警告常规字符串何时包含看起来像模板文字占位符的字符串。当找到包含使用 &lt;code&gt;&quot;&lt;/code&gt; 或 &lt;code&gt;'&lt;/code&gt; 作为引号的模板文字占位符（ &lt;code&gt;${something}&lt;/code&gt; ）的字符串时，它将发出警告。</target>
        </trans-unit>
        <trans-unit id="d19a577c19b7a34026fabd0b591e6e9b824b7cea" translate="yes" xml:space="preserve">
          <source>This rule allows for more fine-grained control with the following options:</source>
          <target state="translated">该规则允许通过以下选项进行更精细的控制。</target>
        </trans-unit>
        <trans-unit id="f0c570d2beef2d1b384161fc0c0365ad5078f12d" translate="yes" xml:space="preserve">
          <source>This rule allows you to specify global variable names that you don't want to use in your application.</source>
          <target state="translated">这个规则允许你指定不想在应用程序中使用的全局变量名。</target>
        </trans-unit>
        <trans-unit id="1581ab10c7b99d0115b10189be184f7f111ada69" translate="yes" xml:space="preserve">
          <source>This rule allows you to specify imports that you don't want to use in your application.</source>
          <target state="translated">这条规则允许你指定你不想在你的应用程序中使用的导入。</target>
        </trans-unit>
        <trans-unit id="223ddf28af7da49a479aa6ebab902a45d421b7b1" translate="yes" xml:space="preserve">
          <source>This rule allows you to specify modules that you don&amp;rsquo;t want to use in your application.</source>
          <target state="translated">此规则允许您指定不想在应用程序中使用的模块。</target>
        </trans-unit>
        <trans-unit id="4008a4cdc8168bfe31edc5e762d717e7f1530720" translate="yes" xml:space="preserve">
          <source>This rule also accepts an additional &lt;code&gt;exceptions&lt;/code&gt; object:</source>
          <target state="translated">此规则还接受其他 &lt;code&gt;exceptions&lt;/code&gt; 对象：</target>
        </trans-unit>
        <trans-unit id="7455ce82eafb5ac293e4c9c4e5d678aaa1247cb6" translate="yes" xml:space="preserve">
          <source>This rule also disallows redeclarations of read-only global variables and assigments to read-only global variables.</source>
          <target state="translated">这条规则也不允许重新声明只读全局变量和分配给只读全局变量。</target>
        </trans-unit>
        <trans-unit id="8debc519e6ab3a215045f322d1aa6bee8909f42e" translate="yes" xml:space="preserve">
          <source>This rule also disallows the use of the &lt;code&gt;RegExp&lt;/code&gt; constructor function with template literals without expressions and &lt;code&gt;String.raw&lt;/code&gt; tagged template literals without expressions.</source>
          <target state="translated">此规则还不允许将 &lt;code&gt;RegExp&lt;/code&gt; 构造函数与带有表达式的模板文字和带有表达式的 &lt;code&gt;String.raw&lt;/code&gt; 标记模板文字一起使用。</target>
        </trans-unit>
        <trans-unit id="ff184a54582c14a5cd4c91bd6524497a01429bba" translate="yes" xml:space="preserve">
          <source>This rule also does not disallow redeclarations of global variables. See &lt;a href=&quot;no-redeclare&quot;&gt;no-redeclare&lt;/a&gt; if you also want to disallow those redeclarations.</source>
          <target state="translated">此规则也不允许重新声明全局变量。如果您还想禁止这些重新声明，请参见&lt;a href=&quot;no-redeclare&quot;&gt;no-&lt;/a&gt; redeclare。</target>
        </trans-unit>
        <trans-unit id="379f7d883e132f615627eab94e7212c5b2fb0fc7" translate="yes" xml:space="preserve">
          <source>This rule always ignores extra parentheses around the following:</source>
          <target state="translated">这条规则总是忽略下面的额外括号。</target>
        </trans-unit>
        <trans-unit id="5ecf4c66ad5afb41dab6fa8f725a959d53498d0b" translate="yes" xml:space="preserve">
          <source>This rule analyzes code statically to check whether or not the &lt;code&gt;this&lt;/code&gt; argument is changed. So, if the &lt;code&gt;this&lt;/code&gt; argument is computed in a dynamic expression, this rule cannot detect a violation.</source>
          <target state="translated">该规则静态分析代码以检查 &lt;code&gt;this&lt;/code&gt; 参数是否被更改。因此，如果在动态表达式中计算 &lt;code&gt;this&lt;/code&gt; 参数，则该规则无法检测到违规。</target>
        </trans-unit>
        <trans-unit id="6772ffa8e5405f66988ea470070e631ecb94f272" translate="yes" xml:space="preserve">
          <source>This rule applies &lt;strong&gt;only&lt;/strong&gt; in strict mode. With &lt;code&gt;&quot;parserOptions&quot;: { &quot;sourceType&quot;: &quot;module&quot; }&lt;/code&gt; in the ESLint configuration, your code is in strict mode even without a &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; directive.</source>
          <target state="translated">此规则适用于&lt;strong&gt;仅&lt;/strong&gt;在严格模式。在ESLint配置中使用 &lt;code&gt;&quot;parserOptions&quot;: { &quot;sourceType&quot;: &quot;module&quot; }&lt;/code&gt; ，即使没有 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 指令，您的代码也处于严格模式。</target>
        </trans-unit>
        <trans-unit id="42e1226e4e68a477056e8578613cfc2481a8ae2b" translate="yes" xml:space="preserve">
          <source>This rule applies equally to all property specifications, regardless of notation, including:</source>
          <target state="translated">这一规则同样适用于所有财产规格,无论其符号如何,包括:</target>
        </trans-unit>
        <trans-unit id="fb5fdaa6a9ac15d93f4b4688421cd1224351eea5" translate="yes" xml:space="preserve">
          <source>This rule can also detect some cases where the conditions are not identical, but the branch can never execute due to the logic of &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operators.</source>
          <target state="translated">此规则还可以检测某些条件不相同的情况，但是由于 &lt;code&gt;||&lt;/code&gt; 的逻辑，该分支永远无法执行。和 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 运算符。</target>
        </trans-unit>
        <trans-unit id="1dd21d49f84a0e870fa7e592ae681de4ba00ad77" translate="yes" xml:space="preserve">
          <source>This rule can also take a 2nd option, an object with any of the following keys: &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; and &lt;code&gt;&quot;markers&quot;&lt;/code&gt;.</source>
          <target state="translated">该规则还可以采用第二个选项，即具有以下任意键的对象： &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; 和 &lt;code&gt;&quot;markers&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="47163ca8b37e69af3ca7c7a8ac2331145d34d560" translate="yes" xml:space="preserve">
          <source>This rule can be also configured to fail when function parameters are modified. Side effects on parameters can cause counter-intuitive execution flow and make errors difficult to track down.</source>
          <target state="translated">该规则还可以配置为当函数参数被修改时失效。对参数的副作用会造成反直觉的执行流程,使错误难以追踪。</target>
        </trans-unit>
        <trans-unit id="6917cbcfe667e9bff37ed7e0213d14fa5f09907e" translate="yes" xml:space="preserve">
          <source>This rule can be disabled if you do not care about the grammatical style of comments in your codebase.</source>
          <target state="translated">如果你不关心代码库中注释的语法风格,这个规则可以被禁用。</target>
        </trans-unit>
        <trans-unit id="c86802043e5a42d0c87e5c400fd976b6b831fe79" translate="yes" xml:space="preserve">
          <source>This rule can enforce or disallow parentheses when invoking a constructor with no arguments using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">使用 &lt;code&gt;new&lt;/code&gt; 关键字调用不带参数的构造函数时，此规则可以强制或禁止使用括号。</target>
        </trans-unit>
        <trans-unit id="fab043e44497127c421694342c9535fb8be7bb47" translate="yes" xml:space="preserve">
          <source>This rule can enforce or disallow the use of braces around arrow function body.</source>
          <target state="translated">该规则可以强制执行或不允许使用箭头功能体周围的括号。</target>
        </trans-unit>
        <trans-unit id="04625714952245a68d2406a7a314170f11304da3" translate="yes" xml:space="preserve">
          <source>This rule can enforce or disallow the use of named function expressions.</source>
          <target state="translated">该规则可以强制或禁止使用命名的函数表达式。</target>
        </trans-unit>
        <trans-unit id="c5ec60f85149782200572716052f0148287ff833" translate="yes" xml:space="preserve">
          <source>This rule can force usage of spacing &lt;em&gt;within&lt;/em&gt; the curly brace pair according to style guides.</source>
          <target state="translated">这条规则可以强制间距的使用&lt;em&gt;范围内&lt;/em&gt;，根据风格指南的大括号对。</target>
        </trans-unit>
        <trans-unit id="5044b90d330e4e48276fdf6f62933ee1db236245" translate="yes" xml:space="preserve">
          <source>This rule can have an object literal option whose two properties have &lt;code&gt;false&lt;/code&gt; values by default.</source>
          <target state="translated">该规则可以具有对象文字选项，其默认情况下两个属性的 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a683a6bea35295324d7b11ea6967959e557b903b" translate="yes" xml:space="preserve">
          <source>This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the &lt;code&gt;var&lt;/code&gt; keyword in a &lt;code&gt;for&lt;/code&gt; loop initializer).</source>
          <target state="translated">此规则可以帮助您查找由于变量和参数名称的拼写错误或意外的隐式全局变量（例如，由于忘记了 &lt;code&gt;for&lt;/code&gt; 循环初始化程序中的 &lt;code&gt;var&lt;/code&gt; 关键字）而导致的潜在ReferenceErrors 。</target>
        </trans-unit>
        <trans-unit id="0e588784adf09e4f19f68f57898d33838bc7a949" translate="yes" xml:space="preserve">
          <source>This rule can safely be turned off if your project does not care about enforcing a consistent comma style.</source>
          <target state="translated">如果你的项目不在乎执行一致的逗号风格,可以放心地关闭这个规则。</target>
        </trans-unit>
        <trans-unit id="319f5e934b81217bc9c29599abc76f7283906fd1" translate="yes" xml:space="preserve">
          <source>This rule can safely be turned off if your project does not care about enforcing a consistent style for spacing within function calls.</source>
          <target state="translated">如果你的项目不关心函数调用中的间距是否一致,那么可以放心地关闭这一规则。</target>
        </trans-unit>
        <trans-unit id="83ca1852fd5b5577b23f89ba764e415c41463351" translate="yes" xml:space="preserve">
          <source>This rule can take a string option:</source>
          <target state="translated">该规则可以采用字符串选项。</target>
        </trans-unit>
        <trans-unit id="8d302b0d1a764b90336232c3d99344f4fdc595cc" translate="yes" xml:space="preserve">
          <source>This rule cannot catch renaming the global object. Such as:</source>
          <target state="translated">这条规则不能抓住重命名全局对象。如:</target>
        </trans-unit>
        <trans-unit id="b042ff6c22a4f912b8710d8d89d471d2c64a9753" translate="yes" xml:space="preserve">
          <source>This rule checks &lt;code&gt;BinaryExpression&lt;/code&gt;, &lt;code&gt;LogicalExpression&lt;/code&gt; and &lt;code&gt;ConditionalExpression&lt;/code&gt;.</source>
          <target state="translated">此规则检查 &lt;code&gt;BinaryExpression&lt;/code&gt; ， &lt;code&gt;LogicalExpression&lt;/code&gt; 和 &lt;code&gt;ConditionalExpression&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="552d53bde16bdfdc088eecfad939881ac483a06e" translate="yes" xml:space="preserve">
          <source>This rule checks &lt;code&gt;this&lt;/code&gt;/&lt;code&gt;super&lt;/code&gt; keywords in constructors, then reports those that are before &lt;code&gt;super()&lt;/code&gt;.</source>
          <target state="translated">该规则检查构造函数中的 &lt;code&gt;this&lt;/code&gt; / &lt;code&gt;super&lt;/code&gt; 关键字，然后报告在 &lt;code&gt;super()&lt;/code&gt; 之前的那些关键字。</target>
        </trans-unit>
        <trans-unit id="aa2a356daedef6b25dafdb09f404f4d9d7c534d7" translate="yes" xml:space="preserve">
          <source>This rule checks all import declarations and verifies that all imports are first sorted by the used member syntax and then alphabetically by the first member or alias name.</source>
          <target state="translated">这条规则检查所有的导入声明,并验证所有的导入都是先按使用的成员语法排序,再按第一个成员或别名的字母顺序排序。</target>
        </trans-unit>
        <trans-unit id="6681e24fe3cd4462b2847bf209c235fc7c6d321d" translate="yes" xml:space="preserve">
          <source>This rule checks all property definitions of object expressions and verifies that all variables are sorted alphabetically.</source>
          <target state="translated">该规则检查对象表达式的所有属性定义,并验证所有变量是否按字母顺序排序。</target>
        </trans-unit>
        <trans-unit id="53d282e2a6aaf0156f34e994a7a84c5ab9a8a2e9" translate="yes" xml:space="preserve">
          <source>This rule checks all variable declaration blocks and verifies that all variables are sorted alphabetically. The default configuration of the rule is case-sensitive.</source>
          <target state="translated">该规则检查所有变量声明块,并验证所有变量是否按字母顺序排序。该规则的默认配置是区分大小写的。</target>
        </trans-unit>
        <trans-unit id="8a9d030c6f262c0eb05f86406da9ee712e2a4036" translate="yes" xml:space="preserve">
          <source>This rule checks callback functions of methods with the given names, &lt;em&gt;even if&lt;/em&gt; the object which has the method is &lt;em&gt;not&lt;/em&gt; an array.</source>
          <target state="translated">该规则检查具有给定名称的方法的回调函数，&lt;em&gt;即使&lt;/em&gt;具有该方法的对象&lt;em&gt;不是&lt;/em&gt;数组也是如此。</target>
        </trans-unit>
        <trans-unit id="811ae4bbbf023aea470d76c49787ebc765fdeff0" translate="yes" xml:space="preserve">
          <source>This rule checks setters in:</source>
          <target state="translated">此规则检查设置者在。</target>
        </trans-unit>
        <trans-unit id="d7892d555202afc91fa47f11f40a615394d6c548" translate="yes" xml:space="preserve">
          <source>This rule checks whether or not there is a valid &lt;code&gt;super()&lt;/code&gt; call.</source>
          <target state="translated">此规则检查是否存在有效的 &lt;code&gt;super()&lt;/code&gt; 调用。</target>
        </trans-unit>
        <trans-unit id="54a78dbb7a9691a20f2fe781235eea5e6e80464a" translate="yes" xml:space="preserve">
          <source>This rule compares code statically to check whether or not &lt;code&gt;thisArg&lt;/code&gt; is changed. So if the code about &lt;code&gt;thisArg&lt;/code&gt; is a dynamic expression, this rule cannot judge correctly.</source>
          <target state="translated">此规则静态比较代码以检查 &lt;code&gt;thisArg&lt;/code&gt; 是否已更改。因此，如果有关 &lt;code&gt;thisArg&lt;/code&gt; 的代码是动态表达式，则此规则无法正确判断。</target>
        </trans-unit>
        <trans-unit id="d720df68abbde6371ccb336cb5b04c0b024bfcbe" translate="yes" xml:space="preserve">
          <source>This rule controls spacing around colons of &lt;code&gt;case&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt; clauses in &lt;code&gt;switch&lt;/code&gt; statements. This rule does the check only if the consecutive tokens exist on the same line.</source>
          <target state="translated">该规则控制 &lt;code&gt;switch&lt;/code&gt; 语句中 &lt;code&gt;case&lt;/code&gt; 和 &lt;code&gt;default&lt;/code&gt; 子句冒号的间距。仅当连续的令牌存在于同一行上时，此规则才进行检查。</target>
        </trans-unit>
        <trans-unit id="b65c5e0660507bcb1cbffa479d53cf9ef3130bb7" translate="yes" xml:space="preserve">
          <source>This rule disallow ternary operators when simpler alternatives exist.</source>
          <target state="translated">当存在更简单的替代方案时,这条规则不允许使用三元运算符。</target>
        </trans-unit>
        <trans-unit id="66c64e243d9c8b7f3d32d22b51791322b59152e1" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;Array&lt;/code&gt; constructors.</source>
          <target state="translated">该规则不允许使用 &lt;code&gt;Array&lt;/code&gt; 构造函数。</target>
        </trans-unit>
        <trans-unit id="2d7b39e2d83b5189ce3fccae2add0fbca28323bd" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;Object&lt;/code&gt; constructors.</source>
          <target state="translated">该规则禁止 &lt;code&gt;Object&lt;/code&gt; 构造函数。</target>
        </trans-unit>
        <trans-unit id="ba886c3768e8d461d7e6410ed45538405491259c" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;continue&lt;/code&gt; statements.</source>
          <target state="translated">该规则不允许 &lt;code&gt;continue&lt;/code&gt; 语句。</target>
        </trans-unit>
        <trans-unit id="28e2d778ae331adafff9240ccbc8541573b702e3" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;debugger&lt;/code&gt; statements.</source>
          <target state="translated">该规则禁止 &lt;code&gt;debugger&lt;/code&gt; 语句。</target>
        </trans-unit>
        <trans-unit id="77ecd18c853e79ca97242bc0e014a3d48e6bd0bf" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;if&lt;/code&gt; statements as the only statement in &lt;code&gt;else&lt;/code&gt; blocks.</source>
          <target state="translated">该规则不允许 &lt;code&gt;if&lt;/code&gt; 语句作为 &lt;code&gt;else&lt;/code&gt; 语句中的唯一语句。</target>
        </trans-unit>
        <trans-unit id="8b411438723201d602af01f2fac9be049875e964" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, and &lt;code&gt;continue&lt;/code&gt; statements inside &lt;code&gt;finally&lt;/code&gt; blocks. It allows indirect usages, such as in &lt;code&gt;function&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; definitions.</source>
          <target state="translated">该规则不允许在 &lt;code&gt;finally&lt;/code&gt; 块内使用 &lt;code&gt;return&lt;/code&gt; ， &lt;code&gt;throw&lt;/code&gt; ， &lt;code&gt;break&lt;/code&gt; 和 &lt;code&gt;continue&lt;/code&gt; 语句。它允许间接使用，例如在 &lt;code&gt;function&lt;/code&gt; 或 &lt;code&gt;class&lt;/code&gt; 定义中。</target>
        </trans-unit>
        <trans-unit id="aa3287e2e1ed725bd09a2a525b1226c93b3ee9a9" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;function&lt;/code&gt; declarations at the top-level script scope. This does not apply to ES and CommonJS modules since they have a module scope.</source>
          <target state="translated">此规则不允许在顶级脚本作用域中进行 &lt;code&gt;var&lt;/code&gt; 和 &lt;code&gt;function&lt;/code&gt; 声明。这不适用于ES和CommonJS模块，因为它们具有模块范围。</target>
        </trans-unit>
        <trans-unit id="0accaadfc826cb02b40dc54ab44d8ca54d788318" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;with&lt;/code&gt; statements.</source>
          <target state="translated">该规则不允许 &lt;code&gt;with&lt;/code&gt; 语句。</target>
        </trans-unit>
        <trans-unit id="d0816a4406a52dfe53dd2f26aaa6a218737e2e84" translate="yes" xml:space="preserve">
          <source>This rule disallows ambiguous assignment operators in test conditions of &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, and &lt;code&gt;do...while&lt;/code&gt; statements.</source>
          <target state="translated">在 &lt;code&gt;if&lt;/code&gt; ， &lt;code&gt;for&lt;/code&gt; ， &lt;code&gt;while&lt;/code&gt; 和 &lt;code&gt;do...while&lt;/code&gt; 语句的测试条件下，该规则不允许模棱两可的赋值运算符。</target>
        </trans-unit>
        <trans-unit id="8677bdc954fa1f2eeec9ca7775cb8ed54d1de3dd" translate="yes" xml:space="preserve">
          <source>This rule disallows any function within a loop that contains unsafe references (e.g. to modified variables from the outer scope).</source>
          <target state="translated">这条规则不允许在循环中使用任何包含不安全引用的函数(例如,对外部作用域的修改变量)。</target>
        </trans-unit>
        <trans-unit id="757cbcf1d8da92458af55b0e8fce5ca71f270395" translate="yes" xml:space="preserve">
          <source>This rule disallows bitwise operators.</source>
          <target state="translated">这条规则不允许使用位运算符。</target>
        </trans-unit>
        <trans-unit id="2ba2e62f9853d2df763ddb95470409d3d5dadb00" translate="yes" xml:space="preserve">
          <source>This rule disallows calling and constructing the &lt;code&gt;Buffer()&lt;/code&gt; constructor.</source>
          <target state="translated">该规则不允许调用和构造 &lt;code&gt;Buffer()&lt;/code&gt; 构造函数。</target>
        </trans-unit>
        <trans-unit id="d28eb4a3b01fbca8d586fe789a603987455b25ef" translate="yes" xml:space="preserve">
          <source>This rule disallows calling some &lt;code&gt;Object.prototype&lt;/code&gt; methods directly on object instances.</source>
          <target state="translated">此规则不允许直接在对象实例上调用某些 &lt;code&gt;Object.prototype&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="a65487f41b142bfc3ef920b6e2e939a9693a4060" translate="yes" xml:space="preserve">
          <source>This rule disallows calling the &lt;code&gt;Math&lt;/code&gt;, &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;Reflect&lt;/code&gt; and &lt;code&gt;Atomics&lt;/code&gt; objects as functions.</source>
          <target state="translated">此规则不允许将 &lt;code&gt;Math&lt;/code&gt; ， &lt;code&gt;JSON&lt;/code&gt; ， &lt;code&gt;Reflect&lt;/code&gt; 和 &lt;code&gt;Atomics&lt;/code&gt; 对象称为函数。</target>
        </trans-unit>
        <trans-unit id="66519fe1823542f5bbdaf98053217a17d3a936db" translate="yes" xml:space="preserve">
          <source>This rule disallows calls to &lt;code&gt;Math.pow&lt;/code&gt; and suggests using the &lt;code&gt;**&lt;/code&gt; operator instead.</source>
          <target state="translated">该规则不允许调用 &lt;code&gt;Math.pow&lt;/code&gt; 并建议改用 &lt;code&gt;**&lt;/code&gt; 运算符。</target>
        </trans-unit>
        <trans-unit id="453af8a6b147940c91cf3d0f0f14518fdb22e680" translate="yes" xml:space="preserve">
          <source>This rule disallows calls to &lt;code&gt;parseInt()&lt;/code&gt; or &lt;code&gt;Number.parseInt()&lt;/code&gt; if called with two arguments: a string; and a radix option of 2 (binary), 8 (octal), or 16 (hexadecimal).</source>
          <target state="translated">如果使用两个参数调用此规则，则不允许调用 &lt;code&gt;parseInt()&lt;/code&gt; 或 &lt;code&gt;Number.parseInt()&lt;/code&gt; 。基数选项为2（二进制），8（八进制）或16（十六进制）。</target>
        </trans-unit>
        <trans-unit id="7c11518d5e9e53024b9db23ee18938c322abe1b8" translate="yes" xml:space="preserve">
          <source>This rule disallows calls to methods of the &lt;code&gt;console&lt;/code&gt; object.</source>
          <target state="translated">此规则不允许调用 &lt;code&gt;console&lt;/code&gt; 对象的方法。</target>
        </trans-unit>
        <trans-unit id="d9bf728f0d60d2ad1835867b881b066d84cc1a83" translate="yes" xml:space="preserve">
          <source>This rule disallows comments on the same line as code.</source>
          <target state="translated">这条规则不允许在代码的同一行上做注释。</target>
        </trans-unit>
        <trans-unit id="38acad92db5b12384568aaa44ce71bc077d91438" translate="yes" xml:space="preserve">
          <source>This rule disallows comparisons to 'NaN'.</source>
          <target state="translated">这条规则不允许与 &quot;NaN &quot;进行比较。</target>
        </trans-unit>
        <trans-unit id="6722af39ecadc9275de7d7950f1755fc3e1dc8a8" translate="yes" xml:space="preserve">
          <source>This rule disallows confusing multiline expressions where a newline looks like it is ending a statement, but is not.</source>
          <target state="translated">这条规则不允许混乱的多行表达式,即换行看起来像是语句的结尾,但实际上不是。</target>
        </trans-unit>
        <trans-unit id="258e15022990886cfb026d905dee4f4fa111f95d" translate="yes" xml:space="preserve">
          <source>This rule disallows constant expressions in the test condition of:</source>
          <target state="translated">这条规则不允许在以下的测试条件中使用常量表达式:。</target>
        </trans-unit>
        <trans-unit id="dd02e357765e8264ac8375fa6dba2d3a0f5d12e6" translate="yes" xml:space="preserve">
          <source>This rule disallows control characters in regular expressions.</source>
          <target state="translated">这条规则不允许在正则表达式中使用控制字符。</target>
        </trans-unit>
        <trans-unit id="d97267969958c3f085ea967e53b75c11c0399d94" translate="yes" xml:space="preserve">
          <source>This rule disallows dangling underscores in identifiers.</source>
          <target state="translated">这条规则不允许在标识符中出现下划线。</target>
        </trans-unit>
        <trans-unit id="9d7d30df17bc6a3759d4ec6107bf1a14e2331472" translate="yes" xml:space="preserve">
          <source>This rule disallows duplicate conditions in the same &lt;code&gt;if-else-if&lt;/code&gt; chain.</source>
          <target state="translated">该规则不允许在同一 &lt;code&gt;if-else-if&lt;/code&gt; 链中重复条件。</target>
        </trans-unit>
        <trans-unit id="669e6f096d22a6e0869257835432438a35f77244" translate="yes" xml:space="preserve">
          <source>This rule disallows duplicate keys in object literals.</source>
          <target state="translated">这条规则不允许在对象字面上出现重复的键。</target>
        </trans-unit>
        <trans-unit id="7636a3a8325f2f3b942229d4314412e8c9fe4000" translate="yes" xml:space="preserve">
          <source>This rule disallows duplicate parameter names in function declarations or expressions. It does not apply to arrow functions or class methods, because the parser reports the error.</source>
          <target state="translated">这条规则不允许在函数声明或表达式中出现重复的参数名。它不适用于箭头函数或类方法,因为解析器会报告错误。</target>
        </trans-unit>
        <trans-unit id="6c9a23985ede32b78311a6130f5daa7b5a0e5c70" translate="yes" xml:space="preserve">
          <source>This rule disallows duplicate test expressions in &lt;code&gt;case&lt;/code&gt; clauses of &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">该规则不允许在 &lt;code&gt;switch&lt;/code&gt; 语句的 &lt;code&gt;case&lt;/code&gt; 子句中使用重复的测试表达式。</target>
        </trans-unit>
        <trans-unit id="11a8595e3b7ff0becb4aa44a6f814356743892d7" translate="yes" xml:space="preserve">
          <source>This rule disallows empty block statements. This rule ignores block statements which contain a comment (for example, in an empty &lt;code&gt;catch&lt;/code&gt; or &lt;code&gt;finally&lt;/code&gt; block of a &lt;code&gt;try&lt;/code&gt; statement to indicate that execution should continue regardless of errors).</source>
          <target state="translated">该规则禁止空块语句。此规则将忽略包含注释的块语句（例如，在空 &lt;code&gt;catch&lt;/code&gt; 或 &lt;code&gt;try&lt;/code&gt; 语句的 &lt;code&gt;finally&lt;/code&gt; 块中，以指示无论错误如何都应继续执行）。</target>
        </trans-unit>
        <trans-unit id="2d86de4594606a9cd31df77cbc4cb951b0fa98e7" translate="yes" xml:space="preserve">
          <source>This rule disallows empty character classes in regular expressions.</source>
          <target state="translated">此规则不允许正则表达式中的空字符类。</target>
        </trans-unit>
        <trans-unit id="694dfe25fef30c26f5a1d76ea280c630e2f2d505" translate="yes" xml:space="preserve">
          <source>This rule disallows invalid regular expression strings in &lt;code&gt;RegExp&lt;/code&gt; constructors.</source>
          <target state="translated">此规则在 &lt;code&gt;RegExp&lt;/code&gt; 构造函数中不允许使用无效的正则表达式字符串。</target>
        </trans-unit>
        <trans-unit id="5714adb7d09b1a0bd6d25baa62df73e6d30886dd" translate="yes" xml:space="preserve">
          <source>This rule disallows lexical declarations (&lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt;) in &lt;code&gt;case&lt;/code&gt;/&lt;code&gt;default&lt;/code&gt; clauses. The reason is that the lexical declaration is visible in the entire switch block but it only gets initialized when it is assigned, which will only happen if the case where it is defined is reached.</source>
          <target state="translated">该规则禁止在 &lt;code&gt;case&lt;/code&gt; / &lt;code&gt;default&lt;/code&gt; 子句中进行词法声明（ &lt;code&gt;let&lt;/code&gt; ， &lt;code&gt;const&lt;/code&gt; ， &lt;code&gt;function&lt;/code&gt; 和 &lt;code&gt;class&lt;/code&gt; ）。原因是词汇声明在整个switch块中都是可见的，但是只有在分配时才被初始化，只有在达到定义的情况下才会发生。</target>
        </trans-unit>
        <trans-unit id="cba35921de730b64544fac2a4ad17c9226505407" translate="yes" xml:space="preserve">
          <source>This rule disallows mixed spaces and tabs for indentation.</source>
          <target state="translated">这条规则不允许在缩进时使用混合空格和制表符。</target>
        </trans-unit>
        <trans-unit id="3cfcfa6c88ec162c7f3d854aa2225d063abfb9d3" translate="yes" xml:space="preserve">
          <source>This rule disallows modifications to read-only global variables.</source>
          <target state="translated">这条规则不允许修改只读的全局变量。</target>
        </trans-unit>
        <trans-unit id="4703c528be92a0741324e06b06061b7ee7cce8b0" translate="yes" xml:space="preserve">
          <source>This rule disallows multiple spaces in regular expression literals.</source>
          <target state="translated">这条规则不允许在正则表达式字面中出现多个空格。</target>
        </trans-unit>
        <trans-unit id="a1a3b7b955c9a74f52aa8e49d111ff25d49f9646" translate="yes" xml:space="preserve">
          <source>This rule disallows negated conditions in either of the following:</source>
          <target state="translated">本规则不允许下列任何一种情况下的否定条件。</target>
        </trans-unit>
        <trans-unit id="2f9f8d13d0c314cf76143475b6613aba5359fcaa" translate="yes" xml:space="preserve">
          <source>This rule disallows negating the left operand in &lt;code&gt;in&lt;/code&gt; expressions.</source>
          <target state="translated">此规则不允许 &lt;code&gt;in&lt;/code&gt; 表达式中取反左操作数。</target>
        </trans-unit>
        <trans-unit id="2c4f50e13ddde727f6bc3fd3a0d4f4a043473808" translate="yes" xml:space="preserve">
          <source>This rule disallows negating the left operand of the following relational operators:</source>
          <target state="translated">这条规则不允许否定以下关系运算符的左操作数。</target>
        </trans-unit>
        <trans-unit id="740b99aac0bd437017d6910a9ae782e1f9212ca6" translate="yes" xml:space="preserve">
          <source>This rule disallows octal escape sequences in string literals.</source>
          <target state="translated">这条规则不允许在字符串文字中使用八进制转义序列。</target>
        </trans-unit>
        <trans-unit id="4bcfc1a7a7b96bced57ff984ffc562561897447d" translate="yes" xml:space="preserve">
          <source>This rule disallows reassigning &lt;code&gt;function&lt;/code&gt; declarations.</source>
          <target state="translated">此规则不允许重新分配 &lt;code&gt;function&lt;/code&gt; 声明。</target>
        </trans-unit>
        <trans-unit id="c91a55b890383ea5bda5e176f1ddc75d172d67fc" translate="yes" xml:space="preserve">
          <source>This rule disallows reassigning exceptions in &lt;code&gt;catch&lt;/code&gt; clauses.</source>
          <target state="translated">该规则不允许在 &lt;code&gt;catch&lt;/code&gt; 子句中重新分配异常。</target>
        </trans-unit>
        <trans-unit id="78996379b2829ba6163762ae3d6f36e1875d3851" translate="yes" xml:space="preserve">
          <source>This rule disallows return statements in the constructor of a class. Note that returning nothing with flow control is allowed.</source>
          <target state="translated">这条规则不允许在类的构造函数中使用返回语句。需要注意的是,允许在流控制下不返回任何内容。</target>
        </trans-unit>
        <trans-unit id="a4bc5ad478a3d1d339c1f1e60883a910aec68e9f" translate="yes" xml:space="preserve">
          <source>This rule disallows returning values from setters and reports &lt;code&gt;return&lt;/code&gt; statements in setter functions.</source>
          <target state="translated">此规则不允许从setter返回值，并在setter函数中报告 &lt;code&gt;return&lt;/code&gt; 语句。</target>
        </trans-unit>
        <trans-unit id="12bb6672210db1555632eb13b90c2f0873ddab24" translate="yes" xml:space="preserve">
          <source>This rule disallows spacing between function identifiers and their applications.</source>
          <target state="translated">这条规则不允许函数标识符和它们的应用之间有间隔。</target>
        </trans-unit>
        <trans-unit id="21051882fd62b760206518e138fc00d233c6d34d" translate="yes" xml:space="preserve">
          <source>This rule disallows sparse array literals which have &quot;holes&quot; where commas are not preceded by elements. It does not apply to a trailing comma following the last element.</source>
          <target state="translated">这条规则不允许稀疏数组的字元有 &quot;洞&quot;,即逗号不在元素前。它不适用于最后一个元素后面的逗号。</target>
        </trans-unit>
        <trans-unit id="3e0f2dd02ecc28b0aedee1775ef621f78fda1928" translate="yes" xml:space="preserve">
          <source>This rule disallows specified (that is, user-defined) syntax.</source>
          <target state="translated">这条规则不允许使用指定(即用户定义)的语法。</target>
        </trans-unit>
        <trans-unit id="63c9ec1dc80420a119d382ef172cf2b9504b6a24" translate="yes" xml:space="preserve">
          <source>This rule disallows specified identifiers in assignments and &lt;code&gt;function&lt;/code&gt; definitions.</source>
          <target state="translated">该规则不允许在赋值和 &lt;code&gt;function&lt;/code&gt; 定义中使用指定的标识符。</target>
        </trans-unit>
        <trans-unit id="1d519e0d0176940478dbf4f9f334aba740ff368c" translate="yes" xml:space="preserve">
          <source>This rule disallows strict mode directives, no matter which option is specified, if ESLint configuration specifies either of the following as &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;parser options&lt;/a&gt;:</source>
          <target state="translated">如果ESLint配置指定以下任何一项作为&lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;解析器选项&lt;/a&gt;，则无论指定了哪个选项，此规则都不允许使用严格的模式指令：</target>
        </trans-unit>
        <trans-unit id="1a70b94ae9b04895e4ea44427ce5ab6dcdea44b0" translate="yes" xml:space="preserve">
          <source>This rule disallows strict mode directives, no matter which option is specified, in functions with non-simple parameter lists (for example, parameter lists with default parameter values) because that is a syntax error in &lt;strong&gt;ECMAScript 2016&lt;/strong&gt; and later. See the examples of the &lt;a href=&quot;#function&quot;&gt;function&lt;/a&gt; option.</source>
          <target state="translated">在具有非简单参数列表（例如，具有默认参数值的参数列表）的函数中，无论指定了哪个选项，此规则均不允许使用严格的模式指令，因为这是&lt;strong&gt;ECMAScript 2016&lt;/strong&gt;及更高版本中的语法错误。请参阅&lt;a href=&quot;#function&quot;&gt;函数&lt;/a&gt;选项的示例。</target>
        </trans-unit>
        <trans-unit id="0cdffcec301f66189ef3b947a2a41598b9b0919b" translate="yes" xml:space="preserve">
          <source>This rule disallows ternary operators.</source>
          <target state="translated">这条规则不允许使用三元运算符。</target>
        </trans-unit>
        <trans-unit id="83d62ca0b0fcaa5de115aa302c9698e355c71269" translate="yes" xml:space="preserve">
          <source>This rule disallows the following characters except where the options allow:</source>
          <target state="translated">除非选项允许,否则此规则不允许使用以下字符。</target>
        </trans-unit>
        <trans-unit id="7fe71ef647822616e6e09c0fbddfc5ff073d456e" translate="yes" xml:space="preserve">
          <source>This rule disallows the following:</source>
          <target state="translated">这条规则不允许下列行为:</target>
        </trans-unit>
        <trans-unit id="96600cfbb07e22bbb8ea489b40ead855d9df0a5e" translate="yes" xml:space="preserve">
          <source>This rule disallows the renaming of import, export, and destructured assignments to the same name.</source>
          <target state="translated">这条规则不允许将导入、导出和解构赋值重命名为同一名称。</target>
        </trans-unit>
        <trans-unit id="150e05b85ffac58a6b096426b18dc0b52ef5c458" translate="yes" xml:space="preserve">
          <source>This rule disallows the unary operators &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt;.</source>
          <target state="translated">此规则不允许一元运算符 &lt;code&gt;++&lt;/code&gt; 和 &lt;code&gt;--&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2bb380ce8cb89a6cae85669483c509be1106c5e2" translate="yes" xml:space="preserve">
          <source>This rule disallows the use of &lt;code&gt;await&lt;/code&gt; within loop bodies.</source>
          <target state="translated">该规则不允许在循环体内使用 &lt;code&gt;await&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a9f30ad1084b430f3c2c865d41a7bfcba40d9b5c" translate="yes" xml:space="preserve">
          <source>This rule disallows the use of the &lt;code&gt;RegExp&lt;/code&gt; constructor function with string literals as its arguments.</source>
          <target state="translated">此规则不允许使用 &lt;code&gt;RegExp&lt;/code&gt; 构造函数以字符串文字作为参数。</target>
        </trans-unit>
        <trans-unit id="63d0dd8fef754a025cbe22a509125657519bf520" translate="yes" xml:space="preserve">
          <source>This rule disallows the use of the &lt;code&gt;delete&lt;/code&gt; operator on variables.</source>
          <target state="translated">该规则不允许对变量使用 &lt;code&gt;delete&lt;/code&gt; 运算符。</target>
        </trans-unit>
        <trans-unit id="263c02405afaf24815681f5c6d01741fdc2585e9" translate="yes" xml:space="preserve">
          <source>This rule disallows trailing whitespace (spaces, tabs, and other Unicode whitespace characters) at the end of lines.</source>
          <target state="translated">这条规则不允许在行末出现尾部空白(空格、制表符和其他Unicode空白字符)。</target>
        </trans-unit>
        <trans-unit id="a7a7d428483dbf516170f0e6ac300fb053cdd144" translate="yes" xml:space="preserve">
          <source>This rule disallows unnecessary boolean casts.</source>
          <target state="translated">这条规则禁止不必要的布尔投。</target>
        </trans-unit>
        <trans-unit id="9db8d010e4b21df44b098f694c42f2dd4eab415c" translate="yes" xml:space="preserve">
          <source>This rule disallows unnecessary semicolons.</source>
          <target state="translated">这条规则不允许使用不必要的分号。</target>
        </trans-unit>
        <trans-unit id="d9ecfca8a1a798c2905361902e770ebaaeebbbf4" translate="yes" xml:space="preserve">
          <source>This rule disallows unnecessary usage of computed property keys.</source>
          <target state="translated">这条规则不允许不必要地使用计算的属性键。</target>
        </trans-unit>
        <trans-unit id="6a19f5c8490d1ba026ed2c643c3a4351a202d08f" translate="yes" xml:space="preserve">
          <source>This rule disallows unreachable code after &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, and &lt;code&gt;break&lt;/code&gt; statements.</source>
          <target state="translated">该规则禁止在 &lt;code&gt;return&lt;/code&gt; ， &lt;code&gt;throw&lt;/code&gt; ， &lt;code&gt;continue&lt;/code&gt; 和 &lt;code&gt;break&lt;/code&gt; 语句之后出现无法访问的代码。</target>
        </trans-unit>
        <trans-unit id="e63d4f3884bfa8fa4f27ddb207b05212dad647be" translate="yes" xml:space="preserve">
          <source>This rule disallows using multiple assignments within a single statement.</source>
          <target state="translated">这条规则不允许在单条语句中使用多个赋值。</target>
        </trans-unit>
        <trans-unit id="25bf4d847dfa2ff4961c001bb9780bc07382514c" translate="yes" xml:space="preserve">
          <source>This rule disallows whitespace around the dot or before the opening bracket before properties of objects if they are on the same line. This rule allows whitespace when the object and property are on separate lines, as it is common to add newlines to longer chains of properties:</source>
          <target state="translated">如果对象的属性在同一行,这条规则不允许在对象的点周围或在属性前的括号前留白。当对象和属性在不同的行上时,这条规则允许使用空格,因为通常在较长的属性链上添加换行。</target>
        </trans-unit>
        <trans-unit id="9e9a9afc266a9f1caa2064407f3d3f1037d9fe0e" translate="yes" xml:space="preserve">
          <source>This rule distinguishes between six kinds of variable declaration types:</source>
          <target state="translated">本规则区分了六种变量声明类型。</target>
        </trans-unit>
        <trans-unit id="cdbb91e3e92f7914450202f6764f5b77ba2a26f1" translate="yes" xml:space="preserve">
          <source>This rule does not apply in an &lt;code&gt;ArrayExpression&lt;/code&gt; or &lt;code&gt;ArrayPattern&lt;/code&gt; in either of the following cases:</source>
          <target state="translated">在以下两种情况下，此规则都不适用于 &lt;code&gt;ArrayExpression&lt;/code&gt; 或 &lt;code&gt;ArrayPattern&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="203d845e651b402a1ac8edc950ecd9464c5828ae" translate="yes" xml:space="preserve">
          <source>This rule does not apply in either of the following cases:</source>
          <target state="translated">本规则不适用于下列任何一种情况:</target>
        </trans-unit>
        <trans-unit id="3f490639d9b5cca1ffe33a6bc2bbf099505645ed" translate="yes" xml:space="preserve">
          <source>This rule does not apply to directives (which are in the form of literal string expressions such as &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; at the beginning of a script, module, or function).</source>
          <target state="translated">此规则不适用于指令（在脚本，模块或函数的开头，指令采用文字字符串表达式的形式，例如 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="74c73caf5eb1d682942527e0676b6230a86733fc" translate="yes" xml:space="preserve">
          <source>This rule does not apply to function calls or constructor calls with the &lt;code&gt;new&lt;/code&gt; operator, because they could have &lt;em&gt;side effects&lt;/em&gt; on the state of the program.</source>
          <target state="translated">该规则不适用于使用 &lt;code&gt;new&lt;/code&gt; 运算符的函数调用或构造函数调用，因为它们可能会对程序状态&lt;em&gt;产生副作用&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3ad5609fd443c44c12476d22f78115240259d7d6" translate="yes" xml:space="preserve">
          <source>This rule does not enforce the existence of the pair for a getter or a setter. See &lt;a href=&quot;accessor-pairs&quot;&gt;accessor-pairs&lt;/a&gt; if you also want to enforce getter/setter pairs.</source>
          <target state="translated">此规则不会强制吸气剂或塞特剂存在配对。如果您还想强制执行getter / setter对，请参阅&lt;a href=&quot;accessor-pairs&quot;&gt;访问&lt;/a&gt;器对。</target>
        </trans-unit>
        <trans-unit id="854c2eba272fbba2377e73728b6e8e8a5ab8a7c8" translate="yes" xml:space="preserve">
          <source>This rule does not flag arrow functions inside of object literals. The following will &lt;em&gt;not&lt;/em&gt; warn:</source>
          <target state="translated">此规则不标记对象文字内部的箭头功能。以下内容&lt;em&gt;不会&lt;/em&gt;发出警告：</target>
        </trans-unit>
        <trans-unit id="86d082160176ea469e94732a9224b99947a25f26" translate="yes" xml:space="preserve">
          <source>This rule does not report empty character classes in the string argument of calls to the &lt;code&gt;RegExp&lt;/code&gt; constructor.</source>
          <target state="translated">此规则不会在对 &lt;code&gt;RegExp&lt;/code&gt; 构造函数的调用的字符串参数中报告空字符类。</target>
        </trans-unit>
        <trans-unit id="d27117920d1a4c3661be108f7fc91787931c11a3" translate="yes" xml:space="preserve">
          <source>This rule does not report missing JSDoc comments for classes, functions, or methods.</source>
          <target state="translated">这条规则不会报告类、函数或方法的JSDoc注释缺失。</target>
        </trans-unit>
        <trans-unit id="329e07b776a9b047bbee9ba7aeb1d91f67a6f539" translate="yes" xml:space="preserve">
          <source>This rule does nothing if no configurations are provided.</source>
          <target state="translated">如果没有提供配置,该规则就不会有任何作用。</target>
        </trans-unit>
        <trans-unit id="e35b9e62ac94294420d469553afbaf12b36ac992" translate="yes" xml:space="preserve">
          <source>This rule doesn't check spacing in the following cases:</source>
          <target state="translated">在下列情况下,该规则不检查间距。</target>
        </trans-unit>
        <trans-unit id="ed6ace70b69e1bae1fbb742835f6e9d160caa326" translate="yes" xml:space="preserve">
          <source>This rule enforce consistent comma style in array literals, object literals, and variable declarations.</source>
          <target state="translated">这条规则在数组文字、对象文字和变量声明中执行一致的逗号样式。</target>
        </trans-unit>
        <trans-unit id="5ee5487658a78c52a1bdf48fa389ad64744891d9" translate="yes" xml:space="preserve">
          <source>This rule enforces a coding style where empty lines are required or disallowed after &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;const&lt;/code&gt; statements to achieve a consistent coding style across the project.</source>
          <target state="translated">此规则强制执行一种编码样式，其中在 &lt;code&gt;var&lt;/code&gt; ， &lt;code&gt;let&lt;/code&gt; 或 &lt;code&gt;const&lt;/code&gt; 语句之后需要或不允许使用空行，以在整个项目中实现一致的编码样式。</target>
        </trans-unit>
        <trans-unit id="b3a30607c883a5da29ceb97f5b29fe497063b7f4" translate="yes" xml:space="preserve">
          <source>This rule enforces a consistent indentation style. The default style is &lt;code&gt;4 spaces&lt;/code&gt;.</source>
          <target state="translated">此规则强制使用一致的缩进样式。默认样式为 &lt;code&gt;4 spaces&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="053d9249665cec6c7a51225c330deea8b4d964fe" translate="yes" xml:space="preserve">
          <source>This rule enforces a consistent linebreak style for operators.</source>
          <target state="translated">这条规则为操作者实施了一致的断线风格。</target>
        </trans-unit>
        <trans-unit id="2dc207f7c0cdd5ec6f45d65ca43e291f84147958" translate="yes" xml:space="preserve">
          <source>This rule enforces a consistent newlines around variable declarations. This rule ignores variable declarations inside &lt;code&gt;for&lt;/code&gt; loop conditionals.</source>
          <target state="translated">该规则在变量声明周围强制使用一致的换行符。这条规则忽略内部的变量声明 &lt;code&gt;for&lt;/code&gt; 循环条件句。</target>
        </trans-unit>
        <trans-unit id="84f0362da7498b4295196fca6493ae7190176738" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum depth that blocks can be nested to reduce code complexity.</source>
          <target state="translated">这条规则规定了区块嵌套的最大深度,以降低代码的复杂性。</target>
        </trans-unit>
        <trans-unit id="4335e81d4479cc83b3771caa8aa5dff2eb5111a3" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum depth that callbacks can be nested to increase code clarity.</source>
          <target state="translated">这条规则规定了回调可以嵌套的最大深度,以提高代码的清晰度。</target>
        </trans-unit>
        <trans-unit id="4cfe7ab9be0d3cf7c4bd26c43cf9d145739278f3" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.</source>
          <target state="translated">这条规则规定了最大行长,以提高代码的可读性和可维护性。行的长度定义为行中Unicode字符的数量。</target>
        </trans-unit>
        <trans-unit id="ec9c52da0098b06b0b6d8526eddee3dc69ce058a" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum number of lines per file, in order to aid in maintainability and reduce complexity.</source>
          <target state="translated">这条规则规定了每个文件的最大行数,以帮助维护和减少复杂性。</target>
        </trans-unit>
        <trans-unit id="88b1bf1896fc036cbc88285ee2b031a3838d7474" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum number of lines per function, in order to aid in maintainability and reduce complexity.</source>
          <target state="translated">这条规则规定了每个函数的最大行数,以帮助维护和降低复杂性。</target>
        </trans-unit>
        <trans-unit id="44007589ecb2a4769b62fe380270b72abb99231d" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum number of parameters allowed in function definitions.</source>
          <target state="translated">该规则规定了函数定义中允许的最大参数数。</target>
        </trans-unit>
        <trans-unit id="101841de9bcf819f5ed87d837a7ea9eda3cccdfb" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum number of statements allowed in function blocks.</source>
          <target state="translated">这条规则规定了函数块中允许的最大语句数。</target>
        </trans-unit>
        <trans-unit id="f803854de3d5f4eb6dba4c3bad230da6dbe1073d" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum number of statements allowed per line.</source>
          <target state="translated">这条规则规定了每行允许的最大语句数。</target>
        </trans-unit>
        <trans-unit id="a08a080563efd2eec379c0e949b7107a0946a1c4" translate="yes" xml:space="preserve">
          <source>This rule enforces a minimum and/or maximum identifier length convention.</source>
          <target state="translated">该规则强制执行最小和/或最大标识符长度惯例。</target>
        </trans-unit>
        <trans-unit id="a12ae4058804b73570753830d04876debfe743a7" translate="yes" xml:space="preserve">
          <source>This rule enforces a nearly universal stylistic concern. That being said, this rule may be disabled if the constructor style is preferred.</source>
          <target state="translated">这条规则强制执行了一个几乎普遍的风格关注。也就是说,如果喜欢构造函数的风格,这条规则可以被禁用。</target>
        </trans-unit>
        <trans-unit id="f0177a6b9f488d9007a94ed192deb1738ff81f54" translate="yes" xml:space="preserve">
          <source>This rule enforces a particular type of &lt;code&gt;function&lt;/code&gt; style throughout a JavaScript file, either declarations or expressions. You can specify which you prefer in the configuration.</source>
          <target state="translated">该规则在整个JavaScript文件中强制使用一种特定类型的 &lt;code&gt;function&lt;/code&gt; 样式，即声明或表达式。您可以在配置中指定首选。</target>
        </trans-unit>
        <trans-unit id="7c62d8b9628e4222ce0de1cda323d56688f112a7" translate="yes" xml:space="preserve">
          <source>This rule enforces a style where it requires to have a getter for every property which has a setter defined.</source>
          <target state="translated">这条规则强制执行一种风格,它要求为每个定义了setter的属性设置一个getter。</target>
        </trans-unit>
        <trans-unit id="99a6b55cecafcb07815b6ce6b225784a37946856" translate="yes" xml:space="preserve">
          <source>This rule enforces at least one newline (or absence thereof) at the end of non-empty files.</source>
          <target state="translated">这条规则规定在非空文件的末尾至少要有一个新行(或没有新行)。</target>
        </trans-unit>
        <trans-unit id="c0f61cc113b072060777fa670e84b19c62761cb8" translate="yes" xml:space="preserve">
          <source>This rule enforces comparing &lt;code&gt;typeof&lt;/code&gt; expressions to valid string literals.</source>
          <target state="translated">该规则强制将 &lt;code&gt;typeof&lt;/code&gt; 表达式与有效的字符串文字进行比较。</target>
        </trans-unit>
        <trans-unit id="0d29e3bc583262a92e61b0df65bf87b587bc1245" translate="yes" xml:space="preserve">
          <source>This rule enforces consistency regarding the spaces after &lt;code&gt;words&lt;/code&gt; unary operators and after/before &lt;code&gt;nonwords&lt;/code&gt; unary operators.</source>
          <target state="translated">此规则加强了 &lt;code&gt;words&lt;/code&gt; 一元运算符之后和 &lt;code&gt;nonwords&lt;/code&gt; 单词一元运算符之后/之前的空格的一致性。</target>
        </trans-unit>
        <trans-unit id="4656356c361a67b0d4161201f70a8dde34f8fa7c" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent brace style for blocks.</source>
          <target state="translated">这条规则对区块执行一致的支架样式。</target>
        </trans-unit>
        <trans-unit id="c589693beabba7d58bd598910df76da4e9f1a779" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent empty line padding within blocks.</source>
          <target state="translated">这条规则强制执行块内一致的空行填充。</target>
        </trans-unit>
        <trans-unit id="595c763433e0de8f23a77358f7e01894f4ce51bb" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent line breaks inside braces of object literals or destructuring assignments.</source>
          <target state="translated">这条规则强制要求在对象字面或破坏性赋值的括号内进行一致的换行。</target>
        </trans-unit>
        <trans-unit id="dc1f9f7d14d39f611230db49960fece58ed587b8" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent line breaks inside parentheses of function parameters or arguments.</source>
          <target state="translated">这条规则在函数参数或参数的括号内强制执行一致的换行。</target>
        </trans-unit>
        <trans-unit id="cc3d5861ecc6d2c3252bac7222aab4bc2ecdea0d" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent line endings independent of operating system, VCS, or editor used across your codebase.</source>
          <target state="translated">这条规则强制执行一致的行尾,不受操作系统、VCS或整个代码库使用的编辑器的影响。</target>
        </trans-unit>
        <trans-unit id="3e6898a2307cfec7882640002567d17f03515ad3" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent position of line comments. Block comments are not affected by this rule. By default, this rule ignores comments starting with the following words: &lt;code&gt;eslint&lt;/code&gt;, &lt;code&gt;jshint&lt;/code&gt;, &lt;code&gt;jslint&lt;/code&gt;, &lt;code&gt;istanbul&lt;/code&gt;, &lt;code&gt;global&lt;/code&gt;, &lt;code&gt;exported&lt;/code&gt;, &lt;code&gt;jscs&lt;/code&gt;, &lt;code&gt;falls through&lt;/code&gt;.</source>
          <target state="translated">该规则强制行注释的位置一致。阻止注释不受此规则影响。默认情况下，此规则将忽略以以下单词开头的注释： &lt;code&gt;eslint&lt;/code&gt; ， &lt;code&gt;jshint&lt;/code&gt; ， &lt;code&gt;jslint&lt;/code&gt; ， &lt;code&gt;istanbul&lt;/code&gt; ， &lt;code&gt;global&lt;/code&gt; ， &lt;code&gt;exported&lt;/code&gt; ， &lt;code&gt;jscs&lt;/code&gt; ， &lt;code&gt;falls through&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aa1bfb395be1412e1e3fa7972879d7328ba00c44" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent spacing around keywords and keyword-like tokens: &lt;code&gt;as&lt;/code&gt; (in module declarations), &lt;code&gt;async&lt;/code&gt; (of async functions), &lt;code&gt;await&lt;/code&gt; (of await expressions), &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;case&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;debugger&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;export&lt;/code&gt;, &lt;code&gt;extends&lt;/code&gt;, &lt;code&gt;finally&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;from&lt;/code&gt; (in module declarations), &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt; (of getters), &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;instanceof&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;of&lt;/code&gt; (in for-of statements), &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt; (of setters), &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;super&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;typeof&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;void&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;, and &lt;code&gt;yield&lt;/code&gt;. This rule is designed carefully not to conflict with other spacing rules: it does not apply to spacing where other rules report problems.</source>
          <target state="translated">该规则在关键字和类似关键字的标记周围强制保持一致的间距： &lt;code&gt;as&lt;/code&gt; （在模块声明中）， &lt;code&gt;async&lt;/code&gt; （在异步函数中）， &lt;code&gt;await&lt;/code&gt; （在await表达式中）， &lt;code&gt;break&lt;/code&gt; ， &lt;code&gt;case&lt;/code&gt; ， &lt;code&gt;catch&lt;/code&gt; ， &lt;code&gt;class&lt;/code&gt; ， &lt;code&gt;const&lt;/code&gt; ， &lt;code&gt;continue&lt;/code&gt; ， &lt;code&gt;debugger&lt;/code&gt; ， &lt;code&gt;default&lt;/code&gt; ， &lt;code&gt;delete&lt;/code&gt; ， &lt;code&gt;do&lt;/code&gt; ， &lt;code&gt;else&lt;/code&gt; ， &lt;code&gt;export&lt;/code&gt; ， &lt;code&gt;extends&lt;/code&gt; ， &lt;code&gt;finally&lt;/code&gt; ， &lt;code&gt;for&lt;/code&gt; ， &lt;code&gt;from&lt;/code&gt; （模块声明）， &lt;code&gt;function&lt;/code&gt; ， &lt;code&gt;get&lt;/code&gt; （getters）， &lt;code&gt;if&lt;/code&gt; ， &lt;code&gt;import&lt;/code&gt; ， &lt;code&gt;in&lt;/code&gt; ， &lt;code&gt;instanceof&lt;/code&gt; ， &lt;code&gt;let&lt;/code&gt; ， &lt;code&gt;new&lt;/code&gt; ， &lt;code&gt;of&lt;/code&gt; （在for-of语句中）， &lt;code&gt;return&lt;/code&gt; ， &lt;code&gt;set&lt;/code&gt; （of setters）， &lt;code&gt;static&lt;/code&gt; ， &lt;code&gt;super&lt;/code&gt; ， &lt;code&gt;switch&lt;/code&gt; ， &lt;code&gt;this&lt;/code&gt; ， &lt;code&gt;throw&lt;/code&gt; ， &lt;code&gt;try&lt;/code&gt; ， &lt;code&gt;typeof&lt;/code&gt; ， &lt;code&gt;var&lt;/code&gt; ， &lt;code&gt;void&lt;/code&gt; ， &lt;code&gt;while&lt;/code&gt; ， &lt;code&gt;with&lt;/code&gt; 和 &lt;code&gt;yield&lt;/code&gt; 。该规则经过精心设计，不会与其他间距规则冲突：它不适用于其他规则报告问题的间距。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
