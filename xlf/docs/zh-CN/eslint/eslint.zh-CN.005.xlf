<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="eslint">
    <body>
      <group id="eslint">
        <trans-unit id="14eabcc20ca1ae6d595dd0146dacc275446c2785" translate="yes" xml:space="preserve">
          <source>Note that operator &lt;code&gt;+&lt;/code&gt; in &lt;code&gt;allow&lt;/code&gt; list would allow &lt;code&gt;+foo&lt;/code&gt; (number coercion) as well as &lt;code&gt;&quot;&quot; + foo&lt;/code&gt; (string coercion).</source>
          <target state="translated">请注意，在 &lt;code&gt;allow&lt;/code&gt; 列表中的运算符 &lt;code&gt;+&lt;/code&gt; 将允许 &lt;code&gt;+foo&lt;/code&gt; （数字强制）以及 &lt;code&gt;&quot;&quot; + foo&lt;/code&gt; （字符串强制）。</target>
        </trans-unit>
        <trans-unit id="a2ea103023fbbea878ee580810efa43b1ce5e514" translate="yes" xml:space="preserve">
          <source>Note that simply checking &lt;code&gt;foo.hasOwnProperty(key)&lt;/code&gt; is likely to cause an error in some cases; see &lt;a href=&quot;no-prototype-builtins&quot;&gt;no-prototype-builtins&lt;/a&gt;.</source>
          <target state="translated">注意，在某些情况下，仅检查 &lt;code&gt;foo.hasOwnProperty(key)&lt;/code&gt; 可能会导致错误。参见&lt;a href=&quot;no-prototype-builtins&quot;&gt;no-prototype-builtins&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="da8f31abf81fd1530a65a1c89cbaf28a84d87fe4" translate="yes" xml:space="preserve">
          <source>Note that the following words are always ignored by this rule: &lt;code&gt;[&quot;jscs&quot;, &quot;jshint&quot;, &quot;eslint&quot;, &quot;istanbul&quot;, &quot;global&quot;, &quot;globals&quot;, &quot;exported&quot;]&lt;/code&gt;.</source>
          <target state="translated">请注意，此规则始终忽略以下单词： &lt;code&gt;[&quot;jscs&quot;, &quot;jshint&quot;, &quot;eslint&quot;, &quot;istanbul&quot;, &quot;global&quot;, &quot;globals&quot;, &quot;exported&quot;]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="92871ffd4aceb2bd3a9e8edec06e56e2e05d821f" translate="yes" xml:space="preserve">
          <source>Note that the last &lt;code&gt;case&lt;/code&gt; statement in these examples does not cause a warning because there is nothing to fall through into.</source>
          <target state="translated">请注意，这些示例中的最后一个 &lt;code&gt;case&lt;/code&gt; 语句不会引起警告，因为没有任何可陷入的内容。</target>
        </trans-unit>
        <trans-unit id="9fe60f0778016b7de275c5c3433b4ff7fcd68bdb" translate="yes" xml:space="preserve">
          <source>Note that the patterns considered problems are &lt;strong&gt;not&lt;/strong&gt; flagged by the &lt;a href=&quot;semi&quot;&gt;semi&lt;/a&gt; rule.</source>
          <target state="translated">请注意，&lt;a href=&quot;semi&quot;&gt;半问题&lt;/a&gt;规则&lt;strong&gt;不会&lt;/strong&gt;标记被视为问题的模式。</target>
        </trans-unit>
        <trans-unit id="649f078207c83d3aa9f8117c4caa24a177fa6e14" translate="yes" xml:space="preserve">
          <source>Note that this also affects the &lt;a href=&quot;../developer-guide/nodejs-api#cliengineexecuteonfiles&quot;&gt;&lt;code&gt;CLIEngine.executeOnFiles()&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="translated">请注意，这也会影响&lt;a href=&quot;../developer-guide/nodejs-api#cliengineexecuteonfiles&quot;&gt; &lt;code&gt;CLIEngine.executeOnFiles()&lt;/code&gt; &lt;/a&gt; API。</target>
        </trans-unit>
        <trans-unit id="4e1fc0ebbd12c442e0e5e74e0e029ef6f09efa61" translate="yes" xml:space="preserve">
          <source>Note that this also enables parsing for other features from ES2018, such as &lt;a href=&quot;https://github.com/tc39/proposal-async-iteration&quot;&gt;async iteration&lt;/a&gt;. When using ESLint v5 with the default parser, it is no longer possible to toggle syntax support for object rest/spread independently of other features.</source>
          <target state="translated">请注意，这还可以解析ES2018中的其他功能，例如&lt;a href=&quot;https://github.com/tc39/proposal-async-iteration&quot;&gt;异步迭代&lt;/a&gt;。将ESLint v5与默认解析器一起使用时，将不再可能独立于其他功能而切换对对象保留/扩展的语法支持。</target>
        </trans-unit>
        <trans-unit id="82d62f793b20020481672da21ac064b568a683e5" translate="yes" xml:space="preserve">
          <source>Note that this rule does not disallow assignments to read-only global variables. See &lt;a href=&quot;no-global-assign&quot;&gt;no-global-assign&lt;/a&gt; if you also want to disallow those assignments.</source>
          <target state="translated">请注意，此规则不会禁止分配只读全局变量。如果您还想禁止这些分配，请参见&lt;a href=&quot;no-global-assign&quot;&gt;no-global-assign&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a5a9767c41439a621031ba6529109fef573ecf23" translate="yes" xml:space="preserve">
          <source>Note that this rule does not enforce the usage of single-line statements in general. If you would like to disallow single-line statements, use the &lt;a href=&quot;curly&quot;&gt;&lt;code&gt;curly&lt;/code&gt;&lt;/a&gt; rule instead.</source>
          <target state="translated">请注意，此规则通常不会强制使用单行语句。如果要禁止单行语句，请改用&lt;a href=&quot;curly&quot;&gt; &lt;code&gt;curly&lt;/code&gt; &lt;/a&gt;规则。</target>
        </trans-unit>
        <trans-unit id="d826b4d17235a608a3c9cd20c92fa11e3d5d2e94" translate="yes" xml:space="preserve">
          <source>Note that this rule only enforces spacing within parentheses; it does not check spacing within curly or square brackets, but will enforce or disallow spacing of those brackets if and only if they are adjacent to an opening or closing parenthesis.</source>
          <target state="translated">请注意,这条规则只执行小括号内的间距;它不检查大括号或方括号内的间距,但会执行或不允许这些括号的间距,如果且仅当它们与开头或结尾小括号相邻。</target>
        </trans-unit>
        <trans-unit id="347d91e7a5b838e6bcb85cf66bf52f2d967e3ca1" translate="yes" xml:space="preserve">
          <source>Note that when using the &lt;code&gt;node&lt;/code&gt; or &lt;code&gt;commonjs&lt;/code&gt; environments (or &lt;code&gt;ecmaFeatures.globalReturn&lt;/code&gt;, if using the default parser), the top scope of a program is not actually the global scope, but rather a &quot;module&quot; scope. When this is the case, declaring a variable named after a builtin global is not a redeclaration, but rather a shadowing of the global variable. In that case, the &lt;a href=&quot;no-shadow&quot;&gt;&lt;code&gt;no-shadow&lt;/code&gt;&lt;/a&gt; rule with the &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; option should be used.</source>
          <target state="translated">请注意，在使用 &lt;code&gt;node&lt;/code&gt; 或 &lt;code&gt;commonjs&lt;/code&gt; 环境（或 &lt;code&gt;ecmaFeatures.globalReturn&lt;/code&gt; ，如果使用默认解析器）时，程序的顶级范围实际上不是全局范围，而是&amp;ldquo;模块&amp;rdquo;范围。在这种情况下，声明以内置全局变量命名的变量不是重新声明，而是全局变量的影子。在这种情况下，应使用带有 &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; 选项的&lt;a href=&quot;no-shadow&quot;&gt; &lt;code&gt;no-shadow&lt;/code&gt; &lt;/a&gt;规则。</target>
        </trans-unit>
        <trans-unit id="1125aced35499b31bb41c702c9945c7bd12e9b07" translate="yes" xml:space="preserve">
          <source>Note that you can leave off the &lt;code&gt;.js&lt;/code&gt; from the filename. In this way, you can add as many additional configs to your package as you'd like.</source>
          <target state="translated">请注意，您可以从文件名中 &lt;code&gt;.js&lt;/code&gt; 。这样，您可以根据需要向包中添加尽可能多的其他配置。</target>
        </trans-unit>
        <trans-unit id="76aa0f033fd5d1d41d32bcaf6fd648d73e33b956" translate="yes" xml:space="preserve">
          <source>Note that, as with core rules and plugin rules, you still need to enable the rules in configuration or via the &lt;code&gt;--rule&lt;/code&gt; CLI option in order to actually run those rules during linting. Specifying a rules directory with &lt;code&gt;--rulesdir&lt;/code&gt; does not automatically enable the rules within that directory.</source>
          <target state="translated">请注意，与核心规则和插件规则一样，您仍然需要在配置中或通过 &lt;code&gt;--rule&lt;/code&gt; CLI选项启用规则，以便在插入期间实际运行这些规则。使用 &lt;code&gt;--rulesdir&lt;/code&gt; 指定规则目录不会自动启用该目录中的规则。</target>
        </trans-unit>
        <trans-unit id="e9b6296c44a9bc30cef358e801b33c46b39d24f5" translate="yes" xml:space="preserve">
          <source>Note the use of a semicolon as the final part of this statement. There should be a space before and after the &lt;code&gt;while&lt;/code&gt; keyword.</source>
          <target state="translated">注意，使用分号作为该语句的最后部分。 &lt;code&gt;while&lt;/code&gt; 关键字前后应有一个空格。</target>
        </trans-unit>
        <trans-unit id="cc6c88398cdded8def6acc02b6ff7133a562ee36" translate="yes" xml:space="preserve">
          <source>Note when using a custom parser, the &lt;code&gt;parserOptions&lt;/code&gt; configuration property is still required for ESLint to work properly with features not in ECMAScript 5 by default. Parsers are all passed &lt;code&gt;parserOptions&lt;/code&gt; and may or may not use them to determine which features to enable.</source>
          <target state="translated">请注意，使用自定义解析器时，默认情况下，ESLint仍需要 &lt;code&gt;parserOptions&lt;/code&gt; 配置属性才能使ESLint正常使用ECMAScript 5中未包含的功能。解析器都是通过 &lt;code&gt;parserOptions&lt;/code&gt; 传递的，可能会或可能不会使用它们来确定要启用的功能。</target>
        </trans-unit>
        <trans-unit id="50c39afa03191645dbc4d28c7d2359af7e538e42" translate="yes" xml:space="preserve">
          <source>Note: Currently &lt;code&gt;CLIEngine&lt;/code&gt; does not validate options passed to it, but may start doing so in the future.</source>
          <target state="translated">注意：当前， &lt;code&gt;CLIEngine&lt;/code&gt; 不会验证传递给它的选项，但是将来可能会开始这样做。</target>
        </trans-unit>
        <trans-unit id="984b1133cbe92feba750f10ab3475f0c23c1b51a" translate="yes" xml:space="preserve">
          <source>Note: For a rule preventing deletion of variables, see &lt;a href=&quot;no-delete-var&quot;&gt;no-delete-var instead&lt;/a&gt;</source>
          <target state="translated">注意：有关防止删除变量的规则，请参阅&lt;a href=&quot;no-delete-var&quot;&gt;no-delete-var。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d25aa0b7adae8f5ed33576b5806bc8d4bbf49549" translate="yes" xml:space="preserve">
          <source>Note: Formatting for Terminals</source>
          <target state="translated">注:端子的格式化</target>
        </trans-unit>
        <trans-unit id="be22f31f5831c296a952cd7a2998bc8d390f968e" translate="yes" xml:space="preserve">
          <source>Note: Suggestions will be applied as a stand-alone change, without triggering multipass fixes. Each suggestion should focus on a singular change in the code and should not try to conform to user defined styles. For example, if a suggestion is adding a new statement into the codebase, it should not try to match correct indentation, or confirm to user preferences on presence/absence of semicolons. All of those things can be corrected by multipass autofix when the user triggers it.</source>
          <target state="translated">注意:建议将作为一个独立的变化来应用,而不会触发多通道修复。每个建议都应该集中在代码中的一个单一的变化上,而不应该试图符合用户定义的风格。例如,如果一个建议是在代码库中添加一个新的语句,它不应该试图匹配正确的缩进,或确认用户对分号的存在/不存在的偏好。所有这些事情都可以在用户触发时通过multipass自动修复来纠正。</target>
        </trans-unit>
        <trans-unit id="094162498ea0d1d13c56050f15e2107cd8551770" translate="yes" xml:space="preserve">
          <source>Note: Suggestions will be applied as a stand-alone change, without triggering multipass fixes. Each suggestion should focus on a singular change in the code and should not try to conform to user defined styles. For example, if a suggestion is adding a new statement into the codebase, it should not try to match correct indentation, or confirm to user preferences on presence/absence of semicolumns. All of those things can be corrected by multipass autofix when the user triggers it.</source>
          <target state="translated">注意:建议将作为一个独立的变化来应用,而不会触发多通道修复。每个建议都应该集中在代码中的一个单一的变化上,而不应该试图符合用户定义的风格。例如,如果一个建议是在代码库中添加一个新的语句,它不应该试图匹配正确的缩进,或确认用户对分栏的存在/不存在的偏好。所有这些事情都可以在用户触发时通过multipass自动修复来纠正。</target>
        </trans-unit>
        <trans-unit id="7a96d12cefbf530755a3476759379971f31c30b2" translate="yes" xml:space="preserve">
          <source>Note: This API is deprecated as of 4.0.0.</source>
          <target state="translated">注意:这个API从4.0.0开始就被废弃了。</target>
        </trans-unit>
        <trans-unit id="0f4d27cca8900b2f84cb2149ba7b39507829e56c" translate="yes" xml:space="preserve">
          <source>Note: this rule ignores async generator functions. This is because generators yield rather than return a value and async generators might yield all the values of another async generator without ever actually needing to use await.</source>
          <target state="translated">注意:这条规则忽略了异步生成器函数。这是因为生成器产生而不是返回一个值,而异步生成器可能会产生另一个异步生成器的所有值,而实际上并不需要使用 await。</target>
        </trans-unit>
        <trans-unit id="24de5bcbd5c3607fa22b1b0d298fae9fdf45a3ea" translate="yes" xml:space="preserve">
          <source>Now here are ES6 equivalents:</source>
          <target state="translated">现在这里有ES6的等价物。</target>
        </trans-unit>
        <trans-unit id="87fe1cc3d574f9be3c85d698f90d866c75ac44a8" translate="yes" xml:space="preserve">
          <source>Now inside your &lt;code&gt;/lib/ci/backend.js&lt;/code&gt;</source>
          <target state="translated">现在在您的 &lt;code&gt;/lib/ci/backend.js&lt;/code&gt; 中</target>
        </trans-unit>
        <trans-unit id="35e2195ff597916ba2ef234cdbb68bdf57b69342" translate="yes" xml:space="preserve">
          <source>Now inside your package you have &lt;code&gt;/lib/defaults.js&lt;/code&gt;, which contains:</source>
          <target state="translated">现在，您的包中有 &lt;code&gt;/lib/defaults.js&lt;/code&gt; ，其中包含：</target>
        </trans-unit>
        <trans-unit id="4137e109ac15d620738ab61f944d78dc01861a63" translate="yes" xml:space="preserve">
          <source>Now it is very clear that three spaces are expected to be matched.</source>
          <target state="translated">现在很清楚,三个空间有望匹配。</target>
        </trans-unit>
        <trans-unit id="5bca21c074e0d721a5fd90d89b255318c8ce0216" translate="yes" xml:space="preserve">
          <source>Now when you run &lt;code&gt;eslint&lt;/code&gt;, it will be running your local copy and showing your changes.</source>
          <target state="translated">现在，当您运行 &lt;code&gt;eslint&lt;/code&gt; 时，它将运行您的本地副本并显示您的更改。</target>
        </trans-unit>
        <trans-unit id="57c585f4798ef4591adf413472a8e4f97e198bfd" translate="yes" xml:space="preserve">
          <source>Now you're ready to send the pull request. Go to your ESLint fork and then follow the &lt;a href=&quot;https://help.github.com/articles/creating-a-pull-request&quot;&gt;GitHub documentation&lt;/a&gt; on how to send a pull request.</source>
          <target state="translated">现在您可以发送拉取请求了。转到您的ESLint分支，然后遵循&lt;a href=&quot;https://help.github.com/articles/creating-a-pull-request&quot;&gt;GitHub文档中&lt;/a&gt;有关如何发送拉取请求的信息。</target>
        </trans-unit>
        <trans-unit id="20482a66574043c6f07e88950af557ca9ba4cb34" translate="yes" xml:space="preserve">
          <source>Now, consider the following group configuration: &lt;code&gt;{&quot;groups&quot;: [[&quot;&amp;amp;&quot;, &quot;|&quot;, &quot;^&quot;, &quot;~&quot;, &quot;&amp;lt;&amp;lt;&quot;, &quot;&amp;gt;&amp;gt;&quot;, &quot;&amp;gt;&amp;gt;&amp;gt;&quot;], [&quot;&amp;amp;&amp;amp;&quot;, &quot;||&quot;]]}&lt;/code&gt;. There are 2 groups specified in this configuration: bitwise operators and logical operators. This rule checks if the operators belong to the same group only. In this case, this rule checks if bitwise operators and logical operators are mixed, but ignores all other operators.</source>
          <target state="translated">现在，考虑以下组配置： &lt;code&gt;{&quot;groups&quot;: [[&quot;&amp;amp;&quot;, &quot;|&quot;, &quot;^&quot;, &quot;~&quot;, &quot;&amp;lt;&amp;lt;&quot;, &quot;&amp;gt;&amp;gt;&quot;, &quot;&amp;gt;&amp;gt;&amp;gt;&quot;], [&quot;&amp;amp;&amp;amp;&quot;, &quot;||&quot;]]}&lt;/code&gt; 。在此配置中指定了2个组：按位运算符和逻辑运算符。此规则检查操作员是否仅属于同一组。在这种情况下，此规则将检查按位运算符和逻辑运算符是否混合，但会忽略所有其他运算符。</target>
        </trans-unit>
        <trans-unit id="b4992572eba9e898e29cdb06f84784a8f96e8a75" translate="yes" xml:space="preserve">
          <source>Now, the remote &lt;code&gt;upstream&lt;/code&gt; points to the upstream source.</source>
          <target state="translated">现在，远程 &lt;code&gt;upstream&lt;/code&gt; 指向上游源。</target>
        </trans-unit>
        <trans-unit id="8dad4f5a3bcf9c3bffdb2bf8a3903f51188938d6" translate="yes" xml:space="preserve">
          <source>Now, those variables and references have correct values in these properties.</source>
          <target state="translated">现在,这些变量和引用在这些属性中具有正确的值。</target>
        </trans-unit>
        <trans-unit id="b69cceaa39cc9827d135c31a0a311643f64c4242" translate="yes" xml:space="preserve">
          <source>Numbers should be written as decimal integers, e-notation integers, hexadecimal integers or floating-point decimals with at least one digit before and one digit after the decimal point. Never use octal literals.</source>
          <target state="translated">数字应写成十进制整数、电子记数法整数、十六进制整数或浮点小数,小数点前和小数点后至少有一位数。切勿使用八进制字头。</target>
        </trans-unit>
        <trans-unit id="afb8e044bcdc5720b645f5bad798ce2422b144b7" translate="yes" xml:space="preserve">
          <source>Object Getters</source>
          <target state="translated">对象获取器</target>
        </trans-unit>
        <trans-unit id="bff5a67a67ce40c0fd925410f2eb22f8e622ed24" translate="yes" xml:space="preserve">
          <source>Object Literals</source>
          <target state="translated">对象文字</target>
        </trans-unit>
        <trans-unit id="8c039bd2c30b64d60bbf9c614cffee3af09daea6" translate="yes" xml:space="preserve">
          <source>Object Rest/Spread Properties for ECMAScript</source>
          <target state="translated">ECMAScript的对象静止/展开属性</target>
        </trans-unit>
        <trans-unit id="5b78ac9af4a56a7e0611f75dde6336ad4efc93cf" translate="yes" xml:space="preserve">
          <source>Object Setters</source>
          <target state="translated">对象设置器</target>
        </trans-unit>
        <trans-unit id="4671b195767e872ed26e93314009bf9a02b4925b" translate="yes" xml:space="preserve">
          <source>Object initializer - MDN</source>
          <target state="translated">对象初始化器-MDN</target>
        </trans-unit>
        <trans-unit id="ffa631f7811b9675c18511c35ebd3c5888d3c693" translate="yes" xml:space="preserve">
          <source>Object literal property names can be defined in two ways: using literals or using strings. For example, these two objects are equivalent:</source>
          <target state="translated">对象的文字属性名可以用两种方式定义:使用文字或使用字符串。例如,这两个对象是等价的。</target>
        </trans-unit>
        <trans-unit id="01a531c72bfc336c6dd4074ad4379fdce5371193" translate="yes" xml:space="preserve">
          <source>Object literals should have the following format:</source>
          <target state="translated">对象字元应具有以下格式:</target>
        </trans-unit>
        <trans-unit id="593c1a9b247ae9203d0656b7697e245c92cca212" translate="yes" xml:space="preserve">
          <source>Object literals.</source>
          <target state="translated">对象字面。</target>
        </trans-unit>
        <trans-unit id="d0906ffdbaac63ebcdad566357ec1fa32b660ce9" translate="yes" xml:space="preserve">
          <source>Object option (when &lt;code&gt;&quot;always&quot;&lt;/code&gt;):</source>
          <target state="translated">对象选项（ &lt;code&gt;&quot;always&quot;&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="ac9c86f6b8a7b6cb8ef56a7d1efe7d9ef0bb7e18" translate="yes" xml:space="preserve">
          <source>Object option (when &lt;code&gt;&quot;never&quot;&lt;/code&gt;):</source>
          <target state="translated">对象选项（ &lt;code&gt;&quot;never&quot;&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="f8eb5265b464019bacbbf51d8d1ff30364921024" translate="yes" xml:space="preserve">
          <source>Object option:</source>
          <target state="translated">对象选项:</target>
        </trans-unit>
        <trans-unit id="149ecb5e6d435ef3f0c0b95567c172606e31d857" translate="yes" xml:space="preserve">
          <source>Object properties follow the same naming conventions as variables. Object methods follow the same naming conventions as functions. If a property or method is meant to be private, then it should be prefixed with an underscore character.</source>
          <target state="translated">对象属性遵循与变量相同的命名约定。对象方法遵循与函数相同的命名约定。如果一个属性或方法是私有的,那么它应该在前面加一个下划线字符。</target>
        </trans-unit>
        <trans-unit id="07cc26cad16fa208535abacfadeea81f2c8f08d7" translate="yes" xml:space="preserve">
          <source>Object properties for variants of the &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; option:</source>
          <target state="translated">&lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; 选项的变体的对象属性：</target>
        </trans-unit>
        <trans-unit id="c4dfaa986b5d14c627c83c972171a7941c5b7be6" translate="yes" xml:space="preserve">
          <source>Object rest/spread is now an official part of the JavaScript language, so our support for it is no longer experimental. In both ESLint v4 and ESLint v5, object rest/spread can now be enabled with the &lt;code&gt;&quot;ecmaVersion&quot;: 2018&lt;/code&gt; option:</source>
          <target state="translated">对象休息/传播现在是JavaScript语言的正式组成部分，因此我们对其的支持不再是实验性的。在ESLint v4和ESLint v5中，现在都可以使用 &lt;code&gt;&quot;ecmaVersion&quot;: 2018&lt;/code&gt; 选项启用对象休息/传播：</target>
        </trans-unit>
        <trans-unit id="11a92c8196539fdab3857b1551dea0f331c775a8" translate="yes" xml:space="preserve">
          <source>Object.getPrototypeOf</source>
          <target state="translated">Object.getPrototypeOf</target>
        </trans-unit>
        <trans-unit id="fa8ae9f7df131e038e636e584d189c8515f58a8c" translate="yes" xml:space="preserve">
          <source>ObjectExpression</source>
          <target state="translated">ObjectExpression</target>
        </trans-unit>
        <trans-unit id="793061db282a75e8ed5dcc678e2f977602f536e5" translate="yes" xml:space="preserve">
          <source>ObjectExpression and ObjectPattern</source>
          <target state="translated">ObjectExpression和ObjectPattern</target>
        </trans-unit>
        <trans-unit id="72a83add2c5ede877c10d23f302d3e17accbadab" translate="yes" xml:space="preserve">
          <source>Objects</source>
          <target state="translated">Objects</target>
        </trans-unit>
        <trans-unit id="79c19740aba487d5c36feef2d71ebeab770748e7" translate="yes" xml:space="preserve">
          <source>Occasionally, a core ESLint rule needs to be changed. This is not necessarily a bug, but rather, an enhancement that makes a rule more configurable. In those situations, we will consider making changes to rules.</source>
          <target state="translated">偶尔,ESLint的核心规则需要改变。这不一定是一个错误,而是一种增强,使规则更可配置。在这些情况下,我们会考虑对规则进行修改。</target>
        </trans-unit>
        <trans-unit id="503c1e8b34ff2b306e45ab8d949857759bce53e9" translate="yes" xml:space="preserve">
          <source>Octal literals are numerals that begin with a leading zero, such as:</source>
          <target state="translated">八进制是指以0开头的数字,如:。</target>
        </trans-unit>
        <trans-unit id="5270a8f48af0485d13759bcff94f40182ae7fbe6" translate="yes" xml:space="preserve">
          <source>Of course, you could also have a style guide that disallows spaces around keywords.</source>
          <target state="translated">当然,你也可以有一个样式指南,不允许关键词周围有空格。</target>
        </trans-unit>
        <trans-unit id="1125ca598816239bf6b761a79b64ee161ec9a9d7" translate="yes" xml:space="preserve">
          <source>Of course, you could also have a style guide that disallows spaces before keywords.</source>
          <target state="translated">当然,你也可以有一个样式指南,不允许关键词前有空格。</target>
        </trans-unit>
        <trans-unit id="c141537fefa1f7236bb95371a0c1823cf3d5a82a" translate="yes" xml:space="preserve">
          <source>Of particular note is that like &lt;code&gt;.gitignore&lt;/code&gt; files, all paths used as patterns for both &lt;code&gt;.eslintignore&lt;/code&gt; and &lt;code&gt;--ignore-pattern&lt;/code&gt; must use forward slashes as their path separators.</source>
          <target state="translated">特别要注意的是，像 &lt;code&gt;.gitignore&lt;/code&gt; 文件一样，用作 &lt;code&gt;.eslintignore&lt;/code&gt; 和 &lt;code&gt;--ignore-pattern&lt;/code&gt; 的模式的所有路径都必须使用正斜杠作为路径分隔符。</target>
        </trans-unit>
        <trans-unit id="051c540be9962a7623f661578a805c175aaad210" translate="yes" xml:space="preserve">
          <source>On a separate line, describing the code beneath it.</source>
          <target state="translated">另起一行,描述下面的代码。</target>
        </trans-unit>
        <trans-unit id="41a98baf04faa90e085c1d5b39d3f2303b09a371" translate="yes" xml:space="preserve">
          <source>On multiple lines, to comment out sections of code.</source>
          <target state="translated">在多行的情况下,要对代码的部分进行注释。</target>
        </trans-unit>
        <trans-unit id="dd6bc408351897c37ede1ee1ad09032dd8381b52" translate="yes" xml:space="preserve">
          <source>On the first line, the JavaScript engine will automatically insert a semicolon, so this is not considered a syntax error. The JavaScript engine still knows how to interpret the line and knows that the line end indicates the end of the statement.</source>
          <target state="translated">在第一行,JavaScript引擎会自动插入一个分号,所以这不算是语法错误。JavaScript引擎仍然知道如何解释这一行,并且知道行尾表示语句的结束。</target>
        </trans-unit>
        <trans-unit id="be62b8888255b7d5db97a2146275b0a473a3cd7f" translate="yes" xml:space="preserve">
          <source>On the other hand, if the code is targeting only ES5-compliant environments passing the radix &lt;code&gt;10&lt;/code&gt; may be redundant. In such a case you might want to disallow using such a radix.</source>
          <target state="translated">另一方面，如果代码仅针对通过基数 &lt;code&gt;10&lt;/code&gt; 的 ES5兼容环境，则可能是多余的。在这种情况下，您可能要禁止使用这样的基数。</target>
        </trans-unit>
        <trans-unit id="54325008781cc6962735603ca0f94ac6486bda16" translate="yes" xml:space="preserve">
          <source>On the other side of the argument are those who say that since semicolons are inserted automatically, they are optional and do not need to be inserted manually. However, the ASI mechanism can also be tricky to people who don't use semicolons. For example, consider this code:</source>
          <target state="translated">另一方面,有人说,既然分号是自动插入的,那么分号是可选的,不需要手动插入。然而,对于不使用分号的人来说,ASI机制也会很棘手。例如,考虑一下这段代码。</target>
        </trans-unit>
        <trans-unit id="96134602d9113347d1bc859098545b8dd3e69676" translate="yes" xml:space="preserve">
          <source>Once again, the intent here is to show that the developer intended for there to be no default behavior.</source>
          <target state="translated">再次,这里的用意是表明开发者有意不设置默认行为。</target>
        </trans-unit>
        <trans-unit id="c1de3fc4cbdd3e50999095504fb8e328eb84c3d2" translate="yes" xml:space="preserve">
          <source>Once npm is installed, run the following</source>
          <target state="translated">安装好npm后,运行以下命令</target>
        </trans-unit>
        <trans-unit id="c04fc496076254cace10e1520cd55bfc500cbbe1" translate="yes" xml:space="preserve">
          <source>Once the AST is available, &lt;code&gt;estraverse&lt;/code&gt; is used to traverse the AST from top to bottom. At each node, the &lt;code&gt;Linter&lt;/code&gt; object emits an event that has the same name as the node type (i.e., &quot;Identifier&quot;, &quot;WithStatement&quot;, etc.). On the way back up the subtree, an event is emitted with the AST type name and suffixed with &quot;:exit&quot;, such as &quot;Identifier:exit&quot; - this allows rules to take action both on the way down and on the way up in the traversal. Each event is emitted with the appropriate AST node available.</source>
          <target state="translated">AST可用后，将使用 &lt;code&gt;estraverse&lt;/code&gt; 从上到下遍历AST。在每个节点上， &lt;code&gt;Linter&lt;/code&gt; 对象都会发出一个与节点类型具有相同名称的事件（即&amp;ldquo;标识符&amp;rdquo;，&amp;ldquo; WithStatement&amp;rdquo;等）。在备份子树的过程中，会发出一个带有AST类型名称的事件，并带有&amp;ldquo;：exit&amp;rdquo;后缀，例如&amp;ldquo; Identifier：exit&amp;rdquo;-这允许规则在上下移动时采取措施。遍历。发出每个事件并带有相应的可用AST节点。</target>
        </trans-unit>
        <trans-unit id="64e40e04906a03b72ac5f6ed6329c5032886299c" translate="yes" xml:space="preserve">
          <source>Once you get a report object, it's up to you to determine how to output the results. Fixes will not be automatically applied to the files, even if you set &lt;code&gt;fix: true&lt;/code&gt; when constructing the &lt;code&gt;CLIEngine&lt;/code&gt; instance. To apply fixes to the files, call &lt;a href=&quot;#cliengineoutputfixes&quot;&gt;&lt;code&gt;outputFixes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">获得报告对象后，由您决定如何输出结果。即使在构建 &lt;code&gt;CLIEngine&lt;/code&gt; 实例时将 &lt;code&gt;fix: true&lt;/code&gt; 设置，修订也不会自动应用于文件。要将修订应用于文件，请调用&lt;a href=&quot;#cliengineoutputfixes&quot;&gt; &lt;code&gt;outputFixes&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b58e4b61287e965d92e76370ea203cbb83aba778" translate="yes" xml:space="preserve">
          <source>Once you have a local copy and have Node.JS and npm installed, you'll need to install the ESLint dependencies:</source>
          <target state="translated">一旦你有一个本地副本,并安装了Node.JS和npm,你就需要安装ESLint的依赖关系。</target>
        </trans-unit>
        <trans-unit id="e7288581c9fd0f9fb86a36a0098329661fafddf0" translate="yes" xml:space="preserve">
          <source>Once you have an instance of &lt;code&gt;SourceCode&lt;/code&gt;, you can use the methods on it to work with the code:</source>
          <target state="translated">一旦有了 &lt;code&gt;SourceCode&lt;/code&gt; 的实例，就可以使用其上的方法来处理代码：</target>
        </trans-unit>
        <trans-unit id="c35dc0ae3fcf2f907c56b8a61b2d1c1013797195" translate="yes" xml:space="preserve">
          <source>Once you have the configuration information, you can pass it into the &lt;code&gt;linter&lt;/code&gt; object:</source>
          <target state="translated">获得配置信息后，可以将其传递给 &lt;code&gt;linter&lt;/code&gt; 对象：</target>
        </trans-unit>
        <trans-unit id="b5819a1bbc0e4af2eebf7583e7e5176671549350" translate="yes" xml:space="preserve">
          <source>Once you have your development environment installed, you can make and submit changes to the ESLint source files. Doing this successfully requires careful adherence to our &lt;a href=&quot;contributing/pull-requests&quot;&gt;pull-request submission workflow&lt;/a&gt;.</source>
          <target state="translated">一旦安装了开发环境，就可以对ESLint源文件进行更改并将其提交。成功做到这一点需要认真遵守我们&lt;a href=&quot;contributing/pull-requests&quot;&gt;的请求请求提交工作流程&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="df1fc06bd4ba0916a355e415a08d9ac385fc744f" translate="yes" xml:space="preserve">
          <source>Once you've cloned the repository, run &lt;code&gt;npm install&lt;/code&gt; to get all the necessary dependencies:</source>
          <target state="translated">克隆存储库后，请运行 &lt;code&gt;npm install&lt;/code&gt; 获取所有必需的依赖项：</target>
        </trans-unit>
        <trans-unit id="a952bd0499233ed62352245dbdd816bb714cb93a" translate="yes" xml:space="preserve">
          <source>Once you've got ESLint running, you'll probably want to adjust the configuration to better suit your project. This section explains all the different ways you can configure ESLint.</source>
          <target state="translated">一旦您运行了 ESLint,您可能需要调整配置以更好地适应您的项目。这一节将解释您可以配置 ESLint 的所有不同方式。</target>
        </trans-unit>
        <trans-unit id="80320c8df4e958c73560fc248b42aa546a052559" translate="yes" xml:space="preserve">
          <source>Once you've made changes that you want to share with the community, the next step is to submit those changes back via a pull request.</source>
          <target state="translated">一旦你做出了想要与社区分享的改动,下一步就是通过拉取请求提交这些改动。</target>
        </trans-unit>
        <trans-unit id="73e73f412681c6b3c636b32c5dd0a954ee56c9f0" translate="yes" xml:space="preserve">
          <source>Once your pull request is sent, it's time for the team to review it. As such, please make sure to:</source>
          <target state="translated">一旦你的拉取请求被发送,就到了团队审核的时候了。因此,请务必。</target>
        </trans-unit>
        <trans-unit id="461bb8bc5f902440c44a097ed81d4ff591b9129d" translate="yes" xml:space="preserve">
          <source>Once your shareable config is ready, you can &lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;publish to npm&lt;/a&gt; to share with others. We recommend using the &lt;code&gt;eslint&lt;/code&gt; and &lt;code&gt;eslintconfig&lt;/code&gt; keywords so others can easily find your module.</source>
          <target state="translated">准备好可共享的配置后，您可以&lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;发布到npm&lt;/a&gt;与他人共享。我们建议使用 &lt;code&gt;eslint&lt;/code&gt; 和 &lt;code&gt;eslintconfig&lt;/code&gt; 关键字，以便其他人可以轻松找到您的模块。</target>
        </trans-unit>
        <trans-unit id="968cb18b99b4f357f4169659789d6d35558a5b6b" translate="yes" xml:space="preserve">
          <source>One blank line should always be used in the following circumstances:</source>
          <target state="translated">在下列情况下应始终使用一个空行:</target>
        </trans-unit>
        <trans-unit id="6e05f3f48106cca4c55183384c239e9f6781eecf" translate="yes" xml:space="preserve">
          <source>One common variant of one true brace style is called Stroustrup, in which the &lt;code&gt;else&lt;/code&gt; statements in an &lt;code&gt;if-else&lt;/code&gt; construct, as well as &lt;code&gt;catch&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt;, must be on its own line after the preceding closing brace. For example:</source>
          <target state="translated">一种真正的花括号样式的常见变体称为Stroustrup，其中 &lt;code&gt;if-else&lt;/code&gt; 构造中的 &lt;code&gt;else&lt;/code&gt; 语句以及 &lt;code&gt;catch&lt;/code&gt; 和 &lt;code&gt;finally&lt;/code&gt; 必须在前一个结束花括号之后单独行。例如：</target>
        </trans-unit>
        <trans-unit id="074902a0b6265654f7818885f2c699f282da2808" translate="yes" xml:space="preserve">
          <source>One key is &lt;code&gt;VariableDeclarator&lt;/code&gt; and the other is &lt;code&gt;AssignmentExpression&lt;/code&gt;, which can be used to control the destructuring requirement for each of those types independently. Each property accepts an object that accepts two properties, &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;, which can be used to control the destructuring requirement for each of &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt; independently for variable declarations and assignment expressions. By default, &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt; are set to true for both &lt;code&gt;VariableDeclarator&lt;/code&gt; and &lt;code&gt;AssignmentExpression&lt;/code&gt;.</source>
          <target state="translated">一个键是 &lt;code&gt;VariableDeclarator&lt;/code&gt; ，另一个键是 &lt;code&gt;AssignmentExpression&lt;/code&gt; ，可用于独立控制每种类型的销毁需求。每个属性都接受一个对象，该对象接受两个属性 &lt;code&gt;array&lt;/code&gt; 和 &lt;code&gt;object&lt;/code&gt; ，可以使用它们来独立控制变量声明和赋值表达式对 &lt;code&gt;array&lt;/code&gt; 和 &lt;code&gt;object&lt;/code&gt; 的每个结构的分解要求。默认情况下， &lt;code&gt;VariableDeclarator&lt;/code&gt; 和 &lt;code&gt;AssignmentExpression&lt;/code&gt; 的 &lt;code&gt;array&lt;/code&gt; 和 &lt;code&gt;object&lt;/code&gt; 都设置为true 。</target>
        </trans-unit>
        <trans-unit id="7b40cc8090e56f00ece04fc448cb76c1a5545421" translate="yes" xml:space="preserve">
          <source>One of benefits of this option is that it prevents the incorrect use of arrow functions in conditionals:</source>
          <target state="translated">这个选项的一个好处是,它可以防止在条件中错误地使用箭头函数。</target>
        </trans-unit>
        <trans-unit id="91d4f19646312c60afdd6cb23f93395bc802b054" translate="yes" xml:space="preserve">
          <source>One of the benefits of this option is that it prevents the incorrect use of arrow functions in conditionals:</source>
          <target state="translated">这个选项的一个好处是,它可以防止在条件中错误地使用箭头函数。</target>
        </trans-unit>
        <trans-unit id="93a084e0710ce98d42a3b6895d5f4238168d8a76" translate="yes" xml:space="preserve">
          <source>One of the great things about open source projects is that anyone can contribute in any number of meaningful ways. ESLint couldn't exist without the help of the many contributors it's had since the project began, and we want you to feel like you can contribute and make a difference as well.</source>
          <target state="translated">开源项目的一大好处是,任何人都可以以任何有意义的方式做出贡献。自项目开始以来,如果没有众多贡献者的帮助,ESLint是不可能存在的,我们希望你能感觉到你也可以做出贡献,并有所作为。</target>
        </trans-unit>
        <trans-unit id="8fe321b030cabb7b6a56d2b3c7ba46379fd8d541" translate="yes" xml:space="preserve">
          <source>One of the interesting, and sometimes confusing, aspects of JavaScript is that assignment can happen at almost any point. Because of this, an errant equals sign can end up causing assignment when the true intent was to do a comparison. This is especially true when using a &lt;code&gt;return&lt;/code&gt; statement. For example:</source>
          <target state="translated">JavaScript有趣的，有时是令人困惑的方面之一是赋值几乎可以在任何时候发生。因此，当真正的意图是进行比较时，错误的等号可能最终导致分配。使用 &lt;code&gt;return&lt;/code&gt; 语句时尤其如此。例如：</target>
        </trans-unit>
        <trans-unit id="dc2c724cf22353a00eb4d8e0b5ec68baf78eb5ec" translate="yes" xml:space="preserve">
          <source>One of the justifications for using Comma First style is that it can help track missing and trailing commas. These are problematic because missing commas in variable declarations can lead to the leakage of global variables and trailing commas can lead to errors in older versions of IE.</source>
          <target state="translated">使用Comma First样式的一个理由是它可以帮助跟踪丢失的逗号和尾部的逗号。这些都是有问题的,因为在变量声明中缺失逗号会导致全局变量的泄漏,而尾部的逗号会在旧版本的IE中导致错误。</target>
        </trans-unit>
        <trans-unit id="43739dc5f4290e33b069d3cbfc858a0190a0b218" translate="yes" xml:space="preserve">
          <source>One way to fix this issue would be to ensure that &lt;code&gt;totalLength&lt;/code&gt; is read at the same time as it's updated, like this:</source>
          <target state="translated">解决此问题的一种方法是，确保在更新 &lt;code&gt;totalLength&lt;/code&gt; 的同时读取它，如下所示：</target>
        </trans-unit>
        <trans-unit id="82d457ac979b2d749bfa1fff14b37ecb16e90d1f" translate="yes" xml:space="preserve">
          <source>Only &lt;code&gt;return&lt;/code&gt; without a value is allowed, as it's a control flow statement.</source>
          <target state="translated">只允许不带值的 &lt;code&gt;return&lt;/code&gt; ，因为它是控制流语句。</target>
        </trans-unit>
        <trans-unit id="865b1b6e5f709be37accdd161c63ae845508b783" translate="yes" xml:space="preserve">
          <source>Only make one fix per message. This is enforced because you must return the result of the fixer operation from &lt;code&gt;fix()&lt;/code&gt;.</source>
          <target state="translated">每条消息只能解决一个问题。强制执行此操作是因为您必须从 &lt;code&gt;fix()&lt;/code&gt; 返回修复程序操作的结果。</target>
        </trans-unit>
        <trans-unit id="651a50a7f66b3213d4ddbca3f4a04a538e94dae9" translate="yes" xml:space="preserve">
          <source>Only the &lt;code&gt;Property&lt;/code&gt; node type is ignored by default, because for the &lt;a href=&quot;key-spacing&quot;&gt;key-spacing&lt;/a&gt; rule some alignment options require multiple spaces in properties of object literals.</source>
          <target state="translated">默认情况下，仅忽略&amp;ldquo; &lt;code&gt;Property&lt;/code&gt; 节点类型，因为对于&lt;a href=&quot;key-spacing&quot;&gt;键间距&lt;/a&gt;规则，某些对齐选项在对象文字的属性中需要多个空格。</target>
        </trans-unit>
        <trans-unit id="29e0482fd1761fdd60ab2cbaa6f30278bf01c57e" translate="yes" xml:space="preserve">
          <source>Open up developer tools</source>
          <target state="translated">打开开发者工具</target>
        </trans-unit>
        <trans-unit id="528fa3274e8f2faac58c536989703b2a7691898b" translate="yes" xml:space="preserve">
          <source>Operator Spacing</source>
          <target state="translated">操作员间距</target>
        </trans-unit>
        <trans-unit id="f31ac1bc0518dff16e20d2bee973046b839b0d11" translate="yes" xml:space="preserve">
          <source>Operators with two operands must be preceded and followed by a single space to make the expression clear. Operators include assignments and logical operators.</source>
          <target state="translated">有两个操作数的操作符必须在前面和后面加一个空格,以使表达清晰。操作符包括赋值和逻辑操作符。</target>
        </trans-unit>
        <trans-unit id="5cf9f8318f166d81f0832974953640e35cb76c75" translate="yes" xml:space="preserve">
          <source>Opponents of Yoda conditions point out that tooling has made us better programmers because tools will catch the mistaken use of &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; (ESLint will catch this for you). Therefore, they argue, the utility of the pattern doesn't outweigh the readability hit the code takes while using Yoda conditions.</source>
          <target state="translated">Yoda条件的反对者指出，工具使我们成为了更好的程序员，因为工具会抓住 &lt;code&gt;=&lt;/code&gt; 而不是 &lt;code&gt;==&lt;/code&gt; 的错误用法（ESLint会帮您解决这个问题）。因此，他们认为，该模式的实用性不会超过代码在使用Yoda条件时的可读性。</target>
        </trans-unit>
        <trans-unit id="cc2f1a7f94147f105a8901b8c9bb3f24406fa1ff" translate="yes" xml:space="preserve">
          <source>Optional Exception</source>
          <target state="translated">可选例外</target>
        </trans-unit>
        <trans-unit id="a89a55547173e68a8fb3ba71bad23165f06ceb9e" translate="yes" xml:space="preserve">
          <source>Optional. If &lt;code&gt;true&lt;/code&gt; is present and the &lt;code&gt;options.filePath&lt;/code&gt; is a file ESLint should ignore, this method returns a lint result contains a warning message.</source>
          <target state="translated">可选的。如果存在 &lt;code&gt;true&lt;/code&gt; 且 &lt;code&gt;options.filePath&lt;/code&gt; 是ESLint应该忽略的文件，则此方法返回包含警告消息的lint结果。</target>
        </trans-unit>
        <trans-unit id="f8431df7be1c6293b85fd6c46fb7d73eae65d45c" translate="yes" xml:space="preserve">
          <source>Optional. The path to the file of the source code text. If omitted, the &lt;code&gt;result.filePath&lt;/code&gt; becomes the string &lt;code&gt;&quot;&amp;lt;text&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">可选的。源代码文本文件的路径。如果省略，则 &lt;code&gt;result.filePath&lt;/code&gt; 成为字符串 &lt;code&gt;&quot;&amp;lt;text&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f2085951383e2cdbc090c9683b06731c8ef7ac4" translate="yes" xml:space="preserve">
          <source>Optionally, this rule can also enforce consistent order (&lt;code&gt;getBeforeSet&lt;/code&gt; or &lt;code&gt;setBeforeGet&lt;/code&gt;).</source>
          <target state="translated">（可选）此规则还可以强制执行一致的顺序（ &lt;code&gt;getBeforeSet&lt;/code&gt; 或 &lt;code&gt;setBeforeGet&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3f583032cbdd550a2873302394f975358318e3c2" translate="yes" xml:space="preserve">
          <source>Optionally, you may specify a &lt;code&gt;max&lt;/code&gt; object property:</source>
          <target state="translated">（可选）您可以指定 &lt;code&gt;max&lt;/code&gt; object属性：</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="babf5970a0d99737bb086b6569f51b231437e499" translate="yes" xml:space="preserve">
          <source>Options Schemas</source>
          <target state="translated">期权方案</target>
        </trans-unit>
        <trans-unit id="125e188e5c535aba49305bcd42d96422853718e3" translate="yes" xml:space="preserve">
          <source>Options that accept array values can be specified by repeating the option or with a comma-delimited list (other than &lt;code&gt;--ignore-pattern&lt;/code&gt; which does not allow the second style).</source>
          <target state="translated">可以通过重复该选项或使用逗号分隔的列表（不使用 &lt;code&gt;--ignore-pattern&lt;/code&gt; 不允许使用第二种样式）来指定接受数组值的选项。</target>
        </trans-unit>
        <trans-unit id="cc6d4354c518051842952b8b24cff75c301ac9bd" translate="yes" xml:space="preserve">
          <source>Or an object option (Requires line breaks if any of properties is satisfied. Otherwise, disallows line breaks):</source>
          <target state="translated">或一个对象选项(如果满足任何属性,则要求换行,否则不允许换行):否则,不允许换行)。)</target>
        </trans-unit>
        <trans-unit id="48fb5dcfee6b391a00a0d645f582f3d72542e395" translate="yes" xml:space="preserve">
          <source>Or an object option:</source>
          <target state="translated">或者是一个对象选项。</target>
        </trans-unit>
        <trans-unit id="8e04bc60d27598107203a60a335ed572e88264d3" translate="yes" xml:space="preserve">
          <source>Or for non-iterable 'array-like' objects:</source>
          <target state="translated">或者对于不可读写的 &quot;数组类 &quot;对象。</target>
        </trans-unit>
        <trans-unit id="8b117f5f38fcd06ba55849762c28b3c6a4df0d38" translate="yes" xml:space="preserve">
          <source>Or for tabbed indentation:</source>
          <target state="translated">或用于制表缩进。</target>
        </trans-unit>
        <trans-unit id="534b36ed6d3baf1cd0fb88cab59bd33364f67414" translate="yes" xml:space="preserve">
          <source>Or in a &lt;code&gt;package.json&lt;/code&gt; file</source>
          <target state="translated">或在 &lt;code&gt;package.json&lt;/code&gt; 文件中</target>
        </trans-unit>
        <trans-unit id="983504f1db047b4a14f090593364eea27f5c86b0" translate="yes" xml:space="preserve">
          <source>Or you can enforce that calls to &lt;code&gt;setTimeout&lt;/code&gt; always have two arguments:</source>
          <target state="translated">或者，您可以强制执行对 &lt;code&gt;setTimeout&lt;/code&gt; 的调用始终具有两个参数：</target>
        </trans-unit>
        <trans-unit id="2349626c15ba88b850dda985180df347efff61da" translate="yes" xml:space="preserve">
          <source>Originally, &lt;code&gt;Variable&lt;/code&gt; objects and &lt;code&gt;Reference&lt;/code&gt; objects refer each other:</source>
          <target state="translated">最初， &lt;code&gt;Variable&lt;/code&gt; 对象和 &lt;code&gt;Reference&lt;/code&gt; 对象相互引用：</target>
        </trans-unit>
        <trans-unit id="0c7f2d70c0ac6c087885c2e18648286544190997" translate="yes" xml:space="preserve">
          <source>Other Integration Lists</source>
          <target state="translated">其他整合列表</target>
        </trans-unit>
        <trans-unit id="121423f7955be6f99034dbe35e9109d534d3bb31" translate="yes" xml:space="preserve">
          <source>Other code conventions allow you to skip the &lt;code&gt;default&lt;/code&gt; case so long as there is a comment indicating the omission is intentional, such as:</source>
          <target state="translated">其他代码约定允许您跳过 &lt;code&gt;default&lt;/code&gt; 情况，只要有注释表明有意省略即可，例如：</target>
        </trans-unit>
        <trans-unit id="c413664d095ba6eda32b2e5180bd3f63ad775b0e" translate="yes" xml:space="preserve">
          <source>Others prefer to declare one var per line.</source>
          <target state="translated">也有人喜欢每行声明一个var。</target>
        </trans-unit>
        <trans-unit id="777e3867f41cdcbbc95d8a27831735e4439631d1" translate="yes" xml:space="preserve">
          <source>Otherwise are considered problems.</source>
          <target state="translated">否则均视为问题。</target>
        </trans-unit>
        <trans-unit id="8f226c4b9fa003489fea8332ce25c85c4ade2f50" translate="yes" xml:space="preserve">
          <source>Otherwise the &lt;code&gt;&quot;safe&quot;&lt;/code&gt; option corresponds to the &lt;code&gt;&quot;function&quot;&lt;/code&gt; option. Note that if &lt;code&gt;&quot;globalReturn&quot;: false&lt;/code&gt; is explicitly specified in the configuration, the &lt;code&gt;&quot;safe&quot;&lt;/code&gt; option will correspond to the &lt;code&gt;&quot;function&quot;&lt;/code&gt; option regardless of the specified environment.</source>
          <target state="translated">否则， &lt;code&gt;&quot;safe&quot;&lt;/code&gt; 选项对应于 &lt;code&gt;&quot;function&quot;&lt;/code&gt; 选项。请注意，如果在配置中明确指定了 &lt;code&gt;&quot;globalReturn&quot;: false&lt;/code&gt; 则无论指定的环境如何， &lt;code&gt;&quot;safe&quot;&lt;/code&gt; 选项将与 &lt;code&gt;&quot;function&quot;&lt;/code&gt; 选项相对应。</target>
        </trans-unit>
        <trans-unit id="0b2741d82e791a60bad1a8621fcdbf97b20d60b3" translate="yes" xml:space="preserve">
          <source>Otherwise, &lt;code&gt;RuleTester#run&lt;/code&gt; will simply execute all of the tests in sequence, and will throw an error if one of them fails. This means you can simply execute a test file that calls &lt;code&gt;RuleTester.run&lt;/code&gt; using &lt;code&gt;node&lt;/code&gt;, without needing a testing framework.</source>
          <target state="translated">否则， &lt;code&gt;RuleTester#run&lt;/code&gt; 将仅按顺序执行所有测试，如果其中一个失败则将引发错误。这意味着您可以简单地使用 &lt;code&gt;node&lt;/code&gt; 执行一个调用 &lt;code&gt;RuleTester.run&lt;/code&gt; 的测试文件，而无需测试框架。</target>
        </trans-unit>
        <trans-unit id="da453deb49d685f98fdc9eee6730a3db89861b4f" translate="yes" xml:space="preserve">
          <source>Otherwise, if &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;it&lt;/code&gt; are present as globals, &lt;code&gt;RuleTester&lt;/code&gt; will use &lt;code&gt;global.describe&lt;/code&gt; and &lt;code&gt;global.it&lt;/code&gt; to run tests. This allows &lt;code&gt;RuleTester&lt;/code&gt; to work when using frameworks like &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; without any additional configuration.</source>
          <target state="translated">否则，如果 &lt;code&gt;describe&lt;/code&gt; 并且 &lt;code&gt;it&lt;/code&gt; 作为全局变量存在， &lt;code&gt;RuleTester&lt;/code&gt; 将使用 &lt;code&gt;global.describe&lt;/code&gt; 和 &lt;code&gt;global.it&lt;/code&gt; 来运行测试。这使 &lt;code&gt;RuleTester&lt;/code&gt; 在使用&lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha等&lt;/a&gt;框架时无需任何其他配置即可工作。</target>
        </trans-unit>
        <trans-unit id="f111dde36a2183fb8b31d84bb35478c7ad28ae40" translate="yes" xml:space="preserve">
          <source>Otherwise, if the node does not declare any variables, an empty array is returned.</source>
          <target state="translated">否则,如果该节点没有声明任何变量,将返回一个空数组。</target>
        </trans-unit>
        <trans-unit id="112f84fde1efd0a6b137f4ef4aeed3c549b08bd5" translate="yes" xml:space="preserve">
          <source>Our commit message format is as follows:</source>
          <target state="translated">我们的提交信息格式如下。</target>
        </trans-unit>
        <trans-unit id="874ef7e39663f7db82348ed922daa965002f8637" translate="yes" xml:space="preserve">
          <source>Our public &lt;a href=&quot;https://github.com/eslint/eslint/issues&quot;&gt;issues tracker&lt;/a&gt; lists all of the things we plan on doing as well as suggestions from the community. Before starting to work on an issue, be sure you read through the rest of this page.</source>
          <target state="translated">我们的公共&lt;a href=&quot;https://github.com/eslint/eslint/issues&quot;&gt;问题跟踪器&lt;/a&gt;列出了我们计划做的所有事情以及社区的建议。在开始处理问题之前，请确保您已通读本页面的其余部分。</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="50d578ebf4e00d8649eb4f95a59bf792edcd3b16" translate="yes" xml:space="preserve">
          <source>Output Examples</source>
          <target state="translated">输出示例</target>
        </trans-unit>
        <trans-unit id="f721699fc008a02ac10d406435648374991b8df2" translate="yes" xml:space="preserve">
          <source>Output object from this method:</source>
          <target state="translated">本方法的输出对象。</target>
        </trans-unit>
        <trans-unit id="2ae3c877f13160bf4fb915afd2aa35c94e464b88" translate="yes" xml:space="preserve">
          <source>Output to the console</source>
          <target state="translated">输出到控制台</target>
        </trans-unit>
        <trans-unit id="afb6b4b6cae2618f58f61a3533c0fccfc233090f" translate="yes" xml:space="preserve">
          <source>Outputting to the console</source>
          <target state="translated">输出到控制台</target>
        </trans-unit>
        <trans-unit id="afdf6e15c0ce33e13907329dd18f3fa61951053c" translate="yes" xml:space="preserve">
          <source>Outputting to the filesystem</source>
          <target state="translated">输出到文件系统</target>
        </trans-unit>
        <trans-unit id="744acdca9924738f6ba20a057659f4dab8956cfb" translate="yes" xml:space="preserve">
          <source>Over the past several releases, we have been deprecating rules and introducing new rules to take their place. The following is a list of the removed rules and their replacements:</source>
          <target state="translated">在过去的几个版本中,我们一直在废止规则,并引入新的规则来取代它们。以下是被删除的规则及其替代规则的清单。</target>
        </trans-unit>
        <trans-unit id="f15e25b67d56c0b50f6e65a89912cb8c44445c60" translate="yes" xml:space="preserve">
          <source>Overall Performance</source>
          <target state="translated">整体表现</target>
        </trans-unit>
        <trans-unit id="bed3eb091eb6a1e8a3c68cc9f2b8cad9f0ea7e35" translate="yes" xml:space="preserve">
          <source>Override blocks can also specify patterns to exclude from matches. If a file matches any of the excluded patterns, the configuration won't apply.</source>
          <target state="translated">覆盖块还可以指定要从匹配中排除的模式。如果一个文件匹配了任何被排除的模式,配置将不适用。</target>
        </trans-unit>
        <trans-unit id="d65d233ad72a12dd5f816f689346ed699f068f74" translate="yes" xml:space="preserve">
          <source>Overrides in a config file can now match dotfiles</source>
          <target state="translated">配置文件中的重写现在可以与dotfiles匹配了</target>
        </trans-unit>
        <trans-unit id="c7279b45cea6645bd003b55c34e4e0b68128806b" translate="yes" xml:space="preserve">
          <source>Overrides in an extended config file can now be overridden by a parent config file</source>
          <target state="translated">扩展配置文件中的重写现在可以被父级配置文件重写。</target>
        </trans-unit>
        <trans-unit id="84e380bd7906ce369799455bb337baa4a7e912c3" translate="yes" xml:space="preserve">
          <source>Packaging the Custom Formatter</source>
          <target state="translated">包装自定义格式器</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="0a0e056314281df7ebe5bff4801d78e2bcb2e0da" translate="yes" xml:space="preserve">
          <source>Parentheses Spacing</source>
          <target state="translated">小括号间距</target>
        </trans-unit>
        <trans-unit id="8b047ea57f8d4953d13e87c42cd0dfbacf8b9d4e" translate="yes" xml:space="preserve">
          <source>Passing Arguments to Formatters</source>
          <target state="translated">将参数传递给格式化器</target>
        </trans-unit>
        <trans-unit id="bbad3fbb9280e935e855b557b50f0feb18c726b1" translate="yes" xml:space="preserve">
          <source>Passing the callback by reference</source>
          <target state="translated">通过引用传递回调</target>
        </trans-unit>
        <trans-unit id="866764460d5b328ce01c5d25fea87d4f72c58d7e" translate="yes" xml:space="preserve">
          <source>Path to the cache file. If none specified &lt;code&gt;.eslintcache&lt;/code&gt; will be used. The file will be created in the directory where the &lt;code&gt;eslint&lt;/code&gt; command is executed. &lt;strong&gt;Deprecated&lt;/strong&gt;: Use &lt;code&gt;--cache-location&lt;/code&gt; instead.</source>
          <target state="translated">缓存文件的路径。如果未指定，则将使用 &lt;code&gt;.eslintcache&lt;/code&gt; 。该文件将在执行 &lt;code&gt;eslint&lt;/code&gt; 命令的目录中创建。&lt;strong&gt;不推荐使用&lt;/strong&gt;：改为使用 &lt;code&gt;--cache-location&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1a4f2472b12ffd8aaa283f1912f4a749bb112a9e" translate="yes" xml:space="preserve">
          <source>Path to the cache location. Can be a file or a directory. If no location is specified, &lt;code&gt;.eslintcache&lt;/code&gt; will be used. In that case, the file will be created in the directory where the &lt;code&gt;eslint&lt;/code&gt; command is executed.</source>
          <target state="translated">缓存位置的路径。可以是文件或目录。如果未指定位置，将使用 &lt;code&gt;.eslintcache&lt;/code&gt; 。在这种情况下，将在执行 &lt;code&gt;eslint&lt;/code&gt; 命令的目录中创建文件。</target>
        </trans-unit>
        <trans-unit id="9cf1a4ce359a6f23066671fb0ce9dcb0cf168d6e" translate="yes" xml:space="preserve">
          <source>Paths are relative to &lt;code&gt;.eslintignore&lt;/code&gt; location or the current working directory. This is also true of paths passed in via the &lt;code&gt;--ignore-pattern&lt;/code&gt;&lt;a href=&quot;command-line-interface#--ignore-pattern&quot;&gt;command&lt;/a&gt;.</source>
          <target state="translated">路径相对于 &lt;code&gt;.eslintignore&lt;/code&gt; 位置或当前工作目录。通过 &lt;code&gt;--ignore-pattern&lt;/code&gt; &lt;a href=&quot;command-line-interface#--ignore-pattern&quot;&gt;命令&lt;/a&gt;传递的路径也是如此。</target>
        </trans-unit>
        <trans-unit id="be2e483ed2197aec27cb04e7cf1f6436f2920c5c" translate="yes" xml:space="preserve">
          <source>Paths are relative to the current working directory. This is also true of paths passed in via the &lt;code&gt;--ignore-pattern&lt;/code&gt;&lt;a href=&quot;command-line-interface#--ignore-pattern&quot;&gt;command&lt;/a&gt;.</source>
          <target state="translated">路径是相对于当前工作目录的。通过 &lt;code&gt;--ignore-pattern&lt;/code&gt; &lt;a href=&quot;command-line-interface#--ignore-pattern&quot;&gt;命令&lt;/a&gt;传递的路径也是如此。</target>
        </trans-unit>
        <trans-unit id="0493aae6aa03f23cee93bbaad9b496620e893832" translate="yes" xml:space="preserve">
          <source>Peer Dependency</source>
          <target state="translated">同伴依赖性</target>
        </trans-unit>
        <trans-unit id="d4a170a4c994882082963476d79b1a77b04c7ae7" translate="yes" xml:space="preserve">
          <source>Per-rule Performance</source>
          <target state="translated">每条规则的性能</target>
        </trans-unit>
        <trans-unit id="ed363adcc6ae50f9e2d44c956c484ce493017156" translate="yes" xml:space="preserve">
          <source>Perform any asynchronous operations</source>
          <target state="translated">执行任何异步操作</target>
        </trans-unit>
        <trans-unit id="9b69332b09b8aef3669c8068b4744d1b0de90bdd" translate="yes" xml:space="preserve">
          <source>Performance Testing</source>
          <target state="translated">性能测试</target>
        </trans-unit>
        <trans-unit id="be4da6f0c7a2438c9087ddd0f224ce1c2084f2f0" translate="yes" xml:space="preserve">
          <source>Performing an operation on each element of an iterable is a common task. However, performing an &lt;code&gt;await&lt;/code&gt; as part of each operation is an indication that the program is not taking full advantage of the parallelization benefits of &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;.</source>
          <target state="translated">对Iterable的每个元素执行操作是一项常见任务。但是，将 &lt;code&gt;await&lt;/code&gt; 作为每个操作的一部分表示该程序没有充分利用 &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; 的并行化优势。</target>
        </trans-unit>
        <trans-unit id="95901ce3386d6d8922a77162d48436823c7874d9" translate="yes" xml:space="preserve">
          <source>Personal Configuration File (deprecated)</source>
          <target state="translated">个人配置文件(已废弃</target>
        </trans-unit>
        <trans-unit id="df4e75f6b932e3d5f6b66dcca11234789a64b98d" translate="yes" xml:space="preserve">
          <source>Piping Code Into ESLint</source>
          <target state="translated">将代码导入ESLint</target>
        </trans-unit>
        <trans-unit id="06f50881a755583b161af4399bd829f0111ebe4f" translate="yes" xml:space="preserve">
          <source>Place all of your runtime rules in the same directory (e.g., &lt;code&gt;eslint_rules&lt;/code&gt;).</source>
          <target state="translated">将所有运行时规则放在同一目录中（例如 &lt;code&gt;eslint_rules&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="31ccc366a57c10600d02a87ddb1627ad8fcf83e4" translate="yes" xml:space="preserve">
          <source>Place all of your runtime rules in the same directory (i.e., &lt;code&gt;eslint_rules&lt;/code&gt;).</source>
          <target state="translated">将所有运行时规则放在同一目录（即 &lt;code&gt;eslint_rules&lt;/code&gt; ）中。</target>
        </trans-unit>
        <trans-unit id="92009e0d6a0520471a107f4e981c2e736fb0840b" translate="yes" xml:space="preserve">
          <source>Placeholders in suggestion messages</source>
          <target state="translated">建议信息中的占位符</target>
        </trans-unit>
        <trans-unit id="e51396525bede24fbfd195365328421b2712f903" translate="yes" xml:space="preserve">
          <source>Please include as much detail as possible to help us properly address your issue. If we need to triage issues and constantly ask people for more detail, that's time taken away from actually fixing issues. Help us be as efficient as possible by including a lot of detail in your issues.</source>
          <target state="translated">请尽可能多地包含细节,以帮助我们妥善解决您的问题。如果我们需要对问题进行分流,并不断要求人们提供更多的细节,那就会占用实际解决问题的时间。通过在您的问题中包含大量的细节,帮助我们尽可能地提高效率。</target>
        </trans-unit>
        <trans-unit id="8fe040cc7654341f94ac91393bb05581350df1ab" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;&quot;always&quot;&lt;/code&gt; and &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; require function expressions and function declarations in &lt;code&gt;export default&lt;/code&gt; declarations to have a name.</source>
          <target state="translated">请注意， &lt;code&gt;&quot;always&quot;&lt;/code&gt; 和 &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; 要求 &lt;code&gt;export default&lt;/code&gt; 声明中的函数表达式和函数声明具有名称。</target>
        </trans-unit>
        <trans-unit id="58942fbcaefe941982699b63620879d5c168e499" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;data&lt;/code&gt; in a test case does not assert &lt;code&gt;data&lt;/code&gt; passed to &lt;code&gt;context.report&lt;/code&gt;. Instead, it is used to form the expected message text which is then compared with the received &lt;code&gt;message&lt;/code&gt;.</source>
          <target state="translated">请注意， &lt;code&gt;data&lt;/code&gt; 在测试情况下不会断言 &lt;code&gt;data&lt;/code&gt; 传递给 &lt;code&gt;context.report&lt;/code&gt; 。相反，它用于形成预期的消息文本，然后将其与接收到的 &lt;code&gt;message&lt;/code&gt; 进行比较。</target>
        </trans-unit>
        <trans-unit id="a2dd72b1131b99a3809611bb27561465f891b142" translate="yes" xml:space="preserve">
          <source>Please note that most editors show an additional empty line at the end if the file ends with a line break. This rule does not count that extra line.</source>
          <target state="translated">请注意,如果文件以换行符结束,大多数编辑器会在最后显示一个额外的空行。这条规则不计算额外的行。</target>
        </trans-unit>
        <trans-unit id="cd6cb4e45c0a145bc991dcd0e8f4ab88f39165d4" translate="yes" xml:space="preserve">
          <source>Please note that supporting JSX syntax is not the same as supporting React. React applies specific semantics to JSX syntax that ESLint doesn't recognize. We recommend using &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;eslint-plugin-react&lt;/a&gt; if you are using React and want React semantics. By the same token, supporting ES6 syntax is not the same as supporting new ES6 globals (e.g., new types such as &lt;code&gt;Set&lt;/code&gt;). For ES6 syntax, use &lt;code&gt;{ &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 6 } }&lt;/code&gt;; for new ES6 global variables, use &lt;code&gt;{ &quot;env&quot;: { &quot;es6&quot;: true } }&lt;/code&gt;. &lt;code&gt;{ &quot;env&quot;: { &quot;es6&quot;: true } }&lt;/code&gt; enables ES6 syntax automatically, but &lt;code&gt;{ &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 6 } }&lt;/code&gt; does not enable ES6 globals automatically. Parser options are set in your &lt;code&gt;.eslintrc.*&lt;/code&gt; file by using the &lt;code&gt;parserOptions&lt;/code&gt; property. The available options are:</source>
          <target state="translated">请注意，支持JSX语法与支持React并不相同。 React将特定的语义应用于ESLint无法识别的JSX语法。如果您使用React并需要React语义，我们建议使用&lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;eslint-plugin-react&lt;/a&gt;。同样，支持ES6语法与支持新的ES6全局变量（例如，诸如 &lt;code&gt;Set&lt;/code&gt; 之类的新类型）并不相同。对于ES6语法，请使用 &lt;code&gt;{ &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 6 } }&lt;/code&gt; ;对于新的ES6全局变量，请使用 &lt;code&gt;{ &quot;env&quot;: { &quot;es6&quot;: true } }&lt;/code&gt; 。 &lt;code&gt;{ &quot;env&quot;: { &quot;es6&quot;: true } }&lt;/code&gt; 自动启用ES6语法，但是 &lt;code&gt;{ &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 6 } }&lt;/code&gt; 不会自动启用ES6全局变量。解析器选项在您的 &lt;code&gt;.eslintrc.*&lt;/code&gt; 使用 &lt;code&gt;parserOptions&lt;/code&gt; 属性的文件。可用的选项有：</target>
        </trans-unit>
        <trans-unit id="caa1e575508ae90c0c1f3ba9cbc5f1d6c3021954" translate="yes" xml:space="preserve">
          <source>Please note that the following methods have been deprecated and will be removed in a future version of ESLint:</source>
          <target state="translated">请注意,以下方法已被废弃,并将在未来的ESLint版本中被删除。</target>
        </trans-unit>
        <trans-unit id="32dcca51ba22590cfb1a0282165e0b20b80790ba" translate="yes" xml:space="preserve">
          <source>Please note that this option applies only to identifiers inside destructuring patterns. It doesn't additionally allow any particular use of the created variables later in the code apart from the use that is already allowed by default or by other options.</source>
          <target state="translated">请注意,这个选项只适用于分解模式中的标识符。除了默认或其他选项已经允许的使用外,它并不额外允许在以后的代码中对创建的变量进行任何特定的使用。</target>
        </trans-unit>
        <trans-unit id="2d2fdf1d62a3776fdec8b729a28be6e793bf8d2a" translate="yes" xml:space="preserve">
          <source>Please note that this rule does not compare conditions from the chain with conditions inside statements, and will not warn in the cases such as follows:</source>
          <target state="translated">请注意,这条规则不会将链中的条件与语句内的条件进行比较,在以下情况下也不会发出警告。</target>
        </trans-unit>
        <trans-unit id="970fbd12b618363bade0db3e52057a632da36216" translate="yes" xml:space="preserve">
          <source>Please note that when passing a glob as a parameter, it will be expanded by your shell. The results of the expansion can vary depending on your shell, and its configuration. If you want to use node &lt;code&gt;glob&lt;/code&gt; syntax, you have to quote your parameter (using double quotes if you need it to run in Windows), as follows:</source>
          <target state="translated">请注意，将glob作为参数传递时，它将由您的shell扩展。扩展的结果可能会因您的外壳及其配置而异。如果要使用节点 &lt;code&gt;glob&lt;/code&gt; 语法，则必须用引号引起来（如果需要在Windows中运行，请使用双引号）：</target>
        </trans-unit>
        <trans-unit id="7e110a34a2db33270f753e46f8b7ab8a3821147b" translate="yes" xml:space="preserve">
          <source>Please note that you can either use the top-level options or the grouped options (&lt;code&gt;singleLine&lt;/code&gt; and &lt;code&gt;multiLine&lt;/code&gt;) but not both.</source>
          <target state="translated">请注意，您可以使用顶层选项或分组选项（ &lt;code&gt;singleLine&lt;/code&gt; 和 &lt;code&gt;multiLine&lt;/code&gt; ），但不能同时使用。</target>
        </trans-unit>
        <trans-unit id="a115fb1f05052d949674b5ad9f4dd54cca5e205b" translate="yes" xml:space="preserve">
          <source>Please note that you have to provide &lt;code&gt;data&lt;/code&gt; on the suggestion's object. Suggestion messages cannot use properties from the overall error's &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="translated">请注意，您必须提供 &lt;code&gt;data&lt;/code&gt; 的建议的对象。建议消息不能使用整体错误 &lt;code&gt;data&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="8131e2054fa3d6ce5d0136ddb8d6ac107226cb3a" translate="yes" xml:space="preserve">
          <source>Please read the user guide's section on &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;configuring parser options&lt;/a&gt; to learn more.</source>
          <target state="translated">请阅读用户指南中有关&lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;配置解析器选项&lt;/a&gt;的部分，以了解更多信息。</target>
        </trans-unit>
        <trans-unit id="4e9e14b73e813f94faf81a7bf4b8e790aeed433c" translate="yes" xml:space="preserve">
          <source>Please see &lt;code&gt;.gitignore&lt;/code&gt;'s specification for further examples of valid syntax.</source>
          <target state="translated">有关有效语法的更多示例，请参见 &lt;code&gt;.gitignore&lt;/code&gt; 的规范。</target>
        </trans-unit>
        <trans-unit id="910be8bbebe15605e3211e93adb45fe019aed843" translate="yes" xml:space="preserve">
          <source>Please see the &lt;a href=&quot;https://github.com/eslint/generator-eslint&quot;&gt;generator documentation&lt;/a&gt; for instructions on how to use it.</source>
          <target state="translated">请参阅&lt;a href=&quot;https://github.com/eslint/generator-eslint&quot;&gt;生成器文档&lt;/a&gt;以获取有关如何使用它的说明。</target>
        </trans-unit>
        <trans-unit id="2c576146a981b5faae12b330f7bab5f655d4de92" translate="yes" xml:space="preserve">
          <source>Plugin authors may need to update installation instructions</source>
          <target state="translated">插件作者可能需要更新安装说明</target>
        </trans-unit>
        <trans-unit id="e3b560171bc6f34e81c89e0ab2f15568841517f3" translate="yes" xml:space="preserve">
          <source>Plugin environments can define the following objects:</source>
          <target state="translated">插件环境可以定义以下对象。</target>
        </trans-unit>
        <trans-unit id="0fbbbaf384cbc0ee72d4f8c606fcf5d504bca04e" translate="yes" xml:space="preserve">
          <source>Plugins No Longer Have Default Configurations</source>
          <target state="translated">插件不再有默认配置。</target>
        </trans-unit>
        <trans-unit id="7b2f2b7399c496bf73ff7e69192e8907b6ce6f81" translate="yes" xml:space="preserve">
          <source>Plugins and shareable configs are no longer affected by ESLint's location</source>
          <target state="translated">插件和可共享配置不再受ESLint的位置影响。</target>
        </trans-unit>
        <trans-unit id="6b2a2fcf74ee4cecce3ba1b5cd83e800b49e72b4" translate="yes" xml:space="preserve">
          <source>Plugins are resolved relative to the config file. In other words, ESLint will load the plugin as a user would obtain by running &lt;code&gt;require('eslint-plugin-pluginname')&lt;/code&gt; in the config file.</source>
          <target state="translated">相对于配置文件解析插件。换句话说，ESLint将加载插件，就像用户通过在配置文件中运行 &lt;code&gt;require('eslint-plugin-pluginname')&lt;/code&gt; 获取插件一样。</target>
        </trans-unit>
        <trans-unit id="ee9003d71c823216744370af56f21413e11f9752" translate="yes" xml:space="preserve">
          <source>Plugins can expose additional environments for use in ESLint. To do so, the plugin must export an &lt;code&gt;environments&lt;/code&gt; object. The keys of the &lt;code&gt;environments&lt;/code&gt; object are the names of the different environments provided and the values are the environment settings. For example:</source>
          <target state="translated">插件可以公开用于ESLint的其他环境。为此，插件必须导出一个 &lt;code&gt;environments&lt;/code&gt; 对象。 &lt;code&gt;environments&lt;/code&gt; 对象的键是提供的不同环境的名称，值是环境设置。例如：</target>
        </trans-unit>
        <trans-unit id="dec281e97d018cacc13382cfc427e305389a0405" translate="yes" xml:space="preserve">
          <source>Plugins can expose additional rules for use in ESLint. To do so, the plugin must export a &lt;code&gt;rules&lt;/code&gt; object containing a key-value mapping of rule ID to rule. The rule ID does not have to follow any naming convention (so it can just be &lt;code&gt;dollar-sign&lt;/code&gt;, for instance).</source>
          <target state="translated">插件可以公开在ESLint中使用的其他规则。为此，插件必须导出包含规则ID到规则的键-值映射的 &lt;code&gt;rules&lt;/code&gt; 对象。规则ID不必遵循任何命名约定（例如，它可以只是 &lt;code&gt;dollar-sign&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b69b69c3f7bf908cf04b17050967f012181e0472" translate="yes" xml:space="preserve">
          <source>Plugins in scoped packages are now resolvable in configs</source>
          <target state="translated">在scoped包中的插件现在可以在configs中解析。</target>
        </trans-unit>
        <trans-unit id="06ed5affa3a994c517d473c69ea0a4badefd02a1" translate="yes" xml:space="preserve">
          <source>Plugins in the base configuration (loaded by &lt;code&gt;extends&lt;/code&gt; setting) are relative to the derived config file. For example, if &lt;code&gt;./.eslintrc&lt;/code&gt; has &lt;code&gt;extends: [&quot;foo&quot;]&lt;/code&gt; and the &lt;code&gt;eslint-config-foo&lt;/code&gt; has &lt;code&gt;plugins: [&quot;bar&quot;]&lt;/code&gt;, ESLint finds the &lt;code&gt;eslint-plugin-bar&lt;/code&gt; from &lt;code&gt;./node_modules/&lt;/code&gt; (rather than &lt;code&gt;./node_modules/eslint-config-foo/node_modules/&lt;/code&gt;) or ancestor directories. Thus every plugin in the config file and base configurations is resolved uniquely.</source>
          <target state="translated">基本配置中的插件（通过 &lt;code&gt;extends&lt;/code&gt; 设置加载）相对于派生的配置文件。例如，如果 &lt;code&gt;./.eslintrc&lt;/code&gt; 已 &lt;code&gt;extends: [&quot;foo&quot;]&lt;/code&gt; ，而 &lt;code&gt;eslint-config-foo&lt;/code&gt; 具有 &lt;code&gt;plugins: [&quot;bar&quot;]&lt;/code&gt; ，则ESLint从 &lt;code&gt;./node_modules/&lt;/code&gt; （而不是 &lt;code&gt;./node_modules/eslint-config-foo/node_modules/&lt;/code&gt; 找到 &lt;code&gt;eslint-plugin-bar&lt;/code&gt; 。node_modules / eslint-config-foo / node_modules /）或祖先目录。因此，配置文件和基本配置中的每个插件都会得到唯一解析。</target>
        </trans-unit>
        <trans-unit id="f9ec5b88d6b7fe33abdb0cd312d875b7aee0a01e" translate="yes" xml:space="preserve">
          <source>Plugins may provide processors. Processors can extract JavaScript code from another kind of files, then lets ESLint lint the JavaScript code. Or processors can convert JavaScript code in preprocessing for some purpose.</source>
          <target state="translated">插件可以提供处理器。处理器可以从其他类型的文件中提取JavaScript代码,然后让ESLint对JavaScript代码进行精简。或者处理器可以为了某种目的在预处理中转换JavaScript代码。</target>
        </trans-unit>
        <trans-unit id="04de60818b1275febaa49d420056bd8ab7e76e8e" translate="yes" xml:space="preserve">
          <source>Polyjuice works with JSON configuration files, so if you're using a JavaScript or YAML JSCS configuration file, you should first convert it into a JSON configuration file.</source>
          <target state="translated">Polyjuice可以使用JSON配置文件,所以如果你使用的是JavaScript或YAML的JSCS配置文件,你应该先把它转换成JSON配置文件。</target>
        </trans-unit>
        <trans-unit id="4db8807336771db69984fb33e2ecb89b2b778d76" translate="yes" xml:space="preserve">
          <source>Possible Errors</source>
          <target state="translated">可能的错误</target>
        </trans-unit>
        <trans-unit id="51e379f50f0321cddf83015a5392ece47d742feb" translate="yes" xml:space="preserve">
          <source>Prefer destructuring from arrays and objects (prefer-destructuring)</source>
          <target state="translated">更喜欢从数组和对象中进行破坏性处理(prefer-destructuring)。</target>
        </trans-unit>
        <trans-unit id="c228b3216b65c6046a15d3f0b6ae1deea05d3ecb" translate="yes" xml:space="preserve">
          <source>Prefer use of an object spread over &lt;code&gt;Object.assign&lt;/code&gt; (prefer-object-spread)</source>
          <target state="translated">优先使用对象分布在 &lt;code&gt;Object.assign&lt;/code&gt; 上（优先对象分布）</target>
        </trans-unit>
        <trans-unit id="ad7e776a42690874c6d781cece37cffe753da846" translate="yes" xml:space="preserve">
          <source>Prerequisites: &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; (&lt;code&gt;^10.12.0&lt;/code&gt;, or &lt;code&gt;&amp;gt;=12.0.0&lt;/code&gt;) built with SSL support. (If you are using an official Node.js distribution, SSL is always built in.)</source>
          <target state="translated">先决条件：使用SSL支持构建的&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt;（ &lt;code&gt;^10.12.0&lt;/code&gt; 或 &lt;code&gt;&amp;gt;=12.0.0&lt;/code&gt; ）。（如果您使用的是官方的Node.js发行版，则始终内置SSL。）</target>
        </trans-unit>
        <trans-unit id="82062f1465f3be0589e9c94efa76e989985103e4" translate="yes" xml:space="preserve">
          <source>Prerequisites: &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; (&lt;code&gt;^8.10.0&lt;/code&gt;, &lt;code&gt;^10.13.0&lt;/code&gt;, or &lt;code&gt;&amp;gt;=11.10.1&lt;/code&gt;) built with SSL support. (If you are using an official Node.js distribution, SSL is always built in.)</source>
          <target state="translated">前提条件：使用SSL支持构建的&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt;（ &lt;code&gt;^8.10.0&lt;/code&gt; ， &lt;code&gt;^10.13.0&lt;/code&gt; 或 &lt;code&gt;&amp;gt;=11.10.1&lt;/code&gt; ）。（如果您使用的是官方的Node.js发行版，则始终内置SSL。）</target>
        </trans-unit>
        <trans-unit id="2a14e1b8f5938872ffc8263a306ac7453d0b08cd" translate="yes" xml:space="preserve">
          <source>Previous versions of ESLint silently ignored any nonexistent files and globs provided on the command line:</source>
          <target state="translated">以前的ESLint版本默默地忽略了命令行上提供的任何不存在的文件和globs。</target>
        </trans-unit>
        <trans-unit id="861eb458285d7d2f2e5428c183895fe75d599908" translate="yes" xml:space="preserve">
          <source>Previously, &lt;code&gt;RuleTester&lt;/code&gt; used loose equality when making some of its assertions. For example, if a rule produced the string &lt;code&gt;&quot;7&quot;&lt;/code&gt; as a result of autofixing, &lt;code&gt;RuleTester&lt;/code&gt; would allow the number &lt;code&gt;7&lt;/code&gt; in an &lt;code&gt;output&lt;/code&gt; assertion, rather than the string &lt;code&gt;&quot;7&quot;&lt;/code&gt;. In ESLint v5, comparisons from &lt;code&gt;RuleTester&lt;/code&gt; use strict equality, so an assertion like this will no longer pass.</source>
          <target state="translated">以前， &lt;code&gt;RuleTester&lt;/code&gt; 在进行某些断言时使用宽松的相等性。例如，如果规则是由于自动 &lt;code&gt;RuleTester&lt;/code&gt; 而产生的字符串 &lt;code&gt;&quot;7&quot;&lt;/code&gt; ，则RuleTester会在 &lt;code&gt;output&lt;/code&gt; 断言中允许数字 &lt;code&gt;7&lt;/code&gt; 而不是字符串 &lt;code&gt;&quot;7&quot;&lt;/code&gt; 。在ESLint v5中，来自 &lt;code&gt;RuleTester&lt;/code&gt; 的比较使用严格的相等性，因此这样的断言将不再通过。</target>
        </trans-unit>
        <trans-unit id="3f50639030ce290e0b2d963a0feb9b72be44a4b6" translate="yes" xml:space="preserve">
          <source>Previously, ESLint loaded plugins relative to the location of the ESLint package itself. As a result, we suggested that users with global ESLint installations should also install plugins globally, and users with local ESLint installations should install plugins locally. However, due to a design bug, this strategy caused ESLint to randomly fail to load plugins and shareable configs under certain circumstances, particularly when using package management tools like &lt;a href=&quot;https://github.com/lerna/lerna&quot;&gt;&lt;code&gt;lerna&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://yarnpkg.com/lang/en/docs/pnp/&quot;&gt;Yarn Plug n' Play&lt;/a&gt;.</source>
          <target state="translated">以前，ESLint加载相对于ESLint包本身位置的插件。因此，我们建议具有全局ESLint安装的用户也应该在全局安装插件，而具有本地ESLint安装的用户也应该在本地安装插件。但是，由于设计错误，此策略导致ESLint在某些情况下随机无法加载插件和可共享的配置，尤其是在使用&lt;a href=&quot;https://github.com/lerna/lerna&quot;&gt; &lt;code&gt;lerna&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://yarnpkg.com/lang/en/docs/pnp/&quot;&gt;Yarn Plug &lt;/a&gt;n'Play之类的软件包管理工具时。</target>
        </trans-unit>
        <trans-unit id="e5a31efe99bb4ae0265c26c456f8708e8b3abad7" translate="yes" xml:space="preserve">
          <source>Previously, ESLint would add an &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; property to &lt;code&gt;Variable&lt;/code&gt; objects in scope analysis to indicate that a variable was introduced as a result of a &lt;code&gt;/* global */&lt;/code&gt; comment. This property was undocumented, and the ESLint team was unable to find any usage of the property outside of ESLint core. The property has been removed in ESLint v6, and replaced with the &lt;code&gt;eslintExplicitGlobalComments&lt;/code&gt; property, which can contain a list of all &lt;code&gt;/* global */&lt;/code&gt; comments if a variable was declared with more than one of them.</source>
          <target state="translated">以前，ESLint会在范围分析中向 &lt;code&gt;Variable&lt;/code&gt; 对象添加 &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; 属性，以指示由于 &lt;code&gt;/* global */&lt;/code&gt; 注释而引入了变量。该属性未记录，并且ESLint团队无法在ESLint核心之外找到该属性的任何用法。该属性已在ESLint v6中删除，并替换为 &lt;code&gt;eslintExplicitGlobalComments&lt;/code&gt; 属性，如果声明了一个以上变量，则该属性可以包含所有 &lt;code&gt;/* global */&lt;/code&gt; 注释的列表。</target>
        </trans-unit>
        <trans-unit id="a1d351994dd8ff11b19e958c9018b81f03cb97ca" translate="yes" xml:space="preserve">
          <source>Previously, ESLint would ignore these malformed directive comments. ESLint v5 will report an error when it sees a problem like this, so that the issue can be more easily corrected.</source>
          <target state="translated">以前,ESLint会忽略这些错误的指令注释。ESLint v5在看到这样的问题时,会报告一个错误,这样就可以更容易地纠正这个问题。</target>
        </trans-unit>
        <trans-unit id="d6b010cfb49c2bd7324d04fb33de705502ddf710" translate="yes" xml:space="preserve">
          <source>Previously, ESLint would set the &lt;code&gt;parent&lt;/code&gt; property on each AST node immediately before running rule listeners for that node. This caused some confusion for rule authors, because the &lt;code&gt;parent&lt;/code&gt; property would not initially be present on any nodes, and it was sometimes necessary to complicate the structure of a rule to ensure that the &lt;code&gt;parent&lt;/code&gt; property of a given node would be available when needed.</source>
          <target state="translated">以前，ESLint会在为每个AST节点运行规则侦听器之前立即为其设置 &lt;code&gt;parent&lt;/code&gt; 属性。这给规则创建者造成了一些困惑，因为 &lt;code&gt;parent&lt;/code&gt; 属性最初不会出现在任何节点上，并且有时有必要使规则的结构复杂化，以确保给定节点的 &lt;code&gt;parent&lt;/code&gt; 属性在需要时可用。</target>
        </trans-unit>
        <trans-unit id="2efde3c7b07c84bb2b96e4b7cf3ee1a328ba78ff" translate="yes" xml:space="preserve">
          <source>Previously, it was possible for rules to report AST nodes without providing a report message. This was not intended behavior, and as a result the default formatter would crash if a rule omitted a message. However, it was possible to avoid a crash when using a non-default formatter, such as &lt;code&gt;json&lt;/code&gt;.</source>
          <target state="translated">以前，规则可以在不提供报告消息的情况下报告AST节点。这不是预期的行为，因此，如果规则省略了一条消息，则默认格式化程序将崩溃。但是，可以避免使用非默认格式程序（例如 &lt;code&gt;json&lt;/code&gt; )时发生崩溃。</target>
        </trans-unit>
        <trans-unit id="665203081aa657ef14f3fd259bc736ff48eade7a" translate="yes" xml:space="preserve">
          <source>Previously, rule context objects had an undocumented &lt;code&gt;_linter&lt;/code&gt; property, which was used internally within ESLint to process reports from rules. Some rules used this property to achieve functionality that was not intended to be possible for rules. For example, several plugins used the &lt;code&gt;_linter&lt;/code&gt; property in a rule to monitor reports from other rules, for the purpose of checking for unused &lt;code&gt;/* eslint-disable */&lt;/code&gt; directive comments. Although this functionality was useful for users, it could also cause stability problems for projects using ESLint. For example, an upgrade to a rule in one plugin could unexpectedly cause a rule in another plugin to start reporting errors.</source>
          <target state="translated">以前，规则上下文对象具有未记录的 &lt;code&gt;_linter&lt;/code&gt; 属性，该属性在ESLint内部用于处理来自规则的报告。一些规则使用此属性来实现规则无法实现的功能。例如，几个插件在规则中使用 &lt;code&gt;_linter&lt;/code&gt; 属性监视其他规则的报告，目的是检查未使用的 &lt;code&gt;/* eslint-disable */&lt;/code&gt; 指令注释。尽管此功能对用户很有用，但也可能导致使用ESLint的项目出现稳定性问题。例如，一个插件中的规则升级可能会意外导致另一个插件中的规则开始报告错误。</target>
        </trans-unit>
        <trans-unit id="7ad7f54686fbe669487e9816787f55d0683c5950" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;a href=&quot;../rules/comma-dangle&quot;&gt;&lt;code&gt;comma-dangle&lt;/code&gt;&lt;/a&gt; rule would ignore trailing function arguments and parameters, unless explicitly configured to check for function commas. In ESLint v6, function commas are treated the same way as other types of trailing commas.</source>
          <target state="translated">此前，&lt;a href=&quot;../rules/comma-dangle&quot;&gt; &lt;code&gt;comma-dangle&lt;/code&gt; &lt;/a&gt;规则将忽略尾随函数参数和参数，除非明确配置为检查功能的逗号。在ESLint v6中，对功能逗号的处理方式与其他类型的尾部逗号相同。</target>
        </trans-unit>
        <trans-unit id="bb4d9004d86d873bce13da59ea0da1efcb652b6e" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;a href=&quot;../rules/indent&quot;&gt;&lt;code&gt;indent&lt;/code&gt;&lt;/a&gt; rule was fairly lenient about checking indentation; there were many code patterns where indentation was not validated by the rule. This caused confusion for users, because they were accidentally writing code with incorrect indentation, and they expected ESLint to catch the issues.</source>
          <target state="translated">以前，&lt;a href=&quot;../rules/indent&quot;&gt; &lt;code&gt;indent&lt;/code&gt; &lt;/a&gt;规则对于检查缩进非常宽松；有许多代码模式未通过规则验证缩进。这给用户造成了困惑，因为他们不小心编写了带有错误缩进的代码，并且他们期望ESLint能够解决问题。</target>
        </trans-unit>
        <trans-unit id="cac4dad357054ea6ee0c7634c9a4e7c59614fbef" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;code&gt;context.getScope()&lt;/code&gt; method changed its behavior based on the &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt; property. However, this could cause confusing behavior when using a parser that doesn't respond to the &lt;code&gt;ecmaVersion&lt;/code&gt; option, such as &lt;code&gt;babel-eslint&lt;/code&gt;.</source>
          <target state="translated">以前， &lt;code&gt;context.getScope()&lt;/code&gt; 方法基于 &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt; 属性更改了其行为。但是，当使用不响应 &lt;code&gt;ecmaVersion&lt;/code&gt; 选项的解析器（例如 &lt;code&gt;babel-eslint&lt;/code&gt; )时，这可能导致混乱的行为。</target>
        </trans-unit>
        <trans-unit id="40450d3f81bf0c288fef5278f775f18d1a6902ca" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;code&gt;linter.verify()&lt;/code&gt; API accepted a &lt;code&gt;global&lt;/code&gt; config option, which was a synonym for the documented &lt;code&gt;globals&lt;/code&gt; property. The &lt;code&gt;global&lt;/code&gt; option was never documented or officially supported, and did not work in config files. It has been removed in 4.0.</source>
          <target state="translated">以前， &lt;code&gt;linter.verify()&lt;/code&gt; API接受 &lt;code&gt;global&lt;/code&gt; 配置选项，这是已记录的 &lt;code&gt;globals&lt;/code&gt; 属性的同义词。在 &lt;code&gt;global&lt;/code&gt; 的选择从来没有记载或正式支持，并且在配置文件没有工作。它已在4.0中删除。</target>
        </trans-unit>
        <trans-unit id="759b8740ec08f1087d9d1461adf3e37a3bf5b531" translate="yes" xml:space="preserve">
          <source>Previously, when configuring a set of global variables with an object, it was possible to use anything as the values of the object. An unknown value would be treated the same as &lt;code&gt;&quot;writable&quot;&lt;/code&gt;.</source>
          <target state="translated">以前，当用对象配置一组全局变量时，可以使用任何东西作为对象的值。未知值将被视为与 &lt;code&gt;&quot;writable&quot;&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="d7b32ac883bfc23aab343c6372688bec1c7d6449" translate="yes" xml:space="preserve">
          <source>Previously, when linting code with a parser that had not been previously defined, the &lt;code&gt;Linter&lt;/code&gt; API would attempt to load the parser from the filesystem. However, this behavior was confusing because &lt;code&gt;Linter&lt;/code&gt; never access the filesystem in any other cases, and it was difficult to ensure that the correct parser would be found when loading the parser from the filesystem.</source>
          <target state="translated">以前，当使用以前未定义的解析器 &lt;code&gt;Linter&lt;/code&gt; 代码时，Linter API会尝试从文件系统加载解析器。但是，此行为令人困惑，因为 &lt;code&gt;Linter&lt;/code&gt; 在任何其他情况下都不会访问文件系统，并且在从文件系统加载解析器时很难确保找到正确的解析器。</target>
        </trans-unit>
        <trans-unit id="8a3ba3b815ccf0fde610368afb8b3a032a9740a4" translate="yes" xml:space="preserve">
          <source>Previously, when parsing JS code like &lt;code&gt;const foo = {...data}&lt;/code&gt; with the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option enabled, the default parser would generate an &lt;code&gt;ExperimentalSpreadProperty&lt;/code&gt; node type for the &lt;code&gt;...data&lt;/code&gt; spread element.</source>
          <target state="translated">以前，在启用了 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; 选项的情况下解析诸如 &lt;code&gt;const foo = {...data}&lt;/code&gt; 类的JS代码时，默认解析器将为 &lt;code&gt;...data&lt;/code&gt; spread元素生成 &lt;code&gt;ExperimentalSpreadProperty&lt;/code&gt; 节点类型。</target>
        </trans-unit>
        <trans-unit id="3572fe8f9bf308c3f1c32a5c5c8ecf7ade2e2992" translate="yes" xml:space="preserve">
          <source>Previously, when parsing JS code like &lt;code&gt;const {foo, ...rest} = data&lt;/code&gt; with the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option enabled, the default parser would generate an &lt;code&gt;ExperimentalRestProperty&lt;/code&gt; node type for the &lt;code&gt;...data&lt;/code&gt; rest element.</source>
          <target state="translated">以前，当在启用了 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; 选项的情况下解析诸如 &lt;code&gt;const {foo, ...rest} = data&lt;/code&gt; 类的JS代码时，默认解析器将为 &lt;code&gt;...data&lt;/code&gt; rest元素生成一个 &lt;code&gt;ExperimentalRestProperty&lt;/code&gt; 节点类型。</target>
        </trans-unit>
        <trans-unit id="ac97c7d1bc4493830e4f2c35fbc7b98e9d1581e8" translate="yes" xml:space="preserve">
          <source>Previously, when using the default parser it was possible to use the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option to enable support for &lt;a href=&quot;https://developers.google.com/web/updates/2017/06/object-rest-spread&quot;&gt;rest/spread properties&lt;/a&gt;, as follows:</source>
          <target state="translated">以前，使用默认解析器时，可以使用 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; 选项启用对&lt;a href=&quot;https://developers.google.com/web/updates/2017/06/object-rest-spread&quot;&gt;rest / spread属性的&lt;/a&gt;支持，如下所示：</target>
        </trans-unit>
        <trans-unit id="393a7447e4d30c62abea4ddc9f0d3dfc3e208e74" translate="yes" xml:space="preserve">
          <source>Previously, when using the default parser, a config could use the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option to enable parsing support for object rest/spread properties:</source>
          <target state="translated">以前，使用默认解析器时，配置可以使用 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; 选项来启用对对象剩余/扩展属性的解析支持：</target>
        </trans-unit>
        <trans-unit id="6c1fec0a04a3eab043ee811142120d57785cfef0" translate="yes" xml:space="preserve">
          <source>Primitive Literals</source>
          <target state="translated">原始文字</target>
        </trans-unit>
        <trans-unit id="8c8f400f7e3e42d398c134471b34479ab1e3ff12" translate="yes" xml:space="preserve">
          <source>Prior to 2.0.0, if a directory contained both an &lt;code&gt;.eslintrc&lt;/code&gt; file and a &lt;code&gt;package.json&lt;/code&gt; file with ESLint configuration information, the settings from the two files would be merged together. In 2.0.0, only the settings from the &lt;code&gt;.eslintrc.*&lt;/code&gt; file are used and the ones in &lt;code&gt;package.json&lt;/code&gt; are ignored when both are present. Otherwise, &lt;code&gt;package.json&lt;/code&gt; can still be used with ESLint configuration, but only if no other &lt;code&gt;.eslintrc.*&lt;/code&gt; files are present.</source>
          <target state="translated">在2.0.0之前的版本中，如果目录同时包含 &lt;code&gt;.eslintrc&lt;/code&gt; 文件和带有ESLint配置信息的 &lt;code&gt;package.json&lt;/code&gt; 文件，则这两个文件中的设置将合并在一起。在2.0.0中，仅使用 &lt;code&gt;.eslintrc.*&lt;/code&gt; 文件中的设置，而同时存在 &lt;code&gt;package.json&lt;/code&gt; 中的设置则将忽略它们。否则， &lt;code&gt;package.json&lt;/code&gt; 仍可以与ESLint配置一起使用，但 &lt;code&gt;.eslintrc.*&lt;/code&gt; 是不存在其他.eslintrc。*文件。</target>
        </trans-unit>
        <trans-unit id="bacbbe4722ec9b78f85bdddd7ed97a705ae7d9fe" translate="yes" xml:space="preserve">
          <source>Prior to 2.0.0, new global variables that were standardized as part of ES6 such as &lt;code&gt;Promise&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, and &lt;code&gt;Symbol&lt;/code&gt; were included in the built-in global environment. This could lead to potential issues when, for example, &lt;code&gt;no-undef&lt;/code&gt; permitted use of the &lt;code&gt;Promise&lt;/code&gt; constructor even in ES5 code where promises are unavailable. In 2.0.0, the built-in environment only includes the standard ES5 global variables, and the new ES6 global variables have been moved to the &lt;code&gt;es6&lt;/code&gt; environment.</source>
          <target state="translated">在2.0.0之前的版本中，内置于全局环境中包括了作为ES6的一部分标准化的新全局变量，例如 &lt;code&gt;Promise&lt;/code&gt; ， &lt;code&gt;Map&lt;/code&gt; ， &lt;code&gt;Set&lt;/code&gt; 和 &lt;code&gt;Symbol&lt;/code&gt; 。例如，即使在诺言不可用的ES5代码中，也不允许 &lt;code&gt;no-undef&lt;/code&gt; 允许使用 &lt;code&gt;Promise&lt;/code&gt; 构造函数，这可能会导致潜在的问题。在2.0.0中，内置环境仅包含标准ES5全局变量，而新的ES6全局变量已移至 &lt;code&gt;es6&lt;/code&gt; 环境。</target>
        </trans-unit>
        <trans-unit id="ea53a76cd88b434dcfaff09ec72ada7ae7831a08" translate="yes" xml:space="preserve">
          <source>Prior to 2.0.0, the way to enable language options was by using &lt;code&gt;ecmaFeatures&lt;/code&gt; in your configuration. In 2.0.0:</source>
          <target state="translated">在2.0.0之前的版本中，启用语言选项的方法是在配置中使用 &lt;code&gt;ecmaFeatures&lt;/code&gt; 。在2.0.0版本中：</target>
        </trans-unit>
        <trans-unit id="6b9f0362f6ea97fabedbee28f3e42f7c63d479c2" translate="yes" xml:space="preserve">
          <source>Prior to 4.0, ESLint required parsers to implement comment attachment, a process where AST nodes would gain additional properties corresponding to their leading and trailing comments in the source file. This made it difficult for users to develop custom parsers, because they would have to replicate the confusing comment attachment semantics required by ESLint.</source>
          <target state="translated">在4.0之前,ESLint要求解析器实现注释附件,在这个过程中,AST节点将获得与其在源文件中的前导和后导注释相对应的附加属性。这使得用户很难开发自定义的解析器,因为他们必须复制ESLint所要求的混乱的注释附加语义。</target>
        </trans-unit>
        <trans-unit id="5e3d392b20fe6d9664c81b4a65c6b601daf8e9bf" translate="yes" xml:space="preserve">
          <source>Prior to 4.0, shebang comments in a source file would not appear in the output of &lt;code&gt;sourceCode.getAllComments()&lt;/code&gt; or &lt;code&gt;sourceCode.getComments()&lt;/code&gt;, but they would appear in the output of &lt;code&gt;sourceCode.getTokenOrCommentBefore&lt;/code&gt; as line comments. This inconsistency led to some confusion for rule developers.</source>
          <target state="translated">在4.0之前的版本中，源文件中的shebang注释不会出现在 &lt;code&gt;sourceCode.getAllComments()&lt;/code&gt; 或 &lt;code&gt;sourceCode.getComments()&lt;/code&gt; 的输出中，但会以行注释的 &lt;code&gt;sourceCode.getTokenOrCommentBefore&lt;/code&gt; 出现在sourceCode.getTokenOrCommentBefore的输出中。这种不一致导致规则开发人员有些困惑。</target>
        </trans-unit>
        <trans-unit id="b3be15561d5151f64c56456dc30fa7cef13a71e7" translate="yes" xml:space="preserve">
          <source>Prior to v0.16.0 this rule also enforced that there was only a single line at the end of the file. If you still want this behavior, consider enabling &lt;a href=&quot;no-multiple-empty-lines&quot;&gt;no-multiple-empty-lines&lt;/a&gt; with &lt;code&gt;maxEOF&lt;/code&gt; and/or &lt;a href=&quot;no-trailing-spaces&quot;&gt;no-trailing-spaces&lt;/a&gt;.</source>
          <target state="translated">在v0.16.0之前，此规则还强制文件的末尾只有一行。如果仍然需要这种行为，请考虑使用 &lt;code&gt;maxEOF&lt;/code&gt; 和/或&lt;a href=&quot;no-trailing-spaces&quot;&gt;no-trailing-spaces&lt;/a&gt;启用&lt;a href=&quot;no-multiple-empty-lines&quot;&gt;无多空行&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="af52f1493bafbe39bd3dae2bc861bf916727dd6e" translate="yes" xml:space="preserve">
          <source>Prior to v2.0.0, plugins could specify a &lt;code&gt;rulesConfig&lt;/code&gt; for the plugin. The &lt;code&gt;rulesConfig&lt;/code&gt; would automatically be applied whenever someone uses the plugin, which is the opposite of what ESLint does in every other situation (where nothing is on by default). To bring plugins behavior in line, we have removed support for &lt;code&gt;rulesConfig&lt;/code&gt; in plugins.</source>
          <target state="translated">在 &lt;code&gt;rulesConfig&lt;/code&gt; 之前，插件可以为插件指定rulesConfig。该 &lt;code&gt;rulesConfig&lt;/code&gt; 每当有人使用插件，这是一个什么样ESLint确实在所有其他情况下（其中没有什么是默认的）相反会自动应用。为了使插件行为符合要求，我们已删除了插件中对 &lt;code&gt;rulesConfig&lt;/code&gt; 的支持。</target>
        </trans-unit>
        <trans-unit id="692a54c10f74d805a38453bd22bb1d25068c3ba0" translate="yes" xml:space="preserve">
          <source>Processors in Plugins</source>
          <target state="translated">插件中的处理器</target>
        </trans-unit>
        <trans-unit id="ee555673e8664c98d4ada2d762c610f965ba2a31" translate="yes" xml:space="preserve">
          <source>Processors may make named code blocks such as &lt;code&gt;0.js&lt;/code&gt; and &lt;code&gt;1.js&lt;/code&gt;. ESLint handles such a named code block as a child file of the original file. You can specify additional configurations for named code blocks in the &lt;code&gt;overrides&lt;/code&gt; section of the config. For example, the following disables &lt;code&gt;strict&lt;/code&gt; rule for the named code blocks which end with &lt;code&gt;.js&lt;/code&gt; in markdown files.</source>
          <target state="translated">处理器可以让named代码块，如 &lt;code&gt;0.js&lt;/code&gt; 和 &lt;code&gt;1.js&lt;/code&gt; 。ESLint将这样的命名代码块作为原始文件的子文件来处理。您可以在配置的 &lt;code&gt;overrides&lt;/code&gt; 部分中为命名代码块指定其他配置。例如，以下代码禁用了Markdown文件中以 &lt;code&gt;.js&lt;/code&gt; 结尾的命名代码块的 &lt;code&gt;strict&lt;/code&gt; 规则。</target>
        </trans-unit>
        <trans-unit id="f32c5098fb499f12ad76958c7a61d5b8091f9763" translate="yes" xml:space="preserve">
          <source>Program is expressed with several code paths. A code path is expressed with objects of two kinds: &lt;code&gt;CodePath&lt;/code&gt; and &lt;code&gt;CodePathSegment&lt;/code&gt;.</source>
          <target state="translated">程序用几个代码路径表示。代码路径用两种对象表示： &lt;code&gt;CodePath&lt;/code&gt; 和 &lt;code&gt;CodePathSegment&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="42fa885d13da97a910ec7164bf19b94acb08d0f0" translate="yes" xml:space="preserve">
          <source>Programming language style guides are important for the long-term maintainability of software. This guide is based on the &lt;a href=&quot;https://java.sun.com/docs/codeconv/&quot;&gt;Code Conventions for the Java Programming Language&lt;/a&gt; and &lt;a href=&quot;http://javascript.crockford.com/code.html&quot;&gt;Douglas Crockford's Code Conventions for the JavaScript Programming Language&lt;/a&gt;. Modifications have been made due to my personal experience and preferences.</source>
          <target state="translated">编程语言样式指南对于软件的长期可维护性很重要。本指南基于&lt;a href=&quot;https://java.sun.com/docs/codeconv/&quot;&gt;Java编程语言&lt;/a&gt;&lt;a href=&quot;http://javascript.crockford.com/code.html&quot;&gt;的代码约定&lt;/a&gt;和Douglas Crockford的JavaScript编程语言的代码约定。由于我的个人经验和偏好，进行了修改。</target>
        </trans-unit>
        <trans-unit id="43f3ace69f2fe7131543d9052cb08b303ff904e4" translate="yes" xml:space="preserve">
          <source>Project-level configuration:</source>
          <target state="translated">项目级配置。</target>
        </trans-unit>
        <trans-unit id="33fb62ee4504c98b469fcbf6c4712f39685712fe" translate="yes" xml:space="preserve">
          <source>Property descriptors in &lt;code&gt;Object.create&lt;/code&gt;, &lt;code&gt;Object.defineProperty&lt;/code&gt;, &lt;code&gt;Object.defineProperties&lt;/code&gt;, and &lt;code&gt;Reflect.defineProperty&lt;/code&gt; methods of the global objects.</source>
          <target state="translated">全局对象的 &lt;code&gt;Object.create&lt;/code&gt; ， &lt;code&gt;Object.defineProperty&lt;/code&gt; ， &lt;code&gt;Object.defineProperties&lt;/code&gt; 和 &lt;code&gt;Reflect.defineProperty&lt;/code&gt; 方法中的属性描述符。</target>
        </trans-unit>
        <trans-unit id="b5e66a1596415565d4a94aaddcf8bb5751542451" translate="yes" xml:space="preserve">
          <source>Proponents of Yoda conditions highlight that it is impossible to mistakenly use &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; because you cannot assign to a literal value. Doing so will cause a syntax error and you will be informed of the mistake early on. This practice was therefore very common in early programming where tools were not yet available.</source>
          <target state="translated">支持Yoda条件的人强调，不可能错误地使用 &lt;code&gt;=&lt;/code&gt; 而不是 &lt;code&gt;==&lt;/code&gt; ,因为您不能赋给文字值。这样做会导致语法错误，并且您会在早期得到通知。因此，这种做法在尚无工具的早期编程中非常普遍。</target>
        </trans-unit>
        <trans-unit id="d36f5aee868ae6db86c6284531cdd8f72d77db1c" translate="yes" xml:space="preserve">
          <source>Proposing a &lt;a href=&quot;new-rules&quot;&gt;New Rule&lt;/a&gt;</source>
          <target state="translated">提出&lt;a href=&quot;new-rules&quot;&gt;新规则&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ecaeee3736f17c6a22f424961f98b463abcd212d" translate="yes" xml:space="preserve">
          <source>Proposing a &lt;a href=&quot;rule-changes&quot;&gt;Rule Change&lt;/a&gt;</source>
          <target state="translated">提出&lt;a href=&quot;rule-changes&quot;&gt;规则变更&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8fde9b438a1e10afec4812ddd08e7722642dc36e" translate="yes" xml:space="preserve">
          <source>Proposing a Rule</source>
          <target state="translated">提议一项规则</target>
        </trans-unit>
        <trans-unit id="341849141f80cca77602012c6f342ce4742319fd" translate="yes" xml:space="preserve">
          <source>Proposing a Rule Change</source>
          <target state="translated">提议修改规则</target>
        </trans-unit>
        <trans-unit id="86ee7e213745f3cf674455c23534700070da7b53" translate="yes" xml:space="preserve">
          <source>Provide as many unit tests as possible. Your pull request will never be turned down for having too many tests submitted with it!</source>
          <target state="translated">提供尽可能多的单元测试。你的拉取请求不会因为提交了太多的测试而被拒绝。</target>
        </trans-unit>
        <trans-unit id="4ffdc87852320c6294c2b02843d1425e91d10cfc" translate="yes" xml:space="preserve">
          <source>Providing Suggestions</source>
          <target state="translated">提供建议</target>
        </trans-unit>
        <trans-unit id="5591bbc620225df439fe2bdef9369c8238d4af8c" translate="yes" xml:space="preserve">
          <source>Publishing a Shareable Config</source>
          <target state="translated">发布可共享配置</target>
        </trans-unit>
        <trans-unit id="30ab8d084e2209d47a1dc198c8de1e251f390a94" translate="yes" xml:space="preserve">
          <source>Pull Requests</source>
          <target state="translated">牵引请求</target>
        </trans-unit>
        <trans-unit id="8317963e9e1ff1e717106bf4888341b278d74c92" translate="yes" xml:space="preserve">
          <source>Push your changes</source>
          <target state="translated">推进你的改变</target>
        </trans-unit>
        <trans-unit id="8c720088282bb804281d4141100281d68e2719bb" translate="yes" xml:space="preserve">
          <source>Putting default parameter at last allows function calls to omit optional tail arguments.</source>
          <target state="translated">把默认参数放在最后,可以让函数调用省略可选的尾部参数。</target>
        </trans-unit>
        <trans-unit id="289df8885d703027d487fef77d56fc52e316d891" translate="yes" xml:space="preserve">
          <source>Rather than creating separate rules for every language feature you want to turn off, this rule allows you to configure the syntax elements you want to restrict use of. These elements are represented by their &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt; node types. For example, a function declaration is represented by &lt;code&gt;FunctionDeclaration&lt;/code&gt; and the &lt;code&gt;with&lt;/code&gt; statement is represented by &lt;code&gt;WithStatement&lt;/code&gt;. You may find the full list of AST node names you can use &lt;a href=&quot;https://github.com/eslint/espree/blob/master/lib/ast-node-types.js&quot;&gt;on GitHub&lt;/a&gt; and use &lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt; with the espree parser to see what type of nodes your code consists of.</source>
          <target state="translated">不必为要关闭的每种语言功能创建单独的规则，该规则允许您配置要限制使用的语法元素。这些元素由其&lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;节点类型表示。例如，函数声明由下式表示 &lt;code&gt;FunctionDeclaration&lt;/code&gt; 并且 &lt;code&gt;with&lt;/code&gt; 陈述可表示 &lt;code&gt;WithStatement&lt;/code&gt; 。您可能会找到可&lt;a href=&quot;https://github.com/eslint/espree/blob/master/lib/ast-node-types.js&quot;&gt;在GitHub上&lt;/a&gt;使用的AST节点名称的完整列表，并将&lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt;与espree解析器结合使用以查看代码包含哪些类型的节点。</target>
        </trans-unit>
        <trans-unit id="4d1f996aa17807ebebdb5143b01f86f170d5bea6" translate="yes" xml:space="preserve">
          <source>React</source>
          <target state="translated">React</target>
        </trans-unit>
        <trans-unit id="9ee3f643952093b19948a020203596de344dc34f" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;https://eslint.org/conduct&quot;&gt;Code of Conduct&lt;/a&gt;</source>
          <target state="translated">阅读&lt;a href=&quot;https://eslint.org/conduct&quot;&gt;行为准则&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8bf3ca1af55a4ac765bcc067d56c1abf4201ae04" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;https://js.foundation/community/code-of-conduct&quot;&gt;Code of Conduct&lt;/a&gt;</source>
          <target state="translated">阅读&lt;a href=&quot;https://js.foundation/community/code-of-conduct&quot;&gt;行为准则&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3c28870b2e40bf75ddc825d7f6ccf7aef23e7e4b" translate="yes" xml:space="preserve">
          <source>Read-only global variables</source>
          <target state="translated">只读全局变量</target>
        </trans-unit>
        <trans-unit id="f7f699bcbeea4f59d35cf84d686c1fe9d26c6cd2" translate="yes" xml:space="preserve">
          <source>Reading configuration information from config files (including &lt;code&gt;.eslintrc&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt;)</source>
          <target state="translated">从配置文件（包括 &lt;code&gt;.eslintrc&lt;/code&gt; 和 &lt;code&gt;package.json&lt;/code&gt; ）中读取配置信息</target>
        </trans-unit>
        <trans-unit id="c503dd1f9c9f723f78d9b1e948ede74c06ed1112" translate="yes" xml:space="preserve">
          <source>Reading from the file system</source>
          <target state="translated">从文件系统读取</target>
        </trans-unit>
        <trans-unit id="256ac291cd34fa721dc7063e9c7a456d831fad1e" translate="yes" xml:space="preserve">
          <source>Rebase onto upstream</source>
          <target state="translated">重归上游</target>
        </trans-unit>
        <trans-unit id="3636419e1cfae4b85f914484288a2e7b2429d45d" translate="yes" xml:space="preserve">
          <source>Rebasing</source>
          <target state="translated">Rebasing</target>
        </trans-unit>
        <trans-unit id="15bc3424085a46a8b413590042e27673eda36b4b" translate="yes" xml:space="preserve">
          <source>Recommended keywords:</source>
          <target state="translated">推荐关键词:</target>
        </trans-unit>
        <trans-unit id="8532988ca58a814f1543477fc268a1acefe668d0" translate="yes" xml:space="preserve">
          <source>Redeclarations of read-only global variables and assignments to read-only global variables.</source>
          <target state="translated">只读全局变量的重新声明和对只读全局变量的赋值。</target>
        </trans-unit>
        <trans-unit id="4462d29bec3d07aaf9a71ae4d7273bee7d450028" translate="yes" xml:space="preserve">
          <source>Reference Information</source>
          <target state="translated">参考信息</target>
        </trans-unit>
        <trans-unit id="df9e76446650cac75008b6bf87079e749a453bdb" translate="yes" xml:space="preserve">
          <source>Reference interface</source>
          <target state="translated">参考接口</target>
        </trans-unit>
        <trans-unit id="53c2a1c2bb6e1d4d8148660156aec1a0a17d24a8" translate="yes" xml:space="preserve">
          <source>ReferenceError: assignment to undeclared variable</source>
          <target state="translated">引用错误:分配给未声明的变量。</target>
        </trans-unit>
        <trans-unit id="eb264a799738b600bd47d5135f4fc05dfcd5b1d5" translate="yes" xml:space="preserve">
          <source>References to scoped plugins in config files are now required to include the scope</source>
          <target state="translated">现在,配置文件中对作用域插件的引用必须包含作用域。</target>
        </trans-unit>
        <trans-unit id="e4409d5bd36638733bfa9227649affbe8de8da69" translate="yes" xml:space="preserve">
          <source>Reflect.apply</source>
          <target state="translated">Reflect.apply</target>
        </trans-unit>
        <trans-unit id="f2f9fd068e4242fbb4c065fab823928d6658dcc6" translate="yes" xml:space="preserve">
          <source>Reflect.defineProperty</source>
          <target state="translated">Reflect.defineProperty</target>
        </trans-unit>
        <trans-unit id="d9c40e72ed42277e621938140990fecec31860d2" translate="yes" xml:space="preserve">
          <source>Reflect.deleteProperty</source>
          <target state="translated">Reflect.deleteProperty</target>
        </trans-unit>
        <trans-unit id="dca299dec7c4b27406c99a9db8613312969fc8ef" translate="yes" xml:space="preserve">
          <source>Reflect.getOwnPropertyDescriptor</source>
          <target state="translated">Reflect.getOwnPropertyDescriptor</target>
        </trans-unit>
        <trans-unit id="9e55b43471522e73de67aec1ebffc5cdb9fa1436" translate="yes" xml:space="preserve">
          <source>Reflect.getOwnPropertyNames</source>
          <target state="translated">Reflect.getOwnPropertyNames</target>
        </trans-unit>
        <trans-unit id="c4ccc5cd40402aca6f2327273b607a16273c4cf3" translate="yes" xml:space="preserve">
          <source>Reflect.getPrototypeOf</source>
          <target state="translated">Reflect.getPrototypeOf</target>
        </trans-unit>
        <trans-unit id="67b946573d9e6181078c2c26d4ca78a319f779cb" translate="yes" xml:space="preserve">
          <source>Reflect.isExtensible</source>
          <target state="translated">Reflect.isExtensible</target>
        </trans-unit>
        <trans-unit id="9578443035eb8705bd126e9acab6f34b58453535" translate="yes" xml:space="preserve">
          <source>Reflect.preventExtensions</source>
          <target state="translated">Reflect.preventExtensions</target>
        </trans-unit>
        <trans-unit id="a5a0796157a708b39407cdcc3b1149e74aa1ba55" translate="yes" xml:space="preserve">
          <source>Reflect.setPrototypeOf</source>
          <target state="translated">Reflect.setPrototypeOf</target>
        </trans-unit>
        <trans-unit id="5a1a35c83df714211f74bb546dc5facc26363344" translate="yes" xml:space="preserve">
          <source>RegExp &lt;code&gt;u&lt;/code&gt; flag has two effects:</source>
          <target state="translated">RegExp &lt;code&gt;u&lt;/code&gt; 标志具有两个作用：</target>
        </trans-unit>
        <trans-unit id="bc019f867ae1e63caad1e171c9ac68f393022fd6" translate="yes" xml:space="preserve">
          <source>RegExp literals such as &lt;code&gt;(/abc/).test(var)&lt;/code&gt; to avoid conflicts with the &lt;a href=&quot;wrap-regex&quot;&gt;wrap-regex&lt;/a&gt; rule</source>
          <target state="translated">RegExp文字，例如 &lt;code&gt;(/abc/).test(var)&lt;/code&gt; ,以避免与&lt;a href=&quot;wrap-regex&quot;&gt;wrap-regex&lt;/a&gt;规则冲突</target>
        </trans-unit>
        <trans-unit id="7114653a737d7346ec01e388401a05144edff375" translate="yes" xml:space="preserve">
          <source>Regular expression literals, e.g., &lt;code&gt;/abc/u&lt;/code&gt;.</source>
          <target state="translated">正则表达式文字，例如 &lt;code&gt;/abc/u&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a0ccd845025a375ba8f53989cf7554162e8cbfee" translate="yes" xml:space="preserve">
          <source>Regular expressions can be very complex and difficult to understand, which is why it's important to keep them as simple as possible in order to avoid mistakes. One of the more error-prone things you can do with a regular expression is to use more than one space, such as:</source>
          <target state="translated">正则表达式可能非常复杂和难以理解,这就是为什么为了避免错误,要尽可能地保持简单。正则表达式比较容易出错的地方之一是使用一个以上的空格,比如。</target>
        </trans-unit>
        <trans-unit id="73df01ef95fe676ecd6771adb485003ded6e2733" translate="yes" xml:space="preserve">
          <source>Related Rules</source>
          <target state="translated">相关规则</target>
        </trans-unit>
        <trans-unit id="33749d1fd374471a64ca2130b8acf29edc1c7f83" translate="yes" xml:space="preserve">
          <source>Related rules</source>
          <target state="translated">相关规则</target>
        </trans-unit>
        <trans-unit id="c8ca31e64125f97916f5430dc1a846a8fb66cb93" translate="yes" xml:space="preserve">
          <source>Relational Operators: &lt;code&gt;&quot;in&quot;&lt;/code&gt;, &lt;code&gt;&quot;instanceof&quot;&lt;/code&gt;</source>
          <target state="translated">关系运算符： &lt;code&gt;&quot;in&quot;&lt;/code&gt; ， &lt;code&gt;&quot;instanceof&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e4f647ac04e2d41dbb5b8e09ff6b1cdb35b950d" translate="yes" xml:space="preserve">
          <source>Relative glob patterns</source>
          <target state="translated">相对球型</target>
        </trans-unit>
        <trans-unit id="e67d73e5c8870b0aee2e6a5b9e1177d2a9866243" translate="yes" xml:space="preserve">
          <source>Remember that ESLint is completely pluggable, which means you can create your own rules and distribute them using plugins. We did this on purpose because we don't want to be the gatekeepers for all possible rules. Even if we don't accept a rule into the core, that doesn't mean you can't have the exact rule that you want. See the &lt;a href=&quot;../working-with-rules&quot;&gt;working with rules&lt;/a&gt; and &lt;a href=&quot;../working-with-plugins&quot;&gt;working with plugins&lt;/a&gt; documentation for more information.</source>
          <target state="translated">请记住，ESLint是完全可插入的，这意味着您可以创建自己的规则并使用插件分发它们。我们这样做是故意的，因为我们不想成为所有可能规则的守门员。即使我们不接受规则作为核心，也不意味着您无法获得所需的确切规则。有关更多信息，请参见&lt;a href=&quot;../working-with-rules&quot;&gt;使用规则&lt;/a&gt;和&lt;a href=&quot;../working-with-plugins&quot;&gt;使用插件&lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="960f6a4b27df973ccb71be9fd4f6a93b7639f03e" translate="yes" xml:space="preserve">
          <source>Remove the severity from the schema</source>
          <target state="translated">删除模式中的严重性</target>
        </trans-unit>
        <trans-unit id="b5e77c5c02a90c01b16fea8f21a1083425ebe0e0" translate="yes" xml:space="preserve">
          <source>Removed</source>
          <target state="translated">Removed</target>
        </trans-unit>
        <trans-unit id="546fa02adabca3448dcb8a362469072d1db5cf13" translate="yes" xml:space="preserve">
          <source>Removed Rules</source>
          <target state="translated">删除的规则</target>
        </trans-unit>
        <trans-unit id="9e30b455061dff243e207fa18925b8c54a0ca2ad" translate="yes" xml:space="preserve">
          <source>Removed rule</source>
          <target state="translated">删除规则</target>
        </trans-unit>
        <trans-unit id="4db98af9e39320a953bbea6bb998fe7493c40e5e" translate="yes" xml:space="preserve">
          <source>Replaced by</source>
          <target state="translated">代之以</target>
        </trans-unit>
        <trans-unit id="8ada39071f07cad84f271436e272e3f53d42073a" translate="yes" xml:space="preserve">
          <source>Report Unused &lt;code&gt;eslint-disable&lt;/code&gt; Comments</source>
          <target state="translated">报告未使用的 &lt;code&gt;eslint-disable&lt;/code&gt; 注释</target>
        </trans-unit>
        <trans-unit id="a5bb62e8d7d2cc84df075be591e2610b579c891d" translate="yes" xml:space="preserve">
          <source>Reported problems have the following location information:</source>
          <target state="translated">报告的问题有以下位置信息。</target>
        </trans-unit>
        <trans-unit id="2c54bc0da768d4c877c77485784187863c28ad3c" translate="yes" xml:space="preserve">
          <source>Reporting Bugs</source>
          <target state="translated">报告错误</target>
        </trans-unit>
        <trans-unit id="e73f2c6a276df317f0e8251b594b9c3a7772ea2d" translate="yes" xml:space="preserve">
          <source>Reporting a security vulnerability</source>
          <target state="translated">报告安全漏洞</target>
        </trans-unit>
        <trans-unit id="4ba09f6e2cd39c11132e45ba62fe27e6d6484469" translate="yes" xml:space="preserve">
          <source>Reporting back the results of the execution</source>
          <target state="translated">汇报执行结果</target>
        </trans-unit>
        <trans-unit id="7fb8531d32f9fc2cf4e7e644d67cb16c9b2b084a" translate="yes" xml:space="preserve">
          <source>Reporting warnings when certain patterns are found</source>
          <target state="translated">当发现某些模式时,报告警告</target>
        </trans-unit>
        <trans-unit id="924d4980aa5047bdf606a251026020006a83efbe" translate="yes" xml:space="preserve">
          <source>Requesting a &lt;a href=&quot;changes&quot;&gt;Change&lt;/a&gt;</source>
          <target state="translated">要求&lt;a href=&quot;changes&quot;&gt;变更&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9670695fdbad92ea104f8e7230b9955bfb27da6e" translate="yes" xml:space="preserve">
          <source>Require === and !== (eqeqeq)</source>
          <target state="translated">要求 ===和 !==(eqeqeq)</target>
        </trans-unit>
        <trans-unit id="c9f4e2dc2e937fe6aab7b4d4c5b9b14070f93f68" translate="yes" xml:space="preserve">
          <source>Require Brace Style (brace-style)</source>
          <target state="translated">需要支架样式(支架样式</target>
        </trans-unit>
        <trans-unit id="29f8a3517efa09985e94aaa3daa4acd42449e8f9" translate="yes" xml:space="preserve">
          <source>Require CamelCase (camelcase)</source>
          <target state="translated">要求CamelCase (camelcase)</target>
        </trans-unit>
        <trans-unit id="e6c502a34157a55662fdb96c649dfac3dca1c26c" translate="yes" xml:space="preserve">
          <source>Require Consistent This (consistent-this)</source>
          <target state="translated">要求一致这(一致这)。</target>
        </trans-unit>
        <trans-unit id="32bfc48d08ec21670f3f949a648100cdfb446f0d" translate="yes" xml:space="preserve">
          <source>Require Default Case in Switch Statements (default-case)</source>
          <target state="translated">在开关语句中要求默认大小写(default-case)</target>
        </trans-unit>
        <trans-unit id="c4bf33ba1bc063ecb08ea78c74d6e52247e78f9e" translate="yes" xml:space="preserve">
          <source>Require Dot Notation (dot-notation)</source>
          <target state="translated">要求点符号(dot-notation)</target>
        </trans-unit>
        <trans-unit id="a3af1a645caf25364b15e6b49f5552b803adff40" translate="yes" xml:space="preserve">
          <source>Require Following Curly Brace Conventions (curly)</source>
          <target state="translated">要求遵循卷曲括号约定(卷曲)</target>
        </trans-unit>
        <trans-unit id="11631863fa9bc606f91797315db692789e0485a5" translate="yes" xml:space="preserve">
          <source>Require Guarding for-in (guard-for-in)</source>
          <target state="translated">要求守卫在(守卫在)</target>
        </trans-unit>
        <trans-unit id="ad26fbff7070e7dd41742c51df353b22c939a838" translate="yes" xml:space="preserve">
          <source>Require IIFEs to be Wrapped (wrap-iife)</source>
          <target state="translated">要求综合保税区要有包装(wrap-iife)</target>
        </trans-unit>
        <trans-unit id="eedd486c2cd16ec02fb12f728bf82116a2f3dc18" translate="yes" xml:space="preserve">
          <source>Require Object Literal Shorthand Syntax (object-shorthand)</source>
          <target state="translated">需要对象文字速记语法(object-shorthand)</target>
        </trans-unit>
        <trans-unit id="0f941f716fc3ec6b74fefe19704d5a768596d353" translate="yes" xml:space="preserve">
          <source>Require Or Disallow Space Before Blocks (space-before-blocks)</source>
          <target state="translated">要求或不允许在块前留有空格(空格前块)。</target>
        </trans-unit>
        <trans-unit id="ba41a13b01bc7714d82241f45ba769d95682a9b8" translate="yes" xml:space="preserve">
          <source>Require Radix Parameter (radix)</source>
          <target state="translated">要求半径参数(radix)</target>
        </trans-unit>
        <trans-unit id="4649036a73fddd6b7bf8df27f93ba7f530bd0494" translate="yes" xml:space="preserve">
          <source>Require Regex Literals to be Wrapped (wrap-regex)</source>
          <target state="translated">要求对Regex字元进行封装(wrap-regex)</target>
        </trans-unit>
        <trans-unit id="7b4e071d32a73a0c6741662339d8cb1bea0829d1" translate="yes" xml:space="preserve">
          <source>Require Variable Declarations to be at the top of their scope (vars-on-top)</source>
          <target state="translated">要求变量声明在其作用域的顶部(vars-on-top)。</target>
        </trans-unit>
        <trans-unit id="c6b80ff02932afc7cc099abcdbfedd2d3d1808fb" translate="yes" xml:space="preserve">
          <source>Require braces in arrow function body (arrow-body-style)</source>
          <target state="translated">箭头函数体中要求使用大括号(箭头体式)。</target>
        </trans-unit>
        <trans-unit id="5f98bbcd6bc31019c27bf6149a981097646acd25" translate="yes" xml:space="preserve">
          <source>Require grouped accessor pairs in object literals and classes (grouped-accessor-pairs)</source>
          <target state="translated">要求在对象字面和类中使用分组访问器对(grouped-accessor-pairs)</target>
        </trans-unit>
        <trans-unit id="be3fbbc21cd8535fe4650e22a2253265af6b017c" translate="yes" xml:space="preserve">
          <source>Require or disallow Yoda Conditions (yoda)</source>
          <target state="translated">要求或不允许Yoda条件(Yoda)</target>
        </trans-unit>
        <trans-unit id="3150215ce32a56ca1cf1f6ef2c30ca41b3749bd6" translate="yes" xml:space="preserve">
          <source>Require or disallow a space before function parenthesis (space-before-function-paren)</source>
          <target state="translated">要求或不允许在函数括号前留有空格(空格前函数括号)。</target>
        </trans-unit>
        <trans-unit id="5b30f13883fdda696fb76a56e4bd8aac05c52c33" translate="yes" xml:space="preserve">
          <source>Require or disallow named &lt;code&gt;function&lt;/code&gt; expressions (func-names)</source>
          <target state="translated">要求或禁止命名 &lt;code&gt;function&lt;/code&gt; 表达式（函数名称）</target>
        </trans-unit>
        <trans-unit id="6923954808ca2c5768d91fe26208484172008328" translate="yes" xml:space="preserve">
          <source>Require or disallow padding lines between statements (padding-line-between-statements)</source>
          <target state="translated">要求或不允许在语句之间使用填充线(padding-line-between-statements)。</target>
        </trans-unit>
        <trans-unit id="64d620bf8940dde332be8b599fc3f3b67a15d6b1" translate="yes" xml:space="preserve">
          <source>Require or disallow spaces before/after unary operators (space-unary-ops)</source>
          <target state="translated">在单数运算符前/后要求或禁止空格(空格单数运算符)。</target>
        </trans-unit>
        <trans-unit id="2e4ed016a312c06b04085359a4f3ce7e5514db8a" translate="yes" xml:space="preserve">
          <source>Require or disallow spacing between template tags and their literals (template-tag-spacing)</source>
          <target state="translated">要求或不允许模板标签与其字面之间的间距(模板-标签-间距)。</target>
        </trans-unit>
        <trans-unit id="9a6d4f3d8ac0a43fa465b1bfeb17312af22eec9d" translate="yes" xml:space="preserve">
          <source>Require or disallow the Unicode Byte Order Mark (BOM) (unicode-bom)</source>
          <target state="translated">要求或不允许使用Unicode字节顺序标记(BOM)(unicode-bom)。</target>
        </trans-unit>
        <trans-unit id="5414253a02d05bc00109d790a3a30b0adf3a9258" translate="yes" xml:space="preserve">
          <source>Require parens in arrow function arguments (arrow-parens)</source>
          <target state="translated">在箭头函数参数中要求使用保护符(arrow-parens)。</target>
        </trans-unit>
        <trans-unit id="6c6d01b7d910c82fc9e7e87b504603648dc910c7" translate="yes" xml:space="preserve">
          <source>Require regex literals to escape division operators.</source>
          <target state="translated">要求用 regex 字符来转义除法运算符。</target>
        </trans-unit>
        <trans-unit id="c6c78079204bca77a98f474edfbb061ab779251e" translate="yes" xml:space="preserve">
          <source>Require space before/after arrow function's arrow (arrow-spacing)</source>
          <target state="translated">箭头函数的箭头前/后需要空格(箭头间距)</target>
        </trans-unit>
        <trans-unit id="3d1e419b6e19b50c4107c427e372b159f6aa3f96" translate="yes" xml:space="preserve">
          <source>Require spaces following &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, and &lt;code&gt;case&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;return&lt;/code&gt; ， &lt;code&gt;throw&lt;/code&gt; 和 &lt;code&gt;case&lt;/code&gt; 之后需要空格。</target>
        </trans-unit>
        <trans-unit id="2aa899302df0644585abff63972bace73e121583" translate="yes" xml:space="preserve">
          <source>Require spaces following unary word operators.</source>
          <target state="translated">要求在单数词运算符后有空格。</target>
        </trans-unit>
        <trans-unit id="72a6e138634f7c51472518cc96850ccfd3e29b3f" translate="yes" xml:space="preserve">
          <source>Require using arrow functions for callbacks (prefer-arrow-callback)</source>
          <target state="translated">要求使用箭头函数进行回调(prefer-arrow-callback)。</target>
        </trans-unit>
        <trans-unit id="1d4909a86e26429441b20437aa655cdf89900831" translate="yes" xml:space="preserve">
          <source>Requires or disallows a whitespace (space or tab) beginning a comment (spaced-comment)</source>
          <target state="translated">要求或不允许在注释的开头使用空格(空格或制表符)(间隔注释)。</target>
        </trans-unit>
        <trans-unit id="76af06a553a0453a9044a446da55d272ab01d8fe" translate="yes" xml:space="preserve">
          <source>Requires that every file have a top-level &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; statement.</source>
          <target state="translated">要求每个文件都具有顶级的 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 语句。</target>
        </trans-unit>
        <trans-unit id="e58d216d4c343337c98dbf82f961ebd1b1a6fd84" translate="yes" xml:space="preserve">
          <source>Requiring Configuration to Run</source>
          <target state="translated">需要配置才能运行</target>
        </trans-unit>
        <trans-unit id="a190ae07585f55210601db70caeb73d10cf5a08d" translate="yes" xml:space="preserve">
          <source>Reserved words as property names</source>
          <target state="translated">保留字作为属性名称</target>
        </trans-unit>
        <trans-unit id="87df60de337fb58864343e396696d74611e0d403" translate="yes" xml:space="preserve">
          <source>Resources</source>
          <target state="translated">Resources</target>
        </trans-unit>
        <trans-unit id="787f008daf743bf86dcef2a2f647bc232a0260e8" translate="yes" xml:space="preserve">
          <source>Respond to comments left on the pull request from team members. Remember, we want to help you land your code, so please be receptive to our feedback.</source>
          <target state="translated">回复团队成员在拉取请求上留下的评论。记住,我们希望帮助你落地代码,所以请接受我们的反馈。</target>
        </trans-unit>
        <trans-unit id="5e8db4f15f13d726195782f734cfad7c22163767" translate="yes" xml:space="preserve">
          <source>Restrict what can be thrown as an exception (no-throw-literal)</source>
          <target state="translated">限制可以作为异常抛出的内容(无抛出字面意思)</target>
        </trans-unit>
        <trans-unit id="d0dfe217a11c007cdb80ffac3d869a5f9a91d024" translate="yes" xml:space="preserve">
          <source>Restricting syntax with selectors</source>
          <target state="translated">用选择器限制语法</target>
        </trans-unit>
        <trans-unit id="0cde1762953d450159956d185082cff8d76cd6b3" translate="yes" xml:space="preserve">
          <source>Resulting actual config: &lt;code&gt;&quot;eqeqeq&quot;: [&quot;warn&quot;, &quot;allow-null&quot;]&lt;/code&gt;</source>
          <target state="translated">产生的实际配置： &lt;code&gt;&quot;eqeqeq&quot;: [&quot;warn&quot;, &quot;allow-null&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="637d7bf830d8b7c31d75616f1f6184a3ad69451f" translate="yes" xml:space="preserve">
          <source>Resulting actual config: &lt;code&gt;&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]&lt;/code&gt;</source>
          <target state="translated">产生的实际配置： &lt;code&gt;&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b969c8dc0ad380e6594b1beedc5370d8f8a5d756" translate="yes" xml:space="preserve">
          <source>Retrieves a formatter, which you can then use to format a report object. The argument is either the name of a built-in formatter:</source>
          <target state="translated">检索一个格式化器,然后你可以用它来格式化报表对象。参数是内置格式化器的名称。</target>
        </trans-unit>
        <trans-unit id="4ed1a51e3c7c6cf43a3633b3e58f69e74b9dd263" translate="yes" xml:space="preserve">
          <source>Return Value</source>
          <target state="translated">返回值</target>
        </trans-unit>
        <trans-unit id="426dd4f5734405b3041af3bb0cf97c4f743e8aa6" translate="yes" xml:space="preserve">
          <source>Returning the correct exit code</source>
          <target state="translated">返回正确的退出代码</target>
        </trans-unit>
        <trans-unit id="a8af8ce64c5e78a1bab5c7411bdc15d47c7d3cee" translate="yes" xml:space="preserve">
          <source>Rollup: &lt;a href=&quot;https://www.npmjs.com/package/rollup-plugin-eslint&quot;&gt;rollup-plugin-eslint&lt;/a&gt;</source>
          <target state="translated">汇总：&lt;a href=&quot;https://www.npmjs.com/package/rollup-plugin-eslint&quot;&gt;rollup-plugin-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ee3c4356687403593882e1c450ecd5fa91ef9176" translate="yes" xml:space="preserve">
          <source>Rule Acceptance Criteria</source>
          <target state="translated">规则接受标准</target>
        </trans-unit>
        <trans-unit id="4fea3171fe249e115dde51b612942d51ff597112" translate="yes" xml:space="preserve">
          <source>Rule Basics</source>
          <target state="translated">规则基础</target>
        </trans-unit>
        <trans-unit id="58f4d8dcadb0bda6b1de9bc0a5d352f60cf07234" translate="yes" xml:space="preserve">
          <source>Rule Changes</source>
          <target state="translated">规则变更</target>
        </trans-unit>
        <trans-unit id="7fd1351f99409305b16b0a09a4498bd284b5d93e" translate="yes" xml:space="preserve">
          <source>Rule Deprecation</source>
          <target state="translated">弃用规则</target>
        </trans-unit>
        <trans-unit id="2f74fe952a58aefbda52fe4dd186b37f5595f912" translate="yes" xml:space="preserve">
          <source>Rule Details</source>
          <target state="translated">规则细节</target>
        </trans-unit>
        <trans-unit id="a6cbaaefbab1ddfd94efe95cec74c44f36be693f" translate="yes" xml:space="preserve">
          <source>Rule Naming Conventions</source>
          <target state="translated">规则命名公约</target>
        </trans-unit>
        <trans-unit id="3183951c7dd470388a3c3557d1a5436eae05d87f" translate="yes" xml:space="preserve">
          <source>Rule Schema Changes</source>
          <target state="translated">规则模式变化</target>
        </trans-unit>
        <trans-unit id="793bcb95f3d538bb319a28344fffc4123fe887c4" translate="yes" xml:space="preserve">
          <source>Rule Unit Tests</source>
          <target state="translated">规则单元测试</target>
        </trans-unit>
        <trans-unit id="ebc497fdd0042b59fbb043aa6dad9e62ad6aaedd" translate="yes" xml:space="preserve">
          <source>Rule configuration are validated more strictly</source>
          <target state="translated">规则配置的验证更加严格</target>
        </trans-unit>
        <trans-unit id="b423a892d42c8b952873772e3d160731bd071f84" translate="yes" xml:space="preserve">
          <source>Rule source</source>
          <target state="translated">规则来源</target>
        </trans-unit>
        <trans-unit id="c79090f879452ce67b81c8904f848b8ac0346c07" translate="yes" xml:space="preserve">
          <source>Rule to disallow a duplicate case label (no-duplicate-case)</source>
          <target state="translated">不允许使用重复的大小写标签的规则(no-duplicat-case)</target>
        </trans-unit>
        <trans-unit id="a6dc24b3b766471c01f26defe2df961bd51fa80c" translate="yes" xml:space="preserve">
          <source>RuleTester</source>
          <target state="translated">RuleTester</target>
        </trans-unit>
        <trans-unit id="bb11a8e3f8712e36e7cd9d1c615a4e3dbb03336a" translate="yes" xml:space="preserve">
          <source>Rules</source>
          <target state="translated">Rules</target>
        </trans-unit>
        <trans-unit id="8af516527308d5f596f472b28e50707a3c2ec990" translate="yes" xml:space="preserve">
          <source>Rules are now required to provide messages along with reports</source>
          <target state="translated">现在要求规则在提供报告的同时提供信息。</target>
        </trans-unit>
        <trans-unit id="c130e2f455ef978067c1ba9937f4a4b55ad9b4d6" translate="yes" xml:space="preserve">
          <source>Rules in ESLint are grouped by category to help you understand their purpose.</source>
          <target state="translated">ESLint中的规则是按类别分组的,以帮助您了解它们的目的。</target>
        </trans-unit>
        <trans-unit id="a375a11830a6fc15a9c077874fa2553a5e211c2a" translate="yes" xml:space="preserve">
          <source>Rules in Plugins</source>
          <target state="translated">插件中的规则</target>
        </trans-unit>
        <trans-unit id="6012963a27096009406f4a3e3efbeb71a5dd3e0c" translate="yes" xml:space="preserve">
          <source>Rules like &lt;a href=&quot;../rules/max-len&quot;&gt;&lt;code&gt;max-len&lt;/code&gt;&lt;/a&gt; accept a string option which is interpreted as a regular expression. In ESLint v6.0.0, these regular expressions are interpreted with the &lt;a href=&quot;https://mathiasbynens.be/notes/es6-unicode-regex&quot;&gt;unicode flag&lt;/a&gt;, which should exhibit more reasonable behavior when matching characters like astral symbols. Unicode regexes also validate escape sequences more strictly than non-unicode regexes.</source>
          <target state="translated">像&lt;a href=&quot;../rules/max-len&quot;&gt; &lt;code&gt;max-len&lt;/code&gt; &lt;/a&gt;这样的规则接受一个字符串选项，该选项被解释为正则表达式。在ESLint v6.0.0中，这些正则表达式使用&lt;a href=&quot;https://mathiasbynens.be/notes/es6-unicode-regex&quot;&gt;unicode标志&lt;/a&gt;解释，当匹配诸如星体符号之类的字符时，unicode标志应表现出更合理的行为。Unicode正则表达式还比非Unicode正则表达式更严格地验证转义序列。</target>
        </trans-unit>
        <trans-unit id="ce446a008739b0122bfbf913623e68d18926810d" translate="yes" xml:space="preserve">
          <source>Rules may export a &lt;code&gt;schema&lt;/code&gt; property, which is a &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON schema&lt;/a&gt; format description of a rule's options which will be used by ESLint to validate configuration options and prevent invalid or unexpected inputs before they are passed to the rule in &lt;code&gt;context.options&lt;/code&gt;.</source>
          <target state="translated">规则可以导出 &lt;code&gt;schema&lt;/code&gt; 属性，该属性是规则选项的&lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON模式&lt;/a&gt;格式描述，ESLint将使用该属性来验证配置选项并防止无效或意外的输入在传递给 &lt;code&gt;context.options&lt;/code&gt; 中的规则之前。</target>
        </trans-unit>
        <trans-unit id="93c2759fe03a902a67d153b036b0d4f1c07d1f3c" translate="yes" xml:space="preserve">
          <source>Rules will be deprecated as needed, and marked as such in all documentation.</source>
          <target state="translated">规则将根据需要被废止,并在所有文档中标明。</target>
        </trans-unit>
        <trans-unit id="e93f0f77000adc61fb508077599d138239b58cd6" translate="yes" xml:space="preserve">
          <source>Rules will never be removed from ESLint.</source>
          <target state="translated">规则永远不会从ESLint中删除。</target>
        </trans-unit>
        <trans-unit id="3d27ff71d65030f0e00381932a052d2a17b92776" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;../user-guide/command-line-interface&quot;&gt;command line interface&lt;/a&gt; using the &lt;code&gt;--rulesdir&lt;/code&gt; option to specify the location of your runtime rules.</source>
          <target state="translated">使用 &lt;code&gt;--rulesdir&lt;/code&gt; 选项运行&lt;a href=&quot;../user-guide/command-line-interface&quot;&gt;命令行界面&lt;/a&gt;，以指定运行时规则的位置。</target>
        </trans-unit>
        <trans-unit id="95227c2b581e8476ae8110dc2d62c41753abc92b" translate="yes" xml:space="preserve">
          <source>Run the tests</source>
          <target state="translated">运行测试</target>
        </trans-unit>
        <trans-unit id="82584eccefdf0e64733530fb7b37a5c4e7baadbe" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;eslint&lt;/code&gt; with the previous custom formatter,</source>
          <target state="translated">使用先前的自定义格式化程序运行 &lt;code&gt;eslint&lt;/code&gt; ，</target>
        </trans-unit>
        <trans-unit id="cc4ca7c771cd08213f4b8be7b584910f7669bad1" translate="yes" xml:space="preserve">
          <source>Running Individual Tests</source>
          <target state="translated">运行单个测试</target>
        </trans-unit>
        <trans-unit id="441a534445ce234b3c86dbe18e6044480f3bedfd" translate="yes" xml:space="preserve">
          <source>Running individual tests is useful when you're working on a specific bug and iterating on the solution. You should be sure to run &lt;code&gt;npm test&lt;/code&gt; before submitting a pull request.</source>
          <target state="translated">当您处理一个特定的错误并迭代解决方案时，运行单个测试非常有用。在提交拉取请求之前，您应该确保运行 &lt;code&gt;npm test&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d976eb8e273ca6d6ba9fdfa6ef367a56a3b6ffd" translate="yes" xml:space="preserve">
          <source>Running the tests is the best way to ensure you have correctly set up your development environment. Make sure you're in the &lt;code&gt;eslint&lt;/code&gt; directory and run:</source>
          <target state="translated">运行测试是确保正确设置开发环境的最佳方法。确保您在 &lt;code&gt;eslint&lt;/code&gt; 目录中并运行：</target>
        </trans-unit>
        <trans-unit id="d106aea3ee94c9ea07b2d08364473f5561ff6c88" translate="yes" xml:space="preserve">
          <source>Runs a subset of tests in PhantomJS</source>
          <target state="translated">在PhantomJS中运行测试的子集。</target>
        </trans-unit>
        <trans-unit id="3a49577a7bd2d4bd0341a073ea8ac28454947600" translate="yes" xml:space="preserve">
          <source>Runs all tests on Node.js</source>
          <target state="translated">在Node.js上运行所有测试。</target>
        </trans-unit>
        <trans-unit id="2242ca7138a532d29176cff8e842e87d6315b52e" translate="yes" xml:space="preserve">
          <source>Runs just the JavaScript and JSON linting on the repository</source>
          <target state="translated">在版本库上只运行JavaScript和JSON linting。</target>
        </trans-unit>
        <trans-unit id="16d64887294214d8ed081b14945edfe9e11fdda5" translate="yes" xml:space="preserve">
          <source>Runtime Rules</source>
          <target state="translated">运行时规则</target>
        </trans-unit>
        <trans-unit id="735c74977973d2da5bffd227fd5f002279654583" translate="yes" xml:space="preserve">
          <source>Runtime rules are written in the same format as all other rules. Create your rule as you would any other and then follow these steps:</source>
          <target state="translated">运行时规则的编写格式与所有其他规则相同。像创建其他规则一样创建规则,然后按照这些步骤进行。</target>
        </trans-unit>
        <trans-unit id="d4a37f09fbd0b4d14017c11606211cf2ba713d3b" translate="yes" xml:space="preserve">
          <source>Sails.js: &lt;a href=&quot;https://www.npmjs.com/package/sails-hook-lint&quot;&gt;sails-hook-lint&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/sails-eslint&quot;&gt;sails-eslint&lt;/a&gt;</source>
          <target state="translated">Sails.js：sails &lt;a href=&quot;https://www.npmjs.com/package/sails-hook-lint&quot;&gt;-hook-lint&lt;/a&gt;，&lt;a href=&quot;https://www.npmjs.com/package/sails-eslint&quot;&gt;sails-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="09d7f145b9b7e1d0c79daf58a80e9abbdc849945" translate="yes" xml:space="preserve">
          <source>Same reason as the point above: You shouldn't configure terms that are used very often (e.g. central parts of the native language used in your comments).</source>
          <target state="translated">和上面一点原因一样。你不应该配置经常使用的术语(如评论中使用的母语中心部分)。</target>
        </trans-unit>
        <trans-unit id="7c671e8c47943a8c325952dde1f0ea58ab681314" translate="yes" xml:space="preserve">
          <source>Scope Analysis Changes</source>
          <target state="translated">范围分析变化</target>
        </trans-unit>
        <trans-unit id="36ab5b6d2a8bb7e55f7b1d6b39e4e5ce11688937" translate="yes" xml:space="preserve">
          <source>Scope Type</source>
          <target state="translated">范围类型</target>
        </trans-unit>
        <trans-unit id="1ababc4ffaa5b7bdf69961b71c11caa9ddda5aef" translate="yes" xml:space="preserve">
          <source>Scope interface</source>
          <target state="translated">范围接口</target>
        </trans-unit>
        <trans-unit id="0a313e66995747d51d210db31cc5a359aecf5923" translate="yes" xml:space="preserve">
          <source>ScopeManager</source>
          <target state="translated">ScopeManager</target>
        </trans-unit>
        <trans-unit id="f83f415575654aec918367fa7b4efd53484afeb7" translate="yes" xml:space="preserve">
          <source>ScopeManager interface</source>
          <target state="translated">范围管理器接口</target>
        </trans-unit>
        <trans-unit id="9f61e165e4f63a9799a4482983a897b3c392fb00" translate="yes" xml:space="preserve">
          <source>Second option</source>
          <target state="translated">第二种选择</target>
        </trans-unit>
        <trans-unit id="37b1dc04082b220b42be965eea192bef3c547ba5" translate="yes" xml:space="preserve">
          <source>Second, it advances to &lt;code&gt;ForStatement.body&lt;/code&gt;. Of course the &lt;code&gt;body&lt;/code&gt; segment is preceded by the &lt;code&gt;test&lt;/code&gt; segment. It keeps the &lt;code&gt;update&lt;/code&gt; segment hovering.</source>
          <target state="translated">其次，它前进到 &lt;code&gt;ForStatement.body&lt;/code&gt; 。当然， &lt;code&gt;body&lt;/code&gt; 部分之前是 &lt;code&gt;test&lt;/code&gt; 部分。它使 &lt;code&gt;update&lt;/code&gt; 段保持悬停。</target>
        </trans-unit>
        <trans-unit id="8323971eba037489129f23f49f88dde8358fa8ad" translate="yes" xml:space="preserve">
          <source>Second, it creates the looping path. At this time, the next segment has existed already, so the &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; event is not fired. It fires &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; instead.</source>
          <target state="translated">其次，它创建了循环路径。目前，下一个段已经存在，因此不会触发 &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; 事件。它会触发 &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b4acc9dc16ce636a836361190495f1196e2d6f8" translate="yes" xml:space="preserve">
          <source>Section 1: Get the &lt;a href=&quot;source-code&quot;&gt;Source Code&lt;/a&gt;</source>
          <target state="translated">第1节：获取&lt;a href=&quot;source-code&quot;&gt;源代码&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3b1637242cb5f4b3e36d4492cd36c48e74446f57" translate="yes" xml:space="preserve">
          <source>Section 2: Set up a &lt;a href=&quot;development-environment&quot;&gt;Development Environment&lt;/a&gt;</source>
          <target state="translated">第2节：建立&lt;a href=&quot;development-environment&quot;&gt;开发环境&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="78f0e7c8b704185ecfe739a5f8c33c68a075ef9e" translate="yes" xml:space="preserve">
          <source>Section 3: Run the &lt;a href=&quot;unit-tests&quot;&gt;Unit Tests&lt;/a&gt;</source>
          <target state="translated">第3节：运行&lt;a href=&quot;unit-tests&quot;&gt;单元测试&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d3b79d5d78e14a8c4b0ba5bc3059259a23cad08b" translate="yes" xml:space="preserve">
          <source>Section 4: &lt;a href=&quot;working-with-rules&quot;&gt;Working with Rules&lt;/a&gt;</source>
          <target state="translated">第4节：&lt;a href=&quot;working-with-rules&quot;&gt;使用规则&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="03c3cb69551b14b8df9cb910afaab136f027242f" translate="yes" xml:space="preserve">
          <source>Section 5: &lt;a href=&quot;working-with-plugins&quot;&gt;Working with Plugins&lt;/a&gt;</source>
          <target state="translated">第5节：&lt;a href=&quot;working-with-plugins&quot;&gt;使用插件&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7b994bfa5badb9f811f171491ad2085ca2163162" translate="yes" xml:space="preserve">
          <source>Section 6: &lt;a href=&quot;working-with-custom-parsers&quot;&gt;Working with Custom Parsers&lt;/a&gt;</source>
          <target state="translated">第6节：&lt;a href=&quot;working-with-custom-parsers&quot;&gt;使用自定义解析器&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7cef9b81d7487df40316eccfb3ac59bb6e5049a8" translate="yes" xml:space="preserve">
          <source>Section 7: &lt;a href=&quot;nodejs-api&quot;&gt;Node.js API&lt;/a&gt;</source>
          <target state="translated">第7节：&lt;a href=&quot;nodejs-api&quot;&gt;Node.js API&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b89f1494eec98976470a195404c75143a7d87a8b" translate="yes" xml:space="preserve">
          <source>Section 8: &lt;a href=&quot;contributing/index&quot;&gt;Contributing&lt;/a&gt;</source>
          <target state="translated">第8节：&lt;a href=&quot;contributing/index&quot;&gt;贡献&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a36f58a29f1275ec5d968141f07cf060b746bc67" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../user-guide/configuring#specifying-processor&quot;&gt;Specifying Processor&lt;/a&gt; for details.</source>
          <target state="translated">有关详细信息，请参见&lt;a href=&quot;../user-guide/configuring#specifying-processor&quot;&gt;指定处理器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1b6969594f8da02157a002f4a80fcf1d497e64bb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;no-dupe-class-members&quot;&gt;no-dupe-class-members&lt;/a&gt; if you also want to disallow duplicate names in class definitions.</source>
          <target state="translated">如果您还想在类定义中禁止重复的名称，请参见&lt;a href=&quot;no-dupe-class-members&quot;&gt;no-dupe-class-members&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b75b5956411bc41a59d15e137400fe418c3a0502" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;no-dupe-keys&quot;&gt;no-dupe-keys&lt;/a&gt; if you also want to disallow duplicate keys in object literals.</source>
          <target state="translated">如果您还想禁止对象文字中的重复键，请参见&lt;a href=&quot;no-dupe-keys&quot;&gt;no-dupe-keys&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="61a08f389a25b863d0fca5015a2885ff6fd5c8cd" translate="yes" xml:space="preserve">
          <source>See Also:</source>
          <target state="translated">另见:</target>
        </trans-unit>
        <trans-unit id="2601bab23f6d6b7f8c2a0b4d06f87b74ca15b5fc" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/constructor-super.js&quot;&gt;constructor-super&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-this-before-super.js&quot;&gt;no-this-before-super&lt;/a&gt;</source>
          <target state="translated">另请参见：&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/constructor-super.js&quot;&gt;Constructor-super&lt;/a&gt;，&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-this-before-super.js&quot;&gt;no-this-before-super&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1f2f2da9007ba35b167fb5fbeeeef552aaaf5204" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-unreachable.js&quot;&gt;no-unreachable&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-fallthrough.js&quot;&gt;no-fallthrough&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/consistent-return.js&quot;&gt;consistent-return&lt;/a&gt;</source>
          <target state="translated">另请参见：&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-unreachable.js&quot;&gt;不可达&lt;/a&gt;，&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-fallthrough.js&quot;&gt;不中断&lt;/a&gt;，&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/consistent-return.js&quot;&gt;一致返回&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5475994619c5659ff506420bcda0f2341a59e086" translate="yes" xml:space="preserve">
          <source>See all &lt;a href=&quot;https://www.npmjs.com/search?q=eslint-formatter&quot;&gt;formatters on npm&lt;/a&gt;;</source>
          <target state="translated">查看&lt;a href=&quot;https://www.npmjs.com/search?q=eslint-formatter&quot;&gt;npm上的&lt;/a&gt;所有格式化程序；</target>
        </trans-unit>
        <trans-unit id="d711728163616d324e06d612e575de7b428f280d" translate="yes" xml:space="preserve">
          <source>See also: the &lt;a href=&quot;https://github.com/eslint/eslint/commit/e3e9dbd9876daf4bdeb4e15f8a76a9d5e6e03e39#diff-b01a5cfd9361ca9280a460fd6bb8edbbL1&quot;&gt;full diff&lt;/a&gt; where the defaults were changed.</source>
          <target state="translated">另请参阅：更改默认值的&lt;a href=&quot;https://github.com/eslint/eslint/commit/e3e9dbd9876daf4bdeb4e15f8a76a9d5e6e03e39#diff-b01a5cfd9361ca9280a460fd6bb8edbbL1&quot;&gt;完整差异&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4df28d2cb8a74e0553a8b501f660f7fd482671ed" translate="yes" xml:space="preserve">
          <source>Selectors</source>
          <target state="translated">Selectors</target>
        </trans-unit>
        <trans-unit id="ba1dd4d24595765d36380d449f2f63da8783485e" translate="yes" xml:space="preserve">
          <source>Selectors are not limited to matching against single node types. For example, the selector &lt;code&gt;VariableDeclarator &amp;gt; Identifier&lt;/code&gt; will match all &lt;code&gt;Identifier&lt;/code&gt; nodes that have a &lt;code&gt;VariableDeclarator&lt;/code&gt; as a direct parent. In the program above, this will match the node for &lt;code&gt;foo&lt;/code&gt;, but not the nodes for &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt;.</source>
          <target state="translated">选择器不限于与单个节点类型匹配。例如，选择器 &lt;code&gt;VariableDeclarator &amp;gt; Identifier&lt;/code&gt; 将匹配所有具有 &lt;code&gt;VariableDeclarator&lt;/code&gt; 作为直接父级的 &lt;code&gt;Identifier&lt;/code&gt; 节点。在上面的程序中，它将匹配 &lt;code&gt;foo&lt;/code&gt; 的节点，但不匹配 &lt;code&gt;bar&lt;/code&gt; 和 &lt;code&gt;baz&lt;/code&gt; 的节点。</target>
        </trans-unit>
        <trans-unit id="52a3f1908b1bbd91b0b9259682b062315f687ab1" translate="yes" xml:space="preserve">
          <source>Self assignments have no effect, so probably those are an error due to incomplete refactoring. Those indicate that what you should do is still remaining.</source>
          <target state="translated">自身的作业没有效果,所以可能那些是重构不完全导致的错误。这些说明你该做的事情还没做完。</target>
        </trans-unit>
        <trans-unit id="f7959cd9f43abd1103f282c5754afbee5224b16f" translate="yes" xml:space="preserve">
          <source>Semicolons are usually optional in JavaScript, because of automatic semicolon insertion (ASI). You can require or disallow semicolons with the &lt;a href=&quot;semi&quot;&gt;semi&lt;/a&gt; rule.</source>
          <target state="translated">由于自动分号插入（ASI），分号在JavaScript中通常是可选的。您可以要求或与不允许分号&lt;a href=&quot;semi&quot;&gt;半&lt;/a&gt;规则。</target>
        </trans-unit>
        <trans-unit id="7ef827951df1f89ec5fb16c5c417655c418fa285" translate="yes" xml:space="preserve">
          <source>Sequence expressions (those using a comma, such as &lt;code&gt;a = 1, b = 2&lt;/code&gt;) are always considered unused unless their return value is assigned or used in a condition evaluation, or a function call is made with the sequence expression value.</source>
          <target state="translated">序列表达式（使用逗号的表达式，例如 &lt;code&gt;a = 1, b = 2&lt;/code&gt; ）始终被认为是未使用的，除非为其返回值分配或用于条件评估中，或者使用序列表达式值进行函数调用。</target>
        </trans-unit>
        <trans-unit id="a171fcac3dd876a9a68a177995635a2d7e821db8" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;capIsConstructor&quot;&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; if you want those functions to be treated as 'regular' functions.</source>
          <target state="translated">如果要将那些函数视为&amp;ldquo;常规&amp;rdquo;函数，请将 &lt;code&gt;&quot;capIsConstructor&quot;&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0180f010e4da395331d6d54df6959189e9dae8b" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;enforceForIndexOf&quot;&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if you want this rule to report &lt;code&gt;indexOf(NaN)&lt;/code&gt; and &lt;code&gt;lastIndexOf(NaN)&lt;/code&gt; method calls.</source>
          <target state="translated">如果希望此规则报告 &lt;code&gt;indexOf(NaN)&lt;/code&gt; 和 &lt;code&gt;lastIndexOf(NaN)&lt;/code&gt; 方法调用，则将 &lt;code&gt;&quot;enforceForIndexOf&quot;&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="618ceba957897722ae596312a10c551288948191" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;enforceForSwitchCase&quot;&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if you want this rule to report &lt;code&gt;case NaN&lt;/code&gt; and &lt;code&gt;switch(NaN)&lt;/code&gt; in &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">如果希望此规则在 &lt;code&gt;switch&lt;/code&gt; 语句中报告 &lt;code&gt;case NaN&lt;/code&gt; 和 &lt;code&gt;switch(NaN)&lt;/code&gt; ，则将 &lt;code&gt;&quot;enforceForSwitchCase&quot;&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa3491e34539a3ccbb31246fccfeafd612faa9f3" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;lexicalBindings&quot;&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if you want this rule to check &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; declarations as well.</source>
          <target state="translated">如果您希望此规则也检查 &lt;code&gt;const&lt;/code&gt; ， &lt;code&gt;let&lt;/code&gt; 和 &lt;code&gt;class&lt;/code&gt; 声明，请将 &lt;code&gt;&quot;lexicalBindings&quot;&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="faf94416ab2a050dcb6bbfd98218d385084c3972" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;allowKeywords&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt; (default is &lt;code&gt;true&lt;/code&gt;) to follow ECMAScript version 3 compatible style, avoiding dot notation for reserved word properties.</source>
          <target state="translated">将 &lt;code&gt;allowKeywords&lt;/code&gt; 选项设置为 &lt;code&gt;false&lt;/code&gt; （默认为 &lt;code&gt;true&lt;/code&gt; ）以遵循ECMAScript版本3兼容样式，避免保留字属性使用点表示法。</target>
        </trans-unit>
        <trans-unit id="be2fe335d32f03aea39945e0531758a541f8d75d" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;allowPattern&lt;/code&gt; option to a regular expression string to allow bracket notation for property names that match a pattern (by default, no pattern is tested).</source>
          <target state="translated">将 &lt;code&gt;allowPattern&lt;/code&gt; 选项设置为正则表达式字符串，以允许使用括号符号表示与模式匹配的属性名称（默认情况下，不测试任何模式）。</target>
        </trans-unit>
        <trans-unit id="1c81c3037407b2aa16474a63ef04fe8a38928ef4" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;commentPattern&lt;/code&gt; option to a regular expression string to change the default &lt;code&gt;/^no default$/i&lt;/code&gt; comment test pattern</source>
          <target state="translated">将 &lt;code&gt;commentPattern&lt;/code&gt; 选项设置为正则表达式字符串以更改默认的 &lt;code&gt;/^no default$/i&lt;/code&gt; 注释测试模式</target>
        </trans-unit>
        <trans-unit id="0013f5c88955deac87e1686900438d34e9741c2d" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;commentPattern&lt;/code&gt; option to a regular expression string to change the test for intentional fallthrough comment</source>
          <target state="translated">将 &lt;code&gt;commentPattern&lt;/code&gt; 选项设置为正则表达式字符串，以更改针对故意掉线注释的测试</target>
        </trans-unit>
        <trans-unit id="68ce687ddf0f134fff7cf81f9dc938e6b3878d8a" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;int32Hint&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; (default is &lt;code&gt;false&lt;/code&gt;) to allow write &lt;code&gt;a|0&lt;/code&gt; without space.</source>
          <target state="translated">将 &lt;code&gt;int32Hint&lt;/code&gt; 选项设置为 &lt;code&gt;true&lt;/code&gt; （默认为 &lt;code&gt;false&lt;/code&gt; ）以允许写 &lt;code&gt;a|0&lt;/code&gt; 而没有空格。</target>
        </trans-unit>
        <trans-unit id="3134ee2112bdc78853bd1511d97b31e6159ccb88" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; by default. Setting this option to &lt;code&gt;false&lt;/code&gt; allows constant expressions in loops.</source>
          <target state="translated">默认情况下设置为 &lt;code&gt;true&lt;/code&gt; 。将此选项设置为 &lt;code&gt;false&lt;/code&gt; 允许循环中使用常量表达式。</target>
        </trans-unit>
        <trans-unit id="70eda033c7f0c498a86724919e7320f305b80b0d" translate="yes" xml:space="preserve">
          <source>Set up a &lt;a href=&quot;../development-environment&quot;&gt;development environment&lt;/a&gt;.</source>
          <target state="translated">搭建&lt;a href=&quot;../development-environment&quot;&gt;开发环境&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f8322127967adf862ac72c512b139ae1854bca05" translate="yes" xml:space="preserve">
          <source>Setters cannot return values.</source>
          <target state="translated">设置者不能返回值。</target>
        </trans-unit>
        <trans-unit id="c9c749d001ff268cbeb4ea4c24c216a86d9a6a4d" translate="yes" xml:space="preserve">
          <source>Setting parser options helps ESLint determine what is a parsing error. All language options are &lt;code&gt;false&lt;/code&gt; by default.</source>
          <target state="translated">设置解析器选项可帮助ESLint确定什么是解析错误。默认情况下，所有语言选项均为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="37c53c1b3fac94914ae01b6fca4c4e53991f792a" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;ignoreInlineComments&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; means that comments in the middle of code (with a token on the same line as the beginning of the comment, and another token on the same line as the end of the comment) will not be reported by this rule.</source>
          <target state="translated">将 &lt;code&gt;ignoreInlineComments&lt;/code&gt; 选项设置为 &lt;code&gt;true&lt;/code&gt; 意味着该规则将不会报告代码中间的注释（在注释的开头与注释在同一行，而在注释的末尾与在注释的同一行） 。</target>
        </trans-unit>
        <trans-unit id="7a21f615bd35450d045383608de1e8b616f708b6" translate="yes" xml:space="preserve">
          <source>Shadowing is the process by which a local variable shares the same name as a variable in its containing scope. For example:</source>
          <target state="translated">影子是指一个局部变量与它所包含的作用域中的变量共享同一名称的过程。例如:</target>
        </trans-unit>
        <trans-unit id="6bf3b29e45e3e5e600d18ebc1d069a9b49cb2211" translate="yes" xml:space="preserve">
          <source>Share Plugins</source>
          <target state="translated">分享插件</target>
        </trans-unit>
        <trans-unit id="d411f634d35296374dbb079a9b10699e721c60b8" translate="yes" xml:space="preserve">
          <source>Shareable Configs</source>
          <target state="translated">可共享配置</target>
        </trans-unit>
        <trans-unit id="f7728f13ff64a72cf6ff58838bc2cf984afc2062" translate="yes" xml:space="preserve">
          <source>Shareable configs are designed to work with the &lt;code&gt;extends&lt;/code&gt; feature of &lt;code&gt;.eslintrc&lt;/code&gt; files. Instead of using a file path for the value of &lt;code&gt;extends&lt;/code&gt;, use your module name. For example:</source>
          <target state="translated">可共享的配置旨在与 &lt;code&gt;.eslintrc&lt;/code&gt; 文件的 &lt;code&gt;extends&lt;/code&gt; 功能一起使用。不用 &lt;code&gt;extends&lt;/code&gt; 名的值使用文件路径，而使用模块名。例如：</target>
        </trans-unit>
        <trans-unit id="ac98661439154e24e66154b8b56ea65970febcd8" translate="yes" xml:space="preserve">
          <source>Shareable configs are simply npm packages that export a configuration object. To start, &lt;a href=&quot;https://docs.npmjs.com/getting-started/creating-node-modules&quot;&gt;create a Node.js module&lt;/a&gt; like you normally would. Make sure the module name begins with &lt;code&gt;eslint-config-&lt;/code&gt;, such as &lt;code&gt;eslint-config-myconfig&lt;/code&gt;.</source>
          <target state="translated">可共享的配置只是导出配置对象的npm软件包。首先，像往常一样&lt;a href=&quot;https://docs.npmjs.com/getting-started/creating-node-modules&quot;&gt;创建一个Node.js模块&lt;/a&gt;。确保模块名称以 &lt;code&gt;eslint-config-&lt;/code&gt; 开头，例如 &lt;code&gt;eslint-config-myconfig&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5de27ab2273537b3d6d14a587e6661a643b307d7" translate="yes" xml:space="preserve">
          <source>Sharing Multiple Configs</source>
          <target state="translated">共享多个配置</target>
        </trans-unit>
        <trans-unit id="8fc88f1b91b2fde5e1092771afaef36f9a2e347a" translate="yes" xml:space="preserve">
          <source>Shebangs are now returned from comment APIs</source>
          <target state="translated">现在,评论API会返回Shebangs。</target>
        </trans-unit>
        <trans-unit id="7017708c1c06a3f1e90941c34316e9d4607c7d9c" translate="yes" xml:space="preserve">
          <source>Shebangs are represented by tokens of type &lt;code&gt;&quot;Shebang&quot;&lt;/code&gt;. They are treated as comments and can be accessed by the methods outlined above.</source>
          <target state="translated">Shebangs由类型为 &lt;code&gt;&quot;Shebang&quot;&lt;/code&gt; 的标记表示。它们被视为注释，可以通过上面概述的方法进行访问。</target>
        </trans-unit>
        <trans-unit id="23210f846566656bab3b173307947416d7f3ca0b" translate="yes" xml:space="preserve">
          <source>Sign our &lt;a href=&quot;https://cla.js.foundation/eslint/eslint&quot;&gt;Contributor License Agreement&lt;/a&gt;.</source>
          <target state="translated">签署我们的&lt;a href=&quot;https://cla.js.foundation/eslint/eslint&quot;&gt;贡献者许可协议&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2be01717d65543f816e780251a90121cfccc7576" translate="yes" xml:space="preserve">
          <source>Signing the CLA</source>
          <target state="translated">签署《CLA》</target>
        </trans-unit>
        <trans-unit id="0ec28340f6b30cc1ce90c43020055c994f7d5efb" translate="yes" xml:space="preserve">
          <source>Similar to the valid cases, you can also specify &lt;code&gt;options&lt;/code&gt; to be passed to the rule:</source>
          <target state="translated">与有效情况类似，您还可以指定要传递给规则的 &lt;code&gt;options&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="83f59937d173df040577971290f0e1cacd671a9c" translate="yes" xml:space="preserve">
          <source>Simple Statements</source>
          <target state="translated">简单声明</target>
        </trans-unit>
        <trans-unit id="24da9670085c68ec6aa7a55a98200997a7091b66" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;context.options&lt;/code&gt; is just an array, you can use it to determine how many options have been passed as well as retrieving the actual options themselves. Keep in mind that the error level is not part of &lt;code&gt;context.options&lt;/code&gt;, as the error level cannot be known or modified from inside a rule.</source>
          <target state="translated">由于 &lt;code&gt;context.options&lt;/code&gt; 只是一个数组，因此您可以使用它来确定传递了多少个选项以及检索实际的选项本身。请记住，错误级别不是 &lt;code&gt;context.options&lt;/code&gt; 的一部分，因为不能从规则内部知道或修改错误级别。</target>
        </trans-unit>
        <trans-unit id="3dec31ada8554ba1a6a6debc16cb59773af96567" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;index.js&lt;/code&gt; is just JavaScript, you can optionally read these settings from a file or generate them dynamically.</source>
          <target state="translated">由于 &lt;code&gt;index.js&lt;/code&gt; 只是JavaScript，因此您可以选择从文件中读取这些设置或动态生成它们。</target>
        </trans-unit>
        <trans-unit id="48bb4d613279d48459f21ef7090afc2c9bd1a5ba" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;require()&lt;/code&gt; does a synchronous load, it can cause performance problems when used in other locations.</source>
          <target state="translated">由于 &lt;code&gt;require()&lt;/code&gt; 会执行同步加载，因此在其他位置使用它可能会导致性能问题。</target>
        </trans-unit>
        <trans-unit id="c4072153bf32cdf523ee16f38e671d010ceab044" translate="yes" xml:space="preserve">
          <source>Since ESLint v5, &lt;code&gt;ecmaFeatures: { experimentalObjectRestSpread: true }&lt;/code&gt; has been equivalent to &lt;code&gt;ecmaVersion: 2018&lt;/code&gt;, and has also emitted a deprecation warning. In ESLint v6, the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; feature has been removed entirely and has no effect. If your config was relying on &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; to enable ES2018 parsing, you might start seeing parsing errors for recent syntax.</source>
          <target state="translated">从ESLint v5开始， &lt;code&gt;ecmaFeatures: { experimentalObjectRestSpread: true }&lt;/code&gt; 等效于 &lt;code&gt;ecmaVersion: 2018&lt;/code&gt; ，并且还发出了弃用警告。在ESLint v6中， &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; 功能已完全删除，并且无效。如果您的配置依赖 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; 来启用ES2018解析，则可能会开始看到针对最新语法的解析错误。</target>
        </trans-unit>
        <trans-unit id="d13ae6387ed366be6d8b805801c5cfb3cfb9ad21" translate="yes" xml:space="preserve">
          <source>Since all rules are run again after the initial round of fixes is applied, it's not necessary for a rule to check whether the code style of a fix will cause errors to be reported by another rule.</source>
          <target state="translated">由于所有的规则都是在应用了最初一轮的修复后再次运行,所以一条规则没有必要检查修复的代码风格是否会导致另一条规则报错。</target>
        </trans-unit>
        <trans-unit id="18fb1e3007320b11f3d7fd9d833d2b32f18f24bd" translate="yes" xml:space="preserve">
          <source>Since deprecated rules will never be removed, you can continue to use them indefinitely if they are working for you. However, keep in mind that deprecated rules will effectively be unmaintained.</source>
          <target state="translated">由于过时的规则永远不会被删除,如果它们对你有用,你可以继续无限期地使用它们。但是,请记住,被废弃的规则实际上将无法维护。</target>
        </trans-unit>
        <trans-unit id="0b45593d5f75200b1272e2e445af7ba7a6ca42cb" translate="yes" xml:space="preserve">
          <source>Since it's good to have a consistent code style, you should either always write padded blocks or never do it.</source>
          <target state="translated">既然好不容易有了一致的代码风格,你应该要么一直写垫块,要么永远不写。</target>
        </trans-unit>
        <trans-unit id="20e1b60daaa62f4d5667736af96bfb991b249553" translate="yes" xml:space="preserve">
          <source>Single-Line Comments</source>
          <target state="translated">单行评论</target>
        </trans-unit>
        <trans-unit id="56f06f07d3754fea01009119715bfd5517b24da3" translate="yes" xml:space="preserve">
          <source>Single-line comments should be used to document one line of code or a group of related lines of code. A single-line comment may be used in three ways:</source>
          <target state="translated">单行注释应该用来记录一行代码或一组相关的代码。单行注释可以用三种方式使用:</target>
        </trans-unit>
        <trans-unit id="d5725de7b903a8b05de6ad0470647699fe07e580" translate="yes" xml:space="preserve">
          <source>Small - Runs ESLint on KnockoutJS</source>
          <target state="translated">小-在KnockoutJS上运行ESLint。</target>
        </trans-unit>
        <trans-unit id="8a314d2e7d6188c8847f81a281bc5f5ae16c1c06" translate="yes" xml:space="preserve">
          <source>Smart Tabs</source>
          <target state="translated">智能标签</target>
        </trans-unit>
        <trans-unit id="f4e452300a2b0f07b41745625016cd897fb85bfe" translate="yes" xml:space="preserve">
          <source>So running &lt;code&gt;eslint&lt;/code&gt; with this custom formatter:</source>
          <target state="translated">因此，使用此自定义格式化程序运行 &lt;code&gt;eslint&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="65f774dd6ab39438c5f5df28e0b861b09e448b2d" translate="yes" xml:space="preserve">
          <source>So the second argument &lt;code&gt;ast&lt;/code&gt; also should be parsed from stripped text.</source>
          <target state="translated">因此，第二个参数 &lt;code&gt;ast&lt;/code&gt; 也应该从剥离的文本中解析。</target>
        </trans-unit>
        <trans-unit id="31a71f85cf4f793cf2a2e4f0097c3f2e95ba388a" translate="yes" xml:space="preserve">
          <source>Software Module size and file size</source>
          <target state="translated">软件模块大小和文件大小</target>
        </trans-unit>
        <trans-unit id="be134f7c50807cfb772cbc0bcb5081b5a12c45d8" translate="yes" xml:space="preserve">
          <source>Some code conventions require that all &lt;code&gt;switch&lt;/code&gt; statements have a &lt;code&gt;default&lt;/code&gt; case, even if the default case is empty, such as:</source>
          <target state="translated">某些代码约定要求所有 &lt;code&gt;switch&lt;/code&gt; 语句都具有 &lt;code&gt;default&lt;/code&gt; 大小写，即使默认大小写为空也是如此，例如：</target>
        </trans-unit>
        <trans-unit id="c8b6c94f005c780b423c192df3948fbf6b0bc032" translate="yes" xml:space="preserve">
          <source>Some code styles prohibit &lt;code&gt;void&lt;/code&gt; operator, marking it as non-obvious and hard to read.</source>
          <target state="translated">一些代码样式禁止 &lt;code&gt;void&lt;/code&gt; 运算符，将其标记为非显而易见的且难以阅读。</target>
        </trans-unit>
        <trans-unit id="5c5510f077de709ac2acb2de150530c1a834f95a" translate="yes" xml:space="preserve">
          <source>Some consider this to be a bad practice as it was an undocumented feature of JavaScript that was only formalized later.</source>
          <target state="translated">有些人认为这是一种不好的做法,因为这是JavaScript的一个未被记录的功能,只是后来才被正式化。</target>
        </trans-unit>
        <trans-unit id="5c13b92416e3720dc9efdcd598e2b13bb218f8f0" translate="yes" xml:space="preserve">
          <source>Some developers declare multiple var statements on the same line:</source>
          <target state="translated">有些开发人员在同一行声明多个var语句。</target>
        </trans-unit>
        <trans-unit id="88fde2b94b3e6e7f06f28f5ca48809414c632781" translate="yes" xml:space="preserve">
          <source>Some developers find that placing operators at the beginning of the line makes the code more readable.</source>
          <target state="translated">一些开发人员发现,将运算符放在行首,可以使代码更易读。</target>
        </trans-unit>
        <trans-unit id="da83d59be8d3c1fa61746c9667b3e144b3b46f21" translate="yes" xml:space="preserve">
          <source>Some developers prefer to have multiple blank lines removed, while others feel that it helps improve readability. Whitespace is useful for separating logical sections of code, but excess whitespace takes up more of the screen.</source>
          <target state="translated">有些开发者喜欢去掉多个空行,而另一些开发者则认为这有助于提高可读性。空格对于分隔代码的逻辑部分很有用,但过多的空格会占用更多的屏幕。</target>
        </trans-unit>
        <trans-unit id="319b3df86b7ba843599bf2b2dd9f3af029a3c402" translate="yes" xml:space="preserve">
          <source>Some exposed APIs are now ES2015 classes</source>
          <target state="translated">一些暴露的API现在是ES2015类</target>
        </trans-unit>
        <trans-unit id="70eec175aefc8c0ac35582826149396333b51a6a" translate="yes" xml:space="preserve">
          <source>Some global variables have been deprecated or removed for code running in Node.js, browsers, and Jest. (For example, browsers used to expose an &lt;code&gt;SVGAltGlyphElement&lt;/code&gt; global variable to JavaScript code, but this global has been removed from web standards and is no longer present in browsers.) As a result, we have removed these globals from the corresponding &lt;code&gt;eslint&lt;/code&gt; environments, so use of these globals will trigger an error when using rules such as &lt;a href=&quot;../rules/no-undef&quot;&gt;&lt;code&gt;no-undef&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">对于在Node.js，浏览器和Jest中运行的代码，某些全局变量已被弃用或删除。（例如，用于将 &lt;code&gt;SVGAltGlyphElement&lt;/code&gt; 全局变量公开给JavaScript代码的浏览器，但是该全局已从Web标准中删除，并且不再存在于浏览器中。）因此，我们从相应的 &lt;code&gt;eslint&lt;/code&gt; 环境中删除了这些全局，因此当使用诸如&lt;a href=&quot;../rules/no-undef&quot;&gt; &lt;code&gt;no-undef&lt;/code&gt; 之类的&lt;/a&gt;规则时，使用这些全局变量将触发错误。</target>
        </trans-unit>
        <trans-unit id="f062f278fdeadb9e299ef656855a628748c5bb85" translate="yes" xml:space="preserve">
          <source>Some imports might not make sense in a particular environment. For example, Node.js' &lt;code&gt;fs&lt;/code&gt; module would not make sense in an environment that didn't have a file system.</source>
          <target state="translated">在特定环境中，某些导入可能没有意义。例如，Node.js的 &lt;code&gt;fs&lt;/code&gt; 模块在没有文件系统的环境中就没有意义。</target>
        </trans-unit>
        <trans-unit id="8a1845bade3c1e32522c230c7fd34c3040711d50" translate="yes" xml:space="preserve">
          <source>Some issues have had monetary rewards attached to them. Those are labeled &lt;code&gt;bounty&lt;/code&gt;. Bounties are assigned via &lt;a href=&quot;https://www.bountysource.com/teams/eslint/issues&quot;&gt;BountySource&lt;/a&gt;.</source>
          <target state="translated">有些问题附有金钱奖励。那些被贴为 &lt;code&gt;bounty&lt;/code&gt; 。赏金是通过&lt;a href=&quot;https://www.bountysource.com/teams/eslint/issues&quot;&gt;BountySource&lt;/a&gt;分配的。</target>
        </trans-unit>
        <trans-unit id="cc97f15ec33a8fb0d8f181362b5bbc40bdbb948d" translate="yes" xml:space="preserve">
          <source>Some modules provide similar or identical functionality, think &lt;code&gt;lodash&lt;/code&gt; and &lt;code&gt;underscore&lt;/code&gt;. Your project may have standardized on a module. You want to make sure that the other alternatives are not being used as this would unnecessarily bloat the project and provide a higher maintenance cost of two dependencies when one would suffice.</source>
          <target state="translated">某些模块提供相似或相同的功能，请使用 &lt;code&gt;lodash&lt;/code&gt; 和 &lt;code&gt;underscore&lt;/code&gt; 。您的项目可能已在模块上标准化。您要确保不使用其他替代方法，因为这将不必要地使项目肿，并在满足一个条件时提供两个依赖关系的更高维护成本。</target>
        </trans-unit>
        <trans-unit id="264939a2d43fd66c197012a9cf9648b42c36337b" translate="yes" xml:space="preserve">
          <source>Some modules return a constructor which can potentially lead to code such as:</source>
          <target state="translated">有些模块会返回一个构造函数,这可能会导致这样的代码。</target>
        </trans-unit>
        <trans-unit id="29ba1427e8c92e96a16255e3f6eb4ecbfabc34f6" translate="yes" xml:space="preserve">
          <source>Some people consider large files a code smell. Large files tend to do a lot of things and can make it hard following what's going. While there is not an objective maximum number of lines considered acceptable in a file, most people would agree it should not be in the thousands. Recommendations usually range from 100 to 500 lines.</source>
          <target state="translated">有些人认为大文件是一种代码味。大文件往往会做很多事情,会让人很难跟上进度。虽然没有一个客观的最大行数被认为是可以接受的文件,但大多数人都会同意它不应该是数千行。建议通常从100行到500行不等。</target>
        </trans-unit>
        <trans-unit id="a357eb75979b31ab9472de29b249e979f6b6b141" translate="yes" xml:space="preserve">
          <source>Some people consider large functions a code smell. Large functions tend to do a lot of things and can make it hard following what's going on. Many coding style guides dictate a limit of the number of lines that a function can comprise of. This rule can help enforce that style.</source>
          <target state="translated">有些人认为大函数是一种代码味。大的函数往往会做很多事情,会让人很难跟上正在发生的事情。许多编码风格指南规定了一个函数可以组成的行数限制。这个规则可以帮助执行这个风格。</target>
        </trans-unit>
        <trans-unit id="b516222d790d0bfe6d8641c249e0071402e077c0" translate="yes" xml:space="preserve">
          <source>Some rules and APIs allow the use of selectors to query an AST. This page is intended to:</source>
          <target state="translated">一些规则和API允许使用选择器来查询AST。本页的目的是:</target>
        </trans-unit>
        <trans-unit id="d46d7f40436527e02e15f42c4b8e72f68eaadfc8" translate="yes" xml:space="preserve">
          <source>Some rules require options in order to function correctly. These options appear in configuration (&lt;code&gt;.eslintrc&lt;/code&gt;, command line, or in comments). For example:</source>
          <target state="translated">某些规则需要选项才能正常运行。这些选项显示在配置中（ &lt;code&gt;.eslintrc&lt;/code&gt; ，命令行或注释中）。例如：</target>
        </trans-unit>
        <trans-unit id="00275b3b345f6b9172064ad3c4803175ae258c34" translate="yes" xml:space="preserve">
          <source>Some style guides disallow comments on the same line as code. Code can become difficult to read if comments immediately follow the code on the same line. On the other hand, it is sometimes faster and more obvious to put comments immediately following code.</source>
          <target state="translated">有些风格指南不允许在代码的同一行上加注。如果注释紧跟在代码之后,代码会变得难以阅读。另一方面,有时将注释紧跟在代码后面会更快、更明显。</target>
        </trans-unit>
        <trans-unit id="1849aab38ed123bdc6d7b029034a46313136fc00" translate="yes" xml:space="preserve">
          <source>Some style guides don't allow the use of tab characters at all, including within comments.</source>
          <target state="translated">有些样式指南根本不允许使用制表符,包括在注释中。</target>
        </trans-unit>
        <trans-unit id="2244458667f3ce520967956eda4ce510fbeed0c1" translate="yes" xml:space="preserve">
          <source>Some style guides may require a consistent spacing for function names.</source>
          <target state="translated">一些样式指南可能要求函数名的间距一致。</target>
        </trans-unit>
        <trans-unit id="030befb9cb1b6a4b5dacb92a3f92d4b8ba5e2c62" translate="yes" xml:space="preserve">
          <source>Some style guides require JSDoc comments for all functions as a way of explaining function behavior.</source>
          <target state="translated">一些样式指南要求对所有函数进行JSDoc注释,作为解释函数行为的一种方式。</target>
        </trans-unit>
        <trans-unit id="dc237e4772e0207c27c1e378f2525052a1ff94c6" translate="yes" xml:space="preserve">
          <source>Some style guides require block statements to start and end with blank lines. The goal is to improve readability by visually separating the block content and the surrounding code.</source>
          <target state="translated">一些样式指南要求块语句以空行开始和结束。这样做的目的是通过视觉上分离块内容和周围的代码来提高可读性。</target>
        </trans-unit>
        <trans-unit id="201550e6abc7ddd420de4b881ba83ce28f29f0b9" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow a whitespace immediately after the initial &lt;code&gt;//&lt;/code&gt; of a line comment. Whitespace after the &lt;code&gt;//&lt;/code&gt; makes it easier to read text in comments. On the other hand, commenting out code is easier without having to put a whitespace right after the &lt;code&gt;//&lt;/code&gt;.</source>
          <target state="translated">某些样式指南会在行注释的初始 &lt;code&gt;//&lt;/code&gt; 后立即要求或禁止使用空格。 &lt;code&gt;//&lt;/code&gt; 后面的空格使阅读注释中的文本更容易。另一方面，注释代码更容易，而不必在 &lt;code&gt;//&lt;/code&gt; 后添加空格。</target>
        </trans-unit>
        <trans-unit id="a1c5fdd2ea4191bb42ab7f9fca487d91da02843c" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow a whitespace immediately after the initial &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt; of a comment. Whitespace after the &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt; makes it easier to read text in comments. On the other hand, commenting out code is easier without having to put a whitespace right after the &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt;.</source>
          <target state="translated">某些样式指南在注释的初始 &lt;code&gt;//&lt;/code&gt; 或 &lt;code&gt;/*&lt;/code&gt; 之后立即要求或禁止使用空格。 &lt;code&gt;//&lt;/code&gt; 或 &lt;code&gt;/*&lt;/code&gt; 后面的空格使阅读注释中的文本更容易。另一方面，注释代码更容易，而不必在 &lt;code&gt;//&lt;/code&gt; 或 &lt;code&gt;/*&lt;/code&gt; 后面放置空格。</target>
        </trans-unit>
        <trans-unit id="9568a858ccab377c3f347cbea8a8037f371d4712" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow spaces before or after unary operators. This is mainly a stylistic issue, however, some JavaScript expressions can be written without spacing which makes it harder to read and maintain.</source>
          <target state="translated">一些样式指南要求或不允许在单列运算符之前或之后有空格。这主要是一个风格问题,然而,一些JavaScript表达式可以不需要空格,这使得它更难阅读和维护。</target>
        </trans-unit>
        <trans-unit id="1cd1de3034a3fc730da0bea8dd9b8d360a4330f4" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow spaces inside of parentheses:</source>
          <target state="translated">有些样式指南要求或不允许括号内有空格。</target>
        </trans-unit>
        <trans-unit id="c3070c75d033320e5f7ebe414b6237a3ba652bf4" translate="yes" xml:space="preserve">
          <source>Some style guides will require or disallow spaces following the certain keywords.</source>
          <target state="translated">有些样式指南会要求或不允许在某些关键词后面有空格。</target>
        </trans-unit>
        <trans-unit id="c4be317e60f6aa965f4ab059cd2ad659412f195d" translate="yes" xml:space="preserve">
          <source>Some tests require that a certain parser configuration must be used. This can be specified in test specifications via the &lt;code&gt;parserOptions&lt;/code&gt; setting.</source>
          <target state="translated">一些测试要求必须使用特定的解析器配置。可以通过 &lt;code&gt;parserOptions&lt;/code&gt; 设置在测试规范中指定。</target>
        </trans-unit>
        <trans-unit id="838af6a85f479a1fedfe1a6da00a3f1b6a2a4200" translate="yes" xml:space="preserve">
          <source>Sometimes (especially in big projects) the name of the error variable is not consistent across the project, so you need a more flexible configuration to ensure that the rule reports all unhandled errors.</source>
          <target state="translated">有时(尤其是在大型项目中),错误变量的名称在整个项目中并不一致,因此你需要更灵活的配置来确保规则报告所有未处理的错误。</target>
        </trans-unit>
        <trans-unit id="50c696bd306a1b3a43860828cc49620093926e56" translate="yes" xml:space="preserve">
          <source>Sometimes during the course of code maintenance, the &lt;code&gt;this&lt;/code&gt; value is removed from the function body. In that case, you can end up with a call to &lt;code&gt;bind()&lt;/code&gt; that doesn't accomplish anything:</source>
          <target state="translated">有时在代码维护过程中， &lt;code&gt;this&lt;/code&gt; 值会从函数体中删除。在这种情况下，您可以结束对 &lt;code&gt;bind()&lt;/code&gt; 的调用，但该调用什么都做不了：</target>
        </trans-unit>
        <trans-unit id="e1239a4ef3312baebd03a9fadd3dc1da7a196cfc" translate="yes" xml:space="preserve">
          <source>Sometimes in the course of editing files, you can end up with extra whitespace at the end of lines. These whitespace differences can be picked up by source control systems and flagged as diffs, causing frustration for developers. While this extra whitespace causes no functional issues, many code conventions require that trailing spaces be removed before check-in.</source>
          <target state="translated">有时在编辑文件的过程中,你可能会在行末出现额外的空白。这些空格的差异可能会被源码控制系统发现,并标记为差异,从而给开发人员带来挫折感。虽然这种额外的空白不会引起功能问题,但许多代码惯例要求在签入前删除尾部的空格。</target>
        </trans-unit>
        <trans-unit id="7b37110e5b01350732eac4676af2611966b9ccef" translate="yes" xml:space="preserve">
          <source>Source Code</source>
          <target state="translated">源代码</target>
        </trans-unit>
        <trans-unit id="f13b901ad76229dac734487a39808cdde93abfe1" translate="yes" xml:space="preserve">
          <source>Source Control</source>
          <target state="translated">源头控制</target>
        </trans-unit>
        <trans-unit id="d7f23e409b1f9d227333564c23108a422010e901" translate="yes" xml:space="preserve">
          <source>SourceCode</source>
          <target state="translated">SourceCode</target>
        </trans-unit>
        <trans-unit id="bce4c495898f1faddcaa7c35b37ab4481ede3b00" translate="yes" xml:space="preserve">
          <source>SourceCode constructor (Node API) changes</source>
          <target state="translated">SourceCode构造函数(Node API)的变化。</target>
        </trans-unit>
        <trans-unit id="4295a0eca57863562626d681cbe158963892a6fd" translate="yes" xml:space="preserve">
          <source>SourceCode#splitLines()</source>
          <target state="translated">SourceCode#splitLines()</target>
        </trans-unit>
        <trans-unit id="db40a182aaf7dc66373c8652a068c39e88c92f7e" translate="yes" xml:space="preserve">
          <source>Space issues can also cause code to look inconsistent and harder to read.</source>
          <target state="translated">空间问题也会导致代码看起来不一致,难以阅读。</target>
        </trans-unit>
        <trans-unit id="9b903a63fa074533e05ee538bb400f7ae7d25ae0" translate="yes" xml:space="preserve">
          <source>Spacing around colons improves readability of &lt;code&gt;case&lt;/code&gt;/&lt;code&gt;default&lt;/code&gt; clauses.</source>
          <target state="translated">冒号之间的间距提高了 &lt;code&gt;case&lt;/code&gt; / &lt;code&gt;default&lt;/code&gt; 子句的可读性。</target>
        </trans-unit>
        <trans-unit id="bee60614d09a5dc287b728aa03f9ca804bb2765e" translate="yes" xml:space="preserve">
          <source>Spacing around commas improves readability of a list of items. Although most of the style guidelines for languages prescribe adding a space after a comma and not before it, it is subjective to the preferences of a project.</source>
          <target state="translated">逗号周围的间隔可以提高项目清单的可读性。虽然大多数语言风格指南都规定在逗号后而不是逗号前加一个空格,但这是根据项目的喜好而定的。</target>
        </trans-unit>
        <trans-unit id="85517ae7d9ab81a8dc4d785d38d52af351849a64" translate="yes" xml:space="preserve">
          <source>Sparse arrays contain empty slots, most frequently due to multiple commas being used in an array literal, such as:</source>
          <target state="translated">稀疏数组包含空槽,最常见的原因是数组文字中使用了多个逗号,如:。</target>
        </trans-unit>
        <trans-unit id="0b7e749be12e1d4e6f29f80172dc19cac2d01996" translate="yes" xml:space="preserve">
          <source>Specifying Environments</source>
          <target state="translated">指定环境</target>
        </trans-unit>
        <trans-unit id="056af97903e3dc6e6f43b88d96ae94278918b7f2" translate="yes" xml:space="preserve">
          <source>Specifying File extensions to Lint</source>
          <target state="translated">向Lint指定文件扩展名</target>
        </trans-unit>
        <trans-unit id="42e1afab26529373a5755f37ed73c9992e7a1f27" translate="yes" xml:space="preserve">
          <source>Specifying Globals</source>
          <target state="translated">指定全局</target>
        </trans-unit>
        <trans-unit id="615655edaa8435cea59ad96bf63fd800fe901df4" translate="yes" xml:space="preserve">
          <source>Specifying Parser</source>
          <target state="translated">指定解析器</target>
        </trans-unit>
        <trans-unit id="3fdf1ff8c15b6bfb3e42d6729c40289a364a0934" translate="yes" xml:space="preserve">
          <source>Specifying Parser Options</source>
          <target state="translated">指定解析器选项</target>
        </trans-unit>
        <trans-unit id="a5dba7920ee9d85457d6a302a8028c1f41b8cc64" translate="yes" xml:space="preserve">
          <source>Specifying Processor</source>
          <target state="translated">指定处理器</target>
        </trans-unit>
        <trans-unit id="ec5cdef761600831584f51b13c5e7e1af51231d0" translate="yes" xml:space="preserve">
          <source>Specifying Processor in Config Files</source>
          <target state="translated">在配置文件中指定处理器</target>
        </trans-unit>
        <trans-unit id="dd101a9b3761464c88a971471d60c8157de97419" translate="yes" xml:space="preserve">
          <source>Specifying Target Files to Lint</source>
          <target state="translated">指定目标文件到Lint</target>
        </trans-unit>
        <trans-unit id="fd3a805a25d509c02dbba7487be2139a847549f5" translate="yes" xml:space="preserve">
          <source>Specifying rules and plugins</source>
          <target state="translated">指定规则和插件</target>
        </trans-unit>
        <trans-unit id="96c2be7c78e35ecedf2f6d32e197f0983c7d3765" translate="yes" xml:space="preserve">
          <source>Start Developing</source>
          <target state="translated">开始发展</target>
        </trans-unit>
        <trans-unit id="d5ebef5b5d844222a804e3497fcaed1e87e4a705" translate="yes" xml:space="preserve">
          <source>Start: &lt;a href=&quot;https://www.npmjs.com/package/@start/plugin-lib-eslint&quot;&gt;@start/plugin-lib-eslint&lt;/a&gt;</source>
          <target state="translated">开始：&lt;a href=&quot;https://www.npmjs.com/package/@start/plugin-lib-eslint&quot;&gt;@ start / plugin-lib-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="67086f02eed6ec69807b5ddb9e07150ee0b0c38d" translate="yes" xml:space="preserve">
          <source>Starting Work</source>
          <target state="translated">开始工作</target>
        </trans-unit>
        <trans-unit id="91b0ca4a9a5191f5469dcbd23531b6ea8254d67c" translate="yes" xml:space="preserve">
          <source>Starting in 3.1.0, rules have been able to specify the &lt;em&gt;end&lt;/em&gt; location of a reported problem, in addition to the start location, by explicitly specifying an end location in the &lt;code&gt;report&lt;/code&gt; call. This is useful for tools like editor integrations, which can use the range to precisely display where a reported problem occurs. Starting in 4.0, if a &lt;em&gt;node&lt;/em&gt; is reported rather than a location, the end location of the range will automatically be inferred from the end location of the node. As a result, many more reported problems will have end locations.</source>
          <target state="translated">从3.1.0开始，规则可以通过在 &lt;code&gt;report&lt;/code&gt; 调用中显式指定结束位置来指定报告问题的&lt;em&gt;结束&lt;/em&gt;位置（除了开始位置之外）。这对于编辑器集成之类的工具很有用，该工具可以使用范围来精确显示发生问题的位置。从4.0开始，如果报告的是&lt;em&gt;节点&lt;/em&gt;而不是位置，则将从节点的结束位置自动推断范围的结束位置。结果，更多已报告的问题将具有终止位置。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f2ecf2f7eb4335fbd187d0845b33268b44df84a" translate="yes" xml:space="preserve">
          <source>Starting in 4.0, &lt;code&gt;LineComment&lt;/code&gt; and &lt;code&gt;BlockComments&lt;/code&gt; events will not be emitted during AST traversal. There are two reasons for this:</source>
          <target state="translated">从4.0开始，在AST遍历期间将不发出 &lt;code&gt;LineComment&lt;/code&gt; 和 &lt;code&gt;BlockComments&lt;/code&gt; 事件。有两个原因：</target>
        </trans-unit>
        <trans-unit id="4a9fefe6ba1eb3abeeec5967b3b58b648a035245" translate="yes" xml:space="preserve">
          <source>Starting in 4.0, the &lt;code&gt;RuleTester&lt;/code&gt; utility will validate properties of test case objects, and an error will be thrown if an unknown property is encountered. This change was added because we found that it was relatively common for developers to make typos in rule tests, often invalidating the assertions that the test cases were trying to make.</source>
          <target state="translated">从4.0开始， &lt;code&gt;RuleTester&lt;/code&gt; 实用程序将验证测试用例对象的属性，如果遇到未知属性，将引发错误。添加此更改的原因是，我们发现开发人员在规则测试中进行错别字是相对普遍的，通常会使测试用例试图做出的断言无效。</target>
        </trans-unit>
        <trans-unit id="5653cebc057d4791ce07031ad9286e729de6d691" translate="yes" xml:space="preserve">
          <source>Statements</source>
          <target state="translated">Statements</target>
        </trans-unit>
        <trans-unit id="6a5813201a4580fe5f1fbb25f1a522d4d505bf2d" translate="yes" xml:space="preserve">
          <source>Static Methods</source>
          <target state="translated">静态方法</target>
        </trans-unit>
        <trans-unit id="633c64990d0fd3fb0088750ad9faa31590a9c3f0" translate="yes" xml:space="preserve">
          <source>Step 1: Create a new branch</source>
          <target state="translated">第一步:创建一个新的分支机构</target>
        </trans-unit>
        <trans-unit id="c743a1387584019a5b9e49c171021066a9274bbd" translate="yes" xml:space="preserve">
          <source>Step 1: Install Node.js</source>
          <target state="translated">第一步:安装Node.js</target>
        </trans-unit>
        <trans-unit id="ebb615d0e8fbd3bc64c658bdeea517e1be8a7501" translate="yes" xml:space="preserve">
          <source>Step 2: Fork and checkout your own ESLint repository</source>
          <target state="translated">第二步:叉开并检查你自己的ESLint资源库。</target>
        </trans-unit>
        <trans-unit id="4b277bac8f09c41a896b5778dc93caf8cea1b8d1" translate="yes" xml:space="preserve">
          <source>Step 2: Make your changes</source>
          <target state="translated">第二步:进行修改</target>
        </trans-unit>
        <trans-unit id="162e5376e301468cf0fb8feee5902817e041ced1" translate="yes" xml:space="preserve">
          <source>Step 3: Add the upstream source</source>
          <target state="translated">第三步:添加上游源</target>
        </trans-unit>
        <trans-unit id="c69e88aa3310028acfe11e07da987e642ed7401d" translate="yes" xml:space="preserve">
          <source>Step 3: Rebase onto upstream</source>
          <target state="translated">第3步:重垒到上游</target>
        </trans-unit>
        <trans-unit id="11d3053005d884cc0baea0d55f626ee5d58a2a6e" translate="yes" xml:space="preserve">
          <source>Step 4: Install the Yeoman Generator</source>
          <target state="translated">第四步:安装Yeoman发电机</target>
        </trans-unit>
        <trans-unit id="d2be3c72779cd587be34e70421fd2467e7894ea1" translate="yes" xml:space="preserve">
          <source>Step 4: Run the tests</source>
          <target state="translated">第四步:运行测试</target>
        </trans-unit>
        <trans-unit id="e9fd76aa2302af763cd9bb123a722b970152c5fc" translate="yes" xml:space="preserve">
          <source>Step 5: Double check your submission</source>
          <target state="translated">第五步:仔细检查你的提交</target>
        </trans-unit>
        <trans-unit id="1c864ce6457173a3a941ae978f55091a735f72c1" translate="yes" xml:space="preserve">
          <source>Step 5: Run the tests</source>
          <target state="translated">第五步:运行测试</target>
        </trans-unit>
        <trans-unit id="b96518c7b052df6c7c228843ed78292c66a91d9a" translate="yes" xml:space="preserve">
          <source>Step 6: Push your changes</source>
          <target state="translated">第六步:推动你的改变</target>
        </trans-unit>
        <trans-unit id="baa82a802e0780c46eb5d8b0c851c905af055f75" translate="yes" xml:space="preserve">
          <source>Step 7: Send the pull request</source>
          <target state="translated">第七步:发送拉动请求</target>
        </trans-unit>
        <trans-unit id="f1823ff4064066ec41c29ab620ef5de461f12793" translate="yes" xml:space="preserve">
          <source>Store the info about processed files in order to only operate on the changed ones. The cache is stored in &lt;code&gt;.eslintcache&lt;/code&gt; by default. Enabling this option can dramatically improve ESLint's running time by ensuring that only changed files are linted.</source>
          <target state="translated">存储有关已处理文件的信息，以便仅对已更改的文件进行操作。默认情况下，缓存存储在 &lt;code&gt;.eslintcache&lt;/code&gt; 中。启用此选项可以确保仅对更改的文件进行掉毛处理，从而可以大大缩短ESLint的运行时间。</target>
        </trans-unit>
        <trans-unit id="040fdcc5343129a76b072a4ce16081703504850c" translate="yes" xml:space="preserve">
          <source>Storing Node.js application config data - Ben Hall's blog</source>
          <target state="translated">存储Node.js应用配置数据-Ben Hall的博客</target>
        </trans-unit>
        <trans-unit id="7c183131363f4251f89993f5090afc10d8f0caad" translate="yes" xml:space="preserve">
          <source>Strict Mode</source>
          <target state="translated">严格模式</target>
        </trans-unit>
        <trans-unit id="10944d62374d1d35c0aa7618089752217945a8f3" translate="yes" xml:space="preserve">
          <source>Strict mode is enabled by using the following pragma in your code:</source>
          <target state="translated">在你的代码中使用下面的pragma来启用严格模式。</target>
        </trans-unit>
        <trans-unit id="4c2e19e5bce9b19bbc0b58f76bc3e3dfe6a9b44a" translate="yes" xml:space="preserve">
          <source>Strict mode should be used in all modules, specified below the file overview comment and above everything else:</source>
          <target state="translated">严格模式应该在所有模块中使用,在文件概览注释下面指定,并在其他一切之上。</target>
        </trans-unit>
        <trans-unit id="3c519ccf5be0c1f36a3bbdf75106a4c822cfcb9f" translate="yes" xml:space="preserve">
          <source>String option:</source>
          <target state="translated">字符串选项。</target>
        </trans-unit>
        <trans-unit id="7c0095620910afa8aafa46572a5f1abcd3e6d132" translate="yes" xml:space="preserve">
          <source>String options are:</source>
          <target state="translated">字符串选项有:</target>
        </trans-unit>
        <trans-unit id="219423ce2478de8f7bc615787c69eeec3ac8cfbb" translate="yes" xml:space="preserve">
          <source>Strings should always use double quotes (never single quotes) and should always appear on a single line. Never use a slash to create a new line in a string.</source>
          <target state="translated">字符串应始终使用双引号(绝不是单引号),并应始终出现在单行上。切勿使用斜杠在字符串中创建新行。</target>
        </trans-unit>
        <trans-unit id="2bd1e348298a2cd13100d6cde33eeacf35aa2449" translate="yes" xml:space="preserve">
          <source>Style guides may require a space after the &lt;code&gt;function&lt;/code&gt; keyword for anonymous functions, while others specify no whitespace. Similarly, the space after a function name may or may not be required.</source>
          <target state="translated">对于匿名函数，样式指南可能在 &lt;code&gt;function&lt;/code&gt; 关键字后需要一个空格，而其他指南则不指定空格。同样，功能名称后的空格可能会也可能不需要。</target>
        </trans-unit>
        <trans-unit id="d2602aec88a266da02fb6e6a39ad0ff098e617d0" translate="yes" xml:space="preserve">
          <source>Stylistic Issues</source>
          <target state="translated">风格问题</target>
        </trans-unit>
        <trans-unit id="ff5943f72b414aaa4a17049e5bbb2634c96a77ee" translate="yes" xml:space="preserve">
          <source>Sublime Text 3:</source>
          <target state="translated">崇高的文字3。</target>
        </trans-unit>
        <trans-unit id="030c1749f522d7238c0443341747221266a4ca54" translate="yes" xml:space="preserve">
          <source>SublimeLinter-eslint</source>
          <target state="translated">SublimeLinter-eslint</target>
        </trans-unit>
        <trans-unit id="6ecdca9060c4831fb381d364edb6e63d253d9af3" translate="yes" xml:space="preserve">
          <source>Submit the pull request</source>
          <target state="translated">提交拉动请求</target>
        </trans-unit>
        <trans-unit id="583b503cc37a3a03e3fd4c13e083b2095261ea25" translate="yes" xml:space="preserve">
          <source>Submitting a &lt;a href=&quot;pull-requests&quot;&gt;Pull Request&lt;/a&gt;</source>
          <target state="translated">提交&lt;a href=&quot;pull-requests&quot;&gt;拉取请求&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0198b462f882ff4a84867d9897d73f6245ad627e" translate="yes" xml:space="preserve">
          <source>Such as:</source>
          <target state="translated">如:</target>
        </trans-unit>
        <trans-unit id="3374f6918890228b021e90be8c3993cedad5f95b" translate="yes" xml:space="preserve">
          <source>Suggest using &lt;code&gt;const&lt;/code&gt; (prefer-const)</source>
          <target state="translated">建议使用 &lt;code&gt;const&lt;/code&gt; （prefer-const）</target>
        </trans-unit>
        <trans-unit id="d7fda7e48105f11ea112f4b9190ecb9e41f8c30a" translate="yes" xml:space="preserve">
          <source>Suggest using Reflect methods where applicable (prefer-reflect)</source>
          <target state="translated">建议在适用的情况下使用反射方法(首选反射)。</target>
        </trans-unit>
        <trans-unit id="73a842e9ea440efda64fd80635a0d7967bf45ec9" translate="yes" xml:space="preserve">
          <source>Suggest using named capture group in regular expression (prefer-named-capture-group)</source>
          <target state="translated">建议在正则表达式中使用命名的捕获组(prefer-named-capture-group)</target>
        </trans-unit>
        <trans-unit id="28675d097f0b67789bcf9a4622cdbd9ec701d7ad" translate="yes" xml:space="preserve">
          <source>Suggest using spread syntax instead of &lt;code&gt;.apply()&lt;/code&gt;. (prefer-spread)</source>
          <target state="translated">建议使用传播语法而不是 &lt;code&gt;.apply()&lt;/code&gt; 。（优先点差）</target>
        </trans-unit>
        <trans-unit id="3ff97015207b9f4a9f111ed9aa1e794add36b5bd" translate="yes" xml:space="preserve">
          <source>Suggest using template literals instead of string concatenation. (prefer-template)</source>
          <target state="translated">建议使用模板字元而不是字符串连接。(prefer-template)</target>
        </trans-unit>
        <trans-unit id="73db0ab9a4b1b8fe9efa5f9e4facb96f6382eb3d" translate="yes" xml:space="preserve">
          <source>Suggest using the rest parameters instead of &lt;code&gt;arguments&lt;/code&gt; (prefer-rest-params)</source>
          <target state="translated">建议使用rest参数代替 &lt;code&gt;arguments&lt;/code&gt; （prefer-rest-params）</target>
        </trans-unit>
        <trans-unit id="2eb3a8ff27b81cae5e0a8c513b02aac9cbb867f5" translate="yes" xml:space="preserve">
          <source>Suggestion &lt;code&gt;messageId&lt;/code&gt;s</source>
          <target state="translated">建议 &lt;code&gt;messageId&lt;/code&gt; 小号</target>
        </trans-unit>
        <trans-unit id="18e9be223aea66671eb28836cf2ba42607386bfd" translate="yes" xml:space="preserve">
          <source>Suggestions are intended to provide fixes. ESLint will automatically remove the whole suggestion from the linting output if the suggestion's &lt;code&gt;fix&lt;/code&gt; function returned &lt;code&gt;null&lt;/code&gt; or an empty array/sequence.</source>
          <target state="translated">建议旨在提供修复程序。如果建议的 &lt;code&gt;fix&lt;/code&gt; 函数返回 &lt;code&gt;null&lt;/code&gt; 或空数组/序列，则ESLint将自动从lint输出中删除整个建议。</target>
        </trans-unit>
        <trans-unit id="f7db9952d2964aa65b756b67c22f5246a1c46374" translate="yes" xml:space="preserve">
          <source>Suggestions can be tested by defining a &lt;code&gt;suggestions&lt;/code&gt; key on an errors object. The options to check for the suggestions are the following (all are optional):</source>
          <target state="translated">可以通过在错误对象上定义 &lt;code&gt;suggestions&lt;/code&gt; 键来测试建议。用于检查建议的选项如下（所有都是可选的）：</target>
        </trans-unit>
        <trans-unit id="c916d9f4a8ffd629b95d93d9124a2f7c4e41d96c" translate="yes" xml:space="preserve">
          <source>Suggestions can be tested by defining a &lt;code&gt;suggestions&lt;/code&gt; key on an errors object. The options to check for the suggestions are the following (all are optional): * &lt;code&gt;desc&lt;/code&gt; (string): The suggestion &lt;code&gt;desc&lt;/code&gt; value * &lt;code&gt;messageId&lt;/code&gt; (string): The suggestion &lt;code&gt;messageId&lt;/code&gt; value for suggestions that use &lt;code&gt;messageId&lt;/code&gt;s * &lt;code&gt;output&lt;/code&gt; (string): A code string representing the result of applying the suggestion fix to the input code</source>
          <target state="translated">可以通过在错误对象上定义 &lt;code&gt;suggestions&lt;/code&gt; 键来测试建议。检查建议的选项如下（所有都是可选的）：* &lt;code&gt;desc&lt;/code&gt; （字符串）：建议 &lt;code&gt;desc&lt;/code&gt; 值* &lt;code&gt;messageId&lt;/code&gt; （字符串）：使用 &lt;code&gt;messageId&lt;/code&gt; 的建议的建议 &lt;code&gt;messageId&lt;/code&gt; 值* &lt;code&gt;output&lt;/code&gt; （字符串）：代码字符串，表示将建议修订应用于输入代码的结果</target>
        </trans-unit>
        <trans-unit id="3e50b8781a635b4ef2043bf1c55b61ebd430b444" translate="yes" xml:space="preserve">
          <source>Summary formatter</source>
          <target state="translated">摘要格式化</target>
        </trans-unit>
        <trans-unit id="f728bb607703d5d8840e57203c2748461be1c478" translate="yes" xml:space="preserve">
          <source>Supplied callback names</source>
          <target state="translated">提供的回调名称</target>
        </trans-unit>
        <trans-unit id="9e4bceec48f473d3d0d75720f392d38042d15367" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;scopeManager&lt;/code&gt; was added in ESLint v4.14.0. ESLint versions which support &lt;code&gt;scopeManager&lt;/code&gt; will provide an &lt;code&gt;eslintScopeManager: true&lt;/code&gt; property in &lt;code&gt;parserOptions&lt;/code&gt;, which can be used for feature detection.</source>
          <target state="translated">支持 &lt;code&gt;scopeManager&lt;/code&gt; 在ESLint v4.14.0加入。支持 &lt;code&gt;scopeManager&lt;/code&gt; 的 ESLint版本将在 &lt;code&gt;parserOptions&lt;/code&gt; 中提供 &lt;code&gt;eslintScopeManager: true&lt;/code&gt; 属性，可用于特征检测。</target>
        </trans-unit>
        <trans-unit id="d3be2b0d911459b5814d53e32d33fa047f7443bd" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;visitorKeys&lt;/code&gt; was added in ESLint v4.14.0. ESLint versions which support &lt;code&gt;visitorKeys&lt;/code&gt; will provide an &lt;code&gt;eslintVisitorKeys: true&lt;/code&gt; property in &lt;code&gt;parserOptions&lt;/code&gt;, which can be used for feature detection.</source>
          <target state="translated">支持 &lt;code&gt;visitorKeys&lt;/code&gt; 在ESLint v4.14.0加入。支持 &lt;code&gt;visitorKeys&lt;/code&gt; 的 ESLint版本将在 &lt;code&gt;parserOptions&lt;/code&gt; 中提供 &lt;code&gt;eslintVisitorKeys: true&lt;/code&gt; 属性，可用于特征检测。</target>
        </trans-unit>
        <trans-unit id="998fadcd171167b554bf2c08de343941a1465d16" translate="yes" xml:space="preserve">
          <source>SwitchCase</source>
          <target state="translated">SwitchCase</target>
        </trans-unit>
        <trans-unit id="3253b8236b095baad85b618af991aec7e4b807ea" translate="yes" xml:space="preserve">
          <source>Symbol Objects specification</source>
          <target state="translated">符号对象规格</target>
        </trans-unit>
        <trans-unit id="4b8745ced25b460b42f0ffff119fb7e742454610" translate="yes" xml:space="preserve">
          <source>Symbol Objects specification: Symbol description</source>
          <target state="translated">符号对象规范。符号说明</target>
        </trans-unit>
        <trans-unit id="5c1a0f585424dee7b8554275b5954f6b460c63ba" translate="yes" xml:space="preserve">
          <source>Syntastic</source>
          <target state="translated">Syntastic</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="translated">目录</target>
        </trans-unit>
        <trans-unit id="1bb44ac0ce6df50699361a74b6a78b3bcf6d27e3" translate="yes" xml:space="preserve">
          <source>Tabs: jQuery</source>
          <target state="translated">标签:jQuery</target>
        </trans-unit>
        <trans-unit id="b56e0af9912b57fe07bd022ded51e9d34177d6b8" translate="yes" xml:space="preserve">
          <source>Template literals (MDN)</source>
          <target state="translated">模板字数(MDN)</target>
        </trans-unit>
        <trans-unit id="3760c9870e77d722186e405789b255d1fc4397f6" translate="yes" xml:space="preserve">
          <source>Temporal Dead Zone</source>
          <target state="translated">暂时死区</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="40735bc727ae1db7f555635000520d9343037f8c" translate="yes" xml:space="preserve">
          <source>Ternary Operator</source>
          <target state="translated">三元运算符</target>
        </trans-unit>
        <trans-unit id="73ae0e17a1d0167b6266afc4c66bc3cd1157963b" translate="yes" xml:space="preserve">
          <source>Ternary Operator: &lt;code&gt;?:&lt;/code&gt;</source>
          <target state="translated">三元运算符： &lt;code&gt;?:&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="aa91a5a624af7d8296afa52521f68fe2c22fbe6f" translate="yes" xml:space="preserve">
          <source>Testing Suggestions</source>
          <target state="translated">测试建议</target>
        </trans-unit>
        <trans-unit id="fac2d0573011312ce352636a228659611db6e134" translate="yes" xml:space="preserve">
          <source>Testing errors with &lt;code&gt;messageId&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;messageId&lt;/code&gt; 测试错误</target>
        </trans-unit>
        <trans-unit id="d720305ae3061bec3ca536cef916c4141b41323c" translate="yes" xml:space="preserve">
          <source>TextMate 2:</source>
          <target state="translated">TextMate 2:</target>
        </trans-unit>
        <trans-unit id="9d341ea56c03bc023005aac875b425f57d6428b2" translate="yes" xml:space="preserve">
          <source>That works fine when you don't want a fallthrough, but what if the fallthrough is intentional, there is no way to indicate that in the language. It's considered a best practice to always indicate when a fallthrough is intentional using a comment which matches the &lt;code&gt;/falls?\s?through/i&lt;/code&gt; regular expression:</source>
          <target state="translated">当您不希望遇到失败时，这种方法就可以很好地工作，但是如果失败是故意的，那么就没有办法用语言来表明这一点。始终使用与 &lt;code&gt;/falls?\s?through/i&lt;/code&gt; 正则表达式匹配的注释来始终指示何时故意插入是一种最佳做法：</target>
        </trans-unit>
        <trans-unit id="6ae09c7ad75a7a8f54ad7a675b476d63d3d4806c" translate="yes" xml:space="preserve">
          <source>The &quot;max&quot; object property is optional (default: 1).</source>
          <target state="translated">最大 &quot;对象属性是可选的(默认值:1)。</target>
        </trans-unit>
        <trans-unit id="dbb58b13b991ead49bcb9152b87b31df2d758c54" translate="yes" xml:space="preserve">
          <source>The 1-based column number of the begin point of this message.</source>
          <target state="translated">此消息起始点的1基列号。</target>
        </trans-unit>
        <trans-unit id="77bfab5d4b122d435b42f1cc6e25f3b15431c3ba" translate="yes" xml:space="preserve">
          <source>The 1-based column number of the end point of this message. This property is undefined if this message is not a range.</source>
          <target state="translated">此消息的结束点的以1为基础的列号。如果此消息不是一个范围,则此属性未定义。</target>
        </trans-unit>
        <trans-unit id="1bfeaeabc605c8970a4e9a4943be75663e3151fb" translate="yes" xml:space="preserve">
          <source>The 1-based line number of the begin point of this message.</source>
          <target state="translated">此消息起始点的1基行号。</target>
        </trans-unit>
        <trans-unit id="217ce3c9eec171b0c8f48cc98ef0326f12fd81a8" translate="yes" xml:space="preserve">
          <source>The 1-based line number of the end point of this message. This property is undefined if this message is not a range.</source>
          <target state="translated">此消息的结束点的基于1的行号。如果此消息不是一个范围,则此属性未定义。</target>
        </trans-unit>
        <trans-unit id="b16353fd54f2f4a9ee74c0161bfe191f44ad0ae0" translate="yes" xml:space="preserve">
          <source>The 1st option is &lt;code&gt;&quot;asc&quot;&lt;/code&gt; or &lt;code&gt;&quot;desc&quot;&lt;/code&gt;.</source>
          <target state="translated">第一个选项是 &lt;code&gt;&quot;asc&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;desc&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="45905a15b4e98684c96286c7a579ca2e9122122b" translate="yes" xml:space="preserve">
          <source>The 2nd option is an object which has 3 properties.</source>
          <target state="translated">第2个选项是一个对象,它有3个属性。</target>
        </trans-unit>
        <trans-unit id="9a3b916c01c8581fb8b9ca9adec25cef6c29aac2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#-editinfo-type&quot;&gt;EditInfo&lt;/a&gt; object of autofix. This property is undefined if this message is not fixable.</source>
          <target state="translated">自动修复的&lt;a href=&quot;#-editinfo-type&quot;&gt;EditInfo&lt;/a&gt;对象。如果此消息不可修复，则此属性未定义。</target>
        </trans-unit>
        <trans-unit id="a7ca023748464e13f90714830960ee50f938ef1e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects to filter.</source>
          <target state="translated">要过滤的&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="b70253817a5926115cf28ddc0ea4683ac9393e08" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects to write.</source>
          <target state="translated">要写入的&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="29ce05a67597e0643fcdc8100c44eaa9d1419d89" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#using-rule-metadata&quot;&gt;Using Rule metadata&lt;/a&gt; example shows how to use the &lt;code&gt;data&lt;/code&gt; object in a custom formatter. See the &lt;a href=&quot;working-with-rules&quot;&gt;Working with Rules&lt;/a&gt; page for more information about rules.</source>
          <target state="translated">该&lt;a href=&quot;#using-rule-metadata&quot;&gt;使用规则的元数据&lt;/a&gt;的示例演示了如何使用 &lt;code&gt;data&lt;/code&gt; 对象的自定义格式。有关&lt;a href=&quot;working-with-rules&quot;&gt;规则&lt;/a&gt;的更多信息，请参见使用规则页面。</target>
        </trans-unit>
        <trans-unit id="5b1896cdaec6c51ba10667d39b756eedd5551922" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../rules/no-undef&quot;&gt;no-undef&lt;/a&gt; rule will warn on variables that are accessed but not defined within the same file. If you are using global variables inside of a file then it's worthwhile to define those globals so that ESLint will not warn about their usage. You can define global variables either using comments inside of a file or in the configuration file.</source>
          <target state="translated">在&lt;a href=&quot;../rules/no-undef&quot;&gt;没有民主基金&lt;/a&gt;规则将警告在被访问的，但在同一个文件中没有定义的变量。如果要在文件内部使用全局变量，则值得定义这些全局变量，以使ESLint不会警告它们的用法。您可以使用文件内部或配置文件中的注释来定义全局变量。</target>
        </trans-unit>
        <trans-unit id="047eac5397259d4ad14b6243aa57de4dae1a614d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://es5.github.io/#x15.8&quot;&gt;ECMAScript 5 specification&lt;/a&gt; makes it clear that both &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;JSON&lt;/code&gt; cannot be invoked:</source>
          <target state="translated">在&lt;a href=&quot;https://es5.github.io/#x15.8&quot;&gt;ECMAScript的5规范&lt;/a&gt;明确规定，既 &lt;code&gt;Math&lt;/code&gt; 和 &lt;code&gt;JSON&lt;/code&gt; 不能调用：</target>
        </trans-unit>
        <trans-unit id="1a35e82f6be72b6be61cd4a886d86c858f228012" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect-object&quot;&gt;ECMAScript 2015 specification&lt;/a&gt; makes it clear that &lt;code&gt;Reflect&lt;/code&gt; cannot be invoked:</source>
          <target state="translated">在&lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect-object&quot;&gt;ECMAScript的2015年规范&lt;/a&gt;明确指出， &lt;code&gt;Reflect&lt;/code&gt; 不能被调用：</target>
        </trans-unit>
        <trans-unit id="81c1cb58f2de5577eeb597a1918e8584414249b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;always&quot;&lt;/code&gt; option (default) enforces the use of &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; in every situation (except when you opt-in to more specific handling of &lt;code&gt;null&lt;/code&gt; [see below]).</source>
          <target state="translated">该 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 选项（默认）强制使用 &lt;code&gt;===&lt;/code&gt; 和 &lt;code&gt;!==&lt;/code&gt; 在任何情况下（当您选择加入更具体的处理，除了 &lt;code&gt;null&lt;/code&gt; [见下文]）。</target>
        </trans-unit>
        <trans-unit id="0234b9d3610f2d5c0d1890c03b252abd7cefab7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;as-needed&quot;, { &quot;requireForBlockBody&quot;: true }&lt;/code&gt; rule is directly inspired by the Airbnb &lt;a href=&quot;https://github.com/airbnb/javascript#arrows--one-arg-parens&quot;&gt;JS Style Guide&lt;/a&gt;.</source>
          <target state="translated">在 &lt;code&gt;&quot;as-needed&quot;, { &quot;requireForBlockBody&quot;: true }&lt;/code&gt; 规则是直接由制作的Airbnb启发&lt;a href=&quot;https://github.com/airbnb/javascript#arrows--one-arg-parens&quot;&gt;JS风格指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d82ce97069386b44a427b995707c718f99559346" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; option will check for redeclaration of built-in globals in global scope.</source>
          <target state="translated">该 &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; 选项将检查在内置全球范围内全局重复声明。</target>
        </trans-unit>
        <trans-unit id="258321fe90655819f22eef5ffbb3f4fe1c32eec4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;empty&quot;&lt;/code&gt; exception concerns empty parentheses, and works the same way as the other exceptions, inverting the first option.</source>
          <target state="translated">在 &lt;code&gt;&quot;empty&quot;&lt;/code&gt; 异常关注空括号，并且其工作方式和其它的异常一样，反转的第一个选项。</target>
        </trans-unit>
        <trans-unit id="3b02d6c73ff7b77ebcbfdce42ad57c73245465b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; configuration contains many of the same default rule settings from 0.x, but not all. These rules are no longer on by default, so you should review your settings to ensure they are still as you expect:</source>
          <target state="translated">该 &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; 的配置包含了许多从0.X相同的默认规则设置，但不是全部。这些规则默认情况下不再处于启用状态，因此您应查看设置以确保它们仍然符合您的期望：</target>
        </trans-unit>
        <trans-unit id="5913f4b04b709c4a37956c8f0a355bb3e59d6045" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; value is an array of string patterns which are considered exceptions to the rule. Please note that exceptions are ignored if the first argument is &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; 值是被认为例外的规则的字符串模式的阵列。请注意，如果第一个参数为 &lt;code&gt;&quot;never&quot;&lt;/code&gt; ，则忽略异常。</target>
        </trans-unit>
        <trans-unit id="fe039a59a04c46fd505176d921318453636d178a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; value is an array of string patterns which are considered exceptions to the rule. The rule will not warn when the pattern starts from the beginning of the comment and repeats until the end of the line or &lt;code&gt;*/&lt;/code&gt; if the comment is a single line comment. Please note that exceptions are ignored if the first argument is &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; 值是被认为例外的规则的字符串模式的阵列。当模式从注释的开头开始并重复直到行的末尾时，规则将不会发出警告；如果注释是单行注释，则重复 &lt;code&gt;*/&lt;/code&gt; 。请注意，如果第一个参数为 &lt;code&gt;&quot;never&quot;&lt;/code&gt; ，则忽略异常。</target>
        </trans-unit>
        <trans-unit id="e34f8d72a6e0abd2b6cd46f7f53eb977a9c25ad6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; property in a configuration file enables this rule.</source>
          <target state="translated">配置文件中的 &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; 属性启用此规则。</target>
        </trans-unit>
        <trans-unit id="ec76be0c108097d6838a0ac4fbb38e16745647e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;markers&quot;&lt;/code&gt; value is an array of string patterns which are considered markers for docblock-style comments, such as an additional &lt;code&gt;/&lt;/code&gt;, used to denote documentation read by doxygen, vsdoc, etc. which must have additional characters. The &lt;code&gt;&quot;markers&quot;&lt;/code&gt; array will apply regardless of the value of the first argument, e.g. &lt;code&gt;&quot;always&quot;&lt;/code&gt; or &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;&quot;markers&quot;&lt;/code&gt; 值是被认为用于文档块样式的注释标记，诸如附加的字符串模式的阵列 &lt;code&gt;/&lt;/code&gt; ，用于表示文档读取的doxygen，vsdoc等，它们必须有附加的字符。该 &lt;code&gt;&quot;markers&quot;&lt;/code&gt; ，无论第一个参数的值的阵列将适用，例如， &lt;code&gt;&quot;always&quot;&lt;/code&gt; 或者 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5df38b7cf9b33c3fdba20972fad0ce2f4e5d6596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;never&quot;&lt;/code&gt; option ignores &lt;code&gt;const&lt;/code&gt; variable initializations.</source>
          <target state="translated">该 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 选项忽略 &lt;code&gt;const&lt;/code&gt; 变量初始化。</target>
        </trans-unit>
        <trans-unit id="665c133a9b40f2ee21d1a8c214ccb5968d500388" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;property&quot;&lt;/code&gt; option requires the dot to be on the same line as the property.</source>
          <target state="translated">在 &lt;code&gt;&quot;property&quot;&lt;/code&gt; 选项需要的点是在同一行的属性。</target>
        </trans-unit>
        <trans-unit id="a8917282c9e6924d8221f022d420501eebe8dd61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;safe&quot;&lt;/code&gt; option corresponds to the &lt;code&gt;&quot;global&quot;&lt;/code&gt; option if ESLint considers a file to be a &lt;strong&gt;Node.js&lt;/strong&gt; or &lt;strong&gt;CommonJS&lt;/strong&gt; module because the configuration specifies either of the following:</source>
          <target state="translated">在 &lt;code&gt;&quot;safe&quot;&lt;/code&gt; 选项对应于 &lt;code&gt;&quot;global&quot;&lt;/code&gt; 选项，如果ESLint认为一个文件是一个&lt;strong&gt;Node.js的&lt;/strong&gt;或&lt;strong&gt;CommonJS的&lt;/strong&gt;模块，因为配置指定以下任一操作：</target>
        </trans-unit>
        <trans-unit id="335d3d2aadf4b8cd6d235ef1c1ab85d30c55e2fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;smart&quot;&lt;/code&gt; option enforces the use of &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; except for these cases:</source>
          <target state="translated">该 &lt;code&gt;&quot;smart&quot;&lt;/code&gt; 选项强制使用 &lt;code&gt;===&lt;/code&gt; 与 &lt;code&gt;!==&lt;/code&gt; 除了这些情况：</target>
        </trans-unit>
        <trans-unit id="757da32c45a012c497f6f5b85d15dfd792bd342d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; directive applies to the scope in which it appears and all inner scopes contained within that scope. Therefore, using the &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; directive in one of these inner scopes is unnecessary.</source>
          <target state="translated">在 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; 指令适用于它出现的范围以及该范围内包含的所有内部范围。因此，使用 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; 这些内部作用域之一中的指令是不必要的。</target>
        </trans-unit>
        <trans-unit id="34c46639b01057382b6b9a17c0ce73084f411d5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;command line&lt;/a&gt; automatically fixed problems reported by this rule.</source>
          <target state="translated">该 &lt;code&gt;--fix&lt;/code&gt; on选项&lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;命令行&lt;/a&gt;自动修复的问题报道这条规则。</target>
        </trans-unit>
        <trans-unit id="5b8b6136da33c3a25813fde1f0b5cd20a7b643a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;command line&lt;/a&gt; automatically fixes problems (currently mostly whitespace) reported by rules which have a wrench  below.</source>
          <target state="translated">该 &lt;code&gt;--fix&lt;/code&gt; on选项&lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;命令行&lt;/a&gt;自动修复问题（目前主要是空格）报告具有低于扳手规则。</target>
        </trans-unit>
        <trans-unit id="8c7a3a09ba8e134da02e62a2b097beafa2f467a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;../user-guide/command-line-interface#fixing-problems&quot;&gt;command line&lt;/a&gt; can automatically fix some of the problems reported by this rule.</source>
          <target state="translated">该 &lt;code&gt;--fix&lt;/code&gt; on选项&lt;a href=&quot;../user-guide/command-line-interface#fixing-problems&quot;&gt;命令行&lt;/a&gt;可以自动修复一些被这条规则反映的问题。</target>
        </trans-unit>
        <trans-unit id="1ad561df4151ebb76e63f840b52ab0f6ae886e08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a &lt;code&gt;typeof&lt;/code&gt; expression, or if both operands are literals with the same type.</source>
          <target state="translated">该 &lt;code&gt;--fix&lt;/code&gt; 在命令行选项自动修复此规则报告的一些问题。仅当其中一个操作数是 &lt;code&gt;typeof&lt;/code&gt; 表达式，或者两个操作数都是具有相同类型的文字时，问题才得以解决。</target>
        </trans-unit>
        <trans-unit id="cfc6a5d47bc7a83b2362366b0d3b2b186202a528" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line automatically fixes some problems reported by this rule: multiple members on a single line are automatically sorted (e.g. &lt;code&gt;import { b, a } from 'foo.js'&lt;/code&gt; is corrected to &lt;code&gt;import { a, b } from 'foo.js'&lt;/code&gt;), but multiple lines are not reordered.</source>
          <target state="translated">的 &lt;code&gt;--fix&lt;/code&gt; 在命令行上的选项自动修复一些问题报告这样的规则：在一行上的多个构件被自动排序（例如 &lt;code&gt;import { b, a } from 'foo.js'&lt;/code&gt; 被修正为 &lt;code&gt;import { a, b } from 'foo.js'&lt;/code&gt; ），但多行不重新排序。</target>
        </trans-unit>
        <trans-unit id="6ee7ab0d0ef494b690762e7c764488b7d5a3c387" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line does not insert new &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; statements, but only removes unneeded statements.</source>
          <target state="translated">该 &lt;code&gt;--fix&lt;/code&gt; 在命令行选项不会插入新的 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 声明，但只删除不需要的语句。</target>
        </trans-unit>
        <trans-unit id="3d24607e46229c7268d72a682e31b53d3099f57e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line fixes only problems reported in variable declarations, and among them only those that fall under the category &lt;code&gt;object&lt;/code&gt; destructuring. Furthermore, the name of the declared variable has to be the same as the name used for non-computed member access in the initializer. For example, &lt;code&gt;var foo = object.foo&lt;/code&gt; can be automatically fixed by this rule. Problems that involve computed member access (e.g., &lt;code&gt;var foo = object[foo]&lt;/code&gt;) or renamed properties (e.g., &lt;code&gt;var foo = object.bar&lt;/code&gt;) are not automatically fixed.</source>
          <target state="translated">该 &lt;code&gt;--fix&lt;/code&gt; 在命令行修复选项，唯一的问题报告变量声明，而其中只有那些在属于此类 &lt;code&gt;object&lt;/code&gt; 解构。此外，声明的变量的名称必须与初始化程序中用于非计算成员访问的名称相同。例如，此规则可以自动修复 &lt;code&gt;var foo = object.foo&lt;/code&gt; 。涉及计算成员访问（例如 &lt;code&gt;var foo = object[foo]&lt;/code&gt; ）或重命名的属性（例如 &lt;code&gt;var foo = object.bar&lt;/code&gt; ）的问题不会自动解决。</target>
        </trans-unit>
        <trans-unit id="651165c0cfafa6ed91a01ff2f3a275112628a26a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@author&lt;/code&gt; field gives you credit for having created the file.</source>
          <target state="translated">该 &lt;code&gt;@author&lt;/code&gt; 现场为您提供信贷已经创建的文件。</target>
        </trans-unit>
        <trans-unit id="8d050940abfee32adbac0c6eb00b3c5418a91500" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; method has changed to work more like &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt;. In v2.x, &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; warned about ignored files by default and didn't have a way to opt-out of those warnings whereas &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt; did not warn about ignored files by default and allowed you to opt-in to warning about them. The &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; method now also does not warn about ignored files by default and allows you to opt-in with a new, third argument (a boolean, &lt;code&gt;true&lt;/code&gt; to warn about ignored files and &lt;code&gt;false&lt;/code&gt; to not warn).</source>
          <target state="translated">该 &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; 方法已经改变工作更像 &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt; 。在v2.x中， &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; 默认情况下会警告忽略的文件，并且没有办法选择退出那些警告，而 &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt; 默认情况下不会警告被忽略的文件，并允许您选择来警告他们。该 &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; 方法现在也没有警告默认情况下被忽略的文件，并允许您选择在一个新的，第三个参数（一个布尔值， &lt;code&gt;true&lt;/code&gt; 以警告或忽略的文件和 &lt;code&gt;false&lt;/code&gt; 不警告）。</target>
        </trans-unit>
        <trans-unit id="cd01e52d3805d8a62d247b8499d65fa83701f436" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; is a constructor, and you can create a new instance by passing in the options you want to use. The available options are:</source>
          <target state="translated">该 &lt;code&gt;CLIEngine&lt;/code&gt; 是一个构造函数，你可以通过在你想要使用的选项创建一个新的实例。可用的选项有：</target>
        </trans-unit>
        <trans-unit id="36a91b8e915150c788d9aa4f17ae522dfcd51ab4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; object</source>
          <target state="translated">该 &lt;code&gt;CLIEngine&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="cb04e559741ded700b750c763c58609e67280d3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; type represents the core functionality of the CLI except that it reads nothing from the command line and doesn't output anything by default. Instead, it accepts many (but not all) of the arguments that are passed into the CLI. It reads both configuration and source files as well as managing the environment that is passed into the &lt;code&gt;Linter&lt;/code&gt; object.</source>
          <target state="translated">该 &lt;code&gt;CLIEngine&lt;/code&gt; 类型表示CLI的不同之处在于它读取命令行进行任何操作，默认情况下不输出任何东西的核心功能。相反，它接受传递到CLI的许多（但不是全部）参数。它读取配置文件和源文件，以及管理传递到 &lt;code&gt;Linter&lt;/code&gt; 对象中的环境。</target>
        </trans-unit>
        <trans-unit id="7c04bc333459294a802b327b5827d0068e581953" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt;, &lt;code&gt;SourceCode&lt;/code&gt;, and &lt;code&gt;RuleTester&lt;/code&gt; modules from ESLint's Node.js API are now ES2015 classes. This will not break any documented behavior, but it does have some observable effects (for example, the methods on &lt;code&gt;CLIEngine.prototype&lt;/code&gt; are now non-enumerable).</source>
          <target state="translated">ESLint的Node.js API 的 &lt;code&gt;CLIEngine&lt;/code&gt; ， &lt;code&gt;SourceCode&lt;/code&gt; 和 &lt;code&gt;RuleTester&lt;/code&gt; 模块现在为ES2015类。这不会破坏任何已记录的行为，但是确实具有一些可观察到的效果（例如， &lt;code&gt;CLIEngine.prototype&lt;/code&gt; 上的方法现在不可枚举）。</target>
        </trans-unit>
        <trans-unit id="8dff6f94cd40c096f350e419d585278490290c3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ESLint&lt;/code&gt; class is the primary class to use in Node.js applications.</source>
          <target state="translated">该 &lt;code&gt;ESLint&lt;/code&gt; 类是在Node.js的应用程序使用的主要类。</target>
        </trans-unit>
        <trans-unit id="448de94e4a5c6b54e20b7d92beb049e1353254ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ESLint&lt;/code&gt; constructor takes an &lt;code&gt;options&lt;/code&gt; object. If you omit the &lt;code&gt;options&lt;/code&gt; object then it uses default values for all options. The &lt;code&gt;options&lt;/code&gt; object has the following properties.</source>
          <target state="translated">该 &lt;code&gt;ESLint&lt;/code&gt; 构造函数采用 &lt;code&gt;options&lt;/code&gt; 对象。如果省略 &lt;code&gt;options&lt;/code&gt; 对象，则它将对所有选项使用默认值。该 &lt;code&gt;options&lt;/code&gt; 对象具有以下属性。</target>
        </trans-unit>
        <trans-unit id="cb55f87af3939b8a26c09301489c8b88cb0d4b46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EditInfo&lt;/code&gt; value is information to edit text. The &lt;code&gt;fix&lt;/code&gt; and &lt;code&gt;suggestions&lt;/code&gt; properties of &lt;a href=&quot;#-lintmessage-type&quot;&gt;LintMessage&lt;/a&gt; type contain it. It has following properties:</source>
          <target state="translated">该 &lt;code&gt;EditInfo&lt;/code&gt; 值信息编辑文本。&lt;a href=&quot;#-lintmessage-type&quot;&gt;LintMessage&lt;/a&gt;类型的 &lt;code&gt;fix&lt;/code&gt; 和 &lt;code&gt;suggestions&lt;/code&gt; 属性包含它。它具有以下属性：</target>
        </trans-unit>
        <trans-unit id="bc6ee1cbc4284429934a86ecac444fe81dc04e8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formatter&lt;/code&gt; value is the object to convert the &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects to text. The &lt;a href=&quot;#-eslintloadformatternameorpath&quot;&gt;eslint.loadFormatter()&lt;/a&gt; method returns it. It has the following method:</source>
          <target state="translated">该 &lt;code&gt;Formatter&lt;/code&gt; 值的转换对象&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt;对象文本。所述&lt;a href=&quot;#-eslintloadformatternameorpath&quot;&gt;eslint.loadFormatter（）&lt;/a&gt;方法返回它。它具有以下方法：</target>
        </trans-unit>
        <trans-unit id="10215453b4d9e38705bc6510ce93465250bda0fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LintMessage&lt;/code&gt; value is the information of each linting error. The &lt;code&gt;messages&lt;/code&gt; property of the &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; type contains it. It has the following properties:</source>
          <target state="translated">所述 &lt;code&gt;LintMessage&lt;/code&gt; 值是每个掉毛错误的信息。&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt;类型的 &lt;code&gt;messages&lt;/code&gt; 属性包含它。它具有以下属性：</target>
        </trans-unit>
        <trans-unit id="80d5223bd532c8881ed7de1546fb3c0c20284147" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LintResult&lt;/code&gt; value is the information of the linting result of each file. The &lt;a href=&quot;#-eslintlintfilespatterns&quot;&gt;&lt;code&gt;eslint.lintFiles()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#-eslintlinttextcode-options&quot;&gt;&lt;code&gt;eslint.lintText()&lt;/code&gt;&lt;/a&gt; methods return it. It has the following properties:</source>
          <target state="translated">&lt;code&gt;LintResult&lt;/code&gt; 值是每个文件的整理结果的信息。该&lt;a href=&quot;#-eslintlintfilespatterns&quot;&gt; &lt;code&gt;eslint.lintFiles()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#-eslintlinttextcode-options&quot;&gt; &lt;code&gt;eslint.lintText()&lt;/code&gt; &lt;/a&gt;方法返回。它具有以下属性：</target>
        </trans-unit>
        <trans-unit id="5c9b20fb5b6252830eb519435c0219003fa37dba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Linter&lt;/code&gt; object</source>
          <target state="translated">该 &lt;code&gt;Linter&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="1d37bb325bb6d585cfb9ad4d89a7dcea80388f30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Linter&lt;/code&gt; object does the actual evaluation of the JavaScript code. It doesn't do any filesystem operations, it simply parses and reports on the code. In particular, the &lt;code&gt;Linter&lt;/code&gt; object does not process configuration objects or files. The &lt;code&gt;Linter&lt;/code&gt; is a constructor, and you can create a new instance by passing in the options you want to use. The available options are:</source>
          <target state="translated">该 &lt;code&gt;Linter&lt;/code&gt; 对象做的JavaScript代码的实际评价。它不执行任何文件系统操作，仅分析和报告代码。特别是， &lt;code&gt;Linter&lt;/code&gt; 对象不处理配置对象或文件。该 &lt;code&gt;Linter&lt;/code&gt; 是一个构造函数，你可以通过在你想要使用的选项创建一个新的实例。可用的选项有：</target>
        </trans-unit>
        <trans-unit id="6b3697f8c0f76c13f38759df3544e6dd3e1c83db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Literal&lt;/code&gt; node must have &lt;code&gt;raw&lt;/code&gt; property.</source>
          <target state="translated">该 &lt;code&gt;Literal&lt;/code&gt; 节点必须有 &lt;code&gt;raw&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="6199c13da52a235cf644776c5b0a32c08d65bf50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Literal&lt;/code&gt; node:</source>
          <target state="translated">该 &lt;code&gt;Literal&lt;/code&gt; 节点：</target>
        </trans-unit>
        <trans-unit id="b0e719a9b8eee0a7e784f9393820037edebb8384" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; constructor is used to create new generic objects in JavaScript, such as:</source>
          <target state="translated">该 &lt;code&gt;Object&lt;/code&gt; 构造函数用于创建在JavaScript新的通用对象，如：</target>
        </trans-unit>
        <trans-unit id="26fa98a82c9b4be9d13ddb25b7b39470825fc8b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Program&lt;/code&gt; node must have &lt;code&gt;tokens&lt;/code&gt; and &lt;code&gt;comments&lt;/code&gt; properties. Both properties are an array of the below Token interface.</source>
          <target state="translated">该 &lt;code&gt;Program&lt;/code&gt; 节点必须有 &lt;code&gt;tokens&lt;/code&gt; 和 &lt;code&gt;comments&lt;/code&gt; 性质。这两个属性都是下面的Token接口的数组。</target>
        </trans-unit>
        <trans-unit id="bcf1f4affa5a7dea7c1e9653f4ab221ce29cdab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Program&lt;/code&gt; node:</source>
          <target state="translated">该 &lt;code&gt;Program&lt;/code&gt; 节点：</target>
        </trans-unit>
        <trans-unit id="70ccd03ac71f531e40460156a41567e273392912" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RegExp&lt;/code&gt; constructor function, e.g., &lt;code&gt;new RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt; or &lt;code&gt;RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;RegExp&lt;/code&gt; 的构造函数，例如， &lt;code&gt;new RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt; 或 &lt;code&gt;RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="18ac7817ce0d8138e79809c23852f9087177a2fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleTester#run()&lt;/code&gt; method is used to run the tests. It should be passed the following arguments:</source>
          <target state="translated">所述 &lt;code&gt;RuleTester#run()&lt;/code&gt; 方法被用来运行测试。应该传递以下参数：</target>
        </trans-unit>
        <trans-unit id="e3f4c9bab5a0c5a3adc959e3a3fdfbbb58b5ebf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleTester&lt;/code&gt; constructor accepts an optional object argument, which can be used to specify defaults for your test cases. For example, if all of your test cases use ES2015, you can set it as a default:</source>
          <target state="translated">该 &lt;code&gt;RuleTester&lt;/code&gt; 构造函数接受一个可选的对象参数，它可以用来指定测试用例的默认值。例如，如果所有测试用例都使用ES2015，则可以将其设置为默认值：</target>
        </trans-unit>
        <trans-unit id="3a5077bac9449562ad14f14c5e522a6fd8f8637a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; constructor strips Unicode BOM. Please note the AST also should be parsed from stripped text.</source>
          <target state="translated">该 &lt;code&gt;SourceCode&lt;/code&gt; 构造条的Unicode BOM。请注意，AST也应从剥离的文本中进行解析。</target>
        </trans-unit>
        <trans-unit id="db75fab00b139e2cb8ebf27b845a2a26e0849306" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; constructor throws an error if the AST is missing any of the required information.</source>
          <target state="translated">该 &lt;code&gt;SourceCode&lt;/code&gt; 构造函数抛出如果AST缺少任何所需信息的错误。</target>
        </trans-unit>
        <trans-unit id="1218e56286f97f65b8425325264eb5a0d40ee097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; object is the main object for getting more information about the source code being linted. You can retrieve the &lt;code&gt;SourceCode&lt;/code&gt; object at any time by using the &lt;code&gt;getSourceCode()&lt;/code&gt; method:</source>
          <target state="translated">的 &lt;code&gt;SourceCode&lt;/code&gt; 对象是获得更多有关的源代码被LINTED的主要对象。您可以随时使用 &lt;code&gt;getSourceCode()&lt;/code&gt; 方法检索 &lt;code&gt;SourceCode&lt;/code&gt; 对象：</target>
        </trans-unit>
        <trans-unit id="479675aca73cae5c11d5d90c4454a08ce8e61d27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; type represents the parsed source code that ESLint executes on. It's used internally in ESLint and is also available so that already-parsed code can be used. You can create a new instance of &lt;code&gt;SourceCode&lt;/code&gt; by passing in the text string representing the code and an abstract syntax tree (AST) in &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt; format (including location information, range information, comments, and tokens):</source>
          <target state="translated">的 &lt;code&gt;SourceCode&lt;/code&gt; 类型表示所解析的源代码，ESLint上执行。它在ESLint内部使用，并且也可用，以便可以使用已经解析的代码。您可以通过传入表示代码的文本字符串和&lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;格式的抽象语法树（AST）（包括位置信息，范围信息，注释和标记）来创建 &lt;code&gt;SourceCode&lt;/code&gt; 的新实例：</target>
        </trans-unit>
        <trans-unit id="0f460ba3a888cb7885538cd22b45cfa2e1993d93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol&lt;/code&gt; function may have an optional description:</source>
          <target state="translated">该 &lt;code&gt;Symbol&lt;/code&gt; 功能可能有一个可选的描述：</target>
        </trans-unit>
        <trans-unit id="2d21736c63a542408cd25bebb0064399dafd3380" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Tag&lt;/code&gt; is one of the following:</source>
          <target state="translated">该 &lt;code&gt;Tag&lt;/code&gt; 是以下情况之一：</target>
        </trans-unit>
        <trans-unit id="4017431bd4ca04209028b2fd7c8155020d0e96be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__iterator__&lt;/code&gt; property was a SpiderMonkey extension to JavaScript that could be used to create custom iterators that are compatible with JavaScript's &lt;code&gt;for in&lt;/code&gt; and &lt;code&gt;for each&lt;/code&gt; constructs. However, this property is now obsolete, so it should not be used. Here's an example of how this used to work:</source>
          <target state="translated">该 &lt;code&gt;__iterator__&lt;/code&gt; 财产是SpiderMonkey的扩展JavaScript代码可用于创建与JavaScript的兼容定制迭代器 &lt;code&gt;for in&lt;/code&gt; ，并 &lt;code&gt;for each&lt;/code&gt; 构造。但是，此属性现在已过时，因此不应使用。这是此工作方式的示例：</target>
        </trans-unit>
        <trans-unit id="5c5ed6ba19e731544b6cd87b09fe8abbca32c289" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_linter&lt;/code&gt; property has been removed in ESLint v5.0, so it is no longer possible to implement rules with this functionality. However, the &lt;a href=&quot;command-line-interface#--report-unused-disable-directives&quot;&gt;&lt;code&gt;--report-unused-disable-directives&lt;/code&gt;&lt;/a&gt; CLI flag can be used to flag unused directive comments.</source>
          <target state="translated">该 &lt;code&gt;_linter&lt;/code&gt; 属性已在ESLint V5.0被删除，因此它不再是可以实现这个功能的规则。但是，-- &lt;a href=&quot;command-line-interface#--report-unused-disable-directives&quot;&gt; &lt;code&gt;--report-unused-disable-directives&lt;/code&gt; &lt;/a&gt; CLI标志可用于标记未使用的指令注释。</target>
        </trans-unit>
        <trans-unit id="e9b2ca0a9deb95b8d07936a6b72107ed5085c1aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_linter&lt;/code&gt; property on rule context objects has been removed</source>
          <target state="translated">规则上下文对象的 &lt;code&gt;_linter&lt;/code&gt; 属性已删除</target>
        </trans-unit>
        <trans-unit id="1540bf038d822cce14da545ed574c51549eac1e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;align&lt;/code&gt; option can take additional configuration through the &lt;code&gt;beforeColon&lt;/code&gt;, &lt;code&gt;afterColon&lt;/code&gt;, &lt;code&gt;mode&lt;/code&gt;, and &lt;code&gt;on&lt;/code&gt; options.</source>
          <target state="translated">所述 &lt;code&gt;align&lt;/code&gt; 选项可以通过采取额外的配置 &lt;code&gt;beforeColon&lt;/code&gt; ， &lt;code&gt;afterColon&lt;/code&gt; ， &lt;code&gt;mode&lt;/code&gt; ，和 &lt;code&gt;on&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="d05ba21959dd3bd33b13539a51873b945545c638" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;allow&lt;/code&gt; option is an array of identifier names for which shadowing is allowed. For example, &lt;code&gt;&quot;resolve&quot;&lt;/code&gt;, &lt;code&gt;&quot;reject&quot;&lt;/code&gt;, &lt;code&gt;&quot;done&quot;&lt;/code&gt;, &lt;code&gt;&quot;cb&quot;&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;allow&lt;/code&gt; 选择是，其遮蔽允许标识符名称的数组。例如， &lt;code&gt;&quot;resolve&quot;&lt;/code&gt; ， &lt;code&gt;&quot;reject&quot;&lt;/code&gt; ， &lt;code&gt;&quot;done&quot;&lt;/code&gt; ， &lt;code&gt;&quot;cb&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a3afd6725b2244693e0d6e156a1e44afd3600d41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;args&lt;/code&gt; option has three settings:</source>
          <target state="translated">该 &lt;code&gt;args&lt;/code&gt; 选项有三个设置：</target>
        </trans-unit>
        <trans-unit id="4cadc8103349def3aa303140050911f6d8949c38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;argsIgnorePattern&lt;/code&gt; option specifies exceptions not to check for usage: arguments whose names match a regexp pattern. For example, variables whose names begin with an underscore.</source>
          <target state="translated">该 &lt;code&gt;argsIgnorePattern&lt;/code&gt; 选项指定的异常不检查用法：参数的名字是正规表达式匹配。例如，名称以下划线开头的变量。</target>
        </trans-unit>
        <trans-unit id="6bb74f27a7dcda830e7e3515e710fd44a61861b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bind()&lt;/code&gt; method is used to create functions with specific &lt;code&gt;this&lt;/code&gt; values and, optionally, binds arguments to specific values. When used to specify the value of &lt;code&gt;this&lt;/code&gt;, it's important that the function actually uses &lt;code&gt;this&lt;/code&gt; in its function body. For example:</source>
          <target state="translated">的 &lt;code&gt;bind()&lt;/code&gt; 方法用于具有特定创建函数 &lt;code&gt;this&lt;/code&gt; 值和任选地，结合参数的特定值。当用于指定 &lt;code&gt;this&lt;/code&gt; 的值时，重要的是函数必须在其函数主体中实际使用 &lt;code&gt;this&lt;/code&gt; 。例如：</target>
        </trans-unit>
        <trans-unit id="23c983ff96826f2c7de4f17b4756b8bba9663c70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;block-scoped-var&lt;/code&gt; rule generates warnings when variables are used outside of the block in which they were defined. This emulates C-style block scope.</source>
          <target state="translated">当在定义变量的块之外使用变量时， &lt;code&gt;block-scoped-var&lt;/code&gt; 规则将生成警告。这模拟了C样式的块作用域。</target>
        </trans-unit>
        <trans-unit id="53bdd73b3413849fa66b3556c625138c24847f8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;break outer&lt;/code&gt; statement ensures that this code will not result in an infinite loop because control is returned to the next statement after the &lt;code&gt;outer&lt;/code&gt; label was applied. If this statement was changed to be just &lt;code&gt;break&lt;/code&gt;, control would flow back to the outer &lt;code&gt;while&lt;/code&gt; statement and an infinite loop would result.</source>
          <target state="translated">该 &lt;code&gt;break outer&lt;/code&gt; 语句确保该代码不会导致无限循环，因为后控制返回到下一条语句 &lt;code&gt;outer&lt;/code&gt; 应用的标签。如果将此语句更改为 &lt;code&gt;break&lt;/code&gt; ，控制权将流回外部 &lt;code&gt;while&lt;/code&gt; 语句，从而导致无限循环。</target>
        </trans-unit>
        <trans-unit id="e35e957bc5c45db7810cd6dc9b85c777f96b5c7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;browser&lt;/code&gt; environment has many built-in global variables (for example, &lt;code&gt;top&lt;/code&gt;). Some of built-in global variables cannot be redeclared.</source>
          <target state="translated">在 &lt;code&gt;browser&lt;/code&gt; 环境中有很多内置的全局变量（例如， &lt;code&gt;top&lt;/code&gt; ）。某些内置全局变量无法重新声明。</target>
        </trans-unit>
        <trans-unit id="9c91130ea2cd4ecd093fc52993fc6956e053783c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;builtinGlobals&lt;/code&gt; option is &lt;code&gt;false&lt;/code&gt; by default. If it is &lt;code&gt;true&lt;/code&gt;, the rule prevents shadowing of built-in global variables: &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, and so on.</source>
          <target state="translated">默认情况下， &lt;code&gt;builtinGlobals&lt;/code&gt; 选项为 &lt;code&gt;false&lt;/code&gt; 。如果为 &lt;code&gt;true&lt;/code&gt; ，则该规则将防止隐藏全局全局变量： &lt;code&gt;Object&lt;/code&gt; ， &lt;code&gt;Array&lt;/code&gt; ， &lt;code&gt;Number&lt;/code&gt; 等。</target>
        </trans-unit>
        <trans-unit id="2e369ffae5876263cbc79c574ac64d2933232f47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;call/apply/bind&lt;/code&gt; method of the function is called directly.</source>
          <target state="translated">该函数的 &lt;code&gt;call/apply/bind&lt;/code&gt; 方法被直接调用。</target>
        </trans-unit>
        <trans-unit id="980901839cc98d894fc636088c44f1085352a1ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;caughtErrors&lt;/code&gt; option is used for &lt;code&gt;catch&lt;/code&gt; block arguments validation.</source>
          <target state="translated">该 &lt;code&gt;caughtErrors&lt;/code&gt; 选项用于 &lt;code&gt;catch&lt;/code&gt; 块参数验证。</target>
        </trans-unit>
        <trans-unit id="ce4f2ac1f670fbb48541447196e9d9315225fdf2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;caughtErrorsIgnorePattern&lt;/code&gt; option specifies exceptions not to check for usage: catch arguments whose names match a regexp pattern. For example, variables whose names begin with a string 'ignore'.</source>
          <target state="translated">该 &lt;code&gt;caughtErrorsIgnorePattern&lt;/code&gt; 选项指定的异常不检查用法：捕捉参数名称匹配一个正规表达式模式。例如，名称以字符串'ignore'开头的变量。</target>
        </trans-unit>
        <trans-unit id="8b0cd31aec7aa29af2f5a3abfb81a77e7a641899" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cli&lt;/code&gt; object</source>
          <target state="translated">该 &lt;code&gt;cli&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="6a94eb63df1e6ac352e9b186b0e6694f22a6e525" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cli&lt;/code&gt; object is the API for the command line interface. Literally, the &lt;code&gt;bin/eslint.js&lt;/code&gt; file simply passes arguments to the &lt;code&gt;cli&lt;/code&gt; object and then sets &lt;code&gt;process.exitCode&lt;/code&gt; to the returned exit code.</source>
          <target state="translated">该 &lt;code&gt;cli&lt;/code&gt; 对象是命令行界面的API。从字面上看， &lt;code&gt;bin/eslint.js&lt;/code&gt; 文件只是将参数传递给 &lt;code&gt;cli&lt;/code&gt; 对象，然后将 &lt;code&gt;process.exitCode&lt;/code&gt; 设置为返回的退出代码。</target>
        </trans-unit>
        <trans-unit id="cdf300be717f0ef1b9048b6ac9761ea3a6565f01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;comma-dangle&lt;/code&gt; rule is now more strict by default</source>
          <target state="translated">默认情况下， &lt;code&gt;comma-dangle&lt;/code&gt; 规则现在更加严格</target>
        </trans-unit>
        <trans-unit id="b16f7c12a77c8c69c18c6cd7c66a8ffbf55f6b7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context.getScope()&lt;/code&gt; method now returns more proper scopes</source>
          <target state="translated">该 &lt;code&gt;context.getScope()&lt;/code&gt; 方法现在返回更适当的范围</target>
        </trans-unit>
        <trans-unit id="922325a01666733ad05e06be2a7e01ae31e121a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; object contains additional functionality that is helpful for rules to do their jobs. As the name implies, the &lt;code&gt;context&lt;/code&gt; object contains information that is relevant to the context of the rule. The &lt;code&gt;context&lt;/code&gt; object has the following properties:</source>
          <target state="translated">该 &lt;code&gt;context&lt;/code&gt; 对象包含的附加功能是有帮助的规则来完成他们的工作。顾名思义， &lt;code&gt;context&lt;/code&gt; 对象包含与规则的上下文相关的信息。所述 &lt;code&gt;context&lt;/code&gt; 对象具有以下属性：</target>
        </trans-unit>
        <trans-unit id="42b1848493047b28e69ceb4cc9991185d8cabd5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;continue&lt;/code&gt; statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration. When used incorrectly it makes code less testable, less readable and less maintainable. Structured control flow statements such as &lt;code&gt;if&lt;/code&gt; should be used instead.</source>
          <target state="translated">将 &lt;code&gt;continue&lt;/code&gt; 在当前或标签的循环的当前迭代的陈述语句终止执行，并继续下一个迭代循环的执行。如果使用不当，它将使代码的可测试性，可读性和可维护性降低。应该使用结构化的控制流语句，例如 &lt;code&gt;if&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b85184b855dad09a62d467252a42e39fc124a249" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; Argument</source>
          <target state="translated">该 &lt;code&gt;data&lt;/code&gt; 论证</target>
        </trans-unit>
        <trans-unit id="78eb3b7cfb10f4790691c3c7134c3e3e580dff94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;debugger&lt;/code&gt; statement is used to tell the executing JavaScript environment to stop execution and start up a debugger at the current point in the code. This has fallen out of favor as a good practice with the advent of modern debugging and development tools. Production code should definitely not contain &lt;code&gt;debugger&lt;/code&gt;, as it will cause the browser to stop executing code and open an appropriate debugger.</source>
          <target state="translated">在 &lt;code&gt;debugger&lt;/code&gt; 语句用来告诉执行JavaScript环境停止执行，并在代码中的当前点启动调试器。随着现代调试和开发工具的出现，这已不再是一种好的做法。生产代码绝对不应包含 &lt;code&gt;debugger&lt;/code&gt; ，因为它将导致浏览器停止执行代码并打开适当的调试器。</target>
        </trans-unit>
        <trans-unit id="64766836102f731f14e0abe461d47d745b9f3795" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">语句的 &lt;code&gt;do&lt;/code&gt; 类应具有以下形式：</target>
        </trans-unit>
        <trans-unit id="0d9bf1e7a06807b0d9dd6dee731608e28dac63d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmaFeatures.modules&lt;/code&gt; flag has been replaced by a &lt;code&gt;sourceType&lt;/code&gt; property under &lt;code&gt;parserOptions&lt;/code&gt; which can be set to &lt;code&gt;&quot;script&quot;&lt;/code&gt; (default) or &lt;code&gt;&quot;module&quot;&lt;/code&gt; for ES6 modules.</source>
          <target state="translated">所述 &lt;code&gt;ecmaFeatures.modules&lt;/code&gt; 标志已被替换为 &lt;code&gt;sourceType&lt;/code&gt; 的下属性 &lt;code&gt;parserOptions&lt;/code&gt; 其可以被设置为 &lt;code&gt;&quot;script&quot;&lt;/code&gt; （默认）或 &lt;code&gt;&quot;module&quot;&lt;/code&gt; 用于ES6模块。</target>
        </trans-unit>
        <trans-unit id="114daf2c10a876d1a0119d1127fb9645cebbe320" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmaFeatures&lt;/code&gt; property is now under a top-level &lt;code&gt;parserOptions&lt;/code&gt; property.</source>
          <target state="translated">该 &lt;code&gt;ecmaFeatures&lt;/code&gt; 属性现在是下一个顶级 &lt;code&gt;parserOptions&lt;/code&gt; 财产。</target>
        </trans-unit>
        <trans-unit id="e77d2b26470f6a64bf6847f6dfa1ccf21481c369" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmaVersion&lt;/code&gt; parser option is set to something other than a number, such as the string &lt;code&gt;&quot;2015&quot;&lt;/code&gt;. (Previously, a non-number option would simply be ignored.)</source>
          <target state="translated">该 &lt;code&gt;ecmaVersion&lt;/code&gt; 解析器选项设置为比一些其他的东西，如字符串 &lt;code&gt;&quot;2015&quot;&lt;/code&gt; 。（以前，非数字选项将被忽略。）</target>
        </trans-unit>
        <trans-unit id="e8001be05979a363d68c0b97cd9a4ec677d66ab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint --init&lt;/code&gt; command can create a configuration so you can extend a popular style guide (for example, &lt;code&gt;eslint-config-standard&lt;/code&gt;).</source>
          <target state="translated">所述 &lt;code&gt;eslint --init&lt;/code&gt; 命令可以创建一个配置，以便可以延长一个流行的款式引导（例如， &lt;code&gt;eslint-config-standard&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="76fc19e1d805a61118a2c1a81a45040f447d9365" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint --init&lt;/code&gt; command can create a configuration so you can extend the recommended rules.</source>
          <target state="translated">该 &lt;code&gt;eslint --init&lt;/code&gt; 命令可以创建一个配置，这样可以延长建议的规则。</target>
        </trans-unit>
        <trans-unit id="c4229b7a6eefed924206c9eb78fcfba7b8bfcf1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint-plugin-&lt;/code&gt; prefix can be omitted for non-scoped packages</source>
          <target state="translated">该 &lt;code&gt;eslint-plugin-&lt;/code&gt; 前缀可以为非范围的包被忽略</target>
        </trans-unit>
        <trans-unit id="61707a8cc213e8d436fdfb7b834fbdfa71c295b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint-tester&lt;/code&gt; module, which has long been the primary tester for ESLint rules, has now been moved into the &lt;code&gt;eslint&lt;/code&gt; module. This was the result of a difficult relationship between these two modules that created circular dependencies and was causing a lot of problems in rule tests. Moving the tester into the &lt;code&gt;eslint&lt;/code&gt; module fixed a lot of those issues.</source>
          <target state="translated">所述 &lt;code&gt;eslint-tester&lt;/code&gt; 模块，这早已为ESLint规则的主测试仪，现已移入 &lt;code&gt;eslint&lt;/code&gt; 模块。这是由于这两个模块之间的困难关系导致循环依赖，并在规则测试中引起了很多问题。将测试仪移到 &lt;code&gt;eslint&lt;/code&gt; 模块中解决了许多问题。</target>
        </trans-unit>
        <trans-unit id="8900c3358f2163358ec0b84e6c957c7b7bbbb087" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint.linter&lt;/code&gt; object (deprecated) is an instance of the &lt;code&gt;Linter&lt;/code&gt; class as defined &lt;a href=&quot;#linter&quot;&gt;above&lt;/a&gt;. &lt;code&gt;eslint.linter&lt;/code&gt; exists for backwards compatibility, but we do not recommend using it because any mutations to it are shared among every module that uses &lt;code&gt;eslint&lt;/code&gt;. Instead, please create your own instance of &lt;code&gt;eslint.Linter&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;eslint.linter&lt;/code&gt; 对象（不推荐）是实例 &lt;code&gt;Linter&lt;/code&gt; 定义类&lt;a href=&quot;#linter&quot;&gt;以上&lt;/a&gt;。 &lt;code&gt;eslint.linter&lt;/code&gt; 是为了向后兼容而存在的，但我们不建议您使用它，因为在使用 &lt;code&gt;eslint&lt;/code&gt; 的每个模块之间都共享对它的任何突变。相反，请创建自己的 &lt;code&gt;eslint.Linter&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="d379a4d77b2607390afe7d33df57381bc7286ee9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint.linter&lt;/code&gt; property is now non-enumerable</source>
          <target state="translated">该 &lt;code&gt;eslint.linter&lt;/code&gt; 属性现在不可枚举</target>
        </trans-unit>
        <trans-unit id="a9a4221ba818f86c812a9ad87857f70725c68eaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; scope analysis property has been removed</source>
          <target state="translated">该 &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; 范围分析属性已被删除</target>
        </trans-unit>
        <trans-unit id="127d896dfbc583589aff8498ff51854129f845e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exceptMethods&lt;/code&gt; option allows you to pass an array of method names for which you would like to ignore warnings. For example, you might have a spec from an external library that requires you to overwrite a method as a regular function (and not as a static method) and does not use &lt;code&gt;this&lt;/code&gt; inside the function body. In this case, you can add that method to ignore in the warnings.</source>
          <target state="translated">该 &lt;code&gt;exceptMethods&lt;/code&gt; 选项允许你通过了，你想忽略警告的方法名称的数组。例如，您可能有一个来自外部库的规范，该规范要求您将方法覆盖为常规函数（而不是静态方法），并且不要在函数体内使用 &lt;code&gt;this&lt;/code&gt; 方法。在这种情况下，您可以添加该方法以在警告中忽略。</target>
        </trans-unit>
        <trans-unit id="8077695416ecc34868ba7b9a8633341faa182787" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exceptions&lt;/code&gt; option allows you to pass an array of methods names you'd like to continue to use in the old style.</source>
          <target state="translated">该 &lt;code&gt;exceptions&lt;/code&gt; 选项允许你传递方法的名称数组你想继续在旧的风格来使用。</target>
        </trans-unit>
        <trans-unit id="252d44a66cbab7b2a0ad26d5562589f321a9a54d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option has been deprecated</source>
          <target state="translated">该 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; 选项已被弃用</target>
        </trans-unit>
        <trans-unit id="837260e2c2d2bb0e44d170f7a8580e9382461154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can be &lt;code&gt;&quot;eslint:all&quot;&lt;/code&gt; to enable all core rules in the currently installed version of ESLint. The set of core rules can change at any minor or major version of ESLint.</source>
          <target state="translated">该 &lt;code&gt;extends&lt;/code&gt; 属性值可以是 &lt;code&gt;&quot;eslint:all&quot;&lt;/code&gt; ，以使在ESLint当前安装的版本中的所有核心规则。核心规则集可以在ESLint的任何次要或主要版本上更改。</target>
        </trans-unit>
        <trans-unit id="6b1c15d923b6c7281b7fb8242da0395d1224b9fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can be an absolute or relative path to a base &lt;a href=&quot;#using-configuration-files&quot;&gt;configuration file&lt;/a&gt;. ESLint resolves a relative path to a base configuration file relative to the configuration file that uses it.</source>
          <target state="translated">的 &lt;code&gt;extends&lt;/code&gt; 属性值可以是在基座的绝对或相对路径&lt;a href=&quot;#using-configuration-files&quot;&gt;的配置文件&lt;/a&gt;。ESLint解析基本配置文件相对于使用它的配置文件的相对路径。</target>
        </trans-unit>
        <trans-unit id="5fa785db2037479c7f03a5b52934be5b58f71e97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can consist of:</source>
          <target state="translated">该 &lt;code&gt;extends&lt;/code&gt; 属性值可以包括：</target>
        </trans-unit>
        <trans-unit id="003522290cdebe1b2fbd30a1f0cbdc59c0904961" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can omit the &lt;code&gt;eslint-config-&lt;/code&gt; prefix of the package name.</source>
          <target state="translated">该 &lt;code&gt;extends&lt;/code&gt; 属性值可以省略 &lt;code&gt;eslint-config-&lt;/code&gt; 包名称的前缀。</target>
        </trans-unit>
        <trans-unit id="0a2b44eee9bddc2d60e480fea08a5f4ceb3bdae2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value is either:</source>
          <target state="translated">该 &lt;code&gt;extends&lt;/code&gt; 属性值可以是：</target>
        </trans-unit>
        <trans-unit id="1cb5e8d9c216034fade7c978ad13805a9c312bc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fixer&lt;/code&gt; object has the following methods:</source>
          <target state="translated">该 &lt;code&gt;fixer&lt;/code&gt; 对象有以下方法：</target>
        </trans-unit>
        <trans-unit id="a3edba7f97a325dd3428ee6498ff770178efa766" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">语句的 &lt;code&gt;for&lt;/code&gt; 类应具有以下形式：</target>
        </trans-unit>
        <trans-unit id="d49f70042d3e336aa930fa3d8a67c5746bfb590f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;global&lt;/code&gt; property in the &lt;code&gt;linter.verify()&lt;/code&gt; API is no longer supported</source>
          <target state="translated">不再支持 &lt;code&gt;linter.verify()&lt;/code&gt; API中的 &lt;code&gt;global&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="21aab0ed37e0be4d941cff2e17dc050a87694419" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hoist&lt;/code&gt; option has three settings:</source>
          <target state="translated">该 &lt;code&gt;hoist&lt;/code&gt; 选项有三个设置：</target>
        </trans-unit>
        <trans-unit id="462609b8b9ea4983f2b2d00bf8596dc0d30d89b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">语句的 &lt;code&gt;if&lt;/code&gt; 类应具有以下形式：</target>
        </trans-unit>
        <trans-unit id="0d8118a2bec951d156bb19df18c746496e386f70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignorePattern&lt;/code&gt; object takes a string value, which is used as a regular expression applied to the first word of a comment.</source>
          <target state="translated">所述 &lt;code&gt;ignorePattern&lt;/code&gt; 对象需要一个字符串值，作为施加到一个注释的第一个字中的正则表达式，其被使用。</target>
        </trans-unit>
        <trans-unit id="ae972c6712702d048215995c50a75a39891b07a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignorePatterns&lt;/code&gt; property affects only the directory that the config file placed.</source>
          <target state="translated">该 &lt;code&gt;ignorePatterns&lt;/code&gt; 属性只影响配置文件放置的目录。</target>
        </trans-unit>
        <trans-unit id="b5e9061da183286584b4711c4a63bfba8da71be2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignoreRestSiblings&lt;/code&gt; option is a boolean (default: &lt;code&gt;false&lt;/code&gt;). Using a &lt;a href=&quot;https://github.com/tc39/proposal-object-rest-spread&quot;&gt;Rest Property&lt;/a&gt; it is possible to &quot;omit&quot; properties from an object, but by default the sibling properties are marked as &quot;unused&quot;. With this option enabled the rest property's siblings are ignored.</source>
          <target state="translated">该 &lt;code&gt;ignoreRestSiblings&lt;/code&gt; 选项是一个布尔值（默认值： &lt;code&gt;false&lt;/code&gt; ）。使用&lt;a href=&quot;https://github.com/tc39/proposal-object-rest-spread&quot;&gt;Rest属性&lt;/a&gt;可以从对象中&amp;ldquo;忽略&amp;rdquo;属性，但是默认情况下，同级属性被标记为&amp;ldquo;未使用&amp;rdquo;。启用此选项后，将忽略rest属性的同级。</target>
        </trans-unit>
        <trans-unit id="85cb7a860cbd820f9d90f12cf28b759ca78ece90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;indent&lt;/code&gt; rule is more strict</source>
          <target state="translated">该 &lt;code&gt;indent&lt;/code&gt; 规则更为严格</target>
        </trans-unit>
        <trans-unit id="7da93c489e9178d0f216041fee0bdfd9d92b14f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main&lt;/code&gt; entry should be the JavaScript file implementing your custom formatter.</source>
          <target state="translated">在 &lt;code&gt;main&lt;/code&gt; 入口应该是实现您的自定义格式的JavaScript文件。</target>
        </trans-unit>
        <trans-unit id="b638eabe7da26a08a3d704c7037df4934e4bc5a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max-statements&lt;/code&gt; rule allows you to specify the maximum number of statements allowed in a function.</source>
          <target state="translated">在 &lt;code&gt;max-statements&lt;/code&gt; 规则允许您指定允许在函数语句的最大数量。</target>
        </trans-unit>
        <trans-unit id="a13c3e797d7391ff2cce66ebe8056f876d975eb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;message&lt;/code&gt; Object</source>
          <target state="translated">该 &lt;code&gt;message&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="7cfb0e1495e0c320f6699634a8ccde094dae7f26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;multiLine&lt;/code&gt; and &lt;code&gt;align&lt;/code&gt; options can differ, which allows for fine-tuned control over the &lt;code&gt;key-spacing&lt;/code&gt; of your files. &lt;code&gt;align&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; inherit from &lt;code&gt;multiLine&lt;/code&gt; if &lt;code&gt;align&lt;/code&gt; is configured as an object.</source>
          <target state="translated">该 &lt;code&gt;multiLine&lt;/code&gt; 和 &lt;code&gt;align&lt;/code&gt; 选项可以不同，它允许对微调控制 &lt;code&gt;key-spacing&lt;/code&gt; 您的文件。 &lt;code&gt;align&lt;/code&gt; 将&lt;strong&gt;不&lt;/strong&gt;从继承 &lt;code&gt;multiLine&lt;/code&gt; 如果 &lt;code&gt;align&lt;/code&gt; 被配置为一个对象。</target>
        </trans-unit>
        <trans-unit id="d09e48c81deff2fe74829687d8d386203bf2e1ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new Promise&lt;/code&gt; constructor accepts an &lt;em&gt;executor&lt;/em&gt; function as an argument, which has &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; parameters that can be used to control the state of the created Promise. For example:</source>
          <target state="translated">该 &lt;code&gt;new Promise&lt;/code&gt; 构造函数接受的&lt;em&gt;执行&lt;/em&gt;功能作为一个参数，其具有 &lt;code&gt;resolve&lt;/code&gt; 和 &lt;code&gt;reject&lt;/code&gt; ，可以用来控制所创建的无极的状态参数。例如：</target>
        </trans-unit>
        <trans-unit id="098f4a5cbac65ca4cffcaba3c9ba560edcebc8fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; operator in JavaScript creates a new instance of a particular type of object. That type of object is represented by a constructor function. Since constructor functions are just regular functions, the only defining characteristic is that &lt;code&gt;new&lt;/code&gt; is being used as part of the call. Native JavaScript functions begin with an uppercase letter to distinguish those functions that are to be used as constructors from functions that are not. Many style guides recommend following this pattern to more easily determine which functions are to be used as constructors.</source>
          <target state="translated">JavaScript中的 &lt;code&gt;new&lt;/code&gt; 运算符会创建特定类型对象的新实例。该类型的对象由构造函数表示。由于构造函数只是常规函数，因此唯一的定义特征是将 &lt;code&gt;new&lt;/code&gt; 用作调用的一部分。本机JavaScript函数以大写字母开头，以区分那些将用作构造函数的函数与未使用的函数。许多样式指南建议遵循此模式，以便更轻松地确定将哪些函数用作构造函数。</target>
        </trans-unit>
        <trans-unit id="4b9844e9b711c0c78b88e1df4f24b4e7ffcc90b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-confusing-arrow&lt;/code&gt; rule is now more lenient by default</source>
          <target state="translated">默认情况下， &lt;code&gt;no-confusing-arrow&lt;/code&gt; 规则现在更加宽松</target>
        </trans-unit>
        <trans-unit id="6d1a64da4353dccbefcdf2ee522647ae870b3b07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-eq-null&lt;/code&gt; rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to &lt;code&gt;null&lt;/code&gt; only match &lt;code&gt;null&lt;/code&gt;, and not also &lt;code&gt;undefined&lt;/code&gt;. As such it will flag comparisons to null when using &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;no-eq-null&lt;/code&gt; 规则旨在通过确保比较，以减少潜在的错误和不必要的行为 &lt;code&gt;null&lt;/code&gt; 只匹配 &lt;code&gt;null&lt;/code&gt; ，而不是还 &lt;code&gt;undefined&lt;/code&gt; 。这样，当使用 &lt;code&gt;==&lt;/code&gt; 和 &lt;code&gt;!=&lt;/code&gt; 时，它将比较标记为null 。</target>
        </trans-unit>
        <trans-unit id="2cf7599f9ca5e81f4584651a246f272a61b94bee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-magic-numbers&lt;/code&gt; rule aims to make code more readable and refactoring easier by ensuring that special numbers are declared as constants to make their meaning explicit.</source>
          <target state="translated">在 &lt;code&gt;no-magic-numbers&lt;/code&gt; 规则的目的是使代码的可读性和重构，通过确保特殊号码被声明为常量，使他们的意思是明确的容易。</target>
        </trans-unit>
        <trans-unit id="584d3863241e3dd7bef2bc890fe46f1e0dacede5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-multi-spaces&lt;/code&gt; rule is more strict by default</source>
          <target state="translated">默认情况下， &lt;code&gt;no-multi-spaces&lt;/code&gt; 规则更加严格</target>
        </trans-unit>
        <trans-unit id="22f51e16b3d2fa232175e558615aef4ba7d91884" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-nested-ternary&lt;/code&gt; rule disallows nested ternary expressions.</source>
          <target state="translated">在 &lt;code&gt;no-nested-ternary&lt;/code&gt; 规则不允许嵌套的三元运算表达式。</target>
        </trans-unit>
        <trans-unit id="116b22d947fe1ce535309217a88923e033d53bfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-redeclare&lt;/code&gt; rule is now more strict by default</source>
          <target state="translated">默认情况下， &lt;code&gt;no-redeclare&lt;/code&gt; 规则现在更加严格</target>
        </trans-unit>
        <trans-unit id="0aeabea2c1edc1a249245bfe09f229e42dd63ee8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;npm run perf&lt;/code&gt; command gives a high-level overview of ESLint running time with default rules (&lt;code&gt;eslint:recommended&lt;/code&gt;) enabled.</source>
          <target state="translated">在 &lt;code&gt;npm run perf&lt;/code&gt; 命令给出的默认规则（ESLint运行时间的一个高度概括 &lt;code&gt;eslint:recommended&lt;/code&gt; ）启用。</target>
        </trans-unit>
        <trans-unit id="02b6ae240bb49fb262b6c6c5aa5ce3a0f704dc54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onlyEquality&lt;/code&gt; option allows a superset of the exceptions which &lt;code&gt;exceptRange&lt;/code&gt; allows, thus both options are not useful together.</source>
          <target state="translated">所述 &lt;code&gt;onlyEquality&lt;/code&gt; 选项允许该例外的超集 &lt;code&gt;exceptRange&lt;/code&gt; 允许，从而这两个选项是没有用在一起。</target>
        </trans-unit>
        <trans-unit id="3664b7a3e8295f10c165e69c19822430ecc4a8ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; property must be an array of options. This gets passed through to &lt;code&gt;context.options&lt;/code&gt; in the rule.</source>
          <target state="translated">的 &lt;code&gt;options&lt;/code&gt; 属性必须是一组选项。这将传递到规则中的 &lt;code&gt;context.options&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="138b40a2090025ead37bb2b810503f00fc28051a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;padded-blocks&lt;/code&gt; rule is more strict by default</source>
          <target state="translated">默认情况下， &lt;code&gt;padded-blocks&lt;/code&gt; 规则更严格</target>
        </trans-unit>
        <trans-unit id="8d637daeacbd8ce09ca4965da79910941e8f067c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; property of AST nodes is now set before rules start running</source>
          <target state="translated">现在，在规则开始运行之前已设置AST节点的 &lt;code&gt;parent&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="ac6604963767894ebe97a28abec444c272e929c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; property of all nodes must be rewritable. ESLint sets each node's &lt;code&gt;parent&lt;/code&gt; property to its parent node while traversing, before any rules have access to the AST.</source>
          <target state="translated">所有节点的 &lt;code&gt;parent&lt;/code&gt; 属性必须是可重写的。在任何规则都可以访问AST之前，ESLint会在遍历时将每个节点的 &lt;code&gt;parent&lt;/code&gt; 属性设置为其父节点。</target>
        </trans-unit>
        <trans-unit id="853c13962a666c12683d5753aa639223e6ad5a5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; property of all nodes must be rewriteable. ESLint sets each node's &lt;code&gt;parent&lt;/code&gt; property to its parent node while traversing, before any rules have access to the AST.</source>
          <target state="translated">所有节点的 &lt;code&gt;parent&lt;/code&gt; 属性必须是可重写的。在任何规则都可以访问AST之前，ESLint会在遍历时将每个节点的 &lt;code&gt;parent&lt;/code&gt; 属性设置为其父节点。</target>
        </trans-unit>
        <trans-unit id="944a63b184acd73eda9811179639d595d02aa85d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseInt()&lt;/code&gt; and &lt;code&gt;Number.parseInt()&lt;/code&gt; functions can be used to turn binary, octal, and hexadecimal strings into integers. As binary, octal, and hexadecimal literals are supported in ES6, this rule encourages use of those numeric literals instead of &lt;code&gt;parseInt()&lt;/code&gt; or &lt;code&gt;Number.parseInt()&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;parseInt()&lt;/code&gt; 和 &lt;code&gt;Number.parseInt()&lt;/code&gt; 函数可以被用来打开的二进制，八进制，和十六进制字符串到整数。由于ES6支持二进制，八进制和十六进制文字，因此此规则鼓励使用这些数字文字而不是 &lt;code&gt;parseInt()&lt;/code&gt; 或 &lt;code&gt;Number.parseInt()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6a8b14c45ea844b14e7b8898d1ed3a957925154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;plugins&lt;/code&gt;&lt;a href=&quot;#configuring-plugins&quot;&gt;property value&lt;/a&gt; can omit the &lt;code&gt;eslint-plugin-&lt;/code&gt; prefix of the package name.</source>
          <target state="translated">该 &lt;code&gt;plugins&lt;/code&gt; &lt;a href=&quot;#configuring-plugins&quot;&gt;的属性值&lt;/a&gt;可以省略 &lt;code&gt;eslint-plugin-&lt;/code&gt; 包名称的前缀。</target>
        </trans-unit>
        <trans-unit id="379ae11932b2a6155c0dd857a96208194dd56ffa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;position&lt;/code&gt; option has two settings:</source>
          <target state="translated">该 &lt;code&gt;position&lt;/code&gt; 选项有两个设置：</target>
        </trans-unit>
        <trans-unit id="c999b4122281345d94d147575183f7bf02e84b31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.env&lt;/code&gt; object in Node.js is used to store deployment/configuration parameters. Littering it through out a project could lead to maintenance issues as it's another kind of global dependency. As such, it could lead to merge conflicts in a multi-user setup and deployment issues in a multi-server setup. Instead, one of the best practices is to define all those parameters in a single configuration/settings file which could be accessed throughout the project.</source>
          <target state="translated">Node.js中的 &lt;code&gt;process.env&lt;/code&gt; 对象用于存储部署/配置参数。在整个项目中乱扔垃圾可能会导致维护问题，因为它是另一种全球依赖性。这样，它可能导致多用户设置中的合并冲突以及多服务器设置中的部署问题。相反，最佳实践之一是在单个配置/设置文件中定义所有这些参数，可以在整个项目中进行访问。</target>
        </trans-unit>
        <trans-unit id="53444e809ed43079efe95348d4604d7a24ea38a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.exit()&lt;/code&gt; method in Node.js is used to immediately stop the Node.js process and exit. This is a dangerous operation because it can occur in any method at any point in time, potentially stopping a Node.js application completely when an error occurs. For example:</source>
          <target state="translated">Node.js中的 &lt;code&gt;process.exit()&lt;/code&gt; 方法用于立即停止Node.js进程并退出。这是危险的操作，因为它可能在任何时间出现在任何方法中，有可能在发生错误时完全停止Node.js应用程序。例如：</target>
        </trans-unit>
        <trans-unit id="00253dead4a64430ced775a37d1801dbac8821d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;quotes&lt;/code&gt; rule in this example has one option, &lt;code&gt;&quot;double&quot;&lt;/code&gt; (the &lt;code&gt;2&lt;/code&gt; is the error level). You can retrieve the options for a rule by using &lt;code&gt;context.options&lt;/code&gt;, which is an array containing every configured option for the rule. In this case, &lt;code&gt;context.options[0]&lt;/code&gt; would contain &lt;code&gt;&quot;double&quot;&lt;/code&gt;:</source>
          <target state="translated">在此示例中， &lt;code&gt;quotes&lt;/code&gt; 规则具有一个选项 &lt;code&gt;&quot;double&quot;&lt;/code&gt; （ &lt;code&gt;2&lt;/code&gt; 是错误级别）。您可以使用 &lt;code&gt;context.options&lt;/code&gt; 检索规则的选项，context.options是一个数组，其中包含该规则的每个已配置选项。在这种情况下， &lt;code&gt;context.options[0]&lt;/code&gt; 将包含 &lt;code&gt;&quot;double&quot;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="15bbabad9361578bf4fae1f2a49b29be60fa376b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;quotes&lt;/code&gt; rule in this example has one option, &lt;code&gt;&quot;double&quot;&lt;/code&gt; (the &lt;code&gt;error&lt;/code&gt; is the error level). You can retrieve the options for a rule by using &lt;code&gt;context.options&lt;/code&gt;, which is an array containing every configured option for the rule. In this case, &lt;code&gt;context.options[0]&lt;/code&gt; would contain &lt;code&gt;&quot;double&quot;&lt;/code&gt;:</source>
          <target state="translated">在此示例中， &lt;code&gt;quotes&lt;/code&gt; 规则具有一个选项 &lt;code&gt;&quot;double&quot;&lt;/code&gt; （ &lt;code&gt;error&lt;/code&gt; 是错误级别）。您可以使用 &lt;code&gt;context.options&lt;/code&gt; 检索规则的选项，context.options是一个数组，其中包含该规则的每个已配置选项。在这种情况下， &lt;code&gt;context.options[0]&lt;/code&gt; 将包含 &lt;code&gt;&quot;double&quot;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="472145e67d0e65f7aa06bad378cebc04916b8bba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;range&lt;/code&gt; property contains two indexes in the code, referring to the start and end location of a contiguous section of text that will be replaced. The &lt;code&gt;text&lt;/code&gt; property refers to the text that will replace the given range.</source>
          <target state="translated">所述 &lt;code&gt;range&lt;/code&gt; 属性包含在代码两个索引，参考文本的连续部分，其将被替换的开始和结束位置。该 &lt;code&gt;text&lt;/code&gt; 属性指的是将取代指定范围内的文本。</target>
        </trans-unit>
        <trans-unit id="e4064f447f590c1765f1771747724c820f183198" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;report&lt;/code&gt; returned from &lt;code&gt;executeOnText()&lt;/code&gt; is in the same format as from &lt;code&gt;executeOnFiles()&lt;/code&gt;, but there is only ever one result in &lt;code&gt;report.results&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;report&lt;/code&gt; 从返回 &lt;code&gt;executeOnText()&lt;/code&gt; 是相同的格式从 &lt;code&gt;executeOnFiles()&lt;/code&gt; ，但始终只导致 &lt;code&gt;report.results&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="92953a45beba64856673b9e8fbcb1ed126d0847b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require&lt;/code&gt; function is used to include modules that exist in separate files, such as:</source>
          <target state="translated">的 &lt;code&gt;require&lt;/code&gt; 功能用于包括存在于单独的文件，如模块：</target>
        </trans-unit>
        <trans-unit id="064be5c0f666fc3e35b5524048c68a20f53a49bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;result&lt;/code&gt; Object</source>
          <target state="translated">该 &lt;code&gt;result&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="9af8b29a9523a61b024585850f17334d070e6e12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;results&lt;/code&gt; Object</source>
          <target state="translated">该 &lt;code&gt;results&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="61d30c932bc83cd2faa8787d31852a2a495de05f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;results&lt;/code&gt; object passed into a formatter is an array of objects containing the lint results for individual files. Here's some example output:</source>
          <target state="translated">传递给格式化程序的 &lt;code&gt;results&lt;/code&gt; 对象是一个对象数组，其中包含各个文件的皮棉结果。这是一些示例输出：</target>
        </trans-unit>
        <trans-unit id="3993cb0067ab7703186a7c2f2b6970449e1be544" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rules&lt;/code&gt; property can do any of the following to extend (or override) the set of rules:</source>
          <target state="translated">的 &lt;code&gt;rules&lt;/code&gt; 性可以做任何以下的延伸（或覆盖）的一组规则：</target>
        </trans-unit>
        <trans-unit id="561e9293e5a8d3ad27376df8faff3ae931698040" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; property is no longer available on individual linting messages</source>
          <target state="translated">该 &lt;code&gt;source&lt;/code&gt; 属性不再提供个人信息掉毛</target>
        </trans-unit>
        <trans-unit id="0a93eec94b022c4aa2a02db660060ca362fa877f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; parser option is set while &lt;code&gt;ecmaVersion&lt;/code&gt; is set to &lt;code&gt;5&lt;/code&gt; or left unspecified. (Previously, setting &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; would implicitly cause &lt;code&gt;ecmaVersion&lt;/code&gt; to be set to a minimum of 2015, which could be surprising.)</source>
          <target state="translated">该 &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; ，而解析器选项设置 &lt;code&gt;ecmaVersion&lt;/code&gt; 设定为 &lt;code&gt;5&lt;/code&gt; 或不指定。（以前，设置 &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; 会隐式地将 &lt;code&gt;ecmaVersion&lt;/code&gt; 设置为2015的最小值，这可能令人惊讶。）</target>
        </trans-unit>
        <trans-unit id="4c9529163ca9cdfc78596b70a0088a17d7d3a0b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceType&lt;/code&gt; is set to anything other than &lt;code&gt;&quot;script&quot;&lt;/code&gt; or &lt;code&gt;&quot;module&quot;&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;sourceType&lt;/code&gt; 的设置比其他任何东西 &lt;code&gt;&quot;script&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;module&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77552117314df4545a21208d082a3e6e878f860f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;space-before-function-paren&lt;/code&gt; rule is more strict by default</source>
          <target state="translated">在 &lt;code&gt;space-before-function-paren&lt;/code&gt; 规则是在默认情况下更加严格</target>
        </trans-unit>
        <trans-unit id="3f8f7815159b1b5e0f229864128c1f7bd11839da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">语句的 &lt;code&gt;switch&lt;/code&gt; 类应具有以下形式：</target>
        </trans-unit>
        <trans-unit id="e7bd19d734e1f9c5b8f9f98d650cecfc8c20f132" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; statement in JavaScript is one of the more error-prone constructs of the language thanks in part to the ability to &quot;fall through&quot; from one &lt;code&gt;case&lt;/code&gt; to the next. For example:</source>
          <target state="translated">JavaScript中的 &lt;code&gt;switch&lt;/code&gt; 语句是该语言中更容易出错的结构之一，部分原因是它能够从一种 &lt;code&gt;case&lt;/code&gt; 转移到另一种情况。例如：</target>
        </trans-unit>
        <trans-unit id="b828067e8b794059a7226d1fb4af5dcfec1299b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; statement internally uses the &lt;code&gt;===&lt;/code&gt; comparison to match the expression's value to a case clause. Therefore, it can never match &lt;code&gt;case NaN&lt;/code&gt;. Also, &lt;code&gt;switch(NaN)&lt;/code&gt; can never match a case clause.</source>
          <target state="translated">所述 &lt;code&gt;switch&lt;/code&gt; 语句在内部使用 &lt;code&gt;===&lt;/code&gt; 比较表达式的值匹配的情况下子句。因此，它永远无法匹配 &lt;code&gt;case NaN&lt;/code&gt; 。另外， &lt;code&gt;switch(NaN)&lt;/code&gt; 永远不能匹配case子句。</target>
        </trans-unit>
        <trans-unit id="2ada90da9d605eb89fdcd67423cc995f53e41596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">语句的 &lt;code&gt;try&lt;/code&gt; 类应具有以下形式：</target>
        </trans-unit>
        <trans-unit id="8692ce1aa1a507fdbc0506510178169257caaf18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u&lt;/code&gt; flag disables the recovering logic Annex B defined. As a result, you can find errors early. This is similar to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;the strict mode&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;u&lt;/code&gt; 标志禁用回收逻辑附件B中定义。因此，您可以及早发现错误。这类似于&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;严格模式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c13131f24eb9329164eba24a2cd91b75577b1971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;undefined&lt;/code&gt; variable in JavaScript is actually a property of the global object. As such, in ECMAScript 3 it was possible to overwrite the value of &lt;code&gt;undefined&lt;/code&gt;. While ECMAScript 5 disallows overwriting &lt;code&gt;undefined&lt;/code&gt;, it's still possible to shadow &lt;code&gt;undefined&lt;/code&gt;, such as:</source>
          <target state="translated">JavaScript中的 &lt;code&gt;undefined&lt;/code&gt; 变量实际上是全局对象的属性。因此，在ECMAScript 3中，可以覆盖 &lt;code&gt;undefined&lt;/code&gt; 的值。尽管ECMAScript 5不允许覆盖 &lt;code&gt;undefined&lt;/code&gt; ，但是仍然可以隐藏 &lt;code&gt;undefined&lt;/code&gt; ，例如：</target>
        </trans-unit>
        <trans-unit id="e4e9951e2f561acaf841dbfd8453226510314be0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vars-on-top&lt;/code&gt; rule generates warnings when variable declarations are not used serially at the top of a function scope or the top of a program. By default variable declarations are always moved (&amp;ldquo;hoisted&amp;rdquo;) invisibly to the top of their containing scope by the JavaScript interpreter. This rule forces the programmer to represent that behavior by manually moving the variable declaration to the top of its containing scope.</source>
          <target state="translated">如果在函数作用域的顶部或程序的顶部未连续使用变量声明，则 &lt;code&gt;vars-on-top&lt;/code&gt; 规则将生成警告。默认情况下，JavaScript解释器总是将变量声明不可见地移动（&amp;ldquo;提升&amp;rdquo;）到其包含范围的顶部。该规则通过手动将变量声明移至其包含范围的顶部来强制程序员表示该行为。</target>
        </trans-unit>
        <trans-unit id="8437526de99e51c9af62b182483b3c46ca377dbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vars&lt;/code&gt; option has two settings:</source>
          <target state="translated">该 &lt;code&gt;vars&lt;/code&gt; 选项有两个设置：</target>
        </trans-unit>
        <trans-unit id="7f313683e74a50e68d4d012882437f3a941bbebc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;varsIgnorePattern&lt;/code&gt; option specifies exceptions not to check for usage: variables whose names match a regexp pattern. For example, variables whose names contain &lt;code&gt;ignored&lt;/code&gt; or &lt;code&gt;Ignored&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;varsIgnorePattern&lt;/code&gt; 选项指定的异常不检查用法：变量，其名称是正规表达式匹配。例如，名称包含 &lt;code&gt;ignored&lt;/code&gt; 或 &lt;code&gt;Ignored&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="c6c8741b7358a7fc6ab1d9e9c87df7567465e2dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verify()&lt;/code&gt; method returns an array of objects containing information about the linting warnings and errors. Here's an example:</source>
          <target state="translated">的 &lt;code&gt;verify()&lt;/code&gt; 方法返回包含关于起绒警告和错误信息的对象的阵列。这是一个例子：</target>
        </trans-unit>
        <trans-unit id="8f646bffb41dff01a7acc0aab19c45366759c6bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; operator takes an operand and returns &lt;code&gt;undefined&lt;/code&gt;: &lt;code&gt;void expression&lt;/code&gt; will evaluate &lt;code&gt;expression&lt;/code&gt; and return &lt;code&gt;undefined&lt;/code&gt;. It can be used to ignore any side effects &lt;code&gt;expression&lt;/code&gt; may produce:</source>
          <target state="translated">该 &lt;code&gt;void&lt;/code&gt; 操作需要一个操作数，并返回 &lt;code&gt;undefined&lt;/code&gt; ： &lt;code&gt;void expression&lt;/code&gt; 将评估 &lt;code&gt;expression&lt;/code&gt; 和回报 &lt;code&gt;undefined&lt;/code&gt; 。它可以用于忽略 &lt;code&gt;expression&lt;/code&gt; 可能产生的任何副作用：</target>
        </trans-unit>
        <trans-unit id="2556ce629f24ecc77f8ee75b29af595f5d1ce4bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">在 &lt;code&gt;while&lt;/code&gt; 类的语句应该有如下形式：</target>
        </trans-unit>
        <trans-unit id="16267e1a7f6497f96f435d3ed8e9d95c9f05b4e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;with&lt;/code&gt; statement is potentially problematic because it adds members of an object to the current scope, making it impossible to tell what a variable inside the block actually refers to.</source>
          <target state="translated">该 &lt;code&gt;with&lt;/code&gt; ，因为它增加了一个对象的成员，以目前的范围，使它不可能告诉什么块中的变量实际上指的陈述可能存在问题。</target>
        </trans-unit>
        <trans-unit id="23d60138df9b187d83c9c312e2d8240dbd86a484" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;one true brace style&lt;/em&gt; is one of the most common brace styles in JavaScript, in which the opening brace of a block is placed on the same line as its corresponding statement or declaration. For example:</source>
          <target state="translated">在&lt;em&gt;一个真正的大括号的风格&lt;/em&gt;是在JavaScript中最常见的支柱款式，其中一个块的左大括号放在同一行及其相应的说明或声明中的一个。例如：</target>
        </trans-unit>
        <trans-unit id="318db8bc3442a0b948f2278731ddfaa2b3371483" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;upstream source&lt;/em&gt; is the main ESLint repository that active development happens on. While you won't have push access to upstream, you will have pull access, allowing you to pull in the latest code whenever you want.</source>
          <target state="translated">的&lt;em&gt;上游源&lt;/em&gt;是主ESLint存储库活性发展发生在。虽然您没有向上游的推送访问权限，但您将具有拉取访问权限，从而可以随时提取最新的代码。</target>
        </trans-unit>
        <trans-unit id="985796a6dfb39061b3806f06ead742513b9f7132" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;upstream source&lt;/em&gt; is the main ESLint repository where active development happens. While you won't have push access to upstream, you will have pull access, allowing you to pull in the latest code whenever you want.</source>
          <target state="translated">的&lt;em&gt;上游源&lt;/em&gt;是主ESLint储存库，积极开发发生。虽然您没有向上游的推送访问权限，但您将具有拉取访问权限，从而可以随时提取最新的代码。</target>
        </trans-unit>
        <trans-unit id="00a652484a4e470b827e739fbc799706911bd125" translate="yes" xml:space="preserve">
          <source>The AST specification</source>
          <target state="translated">AST规格</target>
        </trans-unit>
        <trans-unit id="e60cbbce8f620754c9d5e236855c0dfac9399492" translate="yes" xml:space="preserve">
          <source>The AST that custom parsers should create is based on &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;. The AST requires some additional properties about detail information of the source code.</source>
          <target state="translated">定制解析器应该创建的AST基于&lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;。AST需要有关源代码详细信息的一些其他属性。</target>
        </trans-unit>
        <trans-unit id="d12093d685b556a69445173fd5520486f1407941" translate="yes" xml:space="preserve">
          <source>The Art Of Node: Callbacks</source>
          <target state="translated">The Art Of Node:回调</target>
        </trans-unit>
        <trans-unit id="dc42f36cf4efb4177d2faa05bda904369e189f7a" translate="yes" xml:space="preserve">
          <source>The Atomics object does not have a &lt;code&gt;[[Call]]&lt;/code&gt; internal method; it is not possible to invoke the Atomics object as a function.</source>
          <target state="translated">Atomics对象没有内部 &lt;code&gt;[[Call]]&lt;/code&gt; 方法；不能将Atomics对象作为函数调用。</target>
        </trans-unit>
        <trans-unit id="121e8d7f53d94f39796abb445eea1ec6c84df947" translate="yes" xml:space="preserve">
          <source>The Comma Style rule enforces styles for comma-separated lists. There are two comma styles primarily used in JavaScript:</source>
          <target state="translated">逗号样式规则为逗号分隔的列表执行样式。有两种逗号样式主要用于JavaScript中。</target>
        </trans-unit>
        <trans-unit id="751c7e36741c66d3a05895481f8942a38ca2dce1" translate="yes" xml:space="preserve">
          <source>The Context Object</source>
          <target state="translated">上下文对象</target>
        </trans-unit>
        <trans-unit id="699ac6d6b4ec2baa85b4732c274fadb3ca039ae9" translate="yes" xml:space="preserve">
          <source>The ECMAScript 5 Annotated Specification - Strict Mode</source>
          <target state="translated">ECMAScript 5注释规范--严格模式。</target>
        </trans-unit>
        <trans-unit id="80e0be2b0df7dc0f52165f27603e2898ae8a5e99" translate="yes" xml:space="preserve">
          <source>The ES6 Reflect API comes with a handful of methods which somewhat deprecate methods on old constructors:</source>
          <target state="translated">ES6 Reflect API带有一些方法,这些方法在一定程度上废弃了旧构造函数上的方法。</target>
        </trans-unit>
        <trans-unit id="66003f739f69d29de4ae86e20e78496ebb3153ae" translate="yes" xml:space="preserve">
          <source>The ESLint directory and file structure is as follows:</source>
          <target state="translated">ESLint目录和文件结构如下。</target>
        </trans-unit>
        <trans-unit id="d93e8b36b02e3c814ab20860021ac1e2f00ac494" translate="yes" xml:space="preserve">
          <source>The ESLint team doesn't implement new rules that are suggested by users because we have a limited number of people and need to focus on the overall roadmap. Once a rule is accepted, you are responsible for implementing and documenting the rule. You may, alternately, recruit another person to help you implement the rule. The ESLint team member who championed the rule is your resource to help guide you through the rest of this process.</source>
          <target state="translated">ESLint团队不会实施用户建议的新规则,因为我们的人数有限,需要专注于整体路线图。一旦一个规则被接受,您将负责实施和记录该规则。您也可以招募另一个人帮助您实施该规则。支持该规则的 ESLint 团队成员是您的资源,可以帮助指导您完成这个过程的其余部分。</target>
        </trans-unit>
        <trans-unit id="0c711d16f14ea7343d52f05830b40ccdb9522bc8" translate="yes" xml:space="preserve">
          <source>The ESLint team doesn't implement rule changes that are suggested by users because we have a limited number of people and need to focus on the overall roadmap. Once a rule change is accepted, you are responsible for implementing and documenting it. You may, alternately, recruit another person to help you. The ESLint team member who championed the rule is your resource to help guide you through the rest of this process.</source>
          <target state="translated">ESLint团队不执行用户建议的规则变更,因为我们的人数有限,需要关注整体的路线图。一旦规则变更被接受,您将负责实施和记录它。您也可以招募其他人来帮助您。支持该规则的 ESLint 团队成员是您的资源,可以帮助指导您完成这个过程的其余部分。</target>
        </trans-unit>
        <trans-unit id="aeda0c340295fff5de3b84af83b961b23c1f657b" translate="yes" xml:space="preserve">
          <source>The ESLint team is committed to making upgrading as easy and painless as possible. This section outlines the guidelines the team has set in place for the deprecation of rules in future releases.</source>
          <target state="translated">ESLint团队致力于使升级尽可能的简单和无痛。本节概述了团队为未来版本中规则的废弃所制定的指导方针。</target>
        </trans-unit>
        <trans-unit id="42ccbdbc3911d666627517f8ffa3964275678b01" translate="yes" xml:space="preserve">
          <source>The ESLint team is committed to making upgrading as easy and painless as possible. To that end, the team has agreed upon the following set of guidelines for deprecating rules in the future. The goal of these guidelines is to allow for improvements and changes to be made without breaking existing configurations.</source>
          <target state="translated">ESLint团队致力于使升级尽可能的简单和无痛。为此,团队已经同意以下一套关于未来废弃规则的指导原则。这些指南的目标是允许在不破坏现有配置的情况下进行改进和改变。</target>
        </trans-unit>
        <trans-unit id="d4e733f98b935c588d211926e08fdfd98589d4ae" translate="yes" xml:space="preserve">
          <source>The JSCS &lt;code&gt;--auto-configure&lt;/code&gt; option created a configuration based on what it found in a given file:</source>
          <target state="translated">JSCS &lt;code&gt;--auto-configure&lt;/code&gt; 选项基于在给定文件中找到的配置创建了一个配置：</target>
        </trans-unit>
        <trans-unit id="fa1c39fed1338615abafccd715f9a9ceec0208c2" translate="yes" xml:space="preserve">
          <source>The Math Object</source>
          <target state="translated">数学对象</target>
        </trans-unit>
        <trans-unit id="9459a63048e2fc499f7aeacaa3d20ab484e34e90" translate="yes" xml:space="preserve">
          <source>The Math object does not have a &lt;code&gt;[[Call]]&lt;/code&gt; internal property; it is not possible to invoke the Math object as a function.</source>
          <target state="translated">Math对象没有 &lt;code&gt;[[Call]]&lt;/code&gt; 内部属性；不能将Math对象作为函数调用。</target>
        </trans-unit>
        <trans-unit id="03344790500f2127bf5b89f81cc0b7f1bd8cbe99" translate="yes" xml:space="preserve">
          <source>The Reflect object also does not have a &lt;code&gt;[[Call]]&lt;/code&gt; internal method; it is not possible to invoke the Reflect object as a function.</source>
          <target state="translated">Reflect对象也没有 &lt;code&gt;[[Call]]&lt;/code&gt; 内部方法。不能将Reflect对象作为函数调用。</target>
        </trans-unit>
        <trans-unit id="d8e01d191666fc3fab613c0e7605b0dd8117adb5" translate="yes" xml:space="preserve">
          <source>The Unicode Byte Order Mark (BOM) is used to specify whether code units are big endian or little endian. That is, whether the most significant or least significant bytes come first. UTF-8 does not require a BOM because byte ordering does not matter when characters are a single byte. Since UTF-8 is the dominant encoding of the web, we make &lt;code&gt;&quot;never&quot;&lt;/code&gt; the default option.</source>
          <target state="translated">Unicode字节顺序标记（BOM）用于指定代码单位是大端还是小端。即，最高有效字节还是最低有效字节在前。UTF-8不需要BOM，因为当字符为单个字节时，字节顺序无关紧要。由于UTF-8是网络的主要编码，因此我们将 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 为默认选项。</target>
        </trans-unit>
        <trans-unit id="dee0f2bfcb123659c532724653e8c4e345e84a42" translate="yes" xml:space="preserve">
          <source>The `--fix` option on the &lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;command line&lt;/a&gt; automatically fixes problems (currently mostly whitespace) reported by rules which have a wrench  below.</source>
          <target state="translated">&lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;命令行&lt;/a&gt;上的--fix选项可自动修复由下面带有扳手的规则报告的问题（当前主要是空格）。</target>
        </trans-unit>
        <trans-unit id="db8728aed09dfa6de429370be79c24bb69a35744" translate="yes" xml:space="preserve">
          <source>The above can be rewritten as the following to improve readability and more clearly delineate the operands:</source>
          <target state="translated">上述内容可改写为以下内容,以提高可读性,更清楚地划分操作数。</target>
        </trans-unit>
        <trans-unit id="65f3cb6e1b55fcacecc756bb976bc88a3674a7e6" translate="yes" xml:space="preserve">
          <source>The above methods return a &lt;code&gt;fixing&lt;/code&gt; object. The &lt;code&gt;fix()&lt;/code&gt; function can return the following values:</source>
          <target state="translated">上面的方法返回一个 &lt;code&gt;fixing&lt;/code&gt; 对象。该 &lt;code&gt;fix()&lt;/code&gt; 函数可以返回以下值：</target>
        </trans-unit>
        <trans-unit id="9907806cacfab0036e1c3174ec8f1e3740b6c513" translate="yes" xml:space="preserve">
          <source>The absolute path to the file of this result. This is the string &lt;code&gt;&quot;&amp;lt;text&amp;gt;&quot;&lt;/code&gt; if the file path is unknown (when you didn't pass the &lt;code&gt;options.filePath&lt;/code&gt; option to the &lt;a href=&quot;#-eslintlinttextcode-options&quot;&gt;&lt;code&gt;eslint.lintText()&lt;/code&gt;&lt;/a&gt; method).</source>
          <target state="translated">此结果文件的绝对路径。如果文件路径未知（当未将 &lt;code&gt;options.filePath&lt;/code&gt; 选项传递给&lt;a href=&quot;#-eslintlinttextcode-options&quot;&gt; &lt;code&gt;eslint.lintText()&lt;/code&gt; &lt;/a&gt;方法时），则这是字符串 &lt;code&gt;&quot;&amp;lt;text&amp;gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="534b2fcf7f67846ee9ee4948ebf52bf0568bd28a" translate="yes" xml:space="preserve">
          <source>The array can contain values of &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt; types. If it's a string, the text must be parsed as &lt;code&gt;bigint&lt;/code&gt; literal (e.g., &lt;code&gt;&quot;100n&quot;&lt;/code&gt;).</source>
          <target state="translated">该数组可以包含 &lt;code&gt;number&lt;/code&gt; 和 &lt;code&gt;string&lt;/code&gt; 类型的值。如果是字符串，则必须将文本解析为 &lt;code&gt;bigint&lt;/code&gt; 文字（例如 &lt;code&gt;&quot;100n&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b83b06a5a4117b1ebec2ee0a831243105811ba6c" translate="yes" xml:space="preserve">
          <source>The array of &lt;a href=&quot;#-lintmessage-type&quot;&gt;LintMessage&lt;/a&gt; objects.</source>
          <target state="translated">&lt;a href=&quot;#-lintmessage-type&quot;&gt;LintMessage&lt;/a&gt;对象的数组。</target>
        </trans-unit>
        <trans-unit id="0c94f2b50ef7b0d53ba00f8a03e35b8008133138" translate="yes" xml:space="preserve">
          <source>The basic pattern for a rule unit test file is:</source>
          <target state="translated">规则单元测试文件的基本模式是。</target>
        </trans-unit>
        <trans-unit id="56d7ca1af2103271f042bd642392c591643ab810" translate="yes" xml:space="preserve">
          <source>The best practice is to always use a function for the first argument of &lt;code&gt;setTimeout()&lt;/code&gt; and &lt;code&gt;setInterval()&lt;/code&gt; (and avoid &lt;code&gt;execScript()&lt;/code&gt;).</source>
          <target state="translated">最佳实践是始终对 &lt;code&gt;setTimeout()&lt;/code&gt; 和 &lt;code&gt;setInterval()&lt;/code&gt; 的第一个参数使用函数（并避免使用 &lt;code&gt;execScript()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1e8c340ffa3f95f2957d6bb3facc83797eb47d1e" translate="yes" xml:space="preserve">
          <source>The built-in formatter options are:</source>
          <target state="translated">内置的格式化选项有:</target>
        </trans-unit>
        <trans-unit id="f4a074b29cc31436f926afa21bd394791fa680f4" translate="yes" xml:space="preserve">
          <source>The callback pattern is at the heart of most I/O and event-driven programming in JavaScript.</source>
          <target state="translated">回调模式是JavaScript中大多数I/O和事件驱动编程的核心。</target>
        </trans-unit>
        <trans-unit id="17cf8e65252c53144326fa3b3cb3dee6a9c49a73" translate="yes" xml:space="preserve">
          <source>The change introduces no functional regression. Be sure to run &lt;code&gt;npm test&lt;/code&gt; to verify your changes before submitting a pull request.</source>
          <target state="translated">所做的更改不会导致功能退化。在提交拉取请求之前，请确保运行 &lt;code&gt;npm test&lt;/code&gt; 来验证您的更改。</target>
        </trans-unit>
        <trans-unit id="95b1da556ce89be353ded0ac57710b104d6f438e" translate="yes" xml:space="preserve">
          <source>The closing brace should be on a separate line.</source>
          <target state="translated">闭合支架应单独成行。</target>
        </trans-unit>
        <trans-unit id="0e877e0656f0ec69724c1b6cc3a12731f64fac75" translate="yes" xml:space="preserve">
          <source>The code above creates an object with just a setter for the property &lt;code&gt;&quot;a&quot;&lt;/code&gt;.</source>
          <target state="translated">上面的代码创建一个只带有属性 &lt;code&gt;&quot;a&quot;&lt;/code&gt; 的设置器的对象。</target>
        </trans-unit>
        <trans-unit id="7d7fe0fd83bc9845d159f7bbddda58e021a2af8e" translate="yes" xml:space="preserve">
          <source>The code can be rewritten as:</source>
          <target state="translated">该代码可以改写为:</target>
        </trans-unit>
        <trans-unit id="eae223ac7cf3bcd6d761f22884ef878f4080872a" translate="yes" xml:space="preserve">
          <source>The code might be mistaken for an error.</source>
          <target state="translated">该代码可能被误认为是一个错误。</target>
        </trans-unit>
        <trans-unit id="07b81fa2d7c3787fd397d4cedde653ceddf32951" translate="yes" xml:space="preserve">
          <source>The combining characters are characters which belong to one of &lt;code&gt;Mc&lt;/code&gt;, &lt;code&gt;Me&lt;/code&gt;, and &lt;code&gt;Mn&lt;/code&gt;&lt;a href=&quot;http://www.unicode.org/L2/L1999/UnicodeData.html#General%20Category&quot;&gt;Unicode general categories&lt;/a&gt;.</source>
          <target state="translated">组合字符是属于 &lt;code&gt;Mc&lt;/code&gt; ， &lt;code&gt;Me&lt;/code&gt; 和 &lt;code&gt;Mn&lt;/code&gt; &lt;a href=&quot;http://www.unicode.org/L2/L1999/UnicodeData.html#General%20Category&quot;&gt;Unicode常规类别&lt;/a&gt;之一的字符。</target>
        </trans-unit>
        <trans-unit id="73d750e0d0367037fdad99a42bc958f0afea170d" translate="yes" xml:space="preserve">
          <source>The comma and any whitespace that delimit property specifications are not considered parts of them. Therefore, the rule permits both of these formats:</source>
          <target state="translated">逗号和任何分隔属性规格的空白都不被认为是它们的一部分。因此,该规则允许使用这两种格式。</target>
        </trans-unit>
        <trans-unit id="d9368f1df7787717cd62dddc2cb7c148f9058bfd" translate="yes" xml:space="preserve">
          <source>The comma operator includes multiple expressions where only one is expected. It evaluates each operand from left to right and returns the value of the last operand. However, this frequently obscures side effects, and its use is often an accident. Here are some examples of sequences:</source>
          <target state="translated">逗号运算符包括多个表达式,而在这些表达式中,只有一个是预期的。它从左到右评估每个操作数,并返回最后一个操作数的值。然而,这经常会掩盖副作用,它的使用往往是一个意外。下面是一些序列的例子。</target>
        </trans-unit>
        <trans-unit id="6cbddd96542ae6a1209e95d3af05dcfc89e192c0" translate="yes" xml:space="preserve">
          <source>The command line utility has several options. You can view the options by running &lt;code&gt;eslint -h&lt;/code&gt;.</source>
          <target state="translated">命令行实用程序具有多个选项。您可以通过运行 &lt;code&gt;eslint -h&lt;/code&gt; 来查看选项。</target>
        </trans-unit>
        <trans-unit id="9c80af650686399cb1e0e7040218608587eb5be3" translate="yes" xml:space="preserve">
          <source>The commit message format is important because these messages are used to create a changelog for each release. The tag and issue number help to create more consistent and useful changelogs.</source>
          <target state="translated">提交消息的格式很重要,因为这些消息用于为每个版本创建变更日志。标签和问题编号有助于创建更加一致和有用的变更日志。</target>
        </trans-unit>
        <trans-unit id="a8123064f7d126e4a3b589e9af343947dfe7c445" translate="yes" xml:space="preserve">
          <source>The commit message is properly formatted.</source>
          <target state="translated">提交信息的格式正确。</target>
        </trans-unit>
        <trans-unit id="e4677fbe3218552fdaa136e42baa9d0c902d41ca" translate="yes" xml:space="preserve">
          <source>The common case of using &lt;code&gt;void&lt;/code&gt; operator is to get a &quot;pure&quot; &lt;code&gt;undefined&lt;/code&gt; value as prior to ES5 the &lt;code&gt;undefined&lt;/code&gt; variable was mutable:</source>
          <target state="translated">使用 &lt;code&gt;void&lt;/code&gt; 运算符的常见情况是获取&amp;ldquo;纯&amp;rdquo; &lt;code&gt;undefined&lt;/code&gt; 值，因为在ES5之前， &lt;code&gt;undefined&lt;/code&gt; 变量是可变的：</target>
        </trans-unit>
        <trans-unit id="affdad1a3137988828bd199a2283a60df1bc5075" translate="yes" xml:space="preserve">
          <source>The complete configuration hierarchy, from highest precedence to lowest precedence, is as follows:</source>
          <target state="translated">完整的配置层次结构,从最高优先级到最低优先级,如下所示。</target>
        </trans-unit>
        <trans-unit id="7505181a37b9fb762478197cf4096ed5622b8d1b" translate="yes" xml:space="preserve">
          <source>The config in &lt;code&gt;app/.eslintrc.json&lt;/code&gt; defines the glob pattern &lt;code&gt;**/*Spec.js&lt;/code&gt;. This pattern is relative to the base directory of &lt;code&gt;app/.eslintrc.json&lt;/code&gt;. So, this pattern would match &lt;code&gt;app/lib/fooSpec.js&lt;/code&gt; and &lt;code&gt;app/components/barSpec.js&lt;/code&gt; but &lt;strong&gt;NOT&lt;/strong&gt;&lt;code&gt;server/serverSpec.js&lt;/code&gt;. If you defined the same pattern in the &lt;code&gt;.eslintrc.json&lt;/code&gt; file within in the &lt;code&gt;project-root&lt;/code&gt; folder, it would match all three of the &lt;code&gt;*Spec&lt;/code&gt; files.</source>
          <target state="translated">的配置在 &lt;code&gt;app/.eslintrc.json&lt;/code&gt; 定义glob模式 &lt;code&gt;**/*Spec.js&lt;/code&gt; 。此模式相对于 &lt;code&gt;app/.eslintrc.json&lt;/code&gt; 的基本目录。因此，此模式将匹配 &lt;code&gt;app/lib/fooSpec.js&lt;/code&gt; 和 &lt;code&gt;app/components/barSpec.js&lt;/code&gt; ,但&lt;strong&gt;不&lt;/strong&gt; &lt;code&gt;server/serverSpec.js&lt;/code&gt; 。如果在 &lt;code&gt;project-root&lt;/code&gt; 文件夹中的 &lt;code&gt;.eslintrc.json&lt;/code&gt; 文件中定义了相同的模式，则它将匹配所有三个 &lt;code&gt;*Spec&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="761a0c741d5f1588ef78c2680d748e9585f5469d" translate="yes" xml:space="preserve">
          <source>The configuration cascade works by using the closest &lt;code&gt;.eslintrc&lt;/code&gt; file to the file being linted as the highest priority, then any configuration files in the parent directory, and so on. When you run ESLint on this project, all files in &lt;code&gt;lib/&lt;/code&gt; will use the &lt;code&gt;.eslintrc&lt;/code&gt; file at the root of the project as their configuration. When ESLint traverses into the &lt;code&gt;tests/&lt;/code&gt; directory, it will then use &lt;code&gt;your-project/tests/.eslintrc&lt;/code&gt; in addition to &lt;code&gt;your-project/.eslintrc&lt;/code&gt;. So &lt;code&gt;your-project/tests/test.js&lt;/code&gt; is linted based on the combination of the two &lt;code&gt;.eslintrc&lt;/code&gt; files in its directory hierarchy, with the closest one taking priority. In this way, you can have project-level ESLint settings and also have directory-specific overrides.</source>
          <target state="translated">配置级联的工作方式是：使用与最接近文件优先级的文件最接近的 &lt;code&gt;.eslintrc&lt;/code&gt; 文件，然后使用父目录中的所有配置文件，依此类推。在此项目上运行ESLint时， &lt;code&gt;lib/&lt;/code&gt; 所有文件都将使用项目根目录下的 &lt;code&gt;.eslintrc&lt;/code&gt; 文件作为其配置。当ESLint遍历到 &lt;code&gt;tests/&lt;/code&gt; 目录时，除了 &lt;code&gt;your-project/.eslintrc&lt;/code&gt; 之外，它还将使用 &lt;code&gt;your-project/tests/.eslintrc&lt;/code&gt; / .eslintrc。因此， &lt;code&gt;your-project/tests/test.js&lt;/code&gt; 会基于两个 &lt;code&gt;.eslintrc&lt;/code&gt; 的组合而减少文件在其目录层次结构中，最接近的文件优先。这样，您可以具有项目级别的ESLint设置，还可以具有特定于目录的替代。</target>
        </trans-unit>
        <trans-unit id="dcdf3251f61da2ed7fea4070dd8de83ac8b210fc" translate="yes" xml:space="preserve">
          <source>The configuration that you have in your &lt;code&gt;.eslintrc&lt;/code&gt; file is an important part of your project, and as such, you may want to share it with other projects or people. Shareable configs allow you to publish your configuration settings on &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; and have others download and use it in their ESLint projects.</source>
          <target state="translated">&lt;code&gt;.eslintrc&lt;/code&gt; 文件中的配置是项目的重要组成部分，因此，您可能希望与其他项目或人员共享该配置。可共享的配置允许您在&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;上发布配置设置，并让其他人下载并在其ESLint项目中使用它。</target>
        </trans-unit>
        <trans-unit id="32170e7d3eae30d6911a8ee9094599efb5b60bbf" translate="yes" xml:space="preserve">
          <source>The confusion around sparse arrays defined in this manner is enough that it's recommended to avoid using them unless you are certain that they are useful in your code.</source>
          <target state="translated">以这种方式定义的稀疏数组引起的混乱足以说明,建议避免使用它们,除非你确定它们在你的代码中是有用的。</target>
        </trans-unit>
        <trans-unit id="84a32a3cbfb78fbed02519d25670fc0e1cc660ca" translate="yes" xml:space="preserve">
          <source>The constructor function is particularly useful when you want to dynamically generate the pattern, because it takes string arguments.</source>
          <target state="translated">当你想动态生成模式时,构造函数特别有用,因为它接受字符串参数。</target>
        </trans-unit>
        <trans-unit id="1c3dff42ca3b1d5caf72f42e977b149fee7f9002" translate="yes" xml:space="preserve">
          <source>The contents of the &lt;code&gt;if&lt;/code&gt; statement is an arrow function, not a comparison.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 语句的内容是一个箭头函数，而不是一个比较。</target>
        </trans-unit>
        <trans-unit id="dc960e48baa84799c5c10650483220ba5c93ce2e" translate="yes" xml:space="preserve">
          <source>The custom message will be appended to the default error message. Please note that you may not specify custom error messages for restricted patterns as a particular import may match more than one pattern.</source>
          <target state="translated">自定义信息将附加到默认错误信息中。请注意,您不能为受限模式指定自定义错误信息,因为一个特定的导入可能会匹配多个模式。</target>
        </trans-unit>
        <trans-unit id="02091995aebc0237ea1f370d1e9e697cb283fce5" translate="yes" xml:space="preserve">
          <source>The custom message will be appended to the default error message. Please note that you may not specify custom error messages for restricted patterns as a particular module may match more than one pattern.</source>
          <target state="translated">自定义信息将附加到默认错误信息中。请注意,您不能为受限模式指定自定义错误信息,因为一个特定的模块可能会匹配多个模式。</target>
        </trans-unit>
        <trans-unit id="2db40330539be8a023ce70cd6de477ff5ec12779" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;&quot;never&quot;&lt;/code&gt; option can have exception options in an object literal:</source>
          <target state="translated">默认的 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 选项可以在对象文字中包含异常选项：</target>
        </trans-unit>
        <trans-unit id="aad36d23c9c66cf621dc65a4fdf5357b747ebf25" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;&quot;object&quot;&lt;/code&gt; option requires the dot to be on the same line as the object.</source>
          <target state="translated">默认的 &lt;code&gt;&quot;object&quot;&lt;/code&gt; 选项要求点与对象在同一行。</target>
        </trans-unit>
        <trans-unit id="eb214d0a96891b20944eb86c406846b8c0682ec0" translate="yes" xml:space="preserve">
          <source>The default configuration is &lt;code&gt;&quot;after&quot;, { &quot;overrides&quot;: { &quot;?&quot;: &quot;before&quot;, &quot;:&quot;: &quot;before&quot; } }&lt;/code&gt;</source>
          <target state="translated">默认配置为 &lt;code&gt;&quot;after&quot;, { &quot;overrides&quot;: { &quot;?&quot;: &quot;before&quot;, &quot;:&quot;: &quot;before&quot; } }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="796093e436a921806e600ed6ffc0bb010636d015" translate="yes" xml:space="preserve">
          <source>The default configuration is &lt;code&gt;{ &quot;before&quot;: true, &quot;after&quot;: true }&lt;/code&gt;.</source>
          <target state="translated">默认配置为 &lt;code&gt;{ &quot;before&quot;: true, &quot;after&quot;: true }&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ffd96c78ae8b308cef5ee180c2cafbcfe74c3226" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">默认值为 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d709b74ae2cf658c17f26fdf6ce2c1bfe069742" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;{&quot;before&quot;: false, &quot;after&quot;: true}&lt;/code&gt;.</source>
          <target state="translated">默认值为 &lt;code&gt;{&quot;before&quot;: false, &quot;after&quot;: true}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="535a63e8e2a6cdd1ad85243a0f44cac231300bc7" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: false}&lt;/code&gt;.</source>
          <target state="translated">默认值为 &lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: false}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="baa5bd9ea8cd406c936d48459561cdc0703e1522" translate="yes" xml:space="preserve">
          <source>The default option (that is, no string option specified) for this rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0. The &lt;code&gt;&quot;function&quot;&lt;/code&gt; option is most similar to the removed option.</source>
          <target state="translated">ESLint v1.0 中&lt;strong&gt;删除&lt;/strong&gt;了此规则的默认选项（即，未指定字符串选项）。在 &lt;code&gt;&quot;function&quot;&lt;/code&gt; 选项是最相似的移除选项。</target>
        </trans-unit>
        <trans-unit id="ea560e9329be81e2a97fb02fb917528a08a7dfda" translate="yes" xml:space="preserve">
          <source>The default options for some rules have changed</source>
          <target state="translated">一些规则的默认选项已经改变</target>
        </trans-unit>
        <trans-unit id="e1b30fc08a505ea690637325f1e931c67ab9c7ce" translate="yes" xml:space="preserve">
          <source>The default options for the &lt;a href=&quot;../rules/no-confusing-arrow&quot;&gt;&lt;code&gt;no-confusing-arrow&lt;/code&gt;&lt;/a&gt; rule have changed from &lt;code&gt;{ allowParens: false }&lt;/code&gt; to &lt;code&gt;{ allowParens: true }&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../rules/no-confusing-arrow&quot;&gt; &lt;code&gt;no-confusing-arrow&lt;/code&gt; &lt;/a&gt;规则的默认选项已从 &lt;code&gt;{ allowParens: false }&lt;/code&gt; 更改为 &lt;code&gt;{ allowParens: true }&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="544468a6bb41999c9c49e104c2162d56de2501c3" translate="yes" xml:space="preserve">
          <source>The default options for the &lt;a href=&quot;../rules/no-redeclare&quot;&gt;&lt;code&gt;no-redeclare&lt;/code&gt;&lt;/a&gt; rule have changed from &lt;code&gt;{ builtinGlobals: false }&lt;/code&gt; to &lt;code&gt;{ builtinGlobals: true }&lt;/code&gt;. Additionally, the &lt;code&gt;no-redeclare&lt;/code&gt; rule will now report an error for globals enabled by comments like &lt;code&gt;/* global foo */&lt;/code&gt; if those globals were already enabled through configuration anyway.</source>
          <target state="translated">&lt;a href=&quot;../rules/no-redeclare&quot;&gt; &lt;code&gt;no-redeclare&lt;/code&gt; &lt;/a&gt;规则的默认选项已从 &lt;code&gt;{ builtinGlobals: false }&lt;/code&gt; 更改为 &lt;code&gt;{ builtinGlobals: true }&lt;/code&gt; 。此外，如果无论如何已经通过配置启用了这些全局变量，则 &lt;code&gt;no-redeclare&lt;/code&gt; 规则现在将报告由 &lt;code&gt;/* global foo */&lt;/code&gt; 等注释启用的全局变量的错误。</target>
        </trans-unit>
        <trans-unit id="4b68ac7ed408d41719943a7ec2a3599de96e8bf8" translate="yes" xml:space="preserve">
          <source>The default options for the &lt;a href=&quot;../rules/object-curly-newline&quot;&gt;&lt;code&gt;object-curly-newline&lt;/code&gt;&lt;/a&gt; rule have changed from &lt;code&gt;{ multiline: true }&lt;/code&gt; to &lt;code&gt;{ consistent: true }&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../rules/object-curly-newline&quot;&gt; &lt;code&gt;object-curly-newline&lt;/code&gt; &lt;/a&gt;规则的默认选项已从 &lt;code&gt;{ multiline: true }&lt;/code&gt; 更改为 &lt;code&gt;{ consistent: true }&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b7ab1e46a9e7c204637eb33434f00becfe8a66d" translate="yes" xml:space="preserve">
          <source>The default options object for the &lt;a href=&quot;../rules/no-self-assign&quot;&gt;&lt;code&gt;no-self-assign&lt;/code&gt;&lt;/a&gt; rule has changed from &lt;code&gt;{ props: false }&lt;/code&gt; to &lt;code&gt;{ props: true }&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../rules/no-self-assign&quot;&gt; &lt;code&gt;no-self-assign&lt;/code&gt; &lt;/a&gt;规则的默认选项对象已从 &lt;code&gt;{ props: false }&lt;/code&gt; 更改为 &lt;code&gt;{ props: true }&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f7d8ef8740358e7014a22b0fc66ddeed7cc30fcc" translate="yes" xml:space="preserve">
          <source>The default parser now validates options more strictly</source>
          <target state="translated">默认解析器现在可以更严格地验证选项。</target>
        </trans-unit>
        <trans-unit id="cb91917a4ee5c4169d24eee0779ed1f5fecc0213" translate="yes" xml:space="preserve">
          <source>The deprecated &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option has been removed</source>
          <target state="translated">不推荐使用的 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; 选项已被删除</target>
        </trans-unit>
        <trans-unit id="417c3b37d6ea8d516aaec94e4251e5a47c517230" translate="yes" xml:space="preserve">
          <source>The difference between a marker and an exception is that a marker only appears at the beginning of the comment whereas exceptions can occur anywhere in the comment string.</source>
          <target state="translated">标记和异常之间的区别在于,标记只出现在注释的开头,而异常可以出现在注释字符串的任何地方。</target>
        </trans-unit>
        <trans-unit id="be6b4fc0012e62a768e63daa1d092d896e9cd14d" translate="yes" xml:space="preserve">
          <source>The difference between these two patterns is subtle, especially because the problematic empty pattern looks just like an object literal.</source>
          <target state="translated">这两种模式之间的区别是微妙的,尤其是有问题的空模式看起来就像一个对象文字。</target>
        </trans-unit>
        <trans-unit id="5f8c988db3120f6ad6d74976827259fee73007f6" translate="yes" xml:space="preserve">
          <source>The easiest way to start creating a plugin is to use the &lt;a href=&quot;https://www.npmjs.com/package/generator-eslint&quot;&gt;Yeoman generator&lt;/a&gt;. The generator will guide you through setting up the skeleton of a plugin.</source>
          <target state="translated">开始创建插件的最简单方法是使用&lt;a href=&quot;https://www.npmjs.com/package/generator-eslint&quot;&gt;Yeoman生成器&lt;/a&gt;。生成器将指导您设置插件框架。</target>
        </trans-unit>
        <trans-unit id="43705ef6db2efcf221d0e395d353b64954c6c747" translate="yes" xml:space="preserve">
          <source>The enclosed statements should be indented one more level than the compound statement.</source>
          <target state="translated">所附报表应比复合报表多缩进一级。</target>
        </trans-unit>
        <trans-unit id="b118bf659a71ae3c29fa483a5256dbcff0e3c82c" translate="yes" xml:space="preserve">
          <source>The end of the &lt;code&gt;try&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; 块的末尾。</target>
        </trans-unit>
        <trans-unit id="4a0628012c2d77c4a62f2562528b964f8e826cdc" translate="yes" xml:space="preserve">
          <source>The error message.</source>
          <target state="translated">错误信息。</target>
        </trans-unit>
        <trans-unit id="8db72bff78f8373ee30f8c8fd310da3156ec6caa" translate="yes" xml:space="preserve">
          <source>The executor function can also be an &lt;code&gt;async function&lt;/code&gt;. However, this is usually a mistake, for a few reasons:</source>
          <target state="translated">执行程序功能也可以是 &lt;code&gt;async function&lt;/code&gt; 。但是，这通常是一个错误，原因如下：</target>
        </trans-unit>
        <trans-unit id="67f85a36ed894f5ee40529023db3887ad5bbee0c" translate="yes" xml:space="preserve">
          <source>The exported function receives an optional second argument named &lt;code&gt;data&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; object provides extended information related to the analysis results. Currently, the &lt;code&gt;data&lt;/code&gt; object consists of a single property named &lt;code&gt;rulesMeta&lt;/code&gt;. This property is a dictionary of rule metadata, keyed with &lt;code&gt;ruleId&lt;/code&gt;. The value for each entry is the &lt;code&gt;meta&lt;/code&gt; property from the corresponding rule object. The dictionary contains an entry for each rule that was run during the analysis.</source>
          <target state="translated">导出的函数接收一个名为 &lt;code&gt;data&lt;/code&gt; 的可选第二个参数。所述 &lt;code&gt;data&lt;/code&gt; 对象提供与分析结果的扩展信息。当前， &lt;code&gt;data&lt;/code&gt; 对象由一个名为 &lt;code&gt;rulesMeta&lt;/code&gt; 的属性组成。此属性是规则元数据的字典，以 &lt;code&gt;ruleId&lt;/code&gt; 为键。每个条目的值是相应规则对象的 &lt;code&gt;meta&lt;/code&gt; 属性。词典包含分析期间运行的每个规则的条目。</target>
        </trans-unit>
        <trans-unit id="10638ad26a2336c237513cb7fa8ba9e360e6572f" translate="yes" xml:space="preserve">
          <source>The expressions in a &lt;code&gt;for&lt;/code&gt; statement should be separated by blank spaces. Blank spaces should only be used after semicolons, not before.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; 语句中的表达式应该用空格分隔。空格只能在分号后使用，而不能在分号后使用。</target>
        </trans-unit>
        <trans-unit id="fc9043ab9742cf8199292ae41ac858900ddd79ad" translate="yes" xml:space="preserve">
          <source>The filtered &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects.</source>
          <target state="translated">过滤后的&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="0857209508949425ce9520e024dc97908dd75683" translate="yes" xml:space="preserve">
          <source>The first is a string which be either &lt;code&gt;&quot;always&quot;&lt;/code&gt; or &lt;code&gt;&quot;never&quot;&lt;/code&gt;. The default is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">第一个是 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 的字符串。默认值为 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6c11e634588bcc74080a015687bda5aa0bfac1d9" translate="yes" xml:space="preserve">
          <source>The first is using &lt;code&gt;setTimeout()&lt;/code&gt;, &lt;code&gt;setInterval()&lt;/code&gt; or &lt;code&gt;execScript()&lt;/code&gt; (Internet Explorer only), all of which can accept a string of JavaScript code as their first argument. For example:</source>
          <target state="translated">第一种是使用 &lt;code&gt;setTimeout()&lt;/code&gt; ， &lt;code&gt;setInterval()&lt;/code&gt; 或 &lt;code&gt;execScript()&lt;/code&gt; （仅限Internet Explorer），所有这些方法都可以接受JavaScript代码字符串作为第一个参数。例如：</target>
        </trans-unit>
        <trans-unit id="6d4bbf2fb18f805ebaadc20bfc29b2a73d3969ac" translate="yes" xml:space="preserve">
          <source>The first line contains only the &lt;code&gt;/*&lt;/code&gt; comment opening. No further text is allowed on this line.</source>
          <target state="translated">第一行仅包含 &lt;code&gt;/*&lt;/code&gt; 注释开头。此行上不允许有其他文本。</target>
        </trans-unit>
        <trans-unit id="6154e02adfa070a6b3e169f562e328e046578b3d" translate="yes" xml:space="preserve">
          <source>The first line of multi-comments should be indented to the same level as the code it describes. Each subsequent line should have the same indentation plus one space (for proper alignment of the &lt;code&gt;*&lt;/code&gt; characters). Each multi-line comment should be preceded by one empty line.</source>
          <target state="translated">多注释的第一行应缩进至与其描述的代码相同的级别。随后的每一行都应具有相同的缩进加一个空格（以正确对齐 &lt;code&gt;*&lt;/code&gt; 字符）。每条多行注释之前应加一个空行。</target>
        </trans-unit>
        <trans-unit id="5072260dd42b4b3af826cc62dd8fbb33239f1233" translate="yes" xml:space="preserve">
          <source>The first line of the commit message (the summary) must have a specific format. This format is checked by our build tools.</source>
          <target state="translated">提交消息的第一行(摘要)必须有特定的格式。我们的构建工具会检查这个格式。</target>
        </trans-unit>
        <trans-unit id="eaba518aba6a1d6f3d301b713e35495cf26fd58b" translate="yes" xml:space="preserve">
          <source>The first problem is that primitive wrapper objects are, in fact, objects. That means &lt;code&gt;typeof&lt;/code&gt; will return &lt;code&gt;&quot;object&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;string&quot;&lt;/code&gt;, &lt;code&gt;&quot;number&quot;&lt;/code&gt;, or &lt;code&gt;&quot;boolean&quot;&lt;/code&gt;. The second problem comes with boolean objects. Every object is truthy, that means an instance of &lt;code&gt;Boolean&lt;/code&gt; always resolves to &lt;code&gt;true&lt;/code&gt; even when its actual value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">第一个问题是原始包装对象实际上是对象。这意味着 &lt;code&gt;typeof&lt;/code&gt; 将返回 &lt;code&gt;&quot;object&quot;&lt;/code&gt; 而不是 &lt;code&gt;&quot;string&quot;&lt;/code&gt; ， &lt;code&gt;&quot;number&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;boolean&quot;&lt;/code&gt; 。第二个问题来自布尔对象。每个对象都是真实的，这意味着 &lt;code&gt;Boolean&lt;/code&gt; 的实例即使其实际值为 &lt;code&gt;false&lt;/code&gt; ,也始终解析为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="984bf5268b0ddf754b28d771410a618bd31b5080" translate="yes" xml:space="preserve">
          <source>The first step to sending a pull request is to create a new branch in your ESLint fork. Give the branch a descriptive name that describes what it is you're fixing, such as:</source>
          <target state="translated">发送拉取请求的第一步是在你的 ESLint fork 中创建一个新的分支。给这个分支起一个描述性的名字,来描述你要修复的东西,比如:。</target>
        </trans-unit>
        <trans-unit id="89a5d6f7116af9ee2720543818896897a369050f" translate="yes" xml:space="preserve">
          <source>The first throwable node (e.g. a function call) in the &lt;code&gt;try&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; 块中的第一个可抛出节点（例如，函数调用）。</target>
        </trans-unit>
        <trans-unit id="d71475a3d6080cbad00254ef62ed2324f9e45663" translate="yes" xml:space="preserve">
          <source>The first way to use configuration files is via &lt;code&gt;.eslintrc.*&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files. ESLint will automatically look for them in the directory of the file to be linted, and in successive parent directories all the way up to the root directory of the filesystem (unless &lt;code&gt;root: true&lt;/code&gt; is specified). This option is useful when you want different configurations for different parts of a project or when you want others to be able to use ESLint directly without needing to remember to pass in the configuration file.</source>
          <target state="translated">使用配置文件的第一种方法是通过 &lt;code&gt;.eslintrc.*&lt;/code&gt; 和 &lt;code&gt;package.json&lt;/code&gt; 文件。ESLint会在要插入文件的目录中以及在连续的父目录中一直到文件系统的根目录中自动寻找它们（除非指定 &lt;code&gt;root: true&lt;/code&gt; ）。当您希望为项目的不同部分进行不同的配置时，或者希望其他人能够直接使用ESLint而无需记住传递配置文件时，此选项很有用。</target>
        </trans-unit>
        <trans-unit id="cc7819bcb56a4f8a3f4c63d8cc7e3fc0c5244e52" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;--ignore-pattern&lt;/code&gt; is also equivalent:</source>
          <target state="translated">以下 &lt;code&gt;--ignore-pattern&lt;/code&gt; 也等效：</target>
        </trans-unit>
        <trans-unit id="7899f93b94b39beef8a71db444282ddbbd5e7124" translate="yes" xml:space="preserve">
          <source>The following configuration ignores indentation in the body of IIFEs.</source>
          <target state="translated">以下配置会忽略IIFEs正文中的缩进。</target>
        </trans-unit>
        <trans-unit id="41c40b6e586fc5cb09bbc72af12c8f09e123d736" translate="yes" xml:space="preserve">
          <source>The following configuration ignores the indentation of &lt;code&gt;ConditionalExpression&lt;/code&gt; (&quot;ternary expression&quot;) nodes:</source>
          <target state="translated">以下配置忽略 &lt;code&gt;ConditionalExpression&lt;/code&gt; （&amp;ldquo;三元表达式&amp;rdquo;）节点的缩进：</target>
        </trans-unit>
        <trans-unit id="d5fa8b20b228bdd086131e38e40e897cbd6cbf7a" translate="yes" xml:space="preserve">
          <source>The following examples &lt;strong&gt;will not&lt;/strong&gt; be flagged:</source>
          <target state="translated">以下示例&lt;strong&gt;将不会&lt;/strong&gt;被标记：</target>
        </trans-unit>
        <trans-unit id="f5287d99a37de7104aa2ed235baa902a0ec5078d" translate="yes" xml:space="preserve">
          <source>The following examples &lt;strong&gt;will&lt;/strong&gt; be flagged:</source>
          <target state="translated">以下示例&lt;strong&gt;将&lt;/strong&gt;被标记：</target>
        </trans-unit>
        <trans-unit id="c14ba9c0ea8a095e66d6957614fae22fac370baf" translate="yes" xml:space="preserve">
          <source>The following exceptions are available:</source>
          <target state="translated">以下是例外情况:</target>
        </trans-unit>
        <trans-unit id="cf3496b833b4ce7626fcd6541bf610fb0c36af11" translate="yes" xml:space="preserve">
          <source>The following exceptions are available: &lt;code&gt;[&quot;{}&quot;, &quot;[]&quot;, &quot;()&quot;, &quot;empty&quot;]&lt;/code&gt;.</source>
          <target state="translated">可以使用以下例外： &lt;code&gt;[&quot;{}&quot;, &quot;[]&quot;, &quot;()&quot;, &quot;empty&quot;]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc06f672c1606cd07e74f3dea672e030eb3b9e95" translate="yes" xml:space="preserve">
          <source>The following is another example of this behavior:</source>
          <target state="translated">下面是这种行为的另一个例子。</target>
        </trans-unit>
        <trans-unit id="2a56e159d769ca06392168750d10004a388bb2d2" translate="yes" xml:space="preserve">
          <source>The following methods internally use the &lt;code&gt;===&lt;/code&gt; comparison to match the given value with an array element:</source>
          <target state="translated">以下方法在内部使用 &lt;code&gt;===&lt;/code&gt; 比较将给定值与数组元素进行匹配：</target>
        </trans-unit>
        <trans-unit id="5d5534fd1ddcbfd687919d332b483e9a80e0f5bb" translate="yes" xml:space="preserve">
          <source>The following operators can be used in &lt;code&gt;groups&lt;/code&gt; option:</source>
          <target state="translated">可以在 &lt;code&gt;groups&lt;/code&gt; 选项中使用以下运算符：</target>
        </trans-unit>
        <trans-unit id="6b976bf24d5d6d504746e7c6ab5309ec8057839f" translate="yes" xml:space="preserve">
          <source>The following parsers are compatible with ESLint:</source>
          <target state="translated">以下解析器与ESLint兼容。</target>
        </trans-unit>
        <trans-unit id="0d78993759d70053fb65fd89fcd97c00ecd762fb" translate="yes" xml:space="preserve">
          <source>The following pattern is under strict mode globally and is considered valid with the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option and a warning with the &lt;code&gt;&quot;never&quot;&lt;/code&gt; option.</source>
          <target state="translated">以下模式在全局处于严格模式下，并且使用 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 选项被视为有效，而使用 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 选项则被视为警告。</target>
        </trans-unit>
        <trans-unit id="d729325dfb7e6f59aa92e87801a3213c9448843d" translate="yes" xml:space="preserve">
          <source>The following patterns apply strict mode only to functions so are valid with the &lt;code&gt;&quot;never&quot;&lt;/code&gt; option but are problems with the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option.</source>
          <target state="translated">以下模式仅对功能应用严格模式，因此对 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 选项有效，而对 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 选项有效。</target>
        </trans-unit>
        <trans-unit id="4c8beda3159d864bcb7168811d6ca919b1da89c2" translate="yes" xml:space="preserve">
          <source>The following rules have been added to the &lt;a href=&quot;configuring#using-eslintrecommended&quot;&gt;&lt;code&gt;eslint:recommended&lt;/code&gt;&lt;/a&gt; config:</source>
          <target state="translated">以下规则已添加到&lt;a href=&quot;configuring#using-eslintrecommended&quot;&gt; &lt;code&gt;eslint:recommended&lt;/code&gt; &lt;/a&gt;配置：</target>
        </trans-unit>
        <trans-unit id="43d343a3ec041d356d216b275ad524155322bd82" translate="yes" xml:space="preserve">
          <source>The following rules have been deprecated with new rules created to take their place. The following is a list of the removed rules and their replacements:</source>
          <target state="translated">以下规则已被废止,并制定了新的规则来取代。以下是被删除的规则及其替代规则的清单:</target>
        </trans-unit>
        <trans-unit id="fd8fba26361e9e9eea3de62de397689436cfaa0d" translate="yes" xml:space="preserve">
          <source>The following rules were modified:</source>
          <target state="translated">修改了以下规则:</target>
        </trans-unit>
        <trans-unit id="cbf28d7aa679ef7fb32bcf23869dde2a833ca6c5" translate="yes" xml:space="preserve">
          <source>The following rules were removed from &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;:</source>
          <target state="translated">以下规则已从 &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; 中删除：</target>
        </trans-unit>
        <trans-unit id="4b1c496bbd734835e82ecba2dcd535dd72437441" translate="yes" xml:space="preserve">
          <source>The following selectors are supported:</source>
          <target state="translated">支持以下选择器:</target>
        </trans-unit>
        <trans-unit id="50fe0ca19519467513afe9de899977912a5dca9e" translate="yes" xml:space="preserve">
          <source>The function declaration portion rule will be rendered obsolete when &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=585536&quot;&gt;block-scoped functions&lt;/a&gt; land in ES6, but until then, it should be left on to enforce valid constructions. Disable checking variable declarations when using &lt;a href=&quot;block-scoped-var&quot;&gt;block-scoped-var&lt;/a&gt; or if declaring variables in nested blocks is acceptable despite hoisting.</source>
          <target state="translated">当&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=585536&quot;&gt;块作用域函数&lt;/a&gt;进入ES6时，函数声明部分规则将被废弃，但在此之前，应保留该规则以强制执行有效构造。当使用&lt;a href=&quot;block-scoped-var&quot;&gt;block-scoped-var&lt;/a&gt;或尽管吊装仍可接受在嵌套块中声明变量时，请禁用检查变量声明。</target>
        </trans-unit>
        <trans-unit id="db3dccfd930abb34e566f04f78fc9ed70b467b0b" translate="yes" xml:space="preserve">
          <source>The function has &lt;code&gt;@this&lt;/code&gt; tag in its JSDoc comment.</source>
          <target state="translated">该函数在其JSDoc注释中具有 &lt;code&gt;@this&lt;/code&gt; 标记。</target>
        </trans-unit>
        <trans-unit id="5620d241e1ebd93a4e8ac57b317c474f477713ad" translate="yes" xml:space="preserve">
          <source>The function invocation can be written by &lt;code&gt;Function.prototype.call()&lt;/code&gt; and &lt;code&gt;Function.prototype.apply()&lt;/code&gt;. But &lt;code&gt;Function.prototype.call()&lt;/code&gt; and &lt;code&gt;Function.prototype.apply()&lt;/code&gt; are slower than the normal function invocation.</source>
          <target state="translated">可以通过 &lt;code&gt;Function.prototype.call()&lt;/code&gt; 和 &lt;code&gt;Function.prototype.apply()&lt;/code&gt; 编写函数调用。但是 &lt;code&gt;Function.prototype.call()&lt;/code&gt; 和 &lt;code&gt;Function.prototype.apply()&lt;/code&gt; 比正常的函数调用慢。</target>
        </trans-unit>
        <trans-unit id="a5351ac484a8bf3cb3ea45d7dd69d4667a894926" translate="yes" xml:space="preserve">
          <source>The function is a callback of array methods (such as &lt;code&gt;.forEach()&lt;/code&gt;) if &lt;code&gt;thisArg&lt;/code&gt; is given.</source>
          <target state="translated">如果给定 &lt;code&gt;thisArg&lt;/code&gt; ,则该函数是数组方法（例如 &lt;code&gt;.forEach()&lt;/code&gt; ）的回调。</target>
        </trans-unit>
        <trans-unit id="deb40c3066f6e38deb8139ba56f87dc333a2a42d" translate="yes" xml:space="preserve">
          <source>The function is a constructor of ES2015 Classes.</source>
          <target state="translated">该函数是ES2015类的构造函数。</target>
        </trans-unit>
        <trans-unit id="de02b593b295da2bc2bad8e8f15be1427537b0d8" translate="yes" xml:space="preserve">
          <source>The function is a method/getter/setter of ES2015 Classes. (excepts static methods)</source>
          <target state="translated">该函数是ES2015类的方法/getter/setter。(静态方法除外)</target>
        </trans-unit>
        <trans-unit id="58b8b313fb5fc9cea0cb6de31e257ad439368b79" translate="yes" xml:space="preserve">
          <source>The function is assigned to a property.</source>
          <target state="translated">该函数被分配给一个属性。</target>
        </trans-unit>
        <trans-unit id="1ec2f55a7c94721043c141bc1c6ef3a223affda5" translate="yes" xml:space="preserve">
          <source>The function is assigned to a variable which starts with an uppercase letter.</source>
          <target state="translated">该函数被分配给一个以大写字母开头的变量。</target>
        </trans-unit>
        <trans-unit id="f1a468e18550838069874f9e16dfdc8a15a09a28" translate="yes" xml:space="preserve">
          <source>The function is on an object literal.</source>
          <target state="translated">该函数是在一个对象文字上。</target>
        </trans-unit>
        <trans-unit id="24287496e1c3d7550a774298bb9d98fa77335f61" translate="yes" xml:space="preserve">
          <source>The function's</source>
          <target state="translated">该函数的</target>
        </trans-unit>
        <trans-unit id="aeaafe54aaf295b5e3e4fde9b2befddf145018a6" translate="yes" xml:space="preserve">
          <source>The get syntax binds an object property to a function that will be called when that property is looked up. It was first introduced in ECMAScript 5:</source>
          <target state="translated">get语法将一个对象属性绑定到一个函数上,该函数将在查询该属性时被调用。它最早是在ECMAScript 5中引入的。</target>
        </trans-unit>
        <trans-unit id="5303cca7341f758ff7259b4665508fac4ca8d017" translate="yes" xml:space="preserve">
          <source>The global's</source>
          <target state="translated">全球的</target>
        </trans-unit>
        <trans-unit id="cd1ea1f16f00e056aa55de069fc2ba6f16e8946b" translate="yes" xml:space="preserve">
          <source>The goal of using &lt;code&gt;new&lt;/code&gt; with a constructor is typically to create an object of a particular type and store that object in a variable, such as:</source>
          <target state="translated">与构造函数一起使用 &lt;code&gt;new&lt;/code&gt; 的目标通常是创建特定类型的对象并将该对象存储在变量中，例如：</target>
        </trans-unit>
        <trans-unit id="acac3d2c78a0442ff5e1d6b8f826069158684f0b" translate="yes" xml:space="preserve">
          <source>The implementation is not aware of any local functions with the name &lt;code&gt;require&lt;/code&gt; that may shadow Node.js' global &lt;code&gt;require&lt;/code&gt;.</source>
          <target state="translated">该实现不知道任何名称为 &lt;code&gt;require&lt;/code&gt; 的本地函数可能会遮蔽Node.js的global &lt;code&gt;require&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="032f95f2ad52750fe42b95d8612f0f3b8a88f333" translate="yes" xml:space="preserve">
          <source>The import statement can also import a module without exported bindings. Used when the module does not export anything, but runs it own code or changes the global context object.</source>
          <target state="translated">import语句也可以导入一个没有导出绑定的模块。当模块没有导出任何东西,但运行自己的代码或改变全局上下文对象时使用。</target>
        </trans-unit>
        <trans-unit id="0eeaf642c54558bc59a95b083b854c711c38cc2b" translate="yes" xml:space="preserve">
          <source>The import statement is used to import members (functions, objects or primitives) that have been exported from an external module. Using a specific member syntax:</source>
          <target state="translated">导入语句用于导入从外部模块导出的成员(函数、对象或基元)。使用特定的成员语法。</target>
        </trans-unit>
        <trans-unit id="828330981111cc0aaf5513c653c9b3ff72d6b8c6" translate="yes" xml:space="preserve">
          <source>The information about the deprecated rules that were used to check this file.</source>
          <target state="translated">用于检查这个文件的废弃规则的信息。</target>
        </trans-unit>
        <trans-unit id="4a80f2125f069a5f1c92caf6dad61a91aa823038" translate="yes" xml:space="preserve">
          <source>The information available for each linting message is:</source>
          <target state="translated">每条绒毛信息的可用信息是:</target>
        </trans-unit>
        <trans-unit id="7675327e3125cbdffe94a48f7416e4309f48e134" translate="yes" xml:space="preserve">
          <source>The information available is:</source>
          <target state="translated">现有的信息是:</target>
        </trans-unit>
        <trans-unit id="026fee076803b9a433c8e9acb756fb2b3e489841" translate="yes" xml:space="preserve">
          <source>The kind of the way to address variables in destructuring. There are 2 values:</source>
          <target state="translated">破坏构造中变量的那种处理方式。有2种值。</target>
        </trans-unit>
        <trans-unit id="c38f57d73e2ff10d4366adce9c62d418943b8650" translate="yes" xml:space="preserve">
          <source>The last line has the &lt;code&gt;*/&lt;/code&gt; comment opening aligned with the preceding lines. No other text is allowed on this line.</source>
          <target state="translated">最后一行的 &lt;code&gt;*/&lt;/code&gt; 注释开头与前面的行对齐。此行上不允许有其他文本。</target>
        </trans-unit>
        <trans-unit id="cf2418cd74bfe3b3574af71ae7e2102cc8457373" translate="yes" xml:space="preserve">
          <source>The line comment &lt;code&gt;// exported variableName&lt;/code&gt; will not work as &lt;code&gt;exported&lt;/code&gt; is not line-specific.</source>
          <target state="translated">行注释 &lt;code&gt;// exported variableName&lt;/code&gt; 将不起作用，因为 &lt;code&gt;exported&lt;/code&gt; 的不是特定于行的。</target>
        </trans-unit>
        <trans-unit id="dd3923f68fea3cc32c62bea7c26b00e55243f62f" translate="yes" xml:space="preserve">
          <source>The line is &lt;code&gt;--&lt;/code&gt; or &lt;code&gt;++&lt;/code&gt; (in which case it will decrement/increment the next token.)</source>
          <target state="translated">该行是 &lt;code&gt;--&lt;/code&gt; 或 &lt;code&gt;++&lt;/code&gt; （在这种情况下，它将减少/增加下一个标记。）</target>
        </trans-unit>
        <trans-unit id="8fc6d3dc22f28ddac02852365e2f486c4a9fbcb1" translate="yes" xml:space="preserve">
          <source>The linebreaks (new lines) used in windows operating system are usually &lt;em&gt;carriage returns&lt;/em&gt; (CR) followed by a &lt;em&gt;line feed&lt;/em&gt; (LF) making it a &lt;em&gt;carriage return line feed&lt;/em&gt; (CRLF) whereas Linux and Unix use a simple &lt;em&gt;line feed&lt;/em&gt; (LF). The corresponding &lt;em&gt;control sequences&lt;/em&gt; are &lt;code&gt;&quot;\n&quot;&lt;/code&gt; (for LF) and &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; for (CRLF).</source>
          <target state="translated">Windows操作系统中使用的换行符（换行符）通常是&lt;em&gt;回车符&lt;/em&gt;（CR），后跟&lt;em&gt;换行符&lt;/em&gt;（LF），使其成为&lt;em&gt;回车符换行符&lt;/em&gt;（CRLF），而Linux和Unix使用简单&lt;em&gt;换行符&lt;/em&gt;（LF）。相应的&lt;em&gt;控制序列&lt;/em&gt;是 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; （对于LF）和 &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; （对于CRLF）。</target>
        </trans-unit>
        <trans-unit id="26d7358730984ec96df0ef330056949a6cca706a" translate="yes" xml:space="preserve">
          <source>The lint target files. This can contain any of file paths, directory paths, and glob patterns.</source>
          <target state="translated">lint的目标文件,可以包含任何文件路径、目录路径和glob模式。可以包含任何文件路径、目录路径和glob模式。</target>
        </trans-unit>
        <trans-unit id="6ba0efe7b079abf8625759c3ee06d0fef820cbba" translate="yes" xml:space="preserve">
          <source>The list of suggestions. Each suggestion is the pair of a description and an &lt;a href=&quot;#-editinfo-type&quot;&gt;EditInfo&lt;/a&gt; object to fix code. API users such as editor integrations can choose one of them to fix the problem of this message. This property is undefined if this message doesn't have any suggestions.</source>
          <target state="translated">建议清单。每个建议都是一对描述和一个用于修复代码的&lt;a href=&quot;#-editinfo-type&quot;&gt;EditInfo&lt;/a&gt;对象。诸如编辑器集成之类的API用户可以选择其中之一来解决此消息的问题。如果此消息没有任何建议，则此属性未定义。</target>
        </trans-unit>
        <trans-unit id="2201d7d5091e9b276f0386c81e6c9e6b5aad5f13" translate="yes" xml:space="preserve">
          <source>The lists below are ordered roughly by the number of users each change is expected to affect, where the first items are expected to affect the most users.</source>
          <target state="translated">下面的列表大致按每项变更预计影响的用户数排序,其中第一项预计影响的用户最多。</target>
        </trans-unit>
        <trans-unit id="cd5ba3dd3a61a71ce3c2df5c8c27632dbb8e611b" translate="yes" xml:space="preserve">
          <source>The main method is &lt;code&gt;cli.execute()&lt;/code&gt;, which accepts an array of strings that represent the command line options (as if &lt;code&gt;process.argv&lt;/code&gt; were passed without the first two arguments). If you want to run ESLint from inside of another program and have it act like the CLI, then &lt;code&gt;cli&lt;/code&gt; is the object to use.</source>
          <target state="translated">主要方法是 &lt;code&gt;cli.execute()&lt;/code&gt; ，它接受代表命令行选项的字符串数组（就像 &lt;code&gt;process.argv&lt;/code&gt; 是在没有前两个参数的情况下传递的一样）。如果要从另一个程序内部运行ESLint并使它像CLI一样运行，则 &lt;code&gt;cli&lt;/code&gt; 是要使用的对象。</target>
        </trans-unit>
        <trans-unit id="82c7fc418c96dfe485b72e97d5785c7b1f84d1d1" translate="yes" xml:space="preserve">
          <source>The main method of the &lt;code&gt;CLIEngine&lt;/code&gt; is &lt;code&gt;executeOnFiles()&lt;/code&gt;, which accepts an array of file and directory names to run the linter on.</source>
          <target state="translated">&lt;code&gt;CLIEngine&lt;/code&gt; 的主要方法是 &lt;code&gt;executeOnFiles()&lt;/code&gt; ，该方法接受文件名和目录名的数组以运行linter。</target>
        </trans-unit>
        <trans-unit id="aa5cd71ecca317561d0f3120437420e4eb266e86" translate="yes" xml:space="preserve">
          <source>The main method of the &lt;code&gt;Linter&lt;/code&gt; object is &lt;code&gt;verify()&lt;/code&gt; and accepts two arguments: the source text to verify and a configuration object (the baked configuration of the given configuration file plus command line options). The method first parses the given text with &lt;code&gt;espree&lt;/code&gt; (or whatever the configured parser is) and retrieves the AST. The AST is produced with both line/column and range locations which are useful for reporting location of issues and retrieving the source text related to an AST node, respectively.</source>
          <target state="translated">&lt;code&gt;Linter&lt;/code&gt; 对象的主要方法是 &lt;code&gt;verify()&lt;/code&gt; ，它接受两个参数：要验证的源文本和一个配置对象（给定配置文件的烘焙配置以及命令行选项）。该方法首先使用 &lt;code&gt;espree&lt;/code&gt; （或任何配置的解析器）解析给定的文本，然后检索AST。AST具有行/列和范围位置，分别用于报告问题的位置和检索与AST节点有关的源文本。</target>
        </trans-unit>
        <trans-unit id="b71267395abe4b458e8e16055642b9f1606731d6" translate="yes" xml:space="preserve">
          <source>The main method you'll use is &lt;code&gt;context.report()&lt;/code&gt;, which publishes a warning or error (depending on the configuration being used). This method accepts a single argument, which is an object containing the following properties:</source>
          <target state="translated">您将使用的主要方法是 &lt;code&gt;context.report()&lt;/code&gt; ，它发布警告或错误（取决于所使用的配置）。此方法接受单个参数，该参数是一个包含以下属性的对象：</target>
        </trans-unit>
        <trans-unit id="2aa043d4f97cda6b2c4e5a4d1829ce7593f304b2" translate="yes" xml:space="preserve">
          <source>The message summary should be a one-sentence description of the change, and it must be 72 characters in length or shorter. If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use &lt;code&gt;(refs #1234)&lt;/code&gt; instead of &lt;code&gt;(fixes #1234)&lt;/code&gt;.</source>
          <target state="translated">消息摘要应该是更改的一句话描述，并且长度必须小于或等于72个字符。如果拉取请求解决了问题，则应在末尾提及问题编号。如果提交不能完全解决问题，请使用 &lt;code&gt;(refs #1234)&lt;/code&gt; 代替 &lt;code&gt;(fixes #1234)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6fc4e5ab9c1873762f005496619a765f850f8b95" translate="yes" xml:space="preserve">
          <source>The method to convert the &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects to text.</source>
          <target state="translated">将&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt;对象转换为文本的方法。</target>
        </trans-unit>
        <trans-unit id="447ba6b4ad05e52da0b122358fe9cf1656020fec" translate="yes" xml:space="preserve">
          <source>The modification does not depend on whether the object option is set to &lt;code&gt;true&lt;/code&gt;. In other words, ESLint never collects all the property specifications onto a single line, even when the object option would permit that.</source>
          <target state="translated">修改不取决于object选项是否设置为 &lt;code&gt;true&lt;/code&gt; 。换句话说，即使对象选项允许，ESLint也不会将所有属性规范收集到一行上。</target>
        </trans-unit>
        <trans-unit id="928b12c02eeb60a25ebbe56b73b080bf2235439f" translate="yes" xml:space="preserve">
          <source>The modified source code text. This property is undefined if any fixable messages didn't exist.</source>
          <target state="translated">修改后的源代码文本。如果任何可修复的信息不存在,则此属性未定义。</target>
        </trans-unit>
        <trans-unit id="d8b8c078bf2e1f6851bd595f2c2f5cc6bbf13048" translate="yes" xml:space="preserve">
          <source>The module name can also be customized, just note that when using &lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;scoped modules&lt;/a&gt; it is not possible to omit the &lt;code&gt;eslint-config-&lt;/code&gt; prefix. Doing so would result in package naming conflicts, and thus in resolution errors in most of cases. For example a package named &lt;code&gt;@scope/eslint-config-myconfig&lt;/code&gt; vs &lt;code&gt;@scope/my-config&lt;/code&gt;, since both are valid scoped package names, the configuration should be specified as:</source>
          <target state="translated">模块名称也可以自定义，只需注意，在使用&lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;作用域模块时&lt;/a&gt;，无法省略 &lt;code&gt;eslint-config-&lt;/code&gt; 前缀。这样做将导致程序包命名冲突，从而在大多数情况下导致解析错误。例如，名为 &lt;code&gt;@scope/eslint-config-myconfig&lt;/code&gt; 与 &lt;code&gt;@scope/my-config&lt;/code&gt; 软件包，由于两者都是有效的作用域软件包名称，因此应将配置指定为：</target>
        </trans-unit>
        <trans-unit id="391d507111f772a5e622a4978aa02bebdf000901" translate="yes" xml:space="preserve">
          <source>The most important difference in v1.0.0 is that all rules are off by default. We made this change after numerous requests to allow turning off the default rules from within configuration files. While that wasn't technically feasible, it was feasible to have all rules off by default and then re-enable rules in configuration files using &lt;code&gt;extends&lt;/code&gt;. As such, we've made the &lt;code&gt;--reset&lt;/code&gt; behavior the default and removed this command line option.</source>
          <target state="translated">v1.0.0中最重要的区别是默认情况下所有规则都处于关闭状态。我们在无数次请求后做出了此更改，以允许从配置文件中关闭默认规则。尽管这在技术上不可行，但可以将默认情况下的所有规则都关闭，然后使用 &lt;code&gt;extends&lt;/code&gt; 在配置文件中重新启用规则是可行的。因此，我们将 &lt;code&gt;--reset&lt;/code&gt; 行为设为默认行为，并删除了此命令行选项。</target>
        </trans-unit>
        <trans-unit id="2981f174eb319000ec7b9dc71dff618ba3924b94" translate="yes" xml:space="preserve">
          <source>The most important method on &lt;code&gt;Linter&lt;/code&gt; is &lt;code&gt;verify()&lt;/code&gt;, which initiates linting of the given text. This method accepts three arguments:</source>
          <target state="translated">&lt;code&gt;Linter&lt;/code&gt; 上最重要的方法是 &lt;code&gt;verify()&lt;/code&gt; ，它会启动给定文本的整理。此方法接受三个参数：</target>
        </trans-unit>
        <trans-unit id="2d9309f4804540bc446c7db5a5a0e204ff20ebd8" translate="yes" xml:space="preserve">
          <source>The name of the function starts with uppercase.</source>
          <target state="translated">函数名称以大写字母开头。</target>
        </trans-unit>
        <trans-unit id="c187d7bc3b11447dcbf3b003402ff51671b83ee4" translate="yes" xml:space="preserve">
          <source>The name of the rule (string)</source>
          <target state="translated">规则的名称(字符串)</target>
        </trans-unit>
        <trans-unit id="3d05f85495e18f50c10102d3389fcbc9d5973e21" translate="yes" xml:space="preserve">
          <source>The names &lt;code&gt;&quot;semi&quot;&lt;/code&gt; and &lt;code&gt;&quot;quotes&quot;&lt;/code&gt; are the names of &lt;a href=&quot;https://eslint.org/docs/rules&quot;&gt;rules&lt;/a&gt; in ESLint. The first value is the error level of the rule and can be one of these values:</source>
          <target state="translated">名称 &lt;code&gt;&quot;semi&quot;&lt;/code&gt; 和 &lt;code&gt;&quot;quotes&quot;&lt;/code&gt; 是ESLint 中&lt;a href=&quot;https://eslint.org/docs/rules&quot;&gt;规则&lt;/a&gt;的名称。第一个值是规则的错误级别，可以是以下值之一：</target>
        </trans-unit>
        <trans-unit id="03f1e3c6076e63d911680ce1f195f2b2861a99e5" translate="yes" xml:space="preserve">
          <source>The next line starts with &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, or some other binary operator that can only be found between two tokens in a single expression.</source>
          <target state="translated">下一行开始于 &lt;code&gt;[&lt;/code&gt; ， &lt;code&gt;(&lt;/code&gt; ， &lt;code&gt;+&lt;/code&gt; ， &lt;code&gt;*&lt;/code&gt; ， &lt;code&gt;/&lt;/code&gt; ， &lt;code&gt;-&lt;/code&gt; ,， &lt;code&gt;,&lt;/code&gt; 。 &lt;code&gt;.&lt;/code&gt; 或一些其它二元运算，可以只有两个标记之间在一个单一的表达被发现。</target>
        </trans-unit>
        <trans-unit id="ed3de168e4acf1680325d171a28dd7b74b024412" translate="yes" xml:space="preserve">
          <source>The next line(s) have a &lt;code&gt;*&lt;/code&gt; aligned with the &lt;code&gt;*&lt;/code&gt; in the first line. Text is allowed on these lines.</source>
          <target state="translated">下一行（多个）具有 &lt;code&gt;*&lt;/code&gt; 与对准 &lt;code&gt;*&lt;/code&gt; 中的第一行。这些行上允许文本。</target>
        </trans-unit>
        <trans-unit id="00194fc1917a102824f66484638b388a032a7482" translate="yes" xml:space="preserve">
          <source>The node contains all of the information necessary to figure out the line and column number of the offending text as well the source text representing the node.</source>
          <target state="translated">该节点包含所有必要的信息,以找出违规文本的行号和列号,以及代表该节点的源文本。</target>
        </trans-unit>
        <trans-unit id="b4ed3f78adad10420e57b7e0edb1eca371c23d68" translate="yes" xml:space="preserve">
          <source>The number of errors that can be fixed automatically by the &lt;code&gt;fix&lt;/code&gt; constructor option.</source>
          <target state="translated">可通过 &lt;code&gt;fix&lt;/code&gt; 构造函数选项自动修复的错误数。</target>
        </trans-unit>
        <trans-unit id="6d50e11c18c94c2f0420745923f450c9aeb9f0a2" translate="yes" xml:space="preserve">
          <source>The number of errors. This includes fixable errors.</source>
          <target state="translated">错误的数量。这包括可修复的错误。</target>
        </trans-unit>
        <trans-unit id="ba2a30d0b9505f420e855f975645b4c8a258575c" translate="yes" xml:space="preserve">
          <source>The number of warnings that can be fixed automatically by the &lt;code&gt;fix&lt;/code&gt; constructor option.</source>
          <target state="translated">可通过 &lt;code&gt;fix&lt;/code&gt; 构造函数选项自动修复的警告数。</target>
        </trans-unit>
        <trans-unit id="91ed0bffbaeedc91108fa8391d7c91ea93e12b94" translate="yes" xml:space="preserve">
          <source>The number of warnings. This includes fixable warnings.</source>
          <target state="translated">警告的数量。这包括可修复的警告。</target>
        </trans-unit>
        <trans-unit id="d45e635828bcb31db112256ea444b8c6bf3fd18e" translate="yes" xml:space="preserve">
          <source>The only acceptable time to have multiple single-line comments on successive lines is to comment out large sections of code. Multi-line comments should not be used for this purpose.</source>
          <target state="translated">唯一可以接受的在连续行上有多个单行注释的时间是注释出大段的代码。多行注释不应用于此目的。</target>
        </trans-unit>
        <trans-unit id="6a644e143491953839301b85bb8b200e474de5ab" translate="yes" xml:space="preserve">
          <source>The only time you would compare a variable against itself is when you are testing for &lt;code&gt;NaN&lt;/code&gt;. However, it is far more appropriate to use &lt;code&gt;typeof x === 'number' &amp;amp;&amp;amp; isNaN(x)&lt;/code&gt; or the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN&quot;&gt;Number.isNaN ES2015 function&lt;/a&gt; for that use case rather than leaving the reader of the code to determine the intent of self comparison.</source>
          <target state="translated">唯一将变量与自身进行比较的时间是在测试 &lt;code&gt;NaN&lt;/code&gt; 时。但是，对于该用例，更适合使用 &lt;code&gt;typeof x === 'number' &amp;amp;&amp;amp; isNaN(x)&lt;/code&gt; 或&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN&quot;&gt;Number.isNaN ES2015函数&lt;/a&gt;，而不是让代码的读者确定自我比较的意图。</target>
        </trans-unit>
        <trans-unit id="fae2f2bc90a52f0d6909f6ceb19aaafac0a26360" translate="yes" xml:space="preserve">
          <source>The opening brace should be at the end of the line that begins the compound statement; the closing brace should begin a line and be indented to the beginning of the compound statement.</source>
          <target state="translated">开头的括号应在复合语句开始的行末;结尾的括号应从一行开始,缩进到复合语句的开头。</target>
        </trans-unit>
        <trans-unit id="abfabb83ce95a74f0937675f7094af1e6695a2c0" translate="yes" xml:space="preserve">
          <source>The opening brace should be on the same line as the containing statement.</source>
          <target state="translated">开头的括号应与包含的语句在同一行。</target>
        </trans-unit>
        <trans-unit id="e9b551f3ef4076d91cd7f96a1f41ae4787a40977" translate="yes" xml:space="preserve">
          <source>The option also has a string shorthand:</source>
          <target state="translated">该选项还有一个字符串速记。</target>
        </trans-unit>
        <trans-unit id="de7031af6085176060b0ac36063990d91e8f177b" translate="yes" xml:space="preserve">
          <source>The optional exception does not excuse this case, because the entire collection of property specifications spans 4 lines, not 1.</source>
          <target state="translated">可选例外并不能为这种情况开脱,因为整个财产规格的集合跨越了4行,而不是1行。</target>
        </trans-unit>
        <trans-unit id="dcedceca0a5fbd9f7abfd655550b7f46c22973d8" translate="yes" xml:space="preserve">
          <source>The options allow labels with loop or switch statements:</source>
          <target state="translated">该选项允许标签带有循环或开关语句。</target>
        </trans-unit>
        <trans-unit id="cf49b44308f034d8aba18fe071fc2b7ec04bd224" translate="yes" xml:space="preserve">
          <source>The options available and the expected syntax for &lt;code&gt;parserOptions&lt;/code&gt; is the same as those used in &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;parserOptions&lt;/code&gt; 的可用选项和预期语法与&lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;配置中&lt;/a&gt;使用的选项相同。</target>
        </trans-unit>
        <trans-unit id="c4af5a293dd844cadf7c1778b14e98c1b7daf5ee" translate="yes" xml:space="preserve">
          <source>The original source code text. This property is undefined if any messages didn't exist or the &lt;code&gt;output&lt;/code&gt; property exists.</source>
          <target state="translated">原始源代码文本。如果不存在任何消息或 &lt;code&gt;output&lt;/code&gt; 属性存在，则此属性未定义。</target>
        </trans-unit>
        <trans-unit id="a61791ccd424eca040a7f63b8afadbed687c913a" translate="yes" xml:space="preserve">
          <source>The output will be</source>
          <target state="translated">输出将是</target>
        </trans-unit>
        <trans-unit id="f4dc89186e373e825b6dfa59c8110b3946aeee21" translate="yes" xml:space="preserve">
          <source>The output would be:</source>
          <target state="translated">产出将是:</target>
        </trans-unit>
        <trans-unit id="c021a3a657e4f53d4e449ea1c6f0c78f48d2adfc" translate="yes" xml:space="preserve">
          <source>The pair of 0-based indices in source code text to remove.</source>
          <target state="translated">源代码文本中要删除的一对基于0的索引。</target>
        </trans-unit>
        <trans-unit id="046ede3288f3c1cadbd2cfefc7b488c9fd37084c" translate="yes" xml:space="preserve">
          <source>The path to the file whose configuration you would like to calculate. Directory paths are forbidden because ESLint cannot handle the &lt;code&gt;overrides&lt;/code&gt; setting.</source>
          <target state="translated">您要计算其配置的文件的路径。目录路径被禁止，因为ESLint无法处理 &lt;code&gt;overrides&lt;/code&gt; 设置。</target>
        </trans-unit>
        <trans-unit id="0831c2dd23b6e63812d13e269c384cd1d40181e7" translate="yes" xml:space="preserve">
          <source>The path to the file you want to check.</source>
          <target state="translated">你要检查的文件的路径。</target>
        </trans-unit>
        <trans-unit id="cd939e136292c4dcd7638cc19ed24250e2872fad" translate="yes" xml:space="preserve">
          <source>The path to the file you want to check. The following values are allowed:</source>
          <target state="translated">你要检查的文件的路径。允许使用以下值。</target>
        </trans-unit>
        <trans-unit id="9789ff50f50df37207f7264a43f1a689f0688f0a" translate="yes" xml:space="preserve">
          <source>The patterns are applied against the file path relative to the directory of the config file. For example, if your config file has the path &lt;code&gt;/Users/john/workspace/any-project/.eslintrc.js&lt;/code&gt; and the file you want to lint has the path &lt;code&gt;/Users/john/workspace/any-project/lib/util.js&lt;/code&gt;, then the pattern provided in &lt;code&gt;.eslintrc.js&lt;/code&gt; will be executed against the relative path &lt;code&gt;lib/util.js&lt;/code&gt;.</source>
          <target state="translated">模式针对相对于配置文件目录的文件路径应用。例如，如果您的配置文件的路径为 &lt;code&gt;/Users/john/workspace/any-project/.eslintrc.js&lt;/code&gt; ，而您要加载的文件的路径为 &lt;code&gt;/Users/john/workspace/any-project/lib/util.js&lt;/code&gt; ，则 &lt;code&gt;.eslintrc.js&lt;/code&gt; 中提供的模式将针对相对路径 &lt;code&gt;lib/util.js&lt;/code&gt; 执行。</target>
        </trans-unit>
        <trans-unit id="d7c7d55489a5efe043679a245ed2e68741b450b6" translate="yes" xml:space="preserve">
          <source>The pitfalls of using objects as maps in JavaScript</source>
          <target state="translated">在JavaScript中使用对象作为地图的陷阱</target>
        </trans-unit>
        <trans-unit id="05157eccd9a4d06e6ff4c2778c2a6f7b853c19e7" translate="yes" xml:space="preserve">
          <source>The prefer-reflect rule will flag usage of any older method, suggesting to instead use the newer Reflect version.</source>
          <target state="translated">prefer-reflect规则将标记任何旧方法的使用,建议使用较新的Reflect版本。</target>
        </trans-unit>
        <trans-unit id="019176c59859ffc7e6915010bb0d29fc4116cb11" translate="yes" xml:space="preserve">
          <source>The primary Node.js API is &lt;code&gt;CLIEngine&lt;/code&gt;, which is the underlying utility that runs the ESLint command line interface. This object will read the filesystem for configuration and file information but will not output any results. Instead, it allows you direct access to the important information so you can deal with the output yourself.</source>
          <target state="translated">主要的Node.js API是 &lt;code&gt;CLIEngine&lt;/code&gt; ，它是运行ESLint命令行界面的基础实用程序。该对象将读取文件系统以获取配置和文件信息，但不会输出任何结果。相反，它允许您直接访问重要信息，以便您自己处理输出。</target>
        </trans-unit>
        <trans-unit id="c476b276186c6fb97acc415f8441c0d6359f3d36" translate="yes" xml:space="preserve">
          <source>The primary difference between &lt;code&gt;function&lt;/code&gt; declarations and &lt;code&gt;function expressions&lt;/code&gt; is that declarations are &lt;em&gt;hoisted&lt;/em&gt; to the top of the scope in which they are defined, which allows you to write code that uses the function before its declaration. For example:</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 声明和 &lt;code&gt;function expressions&lt;/code&gt; 之间的主要区别在于声明被&lt;em&gt;提升&lt;/em&gt;到定义它们的作用域的顶部，这使您可以在声明函数之前编写使用函数的代码。例如：</target>
        </trans-unit>
        <trans-unit id="cc5cca2ea790657770c377a55c8c2c9d38976e25" translate="yes" xml:space="preserve">
          <source>The primary reason to use asynchronous functions is typically to use the &lt;code&gt;await&lt;/code&gt; operator, such as this:</source>
          <target state="translated">使用异步函数的主要原因通常是使用 &lt;code&gt;await&lt;/code&gt; 运算符，例如：</target>
        </trans-unit>
        <trans-unit id="27f63a6807abd8b3bd2aa20888273f48ea3fa67c" translate="yes" xml:space="preserve">
          <source>The primary script to use is &lt;code&gt;npm test&lt;/code&gt;, which does several things:</source>
          <target state="translated">要使用的主要脚本是 &lt;code&gt;npm test&lt;/code&gt; ，它执行以下操作：</target>
        </trans-unit>
        <trans-unit id="88571aeb3633660582e146f8ca69889ac98fb83d" translate="yes" xml:space="preserve">
          <source>The problem is when these developers work together in a project. This rule enforces a coding style where empty newlines are allowed or disallowed after &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;const&lt;/code&gt; statements. It helps the code to look consistent across the entire project.</source>
          <target state="translated">问题是这些开发人员在项目中一起工作时。此规则强制执行一种编码样式，其中在 &lt;code&gt;var&lt;/code&gt; ， &lt;code&gt;let&lt;/code&gt; 或 &lt;code&gt;const&lt;/code&gt; 语句之后允许或不允许使用空换行符。它有助于使代码在整个项目中看起来一致。</target>
        </trans-unit>
        <trans-unit id="c7abf9c98248c9d5e551542e1f7cf64b22ee6b71" translate="yes" xml:space="preserve">
          <source>The problem you want to solve.</source>
          <target state="translated">你想解决的问题。</target>
        </trans-unit>
        <trans-unit id="fbe43fced48ce154fc594e0d7efd5a4fe22b0e58" translate="yes" xml:space="preserve">
          <source>The process of submitting a pull request is fairly straightforward and generally follows the same pattern each time:</source>
          <target state="translated">提交拉取请求的过程相当简单,一般每次都遵循相同的模式。</target>
        </trans-unit>
        <trans-unit id="a05409697e85649207fda3ec4adf2978841d64e9" translate="yes" xml:space="preserve">
          <source>The promise that will be fulfilled after all files are written.</source>
          <target state="translated">承诺,在所有文件写完后将会实现。</target>
        </trans-unit>
        <trans-unit id="2a2cd5efb0c948ebdbe12aabca7fbb672ea3acab" translate="yes" xml:space="preserve">
          <source>The promise that will be fulfilled with a &lt;a href=&quot;#-formatter-type&quot;&gt;Formatter&lt;/a&gt; object.</source>
          <target state="translated">将通过&lt;a href=&quot;#-formatter-type&quot;&gt;Formatter&lt;/a&gt;对象实现的承诺。</target>
        </trans-unit>
        <trans-unit id="478dfcc83dc754277166d46e9b3d38e748913611" translate="yes" xml:space="preserve">
          <source>The promise that will be fulfilled with a configuration object.</source>
          <target state="translated">用配置对象实现的承诺。</target>
        </trans-unit>
        <trans-unit id="c0fc0e0cd457cdd25ed6e640cda0efc522fcc0b6" translate="yes" xml:space="preserve">
          <source>The promise that will be fulfilled with an array of &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects.</source>
          <target state="translated">可以通过&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt;对象数组实现的承诺。</target>
        </trans-unit>
        <trans-unit id="aa291d0f16227cc6e0c9871b3f5369125da25d86" translate="yes" xml:space="preserve">
          <source>The promise that will be fulfilled with an array of &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects. This is an array (despite there being only one lint result) in order to keep the interfaces between this and the &lt;a href=&quot;#-eslintlintfilespatterns&quot;&gt;&lt;code&gt;eslint.lintFiles()&lt;/code&gt;&lt;/a&gt; method similar.</source>
          <target state="translated">可以通过&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt;对象数组实现的承诺。这是一个数组（尽管只有一个皮棉结果），以使此&lt;a href=&quot;#-eslintlintfilespatterns&quot;&gt; &lt;code&gt;eslint.lintFiles()&lt;/code&gt; &lt;/a&gt;与eslint.lintFiles（）方法之间的接口保持相似。</target>
        </trans-unit>
        <trans-unit id="8a5e3b16efbb634d1ac4a691dd800a96c5e8a3a4" translate="yes" xml:space="preserve">
          <source>The promise that will be fulfilled with whether the file is ignored or not. If the file is ignored, then it will return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">无论是否忽略文件，都将实现承诺。如果忽略该文件，则它将返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c3bb0c19b313c5a8f9e87aaba0c7d42779858d8a" translate="yes" xml:space="preserve">
          <source>The proponents of these extra spaces believe it make the code easier to read and can more easily highlight potential errors, such as:</source>
          <target state="translated">这些额外空间的支持者认为,它使代码更容易阅读,并可以更容易地突出潜在的错误,如。</target>
        </trans-unit>
        <trans-unit id="842b4413185a6f29a14a60bf357af03cfc8c67fc" translate="yes" xml:space="preserve">
          <source>The pull request must have a description. The description should explain what you did and how its effects can be seen.</source>
          <target state="translated">拉取请求必须有一个描述。描述应该解释你做了什么,以及如何看到它的效果。</target>
        </trans-unit>
        <trans-unit id="9f51bbd346695224f5a3bba69d99964bfc48d685" translate="yes" xml:space="preserve">
          <source>The purpose is to avoid expressions such as &lt;code&gt;! a &amp;lt; b&lt;/code&gt; (which is equivalent to &lt;code&gt;(a ? 0 : 1) &amp;lt; b&lt;/code&gt;) when what is really intended is &lt;code&gt;!(a &amp;lt; b)&lt;/code&gt;.</source>
          <target state="translated">目的是避免使用诸如 &lt;code&gt;! a &amp;lt; b&lt;/code&gt; 当真正想要的是 &lt;code&gt;!(a &amp;lt; b)&lt;/code&gt; 时，a &amp;lt;b（等于 &lt;code&gt;(a ? 0 : 1) &amp;lt; b&lt;/code&gt; &amp;lt;b）。</target>
        </trans-unit>
        <trans-unit id="d6c661a567da1e6f27caf7616e695a2df7785021" translate="yes" xml:space="preserve">
          <source>The purpose of the &lt;code&gt;delete&lt;/code&gt; operator is to remove a property from an object. Using the &lt;code&gt;delete&lt;/code&gt; operator on a variable might lead to unexpected behavior.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 运算符的目的是从对象中删除属性。在变量上使用 &lt;code&gt;delete&lt;/code&gt; 运算符可能会导致意外行为。</target>
        </trans-unit>
        <trans-unit id="8dc19192de8fb3195f72308a36d5ed027027af0b" translate="yes" xml:space="preserve">
          <source>The range indexes of all tokens and comments must not overlap with the range of other tokens and comments.</source>
          <target state="translated">所有令牌和注释的范围索引不得与其他令牌和注释的范围重叠。</target>
        </trans-unit>
        <trans-unit id="b0a76dd0dfcefbc58816ee112b837c5543da7412" translate="yes" xml:space="preserve">
          <source>The reason for this is that &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; do type coercion which follows the rather obscure &lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;Abstract Equality Comparison Algorithm&lt;/a&gt;. For instance, the following statements are all considered &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">这是因为 &lt;code&gt;==&lt;/code&gt; 和 &lt;code&gt;!=&lt;/code&gt; 会执行类型强制，它遵循相当晦涩的&amp;ldquo; &lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;抽象相等比较算法&amp;rdquo;&lt;/a&gt;。例如，以下语句均被视为 &lt;code&gt;true&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="01205e0f79602a8ffcecdc5bb5ff7825b476d8a2" translate="yes" xml:space="preserve">
          <source>The replacement for &lt;code&gt;eslint-tester&lt;/code&gt; is called &lt;code&gt;RuleTester&lt;/code&gt;. It's a simplified version of &lt;code&gt;ESLintTester&lt;/code&gt; that's designed to work with any testing framework. This object is exposed by the package.</source>
          <target state="translated">&lt;code&gt;eslint-tester&lt;/code&gt; 的替代品称为 &lt;code&gt;RuleTester&lt;/code&gt; 。它是 &lt;code&gt;ESLintTester&lt;/code&gt; 的简化版本，旨在与任何测试框架一起使用。该对象由包装暴露。</target>
        </trans-unit>
        <trans-unit id="ec0504699dd72d01190815f60c9e51a4931c510f" translate="yes" xml:space="preserve">
          <source>The resulting configuration file will be created in the current directory.</source>
          <target state="translated">由此产生的配置文件将在当前目录下创建。</target>
        </trans-unit>
        <trans-unit id="e5b1d156a93c697ddb2fcff08bf4e5ddbeae4405" translate="yes" xml:space="preserve">
          <source>The return value is always a &lt;code&gt;Promise&lt;/code&gt;.</source>
          <target state="translated">返回值始终是 &lt;code&gt;Promise&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fed8bcfb8b284135209f390faca018017c1afbc2" translate="yes" xml:space="preserve">
          <source>The return value is an object containing the results of the linting operation. Here's an example of a report object:</source>
          <target state="translated">返回值是一个包含绒毛操作结果的对象。下面是一个报告对象的例子。</target>
        </trans-unit>
        <trans-unit id="66df5448c616e295ecb49452adc535d44bedae83" translate="yes" xml:space="preserve">
          <source>The returned value is a &lt;a href=&quot;scope-manager-interface&quot;&gt;&lt;code&gt;Scope&lt;/code&gt; object&lt;/a&gt; defined by the &lt;code&gt;eslint-scope&lt;/code&gt; package. The &lt;code&gt;Variable&lt;/code&gt; objects of global variables have some additional properties.</source>
          <target state="translated">返回的值是 &lt;code&gt;eslint-scope&lt;/code&gt; 包定义的&lt;a href=&quot;scope-manager-interface&quot;&gt; &lt;code&gt;Scope&lt;/code&gt; 对象&lt;/a&gt;。全局变量的 &lt;code&gt;Variable&lt;/code&gt; 对象具有一些其他属性。</target>
        </trans-unit>
        <trans-unit id="5fb2e185527cd54c372b96c8a8cf85ca7037ac9b" translate="yes" xml:space="preserve">
          <source>The rule &lt;code&gt;func-style&lt;/code&gt; has a default configuration of &lt;code&gt;&quot;expression&quot;&lt;/code&gt;, but in ESLint &lt;code&gt;1.x&lt;/code&gt;, &lt;code&gt;eslint:recommended&lt;/code&gt; defaulted it to &lt;code&gt;&quot;declaration&quot;&lt;/code&gt;.</source>
          <target state="translated">规则 &lt;code&gt;func-style&lt;/code&gt; 的默认配置为 &lt;code&gt;&quot;expression&quot;&lt;/code&gt; ，但是在ESLint &lt;code&gt;1.x&lt;/code&gt; 中， &lt;code&gt;eslint:recommended&lt;/code&gt; 将其默认设置为 &lt;code&gt;&quot;declaration&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21a84406c09ff8a1049a29b0ba218718b7bf5a81" translate="yes" xml:space="preserve">
          <source>The rule &lt;code&gt;no-multiple-empty-lines&lt;/code&gt; has no default exceptions, but in ESLint &lt;code&gt;1.x&lt;/code&gt;, a default from &lt;code&gt;eslint:recommended&lt;/code&gt; was applied such that a maximum of two empty lines would be permitted.</source>
          <target state="translated">规则 &lt;code&gt;no-multiple-empty-lines&lt;/code&gt; 没有默认例外，但是在ESLint &lt;code&gt;1.x&lt;/code&gt; 中，应用了 &lt;code&gt;eslint:recommended&lt;/code&gt; 的默认值，以便最多允许两个空行。</target>
        </trans-unit>
        <trans-unit id="7adf5f9d34968505ac2e7499ab22de53834a46bf" translate="yes" xml:space="preserve">
          <source>The rule always ignores directive comments such as &lt;code&gt;/* eslint-disable */&lt;/code&gt;. Additionally, unless the mode is &lt;code&gt;&quot;starred-block&quot;&lt;/code&gt;, the rule ignores JSDoc comments.</source>
          <target state="translated">该规则始终忽略指令注释，例如 &lt;code&gt;/* eslint-disable */&lt;/code&gt; 。另外，除非模式为 &lt;code&gt;&quot;starred-block&quot;&lt;/code&gt; ，否则规则将忽略JSDoc注释。</target>
        </trans-unit>
        <trans-unit id="a5ddf9fff8f7365d084f3f3463580ae57890e091" translate="yes" xml:space="preserve">
          <source>The rule applies to the operators listed in the above table. It does not report the logical assignment operators &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt;, &lt;code&gt;||=&lt;/code&gt;, and &lt;code&gt;??=&lt;/code&gt; because their short-circuiting behavior is different from the other assignment operators.</source>
          <target state="translated">该规则适用于上表中列出的运算符。它不报告逻辑赋值运算符 &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt; ， &lt;code&gt;||=&lt;/code&gt; 和 &lt;code&gt;??=&lt;/code&gt; 因为它们的短路行为与其他赋值运算符不同。</target>
        </trans-unit>
        <trans-unit id="1171a6f455e8b040c25a7ba3151c5477780f5c03" translate="yes" xml:space="preserve">
          <source>The rule can also be configured to discourage the use of parens when they are not required:</source>
          <target state="translated">该规则还可以配置为在不需要时不鼓励使用parens。</target>
        </trans-unit>
        <trans-unit id="f8d163ee49a74afcc2907a73bba3064a962e824c" translate="yes" xml:space="preserve">
          <source>The rule cannot easily verify that the assignment is safe (e.g. if an assigned variable is local and would not be readable from anywhere else while the function is paused).</source>
          <target state="translated">该规则不容易验证赋值是否安全(例如,如果一个赋值的变量是本地的,在函数暂停时不能从其他地方读取)。</target>
        </trans-unit>
        <trans-unit id="4e9a5ee2475613eb335126f52cf5aaa9b33b67b5" translate="yes" xml:space="preserve">
          <source>The rule disallows octal literals.</source>
          <target state="translated">该规则不允许使用八进制文字。</target>
        </trans-unit>
        <trans-unit id="bed31bfa847f3bb2487f9e377612a105ec30b864" translate="yes" xml:space="preserve">
          <source>The rule does not disallow all use of the &lt;code&gt;RegExp&lt;/code&gt; constructor. It should be still used for dynamically generated regular expressions.</source>
          <target state="translated">该规则并不禁止所有使用 &lt;code&gt;RegExp&lt;/code&gt; 构造函数。它仍应用于动态生成的正则表达式。</target>
        </trans-unit>
        <trans-unit id="888d43f5f339c3eab2911b0abe2728f2ab5aeaab" translate="yes" xml:space="preserve">
          <source>The rule has a second object with a single key, &lt;code&gt;enforceForRenamedProperties&lt;/code&gt;, which determines whether the &lt;code&gt;object&lt;/code&gt; destructuring applies to renamed variables.</source>
          <target state="translated">该规则具有第二个对象，该对象具有单个键 &lt;code&gt;enforceForRenamedProperties&lt;/code&gt; ，该 &lt;code&gt;object&lt;/code&gt; 确定对象解构是否适用于重命名的变量。</target>
        </trans-unit>
        <trans-unit id="3437f8bb30162415e42db275afc1baef0285612b" translate="yes" xml:space="preserve">
          <source>The rule name that generates this lint message. If this message is generated by the ESLint core rather than rules, this is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">生成此皮棉消息的规则名称。如果此消息是由ESLint核心而非规则生成的，则为 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ac3e6cce45a94e0899d9d17de8ece5be87643b66" translate="yes" xml:space="preserve">
          <source>The rule naming conventions for ESLint are fairly simple:</source>
          <target state="translated">ESLint的规则命名惯例相当简单。</target>
        </trans-unit>
        <trans-unit id="6a2d5c1c9e0896db23badf6274b8965eaac23cce" translate="yes" xml:space="preserve">
          <source>The rule object itself (see &lt;a href=&quot;working-with-rules&quot;&gt;&quot;working with rules&quot;&lt;/a&gt;)</source>
          <target state="translated">规则对象本身（请参阅&lt;a href=&quot;working-with-rules&quot;&gt;&amp;ldquo;使用规则&amp;rdquo;&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="573e671e86a4cf56bbe5f205a42e8701c29ec3d5" translate="yes" xml:space="preserve">
          <source>The rule offers one object option, &lt;code&gt;allowAllPropertiesOnSameLine&lt;/code&gt; (a deprecated synonym is &lt;code&gt;allowMultiplePropertiesPerLine&lt;/code&gt;). If you set it to &lt;code&gt;true&lt;/code&gt;, object literals such as the first two above, with all property specifications on the same line, will be permitted, but one like</source>
          <target state="translated">该规则提供一个对象选项 &lt;code&gt;allowAllPropertiesOnSameLine&lt;/code&gt; （不赞成使用的同义词是 &lt;code&gt;allowMultiplePropertiesPerLine&lt;/code&gt; ）。如果将其设置为 &lt;code&gt;true&lt;/code&gt; ，则允许使用诸如上面的前两个之类的对象文字，并且所有属性说明都在同一行上，但是类似</target>
        </trans-unit>
        <trans-unit id="eb4b25449f8d19c4a4b92c230c486f587789325f" translate="yes" xml:space="preserve">
          <source>The rule prohibits the colocation on any line of at least 1 character of one property specification with at least 1 character of any other property specification. For example, the rule prohibits</source>
          <target state="translated">该规则禁止在任何线路上将一个属性规范的至少1个字符与任何其他属性规范的至少1个字符并列。例如,该规则禁止</target>
        </trans-unit>
        <trans-unit id="bdcc4c0ed6a72ea505652fd2189129b9ba9488a3" translate="yes" xml:space="preserve">
          <source>The rule should warn against code that tries to compare against -0, since that will not work as intended. That is, code like x === -0 will pass for both +0 and -0. The author probably intended Object.is(x, -0).</source>
          <target state="translated">这条规则应该对试图与-0进行比较的代码发出警告,因为这不会像预期的那样工作,也就是说,像x ===-0这样的代码对+0和-0都会通过。也就是说,像x ===-0这样的代码对+0和-0都会通过。作者可能是想让Object.is(x,-0)。</target>
        </trans-unit>
        <trans-unit id="9b89d3d9863252a32c9946759fd7f3504dc7b79d" translate="yes" xml:space="preserve">
          <source>The rule takes a single option - an array of possible callback names - which may include object methods. The default callback names are &lt;code&gt;callback&lt;/code&gt;, &lt;code&gt;cb&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">该规则采用一个选项-可能的回调名称数组-其中可能包含对象方法。默认的回调名称是 &lt;code&gt;callback&lt;/code&gt; ， &lt;code&gt;cb&lt;/code&gt; 和 &lt;code&gt;next&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e78c1edcadc43d22698299cf6fb661f963ea1c1d" translate="yes" xml:space="preserve">
          <source>The rule takes a single string option: the name of the error parameter. The default is &lt;code&gt;&quot;err&quot;&lt;/code&gt;.</source>
          <target state="translated">该规则采用单个字符串选项：error参数的名称。默认值为 &lt;code&gt;&quot;err&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="73945e310046d0fe600a76487db931bee8eb7989" translate="yes" xml:space="preserve">
          <source>The rule takes an option which specifies when it should be applied. It can be set to one of the following values:</source>
          <target state="translated">该规则有一个选项,指定何时应用。它可以设置为下列数值之一:</target>
        </trans-unit>
        <trans-unit id="c17458aebea2edf7596655f8173de5c166baa09e" translate="yes" xml:space="preserve">
          <source>The rule takes one option, a string, which must contain one of the following values:</source>
          <target state="translated">该规则只有一个选项,即一个字符串,它必须包含以下值之一:</target>
        </trans-unit>
        <trans-unit id="1f25147392b3d78c1603fd60eeee2d70ca798f11" translate="yes" xml:space="preserve">
          <source>The rule takes one option, a string:</source>
          <target state="translated">该规则只需要一个选项,一个字符串。</target>
        </trans-unit>
        <trans-unit id="742233dad80fe18547618108d6a2b86bff76a785" translate="yes" xml:space="preserve">
          <source>The rule takes one option, an object, which has two keys &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; having boolean values &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">该规则采用一个选项，即一个对象，该对象 &lt;code&gt;after&lt;/code&gt; 布尔值 &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt; &lt;code&gt;before&lt;/code&gt; 和之后都有两个键。</target>
        </trans-unit>
        <trans-unit id="827020a96c9caecec65cc7a0552676f015b27688" translate="yes" xml:space="preserve">
          <source>The rule takes one option, an object, which has two keys &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; having boolean values &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;before&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, space is enforced before semicolons and if it's &lt;code&gt;false&lt;/code&gt;, space is disallowed before semicolons. If &lt;code&gt;after&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, space is enforced after semicolons and if it's &lt;code&gt;false&lt;/code&gt;, space is disallowed after semicolons. The &lt;code&gt;after&lt;/code&gt; option will be only applied if a semicolon is not at the end of line.</source>
          <target state="translated">该规则采用一个选项，即一个对象，该对象 &lt;code&gt;after&lt;/code&gt; 布尔值 &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt; &lt;code&gt;before&lt;/code&gt; 和之后都有两个键。如果 &lt;code&gt;before&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则在分号之前强制使用空格，如果为 &lt;code&gt;false&lt;/code&gt; ，则在分号之前禁止使用空格。如果 &lt;code&gt;after&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ，则在分号后强制使用空格，如果为 &lt;code&gt;false&lt;/code&gt; ，则在分号后禁止使用空格。在 &lt;code&gt;after&lt;/code&gt; 选项将如果分号不在行尾仅应用于。</target>
        </trans-unit>
        <trans-unit id="96c7f241e413db9d83cd41a7c8e69e1a5a46c14d" translate="yes" xml:space="preserve">
          <source>The rule takes one or more strings as options: the names of restricted identifiers.</source>
          <target state="translated">该规则将一个或多个字符串作为选项:受限标识符的名称。</target>
        </trans-unit>
        <trans-unit id="4375aa6346f33b27f068e7c881fdcd22248263e0" translate="yes" xml:space="preserve">
          <source>The rule takes one or more strings as options: the names of restricted modules.</source>
          <target state="translated">该规则需要一个或多个字符串作为选项:受限模块的名称。</target>
        </trans-unit>
        <trans-unit id="a9cca4aaa304d533ffa99e0d4d45692dc6af248a" translate="yes" xml:space="preserve">
          <source>The rule takes one or two options. The first is a string, which can be:</source>
          <target state="translated">该规则需要一个或两个选项。第一个是一个字符串,它可以是:</target>
        </trans-unit>
        <trans-unit id="2047f79a374a9de4c018efebf01b37f2c42427b1" translate="yes" xml:space="preserve">
          <source>The rule takes two options.</source>
          <target state="translated">该规则采取两种方案。</target>
        </trans-unit>
        <trans-unit id="47e30af986fb27902392df154c435e433c1df14f" translate="yes" xml:space="preserve">
          <source>The rule takes two options:</source>
          <target state="translated">该规则采取两种方案。</target>
        </trans-unit>
        <trans-unit id="8014e10667a7389e5554d8b3b067d38491926c25" translate="yes" xml:space="preserve">
          <source>The rules for ASI are relatively straightforward: As once described by Isaac Schlueter, a newline character always ends a statement, just like a semicolon, &lt;strong&gt;except&lt;/strong&gt; where one of the following is true:</source>
          <target state="translated">ASI的规则相对简单：正如Isaac Schlueter所述，换行符总是以分号结尾，就像分号一样，&lt;strong&gt;除非&lt;/strong&gt;满足以下条件之一：</target>
        </trans-unit>
        <trans-unit id="031820acd6f073ce407b24b6015d596945b36976" translate="yes" xml:space="preserve">
          <source>The rules in your custom rules directory must follow the same format as bundled rules to work properly. You can also specify multiple locations for custom rules by including multiple &lt;code&gt;--rulesdir&lt;/code&gt; options:</source>
          <target state="translated">自定义规则目录中的规则必须遵循与捆绑规则相同的格式，才能正常工作。您还可以通过包含多个 &lt;code&gt;--rulesdir&lt;/code&gt; 选项为自定义规则指定多个位置：</target>
        </trans-unit>
        <trans-unit id="4f407752be68d13cfd5b93589acf43759c14d2f6" translate="yes" xml:space="preserve">
          <source>The same rule does apply to scoped packages:</source>
          <target state="translated">同样的规则确实适用于范围内的包。</target>
        </trans-unit>
        <trans-unit id="bfddd41eadd81befb51598e392aaccc185efc70f" translate="yes" xml:space="preserve">
          <source>The second argument is an object with one key, &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt;. The value is an array of string patterns which are considered exceptions to the rule. It is important to note that the exceptions are ignored if the first argument is &lt;code&gt;&quot;never&quot;&lt;/code&gt;. Exceptions cannot be mixed.</source>
          <target state="translated">第二个参数是带有一个键 &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; 的对象。该值是一个字符串模式数组，被认为是该规则的例外。重要的是要注意，如果第一个参数为 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 则忽略异常。例外不能混在一起。</target>
        </trans-unit>
        <trans-unit id="2e888e2ddf0328509e3f74a9a7c6bebd8faf02e4" translate="yes" xml:space="preserve">
          <source>The second is to save the file wherever you would like and pass its location to the CLI using the &lt;code&gt;-c&lt;/code&gt; option, such as:</source>
          <target state="translated">第二种是将文件保存在任何位置，然后使用 &lt;code&gt;-c&lt;/code&gt; 选项将其位置传递给CLI ，例如：</target>
        </trans-unit>
        <trans-unit id="414ed43decb6eceb64655ac8086b20e4b3916b91" translate="yes" xml:space="preserve">
          <source>The second one is an object for more fine-grained configuration when the first option is &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt;. Currently, the only available option is &lt;code&gt;requireReturnForObjectLiteral&lt;/code&gt;, a boolean property. It's &lt;code&gt;false&lt;/code&gt; by default. If set to &lt;code&gt;true&lt;/code&gt;, it requires braces and an explicit return for object literals.</source>
          <target state="translated">当第一个选项是 &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; 时，第二个对象是用于更细粒度配置的对象。当前，唯一可用的选项是 &lt;code&gt;requireReturnForObjectLiteral&lt;/code&gt; ，这是一个布尔型属性。这是 &lt;code&gt;false&lt;/code&gt; 默认。如果设置为 &lt;code&gt;true&lt;/code&gt; ，则需要大括号和对象文字的显式返回。</target>
        </trans-unit>
        <trans-unit id="6fa0c837ba16265ad24b0a06aa85ae08d877f9ec" translate="yes" xml:space="preserve">
          <source>The second parameter &lt;code&gt;options&lt;/code&gt; is omittable.</source>
          <target state="translated">第二个参数 &lt;code&gt;options&lt;/code&gt; 是可省略的。</target>
        </trans-unit>
        <trans-unit id="13894c1b5ba8814ae6cea3f9f081dfbf8a0d8858" translate="yes" xml:space="preserve">
          <source>The selector &quot;&lt;code&gt;Identifier&lt;/code&gt;&quot; will match all &lt;code&gt;Identifier&lt;/code&gt; nodes in the program. In this case, the selector will match the nodes for &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;, and &lt;code&gt;baz&lt;/code&gt;.</source>
          <target state="translated">选择器&amp;ldquo; &lt;code&gt;Identifier&lt;/code&gt; &amp;rdquo;将匹配程序中的所有 &lt;code&gt;Identifier&lt;/code&gt; 节点。在这种情况下，选择器将匹配 &lt;code&gt;foo&lt;/code&gt; ， &lt;code&gt;bar&lt;/code&gt; 和 &lt;code&gt;baz&lt;/code&gt; 的节点。</target>
        </trans-unit>
        <trans-unit id="d627846098bcddfc8705e956620c4e04bad2e321" translate="yes" xml:space="preserve">
          <source>The severity of this message. &lt;code&gt;1&lt;/code&gt; means warning and &lt;code&gt;2&lt;/code&gt; means error.</source>
          <target state="translated">此消息的严重性。 &lt;code&gt;1&lt;/code&gt; 表示警告， &lt;code&gt;2&lt;/code&gt; 表示错误。</target>
        </trans-unit>
        <trans-unit id="8edd9e143d8665e59cc0b39cb5fd1623512f2c40" translate="yes" xml:space="preserve">
          <source>The shortened object literal syntax for generators is not affected by this rule.</source>
          <target state="translated">生成器的缩短对象文字语法不受此规则影响。</target>
        </trans-unit>
        <trans-unit id="05a4cde718543d121082d5debd9a3bdb1d814202" translate="yes" xml:space="preserve">
          <source>The simplest example is to use just &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt;:</source>
          <target state="translated">最简单的示例是仅使用 &lt;code&gt;node&lt;/code&gt; 和 &lt;code&gt;message&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="58e6895bfed7fd7cc1d658c75e9fdd7ba3d0ec89" translate="yes" xml:space="preserve">
          <source>The simplest selector is just a node type. A node type selector will match all nodes with the given type. For example, consider the following program:</source>
          <target state="translated">最简单的选择器就是一个节点类型。节点类型选择器将匹配所有给定类型的节点。例如,考虑以下程序。</target>
        </trans-unit>
        <trans-unit id="62b57f47427459031359008bfc01d02938d4e4ea" translate="yes" xml:space="preserve">
          <source>The single-declaration school of thought is based in pre-ECMAScript 6 behaviors, where there was no such thing as block scope, only function scope. Since all &lt;code&gt;var&lt;/code&gt; statements are hoisted to the top of the function anyway, some believe that declaring all variables in a single declaration at the top of the function removes confusion around scoping rules.</source>
          <target state="translated">单声明的思想流派基于ECMAScript 6之前的行为，其中没有诸如块范围之类的东西，只有函数范围之类的东西。由于无论如何所有的 &lt;code&gt;var&lt;/code&gt; 语句都被提升到函数的顶部，因此有人认为在函数顶部的单个声明中声明所有变量可以消除范围界定规则的混乱。</target>
        </trans-unit>
        <trans-unit id="3f23c0f8e2212324dafb94566a41cfac12779d1c" translate="yes" xml:space="preserve">
          <source>The source code text to check.</source>
          <target state="translated">要检查的源代码文本。</target>
        </trans-unit>
        <trans-unit id="98081cf0b97551ce142d7f451c1b647ed7d9f73b" translate="yes" xml:space="preserve">
          <source>The source file for a rule exports an object with the following properties.</source>
          <target state="translated">规则的源文件会导出一个具有以下属性的对象。</target>
        </trans-unit>
        <trans-unit id="13c2d1557a31408916c7784e491c197a095f73af" translate="yes" xml:space="preserve">
          <source>The spacing after the semicolon if it is the first token in the line.</source>
          <target state="translated">如果分号是该行的第一个标记,则分号后的间距。</target>
        </trans-unit>
        <trans-unit id="cb8aafac65e7fc97800fb3d3dac293cf6812e694" translate="yes" xml:space="preserve">
          <source>The spacing around the semicolon in a for loop with an empty condition (&lt;code&gt;for(;;)&lt;/code&gt;).</source>
          <target state="translated">在条件 &lt;code&gt;for(;;)&lt;/code&gt; 空（for（;;））的for循环中，分号周围的间距。</target>
        </trans-unit>
        <trans-unit id="e3e73e8052d68647147779e7d358e891ec3d4c7d" translate="yes" xml:space="preserve">
          <source>The spacing before the semicolon if it is after an opening parenthesis (&lt;code&gt;(&lt;/code&gt; or &lt;code&gt;{&lt;/code&gt;), or the spacing after the semicolon if it is before a closing parenthesis (&lt;code&gt;)&lt;/code&gt; or &lt;code&gt;}&lt;/code&gt;). That spacing is checked by &lt;code&gt;space-in-parens&lt;/code&gt; or &lt;code&gt;block-spacing&lt;/code&gt;.</source>
          <target state="translated">如果分号前的空格在圆括号（ &lt;code&gt;(&lt;/code&gt; 或 &lt;code&gt;{&lt;/code&gt; ）后面），或者分号后的空格在圆括号（ &lt;code&gt;)&lt;/code&gt; 或 &lt;code&gt;}&lt;/code&gt; 之前）。该间距通过有效 &lt;code&gt;space-in-parens&lt;/code&gt; 或 &lt;code&gt;block-spacing&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="115bcb8edde69d7ab538f77d4ffd79b7c96251f6" translate="yes" xml:space="preserve">
          <source>The special value &lt;code&gt;null&lt;/code&gt; should be used only in the following situations:</source>
          <target state="translated">特殊值 &lt;code&gt;null&lt;/code&gt; 仅应在以下情况下使用：</target>
        </trans-unit>
        <trans-unit id="55d71491bd24bf8e9266ef7d9b3ed94580c8ef81" translate="yes" xml:space="preserve">
          <source>The standard style, in which commas are placed at the end of the current line</source>
          <target state="translated">标准样式,逗号放在当前行的末尾。</target>
        </trans-unit>
        <trans-unit id="66b17246512ea6227166b244bbc0ac43dcd2b7c9" translate="yes" xml:space="preserve">
          <source>The statement beginning keyword, such as &lt;code&gt;if&lt;/code&gt;, should be followed by one space and the opening brace should be preceded by a space.</source>
          <target state="translated">语句的开始关键字（例如 &lt;code&gt;if&lt;/code&gt; ）后应该有一个空格，而大括号前应有一个空格。</target>
        </trans-unit>
        <trans-unit id="940d15ed0a28b1df513a69296639eec227beace3" translate="yes" xml:space="preserve">
          <source>The statement has an unclosed paren, array literal, or object literal or ends in some other way that is not a valid way to end a statement. (For instance, ending with &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;,&lt;/code&gt;.)</source>
          <target state="translated">该语句具有未封闭的括号，数组文字或对象文字，或者以某种不是结束语句的有效方式的其他方式结束。（例如，结尾 &lt;code&gt;.&lt;/code&gt; 或者 &lt;code&gt;,&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="ad8b8f54b2a420ddeed65e63d39098cd71d92cbc" translate="yes" xml:space="preserve">
          <source>The static analysis of this rule does not detect that the program calls the callback from within a nested function or an immediately-invoked function expression (IIFE).</source>
          <target state="translated">该规则的静态分析不会检测到程序从嵌套函数或立即调用函数表达式(IIFE)内调用回调。</target>
        </trans-unit>
        <trans-unit id="f3fcd362b8cea026256d5c99fc33540bb48255c4" translate="yes" xml:space="preserve">
          <source>The static analysis of this rule does not detect that the program calls the callback if it is an argument of a function (for example, &lt;code&gt;setTimeout&lt;/code&gt;).</source>
          <target state="translated">如果该规则是函数的参数（例如 &lt;code&gt;setTimeout&lt;/code&gt; ），则对该规则的静态分析不会检测到程序是否调用了回调。</target>
        </trans-unit>
        <trans-unit id="b0d50eb0c6a5a75a5254c188fa79ce03846654c4" translate="yes" xml:space="preserve">
          <source>The static analysis of this rule does not detect that the program calls the callback only one time in each branch of an &lt;code&gt;if&lt;/code&gt; statement.</source>
          <target state="translated">此规则的静态分析不会检测到程序在 &lt;code&gt;if&lt;/code&gt; 语句的每个分支中仅调用一次回调。</target>
        </trans-unit>
        <trans-unit id="2f6cfcf93f0774ec1b281ebd4cefac2327a634e4" translate="yes" xml:space="preserve">
          <source>The string and object formats can be freely mixed in the configuration as needed.</source>
          <target state="translated">字符串和对象格式可以根据需要在配置中自由混合。</target>
        </trans-unit>
        <trans-unit id="dd57f78073587288601a6f8bd191a69e0806d4ed" translate="yes" xml:space="preserve">
          <source>The string option does not check async arrow function expressions for backward compatibility.</source>
          <target state="translated">字符串选项不检查异步箭头函数表达式的向后兼容性。</target>
        </trans-unit>
        <trans-unit id="311d87885350cd8d74996d157aa1c8fa01351e72" translate="yes" xml:space="preserve">
          <source>The syntax for AST selectors is similar to the syntax for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot;&gt;CSS selectors&lt;/a&gt;. If you've used CSS selectors before, the syntax for AST selectors should be easy to understand.</source>
          <target state="translated">AST选择器的语法类似于&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot;&gt;CSS选择器&lt;/a&gt;的语法。如果您以前使用过CSS选择器，则AST选择器的语法应该易于理解。</target>
        </trans-unit>
        <trans-unit id="224d6b2ad3ce554f3d0f9f8c4d66cbd9efd8197b" translate="yes" xml:space="preserve">
          <source>The syntax to specify restricted imports looks like this:</source>
          <target state="translated">指定受限进口的语法是这样的。</target>
        </trans-unit>
        <trans-unit id="b7efceeec030359c477714b00506090fb8984485" translate="yes" xml:space="preserve">
          <source>The ternary operator is used to conditionally assign a value to a variable. Some believe that the use of ternary operators leads to unclear code.</source>
          <target state="translated">三元运算符用于有条件地给一个变量赋值。有人认为使用三元运算符会导致代码不清晰。</target>
        </trans-unit>
        <trans-unit id="d10f8a42895796da61c03baea8c9b4879c335514" translate="yes" xml:space="preserve">
          <source>The ternary operator should be used only for assigning values conditionally and never as a shortcut for an &lt;code&gt;if&lt;/code&gt; statement.</source>
          <target state="translated">三元运算符应仅用于有条件地分配值，而不能用作 &lt;code&gt;if&lt;/code&gt; 语句的快捷方式。</target>
        </trans-unit>
        <trans-unit id="f096cdc8dc30e248084bfa4304f67adc152c3c50" translate="yes" xml:space="preserve">
          <source>The testing takes a few minutes to complete. If any tests fail, that likely means one or more parts of the environment setup didn't complete correctly. The upstream tests always pass.</source>
          <target state="translated">测试需要几分钟的时间才能完成。如果任何测试失败,很可能意味着环境设置的一个或多个部分没有正确完成。上游测试总是能通过。</target>
        </trans-unit>
        <trans-unit id="aa432e2f60af21e69cfa908f06604c8b4d0ae385" translate="yes" xml:space="preserve">
          <source>The text to add.</source>
          <target state="translated">要补充的文字。</target>
        </trans-unit>
        <trans-unit id="7bbb1f82d6c0a19e1279187e629a297da44271f1" translate="yes" xml:space="preserve">
          <source>The thing that makes ESLint different from other linters is the ability to define custom rules at runtime. This is perfect for rules that are specific to your project or company and wouldn't make sense for ESLint to ship with. With runtime rules, you don't have to wait for the next version of ESLint or be disappointed that your rule isn't general enough to apply to the larger JavaScript community, just write your rules and include them at runtime.</source>
          <target state="translated">ESLint与其他linters的不同之处在于它能够在运行时定义自定义规则。这对于那些特定于您的项目或公司的规则来说是完美的,而且ESLint也没有任何意义。有了运行时规则,您不必等待ESLint的下一个版本,也不必因为您的规则不够通用而对更大的JavaScript社区感到失望,只需写下您的规则并在运行时包含它们。</target>
        </trans-unit>
        <trans-unit id="aeba12234ad663f0a0ec6980e71a7b41b7d994ef" translate="yes" xml:space="preserve">
          <source>The thinking is that it's better to always explicitly state what the default behavior should be so that it's clear whether or not the developer forgot to include the default behavior by mistake.</source>
          <target state="translated">我们的想法是,最好总是明确地说明默认行为应该是什么,这样就可以清楚地知道开发者是否因为错误而忘记加入默认行为。</target>
        </trans-unit>
        <trans-unit id="da7d071d3f4e1e51df3ea8518936e97a10e59509" translate="yes" xml:space="preserve">
          <source>The three error levels allow you fine-grained control over how ESLint applies rules (for more configuration options and details, see the &lt;a href=&quot;user-guide/configuring&quot;&gt;configuration docs&lt;/a&gt;).</source>
          <target state="translated">这三个错误级别使您可以细粒度控制ESLint如何应用规则（有关更多配置选项和详细信息，请参阅&lt;a href=&quot;user-guide/configuring&quot;&gt;配置文档&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="df9af8c915bee6673ff22d532ac03047c8960a90" translate="yes" xml:space="preserve">
          <source>The top-level report object also has &lt;code&gt;errorCount&lt;/code&gt; and &lt;code&gt;warningCount&lt;/code&gt; which give the exact number of errors and warnings respectively on all the files. Additionally, &lt;code&gt;usedDeprecatedRules&lt;/code&gt; signals any deprecated rules used and their replacement (if available). Specifically, it is an array of objects with properties like so:</source>
          <target state="translated">顶级报告对象还具有 &lt;code&gt;errorCount&lt;/code&gt; 和 &lt;code&gt;warningCount&lt;/code&gt; ，它们分别提供所有文件上的错误和警告的确切数量。此外， &lt;code&gt;usedDeprecatedRules&lt;/code&gt; 会发出信号通知已使用的任何不赞成使用的规则及其替换（如果有）。具体来说，它是具有以下属性的对象数组：</target>
        </trans-unit>
        <trans-unit id="41d769ab16b1f7f3308de0b859c5b9860b2b26e5" translate="yes" xml:space="preserve">
          <source>The top-level report object also has &lt;code&gt;errorCount&lt;/code&gt; and &lt;code&gt;warningCount&lt;/code&gt; which give the exact number of errors and warnings respectively on all the files. Additionally, &lt;code&gt;usedDeprecatedRules&lt;/code&gt; signals any deprecated rules used and their replacement (if available). Specifically, it is array of objects with properties like so:</source>
          <target state="translated">顶级报告对象还具有 &lt;code&gt;errorCount&lt;/code&gt; 和 &lt;code&gt;warningCount&lt;/code&gt; ，它们分别提供所有文件上的错误和警告的确切数量。此外， &lt;code&gt;usedDeprecatedRules&lt;/code&gt; 会发出信号通知已使用的任何不赞成使用的规则及其替换（如果有）。具体来说，它是具有以下属性的对象数组：</target>
        </trans-unit>
        <trans-unit id="df600fd43354fe093f2997a1e86f286e369b6a13" translate="yes" xml:space="preserve">
          <source>The top-level report object has a &lt;code&gt;results&lt;/code&gt; array containing all linting results for files that had warnings or errors (any files that did not produce a warning or error are omitted). Each file result includes:</source>
          <target state="translated">顶级报告对象具有一个 &lt;code&gt;results&lt;/code&gt; 数组，其中包含具有警告或错误的文件的所有掉毛结果（所有未产生警告或错误的文件都将被省略）。每个文件的结果包括：</target>
        </trans-unit>
        <trans-unit id="594a7b21bd7855de18adf0c69dd40a240b1def08" translate="yes" xml:space="preserve">
          <source>The two properties, &lt;code&gt;VariableDeclarator&lt;/code&gt; and &lt;code&gt;AssignmentExpression&lt;/code&gt;, which can be used to turn on or off the destructuring requirement for &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;. By default, all values are true.</source>
          <target state="translated">两个属性 &lt;code&gt;VariableDeclarator&lt;/code&gt; 和 &lt;code&gt;AssignmentExpression&lt;/code&gt; 可用于打开或关闭 &lt;code&gt;array&lt;/code&gt; 和 &lt;code&gt;object&lt;/code&gt; 的解构要求。默认情况下，所有值均为true。</target>
        </trans-unit>
        <trans-unit id="e8bf7a9dd0b016497dca472797a392ec1424c8b6" translate="yes" xml:space="preserve">
          <source>The two properties, &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;, can be used to turn on or off the destructuring requirement for each of those types independently. By default, both are true.</source>
          <target state="translated">可以使用 &lt;code&gt;array&lt;/code&gt; 和 &lt;code&gt;object&lt;/code&gt; 这两个属性来分别打开或关闭这些类型中每个类型的解构要求。默认情况下，两者均为真。</target>
        </trans-unit>
        <trans-unit id="d35a58b0a18350e1534de85ad73ac8b06f837e84" translate="yes" xml:space="preserve">
          <source>The two properties, &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;, which can be used to turn on or off the destructuring requirement for each of those types independently. By default, both are true.</source>
          <target state="translated">可以使用两个属性 &lt;code&gt;array&lt;/code&gt; 和 &lt;code&gt;object&lt;/code&gt; 来分别打开或关闭这些类型的销毁需求。默认情况下，两者均为真。</target>
        </trans-unit>
        <trans-unit id="4f16a3bf5e4813936b00b45e231c747c7726a1d4" translate="yes" xml:space="preserve">
          <source>The updates of imported bindings by ES Modules cause runtime errors.</source>
          <target state="translated">ES模块对导入的绑定的更新会导致运行时错误。</target>
        </trans-unit>
        <trans-unit id="5514e8b27889c92b548abd8ebff5998bdf418288" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;arguments.caller&lt;/code&gt; and &lt;code&gt;arguments.callee&lt;/code&gt; make several code optimizations impossible. They have been deprecated in future versions of JavaScript and their use is forbidden in ECMAScript 5 while in strict mode.</source>
          <target state="translated">使用 &lt;code&gt;arguments.caller&lt;/code&gt; 和 &lt;code&gt;arguments.callee&lt;/code&gt; 使得无法进行几种代码优化。在将来的JavaScript版本中已不推荐使用它们，并且在严格模式下ECMAScript 5中禁止使用它们。</target>
        </trans-unit>
        <trans-unit id="2924f354dcd960a1ab58164e2009cd5c61e0aa99" translate="yes" xml:space="preserve">
          <source>The use of bitwise operators in JavaScript is very rare and often &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;|&lt;/code&gt; is simply a mistyped &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt;, which will lead to unexpected behavior.</source>
          <target state="translated">使用在JavaScript位运算符是非常罕见的，往往 &lt;code&gt;&amp;amp;&lt;/code&gt; 或 &lt;code&gt;|&lt;/code&gt; 只是一个错误的 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 或 &lt;code&gt;||&lt;/code&gt; ，这将导致意外行为。</target>
        </trans-unit>
        <trans-unit id="e8c966ed7def78def5c80c88dca826c0a9cd55fd" translate="yes" xml:space="preserve">
          <source>The version of ESLint you are using.</source>
          <target state="translated">您正在使用的ESLint版本。</target>
        </trans-unit>
        <trans-unit id="1f352eb6a0dacd48f9b129fd6892459730a9afd3" translate="yes" xml:space="preserve">
          <source>The version string of ESLint. E.g. &lt;code&gt;&quot;7.0.0&quot;&lt;/code&gt;.</source>
          <target state="translated">ESLint的版本字符串。例如 &lt;code&gt;&quot;7.0.0&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eac9f3d4f7ff9fa27be37b9559de95a3dfd24dc8" translate="yes" xml:space="preserve">
          <source>Then any code used within the same scope would not get the global &lt;code&gt;undefined&lt;/code&gt;, but rather the local version with a very different meaning.</source>
          <target state="translated">这样，在同一范围内使用的任何代码都不会得到全局 &lt;code&gt;undefined&lt;/code&gt; ，而是具有不同含义的本地版本。</target>
        </trans-unit>
        <trans-unit id="91dec8db4a7ce736df71ea88ef47e6b7cca8d86f" translate="yes" xml:space="preserve">
          <source>Then the &lt;code&gt;array&lt;/code&gt; part of this rule is not recommended, as destructuring does not match this use case very well.</source>
          <target state="translated">然后不建议使用此规则的 &lt;code&gt;array&lt;/code&gt; 部分，因为解构与该用例非常不匹配。</target>
        </trans-unit>
        <trans-unit id="1e7df54ba4b2f3d2b8de3ddfb22cf55076b84b07" translate="yes" xml:space="preserve">
          <source>Then you can change to:</source>
          <target state="translated">那么你可以改成。</target>
        </trans-unit>
        <trans-unit id="6ece258a004458918b4a9b465e59a062ce1c5448" translate="yes" xml:space="preserve">
          <source>Then you should enable ES6 using &lt;code&gt;ecmaVersion&lt;/code&gt;:</source>
          <target state="translated">然后，您应该使用 &lt;code&gt;ecmaVersion&lt;/code&gt; 启用ES6 ：</target>
        </trans-unit>
        <trans-unit id="99179c89c62e68c70478cf6465b8ea928c3d5143" translate="yes" xml:space="preserve">
          <source>Then you should move &lt;code&gt;ecmaFeatures&lt;/code&gt; under &lt;code&gt;parserOptions&lt;/code&gt;:</source>
          <target state="translated">然后你要移走 &lt;code&gt;ecmaFeatures&lt;/code&gt; 下 &lt;code&gt;parserOptions&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3039d0ca1aa2f7e206fbb9a1bd4f394c4c999ec2" translate="yes" xml:space="preserve">
          <source>Then, assuming you're using the package name &lt;code&gt;eslint-config-myconfig&lt;/code&gt;, you can access the additional config via:</source>
          <target state="translated">然后，假设您使用的软件包名称为 &lt;code&gt;eslint-config-myconfig&lt;/code&gt; ，则可以通过以下方式访问其他配置：</target>
        </trans-unit>
        <trans-unit id="f25801971afeae4363e40fabd963bdc80f985e55" translate="yes" xml:space="preserve">
          <source>Then, in your project that wants to use your shareable config, type:</source>
          <target state="translated">然后,在你想使用你的可共享配置的项目中,输入。</target>
        </trans-unit>
        <trans-unit id="353db37a3c8a86c69c78b807d1c427cfb81575aa" translate="yes" xml:space="preserve">
          <source>Then, you can install the ESLint Yeoman generator:</source>
          <target state="translated">然后,你可以安装ESLint Yeoman生成器。</target>
        </trans-unit>
        <trans-unit id="32c357211ab9b4b485ca19fa3a0a2b2bd4c1fa46" translate="yes" xml:space="preserve">
          <source>There are a few reasons you might want to turn this rule off:</source>
          <target state="translated">有几个原因你可能想关闭这个规则。</target>
        </trans-unit>
        <trans-unit id="7429e55770a7db6e1f799e481661c23075ea68a0" translate="yes" xml:space="preserve">
          <source>There are a lot of command line flags for ESLint and this section explains what they do.</source>
          <target state="translated">ESLint有很多命令行标志,本节将解释它们的作用。</target>
        </trans-unit>
        <trans-unit id="80da262ce40592a7a4ec9cf4f30bca5562293bb5" translate="yes" xml:space="preserve">
          <source>There are a lot of unit tests included with ESLint to make sure that we're keeping on top of code quality. This section explains how to run the unit tests.</source>
          <target state="translated">ESLint中包含了很多单元测试,以确保我们的代码质量。本节将介绍如何运行单元测试。</target>
        </trans-unit>
        <trans-unit id="cdec16b05bc1e8b3e8a535ea7297a5e3f4035c95" translate="yes" xml:space="preserve">
          <source>There are also cases where the usage of &lt;code&gt;=&amp;gt;&lt;/code&gt; can be ambiguous and should be rewritten to more clearly show the author's intent:</source>
          <target state="translated">在某些情况下， &lt;code&gt;=&amp;gt;&lt;/code&gt; 的用法可能含糊不清，应重写以更清楚地表明作者的意图：</target>
        </trans-unit>
        <trans-unit id="7ecd3fd5720fb4421416968b3c583504ac473a76" translate="yes" xml:space="preserve">
          <source>There are also some exceptions to these rules:</source>
          <target state="translated">这些规则也有一些例外。</target>
        </trans-unit>
        <trans-unit id="320a38d150f5e795565c18aa62c12c2350485cbd" translate="yes" xml:space="preserve">
          <source>There are also some properties you can access:</source>
          <target state="translated">还有一些属性你可以进入。</target>
        </trans-unit>
        <trans-unit id="6665f51b7045a2fee788e7afb911686880b53609" translate="yes" xml:space="preserve">
          <source>There are cases where it may be safe for your application to ignore errors, however only ignore errors if you are confident that some other form of monitoring will help you catch the problem.</source>
          <target state="translated">在某些情况下,忽略错误对你的应用程序来说可能是安全的,但是只有当你确信其他形式的监控会帮助你发现问题时才会忽略错误。</target>
        </trans-unit>
        <trans-unit id="77159dc5778802775842bc1ad78d4c7a0b0534fa" translate="yes" xml:space="preserve">
          <source>There are five events related to code paths, and you can define event handlers in rules.</source>
          <target state="translated">有五个事件与代码路径有关,你可以在规则中定义事件处理程序。</target>
        </trans-unit>
        <trans-unit id="e2c161633c01783c2c492dc2f82954fa87f98f0e" translate="yes" xml:space="preserve">
          <source>There are four different styles and the default member syntax sort order is:</source>
          <target state="translated">有四种不同的风格,默认的成员语法排序顺序是。</target>
        </trans-unit>
        <trans-unit id="73182a6c9f6d8f8a463d75ad9c8c1f7a1954215f" translate="yes" xml:space="preserve">
          <source>There are many commonly used aliases for &lt;code&gt;this&lt;/code&gt; such as &lt;code&gt;that&lt;/code&gt;, &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;me&lt;/code&gt;. It is desirable to ensure that whichever alias the team agrees upon is used consistently throughout the application.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; ，有很多常用的别名，例如 &lt;code&gt;that&lt;/code&gt; ， &lt;code&gt;self&lt;/code&gt; 或 &lt;code&gt;me&lt;/code&gt; 。希望确保在整个应用程序中一致使用团队同意的任何别名。</target>
        </trans-unit>
        <trans-unit id="778d71a993fc4934f67d793df316de2759b96d65" translate="yes" xml:space="preserve">
          <source>There are rest parameters in ES2015. We can use that feature for variadic functions instead of the &lt;code&gt;arguments&lt;/code&gt; variable.</source>
          <target state="translated">ES2015中有其余参数。我们可以将该功能用于可变函数而不是 &lt;code&gt;arguments&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="117709bbbf6fc954ac87eb9e1642b49467ac9606" translate="yes" xml:space="preserve">
          <source>There are several common guidelines which require specific indentation of nested blocks and statements, like:</source>
          <target state="translated">有几个常见的准则要求嵌套块和语句有特定的缩进,比如。</target>
        </trans-unit>
        <trans-unit id="09bf0b1004131d5cbb653018ebf059cb68d11044" translate="yes" xml:space="preserve">
          <source>There are several pieces of information that can be configured:</source>
          <target state="translated">有几个信息可以配置。</target>
        </trans-unit>
        <trans-unit id="1c953a0cd08a66ee80bdb67484900a4f8c19fb94" translate="yes" xml:space="preserve">
          <source>There are shareable configs available for most JSCS presets. The equivalent shareable configs for each JSCS preset are listed in the following table:</source>
          <target state="translated">大多数JSCS预置都有可共享的配置。下表列出了每个JSCS预置的等效可共享配置。</target>
        </trans-unit>
        <trans-unit id="7939cad36b767508efc1de1d7ff66357f07843a6" translate="yes" xml:space="preserve">
          <source>There are some cases where you might want to call a callback function more than once. In those cases this rule may lead to incorrect behavior. In those cases you may want to reserve a special name for those callbacks and not include that in the list of callbacks that trigger warnings.</source>
          <target state="translated">在某些情况下,你可能想调用一个回调函数一次以上。在这些情况下,这个规则可能会导致不正确的行为。在这些情况下,你可能想为这些回调保留一个特殊的名称,而不是将其包含在会触发警告的回调列表中。</target>
        </trans-unit>
        <trans-unit id="8dbaf6481b7dab508d130fe84b6a20188b6da785" translate="yes" xml:space="preserve">
          <source>There are three primitive types in JavaScript that have wrapper objects: string, number, and boolean. These are represented by the constructors &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, and &lt;code&gt;Boolean&lt;/code&gt;, respectively. The primitive wrapper types are used whenever one of these primitive values is read, providing them with object-like capabilities such as methods. Behind the scenes, an object of the associated wrapper type is created and then destroyed, which is why you can call methods on primitive values, such as:</source>
          <target state="translated">JavaScript中有三种具有包装对象的原始类型：字符串，数字和布尔值。这些分别由构造函数 &lt;code&gt;String&lt;/code&gt; ， &lt;code&gt;Number&lt;/code&gt; 和 &lt;code&gt;Boolean&lt;/code&gt; 表示。每当读取这些原始值之一时，就会使用原始包装器类型，从而为它们提供类似对象的功能，例如方法。在幕后，创建了一个关联包装类型的对象，然后将其销毁，这就是为什么您可以对原始值调用方法的原因，例如：</target>
        </trans-unit>
        <trans-unit id="09b78e56913ec7f5884521cf5e33b733c08a8425" translate="yes" xml:space="preserve">
          <source>There are two formats for a rule's exported &lt;code&gt;schema&lt;/code&gt;. The first is a full JSON Schema object describing all possible options the rule accepts, including the rule's error level as the first argument and any optional arguments thereafter.</source>
          <target state="translated">规则的导出 &lt;code&gt;schema&lt;/code&gt; 有两种格式。第一个是完整的JSON模式对象，描述了该规则接受的所有可能选项，包括规则的错误级别作为第一个参数，其后包括任何可选参数。</target>
        </trans-unit>
        <trans-unit id="6e4161ef27c6d8d2328512ff0c53aa33ebb66d6d" translate="yes" xml:space="preserve">
          <source>There are two options for this rule:</source>
          <target state="translated">这条规则有两种选择。</target>
        </trans-unit>
        <trans-unit id="c5b03151c21194f8185c6c4c16037975222ef285" translate="yes" xml:space="preserve">
          <source>There are two schools of thought in this regard:</source>
          <target state="translated">在这方面有两派观点。</target>
        </trans-unit>
        <trans-unit id="187de8e977c674d5524ac7c3cf7fd7ff80275095" translate="yes" xml:space="preserve">
          <source>There are two ways of defining functions in JavaScript: &lt;code&gt;function&lt;/code&gt; declarations and &lt;code&gt;function&lt;/code&gt; expressions. Declarations contain the &lt;code&gt;function&lt;/code&gt; keyword first, followed by a name and then its arguments and the function body, for example:</source>
          <target state="translated">在JavaScript中定义函数的方式有两种： &lt;code&gt;function&lt;/code&gt; 声明和 &lt;code&gt;function&lt;/code&gt; 表达式。声明首先包含 &lt;code&gt;function&lt;/code&gt; 关键字，然后是名称，然后是其参数和函数体，例如：</target>
        </trans-unit>
        <trans-unit id="1e031938fbb5ab85e074efc0c3921234cc1f1c89" translate="yes" xml:space="preserve">
          <source>There are two ways to create a regular expression:</source>
          <target state="translated">有两种方法可以创建正则表达式。</target>
        </trans-unit>
        <trans-unit id="d52e9915f94a31af6aaead1be831dbb80f676371" translate="yes" xml:space="preserve">
          <source>There are two ways to use configuration files.</source>
          <target state="translated">使用配置文件有两种方式。</target>
        </trans-unit>
        <trans-unit id="d1a8bd447439a90516a50974c91e0f6c8ad77c25" translate="yes" xml:space="preserve">
          <source>There are valid reasons to use assignment operators in conditional statements. However, it can be difficult to tell whether a specific assignment was intentional.</source>
          <target state="translated">在条件语句中使用赋值运算符有合理的理由。但是,很难判断一个特定的赋值是否是故意的。</target>
        </trans-unit>
        <trans-unit id="4715777b3c61a89e3562896681adc37a424d282e" translate="yes" xml:space="preserve">
          <source>There are, however, some occasions when you must use quotes:</source>
          <target state="translated">然而,在某些场合,你必须使用引号。</target>
        </trans-unit>
        <trans-unit id="eb6f41837f8cfadd5c03780bba3f02ff7b3c971d" translate="yes" xml:space="preserve">
          <source>There are, however, some who prefer to only use braces when there is more than one statement to be executed.</source>
          <target state="translated">然而,也有一些人喜欢只在有多个语句要执行时使用大括号。</target>
        </trans-unit>
        <trans-unit id="342cd48e476dc7314107f25dac7c78229501f3ce" translate="yes" xml:space="preserve">
          <source>There is actually a long history of using dangling underscores to indicate &quot;private&quot; members of objects in JavaScript (though JavaScript doesn't have truly private members, this convention served as a warning). This began with SpiderMonkey adding nonstandard methods such as &lt;code&gt;__defineGetter__()&lt;/code&gt;. The intent with the underscores was to make it obvious that this method was special in some way. Since that time, using a single underscore prefix has become popular as a way to indicate &quot;private&quot; members of objects.</source>
          <target state="translated">实际上，使用悬挂的下划线指示JavaScript中对象的&amp;ldquo;私有&amp;rdquo;成员已有很长的历史（尽管JavaScript没有真正的私有成员，该约定作为警告）。这始于SpiderMonkey添加非标准方法，例如 &lt;code&gt;__defineGetter__()&lt;/code&gt; 。下划线的目的是使该方法在某种程度上很特别。从那时起，使用单个下划线前缀已成为指示对象&amp;ldquo;私有&amp;rdquo;成员的一种方式。</target>
        </trans-unit>
        <trans-unit id="4a96991a903b3e1ff68ea9a24be9b087a375a49f" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;Linter.version&lt;/code&gt; property that you can read without instantiating &lt;code&gt;Linter&lt;/code&gt;:</source>
          <target state="translated">还有一个 &lt;code&gt;Linter.version&lt;/code&gt; 属性，您无需实例化 &lt;code&gt;Linter&lt;/code&gt; 就可以读取它：</target>
        </trans-unit>
        <trans-unit id="871b96618532f5a624a5eebc653ef9799b4af97b" translate="yes" xml:space="preserve">
          <source>There is an explicit way to create a global variable when needed, by assigning to a property of the global object.</source>
          <target state="translated">有一种显式的方法可以在需要的时候创建一个全局变量,通过分配给全局对象的一个属性。</target>
        </trans-unit>
        <trans-unit id="a847459418c85beaf5623fd3b6978b33df19c866" translate="yes" xml:space="preserve">
          <source>There is no hard and fast rule about whether empty lines should precede &lt;code&gt;return&lt;/code&gt; statements in JavaScript. However, clearly delineating where a function is returning can greatly increase the readability and clarity of the code. For example:</source>
          <target state="translated">关于空行是否应该在JavaScript中的 &lt;code&gt;return&lt;/code&gt; 语句之前没有严格的规定。但是，清楚地描述函数将返回的位置可以大大提高代码的可读性和清晰度。例如：</target>
        </trans-unit>
        <trans-unit id="7c688c9ecfeeb2e718d9853398cce5aa37907224" translate="yes" xml:space="preserve">
          <source>There is one situation where initializing to &lt;code&gt;undefined&lt;/code&gt; behaves differently than omitting the initialization, and that's when a &lt;code&gt;var&lt;/code&gt; declaration occurs inside of a loop. For example:</source>
          <target state="translated">在一种情况下，初始化为 &lt;code&gt;undefined&lt;/code&gt; 的行为与省略初始化的行为不同，那就是在循环内部发生 &lt;code&gt;var&lt;/code&gt; 声明时。例如：</target>
        </trans-unit>
        <trans-unit id="f393cd7001d9c02a6a4db52334b4f6aa81c0dd84" translate="yes" xml:space="preserve">
          <source>There may be a part of a Node.js application that is responsible for determining the correct exit code to return upon exiting. In that case, you should turn this rule off to allow proper handling of the exit code.</source>
          <target state="translated">Node.js 应用程序中可能有一部分负责确定退出时返回的正确退出代码。在这种情况下,您应该关闭此规则,以便正确处理退出代码。</target>
        </trans-unit>
        <trans-unit id="3f8f96957f0116bd3dee02cc31450b17131c06e6" translate="yes" xml:space="preserve">
          <source>There should be just one variable declaration for all variables in the function. That declaration typically appears at the top of the function.</source>
          <target state="translated">函数中的所有变量应该只有一个变量声明。这个声明通常出现在函数的顶部。</target>
        </trans-unit>
        <trans-unit id="af6c3ae1870f67e9ba1a6645267df7a0ed8e6f39" translate="yes" xml:space="preserve">
          <source>There's a &lt;code&gt;jquery&lt;/code&gt; environment defined in this plugin. To use the environment in ESLint, you would use the unprefixed plugin name, followed by a slash, followed by the environment name. So if this plugin were named &lt;code&gt;eslint-plugin-myplugin&lt;/code&gt;, then you would set the environment in your configuration to be &lt;code&gt;&quot;myplugin/jquery&quot;&lt;/code&gt;.</source>
          <target state="translated">在此插件中定义了一个 &lt;code&gt;jquery&lt;/code&gt; 环境。要在ESLint中使用环境，可以使用未加前缀的插件名称，后跟斜杠，然后是环境名称。因此，如果此插件名为 &lt;code&gt;eslint-plugin-myplugin&lt;/code&gt; ，则可以将配置中的环境设置为 &lt;code&gt;&quot;myplugin/jquery&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4649a897c49ce8c22f4047b05ff4f46b049d69e6" translate="yes" xml:space="preserve">
          <source>Therefore, for any array &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;foo.indexOf(NaN)&lt;/code&gt; and &lt;code&gt;foo.lastIndexOf(NaN)&lt;/code&gt; will always return &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">因此，对于任何数组 &lt;code&gt;foo&lt;/code&gt; ， &lt;code&gt;foo.indexOf(NaN)&lt;/code&gt; 和 &lt;code&gt;foo.lastIndexOf(NaN)&lt;/code&gt; 将始终返回 &lt;code&gt;-1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee735b7f7a5f024f90771cc2fdec6e27abf7cb89" translate="yes" xml:space="preserve">
          <source>Therefore, the &lt;code&gt;u&lt;/code&gt; flag lets us work better with regular expressions.</source>
          <target state="translated">因此， &lt;code&gt;u&lt;/code&gt; 标志使我们可以更好地使用正则表达式。</target>
        </trans-unit>
        <trans-unit id="772ede07a4703392f30e23da9503d4982ba7ac6d" translate="yes" xml:space="preserve">
          <source>Therefore, use &lt;code&gt;Number.isNaN()&lt;/code&gt; or global &lt;code&gt;isNaN()&lt;/code&gt; functions to test whether a value is &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">因此，请使用 &lt;code&gt;Number.isNaN()&lt;/code&gt; 或全局 &lt;code&gt;isNaN()&lt;/code&gt; 函数来测试值是否为 &lt;code&gt;NaN&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="201cc4664da2bdb9c50a7d4f0ca2e44472bb57f6" translate="yes" xml:space="preserve">
          <source>These annotations may be used with either single-line or multi-line comments and should follow the same formatting rules as the general comment type. Examples:</source>
          <target state="translated">这些注释可与单行或多行注释一起使用,并应遵循与一般注释类型相同的格式规则。例如:</target>
        </trans-unit>
        <trans-unit id="4c52137db447105931b557eed8e46933af4bdec4" translate="yes" xml:space="preserve">
          <source>These are the most common scenarios recommended in different style guides:</source>
          <target state="translated">这些是不同风格指南中推荐的最常见的情况。</target>
        </trans-unit>
        <trans-unit id="acdb0470966c593cea7812a42d4a917d42c23356" translate="yes" xml:space="preserve">
          <source>These can be combined as much as you like. To make all methods exceptions (thereby rendering this rule useless), use &lt;code&gt;prefer-reflect: [2, { &quot;exceptions&quot;: [&quot;apply&quot;, &quot;call&quot;, &quot;defineProperty&quot;, &quot;getOwnPropertyDescriptor&quot;, &quot;getPrototypeOf&quot;, &quot;setPrototypeOf&quot;, &quot;isExtensible&quot;, &quot;getOwnPropertyNames&quot;, &quot;preventExtensions&quot;, &quot;delete&quot;] }]&lt;/code&gt;</source>
          <target state="translated">这些可以任意组合。要使所有方法都异常（从而使该规则无效），请使用 &lt;code&gt;prefer-reflect: [2, { &quot;exceptions&quot;: [&quot;apply&quot;, &quot;call&quot;, &quot;defineProperty&quot;, &quot;getOwnPropertyDescriptor&quot;, &quot;getPrototypeOf&quot;, &quot;setPrototypeOf&quot;, &quot;isExtensible&quot;, &quot;getOwnPropertyNames&quot;, &quot;preventExtensions&quot;, &quot;delete&quot;] }]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16b0a2f3a34d0787ea10fc5517dc6d1c9a76c309" translate="yes" xml:space="preserve">
          <source>These environments are not mutually exclusive, so you can define more than one at a time.</source>
          <target state="translated">这些环境并不相互排斥,因此您可以同时定义多个环境。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
