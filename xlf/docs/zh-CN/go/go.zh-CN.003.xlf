<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="go">
    <body>
      <group id="go">
        <trans-unit id="1737a096c0291fdc419a351b4c18ab1c2c60bfbf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://golang.org/src/sync/cond.go&quot;&gt;cond.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/sync/map.go&quot;&gt;map.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/sync/mutex.go&quot;&gt;mutex.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/sync/once.go&quot;&gt;once.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/sync/pool.go&quot;&gt;pool.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/sync/poolqueue.go&quot;&gt;poolqueue.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/sync/runtime.go&quot;&gt;runtime.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/sync/rwmutex.go&quot;&gt;rwmutex.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/sync/waitgroup.go&quot;&gt;waitgroup.go&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://golang.org/src/sync/cond.go&quot;&gt;cond.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/sync/map.go&quot;&gt;map.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/sync/mutex.go&quot;&gt;mutex.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/sync/once.go&quot;&gt;once.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/sync/pool.go&quot;&gt;pool.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/sync/poolqueue.go&quot;&gt;poolqueue.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/sync/runtime.go&quot;&gt;runtime.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/sync/rwmutex.go&quot;&gt;rwmutex.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/sync/waitgroup.go&quot;&gt;waitgroup.go&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d061d19a59eb280e57a7e7f87521357b089b0f17" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://golang.org/src/syscall/dirent.go&quot;&gt;dirent.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/endian_little.go&quot;&gt;endian_little.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/env_unix.go&quot;&gt;env_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/exec_linux.go&quot;&gt;exec_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/exec_unix.go&quot;&gt;exec_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/flock.go&quot;&gt;flock.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/lsf_linux.go&quot;&gt;lsf_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/msan0.go&quot;&gt;msan0.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/net.go&quot;&gt;net.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/netlink_linux.go&quot;&gt;netlink_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/setuidgid_linux.go&quot;&gt;setuidgid_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/sock_cloexec_linux.go&quot;&gt;sock_cloexec_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_linux.go&quot;&gt;sockcmsg_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_unix.go&quot;&gt;sockcmsg_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_unix_other.go&quot;&gt;sockcmsg_unix_other.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/str.go&quot;&gt;str.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall.go&quot;&gt;syscall.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall_dup2_linux.go&quot;&gt;syscall_dup2_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go&quot;&gt;syscall_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux_amd64.go&quot;&gt;syscall_linux_amd64.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall_unix.go&quot;&gt;syscall_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/time_nofake.go&quot;&gt;time_nofake.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/timestruct.go&quot;&gt;timestruct.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/zerrors_linux_amd64.go&quot;&gt;zerrors_linux_amd64.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go&quot;&gt;zsyscall_linux_amd64.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/zsysnum_linux_amd64.go&quot;&gt;zsysnum_linux_amd64.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/ztypes_linux_amd64.go&quot;&gt;ztypes_linux_amd64.go&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://golang.org/src/syscall/dirent.go&quot;&gt;dirent.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/endian_little.go&quot;&gt;endian_little.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/env_unix.go&quot;&gt;env_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/exec_linux.go&quot;&gt;exec_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/exec_unix.go&quot;&gt;exec_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/flock.go&quot;&gt;flock.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/lsf_linux.go&quot;&gt;lsf_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/msan0.go&quot;&gt;msan0.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/net.go&quot;&gt;net.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/netlink_linux.go&quot;&gt;netlink_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/setuidgid_linux.go&quot;&gt;setuidgid_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/sock_cloexec_linux.go&quot;&gt;sock_cloexec_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_linux.go&quot;&gt;sockcmsg_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_unix.go&quot;&gt;sockcmsg_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_unix_other.go&quot;&gt;sockcmsg_unix_other.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/str.go&quot;&gt;str.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall.go&quot;&gt;syscall.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall_dup2_linux.go&quot;&gt;syscall_dup2_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go&quot;&gt;syscall_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux_amd64.go&quot;&gt;syscall_linux_amd64.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall_unix.go&quot;&gt;syscall_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/time_nofake.go&quot;&gt;time_nofake.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/timestruct.go&quot;&gt;timestruct.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/zerrors_linux_amd64.go&quot;&gt;zerrors_linux_amd64.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go&quot;&gt;zsyscall_linux_amd64.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/zsysnum_linux_amd64.go&quot;&gt;zsysnum_linux_amd64.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/ztypes_linux_amd64.go&quot;&gt;ztypes_linux_amd64.go&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fa7cd10aa56ce12921abb65cdea26fd86039240b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://golang.org/src/syscall/dirent.go&quot;&gt;dirent.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/endian_little.go&quot;&gt;endian_little.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/env_unix.go&quot;&gt;env_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/exec_linux.go&quot;&gt;exec_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/exec_unix.go&quot;&gt;exec_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/flock.go&quot;&gt;flock.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/lsf_linux.go&quot;&gt;lsf_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/msan0.go&quot;&gt;msan0.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/net.go&quot;&gt;net.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/netlink_linux.go&quot;&gt;netlink_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/setuidgid_linux.go&quot;&gt;setuidgid_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_linux.go&quot;&gt;sockcmsg_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_unix.go&quot;&gt;sockcmsg_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/str.go&quot;&gt;str.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall.go&quot;&gt;syscall.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go&quot;&gt;syscall_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux_amd64.go&quot;&gt;syscall_linux_amd64.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall_unix.go&quot;&gt;syscall_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/timestruct.go&quot;&gt;timestruct.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/zerrors_linux_amd64.go&quot;&gt;zerrors_linux_amd64.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go&quot;&gt;zsyscall_linux_amd64.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/zsysnum_linux_amd64.go&quot;&gt;zsysnum_linux_amd64.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/ztypes_linux_amd64.go&quot;&gt;ztypes_linux_amd64.go&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://golang.org/src/syscall/dirent.go&quot;&gt;dirent.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/endian_little.go&quot;&gt;endian_little.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/env_unix.go&quot;&gt;env_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/exec_linux.go&quot;&gt;exec_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/exec_unix.go&quot;&gt;exec_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/flock.go&quot;&gt;flock.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/lsf_linux.go&quot;&gt;lsf_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/msan0.go&quot;&gt;msan0.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/net.go&quot;&gt;net.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/netlink_linux.go&quot;&gt;netlink_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/setuidgid_linux.go&quot;&gt;setuidgid_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_linux.go&quot;&gt;sockcmsg_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_unix.go&quot;&gt;sockcmsg_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/str.go&quot;&gt;str.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall.go&quot;&gt;syscall.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go&quot;&gt;syscall_linux.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux_amd64.go&quot;&gt;syscall_linux_amd64.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/syscall_unix.go&quot;&gt;syscall_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/timestruct.go&quot;&gt;timestruct.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/zerrors_linux_amd64.go&quot;&gt;zerrors_linux_amd64.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go&quot;&gt;zsyscall_linux_amd64.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/zsysnum_linux_amd64.go&quot;&gt;zsysnum_linux_amd64.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/ztypes_linux_amd64.go&quot;&gt;ztypes_linux_amd64.go&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e248637ca827ba0fee2748cca49f7fbc4c43eee3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://golang.org/src/syscall/js/func.go&quot;&gt;func.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/js/js.go&quot;&gt;js.go&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://golang.org/src/syscall/js/func.go&quot;&gt;func.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/syscall/js/js.go&quot;&gt;js.go&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="46fed19306bf09d06cbcaea4df26f30ffd5c4fee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://golang.org/src/testing/allocs.go&quot;&gt;allocs.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/testing/benchmark.go&quot;&gt;benchmark.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/testing/cover.go&quot;&gt;cover.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/testing/example.go&quot;&gt;example.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/testing/match.go&quot;&gt;match.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/testing/run_example.go&quot;&gt;run_example.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/testing/testing.go&quot;&gt;testing.go&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://golang.org/src/testing/allocs.go&quot;&gt;allocs.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/testing/benchmark.go&quot;&gt;benchmark.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/testing/cover.go&quot;&gt;cover.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/testing/example.go&quot;&gt;example.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/testing/match.go&quot;&gt;match.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/testing/run_example.go&quot;&gt;run_example.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/testing/testing.go&quot;&gt;testing.go&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7e47d640ecb94e78a00ddf0b9f17b9d992d4f289" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://golang.org/src/testing/iotest/logger.go&quot;&gt;logger.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/testing/iotest/reader.go&quot;&gt;reader.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/testing/iotest/writer.go&quot;&gt;writer.go&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://golang.org/src/testing/iotest/logger.go&quot;&gt;logger.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/testing/iotest/reader.go&quot;&gt;reader.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/testing/iotest/writer.go&quot;&gt;writer.go&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b09e83c79273db778194fa2008f49e72aeab13b1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://golang.org/src/text/template/doc.go&quot;&gt;doc.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/text/template/exec.go&quot;&gt;exec.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/text/template/funcs.go&quot;&gt;funcs.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/text/template/helper.go&quot;&gt;helper.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/text/template/option.go&quot;&gt;option.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/text/template/template.go&quot;&gt;template.go&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://golang.org/src/text/template/doc.go&quot;&gt;doc.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/text/template/exec.go&quot;&gt;exec.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/text/template/funcs.go&quot;&gt;funcs.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/text/template/helper.go&quot;&gt;helper.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/text/template/option.go&quot;&gt;option.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/text/template/template.go&quot;&gt;template.go&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eba4a554cbe2baa25bab8da1daf44509aa256e49" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://golang.org/src/text/template/parse/lex.go&quot;&gt;lex.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/text/template/parse/node.go&quot;&gt;node.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/text/template/parse/parse.go&quot;&gt;parse.go&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://golang.org/src/text/template/parse/lex.go&quot;&gt;lex.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/text/template/parse/node.go&quot;&gt;node.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/text/template/parse/parse.go&quot;&gt;parse.go&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4d9afcbb78d06b5d6992c5a5e0a2550b0a60f563" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://golang.org/src/time/format.go&quot;&gt;format.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/time/sleep.go&quot;&gt;sleep.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/time/sys_unix.go&quot;&gt;sys_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/time/tick.go&quot;&gt;tick.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/time/time.go&quot;&gt;time.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/time/zoneinfo.go&quot;&gt;zoneinfo.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/time/zoneinfo_read.go&quot;&gt;zoneinfo_read.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/time/zoneinfo_unix.go&quot;&gt;zoneinfo_unix.go&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://golang.org/src/time/format.go&quot;&gt;format.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/time/sleep.go&quot;&gt;sleep.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/time/sys_unix.go&quot;&gt;sys_unix.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/time/tick.go&quot;&gt;tick.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/time/time.go&quot;&gt;time.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/time/zoneinfo.go&quot;&gt;zoneinfo.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/time/zoneinfo_read.go&quot;&gt;zoneinfo_read.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/time/zoneinfo_unix.go&quot;&gt;zoneinfo_unix.go&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2747fe50dee1be8468c1055e14e570dc351cbc87" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://golang.org/src/unicode/casetables.go&quot;&gt;casetables.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/unicode/digit.go&quot;&gt;digit.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/unicode/graphic.go&quot;&gt;graphic.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/unicode/letter.go&quot;&gt;letter.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/unicode/tables.go&quot;&gt;tables.go&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://golang.org/src/unicode/casetables.go&quot;&gt;casetables.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/unicode/digit.go&quot;&gt;digit.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/unicode/graphic.go&quot;&gt;graphic.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/unicode/letter.go&quot;&gt;letter.go&lt;/a&gt;&lt;a href=&quot;https://golang.org/src/unicode/tables.go&quot;&gt;tables.go&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="98e4d86e5f0508d897fb3d252ad9682a8197ed11" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://golang.org/wiki/Projects&quot;&gt;Projects at the Go Wiki&lt;/a&gt; - a curated list of Go projects.</source>
          <target state="translated">&lt;a href=&quot;https://golang.org/wiki/Projects&quot;&gt;Go Wiki上&lt;/a&gt;的项目-Go项目的精选列表。</target>
        </trans-unit>
        <trans-unit id="418e6231239343c8131ef82ebde23ec234e74e36" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://pkg.go.dev/golang.org/x/pkgsite&quot;&gt;pkgsite&lt;/a&gt; &amp;mdash; home of the pkg.go.dev website.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd728c1d0c504dbec492943ca8e74e081796110" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rawgit.com/mikesamuel/sanitized-jquery-templates/trunk/safetemplate.html#problem_definition&quot;&gt;https://rawgit.com/mikesamuel/sanitized-jquery-templates/trunk/safetemplate.html#problem_definition&lt;/a&gt; defines &quot;safe&quot; as used by this package.</source>
          <target state="translated">&lt;a href=&quot;https://rawgit.com/mikesamuel/sanitized-jquery-templates/trunk/safetemplate.html#problem_definition&quot;&gt;https://rawgit.com/mikesamuel/sanitized-jquery-templates/trunk/safetemplate.html#problem_definition&lt;/a&gt;定义此包使用的&amp;ldquo;安全&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="c919ab787e33855057ab4da89511287a977f3f0b" translate="yes" xml:space="preserve">
          <source>A &quot;p&quot; or &quot;P&quot; exponent indicates a base 2 (rather then base 10) exponent; for instance, &quot;0x1.fffffffffffffp1023&quot; (using base 0) represents the maximum float64 value. For hexadecimal mantissae, the exponent character must be one of 'p' or 'P', if present (an &quot;e&quot; or &quot;E&quot; exponent indicator cannot be distinguished from a mantissa digit).</source>
          <target state="translated">p &quot;或 &quot;P &quot;指数表示2号基数(而不是10号基数)的指数;例如,&quot;0x1.ffffffffffffp1023&quot;(使用0号基数)表示最大float64值。对于十六进制口令,指数字符必须是'p'或'P'中的一个,如果存在的话(&quot;e &quot;或 &quot;E &quot;指数指示符不能与口令数字区分开来)。</target>
        </trans-unit>
        <trans-unit id="5a4d19eb24a3ed0b6c164421a09d6b64f88f5562" translate="yes" xml:space="preserve">
          <source>A BadDecl node is a placeholder for a declaration containing syntax errors for which a correct declaration node cannot be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1123f6aad96443b92187d542899cc95b9bb2fe32" translate="yes" xml:space="preserve">
          <source>A BadDecl node is a placeholder for declarations containing syntax errors for which no correct declaration nodes can be created.</source>
          <target state="translated">BadDecl节点是包含语法错误的声明的占位符,对于这些声明,不能创建正确的声明节点。</target>
        </trans-unit>
        <trans-unit id="f1b508926f2e750f76d43dad619ee622b521de7b" translate="yes" xml:space="preserve">
          <source>A BadExpr node is a placeholder for an expression containing syntax errors for which a correct expression node cannot be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfeb402a68dc1a9b5372f3908c42874cd09a220" translate="yes" xml:space="preserve">
          <source>A BadExpr node is a placeholder for expressions containing syntax errors for which no correct expression nodes can be created.</source>
          <target state="translated">BadExpr节点是包含语法错误的表达式的占位符,没有正确的表达式节点可以为其创建。</target>
        </trans-unit>
        <trans-unit id="7eb045abea7688d577a2f4aa68d42b63d688f628" translate="yes" xml:space="preserve">
          <source>A BadStmt node is a placeholder for statements containing syntax errors for which no correct statement nodes can be created.</source>
          <target state="translated">BadStmt 节点是包含语法错误的语句的占位符,没有正确的语句节点可以创建。</target>
        </trans-unit>
        <trans-unit id="a09691e16560521f59b5e41dfa68af0b91ddf921" translate="yes" xml:space="preserve">
          <source>A Basic represents a basic type.</source>
          <target state="translated">Basic代表一个基本类型。</target>
        </trans-unit>
        <trans-unit id="4e96e9fa6016f0735848cb5e83d084a95898493d" translate="yes" xml:space="preserve">
          <source>A BasicLit node represents a literal of basic type.</source>
          <target state="translated">BasicLit节点表示基本类型的文字。</target>
        </trans-unit>
        <trans-unit id="f0d28c34a4273c4c205bdbd169e7a24e79d3af70" translate="yes" xml:space="preserve">
          <source>A BasicType holds fields common to all basic types.</source>
          <target state="translated">BasicType拥有所有基本类型所共有的字段。</target>
        </trans-unit>
        <trans-unit id="4aaf562bb9c344cab2878d8a67694cab58f267fe" translate="yes" xml:space="preserve">
          <source>A BinaryExpr node represents a binary expression.</source>
          <target state="translated">一个BinaryExpr节点代表一个二进制表达式。</target>
        </trans-unit>
        <trans-unit id="c75800e242cb7940cab3ce54f7f2ee89e873c3a1" translate="yes" xml:space="preserve">
          <source>A Block represents a PEM encoded structure.</source>
          <target state="translated">一个Block代表一个PEM编码结构。</target>
        </trans-unit>
        <trans-unit id="6eb1e62ee558fbb06e309b0a1474fe5590194eb9" translate="yes" xml:space="preserve">
          <source>A Block represents an implementation of block cipher using a given key. It provides the capability to encrypt or decrypt individual blocks. The mode implementations extend that capability to streams of blocks.</source>
          <target state="translated">块代表使用给定密钥的块密码的实现,它提供了加密或解密单个块的能力。它提供了加密或解密单个块的能力。模式实现将这种能力扩展到块流。</target>
        </trans-unit>
        <trans-unit id="b09c35891b54fa0138a8d1707cf64366451f1193" translate="yes" xml:space="preserve">
          <source>A BlockMode represents a block cipher running in a block-based mode (CBC, ECB etc).</source>
          <target state="translated">一个BlockMode代表一个运行在基于块的模式下的块密码(CBC、ECB等)。</target>
        </trans-unit>
        <trans-unit id="8dfe588d503302439640a67e38197d5d027bab2f" translate="yes" xml:space="preserve">
          <source>A BlockStmt node represents a braced statement list.</source>
          <target state="translated">一个BlockStmt节点代表一个大括号的语句列表。</target>
        </trans-unit>
        <trans-unit id="a6596c287920a60f833a744c8df6d962e72ea7d5" translate="yes" xml:space="preserve">
          <source>A BoolType represents a boolean type.</source>
          <target state="translated">一个BoolType代表一个布尔类型。</target>
        </trans-unit>
        <trans-unit id="f359d441ebb4d88e77ab94131c369de596c1ee19" translate="yes" xml:space="preserve">
          <source>A BranchStmt node represents a break, continue, goto, or fallthrough statement.</source>
          <target state="translated">BranchStmt节点代表一个break、continue、goto或fallthrough语句。</target>
        </trans-unit>
        <trans-unit id="3fb505f6912b6b4ddfb95346dfcc6a9c7667dc18" translate="yes" xml:space="preserve">
          <source>A Buffer is a variable-sized buffer of bytes with Read and Write methods. The zero value for Buffer is an empty buffer ready to use.</source>
          <target state="translated">Buffer是一个可变大小的字节缓冲区,具有读和写方法。Buffer的零值是一个准备使用的空缓冲区。</target>
        </trans-unit>
        <trans-unit id="1461605a0709414441624bd277a7be479b6f6011" translate="yes" xml:space="preserve">
          <source>A BufferPool is an interface for getting and returning temporary byte slices for use by io.CopyBuffer.</source>
          <target state="translated">BufferPool是一个接口,用于获取和返回临时字节片,供io.CopyBuffer使用。</target>
        </trans-unit>
        <trans-unit id="b6d17c51ac02141341d0a91f23ea17ed19e01909" translate="yes" xml:space="preserve">
          <source>A Builder is used to efficiently build a string using Write methods. It minimizes memory copying. The zero value is ready to use. Do not copy a non-zero Builder.</source>
          <target state="translated">Builder用于使用Write方法高效地构建一个字符串。它最大限度地减少了内存复制。零值是可以使用的。不要复制一个非零的生成器。</target>
        </trans-unit>
        <trans-unit id="037cb25e954c2c0cb7d3dbedf060bc007d0e89cd" translate="yes" xml:space="preserve">
          <source>A Builtin represents a built-in function. Builtins don't have a valid type.</source>
          <target state="translated">一个Builtin代表一个内置函数。Builtins没有有效的类型。</target>
        </trans-unit>
        <trans-unit id="892968a868a7e4a907bd63b74cc7f80a6a88354c" translate="yes" xml:space="preserve">
          <source>A ByteOrder specifies how to convert byte sequences into 16-, 32-, or 64-bit unsigned integers.</source>
          <target state="translated">一个ByteOrder指定了如何将字节序列转换为16位、32位或64位无符号整数。</target>
        </trans-unit>
        <trans-unit id="6e655396894e089ec7bd8b95669d2a7e9ddcfcd0" translate="yes" xml:space="preserve">
          <source>A CallExpr node represents an expression followed by an argument list.</source>
          <target state="translated">CallExpr节点表示一个表达式,后面是一个参数列表。</target>
        </trans-unit>
        <trans-unit id="64a8f488b495e864ba78bb0d182f77c49a17af80" translate="yes" xml:space="preserve">
          <source>A CancelFunc tells an operation to abandon its work. A CancelFunc does not wait for the work to stop. A CancelFunc may be called by multiple goroutines simultaneously. After the first call, subsequent calls to a CancelFunc do nothing.</source>
          <target state="translated">CancelFunc告诉一个操作放弃它的工作。CancelFunc不会等待工作的停止。CancelFunc可以被多个goroutine同时调用。在第一次调用后,后续对CancelFunc的调用将不做任何事情。</target>
        </trans-unit>
        <trans-unit id="1b10cf9ceb81b6bc3b8dcabe10017a6a967fe252" translate="yes" xml:space="preserve">
          <source>A CaseClause represents a case of an expression or type switch statement.</source>
          <target state="translated">CaseClause表示一个表达式或类型切换语句的情况。</target>
        </trans-unit>
        <trans-unit id="3df0336a740616143abfbd052730d859e0747a00" translate="yes" xml:space="preserve">
          <source>A Certificate is a chain of one or more certificates, leaf first.</source>
          <target state="translated">证书是由一个或多个证书组成的链条,叶子先。</target>
        </trans-unit>
        <trans-unit id="6ce79efd48b66ecd681a102ece34c5f01f30b6bb" translate="yes" xml:space="preserve">
          <source>A Certificate represents an X.509 certificate.</source>
          <target state="translated">一个证书代表一个X.509证书。</target>
        </trans-unit>
        <trans-unit id="dacc044ff83252e8da8b7c83ac652df96b4a7263" translate="yes" xml:space="preserve">
          <source>A Chan represents a channel type.</source>
          <target state="translated">一个Chan代表一个通道类型。</target>
        </trans-unit>
        <trans-unit id="489cc0d6b95ec8b9ebbf24e11966fa69854f5cb9" translate="yes" xml:space="preserve">
          <source>A ChanDir value indicates a channel direction.</source>
          <target state="translated">ChanDir值表示通道方向。</target>
        </trans-unit>
        <trans-unit id="070a85a0a8fd173d8b11a96f53495cdee7edbae6" translate="yes" xml:space="preserve">
          <source>A ChanType node represents a channel type.</source>
          <target state="translated">一个ChanType节点代表一个通道类型。</target>
        </trans-unit>
        <trans-unit id="2aad134ce320508a2ed662401c3a35abf0301e47" translate="yes" xml:space="preserve">
          <source>A CharData represents XML character data (raw text), in which XML escape sequences have been replaced by the characters they represent.</source>
          <target state="translated">CharData表示XML字符数据(原始文本),其中XML转义序列已被它们所代表的字符所取代。</target>
        </trans-unit>
        <trans-unit id="cc58af40e127ae636ebfd4b1dab058b1f5ba3059" translate="yes" xml:space="preserve">
          <source>A CharType represents a signed character type.</source>
          <target state="translated">一个CharType代表一个有符号的字符类型。</target>
        </trans-unit>
        <trans-unit id="7571ca3899875977a8c2e856f154d99ef71130b0" translate="yes" xml:space="preserve">
          <source>A CheckEqualError is the result CheckEqual finding an error.</source>
          <target state="translated">CheckEqualError是CheckEqual发现错误的结果。</target>
        </trans-unit>
        <trans-unit id="e5e6d49e7769874182960864050ac2745252cf02" translate="yes" xml:space="preserve">
          <source>A CheckError is the result of Check finding an error.</source>
          <target state="translated">CheckError是Check发现错误的结果。</target>
        </trans-unit>
        <trans-unit id="e40b1d8be51a7ea43b64ef548b13353308a4f9f7" translate="yes" xml:space="preserve">
          <source>A Checker maintains the state of the type checker. It must be created with NewChecker.</source>
          <target state="translated">检查器维护类型检查器的状态。它必须用NewChecker创建。</target>
        </trans-unit>
        <trans-unit id="f430ceb71dc6fb2459e64f75abc35fb2c2dcc962" translate="yes" xml:space="preserve">
          <source>A Cipher is an instance of RC4 using a particular key.</source>
          <target state="translated">密码是使用特定密钥的RC4的一个实例。</target>
        </trans-unit>
        <trans-unit id="cebfde1712e5a042e0276018aed63bffa5b48954" translate="yes" xml:space="preserve">
          <source>A Class is the DWARF 4 class of an attribute value.</source>
          <target state="translated">类是属性值的DWARF 4类。</target>
        </trans-unit>
        <trans-unit id="fe94b934cba52a3f0f37c36e65520044cdec12c3" translate="yes" xml:space="preserve">
          <source>A Client is an HTTP client. Its zero value (DefaultClient) is a usable client that uses DefaultTransport.</source>
          <target state="translated">Client是一个HTTP客户端。它的零值(DefaultClient)是一个使用DefaultTransport的可用客户端。</target>
        </trans-unit>
        <trans-unit id="dff10f0c9a02b3533a2c5ff6f1aa4ea18efc93c0" translate="yes" xml:space="preserve">
          <source>A Client is higher-level than a RoundTripper (such as Transport) and additionally handles HTTP details such as cookies and redirects.</source>
          <target state="translated">Client比RoundTripper(如Transport)更高级,另外还处理HTTP细节,如Cookie和重定向。</target>
        </trans-unit>
        <trans-unit id="7476021d61e8a0df9fbc63c7ca0b91cd642f328e" translate="yes" xml:space="preserve">
          <source>A Client represents a client connection to an SMTP server.</source>
          <target state="translated">客户端代表一个客户端与SMTP服务器的连接。</target>
        </trans-unit>
        <trans-unit id="b71630fa521f0999628fd58f1a5f36c35682c154" translate="yes" xml:space="preserve">
          <source>A ClientCodec implements writing of RPC requests and reading of RPC responses for the client side of an RPC session. The client calls WriteRequest to write a request to the connection and calls ReadResponseHeader and ReadResponseBody in pairs to read responses. The client calls Close when finished with the connection. ReadResponseBody may be called with a nil argument to force the body of the response to be read and then discarded. See NewClient's comment for information about concurrent access.</source>
          <target state="translated">ClientCodec为RPC会话的客户端实现了RPC请求的写入和RPC响应的读取。客户端调用WriteRequest向连接写入请求,并成对调用ReadResponseHeader和ReadResponseBody来读取响应。客户端在完成连接时调用Close。ReadResponseBody可以用一个nil参数来调用,以强制读取响应的主体,然后丢弃。关于并发访问的信息,请参见NewClient的注释。</target>
        </trans-unit>
        <trans-unit id="360c604b631953905f3f4216c2aa9c0493f9a5c4" translate="yes" xml:space="preserve">
          <source>A Cmd cannot be reused after calling its Run, Output or CombinedOutput methods.</source>
          <target state="translated">一个Cmd在调用它的Run、Output或CombinedOutput方法后不能被重复使用。</target>
        </trans-unit>
        <trans-unit id="5f9b0eb470afbfa84ac3e6bd695f6f7547e25e63" translate="yes" xml:space="preserve">
          <source>A CommClause node represents a case of a select statement.</source>
          <target state="translated">一个CommClause节点代表一个选择语句的情况。</target>
        </trans-unit>
        <trans-unit id="126d1d49a2d0aecea067ab9d4f53c05821460337" translate="yes" xml:space="preserve">
          <source>A Comment node represents a single //-style or /*-style comment.</source>
          <target state="translated">一个Comment节点代表一个单一的//风格或/*风格的评论。</target>
        </trans-unit>
        <trans-unit id="102b0aae1b692037597357ab6c34e305a5d50abf" translate="yes" xml:space="preserve">
          <source>A Comment represents an XML comment of the form &amp;lt;!--comment--&amp;gt;. The bytes do not include the &amp;lt;!-- and --&amp;gt; comment markers.</source>
          <target state="translated">注释表示形式为&amp;lt;！-comment-&amp;gt;的XML注释。字节不包含&amp;lt;！-和-&amp;gt;注释标记。</target>
        </trans-unit>
        <trans-unit id="f01ed0a912eea13962aa863979815ef144c0e12e" translate="yes" xml:space="preserve">
          <source>A CommentGroup represents a sequence of comments with no other tokens and no empty lines between.</source>
          <target state="translated">一个CommentGroup表示一个没有其他标记的评论序列,中间没有空行。</target>
        </trans-unit>
        <trans-unit id="6618446c717172eb2ba87e09ce048aad816582b5" translate="yes" xml:space="preserve">
          <source>A CommentMap maps an AST node to a list of comment groups associated with it. See NewCommentMap for a description of the association.</source>
          <target state="translated">CommentMap 将一个 AST 节点映射到与它相关联的评论组列表。关联的描述参见NewCommentMap。</target>
        </trans-unit>
        <trans-unit id="4541544833c16b1a72e733c00fdf848bd8e1ec5a" translate="yes" xml:space="preserve">
          <source>A CommentedNode bundles an AST node and corresponding comments. It may be provided as argument to any of the Fprint functions.</source>
          <target state="translated">一个CommentedNode捆绑了一个AST节点和相应的注释,它可以作为任何Fprint函数的参数提供。它可以作为参数提供给任何一个Fprint函数。</target>
        </trans-unit>
        <trans-unit id="b25bec4a4f00e250f1372003588c09e5587d686b" translate="yes" xml:space="preserve">
          <source>A CommonType holds fields common to multiple types. If a field is not known or not applicable for a given type, the zero value is used.</source>
          <target state="translated">一个CommonType拥有多个类型所共有的字段,如果一个字段不知道或不适用某个类型,则使用零值。如果一个字段对于一个给定的类型来说是未知的或不适用的,则使用零值。</target>
        </trans-unit>
        <trans-unit id="aff877fa9d1c634f1772007c128f36f1bc62e322" translate="yes" xml:space="preserve">
          <source>A ComplexType represents a complex floating point type.</source>
          <target state="translated">ComplexType表示一个复杂的浮点类型。</target>
        </trans-unit>
        <trans-unit id="c1232fe7484bfb4ee0095518475648ab13064a76" translate="yes" xml:space="preserve">
          <source>A CompositeLit node represents a composite literal.</source>
          <target state="translated">一个CompositeLit节点代表一个复合文字。</target>
        </trans-unit>
        <trans-unit id="0f70c579d931c29aa9cde9de4f1cce6833035c9f" translate="yes" xml:space="preserve">
          <source>A Compressor returns a new compressing writer, writing to w. The WriteCloser's Close method must be used to flush pending data to w. The Compressor itself must be safe to invoke from multiple goroutines simultaneously, but each returned writer will be used only by one goroutine at a time.</source>
          <target state="translated">压缩器返回一个新的压缩写入器,写入到w中,WriteCloser的Close方法必须用来将待处理的数据刷新到w中。压缩器本身必须是安全的,可以同时从多个goroutine中调用,但每个返回的写入器一次只能被一个goroutine使用。</target>
        </trans-unit>
        <trans-unit id="d87124c080041826540d92b145f7667559b16d7f" translate="yes" xml:space="preserve">
          <source>A Cond must not be copied after first use.</source>
          <target state="translated">首次使用后不得复制Cond。</target>
        </trans-unit>
        <trans-unit id="74cea2d83b96c716a3176b36089838f2190c82b3" translate="yes" xml:space="preserve">
          <source>A Config node controls the output of Fprint.</source>
          <target state="translated">Config节点控制Fprint的输出。</target>
        </trans-unit>
        <trans-unit id="3c229591d56e4195e752fc2d9b259e9760a5c33b" translate="yes" xml:space="preserve">
          <source>A Config specifies the configuration for type checking. The zero value for Config is a ready-to-use default configuration.</source>
          <target state="translated">Config指定类型检查的配置。Config的零值是一个随时可用的默认配置。</target>
        </trans-unit>
        <trans-unit id="c0f1b53b3d403749973328df58e12a575ec9a7b0" translate="yes" xml:space="preserve">
          <source>A Config structure contains options for running a test.</source>
          <target state="translated">Config结构包含运行测试的选项。</target>
        </trans-unit>
        <trans-unit id="c121cae17514d3fa4cae135216ea38cbdf6bbce1" translate="yes" xml:space="preserve">
          <source>A Config structure is used to configure a TLS client or server. After one has been passed to a TLS function it must not be modified. A Config may be reused; the tls package will also not modify it.</source>
          <target state="translated">Config结构用于配置TLS客户端或服务器。当一个Config结构被传递给一个TLS函数后,就不能再修改了。一个Config可以重复使用,tls包也不会修改它。</target>
        </trans-unit>
        <trans-unit id="c3a452893d512c39ccf07d91afb2d3c4d36420f8" translate="yes" xml:space="preserve">
          <source>A Conn must call Close to return the connection to the database pool and may do so concurrently with a running query.</source>
          <target state="translated">Conn必须调用Close来将连接返回到数据库池,并且可以与正在运行的查询同时进行。</target>
        </trans-unit>
        <trans-unit id="e7232532e891cd146be604b1b6ed41fa6024cd94" translate="yes" xml:space="preserve">
          <source>A Conn represents a secured connection. It implements the net.Conn interface.</source>
          <target state="translated">Conn代表一个安全的连接,它实现了net.Conn接口。它实现了net.Conn接口。</target>
        </trans-unit>
        <trans-unit id="8a98021e4777c07cc886aaaaaab3e86d5dd758f8" translate="yes" xml:space="preserve">
          <source>A Conn represents a textual network protocol connection. It consists of a Reader and Writer to manage I/O and a Pipeline to sequence concurrent requests on the connection. These embedded types carry methods with them; see the documentation of those types for details.</source>
          <target state="translated">一个Conn表示一个文本网络协议连接。它由一个用于管理I/O的Reader和Writer和一个用于在连接上对并发请求进行排序的Pipeline组成。这些嵌入式类型都带有方法,详情请看这些类型的文档。</target>
        </trans-unit>
        <trans-unit id="c4b224256a6ca255a6fb91fd1197343ba6039ae2" translate="yes" xml:space="preserve">
          <source>A ConnState represents the state of a client connection to a server. It's used by the optional Server.ConnState hook.</source>
          <target state="translated">ConnState表示客户端连接到服务器的状态。它由可选的 Server.ConnState 钩子使用。</target>
        </trans-unit>
        <trans-unit id="e31df198984a84556e29056f951a830f56b070b2" translate="yes" xml:space="preserve">
          <source>A Connector can be passed to sql.OpenDB, to allow drivers to implement their own sql.DB constructors, or returned by DriverContext's OpenConnector method, to allow drivers access to context and to avoid repeated parsing of driver configuration.</source>
          <target state="translated">连接器可以传递给sql.OpenDB,让驱动程序实现自己的sql.DB构造函数,或者由DriverContext的OpenConnector方法返回,让驱动程序访问上下文,避免重复解析驱动程序配置。</target>
        </trans-unit>
        <trans-unit id="044be90e3e3147d4e037da6309a7d2e940ba3c36" translate="yes" xml:space="preserve">
          <source>A Connector represents a driver in a fixed configuration and can create any number of equivalent Conns for use by multiple goroutines.</source>
          <target state="translated">一个Connector代表一个固定配置的驱动程序,可以创建任意数量的等价Conns供多个goroutine使用。</target>
        </trans-unit>
        <trans-unit id="da4a343554925a1ddbea469e235e1555605d99a5" translate="yes" xml:space="preserve">
          <source>A Const represents a declared constant.</source>
          <target state="translated">Const代表一个声明的常量。</target>
        </trans-unit>
        <trans-unit id="4500800489d0c022304032a2e4a5cc3ccd1e4757" translate="yes" xml:space="preserve">
          <source>A Context carries a deadline, a cancellation signal, and other values across API boundaries.</source>
          <target state="translated">一个上下文承载着一个截止日期、一个取消信号和其他跨API边界的值。</target>
        </trans-unit>
        <trans-unit id="ad739093c7c2952b6f8d06103b8320cc9d3d6ee6" translate="yes" xml:space="preserve">
          <source>A Context specifies the supporting context for a build.</source>
          <target state="translated">Context指定了构建的支持上下文。</target>
        </trans-unit>
        <trans-unit id="345b60f4218aab4a9e89ba61ffe19ba47293618c" translate="yes" xml:space="preserve">
          <source>A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an HTTP response or the Cookie header of an HTTP request.</source>
          <target state="translated">Cookie代表一个HTTP Cookie,它是在HTTP响应的Set-Cookie头或HTTP请求的Cookie头中发送的。</target>
        </trans-unit>
        <trans-unit id="439511987886b735bcc48bb82e45d11fb45c8e80" translate="yes" xml:space="preserve">
          <source>A CookieJar manages storage and use of cookies in HTTP requests.</source>
          <target state="translated">CookieJar管理HTTP请求中Cookie的存储和使用。</target>
        </trans-unit>
        <trans-unit id="9dbc27b974673707e8a2f913fec96abcb0bae1ca" translate="yes" xml:space="preserve">
          <source>A CorruptInputError reports the presence of corrupt input at a given offset.</source>
          <target state="translated">CorruptInputError报告在给定偏移处存在损坏的输入。</target>
        </trans-unit>
        <trans-unit id="2a774110c2f1a711b8627926a4c791b50d477e36" translate="yes" xml:space="preserve">
          <source>A Cpu is a Mach-O cpu type.</source>
          <target state="translated">Cpu是一种马赫-奥的cpu类型。</target>
        </trans-unit>
        <trans-unit id="c8d753e7b1724d6b84a9e41195ecce8524401784" translate="yes" xml:space="preserve">
          <source>A Curve represents a short-form Weierstrass curve with a=-3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8833559ac0ea08bb6631d4af289d3312b520f0" translate="yes" xml:space="preserve">
          <source>A Curve represents a short-form Weierstrass curve with a=-3. See &lt;a href=&quot;https://www.hyperelliptic.org/EFD/g1p/auto-shortw.html&quot;&gt;https://www.hyperelliptic.org/EFD/g1p/auto-shortw.html&lt;/a&gt;</source>
          <target state="translated">曲线代表a = -3的短形式Weierstrass曲线。参见&lt;a href=&quot;https://www.hyperelliptic.org/EFD/g1p/auto-shortw.html&quot;&gt;https://www.hyperelliptic.org/EFD/g1p/auto-shortw.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8d334a921cf08b96ed08ebbd1348bd4502b8cbff" translate="yes" xml:space="preserve">
          <source>A DeclStmt node represents a declaration in a statement list.</source>
          <target state="translated">DeclStmt节点代表语句列表中的一个声明。</target>
        </trans-unit>
        <trans-unit id="7fc0e178afca45507a82048502fc3190729e7a51" translate="yes" xml:space="preserve">
          <source>A Decoder manages the receipt of type and data information read from the remote side of a connection. It is safe for concurrent use by multiple goroutines.</source>
          <target state="translated">解码器管理从连接的远程侧读取的类型和数据信息的接收。它对多个goroutine的并发使用是安全的。</target>
        </trans-unit>
        <trans-unit id="aaa935f1cb5a55ee24b563854564808c1c7b94ab" translate="yes" xml:space="preserve">
          <source>A Decoder reads and decodes JSON values from an input stream.</source>
          <target state="translated">Decoder从输入流中读取和解码JSON值。</target>
        </trans-unit>
        <trans-unit id="6a0ff998ca32c8d66166ff01613dc1c8be7bbffd" translate="yes" xml:space="preserve">
          <source>A Decoder represents an XML parser reading a particular input stream. The parser assumes that its input is encoded in UTF-8.</source>
          <target state="translated">Decoder代表一个XML解析器,它读取一个特定的输入流。该解析器假定其输入是以UTF-8编码的。</target>
        </trans-unit>
        <trans-unit id="fa6eac4594c2e9110158777fdd5ccd573d3725c4" translate="yes" xml:space="preserve">
          <source>A Decompressor returns a new decompressing reader, reading from r. The ReadCloser's Close method must be used to release associated resources. The Decompressor itself must be safe to invoke from multiple goroutines simultaneously, but each returned reader will be used only by one goroutine at a time.</source>
          <target state="translated">Decompressor 会返回一个新的解压读卡器,从 r 中读取,必须使用 ReadCloser 的 Close 方法来释放相关资源。解压器本身必须是安全的,可以同时从多个goroutine中调用,但每个返回的读取器一次只能被一个goroutine使用。</target>
        </trans-unit>
        <trans-unit id="3177b45a687e697befcd3f3f2594b30a3ecf0c86" translate="yes" xml:space="preserve">
          <source>A DeferStmt node represents a defer statement.</source>
          <target state="translated">一个DeferStmt节点代表了一个延迟声明。</target>
        </trans-unit>
        <trans-unit id="b67d05f625ac987a07f0eb01489bee222c70495e" translate="yes" xml:space="preserve">
          <source>A Delim is a JSON array or object delimiter, one of [ ] { or }.</source>
          <target state="translated">Delim是一个JSON数组或对象定界符,是[]{或}中的一种。</target>
        </trans-unit>
        <trans-unit id="3528f7cabfe02dad4395c36da0f26da2899865f1" translate="yes" xml:space="preserve">
          <source>A Dialer contains options for connecting to an address.</source>
          <target state="translated">一个拨号器包含连接到地址的选项。</target>
        </trans-unit>
        <trans-unit id="6408d9ab2f66c0a4e6e86f5a54d85c61373257b3" translate="yes" xml:space="preserve">
          <source>A Dir implements FileSystem using the native file system restricted to a specific directory tree.</source>
          <target state="translated">一个Dir实现了使用本地文件系统的FileSystem,限制在一个特定的目录树上。</target>
        </trans-unit>
        <trans-unit id="f86e22f5699c7e88fdb174b30fabf27d65d245e3" translate="yes" xml:space="preserve">
          <source>A Directive represents an XML directive of the form &amp;lt;!text&amp;gt;. The bytes do not include the &amp;lt;! and &amp;gt; markers.</source>
          <target state="translated">指令表示形式为&amp;lt;！text&amp;gt;的XML指令。字节不包含&amp;lt;！和&amp;gt;标记。</target>
        </trans-unit>
        <trans-unit id="f0be171834370163d199abe38b806da6288a68ad" translate="yes" xml:space="preserve">
          <source>A DotDotDotType represents the variadic ... function parameter.</source>
          <target state="translated">一个DotDotDotType表示变...函数参数。</target>
        </trans-unit>
        <trans-unit id="6384d5f5a370c8e493c8712f20d49ae8b99cc150" translate="yes" xml:space="preserve">
          <source>A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.</source>
          <target state="translated">持续时间以int64纳秒计数表示两个瞬间之间的时间。该表示方法将最大的可表示时间限制为大约290年。</target>
        </trans-unit>
        <trans-unit id="5ecdfd7bc84be9f2d17a162b33d49b58be95285e" translate="yes" xml:space="preserve">
          <source>A Dylib represents a Mach-O load dynamic library command.</source>
          <target state="translated">一个Dylib代表一个Mach-O加载动态库命令。</target>
        </trans-unit>
        <trans-unit id="0acd35cd81a153e22929826effaf5c42378d0fea" translate="yes" xml:space="preserve">
          <source>A DylibCmd is a Mach-O load dynamic library command.</source>
          <target state="translated">DylibCmd是一个Mach-O加载动态库的命令。</target>
        </trans-unit>
        <trans-unit id="2bb7617e0174a9893ba90aa3aabb8948c586903b" translate="yes" xml:space="preserve">
          <source>A Dysymtab represents a Mach-O dynamic symbol table command.</source>
          <target state="translated">一个Dysymtab代表一个Mach-O动态符号表命令。</target>
        </trans-unit>
        <trans-unit id="a3d7d413601467bbc9c94994480cf4597efe0894" translate="yes" xml:space="preserve">
          <source>A DysymtabCmd is a Mach-O dynamic symbol table command.</source>
          <target state="translated">DysymtabCmd是一个Mach-O动态符号表命令。</target>
        </trans-unit>
        <trans-unit id="0df08f2b1aaf090c6e60a692d9f1a3e5e77aad17" translate="yes" xml:space="preserve">
          <source>A FatArch is a Mach-O File inside a FatFile.</source>
          <target state="translated">FatArch是FatFile里面的一个Mach-O文件。</target>
        </trans-unit>
        <trans-unit id="feab8100790b52cb094e5b75b69875ccd9ff711e" translate="yes" xml:space="preserve">
          <source>A FatArchHeader represents a fat header for a specific image architecture.</source>
          <target state="translated">FatArchHeader表示一个特定图像架构的胖头。</target>
        </trans-unit>
        <trans-unit id="b79b4d3682257c685c1bf7a92b274c21d4a76b36" translate="yes" xml:space="preserve">
          <source>A FatFile is a Mach-O universal binary that contains at least one architecture.</source>
          <target state="translated">FatFile是一个Mach-O通用二进制文件,至少包含一个架构。</target>
        </trans-unit>
        <trans-unit id="39a6737a2fd79f471ed1f017391abd2beae09609" translate="yes" xml:space="preserve">
          <source>A Field is a single attribute/value pair in an Entry.</source>
          <target state="translated">字段是一个条目中的单一属性/值对。</target>
        </trans-unit>
        <trans-unit id="45548081441583b2b52c076e664e8a1b9b5bfb95" translate="yes" xml:space="preserve">
          <source>A Field represents a Field declaration list in a struct type, a method list in an interface type, or a parameter/result declaration in a signature. Field.Names is nil for unnamed parameters (parameter lists which only contain types) and embedded struct fields. In the latter case, the field name is the type name.</source>
          <target state="translated">Field代表结构类型中的字段声明列表,接口类型中的方法列表,或签名中的参数/结果声明。Field.Names对于未命名的参数(只包含类型的参数列表)和嵌入的结构体字段为零。在后一种情况下,字段名就是类型名。</target>
        </trans-unit>
        <trans-unit id="6dd0ed32ad3016ad5f04a116fae45f9934e70025" translate="yes" xml:space="preserve">
          <source>A FieldFilter may be provided to Fprint to control the output.</source>
          <target state="translated">可以向Fprint提供一个FieldFilter来控制输出。</target>
        </trans-unit>
        <trans-unit id="b1c9353c6215676d705e43fd5de613dde8e8e192" translate="yes" xml:space="preserve">
          <source>A FieldList represents a list of Fields, enclosed by parentheses or braces.</source>
          <target state="translated">一个FieldList表示一个Field的列表,用括号或大括号括起来。</target>
        </trans-unit>
        <trans-unit id="c37cc883e1e912226df4c951571e7fa7ce2829b4" translate="yes" xml:space="preserve">
          <source>A File is a handle for a file belonging to a FileSet. A File has a name, size, and line offset table.</source>
          <target state="translated">文件是属于一个FileSet的文件的句柄。一个文件有一个名称、大小和行偏移表。</target>
        </trans-unit>
        <trans-unit id="724a9870762bd470aa21565f1e367e985eaadbc5" translate="yes" xml:space="preserve">
          <source>A File is returned by a FileSystem's Open method and can be served by the FileServer implementation.</source>
          <target state="translated">文件是由FileSystem的Open方法返回的,可以由FileServer实现服务。</target>
        </trans-unit>
        <trans-unit id="933657418db475690f900fc0cb038c8ec20fa23f" translate="yes" xml:space="preserve">
          <source>A File node represents a Go source file.</source>
          <target state="translated">一个文件节点代表一个围棋源文件。</target>
        </trans-unit>
        <trans-unit id="88092327b3f39b704b7d9dafd634ca25e188e4c7" translate="yes" xml:space="preserve">
          <source>A File represents an open ELF file.</source>
          <target state="translated">文件代表一个打开的ELF文件。</target>
        </trans-unit>
        <trans-unit id="65e617a52a2a3202382d475d890e7de2c4e15f40" translate="yes" xml:space="preserve">
          <source>A File represents an open Mach-O file.</source>
          <target state="translated">一个文件代表一个打开的Mach-O文件。</target>
        </trans-unit>
        <trans-unit id="705c0d822b227bbdfb608bdb5b0dd5b1341bcaf4" translate="yes" xml:space="preserve">
          <source>A File represents an open PE file.</source>
          <target state="translated">一个文件代表一个打开的PE文件。</target>
        </trans-unit>
        <trans-unit id="e8041758a835e2e671f1edd9a36a5c0717c227b6" translate="yes" xml:space="preserve">
          <source>A File represents an open Plan 9 a.out file.</source>
          <target state="translated">文件代表一个打开的 Plan 9 a.out 文件。</target>
        </trans-unit>
        <trans-unit id="1b02261788cea23a7e13cd4df1998baba9a3f063" translate="yes" xml:space="preserve">
          <source>A FileHeader describes a file part of a multipart request.</source>
          <target state="translated">FileHeader描述了多部分请求的文件部分。</target>
        </trans-unit>
        <trans-unit id="3e9ebbcbf6bf5d2e7a5168723d1cd92457a28d9c" translate="yes" xml:space="preserve">
          <source>A FileHeader represents a Mach-O file header.</source>
          <target state="translated">一个FileHeader代表一个Mach-O文件头。</target>
        </trans-unit>
        <trans-unit id="c464dfa1166cb87240fc924ea37de926c8387ff0" translate="yes" xml:space="preserve">
          <source>A FileHeader represents a Plan 9 a.out file header.</source>
          <target state="translated">FileHeader表示Plan 9 a.out文件头。</target>
        </trans-unit>
        <trans-unit id="44f8b75b12734f33f611a1d8eac4363a03be63e4" translate="yes" xml:space="preserve">
          <source>A FileHeader represents an ELF file header.</source>
          <target state="translated">一个FileHeader代表一个ELF文件头。</target>
        </trans-unit>
        <trans-unit id="de6784d1f1cbed04559df2db8caf5220c3d40a51" translate="yes" xml:space="preserve">
          <source>A FileInfo describes a file and is returned by Stat and Lstat.</source>
          <target state="translated">FileInfo描述一个文件,并由Stat和Lstat返回。</target>
        </trans-unit>
        <trans-unit id="256e3c3b330f9698a158d9ebc412d515e72f62ef" translate="yes" xml:space="preserve">
          <source>A FileMode represents a file's mode and permission bits. The bits have the same definition on all systems, so that information about files can be moved from one system to another portably. Not all bits apply to all systems. The only required bit is ModeDir for directories.</source>
          <target state="translated">一个FileMode代表一个文件的模式和权限位。这些位在所有系统上都有相同的定义,因此文件的信息可以从一个系统移动到另一个系统。并非所有的位都适用于所有系统。唯一需要的位是目录的ModeDir。</target>
        </trans-unit>
        <trans-unit id="071474a5e59c2cbe4022eddafca1945a74b7de9b" translate="yes" xml:space="preserve">
          <source>A FileSet represents a set of source files. Methods of file sets are synchronized; multiple goroutines may invoke them concurrently.</source>
          <target state="translated">一个FileSet代表一组源文件。文件集的方法是同步的;多个goroutine可以同时调用它们。</target>
        </trans-unit>
        <trans-unit id="0b2dd840727f49f9eba8be4237966f01f435fad4" translate="yes" xml:space="preserve">
          <source>A FileSystem implements access to a collection of named files. The elements in a file path are separated by slash ('/', U+002F) characters, regardless of host operating system convention.</source>
          <target state="translated">一个FileSystem实现了对命名文件集合的访问,文件路径中的元素用斜线(/',U+002F)隔开,与主机操作系统的习惯无关。文件路径中的元素用斜线('/',U+002F)字符分隔,与主机操作系统的惯例无关。</target>
        </trans-unit>
        <trans-unit id="78a9e5c4832223d5a011e8dddc53aa5d75c7f4d4" translate="yes" xml:space="preserve">
          <source>A Flag accepts any data and is set to true if present.</source>
          <target state="translated">Flag接受任何数据,如果存在,则设置为true。</target>
        </trans-unit>
        <trans-unit id="9fa93680f639a304c47bdf98c8a62274d8186d35" translate="yes" xml:space="preserve">
          <source>A Flag represents the state of a flag.</source>
          <target state="translated">一面旗帜代表一面旗帜的状态。</target>
        </trans-unit>
        <trans-unit id="234f76bb20d5f9eec0d53dcc77b2a13d82eadf61" translate="yes" xml:space="preserve">
          <source>A FlagSet represents a set of defined flags. The zero value of a FlagSet has no name and has ContinueOnError error handling.</source>
          <target state="translated">一个FlagSet代表一组定义的标志。FlagSet的零值没有名字,具有ContinueOnError错误处理功能。</target>
        </trans-unit>
        <trans-unit id="5288f46811dffeaa7ea61e19365d12c9632b9778" translate="yes" xml:space="preserve">
          <source>A FloatType represents a floating point type.</source>
          <target state="translated">FloatType表示一个浮点类型。</target>
        </trans-unit>
        <trans-unit id="0b1e4bc4cb382e2c275611b3238464917e62a22d" translate="yes" xml:space="preserve">
          <source>A ForStmt represents a for statement.</source>
          <target state="translated">一个ForStmt代表一个for语句。</target>
        </trans-unit>
        <trans-unit id="0c2fc1a03e93ae8b537c5962f0b0b7762e61aaf4" translate="yes" xml:space="preserve">
          <source>A FormatError reports that the input is not a valid JPEG.</source>
          <target state="translated">FormatError报告输入不是有效的JPEG。</target>
        </trans-unit>
        <trans-unit id="6fad07f1b5a1dbeefd78d7d2f7d158225dd26546" translate="yes" xml:space="preserve">
          <source>A FormatError reports that the input is not a valid PNG.</source>
          <target state="translated">FormatError报告输入不是有效的PNG。</target>
        </trans-unit>
        <trans-unit id="dc9cb9f874380cdd581f85bc7cca4178b91bf7ca" translate="yes" xml:space="preserve">
          <source>A Func collects information about a single function.</source>
          <target state="translated">一个Func收集了一个单一函数的信息。</target>
        </trans-unit>
        <trans-unit id="49cb9decf874b456f0efef0977636083343d1115" translate="yes" xml:space="preserve">
          <source>A Func represents a Go function in the running binary.</source>
          <target state="translated">Func代表运行中的二进制中的一个围棋函数。</target>
        </trans-unit>
        <trans-unit id="11647ec5e44e1c0de00d02c89c294903e5e1dff5" translate="yes" xml:space="preserve">
          <source>A Func represents a declared function, concrete method, or abstract (interface) method. Its Type() is always a *Signature. An abstract method may belong to many interfaces due to embedding.</source>
          <target state="translated">一个Func代表一个声明的函数、具体方法或抽象(接口)方法。它的Type()总是一个*符号。一个抽象方法由于嵌入,可能属于许多接口。</target>
        </trans-unit>
        <trans-unit id="e94aa8231cb387fe4a10412ff3ac134dd8f4c188" translate="yes" xml:space="preserve">
          <source>A FuncDecl node represents a function declaration.</source>
          <target state="translated">FuncDecl节点代表一个函数声明。</target>
        </trans-unit>
        <trans-unit id="94e066c3ac487a79d47768c2220a49644d0bf184" translate="yes" xml:space="preserve">
          <source>A FuncLit node represents a function literal.</source>
          <target state="translated">一个FuncLit节点代表一个函数文字。</target>
        </trans-unit>
        <trans-unit id="09e2235228768330e677d304af97960b02fdd8c5" translate="yes" xml:space="preserve">
          <source>A FuncType node represents a function type.</source>
          <target state="translated">FuncType节点表示一个函数类型。</target>
        </trans-unit>
        <trans-unit id="dec14bd2e595d84c173c9bf0c1df71b1223eddb0" translate="yes" xml:space="preserve">
          <source>A FuncType represents a function type.</source>
          <target state="translated">一个FuncType代表一个函数类型。</target>
        </trans-unit>
        <trans-unit id="987651ff41c347596f94cc565b5f05d25059c2c5" translate="yes" xml:space="preserve">
          <source>A GenDecl node (generic declaration node) represents an import, constant, type or variable declaration. A valid Lparen position (Lparen.IsValid()) indicates a parenthesized declaration.</source>
          <target state="translated">一个GenDecl节点(通用声明节点)表示一个导入、常量、类型或变量声明。一个有效的Lparen位置(Lparen.IsValid())表示一个小括号的声明。</target>
        </trans-unit>
        <trans-unit id="9ebbcb57a5319bb37519fc330de793ad98efdcc2" translate="yes" xml:space="preserve">
          <source>A Generator can generate random values of its own type.</source>
          <target state="translated">一个生成器可以生成自己类型的随机值。</target>
        </trans-unit>
        <trans-unit id="2b5be6dbdc273931973aa00fee70bb05d983c538" translate="yes" xml:space="preserve">
          <source>A GoStmt node represents a go statement.</source>
          <target state="translated">一个GoStmt节点代表一个围棋语句。</target>
        </trans-unit>
        <trans-unit id="ead9a9b0d839e98932b0f6df6d7a5bcac06a117e" translate="yes" xml:space="preserve">
          <source>A Handler responds to an HTTP request.</source>
          <target state="translated">一个处理程序响应一个HTTP请求。</target>
        </trans-unit>
        <trans-unit id="1137ce84e7b2173907b2beb75a048008a6d1a1fd" translate="yes" xml:space="preserve">
          <source>A HardwareAddr represents a physical hardware address.</source>
          <target state="translated">HardwareAddr代表一个物理硬件地址。</target>
        </trans-unit>
        <trans-unit id="66aa09d50694e8606590bbd853e20a5cf82fa277" translate="yes" xml:space="preserve">
          <source>A Header represents a single header in a tar archive. Some fields may not be populated.</source>
          <target state="translated">标头代表焦油存档中的单个标头。有些字段可能不会被填充。</target>
        </trans-unit>
        <trans-unit id="a628db49b644e43a3caa5d22dfaed6a4347d3671" translate="yes" xml:space="preserve">
          <source>A Header represents the key-value pairs in a mail message header.</source>
          <target state="translated">Header表示邮件信息头中的键值对。</target>
        </trans-unit>
        <trans-unit id="80136957adb9f160575a77527ac0cff8fd0f4621" translate="yes" xml:space="preserve">
          <source>A Header represents the key-value pairs in an HTTP header.</source>
          <target state="translated">Header表示HTTP头中的键值对。</target>
        </trans-unit>
        <trans-unit id="5c29d59b81052100c179f70c4a67ff5067616d1b" translate="yes" xml:space="preserve">
          <source>A KeyValueExpr node represents (key : value) pairs in composite literals.</source>
          <target state="translated">KeyValueExpr节点表示复合字元中的(key:value)对。</target>
        </trans-unit>
        <trans-unit id="e8df5878bb0e127b0ade93df9aeeb99a31d76beb" translate="yes" xml:space="preserve">
          <source>A Kind represents the specific kind of type that a Type represents. The zero Kind is not a valid kind.</source>
          <target state="translated">Kind表示一个类型所代表的特定类型。零类型不是一个有效的类型。</target>
        </trans-unit>
        <trans-unit id="17ad9a62d94b60c7b9f57fee9752262c3aabb885" translate="yes" xml:space="preserve">
          <source>A Label represents a declared label. Labels don't have a type.</source>
          <target state="translated">标签代表一个声明的标签。标签没有类型。</target>
        </trans-unit>
        <trans-unit id="7c46c66dc93e06bd07a9972be686c8a8ccb6cbaf" translate="yes" xml:space="preserve">
          <source>A LabeledStmt node represents a labeled statement.</source>
          <target state="translated">一个LabeledStmt节点代表一个标签语句。</target>
        </trans-unit>
        <trans-unit id="fd993e336f0b681922292ae796d58612702dde0c" translate="yes" xml:space="preserve">
          <source>A LimitedReader reads from R but limits the amount of data returned to just N bytes. Each call to Read updates N to reflect the new amount remaining. Read returns EOF when N &amp;lt;= 0 or when the underlying R returns EOF.</source>
          <target state="translated">LimitedReader从R读取但将返回的数据量限制为N个字节。每次对Read的调用都会更新N以反映剩余的新数量。当N &amp;lt;= 0或基础R返回EOF时，Read返回EOF。</target>
        </trans-unit>
        <trans-unit id="ae901c0f03f89889b69882a9a6cb3cf314dfa370" translate="yes" xml:space="preserve">
          <source>A LineEntry is a row in a DWARF line table.</source>
          <target state="translated">LineEntry是DWARF行表中的一行。</target>
        </trans-unit>
        <trans-unit id="8b5b21c9cee22599568846d4db957ad7b4308aac" translate="yes" xml:space="preserve">
          <source>A LineFile is a source file referenced by a DWARF line table entry.</source>
          <target state="translated">LineFile是一个由DWARF行表条目引用的源文件。</target>
        </trans-unit>
        <trans-unit id="67c775091aa03ac7f074c1f43b66b9020494df47" translate="yes" xml:space="preserve">
          <source>A LineReader reads a sequence of LineEntry structures from a DWARF &quot;line&quot; section for a single compilation unit. LineEntries occur in order of increasing PC and each LineEntry gives metadata for the instructions from that LineEntry's PC to just before the next LineEntry's PC. The last entry will have its EndSequence field set.</source>
          <target state="translated">LineReader从DWARF &quot;行 &quot;部分读取一个编译单元的LineEntry结构序列。LineEntry按PC增加的顺序排列,每个LineEntry给出从该LineEntry的PC到下一个LineEntry的PC之前的指令元数据。最后一个条目将设置其EndSequence字段。</target>
        </trans-unit>
        <trans-unit id="732f9020aab568e65bf527050a453f3db3f95343" translate="yes" xml:space="preserve">
          <source>A LineReaderPos represents a position in a line table.</source>
          <target state="translated">LineReaderPos表示行表中的一个位置。</target>
        </trans-unit>
        <trans-unit id="2c1eec29b34e8edeb556d192a830487d8f9953c5" translate="yes" xml:space="preserve">
          <source>A LineTable is a data structure mapping program counters to line numbers.</source>
          <target state="translated">行表(LineTable)是一个将程序计数器映射到行号的数据结构。</target>
        </trans-unit>
        <trans-unit id="660bb86f96243fdd09f53c12cec51a542f1df102" translate="yes" xml:space="preserve">
          <source>A Listener is a generic network listener for stream-oriented protocols.</source>
          <target state="translated">监听器是面向流协议的通用网络监听器。</target>
        </trans-unit>
        <trans-unit id="4249368f5406670bcb59c0da03a6cead7099cb8f" translate="yes" xml:space="preserve">
          <source>A Load represents any Mach-O load command.</source>
          <target state="translated">负载代表任何Mach-O负载命令。</target>
        </trans-unit>
        <trans-unit id="a677c9d8c8b2e116341c7310869a6eddad18fb38" translate="yes" xml:space="preserve">
          <source>A LoadBytes is the uninterpreted bytes of a Mach-O load command.</source>
          <target state="translated">LoadBytes是Mach-O加载命令的未解释字节。</target>
        </trans-unit>
        <trans-unit id="e4e8327c6dd261427fb252f08dc735a316819bd2" translate="yes" xml:space="preserve">
          <source>A LoadCmd is a Mach-O load command.</source>
          <target state="translated">LoadCmd是一个Mach-O加载命令。</target>
        </trans-unit>
        <trans-unit id="de22bbb1e6bed3a2831a2b27a98bb521911db92a" translate="yes" xml:space="preserve">
          <source>A Location maps time instants to the zone in use at that time. Typically, the Location represents the collection of time offsets in use in a geographical area, such as CEST and CET for central Europe.</source>
          <target state="translated">地点 &quot;将时间即时映射到该时间使用的区域。通常情况下,&quot;地点 &quot;代表了一个地理区域内使用的时间偏移的集合,例如中欧的CEST和CET。</target>
        </trans-unit>
        <trans-unit id="33ab9763fb8fae6caa0aeaa939c5f11f4240c8a6" translate="yes" xml:space="preserve">
          <source>A Location maps time instants to the zone in use at that time. Typically, the Location represents the collection of time offsets in use in a geographical area. For many Locations the time offset varies depending on whether daylight savings time is in use at the time instant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e29abdad9487b902fd4f90738f02f8576cb3d7e" translate="yes" xml:space="preserve">
          <source>A Locker represents an object that can be locked and unlocked.</source>
          <target state="translated">一个Locker代表一个可以被锁定和解锁的对象。</target>
        </trans-unit>
        <trans-unit id="9dcd5e9754f765ea5f5fe27dc49c6d83fe4fae5b" translate="yes" xml:space="preserve">
          <source>A Logger represents an active logging object that generates lines of output to an io.Writer. Each logging operation makes a single call to the Writer's Write method. A Logger can be used simultaneously from multiple goroutines; it guarantees to serialize access to the Writer.</source>
          <target state="translated">Logger表示一个活动的日志对象,它可以生成一行输出到io.Writer。每个记录操作都会对Writer的Write方法进行一次调用。一个Logger可以从多个goroutine中同时使用;它保证了对Writer的序列化访问。</target>
        </trans-unit>
        <trans-unit id="487666de9e9a85c5d9356cc5cf81a3f898319e56" translate="yes" xml:space="preserve">
          <source>A Lookup function returns a reader to access package data for a given import path, or an error if no matching package is found.</source>
          <target state="translated">Lookup函数返回一个读取器来访问给定导入路径的包数据,如果没有找到匹配的包,则返回一个错误。</target>
        </trans-unit>
        <trans-unit id="d0c2fe60534ab38b9f6eff1d8a7f8316ae318de2" translate="yes" xml:space="preserve">
          <source>A MIMEHeader represents a MIME-style header mapping keys to sets of values.</source>
          <target state="translated">MIMEHeader表示一个MIME风格的头,将键值映射到值的集合。</target>
        </trans-unit>
        <trans-unit id="622676ae57a63cdd4f63cf5d044541da87280d44" translate="yes" xml:space="preserve">
          <source>A Map represents a map type.</source>
          <target state="translated">地图代表一种地图类型。</target>
        </trans-unit>
        <trans-unit id="7049fcfd9e1c276e6fb9a68c8637a2f14ff913c1" translate="yes" xml:space="preserve">
          <source>A MapIter is an iterator for ranging over a map. See Value.MapRange.</source>
          <target state="translated">MapIter是一个迭代器,用于对地图进行测距。参见Value.MapRange。</target>
        </trans-unit>
        <trans-unit id="3993e367e0709848b06c8418048cd1fd43363eb0" translate="yes" xml:space="preserve">
          <source>A MapType node represents a map type.</source>
          <target state="translated">一个MapType节点代表一个地图类型。</target>
        </trans-unit>
        <trans-unit id="79cb9a3cdf800543257c71ff431c6c3132c71d91" translate="yes" xml:space="preserve">
          <source>A MarshalerError represents an error from calling a MarshalJSON or MarshalText method.</source>
          <target state="translated">MarshalerError表示调用MarshalJSON或MarshalText方法的错误。</target>
        </trans-unit>
        <trans-unit id="50fe2f21d711b0be55d76651cc008c7c5ed77cab" translate="yes" xml:space="preserve">
          <source>A MemProfileRecord describes the live objects allocated by a particular call sequence (stack trace).</source>
          <target state="translated">一个MemProfileRecord描述了一个特定的调用序列(堆栈跟踪)分配的实时对象。</target>
        </trans-unit>
        <trans-unit id="38f79d159c830caf08bfe0d93506b8d5225e9aeb" translate="yes" xml:space="preserve">
          <source>A MemStats records statistics about the memory allocator.</source>
          <target state="translated">MemStats记录了内存分配器的统计数据。</target>
        </trans-unit>
        <trans-unit id="c5a8857d4132dff66ceaae33ce8008ebbeba4c4f" translate="yes" xml:space="preserve">
          <source>A Message represents a parsed mail message.</source>
          <target state="translated">一个信息代表一个已解析的邮件信息。</target>
        </trans-unit>
        <trans-unit id="1b2aa75f290a4b618dbec620b1977caee89888e1" translate="yes" xml:space="preserve">
          <source>A MethodSet is an ordered set of concrete or abstract (interface) methods; a method is a MethodVal selection, and they are ordered by ascending m.Obj().Id(). The zero value for a MethodSet is a ready-to-use empty method set.</source>
          <target state="translated">MethodSet是一组有序的具体或抽象(接口)方法,一个方法就是一个MethodVal选择,它们按升序m.Obj().Id()排列。MethodSet的零值是一个随时可用的空方法集。</target>
        </trans-unit>
        <trans-unit id="e93d6d78eddbae4e7fad7a6a0ca260a0ccf86c67" translate="yes" xml:space="preserve">
          <source>A Mode value is a set of flags (or 0). They control printing.</source>
          <target state="translated">模式值是一组标志(或 0)。它们控制打印。</target>
        </trans-unit>
        <trans-unit id="909b6ff9f9762f14bdb401dcb300258f57bf1c0e" translate="yes" xml:space="preserve">
          <source>A Mode value is a set of flags (or 0). They control the amount of source code parsed and other optional parser functionality.</source>
          <target state="translated">模式值是一组标志(或0)。它们控制源码解析的数量和其他可选解析器功能。</target>
        </trans-unit>
        <trans-unit id="acbe3072fb44246dc2f2f9161a57bc0fa3f9ebfd" translate="yes" xml:space="preserve">
          <source>A Month specifies a month of the year (January = 1, ...).</source>
          <target state="translated">一个月份指定了一年中的一个月份(一月=1,...)。</target>
        </trans-unit>
        <trans-unit id="2d2089df68698ac7feab420a1c41c5fc327b3dac" translate="yes" xml:space="preserve">
          <source>A Mutex is a mutual exclusion lock. The zero value for a Mutex is an unlocked mutex.</source>
          <target state="translated">互斥是一种互斥锁。互斥锁的零值是一个未锁定的互斥锁。</target>
        </trans-unit>
        <trans-unit id="7ea74f6825074782367f3065384e5f974abea778" translate="yes" xml:space="preserve">
          <source>A Mutex must not be copied after first use.</source>
          <target state="translated">Mutex在首次使用后不得复制。</target>
        </trans-unit>
        <trans-unit id="5d293e79fd0c88cc0ff4965a2c2b6a9bcc2c6ddd" translate="yes" xml:space="preserve">
          <source>A Name represents an XML name (Local) annotated with a name space identifier (Space). In tokens returned by Decoder.Token, the Space identifier is given as a canonical URL, not the short prefix used in the document being parsed.</source>
          <target state="translated">Name代表一个XML名称(Local),并注解了一个名称空间标识符(Space)。在 Decoder.Token 返回的 tokens 中,Space 标识符是以规范 URL 的形式给出的,而不是被解析的文档中使用的短前缀。</target>
        </trans-unit>
        <trans-unit id="d2a35c8ef18f02eb6678ba34eacf3ba11a633953" translate="yes" xml:space="preserve">
          <source>A Named represents a named type.</source>
          <target state="translated">Named代表一个命名类型。</target>
        </trans-unit>
        <trans-unit id="bad92076aa525c820eebcc24b8c3805b37fbfbe9" translate="yes" xml:space="preserve">
          <source>A NamedArg is a named argument. NamedArg values may be used as arguments to Query or Exec and bind to the corresponding named parameter in the SQL statement.</source>
          <target state="translated">NamedArg是一个命名参数。NamedArg的值可以作为Query或Exec的参数,并与SQL语句中相应的命名参数绑定。</target>
        </trans-unit>
        <trans-unit id="b11131cc805ed1ab6e3f58bee92b0fe2c5fa87f5" translate="yes" xml:space="preserve">
          <source>A Node is an element in the parse tree. The interface is trivial. The interface contains an unexported method so that only types local to this package can satisfy it.</source>
          <target state="translated">Node是解析树中的一个元素。该接口是琐碎的。该接口包含了一个未被导出的方法,因此只有这个包的本地类型才能满足它。</target>
        </trans-unit>
        <trans-unit id="37a72472f993ff8c5c76aed9654461ad595b3054" translate="yes" xml:space="preserve">
          <source>A Note represents a marked comment starting with &quot;MARKER(uid): note body&quot;. Any note with a marker of 2 or more upper case [A-Z] letters and a uid of at least one character is recognized. The &quot;:&quot; following the uid is optional. Notes are collected in the Package.Notes map indexed by the notes marker.</source>
          <target state="translated">注释表示以 &quot;MARKER(uid):note body &quot;开头的标记注释。任何带有2个或2个以上大写[A-Z]字母和至少一个字符的uid的注解都会被识别。uid后面的&quot;:&quot;是可选的。注释被收集在Package.Notes地图中,由注释标记索引。</target>
        </trans-unit>
        <trans-unit id="b87cef5499b5faeaad54c5a5f5e0e7973e06869e" translate="yes" xml:space="preserve">
          <source>A NumError records a failed conversion.</source>
          <target state="translated">一个NumError记录了一个失败的转换。</target>
        </trans-unit>
        <trans-unit id="11a76b8e336e5f32dd052064b8407eb081806fc1" translate="yes" xml:space="preserve">
          <source>A Number represents a JSON number literal.</source>
          <target state="translated">Number表示JSON数字文字。</target>
        </trans-unit>
        <trans-unit id="6df70dd442167e536bbc2f2719a1ff6771d9746a" translate="yes" xml:space="preserve">
          <source>A PB is used by RunParallel for running parallel benchmarks.</source>
          <target state="translated">一个PB被RunParallel用于运行并行基准。</target>
        </trans-unit>
        <trans-unit id="28cce0d7447d20a26f79cc7de8f2ffb5f6cea243" translate="yes" xml:space="preserve">
          <source>A Package describes a Go package.</source>
          <target state="translated">一个包描述了一个围棋包。</target>
        </trans-unit>
        <trans-unit id="02c5b186c0d9829ef0b314c7d197a99b06cc08aa" translate="yes" xml:space="preserve">
          <source>A Package describes the Go package found in a directory.</source>
          <target state="translated">包描述了在一个目录中找到的Go包。</target>
        </trans-unit>
        <trans-unit id="f7c6a2c88c2a925b1bb13b3770480bc4b1e2f8ba" translate="yes" xml:space="preserve">
          <source>A Package node represents a set of source files collectively building a Go package.</source>
          <target state="translated">一个包节点代表一组源文件,共同构建一个Go包。</target>
        </trans-unit>
        <trans-unit id="b80c490a82963253ea198d8237d2b88bfeb3fb8f" translate="yes" xml:space="preserve">
          <source>A ParenExpr node represents a parenthesized expression.</source>
          <target state="translated">ParenExpr节点表示一个括号化的表达式。</target>
        </trans-unit>
        <trans-unit id="32dd285c0ed7aac470e40a0806903efe3cbc3142" translate="yes" xml:space="preserve">
          <source>A ParseError is returned for parsing errors. Line numbers are 1-indexed and columns are 0-indexed.</source>
          <target state="translated">如果解析错误,将返回一个ParseError。行号为1-索引,列号为0-索引。</target>
        </trans-unit>
        <trans-unit id="48c4f65b46772ce507deaf319632461e9a6e8fdd" translate="yes" xml:space="preserve">
          <source>A ParseError is the error type of literal network address parsers.</source>
          <target state="translated">ParseError是文字网络地址解析器的错误类型。</target>
        </trans-unit>
        <trans-unit id="1d6824c6cf712cde9f9af9dccccc1da24901cb92" translate="yes" xml:space="preserve">
          <source>A Part represents a single part in a multipart body.</source>
          <target state="translated">一个部件代表一个多部件主体中的单个部件。</target>
        </trans-unit>
        <trans-unit id="dfbcc0e114727389cb8279668c19d2287bd264b1" translate="yes" xml:space="preserve">
          <source>A PipeReader is the read half of a pipe.</source>
          <target state="translated">一个PipeReader就是读取半个管道。</target>
        </trans-unit>
        <trans-unit id="9a19697f20ff89cf7a057258dbab42f40577989a" translate="yes" xml:space="preserve">
          <source>A PipeWriter is the write half of a pipe.</source>
          <target state="translated">PipeWriter是管子的写一半。</target>
        </trans-unit>
        <trans-unit id="acf94f04062b96beb777e42fe455475a158fb691" translate="yes" xml:space="preserve">
          <source>A Pipeline manages a pipelined in-order request/response sequence.</source>
          <target state="translated">管道管理一个管道内的顺序请求/响应序列。</target>
        </trans-unit>
        <trans-unit id="f6f05dedc14eb801e2b7f04687804ef382acb51d" translate="yes" xml:space="preserve">
          <source>A PkgName represents an imported Go package. PkgNames don't have a type.</source>
          <target state="translated">一个 PkgName 代表一个导入的 Go 包。PkgNames没有类型。</target>
        </trans-unit>
        <trans-unit id="607046c718991e5cb3d6ed4816dc42aea8d71afc" translate="yes" xml:space="preserve">
          <source>A Point is an X, Y coordinate pair. The axes increase right and down.</source>
          <target state="translated">点是一个X、Y坐标对。轴向右和向下增加。</target>
        </trans-unit>
        <trans-unit id="768a88aa5e8bc4257378b5f3eb8e284db1c2866f" translate="yes" xml:space="preserve">
          <source>A Pointer represents a pointer type.</source>
          <target state="translated">一个Pointer代表一个指针类型。</target>
        </trans-unit>
        <trans-unit id="7ed4f38838cc5e5bef3db6e4277a894844db4ea3" translate="yes" xml:space="preserve">
          <source>A Pool is a set of temporary objects that may be individually saved and retrieved.</source>
          <target state="translated">Pool是一组可以单独保存和检索的临时对象。</target>
        </trans-unit>
        <trans-unit id="9590c606b3343da60b471a73764edc1f4d765202" translate="yes" xml:space="preserve">
          <source>A Pool is safe for use by multiple goroutines simultaneously.</source>
          <target state="translated">A Pool是安全的,可供多个goroutine同时使用。</target>
        </trans-unit>
        <trans-unit id="5b2599ed95be6202d4666b2852d55218a76b0d8a" translate="yes" xml:space="preserve">
          <source>A Pool must not be copied after first use.</source>
          <target state="translated">池子在第一次使用后不得复制。</target>
        </trans-unit>
        <trans-unit id="d8fd9c4a12bc6fc10b6879d22ea87ecc71842c25" translate="yes" xml:space="preserve">
          <source>A PrivateKey represents an RSA key</source>
          <target state="translated">一个私钥代表一个RSA密钥</target>
        </trans-unit>
        <trans-unit id="7f7e88b0c38cbd0d62f840c3829e6e5bc2b140c6" translate="yes" xml:space="preserve">
          <source>A ProcInst represents an XML processing instruction of the form &amp;lt;?target inst?&amp;gt;</source>
          <target state="translated">ProcInst表示形式为&amp;lt;？target inst？&amp;gt;的XML处理指令。</target>
        </trans-unit>
        <trans-unit id="edd41d0f8525a0b5ab2821d1add949d3f2b61e7c" translate="yes" xml:space="preserve">
          <source>A Profile is a collection of stack traces showing the call sequences that led to instances of a particular event, such as allocation. Packages can create and maintain their own profiles; the most common use is for tracking resources that must be explicitly closed, such as files or network connections.</source>
          <target state="translated">Profile是堆栈痕迹的集合,显示了导致特定事件实例(如分配)的调用序列。包可以创建和维护自己的配置文件;最常见的用途是跟踪必须明确关闭的资源,如文件或网络连接。</target>
        </trans-unit>
        <trans-unit id="f7ad9992477be411f2a70474056f365c9cf6755d" translate="yes" xml:space="preserve">
          <source>A Profile's methods can be called from multiple goroutines simultaneously.</source>
          <target state="translated">一个Profile的方法可以从多个goroutine中同时调用。</target>
        </trans-unit>
        <trans-unit id="36aae9f1173dd65c1ae807cca4a4b207b2c93026" translate="yes" xml:space="preserve">
          <source>A Prog is a compiled regular expression program.</source>
          <target state="translated">Prog是一个编译的正则表达式程序。</target>
        </trans-unit>
        <trans-unit id="77c6b957fd156c74c873357c407dbfd5609bc6a5" translate="yes" xml:space="preserve">
          <source>A Prog represents a single ELF program header in an ELF binary.</source>
          <target state="translated">一个Prog表示ELF二进制中的一个ELF程序头。</target>
        </trans-unit>
        <trans-unit id="d3afa7d31fec2d457dace7f415ebe339b6173396" translate="yes" xml:space="preserve">
          <source>A ProgHeader represents a single ELF program header.</source>
          <target state="translated">一个ProgHeader代表一个ELF程序头。</target>
        </trans-unit>
        <trans-unit id="a668757fb0cd173dc1eca56fe18304f67be91ed0" translate="yes" xml:space="preserve">
          <source>A ProtocolError describes a protocol violation such as an invalid response or a hung-up connection.</source>
          <target state="translated">协议错误(ProtocolError)描述了一种协议违规行为,如无效响应或挂起连接。</target>
        </trans-unit>
        <trans-unit id="f6b39dc81130cc794cc964502f8f09dded02f3b0" translate="yes" xml:space="preserve">
          <source>A PtrType represents a pointer type.</source>
          <target state="translated">一个PtrType代表一个指针类型。</target>
        </trans-unit>
        <trans-unit id="dcb21686aafe13c9342b5eb4d71053646debb6a6" translate="yes" xml:space="preserve">
          <source>A PublicKey represents the public part of an RSA key.</source>
          <target state="translated">PublicKey代表RSA密钥的公开部分。</target>
        </trans-unit>
        <trans-unit id="6f4e8d1859ff0d3e7c1427e6e64066e900cad3cb" translate="yes" xml:space="preserve">
          <source>A QualType represents a type that has the C/C++ &quot;const&quot;, &quot;restrict&quot;, or &quot;volatile&quot; qualifier.</source>
          <target state="translated">QualType表示一个具有C/C++&quot;const&quot;、&quot;restrict &quot;或 &quot;volatile &quot;限定符的类型。</target>
        </trans-unit>
        <trans-unit id="ebdeaadb141050dca0205834e1f70052f8794133" translate="yes" xml:space="preserve">
          <source>A Qualifier controls how named package-level objects are printed in calls to TypeString, ObjectString, and SelectionString.</source>
          <target state="translated">一个限定符控制在调用TypeString、ObjectString和SelectionString时如何打印命名的包级对象。</target>
        </trans-unit>
        <trans-unit id="9938b28874a070149d52e6d6227a0422577f7a32" translate="yes" xml:space="preserve">
          <source>A RWMutex is a reader/writer mutual exclusion lock. The lock can be held by an arbitrary number of readers or a single writer. The zero value for a RWMutex is an unlocked mutex.</source>
          <target state="translated">RWMutex是一个读写器互斥锁。该锁可以由任意数量的读取器或单个写入器持有。RWMutex的零值是一个未锁定的互斥锁。</target>
        </trans-unit>
        <trans-unit id="293a28f976ca91641319ee6ab2cb3a59843417d8" translate="yes" xml:space="preserve">
          <source>A RWMutex must not be copied after first use.</source>
          <target state="translated">一个RWMutex在第一次使用后不能被复制。</target>
        </trans-unit>
        <trans-unit id="4a44a812184753ee800df2d3024080a1d07ae0b6" translate="yes" xml:space="preserve">
          <source>A Rand is a source of random numbers.</source>
          <target state="translated">兰德是随机数的来源。</target>
        </trans-unit>
        <trans-unit id="a6beab053e966a50e6a7d98a758b86f986af4670" translate="yes" xml:space="preserve">
          <source>A RangeStmt represents a for statement with a range clause.</source>
          <target state="translated">RangeStmt表示一个带有范围子句的for语句。</target>
        </trans-unit>
        <trans-unit id="5fca0333648aed85f5f684d09865e5a2e91742f5" translate="yes" xml:space="preserve">
          <source>A Rat represents a quotient a/b of arbitrary precision. The zero value for a Rat represents the value 0.</source>
          <target state="translated">一个Rat表示一个任意精度的商a/b。一个Rat的零值代表值0。</target>
        </trans-unit>
        <trans-unit id="315d29aa160f5e0113bda9fb7a05adf019e99e29" translate="yes" xml:space="preserve">
          <source>A RawConn is a raw network connection.</source>
          <target state="translated">RawConn是一个原始网络连接。</target>
        </trans-unit>
        <trans-unit id="1eecc4b388581b7f5af4d0ab92eb3236267e13d7" translate="yes" xml:space="preserve">
          <source>A RawValue represents an undecoded ASN.1 object.</source>
          <target state="translated">RawValue代表一个未编码的ASN.1对象。</target>
        </trans-unit>
        <trans-unit id="1fe251d5b99328d7ccb132b5e39275c6ea7e2859" translate="yes" xml:space="preserve">
          <source>A ReadError reports an error encountered while reading input.</source>
          <target state="translated">ReadError报告读取输入时遇到的错误。</target>
        </trans-unit>
        <trans-unit id="ce0546f89447c6257999da2fc59e1b4d0147b988" translate="yes" xml:space="preserve">
          <source>A Reader allows reading Entry structures from a DWARF &amp;ldquo;info&amp;rdquo; section. The Entry structures are arranged in a tree. The Reader's Next function return successive entries from a pre-order traversal of the tree. If an entry has children, its Children field will be true, and the children follow, terminated by an Entry with Tag 0.</source>
          <target state="translated">读取器允许从DWARF&amp;ldquo;信息&amp;rdquo;部分读取条目结构。Entry结构排列在树中。Reader的Ne​​xt函数从树的预遍历中返回连续的条目。如果条目具有子项，则其&amp;ldquo;子项&amp;rdquo;字段为true，并且子项跟随，以带有标签0的条目终止。</target>
        </trans-unit>
        <trans-unit id="e809231f8a76ae01fe2ed56c6d3370831ff40ccc" translate="yes" xml:space="preserve">
          <source>A Reader implements convenience methods for reading requests or responses from a text protocol network connection.</source>
          <target state="translated">Reader实现了从文本协议网络连接中读取请求或响应的方便方法。</target>
        </trans-unit>
        <trans-unit id="1a71eb177c7cde85aefa079833b1150b094f2eaa" translate="yes" xml:space="preserve">
          <source>A Reader implements the io.Reader, io.ReaderAt, io.Seeker, io.WriterTo, io.ByteScanner, and io.RuneScanner interfaces by reading from a string. The zero value for Reader operates like a Reader of an empty string.</source>
          <target state="translated">一个Reader通过从一个字符串中读取实现了io.Reader,io.ReaderAt,io.Seeker,io.WriterTo,io.ByteScanner和io.RuneScanner接口。Reader的零值就像一个空字符串的Reader一样操作。</target>
        </trans-unit>
        <trans-unit id="b153ea88d2a4e327aa4d80158226897a894e3c2a" translate="yes" xml:space="preserve">
          <source>A Reader implements the io.Reader, io.ReaderAt, io.WriterTo, io.Seeker, io.ByteScanner, and io.RuneScanner interfaces by reading from a byte slice. Unlike a Buffer, a Reader is read-only and supports seeking. The zero value for Reader operates like a Reader of an empty slice.</source>
          <target state="translated">一个Reader通过从一个字节片断读取实现了io.Reader,io.ReaderAt,io.WriterTo,io.Seeker,io.ByteScanner,和io.RuneScanner接口。与Buffer不同,Reader是只读的,并且支持寻道。Reader的零值就像一个空片断的Reader。</target>
        </trans-unit>
        <trans-unit id="b70395118bec2588dcb78aa1e8af11b79076bd1c" translate="yes" xml:space="preserve">
          <source>A Reader is an io.Reader that can be read to retrieve uncompressed data from a gzip-format compressed file.</source>
          <target state="translated">Reader是一个io.Reader,可以从gzip格式的压缩文件中读取未压缩的数据。</target>
        </trans-unit>
        <trans-unit id="6574274b38b0f064ff925e7d46ed95bf437111cb" translate="yes" xml:space="preserve">
          <source>A Reader reads records from a CSV-encoded file.</source>
          <target state="translated">阅读器从CSV编码的文件中读取记录。</target>
        </trans-unit>
        <trans-unit id="08a6e31825ec2c6300d4782fb0ecf058c691b2e5" translate="yes" xml:space="preserve">
          <source>A Rectangle contains the points with Min.X &amp;lt;= X &amp;lt; Max.X, Min.Y &amp;lt;= Y &amp;lt; Max.Y. It is well-formed if Min.X &amp;lt;= Max.X and likewise for Y. Points are always well-formed. A rectangle's methods always return well-formed outputs for well-formed inputs.</source>
          <target state="translated">矩形包含最小X &amp;lt;= X &amp;lt;最大X，最小Y &amp;lt;= Y &amp;lt;最大Y的点。如果Min.X &amp;lt;= Max.X，则格式正确，Y也是如此。点始终格式正确。矩形的方法始终为格式正确的输入返回格式良好的输出。</target>
        </trans-unit>
        <trans-unit id="962040a6acd2d013b3cda593f3034f3a6e474cf7" translate="yes" xml:space="preserve">
          <source>A Rectangle is also an Image whose bounds are the rectangle itself. At returns color.Opaque for points in the rectangle and color.Transparent otherwise.</source>
          <target state="translated">矩形也是一个图像,它的边界就是矩形本身。矩形中的点返回color.Opaque,否则返回color.Transparent。</target>
        </trans-unit>
        <trans-unit id="2b5c4eab8e85410a86bdda5dd0182e066f957435" translate="yes" xml:space="preserve">
          <source>A Regexp is a node in a regular expression syntax tree.</source>
          <target state="translated">Regexp是正则表达式语法树中的一个节点。</target>
        </trans-unit>
        <trans-unit id="7ab3983fd4df5bd9eb6fbef83870bc471fcc712a" translate="yes" xml:space="preserve">
          <source>A Reloc represents a Mach-O relocation.</source>
          <target state="translated">Reloc代表Mach-O搬迁。</target>
        </trans-unit>
        <trans-unit id="067dded24908e2b71937b6360c614e63e5a89809" translate="yes" xml:space="preserve">
          <source>A Request represents an HTTP request received by a server or to be sent by a client.</source>
          <target state="translated">请求表示服务器接收到的或客户端要发送的HTTP请求。</target>
        </trans-unit>
        <trans-unit id="9e19cc3384dc7e2b431205075ec657c82d42a386" translate="yes" xml:space="preserve">
          <source>A Resolver looks up names and numbers.</source>
          <target state="translated">解析器可以查询姓名和数字。</target>
        </trans-unit>
        <trans-unit id="7410206ba9c0a6090136ffb7158eee5593d03484" translate="yes" xml:space="preserve">
          <source>A ResponseWriter interface is used by an HTTP handler to construct an HTTP response.</source>
          <target state="translated">一个ResponseWriter接口被HTTP处理程序用来构造HTTP响应。</target>
        </trans-unit>
        <trans-unit id="ace923e0c585e748ba7f88a0368066757a465f2f" translate="yes" xml:space="preserve">
          <source>A ResponseWriter may not be used after the Handler.ServeHTTP method has returned.</source>
          <target state="translated">在Handler.ServeHTTP方法返回后,不得使用ResponseWriter。</target>
        </trans-unit>
        <trans-unit id="2ac628cf85fa1a2f24b07d813066e77d55459bb7" translate="yes" xml:space="preserve">
          <source>A Result summarizes an executed SQL command.</source>
          <target state="translated">结果是对执行的SQL命令的总结。</target>
        </trans-unit>
        <trans-unit id="c7bc644e767da0cf2307a7193ba0f77e968aacb8" translate="yes" xml:space="preserve">
          <source>A ReturnStmt node represents a return statement.</source>
          <target state="translated">一个ReturnStmt节点代表一个返回语句。</target>
        </trans-unit>
        <trans-unit id="ae584cddb6e2177562bbac06546bb6633cf3019c" translate="yes" xml:space="preserve">
          <source>A Ring is an element of a circular list, or ring. Rings do not have a beginning or end; a pointer to any ring element serves as reference to the entire ring. Empty rings are represented as nil Ring pointers. The zero value for a Ring is a one-element ring with a nil Value.</source>
          <target state="translated">环是一个循环列表的元素,或者说环。环没有开头或结尾,指向任何环元素的指针都可以作为整个环的引用。空环表示为nil Ring指针。Ring的零值是一个具有nil Value的单元素环。</target>
        </trans-unit>
        <trans-unit id="a6d02af23b0348ce707674db889668b02af5f81f" translate="yes" xml:space="preserve">
          <source>A RoundTripper must be safe for concurrent use by multiple goroutines.</source>
          <target state="translated">一个RoundTripper必须是安全的,可以被多个goroutine同时使用。</target>
        </trans-unit>
        <trans-unit id="45bdd1ec7ab84bc9a9dd66a47c77c47f5715b87c" translate="yes" xml:space="preserve">
          <source>A Rpath represents a Mach-O rpath command.</source>
          <target state="translated">一个Rpath代表一个Mach-O rpath命令。</target>
        </trans-unit>
        <trans-unit id="15e64f8a4c2bf9029f12ea9d5e18a15877b7259c" translate="yes" xml:space="preserve">
          <source>A RpathCmd is a Mach-O rpath command.</source>
          <target state="translated">RpathCmd是一个Mach-O rpath命令。</target>
        </trans-unit>
        <trans-unit id="595b91253eb5007d2507eef2c21f6da710950881" translate="yes" xml:space="preserve">
          <source>A Scanner holds the scanner's internal state while processing a given text. It can be allocated as part of another data structure but must be initialized via Init before use.</source>
          <target state="translated">扫描仪在处理给定的文本时保存扫描仪的内部状态。它可以作为另一个数据结构的一部分进行分配,但在使用前必须通过Init初始化。</target>
        </trans-unit>
        <trans-unit id="1c32b624023b90bc977bdef0e2337de1ae290d39" translate="yes" xml:space="preserve">
          <source>A Scanner implements reading of Unicode characters and tokens from an io.Reader.</source>
          <target state="translated">Scanner实现了从io.Reader中读取Unicode字符和标记。</target>
        </trans-unit>
        <trans-unit id="c61b7eab5a0a8103327245dad118019da84e7373" translate="yes" xml:space="preserve">
          <source>A Scope maintains a set of objects and links to its containing (parent) and contained (children) scopes. Objects may be inserted and looked up by name. The zero value for Scope is a ready-to-use empty scope.</source>
          <target state="translated">一个范围维护着一组对象,并与其包含的(父)和包含的(子)范围相链接。对象可以通过名称插入和查找。Scope的零值是一个随时可用的空作用域。</target>
        </trans-unit>
        <trans-unit id="5dea048da594f1517d32f220dcf473582500285f" translate="yes" xml:space="preserve">
          <source>A Scope maintains the set of named language entities declared in the scope and a link to the immediately surrounding (outer) scope.</source>
          <target state="translated">一个Scope维护着在该作用域中声明的命名语言实体的集合,以及与紧邻的(外部)作用域的链接。</target>
        </trans-unit>
        <trans-unit id="183af69f58c3ed305371155a329e5a16e682146d" translate="yes" xml:space="preserve">
          <source>A Section represents a single section in a Plan 9 a.out file.</source>
          <target state="translated">节代表Plan 9 a.out文件中的单个节。</target>
        </trans-unit>
        <trans-unit id="48d020e310b3bb2149d4b253ff0bb1536d07bfa4" translate="yes" xml:space="preserve">
          <source>A Section represents a single section in an ELF file.</source>
          <target state="translated">节代表ELF文件中的一个单一节。</target>
        </trans-unit>
        <trans-unit id="3fa1bd710855f38346943cd85be2ea9687a123fb" translate="yes" xml:space="preserve">
          <source>A Section32 is a 32-bit Mach-O section header.</source>
          <target state="translated">Section32是一个32位的Mach-O节头。</target>
        </trans-unit>
        <trans-unit id="471e980a91ca2daa3de25530d4f089577d149d78" translate="yes" xml:space="preserve">
          <source>A Section64 is a 64-bit Mach-O section header.</source>
          <target state="translated">Section64是一个64位的Mach-O节头。</target>
        </trans-unit>
        <trans-unit id="781b43f0370a047bcf6b158f7205d75f7f66770a" translate="yes" xml:space="preserve">
          <source>A SectionHeader represents a single ELF section header.</source>
          <target state="translated">一个SectionHeader代表一个ELF节头。</target>
        </trans-unit>
        <trans-unit id="07693bb5a841d984aad8deaaf713cc85716d2183" translate="yes" xml:space="preserve">
          <source>A SectionHeader represents a single Plan 9 a.out section header. This structure doesn't exist on-disk, but eases navigation through the object file.</source>
          <target state="translated">一个SectionHeader表示一个单一的Plan 9 a.out节头。这个结构在磁盘上并不存在,但便于在对象文件中导航。</target>
        </trans-unit>
        <trans-unit id="dd1c503cb0621b37172392fa6c3e6e663892bdb9" translate="yes" xml:space="preserve">
          <source>A Segment represents a Mach-O 32-bit or 64-bit load segment command.</source>
          <target state="translated">一个Segment代表一个Mach-O 32位或64位的加载段命令。</target>
        </trans-unit>
        <trans-unit id="18f470aa3a2494edbc8228ed690b8ca00e2cd060" translate="yes" xml:space="preserve">
          <source>A Segment32 is a 32-bit Mach-O segment load command.</source>
          <target state="translated">Segment32是一个32位的Mach-O段加载命令。</target>
        </trans-unit>
        <trans-unit id="b49f656e7f0d6c4de103c56d20f5a3e5d46474b4" translate="yes" xml:space="preserve">
          <source>A Segment64 is a 64-bit Mach-O segment load command.</source>
          <target state="translated">Segment64是一个64位的Mach-O段加载命令。</target>
        </trans-unit>
        <trans-unit id="8c1bca7547e5328a2c0e7d510860150c5b02204d" translate="yes" xml:space="preserve">
          <source>A SegmentHeader is the header for a Mach-O 32-bit or 64-bit load segment command.</source>
          <target state="translated">SegmentHeader是Mach-O 32位或64位加载段命令的头。</target>
        </trans-unit>
        <trans-unit id="4d907e1938e53c3566dbf156d7cc0eaeb9f4968d" translate="yes" xml:space="preserve">
          <source>A SelectCase describes a single case in a select operation. The kind of case depends on Dir, the communication direction.</source>
          <target state="translated">一个SelectCase描述了一个选择操作中的单一情况。case的种类取决于Dir,即通信方向。</target>
        </trans-unit>
        <trans-unit id="a5415c574177ffe2984e71be71022c8ec6f1d638" translate="yes" xml:space="preserve">
          <source>A SelectDir describes the communication direction of a select case.</source>
          <target state="translated">一个SelectDir描述了选案的通信方向。</target>
        </trans-unit>
        <trans-unit id="2ba8168e2f95a5a9fb4142454ff98456bc69b2ed" translate="yes" xml:space="preserve">
          <source>A SelectStmt node represents a select statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cbf8ec346b8e7b76dd78b3b87697c7317615faf" translate="yes" xml:space="preserve">
          <source>A Selection describes a selector expression x.f. For the declarations:</source>
          <target state="translated">Selection描述了一个选择器表达式x.f.的声明。</target>
        </trans-unit>
        <trans-unit id="35b647fb865db0783355629fb40dee0621ff1bfa" translate="yes" xml:space="preserve">
          <source>A SelectorExpr node represents an expression followed by a selector.</source>
          <target state="translated">一个SelectorExpr节点代表一个表达式,后面跟着一个选择器。</target>
        </trans-unit>
        <trans-unit id="639e64492ddcf47a6e3a3dbf49f424478ccc6fd1" translate="yes" xml:space="preserve">
          <source>A SendStmt node represents a send statement.</source>
          <target state="translated">一个SendStmt节点代表一条发送语句。</target>
        </trans-unit>
        <trans-unit id="0a812544b1079cbac724176753c97cbdce588634" translate="yes" xml:space="preserve">
          <source>A Server defines parameters for running an HTTP server. The zero value for Server is a valid configuration.</source>
          <target state="translated">服务器定义了运行HTTP服务器的参数。服务器的零值是一个有效的配置。</target>
        </trans-unit>
        <trans-unit id="8bbd12c651b1aff76a953db8334d88ca84465ea1" translate="yes" xml:space="preserve">
          <source>A Server is an HTTP server listening on a system-chosen port on the local loopback interface, for use in end-to-end HTTP tests.</source>
          <target state="translated">服务器是指在系统选择的本地环回接口端口上监听的HTTP服务器,用于端到端HTTP测试。</target>
        </trans-unit>
        <trans-unit id="aaf263fed591626847e1114341fce50da6dde5fb" translate="yes" xml:space="preserve">
          <source>A ServerCodec implements reading of RPC requests and writing of RPC responses for the server side of an RPC session. The server calls ReadRequestHeader and ReadRequestBody in pairs to read requests from the connection, and it calls WriteResponse to write a response back. The server calls Close when finished with the connection. ReadRequestBody may be called with a nil argument to force the body of the request to be read and discarded. See NewClient's comment for information about concurrent access.</source>
          <target state="translated">ServerCodec为RPC会话的服务器端实现读取RPC请求和写入RPC响应。服务器成对地调用ReadRequestHeader和ReadRequestBody从连接中读取请求,并调用WriteResponse回写响应。当完成连接时,服务器会调用Close。ReadRequestBody可以用一个nil参数来调用,以强制读取并丢弃请求的主体。关于并发访问的信息请参见NewClient的注释。</target>
        </trans-unit>
        <trans-unit id="38c132ba907f3f5c1ee1b2d34f64a031db7fb85b" translate="yes" xml:space="preserve">
          <source>A SetupError is the result of an error in the way that check is being used, independent of the functions being tested.</source>
          <target state="translated">SetupError是检查使用方式错误的结果,与被测试的函数无关。</target>
        </trans-unit>
        <trans-unit id="0aaa1aa571361e67fd65645ce946b3e93ab82465" translate="yes" xml:space="preserve">
          <source>A Signal is a number describing a process signal. It implements the os.Signal interface.</source>
          <target state="translated">Signal 是一个描述过程信号的数字。它实现了os.Signal接口。</target>
        </trans-unit>
        <trans-unit id="04aa060d55406e6823576f5f8a2fed5ce02d26bc" translate="yes" xml:space="preserve">
          <source>A Signal represents an operating system signal. The usual underlying implementation is operating system-dependent: on Unix it is syscall.Signal.</source>
          <target state="translated">Signal代表一个操作系统信号。通常的底层实现取决于操作系统:在Unix上是syscall.Signal。</target>
        </trans-unit>
        <trans-unit id="e443d13756dc18de92ff330dd034a22130131309" translate="yes" xml:space="preserve">
          <source>A Signature represents a (non-builtin) function or method type. The receiver is ignored when comparing signatures for identity.</source>
          <target state="translated">一个签名代表一个(非内置的)函数或方法类型。当比较签名的身份时,接收者被忽略。</target>
        </trans-unit>
        <trans-unit id="4dded7ba2e7f9fa90c63253a6511fa6ac894ca85" translate="yes" xml:space="preserve">
          <source>A Slice represents a slice type.</source>
          <target state="translated">一个Slice代表一个分片类型。</target>
        </trans-unit>
        <trans-unit id="0cc61dfcd6baa6831ffb27354e736c63b5b553ad" translate="yes" xml:space="preserve">
          <source>A SliceExpr node represents an expression followed by slice indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c662a701f4e4fc76cf429b1959cb955efb9d925" translate="yes" xml:space="preserve">
          <source>A Source represents a source of uniformly-distributed pseudo-random int64 values in the range [0, 1&amp;lt;&amp;lt;63).</source>
          <target state="translated">Source表示在[0，1 &amp;lt;&amp;lt; 63）范围内均匀分布的伪随机int64值的源。</target>
        </trans-unit>
        <trans-unit id="cf9e74a9757b6a7e7e07d6bcbab6c27faa8392c2" translate="yes" xml:space="preserve">
          <source>A Source64 is a Source that can also generate uniformly-distributed pseudo-random uint64 values in the range [0, 1&amp;lt;&amp;lt;64) directly. If a Rand r's underlying Source s implements Source64, then r.Uint64 returns the result of one call to s.Uint64 instead of making two calls to s.Int63.</source>
          <target state="translated">Source64是一种Source，它也可以直接生成范围为[0，1 &amp;lt;&amp;lt; 64）的均匀分布的伪随机uint64值。如果Rand r的基础Source实现了Source64，则r.Uint64返回对s.Uint64的一次调用的结果，而不是对s.Int63的两次调用。</target>
        </trans-unit>
        <trans-unit id="cd32d7d89b2a30a05c1bb5eebdbd13fc02c7ae72" translate="yes" xml:space="preserve">
          <source>A StackRecord describes a single execution stack.</source>
          <target state="translated">一个StackRecord描述了一个单一的执行栈。</target>
        </trans-unit>
        <trans-unit id="b0008c9536d181c46b815624f062ebf9594778bc" translate="yes" xml:space="preserve">
          <source>A StarExpr node represents an expression of the form &quot;*&quot; Expression. Semantically it could be a unary &quot;*&quot; expression, or a pointer type.</source>
          <target state="translated">StarExpr节点表示一个 &quot;*&quot;Expression形式的表达式。从语义上讲,它可以是一个单调的 &quot;*&quot;表达式,也可以是一个指针类型。</target>
        </trans-unit>
        <trans-unit id="c32c7cbdc0d7be886e97676c71afe750a62dcc10" translate="yes" xml:space="preserve">
          <source>A StartElement represents an XML start element.</source>
          <target state="translated">StartElement表示一个XML起始元素。</target>
        </trans-unit>
        <trans-unit id="ea14341705e92c45b1e240d763674f51e6d52411" translate="yes" xml:space="preserve">
          <source>A Stream represents a stream cipher.</source>
          <target state="translated">一个流代表一个流密码。</target>
        </trans-unit>
        <trans-unit id="7b669677d01d549cc1c73f158a189264271f5702" translate="yes" xml:space="preserve">
          <source>A Struct represents a struct type.</source>
          <target state="translated">Struct代表一种结构类型。</target>
        </trans-unit>
        <trans-unit id="28e97007759f43396752d2c0cba6cdef18c34c87" translate="yes" xml:space="preserve">
          <source>A StructField describes a single field in a struct.</source>
          <target state="translated">StructField描述的是一个结构中的单个字段。</target>
        </trans-unit>
        <trans-unit id="6ead7ec43f94a3a8ab253c977717cf4787ddce82" translate="yes" xml:space="preserve">
          <source>A StructField represents a field in a struct, union, or C++ class type.</source>
          <target state="translated">StructField表示结构体、联合体或C++类类型中的一个字段。</target>
        </trans-unit>
        <trans-unit id="e939c47706fd4781a8efbe363efe9716fe2daf90" translate="yes" xml:space="preserve">
          <source>A StructTag is the tag string in a struct field.</source>
          <target state="translated">StructTag是结构域中的标签字符串。</target>
        </trans-unit>
        <trans-unit id="8da8d40653f50508ed698ba3d6f35b64ae2e53e8" translate="yes" xml:space="preserve">
          <source>A StructType node represents a struct type.</source>
          <target state="translated">StructType节点表示一个结构类型。</target>
        </trans-unit>
        <trans-unit id="fea2245244b33d39ec55d7990a22c73eb242ee3a" translate="yes" xml:space="preserve">
          <source>A StructType represents a struct, union, or C++ class type.</source>
          <target state="translated">一个StructType代表一个结构体、联合体或C++类类型。</target>
        </trans-unit>
        <trans-unit id="29e34b1f6b5269b0f812703eca0e45a915de37c5" translate="yes" xml:space="preserve">
          <source>A StructuralError is returned when the bzip2 data is found to be syntactically invalid.</source>
          <target state="translated">当发现bzip2数据在语法上无效时,将返回一个StructuralError。</target>
        </trans-unit>
        <trans-unit id="67e45ed1c74af0e85d151af6cd24db62c07cd291" translate="yes" xml:space="preserve">
          <source>A StructuralError suggests that the ASN.1 data is valid, but the Go type which is receiving it doesn't match.</source>
          <target state="translated">结构性错误表明ASN.1数据有效,但接收数据的围棋类型不匹配。</target>
        </trans-unit>
        <trans-unit id="3db304c4567f1e28ed11e586a2eabe4ea9391a66" translate="yes" xml:space="preserve">
          <source>A SwitchStmt node represents an expression switch statement.</source>
          <target state="translated">SwitchStmt节点代表一个表达式切换语句。</target>
        </trans-unit>
        <trans-unit id="1015b6c5506bb94ff4d458f55084fdca10ca635b" translate="yes" xml:space="preserve">
          <source>A Sym represents a single symbol table entry.</source>
          <target state="translated">一个Sym代表一个单一的符号表条目。</target>
        </trans-unit>
        <trans-unit id="98cd40470d9a8f6a0f6bdd00fde0756e94d9ebd2" translate="yes" xml:space="preserve">
          <source>A Symbol is a Mach-O 32-bit or 64-bit symbol table entry.</source>
          <target state="translated">符号是Mach-O的32位或64位符号表条目。</target>
        </trans-unit>
        <trans-unit id="a671a2dbcf33c7f008c2e71b0630c5384653e90b" translate="yes" xml:space="preserve">
          <source>A Symbol is a pointer to a variable or function.</source>
          <target state="translated">符号是指向一个变量或函数的指针。</target>
        </trans-unit>
        <trans-unit id="789708f9c12833d6c1014d903e31cb12724b33b8" translate="yes" xml:space="preserve">
          <source>A Symbol represents an entry in a Plan 9 a.out symbol table section.</source>
          <target state="translated">符号代表计划9 a.out符号表部分的一个条目。</target>
        </trans-unit>
        <trans-unit id="95c21f4091681c4ef2bad327d6377640dd105e88" translate="yes" xml:space="preserve">
          <source>A Symbol represents an entry in an ELF symbol table section.</source>
          <target state="translated">符号代表ELF符号表部分的一个条目。</target>
        </trans-unit>
        <trans-unit id="bd868f6dc8223d50a3f572a145afcdd64d4e3ae6" translate="yes" xml:space="preserve">
          <source>A Symtab represents a Mach-O symbol table command.</source>
          <target state="translated">一个Symtab代表一个Mach-O符号表命令。</target>
        </trans-unit>
        <trans-unit id="0fd4f1bb011d721fb420bad06209aa869812c00d" translate="yes" xml:space="preserve">
          <source>A SymtabCmd is a Mach-O symbol table command.</source>
          <target state="translated">SymtabCmd是一个Mach-O符号表命令。</target>
        </trans-unit>
        <trans-unit id="ef2a77a6f406a105103b5a2c79bd38d08956b562" translate="yes" xml:space="preserve">
          <source>A SyntaxError is a description of a JSON syntax error.</source>
          <target state="translated">SyntaxError是对JSON语法错误的描述。</target>
        </trans-unit>
        <trans-unit id="7ce23a19325afbda7b493c3ee485c5402ddf0cba" translate="yes" xml:space="preserve">
          <source>A SyntaxError represents a syntax error in the XML input stream.</source>
          <target state="translated">SyntaxError表示XML输入流中的语法错误。</target>
        </trans-unit>
        <trans-unit id="d6563aa54653e994476c1c43bdfb9b8d0eb52cc1" translate="yes" xml:space="preserve">
          <source>A SyntaxError suggests that the ASN.1 data is invalid.</source>
          <target state="translated">语法错误表明ASN.1数据无效。</target>
        </trans-unit>
        <trans-unit id="94dc0c91ffcffa6687bf49f7b86aa6e830c1c493" translate="yes" xml:space="preserve">
          <source>A Tag is the classification (the type) of an Entry.</source>
          <target state="translated">标签是一个条目的分类(类型)。</target>
        </trans-unit>
        <trans-unit id="ef54809c1f809bbc81d739791141ba6bfe3195c9" translate="yes" xml:space="preserve">
          <source>A TagPathError represents an error in the unmarshaling process caused by the use of field tags with conflicting paths.</source>
          <target state="translated">TagPathError 表示由于使用了路径冲突的字段标签而导致的解嵌过程中的错误。</target>
        </trans-unit>
        <trans-unit id="cfb867f01ef9d999c5c50506e719de9fc48804c0" translate="yes" xml:space="preserve">
          <source>A Thread is a Mach-O thread state command.</source>
          <target state="translated">线程是一个马赫奥的线程状态命令。</target>
        </trans-unit>
        <trans-unit id="3dbde58d5e793d50fa510fe7375c9fb3e32dfb16" translate="yes" xml:space="preserve">
          <source>A Ticker holds a channel that delivers `ticks' of a clock at intervals.</source>
          <target state="translated">一个Ticker拥有一个通道,每隔一段时间提供一个时钟的 &quot;ticks&quot;。</target>
        </trans-unit>
        <trans-unit id="7f209a91b1ce9aba11e7fca4188986d7bf919dd4" translate="yes" xml:space="preserve">
          <source>A Time represents an instant in time with nanosecond precision.</source>
          <target state="translated">一个时间代表的是时间的瞬间,精度为纳秒。</target>
        </trans-unit>
        <trans-unit id="3b9cb2430925b635deca781b19b6624315647aa5" translate="yes" xml:space="preserve">
          <source>A Time value can be used by multiple goroutines simultaneously except that the methods GobDecode, UnmarshalBinary, UnmarshalJSON and UnmarshalText are not concurrency-safe.</source>
          <target state="translated">一个Time值可以被多个goroutine同时使用,除了GobDecode、UnmarshalBinary、UnmarshalJSON和UnmarshalText方法不是并发安全的。</target>
        </trans-unit>
        <trans-unit id="cdc605aba7b8cec3ee2c08a379778b18a8f897da" translate="yes" xml:space="preserve">
          <source>A Token holds a value of one of these types:</source>
          <target state="translated">一个代币拥有这些类型中的一个值。</target>
        </trans-unit>
        <trans-unit id="e2538ba1b9edad5eed06dfc85f6e5a8fed234c97" translate="yes" xml:space="preserve">
          <source>A Token is an interface holding one of the token types: StartElement, EndElement, CharData, Comment, ProcInst, or Directive.</source>
          <target state="translated">一个Token是一个持有其中一个Token类型的接口。StartElement,EndElement,CharData,Comment,ProcInst,或 Directive。</target>
        </trans-unit>
        <trans-unit id="75ea4973f3f3069985d057a27a7af063dfd40223" translate="yes" xml:space="preserve">
          <source>A TokenReader is anything that can decode a stream of XML tokens, including a Decoder.</source>
          <target state="translated">TokenReader是任何可以解码XML tokens流的东西,包括Decoder。</target>
        </trans-unit>
        <trans-unit id="ef695f4304becb34a738bb8be42552a70be630fa" translate="yes" xml:space="preserve">
          <source>A Transport is a low-level primitive for making HTTP and HTTPS requests. For high-level functionality, such as cookies and redirects, see Client.</source>
          <target state="translated">传输是一个低级的基元,用于发出HTTP和HTTPS请求。对于高层次的功能,如cookie和重定向,请参阅客户端。</target>
        </trans-unit>
        <trans-unit id="205d177ec942d6309a89adfffdf8a8e4074a7f7b" translate="yes" xml:space="preserve">
          <source>A Tuple represents an ordered list of variables; a nil *Tuple is a valid (empty) tuple. Tuples are used as components of signatures and to represent the type of multiple assignments; they are not first class types of Go.</source>
          <target state="translated">图元组表示变量的有序列表;无*图元组是一个有效的(空)图元组。图元组被用作签名的组件,并表示多个赋值的类型;它们不是Go的第一类类型。</target>
        </trans-unit>
        <trans-unit id="14a29b6908dc38e24f0ef8e838d5a62da69e0160" translate="yes" xml:space="preserve">
          <source>A Type conventionally represents a pointer to any of the specific Type structures (CharType, StructType, etc.).</source>
          <target state="translated">类型传统上代表指向任何特定类型结构(CharType、StructType等)的指针。</target>
        </trans-unit>
        <trans-unit id="cd759fa17460fa844a3ecf99a0899b837ea8810c" translate="yes" xml:space="preserve">
          <source>A Type is the Mach-O file type, e.g. an object file, executable, or dynamic library.</source>
          <target state="translated">类型是指Mach-O文件的类型,如对象文件、可执行文件或动态库。</target>
        </trans-unit>
        <trans-unit id="7532bdeeed1f2b0e0e0f4a6bd401f739887f16a6" translate="yes" xml:space="preserve">
          <source>A Type represents a type of Go. All types implement the Type interface.</source>
          <target state="translated">一个类型代表了围棋的一种类型。所有类型都实现了Type接口。</target>
        </trans-unit>
        <trans-unit id="7719074f08defb90cf90e8a5c8093d6476b4e065" translate="yes" xml:space="preserve">
          <source>A TypeAssertExpr node represents an expression followed by a type assertion.</source>
          <target state="translated">TypeAssertExpr节点表示一个表达式,后面是一个类型断言。</target>
        </trans-unit>
        <trans-unit id="d7ee401043d765de08c455c9883bfd1233d24461" translate="yes" xml:space="preserve">
          <source>A TypeAssertionError explains a failed type assertion.</source>
          <target state="translated">TypeAssertionError解释了一个失败的类型断言。</target>
        </trans-unit>
        <trans-unit id="bae8ad7f1e3b4dc01bc94d3eb7567f3b017542b9" translate="yes" xml:space="preserve">
          <source>A TypeName represents a name for a (defined or alias) type.</source>
          <target state="translated">TypeName表示一个(定义或别名)类型的名称。</target>
        </trans-unit>
        <trans-unit id="2d9b19b626ba29ca522df11faf9d4d8dfae59037" translate="yes" xml:space="preserve">
          <source>A TypeSpec node represents a type declaration (TypeSpec production).</source>
          <target state="translated">一个TypeSpec节点代表一个类型声明(TypeSpec生产)。</target>
        </trans-unit>
        <trans-unit id="591ac82285f41b8adcd7c12d777865c2fc155d90" translate="yes" xml:space="preserve">
          <source>A TypeSwitchStmt node represents a type switch statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d788b79782d20ca5644b516cf51099212dd89634" translate="yes" xml:space="preserve">
          <source>A TypedefType represents a named type.</source>
          <target state="translated">TypedefType表示一个命名类型。</target>
        </trans-unit>
        <trans-unit id="8a7264b7221a5f1d236f683a66cc15a2dd787040" translate="yes" xml:space="preserve">
          <source>A URL represents a parsed URL (technically, a URI reference).</source>
          <target state="translated">一个URL代表一个解析后的URL(技术上讲,是URI引用)。</target>
        </trans-unit>
        <trans-unit id="ad174328a1ff4a8b79959dd713d7b3d469c42e43" translate="yes" xml:space="preserve">
          <source>A UcharType represents an unsigned character type.</source>
          <target state="translated">一个UcharType代表一个无符号字符类型。</target>
        </trans-unit>
        <trans-unit id="4e89dd3d467f282d2875f2c6ed05833cce1e25ec" translate="yes" xml:space="preserve">
          <source>A UintType represents an unsigned integer type.</source>
          <target state="translated">一个UintType代表一个无符号整数类型。</target>
        </trans-unit>
        <trans-unit id="b1738f8b111b46e92286205e5eb8213ffeca4422" translate="yes" xml:space="preserve">
          <source>A UnaryExpr node represents a unary expression. Unary &quot;*&quot; expressions are represented via StarExpr nodes.</source>
          <target state="translated">UnaryExpr节点表示一个单利表达式。单利的 &quot;*&quot;表达式通过StarExpr节点来表示。</target>
        </trans-unit>
        <trans-unit id="3bbaa096ad1d0fa36610df8d2e4300b924364ad4" translate="yes" xml:space="preserve">
          <source>A Value can be used concurrently by multiple goroutines provided that the underlying Go value can be used concurrently for the equivalent direct operations.</source>
          <target state="translated">一个Value可以被多个goroutine并发使用,前提是底层的Go值可以并发用于等价的直接操作。</target>
        </trans-unit>
        <trans-unit id="c45c278af71e2d7167507a12e5fa02bf92962a49" translate="yes" xml:space="preserve">
          <source>A Value must not be copied after first use.</source>
          <target state="translated">A值首次使用后不得复制。</target>
        </trans-unit>
        <trans-unit id="518c031b906d8366c9070eedabcd5d99e9858715" translate="yes" xml:space="preserve">
          <source>A Value provides an atomic load and store of a consistently typed value. The zero value for a Value returns nil from Load. Once Store has been called, a Value must not be copied.</source>
          <target state="translated">Value提供了一个原子式的加载和存储一致类型的值。Value的零值会从Load返回nil。一旦Store被调用,一个Value就不能被复制。</target>
        </trans-unit>
        <trans-unit id="704872c27dd11d1ea76e6e4ee6bb7625a22ead66" translate="yes" xml:space="preserve">
          <source>A Value represents the value of a Go constant.</source>
          <target state="translated">A值表示一个围棋常数的值。</target>
        </trans-unit>
        <trans-unit id="35a6c26e4d0d39784db5b414382430945210b01d" translate="yes" xml:space="preserve">
          <source>A ValueError occurs when a Value method is invoked on a Value that does not support it. Such cases are documented in the description of each method.</source>
          <target state="translated">当一个Value方法被调用到一个不支持它的Value上时,就会发生ValueError。这种情况在每个方法的描述中都有记载。</target>
        </trans-unit>
        <trans-unit id="211fb5033eea94f990c18370408afc6e4744bebf" translate="yes" xml:space="preserve">
          <source>A ValueSpec node represents a constant or variable declaration (ConstSpec or VarSpec production).</source>
          <target state="translated">ValueSpec节点代表一个常量或变量声明(ConstSpec或VarSpec生产)。</target>
        </trans-unit>
        <trans-unit id="6f61d7e37b3871edd50ca3a74b20b5673f75481c" translate="yes" xml:space="preserve">
          <source>A Variable represents a declared variable (including function parameters and results, and struct fields).</source>
          <target state="translated">变量代表一个声明的变量(包括函数参数和结果,以及结构域)。</target>
        </trans-unit>
        <trans-unit id="cc9292dda86c62967d8590b7f8274a4d6182bbac" translate="yes" xml:space="preserve">
          <source>A Visitor's Visit method is invoked for each node encountered by Walk. If the result visitor w is not nil, Walk visits each of the children of node with the visitor w, followed by a call of w.Visit(nil).</source>
          <target state="translated">对于Walk遇到的每一个节点,都会调用一个访问者的Visit方法。如果结果访问者w不是nil,Walk就会访问访问者w的每一个节点的子节点,随后调用w.Visit(nil)。</target>
        </trans-unit>
        <trans-unit id="076ae0767034cf704db98525420b8ce59d22a34b" translate="yes" xml:space="preserve">
          <source>A VoidType represents the C void type.</source>
          <target state="translated">一个VoidType代表C void类型。</target>
        </trans-unit>
        <trans-unit id="85b56369886ad646746df4d1fecb50f680892b5f" translate="yes" xml:space="preserve">
          <source>A WaitGroup must not be copied after first use.</source>
          <target state="translated">一个WaitGroup在第一次使用后不能被复制。</target>
        </trans-unit>
        <trans-unit id="5a86443f6e4c40a98aca5444ee468b15ace4abb9" translate="yes" xml:space="preserve">
          <source>A WaitGroup waits for a collection of goroutines to finish. The main goroutine calls Add to set the number of goroutines to wait for. Then each of the goroutines runs and calls Done when finished. At the same time, Wait can be used to block until all goroutines have finished.</source>
          <target state="translated">一个WaitGroup等待一个goroutine集合的完成,主goroutine调用Add来设置等待的goroutine数量。主goroutine调用Add来设置要等待的goroutine数量。然后每个goroutine运行,完成后调用Done。同时,Wait可以用来阻塞,直到所有goroutine完成。</target>
        </trans-unit>
        <trans-unit id="9ca4582ad63d50714d5b43b34c6ab0dd13e67819" translate="yes" xml:space="preserve">
          <source>A Weekday specifies a day of the week (Sunday = 0, ...).</source>
          <target state="translated">周日指定了一周的某一天(周日=0,...)。</target>
        </trans-unit>
        <trans-unit id="d03ea25e0944467c9c41cc98d93b797a4d51dd5d" translate="yes" xml:space="preserve">
          <source>A Word represents a single digit of a multi-precision unsigned integer.</source>
          <target state="translated">一个字代表一个多精度无符号整数的一个数字。</target>
        </trans-unit>
        <trans-unit id="62446931282b9ac19aa0593be90e15a541acfc8a" translate="yes" xml:space="preserve">
          <source>A WordDecoder decodes MIME headers containing RFC 2047 encoded-words.</source>
          <target state="translated">WordDecoder解码包含RFC 2047编码字的MIME头。</target>
        </trans-unit>
        <trans-unit id="3473f163231f1c313bb3aa97735626a5a618dbb5" translate="yes" xml:space="preserve">
          <source>A WordEncoder is an RFC 2047 encoded-word encoder.</source>
          <target state="translated">WordEncoder是一个RFC 2047编码字编码器。</target>
        </trans-unit>
        <trans-unit id="fe9276a229c981418c6948f78d1275b1c9fd2413" translate="yes" xml:space="preserve">
          <source>A WriteError reports an error encountered while writing output.</source>
          <target state="translated">WriteError报告了写输出时遇到的错误。</target>
        </trans-unit>
        <trans-unit id="921437c78574f3763c875d8ad66a7a5155e90433" translate="yes" xml:space="preserve">
          <source>A Writer generates multipart messages.</source>
          <target state="translated">写字机可生成多部分信息。</target>
        </trans-unit>
        <trans-unit id="8b5e497607507a45b86dfd8d4d2fb980d92c3ad6" translate="yes" xml:space="preserve">
          <source>A Writer implements convenience methods for writing requests or responses to a text protocol network connection.</source>
          <target state="translated">Writer实现了向文本协议网络连接写入请求或响应的方便方法。</target>
        </trans-unit>
        <trans-unit id="dee10f306a0eaf4b16b88e2100cc5d77b7c0bc69" translate="yes" xml:space="preserve">
          <source>A Writer is a connection to a syslog server.</source>
          <target state="translated">Writer是与syslog服务器的连接。</target>
        </trans-unit>
        <trans-unit id="4363ba1b66a07da1208c09d9517f251ba73b90f3" translate="yes" xml:space="preserve">
          <source>A Writer is a filter that inserts padding around tab-delimited columns in its input to align them in the output.</source>
          <target state="translated">Writer是一个过滤器,它在其输入的以制表符分隔的列周围插入padding,以便在输出中对齐它们。</target>
        </trans-unit>
        <trans-unit id="16a9d12a37b527fe37685b62e1a1f5da51add8c1" translate="yes" xml:space="preserve">
          <source>A Writer is a quoted-printable writer that implements io.WriteCloser.</source>
          <target state="translated">Writer是一个实现了io.WriteCloser的可引用打印的作家。</target>
        </trans-unit>
        <trans-unit id="0b5fc9bd20310af4833aa25ebe029221c38240f6" translate="yes" xml:space="preserve">
          <source>A Writer is an io.WriteCloser. Writes to a Writer are compressed and written to w.</source>
          <target state="translated">Writer是一个io.WriteCloser。写入Writer的内容会被压缩并写入w。</target>
        </trans-unit>
        <trans-unit id="03cec7474cfa008a6959e6f93e904ad74a1674d1" translate="yes" xml:space="preserve">
          <source>A Writer must be initialized with a call to Init. The first parameter (output) specifies the filter output. The remaining parameters control the formatting:</source>
          <target state="translated">一个Writer必须通过调用Init来初始化。第一个参数(output)指定过滤器的输出。其余参数控制格式化。</target>
        </trans-unit>
        <trans-unit id="5465ae3ddfd70d1be5f5967ba8de154a01cefd5b" translate="yes" xml:space="preserve">
          <source>A Writer takes data written to it and writes the compressed form of that data to an underlying writer (see NewWriter).</source>
          <target state="translated">一个Writer接收写入它的数据,并将该数据的压缩形式写入一个底层的Writer(见NewWriter)。</target>
        </trans-unit>
        <trans-unit id="410a82fcce98e6fc886559574359b0fbe2e5eb6f" translate="yes" xml:space="preserve">
          <source>A Writer writes records using CSV encoding.</source>
          <target state="translated">写入器使用CSV编码写入记录。</target>
        </trans-unit>
        <trans-unit id="48e7df2a646f4525d607dc7a30a82a5f83098c9f" translate="yes" xml:space="preserve">
          <source>A Zipf generates Zipf distributed variates.</source>
          <target state="translated">一个Zipf产生Zipf分布式变量。</target>
        </trans-unit>
        <trans-unit id="0760dc9daa80e90d6d4229331a1af0e6683b9072" translate="yes" xml:space="preserve">
          <source>A benchmark ends when its Benchmark function returns or calls any of the methods FailNow, Fatal, Fatalf, SkipNow, Skip, or Skipf. Those methods must be called only from the goroutine running the Benchmark function. The other reporting methods, such as the variations of Log and Error, may be called simultaneously from multiple goroutines.</source>
          <target state="translated">当其Benchmark函数返回或调用FailNow、Fatal、Fatalf、SkipNow、Skip或Skipf中的任何一个方法时,一个基准就结束了。这些方法只能从运行Benchmark函数的goroutine中调用。其他的报告方法,如Log和Error的变体,可以从多个goroutine中同时调用。</target>
        </trans-unit>
        <trans-unit id="3eb7ac8d55d19c14bff60fcd03e9b73b76f2c42e" translate="yes" xml:space="preserve">
          <source>A boolean is encoded within an unsigned integer: 0 for false, 1 for true.</source>
          <target state="translated">一个布尔值被编码在一个无符号的整数内,0代表false,1代表true。0代表假,1代表真。</target>
        </trans-unit>
        <trans-unit id="f01fce8b92a9885648984ba16014b68a79d5e744" translate="yes" xml:space="preserve">
          <source>A build constraint is evaluated as the OR of space-separated options. Each option evaluates as the AND of its comma-separated terms. Each term consists of letters, digits, underscores, and dots. A term may be negated with a preceding !. For example, the build constraint:</source>
          <target state="translated">构建约束是以空格分隔的选项的OR来评估的。每个选项以其逗号分隔的项的 AND 来评估。每个项由字母、数字、下划线和点组成。一个项可以用前面的 !来否定。例如,构建约束。</target>
        </trans-unit>
        <trans-unit id="65b5e15b8c1208e1ebae02236d460f4be7aeb5f2" translate="yes" xml:space="preserve">
          <source>A build constraint, also known as a build tag, is a line comment that begins</source>
          <target state="translated">构建约束,也被称为构建标签,是一个以</target>
        </trans-unit>
        <trans-unit id="b9e79cabff6c03ded7ab173d941b59e4c2fcc202" translate="yes" xml:space="preserve">
          <source>A call to ValueOf returns a Value representing the run-time data. Zero takes a Type and returns a Value representing a zero value for that type.</source>
          <target state="translated">调用ValueOf返回一个代表运行时数据的Value。Zero取一个类型并返回一个代表该类型零值的Value。</target>
        </trans-unit>
        <trans-unit id="36fdba5c705a01b336f31fab629a866bbfaa8f78" translate="yes" xml:space="preserve">
          <source>A canonical name is the final name after following zero or more CNAME records. LookupCNAME does not return an error if host does not contain DNS &quot;CNAME&quot; records, as long as host resolves to address records.</source>
          <target state="translated">规范名是在零条或更多CNAME记录之后的最终名称。如果主机不包含DNS &quot;CNAME &quot;记录,LookupCNAME不会返回错误,只要主机解析到地址记录即可。</target>
        </trans-unit>
        <trans-unit id="f7fc23252b8a8444204611f4f0f8eaee345d5cd3" translate="yes" xml:space="preserve">
          <source>A client wishing to use the service establishes a connection and then invokes NewClient on the connection. The convenience function Dial (DialHTTP) performs both steps for a raw network connection (an HTTP connection). The resulting Client object has two methods, Call and Go, that specify the service and method to call, a pointer containing the arguments, and a pointer to receive the result parameters.</source>
          <target state="translated">希望使用服务的客户端建立一个连接,然后在连接上调用NewClient。方便函数Dial(DialHTTP)为一个原始网络连接(一个HTTP连接)执行这两个步骤。生成的Client对象有两个方法,Call和Go,指定要调用的服务和方法,一个包含参数的指针和一个接收结果参数的指针。</target>
        </trans-unit>
        <trans-unit id="260ac7a6348d4616a04fa117e8bbf40248a2aac8" translate="yes" xml:space="preserve">
          <source>A comment group g is associated with a node n if:</source>
          <target state="translated">一个评论组g与一个节点n相关联,如果:</target>
        </trans-unit>
        <trans-unit id="6201e2e8d36ed27d9f67af4f5dbcdce26a23ab67" translate="yes" xml:space="preserve">
          <source>A common idiom is to merge the check for nil return with the check that the value has the expected dynamic type, as in:</source>
          <target state="translated">一个常见的习惯是将nil返回的检查与检查值是否具有预期的动态类型合并起来,如:。</target>
        </trans-unit>
        <trans-unit id="ba5d21f25f75193bb1322654b338552fadea1382" translate="yes" xml:space="preserve">
          <source>A common use of Search is to find the index i for a value x in a sorted, indexable data structure such as an array or slice. In this case, the argument f, typically a closure, captures the value to be searched for, and how the data structure is indexed and ordered.</source>
          <target state="translated">Search的一个常见用途是为一个排序的、可索引的数据结构(如数组或片)中的一个值x查找索引i。在这种情况下,参数f,通常是一个闭包,捕获要搜索的值,以及数据结构如何被索引和排序。</target>
        </trans-unit>
        <trans-unit id="33d3c617a7ed73a514301da6251e17e5ab959ed1" translate="yes" xml:space="preserve">
          <source>A csv file contains zero or more records of one or more fields per record. Each record is separated by the newline character. The final record may optionally be followed by a newline character.</source>
          <target state="translated">一个csv文件包含零条或多条记录,每条记录包含一个或多个字段。每条记录用换行符隔开。最后一条记录可以选择在后面加上一个换行符。</target>
        </trans-unit>
        <trans-unit id="b7caa085f191233dadd6ec8fb642202edd158870" translate="yes" xml:space="preserve">
          <source>A daylight savings time transition skips or repeats times. For example, in the United States, March 13, 2011 2:15am never occurred, while November 6, 2011 1:15am occurred twice. In such cases, the choice of time zone, and therefore the time, is not well-defined. Date returns a time that is correct in one of the two zones involved in the transition, but it does not guarantee which.</source>
          <target state="translated">夏令时的转换会跳过或重复时间。例如,在美国,2011年3月13日凌晨2:15从未出现过,而2011年11月6日凌晨1:15出现过两次。在这种情况下,时区的选择,因此时间的选择并不明确。Date 返回的时间在两个时区中的一个时区是正确的,但它并不保证是哪个时区。</target>
        </trans-unit>
        <trans-unit id="57af6fb36a3adf8a96b4592de464282206245987" translate="yes" xml:space="preserve">
          <source>A deadline is an absolute time after which I/O operations fail with an error instead of blocking. The deadline applies to all future and pending I/O, not just the immediately following call to Read or Write. After a deadline has been exceeded, the connection can be refreshed by setting a deadline in the future.</source>
          <target state="translated">deadline是一个绝对的时间,超过这个时间,I/O操作就会出错而不是阻塞。deadline适用于所有未来的和待定的I/O,而不仅仅是紧接着的Read或Write调用。在超过deadline之后,可以通过设置未来的deadline来刷新连接。</target>
        </trans-unit>
        <trans-unit id="b53aa31dad4e2a94a06aac6f9f3bda2dcb94ebf7" translate="yes" xml:space="preserve">
          <source>A decimal point followed by one or more zeros represents a fractional second, printed to the given number of decimal places. A decimal point followed by one or more nines represents a fractional second, printed to the given number of decimal places, with trailing zeros removed. When parsing (only), the input may contain a fractional second field immediately after the seconds field, even if the layout does not signify its presence. In that case a decimal point followed by a maximal series of digits is parsed as a fractional second.</source>
          <target state="translated">小数点后面跟一个或多个0代表一个小数点,打印到给定的小数点位数。一个小数点后面跟一个或多个九代表一个小数秒,打印到给定的小数位数,并去掉尾部的零。当解析(仅)时,输入可能包含紧接在秒字段之后的小数点秒字段,即使布局没有表示它的存在。在这种情况下,小数点后面的最大数字系列会被解析为小数秒。</target>
        </trans-unit>
        <trans-unit id="4eb1aaf5c04383e503526b587e3b53b0e3115f2d" translate="yes" xml:space="preserve">
          <source>A different subset of the mode bits are used, depending on the operating system.</source>
          <target state="translated">根据操作系统的不同,使用不同的模式位子集。</target>
        </trans-unit>
        <trans-unit id="8aee15dc1cb6f51da0900bf8773758523f3cab92" translate="yes" xml:space="preserve">
          <source>A file may have multiple build constraints. The overall constraint is the AND of the individual constraints. That is, the build constraints:</source>
          <target state="translated">一个文件可能有多个构建约束。整体约束是各个约束的AND。也就是构建约束。</target>
        </trans-unit>
        <trans-unit id="e5aebd71375f9513b2e98191249a7900f2298da7" translate="yes" xml:space="preserve">
          <source>A finalizer may run as soon as an object becomes unreachable. In order to use finalizers correctly, the program must ensure that the object is reachable until it is no longer required. Objects stored in global variables, or that can be found by tracing pointers from a global variable, are reachable. For other objects, pass the object to a call of the KeepAlive function to mark the last point in the function where the object must be reachable.</source>
          <target state="translated">一旦一个对象变得不可触及,定标器就可以运行。为了正确地使用定标器,程序必须确保对象是可到达的,直到它不再被需要。存储在全局变量中的对象,或者可以通过追踪全局变量的指针找到的对象,都是可以到达的。对于其他对象,将对象传递给KeepAlive函数的调用,以标记函数中对象必须可到达的最后一点。</target>
        </trans-unit>
        <trans-unit id="da1a6a99a449a5ea3376991cc3b251fd40ae595a" translate="yes" xml:space="preserve">
          <source>A fractional second is represented by adding a period and zeros to the end of the seconds section of layout string, as in &quot;15:04:05.000&quot; to format a time stamp with millisecond precision.</source>
          <target state="translated">小数秒的表示方法是在布局字符串的秒部分的末尾加上句号和0,如 &quot;15:04:05.000 &quot;来格式化毫秒精度的时间戳。</target>
        </trans-unit>
        <trans-unit id="e965d0f5f3f1435750b42e46c8ff14170f8ed15c" translate="yes" xml:space="preserve">
          <source>A fuller picture</source>
          <target state="translated">更全面的情况</target>
        </trans-unit>
        <trans-unit id="2437bd04b669e4858c568d7a7b556cfc526d919f" translate="yes" xml:space="preserve">
          <source>A goroutine should call LockOSThread before calling OS services or non-Go library functions that depend on per-thread state.</source>
          <target state="translated">一个goroutine应该在调用操作系统服务或依赖于每线程状态的非围棋库函数之前调用LockOSThread。</target>
        </trans-unit>
        <trans-unit id="4dcdf2a31c8cc2a191ea807a386fd6fa6b19641b" translate="yes" xml:space="preserve">
          <source>A heap is a common way to implement a priority queue. To build a priority queue, implement the Heap interface with the (negative) priority as the ordering for the Less method, so Push adds items while Pop removes the highest-priority item from the queue. The Examples include such an implementation; the file example_pq_test.go has the complete source.</source>
          <target state="translated">堆是实现优先级队列的一种常见方式。要建立一个优先级队列,实现Heap接口,以(负)优先级作为Less方法的排序,所以Push添加项目,而Pop从队列中删除最高优先级的项目。示例中包含了这样的实现,文件example_pq_test.go中有完整的源代码。</target>
        </trans-unit>
        <trans-unit id="d16ad196fde70693ff0f37d80fffc0b333fedfdf" translate="yes" xml:space="preserve">
          <source>A line consisting of only white space is never continued.</source>
          <target state="translated">仅由白色空间组成的行永远不会继续。</target>
        </trans-unit>
        <trans-unit id="afc9f8d3242f5eaf04e2e9b3c363b4deec607569" translate="yes" xml:space="preserve">
          <source>A list of cipher suite IDs that are, or have been, implemented by this package.</source>
          <target state="translated">这个软件包正在或已经实现的密码套件ID的列表。</target>
        </trans-unit>
        <trans-unit id="dd3ef60e1f91534e9d091bd4d798b2f024b79ceb" translate="yes" xml:space="preserve">
          <source>A literal IPv6 address in hostport must be enclosed in square brackets, as in &quot;[::1]:80&quot;, &quot;[::1%lo0]:80&quot;.</source>
          <target state="translated">hostport中的IPv6字面地址必须用方括号括起来,如&quot;[::1]:80&quot;、&quot;[::1%lo0]:80&quot;。</target>
        </trans-unit>
        <trans-unit id="5dc7cfeeb708df0f962816ce176c0c581f7f3bc1" translate="yes" xml:space="preserve">
          <source>A locked Mutex is not associated with a particular goroutine. It is allowed for one goroutine to lock a Mutex and then arrange for another goroutine to unlock it.</source>
          <target state="translated">锁定的Mutex不与某个goroutine相关联。允许一个goroutine锁定一个Mutex,然后安排另一个goroutine解锁。</target>
        </trans-unit>
        <trans-unit id="ac3d8ec28edd54aa88cf818d84291bb78f42ac35" translate="yes" xml:space="preserve">
          <source>A lookup function must be provided for correct module-aware operation. Deprecated: If lookup is nil, for backwards-compatibility, the importer will attempt to resolve imports in the $GOPATH workspace.</source>
          <target state="translated">必须提供一个查找功能,以保证正确的模块感知操作。已经过时了,如果lookup为零,为了向后兼容,进口商将尝试在$GOPATH工作空间中解析进口。如果查找函数为零,为了向后兼容,进口商将尝试在$GOPATH工作区解析进口。</target>
        </trans-unit>
        <trans-unit id="4af7a8e5ef9812183582f7353a58a98b1bf43580" translate="yes" xml:space="preserve">
          <source>A missing element or empty attribute value will be unmarshaled as a zero value. If the field is a slice, a zero value will be appended to the field. Otherwise, the field will be set to its zero value.</source>
          <target state="translated">缺少的元素或空的属性值将作为一个零值而被取消标记。如果字段是一个分片,一个零值将被附加到字段上,否则,字段将被设置为零值。否则,字段将被设置为零值。</target>
        </trans-unit>
        <trans-unit id="facf040ac7eba8fb44518815fa41c78439754caa" translate="yes" xml:space="preserve">
          <source>A mode value is a set of flags (or 0). They control scanner behavior.</source>
          <target state="translated">一个模式值是一组标志(或0)。它们控制扫描仪的行为。</target>
        </trans-unit>
        <trans-unit id="25cf3a2ce55598fd47c06f8dc8fba0d37cd2cc75" translate="yes" xml:space="preserve">
          <source>A nil *Resolver is equivalent to a zero Resolver.</source>
          <target state="translated">一个nil *Resolver相当于一个零的Resolver。</target>
        </trans-unit>
        <trans-unit id="e9f2c7f03c9badde39c7a80393c1376e7c03c61a" translate="yes" xml:space="preserve">
          <source>A nil URL and nil error are returned if no proxy is defined in the environment, or a proxy should not be used for the given request, as defined by NO_PROXY.</source>
          <target state="translated">如果在环境中没有定义代理,或者在给定的请求中不应该使用代理,则返回nil URL和nil错误,如NO_PROXY所定义。</target>
        </trans-unit>
        <trans-unit id="eab5d59cf31afe135bcedd98e1fb7a9d4aa7fe2b" translate="yes" xml:space="preserve">
          <source>A non-nil FieldFilter f may be provided to control the output: struct fields for which f(fieldname, fieldvalue) is true are printed; all others are filtered from the output. Unexported struct fields are never printed.</source>
          <target state="translated">可以提供一个非零的FieldFilter f来控制输出:f(fieldname,fieldvalue)为真的结构体字段会被打印出来;所有其他的结构体字段会被从输出中过滤掉。未输出的结构体字段不会被打印。</target>
        </trans-unit>
        <trans-unit id="dad360f25cca4579e42ac746bdde335602ae158f" translate="yes" xml:space="preserve">
          <source>A nonzero finite Float represents a multi-precision floating point number</source>
          <target state="translated">一个非零的有限Float代表一个多精度的浮点数。</target>
        </trans-unit>
        <trans-unit id="67f20c1e684209c8ed072b03f5dbc6b88dfcdb75" translate="yes" xml:space="preserve">
          <source>A note about ZIP64:</source>
          <target state="translated">关于ZIP64的说明。</target>
        </trans-unit>
        <trans-unit id="567bb53b185e88e525e4138c042b8ddb8af9e0fd" translate="yes" xml:space="preserve">
          <source>A numeric netdns setting, as in GODEBUG=netdns=1, causes the resolver to print debugging information about its decisions. To force a particular resolver while also printing debugging information, join the two settings by a plus sign, as in GODEBUG=netdns=go+1.</source>
          <target state="translated">数字化的netdns设置,如GODEBUG=netdns=1,会导致解析器打印有关其决定的调试信息。如果要在打印调试信息的同时强制执行特定的解析器,可以将这两个设置用加号连接起来,如GODEBUG=netdns=go+1。</target>
        </trans-unit>
        <trans-unit id="a1e9d7b7caa6b6f7b48c88742eade61d0fb9b1a3" translate="yes" xml:space="preserve">
          <source>A package is complete if its scope contains (at least) all exported objects; otherwise it is incomplete.</source>
          <target state="translated">如果一个包的作用域包含(至少)所有导出的对象,那么这个包就是完整的;否则就是不完整的。</target>
        </trans-unit>
        <trans-unit id="ac46e64bcf537621373bd5b22cf93ce7bcad324a" translate="yes" xml:space="preserve">
          <source>A pair of (consecutive) backticks (`) is converted to a unicode left quote (&amp;ldquo;), and a pair of (consecutive) single quotes (') is converted to a unicode right quote (&amp;rdquo;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2eb8ed0def3b86fafe13f7d6fcbec9f7035334a" translate="yes" xml:space="preserve">
          <source>A pipeline inside an action may initialize a variable to capture the result. The initialization has syntax</source>
          <target state="translated">一个动作内部的流水线可以初始化一个变量来捕获结果。初始化的语法是</target>
        </trans-unit>
        <trans-unit id="159568cd8af281aa06ef8c37825fa46265e15546" translate="yes" xml:space="preserve">
          <source>A pipeline is a possibly chained sequence of &quot;commands&quot;. A command is a simple value (argument) or a function or method call, possibly with multiple arguments:</source>
          <target state="translated">一个流水线是一个可能是连锁的 &quot;命令 &quot;序列。一个命令是一个简单的值(参数)或一个函数或方法调用,可能有多个参数。</target>
        </trans-unit>
        <trans-unit id="37a982db72ea1fb9ba66b22f1af9be32523e2a43" translate="yes" xml:space="preserve">
          <source>A pipeline may be &quot;chained&quot; by separating a sequence of commands with pipeline characters '|'. In a chained pipeline, the result of each command is passed as the last argument of the following command. The output of the final command in the pipeline is the value of the pipeline.</source>
          <target state="translated">通过用流水线字符&quot;|&quot;分隔命令序列,可以将流水线 &quot;链 &quot;起来。在链式管道中,每条命令的结果都会作为下一条命令的最后一个参数传递。管道中最后一条命令的输出是管道的值。</target>
        </trans-unit>
        <trans-unit id="e435d830501b57692560d08004b34491160b2337" translate="yes" xml:space="preserve">
          <source>A pipelined server can use the same calls to ensure that responses computed in parallel are written in the correct order.</source>
          <target state="translated">管道式服务器可以使用相同的调用来确保并行计算的响应按正确的顺序写入。</target>
        </trans-unit>
        <trans-unit id="c49361545d95418f04cbcdcf2b2ab41b7a40c811" translate="yes" xml:space="preserve">
          <source>A plugin is a Go main package with exported functions and variables that has been built with:</source>
          <target state="translated">插件是一个围棋主包,里面有导出的函数和变量,是用它来构建的。</target>
        </trans-unit>
        <trans-unit id="81f9a7dada15598723e182d4050df9eb32499489" translate="yes" xml:space="preserve">
          <source>A preset dictionary can be used to improve the compression ratio. The downside to using a dictionary is that the compressor and decompressor must agree in advance what dictionary to use.</source>
          <target state="translated">可以使用预设字典来提高压缩比。使用字典的缺点是,压缩器和解压缩器必须事先约定使用什么字典。</target>
        </trans-unit>
        <trans-unit id="947f86e05fc12ea1145d41f40f9588a79a2d1df5" translate="yes" xml:space="preserve">
          <source>A public suffix list implementation is in the package golang.org/x/net/publicsuffix.</source>
          <target state="translated">公共后缀列表的实现在包golang.org/x/net/publicsuffix中。</target>
        </trans-unit>
        <trans-unit id="f5a4f3b805b19490b13c81014b70583343cfccf0" translate="yes" xml:space="preserve">
          <source>A region is for logging a time interval during a goroutine's execution. By definition, a region starts and ends in the same goroutine. Regions can be nested to represent subintervals. For example, the following code records four regions in the execution trace to trace the durations of sequential steps in a cappuccino making operation.</source>
          <target state="translated">区域是用来记录goroutine执行过程中的一个时间间隔。根据定义,一个区域在同一个goroutine中开始和结束。区域可以嵌套来表示子区间。例如,下面的代码在执行跟踪中记录了四个区域,以跟踪卡布奇诺制作操作中连续步骤的持续时间。</target>
        </trans-unit>
        <trans-unit id="19e9496f5feeba3316d5f9c892e638126465f862" translate="yes" xml:space="preserve">
          <source>A sample benchmark function looks like this:</source>
          <target state="translated">一个基准函数的例子是这样的。</target>
        </trans-unit>
        <trans-unit id="64d7f2b7d8c639b9703cb9c512522716406ca71c" translate="yes" xml:space="preserve">
          <source>A segment of text may be escaped by bracketing it with Escape characters. The tabwriter passes escaped text segments through unchanged. In particular, it does not interpret any tabs or line breaks within the segment. If the StripEscape flag is set, the Escape characters are stripped from the output; otherwise they are passed through as well. For the purpose of formatting, the width of the escaped text is always computed excluding the Escape characters.</source>
          <target state="translated">文本段可以通过括号中的转义字符进行转义。tabwriter可以不变地通过转义的文本段,特别是它不会解释文本段中的任何制表符或换行符。特别是,它不会解释文本段中的任何制表符或换行符。如果设置了StripEscape标志,则Escape字符将从输出中剥离,否则它们也会被传递。为了格式化的目的,转义文本的宽度总是在不包括Escape字符的情况下计算的。</target>
        </trans-unit>
        <trans-unit id="cbf67455e625a319934ff3db6f4e7765c384f850" translate="yes" xml:space="preserve">
          <source>A server implementation will often provide a simple, type-safe wrapper for the client.</source>
          <target state="translated">服务器实现通常会为客户端提供一个简单的、类型安全的封装器。</target>
        </trans-unit>
        <trans-unit id="5fe1bd315f5a675d22edfe1287dcef7a18f2ebf5" translate="yes" xml:space="preserve">
          <source>A set of constants for precedence-based expression parsing. Non-operators have lowest precedence, followed by operators starting with precedence 1 up to unary operators. The highest precedence serves as &quot;catch-all&quot; precedence for selector, indexing, and other operator and delimiter tokens.</source>
          <target state="translated">一组用于基于优先级的表达式解析的常量。非运算符的优先级最低,其次是优先级为1的运算符,直至单利运算符。最高优先级作为选择符、索引和其他运算符和定界符的 &quot;全面 &quot;优先级。</target>
        </trans-unit>
        <trans-unit id="d3f475688772a3727780325202b67ed9bcfba627" translate="yes" xml:space="preserve">
          <source>A signed integer, i, is encoded within an unsigned integer, u. Within u, bits 1 upward contain the value; bit 0 says whether they should be complemented upon receipt. The encode algorithm looks like this:</source>
          <target state="translated">一个有符号的整数i,被编码在一个无符号的整数u内,在u内,第1位向上包含值;第0位表示收到后是否应该补全。编码算法是这样的。</target>
        </trans-unit>
        <trans-unit id="6c6185e40ebf683daf5fbd59be060f229f28d552" translate="yes" xml:space="preserve">
          <source>A simple implementation of TestMain is:</source>
          <target state="translated">TestMain的一个简单实现是。</target>
        </trans-unit>
        <trans-unit id="afdf12aec718dd4999cbe7ecda6d1bb5b3e50e14" translate="yes" xml:space="preserve">
          <source>A simple test function looks like this:</source>
          <target state="translated">一个简单的测试函数是这样的。</target>
        </trans-unit>
        <trans-unit id="92ea7ad194070845bcee235ee4cd7d7c3a7afe32" translate="yes" xml:space="preserve">
          <source>A simple way to create wrapped errors is to call fmt.Errorf and apply the %w verb to the error argument:</source>
          <target state="translated">创建封装错误的简单方法是调用fmt.Errorf,并将%w动词应用到错误参数中。</target>
        </trans-unit>
        <trans-unit id="69d7e4afbc359dbfa554c3437471beab838e64ea" translate="yes" xml:space="preserve">
          <source>A single goroutine runs all finalizers for a program, sequentially. If a finalizer must run for a long time, it should do so by starting a new goroutine.</source>
          <target state="translated">一个goroutine依次运行一个程序的所有定型机。如果一个定型机必须长时间运行,它应该通过启动一个新的goroutine来实现。</target>
        </trans-unit>
        <trans-unit id="998765c2e36e31f6015a02a4149186686a19882c" translate="yes" xml:space="preserve">
          <source>A source position is represented by a Position value. A position is valid if Line &amp;gt; 0.</source>
          <target state="translated">源位置由位置值表示。如果Line&amp;gt; 0，则位置有效。</target>
        </trans-unit>
        <trans-unit id="bf46d56633e189cdf4290bc8e9e419edaafcd303" translate="yes" xml:space="preserve">
          <source>A span of indented lines is converted into a &amp;lt;pre&amp;gt; block, with the common indent prefix removed.</source>
          <target state="translated">一段缩进的行将转换为&amp;lt;pre&amp;gt;块，并删除公共缩进前缀。</target>
        </trans-unit>
        <trans-unit id="23ed42dff836502e8a3c882497b88d19de475752" translate="yes" xml:space="preserve">
          <source>A special Unknown value may be used when a value is unknown due to an error. Operations on unknown values produce unknown values unless specified otherwise.</source>
          <target state="translated">当一个值因错误而未知时,可以使用一个特殊的未知值。对未知值的操作会产生未知值,除非另有规定。</target>
        </trans-unit>
        <trans-unit id="39c3619132ff27692be31f7370bad818ba2f7ae2" translate="yes" xml:space="preserve">
          <source>A stream of gobs is self-describing. Each data item in the stream is preceded by a specification of its type, expressed in terms of a small set of predefined types. Pointers are not transmitted, but the things they point to are transmitted; that is, the values are flattened. Nil pointers are not permitted, as they have no value. Recursive types work fine, but recursive values (data with cycles) are problematic. This may change.</source>
          <target state="translated">一个gob流是自描述的。流中的每一个数据项前面都有其类型的说明,用一组小的预定义类型来表示。指针不被传输,但它们所指向的东西会被传输;也就是说,值被扁平化了。Nil指针是不允许的,因为它们没有价值。递归类型工作得很好,但递归值(带循环的数据)是有问题的。这种情况可能会改变。</target>
        </trans-unit>
        <trans-unit id="71de669748bcf101bd8bd68f5e95383f0e17c03d" translate="yes" xml:space="preserve">
          <source>A subbenchmark is like any other benchmark. A benchmark that calls Run at least once will not be measured itself and will be called once with N=1.</source>
          <target state="translated">一个subbenchmark和其他基准一样。一个至少调用Run一次的基准,本身不会被测量,会被调用一次,N=1。</target>
        </trans-unit>
        <trans-unit id="c7c8c5a16c89f340d07d186a6221473d049ea1a6" translate="yes" xml:space="preserve">
          <source>A successful Copy returns err == nil, not err == EOF. Because Copy is defined to read from src until EOF, it does not treat an EOF from Read as an error to be reported.</source>
          <target state="translated">一个成功的Copy返回err ==nil,而不是err ==EOF。因为Copy被定义为从src读取直到EOF,所以它不会将从Read读取的EOF作为一个错误来报告。</target>
        </trans-unit>
        <trans-unit id="1b2067ff10a529e4ca642d4b746a82a3c56ab2f4" translate="yes" xml:space="preserve">
          <source>A task is a higher-level component that aids tracing of logical operations such as an RPC request, an HTTP request, or an interesting local operation which may require multiple goroutines working together. Since tasks can involve multiple goroutines, they are tracked via a context.Context object. NewTask creates a new task and embeds it in the returned context.Context object. Log messages and regions are attached to the task, if any, in the Context passed to Log and WithRegion.</source>
          <target state="translated">任务是一个更高层次的组件,它有助于跟踪逻辑操作,如RPC请求、HTTP请求或可能需要多个goroutine一起工作的有趣的本地操作。由于任务可能涉及多个goroutine,因此通过context.Context对象来跟踪它们。NewTask创建一个新的任务,并将其嵌入到返回的context.Context对象中。日志消息和区域被附加到任务(如果有的话),在传递给Log和WithRegion的Context中。</target>
        </trans-unit>
        <trans-unit id="1ee23ed297d8a4efee537f23283818e2de1f476f" translate="yes" xml:space="preserve">
          <source>A template may be executed directly or through ExecuteTemplate, which executes an associated template identified by name. To invoke our example above, we might write,</source>
          <target state="translated">模板可以直接执行,也可以通过ExecuteTemplate执行,ExecuteTemplate执行一个用名字标识的相关模板。要调用我们上面的例子,我们可以写道。</target>
        </trans-unit>
        <trans-unit id="2ee08d9d80bebe4fc53065d91023da1f3f13f8ce" translate="yes" xml:space="preserve">
          <source>A template may use a template invocation to instantiate another associated template; see the explanation of the &quot;template&quot; action above. The name must be that of a template associated with the template that contains the invocation.</source>
          <target state="translated">一个模板可以使用模板调用来实例化另一个关联的模板;请参见上面对 &quot;模板 &quot;操作的解释。该名称必须是与包含调用的模板相关联的模板的名称。</target>
        </trans-unit>
        <trans-unit id="efdc8c7bbd155802920fdf599596729921196f95" translate="yes" xml:space="preserve">
          <source>A test ends when its Test function returns or calls any of the methods FailNow, Fatal, Fatalf, SkipNow, Skip, or Skipf. Those methods, as well as the Parallel method, must be called only from the goroutine running the Test function.</source>
          <target state="translated">当测试函数返回或调用FailNow、Fatal、Fatalf、SkipNow、Skip或Skipf中的任何一个方法时,测试就结束了。这些方法,以及并行方法,必须只能从运行测试函数的goroutine中调用。</target>
        </trans-unit>
        <trans-unit id="a8d282a7f8e7544e2aa2bcaa602cc973c7e5c659" translate="yes" xml:space="preserve">
          <source>A transaction must end with a call to Commit or Rollback.</source>
          <target state="translated">一个交易必须以调用Commit或Rollback来结束。</target>
        </trans-unit>
        <trans-unit id="3320956e1450f29dc681f22efeb9962f889d2fa1" translate="yes" xml:space="preserve">
          <source>A type, typically a collection, that satisfies sort.Interface can be sorted by the routines in this package. The methods require that the elements of the collection be enumerated by an integer index.</source>
          <target state="translated">一个类型,通常是一个集合,它满足sort.Interface可以通过这个包中的例程进行排序。这些方法要求集合中的元素用一个整数索引来列举。</target>
        </trans-unit>
        <trans-unit id="a26264b4c327dfcbc3830f08e7c5eca9935077d1" translate="yes" xml:space="preserve">
          <source>A uintptr is an integer, not a reference. Converting a Pointer to a uintptr creates an integer value with no pointer semantics. Even if a uintptr holds the address of some object, the garbage collector will not update that uintptr's value if the object moves, nor will that uintptr keep the object from being reclaimed.</source>
          <target state="translated">uintptr是一个整数,而不是一个引用。将一个Pointer转换为uintptr会创建一个没有指针语义的整数值。即使一个uintptr持有某个对象的地址,如果对象移动,垃圾收集器也不会更新该uintptr的值,该uintptr也不会使对象不被回收。</target>
        </trans-unit>
        <trans-unit id="60de15bb31497f8a101bfbdc15deafcffe0040e6" translate="yes" xml:space="preserve">
          <source>A valid signature is indicated by returning a nil error. digest must be the result of hashing the input message using the given hash function. The opts argument may be nil, in which case sensible defaults are used. opts.Hash is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6357f4b1d95e0ce37eebd11835deedd5ee68808" translate="yes" xml:space="preserve">
          <source>A value can be one of several &quot;attribute classes&quot; defined by DWARF. The Go types corresponding to each class are:</source>
          <target state="translated">一个值可以是DWARF定义的几个 &quot;属性类 &quot;之一。与每个类别相对应的围棋类型是:</target>
        </trans-unit>
        <trans-unit id="6ca0e97732ee145c6b13c705a240bbab4a01b83c" translate="yes" xml:space="preserve">
          <source>A variable's scope extends to the &quot;end&quot; action of the control structure (&quot;if&quot;, &quot;with&quot;, or &quot;range&quot;) in which it is declared, or to the end of the template if there is no such control structure. A template invocation does not inherit variables from the point of its invocation.</source>
          <target state="translated">变量的范围扩展到声明它的控制结构(&quot;if&quot;、&quot;with &quot;或 &quot;range&quot;)的 &quot;结束 &quot;操作,如果没有这样的控制结构,则扩展到模板的结束。模板调用不会从其调用点继承变量。</target>
        </trans-unit>
        <trans-unit id="277f2ef6de143a1e0bb8964486b9103bd5a3dfcf" translate="yes" xml:space="preserve">
          <source>A very simplified example showing where KeepAlive is required:</source>
          <target state="translated">一个非常简化的例子显示了需要KeepAlive的地方。</target>
        </trans-unit>
        <trans-unit id="eebb7aaedcbbc7945cea32525b4cdf890bdf1fc6" translate="yes" xml:space="preserve">
          <source>A wrapped function triggered during a call from Go to JavaScript gets executed on the same goroutine. A wrapped function triggered by JavaScript's event loop gets executed on an extra goroutine. Blocking operations in the wrapped function will block the event loop. As a consequence, if one wrapped function blocks, other wrapped funcs will not be processed. A blocking function should therefore explicitly start a new goroutine.</source>
          <target state="translated">在从Go到JavaScript的调用中触发的封装函数会在同一个goroutine上执行。由JavaScript的事件循环触发的封装函数会在另外一个goroutine上执行。阻断封装函数中的操作会阻断事件循环。因此,如果一个被封装的函数被阻塞,其他被封装的funcs将不会被处理。因此,一个阻塞函数应该明确地启动一个新的goroutine。</target>
        </trans-unit>
        <trans-unit id="8e11b9a7861656f839cf023235f454d8751a6b44" translate="yes" xml:space="preserve">
          <source>A zero value for t means I/O operations will not time out.</source>
          <target state="translated">t的值为零意味着I/O操作不会超时。</target>
        </trans-unit>
        <trans-unit id="49015c1a0e4eec28a8e64a69c22aab5605a9ed24" translate="yes" xml:space="preserve">
          <source>AEAD is a cipher mode providing authenticated encryption with associated data. For a description of the methodology, see</source>
          <target state="translated">AEAD是一种密码模式,提供带有相关数据的认证加密。关于方法论的描述,见</target>
        </trans-unit>
        <trans-unit id="6386009a221e1f55418b7cdc3ea6e0081e79ebfc" translate="yes" xml:space="preserve">
          <source>AIX requires a larger stack for syscalls.</source>
          <target state="translated">AIX需要一个较大的堆栈来进行系统调用。</target>
        </trans-unit>
        <trans-unit id="a103500548f73a0f49e73232e6ab381788940bd2" translate="yes" xml:space="preserve">
          <source>AOffset returns the index of the first element of A that corresponds to the pixel at (x, y).</source>
          <target state="translated">AOffset返回A中对应于(x,y)像素的第一个元素的索引。</target>
        </trans-unit>
        <trans-unit id="a3a55e32c78ce3caeb7ecef53c05aa71e685921c" translate="yes" xml:space="preserve">
          <source>ASCII character classes:</source>
          <target state="translated">ASCII字符类。</target>
        </trans-unit>
        <trans-unit id="dfa0d565701c5ffd212df5f6c41e07c13104217e" translate="yes" xml:space="preserve">
          <source>ASN.1 class types represent the namespace of the tag.</source>
          <target state="translated">ASN.1类类型代表标签的名称空间。</target>
        </trans-unit>
        <trans-unit id="94a132b5e73edb52effd7e957ed89df7719d6948" translate="yes" xml:space="preserve">
          <source>ASN.1 tags represent the type of the following object.</source>
          <target state="translated">ASN.1标签表示下列对象的类型:</target>
        </trans-unit>
        <trans-unit id="fafb344d4664552bfbe22ad591e49b7c95b5c8a5" translate="yes" xml:space="preserve">
          <source>Abs</source>
          <target state="translated">Abs</target>
        </trans-unit>
        <trans-unit id="19946b96a18fb5a61fbdcba6ee58a2bae2a9f4fd" translate="yes" xml:space="preserve">
          <source>Abs returns an absolute representation of path. If the path is not absolute it will be joined with the current working directory to turn it into an absolute path. The absolute path name for a given file is not guaranteed to be unique. Abs calls Clean on the result.</source>
          <target state="translated">Abs返回路径的绝对值。如果路径不是绝对的,它将与当前的工作目录连接起来,将其变成绝对路径。给定文件的绝对路径名不保证是唯一的。Abs会对结果调用Clean。</target>
        </trans-unit>
        <trans-unit id="98c1dba71e48002668b64c9af03e2c7ed77c3775" translate="yes" xml:space="preserve">
          <source>Abs returns the absolute value (also called the modulus) of x.</source>
          <target state="translated">Abs返回x的绝对值(也称为模数)。</target>
        </trans-unit>
        <trans-unit id="ea6f0b4dac884978efb8a2a3ce802681b993d2d8" translate="yes" xml:space="preserve">
          <source>Abs returns the absolute value of x.</source>
          <target state="translated">Abs返回x的绝对值。</target>
        </trans-unit>
        <trans-unit id="852b904fc647c005799087d9e0034bfb32f26290" translate="yes" xml:space="preserve">
          <source>Abs sets z to the (possibly rounded) value |x| (the absolute value of x) and returns z.</source>
          <target state="translated">Abs将z设置为(可能是四舍五入)值|x|(x的绝对值)并返回z。</target>
        </trans-unit>
        <trans-unit id="b3ca403f8d39ff7d494165748328771f2b7bbdb5" translate="yes" xml:space="preserve">
          <source>Abs sets z to |x| (the absolute value of x) and returns z.</source>
          <target state="translated">Abs将z设为|x|(x的绝对值)并返回z。</target>
        </trans-unit>
        <trans-unit id="b3397fc6849a3177e96f3dc3f920d47867094eeb" translate="yes" xml:space="preserve">
          <source>Acc returns the accuracy of x produced by the most recent operation, unless explicitly documented otherwise by that operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae77eeba4d31564d88f515ff5369514989cb2f2d" translate="yes" xml:space="preserve">
          <source>Acc returns the accuracy of x produced by the most recent operation.</source>
          <target state="translated">Acc 返回最近一次操作产生的 x 的精度。</target>
        </trans-unit>
        <trans-unit id="0362299cc7e336214cb347eec2f94f2bdb92e7da" translate="yes" xml:space="preserve">
          <source>Accept accepts connections on the listener and serves requests for each incoming connection. Accept blocks until the listener returns a non-nil error. The caller typically invokes Accept in a go statement.</source>
          <target state="translated">Accept在监听器上接受连接,并为每个传入的连接提供请求。Accept会阻塞,直到监听器返回一个非nil错误。调用者通常在go语句中调用Accept。</target>
        </trans-unit>
        <trans-unit id="57eaa16ddc7c7646a44dc64075488d9952239919" translate="yes" xml:space="preserve">
          <source>Accept accepts connections on the listener and serves requests to DefaultServer for each incoming connection. Accept blocks; the caller typically invokes it in a go statement.</source>
          <target state="translated">Accept在监听器上接受连接,并为每个传入的连接向DefaultServer提供请求。Accept是块;调用者通常在go语句中调用它。</target>
        </trans-unit>
        <trans-unit id="423f068caff20db5aabcaa680f972ba550429b79" translate="yes" xml:space="preserve">
          <source>Accept implements the Accept method in the Listener interface. Returned connections will be of type *UnixConn.</source>
          <target state="translated">Accept实现了Listener接口中的Accept方法。返回的连接将是*UnixConn类型。</target>
        </trans-unit>
        <trans-unit id="7e027066959a798df007c741aaa3722942174acb" translate="yes" xml:space="preserve">
          <source>Accept implements the Accept method in the Listener interface; it waits for the next call and returns a generic Conn.</source>
          <target state="translated">Accept实现了Listener接口中的Accept方法;它等待下一次调用并返回一个通用的Conn。</target>
        </trans-unit>
        <trans-unit id="7f0dc51c4dcc23b2474ab41ecb5ead25a053962d" translate="yes" xml:space="preserve">
          <source>AcceptTCP accepts the next incoming call and returns the new connection.</source>
          <target state="translated">AcceptTCP接受下一个来电并返回新的连接。</target>
        </trans-unit>
        <trans-unit id="afbe83d1557a2732b88156a14bcd7fec9705a897" translate="yes" xml:space="preserve">
          <source>AcceptUnix accepts the next incoming call and returns the new connection.</source>
          <target state="translated">AcceptUnix接受下一个来电并返回新的连接。</target>
        </trans-unit>
        <trans-unit id="a1204f16b1e7a74c87931ad0f07bf33ea0b083d5" translate="yes" xml:space="preserve">
          <source>Accuracy describes the rounding error produced by the most recent operation that generated a Float value, relative to the exact value.</source>
          <target state="translated">准确度描述了相对于精确值而言,最近一次生成Float值的操作所产生的舍入误差。</target>
        </trans-unit>
        <trans-unit id="a3a86c10c26f951f6f2f070ab18bc1cb2a65e440" translate="yes" xml:space="preserve">
          <source>Acos</source>
          <target state="translated">Acos</target>
        </trans-unit>
        <trans-unit id="9ec162a3f0eb0d539229eaef831d34b303a9dc5e" translate="yes" xml:space="preserve">
          <source>Acos returns the arccosine, in radians, of x.</source>
          <target state="translated">Acos 返回 x 的 arccosine,单位为弧度。</target>
        </trans-unit>
        <trans-unit id="7a975a4c783d13717e86d77c53ecde8ac7934025" translate="yes" xml:space="preserve">
          <source>Acos returns the inverse cosine of x.</source>
          <target state="translated">Acos返回x的反余弦。</target>
        </trans-unit>
        <trans-unit id="cf25bedca9a3b72e65c01ff90e81f6a09baa5d69" translate="yes" xml:space="preserve">
          <source>Acosh</source>
          <target state="translated">Acosh</target>
        </trans-unit>
        <trans-unit id="473dc4a14e53c4e4b4da1925bd0307c4f77ea728" translate="yes" xml:space="preserve">
          <source>Acosh returns the inverse hyperbolic cosine of x.</source>
          <target state="translated">Acosh返回x的反双曲余弦。</target>
        </trans-unit>
        <trans-unit id="34ab3eeafa84c841f51a4ab029c76137c950219d" translate="yes" xml:space="preserve">
          <source>ActionNode holds an action (something bounded by delimiters). Control actions have their own nodes; ActionNode represents simple ones such as field evaluations and parenthesized pipelines.</source>
          <target state="translated">ActionNode持有一个动作(由定界符限定的东西)。控制动作有自己的节点;ActionNode表示简单的动作,如字段评估和括号内的管道。</target>
        </trans-unit>
        <trans-unit id="c3cd636a585b20c40ac2df5ffb403e83cb2eef51" translate="yes" xml:space="preserve">
          <source>Actions</source>
          <target state="translated">Actions</target>
        </trans-unit>
        <trans-unit id="e10171b115b80f0812f3bc6096a1b7a8d483bee0" translate="yes" xml:space="preserve">
          <source>Add adds an Error with given position and error message to an ErrorList.</source>
          <target state="translated">添加将一个给定位置和错误信息的错误添加到错误列表中。</target>
        </trans-unit>
        <trans-unit id="fc94957ebb8a3766a3ddd6d8708dd83346338038" translate="yes" xml:space="preserve">
          <source>Add adds delta to the *Int value stored under the given map key.</source>
          <target state="translated">添加将delta添加到给定map键下存储的*Int值。</target>
        </trans-unit>
        <trans-unit id="15b0f7deabf48f6522decffbdc31da06a1ce200f" translate="yes" xml:space="preserve">
          <source>Add adds delta to v.</source>
          <target state="translated">添加将delta添加到v。</target>
        </trans-unit>
        <trans-unit id="00d98d0fbeab0413ea8bf940cbb8eed92cb4cf17" translate="yes" xml:space="preserve">
          <source>Add adds delta, which may be negative, to the WaitGroup counter. If the counter becomes zero, all goroutines blocked on Wait are released. If the counter goes negative, Add panics.</source>
          <target state="translated">Add将delta添加到WaitGroup计数器上,可能是负数。如果计数器为零,所有在Wait上被阻塞的goroutine都被释放。如果计数器变成负数,Add就会惊慌失措。</target>
        </trans-unit>
        <trans-unit id="06d67ceb15cbe764f4e2559821764917fc9be46e" translate="yes" xml:space="preserve">
          <source>Add adds the current execution stack to the profile, associated with value. Add stores value in an internal map, so value must be suitable for use as a map key and will not be garbage collected until the corresponding call to Remove. Add panics if the profile already contains a stack for value.</source>
          <target state="translated">Add将当前执行栈添加到配置文件中,与value相关联。Add将value存储在内部映射中,所以value必须适合作为映射键使用,并且在相应调用Remove之前不会被垃圾回收。如果配置文件中已经包含了value的堆栈,那么Add就会惊慌失措。</target>
        </trans-unit>
        <trans-unit id="a7fe05fac6821303f4013d3a0551fa7da8da7b91" translate="yes" xml:space="preserve">
          <source>Add adds the key, value pair to the header. It appends to any existing values associated with key.</source>
          <target state="translated">添加将键、值对添加到页眉。它附加到任何与key相关联的现有值上。</target>
        </trans-unit>
        <trans-unit id="5f1b2275acb843bf0e477760c4f63abe02e338d9" translate="yes" xml:space="preserve">
          <source>Add adds the key, value pair to the header. It appends to any existing values associated with key. The key is case insensitive; it is canonicalized by CanonicalHeaderKey.</source>
          <target state="translated">添加将键、值对添加到页眉。它附加到任何与key相关联的现有值上。key不区分大小写;它由CanonicalHeaderKey规范化。</target>
        </trans-unit>
        <trans-unit id="0faf3a11d8aff451702ae67094983396accac447" translate="yes" xml:space="preserve">
          <source>Add adds the named field (which should start with a period) to the end of the chain.</source>
          <target state="translated">添加将命名的字段(应该以句号开头)添加到链的末端。</target>
        </trans-unit>
        <trans-unit id="278b0456faaade1119bfe47b6df98c28eccf61ea" translate="yes" xml:space="preserve">
          <source>Add adds the value to key. It appends to any existing values associated with key.</source>
          <target state="translated">添加将值添加到键上。它附加到与key相关联的任何现有值上。</target>
        </trans-unit>
        <trans-unit id="b6f60549ee0cfc5f32434c271b42c44b06989961" translate="yes" xml:space="preserve">
          <source>Add returns the rectangle r translated by p.</source>
          <target state="translated">Add 返回由 p 翻译的矩形 r。</target>
        </trans-unit>
        <trans-unit id="585629a6740dccaf70f625ce04affb8226c66b7f" translate="yes" xml:space="preserve">
          <source>Add returns the sum with carry of x, y and carry: sum = x + y + carry. The carry input must be 0 or 1; otherwise the behavior is undefined. The carryOut output is guaranteed to be 0 or 1.</source>
          <target state="translated">Add 返回 x、y 和 carry 的和:sum=x+y+carry。carry输入必须是0或1,否则行为未定义。carryOut输出保证为0或1。</target>
        </trans-unit>
        <trans-unit id="0afa824f30d215458f4a419b67e46124f7493469" translate="yes" xml:space="preserve">
          <source>Add returns the time t+d.</source>
          <target state="translated">添加返回时间t+d。</target>
        </trans-unit>
        <trans-unit id="c95f0248051392a11a12a05cf81cce547a8b8244" translate="yes" xml:space="preserve">
          <source>Add returns the vector p+q.</source>
          <target state="translated">Add返回向量p+q。</target>
        </trans-unit>
        <trans-unit id="ba245a71af4ccdd1f591263ac6536305db2bed13" translate="yes" xml:space="preserve">
          <source>Add sets z to the rounded sum x+y and returns z. If z's precision is 0, it is changed to the larger of x's or y's precision before the operation. Rounding is performed according to z's precision and rounding mode; and z's accuracy reports the result error relative to the exact (not rounded) result. Add panics with ErrNaN if x and y are infinities with opposite signs. The value of z is undefined in that case.</source>
          <target state="translated">如果z的精度为0,则在操作前将其改为x或y的精度中较大的一个。四舍五入是根据z的精度和四舍五入模式进行的;而z的精度则报告了相对于精确(未四舍五入)结果的结果误差。如果x和y是无穷大,且符号相反,则用ErrNaN添加恐慌。在这种情况下,z的值是未定义的。</target>
        </trans-unit>
        <trans-unit id="00590074ebcc2f548e280599ea5c32c80f81328b" translate="yes" xml:space="preserve">
          <source>Add sets z to the sum x+y and returns z.</source>
          <target state="translated">加集z为x+y之和,并返回z。</target>
        </trans-unit>
        <trans-unit id="19b629dca8e7cec87881e6e14e8d485f3a76d996" translate="yes" xml:space="preserve">
          <source>Add32 returns the sum with carry of x, y and carry: sum = x + y + carry. The carry input must be 0 or 1; otherwise the behavior is undefined. The carryOut output is guaranteed to be 0 or 1.</source>
          <target state="translated">Add32返回x、y和carry的和:sum=x+y+carry。carry输入必须是0或1,否则行为未定义。carryOut输出保证为0或1。</target>
        </trans-unit>
        <trans-unit id="5e4e45028b02f584b4a95d4b8950f85261cbe854" translate="yes" xml:space="preserve">
          <source>Add64 returns the sum with carry of x, y and carry: sum = x + y + carry. The carry input must be 0 or 1; otherwise the behavior is undefined. The carryOut output is guaranteed to be 0 or 1.</source>
          <target state="translated">Add64返回x、y和carry的和:sum=x+y+carry。carry输入必须是0或1,否则行为未定义。carryOut输出保证为0或1。</target>
        </trans-unit>
        <trans-unit id="6c9c92bcc797de932d07b084cf008348cb858dd9" translate="yes" xml:space="preserve">
          <source>AddCert adds a certificate to a pool.</source>
          <target state="translated">AddCert 向池中添加证书。</target>
        </trans-unit>
        <trans-unit id="0a9b8624a8f1758a2161fd22c09c59c0e306d4b0" translate="yes" xml:space="preserve">
          <source>AddCookie adds a cookie to the request. Per RFC 6265 section 5.4, AddCookie does not attach more than one Cookie header field. That means all cookies, if any, are written into the same line, separated by semicolon.</source>
          <target state="translated">AddCookie会在请求中添加一个Cookie。根据 RFC 6265 第 5.4 节,AddCookie 不会附加一个以上的 Cookie 头字段。这意味着所有的Cookie(如果有的话)都会被写入同一行,用分号隔开。</target>
        </trans-unit>
        <trans-unit id="56654626c2de77a962a391834c7fd81bfd34139b" translate="yes" xml:space="preserve">
          <source>AddCookie adds a cookie to the request. Per RFC 6265 section 5.4, AddCookie does not attach more than one Cookie header field. That means all cookies, if any, are written into the same line, separated by semicolon. AddCookie only sanitizes c's name and value, and does not sanitize a Cookie header already present in the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e189525dfaea0418dd309a6cb7ebfcae4199a62e" translate="yes" xml:space="preserve">
          <source>AddDate normalizes its result in the same way that Date does, so, for example, adding one month to October 31 yields December 1, the normalized form for November 31.</source>
          <target state="translated">AddDate对其结果进行了与Date相同的归一化处理,因此,例如,在10月31日的基础上增加一个月,就会得到12月1日,即11月31日的归一化形式。</target>
        </trans-unit>
        <trans-unit id="ea940d1bbc1f192f224ace60353e0b1750927e23" translate="yes" xml:space="preserve">
          <source>AddDate returns the time corresponding to adding the given number of years, months, and days to t. For example, AddDate(-1, 2, 3) applied to January 1, 2011 returns March 4, 2010.</source>
          <target state="translated">例如,AddDate(-1,2,3)应用于2011年1月1日,返回2010年3月4日。</target>
        </trans-unit>
        <trans-unit id="de1dbc1a1a38094582ff758395d64a9379927734" translate="yes" xml:space="preserve">
          <source>AddExtensionType sets the MIME type associated with the extension ext to typ. The extension should begin with a leading dot, as in &quot;.html&quot;.</source>
          <target state="translated">AddExtensionType 将与扩展名 ext 相关联的 MIME 类型设置为 typ。扩展名应该以前导点开始,如&quot;.html&quot;。</target>
        </trans-unit>
        <trans-unit id="f552f87900c0ec0fe5963b96881b2772f3c33e1f" translate="yes" xml:space="preserve">
          <source>AddFile adds a new file with a given filename, base offset, and file size to the file set s and returns the file. Multiple files may have the same name. The base offset must not be smaller than the FileSet's Base(), and size must not be negative. As a special case, if a negative base is provided, the current value of the FileSet's Base() is used instead.</source>
          <target state="translated">AddFile将一个给定文件名、基本偏移量和文件大小的新文件添加到文件集s中,并返回该文件。多个文件可以有相同的名字。基本偏移量不能小于FileSet的Base(),大小不能为负值。作为一种特殊情况,如果提供了一个负基数,则使用FileSet的Base()的当前值来代替。</target>
        </trans-unit>
        <trans-unit id="1fedd35de06c52dffbb471fbdba27aee8feba58b" translate="yes" xml:space="preserve">
          <source>AddFloat adds delta to the *Float value stored under the given map key.</source>
          <target state="translated">AddFloat将delta添加到存储在给定地图键下的*Float值。</target>
        </trans-unit>
        <trans-unit id="5858ca5305a5b0fe80c5593ab2bd856981293e79" translate="yes" xml:space="preserve">
          <source>AddInt32 atomically adds delta to *addr and returns the new value.</source>
          <target state="translated">AddInt32原子地将delta加到*addr中,并返回新值。</target>
        </trans-unit>
        <trans-unit id="9c4f53ee7feeae5d257b849acc7471b425441121" translate="yes" xml:space="preserve">
          <source>AddInt64 atomically adds delta to *addr and returns the new value.</source>
          <target state="translated">AddInt64原子性地将delta加到*addr中,并返回新值。</target>
        </trans-unit>
        <trans-unit id="36840a2c5d6044dbaa823fcba841f49af7e9d928" translate="yes" xml:space="preserve">
          <source>AddLine adds the line offset for a new line. The line offset must be larger than the offset for the previous line and smaller than the file size; otherwise the line offset is ignored.</source>
          <target state="translated">AddLine为新行添加行偏移量。行的偏移量必须大于前一行的偏移量,并小于文件大小,否则行的偏移量将被忽略。</target>
        </trans-unit>
        <trans-unit id="c0567d75e1a38f2b988111fee478d46f4c2f3ebb" translate="yes" xml:space="preserve">
          <source>AddLineColumnInfo adds alternative file, line, and column number information for a given file offset. The offset must be larger than the offset for the previously added alternative line info and smaller than the file size; otherwise the information is ignored.</source>
          <target state="translated">AddLineColumnInfo为给定的文件偏移量添加替代文件、行和列号信息。偏移量必须大于之前添加的替代行信息的偏移量,并小于文件大小,否则信息将被忽略。</target>
        </trans-unit>
        <trans-unit id="ac4fdb78ce37a0820e1c7d77936fa4f818920bc5" translate="yes" xml:space="preserve">
          <source>AddLineColumnInfo is typically used to register alternative position information for line directives such as //line filename:line:column.</source>
          <target state="translated">AddLineColumnInfo通常用于注册行指令的替代位置信息,如//行文件名:行:列。</target>
        </trans-unit>
        <trans-unit id="ffb7d16d246eb3ce399562af53b609c59c5c46e3" translate="yes" xml:space="preserve">
          <source>AddLineInfo is like AddLineColumnInfo with a column = 1 argument. It is here for backward-compatibility for code prior to Go 1.11.</source>
          <target state="translated">AddLineInfo 类似于 AddLineColumnInfo,但参数为 column=1。这里是为了向后兼容 Go 1.11 之前的代码。</target>
        </trans-unit>
        <trans-unit id="ab9c2ef1f35d0ef6c0161dd82448b4d74b1c9558" translate="yes" xml:space="preserve">
          <source>AddMethod adds method m unless it is already in the method list.</source>
          <target state="translated">AddMethod添加方法m,除非它已经在方法列表中。</target>
        </trans-unit>
        <trans-unit id="44f221eb4e24f17d42e5bea8d5c27e1378d7d1cc" translate="yes" xml:space="preserve">
          <source>AddParseTree adds parse tree for template with given name and associates it with t. If the template does not already exist, it will create a new one. If the template does exist, it will be replaced.</source>
          <target state="translated">AddParseTree为给定名称的模板添加解析树,并将其与t关联。如果模板不存在,它将创建一个新的模板。如果模板确实存在,它将被替换。</target>
        </trans-unit>
        <trans-unit id="fa814f7aa9538fe65074b6dd9bc3fed3d86acfae" translate="yes" xml:space="preserve">
          <source>AddParseTree associates the argument parse tree with the template t, giving it the specified name. If the template has not been defined, this tree becomes its definition. If it has been defined and already has that name, the existing definition is replaced; otherwise a new template is created, defined, and returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2afd490c78d79c03722b8ea7f5bce321e908078" translate="yes" xml:space="preserve">
          <source>AddParseTree creates a new template with the name and parse tree and associates it with t.</source>
          <target state="translated">AddParseTree创建一个带有名称和解析树的新模板,并将其与t关联。</target>
        </trans-unit>
        <trans-unit id="c4de69a26ff1b5ecf076eb003d3a3839cfa2161b" translate="yes" xml:space="preserve">
          <source>AddSection adds another DWARF section by name. The name should be a DWARF section name such as &quot;.debug_addr&quot;, &quot;.debug_str_offsets&quot;, and so forth. This approach is used for new DWARF sections added in DWARF 5 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7233a75408cb93190ed8d7f01c6ae4749187bad2" translate="yes" xml:space="preserve">
          <source>AddTypes will add one .debug_types section to the DWARF data. A typical object with DWARF version 4 debug info will have multiple .debug_types sections. The name is used for error reporting only, and serves to distinguish one .debug_types section from another.</source>
          <target state="translated">AddTypes将在DWARF数据中添加一个.debug_types部分。一个典型的DWARF版本4调试信息的对象将有多个.debug_types部分。这个名称仅用于错误报告,并用于区分一个.debug_types部分和另一个.debug_types部分。</target>
        </trans-unit>
        <trans-unit id="7731b23781c2390384d6e6975bfd5e70c3626d3b" translate="yes" xml:space="preserve">
          <source>AddUint32 atomically adds delta to *addr and returns the new value. To subtract a signed positive constant value c from x, do AddUint32(&amp;amp;x, ^uint32(c-1)). In particular, to decrement x, do AddUint32(&amp;amp;x, ^uint32(0)).</source>
          <target state="translated">AddUint32以原子方式将增量添加到* addr并返回新值。要从x减去有符号的正常数值c，请执行AddUint32（＆x，^ uint32（c-1））。特别是要减少x，请执行AddUint32（＆x，^ uint32（0））。</target>
        </trans-unit>
        <trans-unit id="d25bd4fd8252711152a39b3307b6d0eea26273a5" translate="yes" xml:space="preserve">
          <source>AddUint64 atomically adds delta to *addr and returns the new value. To subtract a signed positive constant value c from x, do AddUint64(&amp;amp;x, ^uint64(c-1)). In particular, to decrement x, do AddUint64(&amp;amp;x, ^uint64(0)).</source>
          <target state="translated">AddUint64以原子方式将增量添加到* addr并返回新值。要从x减去有符号正常数值c，请执行AddUint64（＆x，^ uint64（c-1））。特别是要减少x，请执行AddUint64（＆x，^ uint64（0））。</target>
        </trans-unit>
        <trans-unit id="190af1abbf968aed5f57b4bc0b0e928d872bce0e" translate="yes" xml:space="preserve">
          <source>AddUintptr atomically adds delta to *addr and returns the new value.</source>
          <target state="translated">AddUintptr原子性地将delta加到*addr中,并返回新值。</target>
        </trans-unit>
        <trans-unit id="c0e76ffa9ef9504f9f128ec85ee5c8a4cf06c03b" translate="yes" xml:space="preserve">
          <source>Adding the file will set the file set's Base() value to base + size + 1 as the minimum base value for the next file. The following relationship exists between a Pos value p for a given file offset offs:</source>
          <target state="translated">添加文件将把文件集的Base()值设置为base+size+1,作为下一个文件的最小基值。给定文件偏移量offs的Pos值p之间存在以下关系。</target>
        </trans-unit>
        <trans-unit id="df900036bb7195309dce533c4d0b19c0a6bb6aa8" translate="yes" xml:space="preserve">
          <source>Additional extensions may be handled by clients.</source>
          <target state="translated">额外的扩展可以由客户处理。</target>
        </trans-unit>
        <trans-unit id="286cb9fdf0d392fc50790805d404a305f0ef765d" translate="yes" xml:space="preserve">
          <source>Additionally, files containing a certificate and matching private key for the server must be provided. If the certificate is signed by a certificate authority, the certFile should be the concatenation of the server's certificate, any intermediates, and the CA's certificate.</source>
          <target state="translated">此外,必须提供包含服务器的证书和匹配的私钥的文件。如果证书是由证书颁发机构签署的,certFile应该是服务器的证书、任何中介机构和CA的证书的连接。</target>
        </trans-unit>
        <trans-unit id="af076ce467f191403f88e869bec4629019ff387d" translate="yes" xml:space="preserve">
          <source>Additionally, if Notify is called, and Windows sends CTRL_CLOSE_EVENT, CTRL_LOGOFF_EVENT or CTRL_SHUTDOWN_EVENT to the process, Notify will return syscall.SIGTERM. Unlike Control-C and Control-Break, Notify does not change process behavior when either CTRL_CLOSE_EVENT, CTRL_LOGOFF_EVENT or CTRL_SHUTDOWN_EVENT is received - the process will still get terminated unless it exits. But receiving syscall.SIGTERM will give the process an opportunity to clean up before termination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239d133a84587b1f7b4e745e2f11b398b53b3f15" translate="yes" xml:space="preserve">
          <source>Addr represents a network end point address.</source>
          <target state="translated">Addr表示网络端点地址。</target>
        </trans-unit>
        <trans-unit id="607466f9e7067a542b3e6feb6ba15f2a6069324c" translate="yes" xml:space="preserve">
          <source>Addr returns a pointer value representing the address of v. It panics if CanAddr() returns false. Addr is typically used to obtain a pointer to a struct field or slice element in order to call a method that requires a pointer receiver.</source>
          <target state="translated">Addr返回一个代表v的地址的指针值,如果CanAddr()返回false,它就会恐慌。Addr通常用于获取结构域或分片元素的指针,以便调用需要指针接收器的方法。</target>
        </trans-unit>
        <trans-unit id="8172f3ce94b65e80356707d217486354f76500a8" translate="yes" xml:space="preserve">
          <source>Addr returns the listener's network address, a *TCPAddr. The Addr returned is shared by all invocations of Addr, so do not modify it.</source>
          <target state="translated">Addr返回监听器的网络地址,即*TCPAddr。返回的Addr是所有调用Addr的次数所共享的,所以不要修改它。</target>
        </trans-unit>
        <trans-unit id="d5668cd5de55531b485b11a427f6aafc99df086b" translate="yes" xml:space="preserve">
          <source>Addr returns the listener's network address. The Addr returned is shared by all invocations of Addr, so do not modify it.</source>
          <target state="translated">Addr返回监听器的网络地址。返回的Addr是所有调用Addr的次数所共享的,所以不要修改它。</target>
        </trans-unit>
        <trans-unit id="bd1232cd9a9fc08fd91a563f464ef4974a2c19c0" translate="yes" xml:space="preserve">
          <source>Address represents a single mail address. An address such as &quot;Barry Gibbs &amp;lt;bg@example.com&amp;gt;&quot; is represented as Address{Name: &quot;Barry Gibbs&quot;, Address: &quot;bg@example.com&quot;}.</source>
          <target state="translated">地址代表一个邮件地址。诸如&amp;ldquo; Barry Gibbs &amp;lt;bg@example.com&amp;gt;&amp;rdquo;的地址表示为地址{名称：&amp;ldquo; Barry Gibbs&amp;rdquo;，地址：&amp;ldquo; bg@example.com&amp;rdquo;}。</target>
        </trans-unit>
        <trans-unit id="31092091ef6169e771115e3f9fb45fb917a09f6a" translate="yes" xml:space="preserve">
          <source>AddressList parses the named header field as a list of addresses.</source>
          <target state="translated">AddressList将命名的头字段解析为地址列表。</target>
        </trans-unit>
        <trans-unit id="1428b03f1babcfa0815c042e31c28898d265ee15" translate="yes" xml:space="preserve">
          <source>AddressSize returns the size in bytes of addresses in the current compilation unit.</source>
          <target state="translated">AddressSize 返回当前编译单元中的地址大小,以字节为单位。</target>
        </trans-unit>
        <trans-unit id="f60869ac80093a039f471c4424eaf534fefaa9db" translate="yes" xml:space="preserve">
          <source>Addressable reports whether the corresponding expression is addressable (&lt;a href=&quot;https://golang.org/ref/spec#Address_operators&quot;&gt;https://golang.org/ref/spec#Address_operators&lt;/a&gt;).</source>
          <target state="translated">可寻址地址报告相应的表达式是否可寻址（&lt;a href=&quot;https://golang.org/ref/spec#Address_operators&quot;&gt;https://golang.org/ref/spec#Address_operators&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="2390852967aa96229ea563fa30b9c73a89cdae59" translate="yes" xml:space="preserve">
          <source>Addrs returns a list of unicast interface addresses for a specific interface.</source>
          <target state="translated">Addrs 返回一个特定接口的单播接口地址列表。</target>
        </trans-unit>
        <trans-unit id="79ba5e1b3f99abfd54ef8d839ba12bd2ac4d79cb" translate="yes" xml:space="preserve">
          <source>After</source>
          <target state="translated">After</target>
        </trans-unit>
        <trans-unit id="51266c52e2ef76298b0634e50f0e5ca518d1596f" translate="yes" xml:space="preserve">
          <source>After a call to Close, all operations on the connection fail with ErrConnDone.</source>
          <target state="translated">在调用Close后,所有对连接的操作都会失败,ErrConnDone。</target>
        </trans-unit>
        <trans-unit id="4e242d525b986cfee6163e2d5e94dae6540d54c0" translate="yes" xml:space="preserve">
          <source>After a call to Commit or Rollback, all operations on the transaction fail with ErrTxDone.</source>
          <target state="translated">在调用Commit或Rollback后,对事务的所有操作都会以ErrTxDone失败。</target>
        </trans-unit>
        <trans-unit id="9b7cc0b202b5a6cf175ea12cda51cc3b5c865a50" translate="yes" xml:space="preserve">
          <source>After all flags are defined, call</source>
          <target state="translated">在定义了所有标志后,调用</target>
        </trans-unit>
        <trans-unit id="b11552cc3a06865b41f4c91326ff7e31f9e7baf0" translate="yes" xml:space="preserve">
          <source>After calling NextResultSet, the Next method should always be called before scanning. If there are further result sets they may not have rows in the result set.</source>
          <target state="translated">在调用NextResultSet之后,在扫描之前总是应该调用Next方法。如果有进一步的结果集,它们可能在结果集中没有行。</target>
        </trans-unit>
        <trans-unit id="fc109254d6837e645dfea4e00b401bd7b8f10009" translate="yes" xml:space="preserve">
          <source>After changing its configuration, the caller should call Start or StartTLS.</source>
          <target state="translated">改变其配置后,调用者应调用Start或StartTLS。</target>
        </trans-unit>
        <trans-unit id="654d1a15299a9b595ffcb08b8df7cdadf64b5c19" translate="yes" xml:space="preserve">
          <source>After parsing b, any bytes that were leftover and not used to fill val will be returned in rest. When parsing a SEQUENCE into a struct, any trailing elements of the SEQUENCE that do not have matching fields in val will not be included in rest, as these are considered valid elements of the SEQUENCE and not trailing data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902382debcdaed0b05dacf789c63d2774e1d7805" translate="yes" xml:space="preserve">
          <source>After parsing, the arguments following the flags are available as the slice flag.Args() or individually as flag.Arg(i). The arguments are indexed from 0 through flag.NArg()-1.</source>
          <target state="translated">在解析之后,flag后面的参数可以作为分片flag.Args()或者单独作为flag.Arg(i)。参数的索引从0到flag.NArg()-1。</target>
        </trans-unit>
        <trans-unit id="3f1b011e660c77ea973c7163c2f73dcca65df333" translate="yes" xml:space="preserve">
          <source>After reports whether the time instant t is after u.</source>
          <target state="translated">后报告时间瞬间t是否在u之后。</target>
        </trans-unit>
        <trans-unit id="8e172e56ebdd816679ce623111d437357fa222a7" translate="yes" xml:space="preserve">
          <source>After waits for the duration to elapse and then sends the current time on the returned channel. It is equivalent to NewTimer(d).C. The underlying Timer is not recovered by the garbage collector until the timer fires. If efficiency is a concern, use NewTimer instead and call Timer.Stop if the timer is no longer needed.</source>
          <target state="translated">后等待持续时间过去,然后在返回的通道上发送当前时间。它相当于NewTimer(d).C.底层的Timer不会被垃圾回收器回收,直到定时器开火。如果担心效率,可以使用NewTimer代替,如果不再需要定时器,可以调用Timer.Stop。</target>
        </trans-unit>
        <trans-unit id="e4c3a4e3ecbfcb3d8ebe9bb146b442a17039a6e4" translate="yes" xml:space="preserve">
          <source>AfterFunc waits for the duration to elapse and then calls f in its own goroutine. It returns a Timer that can be used to cancel the call using its Stop method.</source>
          <target state="translated">AfterFunc等待持续时间过去,然后在自己的goroutine中调用f。它返回一个Timer,可以用它的Stop方法来取消调用。</target>
        </trans-unit>
        <trans-unit id="52203fa166bcb814e34b7bfd717ce5e34da01f93" translate="yes" xml:space="preserve">
          <source>Alert logs a message with severity LOG_ALERT, ignoring the severity passed to New.</source>
          <target state="translated">Alert记录一条严重性为LOG_ALERT的消息,忽略传递给New的严重性。</target>
        </trans-unit>
        <trans-unit id="cf50c6d0c4f08187d0f0ca8d3062d2660efd4a9b" translate="yes" xml:space="preserve">
          <source>AlgorithmIdentifier represents the ASN.1 structure of the same name. See RFC 5280, section 4.1.1.2.</source>
          <target state="translated">AlgorithmIdentifier表示同名的ASN.1结构。参见RFC 5280,4.1.1.2节。</target>
        </trans-unit>
        <trans-unit id="3a2ca48b60bd6b1a14d6a2ac1a6041efe4ba7a9d" translate="yes" xml:space="preserve">
          <source>Alignof takes an expression x of any type and returns the required alignment of a hypothetical variable v as if v was declared via var v = x. It is the largest value m such that the address of v is always zero mod m. It is the same as the value returned by reflect.TypeOf(x).Align(). As a special case, if a variable s is of struct type and f is a field within that struct, then Alignof(s.f) will return the required alignment of a field of that type within a struct. This case is the same as the value returned by reflect.TypeOf(s.f).FieldAlign(). The return value of Alignof is a Go constant.</source>
          <target state="translated">Alignof接受一个任意类型的表达式x,并返回一个假设变量v的所需对齐方式,就像v是通过var v=x声明的一样。它是一个最大的值m,这样v的地址总是0 mod m。作为一种特殊情况,如果一个变量s是结构体类型,并且f是该结构体中的一个字段,那么Alignof(s.f)将返回结构体中该类型字段的所需对齐。这种情况与reflect.TypeOf(s.f).FieldAlign()返回的值相同。Alignof的返回值是一个Go常量。</target>
        </trans-unit>
        <trans-unit id="6dd2631470df922a18ced4ba1130846e8c3b73b1" translate="yes" xml:space="preserve">
          <source>All Conn implementations should implement the following interfaces: Pinger, SessionResetter, and Validator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b76a535f3a824bc0e7af6e39f77b353583e557" translate="yes" xml:space="preserve">
          <source>All arguments to be scanned must be either pointers to basic types or implementations of the Scanner interface.</source>
          <target state="translated">所有要扫描的参数必须是指向基本类型的指针或Scanner接口的实现。</target>
        </trans-unit>
        <trans-unit id="3efe4c6fa30457a9aff5de61e746ace1b26467a8" translate="yes" xml:space="preserve">
          <source>All characters are UTF-8-encoded code points.</source>
          <target state="translated">所有字符都是UTF-8编码的码点。</target>
        </trans-unit>
        <trans-unit id="2314ab5383e8c5b7223fc5076bd94c65406b693b" translate="yes" xml:space="preserve">
          <source>All declaration nodes implement the Decl interface.</source>
          <target state="translated">所有声明节点都实现了Decl接口。</target>
        </trans-unit>
        <trans-unit id="f71fdc2653fada1accdfeb2fa2bec4f375c3fa23" translate="yes" xml:space="preserve">
          <source>All errors begin with the string &quot;%!&quot; followed sometimes by a single character (the verb) and end with a parenthesized description.</source>
          <target state="translated">所有的错误都是以字符串&quot;%!&quot;开头,有时后面还跟着一个字符(动词),最后用括号说明。</target>
        </trans-unit>
        <trans-unit id="dea399ca9139a5569fa2c17121e21527d0f13e27" translate="yes" xml:space="preserve">
          <source>All expression nodes implement the Expr interface.</source>
          <target state="translated">所有的表达式节点都实现了Expr接口。</target>
        </trans-unit>
        <trans-unit id="439bb2dad8a28e5fb2b434cb4e6612e2a16c7b96" translate="yes" xml:space="preserve">
          <source>All init functions are run on the startup thread. Calling LockOSThread from an init function will cause the main function to be invoked on that thread.</source>
          <target state="translated">所有的init函数都在启动线程上运行。从init函数中调用LockOSThread会导致主函数在该线程上被调用。</target>
        </trans-unit>
        <trans-unit id="97c6b4dd788d20932f24c2193fdad47d4daae398" translate="yes" xml:space="preserve">
          <source>All node types implement the Node interface.</source>
          <target state="translated">所有节点类型都实现了Node接口。</target>
        </trans-unit>
        <trans-unit id="6f0c09894c725d3c9e77a6a63f1453b76eef2346" translate="yes" xml:space="preserve">
          <source>All other slices and arrays are sent as an unsigned count followed by that many elements using the standard gob encoding for their type, recursively.</source>
          <target state="translated">所有其他的切片和数组都是以无符号计数的形式发送,后面跟着那么多元素,使用标准的gob编码来表示它们的类型,递归。</target>
        </trans-unit>
        <trans-unit id="e9146cc320b30397d729a875d3b4f8e2bc63e8c3" translate="yes" xml:space="preserve">
          <source>All statement nodes implement the Stmt interface.</source>
          <target state="translated">所有报表节点都实现了Stmt接口。</target>
        </trans-unit>
        <trans-unit id="65ae9abe1fa8712f97e1beed2b48172fff49a778" translate="yes" xml:space="preserve">
          <source>All the hash.Hash implementations returned by this package also implement encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to marshal and unmarshal the internal state of the hash.</source>
          <target state="translated">这个包返回的所有hash.Hash实现还实现了encoding.BinaryMarshaler和encoding.BinaryUnmarshaler来对hash的内部状态进行marshal和unmarshal。</target>
        </trans-unit>
        <trans-unit id="ee4b09053ce6dc1a057246d17d4fec0360be7d1c" translate="yes" xml:space="preserve">
          <source>AllocedBytesPerOp returns the &quot;B/op&quot; metric, which is calculated as r.MemBytes / r.N.</source>
          <target state="translated">AllocedBytesPerOp返回 &quot;B/op &quot;指标,计算公式为r.MemBytes/r.N。</target>
        </trans-unit>
        <trans-unit id="12b2fa12ce7cf5b9e4f9ed48969a1983e0d1d5d2" translate="yes" xml:space="preserve">
          <source>AllocsPerOp returns the &quot;allocs/op&quot; metric, which is calculated as r.MemAllocs / r.N.</source>
          <target state="translated">AllocsPerOp返回 &quot;allocs/op &quot;指标,计算公式为r.MemAllocs/r.N。</target>
        </trans-unit>
        <trans-unit id="badcac1ab432ee1a8a56581e11ba0e5ab9790707" translate="yes" xml:space="preserve">
          <source>AllocsPerRun returns the average number of allocations during calls to f. Although the return value has type float64, it will always be an integral value.</source>
          <target state="translated">AllocsPerRun返回调用f时的平均分配次数,虽然返回值的类型为float64,但它始终是一个积分值。</target>
        </trans-unit>
        <trans-unit id="69f8869e42decf1676089266f7f518cee77fd0af" translate="yes" xml:space="preserve">
          <source>AllocsPerRun sets GOMAXPROCS to 1 during its measurement and will restore it before returning.</source>
          <target state="translated">AllocsPerRun在其测量过程中将GOMAXPROCS设置为1,并在返回前将其恢复。</target>
        </trans-unit>
        <trans-unit id="2b842b60e3487e1d9cdc7af135ff6ba6435574c8" translate="yes" xml:space="preserve">
          <source>Alpha is an in-memory image whose At method returns color.Alpha values.</source>
          <target state="translated">Alpha是一个内存中的图像,其At方法返回color.Alpha值。</target>
        </trans-unit>
        <trans-unit id="1d6556da37edadf737283b435a625d47b77b00a4" translate="yes" xml:space="preserve">
          <source>Alpha represents an 8-bit alpha color.</source>
          <target state="translated">Alpha代表8位的alpha颜色。</target>
        </trans-unit>
        <trans-unit id="eb7ce30976aff039c4b314b9299fbf3b51bf4b5f" translate="yes" xml:space="preserve">
          <source>Alpha16 is an in-memory image whose At method returns color.Alpha16 values.</source>
          <target state="translated">Alpha16是一个内存中的图像,其At方法返回color.Alpha16值。</target>
        </trans-unit>
        <trans-unit id="17f51a9d20c648e3a8adb401d7734bd7422b79ee" translate="yes" xml:space="preserve">
          <source>Alpha16 represents a 16-bit alpha color.</source>
          <target state="translated">Alpha16代表16位的alpha颜色。</target>
        </trans-unit>
        <trans-unit id="fb30b27f413d64a9fb0cbb842f0d9c65ea0f6942" translate="yes" xml:space="preserve">
          <source>Alternatively, new values can be allocated and initialized with factory functions of the form:</source>
          <target state="translated">另外,新的值可以通过工厂函数的形式进行分配和初始化。</target>
        </trans-unit>
        <trans-unit id="e05fd011282817682b1c22d0d70a09154585c4c3" translate="yes" xml:space="preserve">
          <source>Although the package provides access to low-level networking primitives, most clients will need only the basic interface provided by the Dial, Listen, and Accept functions and the associated Conn and Listener interfaces. The crypto/tls package uses the same interfaces and similar Dial and Listen functions.</source>
          <target state="translated">虽然该软件包提供了对低级网络基元的访问,但大多数客户机只需要由Dial、Listen和Accept函数以及相关的Conn和Listener接口提供的基本接口。crypto/tls软件包使用相同的接口和类似的Dial和Listen函数。</target>
        </trans-unit>
        <trans-unit id="4aa6f271ecce01c74386f5cab4917b581ae9b6f4" translate="yes" xml:space="preserve">
          <source>An ASN.1 BIT STRING can be written to a BitString.</source>
          <target state="translated">一个ASN.1 BIT STRING可以写入一个BitString。</target>
        </trans-unit>
        <trans-unit id="3b05462a8e3ed73d565469132de236aba1a72def" translate="yes" xml:space="preserve">
          <source>An ASN.1 ENUMERATED can be written to an Enumerated.</source>
          <target state="translated">一个ASN.1 ENUMERATED可以写入一个Enumerated。</target>
        </trans-unit>
        <trans-unit id="260b18862b10ae0e74a033b94545c3cf7cd4c55e" translate="yes" xml:space="preserve">
          <source>An ASN.1 INTEGER can be written to an int, int32, int64, or *big.Int (from the math/big package). If the encoded value does not fit in the Go type, Unmarshal returns a parse error.</source>
          <target state="translated">一个ASN.1 INTEGER可以被写入int、int32、int64或*big.Int(来自数学/big包)。如果编码值不适合Go类型,Unmarshal会返回一个解析错误。</target>
        </trans-unit>
        <trans-unit id="869b61cb05b1b3e5bee725f577f97c0c1cafb3d4" translate="yes" xml:space="preserve">
          <source>An ASN.1 OBJECT IDENTIFIER can be written to an ObjectIdentifier.</source>
          <target state="translated">一个ASN.1 OBJECT IDENTIFIER可以写入一个ObjectIdentifier。</target>
        </trans-unit>
        <trans-unit id="8230571aad1a64236469fadfb2ef0cabb863fbcb" translate="yes" xml:space="preserve">
          <source>An ASN.1 OCTET STRING can be written to a []byte.</source>
          <target state="translated">ASN.1 OCTET STRING可以写入一个[]字节。</target>
        </trans-unit>
        <trans-unit id="bf2bca6ff0b4d0bb1c60638a2ca6cf2e275df6be" translate="yes" xml:space="preserve">
          <source>An ASN.1 PrintableString, IA5String, or NumericString can be written to a string.</source>
          <target state="translated">一个ASN.1 PrintableString、IA5String或NumericString可以被写入一个字符串。</target>
        </trans-unit>
        <trans-unit id="7e49fd50438627ac23f6a9e8691fbef9762a320b" translate="yes" xml:space="preserve">
          <source>An ASN.1 SEQUENCE OF x or SET OF x can be written to a slice if an x can be written to the slice's element type.</source>
          <target state="translated">一个ASN.1 SEQUENCE OF x或SET OF x可以被写入分片,如果一个x可以被写入分片的元素类型。</target>
        </trans-unit>
        <trans-unit id="faa0a794464c52980812f881a6f05ec60e65cbab" translate="yes" xml:space="preserve">
          <source>An ASN.1 SEQUENCE or SET can be written to a struct if each of the elements in the sequence can be written to the corresponding element in the struct.</source>
          <target state="translated">如果序列中的每个元素都可以写入结构中的相应元素,那么一个ASN.1 SEQUENCE或SET就可以写入结构。</target>
        </trans-unit>
        <trans-unit id="ad20aa7b03987bad2cf797451b15b47646f20ae5" translate="yes" xml:space="preserve">
          <source>An ASN.1 UTCTIME or GENERALIZEDTIME can be written to a time.Time.</source>
          <target state="translated">ASN.1 UTCTIME或GENERALIZEDTIME可以写入一个time.Time。</target>
        </trans-unit>
        <trans-unit id="36aadf8f5498a5d6a7f99a8402775cb348c8f6b5" translate="yes" xml:space="preserve">
          <source>An AddrType represents a machine address type.</source>
          <target state="translated">一个AddrType代表一个机器地址类型。</target>
        </trans-unit>
        <trans-unit id="8d75f2635e147e42345dfd716713a80c0faf359b" translate="yes" xml:space="preserve">
          <source>An AddressParser is an RFC 5322 address parser.</source>
          <target state="translated">AddressParser是一个RFC 5322地址解析器。</target>
        </trans-unit>
        <trans-unit id="751b64ea00145591b831c86aeec73c9cd6e3f193" translate="yes" xml:space="preserve">
          <source>An Array represents an array type.</source>
          <target state="translated">一个数组代表一个数组类型。</target>
        </trans-unit>
        <trans-unit id="e83f825cc4b7a3b11c3d536847a9172d88cd97a4" translate="yes" xml:space="preserve">
          <source>An ArrayType node represents an array or slice type.</source>
          <target state="translated">ArrayType节点代表一个数组或片断类型。</target>
        </trans-unit>
        <trans-unit id="8ac61edaef43e2f85c83e7b3205dbe82f5419012" translate="yes" xml:space="preserve">
          <source>An ArrayType represents a fixed size array type.</source>
          <target state="translated">ArrayType表示一个固定大小的数组类型。</target>
        </trans-unit>
        <trans-unit id="857c276d40ff85b22398af4e95f15e17dfc3761e" translate="yes" xml:space="preserve">
          <source>An AssignStmt node represents an assignment or a short variable declaration.</source>
          <target state="translated">AssignStmt节点表示一个赋值或一个短变量声明。</target>
        </trans-unit>
        <trans-unit id="e8de9651bc85b5cadec1c2186fcfc45df4325dc7" translate="yes" xml:space="preserve">
          <source>An Attr identifies the attribute type in a DWARF Entry's Field.</source>
          <target state="translated">Attr标识DWARF条目字段中的属性类型。</target>
        </trans-unit>
        <trans-unit id="a039b716fe768e4a98f3c47ea1a43617424d2cb0" translate="yes" xml:space="preserve">
          <source>An Attr represents an attribute in an XML element (Name=Value).</source>
          <target state="translated">Attr表示XML元素中的一个属性(Name=Value)。</target>
        </trans-unit>
        <trans-unit id="1b862e215532b08f8993adb353e29f24b113d0d2" translate="yes" xml:space="preserve">
          <source>An Ellipsis node stands for the &quot;...&quot; type in a parameter list or the &quot;...&quot; length in an array type.</source>
          <target state="translated">Ellipsis节点代表参数列表中的&quot;...&quot;类型或数组类型中的&quot;...&quot;长度。</target>
        </trans-unit>
        <trans-unit id="206e1d6d2930e4b55272a8c2ace302d5bebb4d6b" translate="yes" xml:space="preserve">
          <source>An EmptyOp specifies a kind or mixture of zero-width assertions.</source>
          <target state="translated">EmptyOp指定了一种或混合的零宽度断言。</target>
        </trans-unit>
        <trans-unit id="79b1e78fcc680965fe6e575d14194a8c78459d1e" translate="yes" xml:space="preserve">
          <source>An EmptyStmt node represents an empty statement. The &quot;position&quot; of the empty statement is the position of the immediately following (explicit or implicit) semicolon.</source>
          <target state="translated">一个EmptyStmt节点代表一个空语句。空语句的 &quot;位置 &quot;是紧接着(显式或隐式)分号的位置。</target>
        </trans-unit>
        <trans-unit id="cc21548a00526537378e03c232e946ddafc77006" translate="yes" xml:space="preserve">
          <source>An Encoder manages the transmission of type and data information to the other side of a connection. It is safe for concurrent use by multiple goroutines.</source>
          <target state="translated">编码器管理类型和数据信息向连接另一端的传输。它可以被多个goroutine同时使用。</target>
        </trans-unit>
        <trans-unit id="7ec5724a97180ce1fa9f610646dede20f58de73b" translate="yes" xml:space="preserve">
          <source>An Encoder writes JSON values to an output stream.</source>
          <target state="translated">编码器将JSON值写入输出流。</target>
        </trans-unit>
        <trans-unit id="44a80ad51642ec26186393b48e82a0a974e794a4" translate="yes" xml:space="preserve">
          <source>An Encoder writes XML data to an output stream.</source>
          <target state="translated">编码器将XML数据写入输出流。</target>
        </trans-unit>
        <trans-unit id="cd93c235f0bd9a74ea8b32e43f217fd3a3bd805a" translate="yes" xml:space="preserve">
          <source>An Encoding is a radix 32 encoding/decoding scheme, defined by a 32-character alphabet. The most common is the &quot;base32&quot; encoding introduced for SASL GSSAPI and standardized in RFC 4648. The alternate &quot;base32hex&quot; encoding is used in DNSSEC.</source>
          <target state="translated">编码是一种弧度为32的编码/解码方案,由一个32字符的字母表定义。最常见的是为SASL GSSAPI引入的 &quot;base32 &quot;编码,并在RFC 4648中标准化。在DNSSEC中使用的是另一种 &quot;base32hex &quot;编码。</target>
        </trans-unit>
        <trans-unit id="5c6f72e4757281a321975587e037d0edc0910a0b" translate="yes" xml:space="preserve">
          <source>An Encoding is a radix 64 encoding/decoding scheme, defined by a 64-character alphabet. The most common encoding is the &quot;base64&quot; encoding defined in RFC 4648 and used in MIME (RFC 2045) and PEM (RFC 1421). RFC 4648 also defines an alternate encoding, which is the standard encoding with - and _ substituted for + and /.</source>
          <target state="translated">编码是一种基数64的编码/解码方案,由一个64字符的字母表定义。最常见的编码是RFC 4648中定义的 &quot;base64 &quot;编码,并用于MIME(RFC 2045)和PEM(RFC 1421)。RFC 4648还定义了一种备用编码,即用-和_代替+和/的标准编码。</target>
        </trans-unit>
        <trans-unit id="f9fc159c5bbba125ca80971575038639e4c30e15" translate="yes" xml:space="preserve">
          <source>An EndElement represents an XML end element.</source>
          <target state="translated">一个EndElement代表一个XML结束元素。</target>
        </trans-unit>
        <trans-unit id="c2933f1f28cbba0bc7344ba80287c65dff0bc30f" translate="yes" xml:space="preserve">
          <source>An EnumType represents an enumerated type. The only indication of its native integer type is its ByteSize (inside CommonType).</source>
          <target state="translated">一个EnumType表示一个枚举类型。它的本机整数类型的唯一指示是它的ByteSize(在CommonType里面)。</target>
        </trans-unit>
        <trans-unit id="b79e9324c93170d0ebbe1508dc6c4fcc8e187b01" translate="yes" xml:space="preserve">
          <source>An EnumValue represents a single enumeration value.</source>
          <target state="translated">一个EnumValue代表一个单一的枚举值。</target>
        </trans-unit>
        <trans-unit id="9ec3768c8ebcfbb9ce9b3c7a117577939cc3fb5a" translate="yes" xml:space="preserve">
          <source>An Enumerated is represented as a plain int.</source>
          <target state="translated">一个Enumerated表示为一个普通的int。</target>
        </trans-unit>
        <trans-unit id="f06294438639908dac8d5e188fdee9a4acee8b91" translate="yes" xml:space="preserve">
          <source>An ErrNaN panic is raised by a Float operation that would lead to a NaN under IEEE-754 rules. An ErrNaN implements the error interface.</source>
          <target state="translated">根据IEEE-754规则,一个会导致NaN的Float操作会引发ErrNaN恐慌。ErrNaN实现了错误接口。</target>
        </trans-unit>
        <trans-unit id="f54d7aa37ca74152ff50d53a4a9eb371bd8fc6f6" translate="yes" xml:space="preserve">
          <source>An Errno is an unsigned number describing an error condition. It implements the error interface. The zero Errno is by convention a non-error, so code to convert from Errno to error should use:</source>
          <target state="translated">Errno是一个描述错误条件的无符号数字。它实现了错误接口。按照惯例,Errno为零时就是非错误的,所以将Errno转换为错误的代码应该使用。</target>
        </trans-unit>
        <trans-unit id="512d38ad90ecdbb223905a3c98396bc761092f77" translate="yes" xml:space="preserve">
          <source>An Error describes a failure to parse a regular expression and gives the offending expression.</source>
          <target state="translated">错误描述了未能解析正则表达式,并给出了违规表达式。</target>
        </trans-unit>
        <trans-unit id="1c853d687301eacbdc70fc7b2069d367a181575f" translate="yes" xml:space="preserve">
          <source>An Error describes a type-checking error; it implements the error interface. A &quot;soft&quot; error is an error that still permits a valid interpretation of a package (such as &quot;unused variable&quot;); &quot;hard&quot; errors may lead to unpredictable behavior if ignored.</source>
          <target state="translated">一个Error描述了一个类型检查错误;它实现了错误接口。一个 &quot;软 &quot;错误是一个仍然允许对一个包进行有效解释的错误(比如 &quot;未使用的变量&quot;);&quot;硬 &quot;错误如果被忽略,可能会导致不可预测的行为。</target>
        </trans-unit>
        <trans-unit id="9d28234f48490b0ef3b8db38b651b8397ba38df3" translate="yes" xml:space="preserve">
          <source>An Error represents a network error.</source>
          <target state="translated">错误代表网络错误。</target>
        </trans-unit>
        <trans-unit id="f652324f5503064eba1ee715c7833fbf6d566dc0" translate="yes" xml:space="preserve">
          <source>An Error represents a numeric error response from a server.</source>
          <target state="translated">错误表示来自服务器的数字错误响应。</target>
        </trans-unit>
        <trans-unit id="3769e7ac9e5605d81e8490caf08cd40057870dac" translate="yes" xml:space="preserve">
          <source>An ErrorCode describes a failure to parse a regular expression.</source>
          <target state="translated">错误代码(ErrorCode)描述了对正则表达式的解析失败。</target>
        </trans-unit>
        <trans-unit id="54a91464923f2af9618f528d284b1f1da0c9208c" translate="yes" xml:space="preserve">
          <source>An ErrorHandler may be provided to Scanner.Init. If a syntax error is encountered and a handler was installed, the handler is called with a position and an error message. The position points to the beginning of the offending token.</source>
          <target state="translated">可以向Scanner.Init提供一个ErrorHandler。如果遇到语法错误并安装了处理程序,处理程序会被调用,并提供一个位置和错误信息。位置指向违规标记的开头。</target>
        </trans-unit>
        <trans-unit id="24a7817e69ae447e63261c2dd340c4bdb534b1ae" translate="yes" xml:space="preserve">
          <source>An ErrorList implements the error interface.</source>
          <target state="translated">一个ErrorList实现了错误接口。</target>
        </trans-unit>
        <trans-unit id="8386dd5696de787382b0b9b9bedbc5b15351fb0b" translate="yes" xml:space="preserve">
          <source>An Example represents an example function found in a source files.</source>
          <target state="translated">例子表示一个在源文件中找到的例子函数。</target>
        </trans-unit>
        <trans-unit id="cd403f90e99c96d4fbce5b3d5851197b0ca4223e" translate="yes" xml:space="preserve">
          <source>An Example represents an example function found in a test source file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215350db86b77b9a2e2e1f96152b7e43551b80ea" translate="yes" xml:space="preserve">
          <source>An ExitError reports an unsuccessful exit by a command.</source>
          <target state="translated">ExitError报告一个命令的不成功退出。</target>
        </trans-unit>
        <trans-unit id="05bc8f57d6f82bf73794821b6ff5dd43d87bda94" translate="yes" xml:space="preserve">
          <source>An ExprStmt node represents a (stand-alone) expression in a statement list.</source>
          <target state="translated">ExprStmt节点代表语句列表中的一个(独立的)表达式。</target>
        </trans-unit>
        <trans-unit id="8b1088189e4db6e193143ddf5d3de9c7c46bc88d" translate="yes" xml:space="preserve">
          <source>An IP is a single IP address, a slice of bytes. Functions in this package accept either 4-byte (IPv4) or 16-byte (IPv6) slices as input.</source>
          <target state="translated">一个IP是一个单一的IP地址,一个字节的片断。本包中的函数接受4字节(IPv4)或16字节(IPv6)片断作为输入。</target>
        </trans-unit>
        <trans-unit id="5ee413fb49e920eaeb667d475d84bffedb2967a4" translate="yes" xml:space="preserve">
          <source>An IP mask is an IP address.</source>
          <target state="translated">IP掩码是一个IP地址。</target>
        </trans-unit>
        <trans-unit id="3dbc20d656da3507f2ad2280100243d469091105" translate="yes" xml:space="preserve">
          <source>An IPMask is a bitmask that can be used to manipulate IP addresses for IP addressing and routing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f236b320eae23c3c4580d036703570dfc8db5aef" translate="yes" xml:space="preserve">
          <source>An IPNet represents an IP network.</source>
          <target state="translated">一个IPNet代表一个IP网络。</target>
        </trans-unit>
        <trans-unit id="07af42d11561f0b970bb0742d7b092bd5695998a" translate="yes" xml:space="preserve">
          <source>An Ident node represents an identifier.</source>
          <target state="translated">一个Ident节点代表一个标识符。</target>
        </trans-unit>
        <trans-unit id="c2482695edf6a726d25800b1f5cb476bfe9e0a58" translate="yes" xml:space="preserve">
          <source>An IfStmt node represents an if statement.</source>
          <target state="translated">一个IfStmt节点代表一个if语句。</target>
        </trans-unit>
        <trans-unit id="c7d5dd87613417535deb3ae897d0824e60e9bcea" translate="yes" xml:space="preserve">
          <source>An ImportMode controls the behavior of the Import method.</source>
          <target state="translated">ImportMode控制着导入方法的行为。</target>
        </trans-unit>
        <trans-unit id="a4e20307642879f4fdb91b301c0d6f19a4723e93" translate="yes" xml:space="preserve">
          <source>An ImportSpec node represents a single package import.</source>
          <target state="translated">一个ImportSpec节点代表一个单一的包导入。</target>
        </trans-unit>
        <trans-unit id="ccedf83855a15222c8ed0224e1f53221340331a4" translate="yes" xml:space="preserve">
          <source>An Importer resolves import paths to Packages.</source>
          <target state="translated">Importer解析了Packages的导入路径。</target>
        </trans-unit>
        <trans-unit id="b2a2d275c65b3d0e5e8ceb4d48a4fa4fe4798662" translate="yes" xml:space="preserve">
          <source>An Importer resolves import paths to package Objects. The imports map records the packages already imported, indexed by package id (canonical import path). An Importer must determine the canonical import path and check the map to see if it is already present in the imports map. If so, the Importer can return the map entry. Otherwise, the Importer should load the package data for the given path into a new *Object (pkg), record pkg in the imports map, and then return pkg.</source>
          <target state="translated">Importer解析了包对象的导入路径。imports map 记录了已经导入的包,按包 ID(规范导入路径)索引。Importer 必须确定规范的导入路径,并检查地图以确定它是否已经存在于 imports 地图中。如果是的话,Importer可以返回地图条目。否则,Importer应该将给定路径的包数据加载到一个新的*Object (pkg)中,将pkg记录在imports map中,然后返回pkg。</target>
        </trans-unit>
        <trans-unit id="bb537684eda993b55ae12814f6e808e9b7a235b7" translate="yes" xml:space="preserve">
          <source>An ImporterFrom resolves import paths to packages; it supports vendoring per &lt;a href=&quot;https://golang.org/s/go15vendor&quot;&gt;https://golang.org/s/go15vendor&lt;/a&gt;. Use go/importer to obtain an ImporterFrom implementation.</source>
          <target state="translated">ImporterFrom解析包的导入路径；它支持根据&lt;a href=&quot;https://golang.org/s/go15vendor&quot;&gt;https://golang.org/s/go15vendor进行供应&lt;/a&gt;。使用go / importer获取ImporterFrom实现。</target>
        </trans-unit>
        <trans-unit id="931853ab43b1b36b6477762f5b19f92fa830addc" translate="yes" xml:space="preserve">
          <source>An IncDecStmt node represents an increment or decrement statement.</source>
          <target state="translated">IncDecStmt节点表示增量或减量语句。</target>
        </trans-unit>
        <trans-unit id="35521006ace24c0ca8c1e6cad86fda47cb06ccbf" translate="yes" xml:space="preserve">
          <source>An IndexExpr node represents an expression followed by an index.</source>
          <target state="translated">IndexExpr节点表示一个表达式,后面有一个索引。</target>
        </trans-unit>
        <trans-unit id="57b3f9d24fd3aa52a3788875d37b03e4f951d8ca" translate="yes" xml:space="preserve">
          <source>An Initializer describes a package-level variable, or a list of variables in case of a multi-valued initialization expression, and the corresponding initialization expression.</source>
          <target state="translated">Initializer描述了一个包级变量,或者在多值初始化表达式的情况下描述了一个变量列表,以及相应的初始化表达式。</target>
        </trans-unit>
        <trans-unit id="c2a741c70d22c89f47e118e4368257a7e0a43877" translate="yes" xml:space="preserve">
          <source>An InsecureAlgorithmError</source>
          <target state="translated">一个不安全的算法错误</target>
        </trans-unit>
        <trans-unit id="027885a33bbe913fc2ba3f477aabca3489b887a5" translate="yes" xml:space="preserve">
          <source>An Inst is a single instruction in a regular expression program.</source>
          <target state="translated">一个Inst是正则表达式程序中的一条指令。</target>
        </trans-unit>
        <trans-unit id="fbb1591cae4924ecbe2d034ef239f8d53abbc342" translate="yes" xml:space="preserve">
          <source>An InstOp is an instruction opcode.</source>
          <target state="translated">InstOp是一个指令操作码。</target>
        </trans-unit>
        <trans-unit id="4c1f11a6f7984a33db3a30b990c76a548954c071" translate="yes" xml:space="preserve">
          <source>An Int represents a signed multi-precision integer. The zero value for an Int represents the value 0.</source>
          <target state="translated">一个Int代表一个有符号的多精度整数。Int的零值代表值0。</target>
        </trans-unit>
        <trans-unit id="e81c158b5c560f087dc1cc6acd0467ac2c1656b5" translate="yes" xml:space="preserve">
          <source>An IntType represents a signed integer type.</source>
          <target state="translated">一个IntType代表一个有符号的整数类型。</target>
        </trans-unit>
        <trans-unit id="1a7d36f9197d92f53c3f8f9081d074e38f25eb00" translate="yes" xml:space="preserve">
          <source>An Interface represents an interface type.</source>
          <target state="translated">一个接口代表一个接口类型。</target>
        </trans-unit>
        <trans-unit id="eec19b90e5f6546bd2083657d09b42c2c1c31024" translate="yes" xml:space="preserve">
          <source>An InterfaceType node represents an interface type.</source>
          <target state="translated">一个InterfaceType节点代表一个接口类型。</target>
        </trans-unit>
        <trans-unit id="576712f6b5e2f51d02da2f20787f20734e4aa8fb" translate="yes" xml:space="preserve">
          <source>An InternalError reports an error in the flate code itself.</source>
          <target state="translated">InternalError报告了flate代码本身的错误。</target>
        </trans-unit>
        <trans-unit id="d632bf503e0a72f63034068d3a35848739d860dd" translate="yes" xml:space="preserve">
          <source>An InvalidUnmarshalError describes an invalid argument passed to Unmarshal. (The argument to Unmarshal must be a non-nil pointer.)</source>
          <target state="translated">InvalidUnmarshalError描述了传递给Unmarshal的无效参数。(Unmarshal的参数必须是一个非零的指针。)</target>
        </trans-unit>
        <trans-unit id="355520c16460a4d672b0833e1be85108ccb16b48" translate="yes" xml:space="preserve">
          <source>An MX represents a single DNS MX record.</source>
          <target state="translated">一条MX代表一条DNS MX记录。</target>
        </trans-unit>
        <trans-unit id="c7737461dc6a0486b2bcc5cd7ba812b4baec53c6" translate="yes" xml:space="preserve">
          <source>An NS represents a single DNS NS record.</source>
          <target state="translated">一个NS代表一个单一的DNS NS记录。</target>
        </trans-unit>
        <trans-unit id="fc31b1339a10ac6c5590f7699997d397c8058593" translate="yes" xml:space="preserve">
          <source>An Nlist32 is a Mach-O 32-bit symbol table entry.</source>
          <target state="translated">Nlist32是一个Mach-O 32位符号表条目。</target>
        </trans-unit>
        <trans-unit id="ddae24f43b24e969e52011bccfbf41b821e176a8" translate="yes" xml:space="preserve">
          <source>An Nlist64 is a Mach-O 64-bit symbol table entry.</source>
          <target state="translated">Nlist64是一个Mach-O 64位符号表条目。</target>
        </trans-unit>
        <trans-unit id="5c07e8659a0b25b73eae3edf1d2bd807dad03f31" translate="yes" xml:space="preserve">
          <source>An Obj represents a collection of functions in a symbol table.</source>
          <target state="translated">一个Obj代表一个符号表中的函数集合。</target>
        </trans-unit>
        <trans-unit id="1805e3ce80f418cf89c636249f4d5a84033d5060" translate="yes" xml:space="preserve">
          <source>An Object describes a named language entity such as a package, constant, type, variable, function (incl. methods), or label.</source>
          <target state="translated">对象描述一个命名的语言实体,如包、常量、类型、变量、函数(包括方法)或标签。</target>
        </trans-unit>
        <trans-unit id="ebcf6a2cb490f823e627d6f4f840a47671387779" translate="yes" xml:space="preserve">
          <source>An Object describes a named language entity such as a package, constant, type, variable, function (incl. methods), or label. All objects implement the Object interface.</source>
          <target state="translated">对象描述了一个命名的语言实体,如包、常量、类型、变量、函数(包括方法)或标签。所有对象都实现了Object接口。</target>
        </trans-unit>
        <trans-unit id="c2a6feda5d42e0f3ed1aa8a3be809a70c3599d2b" translate="yes" xml:space="preserve">
          <source>An ObjectIdentifier represents an ASN.1 OBJECT IDENTIFIER.</source>
          <target state="translated">一个ObjectIdentifier代表一个ASN.1 OBJECT IDENTIFIER。</target>
        </trans-unit>
        <trans-unit id="25a8b4525236ef00b360d07cb19827944df7a067" translate="yes" xml:space="preserve">
          <source>An Offset represents the location of an Entry within the DWARF info. (See Reader.Seek.)</source>
          <target state="translated">一个偏移表示DWARF信息中一个条目的位置。(参见Reader.Seek。)</target>
        </trans-unit>
        <trans-unit id="ac3f6fd5c5f4020fe745e9df601334d103e434f6" translate="yes" xml:space="preserve">
          <source>An Op is a single regular expression operator.</source>
          <target state="translated">Op是一个单一的正则表达式运算符。</target>
        </trans-unit>
        <trans-unit id="0314a12979f35374da5a5f6df2c7d8b530e55186" translate="yes" xml:space="preserve">
          <source>An SRV represents a single DNS SRV record.</source>
          <target state="translated">一个SRV代表一条DNS SRV记录。</target>
        </trans-unit>
        <trans-unit id="2409c4611787fa12fc74e051bb517f08b144ce6f" translate="yes" xml:space="preserve">
          <source>An SelectStmt node represents a select statement.</source>
          <target state="translated">一个SelectStmt节点代表一条选择语句。</target>
        </trans-unit>
        <trans-unit id="41596e8b76edc639db644d1e3dc2c1dd81459d07" translate="yes" xml:space="preserve">
          <source>An SliceExpr node represents an expression followed by slice indices.</source>
          <target state="translated">SliceExpr节点代表一个表达式,后面是切片索引。</target>
        </trans-unit>
        <trans-unit id="ed46c8e20af1ec33b3449cc621457b646d93171d" translate="yes" xml:space="preserve">
          <source>An TypeSwitchStmt node represents a type switch statement.</source>
          <target state="translated">一个TypeSwitchStmt节点代表一个类型切换语句。</target>
        </trans-unit>
        <trans-unit id="8e3ece4dfd5d5307131c8573c8e34ed46191a7bf" translate="yes" xml:space="preserve">
          <source>An UnmarshalError represents an error in the unmarshaling process.</source>
          <target state="translated">UnmarshalError表示在unmarshaling过程中的一个错误。</target>
        </trans-unit>
        <trans-unit id="868232dcab51d8cfeb408a9b9149e92c12b71d90" translate="yes" xml:space="preserve">
          <source>An UnmarshalFieldError describes a JSON object key that led to an unexported (and therefore unwritable) struct field.</source>
          <target state="translated">UnmarshalFieldError描述了一个JSON对象键,该对象键导致了一个未被导出(因此不可写)的结构域。</target>
        </trans-unit>
        <trans-unit id="737b56eeaf44e2dc73cc5f508d01fd01025fa4b2" translate="yes" xml:space="preserve">
          <source>An UnmarshalTypeError describes a JSON value that was not appropriate for a value of a specific Go type.</source>
          <target state="translated">UnmarshalTypeError描述的JSON值不适合特定围棋类型的值。</target>
        </trans-unit>
        <trans-unit id="dbb12df0d8594699910ded263bdda73074faccc3" translate="yes" xml:space="preserve">
          <source>An UnspecifiedType represents an implicit, unknown, ambiguous or nonexistent type.</source>
          <target state="translated">UnspecifiedType表示一个隐含的、未知的、模糊的或不存在的类型。</target>
        </trans-unit>
        <trans-unit id="127495d0dcb94690f6b42f4443962cedbb7bc317" translate="yes" xml:space="preserve">
          <source>An UnsupportedError reports that the input uses a valid but unimplemented JPEG feature.</source>
          <target state="translated">UnsupportedError报告说,输入使用了一个有效但未实现的JPEG特征。</target>
        </trans-unit>
        <trans-unit id="b6cface443329dd52d1ffaa72664f6e7fd32f48b" translate="yes" xml:space="preserve">
          <source>An UnsupportedError reports that the input uses a valid but unimplemented PNG feature.</source>
          <target state="translated">UnsupportedError报告说,输入使用了一个有效但未实现的PNG特征。</target>
        </trans-unit>
        <trans-unit id="50c033636c681ef23f5703353e7b6b548ee31e57" translate="yes" xml:space="preserve">
          <source>An UnsupportedType is a placeholder returned in situations where we encounter a type that isn't supported.</source>
          <target state="translated">UnsupportedType是在遇到不支持的类型时返回的一个占位符。</target>
        </trans-unit>
        <trans-unit id="9f010dd73bd76eac970f2fad6de4d1d072e049eb" translate="yes" xml:space="preserve">
          <source>An UnsupportedTypeError is returned by Marshal when attempting to encode an unsupported value type.</source>
          <target state="translated">当Marshal试图对一个不支持的值类型进行编码时,会返回一个UnsupportedTypeError。</target>
        </trans-unit>
        <trans-unit id="55cf6dbd651aa1fc24dab4ed83f94d2cc501a8bb" translate="yes" xml:space="preserve">
          <source>An alpha-premultiplied color component C has been scaled by alpha (A), so has valid values 0 &amp;lt;= C &amp;lt;= A.</source>
          <target state="translated">预先乘以Alpha的颜色分量C已按alpha（A）进行缩放，因此有效值0 &amp;lt;= C &amp;lt;=A。</target>
        </trans-unit>
        <trans-unit id="96f36f26c07cd97ba2148d75c909d9ff85455a78" translate="yes" xml:space="preserve">
          <source>An analogous set of functions scans formatted text to yield values. Scan, Scanf and Scanln read from os.Stdin; Fscan, Fscanf and Fscanln read from a specified io.Reader; Sscan, Sscanf and Sscanln read from an argument string.</source>
          <target state="translated">一组类似的函数扫描格式化的文本以产生值。Scan,Scanf 和 Scanln 从 os.Stdin 读取;Fscan,Fscanf 和 Fscanln 从指定的 io.Reader 读取;Sscan,Sscanf 和 Sscanln 从一个参数字符串读取。</target>
        </trans-unit>
        <trans-unit id="dd590ec64bdbd07328cd1648202f3c4d0652fcaa" translate="yes" xml:space="preserve">
          <source>An appropriate use of a Pool is to manage a group of temporary items silently shared among and potentially reused by concurrent independent clients of a package. Pool provides a way to amortize allocation overhead across many clients.</source>
          <target state="translated">Pool的一个适当用途是管理一组临时项目,这些项目在包的并发独立客户端之间静静地共享,并有可能被重用。Pool提供了一种在多个客户端之间分摊分配开销的方法。</target>
        </trans-unit>
        <trans-unit id="e7a6c66066c63a7b13fb3633463450779dc83697" translate="yes" xml:space="preserve">
          <source>An argument is a simple value, denoted by one of the following.</source>
          <target state="translated">一个参数是一个简单的值,用下面的一种表示。</target>
        </trans-unit>
        <trans-unit id="f9834be44e753f9b0833b74dd8442f2593d02903" translate="yes" xml:space="preserve">
          <source>An empty Dir is treated as &quot;.&quot;.</source>
          <target state="translated">空的Dir被视为&quot;.&quot;。</target>
        </trans-unit>
        <trans-unit id="3c1d4dbd141f152659ded0ed62d6fc32f149bd0b" translate="yes" xml:space="preserve">
          <source>An empty method means &quot;GET&quot;.</source>
          <target state="translated">一个空方法意味着 &quot;GET&quot;。</target>
        </trans-unit>
        <trans-unit id="cd4d28837904807a903cbe5476bdc10de0744eb7" translate="yes" xml:space="preserve">
          <source>An encoding is invalid if it is incorrect UTF-8, encodes a rune that is out of range, or is not the shortest possible UTF-8 encoding for the value. No other validation is performed.</source>
          <target state="translated">如果一个编码是不正确的UTF-8,编码的符文超出了范围,或者不是该值的最短UTF-8编码,则该编码无效。没有进行其他验证。</target>
        </trans-unit>
        <trans-unit id="97559fea881eb99df8b5b805bce6db58884baa12" translate="yes" xml:space="preserve">
          <source>An entry is a sequence of attribute/value pairs.</source>
          <target state="translated">一个条目是一个属性/值对的序列。</target>
        </trans-unit>
        <trans-unit id="70ec8bed891e692083a35e67a8a08047708ac061" translate="yes" xml:space="preserve">
          <source>An error is considered to match a target if it is equal to that target or if it implements a method Is(error) bool such that Is(target) returns true.</source>
          <target state="translated">如果一个错误等于一个目标,或者如果它实现了Is(error)bool方法,使Is(target)返回true,那么这个错误就被认为是与目标匹配的。</target>
        </trans-unit>
        <trans-unit id="b1a208abffd28eb07ba78aa217f3028c63ddac28" translate="yes" xml:space="preserve">
          <source>An error is returned if caused by client policy (such as CheckRedirect), or failure to speak HTTP (such as a network connectivity problem). A non-2xx status code doesn't cause an error.</source>
          <target state="translated">如果是由客户端策略(如CheckRedirect),或未能讲HTTP(如网络连接问题)引起的,则返回错误。非2xx状态码不会导致错误。</target>
        </trans-unit>
        <trans-unit id="486bd0cc019a78e61c1e7988575a296022dde327" translate="yes" xml:space="preserve">
          <source>An error is returned if pos is not within the package or if the node cannot be type-checked.</source>
          <target state="translated">如果pos不在包内,或者节点不能进行类型检查,则返回错误。</target>
        </trans-unit>
        <trans-unit id="33f2fbaf6070ae69f9aa39421d7912bcc2d2cb21" translate="yes" xml:space="preserve">
          <source>An error is returned if the Client's CheckRedirect function fails or if there was an HTTP protocol error. A non-2xx response doesn't cause an error. Any returned error will be of type *url.Error. The url.Error value's Timeout method will report true if request timed out or was canceled.</source>
          <target state="translated">如果客户端的CheckRedirect函数失败或者出现了HTTP协议错误,就会返回一个错误。一个非2xx的响应不会导致错误。任何返回的错误都将是*url.Error类型的。如果请求超时或被取消,url.Error值的Timeout方法将报告true。</target>
        </trans-unit>
        <trans-unit id="8cab24d7dd180e630e383d3bc3b4d99cb0d500f5" translate="yes" xml:space="preserve">
          <source>An error is returned if the Client's CheckRedirect function fails or if there was an HTTP protocol error. A non-2xx response doesn't cause an error. Any returned error will be of type *url.Error. The url.Error value's Timeout method will report true if the request timed out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29559e83fd57f697a87f8f6c23a1408199321367" translate="yes" xml:space="preserve">
          <source>An error is returned if there were too many redirects or if there was an HTTP protocol error. A non-2xx response doesn't cause an error. Any returned error will be of type *url.Error. The url.Error value's Timeout method will report true if request timed out or was canceled.</source>
          <target state="translated">如果重定向太多,或者HTTP协议错误,就会返回一个错误。一个非2xx的响应不会导致错误。任何返回的错误都会是*url.Error类型的。如果请求超时或被取消,url.Error值的Timeout方法将报告true。</target>
        </trans-unit>
        <trans-unit id="ca4e973640c5414c2d9178d60dc8605a5b8a5d60" translate="yes" xml:space="preserve">
          <source>An error matches target if the error's concrete value is assignable to the value pointed to by target, or if the error has a method As(interface{}) bool such that As(target) returns true. In the latter case, the As method is responsible for setting target.</source>
          <target state="translated">如果错误的具体值可以分配给目标指向的值,或者如果错误有一个As(interface{})bool方法,使As(target)返回true,则错误与目标匹配。在后一种情况下,As 方法负责设置 target。</target>
        </trans-unit>
        <trans-unit id="2ec1daa84976e0d0488f1ebd412c66b0f689386a" translate="yes" xml:space="preserve">
          <source>An error returned after a timeout fails will implement the Timeout method, and calling the Timeout method will return true. The PathError and SyscallError types implement the Timeout method. In general, call IsTimeout to test whether an error indicates a timeout.</source>
          <target state="translated">超时失败后返回的错误将实现Timeout方法,调用Timeout方法将返回true。PathError和SyscallError类型实现了Timeout方法。一般来说,调用IsTimeout来测试一个错误是否表示超时。</target>
        </trans-unit>
        <trans-unit id="120954aaeca348b08f2969c8dd12029b889adaa3" translate="yes" xml:space="preserve">
          <source>An error type might provide an As method so it can be treated as if it were a different error type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1edf4a4ecd5ec433bc33357047be9b6d01283f4c" translate="yes" xml:space="preserve">
          <source>An error type might provide an Is method so it can be treated as equivalent to an existing error. For example, if MyError defines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b785d2e40c6b05c4a7dedaf9a7985d62dd9c0c" translate="yes" xml:space="preserve">
          <source>An example of good use of a Pool is in the fmt package, which maintains a dynamically-sized store of temporary output buffers. The store scales under load (when many goroutines are actively printing) and shrinks when quiescent.</source>
          <target state="translated">一个很好地使用Pool的例子是在fmt包中,它维护了一个临时输出缓冲区的动态大小的存储。这个存储在负载时(当许多goroutine正在打印时)会膨胀,而在静止时则会收缩。</target>
        </trans-unit>
        <trans-unit id="5d1ac1bff5d82335919eca7792226149f6974601" translate="yes" xml:space="preserve">
          <source>An expectCode &amp;lt;= 0 disables the check of the status code.</source>
          <target state="translated">ExpectCode &amp;lt;= 0禁用状态码检查。</target>
        </trans-unit>
        <trans-unit id="b885b02299d18da02728c260e15d739888aa2a45" translate="yes" xml:space="preserve">
          <source>An idle timeout can be implemented by repeatedly extending the deadline after successful Read or Write calls.</source>
          <target state="translated">空闲超时可以通过在成功读取或写入调用后反复延长截止时间来实现。</target>
        </trans-unit>
        <trans-unit id="c30b3b786ad798c3290738b4c4b125b52d06a251" translate="yes" xml:space="preserve">
          <source>An implementation that always returns &quot;&quot; is valid and may be useful for testing but it is not secure: it means that the HTTP server for foo.com can set a cookie for bar.com.</source>
          <target state="translated">一个总是返回&quot;&quot;的实现是有效的,对于测试来说可能是有用的,但它并不安全:这意味着foo.com的HTTP服务器可以为bar.com设置一个cookie。</target>
        </trans-unit>
        <trans-unit id="47c9f3a025dffe9123fd4bfd7373fe411e63cc3f" translate="yes" xml:space="preserve">
          <source>An internal function but exported because it is cross-package; part of the implementation of the &quot;go test&quot; command.</source>
          <target state="translated">一个内部函数,但因为是跨包而被导出;是 &quot;go test &quot;命令实现的一部分。</target>
        </trans-unit>
        <trans-unit id="036afd05688102f6ee86356229e3c79c56ec575a" translate="yes" xml:space="preserve">
          <source>An internal type but exported because it is cross-package; part of the implementation of the &quot;go test&quot; command.</source>
          <target state="translated">一个内部类型,但因为它是跨包的,所以被导出;是 &quot;go test &quot;命令实现的一部分。</target>
        </trans-unit>
        <trans-unit id="442649c59c72ffcf9dd32a6c63fcf97e0bbbf3e5" translate="yes" xml:space="preserve">
          <source>An unsigned integer is sent one of two ways. If it is less than 128, it is sent as a byte with that value. Otherwise it is sent as a minimal-length big-endian (high byte first) byte stream holding the value, preceded by one byte holding the byte count, negated. Thus 0 is transmitted as (00), 7 is transmitted as (07) and 256 is transmitted as (FE 01 00).</source>
          <target state="translated">一个无符号整数有两种发送方式之一。如果它小于128,则作为一个含有该值的字节发送。否则,它将作为一个最小长度的大字节流(高字节在前)发送,前面是一个字节流,包含该值,然后是否定的字节数。因此,0 以 (00)的形式发送,7 以 (07)的形式发送,256 以 (FE 01 00)的形式发送。</target>
        </trans-unit>
        <trans-unit id="7a76817319296468bf39d1d78d770edaaa1f1d0b" translate="yes" xml:space="preserve">
          <source>And sets z = x &amp;amp; y and returns z.</source>
          <target state="translated">并设置z = x＆y并返回z。</target>
        </trans-unit>
        <trans-unit id="4fe7a64501f902a2a15dc8d7ef88b7a3c8758b53" translate="yes" xml:space="preserve">
          <source>AndNot sets z = x &amp;amp;^ y and returns z.</source>
          <target state="translated">AndNot设置z = x＆^ y并返回z。</target>
        </trans-unit>
        <trans-unit id="104eadd84d40efc537cbdaed98695f14d3c410ae" translate="yes" xml:space="preserve">
          <source>Anonymous reports whether the variable is an embedded field. Same as Embedded; only present for backward-compatibility.</source>
          <target state="translated">匿名报告变量是否为嵌入式字段。和Embedded一样,只是为了向后兼容。</target>
        </trans-unit>
        <trans-unit id="b34123eb0681a84b4e38ef46e880e0d9d4e93ff2" translate="yes" xml:space="preserve">
          <source>Anonymous struct fields are usually marshaled as if their inner exported fields were fields in the outer struct, subject to the usual Go visibility rules amended as described in the next paragraph. An anonymous struct field with a name given in its JSON tag is treated as having that name, rather than being anonymous. An anonymous struct field of interface type is treated the same as having that type as its name, rather than being anonymous.</source>
          <target state="translated">匿名结构字段通常被当作其内部导出的字段在外部结构中的字段来进行调集,但要遵守下一段中所描述的通常的围棋可见性规则。一个匿名结构体字段如果在它的JSON标签中给出了一个名字,那么它将被视为拥有该名字,而不是匿名。一个接口类型的匿名结构体字段被视为具有该类型的名称,而不是匿名的。</target>
        </trans-unit>
        <trans-unit id="afb9e365ac6bc69254b413683db8417c15044c6f" translate="yes" xml:space="preserve">
          <source>Any item stored in the Pool may be removed automatically at any time without notification. If the Pool holds the only reference when this happens, the item might be deallocated.</source>
          <target state="translated">任何存储在Pool中的项目都可能在任何时候被自动删除,而不需要通知。如果发生这种情况时,池中只有一个引用,则该项目可能会被重新分配。</target>
        </trans-unit>
        <trans-unit id="a6b643cc8e0850db50e55740276d22f185017d81" translate="yes" xml:space="preserve">
          <source>Any mutations to the returned pool are not written to disk and do not affect any other pool returned by SystemCertPool.</source>
          <target state="translated">任何对返回池的突变都不会写入磁盘,也不会影响SystemCertPool返回的任何其他池。</target>
        </trans-unit>
        <trans-unit id="224f9d3dc95f39b31b4695465f7bb92d23f66b43" translate="yes" xml:space="preserve">
          <source>Any of the above ASN.1 values can be written to an interface{}. The value stored in the interface has the corresponding Go type. For integers, that type is int64.</source>
          <target state="translated">上述ASN.1中的任何一个值都可以写入接口{}。存储在接口中的值具有相应的Go类型。对于整数,该类型是int64。</target>
        </trans-unit>
        <trans-unit id="791f38485d078e4250fe65d69d579ce6058e5ed8" translate="yes" xml:space="preserve">
          <source>Any returned error will be of type *url.Error. The url.Error value's Timeout method will report true if request timed out or was canceled.</source>
          <target state="translated">任何返回的错误都是*url.Error类型的。如果请求超时或被取消,url.Error值的Timeout方法将报告true。</target>
        </trans-unit>
        <trans-unit id="12810041e8799641fa0564b3d08f00a640e526e5" translate="yes" xml:space="preserve">
          <source>Append appends the string representation of x, as generated by x.Text(base), to buf and returns the extended buffer.</source>
          <target state="translated">Append将x.Text(base)生成的x的字符串表示方式追加到buf中,并返回扩展缓冲区。</target>
        </trans-unit>
        <trans-unit id="991b56073f752ea70afd5d3245c19ae4ca5aea47" translate="yes" xml:space="preserve">
          <source>Append appends the values x to a slice s and returns the resulting slice. As in Go, each x's value must be assignable to the slice's element type.</source>
          <target state="translated">Append 将 x 的值追加到 slice s 上,并返回结果的 slice。和围棋中一样,每个 x 的值都必须可以分配给 slice 的元素类型。</target>
        </trans-unit>
        <trans-unit id="8a6738f1f149fb1b688951727ba8a4eb62d6e849" translate="yes" xml:space="preserve">
          <source>Append appends to buf the string form of the floating-point number x, as generated by x.Text, and returns the extended buffer.</source>
          <target state="translated">将x.Text生成的浮点数x的字符串形式追加到buf中,并返回扩展的缓冲区。</target>
        </trans-unit>
        <trans-unit id="dc7406a7e262f6f8144c95e8a9ab9e772e4587d4" translate="yes" xml:space="preserve">
          <source>AppendBool</source>
          <target state="translated">AppendBool</target>
        </trans-unit>
        <trans-unit id="8e6c1bde028847a8f50865559cf63e4d8dcb8db9" translate="yes" xml:space="preserve">
          <source>AppendBool appends &quot;true&quot; or &quot;false&quot;, according to the value of b, to dst and returns the extended buffer.</source>
          <target state="translated">AppendBool根据b的值将 &quot;true &quot;或 &quot;false &quot;追加到dst,并返回扩展缓冲区。</target>
        </trans-unit>
        <trans-unit id="014e6c46b60f6356c8ae4eb44946bcc39c683ed5" translate="yes" xml:space="preserve">
          <source>AppendBool, AppendFloat, AppendInt, and AppendUint are similar but append the formatted value to a destination slice.</source>
          <target state="translated">AppendBool、AppendFloat、AppendInt和AppendUint类似,但将格式化的值追加到目标分片。</target>
        </trans-unit>
        <trans-unit id="cbf71c71617cb5b06bbe72a027a40a50e99d7ac7" translate="yes" xml:space="preserve">
          <source>AppendCertsFromPEM attempts to parse a series of PEM encoded certificates. It appends any certificates found to s and reports whether any certificates were successfully parsed.</source>
          <target state="translated">AppendCertsFromPEM试图解析一系列PEM编码的证书。它将发现的证书附加到s中,并报告是否有证书被成功解析。</target>
        </trans-unit>
        <trans-unit id="ef209b42fc5cf6c80a711f0e8fdac2c151f89421" translate="yes" xml:space="preserve">
          <source>AppendFloat</source>
          <target state="translated">AppendFloat</target>
        </trans-unit>
        <trans-unit id="1e82a7a839e480035dfa637aa1bc5055d24e100b" translate="yes" xml:space="preserve">
          <source>AppendFloat appends the string form of the floating-point number f, as generated by FormatFloat, to dst and returns the extended buffer.</source>
          <target state="translated">AppendFloat将FormatFloat生成的浮点数f的字符串形式追加到dst,并返回扩展缓冲区。</target>
        </trans-unit>
        <trans-unit id="b06ef363cdc72d800a1b0e2f4d789a51ed28e9cc" translate="yes" xml:space="preserve">
          <source>AppendFormat is like Format but appends the textual representation to b and returns the extended buffer.</source>
          <target state="translated">AppendFormat与Format类似,但将文本表示法追加到b,并返回扩展的缓冲区。</target>
        </trans-unit>
        <trans-unit id="fa7c3675c344d224694cdd3e00f46904a1a198c2" translate="yes" xml:space="preserve">
          <source>AppendInt</source>
          <target state="translated">AppendInt</target>
        </trans-unit>
        <trans-unit id="d2b187db6c308fc1702924e2f1e633509db15a41" translate="yes" xml:space="preserve">
          <source>AppendInt appends the string form of the integer i, as generated by FormatInt, to dst and returns the extended buffer.</source>
          <target state="translated">AppendInt将FormatInt生成的整数i的字符串形式追加到dst,并返回扩展缓冲区。</target>
        </trans-unit>
        <trans-unit id="1ec9b89a50366169935f696b1a52bab9ad93ce11" translate="yes" xml:space="preserve">
          <source>AppendQuote</source>
          <target state="translated">AppendQuote</target>
        </trans-unit>
        <trans-unit id="cf8e7dfc01c8eb2ae61af0decdd8abe4db2493e3" translate="yes" xml:space="preserve">
          <source>AppendQuote appends a double-quoted Go string literal representing s, as generated by Quote, to dst and returns the extended buffer.</source>
          <target state="translated">AppendQuote将由Quote生成的代表s的双引号Go字符串文字追加到dst,并返回扩展缓冲区。</target>
        </trans-unit>
        <trans-unit id="aac9680f9b8d54a2e691b9fc4814576b43aa1597" translate="yes" xml:space="preserve">
          <source>AppendQuoteRune</source>
          <target state="translated">AppendQuoteRune</target>
        </trans-unit>
        <trans-unit id="4affe2726aa0af79866bcac727b0aa02165283e7" translate="yes" xml:space="preserve">
          <source>AppendQuoteRune appends a single-quoted Go character literal representing the rune, as generated by QuoteRune, to dst and returns the extended buffer.</source>
          <target state="translated">AppendQuoteRune将QuoteRune生成的代表符文的单引号Go字符文字追加到dst,并返回扩展缓冲区。</target>
        </trans-unit>
        <trans-unit id="5cc72aa0b6d1a3e6331f053030965add24d59d99" translate="yes" xml:space="preserve">
          <source>AppendQuoteRuneToASCII</source>
          <target state="translated">AppendQuoteRuneToASCII</target>
        </trans-unit>
        <trans-unit id="d3afb68811f96e790a1e9d00f7edaa6a56c7ecf3" translate="yes" xml:space="preserve">
          <source>AppendQuoteRuneToASCII appends a single-quoted Go character literal representing the rune, as generated by QuoteRuneToASCII, to dst and returns the extended buffer.</source>
          <target state="translated">AppendQuoteRuneToASCII将QuoteRuneToASCII生成的代表符文的单引号围棋字符文字追加到dst,并返回扩展缓冲区。</target>
        </trans-unit>
        <trans-unit id="63575dcb5767538ce900b5ecffc6e375340ae2db" translate="yes" xml:space="preserve">
          <source>AppendQuoteRuneToGraphic appends a single-quoted Go character literal representing the rune, as generated by QuoteRuneToGraphic, to dst and returns the extended buffer.</source>
          <target state="translated">AppendQuoteRuneToGraphic将由QuoteRuneToGraphic生成的代表符文的单引号围棋字符文字追加到dst,并返回扩展缓冲区。</target>
        </trans-unit>
        <trans-unit id="e4edf5c0ada10bc45e0e1cd667a7f4ca233f2d8a" translate="yes" xml:space="preserve">
          <source>AppendQuoteToASCII</source>
          <target state="translated">AppendQuoteToASCII</target>
        </trans-unit>
        <trans-unit id="4af83e8c6f92cae36f17c055e1dad65cafe24a88" translate="yes" xml:space="preserve">
          <source>AppendQuoteToASCII appends a double-quoted Go string literal representing s, as generated by QuoteToASCII, to dst and returns the extended buffer.</source>
          <target state="translated">AppendQuoteToASCII将由QuoteToASCII生成的代表s的双引号Go字符串文字追加到dst并返回扩展缓冲区。</target>
        </trans-unit>
        <trans-unit id="0614344e66308abc1fa3774e3b165f0a5a6ba86e" translate="yes" xml:space="preserve">
          <source>AppendQuoteToGraphic appends a double-quoted Go string literal representing s, as generated by QuoteToGraphic, to dst and returns the extended buffer.</source>
          <target state="translated">AppendQuoteToGraphic将QuoteToGraphic生成的代表s的双引号Go字符串文字追加到dst,并返回扩展缓冲区。</target>
        </trans-unit>
        <trans-unit id="4293b6e547f1114c134ce72872c3d683ab6de3b4" translate="yes" xml:space="preserve">
          <source>AppendSlice appends a slice t to a slice s and returns the resulting slice. The slices s and t must have the same element type.</source>
          <target state="translated">AppendSlice将一个片断t附加到一个片断s上,并返回结果的片断。分片s和t必须具有相同的元素类型。</target>
        </trans-unit>
        <trans-unit id="b94bccf4bd646055e30b89dcc1a6bb69c63264a1" translate="yes" xml:space="preserve">
          <source>AppendUint</source>
          <target state="translated">AppendUint</target>
        </trans-unit>
        <trans-unit id="1a848ce1ccb2943fb03b2a97a183e1e001204d7f" translate="yes" xml:space="preserve">
          <source>AppendUint appends the string form of the unsigned integer i, as generated by FormatUint, to dst and returns the extended buffer.</source>
          <target state="translated">AppendUint将FormatUint生成的无符号整数i的字符串形式追加到dst,并返回扩展缓冲区。</target>
        </trans-unit>
        <trans-unit id="5ceb03c6f5e7370ed7befcfaa3e743fb64b5ef4c" translate="yes" xml:space="preserve">
          <source>ArbitraryType is here for the purposes of documentation only and is not actually part of the unsafe package. It represents the type of an arbitrary Go expression.</source>
          <target state="translated">ArbitraryType在这里只是为了文档的目的,实际上并不是不安全包的一部分。它表示一个任意的围棋表达式的类型。</target>
        </trans-unit>
        <trans-unit id="5f584feba6cf3361b02c7c81dcebd1e32a75415e" translate="yes" xml:space="preserve">
          <source>ArchChar returns &quot;?&quot; and an error. In earlier versions of Go, the returned string was used to derive the compiler and linker tool names, the default object file suffix, and the default linker output name. As of Go 1.5, those strings no longer vary by architecture; they are compile, link, .o, and a.out, respectively.</source>
          <target state="translated">ArchChar返回&quot;?&quot;和一个错误。在Go的早期版本中,返回的字符串被用来推导编译器和链接器工具名、默认的对象文件后缀和默认的链接器输出名。从Go 1.5开始,这些字符串不再因架构不同而变化,它们分别是编译、链接、.o和a.out。</target>
        </trans-unit>
        <trans-unit id="7fd33dbad703e2baacd65220f1dee6594a39c3e1" translate="yes" xml:space="preserve">
          <source>Arg returns the i'th argument. Arg(0) is the first remaining argument after flags have been processed. Arg returns an empty string if the requested element does not exist.</source>
          <target state="translated">Arg返回第i个参数。Arg(0)是处理完标志后剩下的第一个参数。如果请求的元素不存在,Arg返回一个空字符串。</target>
        </trans-unit>
        <trans-unit id="6e87e53727801bfc878272fae45c5972e2148db1" translate="yes" xml:space="preserve">
          <source>Arg returns the i'th command-line argument. Arg(0) is the first remaining argument after flags have been processed. Arg returns an empty string if the requested element does not exist.</source>
          <target state="translated">Arg 返回第 i 个命令行参数。Arg(0)是处理完标志后剩下的第一个参数。如果请求的元素不存在,Arg返回一个空字符串。</target>
        </trans-unit>
        <trans-unit id="f057c07f8a3d2900b501ed0ba97a2c798c10c131" translate="yes" xml:space="preserve">
          <source>Args hold the command-line arguments, starting with the program name.</source>
          <target state="translated">Args是命令行参数,以程序名开始。</target>
        </trans-unit>
        <trans-unit id="5d6577266006e170c0a00f0095a742e5ff6a8b83" translate="yes" xml:space="preserve">
          <source>Args returns the non-flag arguments.</source>
          <target state="translated">Args返回非标志参数。</target>
        </trans-unit>
        <trans-unit id="0d50601b6e19d9bb6ca5607eb536c9755a196001" translate="yes" xml:space="preserve">
          <source>Args returns the non-flag command-line arguments.</source>
          <target state="translated">Args 返回非标志的命令行参数。</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="dcac9467b61958dfc8fb2a284d9809101d3387e5" translate="yes" xml:space="preserve">
          <source>Arguments may evaluate to any type; if they are pointers the implementation automatically indirects to the base type when required. If an evaluation yields a function value, such as a function-valued field of a struct, the function is not invoked automatically, but it can be used as a truth value for an if action and the like. To invoke it, use the call function, defined below.</source>
          <target state="translated">参数可以评估为任何类型;如果它们是指针,在需要时,实现会自动间接到基本类型。如果一个评估产生了一个函数值,比如结构的一个函数值字段,那么这个函数不会被自动调用,但是它可以被用作if操作等的真值。要调用它,请使用下面定义的调用函数。</target>
        </trans-unit>
        <trans-unit id="03cb1ef1a4caa26d25a6105558ad623367ea6a38" translate="yes" xml:space="preserve">
          <source>Arithmetic expressions are typically written as a sequence of individual method calls, with each call corresponding to an operation. The receiver denotes the result and the method arguments are the operation's operands. For instance, given three *Int values a, b and c, the invocation</source>
          <target state="translated">算术表达式通常被写成一个单独的方法调用序列,每个调用对应一个操作。接者表示结果,方法参数是操作数。例如,给定三个*Int值a、b和c,调用的是</target>
        </trans-unit>
        <trans-unit id="918a4da47d7ebb48a08cab34e3e485f64e61c032" translate="yes" xml:space="preserve">
          <source>Array and slice values encode as JSON arrays, except that []byte encodes as a base64-encoded string, and a nil slice encodes as the null JSON value.</source>
          <target state="translated">阵列和分片值编码为JSON数组,除了[]byte编码为base64编码的字符串,nil分片编码为空JSON值。</target>
        </trans-unit>
        <trans-unit id="a680524eecee442cefa352a7c38f566b7e119c31" translate="yes" xml:space="preserve">
          <source>Array values are deeply equal when their corresponding elements are deeply equal.</source>
          <target state="translated">当其对应的元素深度相等时,数组值深度相等。</target>
        </trans-unit>
        <trans-unit id="66b6d7c835c7970d9fefaada6f3b7756c4c96afd" translate="yes" xml:space="preserve">
          <source>ArrayOf returns the array type with the given count and element type. For example, if t represents int, ArrayOf(5, t) represents [5]int.</source>
          <target state="translated">ArrayOf 返回给定计数和元素类型的数组类型。例如,如果t代表int,ArrayOf(5,t)代表[5]int。</target>
        </trans-unit>
        <trans-unit id="9d31985fda87b26d6554bcfbfe7dbc398b51917e" translate="yes" xml:space="preserve">
          <source>As</source>
          <target state="translated">As</target>
        </trans-unit>
        <trans-unit id="77b9a4ab5fb6f3aa2a4543e5c9523108a1e28b09" translate="yes" xml:space="preserve">
          <source>As DeepEqual traverses the data values it may find a cycle. The second and subsequent times that DeepEqual compares two pointer values that have been compared before, it treats the values as equal rather than examining the values to which they point. This ensures that DeepEqual terminates.</source>
          <target state="translated">当DeepEqual遍历数据值时,它可能会发现一个循环。DeepEqual第二次及以后比较两个之前比较过的指针值时,它将这些值视为相等,而不是检查它们所指向的值。这就保证了DeepEqual的终止。</target>
        </trans-unit>
        <trans-unit id="bf7ffd2e67a06f0d880944cd2d92620233b1c05a" translate="yes" xml:space="preserve">
          <source>As a consequence, if one wrapped function blocks, JavaScript's event loop is blocked until that function returns. Hence, calling any async JavaScript API, which requires the event loop, like fetch (http.Client), will cause an immediate deadlock. Therefore a blocking function should explicitly start a new goroutine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b56f8d462bf82502c735c3c1eade6e22b30a7c4" translate="yes" xml:space="preserve">
          <source>As a more whimsical example, this program guesses your number:</source>
          <target state="translated">举个更奇特的例子,这个程序可以猜出你的号码。</target>
        </trans-unit>
        <trans-unit id="bff88475604e0dd205ad66a54a59842b94885110" translate="yes" xml:space="preserve">
          <source>As a precaution, ServeFile will reject requests where r.URL.Path contains a &quot;..&quot; path element; this protects against callers who might unsafely use filepath.Join on r.URL.Path without sanitizing it and then use that filepath.Join result as the name argument.</source>
          <target state="translated">作为一种预防措施,ServeFile 将拒绝包含&quot;.&quot;路径元素的 r.URL.Path 的请求;这可以防止调用者不安全地在 r.URL.Path 上使用 filepath.Join,而不对其进行消毒,然后使用 filepath.Join 的结果作为名称参数。</target>
        </trans-unit>
        <trans-unit id="77472da4c838d9f4435720e43e4f65598662d3e5" translate="yes" xml:space="preserve">
          <source>As a special case, attributes with the namespace &quot;xmlns&quot; are always treated as containing URLs. Given the excerpts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39e7711059649948e083fed172dc43cfc73eaaf" translate="yes" xml:space="preserve">
          <source>As a special case, if req.URL.Host is &quot;localhost&quot; (with or without a port number), then a nil URL and nil error will be returned.</source>
          <target state="translated">作为一种特殊情况,如果req.URL.Host是 &quot;localhost&quot;(带或不带端口号),那么将返回一个nil URL和nil错误。</target>
        </trans-unit>
        <trans-unit id="0a9520700e06b3fd7ed2d281b4e5489b3a38746f" translate="yes" xml:space="preserve">
          <source>As a special case, if the &quot;Content-Transfer-Encoding&quot; header has a value of &quot;quoted-printable&quot;, that header is instead hidden and the body is transparently decoded during Read calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae690189964440e45359a1c6c51db6559b11980b" translate="yes" xml:space="preserve">
          <source>As a special case, if the field tag is &quot;-&quot;, the field is always omitted. Note that a field with name &quot;-&quot; can still be generated using the tag &quot;-,&quot;.</source>
          <target state="translated">作为一种特殊情况,如果字段标签是&quot;-&quot;,字段总是被省略。请注意,名称为&quot;-&quot;的字段仍可使用标签&quot;-,&quot;生成。</target>
        </trans-unit>
        <trans-unit id="e60c59152c193360fae3f60276c9948866292a43" translate="yes" xml:space="preserve">
          <source>As a special case, it is legal to append a string to a byte slice, like this:</source>
          <target state="translated">作为一种特殊情况,在一个字节片上附加一个字符串是合法的,就像这样。</target>
        </trans-unit>
        <trans-unit id="564379e4b2f47f0c0856088856fe399c4a7ce7d9" translate="yes" xml:space="preserve">
          <source>As a special case, src can have kind String if the element type of dst is kind Uint8.</source>
          <target state="translated">作为一种特殊情况,如果dst的元素类型是Uint8,那么src的类型可以是String。</target>
        </trans-unit>
        <trans-unit id="f8c66ee4ab43b3719db19be5d1e8b263afc3c332" translate="yes" xml:space="preserve">
          <source>As a special case, the returned file server redirects any request ending in &quot;/index.html&quot; to the same path, without the final &quot;index.html&quot;.</source>
          <target state="translated">作为一种特殊情况,返回的文件服务器会将任何以&quot;/index.html &quot;结尾的请求重定向到相同的路径,而不是最后的 &quot;index.html&quot;。</target>
        </trans-unit>
        <trans-unit id="69cd9de94cfb605c56ea7c7a305ef94aa8e800ad" translate="yes" xml:space="preserve">
          <source>As another special case, ServeFile redirects any request where r.URL.Path ends in &quot;/index.html&quot; to the same path, without the final &quot;index.html&quot;. To avoid such redirects either modify the path or use ServeContent.</source>
          <target state="translated">作为另一种特殊情况,ServeFile会将任何r.URL.Path以&quot;/index.html &quot;结尾的请求重定向到相同的路径,而不包含最后的 &quot;index.html&quot;。为了避免这种重定向,可以修改路径或者使用ServeContent。</target>
        </trans-unit>
        <trans-unit id="c22915584feea30271ccd5462bc99d8717677963" translate="yes" xml:space="preserve">
          <source>As finds the first error in err's chain that matches target, and if so, sets target to that error value and returns true.</source>
          <target state="translated">As找到err链中第一个与target匹配的错误,如果是,则将target设置为该错误值并返回true。</target>
        </trans-unit>
        <trans-unit id="9f452521f0cfeaaa41704e22fd9e578445134242" translate="yes" xml:space="preserve">
          <source>As finds the first error in err's chain that matches target, and if so, sets target to that error value and returns true. Otherwise, it returns false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc527904b5762369a3f475f72b0dc996cabb70c" translate="yes" xml:space="preserve">
          <source>As in the cases above, it is invalid to store the result before the conversion:</source>
          <target state="translated">与上述情况一样,在转换前存储结果是无效的。</target>
        </trans-unit>
        <trans-unit id="aaf43f02c8be260818b1d2cfc8d762dc44ca7c4c" translate="yes" xml:space="preserve">
          <source>As in the previous case, the reflect data structures SliceHeader and StringHeader declare the field Data as a uintptr to keep callers from changing the result to an arbitrary type without first importing &quot;unsafe&quot;. However, this means that SliceHeader and StringHeader are only valid when interpreting the content of an actual slice or string value.</source>
          <target state="translated">与前一种情况一样,反射数据结构SliceHeader和StringHeader将字段Data声明为uintptr,以防止调用者在没有首先导入 &quot;不安全 &quot;的情况下将结果改为任意类型。然而,这意味着SliceHeader和StringHeader只有在解释实际分片或字符串值的内容时才有效。</target>
        </trans-unit>
        <trans-unit id="1c27858b3442fc0bee7882f1bb69b22f67a266cb" translate="yes" xml:space="preserve">
          <source>As of Go 1.8, ProbablyPrime(0) is allowed and applies only a Baillie-PSW test. Before Go 1.8, ProbablyPrime applied only the Miller-Rabin tests, and ProbablyPrime(0) panicked.</source>
          <target state="translated">从Go 1.8开始,ProbablyPrime(0)被允许,只应用Baillie-PSW测试。在Go 1.8之前,ProbablyPrime只应用Miller-Rabin测试,ProbablyPrime(0)就慌了。</target>
        </trans-unit>
        <trans-unit id="e7b4491e3912148482adb16859f32c2fa9f34180" translate="yes" xml:space="preserve">
          <source>As panics if target is not a non-nil pointer to either a type that implements error, or to any interface type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd4351c985c8d810139dead9123e042560e4b66" translate="yes" xml:space="preserve">
          <source>As returned by NewReader, a Reader expects input conforming to RFC 4180. The exported fields can be changed to customize the details before the first call to Read or ReadAll.</source>
          <target state="translated">正如NewReader返回的那样,Reader期望输入符合RFC 4180。在第一次调用Read或ReadAll之前,可以更改导出的字段以自定义细节。</target>
        </trans-unit>
        <trans-unit id="8e146a063bece1e3d2e6bbe0b5fda136eb3a8802" translate="yes" xml:space="preserve">
          <source>As returned by NewWriter, a Writer writes records terminated by a newline and uses ',' as the field delimiter. The exported fields can be changed to customize the details before the first call to Write or WriteAll.</source>
          <target state="translated">正如NewWriter所返回的那样,Writer写入以换行结束的记录,并使用','作为字段定界符。在第一次调用Write或WriteAll之前,可以更改导出的字段,以自定义细节。</target>
        </trans-unit>
        <trans-unit id="f7df27550c12511e83c255cdee5cd115de36801a" translate="yes" xml:space="preserve">
          <source>As this uses the math/rand package, it must not be used for security-sensitive work. Use crypto/rand.Int instead.</source>
          <target state="translated">由于它使用的是 math/rand 包,所以不能用于安全敏感的工作。请使用 crypto/rand.Int 来代替。</target>
        </trans-unit>
        <trans-unit id="2cd259da2c4b6fea04004fe9f9885ac522790abc" translate="yes" xml:space="preserve">
          <source>As unwraps its first argument sequentially looking for an error that can be assigned to its second argument, which must be a pointer. If it succeeds, it performs the assignment and returns true. Otherwise, it returns false. The form</source>
          <target state="translated">As依次解包它的第一个参数,寻找可以分配给第二个参数的错误,第二个参数必须是一个指针。如果成功,它就执行赋值并返回true。否则,它将返回false。形式为</target>
        </trans-unit>
        <trans-unit id="8374f63c4cc91790e10a17540248859e2c43749e" translate="yes" xml:space="preserve">
          <source>As will panic if target is not a non-nil pointer to either a type that implements error, or to any interface type. As returns false if err is nil.</source>
          <target state="translated">如果 target 不是一个非零指针,不是指向实现 error 的类型,也不是指向任何接口类型,As 将会恐慌。如果err是nil,As将返回false。</target>
        </trans-unit>
        <trans-unit id="e12a672c4a03c1f366a655654dd82547f4c192b6" translate="yes" xml:space="preserve">
          <source>As with Mutexes, a locked RWMutex is not associated with a particular goroutine. One goroutine may RLock (Lock) a RWMutex and then arrange for another goroutine to RUnlock (Unlock) it.</source>
          <target state="translated">与Mutexes一样,被锁定的RWMutex并不与特定的goroutine相关联,一个goroutine可以RLock(锁定)一个RWMutex,然后安排另一个goroutine去RUnlock(解锁)它。一个goroutine可以RLock(锁定)一个RWMutex,然后安排另一个goroutine去RUnlock(解锁)它。</target>
        </trans-unit>
        <trans-unit id="3f21579b78a9211097bade1507cf7d1061aef2af" translate="yes" xml:space="preserve">
          <source>Asin</source>
          <target state="translated">Asin</target>
        </trans-unit>
        <trans-unit id="5bad1e47810824babb31078e94077c5944ed414b" translate="yes" xml:space="preserve">
          <source>Asin returns the arcsine, in radians, of x.</source>
          <target state="translated">Asin 返回 x 的弧度。</target>
        </trans-unit>
        <trans-unit id="42f92a72e30529e672dc5d2bdb4e52a1e80b51ed" translate="yes" xml:space="preserve">
          <source>Asin returns the inverse sine of x.</source>
          <target state="translated">Asin 返回 x 的反正弦值。</target>
        </trans-unit>
        <trans-unit id="ad5ced2b521e057f06b0f8b74356c5357ee0c1b5" translate="yes" xml:space="preserve">
          <source>Asinh</source>
          <target state="translated">Asinh</target>
        </trans-unit>
        <trans-unit id="6b958528f6028414e36bacd2591d4b6be481f7b4" translate="yes" xml:space="preserve">
          <source>Asinh returns the inverse hyperbolic sine of x.</source>
          <target state="translated">Asinh返回x的反双曲正弦。</target>
        </trans-unit>
        <trans-unit id="88ff212e4044fa4ecfe39d2c2662e15ee5065576" translate="yes" xml:space="preserve">
          <source>AssertableTo reports whether a value of type V can be asserted to have type T.</source>
          <target state="translated">AssertableTo报告类型V的值是否可以被断言为具有类型T。</target>
        </trans-unit>
        <trans-unit id="b7e50e603d8ca37cb77d5d576d4a7b54854bdbbc" translate="yes" xml:space="preserve">
          <source>AssignNode holds a list of variable names, possibly with chained field accesses. The dollar sign is part of the (first) name.</source>
          <target state="translated">AssignNode持有一个变量名的列表,可能有链式字段访问。美元符号是(第一个)名称的一部分。</target>
        </trans-unit>
        <trans-unit id="ec3e8c371a10dbed4fea0329ff6a11ce3cbd6f29" translate="yes" xml:space="preserve">
          <source>Assignable reports whether the corresponding expression is assignable to (provided a value of the right type).</source>
          <target state="translated">Assignable报告对应的表达式是否可分配给(只要有一个正确类型的值)。</target>
        </trans-unit>
        <trans-unit id="bd5a07eeed4108b05189ea3b918384a565a62707" translate="yes" xml:space="preserve">
          <source>AssignableTo reports whether a value of type V is assignable to a variable of type T.</source>
          <target state="translated">AssignableTo报告类型V的值是否可以分配给类型T的变量。</target>
        </trans-unit>
        <trans-unit id="073f06f859d560b94308665c74b394553a4cb550" translate="yes" xml:space="preserve">
          <source>Associated templates</source>
          <target state="translated">相关模板</target>
        </trans-unit>
        <trans-unit id="121e4049fd559093314fa7baa93a29ee9ee41472" translate="yes" xml:space="preserve">
          <source>Assuming {{.}} is `O'Reilly: How are &amp;lt;i&amp;gt;you&amp;lt;/i&amp;gt;?`, the table below shows how {{.}} appears when used in the context to the left.</source>
          <target state="translated">假设{{。}}是&amp;ldquo; O'Reilly：&amp;lt;i&amp;gt;您&amp;lt;/ i&amp;gt;？&amp;rdquo;，下表显示了{{。}}在左侧上下文中的显示方式。</target>
        </trans-unit>
        <trans-unit id="746de06dfc27875c233a16bc538c38c9e6d17830" translate="yes" xml:space="preserve">
          <source>At implements the Image interface.</source>
          <target state="translated">At实现了Image接口。</target>
        </trans-unit>
        <trans-unit id="a60dd7bc9b32af28f00b9d0d9bb8fa49524604ad" translate="yes" xml:space="preserve">
          <source>At parse time each {{.}} is overwritten to add escaping functions as necessary. In this case it becomes</source>
          <target state="translated">在解析时,每个{{.}}都会被覆盖,以根据需要添加转义函数。在这种情况下,它变成了</target>
        </trans-unit>
        <trans-unit id="065243bc78ccf8f2ee7c8d7202c512e520eaaa4e" translate="yes" xml:space="preserve">
          <source>At parse time the attribute will be treated as if it were just &quot;href&quot;. So at parse time the template becomes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e3eceea09e99bbe6f86edd4f16394f742e1175" translate="yes" xml:space="preserve">
          <source>At parse time they become:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c768384f5ab946e2671bd5332081db4467e2d17" translate="yes" xml:space="preserve">
          <source>At parse time this becomes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0afca5b2f066f8034ea0fbbfa4603da7e5cc29" translate="yes" xml:space="preserve">
          <source>At returns the bit at the given index. If the index is out of range it returns false.</source>
          <target state="translated">At返回给定索引的位。如果索引超出了范围,则返回false。</target>
        </trans-unit>
        <trans-unit id="42341bc94e9e432ac7ed1df54f5e5cefe525e01c" translate="yes" xml:space="preserve">
          <source>At returns the i'th method in s for 0 &amp;lt;= i &amp;lt; s.Len().</source>
          <target state="translated">At返回0中的第i个方法，其中0 &amp;lt;= i &amp;lt;s.Len（）。</target>
        </trans-unit>
        <trans-unit id="77c9122bd7d1bb2ad8f2ac38d7b8b3292183a2ac" translate="yes" xml:space="preserve">
          <source>At returns the i'th variable of tuple t.</source>
          <target state="translated">At返回元组t的第i个变量。</target>
        </trans-unit>
        <trans-unit id="1b17e31210b8e43c3d1e1c222717ddf79de31d1e" translate="yes" xml:space="preserve">
          <source>At this point, clients can see a service &quot;Arith&quot; with methods &quot;Arith.Multiply&quot; and &quot;Arith.Divide&quot;. To invoke one, a client first dials the server:</source>
          <target state="translated">此时,客户端可以看到一个服务 &quot;Arith&quot;,其方法为 &quot;Arith.Multiply &quot;和 &quot;Arith.Divide&quot;。要调用其中一个,客户端首先要拨通服务器。</target>
        </trans-unit>
        <trans-unit id="629848d109abb16cacec52ea5ca0dc3eddfe0f61" translate="yes" xml:space="preserve">
          <source>Atan</source>
          <target state="translated">Atan</target>
        </trans-unit>
        <trans-unit id="c50e85584d7681c5aba445dde84464172eb36a4c" translate="yes" xml:space="preserve">
          <source>Atan returns the arctangent, in radians, of x.</source>
          <target state="translated">Atan返回x的正切值,以弧度为单位。</target>
        </trans-unit>
        <trans-unit id="0c11076c24ca507422c2e7e78169bc402e507472" translate="yes" xml:space="preserve">
          <source>Atan returns the inverse tangent of x.</source>
          <target state="translated">阿坦返回x的反切线。</target>
        </trans-unit>
        <trans-unit id="90c852f25296e9373d22d6d648bd28708c31cbec" translate="yes" xml:space="preserve">
          <source>Atan2</source>
          <target state="translated">Atan2</target>
        </trans-unit>
        <trans-unit id="63a222caf5c6142da57e1b301f3487b179288ab4" translate="yes" xml:space="preserve">
          <source>Atan2 returns the arc tangent of y/x, using the signs of the two to determine the quadrant of the return value.</source>
          <target state="translated">Atan2返回y/x的圆弧正切,利用两者的符号来确定返回值的象限。</target>
        </trans-unit>
        <trans-unit id="6ce5901b2d008f90c0bf7e89db8b95255eacee6a" translate="yes" xml:space="preserve">
          <source>Atanh</source>
          <target state="translated">Atanh</target>
        </trans-unit>
        <trans-unit id="8f20e96a43909d1a86e1589070972405040e354c" translate="yes" xml:space="preserve">
          <source>Atanh returns the inverse hyperbolic tangent of x.</source>
          <target state="translated">Atanh返回x的反双曲正切。</target>
        </trans-unit>
        <trans-unit id="3c51e7a1c54b1f53de6e7c0fd3b84cdb88ba42e1" translate="yes" xml:space="preserve">
          <source>Atoi</source>
          <target state="translated">Atoi</target>
        </trans-unit>
        <trans-unit id="a117e4e38bf32f2974a89f461d6056635052cfb0" translate="yes" xml:space="preserve">
          <source>Atoi is equivalent to ParseInt(s, 10, 0), converted to type int.</source>
          <target state="translated">Atoi相当于ParseInt(s,10,0),转换为int类型。</target>
        </trans-unit>
        <trans-unit id="9126f09b1713910b4d3a69d102dd9587b4610486" translate="yes" xml:space="preserve">
          <source>Attempting to receive into these types will draw a decode error:</source>
          <target state="translated">试图接收到这些类型的信息将导致一个解码错误。</target>
        </trans-unit>
        <trans-unit id="5152403a7269d216ae8f4ea3b4b7a658797c9d36" translate="yes" xml:space="preserve">
          <source>AttrField returns the Field associated with attribute Attr in Entry, or nil if there is no such attribute.</source>
          <target state="translated">AttrField返回与Entry中属性Attr相关联的Field,如果没有这个属性,则返回nil。</target>
        </trans-unit>
        <trans-unit id="9ae0f439833163a3ddeedb35a68c62f7f5934a05" translate="yes" xml:space="preserve">
          <source>AttributeTypeAndValue mirrors the ASN.1 structure of the same name in RFC 5280, Section 4.1.2.4.</source>
          <target state="translated">AttributeTypeAndValue是RFC 5280第4.1.2.4节中同名ASN.1结构的镜像。</target>
        </trans-unit>
        <trans-unit id="2ec0ad7b2c80ec04692a3797f2bbc0ec3042876b" translate="yes" xml:space="preserve">
          <source>AttributeTypeAndValueSET represents a set of ASN.1 sequences of AttributeTypeAndValue sequences from RFC 2986 (PKCS #10).</source>
          <target state="translated">AttributeTypeAndValueSET表示一组来自RFC 2986(PKCS #10)的AttributeTypeAndValue序列的ASN.1序列。</target>
        </trans-unit>
        <trans-unit id="6ac9e41cbb428a4ffbfe1eab6d339a53ee428688" translate="yes" xml:space="preserve">
          <source>Attributes with a namespace are treated as if they had no namespace. Given the excerpt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dace1e8c248d4f2663a3146820d6fa8f0645716" translate="yes" xml:space="preserve">
          <source>Auth authenticates a client using the provided authentication mechanism. A failed authentication closes the connection. Only servers that advertise the AUTH extension support this function.</source>
          <target state="translated">Auth使用提供的认证机制对客户端进行认证。认证失败则关闭连接。只有宣传AUTH扩展的服务器才支持这个功能。</target>
        </trans-unit>
        <trans-unit id="76ecb9e901daf9a93bba425a3a690af96a11bc07" translate="yes" xml:space="preserve">
          <source>Auth is implemented by an SMTP authentication mechanism.</source>
          <target state="translated">Auth由SMTP认证机制实现。</target>
        </trans-unit>
        <trans-unit id="bf0ed01eae13fda7bf984cbae649794a647f7d90" translate="yes" xml:space="preserve">
          <source>Available reports whether the given hash function is linked into the binary.</source>
          <target state="translated">可用报告给定的哈希函数是否被链接到二进制中。</target>
        </trans-unit>
        <trans-unit id="9a9ecdcb8faf4f6fafd06e9771061d704142a340" translate="yes" xml:space="preserve">
          <source>Available returns how many bytes are unused in the buffer.</source>
          <target state="translated">Available 返回缓冲区中未使用的字节数。</target>
        </trans-unit>
        <trans-unit id="ee148636f87031dd785d5275b1cbdf15a231b5a3" translate="yes" xml:space="preserve">
          <source>B is a type passed to Benchmark functions to manage benchmark timing and to specify the number of iterations to run.</source>
          <target state="translated">B是传递给Benchmark函数的类型,用于管理基准时序和指定运行的迭代次数。</target>
        </trans-unit>
        <trans-unit id="281039689fe09086452a06fde13b577021f53925" translate="yes" xml:space="preserve">
          <source>B.ReportMetric</source>
          <target state="translated">B.ReportMetric</target>
        </trans-unit>
        <trans-unit id="9735fb9f071a76bf96e03bb1c83afc5962a297bd" translate="yes" xml:space="preserve">
          <source>B.RunParallel</source>
          <target state="translated">B.RunParallel</target>
        </trans-unit>
        <trans-unit id="b352c33a80325aa5fb2ae226450e350d636f2327" translate="yes" xml:space="preserve">
          <source>BUG(rsc): The rule Title uses for word boundaries does not handle Unicode punctuation properly.</source>
          <target state="translated">BUG(rsc)。Title 用于处理单词边界的规则不能正确处理 Unicode 标点符号。</target>
        </trans-unit>
        <trans-unit id="f4b82c251d3f9879cefc981c46207be3e496ae01" translate="yes" xml:space="preserve">
          <source>Back returns the last element of list l or nil if the list is empty.</source>
          <target state="translated">Back返回列表l的最后一个元素,如果列表为空,则返回nil。</target>
        </trans-unit>
        <trans-unit id="db678d849360d59ad5f56340bc8559ccb08f51dd" translate="yes" xml:space="preserve">
          <source>Background returns a non-nil, empty Context. It is never canceled, has no values, and has no deadline. It is typically used by the main function, initialization, and tests, and as the top-level Context for incoming requests.</source>
          <target state="translated">Background返回一个非零的空Context。它永远不会被取消,没有值,也没有截止日期。它通常被主函数、初始化和测试使用,并作为传入请求的顶层Context。</target>
        </trans-unit>
        <trans-unit id="077fe9c54ed5ed26fa547f4ded3ef9a9bb066d65" translate="yes" xml:space="preserve">
          <source>Base</source>
          <target state="translated">Base</target>
        </trans-unit>
        <trans-unit id="0885011e0986be0085d2d4d1e06d03585dc94622" translate="yes" xml:space="preserve">
          <source>Base returns the base offset of file f as registered with AddFile.</source>
          <target state="translated">Base 返回用 AddFile 注册的文件 f 的基本偏移量。</target>
        </trans-unit>
        <trans-unit id="72eb5d9f9166fd131965cf967a0725b84747d8a2" translate="yes" xml:space="preserve">
          <source>Base returns the last element of path. Trailing path separators are removed before extracting the last element. If the path is empty, Base returns &quot;.&quot;. If the path consists entirely of separators, Base returns a single separator.</source>
          <target state="translated">Base 返回路径的最后一个元素。在提取最后一个元素之前,路径的分隔符会被删除。如果路径为空,Base返回&quot;.&quot;。如果路径完全由分隔符组成,Base返回一个分隔符。</target>
        </trans-unit>
        <trans-unit id="730ef2dc0cbbd72e56b0f126a32b827069f4b3d9" translate="yes" xml:space="preserve">
          <source>Base returns the last element of path. Trailing slashes are removed before extracting the last element. If the path is empty, Base returns &quot;.&quot;. If the path consists entirely of slashes, Base returns &quot;/&quot;.</source>
          <target state="translated">Base 返回路径的最后一个元素。在提取最后一个元素之前,会去除尾部的斜线。如果路径为空,Base返回&quot;.&quot;。如果路径完全由斜线组成,Base返回&quot;/&quot;。</target>
        </trans-unit>
        <trans-unit id="f6e297784364859b17a6c3c7c606bb16913b7cdc" translate="yes" xml:space="preserve">
          <source>Base returns the minimum base offset that must be provided to AddFile when adding the next file.</source>
          <target state="translated">Base 返回添加下一个文件时必须提供给 AddFile 的最小基准偏移量。</target>
        </trans-unit>
        <trans-unit id="99eb4008013599132cd3e27c5fb83407d85919a5" translate="yes" xml:space="preserve">
          <source>BaseName returns the symbol name without the package or receiver name.</source>
          <target state="translated">BaseName 返回不包含包或接收方名称的符号名称。</target>
        </trans-unit>
        <trans-unit id="e43eaab116942fbe79dd46a07719c75b728c8d47" translate="yes" xml:space="preserve">
          <source>BasicAuth returns the username and password provided in the request's Authorization header, if the request uses HTTP Basic Authentication. See RFC 2617, Section 2.</source>
          <target state="translated">如果请求使用HTTP基本认证,BasicAuth将返回请求的授权头中提供的用户名和密码。参见RFC 2617,第2节。</target>
        </trans-unit>
        <trans-unit id="366b21a60efe866654ff1d4abe0a6348b62eb4bd" translate="yes" xml:space="preserve">
          <source>BasicInfo is a set of flags describing properties of a basic type.</source>
          <target state="translated">BasicInfo是一组描述基本类型属性的标志。</target>
        </trans-unit>
        <trans-unit id="de3ed59db1b7a02aa019b4d63cd7924f0ff03037" translate="yes" xml:space="preserve">
          <source>BasicKind describes the kind of basic type.</source>
          <target state="translated">BasicKind描述了基本类型的种类。</target>
        </trans-unit>
        <trans-unit id="5fcebeefad3cdbbf8733aa928160dec7dc90c1a1" translate="yes" xml:space="preserve">
          <source>Basics</source>
          <target state="translated">Basics</target>
        </trans-unit>
        <trans-unit id="a559837e1ca8160c6adbcc9d6e61ffb4253f8979" translate="yes" xml:space="preserve">
          <source>Be aware that calling Sign with an attacker-controlled PrivateKey may require an arbitrary amount of CPU.</source>
          <target state="translated">请注意,用攻击者控制的PrivateKey调用Sign可能需要任意数量的CPU。</target>
        </trans-unit>
        <trans-unit id="a579e80e86d1e7d0159d880e6b8fbe6e97090888" translate="yes" xml:space="preserve">
          <source>Because Unmarshal uses the reflect package, it can only assign to exported (upper case) fields. Unmarshal uses a case-sensitive comparison to match XML element names to tag values and struct field names.</source>
          <target state="translated">因为Unmarshal使用反射包,所以它只能分配给导出的(大写)字段。Unmarshal 使用大小写敏感的比较来匹配 XML 元素名与标签值和结构字段名。</target>
        </trans-unit>
        <trans-unit id="523d61a0fa00dd823c410985160019d3fd2694f7" translate="yes" xml:space="preserve">
          <source>Because associated templates share underlying data, template construction cannot be done safely in parallel. Once the templates are constructed, they can be executed in parallel.</source>
          <target state="translated">因为关联模板共享底层数据,所以模板的构建不能安全地并行进行。模板构建完成后,可以并行执行。</target>
        </trans-unit>
        <trans-unit id="c48bfaadf8cd2cdc8bb489f610161c315416f443" translate="yes" xml:space="preserve">
          <source>Because c.L is not locked when Wait first resumes, the caller typically cannot assume that the condition is true when Wait returns. Instead, the caller should Wait in a loop:</source>
          <target state="translated">因为当Wait第一次恢复时,c.L没有被锁定,所以调用者通常不能假设Wait返回时条件为真。相反,调用者应该在循环中Wait。</target>
        </trans-unit>
        <trans-unit id="c54914271c00fc66938747e3c3b7008bdc4689f3" translate="yes" xml:space="preserve">
          <source>Because compilation units can describe multiple regions of the executable, in the worst case SeekPC must search through all the ranges in all the compilation units. Each call to SeekPC starts the search at the compilation unit of the last call, so in general looking up a series of PCs will be faster if they are sorted. If the caller wishes to do repeated fast PC lookups, it should build an appropriate index using the Ranges method.</source>
          <target state="translated">因为编译单元可以描述可执行文件的多个区域,在最坏的情况下,SeekPC必须搜索所有编译单元中的所有范围。对SeekPC的每次调用都会从上次调用的编译单元开始搜索,所以一般来说,如果对一系列PC进行排序,查找速度会更快。如果调用者希望进行重复的快速PC查找,应该使用Ranges方法建立一个合适的索引。</target>
        </trans-unit>
        <trans-unit id="f624f6937df7b930caaacba36f0e003303314362" translate="yes" xml:space="preserve">
          <source>Because no call to Do returns until the one call to f returns, if f causes Do to be called, it will deadlock.</source>
          <target state="translated">因为在对f的一次调用没有返回之前,对Do的调用都不会返回,如果f导致Do被调用,就会死锁。</target>
        </trans-unit>
        <trans-unit id="10e6b41f775d08ce6bc91138d6c2ffbef503d1d6" translate="yes" xml:space="preserve">
          <source>Because the monotonic clock reading has no meaning outside the current process, the serialized forms generated by t.GobEncode, t.MarshalBinary, t.MarshalJSON, and t.MarshalText omit the monotonic clock reading, and t.Format provides no format for it. Similarly, the constructors time.Date, time.Parse, time.ParseInLocation, and time.Unix, as well as the unmarshalers t.GobDecode, t.UnmarshalBinary. t.UnmarshalJSON, and t.UnmarshalText always create times with no monotonic clock reading.</source>
          <target state="translated">由于单调时钟读数在当前进程之外没有任何意义,所以t.GobEncode、t.MarshalBinary、t.MarshalJSON和t.MarshalText生成的序列化表单省略了单调时钟读数,t.Format也没有为其提供格式。同样,构造函数time.Date、time.Parse、time.ParseInLocation和time.Unix,以及解调器t.GobDecode、t.UnmarshalBinary.t.UnmarshalJSON和t.UnmarshalText总是创建没有单调时钟读数的时间。</target>
        </trans-unit>
        <trans-unit id="2931b27564afddbb3dd2ae5bab9920e7ef6ed41b" translate="yes" xml:space="preserve">
          <source>Because these interfaces and primitives wrap lower-level operations with various implementations, unless otherwise informed clients should not assume they are safe for parallel execution.</source>
          <target state="translated">由于这些接口和基元用不同的实现包裹了低级操作,除非另有告知,否则客户不应假定它们对并行执行是安全的。</target>
        </trans-unit>
        <trans-unit id="35fcba4a31cbe45a039eaa4f4cccf00b01bffed2" translate="yes" xml:space="preserve">
          <source>Before Go 1.2, an InvalidUTF8Error was returned by Marshal when attempting to encode a string value with invalid UTF-8 sequences. As of Go 1.2, Marshal instead coerces the string to valid UTF-8 by replacing invalid bytes with the Unicode replacement rune U+FFFD.</source>
          <target state="translated">在 Go 1.2 之前,当 Marshal 试图用无效的 UTF-8 序列对字符串值进行编码时,会返回 InvalidUTF8Error。从 Go 1.2 开始,Marshal 通过用 Unicode 替换符文 U+FFFD 替换无效的字节,将字符串强制为有效的 UTF-8。</target>
        </trans-unit>
        <trans-unit id="27478232731be1bfbeb9336618ea6bd3499ef977" translate="yes" xml:space="preserve">
          <source>Before a connection is returned to the connection pool after use, IsValid is called if implemented. Before a connection is reused for another query, ResetSession is called if implemented. If a connection is never returned to the connection pool but immediately reused, then ResetSession is called prior to reuse but IsValid is not called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73598333463e9f5f45d82a86c218e8031e1759c" translate="yes" xml:space="preserve">
          <source>Before calling UnlockOSThread, the caller must ensure that the OS thread is suitable for running other goroutines. If the caller made any permanent changes to the state of the thread that would affect other goroutines, it should not call this function and thus leave the goroutine locked to the OS thread until the goroutine (and hence the thread) exits.</source>
          <target state="translated">在调用UnlockOSThread之前,调用者必须确保OS线程适合运行其他goroutine。如果调用者对线程的状态做了任何永久性的改变,而这些改变会影响其他goroutine,那么就不应该调用这个函数,从而使goroutine被锁定在OS线程上,直到goroutine(从而也是线程)退出。</target>
        </trans-unit>
        <trans-unit id="c8e6ffc3c30540fb4fc792e9d4357fe97560a188" translate="yes" xml:space="preserve">
          <source>Before reports whether the time instant t is before u.</source>
          <target state="translated">Before报告时间瞬间t是否在u之前。</target>
        </trans-unit>
        <trans-unit id="606149b36fd31d7cdbc22b8147b6e250b63644a8" translate="yes" xml:space="preserve">
          <source>Begin starts a transaction. The default isolation level is dependent on the driver.</source>
          <target state="translated">Begin 启动一个事务。默认的隔离级别取决于驱动程序。</target>
        </trans-unit>
        <trans-unit id="7cd63441add5782709d8f334b556a5c9fa7bdc37" translate="yes" xml:space="preserve">
          <source>BeginTx starts a transaction.</source>
          <target state="translated">BeginTx开始交易。</target>
        </trans-unit>
        <trans-unit id="3207514bf6d3821c848dd10bdfa8d78bb40dcea3" translate="yes" xml:space="preserve">
          <source>Benchmark benchmarks a single function. It is useful for creating custom benchmarks that do not use the &quot;go test&quot; command.</source>
          <target state="translated">基准对单个函数进行基准测试。它对于创建不使用 &quot;go test &quot;命令的自定义基准非常有用。</target>
        </trans-unit>
        <trans-unit id="e030fd6d03700a56260bd837de91d33a65e0ca39" translate="yes" xml:space="preserve">
          <source>BenchmarkResult contains the results of a benchmark run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f46ac72b3634f96c6860b1ed26d9d4cd71d21aa" translate="yes" xml:space="preserve">
          <source>Benchmarks</source>
          <target state="translated">Benchmarks</target>
        </trans-unit>
        <trans-unit id="595a85b5dfe37bb8ea10dd65bbf5df54240ef01f" translate="yes" xml:space="preserve">
          <source>BigEndian is the big-endian implementation of ByteOrder.</source>
          <target state="translated">BigEndian是ByteOrder的大恩典实现。</target>
        </trans-unit>
        <trans-unit id="1a8e46c0c273a4b21db3dc88b0bc1fa8455576e3" translate="yes" xml:space="preserve">
          <source>Binary-Only Packages</source>
          <target state="translated">二进制包</target>
        </trans-unit>
        <trans-unit id="cb0f451964a92b1951caeba948c48201789ad9ee" translate="yes" xml:space="preserve">
          <source>BinaryMarshaler is the interface implemented by an object that can marshal itself into a binary form.</source>
          <target state="translated">BinaryMarshaler是由一个对象实现的接口,它可以把自己调成二进制形式。</target>
        </trans-unit>
        <trans-unit id="8d76f4817cb16f671ca5aee534556905d021cc99" translate="yes" xml:space="preserve">
          <source>BinaryOp</source>
          <target state="translated">BinaryOp</target>
        </trans-unit>
        <trans-unit id="921645dac207c4f83f06bce30493a71396088bbe" translate="yes" xml:space="preserve">
          <source>BinaryOp returns the result of the binary expression x op y. The operation must be defined for the operands. If one of the operands is Unknown, the result is Unknown. BinaryOp doesn't handle comparisons or shifts; use Compare or Shift instead.</source>
          <target state="translated">BinaryOp返回二进制表达式x op y的结果,必须为操作数定义操作。如果操作数之一为未知,则结果为未知。BinaryOp不处理比较或移位,使用Compare或Shift代替。</target>
        </trans-unit>
        <trans-unit id="aadd7b0b0b5fb55d09fc3d06572f282dff2441a6" translate="yes" xml:space="preserve">
          <source>BinaryUnmarshaler is the interface implemented by an object that can unmarshal a binary representation of itself.</source>
          <target state="translated">BinaryUnmarshaler是由一个对象实现的接口,它可以对自己的二进制表示进行解扰。</target>
        </trans-unit>
        <trans-unit id="bbc8be299a236737ac4bcd6e0b8a8942dcf2d6e6" translate="yes" xml:space="preserve">
          <source>BindToDevice binds the socket associated with fd to device.</source>
          <target state="translated">BindToDevice将与fd关联的socket绑定到设备上。</target>
        </trans-unit>
        <trans-unit id="16d18c58d40584999fc8105b9b042e87422089ab" translate="yes" xml:space="preserve">
          <source>Binomial sets z to the binomial coefficient of (n, k) and returns z.</source>
          <target state="translated">二项式设z为(n,k)的二项式系数,并返回z。</target>
        </trans-unit>
        <trans-unit id="5ddd24fa4c794f9b329dfacec18d2187e2964355" translate="yes" xml:space="preserve">
          <source>Bit returns the value of the i'th bit of x. That is, it returns (x&amp;gt;&amp;gt;i)&amp;amp;1. The bit index i must be &amp;gt;= 0.</source>
          <target state="translated">该位返回x的第i个位的值。也就是说，它返回（x &amp;gt;&amp;gt; i）＆1。位索引i必须大于等于0。</target>
        </trans-unit>
        <trans-unit id="6bc8c103293d835982059015b02530a9dce7c7fe" translate="yes" xml:space="preserve">
          <source>BitLen returns the length of the absolute value of x in bits. The bit length of 0 is 0.</source>
          <target state="translated">BitLen以比特为单位返回x的绝对值的长度。0的位长为0。</target>
        </trans-unit>
        <trans-unit id="249f28fd5304db8d7893c5941b0e5c6d36dcae80" translate="yes" xml:space="preserve">
          <source>BitLen returns the number of bits required to represent the absolute value x in binary representation; x must be an Int or an Unknown. If x is Unknown, the result is 0.</source>
          <target state="translated">BitLen 返回用二进制表示绝对值 x 所需的位数;x 必须是 Int 或 Unknown。如果x为未知数,结果为0。</target>
        </trans-unit>
        <trans-unit id="ecd1fdf628a58ae78c5a7dd496f33ee72ff11255" translate="yes" xml:space="preserve">
          <source>BitString is the structure to use when you want an ASN.1 BIT STRING type. A bit string is padded up to the nearest byte in memory and the number of valid bits is recorded. Padding bits will be zero.</source>
          <target state="translated">BitString是当你想要一个ASN.1 BIT STRING类型时使用的结构。一个比特字符串在内存中被填充到最接近的字节,并记录有效位数。填充位将为零。</target>
        </trans-unit>
        <trans-unit id="9b86ce6cb2c2b41799ca1c79001b25b6a71ae1d0" translate="yes" xml:space="preserve">
          <source>Bits provides raw (unchecked but fast) access to x by returning its absolute value as a little-endian Word slice. The result and x share the same underlying array. Bits is intended to support implementation of missing low-level Int functionality outside this package; it should be avoided otherwise.</source>
          <target state="translated">Bits通过返回x的绝对值作为一个小段的Word分片,提供对x的原始访问(未被选中但速度很快)。结果和x共享同一个底层数组。Bits的目的是支持在这个包之外实现缺失的低级Int功能;否则应该避免使用它。</target>
        </trans-unit>
        <trans-unit id="8785e8d0d70df9ef411a1a99b4e2008220100ed8" translate="yes" xml:space="preserve">
          <source>Blank lines are ignored. A line with only whitespace characters (excluding the ending newline character) is not considered a blank line.</source>
          <target state="translated">空行将被忽略。只有空白字符(不包括结尾的换行符)的行不被视为空行。</target>
        </trans-unit>
        <trans-unit id="ab40b9553b86d8db879c49ff4725f0be1d518336" translate="yes" xml:space="preserve">
          <source>BlockProfile returns n, the number of records in the current blocking profile. If len(p) &amp;gt;= n, BlockProfile copies the profile into p and returns n, true. If len(p) &amp;lt; n, BlockProfile does not change p and returns n, false.</source>
          <target state="translated">BlockProfile返回n，即当前阻止配置文件中的记录数。如果len（p）&amp;gt; = n，则BlockProfile将配置文件复制到p中并返回n，为true。如果len（p）&amp;lt;n，则BlockProfile不会更改p并返回n，否则为false。</target>
        </trans-unit>
        <trans-unit id="6ae50f5c12fe5e00104f9ffadf5daeabfcf4ed33" translate="yes" xml:space="preserve">
          <source>BlockProfileRecord describes blocking events originated at a particular call sequence (stack trace).</source>
          <target state="translated">BlockProfileRecord描述了源于特定调用序列的阻塞事件(堆栈跟踪)。</target>
        </trans-unit>
        <trans-unit id="85ef7e3c2654f8573a1d7a67091280baf14e7241" translate="yes" xml:space="preserve">
          <source>Bool defines a bool flag with specified name, default value, and usage string. The return value is the address of a bool variable that stores the value of the flag.</source>
          <target state="translated">Bool定义了一个具有指定名称、默认值和用法字符串的bool标志,返回值是一个存放标志值的bool变量的地址。返回值是一个存放标志值的bool变量的地址。</target>
        </trans-unit>
        <trans-unit id="7e6896885d6315609679d245d2070ffe8fed4e1b" translate="yes" xml:space="preserve">
          <source>Bool is a ValueConverter that converts input values to bools.</source>
          <target state="translated">Bool是一个ValueConverter,可以将输入值转换为bools。</target>
        </trans-unit>
        <trans-unit id="0fb9432e73dd047df304b2009b6c3b825667d954" translate="yes" xml:space="preserve">
          <source>Bool returns the value v as a bool. It panics if v is not a JavaScript boolean.</source>
          <target state="translated">Bool将v作为一个布尔值返回。如果v不是JavaScript布尔值,它就会惊慌失措。</target>
        </trans-unit>
        <trans-unit id="10b302964452c62c167d20c7d6a6eb54f65b9ba5" translate="yes" xml:space="preserve">
          <source>Bool returns v's underlying value. It panics if v's kind is not Bool.</source>
          <target state="translated">Bool返回v的基本值。如果v的种类不是Bool,它就会恐慌。</target>
        </trans-unit>
        <trans-unit id="b37fb77c4eb8b7e67beea7dd6aa3c0cab362ce86" translate="yes" xml:space="preserve">
          <source>BoolNode holds a boolean constant.</source>
          <target state="translated">BoolNode持有一个布尔常数。</target>
        </trans-unit>
        <trans-unit id="f8e8a6bce6cf09d8bab71de479256430c4f50e55" translate="yes" xml:space="preserve">
          <source>BoolVal returns the Go boolean value of x, which must be a Bool or an Unknown. If x is Unknown, the result is false.</source>
          <target state="translated">BoolVal 返回 x 的 Go 布尔值,它必须是 Bool 或 Unknown。如果x是未知值,结果是false。</target>
        </trans-unit>
        <trans-unit id="499f2e8136043fcef09799424f98d1389a945e55" translate="yes" xml:space="preserve">
          <source>BoolVar defines a bool flag with specified name, default value, and usage string. The argument p points to a bool variable in which to store the value of the flag.</source>
          <target state="translated">BoolVar定义了一个具有指定名称、默认值和用法字符串的bool标志,参数p指向一个存放标志值的bool变量。参数p指向一个bool变量,用来存储标志的值。</target>
        </trans-unit>
        <trans-unit id="4b0e763b67dea569e511a23d06447d965f06236f" translate="yes" xml:space="preserve">
          <source>Boolean values encode as JSON booleans.</source>
          <target state="translated">布尔值编码为JSON布尔值。</target>
        </trans-unit>
        <trans-unit id="6f9fa2ad669da3999136da1456c5f3ffdf720ead" translate="yes" xml:space="preserve">
          <source>Boolean:</source>
          <target state="translated">Boolean:</target>
        </trans-unit>
        <trans-unit id="ad90391bd80e58d8341d23f6811679989eed45ac" translate="yes" xml:space="preserve">
          <source>Boundary returns the Writer's boundary.</source>
          <target state="translated">Boundary返回Writer的边界。</target>
        </trans-unit>
        <trans-unit id="5dc9bacd4c58f9399b9dc87bc63dfb5fb7a6e59e" translate="yes" xml:space="preserve">
          <source>Bounds implements the Image interface.</source>
          <target state="translated">Bounds实现了Image接口。</target>
        </trans-unit>
        <trans-unit id="069d396f187de1e68cab3317f5cd2814eb7568af" translate="yes" xml:space="preserve">
          <source>BranchNode is the common representation of if, range, and with.</source>
          <target state="translated">BranchNode是if、range和with的常用表示。</target>
        </trans-unit>
        <trans-unit id="615bed871d5779af80e4a6136fa4239d3c7ccc9b" translate="yes" xml:space="preserve">
          <source>Breakpoint executes a breakpoint trap.</source>
          <target state="translated">断点执行断点陷阱。</target>
        </trans-unit>
        <trans-unit id="37081c9403a25124ca889860df85a0ae7029759e" translate="yes" xml:space="preserve">
          <source>Broadcast wakes all goroutines waiting on c.</source>
          <target state="translated">广播唤醒了所有等待c的goroutine。</target>
        </trans-unit>
        <trans-unit id="0abe955e9259954b391f714f51cf3c32c1931de6" translate="yes" xml:space="preserve">
          <source>Bswap32 returns its input with byte order reversed 0x01020304 -&amp;gt; 0x04030201</source>
          <target state="translated">Bswap32返回其输入，其字节顺序反转0x01020304-&amp;gt; 0x04030201</target>
        </trans-unit>
        <trans-unit id="71a400796b8b7bbe45d37b744a62ead19991004e" translate="yes" xml:space="preserve">
          <source>Bswap64 returns its input with byte order reversed 0x0102030405060708 -&amp;gt; 0x0807060504030201</source>
          <target state="translated">Bswap64返回其输入，其字节顺序反转0x0102030405060708-&amp;gt; 0x0807060504030201</target>
        </trans-unit>
        <trans-unit id="c9309adffb005748ce6e64dc6b8674515cf4efae" translate="yes" xml:space="preserve">
          <source>Buf is where the traceback information should be stored. It should be PC values, such that Buf[0] is the PC of the caller, Buf[1] is the PC of that function's caller, and so on. Max is the maximum number of entries to store. The function should store a zero to indicate the top of the stack, or that the caller is on a different stack, presumably a Go stack.</source>
          <target state="translated">Buf是回溯信息应该存储的地方。它应该是PC值,比如Buf[0]是调用者的PC,Buf[1]是该函数调用者的PC,以此类推。Max是存储的最大条目数。函数应该存储一个0来表示堆栈的顶部,或者表示调用者在不同的堆栈上,大概是围棋堆栈。</target>
        </trans-unit>
        <trans-unit id="2be5f64b36230104ef9c6e230215846a83d18df6" translate="yes" xml:space="preserve">
          <source>Buffer</source>
          <target state="translated">Buffer</target>
        </trans-unit>
        <trans-unit id="448f56ed42119d7161dde9d81e02ab567a38fe41" translate="yes" xml:space="preserve">
          <source>Buffer (Reader)</source>
          <target state="translated">缓冲区(读者)</target>
        </trans-unit>
        <trans-unit id="cd5168b55c7b32a8963df048d61974c2aede7b92" translate="yes" xml:space="preserve">
          <source>Buffer panics if it is called after scanning has started.</source>
          <target state="translated">如果在扫描开始后调用缓冲区,缓冲区就会恐慌。</target>
        </trans-unit>
        <trans-unit id="551e1ba8b3e746ffe206860acb967584c81dae61" translate="yes" xml:space="preserve">
          <source>Buffer sets the initial buffer to use when scanning and the maximum size of buffer that may be allocated during scanning. The maximum token size is the larger of max and cap(buf). If max &amp;lt;= cap(buf), Scan will use this buffer only and do no allocation.</source>
          <target state="translated">缓冲区设置扫描时要使用的初始缓冲区以及在扫描过程中可能分配的缓冲区的最大大小。最大令牌大小是max和cap（buf）中的较大者。如果max &amp;lt;= cap（buf），Scan将仅使用此缓冲区，并且不分配。</target>
        </trans-unit>
        <trans-unit id="d7fbc5efb24a4bec1ee1e0286f6eb89f2f88ad86" translate="yes" xml:space="preserve">
          <source>Buffer.Grow</source>
          <target state="translated">Buffer.Grow</target>
        </trans-unit>
        <trans-unit id="13e05f0025f22f2c210feebd6f6764eb9ab9107a" translate="yes" xml:space="preserve">
          <source>Buffer.Len</source>
          <target state="translated">Buffer.Len</target>
        </trans-unit>
        <trans-unit id="4d131002dacad1f34909e2d34d9e19d16cc5e060" translate="yes" xml:space="preserve">
          <source>Buffered returns a reader of the data remaining in the Decoder's buffer. The reader is valid until the next call to Decode.</source>
          <target state="translated">Buffered 返回解码器缓冲区中剩余数据的读取器。该读取器在下一次调用Decode之前一直有效。</target>
        </trans-unit>
        <trans-unit id="0067b3c63a56af4074505acb91d2a3cc9575fef4" translate="yes" xml:space="preserve">
          <source>Buffered returns the number of bytes that can be read from the current buffer.</source>
          <target state="translated">Buffered 返回可以从当前缓冲区读取的字节数。</target>
        </trans-unit>
        <trans-unit id="7f08b0ea50ae1356e6e8d51780445d990cb02038" translate="yes" xml:space="preserve">
          <source>Buffered returns the number of bytes that have been written into the current buffer.</source>
          <target state="translated">Buffered(缓冲区)返回已写入当前缓冲区的字节数。</target>
        </trans-unit>
        <trans-unit id="f85a434187712878deb28e6a10ca19a4cff6a753" translate="yes" xml:space="preserve">
          <source>Buffers contains zero or more runs of bytes to write.</source>
          <target state="translated">Buffers包含零或多个要写入的字节。</target>
        </trans-unit>
        <trans-unit id="c8eea1b80ba437eb2c7d9d8e4a7a1c0c36ddce4e" translate="yes" xml:space="preserve">
          <source>Bugs</source>
          <target state="translated">Bugs</target>
        </trans-unit>
        <trans-unit id="921fab9f51565e1aa75ad1caac472a9aa9f26a82" translate="yes" xml:space="preserve">
          <source>Build Constraints</source>
          <target state="translated">建立约束条件</target>
        </trans-unit>
        <trans-unit id="29b9ebcad59c3ff5523927bf009e975e46078fb3" translate="yes" xml:space="preserve">
          <source>BuildInfo represents the build information read from the running binary.</source>
          <target state="translated">BuildInfo表示从运行中的二进制文件中读取的构建信息。</target>
        </trans-unit>
        <trans-unit id="5041b9275852b56eabc2a8bc89d216f576ca59f5" translate="yes" xml:space="preserve">
          <source>BuildNameToCertificate parses c.Certificates and builds c.NameToCertificate from the CommonName and SubjectAlternateName fields of each of the leaf certificates.</source>
          <target state="translated">BuildNameToCertificate解析c.Certificate,并从每个叶状证书的CommonName和SubjectAlternateName字段建立c.NameToCertificate。</target>
        </trans-unit>
        <trans-unit id="4759bf14d7a511508e86c343c934894b6e8db533" translate="yes" xml:space="preserve">
          <source>Builder</source>
          <target state="translated">Builder</target>
        </trans-unit>
        <trans-unit id="2d8e35a2ed18813e75b6cfe5be6d3b153d2c5046" translate="yes" xml:space="preserve">
          <source>By construction, a template may reside in only one association. If it's necessary to have a template addressable from multiple associations, the template definition must be parsed multiple times to create distinct *Template values, or must be copied with the Clone or AddParseTree method.</source>
          <target state="translated">根据结构,一个模板只能驻留在一个关联中。如果需要一个模板可以从多个关联中寻址,则必须多次解析模板定义以创建不同的*Template值,或者必须使用Clone或AddParseTree方法复制。</target>
        </trans-unit>
        <trans-unit id="480c13549e7a8a185af82bf79efe8d7146c55441" translate="yes" xml:space="preserve">
          <source>By convention, tag strings are a concatenation of optionally space-separated key:&quot;value&quot; pairs. Each key is a non-empty string consisting of non-control characters other than space (U+0020 ' '), quote (U+0022 '&quot;'), and colon (U+003A ':'). Each value is quoted using U+0022 '&quot;' characters and Go string literal syntax.</source>
          <target state="translated">按照惯例,标签字符串是可选的以空格分隔的键:&quot;值 &quot;对的连接。每个键都是由空格(U+0020 '')、引号(U+0022 '&quot;')和冒号(U+003A ':')以外的非控制字符组成的非空字符串。每个值都使用U+0022 '&quot;'字符和围棋字符串文字语法进行引用。</target>
        </trans-unit>
        <trans-unit id="6b96101ed175ff51ef271a9ec4e297e0ae19c127" translate="yes" xml:space="preserve">
          <source>By convention, to approximate the behavior of Unmarshal itself, Unmarshalers implement UnmarshalJSON([]byte(&quot;null&quot;)) as a no-op.</source>
          <target state="translated">按照惯例,为了近似于Unmarshal本身的行为,Unmarshalers将UnmarshalJSON([]byte(&quot;null&quot;))作为一个no-op实现。</target>
        </trans-unit>
        <trans-unit id="d97f2e29718cda70f3fb7a0b844b75e9e2a001df" translate="yes" xml:space="preserve">
          <source>By default the pure Go resolver is used, because a blocked DNS request consumes only a goroutine, while a blocked C call consumes an operating system thread. When cgo is available, the cgo-based resolver is used instead under a variety of conditions: on systems that do not let programs make direct DNS requests (OS X), when the LOCALDOMAIN environment variable is present (even if empty), when the RES_OPTIONS or HOSTALIASES environment variable is non-empty, when the ASR_CONFIG environment variable is non-empty (OpenBSD only), when /etc/resolv.conf or /etc/nsswitch.conf specify the use of features that the Go resolver does not implement, and when the name being looked up ends in .local or is an mDNS name.</source>
          <target state="translated">默认情况下,使用的是纯Go解析器,因为阻塞的DNS请求只消耗一个goroutine,而阻塞的C调用则消耗一个操作系统线程。当cgo可用时,基于cgo的解析器会在各种条件下被使用:在不允许程序直接发出DNS请求的系统上(OS X),当LOCALDOMAIN环境变量存在时(即使是空的),当RES_OPTIONS或HOSTALIASES环境变量是非空的,当ASR_CONFIG环境变量是非空的(仅OpenBSD),当/etc/resolv.conf或/etc/nsswitch.conf指定使用Go解析器没有实现的功能,以及当被查询的名称以.local结尾或为mDNS名称时。</target>
        </trans-unit>
        <trans-unit id="4d31c346123b01cd36d6f923e13afdff5da97023" translate="yes" xml:space="preserve">
          <source>By default, Scan uses an internal buffer and sets the maximum token size to MaxScanTokenSize.</source>
          <target state="translated">默认情况下,Scan 使用内部缓冲区,并将最大令牌大小设置为 MaxScanTokenSize。</target>
        </trans-unit>
        <trans-unit id="1bb42d4b5aeee71b81262969484c8ff70b4517be" translate="yes" xml:space="preserve">
          <source>By default, Transport caches connections for future re-use. This may leave many open connections when accessing many hosts. This behavior can be managed using Transport's CloseIdleConnections method and the MaxIdleConnsPerHost and DisableKeepAlives fields.</source>
          <target state="translated">默认情况下,Transport会缓存连接以便将来重复使用。当访问许多主机时,这可能会留下许多开放的连接。这种行为可以使用Transport的CloseIdleConnections方法以及MaxIdleConnsPerHost和DisableKeepAlives字段来管理。</target>
        </trans-unit>
        <trans-unit id="e73ecd4c55ac4f2532efca2acf286d276bfcb67b" translate="yes" xml:space="preserve">
          <source>By default, a Scanner skips white space and Go comments and recognizes all literals as defined by the Go language specification. It may be customized to recognize only a subset of those literals and to recognize different identifier and white space characters.</source>
          <target state="translated">默认情况下,扫描仪会跳过空白空间和围棋注释,并识别围棋语言规范定义的所有文字。可以自定义为只识别这些字元的子集,并识别不同的标识符和空白字符。</target>
        </trans-unit>
        <trans-unit id="38c26436cbce7bb3819d63370d7d78fcf207cd25" translate="yes" xml:space="preserve">
          <source>By default, a synchronous signal is converted into a run-time panic. A SIGHUP, SIGINT, or SIGTERM signal causes the program to exit. A SIGQUIT, SIGILL, SIGTRAP, SIGABRT, SIGSTKFLT, SIGEMT, or SIGSYS signal causes the program to exit with a stack dump. A SIGTSTP, SIGTTIN, or SIGTTOU signal gets the system default behavior (these signals are used by the shell for job control). The SIGPROF signal is handled directly by the Go runtime to implement runtime.CPUProfile. Other signals will be caught but no action will be taken.</source>
          <target state="translated">默认情况下,同步信号会被转换为运行时的恐慌信号。SIGHUP、SIGINT或SIGTERM信号会导致程序退出。一个SIGQUIT、SIGILL、SIGTRAP、SIGABRT、SIGSTKFLT、SIGEMT或SIGSYS信号会导致程序以堆栈转储方式退出。SIGTSTP、SIGTTIN或SIGTTOU信号会得到系统默认行为(这些信号被shell用于作业控制)。SIGPROF信号由Go运行时直接处理,实现runtime.CPUProfile。其他信号将被捕获,但不会采取任何行动。</target>
        </trans-unit>
        <trans-unit id="d3d4b30d09f1fdb49352c0d58298888cf0ca8985" translate="yes" xml:space="preserve">
          <source>By default, all text between actions is copied verbatim when the template is executed. For example, the string &quot; items are made of &quot; in the example above appears on standard output when the program is run.</source>
          <target state="translated">默认情况下,当模板被执行时,所有动作之间的文本都会被逐字复制。例如,在上面的例子中,当程序运行时,字符串 &quot;物品是由 &quot;组成的 &quot;出现在标准输出中。</target>
        </trans-unit>
        <trans-unit id="350622d95bd495e5b9d5b12d5be7f36acd283530" translate="yes" xml:space="preserve">
          <source>By default, this package assumes that all pipelines produce a plain text string. It adds escaping pipeline stages necessary to correctly and safely embed that plain text string in the appropriate context.</source>
          <target state="translated">默认情况下,这个包假定所有的管道都产生一个纯文本字符串。它添加了必要的转义管道阶段,以正确和安全地将纯文本字符串嵌入到适当的上下文中。</target>
        </trans-unit>
        <trans-unit id="ac30c5fd81481adcf5dfadb9cc0286bdab9dd4d8" translate="yes" xml:space="preserve">
          <source>By setting the desired precision to 24 or 53 and using matching rounding mode (typically ToNearestEven), Float operations produce the same results as the corresponding float32 or float64 IEEE-754 arithmetic for operands that correspond to normal (i.e., not denormal) float32 or float64 numbers. Exponent underflow and overflow lead to a 0 or an Infinity for different values than IEEE-754 because Float exponents have a much larger range.</source>
          <target state="translated">通过将所需的精度设置为24或53,并使用匹配的四舍五入模式(通常是ToNearestEven),Float操作产生的结果与相应的float32或float64 IEEE-754算术的结果相同,这些操作数对应的是正常(即不是反常态)的float32或float64数字。指数下溢和溢出会导致与IEEE-754不同的值为0或Infinity,因为Float指数的范围更大。</target>
        </trans-unit>
        <trans-unit id="cae68a7a4d62320e833f932a1adb88cc3fca0834" translate="yes" xml:space="preserve">
          <source>ByteOrder (Get)</source>
          <target state="translated">字节序 (Get)</target>
        </trans-unit>
        <trans-unit id="14c268801cac113cc21be5f1d8e9a681909d9ffd" translate="yes" xml:space="preserve">
          <source>ByteOrder (Put)</source>
          <target state="translated">字节序(放)</target>
        </trans-unit>
        <trans-unit id="f662f7b4fb7ab8ae90d3cada267e382d65b0cdc0" translate="yes" xml:space="preserve">
          <source>ByteOrder returns the byte order in the current compilation unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47172c77b57631e39af011e8368ac1a798bc3c15" translate="yes" xml:space="preserve">
          <source>BytePtrFromString returns a pointer to a NUL-terminated array of bytes containing the text of s. If s contains a NUL byte at any location, it returns (nil, EINVAL).</source>
          <target state="translated">BytePtrFromString 返回一个指针,指向一个以 NUL 结尾的字节数组,该数组包含 s 的文本,如果 s 在任何位置包含一个 NUL 字节,则返回 (nil,EINVAL)。</target>
        </trans-unit>
        <trans-unit id="b67766bbc487c36c668f7c4b2ebbdd282b5f29af" translate="yes" xml:space="preserve">
          <source>ByteReader is the interface that wraps the ReadByte method.</source>
          <target state="translated">ByteReader是封装ReadByte方法的接口。</target>
        </trans-unit>
        <trans-unit id="cc79f8a24d7eacc319e8472097e4835f03446874" translate="yes" xml:space="preserve">
          <source>ByteScanner is the interface that adds the UnreadByte method to the basic ReadByte method.</source>
          <target state="translated">ByteScanner是在基本的ReadByte方法上增加UnreadByte方法的接口。</target>
        </trans-unit>
        <trans-unit id="cd18721ac61a79ca35c5cda1743e288f9c274dde" translate="yes" xml:space="preserve">
          <source>ByteSliceFromString returns a NUL-terminated slice of bytes containing the text of s. If s contains a NUL byte at any location, it returns (nil, EINVAL).</source>
          <target state="translated">ByteSliceFromString 返回一个以 NUL 结尾的字节片断,其中包含 s 的文本,如果 s 在任何位置包含一个 NUL 字节,则返回 (nil,EINVAL)。</target>
        </trans-unit>
        <trans-unit id="bff819ab0f5b5e1aa7cf8d780e4bca25b8ab6fb3" translate="yes" xml:space="preserve">
          <source>ByteWriter is the interface that wraps the WriteByte method.</source>
          <target state="translated">ByteWriter是封装WriteByte方法的接口。</target>
        </trans-unit>
        <trans-unit id="8a463d6abf5a87eee5bdfdbd6797570bddff6553" translate="yes" xml:space="preserve">
          <source>Bytes returns a slice of length b.Len() holding the unread portion of the buffer. The slice is valid for use only until the next buffer modification (that is, only until the next call to a method like Read, Write, Reset, or Truncate). The slice aliases the buffer content at least until the next buffer modification, so immediate changes to the slice will affect the result of future reads.</source>
          <target state="translated">Bytes返回一个长度为b.Len()的分片,该分片保留了缓冲区的未读部分。这个分片在下一次修改缓冲区之前是有效的(也就是说,只有在下一次调用Read、Write、Reset或Truncate等方法之前)。分片至少在下一次缓冲区修改之前会对缓冲区内容进行别名,所以立即改变分片会影响未来的读取结果。</target>
        </trans-unit>
        <trans-unit id="2e50dca4afc19f02f1781881fca1454838a8fe54" translate="yes" xml:space="preserve">
          <source>Bytes returns the absolute value of x as a big-endian byte slice.</source>
          <target state="translated">Bytes 返回 x 的绝对值,作为一个大字节片断。</target>
        </trans-unit>
        <trans-unit id="fd81aa008eaca297f56d5d20be64044f3fd3dd37" translate="yes" xml:space="preserve">
          <source>Bytes returns the bytes for the absolute value of x in little- endian binary representation; x must be an Int.</source>
          <target state="translated">Bytes 返回 x 的绝对值的字节,用小二进制表示;x 必须是一个 Int。</target>
        </trans-unit>
        <trans-unit id="a4b934536111abb43c8416065329859723d67ab4" translate="yes" xml:space="preserve">
          <source>Bytes returns the data over which the index was created. It must not be modified.</source>
          <target state="translated">Bytes 返回创建索引的数据。它不能被修改。</target>
        </trans-unit>
        <trans-unit id="1e205da73fdd6063e2f53de480b8d595a155bfc5" translate="yes" xml:space="preserve">
          <source>Bytes returns the most recent token generated by a call to Scan. The underlying array may point to data that will be overwritten by a subsequent call to Scan. It does no allocation.</source>
          <target state="translated">Bytes 返回最近一次调用Scan产生的标记。底层数组可能指向将被后续的Scan调用覆盖的数据。它不做任何分配。</target>
        </trans-unit>
        <trans-unit id="4f37978f623b402dc557529380e27a17d5aab9e0" translate="yes" xml:space="preserve">
          <source>Bytes returns v's underlying value. It panics if v's underlying value is not a slice of bytes.</source>
          <target state="translated">Bytes 返回 v 的底层值。如果v的底层值不是字节的片断,它就会恐慌。</target>
        </trans-unit>
        <trans-unit id="cf3cdb80980c06d234ad15ac8d6c7d4b17eb1c21" translate="yes" xml:space="preserve">
          <source>CAUTION: This interface does not support the import of locally vendored packages. See &lt;a href=&quot;https://golang.org/s/go15vendor&quot;&gt;https://golang.org/s/go15vendor&lt;/a&gt;. If possible, external implementations should implement ImporterFrom.</source>
          <target state="translated">注意：此接口不支持导入本地供应的软件包。请参阅&lt;a href=&quot;https://golang.org/s/go15vendor&quot;&gt;https://golang.org/s/go15vendor&lt;/a&gt;。如果可能，外部实现应实现ImporterFrom。</target>
        </trans-unit>
        <trans-unit id="ab235f8b07aea6e23756b09920385103a680e3aa" translate="yes" xml:space="preserve">
          <source>CIDRMask</source>
          <target state="translated">CIDRMask</target>
        </trans-unit>
        <trans-unit id="1c94aa7324cdb2cb904f9d173e460285e638501f" translate="yes" xml:space="preserve">
          <source>CIDRMask returns an IPMask consisting of 'ones' 1 bits followed by 0s up to a total length of 'bits' bits. For a mask of this form, CIDRMask is the inverse of IPMask.Size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610fd2d199248e3ae5def13e3d6ea752b04347c3" translate="yes" xml:space="preserve">
          <source>CIDRMask returns an IPMask consisting of `ones' 1 bits followed by 0s up to a total length of `bits' bits. For a mask of this form, CIDRMask is the inverse of IPMask.Size.</source>
          <target state="translated">CIDRMask返回一个IPMask,由 &quot;1&quot;1位和0位组成,总长度为 &quot;bits &quot;位。对于这种形式的掩码,CIDRMask是IPMask.Size的倒数。</target>
        </trans-unit>
        <trans-unit id="977330e1b93f52c949bfe749d1c4a8ac402ce621" translate="yes" xml:space="preserve">
          <source>CMYK is an in-memory image whose At method returns color.CMYK values.</source>
          <target state="translated">CMYK是一个内存中的图像,其At方法返回color.CMYK值。</target>
        </trans-unit>
        <trans-unit id="5577b77166da8b8f97d578666c387cbb318d2199" translate="yes" xml:space="preserve">
          <source>CMYK represents a fully opaque CMYK color, having 8 bits for each of cyan, magenta, yellow and black.</source>
          <target state="translated">CMYK代表一种完全不透明的CMYK颜色,青色、洋红、黄色和黑色各有8位。</target>
        </trans-unit>
        <trans-unit id="2f107458edf70d5d8784cc485af494c3ddf26bca" translate="yes" xml:space="preserve">
          <source>CMYKModel is the Model for CMYK colors.</source>
          <target state="translated">CMYKModel是CMYK颜色的模型。</target>
        </trans-unit>
        <trans-unit id="1dcfe8b3871bde23c33a86fd34caf4ceb3d81b9c" translate="yes" xml:space="preserve">
          <source>CMYKToRGB converts a CMYK quadruple to an RGB triple.</source>
          <target state="translated">CMYKToRGB将CMYK四倍值转换为RGB三倍值。</target>
        </trans-unit>
        <trans-unit id="cb4b09ded8668017a3d6bbb16fc8b707e98152f5" translate="yes" xml:space="preserve">
          <source>COFFSymbol represents single COFF symbol table record.</source>
          <target state="translated">COFFSymbol表示单个COFF符号表记录。</target>
        </trans-unit>
        <trans-unit id="3148d8e04fc6cddb8324aab7b41baaecb660939b" translate="yes" xml:space="preserve">
          <source>COffset returns the index of the first element of Cb or Cr that corresponds to the pixel at (x, y).</source>
          <target state="translated">COffset返回Cb或Cr中对应于(x,y)像素的第一个元素的索引。</target>
        </trans-unit>
        <trans-unit id="8c27dd514d68b447ad3ae459b747e2fe4297abc0" translate="yes" xml:space="preserve">
          <source>CPUProfile panics. It formerly provided raw access to chunks of a pprof-format profile generated by the runtime. The details of generating that format have changed, so this functionality has been removed.</source>
          <target state="translated">CPUProfile 慌了。它以前提供了对运行时生成的pprof-format profile的原始访问。生成该格式的细节已经发生了变化,因此该功能已被删除。</target>
        </trans-unit>
        <trans-unit id="d070e9c40d008404324ad69f68a104813b438177" translate="yes" xml:space="preserve">
          <source>CRAMMD5Auth returns an Auth that implements the CRAM-MD5 authentication mechanism as defined in RFC 2195. The returned Auth uses the given username and secret to authenticate to the server using the challenge-response mechanism.</source>
          <target state="translated">CRAMMD5Auth 返回一个实现 RFC 2195 中定义的 CRAM-MD5 身份验证机制的 Auth。返回的Auth使用给定的用户名和秘密,使用挑战-响应机制对服务器进行认证。</target>
        </trans-unit>
        <trans-unit id="745027bc41472d45980cddb096773a4f84ccc98d" translate="yes" xml:space="preserve">
          <source>CRTValue contains the precomputed Chinese remainder theorem values.</source>
          <target state="translated">CRTValue包含预先计算的中文余数定理值。</target>
        </trans-unit>
        <trans-unit id="f1fb1514db7c9527b7daa27065c1ccc1f41d7c4b" translate="yes" xml:space="preserve">
          <source>CSS encapsulates known safe content that matches any of:</source>
          <target state="translated">CSS封装了已知的安全内容,符合任何。</target>
        </trans-unit>
        <trans-unit id="f92f25bf90673d8d059ee8d957be5d5aaa212a63" translate="yes" xml:space="preserve">
          <source>Call Next to advance the iterator, and Key/Value to access each entry. Next returns false when the iterator is exhausted. MapRange follows the same iteration semantics as a range statement.</source>
          <target state="translated">调用Next来推进迭代器,调用Key/Value来访问每个条目。当迭代器用完时,Next返回false。MapRange遵循与范围语句相同的迭代语义。</target>
        </trans-unit>
        <trans-unit id="118156dfe47c64304a43b6fe1ecd5f7d303a7bb3" translate="yes" xml:space="preserve">
          <source>Call calls the function v with the input arguments in. For example, if len(in) == 3, v.Call(in) represents the Go call v(in[0], in[1], in[2]). Call panics if v's Kind is not Func. It returns the output results as Values. As in Go, each input argument must be assignable to the type of the function's corresponding input parameter. If v is a variadic function, Call creates the variadic slice parameter itself, copying in the corresponding values.</source>
          <target state="translated">Call调用输入参数in的函数v。例如,如果len(in)==3,v.Call(in)代表Go调用v(in[0],in[1],in[2])。如果v的Kind不是Func,Call就会恐慌。它将输出结果作为 Values 返回。和Go中一样,每个输入参数必须可以分配给函数对应的输入参数的类型。如果v是一个变量函数,Call会自己创建变量分片参数,并复制相应的值进来。</target>
        </trans-unit>
        <trans-unit id="6710d59342e8f6e8d403ac622a838f3bc147d96d" translate="yes" xml:space="preserve">
          <source>Call does a JavaScript call to the method m of value v with the given arguments. It panics if v has no method m. The arguments get mapped to JavaScript values according to the ValueOf function.</source>
          <target state="translated">Call通过给定的参数对价值v的方法m进行JavaScript调用。如果v没有方法m,它就会惊慌失措。根据ValueOf函数,参数会被映射到JavaScript值。</target>
        </trans-unit>
        <trans-unit id="565e55a0c32cf7eff3af3e89a785aa6c9178e700" translate="yes" xml:space="preserve">
          <source>Call invokes the named function, waits for it to complete, and returns its error status.</source>
          <target state="translated">调用命名的函数,等待其完成,并返回其错误状态。</target>
        </trans-unit>
        <trans-unit id="53b636c9f40f5a663ef2162f73a7b02c6ae8df7a" translate="yes" xml:space="preserve">
          <source>Call represents an active RPC.</source>
          <target state="translated">Call代表一个活动的RPC。</target>
        </trans-unit>
        <trans-unit id="42512af352e3a9143ab5a1551cc60bc2ee819eb1" translate="yes" xml:space="preserve">
          <source>CallSlice calls the variadic function v with the input arguments in, assigning the slice in[len(in)-1] to v's final variadic argument. For example, if len(in) == 3, v.CallSlice(in) represents the Go call v(in[0], in[1], in[2]...). CallSlice panics if v's Kind is not Func or if v is not variadic. It returns the output results as Values. As in Go, each input argument must be assignable to the type of the function's corresponding input parameter.</source>
          <target state="translated">CallSlice调用带有输入参数in的变分函数v,将分片in[len(in)-1]赋值给v的最终变分参数。例如,如果len(in)==3,v.CallSlice(in)表示围棋调用v(in[0],in[1],in[2]...)。如果v的Kind不是Func或者v不是变量,CallSlice就会恐慌。它将输出结果作为 Values 返回。和Go中一样,每个输入参数必须可以分配给函数对应的输入参数的类型。</target>
        </trans-unit>
        <trans-unit id="6ccfaaae6e5365f5a9c5349e604bae17caa0cd30" translate="yes" xml:space="preserve">
          <source>Caller reports file and line number information about function invocations on the calling goroutine's stack. The argument skip is the number of stack frames to ascend, with 0 identifying the caller of Caller. (For historical reasons the meaning of skip differs between Caller and Callers.) The return values report the program counter, file name, and line number within the file of the corresponding call. The boolean ok is false if it was not possible to recover the information.</source>
          <target state="translated">Caller在调用goroutine的栈上报告函数调用的文件和行号信息。参数skip是要上升的栈帧数,0标识Caller的调用者。由于历史原因,skip的含义在Caller和Callers之间有所不同)。返回值报告相应调用的文件内的程序计数器、文件名和行号。如果无法恢复信息,布尔值ok为false。</target>
        </trans-unit>
        <trans-unit id="02ae9a5027491acdc64509b68ea3793e2a002174" translate="yes" xml:space="preserve">
          <source>Caller should close resp.Body when done reading from it.</source>
          <target state="translated">呼叫者读完后应关闭resp.Body。</target>
        </trans-unit>
        <trans-unit id="03be0dfee4d9e39d0d117a1225a797fe3d2aa3a2" translate="yes" xml:space="preserve">
          <source>Callers fills the slice pc with the return program counters of function invocations on the calling goroutine's stack. The argument skip is the number of stack frames to skip before recording in pc, with 0 identifying the frame for Callers itself and 1 identifying the caller of Callers. It returns the number of entries written to pc.</source>
          <target state="translated">Callers将调用goroutine的堆栈上的函数调用的返回程序计数器填入分片pc中。参数 skip 是记录在 pc 中之前要跳过的栈帧数,0 表示 Callers 本身的帧数,1 表示 Callers 的调用者。它返回写入pc中的条目数。</target>
        </trans-unit>
        <trans-unit id="5a4b4218d3232d882f79940537de8c89b5fd061d" translate="yes" xml:space="preserve">
          <source>Callers should always process the n &amp;gt; 0 bytes returned before considering the error err. Doing so correctly handles I/O errors that happen after reading some bytes and also both of the allowed EOF behaviors.</source>
          <target state="translated">在考虑错误err之前，调用者应始终处理返回的n&amp;gt; 0个字节。这样做可以正确处理在读取某些字节后发生的I / O错误，以及两种允许的EOF行为。</target>
        </trans-unit>
        <trans-unit id="5500489165f32b46a8cb2a14a955f9a8a8615079" translate="yes" xml:space="preserve">
          <source>Callers that wish to set the fields in Writer.Header must do so before the first call to Write, Flush, or Close.</source>
          <target state="translated">希望在Writer.Header中设置字段的调用者必须在第一次调用Write、Flush或Close之前这样做。</target>
        </trans-unit>
        <trans-unit id="b857a35e7ef780b3bca39a750115fc4863a61aa5" translate="yes" xml:space="preserve">
          <source>CallersFrames takes a slice of PC values returned by Callers and prepares to return function/file/line information. Do not change the slice until you are done with the Frames.</source>
          <target state="translated">CallersFrames从Callers返回的PC值中抽取一个片断,准备返回函数/文件/行信息。在完成Frames之前,不要改变片断。</target>
        </trans-unit>
        <trans-unit id="a84e46e9c20e9e9bc4eb917cab523be97fdefd53" translate="yes" xml:space="preserve">
          <source>Calling Goexit from the main goroutine terminates that goroutine without func main returning. Since func main has not returned, the program continues execution of other goroutines. If all other goroutines exit, the program crashes.</source>
          <target state="translated">从主goroutine中调用Goexit,在func main没有返回的情况下终止该goroutine。由于func main没有返回,程序继续执行其他goroutine。如果所有其他goroutine都退出,程序就会崩溃。</target>
        </trans-unit>
        <trans-unit id="dc5490ba97b9e986ad10d279577e4999816c63b0" translate="yes" xml:space="preserve">
          <source>Calling Multistream(false) disables this behavior; disabling the behavior can be useful when reading file formats that distinguish individual gzip data streams or mix gzip data streams with other data streams. In this mode, when the Reader reaches the end of the data stream, Read returns io.EOF. The underlying reader must implement io.ByteReader in order to be left positioned just after the gzip stream. To start the next stream, call z.Reset(r) followed by z.Multistream(false). If there is no next stream, z.Reset(r) will return io.EOF.</source>
          <target state="translated">调用Multistream(false)会禁用该行为;当读取区分单个gzip数据流或将gzip数据流与其他数据流混合的文件格式时,禁用该行为是很有用的。在这种模式下,当阅读器到达数据流的终点时,Read会返回io.EOF。底层的Reader必须实现io.ByteReader,才能在gzip数据流之后留下定位。要开始下一个流,调用z.Reset(r),然后调用z.Multistream(false)。如果没有下一个流,z.Reset(r)将返回io.EOF。</target>
        </trans-unit>
        <trans-unit id="4710fe1acfac37179ab4f289d05ef3abb75eaede" translate="yes" xml:space="preserve">
          <source>Calling Peek prevents a UnreadByte or UnreadRune call from succeeding until the next read operation.</source>
          <target state="translated">调用Peek可以防止UnreadByte或UnreadRune调用成功,直到下一次读取操作。</target>
        </trans-unit>
        <trans-unit id="fdec16c5797808f1fc79d6af2ca8ac766041238a" translate="yes" xml:space="preserve">
          <source>Calling Read on special types like TypeLink, TypeSymlink, TypeChar, TypeBlock, TypeDir, and TypeFifo returns (0, io.EOF) regardless of what the Header.Size claims.</source>
          <target state="translated">对特殊类型(如TypeLink、TypeSymlink、TypeChar、TypeBlock、TypeDir和TypeFifo)调用Read时,无论Header.Size声称什么,都会返回(0,io.EOF)。</target>
        </trans-unit>
        <trans-unit id="b56745d4818c01d2eb9c7bc08a036418118904a0" translate="yes" xml:space="preserve">
          <source>Calling Write on special types like TypeLink, TypeSymlink, TypeChar, TypeBlock, TypeDir, and TypeFifo returns (0, ErrWriteTooLong) regardless of what the Header.Size claims.</source>
          <target state="translated">调用特殊类型如TypeLink、TypeSymlink、TypeChar、TypeBlock、TypeDir和TypeFifo的Write会返回(0,ErrWriteTooLong),而不管Header.Size声称什么。</target>
        </trans-unit>
        <trans-unit id="6434d3f3a5f0575affa5664bb509e7c8b0a1396c" translate="yes" xml:space="preserve">
          <source>Calling this function will turn off automatic session ticket key rotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4fdb7a85ec6970a8fd4027def05274bf398ff4" translate="yes" xml:space="preserve">
          <source>Calls to Scan will invoke the error handler err if they encounter a syntax error and err is not nil. Also, for each error encountered, the Scanner field ErrorCount is incremented by one. The mode parameter determines how comments are handled.</source>
          <target state="translated">如果遇到语法错误且err不是nil,对Scan的调用将调用错误处理程序err。同时,每遇到一个错误,Scanner字段ErrorCount就会增加一个。模式参数决定如何处理注释。</target>
        </trans-unit>
        <trans-unit id="9520d1b14d042e07c9d98804cc798cd3d2a5e80a" translate="yes" xml:space="preserve">
          <source>CanAddr reports whether the value's address can be obtained with Addr. Such values are called addressable. A value is addressable if it is an element of a slice, an element of an addressable array, a field of an addressable struct, or the result of dereferencing a pointer. If CanAddr returns false, calling Addr will panic.</source>
          <target state="translated">CanAddr报告是否可以用Addr获得该值的地址。这样的值被称为可寻址。如果一个值是一个分片的元素、一个可寻址数组的元素、一个可寻址结构的字段,或者是一个指针的派生结果,那么这个值就是可寻址的。如果CanAddr返回false,调用Addr就会惊慌失措。</target>
        </trans-unit>
        <trans-unit id="a9e93f69f0267b95bffc55cf6d2bce8ffc82c90c" translate="yes" xml:space="preserve">
          <source>CanBackquote</source>
          <target state="translated">CanBackquote</target>
        </trans-unit>
        <trans-unit id="4e3695d8bbea64e7cfee0c2febc4baffda231b85" translate="yes" xml:space="preserve">
          <source>CanBackquote reports whether the string s can be represented unchanged as a single-line backquoted string without control characters other than tab.</source>
          <target state="translated">CanBackquote报告字符串s是否可以不变地表示为单行反引号字符串,除了tab之外,没有控制字符。</target>
        </trans-unit>
        <trans-unit id="78221e784584f0078bc92b5760d985ffb9359714" translate="yes" xml:space="preserve">
          <source>CanInterface reports whether Interface can be used without panicking.</source>
          <target state="translated">CanInterface报告接口是否可以不慌不忙地使用。</target>
        </trans-unit>
        <trans-unit id="a4cf39f0aa0cf531b70a8777365e8930d66ae49b" translate="yes" xml:space="preserve">
          <source>CanSet reports whether the value of v can be changed. A Value can be changed only if it is addressable and was not obtained by the use of unexported struct fields. If CanSet returns false, calling Set or any type-specific setter (e.g., SetBool, SetInt) will panic.</source>
          <target state="translated">CanSet报告v的值是否可以被改变。只有当一个值是可寻址的,并且不是通过使用未导出的结构域获得的,才可以改变它。如果CanSet返回false,调用Set或任何特定类型的setter(如SetBool、SetInt)都会感到恐慌。</target>
        </trans-unit>
        <trans-unit id="24a49319ca493616d5fa4fa87e1716f05207717f" translate="yes" xml:space="preserve">
          <source>CancelRequest cancels an in-flight request by closing its connection. CancelRequest should only be called after RoundTrip has returned.</source>
          <target state="translated">CancelRequest通过关闭连接来取消飞行中的请求。CancelRequest只能在RoundTrip返回后调用。</target>
        </trans-unit>
        <trans-unit id="d04bdcea13bcd3bdd6348c2940648b9b6511c540" translate="yes" xml:space="preserve">
          <source>Canceled is the error returned by Context.Err when the context is canceled.</source>
          <target state="translated">Canceled是Context.Err在上下文被取消时返回的错误。</target>
        </trans-unit>
        <trans-unit id="1e7f338b3f2968bf411cdc0aae8bcbdbfc36af1f" translate="yes" xml:space="preserve">
          <source>Canceling this context releases resources associated with it, so code should call cancel as soon as the operations running in this Context complete.</source>
          <target state="translated">取消这个上下文会释放与之相关的资源,所以当这个Context中运行的操作完成后,代码应该尽快调用cancel。</target>
        </trans-unit>
        <trans-unit id="c2af769757a430f4dad8d1af9ff5c57b16b4ebdd" translate="yes" xml:space="preserve">
          <source>Canceling this context releases resources associated with it, so code should call cancel as soon as the operations running in this Context complete:</source>
          <target state="translated">取消这个上下文会释放与之相关的资源,所以当这个Context中运行的操作完成后,代码应该尽快调用cancel。</target>
        </trans-unit>
        <trans-unit id="076b17958a05cb472fa64e406ea55e8b9d2a4270" translate="yes" xml:space="preserve">
          <source>Canon returns the canonical version of r. The returned rectangle has minimum and maximum coordinates swapped if necessary so that it is well-formed.</source>
          <target state="translated">Canon 返回 r 的规范版本,必要时,返回的矩形的最小和最大坐标被调换,使其形状良好。</target>
        </trans-unit>
        <trans-unit id="955b396a548b98a7408f3e25b749827717df449d" translate="yes" xml:space="preserve">
          <source>CanonicalHeaderKey returns the canonical format of the header key s. The canonicalization converts the first letter and any letter following a hyphen to upper case; the rest are converted to lowercase. For example, the canonical key for &quot;accept-encoding&quot; is &quot;Accept-Encoding&quot;. If s contains a space or invalid header field bytes, it is returned without modifications.</source>
          <target state="translated">CanonicalHeaderKey返回头键s的规范格式。规范化将第一个字母和连字符后面的任何字母转换为大写,其余字母转换为小写。例如,&quot;accept-encoding &quot;的规范键是 &quot;Accept-Encoding&quot;。如果s包含一个空格或无效的头字段字节,则不做修改返回。</target>
        </trans-unit>
        <trans-unit id="2b23fb17a1a69fd7b73a76bb40a7097d29243e47" translate="yes" xml:space="preserve">
          <source>CanonicalMIMEHeaderKey returns the canonical format of the MIME header key s. The canonicalization converts the first letter and any letter following a hyphen to upper case; the rest are converted to lowercase. For example, the canonical key for &quot;accept-encoding&quot; is &quot;Accept-Encoding&quot;. MIME header keys are assumed to be ASCII only. If s contains a space or invalid header field bytes, it is returned without modifications.</source>
          <target state="translated">CanonicalMIMEHeaderKey返回MIME头键s的规范格式。规范化将第一个字母和连字符后的任何字母转换为大写,其余字母转换为小写。例如,&quot;accept-encoding &quot;的规范键是 &quot;Accept-Encoding&quot;.MIME头键被假定为仅为ASCII码.如果s包含一个空格或无效的头字段字节,则不做修改返回。</target>
        </trans-unit>
        <trans-unit id="ed0ee546d9c8e677c59e62830ae730eb46232fdc" translate="yes" xml:space="preserve">
          <source>Cap returns the capacity of the buffer's underlying byte slice, that is, the total space allocated for the buffer's data.</source>
          <target state="translated">Cap返回缓冲区底层字节分片的容量,也就是为缓冲区数据分配的总空间。</target>
        </trans-unit>
        <trans-unit id="bbc6d32f023dd61bfc5cebe3046b61c0f76810e0" translate="yes" xml:space="preserve">
          <source>Cap returns the capacity of the builder's underlying byte slice. It is the total space allocated for the string being built and includes any bytes already written.</source>
          <target state="translated">Cap 返回构建器底层字节片的容量。它是为正在构建的字符串分配的总空间,包括已经写入的任何字节。</target>
        </trans-unit>
        <trans-unit id="ee5354b348838f7a1d94dcdaae1e7a7ecd556f4c" translate="yes" xml:space="preserve">
          <source>Cap returns v's capacity. It panics if v's Kind is not Array, Chan, or Slice.</source>
          <target state="translated">Cap 返回 v 的容量。如果v的种类不是Array、Chan或Slice,它就会惊慌失措。</target>
        </trans-unit>
        <trans-unit id="c6a561977254ff2870059baae45cac89214e315f" translate="yes" xml:space="preserve">
          <source>CapNames walks the regexp to find the names of capturing groups.</source>
          <target state="translated">CapNames走的是regexp,寻找捕捉组的名字。</target>
        </trans-unit>
        <trans-unit id="6f9517c836ce60929e990358e7eb6e0b2e9fdc68" translate="yes" xml:space="preserve">
          <source>Carriage returns before newline characters are silently removed.</source>
          <target state="translated">在默默删除新行字符之前回车。</target>
        </trans-unit>
        <trans-unit id="be2bf5b72a47b7c7e2283e70ea0cf31afd8bde9b" translate="yes" xml:space="preserve">
          <source>CaseRange represents a range of Unicode code points for simple (one code point to one code point) case conversion. The range runs from Lo to Hi inclusive, with a fixed stride of 1. Deltas are the number to add to the code point to reach the code point for a different case for that character. They may be negative. If zero, it means the character is in the corresponding case. There is a special case representing sequences of alternating corresponding Upper and Lower pairs. It appears with a fixed Delta of</source>
          <target state="translated">CaseRange表示Unicode码点的范围,用于简单的(一个码点到一个码点)大小写转换。范围从Lo到Hi(含),固定步幅为1。 Deltas是指为了达到该字符的不同大小写的码点而要加到码点上的数字。它们可能是负数。如果为零,则表示该字符处于相应的情况下。有一种特殊的情况,代表对应上、下对交替的序列。它的出现有一个固定的Delta,即</target>
        </trans-unit>
        <trans-unit id="0242bb8f76d24fc855f5fd331326f647ebd09abb" translate="yes" xml:space="preserve">
          <source>CaseRanges is the table describing case mappings for all letters with non-self mappings.</source>
          <target state="translated">CaseRanges是描述所有字母非自映射的大小写映射表。</target>
        </trans-unit>
        <trans-unit id="3b206a07c1e9d49addcc7990e688904da778cacb" translate="yes" xml:space="preserve">
          <source>Categories is the set of Unicode category tables.</source>
          <target state="translated">是Unicode分类表的集合。</target>
        </trans-unit>
        <trans-unit id="c1df58bad0806dc23792f032f60a59a2fe418b1c" translate="yes" xml:space="preserve">
          <source>Cbrt</source>
          <target state="translated">Cbrt</target>
        </trans-unit>
        <trans-unit id="e587577dc59bfafa8f316d5453515821dcbce5ea" translate="yes" xml:space="preserve">
          <source>Cbrt returns the cube root of x.</source>
          <target state="translated">Cbrt返回x的立方根。</target>
        </trans-unit>
        <trans-unit id="2432d530c0145aab3bfa5662975e8d421e122d9e" translate="yes" xml:space="preserve">
          <source>Ceil</source>
          <target state="translated">Ceil</target>
        </trans-unit>
        <trans-unit id="46536626864b36557258c2a5e53e6d4465979040" translate="yes" xml:space="preserve">
          <source>Ceil returns the least integer value greater than or equal to x.</source>
          <target state="translated">Ceil返回大于或等于x的最小整数值。</target>
        </trans-unit>
        <trans-unit id="67d301941e6984f09b404c3b5e5d0192a1b67ac6" translate="yes" xml:space="preserve">
          <source>CertPool is a set of certificates.</source>
          <target state="translated">CertPool是一组证书。</target>
        </trans-unit>
        <trans-unit id="2ede2f55f16b28db355480b3a24e5f428305766b" translate="yes" xml:space="preserve">
          <source>Certificate returns the certificate used by the server, or nil if the server doesn't use TLS.</source>
          <target state="translated">Certificate返回服务器使用的证书,如果服务器不使用TLS,则返回nil。</target>
        </trans-unit>
        <trans-unit id="ed0353f9bd9f8fff93bbda397f0df68cf8c98c19" translate="yes" xml:space="preserve">
          <source>Certificate.Verify</source>
          <target state="translated">Certificate.Verify</target>
        </trans-unit>
        <trans-unit id="b24b78d8382125c2a275a4ff2231b6b38a8636ed" translate="yes" xml:space="preserve">
          <source>CertificateInvalidError results when an odd error occurs. Users of this library probably want to handle all these errors uniformly.</source>
          <target state="translated">证书无效错误(CertificateInvalidError)发生时,会产生一个奇怪的错误。这个库的用户可能希望统一处理所有这些错误。</target>
        </trans-unit>
        <trans-unit id="4be4f43abf6e2f39e81e91b60f959656ba9b756e" translate="yes" xml:space="preserve">
          <source>CertificateList represents the ASN.1 structure of the same name. See RFC 5280, section 5.1. Use Certificate.CheckCRLSignature to verify the signature.</source>
          <target state="translated">CertificateList代表同名的ASN.1结构。参见RFC 5280,5.1节。使用 Certificate.CheckCRLSignature 来验证签名。</target>
        </trans-unit>
        <trans-unit id="a288f637c3c9d1d271c3c19c56590c8c85a0eb17" translate="yes" xml:space="preserve">
          <source>CertificateRequest represents a PKCS #10, certificate signature request.</source>
          <target state="translated">CertificateRequest代表PKCS #10,证书签名请求。</target>
        </trans-unit>
        <trans-unit id="2950fae6302110dd8a52ed33e4c5f6542549cb2f" translate="yes" xml:space="preserve">
          <source>CertificateRequestInfo contains information from a server's CertificateRequest message, which is used to demand a certificate and proof of control from a client.</source>
          <target state="translated">CertificateRequestInfo包含来自服务器的CertificateRequest消息的信息,该消息用于向客户端索取证书和控制证明。</target>
        </trans-unit>
        <trans-unit id="ec50387142af3be963c7121f78293d51ce51206a" translate="yes" xml:space="preserve">
          <source>ChainNode holds a term followed by a chain of field accesses (identifier starting with '.'). The names may be chained ('.x.y'). The periods are dropped from each ident.</source>
          <target state="translated">ChainNode持有一个术语,后面跟着一个字段访问链(标识符以'.'开头)。名称可以是链式的('.x.y')。每个标识符中的句号会被删除。</target>
        </trans-unit>
        <trans-unit id="41142232bdd3270941be56093eead521d6e00ed0" translate="yes" xml:space="preserve">
          <source>ChanDir represents a channel type's direction.</source>
          <target state="translated">ChanDir表示通道类型的方向。</target>
        </trans-unit>
        <trans-unit id="d71e228872d9403c9b6594fd69625436645be6ba" translate="yes" xml:space="preserve">
          <source>ChanOf returns the channel type with the given direction and element type. For example, if t represents int, ChanOf(RecvDir, t) represents &amp;lt;-chan int.</source>
          <target state="translated">ChanOf返回具有给定方向和元素类型的通道类型。例如，如果t表示int，则ChanOf（RecvDir，t）表示&amp;lt;-chan int。</target>
        </trans-unit>
        <trans-unit id="b34ef43c1dc118fd5f3dd2ddc7f7e9e87461df60" translate="yes" xml:space="preserve">
          <source>Changing the behavior of signals in Go programs</source>
          <target state="translated">改变围棋程序中的信号行为</target>
        </trans-unit>
        <trans-unit id="b5d17f750ce0c90b1d8f2246a376b4e9bb0451a7" translate="yes" xml:space="preserve">
          <source>Channel, complex, and function values cannot be encoded in JSON. Attempting to encode such a value causes Marshal to return an UnsupportedTypeError.</source>
          <target state="translated">通道、复杂和函数值不能用JSON编码。试图对这样的值进行编码会导致Marshal返回一个UnsupportedTypeError。</target>
        </trans-unit>
        <trans-unit id="d81d4ef28354031a16bbd07dbbe84ad7e58f4aef" translate="yes" xml:space="preserve">
          <source>Character class elements:</source>
          <target state="translated">人物类元素。</target>
        </trans-unit>
        <trans-unit id="9253fc85685075e92fb2c2cb576e68b41cb8633e" translate="yes" xml:space="preserve">
          <source>Chdir changes the current working directory to the file, which must be a directory. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Chdir将当前工作目录改为文件,文件必须是一个目录。如果有一个错误,它的类型将是*PathError。</target>
        </trans-unit>
        <trans-unit id="b9f7b1c8f8ac2861de3e2acab3384aee64fee3f5" translate="yes" xml:space="preserve">
          <source>Chdir changes the current working directory to the named directory. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Chdir将当前工作目录改变为命名目录。如果有错误,它的类型将是*PathError。</target>
        </trans-unit>
        <trans-unit id="dcb27e63c2fbdba64841ab2910051fa4a2c3f8f9" translate="yes" xml:space="preserve">
          <source>Check looks for an input to f, any function that returns bool, such that f returns false. It calls f repeatedly, with arbitrary values for each argument. If f returns false on a given input, Check returns that input as a *CheckError. For example:</source>
          <target state="translated">Check寻找一个输入到f的函数,任何返回bool的函数,使f返回false。它反复调用f,对每个参数使用任意值。如果f在给定的输入上返回false,Check会将该输入作为一个*CheckError返回。例如</target>
        </trans-unit>
        <trans-unit id="4a85aadfcc5e9ea6b8907d6a9f8e98f8accc3fc5" translate="yes" xml:space="preserve">
          <source>Check type-checks a package and returns the resulting package object and the first error if any. Additionally, if info != nil, Check populates each of the non-nil maps in the Info struct.</source>
          <target state="translated">Check对一个包进行类型检查,并返回结果的包对象和第一个错误(如果有)。此外,如果info !=nil,Check会填充Info结构中的每个非nil映射。</target>
        </trans-unit>
        <trans-unit id="6d67e1187d47640f702b28a10cc6f53a307ae234" translate="yes" xml:space="preserve">
          <source>CheckCRLSignature checks that the signature in crl is from c.</source>
          <target state="translated">CheckCRLSignature检查CRL中的签名是否来自c。</target>
        </trans-unit>
        <trans-unit id="f93ce303d817100b6d50ba51e9c0c4c774a0a092" translate="yes" xml:space="preserve">
          <source>CheckEqual looks for an input on which f and g return different results. It calls f and g repeatedly with arbitrary values for each argument. If f and g return different answers, CheckEqual returns a *CheckEqualError describing the input and the outputs.</source>
          <target state="translated">CheckEqual寻找一个f和g返回不同结果的输入。它用每个参数的任意值反复调用f和g。如果f和g返回不同的答案,CheckEqual返回一个*CheckEqualError,描述输入和输出。</target>
        </trans-unit>
        <trans-unit id="56c96020e004e0f968e6f808827a8f0ef9a0f959" translate="yes" xml:space="preserve">
          <source>CheckExpr type checks the expression expr as if it had appeared at position pos of package pkg. Type information about the expression is recorded in info.</source>
          <target state="translated">CheckExpr类型检查表达式expr是否出现在包pkg的位置pos处。表达式的类型信息被记录在info.CheckExpr类型中。</target>
        </trans-unit>
        <trans-unit id="3afa858fd88c383b05b45b059da6d700c31f62d0" translate="yes" xml:space="preserve">
          <source>CheckSignature reports whether the signature on c is valid.</source>
          <target state="translated">CheckSignature报告c上的签名是否有效。</target>
        </trans-unit>
        <trans-unit id="b028d2f26cf8934255900c683e9051aaedadc107" translate="yes" xml:space="preserve">
          <source>CheckSignature verifies that signature is a valid signature over signed from c's public key.</source>
          <target state="translated">CheckSignature验证签名是一个有效的签名,从c的公钥上签名。</target>
        </trans-unit>
        <trans-unit id="5f1469e6f7aeb717fe6fd2a8ee3f4b0eb8bea924" translate="yes" xml:space="preserve">
          <source>CheckSignatureFrom verifies that the signature on c is a valid signature from parent.</source>
          <target state="translated">CheckSignatureFrom验证c上的签名是否是来自父代的有效签名。</target>
        </trans-unit>
        <trans-unit id="cf0a25d9a79670b543c8f6d54e561382ee2327c8" translate="yes" xml:space="preserve">
          <source>Checksum returns the Adler-32 checksum of data.</source>
          <target state="translated">Checksum 返回数据的 Adler-32 校验和。</target>
        </trans-unit>
        <trans-unit id="77add3d3bab3db380a97be8fd992a744496e9205" translate="yes" xml:space="preserve">
          <source>Checksum returns the CRC-32 checksum of data using the polynomial represented by the Table.</source>
          <target state="translated">Checksum使用表所代表的多项式返回数据的CRC-32校验和。</target>
        </trans-unit>
        <trans-unit id="35a88a5d5ae4a4db8d25e096b438fe712928f70b" translate="yes" xml:space="preserve">
          <source>Checksum returns the CRC-64 checksum of data using the polynomial represented by the Table.</source>
          <target state="translated">Checksum使用表所代表的多项式返回数据的CRC-64校验和。</target>
        </trans-unit>
        <trans-unit id="cefd992ce8689aa4a5e8a938343def9a5adb2161" translate="yes" xml:space="preserve">
          <source>ChecksumIEEE returns the CRC-32 checksum of data using the IEEE polynomial.</source>
          <target state="translated">ChecksumIEEE使用IEEE多项式返回数据的CRC-32校验和。</target>
        </trans-unit>
        <trans-unit id="2274ec5f679712a687a101a1f53de838aacd04a3" translate="yes" xml:space="preserve">
          <source>Child returns the i'th child scope for 0 &amp;lt;= i &amp;lt; NumChildren().</source>
          <target state="translated">Child返回0 &amp;lt;= i &amp;lt;NumChildren（）的第i个子范围。</target>
        </trans-unit>
        <trans-unit id="72a2cf7fd19dd78efb6d310d1146546965c630cd" translate="yes" xml:space="preserve">
          <source>Chmod</source>
          <target state="translated">Chmod</target>
        </trans-unit>
        <trans-unit id="54381b37df415f17ee19fa61fb2c262ae4bffd97" translate="yes" xml:space="preserve">
          <source>Chmod changes the mode of the file to mode. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Chmod将文件的模式改为模式。如果有错误,它的类型将是*PathError。</target>
        </trans-unit>
        <trans-unit id="ae20e5d14b6f7b19f0570009a48263e1096ec5dd" translate="yes" xml:space="preserve">
          <source>Chmod changes the mode of the named file to mode. If the file is a symbolic link, it changes the mode of the link's target. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Chmod将命名文件的模式改为模式。如果文件是一个符号链接,它将改变链接目标的模式。如果有一个错误,它的类型将是*PathError。</target>
        </trans-unit>
        <trans-unit id="c345fc1bf8f6407d62f187432fbbc92a5cd52616" translate="yes" xml:space="preserve">
          <source>Chown changes the numeric uid and gid of the named file. If the file is a symbolic link, it changes the uid and gid of the link's target. A uid or gid of -1 means to not change that value. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Chown改变了命名文件的数字uid和gid,如果文件是符号链接,则改变链接目标的uid和gid。如果文件是一个符号链接,则改变链接目标的 uid 和 gid。uid或gid为-1表示不改变该值。如果有一个错误,它的类型将是*PathError。</target>
        </trans-unit>
        <trans-unit id="d15192f283b6552c623863f471ea76b78149f1dd" translate="yes" xml:space="preserve">
          <source>Chown changes the numeric uid and gid of the named file. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Chown会改变命名文件的id和gid。如果有一个错误,它的类型将是*PathError。</target>
        </trans-unit>
        <trans-unit id="3501f50820f444e076a0c8ebd0137aa20f349607" translate="yes" xml:space="preserve">
          <source>Chtimes</source>
          <target state="translated">Chtimes</target>
        </trans-unit>
        <trans-unit id="74fad201512b306ebb341d1f65416d99588ec73b" translate="yes" xml:space="preserve">
          <source>Chtimes changes the access and modification times of the named file, similar to the Unix utime() or utimes() functions.</source>
          <target state="translated">Chtimes改变命名文件的访问和修改时间,类似于Unix的utime()或utimes()函数。</target>
        </trans-unit>
        <trans-unit id="a5adf59eb3f139e41a426342af6d17cd0645c748" translate="yes" xml:space="preserve">
          <source>CipherSuite is a TLS cipher suite. Note that most functions in this package accept and expose cipher suite IDs instead of this type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a78bcbdc0b18021d4c5644e75f868f9eb7291eb" translate="yes" xml:space="preserve">
          <source>CipherSuiteName returns the standard name for the passed cipher suite ID (e.g. &quot;TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256&quot;), or a fallback representation of the ID value if the cipher suite is not implemented by this package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192f89e9c606de46c4a9032a560a990cac06ae36" translate="yes" xml:space="preserve">
          <source>CipherSuites returns a list of cipher suites currently implemented by this package, excluding those with security issues, which are returned by InsecureCipherSuites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1b2218514bfbf9d096fe76cc6d68997cdfcde1d" translate="yes" xml:space="preserve">
          <source>Class is found in Header.Ident[EI_CLASS] and Header.Class.</source>
          <target state="translated">Class在Header.Ident[EI_CLASS]和Header.Class中找到。</target>
        </trans-unit>
        <trans-unit id="fa893d87e1fa0a69c7942dd1e65f3bd1932e53d1" translate="yes" xml:space="preserve">
          <source>Clean</source>
          <target state="translated">Clean</target>
        </trans-unit>
        <trans-unit id="c505b06ae1e4508892a4d23e86b20501c6b00af4" translate="yes" xml:space="preserve">
          <source>Clean returns the shortest path name equivalent to path by purely lexical processing. It applies the following rules iteratively until no further processing can be done:</source>
          <target state="translated">Clean通过纯粹的词法处理,返回与路径等价的最短路径名。它反复应用下面的规则,直到无法进行进一步的处理。</target>
        </trans-unit>
        <trans-unit id="c93b2c002f067a2ed2c067567553083838dff13e" translate="yes" xml:space="preserve">
          <source>Cleanup registers a function to be called when the test and all its subtests complete. Cleanup functions will be called in last added, first called order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d1092fa425ad399701105f3ee2808a7d89faf5" translate="yes" xml:space="preserve">
          <source>Clearenv deletes all environment variables.</source>
          <target state="translated">Clearenv删除所有环境变量。</target>
        </trans-unit>
        <trans-unit id="1b3b0b991a98add944cc0471a5856e4b7e7dfe62" translate="yes" xml:space="preserve">
          <source>Client represents an RPC Client. There may be multiple outstanding Calls associated with a single Client, and a Client may be used by multiple goroutines simultaneously.</source>
          <target state="translated">Client代表一个RPC Client。一个Client可以有多个未完成的Call,一个Client可以被多个goroutine同时使用。</target>
        </trans-unit>
        <trans-unit id="50cd2d3f91314c6d5d9767c58d2189bde9c3a214" translate="yes" xml:space="preserve">
          <source>Client returns a new TLS client side connection using conn as the underlying transport. The config cannot be nil: users must set either ServerName or InsecureSkipVerify in the config.</source>
          <target state="translated">Client返回一个新的TLS客户端连接,使用conn作为底层传输。config不能为零:用户必须在config中设置ServerName或InsecureSkipVerify。</target>
        </trans-unit>
        <trans-unit id="1829d60c1d2d2fa9fd020c834b748c41d1074494" translate="yes" xml:space="preserve">
          <source>Client returns an HTTP client configured for making requests to the server. It is configured to trust the server's TLS test certificate and will close its idle connections on Server.Close.</source>
          <target state="translated">Client返回一个HTTP客户端,该客户端被配置为向服务器发送请求。它被配置为信任服务器的TLS测试证书,并将在Server.Close时关闭其空闲连接。</target>
        </trans-unit>
        <trans-unit id="e4498f52d7e616076230ca8a01a4098528505216" translate="yes" xml:space="preserve">
          <source>ClientAuthType declares the policy the server will follow for TLS Client Authentication.</source>
          <target state="translated">ClientAuthType声明了服务器将遵循的TLS客户端认证策略。</target>
        </trans-unit>
        <trans-unit id="3619c3780ec5f3cb596f3b3c80136fe6cc01cadb" translate="yes" xml:space="preserve">
          <source>ClientConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1.</source>
          <target state="translated">ClientConn是Go早期HTTP实现的产物。它是低级的、旧的,而且没有被Go当前的HTTP栈使用。我们应该在Go 1之前删除它。</target>
        </trans-unit>
        <trans-unit id="8e583369b8552959b50b3a89d5c18d7e22b8c7d9" translate="yes" xml:space="preserve">
          <source>ClientHelloInfo contains information from a ClientHello message in order to guide application logic in the GetCertificate and GetConfigForClient callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d2d94a50bd23a9f13836749a81ece303a954e6" translate="yes" xml:space="preserve">
          <source>ClientHelloInfo contains information from a ClientHello message in order to guide certificate selection in the GetCertificate callback.</source>
          <target state="translated">ClientHelloInfo包含来自ClientHello消息的信息,以便在GetCertificate回调中指导证书选择。</target>
        </trans-unit>
        <trans-unit id="cd79b5b7a4be54c9b22aebd238e09a232cbd8025" translate="yes" xml:space="preserve">
          <source>ClientSessionCache is a cache of ClientSessionState objects that can be used by a client to resume a TLS session with a given server. ClientSessionCache implementations should expect to be called concurrently from different goroutines. Up to TLS 1.2, only ticket-based resumption is supported, not SessionID-based resumption. In TLS 1.3 they were merged into PSK modes, which are supported via this interface.</source>
          <target state="translated">ClientSessionCache是一个ClientSessionState对象的缓存,客户端可以用它来恢复与给定服务器的TLS会话。ClientSessionCache的实现应该期望从不同的goroutine中被并发调用。在TLS 1.2之前,只支持基于票据的恢复,不支持基于SessionID的恢复。在TLS 1.3中,它们被合并到PSK模式中,通过这个接口来支持。</target>
        </trans-unit>
        <trans-unit id="4261cd72e26b8a6f4e1ee1c0b615bda2af7c152e" translate="yes" xml:space="preserve">
          <source>ClientSessionState contains the state needed by clients to resume TLS sessions.</source>
          <target state="translated">ClientSessionState包含了客户恢复TLS会话所需要的状态。</target>
        </trans-unit>
        <trans-unit id="7b8568bd00779243f275b569a827fb1a4ee4d798" translate="yes" xml:space="preserve">
          <source>ClientTrace currently traces a single HTTP request &amp;amp; response during a single round trip and has no hooks that span a series of redirected requests.</source>
          <target state="translated">ClientTrace当前在单个往返过程中跟踪单个HTTP请求和响应，并且没有跨越一系列重定向请求的钩子。</target>
        </trans-unit>
        <trans-unit id="c2c0d131f45dce2b6840cda576beab00d7f77dc6" translate="yes" xml:space="preserve">
          <source>ClientTrace is a set of hooks to run at various stages of an outgoing HTTP request. Any particular hook may be nil. Functions may be called concurrently from different goroutines and some may be called after the request has completed or failed.</source>
          <target state="translated">ClientTrace是一组钩子,用于在发出的HTTP请求的不同阶段运行。任何特定的钩子都可以是零。函数可以从不同的goroutine中同时调用,有些函数可能在请求完成或失败后被调用。</target>
        </trans-unit>
        <trans-unit id="f78c7958600ab8163b169a5392c03ab112bc9818" translate="yes" xml:space="preserve">
          <source>Clients and Transports are safe for concurrent use by multiple goroutines and for efficiency should only be created once and re-used.</source>
          <target state="translated">客户端和Transports对于多个goroutine的并发使用是安全的,为了提高效率,应该只创建一次并重复使用。</target>
        </trans-unit>
        <trans-unit id="6cf2cc8bbf640eaf7f640276f5d3bedeec8ec3e6" translate="yes" xml:space="preserve">
          <source>Clients of ReadAt can execute parallel ReadAt calls on the same input source.</source>
          <target state="translated">ReadAt的客户端可以在同一个输入源上执行并行的ReadAt调用。</target>
        </trans-unit>
        <trans-unit id="a400bb26da184d79eb5b2958194d8a32b13bc955" translate="yes" xml:space="preserve">
          <source>Clients of WriteAt can execute parallel WriteAt calls on the same destination if the ranges do not overlap.</source>
          <target state="translated">WriteAt的客户端可以在同一个目标上执行并行的WriteAt调用,如果范围不重叠的话。</target>
        </trans-unit>
        <trans-unit id="fec7b0e20e9b1f7f723676dab3a1767767a84b57" translate="yes" xml:space="preserve">
          <source>Clock returns the hour, minute, and second within the day specified by t.</source>
          <target state="translated">时钟返回由t指定的一天内的时、分、秒。</target>
        </trans-unit>
        <trans-unit id="a51aa154240abaf7f49170efa4282e63e6b0af7c" translate="yes" xml:space="preserve">
          <source>Clone returns a copy of h or nil if h is nil.</source>
          <target state="translated">Clone返回h的副本,如果h为nil则返回nil。</target>
        </trans-unit>
        <trans-unit id="4d0c309a73cbbbf8259510e09413f8159d0e1432" translate="yes" xml:space="preserve">
          <source>Clone returns a deep copy of r with its context changed to ctx. The provided ctx must be non-nil.</source>
          <target state="translated">Clone 返回 r 的深层拷贝,并将其上下文改为 ctx。提供的ctx必须是非零。</target>
        </trans-unit>
        <trans-unit id="d40a70840ac8a8b0e1068c9c26e4552921cb6234" translate="yes" xml:space="preserve">
          <source>Clone returns a deep copy of t's exported fields.</source>
          <target state="translated">Clone返回t的导出字段的深度拷贝。</target>
        </trans-unit>
        <trans-unit id="e7d21868e4f3fbff70ffe77108b1ebd0c6e3dad8" translate="yes" xml:space="preserve">
          <source>Clone returns a duplicate of the template, including all associated templates. The actual representation is not copied, but the name space of associated templates is, so further calls to Parse in the copy will add templates to the copy but not to the original. Clone can be used to prepare common templates and use them with variant definitions for other templates by adding the variants after the clone is made.</source>
          <target state="translated">Clone 返回模板的副本,包括所有关联模板。实际的表示方式不会被复制,但相关模板的名称空间会被复制,所以在复制中进一步调用Parse会将模板添加到复制中,但不会添加到原始模板中。Clone可以用来准备常用的模板,并在克隆后添加变体定义,用于其他模板的变体。</target>
        </trans-unit>
        <trans-unit id="00f9f61d9b08e615a156dcfb06e61048e8e52ecb" translate="yes" xml:space="preserve">
          <source>Clone returns a shallow clone of c. It is safe to clone a Config that is being used concurrently by a TLS client or server.</source>
          <target state="translated">Clone返回c的浅层克隆,克隆一个被TLS客户端或服务器同时使用的Config是安全的。</target>
        </trans-unit>
        <trans-unit id="8453ed0e61fef3b985c7beb9516a6f372a19b47a" translate="yes" xml:space="preserve">
          <source>Close calls Hijack and then also closes the underlying connection.</source>
          <target state="translated">关闭调用Hijack,然后也关闭底层连接。</target>
        </trans-unit>
        <trans-unit id="52273c6bb0b067f25179883936e89e4ec6820203" translate="yes" xml:space="preserve">
          <source>Close calls the underlying codec's Close method. If the connection is already shutting down, ErrShutdown is returned.</source>
          <target state="translated">Close调用底层编解码器的Close方法。如果连接已经关闭,将返回ErrShutdown。</target>
        </trans-unit>
        <trans-unit id="3c13ba2fc343eab1245b8fef1e7cc062cd2a1602" translate="yes" xml:space="preserve">
          <source>Close closes a connection to the syslog daemon.</source>
          <target state="translated">关闭关闭与syslog守护进程的连接。</target>
        </trans-unit>
        <trans-unit id="eeb4b4090ffa478f7d84bcfa0c7d691724864926" translate="yes" xml:space="preserve">
          <source>Close closes the File, rendering it unusable for I/O. On files that support SetDeadline, any pending I/O operations will be canceled and return immediately with an error. Close will return an error if it has already been called.</source>
          <target state="translated">Close关闭文件,使其无法进行I/O操作。在支持SetDeadline的文件上,任何悬而未决的I/O操作将被取消,并立即返回一个错误。如果已经被调用,Close将返回一个错误。</target>
        </trans-unit>
        <trans-unit id="d45ca0df5edf4ea7611729ef661a62fd651286e3" translate="yes" xml:space="preserve">
          <source>Close closes the File. If the File was created using NewFile directly instead of Open, Close has no effect.</source>
          <target state="translated">关闭会关闭文件。如果文件是直接使用NewFile而不是Open创建的,关闭没有任何效果。</target>
        </trans-unit>
        <trans-unit id="88e02dffb069cff4304f88a87d5f3eebaaf4bd7a" translate="yes" xml:space="preserve">
          <source>Close closes the Reader. It does not close the underlying io.Reader. In order for the GZIP checksum to be verified, the reader must be fully consumed until the io.EOF.</source>
          <target state="translated">关闭关闭阅读器。它不会关闭底层的io.Reader。为了验证GZIP校验和,阅读器必须被完全消耗,直到io.EOF。</target>
        </trans-unit>
        <trans-unit id="0001566c562646043d2cfebeb74f3e43dd5b2e61" translate="yes" xml:space="preserve">
          <source>Close closes the Rows, preventing further enumeration. If Next is called and returns false and there are no further result sets, the Rows are closed automatically and it will suffice to check the result of Err. Close is idempotent and does not affect the result of Err.</source>
          <target state="translated">Close关闭Rows,防止进一步的枚举。如果调用Next并返回false,并且没有进一步的结果集,则自动关闭Rows,检查Err的结果即可。Close是幂等的,不影响Err.Rows的结果。</target>
        </trans-unit>
        <trans-unit id="d3d80a35eb8198958ef52ff7593c60df2ce5c5fe" translate="yes" xml:space="preserve">
          <source>Close closes the Writer by flushing any unwritten data to the underlying io.Writer and writing the GZIP footer. It does not close the underlying io.Writer.</source>
          <target state="translated">关闭通过将任何未写入的数据刷新到底层的 io.Writer 并写入 GZIP 页脚来关闭 Writer。它不会关闭底层的io.Writer。</target>
        </trans-unit>
        <trans-unit id="ffc4ad566ba30635a22eb5157801170e5d89ec5c" translate="yes" xml:space="preserve">
          <source>Close closes the Writer, flushing any unwritten data to the underlying io.Writer, but does not close the underlying io.Writer.</source>
          <target state="translated">Close关闭Writer,将任何未写入的数据刷新到底层的io.Writer,但不会关闭底层的io.Writer。</target>
        </trans-unit>
        <trans-unit id="dcb888cd0e9b17f68ae4a9ca892eb5a899c7a8d9" translate="yes" xml:space="preserve">
          <source>Close closes the Zip file, rendering it unusable for I/O.</source>
          <target state="translated">关闭关闭Zip文件,使其无法用于I/O。</target>
        </trans-unit>
        <trans-unit id="170e39e4cfe5f423996aef0511a13fa738d82767" translate="yes" xml:space="preserve">
          <source>Close closes the channel v. It panics if v's Kind is not Chan.</source>
          <target state="translated">关闭关闭通道v,如果v的种类不是Chan,它就会恐慌。</target>
        </trans-unit>
        <trans-unit id="4e72aa781c9fdcf98527fd4aefce87b04e14f2dd" translate="yes" xml:space="preserve">
          <source>Close closes the connection.</source>
          <target state="translated">关闭关闭连接。</target>
        </trans-unit>
        <trans-unit id="f0afd5857186a670ed9831e4c77eff40bb3fcd33" translate="yes" xml:space="preserve">
          <source>Close closes the database and prevents new queries from starting. Close then waits for all queries that have started processing on the server to finish.</source>
          <target state="translated">关闭会关闭数据库,并防止新的查询开始。然后关闭等待服务器上所有已经开始处理的查询完成。</target>
        </trans-unit>
        <trans-unit id="a7394665dc5b3d21e6abc1566eec56cbff266f10" translate="yes" xml:space="preserve">
          <source>Close closes the reader; subsequent writes to the write half of the pipe will return the error ErrClosedPipe.</source>
          <target state="translated">关闭关闭读取器;后续对管道的写半部分的写入将返回错误ErrClosedPipe。</target>
        </trans-unit>
        <trans-unit id="4bdc20107bf4231f79596e877811964979986697" translate="yes" xml:space="preserve">
          <source>Close closes the statement.</source>
          <target state="translated">关闭关闭声明。</target>
        </trans-unit>
        <trans-unit id="106e9814bb640efe24e830aa126c2c54c6dc95c2" translate="yes" xml:space="preserve">
          <source>Close closes the tar archive by flushing the padding, and writing the footer. If the current file (from a prior call to WriteHeader) is not fully written, then this returns an error.</source>
          <target state="translated">Close 通过清除填充和写入页脚来关闭 tar 存档。如果当前文件(来自于之前对 WriteHeader 的调用)没有被完全写入,那么这将返回一个错误。</target>
        </trans-unit>
        <trans-unit id="352516c54e1182715d16a990d5c36e2341135718" translate="yes" xml:space="preserve">
          <source>Close closes the underlying Writer and returns its Close return value, if the Writer is also an io.Closer. Otherwise it returns nil.</source>
          <target state="translated">如果Writer也是io.Closer的话,Close关闭底层Writer并返回其Close返回值。否则它返回nil。</target>
        </trans-unit>
        <trans-unit id="52ed6590b2322e36c0e5bf1047b994dc45204fd3" translate="yes" xml:space="preserve">
          <source>Close closes the writer; subsequent reads from the read half of the pipe will return no bytes and EOF.</source>
          <target state="translated">关闭关闭写入器;随后从管道的读半部分读取将不返回任何字节并返回EOF。</target>
        </trans-unit>
        <trans-unit id="200b8523cd103f0c8cfd18d1f36d3268f60a35d8" translate="yes" xml:space="preserve">
          <source>Close does not attempt to close (and does not even know about) any hijacked connections, such as WebSockets.</source>
          <target state="translated">Close不会试图关闭(甚至不知道)任何被劫持的连接,比如WebSockets。</target>
        </trans-unit>
        <trans-unit id="6c8f276efb10d5e03a4e7e0b4c3a39470cd47092" translate="yes" xml:space="preserve">
          <source>Close finishes the multipart message and writes the trailing boundary end line to the output.</source>
          <target state="translated">关闭完成多部分信息,并将尾部的边界线写入输出。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
