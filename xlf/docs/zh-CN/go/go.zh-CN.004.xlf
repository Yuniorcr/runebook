<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="go">
    <body>
      <group id="go">
        <trans-unit id="e587577dc59bfafa8f316d5453515821dcbce5ea" translate="yes" xml:space="preserve">
          <source>Cbrt returns the cube root of x.</source>
          <target state="translated">Cbrt返回x的立方根。</target>
        </trans-unit>
        <trans-unit id="2432d530c0145aab3bfa5662975e8d421e122d9e" translate="yes" xml:space="preserve">
          <source>Ceil</source>
          <target state="translated">Ceil</target>
        </trans-unit>
        <trans-unit id="46536626864b36557258c2a5e53e6d4465979040" translate="yes" xml:space="preserve">
          <source>Ceil returns the least integer value greater than or equal to x.</source>
          <target state="translated">Ceil返回大于或等于x的最小整数值。</target>
        </trans-unit>
        <trans-unit id="67d301941e6984f09b404c3b5e5d0192a1b67ac6" translate="yes" xml:space="preserve">
          <source>CertPool is a set of certificates.</source>
          <target state="translated">CertPool是一组证书。</target>
        </trans-unit>
        <trans-unit id="2ede2f55f16b28db355480b3a24e5f428305766b" translate="yes" xml:space="preserve">
          <source>Certificate returns the certificate used by the server, or nil if the server doesn't use TLS.</source>
          <target state="translated">Certificate返回服务器使用的证书,如果服务器不使用TLS,则返回nil。</target>
        </trans-unit>
        <trans-unit id="ed0353f9bd9f8fff93bbda397f0df68cf8c98c19" translate="yes" xml:space="preserve">
          <source>Certificate.Verify</source>
          <target state="translated">Certificate.Verify</target>
        </trans-unit>
        <trans-unit id="b24b78d8382125c2a275a4ff2231b6b38a8636ed" translate="yes" xml:space="preserve">
          <source>CertificateInvalidError results when an odd error occurs. Users of this library probably want to handle all these errors uniformly.</source>
          <target state="translated">证书无效错误(CertificateInvalidError)发生时,会产生一个奇怪的错误。这个库的用户可能希望统一处理所有这些错误。</target>
        </trans-unit>
        <trans-unit id="4be4f43abf6e2f39e81e91b60f959656ba9b756e" translate="yes" xml:space="preserve">
          <source>CertificateList represents the ASN.1 structure of the same name. See RFC 5280, section 5.1. Use Certificate.CheckCRLSignature to verify the signature.</source>
          <target state="translated">CertificateList代表同名的ASN.1结构。参见RFC 5280,5.1节。使用 Certificate.CheckCRLSignature 来验证签名。</target>
        </trans-unit>
        <trans-unit id="a288f637c3c9d1d271c3c19c56590c8c85a0eb17" translate="yes" xml:space="preserve">
          <source>CertificateRequest represents a PKCS #10, certificate signature request.</source>
          <target state="translated">CertificateRequest代表PKCS #10,证书签名请求。</target>
        </trans-unit>
        <trans-unit id="2950fae6302110dd8a52ed33e4c5f6542549cb2f" translate="yes" xml:space="preserve">
          <source>CertificateRequestInfo contains information from a server's CertificateRequest message, which is used to demand a certificate and proof of control from a client.</source>
          <target state="translated">CertificateRequestInfo包含来自服务器的CertificateRequest消息的信息,该消息用于向客户端索取证书和控制证明。</target>
        </trans-unit>
        <trans-unit id="ec50387142af3be963c7121f78293d51ce51206a" translate="yes" xml:space="preserve">
          <source>ChainNode holds a term followed by a chain of field accesses (identifier starting with '.'). The names may be chained ('.x.y'). The periods are dropped from each ident.</source>
          <target state="translated">ChainNode持有一个术语,后面跟着一个字段访问链(标识符以'.'开头)。名称可以是链式的('.x.y')。每个标识符中的句号会被删除。</target>
        </trans-unit>
        <trans-unit id="41142232bdd3270941be56093eead521d6e00ed0" translate="yes" xml:space="preserve">
          <source>ChanDir represents a channel type's direction.</source>
          <target state="translated">ChanDir表示通道类型的方向。</target>
        </trans-unit>
        <trans-unit id="d71e228872d9403c9b6594fd69625436645be6ba" translate="yes" xml:space="preserve">
          <source>ChanOf returns the channel type with the given direction and element type. For example, if t represents int, ChanOf(RecvDir, t) represents &amp;lt;-chan int.</source>
          <target state="translated">ChanOf返回具有给定方向和元素类型的通道类型。例如，如果t表示int，则ChanOf（RecvDir，t）表示&amp;lt;-chan int。</target>
        </trans-unit>
        <trans-unit id="b34ef43c1dc118fd5f3dd2ddc7f7e9e87461df60" translate="yes" xml:space="preserve">
          <source>Changing the behavior of signals in Go programs</source>
          <target state="translated">改变围棋程序中的信号行为</target>
        </trans-unit>
        <trans-unit id="b5d17f750ce0c90b1d8f2246a376b4e9bb0451a7" translate="yes" xml:space="preserve">
          <source>Channel, complex, and function values cannot be encoded in JSON. Attempting to encode such a value causes Marshal to return an UnsupportedTypeError.</source>
          <target state="translated">通道、复杂和函数值不能用JSON编码。试图对这样的值进行编码会导致Marshal返回一个UnsupportedTypeError。</target>
        </trans-unit>
        <trans-unit id="d81d4ef28354031a16bbd07dbbe84ad7e58f4aef" translate="yes" xml:space="preserve">
          <source>Character class elements:</source>
          <target state="translated">人物类元素。</target>
        </trans-unit>
        <trans-unit id="9253fc85685075e92fb2c2cb576e68b41cb8633e" translate="yes" xml:space="preserve">
          <source>Chdir changes the current working directory to the file, which must be a directory. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Chdir将当前工作目录改为文件,文件必须是一个目录。如果有一个错误,它的类型将是*PathError。</target>
        </trans-unit>
        <trans-unit id="b9f7b1c8f8ac2861de3e2acab3384aee64fee3f5" translate="yes" xml:space="preserve">
          <source>Chdir changes the current working directory to the named directory. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Chdir将当前工作目录改变为命名目录。如果有错误,它的类型将是*PathError。</target>
        </trans-unit>
        <trans-unit id="dcb27e63c2fbdba64841ab2910051fa4a2c3f8f9" translate="yes" xml:space="preserve">
          <source>Check looks for an input to f, any function that returns bool, such that f returns false. It calls f repeatedly, with arbitrary values for each argument. If f returns false on a given input, Check returns that input as a *CheckError. For example:</source>
          <target state="translated">Check寻找一个输入到f的函数,任何返回bool的函数,使f返回false。它反复调用f,对每个参数使用任意值。如果f在给定的输入上返回false,Check会将该输入作为一个*CheckError返回。例如</target>
        </trans-unit>
        <trans-unit id="4a85aadfcc5e9ea6b8907d6a9f8e98f8accc3fc5" translate="yes" xml:space="preserve">
          <source>Check type-checks a package and returns the resulting package object and the first error if any. Additionally, if info != nil, Check populates each of the non-nil maps in the Info struct.</source>
          <target state="translated">Check对一个包进行类型检查,并返回结果的包对象和第一个错误(如果有)。此外,如果info !=nil,Check会填充Info结构中的每个非nil映射。</target>
        </trans-unit>
        <trans-unit id="6d67e1187d47640f702b28a10cc6f53a307ae234" translate="yes" xml:space="preserve">
          <source>CheckCRLSignature checks that the signature in crl is from c.</source>
          <target state="translated">CheckCRLSignature检查CRL中的签名是否来自c。</target>
        </trans-unit>
        <trans-unit id="f93ce303d817100b6d50ba51e9c0c4c774a0a092" translate="yes" xml:space="preserve">
          <source>CheckEqual looks for an input on which f and g return different results. It calls f and g repeatedly with arbitrary values for each argument. If f and g return different answers, CheckEqual returns a *CheckEqualError describing the input and the outputs.</source>
          <target state="translated">CheckEqual寻找一个f和g返回不同结果的输入。它用每个参数的任意值反复调用f和g。如果f和g返回不同的答案,CheckEqual返回一个*CheckEqualError,描述输入和输出。</target>
        </trans-unit>
        <trans-unit id="56c96020e004e0f968e6f808827a8f0ef9a0f959" translate="yes" xml:space="preserve">
          <source>CheckExpr type checks the expression expr as if it had appeared at position pos of package pkg. Type information about the expression is recorded in info.</source>
          <target state="translated">CheckExpr类型检查表达式expr是否出现在包pkg的位置pos处。表达式的类型信息被记录在info.CheckExpr类型中。</target>
        </trans-unit>
        <trans-unit id="3afa858fd88c383b05b45b059da6d700c31f62d0" translate="yes" xml:space="preserve">
          <source>CheckSignature reports whether the signature on c is valid.</source>
          <target state="translated">CheckSignature报告c上的签名是否有效。</target>
        </trans-unit>
        <trans-unit id="b028d2f26cf8934255900c683e9051aaedadc107" translate="yes" xml:space="preserve">
          <source>CheckSignature verifies that signature is a valid signature over signed from c's public key.</source>
          <target state="translated">CheckSignature验证签名是一个有效的签名,从c的公钥上签名。</target>
        </trans-unit>
        <trans-unit id="5f1469e6f7aeb717fe6fd2a8ee3f4b0eb8bea924" translate="yes" xml:space="preserve">
          <source>CheckSignatureFrom verifies that the signature on c is a valid signature from parent.</source>
          <target state="translated">CheckSignatureFrom验证c上的签名是否是来自父代的有效签名。</target>
        </trans-unit>
        <trans-unit id="cf0a25d9a79670b543c8f6d54e561382ee2327c8" translate="yes" xml:space="preserve">
          <source>Checksum returns the Adler-32 checksum of data.</source>
          <target state="translated">Checksum 返回数据的 Adler-32 校验和。</target>
        </trans-unit>
        <trans-unit id="77add3d3bab3db380a97be8fd992a744496e9205" translate="yes" xml:space="preserve">
          <source>Checksum returns the CRC-32 checksum of data using the polynomial represented by the Table.</source>
          <target state="translated">Checksum使用表所代表的多项式返回数据的CRC-32校验和。</target>
        </trans-unit>
        <trans-unit id="35a88a5d5ae4a4db8d25e096b438fe712928f70b" translate="yes" xml:space="preserve">
          <source>Checksum returns the CRC-64 checksum of data using the polynomial represented by the Table.</source>
          <target state="translated">Checksum使用表所代表的多项式返回数据的CRC-64校验和。</target>
        </trans-unit>
        <trans-unit id="cefd992ce8689aa4a5e8a938343def9a5adb2161" translate="yes" xml:space="preserve">
          <source>ChecksumIEEE returns the CRC-32 checksum of data using the IEEE polynomial.</source>
          <target state="translated">ChecksumIEEE使用IEEE多项式返回数据的CRC-32校验和。</target>
        </trans-unit>
        <trans-unit id="2274ec5f679712a687a101a1f53de838aacd04a3" translate="yes" xml:space="preserve">
          <source>Child returns the i'th child scope for 0 &amp;lt;= i &amp;lt; NumChildren().</source>
          <target state="translated">Child返回0 &amp;lt;= i &amp;lt;NumChildren（）的第i个子范围。</target>
        </trans-unit>
        <trans-unit id="72a2cf7fd19dd78efb6d310d1146546965c630cd" translate="yes" xml:space="preserve">
          <source>Chmod</source>
          <target state="translated">Chmod</target>
        </trans-unit>
        <trans-unit id="54381b37df415f17ee19fa61fb2c262ae4bffd97" translate="yes" xml:space="preserve">
          <source>Chmod changes the mode of the file to mode. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Chmod将文件的模式改为模式。如果有错误,它的类型将是*PathError。</target>
        </trans-unit>
        <trans-unit id="ae20e5d14b6f7b19f0570009a48263e1096ec5dd" translate="yes" xml:space="preserve">
          <source>Chmod changes the mode of the named file to mode. If the file is a symbolic link, it changes the mode of the link's target. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Chmod将命名文件的模式改为模式。如果文件是一个符号链接,它将改变链接目标的模式。如果有一个错误,它的类型将是*PathError。</target>
        </trans-unit>
        <trans-unit id="c345fc1bf8f6407d62f187432fbbc92a5cd52616" translate="yes" xml:space="preserve">
          <source>Chown changes the numeric uid and gid of the named file. If the file is a symbolic link, it changes the uid and gid of the link's target. A uid or gid of -1 means to not change that value. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Chown改变了命名文件的数字uid和gid,如果文件是符号链接,则改变链接目标的uid和gid。如果文件是一个符号链接,则改变链接目标的 uid 和 gid。uid或gid为-1表示不改变该值。如果有一个错误,它的类型将是*PathError。</target>
        </trans-unit>
        <trans-unit id="d15192f283b6552c623863f471ea76b78149f1dd" translate="yes" xml:space="preserve">
          <source>Chown changes the numeric uid and gid of the named file. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Chown会改变命名文件的id和gid。如果有一个错误,它的类型将是*PathError。</target>
        </trans-unit>
        <trans-unit id="3501f50820f444e076a0c8ebd0137aa20f349607" translate="yes" xml:space="preserve">
          <source>Chtimes</source>
          <target state="translated">Chtimes</target>
        </trans-unit>
        <trans-unit id="74fad201512b306ebb341d1f65416d99588ec73b" translate="yes" xml:space="preserve">
          <source>Chtimes changes the access and modification times of the named file, similar to the Unix utime() or utimes() functions.</source>
          <target state="translated">Chtimes改变命名文件的访问和修改时间,类似于Unix的utime()或utimes()函数。</target>
        </trans-unit>
        <trans-unit id="a5adf59eb3f139e41a426342af6d17cd0645c748" translate="yes" xml:space="preserve">
          <source>CipherSuite is a TLS cipher suite. Note that most functions in this package accept and expose cipher suite IDs instead of this type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a78bcbdc0b18021d4c5644e75f868f9eb7291eb" translate="yes" xml:space="preserve">
          <source>CipherSuiteName returns the standard name for the passed cipher suite ID (e.g. &quot;TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256&quot;), or a fallback representation of the ID value if the cipher suite is not implemented by this package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192f89e9c606de46c4a9032a560a990cac06ae36" translate="yes" xml:space="preserve">
          <source>CipherSuites returns a list of cipher suites currently implemented by this package, excluding those with security issues, which are returned by InsecureCipherSuites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1b2218514bfbf9d096fe76cc6d68997cdfcde1d" translate="yes" xml:space="preserve">
          <source>Class is found in Header.Ident[EI_CLASS] and Header.Class.</source>
          <target state="translated">Class在Header.Ident[EI_CLASS]和Header.Class中找到。</target>
        </trans-unit>
        <trans-unit id="fa893d87e1fa0a69c7942dd1e65f3bd1932e53d1" translate="yes" xml:space="preserve">
          <source>Clean</source>
          <target state="translated">Clean</target>
        </trans-unit>
        <trans-unit id="c505b06ae1e4508892a4d23e86b20501c6b00af4" translate="yes" xml:space="preserve">
          <source>Clean returns the shortest path name equivalent to path by purely lexical processing. It applies the following rules iteratively until no further processing can be done:</source>
          <target state="translated">Clean通过纯粹的词法处理,返回与路径等价的最短路径名。它反复应用下面的规则,直到无法进行进一步的处理。</target>
        </trans-unit>
        <trans-unit id="c93b2c002f067a2ed2c067567553083838dff13e" translate="yes" xml:space="preserve">
          <source>Cleanup registers a function to be called when the test and all its subtests complete. Cleanup functions will be called in last added, first called order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d1092fa425ad399701105f3ee2808a7d89faf5" translate="yes" xml:space="preserve">
          <source>Clearenv deletes all environment variables.</source>
          <target state="translated">Clearenv删除所有环境变量。</target>
        </trans-unit>
        <trans-unit id="1b3b0b991a98add944cc0471a5856e4b7e7dfe62" translate="yes" xml:space="preserve">
          <source>Client represents an RPC Client. There may be multiple outstanding Calls associated with a single Client, and a Client may be used by multiple goroutines simultaneously.</source>
          <target state="translated">Client代表一个RPC Client。一个Client可以有多个未完成的Call,一个Client可以被多个goroutine同时使用。</target>
        </trans-unit>
        <trans-unit id="50cd2d3f91314c6d5d9767c58d2189bde9c3a214" translate="yes" xml:space="preserve">
          <source>Client returns a new TLS client side connection using conn as the underlying transport. The config cannot be nil: users must set either ServerName or InsecureSkipVerify in the config.</source>
          <target state="translated">Client返回一个新的TLS客户端连接,使用conn作为底层传输。config不能为零:用户必须在config中设置ServerName或InsecureSkipVerify。</target>
        </trans-unit>
        <trans-unit id="1829d60c1d2d2fa9fd020c834b748c41d1074494" translate="yes" xml:space="preserve">
          <source>Client returns an HTTP client configured for making requests to the server. It is configured to trust the server's TLS test certificate and will close its idle connections on Server.Close.</source>
          <target state="translated">Client返回一个HTTP客户端,该客户端被配置为向服务器发送请求。它被配置为信任服务器的TLS测试证书,并将在Server.Close时关闭其空闲连接。</target>
        </trans-unit>
        <trans-unit id="e4498f52d7e616076230ca8a01a4098528505216" translate="yes" xml:space="preserve">
          <source>ClientAuthType declares the policy the server will follow for TLS Client Authentication.</source>
          <target state="translated">ClientAuthType声明了服务器将遵循的TLS客户端认证策略。</target>
        </trans-unit>
        <trans-unit id="3619c3780ec5f3cb596f3b3c80136fe6cc01cadb" translate="yes" xml:space="preserve">
          <source>ClientConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1.</source>
          <target state="translated">ClientConn是Go早期HTTP实现的产物。它是低级的、旧的,而且没有被Go当前的HTTP栈使用。我们应该在Go 1之前删除它。</target>
        </trans-unit>
        <trans-unit id="8e583369b8552959b50b3a89d5c18d7e22b8c7d9" translate="yes" xml:space="preserve">
          <source>ClientHelloInfo contains information from a ClientHello message in order to guide application logic in the GetCertificate and GetConfigForClient callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d2d94a50bd23a9f13836749a81ece303a954e6" translate="yes" xml:space="preserve">
          <source>ClientHelloInfo contains information from a ClientHello message in order to guide certificate selection in the GetCertificate callback.</source>
          <target state="translated">ClientHelloInfo包含来自ClientHello消息的信息,以便在GetCertificate回调中指导证书选择。</target>
        </trans-unit>
        <trans-unit id="cd79b5b7a4be54c9b22aebd238e09a232cbd8025" translate="yes" xml:space="preserve">
          <source>ClientSessionCache is a cache of ClientSessionState objects that can be used by a client to resume a TLS session with a given server. ClientSessionCache implementations should expect to be called concurrently from different goroutines. Up to TLS 1.2, only ticket-based resumption is supported, not SessionID-based resumption. In TLS 1.3 they were merged into PSK modes, which are supported via this interface.</source>
          <target state="translated">ClientSessionCache是一个ClientSessionState对象的缓存,客户端可以用它来恢复与给定服务器的TLS会话。ClientSessionCache的实现应该期望从不同的goroutine中被并发调用。在TLS 1.2之前,只支持基于票据的恢复,不支持基于SessionID的恢复。在TLS 1.3中,它们被合并到PSK模式中,通过这个接口来支持。</target>
        </trans-unit>
        <trans-unit id="4261cd72e26b8a6f4e1ee1c0b615bda2af7c152e" translate="yes" xml:space="preserve">
          <source>ClientSessionState contains the state needed by clients to resume TLS sessions.</source>
          <target state="translated">ClientSessionState包含了客户恢复TLS会话所需要的状态。</target>
        </trans-unit>
        <trans-unit id="7b8568bd00779243f275b569a827fb1a4ee4d798" translate="yes" xml:space="preserve">
          <source>ClientTrace currently traces a single HTTP request &amp;amp; response during a single round trip and has no hooks that span a series of redirected requests.</source>
          <target state="translated">ClientTrace当前在单个往返过程中跟踪单个HTTP请求和响应，并且没有跨越一系列重定向请求的钩子。</target>
        </trans-unit>
        <trans-unit id="c2c0d131f45dce2b6840cda576beab00d7f77dc6" translate="yes" xml:space="preserve">
          <source>ClientTrace is a set of hooks to run at various stages of an outgoing HTTP request. Any particular hook may be nil. Functions may be called concurrently from different goroutines and some may be called after the request has completed or failed.</source>
          <target state="translated">ClientTrace是一组钩子,用于在发出的HTTP请求的不同阶段运行。任何特定的钩子都可以是零。函数可以从不同的goroutine中同时调用,有些函数可能在请求完成或失败后被调用。</target>
        </trans-unit>
        <trans-unit id="f78c7958600ab8163b169a5392c03ab112bc9818" translate="yes" xml:space="preserve">
          <source>Clients and Transports are safe for concurrent use by multiple goroutines and for efficiency should only be created once and re-used.</source>
          <target state="translated">客户端和Transports对于多个goroutine的并发使用是安全的,为了提高效率,应该只创建一次并重复使用。</target>
        </trans-unit>
        <trans-unit id="6cf2cc8bbf640eaf7f640276f5d3bedeec8ec3e6" translate="yes" xml:space="preserve">
          <source>Clients of ReadAt can execute parallel ReadAt calls on the same input source.</source>
          <target state="translated">ReadAt的客户端可以在同一个输入源上执行并行的ReadAt调用。</target>
        </trans-unit>
        <trans-unit id="a400bb26da184d79eb5b2958194d8a32b13bc955" translate="yes" xml:space="preserve">
          <source>Clients of WriteAt can execute parallel WriteAt calls on the same destination if the ranges do not overlap.</source>
          <target state="translated">WriteAt的客户端可以在同一个目标上执行并行的WriteAt调用,如果范围不重叠的话。</target>
        </trans-unit>
        <trans-unit id="fec7b0e20e9b1f7f723676dab3a1767767a84b57" translate="yes" xml:space="preserve">
          <source>Clock returns the hour, minute, and second within the day specified by t.</source>
          <target state="translated">时钟返回由t指定的一天内的时、分、秒。</target>
        </trans-unit>
        <trans-unit id="a51aa154240abaf7f49170efa4282e63e6b0af7c" translate="yes" xml:space="preserve">
          <source>Clone returns a copy of h or nil if h is nil.</source>
          <target state="translated">Clone返回h的副本,如果h为nil则返回nil。</target>
        </trans-unit>
        <trans-unit id="4d0c309a73cbbbf8259510e09413f8159d0e1432" translate="yes" xml:space="preserve">
          <source>Clone returns a deep copy of r with its context changed to ctx. The provided ctx must be non-nil.</source>
          <target state="translated">Clone 返回 r 的深层拷贝,并将其上下文改为 ctx。提供的ctx必须是非零。</target>
        </trans-unit>
        <trans-unit id="d40a70840ac8a8b0e1068c9c26e4552921cb6234" translate="yes" xml:space="preserve">
          <source>Clone returns a deep copy of t's exported fields.</source>
          <target state="translated">Clone返回t的导出字段的深度拷贝。</target>
        </trans-unit>
        <trans-unit id="e7d21868e4f3fbff70ffe77108b1ebd0c6e3dad8" translate="yes" xml:space="preserve">
          <source>Clone returns a duplicate of the template, including all associated templates. The actual representation is not copied, but the name space of associated templates is, so further calls to Parse in the copy will add templates to the copy but not to the original. Clone can be used to prepare common templates and use them with variant definitions for other templates by adding the variants after the clone is made.</source>
          <target state="translated">Clone 返回模板的副本,包括所有关联模板。实际的表示方式不会被复制,但相关模板的名称空间会被复制,所以在复制中进一步调用Parse会将模板添加到复制中,但不会添加到原始模板中。Clone可以用来准备常用的模板,并在克隆后添加变体定义,用于其他模板的变体。</target>
        </trans-unit>
        <trans-unit id="527cd01f8b7ce585e574ce54ca0d6cde41f4011f" translate="yes" xml:space="preserve">
          <source>Clone returns a shallow clone of c or nil if c is nil. It is safe to clone a Config that is being used concurrently by a TLS client or server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f9f61d9b08e615a156dcfb06e61048e8e52ecb" translate="yes" xml:space="preserve">
          <source>Clone returns a shallow clone of c. It is safe to clone a Config that is being used concurrently by a TLS client or server.</source>
          <target state="translated">Clone返回c的浅层克隆,克隆一个被TLS客户端或服务器同时使用的Config是安全的。</target>
        </trans-unit>
        <trans-unit id="8453ed0e61fef3b985c7beb9516a6f372a19b47a" translate="yes" xml:space="preserve">
          <source>Close calls Hijack and then also closes the underlying connection.</source>
          <target state="translated">关闭调用Hijack,然后也关闭底层连接。</target>
        </trans-unit>
        <trans-unit id="52273c6bb0b067f25179883936e89e4ec6820203" translate="yes" xml:space="preserve">
          <source>Close calls the underlying codec's Close method. If the connection is already shutting down, ErrShutdown is returned.</source>
          <target state="translated">Close调用底层编解码器的Close方法。如果连接已经关闭,将返回ErrShutdown。</target>
        </trans-unit>
        <trans-unit id="3c13ba2fc343eab1245b8fef1e7cc062cd2a1602" translate="yes" xml:space="preserve">
          <source>Close closes a connection to the syslog daemon.</source>
          <target state="translated">关闭关闭与syslog守护进程的连接。</target>
        </trans-unit>
        <trans-unit id="eeb4b4090ffa478f7d84bcfa0c7d691724864926" translate="yes" xml:space="preserve">
          <source>Close closes the File, rendering it unusable for I/O. On files that support SetDeadline, any pending I/O operations will be canceled and return immediately with an error. Close will return an error if it has already been called.</source>
          <target state="translated">Close关闭文件,使其无法进行I/O操作。在支持SetDeadline的文件上,任何悬而未决的I/O操作将被取消,并立即返回一个错误。如果已经被调用,Close将返回一个错误。</target>
        </trans-unit>
        <trans-unit id="d45ca0df5edf4ea7611729ef661a62fd651286e3" translate="yes" xml:space="preserve">
          <source>Close closes the File. If the File was created using NewFile directly instead of Open, Close has no effect.</source>
          <target state="translated">关闭会关闭文件。如果文件是直接使用NewFile而不是Open创建的,关闭没有任何效果。</target>
        </trans-unit>
        <trans-unit id="88e02dffb069cff4304f88a87d5f3eebaaf4bd7a" translate="yes" xml:space="preserve">
          <source>Close closes the Reader. It does not close the underlying io.Reader. In order for the GZIP checksum to be verified, the reader must be fully consumed until the io.EOF.</source>
          <target state="translated">关闭关闭阅读器。它不会关闭底层的io.Reader。为了验证GZIP校验和,阅读器必须被完全消耗,直到io.EOF。</target>
        </trans-unit>
        <trans-unit id="0001566c562646043d2cfebeb74f3e43dd5b2e61" translate="yes" xml:space="preserve">
          <source>Close closes the Rows, preventing further enumeration. If Next is called and returns false and there are no further result sets, the Rows are closed automatically and it will suffice to check the result of Err. Close is idempotent and does not affect the result of Err.</source>
          <target state="translated">Close关闭Rows,防止进一步的枚举。如果调用Next并返回false,并且没有进一步的结果集,则自动关闭Rows,检查Err的结果即可。Close是幂等的,不影响Err.Rows的结果。</target>
        </trans-unit>
        <trans-unit id="d3d80a35eb8198958ef52ff7593c60df2ce5c5fe" translate="yes" xml:space="preserve">
          <source>Close closes the Writer by flushing any unwritten data to the underlying io.Writer and writing the GZIP footer. It does not close the underlying io.Writer.</source>
          <target state="translated">关闭通过将任何未写入的数据刷新到底层的 io.Writer 并写入 GZIP 页脚来关闭 Writer。它不会关闭底层的io.Writer。</target>
        </trans-unit>
        <trans-unit id="ffc4ad566ba30635a22eb5157801170e5d89ec5c" translate="yes" xml:space="preserve">
          <source>Close closes the Writer, flushing any unwritten data to the underlying io.Writer, but does not close the underlying io.Writer.</source>
          <target state="translated">Close关闭Writer,将任何未写入的数据刷新到底层的io.Writer,但不会关闭底层的io.Writer。</target>
        </trans-unit>
        <trans-unit id="dcb888cd0e9b17f68ae4a9ca892eb5a899c7a8d9" translate="yes" xml:space="preserve">
          <source>Close closes the Zip file, rendering it unusable for I/O.</source>
          <target state="translated">关闭关闭Zip文件,使其无法用于I/O。</target>
        </trans-unit>
        <trans-unit id="170e39e4cfe5f423996aef0511a13fa738d82767" translate="yes" xml:space="preserve">
          <source>Close closes the channel v. It panics if v's Kind is not Chan.</source>
          <target state="translated">关闭关闭通道v,如果v的种类不是Chan,它就会恐慌。</target>
        </trans-unit>
        <trans-unit id="4e72aa781c9fdcf98527fd4aefce87b04e14f2dd" translate="yes" xml:space="preserve">
          <source>Close closes the connection.</source>
          <target state="translated">关闭关闭连接。</target>
        </trans-unit>
        <trans-unit id="f0afd5857186a670ed9831e4c77eff40bb3fcd33" translate="yes" xml:space="preserve">
          <source>Close closes the database and prevents new queries from starting. Close then waits for all queries that have started processing on the server to finish.</source>
          <target state="translated">关闭会关闭数据库,并防止新的查询开始。然后关闭等待服务器上所有已经开始处理的查询完成。</target>
        </trans-unit>
        <trans-unit id="a7394665dc5b3d21e6abc1566eec56cbff266f10" translate="yes" xml:space="preserve">
          <source>Close closes the reader; subsequent writes to the write half of the pipe will return the error ErrClosedPipe.</source>
          <target state="translated">关闭关闭读取器;后续对管道的写半部分的写入将返回错误ErrClosedPipe。</target>
        </trans-unit>
        <trans-unit id="4bdc20107bf4231f79596e877811964979986697" translate="yes" xml:space="preserve">
          <source>Close closes the statement.</source>
          <target state="translated">关闭关闭声明。</target>
        </trans-unit>
        <trans-unit id="106e9814bb640efe24e830aa126c2c54c6dc95c2" translate="yes" xml:space="preserve">
          <source>Close closes the tar archive by flushing the padding, and writing the footer. If the current file (from a prior call to WriteHeader) is not fully written, then this returns an error.</source>
          <target state="translated">Close 通过清除填充和写入页脚来关闭 tar 存档。如果当前文件(来自于之前对 WriteHeader 的调用)没有被完全写入,那么这将返回一个错误。</target>
        </trans-unit>
        <trans-unit id="352516c54e1182715d16a990d5c36e2341135718" translate="yes" xml:space="preserve">
          <source>Close closes the underlying Writer and returns its Close return value, if the Writer is also an io.Closer. Otherwise it returns nil.</source>
          <target state="translated">如果Writer也是io.Closer的话,Close关闭底层Writer并返回其Close返回值。否则它返回nil。</target>
        </trans-unit>
        <trans-unit id="52ed6590b2322e36c0e5bf1047b994dc45204fd3" translate="yes" xml:space="preserve">
          <source>Close closes the writer; subsequent reads from the read half of the pipe will return no bytes and EOF.</source>
          <target state="translated">关闭关闭写入器;随后从管道的读半部分读取将不返回任何字节并返回EOF。</target>
        </trans-unit>
        <trans-unit id="200b8523cd103f0c8cfd18d1f36d3268f60a35d8" translate="yes" xml:space="preserve">
          <source>Close does not attempt to close (and does not even know about) any hijacked connections, such as WebSockets.</source>
          <target state="translated">Close不会试图关闭(甚至不知道)任何被劫持的连接,比如WebSockets。</target>
        </trans-unit>
        <trans-unit id="6c8f276efb10d5e03a4e7e0b4c3a39470cd47092" translate="yes" xml:space="preserve">
          <source>Close finishes the multipart message and writes the trailing boundary end line to the output.</source>
          <target state="translated">关闭完成多部分信息,并将尾部的边界线写入输出。</target>
        </trans-unit>
        <trans-unit id="4729b3f8428d27fe7962c988912499dee821e961" translate="yes" xml:space="preserve">
          <source>Close finishes writing the zip file by writing the central directory. It does not close the underlying writer.</source>
          <target state="translated">关闭通过写入中心目录来完成对 zip 文件的写入。它不会关闭底层写入器。</target>
        </trans-unit>
        <trans-unit id="f8c5f7e41ae46e45fdb752f5060f8f1c692afd60" translate="yes" xml:space="preserve">
          <source>Close flushes and closes the writer.</source>
          <target state="translated">关闭冲洗和关闭作家。</target>
        </trans-unit>
        <trans-unit id="a176e6e0b76092540fa57054871f1d181440c357" translate="yes" xml:space="preserve">
          <source>Close immediately closes all active net.Listeners and any connections in state StateNew, StateActive, or StateIdle. For a graceful shutdown, use Shutdown.</source>
          <target state="translated">关闭会立即关闭所有活动的net.Listeners和任何处于StateNew、StateActive或StateIdle状态的连接。如果要优雅地关闭,请使用 Shutdown。</target>
        </trans-unit>
        <trans-unit id="fe447e0ee4298c5937baf1a06d93345aa464fbd5" translate="yes" xml:space="preserve">
          <source>Close returns any error returned from closing the Server's underlying Listener(s).</source>
          <target state="translated">Close 返回关闭服务器的底层监听器时返回的任何错误。</target>
        </trans-unit>
        <trans-unit id="ebef25a1a35880c50df3b65075b191c54c634f29" translate="yes" xml:space="preserve">
          <source>Close returns the connection to the connection pool. All operations after a Close will return with ErrConnDone. Close is safe to call concurrently with other operations and will block until all other operations finish. It may be useful to first cancel any used context and then call close directly after.</source>
          <target state="translated">关闭将连接返回到连接池。Close之后的所有操作都会以ErrConnDone返回。Close与其他操作同时调用是安全的,并且会阻塞直到所有其他操作完成。首先取消任何使用过的上下文,然后直接调用close可能会很有用。</target>
        </trans-unit>
        <trans-unit id="37eb62a0940cfdcee1af7061b837f9799f402796" translate="yes" xml:space="preserve">
          <source>Close shuts down the server and blocks until all outstanding requests on this server have completed.</source>
          <target state="translated">关闭关闭服务器,并阻止直到这个服务器上所有未完成的请求完成。</target>
        </trans-unit>
        <trans-unit id="f8fbcf4b32e3ff8e88655f1d0a5b7d15a237aeb7" translate="yes" xml:space="preserve">
          <source>Close stops listening on the TCP address. Already Accepted connections are not closed.</source>
          <target state="translated">关闭停止监听该TCP地址。已经接受的连接不会被关闭。</target>
        </trans-unit>
        <trans-unit id="d08ec13311a2751b4b2525f7b1f553c0ef38c594" translate="yes" xml:space="preserve">
          <source>Close stops listening on the Unix address. Already accepted connections are not closed.</source>
          <target state="translated">关闭停止监听Unix地址。已经接受的连接不会被关闭。</target>
        </trans-unit>
        <trans-unit id="389d20cf359b73e0e7980ec6fac9aa975d57569a" translate="yes" xml:space="preserve">
          <source>CloseClientConnections closes any open HTTP connections to the test Server.</source>
          <target state="translated">CloseClientConnections关闭任何打开的HTTP连接到测试服务器。</target>
        </trans-unit>
        <trans-unit id="261f4fda459d0516a122cc5d4396c6dc486f9e9c" translate="yes" xml:space="preserve">
          <source>CloseIdleConnections closes any connections on its Transport which were previously connected from previous requests but are now sitting idle in a &quot;keep-alive&quot; state. It does not interrupt any connections currently in use.</source>
          <target state="translated">CloseIdleConnections关闭其Transport上的任何连接,这些连接之前从以前的请求中连接过,但现在处于 &quot;keep-alive &quot;的闲置状态。它不会中断任何当前正在使用的连接。</target>
        </trans-unit>
        <trans-unit id="98cdec9e3ed766ae575089db46108dde804402bf" translate="yes" xml:space="preserve">
          <source>CloseIdleConnections closes any connections which were previously connected from previous requests but are now sitting idle in a &quot;keep-alive&quot; state. It does not interrupt any connections currently in use.</source>
          <target state="translated">CloseIdleConnections 关闭任何之前通过请求连接的连接,但现在处于 &quot;keep-alive &quot;状态的空闲连接。它不会中断任何当前正在使用的连接。</target>
        </trans-unit>
        <trans-unit id="cd124a0e692a348dba461a3358554e58e81ecbd1" translate="yes" xml:space="preserve">
          <source>CloseRead shuts down the reading side of the TCP connection. Most callers should just use Close.</source>
          <target state="translated">CloseRead关闭了TCP连接的读取端。大多数调用者应该只使用Close。</target>
        </trans-unit>
        <trans-unit id="44bd7cea9ee27035c3ae1c56d08cfc3f4f5d4af4" translate="yes" xml:space="preserve">
          <source>CloseRead shuts down the reading side of the Unix domain connection. Most callers should just use Close.</source>
          <target state="translated">CloseRead关闭了Unix域连接的读取端。大多数调用者应该只使用Close。</target>
        </trans-unit>
        <trans-unit id="c99ee46f4965c6ae12155ff0c3acac929ea2d2ba" translate="yes" xml:space="preserve">
          <source>CloseWithError always returns nil.</source>
          <target state="translated">CloseWithError总是返回nil。</target>
        </trans-unit>
        <trans-unit id="7cb57262be19b34a83137a915ff126b817e8cd84" translate="yes" xml:space="preserve">
          <source>CloseWithError closes the reader; subsequent writes to the write half of the pipe will return the error err.</source>
          <target state="translated">CloseWithError关闭读取器;后续写入管道的写半部分将返回错误err。</target>
        </trans-unit>
        <trans-unit id="323f38f99d402fc8898abc494103623650f844e1" translate="yes" xml:space="preserve">
          <source>CloseWithError closes the writer; subsequent reads from the read half of the pipe will return no bytes and the error err, or EOF if err is nil.</source>
          <target state="translated">CloseWithError关闭写入器;随后从管道的读半部分读取将不返回任何字节和错误err,如果err为nil则返回EOF。</target>
        </trans-unit>
        <trans-unit id="ff06e07199eeb62edb44267acc81531d3b78ba33" translate="yes" xml:space="preserve">
          <source>CloseWithError never overwrites the previous error if it exists and always returns nil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cb9bc4e7dc627b7e88dd6fc70819d95287b7de" translate="yes" xml:space="preserve">
          <source>CloseWrite shuts down the writing side of the TCP connection. Most callers should just use Close.</source>
          <target state="translated">CloseWrite关闭了TCP连接的写入端。大多数调用者应该只使用Close。</target>
        </trans-unit>
        <trans-unit id="8b5fa14df50780ec1f98f4b1599b904896412a44" translate="yes" xml:space="preserve">
          <source>CloseWrite shuts down the writing side of the Unix domain connection. Most callers should just use Close.</source>
          <target state="translated">CloseWrite关闭了Unix域连接的写入端。大多数调用者应该只使用Close。</target>
        </trans-unit>
        <trans-unit id="12c02b4b8ced685856a49bdd3fa95819cddecdb4" translate="yes" xml:space="preserve">
          <source>CloseWrite shuts down the writing side of the connection. It should only be called once the handshake has completed and does not call CloseWrite on the underlying connection. Most callers should just use Close.</source>
          <target state="translated">CloseWrite关闭了连接的写入端。它应该只在握手完成后被调用,而不是在底层连接上调用CloseWrite。大多数调用者应该只使用Close。</target>
        </trans-unit>
        <trans-unit id="025c9e3cff2e6d4f799242ed81fe111ea5df8d42" translate="yes" xml:space="preserve">
          <source>Closer is the interface that wraps the basic Close method.</source>
          <target state="translated">Closer是包装基本Close方法的接口。</target>
        </trans-unit>
        <trans-unit id="bf86a4428400033e41e83adaf8fcd42c758c9a66" translate="yes" xml:space="preserve">
          <source>Cmd is a convenience method that sends a command after waiting its turn in the pipeline. The command text is the result of formatting format with args and appending \r\n. Cmd returns the id of the command, for use with StartResponse and EndResponse.</source>
          <target state="translated">Cmd是一个方便的方法,它在管道中等待轮到它之后发送一个命令。命令文本是格式化格式和args并附加\r\n的结果。Cmd返回命令的id,用于StartResponse和EndResponse。</target>
        </trans-unit>
        <trans-unit id="c4df69b916cd12f7de468263676e94c5c75d74be" translate="yes" xml:space="preserve">
          <source>Cmd represents an external command being prepared or run.</source>
          <target state="translated">Cmd代表一个正在准备或运行的外部命令。</target>
        </trans-unit>
        <trans-unit id="8341f2d7cc5348428398c452871f044231d072b1" translate="yes" xml:space="preserve">
          <source>Cmd.CombinedOutput</source>
          <target state="translated">Cmd.CombinedOutput</target>
        </trans-unit>
        <trans-unit id="b49f432e04db8bb6f0ff26554d0c04cd2474b188" translate="yes" xml:space="preserve">
          <source>Cmd.Output</source>
          <target state="translated">Cmd.Output</target>
        </trans-unit>
        <trans-unit id="0d9082730686869c07fbf083f9d88bceb2781e29" translate="yes" xml:space="preserve">
          <source>Cmd.Run</source>
          <target state="translated">Cmd.Run</target>
        </trans-unit>
        <trans-unit id="58d8e5abab254c9f803a0fbf81ec5a80f295d3f6" translate="yes" xml:space="preserve">
          <source>Cmd.Start</source>
          <target state="translated">Cmd.Start</target>
        </trans-unit>
        <trans-unit id="7d1c537c3fedeb55a89bcf9247fbaee7db539a47" translate="yes" xml:space="preserve">
          <source>Cmd.StderrPipe</source>
          <target state="translated">Cmd.StderrPipe</target>
        </trans-unit>
        <trans-unit id="e1e9157b17d06c02c7b6351858c7dc306f264ffa" translate="yes" xml:space="preserve">
          <source>Cmd.StdinPipe</source>
          <target state="translated">Cmd.StdinPipe</target>
        </trans-unit>
        <trans-unit id="426cc9ae5b0f1bc8c33ffa706427366531644c95" translate="yes" xml:space="preserve">
          <source>Cmd.StdoutPipe</source>
          <target state="translated">Cmd.StdoutPipe</target>
        </trans-unit>
        <trans-unit id="7da7ae25e3ce7a764681c94e7a21a14faa2a048f" translate="yes" xml:space="preserve">
          <source>Cmdline responds with the running program's command line, with arguments separated by NUL bytes. The package initialization registers it as /debug/pprof/cmdline.</source>
          <target state="translated">Cmdline用正在运行的程序的命令行进行响应,参数用NUL字节分隔。包的初始化将其注册为/debug/pprof/cmdline。</target>
        </trans-unit>
        <trans-unit id="e499091b6f0f3957334468fbd916d761cc79bbf6" translate="yes" xml:space="preserve">
          <source>Cmp compares x and y and returns:</source>
          <target state="translated">Cmp比较x和y并返回。</target>
        </trans-unit>
        <trans-unit id="f8bfa3d3867edbba78ae419fddd813026c9ccc33" translate="yes" xml:space="preserve">
          <source>CmpAbs compares the absolute values of x and y and returns:</source>
          <target state="translated">CmpAbs比较x和y的绝对值并返回。</target>
        </trans-unit>
        <trans-unit id="57049c5e8c996230fc39d709b36268d07f37c357" translate="yes" xml:space="preserve">
          <source>CmsgLen returns the value to store in the Len field of the Cmsghdr structure, taking into account any necessary alignment.</source>
          <target state="translated">CmsgLen 返回要存储在 Cmsghdr 结构的 Len 字段中的值,并考虑到任何必要的对齐。</target>
        </trans-unit>
        <trans-unit id="3ab8b85fb5b07863e8d88db990fae36dc884bec8" translate="yes" xml:space="preserve">
          <source>CmsgSpace returns the number of bytes an ancillary element with payload of the passed data length occupies.</source>
          <target state="translated">CmsgSpace返回传递的数据长度的带有有效载荷的辅助元素所占的字节数。</target>
        </trans-unit>
        <trans-unit id="48325d7b0e0596e2c4e51ec147f486ed8c008263" translate="yes" xml:space="preserve">
          <source>Code Effect Property: &quot;... only code specified by the template author should run as a result of injecting the template output into a page and all code specified by the template author should run as a result of the same.&quot;</source>
          <target state="translated">代码效果属性。&quot;.只有模板作者指定的代码才会因为将模板输出注入页面而运行,模板作者指定的所有代码也会因为同样的结果而运行&quot;。</target>
        </trans-unit>
        <trans-unit id="ca567dda33cdf7058994a40bb9ef4db135c7d283" translate="yes" xml:space="preserve">
          <source>Code:</source>
          <target state="translated">Code:</target>
        </trans-unit>
        <trans-unit id="6b14d7cd0be2bfa55cd088eb8efaed3cb2199731" translate="yes" xml:space="preserve">
          <source>Color can convert itself to alpha-premultiplied 16-bits per channel RGBA. The conversion may be lossy.</source>
          <target state="translated">颜色可以自行转换为每通道16位RGBA的alpha预乘法。这种转换可能是有损的。</target>
        </trans-unit>
        <trans-unit id="9fd162f1f3146515349a168ad0c0bee532290150" translate="yes" xml:space="preserve">
          <source>ColorModel implements the Image interface.</source>
          <target state="translated">ColorModel实现了Image接口。</target>
        </trans-unit>
        <trans-unit id="98107aade8283409c4e0728cc2278d75e786fabe" translate="yes" xml:space="preserve">
          <source>ColumnConverter may be optionally implemented by Stmt if the statement is aware of its own columns' types and can convert from any type to a driver Value.</source>
          <target state="translated">如果语句知道自己的列的类型,并且可以从任何类型转换为驱动值,那么ColumnConverter可以由Stmt选择性地实现。</target>
        </trans-unit>
        <trans-unit id="d5c3da66a9ea9f5f89916fe885dde7b78b155333" translate="yes" xml:space="preserve">
          <source>ColumnType contains the name and type of a column.</source>
          <target state="translated">ColumnType包含一个列的名称和类型。</target>
        </trans-unit>
        <trans-unit id="f1efdea11843f07d3a2895f7ecdd3254afb2b05f" translate="yes" xml:space="preserve">
          <source>ColumnTypes returns column information such as column type, length, and nullable. Some information may not be available from some drivers.</source>
          <target state="translated">ColumnTypes返回列信息,如列类型、长度和nullable。某些驱动程序可能无法提供某些信息。</target>
        </trans-unit>
        <trans-unit id="a7b0a72c46f57d4aaacd8fb638f17124f271db49" translate="yes" xml:space="preserve">
          <source>Columns returns the column names. Columns returns an error if the rows are closed.</source>
          <target state="translated">Columns返回列名。如果行被关闭,Columns返回错误信息。</target>
        </trans-unit>
        <trans-unit id="ef0c9247ce98d2d969ab4480bf85645f18a4849a" translate="yes" xml:space="preserve">
          <source>Combination of fork and exec, careful to be thread safe.</source>
          <target state="translated">结合fork和exec,注意线程安全。</target>
        </trans-unit>
        <trans-unit id="7490336ab129f1a9b38c44a15f2efc1193a790bb" translate="yes" xml:space="preserve">
          <source>CombinedOutput runs the command and returns its combined standard output and standard error.</source>
          <target state="translated">CombinedOutput运行命令并返回其综合标准输出和标准误差。</target>
        </trans-unit>
        <trans-unit id="ba546d35dfd34c127cd8bc57f35ce0b69f3c2efb" translate="yes" xml:space="preserve">
          <source>Comma is the field delimiter.</source>
          <target state="translated">逗号是字段的分隔符。</target>
        </trans-unit>
        <trans-unit id="8901895fb1b1d4c4ea2fec368c25176bf73e2f7e" translate="yes" xml:space="preserve">
          <source>Command</source>
          <target state="translated">Command</target>
        </trans-unit>
        <trans-unit id="9331e1a8ab2aef9b980540768d06019630abf1c7" translate="yes" xml:space="preserve">
          <source>Command (Environment)</source>
          <target state="translated">命令(环境)</target>
        </trans-unit>
        <trans-unit id="c2efc4b10527a5dc4a84c585a3102ee37add55b4" translate="yes" xml:space="preserve">
          <source>Command line flag syntax</source>
          <target state="translated">命令行标志语法</target>
        </trans-unit>
        <trans-unit id="63fa526b0ed74d3db6d8290c146d52ec2eac85fb" translate="yes" xml:space="preserve">
          <source>Command returns the Cmd struct to execute the named program with the given arguments.</source>
          <target state="translated">Command返回Cmd结构,以执行给定参数的命名程序。</target>
        </trans-unit>
        <trans-unit id="3abae9e919fccff46e1815da877737ecf731b82f" translate="yes" xml:space="preserve">
          <source>CommandContext</source>
          <target state="translated">CommandContext</target>
        </trans-unit>
        <trans-unit id="e0905d26f91536a32a803b5ba92c26b9a1cc54f0" translate="yes" xml:space="preserve">
          <source>CommandContext is like Command but includes a context.</source>
          <target state="translated">CommandContext和Command一样,但包括一个上下文。</target>
        </trans-unit>
        <trans-unit id="4fe0d3f2a541495d49598b4c3afabfa5ee1e04f4" translate="yes" xml:space="preserve">
          <source>CommandLine is the default set of command-line flags, parsed from os.Args. The top-level functions such as BoolVar, Arg, and so on are wrappers for the methods of CommandLine.</source>
          <target state="translated">CommandLine 是一组默认的命令行标志,从 os.Args 中解析出来。BoolVar、Arg等顶层函数是CommandLine方法的封装器。</target>
        </trans-unit>
        <trans-unit id="b87781df7cecba61ce8de025314ef45104db43ee" translate="yes" xml:space="preserve">
          <source>CommandNode holds a command (a pipeline inside an evaluating action).</source>
          <target state="translated">命令节点(CommandNode)持有一条命令(一个评估动作内的管道)。</target>
        </trans-unit>
        <trans-unit id="72ffbd722c89aeb2c836acf3f0c44afff50be407" translate="yes" xml:space="preserve">
          <source>CommentMap</source>
          <target state="translated">CommentMap</target>
        </trans-unit>
        <trans-unit id="f8303372bb88ae8e46962f543dbd1065649ae876" translate="yes" xml:space="preserve">
          <source>CommentNode holds a comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75531c33f09b6698d805430cabdb3a738714d38" translate="yes" xml:space="preserve">
          <source>Comments returns the list of comment groups in the comment map. The result is sorted in source order.</source>
          <target state="translated">Comments 返回评论地图中的评论组列表。结果按来源顺序排序。</target>
        </trans-unit>
        <trans-unit id="75dbcaa738947f57e870bbe9a0b593ed1429157b" translate="yes" xml:space="preserve">
          <source>Commit commits the transaction.</source>
          <target state="translated">Commit提交交易。</target>
        </trans-unit>
        <trans-unit id="ead23952f81edf09bb71f62ad1b348959ed375c9" translate="yes" xml:space="preserve">
          <source>Common HTTP methods.</source>
          <target state="translated">常见的HTTP方法。</target>
        </trans-unit>
        <trans-unit id="88d67b2df02a2b0f12c80994d6833df71942c623" translate="yes" xml:space="preserve">
          <source>Common durations. There is no definition for units of Day or larger to avoid confusion across daylight savings time zone transitions.</source>
          <target state="translated">共同的持续时间。没有定义日或更大的单位,以避免在夏令时时区转换中产生混淆。</target>
        </trans-unit>
        <trans-unit id="184f39007c639489786070aa25bca08ce4764bc0" translate="yes" xml:space="preserve">
          <source>CommonType holds elements of all types. It is a historical artifact, kept for binary compatibility and exported only for the benefit of the package's encoding of type descriptors. It is not intended for direct use by clients.</source>
          <target state="translated">CommonType 拥有所有类型的元素。它是一个历史性的人工制品,为了二进制的兼容性而保留,并且只为了包的类型描述符编码的利益而输出。它不打算被客户直接使用。</target>
        </trans-unit>
        <trans-unit id="bfd58ee3a270f3a931009900e1008d549bbd7453" translate="yes" xml:space="preserve">
          <source>Community</source>
          <target state="translated">Community</target>
        </trans-unit>
        <trans-unit id="d41102eb4b9de6b7bae3f5e306780351400ba6cc" translate="yes" xml:space="preserve">
          <source>Compact appends to dst the JSON-encoded src with insignificant space characters elided.</source>
          <target state="translated">Compact将JSON编码的src附加到dst,并省略了不重要的空格字符。</target>
        </trans-unit>
        <trans-unit id="4b1b7e3488c6acd7e9ce9eb7f6b22d083ee3ad86" translate="yes" xml:space="preserve">
          <source>Comparable reports whether values of type T are comparable.</source>
          <target state="translated">可比性报告类型T的值是否可比较。</target>
        </trans-unit>
        <trans-unit id="8d105cf44d3926289e65c1c83d8e37cb23fd049e" translate="yes" xml:space="preserve">
          <source>Compare</source>
          <target state="translated">Compare</target>
        </trans-unit>
        <trans-unit id="a87372512a9a5360900cc7c5a33b6e3e93e823d3" translate="yes" xml:space="preserve">
          <source>Compare (Search)</source>
          <target state="translated">比较(搜索</target>
        </trans-unit>
        <trans-unit id="ad63be5eee8e54dee7704f35acb0ba003f3c69ff" translate="yes" xml:space="preserve">
          <source>Compare is included only for symmetry with package bytes. It is usually clearer and always faster to use the built-in string comparison operators ==, &amp;lt;, &amp;gt;, and so on.</source>
          <target state="translated">比较仅包括与包字节的对称性。使用内置的字符串比较运算符==，&amp;lt;，&amp;gt;等通常更清晰，总是更快。</target>
        </trans-unit>
        <trans-unit id="80addebf328bcb3bd2c3c1645d4d89e7132d58cd" translate="yes" xml:space="preserve">
          <source>Compare returns an integer comparing two byte slices lexicographically. The result will be 0 if a==b, -1 if a &amp;lt; b, and +1 if a &amp;gt; b. A nil argument is equivalent to an empty slice.</source>
          <target state="translated">Compare返回一个按字典顺序比较两个字节片的整数。如果a == b，结果将为0，如果a &amp;lt;b，则结果为-1，如果a&amp;gt; b，则结果为+1。nil参数等效于空片。</target>
        </trans-unit>
        <trans-unit id="5df35de4203e8da0393ad78d4e9938f7d7d27e38" translate="yes" xml:space="preserve">
          <source>Compare returns an integer comparing two strings lexicographically. The result will be 0 if a==b, -1 if a &amp;lt; b, and +1 if a &amp;gt; b.</source>
          <target state="translated">Compare返回一个按字典顺序比较两个字符串的整数。如果a == b，结果将为0；如果a &amp;lt;b，结果将为-1；如果a&amp;gt; b，结果将为+1。</target>
        </trans-unit>
        <trans-unit id="f8e32b8f4321d2754d7b192fb3758e3b419a9f9c" translate="yes" xml:space="preserve">
          <source>Compare returns the result of the comparison x op y. The comparison must be defined for the operands. If one of the operands is Unknown, the result is false.</source>
          <target state="translated">比较返回比较x op y的结果,比较必须为操作数定义。如果操作数之一为未知,结果为false。</target>
        </trans-unit>
        <trans-unit id="910ec23407bde52c30ee4b60de00ef973b43f80f" translate="yes" xml:space="preserve">
          <source>CompareAndSwapInt32 executes the compare-and-swap operation for an int32 value.</source>
          <target state="translated">CompareAndSwapInt32执行对一个int32值的比较和交换操作。</target>
        </trans-unit>
        <trans-unit id="45d6c43b2c49df7ae06cb50a00c7e8b8915268cf" translate="yes" xml:space="preserve">
          <source>CompareAndSwapInt64 executes the compare-and-swap operation for an int64 value.</source>
          <target state="translated">CompareAndSwapInt64执行对一个int64值的比较和交换操作。</target>
        </trans-unit>
        <trans-unit id="80d6539a495248c2ad93b44c9b160da516bc7385" translate="yes" xml:space="preserve">
          <source>CompareAndSwapPointer executes the compare-and-swap operation for a unsafe.Pointer value.</source>
          <target state="translated">CompareAndSwapPointer执行对unsafe.Pointer值的比较和交换操作。</target>
        </trans-unit>
        <trans-unit id="08b11a167dff4b888f467bc21d9300ca565d08f6" translate="yes" xml:space="preserve">
          <source>CompareAndSwapUint32 executes the compare-and-swap operation for a uint32 value.</source>
          <target state="translated">CompareAndSwapUint32执行一个uint32值的比较和交换操作。</target>
        </trans-unit>
        <trans-unit id="e65fd9c97eea0a869d816095871991bfeac0d5f9" translate="yes" xml:space="preserve">
          <source>CompareAndSwapUint64 executes the compare-and-swap operation for a uint64 value.</source>
          <target state="translated">CompareAndSwapUint64执行对一个uint64值的比较和交换操作。</target>
        </trans-unit>
        <trans-unit id="fd8ad0ca49f8af09303cdda4c902f6a9b14029ce" translate="yes" xml:space="preserve">
          <source>CompareAndSwapUintptr executes the compare-and-swap operation for a uintptr value.</source>
          <target state="translated">CompareAndSwapUintptr执行对一个uintptr值的比较和交换操作。</target>
        </trans-unit>
        <trans-unit id="e46ab4b32fa2f629f5362ccdb0c33a816b4b7aef" translate="yes" xml:space="preserve">
          <source>Compatibility: Any future changes to hash or crypto packages will endeavor to maintain compatibility with state encoded using previous versions. That is, any released versions of the packages should be able to decode data written with any previously released version, subject to issues such as security fixes. See the Go compatibility document for background: &lt;a href=&quot;https://golang.org/doc/go1compat&quot;&gt;https://golang.org/doc/go1compat&lt;/a&gt;</source>
          <target state="translated">兼容性：将来对哈希或加密软件包的任何更改都将努力保持与使用以前版本编码的状态的兼容性。也就是说，软件包的任何发行版本都应该能够解码以任何先前发行版本写入的数据，但要考虑到诸如安全修复程序之类的问题。有关背景信息，请参见Go兼容性文档：&lt;a href=&quot;https://golang.org/doc/go1compat&quot;&gt;https&lt;/a&gt; : //golang.org/doc/go1compat</target>
        </trans-unit>
        <trans-unit id="954806623263eec83965435d4b03d56697b9e46d" translate="yes" xml:space="preserve">
          <source>Compatibility: Any future changes to the package will endeavor to maintain compatibility with streams encoded using previous versions. That is, any released version of this package should be able to decode data written with any previously released version, subject to issues such as security fixes. See the Go compatibility document for background: &lt;a href=&quot;https://golang.org/doc/go1compat&quot;&gt;https://golang.org/doc/go1compat&lt;/a&gt;</source>
          <target state="translated">兼容性：对该程序包进行的任何将来更改都将努力保持与使用以前版本编码的流的兼容性。也就是说，此软件包的任何发行版本都应能够解码以任何先前发行版本写入的数据，但要考虑到诸如安全修复程序之类的问题。有关背景信息，请参见Go兼容性文档：&lt;a href=&quot;https://golang.org/doc/go1compat&quot;&gt;https&lt;/a&gt; : //golang.org/doc/go1compat</target>
        </trans-unit>
        <trans-unit id="0baebc95c01171c0c52e34f8d0b193a89bd2a16d" translate="yes" xml:space="preserve">
          <source>Compile compiles the regexp into a program to be executed. The regexp should have been simplified already (returned from re.Simplify).</source>
          <target state="translated">编译将regexp编译成一个要执行的程序。regexp应该已经被简化(从re.Simplify返回)。</target>
        </trans-unit>
        <trans-unit id="5ebbdcb3f12368feddbe44f5bdd110e3044ea9e4" translate="yes" xml:space="preserve">
          <source>Compile parses a regular expression and returns, if successful, a Regexp object that can be used to match against text.</source>
          <target state="translated">编译解析一个正则表达式,如果成功,则返回一个Regexp对象,用于与文本匹配。</target>
        </trans-unit>
        <trans-unit id="cee12e4c020c15df0e0265d183f5996a7256de50" translate="yes" xml:space="preserve">
          <source>CompilePOSIX is like Compile but restricts the regular expression to POSIX ERE (egrep) syntax and changes the match semantics to leftmost-longest.</source>
          <target state="translated">CompilePOSIX 与 Compile 类似,但将正则表达式限制为 POSIX ERE(egrep)语法,并将匹配语义改为最左长。</target>
        </trans-unit>
        <trans-unit id="5e03d68306e0c19856edf7366f977bbbed7ddfc9" translate="yes" xml:space="preserve">
          <source>Compiler is the name of the compiler toolchain that built the running binary. Known toolchains are:</source>
          <target state="translated">编译器是构建运行二进制的编译器工具链的名称。已知的工具链有:</target>
        </trans-unit>
        <trans-unit id="e22f98d93ae817ec1259f4d4b7bb21830ff51f40" translate="yes" xml:space="preserve">
          <source>Complete computes the interface's method set. It must be called by users of NewInterfaceType and NewInterface after the interface's embedded types are fully defined and before using the interface type in any way other than to form other types. Complete returns the receiver.</source>
          <target state="translated">Complete计算接口的方法集。NewInterfaceType和NewInterface的用户必须在接口的内嵌类型被完全定义之后,并且在以任何方式使用接口类型而不是形成其他类型之前调用它。Complete返回接收器。</target>
        </trans-unit>
        <trans-unit id="b830166abbeef6c580e084458bea9fe726363f1a" translate="yes" xml:space="preserve">
          <source>Complete computes the interface's method set. It must be called by users of NewInterfaceType and NewInterface after the interface's embedded types are fully defined and before using the interface type in any way other than to form other types. The interface must not contain duplicate methods or a panic occurs. Complete returns the receiver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f7244e495625b4cee683d43e3d4155851069d0" translate="yes" xml:space="preserve">
          <source>Complex returns v's underlying value, as a complex128. It panics if v's Kind is not Complex64 or Complex128</source>
          <target state="translated">Complex 返回 v 的底层值,作为一个 complex128。如果v的Kind不是Complex64或Complex128,它就会恐慌。</target>
        </trans-unit>
        <trans-unit id="1e5c0a1accf821336b517c8f9a6d139c6eec6f93" translate="yes" xml:space="preserve">
          <source>ComplexType is here for the purposes of documentation only. It is a stand-in for either complex type: complex64 or complex128.</source>
          <target state="translated">ComplexType在这里只是为了文档的目的。它是复杂类型的替身:complex64或complex128。</target>
        </trans-unit>
        <trans-unit id="0393f2fc81c87a0dafffd5b2077e514e08d44e60" translate="yes" xml:space="preserve">
          <source>Composites:</source>
          <target state="translated">Composites:</target>
        </trans-unit>
        <trans-unit id="6330cf629c30461620e73f64161faf03c4f6bc05" translate="yes" xml:space="preserve">
          <source>Compression methods.</source>
          <target state="translated">压缩方法。</target>
        </trans-unit>
        <trans-unit id="dd07f0f2be8ef65d73e0d3b0811ef58ea8daca19" translate="yes" xml:space="preserve">
          <source>Cond implements a condition variable, a rendezvous point for goroutines waiting for or announcing the occurrence of an event.</source>
          <target state="translated">Cond实现了一个条件变量,是goroutine等待或宣布事件发生的会合点。</target>
        </trans-unit>
        <trans-unit id="b8d15477b0af65c5951b32f8d79c3115615594d0" translate="yes" xml:space="preserve">
          <source>Config (KeyLogWriter)</source>
          <target state="translated">配置(KeyLogWriter)</target>
        </trans-unit>
        <trans-unit id="cde347fdf3f046790e6dd217677a4ff572a16904" translate="yes" xml:space="preserve">
          <source>Config (VerifyConnection)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e807e5a6200a3f39396feeb57c8d54139d104a3" translate="yes" xml:space="preserve">
          <source>Config holds an image's color model and dimensions.</source>
          <target state="translated">Config保存图像的颜色模型和尺寸。</target>
        </trans-unit>
        <trans-unit id="6b74bd988d5a3ea14e1b3df314b2481dce7147bf" translate="yes" xml:space="preserve">
          <source>Conj returns the complex conjugate of x.</source>
          <target state="translated">Conj返回x的复共轭。</target>
        </trans-unit>
        <trans-unit id="c9aeb439eaab9aac64aeb1a4cefd295f624e1753" translate="yes" xml:space="preserve">
          <source>Conn is a connection to a database. It is not used concurrently by multiple goroutines.</source>
          <target state="translated">Conn是一个数据库的连接。它不能被多个goroutine同时使用。</target>
        </trans-unit>
        <trans-unit id="1b1029621a91138c59ede0769c17c76de3d476a1" translate="yes" xml:space="preserve">
          <source>Conn is a generic stream-oriented network connection.</source>
          <target state="translated">Conn是一种面向流的通用网络连接。</target>
        </trans-unit>
        <trans-unit id="0742e4736e59fa33890eb7f9409476b2970b8342" translate="yes" xml:space="preserve">
          <source>Conn is assumed to be stateful.</source>
          <target state="translated">Conn被认为是有状态的。</target>
        </trans-unit>
        <trans-unit id="19cb8b53c681806d63b63016497ea6a71f949b9d" translate="yes" xml:space="preserve">
          <source>Conn is implemented by some types in the net and os packages to provide access to the underlying file descriptor or handle.</source>
          <target state="translated">Conn由net和os包中的一些类型实现,以提供对底层文件描述符或句柄的访问。</target>
        </trans-unit>
        <trans-unit id="d5e466ea632370cac21d90b7f4f09fae73dc2ed1" translate="yes" xml:space="preserve">
          <source>Conn represents a single database connection rather than a pool of database connections. Prefer running queries from DB unless there is a specific need for a continuous single database connection.</source>
          <target state="translated">Conn代表一个单一的数据库连接,而不是一个数据库连接池。除非有特殊的需求,需要连续的单数据库连接,否则更倾向于从DB中运行查询。</target>
        </trans-unit>
        <trans-unit id="08d452c612a33917a07ea957a4e2e63fa7d35e0f" translate="yes" xml:space="preserve">
          <source>Conn returns a single connection by either opening a new connection or returning an existing connection from the connection pool. Conn will block until either a connection is returned or ctx is canceled. Queries run on the same Conn will be run in the same database session.</source>
          <target state="translated">Conn通过打开一个新的连接或从连接池中返回一个现有的连接来返回单个连接。Conn将阻塞,直到返回一个连接或取消ctx。在同一个Conn上运行的查询将在同一个数据库会话中运行。</target>
        </trans-unit>
        <trans-unit id="1a6c492eb2dd2d9a3974d02d68dfa500550dd3dd" translate="yes" xml:space="preserve">
          <source>Conn, a convenient packaging of Reader, Writer, and Pipeline for use with a single network connection.</source>
          <target state="translated">Conn,是Reader、Writer和Pipeline的便捷封装,可与单一网络连接使用。</target>
        </trans-unit>
        <trans-unit id="85591a22c37013bf743fa31976eceaaa6316c3f2" translate="yes" xml:space="preserve">
          <source>Conn.BeginTx</source>
          <target state="translated">Conn.BeginTx</target>
        </trans-unit>
        <trans-unit id="5cf5eb76abc574b7772bf9ab1e8c6d4fea476438" translate="yes" xml:space="preserve">
          <source>Conn.ExecContext</source>
          <target state="translated">Conn.ExecContext</target>
        </trans-unit>
        <trans-unit id="c158ecf9ec2479e6846915d8cb9fe6d3cbd4ca47" translate="yes" xml:space="preserve">
          <source>ConnBeginTx enhances the Conn interface with context and TxOptions.</source>
          <target state="translated">ConnBeginTx增强了Conn接口的上下文和TxOptions。</target>
        </trans-unit>
        <trans-unit id="cc1ce7b126fb8c452695e0fb899404e6512c196b" translate="yes" xml:space="preserve">
          <source>ConnPrepareContext enhances the Conn interface with context.</source>
          <target state="translated">ConnPrepareContext增强了Conn接口的上下文。</target>
        </trans-unit>
        <trans-unit id="dd0a434e24a3e815d5fcde63b2103c735bf86e75" translate="yes" xml:space="preserve">
          <source>ConnectionState records basic TLS details about the connection.</source>
          <target state="translated">ConnectionState记录了连接的基本TLS细节。</target>
        </trans-unit>
        <trans-unit id="ec4590fa3842e170ce672f8a3f9663ce18f220b4" translate="yes" xml:space="preserve">
          <source>ConnectionState returns basic TLS details about the connection.</source>
          <target state="translated">ConnectionState返回关于连接的基本TLS细节。</target>
        </trans-unit>
        <trans-unit id="3382413c31457bfa590d655f61e74261287ccc28" translate="yes" xml:space="preserve">
          <source>Constant folding computes the exact constant value (constant.Value) for every expression (ast.Expr) that is a compile-time constant. Use Info.Types[expr].Value for the results of constant folding.</source>
          <target state="translated">常量折叠为每一个作为编译时常量的表达式(ast.Expr)计算精确的常量值(constant.Value)。使用Info.Types[expr].Value来计算常量折叠的结果。</target>
        </trans-unit>
        <trans-unit id="834dc3729f5137013cad26135140ed953b36f94d" translate="yes" xml:space="preserve">
          <source>ConstantTimeByteEq returns 1 if x == y and 0 otherwise.</source>
          <target state="translated">如果x==y,ConstantTimeByteEq返回1,否则返回0。</target>
        </trans-unit>
        <trans-unit id="3558d9d7a00f451a48ef2972f41f8686803a0e24" translate="yes" xml:space="preserve">
          <source>ConstantTimeCompare returns 1 if the two slices, x and y, have equal contents and 0 otherwise. The time taken is a function of the length of the slices and is independent of the contents.</source>
          <target state="translated">如果两个切片x和y的内容相等,ConstantTimeCompare返回1,否则返回0。所需时间是片长的函数,与内容无关。</target>
        </trans-unit>
        <trans-unit id="88c252edbf2eca3cb91bb29e951cb5ca95bae6aa" translate="yes" xml:space="preserve">
          <source>ConstantTimeCopy copies the contents of y into x (a slice of equal length) if v == 1. If v == 0, x is left unchanged. Its behavior is undefined if v takes any other value.</source>
          <target state="translated">如果v ==1,ConstantTimeCopy将y的内容复制到x中(一个等长的片断)。 如果v ==0,x将保持不变。如果v取任何其他值,它的行为是未定义的。</target>
        </trans-unit>
        <trans-unit id="ff7a225b92c492d7dc1f43d3aec5a53c49890771" translate="yes" xml:space="preserve">
          <source>ConstantTimeEq returns 1 if x == y and 0 otherwise.</source>
          <target state="translated">ConstantTimeEq在x==y时返回1,否则返回0。</target>
        </trans-unit>
        <trans-unit id="7e6cda7519c219248a0508d2822b6c702c671a99" translate="yes" xml:space="preserve">
          <source>ConstantTimeLessOrEq returns 1 if x &amp;lt;= y and 0 otherwise. Its behavior is undefined if x or y are negative or &amp;gt; 2**31 - 1.</source>
          <target state="translated">如果x &amp;lt;= y，则ConstantTimeLessOrEq返回1，否则返回0。如果x或y为负或&amp;gt; 2 ** 31-1，则其行为是不确定的。</target>
        </trans-unit>
        <trans-unit id="8097a05c2ae8e15642a918a2dfd5de0ec4d3229d" translate="yes" xml:space="preserve">
          <source>ConstantTimeSelect returns x if v == 1 and y if v == 0. Its behavior is undefined if v takes any other value.</source>
          <target state="translated">如果v=1,ConstantTimeSelect返回x,如果v=0,返回y。 如果v取其他值,它的行为没有定义。</target>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="2fcb5061de485a74f3977289cc41179ec8ab431f" translate="yes" xml:space="preserve">
          <source>Constants describing the Accuracy of a Float.</source>
          <target state="translated">描述浮子精度的常量。</target>
        </trans-unit>
        <trans-unit id="046dff50bc71ac1e0509d7f6f6e5ffad1fc87642" translate="yes" xml:space="preserve">
          <source>Constants to identify various tar formats.</source>
          <target state="translated">用于识别各种焦油格式的常量。</target>
        </trans-unit>
        <trans-unit id="555424611e16923e575afc6f5fc122e1c2a19159" translate="yes" xml:space="preserve">
          <source>ConstraintViolationError results when a requested usage is not permitted by a certificate. For example: checking a signature when the public key isn't a certificate signing key.</source>
          <target state="translated">ConstraintViolationError的结果是,当一个请求的用法不被证书允许时。例如:当公钥不是证书签名密钥时,检查签名。</target>
        </trans-unit>
        <trans-unit id="33e15d008d511f3101566a2e25203ef2a3f605a0" translate="yes" xml:space="preserve">
          <source>Contains</source>
          <target state="translated">Contains</target>
        </trans-unit>
        <trans-unit id="7e044f963947fee78187d2c8a9c3fc9f40ab582e" translate="yes" xml:space="preserve">
          <source>Contains reports whether pos is within the scope's extent. The result is guaranteed to be valid only if the type-checked AST has complete position information.</source>
          <target state="translated">包含报告 pos 是否在范围内。只有当经过类型检查的AST有完整的位置信息时,才能保证结果有效。</target>
        </trans-unit>
        <trans-unit id="c2b64d04b858878f66705aa586f7fa9e41fa1f23" translate="yes" xml:space="preserve">
          <source>Contains reports whether subslice is within b.</source>
          <target state="translated">包含报告子片是否在b内。</target>
        </trans-unit>
        <trans-unit id="5e18f046f19b6a654d4cf4ca8d98e9f26e42d9b0" translate="yes" xml:space="preserve">
          <source>Contains reports whether substr is within s.</source>
          <target state="translated">包含报告substr是否在s内。</target>
        </trans-unit>
        <trans-unit id="6abdd6add896a729ee1aad307b9af57bdd6cad51" translate="yes" xml:space="preserve">
          <source>Contains reports whether the network includes ip.</source>
          <target state="translated">包含报告网络是否包括ip。</target>
        </trans-unit>
        <trans-unit id="f7cae610cac616dec3e9ae05c0c03197e4d666b4" translate="yes" xml:space="preserve">
          <source>ContainsAny</source>
          <target state="translated">ContainsAny</target>
        </trans-unit>
        <trans-unit id="877abb973dc781a3c8fa066aa0b824607b6f8b34" translate="yes" xml:space="preserve">
          <source>ContainsAny reports whether any Unicode code points in chars are within s.</source>
          <target state="translated">ContainsAny会报告是否有Unicode码点在s内。</target>
        </trans-unit>
        <trans-unit id="6caee33a35e9d91f330ffd6a91207ad4b9338f0d" translate="yes" xml:space="preserve">
          <source>ContainsAny reports whether any of the UTF-8-encoded code points in chars are within b.</source>
          <target state="translated">ContainsAny报告了chars中是否有任何UTF-8编码的码点在b之内。</target>
        </trans-unit>
        <trans-unit id="7b7debe6ccf4ad9133e2542cad231bda0c85355b" translate="yes" xml:space="preserve">
          <source>ContainsRune</source>
          <target state="translated">ContainsRune</target>
        </trans-unit>
        <trans-unit id="81a6dc8ca3b6d8a1950b7ae7f379f764b29d9034" translate="yes" xml:space="preserve">
          <source>ContainsRune reports whether the Unicode code point r is within s.</source>
          <target state="translated">ContainsRune报告Unicode码点r是否在s内。</target>
        </trans-unit>
        <trans-unit id="dc1ff477a4e2194cf3761b5cdca699f501e9f919" translate="yes" xml:space="preserve">
          <source>ContainsRune reports whether the rune is contained in the UTF-8-encoded byte slice b.</source>
          <target state="translated">ContainsRune报告符文是否包含在UTF-8编码的字节片b中。</target>
        </trans-unit>
        <trans-unit id="d08542aeb2bfc8fbad4f388086aa29696fcb3614" translate="yes" xml:space="preserve">
          <source>Context returns the request's context. To change the context, use WithContext.</source>
          <target state="translated">Context返回请求的上下文。要改变上下文,使用WithContext。</target>
        </trans-unit>
        <trans-unit id="1ca89f9f2a2036011eb5b4d2c57c4771153bb83e" translate="yes" xml:space="preserve">
          <source>Context's methods may be called by multiple goroutines simultaneously.</source>
          <target state="translated">Context的方法可以被多个goroutine同时调用。</target>
        </trans-unit>
        <trans-unit id="c161cba0ca1d50bd8851cc88a3794c809cbe6fbe" translate="yes" xml:space="preserve">
          <source>ContextClientTrace returns the ClientTrace associated with the provided context. If none, it returns nil.</source>
          <target state="translated">ContextClientTrace返回与提供的上下文相关联的ClientTrace。如果没有,则返回nil。</target>
        </trans-unit>
        <trans-unit id="049c25129edc0e21a3c2b9240307623c8b16b3e6" translate="yes" xml:space="preserve">
          <source>Contexts</source>
          <target state="translated">Contexts</target>
        </trans-unit>
        <trans-unit id="cfb055ddaa6fd827855b9a19519a485e47403121" translate="yes" xml:space="preserve">
          <source>Conversion between RGB and Y'CbCr is lossy and there are multiple, slightly different formulae for converting between the two. This package follows the JFIF specification at &lt;a href=&quot;https://www.w3.org/Graphics/JPEG/jfif3.pdf&quot;&gt;https://www.w3.org/Graphics/JPEG/jfif3.pdf&lt;/a&gt;.</source>
          <target state="translated">RGB和Y'CbCr之间的转换是有损耗的，并且在两者之间存在多个略有不同的公式。该软件包遵循JFIF规范，&lt;a href=&quot;https://www.w3.org/Graphics/JPEG/jfif3.pdf&quot;&gt;网址&lt;/a&gt;为https://www.w3.org/Graphics/JPEG/jfif3.pdf。</target>
        </trans-unit>
        <trans-unit id="1b24506d2330c3e5aaf3eed9ee049df2b2edfc2e" translate="yes" xml:space="preserve">
          <source>Conversion of a uintptr back to Pointer is not valid in general.</source>
          <target state="translated">在一般情况下,将uintptr转换回Pointer是无效的。</target>
        </trans-unit>
        <trans-unit id="8b30242b973b465aec017dbe20811af00636e0e2" translate="yes" xml:space="preserve">
          <source>Convert returns the palette color closest to c in Euclidean R,G,B space.</source>
          <target state="translated">转换后返回欧几里得R,G,B空间中最接近c的调色板颜色。</target>
        </trans-unit>
        <trans-unit id="7c65e78e2cfee0137de5015d96d98123ad8d7b4a" translate="yes" xml:space="preserve">
          <source>Convert returns the value v converted to type t. If the usual Go conversion rules do not allow conversion of the value v to type t, Convert panics.</source>
          <target state="translated">如果通常的围棋转换规则不允许将值v转换为类型t,Convert就会慌乱。</target>
        </trans-unit>
        <trans-unit id="e60c6764e20f1ce7accef0e79715fc6de73a21bc" translate="yes" xml:space="preserve">
          <source>ConvertibleTo reports whether a value of type V is convertible to a value of type T.</source>
          <target state="translated">ConvertibleTo报告类型V的值是否可转换为类型T的值。</target>
        </trans-unit>
        <trans-unit id="483087e44afa8d5285f534d77323c3706428debe" translate="yes" xml:space="preserve">
          <source>Converting a Pointer to a uintptr produces the memory address of the value pointed at, as an integer. The usual use for such a uintptr is to print it.</source>
          <target state="translated">将一个Pointer转换为一个uintptr,产生指向的值的内存地址,作为一个整数。这种uintptr的通常用途是打印它。</target>
        </trans-unit>
        <trans-unit id="0018fef4e5fd6fb8ccad98bd3a6b012fe3ed5ae1" translate="yes" xml:space="preserve">
          <source>Cookie returns the named cookie provided in the request or ErrNoCookie if not found. If multiple cookies match the given name, only one cookie will be returned.</source>
          <target state="translated">Cookie返回请求中提供的命名的Cookie,如果没有找到,则返回ErrNoCookie。如果多个cookie与给定的名称相匹配,将只返回一个cookie。</target>
        </trans-unit>
        <trans-unit id="6444e3dab3b536b14d051c8ddab84942f9d59bd8" translate="yes" xml:space="preserve">
          <source>Cookies implements the Cookies method of the http.CookieJar interface.</source>
          <target state="translated">Cookie实现了http.CookieJar接口的Cookies方法。</target>
        </trans-unit>
        <trans-unit id="26998c84ce084428cbc2c95f6c5034ef7327f4b6" translate="yes" xml:space="preserve">
          <source>Cookies parses and returns the HTTP cookies sent with the request.</source>
          <target state="translated">Cookies解析并返回随请求发送的HTTP cookies。</target>
        </trans-unit>
        <trans-unit id="d4ee61025f9549bad8b3c189b6b5351e6c5ca43e" translate="yes" xml:space="preserve">
          <source>Cookies parses and returns the cookies set in the Set-Cookie headers.</source>
          <target state="translated">Cookie解析并返回在Set-Cookie头中设置的Cookie。</target>
        </trans-unit>
        <trans-unit id="af74f7c5362aaee985bf8cda3dd75fc80751ce51" translate="yes" xml:space="preserve">
          <source>Copy</source>
          <target state="translated">Copy</target>
        </trans-unit>
        <trans-unit id="beb7d87db9d906cbb94fdddddfd16ebd8200101e" translate="yes" xml:space="preserve">
          <source>Copy copies from src to dst until either EOF is reached on src or an error occurs. It returns the number of bytes copied and the first error encountered while copying, if any.</source>
          <target state="translated">从src复制到dst,直到到达src的EOF或发生错误。它返回复制的字节数和复制时遇到的第一个错误(如果有)。</target>
        </trans-unit>
        <trans-unit id="0205f10e265d450db71d0231c94dcdd7ee2bcc22" translate="yes" xml:space="preserve">
          <source>Copy copies the contents of src into dst until either dst has been filled or src has been exhausted. It returns the number of elements copied. Dst and src each must have kind Slice or Array, and dst and src must have the same element type.</source>
          <target state="translated">复制src的内容到dst中,直到dst被填满或src被用完。它返回复制的元素数量。Dst 和 src 都必须有 Slice 或 Array 类型,并且 dst 和 src 必须有相同的元素类型。</target>
        </trans-unit>
        <trans-unit id="c25087d7936e391bf0bd9a9677daefa0a23fe1f1" translate="yes" xml:space="preserve">
          <source>Copy creates a new copy of CharData.</source>
          <target state="translated">复制创建CharData的新副本。</target>
        </trans-unit>
        <trans-unit id="7d2399aedb628cc2f8d794a248d5f004528fd643" translate="yes" xml:space="preserve">
          <source>Copy creates a new copy of Comment.</source>
          <target state="translated">复制创建评论的新副本。</target>
        </trans-unit>
        <trans-unit id="5521199a98d40388c239495432fdbee20e2c5e5a" translate="yes" xml:space="preserve">
          <source>Copy creates a new copy of Directive.</source>
          <target state="translated">复制创建Directive的新副本。</target>
        </trans-unit>
        <trans-unit id="214634d191d287336b71314070bded70f76703ef" translate="yes" xml:space="preserve">
          <source>Copy creates a new copy of ProcInst.</source>
          <target state="translated">复制创建一个ProcInst.的新副本。</target>
        </trans-unit>
        <trans-unit id="bac561e70b5c6132e566c02dab0a7d6e620b7ddf" translate="yes" xml:space="preserve">
          <source>Copy creates a new copy of StartElement.</source>
          <target state="translated">复制创建StartElement的新副本。</target>
        </trans-unit>
        <trans-unit id="348b21aa3d99a8eb531490f0d789fa2d48407193" translate="yes" xml:space="preserve">
          <source>Copy returns a copy of the Tree. Any parsing state is discarded.</source>
          <target state="translated">复制返回一个树的副本。任何解析状态都会被丢弃。</target>
        </trans-unit>
        <trans-unit id="b348613df7330d48a6b69a341a32bc0c4d80dfdd" translate="yes" xml:space="preserve">
          <source>Copy returns a new Regexp object copied from re. Calling Longest on one copy does not affect another.</source>
          <target state="translated">复制返回一个从re复制的新Regexp对象。在一个副本上调用Longest不会影响另一个副本。</target>
        </trans-unit>
        <trans-unit id="af6ad9f4b7202c4d4aa702fa0d11e6e42c64f298" translate="yes" xml:space="preserve">
          <source>Copy sets z to x, with the same precision, rounding mode, and accuracy as x, and returns z. x is not changed even if z and x are the same.</source>
          <target state="translated">复制将z设置为x,精度、四舍五入模式和准确度与x相同,并返回z,即使z和x相同,x也不会改变。</target>
        </trans-unit>
        <trans-unit id="f5c9b724b033d22904dbdaaf4685127002553b21" translate="yes" xml:space="preserve">
          <source>CopyBuffer</source>
          <target state="translated">CopyBuffer</target>
        </trans-unit>
        <trans-unit id="c080972ed295a6ebb4d7b3256e9d876139134f56" translate="yes" xml:space="preserve">
          <source>CopyBuffer is identical to Copy except that it stages through the provided buffer (if one is required) rather than allocating a temporary one. If buf is nil, one is allocated; otherwise if it has zero length, CopyBuffer panics.</source>
          <target state="translated">CopyBuffer与Copy相同,只是它对所提供的缓冲区(如果需要的话)进行分级,而不是分配一个临时缓冲区。如果buf为nil,则分配一个;否则如果buf长度为零,CopyBuffer就会惊慌失措。</target>
        </trans-unit>
        <trans-unit id="4b11eea990602e0e5d0830c823c94048f539c384" translate="yes" xml:space="preserve">
          <source>CopyBytesToGo copies bytes from src to dst. It panics if src is not an Uint8Array or Uint8ClampedArray. It returns the number of bytes copied, which will be the minimum of the lengths of src and dst.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a2ca5d029e1c6970f41b82af47bb9334769ec9" translate="yes" xml:space="preserve">
          <source>CopyBytesToGo copies bytes from the Uint8Array src to dst. It returns the number of bytes copied, which will be the minimum of the lengths of src and dst. CopyBytesToGo panics if src is not an Uint8Array.</source>
          <target state="translated">CopyBytesToGo 从 Uint8Array src 复制字节到 dst。它返回复制的字节数,它将是 src 和 dst 长度的最小值。如果src不是Uint8Array,CopyBytesToGo会感到恐慌。</target>
        </trans-unit>
        <trans-unit id="7e96ae95886f83419e39ea928bd56cf62b051cf9" translate="yes" xml:space="preserve">
          <source>CopyBytesToJS copies bytes from src to dst. It panics if dst is not an Uint8Array or Uint8ClampedArray. It returns the number of bytes copied, which will be the minimum of the lengths of src and dst.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573547021c7d36d69889e15a8a5f480e4cd25fc9" translate="yes" xml:space="preserve">
          <source>CopyBytesToJS copies bytes from src to the Uint8Array dst. It returns the number of bytes copied, which will be the minimum of the lengths of src and dst. CopyBytesToJS panics if dst is not an Uint8Array.</source>
          <target state="translated">CopyBytesToJS 从 src 复制字节到 Uint8Array dst。它返回复制的字节数,它将是src和dst长度的最小值。如果dst不是Uint8Array,CopyBytesToJS会感到恐慌。</target>
        </trans-unit>
        <trans-unit id="39f366d8412f678e42a26af03a84764a3832b915" translate="yes" xml:space="preserve">
          <source>CopyN</source>
          <target state="translated">CopyN</target>
        </trans-unit>
        <trans-unit id="13eabe7df064bd68331ec1a12076fce45e9a8949" translate="yes" xml:space="preserve">
          <source>CopyN copies n bytes (or until an error) from src to dst. It returns the number of bytes copied and the earliest error encountered while copying. On return, written == n if and only if err == nil.</source>
          <target state="translated">CopyN从src复制n个字节到dst(或直到发生错误)。它返回复制的字节数和复制时遇到的最早错误。返回时,如果且仅当err ==nil时,write ==n。</target>
        </trans-unit>
        <trans-unit id="4ea8264f41296a8535f3b62b02085fb7501b655e" translate="yes" xml:space="preserve">
          <source>CopyToken returns a copy of a Token.</source>
          <target state="translated">CopyToken 返回一个 Token 的副本。</target>
        </trans-unit>
        <trans-unit id="0e64d2479aee5c07df8f1c3541ef5c532e3faeb2" translate="yes" xml:space="preserve">
          <source>Copysign</source>
          <target state="translated">Copysign</target>
        </trans-unit>
        <trans-unit id="0e28ad46ee857280975524037035d0acdc5ccadd" translate="yes" xml:space="preserve">
          <source>Copysign returns a value with the magnitude of x and the sign of y.</source>
          <target state="translated">Copysign返回一个x的大小和y的符号的值。</target>
        </trans-unit>
        <trans-unit id="95b49c2102dc476ebba131d7df167779ccb26544" translate="yes" xml:space="preserve">
          <source>Cos</source>
          <target state="translated">Cos</target>
        </trans-unit>
        <trans-unit id="b17b655c0904cccb87f841850df53a8ab3c54287" translate="yes" xml:space="preserve">
          <source>Cos returns the cosine of the radian argument x.</source>
          <target state="translated">Cos 返回弧度参数 x 的余弦值。</target>
        </trans-unit>
        <trans-unit id="a29bcf5033d335ce37060453688404db858a88c0" translate="yes" xml:space="preserve">
          <source>Cos returns the cosine of x.</source>
          <target state="translated">Cos 返回 x 的余弦值。</target>
        </trans-unit>
        <trans-unit id="4b5b1efaa30aed45f32d083d3a9f4d02f9581898" translate="yes" xml:space="preserve">
          <source>Cosh</source>
          <target state="translated">Cosh</target>
        </trans-unit>
        <trans-unit id="7aea87b623bfac6726a31f524f1570268bf8bb6a" translate="yes" xml:space="preserve">
          <source>Cosh returns the hyperbolic cosine of x.</source>
          <target state="translated">Cosh 返回 x 的双曲余弦。</target>
        </trans-unit>
        <trans-unit id="3751692394bf977f68d6c8a2af76f83b39dcbe23" translate="yes" xml:space="preserve">
          <source>Cot returns the cotangent of x.</source>
          <target state="translated">Cot返回x的余切值。</target>
        </trans-unit>
        <trans-unit id="66e12969c225cc6d65e18210488acb826eba907e" translate="yes" xml:space="preserve">
          <source>Count</source>
          <target state="translated">Count</target>
        </trans-unit>
        <trans-unit id="1edea34aa8c9a40389f9082a08e14e29cd4eba14" translate="yes" xml:space="preserve">
          <source>Count counts the number of non-overlapping instances of sep in s. If sep is an empty slice, Count returns 1 + the number of UTF-8-encoded code points in s.</source>
          <target state="translated">Count计算sep在s中的非重叠实例数,如果sep是一个空片,Count返回1+s中UTF-8编码的码点数。</target>
        </trans-unit>
        <trans-unit id="2c7abecb94f08682b3b62e7992cd7849a1d85d24" translate="yes" xml:space="preserve">
          <source>Count counts the number of non-overlapping instances of substr in s. If substr is an empty string, Count returns 1 + the number of Unicode code points in s.</source>
          <target state="translated">如果substr是一个空字符串,Count返回1+s中Unicode码点的数量。</target>
        </trans-unit>
        <trans-unit id="41ab0173ab585bf8ee18604bba14b3111d20d350" translate="yes" xml:space="preserve">
          <source>Count returns the number of execution stacks currently in the profile.</source>
          <target state="translated">Count 返回当前配置文件中的执行堆栈数量。</target>
        </trans-unit>
        <trans-unit id="58c837e82670670080ba36b5dc5750591cb43079" translate="yes" xml:space="preserve">
          <source>Cover records information about test coverage checking. NOTE: This struct is internal to the testing infrastructure and may change. It is not covered (yet) by the Go 1 compatibility guidelines.</source>
          <target state="translated">Cover记录测试覆盖率检查的信息。注意:这个结构是测试基础设施的内部结构,可能会改变。Go 1 兼容性指南还没有涉及到它。</target>
        </trans-unit>
        <trans-unit id="be3f9c856b47a0e2f143dc72ed2fd31648da50af" translate="yes" xml:space="preserve">
          <source>CoverBlock records the coverage data for a single basic block. The fields are 1-indexed, as in an editor: The opening line of the file is number 1, for example. Columns are measured in bytes. NOTE: This struct is internal to the testing infrastructure and may change. It is not covered (yet) by the Go 1 compatibility guidelines.</source>
          <target state="translated">CoverBlock记录了单个基本块的覆盖数据。字段是以1为索引的,就像编辑器一样。例如,文件的起始行是1号。列是以字节为单位的。注意:这个结构是测试基础设施的内部结构,可能会发生变化。Go 1 兼容性指南没有涉及到它(还没有)。</target>
        </trans-unit>
        <trans-unit id="3d8612ba9657742f096cb1c88efe53acf35604d3" translate="yes" xml:space="preserve">
          <source>CoverMode reports what the test coverage mode is set to. The values are &quot;set&quot;, &quot;count&quot;, or &quot;atomic&quot;. The return value will be empty if test coverage is not enabled.</source>
          <target state="translated">CoverMode报告测试覆盖模式的设置。值是 &quot;set&quot;、&quot;count &quot;或 &quot;atomic&quot;。如果没有启用测试覆盖,则返回值为空。</target>
        </trans-unit>
        <trans-unit id="7b80d4e5292251354aefa94b883cdce6faedc160" translate="yes" xml:space="preserve">
          <source>Coverage reports the current code coverage as a fraction in the range [0, 1]. If coverage is not enabled, Coverage returns 0.</source>
          <target state="translated">Coverage以[0,1]范围内的分数报告当前代码覆盖率。如果没有启用覆盖率,覆盖率返回0。</target>
        </trans-unit>
        <trans-unit id="5be357b2b552293d3974bb945edcdd3d1f19d288" translate="yes" xml:space="preserve">
          <source>Create adds a file to the zip file using the provided name. It returns a Writer to which the file contents should be written. The file contents will be compressed using the Deflate method. The name must be a relative path: it must not start with a drive letter (e.g. C:) or leading slash, and only forward slashes are allowed. To create a directory instead of a file, add a trailing slash to the name. The file's contents must be written to the io.Writer before the next call to Create, CreateHeader, or Close.</source>
          <target state="translated">Create使用给定的名称在zip文件中添加一个文件。它返回一个写入文件内容的写入器。文件内容将使用Deflate方法进行压缩。文件名必须是一个相对路径:它不能以驱动器字母(例如C:)或前导斜杠开始,并且只允许使用前导斜杠。要创建一个目录而不是文件,请在名称中添加一个尾部斜杠。在下一次调用Create、CreateHeader或Close之前,文件的内容必须被写入io.Writer。</target>
        </trans-unit>
        <trans-unit id="b9ad0c9c5822dfd8e33287f85e0053746b9a1d8c" translate="yes" xml:space="preserve">
          <source>Create creates or truncates the named file. If the file already exists, it is truncated. If the file does not exist, it is created with mode 0666 (before umask). If successful, methods on the returned File can be used for I/O; the associated file descriptor has mode O_RDWR. If there is an error, it will be of type *PathError.</source>
          <target state="translated">创建创建或截断命名的文件。如果文件已经存在,则会被截断。如果文件不存在,则用模式0666(在umask之前)创建。如果成功,返回的File上的方法可以用于I/O;相关的文件描述符具有模式O_RDWR。如果出现错误,将是*PathError类型。</target>
        </trans-unit>
        <trans-unit id="1b465234e2012ae44b3245299f320c50140d6940" translate="yes" xml:space="preserve">
          <source>CreateCRL returns a DER encoded CRL, signed by this Certificate, that contains the given list of revoked certificates.</source>
          <target state="translated">CreateCRL返回一个DER编码的CRL,由这个证书签署,包含给定的废止证书列表。</target>
        </trans-unit>
        <trans-unit id="b8628c9b06db422c5fa609b650cab7ab2c9d7d80" translate="yes" xml:space="preserve">
          <source>CreateCertificate creates a new X.509v3 certificate based on a template. The following members of template are used:</source>
          <target state="translated">CreateCertificate基于模板创建一个新的X.509v3证书。使用模板的以下成员。</target>
        </trans-unit>
        <trans-unit id="73c01ccfb480001ffa3c411d49610d7de6487d44" translate="yes" xml:space="preserve">
          <source>CreateCertificateRequest creates a new certificate request based on a template. The following members of template are used:</source>
          <target state="translated">CreateCertificateRequest基于模板创建一个新的证书请求。使用模板的以下成员。</target>
        </trans-unit>
        <trans-unit id="0c10d1e701a1ded06204ed87d7c168c5ecc136a8" translate="yes" xml:space="preserve">
          <source>CreateFormField calls CreatePart with a header using the given field name.</source>
          <target state="translated">CreateFormField使用给定的字段名调用带有头的CreatePart。</target>
        </trans-unit>
        <trans-unit id="53037004a6a76e3b70492980878a44bda2d363cb" translate="yes" xml:space="preserve">
          <source>CreateFormFile is a convenience wrapper around CreatePart. It creates a new form-data header with the provided field name and file name.</source>
          <target state="translated">CreateFormFile是CreatePart的一个方便的包装器。它用提供的字段名和文件名创建一个新的表单数据头。</target>
        </trans-unit>
        <trans-unit id="9d1649722dbb1b219b1b7b37cdfc28c7f3c99574" translate="yes" xml:space="preserve">
          <source>CreateHeader adds a file to the zip archive using the provided FileHeader for the file metadata. Writer takes ownership of fh and may mutate its fields. The caller must not modify fh after calling CreateHeader.</source>
          <target state="translated">CreateHeader 使用提供的文件元数据 FileHeader 将文件添加到 zip 档案中。Writer拥有fh的所有权,并可以修改它的字段。调用者在调用CreateHeader后不能修改fh。</target>
        </trans-unit>
        <trans-unit id="3285ffa2e28574fc6f309813b4ff68aff6bdde1e" translate="yes" xml:space="preserve">
          <source>CreatePart creates a new multipart section with the provided header. The body of the part should be written to the returned Writer. After calling CreatePart, any previous part may no longer be written to.</source>
          <target state="translated">CreatePart用提供的头创建一个新的多部分部分。部分的主体应该被写入到返回的Writer中。在调用CreatePart后,任何之前的部分都不能再被写入。</target>
        </trans-unit>
        <trans-unit id="d63af3ed8d8a30604ee56038f3001e2db89c2338" translate="yes" xml:space="preserve">
          <source>CreateRevocationList creates a new X.509 v2 Certificate Revocation List, according to RFC 5280, based on template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34091775a3118cfa7b46c28c6c44f7f245fcac3d" translate="yes" xml:space="preserve">
          <source>CreateTemp</source>
          <target state="translated">CreateTemp</target>
        </trans-unit>
        <trans-unit id="68c6cf48d8b925a94d3f745c50a0fbacd47da35b" translate="yes" xml:space="preserve">
          <source>CreateTemp (Suffix)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b8aa4177a9e6bed453043acec790b156bc1251" translate="yes" xml:space="preserve">
          <source>CreateTemp creates a new temporary file in the directory dir, opens the file for reading and writing, and returns the resulting file. The filename is generated by taking pattern and adding a random string to the end. If pattern includes a &quot;*&quot;, the random string replaces the last &quot;*&quot;. If dir is the empty string, CreateTemp uses the default directory for temporary files, as returned by TempDir. Multiple programs or goroutines calling CreateTemp simultaneously will not choose the same file. The caller can use the file's Name method to find the pathname of the file. It is the caller's responsibility to remove the file when it is no longer needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14a50bbc334f201429fba3c65d621a9109ba53dd" translate="yes" xml:space="preserve">
          <source>Credential holds user and group identities to be assumed by a child process started by StartProcess.</source>
          <target state="translated">凭证拥有由StartProcess启动的子进程所要承担的用户和组身份。</target>
        </trans-unit>
        <trans-unit id="2387616d5263d298421004495f585b27c0b5f292" translate="yes" xml:space="preserve">
          <source>Crit logs a message with severity LOG_CRIT, ignoring the severity passed to New.</source>
          <target state="translated">Crit记录一条严重性为LOG_CRIT的消息,忽略传递给New的严重性。</target>
        </trans-unit>
        <trans-unit id="b00b9e8f709739fdb419a61ad788ae6cd5c543db" translate="yes" xml:space="preserve">
          <source>Ctz32 counts trailing (low-order) zeroes, and if all are zero, then 32.</source>
          <target state="translated">Ctz32对尾部(低阶)零进行计数,如果全部为零,则为32。</target>
        </trans-unit>
        <trans-unit id="93b80f5eb281e63bbdd5e4cb006c6e407851c617" translate="yes" xml:space="preserve">
          <source>Ctz64 counts trailing (low-order) zeroes, and if all are zero, then 64.</source>
          <target state="translated">Ctz64对尾部(低阶)零进行计数,如果全部为零,则为64。</target>
        </trans-unit>
        <trans-unit id="f360a645e3031852f77e3ee38c6b9e9ae5132853" translate="yes" xml:space="preserve">
          <source>Ctz8 returns the number of trailing zero bits in x; the result is 8 for x == 0.</source>
          <target state="translated">Ctz8返回x中的尾部零位数,对于x==0,结果是8。</target>
        </trans-unit>
        <trans-unit id="186a4ac4b5e83e7a09290593db86c1ac147b44e3" translate="yes" xml:space="preserve">
          <source>Current returns the current user.</source>
          <target state="translated">当前返回当前用户。</target>
        </trans-unit>
        <trans-unit id="046f17348f9f906b4db2ced159222fabbc9be2e8" translate="yes" xml:space="preserve">
          <source>Currently only the responder role is supported.</source>
          <target state="translated">目前只支持响应者角色。</target>
        </trans-unit>
        <trans-unit id="ddc0402f7a41556c97834c86c42fb8d452886c5f" translate="yes" xml:space="preserve">
          <source>Currently plugins are only supported on Linux and macOS. Please report any issues.</source>
          <target state="translated">目前插件只支持Linux和macOS。有任何问题请报告。</target>
        </trans-unit>
        <trans-unit id="e13e5636737ade36dde5edd323fb09d5656849a3" translate="yes" xml:space="preserve">
          <source>Currently plugins are only supported on Linux, FreeBSD, and macOS. Please report any issues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba7859fdac5d2aff950209f094dd563445b9cf8" translate="yes" xml:space="preserve">
          <source>CurveID is the type of a TLS identifier for an elliptic curve. See &lt;a href=&quot;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8&quot;&gt;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8&lt;/a&gt;.</source>
          <target state="translated">CurveID是椭圆曲线的TLS标识符的类型。参见&lt;a href=&quot;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8&quot;&gt;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="446785414e4504abe5ec1c9315a5bfdfeeaa65b9" translate="yes" xml:space="preserve">
          <source>CurveParams contains the parameters of an elliptic curve and also provides a generic, non-constant time implementation of Curve.</source>
          <target state="translated">CurveParams包含了椭圆曲线的参数,也提供了Curve的一个通用的、非恒定时间的实现。</target>
        </trans-unit>
        <trans-unit id="854ee953a12f6750d2f08f38118ba7df90d83bdc" translate="yes" xml:space="preserve">
          <source>DB is a database handle representing a pool of zero or more underlying connections. It's safe for concurrent use by multiple goroutines.</source>
          <target state="translated">DB是一个数据库句柄,代表零个或多个底层连接的池子。它对于多个goroutine的并发使用是安全的。</target>
        </trans-unit>
        <trans-unit id="2f09e7aa35471aff41600b45ae44cf426463a2f4" translate="yes" xml:space="preserve">
          <source>DB.BeginTx</source>
          <target state="translated">DB.BeginTx</target>
        </trans-unit>
        <trans-unit id="3438f449cf114423437931b85b59a20310743baa" translate="yes" xml:space="preserve">
          <source>DB.ExecContext</source>
          <target state="translated">DB.ExecContext</target>
        </trans-unit>
        <trans-unit id="4aef1f529992ef7bd420a755b7f2a4dc07114a5a" translate="yes" xml:space="preserve">
          <source>DB.PingContext</source>
          <target state="translated">DB.PingContext</target>
        </trans-unit>
        <trans-unit id="014f16301351fe7114ed2958ee3525ac47050c48" translate="yes" xml:space="preserve">
          <source>DB.Prepare</source>
          <target state="translated">DB.Prepare</target>
        </trans-unit>
        <trans-unit id="e1974d7b34d29bc8a688d9f9e7d5ec7d48b32785" translate="yes" xml:space="preserve">
          <source>DB.Query (MultipleResultSets)</source>
          <target state="translated">DB.Query (MultipleResultSets)</target>
        </trans-unit>
        <trans-unit id="3fac6432252b873f3e946e93a10e5043368270d0" translate="yes" xml:space="preserve">
          <source>DB.QueryContext</source>
          <target state="translated">DB.QueryContext</target>
        </trans-unit>
        <trans-unit id="c09ea214d64b802519f42c1121ca2d585ae10183" translate="yes" xml:space="preserve">
          <source>DB.QueryRowContext</source>
          <target state="translated">DB.QueryRowContext</target>
        </trans-unit>
        <trans-unit id="062f2d0e3b266bc2766487d180f93108c3093e01" translate="yes" xml:space="preserve">
          <source>DBStats contains database statistics.</source>
          <target state="translated">DBStats包含数据库统计数据。</target>
        </trans-unit>
        <trans-unit id="b22c78e263cb9da0783e024b9041b95e30c3fd7e" translate="yes" xml:space="preserve">
          <source>DEFLATE is suitable for transmitting compressed data across the network.</source>
          <target state="translated">DEFLATE适合在网络上传输压缩数据。</target>
        </trans-unit>
        <trans-unit id="6af7313c68e1a507942c8bee4f518b61d590aa88" translate="yes" xml:space="preserve">
          <source>DES is cryptographically broken and should not be used for secure applications.</source>
          <target state="translated">DES在密码学上是有缺陷的,不应该用于安全应用。</target>
        </trans-unit>
        <trans-unit id="a7c0828ff50d909531c4a019b63724f3f819cb6e" translate="yes" xml:space="preserve">
          <source>DNSConfigError represents an error reading the machine's DNS configuration. (No longer used; kept for compatibility.)</source>
          <target state="translated">DNSConfigError表示读取机器的DNS配置错误。(不再使用,保留是为了兼容。)</target>
        </trans-unit>
        <trans-unit id="0df21b6b932ef4553f314a2223c92a1fd8610f2a" translate="yes" xml:space="preserve">
          <source>DNSDoneInfo contains information about the results of a DNS lookup.</source>
          <target state="translated">DNSDoneInfo包含有关DNS查找结果的信息。</target>
        </trans-unit>
        <trans-unit id="bc71ea6ab70a230a454b764448619c3ce8a1b674" translate="yes" xml:space="preserve">
          <source>DNSError represents a DNS lookup error.</source>
          <target state="translated">DNSError表示DNS查找错误。</target>
        </trans-unit>
        <trans-unit id="e565458ee90bae74c1103c0b4dba206d05e11b0c" translate="yes" xml:space="preserve">
          <source>DNSStartInfo contains information about a DNS request.</source>
          <target state="translated">DNSStartInfo包含有关DNS请求的信息。</target>
        </trans-unit>
        <trans-unit id="bd1616e9afd3f1b8cb1bc3466e944671742326c0" translate="yes" xml:space="preserve">
          <source>DT_FLAGS values.</source>
          <target state="translated">DT_FLAGS值。</target>
        </trans-unit>
        <trans-unit id="eb9fd8102c5656418aee4dc0dab53238b17f6eec" translate="yes" xml:space="preserve">
          <source>DWARF returns the DWARF debug information for the Mach-O file.</source>
          <target state="translated">DWARF返回Mach-O文件的DWARF调试信息。</target>
        </trans-unit>
        <trans-unit id="44e21ef2fb7f3aeea7da384ee4026d7b21cfb109" translate="yes" xml:space="preserve">
          <source>DWARF version 4 distinguishes attribute value classes more finely than previous versions of DWARF. The reader will disambiguate coarser classes from earlier versions of DWARF into the appropriate DWARF 4 class. For example, DWARF 2 uses &quot;constant&quot; for constants as well as all types of section offsets, but the reader will canonicalize attributes in DWARF 2 files that refer to section offsets to one of the Class*Ptr classes, even though these classes were only defined in DWARF 3.</source>
          <target state="translated">DWARF第4版比以前的DWARF版本更精细地区分了属性值类。读者将把DWARF早期版本中较粗的类分解到相应的DWARF 4类中。例如,DWARF 2对常量以及所有类型的断面偏移都使用 &quot;常量&quot;,但读者将把DWARF 2文件中引用断面偏移的属性规范化为Class*Ptr类之一,尽管这些类在DWARF 3中才被定义。</target>
        </trans-unit>
        <trans-unit id="af1c6592f23da912c4adb4e08b65b073609bb89a" translate="yes" xml:space="preserve">
          <source>Data is found in Header.Ident[EI_DATA] and Header.Data.</source>
          <target state="translated">数据在Header.Ident[EI_DATA]和Header.Data中找到。</target>
        </trans-unit>
        <trans-unit id="13ca24289e70a941b8b696bdff0abf87b99534a8" translate="yes" xml:space="preserve">
          <source>Data issues a DATA command to the server and returns a writer that can be used to write the mail headers and body. The caller should close the writer before calling any more methods on c. A call to Data must be preceded by one or more calls to Rcpt.</source>
          <target state="translated">Data向服务器发出DATA命令,并返回一个可用于写入邮件头和正文的写入器。在调用c上的其他方法之前,调用者应该关闭写入器。对Data的调用必须先调用一个或多个Rcpt。</target>
        </trans-unit>
        <trans-unit id="c93ed1b3e1e4d4276c13585e691d22da36a26d7d" translate="yes" xml:space="preserve">
          <source>Data reads and returns the contents of the ELF section. Even if the section is stored compressed in the ELF file, Data returns uncompressed data.</source>
          <target state="translated">Data 读取并返回 ELF 部分的内容,即使该部分被压缩存储在 ELF 文件中,Data 也会返回未压缩的数据。即使该部分内容被压缩存储在ELF文件中,Data也会返回未压缩的数据。</target>
        </trans-unit>
        <trans-unit id="fb762c577e910ca34f7f6a619fca3236b8e65a78" translate="yes" xml:space="preserve">
          <source>Data reads and returns the contents of the Mach-O section.</source>
          <target state="translated">数据读取并返回Mach-O部分的内容。</target>
        </trans-unit>
        <trans-unit id="44cd1191853d4999e06b3841282ce1e62b05ad52" translate="yes" xml:space="preserve">
          <source>Data reads and returns the contents of the PE section s.</source>
          <target state="translated">数据读取并返回PE段s的内容。</target>
        </trans-unit>
        <trans-unit id="8d131a5630dfb89ad0914d47cac99e85517e0f18" translate="yes" xml:space="preserve">
          <source>Data reads and returns the contents of the Plan 9 a.out section.</source>
          <target state="translated">数据读取并返回计划9 a.out部分的内容。</target>
        </trans-unit>
        <trans-unit id="4e4adf3b85e43c16f7986aa10f34f35072f6eea1" translate="yes" xml:space="preserve">
          <source>Data reads and returns the contents of the segment.</source>
          <target state="translated">数据读取并返回该段的内容。</target>
        </trans-unit>
        <trans-unit id="9f79ddac999330fab22c9a79fd22e8012029e050" translate="yes" xml:space="preserve">
          <source>Data represents the DWARF debugging information loaded from an executable file (for example, an ELF or Mach-O executable).</source>
          <target state="translated">数据代表了从可执行文件(例如,ELF或Mach-O可执行文件)加载的DWARF调试信息。</target>
        </trans-unit>
        <trans-unit id="c6bc8adab78b04c6b3688d1e1ff626160d863530" translate="yes" xml:space="preserve">
          <source>DataErrReader changes the way errors are handled by a Reader. Normally, a Reader returns an error (typically EOF) from the first Read call after the last piece of data is read. DataErrReader wraps a Reader and changes its behavior so the final error is returned along with the final data, instead of in the first call after the final data.</source>
          <target state="translated">DataErrReader改变了Reader处理错误的方式。通常情况下,Reader会在读取完最后一块数据后的第一次Read调用中返回一个错误(通常是EOF)。DataErrReader封装了一个Reader,并改变了它的行为,因此最后的错误会和最后的数据一起返回,而不是在最后数据之后的第一次调用中返回。</target>
        </trans-unit>
        <trans-unit id="5eb9616bdfbeffc11e87fe7230443e52f6bea614" translate="yes" xml:space="preserve">
          <source>DataOffset returns the offset of the file's possibly-compressed data, relative to the beginning of the zip file.</source>
          <target state="translated">DataOffset 返回文件中可能被压缩的数据相对于 zip 文件开头的偏移量。</target>
        </trans-unit>
        <trans-unit id="e09d2f8039589d9ae6e6561e5dcd42da64f6928d" translate="yes" xml:space="preserve">
          <source>Database drivers may implement DriverContext for access to contexts and to parse the name only once for a pool of connections, instead of once per connection.</source>
          <target state="translated">数据库驱动程序可以实现DriverContext来访问上下文,并且对一个连接池只解析一次名称,而不是每个连接解析一次。</target>
        </trans-unit>
        <trans-unit id="73570fc5828e9254e320eeb24fbd8b1ead4beb2e" translate="yes" xml:space="preserve">
          <source>DatabaseTypeName returns the database system name of the column type. If an empty string is returned the driver type name is not supported. Consult your driver documentation for a list of driver data types. Length specifiers are not included. Common type include &quot;VARCHAR&quot;, &quot;TEXT&quot;, &quot;NVARCHAR&quot;, &quot;DECIMAL&quot;, &quot;BOOL&quot;, &quot;INT&quot;, &quot;BIGINT&quot;.</source>
          <target state="translated">DatabaseTypeName返回列类型的数据库系统名称。如果返回一个空字符串,则不支持驱动程序类型名称。请查阅您的驱动程序文档以获得驱动程序数据类型的列表。不包括长度指定器。常见的类型包括 &quot;VARCHAR&quot;、&quot;TEXT&quot;、&quot;NVARCHAR&quot;、&quot;DECIMAL&quot;、&quot;BOOL&quot;、&quot;INT&quot;、&quot;BIGINT&quot;。</target>
        </trans-unit>
        <trans-unit id="63fcacd015b5563886ac82e97060064408d120bb" translate="yes" xml:space="preserve">
          <source>DatabaseTypeName returns the database system name of the column type. If an empty string is returned, then the driver type name is not supported. Consult your driver documentation for a list of driver data types. Length specifiers are not included. Common type names include &quot;VARCHAR&quot;, &quot;TEXT&quot;, &quot;NVARCHAR&quot;, &quot;DECIMAL&quot;, &quot;BOOL&quot;, &quot;INT&quot;, and &quot;BIGINT&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="159c09d3aeadb72b1f5514f38a813eb4c5b0683a" translate="yes" xml:space="preserve">
          <source>Date panics if loc is nil.</source>
          <target state="translated">如果loc为nil,Date会惊慌失措。</target>
        </trans-unit>
        <trans-unit id="b8ae8791f875e5c0659aa843bd5208912c32d54d" translate="yes" xml:space="preserve">
          <source>Date parses the Date header field.</source>
          <target state="translated">Date解析日期头字段。</target>
        </trans-unit>
        <trans-unit id="7d0982177e2a17b0a887ab4e3c2bcc10514bc3a0" translate="yes" xml:space="preserve">
          <source>Date returns the Time corresponding to</source>
          <target state="translated">Date返回对应的时间。</target>
        </trans-unit>
        <trans-unit id="19811d3575925e21d39da4f63d5d36e7f8d5e6a6" translate="yes" xml:space="preserve">
          <source>Date returns the year, month, and day in which t occurs.</source>
          <target state="translated">Date返回t发生的年、月、日。</target>
        </trans-unit>
        <trans-unit id="51777aaad416543ccd0b64993945fa0970cfeed2" translate="yes" xml:space="preserve">
          <source>Day returns the day of the month specified by t.</source>
          <target state="translated">Day返回t指定的月份的一天。</target>
        </trans-unit>
        <trans-unit id="e2d32bd4b73e4ca6a3fbaa06924f8e5adf4021c4" translate="yes" xml:space="preserve">
          <source>Deadline reports the time at which the test binary will have exceeded the timeout specified by the -timeout flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b4ce5abf04cac4f6b56fb7b5ca2f32ee8f6950" translate="yes" xml:space="preserve">
          <source>DeadlineExceeded is the error returned by Context.Err when the context's deadline passes.</source>
          <target state="translated">DeadlineExceeded是Context.Err在上下文的deadline过后返回的错误。</target>
        </trans-unit>
        <trans-unit id="00dbeaa14d4aaefd27f0b729c8572efea591c54d" translate="yes" xml:space="preserve">
          <source>Debug logs a message with severity LOG_DEBUG, ignoring the severity passed to New.</source>
          <target state="translated">Debug记录一条严重性为LOG_DEBUG的消息,忽略传递给New的严重性。</target>
        </trans-unit>
        <trans-unit id="fcbfaca68a329233bc04528ed643e96af823c8d1" translate="yes" xml:space="preserve">
          <source>Debugging support</source>
          <target state="translated">调试支持</target>
        </trans-unit>
        <trans-unit id="290f9cdf409ce3485bc3ebf61922e97b96ab6dba" translate="yes" xml:space="preserve">
          <source>DecimalSize returns the scale and precision of a decimal type. If not applicable or if not supported ok is false.</source>
          <target state="translated">DecimalSize 返回小数类型的比例和精度。如果不适用或不支持ok则返回false。</target>
        </trans-unit>
        <trans-unit id="df50d3b937b66b95438db0baeefd22f2c1fa73b6" translate="yes" xml:space="preserve">
          <source>Decode</source>
          <target state="translated">Decode</target>
        </trans-unit>
        <trans-unit id="2191bd1edaed1f948c446e5e5051b352674263c5" translate="yes" xml:space="preserve">
          <source>Decode decodes an RFC 2047 encoded-word.</source>
          <target state="translated">Decode解码一个RFC 2047编码字。</target>
        </trans-unit>
        <trans-unit id="c663a98c9ac4bdfaf7570d06109ce1220330af72" translate="yes" xml:space="preserve">
          <source>Decode decodes an image that has been encoded in a registered format. The string returned is the format name used during format registration. Format registration is typically done by an init function in the codec- specific package.</source>
          <target state="translated">Decode 解码已经以注册格式编码的图像。返回的字符串是在格式注册期间使用的格式名称。格式注册通常由编解码器特定包中的 init 函数完成。</target>
        </trans-unit>
        <trans-unit id="be2862aea68bddc3797cc61a25b04a065153d058" translate="yes" xml:space="preserve">
          <source>Decode decodes src into DecodedLen(len(src)) bytes, returning the actual number of bytes written to dst.</source>
          <target state="translated">Decode将src解码成DecodedLen(len(src))字节,返回写入dst的实际字节数。</target>
        </trans-unit>
        <trans-unit id="9459e2df37f9d7b79d9c22b47888407d5cae69bd" translate="yes" xml:space="preserve">
          <source>Decode decodes src into dst, returning both the number of bytes written to dst and the number consumed from src. If src contains invalid ascii85 data, Decode will return the number of bytes successfully written and a CorruptInputError. Decode ignores space and control characters in src. Often, ascii85-encoded data is wrapped in &amp;lt;~ and ~&amp;gt; symbols. Decode expects these to have been stripped by the caller.</source>
          <target state="translated">解码将src解码为dst，同时返回写入dst的字节数和从src消耗的数。如果src包含无效的ascii85数据，则Decode将返回成功写入的字节数和CorruptInputError。解码会忽略src中的空格和控制字符。通常，ASCII85编码的数据用&amp;lt;〜和〜&amp;gt;符号包装。解码期望这些已被调用方剥离。</target>
        </trans-unit>
        <trans-unit id="f4e08a18b5e0596336160230bc4fa0088423d426" translate="yes" xml:space="preserve">
          <source>Decode decodes src using the encoding enc. It writes at most DecodedLen(len(src)) bytes to dst and returns the number of bytes written. If src contains invalid base32 data, it will return the number of bytes successfully written and CorruptInputError. New line characters (\r and \n) are ignored.</source>
          <target state="translated">Decode 使用 encoding 解码 src。它最多向 dst 写入 DecodedLen(len(src))字节,并返回写入的字节数。如果 src 包含无效的 base32 数据,它将返回成功写入的字节数和 CorruptInputError。新的行字符(\r和\n)会被忽略。</target>
        </trans-unit>
        <trans-unit id="49467dca1e0d0001bc71fa1ac5e9147e30acd4c0" translate="yes" xml:space="preserve">
          <source>Decode decodes src using the encoding enc. It writes at most DecodedLen(len(src)) bytes to dst and returns the number of bytes written. If src contains invalid base64 data, it will return the number of bytes successfully written and CorruptInputError. New line characters (\r and \n) are ignored.</source>
          <target state="translated">Decode 使用 encoding 解码 src。它最多向 dst 写入 DecodedLen(len(src))字节,并返回写入的字节数。如果 src 包含无效的 base64 数据,它将返回成功写入的字节数和 CorruptInputError。新的行字符(\r和\n)会被忽略。</target>
        </trans-unit>
        <trans-unit id="0f1335189afa4a7c6f3ae9a3d92e18b92bfef1e8" translate="yes" xml:space="preserve">
          <source>Decode expects that src contains only hexadecimal characters and that src has even length. If the input is malformed, Decode returns the number of bytes decoded before the error.</source>
          <target state="translated">Decode期望src只包含十六进制字符,并且src的长度是偶数。如果输入是畸形的,Decode会返回错误前解码的字节数。</target>
        </trans-unit>
        <trans-unit id="800876565052483ae20792dbb4cd593c7c3b8846" translate="yes" xml:space="preserve">
          <source>Decode reads a GIF image from r and returns the first embedded image as an image.Image.</source>
          <target state="translated">Decode从r中读取一个GIF图像,并以image.Image的形式返回第一个嵌入的图像。</target>
        </trans-unit>
        <trans-unit id="cbac39d9a826fbc5afe7154ac34bd2df498566b4" translate="yes" xml:space="preserve">
          <source>Decode reads a JPEG image from r and returns it as an image.Image.</source>
          <target state="translated">Decode从r中读取JPEG图像,并以image.Image的形式返回。</target>
        </trans-unit>
        <trans-unit id="1e54593218bc1af392b920a78974a97581bf2c1c" translate="yes" xml:space="preserve">
          <source>Decode reads a PNG image from r and returns it as an image.Image. The type of Image returned depends on the PNG contents.</source>
          <target state="translated">Decode从r中读取一个PNG图像,并以image.Image的形式返回。返回的Image类型取决于PNG内容。</target>
        </trans-unit>
        <trans-unit id="fd5abcbefea9089a4ce5a4a52a242638dfec04e7" translate="yes" xml:space="preserve">
          <source>Decode reads the next JSON-encoded value from its input and stores it in the value pointed to by v.</source>
          <target state="translated">Decode从其输入中读取下一个JSON编码的值,并将其存储在v指向的值中。</target>
        </trans-unit>
        <trans-unit id="9d1df86160a0f777c4ef84d3e5e05362d86ed78c" translate="yes" xml:space="preserve">
          <source>Decode reads the next value from the input stream and stores it in the data represented by the empty interface value. If e is nil, the value will be discarded. Otherwise, the value underlying e must be a pointer to the correct type for the next data item received. If the input is at EOF, Decode returns io.EOF and does not modify e.</source>
          <target state="translated">Decode从输入流中读取下一个值,并将其存储在空接口值所代表的数据中。如果e为nil,该值将被丢弃。否则,e所代表的值必须是指向下一个接收数据项的正确类型的指针。如果输入处于EOF,Decode将返回io.EOF,并且不修改e。</target>
        </trans-unit>
        <trans-unit id="24fe9f25ab1a2483c4e260dc7fcba6455fbea3ba" translate="yes" xml:space="preserve">
          <source>Decode returns the Unicode code point sequence represented by the UTF-16 encoding s.</source>
          <target state="translated">Decode返回由UTF-16编码s表示的Unicode码点序列。</target>
        </trans-unit>
        <trans-unit id="f00520e26a1f23f03c003d00547bb432a3a235dc" translate="yes" xml:space="preserve">
          <source>Decode will find the next PEM formatted block (certificate, private key etc) in the input. It returns that block and the remainder of the input. If no PEM data is found, p is nil and the whole of the input is returned in rest.</source>
          <target state="translated">Decode 将在输入中找到下一个 PEM 格式的块(证书、私钥等)。它返回该块和输入的其余部分。如果没有找到PEM数据,则p为零,返回整个输入的剩余部分。</target>
        </trans-unit>
        <trans-unit id="6b302987dc20b61b9749892b479e69a5e336abe4" translate="yes" xml:space="preserve">
          <source>Decode works like Unmarshal, except it reads the decoder stream to find the start element.</source>
          <target state="translated">Decode的工作原理和Unmarshal一样,只是它读取解码流来寻找起始元素。</target>
        </trans-unit>
        <trans-unit id="30e37be960ab676eab0d765515fe1771dae55149" translate="yes" xml:space="preserve">
          <source>DecodeAll reads a GIF image from r and returns the sequential frames and timing information.</source>
          <target state="translated">DecodeAll从r中读取一个GIF图像,并返回顺序帧和时间信息。</target>
        </trans-unit>
        <trans-unit id="f4e7173f24924751aa452948d7c6dfbb2edeac9e" translate="yes" xml:space="preserve">
          <source>DecodeConfig decodes the color model and dimensions of an image that has been encoded in a registered format. The string returned is the format name used during format registration. Format registration is typically done by an init function in the codec-specific package.</source>
          <target state="translated">DecodeConfig 解码已经以注册格式编码的图像的颜色模型和尺寸。返回的字符串是在格式注册期间使用的格式名称。格式注册通常由编解码器专用包中的init函数完成。</target>
        </trans-unit>
        <trans-unit id="b9adb0fd972eb06c032b93d684f65d570cdcabda" translate="yes" xml:space="preserve">
          <source>DecodeConfig returns the color model and dimensions of a JPEG image without decoding the entire image.</source>
          <target state="translated">DecodeConfig在不解码整个图像的情况下返回JPEG图像的颜色模型和尺寸。</target>
        </trans-unit>
        <trans-unit id="d3a5c1fae5c349d3734ae4489d6aecc2426c5ac7" translate="yes" xml:space="preserve">
          <source>DecodeConfig returns the color model and dimensions of a PNG image without decoding the entire image.</source>
          <target state="translated">DecodeConfig返回PNG图像的颜色模型和尺寸,而无需解码整个图像。</target>
        </trans-unit>
        <trans-unit id="cbf91fca372aef697adf69e21434c0270fdba345" translate="yes" xml:space="preserve">
          <source>DecodeConfig returns the global color model and dimensions of a GIF image without decoding the entire image.</source>
          <target state="translated">DecodeConfig返回GIF图像的全局颜色模型和尺寸,而无需解码整个图像。</target>
        </trans-unit>
        <trans-unit id="a1eb5cc06614fd4437a26a4a1653271c12295a5e" translate="yes" xml:space="preserve">
          <source>DecodeElement works like Unmarshal except that it takes a pointer to the start XML element to decode into v. It is useful when a client reads some raw XML tokens itself but also wants to defer to Unmarshal for some elements.</source>
          <target state="translated">DecodeElement的工作原理和Unmarshal一样,只是它需要一个指向起始XML元素的指针来解码成v,当客户端自己读取一些原始的XML tokens,但又想把一些元素交给Unmarshal时,它就很有用。</target>
        </trans-unit>
        <trans-unit id="16713e78705fc06f8e05be74c5067eb69b310b90" translate="yes" xml:space="preserve">
          <source>DecodeHeader decodes all encoded-words of the given string. It returns an error if and only if CharsetReader of d returns an error.</source>
          <target state="translated">DecodeHeader 解码给定字符串的所有编码字,如果且仅当 d 的 CharsetReader 返回错误时,它才返回错误。如果且仅当d的CharsetReader返回错误时,它才会返回错误。</target>
        </trans-unit>
        <trans-unit id="b8e172ef50e9276e57b5335bf4faa51bee2741d8" translate="yes" xml:space="preserve">
          <source>DecodeLastRune</source>
          <target state="translated">DecodeLastRune</target>
        </trans-unit>
        <trans-unit id="3ae3ba953157b1585814d3fce39e0a50852e7948" translate="yes" xml:space="preserve">
          <source>DecodeLastRune unpacks the last UTF-8 encoding in p and returns the rune and its width in bytes. If p is empty it returns (RuneError, 0). Otherwise, if the encoding is invalid, it returns (RuneError, 1). Both are impossible results for correct, non-empty UTF-8.</source>
          <target state="translated">DecodeLastRune解开p中最后一个UTF-8编码,并返回符文和它的宽度,单位是字节。如果p为空,则返回(RuneError,0)。否则,如果编码无效,则返回(RuneError,1)。对于正确的、非空的UTF-8,这两种结果都是不可能的。</target>
        </trans-unit>
        <trans-unit id="5bc57e376dc0f134c4bfab7438a8b69c1e50c7e0" translate="yes" xml:space="preserve">
          <source>DecodeLastRuneInString</source>
          <target state="translated">DecodeLastRuneInString</target>
        </trans-unit>
        <trans-unit id="a8a8169059d7047067fb3a3b04fe37855654bbaa" translate="yes" xml:space="preserve">
          <source>DecodeLastRuneInString is like DecodeLastRune but its input is a string. If s is empty it returns (RuneError, 0). Otherwise, if the encoding is invalid, it returns (RuneError, 1). Both are impossible results for correct, non-empty UTF-8.</source>
          <target state="translated">DecodeLastRuneInString与DecodeLastRune类似,但它的输入是一个字符串。如果s为空,则返回(RuneError,0)。否则,如果编码无效,它返回(RuneError,1)。对于正确的、非空的UTF-8来说,这两种结果都是不可能的。</target>
        </trans-unit>
        <trans-unit id="0c840a2944c7b78051c2f4d24c001bb3db7586d2" translate="yes" xml:space="preserve">
          <source>DecodeRune</source>
          <target state="translated">DecodeRune</target>
        </trans-unit>
        <trans-unit id="ebe1a4295199ea56faf52e25cbf7c1b995fb5581" translate="yes" xml:space="preserve">
          <source>DecodeRune returns the UTF-16 decoding of a surrogate pair. If the pair is not a valid UTF-16 surrogate pair, DecodeRune returns the Unicode replacement code point U+FFFD.</source>
          <target state="translated">DecodeRune返回一个代理对的UTF-16解码。如果该对不是有效的UTF-16代用对,DecodeRune返回Unicode替换码点U+FFFD。</target>
        </trans-unit>
        <trans-unit id="1cf3960cee32acc9ec4f47da069c9ab188d23f22" translate="yes" xml:space="preserve">
          <source>DecodeRune unpacks the first UTF-8 encoding in p and returns the rune and its width in bytes. If p is empty it returns (RuneError, 0). Otherwise, if the encoding is invalid, it returns (RuneError, 1). Both are impossible results for correct, non-empty UTF-8.</source>
          <target state="translated">DecodeRune解开p中的第一个UTF-8编码,并返回符文和它的宽度(字节)。如果p为空,则返回(RuneError,0)。否则,如果编码无效,则返回(RuneError,1)。对于正确的、非空的UTF-8,这两种结果都是不可能的。</target>
        </trans-unit>
        <trans-unit id="88cfb2ee82f7d9405832cfa50700196812107d51" translate="yes" xml:space="preserve">
          <source>DecodeRuneInString</source>
          <target state="translated">DecodeRuneInString</target>
        </trans-unit>
        <trans-unit id="4d4647dc4c9636993df78e7b7af6c3ed7bc1b87f" translate="yes" xml:space="preserve">
          <source>DecodeRuneInString is like DecodeRune but its input is a string. If s is empty it returns (RuneError, 0). Otherwise, if the encoding is invalid, it returns (RuneError, 1). Both are impossible results for correct, non-empty UTF-8.</source>
          <target state="translated">DecodeRuneInString与DecodeRune类似,但它的输入是一个字符串。如果s为空,则返回(RuneError,0)。否则,如果编码无效,它返回(RuneError,1)。对于正确的、非空的UTF-8来说,这两个结果都是不可能的。</target>
        </trans-unit>
        <trans-unit id="745e8eb6ad128aef996ff9d7b991cd3156884887" translate="yes" xml:space="preserve">
          <source>DecodeString</source>
          <target state="translated">DecodeString</target>
        </trans-unit>
        <trans-unit id="a2995ec38a1c149f49a43c3725e4ad8ab6ccd917" translate="yes" xml:space="preserve">
          <source>DecodeString expects that src contains only hexadecimal characters and that src has even length. If the input is malformed, DecodeString returns the bytes decoded before the error.</source>
          <target state="translated">DecodeString期望src只包含十六进制字符,并且src的长度是偶数。如果输入是畸形的,DecodeString会返回错误前的解码字节。</target>
        </trans-unit>
        <trans-unit id="28b43cb23d14fc7963d139c1d5ae99c19fcc2059" translate="yes" xml:space="preserve">
          <source>DecodeString returns the bytes represented by the base32 string s.</source>
          <target state="translated">DecodeString返回base32字符串s所代表的字节。</target>
        </trans-unit>
        <trans-unit id="bf0c084f0da6a7f9bfbaeea805ea061f148fa74e" translate="yes" xml:space="preserve">
          <source>DecodeString returns the bytes represented by the base64 string s.</source>
          <target state="translated">DecodeString返回base64字符串s所代表的字节。</target>
        </trans-unit>
        <trans-unit id="56ca5d4a132d23d7b5bfe286e9414cf1733e1fd7" translate="yes" xml:space="preserve">
          <source>DecodeString returns the bytes represented by the hexadecimal string s.</source>
          <target state="translated">DecodeString返回十六进制字符串s所代表的字节。</target>
        </trans-unit>
        <trans-unit id="673f927f28506c494b47dc9326f68e21fe962028" translate="yes" xml:space="preserve">
          <source>DecodeValue reads the next value from the input stream. If v is the zero reflect.Value (v.Kind() == Invalid), DecodeValue discards the value. Otherwise, it stores the value into v. In that case, v must represent a non-nil pointer to data or be an assignable reflect.Value (v.CanSet()) If the input is at EOF, DecodeValue returns io.EOF and does not modify v.</source>
          <target state="translated">DecodeValue从输入流中读取下一个值。如果v是零的reflect.Value(v.Kind()==Invalid),DecodeValue会丢弃该值。在这种情况下,v必须代表一个非零的数据指针,或者是一个可分配的reflect.Value(v.CanSet())如果输入处于EOF,DecodeValue返回io.EOF,并且不修改v。</target>
        </trans-unit>
        <trans-unit id="2ee37cdba307bd5c5065d5683f7caa610723e58f" translate="yes" xml:space="preserve">
          <source>DecodedLen returns the length of a decoding of x source bytes. Specifically, it returns x / 2.</source>
          <target state="translated">DecodedLen 返回 x 个源字节的解码长度。具体来说,它返回x/2。</target>
        </trans-unit>
        <trans-unit id="be5f0b99888068a2482a86b50382454ef22b14f5" translate="yes" xml:space="preserve">
          <source>DecodedLen returns the maximum length in bytes of the decoded data corresponding to n bytes of base32-encoded data.</source>
          <target state="translated">DecodedLen 返回与 n 个 base32 编码数据字节相对应的解码数据的最大长度,以字节为单位。</target>
        </trans-unit>
        <trans-unit id="f6813385272ace1ce0fb064215644848699dad2c" translate="yes" xml:space="preserve">
          <source>DecodedLen returns the maximum length in bytes of the decoded data corresponding to n bytes of base64-encoded data.</source>
          <target state="translated">DecodedLen 返回与 n 个 base64 编码数据字节相对应的解码数据的最大长度,以字节为单位。</target>
        </trans-unit>
        <trans-unit id="7be2f0f143224d91c1d79bb0d11cb4d0a2c69cde" translate="yes" xml:space="preserve">
          <source>Decoder</source>
          <target state="translated">Decoder</target>
        </trans-unit>
        <trans-unit id="996bd0771aab35e5131c87bd200dc9468eb01de6" translate="yes" xml:space="preserve">
          <source>Decoder.Decode (Stream)</source>
          <target state="translated">Decoder.Decode (Stream)</target>
        </trans-unit>
        <trans-unit id="faf9a389ba774205e867958c9afe08f731ca89bb" translate="yes" xml:space="preserve">
          <source>Decoder.Token</source>
          <target state="translated">Decoder.Token</target>
        </trans-unit>
        <trans-unit id="db7ab43dcdcfcb47bfa27b64166db401a89736c7" translate="yes" xml:space="preserve">
          <source>DecodingError represents an error during the decoding of the symbol table.</source>
          <target state="translated">DecodingError表示符号表解码过程中的错误。</target>
        </trans-unit>
        <trans-unit id="0b94875d5ae7b9c3094dfb94beb7d5de130a33ce" translate="yes" xml:space="preserve">
          <source>Decrypt decrypts ciphertext with priv. If opts is nil or of type *PKCS1v15DecryptOptions then PKCS #1 v1.5 decryption is performed. Otherwise opts must have type *OAEPOptions and OAEP decryption is done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48dcf05d5aa284e84069d30f83d263bbffd81d4e" translate="yes" xml:space="preserve">
          <source>Decrypt decrypts ciphertext with priv. If opts is nil or of type *PKCS1v15DecryptOptions then PKCS#1 v1.5 decryption is performed. Otherwise opts must have type *OAEPOptions and OAEP decryption is done.</source>
          <target state="translated">Decrypt用priv来解密密文,如果opts为nil或类型为*PKCS1v15DecryptOptions则PKCS#1 v1.5解密。如果opts为nil或类型为*PKCS1v15DecryptOptions,则进行PKCS#1 v1.5解密。否则opts必须具有类型*OAEPOptions,则进行OAEP解密。</target>
        </trans-unit>
        <trans-unit id="c8fb78d92446f4f89c55adea7b4c51873a0fe712" translate="yes" xml:space="preserve">
          <source>DecryptOAEP</source>
          <target state="translated">DecryptOAEP</target>
        </trans-unit>
        <trans-unit id="0cd489336e048225cfa022050936a5c58e2960d4" translate="yes" xml:space="preserve">
          <source>DecryptOAEP decrypts ciphertext using RSA-OAEP.</source>
          <target state="translated">DecryptOAEP使用RSA-OAEP对密文进行解密。</target>
        </trans-unit>
        <trans-unit id="052fed569d880a6f3034187aa5ce4b4d686dc573" translate="yes" xml:space="preserve">
          <source>DecryptPEMBlock takes a PEM block encrypted according to RFC 1423 and the password used to encrypt it and returns a slice of decrypted DER encoded bytes. It inspects the DEK-Info header to determine the algorithm used for decryption. If no DEK-Info header is present, an error is returned. If an incorrect password is detected an IncorrectPasswordError is returned. Because of deficiencies in the format, it's not always possible to detect an incorrect password. In these cases no error will be returned but the decrypted DER bytes will be random noise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32272700b3ba6f69208e5dfe18a0bcc77bf36bf3" translate="yes" xml:space="preserve">
          <source>DecryptPEMBlock takes a password encrypted PEM block and the password used to encrypt it and returns a slice of decrypted DER encoded bytes. It inspects the DEK-Info header to determine the algorithm used for decryption. If no DEK-Info header is present, an error is returned. If an incorrect password is detected an IncorrectPasswordError is returned. Because of deficiencies in the encrypted-PEM format, it's not always possible to detect an incorrect password. In these cases no error will be returned but the decrypted DER bytes will be random noise.</source>
          <target state="translated">DecryptPEMBlock接收一个密码加密的PEM块和用于加密它的密码,并返回一片解密的DER编码字节。它检查DEK-Info头以确定用于解密的算法。如果没有DEK-Info头,将返回一个错误。如果检测到密码不正确,则返回IncorrectPasswordError。由于加密的PEM格式的缺陷,并不总是能够检测到错误的密码。在这种情况下,不会返回错误,但解密后的DER字节将是随机噪声。</target>
        </trans-unit>
        <trans-unit id="8267792c1d86b133c1f8480a3f569d09faf980b4" translate="yes" xml:space="preserve">
          <source>DecryptPKCS1v15 decrypts a plaintext using RSA and the padding scheme from PKCS #1 v1.5. If rand != nil, it uses RSA blinding to avoid timing side-channel attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ec5d72084471d9fb9aaf2dccd71a7a1ffbaa60" translate="yes" xml:space="preserve">
          <source>DecryptPKCS1v15 decrypts a plaintext using RSA and the padding scheme from PKCS#1 v1.5. If rand != nil, it uses RSA blinding to avoid timing side-channel attacks.</source>
          <target state="translated">DecryptPKCS1v15 使用 RSA 和 PKCS#1 v1.5 的 padding 方案解密明文。如果 rand !=nil,则使用 RSA blinding 来避免定时侧通道攻击。</target>
        </trans-unit>
        <trans-unit id="1723fb53bff3596074c056ebc7f6bdfb8a16cfcd" translate="yes" xml:space="preserve">
          <source>DecryptPKCS1v15SessionKey</source>
          <target state="translated">DecryptPKCS1v15SessionKey</target>
        </trans-unit>
        <trans-unit id="24a8f2fc9c60d6d24ff8cc8415c7c8b3fa33528f" translate="yes" xml:space="preserve">
          <source>DecryptPKCS1v15SessionKey decrypts a session key using RSA and the padding scheme from PKCS #1 v1.5. If rand != nil, it uses RSA blinding to avoid timing side-channel attacks. It returns an error if the ciphertext is the wrong length or if the ciphertext is greater than the public modulus. Otherwise, no error is returned. If the padding is valid, the resulting plaintext message is copied into key. Otherwise, key is unchanged. These alternatives occur in constant time. It is intended that the user of this function generate a random session key beforehand and continue the protocol with the resulting value. This will remove any possibility that an attacker can learn any information about the plaintext. See &amp;ldquo;Chosen Ciphertext Attacks Against Protocols Based on the RSA Encryption Standard PKCS #1&amp;rdquo;, Daniel Bleichenbacher, Advances in Cryptology (Crypto '98).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5034a4dbba2441d68b5bba30749025b8a62d6758" translate="yes" xml:space="preserve">
          <source>DecryptPKCS1v15SessionKey decrypts a session key using RSA and the padding scheme from PKCS#1 v1.5. If rand != nil, it uses RSA blinding to avoid timing side-channel attacks. It returns an error if the ciphertext is the wrong length or if the ciphertext is greater than the public modulus. Otherwise, no error is returned. If the padding is valid, the resulting plaintext message is copied into key. Otherwise, key is unchanged. These alternatives occur in constant time. It is intended that the user of this function generate a random session key beforehand and continue the protocol with the resulting value. This will remove any possibility that an attacker can learn any information about the plaintext. See &amp;ldquo;Chosen Ciphertext Attacks Against Protocols Based on the RSA Encryption Standard PKCS #1&amp;rdquo;, Daniel Bleichenbacher, Advances in Cryptology (Crypto '98).</source>
          <target state="translated">DecryptPKCS1v15SessionKey使用RSA和PKCS＃1 v1.5中的填充方案解密会话密钥。如果rand！= nil，则使用RSA盲法来避免定时侧信道攻击。如果密文长度错误或密文大于公共模数，则返回错误。否则，不会返回任何错误。如果填充有效，则将产生的纯文本消息复制到密钥中。否则，密钥不变。这些替代方案会在固定时间内发生。希望该功能的用户预先生成一个随机会话密钥，并使用结果值继续执行协议。这将消除攻击者可以了解有关纯文本的任何信息的可能性。请参阅&amp;ldquo;针对基于RSA加密标准PKCS＃1的协议进行的密文攻击&amp;rdquo;，Daniel Bleichenbacher，密码学的进展（Crypto '98）。</target>
        </trans-unit>
        <trans-unit id="42a6dfe4c2e189c8de29f15cddcf7cf9dba25238" translate="yes" xml:space="preserve">
          <source>Decrypter is an interface for an opaque private key that can be used for asymmetric decryption operations. An example would be an RSA key kept in a hardware module.</source>
          <target state="translated">解密器是一个不透明的私钥的接口,可以用于非对称解密操作。一个例子是保存在硬件模块中的RSA密钥。</target>
        </trans-unit>
        <trans-unit id="b7ae957644bea42b7ff65d51f99ce49cb83fd388" translate="yes" xml:space="preserve">
          <source>DeepEqual reports whether x and y are &amp;ldquo;deeply equal,&amp;rdquo; defined as follows. Two values of identical type are deeply equal if one of the following cases applies. Values of distinct types are never deeply equal.</source>
          <target state="translated">DeepEqual报告x和y是否&amp;ldquo;深度相等&amp;rdquo;，定义如下。如果满足以下情况之一，则两个相同类型的值将完全相等。不同类型的值永远不会完全相等。</target>
        </trans-unit>
        <trans-unit id="d88594116663c9d491607d208f07eaf0d91b8568" translate="yes" xml:space="preserve">
          <source>DefPredeclaredTestFuncs defines the assert and trace built-ins. These built-ins are intended for debugging and testing of this package only.</source>
          <target state="translated">DefPredeclaredTestFuncs定义了断言和跟踪内建。这些内建模块只用于调试和测试这个软件包。</target>
        </trans-unit>
        <trans-unit id="a034168ac1ac48bea6ed331fcaa43cff83c78c4c" translate="yes" xml:space="preserve">
          <source>Default behavior of signals in Go programs</source>
          <target state="translated">围棋程序中信号的默认行为</target>
        </trans-unit>
        <trans-unit id="5a5930ff9b687f979b109248d33bd87544c6441a" translate="yes" xml:space="preserve">
          <source>Default is the default Context for builds. It uses the GOARCH, GOOS, GOROOT, and GOPATH environment variables if set, or else the compiled code's GOARCH, GOOS, and GOROOT.</source>
          <target state="translated">Default是构建的默认Context。它使用GOARCH、GOOS、GOROOT和GOPATH环境变量(如果设置了),或者使用编译后的GOARCH、GOOS和GOROOT。</target>
        </trans-unit>
        <trans-unit id="72e5e6d9fc404c78f1caf70dbc4a96064e7c0a25" translate="yes" xml:space="preserve">
          <source>Default returns an Importer for the compiler that built the running binary. If available, the result implements types.ImporterFrom.</source>
          <target state="translated">默认情况下,返回一个编译器的Importer,该编译器构建了运行中的二进制文件。如果可用,结果会实现types.ImporterFrom.ImporterFrom。</target>
        </trans-unit>
        <trans-unit id="ec9d9531a88729b86031d49234703db1873e5fde" translate="yes" xml:space="preserve">
          <source>Default returns the default &quot;typed&quot; type for an &quot;untyped&quot; type; it returns the incoming type for all other types. The default type for untyped nil is untyped nil.</source>
          <target state="translated">Default为 &quot;untyped &quot;类型返回默认的 &quot;typeed &quot;类型;它为所有其他类型返回传入类型。untyped nil的默认类型是untyped nil。</target>
        </trans-unit>
        <trans-unit id="03402f50cbd0c054032296349c3ecbddda6dc154" translate="yes" xml:space="preserve">
          <source>Default returns the standard logger used by the package-level output functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32a9ab63a855b6d134feb2b19c4b8ed98d5511f" translate="yes" xml:space="preserve">
          <source>DefaultClient is the default Client and is used by Get, Head, and Post.</source>
          <target state="translated">DefaultClient是默认客户端,被Get、Head和Post使用。</target>
        </trans-unit>
        <trans-unit id="fa23924b211ce5cb27ec1d2387da0f7a6637db67" translate="yes" xml:space="preserve">
          <source>DefaultMask returns the default IP mask for the IP address ip. Only IPv4 addresses have default masks; DefaultMask returns nil if ip is not a valid IPv4 address.</source>
          <target state="translated">DefaultMask 返回 IP 地址 ip 的默认 IP 掩码,只有 IPv4 地址才有默认掩码,如果 ip 不是有效的 IPv4 地址,DefaultMask 返回 nil。只有IPv4地址才有默认掩码,如果ip不是有效的IPv4地址,DefaultMask返回nil。</target>
        </trans-unit>
        <trans-unit id="e06a50030e5f43ee5b24b6931b868b3e071ca071" translate="yes" xml:space="preserve">
          <source>DefaultMaxHeaderBytes is the maximum permitted size of the headers in an HTTP request. This can be overridden by setting Server.MaxHeaderBytes.</source>
          <target state="translated">DefaultMaxHeaderBytes是HTTP请求中头信息的最大允许大小。这可以通过设置Server.MaxHeaderBytes来覆盖。</target>
        </trans-unit>
        <trans-unit id="636a0952f2f8473680d4e7cc7eb53279b90ac029" translate="yes" xml:space="preserve">
          <source>DefaultMaxIdleConnsPerHost is the default value of Transport's MaxIdleConnsPerHost.</source>
          <target state="translated">DefaultMaxIdleConnsPerHost是Transport的MaxIdleConnsPerHost的默认值。</target>
        </trans-unit>
        <trans-unit id="0b44788c36bdae15408049002f004c79915e5e4d" translate="yes" xml:space="preserve">
          <source>DefaultParameterConverter is the default implementation of ValueConverter that's used when a Stmt doesn't implement ColumnConverter.</source>
          <target state="translated">DefaultParameterConverter是ValueConverter的默认实现,当一个Stmt没有实现ColumnConverter时,就会用到它。</target>
        </trans-unit>
        <trans-unit id="2eacc041065f99c81cc8f5fd899b6fc82a35c5b3" translate="yes" xml:space="preserve">
          <source>DefaultParameterConverter returns its argument directly if IsValue(arg). Otherwise, if the argument implements Valuer, its Value method is used to return a Value. As a fallback, the provided argument's underlying type is used to convert it to a Value: underlying integer types are converted to int64, floats to float64, bool, string, and []byte to themselves. If the argument is a nil pointer, ConvertValue returns a nil Value. If the argument is a non-nil pointer, it is dereferenced and ConvertValue is called recursively. Other types are an error.</source>
          <target state="translated">如果IsValue(arg),DefaultParameterConverter直接返回其参数。否则,如果参数实现了Valuer,它的Value方法就会被用来返回一个Value。作为后备,所提供的参数的底层类型被用于将其转换为Value:底层整数类型被转换为int64,浮点数被转换为float64,bool,string和[]byte被转换为自己。如果参数是一个nil指针,ConvertValue会返回一个nil Value。如果参数是一个非零指针,它将被解除引用,ConvertValue被递归调用。其他类型是一个错误。</target>
        </trans-unit>
        <trans-unit id="5f213734fb7e3669ea6cde1adb844c4352398832" translate="yes" xml:space="preserve">
          <source>DefaultQuality is the default quality encoding parameter.</source>
          <target state="translated">DefaultQuality是默认的质量编码参数。</target>
        </trans-unit>
        <trans-unit id="38d9675d6a9519fefbcc46ae56e43608c28aa568" translate="yes" xml:space="preserve">
          <source>DefaultRemoteAddr is the default remote address to return in RemoteAddr if an explicit DefaultRemoteAddr isn't set on ResponseRecorder.</source>
          <target state="translated">如果没有在ResponseRecorder上设置明确的DefaultRemoteAddr,DefaultRemoteAddr是RemoteAddr中返回的默认远程地址。</target>
        </trans-unit>
        <trans-unit id="6ee5c05653051c51f271a77afcb53f5d1e6c059a" translate="yes" xml:space="preserve">
          <source>DefaultResolver is the resolver used by the package-level Lookup functions and by Dialers without a specified Resolver.</source>
          <target state="translated">DefaultResolver是包级Lookup函数和没有指定Resolver的Dialers使用的解析器。</target>
        </trans-unit>
        <trans-unit id="d5ebe0e1b713e364b784eb80c7a317d8d294f9a0" translate="yes" xml:space="preserve">
          <source>DefaultServeMux is the default ServeMux used by Serve.</source>
          <target state="translated">DefaultServeMux是Serve使用的默认ServeMux。</target>
        </trans-unit>
        <trans-unit id="e263e8bc5cd83dd3c4b95718e56ae0981b0cc5d2" translate="yes" xml:space="preserve">
          <source>DefaultServer is the default instance of *Server.</source>
          <target state="translated">DefaultServer是*Server的默认实例。</target>
        </trans-unit>
        <trans-unit id="372f5d0502fa7b598a3ec0b732f37219d19fac76" translate="yes" xml:space="preserve">
          <source>DefaultTransport is the default implementation of Transport and is used by DefaultClient. It establishes network connections as needed and caches them for reuse by subsequent calls. It uses HTTP proxies as directed by the $HTTP_PROXY and $NO_PROXY (or $http_proxy and $no_proxy) environment variables.</source>
          <target state="translated">DefaultTransport 是 Transport 的默认实现,由 DefaultClient 使用。它根据需要建立网络连接,并将它们缓存起来供后续调用重用。它按照 $HTTP_PROXY 和 $NO_PROXY (或 $http_proxy 和 $no_proxy)环境变量的指示使用 HTTP 代理。</target>
        </trans-unit>
        <trans-unit id="afd8250a6d786e6fc36b7943762248db8114871c" translate="yes" xml:space="preserve">
          <source>Define flags using flag.String(), Bool(), Int(), etc.</source>
          <target state="translated">使用flag.String()、Bool()、Int()等定义标志。</target>
        </trans-unit>
        <trans-unit id="59702ad1f8b86127487509bba28cce815f45cb43" translate="yes" xml:space="preserve">
          <source>DefinedTemplates returns a string listing the defined templates, prefixed by the string &quot;; defined templates are: &quot;. If there are none, it returns the empty string. For generating an error message here and in html/template.</source>
          <target state="translated">DefinedTemplates 返回一个字符串,列出定义的模板,前缀为&quot;;定义的模板是。&quot;.如果没有模板,则返回空字符串。在这里和html/template中生成错误信息。</target>
        </trans-unit>
        <trans-unit id="0ef9206feec84a2fab3e1d763ed437ba19bc8059" translate="yes" xml:space="preserve">
          <source>DefinedTemplates returns a string listing the defined templates, prefixed by the string &quot;; defined templates are: &quot;. If there are none, it returns the empty string. Used to generate an error message.</source>
          <target state="translated">DefinedTemplates 返回一个字符串,列出定义的模板,前缀为&quot;;定义的模板是。&quot;.如果没有模板,则返回空字符串。用于生成错误信息。</target>
        </trans-unit>
        <trans-unit id="eb57645975348dea1039fb97dc2b2b89c0be776d" translate="yes" xml:space="preserve">
          <source>Del deletes the values associated with key.</source>
          <target state="translated">Del删除与键相关联的值。</target>
        </trans-unit>
        <trans-unit id="857c30a3f9faee13278e31d18a439b577b3f1737" translate="yes" xml:space="preserve">
          <source>Del deletes the values associated with key. The key is case insensitive; it is canonicalized by CanonicalHeaderKey.</source>
          <target state="translated">Del删除与key相关联的值,key不区分大小写,由CanonicalHeaderKey规范化。键不区分大小写;它由CanonicalHeaderKey规范化。</target>
        </trans-unit>
        <trans-unit id="2f7c858ff141d7fef3418ae36b43cc7a74036332" translate="yes" xml:space="preserve">
          <source>Delete deletes the JavaScript property p of value v. It panics if v is not a JavaScript object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344d7532f4d066a3be32162f19300bafca7e706e" translate="yes" xml:space="preserve">
          <source>Delete deletes the given key from the map.</source>
          <target state="translated">删除从地图中删除给定的键。</target>
        </trans-unit>
        <trans-unit id="0084056bfddcb6daf1843876f6cd9d7b3ea00fa3" translate="yes" xml:space="preserve">
          <source>Delete deletes the value for a key.</source>
          <target state="translated">删除删除一个键的值。</target>
        </trans-unit>
        <trans-unit id="d5efbe5b092d83811fac07a9464c08df78f1c725" translate="yes" xml:space="preserve">
          <source>Delims sets the action delimiters to the specified strings, to be used in subsequent calls to Parse, ParseFiles, or ParseGlob. Nested template definitions will inherit the settings. An empty delimiter stands for the corresponding default: {{ or }}. The return value is the template, so calls can be chained.</source>
          <target state="translated">Delims 将动作定界符设置为指定的字符串,以便在后续调用 Parse、ParseFiles 或 ParseGlob 时使用。嵌套的模板定义将继承这些设置。空定界符代表相应的默认值:{{或}}。返回值是模板,所以可以连锁调用。</target>
        </trans-unit>
        <trans-unit id="31fea7c88227fcd4f765a38f852f853c5cec5b28" translate="yes" xml:space="preserve">
          <source>Denom returns the denominator of x; it is always &amp;gt; 0. The result is a reference to x's denominator, unless x is an uninitialized (zero value) Rat, in which case the result is a new Int of value 1. (To initialize x, any operation that sets x will do, including x.Set(x).) If the result is a reference to x's denominator it may change if a new value is assigned to x, and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d0d4298e3ba9dd9990445a4ef4e8a6cd12c5f4f" translate="yes" xml:space="preserve">
          <source>Denom returns the denominator of x; it is always &amp;gt; 0. The result is a reference to x's denominator; it may change if a new value is assigned to x, and vice versa.</source>
          <target state="translated">Denom返回x的分母；它总是&amp;gt;0。结果是对x的分母的引用；如果将新值分配给x，它可能会更改，反之亦然。</target>
        </trans-unit>
        <trans-unit id="0b8eeb4cd02c6a77b7f55a05d7bd3c8acc59c71d" translate="yes" xml:space="preserve">
          <source>Denom returns the denominator of x; x must be Int, Float, or Unknown. If x is Unknown, or if it is too large or small to represent as a fraction, the result is Unknown. Otherwise the result is an Int &amp;gt;= 1.</source>
          <target state="translated">Denom返回x的分母；x必须是Int，Float或Unknown。如果x为未知，或者它太大或太小而无法表示为分数，则结果为未知。否则结果是Int&amp;gt; = 1。</target>
        </trans-unit>
        <trans-unit id="02dfda4f203755036a797366a5e270c14beadf5b" translate="yes" xml:space="preserve">
          <source>Depending on the HTTP client software, HTTP protocol version, and any intermediaries between the client and the Go server, it may not be possible to read from the Request.Body after writing to the ResponseWriter. Cautious handlers should read the Request.Body first, and then reply.</source>
          <target state="translated">根据HTTP客户端软件、HTTP协议版本以及客户端和Go服务器之间的任何中介,可能无法在写入ResponseWriter后从Request.Body中读取。谨慎的处理者应该先读取Request.Body,然后再回复。</target>
        </trans-unit>
        <trans-unit id="cb5f94750a5ad48a23cbc7512449501e4bc9e180" translate="yes" xml:space="preserve">
          <source>Deprecated: DSA is a legacy algorithm, and modern alternatives such as Ed25519 (implemented by package crypto/ed25519) should be used instead. Keys with 1024-bit moduli (L1024N160 parameters) are cryptographically weak, while bigger keys are not widely supported. Note that FIPS 186-5 no longer approves DSA for signature generation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ff8b9c366b37de75e0a219f6054e295296daec" translate="yes" xml:space="preserve">
          <source>Deprecated: Drivers should implement ExecerContext instead.</source>
          <target state="translated">已废弃。驱动程序应该实现ExecerContext代替。</target>
        </trans-unit>
        <trans-unit id="d4d3a3d65ddeed121ddbee894f4a71e4f38ef5f4" translate="yes" xml:space="preserve">
          <source>Deprecated: Drivers should implement NamedValueChecker.</source>
          <target state="translated">已废弃。驱动程序应该实现NamedValueChecker。</target>
        </trans-unit>
        <trans-unit id="8c65d9b0a5c2499f69091385e530d0488f264354" translate="yes" xml:space="preserve">
          <source>Deprecated: Drivers should implement QueryerContext instead.</source>
          <target state="translated">已废弃。驱动程序应该实现QueryerContext。</target>
        </trans-unit>
        <trans-unit id="fd55ed21fcef6e8036c179ed17978a5eb1bc511c" translate="yes" xml:space="preserve">
          <source>Deprecated: HasPrefix does not respect path boundaries and does not ignore case when required.</source>
          <target state="translated">已被淘汰。HasPrefix不尊重路径边界,在需要时不忽略大小写。</target>
        </trans-unit>
        <trans-unit id="1b6314119e2a70e822325ecc07d6f3bcf87fad5a" translate="yes" xml:space="preserve">
          <source>Deprecated: In earlier releases, when using a Regexp in multiple goroutines, giving each goroutine its own copy helped to avoid lock contention. As of Go 1.12, using Copy is no longer necessary to avoid lock contention. Copy may still be appropriate if the reason for its use is to make two copies with different Longest settings.</source>
          <target state="translated">已废弃。在早期版本中,当在多个goroutine中使用Regexp时,为每个goroutine提供自己的副本有助于避免锁争用。从 Go 1.12 开始,不再需要使用 Copy 来避免锁争用。如果使用Copy的原因是为了用不同的Longest设置制作两个副本,那么Copy可能仍然是合适的。</target>
        </trans-unit>
        <trans-unit id="7ba1f7ead290c79971fb8a1d911989e3dbe725b9" translate="yes" xml:space="preserve">
          <source>Deprecated: Legacy PEM encryption as specified in RFC 1423 is insecure by design. Since it does not authenticate the ciphertext, it is vulnerable to padding oracle attacks that can let an attacker recover the plaintext.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196baba74aa7f3fe660f08b7ea54fa454a6f0a4a" translate="yes" xml:space="preserve">
          <source>Deprecated: NameToCertificate only allows associating a single certificate with a given name. Leave that field nil to let the library select the first compatible chain from Certificates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9637414855ddbc727fc7477deb59945461f257c8" translate="yes" xml:space="preserve">
          <source>Deprecated: No longer returned.</source>
          <target state="translated">已过时。不再退回。</target>
        </trans-unit>
        <trans-unit id="0fd839aca1062d0406d212ed9c29a708a99c5ae4" translate="yes" xml:space="preserve">
          <source>Deprecated: No longer used; kept for compatibility.</source>
          <target state="translated">已废弃。不再使用;保留是为了兼容。</target>
        </trans-unit>
        <trans-unit id="3c3790917f28a2ba29e0716702d6e5bf036726c8" translate="yes" xml:space="preserve">
          <source>Deprecated: Not all errors in the http package related to protocol errors are of type ProtocolError.</source>
          <target state="translated">已废弃。在http包中,并非所有与协议错误有关的错误都是协议错误类型。</target>
        </trans-unit>
        <trans-unit id="490458aa5011ab7b075523616154746f03267643" translate="yes" xml:space="preserve">
          <source>Deprecated: Reader is not used by the image/jpeg package and should not be used by others. It is kept for compatibility.</source>
          <target state="translated">废弃的。图像/jpeg包不使用Reader,也不应该被其他人使用。保留它是为了兼容。</target>
        </trans-unit>
        <trans-unit id="58781567b2fb92c443f90638b4d662c4329af403" translate="yes" xml:space="preserve">
          <source>Deprecated: Reset can't guarantee that the key will be entirely removed from the process's memory.</source>
          <target state="translated">已被废弃。重置不能保证密钥会从进程的内存中完全删除。</target>
        </trans-unit>
        <trans-unit id="43ac2e35f199dfb76444834868effa77e8fa4427" translate="yes" xml:space="preserve">
          <source>Deprecated: Use BytePtrFromString instead.</source>
          <target state="translated">废弃的,使用BytePtrFromString代替。使用BytePtrFromString代替。</target>
        </trans-unit>
        <trans-unit id="51efd02191b9f71984ba76cbf148870f02e1d8c6" translate="yes" xml:space="preserve">
          <source>Deprecated: Use ByteSliceFromString instead.</source>
          <target state="translated">废弃的,使用ByteSliceFromString代替。使用ByteSliceFromString代替。</target>
        </trans-unit>
        <trans-unit id="fd4b3efcc65217311972673c02ffe9a5cb88dfaf" translate="yes" xml:space="preserve">
          <source>Deprecated: Use Client or Transport in package net/http instead.</source>
          <target state="translated">已废弃。使用net/http包中的Client或Transport代替。</target>
        </trans-unit>
        <trans-unit id="d6270f7239a09518438a88d37dad394b15480fb8" translate="yes" xml:space="preserve">
          <source>Deprecated: Use EmbeddedType which is not restricted to defined (*Named) types.</source>
          <target state="translated">已废弃。使用EmbeddedType,它不限于定义的(*Named)类型。</target>
        </trans-unit>
        <trans-unit id="7bc19f31fefb5069bf157150b156e0dbda6a5cff" translate="yes" xml:space="preserve">
          <source>Deprecated: Use ForCompiler, which populates a FileSet with the positions of objects created by the importer.</source>
          <target state="translated">已废弃。使用ForCompiler,它用导入者创建的对象的位置填充FileSet。</target>
        </trans-unit>
        <trans-unit id="dea355e8883ce226aad79e4df0b17269bf068a57" translate="yes" xml:space="preserve">
          <source>Deprecated: Use Modified instead.</source>
          <target state="translated">已不适用。用 &quot;修改 &quot;代替。</target>
        </trans-unit>
        <trans-unit id="dd51e4444ff9f93d6d490f4c8fbbe80d17a8f7ed" translate="yes" xml:space="preserve">
          <source>Deprecated: Use NewInterfaceType instead which allows any (even non-defined) interface types to be embedded. This is necessary for interfaces that embed alias type names referring to non-defined (literal) interface types.</source>
          <target state="translated">已废弃。使用NewInterfaceType代替,它允许嵌入任何(甚至是未定义的)接口类型。这对于嵌入别名类型名的接口来说是必要的,这些别名类型名指的是未定义的(字面)接口类型。</target>
        </trans-unit>
        <trans-unit id="86a0a87c06d3b24ae7ba083e47038c07c1ec8a45" translate="yes" xml:space="preserve">
          <source>Deprecated: Use Request.WithContext to create a request with a cancelable context instead. CancelRequest cannot cancel HTTP/2 requests.</source>
          <target state="translated">已废弃。使用Request.WithContext来创建一个带有可取消上下文的请求。CancelRequest不能取消HTTP/2请求。</target>
        </trans-unit>
        <trans-unit id="5afbed661568f02f17be5136af0d00c63dacdf0f" translate="yes" xml:space="preserve">
          <source>Deprecated: Use SlicePtrFromStrings instead.</source>
          <target state="translated">废弃的,使用SlicePtrFromStrings代替。使用SlicePtrFromStrings代替。</target>
        </trans-unit>
        <trans-unit id="9307fd6cc4683ebcdd10ed61846d3a8429d1b79d" translate="yes" xml:space="preserve">
          <source>Deprecated: Use Table's LineToPC method instead.</source>
          <target state="translated">已废弃。使用Table的LineToPC方法代替。</target>
        </trans-unit>
        <trans-unit id="4b5050bfb6e04ec77adc6d71cc882c7de1e14526" translate="yes" xml:space="preserve">
          <source>Deprecated: Use Table's PCToLine method instead.</source>
          <target state="translated">已废弃。使用Table的PCToLine方法代替。</target>
        </trans-unit>
        <trans-unit id="77cf9f471d6e42edcc6f260a374bb70bfa7adebe" translate="yes" xml:space="preserve">
          <source>Deprecated: Use a literal image.Point{} instead.</source>
          <target state="translated">已废弃。使用image.Point{}代替。</target>
        </trans-unit>
        <trans-unit id="b7397111f5533c968cd65f5e2523d33d9faff03a" translate="yes" xml:space="preserve">
          <source>Deprecated: Use a literal image.Rectangle{} instead.</source>
          <target state="translated">已废弃。使用image.Rectangle{}代替。</target>
        </trans-unit>
        <trans-unit id="9937088a55d8dc88ef8ad92ad476b97d1a2fb40f" translate="yes" xml:space="preserve">
          <source>Deprecated: Use golang.org/x/net/bpf instead.</source>
          <target state="translated">废弃的,使用golang.org/x/net/bpf代替。使用golang.org/x/net/bpf代替。</target>
        </trans-unit>
        <trans-unit id="010b83223f03b61cbd0b1c78b7f4b00afcddc45f" translate="yes" xml:space="preserve">
          <source>Deprecated: Use io.SeekStart, io.SeekCurrent, and io.SeekEnd.</source>
          <target state="translated">废弃的,使用io.SeekStart、io.SeekCurrent和io.SeekEnd。使用 io.SeekStart,io.SeekCurrent,和 io.SeekEnd.</target>
        </trans-unit>
        <trans-unit id="0648b8785f1680a3e97220e8e055c5d37df0480e" translate="yes" xml:space="preserve">
          <source>Deprecated: Use the Client or Transport in package net/http instead.</source>
          <target state="translated">已废弃。使用net/http包中的Client或Transport代替。</target>
        </trans-unit>
        <trans-unit id="d53617ac7890494a0c834838f0476b520d4862ac" translate="yes" xml:space="preserve">
          <source>Deprecated: Use the Server in package net/http instead.</source>
          <target state="translated">已废弃。使用net/http包中的服务器代替。</target>
        </trans-unit>
        <trans-unit id="987c7abf6daadd7b7fb6e6f3bb5e77607927d16a" translate="yes" xml:space="preserve">
          <source>Deprecated: Use the runtime/pprof package, or the handlers in the net/http/pprof package, or the testing package's -test.cpuprofile flag instead.</source>
          <target state="translated">已经过时了,请使用runtime/pprof包,或net/http/pprof包中的处理程序,或测试包的-test.cpuprofile标志。使用runtime/pprof包,或net/http/pprof包中的处理程序,或测试包的-test.cpuprofile标志来代替。</target>
        </trans-unit>
        <trans-unit id="5826c738c43e68ce8820a4cf4d6fa1df350e65a6" translate="yes" xml:space="preserve">
          <source>Deprecated: the CloseNotifier interface predates Go's context package. New code should use Request.Context instead.</source>
          <target state="translated">废弃:CloseNotifier接口早于Go的上下文包。新代码应该使用Request.Context来代替。</target>
        </trans-unit>
        <trans-unit id="cb2a5b2d0ed3d2503d1117d6b88d116db1a5c733" translate="yes" xml:space="preserve">
          <source>Deprecated: this package is locked down. Callers should use the corresponding package in the golang.org/x/sys repository instead. That is also where updates required by new systems or versions should be applied. See &lt;a href=&quot;https://golang.org/s/go1.4-syscall&quot;&gt;https://golang.org/s/go1.4-syscall&lt;/a&gt; for more information.</source>
          <target state="translated">不推荐使用：此程序包已被锁定。调用者应改用golang.org/x/sys信息库中的相应软件包。这也是应该应用新系统或版本所需的更新的地方。有关更多信息，请参见&lt;a href=&quot;https://golang.org/s/go1.4-syscall&quot;&gt;https://golang.org/s/go1.4-syscall&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4e1c782176da027e39c30c23236aea1dcb098a17" translate="yes" xml:space="preserve">
          <source>Description describes a runtime metric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6b17bc8c26986a8b1796bf3ed1269488b37e59" translate="yes" xml:space="preserve">
          <source>Desired metrics should be present in the slice with the appropriate name. The user of this API is encouraged to re-use the same slice between calls for efficiency, but is not required to do so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f97aa680aa5a60014104f440129ac907153497" translate="yes" xml:space="preserve">
          <source>DetectContentType implements the algorithm described at &lt;a href=&quot;https://mimesniff.spec.whatwg.org/&quot;&gt;https://mimesniff.spec.whatwg.org/&lt;/a&gt; to determine the Content-Type of the given data. It considers at most the first 512 bytes of data. DetectContentType always returns a valid MIME type: if it cannot determine a more specific one, it returns &quot;application/octet-stream&quot;.</source>
          <target state="translated">DetectContentType实现&lt;a href=&quot;https://mimesniff.spec.whatwg.org/&quot;&gt;https://mimesniff.spec.whatwg.org/&lt;/a&gt;上描述的算法，以确定给定数据的Content-Type。它最多考虑前512个字节的数据。DetectContentType始终返回有效的MIME类型：如果无法确定更具体的类型，则返回&amp;ldquo; application / octet-stream&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="367a791e4c8a0aab798febfdd40fb481c8e6a937" translate="yes" xml:space="preserve">
          <source>DevNull is the name of the operating system's &amp;ldquo;null device.&amp;rdquo; On Unix-like systems, it is &quot;/dev/null&quot;; on Windows, &quot;NUL&quot;.</source>
          <target state="translated">DevNull是操作系统的&amp;ldquo;空设备&amp;rdquo;的名称。在类似Unix的系统上，它是&amp;ldquo; / dev / null&amp;rdquo;；在Windows上为&amp;ldquo; NUL&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="646a9a5d7a2127190c66269d0c3f2e8f50421ce8" translate="yes" xml:space="preserve">
          <source>Dial</source>
          <target state="translated">Dial</target>
        </trans-unit>
        <trans-unit id="3245bf7894677b66fa0f65579149d4be55a013bd" translate="yes" xml:space="preserve">
          <source>Dial connects to a JSON-RPC server at the specified network address.</source>
          <target state="translated">Dial连接到指定网络地址的JSON-RPC服务器。</target>
        </trans-unit>
        <trans-unit id="f3c54da882e49624393be65dcafa09fa8930a181" translate="yes" xml:space="preserve">
          <source>Dial connects to an RPC server at the specified network address.</source>
          <target state="translated">Dial连接到指定网络地址的RPC服务器。</target>
        </trans-unit>
        <trans-unit id="8126f72193c0616ba2ad5a2d20b0d0af08ee30f4" translate="yes" xml:space="preserve">
          <source>Dial connects to the address on the named network.</source>
          <target state="translated">Dial连接到指定网络上的地址。</target>
        </trans-unit>
        <trans-unit id="501b84f9fa1edcd3533366e2dba0373c80935d15" translate="yes" xml:space="preserve">
          <source>Dial connects to the given address on the given network using net.Dial and then returns a new Conn for the connection.</source>
          <target state="translated">Dial使用net.Dial连接到给定网络上的给定地址,然后返回一个新的Conn进行连接。</target>
        </trans-unit>
        <trans-unit id="629d1f8b2277de65270cc2dc9ddd66fb911949dd" translate="yes" xml:space="preserve">
          <source>Dial connects to the given network address and initiates a TLS handshake, returning the resulting TLS connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23287419cc64eb396429ad69a3f427b7d7d40ed6" translate="yes" xml:space="preserve">
          <source>Dial connects to the given network address using net.Dial and then initiates a TLS handshake, returning the resulting TLS connection. Dial interprets a nil configuration as equivalent to the zero configuration; see the documentation of Config for the defaults.</source>
          <target state="translated">Dial使用net.Dial连接到给定的网络地址,然后启动TLS握手,返回结果的TLS连接。Dial将nil配置解释为等同于零配置;默认值参见Config文档。</target>
        </trans-unit>
        <trans-unit id="555b7c0fb1e8bb60be8d6c97d4ce69eaf35fb532" translate="yes" xml:space="preserve">
          <source>Dial establishes a connection to a log daemon by connecting to address raddr on the specified network. Each write to the returned writer sends a log message with the facility and severity (from priority) and tag. If tag is empty, the os.Args[0] is used. If network is empty, Dial will connect to the local syslog server. Otherwise, see the documentation for net.Dial for valid values of network and raddr.</source>
          <target state="translated">Dial通过连接到指定网络上的地址raddr建立与日志守护进程的连接。每次向返回的写入器写入时,都会发送一条带有设施和严重性(从优先级开始)以及 tag 的日志消息。如果 tag 为空,则使用 os.Args[0]。如果网络为空,Dial将连接到本地的syslog服务器。否则,参见 net.Dial 的文档,了解 network 和 raddr 的有效值。</target>
        </trans-unit>
        <trans-unit id="916c7b288099112169b38ebc1753110c3b18e4dd" translate="yes" xml:space="preserve">
          <source>Dial returns a new Client connected to an SMTP server at addr. The addr must include a port, as in &quot;mail.example.com:smtp&quot;.</source>
          <target state="translated">Dial返回一个连接到addr的SMTP服务器的新客户端。addr必须包含一个端口,如 &quot;mail.example.com:smtp&quot;。</target>
        </trans-unit>
        <trans-unit id="c336c24a8e7cb3e6692055b20290d453c602efca" translate="yes" xml:space="preserve">
          <source>DialContext connects to the address on the named network using the provided context.</source>
          <target state="translated">DialContext使用提供的上下文连接到指定网络上的地址。</target>
        </trans-unit>
        <trans-unit id="ae5b323ca5a220e4cf001739db8d8ac51f2298b1" translate="yes" xml:space="preserve">
          <source>DialContext connects to the given network address and initiates a TLS handshake, returning the resulting TLS connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fc387cd20218ed3d2f01c35c59633f45a5f29c" translate="yes" xml:space="preserve">
          <source>DialHTTP connects to an HTTP RPC server at the specified network address listening on the default HTTP RPC path.</source>
          <target state="translated">DialHTTP通过默认的HTTP RPC路径连接到指定网络地址的HTTP RPC服务器。</target>
        </trans-unit>
        <trans-unit id="166f35fbbfb2abc139813e788b55c8bb3893b155" translate="yes" xml:space="preserve">
          <source>DialHTTPPath connects to an HTTP RPC server at the specified network address and path.</source>
          <target state="translated">DialHTTPPath以指定的网络地址和路径连接到HTTP RPC服务器。</target>
        </trans-unit>
        <trans-unit id="054234eb6c33ff43797ebf07806d1abf2116d2cd" translate="yes" xml:space="preserve">
          <source>DialIP acts like Dial for IP networks.</source>
          <target state="translated">DialIP的作用类似于IP网络的Dial。</target>
        </trans-unit>
        <trans-unit id="60f40280b1c83bdee5b7b3218861565670c7b947" translate="yes" xml:space="preserve">
          <source>DialTCP acts like Dial for TCP networks.</source>
          <target state="translated">DialTCP的作用类似于TCP网络的Dial。</target>
        </trans-unit>
        <trans-unit id="c77aaf097ede2da3e55ab000126fc5ce2b944418" translate="yes" xml:space="preserve">
          <source>DialTimeout acts like Dial but takes a timeout.</source>
          <target state="translated">DialTimeout的作用和Dial一样,但需要超时。</target>
        </trans-unit>
        <trans-unit id="723db5642572fd8814d20074653b8583436a95be" translate="yes" xml:space="preserve">
          <source>DialUDP acts like Dial for UDP networks.</source>
          <target state="translated">DialUDP的作用类似于UDP网络的Dial。</target>
        </trans-unit>
        <trans-unit id="b1188516daa0242a5dee9e07a8ce04b8dfddd6c9" translate="yes" xml:space="preserve">
          <source>DialUnix acts like Dial for Unix networks.</source>
          <target state="translated">DialUnix的作用就像Unix网络的Dial一样。</target>
        </trans-unit>
        <trans-unit id="9d97dd8e372e50745923f0e793e9a1ea3377bd43" translate="yes" xml:space="preserve">
          <source>DialWithDialer connects to the given network address using dialer.Dial and then initiates a TLS handshake, returning the resulting TLS connection. Any timeout or deadline given in the dialer apply to connection and TLS handshake as a whole.</source>
          <target state="translated">DialWithDialer使用dialer.Dial连接到给定的网络地址,然后启动TLS握手,返回结果的TLS连接。任何在拨号器中给出的超时或截止时间都适用于连接和TLS握手。</target>
        </trans-unit>
        <trans-unit id="04d0c73b173305efd4d7c731d37276a56782e447" translate="yes" xml:space="preserve">
          <source>DialWithDialer interprets a nil configuration as equivalent to the zero configuration; see the documentation of Config for the defaults.</source>
          <target state="translated">DialWithDialer将nil配置解释为等同于零配置,默认值参见Config文档。</target>
        </trans-unit>
        <trans-unit id="fa68fd39daa853b2a30820e7a2999d6f3712e7fb" translate="yes" xml:space="preserve">
          <source>Dialer</source>
          <target state="translated">Dialer</target>
        </trans-unit>
        <trans-unit id="f2a2b6098ccc457e369c055f037335bd4a695d0f" translate="yes" xml:space="preserve">
          <source>Dialer (Unix)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99143916135312bd685cf2dd8c1b05de07ff1455" translate="yes" xml:space="preserve">
          <source>Dialer dials TLS connections given a configuration and a Dialer for the underlying connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d6677c3103daea8bffe4b57b26ace50fc9cfec" translate="yes" xml:space="preserve">
          <source>Dim</source>
          <target state="translated">Dim</target>
        </trans-unit>
        <trans-unit id="5180c70f6c14847253e8a19f2d62329e26995c8f" translate="yes" xml:space="preserve">
          <source>Dim returns the maximum of x-y or 0.</source>
          <target state="translated">Dim返回x-y或0的最大值。</target>
        </trans-unit>
        <trans-unit id="84c6b9acefa0f4f9e57b58581d5a75e315eb3f2d" translate="yes" xml:space="preserve">
          <source>Dir</source>
          <target state="translated">Dir</target>
        </trans-unit>
        <trans-unit id="2f3878a27be08b90f79ff7ead675653eced9d5fc" translate="yes" xml:space="preserve">
          <source>Dir returns all but the last element of path, typically the path's directory. After dropping the final element using Split, the path is Cleaned and trailing slashes are removed. If the path is empty, Dir returns &quot;.&quot;. If the path consists entirely of slashes followed by non-slash bytes, Dir returns a single slash. In any other case, the returned path does not end in a slash.</source>
          <target state="translated">Dir 返回路径中除最后一个元素之外的所有元素,通常是路径的目录。在使用Split删除最后一个元素后,路径将被Cleaned,并删除尾部的斜杠。如果路径为空,Dir返回&quot;.&quot;。如果路径完全由斜线和非斜线字节组成,Dir将返回一个斜线。在其他任何情况下,返回的路径都不会以斜线结束。</target>
        </trans-unit>
        <trans-unit id="cd0f5615772352273bc79d68b22a60277288ae87" translate="yes" xml:space="preserve">
          <source>Dir returns all but the last element of path, typically the path's directory. After dropping the final element, Dir calls Clean on the path and trailing slashes are removed. If the path is empty, Dir returns &quot;.&quot;. If the path consists entirely of separators, Dir returns a single separator. The returned path does not end in a separator unless it is the root directory.</source>
          <target state="translated">Dir 返回路径中除最后一个元素之外的所有元素,通常是路径的目录。在删除最后一个元素后,Dir对路径调用Clean,并删除尾部的斜杠。如果路径为空,Dir返回&quot;.&quot;。如果路径完全由分隔符组成,Dir返回一个分隔符。除非是根目录,否则返回的路径不会以分隔符结束。</target>
        </trans-unit>
        <trans-unit id="a478722b7b31bb4fb26d02a9daa9b39abbff8e70" translate="yes" xml:space="preserve">
          <source>Dir returns the direction of channel c.</source>
          <target state="translated">Dir返回通道c的方向。</target>
        </trans-unit>
        <trans-unit id="28173630e4d4610c3c93486e00e51a65cbb749ff" translate="yes" xml:space="preserve">
          <source>DirFS returns a file system (an fs.FS) for the tree of files rooted at the directory dir.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c82071e940360118b0611d5c912a71c32a0100" translate="yes" xml:space="preserve">
          <source>Directives</source>
          <target state="translated">Directives</target>
        </trans-unit>
        <trans-unit id="15a5a91e72d8cd7ecd875b2fde5f18520f1865d0" translate="yes" xml:space="preserve">
          <source>DisallowUnknownFields causes the Decoder to return an error when the destination is a struct and the input contains object keys which do not match any non-ignored, exported fields in the destination.</source>
          <target state="translated">当目标是一个结构体,而输入包含的对象键与目标中任何非忽略的、导出的字段不匹配时,DisallowUnknownFields会导致解码器返回一个错误。</target>
        </trans-unit>
        <trans-unit id="62bb4b5073f1260cec18b0b05286cfcd9be30709" translate="yes" xml:space="preserve">
          <source>Discard is an Writer on which all Write calls succeed without doing anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9e638c9210f5f7c0d1bf542f9e88607a9db164" translate="yes" xml:space="preserve">
          <source>Discard is an io.Writer on which all Write calls succeed without doing anything.</source>
          <target state="translated">Discard是一个io.Writer,所有的Write调用都会成功,而不会做任何事情。</target>
        </trans-unit>
        <trans-unit id="3151e5b42c76f7786c34b10ee6b91843bc323edd" translate="yes" xml:space="preserve">
          <source>Discard skips the next n bytes, returning the number of bytes discarded.</source>
          <target state="translated">Discard跳过下一个n个字节,返回被丢弃的字节数。</target>
        </trans-unit>
        <trans-unit id="f6ce0f4b9310f95ee6e03e8cc37d8051d56938ac" translate="yes" xml:space="preserve">
          <source>Discussion:</source>
          <target state="translated">Discussion:</target>
        </trans-unit>
        <trans-unit id="1fc629db1dfea7dd1d7478cd49f0d67c695a2f09" translate="yes" xml:space="preserve">
          <source>Disposal Methods.</source>
          <target state="translated">处置方法:</target>
        </trans-unit>
        <trans-unit id="5ec7907f27bd994c3fb8583301b913b0b6813a3a" translate="yes" xml:space="preserve">
          <source>Div returns the quotient and remainder of (hi, lo) divided by y: quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits' upper half in parameter hi and the lower half in parameter lo. Div panics for y == 0 (division by zero) or y &amp;lt;= hi (quotient overflow).</source>
          <target state="translated">Div返回（hi，lo）的商和余数除以y：quo =（hi，lo）/ y，rem =（hi，lo）％y，股息位的上半部分在参数hi中，下半部分在参数hi中参数lo。y == 0（除以零）或y &amp;lt;= hi（商溢出）的除法。</target>
        </trans-unit>
        <trans-unit id="4fc57c9c02ed421c232712ba11343274d994963e" translate="yes" xml:space="preserve">
          <source>Div returns the vector p/k.</source>
          <target state="translated">Div返回向量p/k。</target>
        </trans-unit>
        <trans-unit id="426cf990e0000e9ee258d2aab672481be1e61f9f" translate="yes" xml:space="preserve">
          <source>Div sets z to the quotient x/y for y != 0 and returns z. If y == 0, a division-by-zero run-time panic occurs. Div implements Euclidean division (unlike Go); see DivMod for more details.</source>
          <target state="translated">Div将z设为y !=0的商x/y,并返回z。如果y ==0,则会发生按零除法的运行时恐慌。Div实现了欧式除法(与Go不同);更多细节请参见DivMod。</target>
        </trans-unit>
        <trans-unit id="6969f247b499f527d10065936434631c47245711" translate="yes" xml:space="preserve">
          <source>Div32 returns the quotient and remainder of (hi, lo) divided by y: quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits' upper half in parameter hi and the lower half in parameter lo. Div32 panics for y == 0 (division by zero) or y &amp;lt;= hi (quotient overflow).</source>
          <target state="translated">Div32返回（hi，lo）的商和余数除以y：quo =（hi，lo）/ y，rem =（hi，lo）％y，股息位的上半部分在参数hi中，下半部分在参数hi中参数lo。y == 0（除以零）或y &amp;lt;= hi（商溢出）的Div32恐慌。</target>
        </trans-unit>
        <trans-unit id="64a140393f99aaa8275c3c523c2f0109eb59db32" translate="yes" xml:space="preserve">
          <source>Div64 returns the quotient and remainder of (hi, lo) divided by y: quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits' upper half in parameter hi and the lower half in parameter lo. Div64 panics for y == 0 (division by zero) or y &amp;lt;= hi (quotient overflow).</source>
          <target state="translated">Div64返回（hi，lo）的商和余数除以y：quo =（hi，lo）/ y，rem =（hi，lo）％y，股息位的上半部分在参数hi中，下半部分在参数hi中参数lo。y == 0（除以零）或y &amp;lt;= hi（商溢出）的Div64恐慌。</target>
        </trans-unit>
        <trans-unit id="73ee7e85e1219c9b6dd08a952c5d23488d8e580c" translate="yes" xml:space="preserve">
          <source>DivMod implements Euclidean division and modulus (unlike Go):</source>
          <target state="translated">DivMod实现了欧几里得除法和模数(与Go不同)。</target>
        </trans-unit>
        <trans-unit id="2b680c8f7a354b5f639fb527648d9d63d8ccda98" translate="yes" xml:space="preserve">
          <source>DivMod sets z to the quotient x div y and m to the modulus x mod y and returns the pair (z, m) for y != 0. If y == 0, a division-by-zero run-time panic occurs.</source>
          <target state="translated">DivMod将z设为商x div y,m设为模x mod y,并返回y !=0的对(z,m),如果y ==0,则发生逐零除法的运行时恐慌。</target>
        </trans-unit>
        <trans-unit id="421c2fc2a2b84517678db9c2f442e9b0eb047ffd" translate="yes" xml:space="preserve">
          <source>Do calls f for each entry in the map. The map is locked during the iteration, but existing entries may be concurrently updated.</source>
          <target state="translated">对于地图中的每个条目,Do调用f。地图在迭代过程中是锁定的,但现有的条目可以并发更新。</target>
        </trans-unit>
        <trans-unit id="344fdccb01551fd2cf446ded60ac44948ea45c54" translate="yes" xml:space="preserve">
          <source>Do calls f for each exported variable. The global variable map is locked during the iteration, but existing entries may be concurrently updated.</source>
          <target state="translated">Do对每个导出的变量调用f。全局变量图在迭代过程中被锁定,但现有的条目可以被并发更新。</target>
        </trans-unit>
        <trans-unit id="73df66c109e56751b22dc4bded18343160cef6a4" translate="yes" xml:space="preserve">
          <source>Do calls f with a copy of the parent context with the given labels added to the parent's label map. Goroutines spawned while executing f will inherit the augmented label-set. Each key/value pair in labels is inserted into the label map in the order provided, overriding any previous value for the same key. The augmented label map will be set for the duration of the call to f and restored once f returns.</source>
          <target state="translated">在调用f时,将给定的标签添加到父上下文的标签映射中。在执行f时产生的Goroutine将继承增强的标签集。标签中的每一个键/值对都会按照给定的顺序插入到标签图中,并覆盖之前相同键的任何值。增强的标签图将在调用f的期间被设置,并在f返回后恢复。</target>
        </trans-unit>
        <trans-unit id="d59f412ffbd80005134f93bcc238950f4b573d7d" translate="yes" xml:space="preserve">
          <source>Do calls function f on each element of the ring, in forward order. The behavior of Do is undefined if f changes *r.</source>
          <target state="translated">Do按照前向顺序在环的每个元素上调用函数f。如果f改变了*r,Do的行为是未定义的。</target>
        </trans-unit>
        <trans-unit id="4aae39793ad1559304a62b480983270ecdafd252" translate="yes" xml:space="preserve">
          <source>Do calls the function f if and only if Do is being called for the first time for this instance of Once. In other words, given</source>
          <target state="translated">如果且仅当Do对这个Once实例是第一次被调用时,Do才会调用函数f。换句话说,给定</target>
        </trans-unit>
        <trans-unit id="8fc83ea5ac46597554232c0c42033d14a7416d33" translate="yes" xml:space="preserve">
          <source>Do is convenience method that writes a request and reads a response.</source>
          <target state="translated">Do是写请求和读响应的方便方法。</target>
        </trans-unit>
        <trans-unit id="83ae63c0144eed839424d121a195436a02591450" translate="yes" xml:space="preserve">
          <source>Do is intended for initialization that must be run exactly once. Since f is niladic, it may be necessary to use a function literal to capture the arguments to a function to be invoked by Do:</source>
          <target state="translated">Do的目的是用于必须精确运行一次的初始化。由于f是niladic的,所以可能需要使用函数文字来捕获要被Do调用的函数的参数。</target>
        </trans-unit>
        <trans-unit id="171db7265264382a4470c716c800cfeaf865b910" translate="yes" xml:space="preserve">
          <source>Do not pass a nil Context, even if a function permits it. Pass context.TODO if you are unsure about which Context to use.</source>
          <target state="translated">即使函数允许,也不要传递一个nil Context。如果你不确定使用哪个 Context,请传递 context.TODO。</target>
        </trans-unit>
        <trans-unit id="403473243ae753314d3e7c6e5efb971fec3919ed" translate="yes" xml:space="preserve">
          <source>Do not store Contexts inside a struct type; instead, pass a Context explicitly to each function that needs it. The Context should be the first parameter, typically named ctx:</source>
          <target state="translated">不要在结构类型中存储Contextts,而是将Context显式传递给每个需要它的函数。Context应该是第一个参数,通常命名为ctx。</target>
        </trans-unit>
        <trans-unit id="d7779aca2e90b3ef06e0e59e88b36b9294187c5a" translate="yes" xml:space="preserve">
          <source>Do sends an HTTP request and returns an HTTP response, following policy (such as redirects, cookies, auth) as configured on the client.</source>
          <target state="translated">Do发送HTTP请求并返回HTTP响应,遵循客户端配置的策略(如重定向、cookie、auth)。</target>
        </trans-unit>
        <trans-unit id="53a040ce848c0973a1eaf2705fea9e3c16c10f29" translate="yes" xml:space="preserve">
          <source>Done decrements the WaitGroup counter by one.</source>
          <target state="translated">Done 将 WaitGroup 计数器减一。</target>
        </trans-unit>
        <trans-unit id="5d8a8a3c5fe2e401e493c36ab14b008c0145b4a3" translate="yes" xml:space="preserve">
          <source>Dot encoding is a common framing used for data blocks in text protocols such as SMTP. The data consists of a sequence of lines, each of which ends in &quot;\r\n&quot;. The sequence itself ends at a line containing just a dot: &quot;.\r\n&quot;. Lines beginning with a dot are escaped with an additional dot to avoid looking like the end of the sequence.</source>
          <target state="translated">点编码是SMTP等文本协议中数据块的常用框架。数据由一连串的行组成,每行以&quot;\r\n &quot;结尾。序列本身在一行结束时只包含一个点。&quot;.\r\n&quot;.以点号开头的行用一个额外的点号转义,以避免看起来像序列的结束。</target>
        </trans-unit>
        <trans-unit id="dfa5cb276f9495e5d4c9e33568c4e7fe494cb1c1" translate="yes" xml:space="preserve">
          <source>DotNode holds the special identifier '.'.</source>
          <target state="translated">DotNode拥有特殊的标识符'.'。</target>
        </trans-unit>
        <trans-unit id="45d81c0de8e57188c73733729e426e2cc8e21bc9" translate="yes" xml:space="preserve">
          <source>DotReader returns a new Reader that satisfies Reads using the decoded text of a dot-encoded block read from r. The returned Reader is only valid until the next call to a method on r.</source>
          <target state="translated">DotReader返回一个新的Reader,该Reader使用从r中读取的点编码块的解码文本来满足Reads,返回的Reader只在下次调用r上的方法之前有效。</target>
        </trans-unit>
        <trans-unit id="5f12978969ba09aae6377b8a8b1e656b9e301cf7" translate="yes" xml:space="preserve">
          <source>DotWriter returns a writer that can be used to write a dot-encoding to w. It takes care of inserting leading dots when necessary, translating line-ending \n into \r\n, and adding the final .\r\n line when the DotWriter is closed. The caller should close the DotWriter before the next call to a method on w.</source>
          <target state="translated">DotWriter返回一个可以用来给w写点阵编码的写入器,它负责在必要的时候插入前导点,将行尾的 \n翻译成 \r\n,并在DotWriter关闭时添加最后的.\r\n行。调用者应该在下一次调用w的方法之前关闭DotWriter。</target>
        </trans-unit>
        <trans-unit id="34df04156d8c13982c47017e9978f653e9f12cc7" translate="yes" xml:space="preserve">
          <source>Draw calls DrawMask with a nil mask.</source>
          <target state="translated">Draw调用DrawMask,面具为nil。</target>
        </trans-unit>
        <trans-unit id="4b5e532be0920a0453cdc54d04b9169084ccdf0e" translate="yes" xml:space="preserve">
          <source>Draw implements the Drawer interface by calling the Draw function with this Op.</source>
          <target state="translated">Draw通过调用这个Op.Draw函数实现Drawer接口。</target>
        </trans-unit>
        <trans-unit id="095366335bb273e4a2ea61cb6fd7f32f8d19f685" translate="yes" xml:space="preserve">
          <source>DrawMask aligns r.Min in dst with sp in src and mp in mask and then replaces the rectangle r in dst with the result of a Porter-Duff composition. A nil mask is treated as opaque.</source>
          <target state="translated">DrawMask 将 dst 中的 r.Min 与 src 中的 sp 和 mask 中的 mp 对齐,然后用 Porter-Duff 组成的结果替换 dst 中的矩形 r。无掩模会被视为不透明。</target>
        </trans-unit>
        <trans-unit id="69353508254d7fc67f1bc0d561821973e8541c4b" translate="yes" xml:space="preserve">
          <source>Drawer (FloydSteinberg)</source>
          <target state="translated">抽屉 (FloydSteinberg)</target>
        </trans-unit>
        <trans-unit id="8253364d6d713de9b550787176c132b382c33930" translate="yes" xml:space="preserve">
          <source>Drawer contains the Draw method.</source>
          <target state="translated">Drawer包含Draw方法。</target>
        </trans-unit>
        <trans-unit id="ca04bd4da9fe0c03ee57c4703ae1e82be8d6e722" translate="yes" xml:space="preserve">
          <source>Driver is the interface that must be implemented by a database driver.</source>
          <target state="translated">驱动程序是数据库驱动程序必须实现的接口。</target>
        </trans-unit>
        <trans-unit id="9f645d42b5568aea825206b8e697ea66dab57c60" translate="yes" xml:space="preserve">
          <source>Driver returns the database's underlying driver.</source>
          <target state="translated">Driver返回数据库的底层驱动程序。</target>
        </trans-unit>
        <trans-unit id="5a00d50aef5aea9e2710b9f36a21127df22306c7" translate="yes" xml:space="preserve">
          <source>Drivers returns a sorted list of the names of the registered drivers.</source>
          <target state="translated">司机返回一个已注册司机的排序列表。</target>
        </trans-unit>
        <trans-unit id="2abae0c55704de2aa26c34322b4e8c275aa1bc7c" translate="yes" xml:space="preserve">
          <source>Drivers that do not support context cancellation will not return until after the query is completed.</source>
          <target state="translated">不支持上下文取消的驱动程序将在查询完成后才返回。</target>
        </trans-unit>
        <trans-unit id="d8d218c02974bb1de20e1d664e3a90526498d120" translate="yes" xml:space="preserve">
          <source>Dump</source>
          <target state="translated">Dump</target>
        </trans-unit>
        <trans-unit id="1efe71a094bc514414a290528c9e86553e7520b4" translate="yes" xml:space="preserve">
          <source>Dump returns a string that contains a hex dump of the given data. The format of the hex dump matches the output of `hexdump -C` on the command line.</source>
          <target state="translated">Dump 返回一个包含给定数据的十六进制转储的字符串。十六进制转储的格式与命令行中`hexdump -C`的输出一致。</target>
        </trans-unit>
        <trans-unit id="a3b283785980f70b0d4303b4bc4c441375213c3f" translate="yes" xml:space="preserve">
          <source>DumpRequest</source>
          <target state="translated">DumpRequest</target>
        </trans-unit>
        <trans-unit id="3de7dbfc307f5235c1d6b683c171950e7f1ffd23" translate="yes" xml:space="preserve">
          <source>DumpRequest returns the given request in its HTTP/1.x wire representation. It should only be used by servers to debug client requests. The returned representation is an approximation only; some details of the initial request are lost while parsing it into an http.Request. In particular, the order and case of header field names are lost. The order of values in multi-valued headers is kept intact. HTTP/2 requests are dumped in HTTP/1.x form, not in their original binary representations.</source>
          <target state="translated">DumpRequest以HTTP/1.x线表示方式返回给定请求。它只能被服务器用来调试客户端请求。返回的表示方式只是一个近似值;在将其解析为 http.Request 时,会丢失初始请求的一些细节。特别是,会丢失头部字段名的顺序和大小写。多值头中的值的顺序则保持不变。HTTP/2请求以HTTP/1.x形式转储,而不是以原始的二进制表示。</target>
        </trans-unit>
        <trans-unit id="8617a69fd95544d86b25db256370774190ace264" translate="yes" xml:space="preserve">
          <source>DumpRequestOut</source>
          <target state="translated">DumpRequestOut</target>
        </trans-unit>
        <trans-unit id="76f5ce4e85d9829f54cc4eca908b5ee3db848cc0" translate="yes" xml:space="preserve">
          <source>DumpRequestOut is like DumpRequest but for outgoing client requests. It includes any headers that the standard http.Transport adds, such as User-Agent.</source>
          <target state="translated">DumpRequestOut 与 DumpRequest 类似,但适用于发出的客户端请求。它包括标准 http.Transport 添加的任何头信息,如 User-Agent。</target>
        </trans-unit>
        <trans-unit id="fab002c74edbf53a695bff854b73691ee5ff49db" translate="yes" xml:space="preserve">
          <source>DumpResponse</source>
          <target state="translated">DumpResponse</target>
        </trans-unit>
        <trans-unit id="b5cb2fa3b185da1849224df819e33e22048bed0a" translate="yes" xml:space="preserve">
          <source>DumpResponse is like DumpRequest but dumps a response.</source>
          <target state="translated">DumpResponse与DumpRequest类似,但转储的是响应。</target>
        </trans-unit>
        <trans-unit id="ca6f5764b6bb205859885185dfc165c84ecff79a" translate="yes" xml:space="preserve">
          <source>Dumper</source>
          <target state="translated">Dumper</target>
        </trans-unit>
        <trans-unit id="2d77075aac1401c0e2be5db28c0ababd2d200f0f" translate="yes" xml:space="preserve">
          <source>Dumper returns a WriteCloser that writes a hex dump of all written data to w. The format of the dump matches the output of `hexdump -C` on the command line.</source>
          <target state="translated">Dumper返回一个WriteCloser,这个WriteCloser将所有写入数据的十六进制转储写到w中,转储的格式与命令行中的`hexdump -C`的输出一致。</target>
        </trans-unit>
        <trans-unit id="1370004da76fa4f3b7a5180fd5436065ef4c7d5b" translate="yes" xml:space="preserve">
          <source>Duration</source>
          <target state="translated">Duration</target>
        </trans-unit>
        <trans-unit id="d39bc61f4df92670a47d7dbb0340a26919244359" translate="yes" xml:space="preserve">
          <source>Duration defines a time.Duration flag with specified name, default value, and usage string. The return value is the address of a time.Duration variable that stores the value of the flag. The flag accepts a value acceptable to time.ParseDuration.</source>
          <target state="translated">Duration定义了一个time.Duration标志,具有指定的名称、默认值和使用字符串。返回值是存储标志值的time.Duration变量的地址。该标志接受一个time.ParseDuration可以接受的值。</target>
        </trans-unit>
        <trans-unit id="5195f3e65af1376bff8d2aff52391b3e64e72714" translate="yes" xml:space="preserve">
          <source>Duration flags accept any input valid for time.ParseDuration.</source>
          <target state="translated">Duration标志接受对time.ParseDuration有效的任何输入。</target>
        </trans-unit>
        <trans-unit id="1e5d634713acf3a5ece781c540b83969479fdedd" translate="yes" xml:space="preserve">
          <source>Duration.Hours</source>
          <target state="translated">Duration.Hours</target>
        </trans-unit>
        <trans-unit id="2c1d62d4bb9ed259d65dad912f99ab2031510c6d" translate="yes" xml:space="preserve">
          <source>Duration.Microseconds</source>
          <target state="translated">Duration.Microseconds</target>
        </trans-unit>
        <trans-unit id="e57edc698610dc3ec891f225a3bbb7cd9e3f5900" translate="yes" xml:space="preserve">
          <source>Duration.Milliseconds</source>
          <target state="translated">Duration.Milliseconds</target>
        </trans-unit>
        <trans-unit id="767678f246489f2d369059f5a4e433ba83f27dc4" translate="yes" xml:space="preserve">
          <source>Duration.Minutes</source>
          <target state="translated">Duration.Minutes</target>
        </trans-unit>
        <trans-unit id="15796e7613718dc9316e8a9259c9d1872dc9d2c5" translate="yes" xml:space="preserve">
          <source>Duration.Nanoseconds</source>
          <target state="translated">Duration.Nanoseconds</target>
        </trans-unit>
        <trans-unit id="1621f40b95946ff6207b9c656512e487ad66ce32" translate="yes" xml:space="preserve">
          <source>Duration.Round</source>
          <target state="translated">Duration.Round</target>
        </trans-unit>
        <trans-unit id="6557fa3a9db485bd65efba25bd2fc6fec3d0de9b" translate="yes" xml:space="preserve">
          <source>Duration.Seconds</source>
          <target state="translated">Duration.Seconds</target>
        </trans-unit>
        <trans-unit id="c5f06d8a52e2242c2cad632dade4de2fcd473e3a" translate="yes" xml:space="preserve">
          <source>Duration.String</source>
          <target state="translated">Duration.String</target>
        </trans-unit>
        <trans-unit id="565c13e1bc7186cba22a3e856369e0913d16cff5" translate="yes" xml:space="preserve">
          <source>Duration.Truncate</source>
          <target state="translated">Duration.Truncate</target>
        </trans-unit>
        <trans-unit id="53a5653f95d5c0243363897afbc01308538ab04d" translate="yes" xml:space="preserve">
          <source>DurationVar defines a time.Duration flag with specified name, default value, and usage string. The argument p points to a time.Duration variable in which to store the value of the flag. The flag accepts a value acceptable to time.ParseDuration.</source>
          <target state="translated">DurationVar定义了一个time.Duration标志,具有指定的名称、默认值和用法字符串。参数p指向一个time.Duration变量,用来存储标志的值。该标志接受一个time.ParseDuration可以接受的值。</target>
        </trans-unit>
        <trans-unit id="96fcaca56da697a54efbf68b6f544825c513abfd" translate="yes" xml:space="preserve">
          <source>During a particular build, the following words are satisfied:</source>
          <target state="translated">在某一建造过程中,满足了以下词语。</target>
        </trans-unit>
        <trans-unit id="6bfb7cfcb687419a46176f2be1f3191cd5d7b4b4" translate="yes" xml:space="preserve">
          <source>During execution functions are found in two function maps: first in the template, then in the global function map. By default, no functions are defined in the template but the Funcs method can be used to add them.</source>
          <target state="translated">在执行过程中,函数在两个函数图中找到:首先在模板中,然后在全局函数图中。默认情况下,模板中没有定义任何函数,但可以使用Funcs方法来添加它们。</target>
        </trans-unit>
        <trans-unit id="7df0b06929972c9b30315986c52f79ebdf35f7e8" translate="yes" xml:space="preserve">
          <source>Dx returns r's width.</source>
          <target state="translated">Dx 返回 r 的宽度。</target>
        </trans-unit>
        <trans-unit id="f41c6da4d6741acc126c0422196933be598f6153" translate="yes" xml:space="preserve">
          <source>Dy returns r's height.</source>
          <target state="translated">Dy返回r的高度。</target>
        </trans-unit>
        <trans-unit id="32b6bc7918b98bfd40dd37e996810216132462b9" translate="yes" xml:space="preserve">
          <source>Dyn.Tag</source>
          <target state="translated">Dyn.Tag</target>
        </trans-unit>
        <trans-unit id="5222f10256a08491c36be3639e64bc2ebff12623" translate="yes" xml:space="preserve">
          <source>DynString returns the strings listed for the given tag in the file's dynamic section.</source>
          <target state="translated">DynString 返回文件动态部分中给定标签列出的字符串。</target>
        </trans-unit>
        <trans-unit id="db202bdad98e296b9a3563abcfa107dc6f7dc00b" translate="yes" xml:space="preserve">
          <source>DynamicSymbols returns the dynamic symbol table for f. The symbols will be listed in the order they appear in f.</source>
          <target state="translated">DynamicSymbols返回f的动态符号表,符号将按照在f中出现的顺序排列。</target>
        </trans-unit>
        <trans-unit id="4c378c0dd0f7970369ff718ef4a5dbb0ea2f5ff7" translate="yes" xml:space="preserve">
          <source>ELF32 Compression header.</source>
          <target state="translated">ELF32 压缩头。</target>
        </trans-unit>
        <trans-unit id="d9805c8c21043a51a02b54b3aeec72a98f35ab90" translate="yes" xml:space="preserve">
          <source>ELF32 Dynamic structure. The &quot;.dynamic&quot; section contains an array of them.</source>
          <target state="translated">ELF32动态结构。&quot;.dynamic &quot;部分包含一个数组。</target>
        </trans-unit>
        <trans-unit id="01cfc9c73c1836df918dbdb1ff394e536b5e750e" translate="yes" xml:space="preserve">
          <source>ELF32 File header.</source>
          <target state="translated">ELF32 文件头。</target>
        </trans-unit>
        <trans-unit id="a95b78b9e8d26713e54bc7d6dbf4a94c300ad3cc" translate="yes" xml:space="preserve">
          <source>ELF32 Program header.</source>
          <target state="translated">ELF32 程序头。</target>
        </trans-unit>
        <trans-unit id="2562dbbf0dcee0f2e54eb9f48338f7def8b4bbc4" translate="yes" xml:space="preserve">
          <source>ELF32 Relocations that don't need an addend field.</source>
          <target state="translated">ELF32 不需要添加字段的搬迁。</target>
        </trans-unit>
        <trans-unit id="794563b14439e28188bc640bdadb9bb63d680d95" translate="yes" xml:space="preserve">
          <source>ELF32 Relocations that need an addend field.</source>
          <target state="translated">ELF32 需要添加字段的搬迁。</target>
        </trans-unit>
        <trans-unit id="cd616263209dd900d196fadf9047398dfd2521b2" translate="yes" xml:space="preserve">
          <source>ELF32 Section header.</source>
          <target state="translated">ELF32节头。</target>
        </trans-unit>
        <trans-unit id="3e8a6d1fbb884fcd546a737b6627f180033dfe18" translate="yes" xml:space="preserve">
          <source>ELF32 Symbol.</source>
          <target state="translated">ELF32符号。</target>
        </trans-unit>
        <trans-unit id="95e34cade68c612b8b31a15c7b0be30ee7d2c449" translate="yes" xml:space="preserve">
          <source>ELF64 Compression header.</source>
          <target state="translated">ELF64 压缩头。</target>
        </trans-unit>
        <trans-unit id="8bff0b09a1d753cf9e7269a9f278d58013217bfa" translate="yes" xml:space="preserve">
          <source>ELF64 Dynamic structure. The &quot;.dynamic&quot; section contains an array of them.</source>
          <target state="translated">ELF64 动态结构。&quot;.dynamic &quot;部分包含一个数组。</target>
        </trans-unit>
        <trans-unit id="c53643c180d85eb5f05c20f66f7443ee9f9d2d90" translate="yes" xml:space="preserve">
          <source>ELF64 Program header.</source>
          <target state="translated">ELF64 程序头。</target>
        </trans-unit>
        <trans-unit id="d53dc77020d82faf2a8fb56ce571eac7a4c406fd" translate="yes" xml:space="preserve">
          <source>ELF64 Section header.</source>
          <target state="translated">ELF64 节头。</target>
        </trans-unit>
        <trans-unit id="8b38ac0b54bc34aaae042028741c36e4940cce07" translate="yes" xml:space="preserve">
          <source>ELF64 file header.</source>
          <target state="translated">ELF64文件头。</target>
        </trans-unit>
        <trans-unit id="429907c0b3e6b47962dd713a0f45efbc999d98d2" translate="yes" xml:space="preserve">
          <source>ELF64 relocations that don't need an addend field.</source>
          <target state="translated">ELF64重新定位,不需要附加字段。</target>
        </trans-unit>
        <trans-unit id="0c6ddbd3dc62aa9dd229b61e1dbcf4930eb356c0" translate="yes" xml:space="preserve">
          <source>ELF64 relocations that need an addend field.</source>
          <target state="translated">ELF64重新定位,需要一个附加字段。</target>
        </trans-unit>
        <trans-unit id="8185d8c0b42b58b3e2cb27fd3b6a714d1ecb3d6b" translate="yes" xml:space="preserve">
          <source>ELF64 symbol table entries.</source>
          <target state="translated">ELF64符号表条目。</target>
        </trans-unit>
        <trans-unit id="a42db658ea278203e5963e74a91e5d4cb9677618" translate="yes" xml:space="preserve">
          <source>EOF is the error returned by Read when no more input is available. (Read must return EOF itself, not an error wrapping EOF, because callers will test for EOF using ==.) Functions should return EOF only to signal a graceful end of input. If the EOF occurs unexpectedly in a structured data stream, the appropriate error is either ErrUnexpectedEOF or some other error giving more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ef067c48898a4eb1b2ec281361b9d7232d849b" translate="yes" xml:space="preserve">
          <source>EOF is the error returned by Read when no more input is available. Functions should return EOF only to signal a graceful end of input. If the EOF occurs unexpectedly in a structured data stream, the appropriate error is either ErrUnexpectedEOF or some other error giving more detail.</source>
          <target state="translated">EOF是Read在没有更多输入时返回的错误。函数应该只返回EOF来表示输入的优雅结束。如果EOF在结构化数据流中意外发生,相应的错误是ErrUnexpectedEOF或其他一些给出更多细节的错误。</target>
        </trans-unit>
        <trans-unit id="b9b211da674bf7d5d2d22532b4017302669c9ac7" translate="yes" xml:space="preserve">
          <source>Each Cond has an associated Locker L (often a *Mutex or *RWMutex), which must be held when changing the condition and when calling the Wait method.</source>
          <target state="translated">每个Cond都有一个相关的Locker L(通常是一个*Mutex或*RWMutex),当改变条件和调用Wait方法时,必须持有这个Locker L。</target>
        </trans-unit>
        <trans-unit id="4e52e02d18303ae982c6630c3a803a841b76db7a" translate="yes" xml:space="preserve">
          <source>Each ExtraNames entry is encoded as an individual RDN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ce2a7553dfc359fede4c116e264e25c2fea211" translate="yes" xml:space="preserve">
          <source>Each Float value also has a precision, rounding mode, and accuracy. The precision is the maximum number of mantissa bits available to represent the value. The rounding mode specifies how a result should be rounded to fit into the mantissa bits, and accuracy describes the rounding error with respect to the exact result.</source>
          <target state="translated">每个Float值也有一个精度、四舍五入模式和精度。精度是可用来表示值的最大曼提萨位数。四舍五入模式指定了如何将结果四舍五入到万字符位中,而精度则描述了相对于精确结果的四舍五入误差。</target>
        </trans-unit>
        <trans-unit id="c22b6da18b15dfcb152711437d1c5b6b668025fa" translate="yes" xml:space="preserve">
          <source>Each Profile has a unique name. A few profiles are predefined:</source>
          <target state="translated">每个配置文件都有一个独特的名称。一些配置文件是预定义的。</target>
        </trans-unit>
        <trans-unit id="597849a2d39b0720e33ee0f49cbd2ee09976a78f" translate="yes" xml:space="preserve">
          <source>Each Seed value is local to a single process and cannot be serialized or otherwise recreated in a different process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27822f6c94a0fc0349a0c96e70c540078b10e05" translate="yes" xml:space="preserve">
          <source>Each Time has associated with it a Location, consulted when computing the presentation form of the time, such as in the Format, Hour, and Year methods. The methods Local, UTC, and In return a Time with a specific location. Changing the location in this way changes only the presentation; it does not change the instant in time being denoted and therefore does not affect the computations described in earlier paragraphs.</source>
          <target state="translated">每一个时间都有一个关联的位置,在计算时间的表现形式时,比如在格式、小时和年份方法中,都会参考这个位置。Local、UTC和In等方法会返回一个带有特定位置的时间。以这种方式改变位置只是改变了表现形式,它不会改变被表示的时间瞬间,因此不会影响前面段落中描述的计算。</target>
        </trans-unit>
        <trans-unit id="18b4e64eee2924ca83b54ba5d82d34968349afb6" translate="yes" xml:space="preserve">
          <source>Each directory listed in the Go path must have a prescribed structure:</source>
          <target state="translated">围棋路径中列出的每个目录都必须有规定的结构。</target>
        </trans-unit>
        <trans-unit id="213a05a710a8d655cac8796257f4d0cc430d2e4a" translate="yes" xml:space="preserve">
          <source>Each metric key also has a &quot;kind&quot; that describes the format of the metric's value. In the interest of not breaking users of this package, the &quot;kind&quot; for a given metric is guaranteed not to change. If it must change, then a new metric will be introduced with a new key and a new &quot;kind.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a47e0b159e036354bb03ab8fec410aa5efbc37" translate="yes" xml:space="preserve">
          <source>Each span of unindented non-blank lines is converted into a single paragraph. There is one exception to the rule: a span that consists of a single line, is followed by another paragraph span, begins with a capital letter, and contains no punctuation other than parentheses and commas is formatted as a heading.</source>
          <target state="translated">每一个未加尾巴的非空行的跨度都被转换成一个段落。这一规则有一个例外:由一行组成的跨度,后面是另一个段落跨度,以大写字母开头,除括号和逗号外不含任何标点符号的跨度按标题格式排列。</target>
        </trans-unit>
        <trans-unit id="64b283319794ff9f90a2b889c357e1eadff02062" translate="yes" xml:space="preserve">
          <source>Each subtest and sub-benchmark has a unique name: the combination of the name of the top-level test and the sequence of names passed to Run, separated by slashes, with an optional trailing sequence number for disambiguation.</source>
          <target state="translated">每个子测试和子基准都有一个独特的名称:顶层测试的名称和传递给Run的名称序列的组合,用斜线隔开,并有一个可选的尾部序列号,用于消除歧义。</target>
        </trans-unit>
        <trans-unit id="f64692308609e7cd9aa6b965c0976bf09ca797d9" translate="yes" xml:space="preserve">
          <source>Each template is named by a string specified when it is created. Also, each template is associated with zero or more other templates that it may invoke by name; such associations are transitive and form a name space of templates.</source>
          <target state="translated">每个模板在创建时由一个字符串命名。同时,每个模板还与零个或多个其他模板相关联,它可以通过名称调用这些模板;这种关联是转折性的,并形成一个模板的名称空间。</target>
        </trans-unit>
        <trans-unit id="dfe068281c7912e37aff13438f1165b9cae6281c" translate="yes" xml:space="preserve">
          <source>Each write is written to each listed writer, one at a time. If a listed writer returns an error, that overall write operation stops and returns the error; it does not continue down the list.</source>
          <target state="translated">每一次写都会写到每个列出的写入器,一次一个。如果一个列出的写入器返回错误,该整体写入操作就会停止并返回错误,它不会继续往下写。</target>
        </trans-unit>
        <trans-unit id="8fea9dce2cfc1e5514afba8c4f79122c1f6660c7" translate="yes" xml:space="preserve">
          <source>Edge cases for s and sep (for example, empty strings) are handled as described in the documentation for Split.</source>
          <target state="translated">s和sep的边缘情况(例如,空字符串)按照Split的文档中的描述进行处理。</target>
        </trans-unit>
        <trans-unit id="e37e08f3d79b0b879d0cbc05f9e597346cc0a476" translate="yes" xml:space="preserve">
          <source>Edge cases for s and sep (for example, empty strings) are handled as described in the documentation for SplitAfter.</source>
          <target state="translated">s和sep的边缘情况(例如,空字符串)按照SplitAfter文档中的描述进行处理。</target>
        </trans-unit>
        <trans-unit id="62b526e2f1b563d78f9affc599c0f080c53c3770" translate="yes" xml:space="preserve">
          <source>Elem returns element type of array a.</source>
          <target state="translated">Elem返回数组a的元素类型。</target>
        </trans-unit>
        <trans-unit id="2c8688004f9a6c08c6f8b553e5f27b9522194baf" translate="yes" xml:space="preserve">
          <source>Elem returns the element type for the given pointer p.</source>
          <target state="translated">Elem 返回给定指针 p 的元素类型。</target>
        </trans-unit>
        <trans-unit id="4d8af3898701d186c1b2aa25d7c01ba7a6c647ba" translate="yes" xml:space="preserve">
          <source>Elem returns the element type of channel c.</source>
          <target state="translated">Elem返回通道c的元素类型。</target>
        </trans-unit>
        <trans-unit id="06df7045855a339d28ddf7bceaed3a18eca395ea" translate="yes" xml:space="preserve">
          <source>Elem returns the element type of map m.</source>
          <target state="translated">Elem返回map m的元素类型。</target>
        </trans-unit>
        <trans-unit id="1d9476b48442b612f54821e3019f01f37bd352c7" translate="yes" xml:space="preserve">
          <source>Elem returns the element type of slice s.</source>
          <target state="translated">Elem返回片s的元素类型。</target>
        </trans-unit>
        <trans-unit id="6b3b30426371820daeb94800f4f247d67b378492" translate="yes" xml:space="preserve">
          <source>Elem returns the value that the interface v contains or that the pointer v points to. It panics if v's Kind is not Interface or Ptr. It returns the zero Value if v is nil.</source>
          <target state="translated">Elem 返回 v 包含的接口或 v 指向的指针的值。如果v的Kind不是Interface或Ptr,它就会恐慌。如果v是nil,则返回零值。</target>
        </trans-unit>
        <trans-unit id="362386365af358238b7934a96826d937830ebf3a" translate="yes" xml:space="preserve">
          <source>Element is an element of a linked list.</source>
          <target state="translated">元素是一个链接列表的元素。</target>
        </trans-unit>
        <trans-unit id="3d304236b20204aaee01a3be7e8fa030c924f00d" translate="yes" xml:space="preserve">
          <source>Elements omitted from the value are assumed to be zero or, when zero is impossible, one, so parsing &quot;3:04pm&quot; returns the time corresponding to Jan 1, year 0, 15:04:00 UTC (note that because the year is 0, this time is before the zero Time). Years must be in the range 0000..9999. The day of the week is checked for syntax but it is otherwise ignored.</source>
          <target state="translated">从值中省略的元素被假定为0,或者当0不可能时,假定为1,因此解析 &quot;3:04pm &quot;返回对应于0年1月1日15:04:00 UTC的时间(注意,因为年份是0,所以这个时间在0 Time之前)。年份必须在0000...9999的范围内。一周中的某一天会被检查语法,但其他情况下会被忽略。</target>
        </trans-unit>
        <trans-unit id="9c41a9a832aad67aa5d6749874d5f0c9e1f27299" translate="yes" xml:space="preserve">
          <source>Embedded one or more files into a file system:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="714dc931f98b9f53a323ada665f744f785f104e3" translate="yes" xml:space="preserve">
          <source>Embedded reports whether the variable is an embedded field.</source>
          <target state="translated">内嵌式报告变量是否为内嵌式字段。</target>
        </trans-unit>
        <trans-unit id="1a91fd75faca93aa3f92e6209ae4a04b05729483" translate="yes" xml:space="preserve">
          <source>Embedded returns the i'th embedded defined (*Named) type of interface t for 0 &amp;lt;= i &amp;lt; t.NumEmbeddeds(). The result is nil if the i'th embedded type is not a defined type.</source>
          <target state="translated">对于0 &amp;lt;= i &amp;lt;t.NumEmbeddeds（），Embedded返回接口t的第i个嵌入式定义（*命名）类型。如果第i个嵌入式类型不是定义的类型，则结果为nil。</target>
        </trans-unit>
        <trans-unit id="2ad1755ca44b573afbc8198d2b54e334f6a6b246" translate="yes" xml:space="preserve">
          <source>EmbeddedType returns the i'th embedded type of interface t for 0 &amp;lt;= i &amp;lt; t.NumEmbeddeds().</source>
          <target state="translated">EmbeddedType为0 &amp;lt;= i &amp;lt;t.NumEmbeddeds（）返回接口t的第i个嵌入式类型。</target>
        </trans-unit>
        <trans-unit id="4ec4914e219676149594b610a8a6b5dbd000d475" translate="yes" xml:space="preserve">
          <source>Embedding one file into a slice of bytes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a22fa9f71ec0a146d175e8a640c575f179612b1" translate="yes" xml:space="preserve">
          <source>Embedding one file into a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbca94fd7fa6bc879ff012dca165d33cc17634f8" translate="yes" xml:space="preserve">
          <source>Emerg logs a message with severity LOG_EMERG, ignoring the severity passed to New.</source>
          <target state="translated">Emerg记录一条严重性为LOG_EMERG的消息,忽略传递给New的严重性。</target>
        </trans-unit>
        <trans-unit id="669c16620b7df41e107993839f261f8e6f1e78cd" translate="yes" xml:space="preserve">
          <source>Empty lines are never continued.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="208dc8efabe1038228cedca52f60b871bf5c8251" translate="yes" xml:space="preserve">
          <source>Empty reports whether t is the empty interface.</source>
          <target state="translated">Empty报告t是否为空接口。</target>
        </trans-unit>
        <trans-unit id="bf63858a4ff105075e4707dac909a52be21cbc8f" translate="yes" xml:space="preserve">
          <source>Empty reports whether t is the empty interface. The interface must have been completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6164cdafbad9c2d77fab44868057e1a865dab256" translate="yes" xml:space="preserve">
          <source>Empty reports whether the rectangle contains no points.</source>
          <target state="translated">空报告矩形是否不包含任何点。</target>
        </trans-unit>
        <trans-unit id="aa1a82640541370ae1891158035802a1ac918358" translate="yes" xml:space="preserve">
          <source>Empty strings:</source>
          <target state="translated">空字符串。</target>
        </trans-unit>
        <trans-unit id="1e0a04a02a4b36d462dfbd7a50f1ba95ab97db02" translate="yes" xml:space="preserve">
          <source>EmptyOpContext returns the zero-width assertions satisfied at the position between the runes r1 and r2. Passing r1 == -1 indicates that the position is at the beginning of the text. Passing r2 == -1 indicates that the position is at the end of the text.</source>
          <target state="translated">EmptyOpContext 返回在符文 r1 和 r2 之间位置满足的零宽度断言。通过r1 ==-1表示该位置在文本的开头。通过r2 ==-1表示该位置在文本的结尾。</target>
        </trans-unit>
        <trans-unit id="782e817cf07d938d62f7f0517e130f19ec6b4cf1" translate="yes" xml:space="preserve">
          <source>Encode</source>
          <target state="translated">Encode</target>
        </trans-unit>
        <trans-unit id="28107c7a586749b6433a5733b287757fb842042a" translate="yes" xml:space="preserve">
          <source>Encode calls Flush before returning.</source>
          <target state="translated">Encode在返回之前调用Flush。</target>
        </trans-unit>
        <trans-unit id="8075b5e09ea3f63f78c89a2ddc490859d0c31bf8" translate="yes" xml:space="preserve">
          <source>Encode encodes src into EncodedLen(len(src)) bytes of dst. As a convenience, it returns the number of bytes written to dst, but this value is always EncodedLen(len(src)). Encode implements hexadecimal encoding.</source>
          <target state="translated">Encode 将 src 编码成 dst 的 EncodedLen(len(src))字节。为了方便起见,它返回写入 dst 的字节数,但这个值总是 EncodedLen(len(src))。Encode 实现十六进制编码。</target>
        </trans-unit>
        <trans-unit id="bad1f060c6238760ff000a670071a44f8806160b" translate="yes" xml:space="preserve">
          <source>Encode encodes src into at most MaxEncodedLen(len(src)) bytes of dst, returning the actual number of bytes written.</source>
          <target state="translated">Encode最多将src编码成dst的MaxEncodedLen(len(src))字节,返回实际写入的字节数。</target>
        </trans-unit>
        <trans-unit id="eb047c3c3d4f31e4290959040afdbcc1d45c6483" translate="yes" xml:space="preserve">
          <source>Encode encodes src using the encoding enc, writing EncodedLen(len(src)) bytes to dst.</source>
          <target state="translated">使用编码enc对src进行编码,将EncodedLen(len(src))字节写入dst。</target>
        </trans-unit>
        <trans-unit id="37cb8fb5926768be9ba7db2b847e6b4f7e61df93" translate="yes" xml:space="preserve">
          <source>Encode encodes the values into &amp;ldquo;URL encoded&amp;rdquo; form (&quot;bar=baz&amp;amp;foo=quux&quot;) sorted by key.</source>
          <target state="translated">编码将值编码为按键排序的&amp;ldquo; URL编码&amp;rdquo;形式（&amp;ldquo; bar = baz＆foo = quux&amp;rdquo;）。</target>
        </trans-unit>
        <trans-unit id="3cacdbbc19179ef246a49e3b221538113b7b2aea" translate="yes" xml:space="preserve">
          <source>Encode returns the UTF-16 encoding of the Unicode code point sequence s.</source>
          <target state="translated">Encode返回Unicode码点序列s的UTF-16编码。</target>
        </trans-unit>
        <trans-unit id="7e733c09d68cd91421a4d1814d8e874c9b899a79" translate="yes" xml:space="preserve">
          <source>Encode returns the encoded-word form of s. If s is ASCII without special characters, it is returned unchanged. The provided charset is the IANA charset name of s. It is case insensitive.</source>
          <target state="translated">Encode 返回 s 的编码字形式。如果 s 是 ASCII 字符,没有特殊字符,则不变返回。提供的字符集是s的IANA字符集名称,不区分大小写。</target>
        </trans-unit>
        <trans-unit id="cb435f969670ff1e290f4a330dd20e7ada06128c" translate="yes" xml:space="preserve">
          <source>Encode transmits the data item represented by the empty interface value, guaranteeing that all necessary type information has been transmitted first. Passing a nil pointer to Encoder will panic, as they cannot be transmitted by gob.</source>
          <target state="translated">Encode传输空接口值所代表的数据项,保证所有必要的类型信息已经先传输完毕。传递给Encoder的指针为nil,就会慌乱,因为它们不能被gob传输。</target>
        </trans-unit>
        <trans-unit id="82052ebc621525b1a00e64a785a78506cb678614" translate="yes" xml:space="preserve">
          <source>Encode writes the Image m to w in GIF format.</source>
          <target state="translated">Encode将图像m写入GIF格式的w。</target>
        </trans-unit>
        <trans-unit id="37c9bfb263c03b8e0db64db584d5ef43161f60ee" translate="yes" xml:space="preserve">
          <source>Encode writes the Image m to w in JPEG 4:2:0 baseline format with the given options. Default parameters are used if a nil *Options is passed.</source>
          <target state="translated">Encode使用给定的选项以JPEG 4:2:0基线格式将图像m写入w。如果传递了一个nil *Options,则使用默认参数。</target>
        </trans-unit>
        <trans-unit id="b163cff27e48e422e82d5a5f5dd2edfa89cd1991" translate="yes" xml:space="preserve">
          <source>Encode writes the Image m to w in PNG format.</source>
          <target state="translated">Encode将图像m以PNG格式写入w。</target>
        </trans-unit>
        <trans-unit id="a5cbca07b15679a333d2f3c1093e760dc8fed50b" translate="yes" xml:space="preserve">
          <source>Encode writes the Image m to w in PNG format. Any Image may be encoded, but images that are not image.NRGBA might be encoded lossily.</source>
          <target state="translated">Encode以PNG格式将图像m写入w。任何图像都可以被编码,但不是image.NRGBA的图像可能会被损失编码。</target>
        </trans-unit>
        <trans-unit id="9c8d80de5513517293c9312bce84a60a51e18c30" translate="yes" xml:space="preserve">
          <source>Encode writes the JSON encoding of v to the stream, followed by a newline character.</source>
          <target state="translated">Encode 将 v 的 JSON 编码写入流,后面是一个换行符。</target>
        </trans-unit>
        <trans-unit id="3431bd1ddef07774c0075a0d8cf7cdb745dd66d0" translate="yes" xml:space="preserve">
          <source>Encode writes the PEM encoding of b to out.</source>
          <target state="translated">Encode 将 b 的 PEM 编码写入 out。</target>
        </trans-unit>
        <trans-unit id="fc285ed2b0a9eba61cc91978b1228dfe4899cae1" translate="yes" xml:space="preserve">
          <source>Encode writes the XML encoding of v to the stream.</source>
          <target state="translated">Encode 将 v 的 XML 编码写入流。</target>
        </trans-unit>
        <trans-unit id="1290fb5a5c4f28124f4f2167306908f4b7e3cd0b" translate="yes" xml:space="preserve">
          <source>EncodeAll writes the images in g to w in GIF format with the given loop count and delay between frames.</source>
          <target state="translated">EncodeAll将g中的图像以GIF格式写入w中,并给出循环次数和帧间延迟。</target>
        </trans-unit>
        <trans-unit id="ff1901b308e73262ddff5a1580f7534a541e698b" translate="yes" xml:space="preserve">
          <source>EncodeElement calls Flush before returning.</source>
          <target state="translated">EncodeElement在返回之前调用Flush。</target>
        </trans-unit>
        <trans-unit id="c581857a42291416b5012a1bfc65819fabcce520" translate="yes" xml:space="preserve">
          <source>EncodeElement writes the XML encoding of v to the stream, using start as the outermost tag in the encoding.</source>
          <target state="translated">EncodeElement 将 v 的 XML 编码写入流,使用 start 作为编码中最外层的标签。</target>
        </trans-unit>
        <trans-unit id="ab51517ca16e7a4e5eb7b8d3ac937d2b26f7b298" translate="yes" xml:space="preserve">
          <source>EncodeRune</source>
          <target state="translated">EncodeRune</target>
        </trans-unit>
        <trans-unit id="892fa03e7fb8b3480b7b6140ff89c8c916479fd7" translate="yes" xml:space="preserve">
          <source>EncodeRune (OutOfRange)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f528704d795134046c2e2331ad94b8db1da56a1" translate="yes" xml:space="preserve">
          <source>EncodeRune returns the UTF-16 surrogate pair r1, r2 for the given rune. If the rune is not a valid Unicode code point or does not need encoding, EncodeRune returns U+FFFD, U+FFFD.</source>
          <target state="translated">EncodeRune返回给定符文的UTF-16代用对r1,r2。如果符文不是有效的Unicode码点或不需要编码,EncodeRune返回U+FFFD,U+FFFD。</target>
        </trans-unit>
        <trans-unit id="6060b40f095e80d112f236f2a6251b776b23eda3" translate="yes" xml:space="preserve">
          <source>EncodeRune writes into p (which must be large enough) the UTF-8 encoding of the rune. If the rune is out of range, it writes the encoding of RuneError. It returns the number of bytes written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8221ae44d390e63454c4282bd9104822f9a4df9" translate="yes" xml:space="preserve">
          <source>EncodeRune writes into p (which must be large enough) the UTF-8 encoding of the rune. It returns the number of bytes written.</source>
          <target state="translated">EncodeRune将符文的UTF-8编码写入p(必须足够大)。它返回写入的字节数。</target>
        </trans-unit>
        <trans-unit id="ea5fe709be23ce3bc5ba98960e96ced13416a04d" translate="yes" xml:space="preserve">
          <source>EncodeToMemory returns the PEM encoding of b.</source>
          <target state="translated">EncodeToMemory 返回 b 的 PEM 编码。</target>
        </trans-unit>
        <trans-unit id="324c8a3fb19979327232b44bb8a31c381b37697d" translate="yes" xml:space="preserve">
          <source>EncodeToString</source>
          <target state="translated">EncodeToString</target>
        </trans-unit>
        <trans-unit id="3dfcea8813ae6722c184e6e06a17982d9d632f08" translate="yes" xml:space="preserve">
          <source>EncodeToString returns the base32 encoding of src.</source>
          <target state="translated">EncodeToString 返回 src 的 base32 编码。</target>
        </trans-unit>
        <trans-unit id="3bc135cc3be76ce5df9e8fd7f905545938abd518" translate="yes" xml:space="preserve">
          <source>EncodeToString returns the base64 encoding of src.</source>
          <target state="translated">EncodeToString 返回 src 的 base64 编码。</target>
        </trans-unit>
        <trans-unit id="f3843839ed2a2f00b8aef2ea4e6ecf9c9ab4e04b" translate="yes" xml:space="preserve">
          <source>EncodeToString returns the hexadecimal encoding of src.</source>
          <target state="translated">EncodeToString 返回 src 的十六进制编码。</target>
        </trans-unit>
        <trans-unit id="19fcb6484006494d394978f1704e4ed9b4f5539f" translate="yes" xml:space="preserve">
          <source>EncodeToken allows writing a ProcInst with Target set to &quot;xml&quot; only as the first token in the stream.</source>
          <target state="translated">EncodeToken允许写一个ProcInst,并将Target设置为 &quot;xml&quot;,只作为流中的第一个token。</target>
        </trans-unit>
        <trans-unit id="3c85b7ab7de6f179653955c1c25494b973fd6239" translate="yes" xml:space="preserve">
          <source>EncodeToken does not call Flush, because usually it is part of a larger operation such as Encode or EncodeElement (or a custom Marshaler's MarshalXML invoked during those), and those will call Flush when finished. Callers that create an Encoder and then invoke EncodeToken directly, without using Encode or EncodeElement, need to call Flush when finished to ensure that the XML is written to the underlying writer.</source>
          <target state="translated">EncodeToken 不会调用 Flush,因为通常它是 Encode 或 EncodeElement(或在这些操作中调用自定义 Marshaler 的 MarshalXML)等更大操作的一部分,这些操作完成后会调用 Flush。创建Encoder然后直接调用EncodeToken而不使用Encode或EncodeElement的调用者,需要在完成时调用Flush以确保XML被写入底层写作者。</target>
        </trans-unit>
        <trans-unit id="05059e24e38c8fd05c7837bf618707c5627060c0" translate="yes" xml:space="preserve">
          <source>EncodeToken writes the given XML token to the stream. It returns an error if StartElement and EndElement tokens are not properly matched.</source>
          <target state="translated">EncodeToken将给定的XML token写入流中,如果StartElement和EndElement token没有正确匹配,它将返回错误。如果StartElement和EndElement标记没有正确匹配,它将返回错误。</target>
        </trans-unit>
        <trans-unit id="0947a3c8c9b8bcd8c44bdd10335e323cd1ea461b" translate="yes" xml:space="preserve">
          <source>EncodeValue transmits the data item represented by the reflection value, guaranteeing that all necessary type information has been transmitted first. Passing a nil pointer to EncodeValue will panic, as they cannot be transmitted by gob.</source>
          <target state="translated">EncodeValue传输反射值所代表的数据项,保证所有必要的类型信息都已先传输。传递给EncodeValue的指针为nil,会出现慌乱,因为它们不能被gob传输。</target>
        </trans-unit>
        <trans-unit id="854b241316ad3d39a8ee266c3a44ddee623c1784" translate="yes" xml:space="preserve">
          <source>EncodedLen returns the length in bytes of the base32 encoding of an input buffer of length n.</source>
          <target state="translated">EncodedLen 返回长度为 n 的输入缓冲区的 base32 编码的字节长度。</target>
        </trans-unit>
        <trans-unit id="8a4f417b33e58db9c0c31f29eff4ddd8669f0b97" translate="yes" xml:space="preserve">
          <source>EncodedLen returns the length in bytes of the base64 encoding of an input buffer of length n.</source>
          <target state="translated">EncodedLen 返回长度为 n 的输入缓冲区的 base64 编码的字节长度。</target>
        </trans-unit>
        <trans-unit id="485a353fee0c882183777b5b5993044af3a1bc75" translate="yes" xml:space="preserve">
          <source>EncodedLen returns the length of an encoding of n source bytes. Specifically, it returns n * 2.</source>
          <target state="translated">EncodedLen 返回 n 个源字节的编码长度。具体来说,它返回n*2。</target>
        </trans-unit>
        <trans-unit id="7dca2524a7e133f2714375c509deec12458fd552" translate="yes" xml:space="preserve">
          <source>Encoder</source>
          <target state="translated">Encoder</target>
        </trans-unit>
        <trans-unit id="2b7ddfe809165179e7cd2edadb5a1ced8b769f0f" translate="yes" xml:space="preserve">
          <source>Encoder configures encoding PNG images.</source>
          <target state="translated">编码器配置对PNG图像进行编码。</target>
        </trans-unit>
        <trans-unit id="ea245bab86e7e7cf2fd8d813fc2e95cb74506589" translate="yes" xml:space="preserve">
          <source>EncoderBuffer holds the buffers used for encoding PNG images.</source>
          <target state="translated">EncoderBuffer拥有用于编码PNG图像的缓冲区。</target>
        </trans-unit>
        <trans-unit id="0fc95babeebbbdab367284399ffa521502bf0828" translate="yes" xml:space="preserve">
          <source>EncoderBufferPool is an interface for getting and returning temporary instances of the EncoderBuffer struct. This can be used to reuse buffers when encoding multiple images.</source>
          <target state="translated">EncoderBufferPool是一个用于获取和返回EncoderBuffer结构的临时实例的接口。当对多个图像进行编码时,可以使用这个接口来重复使用缓冲区。</target>
        </trans-unit>
        <trans-unit id="c2226a4e1fe15dc87148f967dace15e6586e72c4" translate="yes" xml:space="preserve">
          <source>Encoding Details</source>
          <target state="translated">编码细节</target>
        </trans-unit>
        <trans-unit id="8ca66aaccc75b682fb570d9fde3184c72d629e9c" translate="yes" xml:space="preserve">
          <source>Encoding.DecodeString</source>
          <target state="translated">Encoding.DecodeString</target>
        </trans-unit>
        <trans-unit id="614b34c455deb2c2a0b4963d69801751d69a4b89" translate="yes" xml:space="preserve">
          <source>Encoding.EncodeToString</source>
          <target state="translated">Encoding.EncodeToString</target>
        </trans-unit>
        <trans-unit id="321539e50d8c1a12cfc511582d9e7c710284774f" translate="yes" xml:space="preserve">
          <source>EncryptOAEP</source>
          <target state="translated">EncryptOAEP</target>
        </trans-unit>
        <trans-unit id="0bf129deb5a96b559ca75907380b4d67e23a7c95" translate="yes" xml:space="preserve">
          <source>EncryptOAEP encrypts the given message with RSA-OAEP.</source>
          <target state="translated">EncryptOAEP用RSA-OAEP对给定信息进行加密。</target>
        </trans-unit>
        <trans-unit id="29ba0f8c09bdf6f5427e8ade06bbd127f38f26a4" translate="yes" xml:space="preserve">
          <source>EncryptPEMBlock returns a PEM block of the specified type holding the given DER encoded data encrypted with the specified algorithm and password according to RFC 1423.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b690d741feab568e68ed01d4029afb22005c9ca" translate="yes" xml:space="preserve">
          <source>EncryptPEMBlock returns a PEM block of the specified type holding the given DER-encoded data encrypted with the specified algorithm and password.</source>
          <target state="translated">EncryptPEMBlock返回一个指定类型的PEM块,该块持有指定算法和密码加密的DER编码数据。</target>
        </trans-unit>
        <trans-unit id="fd27ac4708502cb57f465257f0dac3343fb711d7" translate="yes" xml:space="preserve">
          <source>EncryptPKCS1v15 encrypts the given message with RSA and the padding scheme from PKCS #1 v1.5. The message must be no longer than the length of the public modulus minus 11 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e11b5091381ca592414c841e33cc24a6a12dbfc" translate="yes" xml:space="preserve">
          <source>EncryptPKCS1v15 encrypts the given message with RSA and the padding scheme from PKCS#1 v1.5. The message must be no longer than the length of the public modulus minus 11 bytes.</source>
          <target state="translated">EncryptPKCS1v15用RSA和PKCS#1 v1.5的填充方案对给定的消息进行加密。消息必须不长于公共模数的长度减去11个字节。</target>
        </trans-unit>
        <trans-unit id="67f8660b6ee6f64ee979595238eebbe3f14e32b1" translate="yes" xml:space="preserve">
          <source>End marks the end of the operation represented by the Task.</source>
          <target state="translated">End标志着任务所代表的操作的结束。</target>
        </trans-unit>
        <trans-unit id="0eb51238ae16cda9710b593b0fe1c30e79e170be" translate="yes" xml:space="preserve">
          <source>End marks the end of the traced code region.</source>
          <target state="translated">End标志着跟踪代码区域的结束。</target>
        </trans-unit>
        <trans-unit id="fd4f40a6a53acbe4c60d207d7edd5710b46ca090" translate="yes" xml:space="preserve">
          <source>End returns the corresponding XML end element.</source>
          <target state="translated">End返回相应的XML结束元素。</target>
        </trans-unit>
        <trans-unit id="f1740f46ed43f406a6103daf9f32866a26a80d41" translate="yes" xml:space="preserve">
          <source>EndRequest notifies p that the request with the given id has been sent (or, if this is a server, received).</source>
          <target state="translated">EndRequest通知p,给定id的请求已经发送(或者,如果这是一个服务器,收到)。</target>
        </trans-unit>
        <trans-unit id="6e2e995a27065f521aa0378954a6196f51dbb39f" translate="yes" xml:space="preserve">
          <source>EndResponse notifies p that the response with the given id has been received (or, if this is a server, sent).</source>
          <target state="translated">EndResponse通知p,给定id的响应已经收到(或者,如果这是一个服务器,发送)。</target>
        </trans-unit>
        <trans-unit id="1d41e80c567cafec80d99e67b6763b670b344af0" translate="yes" xml:space="preserve">
          <source>Entry 0 is always nil, since file index 0 represents &quot;no file&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90fffc0a3145721a08d65aaabc9b277262428177" translate="yes" xml:space="preserve">
          <source>Entry returns the entry address of the function.</source>
          <target state="translated">Entry 返回函数的入口地址。</target>
        </trans-unit>
        <trans-unit id="f68f172a7016b7818d2dab5107eab4fa604b31d7" translate="yes" xml:space="preserve">
          <source>Environ returns a copy of strings representing the environment, in the form &quot;key=value&quot;.</source>
          <target state="translated">Environ以 &quot;key=value &quot;的形式返回一个代表环境的字符串副本。</target>
        </trans-unit>
        <trans-unit id="ec072bba7befaa68af710fe3549eb0491d7badd1" translate="yes" xml:space="preserve">
          <source>Environment Variables</source>
          <target state="translated">环境变量</target>
        </trans-unit>
        <trans-unit id="045f71994ee68b9a868e51f44a880e8642e83557" translate="yes" xml:space="preserve">
          <source>Eq reports whether p and q are equal.</source>
          <target state="translated">Eq报告p和q是否相等。</target>
        </trans-unit>
        <trans-unit id="d543b9a23b302f4f4fb69164e3e63071f6ee7f20" translate="yes" xml:space="preserve">
          <source>Eq reports whether r and s contain the same set of points. All empty rectangles are considered equal.</source>
          <target state="translated">Eq报告r和s是否包含同一组点。所有空的矩形都被认为是相等的。</target>
        </trans-unit>
        <trans-unit id="a472ce8d19d10484177dabb05deb4ee299058a0c" translate="yes" xml:space="preserve">
          <source>Equal</source>
          <target state="translated">Equal</target>
        </trans-unit>
        <trans-unit id="d008b976622977894ad1256a169eda07f451f5cf" translate="yes" xml:space="preserve">
          <source>Equal compares two MACs for equality without leaking timing information.</source>
          <target state="translated">Equal比较两个MAC是否平等,而不泄露时序信息。</target>
        </trans-unit>
        <trans-unit id="26406bd3b947d0c8a8751c20420b77c92f9cfb01" translate="yes" xml:space="preserve">
          <source>Equal reports whether a and b are the same length and contain the same bytes. A nil argument is equivalent to an empty slice.</source>
          <target state="translated">Equal报告a和b的长度是否相同,包含的字节数是否相同。nil参数相当于一个空分片。</target>
        </trans-unit>
        <trans-unit id="9338a726f14837219e3f0b5160e801035363d7a6" translate="yes" xml:space="preserve">
          <source>Equal reports whether ip and x are the same IP address. An IPv4 address and that same address in IPv6 form are considered to be equal.</source>
          <target state="translated">Equal报告ip和x是否为同一个IP地址。一个IPv4地址和IPv6形式的相同地址被认为是相等的。</target>
        </trans-unit>
        <trans-unit id="e236086365a108f382942e0e763834a0bce968eb" translate="yes" xml:space="preserve">
          <source>Equal reports whether oi and other represent the same identifier.</source>
          <target state="translated">Equal报告oi和other是否代表同一个标识符。</target>
        </trans-unit>
        <trans-unit id="db2e4eecaa4a5a14708c90f6a2195e69f045ff54" translate="yes" xml:space="preserve">
          <source>Equal reports whether priv and x have equivalent values. It ignores Precomputed values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f6a5a4d31e0fc41fe88d2afe276b5d9c0b2082" translate="yes" xml:space="preserve">
          <source>Equal reports whether priv and x have the same value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e71fc1eb6426faf4c13aea1472b71925e4d06c01" translate="yes" xml:space="preserve">
          <source>Equal reports whether pub and x have the same value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1871b89edc21087f0c972b71d0af0383183bbc" translate="yes" xml:space="preserve">
          <source>Equal reports whether t and u represent the same time instant. Two times can be equal even if they are in different locations. For example, 6:00 +0200 CEST and 4:00 UTC are Equal. See the documentation on the Time type for the pitfalls of using == with Time values; most code should use Equal instead.</source>
          <target state="translated">Equal报告t和u是否代表同一个时间瞬间。两个时间可以相等,即使它们在不同的位置。例如,6:00 +0200 CEST 和 4:00 UTC 是 Equal。请参阅时间类型的文档,了解在时间值中使用==的陷阱;大多数代码应该使用Equal代替。</target>
        </trans-unit>
        <trans-unit id="096bbf4cea8daa0a52be52e90f33989f1fdcaa58" translate="yes" xml:space="preserve">
          <source>Equal reports whether t and u represent the same time instant. Two times can be equal even if they are in different locations. For example, 6:00 +0200 and 4:00 UTC are Equal. See the documentation on the Time type for the pitfalls of using == with Time values; most code should use Equal instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23cfff5340c0037cc227c3c8375ad1960639be42" translate="yes" xml:space="preserve">
          <source>Equal reports whether v and w are equal according to JavaScript's === operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="901b20b6e47f8875259f27573f49fab5bbd14942" translate="yes" xml:space="preserve">
          <source>Equal reports whether x and y have identical structure.</source>
          <target state="translated">Equal报告x和y的结构是否相同。</target>
        </trans-unit>
        <trans-unit id="2acbd072fc0cea3dbceb299edaa5f0267951a317" translate="yes" xml:space="preserve">
          <source>EqualFold</source>
          <target state="translated">EqualFold</target>
        </trans-unit>
        <trans-unit id="eed7060e10c06b3be3fad568938e5007b9b6cdd4" translate="yes" xml:space="preserve">
          <source>EqualFold reports whether s and t, interpreted as UTF-8 strings, are equal under Unicode case-folding, which is a more general form of case-insensitivity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3cf184644e462de0ae310758745d4172f640f1" translate="yes" xml:space="preserve">
          <source>EqualFold reports whether s and t, interpreted as UTF-8 strings, are equal under Unicode case-folding.</source>
          <target state="translated">EqualFold报告在Unicode大小写折叠下,被解释为UTF-8的字符串s和t是否相等。</target>
        </trans-unit>
        <trans-unit id="a45c873903030f443476751c44e9df07e6be3d31" translate="yes" xml:space="preserve">
          <source>Erf returns the error function of x.</source>
          <target state="translated">Erf返回x的误差函数。</target>
        </trans-unit>
        <trans-unit id="ee0699badf2b941a080ee739ed6ea1875f351847" translate="yes" xml:space="preserve">
          <source>Erfc returns the complementary error function of x.</source>
          <target state="translated">Erfc返回x的互补误差函数。</target>
        </trans-unit>
        <trans-unit id="18bdc77cc7ccf01894d60882c01638586652a838" translate="yes" xml:space="preserve">
          <source>Erfcinv returns the inverse of Erfc(x).</source>
          <target state="translated">Erfcinv 返回 Erfc(x)的倒数。</target>
        </trans-unit>
        <trans-unit id="bb7f9017bf886c8e3d8bef46625d5e9ffc1f9661" translate="yes" xml:space="preserve">
          <source>Erfinv returns the inverse error function of x.</source>
          <target state="translated">Erfinv返回x的反误差函数。</target>
        </trans-unit>
        <trans-unit id="cd9ef49ac603b471db58d8995717ed1a3762d907" translate="yes" xml:space="preserve">
          <source>Err logs a message with severity LOG_ERR, ignoring the severity passed to New.</source>
          <target state="translated">Err记录一条严重性为LOG_ERR的消息,忽略传递给New的严重性。</target>
        </trans-unit>
        <trans-unit id="df5bb850e3b7913454e7774e322a2938bbcef6a7" translate="yes" xml:space="preserve">
          <source>Err provides a way for wrapping packages to check for query errors without calling Scan. Err returns the error, if any, that was encountered while running the query. If this error is not nil, this error will also be returned from Scan.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5578cd7bcdf826276ecb1f2f28645e2bbb50359e" translate="yes" xml:space="preserve">
          <source>Err returns an error equivalent to this error list. If the list is empty, Err returns nil.</source>
          <target state="translated">Err返回一个相当于这个错误列表的错误。如果列表为空,Err返回nil。</target>
        </trans-unit>
        <trans-unit id="832f241be017d872e00d3180f6d33f40fd5570e6" translate="yes" xml:space="preserve">
          <source>Err returns the error, if any, that was encountered during iteration. Err may be called after an explicit or implicit Close.</source>
          <target state="translated">Err返回在迭代过程中遇到的错误(如果有)。Err可以在显式或隐式Close之后被调用。</target>
        </trans-unit>
        <trans-unit id="a4df7d7cbdf62192ee825ad1260a51e02a37a319" translate="yes" xml:space="preserve">
          <source>Err returns the first non-EOF error that was encountered by the Scanner.</source>
          <target state="translated">Err返回扫描器遇到的第一个非EOF错误。</target>
        </trans-unit>
        <trans-unit id="d7c28ecb0558af18edf16f6cdb309e8e1c3a8d97" translate="yes" xml:space="preserve">
          <source>ErrAbortHandler is a sentinel panic value to abort a handler. While any panic from ServeHTTP aborts the response to the client, panicking with ErrAbortHandler also suppresses logging of a stack trace to the server's error log.</source>
          <target state="translated">ErrAbortHandler是一个哨兵恐慌值,用于中止一个处理程序。虽然ServeHTTP的任何恐慌都会中止对客户端的响应,但使用ErrAbortHandler的恐慌也会抑制将堆栈跟踪记录到服务器的错误日志中。</target>
        </trans-unit>
        <trans-unit id="2c93b5da38ab3884dabe8401ec5789cf9954b24e" translate="yes" xml:space="preserve">
          <source>ErrBadConn should be returned by a driver to signal to the sql package that a driver.Conn is in a bad state (such as the server having earlier closed the connection) and the sql package should retry on a new connection.</source>
          <target state="translated">驱动程序应该返回ErrBadConn,以向sql包发出信号,说明driver.Conn处于坏的状态(比如服务器之前关闭了连接),sql包应该重新尝试一个新的连接。</target>
        </trans-unit>
        <trans-unit id="e3b44f0681b8df29aaf90b891286d09878a539aa" translate="yes" xml:space="preserve">
          <source>ErrBadPattern indicates a pattern was malformed.</source>
          <target state="translated">ErrBadPattern表示一个模式是畸形的。</target>
        </trans-unit>
        <trans-unit id="3ee1109d6fff6aa1a95dd2ace67b7df2a7334ba3" translate="yes" xml:space="preserve">
          <source>ErrBodyReadAfterClose is returned when reading a Request or Response Body after the body has been closed. This typically happens when the body is read after an HTTP Handler calls WriteHeader or Write on its ResponseWriter.</source>
          <target state="translated">ErrBodyReadAfterClose是在body被关闭后读取Request或Response Body时返回的。这通常发生在HTTP处理程序调用WriteHeader或Write在其ResponseWriter上读取body之后。</target>
        </trans-unit>
        <trans-unit id="ecb57893f9c2481ff58024fd9595c70eea5eb3cf" translate="yes" xml:space="preserve">
          <source>ErrClosed is the error returned by an I/O call on a network connection that has already been closed, or that is closed by another goroutine before the I/O is completed. This may be wrapped in another error, and should normally be tested using errors.Is(err, net.ErrClosed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="162a55fce73b60c104f7cc8f11a8072e1ddfd29f" translate="yes" xml:space="preserve">
          <source>ErrClosedPipe is the error used for read or write operations on a closed pipe.</source>
          <target state="translated">ErrClosedPipe是用于对封闭管道进行读或写操作的错误。</target>
        </trans-unit>
        <trans-unit id="a4639f7f94b9cb5f412fc7548161f523a7e7f666" translate="yes" xml:space="preserve">
          <source>ErrConnClosed is returned by Read when a handler attempts to read the body of a request after the connection to the web server has been closed.</source>
          <target state="translated">ErrConnClosed是由Read返回的,当一个处理程序试图在与Web服务器的连接被关闭后读取一个请求的主体。</target>
        </trans-unit>
        <trans-unit id="221637ad516409a2ecb2517d32f79d74a258bc09" translate="yes" xml:space="preserve">
          <source>ErrConnDone is returned by any operation that is performed on a connection that has already been returned to the connection pool.</source>
          <target state="translated">ErrConnDone由任何对已经返回到连接池的连接进行的操作返回。</target>
        </trans-unit>
        <trans-unit id="46bfe6cb80875e0ea2a181d7f7d549f4d0d82aed" translate="yes" xml:space="preserve">
          <source>ErrDecryption represents a failure to decrypt a message. It is deliberately vague to avoid adaptive attacks.</source>
          <target state="translated">ErrDecryption表示消息解密失败。它是故意模糊的,以避免自适应攻击。</target>
        </trans-unit>
        <trans-unit id="467746adad5f690d7f559fbcf7439e5e4f657411" translate="yes" xml:space="preserve">
          <source>ErrFinalToken is a special sentinel error value. It is intended to be returned by a Split function to indicate that the token being delivered with the error is the last token and scanning should stop after this one. After ErrFinalToken is received by Scan, scanning stops with no error. The value is useful to stop processing early or when it is necessary to deliver a final empty token. One could achieve the same behavior with a custom error value but providing one here is tidier. See the emptyFinalToken example for a use of this value.</source>
          <target state="translated">ErrFinalToken是一个特殊的哨兵错误值。它的目的是由Split函数返回,以表明传递错误的令牌是最后一个令牌,扫描应该在这个令牌之后停止。在Scan接收到ErrFinalToken后,扫描将在没有错误的情况下停止。该值对于提前停止处理或需要交付最后一个空令牌时很有用。我们可以使用自定义的错误值来实现同样的行为,但在这里提供一个错误值会更整洁。请参阅 emptyFinalToken 示例,了解该值的用法。</target>
        </trans-unit>
        <trans-unit id="35aae77fc96792e0a9dd68b7fe9b4104a92752c1" translate="yes" xml:space="preserve">
          <source>ErrFormat indicates that decoding encountered an unknown format.</source>
          <target state="translated">ErrFormat表示解码遇到了未知的格式。</target>
        </trans-unit>
        <trans-unit id="6a8939df51dea8dd69540b21d1442b1df7f644f5" translate="yes" xml:space="preserve">
          <source>ErrHandlerTimeout is returned on ResponseWriter Write calls in handlers which have timed out.</source>
          <target state="translated">ErrHandlerTimeout是在ResponseWriter Write调用处理程序时返回的,它已经超时。</target>
        </trans-unit>
        <trans-unit id="1683829261143c7257662e5011cf7aaa6a67fd8d" translate="yes" xml:space="preserve">
          <source>ErrHelp is the error returned if the -help or -h flag is invoked but no such flag is defined.</source>
          <target state="translated">ErrHelp是指如果调用了-help或-h标志但没有定义这样的标志时返回的错误。</target>
        </trans-unit>
        <trans-unit id="477f520a57de43c26991dd9257c5ef86e299cbab" translate="yes" xml:space="preserve">
          <source>ErrInvalidMediaParameter is returned by ParseMediaType if the media type value was found but there was an error parsing the optional parameters</source>
          <target state="translated">如果找到了媒体类型值,但在解析可选参数时出现了错误,ParseMediaType将返回ErrInvalidMediaParameter。</target>
        </trans-unit>
        <trans-unit id="7ccacb88c4d1c0e333f4ecd81bc1d3d9c559f2b7" translate="yes" xml:space="preserve">
          <source>ErrInvalidPublicKey results when a public key is not usable by this code. FIPS is quite strict about the format of DSA keys, but other code may be less so. Thus, when using keys which may have been generated by other code, this error must be handled.</source>
          <target state="translated">ErrInvalidPublicKey的结果是当一个公钥不能被这个代码使用时。FIPS对DSA密钥的格式要求相当严格,但其他代码可能就不那么严格了,因此,当使用其他代码生成的密钥时,必须处理这个错误。因此,当使用可能由其他代码生成的密钥时,必须处理这个错误。</target>
        </trans-unit>
        <trans-unit id="d88a127fa27de6b24dcaf66add63be95ef25d2bc" translate="yes" xml:space="preserve">
          <source>ErrLength reports an attempt to decode an odd-length input using Decode or DecodeString. The stream-based Decoder returns io.ErrUnexpectedEOF instead of ErrLength.</source>
          <target state="translated">ErrLength报告使用Decode或DecodeString解码奇数长度输入的尝试。基于流的解码器返回io.ErrUnexpectedEOF而不是ErrLength。</target>
        </trans-unit>
        <trans-unit id="f3c0b0fa96d60cc99b6dbc86bf7d89c3ad78d6c6" translate="yes" xml:space="preserve">
          <source>ErrLineTooLong is returned when reading malformed chunked data with lines that are too long.</source>
          <target state="translated">当读取行数过长的畸形分块数据时,会返回ErrLineTooLong。</target>
        </trans-unit>
        <trans-unit id="dcde473ed62f7785c3bf6c7d17ee1b065b625a36" translate="yes" xml:space="preserve">
          <source>ErrLineTooLong is returned when reading request or response bodies with malformed chunked encoding.</source>
          <target state="translated">当读取带有畸形分块编码的请求或响应体时,会返回ErrLineTooLong。</target>
        </trans-unit>
        <trans-unit id="970c2996a4a5c886310565be53697c5b45faa359" translate="yes" xml:space="preserve">
          <source>ErrMessageTooLarge is returned by ReadForm if the message form data is too large to be processed.</source>
          <target state="translated">如果消息表单数据太大,无法处理,ReadForm会返回ErrMessageTooLarge。</target>
        </trans-unit>
        <trans-unit id="0ebd73e79cdedfe1cacf57c19778bb47d85fc59f" translate="yes" xml:space="preserve">
          <source>ErrMessageTooLong is returned when attempting to encrypt a message which is too large for the size of the public key.</source>
          <target state="translated">当试图加密一个对公钥大小来说太大的消息时,会返回ErrMessageTooLong。</target>
        </trans-unit>
        <trans-unit id="5f19c673f1a254310103a3c25dcfcd25e3b0451a" translate="yes" xml:space="preserve">
          <source>ErrMissingFile is returned by FormFile when the provided file field name is either not present in the request or not a file field.</source>
          <target state="translated">当所提供的文件字段名在请求中不存在或不是文件字段时,FormFile会返回ErrMissingFile。</target>
        </trans-unit>
        <trans-unit id="879d59d2bd412781a3e7f8ffb1ed3e0a6f25ef0a" translate="yes" xml:space="preserve">
          <source>ErrNoCookie is returned by Request's Cookie method when a cookie is not found.</source>
          <target state="translated">当找不到cookie时,Request的Cookie方法会返回ErrNoCookie。</target>
        </trans-unit>
        <trans-unit id="69a1cf815e40b87d0d5f8fcbbe42eafeab4e1e2f" translate="yes" xml:space="preserve">
          <source>ErrNoLocation is returned by Response's Location method when no Location header is present.</source>
          <target state="translated">当没有Location头时,ErrNoLocation由Response的Location方法返回。</target>
        </trans-unit>
        <trans-unit id="7bb8d90a2359c0f3337f84b5478a30e43ad8f988" translate="yes" xml:space="preserve">
          <source>ErrNoProgress is returned by some clients of an Reader when many calls to Read have failed to return any data or error, usually the sign of a broken Reader implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6beea860c8a1449ccac135d4acb1d55a17d0f093" translate="yes" xml:space="preserve">
          <source>ErrNoProgress is returned by some clients of an io.Reader when many calls to Read have failed to return any data or error, usually the sign of a broken io.Reader implementation.</source>
          <target state="translated">ErrNoProgress是由一些io.Reader的客户机返回的,当许多对Read的调用未能返回任何数据或错误时,通常是一个坏的io.Reader实现的标志。</target>
        </trans-unit>
        <trans-unit id="392e43865d190f068ab972465b9d359af1b64f08" translate="yes" xml:space="preserve">
          <source>ErrNoRows is returned by Scan when QueryRow doesn't return a row. In such a case, QueryRow returns a placeholder *Row value that defers this error until a Scan.</source>
          <target state="translated">当QueryRow没有返回一条记录时,Scan会返回ErrNoRows。在这种情况下,QueryRow会返回一个占位符*Row的值,这个占位符的值会将这个错误推迟到Scan中。</target>
        </trans-unit>
        <trans-unit id="488229e1ec35b45cf4ccfde5a62d823f94c24690" translate="yes" xml:space="preserve">
          <source>ErrNoSymbols is returned by File.Symbols and File.DynamicSymbols if there is no such section in the File.</source>
          <target state="translated">如果File.Symbols和File.DynamicSymbols中没有这样的部分,ErrNoSymbols会被File.Symbols返回。</target>
        </trans-unit>
        <trans-unit id="7533ee8d0b68fb55e112826d6a1c2915f2123d1c" translate="yes" xml:space="preserve">
          <source>ErrNotFat is returned from NewFatFile or OpenFat when the file is not a universal binary but may be a thin binary, based on its magic number.</source>
          <target state="translated">当文件不是通用二进制文件而可能是稀疏二进制文件时,ErrNotFat会从NewFatFile或OpenFat返回,基于其魔数。</target>
        </trans-unit>
        <trans-unit id="aa8869522b92bbf57b0f1c062434e0c2d23cc0b5" translate="yes" xml:space="preserve">
          <source>ErrNotFound is the error resulting if a path search failed to find an executable file.</source>
          <target state="translated">ErrNotFound是指在路径搜索中未能找到可执行文件时产生的错误。</target>
        </trans-unit>
        <trans-unit id="ac964728e1e7a99ac06bc9053d578c533e4d649b" translate="yes" xml:space="preserve">
          <source>ErrProcessDone indicates a Process has finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a111d069dccbba2d2a3a237c054d532919f96c" translate="yes" xml:space="preserve">
          <source>ErrRange indicates that a value is out of range for the target type.</source>
          <target state="translated">ErrRange表示一个值超出了目标类型的范围。</target>
        </trans-unit>
        <trans-unit id="233574ffa8e724d1b14752b66aca68848de53143" translate="yes" xml:space="preserve">
          <source>ErrReader</source>
          <target state="translated">ErrReader</target>
        </trans-unit>
        <trans-unit id="b2d729ce992dad01e1a0420de6d6fad3e424bd29" translate="yes" xml:space="preserve">
          <source>ErrReader returns an io.Reader that returns 0, err from all Read calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12fcce22c0e1998899b62846f27fda0ba160dd35" translate="yes" xml:space="preserve">
          <source>ErrRemoveArgument may be returned from NamedValueChecker to instruct the sql package to not pass the argument to the driver query interface. Return when accepting query specific options or structures that aren't SQL query arguments.</source>
          <target state="translated">ErrRemoveArgument可以从NamedValueChecker返回,指示sql包不要将参数传递给驱动查询接口。当接受不是sql查询参数的查询特定选项或结构时返回。</target>
        </trans-unit>
        <trans-unit id="037e83f30e9892945c577cf7fa14541b33afb5a6" translate="yes" xml:space="preserve">
          <source>ErrRequestAborted is returned by Read when a handler attempts to read the body of a request that has been aborted by the web server.</source>
          <target state="translated">ErrRequestAborted是由Read返回的,当一个处理程序试图读取一个被Web服务器中止的请求主体时。</target>
        </trans-unit>
        <trans-unit id="c70ae4f2182147bf876f436b7f75c0552f6c6b60" translate="yes" xml:space="preserve">
          <source>ErrServerClosed is returned by the Server's Serve, ServeTLS, ListenAndServe, and ListenAndServeTLS methods after a call to Shutdown or Close.</source>
          <target state="translated">ErrServerClosed由服务器的Serve、ServeTLS、ListenAndServe和ListenAndServeTLS方法在调用Shutdown或Close后返回。</target>
        </trans-unit>
        <trans-unit id="7ebe2c84541d847b1195492aec2d9b2f7a4c010e" translate="yes" xml:space="preserve">
          <source>ErrShortBuffer means that a read required a longer buffer than was provided.</source>
          <target state="translated">ErrShortBuffer表示读取时需要的缓冲区比提供的长。</target>
        </trans-unit>
        <trans-unit id="982fdbcbb882e9752207ac23622fa80a8e4ff13c" translate="yes" xml:space="preserve">
          <source>ErrShortWrite means that a write accepted fewer bytes than requested but failed to return an explicit error.</source>
          <target state="translated">ErrShortWrite 意味着写接受的字节数比请求的少,但未能返回一个显式错误。</target>
        </trans-unit>
        <trans-unit id="e693fa44dc23f2e964c4c957cddff0c6c414e4de" translate="yes" xml:space="preserve">
          <source>ErrSkip may be returned by some optional interfaces' methods to indicate at runtime that the fast path is unavailable and the sql package should continue as if the optional interface was not implemented. ErrSkip is only supported where explicitly documented.</source>
          <target state="translated">一些可选接口的方法可能会返回ErrSkip,以在运行时指示快速路径不可用,sql包应该继续运行,就像可选接口没有实现一样。ErrSkip只在有明确记录的地方被支持。</target>
        </trans-unit>
        <trans-unit id="da9be2949ec46b11aafe4f6565a64184a6259c6a" translate="yes" xml:space="preserve">
          <source>ErrSkipAltProtocol is a sentinel error value defined by Transport.RegisterProtocol.</source>
          <target state="translated">ErrSkipAltProtocol是一个由Transport.RegisterProtocol定义的哨兵错误值。</target>
        </trans-unit>
        <trans-unit id="0984c259498693b4323da793215e73f865780771" translate="yes" xml:space="preserve">
          <source>ErrSyntax indicates that a value does not have the right syntax for the target type.</source>
          <target state="translated">ErrSyntax表示一个值对目标类型没有正确的语法。</target>
        </trans-unit>
        <trans-unit id="dd776421a3c960b52739188408b1f0d82d0ede7a" translate="yes" xml:space="preserve">
          <source>ErrTimeout is a fake timeout error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e2bf17148743cd6ab904b3de93ecbe65b459aa" translate="yes" xml:space="preserve">
          <source>ErrTooLarge is passed to panic if memory cannot be allocated to store data in a buffer.</source>
          <target state="translated">ErrTooLarge被传递,如果不能分配内存来存储缓冲区中的数据,就会出现恐慌。</target>
        </trans-unit>
        <trans-unit id="568c0d2bb32eccd175defcb03344b9a16c508bab" translate="yes" xml:space="preserve">
          <source>ErrTxDone is returned by any operation that is performed on a transaction that has already been committed or rolled back.</source>
          <target state="translated">ErrTxDone由任何在已经提交或回滚的事务上执行的操作返回。</target>
        </trans-unit>
        <trans-unit id="1f229a1dfc7838f7986b848144af2ffc585c4245" translate="yes" xml:space="preserve">
          <source>ErrUnexpectedEOF means that EOF was encountered in the middle of reading a fixed-size block or data structure.</source>
          <target state="translated">ErrUnexpectedEOF是指在读取一个固定大小的块或数据结构中间遇到了EOF。</target>
        </trans-unit>
        <trans-unit id="bfe4f94706eef4c62e93268b91a8df4ee481c805" translate="yes" xml:space="preserve">
          <source>ErrUnknownPC is the error returned by LineReader.ScanPC when the seek PC is not covered by any entry in the line table.</source>
          <target state="translated">ErrUnknownPC是LineReader.ScanPC返回的错误,当寻求的PC没有被行表中的任何条目覆盖时。</target>
        </trans-unit>
        <trans-unit id="f3ccd127227d246ff29c38b3be735853002e0e90" translate="yes" xml:space="preserve">
          <source>ErrUnsupportedAlgorithm results from attempting to perform an operation that involves algorithms that are not currently implemented.</source>
          <target state="translated">ErrUnsupportedAlgorithm的结果是试图执行一个涉及当前未实现的算法的操作。</target>
        </trans-unit>
        <trans-unit id="7cda7d2974e4a55a6e31e7b06730353820c8cd09" translate="yes" xml:space="preserve">
          <source>ErrUseLastResponse can be returned by Client.CheckRedirect hooks to control how redirects are processed. If returned, the next request is not sent and the most recent response is returned with its body unclosed.</source>
          <target state="translated">ErrUseLastResponse可以被Client.CheckRedirect钩子返回,以控制重定向的处理方式。如果返回,则不会发送下一个请求,而是返回最近的响应,其主体未关闭。</target>
        </trans-unit>
        <trans-unit id="71263e34d33b79a9329c92364062be99c3eee17e" translate="yes" xml:space="preserve">
          <source>ErrVerification represents a failure to verify a signature. It is deliberately vague to avoid adaptive attacks.</source>
          <target state="translated">ErrVerification表示签名的验证失败。它是故意模糊的,以避免自适应攻击。</target>
        </trans-unit>
        <trans-unit id="6c04dd7f6d847865d8008f59f14ce0415f1fd8dd" translate="yes" xml:space="preserve">
          <source>Errno values can be tested against error values from the os package using errors.Is. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8d01914ee372bf834727e843061ee1afe40a5a" translate="yes" xml:space="preserve">
          <source>Error describes a problem encountered during template Escaping.</source>
          <target state="translated">错误描述了在模板Escaping过程中遇到的问题。</target>
        </trans-unit>
        <trans-unit id="1e74398cca4fe010a9f1160a55d2897886f3d1e9" translate="yes" xml:space="preserve">
          <source>Error implements the error interface.</source>
          <target state="translated">Error实现了错误接口。</target>
        </trans-unit>
        <trans-unit id="90eef0a8fff1769f0f058ec32118067d335eaa54" translate="yes" xml:space="preserve">
          <source>Error is equivalent to Log followed by Fail.</source>
          <target state="translated">Error相当于Log,后面是Fail。</target>
        </trans-unit>
        <trans-unit id="b7f32ee8831e87a9144a1603a0333481dce77381" translate="yes" xml:space="preserve">
          <source>Error is returned by LookPath when it fails to classify a file as an executable.</source>
          <target state="translated">当LookPath未能将一个文件归类为可执行文件时,LookPath会返回错误。</target>
        </trans-unit>
        <trans-unit id="db662ec10d72905a869274d663c6b1180e4b7f54" translate="yes" xml:space="preserve">
          <source>Error replies to the request with the specified error message and HTTP code. It does not otherwise end the request; the caller should ensure no further writes are done to w. The error message should be plain text.</source>
          <target state="translated">Error用指定的错误信息和HTTP代码来回复请求。它不会以其他方式结束请求;调用者应该确保不会对w做进一步的写入,错误信息应该是纯文本。</target>
        </trans-unit>
        <trans-unit id="a20fb2871b74c1de6e727401f6fd828785f1c240" translate="yes" xml:space="preserve">
          <source>Error reports an error and the operation and URL that caused it.</source>
          <target state="translated">错误报告了一个错误和引起该错误的操作和URL。</target>
        </trans-unit>
        <trans-unit id="830c2e692ebb0efc91ade52379d7380987d0d567" translate="yes" xml:space="preserve">
          <source>Error reports any error that has occurred during a previous Write or Flush.</source>
          <target state="translated">错误报告在之前的写入或刷新过程中发生的任何错误。</target>
        </trans-unit>
        <trans-unit id="dde0e5cd72639f435d3e7e7fe156ee2ed9879da4" translate="yes" xml:space="preserve">
          <source>Error returns an error string formatted as follows: filename:line:column: message</source>
          <target state="translated">错误返回一个错误字符串,格式如下:filename:line:column:message</target>
        </trans-unit>
        <trans-unit id="3cfee321593df904c4289a896a7927d4777c6a34" translate="yes" xml:space="preserve">
          <source>Error returns the string representation of a ParseError.</source>
          <target state="translated">Error 返回 ParseError 的字符串表示。</target>
        </trans-unit>
        <trans-unit id="f4df304fede26c34b36b8acbaaecd004589ae2b8" translate="yes" xml:space="preserve">
          <source>Error wraps a JavaScript error.</source>
          <target state="translated">错误包装了一个JavaScript错误。</target>
        </trans-unit>
        <trans-unit id="c17edc5bbb79fd1e93107557c864f6c73e9e1224" translate="yes" xml:space="preserve">
          <source>Error, which represents a numeric error response from a server.</source>
          <target state="translated">错误,代表服务器的数字错误响应。</target>
        </trans-unit>
        <trans-unit id="f872a6e0e103dae88045f618b47fc615ea682e89" translate="yes" xml:space="preserve">
          <source>ErrorCode is a code for a kind of error.</source>
          <target state="translated">ErrorCode是一种错误的代码。</target>
        </trans-unit>
        <trans-unit id="3bfa44b797d3ade2b7a4edbc0e05cd336b90f6a5" translate="yes" xml:space="preserve">
          <source>ErrorContext returns a textual representation of the location of the node in the input text. The receiver is only used when the node does not have a pointer to the tree inside, which can occur in old code.</source>
          <target state="translated">ErrorContext返回输入文本中节点位置的文本表示。接收器只有在节点内部没有指向树的指针时才会使用,这在旧代码中可能发生。</target>
        </trans-unit>
        <trans-unit id="01a6e986d714bdcbd3255e42cd49913ead495f07" translate="yes" xml:space="preserve">
          <source>ErrorHandling defines how FlagSet.Parse behaves if the parse fails.</source>
          <target state="translated">ErrorHandling定义了FlagSet.Parse解析失败时的行为。</target>
        </trans-unit>
        <trans-unit id="c0a58bb2b918c9b5569f8008794279639061de21" translate="yes" xml:space="preserve">
          <source>ErrorHandling returns the error handling behavior of the flag set.</source>
          <target state="translated">ErrorHandling返回所设标志的错误处理行为。</target>
        </trans-unit>
        <trans-unit id="4c21e41d45c9255229a7163ff53874920a784296" translate="yes" xml:space="preserve">
          <source>ErrorList implements the sort Interface.</source>
          <target state="translated">ErrorList实现了排序接口。</target>
        </trans-unit>
        <trans-unit id="bf56558c66e9c3ca353563d687f7c3cd65731f27" translate="yes" xml:space="preserve">
          <source>ErrorList is a list of *Errors. The zero value for an ErrorList is an empty ErrorList ready to use.</source>
          <target state="translated">ErrorList是一个*Errors的列表。ErrorList的零值是一个准备使用的空ErrorList。</target>
        </trans-unit>
        <trans-unit id="ce0231916da28ea14cfedf1872fc204b2ae63815" translate="yes" xml:space="preserve">
          <source>Errorf</source>
          <target state="translated">Errorf</target>
        </trans-unit>
        <trans-unit id="fdd0d6f0778f1bf5d95080356d64d20bdae12d81" translate="yes" xml:space="preserve">
          <source>Errorf formats according to a format specifier and returns the string as a value that satisfies error.</source>
          <target state="translated">Errorf根据格式指定器格式化,并以满足错误的值返回字符串。</target>
        </trans-unit>
        <trans-unit id="f7da546253e843f1211156126fe7b9153417337c" translate="yes" xml:space="preserve">
          <source>Errorf is equivalent to Logf followed by Fail.</source>
          <target state="translated">Errorf相当于Logf,后面是Fail。</target>
        </trans-unit>
        <trans-unit id="805e86a8cbf628e38e4c45612c005a504009e79a" translate="yes" xml:space="preserve">
          <source>Errors</source>
          <target state="translated">Errors</target>
        </trans-unit>
        <trans-unit id="c7b5ebe0a47f4e9da35a4772302352a81e9e531f" translate="yes" xml:space="preserve">
          <source>Errors returned by Scanner.</source>
          <target state="translated">扫描仪返回的错误。</target>
        </trans-unit>
        <trans-unit id="bc4101c3209c725e09b7f9a752ff1e460a3f708b" translate="yes" xml:space="preserve">
          <source>Errors returned from this package may be tested against these errors with errors.Is.</source>
          <target state="translated">从这个包中返回的错误可以用error.Is来测试这些错误。</target>
        </trans-unit>
        <trans-unit id="0a52e06ca8bcf58f3e4f4015d46888503fa4edb2" translate="yes" xml:space="preserve">
          <source>Errors used by the HTTP server.</source>
          <target state="translated">HTTP服务器使用的错误。</target>
        </trans-unit>
        <trans-unit id="b113dd3f232b8b88d2860ca5e8f37a70242825e5" translate="yes" xml:space="preserve">
          <source>Escape is like EscapeText but omits the error return value. It is provided for backwards compatibility with Go 1.0. Code targeting Go 1.1 or later should use EscapeText.</source>
          <target state="translated">Escape与EscapeText类似,但省略了错误返回值。它是为了向后兼容Go 1.0而提供的。针对Go 1.1或更高版本的代码应该使用EscapeText。</target>
        </trans-unit>
        <trans-unit id="72b96ac1177bd0ab8e6a9ffb4c48e44560500452" translate="yes" xml:space="preserve">
          <source>Escape sequences:</source>
          <target state="translated">逃跑序列。</target>
        </trans-unit>
        <trans-unit id="7232262c5c0c1b2288a34e3da1ce712bfb760b49" translate="yes" xml:space="preserve">
          <source>EscapeString</source>
          <target state="translated">EscapeString</target>
        </trans-unit>
        <trans-unit id="3a32d6d4d267bdae71baa4ebb4864da534840bc0" translate="yes" xml:space="preserve">
          <source>EscapeString escapes special characters like &quot;&amp;lt;&quot; to become &quot;&amp;amp;lt;&quot;. It escapes only five such characters: &amp;lt;, &amp;gt;, &amp;amp;, ' and &quot;. UnescapeString(EscapeString(s)) == s always holds, but the converse isn't always true.</source>
          <target state="translated">EscapeString将特殊字符（如&amp;ldquo; &amp;lt;&amp;rdquo;）转义为&amp;ldquo;＆lt;&amp;rdquo;。它仅转义五个这样的字符：&amp;lt;，&amp;gt;，＆，'和&amp;ldquo;。UnescapeString（EscapeString（s））== s始终成立，但反过来并不总是正确的。</target>
        </trans-unit>
        <trans-unit id="2d03f838319f2b58cce7d4023faf3595f32ebc4a" translate="yes" xml:space="preserve">
          <source>EscapeText writes to w the properly escaped XML equivalent of the plain text data s.</source>
          <target state="translated">EscapeText向w写入经过适当转义的XML等效的纯文本数据s。</target>
        </trans-unit>
        <trans-unit id="75dc444f0a860ef85100ffab90e1df890462d53a" translate="yes" xml:space="preserve">
          <source>EscapedFragment returns the escaped form of u.Fragment. In general there are multiple possible escaped forms of any fragment. EscapedFragment returns u.RawFragment when it is a valid escaping of u.Fragment. Otherwise EscapedFragment ignores u.RawFragment and computes an escaped form on its own. The String method uses EscapedFragment to construct its result. In general, code should call EscapedFragment instead of reading u.RawFragment directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16488cf3f3e8d2bcd7180af8373e57e18ef4565" translate="yes" xml:space="preserve">
          <source>EscapedPath returns the escaped form of u.Path. In general there are multiple possible escaped forms of any path. EscapedPath returns u.RawPath when it is a valid escaping of u.Path. Otherwise EscapedPath ignores u.RawPath and computes an escaped form on its own. The String and RequestURI methods use EscapedPath to construct their results. In general, code should call EscapedPath instead of reading u.RawPath directly.</source>
          <target state="translated">EscapedPath 返回 u.Path 的转义形式。一般情况下,任何路径都有多种可能的转义形式,当u.Path的转义形式有效时,EscapedPath返回u.RawPath。当u.Path是有效的转义形式时,EscapedPath会返回u.RawPath,否则EscapedPath会忽略u.RawPath,并自行计算转义形式。否则EscapedPath会忽略u.RawPath,并自行计算一个转义形式。String和RequestURI方法使用EscapedPath来构造它们的结果。一般来说,代码应该调用EscapedPath而不是直接读取u.RawPath。</target>
        </trans-unit>
        <trans-unit id="f6f139cba9287a2764afe8ce53317ff229147fba" translate="yes" xml:space="preserve">
          <source>Eval returns the type and, if constant, the value for the expression expr, evaluated at position pos of package pkg, which must have been derived from type-checking an AST with complete position information relative to the provided file set.</source>
          <target state="translated">Eval 返回表达式 expr 的类型,如果是常数,则返回表达式 expr 的值,该表达式在包 pkg 的 pos 位置上计算,它必须是通过类型检查得出的,具有相对于提供的文件集的完整位置信息的 AST。</target>
        </trans-unit>
        <trans-unit id="87826c86d178d2561f85e648340af0f4ea8c5e2c" translate="yes" xml:space="preserve">
          <source>EvalSymlinks returns the path name after the evaluation of any symbolic links. If path is relative the result will be relative to the current directory, unless one of the components is an absolute symbolic link. EvalSymlinks calls Clean on the result.</source>
          <target state="translated">EvalSymlinks在评估任何符号链接后返回路径名。如果路径是相对的,那么结果将是相对于当前目录的,除非其中一个组件是绝对符号链接。EvalSymlinks会在结果上调用Clean。</target>
        </trans-unit>
        <trans-unit id="e74e7ce3c8abf4b80ec56864d1aae4c5480b2b01" translate="yes" xml:space="preserve">
          <source>Even if ReadAt returns n &amp;lt; len(p), it may use all of p as scratch space during the call. If some data is available but not len(p) bytes, ReadAt blocks until either all the data is available or an error occurs. In this respect ReadAt is different from Read.</source>
          <target state="translated">即使ReadAt返回n &amp;lt;len（p），也可能在调用期间将所有p用作临时空间。如果某些数据可用但不是len（p）字节，则ReadAt会阻塞，直到所有数据可用或发生错误为止。在这方面，ReadAt与Read不同。</target>
        </trans-unit>
        <trans-unit id="53a0efcd9116915108429249f6aa89cdbb04bf0f" translate="yes" xml:space="preserve">
          <source>Even when enabled, the server may not change its identity between handshakes (i.e. the leaf certificate must be the same). Additionally, concurrent handshake and application data flow is not permitted so renegotiation can only be used with protocols that synchronise with the renegotiation, such as HTTPS.</source>
          <target state="translated">即使启用,服务器也不能在握手之间改变其身份(即叶子证书必须是相同的)。此外,不允许同时进行握手和应用数据流,所以重新协商只能用于与重新协商同步的协议,如HTTPS。</target>
        </trans-unit>
        <trans-unit id="3d5018b93eece7f2c1a96b6ceca3400cc6e309bc" translate="yes" xml:space="preserve">
          <source>Every Conn must be returned to the database pool after use by calling Conn.Close.</source>
          <target state="translated">每个Conn在使用后必须通过调用Conn.Close来返回数据库池。</target>
        </trans-unit>
        <trans-unit id="c28d71b80a20b83e9ae50e1509e418c92187dbf4" translate="yes" xml:space="preserve">
          <source>Every call to Scan, even the first one, must be preceded by a call to Next.</source>
          <target state="translated">每一次对Scan的调用,即使是第一次,也必须在调用Next之前进行。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="f5af771da8b361a4e20bdb4283e0ac7caf8c0814" translate="yes" xml:space="preserve">
          <source>Example (AllSignals)</source>
          <target state="translated">例子 (AllSignals)</target>
        </trans-unit>
        <trans-unit id="6806ae76e866d9ef5bbaa313ab8f14edf232f6fa" translate="yes" xml:space="preserve">
          <source>Example (Append)</source>
          <target state="translated">例子(附录)</target>
        </trans-unit>
        <trans-unit id="2e52ba657e1b1589c7457e9586b538cbfb8d8c4e" translate="yes" xml:space="preserve">
          <source>Example (Autoescaping)</source>
          <target state="translated">例子(自动剪枝)</target>
        </trans-unit>
        <trans-unit id="7bda2f591e5fdf06e6bb949dbf8645e95567d697" translate="yes" xml:space="preserve">
          <source>Example (Basic)</source>
          <target state="translated">例子(基本)</target>
        </trans-unit>
        <trans-unit id="18996c4947f797f81043a2613612654fc43160d3" translate="yes" xml:space="preserve">
          <source>Example (BinaryMarshaler)</source>
          <target state="translated">例子(BinaryMarshaler)</target>
        </trans-unit>
        <trans-unit id="b4b588f9f28576812b88bb06ca68e301889fa949" translate="yes" xml:space="preserve">
          <source>Example (Block)</source>
          <target state="translated">例子(块)</target>
        </trans-unit>
        <trans-unit id="486a8544d68d11f1bed88d4bb0fdc87e371d41c9" translate="yes" xml:space="preserve">
          <source>Example (ComplexNumbers)</source>
          <target state="translated">例子(复数)</target>
        </trans-unit>
        <trans-unit id="433e8e80995b40ab0d35f03a174da56c17e5e244" translate="yes" xml:space="preserve">
          <source>Example (Config)</source>
          <target state="translated">例子(配置)</target>
        </trans-unit>
        <trans-unit id="d37ffa9f063e6d5deddd48321eb1adc9ceaf4696" translate="yes" xml:space="preserve">
          <source>Example (Custom)</source>
          <target state="translated">例子(自定义)</target>
        </trans-unit>
        <trans-unit id="7dd768f1c2d0eb858e6c8e62318f88b0d2a37a94" translate="yes" xml:space="preserve">
          <source>Example (CustomMarshalJSON)</source>
          <target state="translated">示例(CustomMarshalJSON)</target>
        </trans-unit>
        <trans-unit id="ecd803477953d919a56abf6a7054c61d8b4903e9" translate="yes" xml:space="preserve">
          <source>Example (CustomMarshalXML)</source>
          <target state="translated">例子(CustomMarshalXML)</target>
        </trans-unit>
        <trans-unit id="eb7e7661a541a8aedff29b426a0dd8cee77d6d26" translate="yes" xml:space="preserve">
          <source>Example (DecodeConfig)</source>
          <target state="translated">例子(DecodeConfig)</target>
        </trans-unit>
        <trans-unit id="5285988ca0c88d03cdaaaa1c0ed6f2b7317d2b93" translate="yes" xml:space="preserve">
          <source>Example (Decrypt)</source>
          <target state="translated">例子(解密)</target>
        </trans-unit>
        <trans-unit id="8fab16bc38953ce26f6b67557a190e125af0e87e" translate="yes" xml:space="preserve">
          <source>Example (DescendingOrder)</source>
          <target state="translated">例子(降序)</target>
        </trans-unit>
        <trans-unit id="6aecf1f00d18e968d03c6704bef266c1e4be5098" translate="yes" xml:space="preserve">
          <source>Example (Dictionary)</source>
          <target state="translated">例子(词典)</target>
        </trans-unit>
        <trans-unit id="fae255c02ba68cd1a00c21d5947bde15712ef6e0" translate="yes" xml:space="preserve">
          <source>Example (DotFileHiding)</source>
          <target state="translated">示例 (DotFileHiding)</target>
        </trans-unit>
        <trans-unit id="2e9d6fa89cbf924c21d5a93c189431a8cd1dde68" translate="yes" xml:space="preserve">
          <source>Example (EConvergents)</source>
          <target state="translated">例子 (EConvergents)</target>
        </trans-unit>
        <trans-unit id="c4faca1b381d29b5f4b6ce88f79758aa6cf95bb8" translate="yes" xml:space="preserve">
          <source>Example (Elastic)</source>
          <target state="translated">例子(弹性)</target>
        </trans-unit>
        <trans-unit id="2232d3397afd70f4f6faa419a87bb103725a6b36" translate="yes" xml:space="preserve">
          <source>Example (EmptyFinalToken)</source>
          <target state="translated">例子 (EmptyFinalToken)</target>
        </trans-unit>
        <trans-unit id="51b210ff3c89e11d54a69e7bd9044e45171fa6c7" translate="yes" xml:space="preserve">
          <source>Example (EncodeDecode)</source>
          <target state="translated">例子(EncodeDecode)</target>
        </trans-unit>
        <trans-unit id="10f49227bc5c8828198ffe23c70506a5f6a14a6c" translate="yes" xml:space="preserve">
          <source>Example (Encrypt)</source>
          <target state="translated">例子(加密)</target>
        </trans-unit>
        <trans-unit id="b1b7ef7af49d199e71d1b9a202304c0e1dd03579" translate="yes" xml:space="preserve">
          <source>Example (Environment)</source>
          <target state="translated">例子(环境)</target>
        </trans-unit>
        <trans-unit id="76e13d7110768fb2adda2eab178cd24782e70e9f" translate="yes" xml:space="preserve">
          <source>Example (Errorf)</source>
          <target state="translated">例子(Errorf)</target>
        </trans-unit>
        <trans-unit id="dda6c202ca36dceb2b8b1d371c82caea78806bb1" translate="yes" xml:space="preserve">
          <source>Example (Escape)</source>
          <target state="translated">例子(逃生)</target>
        </trans-unit>
        <trans-unit id="d5078acaa6d91c20f1a5940604b3be21cb88297f" translate="yes" xml:space="preserve">
          <source>Example (Fibonacci)</source>
          <target state="translated">例子(斐波那契</target>
        </trans-unit>
        <trans-unit id="82dc50226403d5da3e74bc047330883ad45a5d00" translate="yes" xml:space="preserve">
          <source>Example (File)</source>
          <target state="translated">例子(文件)</target>
        </trans-unit>
        <trans-unit id="f3933078451957ce04020c47152b2a4ae30e2df1" translate="yes" xml:space="preserve">
          <source>Example (FloydSteinberg)</source>
          <target state="translated">例子 (FloydSteinberg)</target>
        </trans-unit>
        <trans-unit id="81d329cbb08482151d8388b6f96dc57574cc5a00" translate="yes" xml:space="preserve">
          <source>Example (Formats)</source>
          <target state="translated">例子(格式)</target>
        </trans-unit>
        <trans-unit id="48e4af16c19b828060331cd71f3957538f43c01d" translate="yes" xml:space="preserve">
          <source>Example (Func)</source>
          <target state="translated">例子(FUNC)</target>
        </trans-unit>
        <trans-unit id="e1803da930d85a7a40a33aabbb44bda9fd29a3f1" translate="yes" xml:space="preserve">
          <source>Example (Get)</source>
          <target state="translated">例子(获取)</target>
        </trans-unit>
        <trans-unit id="efa53360ab365a081c7d8e5c13b9d92b709140dc" translate="yes" xml:space="preserve">
          <source>Example (Glob)</source>
          <target state="translated">例子(Glob)</target>
        </trans-unit>
        <trans-unit id="de8457876a6a77bbf5b422c1200fc039c3c52879" translate="yes" xml:space="preserve">
          <source>Example (HTTP2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0927fdc649164da429d59c70828557b2f212892" translate="yes" xml:space="preserve">
          <source>Example (Helpers)</source>
          <target state="translated">例子(助手)</target>
        </trans-unit>
        <trans-unit id="e1cb4393a3dce67d491085d8c93e591a037aa410" translate="yes" xml:space="preserve">
          <source>Example (HttpServer)</source>
          <target state="translated">示例(HttpServer)</target>
        </trans-unit>
        <trans-unit id="bc877cc87aa7e57c6e4d6bac364478fe54fd7edc" translate="yes" xml:space="preserve">
          <source>Example (IntHeap)</source>
          <target state="translated">示例(IntHeap)</target>
        </trans-unit>
        <trans-unit id="15ea46b6e1ae2d0c7afa15e89076c2e1ef33cfa9" translate="yes" xml:space="preserve">
          <source>Example (Interface)</source>
          <target state="translated">示例(接口</target>
        </trans-unit>
        <trans-unit id="d0d4f4103b1fb18ad85139309cb4da67e48bc81b" translate="yes" xml:space="preserve">
          <source>Example (Is)</source>
          <target state="translated">例子(是)</target>
        </trans-unit>
        <trans-unit id="fafb22a01b61327379ae19ec71339a55898fd95a" translate="yes" xml:space="preserve">
          <source>Example (IsIdentRune)</source>
          <target state="translated">示例 (IsIdentRune)</target>
        </trans-unit>
        <trans-unit id="6c67c38b6ae2ba0542052e51c7fa5202c83f63ad" translate="yes" xml:space="preserve">
          <source>Example (KeyLogWriter)</source>
          <target state="translated">示例 (KeyLogWriter)</target>
        </trans-unit>
        <trans-unit id="998c85b7ec2d08d9dc6fbaeea75396700152f3e2" translate="yes" xml:space="preserve">
          <source>Example (Lines)</source>
          <target state="translated">示例(行)</target>
        </trans-unit>
        <trans-unit id="90c6690a74615337a8d95f6ad9e2df85db4dc8aa" translate="yes" xml:space="preserve">
          <source>Example (Marshal)</source>
          <target state="translated">例子(元帅)</target>
        </trans-unit>
        <trans-unit id="b7987a90c2edd7b9efbeddd99750be769396ba11" translate="yes" xml:space="preserve">
          <source>Example (Minimal)</source>
          <target state="translated">例子(最小值)</target>
        </trans-unit>
        <trans-unit id="220dbd2f9c761374b94c2985ffb67973ec244f5e" translate="yes" xml:space="preserve">
          <source>Example (Mode)</source>
          <target state="translated">例子(模式)</target>
        </trans-unit>
        <trans-unit id="71eaa954d5eaf1e8a901ae6af51e6ef38075023b" translate="yes" xml:space="preserve">
          <source>Example (Multi)</source>
          <target state="translated">例子(多)</target>
        </trans-unit>
        <trans-unit id="29d3242dd03f86b89326a2d3af5d45c9e4b8df60" translate="yes" xml:space="preserve">
          <source>Example (MultipleResultSets)</source>
          <target state="translated">例子(多结果集)</target>
        </trans-unit>
        <trans-unit id="d67ff39099c16f9727841f2b1d55d6a7d937ca63" translate="yes" xml:space="preserve">
          <source>Example (OpenDBCLI)</source>
          <target state="translated">示例(OpenDBCLI)</target>
        </trans-unit>
        <trans-unit id="6649fceda9c8f47bc7fd24801bfc5e3a67a4b690" translate="yes" xml:space="preserve">
          <source>Example (OpenDBService)</source>
          <target state="translated">示例(OpenDBService</target>
        </trans-unit>
        <trans-unit id="c804c1a3dde5f5d5992fdc8708de4fc1ac6587eb" translate="yes" xml:space="preserve">
          <source>Example (Options)</source>
          <target state="translated">示例(选项)</target>
        </trans-unit>
        <trans-unit id="4abb0ba983e9342eab3c6f134b93e2b50b9f8034" translate="yes" xml:space="preserve">
          <source>Example (OutOfRange)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aee0ec2e25c149d8d268bc5cb8650bcd19596fb" translate="yes" xml:space="preserve">
          <source>Example (Pad)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bcf50c51e83b6b841682aca36a2d5adaab448fa" translate="yes" xml:space="preserve">
          <source>Example (Parsefiles)</source>
          <target state="translated">例子 (Parsefiles)</target>
        </trans-unit>
        <trans-unit id="f31a14315872f7d5ad4b31b0b814af75bcd37346" translate="yes" xml:space="preserve">
          <source>Example (Printers)</source>
          <target state="translated">示例(打印机</target>
        </trans-unit>
        <trans-unit id="76286390b82f9465aa1db504336b58a0882e7789" translate="yes" xml:space="preserve">
          <source>Example (PriorityQueue)</source>
          <target state="translated">例子(优先队列)</target>
        </trans-unit>
        <trans-unit id="64c31a2d546e425660696075602e9c55ede932f9" translate="yes" xml:space="preserve">
          <source>Example (Put)</source>
          <target state="translated">例子(放)</target>
        </trans-unit>
        <trans-unit id="d9b68d9bdb509763e088e0d350491fe1ff9bf03c" translate="yes" xml:space="preserve">
          <source>Example (Rand)</source>
          <target state="translated">例子(兰德)</target>
        </trans-unit>
        <trans-unit id="fd2979c4537d222cfc623fbc541e78e448137665" translate="yes" xml:space="preserve">
          <source>Example (ReadMostly)</source>
          <target state="translated">例子 (ReadMostly)</target>
        </trans-unit>
        <trans-unit id="b3e59e19171ce2c63c7a8904bd2f9921fb22a142" translate="yes" xml:space="preserve">
          <source>Example (Reader)</source>
          <target state="translated">例子(读者)</target>
        </trans-unit>
        <trans-unit id="4e46751a27f3c710d984255a6adac14458396a28" translate="yes" xml:space="preserve">
          <source>Example (ReadingAllMetrics)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b8c5483fc8ab7a02819c2ec4c8a1378d7169df" translate="yes" xml:space="preserve">
          <source>Example (ReadingOneMetric)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d966a83ff5b0a8a61283590badb1a431bd7d77" translate="yes" xml:space="preserve">
          <source>Example (Reset)</source>
          <target state="translated">例子(复位)</target>
        </trans-unit>
        <trans-unit id="f7b91d630287948e0bfeba35eefba5c01f1107af" translate="yes" xml:space="preserve">
          <source>Example (RetrievePositionInfo)</source>
          <target state="translated">示例 (RetrievePositionInfo)</target>
        </trans-unit>
        <trans-unit id="6d421c1f51583522754be7b57506ff4663194c40" translate="yes" xml:space="preserve">
          <source>Example (Roundtrip)</source>
          <target state="translated">例子(往返)</target>
        </trans-unit>
        <trans-unit id="997ee2d41b2c768a3ff8dd1b07a7450ed4680d2e" translate="yes" xml:space="preserve">
          <source>Example (Search)</source>
          <target state="translated">例子(搜索)</target>
        </trans-unit>
        <trans-unit id="26c8d95221bd62d1c6dd0e843baad8cbebaa0442" translate="yes" xml:space="preserve">
          <source>Example (Share)</source>
          <target state="translated">例子(份额)</target>
        </trans-unit>
        <trans-unit id="3abb8dfd074ee9afbe60f6cdd246feccb1d11c79" translate="yes" xml:space="preserve">
          <source>Example (Shift)</source>
          <target state="translated">例子(Shift)</target>
        </trans-unit>
        <trans-unit id="f4341e44bdeed6e7db74742550dcb962bdc52498" translate="yes" xml:space="preserve">
          <source>Example (SlicesInUnison)</source>
          <target state="translated">例子 (SlicesInUnison)</target>
        </trans-unit>
        <trans-unit id="09b2fe12f7c6e61ddb30325458425fd3d42ba3e7" translate="yes" xml:space="preserve">
          <source>Example (SortKeys)</source>
          <target state="translated">例子(SortKeys)</target>
        </trans-unit>
        <trans-unit id="a161b3dcacaf6f0af657412f43ec2e2697b4a566" translate="yes" xml:space="preserve">
          <source>Example (SortMultiKeys)</source>
          <target state="translated">例子(多键排序)</target>
        </trans-unit>
        <trans-unit id="c700c72cd356078aa83dc80aa5da8bd42f5ee825" translate="yes" xml:space="preserve">
          <source>Example (SortWrapper)</source>
          <target state="translated">例子(SortWrapper)</target>
        </trans-unit>
        <trans-unit id="a8bfb7061aa11f61ba7f0066df210a3c29777f98" translate="yes" xml:space="preserve">
          <source>Example (Sqrt2)</source>
          <target state="translated">例子 (Sqrt2)</target>
        </trans-unit>
        <trans-unit id="ebe403bbbdd2c63efdc5a9bb1601bc9f45a978c6" translate="yes" xml:space="preserve">
          <source>Example (Stream)</source>
          <target state="translated">例子(流)</target>
        </trans-unit>
        <trans-unit id="abbe3138d0178ab55ff211013783fb8af592cb7d" translate="yes" xml:space="preserve">
          <source>Example (StripPrefix)</source>
          <target state="translated">例子 (StripPrefix)</target>
        </trans-unit>
        <trans-unit id="6c16b94480edd0345910083abc5a6c549ce236af" translate="yes" xml:space="preserve">
          <source>Example (Suffix)</source>
          <target state="translated">例子(后缀)</target>
        </trans-unit>
        <trans-unit id="d15caef05f8ff9c74dc0547060823c024dc99f58" translate="yes" xml:space="preserve">
          <source>Example (Synchronization)</source>
          <target state="translated">例子(同步)</target>
        </trans-unit>
        <trans-unit id="a62f50ab20b1bf896520eb1f4cc5a1db4ed324b5" translate="yes" xml:space="preserve">
          <source>Example (TextMarshalJSON)</source>
          <target state="translated">示例 (TextMarshalJSON)</target>
        </trans-unit>
        <trans-unit id="fbd08593ac14b413e0da05c752b1367b5127acc2" translate="yes" xml:space="preserve">
          <source>Example (TextMarshalXML)</source>
          <target state="translated">示例 (TextMarshalXML)</target>
        </trans-unit>
        <trans-unit id="8e5dd403c2a724dfe512bb193bca762b97020dce" translate="yes" xml:space="preserve">
          <source>Example (Trailers)</source>
          <target state="translated">例子(预告片)</target>
        </trans-unit>
        <trans-unit id="748d838b8683a8f8d192b01d4d7d3a81f783d636" translate="yes" xml:space="preserve">
          <source>Example (TrailingTab)</source>
          <target state="translated">例子(尾部标签)</target>
        </trans-unit>
        <trans-unit id="dd049de33317203a20270875308ded5272141ba6" translate="yes" xml:space="preserve">
          <source>Example (Unix)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00eeea2ab162f08ebf0ba7ecdde22954780f472" translate="yes" xml:space="preserve">
          <source>Example (Unmarshal)</source>
          <target state="translated">例子(Unmarshal)</target>
        </trans-unit>
        <trans-unit id="553cb8898521d88b48c39b9422a097ee092a0266" translate="yes" xml:space="preserve">
          <source>Example (VerifyConnection)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4abde4525b91ff7ce0bef5c781d4706ee97ee0b8" translate="yes" xml:space="preserve">
          <source>Example (Whitespace)</source>
          <target state="translated">例子(空白)</target>
        </trans-unit>
        <trans-unit id="bbda3fcec0c984c4deccac6441b82d6551be8728" translate="yes" xml:space="preserve">
          <source>Example (Words)</source>
          <target state="translated">例子(字数)</target>
        </trans-unit>
        <trans-unit id="d5cf5e438485427250b065bf74fba906e865dd71" translate="yes" xml:space="preserve">
          <source>Example (WriterReader)</source>
          <target state="translated">例子(WriterReader)</target>
        </trans-unit>
        <trans-unit id="d30cd049e881e721a3e90310e35fd42bd393ca0d" translate="yes" xml:space="preserve">
          <source>Example demonstrates the use of the trace package to trace the execution of a Go program. The trace output will be written to the file trace.out</source>
          <target state="translated">本例演示了使用trace包来跟踪一个Go程序的执行。追踪输出将被写入文件trace.out。</target>
        </trans-unit>
        <trans-unit id="f2573490205ec3fa3c52174ceabc13d098ee040e" translate="yes" xml:space="preserve">
          <source>Example functions without output comments are compiled but not executed.</source>
          <target state="translated">没有输出注释的示例函数会被编译,但不会被执行。</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">使用实例。</target>
        </trans-unit>
        <trans-unit id="23f9d603e16f8ef16b61cb7dd71733745d6dc774" translate="yes" xml:space="preserve">
          <source>Example use:</source>
          <target state="translated">使用实例:</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="f4f8f48cf4d5e9a2b5fdf509e391d114af54249a" translate="yes" xml:space="preserve">
          <source>ExampleExp computes Euler's identity.</source>
          <target state="translated">例子Exp计算Euler的身份。</target>
        </trans-unit>
        <trans-unit id="e6ef84e4017d4e3a3b6e6f5fb063732f932d208e" translate="yes" xml:space="preserve">
          <source>ExampleInfo prints various facts recorded by the type checker in a types.Info struct: definitions of and references to each named object, and the type, value, and mode of every expression in the package.</source>
          <target state="translated">ExampleInfo 打印类型检查器在 types.Info 结构中记录的各种事实:每个命名对象的定义和引用,以及包中每个表达式的类型、值和模式。</target>
        </trans-unit>
        <trans-unit id="cb4bbe727d61b7f53c2e2ee56f081e85812a2931" translate="yes" xml:space="preserve">
          <source>ExampleMethodSet prints the method sets of various types.</source>
          <target state="translated">ExampleMethodSet打印各种类型的方法集。</target>
        </trans-unit>
        <trans-unit id="46027e906ab7b86a83cef5107b917049326109ed" translate="yes" xml:space="preserve">
          <source>ExampleMultiKeys demonstrates a technique for sorting a struct type using different sets of multiple fields in the comparison. We chain together &quot;Less&quot; functions, each of which compares a single field.</source>
          <target state="translated">ExampleMultiKeys演示了一种在比较中使用多个字段的不同集合对结构类型进行排序的技术。我们将 &quot;Less &quot;函数链在一起,每个函数比较一个字段。</target>
        </trans-unit>
        <trans-unit id="193e8ade5e79f30df0f3c6123d817327cd4b8cce" translate="yes" xml:space="preserve">
          <source>ExampleScope prints the tree of Scopes of a package created from a set of parsed files.</source>
          <target state="translated">ExampleScope 打印从一组解析文件创建的包的作用域树。</target>
        </trans-unit>
        <trans-unit id="8c65e0caab54f4a2e226c019adde6010c7ba6016" translate="yes" xml:space="preserve">
          <source>ExampleSortKeys demonstrates a technique for sorting a struct type using programmable sort criteria.</source>
          <target state="translated">ExampleSortKeys演示了一种使用可编程排序标准对结构类型进行排序的技术。</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="7be87e9fdaec2ce2e3677aba2da5b665e394bd18" translate="yes" xml:space="preserve">
          <source>Examples found in _test.go files are associated with the corresponding type, function, method, or the package, based on their name. If the example has a suffix in its name, it is set in the Example.Suffix field. Examples with malformed names are skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f8a2b98443a4dd938fd26ea0bb96b2061a1486" translate="yes" xml:space="preserve">
          <source>Examples of struct field tags and their meanings:</source>
          <target state="translated">结构域标签的例子及其含义。</target>
        </trans-unit>
        <trans-unit id="36aeb481d0cd156bf8f93ce11b20dafd7c23cb5e" translate="yes" xml:space="preserve">
          <source>Examples returns the examples found in testFiles, sorted by Name field. The Order fields record the order in which the examples were encountered. The Suffix field is not populated when Examples is called directly, it is only populated by NewFromFiles for examples it finds in _test.go files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3868550c47675aee1b65322c0a530356bac93476" translate="yes" xml:space="preserve">
          <source>Examples returns the examples found in the files, sorted by Name field. The Order fields record the order in which the examples were encountered.</source>
          <target state="translated">Examples 返回在文件中找到的例子,按 Name 字段排序。Order字段记录了遇到例子的顺序。</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="2139b5f270ff75a838ef994f1a7c0702593e500d" translate="yes" xml:space="preserve">
          <source>Except for reading the body, handlers should not modify the provided Request.</source>
          <target state="translated">除了读取正文,处理程序不应修改提供的Request。</target>
        </trans-unit>
        <trans-unit id="d972e775d3ec8bbf70216136812cfc2aa6c6c1f2" translate="yes" xml:space="preserve">
          <source>Except when printed using the verbs %T and %p, special formatting considerations apply for operands that implement certain interfaces. In order of application:</source>
          <target state="translated">除了使用动词%T和%p打印时,对于实现特定接口的操作数,需要考虑特殊的格式。按应用顺序排列。</target>
        </trans-unit>
        <trans-unit id="663fbbe8a5ab797134d5a3e798a619fc2b622e8a" translate="yes" xml:space="preserve">
          <source>Exec executes a prepared statement with the given arguments and returns a Result summarizing the effect of the statement.</source>
          <target state="translated">Exec执行一个带有给定参数的准备好的语句,并返回一个Result,总结该语句的效果。</target>
        </trans-unit>
        <trans-unit id="b2e416ff8481c94b506d5f1d3e462de40111511e" translate="yes" xml:space="preserve">
          <source>Exec executes a query that doesn't return rows. For example: an INSERT and UPDATE.</source>
          <target state="translated">Exec执行一个不返回行的查询。例如:INSERT和UPDATE。</target>
        </trans-unit>
        <trans-unit id="f3c42d65910e9f7b2f5399cc46977eb6b49601aa" translate="yes" xml:space="preserve">
          <source>Exec executes a query without returning any rows. The args are for any placeholder parameters in the query.</source>
          <target state="translated">Exec执行一个查询,不返回任何记录。args是查询中的任何占位参数。</target>
        </trans-unit>
        <trans-unit id="68b4576f203991257daca46f8ba57ce5bc9b1e71" translate="yes" xml:space="preserve">
          <source>Exec invokes the execve(2) system call.</source>
          <target state="translated">Exec调用execve(2)系统调用。</target>
        </trans-unit>
        <trans-unit id="f74f4301002ea9d1c1563f1fa536de299c417471" translate="yes" xml:space="preserve">
          <source>Exec may return ErrSkip.</source>
          <target state="translated">Exec可能返回ErrSkip。</target>
        </trans-unit>
        <trans-unit id="b927a0c4f27f7c2245dd620e36187bf80c3d0e50" translate="yes" xml:space="preserve">
          <source>ExecContext executes a prepared statement with the given arguments and returns a Result summarizing the effect of the statement.</source>
          <target state="translated">ExecContext用给定的参数执行一个准备好的语句,并返回一个Result,总结该语句的效果。</target>
        </trans-unit>
        <trans-unit id="9d0bd4f3ae9832eb93898d324b87a29a1346fa77" translate="yes" xml:space="preserve">
          <source>ExecContext executes a query that doesn't return rows. For example: an INSERT and UPDATE.</source>
          <target state="translated">ExecContext执行一个不返回行的查询。例如:INSERT和UPDATE。</target>
        </trans-unit>
        <trans-unit id="fcecac057ade8a549a93af9d19f63ed3d3a1e5e8" translate="yes" xml:space="preserve">
          <source>ExecContext executes a query without returning any rows. The args are for any placeholder parameters in the query.</source>
          <target state="translated">ExecContext执行一个查询而不返回任何记录。args是查询中的任何占位参数。</target>
        </trans-unit>
        <trans-unit id="28385547a6dc992edbb21722af7149817bf1e882" translate="yes" xml:space="preserve">
          <source>ExecError is the custom error type returned when Execute has an error evaluating its template. (If a write error occurs, the actual error is returned; it will not be of type ExecError.)</source>
          <target state="translated">ExecError是当Execute在评估其模板时出现错误时返回的自定义错误类型。(如果发生写错误,则返回实际的错误;它不会是ExecError类型。)</target>
        </trans-unit>
        <trans-unit id="f8cd14bc64afac06caa8a1276637b7f9488463ea" translate="yes" xml:space="preserve">
          <source>Execer is an optional interface that may be implemented by a Conn.</source>
          <target state="translated">Execer是一个可选择的接口,可以由Conn.NET实现。</target>
        </trans-unit>
        <trans-unit id="5c1ff5cf4051fbd8da0a29e75b0f05215a476e06" translate="yes" xml:space="preserve">
          <source>ExecerContext is an optional interface that may be implemented by a Conn.</source>
          <target state="translated">ExecerContext是一个可选的接口,它可以由Conn.ExecerContext实现。</target>
        </trans-unit>
        <trans-unit id="4a3be90db73ae31f1fa874b8e8b95f6320af4ec1" translate="yes" xml:space="preserve">
          <source>ExecerContext may return ErrSkip.</source>
          <target state="translated">ExecerContext可能返回ErrSkip。</target>
        </trans-unit>
        <trans-unit id="116fbe2364a9d887fc69eaade708bc7fe63a456c" translate="yes" xml:space="preserve">
          <source>ExecerContext must honor the context timeout and return when the context is canceled.</source>
          <target state="translated">ExecerContext必须尊重上下文超时,并在上下文被取消时返回。</target>
        </trans-unit>
        <trans-unit id="3b13379f2972a85ae6473933a27341217bb8895b" translate="yes" xml:space="preserve">
          <source>Executable is not supported on nacl.</source>
          <target state="translated">nacl上不支持可执行文件。</target>
        </trans-unit>
        <trans-unit id="e9ae4cbb34da99d02173a7dcb28dd93c5dce7f5d" translate="yes" xml:space="preserve">
          <source>Executable returns an absolute path unless an error occurred.</source>
          <target state="translated">除非发生错误,否则可执行文件会返回一个绝对路径。</target>
        </trans-unit>
        <trans-unit id="adec63f8f562d73a545ecff88acb5d043aea120d" translate="yes" xml:space="preserve">
          <source>Executable returns the path name for the executable that started the current process. There is no guarantee that the path is still pointing to the correct executable. If a symlink was used to start the process, depending on the operating system, the result might be the symlink or the path it pointed to. If a stable result is needed, path/filepath.EvalSymlinks might help.</source>
          <target state="translated">Executable 返回启动当前进程的可执行文件的路径名。不能保证该路径仍然指向正确的可执行文件。如果使用了符号链接来启动进程,根据操作系统的不同,结果可能是符号链接或其指向的路径。如果需要一个稳定的结果,path/filepath.EvalSymlinks可能会有帮助。</target>
        </trans-unit>
        <trans-unit id="7294a8cb458c8e65f536967bf6b4d79b8c096c55" translate="yes" xml:space="preserve">
          <source>Execute applies a parsed template to the specified data object, and writes the output to wr. If an error occurs executing the template or writing its output, execution stops, but partial results may already have been written to the output writer. A template may be executed safely in parallel, although if parallel executions share a Writer the output may be interleaved.</source>
          <target state="translated">Execute将解析后的模板应用于指定的数据对象,并将输出写到wr。如果在执行模板或写入其输出时发生错误,则停止执行,但部分结果可能已经写入输出写入器。模板可以安全地并行执行,尽管如果并行执行共享一个Writer,输出可能会交错。</target>
        </trans-unit>
        <trans-unit id="d8ab91b77ffead5cde7f6f24acf146ee0201982a" translate="yes" xml:space="preserve">
          <source>Execute applies a parsed template to the specified data object, writing the output to wr. If an error occurs executing the template or writing its output, execution stops, but partial results may already have been written to the output writer. A template may be executed safely in parallel, although if parallel executions share a Writer the output may be interleaved.</source>
          <target state="translated">执行将解析后的模板应用于指定的数据对象,并将输出写到wr。如果在执行模板或写入其输出时发生错误,则停止执行,但部分结果可能已经写入输出写入器。模板可以安全地并行执行,尽管如果并行执行共享一个Writer,输出可能会交错。</target>
        </trans-unit>
        <trans-unit id="caa7fd65efa38167472fbe062e9cd8ed9345685c" translate="yes" xml:space="preserve">
          <source>ExecuteTemplate applies the template associated with t that has the given name to the specified data object and writes the output to wr. If an error occurs executing the template or writing its output, execution stops, but partial results may already have been written to the output writer. A template may be executed safely in parallel, although if parallel executions share a Writer the output may be interleaved.</source>
          <target state="translated">ExecuteTemplate将与t相关联的、具有给定名称的模板应用到指定的数据对象上,并将输出写到wr。如果在执行模板或写入其输出时发生错误,则停止执行,但部分结果可能已经写入输出写入器。模板可以安全地并行执行,尽管如果并行执行共享一个Writer,输出可能会交错。</target>
        </trans-unit>
        <trans-unit id="d5e15a34c9961f0a802784591faae9d82e65ab11" translate="yes" xml:space="preserve">
          <source>Exit causes the current program to exit with the given status code. Conventionally, code zero indicates success, non-zero an error. The program terminates immediately; deferred functions are not run.</source>
          <target state="translated">Exit使当前程序以给定的状态码退出。通常,代码0表示成功,非0表示错误。程序立即终止,延迟函数不运行。</target>
        </trans-unit>
        <trans-unit id="323cb868fc9882809ab8fcf5b777ebf834c84081" translate="yes" xml:space="preserve">
          <source>ExitCode returns the exit code of the exited process, or -1 if the process hasn't exited or was terminated by a signal.</source>
          <target state="translated">ExitCode 返回已退出进程的退出代码,如果进程没有退出或被信号终止,则返回-1。</target>
        </trans-unit>
        <trans-unit id="bca7074b049716c77d327197e75adfe965e8630d" translate="yes" xml:space="preserve">
          <source>Exited reports whether the program has exited.</source>
          <target state="translated">Exited报告程序是否已经退出。</target>
        </trans-unit>
        <trans-unit id="5871b8d86fba0af13c05dc83a5e5933bb7903327" translate="yes" xml:space="preserve">
          <source>Exp</source>
          <target state="translated">Exp</target>
        </trans-unit>
        <trans-unit id="510ebbd48ca70ddfb27143ea5c2bad2d44f10597" translate="yes" xml:space="preserve">
          <source>Exp returns e**x, the base-e exponential of x.</source>
          <target state="translated">Exp返回e**x,x的基数-e指数。</target>
        </trans-unit>
        <trans-unit id="819216a314daa46d457f6cb2b754e5c282f0d0ee" translate="yes" xml:space="preserve">
          <source>Exp sets z = x**y mod |m| (i.e. the sign of m is ignored), and returns z. If m == nil or m == 0, z = x**y unless y &amp;lt;= 0 then z = 1. If m != 0, y &amp;lt; 0, and x and m are not relatively prime, z is unchanged and nil is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95aa110ed338c85b885ee58002691284514da3af" translate="yes" xml:space="preserve">
          <source>Exp sets z = x**y mod |m| (i.e. the sign of m is ignored), and returns z. If m == nil or m == 0, z = x**y unless y &amp;lt;= 0 then z = 1. If m &amp;gt; 0, y &amp;lt; 0, and x and n are not relatively prime, z is unchanged and nil is returned.</source>
          <target state="translated">exp集合z = x ** y mod | m | （即忽略m的符号），并返回z。如果m == nil或m == 0，则z = x ** y，除非y &amp;lt;= 0，然后z =1。如果m&amp;gt; 0，y &amp;lt;0，并且x和n不是相对质数，则z不变，且nil返回。</target>
        </trans-unit>
        <trans-unit id="210a47f22b336b9e11b90dccaad9a2e3c0276fcc" translate="yes" xml:space="preserve">
          <source>Exp2</source>
          <target state="translated">Exp2</target>
        </trans-unit>
        <trans-unit id="ea1f0ddfdecd3517aad8d1a91705ef531de70942" translate="yes" xml:space="preserve">
          <source>Exp2 returns 2**x, the base-2 exponential of x.</source>
          <target state="translated">Exp2返回2**x,x的基数-2指数。</target>
        </trans-unit>
        <trans-unit id="862a985d8f0da4e95960d25b159f9e9e124d15f5" translate="yes" xml:space="preserve">
          <source>ExpFloat64 returns an exponentially distributed float64 in the range (0, +math.MaxFloat64] with an exponential distribution whose rate parameter (lambda) is 1 and whose mean is 1/lambda (1) from the default Source. To produce a distribution with a different rate parameter, callers can adjust the output using:</source>
          <target state="translated">ExpFloat64从默认的Source返回一个指数分布的float64,其范围为(0,+math.MaxFloat64],其速率参数(lambda)为1,平均值为1/lambda(1)。要产生一个具有不同速率参数的分布,调用者可以使用调整输出。</target>
        </trans-unit>
        <trans-unit id="da4e3aea659a15d7397bad8de4e0bdaee5767774" translate="yes" xml:space="preserve">
          <source>ExpFloat64 returns an exponentially distributed float64 in the range (0, +math.MaxFloat64] with an exponential distribution whose rate parameter (lambda) is 1 and whose mean is 1/lambda (1). To produce a distribution with a different rate parameter, callers can adjust the output using:</source>
          <target state="translated">ExpFloat64返回一个指数分布的float64,范围是(0,+math.MaxFloat64],其指数分布的速率参数(lambda)为1,平均值为1/lambda(1)。要产生一个不同速率参数的分布,调用者可以使用调整输出。</target>
        </trans-unit>
        <trans-unit id="9869e506c38f643f1fe985347c015deace6baa22" translate="yes" xml:space="preserve">
          <source>Expand</source>
          <target state="translated">Expand</target>
        </trans-unit>
        <trans-unit id="e8b52c66c070329e5def2fa05af7b37abc20b0c6" translate="yes" xml:space="preserve">
          <source>Expand appends template to dst and returns the result; during the append, Expand replaces variables in the template with corresponding matches drawn from src. The match slice should have been returned by FindSubmatchIndex.</source>
          <target state="translated">Expand将模板追加到dst,并返回结果;在追加过程中,Expand将模板中的变量替换为从src中抽取的相应匹配片。匹配片应该是由FindSubmatchIndex返回的。</target>
        </trans-unit>
        <trans-unit id="ea00d9e907ef2f65f476a8e5a1f543fd9142d2a2" translate="yes" xml:space="preserve">
          <source>Expand replaces ${var} or $var in the string based on the mapping function. For example, os.ExpandEnv(s) is equivalent to os.Expand(s, os.Getenv).</source>
          <target state="translated">Expand 根据映射函数替换字符串中的 ${var}或 $var。例如,os.ExpandEnv(s)等同于 os.Expand(s,os.Getenv)。</target>
        </trans-unit>
        <trans-unit id="61b36934002dfcd75585031913256f6e1ddb79f5" translate="yes" xml:space="preserve">
          <source>ExpandEnv</source>
          <target state="translated">ExpandEnv</target>
        </trans-unit>
        <trans-unit id="6389ca0cb471c7cb629f85955e0325ee99607a54" translate="yes" xml:space="preserve">
          <source>ExpandEnv replaces ${var} or $var in the string according to the values of the current environment variables. References to undefined variables are replaced by the empty string.</source>
          <target state="translated">ExpandEnv根据当前环境变量的值来替换字符串中的${var}或$var。对未定义的变量的引用会被空字符串替换。</target>
        </trans-unit>
        <trans-unit id="92843cc46bc54c2861399f972b67d13993534275" translate="yes" xml:space="preserve">
          <source>ExpandString is like Expand but the template and source are strings. It appends to and returns a byte slice in order to give the calling code control over allocation.</source>
          <target state="translated">ExpandString 和 Expand 一样,但模板和源是字符串。它追加并返回一个字节片断,以便让调用代码控制分配。</target>
        </trans-unit>
        <trans-unit id="251a582ce62bfefda6c673fcd37e8d59e05a2922" translate="yes" xml:space="preserve">
          <source>Expired connections may be closed lazily before reuse.</source>
          <target state="translated">过期的连接可在重新使用前懒得关闭。</target>
        </trans-unit>
        <trans-unit id="481e2978ff7b371bd03a0ef6010a75e8c6fd03e9" translate="yes" xml:space="preserve">
          <source>Explicit argument indexes:</source>
          <target state="translated">明确的参数索引。</target>
        </trans-unit>
        <trans-unit id="a560a4789cca42ae8b0ecb7e313e3dc7fdad381d" translate="yes" xml:space="preserve">
          <source>ExplicitMethod returns the i'th explicitly declared method of interface t for 0 &amp;lt;= i &amp;lt; t.NumExplicitMethods(). The methods are ordered by their unique Id.</source>
          <target state="translated">ExplicitMethod返回接口t的第i个显式声明的方法，其取值为0 &amp;lt;= i &amp;lt;t.NumExplicitMethods（）。这些方法按其唯一ID排序。</target>
        </trans-unit>
        <trans-unit id="ecb86881f951179445ed42ff4652a7bc2018af23" translate="yes" xml:space="preserve">
          <source>Expm1</source>
          <target state="translated">Expm1</target>
        </trans-unit>
        <trans-unit id="210f18d7d2dca82962d73d77b3cb6405a7e3ec3b" translate="yes" xml:space="preserve">
          <source>Expm1 returns e**x - 1, the base-e exponential of x minus 1. It is more accurate than Exp(x) - 1 when x is near zero.</source>
          <target state="translated">Expm1 返回 e**x-1,x 的基数-e 指数减 1。当x接近零时,它比Exp(x)-1更准确。</target>
        </trans-unit>
        <trans-unit id="8fbca60a155d19143993926486ce4e88d6422189" translate="yes" xml:space="preserve">
          <source>Exponent and precision limits.</source>
          <target state="translated">指数和精度限制。</target>
        </trans-unit>
        <trans-unit id="4480a118f418f1021763f928c23e7ee08b91b4bb" translate="yes" xml:space="preserve">
          <source>ExportKeyingMaterial returns length bytes of exported key material in a new slice as defined in RFC 5705. If context is nil, it is not used as part of the seed. If the connection was set to allow renegotiation via Config.Renegotiation, this function will return an error.</source>
          <target state="translated">ExportKeyingMaterial在RFC 5705中定义的新分片中返回导出的密钥材料的长度字节。如果context为nil,则不作为种子的一部分使用。如果连接被设置为允许通过Config.Renegotiation重新协商,这个函数将返回一个错误。</target>
        </trans-unit>
        <trans-unit id="5548a6e6a833cb04c8f11cf10934171fef992a89" translate="yes" xml:space="preserve">
          <source>Exported reports whether the object is exported (starts with a capital letter). It doesn't take into account whether the object is in a local (function) scope or not.</source>
          <target state="translated">Exported 报告对象是否被导出(以大写字母开头),它不考虑对象是否在本地(函数)范围内。它不考虑对象是否在本地(函数)范围内。</target>
        </trans-unit>
        <trans-unit id="5c95f3a80a2e18bac3dc7cc110e89646c904993c" translate="yes" xml:space="preserve">
          <source>ExprString returns the (possibly shortened) string representation for x. Shortened representations are suitable for user interfaces but may not necessarily follow Go syntax.</source>
          <target state="translated">ExprString 返回 x 的字符串表示法(可能是缩短的)。缩短的表示法适用于用户界面,但可能不一定遵循 Go 语法。</target>
        </trans-unit>
        <trans-unit id="74653975deaee88d4b0d4bc9bd71866d307248ad" translate="yes" xml:space="preserve">
          <source>Ext</source>
          <target state="translated">Ext</target>
        </trans-unit>
        <trans-unit id="fa3fed82b4272b5f7259531edfdcd5e9f6c21ba8" translate="yes" xml:space="preserve">
          <source>Ext returns the file name extension used by path. The extension is the suffix beginning at the final dot in the final element of path; it is empty if there is no dot.</source>
          <target state="translated">Ext返回path使用的文件名扩展名。扩展名是path最后一个元素的最后一个点开始的后缀,如果没有点,则为空。</target>
        </trans-unit>
        <trans-unit id="50a89f2dbf1cde287eb428e1ff050f98aebee55f" translate="yes" xml:space="preserve">
          <source>Ext returns the file name extension used by path. The extension is the suffix beginning at the final dot in the final slash-separated element of path; it is empty if there is no dot.</source>
          <target state="translated">Ext返回path使用的文件名扩展名。扩展名是path最后一个斜线分隔的元素中从最后一个点开始的后缀;如果没有点,则为空。</target>
        </trans-unit>
        <trans-unit id="c784f4a2ddacb355b9ec53f45e6f9e5b26f8ef62" translate="yes" xml:space="preserve">
          <source>ExtKeyUsage represents an extended set of actions that are valid for a given key. Each of the ExtKeyUsage* constants define a unique action.</source>
          <target state="translated">ExtKeyUsage表示对给定密钥有效的扩展动作集,每个ExtKeyUsage*常量都定义了唯一的动作。每一个ExtKeyUsage*常量都定义了一个独特的操作。</target>
        </trans-unit>
        <trans-unit id="caf85fd048e02a11c54f8e5a543cc54c32a75ac8" translate="yes" xml:space="preserve">
          <source>Extended Key Usage values are enforced down a chain, so an intermediate or root that enumerates EKUs prevents a leaf from asserting an EKU not in that list.</source>
          <target state="translated">扩展密钥使用值是在链上强制执行的,所以列举 EKU 的中间或根可以防止叶子断言不在该列表中的 EKU。</target>
        </trans-unit>
        <trans-unit id="6d6966d840a8220de008be4f3eed1157c72df574" translate="yes" xml:space="preserve">
          <source>Extended Key Usage values are enforced nested down a chain, so an intermediate or root that enumerates EKUs prevents a leaf from asserting an EKU not in that list. (While this is not specified, it is common practice in order to limit the types of certificates a CA can issue.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d231fb333d7ce02bca636a53ff3662ee9b31d0e" translate="yes" xml:space="preserve">
          <source>Extension reports whether an extension is support by the server. The extension name is case-insensitive. If the extension is supported, Extension also returns a string that contains any parameters the server specifies for the extension.</source>
          <target state="translated">扩展报告服务器是否支持该扩展。扩展名是不区分大小写的。如果支持该扩展,Extension还返回一个包含服务器为该扩展指定的任何参数的字符串。</target>
        </trans-unit>
        <trans-unit id="ace6ecb8af6a3359dd0ee95e26152ccb34af5460" translate="yes" xml:space="preserve">
          <source>Extension represents the ASN.1 structure of the same name. See RFC 5280, section 4.2.</source>
          <target state="translated">扩展代表同名的ASN.1结构。见RFC 5280,4.2节。</target>
        </trans-unit>
        <trans-unit id="31959200e26a22be03bc0bb47ef68bbf9b24bab3" translate="yes" xml:space="preserve">
          <source>Extensions are looked up first case-sensitively, then case-insensitively.</source>
          <target state="translated">扩展词先按大小写查询,再按大小写查询。</target>
        </trans-unit>
        <trans-unit id="1cbba6001e28100d482f6a6299792705c6215e5a" translate="yes" xml:space="preserve">
          <source>ExtensionsByType returns the extensions known to be associated with the MIME type typ. The returned extensions will each begin with a leading dot, as in &quot;.html&quot;. When typ has no associated extensions, ExtensionsByType returns an nil slice.</source>
          <target state="translated">ExtensionsByType返回已知的与MIME类型相关联的扩展名。返回的扩展名将以前导点开始,如&quot;.html&quot;。当 typ 没有关联的扩展名时,ExtensionsByType 返回一个 nil 分片。</target>
        </trans-unit>
        <trans-unit id="8aad579fa6a17330a51ba206c40c063267220aca" translate="yes" xml:space="preserve">
          <source>FMA returns x * y + z, computed with only one rounding. (That is, FMA returns the fused multiply-add of x, y, and z.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454ce48fdbfdf660ea0fda204f28f2c73e97be30" translate="yes" xml:space="preserve">
          <source>FS converts fsys to a FileSystem implementation, for use with FileServer and NewFileTransport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a859f5a1f7f80648935d34e00e71b955d288ce" translate="yes" xml:space="preserve">
          <source>FS implements fs.FS, so it can be used with any package that understands file system interfaces, including net/http, text/template, and html/template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5564d0b153d7e72e28960e38cc6a602ab1f277d9" translate="yes" xml:space="preserve">
          <source>FS implements the io/fs package's FS interface, so it can be used with any package that understands file systems, including net/http, text/template, and html/template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f92bb33922145bd437972bd7334d66d54fc74c" translate="yes" xml:space="preserve">
          <source>Fail marks the function as having failed but continues execution.</source>
          <target state="translated">失败标志着函数失败,但继续执行。</target>
        </trans-unit>
        <trans-unit id="c96da18b07e966a06683f2215098b994edf8d8a8" translate="yes" xml:space="preserve">
          <source>FailNow marks the function as having failed and stops its execution by calling runtime.Goexit (which then runs all deferred calls in the current goroutine). Execution will continue at the next test or benchmark. FailNow must be called from the goroutine running the test or benchmark function, not from other goroutines created during the test. Calling FailNow does not stop those other goroutines.</source>
          <target state="translated">FailNow标志着函数已经失败,并通过调用runtime.Goexit(然后运行当前goroutine中的所有延迟调用)停止其执行。在下一次测试或基准测试时将继续执行。FailNow必须从运行测试或基准函数的goroutine中调用,而不是从测试期间创建的其他goroutine中调用。调用FailNow并不会停止那些其他goroutine。</target>
        </trans-unit>
        <trans-unit id="01a2572255742baf72eacb416d97e18b48d912c5" translate="yes" xml:space="preserve">
          <source>Failed reports whether the function has failed.</source>
          <target state="translated">Failed(失败)报告该函数是否失败。</target>
        </trans-unit>
        <trans-unit id="158e2280504673822ca1dd07952532cc4d1da5a7" translate="yes" xml:space="preserve">
          <source>Fatal is equivalent to Log followed by FailNow.</source>
          <target state="translated">Fatal相当于Log,后面是FailNow。</target>
        </trans-unit>
        <trans-unit id="59eb8d095a56a5d642425c97f87d097bf1a29e0c" translate="yes" xml:space="preserve">
          <source>Fatal is equivalent to Print() followed by a call to os.Exit(1).</source>
          <target state="translated">Fatal 相当于 Print()之后调用 os.Exit(1)。</target>
        </trans-unit>
        <trans-unit id="1b648a69f1114f39bd45b11c4cb17246fbb28c1b" translate="yes" xml:space="preserve">
          <source>Fatal is equivalent to l.Print() followed by a call to os.Exit(1).</source>
          <target state="translated">Fatal 相当于 l.Print()之后调用 os.Exit(1)。</target>
        </trans-unit>
        <trans-unit id="821293c77a8a8bf8b0fca5f95004d9fc65b67208" translate="yes" xml:space="preserve">
          <source>Fatalf is equivalent to Logf followed by FailNow.</source>
          <target state="translated">Fatalf相当于Logf,其次是FailNow。</target>
        </trans-unit>
        <trans-unit id="83255ac37e112e05058d8a28ec8b155f3e9d2e47" translate="yes" xml:space="preserve">
          <source>Fatalf is equivalent to Printf() followed by a call to os.Exit(1).</source>
          <target state="translated">Fatalf 相当于 Printf()之后调用 os.Exit(1)。</target>
        </trans-unit>
        <trans-unit id="8571875ef68d4b9deea013c46be5e95e7550519a" translate="yes" xml:space="preserve">
          <source>Fatalf is equivalent to l.Printf() followed by a call to os.Exit(1).</source>
          <target state="translated">Fatalf相当于l.Printf()之后调用os.Exit(1)。</target>
        </trans-unit>
        <trans-unit id="e48e9dcadd0241869c65df99078d16d774bed84d" translate="yes" xml:space="preserve">
          <source>Fatalln is equivalent to Println() followed by a call to os.Exit(1).</source>
          <target state="translated">Fatalln 相当于 Println()之后调用 os.Exit(1)。</target>
        </trans-unit>
        <trans-unit id="7df0d59b5e282da60574bc47edaa9526f95c3b6d" translate="yes" xml:space="preserve">
          <source>Fatalln is equivalent to l.Println() followed by a call to os.Exit(1).</source>
          <target state="translated">Fatalln相当于l.Println()之后调用os.Exit(1)。</target>
        </trans-unit>
        <trans-unit id="0cb27ee0cfbf9af89a40e300698ac1dde2642f55" translate="yes" xml:space="preserve">
          <source>FcntlFlock performs a fcntl syscall for the F_GETLK, F_SETLK or F_SETLKW command.</source>
          <target state="translated">FcntlFlock对F_GETLK、F_SETLK或F_SETLKW命令执行fcntl系统调用。</target>
        </trans-unit>
        <trans-unit id="479c59eb2b9f2ca39b917b15c8f8a3cbcd795647" translate="yes" xml:space="preserve">
          <source>Fd returns the integer Unix file descriptor referencing the open file. If f is closed, the file descriptor becomes invalid. If f is garbage collected, a finalizer may close the file descriptor, making it invalid; see runtime.SetFinalizer for more information on when a finalizer might be run. On Unix systems this will cause the SetDeadline methods to stop working. Because file descriptors can be reused, the returned file descriptor may only be closed through the Close method of f, or by its finalizer during garbage collection. Otherwise, during garbage collection the finalizer may close an unrelated file descriptor with the same (reused) number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb72a865b5feb1394b8952b8f15d42e68aa3981b" translate="yes" xml:space="preserve">
          <source>Fd returns the integer Unix file descriptor referencing the open file. The file descriptor is valid only until f.Close is called or f is garbage collected. On Unix systems this will cause the SetDeadline methods to stop working.</source>
          <target state="translated">Fd返回引用打开文件的整数Unix文件描述符。这个文件描述符只在调用f.Close或者f被垃圾回收之前有效,在Unix系统中,这将导致SetDeadline方法停止工作。在Unix系统中,这将导致SetDeadline方法停止工作。</target>
        </trans-unit>
        <trans-unit id="d61d809eab07312ae05f8f709b84547398d2efdf" translate="yes" xml:space="preserve">
          <source>Field returns the i'th field for 0 &amp;lt;= i &amp;lt; NumFields().</source>
          <target state="translated">字段返回第0个i = N &amp;lt;NumFields（）的第i个字段。</target>
        </trans-unit>
        <trans-unit id="261d167c68d467f10d820edc6286e66bbb21759b" translate="yes" xml:space="preserve">
          <source>Field returns the i'th field of the struct v. It panics if v's Kind is not Struct or i is out of range.</source>
          <target state="translated">Field返回结构v的第i个字段。如果v的Kind不是Struct,或者i超出范围,它就会惊慌失措。</target>
        </trans-unit>
        <trans-unit id="4c791e0a7e5bd33b119b2f78289ee593a7501c42" translate="yes" xml:space="preserve">
          <source>FieldByIndex returns the nested field corresponding to index. It panics if v's Kind is not struct.</source>
          <target state="translated">FieldByIndex返回与index对应的嵌套字段。如果v的Kind不是结构体,它就会恐慌。</target>
        </trans-unit>
        <trans-unit id="8183a55fec39ebd325b9f393dccbc786cb50e104" translate="yes" xml:space="preserve">
          <source>FieldByName and related functions consider struct field names to be equal if the names are equal, even if they are unexported names originating in different packages. The practical effect of this is that the result of t.FieldByName(&quot;x&quot;) is not well defined if the struct type t contains multiple fields named x (embedded from different packages). FieldByName may return one of the fields named x or may report that there are none. See &lt;a href=&quot;https://golang.org/issue/4876&quot;&gt;https://golang.org/issue/4876&lt;/a&gt; for more details.</source>
          <target state="translated">即使名称相同，FieldByName和相关函数也会将结构字段名称视为相等，即使它们是源自不同包的未导出名称也是如此。这样做的实际效果是，如果结构类型t包含多个名为x的字段（嵌入在不同的程序包中），则t.FieldByName（&amp;ldquo; x&amp;rdquo;）的结果定义不明确。FieldByName可能返回名为x的字段之一，或者可能报告没有字段。有关更多详细信息，请参见&lt;a href=&quot;https://golang.org/issue/4876&quot;&gt;https://golang.org/issue/4876&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="64a2508218e09b64bdd0d9e7f24c36121018ee1f" translate="yes" xml:space="preserve">
          <source>FieldByName returns the struct field with the given name. It returns the zero Value if no field was found. It panics if v's Kind is not struct.</source>
          <target state="translated">FieldByName返回指定名称的结构体字段。如果没有找到字段,则返回零值。如果v的Kind不是结构体,它就会惊慌失措。</target>
        </trans-unit>
        <trans-unit id="d05b4005e71684b698845fc4189a49e33cd3e7f3" translate="yes" xml:space="preserve">
          <source>FieldByNameFunc returns the struct field with a name that satisfies the match function. It panics if v's Kind is not struct. It returns the zero Value if no field was found.</source>
          <target state="translated">FieldByNameFunc返回符合匹配函数的名称的结构字段。如果v的Kind不是结构体,它就会惊慌失措。如果没有找到字段,则返回零值。</target>
        </trans-unit>
        <trans-unit id="7c99e9b1642562e3e1353bb454e3388fb902c996" translate="yes" xml:space="preserve">
          <source>FieldNode holds a field (identifier starting with '.'). The names may be chained ('.x.y'). The period is dropped from each ident.</source>
          <target state="translated">FieldNode持有一个字段(以'.'开头的标识符)。名称可以是连锁的('.x.y')。每个标识符都要去掉句号。</target>
        </trans-unit>
        <trans-unit id="e8b685271238adf161cffed3c91f54d97023262b" translate="yes" xml:space="preserve">
          <source>Fields</source>
          <target state="translated">Fields</target>
        </trans-unit>
        <trans-unit id="b282c4f43da573ed9235e6d31c0129363fbd6a56" translate="yes" xml:space="preserve">
          <source>Fields interprets s as a sequence of UTF-8-encoded code points. It splits the slice s around each instance of one or more consecutive white space characters, as defined by unicode.IsSpace, returning a slice of subslices of s or an empty slice if s contains only white space.</source>
          <target state="translated">Fields 将 s 解释为 UTF-8 编码的码点序列。它按照unicode.IsSpace的定义,围绕着一个或多个连续的空白字符实例分割片断s,返回s的子片断,如果s只包含空白,则返回一个空片断。</target>
        </trans-unit>
        <trans-unit id="11942ab8089728dea08ce9ed92990aab227d9b83" translate="yes" xml:space="preserve">
          <source>Fields splits the string s around each instance of one or more consecutive white space characters, as defined by unicode.IsSpace, returning a slice of substrings of s or an empty slice if s contains only white space.</source>
          <target state="translated">Fields 将字符串 s 围绕一个或多个连续的空白字符实例进行分割,正如 unicode.IsSpace 所定义的那样,返回 s 的子串的一个分片,如果 s 只包含空白,则返回一个空分片。</target>
        </trans-unit>
        <trans-unit id="1cddbffb0a4099caf5fcbfd9135dbe9cc1348312" translate="yes" xml:space="preserve">
          <source>Fields which start and stop with the quote character &quot; are called quoted-fields. The beginning and ending quote are not part of the field.</source>
          <target state="translated">以引号字符&quot;&quot;开头和结尾的字段称为引号字段。开头和结尾的引号不是字段的一部分。</target>
        </trans-unit>
        <trans-unit id="0ed084c27b5c1cc1510b75a6eea5cceac8dc8568" translate="yes" xml:space="preserve">
          <source>FieldsFunc</source>
          <target state="translated">FieldsFunc</target>
        </trans-unit>
        <trans-unit id="77deb011addc0b77675cb66ce5be40d953d48dc6" translate="yes" xml:space="preserve">
          <source>FieldsFunc interprets s as a sequence of UTF-8-encoded code points. It splits the slice s at each run of code points c satisfying f(c) and returns a slice of subslices of s. If all code points in s satisfy f(c), or len(s) == 0, an empty slice is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1198e81508f52e5775684dce71da3bd307817aaf" translate="yes" xml:space="preserve">
          <source>FieldsFunc interprets s as a sequence of UTF-8-encoded code points. It splits the slice s at each run of code points c satisfying f(c) and returns a slice of subslices of s. If all code points in s satisfy f(c), or len(s) == 0, an empty slice is returned. FieldsFunc makes no guarantees about the order in which it calls f(c). If f does not return consistent results for a given c, FieldsFunc may crash.</source>
          <target state="translated">FieldsFunc将s解释为一个UTF-8编码的码点序列。如果s中的所有代码点都满足f(c),或者len(s)==0,则返回一个空的分片。FieldsFunc不保证调用f(c)的顺序。如果f对给定的c没有返回一致的结果,FieldsFunc可能会崩溃。</target>
        </trans-unit>
        <trans-unit id="ff942e5665ccbe9a059bd7e03c39e790740aa544" translate="yes" xml:space="preserve">
          <source>FieldsFunc makes no guarantees about the order in which it calls f(c) and assumes that f always returns the same value for a given c.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c072b10eb204acdb276cf21a72514c958961d6" translate="yes" xml:space="preserve">
          <source>FieldsFunc splits the string s at each run of Unicode code points c satisfying f(c) and returns an array of slices of s. If all code points in s satisfy f(c) or the string is empty, an empty slice is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93fef0b1adf312085c03264cc3bf92c0ae08947f" translate="yes" xml:space="preserve">
          <source>FieldsFunc splits the string s at each run of Unicode code points c satisfying f(c) and returns an array of slices of s. If all code points in s satisfy f(c) or the string is empty, an empty slice is returned. FieldsFunc makes no guarantees about the order in which it calls f(c). If f does not return consistent results for a given c, FieldsFunc may crash.</source>
          <target state="translated">FieldsFunc 在每次运行满足 f(c)的 Unicode 码点时分割字符串 s,并返回 s 的切片数组。FieldsFunc不保证调用f(c)的顺序。如果f对给定的c没有返回一致的结果,FieldsFunc可能会崩溃。</target>
        </trans-unit>
        <trans-unit id="63d8c671e0724b6cb1431977c453d1a1de4055f8" translate="yes" xml:space="preserve">
          <source>File Systems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f4c98b71a6a2f1e7b377a8676e629c9740fd5f" translate="yes" xml:space="preserve">
          <source>File is an interface to access the file part of a multipart message. Its contents may be either stored in memory or on disk. If stored on disk, the File's underlying concrete type will be an *os.File.</source>
          <target state="translated">文件是访问多部分信息的文件部分的接口。它的内容可以存储在内存中,也可以存储在磁盘上。如果存储在磁盘上,File的底层具体类型将是一个*os.File。</target>
        </trans-unit>
        <trans-unit id="3b7e7234ecd572c448fdc94c6036d0727036b79d" translate="yes" xml:space="preserve">
          <source>File represents an open file descriptor.</source>
          <target state="translated">文件代表一个打开的文件描述符。</target>
        </trans-unit>
        <trans-unit id="73835fd64cea7fb721059e67256305a0d198b5ab" translate="yes" xml:space="preserve">
          <source>File returns a copy of the underlying os.File. It is the caller's responsibility to close f when finished. Closing c does not affect f, and closing f does not affect c.</source>
          <target state="translated">File 返回底层 os.File 的副本。调用者有责任在完成后关闭 f。关闭 c 不会影响 f,关闭 f 也不会影响 c。</target>
        </trans-unit>
        <trans-unit id="8cfa002fa0ca7b105692672f60881822088c5ccd" translate="yes" xml:space="preserve">
          <source>File returns a copy of the underlying os.File. It is the caller's responsibility to close f when finished. Closing l does not affect f, and closing f does not affect l.</source>
          <target state="translated">File 返回底层 os.File 的副本。调用者有责任在完成后关闭 f。关闭 l 不会影响 f,关闭 f 也不会影响 l。</target>
        </trans-unit>
        <trans-unit id="a964559e347c1b7accfdbfdb5331a705f9a38368" translate="yes" xml:space="preserve">
          <source>File returns the file that contains the position p. If no such file is found (for instance for p == NoPos), the result is nil.</source>
          <target state="translated">File 返回包含位置 p 的文件。如果没有找到这样的文件(例如 p ==NoPos),结果为 nil。</target>
        </trans-unit>
        <trans-unit id="3ebc815f84187b4d85d9b6ac2a799b788cb3d6fe" translate="yes" xml:space="preserve">
          <source>File system operations read directly from the map, so that the file system can be changed by editing the map as needed. An implication is that file system operations must not run concurrently with changes to the map, which would be a race. Another implication is that opening or reading a directory requires iterating over the entire map, so a MapFS should typically be used with not more than a few hundred entries or directory reads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8455c6bba2e3b76773e19fb487214e00c0eda43e" translate="yes" xml:space="preserve">
          <source>FileConn returns a copy of the network connection corresponding to the open file f. It is the caller's responsibility to close f when finished. Closing c does not affect f, and closing f does not affect c.</source>
          <target state="translated">FileConn返回一个与打开的文件f相对应的网络连接副本,调用者有责任在完成后关闭f。关闭c不影响f,关闭f也不影响c。</target>
        </trans-unit>
        <trans-unit id="a22e3976fc002f08d409b21bc3b2057de6ee7bb5" translate="yes" xml:space="preserve">
          <source>FileExports reports whether there are exported declarations.</source>
          <target state="translated">FileExports报告是否有导出的声明。</target>
        </trans-unit>
        <trans-unit id="3ddddfe5effd9cc3d49c7434638dbf7088ae876d" translate="yes" xml:space="preserve">
          <source>FileExports trims the AST for a Go source file in place such that only exported nodes remain: all top-level identifiers which are not exported and their associated information (such as type, initial value, or function body) are removed. Non-exported fields and methods of exported types are stripped. The File.Comments list is not changed.</source>
          <target state="translated">FileExports 对 Go 源文件的 AST 进行了就地修剪,从而只保留导出的节点:所有未导出的顶层标识符及其相关信息(如类型、初始值或函数体)都被删除。非导出的字段和导出类型的方法被剥离。File.Comments 列表不会被改变。</target>
        </trans-unit>
        <trans-unit id="30db9abebdd92f5b7518cf1f5bbb9879a131845c" translate="yes" xml:space="preserve">
          <source>FileHeader describes a file within a zip file. See the zip spec for details.</source>
          <target state="translated">FileHeader描述了一个zip文件中的文件。详情请看zip规范。</target>
        </trans-unit>
        <trans-unit id="efc3eb44d8c87dba4af0b6aaa039beac0f328dad" translate="yes" xml:space="preserve">
          <source>FileInfo returns an fs.FileInfo for the FileHeader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f4fe5356fccab4193f64a70f0e310b526f0bfbf" translate="yes" xml:space="preserve">
          <source>FileInfo returns an fs.FileInfo for the Header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d421452fb7f6f8f21ef4ba78426b17cbfd53ec7" translate="yes" xml:space="preserve">
          <source>FileInfo returns an os.FileInfo for the FileHeader.</source>
          <target state="translated">FileInfo 返回 FileHeader 的 os.FileInfo。</target>
        </trans-unit>
        <trans-unit id="df3ff5122dc6f633a02486f869c65c492c72e91a" translate="yes" xml:space="preserve">
          <source>FileInfo returns an os.FileInfo for the Header.</source>
          <target state="translated">FileInfo 返回 Header 的 os.FileInfo。</target>
        </trans-unit>
        <trans-unit id="5a42eeb7f3f027a48e23f722021315c55b68a4b9" translate="yes" xml:space="preserve">
          <source>FileInfoHeader creates a partially-populated FileHeader from an fs.FileInfo. Because fs.FileInfo's Name method returns only the base name of the file it describes, it may be necessary to modify the Name field of the returned header to provide the full path name of the file. If compression is desired, callers should set the FileHeader.Method field; it is unset by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f4523b7a78ead3725e69f92cdfe5b5d0be7c78" translate="yes" xml:space="preserve">
          <source>FileInfoHeader creates a partially-populated FileHeader from an os.FileInfo. Because os.FileInfo's Name method returns only the base name of the file it describes, it may be necessary to modify the Name field of the returned header to provide the full path name of the file. If compression is desired, callers should set the FileHeader.Method field; it is unset by default.</source>
          <target state="translated">FileInfoHeader 从一个 os.FileInfo.Name 方法创建一个部分填充的 FileHeader。因为 os.FileInfo 的 Name 方法只返回它所描述的文件的基本名称,所以可能需要修改返回的头的 Name 字段以提供文件的完整路径名。如果需要压缩,调用者应该设置 FileHeader.Method 字段;默认情况下它是未设置的。</target>
        </trans-unit>
        <trans-unit id="bade8efb0bdf22a697f4860acaff901dcdf7cd40" translate="yes" xml:space="preserve">
          <source>FileInfoHeader creates a partially-populated Header from fi. If fi describes a symlink, FileInfoHeader records link as the link target. If fi describes a directory, a slash is appended to the name.</source>
          <target state="translated">FileInfoHeader 从 fi 创建一个部分填充的 Header。如果 fi 描述的是符号链接,FileInfoHeader 将 link 记录为链接目标。如果 fi 描述的是一个目录,则会在目录名后面加上一个斜线。</target>
        </trans-unit>
        <trans-unit id="0e337ae6931880d7e580a328902c201076b51624" translate="yes" xml:space="preserve">
          <source>FileLine returns the file name and line number of the source code corresponding to the program counter pc. The result will not be accurate if pc is not a program counter within f.</source>
          <target state="translated">FileLine 返回与程序计数器 pc 对应的源代码的文件名和行号。如果pc不是f中的程序计数器,结果将不准确。</target>
        </trans-unit>
        <trans-unit id="82b2edf71f3991c324095b35a106fb747b15b499" translate="yes" xml:space="preserve">
          <source>FileListener returns a copy of the network listener corresponding to the open file f. It is the caller's responsibility to close ln when finished. Closing ln does not affect f, and closing f does not affect ln.</source>
          <target state="translated">FileListener返回一个与打开的文件f相对应的网络监听器的副本,调用者有责任在完成后关闭ln。关闭ln不会影响f,关闭f也不会影响ln。</target>
        </trans-unit>
        <trans-unit id="0b25eeca51a2e908f97898c9ef3aefb4ac120d01" translate="yes" xml:space="preserve">
          <source>FileMode</source>
          <target state="translated">FileMode</target>
        </trans-unit>
        <trans-unit id="aa6abe93ec8b861e41dbb5d680eb1abac76bc118" translate="yes" xml:space="preserve">
          <source>FileName returns the filename parameter of the Part's Content-Disposition header.</source>
          <target state="translated">FileName返回Part的Content-Disposition头的文件名参数。</target>
        </trans-unit>
        <trans-unit id="ab442735e84d773b25b014f5d105c04cedc7c9de" translate="yes" xml:space="preserve">
          <source>FilePacketConn returns a copy of the packet network connection corresponding to the open file f. It is the caller's responsibility to close f when finished. Closing c does not affect f, and closing f does not affect c.</source>
          <target state="translated">FilePacketConn返回与打开的文件f相对应的分组网络连接的副本,完成后关闭f是调用者的责任。关闭c不影响f,关闭f也不影响c。</target>
        </trans-unit>
        <trans-unit id="93afd50ecd9277958b5e979e54d840040f44f617" translate="yes" xml:space="preserve">
          <source>FileServer</source>
          <target state="translated">FileServer</target>
        </trans-unit>
        <trans-unit id="6b1c6f5fe976e57e9903b48c0ae3364dd14af1bf" translate="yes" xml:space="preserve">
          <source>FileServer (DotFileHiding)</source>
          <target state="translated">文件服务器(DotFileHiding)</target>
        </trans-unit>
        <trans-unit id="4d2a840c48e0d07f28c7b78564c1dff9913edbe7" translate="yes" xml:space="preserve">
          <source>FileServer (StripPrefix)</source>
          <target state="translated">文件服务器(StripPrefix)</target>
        </trans-unit>
        <trans-unit id="d2e3e689f0d74cd94b082adc56551c527c3d7331" translate="yes" xml:space="preserve">
          <source>FileServer returns a handler that serves HTTP requests with the contents of the file system rooted at root.</source>
          <target state="translated">FileServer返回一个处理程序,该处理程序为HTTP请求提供以root为根的文件系统的内容。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
