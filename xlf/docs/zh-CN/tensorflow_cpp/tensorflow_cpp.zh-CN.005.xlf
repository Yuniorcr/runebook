<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="tensorflow_cpp">
    <body>
      <group id="tensorflow_cpp">
        <trans-unit id="dc540ceb2e7767164e73a8002ed28c1dfff90b74" translate="yes" xml:space="preserve">
          <source>\(gamma(a, x) = \int_{0}^{x} t^{a-1} exp(-t) dt\)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ad2d4f1cb87b01779d3734fd9679ca4d2e60f7" translate="yes" xml:space="preserve">
          <source>\(output_i = {j...} data[j...]\) where max is over tuples &lt;code&gt;j...&lt;/code&gt; such that &lt;code&gt;segment_ids[j...] == i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081f5b6364e6aa3b79af8384a20a6cbed7362250" translate="yes" xml:space="preserve">
          <source>\(output_i = {j...} data[j...]\) where the product is over tuples &lt;code&gt;j...&lt;/code&gt; such that &lt;code&gt;segment_ids[j...] == i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb473c7add19249b25051408f2919fb69d56e3be" translate="yes" xml:space="preserve">
          <source>\(output_i = {j...} data_[j...]\) where min is over tuples &lt;code&gt;j...&lt;/code&gt; such that &lt;code&gt;segment_ids[j...] == i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf88899f36fe32859ba4eebac881718864b3a68" translate="yes" xml:space="preserve">
          <source>\(predictions_i\) be the predictions for all classes for example &lt;code&gt;i&lt;/code&gt;, \(targets_i\) be the target class for example &lt;code&gt;i&lt;/code&gt;, \(out_i\) be the output for example &lt;code&gt;i&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e78c7e799c7eb4225b5a05a564e3b87c41466cfc" translate="yes" xml:space="preserve">
          <source>\(y = e^x\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc128ea98a2a2dddb5afdbaf33133ee6f562fd1" translate="yes" xml:space="preserve">
          <source>`''&lt;code&gt;: Use a default format based on the number of channels in the image. *&lt;/code&gt;grayscale&lt;code&gt;: &lt;a href=&quot;../output#classtensorflow_1_1_output&quot;&gt;Output&lt;/a&gt; a grayscale JPEG image. The&lt;/code&gt;channels&lt;code&gt;dimension of&lt;/code&gt;image&lt;code&gt;must be 1. *&lt;/code&gt;rgb&lt;code&gt;: &lt;a href=&quot;../output#classtensorflow_1_1_output&quot;&gt;Output&lt;/a&gt; an RGB JPEG image. The&lt;/code&gt;channels&lt;code&gt;dimension of&lt;/code&gt;image` must be 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e5cd520d60e492f00a867f71cf766c09b3d355" translate="yes" xml:space="preserve">
          <source>```(n0 + n1 + ... + n(T-1) x d0 x d1 x ...)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a43edfb6b4575e40d8af34d3a17e74d1c88bc2" translate="yes" xml:space="preserve">
          <source>```sparse_indices.shape[1] == sparse_shape.shape[0] == R</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="63b76173500e5edc8a840175865c1e3cb958b8ff" translate="yes" xml:space="preserve">
          <source>a = [1., 2., 3.] equality_bitcast = tf.bitcast(a, tf.complex128) Traceback (most recent call last): ... InvalidArgumentError: Cannot bitcast from 1 to 18 [Op:&lt;a href=&quot;bitcast#classtensorflow_1_1ops_1_1_bitcast&quot;&gt;Bitcast&lt;/a&gt;] equality_cast = tf.cast(a, tf.complex128) print(equality_cast) tf.Tensor([1.+0.j 2.+0.j 3.+0.j], shape=(3,), dtype=complex128)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="962944af373c0b76eb997bf38cdb8fe577d97773" translate="yes" xml:space="preserve">
          <source>a string literal).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e953564f02e9d19b0932b34bd975ba1f6da4d63" translate="yes" xml:space="preserve">
          <source>a: A tensor containing 3-element vectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c8a85b324ea8e1ff0ad8b6bb2378a823c11a2c" translate="yes" xml:space="preserve">
          <source>a: Must be a two-dimensional tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a35ea6647dc95b90fe453d98f66e284fc5f0c506" translate="yes" xml:space="preserve">
          <source>a[0] = 0 : the first value of the sequence is 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deda22cbcad48bb3a1413dc8ff28a54f1e5592e8" translate="yes" xml:space="preserve">
          <source>a[end] = input_row_length : the last value of the sequence is the size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f562e98f4f78f9ad76a0077d6c2bbb1e6f77ece" translate="yes" xml:space="preserve">
          <source>a_indices: 2-D. &lt;code&gt;N x R&lt;/code&gt; matrix with the indices of non-empty values in a SparseTensor, in the canonical lexicographic ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3fd906b311f8de51be50614056395270fe2a336" translate="yes" xml:space="preserve">
          <source>a_indices: 2-D. The &lt;code&gt;indices&lt;/code&gt; of the &lt;code&gt;SparseTensor&lt;/code&gt; A, size &lt;code&gt;[nnz(A), ndims]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c5e68c109fdd014f8d5f72acd3d86a5e6f0efe" translate="yes" xml:space="preserve">
          <source>a_indices: 2-D. The &lt;code&gt;indices&lt;/code&gt; of the &lt;code&gt;SparseTensor&lt;/code&gt;, size &lt;code&gt;[nnz, 2]&lt;/code&gt; Matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b7719d694f933a7ae422f92e2aae786ca27826" translate="yes" xml:space="preserve">
          <source>a_indices: 2-D. The &lt;code&gt;indices&lt;/code&gt; of the &lt;code&gt;SparseTensor&lt;/code&gt;, with shape &lt;code&gt;[nnz, ndims]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a596560e8c1b482562dce923b4c703473511a9ed" translate="yes" xml:space="preserve">
          <source>a_indices: 2-D. The &lt;code&gt;indices&lt;/code&gt; of the first &lt;code&gt;SparseTensor&lt;/code&gt;, size &lt;code&gt;[nnz, ndims]&lt;/code&gt; Matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df2e77d6419a7d35a25d041cc38061d46e9c8ea" translate="yes" xml:space="preserve">
          <source>a_is_sparse_</source>
          <target state="translated">a_is_sparse_</target>
        </trans-unit>
        <trans-unit id="fa73766270b44b2e536ef9adcec9f8956e846a4b" translate="yes" xml:space="preserve">
          <source>a_shape: 1-D. Shape of the input SparseTensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6a899ee3725389eafab26061993aff54c3f90f" translate="yes" xml:space="preserve">
          <source>a_shape: 1-D. The &lt;code&gt;shape&lt;/code&gt; of the &lt;code&gt;SparseTensor&lt;/code&gt;, size &lt;code&gt;[2]&lt;/code&gt; Vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178693c58ca49d4e60d62ea62a501dea0a505b91" translate="yes" xml:space="preserve">
          <source>a_shape: 1-D. The &lt;code&gt;shape&lt;/code&gt; of the &lt;code&gt;SparseTensor&lt;/code&gt;, with shape &lt;code&gt;[ndims]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09770fd017a20e48c9273c786fe33fe65348abfd" translate="yes" xml:space="preserve">
          <source>a_shape: 1-D. The &lt;code&gt;shape&lt;/code&gt; of the first &lt;code&gt;SparseTensor&lt;/code&gt;, size &lt;code&gt;[ndims]&lt;/code&gt; Vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d56052ef281de15c093d3980819a4df82ce813bc" translate="yes" xml:space="preserve">
          <source>a_val_grad</source>
          <target state="translated">a_val_grad</target>
        </trans-unit>
        <trans-unit id="89c4487a8a599ce4d9cb3b002cc166ce28865ea2" translate="yes" xml:space="preserve">
          <source>a_values: 1-D. &lt;code&gt;N&lt;/code&gt; non-empty values corresponding to &lt;code&gt;a_indices&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a62f6c0ec666daf6aebe918b8ca787bedd775c" translate="yes" xml:space="preserve">
          <source>a_values: 1-D. The &lt;code&gt;values&lt;/code&gt; of the &lt;code&gt;SparseTensor&lt;/code&gt;, size &lt;code&gt;[nnz]&lt;/code&gt; Vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93276e3dd00c32bafc4ee6bcbe1335c1fbb685b8" translate="yes" xml:space="preserve">
          <source>a_values: 1-D. The &lt;code&gt;values&lt;/code&gt; of the &lt;code&gt;SparseTensor&lt;/code&gt;, with shape &lt;code&gt;[nnz]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f4369e0a28eb708f1a34ba7126a900fd24dc58" translate="yes" xml:space="preserve">
          <source>a_values: 1-D. The &lt;code&gt;values&lt;/code&gt; of the first &lt;code&gt;SparseTensor&lt;/code&gt;, size &lt;code&gt;[nnz]&lt;/code&gt; Vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed5a9c3752749f229d9b62d6d49b3047f189b59d" translate="yes" xml:space="preserve">
          <source>acceptable_fraction: The minimum required fraction of lines before a truncated input is accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6360ba9bebb0421ebd39dbca9ad1dfb64a61d9ef" translate="yes" xml:space="preserve">
          <source>acceptable_fraction_</source>
          <target state="translated">acceptable_fraction_</target>
        </trans-unit>
        <trans-unit id="3e1f32f51354c2febc7caaaf4ffeef8cbb8f07cf" translate="yes" xml:space="preserve">
          <source>accum += grad * grad prox_v = var - lr * grad * (1 / sqrt(accum)) var = sign(prox_v)/(1+lr*l2) * max{|prox_v|-lr*l1,0}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b39d4103e267bfff6b19f03a0c61954510b506e" translate="yes" xml:space="preserve">
          <source>accum += grad * grad var -= lr * grad * (1 / sqrt(accum))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbdff22455472e83bbec28e270efc5acd84cec93" translate="yes" xml:space="preserve">
          <source>accum = accum * momentum + grad var -= lr * accum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabf3744d4cc537b306d1c2d4e5c98eab9321c1c" translate="yes" xml:space="preserve">
          <source>accum = accum * momentum - lr * grad var += accum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77aa7bbfc2a1935f26fc03cc068c50ab9de9da1b" translate="yes" xml:space="preserve">
          <source>accum = rho() * accum + (1 - rho()) * grad.square(); update = (update_accum + epsilon).sqrt() * (accum + epsilon()).rsqrt() * grad; update_accum = rho() * update_accum + (1 - rho()) * update.square(); var -= update;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816780cf77cda6ed8737acca0e8d09db3c315619" translate="yes" xml:space="preserve">
          <source>accum: Should be from a Variable().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e072c3a42e30a463ae763379bfd4971f6786c3db" translate="yes" xml:space="preserve">
          <source>accum_new = accum + grad * grad linear += grad - (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2 var = (sign(linear) * l1 - linear) / quadratic if |linear| &amp;gt; l1 else 0.0 accum = accum_new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0956ee9245a39af10766a25ed2a28190ed852578" translate="yes" xml:space="preserve">
          <source>accum_update: : Should be from a Variable().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783259a64cea25f9dd6254ee1b9099739a281720" translate="yes" xml:space="preserve">
          <source>accum_update: Should be from a Variable().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9afd89eb88a1b262bf42cc6a327cc80929ef798f" translate="yes" xml:space="preserve">
          <source>activations</source>
          <target state="translated">activations</target>
        </trans-unit>
        <trans-unit id="9207a4d89e0769ab8d4e61e6e2f82d2491a3631b" translate="yes" xml:space="preserve">
          <source>actual distribution of the values to maximize the usage of the lower bit depth and adjusting the output min and max ranges accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67765cc5024fc06afa8300696f6448d4695b30f" translate="yes" xml:space="preserve">
          <source>adj_x: If &lt;code&gt;True&lt;/code&gt;, adjoint the slices of &lt;code&gt;x&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3bdb7b22b90eabd4fa2a031f6301a75543f897" translate="yes" xml:space="preserve">
          <source>adj_x_</source>
          <target state="translated">adj_x_</target>
        </trans-unit>
        <trans-unit id="f1189a6eab2ec7f446b58ff0b9aa504ca39e3f1a" translate="yes" xml:space="preserve">
          <source>adj_y: If &lt;code&gt;True&lt;/code&gt;, adjoint the slices of &lt;code&gt;y&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcfa99465fe17339685fcc15d9d14cf1d1aa68c" translate="yes" xml:space="preserve">
          <source>adj_y_</source>
          <target state="translated">adj_y_</target>
        </trans-unit>
        <trans-unit id="7232efe34659e9d6b6693dac47d338d47dff1504" translate="yes" xml:space="preserve">
          <source>adjoint_a: Use the adjoint of A in the matrix multiply. If A is complex, this is transpose(conj(A)). Otherwise it's transpose(A).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="602fd768f28e8a511ab97d0806a91a877ede7b09" translate="yes" xml:space="preserve">
          <source>adjoint_a_</source>
          <target state="translated">adjoint_a_</target>
        </trans-unit>
        <trans-unit id="26131ae00c2e87084324169fc8bd15c104a9c84c" translate="yes" xml:space="preserve">
          <source>adjoint_b: Use the adjoint of B in the matrix multiply. If B is complex, this is transpose(conj(B)). Otherwise it's transpose(B).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d72fbcb123f788c593c01d992575dc27b07980" translate="yes" xml:space="preserve">
          <source>adjoint_b_</source>
          <target state="translated">adjoint_b_</target>
        </trans-unit>
        <trans-unit id="4c59c3594fb9da70137746eaa764193947a48722" translate="yes" xml:space="preserve">
          <source>align: Some diagonals are shorter than &lt;code&gt;max_diag_len&lt;/code&gt; and need to be padded. &lt;code&gt;align&lt;/code&gt; is a string specifying how superdiagonals and subdiagonals should be aligned, respectively. There are four possible alignments: &quot;RIGHT_LEFT&quot; (default), &quot;LEFT_RIGHT&quot;, &quot;LEFT_LEFT&quot;, and &quot;RIGHT_RIGHT&quot;. &quot;RIGHT_LEFT&quot; aligns superdiagonals to the right (left-pads the row) and subdiagonals to the left (right-pads the row). It is the packing format LAPACK uses. cuSPARSE uses &quot;LEFT_RIGHT&quot;, which is the opposite alignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e61538f27b59b453d1fabf9c3e830c1671c34b4f" translate="yes" xml:space="preserve">
          <source>align_</source>
          <target state="translated">align_</target>
        </trans-unit>
        <trans-unit id="3c5bfc3930c4205391b2e16210d7c8cd1317dff5" translate="yes" xml:space="preserve">
          <source>align_corners: If true, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels. Defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9d99a898f6c8f91781266985613ed318a017dc" translate="yes" xml:space="preserve">
          <source>align_corners_</source>
          <target state="translated">align_corners_</target>
        </trans-unit>
        <trans-unit id="967203a07ed8d72dd6e2ffb614fb901b9000cb77" translate="yes" xml:space="preserve">
          <source>allow_small_batch: Allow to return less than num_elements items if barrier is already closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="237a984e6b91457ccb8e202864944fb1aa045bf5" translate="yes" xml:space="preserve">
          <source>allow_small_batch_</source>
          <target state="translated">allow_small_batch_</target>
        </trans-unit>
        <trans-unit id="6b47a9fb6a6098b56fa005c9bf092d1ede95a90d" translate="yes" xml:space="preserve">
          <source>alpha = input_row_length / output_row_length : our reduction ratio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f3255b99803eed876a175274e7b6fc7f197d01" translate="yes" xml:space="preserve">
          <source>alpha: A scale factor, usually positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0163be668f7bf1d03f9d8fe9d7928acbe521f071" translate="yes" xml:space="preserve">
          <source>alpha: A tensor in which each scalar is a &quot;shape&quot; parameter describing the associated gamma distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df132190a357ff0b287b16c67547f0103d4c42e3" translate="yes" xml:space="preserve">
          <source>alpha: Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fe4885581b800e3c437899fce698f4c03aed16" translate="yes" xml:space="preserve">
          <source>alpha: Scaling factor. Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab1e3a4b74be719139ea191639c307ca445d28f" translate="yes" xml:space="preserve">
          <source>alpha_</source>
          <target state="translated">alpha_</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="292c8beb7d57a195c3e9d971eeb3673fcd7b8cc8" translate="yes" xml:space="preserve">
          <source>and concatenates them into a &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; of shape:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de7ae171143e3622a04d60db40188c440cd1216" translate="yes" xml:space="preserve">
          <source>antialias_</source>
          <target state="translated">antialias_</target>
        </trans-unit>
        <trans-unit id="9e93434846d4210060a0421cdd355712cb4a1b4b" translate="yes" xml:space="preserve">
          <source>area_range: The cropped area of the image must contain a fraction of the supplied image within this range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b522c628c942bee1e2e2a25d34778866b481b302" translate="yes" xml:space="preserve">
          <source>area_range_</source>
          <target state="translated">area_range_</target>
        </trans-unit>
        <trans-unit id="d4665f1e2ffa54be784f9b474fe768613b821365" translate="yes" xml:space="preserve">
          <source>argmax</source>
          <target state="translated">argmax</target>
        </trans-unit>
        <trans-unit id="a36518b8538c1d1272a9f12bb316cc7b4c64a6c7" translate="yes" xml:space="preserve">
          <source>argmax: The indices of the maximum values chosen for each output of &lt;code&gt;max_pool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="939bf714dacf67560fe0f54067a343751e495478" translate="yes" xml:space="preserve">
          <source>arr: int32 &lt;code&gt;&lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5865d4349edc3f0b9fe88bd0172020fbad52062" translate="yes" xml:space="preserve">
          <source>array_ops</source>
          <target state="translated">array_ops</target>
        </trans-unit>
        <trans-unit id="8c66360ca93d84f32f2028c520b7d624e2922f56" translate="yes" xml:space="preserve">
          <source>aspect_ratio_range: The cropped area of the image must have an aspect ratio = width / height within this range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de0820679a8b288ea49dde98faaaa5d74c0ae6e1" translate="yes" xml:space="preserve">
          <source>aspect_ratio_range_</source>
          <target state="translated">aspect_ratio_range_</target>
        </trans-unit>
        <trans-unit id="260d4f1366ba09adb6172ca8fd634126e0e09014" translate="yes" xml:space="preserve">
          <source>associative container. Elements are ordered by key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06a492959ce12b3f0292406ec84177d07ae19b1" translate="yes" xml:space="preserve">
          <source>audio</source>
          <target state="translated">audio</target>
        </trans-unit>
        <trans-unit id="93a8018f99fa5bd70a93649584b1721492478520" translate="yes" xml:space="preserve">
          <source>average</source>
          <target state="translated">average</target>
        </trans-unit>
        <trans-unit id="dc93a26574d15700ad0148154ead6f79cd2444d9" translate="yes" xml:space="preserve">
          <source>axis: 0-D (scalar). Specifies the dimension index at which to expand the shape of &lt;code&gt;input&lt;/code&gt;. Must be in the range &lt;code&gt;[-rank(input) - 1, rank(input)]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="885f6111f3809ba33c48d4c658d0a456d2dc2b8d" translate="yes" xml:space="preserve">
          <source>axis: 0-D. The dimension along which to concatenate. Must be in the range [-rank(values), rank(values)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605c6f0a96a74f7051a37acffa2024e699fd3331" translate="yes" xml:space="preserve">
          <source>axis: A &lt;code&gt;&lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;&lt;/code&gt; of type &lt;code&gt;int32&lt;/code&gt; (default: 0). Must be in the range &lt;code&gt;[-rank(x), rank(x))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8407022087611561d683b88218437a61500fb985" translate="yes" xml:space="preserve">
          <source>axis: Dimension along which to pack. Negative values wrap around, so the valid range is &lt;code&gt;[-(R+1), R+1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15f9bc6529fc8d2b32251cbae96bf05c5fdd503a" translate="yes" xml:space="preserve">
          <source>axis: If specified, this axis is treated as a channel or slice axis, and a separate quantization range is used for each channel or slice along this axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8bce18b0d7d3d762c67eb8ce93fc630f4c8a84" translate="yes" xml:space="preserve">
          <source>axis: The axis in &lt;code&gt;params&lt;/code&gt; to gather &lt;code&gt;indices&lt;/code&gt; from. Defaults to the first dimension. Supports negative indexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5984645bca41f7637ba5ad3da91f2cff6c72d1a0" translate="yes" xml:space="preserve">
          <source>axis: The axis to fill (default: -1, a new inner-most axis).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98bc69aa2a20e00d4084a31464da70e46a13bf87" translate="yes" xml:space="preserve">
          <source>axis: The dimensions to reduce. Must be in the range &lt;code&gt;[-rank(input), rank(input))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e2da934a25e1c539957eb9406bb19c3b838f1e" translate="yes" xml:space="preserve">
          <source>axis_</source>
          <target state="translated">axis_</target>
        </trans-unit>
        <trans-unit id="e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98" translate="yes" xml:space="preserve">
          <source>b</source>
          <target state="translated">b</target>
        </trans-unit>
        <trans-unit id="a6093cb5f3565da88f370b621694f2184781964d" translate="yes" xml:space="preserve">
          <source>b: 2-D. A dense Matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73cbfb557ab0ab7e645e61fcdab66c3f3173accc" translate="yes" xml:space="preserve">
          <source>b: &lt;code&gt;ndims&lt;/code&gt;-D &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;. With shape &lt;code&gt;a_shape&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d63acf77a331fac311e7521b0f67e5339c07946" translate="yes" xml:space="preserve">
          <source>b: Another tensor, of same type and shape as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5d66c8d0b71984bc8879dc193509865691c55e" translate="yes" xml:space="preserve">
          <source>b: Must be a two-dimensional tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ac5196ee7353a05532512f16335407f7d05481" translate="yes" xml:space="preserve">
          <source>b_indices: 2-D. The &lt;code&gt;indices&lt;/code&gt; of the &lt;code&gt;SparseTensor&lt;/code&gt; B, size &lt;code&gt;[nnz(B), ndims]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd469007a4a108bb3aa309574a04e89a6ab96695" translate="yes" xml:space="preserve">
          <source>b_indices: 2-D. The &lt;code&gt;indices&lt;/code&gt; of the second &lt;code&gt;SparseTensor&lt;/code&gt;, size &lt;code&gt;[nnz, ndims]&lt;/code&gt; Matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="963b2e47d0144a6bfe930f5877ba26a5eadafe4e" translate="yes" xml:space="preserve">
          <source>b_indices: counterpart to &lt;code&gt;a_indices&lt;/code&gt; for the other operand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="384e7094af3df87afb8d8a39bfbc7979bff3ec63" translate="yes" xml:space="preserve">
          <source>b_is_sparse_</source>
          <target state="translated">b_is_sparse_</target>
        </trans-unit>
        <trans-unit id="1eef730889b97cb49b56e5323fbf92f6d3bda2ac" translate="yes" xml:space="preserve">
          <source>b_shape: 1-D. The &lt;code&gt;shape&lt;/code&gt; of the second &lt;code&gt;SparseTensor&lt;/code&gt;, size &lt;code&gt;[ndims]&lt;/code&gt; Vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd808920fd7cd927bad8b0e2b1cb736e22846a4" translate="yes" xml:space="preserve">
          <source>b_shape: counterpart to &lt;code&gt;a_shape&lt;/code&gt; for the other operand; the two shapes must be equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3d4b2099fce704c23f499d5059e198e73d1bb9" translate="yes" xml:space="preserve">
          <source>b_val_grad</source>
          <target state="translated">b_val_grad</target>
        </trans-unit>
        <trans-unit id="ae39fa76ecc5b307de403b29f831e7360e829cad" translate="yes" xml:space="preserve">
          <source>b_values: 1-D. The &lt;code&gt;values&lt;/code&gt; of the second &lt;code&gt;SparseTensor&lt;/code&gt;, size &lt;code&gt;[nnz]&lt;/code&gt; Vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb351556dd3da4923df4e397b54f7b1b03b28a4" translate="yes" xml:space="preserve">
          <source>b_values: counterpart to &lt;code&gt;a_values&lt;/code&gt; for the other operand; must be of the same dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="198a18e54227447c01312712ae9df9b2292f30f9" translate="yes" xml:space="preserve">
          <source>backprop</source>
          <target state="translated">backprop</target>
        </trans-unit>
        <trans-unit id="aa1797b85f5a49eb5485aeddec92e8eb343cc338" translate="yes" xml:space="preserve">
          <source>backprop_val_grad: 1-D with shape &lt;code&gt;[nnz(sum)]&lt;/code&gt;. The gradient with respect to the non-empty values of the sum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee80eb1ce881a079b9176e424f1ccd04149fcbe" translate="yes" xml:space="preserve">
          <source>backprop_val_grad: 1-D. The gradient with respect to the non-empty values of the sliced &lt;code&gt;SparseTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c7db05d502e6c5f34c94b418ac8d2d2ae98931" translate="yes" xml:space="preserve">
          <source>backprop_wrt_max</source>
          <target state="translated">backprop_wrt_max</target>
        </trans-unit>
        <trans-unit id="0549fe4ce986c3f81a0cf687a89e102233b3d58a" translate="yes" xml:space="preserve">
          <source>backprop_wrt_min</source>
          <target state="translated">backprop_wrt_min</target>
        </trans-unit>
        <trans-unit id="69bb6ae20be7005b1f3adbbcaec645162bd3b038" translate="yes" xml:space="preserve">
          <source>backprops</source>
          <target state="translated">backprops</target>
        </trans-unit>
        <trans-unit id="14ced813e1940f54abc515f26bacb487442fe4e2" translate="yes" xml:space="preserve">
          <source>backprops_wrt_input</source>
          <target state="translated">backprops_wrt_input</target>
        </trans-unit>
        <trans-unit id="d19a6aa1ddff695c57d92b04eb6f8994c0195de8" translate="yes" xml:space="preserve">
          <source>bad_color_</source>
          <target state="translated">bad_color_</target>
        </trans-unit>
        <trans-unit id="2502deb44ba556abc83784f27250dcd7bbaebc0f" translate="yes" xml:space="preserve">
          <source>band</source>
          <target state="translated">band</target>
        </trans-unit>
        <trans-unit id="1405df66cbe219b0bf6355bc3d60361a8376b6b4" translate="yes" xml:space="preserve">
          <source>base</source>
          <target state="translated">base</target>
        </trans-unit>
        <trans-unit id="0d38dbe653b54adfc97d501ba2db09c704790df7" translate="yes" xml:space="preserve">
          <source>batch_dims_</source>
          <target state="translated">batch_dims_</target>
        </trans-unit>
        <trans-unit id="3e20125b1f3e9b5bbc5c9b603d6b7e39940500c0" translate="yes" xml:space="preserve">
          <source>batch_mean</source>
          <target state="translated">batch_mean</target>
        </trans-unit>
        <trans-unit id="7134da3df2accbe4394749300f78a1191fdc0b09" translate="yes" xml:space="preserve">
          <source>batch_size: The batch size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99171785885900f5f8cb798546e700878a92a01e" translate="yes" xml:space="preserve">
          <source>batch_size_</source>
          <target state="translated">batch_size_</target>
        </trans-unit>
        <trans-unit id="9ee34a38c7c24580bc3d398b382e21d777373080" translate="yes" xml:space="preserve">
          <source>batch_variance</source>
          <target state="translated">batch_variance</target>
        </trans-unit>
        <trans-unit id="9ff722544a20fdb74d10d2df40959e13f833cf42" translate="yes" xml:space="preserve">
          <source>bboxes</source>
          <target state="translated">bboxes</target>
        </trans-unit>
        <trans-unit id="8cbd0a74c6efdb39943b290bb82c9d6b2a6ee5a6" translate="yes" xml:space="preserve">
          <source>begin</source>
          <target state="translated">begin</target>
        </trans-unit>
        <trans-unit id="0e614ba93434538ef9e28dc096a8f8799a04b06f" translate="yes" xml:space="preserve">
          <source>beta function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a869d7aee23fabc9b73a9a12f4914d4733aa8c06" translate="yes" xml:space="preserve">
          <source>beta1: Momentum factor. Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28b24896fa198bdf27a7cf1d822f184a33aefb7" translate="yes" xml:space="preserve">
          <source>beta1_power: Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c91d55fe33e4d532484b0bf31313f91380f763c7" translate="yes" xml:space="preserve">
          <source>beta2: Momentum factor. Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df059031d5d72fc1f8303f6c8cba823a9091335e" translate="yes" xml:space="preserve">
          <source>beta2_power: Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8657843527a9176df770c9b739fb5722f268dfe7" translate="yes" xml:space="preserve">
          <source>beta: A 1D beta &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; with size matching the last dimension of t. An offset to be added to the normalized tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d773d3a8dd199bfa58410e3b710b243f617bbeb" translate="yes" xml:space="preserve">
          <source>beta: An exponent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975a034c6edcc274fd8d429a0de5d2c1a23ba39a" translate="yes" xml:space="preserve">
          <source>beta: Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b30835365733b8ece709c3c660c77af3f5cf12a" translate="yes" xml:space="preserve">
          <source>beta_</source>
          <target state="translated">beta_</target>
        </trans-unit>
        <trans-unit id="4ecfd46399496ab0f304d71447cdea97179248f5" translate="yes" xml:space="preserve">
          <source>beta_max: The value represented by the highest quantized offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4969df80f485bfc2828127947d133925aacf4e3" translate="yes" xml:space="preserve">
          <source>beta_min: The value represented by the lowest quantized offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2651cc652a4f7e8a201d7f4773ad51a812783ab" translate="yes" xml:space="preserve">
          <source>bias: 1-D with size the last dimension of &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718499440fcf2e17121ab6ca71041e34dfdc772b" translate="yes" xml:space="preserve">
          <source>bias: A 1D bias &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; with size matching the last dimension of 'input'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7395f7d4a4fa1c5b30e56859feace35dbba0c9" translate="yes" xml:space="preserve">
          <source>bias: An offset (usually positive to avoid dividing by 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc866f73ac7ec0e158f92629215e08438e7c556a" translate="yes" xml:space="preserve">
          <source>bias_</source>
          <target state="translated">bias_</target>
        </trans-unit>
        <trans-unit id="697e53156611bbb2b1d8b793099924acb5f0b069" translate="yes" xml:space="preserve">
          <source>binary_examples</source>
          <target state="translated">binary_examples</target>
        </trans-unit>
        <trans-unit id="8e1127722b94fec3e15f02af49619bf2390e4063" translate="yes" xml:space="preserve">
          <source>binary_output: bool; Whether the kernel should count the appearance or number of occurrences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28840df9fbd1a4c2589ee42b18fff24c64f5c795" translate="yes" xml:space="preserve">
          <source>binary_output_</source>
          <target state="translated">binary_output_</target>
        </trans-unit>
        <trans-unit id="7de92be672da757581b59b22e0fdca153bcdc8f7" translate="yes" xml:space="preserve">
          <source>bins</source>
          <target state="translated">bins</target>
        </trans-unit>
        <trans-unit id="00aac786476a6372b62e10307cc4576e5adec8d5" translate="yes" xml:space="preserve">
          <source>bit_casted_shaped</source>
          <target state="translated">bit_casted_shaped</target>
        </trans-unit>
        <trans-unit id="0bab312c1a4e3edc94edfbe44fa84cab589b7e5c" translate="yes" xml:space="preserve">
          <source>bit_casted_tensor</source>
          <target state="translated">bit_casted_tensor</target>
        </trans-unit>
        <trans-unit id="448e31be14a70875fc17c9a9f594bc9608f056e2" translate="yes" xml:space="preserve">
          <source>block_shape: 1-D with shape &lt;code&gt;[M]&lt;/code&gt;, all values must be &amp;gt;= 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36c93558243d4a85699835c9c38c856bbc2d4f3" translate="yes" xml:space="preserve">
          <source>block_size: The size of the spatial block, same as in Space2Depth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea8bf7caa3a7d01719c24e0af597c6feb248561" translate="yes" xml:space="preserve">
          <source>blue_image = tf.stack([ ... tf.zeros([5,5]), ... tf.zeros([5,5]), ... tf.ones([5,5])], ... axis=-1) blue_hsv_image = tf.image.rgb_to_hsv(blue_image) blue_hsv_image[0,0].numpy() array([0.6666667, 1. , 1. ], dtype=float32)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ddab592e723b0d30123ba5d0caf3c47578fcb0" translate="yes" xml:space="preserve">
          <source>bool; Whether the kernel should count the appearance or number of occurrences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba90f1b878aa3a3e06ebd7c75575dc452c803d67" translate="yes" xml:space="preserve">
          <source>boolean (if true, edit distances are normalized by length of truth).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c694c4816b39c0e875911f8ea7ce28a3f15c412" translate="yes" xml:space="preserve">
          <source>boundaries: A sorted list of floats gives the boundary of the buckets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7baa365dc3f459a26c8740dd9df6f2acee06a158" translate="yes" xml:space="preserve">
          <source>bounding_boxes: 3-D with shape &lt;code&gt;[batch, N, 4]&lt;/code&gt; describing the N bounding boxes associated with the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba99a0e1ef54ce5cccc456fb103139b4bbabae6" translate="yes" xml:space="preserve">
          <source>box_ind: A 1-D tensor of shape &lt;code&gt;[num_boxes]&lt;/code&gt; with int32 values in &lt;code&gt;[0, batch)&lt;/code&gt;. The value of &lt;code&gt;box_ind[i]&lt;/code&gt; specifies the image that the &lt;code&gt;i&lt;/code&gt;-th box refers to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="737b7f2b1d7cdca505c1195156bb714ca870af6b" translate="yes" xml:space="preserve">
          <source>boxes: 3-D with shape &lt;code&gt;[batch, num_bounding_boxes, 4]&lt;/code&gt; containing bounding boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64340316ac479a0acfb565822bc8cda80b4fe68" translate="yes" xml:space="preserve">
          <source>boxes: A 2-D float tensor of shape &lt;code&gt;[num_boxes, 4]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8bbef8b4a5f9dfa848e3f828314eb432a4fe9b" translate="yes" xml:space="preserve">
          <source>boxes: A 2-D tensor of shape &lt;code&gt;[num_boxes, 4]&lt;/code&gt;. The &lt;code&gt;i&lt;/code&gt;-th row of the tensor specifies the coordinates of a box in the &lt;code&gt;box_ind[i]&lt;/code&gt; image and is specified in normalized coordinates &lt;code&gt;[y1, x1, y2, x2]&lt;/code&gt;. A normalized coordinate value of &lt;code&gt;y&lt;/code&gt; is mapped to the image coordinate at &lt;code&gt;y * (image_height - 1)&lt;/code&gt;, so as the &lt;code&gt;[0, 1]&lt;/code&gt; interval of normalized image height is mapped to &lt;code&gt;[0, image_height - 1]&lt;/code&gt; in image height coordinates. We do allow &lt;code&gt;y1&lt;/code&gt; &amp;gt; &lt;code&gt;y2&lt;/code&gt;, in which case the sampled crop is an up-down flipped version of the original image. The width dimension is treated similarly. Normalized coordinates outside the &lt;code&gt;[0, 1]&lt;/code&gt; range are allowed, in which case we use &lt;code&gt;extrapolation_value&lt;/code&gt; to extrapolate the input image values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd23b14c8121485c6d6b70e6124a8f98a55d0c7c" translate="yes" xml:space="preserve">
          <source>boxes: A 2-D tensor of shape &lt;code&gt;[num_boxes, 4]&lt;/code&gt;. The &lt;code&gt;i&lt;/code&gt;-th row of the tensor specifies the coordinates of a box in the &lt;code&gt;box_ind[i]&lt;/code&gt; image and is specified in normalized coordinates &lt;code&gt;[y1, x1, y2, x2]&lt;/code&gt;. A normalized coordinate value of &lt;code&gt;y&lt;/code&gt; is mapped to the image coordinate at &lt;code&gt;y * (image_height - 1)&lt;/code&gt;, so as the &lt;code&gt;[0, 1]&lt;/code&gt; interval of normalized image height is mapped to `[0, image_height - 1] in image height coordinates. We do allow y1 &amp;gt; y2, in which case the sampled crop is an up-down flipped version of the original image. The width dimension is treated similarly. Normalized coordinates outside the &lt;code&gt;[0, 1]&lt;/code&gt; range are allowed, in which case we use &lt;code&gt;extrapolation_value&lt;/code&gt; to extrapolate the input image values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f2f4702b380e4d2c8b3139df45a54308c1a876" translate="yes" xml:space="preserve">
          <source>boxes: A 4-D float tensor of shape &lt;code&gt;[batch_size, num_boxes, q, 4]&lt;/code&gt;. If &lt;code&gt;q&lt;/code&gt; is 1 then same boxes are used for all classes otherwise, if &lt;code&gt;q&lt;/code&gt; is equal to number of classes, class-specific boxes are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8586a7f5dc413d70bc954c70e2f1747d94db32" translate="yes" xml:space="preserve">
          <source>bytes: &lt;a href=&quot;all#classtensorflow_1_1ops_1_1_all&quot;&gt;All&lt;/a&gt; the elements must have the same length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53bf1d82a2e43bfcabc982ffe114137c1c894b3" translate="yes" xml:space="preserve">
          <source>bytes: A &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; of string which is compressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25c02bee9766a3d7b9fcc11c987df21588004af" translate="yes" xml:space="preserve">
          <source>cancel_pending_enqueues: If true, all pending enqueue requests that are blocked on the barrier's queue will be canceled. InsertMany will fail, even if no new key is introduced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b4659ee26e7db82dbe161a7e133323091c96bba" translate="yes" xml:space="preserve">
          <source>cancel_pending_enqueues: If true, all pending enqueue requests that are blocked on the given queue will be canceled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0aa808ff9df3bc77cde6848a39f392976bd52b1" translate="yes" xml:space="preserve">
          <source>cancel_pending_enqueues_</source>
          <target state="translated">cancel_pending_enqueues_</target>
        </trans-unit>
        <trans-unit id="2053782ba64c891ff0cc9e3d6c66ff379f00bf24" translate="yes" xml:space="preserve">
          <source>candidate_sampling_ops</source>
          <target state="translated">candidate_sampling_ops</target>
        </trans-unit>
        <trans-unit id="aa5b229079effa1e0b5650164d6096240cd73332" translate="yes" xml:space="preserve">
          <source>capacity: &lt;a href=&quot;maximum#classtensorflow_1_1ops_1_1_maximum&quot;&gt;Maximum&lt;/a&gt; number of elements in the Staging Area. If &amp;gt; 0, inserts on the container will block when the capacity is reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280bd2f7edf4f15e06428b4dad4910a7b71f0bc2" translate="yes" xml:space="preserve">
          <source>capacity: The capacity of the barrier. The default capacity is MAX_INT32, which is the largest capacity of the underlying queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6b143bed57f385827cf4b7637974f8ce853939" translate="yes" xml:space="preserve">
          <source>capacity: The upper bound on the number of elements in this queue. Negative numbers mean no limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e2086a9ebe914530087bbbfc76eb934f18ae536" translate="yes" xml:space="preserve">
          <source>capacity_</source>
          <target state="translated">capacity_</target>
        </trans-unit>
        <trans-unit id="14eb80deba17936c16b1349e43e5c23f6d4c176b" translate="yes" xml:space="preserve">
          <source>centered: indicates if the offset coordinates are centered relative to the image, in which case the (0, 0) offset is relative to the center of the input images. If false, the (0,0) offset corresponds to the upper left corner of the input images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff497af7741fdba38ab11a3e6e8e1d615edbc076" translate="yes" xml:space="preserve">
          <source>centered_</source>
          <target state="translated">centered_</target>
        </trans-unit>
        <trans-unit id="5b933d964f9f87c70dd07c5580c9ff15cb902c89" translate="yes" xml:space="preserve">
          <source>channels: Number of color channels for the decoded image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7e0ab9b3ccf5e4c71b7610792699eb89b2c192" translate="yes" xml:space="preserve">
          <source>channels_</source>
          <target state="translated">channels_</target>
        </trans-unit>
        <trans-unit id="1956453b6124ba5a7f7ae7067d53718738db81be" translate="yes" xml:space="preserve">
          <source>char delimiter to separate fields in a record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df1f9d2074c71233c0ade5f3316307d993200e5" translate="yes" xml:space="preserve">
          <source>checkpoint_prefixes: prefixes of V2 checkpoints to merge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e93069c40111cd62dac2cd02cd71daffdb01cc0" translate="yes" xml:space="preserve">
          <source>child</source>
          <target state="translated">child</target>
        </trans-unit>
        <trans-unit id="ce3133a63ed0adf1e3e1e6d35873690fdf1dbd94" translate="yes" xml:space="preserve">
          <source>chroma_downsampling: See &lt;a href=&quot;http://en.wikipedia.org/wiki/Chroma_subsampling&quot;&gt;http://en.wikipedia.org/wiki/Chroma_subsampling&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ea6af4e2a08a09760e32be4db7520f9e86fe34" translate="yes" xml:space="preserve">
          <source>chroma_downsampling_</source>
          <target state="translated">chroma_downsampling_</target>
        </trans-unit>
        <trans-unit id="c387263046f51f25eaa6734b2e508d704b298519" translate="yes" xml:space="preserve">
          <source>clear_after_read: If true (default), Tensors in the &lt;a href=&quot;tensor-array#classtensorflow_1_1ops_1_1_tensor_array&quot;&gt;TensorArray&lt;/a&gt; are cleared after being read. This disables multiple read semantics but allows early release of memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea66490ff7868b218b943cfae654710a4c378b5" translate="yes" xml:space="preserve">
          <source>clear_after_read_</source>
          <target state="translated">clear_after_read_</target>
        </trans-unit>
        <trans-unit id="f3053d9774f223a49319a1be019ac21bb7ee0567" translate="yes" xml:space="preserve">
          <source>clip_boxes: If true, assume the box coordinates are between [0, 1] and clip the output boxes if they fall beyond [0, 1]. If false, do not do clipping and output the box coordinates as it is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d3751a22288acfc4b732d0209188a3869fa396" translate="yes" xml:space="preserve">
          <source>clip_boxes_</source>
          <target state="translated">clip_boxes_</target>
        </trans-unit>
        <trans-unit id="170e983d272753e9bec175c2a5cf3e878051d48e" translate="yes" xml:space="preserve">
          <source>clip_value_max: A 0-D (scalar) &lt;code&gt;&lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;&lt;/code&gt;, or a &lt;code&gt;&lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;&lt;/code&gt; with the same shape as &lt;code&gt;t&lt;/code&gt;. The maximum value to clip by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34161a187b930433da015590134b78070f5f7b72" translate="yes" xml:space="preserve">
          <source>clip_value_min: A 0-D (scalar) &lt;code&gt;&lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;&lt;/code&gt;, or a &lt;code&gt;&lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;&lt;/code&gt; with the same shape as &lt;code&gt;t&lt;/code&gt;. The minimum value to clip by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b1ada55ea0a264f7945b1482360bbd20248d42" translate="yes" xml:space="preserve">
          <source>col_pooling_sequence</source>
          <target state="translated">col_pooling_sequence</target>
        </trans-unit>
        <trans-unit id="c45315c13a746a3bee56ef182594773040e64660" translate="yes" xml:space="preserve">
          <source>colors: 2-D. A list of RGBA colors to cycle through for the boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0737c22d3bfae812339732d14d8c7dbd6dc4e09c" translate="yes" xml:space="preserve">
          <source>complete</source>
          <target state="translated">complete</target>
        </trans-unit>
        <trans-unit id="930c74353741c89216035fbffd36a7a1bf0e5930" translate="yes" xml:space="preserve">
          <source>component_index: The component of the barrier elements that is being assigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f70e6313c8977db9f19931fd65ba3ef15fe14c03" translate="yes" xml:space="preserve">
          <source>component_types: The type of each component in a tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7005e70f2877f0d0db58467a75ece1de692dbd0c" translate="yes" xml:space="preserve">
          <source>component_types: The type of each component in a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cde3d4f9eb7c445c89651574276f4bca5d0e373" translate="yes" xml:space="preserve">
          <source>component_types_</source>
          <target state="translated">component_types_</target>
        </trans-unit>
        <trans-unit id="c212f08ed1157ae268fd83d142afd5ccd48664b2" translate="yes" xml:space="preserve">
          <source>components</source>
          <target state="translated">components</target>
        </trans-unit>
        <trans-unit id="b2f7d93f247169c0ed96e1fa2e70072cd5d779e5" translate="yes" xml:space="preserve">
          <source>components: One or more tensors from which the enqueued tensors should be taken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50cbd74c0276df85e125c03f26eb56cc45d6abc5" translate="yes" xml:space="preserve">
          <source>compression: Compression level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817773e96107407a229c203c880def6bf0c529a5" translate="yes" xml:space="preserve">
          <source>compression_</source>
          <target state="translated">compression_</target>
        </trans-unit>
        <trans-unit id="4c28c6763cdb2c6cdb6debd1f473a5c3b64a9404" translate="yes" xml:space="preserve">
          <source>compression_type: A scalar containing either (i) the empty string (no compression), (ii) &quot;ZLIB&quot;, or (iii) &quot;GZIP&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981c5c54ed14cc9b59104f83d83acc7fa20a108d" translate="yes" xml:space="preserve">
          <source>compression_type: The type of compression for the file. Currently ZLIB and GZIP are supported. Defaults to none.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="916e2dd83782aa990a6c9a5d4f5b4d08eba38f09" translate="yes" xml:space="preserve">
          <source>compression_type_</source>
          <target state="translated">compression_type_</target>
        </trans-unit>
        <trans-unit id="38bd568f24f08d0d5b8372d1d94dedabdfbf2059" translate="yes" xml:space="preserve">
          <source>concat_dim: 0-D. The dimension along which to concatenate. Must be in the range [0, rank(values)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cdb2f15bebcfcbbf2256f3471c3f72d3d103224" translate="yes" xml:space="preserve">
          <source>concat_dim: Dimension to concatenate along. Must be in range [-rank, rank), where rank is the number of dimensions in each input &lt;code&gt;SparseTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b3fe2462b4e8d6f0342bb32e020b638062a3a4c" translate="yes" xml:space="preserve">
          <source>condition: The condition to evaluate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f08401b70661a7fd96d8e254328f68df6636b3" translate="yes" xml:space="preserve">
          <source>container: If non-empty, this accumulator is placed in the given container. Otherwise, a default container is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4484196cb32bbcb2797887ab3ce5fc6d2b05850a" translate="yes" xml:space="preserve">
          <source>container: If non-empty, this barrier is placed in the given container. Otherwise, a default container is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df69d0433b8609f86e03cb02c069dc158a89666" translate="yes" xml:space="preserve">
          <source>container: If non-empty, this queue is placed in the given container. Otherwise, a default container is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df730ed903cbaf4808dbe8b73aff28eb121f2df" translate="yes" xml:space="preserve">
          <source>container: If non-empty, this reader is placed in the given container. Otherwise, a default container is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c009dba71c2e7e7d8f6a8289030b51da55f302d9" translate="yes" xml:space="preserve">
          <source>container: If non-empty, this variable is placed in the given container. Otherwise, a default container is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0f4d893f73974f23f968ce18a6b2db3894801c" translate="yes" xml:space="preserve">
          <source>container: The container name for the &lt;code&gt;SparseTensorsMap&lt;/code&gt; created by this op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700f940f1295613e7f0d907a306584734be95c8b" translate="yes" xml:space="preserve">
          <source>container: The container name for the &lt;code&gt;SparseTensorsMap&lt;/code&gt; read by this op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a05925ef4de0bd450e6837c7323c4207ac57e2" translate="yes" xml:space="preserve">
          <source>container_</source>
          <target state="translated">container_</target>
        </trans-unit>
        <trans-unit id="4a756ca07e9487f482465a99e8286abc86ba4dc7" translate="yes" xml:space="preserve">
          <source>contents</source>
          <target state="translated">contents</target>
        </trans-unit>
        <trans-unit id="c94f11dbc9d025f5ed56cd9ec52af33c0fdff25b" translate="yes" xml:space="preserve">
          <source>contents: 0-D. The BMP-encoded image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b46ead20250ebe5d8ce560e6baa356f7a3844c1" translate="yes" xml:space="preserve">
          <source>contents: 0-D. The GIF-encoded image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e786ccae8840dfe7d5128714a1651d7e7dd2b467" translate="yes" xml:space="preserve">
          <source>contents: 0-D. The JPEG-encoded image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f60bdf5132e34880e62d3d09c2feda8bc0a0c892" translate="yes" xml:space="preserve">
          <source>contents: 0-D. The PNG-encoded image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f5d9e916ceb827633e7768dc34568f483250db" translate="yes" xml:space="preserve">
          <source>contents: scalar. The content to be written to the output file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41130a5be4bab00e50ca4f80f5d024b13a6b8308" translate="yes" xml:space="preserve">
          <source>context_dense_defaults: A list of Ncontext_dense Tensors (some may be empty). context_dense_defaults[j] provides default values when the SequenceExample's context map lacks context_dense_key[j]. If an empty &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; is provided for context_dense_defaults[j], then the Feature context_dense_keys[j] is required. The input type is inferred from context_dense_defaults[j], even when it's empty. If context_dense_defaults[j] is not empty, its shape must match context_dense_shapes[j].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e28d106cc3aca1eb48a7c012ac816940c29a5b" translate="yes" xml:space="preserve">
          <source>context_dense_keys: A list of Ncontext_dense string Tensors (scalars). The keys expected in the SequenceExamples' context features associated with dense values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92294dafa622a6f93ba7799bdd5b8e6d7e0a6a48" translate="yes" xml:space="preserve">
          <source>context_dense_keys: The keys expected in the SequenceExamples' context features associated with dense values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a99ca11994e33b8d524df6e2add9a45695158a" translate="yes" xml:space="preserve">
          <source>context_dense_shapes: A list of Ncontext_dense shapes; the shapes of data in each context Feature given in context_dense_keys. The number of elements in the Feature corresponding to context_dense_key[j] must always equal context_dense_shapes[j].NumEntries(). The shape of context_dense_values[j] will match context_dense_shapes[j].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53bc8189d1ea06d0864b18f9cc74a0fd152dff05" translate="yes" xml:space="preserve">
          <source>context_dense_shapes_</source>
          <target state="translated">context_dense_shapes_</target>
        </trans-unit>
        <trans-unit id="4fc7ece40d8bc4088a7d22258769cb4f1291ca27" translate="yes" xml:space="preserve">
          <source>context_dense_values</source>
          <target state="translated">context_dense_values</target>
        </trans-unit>
        <trans-unit id="280b5d8e9d1a3be3b24f145e07edb88aa8f7b37b" translate="yes" xml:space="preserve">
          <source>context_ragged_keys: The keys expected in the Examples' features associated with context_ragged values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19363769cea10d1572b798d6140b8f51cc710e6e" translate="yes" xml:space="preserve">
          <source>context_ragged_row_splits</source>
          <target state="translated">context_ragged_row_splits</target>
        </trans-unit>
        <trans-unit id="24e34e25b4bbc45358a6fd19a2d3d959faa440f0" translate="yes" xml:space="preserve">
          <source>context_ragged_split_types: RaggedTensor.row_split dtypes for the ragged context features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3fcb6e5dcdfd2cd7e3735a329422625b6d5733e" translate="yes" xml:space="preserve">
          <source>context_ragged_split_types_</source>
          <target state="translated">context_ragged_split_types_</target>
        </trans-unit>
        <trans-unit id="b5fb5a86ea486f755b77eb5ddc818bdb4a7c6a50" translate="yes" xml:space="preserve">
          <source>context_ragged_value_types: RaggedTensor.value dtypes for the ragged context features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d097ea419651d79ea7bd4f81ca6be2fa379d9b70" translate="yes" xml:space="preserve">
          <source>context_ragged_value_types_</source>
          <target state="translated">context_ragged_value_types_</target>
        </trans-unit>
        <trans-unit id="b9491e20058abacaff1fdb692579edf9e2c1ab92" translate="yes" xml:space="preserve">
          <source>context_ragged_values</source>
          <target state="translated">context_ragged_values</target>
        </trans-unit>
        <trans-unit id="315d2b04d25e02da62d7c3b5374fa438844d1190" translate="yes" xml:space="preserve">
          <source>context_sparse_indices</source>
          <target state="translated">context_sparse_indices</target>
        </trans-unit>
        <trans-unit id="02a7eb1bd34312f93ca531ee07935f3f413d4a25" translate="yes" xml:space="preserve">
          <source>context_sparse_keys: A list of Ncontext_sparse string Tensors (scalars). The keys expected in the Examples' features associated with context_sparse values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1347e7d40bbea996ff7591007a913ea71012b713" translate="yes" xml:space="preserve">
          <source>context_sparse_keys: The keys expected in the Examples' features associated with context_sparse values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e428c04efe8e6b4762c720231982e7cbff45d652" translate="yes" xml:space="preserve">
          <source>context_sparse_shapes</source>
          <target state="translated">context_sparse_shapes</target>
        </trans-unit>
        <trans-unit id="cc7d414eeb0999b51f5bbb68eec7902d448b4525" translate="yes" xml:space="preserve">
          <source>context_sparse_types: A list of Ncontext_sparse types; the data types of data in each context Feature given in context_sparse_keys. Currently the &lt;a href=&quot;parse-single-sequence-example#classtensorflow_1_1ops_1_1_parse_single_sequence_example&quot;&gt;ParseSingleSequenceExample&lt;/a&gt; supports DT_FLOAT (FloatList), DT_INT64 (Int64List), and DT_STRING (BytesList).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97375f781a2a699b381ed4cb32a34abf7c9a9594" translate="yes" xml:space="preserve">
          <source>context_sparse_types_</source>
          <target state="translated">context_sparse_types_</target>
        </trans-unit>
        <trans-unit id="183c16e616abaf974a5aefe12f373afb8f8ba905" translate="yes" xml:space="preserve">
          <source>context_sparse_values</source>
          <target state="translated">context_sparse_values</target>
        </trans-unit>
        <trans-unit id="e61f776bdc6cb0739e6bf02d2f24bbe000fd2cfe" translate="yes" xml:space="preserve">
          <source>contrast_factor: A float multiplier for adjusting contrast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056a9931c19a485581021dd72b6e10012cbafc6c" translate="yes" xml:space="preserve">
          <source>control_deps</source>
          <target state="translated">control_deps</target>
        </trans-unit>
        <trans-unit id="0cbbe9469fa610bf7aa4ad06750420fd31d8a4eb" translate="yes" xml:space="preserve">
          <source>control_flow_ops</source>
          <target state="translated">control_flow_ops</target>
        </trans-unit>
        <trans-unit id="94a0426e8d3203da5468ccf0c624f93cb37601e2" translate="yes" xml:space="preserve">
          <source>core</source>
          <target state="translated">core</target>
        </trans-unit>
        <trans-unit id="7e89165c664759ed118a849ac5e157c7a7420cee" translate="yes" xml:space="preserve">
          <source>creates directory if not existing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03494afd305eba67b962971ecc3e7fb098274018" translate="yes" xml:space="preserve">
          <source>crop_size: A 1-D tensor of 2 elements, &lt;code&gt;size = [crop_height, crop_width]&lt;/code&gt;. &lt;a href=&quot;all#classtensorflow_1_1ops_1_1_all&quot;&gt;All&lt;/a&gt; cropped image patches are resized to this size. The aspect ratio of the image content is not preserved. Both &lt;code&gt;crop_height&lt;/code&gt; and &lt;code&gt;crop_width&lt;/code&gt; need to be positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ca556f95505668be5426a878b600b9381599b7" translate="yes" xml:space="preserve">
          <source>crop_window: 1-D. The crop window: [crop_y, crop_x, crop_height, crop_width].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c79745b2356398967d4aa6d477f4330c801654" translate="yes" xml:space="preserve">
          <source>crops</source>
          <target state="translated">crops</target>
        </trans-unit>
        <trans-unit id="8bdd2574637a51237ba4487dc37910f4908b1bf9" translate="yes" xml:space="preserve">
          <source>crops: 2-D tensor of non-negative integers with shape &lt;code&gt;[2, 2]&lt;/code&gt;. It specifies how many elements to crop from the intermediate result across the spatial dimensions as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5169b7f5fd777b34a69400c73c223e2c0eefbd6b" translate="yes" xml:space="preserve">
          <source>crops: 2-D with shape &lt;code&gt;[M, 2]&lt;/code&gt;, all values must be &amp;gt;= 0. &lt;code&gt;crops[i] = [crop_start, crop_end]&lt;/code&gt; specifies the amount to crop from input dimension &lt;code&gt;i + 1&lt;/code&gt;, which corresponds to spatial dimension &lt;code&gt;i&lt;/code&gt;. It is required that &lt;code&gt;crop_start[i] + crop_end[i] &amp;lt;= block_shape[i] * input_shape[i + 1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a8e67032139cc04497ab83669b960337130ef1" translate="yes" xml:space="preserve">
          <source>d_default_value</source>
          <target state="translated">d_default_value</target>
        </trans-unit>
        <trans-unit id="32bd8e971bc1a21e659822cb2dc19bcce076e0b5" translate="yes" xml:space="preserve">
          <source>d_values</source>
          <target state="translated">d_values</target>
        </trans-unit>
        <trans-unit id="019c7c7ab8a467f1b30b0507159cc0c30df548fa" translate="yes" xml:space="preserve">
          <source>d_values[j] = grad_values[reverse_index_map[j]] d_default_value = sum_{k : 0 .. N_full - 1} ( grad_values[k] * 1{k not in reverse_index_map})</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17c9aaa61e80a1bf71d0d850af4e5baa9800bbd" translate="yes" xml:space="preserve">
          <source>data</source>
          <target state="translated">data</target>
        </trans-unit>
        <trans-unit id="a98587ee112f11c6c9b618d3b337d18a136fcfea" translate="yes" xml:space="preserve">
          <source>data augmentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd970050b7a36b1a85f3c431840dd9823d10748" translate="yes" xml:space="preserve">
          <source>data: &lt;code&gt;N&lt;/code&gt; tensors to save.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f28aab67dfccd8b2178017b1bc2ecb5c73f737" translate="yes" xml:space="preserve">
          <source>data: A list of tensors to print out when op is evaluated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493826f7e876168556cab4523001f7ad0748b66b" translate="yes" xml:space="preserve">
          <source>data: Must have rank 1 or higher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020e125c6a87aa98ed5345ccd4dff636589a5728" translate="yes" xml:space="preserve">
          <source>data: The ref tensor to be forwarded to the appropriate output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da2641e64e12a9c471d28248c66a903555dd10a" translate="yes" xml:space="preserve">
          <source>data: The tensor to be forwarded to the appropriate output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387313bcb6fe56577702b910a4da88263a01b416" translate="yes" xml:space="preserve">
          <source>data: The tensor to be made available to the next iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d1cd4a47ac1b2c49cd57bf108b25b4c42ef0bd" translate="yes" xml:space="preserve">
          <source>data: The tensors to print out when condition is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54291b6c1471af021dc2ba599604f5766c566d3" translate="yes" xml:space="preserve">
          <source>data: The values tensor of the ragged string tensor to make ngrams out of. Must be a 1D string tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b270f644c005fdfce37af2a98c5fc8bc2f7abd2d" translate="yes" xml:space="preserve">
          <source>data_flow_ops</source>
          <target state="translated">data_flow_ops</target>
        </trans-unit>
        <trans-unit id="8bbb0e9284a9183755c58688847633a66a54abbb" translate="yes" xml:space="preserve">
          <source>data_format: Specify the data format of the input and output data. With the default format &quot;NHWC&quot;, the bias tensor will be added to the last dimension of the value tensor. Alternatively, the format could be &quot;NCHW&quot;, the data storage order of: [batch, in_channels, in_height, in_width]. The tensor will be added to &quot;in_channels&quot;, the third-to-the-last dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa51847754ec19d4bfe51598ee87fba99114641" translate="yes" xml:space="preserve">
          <source>data_format: Specify the data format of the input and output data. With the default format &quot;NHWC&quot;, the data is stored in the order of: [batch, height, width, channels]. Alternatively, the format could be &quot;NCHW&quot;, the data storage order of: [batch, channels, height, width].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c4d2ddd372c7216217634ff919403882c5b5e6" translate="yes" xml:space="preserve">
          <source>data_format: Specify the data format of the input and output data. With the default format &quot;NHWC&quot;, the data is stored in the order of: [batch, in_height, in_width, in_channels]. Alternatively, the format could be &quot;NCHW&quot;, the data storage order of: [batch, in_channels, in_height, in_width].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1347987d949cd9ab7733ea79d7f2b107a511cc1" translate="yes" xml:space="preserve">
          <source>data_format: The data format for x and y. Either &quot;NHWC&quot; (default) or &quot;NCHW&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a40030dcfbdcdb2e118f50128d1689192c96110" translate="yes" xml:space="preserve">
          <source>data_format: The data format for y_backprop, x, x_backprop. Either &quot;NHWC&quot; (default) or &quot;NCHW&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816902d432ff8534a09674c5009449b865a17e80" translate="yes" xml:space="preserve">
          <source>data_format: The data format of the input and output data. With the default format &quot;NDHWC&quot;, the data is stored in the order of: [batch, in_depth, in_height, in_width, in_channels]. Alternatively, the format could be &quot;NCDHW&quot;, the data storage order is: [batch, in_channels, in_depth, in_height, in_width].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152a5a2915a828905afcadd4c9ece44ebfb4d018" translate="yes" xml:space="preserve">
          <source>data_format_</source>
          <target state="translated">data_format_</target>
        </trans-unit>
        <trans-unit id="595d84b00867cae4302869fb51e6a9bf8e1bac74" translate="yes" xml:space="preserve">
          <source>data_splits: The splits tensor of the ragged string tensor to make ngrams out of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5411ba018172ec73e64e74bf5b04f39c227da5f0" translate="yes" xml:space="preserve">
          <source>data_type</source>
          <target state="translated">data_type</target>
        </trans-unit>
        <trans-unit id="9cefd369ea36c073b6674afc8342f3fcf53fb0e4" translate="yes" xml:space="preserve">
          <source>dct_method: string specifying a hint about the algorithm used for decompression. Defaults to &quot;&quot; which maps to a system-specific default. Currently valid values are [&quot;INTEGER_FAST&quot;, &quot;INTEGER_ACCURATE&quot;]. The hint may be ignored (e.g., the internal jpeg library changes to a version that does not have that specific option.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23508d035c4fe6ba6022475ee11173f9c1463a39" translate="yes" xml:space="preserve">
          <source>dct_method_</source>
          <target state="translated">dct_method_</target>
        </trans-unit>
        <trans-unit id="db0b000e388cebe5a0ab3060a1797e66b5ee5db2" translate="yes" xml:space="preserve">
          <source>debug_name: A scalar containing the name of the serialized proto. May contain, for example, table key (descriptive) name for the corresponding serialized proto. This is purely useful for debugging purposes, and the presence of values here has no effect on the output. May also be an empty scalar if no name is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8505ebff27743652b8ed979c456fccca258deef5" translate="yes" xml:space="preserve">
          <source>debug_name: A scalar or vector containing the names of the serialized protos. May contain, for example, table key (descriptive) name for the corresponding serialized proto. This is purely useful for debugging purposes, and the presence of values here has no effect on the output. May also be an empty vector if no name is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f49e3038c7c020501cb91ceed79ec637d5631203" translate="yes" xml:space="preserve">
          <source>debug_name: A vector containing the names of the serialized protos. May contain, for example, table key (descriptive) name for the corresponding serialized proto. This is purely useful for debugging purposes, and the presence of values here has no effect on the output. May also be an empty vector if no name is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9cb146bc90698d2c091df8318094d8921ac8693" translate="yes" xml:space="preserve">
          <source>default_value: 0-D. default value to insert into location &lt;code&gt;[row, 0, ..., 0]&lt;/code&gt; for rows missing from the input sparse tensor. output indices: 2-D. the indices of the filled sparse tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f336def9fd1e581e8f2016fed0160df01a648cbe" translate="yes" xml:space="preserve">
          <source>delete_old_dirs: see above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524ac51a716674ce202297fe10f26f06c416a047" translate="yes" xml:space="preserve">
          <source>delete_old_dirs_</source>
          <target state="translated">delete_old_dirs_</target>
        </trans-unit>
        <trans-unit id="c65708923006d85770194dfe8895f41d8c26afe7" translate="yes" xml:space="preserve">
          <source>delimiter: 0-D. Delimiter characters (bytes), or empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe89d548256129a2bbd23d435e877a1c5307d01c" translate="yes" xml:space="preserve">
          <source>delta: 0-D (scalar). Optional. Default is 1. Number that increments &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be112348d2c41df7dd1758845deb155e28e34eb3" translate="yes" xml:space="preserve">
          <source>delta: A float delta to add to the hue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caafb4b9c2d081292f4075febe5edce1152b7a62" translate="yes" xml:space="preserve">
          <source>delta: The change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f28902ac18de71a75ffee2bb5466562a147c80e6" translate="yes" xml:space="preserve">
          <source>dense: &lt;code&gt;R&lt;/code&gt;-D. The dense &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; operand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500382c84d15351597cd15b8f6ce76dfd188a922" translate="yes" xml:space="preserve">
          <source>dense[i] = (i == sparse_indices ? sparse_values : default_value)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db4204ee793c1476451b7c5424240f3d36cd140" translate="yes" xml:space="preserve">
          <source>dense[sparse_indices[i][0], ..., sparse_indices[i][d-1]] = sparse_values[i]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600b31b6461e965e7bd2ef1208ad6443fa4927ff" translate="yes" xml:space="preserve">
          <source>dense[sparse_indices[i]] = sparse_values[i]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f75c8d4ea814b8a40c3dd7fb7267e7022f80a79" translate="yes" xml:space="preserve">
          <source>dense_defaults: A list of Ndense Tensors (some may be empty). dense_defaults[j] provides default values when the example's feature_map lacks dense_key[j]. If an empty &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; is provided for dense_defaults[j], then the Feature dense_keys[j] is required. The input type is inferred from dense_defaults[j], even when it's empty. If dense_defaults[j] is not empty, and dense_shapes[j] is fully defined, then the shape of dense_defaults[j] must match that of dense_shapes[j]. If dense_shapes[j] has an undefined major dimension (variable strides dense feature), dense_defaults[j] must contain a single element: the padding element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686297cade64b27fc6172374f8b1702f648bfcbf" translate="yes" xml:space="preserve">
          <source>dense_defaults: A list of Tensors (some may be empty), whose length matches the length of &lt;code&gt;dense_keys&lt;/code&gt;. dense_defaults[j] provides default values when the example's feature_map lacks dense_key[j]. If an empty &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; is provided for dense_defaults[j], then the Feature dense_keys[j] is required. The input type is inferred from dense_defaults[j], even when it's empty. If dense_defaults[j] is not empty, and dense_shapes[j] is fully defined, then the shape of dense_defaults[j] must match that of dense_shapes[j]. If dense_shapes[j] has an undefined major dimension (variable strides dense feature), dense_defaults[j] must contain a single element: the padding element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8948809d2761c0eb930c97b82b620e7397f29146" translate="yes" xml:space="preserve">
          <source>dense_defaults: A list of Tensors (some may be empty). Corresponds 1:1 with &lt;code&gt;dense_keys&lt;/code&gt;. dense_defaults[j] provides default values when the example's feature_map lacks dense_key[j]. If an empty &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; is provided for dense_defaults[j], then the Feature dense_keys[j] is required. The input type is inferred from dense_defaults[j], even when it's empty. If dense_defaults[j] is not empty, and dense_shapes[j] is fully defined, then the shape of dense_defaults[j] must match that of dense_shapes[j]. If dense_shapes[j] has an undefined major dimension (variable strides dense feature), dense_defaults[j] must contain a single element: the padding element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260d1b41d6aba4a9549d2c1b587fdff0d59bb51a" translate="yes" xml:space="preserve">
          <source>dense_inputs: 2-D. Columns represented by dense &lt;code&gt;&lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c59272432491def9bf162b3a84a5639fafe0e4e1" translate="yes" xml:space="preserve">
          <source>dense_keys: A list of Ndense string Tensors (scalars). The keys expected in the Examples' features associated with dense values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641a1a150ce25673c4e9dad094deada432bf6d69" translate="yes" xml:space="preserve">
          <source>dense_keys: The keys expected in the Examples' features associated with dense values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2889c7569130da2a7b9bba3107de4f7f6dfce8f7" translate="yes" xml:space="preserve">
          <source>dense_keys: Vector of strings. The keys expected in the Examples' features associated with dense values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6975adeecd494b89e76c24426d4ed7c1619a54a" translate="yes" xml:space="preserve">
          <source>dense_shape: 1-D. the shape of the sparse tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337811b8f6d505aa1c2cb62bd06ed12287bca738" translate="yes" xml:space="preserve">
          <source>dense_shape: 1D int64 &lt;code&gt;&lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab3c7dddb2ee32138d86da711231756b1d5b1200" translate="yes" xml:space="preserve">
          <source>dense_shapes: A list of &lt;code&gt;num_dense&lt;/code&gt; shapes; the shapes of data in each Feature given in dense_keys (where &lt;code&gt;num_dense = dense_keys.size()&lt;/code&gt;). The number of elements in the Feature corresponding to dense_key[j] must always equal dense_shapes[j].NumEntries(). If dense_shapes[j] == (D0, D1, ..., DN) then the shape of output &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; dense_values[j] will be (|serialized|, D0, D1, ..., DN): The dense outputs are just the inputs row-stacked by batch. This works for dense_shapes[j] = (-1, D1, ..., DN). In this case the shape of the output &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; dense_values[j] will be (|serialized|, M, D1, .., DN), where M is the maximum number of blocks of elements of length D1 * .... * DN, across all minibatch entries in the input. &lt;a href=&quot;any#classtensorflow_1_1ops_1_1_any&quot;&gt;Any&lt;/a&gt; minibatch entry with less than M blocks of elements of length D1 * ... * DN will be padded with the corresponding default_value scalar element along the second dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6fbeb3097bc2dfcfdcaa2d5c428607fa094b544" translate="yes" xml:space="preserve">
          <source>dense_shapes: A list of Ndense shapes; the shapes of data in each Feature given in dense_keys. The number of elements in the Feature corresponding to dense_key[j] must always equal dense_shapes[j].NumEntries(). If dense_shapes[j] == (D0, D1, ..., DN) then the shape of output &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; dense_values[j] will be (|serialized|, D0, D1, ..., DN): The dense outputs are just the inputs row-stacked by batch. This works for dense_shapes[j] = (-1, D1, ..., DN). In this case the shape of the output &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; dense_values[j] will be (|serialized|, M, D1, .., DN), where M is the maximum number of blocks of elements of length D1 * .... * DN, across all minibatch entries in the input. &lt;a href=&quot;any#classtensorflow_1_1ops_1_1_any&quot;&gt;Any&lt;/a&gt; minibatch entry with less than M blocks of elements of length D1 * ... * DN will be padded with the corresponding default_value scalar element along the second dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ffeea43a8504ecc143793cf9461cdbf17f931c" translate="yes" xml:space="preserve">
          <source>dense_shapes: The shapes of data in each Feature given in dense_keys. The length of this list must match the length of &lt;code&gt;dense_keys&lt;/code&gt;. The number of elements in the Feature corresponding to dense_key[j] must always equal dense_shapes[j].NumEntries(). If dense_shapes[j] == (D0, D1, ..., DN) then the shape of output &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; dense_values[j] will be (D0, D1, ..., DN): In the case dense_shapes[j] = (-1, D1, ..., DN), the shape of the output &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; dense_values[j] will be (M, D1, .., DN), where M is the number of blocks of elements of length D1 * .... * DN, in the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec1b5551f70013f0292e7ac3af41c14603f363d" translate="yes" xml:space="preserve">
          <source>dense_values</source>
          <target state="translated">dense_values</target>
        </trans-unit>
        <trans-unit id="51ef918384f04c5e4ee1862dc0e73db48c17b1d9" translate="yes" xml:space="preserve">
          <source>density_unit: Unit used to specify &lt;code&gt;x_density&lt;/code&gt; and &lt;code&gt;y_density&lt;/code&gt;: pixels per inch (&lt;code&gt;'in'&lt;/code&gt;) or centimeter (&lt;code&gt;'cm'&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb5f34f8fa2b9fcbd8a783f360961ea9649d95a" translate="yes" xml:space="preserve">
          <source>density_unit_</source>
          <target state="translated">density_unit_</target>
        </trans-unit>
        <trans-unit id="a7a1c11cf8cc269a0633a52c681ac8da33fef838" translate="yes" xml:space="preserve">
          <source>depth: A scalar defining the depth of the one hot dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e3a9ab003cda500eb894542e2467ab5d4060dfe" translate="yes" xml:space="preserve">
          <source>depth_radius: 0-D. Half-width of the 1-D normalization window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac315ebab7138a8b3c98b3d62d6a1aaa6a837e5" translate="yes" xml:space="preserve">
          <source>depth_radius_</source>
          <target state="translated">depth_radius_</target>
        </trans-unit>
        <trans-unit id="25648ae8b32f8c9c5e680a367bb01ed088f6d431" translate="yes" xml:space="preserve">
          <source>description: A json-encoded SummaryDescription proto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a538c0099a2ee94372c9124b1b6349f013c20d05" translate="yes" xml:space="preserve">
          <source>description_</source>
          <target state="translated">description_</target>
        </trans-unit>
        <trans-unit id="8d9b20bb65ae455def0a9bcf828a22f61611ac00" translate="yes" xml:space="preserve">
          <source>destination data format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d27e2085c02a414e7194b3e1b6ff05ad70891f" translate="yes" xml:space="preserve">
          <source>destination_prefix: scalar. The desired final prefix. Allowed to be the same as one of the checkpoint_prefixes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e840f1f8c6330f7601e3f35a93bd3a3ae1993e9e" translate="yes" xml:space="preserve">
          <source>deterministic: When set to True, a fixed pooling region will be used when iterating over a &lt;a href=&quot;fractional-avg-pool#classtensorflow_1_1ops_1_1_fractional_avg_pool&quot;&gt;FractionalAvgPool&lt;/a&gt; node in the computation graph. Mainly used in unit test to make &lt;a href=&quot;fractional-avg-pool#classtensorflow_1_1ops_1_1_fractional_avg_pool&quot;&gt;FractionalAvgPool&lt;/a&gt; deterministic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d87f0bf8eb831688a8181f0f18421ad71ede20f" translate="yes" xml:space="preserve">
          <source>deterministic: When set to True, a fixed pooling region will be used when iterating over a &lt;a href=&quot;fractional-max-pool#classtensorflow_1_1ops_1_1_fractional_max_pool&quot;&gt;FractionalMaxPool&lt;/a&gt; node in the computation graph. Mainly used in unit test to make &lt;a href=&quot;fractional-max-pool#classtensorflow_1_1ops_1_1_fractional_max_pool&quot;&gt;FractionalMaxPool&lt;/a&gt; deterministic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d74d68c42de94ae90a4fc9d7832f1b27f588e0" translate="yes" xml:space="preserve">
          <source>deterministic_</source>
          <target state="translated">deterministic_</target>
        </trans-unit>
        <trans-unit id="6159f6bcbc29b103a9e4107bc6b790862d6299d5" translate="yes" xml:space="preserve">
          <source>diagonal</source>
          <target state="translated">diagonal</target>
        </trans-unit>
        <trans-unit id="f8bc82e6b107bca2ca4d0832755efd2124e9625f" translate="yes" xml:space="preserve">
          <source>diagonal: Rank &lt;code&gt;k&lt;/code&gt;, where &lt;code&gt;k &amp;gt;= 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce40d2cfd1d0fbcc9b96fc7e75c91f4edbb78d24" translate="yes" xml:space="preserve">
          <source>diagonal: Rank &lt;code&gt;r&lt;/code&gt; when &lt;code&gt;k&lt;/code&gt; is an integer or &lt;code&gt;k[0] == k[1]&lt;/code&gt;. Otherwise, it has rank &lt;code&gt;r+1&lt;/code&gt;. &lt;code&gt;k &amp;gt;= 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d77ab71147e093b25636e184e16336caad3d7674" translate="yes" xml:space="preserve">
          <source>diagonal: Rank &lt;code&gt;r&lt;/code&gt;, where &lt;code&gt;r &amp;gt;= 1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f9cd48937becfc10837e9c50e55cca59155879" translate="yes" xml:space="preserve">
          <source>diagonal: Rank k tensor where k is at most 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beecfafcdf8a8d1a71161b2b0b0f4393bc0bb442" translate="yes" xml:space="preserve">
          <source>dilations: 1-D tensor of length 4. The dilation factor for each dimension of &lt;code&gt;input&lt;/code&gt;. If set to k &amp;gt; 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of &lt;code&gt;data_format&lt;/code&gt;, see above for details. Dilations in the batch and depth dimensions must be 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ddbffd586ff95a63c16a9ee0f5754996c48cf92" translate="yes" xml:space="preserve">
          <source>dilations: 1-D tensor of length 5. The dilation factor for each dimension of &lt;code&gt;input&lt;/code&gt;. If set to k &amp;gt; 1, there will be k-1 skipped cells between each filter element on that dimension. The dimension order is determined by the value of &lt;code&gt;data_format&lt;/code&gt;, see above for details. Dilations in the batch and depth dimensions must be 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f8408f4eb448b3520d49669664f731fc351dbb" translate="yes" xml:space="preserve">
          <source>dilations_</source>
          <target state="translated">dilations_</target>
        </trans-unit>
        <trans-unit id="5b14f51fe00f65719f409ac55f75ccda40f290e2" translate="yes" xml:space="preserve">
          <source>dim_size</source>
          <target state="translated">dim_size</target>
        </trans-unit>
        <trans-unit id="e612ec23fed609ab2902df1d1062697713db1e0a" translate="yes" xml:space="preserve">
          <source>dimension: int32 or int64, must be in the range &lt;code&gt;[-rank(input), rank(input))&lt;/code&gt;. Describes which dimension of the input &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; to reduce across. For vectors, use dimension = 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55924fd2fe0c2298c08b526e02fbe532468f547" translate="yes" xml:space="preserve">
          <source>dims</source>
          <target state="translated">dims</target>
        </trans-unit>
        <trans-unit id="6fd6eadcaabd95ff0fdfee7f31bb699a0a541548" translate="yes" xml:space="preserve">
          <source>dims: 1-D. Represents the shape of the output tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3074ca2c3b75c7325b187d8bde2dc1b1962f0db" translate="yes" xml:space="preserve">
          <source>display_name: An unused string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6863cd81549ed2b6465ca716c3c2f1913dda8faa" translate="yes" xml:space="preserve">
          <source>display_name_</source>
          <target state="translated">display_name_</target>
        </trans-unit>
        <trans-unit id="d19f8aa3b0db599aa1f846b21cd1fac9ec4207c3" translate="yes" xml:space="preserve">
          <source>distortion: The distortion is used to skew the unigram probability distribution. Each weight is first raised to the distortion's power before adding to the internal unigram distribution. As a result, distortion = 1.0 gives regular unigram sampling (as defined by the vocab file), and distortion = 0.0 gives a uniform distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="225e69ba0a446b3f355f9cadd3e88dd17f6b930d" translate="yes" xml:space="preserve">
          <source>distortion_</source>
          <target state="translated">distortion_</target>
        </trans-unit>
        <trans-unit id="cf80cd39ccaeb96776afa90e289d45fbf53b8086" translate="yes" xml:space="preserve">
          <source>dst_format: destination data format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c86a23dadc1448c2eee4f514684492ad9744e9ff" translate="yes" xml:space="preserve">
          <source>dst_format_</source>
          <target state="translated">dst_format_</target>
        </trans-unit>
        <trans-unit id="dac02809c68c880d51aaa9b8dbe40c4604dab713" translate="yes" xml:space="preserve">
          <source>dt: The type of the tensor to be restored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63eb44aa9dfe2c9c81d4ede5c878a887b7f21327" translate="yes" xml:space="preserve">
          <source>dtype</source>
          <target state="translated">dtype</target>
        </trans-unit>
        <trans-unit id="008f6d305918cbbcc0fb249959e7033ed2674473" translate="yes" xml:space="preserve">
          <source>dtype: The &lt;code&gt;dtype&lt;/code&gt; of the &lt;code&gt;SparseTensor&lt;/code&gt; objects stored in the &lt;code&gt;SparseTensorsMap&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303c285726dd3ac322bffd7ee4e232f097574cd4" translate="yes" xml:space="preserve">
          <source>dtype: The &lt;code&gt;dtype&lt;/code&gt; of the serialized &lt;code&gt;SparseTensor&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c8ff023fda9fdd58f7dd3247534c8a439467e31" translate="yes" xml:space="preserve">
          <source>dtype: The data type of accumulated gradients. Needs to correspond to the type of the accumulator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02ccd616fea823326432fe469ad1fe30701b46c2" translate="yes" xml:space="preserve">
          <source>dtype: The type of elements in the tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c7d3d3ca3e2752f714a9001b9d54881fffe0fd" translate="yes" xml:space="preserve">
          <source>dtype: The type of elements in the variable tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ff3c933cb846c40d2d16d1e446d34aac835c27" translate="yes" xml:space="preserve">
          <source>dtype: The type of the elem that is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e17e9b2bab94abe4fb527ab31663478a0ce543f" translate="yes" xml:space="preserve">
          <source>dtype: The type of the elements on the tensor_array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22aba467dacf0896f6f2ea0f67d42dc134aba366" translate="yes" xml:space="preserve">
          <source>dtype: The type of the output value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89f3b7bd18cd9c222eea8f078ec7ab85ca9286f" translate="yes" xml:space="preserve">
          <source>dtype: The type of the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604398b8101d8f464283c5043de800160129f2ce" translate="yes" xml:space="preserve">
          <source>dtype: The type of the value being accumulated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3f7e17ecffa93ecb2718857833582eb71c9616f" translate="yes" xml:space="preserve">
          <source>dtype: Type of the output tensor. Currently &lt;a href=&quot;dequantize#classtensorflow_1_1ops_1_1_dequantize&quot;&gt;Dequantize&lt;/a&gt; supports float and bfloat16. If 'dtype' is 'bfloat16', it only supports 'MIN_COMBINED' mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce573157d3840e038a61154bcf0b69b18cb754b0" translate="yes" xml:space="preserve">
          <source>dtype: Type of the returned tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ed296b11e6c35237d0c048b8cb96d44b972d6a4" translate="yes" xml:space="preserve">
          <source>dtype_</source>
          <target state="translated">dtype_</target>
        </trans-unit>
        <trans-unit id="705b91367ecd1bfb58f8eef121d086750095f7ab" translate="yes" xml:space="preserve">
          <source>dtypes: shape {N}. The list of expected dtype for the tensors. Must match those stored in the checkpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744bb1f398196be9ac9d8fb529dca67f828ea5e5" translate="yes" xml:space="preserve">
          <source>dynamic_size: A boolean that determines whether writes to the &lt;a href=&quot;tensor-array#classtensorflow_1_1ops_1_1_tensor_array&quot;&gt;TensorArray&lt;/a&gt; are allowed to grow the size. By default, this is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f78db2aad4797a8fca7482ad10ad9ade0066cfd" translate="yes" xml:space="preserve">
          <source>dynamic_size_</source>
          <target state="translated">dynamic_size_</target>
        </trans-unit>
        <trans-unit id="7f53a68d324346fc8457a1665141697dcc97ee86" translate="yes" xml:space="preserve">
          <source>e.g.</source>
          <target state="translated">e.g.</target>
        </trans-unit>
        <trans-unit id="dc8220072f374a697be8e648c79364fb1efd1736" translate="yes" xml:space="preserve">
          <source>element_shape: The expected shape of an element, if known. Used to validate the shapes of &lt;a href=&quot;tensor-array#classtensorflow_1_1ops_1_1_tensor_array&quot;&gt;TensorArray&lt;/a&gt; elements. If this shape is not fully specified, gathering zero-size TensorArrays is an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a8bfa212e478dba5329a610da19c6513ecb5ba8" translate="yes" xml:space="preserve">
          <source>element_shape_</source>
          <target state="translated">element_shape_</target>
        </trans-unit>
        <trans-unit id="d685b5af8b2d5e8fc48c07b230844f7aeb0821d2" translate="yes" xml:space="preserve">
          <source>element_shape_except0_</source>
          <target state="translated">element_shape_except0_</target>
        </trans-unit>
        <trans-unit id="786987e58f3f587b41562b7c3fd99ee22f266844" translate="yes" xml:space="preserve">
          <source>empty_row_indicator</source>
          <target state="translated">empty_row_indicator</target>
        </trans-unit>
        <trans-unit id="1f0bd47b65af915969824f9846adc5101b726513" translate="yes" xml:space="preserve">
          <source>encoding: The type of encoding for the file. Currently ZLIB and GZIP are supported. Defaults to none.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22655ed88b82abd334f6c6d83b4627349a94b29e" translate="yes" xml:space="preserve">
          <source>encoding_</source>
          <target state="translated">encoding_</target>
        </trans-unit>
        <trans-unit id="7a92f3d26362d6557d5701de77a63a01df61e57f" translate="yes" xml:space="preserve">
          <source>end</source>
          <target state="translated">end</target>
        </trans-unit>
        <trans-unit id="6cc81f5cf82cd3937fc0518a2291834d4f513f01" translate="yes" xml:space="preserve">
          <source>end_</source>
          <target state="translated">end_</target>
        </trans-unit>
        <trans-unit id="9e6da984a13baff18b0dcb6d1de7c5855fe1374d" translate="yes" xml:space="preserve">
          <source>ensure_minimum_range_</source>
          <target state="translated">ensure_minimum_range_</target>
        </trans-unit>
        <trans-unit id="220a0f918e3a0f0e6687c2a70155fb261f637e07" translate="yes" xml:space="preserve">
          <source>epsilon: A small float number added to the variance of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039432aa44d076d76c6b22f2ad4afb66ae055c9a" translate="yes" xml:space="preserve">
          <source>epsilon: Constant factor. Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d102a22938a4caefda89fa44041071e5e2d55c7" translate="yes" xml:space="preserve">
          <source>epsilon: Ridge term. Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="006a0d170b2e25687158c7befc57001cc2857a36" translate="yes" xml:space="preserve">
          <source>epsilon_</source>
          <target state="translated">epsilon_</target>
        </trans-unit>
        <trans-unit id="cb2329980adc258aa310286a16f5ad225804051e" translate="yes" xml:space="preserve">
          <source>error_msg: A string which is the message associated with the exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c47e09da78adce63ca789e31e64d70b5a37d57" translate="yes" xml:space="preserve">
          <source>error_msg_</source>
          <target state="translated">error_msg_</target>
        </trans-unit>
        <trans-unit id="21821989d9125feada9019b89c76afdd7d5da0d1" translate="yes" xml:space="preserve">
          <source>errors: Error handling policy when there is invalid formatting found in the input. The value of 'strict' will cause the operation to produce a InvalidArgument error on any invalid input formatting. A value of 'replace' (the default) will cause the operation to replace any invalid formatting in the input with the &lt;code&gt;replacement_char&lt;/code&gt; codepoint. A value of 'ignore' will cause the operation to skip any invalid formatting in the input and produce no corresponding output character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385d24ccd332f45b87e4ae99bbc2eed0bb11de6a" translate="yes" xml:space="preserve">
          <source>errors_</source>
          <target state="translated">errors_</target>
        </trans-unit>
        <trans-unit id="d4369e875c51b2e3c8a889395d174488991f27f0" translate="yes" xml:space="preserve">
          <source>exclusive: If &lt;code&gt;True&lt;/code&gt;, perform exclusive cumprod.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941e929010bbdf2a9985adf232814a51b6556a6f" translate="yes" xml:space="preserve">
          <source>exclusive: If &lt;code&gt;True&lt;/code&gt;, perform exclusive cumsum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebaaf228831f102614a63930c241bc9dcf565bc1" translate="yes" xml:space="preserve">
          <source>exclusive_</source>
          <target state="translated">exclusive_</target>
        </trans-unit>
        <trans-unit id="d84ce8f6d75efc5bff34b65a0fabcad5145e6a20" translate="yes" xml:space="preserve">
          <source>exit_without_error_</source>
          <target state="translated">exit_without_error_</target>
        </trans-unit>
        <trans-unit id="a2af82ee16e71bbbd6d370812a753c93412bd6e3" translate="yes" xml:space="preserve">
          <source>explicit_paddings: If &lt;code&gt;padding&lt;/code&gt; is &lt;code&gt;&quot;EXPLICIT&quot;&lt;/code&gt;, the list of explicit padding amounts. For the ith dimension, the amount of padding inserted before and after the dimension is &lt;code&gt;explicit_paddings[2 * i]&lt;/code&gt; and &lt;code&gt;explicit_paddings[2 * i + 1]&lt;/code&gt;, respectively. If &lt;code&gt;padding&lt;/code&gt; is not &lt;code&gt;&quot;EXPLICIT&quot;&lt;/code&gt;, &lt;code&gt;explicit_paddings&lt;/code&gt; must be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40fb56032f6188fe6d9072096ef5c1cb84839074" translate="yes" xml:space="preserve">
          <source>explicit_paddings_</source>
          <target state="translated">explicit_paddings_</target>
        </trans-unit>
        <trans-unit id="c783409bca2c563568592acf34018769007a5bc2" translate="yes" xml:space="preserve">
          <source>exponential_avg_factor_</source>
          <target state="translated">exponential_avg_factor_</target>
        </trans-unit>
        <trans-unit id="97e6e6dcf0b1523baaa9f6e20240cfae5fd26815" translate="yes" xml:space="preserve">
          <source>extrapolation_value: Value used for extrapolation, when applicable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c6708571763241d6cf55928b922dcebd780891" translate="yes" xml:space="preserve">
          <source>extrapolation_value_</source>
          <target state="translated">extrapolation_value_</target>
        </trans-unit>
        <trans-unit id="58dbfe3d658060e6133943c5784e7700b07ebf87" translate="yes" xml:space="preserve">
          <source>fact</source>
          <target state="translated">fact</target>
        </trans-unit>
        <trans-unit id="f032e16dc9442143e828e2f031db8d218c51992a" translate="yes" xml:space="preserve">
          <source>fancy_upscaling: If true use a slower but nicer upscaling of the chroma planes (yuv420/422 only).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159aca4546774e2e1d5a60e9c5d31fc7b101377a" translate="yes" xml:space="preserve">
          <source>fancy_upscaling_</source>
          <target state="translated">fancy_upscaling_</target>
        </trans-unit>
        <trans-unit id="274a8956c6445f2db333aaa72998df2581f23adc" translate="yes" xml:space="preserve">
          <source>feature_list_dense_keys: A list of Nfeature_list_dense string Tensors (scalars). The keys expected in the SequenceExamples' feature_lists associated with lists of dense values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6c0c200e5d2593b06847f89dbfefb381fada08" translate="yes" xml:space="preserve">
          <source>feature_list_dense_keys: The keys expected in the SequenceExamples' feature_lists associated with lists of dense values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa6e3e5dc6f694c36f53b25c3e22193f27cc5bc" translate="yes" xml:space="preserve">
          <source>feature_list_dense_lengths</source>
          <target state="translated">feature_list_dense_lengths</target>
        </trans-unit>
        <trans-unit id="37595611adbfd16c3c484401f50a970922025753" translate="yes" xml:space="preserve">
          <source>feature_list_dense_missing_assumed_empty: A vector corresponding 1:1 with feature_list_dense_keys, indicating which features may be missing from the SequenceExamples. If the associated FeatureList is missing, it is treated as empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe77a60eb6bc9e2bee9a30a4c8443cac6942bc6d" translate="yes" xml:space="preserve">
          <source>feature_list_dense_missing_assumed_empty: A vector listing the FeatureList keys which may be missing from the SequenceExample. If the associated FeatureList is missing, it is treated as empty. By default, any FeatureList not listed in this vector must exist in the SequenceExample.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4eb688f32201d79cecd5ebb5b5869498475b49" translate="yes" xml:space="preserve">
          <source>feature_list_dense_missing_assumed_empty: A vector listing the FeatureList keys which may be missing from the SequenceExamples. If the associated FeatureList is missing, it is treated as empty. By default, any FeatureList not listed in this vector must exist in the SequenceExamples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2641a5cbeef1a152082df425a60be30b47cf05f0" translate="yes" xml:space="preserve">
          <source>feature_list_dense_shapes: A list of Nfeature_list_dense shapes; the shapes of data in each FeatureList given in feature_list_dense_keys. The shape of each Feature in the FeatureList corresponding to feature_list_dense_key[j] must always equal feature_list_dense_shapes[j].NumEntries().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf0acce59184fca1e62d011c1a62e1ee147cab6" translate="yes" xml:space="preserve">
          <source>feature_list_dense_shapes_</source>
          <target state="translated">feature_list_dense_shapes_</target>
        </trans-unit>
        <trans-unit id="ce4bd9b648b3c1418c160339b74970f1cf233385" translate="yes" xml:space="preserve">
          <source>feature_list_dense_types_</source>
          <target state="translated">feature_list_dense_types_</target>
        </trans-unit>
        <trans-unit id="d7cc4f208856bef876b160441315455394f70011" translate="yes" xml:space="preserve">
          <source>feature_list_dense_values</source>
          <target state="translated">feature_list_dense_values</target>
        </trans-unit>
        <trans-unit id="5452a123cc26f1af1f7e3eb6b6bc6c95b7515781" translate="yes" xml:space="preserve">
          <source>feature_list_ragged_inner_splits</source>
          <target state="translated">feature_list_ragged_inner_splits</target>
        </trans-unit>
        <trans-unit id="c895f7914adc54f1b95280b235b5aef54caeda04" translate="yes" xml:space="preserve">
          <source>feature_list_ragged_keys: The keys expected in the FeatureLists associated with ragged values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8f8a17acb975bc8e4692318b7d3ee342a9c2d83" translate="yes" xml:space="preserve">
          <source>feature_list_ragged_outer_splits</source>
          <target state="translated">feature_list_ragged_outer_splits</target>
        </trans-unit>
        <trans-unit id="10414347d29571571fab166925dff51198264b50" translate="yes" xml:space="preserve">
          <source>feature_list_ragged_split_types: RaggedTensor.row_split dtypes for the ragged FeatureList features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bb1d873654be4c260e2a009d85394b7056957c0" translate="yes" xml:space="preserve">
          <source>feature_list_ragged_split_types_</source>
          <target state="translated">feature_list_ragged_split_types_</target>
        </trans-unit>
        <trans-unit id="52c7e1ee5b88dcd26933262a4bc5569fe95f166e" translate="yes" xml:space="preserve">
          <source>feature_list_ragged_value_types: RaggedTensor.value dtypes for the ragged FeatureList features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0a09d7a0a1537aaf69fcb96796796a800c9ba3" translate="yes" xml:space="preserve">
          <source>feature_list_ragged_value_types_</source>
          <target state="translated">feature_list_ragged_value_types_</target>
        </trans-unit>
        <trans-unit id="72e9a7bbbab3167f3d42164ab281d1dcb27c8638" translate="yes" xml:space="preserve">
          <source>feature_list_ragged_values</source>
          <target state="translated">feature_list_ragged_values</target>
        </trans-unit>
        <trans-unit id="fa747017d15e0bb254763b6853c2b771d101574a" translate="yes" xml:space="preserve">
          <source>feature_list_sparse_indices</source>
          <target state="translated">feature_list_sparse_indices</target>
        </trans-unit>
        <trans-unit id="39af2da6923be7481c7ebc9aa3000e2de48bf9af" translate="yes" xml:space="preserve">
          <source>feature_list_sparse_keys: A list of Nfeature_list_sparse string Tensors (scalars). The keys expected in the FeatureLists associated with sparse values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b76064a215dbcd26cd85b1ee93e5ffeeb0c3c3b" translate="yes" xml:space="preserve">
          <source>feature_list_sparse_keys: The keys expected in the FeatureLists associated with sparse values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef8cdf193953c4a42266520774cc808425283bfb" translate="yes" xml:space="preserve">
          <source>feature_list_sparse_shapes</source>
          <target state="translated">feature_list_sparse_shapes</target>
        </trans-unit>
        <trans-unit id="8845682309dd67fd0faf51825e397c05d164a076" translate="yes" xml:space="preserve">
          <source>feature_list_sparse_types: A list of Nfeature_list_sparse types; the data types of data in each FeatureList given in feature_list_sparse_keys. Currently the &lt;a href=&quot;parse-single-sequence-example#classtensorflow_1_1ops_1_1_parse_single_sequence_example&quot;&gt;ParseSingleSequenceExample&lt;/a&gt; supports DT_FLOAT (FloatList), DT_INT64 (Int64List), and DT_STRING (BytesList).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f8f069b0161d49510c1123e6096098c5818a3c" translate="yes" xml:space="preserve">
          <source>feature_list_sparse_types_</source>
          <target state="translated">feature_list_sparse_types_</target>
        </trans-unit>
        <trans-unit id="c97c329b79a46353cf62ea5ad7c41896ddad44c6" translate="yes" xml:space="preserve">
          <source>feature_list_sparse_values</source>
          <target state="translated">feature_list_sparse_values</target>
        </trans-unit>
        <trans-unit id="74a678c22e21ace95f059f6ac8eae71faa3c7f5d" translate="yes" xml:space="preserve">
          <source>features: batch_size x num_classes matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17891ac1aab37c1007a1d1e64202de60b224b897" translate="yes" xml:space="preserve">
          <source>field_delim: char delimiter to separate fields in a record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4380ad0c3348f0fe6e109e43485e0e4ee94f668c" translate="yes" xml:space="preserve">
          <source>field_delim_</source>
          <target state="translated">field_delim_</target>
        </trans-unit>
        <trans-unit id="b3d40dd016b286dbd722ef0ee5c29f335d460378" translate="yes" xml:space="preserve">
          <source>file_buffer_size: The randomization shuffling buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cdc814305be4cf0bfc56d1509581d458e120eed" translate="yes" xml:space="preserve">
          <source>file_buffer_size_</source>
          <target state="translated">file_buffer_size_</target>
        </trans-unit>
        <trans-unit id="e6be698a29fddee147e27fcc290d9bd3665e3cca" translate="yes" xml:space="preserve">
          <source>file_parallelism: How many sstables are opened and concurrently iterated over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b60b2f491bcd116e6d7ac26b21063b70117c124" translate="yes" xml:space="preserve">
          <source>file_parallelism_</source>
          <target state="translated">file_parallelism_</target>
        </trans-unit>
        <trans-unit id="30a844f931a8aef3f9b7859ad83191b422d1aab7" translate="yes" xml:space="preserve">
          <source>file_pattern: Glob pattern for the data files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce26cdd459428f699593ed7fde9e612cd4c3656" translate="yes" xml:space="preserve">
          <source>file_pattern: Must have a single element. The pattern of the files from which we read the tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b731d004d898c2cb3f7acaa848f7d9b5e812bee" translate="yes" xml:space="preserve">
          <source>file_random_seed: Random seeds used to produce randomized records.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed7c800da84e2d6fb84f6f61ade2f1bb5646e3a" translate="yes" xml:space="preserve">
          <source>file_random_seed_</source>
          <target state="translated">file_random_seed_</target>
        </trans-unit>
        <trans-unit id="88073039fad1bb5dce4b28c21e7f126e446af1b3" translate="yes" xml:space="preserve">
          <source>file_shuffle_shift_ratio: Shifts the list of files after the list is randomly shuffled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136179b10566a85646f774da87cf9b97406d1e8b" translate="yes" xml:space="preserve">
          <source>file_shuffle_shift_ratio_</source>
          <target state="translated">file_shuffle_shift_ratio_</target>
        </trans-unit>
        <trans-unit id="08deae8d9ea9bc0b84f94475d868351830e9f7e7" translate="yes" xml:space="preserve">
          <source>filename</source>
          <target state="translated">filename</target>
        </trans-unit>
        <trans-unit id="79dfebebdd835bbce550b47205e04225d71e35c1" translate="yes" xml:space="preserve">
          <source>filename: Must have a single element. The name of the file to which we write the tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd40724370e9883797b7a4e79f4d0c3fb8db5e7" translate="yes" xml:space="preserve">
          <source>filename: scalar. The name of the file to which we write the contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f9efe00b56c88909beb04108ce4adadf0af50d0" translate="yes" xml:space="preserve">
          <source>filenames</source>
          <target state="translated">filenames</target>
        </trans-unit>
        <trans-unit id="2026dedcf61790dbb9aa4424a39016b7e1b2df74" translate="yes" xml:space="preserve">
          <source>fill: The value to pad if width &amp;gt; -1. If empty, pads with spaces. Another typical value is '0'. String cannot be longer than 1 character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ffad9bdb31b9528151af0c8094e6356acf18f47" translate="yes" xml:space="preserve">
          <source>fill_</source>
          <target state="translated">fill_</target>
        </trans-unit>
        <trans-unit id="7f22013c61aed9e5e2f2824769ccc11544f9344e" translate="yes" xml:space="preserve">
          <source>filter: 3-D with shape &lt;code&gt;[filter_height, filter_width, depth]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355416615205ee9c176d49fb0a26f1798b921131" translate="yes" xml:space="preserve">
          <source>filter: 4-D with shape &lt;code&gt;[filter_height, filter_width, in_channels, depthwise_multiplier]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4245482ca64b3eb503f104b97d012648035a38b7" translate="yes" xml:space="preserve">
          <source>filter: 4-D with shape &lt;code&gt;[filter_height, filter_width, in_channels, out_channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e264d406cdf0d2902823740ddbc8b2ed6cf70cf" translate="yes" xml:space="preserve">
          <source>filter: A 4-D tensor of shape &lt;code&gt;[filter_height, filter_width, in_channels, out_channels]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c4fa82e8746b2b17285cee1b4d3a29c25aab1ce" translate="yes" xml:space="preserve">
          <source>filter: Shape &lt;code&gt;[depth, rows, cols, in_channels, out_channels]&lt;/code&gt;. &lt;code&gt;in_channels&lt;/code&gt; must match between &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db45c84c23ff7a11cc69c06201794780549f7a14" translate="yes" xml:space="preserve">
          <source>filter: Shape &lt;code&gt;[filter_depth, filter_height, filter_width, in_channels, out_channels]&lt;/code&gt;. &lt;code&gt;in_channels&lt;/code&gt; must match between &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564de1fbd4f5cd8313c8bd32abca62b47f3ec90a" translate="yes" xml:space="preserve">
          <source>filter: filter's input_depth dimension must match input's depth dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9fb6fc8143779bd7ae48f2d276c990ffc4220c" translate="yes" xml:space="preserve">
          <source>filter_backprop</source>
          <target state="translated">filter_backprop</target>
        </trans-unit>
        <trans-unit id="ab58b08ec77809ea707de02d42313b266ba67dc5" translate="yes" xml:space="preserve">
          <source>filter_sizes: An integer vector representing the tensor shape of &lt;code&gt;filter&lt;/code&gt;, where &lt;code&gt;filter&lt;/code&gt; is a 4-D &lt;code&gt;[filter_height, filter_width, in_channels, depthwise_multiplier]&lt;/code&gt; tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad94f7f18f8c60d89ffab3ecda4187a66780055" translate="yes" xml:space="preserve">
          <source>filter_sizes: An integer vector representing the tensor shape of &lt;code&gt;filter&lt;/code&gt;, where &lt;code&gt;filter&lt;/code&gt; is a 4-D &lt;code&gt;[filter_height, filter_width, in_channels, out_channels]&lt;/code&gt; tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd3a788fb5ddaedc538ddfdf76538b5803823d2" translate="yes" xml:space="preserve">
          <source>filter_sizes: An integer vector representing the tensor shape of &lt;code&gt;filter&lt;/code&gt;, where &lt;code&gt;filter&lt;/code&gt; is a 5-D &lt;code&gt;[filter_depth, filter_height, filter_width, in_channels, out_channels]&lt;/code&gt; tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5448ce070e8ff567c4870e9fe0aeba3c0a98330" translate="yes" xml:space="preserve">
          <source>fingerprint</source>
          <target state="translated">fingerprint</target>
        </trans-unit>
        <trans-unit id="42bb8eb9edf2f477deb4dfe55e24b3dfe03e15de" translate="yes" xml:space="preserve">
          <source>first_n: Only log &lt;code&gt;first_n&lt;/code&gt; number of times. -1 disables logging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aaa4f96ac20cc8fa0b856478be205e9b586106d" translate="yes" xml:space="preserve">
          <source>first_n_</source>
          <target state="translated">first_n_</target>
        </trans-unit>
        <trans-unit id="c2aab6eda837ae301324e159a68fd65932b8b2b8" translate="yes" xml:space="preserve">
          <source>fixed_length: Length in bytes for each element of the decoded output. Must be a multiple of the size of the output type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c7b42de27fde88448357eef801bbafbf848468" translate="yes" xml:space="preserve">
          <source>flat</source>
          <target state="translated">flat</target>
        </trans-unit>
        <trans-unit id="130467886b8ed759f8569249a54a81f68b937317" translate="yes" xml:space="preserve">
          <source>flat_inner_dims</source>
          <target state="translated">flat_inner_dims</target>
        </trans-unit>
        <trans-unit id="c3b12fe0343c712fab5200cf3784efb0b1d9e113" translate="yes" xml:space="preserve">
          <source>flat_inner_outer_dims</source>
          <target state="translated">flat_inner_outer_dims</target>
        </trans-unit>
        <trans-unit id="23821e09c3d3d15c875925062a1cd5c5f664105b" translate="yes" xml:space="preserve">
          <source>flat_outer_dims</source>
          <target state="translated">flat_outer_dims</target>
        </trans-unit>
        <trans-unit id="d8f7e9c783be82328ffc2f348b0f257b671c1107" translate="yes" xml:space="preserve">
          <source>flow</source>
          <target state="translated">flow</target>
        </trans-unit>
        <trans-unit id="b5b55c01479e4af8fa8cb9f763abbbc4a6fdde98" translate="yes" xml:space="preserve">
          <source>flow_in: A float scalar that enforces proper chaining of operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3debbe1c497a2198f387e3d56921d2786082f8f" translate="yes" xml:space="preserve">
          <source>flow_out</source>
          <target state="translated">flow_out</target>
        </trans-unit>
        <trans-unit id="0b9b162df2456888090ed66b184557074b17dff8" translate="yes" xml:space="preserve">
          <source>footer_bytes: Number of bytes in the footer, defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051be567d9f19870839a8b168e2c9fed2440c0bd" translate="yes" xml:space="preserve">
          <source>footer_bytes_</source>
          <target state="translated">footer_bytes_</target>
        </trans-unit>
        <trans-unit id="02ff0da212d9bd8d7640afb29536afd8f3ffd5ca" translate="yes" xml:space="preserve">
          <source>format: Per pixel image format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a7d4c25c51036bb766c94a4737e30a8ca9ebc8a" translate="yes" xml:space="preserve">
          <source>format_</source>
          <target state="translated">format_</target>
        </trans-unit>
        <trans-unit id="682c0799b9f3d14676439dea32a9bde1e5fda225" translate="yes" xml:space="preserve">
          <source>from the underlying container. If the underlying container does not contain elements, the op will block until it does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c680d0fc5b5759e6281c3eff2dbafab6351abeb" translate="yes" xml:space="preserve">
          <source>from the underlying container. If the underlying container does not contain this key, the op will block until it does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad825c79bb98b636a85e9b0f3a412b5ff52d8692" translate="yes" xml:space="preserve">
          <source>gamma: A 1D gamma &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; with size matching the last dimension of t. If &quot;scale_after_normalization&quot; is true, this tensor will be multiplied with the normalized tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c861b6146371e11bdbdd006bd9a57abdc831161" translate="yes" xml:space="preserve">
          <source>gamma_max: The value represented by the highest quantized gamma.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b4c55b2459ef2293e1e34eb4a8bf89338dbb821" translate="yes" xml:space="preserve">
          <source>gamma_min: The value represented by the lowest quantized gamma.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386a37716c077b3be830eb7f667829e0feb2b0f8" translate="yes" xml:space="preserve">
          <source>given_y_max: &lt;a href=&quot;../output#classtensorflow_1_1_output&quot;&gt;Output&lt;/a&gt; in &lt;code&gt;y_max&lt;/code&gt; if &lt;code&gt;output_range_given&lt;/code&gt; is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a037bcc75f633ed336570de1af8d5129049bc4b" translate="yes" xml:space="preserve">
          <source>given_y_max_</source>
          <target state="translated">given_y_max_</target>
        </trans-unit>
        <trans-unit id="465329fa79ac3cfe77824b46fb0d8caba0548552" translate="yes" xml:space="preserve">
          <source>given_y_min: &lt;a href=&quot;../output#classtensorflow_1_1_output&quot;&gt;Output&lt;/a&gt; in &lt;code&gt;y_min&lt;/code&gt; if &lt;code&gt;output_range_given&lt;/code&gt; is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93049e0b79c4d2d5936cd37f61ce6d7593616509" translate="yes" xml:space="preserve">
          <source>given_y_min_</source>
          <target state="translated">given_y_min_</target>
        </trans-unit>
        <trans-unit id="eeb0893f8c3d0330549804f95cd9ae2d8e912abc" translate="yes" xml:space="preserve">
          <source>glimpse</source>
          <target state="translated">glimpse</target>
        </trans-unit>
        <trans-unit id="73f016b78a1fe0d75cc75b54e20d27442208377d" translate="yes" xml:space="preserve">
          <source>global_step: Training step number. Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7adea7c1d0515a84b061583f5a73b3f126488fad" translate="yes" xml:space="preserve">
          <source>grad: 4-D with shape &lt;code&gt;[batch, height, width, channels]&lt;/code&gt;. Gradients w.r.t. the input of &lt;code&gt;max_pool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064cff286c045f9e2821f5eaf4e478797c5f3fda" translate="yes" xml:space="preserve">
          <source>grad: 4-D. Gradients of gradients w.r.t. the input of &lt;code&gt;max_pool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35596b774040136ae576357d4ad817a28421bc5a" translate="yes" xml:space="preserve">
          <source>grad: 4-D. Gradients w.r.t. the output of &lt;code&gt;max_pool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1665261b809247ca55ed5a82ce1bdfca2986eb3b" translate="yes" xml:space="preserve">
          <source>grad: &lt;a href=&quot;../output#classtensorflow_1_1_output&quot;&gt;Output&lt;/a&gt; backprop of shape &lt;code&gt;[batch, depth, rows, cols, channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8883d8a52b04dddd235554d5664997797ffb50bb" translate="yes" xml:space="preserve">
          <source>grad: The gradient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec8c67802b08ee9a76d4d60d38f8dd848b14e87" translate="yes" xml:space="preserve">
          <source>grad: gradient propagated to the &lt;a href=&quot;sparse-segment-mean#classtensorflow_1_1ops_1_1_sparse_segment_mean&quot;&gt;SparseSegmentMean&lt;/a&gt; op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1480f75ae8b2cb9da0142a9e71fa6952289e881f" translate="yes" xml:space="preserve">
          <source>grad: gradient propagated to the &lt;a href=&quot;sparse-segment-sqrt-n#classtensorflow_1_1ops_1_1_sparse_segment_sqrt_n&quot;&gt;SparseSegmentSqrtN&lt;/a&gt; op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64463fb5798c6be29cc75682dd8fce66e8a6817e" translate="yes" xml:space="preserve">
          <source>grad_handle</source>
          <target state="translated">grad_handle</target>
        </trans-unit>
        <trans-unit id="08b58c2a3afeb03f6d537a447f0bf7f7788028ff" translate="yes" xml:space="preserve">
          <source>grad_values: 1-D. The gradients from backprop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6bf3184c3fa062bf1aec2fe07d14c139ce7062" translate="yes" xml:space="preserve">
          <source>grad_with_shrinkage = grad + 2 * l2_shrinkage * var accum_new = accum + grad * grad linear += grad_with_shrinkage - (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2 var = (sign(linear) * l1 - linear) / quadratic if |linear| &amp;gt; l1 else 0.0 accum = accum_new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc6d2bab97d704731db0d4f399c289f787b8e1c5" translate="yes" xml:space="preserve">
          <source>grad_with_shrinkage = grad + 2 * l2_shrinkage * var accum_new = accum + grad_with_shrinkage * grad_with_shrinkage linear += grad_with_shrinkage + (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2 var = (sign(linear) * l1 - linear) / quadratic if |linear| &amp;gt; l1 else 0.0 accum = accum_new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ed81c72e0e64ba3c5940fc13a58b55c01c675b" translate="yes" xml:space="preserve">
          <source>gradient: A tensor of the gradient to be accumulated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23988d44d30ca1d04324cc8d528cb179dd831d9" translate="yes" xml:space="preserve">
          <source>gradient_accumulator: Should be from a Variable().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a49ef8ddb1b1609551327a4800344be0f1a3ee1" translate="yes" xml:space="preserve">
          <source>gradient_indices: Indices of the sparse gradient to be accumulated. Must be a vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98335fe43db66d4fa6e89463887d415151338915" translate="yes" xml:space="preserve">
          <source>gradient_shape: Shape of the sparse gradient to be accumulated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e273ce07aff37e75aca40e5613784d45dd8b03" translate="yes" xml:space="preserve">
          <source>gradient_squared_accumulator: Should be from a Variable().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a4ee3c001aeeaea371f810a733c6f07614faf9" translate="yes" xml:space="preserve">
          <source>gradient_values: Values are the non-zero slices of the gradient, and must have the same first dimension as indices, i.e., the nnz represented by indices and values must be consistent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3792d41d0e583f15d286aadd3eac89242bef0ba1" translate="yes" xml:space="preserve">
          <source>gradients: Backpropagated gradients above the &lt;a href=&quot;fake-quant-with-min-max-args#classtensorflow_1_1ops_1_1_fake_quant_with_min_max_args&quot;&gt;FakeQuantWithMinMaxArgs&lt;/a&gt; operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f9e965c4283accc74bd8454a220c20564d1242d" translate="yes" xml:space="preserve">
          <source>gradients: Backpropagated gradients above the &lt;a href=&quot;fake-quant-with-min-max-vars#classtensorflow_1_1ops_1_1_fake_quant_with_min_max_vars&quot;&gt;FakeQuantWithMinMaxVars&lt;/a&gt; operation, shape one of: &lt;code&gt;[d]&lt;/code&gt;, &lt;code&gt;[b, d]&lt;/code&gt;, &lt;code&gt;[b, h, w, d]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b73b06b05b32304251e8e2f3e1ff423ad2efb9" translate="yes" xml:space="preserve">
          <source>gradients: Backpropagated gradients above the &lt;a href=&quot;fake-quant-with-min-max-vars#classtensorflow_1_1ops_1_1_fake_quant_with_min_max_vars&quot;&gt;FakeQuantWithMinMaxVars&lt;/a&gt; operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae2fc722c5f0b6ef713a8f5be97b994a7fb6022d" translate="yes" xml:space="preserve">
          <source>grads: A 4-D tensor of shape &lt;code&gt;[num_boxes, crop_height, crop_width, depth]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a184b65cab57768dac7fd2bf422bc583ccc38a" translate="yes" xml:space="preserve">
          <source>graph</source>
          <target state="translated">graph</target>
        </trans-unit>
        <trans-unit id="2e226d4a0f00d6909ea427b40ad418f13d64bcb5" translate="yes" xml:space="preserve">
          <source>graph_as_shared_ptr</source>
          <target state="translated">graph_as_shared_ptr</target>
        </trans-unit>
        <trans-unit id="7a1bb74f0692e65b4e6f05998be7e51ba031242c" translate="yes" xml:space="preserve">
          <source>half_pixel_centers_</source>
          <target state="translated">half_pixel_centers_</target>
        </trans-unit>
        <trans-unit id="a2dd7ec666aacd57fc6d0571db038b51deb9fb6e" translate="yes" xml:space="preserve">
          <source>handle</source>
          <target state="translated">handle</target>
        </trans-unit>
        <trans-unit id="4793171010ce44f351ce5d2552b3fa21ff753ce6" translate="yes" xml:space="preserve">
          <source>handle: The handle for a tensor stored in the session state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683ea4cf437fbeed804336f91961eb25000bfe1c" translate="yes" xml:space="preserve">
          <source>handle: The handle to a &lt;a href=&quot;sparse-conditional-accumulator#classtensorflow_1_1ops_1_1_sparse_conditional_accumulator&quot;&gt;SparseConditionalAccumulator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed35a8998246eeb49bcbff8863dbbe07ead7a960" translate="yes" xml:space="preserve">
          <source>handle: The handle to a &lt;a href=&quot;tensor-array#classtensorflow_1_1ops_1_1_tensor_array&quot;&gt;TensorArray&lt;/a&gt; (output of &lt;a href=&quot;tensor-array#classtensorflow_1_1ops_1_1_tensor_array&quot;&gt;TensorArray&lt;/a&gt; or &lt;a href=&quot;tensor-array-grad#classtensorflow_1_1ops_1_1_tensor_array_grad&quot;&gt;TensorArrayGrad&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925e3b44afa28e4689c4de448f746a716670582a" translate="yes" xml:space="preserve">
          <source>handle: The handle to a &lt;a href=&quot;tensor-array#classtensorflow_1_1ops_1_1_tensor_array&quot;&gt;TensorArray&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637467503e20f8ec06c71d3d0a8effd66d249f38" translate="yes" xml:space="preserve">
          <source>handle: The handle to a accumulator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa6e9998890d34afbf858ca3da984bbfbcb7a06" translate="yes" xml:space="preserve">
          <source>handle: The handle to a barrier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd422540b32eab91f37ca1ce08b865d91a7c8ca" translate="yes" xml:space="preserve">
          <source>handle: The handle to a queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e32ebd83f545f1f8e4f5d0e1ff9414c9ae297a5" translate="yes" xml:space="preserve">
          <source>handle: The handle to an accumulator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f59c22c9d3175016a62a0c7febb3033e9bdb5b" translate="yes" xml:space="preserve">
          <source>handle: The handle to the forward &lt;a href=&quot;tensor-array#classtensorflow_1_1ops_1_1_tensor_array&quot;&gt;TensorArray&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c1a444fba5e37a052759de9537b9440866faf1" translate="yes" xml:space="preserve">
          <source>has_known_shape: Boolean indicating whether gradient_shape is unknown, in which case the input is ignored during validation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2346ad27d7568ba9896f1b7da6b5991251debdf2" translate="yes" xml:space="preserve">
          <source>hash</source>
          <target state="translated">hash</target>
        </trans-unit>
        <trans-unit id="c73ecc24445622cd2c9495b56c7895391705c384" translate="yes" xml:space="preserve">
          <source>hash_key: Specify the hash_key that will be used by the &lt;code&gt;FingerprintCat64&lt;/code&gt; function to combine the crosses fingerprints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f6b5f1addb5fe81d1121ca0c7dc1e48527c306" translate="yes" xml:space="preserve">
          <source>hashed_output: If true, returns the hash of the cross instead of the string. This will allow us avoiding string manipulations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972f9a868cd63849085e479be745297614a31fc8" translate="yes" xml:space="preserve">
          <source>have executed before this op. This is typically achieved by chaining the ref through each assign op, or by using control dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39cc63ff660b3b60d81471212bbc0d3516df4490" translate="yes" xml:space="preserve">
          <source>header_bytes: Number of bytes in the header, defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fab028a97d1f4ee393685a131f85660989db9a" translate="yes" xml:space="preserve">
          <source>header_bytes_</source>
          <target state="translated">header_bytes_</target>
        </trans-unit>
        <trans-unit id="0154c0dabe7145db37e0b81bf667e7224abec0ba" translate="yes" xml:space="preserve">
          <source>here</source>
          <target state="translated">here</target>
        </trans-unit>
        <trans-unit id="0a7e52493f5d25e7a2f10913d9170ad714dd9abc" translate="yes" xml:space="preserve">
          <source>here &lt;code&gt;range(T) = numeric_limits&lt;t&gt;::max() - numeric_limits&lt;t&gt;::min()&lt;/t&gt;&lt;/t&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="535ec1864e9993541600f692abfc2096246d0039" translate="yes" xml:space="preserve">
          <source>hop_bytes: Number of bytes to hop before each read. Default of 0 means using record_bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb43194464b107475e1679aa3d2e4700ea7fbf62" translate="yes" xml:space="preserve">
          <source>hop_bytes_</source>
          <target state="translated">hop_bytes_</target>
        </trans-unit>
        <trans-unit id="9662143d523a2797d9730d05ba9324ed7e4025fb" translate="yes" xml:space="preserve">
          <source>hypothesis_indices: The indices of the hypothesis list SparseTensor. This is an N x R int64 matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="785a05af1b13bd2ff1fdd009fe1b4f7a4528311c" translate="yes" xml:space="preserve">
          <source>hypothesis_shape: The shape of the hypothesis list SparseTensor. This is an R-length vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387fa8b0284a7460bdbae93378c691c7ad2a0dac" translate="yes" xml:space="preserve">
          <source>hypothesis_values: The values of the hypothesis list SparseTensor. This is an N-length vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936b7ec6322f6e9d6b2d036d56bb9dcf9196fca0" translate="yes" xml:space="preserve">
          <source>i.e. &lt;code&gt;exp(x) - 1&lt;/code&gt; or &lt;code&gt;e^(x) - 1&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the input tensor. &lt;code&gt;e&lt;/code&gt; denotes Euler's number and is approximately equal to 2.718281.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49cab509c29878f9886ae7e9b27bfc0110ad19d4" translate="yes" xml:space="preserve">
          <source>i.e. for 8 bit quantization, the minimum value is -127 instead of -128.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba8f9d388415eac320a1964d337e826bccba6411" translate="yes" xml:space="preserve">
          <source>i: A vector. Indices into the left-most dimension of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7285c872d2a81f60d6103399a084722dd70a06e6" translate="yes" xml:space="preserve">
          <source>identical_element_shapes: If true (default is false), then all elements in the &lt;a href=&quot;tensor-array#classtensorflow_1_1ops_1_1_tensor_array&quot;&gt;TensorArray&lt;/a&gt; will be expected to have have identical shapes. This allows certain behaviors, like dynamically checking for consistent shapes on write, and being able to fill in properly shaped zero tensors on stack even if the element_shape attribute is not fully defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99fc68d4fa301facc79971216e1b3034b5551852" translate="yes" xml:space="preserve">
          <source>identical_element_shapes_</source>
          <target state="translated">identical_element_shapes_</target>
        </trans-unit>
        <trans-unit id="3adc09b3cd3d7c4710f562a05bd850e756cba1b8" translate="yes" xml:space="preserve">
          <source>ids</source>
          <target state="translated">ids</target>
        </trans-unit>
        <trans-unit id="4e7f626df794f6491574a236f22c100c34ed804f" translate="yes" xml:space="preserve">
          <source>idx</source>
          <target state="translated">idx</target>
        </trans-unit>
        <trans-unit id="e29791878048667885d8ab4512f563fbed880b90" translate="yes" xml:space="preserve">
          <source>if &amp;lt; 0, &lt;code&gt;scale * features&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba0b2cb6429da38c0d59b5ecd1d8ae4cadf64aa" translate="yes" xml:space="preserve">
          <source>if &lt;code&gt;axis == 0&lt;/code&gt; then the &lt;code&gt;output&lt;/code&gt; tensor will have the shape &lt;code&gt;(N, A, B, C)&lt;/code&gt;. if &lt;code&gt;axis == 1&lt;/code&gt; then the &lt;code&gt;output&lt;/code&gt; tensor will have the shape &lt;code&gt;(A, N, B, C)&lt;/code&gt;. Etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66d5ec2705ac77fab1867db372eab36bc0c0551" translate="yes" xml:space="preserve">
          <source>if adjoint_a == false: A should be sorted in lexicographically increasing order. Use &lt;a href=&quot;sparse-reorder#classtensorflow_1_1ops_1_1_sparse_reorder&quot;&gt;SparseReorder&lt;/a&gt; if you're not sure. if adjoint_a == true: A should be sorted in order of increasing dimension 1 (i.e., &quot;column major&quot; order instead of &quot;row major&quot; order).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa04bdc09ffcbd8bfdbda949e213df9e157a919d" translate="yes" xml:space="preserve">
          <source>if hashed_output=true then the output will be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad6f2af843b5be73c3bd3c7b1e405539be1d6ae0" translate="yes" xml:space="preserve">
          <source>if the output is signed, num_bits = 8, [input_min, input_max] = [-10.0, 10.0]: it would use a scale_factor of 127 / 10.0 = 12.7 In this case, it would update input_min to be 128.0 / 12.7 = -10.07874</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ae64c1b0745d0ea7d6e78fe2202e78c731f893" translate="yes" xml:space="preserve">
          <source>if the output is signed, num_bits = 8, [input_min, input_max] = [-10.0, 5.0]: it would use a scale_factor of -128 / -10.0 = 12.8 In this case, it would update input_max to be 127 / 12.8 = 9.921875</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7ab655759428ed78c19bf6a5933237e8263407" translate="yes" xml:space="preserve">
          <source>if the output is unsigned, input_min is forced to be 0, and only the specified input_max is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e76292794888d4f1fa75fb3aff4ca27c58f56a6" translate="yes" xml:space="preserve">
          <source>image</source>
          <target state="translated">image</target>
        </trans-unit>
        <trans-unit id="e0996eb1e388d27459a57918915db2a8ad93c23b" translate="yes" xml:space="preserve">
          <source>image: 3-D with shape &lt;code&gt;[height, width, channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb3fa459cd7a87d743bd48e6046c7ce86fc2d5a" translate="yes" xml:space="preserve">
          <source>image: A 4-D tensor of shape &lt;code&gt;[batch, image_height, image_width, depth]&lt;/code&gt;. Both &lt;code&gt;image_height&lt;/code&gt; and &lt;code&gt;image_width&lt;/code&gt; need to be positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f6d10eef5542a635975d381cc12a7ab2c32cd6d" translate="yes" xml:space="preserve">
          <source>image_ops</source>
          <target state="translated">image_ops</target>
        </trans-unit>
        <trans-unit id="d23c2ff4a5b8d12d6e4b6cde20c364d4f6f66cd3" translate="yes" xml:space="preserve">
          <source>image_shape</source>
          <target state="translated">image_shape</target>
        </trans-unit>
        <trans-unit id="9cfaaa0d6523aa47d4f898876b1ca06af372b3a1" translate="yes" xml:space="preserve">
          <source>image_size: 1-D, containing &lt;code&gt;[height, width, channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72741eece76c99e23912ad15fbe82686cb0892f9" translate="yes" xml:space="preserve">
          <source>image_size: A 1-D tensor with value &lt;code&gt;[batch, image_height, image_width, depth]&lt;/code&gt; containing the original image size. Both &lt;code&gt;image_height&lt;/code&gt; and &lt;code&gt;image_width&lt;/code&gt; need to be positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6797780d2a8f6091bc87ffdfd9f747e1faf754d3" translate="yes" xml:space="preserve">
          <source>images: 1-D or higher rank. HSV data to convert. Last dimension must be size 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5139dc000e3e512862acc634b3afa4b1f58793ea" translate="yes" xml:space="preserve">
          <source>images: 1-D or higher rank. RGB data to convert. Last dimension must be size 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3105fc298a06878b77cef9728a852ef783648f" translate="yes" xml:space="preserve">
          <source>images: 4-D &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; with shape &lt;code&gt;[batch, in_rows, in_cols, depth]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451d2982c3cc792bb1a3ff857d802c542840b067" translate="yes" xml:space="preserve">
          <source>images: 4-D with shape &lt;code&gt;[batch, height, width, channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286e88c0d1cf9b7196d91bad98a39a059232327a" translate="yes" xml:space="preserve">
          <source>images: 4-D with shape &lt;code&gt;[batch, height, width, depth]&lt;/code&gt;. A batch of images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9d17ee7fdd4db58d7c1a19a65577e896fb2e3d" translate="yes" xml:space="preserve">
          <source>images: Images to adjust. At least 3-D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="145f982ff271261e5234b626388563c7ff6e9a97" translate="yes" xml:space="preserve">
          <source>in_backprop</source>
          <target state="translated">in_backprop</target>
        </trans-unit>
        <trans-unit id="b47462cf06cad91f89902e919ed77a27f136fc26" translate="yes" xml:space="preserve">
          <source>include_batch_in_index: Whether to include batch dimension in flattened index of &lt;code&gt;argmax&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e384d7f493ba530e55f4373832abfaa633ec6537" translate="yes" xml:space="preserve">
          <source>include_batch_in_index_</source>
          <target state="translated">include_batch_in_index_</target>
        </trans-unit>
        <trans-unit id="4b9881ccf975530a32407f4a2786d3255a89989d" translate="yes" xml:space="preserve">
          <source>incompatible_shape_error_</source>
          <target state="translated">incompatible_shape_error_</target>
        </trans-unit>
        <trans-unit id="e540cdd1328b2b21e29a95405c301b9313b7c346" translate="yes" xml:space="preserve">
          <source>index</source>
          <target state="translated">index</target>
        </trans-unit>
        <trans-unit id="9919e5a8147af9134f6e1f15740f1b4be1661d3f" translate="yes" xml:space="preserve">
          <source>index: A scalar that determines the input that gets selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c211a9b91f19455e8d722e14fd12217b1b5b4cb" translate="yes" xml:space="preserve">
          <source>index: The position to write to inside the &lt;a href=&quot;tensor-array#classtensorflow_1_1ops_1_1_tensor_array&quot;&gt;TensorArray&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e5885ae4f9840b56eeb58e2f78116b3b4627ce" translate="yes" xml:space="preserve">
          <source>indicates if the noise should &lt;code&gt;uniform&lt;/code&gt;, &lt;code&gt;gaussian&lt;/code&gt;, or &lt;code&gt;zero&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449d070b305fa479321c6f71c1671d8a2f619930" translate="yes" xml:space="preserve">
          <source>indicates if the noise should be generated using a uniform distribution or a Gaussian distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387ba94995e8b2e278e5131022582498b69c6a25" translate="yes" xml:space="preserve">
          <source>indicates if the offset coordinates are centered relative to the image, in which case the (0, 0) offset is relative to the center of the input images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f820d9f656146550ce10c783a836d8bc13eb71" translate="yes" xml:space="preserve">
          <source>indicates if the offset coordinates are normalized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e01512b1e7d3ea5b69d1f71ac90a9451071d646" translate="yes" xml:space="preserve">
          <source>indices</source>
          <target state="translated">indices</target>
        </trans-unit>
        <trans-unit id="20356c3f1393aae668c7092fb89b44ee4c35f532" translate="yes" xml:space="preserve">
          <source>indices = [0, 0; 0, 1; 1, 0; 1, 1; 1, 2] shape = [2, 3] values = ['hello', 'world', 'a', 'b', 'c']</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f62b1ae28b9263d04f6789617cf43df5fcdfa2" translate="yes" xml:space="preserve">
          <source>indices: 2-D tensor represents the indices of the sparse tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9e73c701cec71df56637ac1aff5c81f4cdc98e" translate="yes" xml:space="preserve">
          <source>indices: 2-D. Indices of each input &lt;code&gt;SparseTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1328e58e0a1659a123a7acd3728557226a6fa501" translate="yes" xml:space="preserve">
          <source>indices: 2-D. the indices of the sparse tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96000b2b151c74ec3fd6493dac6ce4db7948a02" translate="yes" xml:space="preserve">
          <source>indices: 2D int64 &lt;code&gt;&lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26b416651afb8ea711ba95d50f32bbbfc785f90" translate="yes" xml:space="preserve">
          <source>indices: A 1-D tensor. Has same rank as &lt;code&gt;segment_ids&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f63cc281017a7542483e5ba178d0d74f341c2a7" translate="yes" xml:space="preserve">
          <source>indices: A &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;. Must be one of the following types: int32, int64. A tensor of indices into ref.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bedc8275ba2d81b93f42817fba9410426805d0e" translate="yes" xml:space="preserve">
          <source>indices: A tensor of indices into the first dimension of &lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="785568e6118985c0848c619951bdfded35e6f8b8" translate="yes" xml:space="preserve">
          <source>indices: A tensor of indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b61ee3898ee4a3d06a43f30f773ca43b0109f75" translate="yes" xml:space="preserve">
          <source>indices: A vector of indices into the first dimension of var and accum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="602a6c48a01c5aab69034205609dd8edbec16fed" translate="yes" xml:space="preserve">
          <source>indices: A vector of indices into the first dimension of var, ms and mom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6459268fca1748978f31760772a4099a8070594" translate="yes" xml:space="preserve">
          <source>indices: Index tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7b679831a51af7670f04e16a36569aa0b57e48" translate="yes" xml:space="preserve">
          <source>indices: Index tensor. Must be in range &lt;code&gt;[0, params.shape[axis])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e38d236f9e445fb918d03f2625c3a7146025462" translate="yes" xml:space="preserve">
          <source>indices: The locations at which to write the tensor elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2edaa9f83ae3e3459954b77d771f02f5b1a90b" translate="yes" xml:space="preserve">
          <source>indices: The locations in the &lt;a href=&quot;tensor-array#classtensorflow_1_1ops_1_1_tensor_array&quot;&gt;TensorArray&lt;/a&gt; from which to read tensor elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd7eb0b3898f4223fe5d7250c5cebaf5e178e1a" translate="yes" xml:space="preserve">
          <source>indices: indices passed to the corresponding &lt;a href=&quot;sparse-segment-mean#classtensorflow_1_1ops_1_1_sparse_segment_mean&quot;&gt;SparseSegmentMean&lt;/a&gt; op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a50edd3c4ae8f25748dd7512f2d4e5313ceca4" translate="yes" xml:space="preserve">
          <source>indices: indices passed to the corresponding &lt;a href=&quot;sparse-segment-sqrt-n#classtensorflow_1_1ops_1_1_sparse_segment_sqrt_n&quot;&gt;SparseSegmentSqrtN&lt;/a&gt; op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469ad142f992a1d68b05e1d09cbd3eb2c292720c" translate="yes" xml:space="preserve">
          <source>init: If True, initialize the returned tensor with the default value of dtype. Otherwise, the implementation is free not to initializethe tensor's content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df38610abe4facd4ff640bd0caee38fc23904fe3" translate="yes" xml:space="preserve">
          <source>init_</source>
          <target state="translated">init_</target>
        </trans-unit>
        <trans-unit id="140f86aae51ab9e1cda9b4254fe98a74eb54c1a1" translate="yes" xml:space="preserve">
          <source>input</source>
          <target state="translated">input</target>
        </trans-unit>
        <trans-unit id="8a9c27c6cf97c088d655310e0e6cfa274d71788e" translate="yes" xml:space="preserve">
          <source>input: 1-D or higher with last dimension at least &lt;code&gt;k&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be723730c5248ad033a623f7088ac4458715630" translate="yes" xml:space="preserve">
          <source>input: 1-D or higher with last dimension at least &lt;code&gt;n+1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd2ae4a0521caef2947a4fc6c2fd7f91ef10743" translate="yes" xml:space="preserve">
          <source>input: 1-D. Strings to split.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda4566630b56b82b27371d104b7d69360f77a83" translate="yes" xml:space="preserve">
          <source>input: 1D or 2D int &lt;code&gt;&lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c2c6106a36582ca868aed00ff6beea9e2192e9" translate="yes" xml:space="preserve">
          <source>input: 4-D input to pool over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0170980623482d1924dc2c2f8a1aae861c7c9301" translate="yes" xml:space="preserve">
          <source>input: 4-D tensor with shape &lt;code&gt;[batch*block_size*block_size, height_pad/block_size, width_pad/block_size, depth]&lt;/code&gt;. Note that the batch size of the input tensor must be divisible by &lt;code&gt;block_size * block_size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c514186cedfe010f21ae31f8f0ecc11a06ed27" translate="yes" xml:space="preserve">
          <source>input: 4-D with shape &lt;code&gt;[batch, height, width, channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d55508a19f49bcc4d54b9a646855523f299ae355" translate="yes" xml:space="preserve">
          <source>input: 4-D with shape &lt;code&gt;[batch, height, width, channels]&lt;/code&gt;. &lt;a href=&quot;../input#classtensorflow_1_1_input&quot;&gt;Input&lt;/a&gt; to pool over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28c0019c51c1593c3fc00604ee3ad0b8d399a9b" translate="yes" xml:space="preserve">
          <source>input: 4-D with shape &lt;code&gt;[batch, in_height, in_width, depth]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a7780a3e0faae7b16310e871805a5f18bbc28e" translate="yes" xml:space="preserve">
          <source>input: 4-D with shape &lt;code&gt;[batch, in_height, in_width, in_channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9291f899a2814062b5760396592820902d7e6a97" translate="yes" xml:space="preserve">
          <source>input: 4-D with shape based on &lt;code&gt;data_format&lt;/code&gt;. For example, if &lt;code&gt;data_format&lt;/code&gt; is 'NHWC' then &lt;code&gt;input&lt;/code&gt; is a 4-D &lt;code&gt;[batch, in_height, in_width, in_channels]&lt;/code&gt; tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ee9e116cb04fae7c27e39904037d11c34e17a3" translate="yes" xml:space="preserve">
          <source>input: 4-D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19da53acf5f75b3dbcf3d292d2391813a4cd4a56" translate="yes" xml:space="preserve">
          <source>input: 5-D &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; with shape &lt;code&gt;[batch, in_planes, in_rows, in_cols, depth]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecbd48212ede38def2be34d4d2c0f87a40309635" translate="yes" xml:space="preserve">
          <source>input: &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; of strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f129d88aa2c42e0b526e86ef115d07a888360904" translate="yes" xml:space="preserve">
          <source>input: &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; to quantize and then dequantize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff0da9057c0fcdecff0c85780065078d681e44d" translate="yes" xml:space="preserve">
          <source>input: &lt;a href=&quot;any#classtensorflow_1_1ops_1_1_any&quot;&gt;Any&lt;/a&gt; shape of &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; contains with int or float type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2727626ae29aa46c5eb440a30a372099a3487e52" translate="yes" xml:space="preserve">
          <source>input: &lt;code&gt;1-D&lt;/code&gt; string &lt;code&gt;&lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;&lt;/code&gt;, the strings to split.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802cba2f4a76d89ab38ba57f3d419548491057a7" translate="yes" xml:space="preserve">
          <source>input: A 4-D float tensor of shape &lt;code&gt;[batch_size, height, width, channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe94c30673a1a5df0a83d18ec7006ba67a813c1d" translate="yes" xml:space="preserve">
          <source>input: A 4-D tensor. The dimension order is interpreted according to the value of &lt;code&gt;data_format&lt;/code&gt;, see below for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a43bb780c37ad3478702a751572cad811601741f" translate="yes" xml:space="preserve">
          <source>input: A &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; of int32 Unicode code points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b882e4e76f0a8f65e746d5b7066bce73ec1515" translate="yes" xml:space="preserve">
          <source>input: A &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; to broadcast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed849e5afe07d519e81c92631bdfd6502f10e056" translate="yes" xml:space="preserve">
          <source>input: A boolean scalar, representing the branch predicate of the &lt;a href=&quot;switch#classtensorflow_1_1ops_1_1_switch&quot;&gt;Switch&lt;/a&gt; op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5040d25a0dd0190c59ee04a363d968e27345121" translate="yes" xml:space="preserve">
          <source>input: A string &lt;code&gt;&lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;&lt;/code&gt; of any shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="172ba8ef3342f3bbc7db452b4aae7f25c43de0dd" translate="yes" xml:space="preserve">
          <source>input: A string tensor of the text to be processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a4ab21f9868ce05250ea09429b9105f5092ba88" translate="yes" xml:space="preserve">
          <source>input: A tensor, whose shape is to be validated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e9a4b782cbf8758c09152e0e098acf3398ad95" translate="yes" xml:space="preserve">
          <source>input: Base64 strings to decode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d91fa80977bdecb408efa824a9d9f4fc3b6a549b" translate="yes" xml:space="preserve">
          <source>input: N-D with shape &lt;code&gt;input_shape = [batch] + spatial_shape + remaining_shape&lt;/code&gt;, where spatial_shape has M dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e2b49484dd5acfdaa7fe2fef67ee4b47ff9b393" translate="yes" xml:space="preserve">
          <source>input: Rank &lt;code&gt;k+1&lt;/code&gt;, where &lt;code&gt;k &amp;gt;= 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8444387795e8f8fecb7c3a074ff71351154fff70" translate="yes" xml:space="preserve">
          <source>input: Rank &lt;code&gt;k&lt;/code&gt; tensor where &lt;code&gt;k &amp;gt;= 2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f56e41aa93b365395a5a8f1e365ac085a47322" translate="yes" xml:space="preserve">
          <source>input: Rank &lt;code&gt;k&lt;/code&gt; tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba79070010289359a7bb400475f10aade7706e7" translate="yes" xml:space="preserve">
          <source>input: Rank &lt;code&gt;r+1&lt;/code&gt;, where &lt;code&gt;r &amp;gt;= 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c133d4517d7d979cbebc22241606b3af5c81d4" translate="yes" xml:space="preserve">
          <source>input: Rank &lt;code&gt;r&lt;/code&gt; tensor where &lt;code&gt;r &amp;gt;= 2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da72cdf20d2b98444e60b65d87e38b0860a38d1e" translate="yes" xml:space="preserve">
          <source>input: Rank k tensor where k is even and not zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f97cdb1b1987a848383b8cecf1bb2c98f6a37e" translate="yes" xml:space="preserve">
          <source>input: Shape &lt;code&gt;[batch, depth, rows, cols, channels]&lt;/code&gt; tensor to pool over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cb41bbcd01a83e16dfc4f7072ba1add80546084" translate="yes" xml:space="preserve">
          <source>input: Shape &lt;code&gt;[batch, depth, rows, cols, in_channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45be633be84a55ef153a06226fd1f9afb972f195" translate="yes" xml:space="preserve">
          <source>input: Shape &lt;code&gt;[batch, in_depth, in_height, in_width, in_channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95fe6509e0a23bfff6dfa42d54c2887534b72b1a" translate="yes" xml:space="preserve">
          <source>input: Strings to be encoded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37d7f9a2f073ec6316674f3be49e07bb5d3d4be" translate="yes" xml:space="preserve">
          <source>input: The 4D (batch x rows x cols x depth) &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; to MaxReduce over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c99f52ff5a35c02f9f00ebd383287bceb912a7" translate="yes" xml:space="preserve">
          <source>input: The default value to produce when &lt;code&gt;output&lt;/code&gt; is not fed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a3d97ec513bdfbc7d8d61b75298fb544ffbd21" translate="yes" xml:space="preserve">
          <source>input: The input tensor to be padded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b153fb3b3021ae3806e0a3c0bf47895feb898706" translate="yes" xml:space="preserve">
          <source>input: The original input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529e9321fe0404e66125ee3a43368ce39f8f2d3d" translate="yes" xml:space="preserve">
          <source>input: The string scalar to print.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e89b932e5490db88c49e9c714e25eee3699818" translate="yes" xml:space="preserve">
          <source>input: The strings for which to compute the length for each element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f9d0f07b9912a2fc3332e1354a916a34217a2a" translate="yes" xml:space="preserve">
          <source>input: The strings to assign a hash bucket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36698994c28ee67efe2a1ea499a62dfd1ac523f3" translate="yes" xml:space="preserve">
          <source>input: The tensor passed to &lt;code&gt;output&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c72f6d9e08c32a64d024e1503fab22dbf07a7bd1" translate="yes" xml:space="preserve">
          <source>input: The tensor to reduce.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c88efdef109301c8ee64335039440b5e83fe18f" translate="yes" xml:space="preserve">
          <source>input: The text to be processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ec2399aa8e03f6264725c112cba8f9a816a443" translate="yes" xml:space="preserve">
          <source>input: The text to be processed. Can have any shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb136c371c49aa85beaafb0a5c863492d7c47bb0" translate="yes" xml:space="preserve">
          <source>input: Values to compare against &lt;code&gt;threshold&lt;/code&gt; and bitpack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bed1024eef39034bdc87477ce0ff17663906d21" translate="yes" xml:space="preserve">
          <source>input: any tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b491c53739e05996157d2c6e3b7ef24e34001828" translate="yes" xml:space="preserve">
          <source>input_bytes: &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; of string to be decoded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caab4210438cedf58c8e5b11051ffe2be7d17104" translate="yes" xml:space="preserve">
          <source>input_encoding: Text encoding of the input strings. This is any of the encodings supported by ICU ucnv algorithmic converters. Examples: &lt;code&gt;&quot;UTF-16&quot;, &quot;US ASCII&quot;, &quot;UTF-8&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5260d440dd2ff9bec285edc22b44365d876eae7c" translate="yes" xml:space="preserve">
          <source>input_indices: 2-D. &lt;code&gt;N x R&lt;/code&gt; matrix with the indices of non-empty values in a SparseTensor, possibly not in canonical ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db27cdc14c5be3e321ba9e9b8c607cddbe8e3160" translate="yes" xml:space="preserve">
          <source>input_indices: 2-D. &lt;code&gt;N x R_in&lt;/code&gt; matrix with the indices of non-empty values in a SparseTensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e72778312f907ce6032e1b70e67762263fc83f1" translate="yes" xml:space="preserve">
          <source>input_indices: 2-D. The &lt;code&gt;indices&lt;/code&gt; of the input &lt;code&gt;SparseTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44e91ac88c7124760801cd67258e332fb1c55cc" translate="yes" xml:space="preserve">
          <source>input_max: If &lt;code&gt;range_given == True&lt;/code&gt;, this specifies the maximum input value that needs to be represented, otherwise it is determined from the max value of the &lt;code&gt;input&lt;/code&gt; tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a60d00d79bd9a15a0d3b76a8a668cdafe32bbc" translate="yes" xml:space="preserve">
          <source>input_max: The float value that the maximum quantized input value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216b5e869c109dac7d9b3108a220b4631d36e152" translate="yes" xml:space="preserve">
          <source>input_maxes: The maximum scalar values for each of the input tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e6f8961c7faa1568763867c431718abe57d523" translate="yes" xml:space="preserve">
          <source>input_min: If &lt;code&gt;range_given == True&lt;/code&gt;, this specifies the minimum input value that needs to be represented, otherwise it is determined from the min value of the &lt;code&gt;input&lt;/code&gt; tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2e1e8b845b7171c6c796c0a9a04d276f11a4ad" translate="yes" xml:space="preserve">
          <source>input_min: The float value that the minimum quantized input value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17fad17ae935d405711dbb356da51ae6c3806cdd" translate="yes" xml:space="preserve">
          <source>input_mins: The minimum scalar values for each of the input tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6636d976b19900c17bca1fac423d73e4d6eb288" translate="yes" xml:space="preserve">
          <source>input_row_length : the number of rows from the input set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ac80b7e96dd239b534f9e237d2448b7c8033f5" translate="yes" xml:space="preserve">
          <source>input_shape: 1-D. &lt;code&gt;R_in&lt;/code&gt; vector with the input SparseTensor's dense shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a33e60a2543dd95371ad73c330585a59595cd98" translate="yes" xml:space="preserve">
          <source>input_shape: 1-D. Shape of the input SparseTensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe7018fbbf7dadcd0625441dfa55a4f0c030fc13" translate="yes" xml:space="preserve">
          <source>input_sizes: An integer vector representing the shape of &lt;code&gt;input&lt;/code&gt;, based on &lt;code&gt;data_format&lt;/code&gt;. For example, if &lt;code&gt;data_format&lt;/code&gt; is 'NHWC' then &lt;code&gt;input&lt;/code&gt; is a 4-D &lt;code&gt;[batch, height, width, channels]&lt;/code&gt; tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d14906a5326eabeafcf2edb86d31790328689a" translate="yes" xml:space="preserve">
          <source>input_sizes: An integer vector representing the shape of &lt;code&gt;input&lt;/code&gt;, where &lt;code&gt;input&lt;/code&gt; is a 4-D &lt;code&gt;[batch, height, width, channels]&lt;/code&gt; tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a511a48242799dd2222beb18b8bba0c25f7a27c" translate="yes" xml:space="preserve">
          <source>input_sizes: An integer vector representing the tensor shape of &lt;code&gt;input&lt;/code&gt;, where &lt;code&gt;input&lt;/code&gt; is a 5-D &lt;code&gt;[batch, depth, rows, cols, in_channels]&lt;/code&gt; tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cafbfec9a81cda58e68c8177a418933e8e1cd2df" translate="yes" xml:space="preserve">
          <source>input_start: 1-D. tensor represents the start of the slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f670a2d91dfd1d65328d6489f3a2d397797f23c0" translate="yes" xml:space="preserve">
          <source>input_type</source>
          <target state="translated">input_type</target>
        </trans-unit>
        <trans-unit id="9caf6232cb87815d9a322042ea75ed4a715f8b04" translate="yes" xml:space="preserve">
          <source>input_values: 1-D. &lt;code&gt;N&lt;/code&gt; non-empty values corresponding to &lt;code&gt;input_indices&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7850b8cfc5c8b028fda5d97a6d2382c90b8469b0" translate="yes" xml:space="preserve">
          <source>inputs: A list of &lt;code&gt;&lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;&lt;/code&gt; objects, each with same shape and type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19e0a8bd77e930d1aa0640c7dac01bfda6759c0" translate="yes" xml:space="preserve">
          <source>inputs: A list of ref tensors, one of which will be forwarded to &lt;code&gt;output&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04369bf612cff77d8267893078e07b0f4b3ad2b3" translate="yes" xml:space="preserve">
          <source>inputs: A list of string tensors. The tensors must all have the same shape, or be scalars. Scalars may be mixed in; these will be broadcast to the shape of non-scalar inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b889a7fe0392f20f88cf9a208e9a1fd08509cb18" translate="yes" xml:space="preserve">
          <source>inputs: Can be of any shape. Each must contain serialized &lt;code&gt;Summary&lt;/code&gt; protocol buffers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154828061eb77f33241cea408ca7bf9404a2149d" translate="yes" xml:space="preserve">
          <source>inputs: The input tensors, exactly one of which will become available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a9066e103d6b95bdbad73b1540204fb8f85964c" translate="yes" xml:space="preserve">
          <source>inputs: The input to be joined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1b0703f9af1eb93cc56edf68c30d3d567bd3cd" translate="yes" xml:space="preserve">
          <source>inputs: The input to be joined. &lt;a href=&quot;all#classtensorflow_1_1ops_1_1_all&quot;&gt;All&lt;/a&gt; reduced indices must have non-zero size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e71d069a83c8f3f35f88d69113ffa002411c945" translate="yes" xml:space="preserve">
          <source>inputs: The list of tensors to format into the placeholder string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b91e9565883670bff67d0d3131a3f11297ba904" translate="yes" xml:space="preserve">
          <source>inputs: Values passed as inputs to the &lt;a href=&quot;fake-quant-with-min-max-args#classtensorflow_1_1ops_1_1_fake_quant_with_min_max_args&quot;&gt;FakeQuantWithMinMaxArgs&lt;/a&gt; operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0663eb55949c81d6474abce7113811de6f4c7d3" translate="yes" xml:space="preserve">
          <source>inputs: Values passed as inputs to the &lt;a href=&quot;fake-quant-with-min-max-vars#classtensorflow_1_1ops_1_1_fake_quant_with_min_max_vars&quot;&gt;FakeQuantWithMinMaxVars&lt;/a&gt; operation, shape same as &lt;code&gt;gradients&lt;/code&gt;. min, max: Quantization interval, floats of shape &lt;code&gt;[d]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4cc4c4b09989e6a9adb9c3061b91f363c5f1219" translate="yes" xml:space="preserve">
          <source>inputs: Values passed as inputs to the &lt;a href=&quot;fake-quant-with-min-max-vars#classtensorflow_1_1ops_1_1_fake_quant_with_min_max_vars&quot;&gt;FakeQuantWithMinMaxVars&lt;/a&gt; operation. min, max: Quantization interval, scalar floats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea8caac61cdf37f24359987c8bde6987e1149b8" translate="yes" xml:space="preserve">
          <source>io_ops</source>
          <target state="translated">io_ops</target>
        </trans-unit>
        <trans-unit id="2ee9cfd4c2321efe96b52441ad4b2da74a4f7d71" translate="yes" xml:space="preserve">
          <source>iou_threshold: A 0-D float tensor representing the threshold for deciding whether boxes overlap too much with respect to IOU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1034da781bfd6919fef9ebef27d96cc8c56e83" translate="yes" xml:space="preserve">
          <source>iou_threshold: A float representing the threshold for deciding whether boxes overlap too much with respect to IOU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7e2f6e1090c9062a205f5cd488dedc16eb47b3" translate="yes" xml:space="preserve">
          <source>iou_threshold_</source>
          <target state="translated">iou_threshold_</target>
        </trans-unit>
        <trans-unit id="b3de42899f26a5b14a57d455335fa20d1a713d33" translate="yes" xml:space="preserve">
          <source>is safely destructible and can be assigned to, but other calls on it (e.g. shape manipulation) are not valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1413b7772dcdc7b07c30a67875c13621b6e19a4f" translate="yes" xml:space="preserve">
          <source>is the imaginary part returned by this operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7c13f327c78fd3a33d0b4e0f7be143b12a8c05" translate="yes" xml:space="preserve">
          <source>is the imaginary part.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f18368614a77ef4bb74fd1419ed387eafad7c8" translate="yes" xml:space="preserve">
          <source>is the incomplete beta function and \(B(a, b)\) is the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6ec29819896c7154ba310ecfb294ffe6dd6d28" translate="yes" xml:space="preserve">
          <source>is the lower incomplete Gamma function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b6e421f809ee89c6cd1b774ca33cf50c2db514a" translate="yes" xml:space="preserve">
          <source>is the real part and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43ae7634d8c663fc825450fd6434de2d90d98ca0" translate="yes" xml:space="preserve">
          <source>is the real part returned by this operation and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142410405cb1c972e9f58af8472ded75d6af685d" translate="yes" xml:space="preserve">
          <source>is the upper incomplete Gama function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73ef316b7096168f6427c2ddd610e3f54eb66cb" translate="yes" xml:space="preserve">
          <source>is_closed</source>
          <target state="translated">is_closed</target>
        </trans-unit>
        <trans-unit id="e310749567c1b7314fa3da5cf87424caeeed481b" translate="yes" xml:space="preserve">
          <source>is_initialized</source>
          <target state="translated">is_initialized</target>
        </trans-unit>
        <trans-unit id="bfb3bc22560d51080d1f110775f9f519a342b11f" translate="yes" xml:space="preserve">
          <source>is_training: A bool value to indicate the operation is for training (default) or inference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2840c2ac1cd148764bb2e67d328b5dfa32b4e01" translate="yes" xml:space="preserve">
          <source>is_training_</source>
          <target state="translated">is_training_</target>
        </trans-unit>
        <trans-unit id="73b3c51fc090bc0542ca4939b6922e772ab03c49" translate="yes" xml:space="preserve">
          <source>json_examples: Each string is a JSON object serialized according to the JSON mapping of the Example proto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c639800edb693a065c57a21709d63494947b82a" translate="yes" xml:space="preserve">
          <source>k: 0-D. Number of top elements to look for along the last dimension (along each row for matrices).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca34f5337565bd063cfd9a29b891864b0a6ebd75" translate="yes" xml:space="preserve">
          <source>k: Diagonal offset(s). Positive value means superdiagonal, 0 refers to the main diagonal, and negative value means subdiagonals. &lt;code&gt;k&lt;/code&gt; can be a single integer (for a single diagonal) or a pair of integers specifying the low and high ends of a matrix band. &lt;code&gt;k[0]&lt;/code&gt; must not be larger than &lt;code&gt;k[1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5d29bece2135945af9a3ecb6856676a48cbe051" translate="yes" xml:space="preserve">
          <source>k: Number of top elements to look at for computing precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc153b4f7dd9af74a5176766e31c35e1e8614470" translate="yes" xml:space="preserve">
          <source>keep_dims: If &lt;code&gt;True&lt;/code&gt;, retain reduced dimensions with length &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd767ce19a0d385f91f60acbb4c4d2b41bf8c33" translate="yes" xml:space="preserve">
          <source>keep_dims: If true, retain reduced dimensions with length 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa1421328ca3f82bacb949333beb232c75f272a" translate="yes" xml:space="preserve">
          <source>keep_dims_</source>
          <target state="translated">keep_dims_</target>
        </trans-unit>
        <trans-unit id="d3de343266d0ea52abb59a4adbd8a006f01a4627" translate="yes" xml:space="preserve">
          <source>kernel_type_</source>
          <target state="translated">kernel_type_</target>
        </trans-unit>
        <trans-unit id="a62f2225bf70bfaccbc7f1ef2a397836717377de" translate="yes" xml:space="preserve">
          <source>key</source>
          <target state="translated">key</target>
        </trans-unit>
        <trans-unit id="97ede5b354ee4a1c5164e60fe2d53bb97c2244f6" translate="yes" xml:space="preserve">
          <source>key from the underlying container. If the underlying container does not contain elements, the op will block until it does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f3e3ac27561077c44aabafb2836e24961aedff" translate="yes" xml:space="preserve">
          <source>key: The key used to seed the hash function, passed as a list of two uint64 elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b799216214353677eb703756a168e413af1b6ac" translate="yes" xml:space="preserve">
          <source>key: int64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5944ae25418ceabcf285dca1d721b77888dac89b" translate="yes" xml:space="preserve">
          <source>keys</source>
          <target state="translated">keys</target>
        </trans-unit>
        <trans-unit id="495e2eeeea52ca633f0ce1f5713934572bfa1180" translate="yes" xml:space="preserve">
          <source>keys: A one-dimensional tensor of keys, with length n.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf38892529eb02b96031eef706fdfa7c2e7a178" translate="yes" xml:space="preserve">
          <source>ksize: 1-D tensor of length 5. The size of the window for each dimension of the input tensor. Must have &lt;code&gt;ksize[0] = ksize[4] = 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e70a7b5585246c36161378d5960d210e79af88" translate="yes" xml:space="preserve">
          <source>ksize: The size of the sliding window for each dimension of &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2221f201993ae40b19d21ee79a9b18dbc4ce08" translate="yes" xml:space="preserve">
          <source>ksize: The size of the window for each dimension of the input tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="328e90e06cda7503080c2a63d5a2f00da5acdd34" translate="yes" xml:space="preserve">
          <source>ksize: The size of the window for each dimension of the input tensor. The length must be 4 to match the number of dimensions of the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ca45e0de98ec6da31e56e91c192b6a50612ff2" translate="yes" xml:space="preserve">
          <source>ksizes: The size of the sliding window for each dimension of &lt;code&gt;images&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d163538b643b2436caa72505fa868579e246677" translate="yes" xml:space="preserve">
          <source>ksizes: The size of the sliding window for each dimension of &lt;code&gt;input&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97e9a11f6fc4ce1235dcb9bee9aaa071df68c97b" translate="yes" xml:space="preserve">
          <source>l1: L1 regularization. Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d42d37085215f65f30da3ad3d07ef9a33bd90e" translate="yes" xml:space="preserve">
          <source>l2: L2 regularization. Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5167ae73cec06c4846543f360ea4a85610ea4fdf" translate="yes" xml:space="preserve">
          <source>l2: L2 shrinkage regularization. Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6088dd414eb0f384385435fc646e3727e4a362" translate="yes" xml:space="preserve">
          <source>labels: An unused list of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0885946561f7055283f017e69a9d165002fea2f5" translate="yes" xml:space="preserve">
          <source>labels: batch_size vector with values in [0, num_classes). This is the label for the given minibatch entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a02b82206b3c4456cd1469f316a4ebd0687ef4c" translate="yes" xml:space="preserve">
          <source>labels: batch_size x num_classes matrix The caller must ensure that each batch of labels represents a valid probability distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665528191a930123eab742ad19be42a74b78887c" translate="yes" xml:space="preserve">
          <source>labels_</source>
          <target state="translated">labels_</target>
        </trans-unit>
        <trans-unit id="213ed3ea453bf610688ff8041e0a3b7b6abb5e6e" translate="yes" xml:space="preserve">
          <source>last</source>
          <target state="translated">last</target>
        </trans-unit>
        <trans-unit id="22ee8d192875c13da641e0232c78d0ecae483774" translate="yes" xml:space="preserve">
          <source>left_pad: The string to use to pad the left side of the ngram sequence. Only used if pad_width != 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a2fa254c203ec9fcdcef9af04ff00d66d27c341" translate="yes" xml:space="preserve">
          <source>len: Scalar defining the number of characters to include in each substring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="162fcf77aa289dc1be6b089b206972465dbb0e6c" translate="yes" xml:space="preserve">
          <source>length(row_pooling_sequence) = output_row_length+1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edcd9cb247f1267f5fd9056218fa532b4b3be10b" translate="yes" xml:space="preserve">
          <source>lengths</source>
          <target state="translated">lengths</target>
        </trans-unit>
        <trans-unit id="10147e06f91d0f9819654a851f5b388b874f8bb9" translate="yes" xml:space="preserve">
          <source>lengths: The vector of lengths, how to split the rows of value into the &lt;a href=&quot;tensor-array#classtensorflow_1_1ops_1_1_tensor_array&quot;&gt;TensorArray&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a8bbda5d007cb2071ce578ed89935d2fc42f40" translate="yes" xml:space="preserve">
          <source>limit: 0-D (scalar). Upper limit of sequence, exclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f61f89d7fd9a11fabbe32641e776c17267fe9e" translate="yes" xml:space="preserve">
          <source>limit: If incrementing ref would bring it above limit, instead generates an 'OutOfRange' error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb9d74d10af08e2968257c306fc0189f698eefb" translate="yes" xml:space="preserve">
          <source>linear: Should be from a Variable().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="717ff399cc4eb245d77ecfe77fcd3b4579f5d85a" translate="yes" xml:space="preserve">
          <source>little_endian: Whether the input &lt;code&gt;bytes&lt;/code&gt; are in little-endian order. Ignored for &lt;code&gt;out_type&lt;/code&gt; values that are stored in a single byte like &lt;code&gt;uint8&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fc901a1009f249e17d38d1fd3bde9302ef5d05" translate="yes" xml:space="preserve">
          <source>little_endian: Whether the input &lt;code&gt;input_bytes&lt;/code&gt; is in little-endian order. Ignored for &lt;code&gt;out_type&lt;/code&gt; values that are stored in a single byte, like &lt;code&gt;uint8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd41ecda62f246ac557b6575c985734380cca1a4" translate="yes" xml:space="preserve">
          <source>little_endian_</source>
          <target state="translated">little_endian_</target>
        </trans-unit>
        <trans-unit id="ea5ca829880bf830d3474e384746ce1e3a6b774d" translate="yes" xml:space="preserve">
          <source>local_step: The local_step value at which the gradient was computed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a38d49eb27ce25281b8879ba06e8cdecec4f3b" translate="yes" xml:space="preserve">
          <source>local_step: The local_step value at which the sparse gradient was computed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436a7c06edac17f7e40972142c6ea74a1ee85ad0" translate="yes" xml:space="preserve">
          <source>logbase: Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e7ac684ebb4aaae10230e4836678d0612556ba" translate="yes" xml:space="preserve">
          <source>logging_ops</source>
          <target state="translated">logging_ops</target>
        </trans-unit>
        <trans-unit id="3803009f36937602ccd4ec45a3a31e928af75a0d" translate="yes" xml:space="preserve">
          <source>logits: 2-D &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; with shape &lt;code&gt;[batch_size, num_classes]&lt;/code&gt;. Each slice &lt;code&gt;[i, :]&lt;/code&gt; represents the unnormalized log probabilities for all classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862e5aef827794d979a6edfb03c6c0a27dbc20c7" translate="yes" xml:space="preserve">
          <source>logits: 2-D with shape &lt;code&gt;[batch_size, num_classes]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2673594ddea3a4e93dbe5e928f7408a711b3407" translate="yes" xml:space="preserve">
          <source>logsoftmax</source>
          <target state="translated">logsoftmax</target>
        </trans-unit>
        <trans-unit id="c9279f09f8296b9eb2f62ca1b4a71c5c5f330b0a" translate="yes" xml:space="preserve">
          <source>loss</source>
          <target state="translated">loss</target>
        </trans-unit>
        <trans-unit id="d8b7913c87080c848b8b7f51aadee30fe62f25e8" translate="yes" xml:space="preserve">
          <source>lr: Learning rate. Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b59bdb0984a3d1e9d92532244a56b2f233657c8" translate="yes" xml:space="preserve">
          <source>lr: Scaling factor. Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763d94763c4c973c712fb5aef59abce264f09f0b" translate="yes" xml:space="preserve">
          <source>lr_power: Scaling factor. Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4eba7f459fd4e084d60ddf39b31e59919f460ef" translate="yes" xml:space="preserve">
          <source>m: A 1D mean &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; with size matching the last dimension of t. This is the first output from tf.nn.moments, or a saved moving average thereof.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afa73b7561165885c4580f2c3979e08e18e8b279" translate="yes" xml:space="preserve">
          <source>m: Should be from a Variable().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029c569fe38aa5aaaa66a7c5ae266606273613dc" translate="yes" xml:space="preserve">
          <source>m_max: The value represented by the highest quantized mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14854dcc3525f9bb303d618958eb11cdf27f2f0" translate="yes" xml:space="preserve">
          <source>m_min: The value represented by the lowest quantized mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925d5a588456a95fce5394d3375fecfb0f62ba08" translate="yes" xml:space="preserve">
          <source>m_t</source>
          <target state="translated">m_t</target>
        </trans-unit>
        <trans-unit id="ce6b24394ea2de2191331c2d1e7828ce9d9d5015" translate="yes" xml:space="preserve">
          <source>math_ops</source>
          <target state="translated">math_ops</target>
        </trans-unit>
        <trans-unit id="bf2f749e80c970f50552e9d5f3e8434e78b88d35" translate="yes" xml:space="preserve">
          <source>matrix</source>
          <target state="translated">matrix</target>
        </trans-unit>
        <trans-unit id="5926673f535580782cae1147ce3ce8fb07c2c1d0" translate="yes" xml:space="preserve">
          <source>max_</source>
          <target state="translated">max_</target>
        </trans-unit>
        <trans-unit id="36a07177da4aef42c1526547b0d7e334aa967514" translate="yes" xml:space="preserve">
          <source>max_a: The float value that the highest quantized &lt;code&gt;a&lt;/code&gt; value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef3c169998d8166faf7d437feec83b62d6b7d6f8" translate="yes" xml:space="preserve">
          <source>max_activations</source>
          <target state="translated">max_activations</target>
        </trans-unit>
        <trans-unit id="b7d2cacf7e1ab479cc6c3cd5e173555e74188652" translate="yes" xml:space="preserve">
          <source>max_attempts: Number of attempts at generating a cropped region of the image of the specified constraints. After &lt;code&gt;max_attempts&lt;/code&gt; failures, return the entire image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7731de982ccb6e3b4502f71bd01a35e075d8d7e3" translate="yes" xml:space="preserve">
          <source>max_attempts_</source>
          <target state="translated">max_attempts_</target>
        </trans-unit>
        <trans-unit id="353fc85a2f65e366e33dd56f2b757e59ba15cf07" translate="yes" xml:space="preserve">
          <source>max_b: The float value that the highest quantized &lt;code&gt;b&lt;/code&gt; value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a4b37b213fe37a40a4a4b693d4b1071615b84c7" translate="yes" xml:space="preserve">
          <source>max_bias: The float value that the highest quantized bias value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12361afca504d99f60efe1c66b7de391009044c1" translate="yes" xml:space="preserve">
          <source>max_features: The float value that the highest quantized value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="464aa05e4b29b21bd7c2924d8571ee7fcfacc53e" translate="yes" xml:space="preserve">
          <source>max_filter: The float value that the highest quantized filter value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e5b6bbfb27fe62b45b729f7ba9cc14372180b7" translate="yes" xml:space="preserve">
          <source>max_images_</source>
          <target state="translated">max_images_</target>
        </trans-unit>
        <trans-unit id="ed23f98132fd85b4ec409bbb6ead57e199305486" translate="yes" xml:space="preserve">
          <source>max_input: The float value that the highest quantized input value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e743ab46052b66e82f802673a530450d3d6e01aa" translate="yes" xml:space="preserve">
          <source>max_out</source>
          <target state="translated">max_out</target>
        </trans-unit>
        <trans-unit id="eca8b7625ab1665f0fbbf43d76e67003d26d0c1e" translate="yes" xml:space="preserve">
          <source>max_output</source>
          <target state="translated">max_output</target>
        </trans-unit>
        <trans-unit id="0c1fb0304d69b9465ce77d8ea35a6d5190c1cf93" translate="yes" xml:space="preserve">
          <source>max_output_size: A scalar integer tensor representing the maximum number of boxes to be selected by non max suppression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6d9ef79bc7a718050727a686409eaed9084d8a" translate="yes" xml:space="preserve">
          <source>max_output_size_per_class: A scalar integer tensor representing the maximum number of boxes to be selected by non max suppression per class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a18e55f9fdc9e8620dc8d565f154c16361ab1fd" translate="yes" xml:space="preserve">
          <source>max_outputs_</source>
          <target state="translated">max_outputs_</target>
        </trans-unit>
        <trans-unit id="cd6c88a0023fa852d373b9e0c9522511859af4b2" translate="yes" xml:space="preserve">
          <source>max_range: The maximum scalar value possibly produced for the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8fb758fb28b0ae47ac1a2a0f9a483c42ce7ce1" translate="yes" xml:space="preserve">
          <source>max_range: The maximum value of the quantization range. This value may be adjusted by the op depending on other parameters. The adjusted value is written to &lt;code&gt;output_max&lt;/code&gt;. If the &lt;code&gt;axis&lt;/code&gt; attribute is specified, this must be a 1-D tensor whose size matches the &lt;code&gt;axis&lt;/code&gt; dimension of the input and output tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200df8382090efd8287453f614ef4c6db888343f" translate="yes" xml:space="preserve">
          <source>max_total_size: A scalar representing maximum number of boxes retained over all classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be25a6301daa691a914752a0e4d0ee625daec352" translate="yes" xml:space="preserve">
          <source>max_x: The float value that the highest quantized &lt;code&gt;x&lt;/code&gt; value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3eacfc3d800a684327f7fa58ddd2c964f59b641" translate="yes" xml:space="preserve">
          <source>max_y: The float value that the highest quantized &lt;code&gt;y&lt;/code&gt; value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa56c55fd5733bca49c15850f0a40ba50e8c11d" translate="yes" xml:space="preserve">
          <source>max_z</source>
          <target state="translated">max_z</target>
        </trans-unit>
        <trans-unit id="1f246ed9164e3a1abcac9a1a4ea1054b89c59d78" translate="yes" xml:space="preserve">
          <source>maxsplit: An &lt;code&gt;int&lt;/code&gt;. If &lt;code&gt;maxsplit &amp;gt; 0&lt;/code&gt;, limit of the split of the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2f02f5740dce80b2782e01775159dbd674a377" translate="yes" xml:space="preserve">
          <source>maxsplit_</source>
          <target state="translated">maxsplit_</target>
        </trans-unit>
        <trans-unit id="f499ef228c6a2334623508018d4129c56c56226c" translate="yes" xml:space="preserve">
          <source>maxval: 0-D. Exclusive upper bound on the generated integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceab04ec25ac9ddb00aae4ae53a5b13139e31dbf" translate="yes" xml:space="preserve">
          <source>maxvals: The maximum cutoff. May be +infinity, and must be more than the minval for each batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd992945f637efd2cb0d62868720f05272e54176" translate="yes" xml:space="preserve">
          <source>mean: A 1D &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; for population mean. Used for inference only; must be empty for training.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd23654ef9778af82d4ad788acd41cc9c12ed956" translate="yes" xml:space="preserve">
          <source>mean_square = decay * mean_square + (1-decay) * gradient ** 2 Delta = learning_rate * gradient / sqrt(mean_square + epsilon)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d17283f13497ba07d46ef42402b4ae8be7242eb7" translate="yes" xml:space="preserve">
          <source>mean_square = decay * mean_square + (1-decay) * gradient ** 2 mean_grad = decay * mean_grad + (1-decay) * gradient</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f189ed59f005d8808f37b207d8eb67f3b6b46c2c" translate="yes" xml:space="preserve">
          <source>mean_square = decay * mean_square + (1-decay) * gradient ** 2 mean_grad = decay * mean_grad + (1-decay) * gradient Delta = learning_rate * gradient / sqrt(mean_square + epsilon - mean_grad ** 2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ba27b71dae32da43adb6562e2a82f385575753" translate="yes" xml:space="preserve">
          <source>means: The mean parameter of each batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4daabd1c404d39447d9af7a6f7159b62e132e4a" translate="yes" xml:space="preserve">
          <source>memory_limit: The maximum number of bytes allowed for Tensors in the Staging Area. If &amp;gt; 0, inserts will block until sufficient space is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ce4c922f33e14c69207d2f03dc008c8d89dd11" translate="yes" xml:space="preserve">
          <source>memory_limit_</source>
          <target state="translated">memory_limit_</target>
        </trans-unit>
        <trans-unit id="c940c8a2749e4329276a20eb2333574aaa51f945" translate="yes" xml:space="preserve">
          <source>memory_region_name: Name of readonly memory region used by the tensor, see NewReadOnlyMemoryRegionFromFile in tensorflow::Env.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e2ace14fcedce073756444255d2cfe24f470af" translate="yes" xml:space="preserve">
          <source>merged</source>
          <target state="translated">merged</target>
        </trans-unit>
        <trans-unit id="7e3f648dcedcf1aae56c41e0d7a6c79aedaab85d" translate="yes" xml:space="preserve">
          <source>message: A string, prefix of the error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb376e53961d1f55a070c89004efb16069a5800" translate="yes" xml:space="preserve">
          <source>message: Prefix of the error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732efce90aa5e8bbf36f04925d591a96a97cde75" translate="yes" xml:space="preserve">
          <source>message: Will be printed in the error when anyone tries to differentiate this operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1da63c49f96fd74b45d72f0e370b94a39b5196a" translate="yes" xml:space="preserve">
          <source>message_</source>
          <target state="translated">message_</target>
        </trans-unit>
        <trans-unit id="2c0631bcf8ca51a30553c20d2191443e364ee0f1" translate="yes" xml:space="preserve">
          <source>method: &lt;a href=&quot;fingerprint#classtensorflow_1_1ops_1_1_fingerprint&quot;&gt;Fingerprint&lt;/a&gt; method used by this op. Currently available method is &lt;code&gt;farmhash::fingerprint64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1f884530aacf02e54c8c683e6c3e12b532e48f" translate="yes" xml:space="preserve">
          <source>method: A string specifying the interpolation method. Only 'bilinear' is supported for now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d9421e82f45a8ff5b38e74c6a0770512550249" translate="yes" xml:space="preserve">
          <source>method: A string specifying the sampling method for resizing. It can be either &lt;code&gt;&quot;bilinear&quot;&lt;/code&gt; or &lt;code&gt;&quot;nearest&quot;&lt;/code&gt; and default to &lt;code&gt;&quot;bilinear&quot;&lt;/code&gt;. Currently two sampling methods are supported: Bilinear and Nearest Neighbor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4155479a323fa0bbd352e3a18be2e42133e06cb" translate="yes" xml:space="preserve">
          <source>method_</source>
          <target state="translated">method_</target>
        </trans-unit>
        <trans-unit id="191be3715bae070c2198402843567588417de697" translate="yes" xml:space="preserve">
          <source>mg</source>
          <target state="translated">mg</target>
        </trans-unit>
        <trans-unit id="2ce160080ecc7e0218738887927c7017c956b0d9" translate="yes" xml:space="preserve">
          <source>mg: Should be from a Variable().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae094f9ec8899ce5a3f5ac489b09ed52508791e4" translate="yes" xml:space="preserve">
          <source>min_</source>
          <target state="translated">min_</target>
        </trans-unit>
        <trans-unit id="90074f1d175e35fe9000429ea67b13d47def7f92" translate="yes" xml:space="preserve">
          <source>min_a: The float value that the lowest quantized &lt;code&gt;a&lt;/code&gt; value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d0bdaf1cd221a022986a312567b062e16e56cf" translate="yes" xml:space="preserve">
          <source>min_activations</source>
          <target state="translated">min_activations</target>
        </trans-unit>
        <trans-unit id="b05d3f09fa96165b288cf6faee9e501f87195849" translate="yes" xml:space="preserve">
          <source>min_after_dequeue: Dequeue will block unless there would be this many elements after the dequeue or the queue is closed. This ensures a minimum level of mixing of elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a34f478595d739623fa9808d3d4006f207c788a" translate="yes" xml:space="preserve">
          <source>min_after_dequeue_</source>
          <target state="translated">min_after_dequeue_</target>
        </trans-unit>
        <trans-unit id="c2b0a7522b5b5eecb6d811082c74f9ea195239d8" translate="yes" xml:space="preserve">
          <source>min_b: The float value that the lowest quantized &lt;code&gt;b&lt;/code&gt; value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac459ea0881c5c639261cb67b8a7cf9dcfdb7416" translate="yes" xml:space="preserve">
          <source>min_bias: The float value that the lowest quantized bias value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5bd38bfc45ec1e3b24704d234fa8364f711622" translate="yes" xml:space="preserve">
          <source>min_features: The float value that the lowest quantized value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f696e9c90272e74f1c03fe665cdd0c228153c48" translate="yes" xml:space="preserve">
          <source>min_filter: The float value that the lowest quantized filter value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8c8c11c072199b3029512aa370f80e47a3a8f0" translate="yes" xml:space="preserve">
          <source>min_input: The float value that the lowest quantized input value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32dc9c4baeb82f77bd723b23bb9d1d4f8df0f58d" translate="yes" xml:space="preserve">
          <source>min_object_covered: The cropped area of the image must contain at least this fraction of any bounding box supplied. The value of this parameter should be non-negative. In the case of 0, the cropped area does not need to overlap any of the bounding boxes supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b272d98a13fa4cc873121dc5ff419f78e3d88e3" translate="yes" xml:space="preserve">
          <source>min_object_covered_</source>
          <target state="translated">min_object_covered_</target>
        </trans-unit>
        <trans-unit id="ec84ecba844e6a8778dee4addf746284134391a9" translate="yes" xml:space="preserve">
          <source>min_out</source>
          <target state="translated">min_out</target>
        </trans-unit>
        <trans-unit id="272623cd8d002224a80500933165d8969ced9e6f" translate="yes" xml:space="preserve">
          <source>min_output</source>
          <target state="translated">min_output</target>
        </trans-unit>
        <trans-unit id="1e094f8dc9aaf175b4db98beb5eb00f3bf32fee4" translate="yes" xml:space="preserve">
          <source>min_range: The minimum scalar value possibly produced for the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefb81b56b6ee5a1c9ea8115852aaf9d0045e71e" translate="yes" xml:space="preserve">
          <source>min_range: The minimum value of the quantization range. This value may be adjusted by the op depending on other parameters. The adjusted value is written to &lt;code&gt;output_min&lt;/code&gt;. If the &lt;code&gt;axis&lt;/code&gt; attribute is specified, this must be a 1-D tensor whose size matches the &lt;code&gt;axis&lt;/code&gt; dimension of the input and output tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e38fb0f32aa6c6ea91c813849d616210fafe2285" translate="yes" xml:space="preserve">
          <source>min_separation: &lt;a href=&quot;minimum#classtensorflow_1_1ops_1_1_minimum&quot;&gt;Minimum&lt;/a&gt; value of &lt;code&gt;y_max - y_min&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d631f401e3c94b26a29b225914002b98085591" translate="yes" xml:space="preserve">
          <source>min_separation_</source>
          <target state="translated">min_separation_</target>
        </trans-unit>
        <trans-unit id="4be1e038042d1a2d1835fe9a9751f47255f2274a" translate="yes" xml:space="preserve">
          <source>min_x: The float value that the lowest quantized &lt;code&gt;x&lt;/code&gt; value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05ec5157b38150eebd08e230ee498dcdbc37f4b" translate="yes" xml:space="preserve">
          <source>min_y: The float value that the lowest quantized &lt;code&gt;y&lt;/code&gt; value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc00da8301dc695f4445d31a2c2a273d8b56777" translate="yes" xml:space="preserve">
          <source>min_z</source>
          <target state="translated">min_z</target>
        </trans-unit>
        <trans-unit id="1f5e3410dbbebb4d1898df595b410af0e2fb3876" translate="yes" xml:space="preserve">
          <source>minval: 0-D. Inclusive lower bound on the generated integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0cd49b5927ec119fbdbc799de56c46dbfeaf1f9" translate="yes" xml:space="preserve">
          <source>minvals: The minimum cutoff. May be -infinity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07f64905eeb0cf24294c0721637934600341ada" translate="yes" xml:space="preserve">
          <source>mode: Either &lt;code&gt;REFLECT&lt;/code&gt; or &lt;code&gt;SYMMETRIC&lt;/code&gt;. In reflect mode the padded regions do not include the borders, while in symmetric mode the padded regions do include the borders. For example, if &lt;code&gt;input&lt;/code&gt; is &lt;code&gt;[1, 2, 3]&lt;/code&gt; and &lt;code&gt;paddings&lt;/code&gt; is &lt;code&gt;[0, 2]&lt;/code&gt;, then the output is &lt;code&gt;[1, 2, 3, 2, 1]&lt;/code&gt; in reflect mode, and it is &lt;code&gt;[1, 2, 3, 3, 2]&lt;/code&gt; in symmetric mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371a6476e19211468ee628da5493d3f055efa80d" translate="yes" xml:space="preserve">
          <source>mode_</source>
          <target state="translated">mode_</target>
        </trans-unit>
        <trans-unit id="b0ae996c38df976bb6831f631ee269b11491e023" translate="yes" xml:space="preserve">
          <source>mom: Should be from a Variable().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c48b6fc565466141e0c7f85fc0c0a62738cc5a" translate="yes" xml:space="preserve">
          <source>momentum: Momentum. Must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26cc3217be640e8220112c25628da6e11c78db95" translate="yes" xml:space="preserve">
          <source>ms</source>
          <target state="translated">ms</target>
        </trans-unit>
        <trans-unit id="39ebd9e47ca62efabff0c0378ef3eb8aaaf7744c" translate="yes" xml:space="preserve">
          <source>ms: Should be from a Variable().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc92971c1ea0cce8600bdcdd197caae845b9c8b" translate="yes" xml:space="preserve">
          <source>multiply_linear_by_lr_</source>
          <target state="translated">multiply_linear_by_lr_</target>
        </trans-unit>
        <trans-unit id="5723d165ed59595207e8c0c85bb720c83f4ce809" translate="yes" xml:space="preserve">
          <source>must</source>
          <target state="translated">must</target>
        </trans-unit>
        <trans-unit id="0252e7a24788314984fa3944308cc24efcea8e6f" translate="yes" xml:space="preserve">
          <source>must equal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25452fd78076fb3110ad3490a64889cb06d6db1" translate="yes" xml:space="preserve">
          <source>n: 0-D. Position of sorted vector to select along the last dimension (along each row for matrices). Valid range of n is &lt;code&gt;[0, input.shape[:-1])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b47a7302be61b394323d89233b6d0c23a5284c" translate="yes" xml:space="preserve">
          <source>n: The number of tuples to dequeue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cdf80947c401a90f340fdd34b3014e3591e7a94" translate="yes" xml:space="preserve">
          <source>na_value: Additional string to recognize as NA/NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6353a2c8273f45562b64528b63d8de36a2eaa1d4" translate="yes" xml:space="preserve">
          <source>na_value_</source>
          <target state="translated">na_value_</target>
        </trans-unit>
        <trans-unit id="6ae999552a0d2dca14d62e2bc8b764d377b1dd6c" translate="yes" xml:space="preserve">
          <source>name</source>
          <target state="translated">name</target>
        </trans-unit>
        <trans-unit id="7625376149ef7e56a692ebd29a54bd80340de733" translate="yes" xml:space="preserve">
          <source>names: A tensor containing the names of the serialized protos. Corresponds 1:1 with the &lt;code&gt;serialized&lt;/code&gt; tensor. May contain, for example, table key (descriptive) names for the corresponding serialized protos. These are purely useful for debugging purposes, and the presence of values here has no effect on the output. May also be an empty vector if no names are available. If non-empty, this tensor must have the same shape as &quot;serialized&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ffe059ae592dfae1eb70df4e2ec4a72261e7882" translate="yes" xml:space="preserve">
          <source>names: A vector containing the names of the serialized protos. May contain, for example, table key (descriptive) names for the corresponding serialized protos. These are purely useful for debugging purposes, and the presence of values here has no effect on the output. May also be an empty vector if no names are available. If non-empty, this vector must be the same length as &quot;serialized&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d17ec423ca9fbe44af15c97ad453092c65c0e4" translate="yes" xml:space="preserve">
          <source>narrow_range: If True, then the absolute value of the quantized minimum value is the same as the quantized maximum value, instead of 1 greater. i.e. for 8 bit quantization, the minimum value is -127 instead of -128.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bb51492c88f855f196aed6462a44330437b731" translate="yes" xml:space="preserve">
          <source>narrow_range: Whether to quantize into 2^num_bits - 1 distinct values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2dd01f5c0e0fd879c18c9ea53a6e77b2cb3636" translate="yes" xml:space="preserve">
          <source>narrow_range_</source>
          <target state="translated">narrow_range_</target>
        </trans-unit>
        <trans-unit id="0bec9d27379b92e8a588080775fe6fa67dcf581d" translate="yes" xml:space="preserve">
          <source>nbins: Scalar &lt;code&gt;int32 &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;&lt;/code&gt;. Number of histogram bins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad6df5db40bc218727c57997a239cb16eeb913e" translate="yes" xml:space="preserve">
          <source>new_global_step: The new global_step value to set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f364eccf4af2aac4f15b81513a218aef898bf1" translate="yes" xml:space="preserve">
          <source>new_shape: 1-D. &lt;code&gt;R_out&lt;/code&gt; vector with the requested new dense shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798221efe6d1446e7637015ecd72f8f59e275f96" translate="yes" xml:space="preserve">
          <source>ngram_widths: The sizes of the ngrams to create.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d7f55269d017493ad4a3d065f9081a70bc973b" translate="yes" xml:space="preserve">
          <source>ngrams</source>
          <target state="translated">ngrams</target>
        </trans-unit>
        <trans-unit id="e790224517a9e8596c5e7dbaa58297790d3184c4" translate="yes" xml:space="preserve">
          <source>ngrams_splits</source>
          <target state="translated">ngrams_splits</target>
        </trans-unit>
        <trans-unit id="f018b36acecdbc863ad3a294be81a442d7c43fb6" translate="yes" xml:space="preserve">
          <source>nmsed_boxes</source>
          <target state="translated">nmsed_boxes</target>
        </trans-unit>
        <trans-unit id="00d963cb68afce13dcb7d48680cfb9a2290e4d4d" translate="yes" xml:space="preserve">
          <source>nmsed_classes</source>
          <target state="translated">nmsed_classes</target>
        </trans-unit>
        <trans-unit id="40c43e1cd5c02bd197df3b4fe7f1b701cc56b531" translate="yes" xml:space="preserve">
          <source>nmsed_scores</source>
          <target state="translated">nmsed_scores</target>
        </trans-unit>
        <trans-unit id="a919bc98caea7e30ae4871a125109363df3f246f" translate="yes" xml:space="preserve">
          <source>nn_ops</source>
          <target state="translated">nn_ops</target>
        </trans-unit>
        <trans-unit id="0d44f768d09bc47a4c9fe843b5070b73ce5aead9" translate="yes" xml:space="preserve">
          <source>no_op</source>
          <target state="translated">no_op</target>
        </trans-unit>
        <trans-unit id="f8e966d1e207d02c44511a58dccff2f5429e9a3b" translate="yes" xml:space="preserve">
          <source>node</source>
          <target state="translated">node</target>
        </trans-unit>
        <trans-unit id="de2edcd108b5423dcf3103795ff94e1bb5e61a2a" translate="yes" xml:space="preserve">
          <source>node_name</source>
          <target state="translated">node_name</target>
        </trans-unit>
        <trans-unit id="9063bf95584ad75064d2cf959eba26d3b49de75b" translate="yes" xml:space="preserve">
          <source>noise: indicates if the noise should &lt;code&gt;uniform&lt;/code&gt;, &lt;code&gt;gaussian&lt;/code&gt;, or &lt;code&gt;zero&lt;/code&gt;. The default is &lt;code&gt;uniform&lt;/code&gt; which means the the noise type will be decided by &lt;code&gt;uniform_noise&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c20344d62b388a458b59907e7857ddf9a744cc" translate="yes" xml:space="preserve">
          <source>noise_</source>
          <target state="translated">noise_</target>
        </trans-unit>
        <trans-unit id="ff5eb7487bf029e1476a0fe939c66977ed9524cc" translate="yes" xml:space="preserve">
          <source>normalize: boolean (if true, edit distances are normalized by length of truth).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151807b2972437e143c552f20d213f2a3c9076dd" translate="yes" xml:space="preserve">
          <source>normalize_</source>
          <target state="translated">normalize_</target>
        </trans-unit>
        <trans-unit id="2d07b17d2eb99384ec3b0f83859748b25d92859d" translate="yes" xml:space="preserve">
          <source>normalized: indicates if the offset coordinates are normalized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2705e054f8850962abe3816d9ca43f4ffa15a5cb" translate="yes" xml:space="preserve">
          <source>normalized_</source>
          <target state="translated">normalized_</target>
        </trans-unit>
        <trans-unit id="898fb7d29d24b1a2ac5ce1a732b9b89c1920c9e6" translate="yes" xml:space="preserve">
          <source>num_accumulated</source>
          <target state="translated">num_accumulated</target>
        </trans-unit>
        <trans-unit id="d049c060776179592b8dadd647dac2f14cd7ef07" translate="yes" xml:space="preserve">
          <source>num_bits: The bitwidth of the quantization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42eb62cdeabf90202949a4b4a75591ee6612e83" translate="yes" xml:space="preserve">
          <source>num_bits: The bitwidth of the quantization; between 2 and 16, inclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842f07fc40c20a02516570b9e4eb952a344c08f8" translate="yes" xml:space="preserve">
          <source>num_bits: The bitwidth of the quantization; between 2 and 8, inclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a50f1ed395e00cb7efa2bec8c815632b68c5c9c" translate="yes" xml:space="preserve">
          <source>num_bits_</source>
          <target state="translated">num_bits_</target>
        </trans-unit>
        <trans-unit id="a6fd321dc760fb8ae9dc6ad8f423537a5c4e8bc5" translate="yes" xml:space="preserve">
          <source>num_buckets: It is used if hashed_output is true. output = hashed_valuenum_buckets if num_buckets &amp;gt; 0 else hashed_value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="756102eed0f1d934b47b2e27b432e7fd429d715b" translate="yes" xml:space="preserve">
          <source>num_buckets: The number of buckets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b81b2b1f3978b141fd3765ca2c737f24223df4" translate="yes" xml:space="preserve">
          <source>num_cols: The number of columns of the output matrix. If it is not provided, the op assumes the output matrix is a square matrix and infers the matrix size from k and the innermost dimension of &lt;code&gt;diagonal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c1a1fbdee8a7251cb1cb9dec6979458e8c9d47b" translate="yes" xml:space="preserve">
          <source>num_elements: A single-element tensor containing the number of elements to take.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="619cd5785923c6c54b77234d1893c27ee8bc4972" translate="yes" xml:space="preserve">
          <source>num_inputs</source>
          <target state="translated">num_inputs</target>
        </trans-unit>
        <trans-unit id="71f9b506e86cf04f54ccde25851b284b010b68e4" translate="yes" xml:space="preserve">
          <source>num_lower: 0-D tensor. Number of subdiagonals to keep. If negative, keep entire lower triangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171963c5e224fab05d77f8349f69cbc9a95b0835" translate="yes" xml:space="preserve">
          <source>num_outputs</source>
          <target state="translated">num_outputs</target>
        </trans-unit>
        <trans-unit id="178c88aabe255916d1a0bfd38882765e7ab7ee04" translate="yes" xml:space="preserve">
          <source>num_partitions: The number of partitions to output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66159c0e3779563ff6dece364b334b002125adcb" translate="yes" xml:space="preserve">
          <source>num_records: number of records to read from &lt;code&gt;Reader&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3cc1255aec104e104c833b28a5b040d4130bff" translate="yes" xml:space="preserve">
          <source>num_required: Number of gradients required before we return an aggregate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2225148fa51e53fdf481b2d4015c0f37d9cd8558" translate="yes" xml:space="preserve">
          <source>num_reserved_ids: Optionally some reserved IDs can be added in the range [0, ..., num_reserved_ids) by the users. One use case is that a special unknown word token is used as ID 0. These IDs will have a sampling probability of 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b623b1c9216194ba47181a515650362e667799b" translate="yes" xml:space="preserve">
          <source>num_reserved_ids_</source>
          <target state="translated">num_reserved_ids_</target>
        </trans-unit>
        <trans-unit id="fad08b153ac51bfcfd85482a536a08d0d238312e" translate="yes" xml:space="preserve">
          <source>num_rows: The number of rows of the output matrix. If it is not provided, the op assumes the output matrix is a square matrix and infers the matrix size from k and the innermost dimension of &lt;code&gt;diagonal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff328174f637d180ed24e64caffacd99d37818e" translate="yes" xml:space="preserve">
          <source>num_sampled: Number of candidates to produce.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974ab06591dc2d5beb8a5a3b0bd44ccec1f47967" translate="yes" xml:space="preserve">
          <source>num_sampled: Number of candidates to randomly sample.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1326b7a5b7facb22e446f1216d351d5684ad695e" translate="yes" xml:space="preserve">
          <source>num_samples: 0-D. Number of independent samples to draw for each row slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="885ac4c97a82d6c8fb4f9840d3d64da9172f64ef" translate="yes" xml:space="preserve">
          <source>num_segments: A scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b982125bf2a8151e1e440e4c960de06e7ed8e11" translate="yes" xml:space="preserve">
          <source>num_segments: Should equal the number of distinct segment IDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b70d56d1f5891a0bd8fea199d20e8d36d685597" translate="yes" xml:space="preserve">
          <source>num_shards: A sampler can be used to sample from a subset of the original range in order to speed up the whole computation through parallelism. This parameter (together with 'shard') indicates the number of partitions that are being used in the overall computation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e90ae78ed00f471c909aeb422330de35c38f8f8" translate="yes" xml:space="preserve">
          <source>num_shards_</source>
          <target state="translated">num_shards_</target>
        </trans-unit>
        <trans-unit id="031058414f0e88b2b07ad87f396938bba18fe5e7" translate="yes" xml:space="preserve">
          <source>num_sparse: The number of sparse features to be parsed from the example. This must match the lengths of &lt;code&gt;sparse_keys&lt;/code&gt; and &lt;code&gt;sparse_types&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a610c1b362915d11d0fa85bfd81f445e90d9b363" translate="yes" xml:space="preserve">
          <source>num_sparse: The number of sparse keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0a2f9c7a6bcfa54e369539fe63b1c7d29aa4def" translate="yes" xml:space="preserve">
          <source>num_split: The number of ways to split.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb99681ced5415b04cf778631b5ba3008f759302" translate="yes" xml:space="preserve">
          <source>num_true: Number of true labels per context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b4bfea7f40df122c2f9840f5a03a4285d3dfc5" translate="yes" xml:space="preserve">
          <source>num_upper: 0-D tensor. Number of superdiagonals to keep. If negative, keep entire upper triangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a7a5bd7813fc48688e7bfb80029fccc5808e63e" translate="yes" xml:space="preserve">
          <source>of the &lt;a href=&quot;../operation#classtensorflow_1_1_operation&quot;&gt;Operation&lt;/a&gt; created by calling &lt;code&gt;&lt;a href=&quot;add-sparse-to-tensors-map#classtensorflow_1_1ops_1_1_add_sparse_to_tensors_map&quot;&gt;AddSparseToTensorsMap&lt;/a&gt;&lt;/code&gt; as the &lt;code&gt;shared_name&lt;/code&gt; passed to &lt;code&gt;&lt;a href=&quot;take-many-sparse-from-tensors-map#classtensorflow_1_1ops_1_1_take_many_sparse_from_tensors_map&quot;&gt;TakeManySparseFromTensorsMap&lt;/a&gt;&lt;/code&gt;. Ensure the Operations are colocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d58ecf7fa11b922c43d77f74c6e7a3757f32463d" translate="yes" xml:space="preserve">
          <source>off_value: A scalar defining the value to fill in output when &lt;code&gt;indices[j] != i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1efa649cc0f10b6ebfa0af7f8e64173e909b8e0" translate="yes" xml:space="preserve">
          <source>offset: A 1D &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt; for offset, to shift to the normalized x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a06dada18a94c80f2aeec810d75e6376ae825b4" translate="yes" xml:space="preserve">
          <source>offset_backprop</source>
          <target state="translated">offset_backprop</target>
        </trans-unit>
        <trans-unit id="61b51254de5683d91997d7c0dad317bb48f4e2e8" translate="yes" xml:space="preserve">
          <source>offsets: A 2-D integer tensor of shape &lt;code&gt;[batch_size, 2]&lt;/code&gt; containing the y, x locations of the center of each window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a85f4764bbd6daf1c3545efbbf0f279a6dc0beb" translate="yes" xml:space="preserve">
          <source>ok</source>
          <target state="translated">ok</target>
        </trans-unit>
        <trans-unit id="f736a49e1a5def1d3bd3fe594f40b1a5297509ed" translate="yes" xml:space="preserve">
          <source>on_value: A scalar defining the value to fill in output when &lt;code&gt;indices[j] = i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="105f01d9cab58c7a99e202e6b7c67960a82504da" translate="yes" xml:space="preserve">
          <source>one in the source data format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824f601c2a81ee6bab79ccd4792304c738d17630" translate="yes" xml:space="preserve">
          <source>op</source>
          <target state="translated">op</target>
        </trans-unit>
        <trans-unit id="fcb60bc535f44919fb7827a8ef8e2d1b9e17347d" translate="yes" xml:space="preserve">
          <source>operation</source>
          <target state="translated">operation</target>
        </trans-unit>
        <trans-unit id="143b5f4591bb464f5cb8e0ad5fc11b5f82d08c94" translate="yes" xml:space="preserve">
          <source>operator()</source>
          <target state="translated">operator()</target>
        </trans-unit>
        <trans-unit id="958b976e683c7e7d0bb485f887b1816fec5e39ee" translate="yes" xml:space="preserve">
          <source>operator::tensorflow::Input</source>
          <target state="translated">operator::tensorflow::Input</target>
        </trans-unit>
        <trans-unit id="8514a3ac32b64ab515263ac40bf712678200502e" translate="yes" xml:space="preserve">
          <source>operator::tensorflow::Operation</source>
          <target state="translated">operator::tensorflow::Operation</target>
        </trans-unit>
        <trans-unit id="876f3fba7b5589b16909dee1ea5ddf8d500476e1" translate="yes" xml:space="preserve">
          <source>operator::tensorflow::Output</source>
          <target state="translated">operator::tensorflow::Output</target>
        </trans-unit>
        <trans-unit id="0e4329abf0895e5f8a998114fb4326de47f95db6" translate="yes" xml:space="preserve">
          <source>operator=</source>
          <target state="translated">operator=</target>
        </trans-unit>
        <trans-unit id="e3eaccd5d4f674c5c400b94262383f802c8f9db5" translate="yes" xml:space="preserve">
          <source>operator==</source>
          <target state="translated">operator==</target>
        </trans-unit>
        <trans-unit id="667c3eecf32238f5222df4d4f2b657d718826e4a" translate="yes" xml:space="preserve">
          <source>operator[]</source>
          <target state="translated">operator[]</target>
        </trans-unit>
        <trans-unit id="18e2ad9cca5bcb7615f057aebee669799635266c" translate="yes" xml:space="preserve">
          <source>optimize_size: If True, spend CPU/RAM to reduce size with no quality change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a67f9c04167076e297d85482c19531a04afb4834" translate="yes" xml:space="preserve">
          <source>optimize_size_</source>
          <target state="translated">optimize_size_</target>
        </trans-unit>
        <trans-unit id="a9def63925f0ac79cbdafd7d06c7a627b89bccd0" translate="yes" xml:space="preserve">
          <source>orig_input: The original input tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f09302aa6abaf8f88f19c1d803ae59cbc227d0d" translate="yes" xml:space="preserve">
          <source>orig_input_shape: The original input dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82d2a730133c7370034aa9ebae7cb29d4dc326c" translate="yes" xml:space="preserve">
          <source>orig_output: The original output tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce81128115a40370cde5787d6bab8e7998bfdd7" translate="yes" xml:space="preserve">
          <source>other.num_elements() * DataTypeSize(other.dtype())</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4800df8d1bc61fc95220645938cd65532a64067" translate="yes" xml:space="preserve">
          <source>out</source>
          <target state="translated">out</target>
        </trans-unit>
        <trans-unit id="6f7268cbe4a85ef227221a50b6881bb364012a07" translate="yes" xml:space="preserve">
          <source>out_backprop: 4-D with shape &lt;code&gt;[batch, out_height, out_width, depth]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c607d7016bec7fb451eb72af771c724266d06d33" translate="yes" xml:space="preserve">
          <source>out_backprop: 4-D with shape &lt;code&gt;[batch, out_height, out_width, out_channels]&lt;/code&gt;. Gradients w.r.t. the output of the convolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e08bd1f24f842b61dbf7b95a0b6b590a3c446c19" translate="yes" xml:space="preserve">
          <source>out_backprop: 4-D with shape based on &lt;code&gt;data_format&lt;/code&gt;. For example, if &lt;code&gt;data_format&lt;/code&gt; is 'NHWC' then out_backprop shape is &lt;code&gt;[batch, out_height, out_width, out_channels]&lt;/code&gt;. Gradients w.r.t. the output of the convolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c37b422d8efd9b148749e8f16426912b344606" translate="yes" xml:space="preserve">
          <source>out_backprop: &lt;a href=&quot;any#classtensorflow_1_1ops_1_1_any&quot;&gt;Any&lt;/a&gt; number of dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64969c097290d867cd14d027ed703c2f9ed90dff" translate="yes" xml:space="preserve">
          <source>out_backprop: Backprop signal of shape &lt;code&gt;[batch, out_depth, out_rows, out_cols, out_channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa174c0bf9891879bdbd66c6e6a07fd422bb2b3" translate="yes" xml:space="preserve">
          <source>out_idx_</source>
          <target state="translated">out_idx_</target>
        </trans-unit>
        <trans-unit id="d8811470e0d60cd7d2e5397cdba8a44f8d153952" translate="yes" xml:space="preserve">
          <source>out_max</source>
          <target state="translated">out_max</target>
        </trans-unit>
        <trans-unit id="4c03ee0c092c3de8d68ee098e3abe407e90456b3" translate="yes" xml:space="preserve">
          <source>out_min</source>
          <target state="translated">out_min</target>
        </trans-unit>
        <trans-unit id="b495cf676f58df8e0a54ab16e4fc0de6edde846c" translate="yes" xml:space="preserve">
          <source>out_type: The &lt;code&gt;dtype&lt;/code&gt; to use for serialization; the supported types are &lt;code&gt;string&lt;/code&gt; (default) and &lt;code&gt;variant&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3395adeb34aab78213775475d586b449bce78ca6" translate="yes" xml:space="preserve">
          <source>out_type: The numeric type to interpret each string in &lt;code&gt;string_tensor&lt;/code&gt; as.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d999a8ce34548ab0d049407abde0d1b395dadaab" translate="yes" xml:space="preserve">
          <source>out_type: The type of the output. Should be a lower bit depth than Tinput.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a88caa3e0d2c5220c1162db1cc3dd2f986304a" translate="yes" xml:space="preserve">
          <source>out_type: The type of the serialized tensor. The provided type must match the type of the serialized tensor and no implicit conversion will take place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21603d816e0f252698f2249a72e6721b12317ae2" translate="yes" xml:space="preserve">
          <source>out_type_</source>
          <target state="translated">out_type_</target>
        </trans-unit>
        <trans-unit id="1029d67644815d428f554e390aa966d57a0b29b8" translate="yes" xml:space="preserve">
          <source>output</source>
          <target state="translated">output</target>
        </trans-unit>
        <trans-unit id="b1e221c3a17e595a6fe2e7d7aff7c7fc93f2483f" translate="yes" xml:space="preserve">
          <source>output = round(clamp(value, input_min, input_max) * scale_factor) / scale_factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92ecb6d27436f900d5b142c1b7ed8f2b5a9428e3" translate="yes" xml:space="preserve">
          <source>output_dim0: dimension 0 of &quot;data&quot; passed to &lt;a href=&quot;sparse-segment-mean#classtensorflow_1_1ops_1_1_sparse_segment_mean&quot;&gt;SparseSegmentMean&lt;/a&gt; op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d645b25795cf14e9f85d12816be8ec29ef6b77" translate="yes" xml:space="preserve">
          <source>output_dim0: dimension 0 of &quot;data&quot; passed to &lt;a href=&quot;sparse-segment-sqrt-n#classtensorflow_1_1ops_1_1_sparse_segment_sqrt_n&quot;&gt;SparseSegmentSqrtN&lt;/a&gt; op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a4d74eb1820085fbf9561f6a83823f1faf19f0" translate="yes" xml:space="preserve">
          <source>output_dtype_</source>
          <target state="translated">output_dtype_</target>
        </trans-unit>
        <trans-unit id="799c5afef5018b4ab62f286981b5daa3b2ed761f" translate="yes" xml:space="preserve">
          <source>output_encoding: The unicode encoding to use in the output. Must be one of &lt;code&gt;&quot;UTF-8&quot;, &quot;UTF-16-BE&quot;, &quot;UTF-32-BE&quot;&lt;/code&gt;. Multi-byte encodings will be big-endian.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b4ef9a377ed35011cff64da31b20d7edce2a57" translate="yes" xml:space="preserve">
          <source>output_false</source>
          <target state="translated">output_false</target>
        </trans-unit>
        <trans-unit id="6458c7781073181320db05fb64884c6172b1b459" translate="yes" xml:space="preserve">
          <source>output_indices</source>
          <target state="translated">output_indices</target>
        </trans-unit>
        <trans-unit id="638dc833ed2aff27b4865c17545337e015aa1e46" translate="yes" xml:space="preserve">
          <source>output_indices: 2-D. The &lt;code&gt;indices&lt;/code&gt; of the sliced &lt;code&gt;SparseTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e5327c09c18788ec6350f761b781cb138bf9bff" translate="yes" xml:space="preserve">
          <source>output_max</source>
          <target state="translated">output_max</target>
        </trans-unit>
        <trans-unit id="7e09a6541946eb0decd6c235fd753589dabd65cc" translate="yes" xml:space="preserve">
          <source>output_min</source>
          <target state="translated">output_min</target>
        </trans-unit>
        <trans-unit id="b2dd038b411566c57a9b6b2dd53808cf0d8537ab" translate="yes" xml:space="preserve">
          <source>output_range_given: If True, &lt;code&gt;given_y_min&lt;/code&gt; and &lt;code&gt;given_y_min&lt;/code&gt; and &lt;code&gt;given_y_max&lt;/code&gt; are used as the output range. Otherwise, the implementation computes the output range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d089edf5c1c897a27415b9ab626084ea10e8356" translate="yes" xml:space="preserve">
          <source>output_range_given_</source>
          <target state="translated">output_range_given_</target>
        </trans-unit>
        <trans-unit id="88830a1a117b616d15ca46bd2c7e8a8f4a6c23b3" translate="yes" xml:space="preserve">
          <source>output_ref</source>
          <target state="translated">output_ref</target>
        </trans-unit>
        <trans-unit id="b72e1d002d084174fd4b79fe4876d09fce7ee868" translate="yes" xml:space="preserve">
          <source>output_row_length : which will be smaller than the input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f07fa451d476f0d51a88c5b752607c5da99d8ee" translate="yes" xml:space="preserve">
          <source>output_shape</source>
          <target state="translated">output_shape</target>
        </trans-unit>
        <trans-unit id="b48f8028fef1b6a5b025d2fdaaf6f3525c590880" translate="yes" xml:space="preserve">
          <source>output_stream: A string specifying the output stream or logging level to print to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dbb828ceb02d87cda3fcdd60c1d47601d8e7300" translate="yes" xml:space="preserve">
          <source>output_stream_</source>
          <target state="translated">output_stream_</target>
        </trans-unit>
        <trans-unit id="554e08ece4fa5d698363ea672df2903c3b996029" translate="yes" xml:space="preserve">
          <source>output_true</source>
          <target state="translated">output_true</target>
        </trans-unit>
        <trans-unit id="829c301e80005c9973f614efce526511fce5c085" translate="yes" xml:space="preserve">
          <source>output_type</source>
          <target state="translated">output_type</target>
        </trans-unit>
        <trans-unit id="5947141b3a9a0369712bb8c55996bdf750b588d9" translate="yes" xml:space="preserve">
          <source>output_type: (Optional) The output type of the operation (int32 or int64). Defaults to int32.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a90239c6621389154bfabd62c98d4f49b35eabd" translate="yes" xml:space="preserve">
          <source>output_type_</source>
          <target state="translated">output_type_</target>
        </trans-unit>
        <trans-unit id="61b3264d77c5cfc1e9af33084802e61965c47db1" translate="yes" xml:space="preserve">
          <source>output_values</source>
          <target state="translated">output_values</target>
        </trans-unit>
        <trans-unit id="e71003c6b7dd4093ce139ac0c51a6ba38d54a439" translate="yes" xml:space="preserve">
          <source>outputs</source>
          <target state="translated">outputs</target>
        </trans-unit>
        <trans-unit id="82b71f841b87c02c1439866e2b186ab4ef940e37" translate="yes" xml:space="preserve">
          <source>overlap_threshold: A 0-D float tensor representing the threshold for deciding whether boxes overlap too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c88f7a82b12ba2f26868db6c731ec315ca0ba26" translate="yes" xml:space="preserve">
          <source>overlapping: When set to True, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a139d082fc1d951d48f3dfe3ec0f271418291550" translate="yes" xml:space="preserve">
          <source>overlapping_</source>
          <target state="translated">overlapping_</target>
        </trans-unit>
        <trans-unit id="eb0e6e57759e8abdfe30101c4e5f6c2d4b4d8834" translate="yes" xml:space="preserve">
          <source>overlaps: A 2-D float tensor of shape &lt;code&gt;[num_boxes, num_boxes]&lt;/code&gt; representing the n-by-n box overlap values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be527e9612ae230bb3ed8fb8c436234eb09da741" translate="yes" xml:space="preserve">
          <source>pad: Bool whether padding is applied at the ends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cbf42ad908b83836246158da8069b4ffadcef7a" translate="yes" xml:space="preserve">
          <source>pad_</source>
          <target state="translated">pad_</target>
        </trans-unit>
        <trans-unit id="71d7848eccd00d0129ae7dafb956adbe6f5c41b1" translate="yes" xml:space="preserve">
          <source>pad_per_class: If false, the output nmsed boxes, scores and classes are padded/clipped to &lt;code&gt;max_total_size&lt;/code&gt;. If true, the output nmsed boxes, scores and classes are padded to be of length &lt;code&gt;max_size_per_class&lt;/code&gt;*&lt;code&gt;num_classes&lt;/code&gt;, unless it exceeds &lt;code&gt;max_total_size&lt;/code&gt; in which case it is clipped to &lt;code&gt;max_total_size&lt;/code&gt;. Defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08744df4b085aa11b808e10057fb9863650be9f4" translate="yes" xml:space="preserve">
          <source>pad_per_class_</source>
          <target state="translated">pad_per_class_</target>
        </trans-unit>
        <trans-unit id="2f000792f5d3e2c4874c5845d73d33bd7ed5e20b" translate="yes" xml:space="preserve">
          <source>pad_to_max_output_size: If true, the output &lt;code&gt;selected_indices&lt;/code&gt; is padded to be of length &lt;code&gt;max_output_size&lt;/code&gt;. Defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58a57fbf2973fd44c981d86170bbd1eb6cdeded" translate="yes" xml:space="preserve">
          <source>pad_to_max_output_size_</source>
          <target state="translated">pad_to_max_output_size_</target>
        </trans-unit>
        <trans-unit id="36e6a550dd7b4e01d3242e9244ee7fa0bcfec961" translate="yes" xml:space="preserve">
          <source>pad_width: The number of padding elements to add to each side of each sequence. Note that padding will never be greater than 'ngram_widths'-1 regardless of this value. If &lt;code&gt;pad_width=-1&lt;/code&gt;, then add &lt;code&gt;max(ngram_widths)-1&lt;/code&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31561801842ddcf0604992fcb70f0a9c6827f28" translate="yes" xml:space="preserve">
          <source>padding: The type of padding algorithm to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43afa3d7694e794e9271fee3d18a231135af7cef" translate="yes" xml:space="preserve">
          <source>padding_value: The number to fill the area outside the specified diagonal band with. Default is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35286a33fd8083b696526fc0ac16bfb1205f0bb7" translate="yes" xml:space="preserve">
          <source>padding_value: The value to fill the area outside the specified diagonal band with. Default is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4a68866aaa4f47b9611289d0f853abfda81790" translate="yes" xml:space="preserve">
          <source>paddings: A two-column matrix specifying the padding sizes. The number of rows must be the same as the rank of &lt;code&gt;input&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed72300d1e1977da6ff76b1e3818dcb8cbb66631" translate="yes" xml:space="preserve">
          <source>params: The tensor from which to gather values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71840be41aa68920e1cd631161fec95905ea2fa0" translate="yes" xml:space="preserve">
          <source>params: The tensor from which to gather values. Must be at least rank &lt;code&gt;axis + 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089319c1a8c516ec348720e8f946093845d08b7f" translate="yes" xml:space="preserve">
          <source>parsing_ops</source>
          <target state="translated">parsing_ops</target>
        </trans-unit>
        <trans-unit id="4325a43c46410b9d9d8f67f6a8c81893f0494174" translate="yes" xml:space="preserve">
          <source>partitions: &lt;a href=&quot;any#classtensorflow_1_1ops_1_1_any&quot;&gt;Any&lt;/a&gt; shape. Indices in the range &lt;code&gt;[0, num_partitions)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12f399525222ddec227760e730f278825e44b22d" translate="yes" xml:space="preserve">
          <source>patches</source>
          <target state="translated">patches</target>
        </trans-unit>
        <trans-unit id="7cd23a42966346897b6864f9cfb050966350f243" translate="yes" xml:space="preserve">
          <source>pattern: A scalar string tensor containing the regular expression to match the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6239aea279acdf23d0d6b4b07f012e83c96aeba8" translate="yes" xml:space="preserve">
          <source>pattern: Shell wildcard pattern(s). Scalar or vector of type string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a0a9bb2f808a525d4c8f11bed80842f5181e52" translate="yes" xml:space="preserve">
          <source>pattern: The regular expression to be matched in the &lt;code&gt;input&lt;/code&gt; strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daeb9051bcad8dccdd906042a16dbb232385490f" translate="yes" xml:space="preserve">
          <source>placeholder: A string, at each placeholder in the template a subsequent tensor summary will be inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de79df9292b7a5d9a85aff954c89602b7a40bbe2" translate="yes" xml:space="preserve">
          <source>placeholder_</source>
          <target state="translated">placeholder_</target>
        </trans-unit>
        <trans-unit id="7b7d2291c357c03b6045f38ed71f82b4f7db3ae1" translate="yes" xml:space="preserve">
          <source>pooling_ratio: Pooling ratio for each dimension of &lt;code&gt;value&lt;/code&gt;, currently only supports row and col dimension and should be &amp;gt;= 1.0. For example, a valid pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements must be 1.0 because we don't allow pooling on batch and channels dimensions. 1.44 and 1.73 are pooling ratio on height and width dimensions respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a48d4a8c83eab982bf39f63862c8c6b3b8eb249b" translate="yes" xml:space="preserve">
          <source>pos: Scalar defining the position of first character in each substring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13800272d7a85c03409344e8e130d16ae2dc138f" translate="yes" xml:space="preserve">
          <source>precision</source>
          <target state="translated">precision</target>
        </trans-unit>
        <trans-unit id="d37c192b8e09e60db975811eba7cb6b1ae8762d3" translate="yes" xml:space="preserve">
          <source>precision: The post-decimal precision to use for floating point numbers. Only used if precision &amp;gt; -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a59e15cdc59f0faa3fa9027ededdd7fb1dea23" translate="yes" xml:space="preserve">
          <source>precision_</source>
          <target state="translated">precision_</target>
        </trans-unit>
        <trans-unit id="f84387b8cb0e1306d36ab36c0156e73b9084c81b" translate="yes" xml:space="preserve">
          <source>pred: A scalar that specifies which output port will receive data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d531e3ef6dd9b585de7067c48139c861361aee" translate="yes" xml:space="preserve">
          <source>predictions: A &lt;code&gt;batch_size&lt;/code&gt; x &lt;code&gt;classes&lt;/code&gt; tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="590598e3f8c76ce45fe8733ebc0e316e6f67bdc1" translate="yes" xml:space="preserve">
          <source>preferred_shard: Index of file to open first if multiple files match &lt;code&gt;file_pattern&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c9ea78de0ad27c4d529ea8cc53f6f00c0130e2" translate="yes" xml:space="preserve">
          <source>preferred_shard: Index of file to open first if multiple files match &lt;code&gt;file_pattern&lt;/code&gt;. See the documentation for &lt;code&gt;&lt;a href=&quot;restore#classtensorflow_1_1ops_1_1_restore&quot;&gt;Restore&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dbb50ed2c92234bd5d099ee828c06e1b0cfb3a3" translate="yes" xml:space="preserve">
          <source>preferred_shard_</source>
          <target state="translated">preferred_shard_</target>
        </trans-unit>
        <trans-unit id="e72db48063f8457726fc96741f66b8e678bb92fa" translate="yes" xml:space="preserve">
          <source>prefix: Must have a single element. The prefix of a V2 checkpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ecdefec66a3300ff8b2dfdfc37d7a3addb69d08" translate="yes" xml:space="preserve">
          <source>prefix: Must have a single element. The prefix of the V2 checkpoint to which we write the tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a007151abe87cc01a5b6e9cc418e85286e2087" translate="yes" xml:space="preserve">
          <source>product</source>
          <target state="translated">product</target>
        </trans-unit>
        <trans-unit id="2daab64fdf14d6efb2bb6ce1f3dd5f634879159f" translate="yes" xml:space="preserve">
          <source>progressive: If True, create a JPEG that loads progressively (coarse to fine).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fad5552b315d28b331cfa6d5153ca5b9487674e" translate="yes" xml:space="preserve">
          <source>progressive_</source>
          <target state="translated">progressive_</target>
        </trans-unit>
        <trans-unit id="6c836c79e2e7c9facf33796b1ea251c768fb7eec" translate="yes" xml:space="preserve">
          <source>prox_v = var - alpha * delta var = sign(prox_v)/(1+alpha*l2) * max{|prox_v|-alpha*l1,0}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593a657d2c9adee40e9361139dab15d3a998c5a6" translate="yes" xml:space="preserve">
          <source>pruning away boxes that have high intersection-over-union (IOU) overlap with previously selected boxes. Bounding boxes are supplied as [y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any diagonal pair of box corners and the coordinates can be provided as normalized (i.e., lying in the interval [0, 1]) or absolute. Note that this algorithm is agnostic to where the origin is in the coordinate system. Note that this algorithm is invariant to orthogonal transformations and translations of the coordinate system; thus translating or reflections of the coordinate system result in the same boxes being selected by the algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e694dceae31e078ddb8809dafcc06aac2cda4c9a" translate="yes" xml:space="preserve">
          <source>pruning away boxes that have high intersection-over-union (IOU) overlap with previously selected boxes. Bounding boxes are supplied as [y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any diagonal pair of box corners and the coordinates can be provided as normalized (i.e., lying in the interval [0, 1]) or absolute. Note that this algorithm is agnostic to where the origin is in the coordinate system. Note that this algorithm is invariant to orthogonal transformations and translations of the coordinate system; thus translating or reflections of the coordinate system result in the same boxes being selected by the algorithm. The output of this operation is a set of integers indexing into the input collection of bounding boxes representing the selected boxes. The bounding box coordinates corresponding to the selected indices can then be obtained using the &lt;code&gt;tf.gather operation&lt;/code&gt;. For example: selected_indices = tf.image.non_max_suppression( boxes, scores, max_output_size, iou_threshold) selected_boxes = tf.gather(boxes, selected_indices)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d8a1c25b7314e5ba6755747734b19ab3b8f89d" translate="yes" xml:space="preserve">
          <source>pruning away boxes that have high intersection-over-union (IOU) overlap with previously selected boxes. Bounding boxes with score less than &lt;code&gt;score_threshold&lt;/code&gt; are removed. Bounding boxes are supplied as [y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any diagonal pair of box corners and the coordinates can be provided as normalized (i.e., lying in the interval [0, 1]) or absolute. Note that this algorithm is agnostic to where the origin is in the coordinate system and more generally is invariant to orthogonal transformations and translations of the coordinate system; thus translating or reflections of the coordinate system result in the same boxes being selected by the algorithm. The output of this operation is a set of integers indexing into the input collection of bounding boxes representing the selected boxes. The bounding box coordinates corresponding to the selected indices can then be obtained using the &lt;code&gt;tf.gather operation&lt;/code&gt;. For example: selected_indices = tf.image.non_max_suppression_v2( boxes, scores, max_output_size, iou_threshold, score_threshold) selected_boxes = tf.gather(boxes, selected_indices)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="450016572dc5235d8f8db5e9c76e341fa8971c08" translate="yes" xml:space="preserve">
          <source>pruning away boxes that have high intersection-over-union (IOU) overlap with previously selected boxes. Bounding boxes with score less than &lt;code&gt;score_threshold&lt;/code&gt; are removed. Bounding boxes are supplied as [y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any diagonal pair of box corners and the coordinates can be provided as normalized (i.e., lying in the interval [0, 1]) or absolute. Note that this algorithm is agnostic to where the origin is in the coordinate system and more generally is invariant to orthogonal transformations and translations of the coordinate system; thus translating or reflections of the coordinate system result in the same boxes being selected by the algorithm. The output of this operation is a set of integers indexing into the input collection of bounding boxes representing the selected boxes. The bounding box coordinates corresponding to the selected indices can then be obtained using the &lt;code&gt;tf.gather operation&lt;/code&gt;. For example: selected_indices = tf.image.non_max_suppression_v2( boxes, scores, max_output_size, iou_threshold, score_threshold) selected_boxes = tf.gather(boxes, selected_indices) This op also supports a Soft-NMS (with Gaussian weighting) mode (c.f. Bodla et al, &lt;a href=&quot;https://arxiv.org/abs/1704.04503&quot;&gt;https://arxiv.org/abs/1704.04503&lt;/a&gt;) where boxes reduce the score of other overlapping boxes instead of directly causing them to be pruned. To enable this Soft-NMS mode, set the &lt;code&gt;soft_nms_sigma&lt;/code&gt; parameter to be larger than 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0332b9cecb3347954bae39093ae055fc3f74f61" translate="yes" xml:space="preserve">
          <source>pruning away boxes that have high overlaps with previously selected boxes. Bounding boxes with score less than &lt;code&gt;score_threshold&lt;/code&gt; are removed. N-by-n overlap values are supplied as square matrix, which allows for defining a custom overlap criterium (eg. intersection over union, intersection over area, etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084f7851fee7c248c37b82eeecaaa8bdd5614143" translate="yes" xml:space="preserve">
          <source>pseudo_random: When set to True, generates the pooling sequence in a pseudorandom fashion, otherwise, in a random fashion. Check paper &lt;a href=&quot;http://arxiv.org/abs/1412.6071&quot;&gt;Benjamin Graham, Fractional Max-Pooling&lt;/a&gt; for difference between pseudorandom and random.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2032c8b29340ee1b20642bbde699a8e5824c68" translate="yes" xml:space="preserve">
          <source>pseudo_random_</source>
          <target state="translated">pseudo_random_</target>
        </trans-unit>
        <trans-unit id="f91c462d89997130ba6a0e8cbd864ebe51c6d357" translate="yes" xml:space="preserve">
          <source>quality: An int quality to encode to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c87460329619942ea555435bbcef9a1ec57ff2" translate="yes" xml:space="preserve">
          <source>quality: Quality of the compression from 0 to 100 (higher is better and slower).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f26a64a493694ee38cebe302d31d1d56c0079e7" translate="yes" xml:space="preserve">
          <source>quality_</source>
          <target state="translated">quality_</target>
        </trans-unit>
        <trans-unit id="942a5ce54366b711ba9286d9b802449dba742a19" translate="yes" xml:space="preserve">
          <source>queue_handle: Handle to a &lt;code&gt;Queue&lt;/code&gt;, with string work items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35f178b490e1a7da0daf629ab33cca79b61859b1" translate="yes" xml:space="preserve">
          <source>queue_handle: Handle to a Queue, with string work items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23f83465a763f97902316d1dfe8fe79bc5536aea" translate="yes" xml:space="preserve">
          <source>r0</source>
          <target state="translated">r0</target>
        </trans-unit>
        <trans-unit id="2a74b627d1e9fded0a2647525cb8c7e5ae9cae5b" translate="yes" xml:space="preserve">
          <source>ragged_keys: Vector of strings. The keys expected in the Examples' features associated with ragged values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a3007191994c1959b5e0f542493c5fc64d6815" translate="yes" xml:space="preserve">
          <source>ragged_row_splits</source>
          <target state="translated">ragged_row_splits</target>
        </trans-unit>
        <trans-unit id="5566271998a3068e81bd502aef2ed6d114206f6e" translate="yes" xml:space="preserve">
          <source>ragged_split_types: A list of &lt;code&gt;num_ragged&lt;/code&gt; types; the data types of row_splits in each Feature given in ragged_keys (where &lt;code&gt;num_ragged = sparse_keys.size()&lt;/code&gt;). May be DT_INT32 or DT_INT64.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4fe2837e18afc556ab43775c7ada92830d5755" translate="yes" xml:space="preserve">
          <source>ragged_value_types: A list of &lt;code&gt;num_ragged&lt;/code&gt; types; the data types of data in each Feature given in ragged_keys (where &lt;code&gt;num_ragged = sparse_keys.size()&lt;/code&gt;). Currently the &lt;a href=&quot;parse-example#classtensorflow_1_1ops_1_1_parse_example&quot;&gt;ParseExample&lt;/a&gt; supports DT_FLOAT (FloatList), DT_INT64 (Int64List), and DT_STRING (BytesList).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ca6eaa3ab929c650981cdaf2f97b582a9f2983" translate="yes" xml:space="preserve">
          <source>ragged_values</source>
          <target state="translated">ragged_values</target>
        </trans-unit>
        <trans-unit id="1a654aaa79f122659d80c1bff4ade2d875ab5a26" translate="yes" xml:space="preserve">
          <source>random_ops</source>
          <target state="translated">random_ops</target>
        </trans-unit>
        <trans-unit id="4d55af37dbbb6a42088d917caa1ca25428ec42c9" translate="yes" xml:space="preserve">
          <source>range</source>
          <target state="translated">range</target>
        </trans-unit>
        <trans-unit id="2e7872e2cc0e0f6301ffa7b8b3cfcac84d8a723e" translate="yes" xml:space="preserve">
          <source>range_given: Whether the range is given or should be determined from the &lt;code&gt;input&lt;/code&gt; tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa64979f6480d63f2fade4724654144276b28bce" translate="yes" xml:space="preserve">
          <source>range_given_</source>
          <target state="translated">range_given_</target>
        </trans-unit>
        <trans-unit id="367a6b2e2a6ccf698e1fae9b7094ec35751afbad" translate="yes" xml:space="preserve">
          <source>range_max: The sampler will sample integers from the interval [0, range_max).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18640816232b06fdaa540a46482d1a300ee8b385" translate="yes" xml:space="preserve">
          <source>rate: A tensor in which each scalar is a &quot;rate&quot; parameter describing the associated poisson distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058a808388a49ff8a072180483500dd53450c5b6" translate="yes" xml:space="preserve">
          <source>rates: 1-D of length 4. The input stride for atrous morphological dilation. Must be: &lt;code&gt;[1, rate_height, rate_width, 1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209aa34b2b6231b04c5bffa5e96f52b4dd943297" translate="yes" xml:space="preserve">
          <source>rates: Must be: &lt;code&gt;[1, rate_rows, rate_cols, 1]&lt;/code&gt;. This is the input stride, specifying how far two consecutive patch samples are in the input. Equivalent to extracting patches with &lt;code&gt;patch_sizes_eff = patch_sizes + (patch_sizes - 1) * (rates - 1)&lt;/code&gt;, followed by subsampling them spatially by a factor of &lt;code&gt;rates&lt;/code&gt;. This is equivalent to &lt;code&gt;rate&lt;/code&gt; in dilated (a.k.a. Atrous) convolutions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd42c5b87c3b04e253438dbad876beecf3215518" translate="yes" xml:space="preserve">
          <source>rates: The input stride for atrous morphological dilation. Must be: &lt;code&gt;[1, rate_height, rate_width, 1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04cd63450c61a25a08e9912e98fd5f05dde92813" translate="yes" xml:space="preserve">
          <source>ratio: Downscaling ratio.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62154d4e9ed889d48f4d23bcd7503db5e3d0b1b8" translate="yes" xml:space="preserve">
          <source>ratio_</source>
          <target state="translated">ratio_</target>
        </trans-unit>
        <trans-unit id="47ded0c3a603e8742330a288bbe26c7f19cefdd9" translate="yes" xml:space="preserve">
          <source>reader_handle</source>
          <target state="translated">reader_handle</target>
        </trans-unit>
        <trans-unit id="2d2524f3c03c26fe0e31a80acac33fe7176b6ded" translate="yes" xml:space="preserve">
          <source>reader_handle: Handle to a &lt;code&gt;Reader&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f3cb32d31f24b08163943a27dfe37a7c90a1a7" translate="yes" xml:space="preserve">
          <source>reader_handle: Handle to a Reader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3bd0e26cb77daff2317644df2357e9f8b0cfbab" translate="yes" xml:space="preserve">
          <source>record_bytes: Number of bytes in the record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6557385628387b6bfcf55d7c43c45914f3dc4438" translate="yes" xml:space="preserve">
          <source>record_defaults: One tensor per column of the input record, with either a scalar default value for that column or an empty vector if the column is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86761b63a7bd1f480ed481cc7b4255adc5d9063d" translate="yes" xml:space="preserve">
          <source>records</source>
          <target state="translated">records</target>
        </trans-unit>
        <trans-unit id="41461ffc5e288e859dceee5dbc2b8b162b5f2720" translate="yes" xml:space="preserve">
          <source>records: Each string is a record/row in the csv and all records should have the same format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37af71877cc013e2b9e9860c9682bd255d10f6e4" translate="yes" xml:space="preserve">
          <source>records_produced</source>
          <target state="translated">records_produced</target>
        </trans-unit>
        <trans-unit id="66a78a1070ab7a8724deb1f9e0bb24d4d0b06c8a" translate="yes" xml:space="preserve">
          <source>reduction_axes: 1-D. Length-&lt;code&gt;K&lt;/code&gt; vector containing the reduction axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d9e96761f8210cc95bb1ea4b73504af2c12c29" translate="yes" xml:space="preserve">
          <source>reduction_indices: The dimensions to reduce over. Dimensions are reduced in the order specified. Omitting &lt;code&gt;reduction_indices&lt;/code&gt; is equivalent to passing &lt;code&gt;[n-1, n-2, ..., 0]&lt;/code&gt;. Negative indices from &lt;code&gt;-n&lt;/code&gt; to &lt;code&gt;-1&lt;/code&gt; are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05af032bfdc66d00212f0da7e13d8945b18d41ad" translate="yes" xml:space="preserve">
          <source>reduction_type_</source>
          <target state="translated">reduction_type_</target>
        </trans-unit>
        <trans-unit id="69449f994d55805535b9e8fab16f6c39934e9ba4" translate="yes" xml:space="preserve">
          <source>ref</source>
          <target state="translated">ref</target>
        </trans-unit>
        <trans-unit id="5dafdc6562d8c6bfd16f8cab851769d388441ea5" translate="yes" xml:space="preserve">
          <source>ref: A mutable &lt;a href=&quot;../tensor#classtensorflow_1_1_tensor&quot;&gt;Tensor&lt;/a&gt;. Should be from a &lt;a href=&quot;variable#classtensorflow_1_1ops_1_1_variable&quot;&gt;Variable&lt;/a&gt; node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="771a8dbc4bf907823b58b47b1ddc74b5970b0fe8" translate="yes" xml:space="preserve">
          <source>ref: A reference to the temporary variable tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c459a6d4252e8810425048e9a33c4fcc71ea04" translate="yes" xml:space="preserve">
          <source>ref: A resource handle. Must be from a VarHandleOp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db945c662f37c76bc51ced8301e172c88b679ea6" translate="yes" xml:space="preserve">
          <source>ref: Should be from a &lt;code&gt;&lt;a href=&quot;variable#classtensorflow_1_1ops_1_1_variable&quot;&gt;Variable&lt;/a&gt;&lt;/code&gt; node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e4bac4bfc58d1331b06946ad03f7a53268f886" translate="yes" xml:space="preserve">
          <source>ref: Should be from a &lt;code&gt;&lt;a href=&quot;variable#classtensorflow_1_1ops_1_1_variable&quot;&gt;Variable&lt;/a&gt;&lt;/code&gt; node. May be uninitialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5983b41b6b588c86a9a191f85f7dac73f7f04868" translate="yes" xml:space="preserve">
          <source>ref: Should be from a scalar &lt;code&gt;&lt;a href=&quot;variable#classtensorflow_1_1ops_1_1_variable&quot;&gt;Variable&lt;/a&gt;&lt;/code&gt; node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3659613efa0b151e5e44f5aae4463028363b825" translate="yes" xml:space="preserve">
          <source>reinterpret_last_dimension</source>
          <target state="translated">reinterpret_last_dimension</target>
        </trans-unit>
        <trans-unit id="c5c27eb1d0254bfac5d928cd2c18d31da4b32e31" translate="yes" xml:space="preserve">
          <source>replace_control_characters: Whether to replace the C0 control characters (00-1F) with the &lt;code&gt;replacement_char&lt;/code&gt;. Default is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed80630f4741a8799896932de8eaf3a384f45be" translate="yes" xml:space="preserve">
          <source>replace_control_characters_</source>
          <target state="translated">replace_control_characters_</target>
        </trans-unit>
        <trans-unit id="873929df49ea00d0f9831e90a86a85be02a9752b" translate="yes" xml:space="preserve">
          <source>replace_global: If True, the replacement is global (that is, all matches of the &lt;code&gt;pattern&lt;/code&gt; regular expression in each input string are rewritten), otherwise the &lt;code&gt;rewrite&lt;/code&gt; substitution is only made for the first &lt;code&gt;pattern&lt;/code&gt; match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83230eefdee2350828b1c594119acb994f060756" translate="yes" xml:space="preserve">
          <source>replace_global_</source>
          <target state="translated">replace_global_</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
