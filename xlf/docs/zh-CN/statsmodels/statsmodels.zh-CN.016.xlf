<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="statsmodels">
    <body>
      <group id="statsmodels">
        <trans-unit id="1676d760d765fd339bf3fe3a0b0f6235a09ec24a" translate="yes" xml:space="preserve">
          <source>The function uses scipy.optimize for finding the value that satisfies the power equation. It first uses &lt;code&gt;brentq&lt;/code&gt; with a prior search for bounds. If this fails to find a root, &lt;code&gt;fsolve&lt;/code&gt; is used. If &lt;code&gt;fsolve&lt;/code&gt; also fails, then, for &lt;code&gt;alpha&lt;/code&gt;, &lt;code&gt;power&lt;/code&gt; and &lt;code&gt;effect_size&lt;/code&gt;, &lt;code&gt;brentq&lt;/code&gt; with fixed bounds is used. However, there can still be cases where this fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec77559e0308c60069e5cf1ebb7dc67c340af50" translate="yes" xml:space="preserve">
          <source>The generalized residuals for the Logit model are defined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f496a44e6b3ac68adfa02b5fba52280ef43903e1" translate="yes" xml:space="preserve">
          <source>The generalized residuals for the Probit model are defined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0bc01352e132df40237ad9d38b5277bfa628fd2" translate="yes" xml:space="preserve">
          <source>The goal is to find a factored Gaussian approximation q1*q2*&amp;hellip; to the posterior distribution, approximately minimizing the KL divergence from the factored approximation to the actual posterior. The KL divergence, or ELBO function has the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="880022acac54ccc4a81795df45bc154be7255137" translate="yes" xml:space="preserve">
          <source>The gradient of logL with respect to each parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6291947b5401ccdb9d87a9ae4b732735fd5b8d" translate="yes" xml:space="preserve">
          <source>The gradient of the log posterior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="771804814355eac6e5a88a9ab5e212f08a3493fb" translate="yes" xml:space="preserve">
          <source>The histogram above is discontinuous. To compute a continuous probability density function, we can use kernel density estimation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f36b8a23556a4647d4ce45d3a06922c43fc950e" translate="yes" xml:space="preserve">
          <source>The identity transform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beaa2dbb2f177df192e63c0329b04fc835dc365b" translate="yes" xml:space="preserve">
          <source>The implementation is based on the SAS documentation. R includes it in &lt;code&gt;mcnemar.test&lt;/code&gt; if the table is not 2 by 2. However a more direct generalization of the McNemar test to larger tables is provided by the homogeneity test (TableSymmetry.homogeneity).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fedff50949f1b2c440402c110cf7d1b2a953e25" translate="yes" xml:space="preserve">
          <source>The implementation might change to make more use of the existing VECM framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94c5b31bcfc6866cc40c76363dbfb5382f8a3a6" translate="yes" xml:space="preserve">
          <source>The important step here was specifying the base dynamic factor model which we were operating with. In particular, as described above, we initialize with &lt;code&gt;factor_order=4&lt;/code&gt;, even though we will only end up with an AR(2) model for the factor. We also performed some general setup-related tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a10715f670c018cb8f08847056e7065d58db4e" translate="yes" xml:space="preserve">
          <source>The imputed values are stored in the class attribute &lt;code&gt;self.data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36415123ad9c5f2d16859f2de4373120087cd43c" translate="yes" xml:space="preserve">
          <source>The independent variables include all the other variables described above, as well as the interaction terms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113cb372205f569dfc43e37eb34874a08b0792fa" translate="yes" xml:space="preserve">
          <source>The individual correlation plots are assumed to all have the same variables, axis labels can be specified only once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805bfa08917ff58a78f0c0bbf0bfbfefe40bc2b6" translate="yes" xml:space="preserve">
          <source>The inference procedures used here are all based on a sampling model in which the units are independent and identically distributed, with each unit being classified with respect to two categorical variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="693b5881d824679b09ea5e9030809f5f7a1d6917" translate="yes" xml:space="preserve">
          <source>The influence of each point can be visualized by the criterion keyword argument. Options are Cook's distance and DFFITS, two measures of influence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f551cb25f1d3427ed6da1891e8886a32d257907d" translate="yes" xml:space="preserve">
          <source>The information criteria have decreased substantially, indicating that this model has a better fit than the previous model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7977d7f3803eaedc66edc56e0ab35cba3de3508" translate="yes" xml:space="preserve">
          <source>The input matrix &lt;code&gt;corr&lt;/code&gt; can be a dense numpy array or any scipy sparse matrix. The latter is useful if the input matrix is obtained by thresholding a very large sample correlation matrix. If &lt;code&gt;corr&lt;/code&gt; is sparse, the calculations are optimized to save memory, so no working matrix with more than 10^6 elements is constructed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbce3b85ebc63e3d49d45370d02c86c732162e3" translate="yes" xml:space="preserve">
          <source>The integrated mean square error for the conditional KDE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e53843fad16ab02e96a22438b170890c2de51cf" translate="yes" xml:space="preserve">
          <source>The integration behavior of this function is inherited from &lt;code&gt;integrate.quad&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e5184f6beab2c2d0f03503679abcc3ffbb9a67" translate="yes" xml:space="preserve">
          <source>The intercept of the line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70804506033408ab4b4f2d51e49efb334a31f89" translate="yes" xml:space="preserve">
          <source>The interpretation of the regimes, in terms of the intercept, have switched. Now the first regime has the higher intercept and the second regime has a lower intercept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d75a9a362dbf5ac415a84723cb2ac32c261f399" translate="yes" xml:space="preserve">
          <source>The interquartile first difference for the percentage of low income households in a school district is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f976574eb44b3e8c64f95793019feb894d991430" translate="yes" xml:space="preserve">
          <source>The interval includes the end points of the rejection region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515bdecdc37f69033735bbbea929268d364a0bc2" translate="yes" xml:space="preserve">
          <source>The interval includes the end points, &lt;code&gt;reject&lt;/code&gt; if and only if &lt;code&gt;r_low &amp;lt;= x &amp;lt;= r_upp&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba49318b6d1c70a05bb4645ddd784ad262798cc1" translate="yes" xml:space="preserve">
          <source>The interval might be empty with &lt;code&gt;r_upp &amp;lt; r_low&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc40951366f7ca1780b71d3ff47544f9d667d660" translate="yes" xml:space="preserve">
          <source>The inverse Guassian distribution is sometimes referred to in the literature as the Wald distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="897052dd52c20886f8ed25da889a3d8bb5ec45d5" translate="yes" xml:space="preserve">
          <source>The inverse of the CDF link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744aea14abd6dad3c64a71aa4d6eb72fa3748116" translate="yes" xml:space="preserve">
          <source>The inverse squared transform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e2aa4a0a8a304cefb68531591c76813505db91" translate="yes" xml:space="preserve">
          <source>The inverse transform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="155dd4c038297c62cd29875b9460b23025e784c4" translate="yes" xml:space="preserve">
          <source>The inversion method is defined by a collection of boolean flags, and is internally stored as a bitmask. The methods available are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e380f1f0591fd127f458364330f8f62c2a205f" translate="yes" xml:space="preserve">
          <source>The irregular component is assumed to be a white noise error term. Its variance is a parameter to be estimated by MLE; i.e.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a995f21df82f54ab794dc29945717ff3a886dacc" translate="yes" xml:space="preserve">
          <source>The irregular components are independent and identically distributed (iid):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e3ff41b35443c0e52608378d225ce7bea72170" translate="yes" xml:space="preserve">
          <source>The irregular will be assumed to be white noise, and the cycle will be stochastic and damped. The final modeling choice is the specification to use for the trend component. Harvey and Jaeger consider two models:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7083028f4ff34aea5046c63cfc26841c64021d54" translate="yes" xml:space="preserve">
          <source>The kernel density estimation (KDE) functionality is split between univariate and multivariate estimation, which are implemented in quite different ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f9b8066bd0cbfacdbc6eb11443b326d710717d" translate="yes" xml:space="preserve">
          <source>The large sample version of the likelihood ratio is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b34831d78fc6f1aa9bf96cf5fa27633be18b028" translate="yes" xml:space="preserve">
          <source>The latex names of all possible model parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f271436302582c861fad2fba58c0bff63207a186" translate="yes" xml:space="preserve">
          <source>The least squares estimates fit low income observations quite poorly (i.e. the OLS line passes over most low income households)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c07630352668a9b7dca3ecb115709f97772b9fb" translate="yes" xml:space="preserve">
          <source>The least squares estimator rho function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8157feb39935e5fa6904a462ad0b4fcbf0a35b5" translate="yes" xml:space="preserve">
          <source>The least squares estimator weighting function for the IRLS algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c3366eb559305c8bee4d053542349507fca0b4" translate="yes" xml:space="preserve">
          <source>The leave-one-out kernel estimator of \(f_{-i}\) is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d0c3343a70656a7658e8d82fbeefb42bb78eb3" translate="yes" xml:space="preserve">
          <source>The leave-one-out likelihood function for the unconditional KDE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87cf104fd89f54dbe9ca45d8cf5fba7fffe71ba" translate="yes" xml:space="preserve">
          <source>The leave-one-variable-out (LOVO) auxiliary regression are currently not used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e8cea12a5a7c86dcdc5daa5144605b9c426d9e" translate="yes" xml:space="preserve">
          <source>The level of significance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce10c65c2f476e7e86f19571f7e3c82857084506" translate="yes" xml:space="preserve">
          <source>The level/trend components can be specified using the boolean keyword arguments &lt;code&gt;level&lt;/code&gt;, &lt;code&gt;stochastic_level&lt;/code&gt;, &lt;code&gt;trend&lt;/code&gt;, etc., or all at once as a string argument to &lt;code&gt;level&lt;/code&gt;. The following table shows the available model specifications:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ce8c3834a5deeed13d4aea7579ffbc192abfe3" translate="yes" xml:space="preserve">
          <source>The likelihood drops by 0.3 when we fix the correlation parameter to 0. Comparing 2 x 0.3 = 0.6 to the chi^2 1 df reference distribution suggests that the data are very consistent with a model in which this parameter is equal to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb1de4d8aa99d3c471da4d3df9591262dabe8e0" translate="yes" xml:space="preserve">
          <source>The likelihood function evaluated at params.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3a2c04365d91d8c4de4b20dbd37fad046eefcf" translate="yes" xml:space="preserve">
          <source>The likelihood function for the OLS model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73662cb503c5a529f42cb3e240cb36f1ff96f817" translate="yes" xml:space="preserve">
          <source>The limit of agreements expressed in terms of the standard deviation of the differences. If &lt;code&gt;md&lt;/code&gt; is the mean of the differences, and &lt;code&gt;sd&lt;/code&gt; is the standard deviation of those differences, then the limits of agreement that will be plotted will be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="befa0156b2182f61ba458f54bfe8bc15b77d2f9b" translate="yes" xml:space="preserve">
          <source>The linear Gaussian Kalman filter is used to return pre-sample fitted values. The exact initial Kalman Filter is used. See Durbin and Koopman in the references for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b1963a393055f59213f990946f683442270935" translate="yes" xml:space="preserve">
          <source>The linear predictor is the optimal h-step ahead forecast in terms of mean-squared error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52df26860163cbfe85f6141feb0b42809b682b8" translate="yes" xml:space="preserve">
          <source>The link functions are the same as for GLM, currently implemented are the following. Not all link functions are available for each distribution family. The list of available link functions can be obtained by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd6aae10675d49dc08280ac64ddef419bfc903b" translate="yes" xml:space="preserve">
          <source>The link functions currently implemented are the following. Not all link functions are available for each distribution family. The list of available link functions can be obtained by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ad970e679ad404df8c09f97839584c969545d4" translate="yes" xml:space="preserve">
          <source>The lists of arrays to delete are maintained as attributes of the result and model instance, except for cached values. These lists could be changed before calling remove_data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf3b6e6d47dae30ae3ae38c28fc7643b61e9a11" translate="yes" xml:space="preserve">
          <source>The log likelihood of the model evaluated at &lt;code&gt;params&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ad2433de5bbfe4422869821d171dae704712f4" translate="yes" xml:space="preserve">
          <source>The log transform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d05693dea1eacffe5b881128948710bfebf372" translate="yes" xml:space="preserve">
          <source>The log-likelihood function for each observation in terms of the fitted mean response for the Binomial distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685203b0137f4accd3848520490168cfe843f9fa" translate="yes" xml:space="preserve">
          <source>The log-likelihood function for each observation in terms of the fitted mean response for the Gamma distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998b1962807a39623eadca5a0cef9a09445b0f36" translate="yes" xml:space="preserve">
          <source>The log-likelihood function for each observation in terms of the fitted mean response for the Gaussian distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ef68e47d7b207ab937414527c2e9fa90b9360c" translate="yes" xml:space="preserve">
          <source>The log-likelihood function for each observation in terms of the fitted mean response for the Inverse Gaussian distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b086a2f51665791b22507c3634d97655e9085f35" translate="yes" xml:space="preserve">
          <source>The log-likelihood function for each observation in terms of the fitted mean response for the Negative Binomial distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a766125c70b749bdd3192d53f382a0377ebf60b0" translate="yes" xml:space="preserve">
          <source>The log-likelihood function for each observation in terms of the fitted mean response for the Poisson distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3946367c536bda8db82aa1d0754b0638086cb8be" translate="yes" xml:space="preserve">
          <source>The log-likelihood function for each observation in terms of the fitted mean response for the Tweedie distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="193ebf6c23ed2fdc2d2e7c413496f257c804d861" translate="yes" xml:space="preserve">
          <source>The log-likelihood function for each observation in terms of the fitted mean response for the distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4d888b8463e79a87917f237cffedfeb219b96f" translate="yes" xml:space="preserve">
          <source>The log-likelihood function for the normal distribution is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19e0df84d5ee670f056fae05caab4809e6b4342" translate="yes" xml:space="preserve">
          <source>The log-likelihood function in terms of the fitted mean response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290868596fa08370b7b9a729548c720e476ab131" translate="yes" xml:space="preserve">
          <source>The log-likelihood value at &lt;code&gt;params&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66cfaceef60c1ea67e544336294b91076ffe72b4" translate="yes" xml:space="preserve">
          <source>The logistic cumulative distribution function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33f174899092d08ff73bc228cbe7d08b265db538" translate="yes" xml:space="preserve">
          <source>The logistic probability density function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab3170485022ee30b3236ef2471b4c07a8d8d28" translate="yes" xml:space="preserve">
          <source>The logit transform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c1b57d4f73aedb24c95ebb8223a0c83f2f5ea4" translate="yes" xml:space="preserve">
          <source>The loglikelihood for an ARMA model using the Kalman Filter recursions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee05cc5aa73dd1f265e8d70c2fc829ef097ff7f" translate="yes" xml:space="preserve">
          <source>The loglikelihood of an AR(p) process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc9005c34ee139917de1bb6ab027e24a4f737cb" translate="yes" xml:space="preserve">
          <source>The main features of the fitted survival distribution can be seen by calling the &lt;code&gt;summary&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97a1191b8cf8dcd0c65668c555b1d72a51b1409" translate="yes" xml:space="preserve">
          <source>The main function that statsmodels has currently available for interrater agreement measures and tests is Cohen&amp;rsquo;s Kappa. Fleiss&amp;rsquo; Kappa is currently only implemented as a measures but without associated results statistics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4512c6a482d768b645208b0fc105021fcb125246" translate="yes" xml:space="preserve">
          <source>The main reference for empirical likelihood is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2966f27a2e72d95f16e7ffe54ff5ec5bb56e31a" translate="yes" xml:space="preserve">
          <source>The marginal mean structure is \(E[Y|X,Z] = X*\beta\). If only the marginal mean structure is of interest, GEE is a good alternative to mixed models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9385d20bf36b1844f8ebac43db73b9770068ee86" translate="yes" xml:space="preserve">
          <source>The martingale residuals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a64ae0717fe143b38a129fdc5a0f85027eb5a8b" translate="yes" xml:space="preserve">
          <source>The matplotlib figure on which the histograms were drawn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36071e9dee9612c9f68f4e1c76a093458499ceab" translate="yes" xml:space="preserve">
          <source>The matplotlib figure on which the plot id drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6226dd410485ef9357844656d8d7b8074abb68a6" translate="yes" xml:space="preserve">
          <source>The matplotlib figure on which the plot is drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e385a80fb09af2f1cbe408a138029bad5e0b3a49" translate="yes" xml:space="preserve">
          <source>The matrix &lt;code&gt;r_matrix&lt;/code&gt; is assumed to be non-singular. More precisely,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="115e16f0d4ad504d945d278c129699a771532753" translate="yes" xml:space="preserve">
          <source>The matrix \(T\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bee64d42587b6efef524086095652250573cea0" translate="yes" xml:space="preserve">
          <source>The matrix is represented internally in the form Diag^{1/2}(I + factor * scales * factor&amp;rsquo;)Diag^{1/2}, where &lt;code&gt;Diag&lt;/code&gt; and &lt;code&gt;scales&lt;/code&gt; are diagonal matrices, and &lt;code&gt;factor&lt;/code&gt; is an orthogonal matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bde63afbf120b666a59cce5ac21d7689b71f4e6" translate="yes" xml:space="preserve">
          <source>The mean is not a robust estimator of location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa70ba2edc0c4abc0e9962739c308748527a86c7" translate="yes" xml:space="preserve">
          <source>The median curve is the curve with the highest band depth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c522ade6c17fd8e7cb492ac7937741c945a0a6f3" translate="yes" xml:space="preserve">
          <source>The median curve is the curve with the highest probability on the reduced space of a Principal Component Analysis (PCA).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74f5753685450e30a39b2f31b9371d1d5b140af" translate="yes" xml:space="preserve">
          <source>The median, on the other hand, is a robust estimator with a breakdown point of 50%</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887b13b6a5a3755fb07d5619e8aa47558d4a2226" translate="yes" xml:space="preserve">
          <source>The mediator model class must implement &lt;code&gt;get_distribution&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35537b9e4d4318fd07bb6bbf1a7aa4d81a5b2007" translate="yes" xml:space="preserve">
          <source>The memory conservation method is defined by a collection of boolean flags, and is internally stored as a bitmask. The methods available are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5d7305c96f0f5e29ec2bd16a0b3e1ba3db539e" translate="yes" xml:space="preserve">
          <source>The method &amp;lsquo;BD2&amp;rsquo; checks for each curve whether it lies completely inside bands constructed from two curves. All permutations of two curves in the set of curves are used, and the band depth is normalized to one. Due to the complete curve having to fall within the band, this method yields a lot of ties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d23b8bfcccc2fd758381ff2e053e280049545ea" translate="yes" xml:space="preserve">
          <source>The method &amp;lsquo;MBD&amp;rsquo; is similar to &amp;lsquo;BD2&amp;rsquo;, but checks the fraction of the curve falling within the bands. It therefore generates very few ties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a88d40393cb49f3bae1dc549342f7a09bef832ee" translate="yes" xml:space="preserve">
          <source>The method is based on the approach used in SAS, documented here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21cc9371e937b34b67774774240f0ff72748f27" translate="yes" xml:space="preserve">
          <source>The methods described here are mainly for two-way tables. Multi-way tables can be analyzed using log-linear models. Statsmodels does not currently have a dedicated API for loglinear modeling, but Poisson regression in &lt;code&gt;statsmodels.genmod.GLM&lt;/code&gt; can be used for this purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21dba5aff4b2f6adc0cb80edc4d6e8b340d029a7" translate="yes" xml:space="preserve">
          <source>The model can be written as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e834649522113e170856bf799501d4ef21324c79" translate="yes" xml:space="preserve">
          <source>The model class is &lt;code&gt;MarkovAutoregression&lt;/code&gt; in the time-series part of &lt;code&gt;Statsmodels&lt;/code&gt;. In order to create the model, we must specify the number of regimes with &lt;code&gt;k_regimes=2&lt;/code&gt;, and the order of the autoregression with &lt;code&gt;order=4&lt;/code&gt;. The default model also includes switching autoregressive coefficients, so here we also need to specify &lt;code&gt;switching_ar=False&lt;/code&gt; to avoid that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed6010a6779ee78272eb4d4c4b5517f34da60c9" translate="yes" xml:space="preserve">
          <source>The model class is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b766dd98bcc7b8ce4d04b9e5c2786ffc6d7efde" translate="yes" xml:space="preserve">
          <source>The model class must meet the following conditions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0608c5a01f8ddac23e9949a78b671eb0a7b270" translate="yes" xml:space="preserve">
          <source>The model classes are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c478506ac6534b35312ca22dd5ea9e0a920c314e" translate="yes" xml:space="preserve">
          <source>The model considered in this example is regression with ARMA(1,1) errors. The process is then written:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed1a193b8b0fade20d46e32c018234a0b2c6506" translate="yes" xml:space="preserve">
          <source>The model degree of freedom, defined as the rank of the regressor matrix minus 1 if a constant is included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef976507710d7cbdbf43d0ff6ea60656a28ea0f" translate="yes" xml:space="preserve">
          <source>The model degrees of freedom. This is equal to &lt;code&gt;p&lt;/code&gt; - 1, where &lt;code&gt;p&lt;/code&gt; is the number of regressors. Note that the intercept is not counted as using a degree of freedom here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cadf92d00c6498c7b863df251645e8d83c1baf6" translate="yes" xml:space="preserve">
          <source>The model in question is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b3fdc498f1eb1befa0b2f4170ede722b8710dd" translate="yes" xml:space="preserve">
          <source>The model is assumed to have AR(p) errors, AR(p) parameters and regression coefficients are estimated iteratively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a907ba352ca18b4996393dae4490afd93a5bfa8f" translate="yes" xml:space="preserve">
          <source>The model is assumed to have the following moment condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a0a4dc60d2d6831ab3abd9d4dba021b7c663c3" translate="yes" xml:space="preserve">
          <source>The model must have a &lt;code&gt;predict&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb85d411406ea44f039c7d9a3e8b833135b659c" translate="yes" xml:space="preserve">
          <source>The model we are interested in has a vector of non-negative integers as dependent variable (&lt;code&gt;los&lt;/code&gt;), and 5 regressors: &lt;code&gt;Intercept&lt;/code&gt;, &lt;code&gt;type2&lt;/code&gt;, &lt;code&gt;type3&lt;/code&gt;, &lt;code&gt;hmo&lt;/code&gt;, &lt;code&gt;white&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5292a218ac5d5fbc61648767697e3a1184595cab" translate="yes" xml:space="preserve">
          <source>The models in this category have been checked for basic cases, but might be more exposed to numerical problems than the complete implementation. For example, count.Poisson has been added using only the generic maximum likelihood framework, the standard errors are based on the numerical evaluation of the Hessian, while discretemod.Poisson uses analytical Gradients and Hessian and will be more precise, especially in cases when there is strong multicollinearity. On the other hand, by subclassing GenericLikelihoodModel, it is easy to add new models, another example can be seen in the zero inflated Poisson model, miscmodels.count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09fa54761ff66bc50d08971db8ae79f923d49ae9" translate="yes" xml:space="preserve">
          <source>The most important reason we need to specify a new &lt;code&gt;update&lt;/code&gt; method is because we have three new parameters that we need to place into the state space formulation. In particular we let the parent &lt;code&gt;DynamicFactor.update&lt;/code&gt; class handle placing all the parameters except the three new ones in to the state space representation, and then we put the last three in manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4e163efc46d337ea9022d4a3829909b195543a" translate="yes" xml:space="preserve">
          <source>The most simple use case is to take a dictionary and plot the result</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33bc5ac415ccd05e28371df4a5861ac2927e5f3e" translate="yes" xml:space="preserve">
          <source>The multiplicative model is Y[t] = T[t] * S[t] * e[t]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a98d63abc92848842add5fea1905fbdcff7053" translate="yes" xml:space="preserve">
          <source>The multivariate CDF for mixed data (continuous and ordered/unordered discrete) is estimated by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247fb36fbb201d925c83faad8603ff1cc0a2492f" translate="yes" xml:space="preserve">
          <source>The multivariate conditional CDF for mixed data (continuous and ordered/unordered discrete) is estimated by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37acdb4093448aebb7a5ab0c6aa1e740b7b177d" translate="yes" xml:space="preserve">
          <source>The name &amp;lsquo;cox_snell&amp;rsquo; is idiosyncratic and is simply used for convenience following the approach suggested in Cox and Snell (1968). Further note that \(cox\_snell(x) = \frac{3}{2}*x^{2/3} * hyp2f1(2/3.,1/3.,5/3.,x)\) where hyp2f1 is the hypergeometric 2f1 function. The Anscombe residuals are sometimes defined in the literature using the hyp2f1 formulation. Both betainc and hyp2f1 can be found in scipy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ebc11c90e1ae02c2a3a58f65afb62fbbd0f307" translate="yes" xml:space="preserve">
          <source>The negative binomial link function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bc2a0659d72b972c3e74d15e908e5065e9b3dd7" translate="yes" xml:space="preserve">
          <source>The negative binomial link function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64756b27715ffec3a2d4b78ca957cf4d96102df" translate="yes" xml:space="preserve">
          <source>The negative binomial model gives slightly different results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e37ee3a4b651025a1dd1a1cd743eb3d6d299a7c" translate="yes" xml:space="preserve">
          <source>The new part of this model is that there is allowed to be a annual seasonal effect (it is annual even though the periodicity is 4 because the dataset is quarterly). The second difference is that this model uses the log of the data rather than the level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01438ecad958d3a868b0dced6781680632b89572" translate="yes" xml:space="preserve">
          <source>The next \(m^2 imes p\) parameters are used to create the &lt;code&gt;p&lt;/code&gt; coefficient matrices for the vector autoregression describing the factor transition. They are transformed in &lt;code&gt;transform_params&lt;/code&gt; to enforce stationarity of the VAR(p). They are placed so as to make the transition matrix a companion matrix for the VAR. In particular, we assume that the first \(m^2\) parameters fill the first coefficient matrix (starting at [0,0] and filling along rows), the second \(m^2\) parameters fill the second matrix, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2b88f5e08f38de7ebff68e03ea12ad27083d82" translate="yes" xml:space="preserve">
          <source>The next \(n\) parameters provide variances for the error_cov errors in the observation equation. They fill in the diagonal of the observation covariance matrix, and are constrained to be positive by &lt;code&gt;transofrm_params&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c02afa4e40caa0095881bf5959df611e7e11392" translate="yes" xml:space="preserve">
          <source>The next group are mostly helper functions that are not separately tested or insufficiently tested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb2e4dcb49b45dddcf13259090e2a2becd841c6" translate="yes" xml:space="preserve">
          <source>The next method is an unobserved components model, where the trend is modeled as a random walk and the cycle is modeled with an ARIMA model - in particular, here we use an AR(4) model. The process for the time series can be written as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00bc3c28bf8a3d40d1401d161b58d52e71d1f3c" translate="yes" xml:space="preserve">
          <source>The non-outlying region is defined as the band made up of all the non-outlying curves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17982afbfca4c97896d6d119c8c38bf3e51aab59" translate="yes" xml:space="preserve">
          <source>The notable points of this plot are that the fitted line has slope $\beta_k$ and intercept zero. The residuals of this plot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd1ec0c8b85f0a074d69397a084baa4a91d797e" translate="yes" xml:space="preserve">
          <source>The notation for the state-space form follows Durbin and Koopman (2001).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad686a5c2ebe3035ef976b71c2feb8841bbc13a" translate="yes" xml:space="preserve">
          <source>The null hypothesis for all four test is that the coefficients corresponding to past values of the second time series are zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5912e89c461abbd6799eea061f8c245bb725566" translate="yes" xml:space="preserve">
          <source>The null hypothesis is no cointegration. Variables in y0 and y1 are assumed to be integrated of order 1, I(1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21cae655e5938ea945b494bbe60bae451224e277" translate="yes" xml:space="preserve">
          <source>The null hypothesis is of no heteroskedasticity. That means different things depending on which alternative is selected:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233cf608fea189fddc76ad667a9d7ad07e0842f5" translate="yes" xml:space="preserve">
          <source>The null hypothesis of the Augmented Dickey-Fuller is that there is a unit root, with the alternative that there is no unit root. If the pvalue is above a critical size, then we cannot reject that there is a unit root.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07ea3e560beb0143ff35dc43049a479b294cab7" translate="yes" xml:space="preserve">
          <source>The null hypothesis of the test is that there is no serial correlation. The Durbin-Watson test statistics is defined as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c15fcb4dec1c6c877ede97de57c206617a31501d" translate="yes" xml:space="preserve">
          <source>The null hypothesis of the test statistic is for an independent and identically distributed (i.i.d.) time series, and an unspecified alternative hypothesis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d77c1645512561442cf1948f1baa5a7b12b51f" translate="yes" xml:space="preserve">
          <source>The number of high-frequency observations that sum to make an aggregate low-frequency observation. &lt;code&gt;k&lt;/code&gt; is used with &lt;code&gt;freq&lt;/code&gt; == &amp;ldquo;other&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196b16b3b61daab526a906e8bf09d6a6117ea898" translate="yes" xml:space="preserve">
          <source>The number of observations &lt;code&gt;n&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7fabfd49c1b997d4cd37012b69febf335f03c12" translate="yes" xml:space="preserve">
          <source>The number of observations n</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4a5f7f95faf61df17a7e600e8b46c5309fb5d2" translate="yes" xml:space="preserve">
          <source>The number of observations n.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6053d3e47e4b1798a343a053b0c02faf6fb639d6" translate="yes" xml:space="preserve">
          <source>The number of trials</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7248a24fb42bfd42e5c4503886b62239b181b5" translate="yes" xml:space="preserve">
          <source>The object returned from &lt;code&gt;fit&lt;/code&gt; must have a &lt;code&gt;params&lt;/code&gt; attribute that is an array-like object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae7b0af30d6a9cc2fab3a8ce7376c7679dbd3af" translate="yes" xml:space="preserve">
          <source>The object returned from &lt;code&gt;fit&lt;/code&gt; must have a cov_params method that returns a square array-like object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e38bf8b3be0be005d5a20c0b86c719930b307695" translate="yes" xml:space="preserve">
          <source>The observation equations is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c93eb991072e7408be46445f902da09709b6ca" translate="yes" xml:space="preserve">
          <source>The observed Z-scores consist of both null and non-null values. The fitted distribution of null Z-scores is Gaussian, but may have non-zero mean and/or non-unit scale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1383d4ecb4ef66ceb857af04e20f6cbd6c8b6cd7" translate="yes" xml:space="preserve">
          <source>The one-dimensional search for the optimal value of k is not convex, so a local minimum could be obtained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e52662761c7679b8417042775952fb81829bb4" translate="yes" xml:space="preserve">
          <source>The only additional parameters to be estimated via MLE are the variances of any included stochastic components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8faf836a46f1189e69db246030827afcf2879f11" translate="yes" xml:space="preserve">
          <source>The only currently known case is a perfect fit in robust linear model estimation. For RLM, if residuals are equal to zero, then it does not cause an exception, but having this perfect fit can produce NaNs in some results (scale=0 and 0/0 division) (issue #55).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0d859d4d982a438e01348ec0afcc854fbb9b07" translate="yes" xml:space="preserve">
          <source>The optimizer selects possibly parameter values in an unconstrained way. That's not usually desired (since variances can't be negative, for example), and &lt;code&gt;transform_params&lt;/code&gt; is used to transform the unconstrained values used by the optimizer to constrained values appropriate to the model. Variances terms are typically squared (to force them to be positive), and AR lag coefficients are often constrained to lead to a stationary model. &lt;code&gt;untransform_params&lt;/code&gt; is used for the reverse operation (and is important because starting parameters are usually specified in terms of values appropriate to the model, and we need to convert them to parameters appropriate to the optimizer before we can begin the optimization routine).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056c63c3790f914c0cfab8d31cd2750131b5769d" translate="yes" xml:space="preserve">
          <source>The orders of each of the polynomials in the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40124ef643041bfdf6bf32f92aca2df9fa2b7152" translate="yes" xml:space="preserve">
          <source>The output of each of these models is an estimate of the trend component $\mu_t$ and an estimate of the cyclical component $\eta_t$. Qualitatively the estimates of trend and cycle are very similar, although the trend component from the HP filter is somewhat more variable than those from the unobserved components models. This means that relatively mode of the movement in the unemployment rate is attributed to changes in the underlying trend rather than to temporary cyclical movements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24a7b8ae2cadee78e490cef7ef77c9c66263ca0" translate="yes" xml:space="preserve">
          <source>The overall log-density: log p(y, fe, vc, vcp).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee71b43f2597771dec13bf46d0e98c69143798d" translate="yes" xml:space="preserve">
          <source>The p x p normalized covariance of the design / exogenous data. This is approximately equal to (X.T X)^(-1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f0ab7c00a5d6413dbf87ab90eea6609894c1511" translate="yes" xml:space="preserve">
          <source>The p-value corresponding to the test statistic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36239254b15254529e3e8c43462ad701d481484" translate="yes" xml:space="preserve">
          <source>The p-value for M is calculated using the binomial distrubution and can be intrepreted the same as for a t-test. The test-statistic is distributed Binom(min(N(+), N(-)), n_trials, .5) where n_trials equals N(+) + N(-).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e9ec49331d1c68c2602f5ca2b89f037875f12a" translate="yes" xml:space="preserve">
          <source>The p-value is based on the chi-square distribution which requires that the sample size is not very small to be a good approximation of the true distribution. For 2x2 contingency tables the exact distribution can be obtained with &lt;code&gt;mcnemar&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c545b35e7f340008278af6f3321f4b6f46fe38" translate="yes" xml:space="preserve">
          <source>The p-values are obtained through regression surface approximation from MacKinnon 1994, but using the updated 2010 tables. If the p-value is close to significant, then the critical values should be used to judge whether to reject the null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212845dd8a0942ebd60360b346ac0e682ce27270" translate="yes" xml:space="preserve">
          <source>The parameter $\lambda_c$ (the frequency of the cycle) is an additional parameter to be estimated by MLE. If the seasonal effect is stochastic, then there is one another parameter to estimate (the variance of the error term - note that both of the error terms here share the same variance, but are assumed to have independent draws).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7b11f26d46b750ecfa4b40508d73a6aacee2ad" translate="yes" xml:space="preserve">
          <source>The parameter &lt;code&gt;X&lt;/code&gt; is \(X\beta\) in the above formula.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e2b8391ff8de1193a034710130e2d8ecc2afa27" translate="yes" xml:space="preserve">
          <source>The parameter &lt;code&gt;X&lt;/code&gt; is \(x_{i}\beta\) in the above formula.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b7bc2faac11704cd10a6f2c62e5de4c2b411ee" translate="yes" xml:space="preserve">
          <source>The parameter \(\lambda_c\) (the frequency of the cycle) is an additional parameter to be estimated by MLE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c13e6ab58e53834b6283d8598f1be30c2cd182aa" translate="yes" xml:space="preserve">
          <source>The parent class for one-parameter exponential families.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bc7fcbb90125c7db6dae50a6d9f0eec613e5d96" translate="yes" xml:space="preserve">
          <source>The parent class for the norms used for robust regression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0c8187ba0b9bf8afaae801cd68a9ec93d9d2b4" translate="yes" xml:space="preserve">
          <source>The partial autocorrelation function is a mixture of exponentials and dampened sine waves after (p-q) lags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121debce8fec491bb114bd9aa109c4b9f1412092" translate="yes" xml:space="preserve">
          <source>The partial autocorrelation function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc71480b72267233f8a336e7dd1329f60e2ceb9" translate="yes" xml:space="preserve">
          <source>The penalty is the &lt;code&gt;elastic net&lt;/code&gt; penalty, which is a combination of L1 and L2 penalties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae2617a3e574ae26b0647c9d3c4cdcac87734f4" translate="yes" xml:space="preserve">
          <source>The periodicity (number of &amp;ldquo;seasons&amp;rdquo; in a &amp;ldquo;year&amp;rdquo;) is s and the number of harmonics is h. Note that h is configurable to be less than s/2, but s/2 harmonics is sufficient to fully model all seasonal variations of periodicity s. Like the time domain seasonal term (cf. Seasonal section, above), the inclusion of the error terms allows for the seasonal effects to vary over time. The argument stochastic_freq_seasonal can be used to set one or more of the seasonal components of this type to be non-random, meaning they will not vary over time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19bc7e59a95c28679276690e43533812be957e22" translate="yes" xml:space="preserve">
          <source>The periodicity (number of seasons) is &lt;code&gt;s&lt;/code&gt;, and the defining character is that (without the error term), the seasonal components sum to zero across one complete cycle. The inclusion of an error term allows the seasonal effects to vary over time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b78b894d0cea6715dbd6c12d26974e9ceea2314b" translate="yes" xml:space="preserve">
          <source>The periodicity (number of seasons) is s, and the defining character is that (without the error term), the seasonal components sum to zero across one complete cycle. The inclusion of an error term allows the seasonal effects to vary over time (if this is not desired, \(\sigma_\omega^2\) can be set to zero using the &lt;code&gt;stochastic_seasonal=False&lt;/code&gt; keyword argument).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ba7a8e4b0c4627b3e72f267f1a9fcd8d62d440e" translate="yes" xml:space="preserve">
          <source>The periodicity &lt;code&gt;s&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a53fde0ee104e23f8248837f7ae71f55ca63ab3b" translate="yes" xml:space="preserve">
          <source>The plain text names of all possible model parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e74dd114cc8fab430f9e7afdfcda8023291681" translate="yes" xml:space="preserve">
          <source>The plot_fit function plots the fitted values versus a chosen independent variable. It includes prediction confidence intervals and optionally plots the true dependent variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ceba9f04d78d14610e9fb15436dec6933eafb51" translate="yes" xml:space="preserve">
          <source>The plot_regress_exog function is a convenience function that gives a 2x2 plot containing the dependent variable and fitted values with confidence intervals vs. the independent variable chosen, the residuals of the model vs. the chosen independent variable, a partial regression plot, and a CCPR plot. This function can be used for quickly checking modeling assumptions with respect to a single regressor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07dc33730ae6196308bfe09bba68d5d401a4da33" translate="yes" xml:space="preserve">
          <source>The pooled odds ratio is the inverse variance weighted average of the sample odds ratios of the tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b717086d54cb0c12699e5346983cecef81729b" translate="yes" xml:space="preserve">
          <source>The postulated data process is then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323bd1777d27d9b22713622e8e561d45a38dc273" translate="yes" xml:space="preserve">
          <source>The power transform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b9189ef1bcf2b60a59d748cceeb147dbf8e0cd" translate="yes" xml:space="preserve">
          <source>The predicted insample values of the response variables of the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b5fd1b208be964173a391b2e0b2b9cbb71ebcf" translate="yes" xml:space="preserve">
          <source>The primary reference for the implementation details is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2374beeb2c74f1423673a511f5e149b8566568c9" translate="yes" xml:space="preserve">
          <source>The prior for the fixed effects parameters is Gaussian with mean 0 and standard deviation &lt;code&gt;fe_p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a942cad787a20e6cf5dcf6dff3446c9c3e161d0a" translate="yes" xml:space="preserve">
          <source>The probability density (mass) function of the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2584e19ac4ce9c3235eced2b2e5d9fdd9d5cc3d" translate="yes" xml:space="preserve">
          <source>The probability density is given by the generalized product kernel estimator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c4db1824e9c7a6a9b90170697eb22152b3f43b" translate="yes" xml:space="preserve">
          <source>The probit (standard normal CDF) transform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088e77d5f7e75c09fc2d30b3de305cc377d1ad23" translate="yes" xml:space="preserve">
          <source>The procedure tests that the probability of success is the same for every group. The alternative hypothesis is that at least two groups have a different probability of success.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6e4bc9c9102da3f48e007e748736b55172d7c9" translate="yes" xml:space="preserve">
          <source>The prompt should change colors to green. Then proceed as usual to install:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d552c6f8d16a7b62260035c6c15057f10460cf29" translate="yes" xml:space="preserve">
          <source>The proportional hazards regression model class is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a68c85823429a62072ad880df650a23d293a2ad" translate="yes" xml:space="preserve">
          <source>The proportional hazards regression result class is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723e484b151620407659a93f25057cf41c8ea2eb" translate="yes" xml:space="preserve">
          <source>The provided ranges must be conformable, meaning that it must be that &lt;code&gt;end - start == nstatic + ndynamic + nforecast&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9987f409a8161acc55f54fc4796a83e6330bf66" translate="yes" xml:space="preserve">
          <source>The pseudoinverse of the design / exogenous data array. Note that RLM has no whiten method, so this is just the pseudo inverse of the design.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6939240b7c0449eb754622c42b05a465bf1d429" translate="yes" xml:space="preserve">
          <source>The psi function for Andrew&amp;rsquo;s wave</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19408543551c73aad9dc0ef7cb06f7642a0cca8" translate="yes" xml:space="preserve">
          <source>The psi function for Hampel&amp;rsquo;s estimator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb9b10aeca25d118160afa78ce9bcd73586e018c" translate="yes" xml:space="preserve">
          <source>The psi function for Huber&amp;rsquo;s t estimator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b31371d1bc8e785cc8dff83be5a50ce704a05d" translate="yes" xml:space="preserve">
          <source>The psi function for Ramsay&amp;rsquo;s Ea estimator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b480486d8f945a0ed8eaa8ace0f34bab7f85459" translate="yes" xml:space="preserve">
          <source>The psi function for Tukey&amp;rsquo;s biweight estimator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841b88ce52aa077ee44187ee4f0e70fc809cc289" translate="yes" xml:space="preserve">
          <source>The psi function for least trimmed mean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d634798040081102155e09d8e752a05fbdb156a" translate="yes" xml:space="preserve">
          <source>The psi function for the least squares estimator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb883ab00a291418b86f384b4eff67d4dd111d59" translate="yes" xml:space="preserve">
          <source>The psi function scaled by the input z</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c249c3d6c5587517eec2838e4cdad6ead00624fb" translate="yes" xml:space="preserve">
          <source>The psi function scaled by z</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b3c1fd56d361bc7fd49943e0dfe200ad57df57" translate="yes" xml:space="preserve">
          <source>The public functions and classes are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f770dab98be3490a07d6ee51f964232b00379e8" translate="yes" xml:space="preserve">
          <source>The pvalue is based on the chisquare distribution which requires that the sample size is not very small to be a good approximation of the true distribution. For 2x2 contingency tables exact distribution can be obtained with &lt;code&gt;mcnemar&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879256c3bb42ae35b4b91d879280dc48fcd1c532" translate="yes" xml:space="preserve">
          <source>The quantity theory of money suggests that &quot;a given change in the rate of change in the quantity of money induces ... an equal change in the rate of price inflation&quot; (Lucas, 1980). Following Lucas, we examine the relationship between double-sided exponentially weighted moving averages of money growth and CPI inflation. Although Lucas found the relationship between these variables to be stable, more recently it appears that the relationship is unstable; see e.g. Sargent and Surico (2010).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1be3c4220bb17a8daa9fab6f6b59581269a206b" translate="yes" xml:space="preserve">
          <source>The random effect standard deviation parameters (vcp) have log-normal prior distributions with mean 0 and standard deviation &lt;code&gt;vcp_p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6b6fda4694f4cfeceabd77238ec834d985e430" translate="yes" xml:space="preserve">
          <source>The random intercept and random slope are only weakly correlated $(0.294 / \sqrt{19.493 * 0.416} \approx 0.1)$. So next we fit a model in which the two random effects are constrained to be uncorrelated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c048eda63c7b8109be873d53775bc8af886bbc9" translate="yes" xml:space="preserve">
          <source>The recursive coefficients are available in the &lt;code&gt;recursive_coefficients&lt;/code&gt; attribute. Alternatively, plots can generated using the &lt;code&gt;plot_recursive_coefficient&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e8b8f38b87a9dc37791f47c283f12fb4f7b02f" translate="yes" xml:space="preserve">
          <source>The remaining variables (\(Z_t, d_t, H_t, T_t, c_t, R_t, Q_t\)) in the equations are matrices describing the process. Their variable names and dimensions are as follows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945a085e28fa536e84784d9815432aba8f97c198" translate="yes" xml:space="preserve">
          <source>The representation is constructed based on a vector &lt;code&gt;diag&lt;/code&gt; and rectangular matrix &lt;code&gt;root&lt;/code&gt;, such that the PSD matrix represented by the class instance is Diag + root * root&amp;rsquo;, where Diag is the square diagonal matrix with &lt;code&gt;diag&lt;/code&gt; on its main diagonal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e99db561d402c64baf9f365034b062084be374f9" translate="yes" xml:space="preserve">
          <source>The residual degree of freedom, defined as the number of observations minus the rank of the regressor matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed64a9ec11954f19334df0b351492998ef1071b0" translate="yes" xml:space="preserve">
          <source>The residual degrees of freedom. The number of observations n less the number of regressors p. Note that here p does include the intercept as using a degree of freedom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c2fd04684d223e946217d3088d5da0ca86d168" translate="yes" xml:space="preserve">
          <source>The residual degrees of freedom. This is equal &lt;code&gt;n - p&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is the number of observations and &lt;code&gt;p&lt;/code&gt; is the number of parameters. Note that the intercept is counted as using a degree of freedom here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3efa975bf102109b1e0a43c6f68123e210c5560d" translate="yes" xml:space="preserve">
          <source>The residuals for Count models are defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="710b438f617950055d7e68e785feb7b6adb96e9f" translate="yes" xml:space="preserve">
          <source>The residuals for the multinomial model are defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8cdfff99ac3ad7b08773a0b6494d1ce25328add" translate="yes" xml:space="preserve">
          <source>The residuals reflect the mean structure specified by the fixed effects and the predicted random effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0c5f191ef7fd247a9eecbc0cfb7e8f6637cb54" translate="yes" xml:space="preserve">
          <source>The response residuals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc75745a141bd0e6c2db6a9dce1bb5cdfe26e5ae" translate="yes" xml:space="preserve">
          <source>The rest of the docstring is from statsmodels.LikelihoodModel.fit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab77dbd730d9679f1a4dcc95dc0b09095a8c1a24" translate="yes" xml:space="preserve">
          <source>The rest of the docstring is from statsmodels.base.model.LikelihoodModel.fit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="109b515a0be1f6502c16a83ff1406b38db25b352" translate="yes" xml:space="preserve">
          <source>The result class is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95883b481791900a51b8b2d6cb0e1a9d9ec1647" translate="yes" xml:space="preserve">
          <source>The result for the statistical tests and the confidence interval are independent of the user specified ddof.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7046b20987487af3eb97b9791825538afdf135f1" translate="yes" xml:space="preserve">
          <source>The result is independent of the user specified ddof.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c4d4e5f3c927467a9e137f30741733b1670204" translate="yes" xml:space="preserve">
          <source>The resultant DataFrame contains six variables in addition to the DFBETAS. These are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f98775c7cdcd7232da4cb6b606b218f076de35" translate="yes" xml:space="preserve">
          <source>The resulting matrices/data frames look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf9ca2e8152cdfdc73c8bd9717547bb8c3defe0" translate="yes" xml:space="preserve">
          <source>The results can be used for a chisquare test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="377d83b3f549ae51715d18895fd912b2a3450b06" translate="yes" xml:space="preserve">
          <source>The results include an estimate of covariance matrix, (whitened) residuals and an estimate of scale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43af8ee230018178aab99ea69720b33b3154cd9e" translate="yes" xml:space="preserve">
          <source>The results object has many of the attributes and methods you would expect from other Statsmodels results objects, including standard errors, z-statistics, and prediction / forecasting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d00e9acdae403e75f949599760ec11f231cdbb" translate="yes" xml:space="preserve">
          <source>The returned corrected p-values are from the last stage of the fdr_bh linear step-up procedure (fdrcorrection0 with method=&amp;rsquo;indep&amp;rsquo;) corrected for the estimated fraction of true hypotheses. This means that the rejection decision can be obtained with &lt;code&gt;pval_corrected &amp;lt;= alpha&lt;/code&gt;, where &lt;code&gt;alpha&lt;/code&gt; is the origianal significance level. (Note: This has changed from earlier versions (&amp;lt;0.5.0) of statsmodels.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43defe2770902d28f20dd4f66f69fedcd9e7daf6" translate="yes" xml:space="preserve">
          <source>The returned corrected p-values are specific to the given alpha, they cannot be used for a different alpha.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9696284b30c6c5582623b646f726e54a1cb82c05" translate="yes" xml:space="preserve">
          <source>The returned matrix has the identity matrix as its row-wise population covariance matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b477de28eee31eda6780fe97d7e521cd7eb57c2" translate="yes" xml:space="preserve">
          <source>The returned value is a reference to the data attribute of the class and should be copied before making any changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e3c3dacdf55c80330fb88c79a8b935432221cb" translate="yes" xml:space="preserve">
          <source>The robust covariance matrix as a square ndarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e785ac38daebdd858c301597318761971feb85" translate="yes" xml:space="preserve">
          <source>The robust covariance provided here follows Liang and Zeger (1986) and agrees with R&amp;rsquo;s gee implementation. To obtain the robust standard errors reported in Stata, multiply by sqrt(N / (N - g)), where N is the total sample size, and g is the average group size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7424d56d2e8965a582bd6dc08116172f8ab44717" translate="yes" xml:space="preserve">
          <source>The robust criterion estimator function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a424447579783a171db1bfbe41f0c060437d3f" translate="yes" xml:space="preserve">
          <source>The robust criterion function for Andrew&amp;rsquo;s wave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52fd975937fc62187f1bb45360716cc094d1160c" translate="yes" xml:space="preserve">
          <source>The robust criterion function for Hampel&amp;rsquo;s estimator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e239bc15560beb603773204df57ddfcdd65ae8" translate="yes" xml:space="preserve">
          <source>The robust criterion function for Huber&amp;rsquo;s t.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b9d526fce708da2093ad677287658bb574b414" translate="yes" xml:space="preserve">
          <source>The robust criterion function for Ramsay&amp;rsquo;s Ea.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d75942ea8d4a0d8b3710a5cc84982094068f161" translate="yes" xml:space="preserve">
          <source>The robust criterion function for Tukey&amp;rsquo;s biweight estimator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d57dabe6860cdba44a4c87236e6199ab469226f" translate="yes" xml:space="preserve">
          <source>The robust criterion function for least trimmed mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df176906936403b36edc1aa44782fd9f6fdb212" translate="yes" xml:space="preserve">
          <source>The robust estimates $\hat{\beta}$ are computed by the iteratively re-weighted least squares algorithm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e501a9734a65674e705a33654e96d1f052f2839" translate="yes" xml:space="preserve">
          <source>The robust kurtosis measures are defined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a24962245c9ffba8fe891a4157aae15f03da12" translate="yes" xml:space="preserve">
          <source>The robust skewness measures are defined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3199733a7788e2ce885a318d61f65cead787eca3" translate="yes" xml:space="preserve">
          <source>The runs test could be generalized to more than 1d if there is a use case for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da6ea6926bd8bb36f2e8c16e43f30e784a13da0b" translate="yes" xml:space="preserve">
          <source>The same data can be given as a simple or hierarchical indexed Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f09b935b3b8e2c0e816f2c394058a9f8fda8624" translate="yes" xml:space="preserve">
          <source>The same options as for weight matrix also apply to the calculation of the estimate of the covariance matrix of the parameter estimates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44aa73a6b6fec76c6c86b54f15f9b9743920080c" translate="yes" xml:space="preserve">
          <source>The sandbox.nonparametric contains additional insufficiently tested classes for testing functional form and for semi-linear and single index models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07905ac9f212b48c04652cca42a3e2d36d62254e" translate="yes" xml:space="preserve">
          <source>The scale parameter &lt;code&gt;scale&lt;/code&gt; is always profiled out of the log-likelihood. In addition, if &lt;code&gt;profile_fe&lt;/code&gt; is true the fixed effects parameters are also profiled out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8971a016a5a65f71e53fc5d4467b8490e414218a" translate="yes" xml:space="preserve">
          <source>The score corresponds to the profile (concentrated) log-likelihood in which the scale parameter has been profiled out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f8115248c56a295d96fd11ae46f4c5f004ae27" translate="yes" xml:space="preserve">
          <source>The score vector that is returned is computed with respect to the parameterization defined by this model instance&amp;rsquo;s &lt;code&gt;use_sqrt&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80b939d7b72d0037ae2cb78ed0a21b1d4eb273f" translate="yes" xml:space="preserve">
          <source>The score vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6424f597d5362605ba4f59d970eb9687011e149f" translate="yes" xml:space="preserve">
          <source>The scores define the trend to which the test is most sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c476c9369a90525e73b0351a5abbeba19f599d0" translate="yes" xml:space="preserve">
          <source>The seasonal component is first removed by applying a convolution filter to the data. The average of this smoothed series for each period is the returned seasonal component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703fdb1cf6b5147b0a9efb065d99d9b3b69a3952" translate="yes" xml:space="preserve">
          <source>The seasonal component is modeled as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ff125cb3a8267b02b09069b6cf978803704dbe" translate="yes" xml:space="preserve">
          <source>The seasonal component is written as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d3dc7ceaac01c249765f6c18a3df529ffaca76" translate="yes" xml:space="preserve">
          <source>The second example augments the previous model to include the lagged value of the federal funds rate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbdfb57e5b4e265f58756f4600b38821050ea55" translate="yes" xml:space="preserve">
          <source>The second group of function are measures of fit or prediction performance, which are mostly one liners to be used as helper functions. All of those calculate a performance or distance statistic for the difference between two arrays. For example in the case of Monte Carlo or cross-validation, the first array would be the estimation results for the different replications or draws, while the second array would be the true or observed values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e15f630b7e080912f41f1ec4cd0d4849f76c01" translate="yes" xml:space="preserve">
          <source>The second method factorizes the polynomial into:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3790fbd8c63fec441c735cc4b20fed08fc8bc9d3" translate="yes" xml:space="preserve">
          <source>The sign-related identification issue described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89202069b7db67a130531f60a7742b54e556d35d" translate="yes" xml:space="preserve">
          <source>The signs test returns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e05dd976288d47df0f884f10780e12003d2b81ea" translate="yes" xml:space="preserve">
          <source>The simplest non-parametric technique for density estimation is the histogram.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c87ecf03d782c4c2a0ddc83066208e682509ae7" translate="yes" xml:space="preserve">
          <source>The slope of the fitted line is the that of &lt;code&gt;exog_i&lt;/code&gt; in the full multiple regression. The individual points can be used to assess the influence of points on the estimated coefficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f0006d5248067b1b2551e92663eb3bef48f013" translate="yes" xml:space="preserve">
          <source>The slope of the line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93456687ec45c89a8c0b70cde451ab1093360274" translate="yes" xml:space="preserve">
          <source>The smaller the step size, the more accurate the intervals will be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee71a5f473ea5993d0f9a67d4728bb4b47dadcd" translate="yes" xml:space="preserve">
          <source>The smallest eigenvalue of the corrected correlation matrix is approximately equal to the &lt;code&gt;threshold&lt;/code&gt;. If the threshold=0, then the smallest eigenvalue of the correlation matrix might be negative, but zero within a numerical error, for example in the range of -1e-16.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229e6a6b71be7bb90034b3c41b87345335f41478" translate="yes" xml:space="preserve">
          <source>The smallest eigenvalue of the corrected correlation matrix is approximately equal to the &lt;code&gt;threshold&lt;/code&gt;. In examples, the smallest eigenvalue can be by a factor of 10 smaller than the threshold, e.g. threshold 1e-8 can result in smallest eigenvalue in the range between 1e-9 and 1e-8. If the threshold=0, then the smallest eigenvalue of the correlation matrix might be negative, but zero within a numerical error, for example in the range of -1e-16.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba387d48fdff210d71de3c8a27f372a9bcd63656" translate="yes" xml:space="preserve">
          <source>The smallest eigenvalue of the intermediate correlation matrix is approximately equal to the &lt;code&gt;threshold&lt;/code&gt;. If the threshold=0, then the smallest eigenvalue of the correlation matrix might be negative, but zero within a numerical error, for example in the range of -1e-16.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d8b85570d6019585729ce29624f3bb0055ad644" translate="yes" xml:space="preserve">
          <source>The smoother can produce several types of results. The smoother output variable controls which are calculated and returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46cbcfbe225e57e2b157ddbb74efed7d8a13343" translate="yes" xml:space="preserve">
          <source>The smoother output is defined by a collection of boolean flags, and is internally stored as a bitmask. The methods available are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b350b5cf8e2271614feeecb49c869ab2be7a5102" translate="yes" xml:space="preserve">
          <source>The smoothing method can be used to override the Kalman smoother approach used. By default, the Kalman smoother used depends on the Kalman filter method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fcfae32ebecbd24e9d6673e7805169a5416bd09" translate="yes" xml:space="preserve">
          <source>The smoothing method is defined by a collection of boolean flags, and is internally stored as a bitmask. The methods available are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b595f96c01a0251e1ded84e9c2db2ce8c848660" translate="yes" xml:space="preserve">
          <source>The specific dynamic factor model in this application has 1 unobserved factor which is assumed to follow an AR(2) proces. The innovations $\varepsilon_t$ are assumed to be independent (so that $\Sigma$ is a diagonal matrix) and the error term associated with each equation, $u_{i,t}$ is assumed to follow an independent AR(2) process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a989f99196cf72513d8b80b7fce6d580e48ead4" translate="yes" xml:space="preserve">
          <source>The stability method is defined by a collection of boolean flags, and is internally stored as a bitmask. The methods available are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="630efefae5798b17d1e724bd21e644e9f74b437e" translate="yes" xml:space="preserve">
          <source>The standard deviation is not robust</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de455327e1393bb7f01a82789a0ddb539de9a0f" translate="yes" xml:space="preserve">
          <source>The standard errors are only applicable to the original, unrotated maximum likelihood solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd109682f3481db5146932117c58b8303515ce9d" translate="yes" xml:space="preserve">
          <source>The standard errors of the loadings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270d95c5efc74acd0ff3031da0afed91960efa14" translate="yes" xml:space="preserve">
          <source>The standard errors of the uniquenesses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c46de1fc05833457099a80dbadd12d57bf2c258" translate="yes" xml:space="preserve">
          <source>The starting values for the IRLS algorithm for the Binomial family.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e147f86cdcb93002ab82250f96d859d8d343435" translate="yes" xml:space="preserve">
          <source>The starting values for the IRLS algorithm for the Binomial family. A good choice for the binomial family is \(\mu_0 = (Y_i + 0.5)/2\)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071c81a9faa4f7b7d84b7cc51595dc59447f5602" translate="yes" xml:space="preserve">
          <source>The state equation is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd5165963f43f1dfde09da6b3b207d517b054b4a" translate="yes" xml:space="preserve">
          <source>The state of the covariance structure is represented through the value of the class variable &lt;code&gt;dep_params&lt;/code&gt;. The default state of a newly-created instance should correspond to the identity correlation matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c22a01cfd078b7c7a842133432c770ac8b32832a" translate="yes" xml:space="preserve">
          <source>The statistical model for each observation \(i\) is assumed to be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d682e1a4a9d17ef1c570131b2eff61cf688aafd9" translate="yes" xml:space="preserve">
          <source>The statistical model is assumed to be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf343c1886a3cffcf34481708cfe6f061ce0fd3f" translate="yes" xml:space="preserve">
          <source>The statistical test given in testfunc is calculated for all pairs and the p-values are adjusted by methods in multipletests. The p-value correction is generic and based only on the p-values, and does not take any special structure of the hypotheses into account.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f37bd4fd7e0e7ecb0b4a4bdd7e575e6eb56c1ce" translate="yes" xml:space="preserve">
          <source>The strict requirements arise because the underlying statespace and Kalman filtering classes require Fortran-ordered arrays in the wide format (shaped (&lt;code&gt;k_endog&lt;/code&gt;, &lt;code&gt;nobs&lt;/code&gt;)), and this structure is setup to prevent copying arrays in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc23e9fdb61bdd79d432c57ef67289ec1e6aecba" translate="yes" xml:space="preserve">
          <source>The string should contain a type specifier for each variable, so for example &lt;code&gt;dep_type='ccuo'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7458309ad46b967ecc009af7db0ab67cb833c923" translate="yes" xml:space="preserve">
          <source>The string should contain a type specifier for each variable, so for example &lt;code&gt;var_type='ccuo'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46728df0605e48f4e7cfae09012f1567c60e53a" translate="yes" xml:space="preserve">
          <source>The submodules that can be import heavy contain an empty &lt;code&gt;__init__.py&lt;/code&gt;, except for some testing code for running tests for the submodules. The intention is to change all directories to have an &lt;code&gt;api.py&lt;/code&gt; and empty &lt;code&gt;__init__.py&lt;/code&gt; in the next release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66ecbd0e226140af78f573ef987673e8ff2d78a" translate="yes" xml:space="preserve">
          <source>The subpackages of statsmodels include &lt;code&gt;api.py&lt;/code&gt; modules that are mainly intended to collect the imports needed for those subpackages. The &lt;code&gt;subpackage/api.py&lt;/code&gt; files are imported into statsmodels api, for example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecef7f6f37eeb73c1bb8ea747eee2db48366a70f" translate="yes" xml:space="preserve">
          <source>The summary is a datafram containing the unique event times, estimated survival function values, and related quantities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12c3a20add5d4b204edb0bc261438cd4f2a809f" translate="yes" xml:space="preserve">
          <source>The survival function S(t) = P(T &amp;gt; t) is the probability that an event time T is greater than t.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d1715b498de7976b7dd7f71e1e0883339209f7" translate="yes" xml:space="preserve">
          <source>The t distribution is the standard t distribution and not a standardized t distribution, which means that the scale parameter is not equal to the standard deviation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00bb2524da5d48cc3e1b12a823b79e4db0cc89b4" translate="yes" xml:space="preserve">
          <source>The test rejects if the 2*alpha confidence interval for the difference is contained in the &lt;code&gt;(low, upp)&lt;/code&gt; interval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a741fc2109d6ca2fac76feef9ad67d7988d139f" translate="yes" xml:space="preserve">
          <source>The test statistic is approximately equal to 2*(1-r) where &lt;code&gt;r&lt;/code&gt; is the sample autocorrelation of the residuals. Thus, for r == 0, indicating no serial correlation, the test statistic equals 2. This statistic will always be between 0 and 4. The closer to 0 the statistic, the more evidence for positive serial correlation. The closer to 4, the more evidence for negative serial correlation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1c50c3c1ff0fe109867fe9936c427d0ed08734" translate="yes" xml:space="preserve">
          <source>The test statistic is defined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c9059605d9f01101a14834eae5cc17765d73e7" translate="yes" xml:space="preserve">
          <source>The tests and the confidence interval work for multi-endpoint comparison: If d1 and d2 have the same number of rows, then each column of the data in d1 is compared with the corresponding column in d2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4965c1353432a25a6d5da93cabeb0e7294502b3c" translate="yes" xml:space="preserve">
          <source>The tests the hypothesis that the residual variance does not depend on the variables in x in the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d465f6ec106bd0014e3891c5d6a33f9e98ece378" translate="yes" xml:space="preserve">
          <source>The third accepted data structureis the np array, for which a very simple index will be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf4bb36a43562756577fb04229ce03316083f10" translate="yes" xml:space="preserve">
          <source>The three plotting methods are summarized below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf885a83dc5c49d300091ef8e1c61d8f13213cf" translate="yes" xml:space="preserve">
          <source>The thresholded matrix is returned in COO format, which can easily be converted to other sparse formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada48404af0ae24367ae23997a7fa3ff48922e85" translate="yes" xml:space="preserve">
          <source>The time frame in the original paper varied across series, but was broadly 1954-1989. Below we use data from the period 1948-2008 for all series. Although the unobserved components approach allows isolating a seasonal component within the model, the series considered in the paper, and here, are already seasonally adjusted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f1389e0401b3ffac850dc8e1f0cd3b31534f97e" translate="yes" xml:space="preserve">
          <source>The time series (in logs)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f467dfb057e031c4c7a8095a4e31b5a24c49ccbb" translate="yes" xml:space="preserve">
          <source>The time-varying transition probabilities are specified by the &lt;code&gt;exog_tvtp&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5062685103d033b28ca98857c480f66fb2e3e55c" translate="yes" xml:space="preserve">
          <source>The transpose of the Cholesky decomposition of the pseudoinverse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c45334c61d9affb3347ee5401fac867c291222" translate="yes" xml:space="preserve">
          <source>The trend component is a dynamic extension of a regression model that includes an intercept and linear time-trend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a974c963c58f27c534858ecfa842dbe09fea7b" translate="yes" xml:space="preserve">
          <source>The trend component is a dynamic extension of a regression model that includes an intercept and linear time-trend. It can be written:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7436698f225d97d2651ce0f930596f42385b8407" translate="yes" xml:space="preserve">
          <source>The true power of the state space model is to allow the creation and estimation of custom models. Usually that is done by extending the following two classes, which bundle all of state space representation, Kalman filtering, and maximum likelihood fitting functionality for estimation and results output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce70a716f8e66713063a124363308aff47b2a60" translate="yes" xml:space="preserve">
          <source>The tuple \((L,T)\)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50cdef76888a28764c62b878304e60747a67872b" translate="yes" xml:space="preserve">
          <source>The two-step method of Benjamini, Krieger and Yekutiel that estimates the number of false hypotheses will be available (soon).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ff31ff7357e797554641f1ba387639a138520d" translate="yes" xml:space="preserve">
          <source>The type of the dependent variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6258fa8898736819d416d4058d14f081fb8e5d" translate="yes" xml:space="preserve">
          <source>The type of the variables, one character per variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f881489abe6a7189b5f13ed2301db7601e913c3" translate="yes" xml:space="preserve">
          <source>The type of the variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24ce8fdeae576d9056f69b549a9724a5d6ddd12" translate="yes" xml:space="preserve">
          <source>The types of exog that are supported depends on whether a formula was used in the specification of the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7f71663671a70a421e36620011245315165fb8" translate="yes" xml:space="preserve">
          <source>The unadjusted p-value is stats.t.sf(abs(resid), df) where df = df_resid - 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="590c35960ac46fcc2fff9e656d7c68e72c5ab241" translate="yes" xml:space="preserve">
          <source>The underlying population for a contingency table is described by a &lt;strong&gt;distribution table&lt;/strong&gt;\(P_{i, j}\). The elements of \(P\) are probabilities, and the sum of all elements in \(P\) is 1. Methods for analyzing contingency tables use the data in \(T\) to learn about properties of \(P\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998b81a87ea0f4c983336cd7c027a91d5e762993" translate="yes" xml:space="preserve">
          <source>The unobserved components model available in Statsmodels can be written as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229e0f8fb1b6cdd8137f1eef28b32acead00681b" translate="yes" xml:space="preserve">
          <source>The usage is quite often domain and model specific; however, we have chosen to use &lt;code&gt;endog&lt;/code&gt; and &lt;code&gt;exog&lt;/code&gt; almost exclusively. A mnenomic hint to keep the two terms apart is that exogenous has an &amp;ldquo;x&amp;rdquo;, as in x-variable, in it&amp;rsquo;s name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59227d915400a1140f42c87184095e7b832cdc75" translate="yes" xml:space="preserve">
          <source>The use the CDF of a scipy.stats distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d084574fd3638599e6cdbf24a213f48b77b3c926" translate="yes" xml:space="preserve">
          <source>The value of the Poisson CDF at each point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f3bc3080da699a7ad15f37378c8327717b879f" translate="yes" xml:space="preserve">
          <source>The value of the function is minimized by the &lt;code&gt;_cv_ls&lt;/code&gt; method of the &lt;code&gt;GenericKDE&lt;/code&gt; class to return the bw estimates that minimize the distance between the estimated and &amp;ldquo;true&amp;rdquo; probability density.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f0871792248b5c2a6f49312f8668edc83b9db4" translate="yes" xml:space="preserve">
          <source>The value of the likelihood function of the fitted model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb3dcb586060a3e9665655bae5d1f7b72a8e23f" translate="yes" xml:space="preserve">
          <source>The variance components are estimated using least squares regression of the products r*r&amp;rsquo;, for standardized residuals r and r&amp;rsquo; in the same group, on a vector of indicators defining which variance components are shared by r and r&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59c6aa7a730bfa1dbdd1e259edbce50f9d861349" translate="yes" xml:space="preserve">
          <source>The variance components formulas are processed separately for each group. If a variable is categorical the results will not be affected by whether the group labels are distinct or re-used over the top-level groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c85c3d1ff749ee3becbc851aa0781201b1c145db" translate="yes" xml:space="preserve">
          <source>The variance inflation factor is a measure for the increase of the variance of the parameter estimates if an additional variable, given by exog_idx is added to the linear regression. It is a measure for multicollinearity of the design matrix, exog.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e4f213d97db4776189eae8370608bbf6caa15b" translate="yes" xml:space="preserve">
          <source>The variance/covariance matrix can be of a linear contrast of the estimates of params or all params multiplied by scale which will usually be an estimate of sigma^2. Scale is assumed to be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a1e5f52c1cd3a7ee9e354838e3f5463dfdaed37" translate="yes" xml:space="preserve">
          <source>The variants of this model are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18706d6875512762869ff063a50861912e34c86f" translate="yes" xml:space="preserve">
          <source>The various kernel functions available using the &lt;code&gt;kernel&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a2624b1004bd614a04c62818bc92d893735547e" translate="yes" xml:space="preserve">
          <source>The version in the &lt;code&gt;DynamicFactor&lt;/code&gt; class constrains the factor lag coefficients to be stationary as though it was an AR(4) model. Since we actually have an AR(2) model, we need to re-do the constraint. We also set the last two autoregressive coefficients to be zero here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793db2a5655048f8fbfee439864aeea1eaf11b53" translate="yes" xml:space="preserve">
          <source>The version in the &lt;code&gt;DynamicFactor&lt;/code&gt; class is expecting 3 fewer parameters than we have now. At a minimum, we need to handle the three new parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8576c218e15280c70cb93660f380f64938dd125" translate="yes" xml:space="preserve">
          <source>The weights are presumed to be (proportional to) the inverse of the variance of the observations. That is, if the variables are to be transformed by 1/sqrt(W) you must supply weights = 1/W.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d922aee45be7182f87d388856a9a9837f556ad9" translate="yes" xml:space="preserve">
          <source>The whitened design matrix \(\Psi^{T}X\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086b34fdb0000fef6deb14e46a950d7f87723fc1" translate="yes" xml:space="preserve">
          <source>The whitened response variable \(\Psi^{T}Y\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc74a3be788da1b4073820f1537198dae879029c" translate="yes" xml:space="preserve">
          <source>The x-axis is scaled linearly with the quantiles, but the probabilities are used to label the axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724c22c88c98ff99bcec63d6776e0850fa0caf25" translate="yes" xml:space="preserve">
          <source>Their paper begins:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e9c2ee3a18d57e62f527c502b56fff4d8edf90" translate="yes" xml:space="preserve">
          <source>Them, we add a constant to the matrix of regressors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd6c243595055651baea13470565faa82793d61" translate="yes" xml:space="preserve">
          <source>Then in the statsmodels directory do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4a35872c3102901a600d41136a364f61e7fbce" translate="yes" xml:space="preserve">
          <source>Then we can consider model selection using the Akaike information criteria (AIC), but running the model for each variant and selecting the model with the lowest AIC value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb6914f03c1af72eac74c75848cd5210daadc19" translate="yes" xml:space="preserve">
          <source>Then, we fit the GLM model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f9137d986306004223c2a796d28ebd8f5de4744" translate="yes" xml:space="preserve">
          <source>Then, we fit the model and extract some information:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1dd25e5aa270019da2b1ba127a534a12eecee7c" translate="yes" xml:space="preserve">
          <source>Then, we take the square root of the ratio of the biggest to the smallest eigen values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bed291dcdb12a778c1e8ba050c34d3858c5a642" translate="yes" xml:space="preserve">
          <source>Theoretical autocorrelation function of an ARMA process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89a421d65723a876aad46dfc3c3020b3048fff1" translate="yes" xml:space="preserve">
          <source>Theoretical autocovariance function of ARMA process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65f22c41dce22a9502a9ea82f13a5e99d484f3f" translate="yes" xml:space="preserve">
          <source>Theoretical properties of an ARMA process for specified lag-polynomials</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a87f99405e3ad2f296c7cf559c6f2cfd0599eb" translate="yes" xml:space="preserve">
          <source>There are a couple of things to note here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e6560ddafaddec109dc4adef7c37a352cf6007d" translate="yes" xml:space="preserve">
          <source>There are a variety of tools used for state space modeling or by the SARIMAX class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce079dbabe5fd88a8d36cb84ce6cbf3f762e2c8f" translate="yes" xml:space="preserve">
          <source>There are numerical problems if there is no zero-inflation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ec0f5a8e8feeb431f45e1f9d8ff9f800373f42" translate="yes" xml:space="preserve">
          <source>There are several things to notice from the summary output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e5d32e203fe242f62acecabd9c396f93d813069" translate="yes" xml:space="preserve">
          <source>There are several types of options available for controlling the Kalman filter operation. All options are internally held as bitmasks, but can be manipulated by setting class attributes, which act like boolean flags. For more information, see the &lt;code&gt;set_*&lt;/code&gt; class method documentation. The options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba020abe211dea9428c671c4978238026f2b4428" translate="yes" xml:space="preserve">
          <source>There are some examples for nonlinear functions in &lt;code&gt;statsmodels.nonparametric.dgp_examples&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01f27dc67afb7a8a4390adb93750e2a1134a80a" translate="yes" xml:space="preserve">
          <source>There are some examples in the &lt;code&gt;sandbox.examples&lt;/code&gt; folder. Additional examples are directly included in the modules and in subfolders of the sandbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c4adadbdb0548bfa644ca7130e1f39e2212d740" translate="yes" xml:space="preserve">
          <source>There are some notebook examples on the Wiki: &lt;a href=&quot;https://github.com/statsmodels/statsmodels/wiki/Examples#linear-mixed-models&quot;&gt;Wiki notebooks for MixedLM&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23eab4ca58b014e23c31e76ca57269d9f88e5b29" translate="yes" xml:space="preserve">
          <source>There are some notebook examples on the Wiki: &lt;a href=&quot;https://github.com/statsmodels/statsmodels/wiki/Examples#survival-analysis&quot;&gt;Wiki notebooks for PHReg and Survival Analysis&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce8d6e9cbab0f18076252fc2fdcf4f87c3e0194" translate="yes" xml:space="preserve">
          <source>There are three equivalent methods of determining if the polynomial represented by the coefficients is invertible:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e173b7ed5d03f745244da8104dfeebc3c88f3e" translate="yes" xml:space="preserve">
          <source>There are three types of values in the posterior distribution: fixed effects parameters (fep), corresponding to the columns of &lt;code&gt;exog&lt;/code&gt;, random effects realizations (vc), corresponding to the columns of &lt;code&gt;exog_vc&lt;/code&gt;, and the standard deviations of the random effects realizations (vcp), corresponding to the unique labels in &lt;code&gt;ident&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9922674c1735131a7207919fd06e5a9cc28603f7" translate="yes" xml:space="preserve">
          <source>There are three unknown parameters in this model: \(\phi_1, \phi_2, \sigma^2\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d51c5c0eff7063548c595baaf98401bef071f7" translate="yes" xml:space="preserve">
          <source>There are two classes used by &lt;code&gt;MLEModel&lt;/code&gt; that facilitate specification of the state space model and Kalman filtering: &lt;code&gt;Representation&lt;/code&gt; and &lt;code&gt;KalmanFilter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699a521dfff9af73accb76ca0a87e75ba9114f9d" translate="yes" xml:space="preserve">
          <source>There are two conflicting definitions of the weight matrix, Wikipedia versus SAS manual. However, the computation are invariant to rescaling of the weights matrix, so there is no difference in the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dbac92f7ac3225928ea9aa970fb525cf2b2bb0e" translate="yes" xml:space="preserve">
          <source>There are two steps in the constraining algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e35e9be4e5616c414a39e9ca86be5d2aa6ca56" translate="yes" xml:space="preserve">
          <source>There has been a lot of debate about whether the standard errors for random effect variance and covariance parameters are useful. In LME4, these standard errors are not displayed, because the authors of the package believe they are not very informative. While there is good reason to question their utility, we elected to include the standard errors in the summary table, but do not show the corresponding Wald confidence intervals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0325777552852d0b62f919729f4956a563dbd3ac" translate="yes" xml:space="preserve">
          <source>There is no return value. The line is plotted on the given &lt;code&gt;ax&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a108d4167132f84cd919e3fc200df75c504486f" translate="yes" xml:space="preserve">
          <source>There isn't yet an influence diagnostics method as part of RLM, but we can recreate them. (This depends on the status of &lt;a href=&quot;https://github.com/statsmodels/statsmodels/issues/808&quot;&gt;issue #888&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ff869e646f69e20f745e258cfe7b2d65b994a7" translate="yes" xml:space="preserve">
          <source>There may be API changes for this function in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c513ce745e80feb069b5ccb9f736aab9b4a4d70" translate="yes" xml:space="preserve">
          <source>These additional parameters could be estimated via MLE or by including them as components of the state space formulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c782e231cdcdd502d270224a9b46e7bece344e" translate="yes" xml:space="preserve">
          <source>These are also known as structural time series models, and decompose a (univariate) time series into trend, seasonal, cyclical, and irregular components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d90280eb3d5380fdbe218ef1b8677535a771f85" translate="yes" xml:space="preserve">
          <source>These are asymptotic standard errors. See Bai and Li (2012) for conditions under which the standard errors are valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa1adaff01191a1d84211060a8691c38a180afd" translate="yes" xml:space="preserve">
          <source>These are basic and miscellaneous tools. The full import path is &lt;code&gt;statsmodels.tools.tools&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0649c1e4c5eda2a0a9aead2b4059ab7d867418ad" translate="yes" xml:space="preserve">
          <source>These are computed via the &lt;code&gt;fevd&lt;/code&gt; function up through a total number of steps ahead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9489f54e512937b4047bcbc0afbcbf3e4dba724" translate="yes" xml:space="preserve">
          <source>These are longitudinal data from a factorial experiment. The outcome variable is the weight of each pig, and the only predictor variable we will use here is &quot;time&quot;. First we fit a model that expresses the mean weight as a linear function of time, with a random intercept for each pig. The model is specified using formulas. Since the random effects structure is not specified, the default random effects structure (a random intercept for each group) is automatically used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d4441d75eb04f4247d00d4c7c00e3d31207259" translate="yes" xml:space="preserve">
          <source>These are shorthand for endogenous and exogenous variables. You might be more comfortable with the common &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;X&lt;/code&gt; notation in linear models. Sometimes the endogenous variable &lt;code&gt;y&lt;/code&gt; is called a dependent variable. Likewise, sometimes the exogenous variables &lt;code&gt;X&lt;/code&gt; are called the independent variables. You can read about this in greater detail at &lt;a href=&quot;endog_exog#endog-exog&quot;&gt;endog, exog, what&amp;rsquo;s that?&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0aab95387368a5b62ee935a95ddd24613929857" translate="yes" xml:space="preserve">
          <source>These are utility functions to convert between central and non-central moments, skew, kurtosis and cummulants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31d4a375050df9556b588bab282b71d4b105283" translate="yes" xml:space="preserve">
          <source>These can be visualized using the &lt;code&gt;plot&lt;/code&gt; function, in either orthogonalized or non-orthogonalized form. Asymptotic standard errors are plotted by default at the 95% significance level, which can be modified by the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9957c86e21d5741a48c30cb583f5cbfae8c65e" translate="yes" xml:space="preserve">
          <source>These initialization steps must occur following the parent class __init__ function calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72150e9cf42c09c086a8e9a69155764cc09a370" translate="yes" xml:space="preserve">
          <source>These measures try to identify observations that are outliers, with large residual, or observations that have a large influence on the regression estimates. Robust Regression, RLM, can be used to both estimate in an outlier robust way as well as identify outlier. The advantage of RLM that the estimation results are not strongly influenced even if there are many outliers, while most of the other measures are better in identifying individual outliers and might not be able to identify groups of outliers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b954ef8c4e2b0c89f564e169e26b8f075af00e6f" translate="yes" xml:space="preserve">
          <source>These models take the general form (see &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; Chapter 3.2 for all details)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230a1799339771a8f2ae3535e28c76a13e3c0d86" translate="yes" xml:space="preserve">
          <source>These names are just a convenient way to get access to each model's &lt;code&gt;from_formula&lt;/code&gt; classmethod. See, for instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f0f281c803104451d15ad096dbc7d7d55747e9" translate="yes" xml:space="preserve">
          <source>These values are assumed to be known with certainty or else filled with parameters during, for example, maximum likelihood estimation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36512f811f101e03bc943315200ccade4f74c89b" translate="yes" xml:space="preserve">
          <source>They can also be visualized through the returned &lt;a href=&quot;generated/statsmodels.tsa.vector_ar.var_model.fevd#statsmodels.tsa.vector_ar.var_model.FEVD&quot;&gt;&lt;code&gt;FEVD&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7907d24f3410b39c970894de32d64e8b2b8318f8" translate="yes" xml:space="preserve">
          <source>They can be used to detect ill-fitting covariates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c196b1fe70093fc6e084ca0ca7018c105068a0" translate="yes" xml:space="preserve">
          <source>This also attaches table_data to the instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f76c6f4f3afe5db07f3ead1801dfd0e62bef3f" translate="yes" xml:space="preserve">
          <source>This assumes that some moment restrictions have been dropped in one of the GMM estimates relative to the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d87ea77bac815afb54c416b020c439599e3d55" translate="yes" xml:space="preserve">
          <source>This can be considered as score residuals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff6309abe3855595b0f85aa165fd930cdcd5c93" translate="yes" xml:space="preserve">
          <source>This can be put into state space form in the following way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a1770b138cd8227253196cdc619e07fbe399c90" translate="yes" xml:space="preserve">
          <source>This can be rewritten as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0336d8c2fa00bee8b15c0f8bc2fde1a9d962db83" translate="yes" xml:space="preserve">
          <source>This can be used in the log-likelihood to &amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60afc1fdfd067e1cf3ad3d7a1c29045d8850d836" translate="yes" xml:space="preserve">
          <source>This can be used to generate distribution instances similar to the distributions in scipy.stats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a99efb67c88e02693834ba5a934d173051499c3" translate="yes" xml:space="preserve">
          <source>This class Implements the knockoff method of Barber and Candes. This is an approach for controlling the FDR of a variety of regression estimation procedures, including correlation coefficients, OLS regression, OLS with forward selection, and LASSO regression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee4cf94d1e84827b35ca2baa230ce4f3a17dd68" translate="yes" xml:space="preserve">
          <source>This class allows two different underlying representations of ARMA models as state space models: that of Hamilton and that of Harvey. Both are equivalent in the sense that they are analytical representations of the ARMA model, but the state vectors of each have different meanings. For this reason, maximum likelihood does not result in identical parameter estimates and even the same set of parameters will result in different loglikelihoods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd0b122ac70d211c33bdca95aabdf46bdda0dd9" translate="yes" xml:space="preserve">
          <source>This class can be used to fit most Statsmodels models to data sets with missing values using the &amp;lsquo;multiple imputation with chained equations&amp;rsquo; (MICE) approach..</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5509398401ffd8fd7a85a77186121c6ece177ba7" translate="yes" xml:space="preserve">
          <source>This class contains several methods that are providing the same or similar returns to try out and test different implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106ce07c875f20d4f941e7c407b1ca627ba8bdcc" translate="yes" xml:space="preserve">
          <source>This class currently only supports right censoring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e186e17d215eb13c5750129f28382f8217348195" translate="yes" xml:space="preserve">
          <source>This class does not do anything itself but lays out the methods and call signature expected of child classes in addition to those of statsmodels.model.LikelihoodModel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc5ef06e6f36ca9990719fd19a1a27a79619889" translate="yes" xml:space="preserve">
          <source>This class is essentially a view to the FilterResults object, but returning the appropriate ranges for everything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4283c1e84f62e7ffd44d68095d064b8e9580bcf7" translate="yes" xml:space="preserve">
          <source>This class summarizes the fit of a linear regression model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c8ade61a90c88c091f4c2f36dc6a6b1b0a0e8a" translate="yes" xml:space="preserve">
          <source>This class summarizes the fit of a marginal regression model using GEE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c51aca746f60355d1ad012c80eaacd2856c943" translate="yes" xml:space="preserve">
          <source>This class uses numerical differences to obtain the derivative of the objective function. If the jacobian of the conditional mean function, &lt;code&gt;func&lt;/code&gt; is available, then it can be used by subclassing this class and defining a method &lt;code&gt;jac_func&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f56002e94b34c6161815dd501a3043de65d398" translate="yes" xml:space="preserve">
          <source>This class wraps the state space model with Kalman filtering to add in functionality for maximum likelihood estimation. In particular, it adds the concept of updating the state space representation based on a defined set of parameters, through the &lt;code&gt;update&lt;/code&gt; method or &lt;code&gt;updater&lt;/code&gt; attribute (see below for more details on which to use when), and it adds a &lt;code&gt;fit&lt;/code&gt; method which uses a numerical optimizer to select the parameters that maximize the likelihood of the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951e8a9977d991b6338fefe15b93d5e59a4088ab" translate="yes" xml:space="preserve">
          <source>This component results in one parameter to be fitted using maximum likelihood: \(\sigma_{\omega^2}\), and up to two parameters to be chosen, the number of seasons s and optionally the number of harmonics h, with \(1 \leq h \leq \floor(s/2)\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33146bd15046102a42a21697ed20a9d0d963fc72" translate="yes" xml:space="preserve">
          <source>This component results in one parameter to be selected via maximum likelihood: \(\sigma_\omega^2\), and one parameter to be chosen, the number of seasons &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd07f68cb4c16bf2eb848162ddb3494cd1731f8" translate="yes" xml:space="preserve">
          <source>This computes joined Wald tests for the hypothesis that all coefficients corresponding to a &lt;code&gt;term&lt;/code&gt; are zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74cf11cd57869ca6fb6be8cf00da1e85a84fd600" translate="yes" xml:space="preserve">
          <source>This contains several goodness-of-fit tests as special cases, see the describtion of lambd, the exponent of the power discrepancy. The pvalue is based on the asymptotic chi-square distribution of the test statistic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="843d2f508469ad0d89ed90aeb4c9e697b781eaa3" translate="yes" xml:space="preserve">
          <source>This converts the covariance matrix to a correlation matrix. Then, finds the nearest correlation matrix that is positive semidefinite and converts it back to a covariance matrix using the initial standard deviation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13fabbe848c753fdd517a31094e6d527a11c99fd" translate="yes" xml:space="preserve">
          <source>This corresponds to a parameterization that forces all the coefficients to sum to zero. Notice that the intercept here is the grand mean where the grand mean is the mean of means of the dependent variable by each level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc2e35366f327746feee0b7647477d22098207b" translate="yes" xml:space="preserve">
          <source>This correspons to a parameterization that forces all the coefficients to sum to zero. Notice that the intercept here is the grand mean where the grand mean is the mean of means of the dependent variable by each level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="737d6266359642594f23cbfbebcfc77e5494f129" translate="yes" xml:space="preserve">
          <source>This covers Benjamini/Hochberg for independent or positively correlated and Benjamini/Yekutieli for general or negatively correlated tests. Both are available in the function multipletests, as method=`fdr_bh`, resp. &lt;code&gt;fdr_by&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362e3628e93c7c2067f98cdb6bd9faf13ad32f41" translate="yes" xml:space="preserve">
          <source>This creates a set partition from a list of sets given as tuples. It tries to find the partition with the largest sets. That is, sets are included after being sorted by length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c53fc9b57a7c7328f2a118f164e8a48d315544" translate="yes" xml:space="preserve">
          <source>This creates one graph with the scatterplot of observed values compared to fitted values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506b635510cc808bd4d2079f2479ceb9b1500239" translate="yes" xml:space="preserve">
          <source>This creates rankdata as it is used for non-parametric tests, where in the case of ties the average rank is assigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f36fdfaee0cc468ae35ae1aadd4f01f39facbed" translate="yes" xml:space="preserve">
          <source>This currently merges tables with different number of columns. It is recommended to use &lt;code&gt;as_latex_tabular&lt;/code&gt; directly on the individual tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1704993acbbf95444f6156b57aa40347a1b6062" translate="yes" xml:space="preserve">
          <source>This density estimator can handle univariate as well as multivariate data, including mixed continuous / ordered discrete / unordered discrete data. It also provides cross-validated bandwidth selection methods (least squares, maximum likelihood).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6687e3d6236381cea994ae99e588372a0ccc6655" translate="yes" xml:space="preserve">
          <source>This differs by an additive constant from the log posterior log p(fe, vc, vcp | y).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5467b02ebee46937e736ddddc98b18b8ffa5cf" translate="yes" xml:space="preserve">
          <source>This differs from the proportions_ztest because of the degrees of freedom correction: &amp;gt;&amp;gt;&amp;gt; sm.stats.proportions_ztest(15, 20.0, value=0.5) (2.5819888974716112, 0.009823274507519247).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c7394617f5b4f7e171149ecb18c3867d74e34f" translate="yes" xml:space="preserve">
          <source>This document is based heavily on &lt;a href=&quot;http://www.ats.ucla.edu/stat/r/library/contrast_coding.htm&quot;&gt;this excellent resource from UCLA&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19d7396018283f8ce458e48d5bbfb690e723daa5" translate="yes" xml:space="preserve">
          <source>This document is based heavily on this excellent resource from UCLA &lt;a href=&quot;http://www.ats.ucla.edu/stat/r/library/contrast_coding.htm&quot;&gt;http://www.ats.ucla.edu/stat/r/library/contrast_coding.htm&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29ec4c5169104132427304c2e48ef799b833d2e" translate="yes" xml:space="preserve">
          <source>This does currently not distinguish between statistics that can be calculated from the original regression results and for which a leave-one-observation-out loop is needed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803c2b255c945a3baf5d34262acaf1399385ae6a" translate="yes" xml:space="preserve">
          <source>This example file shows how to use a few of the &lt;code&gt;statsmodels&lt;/code&gt; regression diagnostic tests in a real-life context. You can learn about more tests and find out more information abou the tests here on the &lt;a href=&quot;../../../diagnostic&quot;&gt;Regression Diagnostics page.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4183d74692801c1cb4be930b16cf8b0a33678d46" translate="yes" xml:space="preserve">
          <source>This example page shows how to use &lt;code&gt;statsmodels&lt;/code&gt;' &lt;code&gt;QuantReg&lt;/code&gt; class to replicate parts of the analysis published in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99e31f1f03be5905cffcf47afec36e6b7f102f3" translate="yes" xml:space="preserve">
          <source>This example shows an example plot comparing significant differences in group means. Significant differences at the alpha=0.05 level can be identified by intervals that do not overlap (i.e. USA vs Japan, USA vs Germany).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb42fc9906250166691e695004a46de74f8d751a" translate="yes" xml:space="preserve">
          <source>This explanation of &lt;code&gt;fmt&lt;/code&gt; is not complete, for an exhaustive specification see &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e94d86f1e132679b4becb73d970fe5f3181b3b1" translate="yes" xml:space="preserve">
          <source>This finds the ARMA(p,q) coefficients that minimize the integrated squared difference between the impulse_response functions (MA representation) of the AR and the ARMA process. This does not check whether the MA lag polynomial of the ARMA process is invertible, neither does it check the roots of the AR lag polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41783b3a7c9acb63e563c4eb01ba284c78899632" translate="yes" xml:space="preserve">
          <source>This first averages relevant variables for each time period over all individuals/groups, and then applies the same kernel weighted averaging over time as in HAC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cccfc886328a15172f690e7b8c838d6c887cc399" translate="yes" xml:space="preserve">
          <source>This fit is computed by maximizing a log-likelihood function, with penalty applied for samples outside of range of the distribution. The returned answer is not guaranteed to be the globally optimal MLE, it may only be locally optimal, or the optimization may fail altogether.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe8a4523d52f3b1520df2c7ae89d0e7a3ff67d8" translate="yes" xml:space="preserve">
          <source>This function assumes standardized scale, that is the variance in each dimension is one, but correlation can be arbitrary, covariance = correlation matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30bb8116fac483089ad8bc1cc5af1b70f763ccac" translate="yes" xml:space="preserve">
          <source>This function by default does not compute variables required for smoothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a331b655eb3664b12d921030870c3946ca913ff" translate="yes" xml:space="preserve">
          <source>This function calculates the family-specific ELBO function based on information provided from a subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0094d764d5c17c63df9b47e7c242c399eb6a7b26" translate="yes" xml:space="preserve">
          <source>This function clips the eigenvalues, replacing eigenvalues smaller than the threshold by the threshold. The new matrix is normalized, so that the diagonal elements are one. Compared to corr_nearest, the distance between the original correlation matrix and the positive definite correlation matrix is larger, however, it is much faster since it only computes eigenvalues once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef4095aacf40201147efd28d77b66ffb75fca7b4" translate="yes" xml:space="preserve">
          <source>This function does not convert subclasses of ndarrays. This requires that division is defined elementwise. np.ma.array and np.matrix are allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9069a375a384e595aad50e23ed80a96f75150c75" translate="yes" xml:space="preserve">
          <source>This function does not convert subclasses of ndarrays. This requires that multiplication is defined elementwise. np.ma.array are allowed, but not matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad365b21893a6e81f08b45c3008f4bcd1024ec77" translate="yes" xml:space="preserve">
          <source>This function does not save the auxiliary regression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e8510ef67cfd974e1a0dc2a5e57a0af08a62f3d" translate="yes" xml:space="preserve">
          <source>This function exploits the factor structure for efficiency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2176a754b5c7e85bba9bc44ec535b1c874bd90a" translate="yes" xml:space="preserve">
          <source>This function fits the analysis model and returns its parameter estimate. The parameter vector is not stored by the class and is not used in any subsequent calls to &lt;code&gt;combine&lt;/code&gt;. Use &lt;code&gt;fit&lt;/code&gt; to run all MICE steps together and obtain summary results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0499c241ab97741cdc9ceea96906bc9eb72861" translate="yes" xml:space="preserve">
          <source>This function is just an alias for scipy.stats.norm.cdf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb073793f3daac75064326b99d511a33210250b" translate="yes" xml:space="preserve">
          <source>This function is just an alias for scipy.stats.norm.pdf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7d9b89a492bffd36e035de7ec46a3397018637" translate="yes" xml:space="preserve">
          <source>This function normalizes the location and scale of the multivariate normal distribution and then uses &lt;code&gt;mvstdnormcdf&lt;/code&gt; to call the integration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca7cc0ae8f96327e27a5830a252f530f7772b89" translate="yes" xml:space="preserve">
          <source>This function provides a similar interface to chisquare tests as &lt;code&gt;prop.test&lt;/code&gt; in R, however without the option for Yates continuity correction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3757f160a97ccc35de16de95a6c445c859325fd" translate="yes" xml:space="preserve">
          <source>This function returns currently all results, but maybe we drop sigma and phi from the returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c144696dc367cf223fe50dc0575d57f03db820" translate="yes" xml:space="preserve">
          <source>This function uses brentq to find the value of beta where test_beta([beta], param_num)[1] is equal to the critical value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d737a50396b80fafee71d4d7872758544c4f4966" translate="yes" xml:space="preserve">
          <source>This function uses the &lt;code&gt;groups&lt;/code&gt; argument to determine groups within which observations may be dependent. The covariance matrix is calculated using the Huber-White &amp;ldquo;sandwich&amp;rdquo; approach.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5c4f65081e8869f440f9cc21ec890a0e9416a1" translate="yes" xml:space="preserve">
          <source>This generic form encapsulates many of the most popular linear time series models (see below) and is very flexible, allowing estimation with missing observations, forecasting, impulse response functions, and much more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e4af742c263090304bc63646a6c0cef49b1800" translate="yes" xml:space="preserve">
          <source>This gives a similar comparison for when it is 0 vs not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3433482c6681345228e94c995136389c3712ee8" translate="yes" xml:space="preserve">
          <source>This gives the following form for the process of the data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb70d613d4b3faa57e0088a3ab954cfe0309294" translate="yes" xml:space="preserve">
          <source>This group of test whether the regression residuals are not autocorrelated. They assume that observations are ordered by time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054284caa41b4af49c17b79ff33aee9bee239c08" translate="yes" xml:space="preserve">
          <source>This has not been verified against a reference implementation. In a short Monte Carlo simulation where both samples are normally distribute, the test seems to be correctly sized for larger number of observations (30 or larger), but conservative (i.e. reject less often than nominal) with a sample size of 10 in each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f16f41a06f394e323b29974dbb83c2f24921c7" translate="yes" xml:space="preserve">
          <source>This has since (02/11/16) been corrected, however the series could also be constructed by hand from HMRMT and CMRMT, as shown below (process taken from the notes in the Alfred xls file).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a146b9ec83e35ab28172619ba2e9c0c5a6316f47" translate="yes" xml:space="preserve">
          <source>This ia naive implementation that does not exploit the block diagonal structure. It should work for ill-conditioned &lt;code&gt;sigma&lt;/code&gt; but this is untested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f887403e3a403c3a17e43b0bc0ef5dead556cc" translate="yes" xml:space="preserve">
          <source>This implementation currently only supports fully balanced designs. If the data contain more than one observation per subject and cell of the design, these observations need to be aggregated into a single observation before the Anova is calculated, either manually or by passing an aggregation function via the &lt;code&gt;aggregate_func&lt;/code&gt; keyword argument. Note that if the input data set was not balanced before performing the aggregation, the implied heteroscedasticity of the data is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f175a3573c5bee2319e00d27e7ccc4cfedf44d76" translate="yes" xml:space="preserve">
          <source>This implementation does not take advantage of the symmetry of the Hessian and could probably be refactored for speed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8eabd5032022dc2d62dea6473772661f500264" translate="yes" xml:space="preserve">
          <source>This implements a Gram-Charlier expansion of the normal distribution where the first 2 moments coincide with those of the normal distribution but skew and kurtosis can deviate from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af03c2343dced387f11317275600b81b9483f4a4" translate="yes" xml:space="preserve">
          <source>This indicates a lack of fit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964371b02726b7a555a37e6fbdd701e179e42ad6" translate="yes" xml:space="preserve">
          <source>This is &amp;lsquo;mse_resid&amp;rsquo; from each auxiliary regression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bbada56d143cac277b7106ceedaef27c59bc826" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;-sum(log pdf(x, theta), axis=0)&lt;/code&gt; where &lt;code&gt;theta&lt;/code&gt; are the parameters (including loc and scale).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6dbfc1c3309d83ccdbfabc4c5caad514bb7e78" translate="yes" xml:space="preserve">
          <source>This is a bit of a trick, as the &lt;code&gt;race&lt;/code&gt; category conveniently maps to zero-based indices. If it does not, this conversion happens under the hood, so this won&amp;rsquo;t work in general but nonetheless is a useful exercise to fix ideas. The below illustrates the output using the three contrasts above</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d88762814f6fa542d3cb0b475897d0406a63713" translate="yes" xml:space="preserve">
          <source>This is a bit of a trick, as the &lt;code&gt;race&lt;/code&gt; category conveniently maps to zero-based indices. If it does not, this conversion happens under the hood, so this won't work in general but nonetheless is a useful exercise to fix ideas. The below illustrates the output using the three contrasts above</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ea8d16030941a2e8a56a1898608cbb9a289ef4" translate="yes" xml:space="preserve">
          <source>This is a brief introduction notebook to VARMAX models in Statsmodels. The VARMAX model is generically specified as: $$ y_t = \nu + A_1 y_{t-1} + \dots + A_p y_{t-p} + B x_t + \epsilon_t + M_1 \epsilon_{t-1} + \dots M_q \epsilon_{t-q} $$</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68c55a32ab8f2e703ec87b66491eb4ff59e27c6" translate="yes" xml:space="preserve">
          <source>This is a class that shows that a new model can be defined by only specifying the method for the loglikelihood. All result statistics are inherited from the generic likelihood model and result classes. The results have been checked against R for a simple case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad89fbd3e8ecaa35f7c7dee44fc37d0bf617428" translate="yes" xml:space="preserve">
          <source>This is a convenience function that returns the standard errors for any covariance type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c6d76978f13d4cbde184e2ef013a3ea7d24364" translate="yes" xml:space="preserve">
          <source>This is a convenience function that returns the standard errors for any covariance type. The value of &lt;code&gt;bse&lt;/code&gt; is the standard errors for whichever covariance type is specified as an argument to &lt;code&gt;fit&lt;/code&gt; (defaults to &amp;ldquo;robust&amp;rdquo;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7ceafe8e245c08577b3efc51330e1db0622543" translate="yes" xml:space="preserve">
          <source>This is a default implementation, it can be reimplemented in subclasses to optimize the linear algebra according to the struture of the covariance matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2ba8efa1e1a12f08f1a0dcd5ee8cc4fa68ffe8" translate="yes" xml:space="preserve">
          <source>This is a full implementation of the holt winters exponential smoothing as per [1]. This includes all the unstable methods as well as the stable methods. The implementation of the library covers the functionality of the R library as much as possible whilst still being pythonic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1ad6462cc978fded82454ab173ef255eb5c7ed" translate="yes" xml:space="preserve">
          <source>This is a full implementation of the holts exponential smoothing as per [1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea23dbb87cfabef5246bbda0c86fc7365cc2cf1" translate="yes" xml:space="preserve">
          <source>This is a full implementation of the simple exponential smoothing as per [1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="188d4d50308560a18bef6fd1135e0fb814044fed" translate="yes" xml:space="preserve">
          <source>This is a naive decomposition. More sophisticated methods should be preferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1683229e343d3968bdfa42e61f4188e5d13afb32" translate="yes" xml:space="preserve">
          <source>This is a non-convex problem with no known gauranteed globally convergent algorithm for computing the solution. Borsdof, Higham and Raydan (2010) compared several methods for this problem and found the spectral projected gradient (SPG) method (used here) to perform best.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09870210c7b37d402ce1162ee482e973aa1003a" translate="yes" xml:space="preserve">
          <source>This is a noop in the base class, subclasses should override where appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1b30c1981dc68c5839563a6654c3385ffe345c2" translate="yes" xml:space="preserve">
          <source>This is a numerical approximation using finite differences. Note that in general complex step methods cannot be used because it is not guaranteed that the &lt;code&gt;transform_params&lt;/code&gt; method is a real function (e.g. if Cholesky decomposition is used).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3aa5407e60643e515f4edd209400c417c9dab9" translate="yes" xml:space="preserve">
          <source>This is a numerical approximation, calculated using first-order complex step differentiation on the &lt;code&gt;loglike&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29c838fb0c90c24665fc78c59e7d96f09e3894a" translate="yes" xml:space="preserve">
          <source>This is a numerical approximation, calculated using first-order complex step differentiation on the &lt;code&gt;loglikeobs&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03a4cc1f7ecd8405d97dd45ad5aef0f02d430ee" translate="yes" xml:space="preserve">
          <source>This is a numerical approximation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e6e4f5af96a14890bd597f7e8a148fed4f9db74" translate="yes" xml:space="preserve">
          <source>This is a placeholder intended to be overwritten by individual models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee57d14f7e14718e136ab373d014988d0101fb7" translate="yes" xml:space="preserve">
          <source>This is a special case of &lt;code&gt;wald_test&lt;/code&gt; that always uses the F distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a4fb2b1e5fa78aefbda50e813c9d1a57adf4ccb" translate="yes" xml:space="preserve">
          <source>This is a special case of Cochran&amp;rsquo;s Q test, and of the homogeneity test. The results when the chisquare distribution is used are identical, except for continuity correction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7eddc3b9b21c4d428b4f5d919a015bb6a11ef2a" translate="yes" xml:space="preserve">
          <source>This is a special case of Cochran&amp;rsquo;s Q test. The results when the chisquare distribution is used are identical, except for continuity correction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564f17e67c5a20d246807ea2146decb5b4a88ba1" translate="yes" xml:space="preserve">
          <source>This is a two-step process in which first the parameters are perturbed, then the missing values are re-imputed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc76c617f9233525e7c1052d1123d0ee79d7f1e7" translate="yes" xml:space="preserve">
          <source>This is a wrapper for scipy.stats.kde.mvn.mvndst which calculates a rectangular integral over a multivariate normal distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e461c0409654531fb7e0c8172bb07d1c2ff12b2" translate="yes" xml:space="preserve">
          <source>This is a wrapper for scipy.stats.kde.mvn.mvndst which calculates a rectangular integral over a standardized multivariate normal distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22946e079da761bfb17168fb209c0dc7f2c71b5" translate="yes" xml:space="preserve">
          <source>This is an alias for approx_hess3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fb84c8349ea52de65e904c0310c4431f77edf0c" translate="yes" xml:space="preserve">
          <source>This is an alternative to C = np.corrcoef(data); C *= (np.abs(C) &amp;gt;= absmin), suitable for very tall data matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73246d3c3e4bff4df8be5455ddcd5c379ccf5c8" translate="yes" xml:space="preserve">
          <source>This is an exact, two-sided test of the null hypothesis that the probability of success in a Bernoulli experiment is &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc720e6392814e7af7d0a597b91a2e4999e6ec8" translate="yes" xml:space="preserve">
          <source>This is an example for generic MLE which has the same statistical model as discretemod.Poisson but adds offset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3cc195e843c627d9441b20f41b7168ed6b6e41" translate="yes" xml:space="preserve">
          <source>This is an example for generic MLE which has the same statistical model as discretemod.Poisson but adds offset and zero-inflation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf50195ae5f8c47dc200c7125212d916ca708ca" translate="yes" xml:space="preserve">
          <source>This is an example for generic MLE which has the same statistical model as discretemod.Poisson.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be2d487cc290a74f0c8a377bf6f2c6a55b814b1" translate="yes" xml:space="preserve">
          <source>This is an example for generic MLE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b58c0155ca244b3c629d926ad20cc97ad2588af5" translate="yes" xml:space="preserve">
          <source>This is an extension of the McNemar test to test the Null hypothesis that the contingency table is symmetric around the main diagonal, that is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e892ab69a4aedbe8288fa1130a67f4e4a70a680c" translate="yes" xml:space="preserve">
          <source>This is based np.correlate which does full convolution. For very long time series it is recommended to use fft convolution instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2eb0bbf7330832694197baaa85ffa55d4ba519" translate="yes" xml:space="preserve">
          <source>This is copied from scipy.signal.signaltools and added n as optional parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd870a227651f0a722cefe493ae6f3d45f85490" translate="yes" xml:space="preserve">
          <source>This is currently for simple tree subset descend, similar to homogeneous_subsets, but checks all leave-one-out subsets instead of assuming an ordered set. Comment in SAS manual: SAS only uses interval subsets of the sorted list, which is sufficient for range tests (maybe also equal variance and balanced sample sizes are required). For F-test based critical distances, the restriction to intervals is not sufficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a45253c8eae23d53cd726e9b0bf171bc70a7be" translate="yes" xml:space="preserve">
          <source>This is currently only available for t and z tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ecf91cbe7b0229b7bf13450f804ccf4403f0703" translate="yes" xml:space="preserve">
          <source>This is currently together with influence and outlier measures (with some links to other tests here: &lt;a href=&quot;http://www.stata.com/help.cgi?vif&quot;&gt;http://www.stata.com/help.cgi?vif&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c11ee807a332a6789eb4a2c6c254ca279e417be" translate="yes" xml:space="preserve">
          <source>This is defined for each family. endog and mu are not restricted to &lt;code&gt;endog&lt;/code&gt; and &lt;code&gt;mu&lt;/code&gt; respectively. For instance, you could call both &lt;code&gt;loglike(endog, endog)&lt;/code&gt; and &lt;code&gt;loglike(endog, mu)&lt;/code&gt; to get the log-likelihood ratio.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa707c0c3fa2abec1795b21b2ccaf7b5e61eefb" translate="yes" xml:space="preserve">
          <source>This is essentially the same as replicating each observations by its weight, if the weights are integers, often called case or frequency weights.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605e953fd3443b6a092ea39ddbebcf51052aa815" translate="yes" xml:space="preserve">
          <source>This is for testing the new summary setup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148b2271d929978e3d7d5c69826f1b7ed3179e2f" translate="yes" xml:space="preserve">
          <source>This is for variance of mean difference not of studentized range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfadf79e208941dbf5f73fa603010a108810c42d" translate="yes" xml:space="preserve">
          <source>This is hard-coded to only allow plotting of the forecasts in levels. It is recommended to use dates with the time-series models, as the below will probably make clear. However, if ARIMA is used without dates and/or &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; are given as indices, then these indices are in terms of the &lt;em&gt;original&lt;/em&gt;, undifferenced series. Ie., given some undifferenced observations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3345e0e3850285a3353b03565cbed4d89b18a5a3" translate="yes" xml:space="preserve">
          <source>This is just a copy of numpy.savetxt patched to support structured arrays or a header of names. Does not include py3 support now in savetxt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d7e74bd865f3a49149ff81aa573e8349d18a82" translate="yes" xml:space="preserve">
          <source>This is just a reimplementation of scipy.stats.kruskal and does not yet use a multiple comparison correction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e578f4736abf0a052ff0f68d1d147c6f87dac265" translate="yes" xml:space="preserve">
          <source>This is known only to work on file formats 113 (Stata 8/9), 114 (Stata 10/11), and 115 (Stata 12). Needs to be tested on older versions. Known not to work on format 104, 108. If you have the documentation for older formats, please contact the developers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5b76ea03aae50c323c64a110acd447b7f70dca" translate="yes" xml:space="preserve">
          <source>This is mainly written to extend coefficient arrays for the lag-polynomials. It returns a copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3fabcdca6001d3ea4b11a4497d3abdcbba2ada" translate="yes" xml:space="preserve">
          <source>This is not implemented because of the complexity of calculating an infinite series of sums.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e2e9be638f3e28f55817dce33c0d340c4251fa3" translate="yes" xml:space="preserve">
          <source>This is one of the example data sets provided in the LMER R library. The outcome variable is the size of the tree, and the covariate used here is a time value. The data are grouped by tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e7c984832e37b50b385bc36f2c7d9d2199a071" translate="yes" xml:space="preserve">
          <source>This is similar to the additively seasonal model from example 2, but the coefficients in front of the autoregressive lags are actually combinations of the underlying seasonal and non-seasonal parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be49f0c7cd847ac381c226346a1e32159d04f585" translate="yes" xml:space="preserve">
          <source>This is tested against the Markov-switching models from E-views 8, which can be found at &lt;a href=&quot;http://www.eviews.com/EViews8/ev8ecswitch_n.html#MarkovAR&quot;&gt;http://www.eviews.com/EViews8/ev8ecswitch_n.html#MarkovAR&lt;/a&gt; or the Markov-switching models of Stata 14 which can be found at &lt;a href=&quot;http://www.stata.com/manuals14/tsmswitch.pdf&quot;&gt;http://www.stata.com/manuals14/tsmswitch.pdf&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab71a01bf00bcec6b1842d948e5d8a8743e6f88" translate="yes" xml:space="preserve">
          <source>This is the &amp;lsquo;Breslow-Day&amp;rsquo; testing procedure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d180d3cb16be2149b339a6e34c43ce9ca2070d" translate="yes" xml:space="preserve">
          <source>This is the &amp;lsquo;Mantel-Haenszel&amp;rsquo; test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084ccae72b2911fb157e280a956714791510e780" translate="yes" xml:space="preserve">
          <source>This is the &amp;lsquo;linear by linear&amp;rsquo; association test, which uses weights or scores to target the test to have more power against ordered alternatives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997070c9a10f2c470a3ac7c2a560bc1eaffe4675" translate="yes" xml:space="preserve">
          <source>This is the same as finding the MA representation of an ARMA(p,q). By reversing the role of ar and ma in the function arguments, the returned result is the AR representation of an ARMA(p,q), i.e</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f6acc5eb680de686e5a08c0ff880a5b72fffa4" translate="yes" xml:space="preserve">
          <source>This is the solution, x, to z = abs(z)*exp(2j*np.pi*x) where z are the roots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f1966dd8c7b1923d7e8a44fde9a85a4ebbc5c0" translate="yes" xml:space="preserve">
          <source>This is unfinished, and the design should be refactored. Estimation is done by brute force and there is no exploitation of the structure of the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74d2c19f9300d2e33af3d6a8140bed6b3ca0c5ff" translate="yes" xml:space="preserve">
          <source>This iteratively finds a solution to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a7cf7ecd8f8adb234be7af5c64a0c3fcbfcc8ba" translate="yes" xml:space="preserve">
          <source>This just returns a regular array, but since the model has date information attached, you can get the prediction dates in a roundabout way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17197b4c43e9579d4e1c21341949e96603ae97aa" translate="yes" xml:space="preserve">
          <source>This leads to the following specifications:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594916f4d146c81ee88c53ed62bf6b25aa237906" translate="yes" xml:space="preserve">
          <source>This leaves the diagonal, i.e. the variance, unchanged</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f7bb797e502d13673f432e604de295e60f44944" translate="yes" xml:space="preserve">
          <source>This lowess function implements the algorithm given in the reference below using local linear estimates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75579c043d62074414f7f4803854edf754e4ff5" translate="yes" xml:space="preserve">
          <source>This matrix will either be shaped (k_regimes, k_regimes, 1) or if there are time-varying transition probabilities, it will be shaped (k_regimes, k_regimes, nobs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c0489fc1919a07c95faa0ce9ba4f47ae9f7da1" translate="yes" xml:space="preserve">
          <source>This method Does not assume symmetric error bands around mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61833f64f6dd52b443b418f96ff36c823a971aab" translate="yes" xml:space="preserve">
          <source>This method can be used to load &lt;em&gt;both&lt;/em&gt; models and results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ccc6d56eee0a906e63006e76a4d65deb19e252f" translate="yes" xml:space="preserve">
          <source>This method can be used to tentatively identify the order of an ARMA process, provided that the time series is stationary and invertible. This function computes the full exact MLE estimate of each model and can be, therefore a little slow. An implementation using approximate estimates will be provided in the future. In the meantime, consider passing {method : &amp;lsquo;css&amp;rsquo;} to fit_kw.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f7210df92e727c825c5e1cff91cee4b16e5350" translate="yes" xml:space="preserve">
          <source>This method can only be used after the &lt;code&gt;run&lt;/code&gt; method has been called. Returns estimates and standard errors of the analysis model parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393f4f33a499c56c390925623b502d3be4c5d130" translate="yes" xml:space="preserve">
          <source>This method is from Harvey (1989), which shows that the information matrix only depends on terms from the gradient. This implementation is partially analytic and partially numeric approximation, therefore, because it uses the analytic formula for the information matrix, with numerically computed elements of the gradient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d37b8cef7b30fbeba3dcdc01f08002c94a71f80" translate="yes" xml:space="preserve">
          <source>This method is not returning the same result as &lt;code&gt;JMulTi&lt;/code&gt;. This is because the test is based on a VAR(k_ar) model in &lt;code&gt;statsmodels&lt;/code&gt; (in accordance to pp. 104, 320-321 in &lt;a href=&quot;#id3&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt;) whereas &lt;code&gt;JMulTi&lt;/code&gt; seems to be using a VAR(k_ar+1) model. Reducing the lag order by one in &lt;code&gt;JMulTi&lt;/code&gt; leads to equal results in &lt;code&gt;statsmodels&lt;/code&gt; and &lt;code&gt;JMulTi&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7658be6a241344da2543229f500036e84461a2" translate="yes" xml:space="preserve">
          <source>This method is not returning the same result as JMulTi. This is because the test is based on a VAR(k_ar) model in statsmodels (in accordance to pp. 104, 320-321 in &lt;a href=&quot;#id3&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt;) whereas JMulTi seems to be using a VAR(k_ar+1) model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5973684ebd7b3429b519eb1bd2e5f9087c268dac" translate="yes" xml:space="preserve">
          <source>This method is rarely required except for internal usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff841a4d0116c27f174f2e42b3881d303cfcf8c" translate="yes" xml:space="preserve">
          <source>This method is rarely used. See the corresponding function in the &lt;code&gt;KalmanFilter&lt;/code&gt; class for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be28c7d05cc5a13b54afbc8a2b9300847bd27b7" translate="yes" xml:space="preserve">
          <source>This method is rarely used. See the corresponding function in the &lt;code&gt;KalmanSmoother&lt;/code&gt; class for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816e6d5f7a8580e6e1d22ce29d134e3094bb67a0" translate="yes" xml:space="preserve">
          <source>This method was not very clear to me from the literature, this implementation is as I understand it should work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69b0f76504c367e470a271f07b4a83fd473ac2d" translate="yes" xml:space="preserve">
          <source>This model applies the Kalman filter to compute recursive estimates of the coefficients and recursive residuals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc3ccf28461891175ce355679aecf6cb4260a0d5" translate="yes" xml:space="preserve">
          <source>This model can be cast into state space form, and the unobserved factor estimated via the Kalman filter. The likelihood can be evaluated as a byproduct of the filtering recursions, and maximum likelihood estimation used to estimate the parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1469f63cf569dc9213d5d8d43823291e2f6d2f" translate="yes" xml:space="preserve">
          <source>This model can be formulated using the &lt;code&gt;DynamicFactor&lt;/code&gt; model built-in to Statsmodels. In particular, we have the following specification:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe9ffd91a323ac6c6fe795953641c355a1d7340" translate="yes" xml:space="preserve">
          <source>This model cannot be handled out-of-the-box by the &lt;code&gt;DynamicFactor&lt;/code&gt; class, but it can be handled by creating a subclass when alters the state space representation in the appropriate way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794d74d9246bc787983b9b1641da2fdde4cdfaaa" translate="yes" xml:space="preserve">
          <source>This model demonstrates estimation with regime heteroskedasticity (switching of variances) and no mean effect. The dataset can be reached at &lt;a href=&quot;http://econ.korea.ac.kr/~cjkim/MARKOV/data/ew_excs.prn&quot;&gt;http://econ.korea.ac.kr/~cjkim/MARKOV/data/ew_excs.prn&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9459e67c05cf464411c34c5bf0b99830a09a3a6" translate="yes" xml:space="preserve">
          <source>This model demonstrates estimation with time-varying transition probabilities. The dataset can be reached at &lt;a href=&quot;http://econ.korea.ac.kr/~cjkim/MARKOV/data/filardo.prn&quot;&gt;http://econ.korea.ac.kr/~cjkim/MARKOV/data/filardo.prn&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5961431d30382fe4fa294e259b78d8b44e2bb828" translate="yes" xml:space="preserve">
          <source>This model demonstrates the use of explanatory variables (the X part of ARMAX). When exogenous regressors are included, the SARIMAX module uses the concept of &quot;regression with SARIMA errors&quot; (see &lt;a href=&quot;http://robjhyndman.com/hyndsight/arimax/&quot;&gt;http://robjhyndman.com/hyndsight/arimax/&lt;/a&gt; for details of regression with ARIMA errors versus alternative specifications), so that the model is specified as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423f645082341dc149bad94ddc54f468319a9683" translate="yes" xml:space="preserve">
          <source>This model is an extension of that from example 1. Here the data is assumed to follow the process:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf843594a1303136ad1b734a28234189ad4d7c5" translate="yes" xml:space="preserve">
          <source>This model is new and API stability is not guaranteed, although changes will be made in a backwards compatible way if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc4dff5f909b2b427efbc75e0ccf2422406cfa7" translate="yes" xml:space="preserve">
          <source>This needs to be multiplied by the joint variance estimate, means square error, MSE. To obtain the correction factor for the standard deviation, square root needs to be taken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e665f593c4d5a1a6363c61e1c393ff7ffb6a9b" translate="yes" xml:space="preserve">
          <source>This needs to be multiplies by the joint variance estimate, means square error, MSE. To obtain the correction factor for the standard deviation, square root needs to be taken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7c43c181cfd25e49999c468dca4999825c111d" translate="yes" xml:space="preserve">
          <source>This notebook demonstrates applying these models to separate trend from cycle in the U.S. unemployment rate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b1c50a6faaf281bfa338207cbc547aaad4cd6f" translate="yes" xml:space="preserve">
          <source>This notebook describes how to extend the Statsmodels statespace classes to create and estimate a custom model. Here we develop a local linear trend model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ee8bc4f88e97822eb646a72e904d2c674acb56" translate="yes" xml:space="preserve">
          <source>This notebook illustrates how you can use R-style formulas to fit Generalized Linear Models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86752179ec15adcaaea356efbd57ae47547a51da" translate="yes" xml:space="preserve">
          <source>This notebook provides an example of the use of Markov switching models in Statsmodels to estimate dynamic regression models with changes in regime. It follows the examples in the Stata Markov switching documentation, which can be found at &lt;a href=&quot;http://www.stata.com/manuals14/tsmswitch.pdf&quot;&gt;http://www.stata.com/manuals14/tsmswitch.pdf&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03214e2d5f772b1379da059be32f33ac7e7a0ff" translate="yes" xml:space="preserve">
          <source>This notebook provides an example of the use of Markov switching models in Statsmodels to replicate a number of results presented in Kim and Nelson (1999). It applies the Hamilton (1989) filter the Kim (1994) smoother.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e2b11d319bdfeb79a74ec7f39a7d3a4e0295d5" translate="yes" xml:space="preserve">
          <source>This notebook replicates examples from the Stata ARIMA time series estimation and postestimation documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851d61b9bdc5a25d03a0b9048e20e83ca71d8b01" translate="yes" xml:space="preserve">
          <source>This notebook replicates the existing ARMA notebook using the &lt;code&gt;statsmodels.tsa.statespace.SARIMAX&lt;/code&gt; class rather than the &lt;code&gt;statsmodels.tsa.ARMA&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89abff2512d58668cc0d27ce9989870764cb22ba" translate="yes" xml:space="preserve">
          <source>This page lists issues which may arise while using statsmodels. These can be the result of data-related or statistical problems, software design, &amp;ldquo;non-standard&amp;rdquo; use of models, or edge cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9634e157ce7f54d29422656a59b97d853fdcf52" translate="yes" xml:space="preserve">
          <source>This page provides a series of examples, tutorials and recipes to help you get started with statsmodels. Each of the examples shown here is made available as an IPython Notebook and as a plain python script on the &lt;a href=&quot;https://github.com/statsmodels/statsmodels/tree/master/examples&quot;&gt;statsmodels github repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6997941ccbb09db4f836cb4ab2d7ebe59e0d94f" translate="yes" xml:space="preserve">
          <source>This parameter enable internal transformation to impose non-negativity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1d5e35ff39a291a4575c80420fcce833eaef5c" translate="yes" xml:space="preserve">
          <source>This plot compares best fit lines for 10 quantile regression models to the least squares fit. As Koenker and Hallock (2001) point out, we see that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c377bbe9686a471f65cd9134586d76c31f1cb5" translate="yes" xml:space="preserve">
          <source>This plots four graphs in a 2 by 2 figure: &amp;lsquo;endog versus exog&amp;rsquo;, &amp;lsquo;residuals versus exog&amp;rsquo;, &amp;lsquo;fitted versus exog&amp;rsquo; and &amp;lsquo;fitted plus residual versus exog&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584e3ab536d0d1dca34d1be53b56f34d5b62136f" translate="yes" xml:space="preserve">
          <source>This procedure tests the null hypothesis that the joint distribution is symmetric around the main diagonal, that is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="459b4579bf1a29faf24950dbfb881cf9fd299657" translate="yes" xml:space="preserve">
          <source>This produces the same result as cov_hc0, and does not include any small sample correction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdaf182f671af72adad53953ac6c143d36429b07" translate="yes" xml:space="preserve">
          <source>This reduces the size of the instance, so it can be pickled with less memory. Currently tested for use with predict from an unpickled results and model instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36a6a67e63717dd3fc58ffe2b3d8e07a336b016" translate="yes" xml:space="preserve">
          <source>This reference implementation gives the correct result but is inefficient, so it can be overriden in subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d718873a97633f0ea555ccb04ee0bef531d5fb" translate="yes" xml:space="preserve">
          <source>This replicates Hamilton's (1989) seminal paper introducing Markov-switching models. The model is an autoregressive model of order 4 in which the mean of the process switches between two regimes. It can be written:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c53a387159175d80af596fcf870138137722f8" translate="yes" xml:space="preserve">
          <source>This resets the cache for related attributes which is potentially fragile. This only sets the option, the null model is estimated when llnull is accessed, if llnull is not yet in cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b0131ed22f2813cd595ed47c56a39481422ad9" translate="yes" xml:space="preserve">
          <source>This results are based on a sampling model in which the units are independent both within and between strata.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b770cd18476b27f337db2e7b1eebd688588dcee2" translate="yes" xml:space="preserve">
          <source>This results in the following summary table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77e07a70566ef6efd015583ee64742ab01c81fd" translate="yes" xml:space="preserve">
          <source>This returns a dummy variable for EVERY distinct variable. If a a structured or recarray is provided, the names for the new variable is the old variable name - underscore - category name. So if the a variable &amp;lsquo;vote&amp;rsquo; had answers as &amp;lsquo;yes&amp;rsquo; or &amp;lsquo;no&amp;rsquo; then the returned array would have to new variables&amp;ndash; &amp;lsquo;vote_yes&amp;rsquo; and &amp;lsquo;vote_no&amp;rsquo;. There is currently no name checking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f49b4958546b0def660298b4074ed3a8a7da822" translate="yes" xml:space="preserve">
          <source>This returns a generic RegressioResults instance as defined for the linear models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11086b87597a3865af26c34f30887abcbc4195c7" translate="yes" xml:space="preserve">
          <source>This routine is useful if one has an estimated covariance matrix that is not SPD, and the ultimate goal is to estimate the inverse, square root, or inverse square root of the true covariance matrix. The factor structure allows these tasks to be performed without constructing any n x n matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935e1c5a30d6121cd2850f5f91f2f42ce56babdd" translate="yes" xml:space="preserve">
          <source>This routine is useful when one has an approximate correlation matrix that is not positive semidefinite, and there is need to estimate the inverse, square root, or inverse square root of the population correlation matrix. The factor structure allows these tasks to be done without constructing any n x n matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c8921de7505d07a87e987f5f80f49f27dba692" translate="yes" xml:space="preserve">
          <source>This sandbox contains code that is for various resons not ready to be included in statsmodels proper. It contains modules from the old stats.models code that have not been tested, verified and updated to the new statsmodels structure: cox survival model, mixed effects model with repeated measures, generalized additive model and the formula framework. The sandbox also contains code that is currently being worked on until it fits the pattern of statsmodels or is sufficiently tested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33da63928ab9c2a1fc7fb6671edae8f0ac08ccf6" translate="yes" xml:space="preserve">
          <source>This section collects various additional functions and methods for statistical distributions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e2fc016ed83dc6dc46ac704dc2a038269c66e78" translate="yes" xml:space="preserve">
          <source>This section collects various methods in nonparametric statistics. This includes kernel density estimation for univariate and multivariate data, kernel regression and locally weighted scatterplot smoothing (lowess).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7373ff76b8ee40d7f6bd7ec6627f24d1f661d1dd" translate="yes" xml:space="preserve">
          <source>This section collects various statistical tests and tools. Some can be used independently of any models, some are intended as extension to the models and model results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eff056f83e3fe479f58f17168ebe674deab373c" translate="yes" xml:space="preserve">
          <source>This section includes methods and algorithms from multivariate statistics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2209238524adb6caa16b6a975a76b654a8e82f" translate="yes" xml:space="preserve">
          <source>This should be extended once I figure out what the distribution of runs of any length k is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bb31ebea9c4b18e193c159b8b87ee1a08a54f12" translate="yes" xml:space="preserve">
          <source>This should be extended to general least squares.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61fcaa1c7b6f3dc11f6b5622ecef2f0fea082dfa" translate="yes" xml:space="preserve">
          <source>This solves a separate OLS estimation for each desired lag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e5a9afcc9f0b8efa4018174cba27c8a190d0e6" translate="yes" xml:space="preserve">
          <source>This solves yule_walker equations or ols for each desired lag and contains currently duplicate calculations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d122a0dacd0e6f5ff63e906a7b966db909a4b6af" translate="yes" xml:space="preserve">
          <source>This solves yule_walker for each desired lag and contains currently duplicate calculations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1dce364d53d72904ab6797484548e6cb328154" translate="yes" xml:space="preserve">
          <source>This specification nests many simpler specifications. For example, regression with AR(2) errors is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015e6b9dfaf6cd13d046af19f5df2b9db38bbb9e" translate="yes" xml:space="preserve">
          <source>This specifies the alternative hypothesis for the test that corresponds to the confidence interval. The alternative hypothesis, H1, has to be one of the following</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3fd14aea805fb2a99d00aeb83ba36405a1e24e" translate="yes" xml:space="preserve">
          <source>This specifies the alternative hypothesis for the test that corresponds to the confidence interval. The alternative hypothesis, H1, has to be one of the following :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d03dfb846065c1fbf4c5c1033cea8353a64573f" translate="yes" xml:space="preserve">
          <source>This statistic can be tested against an \(F(h,h)\) distribution. Alternatively, \(h H(h)\) is asymptotically distributed according to \(\chi_h^2\); this second test can be applied by passing &lt;code&gt;asymptotic=True&lt;/code&gt; as an argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dd8be48fec3c936a91d1cb8176a1507b193136a" translate="yes" xml:space="preserve">
          <source>This test can also be used for a paired t-test, where effect size is defined in terms of the mean difference, and nobs is the number of pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab85dc75623992c3c71038ee4dfb5a532c89eca" translate="yes" xml:space="preserve">
          <source>This test compares the loglikelihood of the two models. This may not be a valid test, if there is unspecified heteroscedasticity or correlation. This method will issue a warning if this is detected but still return the results without taking unspecified heteroscedasticity or correlation into account.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c28df323bfba937630db071f01505e05979a411" translate="yes" xml:space="preserve">
          <source>This test compares the residual sum of squares of the two models. This is not a valid test, if there is unspecified heteroscedasticity or correlation. This method will issue a warning if this is detected but still return the results under the assumption of homoscedasticity and no autocorrelation (sphericity).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3b8bb3cc051e529306399e6d43e832b60abd7e" translate="yes" xml:space="preserve">
          <source>This test is a t-test that the mean of the recursive ols residuals is zero. Calculating the recursive residuals might take some time for large samples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbaf1c95cebe6083dfdc0087059d345e273e5e24" translate="yes" xml:space="preserve">
          <source>This test is described in &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;, chapter 8.4.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7286cbac9249f7827fa84c472dc1c900149f7d73" translate="yes" xml:space="preserve">
          <source>This test is intended for continuous distributions SAS has treatment for ties, but not clear, and sounds more complicated (minimum and maximum possible runs prevent use of argsort) (maybe it&amp;rsquo;s not so difficult, idea: add small positive noise to first one, run test, then to the other, run test, take max(?) p-value - DONE This gives not the minimum and maximum of the number of runs, but should be close. Not true, this is close to minimum but far away from maximum. maximum number of runs would use alternating groups in the ties.) Maybe adding random noise would be the better approach.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044022858d428aef04027a879b743d5da539baa1" translate="yes" xml:space="preserve">
          <source>This test is often used as a residual diagnostic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04cb4622a9cd6f441fbcc3d825a389b79a000722" translate="yes" xml:space="preserve">
          <source>This test works also for multi-endpoint comparisons: If d1 and d2 have the same number of columns, then each column of the data in d1 is compared with the corresponding column in d2. This is the same as comparing each of the corresponding columns separately. Currently no multi-comparison correction is used. The raw p-values reported here can be correction with the functions in &lt;code&gt;multitest&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87d6af020333ce2f8899b58bcb3da2fac651057" translate="yes" xml:space="preserve">
          <source>This tests that each coefficient is jointly statistically significantly different from zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027171b614a5850ba946ee29896f1532bdaeb4a0" translate="yes" xml:space="preserve">
          <source>This tests that the coefficient on the 2nd and 3rd regressors are equal and jointly that the coefficient on the 5th and 6th regressors are equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31483a4a6b71430a5aa5aee28c03aac9221b2205" translate="yes" xml:space="preserve">
          <source>This tests whether all groups have the same fraction of observations above the median.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d32d0ae49232e60d6f5b99e124467760604fd79" translate="yes" xml:space="preserve">
          <source>This tests whether two samples come from the same distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6414babb86107142e7cc873308240041cee906d5" translate="yes" xml:space="preserve">
          <source>This tutorial explains how to quickly implement new maximum likelihood models in &lt;code&gt;statsmodels&lt;/code&gt;. We give two examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ceb0c973b3fe3b251498b5401a6347e04fd9a5" translate="yes" xml:space="preserve">
          <source>This uses &lt;code&gt;numpy.asarray&lt;/code&gt; to convert the input, in contrast to the other functions in this category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1598ebcf8a4d4a3779088fe004376a10c75e883d" translate="yes" xml:space="preserve">
          <source>This uses a more numerically accurate calculation if available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71203a6ed007f6369e2cf70c3a8160b7de3f401e" translate="yes" xml:space="preserve">
          <source>This uses a simple normal test for proportions. It should be the same as running the mean z-test on the data encoded 1 for event and 0 for no event so that the sum corresponds to the count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283d3af720211949b8ce6912a8ce19cb2bf8ae59" translate="yes" xml:space="preserve">
          <source>This uses determinant of the estimate of the parameter covariance from leave-one-out estimates. requires leave one out loop for observations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="695f5de1dee36f7a00fbbf72281c686be6371c4c" translate="yes" xml:space="preserve">
          <source>This uses np.correlate which does full convolution. For very long time series it is recommended to use fft convolution instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a10dd2f8fb88a0e510de8ed1ae74606109dd186e" translate="yes" xml:space="preserve">
          <source>This uses scipy.stats.binom_test for the two-sided alternative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d24ce42e626c76040279dcae01124eb4bac16fa" translate="yes" xml:space="preserve">
          <source>This uses signal.freqz, which does not use fft. There is a fft version somewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981440006acb9877438b34eaa6a8c3d11787801f" translate="yes" xml:space="preserve">
          <source>This uses the augmented Engle-Granger two-step cointegration test. Constant or trend is included in 1st stage regression, i.e. in cointegrating equation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56759c65587c8782bf9d5ca132e6e0c45ca96278" translate="yes" xml:space="preserve">
          <source>This uses the formula design_info encoding contrast matrix and should work for all encodings of a main effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296ac26bf9d893db3e1d4f88707c1013d93fa6d8" translate="yes" xml:space="preserve">
          <source>This uses the same degrees of freedom correction as the t-test in the calculation of the standard error of the mean, i.e it uses &lt;code&gt;(sum_weights - 1)&lt;/code&gt; instead of &lt;code&gt;sum_weights&lt;/code&gt; in the denominator. See Examples below for the difference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f106b4b4ca7c2cd28fa55d8a0560196aa04baa1b" translate="yes" xml:space="preserve">
          <source>This version uses a single critical value of the studentized range distribution for all comparisons, and is therefore a step-down version of Tukey HSD. The class is written so it can be subclassed, where the get_distance_matrix and get_crit are overwritten to obtain other step-down procedures such as REGW.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2d1dc78a8ed004b390a9a50a44d5d4020a73a1" translate="yes" xml:space="preserve">
          <source>This very simple case-study is designed to get you up-and-running quickly with &lt;code&gt;statsmodels&lt;/code&gt;. Starting from raw data, we will show the steps needed to estimate a statistical model and to draw a diagnostic plot. We will only use functions provided by &lt;code&gt;statsmodels&lt;/code&gt; or its &lt;code&gt;pandas&lt;/code&gt; and &lt;code&gt;patsy&lt;/code&gt; dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="440f77cb8387abf13a1045e9fed491d934d517bb" translate="yes" xml:space="preserve">
          <source>This was mainly written to compare estimators of the standard errors of the parameter estimates. It uses independent random sampling from the original endog and exog, and therefore is only correct if observations are independently distributed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9249a2190a43bd3af09e0ad143dc92299b82dae0" translate="yes" xml:space="preserve">
          <source>This was written as a more general class for runs. This has some redundant calculations when only the runs_test is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb934d368353c871ce0eadb902c0a9f639125780" translate="yes" xml:space="preserve">
          <source>This will be moved to apply only to models with independently distributed observations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba9fee81ad18225bda93fe4957468c613effba4" translate="yes" xml:space="preserve">
          <source>This works also for more than two raters. In that case the dimension of the resulting contingency table is the same as the number of raters instead of 2-dimensional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe93aad0472f558a71b93bdf7f6995f08f6b7f3f" translate="yes" xml:space="preserve">
          <source>This works by creating a specification file, writing it to a temporary directory, invoking X12/X13 in a subprocess, and reading the output back in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4fd2e142bbb7cbb2e7538bf3572c3a9adf49e9" translate="yes" xml:space="preserve">
          <source>This works by creating a specification file, writing it to a temporary directory, invoking X12/X13 in a subprocess, and reading the output directory, invoking exog12/X13 in a subprocess, and reading the output back in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9f266e1cabc320305ec713bd282229e2ad60d7" translate="yes" xml:space="preserve">
          <source>This works for both real valued and complex valued parameters. The complex values being used to compute the numerical derivative. If available will use a Cython version of the Kalman Filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61aeeeb5e7e6726d5d8acce832a1bda2ffa20e38" translate="yes" xml:space="preserve">
          <source>This works only for classes where the &lt;code&gt;power&lt;/code&gt; method has &lt;code&gt;effect_size&lt;/code&gt;, &lt;code&gt;nobs&lt;/code&gt; and &lt;code&gt;alpha&lt;/code&gt; as the first three arguments. If the second argument is &lt;code&gt;nobs1&lt;/code&gt;, then the number of observations in the plot are those for the first sample. TODO: fix this for FTestPower and GofChisquarePower</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8adc20b23dd55e11eef4646c19321cc4468b944" translate="yes" xml:space="preserve">
          <source>Thomas Lumley. Generalized Estimating Equations for Ordinal Data: A Note on Working Correlation Structures. Biometrics Vol. 52, No. 1 (Mar., 1996), pp. 354-361 &lt;a href=&quot;http://www.jstor.org/stable/2533173&quot;&gt;http://www.jstor.org/stable/2533173&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe1ace65e2219ac94cbdf71aae71cd7b18cd10ed" translate="yes" xml:space="preserve">
          <source>Though the data here is not the same as in that example. You could run that example by uncommenting the necessary cells below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808ad8fcc9a3d3a080f0b766482437da4dd6d328" translate="yes" xml:space="preserve">
          <source>Three diagnostic tests are available after estimation of any statespace model, whether built in or custom, to help assess whether the model conforms to the underlying statistical assumptions. These tests are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bd73fabca0a290606743a92b0e7d99c8b1dd77" translate="yes" xml:space="preserve">
          <source>Thus the maximum likelihood estimates imply that for the process above, we have:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b62f8605349b5f7db29fbfa51510ae45e7b46df9" translate="yes" xml:space="preserve">
          <source>Thus the specification considered here is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db36dad0db42e33d5d9dfff677f804f3432e6ee" translate="yes" xml:space="preserve">
          <source>Time Series Analysis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26bdad2d81c7d1ca5d1496d01289e5df8525301" translate="yes" xml:space="preserve">
          <source>Time Series Analysis by State Space Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e55a10a34f789e4055955b5e5938e63fa7405e" translate="yes" xml:space="preserve">
          <source>Time Series Analysis by State Space Methods statespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ab105bd25586fd8c5c974c9ae6c7cc8d7c703e" translate="yes" xml:space="preserve">
          <source>Time Series Filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4026c6a358fe98bbe69a1a63983889fb0168c3f" translate="yes" xml:space="preserve">
          <source>Time Series Plots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="384434b60a328e93c3cefb39a3cd86a8ccc959ce" translate="yes" xml:space="preserve">
          <source>Time Series analysis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfcd814c35c93eb01becece48e5f74e28d770372" translate="yes" xml:space="preserve">
          <source>Time Series analysis &lt;code&gt;tsa&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29782bf2bf02b7af9492659e81f29ec0fe5923e" translate="yes" xml:space="preserve">
          <source>Time Series analysis tsa</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22cd3c65b98acc0509280a2ae7cba76b449d2be7" translate="yes" xml:space="preserve">
          <source>Time range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179578fe1b6b8990d0efc3fb472294bd74fff56d" translate="yes" xml:space="preserve">
          <source>Time:</source>
          <target state="translated">Time:</target>
        </trans-unit>
        <trans-unit id="456527c69cb646ac3e286220dd59f472b9372644" translate="yes" xml:space="preserve">
          <source>Tingley, Yamamoto, Hirose, Keele, Imai (2014). mediation : R package for causal mediation analysis. Journal of Statistical Software 59:5. &lt;a href=&quot;http://www.jstatsoft.org/v59/i05/paper&quot;&gt;http://www.jstatsoft.org/v59/i05/paper&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8256a8b27e2ff0a52c84b5ded8952204aaeeab45" translate="yes" xml:space="preserve">
          <source>To actually do the estimation, call the &lt;code&gt;fit&lt;/code&gt; method with the desired lag order. Or you can have the model select a lag order based on a standard information criterion (see below):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ecd158b908bb5838fe52664f3e7d1c101e9bae2" translate="yes" xml:space="preserve">
          <source>To begin, we fit the linear model described on the &lt;a href=&quot;gettingstarted&quot;&gt;Getting Started&lt;/a&gt; page. Download the data, subset columns, and list-wise delete to remove missing observations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69a3cd2e8bcd1e9cebe2bb70b3ac52f25e4296d" translate="yes" xml:space="preserve">
          <source>To begin, we load the &lt;code&gt;Star98&lt;/code&gt; dataset and we construct a formula and pre-process the data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50959886403e41fc50b9b06f3346f785d97b1041" translate="yes" xml:space="preserve">
          <source>To build a 32-bit application type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd98d8e7fcf0a50ee1b1764fecaec14630ac0ec" translate="yes" xml:space="preserve">
          <source>To build a 64-bit application type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf5c398699c46707dd417166121a5ea54cb2dca" translate="yes" xml:space="preserve">
          <source>To compute the quantiles, first, the weights are summed over exact ties yielding distinct data values y_1 &amp;lt; y_2 &amp;lt; &amp;hellip;, and corresponding weights w_1, w_2, &amp;hellip;. Let s_j denote the sum of the first j weights, and let W denote the sum of all the weights. For a probability point p, if pW falls strictly between s_j and s_{j+1} then the estimated quantile is y_{j+1}. If pW = s_j then the estimated quantile is (y_j + y_{j+1})/2. If pW &amp;lt; p_1 then the estimated quantile is y_1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621e51fc9b01fee514e81ebedba6eab75676d848" translate="yes" xml:space="preserve">
          <source>To create your own Likelihood Model, you simply need to overwrite the loglike method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef50315829eabb7f5a86e21d072ef814fbf52deb" translate="yes" xml:space="preserve">
          <source>To ensure optimization terminated successfully, it is suggested to do el_test([lower_limit], [param_num])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9de8605e4f86cf2bc9f3238c986234cd66793f9" translate="yes" xml:space="preserve">
          <source>To estimate a VAR model, one must first create the model using an &lt;code&gt;ndarray&lt;/code&gt; of homogeneous or structured dtype. When using a structured or record array, the class will use the passed variable names. Otherwise they can be passed explicitly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a66945153f19c162c29b6ac3e8916a8a95d46aa" translate="yes" xml:space="preserve">
          <source>To estimate sigma^2 the Newey-West estimator is used. If lags is None, the truncation lag parameter is set to int(12 * (n / 100) ** (1 / 4)), as outlined in Schwert (1989). The p-values are interpolated from Table 1 of Kwiatkowski et al. (1992). If the computed statistic is outside the table of critical values, then a warning message is generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ff278d60124779962e0e242186b33104153ecf" translate="yes" xml:space="preserve">
          <source>To fit most of the models covered by &lt;code&gt;statsmodels&lt;/code&gt;, you will need to create two design matrices. The first is a matrix of endogenous variable(s) (i.e. dependent, response, regressand, etc.). The second is a matrix of exogenous variable(s) (i.e. independent, predictor, regressor, etc.). The OLS coefficient estimates are calculated as usual:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806aa31668eb1b8ec7b889a392ff773ebbf2b70d" translate="yes" xml:space="preserve">
          <source>To generate &lt;code&gt;numpy&lt;/code&gt; arrays:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4437f8a33fcbc8b094117aa8d5c02aee6525a111" translate="yes" xml:space="preserve">
          <source>To generate pandas data frames:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb28626d9494d953405e91ca8ff75ebe91109271" translate="yes" xml:space="preserve">
          <source>To get a sense of these three variables over the timeframe, we can plot them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f01c0cdf82f8a70c1a16ab46082c3e908e5f16c" translate="yes" xml:space="preserve">
          <source>To get a sorted DataFrame, all styling options need to be turned off:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9309b9f56b92781902526827423a84bd8f700977" translate="yes" xml:space="preserve">
          <source>To have a look at the contrast matrices in Patsy, we will use data from UCLA ATS. First let&amp;rsquo;s load the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82947b7184c1e0fceb41a18fdcf895657b7f897b" translate="yes" xml:space="preserve">
          <source>To have a look at the contrast matrices in Patsy, we will use data from UCLA ATS. First let's load the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013a0bfeda7bd4080506d8fa34aa033be7a0da94" translate="yes" xml:space="preserve">
          <source>To illustrate, the comparison on level 4 is the mean of the dependent variable at the previous three levels taken from the mean at level 4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3950ae2efc616f24689d2f9a23b8c4a5cfb56c" translate="yes" xml:space="preserve">
          <source>To obtain the crude (global) odds ratio, first pool all binary indicators corresponding to a given pair of cut points (c,c&amp;rsquo;), then calculate the odds ratio for this 2x2 table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d2dcf3ef970b175f2aa94e1572f1ce638ce2ae" translate="yes" xml:space="preserve">
          <source>To obtain the crude (global) odds ratio, first pool all binary indicators corresponding to a given pair of cut points (c,c&amp;rsquo;), then calculate the odds ratio for this 2x2 table. The crude odds ratio is the inverse variance weighted average of these odds ratios. Since the covariate effects are ignored, this OR will generally be greater than the stratified OR.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83528680c28384dbdc3cf403f09e904cb606c2e5" translate="yes" xml:space="preserve">
          <source>To obtain the latest released version of statsmodels using pip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c10491152e5e055a5a14b3e1af208f3157e8f4e" translate="yes" xml:space="preserve">
          <source>To plot a single survival function, call the &lt;code&gt;plot&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5dcde620e1f8273e952ce60ba7e692f52b689a1" translate="yes" xml:space="preserve">
          <source>To see what functions and classes available, you can type the following (or use the namespace exploration features of IPython, Spyder, IDLE, etc.):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4f7e4da0fb30af490828796ea9c4a944e6c12e" translate="yes" xml:space="preserve">
          <source>To take advantage of the existing infrastructure, including Kalman filtering and maximum likelihood estimation, we create a new class which extends from &lt;code&gt;statsmodels.tsa.statespace.MLEModel&lt;/code&gt;. There are a number of things that must be specified:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d6d748a3e405e1918dadacde774e1b0a5277e1" translate="yes" xml:space="preserve">
          <source>To understand how to specify this model in Statsmodels, first recall that from example 1 we used the following code to specify the ARIMA(1,1,1) model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a89f50abb45dfbf2c2a46e016ca2c25e0834c2" translate="yes" xml:space="preserve">
          <source>To use this functionality, &lt;a href=&quot;https://pypi.python.org/pypi/pandas&quot;&gt;pandas&lt;/a&gt; must be installed. See the &lt;a href=&quot;http://pandas.pydata.org&quot;&gt;pandas documentation&lt;/a&gt; for more information on the below data structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa8cc860c52b268dc6a3adcde7305e9415db5bb" translate="yes" xml:space="preserve">
          <source>Tools</source>
          <target state="translated">Tools</target>
        </trans-unit>
        <trans-unit id="07e4f9c27860c8f452d481954e498a807cd27a98" translate="yes" xml:space="preserve">
          <source>Topics</source>
          <target state="translated">Topics</target>
        </trans-unit>
        <trans-unit id="1a9c6828a68ada2ecce8ad2f10c935bb10375cb1" translate="yes" xml:space="preserve">
          <source>Toss a six-sided die 5 times, what's the probability of exactly 2 fours?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e901ff25c99eb4d6e1d62b6849454a7cb52c35" translate="yes" xml:space="preserve">
          <source>Trace statistic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8809b09076ecfeccf2b421deb4072577df78d4f" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.cdf()</source>
          <target state="translated">TransfTwo_gen.cdf()</target>
        </trans-unit>
        <trans-unit id="e4ec3e1a0493d5167f907ec68f38499b571b0b25" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.entropy()</source>
          <target state="translated">TransfTwo_gen.entropy()</target>
        </trans-unit>
        <trans-unit id="12fd2a896d262c58117b5ad8bc26f17199a40431" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.expect()</source>
          <target state="translated">TransfTwo_gen.expect()</target>
        </trans-unit>
        <trans-unit id="88f27c32dc8791243b0366524f75a26e7f0dd148" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.fit()</source>
          <target state="translated">TransfTwo_gen.fit()</target>
        </trans-unit>
        <trans-unit id="ceef65061f4f1c4a6ca837ffbf18e7500aa958e6" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.fit_loc_scale()</source>
          <target state="translated">TransfTwo_gen.fit_loc_scale()</target>
        </trans-unit>
        <trans-unit id="bc3b5a291e487309ee7d3b4ac35ba20bb639af55" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.freeze()</source>
          <target state="translated">TransfTwo_gen.freeze()</target>
        </trans-unit>
        <trans-unit id="3eb8b801edd413ab7e01814440aa7933aa5f6778" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.interval()</source>
          <target state="translated">TransfTwo_gen.interval()</target>
        </trans-unit>
        <trans-unit id="f84d56f9833c3d896563181b6865d43786d3e95b" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.isf()</source>
          <target state="translated">TransfTwo_gen.isf()</target>
        </trans-unit>
        <trans-unit id="ede2a64e2fc85288f2a8c9eb00489456b5738a7f" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.logcdf()</source>
          <target state="translated">TransfTwo_gen.logcdf()</target>
        </trans-unit>
        <trans-unit id="a0a5787e369c30e0e7f619a8bd95b96cbb29b90e" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.logpdf()</source>
          <target state="translated">TransfTwo_gen.logpdf()</target>
        </trans-unit>
        <trans-unit id="abeee8a1eb34e70ebb302797088d39adcf324b2a" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.logsf()</source>
          <target state="translated">TransfTwo_gen.logsf()</target>
        </trans-unit>
        <trans-unit id="dfc50e19d0e9f9b093b3b210b8755f545a25f5e8" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.mean()</source>
          <target state="translated">TransfTwo_gen.mean()</target>
        </trans-unit>
        <trans-unit id="395674a20959b743bd9fb9de35ed4916978f2205" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.median()</source>
          <target state="translated">TransfTwo_gen.median()</target>
        </trans-unit>
        <trans-unit id="2e319f99ee4158208aa210ea50b16d962e46f8fe" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.moment()</source>
          <target state="translated">TransfTwo_gen.moment()</target>
        </trans-unit>
        <trans-unit id="68529a3c51597d895d7aa52f4142b44e3c25ca07" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.nnlf()</source>
          <target state="translated">TransfTwo_gen.nnlf()</target>
        </trans-unit>
        <trans-unit id="cd044e884718d34d75100877e67dbf398ed0dae5" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.pdf()</source>
          <target state="translated">TransfTwo_gen.pdf()</target>
        </trans-unit>
        <trans-unit id="e977c9c5886e48af2a71c703562a2d1f9a5ee717" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.ppf()</source>
          <target state="translated">TransfTwo_gen.ppf()</target>
        </trans-unit>
        <trans-unit id="97e5c024767e19eef588f66c52f98ef290ff8d66" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.rvs()</source>
          <target state="translated">TransfTwo_gen.rvs()</target>
        </trans-unit>
        <trans-unit id="965685926f3e799bceb54b9ad538ea27f6a4b25a" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.sf()</source>
          <target state="translated">TransfTwo_gen.sf()</target>
        </trans-unit>
        <trans-unit id="16392a231f4dc9ca445457549d7be5a0adc204d5" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.stats()</source>
          <target state="translated">TransfTwo_gen.stats()</target>
        </trans-unit>
        <trans-unit id="4ae628e787c22495a9a4eb79344c1da0a17ebdb0" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.std()</source>
          <target state="translated">TransfTwo_gen.std()</target>
        </trans-unit>
        <trans-unit id="1771eb283d1ea03e76677d86ba6b4f1c3547fab1" translate="yes" xml:space="preserve">
          <source>TransfTwo_gen.var()</source>
          <target state="translated">TransfTwo_gen.var()</target>
        </trans-unit>
        <trans-unit id="0937503cd8c5ea6d98032004daa80183db5ff36c" translate="yes" xml:space="preserve">
          <source>Transf_gen.cdf()</source>
          <target state="translated">Transf_gen.cdf()</target>
        </trans-unit>
        <trans-unit id="b118a0ac285cbde32ae39e16b2f6d8c6ac3e122d" translate="yes" xml:space="preserve">
          <source>Transf_gen.entropy()</source>
          <target state="translated">Transf_gen.entropy()</target>
        </trans-unit>
        <trans-unit id="b4355c4d9fe6d33a6ae6112d057acadde091de54" translate="yes" xml:space="preserve">
          <source>Transf_gen.expect()</source>
          <target state="translated">Transf_gen.expect()</target>
        </trans-unit>
        <trans-unit id="b3778da90ee6937564e7711fc5f0b4af8c532e56" translate="yes" xml:space="preserve">
          <source>Transf_gen.fit()</source>
          <target state="translated">Transf_gen.fit()</target>
        </trans-unit>
        <trans-unit id="f92a6259d2cf9a6b2b9633ec9d69adaee8ca3a4d" translate="yes" xml:space="preserve">
          <source>Transf_gen.fit_loc_scale()</source>
          <target state="translated">Transf_gen.fit_loc_scale()</target>
        </trans-unit>
        <trans-unit id="b9e04e46fe8f103cd7a249cf7af8d7c32a6a70ca" translate="yes" xml:space="preserve">
          <source>Transf_gen.freeze()</source>
          <target state="translated">Transf_gen.freeze()</target>
        </trans-unit>
        <trans-unit id="f297429116b9dd902ffbe264761a7cfa34650c2b" translate="yes" xml:space="preserve">
          <source>Transf_gen.interval()</source>
          <target state="translated">Transf_gen.interval()</target>
        </trans-unit>
        <trans-unit id="60daa647cae14e3b2b9324d5d1b5ef74bd5363bd" translate="yes" xml:space="preserve">
          <source>Transf_gen.isf()</source>
          <target state="translated">Transf_gen.isf()</target>
        </trans-unit>
        <trans-unit id="f175b98bab9fcd853f20c47014fdf8c97164aa74" translate="yes" xml:space="preserve">
          <source>Transf_gen.logcdf()</source>
          <target state="translated">Transf_gen.logcdf()</target>
        </trans-unit>
        <trans-unit id="070d1a8fedb4811583cf971033da4daeae931673" translate="yes" xml:space="preserve">
          <source>Transf_gen.logpdf()</source>
          <target state="translated">Transf_gen.logpdf()</target>
        </trans-unit>
        <trans-unit id="28354781db974af970872b4e4ae2502338ba4320" translate="yes" xml:space="preserve">
          <source>Transf_gen.logsf()</source>
          <target state="translated">Transf_gen.logsf()</target>
        </trans-unit>
        <trans-unit id="9e33c621983e8c6999b1c8cd1baaa72973e4170e" translate="yes" xml:space="preserve">
          <source>Transf_gen.mean()</source>
          <target state="translated">Transf_gen.mean()</target>
        </trans-unit>
        <trans-unit id="c9c03107e363984e0ffd4f4b0b8be9cc6a9e4318" translate="yes" xml:space="preserve">
          <source>Transf_gen.median()</source>
          <target state="translated">Transf_gen.median()</target>
        </trans-unit>
        <trans-unit id="6bf1570e581b38eb135300a2f742eaecf0e76536" translate="yes" xml:space="preserve">
          <source>Transf_gen.moment()</source>
          <target state="translated">Transf_gen.moment()</target>
        </trans-unit>
        <trans-unit id="5da4dd7c0b95ae4ca4ffa4a84cb94b9c81751818" translate="yes" xml:space="preserve">
          <source>Transf_gen.nnlf()</source>
          <target state="translated">Transf_gen.nnlf()</target>
        </trans-unit>
        <trans-unit id="83444b029ac15d28aa1cb4f58b896809537dcd45" translate="yes" xml:space="preserve">
          <source>Transf_gen.pdf()</source>
          <target state="translated">Transf_gen.pdf()</target>
        </trans-unit>
        <trans-unit id="6a90bda2c6b350971b1f0fd41e39a214c20f9cef" translate="yes" xml:space="preserve">
          <source>Transf_gen.ppf()</source>
          <target state="translated">Transf_gen.ppf()</target>
        </trans-unit>
        <trans-unit id="995cfde7bc396ca2bad7b6058fd63476a5f8d6fc" translate="yes" xml:space="preserve">
          <source>Transf_gen.rvs()</source>
          <target state="translated">Transf_gen.rvs()</target>
        </trans-unit>
        <trans-unit id="46e01548826c314ad825b702518f749cc98823e7" translate="yes" xml:space="preserve">
          <source>Transf_gen.sf()</source>
          <target state="translated">Transf_gen.sf()</target>
        </trans-unit>
        <trans-unit id="03896de211341dad8a27d57759d856c72e9173f7" translate="yes" xml:space="preserve">
          <source>Transf_gen.stats()</source>
          <target state="translated">Transf_gen.stats()</target>
        </trans-unit>
        <trans-unit id="9a1ed71c8fbc9c3bd4a91de36cf97fb4eb170d46" translate="yes" xml:space="preserve">
          <source>Transf_gen.std()</source>
          <target state="translated">Transf_gen.std()</target>
        </trans-unit>
        <trans-unit id="3fb5895b905f69865e58fbdb4ff335a9cba925f8" translate="yes" xml:space="preserve">
          <source>Transf_gen.var()</source>
          <target state="translated">Transf_gen.var()</target>
        </trans-unit>
        <trans-unit id="faee48839506490fb38e7b22b4798ae63adc542d" translate="yes" xml:space="preserve">
          <source>Transform constrained parameters used in likelihood evaluation to unconstrained parameters used by the optimizer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8005a00d7cbe14b7628def19200aa2f286ebcdb4" translate="yes" xml:space="preserve">
          <source>Transform constrained parameters used in likelihood evaluation to unconstrained parameters used by the optimizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003fb348699f7e773140d7b36d954fa0f045bccb" translate="yes" xml:space="preserve">
          <source>Transform unconstrained parameters used by the optimizer to constrained parameters used in likelihood evaluation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95606ba6005f73eba7b548f26a2d332ed9c6c525" translate="yes" xml:space="preserve">
          <source>Transform unconstrained parameters used by the optimizer to constrained parameters used in likelihood evaluation for a vector autoregression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1384483c306d02e50ccadc4e054056104acec44" translate="yes" xml:space="preserve">
          <source>Transform unconstrained parameters used by the optimizer to constrained parameters used in likelihood evaluation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e37a9641606e4fe9d625b79dafe6c1cfe4bc6b" translate="yes" xml:space="preserve">
          <source>Treatment (Dummy) Coding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae07c6ee88cd0b9e146f63b2b7e657e5f34e8a9" translate="yes" xml:space="preserve">
          <source>Trend</source>
          <target state="translated">Trend</target>
        </trans-unit>
        <trans-unit id="cd4575214beefee2f5d169c84d95aaa2c2ada538" translate="yes" xml:space="preserve">
          <source>Trends and cycles in unemployment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ae269854a696c0e8d947dac022cfc0bfdcb3c5" translate="yes" xml:space="preserve">
          <source>Tries to do some crude numerical speed improvements for cases with high persistence. However, this algorithm is slow if the process is highly persistent and only a few autocovariances are desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eed45b05c58fe171a165ce6edc0256a2264aafd" translate="yes" xml:space="preserve">
          <source>Trimmed Mean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0e3c09b8e5268f26828eede4117fa9e38a4832" translate="yes" xml:space="preserve">
          <source>Trimmed mean function for M-estimation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f959afc92c14c06c1126a73d162b065068eb9814" translate="yes" xml:space="preserve">
          <source>TrimmedMean.psi()</source>
          <target state="translated">TrimmedMean.psi()</target>
        </trans-unit>
        <trans-unit id="1a8ce8b05e53ea2c64c615254abdaebd3849da45" translate="yes" xml:space="preserve">
          <source>TrimmedMean.psi_deriv()</source>
          <target state="translated">TrimmedMean.psi_deriv()</target>
        </trans-unit>
        <trans-unit id="ed73fd86038b4306dce8502bf76c73bced841633" translate="yes" xml:space="preserve">
          <source>TrimmedMean.rho()</source>
          <target state="translated">TrimmedMean.rho()</target>
        </trans-unit>
        <trans-unit id="6de9819b2487c2ebda27c0b9813534020717d5ae" translate="yes" xml:space="preserve">
          <source>TrimmedMean.weights()</source>
          <target state="translated">TrimmedMean.weights()</target>
        </trans-unit>
        <trans-unit id="bfc27c797684bb9c111b8f326162c858140134ef" translate="yes" xml:space="preserve">
          <source>True if (Q, P) contrast &lt;code&gt;C&lt;/code&gt; is estimable for (N, P) design &lt;code&gt;D&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae00528a094186ee2a96a8f1c28bb61b538baad1" translate="yes" xml:space="preserve">
          <source>Try to construct a basic summary instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298cb86371c4f4e4a7d949d88121ede3ac63f675" translate="yes" xml:space="preserve">
          <source>Tukey&amp;rsquo;s Biweight</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bdec49c19c2ba4e4ae53e882c8f6a0e743b33ca" translate="yes" xml:space="preserve">
          <source>Tukey&amp;rsquo;s Mean Difference Plot (also known as a Bland-Altman plot) is a graphical method to analyze the differences between two methods of measurement. The mean of the measures is plotted against their difference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ccf534f61473edd6f33fbfcdf40654d4bfb5695" translate="yes" xml:space="preserve">
          <source>Tukey&amp;rsquo;s Mean Difference Plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebdb5f10bbc2b839735f930382eee0ca99d27679" translate="yes" xml:space="preserve">
          <source>Tukey&amp;rsquo;s biweight function for M-estimation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421a86d53f1c6556dbe13d854a8a279a9a075252" translate="yes" xml:space="preserve">
          <source>Tukey&amp;rsquo;s biweight is sometime&amp;rsquo;s called bisquare.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db2cd3d360758cd1d459ef0616250d9c9876103" translate="yes" xml:space="preserve">
          <source>Tukey&amp;rsquo;s biweight weighting function for the IRLS algorithm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485cfd50b15394721c79c9eba22cbb6366680033" translate="yes" xml:space="preserve">
          <source>Tukey&amp;rsquo;s range test to compare means of all pairs of groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8659cbab29e32a3aba951c2be293c286bb6375a" translate="yes" xml:space="preserve">
          <source>Tukey's Biweight</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c08336bfbca45bdfea9a07342e73c3a178c8bc" translate="yes" xml:space="preserve">
          <source>TukeyBiweight.psi()</source>
          <target state="translated">TukeyBiweight.psi()</target>
        </trans-unit>
        <trans-unit id="13b98998c79a0f3a3b836ba9660f09932bf5b388" translate="yes" xml:space="preserve">
          <source>TukeyBiweight.psi_deriv()</source>
          <target state="translated">TukeyBiweight.psi_deriv()</target>
        </trans-unit>
        <trans-unit id="3fe2f514c2f104a3b3680a3045aa880778bdc784" translate="yes" xml:space="preserve">
          <source>TukeyBiweight.rho()</source>
          <target state="translated">TukeyBiweight.rho()</target>
        </trans-unit>
        <trans-unit id="224fc97ed4f8cd5018fe25e5817bbde15283ec92" translate="yes" xml:space="preserve">
          <source>TukeyBiweight.weights()</source>
          <target state="translated">TukeyBiweight.weights()</target>
        </trans-unit>
        <trans-unit id="297537c0df4c15dcb80a2d55502f11e1a5a3b9a4" translate="yes" xml:space="preserve">
          <source>TukeyHSDResults instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e88167a437699866b8fa7e5f4ccec8714ef5a7e7" translate="yes" xml:space="preserve">
          <source>TukeyHSDResults.plot_simultaneous()</source>
          <target state="translated">TukeyHSDResults.plot_simultaneous()</target>
        </trans-unit>
        <trans-unit id="989c4676fed10be070f43412ecca729c2b56b997" translate="yes" xml:space="preserve">
          <source>TukeyHSDResults.summary()</source>
          <target state="translated">TukeyHSDResults.summary()</target>
        </trans-unit>
        <trans-unit id="100703cdb66004dd9b72f18c76effb02b20695c6" translate="yes" xml:space="preserve">
          <source>Tuple of lower and upper arrays of ma_rep monte carlo standard errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="419c7529694ad4d2195a21160df7b91ec1b88555" translate="yes" xml:space="preserve">
          <source>Tweedie</source>
          <target state="translated">Tweedie</target>
        </trans-unit>
        <trans-unit id="1bd040f0fbcf93c15865e7e739c2ce53d6ad159a" translate="yes" xml:space="preserve">
          <source>Tweedie \(p\geq 1\)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1bf109bf19091124328eb4a24449ffa8cbf54f" translate="yes" xml:space="preserve">
          <source>Tweedie family.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223687ad956daeeb3340bdce5b2373c16cf2c0d8" translate="yes" xml:space="preserve">
          <source>Tweedie specific function to estimate scale and the variance parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fabebd179c2bc5ace287d7f2cebd743300ad838b" translate="yes" xml:space="preserve">
          <source>Tweedie specific function to estimate scale and the variance parameter. The variance parameter is also referred to as p, xi, or shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3425104be4d9a6bee31f9593344f5b6bae755c92" translate="yes" xml:space="preserve">
          <source>Tweedie.deviance()</source>
          <target state="translated">Tweedie.deviance()</target>
        </trans-unit>
        <trans-unit id="7e1c21126b4599b9fee1937023a19c92bdca5d97" translate="yes" xml:space="preserve">
          <source>Tweedie.fitted()</source>
          <target state="translated">Tweedie.fitted()</target>
        </trans-unit>
        <trans-unit id="06a48086ebee8a1f17b535bc7fc14fee8113e582" translate="yes" xml:space="preserve">
          <source>Tweedie.loglike()</source>
          <target state="translated">Tweedie.loglike()</target>
        </trans-unit>
        <trans-unit id="f06a24c5ba56c7cbc55f8f313c91ac3eb0927387" translate="yes" xml:space="preserve">
          <source>Tweedie.loglike_obs()</source>
          <target state="translated">Tweedie.loglike_obs()</target>
        </trans-unit>
        <trans-unit id="98fdf24942e4280350376b05adce5fa7a6a67aad" translate="yes" xml:space="preserve">
          <source>Tweedie.predict()</source>
          <target state="translated">Tweedie.predict()</target>
        </trans-unit>
        <trans-unit id="da0a4ec3680b65f47d70c1d5d8b075a465fb4b08" translate="yes" xml:space="preserve">
          <source>Tweedie.resid_anscombe()</source>
          <target state="translated">Tweedie.resid_anscombe()</target>
        </trans-unit>
        <trans-unit id="7d680d5ea94b33402bd0363d74d5eb629ae0a2cb" translate="yes" xml:space="preserve">
          <source>Tweedie.resid_dev()</source>
          <target state="translated">Tweedie.resid_dev()</target>
        </trans-unit>
        <trans-unit id="450fadcdbc2e11dd11849a7af48b716ce5314e6c" translate="yes" xml:space="preserve">
          <source>Tweedie.starting_mu()</source>
          <target state="translated">Tweedie.starting_mu()</target>
        </trans-unit>
        <trans-unit id="76d94891b07de09ee8619dddfc13dee85ffcc36e" translate="yes" xml:space="preserve">
          <source>Tweedie.weights()</source>
          <target state="translated">Tweedie.weights()</target>
        </trans-unit>
        <trans-unit id="bb605ad008b0cbf3cb0af3ee1007aefbd4f92aa4" translate="yes" xml:space="preserve">
          <source>Tweedie: an abbreviation for \(\frac{p-2}{p-1}\) of the power \(p\) of the variance function, see table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2130389d2fea16fb5a183530d86ee4e3420a6dc9" translate="yes" xml:space="preserve">
          <source>Two groups for error variance, low and high variance groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e25c86de7911944492190fc088defc2cd638a2f" translate="yes" xml:space="preserve">
          <source>Two important things to notice:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4d1d3d22b04131c0a3e6b02f6a1c3e159955d0" translate="yes" xml:space="preserve">
          <source>Two-Stage Least Squares for Simultaneous equations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c55674aae5ce452c727dd39666a7064a75caa1" translate="yes" xml:space="preserve">
          <source>Two-sided p-values for model coefficients from Student t-distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b37cf53b2a3d876f2f64b059360ec425d5dc91d2" translate="yes" xml:space="preserve">
          <source>Two-sided: Null hypothesis is that the variance is not changing throughout the sample. Both that the sum-of-squares in the earlier subsample is not greater than the sum-of-squares in the later subsample &lt;em&gt;and&lt;/em&gt; that the sum-of-squares in the later subsample is not greater than the sum-of-squares in the earlier subsample.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf969a8e3982a858fa2c8ae596753d8405bf9f7d" translate="yes" xml:space="preserve">
          <source>Two-way ANOVA</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f60ce349483da822f10592bde5ed072e27e4977" translate="yes" xml:space="preserve">
          <source>Type of scale can be chose in the fit method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9251ebbdae7861ff4a734d8d52bc110c5961e26b" translate="yes" xml:space="preserve">
          <source>Types &lt;code&gt;surv&lt;/code&gt; and &lt;code&gt;cumhaz&lt;/code&gt; require estimation of the cumulative hazard function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f1e5028fabd661317b0b352bb16190c50ddb06" translate="yes" xml:space="preserve">
          <source>Types I and II are equivalent under a balanced design.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ebfa902985044d428ed50149b52e0c461c86c4d" translate="yes" xml:space="preserve">
          <source>US GNP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b1660cb73752b4cef46533676990704cb66a299" translate="yes" xml:space="preserve">
          <source>US GNP implicit price deflator, &quot;prices&quot;, (&lt;a href=&quot;https://research.stlouisfed.org/fred2/series/GNPDEF&quot;&gt;GNPDEF&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f911b95ef133fc5189ff6979223b47fd77be27f8" translate="yes" xml:space="preserve">
          <source>US Prices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="728a164bff7536eaf6611be8e105a5e2d7340373" translate="yes" xml:space="preserve">
          <source>US monetary base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e88c72f8d69370b158c4d66672e9521eaffd47af" translate="yes" xml:space="preserve">
          <source>US monetary base, &quot;money&quot;, (&lt;a href=&quot;https://research.stlouisfed.org/fred2/series/AMBSL&quot;&gt;AMBSL&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da58edcaa98a938912e0be37c02dbc7ca7eaf96" translate="yes" xml:space="preserve">
          <source>US real GNP, &quot;output&quot;, (&lt;a href=&quot;https://research.stlouisfed.org/fred2/series/GNPC96&quot;&gt;GNPC96&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9113da55ec2c6938300281a84d4979047cb392b" translate="yes" xml:space="preserve">
          <source>Unbiased or maximum-likelihood estimator (mle)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909b261f5f2e6d9008426c7b31ef5e47d79927a7" translate="yes" xml:space="preserve">
          <source>Under ML estimation, the default rotation (used for &lt;code&gt;loadings&lt;/code&gt;) is condition IC3 of Bai and Li (2012). Under this rotation, the factor scores are iid and standardized. If &lt;code&gt;G&lt;/code&gt; is the canonical loadings and &lt;code&gt;U&lt;/code&gt; is the vector of uniquenesses, then the covariance matrix implied by the factor analysis is &lt;code&gt;GG&amp;rsquo; + diag(U)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4efb639d180aa976257a18f3424ff8db3ca6ffe9" translate="yes" xml:space="preserve">
          <source>Under the assumption that \(A^*H\) has full rank, the analytical solution \(T\) is given by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511ff9b9aeceb0b038bfd3074d53642944ec9839" translate="yes" xml:space="preserve">
          <source>Unidentified Parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c9a6a05cf7a7f1ff1d438636404fb3481349ef" translate="yes" xml:space="preserve">
          <source>Unit Root Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2900e424f3eeccf359c7d9e5eac9186402bf5ca" translate="yes" xml:space="preserve">
          <source>Unit-Root and Cointegration Tests.&amp;rdquo; Journal of Business &amp;amp; Economics Statistics, 12.2, 167-76.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127787b0c535731d92097dce45999b6fec31492e" translate="yes" xml:space="preserve">
          <source>Univariate Autogressive Processes (AR)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d43299f7106e78aa2457ac0e924d051efee4ba6" translate="yes" xml:space="preserve">
          <source>Univariate Distributions by non-linear Transformations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e38bce9b57e3ad41941b718be8b6f9497641c604" translate="yes" xml:space="preserve">
          <source>Univariate Kalman smoother, as presented in Durbin and Koopman, 2012 chapter 6, except with modified Bryson-Frazier timing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b70949087eccddc83225f41e3cac9cb9fa6c31" translate="yes" xml:space="preserve">
          <source>Univariate Kernel Density Estimator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2334fa3c9200888e2b495a2319ced3f681c5255e" translate="yes" xml:space="preserve">
          <source>Univariate Kernel Density Estimator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3f59b1753f75a853b5afc3592cd6b44f537d53" translate="yes" xml:space="preserve">
          <source>Univariate approach to Kalman filtering. Overrides conventional method if both are specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5470b0d3d24329b8cc4d5908dd4f0bd96f5d9f" translate="yes" xml:space="preserve">
          <source>Univariate distributions can be generated from a non-linear transformation of an existing univariate distribution. &lt;code&gt;Transf_gen&lt;/code&gt; is a class that can generate a new distribution from a monotonic transformation, &lt;code&gt;TransfTwo_gen&lt;/code&gt; can use hump-shaped or u-shaped transformation, such as abs or square. The remaining objects are special cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bfa53a090534a0a8f163d560cb12f4f0afaee23" translate="yes" xml:space="preserve">
          <source>Univariate estimation (as provided by &lt;code&gt;KDEUnivariate&lt;/code&gt;) uses FFT transforms, which makes it quite fast. Therefore it should be preferred for &lt;em&gt;continuous, univariate&lt;/em&gt; data if speed is important. It supports using different kernels; bandwidth estimation is done only by a rule of thumb (Scott or Silverman).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c01d125083ff834c25a4a366dce3fe4f0aeec7cd" translate="yes" xml:space="preserve">
          <source>Univariate examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0077aa1329a316687a6d103dc238f57d732937b" translate="yes" xml:space="preserve">
          <source>Univariate unobserved components time series model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1f9306cb61fbc386e2a2d3729170746d928816" translate="yes" xml:space="preserve">
          <source>Unknown Change Point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32567cba0094a2a487ef4a9ab851d6a8b8230ae8" translate="yes" xml:space="preserve">
          <source>Unlike Statsmodels mixed linear models, the GLIMMIX implementation is not group-based. Groups are created by interacting all random effects with a categorical variable. Note that this creates large, sparse random effects design matrices &lt;code&gt;exog_vc&lt;/code&gt;. Internally, &lt;code&gt;exog_vc&lt;/code&gt; is converted to a scipy sparse matrix. When passing the arguments directly to the class initializer, a sparse matrix may be passed. When using formulas, a dense matrix is created then converted to sparse. For very large problems, it may not be feasible to use formulas due to the size of this dense intermediate matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b761c378d05e6b352c0bc346e5533c7ce87babc8" translate="yes" xml:space="preserve">
          <source>Unobserved Components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaa3efa58f0a91fde82f68cb0bae37f42686ca9e" translate="yes" xml:space="preserve">
          <source>Unobserved Components: Application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb14ba050d2eea20b46383cfb2429a72b1bd915" translate="yes" xml:space="preserve">
          <source>Unobserved components and ARIMA model (UC-ARIMA)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2209b761138d52bf7f9d405745b37c9a07ce25" translate="yes" xml:space="preserve">
          <source>Unobserved components with stochastic cycle (UC)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea39f378eb70d487167b7af05b574b5382f15ca" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.filter()</source>
          <target state="translated">UnobservedComponents.filter()</target>
        </trans-unit>
        <trans-unit id="73defdbbca032db6322ec168808958bfcfb1e97e" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.fit()</source>
          <target state="translated">UnobservedComponents.fit()</target>
        </trans-unit>
        <trans-unit id="548d624daaccd937b49e76d78b496fa353566864" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.from_formula()</source>
          <target state="translated">UnobservedComponents.from_formula()</target>
        </trans-unit>
        <trans-unit id="fcde323f50b8c049d53e6c6937431ac393b9774d" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.hessian()</source>
          <target state="translated">UnobservedComponents.hessian()</target>
        </trans-unit>
        <trans-unit id="173f7696c5c58c8ae7c11e0483916ca00fe6f612" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.impulse_responses()</source>
          <target state="translated">UnobservedComponents.impulse_responses()</target>
        </trans-unit>
        <trans-unit id="0b3d71b3761a66070a67588b0e623d286b74ecbe" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.information()</source>
          <target state="translated">UnobservedComponents.information()</target>
        </trans-unit>
        <trans-unit id="31bf1c1c9021c4e4eb5c8900ea6ae446726bd2d7" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.initialize()</source>
          <target state="translated">UnobservedComponents.initialize()</target>
        </trans-unit>
        <trans-unit id="c98f76e05b72fd61cee6de455f35c55a5230e4f5" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.initialize_approximate_diffuse()</source>
          <target state="translated">UnobservedComponents.initialize_approximate_diffuse()</target>
        </trans-unit>
        <trans-unit id="d1d0ac3efa82f95559aca4474f7590a8f80e6872" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.initialize_known()</source>
          <target state="translated">UnobservedComponents.initialize_known()</target>
        </trans-unit>
        <trans-unit id="c72f4f5d6b9bae415876bfe110ea0f3928c72c6d" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.initialize_state()</source>
          <target state="translated">UnobservedComponents.initialize_state()</target>
        </trans-unit>
        <trans-unit id="3f785d08d8565a4268610a1942c419593475d344" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.initialize_statespace()</source>
          <target state="translated">UnobservedComponents.initialize_statespace()</target>
        </trans-unit>
        <trans-unit id="53bd0099f0b132b8c8910502dd1b48f34ac1875f" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.initialize_stationary()</source>
          <target state="translated">UnobservedComponents.initialize_stationary()</target>
        </trans-unit>
        <trans-unit id="92ada6ec5352ff4ee947482b75cf41d7518cc6a5" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.loglike()</source>
          <target state="translated">UnobservedComponents.loglike()</target>
        </trans-unit>
        <trans-unit id="0d3236697d94858e58cfff9451d7c381e86ef593" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.loglikeobs()</source>
          <target state="translated">UnobservedComponents.loglikeobs()</target>
        </trans-unit>
        <trans-unit id="a2a92eca92d3495e1e5a9d913545c3347ec4e3cc" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.observed_information_matrix()</source>
          <target state="translated">UnobservedComponents.observed_information_matrix()</target>
        </trans-unit>
        <trans-unit id="4ab8df759945eafc20ccd64af21ac6b90c718566" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.opg_information_matrix()</source>
          <target state="translated">UnobservedComponents.opg_information_matrix()</target>
        </trans-unit>
        <trans-unit id="f4940e3c6e811b317a452a7da852748815544301" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.predict()</source>
          <target state="translated">UnobservedComponents.predict()</target>
        </trans-unit>
        <trans-unit id="4c26087d8702fe53b61fdf42bd2e7ec6dac2343c" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.prepare_data()</source>
          <target state="translated">UnobservedComponents.prepare_data()</target>
        </trans-unit>
        <trans-unit id="a7461cbea1693f93fe059a9a1fd27f4e9c09b415" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.score()</source>
          <target state="translated">UnobservedComponents.score()</target>
        </trans-unit>
        <trans-unit id="4f99c275bc2d4711d522a27a99d2263440f2c44d" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.score_obs()</source>
          <target state="translated">UnobservedComponents.score_obs()</target>
        </trans-unit>
        <trans-unit id="4b52a9035d8ee86e8c9faa2a5ec951c1f1a7b419" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.set_conserve_memory()</source>
          <target state="translated">UnobservedComponents.set_conserve_memory()</target>
        </trans-unit>
        <trans-unit id="78cb381714907ba1ac45bd4a5627c54d432d4393" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.set_filter_method()</source>
          <target state="translated">UnobservedComponents.set_filter_method()</target>
        </trans-unit>
        <trans-unit id="c8d8818564d52f06d1665fdac2230ffb6939f410" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.set_inversion_method()</source>
          <target state="translated">UnobservedComponents.set_inversion_method()</target>
        </trans-unit>
        <trans-unit id="1ac9e74ad83c08b87c9a1e32d34d6a2a46ad0bea" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.set_smoother_output()</source>
          <target state="translated">UnobservedComponents.set_smoother_output()</target>
        </trans-unit>
        <trans-unit id="48b8f70381a43299d38c66323b003c219661a828" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.set_stability_method()</source>
          <target state="translated">UnobservedComponents.set_stability_method()</target>
        </trans-unit>
        <trans-unit id="3340aba5e7c9ea2c581d373bbeffd51e3b277899" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.setup()</source>
          <target state="translated">UnobservedComponents.setup()</target>
        </trans-unit>
        <trans-unit id="794b9e834a5482c488f10ca00e5051c5a3a3eecb" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.simulate()</source>
          <target state="translated">UnobservedComponents.simulate()</target>
        </trans-unit>
        <trans-unit id="3659981afef515b5cd4604684011f35d092b8ff7" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.simulation_smoother()</source>
          <target state="translated">UnobservedComponents.simulation_smoother()</target>
        </trans-unit>
        <trans-unit id="f054411be2483ee940c2eb572af60ae9ef8fa6de" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.smooth()</source>
          <target state="translated">UnobservedComponents.smooth()</target>
        </trans-unit>
        <trans-unit id="759e5daa5880b14af588e0db731389d18b6d4160" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.transform_jacobian()</source>
          <target state="translated">UnobservedComponents.transform_jacobian()</target>
        </trans-unit>
        <trans-unit id="81eeb9b5c7632636fd41f5bf23bab3d7881930f5" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.transform_params()</source>
          <target state="translated">UnobservedComponents.transform_params()</target>
        </trans-unit>
        <trans-unit id="8331867bd473b0d8784f5b3ae53117083b74ad32" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.untransform_params()</source>
          <target state="translated">UnobservedComponents.untransform_params()</target>
        </trans-unit>
        <trans-unit id="515a2ac02bdf7b3b2193aad9c4d2d12bcd9abab6" translate="yes" xml:space="preserve">
          <source>UnobservedComponents.update()</source>
          <target state="translated">UnobservedComponents.update()</target>
        </trans-unit>
        <trans-unit id="590ed8f711d9d6bdf3d86d21fc6cb384936375e2" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.aic()</source>
          <target state="translated">UnobservedComponentsResults.aic()</target>
        </trans-unit>
        <trans-unit id="26c287773dadd04e9500db6e8744203e683d9b4a" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.bic()</source>
          <target state="translated">UnobservedComponentsResults.bic()</target>
        </trans-unit>
        <trans-unit id="69300b90dc1ebf932fcff62eee4613188760a2e0" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.bse()</source>
          <target state="translated">UnobservedComponentsResults.bse()</target>
        </trans-unit>
        <trans-unit id="221fdd0404387fa02ffca1475443ae8c308473a9" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.conf_int()</source>
          <target state="translated">UnobservedComponentsResults.conf_int()</target>
        </trans-unit>
        <trans-unit id="585e4b184e936b64db5a67918ff859da194fa8c1" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.cov_params()</source>
          <target state="translated">UnobservedComponentsResults.cov_params()</target>
        </trans-unit>
        <trans-unit id="442d3961a894fc28d0fbe9d1398479966373d5f6" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.cov_params_approx()</source>
          <target state="translated">UnobservedComponentsResults.cov_params_approx()</target>
        </trans-unit>
        <trans-unit id="9c2d4c76244d59edfed770d3146727ce4f6dec3b" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.cov_params_oim()</source>
          <target state="translated">UnobservedComponentsResults.cov_params_oim()</target>
        </trans-unit>
        <trans-unit id="d82c19a96c47c394992eee93d9c49eb55565c4d2" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.cov_params_opg()</source>
          <target state="translated">UnobservedComponentsResults.cov_params_opg()</target>
        </trans-unit>
        <trans-unit id="0d19c774623eb7e09a3061c9006dd9a52f1d79f6" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.cov_params_robust()</source>
          <target state="translated">UnobservedComponentsResults.cov_params_robust()</target>
        </trans-unit>
        <trans-unit id="695edefb118fcaa54cc2dfe8ed3d8e33855f96fb" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.cov_params_robust_approx()</source>
          <target state="translated">UnobservedComponentsResults.cov_params_robust_approx()</target>
        </trans-unit>
        <trans-unit id="f618b3ce65dc5cf725429835c45df80aa17e9808" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.cov_params_robust_oim()</source>
          <target state="translated">UnobservedComponentsResults.cov_params_robust_oim()</target>
        </trans-unit>
        <trans-unit id="fc086a85900fdccc016a4fa6f49f3167b1ac418c" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.f_test()</source>
          <target state="translated">UnobservedComponentsResults.f_test()</target>
        </trans-unit>
        <trans-unit id="e4a0a7ed9f28d88ef4f393e9ccb82dc8791ea481" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.fittedvalues()</source>
          <target state="translated">UnobservedComponentsResults.fittedvalues()</target>
        </trans-unit>
        <trans-unit id="c922074264e3992dbbd7db1f25e533525ef66417" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.forecast()</source>
          <target state="translated">UnobservedComponentsResults.forecast()</target>
        </trans-unit>
        <trans-unit id="385a9a6156b1a69b9b8c66ba07d4231cc1b4b507" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.get_forecast()</source>
          <target state="translated">UnobservedComponentsResults.get_forecast()</target>
        </trans-unit>
        <trans-unit id="e82c687c3562c3fa70b10f6c556e354afadfdaa5" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.get_prediction()</source>
          <target state="translated">UnobservedComponentsResults.get_prediction()</target>
        </trans-unit>
        <trans-unit id="93cc0665904b46a2d6f86fa55821360ff4707fd9" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.hqic()</source>
          <target state="translated">UnobservedComponentsResults.hqic()</target>
        </trans-unit>
        <trans-unit id="b6bf3cd3cb37336a8d626a4dadf17e36056c9f47" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.impulse_responses()</source>
          <target state="translated">UnobservedComponentsResults.impulse_responses()</target>
        </trans-unit>
        <trans-unit id="4c05258faef905b86551d83c47e2837877aef6c4" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.info_criteria()</source>
          <target state="translated">UnobservedComponentsResults.info_criteria()</target>
        </trans-unit>
        <trans-unit id="a07a811111288d95168fd98da76ab70649dce111" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.initialize()</source>
          <target state="translated">UnobservedComponentsResults.initialize()</target>
        </trans-unit>
        <trans-unit id="33528010f2c07ac08ed07f2204f1955c8dadf16a" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.llf()</source>
          <target state="translated">UnobservedComponentsResults.llf()</target>
        </trans-unit>
        <trans-unit id="db80a5c0d8ccb58b8a4e5f3c225df0aeac6972ca" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.llf_obs()</source>
          <target state="translated">UnobservedComponentsResults.llf_obs()</target>
        </trans-unit>
        <trans-unit id="e6a1a7aad1e69e5cbcc903b70acff0cad6175ddf" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.load()</source>
          <target state="translated">UnobservedComponentsResults.load()</target>
        </trans-unit>
        <trans-unit id="3f66929adda235d3282f94df8fedbde9cc9950c4" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.loglikelihood_burn()</source>
          <target state="translated">UnobservedComponentsResults.loglikelihood_burn()</target>
        </trans-unit>
        <trans-unit id="568b570f46cd0125310e0c8e7c2dc6986c432e85" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.normalized_cov_params()</source>
          <target state="translated">UnobservedComponentsResults.normalized_cov_params()</target>
        </trans-unit>
        <trans-unit id="58da3de4e5ed4a9f73f7b1303e90b72f0bd8f9ae" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.plot_components()</source>
          <target state="translated">UnobservedComponentsResults.plot_components()</target>
        </trans-unit>
        <trans-unit id="bfc33a623e023ec6d2339ba492e5f0a12f0070b8" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.plot_diagnostics()</source>
          <target state="translated">UnobservedComponentsResults.plot_diagnostics()</target>
        </trans-unit>
        <trans-unit id="9e9ab86505d00ca403157c720c9d58ce52f99d72" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.predict()</source>
          <target state="translated">UnobservedComponentsResults.predict()</target>
        </trans-unit>
        <trans-unit id="ac21d75cb90f70bc95aa2397e5068eba6cb6f233" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.pvalues()</source>
          <target state="translated">UnobservedComponentsResults.pvalues()</target>
        </trans-unit>
        <trans-unit id="e348b55d281e88cddc868b28403f6e0ed956842d" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.remove_data()</source>
          <target state="translated">UnobservedComponentsResults.remove_data()</target>
        </trans-unit>
        <trans-unit id="1877f67a9956a2b4e0df29e5a0b7e2a633560737" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.resid()</source>
          <target state="translated">UnobservedComponentsResults.resid()</target>
        </trans-unit>
        <trans-unit id="1d440bbe3c692a6a951e7c35c798e258d3790ba7" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.save()</source>
          <target state="translated">UnobservedComponentsResults.save()</target>
        </trans-unit>
        <trans-unit id="5e875bc111e344b9512adcc29fe91db6ecd58e11" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.simulate()</source>
          <target state="translated">UnobservedComponentsResults.simulate()</target>
        </trans-unit>
        <trans-unit id="b8b6e16d42f628fb35cfa1d27af0c94100803a7c" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.summary()</source>
          <target state="translated">UnobservedComponentsResults.summary()</target>
        </trans-unit>
        <trans-unit id="6ddce8435ed27847f91482984b2f94bf1bdcd36e" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.t_test()</source>
          <target state="translated">UnobservedComponentsResults.t_test()</target>
        </trans-unit>
        <trans-unit id="67b4cb6a182c3348859700feeb2f7dd7ab0775f4" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.t_test_pairwise()</source>
          <target state="translated">UnobservedComponentsResults.t_test_pairwise()</target>
        </trans-unit>
        <trans-unit id="23c99d59dabca7ab6148e42670352b77dc2976cf" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.test_heteroskedasticity()</source>
          <target state="translated">UnobservedComponentsResults.test_heteroskedasticity()</target>
        </trans-unit>
        <trans-unit id="b40c6ebec098350155a12b14ee7d4627c65c94f3" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.test_normality()</source>
          <target state="translated">UnobservedComponentsResults.test_normality()</target>
        </trans-unit>
        <trans-unit id="5562a4088c82dfcdab2e2f7ea19b4ad06411e206" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.test_serial_correlation()</source>
          <target state="translated">UnobservedComponentsResults.test_serial_correlation()</target>
        </trans-unit>
        <trans-unit id="d1448b2c17f3a8ae76e147231a33805134cc6257" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.tvalues()</source>
          <target state="translated">UnobservedComponentsResults.tvalues()</target>
        </trans-unit>
        <trans-unit id="2ee39769636af7f473524195f0de5ace31867a11" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.wald_test()</source>
          <target state="translated">UnobservedComponentsResults.wald_test()</target>
        </trans-unit>
        <trans-unit id="7d268976cb6543a947f12c2160a46fda1ad61559" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.wald_test_terms()</source>
          <target state="translated">UnobservedComponentsResults.wald_test_terms()</target>
        </trans-unit>
        <trans-unit id="c6bfd4fa59b60ee622a33b188feaacaa4a5f6ebe" translate="yes" xml:space="preserve">
          <source>UnobservedComponentsResults.zvalues()</source>
          <target state="translated">UnobservedComponentsResults.zvalues()</target>
        </trans-unit>
        <trans-unit id="1df4440aadfd826cdc4b947a6bc61ef5bb9e5030" translate="yes" xml:space="preserve">
          <source>Unsqueeze a collapsed array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c88c38ffef57e269e473a7f9ba2430e5f35579" translate="yes" xml:space="preserve">
          <source>Update the filter results</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7676776356610959f22d06ccbe170530ba8ad95" translate="yes" xml:space="preserve">
          <source>Update the parameters of the model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47222d067a3d26a0e78fd2f721f73f773c4c20b6" translate="yes" xml:space="preserve">
          <source>Update the results to match a given model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42efee7211a871a7bb5da297ca9d1ac1c6c475b7" translate="yes" xml:space="preserve">
          <source>Update the smoother results</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87cd00364195d8a895b16271d388c49b2d2990f" translate="yes" xml:space="preserve">
          <source>Updates the association parameter values based on the current regression coefficients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd2959d7bad7ce107628d066e04c05a077dd3b5" translate="yes" xml:space="preserve">
          <source>Updates the representation matrices to fill in the new parameter values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342c659777997bec12f413246e5e24d6a8317e2a" translate="yes" xml:space="preserve">
          <source>Usage Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721f29b39e7ef33f28d511614b9fc1580c4a005d" translate="yes" xml:space="preserve">
          <source>Use GLS to update the fixed effects parameter estimates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ecd37b9d8dfbc4465042301e3bf4afe329976ef" translate="yes" xml:space="preserve">
          <source>Use Lagrange Multiplier test to test whether restricted model is correct</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a379eb84eab495ff1dbed6549dce578be79ca852" translate="yes" xml:space="preserve">
          <source>Use a Cholesky decomposition along with a linear solver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc7054e53051cc704156f72823dc7f6aa66a0303" translate="yes" xml:space="preserve">
          <source>Use a Gaussian null distribution estimated from the data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6b9797a3b43a05fa07bb2a9ef715050ac4296f" translate="yes" xml:space="preserve">
          <source>Use an Cholesky decomposition along with typical matrix inversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e330b4d3baaaad52951ca893a375871e69d96f4f" translate="yes" xml:space="preserve">
          <source>Use an LU decomposition along with a linear solver (rather than ever actually inverting the matrix).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99784ba86a42de626a2f6f4bcf3b2b7d89296e52" translate="yes" xml:space="preserve">
          <source>Use an LU decomposition along with typical matrix inversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ad9326bc1c8517dccb8ba66b81d5a30ad0a26e" translate="yes" xml:space="preserve">
          <source>Use formulas to fit a Poisson GLM with independent working dependence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71050412626b3c5d81494c339df6e1d8cf318427" translate="yes" xml:space="preserve">
          <source>Use predictive mean matching to impute missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cbbb8b66e9187cc1fdac2b7ee3aec83a9c20024" translate="yes" xml:space="preserve">
          <source>Use the results predict method instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2bf58719663f6656bc43c305904838a149d2ca" translate="yes" xml:space="preserve">
          <source>Used bandwidth is &lt;code&gt;self.bw&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff6716154076d31e99838f45593f06bb447f78d" translate="yes" xml:space="preserve">
          <source>Used primarily to enforce stationarity of the autoregressive lag polynomial, invertibility of the moving average lag polynomial, and positive variance parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1a2f698c1e04be48b04b0aab22889c8c4189139" translate="yes" xml:space="preserve">
          <source>Used primarily to reverse enforcement of stationarity of the autoregressive lag polynomial and invertibility of the moving average lag polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5717b59b46c3f130a38cda630ca6ddbde19313" translate="yes" xml:space="preserve">
          <source>Used to calculate leverages and score residuals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7032ce6e808f20ed0ae54b0754eefad55f9a8cb8" translate="yes" xml:space="preserve">
          <source>Used to estimate the robust covariance matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69b510692cc13e956fea6976cadb209e7621dc3f" translate="yes" xml:space="preserve">
          <source>Useful information on leverage can also be plotted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952b09eef30ad4bebfddaed767cf042d7658e793" translate="yes" xml:space="preserve">
          <source>User Notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d30b15b1f497d78ff90838439fa0b8d4bd8047" translate="yes" xml:space="preserve">
          <source>Users can also leverage the powerful input/output functions provided by &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/io.html#io&quot;&gt;pandas.io&lt;/a&gt;. Among other things, &lt;code&gt;pandas&lt;/code&gt; (a &lt;code&gt;statsmodels&lt;/code&gt; dependency) allows reading and writing to Excel, CSV, and HDF5 (PyTables).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bef51304c85258da85583f5130033b8cee1e5ca" translate="yes" xml:space="preserve">
          <source>Users do not need to load the &lt;code&gt;subpackage/api.py&lt;/code&gt; modules directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ce1083c2e76bb53ce4043b26baa82f8b77e220" translate="yes" xml:space="preserve">
          <source>Uses closed form expression instead of nonlinear optimizers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="490bcad999b4f2d3a384dc7bfe478f2d4403f113" translate="yes" xml:space="preserve">
          <source>Uses closed form expression instead of nonlinear optimizers for each step of the iterative GMM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64951c07d60f10407f3f72fd3d25b1ca102bc72" translate="yes" xml:space="preserve">
          <source>Uses proportionate first-differences as the penalty function. See notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adde68a6ae18cb87ea28a37fb33315d928dfd9b6" translate="yes" xml:space="preserve">
          <source>Uses the Nelson-Aalen estimator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7a733d5307f11001644707c432144d9f6367af" translate="yes" xml:space="preserve">
          <source>Uses the list representation internally, even if an array is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94f01dacfd3d4980d75c0309e543422c2a01b9c" translate="yes" xml:space="preserve">
          <source>Using Formulas with GLMs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636932a563abaefda49c0994a1f2c760bb623503" translate="yes" xml:space="preserve">
          <source>Using L&amp;uuml;tkepohl (2005) notation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e859620a1cceabb045f6086b3bbb52bf8d257cbb" translate="yes" xml:space="preserve">
          <source>Using Pandas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497210aeb33a14de1ac7a21ab43bcf7338c76fb6" translate="yes" xml:space="preserve">
          <source>Using a DataFrame as source, specifying the name of the columns of interest &amp;gt;&amp;gt;&amp;gt; gender = [&amp;lsquo;male&amp;rsquo;, &amp;lsquo;male&amp;rsquo;, &amp;lsquo;male&amp;rsquo;, &amp;lsquo;female&amp;rsquo;, &amp;lsquo;female&amp;rsquo;, &amp;lsquo;female&amp;rsquo;] &amp;gt;&amp;gt;&amp;gt; pet = [&amp;lsquo;cat&amp;rsquo;, &amp;lsquo;dog&amp;rsquo;, &amp;lsquo;dog&amp;rsquo;, &amp;lsquo;cat&amp;rsquo;, &amp;lsquo;dog&amp;rsquo;, &amp;lsquo;cat&amp;rsquo;] &amp;gt;&amp;gt;&amp;gt; data = pandas.DataFrame({&amp;lsquo;gender&amp;rsquo;: gender, &amp;lsquo;pet&amp;rsquo;: pet}) &amp;gt;&amp;gt;&amp;gt; mosaic(data, [&amp;lsquo;pet&amp;rsquo;, &amp;lsquo;gender&amp;rsquo;]) &amp;gt;&amp;gt;&amp;gt; pylab.show()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad77c9d667f6880d099ebac7bf94db955aab6ab3" translate="yes" xml:space="preserve">
          <source>Using a kernel smoothing technique, the probability density function (PDF) of the multivariate space can be recovered. From this PDF, it is possible to compute the density probability linked to the cluster of points and plot its contours.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf03b1abcad1c6969777bcaca5e14fdc9bc2f01" translate="yes" xml:space="preserve">
          <source>Using a linear solver rather than true matrix inversion is generally faster and is numerically more stable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532c50fcb4947b41858bf8d863f75c0453f1e8f9" translate="yes" xml:space="preserve">
          <source>Using explicit dates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3bfc9725a615ff2121f36f28b240860a2fa699f" translate="yes" xml:space="preserve">
          <source>Using formulas can make both estimation and prediction a lot easier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a92d44735ca5b87ad5c3555fb26803fc6df84a" translate="yes" xml:space="preserve">
          <source>Using formulas with models that do not (yet) support them</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485bd84c7d079d5bd7c106555ae5692b285b98ec" translate="yes" xml:space="preserve">
          <source>Using log(V) as the offset is equivalent to using V as the exposure. If exposure U and offset V are both provided, then log(U) + V is added to the linear predictor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2da0c7ba9ca81452393a89fe08c568cbb9f5a0" translate="yes" xml:space="preserve">
          <source>Using robust regression to correct for outliers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764f424bd0f942b79ee8f96d06ed1f0286a34160" translate="yes" xml:space="preserve">
          <source>Using setuptools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dbdb78619c7b4ce61b0ff872d67f67745eb9cb8" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;nbinom&lt;/code&gt; distribution from &lt;code&gt;scipy&lt;/code&gt;, we can write this likelihood simply as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="571c04fa7947eba0163ba125ffcfe206ea0ab576" translate="yes" xml:space="preserve">
          <source>Using the ARMA(1,1) specification selected above, we perform in-sample prediction and out-of-sample forecasting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63a4b90aafa097b36ae2c819635c1880d80e863" translate="yes" xml:space="preserve">
          <source>Using the LOO measures is currently only recommended if the data set is not too large. One possible approach for LOOO measures would be to identify possible problem observations with the _internal measures, and then run the leave-one-observation-out only with observations that are possible outliers. (However, this is not yet available in an automized way.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d6f4cd65d1858dbe4a341b2155f95f5470ef8e" translate="yes" xml:space="preserve">
          <source>Using the default row and column scores gives the Cochran-Armitage trend test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39fd3591026e20f0abc0c4f79c8b0e9158bf88cf" translate="yes" xml:space="preserve">
          <source>Using the time-varying transition probabilities, we can see how the expected duration of a low-production state changes over time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe5b9beaa3d836d73c15f52275efd5b6209e8a2" translate="yes" xml:space="preserve">
          <source>Using this simple model, we can estimate the parameters from a local linear trend model. The following example is from Commandeur and Koopman (2007), section 3.4., modeling motor vehicle fatalities in Finland.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ee5681d3c59f7541c27a38b67edf46259e187b" translate="yes" xml:space="preserve">
          <source>V</source>
          <target state="translated">V</target>
        </trans-unit>
        <trans-unit id="41e0e02a883108aee417013583899a7cf3a855df" translate="yes" xml:space="preserve">
          <source>VAR(p) processes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf9c237d9762cfa8f5d65a069018e520d6a35ef" translate="yes" xml:space="preserve">
          <source>VAR.fit()</source>
          <target state="translated">VAR.fit()</target>
        </trans-unit>
        <trans-unit id="0a473ee71ed91e4dc9083a407562ac81f094be8f" translate="yes" xml:space="preserve">
          <source>VAR.from_formula()</source>
          <target state="translated">VAR.from_formula()</target>
        </trans-unit>
        <trans-unit id="c539c0c6667455aac769c9615dc86ea79ff37154" translate="yes" xml:space="preserve">
          <source>VAR.hessian()</source>
          <target state="translated">VAR.hessian()</target>
        </trans-unit>
        <trans-unit id="20b648614fa756e029f48f87f658650a003c0365" translate="yes" xml:space="preserve">
          <source>VAR.information()</source>
          <target state="translated">VAR.information()</target>
        </trans-unit>
        <trans-unit id="268a7c0c892d2b7c8fcb99b728859b20cb2306a7" translate="yes" xml:space="preserve">
          <source>VAR.initialize()</source>
          <target state="translated">VAR.initialize()</target>
        </trans-unit>
        <trans-unit id="f439dfb009595a7a4a0f4de7f2f7df5517b25a99" translate="yes" xml:space="preserve">
          <source>VAR.loglike()</source>
          <target state="translated">VAR.loglike()</target>
        </trans-unit>
        <trans-unit id="994f8101edfad99a5b85dc79c276e377f5399552" translate="yes" xml:space="preserve">
          <source>VAR.predict()</source>
          <target state="translated">VAR.predict()</target>
        </trans-unit>
        <trans-unit id="cf2c0701497f8ea6610baa5cba486622626433e2" translate="yes" xml:space="preserve">
          <source>VAR.score()</source>
          <target state="translated">VAR.score()</target>
        </trans-unit>
        <trans-unit id="8c6538f922c81f3c925bd4965caa19e333a1b69e" translate="yes" xml:space="preserve">
          <source>VAR.select_order()</source>
          <target state="translated">VAR.select_order()</target>
        </trans-unit>
        <trans-unit id="feb36b1d207a28581745cdf378a78f25e21f88fd" translate="yes" xml:space="preserve">
          <source>VARMA Process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9b71c382e003037f6a54363559360d770c6ccd" translate="yes" xml:space="preserve">
          <source>VARMAX models</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b716594643054aae60bfaeca95049a1afe54956f" translate="yes" xml:space="preserve">
          <source>VARMAX.filter()</source>
          <target state="translated">VARMAX.filter()</target>
        </trans-unit>
        <trans-unit id="5b0668eb3b3bb8bde9196526459670109c90803e" translate="yes" xml:space="preserve">
          <source>VARMAX.fit()</source>
          <target state="translated">VARMAX.fit()</target>
        </trans-unit>
        <trans-unit id="992bdeaa7dc7bb958839c453eaf669616028e403" translate="yes" xml:space="preserve">
          <source>VARMAX.from_formula()</source>
          <target state="translated">VARMAX.from_formula()</target>
        </trans-unit>
        <trans-unit id="2be64044964643650da2212a99ab85a0c635f06d" translate="yes" xml:space="preserve">
          <source>VARMAX.hessian()</source>
          <target state="translated">VARMAX.hessian()</target>
        </trans-unit>
        <trans-unit id="d7d9ddd6234a82aff8994bbf618286f1e505476d" translate="yes" xml:space="preserve">
          <source>VARMAX.impulse_responses()</source>
          <target state="translated">VARMAX.impulse_responses()</target>
        </trans-unit>
        <trans-unit id="59933af77de64ee058850f182ac3a8d5f8dd5f97" translate="yes" xml:space="preserve">
          <source>VARMAX.information()</source>
          <target state="translated">VARMAX.information()</target>
        </trans-unit>
        <trans-unit id="04f43b01066460a65b2c7972c24bff869402ba21" translate="yes" xml:space="preserve">
          <source>VARMAX.initialize()</source>
          <target state="translated">VARMAX.initialize()</target>
        </trans-unit>
        <trans-unit id="1fdf0cf0e65c23185da5efa38f5a9f1a6c615cfb" translate="yes" xml:space="preserve">
          <source>VARMAX.initialize_approximate_diffuse()</source>
          <target state="translated">VARMAX.initialize_approximate_diffuse()</target>
        </trans-unit>
        <trans-unit id="17c39701da6f285c1769147a2d80448e2db01a06" translate="yes" xml:space="preserve">
          <source>VARMAX.initialize_known()</source>
          <target state="translated">VARMAX.initialize_known()</target>
        </trans-unit>
        <trans-unit id="152a83c1b297b63bb4cda3b779d45b74bcd7fd0f" translate="yes" xml:space="preserve">
          <source>VARMAX.initialize_statespace()</source>
          <target state="translated">VARMAX.initialize_statespace()</target>
        </trans-unit>
        <trans-unit id="8421e8cbdd86f19c91847bd278632a545e7fc4ed" translate="yes" xml:space="preserve">
          <source>VARMAX.initialize_stationary()</source>
          <target state="translated">VARMAX.initialize_stationary()</target>
        </trans-unit>
        <trans-unit id="2b60be044a76ec04f31ae7e7b8136c719503ac89" translate="yes" xml:space="preserve">
          <source>VARMAX.loglike()</source>
          <target state="translated">VARMAX.loglike()</target>
        </trans-unit>
        <trans-unit id="863e713d0178eb4bea4c1e01182032dc7f040209" translate="yes" xml:space="preserve">
          <source>VARMAX.loglikeobs()</source>
          <target state="translated">VARMAX.loglikeobs()</target>
        </trans-unit>
        <trans-unit id="8afe8bcdf130db6ef7215446aff4f47035b6fdb8" translate="yes" xml:space="preserve">
          <source>VARMAX.observed_information_matrix()</source>
          <target state="translated">VARMAX.observed_information_matrix()</target>
        </trans-unit>
        <trans-unit id="8ee61b445205b93ac603f776da728616ccc26a38" translate="yes" xml:space="preserve">
          <source>VARMAX.opg_information_matrix()</source>
          <target state="translated">VARMAX.opg_information_matrix()</target>
        </trans-unit>
        <trans-unit id="dc287aefc2bae8a88f58c38737e7d5bd581b593d" translate="yes" xml:space="preserve">
          <source>VARMAX.predict()</source>
          <target state="translated">VARMAX.predict()</target>
        </trans-unit>
        <trans-unit id="80a2debf91c4ae70241c4cf4015fda9f55ea8cc4" translate="yes" xml:space="preserve">
          <source>VARMAX.prepare_data()</source>
          <target state="translated">VARMAX.prepare_data()</target>
        </trans-unit>
        <trans-unit id="ad4dcf099373e870761582060768c06f7ef3901e" translate="yes" xml:space="preserve">
          <source>VARMAX.score()</source>
          <target state="translated">VARMAX.score()</target>
        </trans-unit>
        <trans-unit id="ee5d8050f6c17fdc208d77103b8157b8eac47e43" translate="yes" xml:space="preserve">
          <source>VARMAX.score_obs()</source>
          <target state="translated">VARMAX.score_obs()</target>
        </trans-unit>
        <trans-unit id="21858fd3ae177825f619f962a6ebcd0b9e845006" translate="yes" xml:space="preserve">
          <source>VARMAX.set_conserve_memory()</source>
          <target state="translated">VARMAX.set_conserve_memory()</target>
        </trans-unit>
        <trans-unit id="dbe8cd426d03059c4adf1d03c3545b5f4b5b429c" translate="yes" xml:space="preserve">
          <source>VARMAX.set_filter_method()</source>
          <target state="translated">VARMAX.set_filter_method()</target>
        </trans-unit>
        <trans-unit id="9daa8515b7b99877acbe324c391cea5f29d72795" translate="yes" xml:space="preserve">
          <source>VARMAX.set_inversion_method()</source>
          <target state="translated">VARMAX.set_inversion_method()</target>
        </trans-unit>
        <trans-unit id="bf111f6344cb8873050cdcf92704262e78f4176e" translate="yes" xml:space="preserve">
          <source>VARMAX.set_smoother_output()</source>
          <target state="translated">VARMAX.set_smoother_output()</target>
        </trans-unit>
        <trans-unit id="9cc83db10bee098fb58183052ece474a440757f7" translate="yes" xml:space="preserve">
          <source>VARMAX.set_stability_method()</source>
          <target state="translated">VARMAX.set_stability_method()</target>
        </trans-unit>
        <trans-unit id="8d47fd5375f6f2a84a0f1664c7d1768bd2899a23" translate="yes" xml:space="preserve">
          <source>VARMAX.simulate()</source>
          <target state="translated">VARMAX.simulate()</target>
        </trans-unit>
        <trans-unit id="419da767bcc768ac55eb1bbb2a1476578ce263da" translate="yes" xml:space="preserve">
          <source>VARMAX.simulation_smoother()</source>
          <target state="translated">VARMAX.simulation_smoother()</target>
        </trans-unit>
        <trans-unit id="b398cd8d61e84920bdf6c43aae621025e47949e7" translate="yes" xml:space="preserve">
          <source>VARMAX.smooth()</source>
          <target state="translated">VARMAX.smooth()</target>
        </trans-unit>
        <trans-unit id="9475a2e510aa1845354c5fed773d6761af5e59a4" translate="yes" xml:space="preserve">
          <source>VARMAX.transform_jacobian()</source>
          <target state="translated">VARMAX.transform_jacobian()</target>
        </trans-unit>
        <trans-unit id="295794c55d027db9804d457a3f0b761f0b92a10a" translate="yes" xml:space="preserve">
          <source>VARMAX.transform_params()</source>
          <target state="translated">VARMAX.transform_params()</target>
        </trans-unit>
        <trans-unit id="7f54e32f6438d4578d04e3d0611dceae70b3f54d" translate="yes" xml:space="preserve">
          <source>VARMAX.untransform_params()</source>
          <target state="translated">VARMAX.untransform_params()</target>
        </trans-unit>
        <trans-unit id="04004e4d1baa60e74f4d8c7b6996d54d39cc3fd4" translate="yes" xml:space="preserve">
          <source>VARMAX.update()</source>
          <target state="translated">VARMAX.update()</target>
        </trans-unit>
        <trans-unit id="5bae9294ed3a599e506d096112c199070f13fa38" translate="yes" xml:space="preserve">
          <source>VARMAX: introduction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c424e2b61e76a78cf0a37020e1a2f94b9c627fb4" translate="yes" xml:space="preserve">
          <source>VARMAXResults.aic()</source>
          <target state="translated">VARMAXResults.aic()</target>
        </trans-unit>
        <trans-unit id="ef7b8143714dde52267674e6a11dd264cedd78a7" translate="yes" xml:space="preserve">
          <source>VARMAXResults.bic()</source>
          <target state="translated">VARMAXResults.bic()</target>
        </trans-unit>
        <trans-unit id="47c9ae29efd46bef2cd238182c1dbdd90dad9fea" translate="yes" xml:space="preserve">
          <source>VARMAXResults.bse()</source>
          <target state="translated">VARMAXResults.bse()</target>
        </trans-unit>
        <trans-unit id="fc73443ba4564444297ae1d3266f603d04a55735" translate="yes" xml:space="preserve">
          <source>VARMAXResults.conf_int()</source>
          <target state="translated">VARMAXResults.conf_int()</target>
        </trans-unit>
        <trans-unit id="545f6ae8303e3368c6f8f0cb4756e83e31e32107" translate="yes" xml:space="preserve">
          <source>VARMAXResults.cov_params()</source>
          <target state="translated">VARMAXResults.cov_params()</target>
        </trans-unit>
        <trans-unit id="34e87581ea31cfec9bc6e04c0546b6cc78867760" translate="yes" xml:space="preserve">
          <source>VARMAXResults.cov_params_approx()</source>
          <target state="translated">VARMAXResults.cov_params_approx()</target>
        </trans-unit>
        <trans-unit id="65c6a2cf4877cc6ce021bfdd5ff8785c250a2f0b" translate="yes" xml:space="preserve">
          <source>VARMAXResults.cov_params_oim()</source>
          <target state="translated">VARMAXResults.cov_params_oim()</target>
        </trans-unit>
        <trans-unit id="f6244969cf410fcb6782b73e8c39391ff4b24474" translate="yes" xml:space="preserve">
          <source>VARMAXResults.cov_params_opg()</source>
          <target state="translated">VARMAXResults.cov_params_opg()</target>
        </trans-unit>
        <trans-unit id="9dffcf1f67d88167c6c6b61a40fdfaf94937c3b9" translate="yes" xml:space="preserve">
          <source>VARMAXResults.cov_params_robust()</source>
          <target state="translated">VARMAXResults.cov_params_robust()</target>
        </trans-unit>
        <trans-unit id="83e1a80723f7fa7ec013d31d92f333bb4b4c9ad4" translate="yes" xml:space="preserve">
          <source>VARMAXResults.cov_params_robust_approx()</source>
          <target state="translated">VARMAXResults.cov_params_robust_approx()</target>
        </trans-unit>
        <trans-unit id="1fca071dc44b03f2bf981ba8f905f14ffc5e1c11" translate="yes" xml:space="preserve">
          <source>VARMAXResults.cov_params_robust_oim()</source>
          <target state="translated">VARMAXResults.cov_params_robust_oim()</target>
        </trans-unit>
        <trans-unit id="b70585fcacb8176ba804c74f4f88d6a6856f7f67" translate="yes" xml:space="preserve">
          <source>VARMAXResults.f_test()</source>
          <target state="translated">VARMAXResults.f_test()</target>
        </trans-unit>
        <trans-unit id="a3c3205a4d1d0bf2c5290f437a116403cbad8148" translate="yes" xml:space="preserve">
          <source>VARMAXResults.fittedvalues()</source>
          <target state="translated">VARMAXResults.fittedvalues()</target>
        </trans-unit>
        <trans-unit id="ba784dbc1d2591eea7cd64a85b86087cbe635437" translate="yes" xml:space="preserve">
          <source>VARMAXResults.forecast()</source>
          <target state="translated">VARMAXResults.forecast()</target>
        </trans-unit>
        <trans-unit id="7dc7f55d09e1e85291d76d5559b6c02ec503e534" translate="yes" xml:space="preserve">
          <source>VARMAXResults.get_forecast()</source>
          <target state="translated">VARMAXResults.get_forecast()</target>
        </trans-unit>
        <trans-unit id="689dd466488cc5d64fcb459a937d033e80dbefd5" translate="yes" xml:space="preserve">
          <source>VARMAXResults.get_prediction()</source>
          <target state="translated">VARMAXResults.get_prediction()</target>
        </trans-unit>
        <trans-unit id="d169af5756909c279e2e882ccde4e8cf95fcb0f3" translate="yes" xml:space="preserve">
          <source>VARMAXResults.hqic()</source>
          <target state="translated">VARMAXResults.hqic()</target>
        </trans-unit>
        <trans-unit id="c58f6d1cdcb2bfb3e845a03b4b485fd441aa9d87" translate="yes" xml:space="preserve">
          <source>VARMAXResults.impulse_responses()</source>
          <target state="translated">VARMAXResults.impulse_responses()</target>
        </trans-unit>
        <trans-unit id="e8132bb19adbb4ec9fa8e03c8c0c45e9fd839020" translate="yes" xml:space="preserve">
          <source>VARMAXResults.info_criteria()</source>
          <target state="translated">VARMAXResults.info_criteria()</target>
        </trans-unit>
        <trans-unit id="0d6ae023ad2a20e1cce8a6ecdac49a2473220416" translate="yes" xml:space="preserve">
          <source>VARMAXResults.initialize()</source>
          <target state="translated">VARMAXResults.initialize()</target>
        </trans-unit>
        <trans-unit id="87bcef8fe915d06263b4d2c0d9c59d8789886892" translate="yes" xml:space="preserve">
          <source>VARMAXResults.llf()</source>
          <target state="translated">VARMAXResults.llf()</target>
        </trans-unit>
        <trans-unit id="af8bc74efba09faa435bf74cc1cdeffd9dedf3f3" translate="yes" xml:space="preserve">
          <source>VARMAXResults.llf_obs()</source>
          <target state="translated">VARMAXResults.llf_obs()</target>
        </trans-unit>
        <trans-unit id="ed235cd4827e4eb541b2f82610aee4c5c2919ee8" translate="yes" xml:space="preserve">
          <source>VARMAXResults.load()</source>
          <target state="translated">VARMAXResults.load()</target>
        </trans-unit>
        <trans-unit id="e8e5046d673d46b86b730d83cc50164aee0c6ceb" translate="yes" xml:space="preserve">
          <source>VARMAXResults.loglikelihood_burn()</source>
          <target state="translated">VARMAXResults.loglikelihood_burn()</target>
        </trans-unit>
        <trans-unit id="42e3ad2066c1882235933406d3430f15df060542" translate="yes" xml:space="preserve">
          <source>VARMAXResults.normalized_cov_params()</source>
          <target state="translated">VARMAXResults.normalized_cov_params()</target>
        </trans-unit>
        <trans-unit id="4cb4b49b74496648afc24ff4a2295e472ef4e444" translate="yes" xml:space="preserve">
          <source>VARMAXResults.plot_diagnostics()</source>
          <target state="translated">VARMAXResults.plot_diagnostics()</target>
        </trans-unit>
        <trans-unit id="1cbd6eb1546d064d8e54c378430ea8a8070656e7" translate="yes" xml:space="preserve">
          <source>VARMAXResults.predict()</source>
          <target state="translated">VARMAXResults.predict()</target>
        </trans-unit>
        <trans-unit id="61a5af8cb5d1c255b676a36335bf230f2da32835" translate="yes" xml:space="preserve">
          <source>VARMAXResults.pvalues()</source>
          <target state="translated">VARMAXResults.pvalues()</target>
        </trans-unit>
        <trans-unit id="c1f0a7333ccf43b620ff07e2b6e401a1ab2859c4" translate="yes" xml:space="preserve">
          <source>VARMAXResults.remove_data()</source>
          <target state="translated">VARMAXResults.remove_data()</target>
        </trans-unit>
        <trans-unit id="e2d9a9152242d26a9cbd3100405a028c7bc03b75" translate="yes" xml:space="preserve">
          <source>VARMAXResults.resid()</source>
          <target state="translated">VARMAXResults.resid()</target>
        </trans-unit>
        <trans-unit id="6e519ee964b5511edc7d7ac54c5e93956ef0aa3a" translate="yes" xml:space="preserve">
          <source>VARMAXResults.save()</source>
          <target state="translated">VARMAXResults.save()</target>
        </trans-unit>
        <trans-unit id="e9e8373c1459f0a81a2fb4f714d7a56fdfd5a467" translate="yes" xml:space="preserve">
          <source>VARMAXResults.simulate()</source>
          <target state="translated">VARMAXResults.simulate()</target>
        </trans-unit>
        <trans-unit id="fce55473eb4404cc4fd78220230fd32211bc6b4e" translate="yes" xml:space="preserve">
          <source>VARMAXResults.summary()</source>
          <target state="translated">VARMAXResults.summary()</target>
        </trans-unit>
        <trans-unit id="2d5d6e2415488d45915cf694fb6a6e48b2fa98e2" translate="yes" xml:space="preserve">
          <source>VARMAXResults.t_test()</source>
          <target state="translated">VARMAXResults.t_test()</target>
        </trans-unit>
        <trans-unit id="1c23d59120f5b2cf34acadf013b6f4cce6f6c0a1" translate="yes" xml:space="preserve">
          <source>VARMAXResults.t_test_pairwise()</source>
          <target state="translated">VARMAXResults.t_test_pairwise()</target>
        </trans-unit>
        <trans-unit id="a44757826fd58660c3b27c4cc7f0b309f7686665" translate="yes" xml:space="preserve">
          <source>VARMAXResults.test_heteroskedasticity()</source>
          <target state="translated">VARMAXResults.test_heteroskedasticity()</target>
        </trans-unit>
        <trans-unit id="82cbe64187561037f10478444f07381eac7be091" translate="yes" xml:space="preserve">
          <source>VARMAXResults.test_normality()</source>
          <target state="translated">VARMAXResults.test_normality()</target>
        </trans-unit>
        <trans-unit id="bd2fc1bab1c8059a387024c98258b08e26f22d01" translate="yes" xml:space="preserve">
          <source>VARMAXResults.test_serial_correlation()</source>
          <target state="translated">VARMAXResults.test_serial_correlation()</target>
        </trans-unit>
        <trans-unit id="a62275f64d18ccc177e080a5983f4304145b737d" translate="yes" xml:space="preserve">
          <source>VARMAXResults.tvalues()</source>
          <target state="translated">VARMAXResults.tvalues()</target>
        </trans-unit>
        <trans-unit id="6e2cdaebad6d0cc94f8b4b69de80ec84b745b0d6" translate="yes" xml:space="preserve">
          <source>VARMAXResults.wald_test()</source>
          <target state="translated">VARMAXResults.wald_test()</target>
        </trans-unit>
        <trans-unit id="40b6d3b3da396c73d2f90aa33122d6c87f6e8152" translate="yes" xml:space="preserve">
          <source>VARMAXResults.wald_test_terms()</source>
          <target state="translated">VARMAXResults.wald_test_terms()</target>
        </trans-unit>
        <trans-unit id="e51602820e8bd7a29d3d7062c071a51f4f3a306d" translate="yes" xml:space="preserve">
          <source>VARMAXResults.zvalues()</source>
          <target state="translated">VARMAXResults.zvalues()</target>
        </trans-unit>
        <trans-unit id="c1677411adc4b8703792d8ce52315049417f1c7e" translate="yes" xml:space="preserve">
          <source>VARProcess.acf()</source>
          <target state="translated">VARProcess.acf()</target>
        </trans-unit>
        <trans-unit id="c1717d4e5c74926a8388a89ae4cc8ef3f45f9580" translate="yes" xml:space="preserve">
          <source>VARProcess.acorr()</source>
          <target state="translated">VARProcess.acorr()</target>
        </trans-unit>
        <trans-unit id="61a27668dd1be1a4ab589957879781c6cae11ac7" translate="yes" xml:space="preserve">
          <source>VARProcess.forecast()</source>
          <target state="translated">VARProcess.forecast()</target>
        </trans-unit>
        <trans-unit id="cba4f3f757ef76171e7ec9d7b6ec4d79a1dfce7b" translate="yes" xml:space="preserve">
          <source>VARProcess.forecast_cov()</source>
          <target state="translated">VARProcess.forecast_cov()</target>
        </trans-unit>
        <trans-unit id="1be754e56ec955f55069bccedb1bbbe155c00ae6" translate="yes" xml:space="preserve">
          <source>VARProcess.forecast_interval()</source>
          <target state="translated">VARProcess.forecast_interval()</target>
        </trans-unit>
        <trans-unit id="eecd5a4e16a74d5659c5f64ec465942d9a2baedb" translate="yes" xml:space="preserve">
          <source>VARProcess.get_eq_index()</source>
          <target state="translated">VARProcess.get_eq_index()</target>
        </trans-unit>
        <trans-unit id="2f0b8f40359c3e1b736042382a6bec95289e73a2" translate="yes" xml:space="preserve">
          <source>VARProcess.intercept_longrun()</source>
          <target state="translated">VARProcess.intercept_longrun()</target>
        </trans-unit>
        <trans-unit id="af8afd9292d2142db83960a8faf8f321f03c47ad" translate="yes" xml:space="preserve">
          <source>VARProcess.is_stable()</source>
          <target state="translated">VARProcess.is_stable()</target>
        </trans-unit>
        <trans-unit id="241f4c676731927eaab5404637b6ee737dfecefc" translate="yes" xml:space="preserve">
          <source>VARProcess.long_run_effects()</source>
          <target state="translated">VARProcess.long_run_effects()</target>
        </trans-unit>
        <trans-unit id="3abed7e872a777a8b08485580c2651f80113333d" translate="yes" xml:space="preserve">
          <source>VARProcess.ma_rep()</source>
          <target state="translated">VARProcess.ma_rep()</target>
        </trans-unit>
        <trans-unit id="f3a29fa2e7e15bebae5cb36a4fb889fb39e6210f" translate="yes" xml:space="preserve">
          <source>VARProcess.mean()</source>
          <target state="translated">VARProcess.mean()</target>
        </trans-unit>
        <trans-unit id="c950f44c7511f2b16ced539f21e16487cf883a33" translate="yes" xml:space="preserve">
          <source>VARProcess.mse()</source>
          <target state="translated">VARProcess.mse()</target>
        </trans-unit>
        <trans-unit id="514bafb3704ae2a65164555caddf37ce97914802" translate="yes" xml:space="preserve">
          <source>VARProcess.orth_ma_rep()</source>
          <target state="translated">VARProcess.orth_ma_rep()</target>
        </trans-unit>
        <trans-unit id="1a133f89a8cb7bbe1500673e6b2baa684ad711f7" translate="yes" xml:space="preserve">
          <source>VARProcess.plot_acorr()</source>
          <target state="translated">VARProcess.plot_acorr()</target>
        </trans-unit>
        <trans-unit id="051fa29e92581eaedbf13f9d3d7cc134014bc666" translate="yes" xml:space="preserve">
          <source>VARProcess.plotsim()</source>
          <target state="translated">VARProcess.plotsim()</target>
        </trans-unit>
        <trans-unit id="1809f6a53a58f8b27ec915625efdbd8e4bd348e8" translate="yes" xml:space="preserve">
          <source>VARProcess.simulate_var()</source>
          <target state="translated">VARProcess.simulate_var()</target>
        </trans-unit>
        <trans-unit id="6bad6e1711ad259b2df643af1e7d0347d403fc40" translate="yes" xml:space="preserve">
          <source>VARProcess.to_vecm()</source>
          <target state="translated">VARProcess.to_vecm()</target>
        </trans-unit>
        <trans-unit id="e731b114bbd6395818b8953eed8ffc686ea1f71e" translate="yes" xml:space="preserve">
          <source>VARResults.acf()</source>
          <target state="translated">VARResults.acf()</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
