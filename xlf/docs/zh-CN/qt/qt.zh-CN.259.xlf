<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="qt">
    <body>
      <group id="qt">
        <trans-unit id="e965f498d5c0feaec41a51c2eed2e6e5bed73d1d" translate="yes" xml:space="preserve">
          <source>Windows-1250 to 1258</source>
          <target state="translated">Windows-1250至1258</target>
        </trans-unit>
        <trans-unit id="4e2bdcc5cbe8867b5cd90d673b89f74e83f179fd" translate="yes" xml:space="preserve">
          <source>Windows-specific code</source>
          <target state="translated">窗口专用代码</target>
        </trans-unit>
        <trans-unit id="d0a162f24e233795006248e6eceb7d0912e33599" translate="yes" xml:space="preserve">
          <source>Windows:</source>
          <target state="translated">Windows:</target>
        </trans-unit>
        <trans-unit id="aa7b1304c81faee53ec108e53104881c9fce6e95" translate="yes" xml:space="preserve">
          <source>Windows: &lt;a href=&quot;qsharedmemory&quot;&gt;QSharedMemory&lt;/a&gt; does not &quot;own&quot; the shared memory segment. When all threads or processes that have an instance of &lt;a href=&quot;qsharedmemory&quot;&gt;QSharedMemory&lt;/a&gt; attached to a particular shared memory segment have either destroyed their instance of &lt;a href=&quot;qsharedmemory&quot;&gt;QSharedMemory&lt;/a&gt; or exited, the Windows kernel releases the shared memory segment automatically.</source>
          <target state="translated">Windows：&lt;a href=&quot;qsharedmemory&quot;&gt;QSharedMemory&lt;/a&gt;不&amp;ldquo;拥有&amp;rdquo;共享内存段。当所有具有&lt;a href=&quot;qsharedmemory&quot;&gt;QSharedMemory&lt;/a&gt;实例附加到特定共享内存段的线程或进程都销毁了它们的&lt;a href=&quot;qsharedmemory&quot;&gt;QSharedMemory&lt;/a&gt;实例或退出时，Windows内核会自动释放共享内存段。</target>
        </trans-unit>
        <trans-unit id="0ab17fa1f1ae49296acf0a5cb27b4faef4228070" translate="yes" xml:space="preserve">
          <source>Windows: &lt;a href=&quot;qwizard#WizardOption-enum&quot;&gt;HelpButtonOnRight&lt;/a&gt;.</source>
          <target state="translated">Windows：&lt;a href=&quot;qwizard#WizardOption-enum&quot;&gt;HelpButtonOnRight&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2e08de05c9835cf627faedee69d075521758acaf" translate="yes" xml:space="preserve">
          <source>Windows: QSharedMemory does not &quot;own&quot; the shared memory segment. When all threads or processes that have an instance of QSharedMemory attached to a particular shared memory segment have either destroyed their instance of QSharedMemory or exited, the Windows kernel releases the shared memory segment automatically.</source>
          <target state="translated">Windows.QSharedMemory并不 &quot;拥有 &quot;共享内存段。QSharedMemory不 &quot;拥有 &quot;共享内存段。当所有拥有QSharedMemory实例的线程或进程连接到某个共享内存段时,要么销毁其QSharedMemory实例,要么退出,Windows内核会自动释放共享内存段。</target>
        </trans-unit>
        <trans-unit id="d8a5137a288b0e5257034389ada56f6b151f603f" translate="yes" xml:space="preserve">
          <source>Windows: The widget needs to have the &lt;a href=&quot;qt#WindowType-enum&quot;&gt;Qt::FramelessWindowHint&lt;/a&gt; window flag set for the translucency to work.</source>
          <target state="translated">Windows：窗口小部件需要设置&lt;a href=&quot;qt#WindowType-enum&quot;&gt;Qt :: FramelessWindowHint&lt;/a&gt;窗口标志才能使半透明起作用。</target>
        </trans-unit>
        <trans-unit id="1a8958fde0dbaeb6b7046da3397ec4cf7d333856" translate="yes" xml:space="preserve">
          <source>Windows: Windows Style</source>
          <target state="translated">窗户 窗口风格</target>
        </trans-unit>
        <trans-unit id="db21ec9933009e8f5d8a3ced33dfe0db6cff791a" translate="yes" xml:space="preserve">
          <source>Wintab API</source>
          <target state="translated">Wintab API</target>
        </trans-unit>
        <trans-unit id="c8a331815c4cd7107e056ec349acd44bb2648bbd" translate="yes" xml:space="preserve">
          <source>Wireless Bitmap</source>
          <target state="translated">无线位图</target>
        </trans-unit>
        <trans-unit id="564f8c6e76fbd512be2e38dabdfdd61550d0c3cc" translate="yes" xml:space="preserve">
          <source>With</source>
          <target state="translated">With</target>
        </trans-unit>
        <trans-unit id="9e1ff6d984a1c8b1ff2b3f677866508350f3d8d5" translate="yes" xml:space="preserve">
          <source>With 'e', 'E', and 'f',</source>
          <target state="translated">有'e'、'E'、'f'。</target>
        </trans-unit>
        <trans-unit id="a5fbd6fd302ea44886d8c44c601edc98b4db8d5b" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;qdomnodelist&quot;&gt;QDomNodeList&lt;/a&gt; and &lt;a href=&quot;qdomnamednodemap&quot;&gt;QDomNamedNodeMap&lt;/a&gt; two collection classes are provided: &lt;a href=&quot;qdomnodelist&quot;&gt;QDomNodeList&lt;/a&gt; is a list of nodes, and &lt;a href=&quot;qdomnamednodemap&quot;&gt;QDomNamedNodeMap&lt;/a&gt; is used to handle unordered sets of nodes (often used for attributes).</source>
          <target state="translated">使用&lt;a href=&quot;qdomnodelist&quot;&gt;QDomNodeList&lt;/a&gt;和&lt;a href=&quot;qdomnamednodemap&quot;&gt;QDomNamedNodeMap提供了&lt;/a&gt;两个集合类：&lt;a href=&quot;qdomnodelist&quot;&gt;QDomNodeList&lt;/a&gt;是节点列表，而&lt;a href=&quot;qdomnamednodemap&quot;&gt;QDomNamedNodeMap&lt;/a&gt;用于处理无序节点集（通常用于属性）。</target>
        </trans-unit>
        <trans-unit id="103e578fcb9980940e23f0b7a4dd54c06d84b355" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;qgraphicsitem#pos&quot;&gt;QGraphicsItem::pos&lt;/a&gt;() being one of the few exceptions, &lt;a href=&quot;qgraphicsitem&quot;&gt;QGraphicsItem&lt;/a&gt;'s functions operate in item coordinates, regardless of the item, or any of its parents' transformation. For example, an item's bounding rect (i.e. &lt;a href=&quot;qgraphicsitem#boundingRect&quot;&gt;QGraphicsItem::boundingRect&lt;/a&gt;()) is always given in item coordinates.</source>
          <target state="translated">由于&lt;a href=&quot;qgraphicsitem#pos&quot;&gt;QGraphicsItem :: pos&lt;/a&gt;（）是少数例外之一，因此&lt;a href=&quot;qgraphicsitem&quot;&gt;QGraphicsItem&lt;/a&gt;的函数在项目坐标中操作，而与项目或其父项转换无关。例如，项目的边界矩形（即&lt;a href=&quot;qgraphicsitem#boundingRect&quot;&gt;QGraphicsItem :: boundingRect&lt;/a&gt;（））始终在项目坐标中给出。</target>
        </trans-unit>
        <trans-unit id="dbf704f8941efe3c1bde4073cf1727aa153b9865" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;qlist&quot;&gt;QList&lt;/a&gt;, &lt;a href=&quot;qhash#qhash&quot;&gt;QHash&lt;/a&gt;, and &lt;a href=&quot;qset&quot;&gt;QSet&lt;/a&gt;, the performance of appending items is amortized O(log</source>
          <target state="translated">使用&lt;a href=&quot;qlist&quot;&gt;QList&lt;/a&gt;，&lt;a href=&quot;qhash#qhash&quot;&gt;QHash&lt;/a&gt;和&lt;a href=&quot;qset&quot;&gt;QSet&lt;/a&gt;，附加项的性能摊销为O（log</target>
        </trans-unit>
        <trans-unit id="64181e04407db65b3c028b6ce3f5b5b5318a1cb9" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;qmap&quot;&gt;QMap&lt;/a&gt; and &lt;a href=&quot;qhash#qhash&quot;&gt;QHash&lt;/a&gt;, &lt;code&gt;foreach&lt;/code&gt; accesses the value component of the (key, value) pairs automatically, so you should not call values() on the container (it would generate an unnecessary copy, see below). If you want to iterate over both the keys and the values, you can use iterators (which are faster), or you can obtain the keys, and use them to get the values too:</source>
          <target state="translated">使用&lt;a href=&quot;qmap&quot;&gt;QMap&lt;/a&gt;和&lt;a href=&quot;qhash#qhash&quot;&gt;QHash&lt;/a&gt;， &lt;code&gt;foreach&lt;/code&gt; 自动访问（键，值）对的值组件，因此您不应在容器上调用values（）（它会生成不必要的副本，请参见下文）。如果要遍历键和值，则可以使用迭代器（速度更快），也可以获取键，并使用它们来获取值：</target>
        </trans-unit>
        <trans-unit id="6025b132baf0dac3042c7392558ba4f5ba6759c7" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;qml-qtquick-listview&quot;&gt;ListView&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-gridview&quot;&gt;GridView&lt;/a&gt;, it is possible to specify transitions that should be applied whenever the items in the view change as a result of modifications to the view's model. They both have the following properties that can be set to the appropriate transitions to be run for various operations:</source>
          <target state="translated">使用&lt;a href=&quot;qml-qtquick-listview&quot;&gt;ListView&lt;/a&gt;和&lt;a href=&quot;qml-qtquick-gridview&quot;&gt;GridView&lt;/a&gt;，可以指定在视图中的项目由于对视图模型的修改而发生更改时应应用的过渡。它们都具有以下属性，可以将其设置为要为各种操作运行的适当过渡：</target>
        </trans-unit>
        <trans-unit id="16727313357abbd738b4912e8e0ced4d8dee6099" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;qprinter#setFullPage&quot;&gt;setFullPage&lt;/a&gt;(false) (the default), the metrics will be a bit smaller; how much depends on the printer in use.</source>
          <target state="translated">使用&lt;a href=&quot;qprinter#setFullPage&quot;&gt;setFullPage&lt;/a&gt;（false）（默认值）时，指标会更小；多少取决于所使用的打印机。</target>
        </trans-unit>
        <trans-unit id="d90a350b7015138fda882d26fb8d2f88e33cf36c" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;qtcpserver&quot;&gt;QTcpServer&lt;/a&gt; a call to &lt;a href=&quot;qtcpserver#listen&quot;&gt;listen()&lt;/a&gt; may fail with a timeout error. If a port number other than 0 is passed to &lt;a href=&quot;qtcpserver#listen&quot;&gt;listen()&lt;/a&gt;, then it is not guaranteed that it is the specified port that will be used. Use &lt;a href=&quot;qtcpserver#serverPort&quot;&gt;serverPort()&lt;/a&gt; and &lt;a href=&quot;qtcpserver#serverAddress&quot;&gt;serverAddress()&lt;/a&gt; to get the actual address and port used to listen for connections. SOCKS5 only supports one accepted connection per call to &lt;a href=&quot;qtcpserver#listen&quot;&gt;listen()&lt;/a&gt;, and each call is likely to result in a different &lt;a href=&quot;qtcpserver#serverPort&quot;&gt;serverPort()&lt;/a&gt; being used.</source>
          <target state="translated">使用&lt;a href=&quot;qtcpserver&quot;&gt;QTcpServer，&lt;/a&gt;对&lt;a href=&quot;qtcpserver#listen&quot;&gt;listen（）&lt;/a&gt;的调用可能会因超时错误而失败。如果将非0的端口号传递给&lt;a href=&quot;qtcpserver#listen&quot;&gt;listen（）&lt;/a&gt;，则不能保证它是将要使用的指定端口。使用&lt;a href=&quot;qtcpserver#serverPort&quot;&gt;serverPort（）&lt;/a&gt;和&lt;a href=&quot;qtcpserver#serverAddress&quot;&gt;serverAddress（）&lt;/a&gt;获取用于侦听连接的实际地址和端口。 SOCKS5仅支持对&lt;a href=&quot;qtcpserver#listen&quot;&gt;listen（）的&lt;/a&gt;每个调用接受一个连接，并且每个调用可能导致使用不同的&lt;a href=&quot;qtcpserver#serverPort&quot;&gt;serverPort（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="872ba56ce042a47a6a6c319e65798f0a9e94df17" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;qtexttableformat#borderCollapse&quot;&gt;borderCollapse&lt;/a&gt; disabled, cell borders can still be styled using &lt;a href=&quot;qtexttablecellformat&quot;&gt;QTextTableCellFormat&lt;/a&gt; but styling will be applied only within the cell's frame, which is probably not very useful in practice.</source>
          <target state="translated">在禁用&lt;a href=&quot;qtexttableformat#borderCollapse&quot;&gt;borderCollapse的情况下&lt;/a&gt;，仍然可以使用&lt;a href=&quot;qtexttablecellformat&quot;&gt;QTextTableCellFormat设置&lt;/a&gt;单元格边框的样式，但是样式仅在单元格的框架内应用，这在实践中可能不是很有用。</target>
        </trans-unit>
        <trans-unit id="74231e7c06d3afefe1c7418ba883ce0704f875db" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;qudpsocket&quot;&gt;QUdpSocket&lt;/a&gt;, a call to &lt;a href=&quot;qabstractsocket#bind&quot;&gt;bind()&lt;/a&gt; may fail with a timeout error. If a port number other than 0 is passed to &lt;a href=&quot;qabstractsocket#bind&quot;&gt;bind()&lt;/a&gt;, it is not guaranteed that it is the specified port that will be used. Use &lt;a href=&quot;qabstractsocket#localPort&quot;&gt;localPort()&lt;/a&gt; and &lt;a href=&quot;qabstractsocket#localAddress&quot;&gt;localAddress()&lt;/a&gt; to get the actual address and port number in use. Because proxied UDP goes through two UDP connections, it is more likely that packets will be dropped.</source>
          <target state="translated">使用&lt;a href=&quot;qudpsocket&quot;&gt;QUdpSocket时&lt;/a&gt;，对&lt;a href=&quot;qabstractsocket#bind&quot;&gt;bind（）&lt;/a&gt;的调用可能会因超时错误而失败。如果将非0的端口号传递给&lt;a href=&quot;qabstractsocket#bind&quot;&gt;bind（）&lt;/a&gt;，则不能保证它是将要使用的指定端口。使用&lt;a href=&quot;qabstractsocket#localPort&quot;&gt;localPort（）&lt;/a&gt;和&lt;a href=&quot;qabstractsocket#localAddress&quot;&gt;localAddress（）&lt;/a&gt;获取使用中的实际地址和端口号。因为代理的UDP通过两个UDP连接，所以丢包的可能性更大。</target>
        </trans-unit>
        <trans-unit id="c9a076d67fba73a9b4410b9906e0667a40bc2584" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;qudpsocket&quot;&gt;QUdpSocket&lt;/a&gt;, you can also establish a virtual connection to a UDP server using &lt;a href=&quot;qabstractsocket#connectToHost&quot;&gt;connectToHost&lt;/a&gt;() and then use &lt;a href=&quot;qiodevice#read&quot;&gt;read&lt;/a&gt;() and &lt;a href=&quot;qiodevice#write&quot;&gt;write&lt;/a&gt;() to exchange datagrams without specifying the receiver for each datagram.</source>
          <target state="translated">使用&lt;a href=&quot;qudpsocket&quot;&gt;QUdpSocket&lt;/a&gt;，您还可以使用&lt;a href=&quot;qabstractsocket#connectToHost&quot;&gt;connectToHost&lt;/a&gt;（）建立与UDP服务器的虚拟连接，然后使用&lt;a href=&quot;qiodevice#read&quot;&gt;read&lt;/a&gt;（）和&lt;a href=&quot;qiodevice#write&quot;&gt;write&lt;/a&gt;（）交换数据报，而无需为每个数据报指定接收方。</target>
        </trans-unit>
        <trans-unit id="f1f73057832d43cc1f0b28576c1787b331ef4bc6" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;qurl#ComponentFormattingOption-enum&quot;&gt;QUrl::FullyDecoded&lt;/a&gt; formatting, all percent-encoded sequences will be decoded fully and the '%' character is used to represent itself. &lt;a href=&quot;qurl#ComponentFormattingOption-enum&quot;&gt;QUrl::FullyDecoded&lt;/a&gt; should be used with care, since it may cause data loss. See the documentation of &lt;a href=&quot;qurl#ComponentFormattingOption-enum&quot;&gt;QUrl::FullyDecoded&lt;/a&gt; for information on what data may be lost.</source>
          <target state="translated">使用&lt;a href=&quot;qurl#ComponentFormattingOption-enum&quot;&gt;QUrl :: FullyDecoded&lt;/a&gt;格式，将对所有百分比编码的序列进行完全解码，并使用'％'字符表示自身。&lt;a href=&quot;qurl#ComponentFormattingOption-enum&quot;&gt;请小心&lt;/a&gt;使用QUrl :: FullyDecoded，因为它可能会导致数据丢失。有关可能丢失哪些数据的信息，请参见&lt;a href=&quot;qurl#ComponentFormattingOption-enum&quot;&gt;QUrl :: FullyDecoded&lt;/a&gt;的文档。</target>
        </trans-unit>
        <trans-unit id="aea815a02f618bd505e0018ce84688729e474818" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;qvector&quot;&gt;QVector&lt;/a&gt;, &lt;a href=&quot;qhash#qhash&quot;&gt;QHash&lt;/a&gt;, and &lt;a href=&quot;qset&quot;&gt;QSet&lt;/a&gt;, the performance of appending items is amortized O(log</source>
          <target state="translated">使用&lt;a href=&quot;qvector&quot;&gt;QVector&lt;/a&gt;，&lt;a href=&quot;qhash#qhash&quot;&gt;QHash&lt;/a&gt;和&lt;a href=&quot;qset&quot;&gt;QSet&lt;/a&gt;，附加项的性能摊销为O（log</target>
        </trans-unit>
        <trans-unit id="91b4e93e646576cbe861f8e8ff67b744e1ec1177" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;supported-platforms#winrt&quot;&gt;WinRT&lt;/a&gt; and on INTEGRITY, the returned value is the &lt;a href=&quot;qtcpserver&quot;&gt;QTcpServer&lt;/a&gt; socket descriptor and the type is defined by &lt;a href=&quot;qtcpserver#socketDescriptor&quot;&gt;socketDescriptor&lt;/a&gt;.</source>
          <target state="translated">对于&lt;a href=&quot;supported-platforms#winrt&quot;&gt;WinRT&lt;/a&gt;，在INTEGRITY上，返回的值是&lt;a href=&quot;qtcpserver&quot;&gt;QTcpServer&lt;/a&gt;套接字描述符，并且类型由&lt;a href=&quot;qtcpserver#socketDescriptor&quot;&gt;socketDescriptor&lt;/a&gt;定义。</target>
        </trans-unit>
        <trans-unit id="e8688a16d1e596260602f5999a09f611bc3d5b43" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;supported-platforms#winrt&quot;&gt;WinRT&lt;/a&gt; and on INTEGRITY, the returned value is the &lt;a href=&quot;qtcpsocket&quot;&gt;QTcpSocket&lt;/a&gt; socket descriptor and the type is defined by &lt;a href=&quot;qabstractsocket#socketDescriptor&quot;&gt;socketDescriptor&lt;/a&gt;.</source>
          <target state="translated">对于&lt;a href=&quot;supported-platforms#winrt&quot;&gt;WinRT&lt;/a&gt;，在INTEGRITY上，返回的值是&lt;a href=&quot;qtcpsocket&quot;&gt;QTcpSocket&lt;/a&gt;套接字描述符，并且类型由&lt;a href=&quot;qabstractsocket#socketDescriptor&quot;&gt;socketDescriptor&lt;/a&gt;定义。</target>
        </trans-unit>
        <trans-unit id="9248ebd5b1e0afba9784b19bd821110389b32c72" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;TextEdit.MarkdownText&lt;/code&gt;, checkboxes that result from using the &lt;a href=&quot;https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown&quot;&gt;GitHub checkbox extension&lt;/a&gt; are interactively checkable.</source>
          <target state="translated">使用 &lt;code&gt;TextEdit.MarkdownText&lt;/code&gt; ，可以交互地检查使用&lt;a href=&quot;https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown&quot;&gt;GitHub复选框扩展名&lt;/a&gt;而产生的复选框。</target>
        </trans-unit>
        <trans-unit id="03290e3e4ae717c4512a405c7c756059087b2a61" translate="yes" xml:space="preserve">
          <source>With APIs other than OpenGL the relevant states are only those that are set via the command list (for example, OMSetRenderTargets, RSSetViewports, RSSetScissorRects, OMSetBlendFactor, OMSetStencilRef in case of D3D12), and only when such commands were added to the scenegraph's command list queried via the QSGRendererInterface::CommandList resource enum. States set in pipeline state objects do not need to be reported here. Similarly, draw call related settings (root signature, descriptor heaps, etc.) are always set again by the scenegraph so &lt;a href=&quot;qsgrendernode#render&quot;&gt;render&lt;/a&gt;() can freely change them.</source>
          <target state="translated">对于非OpenGL的API，相关状态仅是通过命令列表设置的状态（例如，对于D3D12，则为OMSetRenderTargets，RSSsetViewports，RSSsetScissorRects，OMSetBlendFactor，OMSetStencilRef），并且仅当将此类命令添加到场景图的命令列表中时才进行查询。通过QSGRendererInterface :: CommandList资源枚举。不需要在此处报告在管道状态对象中设置的状态。类似地，场景图总是会再次设置与绘制调用相关的设置（根签名，描述符堆等），因此&lt;a href=&quot;qsgrendernode#render&quot;&gt;render&lt;/a&gt;（）可以自由更改它们。</target>
        </trans-unit>
        <trans-unit id="9e70a3722f26658e32b513ebe4cd59190104116b" translate="yes" xml:space="preserve">
          <source>With APIs other than OpenGL, the only relevant values are the ones that correspond to dynamic state changes recorded on the command list/buffer. For example, RSSetViewports, RSSetScissorRects, OMSetBlendFactor, OMSetStencilRef in case of D3D12, or vkCmdSetViewport, vkCmdSetScissor, vkCmdSetBlendConstants, vkCmdSetStencilRef in case of Vulkan, and only when such commands were added to the scenegraph's command list queried via the QSGRendererInterface::CommandList resource enum. States set in pipeline state objects do not need to be reported here. Similarly, draw call related settings (pipeline states, descriptor sets, vertex or index buffer bindings, root signature, descriptor heaps, etc.) are always set again by the scenegraph so &lt;a href=&quot;qsgrendernode#render&quot;&gt;render&lt;/a&gt;() can freely change them.</source>
          <target state="translated">对于除OpenGL以外的API，唯一相关的值是与记录在命令列表/缓冲区中的动态状态更改相对应的值。例如，对于D3D12，为RSSetViewports，RSSsetScissorRects，OMSetBlendFactor，OMSetStencilRef，或者在Vulkan中为命令列表添加了这样的命令时，仅在向列表中添加这样的命令时，将vgraph的队列添加到图列中：仅在向列表中添加了这样的命令时：不需要在此处报告在管道状态对象中设置的状态。同样，与绘制调用相关的设置（管道状态，描述符集，顶点或索引缓冲区绑定，根签名，描述符堆等）始终由场景图再次设置，因此&lt;a href=&quot;qsgrendernode#render&quot;&gt;render&lt;/a&gt;（）可以自由更改它们。</target>
        </trans-unit>
        <trans-unit id="952e6d9f2d1c7eaf2f8ec67050132f418e63f61b" translate="yes" xml:space="preserve">
          <source>With APIs other than OpenGL, the only relevant values are the ones that correspond to dynamic state changes recorded on the command list/buffer. For example, RSSetViewports, RSSetScissorRects, OMSetBlendState, OMSetDepthStencilState in case of D3D11, or vkCmdSetViewport, vkCmdSetScissor, vkCmdSetBlendConstants, vkCmdSetStencilRef in case of Vulkan, and only when such commands were added to the scenegraph's command list queried via the QSGRendererInterface::CommandList resource enum. States set in pipeline state objects do not need to be reported here. Similarly, draw call related settings (pipeline states, descriptor sets, vertex or index buffer bindings, root signature, descriptor heaps, etc.) are always set again by the scenegraph so &lt;a href=&quot;qsgrendernode#render&quot;&gt;render&lt;/a&gt;() can freely change them.</source>
          <target state="translated">对于除OpenGL以外的API，唯一相关的值是与记录在命令列表/缓冲区中的动态状态更改相对应的值。例如，对于D3D11，为RSSetViewports，RSSsetScissorRects，OMSetBlendState，OMSetDepthStencilState，或者在Vulkan命令为场景图的情况下，仅在向列表中添加这样的命令时，才将以下命令添加到列表：不需要在此处报告在管道状态对象中设置的状态。同样，与绘制调用相关的设置（管道状态，描述符集，顶点或索引缓冲区绑定，根签名，描述符堆等）始终由场景图再次设置，因此&lt;a href=&quot;qsgrendernode#render&quot;&gt;render&lt;/a&gt;（）可以自由更改它们。</target>
        </trans-unit>
        <trans-unit id="f8c62fbfaaff355a72036abc9d9e93ba575dd471" translate="yes" xml:space="preserve">
          <source>With CMake, use the generated &lt;code&gt;qt-cmake&lt;/code&gt; script in the &lt;code&gt;bin&lt;/code&gt; directory of the staging location (&lt;code&gt;$HOME/qt6-rpi&lt;/code&gt; in the example) to configure, then run &lt;code&gt;ninja&lt;/code&gt;. For example:</source>
          <target state="translated">对于CMake，请使用登台位置（在示例中为 &lt;code&gt;$HOME/qt6-rpi&lt;/code&gt; ）的 &lt;code&gt;bin&lt;/code&gt; 目录中生成的 &lt;code&gt;qt-cmake&lt;/code&gt; 脚本进行配置，然后运行 &lt;code&gt;ninja&lt;/code&gt; 。例如：</target>
        </trans-unit>
        <trans-unit id="cafbf9271f9b132f25eceee442e07c6d15fe8061" translate="yes" xml:space="preserve">
          <source>With D3D12, these strings can either be a URL for a local file, a file in the resource system, or an HLSL source string. Using a URL for a local file or a file in the resource system indicates that the file in question contains pre-compiled D3D shader bytecode generated by the &lt;code&gt;fxc&lt;/code&gt; tool, or, alternatively, HLSL source code. The type of file is detected automatically. This means that the D3D12 backend supports all options from &lt;a href=&quot;qml-qtquick-graphicsinfo&quot;&gt;GraphicsInfo&lt;/a&gt;.shaderCompilationType and &lt;a href=&quot;qml-qtquick-graphicsinfo&quot;&gt;GraphicsInfo&lt;/a&gt;.shaderSourceType.</source>
          <target state="translated">使用D3D12，这些字符串可以是本地文件的URL，资源系统中的文件或HLSL源字符串。将URL用于本地文件或资源系统中的文件表示该文件包含 &lt;code&gt;fxc&lt;/code&gt; 工具生成的预编译D3D着色器字节码，或者HLSL源代码。自动检测文件类型。这意味着D3D12后端支持&lt;a href=&quot;qml-qtquick-graphicsinfo&quot;&gt;GraphicsInfo&lt;/a&gt; .shaderCompilationType和&lt;a href=&quot;qml-qtquick-graphicsinfo&quot;&gt;GraphicsInfo&lt;/a&gt; .shaderSourceType中的所有选项。</target>
        </trans-unit>
        <trans-unit id="88a719a916cbdf9f54485acb3de11f5065e5756a" translate="yes" xml:space="preserve">
          <source>With Frameworks:</source>
          <target state="translated">与框架。</target>
        </trans-unit>
        <trans-unit id="f74f1e0ed752fa79a313fb567cf4e0f1c85789a4" translate="yes" xml:space="preserve">
          <source>With GLSL the default shader expects the texture coordinate to be passed from the vertex shader as &lt;code&gt;varying highp vec2 qt_TexCoord0&lt;/code&gt;, and it samples from a sampler2D named &lt;code&gt;source&lt;/code&gt;. With HLSL the texture is named &lt;code&gt;source&lt;/code&gt;, while the vertex shader is expected to provide &lt;code&gt;float2 coord : TEXCOORD0&lt;/code&gt; in its output in addition to &lt;code&gt;float4 position : SV_POSITION&lt;/code&gt; (names can differ since linking is done based on the semantics).</source>
          <target state="translated">使用GLSL时，默认着色器期望从顶点着色器以 &lt;code&gt;varying highp vec2 qt_TexCoord0&lt;/code&gt; 传递纹理坐标，并从名为 &lt;code&gt;source&lt;/code&gt; 的sampler2D中进行采样。使用HLSL时，纹理被命名为 &lt;code&gt;source&lt;/code&gt; ，而顶点着色器除了其 &lt;code&gt;float4 position : SV_POSITION&lt;/code&gt; 外， &lt;code&gt;float2 coord : TEXCOORD0&lt;/code&gt; 在其输出中提供float2坐标：TEXCOORD0（名称可能有所不同，因为链接是基于语义完成的）。</target>
        </trans-unit>
        <trans-unit id="06bb1d65a22341423f053582013a700a14cd0a62" translate="yes" xml:space="preserve">
          <source>With GLSL the default shader passes the texture coordinate along to the fragment shader as &lt;code&gt;varying highp vec2 qt_TexCoord0&lt;/code&gt;. With HLSL it is enough to use the standard &lt;code&gt;TEXCOORD0&lt;/code&gt; semantic, for example &lt;code&gt;float2 coord : TEXCOORD0&lt;/code&gt;.</source>
          <target state="translated">使用GLSL，默认着色器将纹理坐标作为 &lt;code&gt;varying highp vec2 qt_TexCoord0&lt;/code&gt; 传递给片段着色器。使用HLSL，使用标准 &lt;code&gt;TEXCOORD0&lt;/code&gt; 语义就足够了，例如 &lt;code&gt;float2 coord : TEXCOORD0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="432ffb8eb16488c3b464914ba3b76169484e8c79" translate="yes" xml:space="preserve">
          <source>With Microsoft SQL Server the result set returned by a stored procedure that uses the return statement, or returns multiple result sets, will be accessible only if you set the query's forward only mode to</source>
          <target state="translated">在Microsoft SQL Server中,只有当你将查询的前向模式设为</target>
        </trans-unit>
        <trans-unit id="6ab92144418b0fd8935aca47560e5939a743472a" translate="yes" xml:space="preserve">
          <source>With OpenGL 3.0+ contexts, when portability is not important, the versioned &lt;a href=&quot;https://doc.qt.io/qt-5.13/qopenglfunctions.html&quot;&gt;QOpenGLFunctions&lt;/a&gt; variants give easy access to all the modern OpenGL functions available in a given version:</source>
          <target state="translated">在OpenGL 3.0+上下文中，当可移植性不重要时，版本化的&lt;a href=&quot;https://doc.qt.io/qt-5.13/qopenglfunctions.html&quot;&gt;QOpenGLFunctions&lt;/a&gt;变体可以轻松访问给定版本中可用的所有现代OpenGL函数：</target>
        </trans-unit>
        <trans-unit id="3e299c1f4a978eb904713ea8077150796fa08d67" translate="yes" xml:space="preserve">
          <source>With OpenGL 3.0+ contexts, when portability is not important, the versioned &lt;a href=&quot;https://doc.qt.io/qt-5.15/qopenglfunctions.html&quot;&gt;QOpenGLFunctions&lt;/a&gt; variants give easy access to all the modern OpenGL functions available in a given version:</source>
          <target state="translated">在OpenGL 3.0+上下文中，当可移植性不重要时，版本化的&lt;a href=&quot;https://doc.qt.io/qt-5.15/qopenglfunctions.html&quot;&gt;QOpenGLFunctions&lt;/a&gt;变体可以轻松访问给定版本中可用的所有现代OpenGL函数：</target>
        </trans-unit>
        <trans-unit id="9a4efeffaafad4ed76cb7c01f6203e6512392a14" translate="yes" xml:space="preserve">
          <source>With OpenGL 3.0+ contexts, when portability is not important, the versioned &lt;a href=&quot;https://doc.qt.io/qt-6.0/qopenglfunctions.html&quot;&gt;QOpenGLFunctions&lt;/a&gt; variants give easy access to all the modern OpenGL functions available in a given version:</source>
          <target state="translated">在OpenGL 3.0+上下文中，当可移植性不重要时，版本化的&lt;a href=&quot;https://doc.qt.io/qt-6.0/qopenglfunctions.html&quot;&gt;QOpenGLFunctions&lt;/a&gt;变体可以轻松访问给定版本中可用的所有现代OpenGL函数：</target>
        </trans-unit>
        <trans-unit id="d99fbf67dac539e085a083af2978cf398c2b3dce" translate="yes" xml:space="preserve">
          <source>With OpenGL 3.2 the concept of profiles was introduced. Two profiles are currently defined for OpenGL: Core and Compatibility.</source>
          <target state="translated">OpenGL 3.2引入了profile的概念,目前为OpenGL定义了两个profile:Core和Compatibility。目前为OpenGL定义了两种配置文件:Core和Compatibility。</target>
        </trans-unit>
        <trans-unit id="c0f1facb5ae8f9746481b734a9086c1e3d74f3a5" translate="yes" xml:space="preserve">
          <source>With OpenGL the default version is &lt;code&gt;2.0&lt;/code&gt;.</source>
          <target state="translated">对于OpenGL，默认版本为 &lt;code&gt;2.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="84bc76e9356158a46e5ae5149f27cd5b3c84721a" translate="yes" xml:space="preserve">
          <source>With OpenGL the value is &lt;a href=&quot;qml-qtquick-graphicsinfo&quot;&gt;GraphicsInfo&lt;/a&gt;.RuntimeCompilation, which corresponds to the traditional way of using &lt;a href=&quot;qml-qtquick-shadereffect&quot;&gt;ShaderEffect&lt;/a&gt;. Non-OpenGL backends are expected to focus more on &lt;a href=&quot;qml-qtquick-graphicsinfo&quot;&gt;GraphicsInfo&lt;/a&gt;.OfflineCompilation, however.</source>
          <target state="translated">对于OpenGL，其值为&lt;a href=&quot;qml-qtquick-graphicsinfo&quot;&gt;GraphicsInfo&lt;/a&gt; .RuntimeCompilation，它与使用&lt;a href=&quot;qml-qtquick-shadereffect&quot;&gt;ShaderEffect&lt;/a&gt;的传统方式相对应。但是，非OpenGL后端应该更多地关注&lt;a href=&quot;qml-qtquick-graphicsinfo&quot;&gt;GraphicsInfo&lt;/a&gt; .OfflineCompilation。</target>
        </trans-unit>
        <trans-unit id="7de003d6b77d6796e19049db78d2434fccdf7e90" translate="yes" xml:space="preserve">
          <source>With OpenGL the value is &lt;a href=&quot;qml-qtquick-graphicsinfo&quot;&gt;GraphicsInfo&lt;/a&gt;.ShaderSourceString, which corresponds to the traditional way of inlining GLSL source code into QML. Other, non-OpenGL Qt Quick backends may however decide not to support inlined shader sources, or even shader sources at all. In this case shaders are expected to be pre-compiled into formats like SPIR-V or D3D shader bytecode.</source>
          <target state="translated">对于OpenGL，其值为&lt;a href=&quot;qml-qtquick-graphicsinfo&quot;&gt;GraphicsInfo&lt;/a&gt; .ShaderSourceString，它对应于将GLSL源代码内联到QML中的传统方式。但是，其他非OpenGL Qt Quick后端可能会决定完全不支持嵌入式着色器源，甚至根本不支持。在这种情况下，应将着色器预编译为SPIR-V或D3D着色器字节码之类的格式。</target>
        </trans-unit>
        <trans-unit id="42c1b1cf3a8ec76910bd045e07dea06b5c135d27" translate="yes" xml:space="preserve">
          <source>With OpenGL, the native handle is a GLuint value, so &lt;code&gt;object&lt;/code&gt; is then a pointer to a GLuint. With Vulkan, the native handle is a VkImage, so &lt;code&gt;object&lt;/code&gt; is a pointer to a VkImage. With Direct3D 11 and Metal &lt;code&gt;object&lt;/code&gt; is a pointer to a ID3D11Texture2D or MTLTexture pointer, respectively.</source>
          <target state="translated">在OpenGL中，本机句柄是GLuint值，因此 &lt;code&gt;object&lt;/code&gt; 是指向GLuint的指针。对于Vulkan，本机句柄是VkImage，因此 &lt;code&gt;object&lt;/code&gt; 是指向VkImage的指针。对于Direct3D 11和Metal &lt;code&gt;object&lt;/code&gt; ，分别是指向ID3D11Texture2D或MTLTexture指针的指针。</target>
        </trans-unit>
        <trans-unit id="447f8b0cd8714a7ba6f152254a9a2f10cb30db4e" translate="yes" xml:space="preserve">
          <source>With OpenGL, the scenegraph's OpenGL context will be current both when calling the destructor and this function.</source>
          <target state="translated">对于OpenGL,在调用destructor和该函数时,scenegraph的OpenGL上下文都将是当前的。</target>
        </trans-unit>
        <trans-unit id="681461a44bd3fc3f6ab0e940a488044968df90ae" translate="yes" xml:space="preserve">
          <source>With QUdpSocket, you can also establish a virtual connection to a UDP server using &lt;a href=&quot;qabstractsocket#connectToHost&quot;&gt;connectToHost&lt;/a&gt;() and then use &lt;a href=&quot;qiodevice#read&quot;&gt;read&lt;/a&gt;() and &lt;a href=&quot;qiodevice#write&quot;&gt;write&lt;/a&gt;() to exchange datagrams without specifying the receiver for each datagram.</source>
          <target state="translated">使用QUdpSocket，还可以使用&lt;a href=&quot;qabstractsocket#connectToHost&quot;&gt;connectToHost&lt;/a&gt;（）建立与UDP服务器的虚拟连接，然后使用&lt;a href=&quot;qiodevice#read&quot;&gt;read&lt;/a&gt;（）和&lt;a href=&quot;qiodevice#write&quot;&gt;write&lt;/a&gt;（）交换数据报，而无需为每个数据报指定接收者。</target>
        </trans-unit>
        <trans-unit id="56b427bae31a9ed757f6ae13bcca166dce5b0a5c" translate="yes" xml:space="preserve">
          <source>With Qt 6 and CMake, this approach is &lt;b&gt;no longer sufficient&lt;/b&gt; on its own. Rather, a &lt;a href=&quot;https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html&quot;&gt;CMake toolchain file&lt;/a&gt; must be provided before configuring can happen. It is in this file where customization with regards to compiler and linker flags, and toolchain and sysroot specific quirks, happens.</source>
          <target state="translated">对于Qt 6和CMake，仅靠这种方法&lt;b&gt;已不再足够&lt;/b&gt;。相反，必须先提供&lt;a href=&quot;https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html&quot;&gt;CMake工具链文件&lt;/a&gt;，然后才能进行配置。在此文件中，将进行有关编译器和链接器标志以及工具链和sysroot特定古怪的定制。</target>
        </trans-unit>
        <trans-unit id="6d4000ff07b627f2f3cd8ff0559054e853b706b9" translate="yes" xml:space="preserve">
          <source>With Qt Quick Controls 2, declare an &lt;a href=&quot;qml-qtquick-controls2-applicationwindow&quot;&gt;ApplicationWindow&lt;/a&gt; as the root item of your application and launch it by using &lt;a href=&quot;qqmlapplicationengine&quot;&gt;QQmlApplicationEngine&lt;/a&gt; instead. This ensures that you can control top level window properties from QML.</source>
          <target state="translated">使用Qt Quick Controls 2，将&lt;a href=&quot;qml-qtquick-controls2-applicationwindow&quot;&gt;ApplicationWindow&lt;/a&gt;声明为应用程序的根项目，然后使用&lt;a href=&quot;qqmlapplicationengine&quot;&gt;QQmlApplicationEngine&lt;/a&gt;启动它。这样可以确保您可以从QML控制顶级窗口属性。</target>
        </trans-unit>
        <trans-unit id="1d4dbcde91ae4a65a5e8e42051d5c480bc878f00" translate="yes" xml:space="preserve">
          <source>With Qt Quick Controls, declare an &lt;a href=&quot;qml-qtquick-controls2-applicationwindow&quot;&gt;ApplicationWindow&lt;/a&gt; as the root item of your application and launch it by using &lt;a href=&quot;qqmlapplicationengine&quot;&gt;QQmlApplicationEngine&lt;/a&gt; instead. This ensures that you can control top level window properties from QML.</source>
          <target state="translated">使用Qt Quick Controls，将&lt;a href=&quot;qml-qtquick-controls2-applicationwindow&quot;&gt;ApplicationWindow&lt;/a&gt;声明为应用程序的根项目，然后使用&lt;a href=&quot;qqmlapplicationengine&quot;&gt;QQmlApplicationEngine&lt;/a&gt;启动它。这确保您可以从QML控制顶级窗口属性。</target>
        </trans-unit>
        <trans-unit id="e693cc082b720fd71881c66e314770011b15a068" translate="yes" xml:space="preserve">
          <source>With Qt Quick Controls, declare an &lt;a href=&quot;qtquickcontrols-changes-qt6#applicationwindow&quot;&gt;ApplicationWindow&lt;/a&gt; as the root item of your application and launch it by using &lt;a href=&quot;qqmlapplicationengine&quot;&gt;QQmlApplicationEngine&lt;/a&gt; instead. This ensures that you can control top level window properties from QML.</source>
          <target state="translated">使用Qt Quick Controls，将&lt;a href=&quot;qtquickcontrols-changes-qt6#applicationwindow&quot;&gt;ApplicationWindow&lt;/a&gt;声明为应用程序的根项目，然后使用&lt;a href=&quot;qqmlapplicationengine&quot;&gt;QQmlApplicationEngine&lt;/a&gt;启动它。这确保您可以从QML控制顶级窗口属性。</target>
        </trans-unit>
        <trans-unit id="ab58178f80111f6946c48a42f95bb6acc41459d3" translate="yes" xml:space="preserve">
          <source>With Qt XML Patterns, a standard way to present the initial focus to a query is to call &lt;a href=&quot;qxmlquery#setFocus&quot;&gt;QXmlQuery::setFocus&lt;/a&gt;(). Another common way is to let the &lt;a href=&quot;xmlprocessing&quot;&gt;XQuery&lt;/a&gt; itself create the initial focus by using the first step of the path expression to call the &lt;a href=&quot;xmlprocessing&quot;&gt;XQuery&lt;/a&gt;&lt;code&gt;doc()&lt;/code&gt; function. The &lt;code&gt;doc()&lt;/code&gt; function loads an XML document and returns the</source>
          <target state="translated">使用Qt XML模式，将初始焦点呈现给查询的标准方法是调用&lt;a href=&quot;qxmlquery#setFocus&quot;&gt;QXmlQuery :: setFocus&lt;/a&gt;（）。另一种常见的方法是让&lt;a href=&quot;xmlprocessing&quot;&gt;XQuery&lt;/a&gt;本身通过使用路径表达式的第一步来调用&lt;a href=&quot;xmlprocessing&quot;&gt;XQuery &lt;/a&gt; &lt;code&gt;doc()&lt;/code&gt; 函数来创建初始焦点。该 &lt;code&gt;doc()&lt;/code&gt; 函数加载XML文档并返回</target>
        </trans-unit>
        <trans-unit id="294b78628ff463c80a1c17789150fe32ad463fe9" translate="yes" xml:space="preserve">
          <source>With Qt XML Patterns, a standard way to present the initial focus to a query is to call &lt;a href=&quot;qxmlquery#setFocus&quot;&gt;QXmlQuery::setFocus&lt;/a&gt;(). Another common way is to let the &lt;a href=&quot;xmlprocessing#&quot;&gt;XQuery&lt;/a&gt; itself create the initial focus by using the first step of the path expression to call the &lt;a href=&quot;xmlprocessing#&quot;&gt;XQuery&lt;/a&gt;&lt;code&gt;doc()&lt;/code&gt; function. The &lt;code&gt;doc()&lt;/code&gt; function loads an XML document and returns the</source>
          <target state="translated">使用Qt XML模式，将初始焦点呈现给查询的标准方法是调用&lt;a href=&quot;qxmlquery#setFocus&quot;&gt;QXmlQuery :: setFocus&lt;/a&gt;（）。另一种常见的方法是让&lt;a href=&quot;xmlprocessing#&quot;&gt;XQuery&lt;/a&gt;本身通过使用路径表达式的第一步来调用&lt;a href=&quot;xmlprocessing#&quot;&gt;XQuery &lt;/a&gt; &lt;code&gt;doc()&lt;/code&gt; 函数来创建初始焦点。该 &lt;code&gt;doc()&lt;/code&gt; 函数加载XML文档并返回</target>
        </trans-unit>
        <trans-unit id="5200fea545520eec9315c9a63628fdd54aebc6ff" translate="yes" xml:space="preserve">
          <source>With Qt XML Patterns, subclassing &lt;a href=&quot;qabstractxmlnodemodel&quot;&gt;QAbstractXmlNodeModel&lt;/a&gt; eliminates the transformation required to convert the non-XML data model to the XML data model, because there is only ever one data model required. The non-XML data model presents the non-XML data to the query engine via the XML data model API. Also, since the query engine uses the API to access the &lt;a href=&quot;qabstractxmlnodemodel&quot;&gt;QAbstractXmlNodeModel&lt;/a&gt;, the data model subclass can construct the elements, attributes and other data on demand, responding to the query's specific requests. This can greatly improve efficiency, because it means the entire model might not have to be built. For example, in the file system model above, it is not necessary to build an instance for a whole XML file representing the whole file system. Instead nodes are created on demand, which also likely is a small subset of the file system.</source>
          <target state="translated">使用Qt XML模式，子类&lt;a href=&quot;qabstractxmlnodemodel&quot;&gt;QAbstractXmlNodeModel&lt;/a&gt;消除了将非XML数据模型转换为XML数据模型所需的转换，因为只需要一个数据模型。非XML数据模型通过XML数据模型API将非XML数据提供给查询引擎。另外，由于查询引擎使用API​​来访问&lt;a href=&quot;qabstractxmlnodemodel&quot;&gt;QAbstractXmlNodeModel&lt;/a&gt;，数据模型子类可以根据需要构造元素，属性和其他数据，以响应查询的特定请求。这可以极大地提高效率，因为这意味着可能不必构建整个模型。例如，在上述文件系统模型中，不必为代表整个文件系统的整个XML文件构建实例。而是根据需要创建节点，这也可能只是文件系统的一小部分。</target>
        </trans-unit>
        <trans-unit id="c78c159fb1a47e011fbc4b1b7ed3ea8b59c8a82e" translate="yes" xml:space="preserve">
          <source>With Qt for INTEGRITY you can build and develop applications for the INTEGRITY RTOS. Qt for INTEGRITY supports most &lt;a href=&quot;qtwebassembly-platform-notes#supported-qt-modules&quot;&gt;Qt Modules&lt;/a&gt;. The development environment includes your target device and Qt sources that you need to build for your target device. See &lt;a href=&quot;#supported-development-hosts-and-boards&quot;&gt;Supported Development Hosts and Boards&lt;/a&gt; for detailed information about the supported development environment.</source>
          <target state="translated">借助Qt for INTEGRITY，您可以为INTEGRITY RTOS构建和开发应用程序。Qt for INTEGRITY支持大多数&lt;a href=&quot;qtwebassembly-platform-notes#supported-qt-modules&quot;&gt;Qt模块&lt;/a&gt;。开发环境包括目标设备和需要为目标设备构建的Qt源。有关&lt;a href=&quot;#supported-development-hosts-and-boards&quot;&gt;受&lt;/a&gt;支持的开发环境的详细信息，请参见受支持的开发主机和董事会。</target>
        </trans-unit>
        <trans-unit id="8f59c1714c7571ae8afd5652446f0ed08ecf749a" translate="yes" xml:space="preserve">
          <source>With Qt for INTEGRITY you can build and develop applications for the INTEGRITY RTOS. Qt for INTEGRITY supports most &lt;a href=&quot;qtwebassembly-platform-notes#supported-qt-modules&quot;&gt;Qt Modules&lt;/a&gt;. The development environment includes your target device and Qt sources that you need to build for your target device. See &lt;a href=&quot;integrity#supported-development-hosts-and-boards&quot;&gt;Supported Development Hosts and Boards&lt;/a&gt; for detailed information about the supported development environment.</source>
          <target state="translated">借助Qt for INTEGRITY，您可以为INTEGRITY RTOS构建和开发应用程序。Qt for INTEGRITY支持大多数&lt;a href=&quot;qtwebassembly-platform-notes#supported-qt-modules&quot;&gt;Qt模块&lt;/a&gt;。开发环境包括目标设备和为目标设备构建所需的Qt源。有关&lt;a href=&quot;integrity#supported-development-hosts-and-boards&quot;&gt;受&lt;/a&gt;支持的开发环境的详细信息，请参见受支持的开发主机和董事会。</target>
        </trans-unit>
        <trans-unit id="69fb83e92c1f79f960bcc24dd540282df982418a" translate="yes" xml:space="preserve">
          <source>With Qt version 4.3 or higher, clipboard changes made by other applications will only be detected when the application is activated.</source>
          <target state="translated">在Qt 4.3或更高版本的情况下,只有当应用程序被激活时,其他应用程序对剪贴板的更改才会被检测到。</target>
        </trans-unit>
        <trans-unit id="38c1bb6dacd5c65a7b7279214271a5b38f1f18ac" translate="yes" xml:space="preserve">
          <source>With WinRT and on INTEGRITY, the returned value is the &lt;a href=&quot;qtcpserver&quot;&gt;QTcpServer&lt;/a&gt; socket descriptor and the type is defined by &lt;a href=&quot;qtcpserver#socketDescriptor&quot;&gt;socketDescriptor&lt;/a&gt;.</source>
          <target state="translated">使用WinRT并在INTEGRITY上，返回的值是&lt;a href=&quot;qtcpserver&quot;&gt;QTcpServer&lt;/a&gt;套接字描述符，并且类型由&lt;a href=&quot;qtcpserver#socketDescriptor&quot;&gt;socketDescriptor&lt;/a&gt;定义。</target>
        </trans-unit>
        <trans-unit id="3276d2fcc5a01e5cb84d4dc7659ad61ff8ba72e1" translate="yes" xml:space="preserve">
          <source>With WinRT and on INTEGRITY, the returned value is the &lt;a href=&quot;qtcpsocket&quot;&gt;QTcpSocket&lt;/a&gt; socket descriptor and the type is defined by &lt;a href=&quot;qabstractsocket#socketDescriptor&quot;&gt;socketDescriptor&lt;/a&gt;.</source>
          <target state="translated">使用WinRT并在INTEGRITY上，返回的值是&lt;a href=&quot;qtcpsocket&quot;&gt;QTcpSocket&lt;/a&gt;套接字描述符，并且类型由&lt;a href=&quot;qabstractsocket#socketDescriptor&quot;&gt;socketDescriptor&lt;/a&gt;定义。</target>
        </trans-unit>
        <trans-unit id="94008095cf1b24661e83773e6fc0caa74124c0a4" translate="yes" xml:space="preserve">
          <source>With a &lt;a href=&quot;qml-qtquick3d-custommaterial&quot;&gt;CustomMaterial&lt;/a&gt; transforming the vertices</source>
          <target state="translated">使用&lt;a href=&quot;qml-qtquick3d-custommaterial&quot;&gt;CustomMaterial&lt;/a&gt;变换顶点</target>
        </trans-unit>
        <trans-unit id="856d7b0adeb7edb46b8f14deecdbbcf56b759d07" translate="yes" xml:space="preserve">
          <source>With a camera determined, it is possible to calculate the projection matrix for this frame. The calculation is done at this point because each renderable needs to know how to be projected. This also means that it is now possible to calculate which renderable items should be rendered. Starting with the list of all renderable items, we remove all items that are not visible because they are either disabled or completely transparent. Then, if frustum culling is enabled on the active camera, each renderable item is checked to see if it is completely outside of the view of the camera's frustum, and if so it is removed from the renderable list.</source>
          <target state="translated">确定了摄像机后,就可以计算这一帧的投影矩阵。此时进行计算,是因为每个可渲染项都需要知道如何进行投影。这也意味着,现在可以计算哪些可渲染项应该被渲染。从所有可渲染项的列表开始,我们删除所有不可见的项,因为它们要么被禁用,要么完全透明。然后,如果在活动摄像机上启用了frustum culling,则检查每个可渲染项是否完全在摄像机的frustum视野之外,如果是,则从可渲染列表中移除。</target>
        </trans-unit>
        <trans-unit id="c0055b7bd0044bac2582ebd0bfa65dec57fe1df3" translate="yes" xml:space="preserve">
          <source>With a scroll bar policy of &lt;a href=&quot;qt#ScrollBarPolicy-enum&quot;&gt;Qt::ScrollBarAsNeeded&lt;/a&gt; (the default), &lt;a href=&quot;qabstractscrollarea&quot;&gt;QAbstractScrollArea&lt;/a&gt; shows scroll bars when they provide a non-zero scrolling range, and hides them otherwise.</source>
          <target state="translated">使用&lt;a href=&quot;qt#ScrollBarPolicy-enum&quot;&gt;Qt :: ScrollBarAsNeeded&lt;/a&gt;（默认）的滚动条策略，&lt;a href=&quot;qabstractscrollarea&quot;&gt;QAbstractScrollArea在&lt;/a&gt;滚动条提供非零滚动范围时显示滚动条，否则将其隐藏。</target>
        </trans-unit>
        <trans-unit id="588817461689f4648aeaa1203fd38f984768ded4" translate="yes" xml:space="preserve">
          <source>With a scroll bar policy of &lt;a href=&quot;qt#ScrollBarPolicy-enum&quot;&gt;Qt::ScrollBarAsNeeded&lt;/a&gt; (the default), QAbstractScrollArea shows scroll bars when they provide a non-zero scrolling range, and hides them otherwise.</source>
          <target state="translated">使用&lt;a href=&quot;qt#ScrollBarPolicy-enum&quot;&gt;Qt :: ScrollBarAsNeeded&lt;/a&gt;（默认）的滚动条策略，QAbstractScrollArea在滚动条提供非零滚动范围时显示滚动条，否则将其隐藏。</target>
        </trans-unit>
        <trans-unit id="5b86fde7c459bcbfcfa267a5ff9e215a585397ef" translate="yes" xml:space="preserve">
          <source>With above definitions, &lt;code&gt;qmake&lt;/code&gt; invokes &lt;code&gt;qscxmlc&lt;/code&gt; to generate MyStatemachine.h and MyStatemachine.cpp, and adds them to &lt;a href=&quot;qmake-variable-reference#headers&quot;&gt;HEADERS&lt;/a&gt; and &lt;a href=&quot;qmake-variable-reference#sources&quot;&gt;SOURCES&lt;/a&gt; variables.</source>
          <target state="translated">通过以上定义， &lt;code&gt;qmake&lt;/code&gt; 调用 &lt;code&gt;qscxmlc&lt;/code&gt; 生成MyStatemachine.h和MyStatemachine.cpp，并将它们添加到&lt;a href=&quot;qmake-variable-reference#headers&quot;&gt;HEADERS&lt;/a&gt;和&lt;a href=&quot;qmake-variable-reference#sources&quot;&gt;SOURCES&lt;/a&gt;变量中。</target>
        </trans-unit>
        <trans-unit id="23532dbc4d414bd26d528c80048829ff3523bbff" translate="yes" xml:space="preserve">
          <source>With above, QDoc will search for a file &lt;code&gt;$T_INSTALL_DOCS/qtdoc/qtdoc.index&lt;/code&gt; for a dependency to &lt;code&gt;qtdoc&lt;/code&gt;. If an index file for a dependency is not found, QDoc will output a warning.</source>
          <target state="translated">通过以上内容，QDoc将搜索文件 &lt;code&gt;$T_INSTALL_DOCS/qtdoc/qtdoc.index&lt;/code&gt; 以获取对 &lt;code&gt;qtdoc&lt;/code&gt; 的依赖关系。如果找不到依赖项的索引文件，则QDoc将输出警告。</target>
        </trans-unit>
        <trans-unit id="90f3b749f81d01b2b5e2f0a5d8e087a29b49e2f8" translate="yes" xml:space="preserve">
          <source>With above, the output goes to &lt;code&gt;&amp;lt;outputdir&amp;gt;/html&lt;/code&gt;.</source>
          <target state="translated">通过以上操作，输出将转到 &lt;code&gt;&amp;lt;outputdir&amp;gt;/html&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b15a21b29363c3b39cc0f6c7ee308ae9c4564e0b" translate="yes" xml:space="preserve">
          <source>With asynchronous method invocations, the parameters must be of types that are known to Qt's meta-object system, because Qt needs to copy the arguments to store them in an event behind the scenes. If you try to use a queued connection and get the error message</source>
          <target state="translated">对于异步方法的调用,参数的类型必须是Qt的元对象系统所知道的,因为Qt需要在幕后复制参数来存储在事件中。如果你尝试使用队列连接并得到错误信息</target>
        </trans-unit>
        <trans-unit id="e6de4d619d9110413879a282b274cd1a66b256e9" translate="yes" xml:space="preserve">
          <source>With every new key pressed, the input method will try to create a matching string for the text typed so far called preedit string. While the input context is active, the user can only move the cursor inside the string belonging to this input context.</source>
          <target state="translated">每按下一个新的键,输入法就会尝试为目前输入的文本创建一个匹配的字符串,称为preedit字符串。当输入上下文处于活动状态时,用户只能在属于这个输入上下文的字符串内移动光标。</target>
        </trans-unit>
        <trans-unit id="673d6b13ddc2d912706385fe78fc3d71c3d6e826" translate="yes" xml:space="preserve">
          <source>With exception of stretch this property is honored by all &lt;a href=&quot;qheaderview#ResizeMode-enum&quot;&gt;resize modes&lt;/a&gt;</source>
          <target state="translated">除拉伸外，此属性在所有&lt;a href=&quot;qheaderview#ResizeMode-enum&quot;&gt;调整大小模式下均受重视&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="41df9982939bf1be88fb0cdd6e6ef7ea4641826a" translate="yes" xml:space="preserve">
          <source>With focusOnTouch switched off, &lt;a href=&quot;qgraphicsscene&quot;&gt;QGraphicsScene&lt;/a&gt; behaves as one would expect on &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;.</source>
          <target state="translated">关闭focusOnTouch后，&lt;a href=&quot;qgraphicsscene&quot;&gt;QGraphicsScene的&lt;/a&gt;行为与在&lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;上所期望的一样。</target>
        </trans-unit>
        <trans-unit id="ab1743a92e7b4813d9a91b3ed5e64db53f470a34" translate="yes" xml:space="preserve">
          <source>With focusOnTouch switched off, &lt;a href=&quot;qgraphicsscene&quot;&gt;QGraphicsScene&lt;/a&gt; behaves as one would expect on macOS.</source>
          <target state="translated">关闭focusOnTouch后，&lt;a href=&quot;qgraphicsscene&quot;&gt;QGraphicsScene的&lt;/a&gt;行为与在macOS上所期望的一样。</target>
        </trans-unit>
        <trans-unit id="821e71fdf72d781b71a1fbea52fb1d4c3002eb2f" translate="yes" xml:space="preserve">
          <source>With kinetic scrolling, the user can push the widget in a given direction and it will continue to scroll in this direction until it is stopped either by the user or by friction. Aspects of inertia, friction and other physical concepts can be changed in order to fine-tune an intuitive user experience.</source>
          <target state="translated">通过动感滚动,用户可以将小组件推向一个给定的方向,它将继续朝这个方向滚动,直到被用户或摩擦力停止。惯性、摩擦力和其他物理概念的各个方面都可以改变,以便对直观的用户体验进行微调。</target>
        </trans-unit>
        <trans-unit id="6b879995b4ecf5982d1f676e0d66843140979c2b" translate="yes" xml:space="preserve">
          <source>With named binding, the bound values can be examined in the following ways:</source>
          <target state="translated">通过命名绑定,可以用以下方式检查绑定值。</target>
        </trans-unit>
        <trans-unit id="51146c030055b1726d8afea222699007093e9f63" translate="yes" xml:space="preserve">
          <source>With one exception, once an &lt;a href=&quot;qxmlstreamreader#error&quot;&gt;error&lt;/a&gt;() is reported by readNext(), further reading of the XML stream is not possible. Then &lt;a href=&quot;qxmlstreamreader#atEnd&quot;&gt;atEnd&lt;/a&gt;() returns &lt;code&gt;true&lt;/code&gt;, &lt;a href=&quot;qxmlstreamreader#hasError&quot;&gt;hasError&lt;/a&gt;() returns &lt;code&gt;true&lt;/code&gt;, and this function returns &lt;a href=&quot;qxmlstreamreader#TokenType-enum&quot;&gt;QXmlStreamReader::Invalid&lt;/a&gt;.</source>
          <target state="translated">有一个例外，一旦一个&lt;a href=&quot;qxmlstreamreader#error&quot;&gt;误差&lt;/a&gt;（）由readNext（报告），XML流的进一步的阅读是不可能的。然后&lt;a href=&quot;qxmlstreamreader#atEnd&quot;&gt;atEnd&lt;/a&gt;（）返回 &lt;code&gt;true&lt;/code&gt; ，&lt;a href=&quot;qxmlstreamreader#hasError&quot;&gt;hasError&lt;/a&gt;（）返回 &lt;code&gt;true&lt;/code&gt; ，此函数返回&lt;a href=&quot;qxmlstreamreader#TokenType-enum&quot;&gt;QXmlStreamReader :: Invalid&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9aad0cbd983b7614d584843441c029b9cbdb475f" translate="yes" xml:space="preserve">
          <source>With pointer devices, however, it might be desired to show a tool tip as a result of hovering a button for a while. The following example presents how to show a tool tip after hovering a button for a second, and hide it after a timeout of five seconds.</source>
          <target state="translated">然而,对于指针设备,可能希望在悬停按钮一段时间后显示一个工具提示。下面的例子介绍了如何在按钮悬停一秒后显示工具提示,并在超时五秒后隐藏它。</target>
        </trans-unit>
        <trans-unit id="b07b9a0650c08801fb3ee24f13888eb52c25da23" translate="yes" xml:space="preserve">
          <source>With positional binding, the code becomes:</source>
          <target state="translated">有了位置绑定,代码就变成了。</target>
        </trans-unit>
        <trans-unit id="350e0215a00adf00788271d9e8529f364e45277e" translate="yes" xml:space="preserve">
          <source>With queued connections, the parameters must be of types that are known to Qt's meta-object system, because Qt needs to copy the arguments to store them in an event behind the scenes. If you try to use a queued connection and get the error message:</source>
          <target state="translated">在使用排队连接时,参数的类型必须是Qt的元对象系统已知的,因为Qt需要复制参数以在幕后将其存储在事件中。如果你尝试使用排队连接并得到错误信息。</target>
        </trans-unit>
        <trans-unit id="b74c8e9c91ca73f46a082cd5ab4871c9535f44d9" translate="yes" xml:space="preserve">
          <source>With regard to the frontend/backend separation, &lt;a href=&quot;qml-qtquick3d-view3d&quot;&gt;View3D&lt;/a&gt; is the separation point from the user perspective because a &lt;a href=&quot;qml-qtquick3d-view3d&quot;&gt;View3D&lt;/a&gt; is what defines what scene content to render. In the Qt Quick Spatial Scene Graph, the root node for a scene that will be rendered is a Layer node. Layer nodes are created by the &lt;a href=&quot;qml-qtquick3d-view3d&quot;&gt;View3D&lt;/a&gt; using a combination of the the &lt;a href=&quot;qml-qtquick3d-view3d&quot;&gt;View3D&lt;/a&gt;'s properties and the properties of the &lt;a href=&quot;qml-qtquick3d-sceneenvironment&quot;&gt;SceneEnvironment&lt;/a&gt;. When rendering a scene for a &lt;a href=&quot;qml-qtquick3d-view3d&quot;&gt;View3D&lt;/a&gt;, it is this Layer node that is being passed to the renderer to render a scene.</source>
          <target state="translated">关于前端/后端分离，从用户角度来看&lt;a href=&quot;qml-qtquick3d-view3d&quot;&gt;View3D&lt;/a&gt;是分离点，因为&lt;a href=&quot;qml-qtquick3d-view3d&quot;&gt;View3D&lt;/a&gt;是定义要渲染的场景内容的元素。在&amp;ldquo; Qt快速空间场景图&amp;rdquo;中，将要渲染的场景的根节点是&amp;ldquo;层&amp;rdquo;节点。&lt;a href=&quot;qml-qtquick3d-view3d&quot;&gt;View3D&lt;/a&gt;使用&lt;a href=&quot;qml-qtquick3d-view3d&quot;&gt;View3D&lt;/a&gt;的属性和&lt;a href=&quot;qml-qtquick3d-sceneenvironment&quot;&gt;SceneEnvironment&lt;/a&gt;的属性的组合来创建图层节点。在为&lt;a href=&quot;qml-qtquick3d-view3d&quot;&gt;View3D&lt;/a&gt;渲染场景时，正是将此Layer节点传递给渲染器以渲染场景。</target>
        </trans-unit>
        <trans-unit id="a6a070bcffff40c5594afefafc985c9414a6eb90" translate="yes" xml:space="preserve">
          <source>With some IR sensors, it is quite uncommon to reach the top and the bottom of the value range, and some parts of the range ends might not be obtainable at all. This is due to the behavior of the sensor hardware. With these sensors, the absolute value of reflectance should never be used directly. Instead, applications should react to the relative change of the reading values. Use &lt;a href=&quot;qproximitysensor&quot;&gt;QProximitySensor&lt;/a&gt; if it is only necessary to check if something is close to the device or not.</source>
          <target state="translated">对于某些红外传感器，到达值范围的顶部和底部非常罕见，并且可能根本无法获得范围末端的某些部分。这是由于传感器硬件的行为。使用这些传感器时，绝对不能直接使用反射率的绝对值。相反，应用程序应对读数值的相对变化做出反应。如果仅需要检查设备附近是否有物体，请使用&lt;a href=&quot;qproximitysensor&quot;&gt;QProximitySensor&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="98860aeaceada0d58cee21ee4f89dcc02a0a5c9c" translate="yes" xml:space="preserve">
          <source>With some graphics APIs it can be necessary to also connect to the &lt;a href=&quot;qquickwindow#beforeRendering&quot;&gt;QQuickWindow::beforeRendering&lt;/a&gt;() signal, because that is emitted before recording the beginning of a renderpass on the command buffer (vkCmdBeginRenderPass with Vulkan, or starting to encode via MTLRenderCommandEncoder in case of Metal). Recording copy operations cannot be done inside render() with such APIs. Rather, do it in the slot connected (with DirectConnection) to the beforeRendering signal.</source>
          <target state="translated">对于某些图形API，可能还需要连接到&lt;a href=&quot;qquickwindow#beforeRendering&quot;&gt;QQuickWindow :: beforeRendering&lt;/a&gt;（）信号，因为该信号是在将命令渲染通道的开始记录在命令缓冲区上之前发出的（使用Vulkan记录vkCmdBeginRenderPass，或者在发生以下情况时开始通过MTLRenderCommandEncoder进行编码）金属）。使用此类API不能在render（）内完成记录复制操作。而是在连接到（与DirectConnection一起）beforeRendering信号的插槽中进行操作。</target>
        </trans-unit>
        <trans-unit id="4d526548226a74231157fec5d123f22dd6139bca" translate="yes" xml:space="preserve">
          <source>With textures, the data that needs to be provided is a lot simpler structurally: it is the raw pixel data, with a varying number of bytes per pixel, depending on the texture format. For example, an &lt;code&gt;RGBA&lt;/code&gt; texture expects four bytes per pixel, whereas &lt;code&gt;RGBA16F&lt;/code&gt; is four half-floats per pixel. This is similar to what a &lt;a href=&quot;qimage&quot;&gt;QImage&lt;/a&gt; stores internally. However, Qt Quick 3D textures can have formats the data for which cannot be represented by a &lt;a href=&quot;qimage&quot;&gt;QImage&lt;/a&gt;. For example, floating point HDR textures, or compressed textures. Therefore the data for &lt;a href=&quot;qquick3dtexturedata&quot;&gt;QQuick3DTextureData&lt;/a&gt; is always provided as a raw sequence of bytes. This may seem familiar if one has worked with graphics APIs, such as OpenGL or Vulkan directly.</source>
          <target state="translated">对于纹理，需要提供的数据在结构上要简单得多：它是原始像素数据，每个像素的字节数有所不同，具体取决于纹理格式。例如， &lt;code&gt;RGBA&lt;/code&gt; 纹理期望每个像素四个字节，而 &lt;code&gt;RGBA16F&lt;/code&gt; 是每个像素四个半浮点。这类似于&lt;a href=&quot;qimage&quot;&gt;QImage在&lt;/a&gt;内部存储的内容。但是，Qt Quick 3D纹理可以具有无法用&lt;a href=&quot;qimage&quot;&gt;QImage&lt;/a&gt;表示的数据格式。例如，浮点HDR纹理或压缩纹理。因此，&lt;a href=&quot;qquick3dtexturedata&quot;&gt;QQuick3DTextureData&lt;/a&gt;的数据始终以原始字节序列的形式提供。如果人们直接使用图形API（例如OpenGL或Vulkan），这可能看起来很熟悉。</target>
        </trans-unit>
        <trans-unit id="221abf8769a746fc8a5d0c3cbda6329aff80f937" translate="yes" xml:space="preserve">
          <source>With that in place, we can run our example. To tell the application to use our new style, we pass &lt;code&gt;-style :/mystyle&lt;/code&gt; as an application argument, but there are &lt;a href=&quot;qtquickcontrols2-styles#using-styles-in-qt-quick-controls&quot;&gt;many ways&lt;/a&gt; to specify the style to use.</source>
          <target state="translated">有了这个，我们可以运行我们的示例。为了告诉应用程序使用我们的新样式，我们将 &lt;code&gt;-style :/mystyle&lt;/code&gt; 为应用程序参数，但是有&lt;a href=&quot;qtquickcontrols2-styles#using-styles-in-qt-quick-controls&quot;&gt;很多方法&lt;/a&gt;可以指定要使用的样式。</target>
        </trans-unit>
        <trans-unit id="20ed663ad7aa47554249fed415db68eab6505978" translate="yes" xml:space="preserve">
          <source>With that in place, we can run our example. To tell the application to use our new style, we pass &lt;code&gt;-style :/mystyle&lt;/code&gt; as an application argument, but there are &lt;a href=&quot;qtquickcontrols2-styles#using-styles-in-qt-quick-controls-2&quot;&gt;many ways&lt;/a&gt; to specify the style to use.</source>
          <target state="translated">有了这个，我们可以运行我们的示例。为了告诉应用程序使用我们的新样式，我们将 &lt;code&gt;-style :/mystyle&lt;/code&gt; 为应用程序参数，但是有&lt;a href=&quot;qtquickcontrols2-styles#using-styles-in-qt-quick-controls-2&quot;&gt;很多方法&lt;/a&gt;可以指定要使用的样式。</target>
        </trans-unit>
        <trans-unit id="f8ac63c9568d29ff6c69da12238521cc0fa8f7c1" translate="yes" xml:space="preserve">
          <source>With that in place, we can run our example. To tell the application to use our new style, we pass &lt;code&gt;-style MyStyle&lt;/code&gt; as an application argument, but there are &lt;a href=&quot;qtquickcontrols2-styles#using-styles-in-qt-quick-controls&quot;&gt;many ways&lt;/a&gt; to specify the style to use.</source>
          <target state="translated">有了这个，我们可以运行我们的示例。为了告诉应用程序使用我们的新样式，我们将 &lt;code&gt;-style MyStyle&lt;/code&gt; 传递为应用程序参数，但是有&lt;a href=&quot;qtquickcontrols2-styles#using-styles-in-qt-quick-controls&quot;&gt;很多方法&lt;/a&gt;可以指定要使用的样式。</target>
        </trans-unit>
        <trans-unit id="5fbed55f199978b95bb8be9cfaa32f1145085ad9" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;desktop&lt;/code&gt; option, Qt uses the OpenGL installed on Windows, requiring that the OpenGL in the target Windows machine is compatible with the application. The &lt;code&gt;-opengl&lt;/code&gt; option accepts two versions of OpenGL ES, &lt;code&gt;es2&lt;/code&gt; for OpenGL ES 2.0 or &lt;code&gt;es1&lt;/code&gt; for OpenGL ES Common Profile.</source>
          <target state="translated">使用 &lt;code&gt;desktop&lt;/code&gt; 选项时，Qt使用Windows上安装的OpenGL，要求目标Windows计算机中的OpenGL与该应用程序兼容。所述 &lt;code&gt;-opengl&lt;/code&gt; 选项接受的OpenGL ES，两个版本 &lt;code&gt;es2&lt;/code&gt; 的OpenGL ES 2.0或 &lt;code&gt;es1&lt;/code&gt; 的OpenGL ES常用配置。</target>
        </trans-unit>
        <trans-unit id="fe042905e84c3d5fdcfaa8645b39f1c47f0fbe13" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;dynamic&lt;/code&gt; option, Qt will try to use native OpenGL first. If that fails, it will fall back to ANGLE and finally to software rendering in case of ANGLE failing as well.</source>
          <target state="translated">使用 &lt;code&gt;dynamic&lt;/code&gt; 选项，Qt将首先尝试使用本机OpenGL。如果失败，它将退回到ANGLE，最后也退回到ANGLE失败的情况下进行软件渲染。</target>
        </trans-unit>
        <trans-unit id="9c564f0cac53211709d0377812b2fa7ac34743fe" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;evdev&lt;/code&gt; backend, to explicitly specify the input device to use, set the environment variable &lt;code&gt;QT_GAMEPAD_DEVICE&lt;/code&gt; to the desired /dev/input/event* node. This should not be needed normally, but can be useful in case multiple gamepads are connected and only one of them is interesting to the application.</source>
          <target state="translated">使用 &lt;code&gt;evdev&lt;/code&gt; 后端，要显式指定要使用的输入设备，请将环境变量 &lt;code&gt;QT_GAMEPAD_DEVICE&lt;/code&gt; 设置为所需的/ dev / input / event *节点。通常不应该使用此功能，但是在连接多个游戏手柄且应用程序只对其中一个感兴趣的情况下很有用。</target>
        </trans-unit>
        <trans-unit id="931e9e916ca3659002048961c97277bffef20b49" translate="yes" xml:space="preserve">
          <source>With the Desaturate effect, you can decrease the intensity of all colors in the scene.</source>
          <target state="translated">使用 &quot;去饱和 &quot;效果,您可以降低场景中所有颜色的强度。</target>
        </trans-unit>
        <trans-unit id="3c4f9b7a9a12ad19f18e25c2d90f8b83e221b8ab" translate="yes" xml:space="preserve">
          <source>With the Maps API we can associate a position with a map in various formats supplied by a backend. Then the Places API could be used to populate places on the Map or even specify the current position as a place of interest and associate it with an icon, contact details and other information.</source>
          <target state="translated">通过Maps API,我们可以将一个位置与后端提供的各种格式的地图关联起来,然后Places API可以用来填充地图上的地方,甚至指定当前位置为一个感兴趣的地方,并将其与图标、联系信息和其他信息关联起来。然后,Places API可以用来填充地图上的地方,甚至可以将当前位置指定为感兴趣的地方,并将其与图标、联系信息和其他信息相关联。</target>
        </trans-unit>
        <trans-unit id="4d3dd1511bb2506b5f01cd151fa5a1a2f06d1da5" translate="yes" xml:space="preserve">
          <source>With the Qt XML classes elements and attributes can be accessed in two ways: either by referring to their qualified names consisting of the namespace prefix and the &quot;real&quot; name (or</source>
          <target state="translated">在Qt XML类中,元素和属性可以通过两种方式被访问:通过引用它们由命名空间前缀和 &quot;真实 &quot;名称组成的限定名称(或者是</target>
        </trans-unit>
        <trans-unit id="905157790ef1d40d0ff66af116456c111f9c52e1" translate="yes" xml:space="preserve">
          <source>With the Raspberry Pi 4 example, we expect that EGL, OpenGL ES and &lt;code&gt;EGLFS GBM&lt;/code&gt; are all reported as &lt;code&gt;yes&lt;/code&gt;, otherwise the EGLFS platform plugin and its &lt;b&gt;eglfs_kms&lt;/b&gt; backend will not be functional on the device. For getting function mouse, keyboard, and touch input, either &lt;code&gt;evdev&lt;/code&gt; or &lt;code&gt;libinput&lt;/code&gt; must be enabled.</source>
          <target state="translated">对于Raspberry Pi 4示例，我们希望将EGL，Op​​enGL ES和 &lt;code&gt;EGLFS GBM&lt;/code&gt; 都报告为 &lt;code&gt;yes&lt;/code&gt; ，否则EGLFS平台插件及其&lt;b&gt;eglfs_kms&lt;/b&gt;后端将无法在设备上运行。为了获得功能的鼠标，键盘和触摸输入，必须启用 &lt;code&gt;evdev&lt;/code&gt; 或 &lt;code&gt;libinput&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b02e908cf412444190b61dcfbc88106e96789821" translate="yes" xml:space="preserve">
          <source>With the Sensor Gestures classes, you are able to easily utilize device gesturing using sensors, such as the accelerometer and proximity.</source>
          <target state="translated">通过传感器手势类,您能够轻松地使用传感器(如加速度计和近距离)来利用设备手势。</target>
        </trans-unit>
        <trans-unit id="869c294776bf9a426f97c9fa13c232b465ef28f4" translate="yes" xml:space="preserve">
          <source>With the above definitions, you can use a drop-in replacement for moc if one is available. The command is executed on all arguments given to the &lt;code&gt;NEW_HEADERS&lt;/code&gt; variable (from the &lt;code&gt;input&lt;/code&gt; member), and the result is written to the file defined by the &lt;code&gt;output&lt;/code&gt; member. This file is added to the other source files in the project. Additionally, qmake will execute &lt;code&gt;depend_command&lt;/code&gt; to generate dependency information, and place this information in the project as well.</source>
          <target state="translated">根据上述定义，您可以使用即插即用的替代品来替换moc（如果有）。该命令在赋予 &lt;code&gt;NEW_HEADERS&lt;/code&gt; 变量的所有参数上执行（来自 &lt;code&gt;input&lt;/code&gt; 成员），并将结果写入 &lt;code&gt;output&lt;/code&gt; 成员定义的文件中。该文件被添加到项目中的其他源文件中。另外，qmake将执行 &lt;code&gt;depend_command&lt;/code&gt; 来生成依赖项信息，并将该信息也放置在项目中。</target>
        </trans-unit>
        <trans-unit id="0c9d9db8c01bcb8d9c2e413e21461cd2f445de92" translate="yes" xml:space="preserve">
          <source>With the above example, the &lt;a href=&quot;qml-qtquick3d-custommaterial#shadingMode-prop&quot;&gt;unshaded&lt;/a&gt; vertex and fragment shaders snippets could look like the following. Note how the shaders do not, and must not, declare uniforms or vertex inputs as that is taken care of by Qt when assembling the final shader code.</source>
          <target state="translated">与上面的例子中，&lt;a href=&quot;qml-qtquick3d-custommaterial#shadingMode-prop&quot;&gt;无阴影的&lt;/a&gt;顶点和片段着色器代码段可能看起来像如下。请注意，着色器在组装最终着色器代码时如何（也一定不能）声明统一或顶点输入，这是Qt会注意的。</target>
        </trans-unit>
        <trans-unit id="92b9763b1026f4efa2f3149590e32e26be57dc85" translate="yes" xml:space="preserve">
          <source>With the above shader program active, we can draw a green triangle as follows:</source>
          <target state="translated">在上述着色器程序激活的情况下,我们可以绘制一个绿色三角形,如下图。</target>
        </trans-unit>
        <trans-unit id="8416fc42b96313b2b8aac317a84d59f62596f044" translate="yes" xml:space="preserve">
          <source>With the addition of the &lt;a href=&quot;bearer-management#&quot;&gt;Bearer Management&lt;/a&gt; API to Qt 4.7 &lt;a href=&quot;qnetworkaccessmanager&quot;&gt;QNetworkAccessManager&lt;/a&gt; gained the ability to manage network connections. &lt;a href=&quot;qnetworkaccessmanager&quot;&gt;QNetworkAccessManager&lt;/a&gt; can start the network interface if the device is offline and terminates the interface if the current process is the last one to use the uplink. Note that some platforms utilize grace periods from when the last application stops using a uplink until the system actually terminates the connectivity link. Roaming is equally transparent. Any queued/pending network requests are automatically transferred to the new access point.</source>
          <target state="translated">通过在Qt 4.7中添加&lt;a href=&quot;bearer-management#&quot;&gt;Bearer Management&lt;/a&gt; API，&lt;a href=&quot;qnetworkaccessmanager&quot;&gt;QNetworkAccessManager&lt;/a&gt;获得了管理网络连接的功能。如果设备离线，则&lt;a href=&quot;qnetworkaccessmanager&quot;&gt;QNetworkAccessManager&lt;/a&gt;可以启动网络接口，如果当前进程是最后一个使用上行链路的进程，则QNetworkAccessManager可以终止该接口。请注意，从最后一个应用程序停止使用上行链路到系统实际终止连接链路，某些平台会使用宽限期。漫游同样透明。任何排队/待处理的网络请求都将自动转移到新的接入点。</target>
        </trans-unit>
        <trans-unit id="00822784ce3826dcb93570b51ca52a383b8f6c0b" translate="yes" xml:space="preserve">
          <source>With the advent of the new HKSCS-2001 standard, James Su &amp;lt;suzhe@turbolinux.com.cn&amp;gt; &amp;lt;suzhe@gnuchina.org&amp;gt; generated the Big5-HKSCS&amp;lt;-&amp;gt;Unicode tables with a very space-efficient algorithm. He generously donated his code to glibc in May 2002. Subsequently, James has generously allowed Anthony Fok to adapt the code for Qt-3.0.5.</source>
          <target state="translated">随着新的HKSCS-2001标准的到来，James Su &amp;lt;suzhe@turbolinux.com.cn&amp;gt; &amp;lt;suzhe@gnuchina.org&amp;gt;用非常节省空间的算法生成了Big5-HKSCS &amp;lt;-&amp;gt; Unicode表。他在2002年5月慷慨地将自己的代码捐赠给glibc。随后，詹姆斯慷慨地允许Anthony Fok将代码修改为Qt-3.0.5。</target>
        </trans-unit>
        <trans-unit id="34745d4b077570a08254cc752de60ff0f7330755" translate="yes" xml:space="preserve">
          <source>With the code above, the focus jumps to the Name field when the user presses Alt+N, and to the Phone field when the user presses Alt+P.</source>
          <target state="translated">通过上面的代码,当用户按Alt+N时,焦点会跳到姓名字段,当用户按Alt+P时,焦点会跳到电话字段。</target>
        </trans-unit>
        <trans-unit id="80e5712c1c33c1ece3ac23542a1c3eba7df1dfcc" translate="yes" xml:space="preserve">
          <source>With the default implementation, each QSGTexture is backed by a QRhiTexture, which in turn contains a native texture object, such as an OpenGL texture or a Vulkan image.</source>
          <target state="translated">在默认的实现中,每个QSGTexture都由QRhiTexture支持,而QRhiTexture又包含一个本地纹理对象,如OpenGL纹理或Vulkan图像。</target>
        </trans-unit>
        <trans-unit id="81038844e7a8b209f37aea7424f73ec83d1621b0" translate="yes" xml:space="preserve">
          <source>With the default options, the resulting &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; can be passed back to a &lt;a href=&quot;qurl&quot;&gt;QUrl&lt;/a&gt; later on, but any password that was present initially will be lost.</source>
          <target state="translated">使用默认选项，生成的&lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;可以稍后传递回&lt;a href=&quot;qurl&quot;&gt;QUrl&lt;/a&gt;，但是最初存在的任何密码都会丢失。</target>
        </trans-unit>
        <trans-unit id="b7b06f1a1c686c3d07d35c0610bcd1bd5cb38bd9" translate="yes" xml:space="preserve">
          <source>With the exception of extrusion and data driven style properties, every property described at the &lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/style-spec/&quot;&gt;Mapbox Style Specification&lt;/a&gt; can be changed at runtime.</source>
          <target state="translated">除了拉伸和数据驱动的样式属性外，可以在运行时更改&lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/style-spec/&quot;&gt;Mapbox样式规范中&lt;/a&gt;描述的每个属性。</target>
        </trans-unit>
        <trans-unit id="db713493bde5a89b6b2702af0419c2a819c6e1f0" translate="yes" xml:space="preserve">
          <source>With the features covered so far a wide range of possibilities are open for creating materials that shade the meshes in visually impressive ways. To finish the basic tour, let's look at an example that applies height and normal maps to a plane mesh. (a dedicated &lt;code&gt;.mesh&lt;/code&gt; file is used here because the builtin &lt;code&gt;#Rectangle&lt;/code&gt; does not have enough subdivisions) For better lighting results, we will use image based lighting with a 360 degree HDR image. The image is also set as the skybox to make it more clear what is happening.</source>
          <target state="translated">到目前为止，功能已经涵盖了广泛的可能性，可用于创建以视觉上令人印象深刻的方式对网格进行着色的材料。为了完成基本的导览，让我们看一个将高度和法线贴图应用到平面网格的示例。（此处使用专用的 &lt;code&gt;.mesh&lt;/code&gt; 文件，因为内置的 &lt;code&gt;#Rectangle&lt;/code&gt; 没有足够的细分）为了获得更好的照明效果，我们将使用具有360度HDR图像的基于图像的照明。该图像还被设置为&amp;ldquo;天空盒&amp;rdquo;，以使其更清楚地显示正在发生的事情。</target>
        </trans-unit>
        <trans-unit id="4e8eb7da73c7c3aa1b5265e6b3dba6817c1a8a76" translate="yes" xml:space="preserve">
          <source>With the general QDoc configuration variables, you can define where QDoc will find the various source files it needs to generate the documentation, as well as the directory to put the generated documentation. You can also do some minor manipulation of QDoc itself, controlling its output and processing behavior.</source>
          <target state="translated">通过一般的QDoc配置变量,你可以定义QDoc在哪里找到生成文档所需要的各种源文件,以及把生成的文档放在什么目录下。你还可以对QDoc本身进行一些小的操作,控制它的输出和处理行为。</target>
        </trans-unit>
        <trans-unit id="d3207ec48047d1039819c90608ba318a3c17ce52" translate="yes" xml:space="preserve">
          <source>With the introduction of Qt RHI as the rendering foundation in Qt, most classes prefixed by &lt;code&gt;QOpenGL&lt;/code&gt; have been moved into the &lt;a href=&quot;https://doc.qt.io/qt-6.0/qtopengl-index.html&quot;&gt;Qt OpenGL&lt;/a&gt; module.</source>
          <target state="translated">通过引入Qt RHI作为Qt的渲染基础，大多数以 &lt;code&gt;QOpenGL&lt;/code&gt; 开头的类都已移至&lt;a href=&quot;https://doc.qt.io/qt-6.0/qtopengl-index.html&quot;&gt;Qt OpenGL&lt;/a&gt;模块中。</target>
        </trans-unit>
        <trans-unit id="0f22d6143da7faf256f2f1ef0a1fc4b305512bb5" translate="yes" xml:space="preserve">
          <source>With the legacy, direct OpenGL based renderer, the following states are set on the render thread's context before this function is called:</source>
          <target state="translated">对于传统的、直接基于OpenGL的渲染器,在调用该函数之前,会在渲染线程的上下文中设置以下状态。</target>
        </trans-unit>
        <trans-unit id="4630d50555ff84b84eb4d30fe9f9b8852a94a553" translate="yes" xml:space="preserve">
          <source>With the menu bar and the toolbars in place, it's time to populate them with actions. New actions for both menus and toolbars are created in the action editor window, simplifying the creation and management of actions.</source>
          <target state="translated">有了菜单栏和工具栏之后,就可以用动作来填充它们了。菜单和工具栏的新动作都是在动作编辑器窗口中创建的,简化了动作的创建和管理。</target>
        </trans-unit>
        <trans-unit id="69d6aed81f0026ce55a79e748bd89bed87b83e08" translate="yes" xml:space="preserve">
          <source>With the mesh object selected, triangulate the mesh by pressing</source>
          <target state="translated">选定网格对象后,按 &quot;三角 &quot;键对网格进行三角测量。</target>
        </trans-unit>
        <trans-unit id="95eb9381e6072798a40389b86655d9fd401f0ce9" translate="yes" xml:space="preserve">
          <source>With the release of Qt 5.0, Qt no longer contains its own window system implementation: QWS is no longer a supported platform. For single-process use cases, the &lt;a href=&quot;qpa&quot;&gt;Qt Platform Abstraction&lt;/a&gt; is a superior solution.</source>
          <target state="translated">随着Qt 5.0的发布，Qt不再包含其自己的窗口系统实现：QWS不再是受支持的平台。对于单流程用例，&lt;a href=&quot;qpa&quot;&gt;Qt Platform Abstraction&lt;/a&gt;是一种出色的解决方案。</target>
        </trans-unit>
        <trans-unit id="8ba8beaa5ccb89224ebb1e5279efd4bf120446ce" translate="yes" xml:space="preserve">
          <source>With the release of Qt 5.0, Qt no longer contains its own window system implementation: QWS is no longer a supported platform. For single-process use cases, the &lt;a href=&quot;qpa#&quot;&gt;Qt Platform Abstraction&lt;/a&gt; is a superior solution.</source>
          <target state="translated">随着Qt 5.0的发布，Qt不再包含其自己的窗口系统实现：QWS不再是受支持的平台。对于单进程用例，&lt;a href=&quot;qpa#&quot;&gt;Qt Platform Abstraction&lt;/a&gt;是一种出色的解决方案。</target>
        </trans-unit>
        <trans-unit id="226eafcb0be655108e453892716e9262e96c694f" translate="yes" xml:space="preserve">
          <source>With the string-based syntax, parameter types are explicitly specified. As a result, the desired instance of an overloaded signal or slot is unambiguous.</source>
          <target state="translated">使用基于字符串的语法,参数类型是明确指定的。因此,所需的过载信号或槽的实例是毫不含糊的。</target>
        </trans-unit>
        <trans-unit id="df559dccd3615f39a3779064c769730d95d87094" translate="yes" xml:space="preserve">
          <source>With this addition to the &lt;code&gt;CONFIG&lt;/code&gt; variable, qmake will search the locations listed above for the &lt;code&gt;myfeatures.prf&lt;/code&gt; file after it has finished parsing your project file. On Unix systems, it will look for the following file:</source>
          <target state="translated">在 &lt;code&gt;CONFIG&lt;/code&gt; 变量中添加了此功能之后，qmake 在完成对项目文件的解析后，将在上面列出的位置搜索 &lt;code&gt;myfeatures.prf&lt;/code&gt; 文件。在Unix系统上，它将查找以下文件：</target>
        </trans-unit>
        <trans-unit id="6ff9e75675058b679f2eb7be7099aa17fe657039" translate="yes" xml:space="preserve">
          <source>With this approach, references to objects are &quot;pulled&quot; from QML. The problem with this is that the C++ logic layer depends on the QML presentation layer. If we were to refactor the QML in such a way that the &lt;code&gt;objectName&lt;/code&gt; changes, or some other change breaks the ability for the C++ to find the QML object, our workflow becomes much more complicated and tedious.</source>
          <target state="translated">通过这种方法，可以从QML中&amp;ldquo;提取&amp;rdquo;对对象的引用。问题是C ++逻辑层取决于QML表示层。如果我们以这样的方式重构QML，即 &lt;code&gt;objectName&lt;/code&gt; 发生更改，或者其他更改破坏了C ++查找QML对象的能力，那么我们的工作流程将变得更加复杂且乏味。</target>
        </trans-unit>
        <trans-unit id="9f2ab919194cff8766a6dcde52f34360c2fe234f" translate="yes" xml:space="preserve">
          <source>With this approach, the C++ remains unchanged in the event that the QML needs to be refactored in the future.</source>
          <target state="translated">采用这种方法,在将来需要重构QML的情况下,C++保持不变。</target>
        </trans-unit>
        <trans-unit id="a64fe6916545bea49b7932f628ee891ea8dbc494" translate="yes" xml:space="preserve">
          <source>With this code, every time a Button instance with a customized background is created, both backgrounds will be created, resulting in sub-optimal creation performance.</source>
          <target state="translated">通过这段代码,每次创建具有自定义背景的Button实例时,都会创建两个背景,导致创建性能不理想。</target>
        </trans-unit>
        <trans-unit id="1d72e55e5902cdbd34e9a240ea81a0531c6f03eb" translate="yes" xml:space="preserve">
          <source>With this in mind, a good way to prepare for a migration to Qt Quick Controls 2 is to place each control that you have a custom style for in its own QML file. For example, the Qt Quick Controls 1 button above could be moved to a file named &lt;code&gt;Button.qml&lt;/code&gt; in a directory named &lt;code&gt;controls&lt;/code&gt;, and used in the following manner:</source>
          <target state="translated">考虑到这一点，准备迁移到Qt Quick Controls 2的一个好方法是将您具有自定义样式的每个控件放在其自己的QML文件中。例如，可以将上面的Qt Quick Controls 1按钮移动到名为 &lt;code&gt;controls&lt;/code&gt; 的目录中名为 &lt;code&gt;Button.qml&lt;/code&gt; 的文件中，并按以下方式使用：</target>
        </trans-unit>
        <trans-unit id="8e40643349bff07a93acc7de2d9ba6544d9bed5c" translate="yes" xml:space="preserve">
          <source>With this in place, you can now instantiate nodes using this new custom protocol:</source>
          <target state="translated">有了这些,你现在可以使用这个新的自定义协议来实例化节点。</target>
        </trans-unit>
        <trans-unit id="b44a27f1ba83491906b0359bf1a34061110759e5" translate="yes" xml:space="preserve">
          <source>With this in place, your application's UI should scale depending on the display resolution on offer.</source>
          <target state="translated">有了这一点,你的应用程序的UI应该根据所提供的显示分辨率进行调整。</target>
        </trans-unit>
        <trans-unit id="1aaeb06eee8c7d2b3530ca50f98a4f7d9f67617d" translate="yes" xml:space="preserve">
          <source>With this method the web channel can be accessed by web page content. If the content is not under your control and might be hostile, this could be a security issue and you should consider installing it in a private JavaScript world.</source>
          <target state="translated">通过这种方法可以通过网页内容访问网络频道。如果内容不在你的控制之下,可能是敌对的,这可能是一个安全问题,你应该考虑把它安装在一个私人的JavaScript世界里。</target>
        </trans-unit>
        <trans-unit id="a71904030ea175c80ffb79064c7c063e94b75ebe" translate="yes" xml:space="preserve">
          <source>With this syntax, the function returns a &lt;a href=&quot;qdebug&quot;&gt;QDebug&lt;/a&gt; object that is configured to use the &lt;a href=&quot;qtglobal#QtMsgType-enum&quot;&gt;QtDebugMsg&lt;/a&gt; message type. It automatically puts a single space between each item, and outputs a newline at the end. It supports many C++ and Qt types.</source>
          <target state="translated">使用此语法，该函数返回一个&lt;a href=&quot;qdebug&quot;&gt;QDebug&lt;/a&gt;对象，该对象配置为使用&lt;a href=&quot;qtglobal#QtMsgType-enum&quot;&gt;QtDebugMsg&lt;/a&gt;消息类型。它会自动在每个项目之间放置一个空格，并在末尾输出换行符。它支持许多C ++和Qt类型。</target>
        </trans-unit>
        <trans-unit id="09e6570fb10b890d1ae82341959ca9e59abf00b3" translate="yes" xml:space="preserve">
          <source>With this syntax, the function returns a &lt;a href=&quot;qdebug&quot;&gt;QDebug&lt;/a&gt; object that is configured to use the &lt;a href=&quot;qtglobal#QtMsgType-enum&quot;&gt;QtInfoMsg&lt;/a&gt; message type. It automatically puts a single space between each item, and outputs a newline at the end. It supports many C++ and Qt types.</source>
          <target state="translated">使用此语法，该函数返回一个&lt;a href=&quot;qdebug&quot;&gt;QDebug&lt;/a&gt;对象，该对象配置为使用&lt;a href=&quot;qtglobal#QtMsgType-enum&quot;&gt;QtInfoMsg&lt;/a&gt;消息类型。它会自动在每个项目之间放置一个空格，并在末尾输出换行符。它支持许多C ++和Qt类型。</target>
        </trans-unit>
        <trans-unit id="ab50a0c6987873a38799562140997c8acee97a9b" translate="yes" xml:space="preserve">
          <source>With those files available, you would select a different file on the android platform, but only if the locale was en_GB.</source>
          <target state="translated">有了这些文件,你就会在android平台上选择不同的文件,但前提是locale是en_GB。</target>
        </trans-unit>
        <trans-unit id="866895372c80b4bdd3e62c8aef9547035f4c98ee" translate="yes" xml:space="preserve">
          <source>Within a QDoc comment, &lt;code&gt;//!&lt;/code&gt; is used as a single-line documentation comment; the comment itself and anything after it, until a newline, is omitted from the generated output.</source>
          <target state="translated">在QDoc注释中， &lt;code&gt;//!&lt;/code&gt; 用作单行文档注释；注释本身及其后的所有内容，直到换行符都将从生成的输出中省略。</target>
        </trans-unit>
        <trans-unit id="655a9796e8fb878a317a5f67cf23c2b1dbd01fee" translate="yes" xml:space="preserve">
          <source>Within a left-to-right text block, decrease cursor position when pressing left arrow key, increase cursor position when pressing the right arrow key. If the text block is right-to-left, the opposite behavior applies.</source>
          <target state="translated">在从左到右的文本块内,按左箭头键时减少光标位置,按右箭头键时增加光标位置。如果文本块是从右到左,则适用于相反的行为。</target>
        </trans-unit>
        <trans-unit id="2be4fc252023b47779487c38f81570875da113b8" translate="yes" xml:space="preserve">
          <source>Within a mouse-driven interface, this signal is emitted when a mouse pointer passes over a link, corresponding to the &lt;code&gt;mouseover&lt;/code&gt; DOM event. This event may also occur in touch interfaces for &lt;code&gt;mouseover&lt;/code&gt; events that are not cancelled with &lt;code&gt;preventDefault()&lt;/code&gt;.</source>
          <target state="translated">在鼠标驱动的界面内，当鼠标指针经过链接时（与 &lt;code&gt;mouseover&lt;/code&gt; DOM事件相对应），将发出此信号。对于未使用 &lt;code&gt;preventDefault()&lt;/code&gt; 取消的 &lt;code&gt;mouseover&lt;/code&gt; 事件，此事件也可能在触摸界面中发生。</target>
        </trans-unit>
        <trans-unit id="7475ef05b2ebf0cf6f98c2374da72ca3b31d77a3" translate="yes" xml:space="preserve">
          <source>Within a test program, test functions should be independent of each other and they should not rely upon previous test functions having been run. You can check this by running the test function on its own with &lt;code&gt;tst_foo testname&lt;/code&gt;.</source>
          <target state="translated">在测试程序中，测试功能应彼此独立，并且不应依赖于先前已运行的测试功能。您可以通过使用 &lt;code&gt;tst_foo testname&lt;/code&gt; 单独运行测试函数来进行检查。</target>
        </trans-unit>
        <trans-unit id="6b45d63a358e475e448bdb8871a6ca660c14056b" translate="yes" xml:space="preserve">
          <source>Within each area, different</source>
          <target state="translated">在每个地区,不同的</target>
        </trans-unit>
        <trans-unit id="e4059b684739705541b9624361d42e0f33def68e" translate="yes" xml:space="preserve">
          <source>Within each focus scope one object may have &lt;code&gt;Item::focus&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. If more than one &lt;a href=&quot;qml-qtquick-item&quot;&gt;Item&lt;/a&gt; has the &lt;code&gt;focus&lt;/code&gt; property set, the last type to set the &lt;code&gt;focus&lt;/code&gt; will have the focus and the others are unset, similar to when there are no focus scopes.</source>
          <target state="translated">在每个焦点范围内，一个对象可以将 &lt;code&gt;Item::focus&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; 。如果不止一个&lt;a href=&quot;qml-qtquick-item&quot;&gt;项目&lt;/a&gt;设置了 &lt;code&gt;focus&lt;/code&gt; 属性，则最后一个设置 &lt;code&gt;focus&lt;/code&gt; 类型将具有焦点，而其他类型则未设置，这与没有焦点作用域时类似。</target>
        </trans-unit>
        <trans-unit id="76b9b2e562bfe536134a9bb89d912ba8baa46477" translate="yes" xml:space="preserve">
          <source>Within the</source>
          <target state="translated">内</target>
        </trans-unit>
        <trans-unit id="cf2f4d425769454a3db62a8d6ae5b0475b3cf387" translate="yes" xml:space="preserve">
          <source>Within the FrameGraph tree, multiple &lt;a href=&quot;qml-qt3d-render-layerfilter&quot;&gt;LayerFilter&lt;/a&gt; nodes can be nested within a branch going from root to a leaf. In that case the filtering will first operate on all entities of the scene using the filtering method specified by the first declared &lt;a href=&quot;qml-qt3d-render-layerfilter&quot;&gt;LayerFilter&lt;/a&gt;. Then the filtered subset of entities will be filtered again based on the filtering method set on the second &lt;a href=&quot;qml-qt3d-render-layerfilter&quot;&gt;LayerFilter&lt;/a&gt; declared. This is then repeated until all &lt;a href=&quot;qml-qt3d-render-layerfilter&quot;&gt;LayerFilter&lt;/a&gt; nodes of the branch have been consumed.</source>
          <target state="translated">在FrameGraph树中，可以将多个&lt;a href=&quot;qml-qt3d-render-layerfilter&quot;&gt;LayerFilter&lt;/a&gt;节点嵌套在从根到叶的分支中。在那种情况下，过滤将首先使用第一个声明的&lt;a href=&quot;qml-qt3d-render-layerfilter&quot;&gt;LayerFilter&lt;/a&gt;指定的过滤方法对场景的所有实体进行操作。然后，将根据声明的第二个&lt;a href=&quot;qml-qt3d-render-layerfilter&quot;&gt;LayerFilter&lt;/a&gt;上设置的过滤方法再次过滤实体的过滤子集。然后重复此操作，直到分支的所有&lt;a href=&quot;qml-qt3d-render-layerfilter&quot;&gt;LayerFilter&lt;/a&gt;节点都被消耗为止。</target>
        </trans-unit>
        <trans-unit id="6378d4ed60ae4d1598adb9c8f65226d0f664a289" translate="yes" xml:space="preserve">
          <source>Within the FrameGraph tree, multiple &lt;a href=&quot;qt3drender-qlayerfilter&quot;&gt;QLayerFilter&lt;/a&gt; nodes can be nested within a branch going from root to a leaf. In that case the filtering will first operate on all entities of the scene using the filtering method specified by the first declared &lt;a href=&quot;qt3drender-qlayerfilter&quot;&gt;QLayerFilter&lt;/a&gt;. Then the filtered subset of entities will be filtered again based on the filtering method set on the second &lt;a href=&quot;qt3drender-qlayerfilter&quot;&gt;QLayerFilter&lt;/a&gt; declared. This is then repeated until all &lt;a href=&quot;qt3drender-qlayerfilter&quot;&gt;QLayerFilter&lt;/a&gt; nodes of the branch have been consumed.</source>
          <target state="translated">在FrameGraph树中，可以将多个&lt;a href=&quot;qt3drender-qlayerfilter&quot;&gt;QLayerFilter&lt;/a&gt;节点嵌套在从根到叶的分支中。在那种情况下，过滤将首先使用第一个声明的&lt;a href=&quot;qt3drender-qlayerfilter&quot;&gt;QLayerFilter&lt;/a&gt;指定的过滤方法对场景的所有实体进行操作。然后，将根据在声明的第二个&lt;a href=&quot;qt3drender-qlayerfilter&quot;&gt;QLayerFilter&lt;/a&gt;上设置的过滤方法再次过滤已过滤的实体子集。然后重复此操作，直到分支的所有&lt;a href=&quot;qt3drender-qlayerfilter&quot;&gt;QLayerFilter&lt;/a&gt;节点都已耗尽。</target>
        </trans-unit>
        <trans-unit id="1655c0eb21a2e07ff5223d5d7a39472255fe5562" translate="yes" xml:space="preserve">
          <source>Within the implementation file the &lt;a href=&quot;qqmlndefrecord#Q_DECLARE_NDEFRECORD&quot;&gt;Q_DECLARE_NDEFRECORD&lt;/a&gt;() macro is expanded:</source>
          <target state="translated">在实现文件中，将扩展&lt;a href=&quot;qqmlndefrecord#Q_DECLARE_NDEFRECORD&quot;&gt;Q_DECLARE_NDEFRECORD&lt;/a&gt;（）宏：</target>
        </trans-unit>
        <trans-unit id="8d3f618935511b0a4e3b6291004128f0039ca294" translate="yes" xml:space="preserve">
          <source>Within the resource browser, you can open existing resource files or create new ones. Click the &lt;b&gt;Edit Resources&lt;/b&gt; button</source>
          <target state="translated">在资源浏览器中，您可以打开现有资源文件或创建新的资源文件。单击&lt;b&gt;编辑资源&lt;/b&gt;按钮</target>
        </trans-unit>
        <trans-unit id="7c0ff9bb6c4a4970594fa0fdf0f22196036ebd45" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;qt.conf&lt;/code&gt;, the Qt libraries will use the hard-coded paths to look for plugins, translations, and so on. These paths may not exist on the target system, or they may not be accessible. Because of this, you may need &lt;code&gt;qt.conf&lt;/code&gt; to make the Qt libraries look elsewhere.</source>
          <target state="translated">如果没有 &lt;code&gt;qt.conf&lt;/code&gt; ，则Qt库将使用硬编码的路径来查找插件，翻译等。这些路径可能在目标系统上不存在，或者可能不可访问。因此，您可能需要 &lt;code&gt;qt.conf&lt;/code&gt; 才能使Qt库在其他地方显示。</target>
        </trans-unit>
        <trans-unit id="1ee6616a467cabc3f56d67dc3644d1c21d753d74" translate="yes" xml:space="preserve">
          <source>Without Frameworks:</source>
          <target state="translated">没有框架。</target>
        </trans-unit>
        <trans-unit id="16a9269ca9ad5aa0bde29b428a5e12b622744b92" translate="yes" xml:space="preserve">
          <source>Without Qt XML Patterns, there is no simple way to solve this kind of problem. You might do it by writing a C++ program to traverse the file system, sniff out all the XML files, and submit each one to an XML parser to test that it contains valid XML. The C++ code required to write that program will probably be more complex than the C++ code required to subclass &lt;a href=&quot;qabstractxmlnodemodel&quot;&gt;QAbstractXmlNodeModel&lt;/a&gt;, but even if the two are comparable, your custom C++ program can be used only for that one task, while your custom XML node model can be used by any &lt;a href=&quot;xmlprocessing&quot;&gt;XQuery&lt;/a&gt; that must navigate the file system.</source>
          <target state="translated">没有Qt XML模式，就没有解决这种问题的简单方法。您可以通过编写一个C ++程序来遍历文件系统，嗅探所有XML文件并将每个XML文件提交给XML解析器以测试它是否包含有效XML来实现。编写该程序所需的C ++代码可能比为&lt;a href=&quot;qabstractxmlnodemodel&quot;&gt;QAbstractXmlNodeModel&lt;/a&gt;子类化所需的C ++代码更复杂，但是即使两者相当，您的自定义C ++程序也只能用于一项任务，而您的自定义XML节点模型可以由必须浏览文件系统的任何&lt;a href=&quot;xmlprocessing&quot;&gt;XQuery&lt;/a&gt;使用。</target>
        </trans-unit>
        <trans-unit id="906a78d63fe98ad9fae7ceb3b7edb990374fbacd" translate="yes" xml:space="preserve">
          <source>Without Qt XML Patterns, there is no simple way to solve this kind of problem. You might do it by writing a C++ program to traverse the file system, sniff out all the XML files, and submit each one to an XML parser to test that it contains valid XML. The C++ code required to write that program will probably be more complex than the C++ code required to subclass &lt;a href=&quot;qabstractxmlnodemodel&quot;&gt;QAbstractXmlNodeModel&lt;/a&gt;, but even if the two are comparable, your custom C++ program can be used only for that one task, while your custom XML node model can be used by any XQuery that must navigate the file system.</source>
          <target state="translated">没有Qt XML模式，就没有简单的方法来解决此类问题。您可以通过编写一个C ++程序来遍历文件系统，嗅探所有XML文件并将每个XML文件提交给XML解析器以测试它是否包含有效XML来实现。编写该程序所需的C ++代码可能比为&lt;a href=&quot;qabstractxmlnodemodel&quot;&gt;QAbstractXmlNodeModel&lt;/a&gt;子类化所需的C ++代码更复杂，但是即使两者相当，您的自定义C ++程序也只能用于一项任务，而您的自定义XML节点模型可以由必须浏览文件系统的任何XQuery使用。</target>
        </trans-unit>
        <trans-unit id="fe06ce141a1168cf6c190a0812c8b6234dbf41b7" translate="yes" xml:space="preserve">
          <source>Without a</source>
          <target state="translated">没有</target>
        </trans-unit>
        <trans-unit id="e5fdab5262fd255a415115b28b6a0fa6a113884d" translate="yes" xml:space="preserve">
          <source>Without a suffix, Android 5 (API 21) will load the system libraries</source>
          <target state="translated">如果没有后缀,Android 5(API 21)将加载系统库。</target>
        </trans-unit>
        <trans-unit id="93ba514d88ce37a6cb5e299bbd770c963f3f1977" translate="yes" xml:space="preserve">
          <source>Without any caching, performance may drop significantly.</source>
          <target state="translated">如果没有任何缓存,性能可能会显著下降。</target>
        </trans-unit>
        <trans-unit id="4a883ba767e83883b1cf0350c4946504e817ac21" translate="yes" xml:space="preserve">
          <source>Without any lights and disabling light-related shading for the two meshes, we get the following:</source>
          <target state="translated">在没有任何灯光的情况下,对两个网格禁用与光相关的阴影,我们得到以下结果。</target>
        </trans-unit>
        <trans-unit id="43f455544383fd6a5e1f4485e57cf34557ce7ae9" translate="yes" xml:space="preserve">
          <source>Without further delay, we present the widget walkthrough; each widget has its own sub-section.</source>
          <target state="translated">不再耽搁,我们介绍一下小部件的演练;每个小部件都有自己的子部分。</target>
        </trans-unit>
        <trans-unit id="50655f37469a7bfe19c443ecfe5a49e929d9b820" translate="yes" xml:space="preserve">
          <source>Without the call to &lt;code&gt;isPolishScheduled()&lt;/code&gt; above, the call to &lt;code&gt;waitForItemPolished()&lt;/code&gt; might see that no polish was scheduled and therefore pass instantly, assuming that the item had already been polished. This function makes it obvious why an item wasn't polished and allows tests to fail early under such circumstances.</source>
          <target state="translated">如果没有上述对 &lt;code&gt;isPolishScheduled()&lt;/code&gt; 的调用，则对 &lt;code&gt;waitForItemPolished()&lt;/code&gt; 的调用可能会看到未计划任何抛光，因此假设该项目已被抛光，则可以立即通过。此功能可以清楚地说明为什么未抛光产品，并在这种情况下使测试尽早失败。</target>
        </trans-unit>
        <trans-unit id="f06ecaacf74a50b9553cf59bf5d4e2830ceb1666" translate="yes" xml:space="preserve">
          <source>Without the call to &lt;code&gt;qIsPolishScheduled()&lt;/code&gt; above, the call to &lt;code&gt;qWaitForItemPolished()&lt;/code&gt; might see that no polish was scheduled and therefore pass instantly, assuming that the item had already been polished. This function makes it obvious why an item wasn't polished and allows tests to fail early under such circumstances.</source>
          <target state="translated">如果没有上述对 &lt;code&gt;qIsPolishScheduled()&lt;/code&gt; 的调用，则对 &lt;code&gt;qWaitForItemPolished()&lt;/code&gt; 的调用可能会看到未计划任何抛光，因此假设该项目已被抛光，则可以立即通过。此功能可以清楚地说明为什么未抛光产品，并在这种情况下使测试尽早失败。</target>
        </trans-unit>
        <trans-unit id="0824512bccf109ba84fe616af5c0dcdf35ac9ca8" translate="yes" xml:space="preserve">
          <source>Without the guidance in the</source>
          <target state="translated">如果没有《公约》的指导</target>
        </trans-unit>
        <trans-unit id="4c0a02a4fd557e1f5547ba09fc6d37a119fe72d1" translate="yes" xml:space="preserve">
          <source>Without this, a generic &quot;Game is not a type&quot; message would be given.</source>
          <target state="translated">如果没有这个功能,就会给出一个通用的 &quot;Game is not a type &quot;的消息。</target>
        </trans-unit>
        <trans-unit id="3193c510cba9467bc667c00acf704c64431c62ee" translate="yes" xml:space="preserve">
          <source>Wizard Look and Feel</source>
          <target state="translated">魔法师外观和感觉</target>
        </trans-unit>
        <trans-unit id="5dcef5ebea03ffa0dd22c9949dde2011e5628e41" translate="yes" xml:space="preserve">
          <source>Wizards consist of a sequence of &lt;a href=&quot;qwizardpage&quot;&gt;QWizardPage&lt;/a&gt;s. At any time, only one page is shown. A page has the following attributes:</source>
          <target state="translated">向导由一系列&lt;a href=&quot;qwizardpage&quot;&gt;QWizardPage&lt;/a&gt;组成。在任何时候，仅显示一页。页面具有以下属性：</target>
        </trans-unit>
        <trans-unit id="b6261b0f092158c08397020cfc1dbbc29f7e922b" translate="yes" xml:space="preserve">
          <source>WlScaler (QML type)</source>
          <target state="translated">WlScaler (QML类型)</target>
        </trans-unit>
        <trans-unit id="b57bdbc1f007e6605e0c904fc272441772cf025c" translate="yes" xml:space="preserve">
          <source>WlScaler QML Type</source>
          <target state="translated">WlScaler QML类型</target>
        </trans-unit>
        <trans-unit id="4ade3073a2b210ce8e9ac7f018f59f6299ff87f5" translate="yes" xml:space="preserve">
          <source>WlScaler corresponds to the Wayland interface, &lt;code&gt;wl_scaler&lt;/code&gt;.</source>
          <target state="translated">WlScaler对应于Wayland接口 &lt;code&gt;wl_scaler&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="07b36481f2d528b274ee4ef8ded9960891eb760e" translate="yes" xml:space="preserve">
          <source>WlShell (QML type)</source>
          <target state="translated">WlShell(QML类型)</target>
        </trans-unit>
        <trans-unit id="b6668b0bfe96f711b449cdfda3749bc2ecf51c24" translate="yes" xml:space="preserve">
          <source>WlShell QML Type</source>
          <target state="translated">WlShell QML类型</target>
        </trans-unit>
        <trans-unit id="5caabff4047fc9e0ec581112e9d4a83acffca4f9" translate="yes" xml:space="preserve">
          <source>WlShell corresponds to the Wayland interface &lt;code&gt;wl_shell&lt;/code&gt;.</source>
          <target state="translated">WlShell对应于Wayland接口 &lt;code&gt;wl_shell&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="42fc3ffb9c689fcc91fe318023d6cbe1e725cf51" translate="yes" xml:space="preserve">
          <source>WlShell.wlShellSurfaceCreated()</source>
          <target state="translated">WlShell.wlShellSurfaceCreated()</target>
        </trans-unit>
        <trans-unit id="ef822dc8547db076895749545273aa5a0d42d135" translate="yes" xml:space="preserve">
          <source>WlShell.wlShellSurfaceRequested()</source>
          <target state="translated">WlShell.wlShellSurfaceRequested()</target>
        </trans-unit>
        <trans-unit id="d2bfbfbbad3de59d0a961294644a89b410ef6d5a" translate="yes" xml:space="preserve">
          <source>WlShellSurface (QML type)</source>
          <target state="translated">WlShellSurface (QML类型)</target>
        </trans-unit>
        <trans-unit id="e110dc4896fac279d93e7506893b457acc985adf" translate="yes" xml:space="preserve">
          <source>WlShellSurface QML Type</source>
          <target state="translated">WlShellSurface QML类型</target>
        </trans-unit>
        <trans-unit id="48fcc081e064624479ecf0c1711d6fc48798ea77" translate="yes" xml:space="preserve">
          <source>WlShellSurface.className</source>
          <target state="translated">WlShellSurface.className</target>
        </trans-unit>
        <trans-unit id="2cef914ef3792ac59c00673fa463e6e279d0e5b1" translate="yes" xml:space="preserve">
          <source>WlShellSurface.initialize()</source>
          <target state="translated">WlShellSurface.initialize()</target>
        </trans-unit>
        <trans-unit id="1b6436e9c64dc8f3894eab1f20a93739c4e013c3" translate="yes" xml:space="preserve">
          <source>WlShellSurface.ping()</source>
          <target state="translated">WlShellSurface.ping()</target>
        </trans-unit>
        <trans-unit id="c1709f39c1328b38a0fd7548d86419ecc18e9844" translate="yes" xml:space="preserve">
          <source>WlShellSurface.sendConfigure()</source>
          <target state="translated">WlShellSurface.sendConfigure()</target>
        </trans-unit>
        <trans-unit id="ab0fe1c58fc6f74a085ce2f12576d1f032c82596" translate="yes" xml:space="preserve">
          <source>WlShellSurface.sendPopupDone()</source>
          <target state="translated">WlShellSurface.sendPopupDone()</target>
        </trans-unit>
        <trans-unit id="b7bf42c1307ac8700aebf1d11228f62d6a8f17fa" translate="yes" xml:space="preserve">
          <source>WlShellSurface.shell</source>
          <target state="translated">WlShellSurface.shell</target>
        </trans-unit>
        <trans-unit id="34313321892b7c04f1ccc13b6583e7b5f23187d5" translate="yes" xml:space="preserve">
          <source>WlShellSurface.surface</source>
          <target state="translated">WlShellSurface.surface</target>
        </trans-unit>
        <trans-unit id="d03be9356817ff47117f41e9d0285382e1f5fc71" translate="yes" xml:space="preserve">
          <source>WlShellSurface.title</source>
          <target state="translated">WlShellSurface.title</target>
        </trans-unit>
        <trans-unit id="bb56f0ba00293a640d27fdf80aaa35bf820d35f8" translate="yes" xml:space="preserve">
          <source>WlShellSurface.windowType</source>
          <target state="translated">WlShellSurface.windowType</target>
        </trans-unit>
        <trans-unit id="8ed9a26e1e0bd86a5734f7dbf8a8b38ec310f539" translate="yes" xml:space="preserve">
          <source>Word boundaries are there to locate the start and end of what a language considers to be a word (see &lt;a href=&quot;http://www.unicode.org/reports/tr29/#Word_Boundaries&quot;&gt;http://www.unicode.org/reports/tr29/#Word_Boundaries&lt;/a&gt;).</source>
          <target state="translated">可以使用单词边界来定位语言认为是单词的开始和结束（请参见&lt;a href=&quot;http://www.unicode.org/reports/tr29/#Word_Boundaries&quot;&gt;http://www.unicode.org/reports/tr29/#Word_Boundaries&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="14aa0b70acd8abaf5ec235effcca2b732acee98e" translate="yes" xml:space="preserve">
          <source>Word boundaries are there to locate the start and end of what a language considers to be a word (see &lt;a href=&quot;https://www.unicode.org/reports/tr29/#Word_Boundaries&quot;&gt;http://www.unicode.org/reports/tr29/#Word_Boundaries&lt;/a&gt;).</source>
          <target state="translated">可以使用单词边界来定位语言认为是单词的开始和结束（请参阅&lt;a href=&quot;https://www.unicode.org/reports/tr29/#Word_Boundaries&quot;&gt;http://www.unicode.org/reports/tr29/#Word_Boundaries&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="bb253144836dfa990bb98ead2d4aef93472eac9f" translate="yes" xml:space="preserve">
          <source>Word by word. &lt;a href=&quot;qtextstream&quot;&gt;QTextStream&lt;/a&gt; supports streaming into &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;s, &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;s and char* buffers. Words are delimited by space, and leading white space is automatically skipped.</source>
          <target state="translated">逐词地。&lt;a href=&quot;qtextstream&quot;&gt;QTextStream&lt;/a&gt;支持流式传输到&lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;，&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;和char *缓冲区。单词由空格分隔，并且前导空白会自动跳过。</target>
        </trans-unit>
        <trans-unit id="108a2f7ed609797b46cbd1ba460aa2c7ecb91509" translate="yes" xml:space="preserve">
          <source>Word by word. QTextStream supports streaming into &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;s, &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;s and char* buffers. Words are delimited by space, and leading white space is automatically skipped.</source>
          <target state="translated">逐词地。QTextStream支持流式传输到&lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;，&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;和char *缓冲区。单词由空格分隔，并且前导空白会自动跳过。</target>
        </trans-unit>
        <trans-unit id="b40db3a882cfd89240242a70c035356550f54ada" translate="yes" xml:space="preserve">
          <source>Word size</source>
          <target state="translated">字数</target>
        </trans-unit>
        <trans-unit id="536af22c45db1729570f13631c85a76152e074f4" translate="yes" xml:space="preserve">
          <source>Word spacing changes the default spacing between individual words. A positive value increases the word spacing by a corresponding amount of pixels, while a negative value decreases the inter-word spacing accordingly.</source>
          <target state="translated">字间距改变了各个字之间的默认间距。正值会增加相应的字间距,而负值则会相应减少字间间距。</target>
        </trans-unit>
        <trans-unit id="0069fab6f922d3e5cfb6199f7e1104d8cce60a16" translate="yes" xml:space="preserve">
          <source>Word spacing will not apply to writing systems, where indiviaul words are not separated by white space.</source>
          <target state="translated">字距将不适用于书写系统,其中独立的单词不以白色空间分隔。</target>
        </trans-unit>
        <trans-unit id="9b187a2614280ba9450d25073626d8391af19bcc" translate="yes" xml:space="preserve">
          <source>Worked Example</source>
          <target state="translated">工作实例</target>
        </trans-unit>
        <trans-unit id="ca1e06ded6779c45d8ce0e1785ae4b86657174de" translate="yes" xml:space="preserve">
          <source>Worker scripts that are plain JavaScript sources can not use &lt;a href=&quot;qtqml-javascript-imports&quot;&gt;.import&lt;/a&gt; syntax. Scripts that are ECMAScript modules can freely use import and export statements.</source>
          <target state="translated">纯JavaScript源的&lt;a href=&quot;qtqml-javascript-imports&quot;&gt;辅助&lt;/a&gt;脚本不能使用.import语法。作为ECMAScript模块的脚本可以自由使用导入和导出语句。</target>
        </trans-unit>
        <trans-unit id="2e0eaa4ff41e676dd00c44372e1378b130957c0e" translate="yes" xml:space="preserve">
          <source>Worker scripts that are plain JavaScript sources can not use &lt;a href=&quot;qtqml-javascript-imports#&quot;&gt;.import&lt;/a&gt; syntax. Scripts that are ECMAScript modules can freely use import and export statements.</source>
          <target state="translated">纯JavaScript源的&lt;a href=&quot;qtqml-javascript-imports#&quot;&gt;辅助&lt;/a&gt;脚本不能使用.import语法。作为ECMAScript模块的脚本可以自由使用导入和导出语句。</target>
        </trans-unit>
        <trans-unit id="9a530934fe64bcc0a2fbc6b2eb19c8eee6434afd" translate="yes" xml:space="preserve">
          <source>WorkerScript</source>
          <target state="translated">WorkerScript</target>
        </trans-unit>
        <trans-unit id="fd088565fbfdd1fad6509f6f419e889c510a50a2" translate="yes" xml:space="preserve">
          <source>WorkerScript (QML type)</source>
          <target state="translated">WorkerScript(QML类型</target>
        </trans-unit>
        <trans-unit id="60aef30910707ab83bafa6a514cd2497880e4524" translate="yes" xml:space="preserve">
          <source>WorkerScript QML Type</source>
          <target state="translated">WorkerScript QML类型</target>
        </trans-unit>
        <trans-unit id="abeebdfcd68a08212df1b2cd21546924ca0c33b3" translate="yes" xml:space="preserve">
          <source>WorkerScript.message()</source>
          <target state="translated">WorkerScript.message()</target>
        </trans-unit>
        <trans-unit id="d834c787e237a5d767a1e6e24914292b2c010582" translate="yes" xml:space="preserve">
          <source>WorkerScript.ready</source>
          <target state="translated">WorkerScript.ready</target>
        </trans-unit>
        <trans-unit id="ee6d6c2a7ca12046ee14ce7daff0c490de29eaa7" translate="yes" xml:space="preserve">
          <source>WorkerScript.sendMessage()</source>
          <target state="translated">WorkerScript.sendMessage()</target>
        </trans-unit>
        <trans-unit id="8ae9f004765542d8e99218e39c3301c815ffc5c5" translate="yes" xml:space="preserve">
          <source>WorkerScript.source</source>
          <target state="translated">WorkerScript.source</target>
        </trans-unit>
        <trans-unit id="742a795cfcef09d5fca0078214b531040466c57e" translate="yes" xml:space="preserve">
          <source>WorkerScript: Threading in QML</source>
          <target state="translated">WorkerScript:QML中的线程</target>
        </trans-unit>
        <trans-unit id="c016b2ba62db10eb134f62dc27e219f5ec415800" translate="yes" xml:space="preserve">
          <source>Working With Arrays</source>
          <target state="translated">使用数组</target>
        </trans-unit>
        <trans-unit id="3e0156058f2d58d9828ee6710bcfff111dd0fae5" translate="yes" xml:space="preserve">
          <source>Working with existing Metal devices</source>
          <target state="translated">使用现有的金属设备</target>
        </trans-unit>
        <trans-unit id="e3179360576d4f619d5134d86c6b5cd815bbfd34" translate="yes" xml:space="preserve">
          <source>Working with the DOM Tree</source>
          <target state="translated">与DOM树一起工作</target>
        </trans-unit>
        <trans-unit id="621c48ea175f57750086ad2674043c3857f9d3bf" translate="yes" xml:space="preserve">
          <source>Works on the given</source>
          <target state="translated">在给定范围内工作</target>
        </trans-unit>
        <trans-unit id="43a2a212ef9e306f1227d6c262fe7cb1e66e61fc" translate="yes" xml:space="preserve">
          <source>Works with moving images.</source>
          <target state="translated">与动态图像一起工作。</target>
        </trans-unit>
        <trans-unit id="9aac26a929704d6521e46edde532ac2f089520c5" translate="yes" xml:space="preserve">
          <source>World normal vector</source>
          <target state="translated">世界法向量</target>
        </trans-unit>
        <trans-unit id="39283cfe47115a1783c04e50be8df740ad417973" translate="yes" xml:space="preserve">
          <source>World position vector</source>
          <target state="translated">世界位置矢量</target>
        </trans-unit>
        <trans-unit id="30292f5fea8a2145e412ec1542b2e1882d60b1db" translate="yes" xml:space="preserve">
          <source>Worst case</source>
          <target state="translated">最坏的情况</target>
        </trans-unit>
        <trans-unit id="a2bc9fcb013ef5ff52c6e0f302f433182054d0f1" translate="yes" xml:space="preserve">
          <source>Wrap the coordinate at the edges, but mirror the texture when tiling it.</source>
          <target state="translated">在边缘处包裹坐标,但在贴砖时要镜像纹理。</target>
        </trans-unit>
        <trans-unit id="3932d9662b08569bc16f913c6cab600855beec2c" translate="yes" xml:space="preserve">
          <source>Wrap the coordinates at the edges to tile the texture.</source>
          <target state="translated">在边缘处包住坐标,以贴上纹理。</target>
        </trans-unit>
        <trans-unit id="4dd381ce6f1f7eec38158291208afc54d5c3e2c9" translate="yes" xml:space="preserve">
          <source>WrappedEvent Class</source>
          <target state="translated">WrappedEvent类</target>
        </trans-unit>
        <trans-unit id="f7eaaeed34595d2de20d364a6b354ea80424d306" translate="yes" xml:space="preserve">
          <source>Wrapper Example (ActiveQt)</source>
          <target state="translated">包装器示例(ActiveQt)</target>
        </trans-unit>
        <trans-unit id="6fe8f9d6986840fa95d881f4a793e9f8f307cbce" translate="yes" xml:space="preserve">
          <source>Wrapping Functions that Take Multiple Arguments</source>
          <target state="translated">对接受多个参数的函数进行封装</target>
        </trans-unit>
        <trans-unit id="11877c34b11d19f8fca7be1d44c3a4274a08bac4" translate="yes" xml:space="preserve">
          <source>Wrapping other objects for the purpose of grouping them into components or sub-trees can be a convenient way to, for example, animated a group of nodes as a whole. This snippet shows how to use Node to animate a camera:</source>
          <target state="translated">将其他对象打包,以便将它们分组为组件或子树,这是一种方便的方式,例如,将一组节点作为一个整体进行动画。这段代码展示了如何使用Node对一个摄像头进行动画。</target>
        </trans-unit>
        <trans-unit id="f660e7dcc715c259e3109185ed53b33ce2986532" translate="yes" xml:space="preserve">
          <source>Wraps Android positioning subsystem. Available only on Android.</source>
          <target state="translated">封装Android定位子系统。仅在Android上可用。</target>
        </trans-unit>
        <trans-unit id="18e1f8eef927d790db4197d551e90201eebb292f" translate="yes" xml:space="preserve">
          <source>Wraps WinRT positioning subsystem. Available only on WinRT and Windows10.</source>
          <target state="translated">包裹WinRT定位子系统。仅适用于WinRT和Windows10。</target>
        </trans-unit>
        <trans-unit id="38931fb06cd5db1a403cd002c454f6ea82391f8f" translate="yes" xml:space="preserve">
          <source>Wraps a sequence of OpenGL timer query objects</source>
          <target state="translated">包裹一个OpenGL定时器查询对象的序列。</target>
        </trans-unit>
        <trans-unit id="18c2cbec6a0515b86f70bcf27bf4340409ef4863" translate="yes" xml:space="preserve">
          <source>Wraps an OpenGL Vertex Array Object</source>
          <target state="translated">包裹一个OpenGL顶点阵列对象。</target>
        </trans-unit>
        <trans-unit id="15a4a67a605d671d3c9e35eeee30225ef4cb4999" translate="yes" xml:space="preserve">
          <source>Wraps an OpenGL debug message</source>
          <target state="translated">包裹一个OpenGL调试消息</target>
        </trans-unit>
        <trans-unit id="1a08856ef68ab0ac7fc717cf91ad30fbae25ec50" translate="yes" xml:space="preserve">
          <source>Wraps an OpenGL timer query object</source>
          <target state="translated">包裹一个OpenGL定时器查询对象。</target>
        </trans-unit>
        <trans-unit id="c3fa0a57fa01c69420d61446a0eae2bbe84b4823" translate="yes" xml:space="preserve">
          <source>Wraps iOS and macOS positioning subsystems. Available only on Apple platforms supporting corelocation.</source>
          <target state="translated">封装了iOS和macOS定位子系统。仅适用于支持核心定位的苹果平台。</target>
        </trans-unit>
        <trans-unit id="b20d8fb713c2bebd0f6fd23a09cb0ecf5e285d04" translate="yes" xml:space="preserve">
          <source>Wraps the</source>
          <target state="translated">包装</target>
        </trans-unit>
        <trans-unit id="316c0260a54a729b9a181fe2930ff1cbbd23aa03" translate="yes" xml:space="preserve">
          <source>Wraps the most important methods of Android Binder class. &lt;a href=&quot;#details&quot;&gt;More...&lt;/a&gt;</source>
          <target state="translated">包装Android Binder类的最重要方法。&lt;a href=&quot;#details&quot;&gt;更多的...&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0f133d61508d26cd1934d08b12ed271c2b34f0c4" translate="yes" xml:space="preserve">
          <source>Wraps the most important methods of Android Intent class. &lt;a href=&quot;#details&quot;&gt;More...&lt;/a&gt;</source>
          <target state="translated">包装Android Intent类的最重要方法。&lt;a href=&quot;#details&quot;&gt;更多的...&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ef7db36344598f7fcfcaf4fcd608818bf78f774c" translate="yes" xml:space="preserve">
          <source>Wraps the most important methods of Android Parcel class. &lt;a href=&quot;#details&quot;&gt;More...&lt;/a&gt;</source>
          <target state="translated">包装Android Parcel类的最重要方法。&lt;a href=&quot;#details&quot;&gt;更多的...&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c608727db8e0e2802553a6ae57ea9fbb5560b6f8" translate="yes" xml:space="preserve">
          <source>Wraps the most important methods of Android Service class. &lt;a href=&quot;#details&quot;&gt;More...&lt;/a&gt;</source>
          <target state="translated">包装Android Service类最重要的方法。&lt;a href=&quot;#details&quot;&gt;更多的...&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="45853dd0221668b8d47fd021076903fefc7f1019" translate="yes" xml:space="preserve">
          <source>Wraps the most important methods of Android ServiceConnection class. &lt;a href=&quot;#details&quot;&gt;More...&lt;/a&gt;</source>
          <target state="translated">包装Android ServiceConnection类的最重要方法。&lt;a href=&quot;#details&quot;&gt;更多的...&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9cacfd6c2f56b1eb4a8993bf9bd456057d52e65f" translate="yes" xml:space="preserve">
          <source>Wraps the provided</source>
          <target state="translated">包裹所提供的</target>
        </trans-unit>
        <trans-unit id="794b3c2fc0395934b72694e2ebb596cae40240be" translate="yes" xml:space="preserve">
          <source>Wraps the signed 64-bit integer</source>
          <target state="translated">包裹有符号的64位整数。</target>
        </trans-unit>
        <trans-unit id="72b7b9a4d5c7c2785fa3b6a073dee1962e436c2c" translate="yes" xml:space="preserve">
          <source>Wraps the unsigned 64-bit integer</source>
          <target state="translated">包裹无符号64位整数。</target>
        </trans-unit>
        <trans-unit id="27fd4473f892a9f8d28e8b368d4e7e3d38f05604" translate="yes" xml:space="preserve">
          <source>Write Self-contained Test Functions</source>
          <target state="translated">编写自带的测试函数</target>
        </trans-unit>
        <trans-unit id="b770bb53de054c2fe2b31d8da9f2a75e4f0159e4" translate="yes" xml:space="preserve">
          <source>Write Well-structured Diagnostic Code</source>
          <target state="translated">编写结构良好的诊断代码</target>
        </trans-unit>
        <trans-unit id="b5f7b07f82467c99774abc79b879a0c8fe819e1e" translate="yes" xml:space="preserve">
          <source>Write a depfile with the .qrc dependencies to &amp;lt;file&amp;gt;.</source>
          <target state="translated">将具有.qrc依赖项的depfile写入&amp;lt;file&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="ab2726a3cc1f75c60b0eea1512f91412b9226ed7" translate="yes" xml:space="preserve">
          <source>Write a project file for the plugin</source>
          <target state="translated">为插件写一个项目文件</target>
        </trans-unit>
        <trans-unit id="11b5efa2d5a13568411e209f84157514c044e66b" translate="yes" xml:space="preserve">
          <source>Write a project file for the plugin. Add:</source>
          <target state="translated">为插件写一个项目文件。添加。</target>
        </trans-unit>
        <trans-unit id="a881b178da5b074e2d889eab1b001d181e29fbda" translate="yes" xml:space="preserve">
          <source>Write a test and fix the bug.</source>
          <target state="translated">编写一个测试并修复错误。</target>
        </trans-unit>
        <trans-unit id="94435f8e44b2a5ffbbe9a1a051a7fa8d40a1b104" translate="yes" xml:space="preserve">
          <source>Write access</source>
          <target state="translated">写入访问</target>
        </trans-unit>
        <trans-unit id="f1bb131eaccae0c046736420225d1656db426322" translate="yes" xml:space="preserve">
          <source>Write and commit your tests along with your fix or new feature on a new branch. Once you're done, you can check out the branch on which your work is based, and then check out into this branch the test-files for your new tests. This enables you to verify that the tests do fail on the prior branch, and therefore actually do catch a bug or test a new feature.</source>
          <target state="translated">编写并提交你的测试以及你的修复或新功能到一个新的分支上。一旦你完成了,你可以检查出你的工作所基于的分支,然后把你的新测试的测试文件检查到这个分支。这可以让你验证测试是否在前一个分支上失败了,因此确实抓住了一个错误或测试了一个新功能。</target>
        </trans-unit>
        <trans-unit id="47bea6187853239b43a7df6e6565f510705cc425" translate="yes" xml:space="preserve">
          <source>Write notifiers should normally be disabled immediately after the &lt;a href=&quot;qsocketnotifier#activated&quot;&gt;activated&lt;/a&gt;() signal has been emitted</source>
          <target state="translated">通常应在发出&lt;a href=&quot;qsocketnotifier#activated&quot;&gt;激活的&lt;/a&gt;（）信号后立即禁用写通知器</target>
        </trans-unit>
        <trans-unit id="196da289028b4498c4230c282ac726baee2c7c18" translate="yes" xml:space="preserve">
          <source>Write output to &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; instead of to standard output.</source>
          <target state="translated">将输出写入 &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; 而不是标准输出。</target>
        </trans-unit>
        <trans-unit id="1677c9974625fb733a6e7d18d261c338123d2eb9" translate="yes" xml:space="preserve">
          <source>Write output to &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; rather than to standard output.</source>
          <target state="translated">将输出写入 &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; 而不是标准输出。</target>
        </trans-unit>
        <trans-unit id="4380a30052d4a8f446c61d3532f27cb3d17c499a" translate="yes" xml:space="preserve">
          <source>Write output to &lt;code&gt;file&lt;/code&gt; rather than to stdout.</source>
          <target state="translated">将输出写入 &lt;code&gt;file&lt;/code&gt; 而不是标准输出。</target>
        </trans-unit>
        <trans-unit id="a0516381df102bdc8fd4d44567b9570494009851" translate="yes" xml:space="preserve">
          <source>Write the infinite loop directly within a reimplementation of &lt;a href=&quot;qthread#run&quot;&gt;QThread::run&lt;/a&gt;(). Start the thread without an event loop. Let the thread emit signals to send data back to the GUI thread.</source>
          <target state="translated">在重新实现&lt;a href=&quot;qthread#run&quot;&gt;QThread :: run&lt;/a&gt;（）内直接编写无限循环。启动线程而没有事件循环。让线程发出信号以将数据发送回GUI线程。</target>
        </trans-unit>
        <trans-unit id="ef2fd1bfd74950a812a75e4a180064e84381952f" translate="yes" xml:space="preserve">
          <source>Write-functions for properties and other methods exposed by the object's IDispatch implementation can be called directly using &lt;a href=&quot;qaxbase#dynamicCall&quot;&gt;dynamicCall&lt;/a&gt;(), or indirectly as slots connected to a signal.</source>
          <target state="translated">可以使用&lt;a href=&quot;qaxbase#dynamicCall&quot;&gt;dynamicCall&lt;/a&gt;（）直接调用对象的IDispatch实现公开的属性和其他方法的写函数，也可以间接将其作为连接到信号的插槽来调用。</target>
        </trans-unit>
        <trans-unit id="d35b6b65f165e1877f26c4e06cd3a5c64880f4a5" translate="yes" xml:space="preserve">
          <source>Write-only access.</source>
          <target state="translated">只写访问。</target>
        </trans-unit>
        <trans-unit id="5f435830a7c07f19c4072a88821b38028c3f69e6" translate="yes" xml:space="preserve">
          <source>Writer</source>
          <target state="translated">Writer</target>
        </trans-unit>
        <trans-unit id="9b1ff2c96b99a1589923943cfd2a6cdcf1069090" translate="yes" xml:space="preserve">
          <source>Writes</source>
          <target state="translated">Writes</target>
        </trans-unit>
        <trans-unit id="b4a786c4f503771378428ac21d1d348d83bb86f1" translate="yes" xml:space="preserve">
          <source>Writes '\n' to the</source>
          <target state="translated">将'\n'写到</target>
        </trans-unit>
        <trans-unit id="6b9d6bb1dff6b3764973ce7e888aff8e19afc028" translate="yes" xml:space="preserve">
          <source>Writes a</source>
          <target state="translated">写一个</target>
        </trans-unit>
        <trans-unit id="f7f6276a9a8fd05d95d9c29a38c113d4a5a40008" translate="yes" xml:space="preserve">
          <source>Writes a DTD section. The</source>
          <target state="translated">编写一个DTD部分。编写一个DTD部分。</target>
        </trans-unit>
        <trans-unit id="59b00d045983c21e0a0a40e9b6adf849d539ae71" translate="yes" xml:space="preserve">
          <source>Writes a boolean value,</source>
          <target state="translated">写一个布尔值。</target>
        </trans-unit>
        <trans-unit id="83bc5d991bad2a7cac10d8e660eb6f3a840c80e8" translate="yes" xml:space="preserve">
          <source>Writes a character</source>
          <target state="translated">写一个人物</target>
        </trans-unit>
        <trans-unit id="c7ded52b8eff837057947346439b10b58a7e793f" translate="yes" xml:space="preserve">
          <source>Writes a character,</source>
          <target state="translated">写出了一个人物。</target>
        </trans-unit>
        <trans-unit id="c9a5b980180de0679b78f6ef236213db1c71d0fd" translate="yes" xml:space="preserve">
          <source>Writes a default namespace declaration for</source>
          <target state="translated">编写一个默认的命名空间声明,用于</target>
        </trans-unit>
        <trans-unit id="ed21cc0e70e7d8d90466d3a1333e452e22db5c4e" translate="yes" xml:space="preserve">
          <source>Writes a document start with XML version number &quot;1.0&quot;.</source>
          <target state="translated">写一个以XML版本号 &quot;1.0 &quot;开始的文档。</target>
        </trans-unit>
        <trans-unit id="e73198573b4090514b896debe977652abb8445db" translate="yes" xml:space="preserve">
          <source>Writes a document start with XML version number &quot;1.0&quot;. This also writes the encoding information.</source>
          <target state="translated">写一个以XML版本号 &quot;1.0 &quot;开始的文档。这也会写入编码信息。</target>
        </trans-unit>
        <trans-unit id="773ef9d025ac8769b1894de2a4cef0333b9be400" translate="yes" xml:space="preserve">
          <source>Writes a document start with the XML version number</source>
          <target state="translated">编写一个以XML版本号开始的文档。</target>
        </trans-unit>
        <trans-unit id="45852bea0a29912e77ce6e5a46d87f40bb140f46" translate="yes" xml:space="preserve">
          <source>Writes a floating point number,</source>
          <target state="translated">写一个浮点数。</target>
        </trans-unit>
        <trans-unit id="d2354ea0a821dbe565013bdc6bb0ce0a41b1e8f6" translate="yes" xml:space="preserve">
          <source>Writes a namespace declaration for</source>
          <target state="translated">编写一个命名空间声明,用于</target>
        </trans-unit>
        <trans-unit id="152024cfbf53d328526c2e972003878921be4566" translate="yes" xml:space="preserve">
          <source>Writes a pointer,</source>
          <target state="translated">写一个指针。</target>
        </trans-unit>
        <trans-unit id="4162505effa940040087d70422544a8376612bc6" translate="yes" xml:space="preserve">
          <source>Writes a signed 16-bit integer,</source>
          <target state="translated">写一个有符号的16位整数。</target>
        </trans-unit>
        <trans-unit id="508d87035ba2a3ef7487d36f2dd10c2f87d1a1b4" translate="yes" xml:space="preserve">
          <source>Writes a signed 32-bit integer,</source>
          <target state="translated">写一个有符号的32位整数。</target>
        </trans-unit>
        <trans-unit id="8bce505ab35ce7fcccbe431f7d8d57ea5b3ab526" translate="yes" xml:space="preserve">
          <source>Writes a signed 64-bit integer,</source>
          <target state="translated">写一个有符号的64位整数。</target>
        </trans-unit>
        <trans-unit id="a5040197ec3845b4c48ec78a4a5048d60fdd5830" translate="yes" xml:space="preserve">
          <source>Writes a signed byte,</source>
          <target state="translated">写一个签名的字节。</target>
        </trans-unit>
        <trans-unit id="540a671861c4f11d57542891dfd13a13299eec15" translate="yes" xml:space="preserve">
          <source>Writes a space character to the debug stream and returns a reference to the stream.</source>
          <target state="translated">在调试流中写入一个空格字符,并返回一个流的引用。</target>
        </trans-unit>
        <trans-unit id="24e5afec4114370f38c765bdfaa32e56241dc335" translate="yes" xml:space="preserve">
          <source>Writes a space character to the debug stream, depending on the current setting for automatic insertion of spaces, and returns a reference to the stream.</source>
          <target state="translated">根据当前自动插入空格的设置,在调试流中写入一个空格字符,并返回流的引用。</target>
        </trans-unit>
        <trans-unit id="b771e2a6de0a7b6f18ba395aa32888371ffa6f53" translate="yes" xml:space="preserve">
          <source>Writes a start element with</source>
          <target state="translated">编写一个带有</target>
        </trans-unit>
        <trans-unit id="f613343e23a1720f7274d518ed4d10dec77ea3fb" translate="yes" xml:space="preserve">
          <source>Writes a text element with</source>
          <target state="translated">编写一个带有</target>
        </trans-unit>
        <trans-unit id="ae99a4d81a3df6807235ed0cf880561ad79c7f02" translate="yes" xml:space="preserve">
          <source>Writes an XML processing instruction with</source>
          <target state="translated">编写一个XML处理指令,其内容为</target>
        </trans-unit>
        <trans-unit id="668b21ea217e458f679fe4225b47d73d5b0d9e96" translate="yes" xml:space="preserve">
          <source>Writes an attribute with</source>
          <target state="translated">编写一个带有</target>
        </trans-unit>
        <trans-unit id="a876f72f78fef82db4fb2a67dd39dc229fdc7836" translate="yes" xml:space="preserve">
          <source>Writes an empty element with</source>
          <target state="translated">写入一个空元素,并使用</target>
        </trans-unit>
        <trans-unit id="76c960a2a3fe7c550d09abb3429b7db88cd6712d" translate="yes" xml:space="preserve">
          <source>Writes an empty element with qualified name</source>
          <target state="translated">写一个带限定名称的空元素</target>
        </trans-unit>
        <trans-unit id="fc51c29ab2fec69d1f4e98685528b253eb49681e" translate="yes" xml:space="preserve">
          <source>Writes an picture to an IO device and returns &lt;code&gt;true&lt;/code&gt; if the picture was successfully written; otherwise returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">将图片写入IO设备，如果图片成功写入，则返回 &lt;code&gt;true&lt;/code&gt; ;否则，返回true。否则返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a7248073d948f111e2b9f094c4f1e78903b6fd8" translate="yes" xml:space="preserve">
          <source>Writes an unsigned 16-bit integer,</source>
          <target state="translated">写一个无符号的16位整数。</target>
        </trans-unit>
        <trans-unit id="a1fdbd3718dadf4e3da8b0eacc4c5ac15013057c" translate="yes" xml:space="preserve">
          <source>Writes an unsigned 64-bit integer,</source>
          <target state="translated">写一个无符号的64位整数。</target>
        </trans-unit>
        <trans-unit id="6bc2728d94227ebe5104c6973a020e610e8510e3" translate="yes" xml:space="preserve">
          <source>Writes an unsigned byte,</source>
          <target state="translated">写一个无符号字节。</target>
        </trans-unit>
        <trans-unit id="1f93bfcb2ba8deb677e9b7923c56809714b15c1b" translate="yes" xml:space="preserve">
          <source>Writes an unsigned integer,</source>
          <target state="translated">写一个无符号整数。</target>
        </trans-unit>
        <trans-unit id="46803c135d0161bd80c1a44d40fea224a23f27dd" translate="yes" xml:space="preserve">
          <source>Writes any unsaved changes to permanent storage, and reloads any settings that have been changed in the meantime by another application.</source>
          <target state="translated">将任何未保存的更改写入永久存储,并重新加载在此期间被其他应用程序更改的任何设置。</target>
        </trans-unit>
        <trans-unit id="261e06b81f447d43362f247a2f46e5489ffe1599" translate="yes" xml:space="preserve">
          <source>Writes any unsaved changes to the list model after it has been modified from a worker script.</source>
          <target state="translated">从 Worker 脚本修改列表模型后,写入任何未保存的更改。</target>
        </trans-unit>
        <trans-unit id="06d04df05fafbcb24f160fe8505cc6f83111699d" translate="yes" xml:space="preserve">
          <source>Writes at most</source>
          <target state="translated">最多撰写</target>
        </trans-unit>
        <trans-unit id="cccbf23cef6f041d8d50ea6bc908a479736c7208" translate="yes" xml:space="preserve">
          <source>Writes bit array</source>
          <target state="translated">写入位数组</target>
        </trans-unit>
        <trans-unit id="acdafa57f52718e28bf0395ba382200abb51e6f0" translate="yes" xml:space="preserve">
          <source>Writes byte array</source>
          <target state="translated">写入字节数组</target>
        </trans-unit>
        <trans-unit id="b513ccbafa855d3e8e9e01ae0e1f2a0c42d0d6c2" translate="yes" xml:space="preserve">
          <source>Writes data from a zero-terminated string of 8-bit characters to the device. Returns the number of bytes that were actually written, or -1 if an error occurred. This is equivalent to</source>
          <target state="translated">从一个以零结束的8位字符串中写入数据到设备。返回实际写入的字节数,如果发生错误则返回-1。这相当于</target>
        </trans-unit>
        <trans-unit id="002532affcf786aa7846706a5c59a908d042efc7" translate="yes" xml:space="preserve">
          <source>Writes data to the Modbus server. A Modbus server has four tables (</source>
          <target state="translated">向Modbus服务器写入数据。一个Modbus服务器有四个表(</target>
        </trans-unit>
        <trans-unit id="4f289689677bc02356445e2e37df23900682b50b" translate="yes" xml:space="preserve">
          <source>Writes host address</source>
          <target state="translated">写入主机地址</target>
        </trans-unit>
        <trans-unit id="0f78bde746999e31fbd7879ace8159887c41d296" translate="yes" xml:space="preserve">
          <source>Writes margin</source>
          <target state="translated">写上页边距</target>
        </trans-unit>
        <trans-unit id="b698df4241e85beac23e7602d7a2b8437b9ee499" translate="yes" xml:space="preserve">
          <source>Writes output to</source>
          <target state="translated">将输出写到</target>
        </trans-unit>
        <trans-unit id="4e913475a6d22f443a10f1f90df4cc1f3a81243b" translate="yes" xml:space="preserve">
          <source>Writes picture</source>
          <target state="translated">撰写图片</target>
        </trans-unit>
        <trans-unit id="f7d056a7f3e66edf63222271ff0283268d642e29" translate="yes" xml:space="preserve">
          <source>Writes the</source>
          <target state="translated">编写</target>
        </trans-unit>
        <trans-unit id="7d3e273dd773e2ed08e03825aebd8500f7b6c269" translate="yes" xml:space="preserve">
          <source>Writes the '\0'-terminated UTF-8 string,</source>
          <target state="translated">写入以'/0'结束的UTF-8字符串。</target>
        </trans-unit>
        <trans-unit id="43af035c4cfc2fda929ea76d5352224186a600e4" translate="yes" xml:space="preserve">
          <source>Writes the '\0'-terminated string</source>
          <target state="translated">写入'/0'结束的字符串。</target>
        </trans-unit>
        <trans-unit id="e16faa087fd3c01feb5f9b5bd086c9c5ee760b8f" translate="yes" xml:space="preserve">
          <source>Writes the '\0'-terminated string,</source>
          <target state="translated">写入'/0'结束的字符串。</target>
        </trans-unit>
        <trans-unit id="6b7ff1554bb80fca10f0ec9812cb0f578ad12e32" translate="yes" xml:space="preserve">
          <source>Writes the 32-bit floating point number,</source>
          <target state="translated">写入32位浮点数。</target>
        </trans-unit>
        <trans-unit id="5ebab39f9d4124f5e5aa416a9f8282c948a6fc32" translate="yes" xml:space="preserve">
          <source>Writes the 64-bit floating point number,</source>
          <target state="translated">写入64位浮点数。</target>
        </trans-unit>
        <trans-unit id="b226bdb4ced9c17cc00d69ae21eb46d4ebaf8d37" translate="yes" xml:space="preserve">
          <source>Writes the &lt;a href=&quot;qstandarditem&quot;&gt;QStandardItem&lt;/a&gt;</source>
          <target state="translated">写&lt;a href=&quot;qstandarditem&quot;&gt;QStandardItem&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b8f0c512209c740e3e55cddd6cb7918885545149" translate="yes" xml:space="preserve">
          <source>Writes the IDL of the server</source>
          <target state="translated">写入服务器的IDL</target>
        </trans-unit>
        <trans-unit id="d99893e10d55f40d59784ad1328f47129762dd26" translate="yes" xml:space="preserve">
          <source>Writes the Modbus</source>
          <target state="translated">写入Modbus</target>
        </trans-unit>
        <trans-unit id="89e302fcdbc574ebe24baaf0c8e4d03381b6a1bb" translate="yes" xml:space="preserve">
          <source>Writes the NDEF messages in</source>
          <target state="translated">将NDEF信息写入</target>
        </trans-unit>
        <trans-unit id="2091b58bf7a401d72ac23d54b526bafd45448f0b" translate="yes" xml:space="preserve">
          <source>Writes the UTF-16 character,</source>
          <target state="translated">编写UTF-16字符。</target>
        </trans-unit>
        <trans-unit id="e2a51328fea6bd74f0194005b05676cf9c21ee41" translate="yes" xml:space="preserve">
          <source>Writes the UTF-32 character,</source>
          <target state="translated">写入UTF-32字符。</target>
        </trans-unit>
        <trans-unit id="0cf8c931ce0bb439c607f3c6d5335613678e46c3" translate="yes" xml:space="preserve">
          <source>Writes the UUID</source>
          <target state="translated">写入UUID</target>
        </trans-unit>
        <trans-unit id="0d844a561d39794abea9541fd749a4ca3aa06c97" translate="yes" xml:space="preserve">
          <source>Writes the XML representation of the node</source>
          <target state="translated">写入节点的XML表示</target>
        </trans-unit>
        <trans-unit id="ba55821275bc711a775d68fb76c343185ccc1804" translate="yes" xml:space="preserve">
          <source>Writes the XML representation of the node and all its children to the stream</source>
          <target state="translated">将节点及其所有子节点的XML表示写到流中。</target>
        </trans-unit>
        <trans-unit id="5173c10eb48e0a33829e8fefd212ad18f96a4ac5" translate="yes" xml:space="preserve">
          <source>Writes the attribute vector</source>
          <target state="translated">写入属性向量</target>
        </trans-unit>
        <trans-unit id="f92ac49cc6e1e06e1203df9c1c39fe4631a557e1" translate="yes" xml:space="preserve">
          <source>Writes the boolean value,</source>
          <target state="translated">写入布尔值。</target>
        </trans-unit>
        <trans-unit id="cd8ce9bc2bf943c4e56b92f4aeb46bce824f5079" translate="yes" xml:space="preserve">
          <source>Writes the byte array,</source>
          <target state="translated">写入字节数组。</target>
        </trans-unit>
        <trans-unit id="8eabdcce5a37343d15669dd0a8a27d7f0c3c26bf" translate="yes" xml:space="preserve">
          <source>Writes the char</source>
          <target state="translated">写入字符</target>
        </trans-unit>
        <trans-unit id="2b5ed1350394da87584845383c59220574f11a07" translate="yes" xml:space="preserve">
          <source>Writes the character</source>
          <target state="translated">写字</target>
        </trans-unit>
        <trans-unit id="d95c7cd5ed74557cf6688c0e07daaf3106209b6c" translate="yes" xml:space="preserve">
          <source>Writes the character,</source>
          <target state="translated">写出了这个人物。</target>
        </trans-unit>
        <trans-unit id="cebbf60c7283546975d1fde748d2c05dc4ae43be" translate="yes" xml:space="preserve">
          <source>Writes the class declaration to</source>
          <target state="translated">将类声明写到</target>
        </trans-unit>
        <trans-unit id="175611b04c3d12d407c559aef1acab3b6a430bfa" translate="yes" xml:space="preserve">
          <source>Writes the combination</source>
          <target state="translated">写出组合</target>
        </trans-unit>
        <trans-unit id="57bfbc2b100f93cfe347744d496538f65f16d252" translate="yes" xml:space="preserve">
          <source>Writes the constant string pointed to by</source>
          <target state="translated">写入由</target>
        </trans-unit>
        <trans-unit id="da1f6da0241609752aef03f7fa62f8de0ff41d8a" translate="yes" xml:space="preserve">
          <source>Writes the content of</source>
          <target state="translated">撰写内容</target>
        </trans-unit>
        <trans-unit id="a756d46a2606d6c1cfee2874270963dafb472ca8" translate="yes" xml:space="preserve">
          <source>Writes the contents of</source>
          <target state="translated">写入</target>
        </trans-unit>
        <trans-unit id="f9aac4bb0fa33787e49aad0d440828595ab12ef0" translate="yes" xml:space="preserve">
          <source>Writes the contents of list</source>
          <target state="translated">写入列表的内容</target>
        </trans-unit>
        <trans-unit id="4455433b3a272cb366fd2de8a75509c90ea87cb9" translate="yes" xml:space="preserve">
          <source>Writes the contents of this engine to the &lt;a href=&quot;qdatastream&quot;&gt;QDataStream&lt;/a&gt;</source>
          <target state="translated">将此引擎的内容写入&lt;a href=&quot;qdatastream&quot;&gt;QDataStream&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="225094d8006c10feac488a2f085db566f995e1b0" translate="yes" xml:space="preserve">
          <source>Writes the contents of vector</source>
          <target state="translated">写入矢量的内容</target>
        </trans-unit>
        <trans-unit id="8c2a15e81c0e8f17b21bea087a5ecae019073ed2" translate="yes" xml:space="preserve">
          <source>Writes the current state of the</source>
          <target state="translated">写下当前状态的</target>
        </trans-unit>
        <trans-unit id="bbbfef6acf9a7431bc292c87e5048f3464c435a2" translate="yes" xml:space="preserve">
          <source>Writes the data of the observed byte array,</source>
          <target state="translated">写入观察到的字节数组的数据。</target>
        </trans-unit>
        <trans-unit id="c6e7fc6a4984583b90e787495f318b8233b14f4f" translate="yes" xml:space="preserve">
          <source>Writes the document fragment specified by</source>
          <target state="translated">写入由</target>
        </trans-unit>
        <trans-unit id="1202ff3d8570c16d59f08c42a822a7f749e8880f" translate="yes" xml:space="preserve">
          <source>Writes the double</source>
          <target state="translated">编写双</target>
        </trans-unit>
        <trans-unit id="8539c07605356fefcd816912e4149596c7a53d6c" translate="yes" xml:space="preserve">
          <source>Writes the elliptic curve</source>
          <target state="translated">写出椭圆曲线</target>
        </trans-unit>
        <trans-unit id="db074d6b2e55c441f90e805e61bdebb1b7992759" translate="yes" xml:space="preserve">
          <source>Writes the entity reference</source>
          <target state="translated">写入实体引用</target>
        </trans-unit>
        <trans-unit id="34bad6632adb20744b76743c91dda4e14ba571e0" translate="yes" xml:space="preserve">
          <source>Writes the filter settings, currently presented in this filter settings widget, to the</source>
          <target state="translated">将当前显示在该过滤器设置小组件中的过滤器设置写入 &quot;过滤器设置 &quot;中。</target>
        </trans-unit>
        <trans-unit id="b1607f0bccf523ae63f85e68cc506e29039b0d6f" translate="yes" xml:space="preserve">
          <source>Writes the font</source>
          <target state="translated">编写字体</target>
        </trans-unit>
        <trans-unit id="222706c60e0585ba1aa8775e7a4cf4d25bf6dd83" translate="yes" xml:space="preserve">
          <source>Writes the given</source>
          <target state="translated">写出给定的</target>
        </trans-unit>
        <trans-unit id="32332afaaa1f943a3a4c0d4645b6baa62f0d9ab7" translate="yes" xml:space="preserve">
          <source>Writes the given painter</source>
          <target state="translated">写出给定的画家</target>
        </trans-unit>
        <trans-unit id="8ec66f337c2b02b2963a6f4c6dc35fa302445ab6" translate="yes" xml:space="preserve">
          <source>Writes the hash</source>
          <target state="translated">写入哈希值</target>
        </trans-unit>
        <trans-unit id="4b48fc0824d4d6bc1024b1cefaa3ad9feea3e4f8" translate="yes" xml:space="preserve">
          <source>Writes the image</source>
          <target state="translated">写入图像</target>
        </trans-unit>
        <trans-unit id="032a4dd2b65f04b5882070e41371136821d7badf" translate="yes" xml:space="preserve">
          <source>Writes the integer number</source>
          <target state="translated">写入整数</target>
        </trans-unit>
        <trans-unit id="81935d912a24085fba191cc34e12216471f1a6bd" translate="yes" xml:space="preserve">
          <source>Writes the item to stream</source>
          <target state="translated">将项目写入流</target>
        </trans-unit>
        <trans-unit id="6552638e45305f076491f7edb4cf9596dd754686" translate="yes" xml:space="preserve">
          <source>Writes the key</source>
          <target state="translated">写出钥匙</target>
        </trans-unit>
        <trans-unit id="d228844ef2161824618452159a3af2b68ed53cd1" translate="yes" xml:space="preserve">
          <source>Writes the length specifier</source>
          <target state="translated">写入长度指定器</target>
        </trans-unit>
        <trans-unit id="79b94957d73f7086cd89426d9124187e94a6296a" translate="yes" xml:space="preserve">
          <source>Writes the linked list</source>
          <target state="translated">写入链接列表</target>
        </trans-unit>
        <trans-unit id="38a32e8386cbc1650b8ae46e9dc5b1bda1227562" translate="yes" xml:space="preserve">
          <source>Writes the list</source>
          <target state="translated">编写列表</target>
        </trans-unit>
        <trans-unit id="58cbd55bbef64af3786753d81c071cf35a199251" translate="yes" xml:space="preserve">
          <source>Writes the list widget item</source>
          <target state="translated">编写列表小部件项目</target>
        </trans-unit>
        <trans-unit id="11cab43f0fd82c472542be56160f7b8df2e0552e" translate="yes" xml:space="preserve">
          <source>Writes the map</source>
          <target state="translated">编写地图</target>
        </trans-unit>
        <trans-unit id="943a1e5d359550395bfa1e550bb25e767a996b1a" translate="yes" xml:space="preserve">
          <source>Writes the match object</source>
          <target state="translated">写入匹配对象</target>
        </trans-unit>
        <trans-unit id="d8b97594b38fbf77f719a7d5f6adea237c0b8a5e" translate="yes" xml:space="preserve">
          <source>Writes the message</source>
          <target state="translated">写出信息</target>
        </trans-unit>
        <trans-unit id="658d49a8abc7bc7f70c770a51286a439f00e7383" translate="yes" xml:space="preserve">
          <source>Writes the multi map</source>
          <target state="translated">编写多地图</target>
        </trans-unit>
        <trans-unit id="2fe59830ef4bcd2ecf82109dfa8a071eba2e9cc6" translate="yes" xml:space="preserve">
          <source>Writes the object pointed to by</source>
          <target state="translated">写入由</target>
        </trans-unit>
        <trans-unit id="45f9e8a211c9a966d7f4541e3735b45af591d63b" translate="yes" xml:space="preserve">
          <source>Writes the pair</source>
          <target state="translated">写出对子</target>
        </trans-unit>
        <trans-unit id="5187adb708f018c1740eae35e2acf0dfc3dfcacb" translate="yes" xml:space="preserve">
          <source>Writes the palette,</source>
          <target state="translated">写出调色板。</target>
        </trans-unit>
        <trans-unit id="4bff2cc1ddde73b611f6078c2ea24fe0f2ed4a93" translate="yes" xml:space="preserve">
          <source>Writes the pattern options</source>
          <target state="translated">写入模式选项</target>
        </trans-unit>
        <trans-unit id="ebc84328ed1e97d4b9296adb4fefe8237f9b0763" translate="yes" xml:space="preserve">
          <source>Writes the pointer tracked by</source>
          <target state="translated">写入由</target>
        </trans-unit>
        <trans-unit id="4dea0c41c01128286534f3dcc69b8b9c4937b1fd" translate="yes" xml:space="preserve">
          <source>Writes the provided</source>
          <target state="translated">写入提供的</target>
        </trans-unit>
        <trans-unit id="2bddb6f616d55885ca9436c66cae99e76152bd5f" translate="yes" xml:space="preserve">
          <source>Writes the qlonglong</source>
          <target state="translated">编写qlonglong</target>
        </trans-unit>
        <trans-unit id="7d4598dfe7228f4b1656812ac98e7e7e00f97672" translate="yes" xml:space="preserve">
          <source>Writes the qulonglong</source>
          <target state="translated">编写qulonglong</target>
        </trans-unit>
        <trans-unit id="6e38f1aa77be7ee5502e2d903cbb6ee8ae83e21c" translate="yes" xml:space="preserve">
          <source>Writes the real number</source>
          <target state="translated">写实数</target>
        </trans-unit>
        <trans-unit id="889293f42a2022b881201a60cdfbb5830d468d1a" translate="yes" xml:space="preserve">
          <source>Writes the region</source>
          <target state="translated">写入区域</target>
        </trans-unit>
        <trans-unit id="33d0dc7fdf1ca60e5ef54fed2b0b5fd279f534ac" translate="yes" xml:space="preserve">
          <source>Writes the regular expression</source>
          <target state="translated">编写正则表达式</target>
        </trans-unit>
        <trans-unit id="8a484815416b5f2ec66655897a6a9df71c0b711b" translate="yes" xml:space="preserve">
          <source>Writes the revision</source>
          <target state="translated">编写修订本</target>
        </trans-unit>
        <trans-unit id="3337d35c7ef43b0efcc870a2967ca85cefbf79f1" translate="yes" xml:space="preserve">
          <source>Writes the server's IDL to the specified file. The type library will have version x.y</source>
          <target state="translated">将服务器的IDL写入指定的文件中。类型库将有x.y版本。</target>
        </trans-unit>
        <trans-unit id="c19b19f7c8d235b9b075e819068b67eca6b8633a" translate="yes" xml:space="preserve">
          <source>Writes the set of Diffie-Hellman parameters in</source>
          <target state="translated">将Diffie-Hellman参数集写到</target>
        </trans-unit>
        <trans-unit id="5aac077604aa282b70dfc583eecc6ddf6b3a428f" translate="yes" xml:space="preserve">
          <source>Writes the severity</source>
          <target state="translated">写出严重性</target>
        </trans-unit>
        <trans-unit id="ead2b1002f5667562815e4f585a55bb3290cbbf1" translate="yes" xml:space="preserve">
          <source>Writes the signed 64-bit integer,</source>
          <target state="translated">写入带符号的64位整数。</target>
        </trans-unit>
        <trans-unit id="68b9a0fa6776b20b6d69d131d8eccb57573bb736" translate="yes" xml:space="preserve">
          <source>Writes the signed int</source>
          <target state="translated">写入签名的int</target>
        </trans-unit>
        <trans-unit id="28dbb3c064c786a8bc537f88672d2a515397f830" translate="yes" xml:space="preserve">
          <source>Writes the signed integer,</source>
          <target state="translated">写出有符号的整数。</target>
        </trans-unit>
        <trans-unit id="7fc6de7cffaa5d7b31fbf0853c6cdf202418ba5f" translate="yes" xml:space="preserve">
          <source>Writes the signed long</source>
          <target state="translated">写下签名长</target>
        </trans-unit>
        <trans-unit id="3d1f0c776206594b0b6ceb65dab3974d36193110" translate="yes" xml:space="preserve">
          <source>Writes the signed long integer,</source>
          <target state="translated">写入有符号的长整数。</target>
        </trans-unit>
        <trans-unit id="f86a7cf00c84f67d7e8edad1a97567b6b0927001" translate="yes" xml:space="preserve">
          <source>Writes the signed short integer,</source>
          <target state="translated">写入有符号的短整数。</target>
        </trans-unit>
        <trans-unit id="9d3df5d3867b2c6d23aa26ffee9a2bbbc65a7a6e" translate="yes" xml:space="preserve">
          <source>Writes the size</source>
          <target state="translated">写出尺寸</target>
        </trans-unit>
        <trans-unit id="22bb1f0b8112426da03f2a0774b613dd2a71cf1b" translate="yes" xml:space="preserve">
          <source>Writes the source</source>
          <target state="translated">写出源头</target>
        </trans-unit>
        <trans-unit id="bfaa4ab797cc6812f709879b144cf2d06a598e79" translate="yes" xml:space="preserve">
          <source>Writes the string</source>
          <target state="translated">写入字符串</target>
        </trans-unit>
        <trans-unit id="3e771e32b4dc041b8627ecb715da1eb1c35df38b" translate="yes" xml:space="preserve">
          <source>Writes the string view,</source>
          <target state="translated">写入字符串视图。</target>
        </trans-unit>
        <trans-unit id="5b84fd428fa3b663e3102bd8b8100acd55aa2a3c" translate="yes" xml:space="preserve">
          <source>Writes the string,</source>
          <target state="translated">写出字符串。</target>
        </trans-unit>
        <trans-unit id="af33abba9d4dbcac8d96209a69443cc4a9ad8a8b" translate="yes" xml:space="preserve">
          <source>Writes the table widget item</source>
          <target state="translated">写入表格小部件项目</target>
        </trans-unit>
        <trans-unit id="2b6ae9cbcf6751cc32a4d53a301cdde9ac6b0690" translate="yes" xml:space="preserve">
          <source>Writes the texture border color into the first four elements of the array pointed to by</source>
          <target state="translated">将纹理边框的颜色写入数组的前四个元素中。</target>
        </trans-unit>
        <trans-unit id="64d0205b1bcf274edff889a0c62e3e20245ab18f" translate="yes" xml:space="preserve">
          <source>Writes the tree widget item</source>
          <target state="translated">写入树状小部件项目</target>
        </trans-unit>
        <trans-unit id="788c2d732547cf55a23a281364ca6e872d1a1f10" translate="yes" xml:space="preserve">
          <source>Writes the type</source>
          <target state="translated">写入类型</target>
        </trans-unit>
        <trans-unit id="776314055a904f3775d55c1afdeb3c30e44df099" translate="yes" xml:space="preserve">
          <source>Writes the u'\0'-terminated UTF-16 string,</source>
          <target state="translated">写入以u'/0'结束的UTF-16字符串。</target>
        </trans-unit>
        <trans-unit id="145d2f7c1123081204cd3e1587a1f89b0c3e8b0b" translate="yes" xml:space="preserve">
          <source>Writes the unsigned int</source>
          <target state="translated">写入无符号int</target>
        </trans-unit>
        <trans-unit id="30d2f666cacf508f3812c0148d67514a78dde8f0" translate="yes" xml:space="preserve">
          <source>Writes the unsigned long</source>
          <target state="translated">写入无符号的长</target>
        </trans-unit>
        <trans-unit id="51b723ee219b1d7d1e85e9618e0be8a75242ac04" translate="yes" xml:space="preserve">
          <source>Writes the unsigned short</source>
          <target state="translated">编写无符号短文</target>
        </trans-unit>
        <trans-unit id="26c8a1505e957d439d1a972d904486d9c17d09d9" translate="yes" xml:space="preserve">
          <source>Writes the values of &lt;code&gt;variablename&lt;/code&gt; to a file with the name &lt;code&gt;filename&lt;/code&gt;, each value on a separate line. If &lt;code&gt;variablename&lt;/code&gt; is not specified, creates an empty file. If &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;append&lt;/code&gt; and the file already exists, appends to it instead of replacing it.</source>
          <target state="translated">将 &lt;code&gt;variablename&lt;/code&gt; 名的值写入名称为 &lt;code&gt;filename&lt;/code&gt; 的文件中，每个值在单独的行中。如果未指定 &lt;code&gt;variablename&lt;/code&gt; ，则创建一个空文件。如果 &lt;code&gt;mode&lt;/code&gt; 为 &lt;code&gt;append&lt;/code&gt; 并且文件已经存在，则将其附加而不是替换它。</target>
        </trans-unit>
        <trans-unit id="5fe42d65c24a7934ad2209f811aaa759328747e1" translate="yes" xml:space="preserve">
          <source>Writes the vector</source>
          <target state="translated">写入矢量</target>
        </trans-unit>
        <trans-unit id="3a1fd72a711ddaa5b912f95994f964de76a468f9" translate="yes" xml:space="preserve">
          <source>Writes the version number</source>
          <target state="translated">写出版本号</target>
        </trans-unit>
        <trans-unit id="498fab632878e50fbd0bf02861ad4fef7ee07fec" translate="yes" xml:space="preserve">
          <source>Writes then unsigned 64-bit integer,</source>
          <target state="translated">然后写入无符号64位整数。</target>
        </trans-unit>
        <trans-unit id="6892c81df39097cab7fa18494eb6471b90da7c15" translate="yes" xml:space="preserve">
          <source>Writes then unsigned integer,</source>
          <target state="translated">然后写入无符号整数。</target>
        </trans-unit>
        <trans-unit id="4baa1c48b27d0ed1432b1ffbd802a3a5de83b469" translate="yes" xml:space="preserve">
          <source>Writes then unsigned long integer,</source>
          <target state="translated">然后写入无符号长整数。</target>
        </trans-unit>
        <trans-unit id="17dfc1409067b67d9c847709d51d2fdeba54a677" translate="yes" xml:space="preserve">
          <source>Writes then unsigned short integer,</source>
          <target state="translated">然后写入无符号短整数。</target>
        </trans-unit>
        <trans-unit id="5942a1aef15ef89b940c959eab8fe51c6697d64a" translate="yes" xml:space="preserve">
          <source>Writes up to</source>
          <target state="translated">写到</target>
        </trans-unit>
        <trans-unit id="7e42b6760f325866079129e54bcf7ae70dadf960" translate="yes" xml:space="preserve">
          <source>Writes url</source>
          <target state="translated">编写网址</target>
        </trans-unit>
        <trans-unit id="aaa6468cd30d9d842ea9a46786aa401ad44de066" translate="yes" xml:space="preserve">
          <source>Write|Read</source>
          <target state="translated">Write|Read</target>
        </trans-unit>
        <trans-unit id="88e911fb547c1c35735cb2834ba2cb35a37ef9c5" translate="yes" xml:space="preserve">
          <source>Writing Custom Post-Processing Effects</source>
          <target state="translated">撰写自定义后期处理效果</target>
        </trans-unit>
        <trans-unit id="29f055e135597bcdc084a3a94070a10d076bcc22" translate="yes" xml:space="preserve">
          <source>Writing Custom Types to a Stream</source>
          <target state="translated">将自定义类型写入一个流</target>
        </trans-unit>
        <trans-unit id="469b1f8873498de485e6c8f565f8f7d313eb6b92" translate="yes" xml:space="preserve">
          <source>Writing Documentation</source>
          <target state="translated">撰写文件</target>
        </trans-unit>
        <trans-unit id="ef4b29e5dab91f312910e3670b761147a12b9996" translate="yes" xml:space="preserve">
          <source>Writing Make Rules for Invoking &lt;code&gt;moc&lt;/code&gt;</source>
          <target state="translated">编写用于调用 &lt;code&gt;moc&lt;/code&gt; 的制作规则</target>
        </trans-unit>
        <trans-unit id="875507c37e67131f5c33815a6836f224c904e859" translate="yes" xml:space="preserve">
          <source>Writing Portable Shaders</source>
          <target state="translated">编写便携式着色器</target>
        </trans-unit>
        <trans-unit id="8aa7fa6f6753923159ac432b486441a173db4905" translate="yes" xml:space="preserve">
          <source>Writing Reliable Tests</source>
          <target state="translated">编写可靠的测试</target>
        </trans-unit>
        <trans-unit id="7afa316d0704e1409580ccc58294f1b89d4a3e57" translate="yes" xml:space="preserve">
          <source>Writing Source Code for Translation</source>
          <target state="translated">编写翻译源码</target>
        </trans-unit>
        <trans-unit id="8c2198697b7ac33b561f084d30817c777b83cebe" translate="yes" xml:space="preserve">
          <source>Writing Testable Code</source>
          <target state="translated">编写可测试的代码</target>
        </trans-unit>
        <trans-unit id="d64b67494dcdc32f9bef58631be9df6229f11e72" translate="yes" xml:space="preserve">
          <source>Writing a Custom Layout</source>
          <target state="translated">编写自定义布局</target>
        </trans-unit>
        <trans-unit id="919642997eaf1a8f3a5b7d58c84aad519fc1d79a" translate="yes" xml:space="preserve">
          <source>Writing a QPA plugin</source>
          <target state="translated">编写QPA插件</target>
        </trans-unit>
        <trans-unit id="b03d7974d29e2e7585188a29518eb954d5d496c3" translate="yes" xml:space="preserve">
          <source>Writing a SQL plugin is achieved by subclassing this base class, reimplementing the pure virtual function &lt;a href=&quot;qsqldriverplugin#create&quot;&gt;create&lt;/a&gt;(), and exporting the class with the &lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro. See the SQL plugins that come with Qt for example implementations (in the &lt;code&gt;plugins/src/sqldrivers&lt;/code&gt; subdirectory of the source distribution).</source>
          <target state="translated">编写SQL插件是通过对该基类进行子类化，重新实现纯虚函数&lt;a href=&quot;qsqldriverplugin#create&quot;&gt;create&lt;/a&gt;（）以及使用&lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;（）宏导出该类来实现的。有关示例实现，请参见Qt随附的SQL插件（在源发行版的 &lt;code&gt;plugins/src/sqldrivers&lt;/code&gt; 子目录中）。</target>
        </trans-unit>
        <trans-unit id="77687d5d4834efa9b7973b3b4330300a2712dc26" translate="yes" xml:space="preserve">
          <source>Writing a SQL plugin is achieved by subclassing this base class, reimplementing the pure virtual function &lt;a href=&quot;qsqldriverplugin#create&quot;&gt;create&lt;/a&gt;(), and exporting the class with the &lt;a href=&quot;qtplugin#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro. See the SQL plugins that come with Qt for example implementations (in the &lt;code&gt;plugins/src/sqldrivers&lt;/code&gt; subdirectory of the source distribution).</source>
          <target state="translated">编写SQL插件是通过对该基类进行子类化，重新实现纯虚函数&lt;a href=&quot;qsqldriverplugin#create&quot;&gt;create&lt;/a&gt;（）以及使用&lt;a href=&quot;qtplugin#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;（）宏导出该类来实现的。有关示例实现，请参见Qt附带的SQL插件（在源发行版的 &lt;code&gt;plugins/src/sqldrivers&lt;/code&gt; 子目录中）。</target>
        </trans-unit>
        <trans-unit id="c522c9d8512934c6300f1beb33e3e19b9d3c2a76" translate="yes" xml:space="preserve">
          <source>Writing a audio plugin is achieved by subclassing this base class, reimplementing the pure virtual functions &lt;a href=&quot;qaudiosystemplugin#availableDevices&quot;&gt;availableDevices&lt;/a&gt;(), &lt;a href=&quot;qaudiosystemplugin#createInput&quot;&gt;createInput&lt;/a&gt;(), &lt;a href=&quot;qaudiosystemplugin#createOutput&quot;&gt;createOutput&lt;/a&gt;() and &lt;a href=&quot;qaudiosystemplugin#createDeviceInfo&quot;&gt;createDeviceInfo&lt;/a&gt;() then exporting the class with the &lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro.</source>
          <target state="translated">编写音频插件的方法是，通过对该基类进行子类化，重新实现纯虚函数&lt;a href=&quot;qaudiosystemplugin#availableDevices&quot;&gt;availableDevices&lt;/a&gt;（），&lt;a href=&quot;qaudiosystemplugin#createInput&quot;&gt;createInput&lt;/a&gt;（），&lt;a href=&quot;qaudiosystemplugin#createOutput&quot;&gt;createOutput&lt;/a&gt;（）和&lt;a href=&quot;qaudiosystemplugin#createDeviceInfo&quot;&gt;createDeviceInfo&lt;/a&gt;（），然后使用&lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;（）宏导出该类来实现。</target>
        </trans-unit>
        <trans-unit id="2f548c55a18f59937a3102c1c88cc1a1c17d3701" translate="yes" xml:space="preserve">
          <source>Writing a audio plugin is achieved by subclassing this base class, reimplementing the pure virtual functions &lt;a href=&quot;qaudiosystemplugin#availableDevices&quot;&gt;availableDevices&lt;/a&gt;(), &lt;a href=&quot;qaudiosystemplugin#createInput&quot;&gt;createInput&lt;/a&gt;(), &lt;a href=&quot;qaudiosystemplugin#createOutput&quot;&gt;createOutput&lt;/a&gt;() and &lt;a href=&quot;qaudiosystemplugin#createDeviceInfo&quot;&gt;createDeviceInfo&lt;/a&gt;() then exporting the class with the &lt;a href=&quot;qtplugin#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro.</source>
          <target state="translated">编写音频插件是通过对该基类进行子类化，重新实现纯虚函数&lt;a href=&quot;qaudiosystemplugin#availableDevices&quot;&gt;availableDevices&lt;/a&gt;（），&lt;a href=&quot;qaudiosystemplugin#createInput&quot;&gt;createInput&lt;/a&gt;（），&lt;a href=&quot;qaudiosystemplugin#createOutput&quot;&gt;createOutput&lt;/a&gt;（）和&lt;a href=&quot;qaudiosystemplugin#createDeviceInfo&quot;&gt;createDeviceInfo&lt;/a&gt;（），然后使用&lt;a href=&quot;qtplugin#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;（）宏导出该类来实现的。</target>
        </trans-unit>
        <trans-unit id="becf9cc14b42e7a9b854ba702086f0f903eaf48b" translate="yes" xml:space="preserve">
          <source>Writing a icon engine plugin is achieved by subclassing this base class, reimplementing the pure virtual function &lt;a href=&quot;qiconengineplugin#create&quot;&gt;create&lt;/a&gt;(), and exporting the class with the &lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro.</source>
          <target state="translated">编写图标引擎插件是通过对该基类进行子类化，重新实现纯虚函数&lt;a href=&quot;qiconengineplugin#create&quot;&gt;create&lt;/a&gt;（）以及使用&lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;（）宏导出该类来实现的。</target>
        </trans-unit>
        <trans-unit id="a24480924181e95b73d5c25bfd32fb41f23f4a65" translate="yes" xml:space="preserve">
          <source>Writing a icon engine plugin is achieved by subclassing this base class, reimplementing the pure virtual function &lt;a href=&quot;qiconengineplugin#create&quot;&gt;create&lt;/a&gt;(), and exporting the class with the &lt;a href=&quot;qtplugin#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro.</source>
          <target state="translated">编写图标引擎插件是通过对该基类进行子类化，重新实现纯虚函数&lt;a href=&quot;qiconengineplugin#create&quot;&gt;create&lt;/a&gt;（）以及使用&lt;a href=&quot;qtplugin#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;（）宏导出该类来实现的。</target>
        </trans-unit>
        <trans-unit id="8c187f718980ec1ffb275b1f30ca4a6c03873ca3" translate="yes" xml:space="preserve">
          <source>Writing a plugin involves these steps:</source>
          <target state="translated">编写一个插件包括以下步骤。</target>
        </trans-unit>
        <trans-unit id="5277b29e19e389b13f36e85812eb20117c883b65" translate="yes" xml:space="preserve">
          <source>Writing a plugin that extends Qt itself is achieved by subclassing the appropriate plugin base class, implementing a few functions, and adding a macro.</source>
          <target state="translated">编写一个扩展Qt本身的插件,是通过子类化相应的插件基类,实现一些函数,并添加一个宏来实现的。</target>
        </trans-unit>
        <trans-unit id="5412023178caaadd5b04ef891a72f8fbfe24f7cc" translate="yes" xml:space="preserve">
          <source>Writing a style plugin is achieved by subclassing this base class, reimplementing the pure virtual &lt;a href=&quot;qstyleplugin#create&quot;&gt;create&lt;/a&gt;() function, and exporting the class using the &lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro.</source>
          <target state="translated">编写样式插件是通过对该基类进行子类化，重新实现纯虚拟的&lt;a href=&quot;qstyleplugin#create&quot;&gt;create&lt;/a&gt;（）函数以及使用&lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;（）宏导出该类来实现的。</target>
        </trans-unit>
        <trans-unit id="c140a8a86ad8803e58a0300a7923ae1972a22a60" translate="yes" xml:space="preserve">
          <source>Writing a style plugin is achieved by subclassing this base class, reimplementing the pure virtual &lt;a href=&quot;qstyleplugin#create&quot;&gt;create&lt;/a&gt;() function, and exporting the class using the &lt;a href=&quot;qtplugin#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro.</source>
          <target state="translated">编写样式插件是通过对该基类进行子类化，重新实现纯虚拟的&lt;a href=&quot;qstyleplugin#create&quot;&gt;create&lt;/a&gt;（）函数以及使用&lt;a href=&quot;qtplugin#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;（）宏导出该类而实现的。</target>
        </trans-unit>
        <trans-unit id="d1bd1ff0c450ab1caff43ec3e071a5a613dfba7d" translate="yes" xml:space="preserve">
          <source>Writing an accessibility plugin is achieved by subclassing this base class, reimplementing the pure virtual function &lt;a href=&quot;qaccessibleplugin#create&quot;&gt;create&lt;/a&gt;(), and exporting the class with the &lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro.</source>
          <target state="translated">通过对该基类进行子类化，重新实现纯虚函数&lt;a href=&quot;qaccessibleplugin#create&quot;&gt;create&lt;/a&gt;（）以及使用&lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;（）宏导出该类，可以实现编写可访问性插件的功能。</target>
        </trans-unit>
        <trans-unit id="b9aceda473b12c8ea585645567e671f0e8f1b4ed" translate="yes" xml:space="preserve">
          <source>Writing an accessibility plugin is achieved by subclassing this base class, reimplementing the pure virtual function &lt;a href=&quot;qaccessibleplugin#create&quot;&gt;create&lt;/a&gt;(), and exporting the class with the &lt;a href=&quot;qtplugin#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro.</source>
          <target state="translated">通过对该基类进行子类化，重新实现纯虚函数&lt;a href=&quot;qaccessibleplugin#create&quot;&gt;create&lt;/a&gt;（）以及使用&lt;a href=&quot;qtplugin#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;（）宏导出该类，可以实现可访问性插件的编写。</target>
        </trans-unit>
        <trans-unit id="e26bf6ad6c6020f5f4873d9ea9678c5594acae14" translate="yes" xml:space="preserve">
          <source>Writing an image I/O plugin is achieved by subclassing this base class, reimplementing the pure virtual functions &lt;a href=&quot;qimageioplugin#capabilities&quot;&gt;capabilities&lt;/a&gt;() and &lt;a href=&quot;qimageioplugin#create&quot;&gt;create&lt;/a&gt;(), and exporting the class with the &lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro. See &lt;a href=&quot;plugins-howto&quot;&gt;How to Create Qt Plugins&lt;/a&gt; for details.</source>
          <target state="translated">编写图像I / O插件是通过对该基类进行子类化，重新实现纯虚函数&lt;a href=&quot;qimageioplugin#capabilities&quot;&gt;功能&lt;/a&gt;（）和&lt;a href=&quot;qimageioplugin#create&quot;&gt;create&lt;/a&gt;（），以及使用&lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;（）宏导出该类来实现的。有关详细信息，请参见&lt;a href=&quot;plugins-howto&quot;&gt;如何创建Qt插件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="decd2d3883621a87d2bf08d2cd792f1db3dd7e20" translate="yes" xml:space="preserve">
          <source>Writing an image I/O plugin is achieved by subclassing this base class, reimplementing the pure virtual functions &lt;a href=&quot;qimageioplugin#capabilities&quot;&gt;capabilities&lt;/a&gt;() and &lt;a href=&quot;qimageioplugin#create&quot;&gt;create&lt;/a&gt;(), and exporting the class with the &lt;a href=&quot;qtplugin#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro. See &lt;a href=&quot;plugins-howto&quot;&gt;How to Create Qt Plugins&lt;/a&gt; for details.</source>
          <target state="translated">编写图像I / O插件是通过对该基类进行子类化，重新实现纯虚函数&lt;a href=&quot;qimageioplugin#capabilities&quot;&gt;功能&lt;/a&gt;（）和&lt;a href=&quot;qimageioplugin#create&quot;&gt;create&lt;/a&gt;（），以及使用&lt;a href=&quot;qtplugin#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;（）宏导出该类来实现的。有关详细信息，请参见&lt;a href=&quot;plugins-howto&quot;&gt;如何创建Qt插件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fed6af8a3a083a10466728d1f1afc199e3a3487d" translate="yes" xml:space="preserve">
          <source>Writing an picture format plugin is achieved by subclassing this base class, reimplementing the pure virtual functions &lt;a href=&quot;qpictureformatplugin#loadPicture&quot;&gt;loadPicture&lt;/a&gt;(), &lt;a href=&quot;qpictureformatplugin#savePicture&quot;&gt;savePicture&lt;/a&gt;(), and &lt;a href=&quot;qpictureformatplugin#installIOHandler&quot;&gt;installIOHandler&lt;/a&gt;(), and exporting the class with the &lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro.</source>
          <target state="translated">通过子类化此基类，重新实现纯虚函数&lt;a href=&quot;qpictureformatplugin#loadPicture&quot;&gt;loadPicture&lt;/a&gt;（），&lt;a href=&quot;qpictureformatplugin#savePicture&quot;&gt;savePicture&lt;/a&gt;（）和&lt;a href=&quot;qpictureformatplugin#installIOHandler&quot;&gt;installIOHandler&lt;/a&gt;（），并使用&lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;（）宏导出该类，可以编写图片格式的插件。</target>
        </trans-unit>
        <trans-unit id="35b8b4b90d8e4535dc65c7a94cdb8d447997c62c" translate="yes" xml:space="preserve">
          <source>Writing an picture format plugin is achieved by subclassing this base class, reimplementing the pure virtual functions &lt;a href=&quot;qpictureformatplugin#loadPicture&quot;&gt;loadPicture&lt;/a&gt;(), &lt;a href=&quot;qpictureformatplugin#savePicture&quot;&gt;savePicture&lt;/a&gt;(), and &lt;a href=&quot;qpictureformatplugin#installIOHandler&quot;&gt;installIOHandler&lt;/a&gt;(), and exporting the class with the &lt;a href=&quot;qtplugin#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro.</source>
          <target state="translated">通过子类化此基类，重新实现纯虚函数&lt;a href=&quot;qpictureformatplugin#loadPicture&quot;&gt;loadPicture&lt;/a&gt;（），&lt;a href=&quot;qpictureformatplugin#savePicture&quot;&gt;savePicture&lt;/a&gt;（）和&lt;a href=&quot;qpictureformatplugin#installIOHandler&quot;&gt;installIOHandler&lt;/a&gt;（），并使用&lt;a href=&quot;qtplugin#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;（）宏导出该类，可以编写图片格式的插件。</target>
        </trans-unit>
        <trans-unit id="7de6cb1fd38303e5e608ef4b1428fd02bf54c255" translate="yes" xml:space="preserve">
          <source>Writing axis steps using the longhand form with axis specifiers and node tests is semantically clear but syntactically verbose. The shorthand form is easy to learn and, once you learn it, just as easy to read. In the shorthand form, the axis specifier and node test are implied by the syntax. XQueries are normally written in the shorthand form. Here is a table of some frequently used shorthand forms:</source>
          <target state="translated">使用带轴指定符和节点测试的长手形式编写轴步骤,语义上很清晰,但语法上很啰嗦。速记形式很容易学习,一旦学会了,也同样容易阅读。在速记形式中,轴指定符和节点测试是由语法隐含的。XQueries通常用速记形式编写。下面是一些常用的速记形式的表格。</target>
        </trans-unit>
        <trans-unit id="f7d2dad5c15fc256704acd26e9c40c582a9b8825" translate="yes" xml:space="preserve">
          <source>Writing cross-platform international software with Qt is a gentle, incremental process. Your software can become internationalized in the stages described in the following sections. For more information about internalizing Qt Quick application, see &lt;a href=&quot;qtquick-internationalization&quot;&gt;Internationalization and Localization with Qt Quick&lt;/a&gt;.</source>
          <target state="translated">使用Qt编写跨平台的国际软件是一个渐进的过程。您的软件可以按照以下各节所述的步骤进行国际化。有关内部化Qt Quick应用程序的更多信息，请参见&lt;a href=&quot;qtquick-internationalization&quot;&gt;使用Qt Quick进行国际化和本地化&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="47d805905509ed856e82734c5f3408335202ab43" translate="yes" xml:space="preserve">
          <source>Writing cross-platform international software with Qt is a gentle, incremental process. Your software can become internationalized in the stages described in the following sections. For more information about internalizing Qt Quick application, see &lt;a href=&quot;qtquick-internationalization#&quot;&gt;Internationalization and Localization with Qt Quick&lt;/a&gt;.</source>
          <target state="translated">使用Qt编写跨平台的国际软件是一个渐进的过程。您的软件可以按照以下各节所述的步骤进行国际化。有关内部化Qt Quick应用程序的更多信息，请参见&lt;a href=&quot;qtquick-internationalization#&quot;&gt;使用Qt Quick进行国际化和本地化&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a71c2938c286d22ff60ff3d3a4d268ba18ec8c7b" translate="yes" xml:space="preserve">
          <source>Writing or reading from the device resulted in an error.</source>
          <target state="translated">从设备上写或读导致错误。</target>
        </trans-unit>
        <trans-unit id="f9dee0249af03911723455d5b554202517ccd7e2" translate="yes" xml:space="preserve">
          <source>Writing the Code</source>
          <target state="translated">编写代码</target>
        </trans-unit>
        <trans-unit id="562b8762941efe82a0fd8cbac4b46bedbf14a326" translate="yes" xml:space="preserve">
          <source>Wu Yi &amp;lt;wuyi@hancom.com&amp;gt; ported the HKSCS-1999 QBig5hkscsCodec to Qt-3.0.1 in March 2002.</source>
          <target state="translated">Wu Yi &amp;lt;wuyi@hancom.com&amp;gt;于2002年3月将HKSCS-1999 QBig5hkscsCodec移植到Qt-3.0.1。</target>
        </trans-unit>
        <trans-unit id="57634a456dec1dd5d1923105a9ef1676398ff473" translate="yes" xml:space="preserve">
          <source>X C Binding library</source>
          <target state="translated">X C 装订库</target>
        </trans-unit>
        <trans-unit id="f567d05b2bfdf094f84302e0adbb86851f7af932" translate="yes" xml:space="preserve">
          <source>X C Bindings for Fixes Extension</source>
          <target state="translated">用于修复扩展的X C绑定</target>
        </trans-unit>
        <trans-unit id="cdaa78c179d81f0793f9764e63d76e04e11dfb61" translate="yes" xml:space="preserve">
          <source>X C Bindings for ICCCM Protocol</source>
          <target state="translated">X C ICCCM协议的绑定</target>
        </trans-unit>
        <trans-unit id="bfb07eb80f7b5b3d894f8a082ea053901a5a1540" translate="yes" xml:space="preserve">
          <source>X C Bindings for Render extension</source>
          <target state="translated">X C Bindings for Render extension</target>
        </trans-unit>
        <trans-unit id="3ed2766ecf08c97ae7dcbcb02bdb8cb2bc8964ad" translate="yes" xml:space="preserve">
          <source>X C Bindings for Resize and Rotate Extension</source>
          <target state="translated">用于调整大小和旋转扩展的X C绑定。</target>
        </trans-unit>
        <trans-unit id="b5a3ab3144424b57827a23c7deb798d8e06c42a6" translate="yes" xml:space="preserve">
          <source>X C Bindings for Shape extension</source>
          <target state="translated">X C 形状扩展的绑定</target>
        </trans-unit>
        <trans-unit id="2dc9c20d7a173db9da6e99b31684d8cdf967e0ae" translate="yes" xml:space="preserve">
          <source>X C Bindings for Shared Memory Extension</source>
          <target state="translated">共享内存扩展的X C绑定</target>
        </trans-unit>
        <trans-unit id="887b74e110fa0d0befa749483885b17677e3f0eb" translate="yes" xml:space="preserve">
          <source>X C Bindings for Sync Extension</source>
          <target state="translated">同步扩展的X C绑定</target>
        </trans-unit>
        <trans-unit id="c984534ab7a44892dd53bd1331c43884f4b6fbd1" translate="yes" xml:space="preserve">
          <source>X C Bindings for XKeyboard Extension</source>
          <target state="translated">用于X键盘扩展的X C绑定。</target>
        </trans-unit>
        <trans-unit id="381f4b64eab246bd64e6fc8ace5e5142def141b2" translate="yes" xml:space="preserve">
          <source>X Extensions</source>
          <target state="translated">X扩展部分</target>
        </trans-unit>
        <trans-unit id="58c33d932eb71455a0ea9ed90786cf3e777a0894" translate="yes" xml:space="preserve">
          <source>X Rendering Extension; used for anti-aliasing and alpha cursor support</source>
          <target state="translated">X 渲染扩展;用于抗锯齿和alpha光标支持。</target>
        </trans-unit>
        <trans-unit id="b17d18b1b9b653d4bc22000c22798990293db509" translate="yes" xml:space="preserve">
          <source>X Server helper</source>
          <target state="translated">X 服务器助手</target>
        </trans-unit>
        <trans-unit id="aaccf7573b3fb1abf8e6c09cb5d02d417c103e50" translate="yes" xml:space="preserve">
          <source>X Session Management</source>
          <target state="translated">X 会话管理</target>
        </trans-unit>
        <trans-unit id="5c554909390dbd01167ea64ad99b6e834939a344" translate="yes" xml:space="preserve">
          <source>X Window System (X11) support</source>
          <target state="translated">支持X窗口系统(X11)</target>
        </trans-unit>
        <trans-unit id="cec6777cbce64a84f53021184e25536182d95ebb" translate="yes" xml:space="preserve">
          <source>X-axis: pixel original luminance</source>
          <target state="translated">X轴:原始像素亮度</target>
        </trans-unit>
        <trans-unit id="4554bb23249db29d38bb731caf4c64faaa060ba4" translate="yes" xml:space="preserve">
          <source>X11</source>
          <target state="translated">X11</target>
        </trans-unit>
        <trans-unit id="82da9db2c590f108c94e361614919c6e5ba7505d" translate="yes" xml:space="preserve">
          <source>X11 Bitmap</source>
          <target state="translated">X11位图</target>
        </trans-unit>
        <trans-unit id="e7f8788005e5861a3270af9d6cfa5cdc6e7adbe6" translate="yes" xml:space="preserve">
          <source>X11 Input Extensions</source>
          <target state="translated">X11输入扩展</target>
        </trans-unit>
        <trans-unit id="4cff310adc9dbdd6199def0e9ba052ed0257bdc7" translate="yes" xml:space="preserve">
          <source>X11 License and Historical Permission Notice and Disclaimer</source>
          <target state="translated">X11许可和历史许可通知和免责声明</target>
        </trans-unit>
        <trans-unit id="2cb0c1ce051db62ae323443f18c9d56172884299" translate="yes" xml:space="preserve">
          <source>X11 Peculiarities</source>
          <target state="translated">X11的特点</target>
        </trans-unit>
        <trans-unit id="50b45badd91a34d3a80211700b8e9d9495273349" translate="yes" xml:space="preserve">
          <source>X11 Pixmap</source>
          <target state="translated">X11像素图</target>
        </trans-unit>
        <trans-unit id="d6f81a77d163226e377308772be815321e78e08e" translate="yes" xml:space="preserve">
          <source>X11 also has the concept of ownership; if you change the selection within a window, X11 will only notify the owner and the previous owner of the change, i.e. it will not notify all applications that the selection or clipboard data changed.</source>
          <target state="translated">X11还有一个所有权的概念,如果你在一个窗口内改变了选区,X11只会通知所有者和上一个所有者,即不会通知所有应用程序选区或剪贴板数据发生了变化。</target>
        </trans-unit>
        <trans-unit id="017d28f38cd1cefd1e2fcbe314d53ad405b52bf8" translate="yes" xml:space="preserve">
          <source>X11 and QWS (Qt for Embedded Linux): none.</source>
          <target state="translated">X11和QWS(Qt for Embedded Linux):无。</target>
        </trans-unit>
        <trans-unit id="09cb7f4f9631cc0de3c6cc38df3921984179de0a" translate="yes" xml:space="preserve">
          <source>X11 client-side library</source>
          <target state="translated">X11客户端库</target>
        </trans-unit>
        <trans-unit id="a595725324057791df6652927f8d9fafd47bd64c" translate="yes" xml:space="preserve">
          <source>X11 only (unless activated on Windows by a command line argument). A Mode_switch key on the keyboard is pressed.</source>
          <target state="translated">仅限X11(除非在Windows上通过命令行参数激活)。键盘上的Mode_switch键被按下。</target>
        </trans-unit>
        <trans-unit id="c27b7cdc103184eb25644c3ae648b9b1cb4dd875" translate="yes" xml:space="preserve">
          <source>X11 only (unless activated on Windows by a command line argument). A Mode_switch key on the keyboard must be pressed.</source>
          <target state="translated">仅限X11(除非在Windows上通过命令行参数激活)。必须按下键盘上的Mode_switch键。</target>
        </trans-unit>
        <trans-unit id="277d72a6f5f9a6f870ad4edae82bae9103e4f6b8" translate="yes" xml:space="preserve">
          <source>X11 provides no standard or easy way to get the frame geometry once the window is decorated. Qt solves this problem with nifty heuristics and clever code that works on a wide range of window managers that exist today. Don't be surprised if you find one where &lt;a href=&quot;qwidget#frameGeometry-prop&quot;&gt;QWidget::frameGeometry&lt;/a&gt;() returns wrong results though.</source>
          <target state="translated">窗户装饰后，X11没有提供标准或简便的方法来获得框架几何形状。 Qt通过巧妙的试探法和巧妙的代码解决了这个问题，这些代码可用于当今存在的各种窗口管理器。如果您发现&lt;a href=&quot;qwidget#frameGeometry-prop&quot;&gt;QWidget :: frameGeometry&lt;/a&gt;（）返回错误结果的地方，请不要感到惊讶。</target>
        </trans-unit>
        <trans-unit id="d5d38fcbab56951f13dd379ca5c0a8f3bf2a3522" translate="yes" xml:space="preserve">
          <source>X11 window managers that follow modern post-ICCCM specifications support full-screen mode properly.</source>
          <target state="translated">遵循现代后ICCCM规范的X11窗口管理程序可以正常支持全屏模式。</target>
        </trans-unit>
        <trans-unit id="ff8fe2a82c3d2c04789dafb9c7b93327e95367aa" translate="yes" xml:space="preserve">
          <source>X11, a desktop protocol from the 80s, no longer fits with how graphics hardware works today. It is large, complex, and lacks customizability. In fact, it is difficult to run a client fluidly with X11, and reach 60 fps without tearing. Wayland, in contrast, is easier to implement, has better performance, and contains all the necessary parts to run efficiently on modern graphics hardware. For embedded, multi-process systems on Linux, Wayland is the standard.</source>
          <target state="translated">X11是80年代的桌面协议,已经不符合今天图形硬件的工作方式。它庞大、复杂,缺乏可定制性。事实上,用X11流畅地运行客户端,达到60帧不撕裂是很难的。相比之下,Wayland更容易实现,性能更好,并且包含了所有必要的部分,可以在现代图形硬件上高效运行。对于Linux上的嵌入式多进程系统,Wayland是标准的。</target>
        </trans-unit>
        <trans-unit id="5693399258b96c1a388061172fb2bd6c11b126c0" translate="yes" xml:space="preserve">
          <source>X11-xcb</source>
          <target state="translated">X11-xcb</target>
        </trans-unit>
        <trans-unit id="1f2faaf3adf7d99d2aa19b99f3e4a838762e3a85" translate="yes" xml:space="preserve">
          <source>X11: This feature relies on the use of an X server that supports ARGB visuals and a compositing window manager.</source>
          <target state="translated">X11:该功能依赖于使用支持ARGB视觉效果的X服务器和合成窗口管理器。</target>
        </trans-unit>
        <trans-unit id="db63b785e6c4aae3fcffd92d4721b5d8c34a78d7" translate="yes" xml:space="preserve">
          <source>XAnimator (QML type)</source>
          <target state="translated">XAnimator(QML类型)</target>
        </trans-unit>
        <trans-unit id="eac50d91b922f5b082025b7f78a72ffaa5348870" translate="yes" xml:space="preserve">
          <source>XAnimator QML Type</source>
          <target state="translated">XAnimator QML类型</target>
        </trans-unit>
        <trans-unit id="a5de011c5990defae6a3ef0d0d63f0f9500b6c06" translate="yes" xml:space="preserve">
          <source>XBM</source>
          <target state="translated">XBM</target>
        </trans-unit>
        <trans-unit id="eee3887a0f50fc6c59805aa2c0e154ce90334d41" translate="yes" xml:space="preserve">
          <source>XBox One</source>
          <target state="translated">XBox One</target>
        </trans-unit>
        <trans-unit id="ca73dbab3d266853cc5649e233ffd845b5a52ba3" translate="yes" xml:space="preserve">
          <source>XCB</source>
          <target state="translated">XCB</target>
        </trans-unit>
        <trans-unit id="43584cc6bbc7d9379fafc3fe6465551bb2e6733d" translate="yes" xml:space="preserve">
          <source>XCB-XInput</source>
          <target state="translated">XCB-XInput</target>
        </trans-unit>
        <trans-unit id="c0aa9ef764d832b80428d756a731a94251b0e3a1" translate="yes" xml:space="preserve">
          <source>XML</source>
          <target state="translated">XML</target>
        </trans-unit>
        <trans-unit id="95ae68c898663c3a2d4bd002672b5144421f2aaa" translate="yes" xml:space="preserve">
          <source>XML 1.0 and XML Namespaces 1.0 are supported, as opposed to the 1.1 versions. When a strings is passed to a query as a &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;, the characters must be XML 1.0 characters. Otherwise, the behavior is undefined. This is not checked.</source>
          <target state="translated">与1.1版本相反，支持XML 1.0和XML命名空间1.0。当将字符串作为&lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;传递给查询时，字符必须为XML 1.0字符。否则，行为是不确定的。未选中。</target>
        </trans-unit>
        <trans-unit id="3d552208cdd1ead9008c1dcf3e6b83311ab65213" translate="yes" xml:space="preserve">
          <source>XML Model</source>
          <target state="translated">XML模型</target>
        </trans-unit>
        <trans-unit id="d647f348ffbbc7a4d48d8ae4bec579637ae0ee51" translate="yes" xml:space="preserve">
          <source>XML Processing</source>
          <target state="translated">XML处理</target>
        </trans-unit>
        <trans-unit id="186b8e7fe1ccfe27858b12117d8aeef51ef87896" translate="yes" xml:space="preserve">
          <source>XML Schema 1.0</source>
          <target state="translated">XML模式1.0</target>
        </trans-unit>
        <trans-unit id="b753c24568a8b5f367a44fe13c9ceb1e1d7a4d89" translate="yes" xml:space="preserve">
          <source>XML Schema Version</source>
          <target state="translated">XML模式版本</target>
        </trans-unit>
        <trans-unit id="13fbfb619ca2d055214115cab0c82644371837d9" translate="yes" xml:space="preserve">
          <source>XML Schema, version 2007/08</source>
          <target state="translated">XML Schema,2007/08版</target>
        </trans-unit>
        <trans-unit id="db988da9046c02185ba28222ac1c510bbcf8dba0" translate="yes" xml:space="preserve">
          <source>XML Streaming</source>
          <target state="translated">XML流</target>
        </trans-unit>
        <trans-unit id="90d310d394ad74af91e7d5e0b80b47680359f097" translate="yes" xml:space="preserve">
          <source>XML attributes</source>
          <target state="translated">XML属性</target>
        </trans-unit>
        <trans-unit id="434522424a8976a4187ab93399f2ce3b17a49a2c" translate="yes" xml:space="preserve">
          <source>XML compiler (qdbusxml2cpp)</source>
          <target state="translated">XML编译器(qdbusxml2cpp)</target>
        </trans-unit>
        <trans-unit id="821bce5d139f38f077bc5f2f2727452cf29d3cb8" translate="yes" xml:space="preserve">
          <source>XML file</source>
          <target state="translated">XML文件</target>
        </trans-unit>
        <trans-unit id="e628e3e0f678152f07c2af120e6f0290caff1bac" translate="yes" xml:space="preserve">
          <source>XML receiver</source>
          <target state="translated">XML接收器</target>
        </trans-unit>
        <trans-unit id="dc8ef7671c80dd20a848b0e20ac7fe899f9a42a2" translate="yes" xml:space="preserve">
          <source>XML writer with a simple streaming API</source>
          <target state="translated">具有简单的流媒体API的XML写作者</target>
        </trans-unit>
        <trans-unit id="1a1dc754a10525066d7d47c74e38c2ea14cb7e3f" translate="yes" xml:space="preserve">
          <source>XMLHttpRequest</source>
          <target state="translated">XMLHttpRequest</target>
        </trans-unit>
        <trans-unit id="b5424a87f3eef1889304805a5ca94f46f596caa2" translate="yes" xml:space="preserve">
          <source>XPM</source>
          <target state="translated">XPM</target>
        </trans-unit>
        <trans-unit id="4c7cf0638dfc6ee32ce9ab91efe799ca3d12ffcb" translate="yes" xml:space="preserve">
          <source>XPath 2.0</source>
          <target state="translated">XPath 2.0</target>
        </trans-unit>
        <trans-unit id="35c3e9e82ea362b96cf5149f4c7076c3d38fef42" translate="yes" xml:space="preserve">
          <source>XPath Conformance</source>
          <target state="translated">XPath一致性</target>
        </trans-unit>
        <trans-unit id="268ee6a84c69b814af2eeb99ca0a94b424e8cd00" translate="yes" xml:space="preserve">
          <source>XPath is a subset of &lt;a href=&quot;xmlprocessing&quot;&gt;XQuery&lt;/a&gt; and the implementation of Qt XML Patterns uses XPath 2.0 with &lt;a href=&quot;xmlprocessing&quot;&gt;XQuery&lt;/a&gt; 1.0.</source>
          <target state="translated">XPath是&lt;a href=&quot;xmlprocessing&quot;&gt;XQuery&lt;/a&gt;的子集，Qt XML模式的实现使用XPath 2.0和&lt;a href=&quot;xmlprocessing&quot;&gt;XQuery&lt;/a&gt; 1.0。</target>
        </trans-unit>
        <trans-unit id="09fc5f6b2500316c49efe34fb739a016c09ce1b8" translate="yes" xml:space="preserve">
          <source>XPath is a subset of XQuery and the implementation of Qt XML Patterns uses XPath 2.0 with XQuery 1.0.</source>
          <target state="translated">XPath是XQuery的一个子集,Qt XML Patterns的实现使用XPath 2.0与XQuery 1.0。</target>
        </trans-unit>
        <trans-unit id="02208a38d993e35ccaf0aa68dcc9f69ac5b2e20d" translate="yes" xml:space="preserve">
          <source>XQuery</source>
          <target state="translated">XQuery</target>
        </trans-unit>
        <trans-unit id="619403c963a480d2c5262e0edce783868768dd68" translate="yes" xml:space="preserve">
          <source>XQuery $variable type</source>
          <target state="translated">XQuery $variable type</target>
        </trans-unit>
        <trans-unit id="6c9019f8ea52a12dc7e51b230403c8088440701f" translate="yes" xml:space="preserve">
          <source>XQuery 1.0</source>
          <target state="translated">XQuery 1.0</target>
        </trans-unit>
        <trans-unit id="c7eba13ca1ef6ffebeaac1da9abce6608cd6d432" translate="yes" xml:space="preserve">
          <source>XQuery Sequences</source>
          <target state="translated">XQuery序列</target>
        </trans-unit>
        <trans-unit id="da0bea06c41b55849cad7de2d73aa327ce0a4649" translate="yes" xml:space="preserve">
          <source>XQuery is a language for traversing XML documents to select and aggregate items of interest and to transform them for output as XML or some other format. XPath is the</source>
          <target state="translated">XQuery是一种语言,用于遍历XML文档,以选择和聚合感兴趣的项目,并将它们转换为XML或其他格式的输出。XQuery是一种语言,用于遍历XML文档,以选择和汇总感兴趣的项目,并将它们转换为XML或其他格式的输出。</target>
        </trans-unit>
        <trans-unit id="dbf1c8c3910b46d01447abb919d2023cf2ba937f" translate="yes" xml:space="preserve">
          <source>XQuery is vulnerable to &lt;a href=&quot;http://en.wikipedia.org/wiki/Code_injection&quot;&gt;code injection attacks&lt;/a&gt; in the same way as the SQL language. If an XQuery is constructed by concatenating strings, and the strings come from user input, the constructed XQuery could be malevolent. The best way to prevent code injection attacks is to not construct XQueries from user-written strings, but only accept user data input using &lt;a href=&quot;qvariant&quot;&gt;QVariant&lt;/a&gt; and variable bindings. See &lt;a href=&quot;qxmlquery#bindVariable&quot;&gt;QXmlQuery::bindVariable&lt;/a&gt;().</source>
          <target state="translated">XQuery 与SQL语言一样容易受到&lt;a href=&quot;http://en.wikipedia.org/wiki/Code_injection&quot;&gt;代码注入攻击&lt;/a&gt;。如果通过串联字符串构造XQuery，并且这些字符串来自用户输入，则构造的XQuery可能是恶意的。防止代码注入攻击的最佳方法是不从用户编写的字符串构造XQueries，而仅接受使用&lt;a href=&quot;qvariant&quot;&gt;QVariant&lt;/a&gt;和变量绑定的用户数据输入。参见&lt;a href=&quot;qxmlquery#bindVariable&quot;&gt;QXmlQuery :: bindVariable&lt;/a&gt;（）。</target>
        </trans-unit>
        <trans-unit id="a10dcd1c8678922bb7279c014bea62be07d798c0" translate="yes" xml:space="preserve">
          <source>XQuery represents data items as</source>
          <target state="translated">XQuery将数据项表示为</target>
        </trans-unit>
        <trans-unit id="bc9553446abaeec0aaefda783a8d1effcba1188c" translate="yes" xml:space="preserve">
          <source>XQuery result item type</source>
          <target state="translated">XQuery结果项目类型</target>
        </trans-unit>
        <trans-unit id="1d9a64d52cf6743cf951d8852412a2a79f2d7d40" translate="yes" xml:space="preserve">
          <source>XRender</source>
          <target state="translated">XRender</target>
        </trans-unit>
        <trans-unit id="f0bd3420a03b103b7cf087aed2e5ab306767cd60" translate="yes" xml:space="preserve">
          <source>XSL Feature</source>
          <target state="translated">XSL功能</target>
        </trans-unit>
        <trans-unit id="258ad782ec1926f5004c5750504f4d5d4bc8bb15" translate="yes" xml:space="preserve">
          <source>XSLT 2.0</source>
          <target state="translated">XSLT 2.0</target>
        </trans-unit>
        <trans-unit id="49f085d81dc36fbae227a8ff3e110ffde11747db" translate="yes" xml:space="preserve">
          <source>XSLT 2.0 The selector, the restricted XPath pattern found in W3C XML Schema 1.1 for uniqueness contraints. Apart from restricting the syntax, the type check stage for the expression assumes a sequence of nodes to be the focus. The field, the restricted XPath pattern found in W3C XML Schema 1.1 for uniqueness contraints. Apart from restricting the syntax, the type check stage for the expression assumes a sequence of nodes to be the focus. Signifies XPath 2.0. Has no effect in the public API, it's used internally. As With XmlSchema11IdentityConstraintSelector and XmlSchema11IdentityConstraintField, the type check stage for the expression assumes a sequence of nodes to be the focus.</source>
          <target state="translated">XSLT 2.0 选择器,即W3C XML Schema 1.1中发现的用于唯一性约束的受限XPath模式。除了限制语法外,表达式的类型检查阶段假设节点序列是重点。字段,在W3C XML Schema 1.1中找到的用于唯一性约束的受限XPath模式。除了限制语法外,表达式的类型检查阶段假设一个节点序列是重点。标志着XPath 2.0。在公共API中没有影响,它在内部使用。与XmlSchema11IdentityConstraintSelector和XmlSchema11IdentityConstraintField一样,表达式的类型检查阶段假定一个节点序列是焦点。</target>
        </trans-unit>
        <trans-unit id="11ee7d5c786672ec7728c241c7480fb8e9208cc0" translate="yes" xml:space="preserve">
          <source>XSVG</source>
          <target state="translated">XSVG</target>
        </trans-unit>
        <trans-unit id="737486c7616cd3dc0e3517a6e1656c28c1533b8f" translate="yes" xml:space="preserve">
          <source>XYPoint (QML type)</source>
          <target state="translated">XYPoint (QML类型)</target>
        </trans-unit>
        <trans-unit id="9d30cff9309c778490dd9e626bf91e8c108cee89" translate="yes" xml:space="preserve">
          <source>XYPoint QML Type</source>
          <target state="translated">XYPoint QML类型</target>
        </trans-unit>
        <trans-unit id="0d1bdd1b2df05f7656115f9f020c678ba0f016bc" translate="yes" xml:space="preserve">
          <source>XYPoint.x</source>
          <target state="translated">XYPoint.x</target>
        </trans-unit>
        <trans-unit id="33df39b3d7138464daae0168eaafd6e43f9d02bb" translate="yes" xml:space="preserve">
          <source>XYPoint.y</source>
          <target state="translated">XYPoint.y</target>
        </trans-unit>
        <trans-unit id="67d65485c1706aa544097dde90ff2ab470f5cf3e" translate="yes" xml:space="preserve">
          <source>XYSeries</source>
          <target state="translated">XYSeries</target>
        </trans-unit>
        <trans-unit id="4a46a999767a0b120349f6316a4bd39f9c6506d1" translate="yes" xml:space="preserve">
          <source>XYSeries (QML type)</source>
          <target state="translated">XYSeries (QML类型)</target>
        </trans-unit>
        <trans-unit id="d929891a7c5fc762cec0578231e55f4d545eaef8" translate="yes" xml:space="preserve">
          <source>XYSeries QML Type</source>
          <target state="translated">XYS系列QML类型</target>
        </trans-unit>
        <trans-unit id="971c47f56bde1f43b389767788646ae819c4e5bb" translate="yes" xml:space="preserve">
          <source>XYSeries.append()</source>
          <target state="translated">XYSeries.append()</target>
        </trans-unit>
        <trans-unit id="8ed575352fba4e8a4ae40c88e01cea9afbf1bfe7" translate="yes" xml:space="preserve">
          <source>XYSeries.at()</source>
          <target state="translated">XYSeries.at()</target>
        </trans-unit>
        <trans-unit id="d29258aa7ddfe9b6a1def08b14c1a7056ed0275d" translate="yes" xml:space="preserve">
          <source>XYSeries.axisAngular</source>
          <target state="translated">XYSeries.axisAngular</target>
        </trans-unit>
        <trans-unit id="668e238cbc999797a3b1e72fa54024fa946514e1" translate="yes" xml:space="preserve">
          <source>XYSeries.axisRadial</source>
          <target state="translated">XYSeries.axisRadial</target>
        </trans-unit>
        <trans-unit id="06167749766f64510deb3a338ccad91c3db56008" translate="yes" xml:space="preserve">
          <source>XYSeries.axisX</source>
          <target state="translated">XYSeries.axisX</target>
        </trans-unit>
        <trans-unit id="a72de6b962334adedb6dbce58787268e2488bf21" translate="yes" xml:space="preserve">
          <source>XYSeries.axisXTop</source>
          <target state="translated">XYSeries.axisXTop</target>
        </trans-unit>
        <trans-unit id="48c5ca46a29eb303c1e28133272df5496e476318" translate="yes" xml:space="preserve">
          <source>XYSeries.axisY</source>
          <target state="translated">XYSeries.axisY</target>
        </trans-unit>
        <trans-unit id="b2fdea52ebb09146455ed332b369448eb35639fb" translate="yes" xml:space="preserve">
          <source>XYSeries.axisYRight</source>
          <target state="translated">XYSeries.axisYRight</target>
        </trans-unit>
        <trans-unit id="370a4221f94266b3e941ec7ceb9b351d2bdf218c" translate="yes" xml:space="preserve">
          <source>XYSeries.clicked()</source>
          <target state="translated">XYSeries.clicked()</target>
        </trans-unit>
        <trans-unit id="5730daa5c01071a450da5909516577afa93e319e" translate="yes" xml:space="preserve">
          <source>XYSeries.color</source>
          <target state="translated">XYSeries.color</target>
        </trans-unit>
        <trans-unit id="1f4dc406019936cf1f11dd720d8c16aac8308173" translate="yes" xml:space="preserve">
          <source>XYSeries.doubleClicked()</source>
          <target state="translated">XYSeries.doubleClicked()</target>
        </trans-unit>
        <trans-unit id="d63a16f16a87fd4b2d7af28846e8b0dca42c4c11" translate="yes" xml:space="preserve">
          <source>XYSeries.hovered()</source>
          <target state="translated">XYSeries.hovered()</target>
        </trans-unit>
        <trans-unit id="dd9e277ade1421f71f696bca6d17b5a1dd0c7a52" translate="yes" xml:space="preserve">
          <source>XYSeries.insert()</source>
          <target state="translated">XYSeries.insert()</target>
        </trans-unit>
        <trans-unit id="bc737e94e12aad8b2b015831ead6c982594ccc3c" translate="yes" xml:space="preserve">
          <source>XYSeries.pointAdded()</source>
          <target state="translated">XYSeries.pointAdded()</target>
        </trans-unit>
        <trans-unit id="378cec3d645ebef04c6ce06d6ca7fb7d0a401e13" translate="yes" xml:space="preserve">
          <source>XYSeries.pointLabelsClipping</source>
          <target state="translated">XYSeries.pointLabelsClipping</target>
        </trans-unit>
        <trans-unit id="405dcc53aba43ab6e1d5c5c89ae252d29720ff8c" translate="yes" xml:space="preserve">
          <source>XYSeries.pointLabelsColor</source>
          <target state="translated">XYSeries.pointLabelsColor</target>
        </trans-unit>
        <trans-unit id="23d51365f86a594292cb6ee8e3c538ed34a29c4f" translate="yes" xml:space="preserve">
          <source>XYSeries.pointLabelsFont</source>
          <target state="translated">XYSeries.pointLabelsFont</target>
        </trans-unit>
        <trans-unit id="e5bad906a58314fc5704a915171b726677ea41a8" translate="yes" xml:space="preserve">
          <source>XYSeries.pointLabelsFormat</source>
          <target state="translated">XYSeries.pointLabelsFormat</target>
        </trans-unit>
        <trans-unit id="d7cf99c873cbd922a9828dc0e82d66dc435d01e4" translate="yes" xml:space="preserve">
          <source>XYSeries.pointLabelsVisible</source>
          <target state="translated">XYSeries.pointLabelsVisible</target>
        </trans-unit>
        <trans-unit id="fc490f369467f5b39c0c776eb2e16fcee50e7b4e" translate="yes" xml:space="preserve">
          <source>XYSeries.pointRemoved()</source>
          <target state="translated">XYSeries.pointRemoved()</target>
        </trans-unit>
        <trans-unit id="5c0432121193938c35a606858991cbbe1ebf0b92" translate="yes" xml:space="preserve">
          <source>XYSeries.pointReplaced()</source>
          <target state="translated">XYSeries.pointReplaced()</target>
        </trans-unit>
        <trans-unit id="66106f5c1a705da67431940200c45b0a4262d46c" translate="yes" xml:space="preserve">
          <source>XYSeries.pointsRemoved()</source>
          <target state="translated">XYSeries.pointsRemoved()</target>
        </trans-unit>
        <trans-unit id="7328782f17836c5a37bbcc8ccf3e4c4c8b02b18e" translate="yes" xml:space="preserve">
          <source>XYSeries.pointsReplaced()</source>
          <target state="translated">XYSeries.pointsReplaced()</target>
        </trans-unit>
        <trans-unit id="bb87487be824f2c79d1bb39e828a0d26003cd977" translate="yes" xml:space="preserve">
          <source>XYSeries.pointsVisible</source>
          <target state="translated">XYSeries.pointsVisible</target>
        </trans-unit>
        <trans-unit id="ec8ea24fb75ca4ee2295c39257902b944326e2ba" translate="yes" xml:space="preserve">
          <source>XYSeries.pressed()</source>
          <target state="translated">XYSeries.pressed()</target>
        </trans-unit>
        <trans-unit id="5be9d88f249a7120e1811e3ef39decf28dd008c4" translate="yes" xml:space="preserve">
          <source>XYSeries.released()</source>
          <target state="translated">XYSeries.released()</target>
        </trans-unit>
        <trans-unit id="c2d99692330a3ec8600cb4f22e4ebf56bba4ece4" translate="yes" xml:space="preserve">
          <source>XYSeries.remove()</source>
          <target state="translated">XYSeries.remove()</target>
        </trans-unit>
        <trans-unit id="ef840b57a60a23899ef4680327918c1a5312576a" translate="yes" xml:space="preserve">
          <source>XYSeries.removePoints()</source>
          <target state="translated">XYSeries.removePoints()</target>
        </trans-unit>
        <trans-unit id="7854239ede6717bef6e035d2974e865945f7cd12" translate="yes" xml:space="preserve">
          <source>XYSeries.replace()</source>
          <target state="translated">XYSeries.replace()</target>
        </trans-unit>
        <trans-unit id="64d36ae69ab9210cfc1f0a43d303686988db04f8" translate="yes" xml:space="preserve">
          <source>Xcode</source>
          <target state="translated">Xcode</target>
        </trans-unit>
        <trans-unit id="64c33473833277994313273727dd28923b640723" translate="yes" xml:space="preserve">
          <source>Xcode 10.0 or later</source>
          <target state="translated">Xcode 10.0或更高版本</target>
        </trans-unit>
        <trans-unit id="77e3fde3f9225ce8f1c5b625fd3204f6490e9dad" translate="yes" xml:space="preserve">
          <source>Xcode 11 (10.15 SDK)</source>
          <target state="translated">Xcode 11 (10.15 SDK)</target>
        </trans-unit>
        <trans-unit id="62ab202d79138ba19899144c7f732afd20abf831" translate="yes" xml:space="preserve">
          <source>Xcode 11 (tvOS 13 SDK)</source>
          <target state="translated">Xcode 11 (tvOS 13 SDK)</target>
        </trans-unit>
        <trans-unit id="516aa9b342cd9539cf5dcadec6b56b824056f424" translate="yes" xml:space="preserve">
          <source>Xcode 11 (watchOS 6 SDK)</source>
          <target state="translated">Xcode 11 (watchOS 6 SDK)</target>
        </trans-unit>
        <trans-unit id="c57d76b27a7b8574fa87b78ed2e9162f8ca64128" translate="yes" xml:space="preserve">
          <source>Xcode 12 (10.15 SDK)</source>
          <target state="translated">Xcode 12 (10.15 SDK)</target>
        </trans-unit>
        <trans-unit id="673f53cbe671a1ccc00c3fadc8221a09f006f4fc" translate="yes" xml:space="preserve">
          <source>Xcode 12 (iOS 14 SDK)</source>
          <target state="translated">Xcode 12 (iOS 14 SDK)</target>
        </trans-unit>
        <trans-unit id="d51c001255547f24d9d36ad501e109f763f75a70" translate="yes" xml:space="preserve">
          <source>Xcode 8.3.3 or later</source>
          <target state="translated">Xcode 8.3.3或更高版本</target>
        </trans-unit>
        <trans-unit id="735588274ef149064cd26f3917454c9068d1495f" translate="yes" xml:space="preserve">
          <source>Xcode can be downloaded from Apple's &lt;a href=&quot;https://developer.apple.com/download/&quot;&gt;developer website&lt;/a&gt; (including older versions of Xcode). Once installed, choosing an Xcode installation is done using the &lt;code&gt;xcode-select&lt;/code&gt; tool.</source>
          <target state="translated">可以从Apple的&lt;a href=&quot;https://developer.apple.com/download/&quot;&gt;开发人员网站&lt;/a&gt;（包括较早版本的Xcode）下载Xcode。安装完成后，使用 &lt;code&gt;xcode-select&lt;/code&gt; 工具选择Xcode安装。</target>
        </trans-unit>
        <trans-unit id="176bda37b06043310846e8e278d1592f9353fde5" translate="yes" xml:space="preserve">
          <source>Xcode on does not matter. As long as Apple ships a given Xcode version that runs on your operating system, the build environment will be defined by that Xcode version.</source>
          <target state="translated">Xcode开启并不重要。只要Apple提供的Xcode版本能在你的操作系统上运行,构建环境将由Xcode版本来定义。</target>
        </trans-unit>
        <trans-unit id="33be511091c341bb02c09cb0651c80de6340841d" translate="yes" xml:space="preserve">
          <source>XdgDecorationManagerV1 (QML type)</source>
          <target state="translated">XdgDecorationManagerV1(QML类型)</target>
        </trans-unit>
        <trans-unit id="1ff7b687bcafb138ffc9956a956281b2efd911de" translate="yes" xml:space="preserve">
          <source>XdgDecorationManagerV1 QML Type</source>
          <target state="translated">XdgDecorationManagerV1 QML类型。</target>
        </trans-unit>
        <trans-unit id="6e6d06ac9a95782e5465253e9afcd039549f53c7" translate="yes" xml:space="preserve">
          <source>XdgDecorationManagerV1 corresponds to the Wayland interface, &lt;code&gt;zxdg_decoration_manager_v1&lt;/code&gt;.</source>
          <target state="translated">XdgDecorationManagerV1对应于Wayland接口 &lt;code&gt;zxdg_decoration_manager_v1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bdf528f70e2397c6a0dcf07947b88a9e91214022" translate="yes" xml:space="preserve">
          <source>XdgDecorationManagerV1.preferredMode</source>
          <target state="translated">XdgDecorationManagerV1.preferredMode</target>
        </trans-unit>
        <trans-unit id="b352dd5dcee370a1ef4ee869b4a44d2faf03048b" translate="yes" xml:space="preserve">
          <source>XdgOutputManagerV1 (QML type)</source>
          <target state="translated">XdgOutputManagerV1 (QML类型)</target>
        </trans-unit>
        <trans-unit id="aaa6fbcc0525b37bbedd386306f2b24e72327537" translate="yes" xml:space="preserve">
          <source>XdgOutputManagerV1 QML Type</source>
          <target state="translated">XdgOutputManagerV1 QML类型。</target>
        </trans-unit>
        <trans-unit id="45eca8986c6feec96bda80d0c8494c73a9a5dc8b" translate="yes" xml:space="preserve">
          <source>XdgOutputManagerV1 corresponds to the Wayland interface, &lt;code&gt;zxdg_output_manager_v1&lt;/code&gt;.</source>
          <target state="translated">XdgOutputManagerV1对应于Wayland接口 &lt;code&gt;zxdg_output_manager_v1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8989ed048584ce1ec89039a9f0356bc980f019e7" translate="yes" xml:space="preserve">
          <source>XdgPopup (QML type)</source>
          <target state="translated">XdgPopup (QML类型)</target>
        </trans-unit>
        <trans-unit id="311e12df3be17dc7cbb450104e7316abe7122b2c" translate="yes" xml:space="preserve">
          <source>XdgPopup QML Type</source>
          <target state="translated">XdgPopup QML类型</target>
        </trans-unit>
        <trans-unit id="b496cc1fd8ffaac846a423f47d229dc7a43dbccd" translate="yes" xml:space="preserve">
          <source>XdgPopup represents the popup specific parts of and xdg surface. &lt;a href=&quot;#details&quot;&gt;More...&lt;/a&gt;</source>
          <target state="translated">XdgPopup表示xdg表面的弹出特定部分。&lt;a href=&quot;#details&quot;&gt;更多的...&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6464a3a3889db17a530d719a9fab382364e4bffd" translate="yes" xml:space="preserve">
          <source>XdgPopup.anchorEdges</source>
          <target state="translated">XdgPopup.anchorEdges</target>
        </trans-unit>
        <trans-unit id="a0f90db53a203cfac2d98a36be1939eaaae9e554" translate="yes" xml:space="preserve">
          <source>XdgPopup.anchorRect</source>
          <target state="translated">XdgPopup.anchorRect</target>
        </trans-unit>
        <trans-unit id="e7740fbf0cd7ddd597f4382704bf06443cf0d7b9" translate="yes" xml:space="preserve">
          <source>XdgPopup.configuredGeometry</source>
          <target state="translated">XdgPopup.configuredGeometry</target>
        </trans-unit>
        <trans-unit id="834853f1aa6a19ffb46ea0b4a8b9ac8bab173b3e" translate="yes" xml:space="preserve">
          <source>XdgPopup.flipConstraints</source>
          <target state="translated">XdgPopup.flipConstraints</target>
        </trans-unit>
        <trans-unit id="506c50fcc18ffb1c58cf98b452564f5d0582e273" translate="yes" xml:space="preserve">
          <source>XdgPopup.gravityEdges</source>
          <target state="translated">XdgPopup.gravityEdges</target>
        </trans-unit>
        <trans-unit id="a2482e771685a0a90b57de841b81eaa18e8a5a96" translate="yes" xml:space="preserve">
          <source>XdgPopup.offset</source>
          <target state="translated">XdgPopup.offset</target>
        </trans-unit>
        <trans-unit id="ba206edd3f2eff85189de86188873f2c3dcec1ab" translate="yes" xml:space="preserve">
          <source>XdgPopup.parentXdgSurface</source>
          <target state="translated">XdgPopup.parentXdgSurface</target>
        </trans-unit>
        <trans-unit id="c5e4a9733af0ffe7fb64f981f4de0e4e39a62464" translate="yes" xml:space="preserve">
          <source>XdgPopup.positionerSize</source>
          <target state="translated">XdgPopup.positionerSize</target>
        </trans-unit>
        <trans-unit id="65d1ba497be800d04d19ce84e84b0bbbcde417d8" translate="yes" xml:space="preserve">
          <source>XdgPopup.resizeConstraints</source>
          <target state="translated">XdgPopup.resizeConstraints</target>
        </trans-unit>
        <trans-unit id="bd281a16222cac6b8dffaa375ce397f04b4e0a0d" translate="yes" xml:space="preserve">
          <source>XdgPopup.sendConfigure()</source>
          <target state="translated">XdgPopup.sendConfigure()</target>
        </trans-unit>
        <trans-unit id="d257fd29f307fe97d494c62cb3508a6b3367a9aa" translate="yes" xml:space="preserve">
          <source>XdgPopup.sendPopupDone()</source>
          <target state="translated">XdgPopup.sendPopupDone()</target>
        </trans-unit>
        <trans-unit id="62b228f19dabd6ac433976dbe81a533981c16c6e" translate="yes" xml:space="preserve">
          <source>XdgPopup.slideConstraints</source>
          <target state="translated">XdgPopup.slideConstraints</target>
        </trans-unit>
        <trans-unit id="9073568e6dcfbb64256da11f0101fcec38bc4129" translate="yes" xml:space="preserve">
          <source>XdgPopup.unconstrainedPosition</source>
          <target state="translated">XdgPopup.unconstrainedPosition</target>
        </trans-unit>
        <trans-unit id="9173f3b97eb178ad6fb7210e43a6d85588482383" translate="yes" xml:space="preserve">
          <source>XdgPopup.xdgSurface</source>
          <target state="translated">XdgPopup.xdgSurface</target>
        </trans-unit>
        <trans-unit id="5e0557e123b5805a57d21c31a142d5de7e663e2f" translate="yes" xml:space="preserve">
          <source>XdgPopupV5 (QML type)</source>
          <target state="translated">XdgPopupV5 (QML类型)</target>
        </trans-unit>
        <trans-unit id="b3e9af3059bab81863940d3eea5e709ce9e22c28" translate="yes" xml:space="preserve">
          <source>XdgPopupV5 QML Type</source>
          <target state="translated">XdgPopupV5 QML类型。</target>
        </trans-unit>
        <trans-unit id="e50968de535ff28aba88ca7640355fa3f0e277f6" translate="yes" xml:space="preserve">
          <source>XdgPopupV5.initialize()</source>
          <target state="translated">XdgPopupV5.initialize()</target>
        </trans-unit>
        <trans-unit id="b34332d4b144f3e64596d044fea6f5aedeaf1c3b" translate="yes" xml:space="preserve">
          <source>XdgPopupV5.parentSurface</source>
          <target state="translated">XdgPopupV5.parentSurface</target>
        </trans-unit>
        <trans-unit id="85d9837137ad3cbd84d93e2d7c13d2166d5cbcdb" translate="yes" xml:space="preserve">
          <source>XdgPopupV5.position</source>
          <target state="translated">XdgPopupV5.position</target>
        </trans-unit>
        <trans-unit id="f2b1c218007cf8816c5511f9abd22ea25cc5ce71" translate="yes" xml:space="preserve">
          <source>XdgPopupV5.shell</source>
          <target state="translated">XdgPopupV5.shell</target>
        </trans-unit>
        <trans-unit id="31ca9c5437fac748ea1ea4ec18347f4c363dd3d3" translate="yes" xml:space="preserve">
          <source>XdgPopupV5.surface</source>
          <target state="translated">XdgPopupV5.surface</target>
        </trans-unit>
        <trans-unit id="6fb32dc122ff62a06f42aa3b89e5b68305c44888" translate="yes" xml:space="preserve">
          <source>XdgPopupV6 (QML type)</source>
          <target state="translated">XdgPopupV6 (QML类型)</target>
        </trans-unit>
        <trans-unit id="a6686e510fcd25221293efa8da66f5ef50d10c10" translate="yes" xml:space="preserve">
          <source>XdgPopupV6 QML Type</source>
          <target state="translated">XdgPopupV6 QML类型。</target>
        </trans-unit>
        <trans-unit id="5460a72257e3b537359c731a2dfd5e06ad202422" translate="yes" xml:space="preserve">
          <source>XdgPopupV6 represents the popup specific parts of and xdg surface. &lt;a href=&quot;#details&quot;&gt;More...&lt;/a&gt;</source>
          <target state="translated">XdgPopupV6代表xdg表面的弹出特定部分。&lt;a href=&quot;#details&quot;&gt;更多的...&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="555fb29f34387e4ea7a6002e7ff667762968d444" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.anchorEdges</source>
          <target state="translated">XdgPopupV6.anchorEdges</target>
        </trans-unit>
        <trans-unit id="d67c31ea9a8c9145ca86ac17f5d8530b52a6bfb2" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.anchorRect</source>
          <target state="translated">XdgPopupV6.anchorRect</target>
        </trans-unit>
        <trans-unit id="8491afffffdf052ad667875e74608e4e1bc46b15" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.configuredGeometry</source>
          <target state="translated">XdgPopupV6.configuredGeometry</target>
        </trans-unit>
        <trans-unit id="dd23f1ae07c8c83d28f1a7341be47079768232dc" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.flipConstraints</source>
          <target state="translated">XdgPopupV6.flipConstraints</target>
        </trans-unit>
        <trans-unit id="33b913cf34b9a9462e3a85297478c055086db2cd" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.gravityEdges</source>
          <target state="translated">XdgPopupV6.gravityEdges</target>
        </trans-unit>
        <trans-unit id="845ee639958753efa8f1d48904f59c607f912668" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.offset</source>
          <target state="translated">XdgPopupV6.offset</target>
        </trans-unit>
        <trans-unit id="83c95943b40b41c05fb99375133b8f5321f72b35" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.parentXdgSurface</source>
          <target state="translated">XdgPopupV6.parentXdgSurface</target>
        </trans-unit>
        <trans-unit id="3fbaeb24286926b0576cb8c8ecd059c7fd4b7ed3" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.positionerSize</source>
          <target state="translated">XdgPopupV6.positionerSize</target>
        </trans-unit>
        <trans-unit id="3403c3f844fb684de6d26fa78320c4ecb7b891ee" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.resizeConstraints</source>
          <target state="translated">XdgPopupV6.resizeConstraints</target>
        </trans-unit>
        <trans-unit id="a8c3d6bfeb48c757587fe4fde49b489170646988" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.sendConfigure()</source>
          <target state="translated">XdgPopupV6.sendConfigure()</target>
        </trans-unit>
        <trans-unit id="6ea1a5a91251c92ad5c65b8c4f747a2bf4c3aea8" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.sendPopupDone()</source>
          <target state="translated">XdgPopupV6.sendPopupDone()</target>
        </trans-unit>
        <trans-unit id="f1ad5b4b93b6dc429182ae588fd2643688c44374" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.slideConstraints</source>
          <target state="translated">XdgPopupV6.slideConstraints</target>
        </trans-unit>
        <trans-unit id="f1d4046697f05170d5801fd0f50a086ef381c8a4" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.unconstrainedPosition</source>
          <target state="translated">XdgPopupV6.unconstrainedPosition</target>
        </trans-unit>
        <trans-unit id="fa5323759629df91b836b23b2e16e32cbf3699c3" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.xdgSurface</source>
          <target state="translated">XdgPopupV6.xdgSurface</target>
        </trans-unit>
        <trans-unit id="34e28c503681b397b07a79d4ef912521b264b185" translate="yes" xml:space="preserve">
          <source>XdgShell (QML type)</source>
          <target state="translated">XdgShell (QML类型)</target>
        </trans-unit>
        <trans-unit id="e29d6f2550afe78219ecee91587b10e5bb4811a8" translate="yes" xml:space="preserve">
          <source>XdgShell QML Type</source>
          <target state="translated">XdgShell QML类型</target>
        </trans-unit>
        <trans-unit id="ce89271f77d14a79a84d4ffe3e46acad73143d79" translate="yes" xml:space="preserve">
          <source>XdgShell corresponds to the Wayland interface, &lt;code&gt;xdg_shell&lt;/code&gt;.</source>
          <target state="translated">XdgShell对应于Wayland接口 &lt;code&gt;xdg_shell&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3cccd58ef610cf93e4a49fb4c4f92be8650fcc75" translate="yes" xml:space="preserve">
          <source>XdgShell.ping()</source>
          <target state="translated">XdgShell.ping()</target>
        </trans-unit>
        <trans-unit id="b05267c95d4a8d0f4cedeef80c662eba35368735" translate="yes" xml:space="preserve">
          <source>XdgShell.pong()</source>
          <target state="translated">XdgShell.pong()</target>
        </trans-unit>
        <trans-unit id="a313bc962307fa49ccb7d4d2eccadaf23c692c7e" translate="yes" xml:space="preserve">
          <source>XdgShell.popupCreated()</source>
          <target state="translated">XdgShell.popupCreated()</target>
        </trans-unit>
        <trans-unit id="3b4a45eb5d6fd6deb11b9050aae25b42b2da8649" translate="yes" xml:space="preserve">
          <source>XdgShell.toplevelCreated()</source>
          <target state="translated">XdgShell.toplevelCreated()</target>
        </trans-unit>
        <trans-unit id="009630eaca912339411601d9b2b30c116efd1926" translate="yes" xml:space="preserve">
          <source>XdgShell.xdgSurfaceCreated()</source>
          <target state="translated">XdgShell.xdgSurfaceCreated()</target>
        </trans-unit>
        <trans-unit id="2f9cf436df9e7322613fbd41fc0e6e63c9bf8e38" translate="yes" xml:space="preserve">
          <source>XdgShellV5 (QML type)</source>
          <target state="translated">XdgShellV5(QML类型)</target>
        </trans-unit>
        <trans-unit id="4ec22b904e6190c89bda9716c8ec995c492f19e1" translate="yes" xml:space="preserve">
          <source>XdgShellV5 QML Type</source>
          <target state="translated">XdgShellV5 QML类型</target>
        </trans-unit>
        <trans-unit id="9c788e0c957244a62160dd26ae75abe520b5499f" translate="yes" xml:space="preserve">
          <source>XdgShellV5 corresponds to the Wayland interface &lt;code&gt;xdg_shell&lt;/code&gt;.</source>
          <target state="translated">XdgShellV5对应于Wayland接口 &lt;code&gt;xdg_shell&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3d4587fe5588998f113d6cc6d7fd21bd998b99f" translate="yes" xml:space="preserve">
          <source>XdgShellV5.ping()</source>
          <target state="translated">XdgShellV5.ping()</target>
        </trans-unit>
        <trans-unit id="537d2a88dc3bdb22cb64f0204dfa365812211629" translate="yes" xml:space="preserve">
          <source>XdgShellV5.pong()</source>
          <target state="translated">XdgShellV5.pong()</target>
        </trans-unit>
        <trans-unit id="85eddfebbc4b7802ca5c1f15095f365e9826f384" translate="yes" xml:space="preserve">
          <source>XdgShellV5.xdgPopupCreated()</source>
          <target state="translated">XdgShellV5.xdgPopupCreated()</target>
        </trans-unit>
        <trans-unit id="0abf72ee113cddc2dac1964ba67e18772f89fbc2" translate="yes" xml:space="preserve">
          <source>XdgShellV5.xdgPopupRequested()</source>
          <target state="translated">XdgShellV5.xdgPopupRequested()</target>
        </trans-unit>
        <trans-unit id="e9776fa32c79a94e612355c13c10b44c2da306e9" translate="yes" xml:space="preserve">
          <source>XdgShellV5.xdgSurfaceCreated()</source>
          <target state="translated">XdgShellV5.xdgSurfaceCreated()</target>
        </trans-unit>
        <trans-unit id="44600b2b75004b9683afe1564c49a41f2fc9133a" translate="yes" xml:space="preserve">
          <source>XdgShellV5.xdgSurfaceRequested()</source>
          <target state="translated">XdgShellV5.xdgSurfaceRequested()</target>
        </trans-unit>
        <trans-unit id="770457c6593d6a8f2cdceb2763741cba93f62a1a" translate="yes" xml:space="preserve">
          <source>XdgShellV6 (QML type)</source>
          <target state="translated">XdgShellV6(QML类型)</target>
        </trans-unit>
        <trans-unit id="083bd52dfded9e90e1a24ba8bf9d11a69135bb6b" translate="yes" xml:space="preserve">
          <source>XdgShellV6 QML Type</source>
          <target state="translated">XdgShellV6 QML类型</target>
        </trans-unit>
        <trans-unit id="738919ea66ea597dae846edc603933f0922e5951" translate="yes" xml:space="preserve">
          <source>XdgShellV6 corresponds to the Wayland interface, &lt;code&gt;zxdg_shell_v6&lt;/code&gt;.</source>
          <target state="translated">XdgShellV6对应于Wayland接口 &lt;code&gt;zxdg_shell_v6&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="40b1df5597eb9025327010205d802c715fafee51" translate="yes" xml:space="preserve">
          <source>XdgShellV6.ping()</source>
          <target state="translated">XdgShellV6.ping()</target>
        </trans-unit>
        <trans-unit id="a875334aa652ec3aaccada751b526b7ce1e226cc" translate="yes" xml:space="preserve">
          <source>XdgShellV6.pong()</source>
          <target state="translated">XdgShellV6.pong()</target>
        </trans-unit>
        <trans-unit id="790fee2d11ff17cc037ac82a303686f41a6ada90" translate="yes" xml:space="preserve">
          <source>XdgShellV6.popupCreated()</source>
          <target state="translated">XdgShellV6.popupCreated()</target>
        </trans-unit>
        <trans-unit id="3a8f5da43ce0e932b584dfd0512a802f0c99112a" translate="yes" xml:space="preserve">
          <source>XdgShellV6.toplevelCreated()</source>
          <target state="translated">XdgShellV6.toplevelCreated()</target>
        </trans-unit>
        <trans-unit id="c8c535d36be34d4818dca19dcc6472fb6de911db" translate="yes" xml:space="preserve">
          <source>XdgShellV6.xdgSurfaceCreated()</source>
          <target state="translated">XdgShellV6.xdgSurfaceCreated()</target>
        </trans-unit>
        <trans-unit id="c6a13bbf1274fb87d4bae073146e6119ad8af6c7" translate="yes" xml:space="preserve">
          <source>XdgSurface (QML type)</source>
          <target state="translated">XdgSurface (QML类型)</target>
        </trans-unit>
        <trans-unit id="3557f83a6b3d421d77e35efedcbb8d898e5987cd" translate="yes" xml:space="preserve">
          <source>XdgSurface QML Type</source>
          <target state="translated">XdgSurface QML类型</target>
        </trans-unit>
        <trans-unit id="4898ad592beabce5260face26973ac2d1d1e9c31" translate="yes" xml:space="preserve">
          <source>XdgSurface provides desktop-style compositor-specific features to an xdg surface. &lt;a href=&quot;#details&quot;&gt;More...&lt;/a&gt;</source>
          <target state="translated">XdgSurface为xdg表面提供桌面风格的特定于合成器的功能。&lt;a href=&quot;#details&quot;&gt;更多的...&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f1645f7be468e9a06fb67937353e62290abc9e47" translate="yes" xml:space="preserve">
          <source>XdgSurface.initialize()</source>
          <target state="translated">XdgSurface.initialize()</target>
        </trans-unit>
        <trans-unit id="3fd6335df7ce0088fb74adff0461380177935493" translate="yes" xml:space="preserve">
          <source>XdgSurface.popup</source>
          <target state="translated">XdgSurface.popup</target>
        </trans-unit>
        <trans-unit id="21d356b0eba9a1886ad43a3d9fa637ec172cefd1" translate="yes" xml:space="preserve">
          <source>XdgSurface.shell</source>
          <target state="translated">XdgSurface.shell</target>
        </trans-unit>
        <trans-unit id="e686fd91e5b80521532fa01b37953bd05ddd93cc" translate="yes" xml:space="preserve">
          <source>XdgSurface.surface</source>
          <target state="translated">XdgSurface.surface</target>
        </trans-unit>
        <trans-unit id="ce52251e33e8a2699204073f6fb743dbe81de6a0" translate="yes" xml:space="preserve">
          <source>XdgSurface.toplevel</source>
          <target state="translated">XdgSurface.toplevel</target>
        </trans-unit>
        <trans-unit id="49943dc2c3ff51394f1c16b49502967235d1c822" translate="yes" xml:space="preserve">
          <source>XdgSurface.windowGeometry</source>
          <target state="translated">XdgSurface.windowGeometry</target>
        </trans-unit>
        <trans-unit id="0211f0c0e7fdde85235d37f1bb33c61dd921143e" translate="yes" xml:space="preserve">
          <source>XdgSurface.windowType</source>
          <target state="translated">XdgSurface.windowType</target>
        </trans-unit>
        <trans-unit id="6e3c6dd80e7b33e2d08435adf6f14cd94fec2674" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5 (QML type)</source>
          <target state="translated">XdgSurfaceV5(QML类型)</target>
        </trans-unit>
        <trans-unit id="f13276b35f5b081377e7a931d03c429c0e0e21b7" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5 QML Type</source>
          <target state="translated">XdgSurfaceV5 QML类型</target>
        </trans-unit>
        <trans-unit id="46256378be988cadc2a752c853aaf9d0b55b6fe3" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.ackConfigure()</source>
          <target state="translated">XdgSurfaceV5.ackConfigure()</target>
        </trans-unit>
        <trans-unit id="d86aee984ff8f5d3d1666860a110bc43d81efb52" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.initialize()</source>
          <target state="translated">XdgSurfaceV5.initialize()</target>
        </trans-unit>
        <trans-unit id="de7e6349ef55a32224172b4b413b0dd76a735dfa" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.parentSurface</source>
          <target state="translated">XdgSurfaceV5.parentSurface</target>
        </trans-unit>
        <trans-unit id="e1f809cc27ca3d17a2e7bbe6c4b8dd429a7f2eaf" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.sendClose()</source>
          <target state="translated">XdgSurfaceV5.sendClose()</target>
        </trans-unit>
        <trans-unit id="fd2313c0ca1c33e3e1d6d022e561074a94222b5e" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.sendConfigure()</source>
          <target state="translated">XdgSurfaceV5.sendConfigure()</target>
        </trans-unit>
        <trans-unit id="8217258b6b3a0948243699dbc26c6ff03a551ce1" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.setFullscreen()</source>
          <target state="translated">XdgSurfaceV5.setFullscreen()</target>
        </trans-unit>
        <trans-unit id="e577cabf1b5ea40ed30eb4109ca338b5d56d1da7" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.setMaximized()</source>
          <target state="translated">XdgSurfaceV5.setMaximized()</target>
        </trans-unit>
        <trans-unit id="cb9358121b05f9ac7bfe353fc97fd5d331772dfe" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.setMinimized()</source>
          <target state="translated">XdgSurfaceV5.setMinimized()</target>
        </trans-unit>
        <trans-unit id="d04691d8aa6bed5110c032dd5e1be267f465ef39" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.setTopLevel()</source>
          <target state="translated">XdgSurfaceV5.setTopLevel()</target>
        </trans-unit>
        <trans-unit id="6d7675359d1209a7386336a99e0e34045379273e" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.setTransient()</source>
          <target state="translated">XdgSurfaceV5.setTransient()</target>
        </trans-unit>
        <trans-unit id="0394e50bee2aa7fe0d27a9cf417973acfd75d374" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.shell</source>
          <target state="translated">XdgSurfaceV5.shell</target>
        </trans-unit>
        <trans-unit id="b479b8cfdff86dca5dddf029d64377a62968e871" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.showWindowMenu()</source>
          <target state="translated">XdgSurfaceV5.showWindowMenu()</target>
        </trans-unit>
        <trans-unit id="74ba6e87e6b6e16559ed73df1c9cad26ab2ef15b" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.startMove()</source>
          <target state="translated">XdgSurfaceV5.startMove()</target>
        </trans-unit>
        <trans-unit id="cd8555354728c8273311bd559870fedbe5bb70a5" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.startResize()</source>
          <target state="translated">XdgSurfaceV5.startResize()</target>
        </trans-unit>
        <trans-unit id="acee30c89c06ddb06e8f1178afde28c3b6c394e2" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.surface</source>
          <target state="translated">XdgSurfaceV5.surface</target>
        </trans-unit>
        <trans-unit id="749905199b349e91ce4ac24a236f5e422a47381c" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.title</source>
          <target state="translated">XdgSurfaceV5.title</target>
        </trans-unit>
        <trans-unit id="4babc1c2b51a67c33f9db73dfac5973258f1911e" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.unsetFullscreen()</source>
          <target state="translated">XdgSurfaceV5.unsetFullscreen()</target>
        </trans-unit>
        <trans-unit id="1dfe757f04f91207a56d87120bd0e4df0b1098b0" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.unsetMaximized()</source>
          <target state="translated">XdgSurfaceV5.unsetMaximized()</target>
        </trans-unit>
        <trans-unit id="f5b20cffafc89e3ea2eb461656a4b3f73901ff3d" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.windowType</source>
          <target state="translated">XdgSurfaceV5.windowType</target>
        </trans-unit>
        <trans-unit id="5390f0c80119e77eb8f898b1ce010a6da5ec6b2a" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6 (QML type)</source>
          <target state="translated">XdgSurfaceV6(QML类型)</target>
        </trans-unit>
        <trans-unit id="868a55e71f1ce1a277e17920edd0adc1fd7bf8b8" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6 QML Type</source>
          <target state="translated">XdgSurfaceV6 QML类型</target>
        </trans-unit>
        <trans-unit id="f7d8d69957cd69684457d5aebd21b1edc534ada7" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6 provides desktop-style compositor-specific features to an xdg surface. &lt;a href=&quot;#details&quot;&gt;More...&lt;/a&gt;</source>
          <target state="translated">XdgSurfaceV6为xdg表面提供桌面样式的特定于合成器的功能。&lt;a href=&quot;#details&quot;&gt;更多的...&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a121fd01401716c3cc09a1b014515f82e64175e3" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6.initialize()</source>
          <target state="translated">XdgSurfaceV6.initialize()</target>
        </trans-unit>
        <trans-unit id="dc10b1935363ffb04318067ee4ddcdab756161f9" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6.popup</source>
          <target state="translated">XdgSurfaceV6.popup</target>
        </trans-unit>
        <trans-unit id="d8d0cfdc18d435a9a4e60d27cd9cdeb301af23d9" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6.shell</source>
          <target state="translated">XdgSurfaceV6.shell</target>
        </trans-unit>
        <trans-unit id="f2b8e2a2c9cf816f15e18df1ee644d06fd170b2e" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6.surface</source>
          <target state="translated">XdgSurfaceV6.surface</target>
        </trans-unit>
        <trans-unit id="14d92dacd367404cbd43e9acf0a6bc02bea120fd" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6.toplevel</source>
          <target state="translated">XdgSurfaceV6.toplevel</target>
        </trans-unit>
        <trans-unit id="a68dd769b78c02e1912cb0e6f3ea09c38363f541" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6.windowGeometry</source>
          <target state="translated">XdgSurfaceV6.windowGeometry</target>
        </trans-unit>
        <trans-unit id="4faee35dff98b0c1b5e1be495b27b3d4fd90301c" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6.windowType</source>
          <target state="translated">XdgSurfaceV6.windowType</target>
        </trans-unit>
        <trans-unit id="833a8429238f4670386ef9b9256a5e8669479d2f" translate="yes" xml:space="preserve">
          <source>XdgToplevel (QML type)</source>
          <target state="translated">XdgToplevel (QML类型)</target>
        </trans-unit>
        <trans-unit id="99cc4a580244c6327976ce9759a1430fc51c81d6" translate="yes" xml:space="preserve">
          <source>XdgToplevel QML Type</source>
          <target state="translated">XdgToplevel QML类型</target>
        </trans-unit>
        <trans-unit id="ac6d7493940a3cc81a30ed8e62b98c59c8be9ef7" translate="yes" xml:space="preserve">
          <source>XdgToplevel represents the toplevel window specific parts of an xdg surface. &lt;a href=&quot;#details&quot;&gt;More...&lt;/a&gt;</source>
          <target state="translated">XdgToplevel表示xdg表面的顶层窗口特定部分。&lt;a href=&quot;#details&quot;&gt;更多的...&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e48ef1e166955dbc966fb47ef632451ebc6a1a73" translate="yes" xml:space="preserve">
          <source>XdgToplevel.activated</source>
          <target state="translated">XdgToplevel.activated</target>
        </trans-unit>
        <trans-unit id="bb909d87e5cb8c718cbae03b136b2320c7e5406f" translate="yes" xml:space="preserve">
          <source>XdgToplevel.appId</source>
          <target state="translated">XdgToplevel.appId</target>
        </trans-unit>
        <trans-unit id="3f344e20c8a10528e82f5ab13c59cbcf616c3eba" translate="yes" xml:space="preserve">
          <source>XdgToplevel.decorationMode</source>
          <target state="translated">XdgToplevel.decorationMode</target>
        </trans-unit>
        <trans-unit id="d0f98e22590fbfc2aa4715012fb4f0c03ff4f9ca" translate="yes" xml:space="preserve">
          <source>XdgToplevel.fullscreen</source>
          <target state="translated">XdgToplevel.fullscreen</target>
        </trans-unit>
        <trans-unit id="e47954b4b1a9c2c1ec961f8d559c29cf64ba9762" translate="yes" xml:space="preserve">
          <source>XdgToplevel.maxSize</source>
          <target state="translated">XdgToplevel.maxSize</target>
        </trans-unit>
        <trans-unit id="e092843b026b93016ebca523ffbe6311b6ec609a" translate="yes" xml:space="preserve">
          <source>XdgToplevel.maximized</source>
          <target state="translated">XdgToplevel.maximized</target>
        </trans-unit>
        <trans-unit id="bfa9ef1f0db5438053d2cace5ffa8a9bf64b6c3a" translate="yes" xml:space="preserve">
          <source>XdgToplevel.minSize</source>
          <target state="translated">XdgToplevel.minSize</target>
        </trans-unit>
        <trans-unit id="003c1870bf420f58c0b13433deb8bd0314dc5068" translate="yes" xml:space="preserve">
          <source>XdgToplevel.parentToplevel</source>
          <target state="translated">XdgToplevel.parentToplevel</target>
        </trans-unit>
        <trans-unit id="7fcb3da92381bcaa3ce4e7700c09dba4df72b87b" translate="yes" xml:space="preserve">
          <source>XdgToplevel.resizing</source>
          <target state="translated">XdgToplevel.resizing</target>
        </trans-unit>
        <trans-unit id="a1830e61bbbc0ea21059ea225c800e600c27f413" translate="yes" xml:space="preserve">
          <source>XdgToplevel.sendClose()</source>
          <target state="translated">XdgToplevel.sendClose()</target>
        </trans-unit>
        <trans-unit id="a4909f3102bdf2e48d78a5652ed3ca668ce72e82" translate="yes" xml:space="preserve">
          <source>XdgToplevel.sendConfigure()</source>
          <target state="translated">XdgToplevel.sendConfigure()</target>
        </trans-unit>
        <trans-unit id="9edfca10c2c1854640ce683d6edb3731a5810e20" translate="yes" xml:space="preserve">
          <source>XdgToplevel.sendFullscreen()</source>
          <target state="translated">XdgToplevel.sendFullscreen()</target>
        </trans-unit>
        <trans-unit id="4da58b1646c36f8619cadcb390bffe1929921f95" translate="yes" xml:space="preserve">
          <source>XdgToplevel.sendMaximized()</source>
          <target state="translated">XdgToplevel.sendMaximized()</target>
        </trans-unit>
        <trans-unit id="5917e06a5567cd1b9a1c82a2230922439a041dd3" translate="yes" xml:space="preserve">
          <source>XdgToplevel.sendResizing()</source>
          <target state="translated">XdgToplevel.sendResizing()</target>
        </trans-unit>
        <trans-unit id="9bdbb7705bd8d2e3778f03f32efa819f2623c5f3" translate="yes" xml:space="preserve">
          <source>XdgToplevel.sendUnmaximized()</source>
          <target state="translated">XdgToplevel.sendUnmaximized()</target>
        </trans-unit>
        <trans-unit id="7d2558504d8e073beeee810dda036ee4cab5e3df" translate="yes" xml:space="preserve">
          <source>XdgToplevel.sizeForResize()</source>
          <target state="translated">XdgToplevel.sizeForResize()</target>
        </trans-unit>
        <trans-unit id="3c23cf1ccabe27c98fddeac9f1c9e4640b31f467" translate="yes" xml:space="preserve">
          <source>XdgToplevel.title</source>
          <target state="translated">XdgToplevel.title</target>
        </trans-unit>
        <trans-unit id="b8fe6342b3c031cde30469a54649f379df1ebb25" translate="yes" xml:space="preserve">
          <source>XdgToplevel.xdgSurface</source>
          <target state="translated">XdgToplevel.xdgSurface</target>
        </trans-unit>
        <trans-unit id="f1791606de55f45bb427773a5f712b7518e960f9" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6 (QML type)</source>
          <target state="translated">XdgToplevelV6(QML类型)</target>
        </trans-unit>
        <trans-unit id="40b8a9ba5c8482dfb2fe18edd156863b10a91bd0" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6 QML Type</source>
          <target state="translated">XdgToplevelV6 QML类型</target>
        </trans-unit>
        <trans-unit id="3660c88129891f77903bd6b2b2cd389c6b48bdb1" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6 represents the toplevel window specific parts of an xdg surface. &lt;a href=&quot;#details&quot;&gt;More...&lt;/a&gt;</source>
          <target state="translated">XdgToplevelV6表示xdg表面的顶层窗口特定部分。&lt;a href=&quot;#details&quot;&gt;更多的...&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c3b9056d61f4de8f13f1c5f651117a04da4d78d7" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.activated</source>
          <target state="translated">XdgToplevelV6.activated</target>
        </trans-unit>
        <trans-unit id="2ecc2c9247587f6bc3dbc7abcda388867bdeba9e" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.appId</source>
          <target state="translated">XdgToplevelV6.appId</target>
        </trans-unit>
        <trans-unit id="a21f3d512c2ed182fa36335783fed28d65afe5e4" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.fullscreen</source>
          <target state="translated">XdgToplevelV6.fullscreen</target>
        </trans-unit>
        <trans-unit id="1e6561e34e6cd25e5f068fcc935afcfa7355f333" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.maxSize</source>
          <target state="translated">XdgToplevelV6.maxSize</target>
        </trans-unit>
        <trans-unit id="0a847a96bf4dacb504aa93dbf48916fed71bd92a" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.maximized</source>
          <target state="translated">XdgToplevelV6.maximized</target>
        </trans-unit>
        <trans-unit id="54f75480aa4e797f68194ebc589e0f2318ae3104" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.minSize</source>
          <target state="translated">XdgToplevelV6.minSize</target>
        </trans-unit>
        <trans-unit id="9e9d1d574dffc53b1d843b1ffadf7af7f835b84f" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.parentToplevel</source>
          <target state="translated">XdgToplevelV6.parentToplevel</target>
        </trans-unit>
        <trans-unit id="9a404d23208ce214204da365f753edd18ba0596b" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.resizing</source>
          <target state="translated">XdgToplevelV6.resizing</target>
        </trans-unit>
        <trans-unit id="516741961ac6ff371784f6360fe390ff4cb2dcf4" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.sendClose()</source>
          <target state="translated">XdgToplevelV6.sendClose()</target>
        </trans-unit>
        <trans-unit id="f7ddd67781de884dc845fccc5cae652454340b48" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.sendConfigure()</source>
          <target state="translated">XdgToplevelV6.sendConfigure()</target>
        </trans-unit>
        <trans-unit id="4017d438c6242eb56dc3b9ce85d56660e99cd5dc" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.sendFullscreen()</source>
          <target state="translated">XdgToplevelV6.sendFullscreen()</target>
        </trans-unit>
        <trans-unit id="941e536db856e32b665e2731b6e9b1b2f546edc5" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.sendMaximized()</source>
          <target state="translated">XdgToplevelV6.sendMaximized()</target>
        </trans-unit>
        <trans-unit id="a96d4720b0fa1c25f6592122f58f9454efc3f313" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.sendResizing()</source>
          <target state="translated">XdgToplevelV6.sendResizing()</target>
        </trans-unit>
        <trans-unit id="64f458940dd8a26a5d0d33e84c716773b6faf670" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.sendUnmaximized()</source>
          <target state="translated">XdgToplevelV6.sendUnmaximized()</target>
        </trans-unit>
        <trans-unit id="eb26393f647534796f3161cf0a89327d975f6c00" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.sizeForResize()</source>
          <target state="translated">XdgToplevelV6.sizeForResize()</target>
        </trans-unit>
        <trans-unit id="40c7fca31a02e5f030ad97e7d67185674190ce6f" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.title</source>
          <target state="translated">XdgToplevelV6.title</target>
        </trans-unit>
        <trans-unit id="58913c7b7cfaf8152a75a6a8c56103abcbaf61ec" translate="yes" xml:space="preserve">
          <source>Xext</source>
          <target state="translated">Xext</target>
        </trans-unit>
        <trans-unit id="d39676264f702d3adc0513db3c634e7fea3a4679" translate="yes" xml:space="preserve">
          <source>Xi</source>
          <target state="translated">Xi</target>
        </trans-unit>
        <trans-unit id="549fbefe86ea7542c426ed1b6b0f827287e5ea54" translate="yes" xml:space="preserve">
          <source>Xlib/XCB interface library</source>
          <target state="translated">Xlib/XCB接口库</target>
        </trans-unit>
        <trans-unit id="37df1d5dd461e4e334cf413302b1e8894aa58d65" translate="yes" xml:space="preserve">
          <source>XmlListModel (QML type)</source>
          <target state="translated">XmlListModel(QML类型)</target>
        </trans-unit>
        <trans-unit id="39289add00767e23dfde7d6148fba9e8df299bc8" translate="yes" xml:space="preserve">
          <source>XmlListModel QML Type</source>
          <target state="translated">XmlListModel QML类型</target>
        </trans-unit>
        <trans-unit id="7d89a08667c9b81e316be65917e05c5139b62f9e" translate="yes" xml:space="preserve">
          <source>XmlListModel is used to create a read-only model from XML data. It can be used as a data source for view elements (such as &lt;a href=&quot;qml-qtquick-listview&quot;&gt;ListView&lt;/a&gt;, &lt;a href=&quot;qml-qtquick-pathview&quot;&gt;PathView&lt;/a&gt;, &lt;a href=&quot;qml-qtquick-gridview&quot;&gt;GridView&lt;/a&gt;) and other elements that interact with model data (such as &lt;a href=&quot;qml-qtquick-repeater&quot;&gt;Repeater&lt;/a&gt;).</source>
          <target state="translated">XmlListModel用于从XML数据创建只读模型。它可以用作视图元素（例如&lt;a href=&quot;qml-qtquick-listview&quot;&gt;ListView&lt;/a&gt;，&lt;a href=&quot;qml-qtquick-pathview&quot;&gt;PathView&lt;/a&gt;，&lt;a href=&quot;qml-qtquick-gridview&quot;&gt;GridView&lt;/a&gt;）和与模型数据进行交互的其他元素（例如&lt;a href=&quot;qml-qtquick-repeater&quot;&gt;Repeater&lt;/a&gt;）的数据源。</target>
        </trans-unit>
        <trans-unit id="ba5e1a66556d49be840093280132fdf99a036812" translate="yes" xml:space="preserve">
          <source>XmlListModel.count</source>
          <target state="translated">XmlListModel.count</target>
        </trans-unit>
        <trans-unit id="33f6b2b3eec6b580f7e04d6ed44bd68289261446" translate="yes" xml:space="preserve">
          <source>XmlListModel.errorString()</source>
          <target state="translated">XmlListModel.errorString()</target>
        </trans-unit>
        <trans-unit id="d7f0f26d89e70f1d58acdc763f705b46e610174c" translate="yes" xml:space="preserve">
          <source>XmlListModel.get()</source>
          <target state="translated">XmlListModel.get()</target>
        </trans-unit>
        <trans-unit id="aa93a2c8dd76d7feaed11d3d4e951e3041c021d2" translate="yes" xml:space="preserve">
          <source>XmlListModel.namespaceDeclarations</source>
          <target state="translated">XmlListModel.namespaceDeclarations</target>
        </trans-unit>
        <trans-unit id="78cf3332bbdcf59cd92fc4fb8c61e45556bdea12" translate="yes" xml:space="preserve">
          <source>XmlListModel.progress</source>
          <target state="translated">XmlListModel.progress</target>
        </trans-unit>
        <trans-unit id="f4cfac0ab691ab73d7a98f1176fb2ed3ed86bc80" translate="yes" xml:space="preserve">
          <source>XmlListModel.query</source>
          <target state="translated">XmlListModel.query</target>
        </trans-unit>
        <trans-unit id="1592a4f7c85716f2f10a0ffc7579ccefe9cd0bed" translate="yes" xml:space="preserve">
          <source>XmlListModel.reload()</source>
          <target state="translated">XmlListModel.reload()</target>
        </trans-unit>
        <trans-unit id="ae2c33f63fd0e8746a74d4f6d7c4ffa7ee28ea86" translate="yes" xml:space="preserve">
          <source>XmlListModel.roles</source>
          <target state="translated">XmlListModel.roles</target>
        </trans-unit>
        <trans-unit id="988487c4378f362280685031016f14c15b6bba22" translate="yes" xml:space="preserve">
          <source>XmlListModel.source</source>
          <target state="translated">XmlListModel.source</target>
        </trans-unit>
        <trans-unit id="175c53b04ee764b677bdd28267a06890abe6b02d" translate="yes" xml:space="preserve">
          <source>XmlListModel.status</source>
          <target state="translated">XmlListModel.status</target>
        </trans-unit>
        <trans-unit id="ea331d3a472e28755be56dac6dc02d3d278d3cde" translate="yes" xml:space="preserve">
          <source>XmlListModel.xml</source>
          <target state="translated">XmlListModel.xml</target>
        </trans-unit>
        <trans-unit id="25a492471903bb06a85f4270e065380e37f2fef0" translate="yes" xml:space="preserve">
          <source>XmlRole (QML type)</source>
          <target state="translated">XmlRole(QML类型)</target>
        </trans-unit>
        <trans-unit id="075f5a23810cf7d1009af1b6f7154b33040ab5ce" translate="yes" xml:space="preserve">
          <source>XmlRole QML Type</source>
          <target state="translated">XmlRole QML类型</target>
        </trans-unit>
        <trans-unit id="9890c7078775a2f2da2f131e269990bdb27b8baf" translate="yes" xml:space="preserve">
          <source>XmlRole.isKey</source>
          <target state="translated">XmlRole.isKey</target>
        </trans-unit>
        <trans-unit id="03da30af25d4eb1535443e4f8b7c5dbfa5407305" translate="yes" xml:space="preserve">
          <source>XmlRole.name</source>
          <target state="translated">XmlRole.name</target>
        </trans-unit>
        <trans-unit id="905475ae4b25ccbdc45d2fb9635efcead66af27d" translate="yes" xml:space="preserve">
          <source>XmlRole.query</source>
          <target state="translated">XmlRole.query</target>
        </trans-unit>
        <trans-unit id="23eb4d3f4155395a74e9d534f97ff4c1908f5aac" translate="yes" xml:space="preserve">
          <source>Y</source>
          <target state="translated">Y</target>
        </trans-unit>
        <trans-unit id="c1710d3d0b0f56f27f1a7e1cb8d6fe8542934e42" translate="yes" xml:space="preserve">
          <source>Y-axis: color channel luminance with effect applied</source>
          <target state="translated">Y轴:应用效果的颜色通道亮度</target>
        </trans-unit>
        <trans-unit id="1e6b3be5cdd8e0b3409e4867d41c6e6922cf9e6b" translate="yes" xml:space="preserve">
          <source>Y-axis: pixel luminance with effect applied</source>
          <target state="translated">Y轴:应用效果的像素亮度。</target>
        </trans-unit>
        <trans-unit id="29bdb232c0538b2988775b9d97867e6d6e233362" translate="yes" xml:space="preserve">
          <source>YACCSOURCES</source>
          <target state="translated">YACCSOURCES</target>
        </trans-unit>
        <trans-unit id="448077818fea215ba380777d645da6427112264b" translate="yes" xml:space="preserve">
          <source>YAnimator (QML type)</source>
          <target state="translated">YAnimator(QML类型)</target>
        </trans-unit>
        <trans-unit id="b6349114da4d582fc6f06a87476c5ff19669eea6" translate="yes" xml:space="preserve">
          <source>YAnimator QML Type</source>
          <target state="translated">YAnimator QML类型</target>
        </trans-unit>
        <trans-unit id="c0f0cadca077341656948de09d8670971ee5641b" translate="yes" xml:space="preserve">
          <source>YEAR</source>
          <target state="translated">YEAR</target>
        </trans-unit>
        <trans-unit id="8950dbdc07cdfd7ff881e7c0db4609138b09ed64" translate="yes" xml:space="preserve">
          <source>YUV is not represented by describing the size of the color channels. This is because YUV often use macro pixels, making the concept of sperate color channels invalid. Instead the different YUV layouts are described with this enum.</source>
          <target state="translated">YUV不是通过描述颜色通道的大小来表示的。这是因为YUV经常使用宏像素,使得sperate颜色通道的概念无效。而是用这个枚举来描述不同的YUV布局。</target>
        </trans-unit>
        <trans-unit id="879e32326c5217968ac8e3a14e4a8a5214957264" translate="yes" xml:space="preserve">
          <source>Year</source>
          <target state="translated">Year</target>
        </trans-unit>
        <trans-unit id="234d9387958532e916ef39542505ecacedc31440" translate="yes" xml:space="preserve">
          <source>Year (int)</source>
          <target state="translated">年份(int)</target>
        </trans-unit>
        <trans-unit id="fc45350ab7c6b3615f5847a5fd3f6c39af69fb78" translate="yes" xml:space="preserve">
          <source>Year, month, and day values of date, as well as hour, minute, and second values of time</source>
          <target state="translated">日期的年、月、日值,以及时间的时、分、秒值。</target>
        </trans-unit>
        <trans-unit id="3526f607bcd4f51ad0bc05f814579a42c2c0ba57" translate="yes" xml:space="preserve">
          <source>Yellow</source>
          <target state="translated">Yellow</target>
        </trans-unit>
        <trans-unit id="efe9620055636bd0b5069b204b68b4ae79e66fc5" translate="yes" xml:space="preserve">
          <source>Yellow curve: effect applied</source>
          <target state="translated">黄色曲线:应用效果</target>
        </trans-unit>
        <trans-unit id="5397e0583f14f6c88de06b1ef28f460a1fb5b0ae" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">Yes</target>
        </trans-unit>
        <trans-unit id="5ce7e259020fe1c34cbe494b8185d3936e414544" translate="yes" xml:space="preserve">
          <source>Yes (&lt;a href=&quot;qtglobal#qint64-typedef&quot;&gt;qint64&lt;/a&gt; range)</source>
          <target state="translated">是（&lt;a href=&quot;qtglobal#qint64-typedef&quot;&gt;qint64&lt;/a&gt;范围）</target>
        </trans-unit>
        <trans-unit id="e46f23e27abbe09e6d64ecd0756f1e1914f40d92" translate="yes" xml:space="preserve">
          <source>Yes (Not bundled)</source>
          <target state="translated">是(不捆绑)</target>
        </trans-unit>
        <trans-unit id="436048676b9ef56822ca094add30b46654703d04" translate="yes" xml:space="preserve">
          <source>Yes (arbitrary)</source>
          <target state="translated">是(任意)</target>
        </trans-unit>
        <trans-unit id="1b43332482f2278b23be3c7fd8aa5726e28a3518" translate="yes" xml:space="preserve">
          <source>Yes (bundled)</source>
          <target state="translated">是(捆绑式)</target>
        </trans-unit>
        <trans-unit id="9d7985b06a3a417e7221880b4da5191f2b773bc1" translate="yes" xml:space="preserve">
          <source>Yes (full range)</source>
          <target state="translated">是(全范围)</target>
        </trans-unit>
        <trans-unit id="f0f93fa569f1c070e9373c86171aab80c08bcdc5" translate="yes" xml:space="preserve">
          <source>Yes (received by &lt;a href=&quot;qfuturewatcher&quot;&gt;QFutureWatcher&lt;/a&gt;)</source>
          <target state="translated">是（由&lt;a href=&quot;qfuturewatcher&quot;&gt;QFutureWatcher&lt;/a&gt;接收）</target>
        </trans-unit>
        <trans-unit id="0fd918dccabf946bfc1bcc8be3de59d43700debe" translate="yes" xml:space="preserve">
          <source>Yes (received by &lt;a href=&quot;qml-qtqml-workerscript&quot;&gt;WorkerScript&lt;/a&gt;)</source>
          <target state="translated">是（由&lt;a href=&quot;qml-qtqml-workerscript&quot;&gt;WorkerScript&lt;/a&gt;接收）</target>
        </trans-unit>
        <trans-unit id="dec20ffec186805ca8160705b12f2f44d7495560" translate="yes" xml:space="preserve">
          <source>Yes (received by &lt;a href=&quot;qml-qtqml-workerscript-workerscript&quot;&gt;WorkerScript&lt;/a&gt;)</source>
          <target state="translated">是（由&lt;a href=&quot;qml-qtqml-workerscript-workerscript&quot;&gt;WorkerScript&lt;/a&gt;接收）</target>
        </trans-unit>
        <trans-unit id="e20f571e90e3a8355939d4e8d14d3a57e5a3c8b8" translate="yes" xml:space="preserve">
          <source>Yes (received by &lt;a href=&quot;qthread&quot;&gt;QThread&lt;/a&gt;)</source>
          <target state="translated">是（由&lt;a href=&quot;qthread&quot;&gt;QThread&lt;/a&gt;接收）</target>
        </trans-unit>
        <trans-unit id="c732f7156e94033f44e752c6ea0378a1f3b54a6f" translate="yes" xml:space="preserve">
          <source>Yes (received by a worker &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt;)</source>
          <target state="translated">是（由工作人员&lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt;接收）</target>
        </trans-unit>
        <trans-unit id="3735a33b49efa2998541590751e4f9c66cb8f04e" translate="yes" xml:space="preserve">
          <source>Yes &lt;sup&gt;1&lt;/sup&gt;</source>
          <target state="translated">是的&lt;sup&gt;1&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="6db7084bf5d9415bbaf96a3dbffcb5455dd06689" translate="yes" xml:space="preserve">
          <source>Yes &lt;sup&gt;2&lt;/sup&gt;</source>
          <target state="translated">是的&lt;sup&gt;2&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="4ce975a04d16b720d9bc54f9fb3e5618742dc8ba" translate="yes" xml:space="preserve">
          <source>Yes &lt;sup&gt;3&lt;/sup&gt;</source>
          <target state="translated">是的&lt;sup&gt;3&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="1696149c59259541ba3a1d3a3c3c107fc68c94e9" translate="yes" xml:space="preserve">
          <source>Yes*</source>
          <target state="translated">Yes*</target>
        </trans-unit>
        <trans-unit id="f3b5a8ebfc9a3977de3fe0550875694447f58d93" translate="yes" xml:space="preserve">
          <source>Yields execution of the current thread to another runnable thread, if any. Note that the operating system decides to which thread to switch.</source>
          <target state="translated">将当前线程的执行交给另一个可运行的线程(如果有的话)。请注意,由操作系统决定切换到哪个线程。</target>
        </trans-unit>
        <trans-unit id="8c548ea44296aef993ca0d9061d2a0ede9480fca" translate="yes" xml:space="preserve">
          <source>You almost never have to reimplement the setVisible() function. If you need to change some settings before a widget is shown, use &lt;a href=&quot;qwidget#showEvent&quot;&gt;showEvent&lt;/a&gt;() instead. If you need to do some delayed initialization use the Polish event delivered to the &lt;a href=&quot;qwidget#event&quot;&gt;event&lt;/a&gt;() function.</source>
          <target state="translated">您几乎不需要重新实现setVisible（）函数。如果需要在显示小部件之前更改某些设置，请改用&lt;a href=&quot;qwidget#showEvent&quot;&gt;showEvent&lt;/a&gt;（）。如果您需要进行一些延迟的初始化，请使用传递给&lt;a href=&quot;qwidget#event&quot;&gt;event&lt;/a&gt;（）函数的Polish事件。</target>
        </trans-unit>
        <trans-unit id="4c83d25feb73bbf23ce773ce86734828ace6f192" translate="yes" xml:space="preserve">
          <source>You also get the document (</source>
          <target state="translated">你还可以得到文件(</target>
        </trans-unit>
        <trans-unit id="03096927b13317f76aed26e721affc84bce66bfa" translate="yes" xml:space="preserve">
          <source>You are now given an option to choose the App ID to use for this profile, which will be the unique App ID you created in the previous section. Once again make sure that the App ID does not contain any wildcard characters (&amp;ldquo;*&amp;rdquo;) as it is not be possible to use the In-App Purchasing service with such an App ID.</source>
          <target state="translated">现在，您可以选择要用于此配置文件的应用程序ID，这将是您在上一节中创建的唯一应用程序ID。再次确保应用程序ID不包含任何通配符（&amp;ldquo; *&amp;rdquo;），因为无法将应用程序内购买服务与这样的应用程序ID一起使用。</target>
        </trans-unit>
        <trans-unit id="dd787bde2ea0a343c6121011cf8988ba82786d30" translate="yes" xml:space="preserve">
          <source>You are, of course, not required to use the item-based approach; you could instead rely entirely on the &lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt; interface when working with the model, or use a combination of the two as appropriate.</source>
          <target state="translated">当然，您不需要使用基于项目的方法。相反，在使用模型时，您可以完全依赖&lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt;接口，也可以根据需要将两者结合使用。</target>
        </trans-unit>
        <trans-unit id="59e2ce4559ac695c70aa7c9a4db5e4adec27d432" translate="yes" xml:space="preserve">
          <source>You call &lt;a href=&quot;qsgengine#initialize&quot;&gt;initialize&lt;/a&gt;() first with the &lt;a href=&quot;qopenglcontext&quot;&gt;QOpenGLContext&lt;/a&gt; that you want to use with this renderer. This will return a null renderer otherwise.</source>
          <target state="translated">您首先使用要与此渲染器一起使用的&lt;a href=&quot;qopenglcontext&quot;&gt;QOpenGLContext&lt;/a&gt;调用&lt;a href=&quot;qsgengine#initialize&quot;&gt;initialize&lt;/a&gt;（）。否则将返回空渲染器。</target>
        </trans-unit>
        <trans-unit id="22db993ffd75400a71285eb29619e00206a2a6ee" translate="yes" xml:space="preserve">
          <source>You can abandon the connection at any point while you are dragging the connection path by pressing &lt;b&gt;Esc&lt;/b&gt;.</source>
          <target state="translated">通过按&lt;b&gt;Esc&lt;/b&gt;拖动连接路径时，您可以随时放弃连接。</target>
        </trans-unit>
        <trans-unit id="c5f36ad4d6284d1c923e088789ea255cfc6b7533" translate="yes" xml:space="preserve">
          <source>You can access the attributes of an element with code like this:</source>
          <target state="translated">你可以用这样的代码来访问一个元素的属性。</target>
        </trans-unit>
        <trans-unit id="5a1a8cdc7100f27e7b3a5c98b4aea304a21105c5" translate="yes" xml:space="preserve">
          <source>You can access the entity's &lt;a href=&quot;qdomentity#publicId&quot;&gt;publicId&lt;/a&gt;(), &lt;a href=&quot;qdomentity#systemId&quot;&gt;systemId&lt;/a&gt;() and &lt;a href=&quot;qdomentity#notationName&quot;&gt;notationName&lt;/a&gt;() when available.</source>
          <target state="translated">您可以访问实体的&lt;a href=&quot;qdomentity#publicId&quot;&gt;publicId&lt;/a&gt;（），&lt;a href=&quot;qdomentity#systemId&quot;&gt;systemId&lt;/a&gt;（）和&lt;a href=&quot;qdomentity#notationName&quot;&gt;notationName&lt;/a&gt;（）（如果可用）。</target>
        </trans-unit>
        <trans-unit id="ee180b49ad904224443a00822af8d3cec4d33434" translate="yes" xml:space="preserve">
          <source>You can access the following state properties:</source>
          <target state="translated">您可以访问以下状态属性。</target>
        </trans-unit>
        <trans-unit id="b9f7015bd8c1e2fd1b92a364ede98e66d53dbb51" translate="yes" xml:space="preserve">
          <source>You can access the handle position through the &lt;code&gt;styleData.handlePosition&lt;/code&gt; property.</source>
          <target state="translated">您可以通过 &lt;code&gt;styleData.handlePosition&lt;/code&gt; 属性访问手柄位置。</target>
        </trans-unit>
        <trans-unit id="f76dced9a858ca5177fa63307af910727f824d37" translate="yes" xml:space="preserve">
          <source>You can access the handle width through the &lt;code&gt;styleData.handleWidth&lt;/code&gt; property.</source>
          <target state="translated">您可以通过 &lt;code&gt;styleData.handleWidth&lt;/code&gt; 属性访问手柄宽度。</target>
        </trans-unit>
        <trans-unit id="542ccbe53a36df4b0237a156548d304466d222d3" translate="yes" xml:space="preserve">
          <source>You can access the promise object associated with the task by defining an additional argument of &lt;code&gt;QPromise&amp;lt;T&amp;gt; &amp;amp;&lt;/code&gt; type inside the function. This additional argument must be the first argument passed to the function, and like in &lt;a href=&quot;qtconcurrentrun#concurrent-run-with-promise&quot;&gt;Concurrent Run With Promise&lt;/a&gt; mode, the function is expected to return void type. Result reporting is done through &lt;a href=&quot;qtcore-changes-qt6#qpromise&quot;&gt;QPromise&lt;/a&gt; API:</source>
          <target state="translated">您可以通过定义 &lt;code&gt;QPromise&amp;lt;T&amp;gt; &amp;amp;&lt;/code&gt; 的附加参数并在函数内部键入来访问与任务关联的Promise对象。此附加参数必须是传递给该函数的第一个参数，并且像在&lt;a href=&quot;qtconcurrentrun#concurrent-run-with-promise&quot;&gt;Promise&lt;/a&gt;模式下并发运行一样，该函数应返回void类型。结果报告通过&lt;a href=&quot;qtcore-changes-qt6#qpromise&quot;&gt;QPromise&lt;/a&gt; API完成：</target>
        </trans-unit>
        <trans-unit id="9507bc9d3a2b87831cc3ddd7b2e5377522211a53" translate="yes" xml:space="preserve">
          <source>You can add a file extension to the filter using '+='. For example:</source>
          <target state="translated">你可以使用'+='添加文件扩展名到过滤器。例如,你可以使用'+='来添加文件扩展名。</target>
        </trans-unit>
        <trans-unit id="c2c5de29a86bb6a9471af7db153f3adbb856b562" translate="yes" xml:space="preserve">
          <source>You can add a page before or after the</source>
          <target state="translated">您可以在之前或之后添加一个页面</target>
        </trans-unit>
        <trans-unit id="6602600ace7514786f325c34c08ef29c7b4a5cbf" translate="yes" xml:space="preserve">
          <source>You can add an optional border to a rectangle with its own color and thickness by setting the &lt;a href=&quot;qml-qtquick-rectangle#border.color-prop&quot;&gt;border.color&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-rectangle#border.width-prop&quot;&gt;border.width&lt;/a&gt; properties. Set the color to &quot;transparent&quot; to paint a border without a fill color.</source>
          <target state="translated">您可以通过设置&lt;a href=&quot;qml-qtquick-rectangle#border.color-prop&quot;&gt;border.color&lt;/a&gt;和&lt;a href=&quot;qml-qtquick-rectangle#border.width-prop&quot;&gt;border.width&lt;/a&gt;属性，为具有自己的颜色和厚度的矩形添加可选边框。将颜色设置为&amp;ldquo;透明&amp;rdquo;以绘制没有填充颜色的边框。</target>
        </trans-unit>
        <trans-unit id="21f5dadb6338bb14bb572806ca494a54470c8512" translate="yes" xml:space="preserve">
          <source>You can add comments to project files. Comments begin with the &lt;code&gt;#&lt;/code&gt; character and continue to the end of the same line. For example:</source>
          <target state="translated">您可以将注释添加到项目文件。注释以 &lt;code&gt;#&lt;/code&gt; 字符开头，并继续到同一行的末尾。例如：</target>
        </trans-unit>
        <trans-unit id="fe532ce94de371ca3ac16dd7d03807c40f81f955" translate="yes" xml:space="preserve">
          <source>You can add more data by calling &lt;a href=&quot;qcborstreamreader#addData&quot;&gt;addData&lt;/a&gt;() or by setting a different source device using &lt;a href=&quot;qcborstreamreader#setDevice&quot;&gt;setDevice&lt;/a&gt;().</source>
          <target state="translated">您可以通过调用&lt;a href=&quot;qcborstreamreader#addData&quot;&gt;addData&lt;/a&gt;（）或使用&lt;a href=&quot;qcborstreamreader#setDevice&quot;&gt;setDevice&lt;/a&gt;（）设置其他源设备来添加更多数据。</target>
        </trans-unit>
        <trans-unit id="69dbafc2ce960f628ecaff623b7d0fcbe941d004" translate="yes" xml:space="preserve">
          <source>You can add new menus to the main window's menu bar by calling &lt;code&gt;menuBar()&lt;/code&gt;, which returns the &lt;a href=&quot;qmenubar&quot;&gt;QMenuBar&lt;/a&gt; for the window, and then add a menu with &lt;a href=&quot;qmenubar#addMenu&quot;&gt;QMenuBar::addMenu&lt;/a&gt;().</source>
          <target state="translated">您可以通过调用 &lt;code&gt;menuBar()&lt;/code&gt; 将新菜单添加到主窗口的菜单栏中，该菜单返回窗口的&lt;a href=&quot;qmenubar&quot;&gt;QMenuBar&lt;/a&gt;，然后使用&lt;a href=&quot;qmenubar#addMenu&quot;&gt;QMenuBar :: addMenu&lt;/a&gt;（）添加菜单。</target>
        </trans-unit>
        <trans-unit id="184c8d88fbd8de99bab8fa703b04797c31a59c58" translate="yes" xml:space="preserve">
          <source>You can add specializations or overloads of this function to your test to enable verbose output.</source>
          <target state="translated">你可以在你的测试中添加这个函数的特殊化或重载,以实现详细的输出。</target>
        </trans-unit>
        <trans-unit id="c5e121c1205788f8c7e08ca84fcd4fea81f6f72b" translate="yes" xml:space="preserve">
          <source>You can add widgets, layouts, stretches (&lt;a href=&quot;qgraphicslinearlayout#addStretch&quot;&gt;addStretch&lt;/a&gt;(), &lt;a href=&quot;qgraphicslinearlayout#insertStretch&quot;&gt;insertStretch&lt;/a&gt;() or &lt;a href=&quot;qgraphicslinearlayout#setStretchFactor&quot;&gt;setStretchFactor&lt;/a&gt;()), and spacings (&lt;a href=&quot;qgraphicslinearlayout#setItemSpacing&quot;&gt;setItemSpacing&lt;/a&gt;()) to a linear layout. The layout takes ownership of the items. In some cases when the layout item also inherits from &lt;a href=&quot;qgraphicsitem&quot;&gt;QGraphicsItem&lt;/a&gt; (such as &lt;a href=&quot;graphicsview#qgraphicswidget&quot;&gt;QGraphicsWidget&lt;/a&gt;) there will be a ambiguity in ownership because the layout item belongs to two ownership hierarchies. See the documentation of &lt;a href=&quot;qgraphicslayoutitem#setOwnedByLayout&quot;&gt;QGraphicsLayoutItem::setOwnedByLayout&lt;/a&gt;() how to handle this. You can access each item in the layout by calling &lt;a href=&quot;qgraphicslinearlayout#count&quot;&gt;count&lt;/a&gt;() and &lt;a href=&quot;qgraphicslinearlayout#itemAt&quot;&gt;itemAt&lt;/a&gt;(). Calling &lt;a href=&quot;qgraphicslinearlayout#removeAt&quot;&gt;removeAt&lt;/a&gt;() or &lt;a href=&quot;qgraphicslinearlayout#removeItem&quot;&gt;removeItem&lt;/a&gt;() will remove an item from the layout, without destroying it.</source>
          <target state="translated">您可以将小部件，布局，拉伸（&lt;a href=&quot;qgraphicslinearlayout#addStretch&quot;&gt;addStretch&lt;/a&gt;（），&lt;a href=&quot;qgraphicslinearlayout#insertStretch&quot;&gt;insertStretch&lt;/a&gt;（）或&lt;a href=&quot;qgraphicslinearlayout#setStretchFactor&quot;&gt;setStretchFactor&lt;/a&gt;（））和间距（&lt;a href=&quot;qgraphicslinearlayout#setItemSpacing&quot;&gt;setItemSpacing&lt;/a&gt;（））添加到线性布局。布局获取项目的所有权。在某些情况下，当布局项目也继承自&lt;a href=&quot;qgraphicsitem&quot;&gt;QGraphicsItem&lt;/a&gt;（例如&lt;a href=&quot;graphicsview#qgraphicswidget&quot;&gt;QGraphicsWidget&lt;/a&gt;）时，所有权将不明确，因为布局项目属于两个所有权层次结构。请参阅&lt;a href=&quot;qgraphicslayoutitem#setOwnedByLayout&quot;&gt;QGraphicsLayoutItem :: setOwnedByLayout&lt;/a&gt;（）的文档以了解如何处理。您可以通过调用&lt;a href=&quot;qgraphicslinearlayout#count&quot;&gt;count&lt;/a&gt;（）和&lt;a href=&quot;qgraphicslinearlayout#itemAt&quot;&gt;itemAt&lt;/a&gt;（）来访问布局中的每个项目。调用&lt;a href=&quot;qgraphicslinearlayout#removeAt&quot;&gt;removeAt&lt;/a&gt;（）或&lt;a href=&quot;qgraphicslinearlayout#removeItem&quot;&gt;removeItem&lt;/a&gt;（）会从布局中删除一个项目，而不会破坏它。</target>
        </trans-unit>
        <trans-unit id="cab33edd305a0eca1d0ad5f811878fdd1f93a72a" translate="yes" xml:space="preserve">
          <source>You can adjust a number of parameters that will affect images and video taken with the corresponding &lt;a href=&quot;qcamera&quot;&gt;QCamera&lt;/a&gt; object - see the &lt;a href=&quot;qcameraexposurecontrol#ExposureParameter-enum&quot;&gt;ExposureParameter&lt;/a&gt; enumeration.</source>
          <target state="translated">您可以调整许多参数，这些参数将影响使用相应&lt;a href=&quot;qcamera&quot;&gt;QCamera&lt;/a&gt;对象拍摄的图像和视频-请参阅&lt;a href=&quot;qcameraexposurecontrol#ExposureParameter-enum&quot;&gt;ExposureParameter&lt;/a&gt;枚举。</target>
        </trans-unit>
        <trans-unit id="cd67f19ca725aa499dc5fe6a264c0f996212ec1f" translate="yes" xml:space="preserve">
          <source>You can adjust the effective size hint by reimplementing &lt;a href=&quot;qgraphicslayoutitem#sizeHint&quot;&gt;sizeHint&lt;/a&gt;() in a &lt;a href=&quot;qgraphicslayoutitem&quot;&gt;QGraphicsLayoutItem&lt;/a&gt; subclass, or by calling one of the following functions: &lt;a href=&quot;qgraphicslayoutitem#setMinimumSize&quot;&gt;setMinimumSize&lt;/a&gt;(), &lt;a href=&quot;qgraphicslayoutitem#setPreferredSize&quot;&gt;setPreferredSize&lt;/a&gt;, or &lt;a href=&quot;qgraphicslayoutitem#setMaximumSize&quot;&gt;setMaximumSize&lt;/a&gt;() (or a combination of both).</source>
          <target state="translated">您可以通过在&lt;a href=&quot;qgraphicslayoutitem&quot;&gt;QGraphicsLayoutItem&lt;/a&gt;子类中重新实现&lt;a href=&quot;qgraphicslayoutitem#sizeHint&quot;&gt;sizeHint&lt;/a&gt;（）或调用以下函数之一来调整有效大小提示：&lt;a href=&quot;qgraphicslayoutitem#setMinimumSize&quot;&gt;setMinimumSize&lt;/a&gt;（），&lt;a href=&quot;qgraphicslayoutitem#setPreferredSize&quot;&gt;setPreferredSize&lt;/a&gt;或&lt;a href=&quot;qgraphicslayoutitem#setMaximumSize&quot;&gt;setMaximumSize&lt;/a&gt;（）（或两者的组合）。</target>
        </trans-unit>
        <trans-unit id="cc0ac0d15800321965d2ef81c93365fe9557a4bd" translate="yes" xml:space="preserve">
          <source>You can affect the currently playing sprite in two ways. You can arbitrarily force it to immediately start playing any sprite, or you can tell it to gradually transition to a given sprite. If you instruct it to gradually transition, then it will reach the target sprite by going through valid state transitions using the fewest number of intervening sprites (but ignoring relative weightings). This allows you to easily insert a transitional animation between two different sprites.</source>
          <target state="translated">你可以用两种方式影响当前正在播放的精灵。您可以任意强迫它立即开始播放任何精灵,或者您可以告诉它逐渐过渡到一个指定的精灵。如果您指示它逐渐过渡,那么它将通过使用最少的介入精灵(但忽略相对权重)的有效状态转换来到达目标精灵。这允许您轻松地在两个不同的精灵之间插入过渡动画。</target>
        </trans-unit>
        <trans-unit id="a20b1a26e93e5e6234b41fc4c10bf59f88e29f33" translate="yes" xml:space="preserve">
          <source>You can also access a property by name. To do this you must call &lt;a href=&quot;qobject#property&quot;&gt;QObject::property&lt;/a&gt;().</source>
          <target state="translated">您也可以按名称访问属性。为此，您必须调用&lt;a href=&quot;qobject#property&quot;&gt;QObject :: property&lt;/a&gt;（）。</target>
        </trans-unit>
        <trans-unit id="2f7d6b48d88914cc7389fd7bb3359be6920d312f" translate="yes" xml:space="preserve">
          <source>You can also add extra selectors at runtime for custom behavior. These will be used in any future calls to &lt;a href=&quot;qfileselector#select&quot;&gt;select&lt;/a&gt;(). If the extra selectors list has been changed, calls to &lt;a href=&quot;qfileselector#select&quot;&gt;select&lt;/a&gt;() will use the new list and may return differently.</source>
          <target state="translated">您还可以在运行时为自定义行为添加额外的选择器。这些将在以后的任何调用&lt;a href=&quot;qfileselector#select&quot;&gt;select&lt;/a&gt;（）中使用。如果其他选择器列表已更改，则&lt;a href=&quot;qfileselector#select&quot;&gt;选择&lt;/a&gt;（）的调用将使用新列表，并且返回的方式可能不同。</target>
        </trans-unit>
        <trans-unit id="f1bbcd1ec398593379dc5e4778ecda28a23f5d65" translate="yes" xml:space="preserve">
          <source>You can also alter the margin and spacing properties for the form's default layout (&lt;b&gt;Layout Default&lt;/b&gt;). These default layout properties will be replaced by the corresponding &lt;b&gt;Layout Function&lt;/b&gt;, if the function is specified, when &lt;code&gt;uic&lt;/code&gt; generates code for the form. The form settings dialog lets you specify functions for both the margin and the spacing.</source>
          <target state="translated">您还可以更改表单默认布局（&lt;b&gt;Layout Default&lt;/b&gt;）的边距和间距属性。当 &lt;code&gt;uic&lt;/code&gt; 为表单生成代码时，如果指定了默认布局属性，则这些默认布局属性将被相应的&lt;b&gt;Layout Function&lt;/b&gt;代替。表单设置对话框使您可以指定页边距和间距的功能。</target>
        </trans-unit>
        <trans-unit id="5fefef54ed356b7e6f5ca858de560dc0170088bc" translate="yes" xml:space="preserve">
          <source>You can also ask questions on &lt;a href=&quot;xmlprocessing&quot;&gt;XQuery&lt;/a&gt; mail lists:</source>
          <target state="translated">您还可以在&lt;a href=&quot;xmlprocessing&quot;&gt;XQuery&lt;/a&gt;邮件列表上提问：</target>
        </trans-unit>
        <trans-unit id="aa14b20660aa43b560cc69c27ff76d90c07630ae" translate="yes" xml:space="preserve">
          <source>You can also ask questions on &lt;a href=&quot;xmlprocessing#&quot;&gt;XQuery&lt;/a&gt; mail lists:</source>
          <target state="translated">您还可以在&lt;a href=&quot;xmlprocessing#&quot;&gt;XQuery&lt;/a&gt;邮件列表上提问：</target>
        </trans-unit>
        <trans-unit id="eb8bab0d84b23ac838424e24410ec99f98596932" translate="yes" xml:space="preserve">
          <source>You can also assign the value of a current variable to another variable by prefixing $$ to the variable name. For example:</source>
          <target state="translated">您也可以通过在变量名前加上$$来将当前变量的值分配给另一个变量。例如,在变量名前加上$$,就可以将当前变量的值分配给另一个变量。</target>
        </trans-unit>
        <trans-unit id="ef32fdcf080790d21d90c05d943087e0f4b687fa" translate="yes" xml:space="preserve">
          <source>You can also build Qt 5 from the source package and configure it according to your target platform. The source packages are obtained from &lt;a href=&quot;http://www.qt.io/download/&quot;&gt;http://www.qt.io/download/&lt;/a&gt;.</source>
          <target state="translated">您还可以从源程序包构建Qt 5，并根据目标平台进行配置。源程序包可从&lt;a href=&quot;http://www.qt.io/download/&quot;&gt;http://www.qt.io/download/&lt;/a&gt;获得。</target>
        </trans-unit>
        <trans-unit id="589d23a40ff5f3281f56decdc04da3d84527e293" translate="yes" xml:space="preserve">
          <source>You can also build Qt from the source package and configure it according to your target platform. The source packages are obtained from &lt;a href=&quot;http://www.qt.io/download/&quot;&gt;http://www.qt.io/download/&lt;/a&gt;.</source>
          <target state="translated">您还可以从源程序包构建Qt并根据您的目标平台进行配置。源程序包可从&lt;a href=&quot;http://www.qt.io/download/&quot;&gt;http://www.qt.io/download/&lt;/a&gt;获得。</target>
        </trans-unit>
        <trans-unit id="423f7ea55521a4ffc460ddc28efd403bac23548c" translate="yes" xml:space="preserve">
          <source>You can also build Qt from the source package and configure it according to your target platform. The source packages are obtained from &lt;a href=&quot;https://www.qt.io/download/&quot;&gt;http://www.qt.io/download/&lt;/a&gt;.</source>
          <target state="translated">您还可以从源程序包构建Qt并根据您的目标平台进行配置。源程序包可从&lt;a href=&quot;https://www.qt.io/download/&quot;&gt;http://www.qt.io/download/&lt;/a&gt;获得。</target>
        </trans-unit>
        <trans-unit id="5b38378b1fa0ca53735f71bf407ae08a27856db7" translate="yes" xml:space="preserve">
          <source>You can also build Qt such that an executable binary will include all Qt modules it links to and all Qt plugins it needs. This is called a</source>
          <target state="translated">你也可以构建Qt,使一个可执行的二进制文件包括它所链接的所有Qt模块和它所需要的所有Qt插件。这就是所谓的</target>
        </trans-unit>
        <trans-unit id="2e1d17e85ab7096b0fc6bec579c5317d99f66878" translate="yes" xml:space="preserve">
          <source>You can also call &lt;a href=&quot;qlist#fill&quot;&gt;fill&lt;/a&gt;() at any time to fill the list with a value.</source>
          <target state="translated">您也可以随时调用&lt;a href=&quot;qlist#fill&quot;&gt;fill&lt;/a&gt;（），以使用值填充列表。</target>
        </trans-unit>
        <trans-unit id="757428cd661ba56358615f30b8797618d09973cc" translate="yes" xml:space="preserve">
          <source>You can also call &lt;a href=&quot;qvector#fill&quot;&gt;fill&lt;/a&gt;() at any time to fill the vector with a value.</source>
          <target state="translated">您也可以随时调用&lt;a href=&quot;qvector#fill&quot;&gt;fill&lt;/a&gt;（），以使用值填充向量。</target>
        </trans-unit>
        <trans-unit id="b701cc84318343902158279c29b1a61cf36b3ab8" translate="yes" xml:space="preserve">
          <source>You can also call this function after &lt;a href=&quot;qdtls#doHandshake&quot;&gt;doHandshake&lt;/a&gt;() encountered the QDtlsError::PeerVerificationError error, and then resume the handshake by calling &lt;a href=&quot;qdtls#resumeHandshake&quot;&gt;resumeHandshake&lt;/a&gt;().</source>
          <target state="translated">您也可以在&lt;a href=&quot;qdtls#doHandshake&quot;&gt;doHandshake&lt;/a&gt;（）遇到QDtlsError :: PeerVerificationError错误后调用此函数，然后通过调用&lt;a href=&quot;qdtls#resumeHandshake&quot;&gt;resumeHandshake&lt;/a&gt;（）恢复握手。</target>
        </trans-unit>
        <trans-unit id="51135e1450494f190767361eaa5181478ea869c9" translate="yes" xml:space="preserve">
          <source>You can also change the active window with the keyboard. By pressing the control and tab keys at the same time, the next (using the current &lt;a href=&quot;qmdiarea#WindowOrder-enum&quot;&gt;WindowOrder&lt;/a&gt;) subwindow will be activated. By pressing control, shift, and tab, you will activate the previous window. This is equivalent to calling &lt;a href=&quot;qmdiarea#activateNextSubWindow&quot;&gt;activateNextSubWindow()&lt;/a&gt; and &lt;a href=&quot;qmdiarea#activatePreviousSubWindow&quot;&gt;activatePreviousSubWindow()&lt;/a&gt;. Note that these shortcuts overrides global shortcuts, but not the &lt;a href=&quot;qmdiarea&quot;&gt;QMdiArea&lt;/a&gt;s shortcuts.</source>
          <target state="translated">您也可以使用键盘更改活动窗口。通过同时按下Control和Tab键，将激活下一个（使用当前&lt;a href=&quot;qmdiarea#WindowOrder-enum&quot;&gt;WindowOrder&lt;/a&gt;）子窗口。通过按Control，Shift和Tab，将激活上一个窗口。这等效于调用&lt;a href=&quot;qmdiarea#activateNextSubWindow&quot;&gt;activateNextSubWindow（）&lt;/a&gt;和&lt;a href=&quot;qmdiarea#activatePreviousSubWindow&quot;&gt;ActivatePreviousSubWindow（）&lt;/a&gt;。请注意，这些快捷方式将覆盖全局快捷方式，但不会覆盖&lt;a href=&quot;qmdiarea&quot;&gt;QMdiArea&lt;/a&gt;的快捷方式。</target>
        </trans-unit>
        <trans-unit id="4850c2fe965a2d7c52859a1dbabce443ca37d837" translate="yes" xml:space="preserve">
          <source>You can also configure Qt such that examples, tests, and tools are configured, but not built by default. If you set the CMake variables &lt;b&gt;QT_BUILD_EXAMPLES_BY_DEFAULT&lt;/b&gt;, &lt;b&gt;QT_BUILD_TESTS_BY_DEFAULT&lt;/b&gt;, and &lt;b&gt;QT_BUILD_TOOLS_BY_DEFAULT&lt;/b&gt; to OFF, the respective parts will not be built by &quot;cmake --build .&quot;. Instead, CMake will generate individual targets that you can then build individually.</source>
          <target state="translated">您还可以配置Qt，以配置示例，测试和工具，但默认情况下未构建。如果将CMake变量&lt;b&gt;QT_BUILD_EXAMPLES_BY_DEFAULT&lt;/b&gt;，&lt;b&gt;QT_BUILD_TESTS_BY_DEFAULT&lt;/b&gt;和&lt;b&gt;QT_BUILD_TOOLS_BY_DEFAULT设置&lt;/b&gt;为OFF，则&amp;ldquo; cmake --build&amp;rdquo;不会构建各个部分。取而代之的是，CMake将生成单个目标，然后您可以单独构建它们。</target>
        </trans-unit>
        <trans-unit id="1ad837168cd24930a6fcdeb8e09c2a6a4693b546" translate="yes" xml:space="preserve">
          <source>You can also connect to any signals or call methods defined in the component using &lt;a href=&quot;qmetaobject#invokeMethod&quot;&gt;QMetaObject::invokeMethod&lt;/a&gt;() and &lt;a href=&quot;qobject#connect&quot;&gt;QObject::connect&lt;/a&gt;(). See &lt;a href=&quot;#invoking-qml-methods&quot;&gt;Invoking QML Methods&lt;/a&gt; and &lt;a href=&quot;#connecting-to-qml-signals&quot;&gt;Connecting to QML Signals&lt;/a&gt; below for further details.</source>
          <target state="translated">您还可以使用&lt;a href=&quot;qmetaobject#invokeMethod&quot;&gt;QMetaObject :: invokeMethod&lt;/a&gt;（）和&lt;a href=&quot;qobject#connect&quot;&gt;QObject :: connect&lt;/a&gt;（）连接到组件中定义的任何信号或调用方法。有关更多详细信息，请参见下面的&lt;a href=&quot;#invoking-qml-methods&quot;&gt;调用QML方法&lt;/a&gt;和&lt;a href=&quot;#connecting-to-qml-signals&quot;&gt;连接到QML信号&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3cd795831afdd1edc7920f9486e122916f8f32b9" translate="yes" xml:space="preserve">
          <source>You can also connect to any signals or call methods defined in the component using &lt;a href=&quot;qmetaobject#invokeMethod&quot;&gt;QMetaObject::invokeMethod&lt;/a&gt;() and &lt;a href=&quot;qobject#connect&quot;&gt;QObject::connect&lt;/a&gt;(). See &lt;a href=&quot;qtqml-cppintegration-interactqmlfromcpp#invoking-qml-methods&quot;&gt;Invoking QML Methods&lt;/a&gt; and &lt;a href=&quot;qtqml-cppintegration-interactqmlfromcpp#connecting-to-qml-signals&quot;&gt;Connecting to QML Signals&lt;/a&gt; below for further details.</source>
          <target state="translated">您还可以使用&lt;a href=&quot;qmetaobject#invokeMethod&quot;&gt;QMetaObject :: invokeMethod&lt;/a&gt;（）和&lt;a href=&quot;qobject#connect&quot;&gt;QObject :: connect&lt;/a&gt;（）连接到组件中定义的任何信号或调用方法。有关更多详细信息，请参见下面的&lt;a href=&quot;qtqml-cppintegration-interactqmlfromcpp#invoking-qml-methods&quot;&gt;调用QML方法&lt;/a&gt;和&lt;a href=&quot;qtqml-cppintegration-interactqmlfromcpp#connecting-to-qml-signals&quot;&gt;连接到QML信号&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="77f0d52258e0e2c0f80f798d40d8485b14b989f1" translate="yes" xml:space="preserve">
          <source>You can also connect to functors or C++11 lambdas:</source>
          <target state="translated">你也可以连接到漏斗或C++11的lambdas。</target>
        </trans-unit>
        <trans-unit id="9aeee35f3af494ab1218cf878db5db0cfbd49d8a" translate="yes" xml:space="preserve">
          <source>You can also control the miter limit for the generated outline using the &lt;a href=&quot;qpainterpathstroker#setMiterLimit&quot;&gt;setMiterLimit&lt;/a&gt;() function. The miter limit describes how far from each join the miter join can extend. The limit is specified in the units of width so the pixelwise miter limit will be &lt;code&gt;miterlimit * width&lt;/code&gt;. This value is only used if the join style is &lt;a href=&quot;qt#PenJoinStyle-enum&quot;&gt;Qt::MiterJoin&lt;/a&gt;.</source>
          <target state="translated">您还可以使用&lt;a href=&quot;qpainterpathstroker#setMiterLimit&quot;&gt;setMiterLimit&lt;/a&gt;（）函数控制所生成轮廓的斜切限制。斜接限制描述了斜接连接可以扩展到每个连接多远。该限制以width为单位指定，因此像素级斜接限制将为 &lt;code&gt;miterlimit * width&lt;/code&gt; 。仅当&lt;a href=&quot;qt#PenJoinStyle-enum&quot;&gt;联接&lt;/a&gt;样式为Qt :: MiterJoin时才使用此值。</target>
        </trans-unit>
        <trans-unit id="1c3ffebe27332a842a253fa58bd9c91bb961f299" translate="yes" xml:space="preserve">
          <source>You can also create a list-like data structure by constructing a &lt;a href=&quot;qjsvalue&quot;&gt;QJSValue&lt;/a&gt; using &lt;a href=&quot;qjsengine#newArray&quot;&gt;QJSEngine::newArray&lt;/a&gt;(). Such a JavaScript array does not need any conversion when passing it between QML and C++. See &lt;a href=&quot;qjsvalue#working-with-arrays&quot;&gt;QJSValue#Working With Arrays&lt;/a&gt; for details on how to manipulate JavaScript arrays from C++.</source>
          <target state="translated">您还可以通过使用&lt;a href=&quot;qjsengine#newArray&quot;&gt;QJSEngine :: newArray&lt;/a&gt;（）构造&lt;a href=&quot;qjsvalue&quot;&gt;QJSValue&lt;/a&gt;来创建类似列表的数据结构。这样的JavaScript数组在QML和C ++之间传递时不需要任何转换。有关如何从C ++操作JavaScript数组的详细信息，请参见&lt;a href=&quot;qjsvalue#working-with-arrays&quot;&gt;QJSValue＃Working With Arrays&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cf8153b5c325e1f3e20dfe7e3eab27a15ba9aa5b" translate="yes" xml:space="preserve">
          <source>You can also create rounded rectangles using the &lt;a href=&quot;qml-qtquick-rectangle#radius-prop&quot;&gt;radius&lt;/a&gt; property. Since this introduces curved edges to the corners of a rectangle, it may be appropriate to set the &lt;a href=&quot;qml-qtquick-item#antialiasing-prop&quot;&gt;Item::antialiasing&lt;/a&gt; property to improve its appearance.</source>
          <target state="translated">您也可以使用&lt;a href=&quot;qml-qtquick-rectangle#radius-prop&quot;&gt;radius&lt;/a&gt;属性创建圆角矩形。由于这会将弯曲的边缘引入矩形的角，因此可能应设置&lt;a href=&quot;qml-qtquick-item#antialiasing-prop&quot;&gt;Item :: antialiasing&lt;/a&gt;属性以改善其外观。</target>
        </trans-unit>
        <trans-unit id="7bc12180f5a6c33416c3d13f249ba5ae2cc49ba9" translate="yes" xml:space="preserve">
          <source>You can also define custom page sizes with custom names in any units you want and this unit size will be preserved and used as the base for all other unit size calculations.</source>
          <target state="translated">您也可以用您想要的任何单位来定义自定义的页面大小,这个单位大小将被保留并作为所有其他单位大小计算的基础。</target>
        </trans-unit>
        <trans-unit id="2964105a778e84b7b791b5acca8317ba6d2e5416" translate="yes" xml:space="preserve">
          <source>You can also define preprocessor symbols manually on the command line using the -D option. For example:</source>
          <target state="translated">你也可以在命令行中使用-D选项手动定义预处理程序符号。例如</target>
        </trans-unit>
        <trans-unit id="495677794f3b89ace45908b5ac29307e19ec7aee" translate="yes" xml:space="preserve">
          <source>You can also define slots to be virtual, which we have found quite useful in practice.</source>
          <target state="translated">你也可以定义插槽为虚拟的,我们发现这在实践中相当有用。</target>
        </trans-unit>
        <trans-unit id="5881f7dec3753692040a2095190a6d39972da2bb" translate="yes" xml:space="preserve">
          <source>You can also define the preprocessor symbol manually on the command line. For more information see the documentation of the &lt;a href=&quot;22-qdoc-configuration-generalvariables#defines-variable&quot;&gt;defines&lt;/a&gt; variable.</source>
          <target state="translated">您也可以在命令行上手动定义预处理器符号。有关更多信息，请参见&lt;a href=&quot;22-qdoc-configuration-generalvariables#defines-variable&quot;&gt;define&lt;/a&gt;变量的文档。</target>
        </trans-unit>
        <trans-unit id="c8f1f08cd0cdd7d9805078cddef27cc9df95e659" translate="yes" xml:space="preserve">
          <source>You can also delete child objects yourself, and they will remove themselves from their parents. For example, when the user removes a toolbar it may lead to the application deleting one of its &lt;a href=&quot;qtoolbar&quot;&gt;QToolBar&lt;/a&gt; objects, in which case the tool bar's &lt;a href=&quot;qmainwindow&quot;&gt;QMainWindow&lt;/a&gt; parent would detect the change and reconfigure its screen space accordingly.</source>
          <target state="translated">您也可以自己删除子对象，它们将从自己的父母中删除。例如，当用户删除工具栏时，它可能导致应用程序删除其&lt;a href=&quot;qtoolbar&quot;&gt;QToolBar&lt;/a&gt;对象之一，在这种情况下，工具栏的&lt;a href=&quot;qmainwindow&quot;&gt;QMainWindow&lt;/a&gt;父级将检测到更改并相应地重新配置其屏幕空间。</target>
        </trans-unit>
        <trans-unit id="9f5a76dd53b217d36d4a6e63be4032e9bb5343af" translate="yes" xml:space="preserve">
          <source>You can also directly specify a format string.</source>
          <target state="translated">你也可以直接指定一个格式字符串。</target>
        </trans-unit>
        <trans-unit id="c95cb6f23f06302d6c55586b3d2cce2debaf6184" translate="yes" xml:space="preserve">
          <source>You can also enable or disable hover effects for all Qt Quick Controls 2 applications by setting the &lt;code&gt;QT_QUICK_CONTROLS_HOVER_ENABLED&lt;/code&gt;&lt;a href=&quot;qtquickcontrols2-environment#&quot;&gt;environment variable&lt;/a&gt;.</source>
          <target state="translated">您还可以通过设置 &lt;code&gt;QT_QUICK_CONTROLS_HOVER_ENABLED&lt;/code&gt; &lt;a href=&quot;qtquickcontrols2-environment#&quot;&gt;环境变量&lt;/a&gt;来为所有Qt Quick Controls 2应用程序启用或禁用悬停效果。</target>
        </trans-unit>
        <trans-unit id="ae48603cfdfb56cd149aae3eeb10ea5b57df0c87" translate="yes" xml:space="preserve">
          <source>You can also enable or disable hover effects for all Qt Quick Controls applications by setting the &lt;code&gt;QT_QUICK_CONTROLS_HOVER_ENABLED&lt;/code&gt;&lt;a href=&quot;qtquickcontrols2-environment&quot;&gt;environment variable&lt;/a&gt;.</source>
          <target state="translated">您还可以通过设置 &lt;code&gt;QT_QUICK_CONTROLS_HOVER_ENABLED&lt;/code&gt; &lt;a href=&quot;qtquickcontrols2-environment&quot;&gt;环境变量&lt;/a&gt;来为所有Qt Quick Controls应用程序启用或禁用悬停效果。</target>
        </trans-unit>
        <trans-unit id="72afa4c9ec40747de29dd7d96f5b0501426360e4" translate="yes" xml:space="preserve">
          <source>You can also get to an item in the stack using &lt;a href=&quot;qml-qtquick-controls-stackview#get-method&quot;&gt;get(index)&lt;/a&gt;. You should use this function if your item depends on another item in the stack, as the function will ensure that the item at the given index gets loaded before it is returned.</source>
          <target state="translated">您还可以使用&lt;a href=&quot;qml-qtquick-controls-stackview#get-method&quot;&gt;get（index）到达&lt;/a&gt;堆栈中的项目。如果您的项目依赖于堆栈中的另一个项目，则应使用此函数，因为该函数将确保在返回给定索引的项目之前将其加载。</target>
        </trans-unit>
        <trans-unit id="d4a33f696fc2285d8d9e8ab8699aee0ffa6967f4" translate="yes" xml:space="preserve">
          <source>You can also get to an item in the stack using &lt;a href=&quot;qml-qtquick-controls2-stackview#get-method&quot;&gt;get(index)&lt;/a&gt;.</source>
          <target state="translated">您还可以使用&lt;a href=&quot;qml-qtquick-controls2-stackview#get-method&quot;&gt;get（index）到达&lt;/a&gt;堆栈中的项目。</target>
        </trans-unit>
        <trans-unit id="93e9e063bf84db05a18d5971f8741a44387b433c" translate="yes" xml:space="preserve">
          <source>You can also insert new data into the model by calling &lt;a href=&quot;qsqltablemodel#insertRecord&quot;&gt;QSqlTableModel::insertRecord&lt;/a&gt;(). In the following example snippet, a &lt;a href=&quot;qsqlrecord&quot;&gt;QSqlRecord&lt;/a&gt; is populated with book details and appended to the model:</source>
          <target state="translated">您也可以通过调用&lt;a href=&quot;qsqltablemodel#insertRecord&quot;&gt;QSqlTableModel :: insertRecord&lt;/a&gt;（）将新数据插入模型。在以下示例代码段中，使用书的详细信息填充&lt;a href=&quot;qsqlrecord&quot;&gt;QSqlRecord&lt;/a&gt;并将其附加到模型中：</target>
        </trans-unit>
        <trans-unit id="c501deaed579413e49d6adf5ad78878b81b429ba" translate="yes" xml:space="preserve">
          <source>You can also limit the maximum &lt;a href=&quot;qml-qtquick-springanimation#velocity-prop&quot;&gt;velocity&lt;/a&gt; of the animation.</source>
          <target state="translated">您还可以限制动画的最大&lt;a href=&quot;qml-qtquick-springanimation#velocity-prop&quot;&gt;速度&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6718aedb8da51303c93933a9bce250fffde1fa96" translate="yes" xml:space="preserve">
          <source>You can also load the Pepper Flash player from a specific location by using command line arguments:</source>
          <target state="translated">您也可以通过使用命令行参数从特定位置加载Pepper Flash播放器。</target>
        </trans-unit>
        <trans-unit id="90610525b32f72962bc25df3630f6b0293f18e18" translate="yes" xml:space="preserve">
          <source>You can also make cells span several rows and columns. For example:</source>
          <target state="translated">你也可以让单元格跨越几行几列。例如:</target>
        </trans-unit>
        <trans-unit id="5f9ee9285506588657a6eb420b07d260f59d75d2" translate="yes" xml:space="preserve">
          <source>You can also make namespaces tagged with &lt;a href=&quot;qobject#Q_NAMESPACE&quot;&gt;Q_NAMESPACE&lt;/a&gt; available this way, in order to expose any enums tagged with &lt;a href=&quot;qobject#Q_ENUM_NS&quot;&gt;Q_ENUM_NS&lt;/a&gt; they contain.</source>
          <target state="translated">您还可以通过这种方式使标记有&lt;a href=&quot;qobject#Q_NAMESPACE&quot;&gt;Q_NAMESPACE的&lt;/a&gt;命名空间可用，以便公开其包含的标记有&lt;a href=&quot;qobject#Q_ENUM_NS&quot;&gt;Q_ENUM_NS的&lt;/a&gt;所有枚举。</target>
        </trans-unit>
        <trans-unit id="e226768b1d716b4795bc5591a3c92f9af6d2ad31" translate="yes" xml:space="preserve">
          <source>You can also make the listing start at any character or number by simply provide the number or character you want to start at. For example:</source>
          <target state="translated">你也可以通过简单地提供你想要开始的数字或字符,使列表从任何字符或数字开始。例如:</target>
        </trans-unit>
        <trans-unit id="5d0a6623b2478ee740b1552506030425d2261cb8" translate="yes" xml:space="preserve">
          <source>You can also mix and match normal buttons and standard buttons.</source>
          <target state="translated">你也可以将普通按钮和标准按钮混合搭配。</target>
        </trans-unit>
        <trans-unit id="ddd7e8b3087da3cf47c673f2fcc30fd91295ecb0" translate="yes" xml:space="preserve">
          <source>You can also pass string literals to functions that take QStrings as arguments, invoking the &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;(const char *) constructor. Similarly, you can pass a &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; to a function that takes a &lt;code&gt;const char *&lt;/code&gt; argument using the &lt;a href=&quot;qtglobal#qPrintable&quot;&gt;qPrintable&lt;/a&gt;() macro which returns the given &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; as a &lt;code&gt;const char *&lt;/code&gt;. This is equivalent to calling &amp;lt;&lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;&amp;gt;.&lt;a href=&quot;qstring#toLocal8Bit&quot;&gt;toLocal8Bit&lt;/a&gt;().&lt;a href=&quot;qstring#constData&quot;&gt;constData&lt;/a&gt;().</source>
          <target state="translated">您还可以将字符串文字传递给以&lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;作为参数的函数，从而调用QString（const char *）构造函数。同样，您可以使用&lt;a href=&quot;qtglobal#qPrintable&quot;&gt;qPrintable&lt;/a&gt;（）宏将&lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;传递给采用 &lt;code&gt;const char *&lt;/code&gt; 参数的函数，该宏将给定的&lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;作为 &lt;code&gt;const char *&lt;/code&gt; 返回。这等效于调用&amp;lt; &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;gt;。&lt;a href=&quot;qstring#toLocal8Bit&quot;&gt;toLocal8Bit&lt;/a&gt;（）。&lt;a href=&quot;qstring#constData&quot;&gt;constData&lt;/a&gt;（）。</target>
        </trans-unit>
        <trans-unit id="99c450e59dc57987c307c2d8c340429fc8aca4b5" translate="yes" xml:space="preserve">
          <source>You can also pass string literals to functions that take QStrings as arguments, invoking the QString(const char *) constructor. Similarly, you can pass a QString to a function that takes a &lt;code&gt;const char *&lt;/code&gt; argument using the &lt;a href=&quot;qtglobal#qPrintable&quot;&gt;qPrintable&lt;/a&gt;() macro which returns the given QString as a &lt;code&gt;const char *&lt;/code&gt;. This is equivalent to calling &amp;lt;QString&amp;gt;.&lt;a href=&quot;qstring#toLocal8Bit&quot;&gt;toLocal8Bit&lt;/a&gt;().&lt;a href=&quot;qstring#constData&quot;&gt;constData&lt;/a&gt;().</source>
          <target state="translated">您还可以将字符串文字传递给以QStrings作为参数的函数，从而调用QString（const char *）构造函数。同样，您可以使用&lt;a href=&quot;qtglobal#qPrintable&quot;&gt;qPrintable&lt;/a&gt;（）宏将QString传递给采用 &lt;code&gt;const char *&lt;/code&gt; 参数的函数，该宏将给定QString作为 &lt;code&gt;const char *&lt;/code&gt; 返回。这等效于调用&amp;lt;QString&amp;gt;。&lt;a href=&quot;qstring#toLocal8Bit&quot;&gt;toLocal8Bit&lt;/a&gt;（）。&lt;a href=&quot;qstring#constData&quot;&gt;constData&lt;/a&gt;（）。</target>
        </trans-unit>
        <trans-unit id="b991e25f8827867f24c7f5249caf8015e4a1e5f9" translate="yes" xml:space="preserve">
          <source>You can also provide alternative declarations to those within a scope by using an &lt;code&gt;else&lt;/code&gt; scope. Each &lt;code&gt;else&lt;/code&gt; scope is processed if the conditions for the preceding scopes are false. This allows you to write complex tests when combined with other scopes (separated by the &lt;code&gt;:&lt;/code&gt; operator as above). For example:</source>
          <target state="translated">您还可以使用 &lt;code&gt;else&lt;/code&gt; 范围为范围内的声明提供替代声明。如果前述范围的条件为false，则处理 &lt;code&gt;else&lt;/code&gt; 每个范围。这样，当您与其他范围结合使用时，您就可以编写复杂的测试（如上所述 &lt;code&gt;:&lt;/code&gt; 运算符分隔）。例如：</target>
        </trans-unit>
        <trans-unit id="9e6d0774eca1a1bf95fb68001e70ffbcfbee6d1c" translate="yes" xml:space="preserve">
          <source>You can also provide string data as an array of &lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt;s:</source>
          <target state="translated">您还可以将字符串数据作为&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt;的数组提供：</target>
        </trans-unit>
        <trans-unit id="60d82f617096e1fdc4d66d4406245613cf35796e" translate="yes" xml:space="preserve">
          <source>You can also provide your own custom scene interaction, by creating a subclass of &lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt;, and reimplementing the mouse and key event handlers. To simplify how you programmatically interact with items in the view, &lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt; provides the mapping functions &lt;a href=&quot;qgraphicsview#mapToScene&quot;&gt;mapToScene&lt;/a&gt;() and &lt;a href=&quot;qgraphicsview#mapFromScene&quot;&gt;mapFromScene&lt;/a&gt;(), and the item accessors &lt;a href=&quot;qgraphicsview#items&quot;&gt;items&lt;/a&gt;() and &lt;a href=&quot;qgraphicsview#itemAt&quot;&gt;itemAt&lt;/a&gt;(). These functions allow you to map points, rectangles, polygons and paths between view coordinates and scene coordinates, and to find items on the scene using view coordinates.</source>
          <target state="translated">您还可以通过创建&lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt;的子类并重新实现鼠标和键事件处理程序来提供自己的自定义场景交互。为了简化您如何以编程方式与视图中的项目进行交互，&lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt;提供了映射函数&lt;a href=&quot;qgraphicsview#mapToScene&quot;&gt;mapToScene&lt;/a&gt;（）和&lt;a href=&quot;qgraphicsview#mapFromScene&quot;&gt;mapFromScene&lt;/a&gt;（），以及项目访问器&lt;a href=&quot;qgraphicsview#items&quot;&gt;item&lt;/a&gt;（）和&lt;a href=&quot;qgraphicsview#itemAt&quot;&gt;itemAt&lt;/a&gt;（）。这些功能允许您在视图坐标和场景坐标之间映射点，矩形，多边形和路径，并使用视图坐标在场景中查找项目。</target>
        </trans-unit>
        <trans-unit id="a89da95d5e933472c099c82579055c02a814f3ee" translate="yes" xml:space="preserve">
          <source>You can also provide your own custom scene interaction, by creating a subclass of QGraphicsView, and reimplementing the mouse and key event handlers. To simplify how you programmatically interact with items in the view, QGraphicsView provides the mapping functions &lt;a href=&quot;qgraphicsview#mapToScene&quot;&gt;mapToScene&lt;/a&gt;() and &lt;a href=&quot;qgraphicsview#mapFromScene&quot;&gt;mapFromScene&lt;/a&gt;(), and the item accessors &lt;a href=&quot;qgraphicsview#items&quot;&gt;items&lt;/a&gt;() and &lt;a href=&quot;qgraphicsview#itemAt&quot;&gt;itemAt&lt;/a&gt;(). These functions allow you to map points, rectangles, polygons and paths between view coordinates and scene coordinates, and to find items on the scene using view coordinates.</source>
          <target state="translated">您还可以通过创建QGraphicsView的子类并重新实现鼠标和键事件处理程序来提供自己的自定义场景交互。为了简化您如何以编程方式与视图中的项目进行交互，QGraphicsView提供了映射函数&lt;a href=&quot;qgraphicsview#mapToScene&quot;&gt;mapToScene&lt;/a&gt;（）和&lt;a href=&quot;qgraphicsview#mapFromScene&quot;&gt;mapFromScene&lt;/a&gt;（），以及项目访问器&lt;a href=&quot;qgraphicsview#items&quot;&gt;item&lt;/a&gt;（）和&lt;a href=&quot;qgraphicsview#itemAt&quot;&gt;itemAt&lt;/a&gt;（）。这些功能允许您在视图坐标和场景坐标之间映射点，矩形，多边形和路径，并使用视图坐标在场景中查找项目。</target>
        </trans-unit>
        <trans-unit id="8ef938f0ccb2c7c1ceaa0721861944de7db14f17" translate="yes" xml:space="preserve">
          <source>You can also push an array of items (property lists) if you need to push several items in one go. A transition will then only occur between the current item and the last item in the list. Loading the other items will be deferred until needed.</source>
          <target state="translated">如果您需要一次推送多个项目,您也可以推送一个项目数组(属性列表)。然后,过渡将只发生在当前项目和列表中最后一个项目之间。其他项目的加载将被推迟到需要的时候进行。</target>
        </trans-unit>
        <trans-unit id="bf46c1c7bd044d1c6d0f2a1cb3299668d6ded843" translate="yes" xml:space="preserve">
          <source>You can also query each device for the formats it supports. A format in this context is a set consisting of a specific byte order, channel, codec, frequency, sample rate, and sample type. A format is represented by the &lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; class.</source>
          <target state="translated">您还可以查询每个设备以获取其支持的格式。在这种情况下，格式是由特定字节顺序，通道，编解码器，频率，采样率和采样类型组成的集合。格式由&lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt;类表示。</target>
        </trans-unit>
        <trans-unit id="cb3875ff963bbbe45e51c9421287518368f8326f" translate="yes" xml:space="preserve">
          <source>You can also reimplement &lt;a href=&quot;qabstractitemmodel#hasChildren&quot;&gt;hasChildren&lt;/a&gt;() to provide special behavior for models where the implementation of &lt;a href=&quot;qabstractitemmodel#rowCount&quot;&gt;rowCount&lt;/a&gt;() is expensive. This makes it possible for models to restrict the amount of data requested by views, and can be used as a way to implement lazy population of model data.</source>
          <target state="translated">您也可以重新实现&lt;a href=&quot;qabstractitemmodel#hasChildren&quot;&gt;hasChildren&lt;/a&gt;（），以为&lt;a href=&quot;qabstractitemmodel#rowCount&quot;&gt;rowCount&lt;/a&gt;（）的实现昂贵的模型提供特殊的行为。这使得模型可以限制视图请求的数据量，并且可以用作实现模型数据的惰性填充的一种方式。</target>
        </trans-unit>
        <trans-unit id="4749cffbb9b66288d1fa435add580c87bbd307f8" translate="yes" xml:space="preserve">
          <source>You can also retrieve information about where the form is stored using &lt;a href=&quot;qdesignerformwindowinterface#absoluteDir&quot;&gt;absoluteDir&lt;/a&gt;(), its include files using &lt;a href=&quot;qdesignerformwindowinterface#includeHints&quot;&gt;includeHints&lt;/a&gt;(), and its layout and pixmap functions using &lt;a href=&quot;qdesignerformwindowinterface#layoutDefault&quot;&gt;layoutDefault&lt;/a&gt;(), &lt;a href=&quot;qdesignerformwindowinterface#layoutFunction&quot;&gt;layoutFunction&lt;/a&gt;() and &lt;a href=&quot;qdesignerformwindowinterface#pixmapFunction&quot;&gt;pixmapFunction&lt;/a&gt;(). You can find out whether the form window has been modified (but not saved) or not, using the &lt;a href=&quot;qdesignerformwindowinterface#isDirty&quot;&gt;isDirty&lt;/a&gt;() function. You can retrieve its &lt;a href=&quot;qdesignerformwindowinterface#author&quot;&gt;author&lt;/a&gt;(), its &lt;a href=&quot;qdesignerformwindowinterface#contents&quot;&gt;contents&lt;/a&gt;(), its &lt;a href=&quot;qdesignerformwindowinterface#fileName&quot;&gt;fileName&lt;/a&gt;(), associated &lt;a href=&quot;qdesignerformwindowinterface#comment&quot;&gt;comment&lt;/a&gt;() and &lt;a href=&quot;qdesignerformwindowinterface#exportMacro&quot;&gt;exportMacro&lt;/a&gt;(), its mainContainer(), its &lt;a href=&quot;qdesignerformwindowinterface#features&quot;&gt;features&lt;/a&gt;(), its &lt;a href=&quot;qdesignerformwindowinterface#grid&quot;&gt;grid&lt;/a&gt;() and its &lt;a href=&quot;qdesignerformwindowinterface#resourceFiles&quot;&gt;resourceFiles&lt;/a&gt;().</source>
          <target state="translated">您还可以检索有关形式使用存储的信息&lt;a href=&quot;qdesignerformwindowinterface#absoluteDir&quot;&gt;absoluteDir&lt;/a&gt;（），它包括使用文件&lt;a href=&quot;qdesignerformwindowinterface#includeHints&quot;&gt;includeHints&lt;/a&gt;（使用），它的布局和功能的像素图&lt;a href=&quot;qdesignerformwindowinterface#layoutDefault&quot;&gt;layoutDefault&lt;/a&gt;（），&lt;a href=&quot;qdesignerformwindowinterface#layoutFunction&quot;&gt;layoutFunction&lt;/a&gt;（）和&lt;a href=&quot;qdesignerformwindowinterface#pixmapFunction&quot;&gt;pixmapFunction&lt;/a&gt;（）。您可以使用&lt;a href=&quot;qdesignerformwindowinterface#isDirty&quot;&gt;isDirty&lt;/a&gt;（）函数找出表单窗口是否已被修改（但未保存）。您可以检索其&lt;a href=&quot;qdesignerformwindowinterface#author&quot;&gt;作者&lt;/a&gt;（），其&lt;a href=&quot;qdesignerformwindowinterface#contents&quot;&gt;内容&lt;/a&gt;（），其&lt;a href=&quot;qdesignerformwindowinterface#fileName&quot;&gt;fileName&lt;/a&gt;（），关联的&lt;a href=&quot;qdesignerformwindowinterface#comment&quot;&gt;注释&lt;/a&gt;（）和&lt;a href=&quot;qdesignerformwindowinterface#exportMacro&quot;&gt;exportMacro&lt;/a&gt;（），其mainContainer（），其&lt;a href=&quot;qdesignerformwindowinterface#features&quot;&gt;功能&lt;/a&gt;（），其&lt;a href=&quot;qdesignerformwindowinterface#grid&quot;&gt;网格&lt;/a&gt;（）及其&lt;a href=&quot;qdesignerformwindowinterface#resourceFiles&quot;&gt;resourceFiles&lt;/a&gt;（）。</target>
        </trans-unit>
        <trans-unit id="5c126bedaa418ec54c942d869c3284fb56e31a0a" translate="yes" xml:space="preserve">
          <source>You can also set a custom shortcut key using the &lt;a href=&quot;qabstractbutton#shortcut-prop&quot;&gt;setShortcut&lt;/a&gt;() function. This is useful mostly for buttons that do not have any text, and therefore can't have any automatic shortcut.</source>
          <target state="translated">您还可以使用&lt;a href=&quot;qabstractbutton#shortcut-prop&quot;&gt;setShortcut&lt;/a&gt;（）函数设置自定义快捷键。这对于大多数没有文本的按钮很有用，因此不能有任何自动快捷键。</target>
        </trans-unit>
        <trans-unit id="776d36442ba8c212d6868d1db6f17da4d853951d" translate="yes" xml:space="preserve">
          <source>You can also set a default cursor directly on the view by calling &lt;a href=&quot;qwidget#cursor-prop&quot;&gt;QGraphicsView::setCursor&lt;/a&gt;().</source>
          <target state="translated">您也可以通过调用&lt;a href=&quot;qwidget#cursor-prop&quot;&gt;QGraphicsView :: setCursor&lt;/a&gt;（）直接在视图上设置默认光标。</target>
        </trans-unit>
        <trans-unit id="d747adec72177b9f934103a1016b19735ae1591b" translate="yes" xml:space="preserve">
          <source>You can also set default values for some of the tags in the DITA &lt;code&gt;&amp;lt;prolog&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;metadata&amp;gt;&lt;/code&gt; elements:</source>
          <target state="translated">您还可以在DITA &lt;code&gt;&amp;lt;prolog&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;metadata&amp;gt;&lt;/code&gt; 元素中为某些标签设置默认值：</target>
        </trans-unit>
        <trans-unit id="17aa1f3299752e452109617b553b87040cb4b0f7" translate="yes" xml:space="preserve">
          <source>You can also specify &lt;code&gt;CONFIG += qtquickcompiler&lt;/code&gt; in your &lt;code&gt;.pro&lt;/code&gt; file to perform the compilation ahead of time and integrate the resulting byte code directly into your executable. For more information, see &lt;a href=&quot;http://doc.qt.io/QtQuickCompiler&quot;&gt;Qt Quick Compiler&lt;/a&gt;.</source>
          <target state="translated">您还可以在 &lt;code&gt;.pro&lt;/code&gt; 文件中指定 &lt;code&gt;CONFIG += qtquickcompiler&lt;/code&gt; ，以提前执行编译并将结果字节码直接集成到可执行文件中。有关更多信息，请参见&lt;a href=&quot;http://doc.qt.io/QtQuickCompiler&quot;&gt;Qt Quick Compiler&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="89a8be8ea60a6f9722cacadd796b09978d2f3cfa" translate="yes" xml:space="preserve">
          <source>You can also specify &lt;code&gt;CONFIG += qtquickcompiler&lt;/code&gt; in your &lt;code&gt;.pro&lt;/code&gt; file to perform the compilation ahead of time and integrate the resulting byte code directly into your executable. For more information, see &lt;a href=&quot;https://doc.qt.io/QtQuickCompiler&quot;&gt;Qt Quick Compiler&lt;/a&gt;.</source>
          <target state="translated">您还可以在 &lt;code&gt;.pro&lt;/code&gt; 文件中指定 &lt;code&gt;CONFIG += qtquickcompiler&lt;/code&gt; ，以提前执行编译并将结果字节码直接集成到可执行文件中。有关更多信息，请参见&lt;a href=&quot;https://doc.qt.io/QtQuickCompiler&quot;&gt;Qt Quick Compiler&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c122cf445df339f82cac6dd51fba92d0bb88d7f4" translate="yes" xml:space="preserve">
          <source>You can also specify the .qml source files with a wildcard match. The search is not recursive so you need to specify each directory where there are user interface strings in the source code:</source>
          <target state="translated">你也可以用通配符指定.qml源文件。搜索不是递归的,所以你需要指定源码中有用户界面字符串的每个目录。</target>
        </trans-unit>
        <trans-unit id="2837828315926b39628f791f19c61ae0299bddd2" translate="yes" xml:space="preserve">
          <source>You can also specify the form's &lt;b&gt;Include Hints&lt;/b&gt;; i.e., provide a list of the header files which will then be included in the form window's associated UI file. Header files may be local, i.e., relative to the project's directory, &lt;code&gt;&quot;mywidget.h&quot;&lt;/code&gt;, or global, i.e. part of Qt or the compilers standard libraries: &lt;code&gt;&amp;lt;QtWidgets/QWidget&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">您还可以指定表单的&lt;b&gt;包含提示&lt;/b&gt;；也就是说，提供头文件列表，然后将其包含在表单窗口的关联UI文件中。头文件可以是本地的，即相对于项目目录 &lt;code&gt;&quot;mywidget.h&quot;&lt;/code&gt; ，也可以是全局的，即Qt或编译器标准库的一部分： &lt;code&gt;&amp;lt;QtWidgets/QWidget&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba90e8afcdb700dd00b11f4df206e0fd8fdf3b5e" translate="yes" xml:space="preserve">
          <source>You can also start the continuation in a new thread or a custom thread pool using &lt;a href=&quot;qtfuture#Launch-enum&quot;&gt;QtFuture::Launch&lt;/a&gt; policies. For example:</source>
          <target state="translated">您也可以使用&lt;a href=&quot;qtfuture#Launch-enum&quot;&gt;QtFuture :: Launch&lt;/a&gt;策略在新线程或自定义线程池中开始继续。例如：</target>
        </trans-unit>
        <trans-unit id="df5d1819a1307d5494b6da26356b6ae06bd6e11a" translate="yes" xml:space="preserve">
          <source>You can also twist the coordinate system around the origin using the &lt;a href=&quot;qpainter#shear&quot;&gt;QPainter::shear&lt;/a&gt;() function. All the transformation operations operate on &lt;a href=&quot;qpainter&quot;&gt;QPainter&lt;/a&gt;'s transformation matrix that you can retrieve using the &lt;a href=&quot;qpainter#worldTransform&quot;&gt;QPainter::worldTransform&lt;/a&gt;() function. A matrix transforms a point in the plane to another point.</source>
          <target state="translated">您还可以使用&lt;a href=&quot;qpainter#shear&quot;&gt;QPainter :: shear&lt;/a&gt;（）函数围绕原点扭曲坐标系。所有转换操作都在&lt;a href=&quot;qpainter&quot;&gt;QPainter&lt;/a&gt;的转换矩阵上进行，您可以使用&lt;a href=&quot;qpainter#worldTransform&quot;&gt;QPainter :: worldTransform&lt;/a&gt;（）函数进行检索。矩阵将平面中的一个点转换为另一个点。</target>
        </trans-unit>
        <trans-unit id="4d5c11dae8a79264f797e9207813f80f77e79d05" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;qcamerainfo&quot;&gt;QCameraInfo&lt;/a&gt; to get general information about a camera device such as description, physical position on the system, or camera sensor orientation.</source>
          <target state="translated">您还可以使用&lt;a href=&quot;qcamerainfo&quot;&gt;QCameraInfo&lt;/a&gt;获取有关摄像头设备的常规信息，例如描述，系统上的物理位置或摄像头传感器方向。</target>
        </trans-unit>
        <trans-unit id="b715ab75bed6d356a7c7ef6bbd3fc1c8954e989b" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;qcoreapplication&quot;&gt;QCoreApplication&lt;/a&gt; with &lt;a href=&quot;qqmlapplicationengine&quot;&gt;QQmlApplicationEngine&lt;/a&gt;, if you are not using any QML modules which require a &lt;a href=&quot;qguiapplication&quot;&gt;QGuiApplication&lt;/a&gt; (such as &lt;code&gt;QtQuick&lt;/code&gt;).</source>
          <target state="translated">如果未使用任何需要&lt;a href=&quot;qguiapplication&quot;&gt;QGuiApplication的&lt;/a&gt; QML模块（例如 &lt;code&gt;QtQuick&lt;/code&gt; ），则还可以将&lt;a href=&quot;qcoreapplication&quot;&gt;QCoreApplication&lt;/a&gt;与&lt;a href=&quot;qqmlapplicationengine&quot;&gt;QQmlApplicationEngine&lt;/a&gt;一起使用。</target>
        </trans-unit>
        <trans-unit id="b6af91b6a606144049ad27abedc87807cfb42968" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;qcoreapplication&quot;&gt;QCoreApplication&lt;/a&gt; with QQmlApplicationEngine, if you are not using any QML modules which require a &lt;a href=&quot;qguiapplication&quot;&gt;QGuiApplication&lt;/a&gt; (such as &lt;code&gt;QtQuick&lt;/code&gt;).</source>
          <target state="translated">如果未使用任何需要&lt;a href=&quot;qguiapplication&quot;&gt;QGuiApplication的&lt;/a&gt;QML模块（例如 &lt;code&gt;QtQuick&lt;/code&gt; ），则还可以将&lt;a href=&quot;qcoreapplication&quot;&gt;QCoreApplication&lt;/a&gt;与QQmlApplicationEngine一起使用。</target>
        </trans-unit>
        <trans-unit id="138170115677d805bc8e9dcdcf51405105492b30" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;qlibraryinfo#location&quot;&gt;QLibraryInfo::location&lt;/a&gt;() to locate the translations for the Qt modules used. You can request the path to the translations at run-time by passing &lt;a href=&quot;qlibraryinfo#LibraryLocation-enum&quot;&gt;QLibraryInfo::TranslationsPath&lt;/a&gt; to this function.</source>
          <target state="translated">您也可以使用&lt;a href=&quot;qlibraryinfo#location&quot;&gt;QLibraryInfo :: location&lt;/a&gt;（）找到所用Qt模块的翻译。您可以在运行时通过将&lt;a href=&quot;qlibraryinfo#LibraryLocation-enum&quot;&gt;QLibraryInfo :: TranslationsPath&lt;/a&gt;传递给此函数来请求翻译的路径。</target>
        </trans-unit>
        <trans-unit id="9adce45cacc80c5e505a29cae9a44d0970cf35e6" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;qmodbusreply#isFinished&quot;&gt;isFinished&lt;/a&gt;() to check if a QNetworkReply has finished even before you receive the finished() signal.</source>
          <target state="translated">您还可以使用&lt;a href=&quot;qmodbusreply#isFinished&quot;&gt;isFinished&lt;/a&gt;（）来检查QNetworkReply是否已完成，甚至在您未收到finish（）信号之前。</target>
        </trans-unit>
        <trans-unit id="ae390658db8eb2fb14dd0ab7f977ff35e2a6b236" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;qnetworkreply#isFinished&quot;&gt;isFinished&lt;/a&gt;() to check if a &lt;a href=&quot;qnetworkreply&quot;&gt;QNetworkReply&lt;/a&gt; has finished even before you receive the finished() signal.</source>
          <target state="translated">您还可以使用&lt;a href=&quot;qnetworkreply#isFinished&quot;&gt;isFinished&lt;/a&gt;（）来检查&lt;a href=&quot;qnetworkreply&quot;&gt;QNetworkReply&lt;/a&gt;是否已完成，甚至在您未收到finish（）信号之前。</target>
        </trans-unit>
        <trans-unit id="5dc683c9c7118084d32b8123a33368697dfb2e65" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;qqmlengine#QML_EXTENDED_NAMESPACE&quot;&gt;QML_EXTENDED_NAMESPACE&lt;/a&gt;(namespace) to register a namespace, and especially the enumerations declared within, as an extension to a type.</source>
          <target state="translated">您还可以使用&lt;a href=&quot;qqmlengine#QML_EXTENDED_NAMESPACE&quot;&gt;QML_EXTENDED_NAMESPACE&lt;/a&gt;（名称空间）注册名称空间，尤其是其中声明的枚举，作为类型的扩展。</target>
        </trans-unit>
        <trans-unit id="3786e8c874b0b3baeb15b0f97a53c8080a74dce3" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;qregularexpressionmatchiterator#peekNext&quot;&gt;peekNext()&lt;/a&gt; to get the next result without advancing the iterator.</source>
          <target state="translated">您也可以使用&lt;a href=&quot;qregularexpressionmatchiterator#peekNext&quot;&gt;peekNext（）&lt;/a&gt;获得下一个结果，而无需前进迭代器。</target>
        </trans-unit>
        <trans-unit id="c464f518a3d126e3d8ae5eb18ad568dfed3fa4c1" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;qsqltablemodel#data&quot;&gt;QSqlTableModel::data&lt;/a&gt;() and &lt;a href=&quot;qsqltablemodel#setData&quot;&gt;QSqlTableModel::setData&lt;/a&gt;(), which are inherited from &lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt;, to access the data. For example, here's how to update a record using &lt;a href=&quot;qsqltablemodel#setData&quot;&gt;setData()&lt;/a&gt;:</source>
          <target state="translated">您还可以使用从&lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt;继承的&lt;a href=&quot;qsqltablemodel#data&quot;&gt;QSqlTableModel :: data&lt;/a&gt;（）和&lt;a href=&quot;qsqltablemodel#setData&quot;&gt;QSqlTableModel :: setData&lt;/a&gt;（）来访问数据。例如，以下是使用&lt;a href=&quot;qsqltablemodel#setData&quot;&gt;setData（）&lt;/a&gt;更新记录的方法：</target>
        </trans-unit>
        <trans-unit id="d588703ee66bd540cdba6390ab19aefcc26ba367" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;qtfuture#connect&quot;&gt;QtFuture::connect&lt;/a&gt; to connect signals to a QFuture object which will be resolved when a signal is emitted. This allows working with signals like with QFuture objects. For example, if you combine it with &lt;a href=&quot;qfuture#then&quot;&gt;then&lt;/a&gt;(), you can attach multiple continuations to a signal, which are invoked in the same thread or a new thread.</source>
          <target state="translated">您也可以使用&lt;a href=&quot;qtfuture#connect&quot;&gt;QtFuture :: connect&lt;/a&gt;将信号连接到QFuture对象，该对象将在发出信号时解析。这样可以处理QFuture对象之类的信号。例如，如果将其与&lt;a href=&quot;qfuture#then&quot;&gt;then&lt;/a&gt;（）组合，则可以将多个延续附加到信号，这些延续在同一线程或新线程中调用。</target>
        </trans-unit>
        <trans-unit id="8f20c7585eb7be0ada5570b57fabf5fbacfa0a21" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;-opengl dynamic&lt;/code&gt;, which enable applications to dynamically switch between the available options at runtime. For more details about the benefits of using dynamic GL-switching, see &lt;a href=&quot;windows-requirements#graphics-drivers&quot;&gt;Graphics Drivers&lt;/a&gt;.</source>
          <target state="translated">您还可以使用 &lt;code&gt;-opengl dynamic&lt;/code&gt; ，它使应用程序可以在运行时在可用选项之间动态切换。有关使用动态GL切换的好处的更多详细信息，请参见&lt;a href=&quot;windows-requirements#graphics-drivers&quot;&gt;图形驱动程序&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c61937b948022dc4fb6c09f7b42b4e90bb5731ed" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;-opengl dynamic&lt;/code&gt;, which enable applications to dynamically switch between the available options at runtime. For more details about the benefits of using dynamic GL-switching, see Graphics Drivers.</source>
          <target state="translated">您还可以使用 &lt;code&gt;-opengl dynamic&lt;/code&gt; ，它使应用程序可以在运行时在可用选项之间动态切换。有关使用动态GL切换的好处的更多详细信息，请参阅图形驱动程序。</target>
        </trans-unit>
        <trans-unit id="efbdbead93b080f83c2948576aa5b3be9f7384a5" translate="yes" xml:space="preserve">
          <source>You can also use QCameraInfo to get general information about a camera device such as description, physical position on the system, or camera sensor orientation.</source>
          <target state="translated">您还可以使用 QCameraInfo 获得有关摄像机设备的一般信息,如描述、系统上的物理位置或摄像机传感器方向。</target>
        </trans-unit>
        <trans-unit id="25d049ca8756989786a034beec5535e30b1d9255" translate="yes" xml:space="preserve">
          <source>You can also use QLibraryInfo::location() to locate the translations for the Qt modules used. You can request the path to the translations at run-time by passing &lt;a href=&quot;qlibraryinfo#LibraryPath-enum&quot;&gt;QLibraryInfo::TranslationsPath&lt;/a&gt; to this function.</source>
          <target state="translated">您也可以使用QLibraryInfo :: location（）找到所用Qt模块的翻译。您可以在运行时通过将&lt;a href=&quot;qlibraryinfo#LibraryPath-enum&quot;&gt;QLibraryInfo :: TranslationsPath&lt;/a&gt;传递给此函数来请求翻译的路径。</target>
        </trans-unit>
        <trans-unit id="d493bf3a199a27a17796ddcea05a4b9d65fb783e" translate="yes" xml:space="preserve">
          <source>You can also use a &lt;code&gt;qt.conf&lt;/code&gt; file to override the hard-coded paths that are compiled into the Qt library. For more information, see the &lt;a href=&quot;qt-conf&quot;&gt;Using qt.conf&lt;/a&gt; documentation.</source>
          <target state="translated">您还可以使用 &lt;code&gt;qt.conf&lt;/code&gt; 文件覆盖编译到Qt库中的硬编码路径。有关更多信息，请参见《&lt;a href=&quot;qt-conf&quot;&gt;使用qt.conf》&lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="3d2596f8a608f4b6e3ff7ef89f087753b414ee38" translate="yes" xml:space="preserve">
          <source>You can also use a data stream to read/write &lt;a href=&quot;qdatastream#raw&quot;&gt;raw unencoded binary data&lt;/a&gt;. If you want a &quot;parsing&quot; input stream, see &lt;a href=&quot;qtextstream&quot;&gt;QTextStream&lt;/a&gt;.</source>
          <target state="translated">您还可以使用数据流读取/写入&lt;a href=&quot;qdatastream#raw&quot;&gt;未编码的原始二进制数据&lt;/a&gt;。如果要&amp;ldquo;解析&amp;rdquo;输入流，请参见&lt;a href=&quot;qtextstream&quot;&gt;QTextStream&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="df1628e7e9cc33d71e1e6618f9663af951c44604" translate="yes" xml:space="preserve">
          <source>You can also use a traditional model with roles:</source>
          <target state="translated">你也可以使用传统的模型与角色。</target>
        </trans-unit>
        <trans-unit id="c21790a89c55f7c7d82c2d327eb88e50ef0794b3" translate="yes" xml:space="preserve">
          <source>You can also use conditionals on the type of the message using &lt;code&gt;%{if-debug}&lt;/code&gt;, &lt;code&gt;%{if-info}&lt;/code&gt;&lt;code&gt;%{if-warning}&lt;/code&gt;, &lt;code&gt;%{if-critical}&lt;/code&gt; or &lt;code&gt;%{if-fatal}&lt;/code&gt; followed by an &lt;code&gt;%{endif}&lt;/code&gt;. What is inside the &lt;code&gt;%{if-*}&lt;/code&gt; and &lt;code&gt;%{endif}&lt;/code&gt; will only be printed if the type matches.</source>
          <target state="translated">您还可以在邮件类型上使用条件，方法是先使用 &lt;code&gt;%{if-debug}&lt;/code&gt; ， &lt;code&gt;%{if-info}&lt;/code&gt; , &lt;code&gt;%{if-warning}&lt;/code&gt; ， &lt;code&gt;%{if-critical}&lt;/code&gt; 或 &lt;code&gt;%{if-fatal}&lt;/code&gt; ,再加上 &lt;code&gt;%{endif}&lt;/code&gt; 。只有类型匹配时，才会打印 &lt;code&gt;%{if-*}&lt;/code&gt; 和 &lt;code&gt;%{endif}&lt;/code&gt; 内部的内容。</target>
        </trans-unit>
        <trans-unit id="f2a4db4e9e78ba36bdd80f5060f2a5dc0036c16d" translate="yes" xml:space="preserve">
          <source>You can also use configuration variables to get QDoc to support &lt;a href=&quot;25-qdoc-configuration-derivedprojects&quot;&gt;derived projects&lt;/a&gt;, i.e QDoc can generate links in your project's documentation to elements in the Qt online documentation. See the &lt;a href=&quot;25-qdoc-configuration-derivedprojects&quot;&gt;Supporting Derived projects&lt;/a&gt; section.</source>
          <target state="translated">您还可以使用配置变量来获取QDoc以支持&lt;a href=&quot;25-qdoc-configuration-derivedprojects&quot;&gt;派生项目&lt;/a&gt;，即QDoc可以在项目文档中生成指向Qt在线文档中元素的链接。请参阅&amp;ldquo;&lt;a href=&quot;25-qdoc-configuration-derivedprojects&quot;&gt;支持的衍生项目&amp;rdquo;&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="d8935b6113cbd66982105a347744d7f4a2caa6d6" translate="yes" xml:space="preserve">
          <source>You can also use configuration variables to get QDoc to support &lt;a href=&quot;25-qdoc-configuration-derivedprojects#&quot;&gt;derived projects&lt;/a&gt;, i.e QDoc can generate links in your project's documentation to elements in the Qt online documentation. See the &lt;a href=&quot;25-qdoc-configuration-derivedprojects#&quot;&gt;Supporting Derived projects&lt;/a&gt; section.</source>
          <target state="translated">您还可以使用配置变量来获取QDoc以支持&lt;a href=&quot;25-qdoc-configuration-derivedprojects#&quot;&gt;派生项目&lt;/a&gt;，即QDoc可以在项目文档中生成指向Qt在线文档中元素的链接。请参阅&lt;a href=&quot;25-qdoc-configuration-derivedprojects#&quot;&gt;支持衍生项目&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="12d14a6f5f5d767ff504c0c870c6ef2700611094" translate="yes" xml:space="preserve">
          <source>You can also use named or positional binding to associate parameters to actual values.</source>
          <target state="translated">您还可以使用命名或位置绑定将参数与实际值关联起来。</target>
        </trans-unit>
        <trans-unit id="44d1f1db299087fff54ac5faa2a8dad069ba19bf" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;CONSTANT&lt;/code&gt;, &lt;code&gt;READONLY&lt;/code&gt;, &lt;code&gt;PERSISTED&lt;/code&gt;, &lt;code&gt;READWRITE&lt;/code&gt;, &lt;code&gt;READPUSH&lt;/code&gt;, or &lt;code&gt;SOURCEONLYSETTER&lt;/code&gt; keywords in the PROP declaration, which affects how the property is implemented. READPUSH is the default value if no value used.</source>
          <target state="translated">您还可以在PROP声明中使用 &lt;code&gt;CONSTANT&lt;/code&gt; ， &lt;code&gt;READONLY&lt;/code&gt; ， &lt;code&gt;PERSISTED&lt;/code&gt; ， &lt;code&gt;READWRITE&lt;/code&gt; ， &lt;code&gt;READPUSH&lt;/code&gt; 或 &lt;code&gt;SOURCEONLYSETTER&lt;/code&gt; 关键字，这会影响属性的实现方式。如果未使用值，则READPUSH是默认值。</target>
        </trans-unit>
        <trans-unit id="96090252c3cecd3d557607834316f0fb11545d37" translate="yes" xml:space="preserve">
          <source>You can also use this element to group particle system elements related to the logical particle group. Emitters, Affectors and Painters set as direct children of a &lt;a href=&quot;qml-qtquick-particles-particlegroup&quot;&gt;ParticleGroup&lt;/a&gt; will automatically apply to that logical particle group. TrailEmitters will automatically follow the group.</source>
          <target state="translated">您也可以使用此元素对与逻辑粒子组相关的粒子系统元素进行分组。设置为&amp;ldquo; &lt;a href=&quot;qml-qtquick-particles-particlegroup&quot;&gt;粒子&lt;/a&gt;组&amp;rdquo;的直接子级的&amp;ldquo;发射器&amp;rdquo;，&amp;ldquo;关联器&amp;rdquo;和&amp;ldquo;画家&amp;rdquo; 将自动应用于该逻辑粒子组。TrailEmitters将自动关注该群组。</target>
        </trans-unit>
        <trans-unit id="46ec71e07dd2738f1c3f4ac72f6a2ac497ef11a3" translate="yes" xml:space="preserve">
          <source>You can also use this element to group particle system elements related to the logical particle group. Emitters, Affectors and Painters set as direct children of a ParticleGroup will automatically apply to that logical particle group. TrailEmitters will automatically follow the group.</source>
          <target state="translated">你也可以使用这个元素来分组与逻辑粒子组相关的粒子系统元素。设置为ParticleGroup的直接子元素的发射器、影响器和绘制器将自动应用于该逻辑粒子组。TrailEmitters将自动跟随该组。</target>
        </trans-unit>
        <trans-unit id="29dc22aa4ebbd9c300c2c1f76286e6abe9884b07" translate="yes" xml:space="preserve">
          <source>You can apply a different style to the controls by setting the</source>
          <target state="translated">您可以通过设置该控件的</target>
        </trans-unit>
        <trans-unit id="e6f9c01988364bc66a6f8ebd1cb941c6d029c008" translate="yes" xml:space="preserve">
          <source>You can apply toLocaleString() directly to constants, provided the decimal is included in the constant, e.g.</source>
          <target state="translated">你可以直接将toLocaleString()应用到常量中,只要常量中包含小数,例如</target>
        </trans-unit>
        <trans-unit id="bca5115f615392fdd7a0ebf6de0c8504c7f3b7fc" translate="yes" xml:space="preserve">
          <source>You can assign a stretch factor to each item to control how much space it will get compared to the other items. By default, two identical widgets arranged in a linear layout will have the same size, but if the first widget has a stretch factor of 1 and the second widget has a stretch factor of 2, the first widget will get 1/3 of the available space, and the second will get 2/3.</source>
          <target state="translated">您可以为每个项目指定一个拉伸因子,以控制它与其他项目相比将获得多少空间。默认情况下,以线性布局排列的两个相同小组件将具有相同的大小,但如果第一个小组件的拉伸系数为 1,第二个小组件的拉伸系数为 2,则第一个小组件将获得 1/3 的可用空间,而第二个小组件将获得 2/3。</target>
        </trans-unit>
        <trans-unit id="f962db6e4de61c03427276ffba512c1bc3d3e0e5" translate="yes" xml:space="preserve">
          <source>You can assign any number of Transforms to an &lt;a href=&quot;qml-qtquick-item&quot;&gt;Item&lt;/a&gt;. Each Transform is applied in order, one at a time.</source>
          <target state="translated">您可以将任意数量的Transform分配给&lt;a href=&quot;qml-qtquick-item&quot;&gt;Item&lt;/a&gt;。每个变换按顺序应用，一次应用。</target>
        </trans-unit>
        <trans-unit id="68e6f31bb44eaa43128a71587e635c9bedd38311" translate="yes" xml:space="preserve">
          <source>You can assign menu items by declaring them as children of &lt;a href=&quot;qml-qtquick-extras-piemenu&quot;&gt;PieMenu&lt;/a&gt;:</source>
          <target state="translated">您可以通过将菜单项声明为&lt;a href=&quot;qml-qtquick-extras-piemenu&quot;&gt;PieMenu的&lt;/a&gt;子项来分配菜单项：</target>
        </trans-unit>
        <trans-unit id="348406ea7ebb30a248237d61de7bce3af70521c6" translate="yes" xml:space="preserve">
          <source>You can at any time save the &lt;a href=&quot;qpainter&quot;&gt;QPainter&lt;/a&gt;'s state by calling the &lt;a href=&quot;qpainter#save&quot;&gt;save&lt;/a&gt;() function which saves all the available settings on an internal stack. The &lt;a href=&quot;qpainter#restore&quot;&gt;restore&lt;/a&gt;() function pops them back.</source>
          <target state="translated">您可以随时通过调用&lt;a href=&quot;qpainter#save&quot;&gt;save&lt;/a&gt;（）函数保存&lt;a href=&quot;qpainter&quot;&gt;QPainter&lt;/a&gt;的状态，该函数将所有可用设置保存在内部堆栈中。在&lt;a href=&quot;qpainter#restore&quot;&gt;恢复&lt;/a&gt;（）函数弹出他们回来。</target>
        </trans-unit>
        <trans-unit id="e42f8397d4527b4472d3bc5abc5b5c2c59627623" translate="yes" xml:space="preserve">
          <source>You can at any time save the QPainter's state by calling the &lt;a href=&quot;qpainter#save&quot;&gt;save&lt;/a&gt;() function which saves all the available settings on an internal stack. The &lt;a href=&quot;qpainter#restore&quot;&gt;restore&lt;/a&gt;() function pops them back.</source>
          <target state="translated">您可以随时通过调用&lt;a href=&quot;qpainter#save&quot;&gt;save&lt;/a&gt;（）函数保存QPainter的状态，该函数将所有可用设置保存在内部堆栈中。在&lt;a href=&quot;qpainter#restore&quot;&gt;恢复&lt;/a&gt;（）函数弹出他们回来。</target>
        </trans-unit>
        <trans-unit id="30bebfc3dc9ae33e1272a8cd309afb9432cbfd08" translate="yes" xml:space="preserve">
          <source>You can build Qt libraries and tools in various variants, each of them optimized for a different use case.</source>
          <target state="translated">你可以在不同的变体中构建Qt库和工具,每个变体都针对不同的用例进行了优化。</target>
        </trans-unit>
        <trans-unit id="066c2c3b5aa97e479bb07c773815f0f79a12f3fd" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qapplication#setStyle&quot;&gt;QApplication::setStyle&lt;/a&gt;() at any time, but by calling it before the constructor, you ensure that the user's preference, set using the &lt;code&gt;-style&lt;/code&gt; command-line option, is respected.</source>
          <target state="translated">您可以随时调用&lt;a href=&quot;qapplication#setStyle&quot;&gt;QApplication :: setStyle&lt;/a&gt;（），但是通过在构造函数之前调用它，可以确保遵守使用 &lt;code&gt;-style&lt;/code&gt; 命令行选项设置的用户首选项。</target>
        </trans-unit>
        <trans-unit id="fac5a316bb13c54ebea716edcd6e5b21a6121108" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qdiriterator#fileName&quot;&gt;fileName&lt;/a&gt;() or &lt;a href=&quot;qdiriterator#filePath&quot;&gt;filePath&lt;/a&gt;() to get the current entry file name or path, or &lt;a href=&quot;qdiriterator#fileInfo&quot;&gt;fileInfo&lt;/a&gt;() to get a &lt;a href=&quot;qfileinfo&quot;&gt;QFileInfo&lt;/a&gt; for the current entry.</source>
          <target state="translated">您可以调用&lt;a href=&quot;qdiriterator#fileName&quot;&gt;fileName&lt;/a&gt;（）或&lt;a href=&quot;qdiriterator#filePath&quot;&gt;filePath&lt;/a&gt;（）获取当前条目的文件名或路径，或者调用&lt;a href=&quot;qdiriterator#fileInfo&quot;&gt;fileInfo&lt;/a&gt;（）获取当前条目的&lt;a href=&quot;qfileinfo&quot;&gt;QFileInfo&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="266f811d77cf96083ca0c9773a5fbb3a68e46fbd" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qgraphicsitem#setZValue&quot;&gt;setZValue&lt;/a&gt;() on an item to explicitly stack it on top of, or under, other sibling items. The default Z value for an item is 0. Items with the same Z value are stacked by insertion order.</source>
          <target state="translated">您可以在一个项目上调用&lt;a href=&quot;qgraphicsitem#setZValue&quot;&gt;setZValue&lt;/a&gt;（），以将其显式堆叠在其他同级项目之上或之下。项的默认Z值为0。具有相同Z值的项按插入顺序堆叠。</target>
        </trans-unit>
        <trans-unit id="85e553d405e43bcbe0178efe2b65b5520cb5e16e" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qgraphicsitem#stackBefore&quot;&gt;stackBefore&lt;/a&gt;() to reorder the list of children. This will directly modify the insertion order.</source>
          <target state="translated">您可以调用&lt;a href=&quot;qgraphicsitem#stackBefore&quot;&gt;stackBefore&lt;/a&gt;（）重新排序子级列表。这将直接修改插入顺序。</target>
        </trans-unit>
        <trans-unit id="bd2d92f4af01239d0a2da4c00a805ff1699ee6c0" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qimagereader#supportedImageFormats&quot;&gt;supportedImageFormats&lt;/a&gt;() for the full list of formats &lt;a href=&quot;qimagereader&quot;&gt;QImageReader&lt;/a&gt; supports.</source>
          <target state="translated">您可以调用&lt;a href=&quot;qimagereader#supportedImageFormats&quot;&gt;supportedImageFormats&lt;/a&gt;（）获取&lt;a href=&quot;qimagereader&quot;&gt;QImageReader&lt;/a&gt;支持的格式的完整列表。</target>
        </trans-unit>
        <trans-unit id="8eee8553cf46fa7c1568af9977a0cc4b58cb9b6f" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qimagewriter#supportedImageFormats&quot;&gt;supportedImageFormats&lt;/a&gt;() for the full list of formats &lt;a href=&quot;qimagewriter&quot;&gt;QImageWriter&lt;/a&gt; supports.</source>
          <target state="translated">您可以调用&lt;a href=&quot;qimagewriter#supportedImageFormats&quot;&gt;supportedImageFormats&lt;/a&gt;（）获取&lt;a href=&quot;qimagewriter&quot;&gt;QImageWriter&lt;/a&gt;支持的格式的完整列表。</target>
        </trans-unit>
        <trans-unit id="4a054baf5aa3e3dc4f313ac8e48f100d267cb953" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qmovie#supportedFormats&quot;&gt;supportedFormats&lt;/a&gt;() for the full list of formats &lt;a href=&quot;qmovie&quot;&gt;QMovie&lt;/a&gt; supports.</source>
          <target state="translated">您可以调用&lt;a href=&quot;qmovie#supportedFormats&quot;&gt;supportedFormats&lt;/a&gt;（）获取&lt;a href=&quot;qmovie&quot;&gt;QMovie&lt;/a&gt;支持的格式的完整列表。</target>
        </trans-unit>
        <trans-unit id="ad0e5220d58e34d95a1d7170b2d86e8871111711" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qsharedmemory#key&quot;&gt;key&lt;/a&gt;() to retrieve the platform independent key. Internally, &lt;a href=&quot;qsharedmemory&quot;&gt;QSharedMemory&lt;/a&gt; converts this key into a platform specific key. If you instead call &lt;a href=&quot;qsharedmemory#nativeKey&quot;&gt;nativeKey&lt;/a&gt;(), you will get the platform specific, converted key.</source>
          <target state="translated">您可以调用&lt;a href=&quot;qsharedmemory#key&quot;&gt;key&lt;/a&gt;（）来检索与平台无关的密钥。在内部，&lt;a href=&quot;qsharedmemory&quot;&gt;QSharedMemory&lt;/a&gt;将此密钥转换为平台特定的密钥。如果改为调用&lt;a href=&quot;qsharedmemory#nativeKey&quot;&gt;nativeKey&lt;/a&gt;（），则将获取特定于平台的转换后的密钥。</target>
        </trans-unit>
        <trans-unit id="0468d4a2a98289709e622f5d5523a0fb86e87fd8" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qsharedmemory#nativeKey&quot;&gt;nativeKey&lt;/a&gt;() to retrieve the native key. If a native key has been assigned, calling &lt;a href=&quot;qsharedmemory#key&quot;&gt;key&lt;/a&gt;() will return a null string.</source>
          <target state="translated">您可以调用&lt;a href=&quot;qsharedmemory#nativeKey&quot;&gt;nativeKey&lt;/a&gt;（）检索本机密钥。如果已分配本机密钥，则调用&lt;a href=&quot;qsharedmemory#key&quot;&gt;key&lt;/a&gt;（）将返回空字符串。</target>
        </trans-unit>
        <trans-unit id="869f7bc8d5f0cae422fd3a3b496f9d5dde0b1ae0" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qsslcertificate#isNull&quot;&gt;isNull&lt;/a&gt;() to check if your certificate is null. By default, &lt;a href=&quot;qsslcertificate&quot;&gt;QSslCertificate&lt;/a&gt; constructs a null certificate. A null certificate is invalid, but an invalid certificate is not necessarily null. If you want to reset all contents in a certificate, call &lt;a href=&quot;qsslcertificate#clear&quot;&gt;clear&lt;/a&gt;().</source>
          <target state="translated">您可以调用&lt;a href=&quot;qsslcertificate#isNull&quot;&gt;isNull&lt;/a&gt;（）来检查您的证书是否为空。默认情况下，&lt;a href=&quot;qsslcertificate&quot;&gt;QSslCertificate&lt;/a&gt;构造一个空证书。空证书无效，但是无效证书不一定为空。如果要重置证书中的所有内容，请调用&lt;a href=&quot;qsslcertificate#clear&quot;&gt;clear&lt;/a&gt;（）。</target>
        </trans-unit>
        <trans-unit id="47ea142b61e6d29fc3528a176fa1f132fc1582ed" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qsslcertificate#isNull&quot;&gt;isNull&lt;/a&gt;() to check if your certificate is null. By default, QSslCertificate constructs a null certificate. A null certificate is invalid, but an invalid certificate is not necessarily null. If you want to reset all contents in a certificate, call &lt;a href=&quot;qsslcertificate#clear&quot;&gt;clear&lt;/a&gt;().</source>
          <target state="translated">您可以调用&lt;a href=&quot;qsslcertificate#isNull&quot;&gt;isNull&lt;/a&gt;（）来检查您的证书是否为空。默认情况下，QSslCertificate构造一个空证书。空证书无效，但是无效证书不一定为空。如果要重置证书中的所有内容，请调用&lt;a href=&quot;qsslcertificate#clear&quot;&gt;clear&lt;/a&gt;（）。</target>
        </trans-unit>
        <trans-unit id="11c14248084cd80c2e7e3c44a1b1da3e59b73c4c" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qsslcipher#isNull&quot;&gt;isNull&lt;/a&gt;() after construction to check if</source>
          <target state="translated">您可以在构造后调用&lt;a href=&quot;qsslcipher#isNull&quot;&gt;isNull&lt;/a&gt;（）来检查是否</target>
        </trans-unit>
        <trans-unit id="d53daf6e6fbe231ffde65b65f224194cc96add9e" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qsslsocket#sessionCipher&quot;&gt;sessionCipher&lt;/a&gt;() to find which cryptographic cipher is used to encrypt and decrypt your data.</source>
          <target state="translated">您可以调用&lt;a href=&quot;qsslsocket#sessionCipher&quot;&gt;sessionCipher&lt;/a&gt;（）来查找使用哪种加密密码来加密和解密数据。</target>
        </trans-unit>
        <trans-unit id="6d1be65e79672ab83c546ff945871bfb88e693ec" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qtextdocumentwriter#supportedDocumentFormats&quot;&gt;supportedDocumentFormats&lt;/a&gt;() for the full list of formats &lt;a href=&quot;qtextdocumentwriter&quot;&gt;QTextDocumentWriter&lt;/a&gt; supports.</source>
          <target state="translated">您可以调用&lt;a href=&quot;qtextdocumentwriter#supportedDocumentFormats&quot;&gt;supportedDocumentFormats&lt;/a&gt;（）获取&lt;a href=&quot;qtextdocumentwriter&quot;&gt;QTextDocumentWriter&lt;/a&gt;支持的格式的完整列表。</target>
        </trans-unit>
        <trans-unit id="6df04995b0df6d53463591dd8840108d7fb8753c" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qwidget#mapFromGlobal&quot;&gt;QWidget::mapFromGlobal&lt;/a&gt;() to translate it to widget coordinates.</source>
          <target state="translated">您可以调用&lt;a href=&quot;qwidget#mapFromGlobal&quot;&gt;QWidget :: mapFromGlobal&lt;/a&gt;（）将其转换为小部件坐标。</target>
        </trans-unit>
        <trans-unit id="971bd83e30d19c61ef8cfd53ddfb855c2961aaea" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qwidget#mapToGlobal&quot;&gt;QWidget::mapToGlobal&lt;/a&gt;() to translate widget coordinates to global screen coordinates.</source>
          <target state="translated">您可以调用&lt;a href=&quot;qwidget#mapToGlobal&quot;&gt;QWidget :: mapToGlobal&lt;/a&gt;（）将小部件坐标转换为全局屏幕坐标。</target>
        </trans-unit>
        <trans-unit id="ff659b75af49abcaa2834d479bcb38b060e5bb80" translate="yes" xml:space="preserve">
          <source>You can call peekEventQueue() periodically, when your program is busy performing a long-running operation, to peek into the buffered native event queue. The more time the long-running operation blocks the program from returning control to the main event loop, the more events will accumulate in the buffered XCB event queue. Once control returns to the main event loop these events will be flushed to Qt's event queue, which is a separate event queue from the queue this function is peeking into.</source>
          <target state="translated">您可以定期调用 peekEventQueue(),当您的程序忙于执行一个长期运行的操作时,窥视缓冲的原生事件队列。长时间运行的操作阻止程序将控制返回到主事件循环的时间越长,缓冲的XCB事件队列中积累的事件就越多。一旦控制返回主事件循环,这些事件就会被冲到Qt的事件队列中,而Qt的事件队列与这个函数所窥视的队列是独立的事件队列。</target>
        </trans-unit>
        <trans-unit id="70c102681f3fb809d63dcac13c3ffdbdea7956cb" translate="yes" xml:space="preserve">
          <source>You can call this function after assigning a device to the reader to determine the format of the device. For example:</source>
          <target state="translated">你可以在分配一个设备给阅读器后调用这个函数来确定设备的格式。举例来说,你可以调用这个函数来确定设备的格式。</target>
        </trans-unit>
        <trans-unit id="2ad9b189954a02d4c6f15de6851f8564844351d3" translate="yes" xml:space="preserve">
          <source>You can call this function in a subclass of &lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt; to change the return value of the &lt;a href=&quot;qabstractsocket#localAddress&quot;&gt;localAddress&lt;/a&gt;() function after a connection has been established. This feature is commonly used by proxy connections for virtual connection settings.</source>
          <target state="translated">建立连接后，可以在&lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt;的子类中调用此函数以更改&lt;a href=&quot;qabstractsocket#localAddress&quot;&gt;localAddress&lt;/a&gt;（）函数的返回值。代理连接通常使用此功能进行虚拟连接设置。</target>
        </trans-unit>
        <trans-unit id="2a99e2348344094859a3345e5e879e722a81973b" translate="yes" xml:space="preserve">
          <source>You can call this function in a subclass of &lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt; to change the return value of the &lt;a href=&quot;qabstractsocket#localPort&quot;&gt;localPort&lt;/a&gt;() function after a connection has been established. This feature is commonly used by proxy connections for virtual connection settings.</source>
          <target state="translated">建立连接后，可以在&lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt;的子类中调用此函数以更改&lt;a href=&quot;qabstractsocket#localPort&quot;&gt;localPort&lt;/a&gt;（）函数的返回值。代理连接通常使用此功能进行虚拟连接设置。</target>
        </trans-unit>
        <trans-unit id="98d56e2dcb1138760e990e125476e1daaa3f28f2" translate="yes" xml:space="preserve">
          <source>You can call this function in a subclass of &lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt; to change the return value of the &lt;a href=&quot;qabstractsocket#peerAddress&quot;&gt;peerAddress&lt;/a&gt;() function after a connection has been established. This feature is commonly used by proxy connections for virtual connection settings.</source>
          <target state="translated">建立连接后，可以在&lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt;的子类中调用此函数以更改&lt;a href=&quot;qabstractsocket#peerAddress&quot;&gt;peerAddress&lt;/a&gt;（）函数的返回值。代理连接通常使用此功能进行虚拟连接设置。</target>
        </trans-unit>
        <trans-unit id="437b57a197e2aecb22a98d4a95f24dadf5359875" translate="yes" xml:space="preserve">
          <source>You can call this function in a subclass of &lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt; to change the return value of the &lt;a href=&quot;qabstractsocket#peerName&quot;&gt;peerName&lt;/a&gt;() function after a connection has been established. This feature is commonly used by proxy connections for virtual connection settings.</source>
          <target state="translated">建立连接后，可以在&lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt;的子类中调用此函数以更改&lt;a href=&quot;qabstractsocket#peerName&quot;&gt;peerName&lt;/a&gt;（）函数的返回值。代理连接通常使用此功能进行虚拟连接设置。</target>
        </trans-unit>
        <trans-unit id="0cab67ed1f4650a038d334c5e25161798cf32ae5" translate="yes" xml:space="preserve">
          <source>You can call this function in a subclass of &lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt; to change the return value of the &lt;a href=&quot;qabstractsocket#peerPort&quot;&gt;peerPort&lt;/a&gt;() function after a connection has been established. This feature is commonly used by proxy connections for virtual connection settings.</source>
          <target state="translated">建立连接后，可以在&lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt;的子类中调用此函数以更改&lt;a href=&quot;qabstractsocket#peerPort&quot;&gt;peerPort&lt;/a&gt;（）函数的返回值。代理连接通常使用此功能进行虚拟连接设置。</target>
        </trans-unit>
        <trans-unit id="ea6d7e0e7f86cc7e624580c1b939add280aec065" translate="yes" xml:space="preserve">
          <source>You can call this function occasionally when your program is busy doing a long operation (e.g. copying a file).</source>
          <target state="translated">当你的程序正忙于进行一个长时间的操作(例如复制一个文件)时,你可以偶尔调用这个函数。</target>
        </trans-unit>
        <trans-unit id="af151fcabedbc9aa30701c67105488402f740beb" translate="yes" xml:space="preserve">
          <source>You can call this function occasionally when your program is busy performing a long operation (e.g. copying a file).</source>
          <target state="translated">当你的程序忙于执行一个长时间的操作(如复制一个文件)时,你可以偶尔调用这个功能。</target>
        </trans-unit>
        <trans-unit id="66ec3f185c0749bf1366ce1f13417588f46fae86" translate="yes" xml:space="preserve">
          <source>You can call this function to notify &lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt; of changes to the background or the foreground of the scene. It is commonly used for scenes with tile-based backgrounds to notify changes when &lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt; has enabled background caching.</source>
          <target state="translated">您可以调用此函数来通知&lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt;场景的背景或前景的变化。它通常用于具有基于图块的背景的场景，以在&lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt;启用背景缓存时通知更改。</target>
        </trans-unit>
        <trans-unit id="ecebc4df40f0de6d562507d21923180d8e2b22af" translate="yes" xml:space="preserve">
          <source>You can chain multiple operations like this:</source>
          <target state="translated">你可以像这样连锁多个操作。</target>
        </trans-unit>
        <trans-unit id="85368f788c53ae9779e8196241d7f5b5993f1227" translate="yes" xml:space="preserve">
          <source>You can change a tab's text and icon using &lt;a href=&quot;qtabwidget#setTabText&quot;&gt;setTabText&lt;/a&gt;() or &lt;a href=&quot;qtabwidget#setTabIcon&quot;&gt;setTabIcon&lt;/a&gt;(). A tab and its associated page can be removed with &lt;a href=&quot;qtabwidget#removeTab&quot;&gt;removeTab&lt;/a&gt;().</source>
          <target state="translated">您可以使用&lt;a href=&quot;qtabwidget#setTabText&quot;&gt;setTabText&lt;/a&gt;（）或&lt;a href=&quot;qtabwidget#setTabIcon&quot;&gt;setTabIcon&lt;/a&gt;（）来更改标签的文本和图标。可以使用&lt;a href=&quot;qtabwidget#removeTab&quot;&gt;removeTab&lt;/a&gt;（）删除选项卡及其相关页面。</target>
        </trans-unit>
        <trans-unit id="4077001c128e497c2a59571080d70d4c81f6ce3c" translate="yes" xml:space="preserve">
          <source>You can change between the frequency bands using &lt;a href=&quot;qradiotuner#setBand&quot;&gt;setBand&lt;/a&gt;() however it is recommended that you check to make sure the band is available first using &lt;a href=&quot;qradiotuner#isBandSupported&quot;&gt;isBandSupported&lt;/a&gt;().</source>
          <target state="translated">您可以使用&lt;a href=&quot;qradiotuner#setBand&quot;&gt;setBand&lt;/a&gt;（）在频段之间进行切换，但是建议您先使用&lt;a href=&quot;qradiotuner#isBandSupported&quot;&gt;isBandSupported&lt;/a&gt;（）进行检查以确保该频段可用。</target>
        </trans-unit>
        <trans-unit id="4a71bffb5b5ae071e33978a71be49d3bcd43d88b" translate="yes" xml:space="preserve">
          <source>You can change the default class name by passing &lt;code&gt;classname&lt;/code&gt; as the sixth argument.</source>
          <target state="translated">您可以通过将 &lt;code&gt;classname&lt;/code&gt; 作为第六个参数传递来更改默认类名。</target>
        </trans-unit>
        <trans-unit id="235d25f60e037655ef416b056c9c1eb400337feb" translate="yes" xml:space="preserve">
          <source>You can change the filenames as long as the Info.plist and filenames stay in sync.</source>
          <target state="translated">只要Info.plist和文件名保持同步,你就可以更改文件名。</target>
        </trans-unit>
        <trans-unit id="d14f27ac7c5293fdd55e2ad274298193ecff2646" translate="yes" xml:space="preserve">
          <source>You can change the language that Qt translation functions use by adding and removing translators with &lt;a href=&quot;qcoreapplication#installTranslator&quot;&gt;QCoreApplication::installTranslator&lt;/a&gt;() and &lt;a href=&quot;qcoreapplication#removeTranslator&quot;&gt;QCoreApplication::removeTranslator&lt;/a&gt;(). Afterwards you can call &lt;a href=&quot;qqmlengine#retranslate&quot;&gt;QQmlEngine::retranslate&lt;/a&gt;() to trigger a refresh of all bindings that use translations. As a result, your user interface will switch, dynamically, to the newly selected language.</source>
          <target state="translated">您可以通过使用&lt;a href=&quot;qcoreapplication#installTranslator&quot;&gt;QCoreApplication :: installTranslator&lt;/a&gt;（）和&lt;a href=&quot;qcoreapplication#removeTranslator&quot;&gt;QCoreApplication :: removeTranslator&lt;/a&gt;（）添加和删​​除转换器来更改Qt转换功能使用的语言。之后，您可以调用&lt;a href=&quot;qqmlengine#retranslate&quot;&gt;QQmlEngine :: retranslate&lt;/a&gt;（）来触发所有使用翻译的绑定的刷新。结果，您的用户界面将动态切换到新选择的语言。</target>
        </trans-unit>
        <trans-unit id="eba446120ef49ca1e35de1ac0bb1d5f7d2dbd162" translate="yes" xml:space="preserve">
          <source>You can change the name of the header file to be generated by passing &lt;code&gt;basename&lt;/code&gt; as the fifth argument. The &lt;code&gt;.h&lt;/code&gt; suffix is always added.</source>
          <target state="translated">您可以通过将 &lt;code&gt;basename&lt;/code&gt; 作为第五个参数传递来更改要生成的头文件的名称。该 &lt;code&gt;.h&lt;/code&gt; 后缀总是添加。</target>
        </trans-unit>
        <trans-unit id="433ead8a5fd65d81847908050064fedc452a2eb4" translate="yes" xml:space="preserve">
          <source>You can change the text with &lt;a href=&quot;qlineedit#text-prop&quot;&gt;setText&lt;/a&gt;() or &lt;a href=&quot;qlineedit#insert&quot;&gt;insert&lt;/a&gt;(). The text is retrieved with &lt;a href=&quot;qlineedit#text-prop&quot;&gt;text&lt;/a&gt;(); the displayed text (which may be different, see &lt;a href=&quot;qlineedit#EchoMode-enum&quot;&gt;EchoMode&lt;/a&gt;) is retrieved with &lt;a href=&quot;qlineedit#displayText-prop&quot;&gt;displayText&lt;/a&gt;(). Text can be selected with &lt;a href=&quot;qlineedit#setSelection&quot;&gt;setSelection&lt;/a&gt;() or &lt;a href=&quot;qlineedit#selectAll&quot;&gt;selectAll&lt;/a&gt;(), and the selection can be &lt;a href=&quot;qlineedit#cut&quot;&gt;cut&lt;/a&gt;(), &lt;a href=&quot;qlineedit#copy&quot;&gt;copy&lt;/a&gt;()ied and &lt;a href=&quot;qlineedit#paste&quot;&gt;paste&lt;/a&gt;()d. The text can be aligned with &lt;a href=&quot;qlineedit#alignment-prop&quot;&gt;setAlignment&lt;/a&gt;().</source>
          <target state="translated">您可以使用&lt;a href=&quot;qlineedit#text-prop&quot;&gt;setText&lt;/a&gt;（）或&lt;a href=&quot;qlineedit#insert&quot;&gt;insert&lt;/a&gt;（）更改文本。使用&lt;a href=&quot;qlineedit#text-prop&quot;&gt;文本&lt;/a&gt;（）检索文本；使用&lt;a href=&quot;qlineedit#displayText-prop&quot;&gt;displayText&lt;/a&gt;（）检索显示的文本（可能有所不同，请参见&lt;a href=&quot;qlineedit#EchoMode-enum&quot;&gt;EchoMode&lt;/a&gt;）。可以使用&lt;a href=&quot;qlineedit#setSelection&quot;&gt;setSelection&lt;/a&gt;（）或&lt;a href=&quot;qlineedit#selectAll&quot;&gt;selectAll&lt;/a&gt;（）选择文本，并且可以&lt;a href=&quot;qlineedit#cut&quot;&gt;剪切&lt;/a&gt;（），&lt;a href=&quot;qlineedit#copy&quot;&gt;复制&lt;/a&gt;（）ed和&lt;a href=&quot;qlineedit#paste&quot;&gt;粘贴&lt;/a&gt;（）d选项。文本可以与&lt;a href=&quot;qlineedit#alignment-prop&quot;&gt;setAlignment&lt;/a&gt;（）对齐。</target>
        </trans-unit>
        <trans-unit id="1ac0de248d63673a9a7a19a1800ca89ba50a6f08" translate="yes" xml:space="preserve">
          <source>You can change the value for a key by using value() on the left side of an assignment.</source>
          <target state="translated">你可以通过使用赋值左边的value()来改变一个键的值。</target>
        </trans-unit>
        <trans-unit id="22d2343121df2500d135119a5eb809939c4a42df" translate="yes" xml:space="preserve">
          <source>You can change the value of an item by using operator*() on the left side of an assignment, for example:</source>
          <target state="translated">例如,你可以通过使用赋值左边的 operator*()来改变一个项目的值。</target>
        </trans-unit>
        <trans-unit id="b2ad1d81119e3ac96ce8f06f90dea239850b58c5" translate="yes" xml:space="preserve">
          <source>You can change the value of an item by using operator*() on the left side of an assignment.</source>
          <target state="translated">你可以通过使用赋值左边的 operator*()来改变一个项目的值。</target>
        </trans-unit>
        <trans-unit id="1cb0ad31b338e50966943b1a224a679a7b192068" translate="yes" xml:space="preserve">
          <source>You can change the value of an item by using value() on the left side of an assignment, for example:</source>
          <target state="translated">你可以通过使用赋值左边的value()来改变一个项目的值,例如。</target>
        </trans-unit>
        <trans-unit id="71ea80baf7b4910c7c2b05276a05cd852e400087" translate="yes" xml:space="preserve">
          <source>You can change the value of an item by using value() on the left side of an assignment.</source>
          <target state="translated">你可以通过使用赋值左边的value()来改变一个项目的值。</target>
        </trans-unit>
        <trans-unit id="4324051185b351a36ed300d336d169d964d5ff63" translate="yes" xml:space="preserve">
          <source>You can check at compile time which features are supported on your hardware using various macros. These will tell you if your hardware always, sometimes, or does not support a particular operation. The macros have the form Q_ATOMIC_INT</source>
          <target state="translated">您可以在编译时使用各种宏检查您的硬件支持哪些功能。这些宏会告诉你,你的硬件是否总是、有时或不支持某个特定的操作。这些宏的形式是Q_ATOMIC_INT。</target>
        </trans-unit>
        <trans-unit id="8b488a9bd1be27ba5816390ec995b4e682b463a9" translate="yes" xml:space="preserve">
          <source>You can check at compile time which features are supported on your hardware using various macros. These will tell you if your hardware always, sometimes, or does not support a particular operation. The macros have the form Q_ATOMIC_POINTER_</source>
          <target state="translated">您可以在编译时使用各种宏检查您的硬件支持哪些功能。这些宏会告诉你,你的硬件是否总是、有时或不支持某个特定的操作。这些宏的形式是Q_ATOMIC_POINTER_。</target>
        </trans-unit>
        <trans-unit id="745ef729e308309bca469dcb14b8dcbb77539c8b" translate="yes" xml:space="preserve">
          <source>You can check for a file's existence using &lt;a href=&quot;qfile#exists-1&quot;&gt;exists&lt;/a&gt;(), and remove a file using &lt;a href=&quot;qfile#remove&quot;&gt;remove&lt;/a&gt;(). (More advanced file system related operations are provided by &lt;a href=&quot;qfileinfo&quot;&gt;QFileInfo&lt;/a&gt; and &lt;a href=&quot;qdir&quot;&gt;QDir&lt;/a&gt;.)</source>
          <target state="translated">您可以使用&lt;a href=&quot;qfile#exists-1&quot;&gt;exist&lt;/a&gt;（）检查文件是否存在，并使用&lt;a href=&quot;qfile#remove&quot;&gt;remove&lt;/a&gt;（）删除文件。（&lt;a href=&quot;qfileinfo&quot;&gt;QFileInfo&lt;/a&gt;和&lt;a href=&quot;qdir&quot;&gt;QDir&lt;/a&gt;提供了更高级的文件系统相关操作。）</target>
        </trans-unit>
        <trans-unit id="e2c13ec37aa1c876ee4a825efa34056f7b06bf83" translate="yes" xml:space="preserve">
          <source>You can check if a MIME type is convertible using &lt;a href=&quot;qwinmime#canConvertFromMime&quot;&gt;canConvertFromMime&lt;/a&gt;() and can perform conversions with &lt;a href=&quot;qwinmime#convertToMime&quot;&gt;convertToMime&lt;/a&gt;() and &lt;a href=&quot;qwinmime#convertFromMime&quot;&gt;convertFromMime&lt;/a&gt;().</source>
          <target state="translated">您可以使用&lt;a href=&quot;qwinmime#canConvertFromMime&quot;&gt;canConvertFromMime&lt;/a&gt;（）检查MIME类型是否可转换，并且可以使用&lt;a href=&quot;qwinmime#convertToMime&quot;&gt;convertToMime&lt;/a&gt;（）和&lt;a href=&quot;qwinmime#convertFromMime&quot;&gt;convertFromMime&lt;/a&gt;（）进行转换。</target>
        </trans-unit>
        <trans-unit id="f2ebf9dc37d433f1d673ad561e225f836415d6b9" translate="yes" xml:space="preserve">
          <source>You can check the return value of this function using a scope.</source>
          <target state="translated">你可以使用范围来检查这个函数的返回值。</target>
        </trans-unit>
        <trans-unit id="bdb024d1249f2b042fc18b570055da80b0b4a320" translate="yes" xml:space="preserve">
          <source>You can check whether the file was included by using this function as the condition for a scope. For example:</source>
          <target state="translated">您可以通过使用该函数作为作用域的条件来检查文件是否被包含。例如:</target>
        </trans-unit>
        <trans-unit id="b4b418f86f5b02114541cb76c8c268a298097ecc" translate="yes" xml:space="preserve">
          <source>You can choose which device to use with a &lt;a href=&quot;qml-multimedia#camera&quot;&gt;Camera&lt;/a&gt; object by setting its &lt;a href=&quot;qml-qtmultimedia-camera#deviceId-prop&quot;&gt;deviceId&lt;/a&gt; property to this value.</source>
          <target state="translated">您可以通过将其&lt;a href=&quot;qml-qtmultimedia-camera#deviceId-prop&quot;&gt;deviceId&lt;/a&gt;属性设置为此值来选择与&lt;a href=&quot;qml-multimedia#camera&quot;&gt;Camera&lt;/a&gt;对象一起使用的设备。</target>
        </trans-unit>
        <trans-unit id="8c84431d3d79a6ce79fb96997856a8b0d05f40ea" translate="yes" xml:space="preserve">
          <source>You can configure a factory to use the system proxy's settings. Call the &lt;a href=&quot;qnetworkproxyfactory#setUseSystemConfiguration&quot;&gt;setUseSystemConfiguration&lt;/a&gt;() function with true to enable this behavior, or false to disable it.</source>
          <target state="translated">您可以配置工厂以使用系统代理的设置。使用true 调用&lt;a href=&quot;qnetworkproxyfactory#setUseSystemConfiguration&quot;&gt;setUseSystemConfiguration&lt;/a&gt;（）函数来启用此行为，或者使用false来禁用它。</target>
        </trans-unit>
        <trans-unit id="2b37e3c73973874c6c531b08b7ab6fe00f93f860" translate="yes" xml:space="preserve">
          <source>You can connect as many signals as you want to a single slot, and a signal can be connected to as many slots as you need. It is even possible to connect a signal directly to another signal. (This will emit the second signal immediately whenever the first is emitted.)</source>
          <target state="translated">你可以在一个插槽上连接任意多的信号,一个信号可以连接到任意多的插槽。甚至可以将一个信号直接连接到另一个信号上。这样只要第一个信号发出,第二个信号就会立即发出)。</target>
        </trans-unit>
        <trans-unit id="51f04c04e2b9621974034cc2338f595b1ee5c4f8" translate="yes" xml:space="preserve">
          <source>You can connect this signal to other components to help maintain a consistent appearance for your application.</source>
          <target state="translated">您可以将此信号连接到其他组件,以帮助您的应用保持一致的外观。</target>
        </trans-unit>
        <trans-unit id="f2dc1f6e5be1897666cb61d3a64694f7609f1f79" translate="yes" xml:space="preserve">
          <source>You can construct a &lt;a href=&quot;qprintpreviewdialog&quot;&gt;QPrintPreviewDialog&lt;/a&gt; with an existing &lt;a href=&quot;qprinter&quot;&gt;QPrinter&lt;/a&gt; object, or you can have &lt;a href=&quot;qprintpreviewdialog&quot;&gt;QPrintPreviewDialog&lt;/a&gt; create one for you, which will be the system default printer.</source>
          <target state="translated">您可以使用现有的&lt;a href=&quot;qprinter&quot;&gt;QPrinter&lt;/a&gt;对象构造&lt;a href=&quot;qprintpreviewdialog&quot;&gt;QPrintPreviewDialog&lt;/a&gt;，也可以让&lt;a href=&quot;qprintpreviewdialog&quot;&gt;QPrintPreviewDialog&lt;/a&gt;为您创建一个，这将是系统默认的打印机。</target>
        </trans-unit>
        <trans-unit id="ceb61a4fdb19aabe342fe487b03be311fee1266c" translate="yes" xml:space="preserve">
          <source>You can construct a QPrintPreviewDialog with an existing &lt;a href=&quot;qprinter&quot;&gt;QPrinter&lt;/a&gt; object, or you can have QPrintPreviewDialog create one for you, which will be the system default printer.</source>
          <target state="translated">您可以使用现有的&lt;a href=&quot;qprinter&quot;&gt;QPrinter&lt;/a&gt;对象构造QPrintPreviewDialog，也可以让QPrintPreviewDialog为您创建一个QPrintPreviewDialog，这将是系统默认的打印机。</target>
        </trans-unit>
        <trans-unit id="2236fd9e00a2663ce03e2a9c51bc9ea15f97b9d7" translate="yes" xml:space="preserve">
          <source>You can construct an audio input with the system's &lt;a href=&quot;qaudiodeviceinfo#defaultInputDevice&quot;&gt;default audio input device&lt;/a&gt;. It is also possible to create &lt;a href=&quot;qaudioinput&quot;&gt;QAudioInput&lt;/a&gt; with a specific &lt;a href=&quot;qaudiodeviceinfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt;. When you create the audio input, you should also send in the &lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; to be used for the recording (see the &lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; class description for details).</source>
          <target state="translated">您可以使用系统的&lt;a href=&quot;qaudiodeviceinfo#defaultInputDevice&quot;&gt;默认音频输入设备&lt;/a&gt;来构建音频输入。也可以创建&lt;a href=&quot;qaudioinput&quot;&gt;QAudioInput&lt;/a&gt;与特定&lt;a href=&quot;qaudiodeviceinfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt;。创建音频输入时，还应该发送&lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt;用于录制（有关详细信息，请参见&lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt;类说明）。</target>
        </trans-unit>
        <trans-unit id="de67e5d04dacf57885c131a343310af8f29552a5" translate="yes" xml:space="preserve">
          <source>You can construct an audio input with the system's &lt;a href=&quot;qaudiodeviceinfo#defaultInputDevice&quot;&gt;default audio input device&lt;/a&gt;. It is also possible to create QAudioInput with a specific &lt;a href=&quot;qaudiodeviceinfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt;. When you create the audio input, you should also send in the &lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; to be used for the recording (see the &lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; class description for details).</source>
          <target state="translated">您可以使用系统的&lt;a href=&quot;qaudiodeviceinfo#defaultInputDevice&quot;&gt;默认音频输入设备&lt;/a&gt;来构建音频输入。也可以使用特定的&lt;a href=&quot;qaudiodeviceinfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt;创建QAudioInput。创建音频输入时，还应该发送&lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt;以用于录音（有关详细信息，请参见&lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt;类说明）。</target>
        </trans-unit>
        <trans-unit id="5508bd242e71c3ff3fd70bd2ee29416209c60c3e" translate="yes" xml:space="preserve">
          <source>You can construct an audio output with the system's &lt;a href=&quot;qaudiodeviceinfo#defaultOutputDevice&quot;&gt;default audio output device&lt;/a&gt;. It is also possible to create &lt;a href=&quot;qaudiooutput&quot;&gt;QAudioOutput&lt;/a&gt; with a specific &lt;a href=&quot;qaudiodeviceinfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt;. When you create the audio output, you should also send in the &lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; to be used for the playback (see the &lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; class description for details).</source>
          <target state="translated">您可以使用系统的&lt;a href=&quot;qaudiodeviceinfo#defaultOutputDevice&quot;&gt;默认音频输出设备&lt;/a&gt;来构建音频输出。也可以创建&lt;a href=&quot;qaudiooutput&quot;&gt;QAudioOutput&lt;/a&gt;与特定&lt;a href=&quot;qaudiodeviceinfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt;。创建音频输出时，还应该发送&lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt;用于回放（有关详细信息，请参见&lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt;类说明）。</target>
        </trans-unit>
        <trans-unit id="cd951ae887c6dc2bb1dbb0f3fc012e03a2320387" translate="yes" xml:space="preserve">
          <source>You can construct an audio output with the system's &lt;a href=&quot;qaudiodeviceinfo#defaultOutputDevice&quot;&gt;default audio output device&lt;/a&gt;. It is also possible to create QAudioOutput with a specific &lt;a href=&quot;qaudiodeviceinfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt;. When you create the audio output, you should also send in the &lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; to be used for the playback (see the &lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; class description for details).</source>
          <target state="translated">您可以使用系统的&lt;a href=&quot;qaudiodeviceinfo#defaultOutputDevice&quot;&gt;默认音频输出设备&lt;/a&gt;来构建音频输出。也可以使用特定的&lt;a href=&quot;qaudiodeviceinfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt;创建QAudioOutput。创建音频输出时，还应该发送&lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt;用于播放（有关详细信息，请参见&lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt;类说明）。</target>
        </trans-unit>
        <trans-unit id="fd63ec74cc7070408c64f2a429a3c266f3e8ad29" translate="yes" xml:space="preserve">
          <source>You can control the selection behavior and mode by manipulating their view properties; see &lt;a href=&quot;qabstractitemview#selectionMode-prop&quot;&gt;QAbstractItemView::selectionMode&lt;/a&gt; and &lt;a href=&quot;qabstractitemview#selectionBehavior-prop&quot;&gt;QAbstractItemView::selectionBehavior&lt;/a&gt;.</source>
          <target state="translated">您可以通过操纵其视图属性来控制选择行为和模式。参见&lt;a href=&quot;qabstractitemview#selectionMode-prop&quot;&gt;QAbstractItemView :: selectionMode&lt;/a&gt;和&lt;a href=&quot;qabstractitemview#selectionBehavior-prop&quot;&gt;QAbstractItemView :: selectionBehavior&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7ba126d7806492f01cba0ea66c4894b19b17bf78" translate="yes" xml:space="preserve">
          <source>You can control the speed of the movie playback by calling &lt;a href=&quot;qmovie#speed-prop&quot;&gt;setSpeed&lt;/a&gt;(), which takes the percentage of the original speed as an argument. Pause the movie by calling &lt;a href=&quot;qmovie#setPaused&quot;&gt;setPaused&lt;/a&gt;(true). &lt;a href=&quot;qmovie&quot;&gt;QMovie&lt;/a&gt; will then enter &lt;a href=&quot;qmovie#MovieState-enum&quot;&gt;Paused&lt;/a&gt; state and emit &lt;a href=&quot;qmovie#stateChanged&quot;&gt;stateChanged&lt;/a&gt;(). If you call &lt;a href=&quot;qmovie#setPaused&quot;&gt;setPaused&lt;/a&gt;(false), &lt;a href=&quot;qmovie&quot;&gt;QMovie&lt;/a&gt; will reenter &lt;a href=&quot;qmovie#MovieState-enum&quot;&gt;Running&lt;/a&gt; state and start the movie again. To stop the movie, call &lt;a href=&quot;qmovie#stop&quot;&gt;stop&lt;/a&gt;().</source>
          <target state="translated">您可以通过调用&lt;a href=&quot;qmovie#speed-prop&quot;&gt;setSpeed&lt;/a&gt;（）来控制影片播放的速度，该速度将原始速度的百分比作为参数。通过调用&lt;a href=&quot;qmovie#setPaused&quot;&gt;setPaused&lt;/a&gt;（true）暂停影片。&lt;a href=&quot;qmovie&quot;&gt;QMovie&lt;/a&gt;然后将进入&lt;a href=&quot;qmovie#MovieState-enum&quot;&gt;暂停&lt;/a&gt;状态并发出&lt;a href=&quot;qmovie#stateChanged&quot;&gt;stateChanged&lt;/a&gt;（）。如果调用&lt;a href=&quot;qmovie#setPaused&quot;&gt;setPaused&lt;/a&gt;（false），则&lt;a href=&quot;qmovie&quot;&gt;QMovie&lt;/a&gt;将重新进入&amp;ldquo; &lt;a href=&quot;qmovie#MovieState-enum&quot;&gt;运行&amp;rdquo;&lt;/a&gt;状态并重新启动电影。要停止播放电影，请调用&lt;a href=&quot;qmovie#stop&quot;&gt;stop&lt;/a&gt;（）。</target>
        </trans-unit>
        <trans-unit id="c57b8446db790006d785db9489905a7e840b763d" translate="yes" xml:space="preserve">
          <source>You can control the speed of the movie playback by calling &lt;a href=&quot;qmovie#speed-prop&quot;&gt;setSpeed&lt;/a&gt;(), which takes the percentage of the original speed as an argument. Pause the movie by calling &lt;a href=&quot;qmovie#setPaused&quot;&gt;setPaused&lt;/a&gt;(true). QMovie will then enter &lt;a href=&quot;qmovie#MovieState-enum&quot;&gt;Paused&lt;/a&gt; state and emit &lt;a href=&quot;qmovie#stateChanged&quot;&gt;stateChanged&lt;/a&gt;(). If you call &lt;a href=&quot;qmovie#setPaused&quot;&gt;setPaused&lt;/a&gt;(false), QMovie will reenter &lt;a href=&quot;qmovie#MovieState-enum&quot;&gt;Running&lt;/a&gt; state and start the movie again. To stop the movie, call &lt;a href=&quot;qmovie#stop&quot;&gt;stop&lt;/a&gt;().</source>
          <target state="translated">您可以通过调用&lt;a href=&quot;qmovie#speed-prop&quot;&gt;setSpeed&lt;/a&gt;（）来控制影片播放的速度，该速度将原始速度的百分比作为参数。通过调用&lt;a href=&quot;qmovie#setPaused&quot;&gt;setPaused&lt;/a&gt;（true）暂停影片。然后，QMovie将进入&amp;ldquo;&lt;a href=&quot;qmovie#MovieState-enum&quot;&gt;暂停&amp;rdquo;&lt;/a&gt;状态并发出&lt;a href=&quot;qmovie#stateChanged&quot;&gt;stateChanged&lt;/a&gt;（）。如果调用&lt;a href=&quot;qmovie#setPaused&quot;&gt;setPaused&lt;/a&gt;（false），则QMovie将重新进入&amp;ldquo;&lt;a href=&quot;qmovie#MovieState-enum&quot;&gt;运行&amp;rdquo;&lt;/a&gt;状态并重新开始播放电影。要停止播放电影，请调用&lt;a href=&quot;qmovie#stop&quot;&gt;stop&lt;/a&gt;（）。</target>
        </trans-unit>
        <trans-unit id="1ea40f64071fd16d6a450de1ba0fa0a48419dc2b" translate="yes" xml:space="preserve">
          <source>You can control the systems analog radio device using this interface, for example:</source>
          <target state="translated">例如,你可以用这个接口控制系统的模拟无线电设备。</target>
        </trans-unit>
        <trans-unit id="a15050275c513ddbb8e160cdbe632043155a2206" translate="yes" xml:space="preserve">
          <source>You can control the various design aspects (width, cap styles, join styles and dash pattern) of the outlining using the following functions:</source>
          <target state="translated">您可以使用以下功能控制轮廓的各种设计方面(宽度、盖帽样式、连接样式和破折号样式)。</target>
        </trans-unit>
        <trans-unit id="18fb77b8d3ff8b9950448366531c3b16d4fc0514" translate="yes" xml:space="preserve">
          <source>You can control which actions that are available in the action editor's window using the &lt;a href=&quot;qdesigneractioneditorinterface#manageAction&quot;&gt;manageAction&lt;/a&gt;() and &lt;a href=&quot;qdesigneractioneditorinterface#unmanageAction&quot;&gt;unmanageAction&lt;/a&gt;() functions. An action that is managed by</source>
          <target state="translated">您可以使用&lt;a href=&quot;qdesigneractioneditorinterface#manageAction&quot;&gt;manageAction&lt;/a&gt;（）和&lt;a href=&quot;qdesigneractioneditorinterface#unmanageAction&quot;&gt;unmanageAction&lt;/a&gt;（）函数控制动作编辑器窗口中可用的动作。由...管理的动作</target>
        </trans-unit>
        <trans-unit id="05fdfa14509c27d7b3469b1865d70bf2c1573e2f" translate="yes" xml:space="preserve">
          <source>You can convert from item to scene coordinates using the functions on the item whose coordinate system you are interested in. See &lt;a href=&quot;qml-qtquick-item#mapFromItem-method&quot;&gt;Item::mapFromItem&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-item#mapToItem-method&quot;&gt;Item::mapToItem&lt;/a&gt; for converting to scene coordinates, or another item's coordinates.</source>
          <target state="translated">您可以使用其坐标系感兴趣的项目上的功能将项目坐标转换为场景坐标。有关转换为场景坐标或其他项目坐标的信息，请参见&lt;a href=&quot;qml-qtquick-item#mapFromItem-method&quot;&gt;Item :: mapFromItem&lt;/a&gt;和&lt;a href=&quot;qml-qtquick-item#mapToItem-method&quot;&gt;Item :: mapToItem&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ec12fe6bcb43434a5e72dcb05675f7f6c2d3afdc" translate="yes" xml:space="preserve">
          <source>You can convert the array to and from text based JSON through &lt;a href=&quot;qjsondocument&quot;&gt;QJsonDocument&lt;/a&gt;.</source>
          <target state="translated">您可以通过&lt;a href=&quot;qjsondocument&quot;&gt;QJsonDocument&lt;/a&gt;在数组与基于文本的JSON之间进行转换。</target>
        </trans-unit>
        <trans-unit id="bcec33921c6082ebc72b39b589f478ce1490c440" translate="yes" xml:space="preserve">
          <source>You can convert the object to and from text based JSON through &lt;a href=&quot;qjsondocument&quot;&gt;QJsonDocument&lt;/a&gt;.</source>
          <target state="translated">您可以通过&lt;a href=&quot;qjsondocument&quot;&gt;QJsonDocument在&lt;/a&gt;基于文本的JSON之间来回转换对象。</target>
        </trans-unit>
        <trans-unit id="534b270f6f128c1e4836fc556bc45c0cc022686f" translate="yes" xml:space="preserve">
          <source>You can copy a palette using the copy constructor and test to see if two palettes are</source>
          <target state="translated">你可以使用复制构造函数复制一个调色板,并测试两个调色板是否为</target>
        </trans-unit>
        <trans-unit id="bf004a49a18182ff698395a30478fa756037d680" translate="yes" xml:space="preserve">
          <source>You can create DITA map files using three new qdoc commands, the &lt;a href=&quot;#ditamap-command&quot;&gt;ditamap&lt;/a&gt; command, the &lt;a href=&quot;#topicref-command&quot;&gt;topicref&lt;/a&gt; command, and the &lt;a href=&quot;#mapref-command&quot;&gt;mapref&lt;/a&gt; command. How these DITA maps will be used automatically or manually by the documentation build process is still under consideration. This section will be updated as the decisions are made.</source>
          <target state="translated">您可以使用三个新的qdoc​​命令，&lt;a href=&quot;#ditamap-command&quot;&gt;ditamap&lt;/a&gt;命令，&lt;a href=&quot;#topicref-command&quot;&gt;topicref&lt;/a&gt;命令和&lt;a href=&quot;#mapref-command&quot;&gt;mapref&lt;/a&gt;命令来创建DITA映射文件。这些DITA映射如何在文档构建过程中自动或手动使用仍在考虑中。做出决定后，将更新本节。</target>
        </trans-unit>
        <trans-unit id="2527a8a35ed3c09d4e7992a6eeb9496635e8dd48" translate="yes" xml:space="preserve">
          <source>You can create a &lt;a href=&quot;qrubberband&quot;&gt;QRubberBand&lt;/a&gt; whenever you need to render a rubber band around a given area (or to represent a single line), then call &lt;a href=&quot;qrubberband#setGeometry&quot;&gt;setGeometry&lt;/a&gt;(), &lt;a href=&quot;qrubberband#move&quot;&gt;move&lt;/a&gt;() or &lt;a href=&quot;qrubberband#resize&quot;&gt;resize&lt;/a&gt;() to position and size it. A common pattern is to do this in conjunction with mouse events. For example:</source>
          <target state="translated">每当需要在给定区域周围绘制橡皮筋（或表示一条直线）时，都可以创建&lt;a href=&quot;qrubberband&quot;&gt;QRubberBand&lt;/a&gt;，然后调用&lt;a href=&quot;qrubberband#setGeometry&quot;&gt;setGeometry&lt;/a&gt;（），&lt;a href=&quot;qrubberband#move&quot;&gt;move&lt;/a&gt;（）或&lt;a href=&quot;qrubberband#resize&quot;&gt;resize&lt;/a&gt;（）对其进行定位和调整大小。一种常见的模式是与鼠标事件一起执行此操作。例如：</target>
        </trans-unit>
        <trans-unit id="1eae2bbcbe031086449c1ba6f304b10e7e4818c9" translate="yes" xml:space="preserve">
          <source>You can create a QRubberBand whenever you need to render a rubber band around a given area (or to represent a single line), then call &lt;a href=&quot;qrubberband#setGeometry&quot;&gt;setGeometry&lt;/a&gt;(), &lt;a href=&quot;qrubberband#move&quot;&gt;move&lt;/a&gt;() or &lt;a href=&quot;qrubberband#resize&quot;&gt;resize&lt;/a&gt;() to position and size it. A common pattern is to do this in conjunction with mouse events. For example:</source>
          <target state="translated">每当需要在给定区域周围绘制橡皮筋（或表示一条直线）时，都可以创建QRubberBand，然后调用&lt;a href=&quot;qrubberband#setGeometry&quot;&gt;setGeometry&lt;/a&gt;（），&lt;a href=&quot;qrubberband#move&quot;&gt;move&lt;/a&gt;（）或&lt;a href=&quot;qrubberband#resize&quot;&gt;resize&lt;/a&gt;（）对其进行定位和调整大小。一种常见的模式是结合鼠标事件来执行此操作。例如：</target>
        </trans-unit>
        <trans-unit id="5d2670db6e847784fdcef92193ea5051294ab5ae" translate="yes" xml:space="preserve">
          <source>You can create a busy indicator by replacing the &quot;indicator&quot; delegate of the &lt;a href=&quot;qml-qtquick-controls-styles-busyindicatorstyle&quot;&gt;BusyIndicatorStyle&lt;/a&gt; with a custom design.</source>
          <target state="translated">您可以通过使用自定义设计替换&lt;a href=&quot;qml-qtquick-controls-styles-busyindicatorstyle&quot;&gt;BusyIndi​​catorStyle&lt;/a&gt;的&amp;ldquo;指标&amp;rdquo;委托来创建繁忙指标。</target>
        </trans-unit>
        <trans-unit id="725e5d93dd03c3006f985f1ccb1a3be3346434f3" translate="yes" xml:space="preserve">
          <source>You can create a busy indicator by replacing the &quot;indicator&quot; delegate of the BusyIndicatorStyle with a custom design.</source>
          <target state="translated">您可以通过将BusyIndicatorStyle的 &quot;指标 &quot;委托人替换为自定义设计来创建一个忙碌的指标。</target>
        </trans-unit>
        <trans-unit id="2f8c9b5d6813b3fe906612f0153008ac364a1ff6" translate="yes" xml:space="preserve">
          <source>You can create a custom &lt;a href=&quot;qml-qtquick-extras-delaybutton&quot;&gt;DelayButton&lt;/a&gt; by replacing the following delegates:</source>
          <target state="translated">您可以通过替换以下委托来创建自定义的&lt;a href=&quot;qml-qtquick-extras-delaybutton&quot;&gt;DelayButton&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="b3e4dad5fb309a294cb7ab5fcfa660a13b321d0d" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for Calendar by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-calendarstyle&quot;&gt;CalendarStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-calendarstyle&quot;&gt;CalendarStyle&lt;/a&gt;为Calendar创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="edc6bdc2b0031b7c8ff9fde1bd78600a470546fe" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-checkbox&quot;&gt;CheckBox&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-checkboxstyle&quot;&gt;CheckBoxStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-checkboxstyle&quot;&gt;CheckBoxStyle&lt;/a&gt;为&lt;a href=&quot;qml-qtquick-controls-checkbox&quot;&gt;CheckBox&lt;/a&gt;创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="b7c86259fa4020a6af2293632f4f81548c150677" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-combobox&quot;&gt;ComboBox&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-comboboxstyle&quot;&gt;ComboBoxStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-comboboxstyle&quot;&gt;ComboBoxStyle&lt;/a&gt;为&lt;a href=&quot;qml-qtquick-controls-combobox&quot;&gt;ComboBox&lt;/a&gt;创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="425175a08a6c00a16a8f200dea693bbf724eeb08" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-progressbar&quot;&gt;ProgressBar&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-progressbarstyle&quot;&gt;ProgressBarStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-progressbarstyle&quot;&gt;ProgressBarStyle&lt;/a&gt;为&lt;a href=&quot;qml-qtquick-controls-progressbar&quot;&gt;ProgressBar&lt;/a&gt;创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="77755c5f81167251d51f793b1ce873508b3e87bf" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-radiobutton&quot;&gt;RadioButton&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-radiobuttonstyle&quot;&gt;RadioButtonStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-radiobuttonstyle&quot;&gt;RadioButtonStyle&lt;/a&gt;来为&lt;a href=&quot;qml-qtquick-controls-radiobutton&quot;&gt;RadioButton&lt;/a&gt;创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="a0bcbfb6951c375b6b09c521a205071b75285c5d" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-scrollview&quot;&gt;ScrollView&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-scrollviewstyle&quot;&gt;ScrollViewStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-scrollviewstyle&quot;&gt;ScrollViewStyle&lt;/a&gt;为&lt;a href=&quot;qml-qtquick-controls-scrollview&quot;&gt;ScrollView&lt;/a&gt;创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="b557750bf1bce5bfc683b6ef6eab51cf250d6e78" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-tableview&quot;&gt;TableView&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-tableviewstyle&quot;&gt;TableViewStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-tableviewstyle&quot;&gt;TableViewStyle&lt;/a&gt;为&lt;a href=&quot;qml-qtquick-controls-tableview&quot;&gt;TableView&lt;/a&gt;创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="d34839eb43d85719dfe000a0a467dd06c983c580" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-textarea&quot;&gt;TextArea&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-textareastyle&quot;&gt;TextAreaStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-textareastyle&quot;&gt;TextAreaStyle&lt;/a&gt;为&lt;a href=&quot;qml-qtquick-controls-textarea&quot;&gt;TextArea&lt;/a&gt;创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="70cab762458317eecf67b8cf58ad950f691271e7" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-textfield&quot;&gt;TextField&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-textfieldstyle&quot;&gt;TextFieldStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-textfieldstyle&quot;&gt;TextFieldStyle&lt;/a&gt;为&lt;a href=&quot;qml-qtquick-controls-textfield&quot;&gt;TextField&lt;/a&gt;创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="13298eea13591a8dd5bde4fc9f11db5851f46643" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-toolbutton&quot;&gt;ToolButton&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-buttonstyle&quot;&gt;ButtonStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-buttonstyle&quot;&gt;ButtonStyle&lt;/a&gt;为&lt;a href=&quot;qml-qtquick-controls-toolbutton&quot;&gt;ToolButton&lt;/a&gt;创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="90634d6512c54b070e89d16ca8fd8a676ca9522b" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-treeview&quot;&gt;TreeView&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-treeviewstyle&quot;&gt;TreeViewStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-treeviewstyle&quot;&gt;TreeViewStyle&lt;/a&gt;为&lt;a href=&quot;qml-qtquick-controls-treeview&quot;&gt;TreeView&lt;/a&gt;创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="207fa05a27bb39b32fdf3b6975686dab8faea0dd" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-extras-circulargauge&quot;&gt;CircularGauge&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-circulargaugestyle&quot;&gt;CircularGaugeStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-circulargaugestyle&quot;&gt;CircularGaugeStyle&lt;/a&gt;来为&lt;a href=&quot;qml-qtquick-extras-circulargauge&quot;&gt;CircularGauge&lt;/a&gt;创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="8d0799d5bc855daeb97366dbeadf7fd9716e2e84" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-extras-delaybutton&quot;&gt;DelayButton&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-delaybuttonstyle&quot;&gt;DelayButtonStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-delaybuttonstyle&quot;&gt;DelayButtonStyle&lt;/a&gt;来为&lt;a href=&quot;qml-qtquick-extras-delaybutton&quot;&gt;DelayButton&lt;/a&gt;创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="5b90d069d4cde873fd5a76ca3ad43ad1a01414e6" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-extras-piemenu&quot;&gt;PieMenu&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-piemenustyle&quot;&gt;PieMenuStyle&lt;/a&gt;</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-piemenustyle&quot;&gt;PieMenuStyle&lt;/a&gt;为&lt;a href=&quot;qml-qtquick-extras-piemenu&quot;&gt;PieMenu&lt;/a&gt;创建自定义外观</target>
        </trans-unit>
        <trans-unit id="09ecb5b4d700dab832e6064968f0cd250eac6716" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-extras-statusindicator&quot;&gt;StatusIndicator&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-statusindicatorstyle&quot;&gt;StatusIndicatorStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-statusindicatorstyle&quot;&gt;StatusIndicatorStyle&lt;/a&gt;来为&lt;a href=&quot;qml-qtquick-extras-statusindicator&quot;&gt;StatusIndicator&lt;/a&gt;创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="b21c07c1bb899acf2b6830c423c293a787e9aa01" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-extras-togglebutton&quot;&gt;ToggleButton&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-togglebuttonstyle&quot;&gt;ToggleButtonStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-togglebuttonstyle&quot;&gt;ToggleButtonStyle&lt;/a&gt;来为&lt;a href=&quot;qml-qtquick-extras-togglebutton&quot;&gt;ToggleButton&lt;/a&gt;创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="40cd5c71732a12a28e97d47e0310f3f8d323bec2" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a Busy Indicator by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-busyindicatorstyle&quot;&gt;BusyIndicatorStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-busyindicatorstyle&quot;&gt;BusyIndi​​catorStyle&lt;/a&gt;为忙碌指示器创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="8b9ff5df7ef46649e6f0fa6064f30e9dc79d66c7" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a Button by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-buttonstyle&quot;&gt;ButtonStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-buttonstyle&quot;&gt;ButtonStyle&lt;/a&gt;为Button创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="1fa28606ced773de422422f127fe754a2a2c44c5" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a CheckBox by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-checkboxstyle&quot;&gt;CheckBoxStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-checkboxstyle&quot;&gt;CheckBoxStyle&lt;/a&gt;为CheckBox创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="a709d5e0489806af39de2ebcd0b09bf42e55115b" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a CircularGauge by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-circulargaugestyle&quot;&gt;CircularGaugeStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-circulargaugestyle&quot;&gt;CircularGaugeStyle&lt;/a&gt;来为CircularGauge创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="3904e3e52201993e4487358463aad051a22b0bf7" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a ComboBox by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-comboboxstyle&quot;&gt;ComboBoxStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-comboboxstyle&quot;&gt;ComboBoxStyle&lt;/a&gt;为ComboBox创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="bddff933eada3c9dcbf21392028fec8420e302e3" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a DelayButton by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-delaybuttonstyle&quot;&gt;DelayButtonStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-delaybuttonstyle&quot;&gt;DelayButtonStyle&lt;/a&gt;来为DelayButton创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="360cde1e8397907d7860c55ee510269abe0bf8eb" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a Dial by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-dialstyle&quot;&gt;DialStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-dialstyle&quot;&gt;DialStyle&lt;/a&gt;为Dial创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="25e868d5ce747952060f0419f0520f4cb3392160" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a Gauge by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-gaugestyle&quot;&gt;GaugeStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-gaugestyle&quot;&gt;GaugeStyle&lt;/a&gt;为Gauge创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="bcd8f92de9d4888790dce220fafa2f1f9e66a627" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a PieMenu by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-piemenustyle&quot;&gt;PieMenuStyle&lt;/a&gt;</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-piemenustyle&quot;&gt;PieMenuStyle&lt;/a&gt;为PieMenu创建自定义外观</target>
        </trans-unit>
        <trans-unit id="bf1db70ac039378ac06ecd5190e3f214ed10f34b" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a ProgressBar by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-progressbarstyle&quot;&gt;ProgressBarStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-progressbarstyle&quot;&gt;ProgressBarStyle&lt;/a&gt;为ProgressBar创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="3445628cfdf29f97bd8e293eb29aac5c15371442" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a RadioButton by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-radiobuttonstyle&quot;&gt;RadioButtonStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-radiobuttonstyle&quot;&gt;RadioButtonStyle&lt;/a&gt;来为RadioButton创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="0b0b8fae3480c8c73fc96bb244f2cb7e1d8dc8df" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a ScrollView by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-scrollviewstyle&quot;&gt;ScrollViewStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-scrollviewstyle&quot;&gt;ScrollViewStyle&lt;/a&gt;为ScrollView创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="d8cc85aba958c1a16aea02faf9561ca9ecac4e38" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a Slider by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-sliderstyle&quot;&gt;SliderStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-sliderstyle&quot;&gt;SliderStyle&lt;/a&gt;为Slider创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="45766121c017e0185994cbc9d75c981bbc0b60e1" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a StatusIndicator by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-statusindicatorstyle&quot;&gt;StatusIndicatorStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-statusindicatorstyle&quot;&gt;StatusIndicatorStyle&lt;/a&gt;来为StatusIndicator创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="13bbb4bd341d6dfe7b8dd1516ccb16cdfb671028" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a Switch by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-switchstyle&quot;&gt;SwitchStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-switchstyle&quot;&gt;SwitchStyle&lt;/a&gt;为Switch创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="797f9075230c23a90d38334896f26d8c81aa7e18" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a TableView by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-tableviewstyle&quot;&gt;TableViewStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-tableviewstyle&quot;&gt;TableViewStyle&lt;/a&gt;为TableView创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="6a5c9801c93675169a87afc6d878ff03a0a4ae6d" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a TextArea by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-textareastyle&quot;&gt;TextAreaStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-textareastyle&quot;&gt;TextAreaStyle&lt;/a&gt;为TextArea创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="e41f3c63539f02d32de59c9e990d61e51fc06eb5" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a TextField by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-textfieldstyle&quot;&gt;TextFieldStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-textfieldstyle&quot;&gt;TextFieldStyle&lt;/a&gt;为TextField创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="9e463cd66ee7b28f836f85db14ec87469c657781" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a ToggleButton by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-togglebuttonstyle&quot;&gt;ToggleButtonStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-togglebuttonstyle&quot;&gt;ToggleButtonStyle&lt;/a&gt;为ToggleButton创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="eda3e7da3ddcc1d3e4f8f7353047fc46cd0938c9" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a ToolButton by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-buttonstyle&quot;&gt;ButtonStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-buttonstyle&quot;&gt;ButtonStyle&lt;/a&gt;为ToolButton创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="120006fc00c06ba71162b10c8e13e1b01b8175f4" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a TreeView by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-treeviewstyle&quot;&gt;TreeViewStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-treeviewstyle&quot;&gt;TreeViewStyle&lt;/a&gt;为TreeView创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="effdfaa7edc6c55db444699c591536647cf46ae1" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a Tumbler by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-tumblerstyle&quot;&gt;TumblerStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-tumblerstyle&quot;&gt;TumblerStyle&lt;/a&gt;为Tumbler创建自定义外观。</target>
        </trans-unit>
        <trans-unit id="446a6686179da97187584fcd091ad5312c4a7891" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a Tumbler by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-tumblerstyle&quot;&gt;TumblerStyle&lt;/a&gt;. To style individual columns, use the &lt;a href=&quot;qml-qtquick-extras-tumblercolumn#delegate-prop&quot;&gt;delegate&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-extras-tumblercolumn#highlight-prop&quot;&gt;highlight&lt;/a&gt; properties of &lt;a href=&quot;qml-qtquick-extras-tumblercolumn&quot;&gt;TumblerColumn&lt;/a&gt;.</source>
          <target state="translated">您可以通过分配&lt;a href=&quot;qml-qtquick-controls-styles-tumblerstyle&quot;&gt;TumblerStyle&lt;/a&gt;为Tumbler创建自定义外观。要设置各个列的样式，请使用&lt;a href=&quot;qml-qtquick-extras-tumblercolumn&quot;&gt;TumblerColumn&lt;/a&gt;的&lt;a href=&quot;qml-qtquick-extras-tumblercolumn#delegate-prop&quot;&gt;委托&lt;/a&gt;和&lt;a href=&quot;qml-qtquick-extras-tumblercolumn#highlight-prop&quot;&gt;突出显示&lt;/a&gt;属性。</target>
        </trans-unit>
        <trans-unit id="11f66f4cd70e27326922e3cbf75c3fc9031799d0" translate="yes" xml:space="preserve">
          <source>You can create a custom button by replacing the &quot;background&quot; delegate of the &lt;a href=&quot;qml-qtquick-controls-styles-buttonstyle&quot;&gt;ButtonStyle&lt;/a&gt; with a custom design.</source>
          <target state="translated">您可以通过使用自定义设计替换&lt;a href=&quot;qml-qtquick-controls-styles-buttonstyle&quot;&gt;ButtonStyle&lt;/a&gt;的&amp;ldquo;背景&amp;rdquo;委托来创建自定义按钮。</target>
        </trans-unit>
        <trans-unit id="61761f08fb5051592a7a5e6b9958628f1f334f82" translate="yes" xml:space="preserve">
          <source>You can create a custom button by replacing the &quot;background&quot; delegate of the ButtonStyle with a custom design.</source>
          <target state="translated">您可以通过将ButtonStyle的 &quot;背景 &quot;委托人替换为自定义设计来创建一个自定义按钮。</target>
        </trans-unit>
        <trans-unit id="1355810e0721ce2f345d9ebbdd3b644440d3d30f" translate="yes" xml:space="preserve">
          <source>You can create a custom circular gauge by replacing the following delegates:</source>
          <target state="translated">您可以通过替换以下代表来创建一个自定义的圆规。</target>
        </trans-unit>
        <trans-unit id="24e3a5ae9673a23f2d216b68444a89f39971c3c6" translate="yes" xml:space="preserve">
          <source>You can create a custom dial by replacing the following delegates:</source>
          <target state="translated">您可以通过替换以下委托人来创建一个自定义表盘。</target>
        </trans-unit>
        <trans-unit id="e5c2a01d22c9afff963dd6e5b43bda42c2211920" translate="yes" xml:space="preserve">
          <source>You can create a custom gauge by replacing the following delegates:</source>
          <target state="translated">您可以通过替换以下代表来创建一个自定义仪表。</target>
        </trans-unit>
        <trans-unit id="288f6b2162f9f91ebae9649414c55e69f0696b3d" translate="yes" xml:space="preserve">
          <source>You can create a custom look and feel for your application by creating a custom style. There are two approaches to creating a custom style. In the static approach, you either choose an existing &lt;a href=&quot;qstyle&quot;&gt;QStyle&lt;/a&gt; class, subclass it, and reimplement virtual functions to provide the custom behavior, or you create an entire &lt;a href=&quot;qstyle&quot;&gt;QStyle&lt;/a&gt; class from scratch. In the dynamic approach, you modify the behavior of your system style at runtime. The static approach is described below. The dynamic approach is described in &lt;a href=&quot;qproxystyle&quot;&gt;QProxyStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过创建自定义样式来为应用程序创建自定义外观。有两种创建自定义样式的方法。在静态方法中，您可以选择现有的&lt;a href=&quot;qstyle&quot;&gt;QStyle&lt;/a&gt;类，对其进行子类化，然后重新实现虚拟函数以提供自定义行为，或者从头开始创建整个&lt;a href=&quot;qstyle&quot;&gt;QStyle&lt;/a&gt;类。在动态方法中，您可以在运行时修改系统样式的行为。静态方法如下所述。动态方法在&lt;a href=&quot;qproxystyle&quot;&gt;QProxyStyle中进行了&lt;/a&gt;描述。</target>
        </trans-unit>
        <trans-unit id="00d75720f504f5d3335638014088df05f116b2ac" translate="yes" xml:space="preserve">
          <source>You can create a custom look and feel for your application by creating a custom style. There are two approaches to creating a custom style. In the static approach, you either choose an existing QStyle class, subclass it, and reimplement virtual functions to provide the custom behavior, or you create an entire QStyle class from scratch. In the dynamic approach, you modify the behavior of your system style at runtime. The static approach is described below. The dynamic approach is described in &lt;a href=&quot;qproxystyle&quot;&gt;QProxyStyle&lt;/a&gt;.</source>
          <target state="translated">您可以通过创建自定义样式来为您的应用程序创建自定义外观。有两种创建自定义样式的方法。在静态方法中，您可以选择现有的QStyle类，对其进行子类化，然后重新实现虚拟函数以提供自定义行为，或者从头开始创建整个QStyle类。在动态方法中，您可以在运行时修改系统样式的行为。静态方法如下所述。动态方法在&lt;a href=&quot;qproxystyle&quot;&gt;QProxyStyle中进行了&lt;/a&gt;描述。</target>
        </trans-unit>
        <trans-unit id="a1ad3e34d9b4d656aeac2ab49fc410627f27d535" translate="yes" xml:space="preserve">
          <source>You can create a custom pie menu by replacing the following delegates:</source>
          <target state="translated">您可以通过替换以下代表来创建一个自定义的饼状菜单。</target>
        </trans-unit>
        <trans-unit id="77f6778610cd0e656475c75c216bdb7ded741c91" translate="yes" xml:space="preserve">
          <source>You can create a custom status indicator by defining the &lt;a href=&quot;qml-qtquick-controls-styles-statusindicatorstyle#indicator-prop&quot;&gt;indicator&lt;/a&gt; component.</source>
          <target state="translated">您可以通过定义&lt;a href=&quot;qml-qtquick-controls-styles-statusindicatorstyle#indicator-prop&quot;&gt;指标&lt;/a&gt;组件来创建自定义状态指标。</target>
        </trans-unit>
        <trans-unit id="f121f629d5c081c76f6ecaa60a870a58d00065fb" translate="yes" xml:space="preserve">
          <source>You can create a custom toggle button by replacing the same delegates that &lt;a href=&quot;qml-qtquick-controls-styles-buttonstyle&quot;&gt;ButtonStyle&lt;/a&gt; provides.</source>
          <target state="translated">您可以通过替换&lt;a href=&quot;qml-qtquick-controls-styles-buttonstyle&quot;&gt;ButtonStyle&lt;/a&gt;提供的委托来创建自定义切换按钮。</target>
        </trans-unit>
        <trans-unit id="20f6695b9e3930c0ec7ca889c36ed33c9e251062" translate="yes" xml:space="preserve">
          <source>You can create a custom tumbler by replacing the following delegates:</source>
          <target state="translated">你可以通过替换以下代表来创建一个自定义的滚轮。</target>
        </trans-unit>
        <trans-unit id="fb4b9744696dc275ccca76cc20bde69c216fe08b" translate="yes" xml:space="preserve">
          <source>You can create a custom window background by replacing the &quot;background&quot; delegate of &lt;a href=&quot;qml-qtquick-controls-styles-applicationwindowstyle&quot;&gt;ApplicationWindowStyle&lt;/a&gt; with a custom design.</source>
          <target state="translated">您可以通过使用自定义设计替换&lt;a href=&quot;qml-qtquick-controls-styles-applicationwindowstyle&quot;&gt;ApplicationWindowStyle&lt;/a&gt;的&amp;ldquo;背景&amp;rdquo;委托来创建自定义窗口背景。</target>
        </trans-unit>
        <trans-unit id="48f49081a21a5fadea9fb1bedd40065695c19159" translate="yes" xml:space="preserve">
          <source>You can create a custom window background by replacing the &quot;background&quot; delegate of ApplicationWindowStyle with a custom design.</source>
          <target state="translated">您可以通过将ApplicationWindowStyle的 &quot;background &quot;委托人替换为自定义设计来创建自定义窗口背景。</target>
        </trans-unit>
        <trans-unit id="bc38ac47a3fcf842602240cdf6d2c9faf08793bc" translate="yes" xml:space="preserve">
          <source>You can create a mutable view of type &lt;a href=&quot;qsequentialiterable&quot;&gt;QSequentialIterable&lt;/a&gt; on any container registered with &lt;a href=&quot;qmetatype#Q_DECLARE_SEQUENTIAL_CONTAINER_METATYPE&quot;&gt;Q_DECLARE_SEQUENTIAL_CONTAINER_METATYPE&lt;/a&gt;().</source>
          <target state="translated">您可以在用&lt;a href=&quot;qmetatype#Q_DECLARE_SEQUENTIAL_CONTAINER_METATYPE&quot;&gt;Q_DECLARE_SEQUENTIAL_CONTAINER_METATYPE&lt;/a&gt;（）注册的任何容器上创建&lt;a href=&quot;qsequentialiterable&quot;&gt;QSequentialIterable&lt;/a&gt;类型的可变视图。</target>
        </trans-unit>
        <trans-unit id="6591a2ee3f63c45eca9283ae71c70e96d4908bbd" translate="yes" xml:space="preserve">
          <source>You can create a new document type with &lt;a href=&quot;qdomimplementation#createDocumentType&quot;&gt;createDocumentType&lt;/a&gt;() and a new document with &lt;a href=&quot;qdomimplementation#createDocument&quot;&gt;createDocument&lt;/a&gt;().</source>
          <target state="translated">您可以创建一个新的文档类型&lt;a href=&quot;qdomimplementation#createDocumentType&quot;&gt;createDocumentType&lt;/a&gt;（），并用一个新文档&lt;a href=&quot;qdomimplementation#createDocument&quot;&gt;createDocument&lt;/a&gt;（）。</target>
        </trans-unit>
        <trans-unit id="ab58b6f8b94d91f4f77db9a074d0fb8c71072b4f" translate="yes" xml:space="preserve">
          <source>You can create a service by extending the class &lt;code&gt;QtService&lt;/code&gt; or &lt;a href=&quot;https://developer.android.com/reference/android/app/Service&quot;&gt;Android: Service&lt;/a&gt; to your Java class. Depending on whether you want to use Qt features in your service or call native C++ functions from Java, you need to extend either &lt;code&gt;QtService&lt;/code&gt; or &lt;code&gt;Service&lt;/code&gt;. Let's start with a simple service, as follows:</source>
          <target state="translated">您可以通过将类 &lt;code&gt;QtService&lt;/code&gt; 或&lt;a href=&quot;https://developer.android.com/reference/android/app/Service&quot;&gt;Android：Service扩展&lt;/a&gt;到Java类来创建服务。根据您是要在服务中使用Qt功能还是要从Java调用本机C ++函数，您需要扩展 &lt;code&gt;QtService&lt;/code&gt; 或 &lt;code&gt;Service&lt;/code&gt; 。让我们从一个简单的服务开始，如下所示：</target>
        </trans-unit>
        <trans-unit id="6623e1e3b490c5318077522a0a5cee2a39473068" translate="yes" xml:space="preserve">
          <source>You can create an instance of &lt;a href=&quot;qstorageinfo&quot;&gt;QStorageInfo&lt;/a&gt; by passing the path to the volume's mount point as a constructor parameter, or you can set it using the &lt;a href=&quot;qstorageinfo#setPath&quot;&gt;setPath&lt;/a&gt;() method. The static &lt;a href=&quot;qstorageinfo#mountedVolumes&quot;&gt;mountedVolumes&lt;/a&gt;() method can be used to get the list of all mounted filesystems.</source>
          <target state="translated">您可以通过将路径作为构造函数参数传递到卷的安装点来创建&lt;a href=&quot;qstorageinfo&quot;&gt;QStorageInfo&lt;/a&gt;的实例，也可以使用&lt;a href=&quot;qstorageinfo#setPath&quot;&gt;setPath&lt;/a&gt;（）方法对其进行设置。静态&lt;a href=&quot;qstorageinfo#mountedVolumes&quot;&gt;mountVolumes&lt;/a&gt;（）方法可用于获取所有已挂载文件系统的列表。</target>
        </trans-unit>
        <trans-unit id="d06f756c8b9b6aa8503c130afc54a29fa5fc57ca" translate="yes" xml:space="preserve">
          <source>You can create an instance of QStorageInfo by passing the path to the volume's mount point as a constructor parameter, or you can set it using the &lt;a href=&quot;qstorageinfo#setPath&quot;&gt;setPath&lt;/a&gt;() method. The static &lt;a href=&quot;qstorageinfo#mountedVolumes&quot;&gt;mountedVolumes&lt;/a&gt;() method can be used to get the list of all mounted filesystems.</source>
          <target state="translated">您可以通过将路径作为构造函数参数传递到卷的安装点来创建QStorageInfo的实例，也可以使用&lt;a href=&quot;qstorageinfo#setPath&quot;&gt;setPath&lt;/a&gt;（）方法对其进行设置。静态&lt;a href=&quot;qstorageinfo#mountedVolumes&quot;&gt;mountVolumes&lt;/a&gt;（）方法可用于获取所有已挂载文件系统的列表。</target>
        </trans-unit>
        <trans-unit id="829480e50daca9a93a34fda88700af2a26b33b08" translate="yes" xml:space="preserve">
          <source>You can create your own &lt;a href=&quot;qfiledialog&quot;&gt;QFileDialog&lt;/a&gt; without using the static functions. By calling &lt;a href=&quot;qfiledialog#fileMode-prop&quot;&gt;setFileMode&lt;/a&gt;(), you can specify what the user must select in the dialog:</source>
          <target state="translated">您可以创建自己的&lt;a href=&quot;qfiledialog&quot;&gt;QFileDialog，&lt;/a&gt;而无需使用静态函数。通过调用&lt;a href=&quot;qfiledialog#fileMode-prop&quot;&gt;setFileMode&lt;/a&gt;（），可以指定用户必须在对话框中选择的内容：</target>
        </trans-unit>
        <trans-unit id="dc90c3568ae9cf348aebd2b6cd9886b9b1dfecc6" translate="yes" xml:space="preserve">
          <source>You can create your own QFileDialog without using the static functions. By calling &lt;a href=&quot;qfiledialog#fileMode-prop&quot;&gt;setFileMode&lt;/a&gt;(), you can specify what the user must select in the dialog:</source>
          <target state="translated">您可以创建自己的QFileDialog，而无需使用静态函数。通过调用&lt;a href=&quot;qfiledialog#fileMode-prop&quot;&gt;setFileMode&lt;/a&gt;（），可以指定用户必须在对话框中选择的内容：</target>
        </trans-unit>
        <trans-unit id="48a3838f1dbb4a734c690ddc098064a2a810fa1f" translate="yes" xml:space="preserve">
          <source>You can customize the look by overriding the &lt;a href=&quot;qml-qtquick-controls-tableview#itemDelegate-prop&quot;&gt;itemDelegate&lt;/a&gt;, &lt;a href=&quot;qml-qtquick-controls-tableview#rowDelegate-prop&quot;&gt;rowDelegate&lt;/a&gt;, or &lt;a href=&quot;qml-qtquick-controls-tableview#headerDelegate-prop&quot;&gt;headerDelegate&lt;/a&gt; properties.</source>
          <target state="translated">您可以通过覆盖&lt;a href=&quot;qml-qtquick-controls-tableview#itemDelegate-prop&quot;&gt;itemDelegate&lt;/a&gt;，&lt;a href=&quot;qml-qtquick-controls-tableview#rowDelegate-prop&quot;&gt;rowDelegate&lt;/a&gt;或&lt;a href=&quot;qml-qtquick-controls-tableview#headerDelegate-prop&quot;&gt;headerDelegate&lt;/a&gt;属性来自定义外观。</target>
        </trans-unit>
        <trans-unit id="079d65c3f00934f6ea5929308e9e21672ae6a4cd" translate="yes" xml:space="preserve">
          <source>You can customize the look by overriding the &lt;a href=&quot;qml-qtquick-controls-treeview#itemDelegate-prop&quot;&gt;itemDelegate&lt;/a&gt;, &lt;a href=&quot;qml-qtquick-controls-treeview#rowDelegate-prop&quot;&gt;rowDelegate&lt;/a&gt;, or &lt;a href=&quot;qml-qtquick-controls-treeview#headerDelegate-prop&quot;&gt;headerDelegate&lt;/a&gt; properties.</source>
          <target state="translated">您可以通过覆盖&lt;a href=&quot;qml-qtquick-controls-treeview#itemDelegate-prop&quot;&gt;itemDelegate&lt;/a&gt;，&lt;a href=&quot;qml-qtquick-controls-treeview#rowDelegate-prop&quot;&gt;rowDelegate&lt;/a&gt;或&lt;a href=&quot;qml-qtquick-controls-treeview#headerDelegate-prop&quot;&gt;headerDelegate&lt;/a&gt;属性来自定义外观。</target>
        </trans-unit>
        <trans-unit id="6f5e3403c5ea7901c382aea548cf58c09c12f593" translate="yes" xml:space="preserve">
          <source>You can customize the look by overriding the &lt;a href=&quot;qml-qtquick-controls-treeview#itemDelegate-prop&quot;&gt;itemDelegate&lt;/a&gt;, rowDelegate, or headerDelegate properties.</source>
          <target state="translated">您可以通过覆盖&lt;a href=&quot;qml-qtquick-controls-treeview#itemDelegate-prop&quot;&gt;itemDelegate&lt;/a&gt;，rowDelegate或headerDelegate属性来自定义外观。</target>
        </trans-unit>
        <trans-unit id="463567a5e106b6ad2daf8c1ac13fb6c876b1ad2d" translate="yes" xml:space="preserve">
          <source>You can customize the tab order using &lt;a href=&quot;qwidget#setTabOrder&quot;&gt;QWidget::setTabOrder&lt;/a&gt;(). (If you don't, &lt;b&gt;Tab&lt;/b&gt; generally moves focus in the order of widget construction.) Qt Designer provides a means of visually changing the tab order.</source>
          <target state="translated">您可以使用&lt;a href=&quot;qwidget#setTabOrder&quot;&gt;QWidget :: setTabOrder&lt;/a&gt;（）自定义制表符顺序。（如果不这样做，&lt;b&gt;Tab&lt;/b&gt;通常会按照小部件构造的顺序移动焦点。）Qt Designer提供了一种直观地更改选项卡顺序的方法。</target>
        </trans-unit>
        <trans-unit id="7b1ae55e2c86572a71f138384b075905674185ff" translate="yes" xml:space="preserve">
          <source>You can declare &lt;a href=&quot;qml-qtquick-controls2-applicationwindow&quot;&gt;ApplicationWindow&lt;/a&gt; as the root item of your application, and run it by using &lt;a href=&quot;qqmlapplicationengine&quot;&gt;QQmlApplicationEngine&lt;/a&gt;. In this way you can control the window's properties, appearance and layout from QML.</source>
          <target state="translated">您可以将&lt;a href=&quot;qml-qtquick-controls2-applicationwindow&quot;&gt;ApplicationWindow&lt;/a&gt;声明为应用程序的根项目，然后使用&lt;a href=&quot;qqmlapplicationengine&quot;&gt;QQmlApplicationEngine&lt;/a&gt;运行它。通过这种方式，您可以从QML控制窗口的属性，外观和布局。</target>
        </trans-unit>
        <trans-unit id="7fb64881294e6deee4cb91f1a17a12f271906463" translate="yes" xml:space="preserve">
          <source>You can declare ApplicationWindow as the root item of your application, and run it by using &lt;a href=&quot;qqmlapplicationengine&quot;&gt;QQmlApplicationEngine&lt;/a&gt;. In this way you can control the window's properties, appearance and layout from QML.</source>
          <target state="translated">您可以将ApplicationWindow声明为应用程序的根项目，然后使用&lt;a href=&quot;qqmlapplicationengine&quot;&gt;QQmlApplicationEngine来&lt;/a&gt;运行它。这样，您可以从QML控制窗口的属性，外观和布局。</target>
        </trans-unit>
        <trans-unit id="81fe2f82d050ac05ad8277a4f8afc0e7a2bda752" translate="yes" xml:space="preserve">
          <source>You can define a sub-set of particle groups in this property in order to provide them with stochastic state transitions.</source>
          <target state="translated">你可以在这个属性中定义一个粒子组的子集,以便为它们提供随机状态转换。</target>
        </trans-unit>
        <trans-unit id="f5fb08e749435934740d56b5c570f0d70397fd01" translate="yes" xml:space="preserve">
          <source>You can define any number of custom filters in a help project file. It is important to know that you do not have to specify the filter attributes in the same project file. These attributes can be defined in any help file, in a filter section.</source>
          <target state="translated">您可以在帮助项目文件中定义任意数量的自定义过滤器。重要的是,你不必在同一个项目文件中指定过滤器的属性,这些属性可以在任何帮助文件的过滤器部分定义。这些属性可以在任何帮助文件的过滤器部分定义。</target>
        </trans-unit>
        <trans-unit id="825abcc7172d8b4646fcc6ea8b8d936a74cf6d60" translate="yes" xml:space="preserve">
          <source>You can define certain roles as &quot;keys&quot; so that when &lt;a href=&quot;qml-qtquick-xmllistmodel-xmllistmodel#reload-method&quot;&gt;reload()&lt;/a&gt; is called, the model will only add and refresh data that contains new values for these keys.</source>
          <target state="translated">您可以将某些角色定义为&amp;ldquo;键&amp;rdquo;，以便在调用&lt;a href=&quot;qml-qtquick-xmllistmodel-xmllistmodel#reload-method&quot;&gt;reload（）&lt;/a&gt;时，模型将仅添加和刷新包含这些键的新值的数据。</target>
        </trans-unit>
        <trans-unit id="eaeecd6b9bd486c0633fd7717f2fe7af318d5bcd" translate="yes" xml:space="preserve">
          <source>You can define new user types in &lt;a href=&quot;qlistwidgetitem&quot;&gt;QListWidgetItem&lt;/a&gt; subclasses to ensure that custom items are treated specially.</source>
          <target state="translated">您可以在&lt;a href=&quot;qlistwidgetitem&quot;&gt;QListWidgetItem&lt;/a&gt;子类中定义新的用户类型，以确保自定义项得到特殊处理。</target>
        </trans-unit>
        <trans-unit id="4b29cad43996e1f240cad32a7921bad64dddff95" translate="yes" xml:space="preserve">
          <source>You can define new user types in &lt;a href=&quot;qstandarditem&quot;&gt;QStandardItem&lt;/a&gt; subclasses to ensure that custom items are treated specially; for example, when items are sorted.</source>
          <target state="translated">您可以在&lt;a href=&quot;qstandarditem&quot;&gt;QStandardItem&lt;/a&gt;子类中定义新的用户类型，以确保自定义项得到特殊处理。例如，对项目进行排序时。</target>
        </trans-unit>
        <trans-unit id="5eea3a81e8b5b97414f3a597634db4da81f784d9" translate="yes" xml:space="preserve">
          <source>You can define new user types in &lt;a href=&quot;qtablewidgetitem&quot;&gt;QTableWidgetItem&lt;/a&gt; subclasses to ensure that custom items are treated specially.</source>
          <target state="translated">您可以在&lt;a href=&quot;qtablewidgetitem&quot;&gt;QTableWidgetItem&lt;/a&gt;子类中定义新的用户类型，以确保自定义项得到特殊处理。</target>
        </trans-unit>
        <trans-unit id="0ff0f62525f56eceeb0913301f820ac7ea9ae312" translate="yes" xml:space="preserve">
          <source>You can define new user types in &lt;a href=&quot;qtreewidgetitem&quot;&gt;QTreeWidgetItem&lt;/a&gt; subclasses to ensure that custom items are treated specially; for example, when items are sorted.</source>
          <target state="translated">您可以在&lt;a href=&quot;qtreewidgetitem&quot;&gt;QTreeWidgetItem&lt;/a&gt;子类中定义新的用户类型，以确保自定义项得到特殊处理。例如，对项目进行排序时。</target>
        </trans-unit>
        <trans-unit id="37a6792f56ceb68eebda15bfc8b7cdd1eb0378d5" translate="yes" xml:space="preserve">
          <source>You can define your own functions for processing the contents of variables as follows:</source>
          <target state="translated">你可以定义自己的函数来处理变量的内容,如下所示。</target>
        </trans-unit>
        <trans-unit id="fb68bdde305e41912c0b86c92a19fc6b0e9a9005" translate="yes" xml:space="preserve">
          <source>You can determine whether a given model item lies within a particular range by using the &lt;a href=&quot;qitemselectionrange#contains&quot;&gt;contains&lt;/a&gt;() function. Ranges can also be compared using the overloaded operators for equality and inequality, and the &lt;a href=&quot;qitemselectionrange#intersects&quot;&gt;intersects&lt;/a&gt;() function allows you to determine whether two ranges overlap.</source>
          <target state="translated">您可以使用&lt;a href=&quot;qitemselectionrange#contains&quot;&gt;contains&lt;/a&gt;（）函数确定给定的模型项是否在特定范围内。也可以使用重载运算符比较范围是否相等和不相等，并且使用&lt;a href=&quot;qitemselectionrange#intersects&quot;&gt;intersects&lt;/a&gt;（）函数可以确定两个范围是否重叠。</target>
        </trans-unit>
        <trans-unit id="14c3a796133e1fe8525e7174d7ab574f91acd989" translate="yes" xml:space="preserve">
          <source>You can develop applications for &lt;a href=&quot;supported-platforms#winrt&quot;&gt;WinRT&lt;/a&gt; just as any other Qt applications. Use your favorite editor or IDE (such as Qt Creator) and create your application or load a Qt example. Then run &lt;code&gt;qmake&lt;/code&gt; and &lt;code&gt;nmake/jom&lt;/code&gt; to build your application.</source>
          <target state="translated">您可以像其他任何Qt应用程序一样为&lt;a href=&quot;supported-platforms#winrt&quot;&gt;WinRT&lt;/a&gt;开发应用程序。使用您喜欢的编辑器或IDE（例如Qt Creator）并创建您的应用程序或加载Qt示例。然后运行 &lt;code&gt;qmake&lt;/code&gt; 和 &lt;code&gt;nmake/jom&lt;/code&gt; 来构建您的应用程序。</target>
        </trans-unit>
        <trans-unit id="79d4b4961e3a8bfe10087d77e5edcfe6ae1de5ef" translate="yes" xml:space="preserve">
          <source>You can develop applications for UWP just as any other Qt applications. Use your favorite editor or IDE (such as Qt Creator) and create your application or load a Qt example. Then run &lt;code&gt;qmake&lt;/code&gt; and &lt;code&gt;nmake/jom&lt;/code&gt; to build your application.</source>
          <target state="translated">您可以像其他任何Qt应用程序一样为UWP开发应用程序。使用您喜欢的编辑器或IDE（例如Qt Creator）并创建您的应用程序或加载Qt示例。然后运行 &lt;code&gt;qmake&lt;/code&gt; 和 &lt;code&gt;nmake/jom&lt;/code&gt; 来构建您的应用程序。</target>
        </trans-unit>
        <trans-unit id="8a9f407e0ee144396544745de86fbe1a0a719f76" translate="yes" xml:space="preserve">
          <source>You can disable the workaround by setting the &lt;code&gt;QT_ANDROID_DISABLE_GLYPH_CACHE_WORKAROUND&lt;/code&gt; environment variable to</source>
          <target state="translated">您可以通过将 &lt;code&gt;QT_ANDROID_DISABLE_GLYPH_CACHE_WORKAROUND&lt;/code&gt; 环境变量设置为来禁用解决方法</target>
        </trans-unit>
        <trans-unit id="c340cc2579d4b0afc54c8aa2e461b156b99f1760" translate="yes" xml:space="preserve">
          <source>You can disable the workaround by setting the &lt;code&gt;QT_ANDROID_DISABLE_GLYPH_CACHE_WORKAROUND&lt;/code&gt; environment variable to &lt;code&gt;1&lt;/code&gt;. You should do so only after verifying that text appears correctly on all targeted devices.</source>
          <target state="translated">您可以通过将 &lt;code&gt;QT_ANDROID_DISABLE_GLYPH_CACHE_WORKAROUND&lt;/code&gt; 环境变量设置为 &lt;code&gt;1&lt;/code&gt; 来禁用此替代方法。仅在确认文本在所有目标设备上正确显示后，您才应该这样做。</target>
        </trans-unit>
        <trans-unit id="056bc4933462b2f94855dfbf25f9a7e749738f75" translate="yes" xml:space="preserve">
          <source>You can disable this constructor by defining &lt;a href=&quot;qstring#QT_NO_CAST_FROM_ASCII&quot;&gt;QT_NO_CAST_FROM_ASCII&lt;/a&gt; when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through &lt;a href=&quot;qobject#tr&quot;&gt;QObject::tr&lt;/a&gt;(), for example.</source>
          <target state="translated">编译应用程序时，可以通过定义&lt;a href=&quot;qstring#QT_NO_CAST_FROM_ASCII&quot;&gt;QT_NO_CAST_FROM_ASCII&lt;/a&gt;来禁用此构造函数。例如，如果要确保所有用户可见的字符串都通过&lt;a href=&quot;qobject#tr&quot;&gt;QObject :: tr&lt;/a&gt;（），则此功能很有用。</target>
        </trans-unit>
        <trans-unit id="b70aa67f30c45d022d1ea8d0526be3228755aa52" translate="yes" xml:space="preserve">
          <source>You can disable this constructor by defining &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; when you compile your applications.</source>
          <target state="translated">编译应用程序时，可以通过定义 &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; 来禁用此构造函数。</target>
        </trans-unit>
        <trans-unit id="5b782a21efcc3961e99ef872172df243bdf3f8f4" translate="yes" xml:space="preserve">
          <source>You can disable this constructor by defining &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through &lt;a href=&quot;qobject#tr&quot;&gt;QObject::tr&lt;/a&gt;(), for example.</source>
          <target state="translated">编译应用程序时，可以通过定义 &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; 来禁用此构造函数。例如，如果要确保所有用户可见的字符串都通过&lt;a href=&quot;qobject#tr&quot;&gt;QObject :: tr&lt;/a&gt;（），则此功能很有用。</target>
        </trans-unit>
        <trans-unit id="fb95f1abf7a5d418874e3ded69df25eddcc9f93c" translate="yes" xml:space="preserve">
          <source>You can disable this function by defining &lt;a href=&quot;qstring#QT_NO_CAST_FROM_ASCII&quot;&gt;QT_NO_CAST_FROM_ASCII&lt;/a&gt; when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through &lt;a href=&quot;qobject#tr&quot;&gt;QObject::tr&lt;/a&gt;(), for example.</source>
          <target state="translated">您可以在编译应用程序时通过定义&lt;a href=&quot;qstring#QT_NO_CAST_FROM_ASCII&quot;&gt;QT_NO_CAST_FROM_ASCII&lt;/a&gt;来禁用此功能。例如，如果要确保所有用户可见的字符串都通过&lt;a href=&quot;qobject#tr&quot;&gt;QObject :: tr&lt;/a&gt;（），则此功能很有用。</target>
        </trans-unit>
        <trans-unit id="655ac5df2fba1455a6e2024db82b692a418b8c06" translate="yes" xml:space="preserve">
          <source>You can disable this function by defining &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through &lt;a href=&quot;qobject#tr&quot;&gt;QObject::tr&lt;/a&gt;(), for example.</source>
          <target state="translated">您可以在编译应用程序时通过定义 &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; 来禁用此功能。例如，如果要确保所有用户可见的字符串都通过&lt;a href=&quot;qobject#tr&quot;&gt;QObject :: tr&lt;/a&gt;（），则此功能很有用。</target>
        </trans-unit>
        <trans-unit id="9a62ea86a32a3875b8280f86a1076987edf289cf" translate="yes" xml:space="preserve">
          <source>You can disable this function by defining &lt;code&gt;QT_NO_CAST_TO_ASCII&lt;/code&gt; when you compile your applications. You then need to call &lt;a href=&quot;qstring#toUtf8&quot;&gt;QString::toUtf8&lt;/a&gt;() (or &lt;a href=&quot;qstring#toLatin1&quot;&gt;QString::toLatin1&lt;/a&gt;() or &lt;a href=&quot;qstring#toLocal8Bit&quot;&gt;QString::toLocal8Bit&lt;/a&gt;()) explicitly if you want to convert the data to &lt;code&gt;const char *&lt;/code&gt;.</source>
          <target state="translated">您可以在编译应用程序时通过定义 &lt;code&gt;QT_NO_CAST_TO_ASCII&lt;/code&gt; 来禁用此功能。然后，如果要将数据转换为 &lt;code&gt;const char *&lt;/code&gt; ,则需要显式调用&lt;a href=&quot;qstring#toUtf8&quot;&gt;QString :: toUtf8&lt;/a&gt;（）（或&lt;a href=&quot;qstring#toLatin1&quot;&gt;QString :: toLatin1&lt;/a&gt;（）或&lt;a href=&quot;qstring#toLocal8Bit&quot;&gt;QString :: toLocal8Bit&lt;/a&gt;（））。</target>
        </trans-unit>
        <trans-unit id="6adfbf222b7cf9b9cb6ba10822225682872b4c90" translate="yes" xml:space="preserve">
          <source>You can disable this operator &lt;a href=&quot;qstring#QT_NO_CAST_FROM_ASCII&quot;&gt;QT_NO_CAST_FROM_ASCII&lt;/a&gt; when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through &lt;a href=&quot;qobject#tr&quot;&gt;QObject::tr&lt;/a&gt;(), for example.</source>
          <target state="translated">编译应用程序时，可以禁用此运算符&lt;a href=&quot;qstring#QT_NO_CAST_FROM_ASCII&quot;&gt;QT_NO_CAST_FROM_ASCII&lt;/a&gt;。例如，如果要确保所有用户可见的字符串都通过&lt;a href=&quot;qobject#tr&quot;&gt;QObject :: tr&lt;/a&gt;（），则此功能很有用。</target>
        </trans-unit>
        <trans-unit id="63f65a49feca93256eabe7f646abd2a64129822c" translate="yes" xml:space="preserve">
          <source>You can disable this operator by defining &lt;a href=&quot;qstring#QT_NO_CAST_FROM_ASCII&quot;&gt;QT_NO_CAST_FROM_ASCII&lt;/a&gt; or &lt;a href=&quot;qstring#QT_RESTRICTED_CAST_FROM_ASCII&quot;&gt;QT_RESTRICTED_CAST_FROM_ASCII&lt;/a&gt; when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through &lt;a href=&quot;qobject#tr&quot;&gt;QObject::tr&lt;/a&gt;(), for example.</source>
          <target state="translated">编译应用程序时，可以通过定义&lt;a href=&quot;qstring#QT_NO_CAST_FROM_ASCII&quot;&gt;QT_NO_CAST_FROM_ASCII&lt;/a&gt;或&lt;a href=&quot;qstring#QT_RESTRICTED_CAST_FROM_ASCII&quot;&gt;QT_RESTRICTED_CAST_FROM_ASCII&lt;/a&gt;来禁用此运算符。例如，如果要确保所有用户可见的字符串都通过&lt;a href=&quot;qobject#tr&quot;&gt;QObject :: tr&lt;/a&gt;（），则此功能很有用。</target>
        </trans-unit>
        <trans-unit id="e8f4b1c32ee53ef85ca4a3a2bd3f17c4b584a93b" translate="yes" xml:space="preserve">
          <source>You can disable this operator by defining &lt;a href=&quot;qstring#QT_NO_CAST_FROM_ASCII&quot;&gt;QT_NO_CAST_FROM_ASCII&lt;/a&gt; when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through &lt;a href=&quot;qobject#tr&quot;&gt;QObject::tr&lt;/a&gt;(), for example.</source>
          <target state="translated">您可以在编译应用程序时通过定义&lt;a href=&quot;qstring#QT_NO_CAST_FROM_ASCII&quot;&gt;QT_NO_CAST_FROM_ASCII&lt;/a&gt;来禁用此运算符。例如，如果要确保所有用户可见的字符串都通过&lt;a href=&quot;qobject#tr&quot;&gt;QObject :: tr&lt;/a&gt;（），则此功能很有用。</target>
        </trans-unit>
        <trans-unit id="cca5fa33c277e170ba30b3f220205f25f4854972" translate="yes" xml:space="preserve">
          <source>You can disable this operator by defining &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; or &lt;code&gt;QT_RESTRICTED_CAST_FROM_ASCII&lt;/code&gt; when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through &lt;a href=&quot;qobject#tr&quot;&gt;QObject::tr&lt;/a&gt;(), for example.</source>
          <target state="translated">编译应用程序时，可以通过定义 &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; 或 &lt;code&gt;QT_RESTRICTED_CAST_FROM_ASCII&lt;/code&gt; 来禁用此运算符。例如，如果要确保所有用户可见的字符串都通过&lt;a href=&quot;qobject#tr&quot;&gt;QObject :: tr&lt;/a&gt;（），则此功能很有用。</target>
        </trans-unit>
        <trans-unit id="e13de9983d70a45392e98cb44cd7a7d07ecf6e2d" translate="yes" xml:space="preserve">
          <source>You can disable this operator by defining &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; when you compile your applications.</source>
          <target state="translated">您可以在编译应用程序时通过定义 &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; 来禁用此运算符。</target>
        </trans-unit>
        <trans-unit id="be53c328125fbf55aef9e57cfadf8c455ef4425a" translate="yes" xml:space="preserve">
          <source>You can disable this operator by defining &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through &lt;a href=&quot;qobject#tr&quot;&gt;QObject::tr&lt;/a&gt;(), for example.</source>
          <target state="translated">您可以在编译应用程序时通过定义 &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; 来禁用此运算符。例如，如果要确保所有用户可见的字符串都通过&lt;a href=&quot;qobject#tr&quot;&gt;QObject :: tr&lt;/a&gt;（），则此功能很有用。</target>
        </trans-unit>
        <trans-unit id="17acb1630204a6c07628881f7b722f617ed4161e" translate="yes" xml:space="preserve">
          <source>You can disable this operator by defining &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; when you compile your applications. You then need to call &lt;a href=&quot;qstring#fromUtf8&quot;&gt;QString::fromUtf8&lt;/a&gt;(), &lt;a href=&quot;qstring#fromLatin1&quot;&gt;QString::fromLatin1&lt;/a&gt;(), or &lt;a href=&quot;qstring#fromLocal8Bit&quot;&gt;QString::fromLocal8Bit&lt;/a&gt;() explicitly if you want to convert the byte array to a &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; before doing the comparison.</source>
          <target state="translated">您可以在编译应用程序时通过定义 &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; 来禁用此运算符。如果要在比较之前将字节数组转换为&lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;，则需要显式调用&lt;a href=&quot;qstring#fromUtf8&quot;&gt;QString :: fromUtf8&lt;/a&gt;（），&lt;a href=&quot;qstring#fromLatin1&quot;&gt;QString :: fromLatin1&lt;/a&gt;（）或&lt;a href=&quot;qstring#fromLocal8Bit&quot;&gt;QString :: fromLocal8Bit&lt;/a&gt;（）。</target>
        </trans-unit>
        <trans-unit id="1175a49ea40cc703e111a8b9fd571392d230a006" translate="yes" xml:space="preserve">
          <source>You can disable this operator by defining &lt;code&gt;QT_NO_CAST_FROM_BYTEARRAY&lt;/code&gt; when you compile your applications.</source>
          <target state="translated">您可以在编译应用程序时通过定义 &lt;code&gt;QT_NO_CAST_FROM_BYTEARRAY&lt;/code&gt; 来禁用此运算符。</target>
        </trans-unit>
        <trans-unit id="1f45b617a893384b0c81a0e3b6904da8ca6cd5fd" translate="yes" xml:space="preserve">
          <source>You can disable this overload by defining &lt;code&gt;QT_NO_PROCESS_COMBINED_ARGUMENT_START&lt;/code&gt; when you compile your applications. This can be useful if you want to ensure that you are not splitting arguments unintentionally, for example. In virtually all cases, using the other overload is the preferred method.</source>
          <target state="translated">您可以在编译应用程序时定义 &lt;code&gt;QT_NO_PROCESS_COMBINED_ARGUMENT_START&lt;/code&gt; 来禁用此重载。例如，如果要确保您不会无意间拆分参数，这将很有用。在几乎所有情况下，首选使用其他过载。</target>
        </trans-unit>
        <trans-unit id="4ec8aa9bcdca63995eb1f6068f6834165271a65f" translate="yes" xml:space="preserve">
          <source>You can discover all of this information at runtime too. The &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtsensors-sensor-explorer-example.html#&quot;&gt;sensor_explorer&lt;/a&gt; example shows you information about available sensors.</source>
          <target state="translated">您也可以在运行时发现所有这些信息。该&lt;a href=&quot;https://doc.qt.io/qt-5.13/qtsensors-sensor-explorer-example.html#&quot;&gt;sensor_explorer&lt;/a&gt;您有关可用传感器的信息，例如节目。</target>
        </trans-unit>
        <trans-unit id="2e3694fd72083161b851da727ebb53d9b57bc276" translate="yes" xml:space="preserve">
          <source>You can discover all of this information at runtime too. The &lt;a href=&quot;https://doc.qt.io/qt-5.15/qtsensors-sensor-explorer-example.html&quot;&gt;sensor_explorer&lt;/a&gt; example shows you information about available sensors.</source>
          <target state="translated">您也可以在运行时发现所有这些信息。该&lt;a href=&quot;https://doc.qt.io/qt-5.15/qtsensors-sensor-explorer-example.html&quot;&gt;sensor_explorer&lt;/a&gt;您有关可用传感器的信息，例如节目。</target>
        </trans-unit>
        <trans-unit id="c26e5c9050c9c943d67d5bf870c4b9f080f5c989" translate="yes" xml:space="preserve">
          <source>You can display all of the available objects in a category by clicking on the handle next to the category label. When in &lt;a href=&quot;designer-widget-mode&quot;&gt;Widget Editing Mode&lt;/a&gt;, you can add objects to a form by dragging the appropriate items from the widget box onto the form, and dropping them in the required locations.</source>
          <target state="translated">您可以通过单击类别标签旁边的手柄来显示该类别中的所有可用对象。在窗口&lt;a href=&quot;designer-widget-mode&quot;&gt;小部件编辑模式下&lt;/a&gt;，可以通过将适当的项目从窗口小部件框中拖动到表单上，然后将其拖放到所需的位置，来将对象添加到表单。</target>
        </trans-unit>
        <trans-unit id="6332251bed1418cff9b50e436ec690bcee278c1d" translate="yes" xml:space="preserve">
          <source>You can display all of the available objects in a category by clicking on the handle next to the category label. When in &lt;a href=&quot;designer-widget-mode#&quot;&gt;Widget Editing Mode&lt;/a&gt;, you can add objects to a form by dragging the appropriate items from the widget box onto the form, and dropping them in the required locations.</source>
          <target state="translated">通过单击类别标签旁边的手柄，可以显示该类别中的所有可用对象。在窗口&lt;a href=&quot;designer-widget-mode#&quot;&gt;小部件编辑模式下&lt;/a&gt;，可以通过将适当的项目从窗口小部件框中拖动到表单上并将其放在所需的位置中，来将对象添加到表单。</target>
        </trans-unit>
        <trans-unit id="45fa89ee409210859cd37edf22b01a492b1e1899" translate="yes" xml:space="preserve">
          <source>You can do this by first introducing this line</source>
          <target state="translated">你可以通过首先引入这一行来实现</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
