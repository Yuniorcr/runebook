<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="qt">
    <body>
      <group id="qt">
        <trans-unit id="f74f1e0ed752fa79a313fb567cf4e0f1c85789a4" translate="yes" xml:space="preserve">
          <source>With GLSL the default shader expects the texture coordinate to be passed from the vertex shader as &lt;code&gt;varying highp vec2 qt_TexCoord0&lt;/code&gt;, and it samples from a sampler2D named &lt;code&gt;source&lt;/code&gt;. With HLSL the texture is named &lt;code&gt;source&lt;/code&gt;, while the vertex shader is expected to provide &lt;code&gt;float2 coord : TEXCOORD0&lt;/code&gt; in its output in addition to &lt;code&gt;float4 position : SV_POSITION&lt;/code&gt; (names can differ since linking is done based on the semantics).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06bb1d65a22341423f053582013a700a14cd0a62" translate="yes" xml:space="preserve">
          <source>With GLSL the default shader passes the texture coordinate along to the fragment shader as &lt;code&gt;varying highp vec2 qt_TexCoord0&lt;/code&gt;. With HLSL it is enough to use the standard &lt;code&gt;TEXCOORD0&lt;/code&gt; semantic, for example &lt;code&gt;float2 coord : TEXCOORD0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432ffb8eb16488c3b464914ba3b76169484e8c79" translate="yes" xml:space="preserve">
          <source>With Microsoft SQL Server the result set returned by a stored procedure that uses the return statement, or returns multiple result sets, will be accessible only if you set the query's forward only mode to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab92144418b0fd8935aca47560e5939a743472a" translate="yes" xml:space="preserve">
          <source>With OpenGL 3.0+ contexts, when portability is not important, the versioned &lt;a href=&quot;https://doc.qt.io/qt-5.13/qopenglfunctions.html&quot;&gt;QOpenGLFunctions&lt;/a&gt; variants give easy access to all the modern OpenGL functions available in a given version:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99fbf67dac539e085a083af2978cf398c2b3dce" translate="yes" xml:space="preserve">
          <source>With OpenGL 3.2 the concept of profiles was introduced. Two profiles are currently defined for OpenGL: Core and Compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f1facb5ae8f9746481b734a9086c1e3d74f3a5" translate="yes" xml:space="preserve">
          <source>With OpenGL the default version is &lt;code&gt;2.0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84bc76e9356158a46e5ae5149f27cd5b3c84721a" translate="yes" xml:space="preserve">
          <source>With OpenGL the value is &lt;a href=&quot;qml-qtquick-graphicsinfo&quot;&gt;GraphicsInfo&lt;/a&gt;.RuntimeCompilation, which corresponds to the traditional way of using &lt;a href=&quot;qml-qtquick-shadereffect&quot;&gt;ShaderEffect&lt;/a&gt;. Non-OpenGL backends are expected to focus more on &lt;a href=&quot;qml-qtquick-graphicsinfo&quot;&gt;GraphicsInfo&lt;/a&gt;.OfflineCompilation, however.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de003d6b77d6796e19049db78d2434fccdf7e90" translate="yes" xml:space="preserve">
          <source>With OpenGL the value is &lt;a href=&quot;qml-qtquick-graphicsinfo&quot;&gt;GraphicsInfo&lt;/a&gt;.ShaderSourceString, which corresponds to the traditional way of inlining GLSL source code into QML. Other, non-OpenGL Qt Quick backends may however decide not to support inlined shader sources, or even shader sources at all. In this case shaders are expected to be pre-compiled into formats like SPIR-V or D3D shader bytecode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="447f8b0cd8714a7ba6f152254a9a2f10cb30db4e" translate="yes" xml:space="preserve">
          <source>With OpenGL, the scenegraph's OpenGL context will be current both when calling the destructor and this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4000ff07b627f2f3cd8ff0559054e853b706b9" translate="yes" xml:space="preserve">
          <source>With Qt Quick Controls 2, declare an &lt;a href=&quot;qml-qtquick-controls2-applicationwindow&quot;&gt;ApplicationWindow&lt;/a&gt; as the root item of your application and launch it by using &lt;a href=&quot;qqmlapplicationengine&quot;&gt;QQmlApplicationEngine&lt;/a&gt; instead. This ensures that you can control top level window properties from QML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="294b78628ff463c80a1c17789150fe32ad463fe9" translate="yes" xml:space="preserve">
          <source>With Qt XML Patterns, a standard way to present the initial focus to a query is to call &lt;a href=&quot;qxmlquery#setFocus&quot;&gt;QXmlQuery::setFocus&lt;/a&gt;(). Another common way is to let the &lt;a href=&quot;xmlprocessing#&quot;&gt;XQuery&lt;/a&gt; itself create the initial focus by using the first step of the path expression to call the &lt;a href=&quot;xmlprocessing#&quot;&gt;XQuery&lt;/a&gt;&lt;code&gt;doc()&lt;/code&gt; function. The &lt;code&gt;doc()&lt;/code&gt; function loads an XML document and returns the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5200fea545520eec9315c9a63628fdd54aebc6ff" translate="yes" xml:space="preserve">
          <source>With Qt XML Patterns, subclassing &lt;a href=&quot;qabstractxmlnodemodel&quot;&gt;QAbstractXmlNodeModel&lt;/a&gt; eliminates the transformation required to convert the non-XML data model to the XML data model, because there is only ever one data model required. The non-XML data model presents the non-XML data to the query engine via the XML data model API. Also, since the query engine uses the API to access the &lt;a href=&quot;qabstractxmlnodemodel&quot;&gt;QAbstractXmlNodeModel&lt;/a&gt;, the data model subclass can construct the elements, attributes and other data on demand, responding to the query's specific requests. This can greatly improve efficiency, because it means the entire model might not have to be built. For example, in the file system model above, it is not necessary to build an instance for a whole XML file representing the whole file system. Instead nodes are created on demand, which also likely is a small subset of the file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78c159fb1a47e011fbc4b1b7ed3ea8b59c8a82e" translate="yes" xml:space="preserve">
          <source>With Qt for INTEGRITY you can build and develop applications for the INTEGRITY RTOS. Qt for INTEGRITY supports most &lt;a href=&quot;qtwebassembly-platform-notes#supported-qt-modules&quot;&gt;Qt Modules&lt;/a&gt;. The development environment includes your target device and Qt sources that you need to build for your target device. See &lt;a href=&quot;#supported-development-hosts-and-boards&quot;&gt;Supported Development Hosts and Boards&lt;/a&gt; for detailed information about the supported development environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69fb83e92c1f79f960bcc24dd540282df982418a" translate="yes" xml:space="preserve">
          <source>With Qt version 4.3 or higher, clipboard changes made by other applications will only be detected when the application is activated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0055b7bd0044bac2582ebd0bfa65dec57fe1df3" translate="yes" xml:space="preserve">
          <source>With a scroll bar policy of &lt;a href=&quot;qt#ScrollBarPolicy-enum&quot;&gt;Qt::ScrollBarAsNeeded&lt;/a&gt; (the default), &lt;a href=&quot;qabstractscrollarea&quot;&gt;QAbstractScrollArea&lt;/a&gt; shows scroll bars when they provide a non-zero scrolling range, and hides them otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b86fde7c459bcbfcfa267a5ff9e215a585397ef" translate="yes" xml:space="preserve">
          <source>With above definitions, &lt;code&gt;qmake&lt;/code&gt; invokes &lt;code&gt;qscxmlc&lt;/code&gt; to generate MyStatemachine.h and MyStatemachine.cpp, and adds them to &lt;a href=&quot;qmake-variable-reference#headers&quot;&gt;HEADERS&lt;/a&gt; and &lt;a href=&quot;qmake-variable-reference#sources&quot;&gt;SOURCES&lt;/a&gt; variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f3b749f81d01b2b5e2f0a5d8e087a29b49e2f8" translate="yes" xml:space="preserve">
          <source>With above, the output goes to &lt;code&gt;&amp;lt;outputdir&amp;gt;/html&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15a21b29363c3b39cc0f6c7ee308ae9c4564e0b" translate="yes" xml:space="preserve">
          <source>With asynchronous method invocations, the parameters must be of types that are known to Qt's meta-object system, because Qt needs to copy the arguments to store them in an event behind the scenes. If you try to use a queued connection and get the error message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6de4d619d9110413879a282b274cd1a66b256e9" translate="yes" xml:space="preserve">
          <source>With every new key pressed, the input method will try to create a matching string for the text typed so far called preedit string. While the input context is active, the user can only move the cursor inside the string belonging to this input context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673d6b13ddc2d912706385fe78fc3d71c3d6e826" translate="yes" xml:space="preserve">
          <source>With exception of stretch this property is honored by all &lt;a href=&quot;qheaderview#ResizeMode-enum&quot;&gt;resize modes&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41df9982939bf1be88fb0cdd6e6ef7ea4641826a" translate="yes" xml:space="preserve">
          <source>With focusOnTouch switched off, &lt;a href=&quot;qgraphicsscene&quot;&gt;QGraphicsScene&lt;/a&gt; behaves as one would expect on &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821e71fdf72d781b71a1fbea52fb1d4c3002eb2f" translate="yes" xml:space="preserve">
          <source>With kinetic scrolling, the user can push the widget in a given direction and it will continue to scroll in this direction until it is stopped either by the user or by friction. Aspects of inertia, friction and other physical concepts can be changed in order to fine-tune an intuitive user experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b879995b4ecf5982d1f676e0d66843140979c2b" translate="yes" xml:space="preserve">
          <source>With named binding, the bound values can be examined in the following ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51146c030055b1726d8afea222699007093e9f63" translate="yes" xml:space="preserve">
          <source>With one exception, once an &lt;a href=&quot;qxmlstreamreader#error&quot;&gt;error&lt;/a&gt;() is reported by readNext(), further reading of the XML stream is not possible. Then &lt;a href=&quot;qxmlstreamreader#atEnd&quot;&gt;atEnd&lt;/a&gt;() returns &lt;code&gt;true&lt;/code&gt;, &lt;a href=&quot;qxmlstreamreader#hasError&quot;&gt;hasError&lt;/a&gt;() returns &lt;code&gt;true&lt;/code&gt;, and this function returns &lt;a href=&quot;qxmlstreamreader#TokenType-enum&quot;&gt;QXmlStreamReader::Invalid&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aad0cbd983b7614d584843441c029b9cbdb475f" translate="yes" xml:space="preserve">
          <source>With pointer devices, however, it might be desired to show a tool tip as a result of hovering a button for a while. The following example presents how to show a tool tip after hovering a button for a second, and hide it after a timeout of five seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07b9a0650c08801fb3ee24f13888eb52c25da23" translate="yes" xml:space="preserve">
          <source>With positional binding, the code becomes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350e0215a00adf00788271d9e8529f364e45277e" translate="yes" xml:space="preserve">
          <source>With queued connections, the parameters must be of types that are known to Qt's meta-object system, because Qt needs to copy the arguments to store them in an event behind the scenes. If you try to use a queued connection and get the error message:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a070bcffff40c5594afefafc985c9414a6eb90" translate="yes" xml:space="preserve">
          <source>With some IR sensors, it is quite uncommon to reach the top and the bottom of the value range, and some parts of the range ends might not be obtainable at all. This is due to the behavior of the sensor hardware. With these sensors, the absolute value of reflectance should never be used directly. Instead, applications should react to the relative change of the reading values. Use &lt;a href=&quot;qproximitysensor&quot;&gt;QProximitySensor&lt;/a&gt; if it is only necessary to check if something is close to the device or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ed663ad7aa47554249fed415db68eab6505978" translate="yes" xml:space="preserve">
          <source>With that in place, we can run our example. To tell the application to use our new style, we pass &lt;code&gt;-style :/mystyle&lt;/code&gt; as an application argument, but there are &lt;a href=&quot;qtquickcontrols2-styles#using-styles-in-qt-quick-controls-2&quot;&gt;many ways&lt;/a&gt; to specify the style to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fbed55f199978b95bb8be9cfaa32f1145085ad9" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;desktop&lt;/code&gt; option, Qt uses the OpenGL installed on Windows, requiring that the OpenGL in the target Windows machine is compatible with the application. The &lt;code&gt;-opengl&lt;/code&gt; option accepts two versions of OpenGL ES, &lt;code&gt;es2&lt;/code&gt; for OpenGL ES 2.0 or &lt;code&gt;es1&lt;/code&gt; for OpenGL ES Common Profile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe042905e84c3d5fdcfaa8645b39f1c47f0fbe13" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;dynamic&lt;/code&gt; option, Qt will try to use native OpenGL first. If that fails, it will fall back to ANGLE and finally to software rendering in case of ANGLE failing as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c564f0cac53211709d0377812b2fa7ac34743fe" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;evdev&lt;/code&gt; backend, to explicitly specify the input device to use, set the environment variable &lt;code&gt;QT_GAMEPAD_DEVICE&lt;/code&gt; to the desired /dev/input/event* node. This should not be needed normally, but can be useful in case multiple gamepads are connected and only one of them is interesting to the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c4f9b7a9a12ad19f18e25c2d90f8b83e221b8ab" translate="yes" xml:space="preserve">
          <source>With the Maps API we can associate a position with a map in various formats supplied by a backend. Then the Places API could be used to populate places on the Map or even specify the current position as a place of interest and associate it with an icon, contact details and other information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3dd1511bb2506b5f01cd151fa5a1a2f06d1da5" translate="yes" xml:space="preserve">
          <source>With the Qt XML classes elements and attributes can be accessed in two ways: either by referring to their qualified names consisting of the namespace prefix and the &quot;real&quot; name (or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02e908cf412444190b61dcfbc88106e96789821" translate="yes" xml:space="preserve">
          <source>With the Sensor Gestures classes, you are able to easily utilize device gesturing using sensors, such as the accelerometer and proximity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869c294776bf9a426f97c9fa13c232b465ef28f4" translate="yes" xml:space="preserve">
          <source>With the above definitions, you can use a drop-in replacement for moc if one is available. The command is executed on all arguments given to the &lt;code&gt;NEW_HEADERS&lt;/code&gt; variable (from the &lt;code&gt;input&lt;/code&gt; member), and the result is written to the file defined by the &lt;code&gt;output&lt;/code&gt; member. This file is added to the other source files in the project. Additionally, qmake will execute &lt;code&gt;depend_command&lt;/code&gt; to generate dependency information, and place this information in the project as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b9763b1026f4efa2f3149590e32e26be57dc85" translate="yes" xml:space="preserve">
          <source>With the above shader program active, we can draw a green triangle as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8416fc42b96313b2b8aac317a84d59f62596f044" translate="yes" xml:space="preserve">
          <source>With the addition of the &lt;a href=&quot;bearer-management#&quot;&gt;Bearer Management&lt;/a&gt; API to Qt 4.7 &lt;a href=&quot;qnetworkaccessmanager&quot;&gt;QNetworkAccessManager&lt;/a&gt; gained the ability to manage network connections. &lt;a href=&quot;qnetworkaccessmanager&quot;&gt;QNetworkAccessManager&lt;/a&gt; can start the network interface if the device is offline and terminates the interface if the current process is the last one to use the uplink. Note that some platforms utilize grace periods from when the last application stops using a uplink until the system actually terminates the connectivity link. Roaming is equally transparent. Any queued/pending network requests are automatically transferred to the new access point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00822784ce3826dcb93570b51ca52a383b8f6c0b" translate="yes" xml:space="preserve">
          <source>With the advent of the new HKSCS-2001 standard, James Su &amp;lt;suzhe@turbolinux.com.cn&amp;gt; &amp;lt;suzhe@gnuchina.org&amp;gt; generated the Big5-HKSCS&amp;lt;-&amp;gt;Unicode tables with a very space-efficient algorithm. He generously donated his code to glibc in May 2002. Subsequently, James has generously allowed Anthony Fok to adapt the code for Qt-3.0.5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34745d4b077570a08254cc752de60ff0f7330755" translate="yes" xml:space="preserve">
          <source>With the code above, the focus jumps to the Name field when the user presses Alt+N, and to the Phone field when the user presses Alt+P.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81038844e7a8b209f37aea7424f73ec83d1621b0" translate="yes" xml:space="preserve">
          <source>With the default options, the resulting &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; can be passed back to a &lt;a href=&quot;qurl&quot;&gt;QUrl&lt;/a&gt; later on, but any password that was present initially will be lost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b06f1a1c686c3d07d35c0610bcd1bd5cb38bd9" translate="yes" xml:space="preserve">
          <source>With the exception of extrusion and data driven style properties, every property described at the &lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/style-spec/&quot;&gt;Mapbox Style Specification&lt;/a&gt; can be changed at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e8eb7da73c7c3aa1b5265e6b3dba6817c1a8a76" translate="yes" xml:space="preserve">
          <source>With the general QDoc configuration variables, you can define where QDoc will find the various source files it needs to generate the documentation, as well as the directory to put the generated documentation. You can also do some minor manipulation of QDoc itself, controlling its output and processing behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4630d50555ff84b84eb4d30fe9f9b8852a94a553" translate="yes" xml:space="preserve">
          <source>With the menu bar and the toolbars in place, it's time to populate them with actions. New actions for both menus and toolbars are created in the action editor window, simplifying the creation and management of actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba8beaa5ccb89224ebb1e5279efd4bf120446ce" translate="yes" xml:space="preserve">
          <source>With the release of Qt 5.0, Qt no longer contains its own window system implementation: QWS is no longer a supported platform. For single-process use cases, the &lt;a href=&quot;qpa#&quot;&gt;Qt Platform Abstraction&lt;/a&gt; is a superior solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226eafcb0be655108e453892716e9262e96c694f" translate="yes" xml:space="preserve">
          <source>With the string-based syntax, parameter types are explicitly specified. As a result, the desired instance of an overloaded signal or slot is unambiguous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df559dccd3615f39a3779064c769730d95d87094" translate="yes" xml:space="preserve">
          <source>With this addition to the &lt;code&gt;CONFIG&lt;/code&gt; variable, qmake will search the locations listed above for the &lt;code&gt;myfeatures.prf&lt;/code&gt; file after it has finished parsing your project file. On Unix systems, it will look for the following file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff9e75675058b679f2eb7be7099aa17fe657039" translate="yes" xml:space="preserve">
          <source>With this approach, references to objects are &quot;pulled&quot; from QML. The problem with this is that the C++ logic layer depends on the QML presentation layer. If we were to refactor the QML in such a way that the &lt;code&gt;objectName&lt;/code&gt; changes, or some other change breaks the ability for the C++ to find the QML object, our workflow becomes much more complicated and tedious.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2ab919194cff8766a6dcde52f34360c2fe234f" translate="yes" xml:space="preserve">
          <source>With this approach, the C++ remains unchanged in the event that the QML needs to be refactored in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d72e55e5902cdbd34e9a240ea81a0531c6f03eb" translate="yes" xml:space="preserve">
          <source>With this in mind, a good way to prepare for a migration to Qt Quick Controls 2 is to place each control that you have a custom style for in its own QML file. For example, the Qt Quick Controls 1 button above could be moved to a file named &lt;code&gt;Button.qml&lt;/code&gt; in a directory named &lt;code&gt;controls&lt;/code&gt;, and used in the following manner:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44a27f1ba83491906b0359bf1a34061110759e5" translate="yes" xml:space="preserve">
          <source>With this in place, your application's UI should scale depending on the display resolution on offer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aaeb06eee8c7d2b3530ca50f98a4f7d9f67617d" translate="yes" xml:space="preserve">
          <source>With this method the web channel can be accessed by web page content. If the content is not under your control and might be hostile, this could be a security issue and you should consider installing it in a private JavaScript world.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71904030ea175c80ffb79064c7c063e94b75ebe" translate="yes" xml:space="preserve">
          <source>With this syntax, the function returns a &lt;a href=&quot;qdebug&quot;&gt;QDebug&lt;/a&gt; object that is configured to use the &lt;a href=&quot;qtglobal#QtMsgType-enum&quot;&gt;QtDebugMsg&lt;/a&gt; message type. It automatically puts a single space between each item, and outputs a newline at the end. It supports many C++ and Qt types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e6570fb10b890d1ae82341959ca9e59abf00b3" translate="yes" xml:space="preserve">
          <source>With this syntax, the function returns a &lt;a href=&quot;qdebug&quot;&gt;QDebug&lt;/a&gt; object that is configured to use the &lt;a href=&quot;qtglobal#QtMsgType-enum&quot;&gt;QtInfoMsg&lt;/a&gt; message type. It automatically puts a single space between each item, and outputs a newline at the end. It supports many C++ and Qt types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab50a0c6987873a38799562140997c8acee97a9b" translate="yes" xml:space="preserve">
          <source>With those files available, you would select a different file on the android platform, but only if the locale was en_GB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="866895372c80b4bdd3e62c8aef9547035f4c98ee" translate="yes" xml:space="preserve">
          <source>Within a QDoc comment, &lt;code&gt;//!&lt;/code&gt; is used as a single-line documentation comment; the comment itself and anything after it, until a newline, is omitted from the generated output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655a9796e8fb878a317a5f67cf23c2b1dbd01fee" translate="yes" xml:space="preserve">
          <source>Within a left-to-right text block, decrease cursor position when pressing left arrow key, increase cursor position when pressing the right arrow key. If the text block is right-to-left, the opposite behavior applies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be4fc252023b47779487c38f81570875da113b8" translate="yes" xml:space="preserve">
          <source>Within a mouse-driven interface, this signal is emitted when a mouse pointer passes over a link, corresponding to the &lt;code&gt;mouseover&lt;/code&gt; DOM event. This event may also occur in touch interfaces for &lt;code&gt;mouseover&lt;/code&gt; events that are not cancelled with &lt;code&gt;preventDefault()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b45d63a358e475e448bdb8871a6ca660c14056b" translate="yes" xml:space="preserve">
          <source>Within each area, different</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4059b684739705541b9624361d42e0f33def68e" translate="yes" xml:space="preserve">
          <source>Within each focus scope one object may have &lt;code&gt;Item::focus&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. If more than one &lt;a href=&quot;qml-qtquick-item&quot;&gt;Item&lt;/a&gt; has the &lt;code&gt;focus&lt;/code&gt; property set, the last type to set the &lt;code&gt;focus&lt;/code&gt; will have the focus and the others are unset, similar to when there are no focus scopes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b9b2e562bfe536134a9bb89d912ba8baa46477" translate="yes" xml:space="preserve">
          <source>Within the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2f4d425769454a3db62a8d6ae5b0475b3cf387" translate="yes" xml:space="preserve">
          <source>Within the FrameGraph tree, multiple &lt;a href=&quot;qml-qt3d-render-layerfilter&quot;&gt;LayerFilter&lt;/a&gt; nodes can be nested within a branch going from root to a leaf. In that case the filtering will first operate on all entities of the scene using the filtering method specified by the first declared &lt;a href=&quot;qml-qt3d-render-layerfilter&quot;&gt;LayerFilter&lt;/a&gt;. Then the filtered subset of entities will be filtered again based on the filtering method set on the second &lt;a href=&quot;qml-qt3d-render-layerfilter&quot;&gt;LayerFilter&lt;/a&gt; declared. This is then repeated until all &lt;a href=&quot;qml-qt3d-render-layerfilter&quot;&gt;LayerFilter&lt;/a&gt; nodes of the branch have been consumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6378d4ed60ae4d1598adb9c8f65226d0f664a289" translate="yes" xml:space="preserve">
          <source>Within the FrameGraph tree, multiple &lt;a href=&quot;qt3drender-qlayerfilter&quot;&gt;QLayerFilter&lt;/a&gt; nodes can be nested within a branch going from root to a leaf. In that case the filtering will first operate on all entities of the scene using the filtering method specified by the first declared &lt;a href=&quot;qt3drender-qlayerfilter&quot;&gt;QLayerFilter&lt;/a&gt;. Then the filtered subset of entities will be filtered again based on the filtering method set on the second &lt;a href=&quot;qt3drender-qlayerfilter&quot;&gt;QLayerFilter&lt;/a&gt; declared. This is then repeated until all &lt;a href=&quot;qt3drender-qlayerfilter&quot;&gt;QLayerFilter&lt;/a&gt; nodes of the branch have been consumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1655c0eb21a2e07ff5223d5d7a39472255fe5562" translate="yes" xml:space="preserve">
          <source>Within the implementation file the &lt;a href=&quot;qqmlndefrecord#Q_DECLARE_NDEFRECORD&quot;&gt;Q_DECLARE_NDEFRECORD&lt;/a&gt;() macro is expanded:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d3f618935511b0a4e3b6291004128f0039ca294" translate="yes" xml:space="preserve">
          <source>Within the resource browser, you can open existing resource files or create new ones. Click the &lt;b&gt;Edit Resources&lt;/b&gt; button</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0ff9bb6c4a4970594fa0fdf0f22196036ebd45" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;qt.conf&lt;/code&gt;, the Qt libraries will use the hard-coded paths to look for plugins, translations, and so on. These paths may not exist on the target system, or they may not be accessible. Because of this, you may need &lt;code&gt;qt.conf&lt;/code&gt; to make the Qt libraries look elsewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee6616a467cabc3f56d67dc3644d1c21d753d74" translate="yes" xml:space="preserve">
          <source>Without Frameworks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906a78d63fe98ad9fae7ceb3b7edb990374fbacd" translate="yes" xml:space="preserve">
          <source>Without Qt XML Patterns, there is no simple way to solve this kind of problem. You might do it by writing a C++ program to traverse the file system, sniff out all the XML files, and submit each one to an XML parser to test that it contains valid XML. The C++ code required to write that program will probably be more complex than the C++ code required to subclass &lt;a href=&quot;qabstractxmlnodemodel&quot;&gt;QAbstractXmlNodeModel&lt;/a&gt;, but even if the two are comparable, your custom C++ program can be used only for that one task, while your custom XML node model can be used by any XQuery that must navigate the file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe06ce141a1168cf6c190a0812c8b6234dbf41b7" translate="yes" xml:space="preserve">
          <source>Without a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ba514d88ce37a6cb5e299bbd770c963f3f1977" translate="yes" xml:space="preserve">
          <source>Without any caching, performance may drop significantly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f455544383fd6a5e1f4485e57cf34557ce7ae9" translate="yes" xml:space="preserve">
          <source>Without further delay, we present the widget walkthrough; each widget has its own sub-section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50655f37469a7bfe19c443ecfe5a49e929d9b820" translate="yes" xml:space="preserve">
          <source>Without the call to &lt;code&gt;isPolishScheduled()&lt;/code&gt; above, the call to &lt;code&gt;waitForItemPolished()&lt;/code&gt; might see that no polish was scheduled and therefore pass instantly, assuming that the item had already been polished. This function makes it obvious why an item wasn't polished and allows tests to fail early under such circumstances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06ecaacf74a50b9553cf59bf5d4e2830ceb1666" translate="yes" xml:space="preserve">
          <source>Without the call to &lt;code&gt;qIsPolishScheduled()&lt;/code&gt; above, the call to &lt;code&gt;qWaitForItemPolished()&lt;/code&gt; might see that no polish was scheduled and therefore pass instantly, assuming that the item had already been polished. This function makes it obvious why an item wasn't polished and allows tests to fail early under such circumstances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0824512bccf109ba84fe616af5c0dcdf35ac9ca8" translate="yes" xml:space="preserve">
          <source>Without the guidance in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0a02a4fd557e1f5547ba09fc6d37a119fe72d1" translate="yes" xml:space="preserve">
          <source>Without this, a generic &quot;Game is not a type&quot; message would be given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3193c510cba9467bc667c00acf704c64431c62ee" translate="yes" xml:space="preserve">
          <source>Wizard Look and Feel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dcef5ebea03ffa0dd22c9949dde2011e5628e41" translate="yes" xml:space="preserve">
          <source>Wizards consist of a sequence of &lt;a href=&quot;qwizardpage&quot;&gt;QWizardPage&lt;/a&gt;s. At any time, only one page is shown. A page has the following attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6261b0f092158c08397020cfc1dbbc29f7e922b" translate="yes" xml:space="preserve">
          <source>WlScaler (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57bdbc1f007e6605e0c904fc272441772cf025c" translate="yes" xml:space="preserve">
          <source>WlScaler QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b36481f2d528b274ee4ef8ded9960891eb760e" translate="yes" xml:space="preserve">
          <source>WlShell (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6668b0bfe96f711b449cdfda3749bc2ecf51c24" translate="yes" xml:space="preserve">
          <source>WlShell QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fc3ffb9c689fcc91fe318023d6cbe1e725cf51" translate="yes" xml:space="preserve">
          <source>WlShell.wlShellSurfaceCreated()</source>
          <target state="translated">WlShell.wlShellSurfaceCreated()</target>
        </trans-unit>
        <trans-unit id="ef822dc8547db076895749545273aa5a0d42d135" translate="yes" xml:space="preserve">
          <source>WlShell.wlShellSurfaceRequested()</source>
          <target state="translated">WlShell.wlShellSurfaceRequested()</target>
        </trans-unit>
        <trans-unit id="d2bfbfbbad3de59d0a961294644a89b410ef6d5a" translate="yes" xml:space="preserve">
          <source>WlShellSurface (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e110dc4896fac279d93e7506893b457acc985adf" translate="yes" xml:space="preserve">
          <source>WlShellSurface QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48fcc081e064624479ecf0c1711d6fc48798ea77" translate="yes" xml:space="preserve">
          <source>WlShellSurface.className</source>
          <target state="translated">WlShellSurface.className</target>
        </trans-unit>
        <trans-unit id="2cef914ef3792ac59c00673fa463e6e279d0e5b1" translate="yes" xml:space="preserve">
          <source>WlShellSurface.initialize()</source>
          <target state="translated">WlShellSurface.initialize()</target>
        </trans-unit>
        <trans-unit id="1b6436e9c64dc8f3894eab1f20a93739c4e013c3" translate="yes" xml:space="preserve">
          <source>WlShellSurface.ping()</source>
          <target state="translated">WlShellSurface.ping()</target>
        </trans-unit>
        <trans-unit id="c1709f39c1328b38a0fd7548d86419ecc18e9844" translate="yes" xml:space="preserve">
          <source>WlShellSurface.sendConfigure()</source>
          <target state="translated">WlShellSurface.sendConfigure()</target>
        </trans-unit>
        <trans-unit id="ab0fe1c58fc6f74a085ce2f12576d1f032c82596" translate="yes" xml:space="preserve">
          <source>WlShellSurface.sendPopupDone()</source>
          <target state="translated">WlShellSurface.sendPopupDone()</target>
        </trans-unit>
        <trans-unit id="b7bf42c1307ac8700aebf1d11228f62d6a8f17fa" translate="yes" xml:space="preserve">
          <source>WlShellSurface.shell</source>
          <target state="translated">WlShellSurface.shell</target>
        </trans-unit>
        <trans-unit id="34313321892b7c04f1ccc13b6583e7b5f23187d5" translate="yes" xml:space="preserve">
          <source>WlShellSurface.surface</source>
          <target state="translated">WlShellSurface.surface</target>
        </trans-unit>
        <trans-unit id="d03be9356817ff47117f41e9d0285382e1f5fc71" translate="yes" xml:space="preserve">
          <source>WlShellSurface.title</source>
          <target state="translated">WlShellSurface.title</target>
        </trans-unit>
        <trans-unit id="bb56f0ba00293a640d27fdf80aaa35bf820d35f8" translate="yes" xml:space="preserve">
          <source>WlShellSurface.windowType</source>
          <target state="translated">WlShellSurface.windowType</target>
        </trans-unit>
        <trans-unit id="8ed9a26e1e0bd86a5734f7dbf8a8b38ec310f539" translate="yes" xml:space="preserve">
          <source>Word boundaries are there to locate the start and end of what a language considers to be a word (see &lt;a href=&quot;http://www.unicode.org/reports/tr29/#Word_Boundaries&quot;&gt;http://www.unicode.org/reports/tr29/#Word_Boundaries&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb253144836dfa990bb98ead2d4aef93472eac9f" translate="yes" xml:space="preserve">
          <source>Word by word. &lt;a href=&quot;qtextstream&quot;&gt;QTextStream&lt;/a&gt; supports streaming into &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;s, &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;s and char* buffers. Words are delimited by space, and leading white space is automatically skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b40db3a882cfd89240242a70c035356550f54ada" translate="yes" xml:space="preserve">
          <source>Word size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536af22c45db1729570f13631c85a76152e074f4" translate="yes" xml:space="preserve">
          <source>Word spacing changes the default spacing between individual words. A positive value increases the word spacing by a corresponding amount of pixels, while a negative value decreases the inter-word spacing accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0069fab6f922d3e5cfb6199f7e1104d8cce60a16" translate="yes" xml:space="preserve">
          <source>Word spacing will not apply to writing systems, where indiviaul words are not separated by white space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b187a2614280ba9450d25073626d8391af19bcc" translate="yes" xml:space="preserve">
          <source>Worked Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0eaa4ff41e676dd00c44372e1378b130957c0e" translate="yes" xml:space="preserve">
          <source>Worker scripts that are plain JavaScript sources can not use &lt;a href=&quot;qtqml-javascript-imports#&quot;&gt;.import&lt;/a&gt; syntax. Scripts that are ECMAScript modules can freely use import and export statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a530934fe64bcc0a2fbc6b2eb19c8eee6434afd" translate="yes" xml:space="preserve">
          <source>WorkerScript</source>
          <target state="translated">WorkerScript</target>
        </trans-unit>
        <trans-unit id="fd088565fbfdd1fad6509f6f419e889c510a50a2" translate="yes" xml:space="preserve">
          <source>WorkerScript (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60aef30910707ab83bafa6a514cd2497880e4524" translate="yes" xml:space="preserve">
          <source>WorkerScript QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abeebdfcd68a08212df1b2cd21546924ca0c33b3" translate="yes" xml:space="preserve">
          <source>WorkerScript.message()</source>
          <target state="translated">WorkerScript.message()</target>
        </trans-unit>
        <trans-unit id="ee6d6c2a7ca12046ee14ce7daff0c490de29eaa7" translate="yes" xml:space="preserve">
          <source>WorkerScript.sendMessage()</source>
          <target state="translated">WorkerScript.sendMessage()</target>
        </trans-unit>
        <trans-unit id="8ae9f004765542d8e99218e39c3301c815ffc5c5" translate="yes" xml:space="preserve">
          <source>WorkerScript.source</source>
          <target state="translated">WorkerScript.source</target>
        </trans-unit>
        <trans-unit id="742a795cfcef09d5fca0078214b531040466c57e" translate="yes" xml:space="preserve">
          <source>WorkerScript: Threading in QML</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c016b2ba62db10eb134f62dc27e219f5ec415800" translate="yes" xml:space="preserve">
          <source>Working With Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3179360576d4f619d5134d86c6b5cd815bbfd34" translate="yes" xml:space="preserve">
          <source>Working with the DOM Tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621c48ea175f57750086ad2674043c3857f9d3bf" translate="yes" xml:space="preserve">
          <source>Works on the given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aac26a929704d6521e46edde532ac2f089520c5" translate="yes" xml:space="preserve">
          <source>World normal vector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39283cfe47115a1783c04e50be8df740ad417973" translate="yes" xml:space="preserve">
          <source>World position vector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30292f5fea8a2145e412ec1542b2e1882d60b1db" translate="yes" xml:space="preserve">
          <source>Worst case</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd381ce6f1f7eec38158291208afc54d5c3e2c9" translate="yes" xml:space="preserve">
          <source>WrappedEvent Class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7eaaeed34595d2de20d364a6b354ea80424d306" translate="yes" xml:space="preserve">
          <source>Wrapper Example (ActiveQt)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe8f9d6986840fa95d881f4a793e9f8f307cbce" translate="yes" xml:space="preserve">
          <source>Wrapping Functions that Take Multiple Arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38931fb06cd5db1a403cd002c454f6ea82391f8f" translate="yes" xml:space="preserve">
          <source>Wraps a sequence of OpenGL timer query objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c2cbec6a0515b86f70bcf27bf4340409ef4863" translate="yes" xml:space="preserve">
          <source>Wraps an OpenGL Vertex Array Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a4a67a605d671d3c9e35eeee30225ef4cb4999" translate="yes" xml:space="preserve">
          <source>Wraps an OpenGL debug message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a08856ef68ab0ac7fc717cf91ad30fbae25ec50" translate="yes" xml:space="preserve">
          <source>Wraps an OpenGL timer query object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20d8fb713c2bebd0f6fd23a09cb0ecf5e285d04" translate="yes" xml:space="preserve">
          <source>Wraps the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cacfd6c2f56b1eb4a8993bf9bd456057d52e65f" translate="yes" xml:space="preserve">
          <source>Wraps the provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794b3c2fc0395934b72694e2ebb596cae40240be" translate="yes" xml:space="preserve">
          <source>Wraps the signed 64-bit integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b7b9a4d5c7c2785fa3b6a073dee1962e436c2c" translate="yes" xml:space="preserve">
          <source>Wraps the unsigned 64-bit integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2726a3cc1f75c60b0eea1512f91412b9226ed7" translate="yes" xml:space="preserve">
          <source>Write a project file for the plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94435f8e44b2a5ffbbe9a1a051a7fa8d40a1b104" translate="yes" xml:space="preserve">
          <source>Write access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47bea6187853239b43a7df6e6565f510705cc425" translate="yes" xml:space="preserve">
          <source>Write notifiers should normally be disabled immediately after the &lt;a href=&quot;qsocketnotifier#activated&quot;&gt;activated&lt;/a&gt;() signal has been emitted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196da289028b4498c4230c282ac726baee2c7c18" translate="yes" xml:space="preserve">
          <source>Write output to &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; instead of to standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1677c9974625fb733a6e7d18d261c338123d2eb9" translate="yes" xml:space="preserve">
          <source>Write output to &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; rather than to standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4380a30052d4a8f446c61d3532f27cb3d17c499a" translate="yes" xml:space="preserve">
          <source>Write output to &lt;code&gt;file&lt;/code&gt; rather than to stdout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0516381df102bdc8fd4d44567b9570494009851" translate="yes" xml:space="preserve">
          <source>Write the infinite loop directly within a reimplementation of &lt;a href=&quot;qthread#run&quot;&gt;QThread::run&lt;/a&gt;(). Start the thread without an event loop. Let the thread emit signals to send data back to the GUI thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2fd1bfd74950a812a75e4a180064e84381952f" translate="yes" xml:space="preserve">
          <source>Write-functions for properties and other methods exposed by the object's IDispatch implementation can be called directly using &lt;a href=&quot;qaxbase#dynamicCall&quot;&gt;dynamicCall&lt;/a&gt;(), or indirectly as slots connected to a signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f435830a7c07f19c4072a88821b38028c3f69e6" translate="yes" xml:space="preserve">
          <source>Writer</source>
          <target state="translated">Writer</target>
        </trans-unit>
        <trans-unit id="9b1ff2c96b99a1589923943cfd2a6cdcf1069090" translate="yes" xml:space="preserve">
          <source>Writes</source>
          <target state="translated">Writes</target>
        </trans-unit>
        <trans-unit id="b4a786c4f503771378428ac21d1d348d83bb86f1" translate="yes" xml:space="preserve">
          <source>Writes '\n' to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9d6bb1dff6b3764973ce7e888aff8e19afc028" translate="yes" xml:space="preserve">
          <source>Writes a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f6276a9a8fd05d95d9c29a38c113d4a5a40008" translate="yes" xml:space="preserve">
          <source>Writes a DTD section. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b00d045983c21e0a0a40e9b6adf849d539ae71" translate="yes" xml:space="preserve">
          <source>Writes a boolean value,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bc5d991bad2a7cac10d8e660eb6f3a840c80e8" translate="yes" xml:space="preserve">
          <source>Writes a character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a5b980180de0679b78f6ef236213db1c71d0fd" translate="yes" xml:space="preserve">
          <source>Writes a default namespace declaration for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73198573b4090514b896debe977652abb8445db" translate="yes" xml:space="preserve">
          <source>Writes a document start with XML version number &quot;1.0&quot;. This also writes the encoding information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773ef9d025ac8769b1894de2a4cef0333b9be400" translate="yes" xml:space="preserve">
          <source>Writes a document start with the XML version number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45852bea0a29912e77ce6e5a46d87f40bb140f46" translate="yes" xml:space="preserve">
          <source>Writes a floating point number,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2354ea0a821dbe565013bdc6bb0ce0a41b1e8f6" translate="yes" xml:space="preserve">
          <source>Writes a namespace declaration for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152024cfbf53d328526c2e972003878921be4566" translate="yes" xml:space="preserve">
          <source>Writes a pointer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4162505effa940040087d70422544a8376612bc6" translate="yes" xml:space="preserve">
          <source>Writes a signed 16-bit integer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="508d87035ba2a3ef7487d36f2dd10c2f87d1a1b4" translate="yes" xml:space="preserve">
          <source>Writes a signed 32-bit integer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bce505ab35ce7fcccbe431f7d8d57ea5b3ab526" translate="yes" xml:space="preserve">
          <source>Writes a signed 64-bit integer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5040197ec3845b4c48ec78a4a5048d60fdd5830" translate="yes" xml:space="preserve">
          <source>Writes a signed byte,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540a671861c4f11d57542891dfd13a13299eec15" translate="yes" xml:space="preserve">
          <source>Writes a space character to the debug stream and returns a reference to the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e5afec4114370f38c765bdfaa32e56241dc335" translate="yes" xml:space="preserve">
          <source>Writes a space character to the debug stream, depending on the current setting for automatic insertion of spaces, and returns a reference to the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b771e2a6de0a7b6f18ba395aa32888371ffa6f53" translate="yes" xml:space="preserve">
          <source>Writes a start element with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f613343e23a1720f7274d518ed4d10dec77ea3fb" translate="yes" xml:space="preserve">
          <source>Writes a text element with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae99a4d81a3df6807235ed0cf880561ad79c7f02" translate="yes" xml:space="preserve">
          <source>Writes an XML processing instruction with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="668b21ea217e458f679fe4225b47d73d5b0d9e96" translate="yes" xml:space="preserve">
          <source>Writes an attribute with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a876f72f78fef82db4fb2a67dd39dc229fdc7836" translate="yes" xml:space="preserve">
          <source>Writes an empty element with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c960a2a3fe7c550d09abb3429b7db88cd6712d" translate="yes" xml:space="preserve">
          <source>Writes an empty element with qualified name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc51c29ab2fec69d1f4e98685528b253eb49681e" translate="yes" xml:space="preserve">
          <source>Writes an picture to an IO device and returns &lt;code&gt;true&lt;/code&gt; if the picture was successfully written; otherwise returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a7248073d948f111e2b9f094c4f1e78903b6fd8" translate="yes" xml:space="preserve">
          <source>Writes an unsigned 16-bit integer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1fdbd3718dadf4e3da8b0eacc4c5ac15013057c" translate="yes" xml:space="preserve">
          <source>Writes an unsigned 64-bit integer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc2728d94227ebe5104c6973a020e610e8510e3" translate="yes" xml:space="preserve">
          <source>Writes an unsigned byte,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f93bfcb2ba8deb677e9b7923c56809714b15c1b" translate="yes" xml:space="preserve">
          <source>Writes an unsigned integer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46803c135d0161bd80c1a44d40fea224a23f27dd" translate="yes" xml:space="preserve">
          <source>Writes any unsaved changes to permanent storage, and reloads any settings that have been changed in the meantime by another application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261e06b81f447d43362f247a2f46e5489ffe1599" translate="yes" xml:space="preserve">
          <source>Writes any unsaved changes to the list model after it has been modified from a worker script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d04df05fafbcb24f160fe8505cc6f83111699d" translate="yes" xml:space="preserve">
          <source>Writes at most</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cccbf23cef6f041d8d50ea6bc908a479736c7208" translate="yes" xml:space="preserve">
          <source>Writes bit array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acdafa57f52718e28bf0395ba382200abb51e6f0" translate="yes" xml:space="preserve">
          <source>Writes byte array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b513ccbafa855d3e8e9e01ae0e1f2a0c42d0d6c2" translate="yes" xml:space="preserve">
          <source>Writes data from a zero-terminated string of 8-bit characters to the device. Returns the number of bytes that were actually written, or -1 if an error occurred. This is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="002532affcf786aa7846706a5c59a908d042efc7" translate="yes" xml:space="preserve">
          <source>Writes data to the Modbus server. A Modbus server has four tables (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f289689677bc02356445e2e37df23900682b50b" translate="yes" xml:space="preserve">
          <source>Writes host address</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f78bde746999e31fbd7879ace8159887c41d296" translate="yes" xml:space="preserve">
          <source>Writes margin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b698df4241e85beac23e7602d7a2b8437b9ee499" translate="yes" xml:space="preserve">
          <source>Writes output to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e913475a6d22f443a10f1f90df4cc1f3a81243b" translate="yes" xml:space="preserve">
          <source>Writes picture</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d056a7f3e66edf63222271ff0283268d642e29" translate="yes" xml:space="preserve">
          <source>Writes the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43af035c4cfc2fda929ea76d5352224186a600e4" translate="yes" xml:space="preserve">
          <source>Writes the '\0'-terminated string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16faa087fd3c01feb5f9b5bd086c9c5ee760b8f" translate="yes" xml:space="preserve">
          <source>Writes the '\0'-terminated string,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7ff1554bb80fca10f0ec9812cb0f578ad12e32" translate="yes" xml:space="preserve">
          <source>Writes the 32-bit floating point number,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ebab39f9d4124f5e5aa416a9f8282c948a6fc32" translate="yes" xml:space="preserve">
          <source>Writes the 64-bit floating point number,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b226bdb4ced9c17cc00d69ae21eb46d4ebaf8d37" translate="yes" xml:space="preserve">
          <source>Writes the &lt;a href=&quot;qstandarditem&quot;&gt;QStandardItem&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f0c512209c740e3e55cddd6cb7918885545149" translate="yes" xml:space="preserve">
          <source>Writes the IDL of the server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99893e10d55f40d59784ad1328f47129762dd26" translate="yes" xml:space="preserve">
          <source>Writes the Modbus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e302fcdbc574ebe24baaf0c8e4d03381b6a1bb" translate="yes" xml:space="preserve">
          <source>Writes the NDEF messages in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2091b58bf7a401d72ac23d54b526bafd45448f0b" translate="yes" xml:space="preserve">
          <source>Writes the UTF-16 character,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a51328fea6bd74f0194005b05676cf9c21ee41" translate="yes" xml:space="preserve">
          <source>Writes the UTF-32 character,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf8c931ce0bb439c607f3c6d5335613678e46c3" translate="yes" xml:space="preserve">
          <source>Writes the UUID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d844a561d39794abea9541fd749a4ca3aa06c97" translate="yes" xml:space="preserve">
          <source>Writes the XML representation of the node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba55821275bc711a775d68fb76c343185ccc1804" translate="yes" xml:space="preserve">
          <source>Writes the XML representation of the node and all its children to the stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5173c10eb48e0a33829e8fefd212ad18f96a4ac5" translate="yes" xml:space="preserve">
          <source>Writes the attribute vector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92ac49cc6e1e06e1203df9c1c39fe4631a557e1" translate="yes" xml:space="preserve">
          <source>Writes the boolean value,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8ce9bc2bf943c4e56b92f4aeb46bce824f5079" translate="yes" xml:space="preserve">
          <source>Writes the byte array,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eabdcce5a37343d15669dd0a8a27d7f0c3c26bf" translate="yes" xml:space="preserve">
          <source>Writes the char</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5ed1350394da87584845383c59220574f11a07" translate="yes" xml:space="preserve">
          <source>Writes the character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95c7cd5ed74557cf6688c0e07daaf3106209b6c" translate="yes" xml:space="preserve">
          <source>Writes the character,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cebbf60c7283546975d1fde748d2c05dc4ae43be" translate="yes" xml:space="preserve">
          <source>Writes the class declaration to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57bfbc2b100f93cfe347744d496538f65f16d252" translate="yes" xml:space="preserve">
          <source>Writes the constant string pointed to by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da1f6da0241609752aef03f7fa62f8de0ff41d8a" translate="yes" xml:space="preserve">
          <source>Writes the content of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a756d46a2606d6c1cfee2874270963dafb472ca8" translate="yes" xml:space="preserve">
          <source>Writes the contents of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9aac4bb0fa33787e49aad0d440828595ab12ef0" translate="yes" xml:space="preserve">
          <source>Writes the contents of list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4455433b3a272cb366fd2de8a75509c90ea87cb9" translate="yes" xml:space="preserve">
          <source>Writes the contents of this engine to the &lt;a href=&quot;qdatastream&quot;&gt;QDataStream&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="225094d8006c10feac488a2f085db566f995e1b0" translate="yes" xml:space="preserve">
          <source>Writes the contents of vector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2a15e81c0e8f17b21bea087a5ecae019073ed2" translate="yes" xml:space="preserve">
          <source>Writes the current state of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e7fc6a4984583b90e787495f318b8233b14f4f" translate="yes" xml:space="preserve">
          <source>Writes the document fragment specified by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1202ff3d8570c16d59f08c42a822a7f749e8880f" translate="yes" xml:space="preserve">
          <source>Writes the double</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8539c07605356fefcd816912e4149596c7a53d6c" translate="yes" xml:space="preserve">
          <source>Writes the elliptic curve</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db074d6b2e55c441f90e805e61bdebb1b7992759" translate="yes" xml:space="preserve">
          <source>Writes the entity reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1607f0bccf523ae63f85e68cc506e29039b0d6f" translate="yes" xml:space="preserve">
          <source>Writes the font</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222706c60e0585ba1aa8775e7a4cf4d25bf6dd83" translate="yes" xml:space="preserve">
          <source>Writes the given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32332afaaa1f943a3a4c0d4645b6baa62f0d9ab7" translate="yes" xml:space="preserve">
          <source>Writes the given painter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec66f337c2b02b2963a6f4c6dc35fa302445ab6" translate="yes" xml:space="preserve">
          <source>Writes the hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b48fc0824d4d6bc1024b1cefaa3ad9feea3e4f8" translate="yes" xml:space="preserve">
          <source>Writes the image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="032a4dd2b65f04b5882070e41371136821d7badf" translate="yes" xml:space="preserve">
          <source>Writes the integer number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81935d912a24085fba191cc34e12216471f1a6bd" translate="yes" xml:space="preserve">
          <source>Writes the item to stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6552638e45305f076491f7edb4cf9596dd754686" translate="yes" xml:space="preserve">
          <source>Writes the key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d228844ef2161824618452159a3af2b68ed53cd1" translate="yes" xml:space="preserve">
          <source>Writes the length specifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b94957d73f7086cd89426d9124187e94a6296a" translate="yes" xml:space="preserve">
          <source>Writes the linked list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a32e8386cbc1650b8ae46e9dc5b1bda1227562" translate="yes" xml:space="preserve">
          <source>Writes the list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58cbd55bbef64af3786753d81c071cf35a199251" translate="yes" xml:space="preserve">
          <source>Writes the list widget item</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11cab43f0fd82c472542be56160f7b8df2e0552e" translate="yes" xml:space="preserve">
          <source>Writes the map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943a1e5d359550395bfa1e550bb25e767a996b1a" translate="yes" xml:space="preserve">
          <source>Writes the match object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b97594b38fbf77f719a7d5f6adea237c0b8a5e" translate="yes" xml:space="preserve">
          <source>Writes the message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe59830ef4bcd2ecf82109dfa8a071eba2e9cc6" translate="yes" xml:space="preserve">
          <source>Writes the object pointed to by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f9e8a211c9a966d7f4541e3735b45af591d63b" translate="yes" xml:space="preserve">
          <source>Writes the pair</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5187adb708f018c1740eae35e2acf0dfc3dfcacb" translate="yes" xml:space="preserve">
          <source>Writes the palette,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bff2cc1ddde73b611f6078c2ea24fe0f2ed4a93" translate="yes" xml:space="preserve">
          <source>Writes the pattern options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc84328ed1e97d4b9296adb4fefe8237f9b0763" translate="yes" xml:space="preserve">
          <source>Writes the pointer tracked by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dea0c41c01128286534f3dcc69b8b9c4937b1fd" translate="yes" xml:space="preserve">
          <source>Writes the provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bddb6f616d55885ca9436c66cae99e76152bd5f" translate="yes" xml:space="preserve">
          <source>Writes the qlonglong</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d4598dfe7228f4b1656812ac98e7e7e00f97672" translate="yes" xml:space="preserve">
          <source>Writes the qulonglong</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e38f1aa77be7ee5502e2d903cbb6ee8ae83e21c" translate="yes" xml:space="preserve">
          <source>Writes the real number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889293f42a2022b881201a60cdfbb5830d468d1a" translate="yes" xml:space="preserve">
          <source>Writes the region</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d0dc7fdf1ca60e5ef54fed2b0b5fd279f534ac" translate="yes" xml:space="preserve">
          <source>Writes the regular expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3337d35c7ef43b0efcc870a2967ca85cefbf79f1" translate="yes" xml:space="preserve">
          <source>Writes the server's IDL to the specified file. The type library will have version x.y</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19b19f7c8d235b9b075e819068b67eca6b8633a" translate="yes" xml:space="preserve">
          <source>Writes the set of Diffie-Hellman parameters in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aac077604aa282b70dfc583eecc6ddf6b3a428f" translate="yes" xml:space="preserve">
          <source>Writes the severity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ead2b1002f5667562815e4f585a55bb3290cbbf1" translate="yes" xml:space="preserve">
          <source>Writes the signed 64-bit integer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b9a0fa6776b20b6d69d131d8eccb57573bb736" translate="yes" xml:space="preserve">
          <source>Writes the signed int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28dbb3c064c786a8bc537f88672d2a515397f830" translate="yes" xml:space="preserve">
          <source>Writes the signed integer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc6de7cffaa5d7b31fbf0853c6cdf202418ba5f" translate="yes" xml:space="preserve">
          <source>Writes the signed long</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1f0c776206594b0b6ceb65dab3974d36193110" translate="yes" xml:space="preserve">
          <source>Writes the signed long integer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86a7cf00c84f67d7e8edad1a97567b6b0927001" translate="yes" xml:space="preserve">
          <source>Writes the signed short integer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3df5d3867b2c6d23aa26ffee9a2bbbc65a7a6e" translate="yes" xml:space="preserve">
          <source>Writes the size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22bb1f0b8112426da03f2a0774b613dd2a71cf1b" translate="yes" xml:space="preserve">
          <source>Writes the source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfaa4ab797cc6812f709879b144cf2d06a598e79" translate="yes" xml:space="preserve">
          <source>Writes the string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e771e32b4dc041b8627ecb715da1eb1c35df38b" translate="yes" xml:space="preserve">
          <source>Writes the string view,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b84fd428fa3b663e3102bd8b8100acd55aa2a3c" translate="yes" xml:space="preserve">
          <source>Writes the string,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af33abba9d4dbcac8d96209a69443cc4a9ad8a8b" translate="yes" xml:space="preserve">
          <source>Writes the table widget item</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6ae9cbcf6751cc32a4d53a301cdde9ac6b0690" translate="yes" xml:space="preserve">
          <source>Writes the texture border color into the first four elements of the array pointed to by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d0205b1bcf274edff889a0c62e3e20245ab18f" translate="yes" xml:space="preserve">
          <source>Writes the tree widget item</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788c2d732547cf55a23a281364ca6e872d1a1f10" translate="yes" xml:space="preserve">
          <source>Writes the type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="145d2f7c1123081204cd3e1587a1f89b0c3e8b0b" translate="yes" xml:space="preserve">
          <source>Writes the unsigned int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d2f666cacf508f3812c0148d67514a78dde8f0" translate="yes" xml:space="preserve">
          <source>Writes the unsigned long</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b723ee219b1d7d1e85e9618e0be8a75242ac04" translate="yes" xml:space="preserve">
          <source>Writes the unsigned short</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c8a1505e957d439d1a972d904486d9c17d09d9" translate="yes" xml:space="preserve">
          <source>Writes the values of &lt;code&gt;variablename&lt;/code&gt; to a file with the name &lt;code&gt;filename&lt;/code&gt;, each value on a separate line. If &lt;code&gt;variablename&lt;/code&gt; is not specified, creates an empty file. If &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;append&lt;/code&gt; and the file already exists, appends to it instead of replacing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe42d65c24a7934ad2209f811aaa759328747e1" translate="yes" xml:space="preserve">
          <source>Writes the vector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1fd72a711ddaa5b912f95994f964de76a468f9" translate="yes" xml:space="preserve">
          <source>Writes the version number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="498fab632878e50fbd0bf02861ad4fef7ee07fec" translate="yes" xml:space="preserve">
          <source>Writes then unsigned 64-bit integer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6892c81df39097cab7fa18494eb6471b90da7c15" translate="yes" xml:space="preserve">
          <source>Writes then unsigned integer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4baa1c48b27d0ed1432b1ffbd802a3a5de83b469" translate="yes" xml:space="preserve">
          <source>Writes then unsigned long integer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17dfc1409067b67d9c847709d51d2fdeba54a677" translate="yes" xml:space="preserve">
          <source>Writes then unsigned short integer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5942a1aef15ef89b940c959eab8fe51c6697d64a" translate="yes" xml:space="preserve">
          <source>Writes up to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e42b6760f325866079129e54bcf7ae70dadf960" translate="yes" xml:space="preserve">
          <source>Writes url</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaa6468cd30d9d842ea9a46786aa401ad44de066" translate="yes" xml:space="preserve">
          <source>Write|Read</source>
          <target state="translated">Write|Read</target>
        </trans-unit>
        <trans-unit id="29f055e135597bcdc084a3a94070a10d076bcc22" translate="yes" xml:space="preserve">
          <source>Writing Custom Types to a Stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469b1f8873498de485e6c8f565f8f7d313eb6b92" translate="yes" xml:space="preserve">
          <source>Writing Documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef4b29e5dab91f312910e3670b761147a12b9996" translate="yes" xml:space="preserve">
          <source>Writing Make Rules for Invoking &lt;code&gt;moc&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875507c37e67131f5c33815a6836f224c904e859" translate="yes" xml:space="preserve">
          <source>Writing Portable Shaders</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7afa316d0704e1409580ccc58294f1b89d4a3e57" translate="yes" xml:space="preserve">
          <source>Writing Source Code for Translation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64b67494dcdc32f9bef58631be9df6229f11e72" translate="yes" xml:space="preserve">
          <source>Writing a Custom Layout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03d7974d29e2e7585188a29518eb954d5d496c3" translate="yes" xml:space="preserve">
          <source>Writing a SQL plugin is achieved by subclassing this base class, reimplementing the pure virtual function &lt;a href=&quot;qsqldriverplugin#create&quot;&gt;create&lt;/a&gt;(), and exporting the class with the &lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro. See the SQL plugins that come with Qt for example implementations (in the &lt;code&gt;plugins/src/sqldrivers&lt;/code&gt; subdirectory of the source distribution).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c522c9d8512934c6300f1beb33e3e19b9d3c2a76" translate="yes" xml:space="preserve">
          <source>Writing a audio plugin is achieved by subclassing this base class, reimplementing the pure virtual functions &lt;a href=&quot;qaudiosystemplugin#availableDevices&quot;&gt;availableDevices&lt;/a&gt;(), &lt;a href=&quot;qaudiosystemplugin#createInput&quot;&gt;createInput&lt;/a&gt;(), &lt;a href=&quot;qaudiosystemplugin#createOutput&quot;&gt;createOutput&lt;/a&gt;() and &lt;a href=&quot;qaudiosystemplugin#createDeviceInfo&quot;&gt;createDeviceInfo&lt;/a&gt;() then exporting the class with the &lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="becf9cc14b42e7a9b854ba702086f0f903eaf48b" translate="yes" xml:space="preserve">
          <source>Writing a icon engine plugin is achieved by subclassing this base class, reimplementing the pure virtual function &lt;a href=&quot;qiconengineplugin#create&quot;&gt;create&lt;/a&gt;(), and exporting the class with the &lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c187f718980ec1ffb275b1f30ca4a6c03873ca3" translate="yes" xml:space="preserve">
          <source>Writing a plugin involves these steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5277b29e19e389b13f36e85812eb20117c883b65" translate="yes" xml:space="preserve">
          <source>Writing a plugin that extends Qt itself is achieved by subclassing the appropriate plugin base class, implementing a few functions, and adding a macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5412023178caaadd5b04ef891a72f8fbfe24f7cc" translate="yes" xml:space="preserve">
          <source>Writing a style plugin is achieved by subclassing this base class, reimplementing the pure virtual &lt;a href=&quot;qstyleplugin#create&quot;&gt;create&lt;/a&gt;() function, and exporting the class using the &lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1bd1ff0c450ab1caff43ec3e071a5a613dfba7d" translate="yes" xml:space="preserve">
          <source>Writing an accessibility plugin is achieved by subclassing this base class, reimplementing the pure virtual function &lt;a href=&quot;qaccessibleplugin#create&quot;&gt;create&lt;/a&gt;(), and exporting the class with the &lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26bf6ad6c6020f5f4873d9ea9678c5594acae14" translate="yes" xml:space="preserve">
          <source>Writing an image I/O plugin is achieved by subclassing this base class, reimplementing the pure virtual functions &lt;a href=&quot;qimageioplugin#capabilities&quot;&gt;capabilities&lt;/a&gt;() and &lt;a href=&quot;qimageioplugin#create&quot;&gt;create&lt;/a&gt;(), and exporting the class with the &lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro. See &lt;a href=&quot;plugins-howto&quot;&gt;How to Create Qt Plugins&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed6af8a3a083a10466728d1f1afc199e3a3487d" translate="yes" xml:space="preserve">
          <source>Writing an picture format plugin is achieved by subclassing this base class, reimplementing the pure virtual functions &lt;a href=&quot;qpictureformatplugin#loadPicture&quot;&gt;loadPicture&lt;/a&gt;(), &lt;a href=&quot;qpictureformatplugin#savePicture&quot;&gt;savePicture&lt;/a&gt;(), and &lt;a href=&quot;qpictureformatplugin#installIOHandler&quot;&gt;installIOHandler&lt;/a&gt;(), and exporting the class with the &lt;a href=&quot;#Q_PLUGIN_METADATA&quot;&gt;Q_PLUGIN_METADATA&lt;/a&gt;() macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de6cb1fd38303e5e608ef4b1428fd02bf54c255" translate="yes" xml:space="preserve">
          <source>Writing axis steps using the longhand form with axis specifiers and node tests is semantically clear but syntactically verbose. The shorthand form is easy to learn and, once you learn it, just as easy to read. In the shorthand form, the axis specifier and node test are implied by the syntax. XQueries are normally written in the shorthand form. Here is a table of some frequently used shorthand forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d805905509ed856e82734c5f3408335202ab43" translate="yes" xml:space="preserve">
          <source>Writing cross-platform international software with Qt is a gentle, incremental process. Your software can become internationalized in the stages described in the following sections. For more information about internalizing Qt Quick application, see &lt;a href=&quot;qtquick-internationalization#&quot;&gt;Internationalization and Localization with Qt Quick&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71c2938c286d22ff60ff3d3a4d268ba18ec8c7b" translate="yes" xml:space="preserve">
          <source>Writing or reading from the device resulted in an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9dee0249af03911723455d5b554202517ccd7e2" translate="yes" xml:space="preserve">
          <source>Writing the Code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562b8762941efe82a0fd8cbac4b46bedbf14a326" translate="yes" xml:space="preserve">
          <source>Wu Yi &amp;lt;wuyi@hancom.com&amp;gt; ported the HKSCS-1999 QBig5hkscsCodec to Qt-3.0.1 in March 2002.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57634a456dec1dd5d1923105a9ef1676398ff473" translate="yes" xml:space="preserve">
          <source>X C Binding library</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f567d05b2bfdf094f84302e0adbb86851f7af932" translate="yes" xml:space="preserve">
          <source>X C Bindings for Fixes Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdaa78c179d81f0793f9764e63d76e04e11dfb61" translate="yes" xml:space="preserve">
          <source>X C Bindings for ICCCM Protocol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb07eb80f7b5b3d894f8a082ea053901a5a1540" translate="yes" xml:space="preserve">
          <source>X C Bindings for Render extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed2766ecf08c97ae7dcbcb02bdb8cb2bc8964ad" translate="yes" xml:space="preserve">
          <source>X C Bindings for Resize and Rotate Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a3ab3144424b57827a23c7deb798d8e06c42a6" translate="yes" xml:space="preserve">
          <source>X C Bindings for Shape extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc9c20d7a173db9da6e99b31684d8cdf967e0ae" translate="yes" xml:space="preserve">
          <source>X C Bindings for Shared Memory Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887b74e110fa0d0befa749483885b17677e3f0eb" translate="yes" xml:space="preserve">
          <source>X C Bindings for Sync Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381f4b64eab246bd64e6fc8ace5e5142def141b2" translate="yes" xml:space="preserve">
          <source>X Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c33d932eb71455a0ea9ed90786cf3e777a0894" translate="yes" xml:space="preserve">
          <source>X Rendering Extension; used for anti-aliasing and alpha cursor support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaccf7573b3fb1abf8e6c09cb5d02d417c103e50" translate="yes" xml:space="preserve">
          <source>X Session Management</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c554909390dbd01167ea64ad99b6e834939a344" translate="yes" xml:space="preserve">
          <source>X Window System (X11) support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec6777cbce64a84f53021184e25536182d95ebb" translate="yes" xml:space="preserve">
          <source>X-axis: pixel original luminance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4554bb23249db29d38bb731caf4c64faaa060ba4" translate="yes" xml:space="preserve">
          <source>X11</source>
          <target state="translated">X11</target>
        </trans-unit>
        <trans-unit id="82da9db2c590f108c94e361614919c6e5ba7505d" translate="yes" xml:space="preserve">
          <source>X11 Bitmap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f8788005e5861a3270af9d6cfa5cdc6e7adbe6" translate="yes" xml:space="preserve">
          <source>X11 Input Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb0c1ce051db62ae323443f18c9d56172884299" translate="yes" xml:space="preserve">
          <source>X11 Peculiarities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50b45badd91a34d3a80211700b8e9d9495273349" translate="yes" xml:space="preserve">
          <source>X11 Pixmap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f81a77d163226e377308772be815321e78e08e" translate="yes" xml:space="preserve">
          <source>X11 also has the concept of ownership; if you change the selection within a window, X11 will only notify the owner and the previous owner of the change, i.e. it will not notify all applications that the selection or clipboard data changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017d28f38cd1cefd1e2fcbe314d53ad405b52bf8" translate="yes" xml:space="preserve">
          <source>X11 and QWS (Qt for Embedded Linux): none.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09cb7f4f9631cc0de3c6cc38df3921984179de0a" translate="yes" xml:space="preserve">
          <source>X11 client-side library</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a595725324057791df6652927f8d9fafd47bd64c" translate="yes" xml:space="preserve">
          <source>X11 only (unless activated on Windows by a command line argument). A Mode_switch key on the keyboard is pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="277d72a6f5f9a6f870ad4edae82bae9103e4f6b8" translate="yes" xml:space="preserve">
          <source>X11 provides no standard or easy way to get the frame geometry once the window is decorated. Qt solves this problem with nifty heuristics and clever code that works on a wide range of window managers that exist today. Don't be surprised if you find one where &lt;a href=&quot;qwidget#frameGeometry-prop&quot;&gt;QWidget::frameGeometry&lt;/a&gt;() returns wrong results though.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d38fcbab56951f13dd379ca5c0a8f3bf2a3522" translate="yes" xml:space="preserve">
          <source>X11 window managers that follow modern post-ICCCM specifications support full-screen mode properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff8fe2a82c3d2c04789dafb9c7b93327e95367aa" translate="yes" xml:space="preserve">
          <source>X11, a desktop protocol from the 80s, no longer fits with how graphics hardware works today. It is large, complex, and lacks customizability. In fact, it is difficult to run a client fluidly with X11, and reach 60 fps without tearing. Wayland, in contrast, is easier to implement, has better performance, and contains all the necessary parts to run efficiently on modern graphics hardware. For embedded, multi-process systems on Linux, Wayland is the standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5693399258b96c1a388061172fb2bd6c11b126c0" translate="yes" xml:space="preserve">
          <source>X11-xcb</source>
          <target state="translated">X11-xcb</target>
        </trans-unit>
        <trans-unit id="1f2faaf3adf7d99d2aa19b99f3e4a838762e3a85" translate="yes" xml:space="preserve">
          <source>X11: This feature relies on the use of an X server that supports ARGB visuals and a compositing window manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db63b785e6c4aae3fcffd92d4721b5d8c34a78d7" translate="yes" xml:space="preserve">
          <source>XAnimator (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac50d91b922f5b082025b7f78a72ffaa5348870" translate="yes" xml:space="preserve">
          <source>XAnimator QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5de011c5990defae6a3ef0d0d63f0f9500b6c06" translate="yes" xml:space="preserve">
          <source>XBM</source>
          <target state="translated">XBM</target>
        </trans-unit>
        <trans-unit id="eee3887a0f50fc6c59805aa2c0e154ce90334d41" translate="yes" xml:space="preserve">
          <source>XBox One</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca73dbab3d266853cc5649e233ffd845b5a52ba3" translate="yes" xml:space="preserve">
          <source>XCB</source>
          <target state="translated">XCB</target>
        </trans-unit>
        <trans-unit id="c0aa9ef764d832b80428d756a731a94251b0e3a1" translate="yes" xml:space="preserve">
          <source>XML</source>
          <target state="translated">XML</target>
        </trans-unit>
        <trans-unit id="95ae68c898663c3a2d4bd002672b5144421f2aaa" translate="yes" xml:space="preserve">
          <source>XML 1.0 and XML Namespaces 1.0 are supported, as opposed to the 1.1 versions. When a strings is passed to a query as a &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;, the characters must be XML 1.0 characters. Otherwise, the behavior is undefined. This is not checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d552208cdd1ead9008c1dcf3e6b83311ab65213" translate="yes" xml:space="preserve">
          <source>XML Model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d647f348ffbbc7a4d48d8ae4bec579637ae0ee51" translate="yes" xml:space="preserve">
          <source>XML Processing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186b8e7fe1ccfe27858b12117d8aeef51ef87896" translate="yes" xml:space="preserve">
          <source>XML Schema 1.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b753c24568a8b5f367a44fe13c9ceb1e1d7a4d89" translate="yes" xml:space="preserve">
          <source>XML Schema Version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13fbfb619ca2d055214115cab0c82644371837d9" translate="yes" xml:space="preserve">
          <source>XML Schema, version 2007/08</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db988da9046c02185ba28222ac1c510bbcf8dba0" translate="yes" xml:space="preserve">
          <source>XML Streaming</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d310d394ad74af91e7d5e0b80b47680359f097" translate="yes" xml:space="preserve">
          <source>XML attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="434522424a8976a4187ab93399f2ce3b17a49a2c" translate="yes" xml:space="preserve">
          <source>XML compiler (qdbusxml2cpp)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821bce5d139f38f077bc5f2f2727452cf29d3cb8" translate="yes" xml:space="preserve">
          <source>XML file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e628e3e0f678152f07c2af120e6f0290caff1bac" translate="yes" xml:space="preserve">
          <source>XML receiver</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8ef7671c80dd20a848b0e20ac7fe899f9a42a2" translate="yes" xml:space="preserve">
          <source>XML writer with a simple streaming API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1dc754a10525066d7d47c74e38c2ea14cb7e3f" translate="yes" xml:space="preserve">
          <source>XMLHttpRequest</source>
          <target state="translated">XMLHttpRequest</target>
        </trans-unit>
        <trans-unit id="b5424a87f3eef1889304805a5ca94f46f596caa2" translate="yes" xml:space="preserve">
          <source>XPM</source>
          <target state="translated">XPM</target>
        </trans-unit>
        <trans-unit id="4c7cf0638dfc6ee32ce9ab91efe799ca3d12ffcb" translate="yes" xml:space="preserve">
          <source>XPath 2.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c3e9e82ea362b96cf5149f4c7076c3d38fef42" translate="yes" xml:space="preserve">
          <source>XPath Conformance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09fc5f6b2500316c49efe34fb739a016c09ce1b8" translate="yes" xml:space="preserve">
          <source>XPath is a subset of XQuery and the implementation of Qt XML Patterns uses XPath 2.0 with XQuery 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02208a38d993e35ccaf0aa68dcc9f69ac5b2e20d" translate="yes" xml:space="preserve">
          <source>XQuery</source>
          <target state="translated">XQuery</target>
        </trans-unit>
        <trans-unit id="619403c963a480d2c5262e0edce783868768dd68" translate="yes" xml:space="preserve">
          <source>XQuery $variable type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9019f8ea52a12dc7e51b230403c8088440701f" translate="yes" xml:space="preserve">
          <source>XQuery 1.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7eba13ca1ef6ffebeaac1da9abce6608cd6d432" translate="yes" xml:space="preserve">
          <source>XQuery Sequences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da0bea06c41b55849cad7de2d73aa327ce0a4649" translate="yes" xml:space="preserve">
          <source>XQuery is a language for traversing XML documents to select and aggregate items of interest and to transform them for output as XML or some other format. XPath is the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf1c8c3910b46d01447abb919d2023cf2ba937f" translate="yes" xml:space="preserve">
          <source>XQuery is vulnerable to &lt;a href=&quot;http://en.wikipedia.org/wiki/Code_injection&quot;&gt;code injection attacks&lt;/a&gt; in the same way as the SQL language. If an XQuery is constructed by concatenating strings, and the strings come from user input, the constructed XQuery could be malevolent. The best way to prevent code injection attacks is to not construct XQueries from user-written strings, but only accept user data input using &lt;a href=&quot;qvariant&quot;&gt;QVariant&lt;/a&gt; and variable bindings. See &lt;a href=&quot;qxmlquery#bindVariable&quot;&gt;QXmlQuery::bindVariable&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a10dcd1c8678922bb7279c014bea62be07d798c0" translate="yes" xml:space="preserve">
          <source>XQuery represents data items as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9553446abaeec0aaefda783a8d1effcba1188c" translate="yes" xml:space="preserve">
          <source>XQuery result item type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9a64d52cf6743cf951d8852412a2a79f2d7d40" translate="yes" xml:space="preserve">
          <source>XRender</source>
          <target state="translated">XRender</target>
        </trans-unit>
        <trans-unit id="f0bd3420a03b103b7cf087aed2e5ab306767cd60" translate="yes" xml:space="preserve">
          <source>XSL Feature</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258ad782ec1926f5004c5750504f4d5d4bc8bb15" translate="yes" xml:space="preserve">
          <source>XSLT 2.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f085d81dc36fbae227a8ff3e110ffde11747db" translate="yes" xml:space="preserve">
          <source>XSLT 2.0 The selector, the restricted XPath pattern found in W3C XML Schema 1.1 for uniqueness contraints. Apart from restricting the syntax, the type check stage for the expression assumes a sequence of nodes to be the focus. The field, the restricted XPath pattern found in W3C XML Schema 1.1 for uniqueness contraints. Apart from restricting the syntax, the type check stage for the expression assumes a sequence of nodes to be the focus. Signifies XPath 2.0. Has no effect in the public API, it's used internally. As With XmlSchema11IdentityConstraintSelector and XmlSchema11IdentityConstraintField, the type check stage for the expression assumes a sequence of nodes to be the focus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ee7d5c786672ec7728c241c7480fb8e9208cc0" translate="yes" xml:space="preserve">
          <source>XSVG</source>
          <target state="translated">XSVG</target>
        </trans-unit>
        <trans-unit id="737486c7616cd3dc0e3517a6e1656c28c1533b8f" translate="yes" xml:space="preserve">
          <source>XYPoint (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d30cff9309c778490dd9e626bf91e8c108cee89" translate="yes" xml:space="preserve">
          <source>XYPoint QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1bdd1b2df05f7656115f9f020c678ba0f016bc" translate="yes" xml:space="preserve">
          <source>XYPoint.x</source>
          <target state="translated">XYPoint.x</target>
        </trans-unit>
        <trans-unit id="33df39b3d7138464daae0168eaafd6e43f9d02bb" translate="yes" xml:space="preserve">
          <source>XYPoint.y</source>
          <target state="translated">XYPoint.y</target>
        </trans-unit>
        <trans-unit id="67d65485c1706aa544097dde90ff2ab470f5cf3e" translate="yes" xml:space="preserve">
          <source>XYSeries</source>
          <target state="translated">XYSeries</target>
        </trans-unit>
        <trans-unit id="4a46a999767a0b120349f6316a4bd39f9c6506d1" translate="yes" xml:space="preserve">
          <source>XYSeries (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d929891a7c5fc762cec0578231e55f4d545eaef8" translate="yes" xml:space="preserve">
          <source>XYSeries QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="971c47f56bde1f43b389767788646ae819c4e5bb" translate="yes" xml:space="preserve">
          <source>XYSeries.append()</source>
          <target state="translated">XYSeries.append()</target>
        </trans-unit>
        <trans-unit id="8ed575352fba4e8a4ae40c88e01cea9afbf1bfe7" translate="yes" xml:space="preserve">
          <source>XYSeries.at()</source>
          <target state="translated">XYSeries.at()</target>
        </trans-unit>
        <trans-unit id="d29258aa7ddfe9b6a1def08b14c1a7056ed0275d" translate="yes" xml:space="preserve">
          <source>XYSeries.axisAngular</source>
          <target state="translated">XYSeries.axisAngular</target>
        </trans-unit>
        <trans-unit id="668e238cbc999797a3b1e72fa54024fa946514e1" translate="yes" xml:space="preserve">
          <source>XYSeries.axisRadial</source>
          <target state="translated">XYSeries.axisRadial</target>
        </trans-unit>
        <trans-unit id="06167749766f64510deb3a338ccad91c3db56008" translate="yes" xml:space="preserve">
          <source>XYSeries.axisX</source>
          <target state="translated">XYSeries.axisX</target>
        </trans-unit>
        <trans-unit id="a72de6b962334adedb6dbce58787268e2488bf21" translate="yes" xml:space="preserve">
          <source>XYSeries.axisXTop</source>
          <target state="translated">XYSeries.axisXTop</target>
        </trans-unit>
        <trans-unit id="48c5ca46a29eb303c1e28133272df5496e476318" translate="yes" xml:space="preserve">
          <source>XYSeries.axisY</source>
          <target state="translated">XYSeries.axisY</target>
        </trans-unit>
        <trans-unit id="b2fdea52ebb09146455ed332b369448eb35639fb" translate="yes" xml:space="preserve">
          <source>XYSeries.axisYRight</source>
          <target state="translated">XYSeries.axisYRight</target>
        </trans-unit>
        <trans-unit id="370a4221f94266b3e941ec7ceb9b351d2bdf218c" translate="yes" xml:space="preserve">
          <source>XYSeries.clicked()</source>
          <target state="translated">XYSeries.clicked()</target>
        </trans-unit>
        <trans-unit id="5730daa5c01071a450da5909516577afa93e319e" translate="yes" xml:space="preserve">
          <source>XYSeries.color</source>
          <target state="translated">XYSeries.color</target>
        </trans-unit>
        <trans-unit id="1f4dc406019936cf1f11dd720d8c16aac8308173" translate="yes" xml:space="preserve">
          <source>XYSeries.doubleClicked()</source>
          <target state="translated">XYSeries.doubleClicked()</target>
        </trans-unit>
        <trans-unit id="d63a16f16a87fd4b2d7af28846e8b0dca42c4c11" translate="yes" xml:space="preserve">
          <source>XYSeries.hovered()</source>
          <target state="translated">XYSeries.hovered()</target>
        </trans-unit>
        <trans-unit id="dd9e277ade1421f71f696bca6d17b5a1dd0c7a52" translate="yes" xml:space="preserve">
          <source>XYSeries.insert()</source>
          <target state="translated">XYSeries.insert()</target>
        </trans-unit>
        <trans-unit id="bc737e94e12aad8b2b015831ead6c982594ccc3c" translate="yes" xml:space="preserve">
          <source>XYSeries.pointAdded()</source>
          <target state="translated">XYSeries.pointAdded()</target>
        </trans-unit>
        <trans-unit id="378cec3d645ebef04c6ce06d6ca7fb7d0a401e13" translate="yes" xml:space="preserve">
          <source>XYSeries.pointLabelsClipping</source>
          <target state="translated">XYSeries.pointLabelsClipping</target>
        </trans-unit>
        <trans-unit id="405dcc53aba43ab6e1d5c5c89ae252d29720ff8c" translate="yes" xml:space="preserve">
          <source>XYSeries.pointLabelsColor</source>
          <target state="translated">XYSeries.pointLabelsColor</target>
        </trans-unit>
        <trans-unit id="23d51365f86a594292cb6ee8e3c538ed34a29c4f" translate="yes" xml:space="preserve">
          <source>XYSeries.pointLabelsFont</source>
          <target state="translated">XYSeries.pointLabelsFont</target>
        </trans-unit>
        <trans-unit id="e5bad906a58314fc5704a915171b726677ea41a8" translate="yes" xml:space="preserve">
          <source>XYSeries.pointLabelsFormat</source>
          <target state="translated">XYSeries.pointLabelsFormat</target>
        </trans-unit>
        <trans-unit id="d7cf99c873cbd922a9828dc0e82d66dc435d01e4" translate="yes" xml:space="preserve">
          <source>XYSeries.pointLabelsVisible</source>
          <target state="translated">XYSeries.pointLabelsVisible</target>
        </trans-unit>
        <trans-unit id="fc490f369467f5b39c0c776eb2e16fcee50e7b4e" translate="yes" xml:space="preserve">
          <source>XYSeries.pointRemoved()</source>
          <target state="translated">XYSeries.pointRemoved()</target>
        </trans-unit>
        <trans-unit id="5c0432121193938c35a606858991cbbe1ebf0b92" translate="yes" xml:space="preserve">
          <source>XYSeries.pointReplaced()</source>
          <target state="translated">XYSeries.pointReplaced()</target>
        </trans-unit>
        <trans-unit id="66106f5c1a705da67431940200c45b0a4262d46c" translate="yes" xml:space="preserve">
          <source>XYSeries.pointsRemoved()</source>
          <target state="translated">XYSeries.pointsRemoved()</target>
        </trans-unit>
        <trans-unit id="7328782f17836c5a37bbcc8ccf3e4c4c8b02b18e" translate="yes" xml:space="preserve">
          <source>XYSeries.pointsReplaced()</source>
          <target state="translated">XYSeries.pointsReplaced()</target>
        </trans-unit>
        <trans-unit id="bb87487be824f2c79d1bb39e828a0d26003cd977" translate="yes" xml:space="preserve">
          <source>XYSeries.pointsVisible</source>
          <target state="translated">XYSeries.pointsVisible</target>
        </trans-unit>
        <trans-unit id="ec8ea24fb75ca4ee2295c39257902b944326e2ba" translate="yes" xml:space="preserve">
          <source>XYSeries.pressed()</source>
          <target state="translated">XYSeries.pressed()</target>
        </trans-unit>
        <trans-unit id="5be9d88f249a7120e1811e3ef39decf28dd008c4" translate="yes" xml:space="preserve">
          <source>XYSeries.released()</source>
          <target state="translated">XYSeries.released()</target>
        </trans-unit>
        <trans-unit id="c2d99692330a3ec8600cb4f22e4ebf56bba4ece4" translate="yes" xml:space="preserve">
          <source>XYSeries.remove()</source>
          <target state="translated">XYSeries.remove()</target>
        </trans-unit>
        <trans-unit id="ef840b57a60a23899ef4680327918c1a5312576a" translate="yes" xml:space="preserve">
          <source>XYSeries.removePoints()</source>
          <target state="translated">XYSeries.removePoints()</target>
        </trans-unit>
        <trans-unit id="7854239ede6717bef6e035d2974e865945f7cd12" translate="yes" xml:space="preserve">
          <source>XYSeries.replace()</source>
          <target state="translated">XYSeries.replace()</target>
        </trans-unit>
        <trans-unit id="64d36ae69ab9210cfc1f0a43d303686988db04f8" translate="yes" xml:space="preserve">
          <source>Xcode</source>
          <target state="translated">Xcode</target>
        </trans-unit>
        <trans-unit id="d51c001255547f24d9d36ad501e109f763f75a70" translate="yes" xml:space="preserve">
          <source>Xcode 8.3.3 or later</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735588274ef149064cd26f3917454c9068d1495f" translate="yes" xml:space="preserve">
          <source>Xcode can be downloaded from Apple's &lt;a href=&quot;https://developer.apple.com/download/&quot;&gt;developer website&lt;/a&gt; (including older versions of Xcode). Once installed, choosing an Xcode installation is done using the &lt;code&gt;xcode-select&lt;/code&gt; tool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176bda37b06043310846e8e278d1592f9353fde5" translate="yes" xml:space="preserve">
          <source>Xcode on does not matter. As long as Apple ships a given Xcode version that runs on your operating system, the build environment will be defined by that Xcode version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33be511091c341bb02c09cb0651c80de6340841d" translate="yes" xml:space="preserve">
          <source>XdgDecorationManagerV1 (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff7b687bcafb138ffc9956a956281b2efd911de" translate="yes" xml:space="preserve">
          <source>XdgDecorationManagerV1 QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdf528f70e2397c6a0dcf07947b88a9e91214022" translate="yes" xml:space="preserve">
          <source>XdgDecorationManagerV1.preferredMode</source>
          <target state="translated">XdgDecorationManagerV1.preferredMode</target>
        </trans-unit>
        <trans-unit id="8989ed048584ce1ec89039a9f0356bc980f019e7" translate="yes" xml:space="preserve">
          <source>XdgPopup (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311e12df3be17dc7cbb450104e7316abe7122b2c" translate="yes" xml:space="preserve">
          <source>XdgPopup QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6464a3a3889db17a530d719a9fab382364e4bffd" translate="yes" xml:space="preserve">
          <source>XdgPopup.anchorEdges</source>
          <target state="translated">XdgPopup.anchorEdges</target>
        </trans-unit>
        <trans-unit id="a0f90db53a203cfac2d98a36be1939eaaae9e554" translate="yes" xml:space="preserve">
          <source>XdgPopup.anchorRect</source>
          <target state="translated">XdgPopup.anchorRect</target>
        </trans-unit>
        <trans-unit id="e7740fbf0cd7ddd597f4382704bf06443cf0d7b9" translate="yes" xml:space="preserve">
          <source>XdgPopup.configuredGeometry</source>
          <target state="translated">XdgPopup.configuredGeometry</target>
        </trans-unit>
        <trans-unit id="834853f1aa6a19ffb46ea0b4a8b9ac8bab173b3e" translate="yes" xml:space="preserve">
          <source>XdgPopup.flipConstraints</source>
          <target state="translated">XdgPopup.flipConstraints</target>
        </trans-unit>
        <trans-unit id="506c50fcc18ffb1c58cf98b452564f5d0582e273" translate="yes" xml:space="preserve">
          <source>XdgPopup.gravityEdges</source>
          <target state="translated">XdgPopup.gravityEdges</target>
        </trans-unit>
        <trans-unit id="a2482e771685a0a90b57de841b81eaa18e8a5a96" translate="yes" xml:space="preserve">
          <source>XdgPopup.offset</source>
          <target state="translated">XdgPopup.offset</target>
        </trans-unit>
        <trans-unit id="ba206edd3f2eff85189de86188873f2c3dcec1ab" translate="yes" xml:space="preserve">
          <source>XdgPopup.parentXdgSurface</source>
          <target state="translated">XdgPopup.parentXdgSurface</target>
        </trans-unit>
        <trans-unit id="c5e4a9733af0ffe7fb64f981f4de0e4e39a62464" translate="yes" xml:space="preserve">
          <source>XdgPopup.positionerSize</source>
          <target state="translated">XdgPopup.positionerSize</target>
        </trans-unit>
        <trans-unit id="65d1ba497be800d04d19ce84e84b0bbbcde417d8" translate="yes" xml:space="preserve">
          <source>XdgPopup.resizeConstraints</source>
          <target state="translated">XdgPopup.resizeConstraints</target>
        </trans-unit>
        <trans-unit id="bd281a16222cac6b8dffaa375ce397f04b4e0a0d" translate="yes" xml:space="preserve">
          <source>XdgPopup.sendConfigure()</source>
          <target state="translated">XdgPopup.sendConfigure()</target>
        </trans-unit>
        <trans-unit id="62b228f19dabd6ac433976dbe81a533981c16c6e" translate="yes" xml:space="preserve">
          <source>XdgPopup.slideConstraints</source>
          <target state="translated">XdgPopup.slideConstraints</target>
        </trans-unit>
        <trans-unit id="9073568e6dcfbb64256da11f0101fcec38bc4129" translate="yes" xml:space="preserve">
          <source>XdgPopup.unconstrainedPosition</source>
          <target state="translated">XdgPopup.unconstrainedPosition</target>
        </trans-unit>
        <trans-unit id="9173f3b97eb178ad6fb7210e43a6d85588482383" translate="yes" xml:space="preserve">
          <source>XdgPopup.xdgSurface</source>
          <target state="translated">XdgPopup.xdgSurface</target>
        </trans-unit>
        <trans-unit id="5e0557e123b5805a57d21c31a142d5de7e663e2f" translate="yes" xml:space="preserve">
          <source>XdgPopupV5 (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e9af3059bab81863940d3eea5e709ce9e22c28" translate="yes" xml:space="preserve">
          <source>XdgPopupV5 QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e50968de535ff28aba88ca7640355fa3f0e277f6" translate="yes" xml:space="preserve">
          <source>XdgPopupV5.initialize()</source>
          <target state="translated">XdgPopupV5.initialize()</target>
        </trans-unit>
        <trans-unit id="b34332d4b144f3e64596d044fea6f5aedeaf1c3b" translate="yes" xml:space="preserve">
          <source>XdgPopupV5.parentSurface</source>
          <target state="translated">XdgPopupV5.parentSurface</target>
        </trans-unit>
        <trans-unit id="85d9837137ad3cbd84d93e2d7c13d2166d5cbcdb" translate="yes" xml:space="preserve">
          <source>XdgPopupV5.position</source>
          <target state="translated">XdgPopupV5.position</target>
        </trans-unit>
        <trans-unit id="f2b1c218007cf8816c5511f9abd22ea25cc5ce71" translate="yes" xml:space="preserve">
          <source>XdgPopupV5.shell</source>
          <target state="translated">XdgPopupV5.shell</target>
        </trans-unit>
        <trans-unit id="31ca9c5437fac748ea1ea4ec18347f4c363dd3d3" translate="yes" xml:space="preserve">
          <source>XdgPopupV5.surface</source>
          <target state="translated">XdgPopupV5.surface</target>
        </trans-unit>
        <trans-unit id="6fb32dc122ff62a06f42aa3b89e5b68305c44888" translate="yes" xml:space="preserve">
          <source>XdgPopupV6 (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6686e510fcd25221293efa8da66f5ef50d10c10" translate="yes" xml:space="preserve">
          <source>XdgPopupV6 QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555fb29f34387e4ea7a6002e7ff667762968d444" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.anchorEdges</source>
          <target state="translated">XdgPopupV6.anchorEdges</target>
        </trans-unit>
        <trans-unit id="d67c31ea9a8c9145ca86ac17f5d8530b52a6bfb2" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.anchorRect</source>
          <target state="translated">XdgPopupV6.anchorRect</target>
        </trans-unit>
        <trans-unit id="8491afffffdf052ad667875e74608e4e1bc46b15" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.configuredGeometry</source>
          <target state="translated">XdgPopupV6.configuredGeometry</target>
        </trans-unit>
        <trans-unit id="dd23f1ae07c8c83d28f1a7341be47079768232dc" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.flipConstraints</source>
          <target state="translated">XdgPopupV6.flipConstraints</target>
        </trans-unit>
        <trans-unit id="33b913cf34b9a9462e3a85297478c055086db2cd" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.gravityEdges</source>
          <target state="translated">XdgPopupV6.gravityEdges</target>
        </trans-unit>
        <trans-unit id="845ee639958753efa8f1d48904f59c607f912668" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.offset</source>
          <target state="translated">XdgPopupV6.offset</target>
        </trans-unit>
        <trans-unit id="83c95943b40b41c05fb99375133b8f5321f72b35" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.parentXdgSurface</source>
          <target state="translated">XdgPopupV6.parentXdgSurface</target>
        </trans-unit>
        <trans-unit id="3fbaeb24286926b0576cb8c8ecd059c7fd4b7ed3" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.positionerSize</source>
          <target state="translated">XdgPopupV6.positionerSize</target>
        </trans-unit>
        <trans-unit id="3403c3f844fb684de6d26fa78320c4ecb7b891ee" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.resizeConstraints</source>
          <target state="translated">XdgPopupV6.resizeConstraints</target>
        </trans-unit>
        <trans-unit id="a8c3d6bfeb48c757587fe4fde49b489170646988" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.sendConfigure()</source>
          <target state="translated">XdgPopupV6.sendConfigure()</target>
        </trans-unit>
        <trans-unit id="f1ad5b4b93b6dc429182ae588fd2643688c44374" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.slideConstraints</source>
          <target state="translated">XdgPopupV6.slideConstraints</target>
        </trans-unit>
        <trans-unit id="f1d4046697f05170d5801fd0f50a086ef381c8a4" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.unconstrainedPosition</source>
          <target state="translated">XdgPopupV6.unconstrainedPosition</target>
        </trans-unit>
        <trans-unit id="fa5323759629df91b836b23b2e16e32cbf3699c3" translate="yes" xml:space="preserve">
          <source>XdgPopupV6.xdgSurface</source>
          <target state="translated">XdgPopupV6.xdgSurface</target>
        </trans-unit>
        <trans-unit id="34e28c503681b397b07a79d4ef912521b264b185" translate="yes" xml:space="preserve">
          <source>XdgShell (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29d6f2550afe78219ecee91587b10e5bb4811a8" translate="yes" xml:space="preserve">
          <source>XdgShell QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cccd58ef610cf93e4a49fb4c4f92be8650fcc75" translate="yes" xml:space="preserve">
          <source>XdgShell.ping()</source>
          <target state="translated">XdgShell.ping()</target>
        </trans-unit>
        <trans-unit id="b05267c95d4a8d0f4cedeef80c662eba35368735" translate="yes" xml:space="preserve">
          <source>XdgShell.pong()</source>
          <target state="translated">XdgShell.pong()</target>
        </trans-unit>
        <trans-unit id="a313bc962307fa49ccb7d4d2eccadaf23c692c7e" translate="yes" xml:space="preserve">
          <source>XdgShell.popupCreated()</source>
          <target state="translated">XdgShell.popupCreated()</target>
        </trans-unit>
        <trans-unit id="3b4a45eb5d6fd6deb11b9050aae25b42b2da8649" translate="yes" xml:space="preserve">
          <source>XdgShell.toplevelCreated()</source>
          <target state="translated">XdgShell.toplevelCreated()</target>
        </trans-unit>
        <trans-unit id="009630eaca912339411601d9b2b30c116efd1926" translate="yes" xml:space="preserve">
          <source>XdgShell.xdgSurfaceCreated()</source>
          <target state="translated">XdgShell.xdgSurfaceCreated()</target>
        </trans-unit>
        <trans-unit id="2f9cf436df9e7322613fbd41fc0e6e63c9bf8e38" translate="yes" xml:space="preserve">
          <source>XdgShellV5 (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec22b904e6190c89bda9716c8ec995c492f19e1" translate="yes" xml:space="preserve">
          <source>XdgShellV5 QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d4587fe5588998f113d6cc6d7fd21bd998b99f" translate="yes" xml:space="preserve">
          <source>XdgShellV5.ping()</source>
          <target state="translated">XdgShellV5.ping()</target>
        </trans-unit>
        <trans-unit id="537d2a88dc3bdb22cb64f0204dfa365812211629" translate="yes" xml:space="preserve">
          <source>XdgShellV5.pong()</source>
          <target state="translated">XdgShellV5.pong()</target>
        </trans-unit>
        <trans-unit id="85eddfebbc4b7802ca5c1f15095f365e9826f384" translate="yes" xml:space="preserve">
          <source>XdgShellV5.xdgPopupCreated()</source>
          <target state="translated">XdgShellV5.xdgPopupCreated()</target>
        </trans-unit>
        <trans-unit id="0abf72ee113cddc2dac1964ba67e18772f89fbc2" translate="yes" xml:space="preserve">
          <source>XdgShellV5.xdgPopupRequested()</source>
          <target state="translated">XdgShellV5.xdgPopupRequested()</target>
        </trans-unit>
        <trans-unit id="e9776fa32c79a94e612355c13c10b44c2da306e9" translate="yes" xml:space="preserve">
          <source>XdgShellV5.xdgSurfaceCreated()</source>
          <target state="translated">XdgShellV5.xdgSurfaceCreated()</target>
        </trans-unit>
        <trans-unit id="44600b2b75004b9683afe1564c49a41f2fc9133a" translate="yes" xml:space="preserve">
          <source>XdgShellV5.xdgSurfaceRequested()</source>
          <target state="translated">XdgShellV5.xdgSurfaceRequested()</target>
        </trans-unit>
        <trans-unit id="770457c6593d6a8f2cdceb2763741cba93f62a1a" translate="yes" xml:space="preserve">
          <source>XdgShellV6 (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083bd52dfded9e90e1a24ba8bf9d11a69135bb6b" translate="yes" xml:space="preserve">
          <source>XdgShellV6 QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b1df5597eb9025327010205d802c715fafee51" translate="yes" xml:space="preserve">
          <source>XdgShellV6.ping()</source>
          <target state="translated">XdgShellV6.ping()</target>
        </trans-unit>
        <trans-unit id="a875334aa652ec3aaccada751b526b7ce1e226cc" translate="yes" xml:space="preserve">
          <source>XdgShellV6.pong()</source>
          <target state="translated">XdgShellV6.pong()</target>
        </trans-unit>
        <trans-unit id="790fee2d11ff17cc037ac82a303686f41a6ada90" translate="yes" xml:space="preserve">
          <source>XdgShellV6.popupCreated()</source>
          <target state="translated">XdgShellV6.popupCreated()</target>
        </trans-unit>
        <trans-unit id="3a8f5da43ce0e932b584dfd0512a802f0c99112a" translate="yes" xml:space="preserve">
          <source>XdgShellV6.toplevelCreated()</source>
          <target state="translated">XdgShellV6.toplevelCreated()</target>
        </trans-unit>
        <trans-unit id="c8c535d36be34d4818dca19dcc6472fb6de911db" translate="yes" xml:space="preserve">
          <source>XdgShellV6.xdgSurfaceCreated()</source>
          <target state="translated">XdgShellV6.xdgSurfaceCreated()</target>
        </trans-unit>
        <trans-unit id="c6a13bbf1274fb87d4bae073146e6119ad8af6c7" translate="yes" xml:space="preserve">
          <source>XdgSurface (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3557f83a6b3d421d77e35efedcbb8d898e5987cd" translate="yes" xml:space="preserve">
          <source>XdgSurface QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1645f7be468e9a06fb67937353e62290abc9e47" translate="yes" xml:space="preserve">
          <source>XdgSurface.initialize()</source>
          <target state="translated">XdgSurface.initialize()</target>
        </trans-unit>
        <trans-unit id="3fd6335df7ce0088fb74adff0461380177935493" translate="yes" xml:space="preserve">
          <source>XdgSurface.popup</source>
          <target state="translated">XdgSurface.popup</target>
        </trans-unit>
        <trans-unit id="21d356b0eba9a1886ad43a3d9fa637ec172cefd1" translate="yes" xml:space="preserve">
          <source>XdgSurface.shell</source>
          <target state="translated">XdgSurface.shell</target>
        </trans-unit>
        <trans-unit id="e686fd91e5b80521532fa01b37953bd05ddd93cc" translate="yes" xml:space="preserve">
          <source>XdgSurface.surface</source>
          <target state="translated">XdgSurface.surface</target>
        </trans-unit>
        <trans-unit id="ce52251e33e8a2699204073f6fb743dbe81de6a0" translate="yes" xml:space="preserve">
          <source>XdgSurface.toplevel</source>
          <target state="translated">XdgSurface.toplevel</target>
        </trans-unit>
        <trans-unit id="49943dc2c3ff51394f1c16b49502967235d1c822" translate="yes" xml:space="preserve">
          <source>XdgSurface.windowGeometry</source>
          <target state="translated">XdgSurface.windowGeometry</target>
        </trans-unit>
        <trans-unit id="0211f0c0e7fdde85235d37f1bb33c61dd921143e" translate="yes" xml:space="preserve">
          <source>XdgSurface.windowType</source>
          <target state="translated">XdgSurface.windowType</target>
        </trans-unit>
        <trans-unit id="6e3c6dd80e7b33e2d08435adf6f14cd94fec2674" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5 (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f13276b35f5b081377e7a931d03c429c0e0e21b7" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5 QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46256378be988cadc2a752c853aaf9d0b55b6fe3" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.ackConfigure()</source>
          <target state="translated">XdgSurfaceV5.ackConfigure()</target>
        </trans-unit>
        <trans-unit id="d86aee984ff8f5d3d1666860a110bc43d81efb52" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.initialize()</source>
          <target state="translated">XdgSurfaceV5.initialize()</target>
        </trans-unit>
        <trans-unit id="de7e6349ef55a32224172b4b413b0dd76a735dfa" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.parentSurface</source>
          <target state="translated">XdgSurfaceV5.parentSurface</target>
        </trans-unit>
        <trans-unit id="e1f809cc27ca3d17a2e7bbe6c4b8dd429a7f2eaf" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.sendClose()</source>
          <target state="translated">XdgSurfaceV5.sendClose()</target>
        </trans-unit>
        <trans-unit id="fd2313c0ca1c33e3e1d6d022e561074a94222b5e" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.sendConfigure()</source>
          <target state="translated">XdgSurfaceV5.sendConfigure()</target>
        </trans-unit>
        <trans-unit id="8217258b6b3a0948243699dbc26c6ff03a551ce1" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.setFullscreen()</source>
          <target state="translated">XdgSurfaceV5.setFullscreen()</target>
        </trans-unit>
        <trans-unit id="e577cabf1b5ea40ed30eb4109ca338b5d56d1da7" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.setMaximized()</source>
          <target state="translated">XdgSurfaceV5.setMaximized()</target>
        </trans-unit>
        <trans-unit id="cb9358121b05f9ac7bfe353fc97fd5d331772dfe" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.setMinimized()</source>
          <target state="translated">XdgSurfaceV5.setMinimized()</target>
        </trans-unit>
        <trans-unit id="d04691d8aa6bed5110c032dd5e1be267f465ef39" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.setTopLevel()</source>
          <target state="translated">XdgSurfaceV5.setTopLevel()</target>
        </trans-unit>
        <trans-unit id="6d7675359d1209a7386336a99e0e34045379273e" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.setTransient()</source>
          <target state="translated">XdgSurfaceV5.setTransient()</target>
        </trans-unit>
        <trans-unit id="0394e50bee2aa7fe0d27a9cf417973acfd75d374" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.shell</source>
          <target state="translated">XdgSurfaceV5.shell</target>
        </trans-unit>
        <trans-unit id="b479b8cfdff86dca5dddf029d64377a62968e871" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.showWindowMenu()</source>
          <target state="translated">XdgSurfaceV5.showWindowMenu()</target>
        </trans-unit>
        <trans-unit id="74ba6e87e6b6e16559ed73df1c9cad26ab2ef15b" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.startMove()</source>
          <target state="translated">XdgSurfaceV5.startMove()</target>
        </trans-unit>
        <trans-unit id="cd8555354728c8273311bd559870fedbe5bb70a5" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.startResize()</source>
          <target state="translated">XdgSurfaceV5.startResize()</target>
        </trans-unit>
        <trans-unit id="acee30c89c06ddb06e8f1178afde28c3b6c394e2" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.surface</source>
          <target state="translated">XdgSurfaceV5.surface</target>
        </trans-unit>
        <trans-unit id="749905199b349e91ce4ac24a236f5e422a47381c" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.title</source>
          <target state="translated">XdgSurfaceV5.title</target>
        </trans-unit>
        <trans-unit id="4babc1c2b51a67c33f9db73dfac5973258f1911e" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.unsetFullscreen()</source>
          <target state="translated">XdgSurfaceV5.unsetFullscreen()</target>
        </trans-unit>
        <trans-unit id="1dfe757f04f91207a56d87120bd0e4df0b1098b0" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.unsetMaximized()</source>
          <target state="translated">XdgSurfaceV5.unsetMaximized()</target>
        </trans-unit>
        <trans-unit id="f5b20cffafc89e3ea2eb461656a4b3f73901ff3d" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV5.windowType</source>
          <target state="translated">XdgSurfaceV5.windowType</target>
        </trans-unit>
        <trans-unit id="5390f0c80119e77eb8f898b1ce010a6da5ec6b2a" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6 (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868a55e71f1ce1a277e17920edd0adc1fd7bf8b8" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6 QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a121fd01401716c3cc09a1b014515f82e64175e3" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6.initialize()</source>
          <target state="translated">XdgSurfaceV6.initialize()</target>
        </trans-unit>
        <trans-unit id="dc10b1935363ffb04318067ee4ddcdab756161f9" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6.popup</source>
          <target state="translated">XdgSurfaceV6.popup</target>
        </trans-unit>
        <trans-unit id="d8d0cfdc18d435a9a4e60d27cd9cdeb301af23d9" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6.shell</source>
          <target state="translated">XdgSurfaceV6.shell</target>
        </trans-unit>
        <trans-unit id="f2b8e2a2c9cf816f15e18df1ee644d06fd170b2e" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6.surface</source>
          <target state="translated">XdgSurfaceV6.surface</target>
        </trans-unit>
        <trans-unit id="14d92dacd367404cbd43e9acf0a6bc02bea120fd" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6.toplevel</source>
          <target state="translated">XdgSurfaceV6.toplevel</target>
        </trans-unit>
        <trans-unit id="a68dd769b78c02e1912cb0e6f3ea09c38363f541" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6.windowGeometry</source>
          <target state="translated">XdgSurfaceV6.windowGeometry</target>
        </trans-unit>
        <trans-unit id="4faee35dff98b0c1b5e1be495b27b3d4fd90301c" translate="yes" xml:space="preserve">
          <source>XdgSurfaceV6.windowType</source>
          <target state="translated">XdgSurfaceV6.windowType</target>
        </trans-unit>
        <trans-unit id="833a8429238f4670386ef9b9256a5e8669479d2f" translate="yes" xml:space="preserve">
          <source>XdgToplevel (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99cc4a580244c6327976ce9759a1430fc51c81d6" translate="yes" xml:space="preserve">
          <source>XdgToplevel QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e48ef1e166955dbc966fb47ef632451ebc6a1a73" translate="yes" xml:space="preserve">
          <source>XdgToplevel.activated</source>
          <target state="translated">XdgToplevel.activated</target>
        </trans-unit>
        <trans-unit id="bb909d87e5cb8c718cbae03b136b2320c7e5406f" translate="yes" xml:space="preserve">
          <source>XdgToplevel.appId</source>
          <target state="translated">XdgToplevel.appId</target>
        </trans-unit>
        <trans-unit id="3f344e20c8a10528e82f5ab13c59cbcf616c3eba" translate="yes" xml:space="preserve">
          <source>XdgToplevel.decorationMode</source>
          <target state="translated">XdgToplevel.decorationMode</target>
        </trans-unit>
        <trans-unit id="d0f98e22590fbfc2aa4715012fb4f0c03ff4f9ca" translate="yes" xml:space="preserve">
          <source>XdgToplevel.fullscreen</source>
          <target state="translated">XdgToplevel.fullscreen</target>
        </trans-unit>
        <trans-unit id="e47954b4b1a9c2c1ec961f8d559c29cf64ba9762" translate="yes" xml:space="preserve">
          <source>XdgToplevel.maxSize</source>
          <target state="translated">XdgToplevel.maxSize</target>
        </trans-unit>
        <trans-unit id="e092843b026b93016ebca523ffbe6311b6ec609a" translate="yes" xml:space="preserve">
          <source>XdgToplevel.maximized</source>
          <target state="translated">XdgToplevel.maximized</target>
        </trans-unit>
        <trans-unit id="bfa9ef1f0db5438053d2cace5ffa8a9bf64b6c3a" translate="yes" xml:space="preserve">
          <source>XdgToplevel.minSize</source>
          <target state="translated">XdgToplevel.minSize</target>
        </trans-unit>
        <trans-unit id="003c1870bf420f58c0b13433deb8bd0314dc5068" translate="yes" xml:space="preserve">
          <source>XdgToplevel.parentToplevel</source>
          <target state="translated">XdgToplevel.parentToplevel</target>
        </trans-unit>
        <trans-unit id="7fcb3da92381bcaa3ce4e7700c09dba4df72b87b" translate="yes" xml:space="preserve">
          <source>XdgToplevel.resizing</source>
          <target state="translated">XdgToplevel.resizing</target>
        </trans-unit>
        <trans-unit id="a1830e61bbbc0ea21059ea225c800e600c27f413" translate="yes" xml:space="preserve">
          <source>XdgToplevel.sendClose()</source>
          <target state="translated">XdgToplevel.sendClose()</target>
        </trans-unit>
        <trans-unit id="a4909f3102bdf2e48d78a5652ed3ca668ce72e82" translate="yes" xml:space="preserve">
          <source>XdgToplevel.sendConfigure()</source>
          <target state="translated">XdgToplevel.sendConfigure()</target>
        </trans-unit>
        <trans-unit id="9edfca10c2c1854640ce683d6edb3731a5810e20" translate="yes" xml:space="preserve">
          <source>XdgToplevel.sendFullscreen()</source>
          <target state="translated">XdgToplevel.sendFullscreen()</target>
        </trans-unit>
        <trans-unit id="4da58b1646c36f8619cadcb390bffe1929921f95" translate="yes" xml:space="preserve">
          <source>XdgToplevel.sendMaximized()</source>
          <target state="translated">XdgToplevel.sendMaximized()</target>
        </trans-unit>
        <trans-unit id="5917e06a5567cd1b9a1c82a2230922439a041dd3" translate="yes" xml:space="preserve">
          <source>XdgToplevel.sendResizing()</source>
          <target state="translated">XdgToplevel.sendResizing()</target>
        </trans-unit>
        <trans-unit id="9bdbb7705bd8d2e3778f03f32efa819f2623c5f3" translate="yes" xml:space="preserve">
          <source>XdgToplevel.sendUnmaximized()</source>
          <target state="translated">XdgToplevel.sendUnmaximized()</target>
        </trans-unit>
        <trans-unit id="7d2558504d8e073beeee810dda036ee4cab5e3df" translate="yes" xml:space="preserve">
          <source>XdgToplevel.sizeForResize()</source>
          <target state="translated">XdgToplevel.sizeForResize()</target>
        </trans-unit>
        <trans-unit id="3c23cf1ccabe27c98fddeac9f1c9e4640b31f467" translate="yes" xml:space="preserve">
          <source>XdgToplevel.title</source>
          <target state="translated">XdgToplevel.title</target>
        </trans-unit>
        <trans-unit id="b8fe6342b3c031cde30469a54649f379df1ebb25" translate="yes" xml:space="preserve">
          <source>XdgToplevel.xdgSurface</source>
          <target state="translated">XdgToplevel.xdgSurface</target>
        </trans-unit>
        <trans-unit id="f1791606de55f45bb427773a5f712b7518e960f9" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6 (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b8a9ba5c8482dfb2fe18edd156863b10a91bd0" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6 QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b9056d61f4de8f13f1c5f651117a04da4d78d7" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.activated</source>
          <target state="translated">XdgToplevelV6.activated</target>
        </trans-unit>
        <trans-unit id="2ecc2c9247587f6bc3dbc7abcda388867bdeba9e" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.appId</source>
          <target state="translated">XdgToplevelV6.appId</target>
        </trans-unit>
        <trans-unit id="a21f3d512c2ed182fa36335783fed28d65afe5e4" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.fullscreen</source>
          <target state="translated">XdgToplevelV6.fullscreen</target>
        </trans-unit>
        <trans-unit id="1e6561e34e6cd25e5f068fcc935afcfa7355f333" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.maxSize</source>
          <target state="translated">XdgToplevelV6.maxSize</target>
        </trans-unit>
        <trans-unit id="0a847a96bf4dacb504aa93dbf48916fed71bd92a" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.maximized</source>
          <target state="translated">XdgToplevelV6.maximized</target>
        </trans-unit>
        <trans-unit id="54f75480aa4e797f68194ebc589e0f2318ae3104" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.minSize</source>
          <target state="translated">XdgToplevelV6.minSize</target>
        </trans-unit>
        <trans-unit id="9e9d1d574dffc53b1d843b1ffadf7af7f835b84f" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.parentToplevel</source>
          <target state="translated">XdgToplevelV6.parentToplevel</target>
        </trans-unit>
        <trans-unit id="9a404d23208ce214204da365f753edd18ba0596b" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.resizing</source>
          <target state="translated">XdgToplevelV6.resizing</target>
        </trans-unit>
        <trans-unit id="516741961ac6ff371784f6360fe390ff4cb2dcf4" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.sendClose()</source>
          <target state="translated">XdgToplevelV6.sendClose()</target>
        </trans-unit>
        <trans-unit id="f7ddd67781de884dc845fccc5cae652454340b48" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.sendConfigure()</source>
          <target state="translated">XdgToplevelV6.sendConfigure()</target>
        </trans-unit>
        <trans-unit id="4017d438c6242eb56dc3b9ce85d56660e99cd5dc" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.sendFullscreen()</source>
          <target state="translated">XdgToplevelV6.sendFullscreen()</target>
        </trans-unit>
        <trans-unit id="941e536db856e32b665e2731b6e9b1b2f546edc5" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.sendMaximized()</source>
          <target state="translated">XdgToplevelV6.sendMaximized()</target>
        </trans-unit>
        <trans-unit id="a96d4720b0fa1c25f6592122f58f9454efc3f313" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.sendResizing()</source>
          <target state="translated">XdgToplevelV6.sendResizing()</target>
        </trans-unit>
        <trans-unit id="64f458940dd8a26a5d0d33e84c716773b6faf670" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.sendUnmaximized()</source>
          <target state="translated">XdgToplevelV6.sendUnmaximized()</target>
        </trans-unit>
        <trans-unit id="eb26393f647534796f3161cf0a89327d975f6c00" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.sizeForResize()</source>
          <target state="translated">XdgToplevelV6.sizeForResize()</target>
        </trans-unit>
        <trans-unit id="40c7fca31a02e5f030ad97e7d67185674190ce6f" translate="yes" xml:space="preserve">
          <source>XdgToplevelV6.title</source>
          <target state="translated">XdgToplevelV6.title</target>
        </trans-unit>
        <trans-unit id="58913c7b7cfaf8152a75a6a8c56103abcbaf61ec" translate="yes" xml:space="preserve">
          <source>Xext</source>
          <target state="translated">Xext</target>
        </trans-unit>
        <trans-unit id="d39676264f702d3adc0513db3c634e7fea3a4679" translate="yes" xml:space="preserve">
          <source>Xi</source>
          <target state="translated">Xi</target>
        </trans-unit>
        <trans-unit id="549fbefe86ea7542c426ed1b6b0f827287e5ea54" translate="yes" xml:space="preserve">
          <source>Xlib/XCB interface library</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37df1d5dd461e4e334cf413302b1e8894aa58d65" translate="yes" xml:space="preserve">
          <source>XmlListModel (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39289add00767e23dfde7d6148fba9e8df299bc8" translate="yes" xml:space="preserve">
          <source>XmlListModel QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5e1a66556d49be840093280132fdf99a036812" translate="yes" xml:space="preserve">
          <source>XmlListModel.count</source>
          <target state="translated">XmlListModel.count</target>
        </trans-unit>
        <trans-unit id="33f6b2b3eec6b580f7e04d6ed44bd68289261446" translate="yes" xml:space="preserve">
          <source>XmlListModel.errorString()</source>
          <target state="translated">XmlListModel.errorString()</target>
        </trans-unit>
        <trans-unit id="d7f0f26d89e70f1d58acdc763f705b46e610174c" translate="yes" xml:space="preserve">
          <source>XmlListModel.get()</source>
          <target state="translated">XmlListModel.get()</target>
        </trans-unit>
        <trans-unit id="aa93a2c8dd76d7feaed11d3d4e951e3041c021d2" translate="yes" xml:space="preserve">
          <source>XmlListModel.namespaceDeclarations</source>
          <target state="translated">XmlListModel.namespaceDeclarations</target>
        </trans-unit>
        <trans-unit id="78cf3332bbdcf59cd92fc4fb8c61e45556bdea12" translate="yes" xml:space="preserve">
          <source>XmlListModel.progress</source>
          <target state="translated">XmlListModel.progress</target>
        </trans-unit>
        <trans-unit id="f4cfac0ab691ab73d7a98f1176fb2ed3ed86bc80" translate="yes" xml:space="preserve">
          <source>XmlListModel.query</source>
          <target state="translated">XmlListModel.query</target>
        </trans-unit>
        <trans-unit id="1592a4f7c85716f2f10a0ffc7579ccefe9cd0bed" translate="yes" xml:space="preserve">
          <source>XmlListModel.reload()</source>
          <target state="translated">XmlListModel.reload()</target>
        </trans-unit>
        <trans-unit id="ae2c33f63fd0e8746a74d4f6d7c4ffa7ee28ea86" translate="yes" xml:space="preserve">
          <source>XmlListModel.roles</source>
          <target state="translated">XmlListModel.roles</target>
        </trans-unit>
        <trans-unit id="988487c4378f362280685031016f14c15b6bba22" translate="yes" xml:space="preserve">
          <source>XmlListModel.source</source>
          <target state="translated">XmlListModel.source</target>
        </trans-unit>
        <trans-unit id="175c53b04ee764b677bdd28267a06890abe6b02d" translate="yes" xml:space="preserve">
          <source>XmlListModel.status</source>
          <target state="translated">XmlListModel.status</target>
        </trans-unit>
        <trans-unit id="ea331d3a472e28755be56dac6dc02d3d278d3cde" translate="yes" xml:space="preserve">
          <source>XmlListModel.xml</source>
          <target state="translated">XmlListModel.xml</target>
        </trans-unit>
        <trans-unit id="25a492471903bb06a85f4270e065380e37f2fef0" translate="yes" xml:space="preserve">
          <source>XmlRole (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075f5a23810cf7d1009af1b6f7154b33040ab5ce" translate="yes" xml:space="preserve">
          <source>XmlRole QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9890c7078775a2f2da2f131e269990bdb27b8baf" translate="yes" xml:space="preserve">
          <source>XmlRole.isKey</source>
          <target state="translated">XmlRole.isKey</target>
        </trans-unit>
        <trans-unit id="03da30af25d4eb1535443e4f8b7c5dbfa5407305" translate="yes" xml:space="preserve">
          <source>XmlRole.name</source>
          <target state="translated">XmlRole.name</target>
        </trans-unit>
        <trans-unit id="905475ae4b25ccbdc45d2fb9635efcead66af27d" translate="yes" xml:space="preserve">
          <source>XmlRole.query</source>
          <target state="translated">XmlRole.query</target>
        </trans-unit>
        <trans-unit id="23eb4d3f4155395a74e9d534f97ff4c1908f5aac" translate="yes" xml:space="preserve">
          <source>Y</source>
          <target state="translated">Y</target>
        </trans-unit>
        <trans-unit id="c1710d3d0b0f56f27f1a7e1cb8d6fe8542934e42" translate="yes" xml:space="preserve">
          <source>Y-axis: color channel luminance with effect applied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e6b3be5cdd8e0b3409e4867d41c6e6922cf9e6b" translate="yes" xml:space="preserve">
          <source>Y-axis: pixel luminance with effect applied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bdb232c0538b2988775b9d97867e6d6e233362" translate="yes" xml:space="preserve">
          <source>YACCSOURCES</source>
          <target state="translated">YACCSOURCES</target>
        </trans-unit>
        <trans-unit id="448077818fea215ba380777d645da6427112264b" translate="yes" xml:space="preserve">
          <source>YAnimator (QML type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6349114da4d582fc6f06a87476c5ff19669eea6" translate="yes" xml:space="preserve">
          <source>YAnimator QML Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f0cadca077341656948de09d8670971ee5641b" translate="yes" xml:space="preserve">
          <source>YEAR</source>
          <target state="translated">YEAR</target>
        </trans-unit>
        <trans-unit id="8950dbdc07cdfd7ff881e7c0db4609138b09ed64" translate="yes" xml:space="preserve">
          <source>YUV is not represented by describing the size of the color channels. This is because YUV often use macro pixels, making the concept of sperate color channels invalid. Instead the different YUV layouts are described with this enum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879e32326c5217968ac8e3a14e4a8a5214957264" translate="yes" xml:space="preserve">
          <source>Year</source>
          <target state="translated">Year</target>
        </trans-unit>
        <trans-unit id="234d9387958532e916ef39542505ecacedc31440" translate="yes" xml:space="preserve">
          <source>Year (int)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc45350ab7c6b3615f5847a5fd3f6c39af69fb78" translate="yes" xml:space="preserve">
          <source>Year, month, and day values of date, as well as hour, minute, and second values of time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe9620055636bd0b5069b204b68b4ae79e66fc5" translate="yes" xml:space="preserve">
          <source>Yellow curve: effect applied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5397e0583f14f6c88de06b1ef28f460a1fb5b0ae" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">Yes</target>
        </trans-unit>
        <trans-unit id="5ce7e259020fe1c34cbe494b8185d3936e414544" translate="yes" xml:space="preserve">
          <source>Yes (&lt;a href=&quot;qtglobal#qint64-typedef&quot;&gt;qint64&lt;/a&gt; range)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46f23e27abbe09e6d64ecd0756f1e1914f40d92" translate="yes" xml:space="preserve">
          <source>Yes (Not bundled)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436048676b9ef56822ca094add30b46654703d04" translate="yes" xml:space="preserve">
          <source>Yes (arbitrary)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b43332482f2278b23be3c7fd8aa5726e28a3518" translate="yes" xml:space="preserve">
          <source>Yes (bundled)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7985b06a3a417e7221880b4da5191f2b773bc1" translate="yes" xml:space="preserve">
          <source>Yes (full range)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f93fa569f1c070e9373c86171aab80c08bcdc5" translate="yes" xml:space="preserve">
          <source>Yes (received by &lt;a href=&quot;qfuturewatcher&quot;&gt;QFutureWatcher&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd918dccabf946bfc1bcc8be3de59d43700debe" translate="yes" xml:space="preserve">
          <source>Yes (received by &lt;a href=&quot;qml-qtqml-workerscript&quot;&gt;WorkerScript&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20f571e90e3a8355939d4e8d14d3a57e5a3c8b8" translate="yes" xml:space="preserve">
          <source>Yes (received by &lt;a href=&quot;qthread&quot;&gt;QThread&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c732f7156e94033f44e752c6ea0378a1f3b54a6f" translate="yes" xml:space="preserve">
          <source>Yes (received by a worker &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3735a33b49efa2998541590751e4f9c66cb8f04e" translate="yes" xml:space="preserve">
          <source>Yes &lt;sup&gt;1&lt;/sup&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db7084bf5d9415bbaf96a3dbffcb5455dd06689" translate="yes" xml:space="preserve">
          <source>Yes &lt;sup&gt;2&lt;/sup&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce975a04d16b720d9bc54f9fb3e5618742dc8ba" translate="yes" xml:space="preserve">
          <source>Yes &lt;sup&gt;3&lt;/sup&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1696149c59259541ba3a1d3a3c3c107fc68c94e9" translate="yes" xml:space="preserve">
          <source>Yes*</source>
          <target state="translated">Yes*</target>
        </trans-unit>
        <trans-unit id="f3b5a8ebfc9a3977de3fe0550875694447f58d93" translate="yes" xml:space="preserve">
          <source>Yields execution of the current thread to another runnable thread, if any. Note that the operating system decides to which thread to switch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c548ea44296aef993ca0d9061d2a0ede9480fca" translate="yes" xml:space="preserve">
          <source>You almost never have to reimplement the setVisible() function. If you need to change some settings before a widget is shown, use &lt;a href=&quot;qwidget#showEvent&quot;&gt;showEvent&lt;/a&gt;() instead. If you need to do some delayed initialization use the Polish event delivered to the &lt;a href=&quot;qwidget#event&quot;&gt;event&lt;/a&gt;() function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c83d25feb73bbf23ce773ce86734828ace6f192" translate="yes" xml:space="preserve">
          <source>You also get the document (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03096927b13317f76aed26e721affc84bce66bfa" translate="yes" xml:space="preserve">
          <source>You are now given an option to choose the App ID to use for this profile, which will be the unique App ID you created in the previous section. Once again make sure that the App ID does not contain any wildcard characters (&amp;ldquo;*&amp;rdquo;) as it is not be possible to use the In-App Purchasing service with such an App ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd787bde2ea0a343c6121011cf8988ba82786d30" translate="yes" xml:space="preserve">
          <source>You are, of course, not required to use the item-based approach; you could instead rely entirely on the &lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt; interface when working with the model, or use a combination of the two as appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59e2ce4559ac695c70aa7c9a4db5e4adec27d432" translate="yes" xml:space="preserve">
          <source>You call &lt;a href=&quot;qsgengine#initialize&quot;&gt;initialize&lt;/a&gt;() first with the &lt;a href=&quot;qopenglcontext&quot;&gt;QOpenGLContext&lt;/a&gt; that you want to use with this renderer. This will return a null renderer otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22db993ffd75400a71285eb29619e00206a2a6ee" translate="yes" xml:space="preserve">
          <source>You can abandon the connection at any point while you are dragging the connection path by pressing &lt;b&gt;Esc&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f36ad4d6284d1c923e088789ea255cfc6b7533" translate="yes" xml:space="preserve">
          <source>You can access the attributes of an element with code like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a1a8cdc7100f27e7b3a5c98b4aea304a21105c5" translate="yes" xml:space="preserve">
          <source>You can access the entity's &lt;a href=&quot;qdomentity#publicId&quot;&gt;publicId&lt;/a&gt;(), &lt;a href=&quot;qdomentity#systemId&quot;&gt;systemId&lt;/a&gt;() and &lt;a href=&quot;qdomentity#notationName&quot;&gt;notationName&lt;/a&gt;() when available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee180b49ad904224443a00822af8d3cec4d33434" translate="yes" xml:space="preserve">
          <source>You can access the following state properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f7015bd8c1e2fd1b92a364ede98e66d53dbb51" translate="yes" xml:space="preserve">
          <source>You can access the handle position through the &lt;code&gt;styleData.handlePosition&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f76dced9a858ca5177fa63307af910727f824d37" translate="yes" xml:space="preserve">
          <source>You can access the handle width through the &lt;code&gt;styleData.handleWidth&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9507bc9d3a2b87831cc3ddd7b2e5377522211a53" translate="yes" xml:space="preserve">
          <source>You can add a file extension to the filter using '+='. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c5de29a86bb6a9471af7db153f3adbb856b562" translate="yes" xml:space="preserve">
          <source>You can add a page before or after the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6602600ace7514786f325c34c08ef29c7b4a5cbf" translate="yes" xml:space="preserve">
          <source>You can add an optional border to a rectangle with its own color and thickness by setting the &lt;a href=&quot;qml-qtquick-rectangle#border.color-prop&quot;&gt;border.color&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-rectangle#border.width-prop&quot;&gt;border.width&lt;/a&gt; properties. Set the color to &quot;transparent&quot; to paint a border without a fill color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f5dadb6338bb14bb572806ca494a54470c8512" translate="yes" xml:space="preserve">
          <source>You can add comments to project files. Comments begin with the &lt;code&gt;#&lt;/code&gt; character and continue to the end of the same line. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe532ce94de371ca3ac16dd7d03807c40f81f955" translate="yes" xml:space="preserve">
          <source>You can add more data by calling &lt;a href=&quot;qcborstreamreader#addData&quot;&gt;addData&lt;/a&gt;() or by setting a different source device using &lt;a href=&quot;qcborstreamreader#setDevice&quot;&gt;setDevice&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69dbafc2ce960f628ecaff623b7d0fcbe941d004" translate="yes" xml:space="preserve">
          <source>You can add new menus to the main window's menu bar by calling &lt;code&gt;menuBar()&lt;/code&gt;, which returns the &lt;a href=&quot;qmenubar&quot;&gt;QMenuBar&lt;/a&gt; for the window, and then add a menu with &lt;a href=&quot;qmenubar#addMenu&quot;&gt;QMenuBar::addMenu&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184c8d88fbd8de99bab8fa703b04797c31a59c58" translate="yes" xml:space="preserve">
          <source>You can add specializations or overloads of this function to your test to enable verbose output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e121c1205788f8c7e08ca84fcd4fea81f6f72b" translate="yes" xml:space="preserve">
          <source>You can add widgets, layouts, stretches (&lt;a href=&quot;qgraphicslinearlayout#addStretch&quot;&gt;addStretch&lt;/a&gt;(), &lt;a href=&quot;qgraphicslinearlayout#insertStretch&quot;&gt;insertStretch&lt;/a&gt;() or &lt;a href=&quot;qgraphicslinearlayout#setStretchFactor&quot;&gt;setStretchFactor&lt;/a&gt;()), and spacings (&lt;a href=&quot;qgraphicslinearlayout#setItemSpacing&quot;&gt;setItemSpacing&lt;/a&gt;()) to a linear layout. The layout takes ownership of the items. In some cases when the layout item also inherits from &lt;a href=&quot;qgraphicsitem&quot;&gt;QGraphicsItem&lt;/a&gt; (such as &lt;a href=&quot;graphicsview#qgraphicswidget&quot;&gt;QGraphicsWidget&lt;/a&gt;) there will be a ambiguity in ownership because the layout item belongs to two ownership hierarchies. See the documentation of &lt;a href=&quot;qgraphicslayoutitem#setOwnedByLayout&quot;&gt;QGraphicsLayoutItem::setOwnedByLayout&lt;/a&gt;() how to handle this. You can access each item in the layout by calling &lt;a href=&quot;qgraphicslinearlayout#count&quot;&gt;count&lt;/a&gt;() and &lt;a href=&quot;qgraphicslinearlayout#itemAt&quot;&gt;itemAt&lt;/a&gt;(). Calling &lt;a href=&quot;qgraphicslinearlayout#removeAt&quot;&gt;removeAt&lt;/a&gt;() or &lt;a href=&quot;qgraphicslinearlayout#removeItem&quot;&gt;removeItem&lt;/a&gt;() will remove an item from the layout, without destroying it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab33edd305a0eca1d0ad5f811878fdd1f93a72a" translate="yes" xml:space="preserve">
          <source>You can adjust a number of parameters that will affect images and video taken with the corresponding &lt;a href=&quot;qcamera&quot;&gt;QCamera&lt;/a&gt; object - see the &lt;a href=&quot;qcameraexposurecontrol#ExposureParameter-enum&quot;&gt;ExposureParameter&lt;/a&gt; enumeration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd67f19ca725aa499dc5fe6a264c0f996212ec1f" translate="yes" xml:space="preserve">
          <source>You can adjust the effective size hint by reimplementing &lt;a href=&quot;qgraphicslayoutitem#sizeHint&quot;&gt;sizeHint&lt;/a&gt;() in a &lt;a href=&quot;qgraphicslayoutitem&quot;&gt;QGraphicsLayoutItem&lt;/a&gt; subclass, or by calling one of the following functions: &lt;a href=&quot;qgraphicslayoutitem#setMinimumSize&quot;&gt;setMinimumSize&lt;/a&gt;(), &lt;a href=&quot;qgraphicslayoutitem#setPreferredSize&quot;&gt;setPreferredSize&lt;/a&gt;, or &lt;a href=&quot;qgraphicslayoutitem#setMaximumSize&quot;&gt;setMaximumSize&lt;/a&gt;() (or a combination of both).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0ac0d15800321965d2ef81c93365fe9557a4bd" translate="yes" xml:space="preserve">
          <source>You can affect the currently playing sprite in two ways. You can arbitrarily force it to immediately start playing any sprite, or you can tell it to gradually transition to a given sprite. If you instruct it to gradually transition, then it will reach the target sprite by going through valid state transitions using the fewest number of intervening sprites (but ignoring relative weightings). This allows you to easily insert a transitional animation between two different sprites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a20b1a26e93e5e6234b41fc4c10bf59f88e29f33" translate="yes" xml:space="preserve">
          <source>You can also access a property by name. To do this you must call &lt;a href=&quot;qobject#property&quot;&gt;QObject::property&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7d6b48d88914cc7389fd7bb3359be6920d312f" translate="yes" xml:space="preserve">
          <source>You can also add extra selectors at runtime for custom behavior. These will be used in any future calls to &lt;a href=&quot;qfileselector#select&quot;&gt;select&lt;/a&gt;(). If the extra selectors list has been changed, calls to &lt;a href=&quot;qfileselector#select&quot;&gt;select&lt;/a&gt;() will use the new list and may return differently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1bbcd1ec398593379dc5e4778ecda28a23f5d65" translate="yes" xml:space="preserve">
          <source>You can also alter the margin and spacing properties for the form's default layout (&lt;b&gt;Layout Default&lt;/b&gt;). These default layout properties will be replaced by the corresponding &lt;b&gt;Layout Function&lt;/b&gt;, if the function is specified, when &lt;code&gt;uic&lt;/code&gt; generates code for the form. The form settings dialog lets you specify functions for both the margin and the spacing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa14b20660aa43b560cc69c27ff76d90c07630ae" translate="yes" xml:space="preserve">
          <source>You can also ask questions on &lt;a href=&quot;xmlprocessing#&quot;&gt;XQuery&lt;/a&gt; mail lists:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8bab0d84b23ac838424e24410ec99f98596932" translate="yes" xml:space="preserve">
          <source>You can also assign the value of a current variable to another variable by prefixing $$ to the variable name. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef32fdcf080790d21d90c05d943087e0f4b687fa" translate="yes" xml:space="preserve">
          <source>You can also build Qt 5 from the source package and configure it according to your target platform. The source packages are obtained from &lt;a href=&quot;http://www.qt.io/download/&quot;&gt;http://www.qt.io/download/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757428cd661ba56358615f30b8797618d09973cc" translate="yes" xml:space="preserve">
          <source>You can also call &lt;a href=&quot;qvector#fill&quot;&gt;fill&lt;/a&gt;() at any time to fill the vector with a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b701cc84318343902158279c29b1a61cf36b3ab8" translate="yes" xml:space="preserve">
          <source>You can also call this function after &lt;a href=&quot;qdtls#doHandshake&quot;&gt;doHandshake&lt;/a&gt;() encountered the QDtlsError::PeerVerificationError error, and then resume the handshake by calling &lt;a href=&quot;qdtls#resumeHandshake&quot;&gt;resumeHandshake&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51135e1450494f190767361eaa5181478ea869c9" translate="yes" xml:space="preserve">
          <source>You can also change the active window with the keyboard. By pressing the control and tab keys at the same time, the next (using the current &lt;a href=&quot;qmdiarea#WindowOrder-enum&quot;&gt;WindowOrder&lt;/a&gt;) subwindow will be activated. By pressing control, shift, and tab, you will activate the previous window. This is equivalent to calling &lt;a href=&quot;qmdiarea#activateNextSubWindow&quot;&gt;activateNextSubWindow()&lt;/a&gt; and &lt;a href=&quot;qmdiarea#activatePreviousSubWindow&quot;&gt;activatePreviousSubWindow()&lt;/a&gt;. Note that these shortcuts overrides global shortcuts, but not the &lt;a href=&quot;qmdiarea&quot;&gt;QMdiArea&lt;/a&gt;s shortcuts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad837168cd24930a6fcdeb8e09c2a6a4693b546" translate="yes" xml:space="preserve">
          <source>You can also connect to any signals or call methods defined in the component using &lt;a href=&quot;qmetaobject#invokeMethod&quot;&gt;QMetaObject::invokeMethod&lt;/a&gt;() and &lt;a href=&quot;qobject#connect&quot;&gt;QObject::connect&lt;/a&gt;(). See &lt;a href=&quot;#invoking-qml-methods&quot;&gt;Invoking QML Methods&lt;/a&gt; and &lt;a href=&quot;#connecting-to-qml-signals&quot;&gt;Connecting to QML Signals&lt;/a&gt; below for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f0d52258e0e2c0f80f798d40d8485b14b989f1" translate="yes" xml:space="preserve">
          <source>You can also connect to functors or C++11 lambdas:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aeee35f3af494ab1218cf878db5db0cfbd49d8a" translate="yes" xml:space="preserve">
          <source>You can also control the miter limit for the generated outline using the &lt;a href=&quot;qpainterpathstroker#setMiterLimit&quot;&gt;setMiterLimit&lt;/a&gt;() function. The miter limit describes how far from each join the miter join can extend. The limit is specified in the units of width so the pixelwise miter limit will be &lt;code&gt;miterlimit * width&lt;/code&gt;. This value is only used if the join style is &lt;a href=&quot;qt#PenJoinStyle-enum&quot;&gt;Qt::MiterJoin&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8153b5c325e1f3e20dfe7e3eab27a15ba9aa5b" translate="yes" xml:space="preserve">
          <source>You can also create rounded rectangles using the &lt;a href=&quot;qml-qtquick-rectangle#radius-prop&quot;&gt;radius&lt;/a&gt; property. Since this introduces curved edges to the corners of a rectangle, it may be appropriate to set the &lt;a href=&quot;qml-qtquick-item#antialiasing-prop&quot;&gt;Item::antialiasing&lt;/a&gt; property to improve its appearance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc12180f5a6c33416c3d13f249ba5ae2cc49ba9" translate="yes" xml:space="preserve">
          <source>You can also define custom page sizes with custom names in any units you want and this unit size will be preserved and used as the base for all other unit size calculations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2964105a778e84b7b791b5acca8317ba6d2e5416" translate="yes" xml:space="preserve">
          <source>You can also define preprocessor symbols manually on the command line using the -D option. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495677794f3b89ace45908b5ac29307e19ec7aee" translate="yes" xml:space="preserve">
          <source>You can also define slots to be virtual, which we have found quite useful in practice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5881f7dec3753692040a2095190a6d39972da2bb" translate="yes" xml:space="preserve">
          <source>You can also define the preprocessor symbol manually on the command line. For more information see the documentation of the &lt;a href=&quot;22-qdoc-configuration-generalvariables#defines-variable&quot;&gt;defines&lt;/a&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f1f08cd0cdd7d9805078cddef27cc9df95e659" translate="yes" xml:space="preserve">
          <source>You can also delete child objects yourself, and they will remove themselves from their parents. For example, when the user removes a toolbar it may lead to the application deleting one of its &lt;a href=&quot;qtoolbar&quot;&gt;QToolBar&lt;/a&gt; objects, in which case the tool bar's &lt;a href=&quot;qmainwindow&quot;&gt;QMainWindow&lt;/a&gt; parent would detect the change and reconfigure its screen space accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95cb6f23f06302d6c55586b3d2cce2debaf6184" translate="yes" xml:space="preserve">
          <source>You can also enable or disable hover effects for all Qt Quick Controls 2 applications by setting the &lt;code&gt;QT_QUICK_CONTROLS_HOVER_ENABLED&lt;/code&gt;&lt;a href=&quot;qtquickcontrols2-environment#&quot;&gt;environment variable&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72afa4c9ec40747de29dd7d96f5b0501426360e4" translate="yes" xml:space="preserve">
          <source>You can also get to an item in the stack using &lt;a href=&quot;qml-qtquick-controls-stackview#get-method&quot;&gt;get(index)&lt;/a&gt;. You should use this function if your item depends on another item in the stack, as the function will ensure that the item at the given index gets loaded before it is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a33f696fc2285d8d9e8ab8699aee0ffa6967f4" translate="yes" xml:space="preserve">
          <source>You can also get to an item in the stack using &lt;a href=&quot;qml-qtquick-controls2-stackview#get-method&quot;&gt;get(index)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e9e063bf84db05a18d5971f8741a44387b433c" translate="yes" xml:space="preserve">
          <source>You can also insert new data into the model by calling &lt;a href=&quot;qsqltablemodel#insertRecord&quot;&gt;QSqlTableModel::insertRecord&lt;/a&gt;(). In the following example snippet, a &lt;a href=&quot;qsqlrecord&quot;&gt;QSqlRecord&lt;/a&gt; is populated with book details and appended to the model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c501deaed579413e49d6adf5ad78878b81b429ba" translate="yes" xml:space="preserve">
          <source>You can also limit the maximum &lt;a href=&quot;qml-qtquick-springanimation#velocity-prop&quot;&gt;velocity&lt;/a&gt; of the animation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6718aedb8da51303c93933a9bce250fffde1fa96" translate="yes" xml:space="preserve">
          <source>You can also load the Pepper Flash player from a specific location by using command line arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90610525b32f72962bc25df3630f6b0293f18e18" translate="yes" xml:space="preserve">
          <source>You can also make cells span several rows and columns. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e226768b1d716b4795bc5591a3c92f9af6d2ad31" translate="yes" xml:space="preserve">
          <source>You can also make the listing start at any character or number by simply provide the number or character you want to start at. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0a6623b2478ee740b1552506030425d2261cb8" translate="yes" xml:space="preserve">
          <source>You can also mix and match normal buttons and standard buttons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddd7e8b3087da3cf47c673f2fcc30fd91295ecb0" translate="yes" xml:space="preserve">
          <source>You can also pass string literals to functions that take QStrings as arguments, invoking the &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;(const char *) constructor. Similarly, you can pass a &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; to a function that takes a &lt;code&gt;const char *&lt;/code&gt; argument using the &lt;a href=&quot;qtglobal#qPrintable&quot;&gt;qPrintable&lt;/a&gt;() macro which returns the given &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; as a &lt;code&gt;const char *&lt;/code&gt;. This is equivalent to calling &amp;lt;&lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;&amp;gt;.&lt;a href=&quot;qstring#toLocal8Bit&quot;&gt;toLocal8Bit&lt;/a&gt;().&lt;a href=&quot;qstring#constData&quot;&gt;constData&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b991e25f8827867f24c7f5249caf8015e4a1e5f9" translate="yes" xml:space="preserve">
          <source>You can also provide alternative declarations to those within a scope by using an &lt;code&gt;else&lt;/code&gt; scope. Each &lt;code&gt;else&lt;/code&gt; scope is processed if the conditions for the preceding scopes are false. This allows you to write complex tests when combined with other scopes (separated by the &lt;code&gt;:&lt;/code&gt; operator as above). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6d0774eca1a1bf95fb68001e70ffbcfbee6d1c" translate="yes" xml:space="preserve">
          <source>You can also provide string data as an array of &lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt;s:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d82f617096e1fdc4d66d4406245613cf35796e" translate="yes" xml:space="preserve">
          <source>You can also provide your own custom scene interaction, by creating a subclass of &lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt;, and reimplementing the mouse and key event handlers. To simplify how you programmatically interact with items in the view, &lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt; provides the mapping functions &lt;a href=&quot;qgraphicsview#mapToScene&quot;&gt;mapToScene&lt;/a&gt;() and &lt;a href=&quot;qgraphicsview#mapFromScene&quot;&gt;mapFromScene&lt;/a&gt;(), and the item accessors &lt;a href=&quot;qgraphicsview#items&quot;&gt;items&lt;/a&gt;() and &lt;a href=&quot;qgraphicsview#itemAt&quot;&gt;itemAt&lt;/a&gt;(). These functions allow you to map points, rectangles, polygons and paths between view coordinates and scene coordinates, and to find items on the scene using view coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef938f0ccb2c7c1ceaa0721861944de7db14f17" translate="yes" xml:space="preserve">
          <source>You can also push an array of items (property lists) if you need to push several items in one go. A transition will then only occur between the current item and the last item in the list. Loading the other items will be deferred until needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf46c1c7bd044d1c6d0f2a1cb3299668d6ded843" translate="yes" xml:space="preserve">
          <source>You can also query each device for the formats it supports. A format in this context is a set consisting of a specific byte order, channel, codec, frequency, sample rate, and sample type. A format is represented by the &lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3875ff963bbbe45e51c9421287518368f8326f" translate="yes" xml:space="preserve">
          <source>You can also reimplement &lt;a href=&quot;qabstractitemmodel#hasChildren&quot;&gt;hasChildren&lt;/a&gt;() to provide special behavior for models where the implementation of &lt;a href=&quot;qabstractitemmodel#rowCount&quot;&gt;rowCount&lt;/a&gt;() is expensive. This makes it possible for models to restrict the amount of data requested by views, and can be used as a way to implement lazy population of model data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4749cffbb9b66288d1fa435add580c87bbd307f8" translate="yes" xml:space="preserve">
          <source>You can also retrieve information about where the form is stored using &lt;a href=&quot;qdesignerformwindowinterface#absoluteDir&quot;&gt;absoluteDir&lt;/a&gt;(), its include files using &lt;a href=&quot;qdesignerformwindowinterface#includeHints&quot;&gt;includeHints&lt;/a&gt;(), and its layout and pixmap functions using &lt;a href=&quot;qdesignerformwindowinterface#layoutDefault&quot;&gt;layoutDefault&lt;/a&gt;(), &lt;a href=&quot;qdesignerformwindowinterface#layoutFunction&quot;&gt;layoutFunction&lt;/a&gt;() and &lt;a href=&quot;qdesignerformwindowinterface#pixmapFunction&quot;&gt;pixmapFunction&lt;/a&gt;(). You can find out whether the form window has been modified (but not saved) or not, using the &lt;a href=&quot;qdesignerformwindowinterface#isDirty&quot;&gt;isDirty&lt;/a&gt;() function. You can retrieve its &lt;a href=&quot;qdesignerformwindowinterface#author&quot;&gt;author&lt;/a&gt;(), its &lt;a href=&quot;qdesignerformwindowinterface#contents&quot;&gt;contents&lt;/a&gt;(), its &lt;a href=&quot;qdesignerformwindowinterface#fileName&quot;&gt;fileName&lt;/a&gt;(), associated &lt;a href=&quot;qdesignerformwindowinterface#comment&quot;&gt;comment&lt;/a&gt;() and &lt;a href=&quot;qdesignerformwindowinterface#exportMacro&quot;&gt;exportMacro&lt;/a&gt;(), its mainContainer(), its &lt;a href=&quot;qdesignerformwindowinterface#features&quot;&gt;features&lt;/a&gt;(), its &lt;a href=&quot;qdesignerformwindowinterface#grid&quot;&gt;grid&lt;/a&gt;() and its &lt;a href=&quot;qdesignerformwindowinterface#resourceFiles&quot;&gt;resourceFiles&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c126bedaa418ec54c942d869c3284fb56e31a0a" translate="yes" xml:space="preserve">
          <source>You can also set a custom shortcut key using the &lt;a href=&quot;qabstractbutton#shortcut-prop&quot;&gt;setShortcut&lt;/a&gt;() function. This is useful mostly for buttons that do not have any text, and therefore can't have any automatic shortcut.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="776d36442ba8c212d6868d1db6f17da4d853951d" translate="yes" xml:space="preserve">
          <source>You can also set a default cursor directly on the view by calling &lt;a href=&quot;qwidget#cursor-prop&quot;&gt;QGraphicsView::setCursor&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d747adec72177b9f934103a1016b19735ae1591b" translate="yes" xml:space="preserve">
          <source>You can also set default values for some of the tags in the DITA &lt;code&gt;&amp;lt;prolog&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;metadata&amp;gt;&lt;/code&gt; elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c122cf445df339f82cac6dd51fba92d0bb88d7f4" translate="yes" xml:space="preserve">
          <source>You can also specify the .qml source files with a wildcard match. The search is not recursive so you need to specify each directory where there are user interface strings in the source code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2837828315926b39628f791f19c61ae0299bddd2" translate="yes" xml:space="preserve">
          <source>You can also specify the form's &lt;b&gt;Include Hints&lt;/b&gt;; i.e., provide a list of the header files which will then be included in the form window's associated UI file. Header files may be local, i.e., relative to the project's directory, &lt;code&gt;&quot;mywidget.h&quot;&lt;/code&gt;, or global, i.e. part of Qt or the compilers standard libraries: &lt;code&gt;&amp;lt;QtWidgets/QWidget&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5d1819a1307d5494b6da26356b6ae06bd6e11a" translate="yes" xml:space="preserve">
          <source>You can also twist the coordinate system around the origin using the &lt;a href=&quot;qpainter#shear&quot;&gt;QPainter::shear&lt;/a&gt;() function. All the transformation operations operate on &lt;a href=&quot;qpainter&quot;&gt;QPainter&lt;/a&gt;'s transformation matrix that you can retrieve using the &lt;a href=&quot;qpainter#worldTransform&quot;&gt;QPainter::worldTransform&lt;/a&gt;() function. A matrix transforms a point in the plane to another point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5c11dae8a79264f797e9207813f80f77e79d05" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;qcamerainfo&quot;&gt;QCameraInfo&lt;/a&gt; to get general information about a camera device such as description, physical position on the system, or camera sensor orientation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b715ab75bed6d356a7c7ef6bbd3fc1c8954e989b" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;qcoreapplication&quot;&gt;QCoreApplication&lt;/a&gt; with &lt;a href=&quot;qqmlapplicationengine&quot;&gt;QQmlApplicationEngine&lt;/a&gt;, if you are not using any QML modules which require a &lt;a href=&quot;qguiapplication&quot;&gt;QGuiApplication&lt;/a&gt; (such as &lt;code&gt;QtQuick&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9adce45cacc80c5e505a29cae9a44d0970cf35e6" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;qmodbusreply#isFinished&quot;&gt;isFinished&lt;/a&gt;() to check if a QNetworkReply has finished even before you receive the finished() signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae390658db8eb2fb14dd0ab7f977ff35e2a6b236" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;qnetworkreply#isFinished&quot;&gt;isFinished&lt;/a&gt;() to check if a &lt;a href=&quot;qnetworkreply&quot;&gt;QNetworkReply&lt;/a&gt; has finished even before you receive the finished() signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3786e8c874b0b3baeb15b0f97a53c8080a74dce3" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;qregularexpressionmatchiterator#peekNext&quot;&gt;peekNext()&lt;/a&gt; to get the next result without advancing the iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c464f518a3d126e3d8ae5eb18ad568dfed3fa4c1" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;qsqltablemodel#data&quot;&gt;QSqlTableModel::data&lt;/a&gt;() and &lt;a href=&quot;qsqltablemodel#setData&quot;&gt;QSqlTableModel::setData&lt;/a&gt;(), which are inherited from &lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt;, to access the data. For example, here's how to update a record using &lt;a href=&quot;qsqltablemodel#setData&quot;&gt;setData()&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61937b948022dc4fb6c09f7b42b4e90bb5731ed" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;-opengl dynamic&lt;/code&gt;, which enable applications to dynamically switch between the available options at runtime. For more details about the benefits of using dynamic GL-switching, see Graphics Drivers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d493bf3a199a27a17796ddcea05a4b9d65fb783e" translate="yes" xml:space="preserve">
          <source>You can also use a &lt;code&gt;qt.conf&lt;/code&gt; file to override the hard-coded paths that are compiled into the Qt library. For more information, see the &lt;a href=&quot;qt-conf&quot;&gt;Using qt.conf&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d2596f8a608f4b6e3ff7ef89f087753b414ee38" translate="yes" xml:space="preserve">
          <source>You can also use a data stream to read/write &lt;a href=&quot;qdatastream#raw&quot;&gt;raw unencoded binary data&lt;/a&gt;. If you want a &quot;parsing&quot; input stream, see &lt;a href=&quot;qtextstream&quot;&gt;QTextStream&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df1628e7e9cc33d71e1e6618f9663af951c44604" translate="yes" xml:space="preserve">
          <source>You can also use a traditional model with roles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c21790a89c55f7c7d82c2d327eb88e50ef0794b3" translate="yes" xml:space="preserve">
          <source>You can also use conditionals on the type of the message using &lt;code&gt;%{if-debug}&lt;/code&gt;, &lt;code&gt;%{if-info}&lt;/code&gt;&lt;code&gt;%{if-warning}&lt;/code&gt;, &lt;code&gt;%{if-critical}&lt;/code&gt; or &lt;code&gt;%{if-fatal}&lt;/code&gt; followed by an &lt;code&gt;%{endif}&lt;/code&gt;. What is inside the &lt;code&gt;%{if-*}&lt;/code&gt; and &lt;code&gt;%{endif}&lt;/code&gt; will only be printed if the type matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8935b6113cbd66982105a347744d7f4a2caa6d6" translate="yes" xml:space="preserve">
          <source>You can also use configuration variables to get QDoc to support &lt;a href=&quot;25-qdoc-configuration-derivedprojects#&quot;&gt;derived projects&lt;/a&gt;, i.e QDoc can generate links in your project's documentation to elements in the Qt online documentation. See the &lt;a href=&quot;25-qdoc-configuration-derivedprojects#&quot;&gt;Supporting Derived projects&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d14a6f5f5d767ff504c0c870c6ef2700611094" translate="yes" xml:space="preserve">
          <source>You can also use named or positional binding to associate parameters to actual values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d1f1db299087fff54ac5faa2a8dad069ba19bf" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;CONSTANT&lt;/code&gt;, &lt;code&gt;READONLY&lt;/code&gt;, &lt;code&gt;PERSISTED&lt;/code&gt;, &lt;code&gt;READWRITE&lt;/code&gt;, &lt;code&gt;READPUSH&lt;/code&gt;, or &lt;code&gt;SOURCEONLYSETTER&lt;/code&gt; keywords in the PROP declaration, which affects how the property is implemented. READPUSH is the default value if no value used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96090252c3cecd3d557607834316f0fb11545d37" translate="yes" xml:space="preserve">
          <source>You can also use this element to group particle system elements related to the logical particle group. Emitters, Affectors and Painters set as direct children of a &lt;a href=&quot;qml-qtquick-particles-particlegroup&quot;&gt;ParticleGroup&lt;/a&gt; will automatically apply to that logical particle group. TrailEmitters will automatically follow the group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29dc22aa4ebbd9c300c2c1f76286e6abe9884b07" translate="yes" xml:space="preserve">
          <source>You can apply a different style to the controls by setting the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f9c01988364bc66a6f8ebd1cb941c6d029c008" translate="yes" xml:space="preserve">
          <source>You can apply toLocaleString() directly to constants, provided the decimal is included in the constant, e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca5115f615392fdd7a0ebf6de0c8504c7f3b7fc" translate="yes" xml:space="preserve">
          <source>You can assign a stretch factor to each item to control how much space it will get compared to the other items. By default, two identical widgets arranged in a linear layout will have the same size, but if the first widget has a stretch factor of 1 and the second widget has a stretch factor of 2, the first widget will get 1/3 of the available space, and the second will get 2/3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f962db6e4de61c03427276ffba512c1bc3d3e0e5" translate="yes" xml:space="preserve">
          <source>You can assign any number of Transforms to an &lt;a href=&quot;qml-qtquick-item&quot;&gt;Item&lt;/a&gt;. Each Transform is applied in order, one at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e6f31bb44eaa43128a71587e635c9bedd38311" translate="yes" xml:space="preserve">
          <source>You can assign menu items by declaring them as children of &lt;a href=&quot;qml-qtquick-extras-piemenu&quot;&gt;PieMenu&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348406ea7ebb30a248237d61de7bce3af70521c6" translate="yes" xml:space="preserve">
          <source>You can at any time save the &lt;a href=&quot;qpainter&quot;&gt;QPainter&lt;/a&gt;'s state by calling the &lt;a href=&quot;qpainter#save&quot;&gt;save&lt;/a&gt;() function which saves all the available settings on an internal stack. The &lt;a href=&quot;qpainter#restore&quot;&gt;restore&lt;/a&gt;() function pops them back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066c2c3b5aa97e479bb07c773815f0f79a12f3fd" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qapplication#setStyle&quot;&gt;QApplication::setStyle&lt;/a&gt;() at any time, but by calling it before the constructor, you ensure that the user's preference, set using the &lt;code&gt;-style&lt;/code&gt; command-line option, is respected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac5a316bb13c54ebea716edcd6e5b21a6121108" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qdiriterator#fileName&quot;&gt;fileName&lt;/a&gt;() or &lt;a href=&quot;qdiriterator#filePath&quot;&gt;filePath&lt;/a&gt;() to get the current entry file name or path, or &lt;a href=&quot;qdiriterator#fileInfo&quot;&gt;fileInfo&lt;/a&gt;() to get a &lt;a href=&quot;qfileinfo&quot;&gt;QFileInfo&lt;/a&gt; for the current entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266f811d77cf96083ca0c9773a5fbb3a68e46fbd" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qgraphicsitem#setZValue&quot;&gt;setZValue&lt;/a&gt;() on an item to explicitly stack it on top of, or under, other sibling items. The default Z value for an item is 0. Items with the same Z value are stacked by insertion order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e553d405e43bcbe0178efe2b65b5520cb5e16e" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qgraphicsitem#stackBefore&quot;&gt;stackBefore&lt;/a&gt;() to reorder the list of children. This will directly modify the insertion order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2d92f4af01239d0a2da4c00a805ff1699ee6c0" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qimagereader#supportedImageFormats&quot;&gt;supportedImageFormats&lt;/a&gt;() for the full list of formats &lt;a href=&quot;qimagereader&quot;&gt;QImageReader&lt;/a&gt; supports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eee8553cf46fa7c1568af9977a0cc4b58cb9b6f" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qimagewriter#supportedImageFormats&quot;&gt;supportedImageFormats&lt;/a&gt;() for the full list of formats &lt;a href=&quot;qimagewriter&quot;&gt;QImageWriter&lt;/a&gt; supports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a054baf5aa3e3dc4f313ac8e48f100d267cb953" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qmovie#supportedFormats&quot;&gt;supportedFormats&lt;/a&gt;() for the full list of formats &lt;a href=&quot;qmovie&quot;&gt;QMovie&lt;/a&gt; supports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0e5220d58e34d95a1d7170b2d86e8871111711" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qsharedmemory#key&quot;&gt;key&lt;/a&gt;() to retrieve the platform independent key. Internally, &lt;a href=&quot;qsharedmemory&quot;&gt;QSharedMemory&lt;/a&gt; converts this key into a platform specific key. If you instead call &lt;a href=&quot;qsharedmemory#nativeKey&quot;&gt;nativeKey&lt;/a&gt;(), you will get the platform specific, converted key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0468d4a2a98289709e622f5d5523a0fb86e87fd8" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qsharedmemory#nativeKey&quot;&gt;nativeKey&lt;/a&gt;() to retrieve the native key. If a native key has been assigned, calling &lt;a href=&quot;qsharedmemory#key&quot;&gt;key&lt;/a&gt;() will return a null string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869f7bc8d5f0cae422fd3a3b496f9d5dde0b1ae0" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qsslcertificate#isNull&quot;&gt;isNull&lt;/a&gt;() to check if your certificate is null. By default, &lt;a href=&quot;qsslcertificate&quot;&gt;QSslCertificate&lt;/a&gt; constructs a null certificate. A null certificate is invalid, but an invalid certificate is not necessarily null. If you want to reset all contents in a certificate, call &lt;a href=&quot;qsslcertificate#clear&quot;&gt;clear&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c14248084cd80c2e7e3c44a1b1da3e59b73c4c" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qsslcipher#isNull&quot;&gt;isNull&lt;/a&gt;() after construction to check if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53daf6e6fbe231ffde65b65f224194cc96add9e" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qsslsocket#sessionCipher&quot;&gt;sessionCipher&lt;/a&gt;() to find which cryptographic cipher is used to encrypt and decrypt your data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1be65e79672ab83c546ff945871bfb88e693ec" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qtextdocumentwriter#supportedDocumentFormats&quot;&gt;supportedDocumentFormats&lt;/a&gt;() for the full list of formats &lt;a href=&quot;qtextdocumentwriter&quot;&gt;QTextDocumentWriter&lt;/a&gt; supports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df04995b0df6d53463591dd8840108d7fb8753c" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qwidget#mapFromGlobal&quot;&gt;QWidget::mapFromGlobal&lt;/a&gt;() to translate it to widget coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="971bd83e30d19c61ef8cfd53ddfb855c2961aaea" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;qwidget#mapToGlobal&quot;&gt;QWidget::mapToGlobal&lt;/a&gt;() to translate widget coordinates to global screen coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff659b75af49abcaa2834d479bcb38b060e5bb80" translate="yes" xml:space="preserve">
          <source>You can call peekEventQueue() periodically, when your program is busy performing a long-running operation, to peek into the buffered native event queue. The more time the long-running operation blocks the program from returning control to the main event loop, the more events will accumulate in the buffered XCB event queue. Once control returns to the main event loop these events will be flushed to Qt's event queue, which is a separate event queue from the queue this function is peeking into.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c102681f3fb809d63dcac13c3ffdbdea7956cb" translate="yes" xml:space="preserve">
          <source>You can call this function after assigning a device to the reader to determine the format of the device. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad9b189954a02d4c6f15de6851f8564844351d3" translate="yes" xml:space="preserve">
          <source>You can call this function in a subclass of &lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt; to change the return value of the &lt;a href=&quot;qabstractsocket#localAddress&quot;&gt;localAddress&lt;/a&gt;() function after a connection has been established. This feature is commonly used by proxy connections for virtual connection settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a99e2348344094859a3345e5e879e722a81973b" translate="yes" xml:space="preserve">
          <source>You can call this function in a subclass of &lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt; to change the return value of the &lt;a href=&quot;qabstractsocket#localPort&quot;&gt;localPort&lt;/a&gt;() function after a connection has been established. This feature is commonly used by proxy connections for virtual connection settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d56e2dcb1138760e990e125476e1daaa3f28f2" translate="yes" xml:space="preserve">
          <source>You can call this function in a subclass of &lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt; to change the return value of the &lt;a href=&quot;qabstractsocket#peerAddress&quot;&gt;peerAddress&lt;/a&gt;() function after a connection has been established. This feature is commonly used by proxy connections for virtual connection settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437b57a197e2aecb22a98d4a95f24dadf5359875" translate="yes" xml:space="preserve">
          <source>You can call this function in a subclass of &lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt; to change the return value of the &lt;a href=&quot;qabstractsocket#peerName&quot;&gt;peerName&lt;/a&gt;() function after a connection has been established. This feature is commonly used by proxy connections for virtual connection settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cab67ed1f4650a038d334c5e25161798cf32ae5" translate="yes" xml:space="preserve">
          <source>You can call this function in a subclass of &lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt; to change the return value of the &lt;a href=&quot;qabstractsocket#peerPort&quot;&gt;peerPort&lt;/a&gt;() function after a connection has been established. This feature is commonly used by proxy connections for virtual connection settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6d7e0e7f86cc7e624580c1b939add280aec065" translate="yes" xml:space="preserve">
          <source>You can call this function occasionally when your program is busy doing a long operation (e.g. copying a file).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af151fcabedbc9aa30701c67105488402f740beb" translate="yes" xml:space="preserve">
          <source>You can call this function occasionally when your program is busy performing a long operation (e.g. copying a file).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ec3f185c0749bf1366ce1f13417588f46fae86" translate="yes" xml:space="preserve">
          <source>You can call this function to notify &lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt; of changes to the background or the foreground of the scene. It is commonly used for scenes with tile-based backgrounds to notify changes when &lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt; has enabled background caching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85368f788c53ae9779e8196241d7f5b5993f1227" translate="yes" xml:space="preserve">
          <source>You can change a tab's text and icon using &lt;a href=&quot;qtabwidget#setTabText&quot;&gt;setTabText&lt;/a&gt;() or &lt;a href=&quot;qtabwidget#setTabIcon&quot;&gt;setTabIcon&lt;/a&gt;(). A tab and its associated page can be removed with &lt;a href=&quot;qtabwidget#removeTab&quot;&gt;removeTab&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4077001c128e497c2a59571080d70d4c81f6ce3c" translate="yes" xml:space="preserve">
          <source>You can change between the frequency bands using &lt;a href=&quot;qradiotuner#setBand&quot;&gt;setBand&lt;/a&gt;() however it is recommended that you check to make sure the band is available first using &lt;a href=&quot;qradiotuner#isBandSupported&quot;&gt;isBandSupported&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a71bffb5b5ae071e33978a71be49d3bcd43d88b" translate="yes" xml:space="preserve">
          <source>You can change the default class name by passing &lt;code&gt;classname&lt;/code&gt; as the sixth argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235d25f60e037655ef416b056c9c1eb400337feb" translate="yes" xml:space="preserve">
          <source>You can change the filenames as long as the Info.plist and filenames stay in sync.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14f27ac7c5293fdd55e2ad274298193ecff2646" translate="yes" xml:space="preserve">
          <source>You can change the language that Qt translation functions use by adding and removing translators with &lt;a href=&quot;qcoreapplication#installTranslator&quot;&gt;QCoreApplication::installTranslator&lt;/a&gt;() and &lt;a href=&quot;qcoreapplication#removeTranslator&quot;&gt;QCoreApplication::removeTranslator&lt;/a&gt;(). Afterwards you can call &lt;a href=&quot;qqmlengine#retranslate&quot;&gt;QQmlEngine::retranslate&lt;/a&gt;() to trigger a refresh of all bindings that use translations. As a result, your user interface will switch, dynamically, to the newly selected language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba446120ef49ca1e35de1ac0bb1d5f7d2dbd162" translate="yes" xml:space="preserve">
          <source>You can change the name of the header file to be generated by passing &lt;code&gt;basename&lt;/code&gt; as the fifth argument. The &lt;code&gt;.h&lt;/code&gt; suffix is always added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="433ead8a5fd65d81847908050064fedc452a2eb4" translate="yes" xml:space="preserve">
          <source>You can change the text with &lt;a href=&quot;qlineedit#text-prop&quot;&gt;setText&lt;/a&gt;() or &lt;a href=&quot;qlineedit#insert&quot;&gt;insert&lt;/a&gt;(). The text is retrieved with &lt;a href=&quot;qlineedit#text-prop&quot;&gt;text&lt;/a&gt;(); the displayed text (which may be different, see &lt;a href=&quot;qlineedit#EchoMode-enum&quot;&gt;EchoMode&lt;/a&gt;) is retrieved with &lt;a href=&quot;qlineedit#displayText-prop&quot;&gt;displayText&lt;/a&gt;(). Text can be selected with &lt;a href=&quot;qlineedit#setSelection&quot;&gt;setSelection&lt;/a&gt;() or &lt;a href=&quot;qlineedit#selectAll&quot;&gt;selectAll&lt;/a&gt;(), and the selection can be &lt;a href=&quot;qlineedit#cut&quot;&gt;cut&lt;/a&gt;(), &lt;a href=&quot;qlineedit#copy&quot;&gt;copy&lt;/a&gt;()ied and &lt;a href=&quot;qlineedit#paste&quot;&gt;paste&lt;/a&gt;()d. The text can be aligned with &lt;a href=&quot;qlineedit#alignment-prop&quot;&gt;setAlignment&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac0de248d63673a9a7a19a1800ca89ba50a6f08" translate="yes" xml:space="preserve">
          <source>You can change the value for a key by using value() on the left side of an assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d2343121df2500d135119a5eb809939c4a42df" translate="yes" xml:space="preserve">
          <source>You can change the value of an item by using operator*() on the left side of an assignment, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2ad1d81119e3ac96ce8f06f90dea239850b58c5" translate="yes" xml:space="preserve">
          <source>You can change the value of an item by using operator*() on the left side of an assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb0ad31b338e50966943b1a224a679a7b192068" translate="yes" xml:space="preserve">
          <source>You can change the value of an item by using value() on the left side of an assignment, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ea80baf7b4910c7c2b05276a05cd852e400087" translate="yes" xml:space="preserve">
          <source>You can change the value of an item by using value() on the left side of an assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4324051185b351a36ed300d336d169d964d5ff63" translate="yes" xml:space="preserve">
          <source>You can check at compile time which features are supported on your hardware using various macros. These will tell you if your hardware always, sometimes, or does not support a particular operation. The macros have the form Q_ATOMIC_INT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b488a9bd1be27ba5816390ec995b4e682b463a9" translate="yes" xml:space="preserve">
          <source>You can check at compile time which features are supported on your hardware using various macros. These will tell you if your hardware always, sometimes, or does not support a particular operation. The macros have the form Q_ATOMIC_POINTER_</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="745ef729e308309bca469dcb14b8dcbb77539c8b" translate="yes" xml:space="preserve">
          <source>You can check for a file's existence using &lt;a href=&quot;qfile#exists-1&quot;&gt;exists&lt;/a&gt;(), and remove a file using &lt;a href=&quot;qfile#remove&quot;&gt;remove&lt;/a&gt;(). (More advanced file system related operations are provided by &lt;a href=&quot;qfileinfo&quot;&gt;QFileInfo&lt;/a&gt; and &lt;a href=&quot;qdir&quot;&gt;QDir&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c13ec37aa1c876ee4a825efa34056f7b06bf83" translate="yes" xml:space="preserve">
          <source>You can check if a MIME type is convertible using &lt;a href=&quot;qwinmime#canConvertFromMime&quot;&gt;canConvertFromMime&lt;/a&gt;() and can perform conversions with &lt;a href=&quot;qwinmime#convertToMime&quot;&gt;convertToMime&lt;/a&gt;() and &lt;a href=&quot;qwinmime#convertFromMime&quot;&gt;convertFromMime&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ebf9dc37d433f1d673ad561e225f836415d6b9" translate="yes" xml:space="preserve">
          <source>You can check the return value of this function using a scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb024d1249f2b042fc18b570055da80b0b4a320" translate="yes" xml:space="preserve">
          <source>You can check whether the file was included by using this function as the condition for a scope. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b418f86f5b02114541cb76c8c268a298097ecc" translate="yes" xml:space="preserve">
          <source>You can choose which device to use with a &lt;a href=&quot;qml-multimedia#camera&quot;&gt;Camera&lt;/a&gt; object by setting its &lt;a href=&quot;qml-qtmultimedia-camera#deviceId-prop&quot;&gt;deviceId&lt;/a&gt; property to this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c84431d3d79a6ce79fb96997856a8b0d05f40ea" translate="yes" xml:space="preserve">
          <source>You can configure a factory to use the system proxy's settings. Call the &lt;a href=&quot;qnetworkproxyfactory#setUseSystemConfiguration&quot;&gt;setUseSystemConfiguration&lt;/a&gt;() function with true to enable this behavior, or false to disable it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b37e3c73973874c6c531b08b7ab6fe00f93f860" translate="yes" xml:space="preserve">
          <source>You can connect as many signals as you want to a single slot, and a signal can be connected to as many slots as you need. It is even possible to connect a signal directly to another signal. (This will emit the second signal immediately whenever the first is emitted.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f04c04e2b9621974034cc2338f595b1ee5c4f8" translate="yes" xml:space="preserve">
          <source>You can connect this signal to other components to help maintain a consistent appearance for your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2dc1f6e5be1897666cb61d3a64694f7609f1f79" translate="yes" xml:space="preserve">
          <source>You can construct a &lt;a href=&quot;qprintpreviewdialog&quot;&gt;QPrintPreviewDialog&lt;/a&gt; with an existing &lt;a href=&quot;qprinter&quot;&gt;QPrinter&lt;/a&gt; object, or you can have &lt;a href=&quot;qprintpreviewdialog&quot;&gt;QPrintPreviewDialog&lt;/a&gt; create one for you, which will be the system default printer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2236fd9e00a2663ce03e2a9c51bc9ea15f97b9d7" translate="yes" xml:space="preserve">
          <source>You can construct an audio input with the system's &lt;a href=&quot;qaudiodeviceinfo#defaultInputDevice&quot;&gt;default audio input device&lt;/a&gt;. It is also possible to create &lt;a href=&quot;qaudioinput&quot;&gt;QAudioInput&lt;/a&gt; with a specific &lt;a href=&quot;qaudiodeviceinfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt;. When you create the audio input, you should also send in the &lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; to be used for the recording (see the &lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; class description for details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5508bd242e71c3ff3fd70bd2ee29416209c60c3e" translate="yes" xml:space="preserve">
          <source>You can construct an audio output with the system's &lt;a href=&quot;qaudiodeviceinfo#defaultOutputDevice&quot;&gt;default audio output device&lt;/a&gt;. It is also possible to create &lt;a href=&quot;qaudiooutput&quot;&gt;QAudioOutput&lt;/a&gt; with a specific &lt;a href=&quot;qaudiodeviceinfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt;. When you create the audio output, you should also send in the &lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; to be used for the playback (see the &lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; class description for details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd63ec74cc7070408c64f2a429a3c266f3e8ad29" translate="yes" xml:space="preserve">
          <source>You can control the selection behavior and mode by manipulating their view properties; see &lt;a href=&quot;qabstractitemview#selectionMode-prop&quot;&gt;QAbstractItemView::selectionMode&lt;/a&gt; and &lt;a href=&quot;qabstractitemview#selectionBehavior-prop&quot;&gt;QAbstractItemView::selectionBehavior&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba126d7806492f01cba0ea66c4894b19b17bf78" translate="yes" xml:space="preserve">
          <source>You can control the speed of the movie playback by calling &lt;a href=&quot;qmovie#speed-prop&quot;&gt;setSpeed&lt;/a&gt;(), which takes the percentage of the original speed as an argument. Pause the movie by calling &lt;a href=&quot;qmovie#setPaused&quot;&gt;setPaused&lt;/a&gt;(true). &lt;a href=&quot;qmovie&quot;&gt;QMovie&lt;/a&gt; will then enter &lt;a href=&quot;qmovie#MovieState-enum&quot;&gt;Paused&lt;/a&gt; state and emit &lt;a href=&quot;qmovie#stateChanged&quot;&gt;stateChanged&lt;/a&gt;(). If you call &lt;a href=&quot;qmovie#setPaused&quot;&gt;setPaused&lt;/a&gt;(false), &lt;a href=&quot;qmovie&quot;&gt;QMovie&lt;/a&gt; will reenter &lt;a href=&quot;qmovie#MovieState-enum&quot;&gt;Running&lt;/a&gt; state and start the movie again. To stop the movie, call &lt;a href=&quot;qmovie#stop&quot;&gt;stop&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea40f64071fd16d6a450de1ba0fa0a48419dc2b" translate="yes" xml:space="preserve">
          <source>You can control the systems analog radio device using this interface, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15050275c513ddbb8e160cdbe632043155a2206" translate="yes" xml:space="preserve">
          <source>You can control the various design aspects (width, cap styles, join styles and dash pattern) of the outlining using the following functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18fb77b8d3ff8b9950448366531c3b16d4fc0514" translate="yes" xml:space="preserve">
          <source>You can control which actions that are available in the action editor's window using the &lt;a href=&quot;qdesigneractioneditorinterface#manageAction&quot;&gt;manageAction&lt;/a&gt;() and &lt;a href=&quot;qdesigneractioneditorinterface#unmanageAction&quot;&gt;unmanageAction&lt;/a&gt;() functions. An action that is managed by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05fdfa14509c27d7b3469b1865d70bf2c1573e2f" translate="yes" xml:space="preserve">
          <source>You can convert from item to scene coordinates using the functions on the item whose coordinate system you are interested in. See &lt;a href=&quot;qml-qtquick-item#mapFromItem-method&quot;&gt;Item::mapFromItem&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-item#mapToItem-method&quot;&gt;Item::mapToItem&lt;/a&gt; for converting to scene coordinates, or another item's coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec12fe6bcb43434a5e72dcb05675f7f6c2d3afdc" translate="yes" xml:space="preserve">
          <source>You can convert the array to and from text based JSON through &lt;a href=&quot;qjsondocument&quot;&gt;QJsonDocument&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcec33921c6082ebc72b39b589f478ce1490c440" translate="yes" xml:space="preserve">
          <source>You can convert the object to and from text based JSON through &lt;a href=&quot;qjsondocument&quot;&gt;QJsonDocument&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="534b270f6f128c1e4836fc556bc45c0cc022686f" translate="yes" xml:space="preserve">
          <source>You can copy a palette using the copy constructor and test to see if two palettes are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf004a49a18182ff698395a30478fa756037d680" translate="yes" xml:space="preserve">
          <source>You can create DITA map files using three new qdoc commands, the &lt;a href=&quot;#ditamap-command&quot;&gt;ditamap&lt;/a&gt; command, the &lt;a href=&quot;#topicref-command&quot;&gt;topicref&lt;/a&gt; command, and the &lt;a href=&quot;#mapref-command&quot;&gt;mapref&lt;/a&gt; command. How these DITA maps will be used automatically or manually by the documentation build process is still under consideration. This section will be updated as the decisions are made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2527a8a35ed3c09d4e7992a6eeb9496635e8dd48" translate="yes" xml:space="preserve">
          <source>You can create a &lt;a href=&quot;qrubberband&quot;&gt;QRubberBand&lt;/a&gt; whenever you need to render a rubber band around a given area (or to represent a single line), then call &lt;a href=&quot;qrubberband#setGeometry&quot;&gt;setGeometry&lt;/a&gt;(), &lt;a href=&quot;qrubberband#move&quot;&gt;move&lt;/a&gt;() or &lt;a href=&quot;qrubberband#resize&quot;&gt;resize&lt;/a&gt;() to position and size it. A common pattern is to do this in conjunction with mouse events. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d2670db6e847784fdcef92193ea5051294ab5ae" translate="yes" xml:space="preserve">
          <source>You can create a busy indicator by replacing the &quot;indicator&quot; delegate of the &lt;a href=&quot;qml-qtquick-controls-styles-busyindicatorstyle&quot;&gt;BusyIndicatorStyle&lt;/a&gt; with a custom design.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8c9b5d6813b3fe906612f0153008ac364a1ff6" translate="yes" xml:space="preserve">
          <source>You can create a custom &lt;a href=&quot;qml-qtquick-extras-delaybutton&quot;&gt;DelayButton&lt;/a&gt; by replacing the following delegates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e4dad5fb309a294cb7ab5fcfa660a13b321d0d" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for Calendar by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-calendarstyle&quot;&gt;CalendarStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc6bdc2b0031b7c8ff9fde1bd78600a470546fe" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-checkbox&quot;&gt;CheckBox&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-checkboxstyle&quot;&gt;CheckBoxStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c86259fa4020a6af2293632f4f81548c150677" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-combobox&quot;&gt;ComboBox&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-comboboxstyle&quot;&gt;ComboBoxStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425175a08a6c00a16a8f200dea693bbf724eeb08" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-progressbar&quot;&gt;ProgressBar&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-progressbarstyle&quot;&gt;ProgressBarStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77755c5f81167251d51f793b1ce873508b3e87bf" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-radiobutton&quot;&gt;RadioButton&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-radiobuttonstyle&quot;&gt;RadioButtonStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0bcbfb6951c375b6b09c521a205071b75285c5d" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-scrollview&quot;&gt;ScrollView&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-scrollviewstyle&quot;&gt;ScrollViewStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b557750bf1bce5bfc683b6ef6eab51cf250d6e78" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-tableview&quot;&gt;TableView&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-tableviewstyle&quot;&gt;TableViewStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34839eb43d85719dfe000a0a467dd06c983c580" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-textarea&quot;&gt;TextArea&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-textareastyle&quot;&gt;TextAreaStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70cab762458317eecf67b8cf58ad950f691271e7" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-textfield&quot;&gt;TextField&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-textfieldstyle&quot;&gt;TextFieldStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13298eea13591a8dd5bde4fc9f11db5851f46643" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-toolbutton&quot;&gt;ToolButton&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-buttonstyle&quot;&gt;ButtonStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90634d6512c54b070e89d16ca8fd8a676ca9522b" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-controls-treeview&quot;&gt;TreeView&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-treeviewstyle&quot;&gt;TreeViewStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207fa05a27bb39b32fdf3b6975686dab8faea0dd" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-extras-circulargauge&quot;&gt;CircularGauge&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-circulargaugestyle&quot;&gt;CircularGaugeStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d0799d5bc855daeb97366dbeadf7fd9716e2e84" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-extras-delaybutton&quot;&gt;DelayButton&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-delaybuttonstyle&quot;&gt;DelayButtonStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b90d069d4cde873fd5a76ca3ad43ad1a01414e6" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-extras-piemenu&quot;&gt;PieMenu&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-piemenustyle&quot;&gt;PieMenuStyle&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ecb5b4d700dab832e6064968f0cd250eac6716" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-extras-statusindicator&quot;&gt;StatusIndicator&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-statusindicatorstyle&quot;&gt;StatusIndicatorStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21c07c1bb899acf2b6830c423c293a787e9aa01" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a &lt;a href=&quot;qml-qtquick-extras-togglebutton&quot;&gt;ToggleButton&lt;/a&gt; by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-togglebuttonstyle&quot;&gt;ToggleButtonStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40cd5c71732a12a28e97d47e0310f3f8d323bec2" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a Busy Indicator by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-busyindicatorstyle&quot;&gt;BusyIndicatorStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9ff5df7ef46649e6f0fa6064f30e9dc79d66c7" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a Button by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-buttonstyle&quot;&gt;ButtonStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360cde1e8397907d7860c55ee510269abe0bf8eb" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a Dial by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-dialstyle&quot;&gt;DialStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e868d5ce747952060f0419f0520f4cb3392160" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a Gauge by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-gaugestyle&quot;&gt;GaugeStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8cc85aba958c1a16aea02faf9561ca9ecac4e38" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a Slider by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-sliderstyle&quot;&gt;SliderStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13bbb4bd341d6dfe7b8dd1516ccb16cdfb671028" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a Switch by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-switchstyle&quot;&gt;SwitchStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="effdfaa7edc6c55db444699c591536647cf46ae1" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a Tumbler by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-tumblerstyle&quot;&gt;TumblerStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446a6686179da97187584fcd091ad5312c4a7891" translate="yes" xml:space="preserve">
          <source>You can create a custom appearance for a Tumbler by assigning a &lt;a href=&quot;qml-qtquick-controls-styles-tumblerstyle&quot;&gt;TumblerStyle&lt;/a&gt;. To style individual columns, use the &lt;a href=&quot;qml-qtquick-extras-tumblercolumn#delegate-prop&quot;&gt;delegate&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-extras-tumblercolumn#highlight-prop&quot;&gt;highlight&lt;/a&gt; properties of &lt;a href=&quot;qml-qtquick-extras-tumblercolumn&quot;&gt;TumblerColumn&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f66f4cd70e27326922e3cbf75c3fc9031799d0" translate="yes" xml:space="preserve">
          <source>You can create a custom button by replacing the &quot;background&quot; delegate of the &lt;a href=&quot;qml-qtquick-controls-styles-buttonstyle&quot;&gt;ButtonStyle&lt;/a&gt; with a custom design.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1355810e0721ce2f345d9ebbdd3b644440d3d30f" translate="yes" xml:space="preserve">
          <source>You can create a custom circular gauge by replacing the following delegates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e3a5ae9673a23f2d216b68444a89f39971c3c6" translate="yes" xml:space="preserve">
          <source>You can create a custom dial by replacing the following delegates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c2a01d22c9afff963dd6e5b43bda42c2211920" translate="yes" xml:space="preserve">
          <source>You can create a custom gauge by replacing the following delegates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288f6b2162f9f91ebae9649414c55e69f0696b3d" translate="yes" xml:space="preserve">
          <source>You can create a custom look and feel for your application by creating a custom style. There are two approaches to creating a custom style. In the static approach, you either choose an existing &lt;a href=&quot;qstyle&quot;&gt;QStyle&lt;/a&gt; class, subclass it, and reimplement virtual functions to provide the custom behavior, or you create an entire &lt;a href=&quot;qstyle&quot;&gt;QStyle&lt;/a&gt; class from scratch. In the dynamic approach, you modify the behavior of your system style at runtime. The static approach is described below. The dynamic approach is described in &lt;a href=&quot;qproxystyle&quot;&gt;QProxyStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ad3e34d9b4d656aeac2ab49fc410627f27d535" translate="yes" xml:space="preserve">
          <source>You can create a custom pie menu by replacing the following delegates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f6778610cd0e656475c75c216bdb7ded741c91" translate="yes" xml:space="preserve">
          <source>You can create a custom status indicator by defining the &lt;a href=&quot;qml-qtquick-controls-styles-statusindicatorstyle#indicator-prop&quot;&gt;indicator&lt;/a&gt; component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f121f629d5c081c76f6ecaa60a870a58d00065fb" translate="yes" xml:space="preserve">
          <source>You can create a custom toggle button by replacing the same delegates that &lt;a href=&quot;qml-qtquick-controls-styles-buttonstyle&quot;&gt;ButtonStyle&lt;/a&gt; provides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f6695b9e3930c0ec7ca889c36ed33c9e251062" translate="yes" xml:space="preserve">
          <source>You can create a custom tumbler by replacing the following delegates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4b9744696dc275ccca76cc20bde69c216fe08b" translate="yes" xml:space="preserve">
          <source>You can create a custom window background by replacing the &quot;background&quot; delegate of &lt;a href=&quot;qml-qtquick-controls-styles-applicationwindowstyle&quot;&gt;ApplicationWindowStyle&lt;/a&gt; with a custom design.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6591a2ee3f63c45eca9283ae71c70e96d4908bbd" translate="yes" xml:space="preserve">
          <source>You can create a new document type with &lt;a href=&quot;qdomimplementation#createDocumentType&quot;&gt;createDocumentType&lt;/a&gt;() and a new document with &lt;a href=&quot;qdomimplementation#createDocument&quot;&gt;createDocument&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6623e1e3b490c5318077522a0a5cee2a39473068" translate="yes" xml:space="preserve">
          <source>You can create an instance of &lt;a href=&quot;qstorageinfo&quot;&gt;QStorageInfo&lt;/a&gt; by passing the path to the volume's mount point as a constructor parameter, or you can set it using the &lt;a href=&quot;qstorageinfo#setPath&quot;&gt;setPath&lt;/a&gt;() method. The static &lt;a href=&quot;qstorageinfo#mountedVolumes&quot;&gt;mountedVolumes&lt;/a&gt;() method can be used to get the list of all mounted filesystems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="829480e50daca9a93a34fda88700af2a26b33b08" translate="yes" xml:space="preserve">
          <source>You can create your own &lt;a href=&quot;qfiledialog&quot;&gt;QFileDialog&lt;/a&gt; without using the static functions. By calling &lt;a href=&quot;qfiledialog#fileMode-prop&quot;&gt;setFileMode&lt;/a&gt;(), you can specify what the user must select in the dialog:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a3838f1dbb4a734c690ddc098064a2a810fa1f" translate="yes" xml:space="preserve">
          <source>You can customize the look by overriding the &lt;a href=&quot;qml-qtquick-controls-tableview#itemDelegate-prop&quot;&gt;itemDelegate&lt;/a&gt;, &lt;a href=&quot;qml-qtquick-controls-tableview#rowDelegate-prop&quot;&gt;rowDelegate&lt;/a&gt;, or &lt;a href=&quot;qml-qtquick-controls-tableview#headerDelegate-prop&quot;&gt;headerDelegate&lt;/a&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="079d65c3f00934f6ea5929308e9e21672ae6a4cd" translate="yes" xml:space="preserve">
          <source>You can customize the look by overriding the &lt;a href=&quot;qml-qtquick-controls-treeview#itemDelegate-prop&quot;&gt;itemDelegate&lt;/a&gt;, &lt;a href=&quot;qml-qtquick-controls-treeview#rowDelegate-prop&quot;&gt;rowDelegate&lt;/a&gt;, or &lt;a href=&quot;qml-qtquick-controls-treeview#headerDelegate-prop&quot;&gt;headerDelegate&lt;/a&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463567a5e106b6ad2daf8c1ac13fb6c876b1ad2d" translate="yes" xml:space="preserve">
          <source>You can customize the tab order using &lt;a href=&quot;qwidget#setTabOrder&quot;&gt;QWidget::setTabOrder&lt;/a&gt;(). (If you don't, &lt;b&gt;Tab&lt;/b&gt; generally moves focus in the order of widget construction.) Qt Designer provides a means of visually changing the tab order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1ae55e2c86572a71f138384b075905674185ff" translate="yes" xml:space="preserve">
          <source>You can declare &lt;a href=&quot;qml-qtquick-controls2-applicationwindow&quot;&gt;ApplicationWindow&lt;/a&gt; as the root item of your application, and run it by using &lt;a href=&quot;qqmlapplicationengine&quot;&gt;QQmlApplicationEngine&lt;/a&gt;. In this way you can control the window's properties, appearance and layout from QML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81fe2f82d050ac05ad8277a4f8afc0e7a2bda752" translate="yes" xml:space="preserve">
          <source>You can define a sub-set of particle groups in this property in order to provide them with stochastic state transitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5fb08e749435934740d56b5c570f0d70397fd01" translate="yes" xml:space="preserve">
          <source>You can define any number of custom filters in a help project file. It is important to know that you do not have to specify the filter attributes in the same project file. These attributes can be defined in any help file, in a filter section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="825abcc7172d8b4646fcc6ea8b8d936a74cf6d60" translate="yes" xml:space="preserve">
          <source>You can define certain roles as &quot;keys&quot; so that when &lt;a href=&quot;qml-qtquick-xmllistmodel-xmllistmodel#reload-method&quot;&gt;reload()&lt;/a&gt; is called, the model will only add and refresh data that contains new values for these keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaeecd6b9bd486c0633fd7717f2fe7af318d5bcd" translate="yes" xml:space="preserve">
          <source>You can define new user types in &lt;a href=&quot;qlistwidgetitem&quot;&gt;QListWidgetItem&lt;/a&gt; subclasses to ensure that custom items are treated specially.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b29cad43996e1f240cad32a7921bad64dddff95" translate="yes" xml:space="preserve">
          <source>You can define new user types in &lt;a href=&quot;qstandarditem&quot;&gt;QStandardItem&lt;/a&gt; subclasses to ensure that custom items are treated specially; for example, when items are sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eea3a81e8b5b97414f3a597634db4da81f784d9" translate="yes" xml:space="preserve">
          <source>You can define new user types in &lt;a href=&quot;qtablewidgetitem&quot;&gt;QTableWidgetItem&lt;/a&gt; subclasses to ensure that custom items are treated specially.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff0f62525f56eceeb0913301f820ac7ea9ae312" translate="yes" xml:space="preserve">
          <source>You can define new user types in &lt;a href=&quot;qtreewidgetitem&quot;&gt;QTreeWidgetItem&lt;/a&gt; subclasses to ensure that custom items are treated specially; for example, when items are sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a6792f56ceb68eebda15bfc8b7cdd1eb0378d5" translate="yes" xml:space="preserve">
          <source>You can define your own functions for processing the contents of variables as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb68bdde305e41912c0b86c92a19fc6b0e9a9005" translate="yes" xml:space="preserve">
          <source>You can determine whether a given model item lies within a particular range by using the &lt;a href=&quot;qitemselectionrange#contains&quot;&gt;contains&lt;/a&gt;() function. Ranges can also be compared using the overloaded operators for equality and inequality, and the &lt;a href=&quot;qitemselectionrange#intersects&quot;&gt;intersects&lt;/a&gt;() function allows you to determine whether two ranges overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c3a796133e1fe8525e7174d7ab574f91acd989" translate="yes" xml:space="preserve">
          <source>You can develop applications for &lt;a href=&quot;supported-platforms#winrt&quot;&gt;WinRT&lt;/a&gt; just as any other Qt applications. Use your favorite editor or IDE (such as Qt Creator) and create your application or load a Qt example. Then run &lt;code&gt;qmake&lt;/code&gt; and &lt;code&gt;nmake/jom&lt;/code&gt; to build your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c340cc2579d4b0afc54c8aa2e461b156b99f1760" translate="yes" xml:space="preserve">
          <source>You can disable the workaround by setting the &lt;code&gt;QT_ANDROID_DISABLE_GLYPH_CACHE_WORKAROUND&lt;/code&gt; environment variable to &lt;code&gt;1&lt;/code&gt;. You should do so only after verifying that text appears correctly on all targeted devices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70aa67f30c45d022d1ea8d0526be3228755aa52" translate="yes" xml:space="preserve">
          <source>You can disable this constructor by defining &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; when you compile your applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b782a21efcc3961e99ef872172df243bdf3f8f4" translate="yes" xml:space="preserve">
          <source>You can disable this constructor by defining &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through &lt;a href=&quot;qobject#tr&quot;&gt;QObject::tr&lt;/a&gt;(), for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655ac5df2fba1455a6e2024db82b692a418b8c06" translate="yes" xml:space="preserve">
          <source>You can disable this function by defining &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through &lt;a href=&quot;qobject#tr&quot;&gt;QObject::tr&lt;/a&gt;(), for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a62ea86a32a3875b8280f86a1076987edf289cf" translate="yes" xml:space="preserve">
          <source>You can disable this function by defining &lt;code&gt;QT_NO_CAST_TO_ASCII&lt;/code&gt; when you compile your applications. You then need to call &lt;a href=&quot;qstring#toUtf8&quot;&gt;QString::toUtf8&lt;/a&gt;() (or &lt;a href=&quot;qstring#toLatin1&quot;&gt;QString::toLatin1&lt;/a&gt;() or &lt;a href=&quot;qstring#toLocal8Bit&quot;&gt;QString::toLocal8Bit&lt;/a&gt;()) explicitly if you want to convert the data to &lt;code&gt;const char *&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca5fa33c277e170ba30b3f220205f25f4854972" translate="yes" xml:space="preserve">
          <source>You can disable this operator by defining &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; or &lt;code&gt;QT_RESTRICTED_CAST_FROM_ASCII&lt;/code&gt; when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through &lt;a href=&quot;qobject#tr&quot;&gt;QObject::tr&lt;/a&gt;(), for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e13de9983d70a45392e98cb44cd7a7d07ecf6e2d" translate="yes" xml:space="preserve">
          <source>You can disable this operator by defining &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; when you compile your applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be53c328125fbf55aef9e57cfadf8c455ef4425a" translate="yes" xml:space="preserve">
          <source>You can disable this operator by defining &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through &lt;a href=&quot;qobject#tr&quot;&gt;QObject::tr&lt;/a&gt;(), for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17acb1630204a6c07628881f7b722f617ed4161e" translate="yes" xml:space="preserve">
          <source>You can disable this operator by defining &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; when you compile your applications. You then need to call &lt;a href=&quot;qstring#fromUtf8&quot;&gt;QString::fromUtf8&lt;/a&gt;(), &lt;a href=&quot;qstring#fromLatin1&quot;&gt;QString::fromLatin1&lt;/a&gt;(), or &lt;a href=&quot;qstring#fromLocal8Bit&quot;&gt;QString::fromLocal8Bit&lt;/a&gt;() explicitly if you want to convert the byte array to a &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; before doing the comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f45b617a893384b0c81a0e3b6904da8ca6cd5fd" translate="yes" xml:space="preserve">
          <source>You can disable this overload by defining &lt;code&gt;QT_NO_PROCESS_COMBINED_ARGUMENT_START&lt;/code&gt; when you compile your applications. This can be useful if you want to ensure that you are not splitting arguments unintentionally, for example. In virtually all cases, using the other overload is the preferred method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec8aa9bcdca63995eb1f6068f6834165271a65f" translate="yes" xml:space="preserve">
          <source>You can discover all of this information at runtime too. The &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtsensors-sensor-explorer-example.html#&quot;&gt;sensor_explorer&lt;/a&gt; example shows you information about available sensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6332251bed1418cff9b50e436ec690bcee278c1d" translate="yes" xml:space="preserve">
          <source>You can display all of the available objects in a category by clicking on the handle next to the category label. When in &lt;a href=&quot;designer-widget-mode#&quot;&gt;Widget Editing Mode&lt;/a&gt;, you can add objects to a form by dragging the appropriate items from the widget box onto the form, and dropping them in the required locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45fa89ee409210859cd37edf22b01a492b1e1899" translate="yes" xml:space="preserve">
          <source>You can do this by first introducing this line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342707da85b9587161ad6c37354c2cb988b57e6d" translate="yes" xml:space="preserve">
          <source>You can download the Qt 5 installers and source packages from the &lt;a href=&quot;http://qt.io/download#&quot;&gt;Downloads&lt;/a&gt; page. For more information, visit the &lt;a href=&quot;gettingstarted#&quot;&gt;Getting Started with Qt&lt;/a&gt; page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b7b2680be91819b64e4ffea2ebd785ab9b6fdd" translate="yes" xml:space="preserve">
          <source>You can download the Qt 5 installers and sources from the &lt;a href=&quot;http://qt.io/download#&quot;&gt;Downloads&lt;/a&gt; page. For more information, visit the &lt;a href=&quot;gettingstarted#&quot;&gt;Getting Started with Qt&lt;/a&gt; page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d3a9c35e6f34a195c2f2bc349fb8c1542328c5" translate="yes" xml:space="preserve">
          <source>You can download the Qt 5 installers from the &lt;a href=&quot;http://qt.io/download#&quot;&gt;Downloads&lt;/a&gt; page. For more information, see &lt;a href=&quot;gettingstarted#&quot;&gt;Getting Started with Qt&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b048f917e049ce7df4972ef22ec26890be389c" translate="yes" xml:space="preserve">
          <source>You can either create a new &lt;a href=&quot;qextensionfactory&quot;&gt;QExtensionFactory&lt;/a&gt; and reimplement the &lt;a href=&quot;qextensionfactory#createExtension&quot;&gt;QExtensionFactory::createExtension&lt;/a&gt;() function. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5a6f6611eaff68939f365add513a8b2f955f1f" translate="yes" xml:space="preserve">
          <source>You can either create a new &lt;a href=&quot;qextensionfactory&quot;&gt;QExtensionFactory&lt;/a&gt; and reimplement the &lt;a href=&quot;qextensionfactory#createExtension&quot;&gt;QExtensionFactory::createExtension&lt;/a&gt;() function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08497d416d81d10ab1f246d84dda8dc5e11112d2" translate="yes" xml:space="preserve">
          <source>You can either use the DB-Library supplied by Microsoft or the Sybase Open Client (&lt;a href=&quot;https://support.sap.com&quot;&gt;https://support.sap.com&lt;/a&gt;). Configure will try to find NTWDBLIB.LIB to build the plugin:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f7f1b945ab32ff73c4872230e3cde9c091a56d2" translate="yes" xml:space="preserve">
          <source>You can enable clipping by setting the &lt;a href=&quot;qgraphicsitem#GraphicsItemFlag-enum&quot;&gt;ItemClipsToShape&lt;/a&gt; or &lt;a href=&quot;qgraphicsitem#GraphicsItemFlag-enum&quot;&gt;ItemClipsChildrenToShape&lt;/a&gt; flags. The item's clip path is calculated by intersecting all clipping ancestors' shapes. If the item sets &lt;a href=&quot;qgraphicsitem#GraphicsItemFlag-enum&quot;&gt;ItemClipsToShape&lt;/a&gt;, the final clip is intersected with the item's own shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a43b52db653157e75e9c5a767f9c167a720e38" translate="yes" xml:space="preserve">
          <source>You can enable layout mirroring for a particular &lt;a href=&quot;qml-qtquick-item&quot;&gt;Item&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b176cbf4bb241ae04730bd9d7c7233660c30428" translate="yes" xml:space="preserve">
          <source>You can enter &quot;What's This?&quot; mode programmatically with &lt;a href=&quot;qwhatsthis#enterWhatsThisMode&quot;&gt;enterWhatsThisMode&lt;/a&gt;(), check the mode with &lt;a href=&quot;qwhatsthis#inWhatsThisMode&quot;&gt;inWhatsThisMode&lt;/a&gt;(), and return to normal mode with &lt;a href=&quot;qwhatsthis#leaveWhatsThisMode&quot;&gt;leaveWhatsThisMode&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fefbceee99f62497031283759451c5114c239850" translate="yes" xml:space="preserve">
          <source>You can even change the order of the wizard buttons to any arbitrary order using &lt;a href=&quot;qwizard#setButtonLayout&quot;&gt;setButtonLayout&lt;/a&gt;(), and you can add up to three custom buttons (e.g., a &lt;b&gt;Print&lt;/b&gt; button) to the button row. This is achieved by calling &lt;a href=&quot;qwizard#setButton&quot;&gt;setButton&lt;/a&gt;() or &lt;a href=&quot;qwizard#setButtonText&quot;&gt;setButtonText&lt;/a&gt;() with &lt;a href=&quot;qwizard#WizardButton-enum&quot;&gt;CustomButton1&lt;/a&gt;, &lt;a href=&quot;qwizard#WizardButton-enum&quot;&gt;CustomButton2&lt;/a&gt;, or &lt;a href=&quot;qwizard#WizardButton-enum&quot;&gt;CustomButton3&lt;/a&gt; to set up the button, and by enabling the &lt;a href=&quot;qwizard#WizardOption-enum&quot;&gt;HaveCustomButton1&lt;/a&gt;, &lt;a href=&quot;qwizard#WizardOption-enum&quot;&gt;HaveCustomButton2&lt;/a&gt;, or &lt;a href=&quot;qwizard#WizardOption-enum&quot;&gt;HaveCustomButton3&lt;/a&gt; options. Whenever the user clicks a custom button, &lt;a href=&quot;qwizard#customButtonClicked&quot;&gt;customButtonClicked&lt;/a&gt;() is emitted. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e51bb3d45d30673dc1756f13b7d25bc9b186578" translate="yes" xml:space="preserve">
          <source>You can even store &lt;a href=&quot;qlist&quot;&gt;QList&lt;/a&gt;&amp;lt;&lt;a href=&quot;qvariant&quot;&gt;QVariant&lt;/a&gt;&amp;gt; and &lt;a href=&quot;qmap&quot;&gt;QMap&lt;/a&gt;&amp;lt;&lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;, &lt;a href=&quot;qvariant&quot;&gt;QVariant&lt;/a&gt;&amp;gt; values in a variant, so you can easily construct arbitrarily complex data structures of arbitrary types. This is very powerful and versatile, but may prove less memory and speed efficient than storing specific types in standard data structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e8602e56188c2f469e5fd91155df67edd0a918" translate="yes" xml:space="preserve">
          <source>You can examine the contents of the element that was inserted through the cursor interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743d1180470ab7ee2935120f0238fa816024e4c0" translate="yes" xml:space="preserve">
          <source>You can expect the default values listed in &lt;a href=&quot;qnetworkrequest#Attribute-enum&quot;&gt;QNetworkRequest::Attribute&lt;/a&gt; to be applied to the values returned by this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94477ef9e012d30ddae118a7d9dbd6833777cb71" translate="yes" xml:space="preserve">
          <source>You can explicitly scroll to any position on the scene by using the scroll bars, or by calling &lt;a href=&quot;qgraphicsview#centerOn&quot;&gt;centerOn&lt;/a&gt;(). By passing a point to &lt;a href=&quot;qgraphicsview#centerOn&quot;&gt;centerOn&lt;/a&gt;(), &lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt; will scroll its viewport to ensure that the point is centered in the view. An overload is provided for scrolling to a &lt;a href=&quot;qgraphicsitem&quot;&gt;QGraphicsItem&lt;/a&gt;, in which case &lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt; will see to that the center of the item is centered in the view. If all you want is to ensure that a certain area is visible, (but not necessarily centered,) you can call &lt;a href=&quot;qgraphicsview#ensureVisible&quot;&gt;ensureVisible&lt;/a&gt;() instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bea389ee5e53821cbe8e4cae9932f393760bd58" translate="yes" xml:space="preserve">
          <source>You can explicitly set the look to use using &lt;a href=&quot;qwizard#wizardStyle-prop&quot;&gt;setWizardStyle&lt;/a&gt;() (e.g., if you want the same look on all platforms).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71680afa8fe58075c56ab22e52cba49299baef2a" translate="yes" xml:space="preserve">
          <source>You can explicitly tell the moc not to parse parts of a header file. &lt;code&gt;moc&lt;/code&gt; defines the preprocessor symbol &lt;code&gt;Q_MOC_RUN&lt;/code&gt;. Any code surrounded by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b5b99f6c0101d5ea6f57d41d985e50be00d452" translate="yes" xml:space="preserve">
          <source>You can filter events for any other item by installing event filters. This functionality is separate from Qt's regular event filters (see &lt;a href=&quot;qobject#installEventFilter&quot;&gt;QObject::installEventFilter&lt;/a&gt;()), which only work on subclasses of &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt;. After installing your item as an event filter for another item by calling &lt;a href=&quot;qgraphicsitem#installSceneEventFilter&quot;&gt;installSceneEventFilter&lt;/a&gt;(), the filtered events will be received by the virtual function &lt;a href=&quot;qgraphicsitem#sceneEventFilter&quot;&gt;sceneEventFilter&lt;/a&gt;(). You can remove item event filters by calling &lt;a href=&quot;qgraphicsitem#removeSceneEventFilter&quot;&gt;removeSceneEventFilter&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b4e31b628ea9c971340bb05343af8ba6442fe24" translate="yes" xml:space="preserve">
          <source>You can filter the images in an image directory using the &lt;a href=&quot;#images-fileextensions&quot;&gt;&lt;code&gt;images.fileextensions&lt;/code&gt;&lt;/a&gt; variable. The general idea behind the &lt;a href=&quot;#images-fileextensions&quot;&gt;&lt;code&gt;images.fileextensions&lt;/code&gt;&lt;/a&gt; variable is to enable different image format for different output format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7b6cc22df3903654af6c06f4fb64a5df4863bc" translate="yes" xml:space="preserve">
          <source>You can find an object by name (and type) using &lt;a href=&quot;qobject#findChild&quot;&gt;findChild&lt;/a&gt;(). You can find a set of objects with &lt;a href=&quot;qobject#findChildren&quot;&gt;findChildren&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27e4072df77d51a4f759620b4588659d0186387" translate="yes" xml:space="preserve">
          <source>You can find information about &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtsql-attribution-sqlite.html#sqlite&quot;&gt;SQLite&lt;/a&gt; on &lt;a href=&quot;http://www.sqlite.org&quot;&gt;http://www.sqlite.org&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65cadf37cdd89a457daa526360ae18d0215c76f5" translate="yes" xml:space="preserve">
          <source>You can find information on how to set up and run Apple mobile device applications in Qt Creator's manual:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f511af27f61478fc7a1cf5a9996b2ccc82c74608" translate="yes" xml:space="preserve">
          <source>You can find out the type of a node using &lt;a href=&quot;qdomnode#isAttr&quot;&gt;isAttr&lt;/a&gt;(), &lt;a href=&quot;qdomnode#isCDATASection&quot;&gt;isCDATASection&lt;/a&gt;(), &lt;a href=&quot;qdomnode#isDocumentFragment&quot;&gt;isDocumentFragment&lt;/a&gt;(), &lt;a href=&quot;qdomnode#isDocument&quot;&gt;isDocument&lt;/a&gt;(), &lt;a href=&quot;qdomnode#isDocumentType&quot;&gt;isDocumentType&lt;/a&gt;(), &lt;a href=&quot;qdomnode#isElement&quot;&gt;isElement&lt;/a&gt;(), &lt;a href=&quot;qdomnode#isEntityReference&quot;&gt;isEntityReference&lt;/a&gt;(), &lt;a href=&quot;qdomnode#isText&quot;&gt;isText&lt;/a&gt;(), &lt;a href=&quot;qdomnode#isEntity&quot;&gt;isEntity&lt;/a&gt;(), &lt;a href=&quot;qdomnode#isNotation&quot;&gt;isNotation&lt;/a&gt;(), &lt;a href=&quot;qdomnode#isProcessingInstruction&quot;&gt;isProcessingInstruction&lt;/a&gt;(), &lt;a href=&quot;qdomnode#isCharacterData&quot;&gt;isCharacterData&lt;/a&gt;() and &lt;a href=&quot;qdomnode#isComment&quot;&gt;isComment&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be91d1b09ccd4739e11393f7132dd5b94de20ae9" translate="yes" xml:space="preserve">
          <source>You can find the following source code in the &lt;code&gt;examples/qmake/precompile&lt;/code&gt; directory in the Qt distribution:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efd719b1d92debe8198ac6a6121364dceab07c61" translate="yes" xml:space="preserve">
          <source>You can find the native, platform specific, key used by the operating system by calling &lt;a href=&quot;qsharedmemory#nativeKey&quot;&gt;nativeKey&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc45a09fdbc546002ffeee7c5f01237dfdb7fc4" translate="yes" xml:space="preserve">
          <source>You can form hierarchical keys using the '/' character as a separator, similar to Unix file paths. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86092ad278cb722cdb5844912e024fd95e1e5583" translate="yes" xml:space="preserve">
          <source>You can get a &lt;a href=&quot;qradiodata&quot;&gt;QRadioData&lt;/a&gt; instance fromt the &lt;a href=&quot;qradiotuner#radioData-prop&quot;&gt;radioData&lt;/a&gt; property from a &lt;a href=&quot;qradiotuner&quot;&gt;QRadioTuner&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc581ea62e4a9c41309cd0802ec870ce390cab4a" translate="yes" xml:space="preserve">
          <source>You can get a list of all the decendents of an element which have a specified tag name with &lt;a href=&quot;qdomelement#elementsByTagName&quot;&gt;elementsByTagName&lt;/a&gt;() or &lt;a href=&quot;qdomelement#elementsByTagNameNS&quot;&gt;elementsByTagNameNS&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27bf1365e9cd96f7167a61d7d69894b5644c4d10" translate="yes" xml:space="preserve">
          <source>You can get a particular node from the list with &lt;a href=&quot;qdomnodelist#item&quot;&gt;item&lt;/a&gt;(). The number of items in the list is returned by &lt;a href=&quot;qdomnodelist#length&quot;&gt;length&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b481b93af9fd37dfe026c942051ae37f6c6f434" translate="yes" xml:space="preserve">
          <source>You can get a setting's value back using &lt;a href=&quot;qsettings#value&quot;&gt;value&lt;/a&gt;():</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6610b51642a55e940a1e20625bc25b4711deb67b" translate="yes" xml:space="preserve">
          <source>You can get all available device IDs from &lt;a href=&quot;qml-qtmultimedia-qtmultimedia#availableCameras-prop&quot;&gt;QtMultimedia.availableCameras&lt;/a&gt;. If no value is provided or if set to an empty string, the system's default camera will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c254ad19c2ceb6ca319dfc3024d270c7aea6a6" translate="yes" xml:space="preserve">
          <source>You can get information about the available serial ports using the &lt;a href=&quot;qserialportinfo&quot;&gt;QSerialPortInfo&lt;/a&gt; helper class, which allows an enumeration of all the serial ports in the system. This is useful to obtain the correct name of the serial port you want to use. You can pass an object of the helper class as an argument to the &lt;a href=&quot;qserialport#setPort&quot;&gt;setPort&lt;/a&gt;() or &lt;a href=&quot;qserialport#setPortName&quot;&gt;setPortName&lt;/a&gt;() methods to assign the desired serial device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44fbc8d4088ca7180c6eeefd02c5f3ea72a0958" translate="yes" xml:space="preserve">
          <source>You can get more information about the specific error by calling the &lt;a href=&quot;qregularexpression#errorString&quot;&gt;errorString&lt;/a&gt;() function; moreover, the &lt;a href=&quot;qregularexpression#patternErrorOffset&quot;&gt;patternErrorOffset&lt;/a&gt;() function will return the offset inside the pattern string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b251df5df3dab400dddd4e46a66f88b61f0d3705" translate="yes" xml:space="preserve">
          <source>You can give hints on how the symbols in the plugin are resolved. By default since Qt 5.7, &lt;a href=&quot;qlibrary#LoadHint-enum&quot;&gt;QLibrary::PreventUnloadHint&lt;/a&gt; is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d67823c0c56a9337167069e592a28c0720c48343" translate="yes" xml:space="preserve">
          <source>You can give some hints on how the symbols are resolved. Usually, the symbols are not resolved at load time, but resolved lazily, (that is, when &lt;a href=&quot;qlibrary#resolve&quot;&gt;resolve&lt;/a&gt;() is called). If you set the loadHints to &lt;a href=&quot;qlibrary#LoadHint-enum&quot;&gt;ResolveAllSymbolsHint&lt;/a&gt;, then all symbols will be resolved at load time if the platform supports it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c2b5f35d4ba875649c2322a03c3f7cf580cc7a" translate="yes" xml:space="preserve">
          <source>You can hide individual menu items by setting their visible property to &lt;code&gt;false&lt;/code&gt;. Hiding items does not affect the &lt;a href=&quot;qml-qtquick-controls-styles-piemenustyle#startAngle-prop&quot;&gt;startAngle&lt;/a&gt; or &lt;a href=&quot;qml-qtquick-controls-styles-piemenustyle#endAngle-prop&quot;&gt;endAngle&lt;/a&gt;; the remaining items will grow to consume the available space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5fee4f429750d5e233fb0527e5cbbb53ec03c4a" translate="yes" xml:space="preserve">
          <source>You can identify a section using the &lt;a href=&quot;qheaderview#logicalIndex&quot;&gt;logicalIndex&lt;/a&gt;() and &lt;a href=&quot;qheaderview#logicalIndexAt&quot;&gt;logicalIndexAt&lt;/a&gt;() functions, or by its index position, using the &lt;a href=&quot;qheaderview#visualIndex&quot;&gt;visualIndex&lt;/a&gt;() and &lt;a href=&quot;qheaderview#visualIndexAt&quot;&gt;visualIndexAt&lt;/a&gt;() functions. The visual index will change if a section is moved, but the logical index will not change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffadf5b7f79675a45d8da6d25c9455f6bfa478e0" translate="yes" xml:space="preserve">
          <source>You can implement the stream operator used by &lt;a href=&quot;#qDebug&quot;&gt;qDebug&lt;/a&gt;() to provide debugging support for your classes. The class that implements the stream is &lt;code&gt;QDebug&lt;/code&gt;. Use &lt;code&gt;QDebugStateSaver&lt;/code&gt; to temporarily save the formatting options of the stream. Use &lt;a href=&quot;qdebug#nospace&quot;&gt;nospace()&lt;/a&gt; and &lt;a href=&quot;qtextstream#qtextstream-manipulators&quot;&gt;QTextStream manipulators&lt;/a&gt; to further customize the formatting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5cfb14481ac35f69c033fc6c71dcae4326f6394" translate="yes" xml:space="preserve">
          <source>You can increment (or decrement) a date by a given number of days using &lt;a href=&quot;qdate#addDays&quot;&gt;addDays&lt;/a&gt;(). Similarly you can use &lt;a href=&quot;qdate#addMonths&quot;&gt;addMonths&lt;/a&gt;() and &lt;a href=&quot;qdate#addYears&quot;&gt;addYears&lt;/a&gt;(). The &lt;a href=&quot;qdate#daysTo&quot;&gt;daysTo&lt;/a&gt;() function returns the number of days between two dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e8e09509de9c6020b0ead4e4cd34431327cb23" translate="yes" xml:space="preserve">
          <source>You can increment (or decrement) a datetime by a given number of milliseconds using &lt;a href=&quot;qdatetime#addMSecs&quot;&gt;addMSecs&lt;/a&gt;(), seconds using &lt;a href=&quot;qdatetime#addSecs&quot;&gt;addSecs&lt;/a&gt;(), or days using &lt;a href=&quot;qdatetime#addDays&quot;&gt;addDays&lt;/a&gt;(). Similarly, you can use &lt;a href=&quot;qdatetime#addMonths&quot;&gt;addMonths&lt;/a&gt;() and &lt;a href=&quot;qdatetime#addYears&quot;&gt;addYears&lt;/a&gt;(). The &lt;a href=&quot;qdatetime#daysTo&quot;&gt;daysTo&lt;/a&gt;() function returns the number of days between two datetimes, &lt;a href=&quot;qdatetime#secsTo&quot;&gt;secsTo&lt;/a&gt;() returns the number of seconds between two datetimes, and &lt;a href=&quot;qdatetime#msecsTo&quot;&gt;msecsTo&lt;/a&gt;() returns the number of milliseconds between two datetimes. These operations are aware of daylight-saving time (DST) and other time-zone transitions, where applicable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2c368f1adb81cbc10989de38070bb27fe9a78f" translate="yes" xml:space="preserve">
          <source>You can inherit this class when you need to create a &lt;a href=&quot;qsharedpointer&quot;&gt;QSharedPointer&lt;/a&gt; from any instance of a class; for instance, from within the object itself. The key point is that the technique of just returning &lt;a href=&quot;qsharedpointer&quot;&gt;QSharedPointer&lt;/a&gt;&amp;lt;T&amp;gt;(this) cannot be used, because this winds up creating multiple distinct &lt;a href=&quot;qsharedpointer&quot;&gt;QSharedPointer&lt;/a&gt; objects with separate reference counts. For this reason you must never create more than one &lt;a href=&quot;qsharedpointer&quot;&gt;QSharedPointer&lt;/a&gt; from the same raw pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e080bc02276519387caab0a2f671fa3cc56e82" translate="yes" xml:space="preserve">
          <source>You can insert custom objects into a &lt;a href=&quot;qtextdocument&quot;&gt;QTextDocument&lt;/a&gt;; see the &lt;a href=&quot;qtextobjectinterface&quot;&gt;QTextObjectInterface&lt;/a&gt; class description for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60120a33d25a490700ace525e56ea27a76e1ded4" translate="yes" xml:space="preserve">
          <source>You can inspect the globally selected Xcode installation using the same tool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263b76dc6f5ddcf814258ea40c17ae40a21fc431" translate="yes" xml:space="preserve">
          <source>You can install the Qt Framework and tools by using an &lt;a href=&quot;#online-installation&quot;&gt;online&lt;/a&gt; or &lt;a href=&quot;#offline-installation&quot;&gt;offline&lt;/a&gt; installer, or by &lt;a href=&quot;build-sources#&quot;&gt;building the source packages yourself&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088ec724e405d6e57cbc14f6038e39dce593de92" translate="yes" xml:space="preserve">
          <source>You can install the interceptor on a profile via &lt;a href=&quot;qwebengineprofile#setUrlRequestInterceptor&quot;&gt;QWebEngineProfile::setUrlRequestInterceptor&lt;/a&gt;() or &lt;a href=&quot;qquickwebengineprofile#setUrlRequestInterceptor&quot;&gt;QQuickWebEngineProfile::setUrlRequestInterceptor&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a6146720ffc65231a4e3c2e8e58c086752078ff" translate="yes" xml:space="preserve">
          <source>You can instantiate multiple copies of the same replica. All replicas of the same source from a single node will share a private data member which handles the network communication. This means multiple instances of a &lt;a href=&quot;#replica&quot;&gt;Replica&lt;/a&gt; do not introduce additional network traffic, although there will be some additional processing overhead. Failing to delete replicas will prevent the reference count on this private object from reaching 0, and cause unnecessary network communication until the calling process exits. For this reason, it is recommended that &lt;a href=&quot;qscopedpointer&quot;&gt;QScopedPointer&lt;/a&gt; or &lt;a href=&quot;qsharedpointer&quot;&gt;QSharedPointer&lt;/a&gt; be used to help track replica lifetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca42318541f51c4204c44df92c7b260383062ab" translate="yes" xml:space="preserve">
          <source>You can interact with the items on the scene by using the mouse and keyboard. &lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt; translates the mouse and key events into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6930880ad8157d1c2613af9db0f436ceec64354b" translate="yes" xml:space="preserve">
          <source>You can interface with non-Qt clients in a multi-process system, as long as your clients understand Wayland or X11. For example, if you use gstreamer for video or if you want to use a navigation application built with another UI toolkit, you can run these clients alongside your other Qt-based clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f48274fb4eb7bb901b1c3a9abf77608df4ea606a" translate="yes" xml:space="preserve">
          <source>You can iterate over a frame's contents using the &lt;a href=&quot;qtextframe-iterator&quot;&gt;QTextFrame::iterator&lt;/a&gt; class: this provides read-only access to its internal list of text blocks and child frames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45802f2b550c98d35b5865c5c450ba253f0bd3dc" translate="yes" xml:space="preserve">
          <source>You can localize numbers by using appropriate tr() strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ce903f9b0e6c328bafcc51acb0edd78f63eccf" translate="yes" xml:space="preserve">
          <source>You can make a combo box editable by setting the &lt;a href=&quot;qml-qtquick-controls-combobox#editable-prop&quot;&gt;editable&lt;/a&gt; property. An editable combo box will autocomplete its text based on what is available in the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a59004768716022ca74ad06b5e8db54664409f" translate="yes" xml:space="preserve">
          <source>You can make as many connections as you like between objects on the form; it is possible to connect signals from objects to slots in the form itself. As a result, the signal and slot connections in many dialogs can be completely configured from within</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d97646c36ee3f3398d37da5607c0120c2b91ea8" translate="yes" xml:space="preserve">
          <source>You can make the cells fill the available space by stretching the last header section. Access the relevant header using &lt;a href=&quot;qtableview#horizontalHeader&quot;&gt;horizontalHeader&lt;/a&gt;() or &lt;a href=&quot;qtableview#verticalHeader&quot;&gt;verticalHeader&lt;/a&gt;() and set the header's &lt;a href=&quot;qheaderview#stretchLastSection-prop&quot;&gt;stretchLastSection&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9198e18e387109c5cb95a7a5b98418c02fbb56" translate="yes" xml:space="preserve">
          <source>You can manually post events to any object in any thread at any time using the thread-safe function &lt;a href=&quot;qcoreapplication#postEvent&quot;&gt;QCoreApplication::postEvent&lt;/a&gt;(). The events will automatically be dispatched by the event loop of the thread where the object was created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b97ba5edf019033f01dbe6c178f39300ec5dc6" translate="yes" xml:space="preserve">
          <source>You can map coordinates and shapes to and from an item's scene by calling &lt;a href=&quot;qgraphicsitem#mapToScene&quot;&gt;QGraphicsItem::mapToScene&lt;/a&gt;() and &lt;a href=&quot;qgraphicsitem#mapFromScene&quot;&gt;QGraphicsItem::mapFromScene&lt;/a&gt;(). You can also map to an item's parent item by calling &lt;a href=&quot;qgraphicsitem#mapToParent&quot;&gt;QGraphicsItem::mapToParent&lt;/a&gt;() and &lt;a href=&quot;qgraphicsitem#mapFromParent&quot;&gt;QGraphicsItem::mapFromParent&lt;/a&gt;(), or between items by calling &lt;a href=&quot;qgraphicsitem#mapToItem&quot;&gt;QGraphicsItem::mapToItem&lt;/a&gt;() and &lt;a href=&quot;qgraphicsitem#mapFromItem&quot;&gt;QGraphicsItem::mapFromItem&lt;/a&gt;(). All mapping functions can map both points, rectangles, polygons and paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b1c9bee0650fda07b2432573af6a5499ab9bb6" translate="yes" xml:space="preserve">
          <source>You can minimize the space consumption of a group box by enabling the &lt;a href=&quot;qgroupbox#flat-prop&quot;&gt;flat&lt;/a&gt; property. In most &lt;a href=&quot;qstyle&quot;&gt;styles&lt;/a&gt;, enabling this property results in the removal of the left, right and bottom edges of the frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df3c4428820197ccaaae88afad09cab36b58b77" translate="yes" xml:space="preserve">
          <source>You can minimize the space consumption of a group box by enabling the flat property. In most styles, enabling this property results in the removal of the left, right and bottom edges of the frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3efdee97259ddddf930e0b0fa6ce9e0c3686342" translate="yes" xml:space="preserve">
          <source>You can mix and match normal buttons and standard buttons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df32299980cf9adee810ff696e632079ebefca46" translate="yes" xml:space="preserve">
          <source>You can monitor the rendering performance by turning on two logging categories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea319678ba6717f36c6be48fdb9b29cad30abb64" translate="yes" xml:space="preserve">
          <source>You can navigate the cells in the table by clicking on a cell with the mouse, or by using the arrow keys. Because &lt;a href=&quot;qtableview&quot;&gt;QTableView&lt;/a&gt; enables &lt;a href=&quot;qabstractitemview#tabKeyNavigation-prop&quot;&gt;tabKeyNavigation&lt;/a&gt; by default, you can also hit Tab and Backtab to move from cell to cell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e24585dd81f43f2a08793a84e6661a8d69621d6" translate="yes" xml:space="preserve">
          <source>You can navigate through the entire setting hierarchy using &lt;a href=&quot;qsettings#childKeys&quot;&gt;childKeys&lt;/a&gt;() and childGroups() recursively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86acffaddb4b6f1bfb9bb9b224917c8346dadb1e" translate="yes" xml:space="preserve">
          <source>You can navigate through the entire setting hierarchy using childKeys() and &lt;a href=&quot;qsettings#childGroups&quot;&gt;childGroups&lt;/a&gt;() recursively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def587ee6c7279da9b6c417dff58863f1c9ff1cd" translate="yes" xml:space="preserve">
          <source>You can navigate within the dataset using &lt;a href=&quot;qsqlquery#next&quot;&gt;QSqlQuery::next&lt;/a&gt;(), &lt;a href=&quot;qsqlquery#previous&quot;&gt;QSqlQuery::previous&lt;/a&gt;(), &lt;a href=&quot;qsqlquery#first&quot;&gt;QSqlQuery::first&lt;/a&gt;(), &lt;a href=&quot;qsqlquery#last&quot;&gt;QSqlQuery::last&lt;/a&gt;(), and &lt;a href=&quot;qsqlquery#seek&quot;&gt;QSqlQuery::seek&lt;/a&gt;(). The current row index is returned by &lt;a href=&quot;qsqlquery#at&quot;&gt;QSqlQuery::at&lt;/a&gt;(), and the total number of rows in the result set is available as &lt;a href=&quot;qsqlquery#size&quot;&gt;QSqlQuery::size&lt;/a&gt;() for databases that support it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5c13089967016dd95eb2ceeb3187e9039636ea" translate="yes" xml:space="preserve">
          <source>You can nest layouts using &lt;code&gt;addLayout()&lt;/code&gt; on a layout; the inner layout then becomes a child of the layout it is inserted into.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceaef82fda8c62d732471ed68aed9ee2a317c741" translate="yes" xml:space="preserve">
          <source>You can obtain a list of all the elements that have a particular tag with &lt;a href=&quot;qdomdocument#elementsByTagName&quot;&gt;elementsByTagName&lt;/a&gt;() or with &lt;a href=&quot;qdomdocument#elementsByTagNameNS&quot;&gt;elementsByTagNameNS&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e7127990aeb06f3e2998b096aa1f46d5ba9a6a" translate="yes" xml:space="preserve">
          <source>You can obtain audio formats compatible with the audio device used through functions in &lt;a href=&quot;qaudiodeviceinfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt;. This class also lets you query available parameter values for a device, so that you can set the parameters yourself. See the &lt;a href=&quot;qaudiodeviceinfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt; class description for details. You need to know the format of the audio streams you wish to play or record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79154f5f27c79b24bae629a814469195149324e5" translate="yes" xml:space="preserve">
          <source>You can of course use the IDispatch* returned directly, in which case you have to call &lt;code&gt;Release()&lt;/code&gt; when finished with the interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b910d1cbee0426c010e5e25fd7a59721c26fc9df" translate="yes" xml:space="preserve">
          <source>You can omit specifying the texture properties, Qt 3D will try at runtime to determine what they are. If you know them, you can of course provide them, avoid additional work for Qt 3D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c93e78c31fd7af5eee1cca543c77319bc06122d" translate="yes" xml:space="preserve">
          <source>You can only choose one or the other mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="080fe633fb2b534bea08c07f5d55ced59448c9af" translate="yes" xml:space="preserve">
          <source>You can only post events when the state machine is running or when it is starting up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1f5dada85dd3abbd7578c190318f83b65445d9" translate="yes" xml:space="preserve">
          <source>You can only post events when the state machine is running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813294996951f237c108ab6d494099169c7924b9" translate="yes" xml:space="preserve">
          <source>You can only specify either a source filename or a source &lt;a href=&quot;qiodevice&quot;&gt;QIODevice&lt;/a&gt;. Setting one will unset the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e2e0bd1fe3b3b18e65b448974e55c5b0cebc50" translate="yes" xml:space="preserve">
          <source>You can only specify one of the first four.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850d96f90efb2fc1fbf68b2743c91966cf18eea4" translate="yes" xml:space="preserve">
          <source>You can open the resource selector by clicking &lt;b&gt;Choose Resource...&lt;/b&gt; to add resources any time during the design process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa146a3eb96020cc6395e2646a92c6ef339fadbf" translate="yes" xml:space="preserve">
          <source>You can override this behavior by using the &lt;a href=&quot;qaction#menuRole-prop&quot;&gt;QAction::menuRole&lt;/a&gt;() property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="693ae0cff166b9813c29a9dc05566c9005d58c85" translate="yes" xml:space="preserve">
          <source>You can override this function for your delegate if you need extra logic to decide which transition to return. You could for example introspect the items, and return different animations depending on the their internal state. &lt;a href=&quot;qml-qtquick-controls-stackview&quot;&gt;StackView&lt;/a&gt; will expect you to return a Component that contains a StackViewTransition, or a StackViewTransition directly. The former is easier, as &lt;a href=&quot;qml-qtquick-controls-stackview&quot;&gt;StackView&lt;/a&gt; will then create the transition and later destroy it when it's done, while avoiding any side effects caused by the transition being alive long after it has run. Returning a StackViewTransition directly can be useful if you need to write some sort of transition caching for performance reasons. As an optimization, you can also return &lt;code&gt;null&lt;/code&gt; to signal that you just want to show/hide the items immediately without creating or running any transitions. You can also override this function if you need to alter the items in any way before the transition starts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb8a6e1514b3c2e720011021427c0b15276649db" translate="yes" xml:space="preserve">
          <source>You can pass your own classes as handlers, provided that they have a public static function &lt;code&gt;void cleanup(T *pointer)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee99b10b7e176178c45f850e70a3025025972fdb" translate="yes" xml:space="preserve">
          <source>You can post your own events to the state machine using &lt;a href=&quot;qstatemachine#postEvent&quot;&gt;QStateMachine::postEvent&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d36d4d1f944ee8d7f2546c86c05d1cc7ce336f2" translate="yes" xml:space="preserve">
          <source>You can provide custom editors by using a &lt;a href=&quot;qitemeditorfactory&quot;&gt;QItemEditorFactory&lt;/a&gt;. The &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtwidgets-itemviews-coloreditorfactory-example.html#&quot;&gt;Color Editor Factory Example&lt;/a&gt; shows how a custom editor can be made available to delegates with the default item editor factory. This way, there is no need to subclass &lt;a href=&quot;qitemdelegate&quot;&gt;QItemDelegate&lt;/a&gt;. An alternative is to reimplement &lt;a href=&quot;qitemdelegate#createEditor&quot;&gt;createEditor&lt;/a&gt;(), &lt;a href=&quot;qitemdelegate#setEditorData&quot;&gt;setEditorData&lt;/a&gt;(), &lt;a href=&quot;qitemdelegate#setModelData&quot;&gt;setModelData&lt;/a&gt;(), and &lt;a href=&quot;qitemdelegate#updateEditorGeometry&quot;&gt;updateEditorGeometry&lt;/a&gt;(). This process is described in the &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtwidgets-itemviews-spinboxdelegate-example.html#&quot;&gt;Spin Box Delegate Example&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed68a0d3d727917efe0f081557a36e2feb316808" translate="yes" xml:space="preserve">
          <source>You can provide substitutions for font family names using &lt;a href=&quot;qfont#insertSubstitution&quot;&gt;insertSubstitution&lt;/a&gt;() and &lt;a href=&quot;qfont#insertSubstitutions&quot;&gt;insertSubstitutions&lt;/a&gt;(). Substitutions can be removed with &lt;a href=&quot;qfont#removeSubstitutions&quot;&gt;removeSubstitutions&lt;/a&gt;(). Use &lt;a href=&quot;qfont#substitute&quot;&gt;substitute&lt;/a&gt;() to retrieve a family's first substitute, or the family name itself if it has no substitutes. Use &lt;a href=&quot;qfont#substitutes&quot;&gt;substitutes&lt;/a&gt;() to retrieve a list of a family's substitutes (which may be empty).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca706fce9452d71652fc3206c53f1c8ab26343f" translate="yes" xml:space="preserve">
          <source>You can provide the desired axis by assigning a &lt;a href=&quot;qvector3d&quot;&gt;QVector3D&lt;/a&gt; to the axis property or by passing a member if &lt;a href=&quot;qt#Axis-enum&quot;&gt;Qt::Axis&lt;/a&gt; to the &lt;a href=&quot;qgraphicsrotation#axis-prop&quot;&gt;setAxis&lt;/a&gt; convenience function. By default the axis is (0, 0, 1) i.e., rotation around the Z axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d34566448dca6113c3f5d86d6964301c099e5c5" translate="yes" xml:space="preserve">
          <source>You can push several items in one go by using an array of property lists. This is more efficient than pushing items one by one, as &lt;a href=&quot;qml-qtquick-controls-stackview&quot;&gt;StackView&lt;/a&gt; can then load only the last item in the list. The rest will be loaded as they are about to become the current item (which happens when the stack is popped). The following example shows how to push an array of items:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1853b093340b0ecf27c6c7bd54970e24932b20df" translate="yes" xml:space="preserve">
          <source>You can query the values of properties in a project file as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4074e115059408c53834aad0603e4cad6cce13e" translate="yes" xml:space="preserve">
          <source>You can react to application state changes to perform actions such as stopping/resuming CPU-intensive tasks, freeing/loading resources or saving/restoring application data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7976a476369247861bb2381468b2a0639c1349c" translate="yes" xml:space="preserve">
          <source>You can read more about the different cache modes in the &lt;a href=&quot;qgraphicsitem#CacheMode-enum&quot;&gt;CacheMode&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8ded86413500e0a98aba9e6dd0ac3f2781fedb" translate="yes" xml:space="preserve">
          <source>You can reduce the amount of blocks in a &lt;a href=&quot;qtextdocument&quot;&gt;QTextDocument&lt;/a&gt; with &lt;a href=&quot;qtextdocument#maximumBlockCount-prop&quot;&gt;maximumBlockCount()&lt;/a&gt;. The document is only as large as the number of blocks as far as &lt;a href=&quot;qtextedit&quot;&gt;QTextEdit&lt;/a&gt; is concerned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b3196388b43fe3d734b5e24d7b979363fc744a2" translate="yes" xml:space="preserve">
          <source>You can reimplement this event handler to detect when your widget has been resized. Calling &lt;a href=&quot;qevent#accept&quot;&gt;QEvent::accept&lt;/a&gt;() or &lt;a href=&quot;qevent#ignore&quot;&gt;QEvent::ignore&lt;/a&gt;() on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99fd7d9561d4a5ad9daf7612920394ed35f42c8a" translate="yes" xml:space="preserve">
          <source>You can reimplement this event handler to detect when your widget has moved. Calling &lt;a href=&quot;qevent#accept&quot;&gt;QEvent::accept&lt;/a&gt;() or &lt;a href=&quot;qevent#ignore&quot;&gt;QEvent::ignore&lt;/a&gt;() on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6400b5d318bc5e43263e1da234f3fa830e6c76" translate="yes" xml:space="preserve">
          <source>You can reimplement this event handler to detect when your widget is hidden. Calling &lt;a href=&quot;qevent#accept&quot;&gt;QEvent::accept&lt;/a&gt;() or &lt;a href=&quot;qevent#ignore&quot;&gt;QEvent::ignore&lt;/a&gt;() on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d646cc6b98e079b873bc2fda6639e16fd394533" translate="yes" xml:space="preserve">
          <source>You can reimplement this event handler to detect when your widget is shown. Calling &lt;a href=&quot;qevent#accept&quot;&gt;QEvent::accept&lt;/a&gt;() or &lt;a href=&quot;qevent#ignore&quot;&gt;QEvent::ignore&lt;/a&gt;() on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a9fade7015d7c1ef9068a3b0bed8a3cf45ee86" translate="yes" xml:space="preserve">
          <source>You can reimplement this event handler to track similar events for your own custom layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec64e1154fa50b68afb57c9a58bf722c7a3e609c" translate="yes" xml:space="preserve">
          <source>You can reimplement this function if you want to customize how a window can be interactively moved or resized. For instance, if you only want to allow a window to be resized by the bottom right corner, you can reimplement this function to return &lt;a href=&quot;qt#WindowFrameSection-enum&quot;&gt;Qt::NoSection&lt;/a&gt; for all sections except &lt;a href=&quot;qt#WindowFrameSection-enum&quot;&gt;Qt::BottomRightSection&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0415ec2196ce0ca5be47dce1043749c1b3a7cdb" translate="yes" xml:space="preserve">
          <source>You can reimplement this function in a subclass of &lt;a href=&quot;graphicsview#qgraphicswidget&quot;&gt;QGraphicsWidget&lt;/a&gt; to provide custom rendering of the widget's window frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3949fdff8ab7a6623f16ff9b64bd52420b7cc9fd" translate="yes" xml:space="preserve">
          <source>You can reimplement this function in a subclass of &lt;a href=&quot;qgraphicsscene&quot;&gt;QGraphicsScene&lt;/a&gt; to provide fine-grained control over how tab focus passes inside your scene. The default implementation is based on the tab focus chain defined by &lt;a href=&quot;qgraphicswidget#setTabOrder&quot;&gt;QGraphicsWidget::setTabOrder&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a044276a13e7e1ec4cdcecf2b72b2744f4d1e799" translate="yes" xml:space="preserve">
          <source>You can reimplement this function in a subclass, but we recommend using one of the specialized event handlers instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5797b8b3649903f16534216372385dc78e19ba84" translate="yes" xml:space="preserve">
          <source>You can reimplement this function to facilitate advanced thread management. Returning from this method will end the execution of the thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc879377cf31232ea1562359160ece9e31ad39ca" translate="yes" xml:space="preserve">
          <source>You can reimplement this function to provide a custom algorithm for determining whether this item is obscured by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b26e8689d9fdaa567e1d90cd08d84c894f73da" translate="yes" xml:space="preserve">
          <source>You can reimplement this handler in a subclass of &lt;a href=&quot;graphicsview#qgraphicswidget&quot;&gt;QGraphicsWidget&lt;/a&gt; to provide your own custom window frame interaction support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18003905fdd2a09a20d3eb43228ca2d0dfa8540f" translate="yes" xml:space="preserve">
          <source>You can remove resources by selecting the corresponding entry in the resource editor, and pressing the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b098186fd91581c2d6d656972fc7047b2c7e27" translate="yes" xml:space="preserve">
          <source>You can restrict the list of curves used for choosing the session cipher for this socket by calling &lt;a href=&quot;qsslconfiguration#setEllipticCurves&quot;&gt;setEllipticCurves&lt;/a&gt;() with a subset of the supported ciphers. You can revert to using the entire set by calling &lt;a href=&quot;qsslconfiguration#setEllipticCurves&quot;&gt;setEllipticCurves&lt;/a&gt;() with the list returned by QSslSocket::supportedEllipticCurves().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c1d549609c058101d975e148c68af364ceeca1" translate="yes" xml:space="preserve">
          <source>You can retrieve any of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2739baad109e35d1b38f8bc5f28bec146eb3b6f" translate="yes" xml:space="preserve">
          <source>You can retrieve any of the form window's widgets using the &lt;a href=&quot;qdesignerformwindowcursorinterface#widget&quot;&gt;widget&lt;/a&gt;() function, and check if a widget is selected using the &lt;a href=&quot;qdesignerformwindowcursorinterface#isWidgetSelected&quot;&gt;isWidgetSelected&lt;/a&gt;() function. You can use the &lt;a href=&quot;qdesignerformwindowcursorinterface#setProperty&quot;&gt;setProperty&lt;/a&gt;() function to set the selected widget's properties, and the &lt;a href=&quot;qdesignerformwindowcursorinterface#setWidgetProperty&quot;&gt;setWidgetProperty&lt;/a&gt;() or &lt;a href=&quot;qdesignerformwindowcursorinterface#resetWidgetProperty&quot;&gt;resetWidgetProperty&lt;/a&gt;() functions to modify the properties of any given widget.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a95075ea9032efde58041366f7c9b36561808b" translate="yes" xml:space="preserve">
          <source>You can retrieve the &lt;a href=&quot;qdomnotation#publicId&quot;&gt;publicId&lt;/a&gt;() and &lt;a href=&quot;qdomnotation#systemId&quot;&gt;systemId&lt;/a&gt;() from a notation node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d429a9f76507450e05482ca3d711a0e8e5a6021" translate="yes" xml:space="preserve">
          <source>You can retrieve the &lt;a href=&quot;qregularexpression&quot;&gt;QRegularExpression&lt;/a&gt; object the subject string was matched against by calling the &lt;a href=&quot;qregularexpressionmatch#regularExpression&quot;&gt;regularExpression&lt;/a&gt;() function; the match type and the match options are available as well by calling the &lt;a href=&quot;qregularexpressionmatch#matchType&quot;&gt;matchType&lt;/a&gt;() and the &lt;a href=&quot;qregularexpressionmatch#matchOptions&quot;&gt;matchOptions&lt;/a&gt;() respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fabcfd946f8b79f77e90ededd395eccf9af8b292" translate="yes" xml:space="preserve">
          <source>You can retrieve the &lt;a href=&quot;qregularexpression&quot;&gt;QRegularExpression&lt;/a&gt; object the subject string was matched against by calling the &lt;a href=&quot;qregularexpressionmatchiterator#regularExpression&quot;&gt;regularExpression&lt;/a&gt;() function; the match type and the match options are available as well by calling the &lt;a href=&quot;qregularexpressionmatchiterator#matchType&quot;&gt;matchType&lt;/a&gt;() and the &lt;a href=&quot;qregularexpressionmatchiterator#matchOptions&quot;&gt;matchOptions&lt;/a&gt;() respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8801910cf2a18b905bcaeedf1a732ee6222ff6b2" translate="yes" xml:space="preserve">
          <source>You can retrieve the child widget using the &lt;a href=&quot;qscrollarea#widget&quot;&gt;widget&lt;/a&gt;() function. The view can be made to be resizable with the &lt;a href=&quot;qscrollarea#widgetResizable-prop&quot;&gt;setWidgetResizable&lt;/a&gt;() function. The alignment of the widget can be specified with &lt;a href=&quot;qscrollarea#alignment-prop&quot;&gt;setAlignment&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="518cb8bf2417f4f08c161a9bb0661d89cb1a6280" translate="yes" xml:space="preserve">
          <source>You can retrieve the document from the text edit using the document() function. The document can then be edited programmatically using the &lt;a href=&quot;qtextcursor&quot;&gt;QTextCursor&lt;/a&gt; class. This class is modeled after a screen cursor, and editing operations follow the same semantics. The following code changes the first line of the document to a bold font, leaving all other font properties untouched. The editor will be automatically updated to reflect the changes made to the underlying document data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="375f24b36f314905e503e5fd88dde678bcd44a98" translate="yes" xml:space="preserve">
          <source>You can retrieve the values of all the fields in a single variable (a map) using &lt;a href=&quot;qsqlquery#boundValues&quot;&gt;boundValues&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba858fa3b9de5cbb88b42db30d7f6468bea17866" translate="yes" xml:space="preserve">
          <source>You can retrieve this class from an instance of a &lt;a href=&quot;qcamera&quot;&gt;QCamera&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43dbfaaf136f2e51a430c766a3200ffb761f18e2" translate="yes" xml:space="preserve">
          <source>You can retrieve this control from the camera object in the usual way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce902d0ce235f9d8eb50b66354d8e68bdf7f39f5" translate="yes" xml:space="preserve">
          <source>You can retrieve this information back from qmake as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf89f4fbdd2c9e4a45d676425e5c01058f433b28" translate="yes" xml:space="preserve">
          <source>You can scale the coordinate system by a given offset using the &lt;a href=&quot;qpainter#scale&quot;&gt;QPainter::scale&lt;/a&gt;() function, you can rotate it clockwise using the &lt;a href=&quot;qpainter#rotate&quot;&gt;QPainter::rotate&lt;/a&gt;() function and you can translate it (i.e. adding a given offset to the points) using the &lt;a href=&quot;qpainter#translate&quot;&gt;QPainter::translate&lt;/a&gt;() function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e2011a56d65d453cbdded0d1ce1e0b52b4ff82" translate="yes" xml:space="preserve">
          <source>You can search for items in the model with &lt;a href=&quot;qstandarditemmodel#findItems&quot;&gt;findItems&lt;/a&gt;(), and sort the model by calling &lt;a href=&quot;qstandarditemmodel#sort&quot;&gt;sort&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030ac24eb570187a537200715656719342bd2ef1" translate="yes" xml:space="preserve">
          <source>You can select which byte order to use when serializing data. The default setting is big endian (MSB first). Changing it to little endian breaks the portability (unless the reader also changes to little endian). We recommend keeping this setting unless you have special requirements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5edb325270fce538f37483411c9763e929da1d23" translate="yes" xml:space="preserve">
          <source>You can set a status bar with &lt;code&gt;setStatusBar()&lt;/code&gt;, but one is created the first time &lt;code&gt;statusBar()&lt;/code&gt; (which returns the main window's status bar) is called. See &lt;a href=&quot;qstatusbar&quot;&gt;QStatusBar&lt;/a&gt; for information on how to use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36233d4d433c8e44fb312cf6adac09866340d3c" translate="yes" xml:space="preserve">
          <source>You can set a timer to time out only once by calling &lt;a href=&quot;qtimer#singleShot-prop&quot;&gt;setSingleShot&lt;/a&gt;(true). You can also use the static &lt;a href=&quot;qtimer#singleShot&quot;&gt;QTimer::singleShot&lt;/a&gt;() function to call a slot after a specified interval:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97bb7b4216ccd830d531e418171576d00026c59d" translate="yes" xml:space="preserve">
          <source>You can set additional &lt;code&gt;OPTIONS&lt;/code&gt; that should be added to the &lt;code&gt;moc&lt;/code&gt; calls. You can find possible options in the &lt;a href=&quot;moc&quot;&gt;moc documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128c78f3f53d1b9921f8ac2d13cf42f86c3468d4" translate="yes" xml:space="preserve">
          <source>You can set additional &lt;code&gt;OPTIONS&lt;/code&gt; that should be added to the &lt;code&gt;rcc&lt;/code&gt; calls. You can find possible options in the &lt;a href=&quot;rcc&quot;&gt;rcc documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f2c9e8d68af3668eef7c11057712c630e82c86" translate="yes" xml:space="preserve">
          <source>You can set additional &lt;code&gt;OPTIONS&lt;/code&gt; that should be added to the &lt;code&gt;uic&lt;/code&gt; calls. You can find possible options in the &lt;a href=&quot;uic&quot;&gt;uic documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfcb8b03dca5017d5b9a5ad80b3d0a309d7158b3" translate="yes" xml:space="preserve">
          <source>You can set an explicit &lt;code&gt;TARGET&lt;/code&gt;. This will make sure that the target properties &lt;code&gt;INCLUDE_DIRECTORIES&lt;/code&gt; and &lt;code&gt;COMPILE_DEFINITIONS&lt;/code&gt; are also used when scanning the source files with &lt;code&gt;moc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a95c8091fad73ff6dadff70224a4134289138d" translate="yes" xml:space="preserve">
          <source>You can set expiry time and host name for this policy, and control whether it applies to subdomains, either in the constructor or by calling &lt;a href=&quot;qhstspolicy#setExpiry&quot;&gt;setExpiry&lt;/a&gt;(), &lt;a href=&quot;qhstspolicy#setHost&quot;&gt;setHost&lt;/a&gt;() and setIncludesSubdomains().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73160a331050705e32f9ec3627960f9e4e734bc6" translate="yes" xml:space="preserve">
          <source>You can set the &lt;a href=&quot;qgraphicsitem#GraphicsItemFlag-enum&quot;&gt;ItemStacksBehindParent&lt;/a&gt; flag to stack a child item behind its parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b572a619096b3c99c04b6745abfc01836764d226" translate="yes" xml:space="preserve">
          <source>You can set the acceptable range in one call with &lt;a href=&quot;qdoublevalidator#setRange&quot;&gt;setRange&lt;/a&gt;(), or with &lt;a href=&quot;qdoublevalidator#bottom-prop&quot;&gt;setBottom&lt;/a&gt;() and &lt;a href=&quot;qdoublevalidator#top-prop&quot;&gt;setTop&lt;/a&gt;(). Set the number of decimal places with &lt;a href=&quot;qdoublevalidator#decimals-prop&quot;&gt;setDecimals&lt;/a&gt;(). The &lt;a href=&quot;qdoublevalidator#validate&quot;&gt;validate&lt;/a&gt;() function returns the validation state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2283ca57039d1610f44e06ead3a8896e2cc78306" translate="yes" xml:space="preserve">
          <source>You can set the actual version string by using &lt;a href=&quot;qcoreapplication#applicationVersion-prop&quot;&gt;QCoreApplication::setApplicationVersion&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b0207cb2b435b38996d8de2708e06db859e2fb" translate="yes" xml:space="preserve">
          <source>You can set the background color to &lt;a href=&quot;qt#GlobalColor-enum&quot;&gt;Qt::transparent&lt;/a&gt; or to a translucent color to see through the document, or you can set it to match your web content in a hybrid application to prevent the white flashes that may appear during loading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4cc6f2f9ad984ebc6d3d2447add71bb62647b8d" translate="yes" xml:space="preserve">
          <source>You can set the declaration handler with &lt;a href=&quot;qxmlreader#setDeclHandler&quot;&gt;QXmlReader::setDeclHandler&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05912145b63c521292f33bf7559ee4928d827835" translate="yes" xml:space="preserve">
          <source>You can set the error handler with &lt;a href=&quot;qxmlreader#setErrorHandler&quot;&gt;QXmlReader::setErrorHandler&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7cc3dbbd6fc0fb532d3b7160e390edd2a0fdc3" translate="yes" xml:space="preserve">
          <source>You can set the header labels of your model with &lt;a href=&quot;qstandarditemmodel#setHorizontalHeaderLabels&quot;&gt;setHorizontalHeaderLabels&lt;/a&gt;() and &lt;a href=&quot;qstandarditemmodel#setVerticalHeaderLabels&quot;&gt;setVerticalHeaderLabels&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c5f5af6d81f24c0b9d7dc3dd149d19238e582b" translate="yes" xml:space="preserve">
          <source>You can set the lexical handler with &lt;a href=&quot;qxmlreader#setLexicalHandler&quot;&gt;QXmlReader::setLexicalHandler&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f27c9772e5bf00c79a7ade341ac144ab67cff39" translate="yes" xml:space="preserve">
          <source>You can set the options by passing them to the &lt;a href=&quot;qregularexpression&quot;&gt;QRegularExpression&lt;/a&gt; constructor, as in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a2f1a56512120a51e815ff918b318d618f0c80" translate="yes" xml:space="preserve">
          <source>You can set the pattern string by passing a string to the &lt;a href=&quot;qregularexpression&quot;&gt;QRegularExpression&lt;/a&gt; constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb831a239682c635328787f18c6699c62d03731" translate="yes" xml:space="preserve">
          <source>You can set the pixmap's transformation mode by calling &lt;a href=&quot;qgraphicspixmapitem#setTransformationMode&quot;&gt;setTransformationMode&lt;/a&gt;(). By default, &lt;a href=&quot;qt#TransformationMode-enum&quot;&gt;Qt::FastTransformation&lt;/a&gt; is used, which provides fast, non-smooth scaling. &lt;a href=&quot;qt#TransformationMode-enum&quot;&gt;Qt::SmoothTransformation&lt;/a&gt; enables &lt;a href=&quot;qpainter#RenderHint-enum&quot;&gt;QPainter::SmoothPixmapTransform&lt;/a&gt; on the painter, and the quality depends on the platform and viewport. The result is usually not as good as calling QPixmap::scale() directly. Call &lt;a href=&quot;qgraphicspixmapitem#transformationMode&quot;&gt;transformationMode&lt;/a&gt;() to get the current transformation mode for the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501d972f0c763a1f23530002b75262ac3522ba33" translate="yes" xml:space="preserve">
          <source>You can set the prefix for the current namespace with &lt;a href=&quot;qxmlnamespacesupport#setPrefix&quot;&gt;setPrefix&lt;/a&gt;(), and get the list of current prefixes (or those for a given URI) with &lt;a href=&quot;qxmlnamespacesupport#prefixes&quot;&gt;prefixes&lt;/a&gt;(). The namespace URI is available from &lt;a href=&quot;qxmlnamespacesupport#uri&quot;&gt;uri&lt;/a&gt;(). Use &lt;a href=&quot;qxmlnamespacesupport#pushContext&quot;&gt;pushContext&lt;/a&gt;() to start a new namespace context, and &lt;a href=&quot;qxmlnamespacesupport#popContext&quot;&gt;popContext&lt;/a&gt;() to return to the previous namespace context. Use &lt;a href=&quot;qxmlnamespacesupport#splitName&quot;&gt;splitName&lt;/a&gt;() or &lt;a href=&quot;qxmlnamespacesupport#processName&quot;&gt;processName&lt;/a&gt;() to split a name into its prefix and local name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4fc45a6b2473832877a160ab302d6807988e85f" translate="yes" xml:space="preserve">
          <source>You can set the title of the current tab by changing the &lt;code&gt;currentTabText&lt;/code&gt; property in the &lt;b&gt;Property Editor&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74535e003ccc9ba2595fed7caa1700c7b6eccdd2" translate="yes" xml:space="preserve">
          <source>You can set the type of flash effect used when an image is captured, and test to see if the flash hardware is ready to fire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b0cf759e143691dd680999440aa96acb9f13dc" translate="yes" xml:space="preserve">
          <source>You can set whether an item should be visible (i.e., drawn, and accepting events), by calling &lt;a href=&quot;qgraphicsitem#setVisible&quot;&gt;setVisible&lt;/a&gt;(). Hiding an item will also hide its children. Similarly, you can enable or disable an item by calling &lt;a href=&quot;qgraphicsitem#setEnabled&quot;&gt;setEnabled&lt;/a&gt;(). If you disable an item, all its children will also be disabled. By default, items are both visible and enabled. To toggle whether an item is selected or not, first enable selection by setting the &lt;a href=&quot;qgraphicsitem#GraphicsItemFlag-enum&quot;&gt;ItemIsSelectable&lt;/a&gt; flag, and then call &lt;a href=&quot;qgraphicsitem#setSelected&quot;&gt;setSelected&lt;/a&gt;(). Normally, selection is toggled by the scene, as a result of user interaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537594b2231f28a3deecfdbc21909f1ef8f6f406" translate="yes" xml:space="preserve">
          <source>You can show the camera image in the correct orientation by rotating it by this value in the anti-clockwise direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe59b6e3ca32ebe78d47049b408385cf393e784a" translate="yes" xml:space="preserve">
          <source>You can simplify this as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06404eddddf8e8e822598e42ceb34ce5b362fb7" translate="yes" xml:space="preserve">
          <source>You can specify a background for the widget using the &lt;a href=&quot;stylesheet-reference#background-image-prop&quot;&gt;background-image&lt;/a&gt; property. By default, the background-image is drawn only for the area inside the border. This can be changed using the &lt;a href=&quot;stylesheet-reference#background-clip-prop&quot;&gt;background-clip&lt;/a&gt; property. You can use &lt;a href=&quot;stylesheet-reference#background-repeat-prop&quot;&gt;background-repeat&lt;/a&gt; and &lt;a href=&quot;stylesheet-reference#background-origin-prop&quot;&gt;background-origin&lt;/a&gt; to control the repetition and origin of the background image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718e160db2946755702f19463f17af150b18e133" translate="yes" xml:space="preserve">
          <source>You can specify additional attributes for each of your classes; see &lt;a href=&quot;#class-information-and-tuning&quot;&gt;Class Information and Tuning&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5af68db237a73640f182aa7b9aa13362d81caee" translate="yes" xml:space="preserve">
          <source>You can specify at which point in a transition you want a &lt;a href=&quot;qml-qtquick-parentchange&quot;&gt;ParentChange&lt;/a&gt; to occur by using a &lt;a href=&quot;qml-qtquick-parentanimation&quot;&gt;ParentAnimation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c520dc906259f6b7056389b23651a67bc1a89a" translate="yes" xml:space="preserve">
          <source>You can specify horizontal stretches in the layout using &lt;a href=&quot;qwizard#WizardButton-enum&quot;&gt;Stretch&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954c0bb4df9a1e5d02676daba55a5501f0cc67ed" translate="yes" xml:space="preserve">
          <source>You can specify multiple anchors. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba992f5efd2aa266d426f02019458ae9bdacbac0" translate="yes" xml:space="preserve">
          <source>You can specify platform-specific arguments for the &lt;code&gt;-platform&lt;/code&gt; option. Place them after the platform plugin name following a colon as a comma-separated list. For example, &lt;code&gt;-platform windows:dialogs=xp,fontengine=freetype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c855128b0a258b518be62635129d87b0262ff3" translate="yes" xml:space="preserve">
          <source>You can specify the foundry you want in the family name. The font f in the above example will be set to &quot;Helvetica [Cronyx]&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d7388b49e277b7fa064eedd28dcd036aafece9" translate="yes" xml:space="preserve">
          <source>You can specify the minimum and maximum number of steps with &lt;a href=&quot;qprogressbar#minimum-prop&quot;&gt;setMinimum&lt;/a&gt;() and &lt;a href=&quot;qprogressbar#maximum-prop&quot;&gt;setMaximum&lt;/a&gt;. The current number of steps is set with &lt;a href=&quot;qprogressbar#value-prop&quot;&gt;setValue&lt;/a&gt;(). The progress bar can be rewound to the beginning with &lt;a href=&quot;qprogressbar#reset&quot;&gt;reset&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09db19075ad8b156e966f1e041867dcce11e53fd" translate="yes" xml:space="preserve">
          <source>You can specify which cell you want an item to occupy by setting the &lt;a href=&quot;qml-qtquick-layouts-layout#row-attached-prop&quot;&gt;Layout.row&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-layouts-layout#column-attached-prop&quot;&gt;Layout.column&lt;/a&gt; properties. You can also specify the row span or column span by setting the &lt;a href=&quot;qml-qtquick-layouts-layout#rowSpan-attached-prop&quot;&gt;Layout.rowSpan&lt;/a&gt; or &lt;a href=&quot;qml-qtquick-layouts-layout#columnSpan-attached-prop&quot;&gt;Layout.columnSpan&lt;/a&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75525ef430a89020b354daa9f8532488b21b4c78" translate="yes" xml:space="preserve">
          <source>You can split the text in a &lt;a href=&quot;qdomtext&quot;&gt;QDomText&lt;/a&gt; object over two &lt;a href=&quot;qdomtext&quot;&gt;QDomText&lt;/a&gt; objecs with &lt;a href=&quot;qdomtext#splitText&quot;&gt;splitText&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad327e88a974203046ca8781003e7e7683bc02eb" translate="yes" xml:space="preserve">
          <source>You can start by reimplementing important functions: the protected &lt;a href=&quot;qgraphicslayoutitem#sizeHint&quot;&gt;sizeHint&lt;/a&gt;() function, as well as the public &lt;a href=&quot;qgraphicslayoutitem#setGeometry&quot;&gt;setGeometry&lt;/a&gt;() function. If you want your items to be aware of immediate geometry changes, you can also reimplement &lt;a href=&quot;qgraphicslayoutitem#updateGeometry&quot;&gt;updateGeometry&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9fb3e5dc4bdb11bfd848fbd7aec0dcecfc0d5f" translate="yes" xml:space="preserve">
          <source>You can stop the thread by calling &lt;a href=&quot;qthread#exit&quot;&gt;exit&lt;/a&gt;() or &lt;a href=&quot;qthread#quit&quot;&gt;quit&lt;/a&gt;(). In extreme cases, you may want to forcibly &lt;a href=&quot;qthread#terminate&quot;&gt;terminate&lt;/a&gt;() an executing thread. However, doing so is dangerous and discouraged. Please read the documentation for &lt;a href=&quot;qthread#terminate&quot;&gt;terminate&lt;/a&gt;() and &lt;a href=&quot;qthread#setTerminationEnabled&quot;&gt;setTerminationEnabled&lt;/a&gt;() for detailed information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2c4b0caeedac7395bd8b3c6ff81289ac930fe1" translate="yes" xml:space="preserve">
          <source>You can store application-specific data in an item by calling &lt;a href=&quot;qstandarditem#setData&quot;&gt;setData&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b910a601c4af7fd7212a950bc191201daf6337da" translate="yes" xml:space="preserve">
          <source>You can subclass &lt;a href=&quot;qquickitem&quot;&gt;QQuickItem&lt;/a&gt; to provide your own custom visual item that inherits these features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3a170421f38c4dc3adb40ba9646a6aadb70ca9" translate="yes" xml:space="preserve">
          <source>You can subclass &lt;a href=&quot;qsignaltransition&quot;&gt;QSignalTransition&lt;/a&gt; and reimplement &lt;a href=&quot;qsignaltransition#eventTest&quot;&gt;eventTest&lt;/a&gt;() to make a signal transition conditional; the event object passed to &lt;a href=&quot;qsignaltransition#eventTest&quot;&gt;eventTest&lt;/a&gt;() will be a &lt;a href=&quot;qstatemachine-signalevent&quot;&gt;QStateMachine::SignalEvent&lt;/a&gt; object. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f239f2f830069c1c4d77bb69444a8db1a2fff0" translate="yes" xml:space="preserve">
          <source>You can subclass this item to provide a simple base implementation of accessors for the item's pen and brush.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c716caad8e7d2778e18e40ad7e38c076f85640" translate="yes" xml:space="preserve">
          <source>You can subclass this to create your own node Removed types for communication between your &lt;a href=&quot;qt3dcore-qnode&quot;&gt;QNode&lt;/a&gt; and &lt;a href=&quot;qt3dcore-qbackendnode&quot;&gt;QBackendNode&lt;/a&gt; subclasses when writing your own aspects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc75fdd8fd6afa45be93edac77d2458fc04e69e" translate="yes" xml:space="preserve">
          <source>You can subclass this to create your own node added types for communication between your &lt;a href=&quot;qt3dcore-qnode&quot;&gt;QNode&lt;/a&gt; and &lt;a href=&quot;qt3dcore-qbackendnode&quot;&gt;QBackendNode&lt;/a&gt; subclasses when writing your own aspects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0412b1c5b6731592d9d3200b77ab38d043ec4660" translate="yes" xml:space="preserve">
          <source>You can subclass this to create your own node update types for communication between your &lt;a href=&quot;qt3dcore-qnode&quot;&gt;QNode&lt;/a&gt; and &lt;a href=&quot;qt3dcore-qbackendnode&quot;&gt;QBackendNode&lt;/a&gt; subclasses when writing your own aspects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa069c1240eefe38bbb167743a5863f14ef57c7" translate="yes" xml:space="preserve">
          <source>You can test for any other platform-compiler combination as long as a specification exists for it in the &lt;code&gt;mkspecs&lt;/code&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ec76341e942e802dab1dee8381efdaeaec080a" translate="yes" xml:space="preserve">
          <source>You can test for the presence of a directory with a given name by using &lt;a href=&quot;qdir#exists-1&quot;&gt;exists&lt;/a&gt;(), and the properties of a directory can be tested with &lt;a href=&quot;qdir#isReadable&quot;&gt;isReadable&lt;/a&gt;(), &lt;a href=&quot;qdir#isAbsolute&quot;&gt;isAbsolute&lt;/a&gt;(), &lt;a href=&quot;qdir#isRelative&quot;&gt;isRelative&lt;/a&gt;(), and &lt;a href=&quot;qdir#isRoot&quot;&gt;isRoot&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15fb9de78ec7782b6466149f5b87497248fc96ae" translate="yes" xml:space="preserve">
          <source>You can test that the layout direction works as expected by running your Qt Quick application with the compiled translation file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00812d0f8c11f3fc3516aa7e70f42b843243429b" translate="yes" xml:space="preserve">
          <source>You can test to see if a filename matches a filter using the &lt;a href=&quot;qdir#match&quot;&gt;match&lt;/a&gt;() function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6312531000d3da9a533f9ddf0815740986d7d2d" translate="yes" xml:space="preserve">
          <source>You can test whether a region &lt;a href=&quot;qregion#isEmpty&quot;&gt;isEmpty&lt;/a&gt;() or if it &lt;a href=&quot;qregion#contains&quot;&gt;contains&lt;/a&gt;() a &lt;a href=&quot;qpoint&quot;&gt;QPoint&lt;/a&gt; or &lt;a href=&quot;qrect&quot;&gt;QRect&lt;/a&gt;. The bounding rectangle can be found with &lt;a href=&quot;qregion#boundingRect&quot;&gt;boundingRect&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1c4315c0bc378bf62ac23e13b48e267fcbcc19" translate="yes" xml:space="preserve">
          <source>You can test your application in right-to-left layout direction simply by executing qmlscene with a command-line parameter &quot;-reverse&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0273f1505901c477fe222bef8b3b97bb366d1206" translate="yes" xml:space="preserve">
          <source>You can then set start and end values for the property by calling &lt;a href=&quot;qvariantanimation#startValue-prop&quot;&gt;setStartValue&lt;/a&gt;() and &lt;a href=&quot;qvariantanimation#endValue-prop&quot;&gt;setEndValue&lt;/a&gt;(), and finally call &lt;a href=&quot;qabstractanimation#start&quot;&gt;start&lt;/a&gt;() to start the animation. &lt;a href=&quot;qvariantanimation&quot;&gt;QVariantAnimation&lt;/a&gt; will interpolate the property of the target object and emit &lt;a href=&quot;qvariantanimation#valueChanged&quot;&gt;valueChanged&lt;/a&gt;(). To react to a change in the current value you have to reimplement the &lt;a href=&quot;qvariantanimation#updateCurrentValue&quot;&gt;updateCurrentValue&lt;/a&gt;() virtual function or connect to said signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c616e87f19ac5c0914a43499950066248d36dd1" translate="yes" xml:space="preserve">
          <source>You can then use the &lt;a href=&quot;qsettings&quot;&gt;QSettings&lt;/a&gt; object to read and write settings in the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17d147eac18331c21a5af0be0163f5314a47823" translate="yes" xml:space="preserve">
          <source>You can then use the &lt;code&gt;MyClass::Options&lt;/code&gt; type to store combinations of &lt;code&gt;MyClass::Option&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55032dcaa46022f2d15b540b9f30df6bf54bf111" translate="yes" xml:space="preserve">
          <source>You can then visualize the scene using &lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt;. When the scene changes, (e.g., when an item moves or is transformed) &lt;a href=&quot;qgraphicsscene&quot;&gt;QGraphicsScene&lt;/a&gt; emits the &lt;a href=&quot;qgraphicsscene#changed&quot;&gt;changed&lt;/a&gt;() signal. To remove an item, call &lt;a href=&quot;qgraphicsscene#removeItem&quot;&gt;removeItem&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21deb3744a2c5a790f179b8085dfab6eaec5b399" translate="yes" xml:space="preserve">
          <source>You can translate between cursor positions (characters from the start of the document) and pixel points using &lt;a href=&quot;qml-qtquick-controls-textarea#positionAt-method&quot;&gt;positionAt()&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-controls-textarea#positionToRectangle-method&quot;&gt;positionToRectangle()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7edba05df22b68fa9989704d404f68b2ae0d7832" translate="yes" xml:space="preserve">
          <source>You can translate between cursor positions (characters from the start of the document) and pixel points using &lt;a href=&quot;qml-qtquick-textedit#positionAt-method&quot;&gt;positionAt()&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-textedit#positionToRectangle-method&quot;&gt;positionToRectangle()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab47d620223f32c42ab9bd1208b60198c76d517" translate="yes" xml:space="preserve">
          <source>You can treat &lt;a href=&quot;qparallelanimationgroup&quot;&gt;QParallelAnimationGroup&lt;/a&gt; as any other &lt;a href=&quot;qabstractanimation&quot;&gt;QAbstractAnimation&lt;/a&gt;, e.g., pause, resume, or add it to other animation groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7061251935593a0ad9ab3b56f3b978594cd4f18" translate="yes" xml:space="preserve">
          <source>You can try to abort the shutdown process by calling &lt;a href=&quot;qsessionmanager#cancel&quot;&gt;cancel&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b6e40539bcb8f70cb64e6937a16b41b28e5a84" translate="yes" xml:space="preserve">
          <source>You can tweak these options through the &lt;a href=&quot;qdebug#space&quot;&gt;space&lt;/a&gt;(), &lt;a href=&quot;qdebug#nospace&quot;&gt;nospace&lt;/a&gt;() and &lt;a href=&quot;qdebug#quote&quot;&gt;quote&lt;/a&gt;(), &lt;a href=&quot;qdebug#noquote&quot;&gt;noquote&lt;/a&gt;() methods. Furthermore, &lt;a href=&quot;qtextstream#qtextstream-manipulators&quot;&gt;QTextStream manipulators&lt;/a&gt; can be piped into a &lt;a href=&quot;qdebug&quot;&gt;QDebug&lt;/a&gt; stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e2a14e66cf60b677b4a2b39a6817c3ca8c8d53" translate="yes" xml:space="preserve">
          <source>You can unset the filter with a &lt;code&gt;nullptr&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7872149790215ce674d9307d0b6b25f7ce8c6e" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#config&quot;&gt;CONFIG += lrelease&lt;/a&gt; to automatically compile the files during the build, and &lt;a href=&quot;#config&quot;&gt;CONFIG += lrelease embed_translations&lt;/a&gt; to make them available in &lt;a href=&quot;resources&quot;&gt;The Qt Resource System&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a450c775fd50d1338cdcb13fcca25beca8496b" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#qDebug&quot;&gt;qDebug&lt;/a&gt;(), &lt;a href=&quot;#qInfo&quot;&gt;qInfo&lt;/a&gt;(), or &lt;a href=&quot;#qWarning&quot;&gt;qWarning&lt;/a&gt;() to output errors to the console. This method will attempt to open the file indicated by the error and include additional contextual information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22b24a58103d556c2dba3733a03dc0fd1e8601a" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;graphicsview#qgraphicslayout&quot;&gt;QGraphicsLayout&lt;/a&gt; as a base to write your own custom layout (e.g., a flowlayout), but it is more common to use one of its subclasses instead - &lt;a href=&quot;qgraphicslinearlayout&quot;&gt;QGraphicsLinearLayout&lt;/a&gt; or &lt;a href=&quot;qgraphicsgridlayout&quot;&gt;QGraphicsGridLayout&lt;/a&gt;. When creating a custom layout, the following functions must be reimplemented as a bare minimum:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4654d78a956150eda5d57c4ad822c1d465e2bf5" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;qcamerainfo&quot;&gt;QCameraInfo&lt;/a&gt; to list available cameras and choose which one to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039d558cfa5b1cf756fb3f81cb82a13cdb29919a" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;qcompleter&quot;&gt;QCompleter&lt;/a&gt; to provide auto completions in any Qt widget, such as &lt;a href=&quot;qlineedit&quot;&gt;QLineEdit&lt;/a&gt; and &lt;a href=&quot;qcombobox&quot;&gt;QComboBox&lt;/a&gt;. When the user starts typing a word, &lt;a href=&quot;qcompleter&quot;&gt;QCompleter&lt;/a&gt; suggests possible ways of completing the word, based on a word list. The word list is provided as a &lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt;. (For simple applications, where the word list is static, you can pass a &lt;a href=&quot;qstringlist&quot;&gt;QStringList&lt;/a&gt; to &lt;a href=&quot;qcompleter&quot;&gt;QCompleter&lt;/a&gt;'s constructor.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c35ea3d23034184a0b8efab2b0ab4cbe268b9c1" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;qdiriterator&quot;&gt;QDirIterator&lt;/a&gt; to navigate entries of a directory one at a time. It is similar to &lt;a href=&quot;qdir#entryList&quot;&gt;QDir::entryList&lt;/a&gt;() and &lt;a href=&quot;qdir#entryInfoList&quot;&gt;QDir::entryInfoList&lt;/a&gt;(), but because it lists entries one at a time instead of all at once, it scales better and is more suitable for large directories. It also supports listing directory contents recursively, and following symbolic links. Unlike &lt;a href=&quot;qdir#entryList&quot;&gt;QDir::entryList&lt;/a&gt;(), &lt;a href=&quot;qdiriterator&quot;&gt;QDirIterator&lt;/a&gt; does not support sorting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8d467028b4b7cf14ea03c4ba582d933ccd4dd0" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;qimagewriter#supportedImageFormats&quot;&gt;QImageWriter::supportedImageFormats&lt;/a&gt;() to find out which image formats are available to you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e436c4f4c27307cfef506f12630ba043633fa942" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;qiodevice#isSequential&quot;&gt;isSequential&lt;/a&gt;() to determine the type of device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c172e71b88bdd99f7775715d01673dd916af57a" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;qml-qtmultimedia-mediaplayer&quot;&gt;MediaPlayer&lt;/a&gt; by itself to play audio content (like &lt;a href=&quot;qml-multimedia#audio&quot;&gt;Audio&lt;/a&gt;), or you can use it in conjunction with a &lt;a href=&quot;qml-qtmultimedia-videooutput&quot;&gt;VideoOutput&lt;/a&gt; for rendering video.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbec7f2e94a58bf5fc22ff082a804745fd795648" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;qthreadpool&quot;&gt;QThreadPool&lt;/a&gt; to execute your code in a separate thread. &lt;a href=&quot;qthreadpool&quot;&gt;QThreadPool&lt;/a&gt; deletes the &lt;a href=&quot;qrunnable&quot;&gt;QRunnable&lt;/a&gt; automatically if &lt;a href=&quot;qrunnable#autoDelete&quot;&gt;autoDelete&lt;/a&gt;() returns &lt;code&gt;true&lt;/code&gt; (the default). Use &lt;a href=&quot;qrunnable#setAutoDelete&quot;&gt;setAutoDelete&lt;/a&gt;() to change the auto-deletion flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d684f30e46ebf4a7b9eec5c98b34f9d62f504a9" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;qwizard#setDefaultProperty&quot;&gt;QWizard::setDefaultProperty&lt;/a&gt;() to add entries to this table or to override existing entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cad13dd3a57f68ae879d203b503bdb0b29345cb" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;Camera&lt;/code&gt; to capture images and movies from a camera, and manipulate the capture and processing settings that get applied to the images. To display the viewfinder you can use &lt;a href=&quot;qml-qtmultimedia-videooutput&quot;&gt;VideoOutput&lt;/a&gt; with the Camera set as the source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837838e2ce820bf75ab121ccec0f05d1c9892a5a" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;Radio&lt;/code&gt; to tune the radio and get information about the signal. You can also use the Radio to get information about tuning, for instance the frequency steps supported for tuning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e419a7bd733f4b5a68098a9b1fe7121c42462e" translate="yes" xml:space="preserve">
          <source>You can use QT_VERSION to use the latest Qt features where available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fce60d65db5a6d85b7d46fd3bbc969f26eda0bb" translate="yes" xml:space="preserve">
          <source>You can use a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad600827e05387796964ee3ecd86698c0f9c8c9c" translate="yes" xml:space="preserve">
          <source>You can use any combination of those values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a645f65aac0f8256e6a17c73ba170356bb330d" translate="yes" xml:space="preserve">
          <source>You can use as many modifier flags as you want, except that Qt::TextSingleLine and Qt::TextWordWrap cannot be combined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be1730e7d3a5d9ecff6c003e4ce1805bf265db70" translate="yes" xml:space="preserve">
          <source>You can use at most one horizontal and one vertical flag at a time. Qt::AlignCenter counts as both horizontal and vertical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87ab61d5819f380ffa26baf7f50d51af942c083" translate="yes" xml:space="preserve">
          <source>You can use it to query information about the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1237401dace9a667726afffaa88d71c7cf2b859" translate="yes" xml:space="preserve">
          <source>You can use only one of the horizontal flags at a time. There is one two-dimensional flag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="002768cdff151f115bcdda2e619dd8a504d19c2c" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;qdesignerobjectinspectorinterface&quot;&gt;QDesignerObjectInspectorInterface&lt;/a&gt; to change the current form window selection. For example, when implementing a custom widget plugin:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c9cb4d7d976aa600bf6fd7bb621062aedb827b7" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;qdir#isRelative&quot;&gt;isRelative&lt;/a&gt;() or &lt;a href=&quot;qdir#isAbsolute&quot;&gt;isAbsolute&lt;/a&gt;() functions to check if a &lt;a href=&quot;qdir&quot;&gt;QDir&lt;/a&gt; is using a relative or an absolute file path. Call &lt;a href=&quot;qdir#makeAbsolute&quot;&gt;makeAbsolute&lt;/a&gt;() to convert a relative &lt;a href=&quot;qdir&quot;&gt;QDir&lt;/a&gt; to an absolute one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ca6bd391b9ceecc6745b092b16d3419901ecf5" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;qml-qt3d-core-nodeinstantiator#objectAdded-signal&quot;&gt;objectAdded&lt;/a&gt; signal to respond to items being created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4bee85bd664536d47a7ee70bc9c709eb3dd7e8" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;qml-qtqml-instantiator#objectAdded-signal&quot;&gt;objectAdded&lt;/a&gt; signal to respond to items being created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b99403d49c775c7e3654e599b46022213935c8" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;options&lt;/code&gt; to specify both general and mode-specific settings. Options that only apply to the Makefile mode are described in the &lt;a href=&quot;#makefilemode&quot;&gt;Makefile Mode Options&lt;/a&gt; section, whereas options that influence the creation of project files are described in the &lt;a href=&quot;#projectmode&quot;&gt;Project Mode Options&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4b4f8afea973238dcec7489f4d0010ebba697b" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;qt.conf&lt;/code&gt; file to override paths or to specify arguments to be passed to the platform plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe9ec466f1fd6717fc31bec6cb3e9588d43b157" translate="yes" xml:space="preserve">
          <source>You can use the following command-line arguments while debugging to provide input for bug reports:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2d9341e9000e4111d81fa279a5778c2940c008" translate="yes" xml:space="preserve">
          <source>You can use the keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d17032cb431c0614b6f37e8cd3b5adaf726b03" translate="yes" xml:space="preserve">
          <source>You can use the native key to access shared memory segments that have not been created by Qt, or to grant shared memory access to non-Qt applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2008c6ca44aec7f010182734b257a26d6a8cd5" translate="yes" xml:space="preserve">
          <source>You can use the object returned to connect signals to the script functions, or to access the script engine directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86729f5800a15fcaeb45f5d04bd8b4d85fb3f126" translate="yes" xml:space="preserve">
          <source>You can use the properties of &lt;a href=&quot;qml-qtquick-text&quot;&gt;Text&lt;/a&gt; to change the appearance of the text as desired:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef67821eca4cfab7748a951a5b6ec60ee117bfa" translate="yes" xml:space="preserve">
          <source>You can use the returned pointer to call functions directly through &lt;a href=&quot;qaxscript#call&quot;&gt;QAxScript::call&lt;/a&gt;(), to access the script engine directly, or to delete and thus unload the script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76a623990e97980aae4083f33deda4c0551a65d" translate="yes" xml:space="preserve">
          <source>You can use the same model as a data source for multiple views. If the user edits the model through one of the views, the other views will reflect the changes immediately. The &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtsql-tablemodel-example.html#&quot;&gt;Table Model&lt;/a&gt; example shows how it works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494420d3c7f20a394cde468fb4da1ac76d866b8d" translate="yes" xml:space="preserve">
          <source>You can use the screenshot below as a guide to selecting the correct signal and slot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91937103458791ef2ad567f66cbed2b14c9fa655" translate="yes" xml:space="preserve">
          <source>You can use the services provided by Esri's ArcGIS Platform by subscribing to the ArcGIS Developer Program, at no charge. See the &quot;Essentials&quot; plan details here: {https://developers.arcgis.com/pricing/}{ArcGIS Developer Program Pricing}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfac5ce6e4ff4cb41b45a30b5848877c3deaa285" translate="yes" xml:space="preserve">
          <source>You can use these keys with &lt;a href=&quot;qimage#text&quot;&gt;text&lt;/a&gt;() to list the image text for a certain key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215f48184dda7508549b6a0f9b8c93ad14e2bfb8" translate="yes" xml:space="preserve">
          <source>You can use this function overload to notify &lt;a href=&quot;qgraphicsscene&quot;&gt;QGraphicsScene&lt;/a&gt; of changes to the background or the foreground of the scene. This function is commonly used for scenes with tile-based backgrounds to notify changes when &lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt; has enabled &lt;a href=&quot;qgraphicsview#CacheModeFlag-enum&quot;&gt;CacheBackground&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dedcab0cbbab74f2885c5821657419d34bed22ff" translate="yes" xml:space="preserve">
          <source>You can use this function to undo a previous &lt;a href=&quot;qformlayout#addRow&quot;&gt;addRow&lt;/a&gt;() or &lt;a href=&quot;qformlayout#insertRow&quot;&gt;insertRow&lt;/a&gt;():</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33aa27fff52eaf54de650686d8d7070c00fcceb1" translate="yes" xml:space="preserve">
          <source>You can use this handle together with the native API to access extended information about the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e80ec48f32b10345a04b4265b0a9d538bd6747" translate="yes" xml:space="preserve">
          <source>You can use this handle, together with the native API, to access extended information about the certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78818a4894af933a98c19e423433ea329708ab81" translate="yes" xml:space="preserve">
          <source>You can use this information to present visual feedback - for example, drawing rectangles around areas of the camera frame that are in focus, or changing the color of a zone as it comes into focus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318efe2ac01df1e616a52b585fb318f7674800b7" translate="yes" xml:space="preserve">
          <source>You can use this macro in your own adaptors by placing it before your method's return value (which must be &quot;void&quot;) in the class declaration, as shown in the example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc140c3120426223c0a9d65a82346f7c427fc7e" translate="yes" xml:space="preserve">
          <source>You can use this macro to specify information about a custom type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e1cb12b367d7573d1ce8118c7607995942c481" translate="yes" xml:space="preserve">
          <source>You can use this property to display the name of the camera in a user interface.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
