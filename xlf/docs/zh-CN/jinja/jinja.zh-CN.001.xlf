<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="jinja">
    <body>
      <group id="jinja">
        <trans-unit id="d518ee4676b80ad78627e3058478d5d42201367e" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2007&amp;ndash;2020 Pallets</source>
          <target state="translated">&amp;copy;2007&amp;ndash;2020货盘</target>
        </trans-unit>
        <trans-unit id="7f4b616cd5711aa17f4acbcbc4a373daf1c2b358" translate="yes" xml:space="preserve">
          <source>(Unfortunately the django cache interface is not compatible because it does not support storing binary data, only unicode. You can however pass the underlying cache client to the bytecode cache which is available as &lt;code&gt;django.core.cache.cache._client&lt;/code&gt;.)</source>
          <target state="translated">（不幸的是，django缓存接口不兼容，因为它不支持只存储unicode来存储二进制数据。但是，您可以将基础缓存客户端传递给字节码缓存，该缓存可作为 &lt;code&gt;django.core.cache.cache._client&lt;/code&gt; 使用。）</target>
        </trans-unit>
        <trans-unit id="3561d51a8b498f533ba2841a0380c5b132d01815" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#jinja2.Markup.unescape&quot;&gt;&lt;code&gt;unescape()&lt;/code&gt;&lt;/a&gt; the markup, remove tags, and normalize whitespace to single spaces.</source>
          <target state="translated">&lt;a href=&quot;#jinja2.Markup.unescape&quot;&gt; &lt;code&gt;unescape()&lt;/code&gt; &lt;/a&gt;标记，删除标签，并将空格标准化为单个空格。</target>
        </trans-unit>
        <trans-unit id="6ad1a619500ed2398c3ee0abae0b32c8fda840d2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt; objects are implemented by overriding the special &lt;code&gt;__underscore__&lt;/code&gt; methods. For example the default &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt; class implements &lt;code&gt;__unicode__&lt;/code&gt; in a way that it returns an empty string, however &lt;code&gt;__int__&lt;/code&gt; and others still fail with an exception. To allow conversion to int by returning &lt;code&gt;0&lt;/code&gt; you can implement your own:</source>
          <target state="translated">&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;对象通过重写特殊的 &lt;code&gt;__underscore__&lt;/code&gt; 方法来实现。例如，默认的&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;类以返回空字符串的方式实现 &lt;code&gt;__unicode__&lt;/code&gt; ，但是 &lt;code&gt;__int__&lt;/code&gt; 和其他类仍然会因异常而失败。要允许通过返回 &lt;code&gt;0&lt;/code&gt; 转换为int，您可以实现自己的：</target>
        </trans-unit>
        <trans-unit id="ec9067741db9477a96d11514b4ff33e4e55ea96a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt; or a subclass of it that is used to represent undefined values in the template.</source>
          <target state="translated">&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;或其子类，用于表示模板中的未定义值。</target>
        </trans-unit>
        <trans-unit id="c197e18e9a1f9a362d66c1558a525685700bfc9e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#jinja2.nodes.Expr&quot;&gt;&lt;code&gt;Expr&lt;/code&gt;&lt;/a&gt;: expressions</source>
          <target state="translated">&lt;a href=&quot;#jinja2.nodes.Expr&quot;&gt; &lt;code&gt;Expr&lt;/code&gt; &lt;/a&gt;：表达式</target>
        </trans-unit>
        <trans-unit id="f42dbc236c7eb2f72c061dc8b24976c301b1a386" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#jinja2.nodes.Helper&quot;&gt;&lt;code&gt;Helper&lt;/code&gt;&lt;/a&gt;: helper nodes</source>
          <target state="translated">&lt;a href=&quot;#jinja2.nodes.Helper&quot;&gt; &lt;code&gt;Helper&lt;/code&gt; &lt;/a&gt;：助手节点</target>
        </trans-unit>
        <trans-unit id="caf0b8b19c9e1941cbb17d214b791b2cffe44a88" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#jinja2.nodes.Stmt&quot;&gt;&lt;code&gt;Stmt&lt;/code&gt;&lt;/a&gt;: statements</source>
          <target state="translated">&lt;a href=&quot;#jinja2.nodes.Stmt&quot;&gt; &lt;code&gt;Stmt&lt;/code&gt; &lt;/a&gt;：语句</target>
        </trans-unit>
        <trans-unit id="43d47425a422f2e54862fe28da58c5b9d6e68b71" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#jinja2.nodes.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt;: the outermost wrapper node</source>
          <target state="translated">&lt;a href=&quot;#jinja2.nodes.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;：最外面的包装器节点</target>
        </trans-unit>
        <trans-unit id="0cfd5a711aab8e1cfc70751e50cc67fe6c7a2b27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#&amp;nbsp; ... ##&lt;/code&gt; for &lt;a href=&quot;#line-statements&quot;&gt;Line Statements&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;#&amp;nbsp; ... ##&lt;/code&gt; 用于&lt;a href=&quot;#line-statements&quot;&gt;行语句&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8b6dd593e17fcccbc52992aec587fe6c279f1ec5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;greaterthan&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;greaterthan&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="099bed218a276df5fc2ecc5c06c5f1ef01221a00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;lessthan&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;lessthan&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f8fac12709c74dd859d28b243e80de73d94b539e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'ceil'&lt;/code&gt; always rounds up</source>
          <target state="translated">&lt;code&gt;'ceil'&lt;/code&gt; 总是四舍五入</target>
        </trans-unit>
        <trans-unit id="7ad6a10db07e41577176e3fef386a50a7ea550d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'common'&lt;/code&gt; rounds either up or down</source>
          <target state="translated">&lt;code&gt;'common'&lt;/code&gt; 向上或向下舍入</target>
        </trans-unit>
        <trans-unit id="a9dc2e82514f5788b4666b3095eb0f9657a2332c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'floor'&lt;/code&gt; always rounds down</source>
          <target state="translated">&lt;code&gt;'floor'&lt;/code&gt; 总是四舍五入</target>
        </trans-unit>
        <trans-unit id="86f63c0c554c0ecba771eea460f5559c9bacb2fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;equalto&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;equalto&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b8272ea7c7bc1df167bc38d54a3b170d910ccfab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if the compiler cannot evaluate some expressions at compile time. At runtime this should always be &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 如果编译器无法在编译时评估某些表达式，则为true。在运行时，该值应始终为 &lt;code&gt;False&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c609555f979921e3baaa68b1c5de509472be1da6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; depending on if autoescaping is active or not.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 或 &lt;code&gt;False&lt;/code&gt; 取决于自动转义是否处于活动状态。</target>
        </trans-unit>
        <trans-unit id="4efd8d3de5d7d57d0ddf8a8cef7a541ab14a4420" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_&lt;/code&gt;: alias for &lt;code&gt;gettext&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;_&lt;/code&gt; ： &lt;code&gt;gettext&lt;/code&gt; 的别名</target>
        </trans-unit>
        <trans-unit id="411c42b442769a9ec404acc9ce1d01fed9403149" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;block&lt;/code&gt; tags can be inside other blocks such as &lt;code&gt;if&lt;/code&gt;, but they will always be executed regardless of if the &lt;code&gt;if&lt;/code&gt; block is actually rendered.</source>
          <target state="translated">&lt;code&gt;block&lt;/code&gt; 标签可以位于其他块中，例如 &lt;code&gt;if&lt;/code&gt; ，但是无论 &lt;code&gt;if&lt;/code&gt; 块是否实际呈现，它们都将始终执行。</target>
        </trans-unit>
        <trans-unit id="1e89ff237a9caa8ac9f4a1091514f26e191261d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cycle&lt;/code&gt; can take an unlimited amount of strings. Each time this tag is encountered the next item from the list is rendered.</source>
          <target state="translated">&lt;code&gt;cycle&lt;/code&gt; 可以无限量地使用字符串。每次遇到此标签时，都会渲染列表中的下一项。</target>
        </trans-unit>
        <trans-unit id="32ade2801e1df040afe9013de43ee8e53f50d273" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;explicit_parentheses&lt;/code&gt; is true if the parsing was triggered by an expression in parentheses. This is used to figure out if an empty tuple is a valid expression or not.</source>
          <target state="translated">&lt;code&gt;explicit_parentheses&lt;/code&gt; 如果解析是由括号中的表达式触发的，则explicit_parentheses为true。这用于确定空元组是否为有效表达式。</target>
        </trans-unit>
        <trans-unit id="734b53bf5b5d771f9f765504ca6c1beaf93ad6a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extensions&lt;/code&gt; and &lt;code&gt;filter_func&lt;/code&gt; are passed to &lt;a href=&quot;#jinja2.Environment.list_templates&quot;&gt;&lt;code&gt;list_templates()&lt;/code&gt;&lt;/a&gt;. Each template returned will be compiled to the target folder or zipfile.</source>
          <target state="translated">&lt;code&gt;extensions&lt;/code&gt; 和 &lt;code&gt;filter_func&lt;/code&gt; 传递给&lt;a href=&quot;#jinja2.Environment.list_templates&quot;&gt; &lt;code&gt;list_templates()&lt;/code&gt; &lt;/a&gt;。返回的每个模板都将编译到目标文件夹或zipfile中。</target>
        </trans-unit>
        <trans-unit id="22179339a7b0d68a3b457278e20388943691791c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foo['bar']&lt;/code&gt; works mostly the same with a small difference in sequence:</source>
          <target state="translated">&lt;code&gt;foo['bar']&lt;/code&gt; 工作原理基本相同，只是顺序有所不同：</target>
        </trans-unit>
        <trans-unit id="f4cbfb6c7f8d2cc9851d6631cff77779b0ccabdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt; is the name of the &lt;code&gt;gettext&lt;/code&gt; function used (if the string was extracted from embedded Python code).</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 是所使用的 &lt;code&gt;gettext&lt;/code&gt; 函数的名称（如果字符串是从嵌入式Python代码中提取的）。</target>
        </trans-unit>
        <trans-unit id="c6ecf5889eb71ad2123f07ac11a8c3b650f7f215" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gettext&lt;/code&gt;: translate a single string</source>
          <target state="translated">&lt;code&gt;gettext&lt;/code&gt; ：翻译单个字符串</target>
        </trans-unit>
        <trans-unit id="ce80bbef81009ae8c789fd1996963743bc3ebd32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;groupby&lt;/code&gt; yields namedtuples of &lt;code&gt;(grouper, list)&lt;/code&gt;, which can be used instead of the tuple unpacking above. &lt;code&gt;grouper&lt;/code&gt; is the value of the attribute, and &lt;code&gt;list&lt;/code&gt; is the items with that value.</source>
          <target state="translated">&lt;code&gt;groupby&lt;/code&gt; 产生 &lt;code&gt;(grouper, list)&lt;/code&gt; namedtuple ，可以使用它代替上面的拆包元组。 &lt;code&gt;grouper&lt;/code&gt; 是属性的值， &lt;code&gt;list&lt;/code&gt; 是具有该值的项目。</target>
        </trans-unit>
        <trans-unit id="367b0e43f32b9c3937fc935fe31f7b4cddabb8b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lineno&lt;/code&gt; is the number of the line on which the string was found.</source>
          <target state="translated">&lt;code&gt;lineno&lt;/code&gt; 是在其上找到字符串的行号。</target>
        </trans-unit>
        <trans-unit id="61eee75c63ed74c615159e507e4cdb129dfb799b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load&lt;/code&gt;: load that name</source>
          <target state="translated">&lt;code&gt;load&lt;/code&gt; ：加载该名称</target>
        </trans-unit>
        <trans-unit id="c8acddff323b87d89be736d144eb4066ca53fd95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locals&lt;/code&gt; can be a dict of local variables for internal usage.</source>
          <target state="translated">&lt;code&gt;locals&lt;/code&gt; 可以是内部使用的局部变量的指示。</target>
        </trans-unit>
        <trans-unit id="8ae7724ece5757dff9dea0f0bdf151df140de26b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt; is the string itself (&lt;code&gt;unicode&lt;/code&gt; on Python 2), or a tuple of strings for functions with multiple arguments.</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; 是字符串本身（在Python 2上为 &lt;code&gt;unicode&lt;/code&gt; ），或者是具有多个参数的函数的字符串元组。</target>
        </trans-unit>
        <trans-unit id="fdb3bb39a61acc5cd7de42f28e8ee02fba7d1708" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngettext&lt;/code&gt;: translate a pluralizable string</source>
          <target state="translated">&lt;code&gt;ngettext&lt;/code&gt; ：翻译一个可复数的字符串</target>
        </trans-unit>
        <trans-unit id="99a00d3b2781ffd96ea0ff70d523258b889d2cd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;param&lt;/code&gt;: like &lt;code&gt;store&lt;/code&gt; but if the name was defined as function parameter.</source>
          <target state="translated">&lt;code&gt;param&lt;/code&gt; ：类似于 &lt;code&gt;store&lt;/code&gt; ,但是如果名称被定义为函数参数。</target>
        </trans-unit>
        <trans-unit id="279fa1fd47c25eb5eb4c890e1383ae85999afbd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;store&lt;/code&gt;: store a value in the name</source>
          <target state="translated">&lt;code&gt;store&lt;/code&gt; ：在名称中存储一个值</target>
        </trans-unit>
        <trans-unit id="af4c0f8a422f56a2eb5866e5c5c3e42594bae6c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the left hand side is greater or equal to the right hand side.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 如果左侧大于或等于右侧，则为true。</target>
        </trans-unit>
        <trans-unit id="535bb835fdd9fd6f3b304457b91e9ea79fdc125a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the left hand side is greater than the right hand side.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 如果左侧大于右侧，则为true。</target>
        </trans-unit>
        <trans-unit id="4d47807a75c530b891ff35fde89e28be868e36d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the left hand side is lower or equal to the right hand side.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 如果左侧小于或等于右侧，则为true。</target>
        </trans-unit>
        <trans-unit id="4cf71740c68c36d42ceef2c5ec1084941125b9a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the left hand side is lower than the right hand side.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 如果左侧小于右侧，则为true。</target>
        </trans-unit>
        <trans-unit id="4c0bdaa2a4d7f848361ab2cd5b0652fddfd1c578" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; is always true and &lt;code&gt;false&lt;/code&gt; is always false.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 始终为true， &lt;code&gt;false&lt;/code&gt; 始终为false。</target>
        </trans-unit>
        <trans-unit id="ee2a8aa1a3c4f398b12def5c8e3458e6859f5a71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{# ... #}&lt;/code&gt; for &lt;a href=&quot;#comments&quot;&gt;Comments&lt;/a&gt; not included in the template output</source>
          <target state="translated">&lt;code&gt;{# ... #}&lt;/code&gt; 表示&lt;a href=&quot;#comments&quot;&gt;注释&lt;/a&gt;未包含在模板输出中</target>
        </trans-unit>
        <trans-unit id="711e2f6b8acc7c61a77b9c98ff3e75f1d5c2b0cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{% ... %}&lt;/code&gt; for &lt;a href=&quot;#list-of-control-structures&quot;&gt;Statements&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;{% ... %}&lt;/code&gt; 的&lt;a href=&quot;#list-of-control-structures&quot;&gt;声明&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="77f72cb5d694babdaf0b043933348b73ac573a79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{ &quot;Hello &quot; ~ name ~ &quot;!&quot; }}&lt;/code&gt; would return (assuming &lt;code&gt;name&lt;/code&gt; is set to &lt;code&gt;'John'&lt;/code&gt;) &lt;code&gt;Hello John!&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{{ &quot;Hello &quot; ~ name ~ &quot;!&quot; }}&lt;/code&gt; 会返回（假设 &lt;code&gt;name&lt;/code&gt; 设置为 &lt;code&gt;'John'&lt;/code&gt; ） &lt;code&gt;Hello John!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d380fe9b81ff64131b34295f927602d0871ecd19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{ ... }}&lt;/code&gt; for &lt;a href=&quot;#expressions&quot;&gt;Expressions&lt;/a&gt; to print to the template output</source>
          <target state="translated">&lt;code&gt;{{ ... }}&lt;/code&gt; 供&lt;a href=&quot;#expressions&quot;&gt;表达式&lt;/a&gt;打印到模板输出</target>
        </trans-unit>
        <trans-unit id="68dda45a5861ac96317c9d7aca34f22d5eb088e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{ post.render(user, full=true) }}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{{ post.render(user, full=true) }}&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="dd66c0b34494c1821001709d8ff61b9c311c48e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import name:&lt;/strong&gt;&lt;code&gt;jinja2.ext.autoescape&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;导入名称：&lt;/strong&gt; &lt;code&gt;jinja2.ext.autoescape&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="521595144ffc7fdc0c8e9f0e1f9a434edcf99c22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import name:&lt;/strong&gt;&lt;code&gt;jinja2.ext.debug&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;导入名称：&lt;/strong&gt; &lt;code&gt;jinja2.ext.debug&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fea4530e06779a4c16cb21ac5be994633f9b4f47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import name:&lt;/strong&gt;&lt;code&gt;jinja2.ext.do&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;导入名称：&lt;/strong&gt; &lt;code&gt;jinja2.ext.do&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6d17c5843ed05a6dc7edd6c0c415c12f01e947f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import name:&lt;/strong&gt;&lt;code&gt;jinja2.ext.i18n&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;导入名称：&lt;/strong&gt; &lt;code&gt;jinja2.ext.i18n&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e1ae988dd7a45f55aad13b9b5c6a0f4c68ef7464" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import name:&lt;/strong&gt;&lt;code&gt;jinja2.ext.loopcontrols&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;导入名称：&lt;/strong&gt; &lt;code&gt;jinja2.ext.loopcontrols&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4235785f385bdd7ffe9181a533ea0336fda5c06a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import name:&lt;/strong&gt;&lt;code&gt;jinja2.ext.with_&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;导入名称：&lt;/strong&gt; &lt;code&gt;jinja2.ext.with_&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1cd8203545083e278914ee81d4d4b97aaa2d3e70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;attribute&lt;/strong&gt; &amp;ndash; Filter objects with unique values for this attribute.</source>
          <target state="translated">&lt;strong&gt;属性&lt;/strong&gt;&amp;ndash;使用此属性的唯一值过滤对象。</target>
        </trans-unit>
        <trans-unit id="94c4f75c77144c80bb44ef0c2e218ab36736a120" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;attribute&lt;/strong&gt; &amp;ndash; Get the object with the max value of this attribute.</source>
          <target state="translated">&lt;strong&gt;属性&lt;/strong&gt;&amp;ndash;获取具有此属性最大值的对象。</target>
        </trans-unit>
        <trans-unit id="cff821adcb516d6d15161a95b6b6acf78251dadb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;attribute&lt;/strong&gt; &amp;ndash; Get the object with the min value of this attribute.</source>
          <target state="translated">&lt;strong&gt;属性&lt;/strong&gt;&amp;ndash;使用此属性的最小值获取对象。</target>
        </trans-unit>
        <trans-unit id="404c75128f2642ad7ea8728f42bbe1131d059f22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;attribute&lt;/strong&gt; &amp;ndash; When sorting objects or dicts, an attribute or key to sort by. Can use dot notation like &lt;code&gt;&quot;address.city&quot;&lt;/code&gt;. Can be a list of attributes like &lt;code&gt;&quot;age,name&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;属性&lt;/strong&gt;&amp;ndash;排序对象或字典时，排序依据的属性或键。可以使用诸如 &lt;code&gt;&quot;address.city&quot;&lt;/code&gt; 类的点表示法。可以是诸如 &lt;code&gt;&quot;age,name&quot;&lt;/code&gt; 类的属性的列表。</target>
        </trans-unit>
        <trans-unit id="f803d88af67f1fd2517c884e225fda07a477289b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;base&lt;/strong&gt; &amp;ndash; the base class to add logging functionality to. This defaults to &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;base&lt;/strong&gt; &amp;ndash;要添加日志记录功能的基类。默认为&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8b2447044d64aa8ea5df164c620f39a566347680" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;blank&lt;/strong&gt; &amp;ndash; Don&amp;rsquo;t skip indenting empty lines.</source>
          <target state="translated">&lt;strong&gt;空白&lt;/strong&gt;&amp;ndash;不要跳过缩进空行。</target>
        </trans-unit>
        <trans-unit id="361a76c4d3694bd73e67d8afb7824156b97b8323" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;break_long_words&lt;/strong&gt; &amp;ndash; If a word is longer than &lt;code&gt;width&lt;/code&gt;, break it across lines.</source>
          <target state="translated">&lt;strong&gt;break_long_words&lt;/strong&gt; &amp;ndash;如果单词长于 &lt;code&gt;width&lt;/code&gt; ，则将其&lt;strong&gt;跨行&lt;/strong&gt;打断。</target>
        </trans-unit>
        <trans-unit id="ba597292aa772c7db9ba61172660e1b429786025" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;break_on_hyphens&lt;/strong&gt; &amp;ndash; If a word contains hyphens, it may be split across lines.</source>
          <target state="translated">&lt;strong&gt;break_on_hyphens&lt;/strong&gt; &amp;ndash;如果单词包含连字符，则可以将其分成多行。</target>
        </trans-unit>
        <trans-unit id="55e88d9cea8f38bda18d88d15f4bbe1e3434c8fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;case_sensitive&lt;/strong&gt; &amp;ndash; Treat upper and lower case strings as distinct.</source>
          <target state="translated">&lt;strong&gt;case_sensitive&lt;/strong&gt; &amp;ndash;区分大小写字符串。</target>
        </trans-unit>
        <trans-unit id="d8401dfcfacfcbd08347ef4038835d79b9e7b1fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;case_sensitive&lt;/strong&gt; &amp;ndash; When sorting strings, sort upper and lower case separately.</source>
          <target state="translated">&lt;strong&gt;case_sensitive&lt;/strong&gt; &amp;ndash;在对字符串进行排序时，请分别对大小写进行排序。</target>
        </trans-unit>
        <trans-unit id="969f54cb9788a20aabcf05db0943ef5f440bae90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;first&lt;/strong&gt; &amp;ndash; Don&amp;rsquo;t skip indenting the first line.</source>
          <target state="translated">&lt;strong&gt;first&lt;/strong&gt; &amp;ndash;不要跳过第一行的缩进。</target>
        </trans-unit>
        <trans-unit id="d3c3cba5080005948ad1f33a0e69c350feee1548" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;invalid&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;invalid&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="1dc1f1b052f7724c31977c1b62793b89ebb3caee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;items&lt;/strong&gt; &amp;ndash; Each positional argument will be yielded in the order given for each cycle.</source>
          <target state="translated">&lt;strong&gt;items&lt;/strong&gt; &amp;ndash;每个位置参数将按照每个周期给出的顺序产生。</target>
        </trans-unit>
        <trans-unit id="983f481c20696a3b70b6e2de25483fd50fc67572" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;logger&lt;/strong&gt; &amp;ndash; the logger to use. If not provided, a default logger is created.</source>
          <target state="translated">&lt;strong&gt;记录器&lt;/strong&gt;&amp;ndash;要使用的记录器。如果未提供，则会创建一个默认的记录器。</target>
        </trans-unit>
        <trans-unit id="a9bbe6c8ad8f766aeec51376780649b73cfb4cb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reverse&lt;/strong&gt; &amp;ndash; Sort descending instead of ascending.</source>
          <target state="translated">&lt;strong&gt;reverse&lt;/strong&gt; &amp;ndash;降序排列，而不是升序排列。</target>
        </trans-unit>
        <trans-unit id="5bd3d9377937416db0cd750f2c7474e1c597b20e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;s&lt;/strong&gt; &amp;ndash; Original text to wrap.</source>
          <target state="translated">&lt;strong&gt;s&lt;/strong&gt; &amp;ndash;要包装的原始文本。</target>
        </trans-unit>
        <trans-unit id="7452d1679abb9a37f243ae85ec0bee74320e2c68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;valid&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;valid&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="e12bab4402a7b41c95bf6273400d444ae3a97f19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; Data to quote. A string will be quoted directly. A dict or iterable of &lt;code&gt;(key, value)&lt;/code&gt; pairs will be joined as a query string.</source>
          <target state="translated">&lt;strong&gt;值&lt;/strong&gt;&amp;ndash;要报价的数据。字符串将直接用引号引起来。 &lt;code&gt;(key, value)&lt;/code&gt; 对的dict或可迭代项将作为查询字符串加入。</target>
        </trans-unit>
        <trans-unit id="2ea3203f459bf9c32bfe1e7892ab46ffd67a0c4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;width&lt;/strong&gt; &amp;ndash; Maximum length of wrapped lines.</source>
          <target state="translated">&lt;strong&gt;宽度&lt;/strong&gt;&amp;ndash;换行的最大长度。</target>
        </trans-unit>
        <trans-unit id="84ae91f9bd86c61adfdb5190cf54a798a6ddd835" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;width&lt;/strong&gt; &amp;ndash; Number of spaces to indent by.</source>
          <target state="translated">&lt;strong&gt;width&lt;/strong&gt; &amp;ndash;要缩进的空格数。</target>
        </trans-unit>
        <trans-unit id="beeceb9f9e52bbcd47316e136ee31a9124f09a51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;wrapstring&lt;/strong&gt; &amp;ndash; String to join each wrapped line. Defaults to &lt;code&gt;Environment.newline_sequence&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;wrapstring&lt;/strong&gt; &amp;ndash;连接每条换行的字符串。默认为 &lt;code&gt;Environment.newline_sequence&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d4d0ffeccade92508636f809b82b20ccc4a5776" translate="yes" xml:space="preserve">
          <source>A Jinja template is simply a text file. Jinja can generate any text-based format (HTML, XML, CSV, LaTeX, etc.). A Jinja template doesn&amp;rsquo;t need to have a specific extension: &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.xml&lt;/code&gt;, or any other extension is just fine.</source>
          <target state="translated">Jinja模板只是一个文本文件。Jinja可以生成任何基于文本的格式（HTML，XML，CSV，LaTeX等）。Jinja模板不需要具有特定的扩展名： &lt;code&gt;.html&lt;/code&gt; ， &lt;code&gt;.xml&lt;/code&gt; 或任何其他扩展名都可以。</target>
        </trans-unit>
        <trans-unit id="3af7391ee1599c06390a5909f82e1f7f9b481d1b" translate="yes" xml:space="preserve">
          <source>A bytecode cache that stores bytecode on the filesystem. It accepts two arguments: The directory where the cache items are stored and a pattern string that is used to build the filename.</source>
          <target state="translated">一个在文件系统中存储字节码的字节码缓存。它接受两个参数。存放缓存项目的目录和用于建立文件名的模式字符串。</target>
        </trans-unit>
        <trans-unit id="29e9143e026767eb8b3c34b47c65eccf2bb7e6f3" translate="yes" xml:space="preserve">
          <source>A callable that can be used to process the result of a variable expression before it is output. For example one can convert &lt;code&gt;None&lt;/code&gt; implicitly into an empty string here.</source>
          <target state="translated">可调用的可调用对象，可用于在输出变量表达式之前对其进行处理。例如，可以在此处将 &lt;code&gt;None&lt;/code&gt; 隐式转换为空字符串。</target>
        </trans-unit>
        <trans-unit id="baab44730efc2515b4d79e67f8f95a25efc365b7" translate="yes" xml:space="preserve">
          <source>A child template might look like this:</source>
          <target state="translated">一个子模板可能是这样的。</target>
        </trans-unit>
        <trans-unit id="b63d511fdd58bfd709ab7efc54268c43b336093f" translate="yes" xml:space="preserve">
          <source>A conditional expression (inline if expression). (&lt;code&gt;{{
foo if bar else baz }}&lt;/code&gt;)</source>
          <target state="translated">条件表达式（如果表达式则为内联）。（ &lt;code&gt;{{ foo if bar else baz }}&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="00734acfa28be94c17ed22087663390eada93416" translate="yes" xml:space="preserve">
          <source>A constant template string.</source>
          <target state="translated">一个恒定的模板字符串。</target>
        </trans-unit>
        <trans-unit id="8767ebbc8558a483a75713e52916a3c99184d914" translate="yes" xml:space="preserve">
          <source>A control structure refers to all those things that control the flow of a program - conditionals (i.e. if/elif/else), for-loops, as well as things like macros and blocks. With the default syntax, control structures appear inside &lt;code&gt;{% ... %}&lt;/code&gt; blocks.</source>
          <target state="translated">控制结构指的是控制程序流程的所有事物-条件（即if / elif / else），for循环以及宏和块之类的事物。使用默认语法，控制结构出现在 &lt;code&gt;{% ... %}&lt;/code&gt; 块内。</target>
        </trans-unit>
        <trans-unit id="cfe5400ff35558fb285a4e9f2286b0801aefe952" translate="yes" xml:space="preserve">
          <source>A convenient alternative to dict literals. &lt;code&gt;{'foo': 'bar'}&lt;/code&gt; is the same as &lt;code&gt;dict(foo='bar')&lt;/code&gt;.</source>
          <target state="translated">字典文字的便捷替代方法。 &lt;code&gt;{'foo': 'bar'}&lt;/code&gt; 与 &lt;code&gt;dict(foo='bar')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1f9f25e4703555d35f89df7abbf46e57ba60f133" translate="yes" xml:space="preserve">
          <source>A dict in Python is a structure that combines keys and values. Keys must be unique and always have exactly one value. Dicts are rarely used in templates; they are useful in some rare cases such as the &lt;a href=&quot;#xmlattr&quot;&gt;&lt;code&gt;xmlattr()&lt;/code&gt;&lt;/a&gt; filter.</source>
          <target state="translated">Python中的dict是结合了键和值的结构。密钥必须唯一且始终具有唯一的一个值。字典很少在模板中使用；它们在&lt;a href=&quot;#xmlattr&quot;&gt; &lt;code&gt;xmlattr()&lt;/code&gt; &lt;/a&gt;过滤器等极少数情况下很有用。</target>
        </trans-unit>
        <trans-unit id="720ecc99105d300492e8d7cdabe603499d0cad83" translate="yes" xml:space="preserve">
          <source>A dict of block render functions. Each of these functions works exactly like the &lt;a href=&quot;#jinja2.Template.root_render_func&quot;&gt;&lt;code&gt;root_render_func()&lt;/code&gt;&lt;/a&gt; with the same limitations.</source>
          <target state="translated">块渲染功能的字典。这些功能中的每个功能都完全类似于&lt;a href=&quot;#jinja2.Template.root_render_func&quot;&gt; &lt;code&gt;root_render_func()&lt;/code&gt; &lt;/a&gt;，但具有相同的限制。</target>
        </trans-unit>
        <trans-unit id="65d3eaeee024be7a43148c6b2e048f24ff99e8c2" translate="yes" xml:space="preserve">
          <source>A dict of filters for this environment. As long as no template was loaded it&amp;rsquo;s safe to add new filters or remove old. For custom filters see &lt;a href=&quot;#writing-filters&quot;&gt;Custom Filters&lt;/a&gt;. For valid filter names have a look at &lt;a href=&quot;#identifier-naming&quot;&gt;Notes on Identifiers&lt;/a&gt;.</source>
          <target state="translated">此环境的过滤器命令。只要未加载模板，添加新过滤器或删除旧过滤器都是安全的。有关自定义过滤器，请参见&amp;ldquo;&lt;a href=&quot;#writing-filters&quot;&gt;自定义过滤器&amp;rdquo;&lt;/a&gt;。有关有效过滤器名称的信息，请&lt;a href=&quot;#identifier-naming&quot;&gt;参阅&amp;ldquo;标识符说明&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e4831ad20e53ea4ad83ac74551cbd1384deffd15" translate="yes" xml:space="preserve">
          <source>A dict of global variables. These variables are always available in a template. As long as no template was loaded it&amp;rsquo;s safe to modify this dict. For more details see &lt;a href=&quot;#global-namespace&quot;&gt;The Global Namespace&lt;/a&gt;. For valid object names have a look at &lt;a href=&quot;#identifier-naming&quot;&gt;Notes on Identifiers&lt;/a&gt;.</source>
          <target state="translated">全局变量的字典。这些变量始终在模板中可用。只要未加载模板，就可以安全地修改此字典。有关更多详细信息，请参见&lt;a href=&quot;#global-namespace&quot;&gt;全局命名空间&lt;/a&gt;。有关有效对象名称的信息，请&lt;a href=&quot;#identifier-naming&quot;&gt;参阅&amp;ldquo;标识符说明&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="930ce7a0c6506611db7ddaadf7131dd948c6b8be" translate="yes" xml:space="preserve">
          <source>A dict of read only, global variables the template looks up. These can either come from another &lt;a href=&quot;#jinja2.runtime.Context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt;, from the &lt;code&gt;Environment.globals&lt;/code&gt; or &lt;code&gt;Template.globals&lt;/code&gt; or points to a dict created by combining the globals with the variables passed to the render function. It must not be altered.</source>
          <target state="translated">模板查找的只读全局变量的字典。这些既可以来自另一个&lt;a href=&quot;#jinja2.runtime.Context&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt;，也可以来自 &lt;code&gt;Environment.globals&lt;/code&gt; 或 &lt;code&gt;Template.globals&lt;/code&gt; ,也可以指向通过将全局变量与传递给渲染函数的变量组合而创建的字典。不得更改。</target>
        </trans-unit>
        <trans-unit id="bee4e20e5f4bda43addfe43afb1a9d615dfc3fc7" translate="yes" xml:space="preserve">
          <source>A dict of test functions for this environment. As long as no template was loaded it&amp;rsquo;s safe to modify this dict. For custom tests see &lt;a href=&quot;#writing-tests&quot;&gt;Custom Tests&lt;/a&gt;. For valid test names have a look at &lt;a href=&quot;#identifier-naming&quot;&gt;Notes on Identifiers&lt;/a&gt;.</source>
          <target state="translated">在此环境下测试功能的指示。只要未加载模板，就可以安全地修改此字典。有关自定义测试，请参见&amp;ldquo;&lt;a href=&quot;#writing-tests&quot;&gt;自定义测试&amp;rdquo;&lt;/a&gt;。有关有效测试名称的信息，请&lt;a href=&quot;#identifier-naming&quot;&gt;参阅&amp;ldquo;标识符说明&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a4b58f729a0f6d6083c08ae18501cc2eb743fdf7" translate="yes" xml:space="preserve">
          <source>A dict with the current mapping of blocks in the template. The keys in this dict are the names of the blocks, and the values a list of blocks registered. The last item in each list is the current active block (latest in the inheritance chain).</source>
          <target state="translated">一个包含当前模板中区块映射的dict。这个dict中的键是区块的名称,值是注册的区块列表。每个列表中的最后一项是当前活动的区块(继承链中最晚的)。</target>
        </trans-unit>
        <trans-unit id="a105c2e49cd48e82a03610d0708cb01a255d676b" translate="yes" xml:space="preserve">
          <source>A dictionary with &lt;a href=&quot;#policies&quot;&gt;Policies&lt;/a&gt;. These can be reconfigured to change the runtime behavior or certain template features. Usually these are security related.</source>
          <target state="translated">带有&lt;a href=&quot;#policies&quot;&gt;策略&lt;/a&gt;的词典。这些可以重新配置以更改运行时行为或某些模板功能。通常，这些都是与安全性相关的。</target>
        </trans-unit>
        <trans-unit id="9e0b6acc9708e7dc84a0d2d639f192c87c69e2ac" translate="yes" xml:space="preserve">
          <source>A filter that batches items. It works pretty much like &lt;code&gt;slice&lt;/code&gt; just the other way round. It returns a list of lists with the given number of items. If you provide a second parameter this is used to fill up missing items. See this example:</source>
          <target state="translated">批处理项目的过滤器。相反，它的工作原理与 &lt;code&gt;slice&lt;/code&gt; 差不多。它返回具有给定项目数量的列表列表。如果提供第二个参数，则该参数用于填充缺少的项目。请参阅以下示例：</target>
        </trans-unit>
        <trans-unit id="9d21fce0fd962298037630903d30a4ed9fc47f40" translate="yes" xml:space="preserve">
          <source>A generic runtime error in the template engine. Under some situations Jinja may raise this exception.</source>
          <target state="translated">模板引擎中的一个通用运行时错误。在某些情况下,Jinja可能会引发这个异常。</target>
        </trans-unit>
        <trans-unit id="0a4aaae57ffe830cac44907693d3a4eae0ef3101" translate="yes" xml:space="preserve">
          <source>A handy helper method that returns a callable that accepts keyword arguments that appear as variables in the expression. If called it returns the result of the expression.</source>
          <target state="translated">一个方便的助手方法,它返回一个可调用的方法,接受在表达式中作为变量出现的关键字参数。如果被调用,它将返回表达式的结果。</target>
        </trans-unit>
        <trans-unit id="960cdb940e9c6bf9c4ef18d0a622823947f4de48" translate="yes" xml:space="preserve">
          <source>A helper function to cycle between a list of sequences. See the explanation below.</source>
          <target state="translated">一个在序列列表之间循环的辅助函数。参见下面的解释。</target>
        </trans-unit>
        <trans-unit id="b3e68ddd2af36d4905ac1f4fa1aedafe88cf6ae3" translate="yes" xml:space="preserve">
          <source>A key, value pair for dicts.</source>
          <target state="translated">dicts的键值对。</target>
        </trans-unit>
        <trans-unit id="17206cc03587464d5b4ea35a3987ce224d4d2d51" translate="yes" xml:space="preserve">
          <source>A key, value pair for keyword arguments where key is a string.</source>
          <target state="translated">关键字参数的键、值对,其中键为字符串。</target>
        </trans-unit>
        <trans-unit id="93bbf1f576f8428b0516bfa993dd21fcd4969929" translate="yes" xml:space="preserve">
          <source>A loader that is passed a dict of loaders where each loader is bound to a prefix. The prefix is delimited from the template by a slash per default, which can be changed by setting the &lt;code&gt;delimiter&lt;/code&gt; argument to something else:</source>
          <target state="translated">传递给加载程序字典的加载程序，其中每个加载程序都绑定到一个前缀。默认情况下，前缀与模板之间以斜杠分隔，可以通过将 &lt;code&gt;delimiter&lt;/code&gt; 参数设置为其他参数来更改该前缀：</target>
        </trans-unit>
        <trans-unit id="b6a5261b1d1e6bf07ef3ea0533c7d90900803dce" translate="yes" xml:space="preserve">
          <source>A loader that is passed a function which does the loading. The function receives the name of the template and has to return either an unicode string with the template source, a tuple in the form &lt;code&gt;(source,
filename, uptodatefunc)&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; if the template does not exist.</source>
          <target state="translated">传递给加载器的函数执行加载。的函数接收模板的名称并具有返回任一种Unicode字符串与模板来源，形式的元组 &lt;code&gt;(source, filename, uptodatefunc)&lt;/code&gt; 或 &lt;code&gt;None&lt;/code&gt; 如果模板不存在。</target>
        </trans-unit>
        <trans-unit id="7f4fefcfb10660dfc90ed87f01b1cece598d7b63" translate="yes" xml:space="preserve">
          <source>A macro definition. &lt;code&gt;name&lt;/code&gt; is the name of the macro, &lt;code&gt;args&lt;/code&gt; a list of arguments and &lt;code&gt;defaults&lt;/code&gt; a list of defaults if there are any. &lt;code&gt;body&lt;/code&gt; is a list of nodes for the macro body.</source>
          <target state="translated">宏定义。 &lt;code&gt;name&lt;/code&gt; 是宏的名称， &lt;code&gt;args&lt;/code&gt; 一个参数列表，并且 &lt;code&gt;defaults&lt;/code&gt; 一个默认列表（如果有的话）。 &lt;code&gt;body&lt;/code&gt; 是宏主体的节点列表。</target>
        </trans-unit>
        <trans-unit id="3825b47819481fc9d2b3ff7ccc5e9b462469ac62" translate="yes" xml:space="preserve">
          <source>A more advanced version of a filesystem based bytecode cache is part of Jinja.</source>
          <target state="translated">一个更高级的基于文件系统的字节码缓存版本是Jinja的一部分。</target>
        </trans-unit>
        <trans-unit id="9e39c4b84d81f334936d3197719ab6ae19f12fb5" translate="yes" xml:space="preserve">
          <source>A node that holds multiple expressions which are then printed out. This is used both for the &lt;code&gt;print&lt;/code&gt; statement and the regular template data.</source>
          <target state="translated">包含多个表达式的节点，然后将其打印出来。这既用于 &lt;code&gt;print&lt;/code&gt; 语句，又用于常规模板数据。</target>
        </trans-unit>
        <trans-unit id="2311463913e80606ff5cf94f208ffbf14111b50a" translate="yes" xml:space="preserve">
          <source>A node that represents a block.</source>
          <target state="translated">一个节点,代表一个区块。</target>
        </trans-unit>
        <trans-unit id="6f2ed4dc734e55f6d3289d4e6005842e36936659" translate="yes" xml:space="preserve">
          <source>A node that represents the from import tag. It&amp;rsquo;s important to not pass unsafe names to the name attribute. The compiler translates the attribute lookups directly into getattr calls and does &lt;em&gt;not&lt;/em&gt; use the subscript callback of the interface. As exported variables may not start with double underscores (which the parser asserts) this is not a problem for regular Jinja code, but if this node is used in an extension extra care must be taken.</source>
          <target state="translated">表示from import标签的节点。请勿将不安全的名称传递给name属性，这一点很重要。编译器将属性查找直接转换为getattr调用，并且&lt;em&gt;不&lt;/em&gt;使用接口的下标回调。由于导出的变量可能不会以双下划线（解析器断言）开头，因此对于常规Jinja代码而言这不是问题，但是如果在扩展中使用此节点，则必须格外小心。</target>
        </trans-unit>
        <trans-unit id="04c17ae30c1ed1e8b662fe321bd72797460d5e39" translate="yes" xml:space="preserve">
          <source>A node that represents the import tag.</source>
          <target state="translated">代表导入标签的节点。</target>
        </trans-unit>
        <trans-unit id="3a68cb02b8fad9a6232897fb3be862c2bb91e8e4" translate="yes" xml:space="preserve">
          <source>A node that represents the include tag.</source>
          <target state="translated">一个代表include标签的节点。</target>
        </trans-unit>
        <trans-unit id="9572913bdfaa13c668e3d007a417e263586ce121" translate="yes" xml:space="preserve">
          <source>A statement that evaluates an expression and discards the result.</source>
          <target state="translated">对一个表达式进行评估并放弃结果的语句。</target>
        </trans-unit>
        <trans-unit id="fe8dc854c51504101bcda4da866fb85ab89df804" translate="yes" xml:space="preserve">
          <source>A string that defines the items for the &lt;code&gt;rel&lt;/code&gt; attribute of generated links with the &lt;code&gt;urlize&lt;/code&gt; filter. These items are always added. The default is &lt;code&gt;noopener&lt;/code&gt;.</source>
          <target state="translated">一个字符串，用于使用 &lt;code&gt;urlize&lt;/code&gt; 过滤器定义所生成链接的 &lt;code&gt;rel&lt;/code&gt; 属性的项目。这些项目总是被添加。默认值为 &lt;code&gt;noopener&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4e6cbef69121802ea63d9627dc73ebafe3137d2a" translate="yes" xml:space="preserve">
          <source>A string that is ready to be safely inserted into an HTML or XML document, either because it was escaped or because it was marked safe.</source>
          <target state="translated">一个准备好安全插入HTML或XML文档的字符串,因为它被转义或因为它被标记为安全。</target>
        </trans-unit>
        <trans-unit id="8974797b2ee8ffa4a1e50f431e43826afa56ff95" translate="yes" xml:space="preserve">
          <source>A template contains &lt;strong&gt;variables&lt;/strong&gt; and/or &lt;strong&gt;expressions&lt;/strong&gt;, which get replaced with values when a template is &lt;em&gt;rendered&lt;/em&gt;; and &lt;strong&gt;tags&lt;/strong&gt;, which control the logic of the template. The template syntax is heavily inspired by Django and Python.</source>
          <target state="translated">模板包含&lt;strong&gt;变量&lt;/strong&gt;和/或&lt;strong&gt;表达式&lt;/strong&gt;，在&lt;em&gt;渲染&lt;/em&gt;模板时将其替换为值；和&lt;strong&gt;标签&lt;/strong&gt;，它们控制模板的逻辑。模板语法在很大程度上受到Django和Python的启发。</target>
        </trans-unit>
        <trans-unit id="3e0d66291aba4f4a4f2e219bd44d3757ff96c1ce" translate="yes" xml:space="preserve">
          <source>A template designer can then use the test like this:</source>
          <target state="translated">模板设计师就可以使用这样的测试。</target>
        </trans-unit>
        <trans-unit id="df9dddad11e8c82f23eb9a7103e426e595316c97" translate="yes" xml:space="preserve">
          <source>A template stream works pretty much like an ordinary python generator but it can buffer multiple items to reduce the number of total iterations. Per default the output is unbuffered which means that for every unbuffered instruction in the template one unicode string is yielded.</source>
          <target state="translated">模板流的工作原理和普通的python生成器差不多,但它可以缓冲多个项目以减少总的迭代次数。默认情况下,输出是无缓冲的,这意味着模板中每一条无缓冲的指令会产生一个unicode字符串。</target>
        </trans-unit>
        <trans-unit id="b8436d363e39d00ac5595621a3ae2a03bee99baf" translate="yes" xml:space="preserve">
          <source>A tiny helper that can be used to &amp;ldquo;join&amp;rdquo; multiple sections. A joiner is passed a string and will return that string every time it&amp;rsquo;s called, except the first time (in which case it returns an empty string). You can use this to join things:</source>
          <target state="translated">可以用来&amp;ldquo;连接&amp;rdquo;多个部分的小帮手。一个连接器传递了一个字符串，并且每次调用时都会返回该字符串，除了第一次（在这种情况下，它将返回一个空字符串）。您可以使用它来连接事物：</target>
        </trans-unit>
        <trans-unit id="f2a78f96a112605cf0881aa0c490ce199b6196c3" translate="yes" xml:space="preserve">
          <source>A token stream is an iterable that yields &lt;a href=&quot;#jinja2.lexer.Token&quot;&gt;&lt;code&gt;Token&lt;/code&gt;&lt;/a&gt;s. The parser however does not iterate over it but calls &lt;code&gt;next()&lt;/code&gt; to go one token ahead. The current active token is stored as &lt;a href=&quot;#jinja2.lexer.TokenStream.current&quot;&gt;&lt;code&gt;current&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">令牌流是可迭代的，可产生&lt;a href=&quot;#jinja2.lexer.Token&quot;&gt; &lt;code&gt;Token&lt;/code&gt; &lt;/a&gt;。但是，解析器不会对其进行迭代，而是调用 &lt;code&gt;next()&lt;/code&gt; 向前移动一个令牌。当前活动令牌存储为&lt;a href=&quot;#jinja2.lexer.TokenStream.current&quot;&gt; &lt;code&gt;current&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cd036b5ebeab25906865a14b723c0bd5a9c22f94" translate="yes" xml:space="preserve">
          <source>A tuple of default values.</source>
          <target state="translated">一个默认值的元组。</target>
        </trans-unit>
        <trans-unit id="42a86d91850fef266834165add33d935b5cdf85f" translate="yes" xml:space="preserve">
          <source>A tuple of the names of arguments the macro accepts.</source>
          <target state="translated">宏接受的参数名称的元组。</target>
        </trans-unit>
        <trans-unit id="755b7437c0fb8bbb31ec83a1d1e4d073e0cf72a5" translate="yes" xml:space="preserve">
          <source>A very basic bytecode cache that saves the bytecode on the file system:</source>
          <target state="translated">一个非常基本的字节码缓存,将字节码保存在文件系统中。</target>
        </trans-unit>
        <trans-unit id="e457c669b6ed4cd0ef85b903c7bbdb27f3b5f328" translate="yes" xml:space="preserve">
          <source>A very basic example for a loader that looks up templates on the file system could look like this:</source>
          <target state="translated">一个在文件系统中查找模板的加载器的基本例子可以是这样的。</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="438963a0a200e93292e3673a95794ef95d429801" translate="yes" xml:space="preserve">
          <source>AST</source>
          <target state="translated">AST</target>
        </trans-unit>
        <trans-unit id="10d1c8eb8d37f32e31e74e81050a93ce65ff7d94" translate="yes" xml:space="preserve">
          <source>Accessing the parent Loop</source>
          <target state="translated">访问父环路</target>
        </trans-unit>
        <trans-unit id="856828f9a6580175770c3e9e6147600b26b43e7f" translate="yes" xml:space="preserve">
          <source>Add the items to the instance of the environment if they do not exist yet. This is used by &lt;a href=&quot;../extensions/index#writing-extensions&quot;&gt;extensions&lt;/a&gt; to register callbacks and configuration values without breaking inheritance.</source>
          <target state="translated">如果项目尚不存在，请将其添加到环境实例中。&lt;a href=&quot;../extensions/index#writing-extensions&quot;&gt;扩展&lt;/a&gt;使用它来注册回调和配置值，而不会破坏继承。</target>
        </trans-unit>
        <trans-unit id="8d6764802e5afd244e6e52fd31f06d0f0cc7b3f6" translate="yes" xml:space="preserve">
          <source>Add the left to the right node.</source>
          <target state="translated">将左边的节点添加到右边的节点。</target>
        </trans-unit>
        <trans-unit id="42a65e84255209cd01fc47699952cf0204909ea8" translate="yes" xml:space="preserve">
          <source>Adding Extensions</source>
          <target state="translated">添加扩展名</target>
        </trans-unit>
        <trans-unit id="6720590dbcd34ac99db1d7e4df73556c4c1bff9f" translate="yes" xml:space="preserve">
          <source>Adding two values results in an integer, not a string with a number:</source>
          <target state="translated">将两个值相加的结果是一个整数,而不是一个带有数字的字符串。</target>
        </trans-unit>
        <trans-unit id="f8b89de58ac2cebf43e2be74ff3d9cc0f884f2b5" translate="yes" xml:space="preserve">
          <source>Adds a &lt;code&gt;{% debug %}&lt;/code&gt; tag to dump the current context as well as the available filters and tests. This is useful to see what&amp;rsquo;s available to use in the template without setting up a debugger.</source>
          <target state="translated">添加 &lt;code&gt;{% debug %}&lt;/code&gt; 标签以转储当前上下文以及可用的过滤器和测试。这对于查看无需设置调试器即可在模板中使用的内容很有用。</target>
        </trans-unit>
        <trans-unit id="a9345d2b8f0be83b3128361e8b387e818554cdf8" translate="yes" xml:space="preserve">
          <source>Adds an extension after the environment was created.</source>
          <target state="translated">在创建环境后添加一个扩展。</target>
        </trans-unit>
        <trans-unit id="b9a5588013d19e18514b965e283c9453841ac895" translate="yes" xml:space="preserve">
          <source>Adds two objects together. Usually the objects are numbers, but if both are strings or lists, you can concatenate them this way. This, however, is not the preferred way to concatenate strings! For string concatenation, have a look-see at the &lt;code&gt;~&lt;/code&gt; operator. &lt;code&gt;{{ 1 + 1 }}&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">将两个对象加在一起。通常，对象是数字，但是如果两者都是字符串或列表，则可以通过这种方式将它们连接起来。但是，这不是连接字符串的首选方式！对于字符串连接，请看一下 &lt;code&gt;~&lt;/code&gt; 运算符。 &lt;code&gt;{{ 1 + 1 }}&lt;/code&gt; 是 &lt;code&gt;2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a899b722751d67b0e6297a3b724ef4eaa29ec29" translate="yes" xml:space="preserve">
          <source>After an &lt;code&gt;endautoescape&lt;/code&gt; the behavior is reverted to what it was before.</source>
          <target state="translated">结束自动 &lt;code&gt;endautoescape&lt;/code&gt; ，行为将还原为以前的行为。</target>
        </trans-unit>
        <trans-unit id="920825b66f97c8e35d0017bd1699754d67315459" translate="yes" xml:space="preserve">
          <source>After enabling the extension, the environment provides the following additional methods:</source>
          <target state="translated">启用扩展后,环境提供了以下附加方法:</target>
        </trans-unit>
        <trans-unit id="85756c1fdebbceb66a3b788d1143db7933a1f394" translate="yes" xml:space="preserve">
          <source>After enabling, an application has to provide &lt;code&gt;gettext&lt;/code&gt; and &lt;code&gt;ngettext&lt;/code&gt; functions, either globally or when rendering. A &lt;code&gt;_()&lt;/code&gt; function is added as an alias to the &lt;code&gt;gettext&lt;/code&gt; function.</source>
          <target state="translated">启用后，应用程序必须全局或在渲染时提供 &lt;code&gt;gettext&lt;/code&gt; 和 &lt;code&gt;ngettext&lt;/code&gt; 函数。甲 &lt;code&gt;_()&lt;/code&gt; 功能被添加作为别名到 &lt;code&gt;gettext&lt;/code&gt; 的功能。</target>
        </trans-unit>
        <trans-unit id="6a8b49f23c0c2e66b347773e3a4bb453ff1fb91c" translate="yes" xml:space="preserve">
          <source>Aliases</source>
          <target state="translated">Aliases</target>
        </trans-unit>
        <trans-unit id="72d60412c6e8ceb6f0dd0e0665935e7a87f6f9d5" translate="yes" xml:space="preserve">
          <source>All constant values. The parser will return this node for simple constants such as &lt;code&gt;42&lt;/code&gt; or &lt;code&gt;&quot;foo&quot;&lt;/code&gt; but it can be used to store more complex values such as lists too. Only constants with a safe representation (objects where &lt;code&gt;eval(repr(x)) == x&lt;/code&gt; is true).</source>
          <target state="translated">所有常数值。解析器将为简单常量（例如 &lt;code&gt;42&lt;/code&gt; 或 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; 返回此节点，但是它也可以用于存储更复杂的值（例如列表）。仅具有安全表示形式的常量（ &lt;code&gt;eval(repr(x)) == x&lt;/code&gt; 为true的对象）。</target>
        </trans-unit>
        <trans-unit id="439f170d9c8077036f762f56928512a865d7b273" translate="yes" xml:space="preserve">
          <source>All nodes have fields and attributes. Fields may be other nodes, lists, or arbitrary values. Fields are passed to the constructor as regular positional arguments, attributes as keyword arguments. Each node has two attributes: &lt;code&gt;lineno&lt;/code&gt; (the line number of the node) and &lt;code&gt;environment&lt;/code&gt;. The &lt;code&gt;environment&lt;/code&gt; attribute is set at the end of the parsing process for all nodes automatically.</source>
          <target state="translated">所有节点都有字段和属性。字段可以是其他节点，列表或任意值。字段作为常规位置参数传递给构造函数，属性作为关键字参数传递给构造函数。每个节点都有两个属性： &lt;code&gt;lineno&lt;/code&gt; （节点的行号）和 &lt;code&gt;environment&lt;/code&gt; 。的 &lt;code&gt;environment&lt;/code&gt; 属性被设定为用于自动地所有节点解析过程的结束。</target>
        </trans-unit>
        <trans-unit id="cefb85d6ec59266383872d68be9a3b976cfc0843" translate="yes" xml:space="preserve">
          <source>Also keep in mind that templates may raise runtime or compile time errors, so make sure to catch them.</source>
          <target state="translated">同时要记住,模板可能会引起运行时或编译时的错误,所以一定要抓住它们。</target>
        </trans-unit>
        <trans-unit id="2c03f6e372a0647f85d6ddd6d0cdc3f5094f9445" translate="yes" xml:space="preserve">
          <source>Also the sandbox is only as good as the configuration. We strongly recommend only passing non-shared resources to the template and use some sort of whitelisting for attributes.</source>
          <target state="translated">另外沙盒只有配置好了,才会有好的效果。我们强烈建议只向模板传递非共享资源,并对属性使用某种白名单。</target>
        </trans-unit>
        <trans-unit id="53e626b84e33888466958d85ee2cbe54a605542b" translate="yes" xml:space="preserve">
          <source>Alternating Rows</source>
          <target state="translated">交替行</target>
        </trans-unit>
        <trans-unit id="3d964f53f1e5613e0ac6d9164845362d2ffdc31d" translate="yes" xml:space="preserve">
          <source>Alternatively you can let it invoke a filter by passing the name of the filter and the arguments afterwards. A good example would be applying a text conversion filter on a sequence:</source>
          <target state="translated">或者你可以通过传递过滤器的名称和后面的参数让它调用一个过滤器。一个很好的例子是在一个序列上应用一个文本转换过滤器。</target>
        </trans-unit>
        <trans-unit id="6854f926c0bfcd57db756b5fe8ace6f017fc03ae" translate="yes" xml:space="preserve">
          <source>Alternatively, you can import specific names from a template into the current namespace:</source>
          <target state="translated">另外,您也可以从模板中导入特定的名称到当前的命名空间中。</target>
        </trans-unit>
        <trans-unit id="d510262abbd02579f27cc82352155476ae2f25d6" translate="yes" xml:space="preserve">
          <source>Although you should prefer the &lt;code&gt;.format&lt;/code&gt; method for that case (which is a bit contrived in the context of rendering a template):</source>
          <target state="translated">尽管在这种情况下，您应该首选 &lt;code&gt;.format&lt;/code&gt; 方法（在呈现模板的上下文中有些虚构）：</target>
        </trans-unit>
        <trans-unit id="c054d311d0a9992a113ce5ba587772d48ad0f2f8" translate="yes" xml:space="preserve">
          <source>Always use keyword arguments to &lt;code&gt;format&lt;/code&gt;, as other languages may not use the words in the same order.</source>
          <target state="translated">始终使用关键字参数来 &lt;code&gt;format&lt;/code&gt; ，因为其他语言可能不会以相同的顺序使用这些单词。</target>
        </trans-unit>
        <trans-unit id="104905d4515439359fc3ab70aa97b43a1250d2d3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/index#jinja2.nodes.EvalContext&quot;&gt;&lt;code&gt;EvalContext&lt;/code&gt;&lt;/a&gt; can be provided, if none is given a default context is created which requires the nodes to have an attached environment.</source>
          <target state="translated">如果&lt;a href=&quot;../api/index#jinja2.nodes.EvalContext&quot;&gt; &lt;code&gt;EvalContext&lt;/code&gt; &lt;/a&gt;提供EvalContext，则可以提供EvalContext，这将创建一个默认上下文，该上下文要求节点具有附加的环境。</target>
        </trans-unit>
        <trans-unit id="698f97ecddb1fd8b928f6644e57ee5d0f8d75bc5" translate="yes" xml:space="preserve">
          <source>An artificial scope.</source>
          <target state="translated">一个人工的范围。</target>
        </trans-unit>
        <trans-unit id="dd287bf6935d5a379cc4e8ffa82ce18dee99631b" translate="yes" xml:space="preserve">
          <source>An async version of &lt;a href=&quot;#jinja2.Template.generate&quot;&gt;&lt;code&gt;generate()&lt;/code&gt;&lt;/a&gt;. Works very similarly but returns an async iterator instead.</source>
          <target state="translated">异步版本的&lt;a href=&quot;#jinja2.Template.generate&quot;&gt; &lt;code&gt;generate()&lt;/code&gt; &lt;/a&gt;。工作原理非常相似，但是返回一个异步迭代器。</target>
        </trans-unit>
        <trans-unit id="06103227798af0913a31bdbe0b263ecebcc93890" translate="yes" xml:space="preserve">
          <source>An environment that renders templates to native Python types.</source>
          <target state="translated">一个将模板渲染成本地Python类型的环境。</target>
        </trans-unit>
        <trans-unit id="2cf092d841f2011857f35dc2880b85daef6c8257" translate="yes" xml:space="preserve">
          <source>An important note on scoping here. In Jinja versions before 2.9 the behavior of referencing one variable to another had some unintended consequences. In particular one variable could refer to another defined in the same with block&amp;rsquo;s opening statement. This caused issues with the cleaned up scoping behavior and has since been improved. In particular in newer Jinja versions the following code always refers to the variable &lt;code&gt;a&lt;/code&gt; from outside the &lt;code&gt;with&lt;/code&gt; block:</source>
          <target state="translated">关于作用域的重要说明。在2.9之前的Jinja版本中，将一个变量引用到另一个变量的行为会产生一些意想不到的后果。特别是，一个变量可以引用与block的open语句相同的另一个变量。这导致清理范围界定问题，并且此后已得到改善。特别是在较新的Jinja版本中，以下代码始终从 &lt;code&gt;with&lt;/code&gt; 块外部引用变量 &lt;code&gt;a&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b9095b58285d49706ac6dae23a8e8da04b94ec34" translate="yes" xml:space="preserve">
          <source>An internal name in the compiler. You cannot create these nodes yourself but the parser provides a &lt;a href=&quot;#jinja2.parser.Parser.free_identifier&quot;&gt;&lt;code&gt;free_identifier()&lt;/code&gt;&lt;/a&gt; method that creates a new identifier for you. This identifier is not available from the template and is not threated specially by the compiler.</source>
          <target state="translated">编译器中的内部名称。您&lt;a href=&quot;#jinja2.parser.Parser.free_identifier&quot;&gt; &lt;code&gt;free_identifier()&lt;/code&gt; &lt;/a&gt;创建这些节点，但是解析器提供了一个free_identifier（）方法，该方法可以为您创建一个新的标识符。该标识符在模板中不可用，并且不受编译器的特别威胁。</target>
        </trans-unit>
        <trans-unit id="413082684afecae8504236d24e90300968e59401" translate="yes" xml:space="preserve">
          <source>An overlay scope for extensions. This is a largely unoptimized scope that however can be used to introduce completely arbitrary variables into a sub scope from a dictionary or dictionary like object. The &lt;code&gt;context&lt;/code&gt; field has to evaluate to a dictionary object.</source>
          <target state="translated">扩展的覆盖范围。这是一个很大程度上未优化的范围，但是可用于将完全任意的变量从字典或类似字典的对象引入子范围。该 &lt;code&gt;context&lt;/code&gt; 场必须评估Dictionary对象。</target>
        </trans-unit>
        <trans-unit id="3732ba52ac16393276a794d52cf9bfade4aae8a6" translate="yes" xml:space="preserve">
          <source>An undefined that barks on print and iteration as well as boolean tests and all kinds of comparisons. In other words: you can do nothing with it except checking if it&amp;rsquo;s defined using the &lt;code&gt;defined&lt;/code&gt; test.</source>
          <target state="translated">一个不确定的元素，会在打印和迭代以及布尔测试和各种比较中发出吠声。换句话说：除了检查它是否已使用已 &lt;code&gt;defined&lt;/code&gt; 测试进行定义之外，您无法对其进行任何操作。</target>
        </trans-unit>
        <trans-unit id="4a515cce2cf63073c9b100ab8d921588e9c51fa9" translate="yes" xml:space="preserve">
          <source>An undefined that is chainable, where both &lt;code&gt;__getattr__&lt;/code&gt; and &lt;code&gt;__getitem__&lt;/code&gt; return itself rather than raising an &lt;a href=&quot;#jinja2.UndefinedError&quot;&gt;&lt;code&gt;UndefinedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一个可链接的undefined，其中 &lt;code&gt;__getattr__&lt;/code&gt; 和 &lt;code&gt;__getitem__&lt;/code&gt; 都返回自身而不是引发&lt;a href=&quot;#jinja2.UndefinedError&quot;&gt; &lt;code&gt;UndefinedError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a794cda166e81866027a303f2add4e9bd505dd48" translate="yes" xml:space="preserve">
          <source>An undefined that returns the debug info when printed.</source>
          <target state="translated">打印时返回调试信息的未定义。</target>
        </trans-unit>
        <trans-unit id="f435fc34da85888508657682b299840137109b09" translate="yes" xml:space="preserve">
          <source>And here is how you use it in an environment:</source>
          <target state="translated">下面是你如何在环境中使用它。</target>
        </trans-unit>
        <trans-unit id="54cd3a1ad6b73989aa1b47a1306dd58a184a2103" translate="yes" xml:space="preserve">
          <source>Another good heuristic for identifying templates is that they are in a &lt;code&gt;templates&lt;/code&gt; folder, regardless of extension. This is a common layout for projects.</source>
          <target state="translated">识别模板的另一个很好的启发方法是，无论扩展名如何，它们都位于 &lt;code&gt;templates&lt;/code&gt; 文件夹中。这是项目的通用布局。</target>
        </trans-unit>
        <trans-unit id="ce8e6a492261b0b7b57e16e5bc3a7488a69a2fef" translate="yes" xml:space="preserve">
          <source>Another important thing is how Jinja is handling string literals in templates. A naive implementation would be using Unicode strings for all string literals but it turned out in the past that this is problematic as some libraries are typechecking against &lt;code&gt;str&lt;/code&gt; explicitly. For example &lt;code&gt;datetime.strftime&lt;/code&gt; does not accept Unicode arguments. To not break it completely Jinja is returning &lt;code&gt;str&lt;/code&gt; for strings that fit into ASCII and for everything else &lt;code&gt;unicode&lt;/code&gt;:</source>
          <target state="translated">另一个重要的事情是Jinja如何处理模板中的字符串文字。一个幼稚的实现将对所有字符串文字使用Unicode字符串，但是在过去发现这是有问题的，因为某些库正在显式地对 &lt;code&gt;str&lt;/code&gt; 进行类型检查。例如， &lt;code&gt;datetime.strftime&lt;/code&gt; 不接受Unicode参数。为了不完全破坏它，Jinja将为适合ASCII的字符串以及所有其他 &lt;code&gt;unicode&lt;/code&gt; 返回 &lt;code&gt;str&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2f8e776f3941ef86e97cf4c39811d64912eeca32" translate="yes" xml:space="preserve">
          <source>Any dict literal such as &lt;code&gt;{1: 2, 3: 4}&lt;/code&gt;. The items must be a list of &lt;a href=&quot;#jinja2.nodes.Pair&quot;&gt;&lt;code&gt;Pair&lt;/code&gt;&lt;/a&gt; nodes.</source>
          <target state="translated">任何dict文字，例如 &lt;code&gt;{1: 2, 3: 4}&lt;/code&gt; 。这些项目必须是&amp;ldquo;&lt;a href=&quot;#jinja2.nodes.Pair&quot;&gt; &lt;code&gt;Pair&lt;/code&gt; &lt;/a&gt;节点的列表。</target>
        </trans-unit>
        <trans-unit id="f056c974d76dcc70997fea797821c79033c2a666" translate="yes" xml:space="preserve">
          <source>Any list literal such as &lt;code&gt;[1, 2, 3]&lt;/code&gt;</source>
          <target state="translated">任何列表文字，例如 &lt;code&gt;[1, 2, 3]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1623ef9ceab9ade7a9879e33ee9637dc22787117" translate="yes" xml:space="preserve">
          <source>Applies a &lt;a href=&quot;#filters&quot;&gt;filter&lt;/a&gt;.</source>
          <target state="translated">应用&lt;a href=&quot;#filters&quot;&gt;过滤器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="92826860d5c31b7e2b7fb1efe4306fe8407c51d8" translate="yes" xml:space="preserve">
          <source>Applies a filter on a sequence of objects or looks up an attribute. This is useful when dealing with lists of objects but you are really only interested in a certain value of it.</source>
          <target state="translated">在对象序列上应用一个过滤器或查找一个属性。这在处理对象列表时很有用,但你实际上只对它的某个值感兴趣。</target>
        </trans-unit>
        <trans-unit id="ca54cdb263f77ffb911265abeb739b2191366991" translate="yes" xml:space="preserve">
          <source>Applies a test on an expression. &lt;code&gt;name&lt;/code&gt; is the name of the test, the rest of the fields are the same as for &lt;a href=&quot;#jinja2.nodes.Call&quot;&gt;&lt;code&gt;Call&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">将测试应用于表达式。 &lt;code&gt;name&lt;/code&gt; 是测试的名称，其余字段与&lt;a href=&quot;#jinja2.nodes.Call&quot;&gt; &lt;code&gt;Call&lt;/code&gt; &lt;/a&gt;相同。</target>
        </trans-unit>
        <trans-unit id="fdf0ce4dca1367c1051c1644d59d2d2a5fb950b4" translate="yes" xml:space="preserve">
          <source>Apply the given values to a &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#printf-style-string-formatting&quot;&gt;printf-style&lt;/a&gt; format string, like &lt;code&gt;string % values&lt;/code&gt;.</source>
          <target state="translated">将给定的值应用于&lt;a href=&quot;https://docs.python.org/library/stdtypes.html#printf-style-string-formatting&quot;&gt;printf样式的&lt;/a&gt;格式字符串，例如 &lt;code&gt;string % values&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="62d36beaa2eeed0958a51b87e4412f0439025297" translate="yes" xml:space="preserve">
          <source>Are we at the end of the stream?</source>
          <target state="translated">我们是否已经到了水流的尽头?</target>
        </trans-unit>
        <trans-unit id="3de7707578057c22a9ba938d0018fd538618a82f" translate="yes" xml:space="preserve">
          <source>As a shortcut to chaining when the direction is the same for all attributes, pass a comma separate list of attributes.</source>
          <target state="translated">当所有属性的方向相同时,作为链式的快捷方式,传递一个逗号分开的属性列表。</target>
        </trans-unit>
        <trans-unit id="e6f838b85c8e0b71b7509796a6b06a8dd51e32f5" translate="yes" xml:space="preserve">
          <source>As an alternative to steps 4 you can also do &lt;code&gt;python setup.py develop&lt;/code&gt; which will install the package via &lt;code&gt;distribute&lt;/code&gt; in development mode. This also has the advantage that the C extensions are compiled.</source>
          <target state="translated">作为第4步的替代方法，您还可以执行 &lt;code&gt;python setup.py develop&lt;/code&gt; ，它将在开发模式下通过 &lt;code&gt;distribute&lt;/code&gt; 安装软件包。这也具有编译C扩展名的优点。</target>
        </trans-unit>
        <trans-unit id="9e38422988d66e71feeb984cc3517af2c2bc0679" translate="yes" xml:space="preserve">
          <source>As extensions are created by the environment they cannot accept any arguments for configuration. One may want to work around that by using a factory function, but that is not possible as extensions are identified by their import name. The correct way to configure the extension is storing the configuration values on the environment. Because this way the environment ends up acting as central configuration storage the attributes may clash which is why extensions have to ensure that the names they choose for configuration are not too generic. &lt;code&gt;prefix&lt;/code&gt; for example is a terrible name, &lt;code&gt;fragment_cache_prefix&lt;/code&gt; on the other hand is a good name as includes the name of the extension (fragment cache).</source>
          <target state="translated">由于扩展是由环境创建的，因此它们不能接受任何配置参数。可能需要使用工厂功能来解决此问题，但这是不可能的，因为扩展名是通过其导入名称来标识的。正确配置扩展名的方法是将配置值存储在环境中。由于这种方法最终使环境充当中央配置存储，因此属性可能会发生冲突，这就是扩展名必须确保为其选择的配置名称不太通用的原因。例如， &lt;code&gt;prefix&lt;/code&gt; 是一个糟糕的名字，另一方面， &lt;code&gt;fragment_cache_prefix&lt;/code&gt; 是一个好名字，包括扩展名（片段缓存）。</target>
        </trans-unit>
        <trans-unit id="159588c177bd31d3856a6e5f4087853d207cb631" translate="yes" xml:space="preserve">
          <source>As of version 2.10 more complex use cases can be handled using namespace objects which allow propagating of changes across scopes:</source>
          <target state="translated">从2.10版本开始,可以使用命名空间对象来处理更复杂的用例,允许跨作用域传播变化。</target>
        </trans-unit>
        <trans-unit id="b88981e70c5c4574499a5bb36b6ad665c2ed0dcc" translate="yes" xml:space="preserve">
          <source>As of version 2.7 Jinja depends on the &lt;a href=&quot;https://markupsafe.palletsprojects.com/&quot;&gt;MarkupSafe&lt;/a&gt; module. If you install Jinja via &lt;code&gt;pip&lt;/code&gt; it will be installed automatically for you.</source>
          <target state="translated">从2.7版开始，Jinja依赖于&lt;a href=&quot;https://markupsafe.palletsprojects.com/&quot;&gt;MarkupSafe&lt;/a&gt;模块。如果您通过 &lt;code&gt;pip&lt;/code&gt; 安装Jinja ，它将自动为您安装。</target>
        </trans-unit>
        <trans-unit id="ff04ba89bca36e259da6b77ccd9724075ecc20aa" translate="yes" xml:space="preserve">
          <source>As stated above, any file can be loaded as a template, regardless of file extension. Adding a &lt;code&gt;.jinja&lt;/code&gt; extension, like &lt;code&gt;user.html.jinja&lt;/code&gt; may make it easier for some IDEs or editor plugins, but is not required. Autoescaping, introduced later, can be applied based on file extension, so you&amp;rsquo;ll need to take the extra suffix into account in that case.</source>
          <target state="translated">如上所述，无论文件扩展名如何，任何文件都可以作为模板加载。添加 &lt;code&gt;.jinja&lt;/code&gt; 延伸，像 &lt;code&gt;user.html.jinja&lt;/code&gt; 可能更容易一些的IDE或编辑器插件，但不是必需的。可以在文件扩展名的基础上应用稍后介绍的自动转义，因此在这种情况下，您需要考虑额外的后缀。</target>
        </trans-unit>
        <trans-unit id="1ab971904b4bd63102939388467a91d8f5f1e479" translate="yes" xml:space="preserve">
          <source>As variables in templates retain their object properties, it is possible to iterate over containers like &lt;code&gt;dict&lt;/code&gt;:</source>
          <target state="translated">由于模板中的变量保留了其对象属性，因此可以遍历像 &lt;code&gt;dict&lt;/code&gt; 这样的容器：</target>
        </trans-unit>
        <trans-unit id="99a838a822d812a1dfe2285b2d3d09cab953c588" translate="yes" xml:space="preserve">
          <source>As you can see it automatically prepends a space in front of the item if the filter returned something unless the second parameter is false.</source>
          <target state="translated">正如你所看到的,如果过滤器返回了一些东西,除非第二个参数是false,否则它就会自动在项目前面加上一个空格。</target>
        </trans-unit>
        <trans-unit id="057d58c74d80136578cabbeee1b89206c3250bd4" translate="yes" xml:space="preserve">
          <source>Assignments</source>
          <target state="translated">Assignments</target>
        </trans-unit>
        <trans-unit id="c710cdcf52ba6f6f820a72816ca9ea8cc8f23ac9" translate="yes" xml:space="preserve">
          <source>Assignments use the &lt;code&gt;set&lt;/code&gt; tag and can have multiple targets:</source>
          <target state="translated">分配使用 &lt;code&gt;set&lt;/code&gt; 标记，并且可以有多个目标：</target>
        </trans-unit>
        <trans-unit id="457c2e7a9e22abbac17a6b266443ad75438fd265" translate="yes" xml:space="preserve">
          <source>Assigns a block to a target.</source>
          <target state="translated">将一个块分配给一个目标。</target>
        </trans-unit>
        <trans-unit id="c95c6ecfc14902b1d120d655ae0c06652573358c" translate="yes" xml:space="preserve">
          <source>Assigns an expression to a target.</source>
          <target state="translated">将一个表达式指定给一个目标。</target>
        </trans-unit>
        <trans-unit id="d7aded35723250d051a02fa65ee95b1f12e8b3e8" translate="yes" xml:space="preserve">
          <source>Assuming &lt;code&gt;env&lt;/code&gt; is a &lt;code&gt;SandboxedEnvironment&lt;/code&gt; in the default configuration the following piece of code shows how it works:</source>
          <target state="translated">假设在默认配置中 &lt;code&gt;env&lt;/code&gt; 是一个 &lt;code&gt;SandboxedEnvironment&lt;/code&gt; ，则以下代码显示其工作方式：</target>
        </trans-unit>
        <trans-unit id="baead188ae053930fb512c469516d88d1618f3cf" translate="yes" xml:space="preserve">
          <source>Async Support</source>
          <target state="translated">异步支持</target>
        </trans-unit>
        <trans-unit id="ad748b9af221b55902cbe5a7e38dc459a068b08e" translate="yes" xml:space="preserve">
          <source>Autoescape Extension</source>
          <target state="translated">自动换行扩展</target>
        </trans-unit>
        <trans-unit id="18de1d070adcdd267df7d53b0d53ef513c18c8cf" translate="yes" xml:space="preserve">
          <source>Autoescape Overrides</source>
          <target state="translated">自动回避覆盖</target>
        </trans-unit>
        <trans-unit id="7dec128dd1c1d676d1d6523f8fe91ab805d24681" translate="yes" xml:space="preserve">
          <source>Autoescaping</source>
          <target state="translated">Autoescaping</target>
        </trans-unit>
        <trans-unit id="e23a41b7e0664e62ff88ff531b67206d021bcdc7" translate="yes" xml:space="preserve">
          <source>Awaitable objects can be returned from functions in templates and any function call in a template will automatically await the result. The &lt;code&gt;await&lt;/code&gt; you would normally add in Python is implied. For example, you can provide a method that asynchronously loads data from a database, and from the template designer&amp;rsquo;s point of view it can be called like any other function.</source>
          <target state="translated">可以从模板中的函数返回可等待的对象，并且模板中的任何函数调用都将自动等待结果。暗示您通常会在Python中添加的 &lt;code&gt;await&lt;/code&gt; 。例如，您可以提供一种从数据库异步加载数据的方法，从模板设计者的角度来看，可以像调用任何其他函数一样调用该方法。</target>
        </trans-unit>
        <trans-unit id="0cfbd7426a01577f048cb45c7edfcaaaec78d190" translate="yes" xml:space="preserve">
          <source>Babel Integration</source>
          <target state="translated">巴别整合</target>
        </trans-unit>
        <trans-unit id="635dad9cdab682202ef019467eedc43b2db6b953" translate="yes" xml:space="preserve">
          <source>Base Template</source>
          <target state="translated">基础模板</target>
        </trans-unit>
        <trans-unit id="2251f9ed0fe4a93cf01629fb051e9ef9706fb8bf" translate="yes" xml:space="preserve">
          <source>Base node for all statements.</source>
          <target state="translated">所有报表的基础节点。</target>
        </trans-unit>
        <trans-unit id="cd8358bba3bbd7fa77202c77cc0fde5090cf9e4f" translate="yes" xml:space="preserve">
          <source>Baseclass for all Jinja nodes. There are a number of nodes available of different types. There are four major types:</source>
          <target state="translated">所有Jinja节点的基类。有许多不同类型的节点可供选择。主要有四种类型。</target>
        </trans-unit>
        <trans-unit id="13e62a9cf5b33427b853e406036454d5f97a989c" translate="yes" xml:space="preserve">
          <source>Baseclass for all binary expressions.</source>
          <target state="translated">所有二进制表达式的基类。</target>
        </trans-unit>
        <trans-unit id="e48873a12ce8deaf4e3bf42a8fbd8295532355c1" translate="yes" xml:space="preserve">
          <source>Baseclass for all expressions.</source>
          <target state="translated">所有表达式的基类。</target>
        </trans-unit>
        <trans-unit id="8addc3790d98f4ac6e47134bf85a583a61ae31ca" translate="yes" xml:space="preserve">
          <source>Baseclass for all loaders. Subclass this and override &lt;code&gt;get_source&lt;/code&gt; to implement a custom loading mechanism. The environment provides a &lt;code&gt;get_template&lt;/code&gt; method that calls the loader&amp;rsquo;s &lt;code&gt;load&lt;/code&gt; method to get the &lt;a href=&quot;#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">所有装载程序的基类。将此子类化并重写 &lt;code&gt;get_source&lt;/code&gt; 以实现自定义加载机制。该环境提供了一个 &lt;code&gt;get_template&lt;/code&gt; 方法，该方法调用加载程序的 &lt;code&gt;load&lt;/code&gt; 方法以获取&lt;a href=&quot;#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="513b6e57cdd7f059da2cbb16739d4d53c2e9fc86" translate="yes" xml:space="preserve">
          <source>Baseclass for all template errors.</source>
          <target state="translated">所有模板错误的基类。</target>
        </trans-unit>
        <trans-unit id="316c76fb5e056632cb2843309fa5686e3e7e61e9" translate="yes" xml:space="preserve">
          <source>Baseclass for all unary expressions.</source>
          <target state="translated">所有单利表达式的基类。</target>
        </trans-unit>
        <trans-unit id="df6cde3d07b0a47f714d633db9dc26ba219530fa" translate="yes" xml:space="preserve">
          <source>Baseclass for literals.</source>
          <target state="translated">字母的基类。</target>
        </trans-unit>
        <trans-unit id="a95a93dea4bd76ef1b6385cb96f21a4ab35c02b5" translate="yes" xml:space="preserve">
          <source>Basic API Usage</source>
          <target state="translated">基本API用法</target>
        </trans-unit>
        <trans-unit id="20bb51db1025d5bacad24a4d1a40e0911f761de0" translate="yes" xml:space="preserve">
          <source>Basic wrapper around &lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote&quot;&gt;&lt;code&gt;urllib.parse.quote()&lt;/code&gt;&lt;/a&gt; when given a string, or &lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode&quot;&gt;&lt;code&gt;urllib.parse.urlencode()&lt;/code&gt;&lt;/a&gt; for a dict or iterable.</source>
          <target state="translated">给定字符串时，基本围绕&lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote&quot;&gt; &lt;code&gt;urllib.parse.quote()&lt;/code&gt; 进行&lt;/a&gt;包装，或dict或可迭代的&lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode&quot;&gt; &lt;code&gt;urllib.parse.urlencode()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5fcebeefad3cdbbf8733aa928160dec7dc90c1a1" translate="yes" xml:space="preserve">
          <source>Basics</source>
          <target state="translated">Basics</target>
        </trans-unit>
        <trans-unit id="1b1ca912dfcc15091aebc166a17dc46cf49e0e35" translate="yes" xml:space="preserve">
          <source>Because auto reloading is rarely useful this is disabled per default.</source>
          <target state="translated">因为自动重装很少有用,所以默认情况下是禁用的。</target>
        </trans-unit>
        <trans-unit id="2f93e8fd54af9c37668e42a0ce0d62c278c9f7e2" translate="yes" xml:space="preserve">
          <source>Because it is common to set variables at the beginning of the scope, you can do that within the &lt;code&gt;with&lt;/code&gt; statement. The following two examples are equivalent:</source>
          <target state="translated">因为通常在范围的开头设置变量，所以可以在 &lt;code&gt;with&lt;/code&gt; 语句中进行设置。以下两个示例是等效的：</target>
        </trans-unit>
        <trans-unit id="8430e917abb43c009e5ec47628fe7046f75627fb" translate="yes" xml:space="preserve">
          <source>Because tuples do not require delimiters and may end in a bogus comma an extra hint is needed that marks the end of a tuple. For example for loops support tuples between &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;in&lt;/code&gt;. In that case the &lt;code&gt;extra_end_rules&lt;/code&gt; is set to &lt;code&gt;['name:in']&lt;/code&gt;.</source>
          <target state="translated">由于元组不需要定界符，并且可能以假逗号结尾，因此需要额外的提示来标记元组的结尾。例如，for循环支持 &lt;code&gt;for&lt;/code&gt; 和 &lt;code&gt;in&lt;/code&gt; 之间的元组。在这种情况下， &lt;code&gt;extra_end_rules&lt;/code&gt; 设置为 &lt;code&gt;['name:in']&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="208e5a3a17bda2747037c73c2d2e3cb4837998a4" translate="yes" xml:space="preserve">
          <source>Below is a minimal template that illustrates a few basics using the default Jinja configuration. We will cover the details later in this document:</source>
          <target state="translated">下面是一个最小的模板,它使用默认的Jinja配置说明了一些基本知识。我们将在后面的文档中介绍细节。</target>
        </trans-unit>
        <trans-unit id="6112a6e696f77c86458d53b754e63ef72eb4816d" translate="yes" xml:space="preserve">
          <source>Beside filters, there are also so-called &amp;ldquo;tests&amp;rdquo; available. Tests can be used to test a variable against a common expression. To test a variable or expression, you add &lt;code&gt;is&lt;/code&gt; plus the name of the test after the variable. For example, to find out if a variable is defined, you can do &lt;code&gt;name is defined&lt;/code&gt;, which will then return true or false depending on whether &lt;code&gt;name&lt;/code&gt; is defined in the current template context.</source>
          <target state="translated">除过滤器外，还可以使用所谓的&amp;ldquo;测试&amp;rdquo;。测试可用于针对通用表达式测试变量。要测试变量或表达式，请在变量后添加 &lt;code&gt;is&lt;/code&gt; 再加上测试的名称。例如，要查明是否定义了变量，您可以进行一次define &lt;code&gt;name is defined&lt;/code&gt; ，然后根据当前模板上下文中是否定义了 &lt;code&gt;name&lt;/code&gt; ,返回true或false 。</target>
        </trans-unit>
        <trans-unit id="447463cb68115cfabb41303ba92132edb1aea393" translate="yes" xml:space="preserve">
          <source>Block Assignments</source>
          <target state="translated">块状分配</target>
        </trans-unit>
        <trans-unit id="f0df383d4e0feb1807cf6bfd346518081aef6280" translate="yes" xml:space="preserve">
          <source>Block Nesting and Scope</source>
          <target state="translated">块状嵌套和范围</target>
        </trans-unit>
        <trans-unit id="54c45c033f5eb914fae27a646cbd9e23d3750d19" translate="yes" xml:space="preserve">
          <source>Blocks</source>
          <target state="translated">Blocks</target>
        </trans-unit>
        <trans-unit id="163d6f0eb763b345c69b6c34da85cdf2b4625b94" translate="yes" xml:space="preserve">
          <source>Blocks are used for inheritance and act as both placeholders and replacements at the same time. They are documented in detail in the &lt;a href=&quot;#template-inheritance&quot;&gt;Template Inheritance&lt;/a&gt; section.</source>
          <target state="translated">块用于继承，并同时充当占位符和替换。它们在&amp;ldquo;&lt;a href=&quot;#template-inheritance&quot;&gt;模板继承&amp;rdquo;&lt;/a&gt;部分中详细记录。</target>
        </trans-unit>
        <trans-unit id="8f206fc6993b1a619ca6b053e78f9e648252963a" translate="yes" xml:space="preserve">
          <source>Blocks can be nested for more complex layouts. However, per default blocks may not access variables from outer scopes:</source>
          <target state="translated">块可以被嵌套以获得更复杂的布局。然而,根据默认情况,块不能从外部作用域访问变量。</target>
        </trans-unit>
        <trans-unit id="1c4c37f3e7133f8fe589350b01dff7f0ef70089f" translate="yes" xml:space="preserve">
          <source>Break a loop.</source>
          <target state="translated">打破一个循环。</target>
        </trans-unit>
        <trans-unit id="ac25bca73838cd62efe9709d3ec0b4578d6937bf" translate="yes" xml:space="preserve">
          <source>Buckets are used to store the bytecode for one template. It&amp;rsquo;s created and initialized by the bytecode cache and passed to the loading functions.</source>
          <target state="translated">存储桶用于存储一个模板的字节码。它是由字节码缓存创建和初始化的，并传递给加载函数。</target>
        </trans-unit>
        <trans-unit id="f28d5d416866defa72eb2d763a6d804ceb1a1511" translate="yes" xml:space="preserve">
          <source>Builtin bytecode caches:</source>
          <target state="translated">内置字节码缓存。</target>
        </trans-unit>
        <trans-unit id="e6714e72e60ca0b56ba927374c9f559014f90002" translate="yes" xml:space="preserve">
          <source>But this behavior can depend on the application embedding Jinja. Note that since the child template doesn&amp;rsquo;t define the &lt;code&gt;footer&lt;/code&gt; block, the value from the parent template is used instead.</source>
          <target state="translated">但是，此行为可能取决于嵌入Jinja的应用程序。请注意，由于子模板未定义 &lt;code&gt;footer&lt;/code&gt; 块，因此将使用父模板中的值。</target>
        </trans-unit>
        <trans-unit id="9fb0019a82a791a00d0e0c5b4910290a7a37d15c" translate="yes" xml:space="preserve">
          <source>But with both &lt;code&gt;trim_blocks&lt;/code&gt; and &lt;code&gt;lstrip_blocks&lt;/code&gt; enabled, the template block lines are removed and other whitespace is preserved:</source>
          <target state="translated">但是同时启用 &lt;code&gt;trim_blocks&lt;/code&gt; 和 &lt;code&gt;lstrip_blocks&lt;/code&gt; ，将删除模板块行并保留其他空格：</target>
        </trans-unit>
        <trans-unit id="793c7881dc6324471fed57d2f77e7ad19d481653" translate="yes" xml:space="preserve">
          <source>By creating an instance of &lt;a href=&quot;../api/index#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; you get back a new template object that provides a method called &lt;a href=&quot;../api/index#jinja2.Template.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; which when called with a dict or keyword arguments expands the template. The dict or keywords arguments passed to the template are the so-called &amp;ldquo;context&amp;rdquo; of the template.</source>
          <target state="translated">通过创建&lt;a href=&quot;../api/index#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;的实例，您将获得一个新的模板对象，该对象提供了一个称为&lt;a href=&quot;../api/index#jinja2.Template.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt;的方法，该方法在使用dict或关键字参数调用时会扩展该模板。传递给模板的dict或keyword参数是模板的所谓&amp;ldquo;上下文&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="fae74660e1275204f6fb4d595003929673e566da" translate="yes" xml:space="preserve">
          <source>By default template compilation errors are ignored. In case a log function is provided, errors are logged. If you want template syntax errors to abort the compilation you can set &lt;code&gt;ignore_errors&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; and you will get an exception on syntax errors.</source>
          <target state="translated">默认情况下，模板编译错误将被忽略。如果提供了日志功能，则会记录错误。如果您希望模板语法错误中止编译，则可以将 &lt;code&gt;ignore_errors&lt;/code&gt; 设置为 &lt;code&gt;False&lt;/code&gt; ,并且会出现语法错误的异常。</target>
        </trans-unit>
        <trans-unit id="d033cdb5471e1bb46bbb9f0802304dac54dffc0f" translate="yes" xml:space="preserve">
          <source>By default, Jinja also removes trailing newlines. To keep single trailing newlines, configure Jinja to &lt;code&gt;keep_trailing_newline&lt;/code&gt;.</source>
          <target state="translated">默认情况下，Jinja还删除尾随换行符。要保留单行尾换行符， &lt;code&gt;keep_trailing_newline&lt;/code&gt; Jinja配置为keep_trailing_newline。</target>
        </trans-unit>
        <trans-unit id="80a7084f562f84c21236b73bf66409fdb58ec4c2" translate="yes" xml:space="preserve">
          <source>By default, async support is disabled. Enabling it will cause the environment to compile different code behind the scenes in order to handle async and sync code in an asyncio event loop. This has the following implications:</source>
          <target state="translated">默认情况下,async支持被禁用。启用它将导致环境在幕后编译不同的代码,以便在异步事件循环中处理异步和同步代码。这有以下影响。</target>
        </trans-unit>
        <trans-unit id="39ed7612be7cc888d57e984cf91d0b4e031dcb08" translate="yes" xml:space="preserve">
          <source>By default, included templates are passed the current context and imported templates are not. The reason for this is that imports, unlike includes, are cached; as imports are often used just as a module that holds macros.</source>
          <target state="translated">默认情况下,包含的模板会传递当前上下文,而导入的模板不会。这样做的原因是,导入与includes不同,是要进行缓存的;因为导入经常被当作一个容纳宏的模块来使用。</target>
        </trans-unit>
        <trans-unit id="d93544069e7102d410df089bbd7da30e9928ad39" translate="yes" xml:space="preserve">
          <source>By default, the first variable in a block is used to determine whether to use singular or plural form. If that isn&amp;rsquo;t correct, specify the variable used for pluralizing as a parameter to &lt;code&gt;pluralize&lt;/code&gt;.</source>
          <target state="translated">默认情况下，块中的第一个变量用于确定使用单数还是复数形式。如果这是不正确的，则将用于复数的变量指定为参数来进行 &lt;code&gt;pluralize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="69aed97047674550cc53a9d32e3594012191b213" translate="yes" xml:space="preserve">
          <source>By loading &lt;code&gt;'app1/index.html'&lt;/code&gt; the file from the app1 package is loaded, by loading &lt;code&gt;'app2/index.html'&lt;/code&gt; the file from the second.</source>
          <target state="translated">通过加载 &lt;code&gt;'app1/index.html'&lt;/code&gt; ，从第二个文件中加载文件 &lt;code&gt;'app2/index.html'&lt;/code&gt; ，从app1包中加载文件。</target>
        </trans-unit>
        <trans-unit id="73b30cafbe7ffd835ddd7d892e45232ea0ead87a" translate="yes" xml:space="preserve">
          <source>By writing extensions you can add custom tags to Jinja. This is a non-trivial task and usually not needed as the default tags and expressions cover all common use cases. The i18n extension is a good example of why extensions are useful. Another one would be fragment caching.</source>
          <target state="translated">通过编写扩展,你可以为Jinja添加自定义标签。这是个不容易的任务,而且通常不需要,因为默认的标签和表达式涵盖了所有常见的使用情况。i18n扩展就是一个很好的例子,说明扩展为什么有用。另一个例子是片段缓存。</target>
        </trans-unit>
        <trans-unit id="5372ac390c34bd4fed8b2e1d2dfa8dd1ca3097f2" translate="yes" xml:space="preserve">
          <source>Bytecode Cache</source>
          <target state="translated">字节码缓存</target>
        </trans-unit>
        <trans-unit id="50338b3b242845e21a0ace9ae9684283d945fb52" translate="yes" xml:space="preserve">
          <source>Cache</source>
          <target state="translated">Cache</target>
        </trans-unit>
        <trans-unit id="311d573459612cfdc24a3902bb228a4b0cccc394" translate="yes" xml:space="preserve">
          <source>Calculate the remainder of an integer division. &lt;code&gt;{{ 11 % 7 }}&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">计算整数除法的余数。 &lt;code&gt;{{ 11 % 7 }}&lt;/code&gt; 是 &lt;code&gt;4&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="291a0a58dfa6c640a90c1d868d2af190775ea219" translate="yes" xml:space="preserve">
          <source>Call</source>
          <target state="translated">Call</target>
        </trans-unit>
        <trans-unit id="3b76bf2126a09d45269b2bc430bfa611e2d6d409" translate="yes" xml:space="preserve">
          <source>Call a callable: &lt;code&gt;{{ post.render() }}&lt;/code&gt;. Inside of the parentheses you can use positional arguments and keyword arguments like in Python:</source>
          <target state="translated">呼叫可通话对象： &lt;code&gt;{{ post.render() }}&lt;/code&gt; 。在括号内，您可以像在Python中那样使用位置参数和关键字参数：</target>
        </trans-unit>
        <trans-unit id="c8c5d73825490e79cb63f09216b2d8252e59a934" translate="yes" xml:space="preserve">
          <source>Call a method of the extension. This is a shortcut for &lt;a href=&quot;../templates/index#attr&quot;&gt;&lt;code&gt;attr()&lt;/code&gt;&lt;/a&gt; + &lt;a href=&quot;#jinja2.nodes.Call&quot;&gt;&lt;code&gt;jinja2.nodes.Call&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">调用扩展的方法。这是&lt;a href=&quot;../templates/index#attr&quot;&gt; &lt;code&gt;attr()&lt;/code&gt; &lt;/a&gt; + &lt;a href=&quot;#jinja2.nodes.Call&quot;&gt; &lt;code&gt;jinja2.nodes.Call&lt;/code&gt; &lt;/a&gt;的快捷方式。</target>
        </trans-unit>
        <trans-unit id="690a80633cf9b3f5c2d4bd8973539215c0cdcf6d" translate="yes" xml:space="preserve">
          <source>Call the callable with the arguments and keyword arguments provided but inject the active context or environment as first argument if the callable is a &lt;code&gt;contextfunction()&lt;/code&gt; or &lt;code&gt;environmentfunction()&lt;/code&gt;.</source>
          <target state="translated">使用提供的参数和关键字参数调用callable，但如果可调用对象是 &lt;code&gt;contextfunction()&lt;/code&gt; 或 &lt;code&gt;environmentfunction()&lt;/code&gt; ,则将活动上下文或环境作为第一个参数注入。</target>
        </trans-unit>
        <trans-unit id="888b2ec46585896971cb4af50fae8d20995ba6e6" translate="yes" xml:space="preserve">
          <source>Calls an expression. &lt;code&gt;args&lt;/code&gt; is a list of arguments, &lt;code&gt;kwargs&lt;/code&gt; a list of keyword arguments (list of &lt;a href=&quot;#jinja2.nodes.Keyword&quot;&gt;&lt;code&gt;Keyword&lt;/code&gt;&lt;/a&gt; nodes), and &lt;code&gt;dyn_args&lt;/code&gt; and &lt;code&gt;dyn_kwargs&lt;/code&gt; has to be either &lt;code&gt;None&lt;/code&gt; or a node that is used as node for dynamic positional (&lt;code&gt;*args&lt;/code&gt;) or keyword (&lt;code&gt;**kwargs&lt;/code&gt;) arguments.</source>
          <target state="translated">调用一个表达式。 &lt;code&gt;args&lt;/code&gt; 是参数列表， &lt;code&gt;kwargs&lt;/code&gt; 是关键字参数列表（&lt;a href=&quot;#jinja2.nodes.Keyword&quot;&gt; &lt;code&gt;Keyword&lt;/code&gt; &lt;/a&gt;节点列表），并且 &lt;code&gt;dyn_args&lt;/code&gt; 和 &lt;code&gt;dyn_kwargs&lt;/code&gt; 必须为 &lt;code&gt;None&lt;/code&gt; 或用作动态位置（ &lt;code&gt;*args&lt;/code&gt; ）或关键字（ &lt;code&gt;**kwargs&lt;/code&gt; ）参数。</target>
        </trans-unit>
        <trans-unit id="ac581ba0f3dd1ff4c585d372871c7da83e579842" translate="yes" xml:space="preserve">
          <source>Capitalize a value. The first character will be uppercase, all others lowercase.</source>
          <target state="translated">将数值大写。第一个字符为大写,其他字符为小写。</target>
        </trans-unit>
        <trans-unit id="698b2aa739a5adac275a1b1c1b14ec3c80549813" translate="yes" xml:space="preserve">
          <source>Centers the value in a field of a given width.</source>
          <target state="translated">在给定宽度的字段中使数值居中。</target>
        </trans-unit>
        <trans-unit id="4846b79cdf556dc5006ad7fe63666f414fbc53dc" translate="yes" xml:space="preserve">
          <source>Changed in version 2.10.</source>
          <target state="translated">在2.10版本中有所改变。</target>
        </trans-unit>
        <trans-unit id="3397f2b4b36d6f196c5522d8d8be89707e3e0036" translate="yes" xml:space="preserve">
          <source>Changed in version 2.10: Blank lines are not indented by default.</source>
          <target state="translated">在2.10版本中更改:默认情况下,空行不缩进。</target>
        </trans-unit>
        <trans-unit id="7256e767bd6c7fc257cf38e2c41ad126c8b48a4f" translate="yes" xml:space="preserve">
          <source>Changed in version 2.11.0: Added the &lt;code&gt;default&lt;/code&gt; parameter.</source>
          <target state="translated">在版本2.11.0中更改：添加了 &lt;code&gt;default&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="e808c696c9283917aa1a52685f13b884e38b3145" translate="yes" xml:space="preserve">
          <source>Changed in version 2.11.0: The &lt;code&gt;attribute&lt;/code&gt; parameter can be a comma separated list of attributes, e.g. &lt;code&gt;&quot;age,name&quot;&lt;/code&gt;.</source>
          <target state="translated">在版本2.11.0中更改： &lt;code&gt;attribute&lt;/code&gt; 参数可以是逗号分隔的属性列表，例如 &lt;code&gt;&quot;age,name&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="55afd0eebb123568cd1caf3eac876fa5f9a03f9a" translate="yes" xml:space="preserve">
          <source>Changed in version 2.11: Added the &lt;code&gt;break_on_hyphens&lt;/code&gt; parameter.</source>
          <target state="translated">在版本2.11中更改：添加了 &lt;code&gt;break_on_hyphens&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="d177ebff949ce4bed7b0d300e0e1099a8760757c" translate="yes" xml:space="preserve">
          <source>Changed in version 2.11: Existing newlines are treated as paragraphs wrapped separately.</source>
          <target state="translated">在2.11版本中的变化:现有的新行被视为单独包装的段落。</target>
        </trans-unit>
        <trans-unit id="62d98e6f2b509855ed2a742b692402eb6e94e505" translate="yes" xml:space="preserve">
          <source>Changed in version 2.11: If a name in the list of names is &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt;, a message about it being undefined is shown rather than the empty string.</source>
          <target state="translated">在版本2.11中更改：如果名称列表中的名称为&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;，则显示有关该名称未定义的消息，而不是空字符串。</target>
        </trans-unit>
        <trans-unit id="e42ee2db856a7915eb1f5241e2c235e0ecef3b14" translate="yes" xml:space="preserve">
          <source>Changed in version 2.11: If names is &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt;, an &lt;a href=&quot;#jinja2.UndefinedError&quot;&gt;&lt;code&gt;UndefinedError&lt;/code&gt;&lt;/a&gt; is raised instead. If no templates were found and names contains &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt;, the message is more helpful.</source>
          <target state="translated">在版本2.11中更改：如果名称为&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;，则会引发&lt;a href=&quot;#jinja2.UndefinedError&quot;&gt; &lt;code&gt;UndefinedError&lt;/code&gt; &lt;/a&gt;。如果未找到模板，并且名称包含&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;，则该消息会更有帮助。</target>
        </trans-unit>
        <trans-unit id="b93d2d68fbc6d875f6d6834fce8d7b3a5c5a205f" translate="yes" xml:space="preserve">
          <source>Changed in version 2.11: If the given name is &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt; and no message was provided, an &lt;a href=&quot;#jinja2.UndefinedError&quot;&gt;&lt;code&gt;UndefinedError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">在版本2.11中更改：如果给定名称为&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;并且未提供任何消息，则会引发&lt;a href=&quot;#jinja2.UndefinedError&quot;&gt; &lt;code&gt;UndefinedError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3e2800c979d6bb685d6bfc2553912ed23521a4fb" translate="yes" xml:space="preserve">
          <source>Changed in version 2.11: It&amp;rsquo;s now possible to configure the &lt;a href=&quot;../api/index#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;../api/index#jinja2.ChainableUndefined&quot;&gt;&lt;code&gt;ChainableUndefined&lt;/code&gt;&lt;/a&gt; to make the &lt;code&gt;default&lt;/code&gt; filter work on nested elements and attributes that may contain undefined values in the chain without getting an &lt;a href=&quot;../api/index#jinja2.UndefinedError&quot;&gt;&lt;code&gt;UndefinedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在版本2.11中进行了更改：现在可以使用&lt;a href=&quot;../api/index#jinja2.ChainableUndefined&quot;&gt; &lt;code&gt;ChainableUndefined&lt;/code&gt; &lt;/a&gt;配置&lt;a href=&quot;../api/index#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;，以使 &lt;code&gt;default&lt;/code&gt; 过滤器可对可能包含链中未定义值的嵌套元素和属性起作用，而不会出现&lt;a href=&quot;../api/index#jinja2.UndefinedError&quot;&gt; &lt;code&gt;UndefinedError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f3ab0cf1500201dd687e8c635d5a9c7c832c33dc" translate="yes" xml:space="preserve">
          <source>Changed in version 2.4.</source>
          <target state="translated">在2.4版本中有所改变。</target>
        </trans-unit>
        <trans-unit id="2a5e679cb3cbedd10771e41cd9eb3fa7eb724b81" translate="yes" xml:space="preserve">
          <source>Changed in version 2.4: &lt;code&gt;autoescape&lt;/code&gt; can now be a function</source>
          <target state="translated">在版本2.4中进行了更改：自动 &lt;code&gt;autoescape&lt;/code&gt; 现在可以用作函数</target>
        </trans-unit>
        <trans-unit id="20cef282203dedbd8aaffb16fbaf70db1f1f30c6" translate="yes" xml:space="preserve">
          <source>Changed in version 2.4: If &lt;code&gt;name&lt;/code&gt; is a &lt;a href=&quot;#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; object it is returned from the function unchanged.</source>
          <target state="translated">在版本2.4中进行了更改：如果 &lt;code&gt;name&lt;/code&gt; 是&lt;a href=&quot;#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;对象，则它将从函数中返回而未更改。</target>
        </trans-unit>
        <trans-unit id="27b130bf4591767d01be4a8ba6165190e388d9b1" translate="yes" xml:space="preserve">
          <source>Changed in version 2.4: If &lt;code&gt;names&lt;/code&gt; contains a &lt;a href=&quot;#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; object it is returned from the function unchanged.</source>
          <target state="translated">在版本2.4中进行了更改：如果 &lt;code&gt;names&lt;/code&gt; 包含一个&lt;a href=&quot;#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;对象，则它将从函数中返回而未更改。</target>
        </trans-unit>
        <trans-unit id="a16e2bf0945db322464fd0beb674b990aa4713df" translate="yes" xml:space="preserve">
          <source>Changed in version 2.4: If a template object was passed to the template context, you can import from that object.</source>
          <target state="translated">在2.4版本中改变了:如果一个模板对象被传递给模板上下文,你可以从该对象导入。</target>
        </trans-unit>
        <trans-unit id="f6e702f9fba904e46b51956430d8c553bad3003e" translate="yes" xml:space="preserve">
          <source>Changed in version 2.4: If a template object was passed to the template context, you can include that object using &lt;code&gt;include&lt;/code&gt;.</source>
          <target state="translated">在版本2.4中进行了更改：如果将模板对象传递给模板上下文，则可以使用 &lt;code&gt;include&lt;/code&gt; 包含该对象。</target>
        </trans-unit>
        <trans-unit id="0e7c88f1919bd1b01de4a7403ef590cdb345565b" translate="yes" xml:space="preserve">
          <source>Changed in version 2.4: the &lt;code&gt;eval_ctx&lt;/code&gt; parameter was added.</source>
          <target state="translated">在版本2.4中进行了更改：添加了 &lt;code&gt;eval_ctx&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="76b4f4c9a3c35bbffc4f430c3a7f0f63053dad02" translate="yes" xml:space="preserve">
          <source>Changed in version 2.5: Added new-style gettext support.</source>
          <target state="translated">2.5版本的变化:增加了新样式的gettext支持。</target>
        </trans-unit>
        <trans-unit id="f1bf05544b830b967ec87f22b52888aea4ec3f1f" translate="yes" xml:space="preserve">
          <source>Changed in version 2.6: The &lt;code&gt;attribute&lt;/code&gt; parameter was added to allow suming up over attributes. Also the &lt;code&gt;start&lt;/code&gt; parameter was moved on to the right.</source>
          <target state="translated">在2.6版中进行了更改：添加了 &lt;code&gt;attribute&lt;/code&gt; 参数以允许对属性进行汇总。同样， &lt;code&gt;start&lt;/code&gt; 参数也移到了右边。</target>
        </trans-unit>
        <trans-unit id="a68ff0313a5e772e2dc086ec8420fb0835215ab9" translate="yes" xml:space="preserve">
          <source>Changed in version 2.6: The &lt;code&gt;attribute&lt;/code&gt; parameter was added.</source>
          <target state="translated">在2.6版中进行了更改：添加了 &lt;code&gt;attribute&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="b4f333003fa0d883b83338ac5cc3662b32f3a5c9" translate="yes" xml:space="preserve">
          <source>Changed in version 2.6: The attribute supports dot notation for nested access.</source>
          <target state="translated">在2.6版本中的变化:该属性支持嵌套访问的点符号。</target>
        </trans-unit>
        <trans-unit id="a38c7607ea4965bd4c984586bcc29650f4ca3e75" translate="yes" xml:space="preserve">
          <source>Changed in version 2.7: Added the &lt;code&gt;wrapstring&lt;/code&gt; parameter.</source>
          <target state="translated">在2.7版中进行了更改：添加了 &lt;code&gt;wrapstring&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="bcd4b77c30a79b8cbecbfa51bb28c2a466cf66ac" translate="yes" xml:space="preserve">
          <source>Changed in version 2.8+: The &lt;em&gt;target&lt;/em&gt; parameter was added.</source>
          <target state="translated">在2.8+版中更改：添加了&lt;em&gt;目标&lt;/em&gt;参数。</target>
        </trans-unit>
        <trans-unit id="ec488c0d8958e81067093af63e5b682245cb942d" translate="yes" xml:space="preserve">
          <source>Changed in version 2.8: The &lt;code&gt;followlinks&lt;/code&gt; parameter was added.</source>
          <target state="translated">在2.8版中更改：添加了 &lt;code&gt;followlinks&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="193d5e0e1071037b1be3157953c3d0214e38c000" translate="yes" xml:space="preserve">
          <source>Changed in version 2.8: The cache size was increased to 400 from a low 50.</source>
          <target state="translated">2.8版本的变化:缓存大小从低50增加到400。</target>
        </trans-unit>
        <trans-unit id="9f5e44e5b084476f8fc6286b628e89669375c1e3" translate="yes" xml:space="preserve">
          <source>Changed in version 2.9: This extension is now built-in and no longer does anything.</source>
          <target state="translated">在2.9版本中有所改变。这个扩展现在是内置的,不再做任何事情。</target>
        </trans-unit>
        <trans-unit id="9a525308cf168ae1a288dadcca4112219e759220" translate="yes" xml:space="preserve">
          <source>Changed in version 2.9: This extension was removed and is now built-in. Enabling the extension no longer does anything.</source>
          <target state="translated">在2.9版本中有所改变。该扩展被删除,现在是内置的。启用该扩展不再有任何作用。</target>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">Changelog</target>
        </trans-unit>
        <trans-unit id="6da992afd4248fd66ddb1a0ba1bba03e7dc49644" translate="yes" xml:space="preserve">
          <source>Check if a variable is divisible by a number.</source>
          <target state="translated">检查一个变量是否被一个数字整除。</target>
        </trans-unit>
        <trans-unit id="841df0a652bb9511461ba6e31662cbb76d9e0f93" translate="yes" xml:space="preserve">
          <source>Check if an object is safely callable. Per default a function is considered safe unless the &lt;code&gt;unsafe_callable&lt;/code&gt; attribute exists and is True. Override this method to alter the behavior, but this won&amp;rsquo;t affect the &lt;code&gt;unsafe&lt;/code&gt; decorator from this module.</source>
          <target state="translated">检查对象是否可以安全调用。默认情况下，除非 &lt;code&gt;unsafe_callable&lt;/code&gt; 属性存在且为True，否则函数被认为是安全的。重写此方法可以更改行为，但这不会影响此模块中 &lt;code&gt;unsafe&lt;/code&gt; 装饰器。</target>
        </trans-unit>
        <trans-unit id="1a9ab148b5b69756dbdb63be361961e1b145b139" translate="yes" xml:space="preserve">
          <source>Check if an object points to the same memory address than another object:</source>
          <target state="translated">检查一个对象是否比另一个对象指向相同的内存地址。</target>
        </trans-unit>
        <trans-unit id="363546d31f2ea9a4d9cb4ba8d9880e6f320bac87" translate="yes" xml:space="preserve">
          <source>Check if it&amp;rsquo;s possible to assign something to this node.</source>
          <target state="translated">检查是否可以为该节点分配某些内容。</target>
        </trans-unit>
        <trans-unit id="1bda7bd3fa6ef833a5f1fa087086e8f34b293726" translate="yes" xml:space="preserve">
          <source>Check if it&amp;rsquo;s possible to iterate over an object.</source>
          <target state="translated">检查是否可以迭代对象。</target>
        </trans-unit>
        <trans-unit id="f3ad08bb4b466c0d290b8693d199b7eb866e5968" translate="yes" xml:space="preserve">
          <source>Check if the object passed is undefined. This does nothing more than performing an instance check against &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt; but looks nicer. This can be used for custom filters or tests that want to react to undefined variables. For example a custom default filter can look like this:</source>
          <target state="translated">检查传递的对象是否未定义。这无非是对&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;执行实例检查，但看起来更好。这可用于想要对未定义变量做出反应的自定义过滤器或测试。例如，自定义默认过滤器可能如下所示：</target>
        </trans-unit>
        <trans-unit id="4d5765d2303b3cb25d878b864fa2fa0ac5f5f835" translate="yes" xml:space="preserve">
          <source>Check if the value is escaped.</source>
          <target state="translated">检查该值是否被转义。</target>
        </trans-unit>
        <trans-unit id="c0ae3522b0a93adad467a1c484e47da55f31a184" translate="yes" xml:space="preserve">
          <source>Check if value is in seq.</source>
          <target state="translated">检查值是否在序列中。</target>
        </trans-unit>
        <trans-unit id="996e31f727a5d55f1c2c9ecc6fab3703f07517ac" translate="yes" xml:space="preserve">
          <source>Child Template</source>
          <target state="translated">儿童模板</target>
        </trans-unit>
        <trans-unit id="a9fc65492e113f5f3fbeb978e529896859996ac4" translate="yes" xml:space="preserve">
          <source>Clears the cache. This method is not used by Jinja but should be implemented to allow applications to clear the bytecode cache used by a particular environment.</source>
          <target state="translated">清除缓存。这个方法不被Jinja使用,但应该被实现,以允许应用程序清除特定环境使用的字节码缓存。</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="55bad9dbf1b0a8f95470d6d98c1a69a5d90a765a" translate="yes" xml:space="preserve">
          <source>Compares an expression with some other expressions. &lt;code&gt;ops&lt;/code&gt; must be a list of &lt;a href=&quot;#jinja2.nodes.Operand&quot;&gt;&lt;code&gt;Operand&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">将一个表达式与其他一些表达式进行比较。 &lt;code&gt;ops&lt;/code&gt; 必须是&lt;a href=&quot;#jinja2.nodes.Operand&quot;&gt; &lt;code&gt;Operand&lt;/code&gt; &lt;/a&gt;的列表。</target>
        </trans-unit>
        <trans-unit id="6798dadbab187e5a3f3cf58ab777a36a4683248e" translate="yes" xml:space="preserve">
          <source>Compares two objects for equality.</source>
          <target state="translated">比较两个对象是否平等。</target>
        </trans-unit>
        <trans-unit id="e8fb4e6aa43e63ea6e810fef68b470d4f9e9a290" translate="yes" xml:space="preserve">
          <source>Compares two objects for inequality.</source>
          <target state="translated">将两个对象进行不等式比较。</target>
        </trans-unit>
        <trans-unit id="e46ee00fde40e955c86abe019a61121e06d653c9" translate="yes" xml:space="preserve">
          <source>Comparisons</source>
          <target state="translated">Comparisons</target>
        </trans-unit>
        <trans-unit id="22871478dfd8421b5b22b27e4becedea5103b9fe" translate="yes" xml:space="preserve">
          <source>Concatenates the list of expressions provided after converting them to unicode.</source>
          <target state="translated">将提供的表达式列表转换为unicode后进行连接。</target>
        </trans-unit>
        <trans-unit id="d8d45072305fae18f820f85e7f32f6240b9ebe52" translate="yes" xml:space="preserve">
          <source>Configures the leeway default for the &lt;code&gt;truncate&lt;/code&gt; filter. Leeway as introduced in 2.9 but to restore compatibility with older templates it can be configured to &lt;code&gt;0&lt;/code&gt; to get the old behavior back. The default is &lt;code&gt;5&lt;/code&gt;.</source>
          <target state="translated">配置 &lt;code&gt;truncate&lt;/code&gt; 过滤器的回程默认值。Leeway如2.9中所述，但为了恢复与旧模板的兼容性，可以将其配置为 &lt;code&gt;0&lt;/code&gt; 以恢复旧行为。默认值为 &lt;code&gt;5&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e416e43f493dc03bd7f45d55965a398e7052a174" translate="yes" xml:space="preserve">
          <source>Contents:</source>
          <target state="translated">Contents:</target>
        </trans-unit>
        <trans-unit id="adcb150051166bc0a81dc53d6d057bfd0edada64" translate="yes" xml:space="preserve">
          <source>Context filters work the same just that the first argument is the current active &lt;code&gt;Context&lt;/code&gt; rather than the environment.</source>
          <target state="translated">上下文过滤器的工作原理相同，只是第一个参数是当前活动的 &lt;code&gt;Context&lt;/code&gt; 而不是环境。</target>
        </trans-unit>
        <trans-unit id="d3953d7d5ec6cbbe11103484ab3c18eeecfc4b12" translate="yes" xml:space="preserve">
          <source>Context is immutable for the same reason Python&amp;rsquo;s frame locals are immutable inside functions. Both Jinja and Python are not using the context / frame locals as data storage for variables but only as primary data source.</source>
          <target state="translated">出于相同的原因，上下文是不可变的，因为Python的框架局部变量在函数内部是不可变的。Jinja和Python都没有将上下文/框架局部变量用作变量的数据存储，而仅用作主要数据源。</target>
        </trans-unit>
        <trans-unit id="44cceaaff447d5d81f1501c9a914fc94ae576f4a" translate="yes" xml:space="preserve">
          <source>Continue a loop.</source>
          <target state="translated">继续一圈。</target>
        </trans-unit>
        <trans-unit id="5c7a42665e37724dbb7ed414ebeda75114a87f13" translate="yes" xml:space="preserve">
          <source>Convenience method that raises &lt;code&gt;exc&lt;/code&gt; with the message, passed line number or last line number as well as the current name and filename.</source>
          <target state="translated">方便的方法，可提高消息的 &lt;code&gt;exc&lt;/code&gt; ，传递的行号或最后一个行号以及当前名称和文件名。</target>
        </trans-unit>
        <trans-unit id="0a591f82700800891bf0d5a22d4a614840d215b2" translate="yes" xml:space="preserve">
          <source>Convert a value to lowercase.</source>
          <target state="translated">将一个值转换为小写。</target>
        </trans-unit>
        <trans-unit id="452f69bce5bd0acadafe8da2d8dc1f4ca03b6ebf" translate="yes" xml:space="preserve">
          <source>Convert a value to uppercase.</source>
          <target state="translated">将一个值转换为大写。</target>
        </trans-unit>
        <trans-unit id="7a708d5af0cab331869a43d779c1cf37f1e403cd" translate="yes" xml:space="preserve">
          <source>Convert escaped markup back into a text string. This replaces HTML entities with the characters they represent.</source>
          <target state="translated">将转义的标记转换回文本字符串。这将HTML实体替换为它们所代表的字符。</target>
        </trans-unit>
        <trans-unit id="290425dbe558478e9b2edeb4618bed65fb78985e" translate="yes" xml:space="preserve">
          <source>Convert the characters &amp;amp;, &amp;lt;, &amp;gt;, &amp;lsquo;, and &amp;rdquo; in string s to HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML. Marks return value as markup string.</source>
          <target state="translated">将字符串s中的字符＆，&amp;lt;，&amp;gt;，'和'转换为HTML安全序列。如果您需要在HTML中显示可能包含此类字符的文本，请使用此选项。将返回值标记为标记字符串。</target>
        </trans-unit>
        <trans-unit id="10254794b2c85e0cac217281081c2c84022d416a" translate="yes" xml:space="preserve">
          <source>Convert the characters &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;'&lt;/code&gt;, and &lt;code&gt;&quot;&lt;/code&gt; in string &lt;code&gt;s&lt;/code&gt; to HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML. This function will not escaped objects that do have an HTML representation such as already escaped data.</source>
          <target state="translated">字符转换 &lt;code&gt;&amp;amp;&lt;/code&gt; ， &lt;code&gt;&amp;lt;&lt;/code&gt; ， &lt;code&gt;&amp;gt;&lt;/code&gt; ， &lt;code&gt;'&lt;/code&gt; 和 &lt;code&gt;&quot;&lt;/code&gt; 字符串 &lt;code&gt;s&lt;/code&gt; 到HTML安全的序列。如果需要，可能在HTML中包含这样的字符显示文本使用此功能。此功能将无法逃脱了做有一个HTML表现对象例如已经转义的数据。</target>
        </trans-unit>
        <trans-unit id="3f0c45e33356de890a10c50be428c1d104bacc9f" translate="yes" xml:space="preserve">
          <source>Convert the value into a floating point number. If the conversion doesn&amp;rsquo;t work it will return &lt;code&gt;0.0&lt;/code&gt;. You can override this default using the first parameter.</source>
          <target state="translated">将值转换为浮点数。如果转换不起作用，它将返回 &lt;code&gt;0.0&lt;/code&gt; 。您可以使用第一个参数覆盖此默认设置。</target>
        </trans-unit>
        <trans-unit id="f4ba92ba4d8c73dbfa8609c79e27d4e405c98c17" translate="yes" xml:space="preserve">
          <source>Convert the value into a list. If it was a string the returned list will be a list of characters.</source>
          <target state="translated">将值转换为一个列表。如果是字符串,返回的列表将是一个字符列表。</target>
        </trans-unit>
        <trans-unit id="bfb458c037c50d589927fe6272f18c13caeb43f1" translate="yes" xml:space="preserve">
          <source>Convert the value into an integer. If the conversion doesn&amp;rsquo;t work it will return &lt;code&gt;0&lt;/code&gt;. You can override this default using the first parameter. You can also override the default base (10) in the second parameter, which handles input with prefixes such as 0b, 0o and 0x for bases 2, 8 and 16 respectively. The base is ignored for decimal numbers and non-string values.</source>
          <target state="translated">将值转换为整数。如果转换不起作用，它将返回 &lt;code&gt;0&lt;/code&gt; 。您可以使用第一个参数覆盖此默认设置。您还可以在第二个参数中覆盖默认的基数（10），该默认基数将为前缀2、8和16处理带有前缀的输入，例如0b，0o和0x。对于十进制数字和非字符串值，将忽略基数。</target>
        </trans-unit>
        <trans-unit id="01b77dcc108f953e69e77e9dbe135eb070a48dbc" translate="yes" xml:space="preserve">
          <source>Converts URLs in plain text into clickable links.</source>
          <target state="translated">将纯文本的URL转换为可点击的链接。</target>
        </trans-unit>
        <trans-unit id="ae7edf9a4dd3f9745005ff49227d3a6b7ce83519" translate="yes" xml:space="preserve">
          <source>Converts all operands into strings and concatenates them.</source>
          <target state="translated">将所有操作数转换为字符串并进行连接。</target>
        </trans-unit>
        <trans-unit id="b4f6bab33ad727a1b3b52cfdc11a809a6362f231" translate="yes" xml:space="preserve">
          <source>Count the number of newline characters in the string. This is useful for extensions that filter a stream.</source>
          <target state="translated">计算字符串中换行符的数量。这对过滤流的扩展很有用。</target>
        </trans-unit>
        <trans-unit id="c66fdd085a1b2ce4f3adbc607c7725792c960d8e" translate="yes" xml:space="preserve">
          <source>Count the words in that string.</source>
          <target state="translated">对该字符串中的字数进行计数。</target>
        </trans-unit>
        <trans-unit id="21a084ce4d86f03c624a0f38c4da0265ee37810f" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;Context&lt;/code&gt; for this template. The vars provided will be passed to the template. Per default the globals are added to the context. If shared is set to &lt;code&gt;True&lt;/code&gt; the data is passed as is to the context without adding the globals.</source>
          <target state="translated">为此模板创建一个新的 &lt;code&gt;Context&lt;/code&gt; 。提供的变量将传递到模板。默认情况下，全局变量被添加到上下文中。如果shared设置为 &lt;code&gt;True&lt;/code&gt; ,则数据将按原样传递到上下文，而不添加全局变量。</target>
        </trans-unit>
        <trans-unit id="b92a067f5b9d8e2cea0211a8528cf959fe7d195a" translate="yes" xml:space="preserve">
          <source>Create a new overlay environment that shares all the data with the current environment except for cache and the overridden attributes. Extensions cannot be removed for an overlayed environment. An overlayed environment automatically gets all the extensions of the environment it is linked to plus optional extra extensions.</source>
          <target state="translated">创建一个新的叠加环境,除了缓存和重写属性外,与当前环境共享所有数据。叠加环境的扩展不能被移除。叠加环境会自动获得它所链接的环境的所有扩展以及可选的额外扩展。</target>
        </trans-unit>
        <trans-unit id="756d2dbfb63a8bb688b01b91f91bfd9ac7d963d0" translate="yes" xml:space="preserve">
          <source>Create an SGML/XML attribute string based on the items in a dict. All values that are neither &lt;code&gt;none&lt;/code&gt; nor &lt;code&gt;undefined&lt;/code&gt; are automatically escaped:</source>
          <target state="translated">根据字典中的项目创建SGML / XML属性字符串。既不是所有价值观 &lt;code&gt;none&lt;/code&gt; 也不 &lt;code&gt;undefined&lt;/code&gt; 是自动转义：</target>
        </trans-unit>
        <trans-unit id="f5de186f29e8d491638c9b3f1eae6d8942d2a168" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt; object for &lt;code&gt;name&lt;/code&gt;. This is useful for filters or functions that may return undefined objects for some operations. All parameters except of &lt;code&gt;hint&lt;/code&gt; should be provided as keyword parameters for better readability. The &lt;code&gt;hint&lt;/code&gt; is used as error message for the exception if provided, otherwise the error message will be generated from &lt;code&gt;obj&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; automatically. The exception provided as &lt;code&gt;exc&lt;/code&gt; is raised if something with the generated undefined object is done that the undefined object does not allow. The default exception is &lt;a href=&quot;#jinja2.UndefinedError&quot;&gt;&lt;code&gt;UndefinedError&lt;/code&gt;&lt;/a&gt;. If a &lt;code&gt;hint&lt;/code&gt; is provided the &lt;code&gt;name&lt;/code&gt; may be omitted.</source>
          <target state="translated">为 &lt;code&gt;name&lt;/code&gt; 创建一个新的&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;对象。这对于可能为某些操作返回未定义对象的过滤器或函数很有用。除 &lt;code&gt;hint&lt;/code&gt; 外，所有参数都应作为关键字参数提供，以提高可读性。如果提供了 &lt;code&gt;hint&lt;/code&gt; 则该提示将用作异常的错误消息，否则该错误消息将从 &lt;code&gt;obj&lt;/code&gt; 和 &lt;code&gt;name&lt;/code&gt; 自动生成。如果完成了未定义对象所不允许的操作，则会引发作为 &lt;code&gt;exc&lt;/code&gt; 提供的异常。默认异常是&lt;a href=&quot;#jinja2.UndefinedError&quot;&gt; &lt;code&gt;UndefinedError&lt;/code&gt; &lt;/a&gt;。如果提供了 &lt;code&gt;hint&lt;/code&gt; 则 &lt;code&gt;name&lt;/code&gt; 可以省略。</target>
        </trans-unit>
        <trans-unit id="ccffd1fd350b2f6c07c9853f79cb8b9f5cd5a940" translate="yes" xml:space="preserve">
          <source>Creates a new container that allows attribute assignment using the &lt;code&gt;{% set %}&lt;/code&gt; tag:</source>
          <target state="translated">创建一个新容器，该容器允许使用 &lt;code&gt;{% set %}&lt;/code&gt; 标签进行属性分配：</target>
        </trans-unit>
        <trans-unit id="6159115c26a8d86ba6b3be05adeda923c2773fb0" translate="yes" xml:space="preserve">
          <source>Creating overlays should happen after the initial environment was set up completely. Not all attributes are truly linked, some are just copied over so modifications on the original environment may not shine through.</source>
          <target state="translated">创建覆盖应该在初始环境完全设置好之后进行。并不是所有的属性都是真正的链接,有些属性只是复制过来的,所以对原环境的修改可能无法体现出来。</target>
        </trans-unit>
        <trans-unit id="a38be5241edc52c392cfcfb54d90cd931314c3a1" translate="yes" xml:space="preserve">
          <source>Currently it is only used to enable and disable the automatic escaping but can be used for extensions as well.</source>
          <target state="translated">目前它只用于启用和禁用自动转义,但也可以用于扩展。</target>
        </trans-unit>
        <trans-unit id="30c3e03bf5eeeddddd25cfc9a3c1058ba1a99bb1" translate="yes" xml:space="preserve">
          <source>Custom Filters</source>
          <target state="translated">自定义过滤器</target>
        </trans-unit>
        <trans-unit id="25bf742a091a3a8b6df4f38849ad1a3bcff418b4" translate="yes" xml:space="preserve">
          <source>Custom Tests</source>
          <target state="translated">自定义测试</target>
        </trans-unit>
        <trans-unit id="59d7cf5f4f6810a50076add50fee2c64dc7b3cd1" translate="yes" xml:space="preserve">
          <source>Custom filters are just regular Python functions that take the left side of the filter as first argument and the arguments passed to the filter as extra arguments or keyword arguments.</source>
          <target state="translated">自定义过滤器只是普通的Python函数,它将过滤器的左侧作为第一参数,传递给过滤器的参数作为额外参数或关键字参数。</target>
        </trans-unit>
        <trans-unit id="d2a313e76d947c161f2a67ee325a6fab4a3b744f" translate="yes" xml:space="preserve">
          <source>Cycle through values by yielding them one at a time, then restarting once the end is reached.</source>
          <target state="translated">通过每次让出一个值,然后在达到终点后重新开始,进行循环。</target>
        </trans-unit>
        <trans-unit id="c65ade120087027f60f7c1d12ef7a54948acfdd3" translate="yes" xml:space="preserve">
          <source>Debug Extension</source>
          <target state="translated">调试扩展</target>
        </trans-unit>
        <trans-unit id="06a1228bc1a2b90a6f69119da7257f1a1ab45207" translate="yes" xml:space="preserve">
          <source>Debug Statement</source>
          <target state="translated">调试声明</target>
        </trans-unit>
        <trans-unit id="5003b467513b322c0b315d95d51da4dbbf986f45" translate="yes" xml:space="preserve">
          <source>Decorator for marking context dependent filters. The current &lt;code&gt;Context&lt;/code&gt; will be passed as first argument.</source>
          <target state="translated">用于标记上下文相关过滤器的装饰器。当前 &lt;code&gt;Context&lt;/code&gt; 将作为第一个参数传递。</target>
        </trans-unit>
        <trans-unit id="0c44268d159f9cdaf432ba8b47f79277bc6bf5c2" translate="yes" xml:space="preserve">
          <source>Decorator for marking environment dependent filters. The current &lt;a href=&quot;#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt; is passed to the filter as first argument.</source>
          <target state="translated">装饰器，用于标记与环境相关的过滤器。当前&lt;a href=&quot;#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;作为第一个参数传递到过滤器。</target>
        </trans-unit>
        <trans-unit id="09dc554500411d8a9dbcdf94b9173101e58e98fa" translate="yes" xml:space="preserve">
          <source>Decorator for marking eval-context dependent filters. An eval context object is passed as first argument. For more information about the eval context, see &lt;a href=&quot;#eval-context&quot;&gt;Evaluation Context&lt;/a&gt;.</source>
          <target state="translated">装饰器，用于标记与评估上下文相关的过滤器。评估上下文对象作为第一个参数传递。有关评估上下文的更多信息，请参见&lt;a href=&quot;#eval-context&quot;&gt;评估上下文&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="09818879ea912be67ef1343ccd2f453dac476d2c" translate="yes" xml:space="preserve">
          <source>Disable the output buffering.</source>
          <target state="translated">禁用输出缓冲。</target>
        </trans-unit>
        <trans-unit id="aa8cb07a9d25324aded29662ce09fc2c44fb9618" translate="yes" xml:space="preserve">
          <source>Divide two numbers and return the truncated integer result. &lt;code&gt;{{ 20 // 7 }}&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">除以两个数字并返回截断的整数结果。 &lt;code&gt;{{ 20 // 7 }}&lt;/code&gt; 是 &lt;code&gt;2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="821ce3584d4ee6a3a66a1d7b38eb048030d2dff6" translate="yes" xml:space="preserve">
          <source>Divide two numbers. The return value will be a floating point number. &lt;code&gt;{{ 1 / 2 }}&lt;/code&gt; is &lt;code&gt;{{ 0.5 }}&lt;/code&gt;.</source>
          <target state="translated">除以两个数字。返回值将是一个浮点数。 &lt;code&gt;{{ 1 / 2 }}&lt;/code&gt; 是 &lt;code&gt;{{ 0.5 }}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c57bf9528b8e986b9d46111ccd2cdf71905d8a3a" translate="yes" xml:space="preserve">
          <source>Divides the left by the right node and truncates conver the result into an integer by truncating.</source>
          <target state="translated">用右边的节点除以左边,并通过截断将结果转化为整数。</target>
        </trans-unit>
        <trans-unit id="81a35006578e65dcf9b3f71f3d4ae5e50ce5eb56" translate="yes" xml:space="preserve">
          <source>Divides the left by the right node.</source>
          <target state="translated">用右边的节点除以左边的节点。</target>
        </trans-unit>
        <trans-unit id="b6c95e2580609775eb2b7302ad50c369810daef6" translate="yes" xml:space="preserve">
          <source>Django</source>
          <target state="translated">Django</target>
        </trans-unit>
        <trans-unit id="4e3d01f1de1288ed409125614e1df34f7c6c1cbd" translate="yes" xml:space="preserve">
          <source>Does a typecheck and dispatches to &lt;a href=&quot;#jinja2.Environment.select_template&quot;&gt;&lt;code&gt;select_template()&lt;/code&gt;&lt;/a&gt; if an iterable of template names is given, otherwise to &lt;a href=&quot;#jinja2.Environment.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">如果给定了模板名称的可迭代名称，则进行类型&lt;a href=&quot;#jinja2.Environment.select_template&quot;&gt; &lt;code&gt;select_template()&lt;/code&gt; &lt;/a&gt;并调度到select_template（），否则调度给&lt;a href=&quot;#jinja2.Environment.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bdf9d1feb6e3b49fe3d8e2c87aacc6c725c6f105" translate="yes" xml:space="preserve">
          <source>Dump the bytecode into the file or file like object passed.</source>
          <target state="translated">将字节码转储到文件或类似文件的对象中。</target>
        </trans-unit>
        <trans-unit id="4ca40d448f89316162bba2fe2d5973b44a45a36b" translate="yes" xml:space="preserve">
          <source>Dump the complete stream into a file or file-like object. Per default unicode strings are written, if you want to encode before writing specify an &lt;code&gt;encoding&lt;/code&gt;.</source>
          <target state="translated">将整个流转储到文件或类似文件的对象中。默认情况下会写入unicode字符串，如果要在写入之前进行编码，请指定 &lt;code&gt;encoding&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="925ed2bb8f5e61faf013850c5f67a1ffc639af1f" translate="yes" xml:space="preserve">
          <source>Dumps a structure to JSON so that it&amp;rsquo;s safe to use in &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags. It accepts the same arguments and returns a JSON string. Note that this is available in templates through the &lt;code&gt;|tojson&lt;/code&gt; filter which will also mark the result as safe. Due to how this function escapes certain characters this is safe even if used outside of &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">将结构转储到JSON，以便可以在 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标记中安全使用。它接受相同的参数并返回JSON字符串。请注意，可以通过 &lt;code&gt;|tojson&lt;/code&gt; 过滤器在模板中使用它，该过滤器还将结果标记为安全。由于此函数如何转义某些字符，因此即使在 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标记之外使用也可以保证安全。</target>
        </trans-unit>
        <trans-unit id="7b74ee4afb836191f6495e846debe4cdcbd26d7f" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;None&lt;/code&gt; or an unicode string with the error message for the undefined object.</source>
          <target state="translated">任一 &lt;code&gt;None&lt;/code&gt; 或Unicode字符串与用于未定义的对象的错误消息。</target>
        </trans-unit>
        <trans-unit id="98542f6dececcc52bdff58700bfe26e60b8c96a8" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;None&lt;/code&gt; or the owner object that caused the undefined object to be created (for example because an attribute does not exist).</source>
          <target state="translated">任一 &lt;code&gt;None&lt;/code&gt; 或所有者对象导致要创建的未定义的对象（例如，因为一个属性不存在）。</target>
        </trans-unit>
        <trans-unit id="5f4c368d3f66f4102699fbfa820d6f85dd228c67" translate="yes" xml:space="preserve">
          <source>Enable buffering. Buffer &lt;code&gt;size&lt;/code&gt; items before yielding them.</source>
          <target state="translated">启用缓冲。在产生 &lt;code&gt;size&lt;/code&gt; 之前缓冲大小的项目。</target>
        </trans-unit>
        <trans-unit id="6852774d39235701e2bf4c8f944a95ffa9434146" translate="yes" xml:space="preserve">
          <source>Enforce HTML escaping. This will probably double escape variables.</source>
          <target state="translated">执行HTML转义。这可能会使转义变量加倍。</target>
        </trans-unit>
        <trans-unit id="0d41854ba5e6a4280582935029cd18e9992ce5a6" translate="yes" xml:space="preserve">
          <source>Environment Methods</source>
          <target state="translated">环境方法</target>
        </trans-unit>
        <trans-unit id="d494e3c9df4c70e2d8b8564f86a0350a027c3c32" translate="yes" xml:space="preserve">
          <source>Escape a string. Calls &lt;a href=&quot;../templates/index#escape&quot;&gt;&lt;code&gt;escape()&lt;/code&gt;&lt;/a&gt; and ensures that for subclasses the correct type is returned.</source>
          <target state="translated">转义字符串。调用&lt;a href=&quot;../templates/index#escape&quot;&gt; &lt;code&gt;escape()&lt;/code&gt; &lt;/a&gt;并确保为子类返回正确的类型。</target>
        </trans-unit>
        <trans-unit id="2779ea444cb47200f1b0085d04662b33c09fc23f" translate="yes" xml:space="preserve">
          <source>Escaping</source>
          <target state="translated">Escaping</target>
        </trans-unit>
        <trans-unit id="bdd249af4f2a8c7063833e446277863909fd621b" translate="yes" xml:space="preserve">
          <source>Escaping everything except for safe values will also mean that Jinja is escaping variables known to not include HTML (e.g. numbers, booleans) which can be a huge performance hit.</source>
          <target state="translated">除了安全值之外,对所有的东西都进行转义,这也意味着Jinja对已知的不包括HTML的变量进行转义(如数字、布尔运算),这可能会对性能造成巨大的影响。</target>
        </trans-unit>
        <trans-unit id="27dc027e6d9f31fb205a71f0909c724d9b19f695" translate="yes" xml:space="preserve">
          <source>Evaluation Context</source>
          <target state="translated">评价背景</target>
        </trans-unit>
        <trans-unit id="8095cdfeb9bac3f7c6a55a50f6d7a9b4e9914192" translate="yes" xml:space="preserve">
          <source>Every template object has a few methods and members that are guaranteed to exist. However it&amp;rsquo;s important that a template object should be considered immutable. Modifications on the object are not supported.</source>
          <target state="translated">每个模板对象都有一些保证存在的方法和成员。但是，重要的是应将模板对象视为不可变的。不支持对该对象的修改。</target>
        </trans-unit>
        <trans-unit id="e0b448024951647165cdec0c460725208f2f5d3a" translate="yes" xml:space="preserve">
          <source>Everything between two brackets is a list. Lists are useful for storing sequential data to be iterated over. For example, you can easily create a list of links using lists and tuples for (and with) a for loop:</source>
          <target state="translated">两个括号之间的所有内容都是一个列表。列表对于存储需要迭代的顺序数据非常有用。例如,你可以很容易地使用列表和tuple for(以及使用)for循环创建一个链接列表。</target>
        </trans-unit>
        <trans-unit id="d36ef865b672bd54f8fba53b608ddf569fd3129e" translate="yes" xml:space="preserve">
          <source>Everything between two double or single quotes is a string. They are useful whenever you need a string in the template (e.g. as arguments to function calls and filters, or just to extend or include a template).</source>
          <target state="translated">两个双引号或单引号之间的所有内容都是字符串。每当你需要在模板中使用字符串时,它们都很有用(例如,作为函数调用和过滤器的参数,或者只是为了扩展或包含一个模板)。</target>
        </trans-unit>
        <trans-unit id="b0dd7cccda4409d86c406a79a5b19e7227924138" translate="yes" xml:space="preserve">
          <source>Example Extensions</source>
          <target state="translated">扩展示例</target>
        </trans-unit>
        <trans-unit id="81ca082f8ac23dd65c9942e8931265a491d23a70" translate="yes" xml:space="preserve">
          <source>Example configuration to turn it on at all times except if the template ends with &lt;code&gt;.txt&lt;/code&gt;:</source>
          <target state="translated">始终打开它的示例配置，除非模板以 &lt;code&gt;.txt&lt;/code&gt; 结尾：</target>
        </trans-unit>
        <trans-unit id="60fb5310cca4479e22eebd97866a669544e5998d" translate="yes" xml:space="preserve">
          <source>Example to change the &lt;code&gt;autoescape&lt;/code&gt; setting:</source>
          <target state="translated">更改自动 &lt;code&gt;autoescape&lt;/code&gt; 设置的示例：</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">使用实例。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>
        </trans-unit>
        <trans-unit id="4d450dfcf6119b9883ce593a25586d5f15fd4233" translate="yes" xml:space="preserve">
          <source>Expect a given token type and return it. This accepts the same argument as &lt;a href=&quot;#jinja2.lexer.Token.test&quot;&gt;&lt;code&gt;jinja2.lexer.Token.test()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">期望给定的令牌类型并返回它。这接受与&lt;a href=&quot;#jinja2.lexer.Token.test&quot;&gt; &lt;code&gt;jinja2.lexer.Token.test()&lt;/code&gt; &lt;/a&gt;相同的参数。</target>
        </trans-unit>
        <trans-unit id="d9c4f2202566f51697b377f90555653846292193" translate="yes" xml:space="preserve">
          <source>Expression Statement</source>
          <target state="translated">表达式声明</target>
        </trans-unit>
        <trans-unit id="ae5fccd8dcd8fc317f8edfc8259af86cd2967a29" translate="yes" xml:space="preserve">
          <source>Expressions</source>
          <target state="translated">Expressions</target>
        </trans-unit>
        <trans-unit id="b6ccdb5c03d058564f43be187c3d3771b90188e4" translate="yes" xml:space="preserve">
          <source>Extends</source>
          <target state="translated">Extends</target>
        </trans-unit>
        <trans-unit id="659087d3ca23db6ae11e0a43579b5f4a260dda11" translate="yes" xml:space="preserve">
          <source>Extension</source>
          <target state="translated">Extension</target>
        </trans-unit>
        <trans-unit id="1c91c335a6e29bf13a2ecd2e1e9e63d118f37df0" translate="yes" xml:space="preserve">
          <source>Extension API</source>
          <target state="translated">扩展API</target>
        </trans-unit>
        <trans-unit id="656bcfe284e2da39c77d4fdab55b16ad3c654719" translate="yes" xml:space="preserve">
          <source>Extensions</source>
          <target state="translated">Extensions</target>
        </trans-unit>
        <trans-unit id="065374c3efd57706bef9cfbc4847be9b65fb7a67" translate="yes" xml:space="preserve">
          <source>Extensions always have to extend the &lt;a href=&quot;#jinja2.ext.Extension&quot;&gt;&lt;code&gt;jinja2.ext.Extension&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">扩展总是必须扩展&lt;a href=&quot;#jinja2.ext.Extension&quot;&gt; &lt;code&gt;jinja2.ext.Extension&lt;/code&gt; &lt;/a&gt;类：</target>
        </trans-unit>
        <trans-unit id="4cebc336bed84712d6270d06394af02e23948cb4" translate="yes" xml:space="preserve">
          <source>Extensions are added to the Jinja environment at creation time. Once the environment is created additional extensions cannot be added. To add an extension pass a list of extension classes or import paths to the &lt;code&gt;extensions&lt;/code&gt; parameter of the &lt;a href=&quot;../api/index#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt; constructor. The following example creates a Jinja environment with the i18n extension loaded:</source>
          <target state="translated">在创建时将扩展添加到Jinja环境。创建环境后，将无法添加其他扩展。要添加扩展，请传递扩展类列表或将路径导入到&lt;a href=&quot;../api/index#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;构造函数的 &lt;code&gt;extensions&lt;/code&gt; 参数。以下示例创建一个加载了i18n扩展名的Jinja环境：</target>
        </trans-unit>
        <trans-unit id="a0598b6d7979675058eb2bb815181d126f0f31d8" translate="yes" xml:space="preserve">
          <source>Extensions can be used to add extra functionality to the Jinja template system at the parser level. Custom extensions are bound to an environment but may not store environment specific data on &lt;code&gt;self&lt;/code&gt;. The reason for this is that an extension can be bound to another environment (for overlays) by creating a copy and reassigning the &lt;code&gt;environment&lt;/code&gt; attribute.</source>
          <target state="translated">扩展程序可用于在解析器级别向Jinja模板系统添加额外的功能。自定义扩展名绑定到环境，但不能在其 &lt;code&gt;self&lt;/code&gt; 上存储环境特定的数据。原因是扩展可以通过创建副本并重新分配 &lt;code&gt;environment&lt;/code&gt; 属性来绑定到另一个环境（用于覆盖）。</target>
        </trans-unit>
        <trans-unit id="38937ad36038d29e8aa1a22c86ded8a7e7d27224" translate="yes" xml:space="preserve">
          <source>Extract localizable strings from the given template node or source.</source>
          <target state="translated">从给定的模板节点或源提取可本地化的字符串。</target>
        </trans-unit>
        <trans-unit id="5df81ffa82179b458e1d55e350db9d88805a69b2" translate="yes" xml:space="preserve">
          <source>Features:</source>
          <target state="translated">Features:</target>
        </trans-unit>
        <trans-unit id="b3da45d3f64a4f2c3aa61d7403eb11f811d70a0f" translate="yes" xml:space="preserve">
          <source>Filter sections allow you to apply regular Jinja filters on a block of template data. Just wrap the code in the special &lt;code&gt;filter&lt;/code&gt; section:</source>
          <target state="translated">过滤器部分允许您将常规Jinja过滤器应用于模板数据块。只需将代码包装在特殊的 &lt;code&gt;filter&lt;/code&gt; 部分中：</target>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="424b01b5d99422a8a55ddbc4872e2e1624c4a68a" translate="yes" xml:space="preserve">
          <source>Filters a sequence of objects by applying a test to each object, and only selecting the objects with the test succeeding.</source>
          <target state="translated">通过对每个对象进行测试来过滤对象序列,并且只选择测试成功的对象。</target>
        </trans-unit>
        <trans-unit id="2e4d9316b65813013de91d45eb73b2b572046a07" translate="yes" xml:space="preserve">
          <source>Filters a sequence of objects by applying a test to each object, and rejecting the objects with the test succeeding.</source>
          <target state="translated">通过对每个对象进行测试来过滤对象序列,并拒绝测试成功的对象。</target>
        </trans-unit>
        <trans-unit id="02ae4db8da5a07bf3929e8da5c6d3e7d420f0668" translate="yes" xml:space="preserve">
          <source>Filters a sequence of objects by applying a test to the specified attribute of each object, and only selecting the objects with the test succeeding.</source>
          <target state="translated">通过对每个对象的指定属性进行测试来过滤对象序列,并且只选择测试成功的对象。</target>
        </trans-unit>
        <trans-unit id="af943f49170dd8da3448a56b5525dbd5869b7ff2" translate="yes" xml:space="preserve">
          <source>Filters a sequence of objects by applying a test to the specified attribute of each object, and rejecting the objects with the test succeeding.</source>
          <target state="translated">通过对每个对象的指定属性进行测试来过滤对象序列,并拒绝测试成功的对象。</target>
        </trans-unit>
        <trans-unit id="55b2923dfc10109a43592fa23b746f61f47ee94d" translate="yes" xml:space="preserve">
          <source>Filters and tests are looked up in separate namespaces and have slightly modified identifier syntax. Filters and tests may contain dots to group filters and tests by topic. For example it&amp;rsquo;s perfectly valid to add a function into the filter dict and call it &lt;code&gt;to.unicode&lt;/code&gt;. The regular expression for filter and test identifiers is &lt;code&gt;[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*`&lt;/code&gt;.</source>
          <target state="translated">过滤器和测试在单独的命名空间中查找，并且标识符语法稍有修改。筛选器和测试可能包含点，以按主题对筛选器和测试进行分组。例如，将函数添加到过滤器字典并将其调用为 &lt;code&gt;to.unicode&lt;/code&gt; 是完全有效的。过滤器和测试标识符的正则表达式为 &lt;code&gt;[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*`&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db3eec49d5967ac4578b14a8048d0e8d5d56c3fc" translate="yes" xml:space="preserve">
          <source>Filters can also be passed the current template context or environment. This is useful if a filter wants to return an undefined value or check the current &lt;code&gt;autoescape&lt;/code&gt; setting. For this purpose three decorators exist: &lt;a href=&quot;#jinja2.environmentfilter&quot;&gt;&lt;code&gt;environmentfilter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#jinja2.contextfilter&quot;&gt;&lt;code&gt;contextfilter()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#jinja2.evalcontextfilter&quot;&gt;&lt;code&gt;evalcontextfilter()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">筛选器也可以传递给当前模板上下文或环境。如果过滤器要返回未定义的值或检查当前的自动 &lt;code&gt;autoescape&lt;/code&gt; 设置，则此功能很有用。为此，存在三个装饰器：&lt;a href=&quot;#jinja2.environmentfilter&quot;&gt; &lt;code&gt;environmentfilter()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#jinja2.contextfilter&quot;&gt; &lt;code&gt;contextfilter()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#jinja2.evalcontextfilter&quot;&gt; &lt;code&gt;evalcontextfilter()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="adb96eed2687ad6fd0f8ee103c20ed02de48f782" translate="yes" xml:space="preserve">
          <source>Filters that accept arguments have parentheses around the arguments, just like a function call. For example: &lt;code&gt;{{ listx|join(', ') }}&lt;/code&gt; will join a list with commas (&lt;code&gt;str.join(', ', listx)&lt;/code&gt;).</source>
          <target state="translated">接受参数的过滤器在参数周围带有括号，就像函数调用一样。例如： &lt;code&gt;{{ listx|join(', ') }}&lt;/code&gt; 将以逗号连接列表（ &lt;code&gt;str.join(', ', listx)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1ef6a0e731e2c2aa9ae0ea013189f658a71a8b08" translate="yes" xml:space="preserve">
          <source>Find all the nodes of a given type. If the type is a tuple, the check is performed for any of the tuple items.</source>
          <target state="translated">查找给定类型的所有节点。如果类型是一个元组,则对任何一个元组项进行检查。</target>
        </trans-unit>
        <trans-unit id="17fa13ae1e1b136f1f877def703a3e1d4d533047" translate="yes" xml:space="preserve">
          <source>Find the first node of a given type. If no such node exists the return value is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">查找给定类型的第一个节点。如果不存在这样的节点，则返回值为 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d986a88110743f7d68976e13475d105fc149cd92" translate="yes" xml:space="preserve">
          <source>Finds all the referenced templates from the AST. This will return an iterator over all the hardcoded template extensions, inclusions and imports. If dynamic inheritance or inclusion is used, &lt;code&gt;None&lt;/code&gt; will be yielded.</source>
          <target state="translated">从AST查找所有引用的模板。这将返回所有硬编码模板扩展，包含和导入的迭代器。如果使用动态继承或包含，则不会产生 &lt;code&gt;None&lt;/code&gt; 结果。</target>
        </trans-unit>
        <trans-unit id="01eeb51e06c509afb8298d4df305255595d93606" translate="yes" xml:space="preserve">
          <source>Finds all the templates the loader can find, compiles them and stores them in &lt;code&gt;target&lt;/code&gt;. If &lt;code&gt;zip&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, instead of in a zipfile, the templates will be stored in a directory. By default a deflate zip algorithm is used. To switch to the stored algorithm, &lt;code&gt;zip&lt;/code&gt; can be set to &lt;code&gt;'stored'&lt;/code&gt;.</source>
          <target state="translated">查找加载程序可以找到的所有模板，将它们编译并将其存储在 &lt;code&gt;target&lt;/code&gt; 中。如果 &lt;code&gt;zip&lt;/code&gt; 为 &lt;code&gt;None&lt;/code&gt; ，则模板将存储在目录中，而不是zipfile中。默认情况下，使用deflate zip算法。要切换到存储的算法，可以将 &lt;code&gt;zip&lt;/code&gt; 设置为 &lt;code&gt;'stored'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="51f102f83bdef0f8b3d4c499c720e01ee7ee7f6b" translate="yes" xml:space="preserve">
          <source>Floating point numbers can be written using a &amp;lsquo;.&amp;rsquo; as a decimal mark. They can also be written in scientific notation with an upper or lower case &amp;lsquo;e&amp;rsquo; to indicate the exponent part. The &amp;lsquo;_&amp;rsquo; character can be used to separate groups for legibility, but cannot be used in the exponent part.</source>
          <target state="translated">浮点数可以使用'。'书写。作为小数点。也可以用科学记数法将它们写成大写或小写的&amp;ldquo; e&amp;rdquo;以表示指数部分。&amp;ldquo; _&amp;rdquo;字符可用于分隔各组，以提高可读性，但不能在指数部分中使用。</target>
        </trans-unit>
        <trans-unit id="f7880600348a091a43e2a84906d6002820643108" translate="yes" xml:space="preserve">
          <source>For</source>
          <target state="translated">For</target>
        </trans-unit>
        <trans-unit id="53930c066f6a1f91e71dcf35d76ec7239b4ef601" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;if&lt;/code&gt; statements, &lt;code&gt;for&lt;/code&gt; filtering, and &lt;code&gt;if&lt;/code&gt; expressions, it can be useful to combine multiple expressions:</source>
          <target state="translated">对于 &lt;code&gt;if&lt;/code&gt; 语句， &lt;code&gt;for&lt;/code&gt; 过滤，并且 &lt;code&gt;if&lt;/code&gt; 表达式，它可以是有用的多个表达式组合：</target>
        </trans-unit>
        <trans-unit id="799545169b43e8a891dcd6c4073699e523937628" translate="yes" xml:space="preserve">
          <source>For a more complex example you can provide a hint. For example the &lt;a href=&quot;../templates/index#first&quot;&gt;&lt;code&gt;first()&lt;/code&gt;&lt;/a&gt; filter creates an undefined object that way:</source>
          <target state="translated">对于更复杂的示例，您可以提供提示。例如，&lt;a href=&quot;../templates/index#first&quot;&gt; &lt;code&gt;first()&lt;/code&gt; &lt;/a&gt;过滤器以这种方式创建一个未定义的对象：</target>
        </trans-unit>
        <trans-unit id="d84a17afaecaa49153228226dbbc3265d59ef08b" translate="yes" xml:space="preserve">
          <source>For a web application that is available in multiple languages but gives all the users the same language (for example, multilingual forum software installed for a French community), the translation may be installed when the environment is created.</source>
          <target state="translated">对于一个可以使用多种语言,但给所有用户提供相同语言的网络应用(例如,为一个法语社区安装的多语言论坛软件),可以在创建环境时安装翻译。</target>
        </trans-unit>
        <trans-unit id="9ded0d9e43d486a6042a313dd1838f7fdf7a4285" translate="yes" xml:space="preserve">
          <source>For bigger sections, it makes sense to mark a block &lt;code&gt;raw&lt;/code&gt;. For example, to include example Jinja syntax in a template, you can use this snippet:</source>
          <target state="translated">对于较大的部分，将块标记为 &lt;code&gt;raw&lt;/code&gt; 是有意义的。例如，要将示例Jinja语法包含在模板中，可以使用以下代码段：</target>
        </trans-unit>
        <trans-unit id="9d63767b85cf0b30e1a788fa06a403794481c7a3" translate="yes" xml:space="preserve">
          <source>For every string found this function yields a &lt;code&gt;(lineno, function,
message)&lt;/code&gt; tuple, where:</source>
          <target state="translated">对于找到的每个字符串，此函数都会产生一个 &lt;code&gt;(lineno, function, message)&lt;/code&gt; 元组，其中：</target>
        </trans-unit>
        <trans-unit id="7525926bda2cd2c4f127dc5496bdce0148100e9b" translate="yes" xml:space="preserve">
          <source>For example in the filter &lt;code&gt;{{ 42|myfilter(23) }}&lt;/code&gt; the function would be called with &lt;code&gt;myfilter(42, 23)&lt;/code&gt;. Here for example a simple filter that can be applied to datetime objects to format them:</source>
          <target state="translated">例如，在过滤器 &lt;code&gt;{{ 42|myfilter(23) }}&lt;/code&gt; ，将使用 &lt;code&gt;myfilter(42, 23)&lt;/code&gt; 调用该函数。例如，这里有一个简单的过滤器，可以将其应用于日期时间对象以对其进行格式化：</target>
        </trans-unit>
        <trans-unit id="5637f72e778c9d6d0d37f54af5a0743f844edf87" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;{{ name|striptags|title }}&lt;/code&gt; will remove all HTML Tags from variable &lt;code&gt;name&lt;/code&gt; and title-case the output (&lt;code&gt;title(striptags(name))&lt;/code&gt;).</source>
          <target state="translated">例如， &lt;code&gt;{{ name|striptags|title }}&lt;/code&gt; 将从变量 &lt;code&gt;name&lt;/code&gt; 删除所有HTML标记，并在输出（ &lt;code&gt;title(striptags(name))&lt;/code&gt; ）加上标题的情况下将其删除。</target>
        </trans-unit>
        <trans-unit id="fa0a2c89c1036cfaddd748a84b028ad791f530ad" translate="yes" xml:space="preserve">
          <source>For example, a list of &lt;code&gt;User&lt;/code&gt; objects with a &lt;code&gt;city&lt;/code&gt; attribute can be rendered in groups. In this example, &lt;code&gt;grouper&lt;/code&gt; refers to the &lt;code&gt;city&lt;/code&gt; value of the group.</source>
          <target state="translated">例如，可以将具有 &lt;code&gt;city&lt;/code&gt; 属性的 &lt;code&gt;User&lt;/code&gt; 对象列表呈现为组。在此示例中， &lt;code&gt;grouper&lt;/code&gt; 指的是该组的 &lt;code&gt;city&lt;/code&gt; 价值。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="7a06778b95c2388d01e9527a89467c5a23a2afd8" translate="yes" xml:space="preserve">
          <source>For filtered nodes an expression can be stored as &lt;code&gt;test&lt;/code&gt;, otherwise &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">对于过滤的节点，可以将表达式存储为 &lt;code&gt;test&lt;/code&gt; ，否则可以存储为 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ebc6e49c190bdfedba86090c372c0f2e627a7e2" translate="yes" xml:space="preserve">
          <source>For intercepted binary operator calls (&lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.intercepted_binops&quot;&gt;&lt;code&gt;intercepted_binops()&lt;/code&gt;&lt;/a&gt;) this function is executed instead of the builtin operator. This can be used to fine tune the behavior of certain operators.</source>
          <target state="translated">对于拦截的二进制运算符调用（&lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.intercepted_binops&quot;&gt; &lt;code&gt;intercepted_binops()&lt;/code&gt; &lt;/a&gt;），此函数将代替内置的运算符执行。这可用于微调某些运算符的行为。</target>
        </trans-unit>
        <trans-unit id="3b6a92849a83ee884c1eb677db553af66c728c8a" translate="yes" xml:space="preserve">
          <source>For intercepted unary operator calls (&lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.intercepted_unops&quot;&gt;&lt;code&gt;intercepted_unops()&lt;/code&gt;&lt;/a&gt;) this function is executed instead of the builtin operator. This can be used to fine tune the behavior of certain operators.</source>
          <target state="translated">对于拦截的一元运算符调用（&lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.intercepted_unops&quot;&gt; &lt;code&gt;intercepted_unops()&lt;/code&gt; &lt;/a&gt;），此函数将代替内置运算符执行。这可用于微调某些运算符的行为。</target>
        </trans-unit>
        <trans-unit id="eb1475a97627e62303a82185e19a08da4356cda4" translate="yes" xml:space="preserve">
          <source>For loop unpacking and some other things like multiple arguments for subscripts. Like for &lt;a href=&quot;#jinja2.nodes.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt;&lt;code&gt;ctx&lt;/code&gt; specifies if the tuple is used for loading the names or storing.</source>
          <target state="translated">对于循环解压缩和其他一些事情，例如下标的多个参数。像&lt;a href=&quot;#jinja2.nodes.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;一样， &lt;code&gt;ctx&lt;/code&gt; 指定元组是否用于加载名称或存储。</target>
        </trans-unit>
        <trans-unit id="56a26feae834a727a1430756cf54e09c4c1fc052" translate="yes" xml:space="preserve">
          <source>For maximum performance Jinja will let operators call directly the type specific callback methods. This means that it&amp;rsquo;s not possible to have this intercepted by overriding &lt;code&gt;Environment.call()&lt;/code&gt;. Furthermore a conversion from operator to special method is not always directly possible due to how operators work. For instance for divisions more than one special method exist.</source>
          <target state="translated">为了获得最佳性能，Jinja将允许操作员直接调用特定于类型的回调方法。这意味着无法通过重写 &lt;code&gt;Environment.call()&lt;/code&gt; 截获此内容。此外，由于操作员的工作方式，并非总是可能直接从操作员转换为特殊方法。例如，对于除法，存在不止一种特殊方法。</target>
        </trans-unit>
        <trans-unit id="f3c486b95c4399529dc8cc3a06a2afff5d7b5756" translate="yes" xml:space="preserve">
          <source>For more details about Unicode in Python have a look at the excellent &lt;a href=&quot;https://docs.python.org/3/howto/unicode.html&quot;&gt;Unicode documentation&lt;/a&gt;.</source>
          <target state="translated">有关Python中Unicode的更多详细信息，请参阅出色的&lt;a href=&quot;https://docs.python.org/3/howto/unicode.html&quot;&gt;Unicode文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d730046373cd8cbc8f8e4532f18ec3f9585cbbfa" translate="yes" xml:space="preserve">
          <source>For more information have a look at the repr of &lt;a href=&quot;../api/index#jinja2.Environment.parse&quot;&gt;&lt;code&gt;jinja2.Environment.parse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请&lt;a href=&quot;../api/index#jinja2.Environment.parse&quot;&gt; &lt;code&gt;jinja2.Environment.parse()&lt;/code&gt; &lt;/a&gt;的代表。</target>
        </trans-unit>
        <trans-unit id="e2a32a4fb020f2501f7b4dca2074fd6dd3600a40" translate="yes" xml:space="preserve">
          <source>For multiple branches, &lt;code&gt;elif&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; can be used like in Python. You can use more complex &lt;a href=&quot;#expressions&quot;&gt;Expressions&lt;/a&gt; there, too:</source>
          <target state="translated">对于多个分支，可以像在Python中一样使用 &lt;code&gt;elif&lt;/code&gt; 和 &lt;code&gt;else&lt;/code&gt; 。您也可以在其中使用更复杂的&lt;a href=&quot;#expressions&quot;&gt;表达式&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="9f9b44a3099f307504920053ee7e3dab1b013eb0" translate="yes" xml:space="preserve">
          <source>For security reasons this function operates case insensitive.</source>
          <target state="translated">出于安全考虑,该函数的操作不区分大小写。</target>
        </trans-unit>
        <trans-unit id="aace115f25b7ff6025792ace367db481125cc893" translate="yes" xml:space="preserve">
          <source>For the sake of convenience, &lt;code&gt;foo.bar&lt;/code&gt; in Jinja does the following things on the Python layer:</source>
          <target state="translated">为了方便起见，Jinja中的 &lt;code&gt;foo.bar&lt;/code&gt; 在Python层上执行以下操作：</target>
        </trans-unit>
        <trans-unit id="0646f7935ef319d62908c99b74b3634a22eb095a" translate="yes" xml:space="preserve">
          <source>For very large templates it can be useful to not render the whole template at once but evaluate each statement after another and yield piece for piece. This method basically does exactly that and returns a generator that yields one item after another as unicode strings.</source>
          <target state="translated">对于非常大的模板来说,不一次性渲染整个模板,而是逐条评估每条语句,然后逐条产生。这个方法基本上就是这样做的,它返回一个生成器,生成一个又一个unicode字符串。</target>
        </trans-unit>
        <trans-unit id="28414bc5df98ba0312d57e35af3dee7711c32a64" translate="yes" xml:space="preserve">
          <source>Format the value like a &amp;lsquo;human-readable&amp;rsquo; file size (i.e. 13 kB, 4.1 MB, 102 Bytes, etc). Per default decimal prefixes are used (Mega, Giga, etc.), if the second parameter is set to &lt;code&gt;True&lt;/code&gt; the binary prefixes are used (Mebi, Gibi).</source>
          <target state="translated">将值格式化为&amp;ldquo;人类可读&amp;rdquo;的文件大小（即13 kB，4.1 MB，102字节等）。默认情况下使用十进制前缀（Mega，Giga等），如果第二个参数设置为 &lt;code&gt;True&lt;/code&gt; ，则使用二进制前缀（Mebi，Gibi）。</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">常问问题</target>
        </trans-unit>
        <trans-unit id="aa8d05d5653d441878a69c27426292a9daa82f86" translate="yes" xml:space="preserve">
          <source>From Jinja 2.2 onwards, you can mark an include with &lt;code&gt;ignore missing&lt;/code&gt;; in which case Jinja will ignore the statement if the template to be included does not exist. When combined with &lt;code&gt;with&lt;/code&gt; or &lt;code&gt;without context&lt;/code&gt;, it must be placed &lt;em&gt;before&lt;/em&gt; the context visibility statement. Here are some valid examples:</source>
          <target state="translated">从Jinja 2.2开始，您可以标记一个include， &lt;code&gt;ignore missing&lt;/code&gt; ；在这种情况下，如果要包含的模板不存在，Jinja将忽略该语句。与 &lt;code&gt;with&lt;/code&gt; 或 &lt;code&gt;without context&lt;/code&gt; 结合使用时，必须将其放在上下文可见性声明&lt;em&gt;之前&lt;/em&gt;。以下是一些有效的示例：</target>
        </trans-unit>
        <trans-unit id="8cea09bc14723f098213d4890d1d9ebff9817e92" translate="yes" xml:space="preserve">
          <source>Generates some lorem ipsum for the template. By default, five paragraphs of HTML are generated with each paragraph between 20 and 100 words. If html is False, regular text is returned. This is useful to generate simple contents for layout testing.</source>
          <target state="translated">为模板生成一些常识性的内容,默认情况下,生成5段HTML,每段在20到100字之间。默认情况下,生成5段HTML,每段20到100字。如果html为False,则返回常规文本。这对于生成简单的内容用于布局测试非常有用。</target>
        </trans-unit>
        <trans-unit id="8d9b405e821842b4ac360b96aab2d2b761bf77bd" translate="yes" xml:space="preserve">
          <source>Get a new dict with the exported variables.</source>
          <target state="translated">用导出的变量获取一个新的dict。</target>
        </trans-unit>
        <trans-unit id="85a7897ee786d412fbc2f90c9cb2bac9c5f37414" translate="yes" xml:space="preserve">
          <source>Get an attribute of an object. (See &lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;)</source>
          <target state="translated">获取对象的属性。（请参阅&lt;a href=&quot;#variables&quot;&gt;变量&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="f257fe597c2c0aca3221d19531dd033bf911e92d" translate="yes" xml:space="preserve">
          <source>Get an attribute of an object. &lt;code&gt;foo|attr(&quot;bar&quot;)&lt;/code&gt; works like &lt;code&gt;foo.bar&lt;/code&gt; just that always an attribute is returned and items are not looked up.</source>
          <target state="translated">获取对象的属性。 &lt;code&gt;foo|attr(&quot;bar&quot;)&lt;/code&gt; 就像 &lt;code&gt;foo.bar&lt;/code&gt; 一样，只是总是返回一个属性，并且不查找任何项。</target>
        </trans-unit>
        <trans-unit id="930bbdd8273732130a8a4b7c9699c60a9f2790c8" translate="yes" xml:space="preserve">
          <source>Get an attribute or item from an expression and prefer the item.</source>
          <target state="translated">从一个表达式中获取一个属性或项目,并优选该项目。</target>
        </trans-unit>
        <trans-unit id="c5b065dafb266ec84940e42c26a719d929e42e05" translate="yes" xml:space="preserve">
          <source>Get an attribute or item from an expression that is a ascii-only bytestring and prefer the attribute.</source>
          <target state="translated">从一个表达式中获取一个属性或项目,该表达式是一个仅有ascii的bytestring,并优选属性。</target>
        </trans-unit>
        <trans-unit id="d6992907aece81beb4fc876dfe8e61555d03d861" translate="yes" xml:space="preserve">
          <source>Get the template source, filename and reload helper for a template. It&amp;rsquo;s passed the environment and template name and has to return a tuple in the form &lt;code&gt;(source, filename, uptodate)&lt;/code&gt; or raise a &lt;code&gt;TemplateNotFound&lt;/code&gt; error if it can&amp;rsquo;t locate the template.</source>
          <target state="translated">获取模板源，文件名并重新加载模板的帮助器。它已传递环境和模板名称，并且必须返回格式 &lt;code&gt;(source, filename, uptodate)&lt;/code&gt; 的元组，或者如果找不到模板，则会引发 &lt;code&gt;TemplateNotFound&lt;/code&gt; 错误。</target>
        </trans-unit>
        <trans-unit id="8e7b940617ac4a931c7b3cb9947a304799085b18" translate="yes" xml:space="preserve">
          <source>Given a logger object this returns a new undefined class that will log certain failures. It will log iterations and printing. If no logger is given a default logger is created.</source>
          <target state="translated">给定一个记录器对象,这将返回一个新的未定义的类,它将记录某些失败。它将记录迭代和打印。如果没有给定记录器,则会创建一个默认的记录器。</target>
        </trans-unit>
        <trans-unit id="bf33da4f3044438ea36933bb28078205a2834468" translate="yes" xml:space="preserve">
          <source>Go one token ahead and return the old one.</source>
          <target state="translated">先去一块令牌,再还旧的。</target>
        </trans-unit>
        <trans-unit id="2cd093d50b560982f7b83a977f66098e05329c19" translate="yes" xml:space="preserve">
          <source>Got n tokens ahead.</source>
          <target state="translated">有N个代币在前面。</target>
        </trans-unit>
        <trans-unit id="e36f31e3dfe51cf25186f434ba612910d711b1a7" translate="yes" xml:space="preserve">
          <source>Group a sequence of objects by an attribute using Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/itertools.html#itertools.groupby&quot;&gt;&lt;code&gt;itertools.groupby()&lt;/code&gt;&lt;/a&gt;. The attribute can use dot notation for nested access, like &lt;code&gt;&quot;address.city&quot;&lt;/code&gt;. Unlike Python&amp;rsquo;s &lt;code&gt;groupby&lt;/code&gt;, the values are sorted first so only one group is returned for each unique value.</source>
          <target state="translated">使用Python的&lt;a href=&quot;https://docs.python.org/3/library/itertools.html#itertools.groupby&quot;&gt; &lt;code&gt;itertools.groupby()&lt;/code&gt; &lt;/a&gt;按属性对对象序列进行分组。该属性可以使用点表示法进行嵌套访问，例如 &lt;code&gt;&quot;address.city&quot;&lt;/code&gt; 。与Python的 &lt;code&gt;groupby&lt;/code&gt; 不同，这些值首先进行排序，因此每个唯一值仅返回一组。</target>
        </trans-unit>
        <trans-unit id="24612093a73d54eb6853f0fcb0bdb396d8b5d87d" translate="yes" xml:space="preserve">
          <source>HTML Escaping</source>
          <target state="translated">HTML逃逸</target>
        </trans-unit>
        <trans-unit id="c78f3b979d2d44ce3d83c30dc0c6d69b0b0c1e26" translate="yes" xml:space="preserve">
          <source>Here a list of the builtin loaders Jinja provides:</source>
          <target state="translated">以下是Jinja提供的内置加载器列表。</target>
        </trans-unit>
        <trans-unit id="4325c8da1ca2d3459b17ebd39a14157af187540f" translate="yes" xml:space="preserve">
          <source>Here a recommended setup that enables autoescaping for templates ending in &lt;code&gt;'.html'&lt;/code&gt;, &lt;code&gt;'.htm'&lt;/code&gt; and &lt;code&gt;'.xml'&lt;/code&gt; and disabling it by default for all other extensions. You can use the &lt;a href=&quot;#jinja2.select_autoescape&quot;&gt;&lt;code&gt;select_autoescape()&lt;/code&gt;&lt;/a&gt; function for this:</source>
          <target state="translated">这里是一个推荐的设置，该设置允许对以 &lt;code&gt;'.html'&lt;/code&gt; ， &lt;code&gt;'.htm'&lt;/code&gt; .htm '和 &lt;code&gt;'.xml'&lt;/code&gt; 结尾的模板进行自动转义，并默认情况下对所有其他扩展名禁用它。您可以&lt;a href=&quot;#jinja2.select_autoescape&quot;&gt; &lt;code&gt;select_autoescape()&lt;/code&gt; &lt;/a&gt;使用select_autoescape（）函数：</target>
        </trans-unit>
        <trans-unit id="30b6f9525e6a81167851ff19281b4c55e532c4f8" translate="yes" xml:space="preserve">
          <source>Here a simple test that checks if a variable is a prime number:</source>
          <target state="translated">这里有一个简单的测试,检查一个变量是否是质数。</target>
        </trans-unit>
        <trans-unit id="f4204383808a92586106a2ceddb4282eb1788d59" translate="yes" xml:space="preserve">
          <source>Here a small example filter that breaks a text into HTML line breaks and paragraphs and marks the return value as safe HTML string if autoescaping is enabled:</source>
          <target state="translated">这里有一个小的过滤器,它可以将文本分割成HTML换行符和段落,如果启用了自动转码,则将返回值标记为安全的HTML字符串。</target>
        </trans-unit>
        <trans-unit id="2cb7bb66b81930c1e440c3b745bedf77c50d351e" translate="yes" xml:space="preserve">
          <source>Here an example that assigns the current template name to a variable named &lt;code&gt;foo&lt;/code&gt;:</source>
          <target state="translated">这是一个将当前模板名称分配给名为 &lt;code&gt;foo&lt;/code&gt; 的变量的示例：</target>
        </trans-unit>
        <trans-unit id="8e4c2eb299ddb58f7d0bcc739a08f4370617b58d" translate="yes" xml:space="preserve">
          <source>Here are the possible initialization parameters:</source>
          <target state="translated">以下是可能的初始化参数。</target>
        </trans-unit>
        <trans-unit id="33c4c57c33f32b1bb1520956912fc12f587f9883" translate="yes" xml:space="preserve">
          <source>Here are two examples:</source>
          <target state="translated">下面是两个例子。</target>
        </trans-unit>
        <trans-unit id="612bbb86ce140baa839057e3ff7c44ef2847b00f" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a loop that skips every second item:</source>
          <target state="translated">这是一个跳过第二个项目的循环：</target>
        </trans-unit>
        <trans-unit id="02d33ece3eee8aa2eaf60ad5ae889e9b597e5055" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a small example of a macro that renders a form element:</source>
          <target state="translated">这是呈现表单元素的宏的一个小示例：</target>
        </trans-unit>
        <trans-unit id="d4d0769adb614910de6f3eb9f2058790b95f0c79" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of how a call block can be used with arguments:</source>
          <target state="translated">这是一个如何将调用块与参数一起使用的示例：</target>
        </trans-unit>
        <trans-unit id="ffacea127ea574868a776e096fb42f829e075451" translate="yes" xml:space="preserve">
          <source>High Level API</source>
          <target state="translated">高层API</target>
        </trans-unit>
        <trans-unit id="22798d625d5636cfeb1ba1a757325bd8139b8a78" translate="yes" xml:space="preserve">
          <source>Highlighting Active Menu Items</source>
          <target state="translated">高亮显示活动菜单项目</target>
        </trans-unit>
        <trans-unit id="e6629abb17ef5329640d45af3574417e56d0bdd4" translate="yes" xml:space="preserve">
          <source>Holds an operator and an expression. The following operators are available: &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;//&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;eq&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;gteq&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;lteq&lt;/code&gt;, &lt;code&gt;ne&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, &lt;code&gt;notin&lt;/code&gt;</source>
          <target state="translated">包含一个运算符和一个表达式。可以使用以下运算符： &lt;code&gt;%&lt;/code&gt; ， &lt;code&gt;**&lt;/code&gt; ， &lt;code&gt;*&lt;/code&gt; ， &lt;code&gt;+&lt;/code&gt; ， &lt;code&gt;-&lt;/code&gt; ， &lt;code&gt;//&lt;/code&gt; ， &lt;code&gt;/&lt;/code&gt; ， &lt;code&gt;eq&lt;/code&gt; ， &lt;code&gt;gt&lt;/code&gt; ， &lt;code&gt;gteq&lt;/code&gt; ， &lt;code&gt;in&lt;/code&gt; ， &lt;code&gt;lt&lt;/code&gt; ， &lt;code&gt;lteq&lt;/code&gt; ， &lt;code&gt;ne&lt;/code&gt; ， &lt;code&gt;not&lt;/code&gt; ， &lt;code&gt;notin&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52d8e64a00524998bcf7d0ffc1bce17e8841e735" translate="yes" xml:space="preserve">
          <source>Holds evaluation time information. Custom attributes can be attached to it in extensions.</source>
          <target state="translated">保存评估时间信息。可以在扩展中附加自定义属性。</target>
        </trans-unit>
        <trans-unit id="4915b23f0b7b08562395a134906617f893361de7" translate="yes" xml:space="preserve">
          <source>How Compatible is Jinja with Django?</source>
          <target state="translated">Jinja与Django的兼容性如何?</target>
        </trans-unit>
        <trans-unit id="9530b21a65a13386e6c8b83812038c2f46bd1493" translate="yes" xml:space="preserve">
          <source>How fast is it?</source>
          <target state="translated">它有多快?</target>
        </trans-unit>
        <trans-unit id="a8879592e2064123dee4f679fda7255306c2597f" translate="yes" xml:space="preserve">
          <source>However, the name after the &lt;code&gt;endblock&lt;/code&gt; word must match the block name.</source>
          <target state="translated">但是， &lt;code&gt;endblock&lt;/code&gt; 字后面的名称必须与块名称匹配。</target>
        </trans-unit>
        <trans-unit id="751c68a3471b1c791efaee0a8e7c24ea0c266efd" translate="yes" xml:space="preserve">
          <source>If</source>
          <target state="translated">If</target>
        </trans-unit>
        <trans-unit id="f1798b52cde2e675709684b7da9bac4b34f2d6de" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#line-statements&quot;&gt;Line Statements&lt;/a&gt; are enabled, they strip leading whitespace automatically up to the beginning of the line.</source>
          <target state="translated">如果启用了&amp;ldquo;&lt;a href=&quot;#line-statements&quot;&gt;行语句&amp;rdquo;&lt;/a&gt;，它们将自动剥离前导空格直到行的开头。</target>
        </trans-unit>
        <trans-unit id="dbe80db574a24a0d79070262cf3b1b59f025bd40" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../extensions/index#newstyle-gettext&quot;&gt;New Style Gettext&lt;/a&gt; calls are activated, using placeholders is easier. Formatting is part of the &lt;code&gt;gettext&lt;/code&gt; call instead of using the &lt;code&gt;format&lt;/code&gt; filter.</source>
          <target state="translated">如果激活了&amp;ldquo;&lt;a href=&quot;../extensions/index#newstyle-gettext&quot;&gt;新样式Gettext&amp;rdquo;&lt;/a&gt;调用，则使用占位符会更容易。格式化是 &lt;code&gt;gettext&lt;/code&gt; 调用的一部分，而不是使用 &lt;code&gt;format&lt;/code&gt; 过滤器。</target>
        </trans-unit>
        <trans-unit id="d36aa6da0fcf9b351cc7aa9853723794d8ad6cdf" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;http://babel.pocoo.org/&quot;&gt;Babel&lt;/a&gt; is installed, see &lt;a href=&quot;https://jinja.palletsprojects.com/en/2.11.x/integration/#babel-integration&quot;&gt;Babel Integration&lt;/a&gt; to extract the strings.</source>
          <target state="translated">如果已安装&lt;a href=&quot;http://babel.pocoo.org/&quot;&gt;Babel&lt;/a&gt;，请参阅&lt;a href=&quot;https://jinja.palletsprojects.com/en/2.11.x/integration/#babel-integration&quot;&gt;Babel集成&lt;/a&gt;以提取字符串。</target>
        </trans-unit>
        <trans-unit id="ec41d053539c5a19c5e158159239fcbe17bfe49a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;newstyle&lt;/code&gt; is activated, the callables are wrapped to work like newstyle callables. See &lt;a href=&quot;#newstyle-gettext&quot;&gt;New Style Gettext&lt;/a&gt; for more information.</source>
          <target state="translated">如果激活了 &lt;code&gt;newstyle&lt;/code&gt; ，则可调用对象将被包装为像newstyle可调用对象一样工作。有关更多信息，请参见&lt;a href=&quot;#newstyle-gettext&quot;&gt;New Style Gettext&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b215c3279071570eeca62d7a0b8aa0f15618e5a7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;py_compile&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt; .pyc files will be written to the target instead of standard .py files. This flag does not do anything on pypy and Python 3 where pyc files are not picked up by itself and don&amp;rsquo;t give much benefit.</source>
          <target state="translated">如果 &lt;code&gt;py_compile&lt;/code&gt; 设置为 &lt;code&gt;True&lt;/code&gt; ,则将.pyc文件而不是标准.py文件写入目标。该标志在pypy和Python 3上不做任何事情，在这些情况下pyc文件本身不会被拾取并且不会带来太多好处。</target>
        </trans-unit>
        <trans-unit id="343aca3bcc821422f2d9d8367cb28d74ab6938b8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;test&lt;/code&gt; is true, &lt;code&gt;body&lt;/code&gt; is rendered, else &lt;code&gt;else_&lt;/code&gt;.</source>
          <target state="translated">如果 &lt;code&gt;test&lt;/code&gt; 为true，则呈现 &lt;code&gt;body&lt;/code&gt; ，否则 &lt;code&gt;else_&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1fa40e550e6fad33d3a4b003ba47b6ce77ba11ab" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;target&lt;/em&gt; is specified, the &lt;code&gt;target&lt;/code&gt; attribute will be added to the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag:</source>
          <target state="translated">如果&lt;em&gt;目标&lt;/em&gt;被指定， &lt;code&gt;target&lt;/code&gt; 属性将被添加到 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 标签：</target>
        </trans-unit>
        <trans-unit id="61eed3660645882617baf218a091099d9cf2b60b" translate="yes" xml:space="preserve">
          <source>If Expression</source>
          <target state="translated">如果表达式</target>
        </trans-unit>
        <trans-unit id="e851919bad92f98f2a7a4f59ec333e869febb9f9" translate="yes" xml:space="preserve">
          <source>If a macro name starts with an underscore, it&amp;rsquo;s not exported and can&amp;rsquo;t be imported.</source>
          <target state="translated">如果宏名称以下划线开头，则不会导出，也无法导入。</target>
        </trans-unit>
        <trans-unit id="4e80e1dbfcda27aa91a0edf26e47ba019f070328" translate="yes" xml:space="preserve">
          <source>If a string that you marked safe is passed through other Python code that doesn&amp;rsquo;t understand that mark, it may get lost. Be aware of when your data is marked safe and how it is processed before arriving at the template.</source>
          <target state="translated">如果您标记为安全的字符串通过其他无法理解该标记的Python代码传递，则可能会丢失。在到达模板之前，请注意何时将数据标记为安全数据以及如何对其进行处理。</target>
        </trans-unit>
        <trans-unit id="ec3b9aa8a6990b3841477caf85d06785b8bc29ed" translate="yes" xml:space="preserve">
          <source>If a template object was passed in the template context, you can extend from that object as well. Assuming the calling code passes a layout template as &lt;code&gt;layout_template&lt;/code&gt; to the environment, this code works:</source>
          <target state="translated">如果在模板上下文中传递了模板对象，则也可以从该对象扩展。假设调用代码将布局模板作为 &lt;code&gt;layout_template&lt;/code&gt; 传递到环境，则此代码有效：</target>
        </trans-unit>
        <trans-unit id="cd0636f75f47b039d96e019ddd55694a1e727b57" translate="yes" xml:space="preserve">
          <source>If a template was created by using the &lt;a href=&quot;#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; constructor an environment is created automatically. These environments are created as shared environments which means that multiple templates may have the same anonymous environment. For all shared environments this attribute is &lt;code&gt;True&lt;/code&gt;, else &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">如果使用&lt;a href=&quot;#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;构造函数创建了模板，则会自动创建环境。这些环境被创建为共享环境，这意味着多个模板可能具有相同的匿名环境。对于所有共享环境，此属性为 &lt;code&gt;True&lt;/code&gt; ，否则为 &lt;code&gt;False&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f676f09d2304685e2d3ea6b7d182d454f8d54b3" translate="yes" xml:space="preserve">
          <source>If a value has been escaped but is not marked safe, auto-escaping will still take place and result in double-escaped characters. If you know you have data that is already safe but not marked, be sure to wrap it in &lt;code&gt;Markup&lt;/code&gt; or use the &lt;code&gt;|safe&lt;/code&gt; filter.</source>
          <target state="translated">如果一个值已被转义但未标记为安全，则仍将自动转义并导致两次转义的字符。如果您知道已经具有安全性但未标记的数据，请确保将其包装在&amp;ldquo; &lt;code&gt;Markup&lt;/code&gt; 或使用 &lt;code&gt;|safe&lt;/code&gt; 过滤器。</target>
        </trans-unit>
        <trans-unit id="9b6e900485635755d2210d918bf607de371eb678" translate="yes" xml:space="preserve">
          <source>If a variable or attribute does not exist, you will get back an undefined value. What you can do with that kind of value depends on the application configuration: the default behavior is to evaluate to an empty string if printed or iterated over, and to fail for every other operation.</source>
          <target state="translated">如果一个变量或属性不存在,你将得到一个未定义的值。对于这种值,你能做什么取决于应用程序的配置:默认的行为是,如果打印或迭代,会评估为一个空字符串,而对于其他操作,则失败。</target>
        </trans-unit>
        <trans-unit id="e0333565a04b8c2a31552cf9b90085b11ad8b278" translate="yes" xml:space="preserve">
          <source>If all you want to do is check whether some value has changed since the last iteration or will change in the next iteration, you can use &lt;code&gt;previtem&lt;/code&gt; and &lt;code&gt;nextitem&lt;/code&gt;:</source>
          <target state="translated">如果您要做的只是检查自上一次迭代以来某个值是否已更改，或者在下一次迭代中将更改，则可以使用 &lt;code&gt;previtem&lt;/code&gt; 和 &lt;code&gt;nextitem&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="29a5f58cff42a46823687e9dd9fa2af5271a4dd4" translate="yes" xml:space="preserve">
          <source>If an application configures Jinja to &lt;code&gt;trim_blocks&lt;/code&gt;, the first newline after a template tag is removed automatically (like in PHP). The &lt;code&gt;lstrip_blocks&lt;/code&gt; option can also be set to strip tabs and spaces from the beginning of a line to the start of a block. (Nothing will be stripped if there are other characters before the start of the block.)</source>
          <target state="translated">如果应用程序将Jinja配置为 &lt;code&gt;trim_blocks&lt;/code&gt; ，则会自动删除模板标记后的第一个换行符（例如在PHP中）。还可以将 &lt;code&gt;lstrip_blocks&lt;/code&gt; 选项设置为从行的开头到块的开头去除制表符和空格。（如果在该块的开头之前还有其他字符，则不会删除任何内容。）</target>
        </trans-unit>
        <trans-unit id="038915cb735aefb89c7e4baa93a07c6d485a0108" translate="yes" xml:space="preserve">
          <source>If an exception in the template code happens the template engine will not rewrite the exception but pass through the original one. As a matter of fact this function should only be called from within a &lt;a href=&quot;#jinja2.Template.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;#jinja2.Template.generate&quot;&gt;&lt;code&gt;generate()&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;#jinja2.Template.stream&quot;&gt;&lt;code&gt;stream()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">如果模板代码中发生异常，则模板引擎将不会重写该异常，而是传递原始异常。实际上，此函数只能在&lt;a href=&quot;#jinja2.Template.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#jinja2.Template.generate&quot;&gt; &lt;code&gt;generate()&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#jinja2.Template.stream&quot;&gt; &lt;code&gt;stream()&lt;/code&gt; &lt;/a&gt;调用中调用。</target>
        </trans-unit>
        <trans-unit id="4f939b09d812021498a011e771194a4b034ac324" translate="yes" xml:space="preserve">
          <source>If any of the &lt;a href=&quot;#jinja2.ext.Extension.tags&quot;&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/a&gt; matched this method is called with the parser as first argument. The token the parser stream is pointing at is the name token that matched. This method has to return one or a list of multiple nodes.</source>
          <target state="translated">如果有任何匹配的&lt;a href=&quot;#jinja2.ext.Extension.tags&quot;&gt; &lt;code&gt;tags&lt;/code&gt; &lt;/a&gt;则以解析器作为第一个参数调用此方法。解析器流指向的令牌是匹配的名称令牌。此方法必须返回一个或多个节点的列表。</target>
        </trans-unit>
        <trans-unit id="8f00ed9bd274ae612833ee61ed456c5c2a76360e" translate="yes" xml:space="preserve">
          <source>If buffering is enabled with a buffer size of 5, five items are combined into a new unicode string. This is mainly useful if you are streaming big templates to a client via WSGI which flushes after each iteration.</source>
          <target state="translated">如果启用了缓冲区,缓冲区大小为5,则5个项目会合并成一个新的unicode字符串。如果你通过WSGI向客户端传输大模板,这主要是有用的,因为WSGI在每次迭代后都会刷新。</target>
        </trans-unit>
        <trans-unit id="f63a24dfab50ef19c75b9d27ea3886a7e74cf5d4" translate="yes" xml:space="preserve">
          <source>If called with an unsupported object (such as unicode) &lt;code&gt;False&lt;/code&gt; is returned.</source>
          <target state="translated">如果使用不受支持的对象（例如unicode）调用，则返回 &lt;code&gt;False&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="652fe5a11ad3942e771cf64f009cd8e441b532cc" translate="yes" xml:space="preserve">
          <source>If can also be used as an &lt;a href=&quot;#if-expression&quot;&gt;inline expression&lt;/a&gt; and for &lt;a href=&quot;#loop-filtering&quot;&gt;loop filtering&lt;/a&gt;.</source>
          <target state="translated">If还可以用作&lt;a href=&quot;#if-expression&quot;&gt;内联表达式&lt;/a&gt;和&lt;a href=&quot;#loop-filtering&quot;&gt;循环过滤&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6d29e99455416258f96b19682e879ee06ca616a6" translate="yes" xml:space="preserve">
          <source>If created with an import name the import name is returned on node access. For example &lt;code&gt;ImportedName('cgi.escape')&lt;/code&gt; returns the &lt;code&gt;escape&lt;/code&gt; function from the cgi module on evaluation. Imports are optimized by the compiler so there is no need to assign them to local variables.</source>
          <target state="translated">如果使用导入名称创建，则导入名称将在节点访问时返回。例如， &lt;code&gt;ImportedName('cgi.escape')&lt;/code&gt; 在评估时从cgi模块返回 &lt;code&gt;escape&lt;/code&gt; 函数。导入由编译器优化，因此无需将它们分配给局部变量。</target>
        </trans-unit>
        <trans-unit id="efb2be0d2f96e6bf2721108b191d020ea9fc02ca" translate="yes" xml:space="preserve">
          <source>If given and a string, this will be used as prefix for line based comments. See also &lt;a href=&quot;../templates/index#line-statements&quot;&gt;Line Statements&lt;/a&gt;.</source>
          <target state="translated">如果提供了字符串，则将其用作基于行的注释的前缀。另请参见&lt;a href=&quot;../templates/index#line-statements&quot;&gt;行语句&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d9e04d40ba59e3e333b744bb6ba4de863fb6d4bf" translate="yes" xml:space="preserve">
          <source>If given and a string, this will be used as prefix for line based statements. See also &lt;a href=&quot;../templates/index#line-statements&quot;&gt;Line Statements&lt;/a&gt;.</source>
          <target state="translated">如果提供了字符串，则将其用作基于行的语句的前缀。另请参见&lt;a href=&quot;../templates/index#line-statements&quot;&gt;行语句&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9d6fb778aa6f87edcf729155c9b9d982fcc186c7" translate="yes" xml:space="preserve">
          <source>If it the &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;obj&lt;/code&gt; is known (for example because an attribute was accessed) it should be passed to the undefined object, even if a custom &lt;code&gt;hint&lt;/code&gt; is provided. This gives undefined objects the possibility to enhance the error message.</source>
          <target state="translated">如果 &lt;code&gt;name&lt;/code&gt; 或 &lt;code&gt;obj&lt;/code&gt; 是已知的（例如，因为访问了属性），则即使提供了自定义 &lt;code&gt;hint&lt;/code&gt; ，也应将其传递给未定义的对象。这为未定义的对象提供了增强错误消息的可能性。</target>
        </trans-unit>
        <trans-unit id="498f93ef9ad4c6acabed81817da2d37dad737547" translate="yes" xml:space="preserve">
          <source>If line statements are enabled by the application, it&amp;rsquo;s possible to mark a line as a statement. For example, if the line statement prefix is configured to &lt;code&gt;#&lt;/code&gt;, the following two examples are equivalent:</source>
          <target state="translated">如果应用程序启用了行语句，则可以将行标记为语句。例如，如果将行语句前缀配置为 &lt;code&gt;#&lt;/code&gt; ，则以下两个示例等效：</target>
        </trans-unit>
        <trans-unit id="09befb1888a7d92dab1f0dec6f657bd73d21a34f" translate="yes" xml:space="preserve">
          <source>If manual escaping is enabled, it&amp;rsquo;s &lt;strong&gt;your&lt;/strong&gt; responsibility to escape variables if needed. What to escape? If you have a variable that &lt;em&gt;may&lt;/em&gt; include any of the following chars (&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, or &lt;code&gt;&quot;&lt;/code&gt;) you &lt;strong&gt;SHOULD&lt;/strong&gt; escape it unless the variable contains well-formed and trusted HTML. Escaping works by piping the variable through the &lt;code&gt;|e&lt;/code&gt; filter:</source>
          <target state="translated">如果启用了手动转义，则&lt;strong&gt;您有&lt;/strong&gt;责任在需要时对变量进行转义。要逃脱什么？如果你有一个变量，它&lt;em&gt;可以&lt;/em&gt;包括以下任何字符的（ &lt;code&gt;&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;&lt;/code&gt; ， &lt;code&gt;&amp;amp;&lt;/code&gt; 或 &lt;code&gt;&quot;&lt;/code&gt; ），你&lt;strong&gt;应该&lt;/strong&gt;除非变量包含良好和可信HTML逃避它由通过管道可变逃逸作品。 &lt;code&gt;|e&lt;/code&gt; 滤波器：</target>
        </trans-unit>
        <trans-unit id="873edc0860b087feb66a3bd95dab9b92b00c4011" translate="yes" xml:space="preserve">
          <source>If more positional arguments are passed to the macro than accepted by the macro, they end up in the special &lt;code&gt;varargs&lt;/code&gt; variable as a list of values.</source>
          <target state="translated">如果传递给宏的位置参数多于宏所接受的位置参数，则它们会以特殊的 &lt;code&gt;varargs&lt;/code&gt; 变量作为值列表结束。</target>
        </trans-unit>
        <trans-unit id="8e8b8dcc3153729e1fad151cd813d4e5326a788a" translate="yes" xml:space="preserve">
          <source>If no directory is specified a default cache directory is selected. On Windows the user&amp;rsquo;s temp directory is used, on UNIX systems a directory is created for the user in the system temp directory.</source>
          <target state="translated">如果未指定目录，则选择默认的缓存目录。在Windows上，使用用户的temp目录，在UNIX系统上，在系统temp目录中为该用户创建一个目录。</target>
        </trans-unit>
        <trans-unit id="8ef0b05763d36f99a4dda8920b0f777cbc3f56b9" translate="yes" xml:space="preserve">
          <source>If no iteration took place because the sequence was empty or the filtering removed all the items from the sequence, you can render a default block by using &lt;code&gt;else&lt;/code&gt;:</source>
          <target state="translated">如果由于序列为空而没有迭代，或者过滤删除了序列中的所有项目，则可以使用 &lt;code&gt;else&lt;/code&gt; 渲染默认块：</target>
        </trans-unit>
        <trans-unit id="e3c76a1a45bd22e9b7055d53108f1d2b629ccfb2" translate="yes" xml:space="preserve">
          <source>If no test is specified, each object will be evaluated as a boolean.</source>
          <target state="translated">如果没有指定测试,每个对象将被评估为布尔值。</target>
        </trans-unit>
        <trans-unit id="8243d617aeb8cf834d3f4330fc7faff937111e8f" translate="yes" xml:space="preserve">
          <source>If no test is specified, the attribute&amp;rsquo;s value will be evaluated as a boolean.</source>
          <target state="translated">如果未指定测试，则该属性的值将被评估为布尔值。</target>
        </trans-unit>
        <trans-unit id="918ad3e8425484fcee6662f9b92952e55fc49fff" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt; the XML/HTML autoescaping feature is enabled by default. For more details about autoescaping see &lt;code&gt;Markup&lt;/code&gt;. As of Jinja 2.4 this can also be a callable that is passed the template name and has to return &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; depending on autoescape should be enabled by default.</source>
          <target state="translated">如果设置为 &lt;code&gt;True&lt;/code&gt; ，则默认情况下会启用XML / HTML自动转义功能。有关自动转义的更多详细信息，请参见 &lt;code&gt;Markup&lt;/code&gt; 。从Jinja 2.4开始，这也可以是可调用的，它已传递了模板名称，并且必须根据默认情况自动启用而必须返回 &lt;code&gt;True&lt;/code&gt; 或 &lt;code&gt;False&lt;/code&gt; ,这取决于自动转义。</target>
        </trans-unit>
        <trans-unit id="93c71f3139ba82499f6941aa0d79a29310b475ef" translate="yes" xml:space="preserve">
          <source>If set to a bytecode cache object, this object will provide a cache for the internal Jinja bytecode so that templates don&amp;rsquo;t have to be parsed if they were not changed.</source>
          <target state="translated">如果设置为字节码缓存对象，则此对象将为内部Jinja字节码提供缓存，以便在不更改模板的情况下不必对其进行解析。</target>
        </trans-unit>
        <trans-unit id="e6bd6f24c4f0008051d6d039cff2832896ac998d" translate="yes" xml:space="preserve">
          <source>If set to true this enables async template execution which allows you to take advantage of newer Python features. This requires Python 3.6 or later.</source>
          <target state="translated">如果设置为 &quot;true&quot;,这将使您能够利用较新的 Python 特性来执行异步模板。这需要 Python 3.6 或更高版本。</target>
        </trans-unit>
        <trans-unit id="5c9aff29030026f50854923569ed1b7d44dd1718" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../extensions/index#debug-extension&quot;&gt;Debug Extension&lt;/a&gt; is enabled, a &lt;code&gt;{% debug %}&lt;/code&gt; tag will be available to dump the current context as well as the available filters and tests. This is useful to see what&amp;rsquo;s available to use in the template without setting up a debugger.</source>
          <target state="translated">如果启用了&lt;a href=&quot;../extensions/index#debug-extension&quot;&gt;调试扩展，&lt;/a&gt;则 &lt;code&gt;{% debug %}&lt;/code&gt; 标记将可用于转储当前上下文以及可用的过滤器和测试。这对于查看无需设置调试器即可在模板中使用的内容很有用。</target>
        </trans-unit>
        <trans-unit id="abe932d1dbe7fd6bebfe45b7d0c7584f530b201f" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../extensions/index#i18n-extension&quot;&gt;i18n Extension&lt;/a&gt; is enabled, it&amp;rsquo;s possible to mark text in the template as translatable. To mark a section as translatable, use a &lt;code&gt;trans&lt;/code&gt; block:</source>
          <target state="translated">如果启用了&lt;a href=&quot;../extensions/index#i18n-extension&quot;&gt;i18n Extension&lt;/a&gt;，则可以将模板中的文本标记为可翻译。要将部分标记为可翻译，请使用 &lt;code&gt;trans&lt;/code&gt; 块：</target>
        </trans-unit>
        <trans-unit id="3309631c1a537a359c5a8e9d68c061c2623e6394" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;node&lt;/code&gt; of a filter is &lt;code&gt;None&lt;/code&gt; the contents of the last buffer are filtered. Buffers are created by macros and filter blocks.</source>
          <target state="translated">如果过滤器的 &lt;code&gt;node&lt;/code&gt; 为&amp;ldquo; &lt;code&gt;None&lt;/code&gt; &amp;rdquo;，则将过滤最后一个缓冲区的内容。缓冲区由宏和过滤器块创建。</target>
        </trans-unit>
        <trans-unit id="a5e03b565bfbd63630d2f10f2a7746ee3924db6d" translate="yes" xml:space="preserve">
          <source>If the application enables the &lt;a href=&quot;../extensions/index#loopcontrols-extension&quot;&gt;Loop Controls&lt;/a&gt;, it&amp;rsquo;s possible to use &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; in loops. When &lt;code&gt;break&lt;/code&gt; is reached, the loop is terminated; if &lt;code&gt;continue&lt;/code&gt; is reached, the processing is stopped and continues with the next iteration.</source>
          <target state="translated">如果应用程序启用了&lt;a href=&quot;../extensions/index#loopcontrols-extension&quot;&gt;Loop Controls&lt;/a&gt;，则可以使用 &lt;code&gt;break&lt;/code&gt; 并 &lt;code&gt;continue&lt;/code&gt; 循环。当 &lt;code&gt;break&lt;/code&gt; 达到，循环被终止; 如果达到了 &lt;code&gt;continue&lt;/code&gt; ，则处理将停止并继续下一次迭代。</target>
        </trans-unit>
        <trans-unit id="cf0ceb0edc052ea49514b544fb57fc23fb50c219" translate="yes" xml:space="preserve">
          <source>If the environment is sandboxed this attribute is &lt;code&gt;True&lt;/code&gt;. For the sandbox mode have a look at the documentation for the &lt;a href=&quot;../sandbox/index#jinja2.sandbox.SandboxedEnvironment&quot;&gt;&lt;code&gt;SandboxedEnvironment&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">如果环境是沙盒，则此属性为 &lt;code&gt;True&lt;/code&gt; 。对于沙盒模式，请查看&lt;a href=&quot;../sandbox/index#jinja2.sandbox.SandboxedEnvironment&quot;&gt; &lt;code&gt;SandboxedEnvironment&lt;/code&gt; &lt;/a&gt;的文档。</target>
        </trans-unit>
        <trans-unit id="deabd5b07d4a15293097a21b3164961179ee26c6" translate="yes" xml:space="preserve">
          <source>If the expression-statement extension is loaded, a tag called &lt;code&gt;do&lt;/code&gt; is available that works exactly like the regular variable expression (&lt;code&gt;{{ ... }}&lt;/code&gt;); except it doesn&amp;rsquo;t print anything. This can be used to modify lists:</source>
          <target state="translated">如果加载了expression-statement扩展名，则可以使用名为 &lt;code&gt;do&lt;/code&gt; 的标记，该标记的工作方式与正则表达式（ &lt;code&gt;{{ ... }}&lt;/code&gt; ）完全相同。除了不打印任何东西。这可用于修改列表：</target>
        </trans-unit>
        <trans-unit id="7c8bf833c466bdc5b81f2ed0e43072afb4ea22c6" translate="yes" xml:space="preserve">
          <source>If the extension implements custom tags this is a set of tag names the extension is listening for.</source>
          <target state="translated">如果扩展实现了自定义标记,这就是扩展正在监听的一组标记名称。</target>
        </trans-unit>
        <trans-unit id="73fc2f95a5e4ab4972ffc36c255217be41391b9f" translate="yes" xml:space="preserve">
          <source>If the loader does not support that, a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">如果加载程序不支持该类型，则会引发&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="774ddd4d2b1b6e8e0f07e09842522fdf1178ea80" translate="yes" xml:space="preserve">
          <source>If the macro was called from a &lt;a href=&quot;#call&quot;&gt;call&lt;/a&gt; tag, the caller is stored in this variable as a callable macro.</source>
          <target state="translated">如果从&lt;a href=&quot;#call&quot;&gt;调用&lt;/a&gt;标签调用了该宏，则调用方将作为可调用宏存储在此变量中。</target>
        </trans-unit>
        <trans-unit id="67221b45b4caeca8b8293a692ac7f1eba2903bc1" translate="yes" xml:space="preserve">
          <source>If the macro was defined in a different template, you have to &lt;a href=&quot;#import&quot;&gt;import&lt;/a&gt; it first.</source>
          <target state="translated">如果宏是在其他模板中定义的，则必须首先&lt;a href=&quot;#import&quot;&gt;将&lt;/a&gt;其导入。</target>
        </trans-unit>
        <trans-unit id="4356fe2ed13d62d966ed88f6c76a9e9b6d288262" translate="yes" xml:space="preserve">
          <source>If the package path is not given, &lt;code&gt;'templates'&lt;/code&gt; is assumed.</source>
          <target state="translated">如果未提供包路径，则假定为 &lt;code&gt;'templates'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ae3ffa297d475a3e6768da347f8211dd197ada8d" translate="yes" xml:space="preserve">
          <source>If the template does not exist a &lt;a href=&quot;#jinja2.TemplateNotFound&quot;&gt;&lt;code&gt;TemplateNotFound&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">如果模板不存在，则会引发&lt;a href=&quot;#jinja2.TemplateNotFound&quot;&gt; &lt;code&gt;TemplateNotFound&lt;/code&gt; &lt;/a&gt;异常。</target>
        </trans-unit>
        <trans-unit id="a40ff64c77cdda4a646f7adb5f85f8cc6f5ab6f6" translate="yes" xml:space="preserve">
          <source>If the template tries to access insecure code a &lt;a href=&quot;#jinja2.sandbox.SecurityError&quot;&gt;&lt;code&gt;SecurityError&lt;/code&gt;&lt;/a&gt; is raised. However also other exceptions may occur during the rendering so the caller has to ensure that all exceptions are caught.</source>
          <target state="translated">如果模板尝试访问不安全的代码，则会引发&lt;a href=&quot;#jinja2.sandbox.SecurityError&quot;&gt; &lt;code&gt;SecurityError&lt;/code&gt; &lt;/a&gt;。但是，在渲染过程中可能还会发生其他异常，因此调用方必须确保捕获到所有异常。</target>
        </trans-unit>
        <trans-unit id="dbb2a698047c651587365d4063bfd9f73ee33b30" translate="yes" xml:space="preserve">
          <source>If the value is undefined it will return the passed default value, otherwise the value of the variable:</source>
          <target state="translated">如果值是未定义的,它将返回传递的默认值,否则返回变量的值。</target>
        </trans-unit>
        <trans-unit id="8a041f5b595505e5da334fa579e86d08ff093ecd" translate="yes" xml:space="preserve">
          <source>If there are other files in the template folder besides the actual templates, the returned list can be filtered. There are two ways: either &lt;code&gt;extensions&lt;/code&gt; is set to a list of file extensions for templates, or a &lt;code&gt;filter_func&lt;/code&gt; can be provided which is a callable that is passed a template name and should return &lt;code&gt;True&lt;/code&gt; if it should end up in the result list.</source>
          <target state="translated">如果除了实际模板之外，模板文件夹中还有其他文件，则可以过滤返回的列表。有两种方法：将 &lt;code&gt;extensions&lt;/code&gt; 设置为模板的文件扩展名列表，或者可以提供 &lt;code&gt;filter_func&lt;/code&gt; ，该函数是可调用的，传递了模板名称，并且如果应在结果列表中返回，则应返回 &lt;code&gt;True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a706f98204e68604778087b0481f2792765f55ef" translate="yes" xml:space="preserve">
          <source>If this is set to &lt;code&gt;True&lt;/code&gt; leading spaces and tabs are stripped from the start of a line to a block. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">如果将其设置为 &lt;code&gt;True&lt;/code&gt; ,则前导空格和制表符将从行的开头剥离到一个块。默认为 &lt;code&gt;False&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="caae8e57804aef70109fdd9645cf6a2f7d3da508" translate="yes" xml:space="preserve">
          <source>If this is set to &lt;code&gt;True&lt;/code&gt; the first newline after a block is removed (block, not variable tag!). Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">如果将其设置为 &lt;code&gt;True&lt;/code&gt; ，则删除块后的第一个换行符（块，不是可变标签！）。默认为 &lt;code&gt;False&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="40ee947658e93bda949c9db55667adb3d4eebade" translate="yes" xml:space="preserve">
          <source>If this is set to &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;{% trans %}&lt;/code&gt; blocks of the &lt;a href=&quot;../extensions/index#i18n-extension&quot;&gt;i18n Extension&lt;/a&gt; will always unify linebreaks and surrounding whitespace as if the &lt;code&gt;trimmed&lt;/code&gt; modifier was used.</source>
          <target state="translated">如果将其设置为 &lt;code&gt;True&lt;/code&gt; ，则&lt;a href=&quot;../extensions/index#i18n-extension&quot;&gt;i18n Extensions的&lt;/a&gt; &lt;code&gt;{% trans %}&lt;/code&gt; 块将始终统一换行符和周围的空格，就像使用了 &lt;code&gt;trimmed&lt;/code&gt; 修饰符一样。</target>
        </trans-unit>
        <trans-unit id="80a7105cbb391c91cfbdd5db41e39e6ff3c23c31" translate="yes" xml:space="preserve">
          <source>If this is set to a value other than &lt;code&gt;None&lt;/code&gt; then the &lt;code&gt;tojson&lt;/code&gt; filter will dump with this function instead of the default one. Note that this function should accept arbitrary extra arguments which might be passed in the future from the filter. Currently the only argument that might be passed is &lt;code&gt;indent&lt;/code&gt;. The default dump function is &lt;code&gt;json.dumps&lt;/code&gt;.</source>
          <target state="translated">如果将此值设置为 &lt;code&gt;None&lt;/code&gt; ,则 &lt;code&gt;tojson&lt;/code&gt; 过滤器将使用此函数而不是默认函数进行转储。请注意，此函数应接受任意额外的参数，将来可能会从过滤器中传递这些参数。当前，唯一可以传递的参数是 &lt;code&gt;indent&lt;/code&gt; 。默认的转储函数是 &lt;code&gt;json.dumps&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ae5d3431247b164fe58088ab45ff480abd4ea727" translate="yes" xml:space="preserve">
          <source>If trimming is enabled globally, the &lt;code&gt;notrimmed&lt;/code&gt; modifier can be used to disable it for a block.</source>
          <target state="translated">如果全局启用了修剪，则可以使用 &lt;code&gt;notrimmed&lt;/code&gt; 修饰符将其禁用为一个块。</target>
        </trans-unit>
        <trans-unit id="b35fa12d74b184552d0789b38a86bd4a2edd55f4" translate="yes" xml:space="preserve">
          <source>If you are &lt;a href=&quot;../extensions/index#writing-extensions&quot;&gt;developing Jinja extensions&lt;/a&gt; this gives you a good overview of the node tree generated.</source>
          <target state="translated">如果您正在&lt;a href=&quot;../extensions/index#writing-extensions&quot;&gt;开发Jinja扩展，&lt;/a&gt;则可以很好地概述所生成的节点树。</target>
        </trans-unit>
        <trans-unit id="4818a5c56bf96bb61ed74a49d75f4f68e375bf96" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify a method &lt;code&gt;'common'&lt;/code&gt; is used.</source>
          <target state="translated">如果您未指定方法，则使用 &lt;code&gt;'common'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="34239d6e7c2daaea9bfa2d5f1bf0ef8ec5b516b5" translate="yes" xml:space="preserve">
          <source>If you have any exposure to other text-based template languages, such as Smarty or Django, you should feel right at home with Jinja. It&amp;rsquo;s both designer and developer friendly by sticking to Python&amp;rsquo;s principles and adding functionality useful for templating environments.</source>
          <target state="translated">如果您接触过其他基于文本的模板语言（例如Smarty或Django），那么Jinja会让您感到宾至如归。通过遵循Python的原理并添加对模板环境有用的功能，它对设计人员和开发人员都友好。</target>
        </trans-unit>
        <trans-unit id="01f05b2ac0e9ec8a4194e82a84a84b245820a1f6" translate="yes" xml:space="preserve">
          <source>If you only care whether the value changed at all, using &lt;code&gt;changed&lt;/code&gt; is even easier:</source>
          <target state="translated">如果您只关心值是否全部 &lt;code&gt;changed&lt;/code&gt; ，则使用更改甚至更容易：</target>
        </trans-unit>
        <trans-unit id="94017224c959e2cc93f4c35b42e94abed760dc65" translate="yes" xml:space="preserve">
          <source>If you pass it a second argument it&amp;rsquo;s used to fill missing values on the last iteration.</source>
          <target state="translated">如果将第二个参数传递给它，则该参数将用于填充上一次迭代中的缺失值。</target>
        </trans-unit>
        <trans-unit id="64169250ac8296711ccc2dbdd8c0dd925276a46b" translate="yes" xml:space="preserve">
          <source>If you pass the filter an additional integer it will shorten the urls to that number. Also a third argument exists that makes the urls &amp;ldquo;nofollow&amp;rdquo;:</source>
          <target state="translated">如果您通过过滤器一个额外的整数，它将把URL缩短到那个数字。还有第三个参数，使URL为&amp;ldquo; nofollow&amp;rdquo;：</target>
        </trans-unit>
        <trans-unit id="e2200f0a3d1453009b6420e1ba9e3bf8090477be" translate="yes" xml:space="preserve">
          <source>If you want to enable it for all templates created from strings or for all templates with &lt;code&gt;.html&lt;/code&gt; and &lt;code&gt;.xml&lt;/code&gt; extensions:</source>
          <target state="translated">如果要为从字符串创建的所有模板或具有 &lt;code&gt;.html&lt;/code&gt; 和 &lt;code&gt;.xml&lt;/code&gt; 扩展名的所有模板启用它：</target>
        </trans-unit>
        <trans-unit id="b37ef936225be8369e6c87c358b8fa7403f38fa9" translate="yes" xml:space="preserve">
          <source>If you want to have different styles for each row of a table or list you can use the &lt;code&gt;cycle&lt;/code&gt; method on the &lt;code&gt;loop&lt;/code&gt; object:</source>
          <target state="translated">如果要为表或列表的每一行使用不同的样式，则可以在 &lt;code&gt;loop&lt;/code&gt; 对象上使用 &lt;code&gt;cycle&lt;/code&gt; 方法：</target>
        </trans-unit>
        <trans-unit id="d3359aaffdf15a30a20148b8dcfeab5c9a86d270" translate="yes" xml:space="preserve">
          <source>If you want to print a block multiple times, you can, however, use the special &lt;code&gt;self&lt;/code&gt; variable and call the block with that name:</source>
          <target state="translated">如果要多次打印块，则可以使用特殊的 &lt;code&gt;self&lt;/code&gt; 变量，并使用该名称调用该块：</target>
        </trans-unit>
        <trans-unit id="693fb0990c92b9435ed482664191f788db51c55b" translate="yes" xml:space="preserve">
          <source>If you want you can activate and deactivate the autoescaping from within the templates.</source>
          <target state="translated">如果你愿意,你可以在模板中激活和停用自动收尾。</target>
        </trans-unit>
        <trans-unit id="5c2d1008390fca0dfe0d8ece63f63ffb0f734e24" translate="yes" xml:space="preserve">
          <source>If you wish to use the &lt;a href=&quot;../api/index#jinja2.PackageLoader&quot;&gt;&lt;code&gt;PackageLoader&lt;/code&gt;&lt;/a&gt; class, you will also need &lt;a href=&quot;https://pypi.org/project/setuptools/&quot;&gt;setuptools&lt;/a&gt; or &lt;a href=&quot;https://pypi.org/project/distribute/&quot;&gt;distribute&lt;/a&gt; installed at runtime.</source>
          <target state="translated">如果希望使用&lt;a href=&quot;../api/index#jinja2.PackageLoader&quot;&gt; &lt;code&gt;PackageLoader&lt;/code&gt; &lt;/a&gt;类，则还需要&lt;a href=&quot;https://pypi.org/project/setuptools/&quot;&gt;setuptools&lt;/a&gt;或在运行时安装&lt;a href=&quot;https://pypi.org/project/distribute/&quot;&gt;发行版&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f32be784a9fd750f505617b04b2e4df4592177d3" translate="yes" xml:space="preserve">
          <source>Imagine we have a helper module that renders forms (called &lt;code&gt;forms.html&lt;/code&gt;):</source>
          <target state="translated">想象一下，我们有一个渲染表单的帮助器模块（称为 &lt;code&gt;forms.html&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="8781d615fd77be9578225c40ac67b9471394cced" translate="yes" xml:space="preserve">
          <source>Implementation</source>
          <target state="translated">Implementation</target>
        </trans-unit>
        <trans-unit id="d6fbc9d2bdd580e18ed0bc5805dc26db323d6f5f" translate="yes" xml:space="preserve">
          <source>Import</source>
          <target state="translated">Import</target>
        </trans-unit>
        <trans-unit id="8c44d87482e0946a781a2efd54baff4fa3c5a4f7" translate="yes" xml:space="preserve">
          <source>Import Context Behavior</source>
          <target state="translated">导入情境行为</target>
        </trans-unit>
        <trans-unit id="7e83b3794c038d6f0ca4ef9cc5b9bced8071b8a2" translate="yes" xml:space="preserve">
          <source>In Jinja 2.0, the context that was passed to the included template did not include variables defined in the template. As a matter of fact, this did not work:</source>
          <target state="translated">在Jinja 2.0中,传递给包含模板的上下文并不包括模板中定义的变量。事实上,这并不奏效。</target>
        </trans-unit>
        <trans-unit id="b92c630151cffc4c76d815474e16f9d12d9c9955" translate="yes" xml:space="preserve">
          <source>In earlier Jinja versions the &lt;code&gt;b&lt;/code&gt; attribute would refer to the results of the first attribute. If you depend on this behavior you can rewrite it to use the &lt;code&gt;set&lt;/code&gt; tag:</source>
          <target state="translated">在早期的Jinja版本中， &lt;code&gt;b&lt;/code&gt; 属性将引用第一个属性的结果。如果您依赖于此行为，则可以重写它以使用 &lt;code&gt;set&lt;/code&gt; 标记：</target>
        </trans-unit>
        <trans-unit id="d5f8b01566bb49ba927a7de154b278ca7f62f21c" translate="yes" xml:space="preserve">
          <source>In future versions of Jinja we might enable autoescaping by default for security reasons. As such you are encouraged to explicitly configure autoescaping now instead of relying on the default.</source>
          <target state="translated">在未来的Jinja版本中,出于安全考虑,我们可能会默认启用自动收尾。因此,我们鼓励你现在就明确配置自动收尾,而不是依赖默认值。</target>
        </trans-unit>
        <trans-unit id="5987ddaa1ae020326677b08646c0734080e0619f" translate="yes" xml:space="preserve">
          <source>In most cases it should be more convenient and efficient to use the &lt;code&gt;%&lt;/code&gt; operator or &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.format&quot;&gt;&lt;code&gt;str.format()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在大多数情况下，使用 &lt;code&gt;%&lt;/code&gt; 运算符或&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.format&quot;&gt; &lt;code&gt;str.format()&lt;/code&gt; &lt;/a&gt;应该更加方便和高效。</target>
        </trans-unit>
        <trans-unit id="dbfd97a43a128d3c3010c0d2947e2037d0386e18" translate="yes" xml:space="preserve">
          <source>In new versions you can either use a &lt;a href=&quot;#jinja2.contextfilter&quot;&gt;&lt;code&gt;contextfilter()&lt;/code&gt;&lt;/a&gt; and access the evaluation context from the actual context, or use a &lt;a href=&quot;#jinja2.evalcontextfilter&quot;&gt;&lt;code&gt;evalcontextfilter()&lt;/code&gt;&lt;/a&gt; which directly passes the evaluation context to the function:</source>
          <target state="translated">在新版本中，您可以使用&lt;a href=&quot;#jinja2.contextfilter&quot;&gt; &lt;code&gt;contextfilter()&lt;/code&gt; &lt;/a&gt;并从实际上下文访问评估上下文，或者使用&lt;a href=&quot;#jinja2.evalcontextfilter&quot;&gt; &lt;code&gt;evalcontextfilter()&lt;/code&gt; &lt;/a&gt;直接将评估上下文传递给函数：</target>
        </trans-unit>
        <trans-unit id="d6956e3e95d7d8fae81562918d61e8aef47e9560" translate="yes" xml:space="preserve">
          <source>In older versions of Jinja (before 2.9) it was required to enable this feature with an extension. It&amp;rsquo;s now enabled by default.</source>
          <target state="translated">在Jinja的较早版本（2.9之前）中，需要使用扩展功能来启用此功能。现在默认启用。</target>
        </trans-unit>
        <trans-unit id="158812642ee9cb206d69a4925f27ab30cc6b89f1" translate="yes" xml:space="preserve">
          <source>In previous Jinja versions filters and functions were marked as environment callables in order to check for the autoescape status from the environment. In new versions it&amp;rsquo;s encouraged to check the setting from the evaluation context instead.</source>
          <target state="translated">在先前的Jinja版本中，过滤器和函数被标记为环境可调用项，以便检查环境中的自动转义状态。在新版本中，建议改为从评估上下文中检查设置。</target>
        </trans-unit>
        <trans-unit id="3986fde23a0d65176231423a42e62204f552bc3b" translate="yes" xml:space="preserve">
          <source>In some cases it can be useful to pass a macro to another macro. For this purpose, you can use the special &lt;code&gt;call&lt;/code&gt; block. The following example shows a macro that takes advantage of the call functionality and how it can be used:</source>
          <target state="translated">在某些情况下，将宏传递给另一个宏可能会很有用。为此，可以使用特殊 &lt;code&gt;call&lt;/code&gt; 块。下面的示例显示了一个宏，该宏利用了调用功能以及如何使用它：</target>
        </trans-unit>
        <trans-unit id="ce03e571f14c42d1ac1f447e9c5afa89134b3a49" translate="yes" xml:space="preserve">
          <source>In the case of multiple levels of &lt;code&gt;{% extends %}&lt;/code&gt;, &lt;code&gt;super&lt;/code&gt; references may be chained (as in &lt;code&gt;super.super()&lt;/code&gt;) to skip levels in the inheritance tree.</source>
          <target state="translated">在多级的情况下， &lt;code&gt;{% extends %}&lt;/code&gt; ， &lt;code&gt;super&lt;/code&gt; 引用可被链接（如在 &lt;code&gt;super.super()&lt;/code&gt; ）跳过继承树水平。</target>
        </trans-unit>
        <trans-unit id="874391beace4f8faebf0753772b7c892c8c5bdbe" translate="yes" xml:space="preserve">
          <source>In the default configuration:</source>
          <target state="translated">在默认配置中。</target>
        </trans-unit>
        <trans-unit id="6c8e722031869aed98be87cee78aab6ed9fdfc52" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;{% block %}&lt;/code&gt; tags define four blocks that child templates can fill in. All the &lt;code&gt;block&lt;/code&gt; tag does is tell the template engine that a child template may override those placeholders in the template.</source>
          <target state="translated">在此示例中， &lt;code&gt;{% block %}&lt;/code&gt; 标签定义了子模板可以填充的四个块。所有 &lt;code&gt;block&lt;/code&gt; 标签所做的是告诉模板引擎子模板可以覆盖模板中的那些占位符。</target>
        </trans-unit>
        <trans-unit id="11c54a59d8a9668fa20146e40c46116f6e7acc35" translate="yes" xml:space="preserve">
          <source>Include</source>
          <target state="translated">Include</target>
        </trans-unit>
        <trans-unit id="54913ce0c91fc04d842ff4a7a337cfa08ba9dfc4" translate="yes" xml:space="preserve">
          <source>Included templates have access to the variables of the active context by default. For more details about context behavior of imports and includes, see &lt;a href=&quot;#import-visibility&quot;&gt;Import Context Behavior&lt;/a&gt;.</source>
          <target state="translated">默认情况下，包含的模板可以访问活动上下文的变量。有关导入和包含的上下文行为的更多详细信息，请参见&amp;ldquo;&lt;a href=&quot;#import-visibility&quot;&gt;导入上下文行为&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c2df9b932637fe9d32a0f16da1c11873398f873d" translate="yes" xml:space="preserve">
          <source>Index</source>
          <target state="translated">Index</target>
        </trans-unit>
        <trans-unit id="2b939b0c419628121be8230f74f4625ac00782e7" translate="yes" xml:space="preserve">
          <source>Indicates how deep in a recursive loop the rendering currently is. Starts at level 0</source>
          <target state="translated">表示当前渲染在递归循环中的深度。从0级开始。</target>
        </trans-unit>
        <trans-unit id="2a2fcd7f0278e9db375c14581a6eeb83e127b512" translate="yes" xml:space="preserve">
          <source>Indicates how deep in a recursive loop the rendering currently is. Starts at level 1</source>
          <target state="translated">表示当前渲染在递归循环中的深度。从第1层开始</target>
        </trans-unit>
        <trans-unit id="47cc8a57b66bbb12412efc702588ba055f22ee3c" translate="yes" xml:space="preserve">
          <source>Inline &lt;code&gt;gettext&lt;/code&gt;</source>
          <target state="translated">内联 &lt;code&gt;gettext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1cd3fc2367f520dc5e23ea59704dfe84d3f505ba" translate="yes" xml:space="preserve">
          <source>Inside code blocks, you can also assign values to variables. Assignments at top level (outside of blocks, macros or loops) are exported from the template like top level macros and can be imported by other templates.</source>
          <target state="translated">在代码块内部,你也可以给变量赋值。顶层的赋值(在代码块、宏或循环之外)像顶层宏一样从模板中导出,并可由其他模板导入。</target>
        </trans-unit>
        <trans-unit id="806da5911908820347a992d8df297ae8ef3f45eb" translate="yes" xml:space="preserve">
          <source>Inside macros, you have access to three special variables:</source>
          <target state="translated">在宏里面,你可以访问三个特殊的变量。</target>
        </trans-unit>
        <trans-unit id="6e8ea18378dcea01a3b91757cbf579f87547dd1a" translate="yes" xml:space="preserve">
          <source>Inside of a for-loop block, you can access some special variables:</source>
          <target state="translated">在for-loop块的内部,你可以访问一些特殊的变量。</target>
        </trans-unit>
        <trans-unit id="c29607e9713ef40c8ba19652379b0e2af0036880" translate="yes" xml:space="preserve">
          <source>Inside the block, no statements are allowed, only text and simple variable tags.</source>
          <target state="translated">在区块内部,不允许有任何语句,只允许有文本和简单的变量标签。</target>
        </trans-unit>
        <trans-unit id="cbdcc681975c4ca4c0db3e27aec19a10fbcd1328" translate="yes" xml:space="preserve">
          <source>Inside the template it can then be used as follows:</source>
          <target state="translated">在模板里面就可以使用,如下。</target>
        </trans-unit>
        <trans-unit id="44488b185242a8808c49b6d49a9282ea7a2ce6fe" translate="yes" xml:space="preserve">
          <source>Inside the template it&amp;rsquo;s then possible to mark blocks as cacheable. The following example caches a sidebar for 300 seconds:</source>
          <target state="translated">然后，可以在模板内部将块标记为可缓存。以下示例将边栏缓存300秒：</target>
        </trans-unit>
        <trans-unit id="87b0d36d548b833f260ef38cc644797c660c0d0a" translate="yes" xml:space="preserve">
          <source>Inside the templates the behaviour can be temporarily changed by using the &lt;code&gt;autoescape&lt;/code&gt; block (see &lt;a href=&quot;../templates/index#autoescape-overrides&quot;&gt;Autoescape Overrides&lt;/a&gt;).</source>
          <target state="translated">在模板内部，可以使用 &lt;code&gt;autoescape&lt;/code&gt; 块临时更改行为（请参见&lt;a href=&quot;../templates/index#autoescape-overrides&quot;&gt;Autoescape Overrides&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="1b40e826a4f00c64730198c686e383201fe610b6" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;</source>
          <target state="translated">安装&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="efb1fe102132222d3f06ba056e42af5d1d8652fb" translate="yes" xml:space="preserve">
          <source>Install no-op gettext functions. This is useful if you want to prepare the application for internationalization but don&amp;rsquo;t want to implement the full system yet.</source>
          <target state="translated">安装无操作gettext函数。如果您要为国际化准备应用程序，但又不想实现整个系统，则这很有用。</target>
        </trans-unit>
        <trans-unit id="0b304a614b9ebf981f7c81a5d1836c1d14234585" translate="yes" xml:space="preserve">
          <source>Install the given &lt;code&gt;gettext&lt;/code&gt; and &lt;code&gt;ngettext&lt;/code&gt; callables into the environment. They should behave exactly like &lt;a href=&quot;https://docs.python.org/3/library/gettext.html#gettext.gettext&quot;&gt;&lt;code&gt;gettext.gettext()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/gettext.html#gettext.ngettext&quot;&gt;&lt;code&gt;gettext.ngettext()&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;ugettext&lt;/code&gt; and &lt;code&gt;ungettext&lt;/code&gt; for Python 2).</source>
          <target state="translated">将给定的 &lt;code&gt;gettext&lt;/code&gt; 和 &lt;code&gt;ngettext&lt;/code&gt; 可调用对象安装到环境中。他们应该完全一样&lt;a href=&quot;https://docs.python.org/3/library/gettext.html#gettext.gettext&quot;&gt; &lt;code&gt;gettext.gettext()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://docs.python.org/3/library/gettext.html#gettext.ngettext&quot;&gt; &lt;code&gt;gettext.ngettext()&lt;/code&gt; &lt;/a&gt;（或 &lt;code&gt;ugettext&lt;/code&gt; 和 &lt;code&gt;ungettext&lt;/code&gt; 为Python 2）。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="c2880c0c7b9f92a492fcc9e1562593a3e93bb68d" translate="yes" xml:space="preserve">
          <source>Installing the development version</source>
          <target state="translated">安装开发版</target>
        </trans-unit>
        <trans-unit id="d1e68a1b9ffd66ec1b219bd36ddeb1b290a6266f" translate="yes" xml:space="preserve">
          <source>Installs a translation globally for the environment. The &lt;code&gt;translations&lt;/code&gt; object must implement &lt;code&gt;gettext&lt;/code&gt; and &lt;code&gt;ngettext&lt;/code&gt; (or &lt;code&gt;ugettext&lt;/code&gt; and &lt;code&gt;ungettext&lt;/code&gt; for Python 2). &lt;a href=&quot;https://docs.python.org/3/library/gettext.html#gettext.NullTranslations&quot;&gt;&lt;code&gt;gettext.NullTranslations&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/gettext.html#gettext.GNUTranslations&quot;&gt;&lt;code&gt;gettext.GNUTranslations&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;http://babel.pocoo.org/&quot;&gt;Babel&lt;/a&gt;s &lt;code&gt;Translations&lt;/code&gt; are supported.</source>
          <target state="translated">为环境全局安装翻译。的 &lt;code&gt;translations&lt;/code&gt; 对象必须实现 &lt;code&gt;gettext&lt;/code&gt; 和 &lt;code&gt;ngettext&lt;/code&gt; （或 &lt;code&gt;ugettext&lt;/code&gt; 和 &lt;code&gt;ungettext&lt;/code&gt; 用于Python 2）。&lt;a href=&quot;https://docs.python.org/3/library/gettext.html#gettext.NullTranslations&quot;&gt; &lt;code&gt;gettext.NullTranslations&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://docs.python.org/3/library/gettext.html#gettext.GNUTranslations&quot;&gt; &lt;code&gt;gettext.GNUTranslations&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;http://babel.pocoo.org/&quot;&gt;Babel&lt;/a&gt;的 &lt;code&gt;Translations&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="60d5c956762845438ccaf9b76c411588687786a3" translate="yes" xml:space="preserve">
          <source>Integers are whole numbers without a decimal part. The &amp;lsquo;_&amp;rsquo; character can be used to separate groups for legibility.</source>
          <target state="translated">整数是不带小数部分的整数。字符&amp;ldquo; _&amp;rdquo;可用于分隔各个组，以提高可读性。</target>
        </trans-unit>
        <trans-unit id="899e5920ef1372292f1f4f69d3125e5a5f5a1dfb" translate="yes" xml:space="preserve">
          <source>Integration</source>
          <target state="translated">Integration</target>
        </trans-unit>
        <trans-unit id="f584b9fddc3e51e07ba0553faa3cbc6a030e31d8" translate="yes" xml:space="preserve">
          <source>Intelligently sets the initial value of autoescaping based on the filename of the template. This is the recommended way to configure autoescaping if you do not want to write a custom function yourself.</source>
          <target state="translated">根据模板的文件名智能地设置自动剪裁的初始值。如果你不想自己写一个自定义函数,建议采用这种方式来配置自动收尾。</target>
        </trans-unit>
        <trans-unit id="eab664b67f2c72e76aab0840d8bfcfb037686d1e" translate="yes" xml:space="preserve">
          <source>Internally the code generator is used for finding undeclared variables. This is good to know because the code generator might raise a &lt;code&gt;TemplateAssertionError&lt;/code&gt; during compilation and as a matter of fact this function can currently raise that exception as well.</source>
          <target state="translated">在内部，代码生成器用于查找未声明的变量。知道这很高兴，因为代码生成器可能会在编译过程中引发 &lt;code&gt;TemplateAssertionError&lt;/code&gt; ，事实上，该函数当前还可以引发该异常。</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="f32f0ff9be2c310ee947f1d66c4deba76dc0ea1e" translate="yes" xml:space="preserve">
          <source>Isn&amp;rsquo;t it a terrible idea to put Logic into Templates?</source>
          <target state="translated">将逻辑放入模板中不是一个糟糕的主意吗？</target>
        </trans-unit>
        <trans-unit id="6290d9789245f7daf40215e1134ad57e27cc626e" translate="yes" xml:space="preserve">
          <source>It accepts the same arguments as &lt;a href=&quot;#jinja2.Template.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">它接受与&lt;a href=&quot;#jinja2.Template.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt;相同的参数。</target>
        </trans-unit>
        <trans-unit id="d0dc2e6882af612afc6976725a957c012445c3c6" translate="yes" xml:space="preserve">
          <source>It is also possible to join certain attributes of an object:</source>
          <target state="translated">也可以加入对象的某些属性。</target>
        </trans-unit>
        <trans-unit id="b033abeb8de2d4626d95e46f18891bdb17125f11" translate="yes" xml:space="preserve">
          <source>It is also possible to sum up only certain attributes:</source>
          <target state="translated">也可以只总结出某些属性。</target>
        </trans-unit>
        <trans-unit id="b43993be8c54e2a9d20be450da96a8b9c1b70350" translate="yes" xml:space="preserve">
          <source>It is also possible to use inline &lt;code&gt;if&lt;/code&gt; expressions. These are useful in some situations. For example, you can use this to extend from one template if a variable is defined, otherwise from the default layout template:</source>
          <target state="translated">也可以使用内联 &lt;code&gt;if&lt;/code&gt; 表达式。这些在某些情况下很有用。例如，如果定义了变量，则可以使用它从一个模板扩展，否则可以从默认布局模板扩展：</target>
        </trans-unit>
        <trans-unit id="594951f8a785be041e02687f22c950827aa35dd7" translate="yes" xml:space="preserve">
          <source>It is also possible to use loops recursively. This is useful if you are dealing with recursive data such as sitemaps or RDFa. To use loops recursively, you basically have to add the &lt;code&gt;recursive&lt;/code&gt; modifier to the loop definition and call the &lt;code&gt;loop&lt;/code&gt; variable with the new iterable where you want to recurse.</source>
          <target state="translated">还可以递归使用循环。如果您要处理递归数据（例如站点地图或RDFa），这将很有用。要递归使用循环，基本上必须将 &lt;code&gt;recursive&lt;/code&gt; 修饰符添加到循环定义中，并在要递归的位置使用新的iterable调用 &lt;code&gt;loop&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="23a8b50987ed659039a7ed77ff50ad4c4d7e4b73" translate="yes" xml:space="preserve">
          <source>It is not possible to use Jinja to process non-Unicode data. The reason for this is that Jinja uses Unicode already on the language level. For example Jinja treats the non-breaking space as valid whitespace inside expressions which requires knowledge of the encoding or operating on an Unicode string.</source>
          <target state="translated">不可能使用Jinja来处理非Unicode数据。原因是Jinja已经在语言层面上使用了Unicode。例如,Jinja将表达式中的非断裂空间视为有效的空白,这需要了解编码知识或在Unicode字符串上操作。</target>
        </trans-unit>
        <trans-unit id="4d615355d6f0fc54068399597186def7aaad3c93" translate="yes" xml:space="preserve">
          <source>It is not possible with Jinja syntax to do this. Instead use alternative constructs like the loop else block or the special &lt;code&gt;loop&lt;/code&gt; variable:</source>
          <target state="translated">Jinja语法无法做到这一点。而是使用替代构造，例如循环else块或特殊 &lt;code&gt;loop&lt;/code&gt; 变量：</target>
        </trans-unit>
        <trans-unit id="f97e8f95cf1fb68001ac5c153ce9fed23bebf2d4" translate="yes" xml:space="preserve">
          <source>It is sometimes desirable &amp;ndash; even necessary &amp;ndash; to have Jinja ignore parts it would otherwise handle as variables or blocks. For example, if, with the default syntax, you want to use &lt;code&gt;{{&lt;/code&gt; as a raw string in a template and not start a variable, you have to use a trick.</source>
          <target state="translated">有时希望-甚至有必要-让Jinja忽略原本会作为变量或块处理的部分。例如，如果使用默认语法，您想在模板中使用 &lt;code&gt;{{&lt;/code&gt; 作为原始字符串，而不要启动变量，则必须使用技巧。</target>
        </trans-unit>
        <trans-unit id="7f05715bf9d62354e4de5724655ba1e92bfffe69" translate="yes" xml:space="preserve">
          <source>It requires the i18n extension to be loaded and configured.</source>
          <target state="translated">它需要加载和配置i18n扩展。</target>
        </trans-unit>
        <trans-unit id="e374a9d409afbf8929739d42aca346d7d8a06a57" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s also possible to pass arguments back to the call block. This makes it useful as a replacement for loops. Generally speaking, a call block works exactly like a macro without a name.</source>
          <target state="translated">也可以将参数传递回调用块。这使得它可以代替循环。一般来说，调用块的工作原理与没有名称的宏完全相同。</target>
        </trans-unit>
        <trans-unit id="1a89a86dcb05fc0c5c840186b12e20efc56b95dc" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to know that the outer double-curly braces are &lt;em&gt;not&lt;/em&gt; part of the variable, but the print statement. If you access variables inside tags don&amp;rsquo;t put the braces around them.</source>
          <target state="translated">重要的是要知道外部双花括号&lt;em&gt;不是&lt;/em&gt;变量的一部分，而是print语句。如果您访问标签内的变量，请不要在其周围加上花括号。</target>
        </trans-unit>
        <trans-unit id="ed21f49002637c8d1e8b3284b8fdbedfb8e5fa4f" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s passed a &lt;a href=&quot;#jinja2.lexer.TokenStream&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; that can be used to filter tokens returned. This method has to return an iterable of &lt;a href=&quot;#jinja2.lexer.Token&quot;&gt;&lt;code&gt;Token&lt;/code&gt;&lt;/a&gt;s, but it doesn&amp;rsquo;t have to return a &lt;a href=&quot;#jinja2.lexer.TokenStream&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">它传递了&lt;a href=&quot;#jinja2.lexer.TokenStream&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;，可用于过滤返回的令牌。此方法必须返回&lt;a href=&quot;#jinja2.lexer.Token&quot;&gt; &lt;code&gt;Token&lt;/code&gt; &lt;/a&gt;的可迭代对象，但不必返回&lt;a href=&quot;#jinja2.lexer.TokenStream&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="059227de52ad3f3176f97e4d1c9a5d7dd1b03774" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to render the contents of the parent block by calling &lt;code&gt;super()&lt;/code&gt;. This gives back the results of the parent block:</source>
          <target state="translated">可以通过调用 &lt;code&gt;super()&lt;/code&gt; 来渲染父块的内容。这将返回父块的结果：</target>
        </trans-unit>
        <trans-unit id="6c75651bd3c56b12e0bdaeeb79e1aa5f1e543650" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to translate strings in expressions with these functions:</source>
          <target state="translated">可以使用以下功能转换表达式中的字符串：</target>
        </trans-unit>
        <trans-unit id="d87bbe276ab57f2ef5a22ddc7542b9088e101acc" translate="yes" xml:space="preserve">
          <source>Iterates over all direct child nodes of the node. This iterates over all fields and yields the values of they are nodes. If the value of a field is a list all the nodes in that list are returned.</source>
          <target state="translated">遍历该节点的所有直接子节点。遍历所有的字段,并产生它们的节点值,如果字段的值是一个列表,则返回该列表中的所有节点。如果一个字段的值是一个列表,则返回该列表中的所有节点。</target>
        </trans-unit>
        <trans-unit id="71e668206e64e10b5b29241221c060363b4ea63e" translate="yes" xml:space="preserve">
          <source>Jinja</source>
          <target state="translated">Jinja</target>
        </trans-unit>
        <trans-unit id="f4d5fb632b86cbd4da03f0ce22ffb07486f9aea6" translate="yes" xml:space="preserve">
          <source>Jinja 1</source>
          <target state="translated">Jinja 1</target>
        </trans-unit>
        <trans-unit id="946407cdb3360b2d934ed21dcc6be30b1527846c" translate="yes" xml:space="preserve">
          <source>Jinja 2.1 and higher support external bytecode caching. Bytecode caches make it possible to store the generated bytecode on the file system or a different location to avoid parsing the templates on first use.</source>
          <target state="translated">Jinja 2.1及以上版本支持外部字节码缓存。通过字节码缓存,可以将生成的字节码存储在文件系统或其他位置,以避免在第一次使用时解析模板。</target>
        </trans-unit>
        <trans-unit id="16144f0c07bcda1a02805c1458c435a815402592" translate="yes" xml:space="preserve">
          <source>Jinja allows basic expressions everywhere. These work very similarly to regular Python; even if you&amp;rsquo;re not working with Python you should feel comfortable with it.</source>
          <target state="translated">Jinja允许在任何地方使用基本表达式。它们的工作方式与常规Python非常相似；即使您不使用Python，也应该对此感到满意。</target>
        </trans-unit>
        <trans-unit id="6cb1577ab1f27250d685b8790f71a5fcd783cf29" translate="yes" xml:space="preserve">
          <source>Jinja allows you to calculate with values. This is rarely useful in templates but exists for completeness&amp;rsquo; sake. The following operators are supported:</source>
          <target state="translated">Jinja允许您使用值进行计算。这在模板中很少有用，但出于完整性考虑而存在。支持以下运算符：</target>
        </trans-unit>
        <trans-unit id="d492d25e21fb8a91ac197c7d9d29524af7bc36a7" translate="yes" xml:space="preserve">
          <source>Jinja allows you to put the name of the block after the end tag for better readability:</source>
          <target state="translated">Jinja允许你把区块的名称放在结束标签之后,以提高可读性。</target>
        </trans-unit>
        <trans-unit id="7706fc007d928bb3a43d809f87f7c546dcf3f483" translate="yes" xml:space="preserve">
          <source>Jinja functions (macros, &lt;code&gt;super&lt;/code&gt;, &lt;code&gt;self.BLOCKNAME&lt;/code&gt;) always return template data that is marked as safe.</source>
          <target state="translated">Jinja函数（macros， &lt;code&gt;super&lt;/code&gt; ， &lt;code&gt;self.BLOCKNAME&lt;/code&gt; ）始终返回标记为安全的模板数据。</target>
        </trans-unit>
        <trans-unit id="bb3cd5d24d552105564e446dfb76b64aa1c85594" translate="yes" xml:space="preserve">
          <source>Jinja is a modern and designer-friendly templating language for Python, modelled after Django&amp;rsquo;s templates. It is fast, widely used and secure with the optional sandboxed template execution environment:</source>
          <target state="translated">Jinja是一种现代且设计友好的Python模板语言，以Django的模板为模型。借助可选的沙盒模板执行环境，它可以快速，广泛地使用并且安全：</target>
        </trans-unit>
        <trans-unit id="a45462c996514012f784f6daabd4eef875d57f23" translate="yes" xml:space="preserve">
          <source>Jinja is using Unicode internally which means that you have to pass Unicode objects to the render function or bytestrings that only consist of ASCII characters. Additionally newlines are normalized to one end of line sequence which is per default UNIX style (&lt;code&gt;\n&lt;/code&gt;).</source>
          <target state="translated">Jinja在内部使用Unicode，这意味着您必须将Unicode对象传递给render函数或仅由ASCII字符组成的字节串。另外，换行符被规范化为默认情况下UNIX样式（ &lt;code&gt;\n&lt;/code&gt; ）的行尾。</target>
        </trans-unit>
        <trans-unit id="df30241f2a47bda125983fe2ddb585ba0d55367f" translate="yes" xml:space="preserve">
          <source>Jinja keeps internal caches for environments and lexers. These are used so that Jinja doesn&amp;rsquo;t have to recreate environments and lexers all the time. Normally you don&amp;rsquo;t have to care about that but if you are measuring memory consumption you may want to clean the caches.</source>
          <target state="translated">Jinja为环境和词法分析器保留内部缓存。使用它们是为了让Jinja不必一直重新创建环境和词法分析器。通常，您不必关心这一点，但是如果要测量内存消耗，则可能需要清除缓存。</target>
        </trans-unit>
        <trans-unit id="b091e3f3fab7bd114493aaf68be0824638cb5d06" translate="yes" xml:space="preserve">
          <source>Jinja now comes with autoescaping support. As of Jinja 2.9 the autoescape extension is removed and built-in. However autoescaping is not yet enabled by default though this will most likely change in the future. It&amp;rsquo;s recommended to configure a sensible default for autoescaping. This makes it possible to enable and disable autoescaping on a per-template basis (HTML versus text for instance).</source>
          <target state="translated">Jinja现在提供自动转义支持。从Jinja 2.9开始，自动转义扩展已删除并内置。尽管默认情况下将来很可能会更改，但默认情况下尚未启用自动转义。建议为自动转义配置合理的默认值。这样就可以在每个模板的基础上启用和禁用自动转义（例如HTML与文本）。</target>
        </trans-unit>
        <trans-unit id="a5c8ed7cf314cc737152b5a1c94b6f8e4b0ba624" translate="yes" xml:space="preserve">
          <source>Jinja supports both. What is used depends on the application configuration. The default configuration is no automatic escaping; for various reasons:</source>
          <target state="translated">Jinja同时支持这两种方式。使用什么取决于应用程序的配置。默认的配置是没有自动转义;由于各种原因。</target>
        </trans-unit>
        <trans-unit id="7b89413ad7b09d09dfc316133972295d35e2541f" translate="yes" xml:space="preserve">
          <source>Jinja supports dynamic inheritance and does not distinguish between parent and child template as long as no &lt;code&gt;extends&lt;/code&gt; tag is visited. While this leads to the surprising behavior that everything before the first &lt;code&gt;extends&lt;/code&gt; tag including whitespace is printed out instead of being ignored, it can be used for a neat trick.</source>
          <target state="translated">Jinja支持动态继承，并且只要不访问 &lt;code&gt;extends&lt;/code&gt; 标记，就不会在父模板和子模板之间进行区分。虽然这导致了令人惊讶的行为，即第一个 &lt;code&gt;extends&lt;/code&gt; 标签（包括空格）之前的所有内容都被打印出来而不是被忽略，但可以将其用于巧妙的技巧。</target>
        </trans-unit>
        <trans-unit id="4cd59403c24a521ac182d5df5ba724068ebfdb77" translate="yes" xml:space="preserve">
          <source>Jinja supports extensions that can add extra filters, tests, globals or even extend the parser. The main motivation of extensions is to move often used code into a reusable class like adding support for internationalization.</source>
          <target state="translated">Jinja支持扩展,可以添加额外的过滤器、测试、globals甚至扩展解析器。扩展的主要动机是将经常使用的代码移到一个可重用的类中,比如增加对国际化的支持。</target>
        </trans-unit>
        <trans-unit id="210c53ed3cecb52c74e70c7a9e20396391cf7b8f" translate="yes" xml:space="preserve">
          <source>Jinja supports putting often used code into macros. These macros can go into different templates and get imported from there. This works similarly to the import statements in Python. It&amp;rsquo;s important to know that imports are cached and imported templates don&amp;rsquo;t have access to the current template variables, just the globals by default. For more details about context behavior of imports and includes, see &lt;a href=&quot;#import-visibility&quot;&gt;Import Context Behavior&lt;/a&gt;.</source>
          <target state="translated">Jinja支持将常用代码放入宏。这些宏可以进入不同的模板，然后从那里导入。这类似于Python中的import语句。重要的是要知道导入已被缓存，并且导入的模板无权访问当前模板变量，默认情况下只能访问全局变量。有关导入和包含的上下文行为的更多详细信息，请参见&amp;ldquo;&lt;a href=&quot;#import-visibility&quot;&gt;导入上下文行为&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1bd03626c5d6510b4397d39934233ba17ffaacee" translate="yes" xml:space="preserve">
          <source>Jinja supports the Python &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; syntax. For the template designer, this support (when enabled) is entirely transparent, templates continue to look exactly the same. However, developers should be aware of the implementation as it affects what types of APIs you can use.</source>
          <target state="translated">Jinja支持Python &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 语法。对于模板设计者来说，这种支持（启用时）是完全透明的，模板看起来仍然完全相同。但是，开发人员应注意实现，因为它会影响您可以使用的API类型。</target>
        </trans-unit>
        <trans-unit id="ed10d37e069c003353d830b01ca17bbad7f83655" translate="yes" xml:space="preserve">
          <source>Jinja uses Python naming rules. Valid identifiers can be any combination of Unicode characters accepted by Python.</source>
          <target state="translated">Jinja 使用 Python 命名规则。有效的标识符可以是Python接受的Unicode字符的任意组合。</target>
        </trans-unit>
        <trans-unit id="4397ca48f3c20d000d70623f5a529ceb40799d40" translate="yes" xml:space="preserve">
          <source>Jinja uses a central object called the template &lt;a href=&quot;#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt;. Instances of this class are used to store the configuration and global objects, and are used to load templates from the file system or other locations. Even if you are creating templates from strings by using the constructor of &lt;a href=&quot;#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; class, an environment is created automatically for you, albeit a shared one.</source>
          <target state="translated">Jinja使用一个称为模板&lt;a href=&quot;#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;的中心对象。此类的实例用于存储配置和全局对象，并用于从文件系统或其他位置加载模板。即使您使用&lt;a href=&quot;#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;类的构造函数从字符串创建模板，也会为您自动创建一个环境，即使它是共享的。</target>
        </trans-unit>
        <trans-unit id="605b2427907134b113ac7a909f0da56a469035b5" translate="yes" xml:space="preserve">
          <source>Jinja works with Python 2.7.x and &amp;gt;= 3.5. If you are using Python 3.2 you can use an older release of Jinja (2.6) as support for Python 3.2 was dropped in Jinja version 2.7. The last release which supported Python 2.6 and 3.3 was Jinja 2.10.</source>
          <target state="translated">Jinja使用Python 2.7.x和&amp;gt; = 3.5。如果您使用的是Python 3.2，则可以使用旧版的Jinja（2.6），因为Jinja版本2.7中已不再支持Python 3.2。支持Python 2.6和3.3的最新版本是Jinja 2.10。</target>
        </trans-unit>
        <trans-unit id="8f3b5916d2a4b20eb412327663e682510062465b" translate="yes" xml:space="preserve">
          <source>Join a template with the parent. By default all the lookups are relative to the loader root so this method returns the &lt;code&gt;template&lt;/code&gt; parameter unchanged, but if the paths should be relative to the parent template, this function can be used to calculate the real template name.</source>
          <target state="translated">与父级一起加入模板。默认情况下，所有查找都是相对于加载程序根目录的，因此此方法返回的 &lt;code&gt;template&lt;/code&gt; 参数保持不变，但是如果路径应相对于父模板，则此函数可用于计算真实的模板名称。</target>
        </trans-unit>
        <trans-unit id="3530aa156d98d31c3299e4de21cc48be7e08f0f3" translate="yes" xml:space="preserve">
          <source>Keyword arguments to be passed to the dump function. The default is &lt;code&gt;{'sort_keys': True}&lt;/code&gt;.</source>
          <target state="translated">要传递给转储函数的关键字参数。默认值为 &lt;code&gt;{'sort_keys': True}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56acd5dbea97e013d544c6346caa9557af0b12ad" translate="yes" xml:space="preserve">
          <source>Left modulo right.</source>
          <target state="translated">左模右样。</target>
        </trans-unit>
        <trans-unit id="3d68a1e6ef78e572fd827abeb48b352478d8ce1b" translate="yes" xml:space="preserve">
          <source>Left to the power of right.</source>
          <target state="translated">左到右的力量。</target>
        </trans-unit>
        <trans-unit id="39142c6b71db5798f9f33d0035e6f2ed4d2ace86" translate="yes" xml:space="preserve">
          <source>Lex the given sourcecode and return a generator that yields tokens as tuples in the form &lt;code&gt;(lineno, token_type, value)&lt;/code&gt;. This can be useful for &lt;a href=&quot;../extensions/index#writing-extensions&quot;&gt;extension development&lt;/a&gt; and debugging templates.</source>
          <target state="translated">Lex给定的源代码，并返回一个生成器，生成器以 &lt;code&gt;(lineno, token_type, value)&lt;/code&gt; 形式的元组生成令牌。这对于&lt;a href=&quot;../extensions/index#writing-extensions&quot;&gt;扩展程序开发&lt;/a&gt;和调试模板很有用。</target>
        </trans-unit>
        <trans-unit id="51548647bc2bf6a726a9a83a78d8041e65cdd415" translate="yes" xml:space="preserve">
          <source>Libraries compatible with this class:</source>
          <target state="translated">与该类兼容的库。</target>
        </trans-unit>
        <trans-unit id="9fc9c5a7d8326df046caa8d770d0b0dc0dbc12f4" translate="yes" xml:space="preserve">
          <source>Licensed under the BSD 3-clause License.</source>
          <target state="translated">采用BSD 3-clause授权许可。</target>
        </trans-unit>
        <trans-unit id="8151908d5efe395712145d5bbe5ed924288208f5" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#defined&quot;&gt;&lt;code&gt;defined()&lt;/code&gt;&lt;/a&gt; but the other way round.</source>
          <target state="translated">像&lt;a href=&quot;#defined&quot;&gt; &lt;code&gt;defined()&lt;/code&gt; &lt;/a&gt;一样，但是反过来。</target>
        </trans-unit>
        <trans-unit id="a8da5d9971ba42611d9c706ff4258e01b6fe2016" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#jinja2.TemplateNotFound&quot;&gt;&lt;code&gt;TemplateNotFound&lt;/code&gt;&lt;/a&gt; but raised if multiple templates are selected. This is a subclass of &lt;a href=&quot;#jinja2.TemplateNotFound&quot;&gt;&lt;code&gt;TemplateNotFound&lt;/code&gt;&lt;/a&gt; exception, so just catching the base exception will catch both.</source>
          <target state="translated">类似于&lt;a href=&quot;#jinja2.TemplateNotFound&quot;&gt; &lt;code&gt;TemplateNotFound&lt;/code&gt; ,&lt;/a&gt;但是如果选择了多个模板则引发。这是&lt;a href=&quot;#jinja2.TemplateNotFound&quot;&gt; &lt;code&gt;TemplateNotFound&lt;/code&gt; &lt;/a&gt;异常的子类，因此仅捕获基本异常将同时捕获这两个异常。</target>
        </trans-unit>
        <trans-unit id="162e342e34706fd4bdf15b368eef58e7d3950f8a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#jinja2.lexer.TokenStream.next_if&quot;&gt;&lt;code&gt;next_if()&lt;/code&gt;&lt;/a&gt; but only returns &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">与&lt;a href=&quot;#jinja2.lexer.TokenStream.next_if&quot;&gt; &lt;code&gt;next_if()&lt;/code&gt; &lt;/a&gt;类似，但仅返回 &lt;code&gt;True&lt;/code&gt; 或 &lt;code&gt;False&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="993fece9788acd63a14b1869b990f044a7ffa68d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;varargs&lt;/code&gt; but for keyword arguments. All unconsumed keyword arguments are stored in this special variable.</source>
          <target state="translated">像 &lt;code&gt;varargs&lt;/code&gt; 一样，但用于关键字参数。所有未使用的关键字参数都存储在此特殊变量中。</target>
        </trans-unit>
        <trans-unit id="5303b012364add13c05ee99b17e9cb50cfa22480" translate="yes" xml:space="preserve">
          <source>Like a macro without a name but a call instead. &lt;code&gt;call&lt;/code&gt; is called with the unnamed macro as &lt;code&gt;caller&lt;/code&gt; argument this node holds.</source>
          <target state="translated">就像没有名称而是调用的宏。用未命名的宏作为该节点保存的 &lt;code&gt;caller&lt;/code&gt; 参数 &lt;code&gt;call&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a0721ad6b848b88db3c17caa1b8005d2b6b9848" translate="yes" xml:space="preserve">
          <source>Like a template syntax error, but covers cases where something in the template caused an error at compile time that wasn&amp;rsquo;t necessarily caused by a syntax error. However it&amp;rsquo;s a direct subclass of &lt;a href=&quot;#jinja2.TemplateSyntaxError&quot;&gt;&lt;code&gt;TemplateSyntaxError&lt;/code&gt;&lt;/a&gt; and has the same attributes.</source>
          <target state="translated">与模板语法错误类似，但涵盖了模板中的某些内容在编译时导致错误（不一定由语法错误引起）的情况。但是，它是&lt;a href=&quot;#jinja2.TemplateSyntaxError&quot;&gt; &lt;code&gt;TemplateSyntaxError&lt;/code&gt; &lt;/a&gt;的直接子类，并且具有相同的属性。</target>
        </trans-unit>
        <trans-unit id="21fd602681d11228f1b93e6c213768e7e3e6d70b" translate="yes" xml:space="preserve">
          <source>Likewise, a loop that stops processing after the 10th iteration:</source>
          <target state="translated">同样,一个循环在第10次迭代后也会停止处理。</target>
        </trans-unit>
        <trans-unit id="8293a155a55761899b92de146d94fa3b701fb150" translate="yes" xml:space="preserve">
          <source>Line Statements</source>
          <target state="translated">行声明</target>
        </trans-unit>
        <trans-unit id="169ff8674fa8bf2f0bbe544f8d6954d5b2063683" translate="yes" xml:space="preserve">
          <source>Line statements can span multiple lines if there are open parentheses, braces or brackets:</source>
          <target state="translated">如果有开括号、大括号或括号,行语句可以跨越多行。</target>
        </trans-unit>
        <trans-unit id="c071b56a812bba10f41c125c69adecb0e55778b7" translate="yes" xml:space="preserve">
          <source>Linebreaks and surrounding whitespace can be automatically trimmed by enabling the &lt;code&gt;ext.i18n.trimmed&lt;/code&gt;&lt;a href=&quot;../api/index#ext-i18n-trimmed&quot;&gt;policy&lt;/a&gt;.</source>
          <target state="translated">通过启用 &lt;code&gt;ext.i18n.trimmed&lt;/code&gt; &lt;a href=&quot;../api/index#ext-i18n-trimmed&quot;&gt;策略，&lt;/a&gt;可以自动调整换行符和周围的空格。</target>
        </trans-unit>
        <trans-unit id="2825ac1636672e90c9b4c72971a5d958c8080f86" translate="yes" xml:space="preserve">
          <source>List of Builtin Filters</source>
          <target state="translated">内置过滤器列表</target>
        </trans-unit>
        <trans-unit id="fb95615c5ddd6dd10ad63f94212c0c9e27d7dc4a" translate="yes" xml:space="preserve">
          <source>List of Builtin Tests</source>
          <target state="translated">内置测试列表</target>
        </trans-unit>
        <trans-unit id="0f71c673a27566220a3f9fd440f6f51fbfd9d440" translate="yes" xml:space="preserve">
          <source>List of Control Structures</source>
          <target state="translated">控制结构列表</target>
        </trans-unit>
        <trans-unit id="e817b7a5327d9273abd9fd5d33db6ef5eb4773fe" translate="yes" xml:space="preserve">
          <source>List of Global Functions</source>
          <target state="translated">全局函数列表</target>
        </trans-unit>
        <trans-unit id="fd3a26d226248ca6380c465173eafa113fa6477a" translate="yes" xml:space="preserve">
          <source>List of Jinja extensions to use. This can either be import paths as strings or extension classes. For more information have a look at &lt;a href=&quot;../extensions/index#jinja-extensions&quot;&gt;the extensions documentation&lt;/a&gt;.</source>
          <target state="translated">要使用的Jinja扩展列表。这可以是作为字符串或扩展类的导入路径。有关更多信息，请&lt;a href=&quot;../extensions/index#jinja-extensions&quot;&gt;参阅扩展文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c7ba7dcf662374aafe652b03d75cb8f6024519d9" translate="yes" xml:space="preserve">
          <source>Literals</source>
          <target state="translated">Literals</target>
        </trans-unit>
        <trans-unit id="14a43c7bfa5c296e61aae3f705c49a988618277a" translate="yes" xml:space="preserve">
          <source>Load a template from a string. This parses the source given and returns a &lt;a href=&quot;#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">从字符串加载模板。这将解析给定的源并返回一个&lt;a href=&quot;#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="5151584e65de830cbc21f12460190c86035d18dc" translate="yes" xml:space="preserve">
          <source>Load a template from the loader. If a loader is configured this method asks the loader for the template and returns a &lt;a href=&quot;#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt;. If the &lt;code&gt;parent&lt;/code&gt; parameter is not &lt;code&gt;None&lt;/code&gt;, &lt;a href=&quot;#jinja2.Environment.join_path&quot;&gt;&lt;code&gt;join_path()&lt;/code&gt;&lt;/a&gt; is called to get the real template name before loading.</source>
          <target state="translated">从加载器加载模板。如果配置了加载程序，则此方法向加载程序询问模板并返回&lt;a href=&quot;#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;。如果 &lt;code&gt;parent&lt;/code&gt; 参数不是 &lt;code&gt;None&lt;/code&gt; ，则在加载之前调用&lt;a href=&quot;#jinja2.Environment.join_path&quot;&gt; &lt;code&gt;join_path()&lt;/code&gt; &lt;/a&gt;以获取真实的模板名称。</target>
        </trans-unit>
        <trans-unit id="f2f2b3b274fe49be366483ff0345a6ccc6318bc8" translate="yes" xml:space="preserve">
          <source>Load bytecode from a string.</source>
          <target state="translated">从字符串中加载字节码。</target>
        </trans-unit>
        <trans-unit id="b24ef66290ab9f67f5342579e32cfb79620aed89" translate="yes" xml:space="preserve">
          <source>Load templates from python eggs or packages. It is constructed with the name of the python package and the path to the templates in that package:</source>
          <target state="translated">从python蛋或包中加载模板。它是由python包的名称和该包中模板的路径构成的。</target>
        </trans-unit>
        <trans-unit id="4f514b04ed6b877534da140af8e12cab5016f713" translate="yes" xml:space="preserve">
          <source>Loaders</source>
          <target state="translated">Loaders</target>
        </trans-unit>
        <trans-unit id="b43ac5f1177f8bc0a0466d6b83568cc3543efc35" translate="yes" xml:space="preserve">
          <source>Loaders are responsible for loading templates from a resource such as the file system. The environment will keep the compiled modules in memory like Python&amp;rsquo;s &lt;code&gt;sys.modules&lt;/code&gt;. Unlike &lt;code&gt;sys.modules&lt;/code&gt; however this cache is limited in size by default and templates are automatically reloaded. All loaders are subclasses of &lt;a href=&quot;#jinja2.BaseLoader&quot;&gt;&lt;code&gt;BaseLoader&lt;/code&gt;&lt;/a&gt;. If you want to create your own loader, subclass &lt;a href=&quot;#jinja2.BaseLoader&quot;&gt;&lt;code&gt;BaseLoader&lt;/code&gt;&lt;/a&gt; and override &lt;code&gt;get_source&lt;/code&gt;.</source>
          <target state="translated">加载程序负责从资源（例如文件系统）加载模板。环境将像Python的 &lt;code&gt;sys.modules&lt;/code&gt; 一样将已编译的模块保留在内存中。与 &lt;code&gt;sys.modules&lt;/code&gt; 不同，默认情况下，此缓存的大小受到限制，并且模板会自动重新加载。所有加载器都是&lt;a href=&quot;#jinja2.BaseLoader&quot;&gt; &lt;code&gt;BaseLoader&lt;/code&gt; 的&lt;/a&gt;子类。如果要创建自己的加载器，请子类&lt;a href=&quot;#jinja2.BaseLoader&quot;&gt; &lt;code&gt;BaseLoader&lt;/code&gt; &lt;/a&gt;并重写 &lt;code&gt;get_source&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a930b383a7cbc3cb0f9a0e8ea6c4a116ea41cffe" translate="yes" xml:space="preserve">
          <source>Loads a template from a python dict. It&amp;rsquo;s passed a dict of unicode strings bound to template names. This loader is useful for unittesting:</source>
          <target state="translated">从python字典加载模板。它传递了绑定到模板名称的unicode字符串字典。该加载器对于单元测试非常有用：</target>
        </trans-unit>
        <trans-unit id="639936db3efc1ac9c9ca69d06a43b399c3c2d5a1" translate="yes" xml:space="preserve">
          <source>Loads a template. This method looks up the template in the cache or loads one by calling &lt;a href=&quot;#jinja2.BaseLoader.get_source&quot;&gt;&lt;code&gt;get_source()&lt;/code&gt;&lt;/a&gt;. Subclasses should not override this method as loaders working on collections of other loaders (such as &lt;a href=&quot;#jinja2.PrefixLoader&quot;&gt;&lt;code&gt;PrefixLoader&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#jinja2.ChoiceLoader&quot;&gt;&lt;code&gt;ChoiceLoader&lt;/code&gt;&lt;/a&gt;) will not call this method but &lt;code&gt;get_source&lt;/code&gt; directly.</source>
          <target state="translated">加载模板。此方法在高速缓存中查找模板或通过调用&lt;a href=&quot;#jinja2.BaseLoader.get_source&quot;&gt; &lt;code&gt;get_source()&lt;/code&gt; &lt;/a&gt;加载一个模板。子类不应覆盖此方法，因为在其他加载程序（例如&lt;a href=&quot;#jinja2.PrefixLoader&quot;&gt; &lt;code&gt;PrefixLoader&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#jinja2.ChoiceLoader&quot;&gt; &lt;code&gt;ChoiceLoader&lt;/code&gt; &lt;/a&gt;）的集合上工作的加载程序将不会调用此方法，而是直接调用 &lt;code&gt;get_source&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b04f368eaa8a9e38822006d1776729e07561aa8d" translate="yes" xml:space="preserve">
          <source>Loads an attribute from the environment object. This is useful for extensions that want to call a callback stored on the environment.</source>
          <target state="translated">从环境对象中加载一个属性。这对于想要调用存储在环境中的回调的扩展很有用。</target>
        </trans-unit>
        <trans-unit id="3e85a39ac9a528f1c1f6fd3766041ac8932d2f08" translate="yes" xml:space="preserve">
          <source>Loads bytecode from a file or file like object.</source>
          <target state="translated">从文件或类似文件的对象中加载字节码。</target>
        </trans-unit>
        <trans-unit id="aa2e49c406e8f73f883375928fd698a533aaa5e9" translate="yes" xml:space="preserve">
          <source>Loads templates from the file system. This loader can find templates in folders on the file system and is the preferred way to load them.</source>
          <target state="translated">从文件系统中加载模板。该加载器可以在文件系统的文件夹中找到模板,是加载模板的首选方式。</target>
        </trans-unit>
        <trans-unit id="3d52a6d8fedcc48a65297c07bf5f7e3e41aab5aa" translate="yes" xml:space="preserve">
          <source>Logic</source>
          <target state="translated">Logic</target>
        </trans-unit>
        <trans-unit id="4533f9df0b6f09f29ed95bd055867753388884ab" translate="yes" xml:space="preserve">
          <source>Look at the next token.</source>
          <target state="translated">看下一个令牌。</target>
        </trans-unit>
        <trans-unit id="fd8f16b6684830088e1c680168692ebe092d894f" translate="yes" xml:space="preserve">
          <source>Looks up a name or stores a value in a name. The &lt;code&gt;ctx&lt;/code&gt; of the node can be one of the following values:</source>
          <target state="translated">查找名称或在名称中存储值。节点的 &lt;code&gt;ctx&lt;/code&gt; 可以是以下值之一：</target>
        </trans-unit>
        <trans-unit id="6b8d2a680ab11b98e9a1a0c3141081c3bb2d2504" translate="yes" xml:space="preserve">
          <source>Looks up a variable like &lt;code&gt;__getitem__&lt;/code&gt; or &lt;code&gt;get&lt;/code&gt; but returns an &lt;code&gt;Undefined&lt;/code&gt; object with the name of the name looked up.</source>
          <target state="translated">查找类似于 &lt;code&gt;__getitem__&lt;/code&gt; 或 &lt;code&gt;get&lt;/code&gt; 的变量，但返回一个具有查找名称名称的 &lt;code&gt;Undefined&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="340bf0701d40cacdb129bb163405ded4feefb5e5" translate="yes" xml:space="preserve">
          <source>Loop Controls</source>
          <target state="translated">回路控制</target>
        </trans-unit>
        <trans-unit id="fee5a14356621b73ac22c3c0edad01021765caac" translate="yes" xml:space="preserve">
          <source>Loop over each item in a sequence. For example, to display a list of users provided in a variable called &lt;code&gt;users&lt;/code&gt;:</source>
          <target state="translated">循环按顺序遍历每个项目。例如，要显示在名为 &lt;code&gt;users&lt;/code&gt; 的变量中提供的用户列表：</target>
        </trans-unit>
        <trans-unit id="9ca865a8a490fc8810ec3a9fa345a79f608deb03" translate="yes" xml:space="preserve">
          <source>Low Level API</source>
          <target state="translated">低层API</target>
        </trans-unit>
        <trans-unit id="899bd694d29ace1be956ab35177075021977560b" translate="yes" xml:space="preserve">
          <source>Macros</source>
          <target state="translated">Macros</target>
        </trans-unit>
        <trans-unit id="ae2e65c933b78817746b1dcc43fe5c7f32d80567" translate="yes" xml:space="preserve">
          <source>Macros also expose some of their internal details. The following attributes are available on a macro object:</source>
          <target state="translated">宏也会暴露其内部的一些细节。宏对象上有以下属性。</target>
        </trans-unit>
        <trans-unit id="df5dc7ea5f42c12118d24ed0274eed2fc826ccf6" translate="yes" xml:space="preserve">
          <source>Macros and variables starting with one or more underscores are private and cannot be imported.</source>
          <target state="translated">以一个或多个下划线开头的宏和变量是私有的,不能导入。</target>
        </trans-unit>
        <trans-unit id="1bdc22e555fa64ff909ae8c47560725b90bc6c2e" translate="yes" xml:space="preserve">
          <source>Macros are comparable with functions in regular programming languages. They are useful to put often used idioms into reusable functions to not repeat yourself (&amp;ldquo;DRY&amp;rdquo;).</source>
          <target state="translated">宏可与常规编程语言中的功能相提并论。它们有助于将常用的习惯用法放入可重用的函数中，以免重复您自己（&amp;ldquo; DRY&amp;rdquo;）。</target>
        </trans-unit>
        <trans-unit id="cd771391564f725523a24e35bdf974f60be4ffee" translate="yes" xml:space="preserve">
          <source>Make a string unicode if it isn&amp;rsquo;t already. That way a markup string is not converted back to unicode.</source>
          <target state="translated">如果尚未，则使它成为字符串unicode。这样，标记字符串不会转换回unicode。</target>
        </trans-unit>
        <trans-unit id="96c072dda13788eacfe54dbd0cd8b160850e7dc0" translate="yes" xml:space="preserve">
          <source>Make sure to always call into the super method, even if you are not intercepting the call. Jinja might internally call the method to evaluate expressions.</source>
          <target state="translated">确保总是调用到超级方法,即使你不拦截调用。Jinja可能会在内部调用该方法来评估表达式。</target>
        </trans-unit>
        <trans-unit id="c06666604013d589785c1f742dc6ae14eb425aa1" translate="yes" xml:space="preserve">
          <source>Make the expression negative.</source>
          <target state="translated">使之成为消极的表达方式。</target>
        </trans-unit>
        <trans-unit id="ff98f55e441ab51baaef3a29bf23c8d22a02823d" translate="yes" xml:space="preserve">
          <source>Make the expression positive (noop for most expressions)</source>
          <target state="translated">使表达式为正值(大多数表达式为noop)。</target>
        </trans-unit>
        <trans-unit id="1c100318c74842596fa0cc2cc9e28ce716d345b3" translate="yes" xml:space="preserve">
          <source>Mako</source>
          <target state="translated">Mako</target>
        </trans-unit>
        <trans-unit id="95f0d8c19bdd9a47e51e75395e472a31b525228e" translate="yes" xml:space="preserve">
          <source>Mark the value as safe which means that in an environment with automatic escaping enabled this variable will not be escaped.</source>
          <target state="translated">将该值标记为安全值,这意味着在启用自动转义的环境中,该变量不会被转义。</target>
        </trans-unit>
        <trans-unit id="64fa524c83a8d49e751bd6345e5d0748adf5dbcf" translate="yes" xml:space="preserve">
          <source>Mark the wrapped expression as safe (wrap it as &lt;code&gt;Markup&lt;/code&gt;) but only if autoescaping is active.</source>
          <target state="translated">将包装的表达式 &lt;code&gt;Markup&lt;/code&gt; 为安全（将其包装为Markup），但前提是自动转义处于活动状态。</target>
        </trans-unit>
        <trans-unit id="805e560b1e1b1a7bb445914ae4f4ed9e019cf86c" translate="yes" xml:space="preserve">
          <source>Mark the wrapped expression as safe (wrap it as &lt;code&gt;Markup&lt;/code&gt;).</source>
          <target state="translated">将包装的表达式 &lt;code&gt;Markup&lt;/code&gt; 为安全（将其包装为Markup）。</target>
        </trans-unit>
        <trans-unit id="bfc8362c4f90e382aca4f9512f42c27dfeb04c0b" translate="yes" xml:space="preserve">
          <source>Marks a function or method as unsafe.</source>
          <target state="translated">将一个函数或方法标记为不安全。</target>
        </trans-unit>
        <trans-unit id="fb28bed84acdfef42936eae3c2a14942ba537601" translate="yes" xml:space="preserve">
          <source>MarkupSafe Dependency</source>
          <target state="translated">MarkupSafe依赖性</target>
        </trans-unit>
        <trans-unit id="3edf0df49942da6d11a1a217e4d3af4a5a8e64f2" translate="yes" xml:space="preserve">
          <source>Math</source>
          <target state="translated">Math</target>
        </trans-unit>
        <trans-unit id="42f2d78f8254066cec6acc4db94e8d330b6e4dfa" translate="yes" xml:space="preserve">
          <source>Minus sign at the end of &lt;code&gt;{% raw -%}&lt;/code&gt; tag cleans all the spaces and newlines preceding the first character of your raw data.</source>
          <target state="translated">&lt;code&gt;{% raw -%}&lt;/code&gt; 标记末尾的减号清除原始数据第一个字符之前的所有空格和换行符。</target>
        </trans-unit>
        <trans-unit id="aad0fd9cd9d6e4281600f50478d3d8f4139bede7" translate="yes" xml:space="preserve">
          <source>Modifies the eval context and reverts it later. Works exactly like &lt;a href=&quot;#jinja2.nodes.EvalContextModifier&quot;&gt;&lt;code&gt;EvalContextModifier&lt;/code&gt;&lt;/a&gt; but will only modify the &lt;a href=&quot;../api/index#jinja2.nodes.EvalContext&quot;&gt;&lt;code&gt;EvalContext&lt;/code&gt;&lt;/a&gt; for nodes in the &lt;code&gt;body&lt;/code&gt;.</source>
          <target state="translated">修改评估上下文并稍后还原。作品酷似&lt;a href=&quot;#jinja2.nodes.EvalContextModifier&quot;&gt; &lt;code&gt;EvalContextModifier&lt;/code&gt; &lt;/a&gt;但只会修改&lt;a href=&quot;../api/index#jinja2.nodes.EvalContext&quot;&gt; &lt;code&gt;EvalContext&lt;/code&gt; &lt;/a&gt;在节点的 &lt;code&gt;body&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="24b3b9baf1c4a126f56e8a9004769461d5a466c7" translate="yes" xml:space="preserve">
          <source>Modifies the eval context. For each option that should be modified, a &lt;a href=&quot;#jinja2.nodes.Keyword&quot;&gt;&lt;code&gt;Keyword&lt;/code&gt;&lt;/a&gt; has to be added to the &lt;code&gt;options&lt;/code&gt; list.</source>
          <target state="translated">修改评估上下文。对于每个应修改的选项，必须将&lt;a href=&quot;#jinja2.nodes.Keyword&quot;&gt; &lt;code&gt;Keyword&lt;/code&gt; &lt;/a&gt;添加到 &lt;code&gt;options&lt;/code&gt; 列表中。</target>
        </trans-unit>
        <trans-unit id="c1ebf77859fb14c0675d7cb2a9a0d32adff942e1" translate="yes" xml:space="preserve">
          <source>Most applications will create one &lt;a href=&quot;#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt; object on application initialization and use that to load templates. In some cases however, it&amp;rsquo;s useful to have multiple environments side by side, if different configurations are in use.</source>
          <target state="translated">大多数应用程序将在应用程序初始化时创建一个&lt;a href=&quot;#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;对象，并使用该对象来加载模板。但是，在某些情况下，如果使用不同的配置，则并排拥有多个环境会很有用。</target>
        </trans-unit>
        <trans-unit id="8fc1b82160516c34bc0424e6bff8eaaa0a745cea" translate="yes" xml:space="preserve">
          <source>Multiplies the left with the right node.</source>
          <target state="translated">将左边与右边的节点相乘。</target>
        </trans-unit>
        <trans-unit id="e684424c98860c4dd04db0629091ea16f5b9b70c" translate="yes" xml:space="preserve">
          <source>Multiply the left operand with the right one. &lt;code&gt;{{ 2 * 2 }}&lt;/code&gt; would return &lt;code&gt;4&lt;/code&gt;. This can also be used to repeat a string multiple times. &lt;code&gt;{{ '=' * 80 }}&lt;/code&gt; would print a bar of 80 equal signs.</source>
          <target state="translated">将左操作数与右操作数相乘。 &lt;code&gt;{{ 2 * 2 }}&lt;/code&gt; 将返回 &lt;code&gt;4&lt;/code&gt; 。这也可以用于重复一个字符串多次。 &lt;code&gt;{{ '=' * 80 }}&lt;/code&gt; 将打印80个等号的小节。</target>
        </trans-unit>
        <trans-unit id="14f4a93deca99be69029c8bfd5545e7930dbdd07" translate="yes" xml:space="preserve">
          <source>My Macros are overridden by something</source>
          <target state="translated">我的宏被什么东西覆盖了</target>
        </trans-unit>
        <trans-unit id="a9fe7346053dfb556979a2bc05d12476bcee6ca4" translate="yes" xml:space="preserve">
          <source>My tracebacks look weird. What&amp;rsquo;s happening?</source>
          <target state="translated">我的回溯看起来很奇怪。发生了什么？</target>
        </trans-unit>
        <trans-unit id="a54f2ccb779f481bea3312bbe38f4dd24beb2f09" translate="yes" xml:space="preserve">
          <source>Named Block End-Tags</source>
          <target state="translated">命名区块端标签</target>
        </trans-unit>
        <trans-unit id="bdf40add81e23132230db9e1a6cb867647c6a6ba" translate="yes" xml:space="preserve">
          <source>Native Python Types</source>
          <target state="translated">本地Python类型</target>
        </trans-unit>
        <trans-unit id="86777b31e2fd1a2e44d7311251578c13d7bd9f1e" translate="yes" xml:space="preserve">
          <source>Negate the expression.</source>
          <target state="translated">否定的表达。</target>
        </trans-unit>
        <trans-unit id="8e5e59ac22ed955675832789d9616249e7623080" translate="yes" xml:space="preserve">
          <source>Nesting extends</source>
          <target state="translated">嵌套扩展</target>
        </trans-unit>
        <trans-unit id="173ee13c17be98fd0f2337de78f7c18e2d8b0787" translate="yes" xml:space="preserve">
          <source>New Style Gettext</source>
          <target state="translated">新式Gettext</target>
        </trans-unit>
        <trans-unit id="2fefbf12100ae1567172eecac61bb666a6592345" translate="yes" xml:space="preserve">
          <source>New in version 2.1.</source>
          <target state="translated">在2.1版本中新增。</target>
        </trans-unit>
        <trans-unit id="520bd699bfd233c6c719e114aeab34db5d9f7d9a" translate="yes" xml:space="preserve">
          <source>New in version 2.10.</source>
          <target state="translated">2.10版本的新内容。</target>
        </trans-unit>
        <trans-unit id="af71fb2ec886c27b8d90d5685b1a90bb672e0391" translate="yes" xml:space="preserve">
          <source>New in version 2.10: Added support for namespace objects</source>
          <target state="translated">2.10版的新内容:增加了对命名空间对象的支持。</target>
        </trans-unit>
        <trans-unit id="6d15a1f28d7531b36c480eda2510883758ac5c8f" translate="yes" xml:space="preserve">
          <source>New in version 2.10: The &lt;code&gt;trimmed&lt;/code&gt; and &lt;code&gt;notrimmed&lt;/code&gt; modifiers have been added.</source>
          <target state="translated">版本2.10中的新功能：已添加 &lt;code&gt;trimmed&lt;/code&gt; 和 &lt;code&gt;notrimmed&lt;/code&gt; 修剪的修饰符。</target>
        </trans-unit>
        <trans-unit id="f3a03d82482c2654633a2377832d14cfc6598d03" translate="yes" xml:space="preserve">
          <source>New in version 2.11.</source>
          <target state="translated">2.11版本的新内容。</target>
        </trans-unit>
        <trans-unit id="aee31ea4030343aa786b36a380061ac9f94741b1" translate="yes" xml:space="preserve">
          <source>New in version 2.11.0.</source>
          <target state="translated">在2.11.0版本中新增。</target>
        </trans-unit>
        <trans-unit id="5d91c4354ebb3331bc82be50d93db7018afc02b5" translate="yes" xml:space="preserve">
          <source>New in version 2.2.</source>
          <target state="translated">在2.2版本中新增。</target>
        </trans-unit>
        <trans-unit id="d774c50c26fa55320ba29a97b10bb11f9f237033" translate="yes" xml:space="preserve">
          <source>New in version 2.3.</source>
          <target state="translated">在2.3版本中新增。</target>
        </trans-unit>
        <trans-unit id="3a6dc147e076b2223a7e4286318b8173a0405dbd" translate="yes" xml:space="preserve">
          <source>New in version 2.4.</source>
          <target state="translated">2.4版本中的新功能。</target>
        </trans-unit>
        <trans-unit id="69fc2029db269706907c075091540534567f6074" translate="yes" xml:space="preserve">
          <source>New in version 2.5.</source>
          <target state="translated">在2.5版本中新增。</target>
        </trans-unit>
        <trans-unit id="c18752ced827f64a04accd8e20df21ee74c959b5" translate="yes" xml:space="preserve">
          <source>New in version 2.5: Added new-style gettext support.</source>
          <target state="translated">2.5版本中的新功能:增加了新式gettext支持。</target>
        </trans-unit>
        <trans-unit id="6e7d0e0358f4bc27c2026edc33ff3b0c0e537d0d" translate="yes" xml:space="preserve">
          <source>New in version 2.6.</source>
          <target state="translated">2.6版本中的新功能。</target>
        </trans-unit>
        <trans-unit id="8548a135d2e74eda81d22ab7380951c1971f6ecd" translate="yes" xml:space="preserve">
          <source>New in version 2.6: The &lt;code&gt;attribute&lt;/code&gt; parameter was added.</source>
          <target state="translated">2.6版中的新增功能：添加了 &lt;code&gt;attribute&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="14cba492650591bf79a1d09c61fac7a20227e0a5" translate="yes" xml:space="preserve">
          <source>New in version 2.7.</source>
          <target state="translated">2.7版本中的新功能。</target>
        </trans-unit>
        <trans-unit id="ecdfe85eece9482685b0c727f9c1c325d365f63b" translate="yes" xml:space="preserve">
          <source>New in version 2.7: Added support for ignoring memcache errors through the &lt;code&gt;ignore_memcache_errors&lt;/code&gt; parameter.</source>
          <target state="translated">2.7版中的新增功能：添加了对通过 &lt;code&gt;ignore_memcache_errors&lt;/code&gt; 参数忽略memcache错误的支持。</target>
        </trans-unit>
        <trans-unit id="db0e71df490938f07a1393a5a8216c8d0ab8010d" translate="yes" xml:space="preserve">
          <source>New in version 2.8.</source>
          <target state="translated">2.8版本中的新功能。</target>
        </trans-unit>
        <trans-unit id="1c6baad30bff85154a95b18f5a49978679bada9c" translate="yes" xml:space="preserve">
          <source>New in version 2.9.</source>
          <target state="translated">2.9版本中的新功能。</target>
        </trans-unit>
        <trans-unit id="142f3b7f23ab450f7599754632632a250bb70250" translate="yes" xml:space="preserve">
          <source>New in version 2.9.3.</source>
          <target state="translated">在2.9.3版本中新增。</target>
        </trans-unit>
        <trans-unit id="789b2d6d7165dabf88260fb752dc78ab6e1b4cca" translate="yes" xml:space="preserve">
          <source>New style &lt;code&gt;gettext&lt;/code&gt; make formatting part of the call, and behind the scenes enforce more consistency.</source>
          <target state="translated">新样式的 &lt;code&gt;gettext&lt;/code&gt; 使格式化成为调用的一部分，并且在后台强制实现更高的一致性。</target>
        </trans-unit>
        <trans-unit id="17cd287cea3563886bf548b76eb5ae60c001832a" translate="yes" xml:space="preserve">
          <source>New style gettext calls are less to type, less error prone, and support autoescaping better.</source>
          <target state="translated">新样式的gettext调用更不需要打字,更不容易出错,并且更好地支持自动伸缩。</target>
        </trans-unit>
        <trans-unit id="78900f3e66f4d15d10990740df3d03b505c04079" translate="yes" xml:space="preserve">
          <source>Node for filter sections.</source>
          <target state="translated">过滤器部分的节点。</target>
        </trans-unit>
        <trans-unit id="9946956d25d5c000d478dc268864588f0be1a3b9" translate="yes" xml:space="preserve">
          <source>Node that represents a template. This must be the outermost node that is passed to the compiler.</source>
          <target state="translated">代表模板的节点。这必须是传递给编译器的最外层节点。</target>
        </trans-unit>
        <trans-unit id="78192847842ebce74f26fb65a02aa408ecf57b4c" translate="yes" xml:space="preserve">
          <source>Node type</source>
          <target state="translated">节点类型</target>
        </trans-unit>
        <trans-unit id="989c58ab69bbaeafb9b7c5438e1f5bbdba3577b0" translate="yes" xml:space="preserve">
          <source>Nodes that exist in a specific context only.</source>
          <target state="translated">只存在于特定环境中的节点。</target>
        </trans-unit>
        <trans-unit id="8183ee787a893dcf10e72fcb2e04751125639bb7" translate="yes" xml:space="preserve">
          <source>Normally the template object is generated from an &lt;a href=&quot;#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt; but it also has a constructor that makes it possible to create a template instance directly using the constructor. It takes the same arguments as the environment constructor but it&amp;rsquo;s not possible to specify a loader.</source>
          <target state="translated">通常，模板对象是从&lt;a href=&quot;#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;生成的，但是它也具有构造函数，可以直接使用该构造函数创建模板实例。它采用与环境构造函数相同的参数，但无法指定加载程序。</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="86b7cc818ef00507b8451811fa756d292fe7e719" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;loop.index&lt;/code&gt; starts with 1, and &lt;code&gt;loop.index0&lt;/code&gt; starts with 0 (See: &lt;a href=&quot;#for-loop&quot;&gt;For&lt;/a&gt;).</source>
          <target state="translated">请注意， &lt;code&gt;loop.index&lt;/code&gt; 以1开头， &lt;code&gt;loop.index0&lt;/code&gt; 以0开头（请参阅：&lt;a href=&quot;#for-loop&quot;&gt;For&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="a33bc5a4e76f49d8225c34a24b0b915bde40160f" translate="yes" xml:space="preserve">
          <source>Note that classes are callable, as are instances of classes with a __call__() method.</source>
          <target state="translated">请注意,类是可以调用的,具有 __call__()方法的类的实例也是如此。</target>
        </trans-unit>
        <trans-unit id="62b0c10396f6fa98de468689b62c80247d966bb8" translate="yes" xml:space="preserve">
          <source>Note that even if rounded to 0 precision, a float is returned. If you need a real integer, pipe it through &lt;code&gt;int&lt;/code&gt;:</source>
          <target state="translated">请注意，即使四舍五入为0精度，也会返回浮点数。如果您需要一个实整数，则将其通过 &lt;code&gt;int&lt;/code&gt; 传递：</target>
        </trans-unit>
        <trans-unit id="1d923745fbb2b1176d6309436a7497ce577d6127" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;obj.attr&lt;/code&gt; notation in the &lt;code&gt;set&lt;/code&gt; tag is only allowed for namespace objects; attempting to assign an attribute on any other object will raise an exception.</source>
          <target state="translated">请注意， &lt;code&gt;obj.attr&lt;/code&gt; 的符号 &lt;code&gt;set&lt;/code&gt; 标记只允许命名空间对象; 尝试在任何其他对象上分配属性将引发异常。</target>
        </trans-unit>
        <trans-unit id="715bdfc538eef83b9b12b8f94bb7a65d22a6a9eb" translate="yes" xml:space="preserve">
          <source>Note that this filter is for use in HTML contexts only.</source>
          <target state="translated">请注意,该过滤器仅用于HTML上下文中。</target>
        </trans-unit>
        <trans-unit id="5fdfc008b1f40a375511a6529c6d38ba7663e2be" translate="yes" xml:space="preserve">
          <source>Note that, in Python, &lt;code&gt;else&lt;/code&gt; blocks are executed whenever the corresponding loop &lt;strong&gt;did not&lt;/strong&gt;&lt;code&gt;break&lt;/code&gt;. Since Jinja loops cannot &lt;code&gt;break&lt;/code&gt; anyway, a slightly different behavior of the &lt;code&gt;else&lt;/code&gt; keyword was chosen.</source>
          <target state="translated">请注意，在Python中，只要相应的循环&lt;strong&gt;未&lt;/strong&gt; &lt;code&gt;break&lt;/code&gt; 就会执行 &lt;code&gt;else&lt;/code&gt; 块。由于Jinja循环无论如何都不会 &lt;code&gt;break&lt;/code&gt; ，因此选择了 &lt;code&gt;else&lt;/code&gt; 关键字的行为略有不同。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a53e7f02e15a7c737c1a16f31d969d2733509a62" translate="yes" xml:space="preserve">
          <source>Note, however, that &lt;strong&gt;Python dicts are not ordered&lt;/strong&gt;; so you might want to either pass a sorted &lt;code&gt;list&lt;/code&gt; of &lt;code&gt;tuple&lt;/code&gt; s &amp;ndash; or a &lt;code&gt;collections.OrderedDict&lt;/code&gt; &amp;ndash; to the template, or use the &lt;code&gt;dictsort&lt;/code&gt; filter.</source>
          <target state="translated">但是请注意，&lt;strong&gt;Python字典不是有序的&lt;/strong&gt;；因此，您可能想要将 &lt;code&gt;tuple&lt;/code&gt; 的排序 &lt;code&gt;list&lt;/code&gt; （或 &lt;code&gt;collections.OrderedDict&lt;/code&gt; ）传递给模板，或者使用 &lt;code&gt;dictsort&lt;/code&gt; 过滤器。</target>
        </trans-unit>
        <trans-unit id="0e829b418f94a6ecc766d5d7714b5e8b5e6508f0" translate="yes" xml:space="preserve">
          <source>Note: Does not work with generators. You may want to explicitly convert it to a list:</source>
          <target state="translated">注意:不能与生成器一起使用。你可能需要明确地将其转换为一个列表。</target>
        </trans-unit>
        <trans-unit id="9d021d605848f7e1ab0aa6a6cb14e63550dbac74" translate="yes" xml:space="preserve">
          <source>Notes on Autoescaping</source>
          <target state="translated">自动escaping注意事项</target>
        </trans-unit>
        <trans-unit id="a48fd136a8b027fb68ab7b3a8efdc22393d6253e" translate="yes" xml:space="preserve">
          <source>Notes on Identifiers</source>
          <target state="translated">识别符说明</target>
        </trans-unit>
        <trans-unit id="ee79286a29ead907309cf0b5b726992693dcdaa0" translate="yes" xml:space="preserve">
          <source>Null-Master Fallback</source>
          <target state="translated">零主备</target>
        </trans-unit>
        <trans-unit id="cc71dae80256280988301531ccd15559074784c1" translate="yes" xml:space="preserve">
          <source>Often you want to have a navigation bar with an active navigation item. This is really simple to achieve. Because assignments outside of &lt;code&gt;block&lt;/code&gt;s in child templates are global and executed before the layout template is evaluated it&amp;rsquo;s possible to define the active menu item in the child template:</source>
          <target state="translated">通常，您想要一个带有活动导航项的导航栏。这真的很容易实现。由于子模板中 &lt;code&gt;block&lt;/code&gt; 之外的分配是全局的，并且是在评估布局模板之前执行的，因此可以在子模板中定义活动菜单项：</target>
        </trans-unit>
        <trans-unit id="0737b426d33dfb3214fe59b9cfa03a0780a9ce86" translate="yes" xml:space="preserve">
          <source>Only named placeholders are allowed. This solves a common problem translators face because positional placeholders can&amp;rsquo;t switch positions meaningfully. Named placeholders always carry semantic information about what value goes where.</source>
          <target state="translated">仅允许使用命名的占位符。这解决了翻译人员面临的一个常见问题，因为位置占位符无法有意义地切换位置。命名占位符始终携带有关什么值到达何处的语义信息。</target>
        </trans-unit>
        <trans-unit id="94f18a36fc5575aceb2a6a962a28b4dbe5cd5fe3" translate="yes" xml:space="preserve">
          <source>Operator Intercepting</source>
          <target state="translated">运营商拦截</target>
        </trans-unit>
        <trans-unit id="3c909e96faf2e0f2d356cbfc91d2cda5fc32ce4a" translate="yes" xml:space="preserve">
          <source>Operator methods also work as expected. For example, &lt;code&gt;%&lt;/code&gt; implements printf-style for strings:</source>
          <target state="translated">运算符方法也可以按预期工作。例如， &lt;code&gt;%&lt;/code&gt; 为字符串实现printf样式：</target>
        </trans-unit>
        <trans-unit id="fd13b94019000aaafc7f679d1d2b13d8082b8dbf" translate="yes" xml:space="preserve">
          <source>Other Operators</source>
          <target state="translated">其他运营商</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="c3ff18a45470574e07662106358ca04b7ff2feec" translate="yes" xml:space="preserve">
          <source>Parentheses group an expression.</source>
          <target state="translated">括号将一个表达式分组。</target>
        </trans-unit>
        <trans-unit id="a22a4506b5f9507f9a00cd00bf41dfb0d593f059" translate="yes" xml:space="preserve">
          <source>Parse an assignment target. As Jinja allows assignments to tuples, this function can parse all allowed assignment targets. Per default assignments to tuples are parsed, that can be disable however by setting &lt;code&gt;with_tuple&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;. If only assignments to names are wanted &lt;code&gt;name_only&lt;/code&gt; can be set to &lt;code&gt;True&lt;/code&gt;. The &lt;code&gt;extra_end_rules&lt;/code&gt; parameter is forwarded to the tuple parsing function. If &lt;code&gt;with_namespace&lt;/code&gt; is enabled, a namespace assignment may be parsed.</source>
          <target state="translated">解析分配目标。由于Jinja允许分配给元组，因此此函数可以解析所有允许的分配目标。默认情况下，会解析对元组的默认分配，但是可以通过将 &lt;code&gt;with_tuple&lt;/code&gt; 设置为 &lt;code&gt;False&lt;/code&gt; 来禁用它。如果仅需要分配名称，则 &lt;code&gt;name_only&lt;/code&gt; 可以设置为 &lt;code&gt;True&lt;/code&gt; 。所述 &lt;code&gt;extra_end_rules&lt;/code&gt; 参数被转发到元组解析功能。如果启用 &lt;code&gt;with_namespace&lt;/code&gt; ，则可以解析名称空间分配。</target>
        </trans-unit>
        <trans-unit id="5cbdc24b5a9f6ef2791ffa7ff7ac8598006c6f04" translate="yes" xml:space="preserve">
          <source>Parse an expression. Per default all expressions are parsed, if the optional &lt;code&gt;with_condexpr&lt;/code&gt; parameter is set to &lt;code&gt;False&lt;/code&gt; conditional expressions are not parsed.</source>
          <target state="translated">解析表达式。默认情况下，如果可选的 &lt;code&gt;with_condexpr&lt;/code&gt; 参数设置为 &lt;code&gt;False&lt;/code&gt; ，则将解析所有表达式。不解析条件表达式。</target>
        </trans-unit>
        <trans-unit id="0884b5fb18fcee6a303ceed60721c58f57cc7789" translate="yes" xml:space="preserve">
          <source>Parse multiple statements into a list until one of the end tokens is reached. This is used to parse the body of statements as it also parses template data if appropriate. The parser checks first if the current token is a colon and skips it if there is one. Then it checks for the block end and parses until if one of the &lt;code&gt;end_tokens&lt;/code&gt; is reached. Per default the active token in the stream at the end of the call is the matched end token. If this is not wanted &lt;code&gt;drop_needle&lt;/code&gt; can be set to &lt;code&gt;True&lt;/code&gt; and the end token is removed.</source>
          <target state="translated">将多个语句解析到一个列表中，直到到达结束标记之一。这用于解析语句主体，因为如果合适的话，它也可以解析模板数据。解析器首先检查当前令牌是否为冒号，如果存在则跳过该令牌。然后，它检查块的结尾并进行解析，直到是否到达 &lt;code&gt;end_tokens&lt;/code&gt; 之一。默认情况下，调用结束时流中的活动令牌是匹配的结束令牌。如果不希望这样 &lt;code&gt;drop_needle&lt;/code&gt; 可以将drop_needle设置为 &lt;code&gt;True&lt;/code&gt; 并删除结束令牌。</target>
        </trans-unit>
        <trans-unit id="1573b88ef05cd812f9a97a0bb46e53220c001bd5" translate="yes" xml:space="preserve">
          <source>Parse the sourcecode and return the abstract syntax tree. This tree of nodes is used by the compiler to convert the template into executable source- or bytecode. This is useful for debugging or to extract information from templates.</source>
          <target state="translated">解析源码并返回抽象语法树。这个节点树被编译器用来将模板转换为可执行的源代码或字节码。这对调试或从模板中提取信息很有用。</target>
        </trans-unit>
        <trans-unit id="1b3cf5033ed01a4fcbff3f2957e66cfe44af45a9" translate="yes" xml:space="preserve">
          <source>Parser</source>
          <target state="translated">Parser</target>
        </trans-unit>
        <trans-unit id="b65d082616b58eb225874685df23e238a384e7af" translate="yes" xml:space="preserve">
          <source>Passing an object to the constructor converts it to text and wraps it to mark it safe without escaping. To escape the text, use the &lt;a href=&quot;../templates/index#escape&quot;&gt;&lt;code&gt;escape()&lt;/code&gt;&lt;/a&gt; class method instead.</source>
          <target state="translated">将对象传递给构造函数会将其转换为文本，并对其进行包装以将其标记为安全而不进行转义。要转义文本，请改用&lt;a href=&quot;../templates/index#escape&quot;&gt; &lt;code&gt;escape()&lt;/code&gt; &lt;/a&gt;类方法。</target>
        </trans-unit>
        <trans-unit id="218a2dbef36847abf2a65ebdadb37d19c3a25944" translate="yes" xml:space="preserve">
          <source>Per default the return value is converted to &lt;code&gt;None&lt;/code&gt; if the expression returns an undefined value. This can be changed by setting &lt;code&gt;undefined_to_none&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">默认情况下，如果表达式返回未定义的值，则返回值将转换为 &lt;code&gt;None&lt;/code&gt; 。可以通过将 &lt;code&gt;undefined_to_none&lt;/code&gt; 设置为 &lt;code&gt;False&lt;/code&gt; 来更改。</target>
        </trans-unit>
        <trans-unit id="cf7b42a6124807449be5e1a930a7d065e2215de8" translate="yes" xml:space="preserve">
          <source>Per default the template encoding is &lt;code&gt;'utf-8'&lt;/code&gt; which can be changed by setting the &lt;code&gt;encoding&lt;/code&gt; parameter to something else.</source>
          <target state="translated">默认情况下，模板编码为 &lt;code&gt;'utf-8'&lt;/code&gt; ，可以通过将 &lt;code&gt;encoding&lt;/code&gt; 参数设置为其他参数来更改。</target>
        </trans-unit>
        <trans-unit id="1ead1ce349d8f6cb58e1d7d062a7d63308e94602" translate="yes" xml:space="preserve">
          <source>Per default the template encoding is &lt;code&gt;'utf-8'&lt;/code&gt; which can be changed by setting the &lt;code&gt;encoding&lt;/code&gt; parameter to something else. Due to the nature of eggs it&amp;rsquo;s only possible to reload templates if the package was loaded from the file system and not a zip file.</source>
          <target state="translated">默认情况下，模板编码为 &lt;code&gt;'utf-8'&lt;/code&gt; ，可以通过将 &lt;code&gt;encoding&lt;/code&gt; 参数设置为其他参数来更改。由于egg的性质，如果仅从文件系统而不是zip文件加载了软件包，则只​​能重新加载模板。</target>
        </trans-unit>
        <trans-unit id="a785b1fa526d836e142bbe87ad65b690bb2a7c61" translate="yes" xml:space="preserve">
          <source>Perform a sequence / mapping containment test. Returns true if the left operand is contained in the right. &lt;code&gt;{{ 1 in [1, 2, 3] }}&lt;/code&gt; would, for example, return true.</source>
          <target state="translated">执行序列/映射遏制测试。如果左侧的操作数包含在右侧，则返回true。 &lt;code&gt;{{ 1 in [1, 2, 3] }}&lt;/code&gt; 将返回true。</target>
        </trans-unit>
        <trans-unit id="86b411e1f788b894d3d20300add3a9c359be0a95" translate="yes" xml:space="preserve">
          <source>Perform the token test and return the token if it matched. Otherwise the return value is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">执行令牌测试，如果匹配则返回令牌。否则，返回值为 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="776c5bf8eb5ca38d0d841af806fffcc8d195ea70" translate="yes" xml:space="preserve">
          <source>Performs a &lt;a href=&quot;#tests&quot;&gt;test&lt;/a&gt;.</source>
          <target state="translated">执行&lt;a href=&quot;#tests&quot;&gt;测试&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="318746196e03a0b3e8165aa784a9474b6c56ad5d" translate="yes" xml:space="preserve">
          <source>Please keep in mind that it is not possible to set variables inside a block and have them show up outside of it. This also applies to loops. The only exception to that rule are if statements which do not introduce a scope. As a result the following template is not going to do what you might expect:</source>
          <target state="translated">请记住,不可能在块内设置变量,而在块外显示。这也适用于循环。唯一的例外是不引入作用域的if语句。因此,下面的模板不会像你所期望的那样。</target>
        </trans-unit>
        <trans-unit id="4d158d039bf6981984c54da77a8bde34f37dd7a4" translate="yes" xml:space="preserve">
          <source>Please note that assignments in loops will be cleared at the end of the iteration and cannot outlive the loop scope. Older versions of Jinja had a bug where in some circumstances it appeared that assignments would work. This is not supported. See &lt;a href=&quot;#assignments&quot;&gt;Assignments&lt;/a&gt; for more information about how to deal with this.</source>
          <target state="translated">请注意，循环中的分配将在迭代结束时清除，并且不会超出循环范围。较旧版本的Jinja有一个错误，在某些情况下，似乎作业可以工作。不支持此功能。有关如何处理此问题的更多信息，请参见&lt;a href=&quot;#assignments&quot;&gt;分配&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8d61184962dda249c7c096096c40ff46b825f4a7" translate="yes" xml:space="preserve">
          <source>Policies</source>
          <target state="translated">Policies</target>
        </trans-unit>
        <trans-unit id="e4361368bdca1bd58ddf06196a34ab195d9d4746" translate="yes" xml:space="preserve">
          <source>Preprocesses the source with all extensions. This is automatically called for all parsing and compiling methods but &lt;em&gt;not&lt;/em&gt; for &lt;a href=&quot;#jinja2.Environment.lex&quot;&gt;&lt;code&gt;lex()&lt;/code&gt;&lt;/a&gt; because there you usually only want the actual source tokenized.</source>
          <target state="translated">预处理具有所有扩展名的源。所有解析和编译方法都会自动调用此方法，而&lt;a href=&quot;#jinja2.Environment.lex&quot;&gt; &lt;code&gt;lex()&lt;/code&gt; &lt;/a&gt;则&lt;em&gt;不会&lt;/em&gt;自动调用此方法，因为通常您只希望将实际源标记化。</target>
        </trans-unit>
        <trans-unit id="eed036e414a34a0c245858652e6d88f14c3faefb" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Prerequisites</target>
        </trans-unit>
        <trans-unit id="f1373a2c3508abe7f4e1917ec0a2d1a45cd4d82b" translate="yes" xml:space="preserve">
          <source>Preserve the trailing newline when rendering templates. The default is &lt;code&gt;False&lt;/code&gt;, which causes a single newline, if present, to be stripped from the end of the template.</source>
          <target state="translated">呈现模板时保留尾随换行符。默认值为 &lt;code&gt;False&lt;/code&gt; ，这将导致从模板末尾剥离单个换行符（如果存在）。</target>
        </trans-unit>
        <trans-unit id="4dd2eb61aaa0ac04e92aae2007265bebab0f1aaa" translate="yes" xml:space="preserve">
          <source>Pretty print a variable. Useful for debugging.</source>
          <target state="translated">漂亮的打印一个变量。对调试很有用。</target>
        </trans-unit>
        <trans-unit id="d6a9d7250e18a05474b4fdcdff673449201dedc5" translate="yes" xml:space="preserve">
          <source>Previous versions:</source>
          <target state="translated">以前的版本。</target>
        </trans-unit>
        <trans-unit id="983a26c86ab701a43674ac275ec16813d79003f3" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;code&gt;layout_template&lt;/code&gt; variable had to be a string with the layout template&amp;rsquo;s filename for this to work.</source>
          <target state="translated">以前， &lt;code&gt;layout_template&lt;/code&gt; 变量必须是带有布局模板的文件名的字符串才能正常工作。</target>
        </trans-unit>
        <trans-unit id="7edff5fef55b04568ab220a5567fdc27cf42064b" translate="yes" xml:space="preserve">
          <source>Push a token back to the stream.</source>
          <target state="translated">将一个令牌推回流中。</target>
        </trans-unit>
        <trans-unit id="9518eb316866b589927be01fa954dce2f32b73fc" translate="yes" xml:space="preserve">
          <source>Pylons</source>
          <target state="translated">Pylons</target>
        </trans-unit>
        <trans-unit id="9be248464a471407fbee9fbcade8fe4db067e18e" translate="yes" xml:space="preserve">
          <source>Python 2.x supports two ways of representing string objects. One is the &lt;code&gt;str&lt;/code&gt; type and the other is the &lt;code&gt;unicode&lt;/code&gt; type, both of which extend a type called &lt;code&gt;basestring&lt;/code&gt;. Unfortunately the default is &lt;code&gt;str&lt;/code&gt; which should not be used to store text based information unless only ASCII characters are used. With Python 2.6 it is possible to make &lt;code&gt;unicode&lt;/code&gt; the default on a per module level and with Python 3 it will be the default.</source>
          <target state="translated">Python 2.x支持两种表示字符串对象的方式。一个是 &lt;code&gt;str&lt;/code&gt; 类型，另一个是 &lt;code&gt;unicode&lt;/code&gt; 类型，两者都扩展了一个称为 &lt;code&gt;basestring&lt;/code&gt; 的类型。不幸的是，默认值为 &lt;code&gt;str&lt;/code&gt; ，除非仅使用ASCII字符，否则不应将其用于存储基于文本的信息。使用Python 2.6可以在每个模块级别将 &lt;code&gt;unicode&lt;/code&gt; 设置为默认值，而使用Python 3可以将unicode设置为默认值。</target>
        </trans-unit>
        <trans-unit id="f0cf7d69bbc3886aaa48e12a04b5e56ec1179d42" translate="yes" xml:space="preserve">
          <source>Python Methods</source>
          <target state="translated">Python方法</target>
        </trans-unit>
        <trans-unit id="796be16da9b6017bce34b3e8e1c72bd6d93087af" translate="yes" xml:space="preserve">
          <source>Quote data for use in a URL path or query using UTF-8.</source>
          <target state="translated">在使用UTF-8的URL路径或查询中使用报价数据。</target>
        </trans-unit>
        <trans-unit id="73fe0e5682b1aaa840aae765d62f7c446154a97d" translate="yes" xml:space="preserve">
          <source>Raise the left operand to the power of the right operand. &lt;code&gt;{{ 2**3 }}&lt;/code&gt; would return &lt;code&gt;8&lt;/code&gt;.</source>
          <target state="translated">将左操作数提高到右操作数的幂。 &lt;code&gt;{{ 2**3 }}&lt;/code&gt; 将返回 &lt;code&gt;8&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4751bca1c449dcbf3b3839873dc3bd71cc2e4beb" translate="yes" xml:space="preserve">
          <source>Raised if a template does not exist.</source>
          <target state="translated">如果模板不存在,发生该事件。</target>
        </trans-unit>
        <trans-unit id="e9696766b93dc16d1783eb009fad55a6cf8952d9" translate="yes" xml:space="preserve">
          <source>Raised if a template tries to do something insecure if the sandbox is enabled.</source>
          <target state="translated">如果启用了沙箱,模板试图做一些不安全的事情时发生该事件。</target>
        </trans-unit>
        <trans-unit id="c471ab96ff847d05b9022bb27956ffe24abd6215" translate="yes" xml:space="preserve">
          <source>Raised if a template tries to operate on &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在模板尝试对&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;进行操作时引发。</target>
        </trans-unit>
        <trans-unit id="6208a969dc31e9d554cdce19ea8731f9693daa6e" translate="yes" xml:space="preserve">
          <source>Raised if the node could not perform a requested action.</source>
          <target state="translated">当节点不能执行请求的操作时发生该事件。</target>
        </trans-unit>
        <trans-unit id="c2b723fd90d38efceabfbe2eec63c6bb45a5c830" translate="yes" xml:space="preserve">
          <source>Raised to tell the user that there is a problem with the template.</source>
          <target state="translated">发起时告诉用户模板有问题。</target>
        </trans-unit>
        <trans-unit id="2382cf55c5bf7d25042bf12553b4ce8744b4f150" translate="yes" xml:space="preserve">
          <source>Reference to a namespace value assignment</source>
          <target state="translated">引用命名空间值分配</target>
        </trans-unit>
        <trans-unit id="a390f86c0e713c4cee3c4cee31810da2d7e36f84" translate="yes" xml:space="preserve">
          <source>Rename the &lt;code&gt;indentfirst&lt;/code&gt; argument to &lt;code&gt;first&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;indentfirst&lt;/code&gt; 参数重命名为 &lt;code&gt;first&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a69a068906602fc3368a7a6b79be3b84795caa7" translate="yes" xml:space="preserve">
          <source>Render the template to produce a native Python type. If the result is a single node, its value is returned. Otherwise, the nodes are concatenated as strings. If the result can be parsed with &lt;a href=&quot;https://docs.python.org/3/library/ast.html#ast.literal_eval&quot;&gt;&lt;code&gt;ast.literal_eval()&lt;/code&gt;&lt;/a&gt;, the parsed value is returned. Otherwise, the string is returned.</source>
          <target state="translated">渲染模板以生成本机Python类型。如果结果是单个节点，则返回其值。否则，将节点串联为字符串。如果可以使用&lt;a href=&quot;https://docs.python.org/3/library/ast.html#ast.literal_eval&quot;&gt; &lt;code&gt;ast.literal_eval()&lt;/code&gt; &lt;/a&gt;解析结果，则返回解析后的值。否则，返回字符串。</target>
        </trans-unit>
        <trans-unit id="10108d088c8cac5e1cdc1919fb1cb9259f4bbb98" translate="yes" xml:space="preserve">
          <source>Rendering &lt;code&gt;child.tmpl&lt;/code&gt; will give &lt;code&gt;body: Hi from child. Hi from parent.&lt;/code&gt;</source>
          <target state="translated">渲染 &lt;code&gt;child.tmpl&lt;/code&gt; 将产生以下内容 &lt;code&gt;body: Hi from child. Hi from parent.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3ab3623d8a76b9c779c7a2f28624a04faaec8df2" translate="yes" xml:space="preserve">
          <source>Rendering &lt;code&gt;grandchild1.tmpl&lt;/code&gt; will give &lt;code&gt;body: Hi from grandchild1.&lt;/code&gt;</source>
          <target state="translated">渲染 &lt;code&gt;grandchild1.tmpl&lt;/code&gt; 将得到 &lt;code&gt;body: Hi from grandchild1.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1a85fd00cadcd31adefad540943bf51e22c93b7" translate="yes" xml:space="preserve">
          <source>Rendering &lt;code&gt;grandchild2.tmpl&lt;/code&gt; will give &lt;code&gt;body: Hi from grandchild2. Hi from parent.&lt;/code&gt;</source>
          <target state="translated">渲染 &lt;code&gt;grandchild2.tmpl&lt;/code&gt; 将得到 &lt;code&gt;body: Hi from grandchild2. Hi from parent.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1f4b80e9538ea64a31e0b4f63a69f558ba4f64e" translate="yes" xml:space="preserve">
          <source>Rendering a Python object produces that object as long as it is the only node:</source>
          <target state="translated">渲染一个Python对象会产生该对象,只要它是唯一的节点。</target>
        </trans-unit>
        <trans-unit id="a076ede2419dff124d6045f9c0e7bc383aeccebf" translate="yes" xml:space="preserve">
          <source>Rendering list syntax produces a list:</source>
          <target state="translated">渲染列表语法产生一个列表。</target>
        </trans-unit>
        <trans-unit id="b31a79299f9da15dde5c2df70d7f3bdb493adb10" translate="yes" xml:space="preserve">
          <source>Rendering something that doesn&amp;rsquo;t look like a Python literal produces a string:</source>
          <target state="translated">渲染看起来不像Python文字的东西会产生一个字符串：</target>
        </trans-unit>
        <trans-unit id="dcec6aefd6a0900e7cdaa399f5f318f582076f7e" translate="yes" xml:space="preserve">
          <source>Represents a slice object. This must only be used as argument for &lt;code&gt;Subscript&lt;/code&gt;.</source>
          <target state="translated">表示一个切片对象。这只能用作 &lt;code&gt;Subscript&lt;/code&gt; 的参数。</target>
        </trans-unit>
        <trans-unit id="ca732b365383fa344a3559e354c21ddda67cb7dc" translate="yes" xml:space="preserve">
          <source>Represents an extends statement.</source>
          <target state="translated">代表一个extends语句。</target>
        </trans-unit>
        <trans-unit id="8acb9f5c1e74fc765941bc25b28aed954d147e42" translate="yes" xml:space="preserve">
          <source>Reset the context of a node and all child nodes. Per default the parser will all generate nodes that have a &amp;lsquo;load&amp;rsquo; context as it&amp;rsquo;s the most common one. This method is used in the parser to set assignment targets and other nodes to a store context.</source>
          <target state="translated">重置节点和所有子节点的上下文。默认情况下，解析器将全部生成具有&amp;ldquo;加载&amp;rdquo;上下文的节点，因为这是最常见的节点。在解析器中使用此方法将分配目标和其他节点设置为商店上下文。</target>
        </trans-unit>
        <trans-unit id="7cc2b4f2d925268ec5101e5400b3a8604f8630a8" translate="yes" xml:space="preserve">
          <source>Resets the bucket (unloads the bytecode).</source>
          <target state="translated">重置 bucket(卸载字节码)。</target>
        </trans-unit>
        <trans-unit id="64abb49d3b4b495c4d1114b5fb75390df88f0982" translate="yes" xml:space="preserve">
          <source>Resets the current item to the first item.</source>
          <target state="translated">将当前项目重置为第一个项目。</target>
        </trans-unit>
        <trans-unit id="e38484ac6536da11b91f7adbaa38241d5ece21f5" translate="yes" xml:space="preserve">
          <source>Results in something like this:</source>
          <target state="translated">结果是这样的。</target>
        </trans-unit>
        <trans-unit id="236fd5867c43400099496c033ff9e66e55fd9a84" translate="yes" xml:space="preserve">
          <source>Return a copy of the string with each line indented by 4 spaces. The first line and blank lines are not indented by default.</source>
          <target state="translated">返回字符串的副本,每行缩进4个空格。第一行和空白行默认不缩进。</target>
        </trans-unit>
        <trans-unit id="f833e2bd53410747d394fff9069e9276fc9ce888" translate="yes" xml:space="preserve">
          <source>Return a copy of the value with all occurrences of a substring replaced with a new one. The first argument is the substring that should be replaced, the second is the replacement string. If the optional third argument &lt;code&gt;count&lt;/code&gt; is given, only the first &lt;code&gt;count&lt;/code&gt; occurrences are replaced:</source>
          <target state="translated">返回该值的副本，其中所有出现的子字符串均替换为新的子字符串。第一个参数是应该替换的子字符串，第二个参数是替换字符串。如果给出了可选的第三个参数 &lt;code&gt;count&lt;/code&gt; ，则仅替换第一个出现的 &lt;code&gt;count&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="78b646a04f7dc81f6607db730bfca98eb3d12a82" translate="yes" xml:space="preserve">
          <source>Return a list containing an arithmetic progression of integers. &lt;code&gt;range(i, j)&lt;/code&gt; returns &lt;code&gt;[i, i+1, i+2, ..., j-1]&lt;/code&gt;; start (!) defaults to &lt;code&gt;0&lt;/code&gt;. When step is given, it specifies the increment (or decrement). For example, &lt;code&gt;range(4)&lt;/code&gt; and &lt;code&gt;range(0, 4, 1)&lt;/code&gt; return &lt;code&gt;[0, 1, 2, 3]&lt;/code&gt;. The end point is omitted! These are exactly the valid indices for a list of 4 elements.</source>
          <target state="translated">返回一个包含整数的算术级数的列表。 &lt;code&gt;range(i, j)&lt;/code&gt; 返回 &lt;code&gt;[i, i+1, i+2, ..., j-1]&lt;/code&gt; ; start（！）默认为 &lt;code&gt;0&lt;/code&gt; 。给定step时，它指定增量（或减量）。例如， &lt;code&gt;range(4)&lt;/code&gt; 和 &lt;code&gt;range(0, 4, 1)&lt;/code&gt; 返回 &lt;code&gt;[0, 1, 2, 3]&lt;/code&gt; 。终点省略了！这些正是4个元素列表的有效索引。</target>
        </trans-unit>
        <trans-unit id="b328b4a0b87a6043510344b497df2e871d1bd422" translate="yes" xml:space="preserve">
          <source>Return a new free identifier as &lt;a href=&quot;#jinja2.nodes.InternalName&quot;&gt;&lt;code&gt;InternalName&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返回一个新的免费标识符&lt;a href=&quot;#jinja2.nodes.InternalName&quot;&gt; &lt;code&gt;InternalName&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fc605183b525ac1a59c75168e409d2779604d26d" translate="yes" xml:space="preserve">
          <source>Return a random item from the sequence.</source>
          <target state="translated">从序列中随机返回一个项目。</target>
        </trans-unit>
        <trans-unit id="f350c2a3ddcec5dab1b2e29440c29228c60a9eb5" translate="yes" xml:space="preserve">
          <source>Return a string which is the concatenation of the strings in the sequence. The separator between elements is an empty string per default, you can define it with the optional parameter:</source>
          <target state="translated">返回一个字符串,它是序列中字符串的连接。元素之间的分隔符默认是一个空字符串,你可以用可选的参数来定义它。</target>
        </trans-unit>
        <trans-unit id="ba5509c3e061319b79dba156cb557b94d2d8148d" translate="yes" xml:space="preserve">
          <source>Return a titlecased version of the value. I.e. words will start with uppercase letters, all remaining characters are lowercase.</source>
          <target state="translated">返回该值的titlecased版本。即单词将以大写字母开始,其余字符均为小写。</target>
        </trans-unit>
        <trans-unit id="3ab413b32ab56dfb840bf1e4bb7c604788a1d03b" translate="yes" xml:space="preserve">
          <source>Return a truncated copy of the string. The length is specified with the first parameter which defaults to &lt;code&gt;255&lt;/code&gt;. If the second parameter is &lt;code&gt;true&lt;/code&gt; the filter will cut the text at length. Otherwise it will discard the last word. If the text was in fact truncated it will append an ellipsis sign (&lt;code&gt;&quot;...&quot;&lt;/code&gt;). If you want a different ellipsis sign than &lt;code&gt;&quot;...&quot;&lt;/code&gt; you can specify it using the third parameter. Strings that only exceed the length by the tolerance margin given in the fourth parameter will not be truncated.</source>
          <target state="translated">返回字符串的截断副本。该长度由默认为 &lt;code&gt;255&lt;/code&gt; 的第一个参数指定。如果第二个参数为 &lt;code&gt;true&lt;/code&gt; ,则过滤器将按长度剪切文本。否则，它将丢弃最后一个单词。如果文本实际上被截断，它将在后面附加省略号（ &lt;code&gt;&quot;...&quot;&lt;/code&gt; ）。如果要使用与 &lt;code&gt;&quot;...&quot;&lt;/code&gt; 不同的省略号，则可以使用第三个参数进行指定。仅超出长度超出第四个参数中给出的容限的字符串将不会被截断。</target>
        </trans-unit>
        <trans-unit id="2142f93ce01f18ba18824831b17b2e83f22e51d4" translate="yes" xml:space="preserve">
          <source>Return an attribute node for the current extension. This is useful to pass constants on extensions to generated template code.</source>
          <target state="translated">返回当前扩展的属性节点。这对于向生成的模板代码传递扩展的常量很有用。</target>
        </trans-unit>
        <trans-unit id="0f4af466676d95e077ec7d0c0eb365f94b3b64d5" translate="yes" xml:space="preserve">
          <source>Return the absolute value of the argument.</source>
          <target state="translated">返回参数的绝对值。</target>
        </trans-unit>
        <trans-unit id="6f96bc6d1f1fa056ae5ad44212c0688074b4dd43" translate="yes" xml:space="preserve">
          <source>Return the bytecode as string.</source>
          <target state="translated">以字符串形式返回字节码。</target>
        </trans-unit>
        <trans-unit id="0dd6724d2accfad64b3619b421baa11215ecf013" translate="yes" xml:space="preserve">
          <source>Return the complete context as dict including the exported variables. For optimizations reasons this might not return an actual copy so be careful with using it.</source>
          <target state="translated">以dict的形式返回完整的上下文,包括导出的变量。由于优化的原因,这可能不会返回一个实际的副本,所以要小心使用它。</target>
        </trans-unit>
        <trans-unit id="63df33977581347d5613d587060c1d550bba2ece" translate="yes" xml:space="preserve">
          <source>Return the current item, then advance &lt;a href=&quot;#cycler.current&quot;&gt;&lt;code&gt;current&lt;/code&gt;&lt;/a&gt; to the next item.</source>
          <target state="translated">返回当前的项目，然后推进&lt;a href=&quot;#cycler.current&quot;&gt; &lt;code&gt;current&lt;/code&gt; &lt;/a&gt;到下一个项目。</target>
        </trans-unit>
        <trans-unit id="3bedaa2d4cd131cd1c589cb6e6a9acdad25360c0" translate="yes" xml:space="preserve">
          <source>Return the current item. Equivalent to the item that will be returned next time &lt;a href=&quot;#cycler.next&quot;&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">返回当前项目。等效于&lt;a href=&quot;#cycler.next&quot;&gt; &lt;code&gt;next()&lt;/code&gt; &lt;/a&gt;调用next（）时将返回的项目。</target>
        </trans-unit>
        <trans-unit id="d674d44c0e8a3ad68a3ba50514bf4ca8d060ecbb" translate="yes" xml:space="preserve">
          <source>Return the current template context including locals. Behaves exactly like &lt;a href=&quot;#jinja2.nodes.ContextReference&quot;&gt;&lt;code&gt;ContextReference&lt;/code&gt;&lt;/a&gt;, but includes local variables, such as from a &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">返回当前模板上下文，包括本地变量。行为与&lt;a href=&quot;#jinja2.nodes.ContextReference&quot;&gt; &lt;code&gt;ContextReference&lt;/code&gt; &lt;/a&gt;完全一样，但是包含局部变量，例如来自 &lt;code&gt;for&lt;/code&gt; 循环的变量。</target>
        </trans-unit>
        <trans-unit id="c099d9b76f12b3d8494645758e181b21a6f54004" translate="yes" xml:space="preserve">
          <source>Return the first item of a sequence.</source>
          <target state="translated">返回序列的第一项。</target>
        </trans-unit>
        <trans-unit id="5ec19a00ba49bed961d020c64a5aa3af7de0cc68" translate="yes" xml:space="preserve">
          <source>Return the largest item from the sequence.</source>
          <target state="translated">返回序列中最大的项目。</target>
        </trans-unit>
        <trans-unit id="017c5d2a23c95aebf8bef74e6a5c274a42cde1b3" translate="yes" xml:space="preserve">
          <source>Return the last item of a sequence.</source>
          <target state="translated">返回序列的最后一项。</target>
        </trans-unit>
        <trans-unit id="57eddb6d445ca8c38d55da97a61e68039674f646" translate="yes" xml:space="preserve">
          <source>Return the number of items in a container.</source>
          <target state="translated">返回容器中的物品数量。</target>
        </trans-unit>
        <trans-unit id="ebf3a909c405ce3848cb5be8de079462b14078b5" translate="yes" xml:space="preserve">
          <source>Return the smallest item from the sequence.</source>
          <target state="translated">返回序列中最小的项目。</target>
        </trans-unit>
        <trans-unit id="84ff9cc09e61d9237ee5ad4bc958cc1dddbd8409" translate="yes" xml:space="preserve">
          <source>Return the value of the expression as constant or raise &lt;a href=&quot;#jinja2.nodes.Impossible&quot;&gt;&lt;code&gt;Impossible&lt;/code&gt;&lt;/a&gt; if this was not possible.</source>
          <target state="translated">将表达式的值返回为常量，或者如果&lt;a href=&quot;#jinja2.nodes.Impossible&quot;&gt; &lt;code&gt;Impossible&lt;/code&gt; &lt;/a&gt;话，将其提高为&amp;ldquo;不可能&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="5f238fb379a5c0985a7f5c3edfb70ebad2e62469" translate="yes" xml:space="preserve">
          <source>Return true if the left and the right operand are true.</source>
          <target state="translated">如果左和右操作数为真,则返回真。</target>
        </trans-unit>
        <trans-unit id="a3092f9861034c7577f0f3a81d2d82a819fad84b" translate="yes" xml:space="preserve">
          <source>Return true if the left or the right operand are true.</source>
          <target state="translated">如果左或右操作数为真,则返回真。</target>
        </trans-unit>
        <trans-unit id="d1e6620625c273160538128efb0ed2601dc83b6e" translate="yes" xml:space="preserve">
          <source>Return true if the object is False.</source>
          <target state="translated">如果对象为False,则返回true。</target>
        </trans-unit>
        <trans-unit id="0c57a7f460593a32a584672a7c97aff232b6f660" translate="yes" xml:space="preserve">
          <source>Return true if the object is True.</source>
          <target state="translated">如果对象为True,则返回true。</target>
        </trans-unit>
        <trans-unit id="b68fa1ff4826bf0a2b4d773644e1f706bf8d31ad" translate="yes" xml:space="preserve">
          <source>Return true if the object is a boolean value.</source>
          <target state="translated">如果对象是布尔值,则返回true。</target>
        </trans-unit>
        <trans-unit id="d0add84d8ecfacfe97912cf6633d7e8de761463b" translate="yes" xml:space="preserve">
          <source>Return true if the object is a float.</source>
          <target state="translated">如果对象是float,则返回true。</target>
        </trans-unit>
        <trans-unit id="4a7c97ef031ccbb4a101894a502d85db96738579" translate="yes" xml:space="preserve">
          <source>Return true if the object is a mapping (dict etc.).</source>
          <target state="translated">如果对象是一个映射(dict等),则返回true。</target>
        </trans-unit>
        <trans-unit id="c388b9a7b9ed485cf6afe1a9d78591b33b38d20d" translate="yes" xml:space="preserve">
          <source>Return true if the object is a string.</source>
          <target state="translated">如果对象是字符串,则返回true。</target>
        </trans-unit>
        <trans-unit id="395f02796832c3a35ea991d8f215e1016c1e3d4a" translate="yes" xml:space="preserve">
          <source>Return true if the object is an integer.</source>
          <target state="translated">如果对象是整数,则返回true。</target>
        </trans-unit>
        <trans-unit id="793d0fe0bdec956ca42b66fb022c9e914b4bfa78" translate="yes" xml:space="preserve">
          <source>Return true if the variable is a number.</source>
          <target state="translated">如果变量是一个数字,则返回true。</target>
        </trans-unit>
        <trans-unit id="52b33c3f69a91af923c6460f110b2604407cbd0c" translate="yes" xml:space="preserve">
          <source>Return true if the variable is a sequence. Sequences are variables that are iterable.</source>
          <target state="translated">如果变量是一个序列,则返回true。序列是可迭代的变量。</target>
        </trans-unit>
        <trans-unit id="00696bf78502e96490fe6f1159272be058dbbd5a" translate="yes" xml:space="preserve">
          <source>Return true if the variable is defined:</source>
          <target state="translated">如果变量被定义,返回true。</target>
        </trans-unit>
        <trans-unit id="076853a853f6711ea4529b84ad689493f2fc1c2d" translate="yes" xml:space="preserve">
          <source>Return true if the variable is even.</source>
          <target state="translated">如果变量为偶数,则返回true。</target>
        </trans-unit>
        <trans-unit id="c21787bcdb2750cb4ccc476ec79f0566ded0fa1e" translate="yes" xml:space="preserve">
          <source>Return true if the variable is lowercased.</source>
          <target state="translated">如果变量是小写的,返回true。</target>
        </trans-unit>
        <trans-unit id="c5bdeaaf831a09bb91d8b8f8eda335d9d4e34e60" translate="yes" xml:space="preserve">
          <source>Return true if the variable is none.</source>
          <target state="translated">如果变量为无,则返回true。</target>
        </trans-unit>
        <trans-unit id="961a890d1b7e28999ac2a160d19a18a3720d0e39" translate="yes" xml:space="preserve">
          <source>Return true if the variable is odd.</source>
          <target state="translated">如果变量是奇数,则返回true。</target>
        </trans-unit>
        <trans-unit id="791c3a23e5fe58f233ecd050699c68f49b91f6fb" translate="yes" xml:space="preserve">
          <source>Return true if the variable is uppercased.</source>
          <target state="translated">如果变量是大写字母,则返回true。</target>
        </trans-unit>
        <trans-unit id="e4d5fb7da2928bc1e1b709110af1099d93fcc63e" translate="yes" xml:space="preserve">
          <source>Return whether the object is callable (i.e., some kind of function).</source>
          <target state="translated">返回对象是否可调用(即某种函数)。</target>
        </trans-unit>
        <trans-unit id="ab58d75d31b1d00245f7b639078cc3fac4004e3a" translate="yes" xml:space="preserve">
          <source>Returns a list of templates for this environment. This requires that the loader supports the loader&amp;rsquo;s &lt;code&gt;list_templates()&lt;/code&gt; method.</source>
          <target state="translated">返回此环境的模板列表。这要求加载程序支持加载程序的 &lt;code&gt;list_templates()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="cd35d11c96a5d0dd112c3b59b81d2f8359f2b2f7" translate="yes" xml:space="preserve">
          <source>Returns a list of unique items from the given iterable.</source>
          <target state="translated">从给定的iterable中返回一个唯一项目的列表。</target>
        </trans-unit>
        <trans-unit id="1afbb049cc710ba7ce544f754b31ac128081af25" translate="yes" xml:space="preserve">
          <source>Returns a set of all variables in the AST that will be looked up from the context at runtime. Because at compile time it&amp;rsquo;s not known which variables will be used depending on the path the execution takes at runtime, all variables are returned.</source>
          <target state="translated">返回AST中所有变量的集合，这些变量将在运行时从上下文中进行查找。因为在编译时不知道将使用哪个变量，取决于执行在运行时所采用的路径，所以将返回所有变量。</target>
        </trans-unit>
        <trans-unit id="2235c2f53752b94d9fbc66ca5713924fcd52d7d5" translate="yes" xml:space="preserve">
          <source>Returns the attribute of an extension bound to the environment. The identifier is the identifier of the &lt;code&gt;Extension&lt;/code&gt;.</source>
          <target state="translated">返回绑定到环境的扩展的属性。该标识符是 &lt;code&gt;Extension&lt;/code&gt; 的标识符。</target>
        </trans-unit>
        <trans-unit id="10bc7e12df8c3166bbb344b5709cf962083487f6" translate="yes" xml:space="preserve">
          <source>Returns the current template context. It can be used like a &lt;a href=&quot;#jinja2.nodes.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt; node, with a &lt;code&gt;'load'&lt;/code&gt; ctx and will return the current &lt;a href=&quot;../api/index#jinja2.runtime.Context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">返回当前模板上下文。它可以像&lt;a href=&quot;#jinja2.nodes.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;节点一样使用，并带有ctx的 &lt;code&gt;'load'&lt;/code&gt; ，它将返回当前的&lt;a href=&quot;../api/index#jinja2.runtime.Context&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="bae2bf70f13fffb5bc1db749de69285657c712ea" translate="yes" xml:space="preserve">
          <source>Returns the sum of a sequence of numbers plus the value of parameter &amp;lsquo;start&amp;rsquo; (which defaults to 0). When the sequence is empty it returns start.</source>
          <target state="translated">返回一个数字序列的总和加上参数&amp;ldquo; start&amp;rdquo;的值（默认为0）。当序列为空时，它将返回开始。</target>
        </trans-unit>
        <trans-unit id="02b67cdcf58b283312b00f306fc5484554fd244c" translate="yes" xml:space="preserve">
          <source>Returns the value for the cache key. If the item does not exist in the cache the return value must be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">返回缓存键的值。如果该项目在缓存中不存在，则返回值必须为 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="58266e5cb01cbdec38382670935c92336b0e9383" translate="yes" xml:space="preserve">
          <source>Reverse the object or return an iterator that iterates over it the other way round.</source>
          <target state="translated">反转对象或返回一个反过来遍历对象的迭代器。</target>
        </trans-unit>
        <trans-unit id="190da8acc2f7e9dda5f87c9a299bf318f2c172b7" translate="yes" xml:space="preserve">
          <source>Round the number to a given precision. The first parameter specifies the precision (default is &lt;code&gt;0&lt;/code&gt;), the second the rounding method:</source>
          <target state="translated">将数字四舍五入到给定的精度。第一个参数指定精度（默认为 &lt;code&gt;0&lt;/code&gt; ），第二个参数舍入方法：</target>
        </trans-unit>
        <trans-unit id="dd535801ab531f631634dd6d64f55faff6c946ee" translate="yes" xml:space="preserve">
          <source>Same as a != b.</source>
          <target state="translated">和a !=b一样。</target>
        </trans-unit>
        <trans-unit id="3a7331befde64313a9cbfec5cef1defd40890ae3" translate="yes" xml:space="preserve">
          <source>Same as a &amp;gt; b.</source>
          <target state="translated">与a&amp;gt; b相同。</target>
        </trans-unit>
        <trans-unit id="a93f8b7877d0318dcf0e65702f450f7f27cf73e2" translate="yes" xml:space="preserve">
          <source>Same as a &amp;gt;= b.</source>
          <target state="translated">与a&amp;gt; = b相同。</target>
        </trans-unit>
        <trans-unit id="9626d6154fa1c45a047f1dc2deafe0a5ec0def3e" translate="yes" xml:space="preserve">
          <source>Same as a &amp;lt; b.</source>
          <target state="translated">与a &amp;lt;b相同。</target>
        </trans-unit>
        <trans-unit id="9819a4a43e3cb225a649fc00846f7c4c26f95f63" translate="yes" xml:space="preserve">
          <source>Same as a &amp;lt;= b.</source>
          <target state="translated">与a &amp;lt;= b相同。</target>
        </trans-unit>
        <trans-unit id="9093a1278792375be5f92ad321e384b025c0c9a0" translate="yes" xml:space="preserve">
          <source>Same as a == b.</source>
          <target state="translated">同a==b。</target>
        </trans-unit>
        <trans-unit id="0a771c36be05d64f376a7d57849bb33ee0c53884" translate="yes" xml:space="preserve">
          <source>Sandbox</source>
          <target state="translated">Sandbox</target>
        </trans-unit>
        <trans-unit id="c1c9094b53d991ebf788f3f011fb62b96a813116" translate="yes" xml:space="preserve">
          <source>Scoping Behavior</source>
          <target state="translated">范围界定行为</target>
        </trans-unit>
        <trans-unit id="43ddf283f03fda4643fe2db02659e6fb64a89999" translate="yes" xml:space="preserve">
          <source>Search Page</source>
          <target state="translated">搜索页面</target>
        </trans-unit>
        <trans-unit id="83c9c2e2a30c460752b7a41213ac06bec63a52b9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#bytecode-cache&quot;&gt;Bytecode Cache&lt;/a&gt; for more information.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;#bytecode-cache&quot;&gt;字节码缓存&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="294a93d42216b504ccde38dbacdd55b257f64fe1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#notes-on-subscriptions&quot;&gt;Notes on subscriptions&lt;/a&gt; for more details.</source>
          <target state="translated">有关更多详细信息，请参见&lt;a href=&quot;#notes-on-subscriptions&quot;&gt;订阅&lt;/a&gt;说明。</target>
        </trans-unit>
        <trans-unit id="06d93897c2551bb9e898fca4617c3da1bebba563" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#default&quot;&gt;&lt;code&gt;default()&lt;/code&gt;&lt;/a&gt; filter for a simple way to set undefined variables.</source>
          <target state="translated">有关设置未定义变量的简单方法，请参见&lt;a href=&quot;#default&quot;&gt; &lt;code&gt;default()&lt;/code&gt; &lt;/a&gt;过滤器。</target>
        </trans-unit>
        <trans-unit id="4a9863d5f8d62a96977b98e7bb29cdeae4b3506c" translate="yes" xml:space="preserve">
          <source>See the section about &lt;a href=&quot;#template-inheritance&quot;&gt;Template Inheritance&lt;/a&gt; above.</source>
          <target state="translated">请参阅上面有关&lt;a href=&quot;#template-inheritance&quot;&gt;模板继承&lt;/a&gt;的部分。</target>
        </trans-unit>
        <trans-unit id="8cb52dd60a1e89ab83f1465e52ad778fe683f768" translate="yes" xml:space="preserve">
          <source>Set the environment for all nodes.</source>
          <target state="translated">设置所有节点的环境。</target>
        </trans-unit>
        <trans-unit id="e700eba6661befc9f6d798a3ccad149f365abd9f" translate="yes" xml:space="preserve">
          <source>Set the line numbers of the node and children.</source>
          <target state="translated">设置节点和子节点的行号。</target>
        </trans-unit>
        <trans-unit id="afb324b0e6260f7ef4981606a16c4f24ee7892df" translate="yes" xml:space="preserve">
          <source>Short circuited AND.</source>
          <target state="translated">短路和。</target>
        </trans-unit>
        <trans-unit id="a7f5171e5d1781e0ad43d2a2c8bbf56e5f433589" translate="yes" xml:space="preserve">
          <source>Short circuited OR.</source>
          <target state="translated">短路OR。</target>
        </trans-unit>
        <trans-unit id="844b6c9c980df134ce19618d04857c61b18bbd90" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;loop.cycle&lt;/code&gt;, but can be used outside loops or across multiple loops. For example, render a list of folders and files in a list, alternating giving them &amp;ldquo;odd&amp;rdquo; and &amp;ldquo;even&amp;rdquo; classes.</source>
          <target state="translated">与 &lt;code&gt;loop.cycle&lt;/code&gt; 类似，但是可以在循环外部或跨多个循环使用。例如，在列表中呈现文件夹和文件的列表，交替给它们提供&amp;ldquo;奇数&amp;rdquo;和&amp;ldquo;偶数&amp;rdquo;类。</target>
        </trans-unit>
        <trans-unit id="d44e18ea92915cdbd69eb88b82911bdf9deee170" translate="yes" xml:space="preserve">
          <source>Similar to a generator comprehension such as:</source>
          <target state="translated">类似于发电机的理解力,如。</target>
        </trans-unit>
        <trans-unit id="fdaaa65da21571955b43ec2c1b986421bdba7cbd" translate="yes" xml:space="preserve">
          <source>Since Jinja 2.1, an extra &lt;code&gt;cycle&lt;/code&gt; helper exists that allows loop-unbound cycling. For more information, have a look at the &lt;a href=&quot;#builtin-globals&quot;&gt;List of Global Functions&lt;/a&gt;.</source>
          <target state="translated">从Jinja 2.1开始，存在一个额外的 &lt;code&gt;cycle&lt;/code&gt; 助手，它允许循环进行无界循环。有关更多信息，请&lt;a href=&quot;#builtin-globals&quot;&gt;参阅&amp;ldquo;全局函数列表&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c19eebe8e8cf01c55c96a2698899a44e6ab9fc97" translate="yes" xml:space="preserve">
          <source>Since Jinja 2.2, line-based comments are available as well. For example, if the line-comment prefix is configured to be &lt;code&gt;##&lt;/code&gt;, everything from &lt;code&gt;##&lt;/code&gt; to the end of the line is ignored (excluding the newline sign):</source>
          <target state="translated">从Jinja 2.2开始，基于行的注释也可用。例如，如果将行注释前缀配置为 &lt;code&gt;##&lt;/code&gt; ，则将忽略从 &lt;code&gt;##&lt;/code&gt; 到行尾的所有内容（不包括换行符）：</target>
        </trans-unit>
        <trans-unit id="29357c589f31a76c6bc3fef9e02fe73cf07c6c61" translate="yes" xml:space="preserve">
          <source>Slice an iterator and return a list of lists containing those items. Useful if you want to create a div containing three ul tags that represent columns:</source>
          <target state="translated">切分一个迭代器并返回一个包含这些项目的列表。如果你想创建一个包含三个代表列的ul标签的div,这个方法很有用。</target>
        </trans-unit>
        <trans-unit id="bb65389798978a2ccd3b307710a43072f2930bba" translate="yes" xml:space="preserve">
          <source>Some loaders load templates from locations where the template sources may change (ie: file system or database). If &lt;code&gt;auto_reload&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt; (default) every time a template is requested the loader checks if the source changed and if yes, it will reload the template. For higher performance it&amp;rsquo;s possible to disable that.</source>
          <target state="translated">一些加载程序从模板源可能更改的位置（即文件系统或数据库）加载模板。如果每次请求模板时 &lt;code&gt;auto_reload&lt;/code&gt; 都设置为 &lt;code&gt;True&lt;/code&gt; （默认值），则加载器将检查源是否已更改，如果是，则它将重新加载模板。为了获得更高的性能，可以将其禁用。</target>
        </trans-unit>
        <trans-unit id="75a62f3fd14c5716af8ef6a1d3efa00d5cb7132e" translate="yes" xml:space="preserve">
          <source>Sort a dict and yield (key, value) pairs. Because python dicts are unsorted you may want to use this function to order them by either key or value:</source>
          <target state="translated">对dict进行排序,产生(key,value)对。因为 python dict 是未排序的,所以你可能想用这个函数来按 key 或 value 来排序。</target>
        </trans-unit>
        <trans-unit id="6613f9cd3190048d407db8912b358a2661a97850" translate="yes" xml:space="preserve">
          <source>Sort an iterable using Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/functions.html#sorted&quot;&gt;&lt;code&gt;sorted()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用Python的&lt;a href=&quot;https://docs.python.org/3/library/functions.html#sorted&quot;&gt; &lt;code&gt;sorted()&lt;/code&gt; &lt;/a&gt;对可迭代对象进行排序。</target>
        </trans-unit>
        <trans-unit id="d22360f4eb53e527c0efb166ced558e4cb8014da" translate="yes" xml:space="preserve">
          <source>Sounds complicated but is very basic. It&amp;rsquo;s easiest to understand it by starting with an example.</source>
          <target state="translated">听起来很复杂，但是非常基础。从一个示例开始，最容易理解它。</target>
        </trans-unit>
        <trans-unit id="e382f0d2b6ab8834194da1fc7849c7ad778e12e7" translate="yes" xml:space="preserve">
          <source>Specific node for with statements. In older versions of Jinja the with statement was implemented on the base of the &lt;code&gt;Scope&lt;/code&gt; node instead.</source>
          <target state="translated">with语句的特定节点。在Jinja的旧版本中，with语句是在 &lt;code&gt;Scope&lt;/code&gt; 节点的基础上实现的。</target>
        </trans-unit>
        <trans-unit id="396bbf1a07bce3fa1085dc09b2ce87fd055f711c" translate="yes" xml:space="preserve">
          <source>Starting with Jinja 2.10, the block assignment supports filters.</source>
          <target state="translated">从Jinja 2.10开始,区块分配支持过滤器。</target>
        </trans-unit>
        <trans-unit id="2b89f074899042ae38deb7c42515ec2d40019d74" translate="yes" xml:space="preserve">
          <source>Starting with Jinja 2.2, you can explicitly specify that variables are available in a block by setting the block to &amp;ldquo;scoped&amp;rdquo; by adding the &lt;code&gt;scoped&lt;/code&gt; modifier to a block declaration:</source>
          <target state="translated">从Jinja 2.2开始，您可以通过将 &lt;code&gt;scoped&lt;/code&gt; 限定符添加到块声明中来将块设置为&amp;ldquo;作用域&amp;rdquo;，从而明确指定变量在块中可用：</target>
        </trans-unit>
        <trans-unit id="1bfe751f84fe5346e496499bb49c233fbadfa5ce" translate="yes" xml:space="preserve">
          <source>Starting with Jinja 2.8, it&amp;rsquo;s possible to also use block assignments to capture the contents of a block into a variable name. This can be useful in some situations as an alternative for macros. In that case, instead of using an equals sign and a value, you just write the variable name and then everything until &lt;code&gt;{% endset %}&lt;/code&gt; is captured.</source>
          <target state="translated">从Jinja 2.8开始，还可以使用块分配将块的内容捕获到变量名中。在某些情况下，这可以用作宏的替代方法。在这种情况下，您无需编写等号和值，而只需编写变量名称，然后编写所有内容，直到捕获 &lt;code&gt;{% endset %}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0194d53b94da57c0b99e111103eb27f5ff40eaea" translate="yes" xml:space="preserve">
          <source>Starting with Jinja 2.9 policies can be configured on the environment which can slightly influence how filters and other template constructs behave. They can be configured with the &lt;a href=&quot;#jinja2.Environment.policies&quot;&gt;&lt;code&gt;policies&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">从Jinja 2.9开始，可以在环境中配置策略，这可能会稍微影响过滤器和其他模板构造的行为。可以使用&lt;a href=&quot;#jinja2.Environment.policies&quot;&gt; &lt;code&gt;policies&lt;/code&gt; &lt;/a&gt;属性配置它们。</target>
        </trans-unit>
        <trans-unit id="cafdcaeb4861bbc7c82003a12e6f0283315542a6" translate="yes" xml:space="preserve">
          <source>Stores the bytecode in the cache. &lt;code&gt;value&lt;/code&gt; is a string and &lt;code&gt;timeout&lt;/code&gt; the timeout of the key. If timeout is not provided a default timeout or no timeout should be assumed, if it&amp;rsquo;s provided it&amp;rsquo;s an integer with the number of seconds the cache item should exist.</source>
          <target state="translated">将字节码存储在缓存中。 &lt;code&gt;value&lt;/code&gt; 是一个字符串，并且 &lt;code&gt;timeout&lt;/code&gt; 是键的超时。如果未提供超时，则默认为超时，或者不假定为超时，如果已提供，则为整数，其中包含缓存项应存在的秒数。</target>
        </trans-unit>
        <trans-unit id="3ce18feccb225be1a525b3b955786869abaf8a5c" translate="yes" xml:space="preserve">
          <source>String formatting is used even if no placeholders are used, which makes all strings use a consistent format. Remember to escape any raw percent signs as &lt;code&gt;%%&lt;/code&gt;, such as &lt;code&gt;100%%&lt;/code&gt;.</source>
          <target state="translated">即使不使用占位符，也会使用字符串格式，这将使所有字符串都使用一致的格式。切记不要将任何原始百分号转义为 &lt;code&gt;%%&lt;/code&gt; ，例如 &lt;code&gt;100%%&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="758651fa6af3dea8d237a2cff958c9d836d1e6a3" translate="yes" xml:space="preserve">
          <source>String literals in templates with automatic escaping are considered unsafe because native Python strings (&lt;code&gt;str&lt;/code&gt;, &lt;code&gt;unicode&lt;/code&gt;, &lt;code&gt;basestring&lt;/code&gt;) are not &lt;code&gt;MarkupSafe.Markup&lt;/code&gt; strings with an &lt;code&gt;__html__&lt;/code&gt; attribute.</source>
          <target state="translated">具有自动转义的模板中的字符串文字被认为是不安全的，因为本机Python字符串（ &lt;code&gt;str&lt;/code&gt; ， &lt;code&gt;unicode&lt;/code&gt; ， &lt;code&gt;basestring&lt;/code&gt; ）不是具有 &lt;code&gt;__html__&lt;/code&gt; 属性的 &lt;code&gt;MarkupSafe.Markup&lt;/code&gt; 字符串。</target>
        </trans-unit>
        <trans-unit id="694cb7c0f7dc6fbad9cdf2eb0aa3e65f3233c47f" translate="yes" xml:space="preserve">
          <source>Strip SGML/XML tags and replace adjacent whitespace by one space.</source>
          <target state="translated">剥离SGML/XML标签,用一个空格代替相邻的空白。</target>
        </trans-unit>
        <trans-unit id="dd06c47f282d620503c004a10e1cacd18018ce29" translate="yes" xml:space="preserve">
          <source>Strip leading and trailing characters, by default whitespace.</source>
          <target state="translated">剥离前导字符和尾部字符,默认为空格。</target>
        </trans-unit>
        <trans-unit id="49922701fd34ab645b330fa50f74d87424e231e0" translate="yes" xml:space="preserve">
          <source>Subclasses have to override this method to load bytecode into a bucket. If they are not able to find code in the cache for the bucket, it must not do anything.</source>
          <target state="translated">子类必须重写这个方法才能将字节码加载到 bucket 中。如果他们不能在bucket的缓存中找到代码,它一定不会做任何事情。</target>
        </trans-unit>
        <trans-unit id="c95da60387c38394a0036b09026d1e93fe602632" translate="yes" xml:space="preserve">
          <source>Subclasses have to override this method to write the bytecode from a bucket back to the cache. If it unable to do so it must not fail silently but raise an exception.</source>
          <target state="translated">子类必须重写这个方法才能将字节码从 bucket 写回缓存。如果它不能这样做,它不能默默地失败,而是要引发一个异常。</target>
        </trans-unit>
        <trans-unit id="c803b9b336348f54fc64d933f649c3f920595877" translate="yes" xml:space="preserve">
          <source>Subclasses may override this method and implement template path joining here.</source>
          <target state="translated">子类可以重写这个方法,在这里实现模板路径的加入。</target>
        </trans-unit>
        <trans-unit id="9c07fe0cfdeb6c136fd708b6a85f82ef8783ee03" translate="yes" xml:space="preserve">
          <source>Subtract the right from the left node.</source>
          <target state="translated">从左边的节点中减去右边。</target>
        </trans-unit>
        <trans-unit id="eff7d7ea80d1caec25b0e5a0546bfa2147445510" translate="yes" xml:space="preserve">
          <source>Subtract the second number from the first one. &lt;code&gt;{{ 3 - 2 }}&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">从第一个减去第二个数字。 &lt;code&gt;{{ 3 - 2 }}&lt;/code&gt; 是 &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3387f86d284c0b43d2ea73ff54d2a7b7a48e489e" translate="yes" xml:space="preserve">
          <source>Super Blocks</source>
          <target state="translated">超级块</target>
        </trans-unit>
        <trans-unit id="21dffc2fdfe53050af42ded6c28267b1bc220972" translate="yes" xml:space="preserve">
          <source>Switching from other Template Engines</source>
          <target state="translated">从其他模板引擎切换</target>
        </trans-unit>
        <trans-unit id="71bba7c9cef25d9bd23a9aa321adc18e9fc6cf73" translate="yes" xml:space="preserve">
          <source>Sync methods and filters become wrappers around their corresponding async implementations where needed. For example, &lt;code&gt;render&lt;/code&gt; invokes &lt;code&gt;async_render&lt;/code&gt;, and &lt;code&gt;|map&lt;/code&gt; supports async iterables.</source>
          <target state="translated">同步方法和过滤器在需要时成为其相应的异步实现的包装。例如， &lt;code&gt;render&lt;/code&gt; 调用 &lt;code&gt;async_render&lt;/code&gt; ，并且 &lt;code&gt;|map&lt;/code&gt; 支持异步可迭代。</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="281654bbd7441e0f276a381271aea16708759c5a" translate="yes" xml:space="preserve">
          <source>Template Designer Documentation</source>
          <target state="translated">模板设计师文档</target>
        </trans-unit>
        <trans-unit id="9b7e138f2dad79fc18782855615d0479367b56c8" translate="yes" xml:space="preserve">
          <source>Template File Extension</source>
          <target state="translated">模板文件扩展名</target>
        </trans-unit>
        <trans-unit id="d6b6bb3a1a939adefc8ad08e7880baf39f4c9d7b" translate="yes" xml:space="preserve">
          <source>Template Inheritance</source>
          <target state="translated">模板继承</target>
        </trans-unit>
        <trans-unit id="78c16f64ddfd962c1a4af200be96953360f3c35a" translate="yes" xml:space="preserve">
          <source>Template Objects</source>
          <target state="translated">模板对象</target>
        </trans-unit>
        <trans-unit id="9f87b7ab70925f64448758502a66ba88da8a9d3a" translate="yes" xml:space="preserve">
          <source>Template objects created from the constructor rather than an environment do have an &lt;code&gt;environment&lt;/code&gt; attribute that points to a temporary environment that is probably shared with other templates created with the constructor and compatible settings.</source>
          <target state="translated">从构造函数而不是环境创建的模板对象确实具有指向临时环境的 &lt;code&gt;environment&lt;/code&gt; 属性，该环境可能与使用构造函数和兼容设置创建的其他模板共享。</target>
        </trans-unit>
        <trans-unit id="a7288bb9ab09af6f0b90103ee11424f355ff3676" translate="yes" xml:space="preserve">
          <source>Template rendering requires an event loop to be available to the current thread. &lt;a href=&quot;https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_event_loop&quot;&gt;&lt;code&gt;asyncio.get_event_loop()&lt;/code&gt;&lt;/a&gt; must return an event loop.</source>
          <target state="translated">模板渲染要求事件循环可用于当前线程。&lt;a href=&quot;https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_event_loop&quot;&gt; &lt;code&gt;asyncio.get_event_loop()&lt;/code&gt; &lt;/a&gt;必须返回事件循环。</target>
        </trans-unit>
        <trans-unit id="39d49599f75e22a6d75ba5b9d80545821fe64568" translate="yes" xml:space="preserve">
          <source>Template variables are defined by the context dictionary passed to the template.</source>
          <target state="translated">模板变量由传递给模板的上下文字典定义。</target>
        </trans-unit>
        <trans-unit id="ba5b258233f91378dd8ccbeefd31f8df72a29e29" translate="yes" xml:space="preserve">
          <source>Templates can be precompiled with &lt;a href=&quot;#jinja2.Environment.compile_templates&quot;&gt;&lt;code&gt;Environment.compile_templates()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">模板可以使用&lt;a href=&quot;#jinja2.Environment.compile_templates&quot;&gt; &lt;code&gt;Environment.compile_templates()&lt;/code&gt; &lt;/a&gt;进行预编译。</target>
        </trans-unit>
        <trans-unit id="60b1bb86d1e13ba28745be59bd5b9264a89c1729" translate="yes" xml:space="preserve">
          <source>Test a token against a token expression. This can either be a token type or &lt;code&gt;'token_type:token_value'&lt;/code&gt;. This can only test against string values and types.</source>
          <target state="translated">针对令牌表达式测试令牌。这可以是令牌类型，也可以是 &lt;code&gt;'token_type:token_value'&lt;/code&gt; 。这只能针对字符串值和类型进行测试。</target>
        </trans-unit>
        <trans-unit id="4aef60e6d06c141d6bd4556489862e87afb3283f" translate="yes" xml:space="preserve">
          <source>Test against multiple token expressions.</source>
          <target state="translated">针对多个标记表达式进行测试。</target>
        </trans-unit>
        <trans-unit id="85c302de93dc41f4d107ec9495a1b86790286695" translate="yes" xml:space="preserve">
          <source>Test if the attribute given is an internal python attribute. For example this function returns &lt;code&gt;True&lt;/code&gt; for the &lt;code&gt;func_code&lt;/code&gt; attribute of python objects. This is useful if the environment method &lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.is_safe_attribute&quot;&gt;&lt;code&gt;is_safe_attribute()&lt;/code&gt;&lt;/a&gt; is overridden.</source>
          <target state="translated">测试给定的属性是否是内部python属性。例如，此函数为python对象的 &lt;code&gt;func_code&lt;/code&gt; 属性返回 &lt;code&gt;True&lt;/code&gt; 。如果环境方法&lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.is_safe_attribute&quot;&gt; &lt;code&gt;is_safe_attribute()&lt;/code&gt; &lt;/a&gt;被覆盖，这将很有用。</target>
        </trans-unit>
        <trans-unit id="39fdec1194d94212b871a28b2aa04a73cd40fce1" translate="yes" xml:space="preserve">
          <source>Tests</source>
          <target state="translated">Tests</target>
        </trans-unit>
        <trans-unit id="68fec6564cecec23cfc3dfa54b9bf9ac51738e84" translate="yes" xml:space="preserve">
          <source>Tests can accept arguments, too. If the test only takes one argument, you can leave out the parentheses. For example, the following two expressions do the same thing:</source>
          <target state="translated">测试也可以接受参数。如果测试只接受一个参数,你可以省去括号。例如,下面的两个表达式做了同样的事情。</target>
        </trans-unit>
        <trans-unit id="9f7a02abfca4b4a403d8b08c3864152cde4469cd" translate="yes" xml:space="preserve">
          <source>Tests work like filters just that there is no way for a test to get access to the environment or context and that they can&amp;rsquo;t be chained. The return value of a test should be &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. The purpose of a test is to give the template designers the possibility to perform type and conformability checks.</source>
          <target state="translated">测试就像过滤器一样工作，只是测试无法访问环境或上下文，并且不能被链接。测试的返回值应为 &lt;code&gt;True&lt;/code&gt; 或 &lt;code&gt;False&lt;/code&gt; 。测试的目的是使模板设计人员可以执行类型和一致性检查。</target>
        </trans-unit>
        <trans-unit id="cb66034b6a518b97ae4eb07cdc2717ab088f1068" translate="yes" xml:space="preserve">
          <source>TextMate</source>
          <target state="translated">TextMate</target>
        </trans-unit>
        <trans-unit id="89d2fafb10ff9782ca22c80514f20be7578870b9" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;do&amp;rdquo; aka expression-statement extension adds a simple &lt;code&gt;do&lt;/code&gt; tag to the template engine that works like a variable expression but ignores the return value.</source>
          <target state="translated">&amp;ldquo; do&amp;rdquo;又称表达式声明扩展，向模板引擎添加了一个简单的 &lt;code&gt;do&lt;/code&gt; 标记，其作用类似于变量表达式，但忽略了返回值。</target>
        </trans-unit>
        <trans-unit id="9d21c6d6134bc0cc71aa1b7a3bad6734d428a9bb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#builtin-filters&quot;&gt;List of Builtin Filters&lt;/a&gt; below describes all the builtin filters.</source>
          <target state="translated">下面&lt;a href=&quot;#builtin-filters&quot;&gt;的内置过滤器列表&lt;/a&gt;描述了所有内置过滤器。</target>
        </trans-unit>
        <trans-unit id="26c47c5e3a4eb3183350fe5400257e4239b1726b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#builtin-tests&quot;&gt;List of Builtin Tests&lt;/a&gt; below describes all the builtin tests.</source>
          <target state="translated">下面&lt;a href=&quot;#builtin-tests&quot;&gt;的内置测试列表&lt;/a&gt;描述了所有内置测试。</target>
        </trans-unit>
        <trans-unit id="3dd0889fb229de67aaeda1fb66786eafe030fb0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Environment&lt;/code&gt; that created the bucket.</source>
          <target state="translated">创建存储桶的 &lt;code&gt;Environment&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4e49c4c3d92cccb91008892e6613dedf5821f73c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;else&lt;/code&gt; part is optional. If not provided, the else block implicitly evaluates into an &lt;code&gt;Undefined&lt;/code&gt; object (regardless of what &lt;code&gt;undefined&lt;/code&gt; in the environment is set to):</source>
          <target state="translated">在 &lt;code&gt;else&lt;/code&gt; 部分是可选的。如果未提供，则else块将隐式评估为一个 &lt;code&gt;Undefined&lt;/code&gt; 对象（无论环境中的 &lt;code&gt;undefined&lt;/code&gt; 设置为什么）：</target>
        </trans-unit>
        <trans-unit id="17bcb404299aa7a152b80fc3c09624483da811b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enabled_extensions&lt;/code&gt; is an iterable of all the extensions that autoescaping should be enabled for. Likewise &lt;code&gt;disabled_extensions&lt;/code&gt; is a list of all templates it should be disabled for. If a template is loaded from a string then the default from &lt;code&gt;default_for_string&lt;/code&gt; is used. If nothing matches then the initial value of autoescaping is set to the value of &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;enabled_extensions&lt;/code&gt; 是一个迭代所有autoescaping应该启用的扩展。同样， &lt;code&gt;disabled_extensions&lt;/code&gt; 是应对其禁用的所有模板的列表。如果从字符串加载模板，则使用 &lt;code&gt;default_for_string&lt;/code&gt; 的默认值。如果没有匹配项，则将自动转义的初始值设置为 &lt;code&gt;default&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="b8dd9ca7742209b96a8fcb0d5037f87dbb0827b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; tag can be used to extend one template from another. You can have multiple &lt;code&gt;extends&lt;/code&gt; tags in a file, but only one of them may be executed at a time.</source>
          <target state="translated">所述 &lt;code&gt;extends&lt;/code&gt; 标记可用于从另一个延伸的一个模板。一个文件中可以有多个 &lt;code&gt;extends&lt;/code&gt; 标记，但是一次只能执行其中一个。</target>
        </trans-unit>
        <trans-unit id="4a84343788646aec8a30c760130c5e7402a1a51d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_gettext_translations&lt;/code&gt; function would return the translator for the current configuration, for example by using &lt;code&gt;gettext.find&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;get_gettext_translations&lt;/code&gt; 功能将通过返回翻译为当前配置，例如 &lt;code&gt;gettext.find&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="599099681c6ed728ab0bb6cffdb85eacab0a4c6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;globals&lt;/code&gt; parameter can be used to provide template wide globals. These variables are available in the context at render time.</source>
          <target state="translated">该 &lt;code&gt;globals&lt;/code&gt; 参数可用于提供模板宽全局。这些变量在渲染时在上下文中可用。</target>
        </trans-unit>
        <trans-unit id="5999bdc8136c78bfacf86f9dd0f415b3d2e6b67b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; statement in Jinja is comparable with the Python if statement. In the simplest form, you can use it to test if a variable is defined, not empty and not false:</source>
          <target state="translated">Jinja中的 &lt;code&gt;if&lt;/code&gt; 语句与Python if语句具有可比性。以最简单的形式，您可以使用它来测试是否定义了一个变量，该变量不是空的也不是假的：</target>
        </trans-unit>
        <trans-unit id="366dec165ec08c74d11e49511ae50479b104e71f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; tag is useful to include a template and return the rendered contents of that file into the current namespace:</source>
          <target state="translated">在 &lt;code&gt;include&lt;/code&gt; 标签是有用的包括模板，该文件的内容呈现到返回当前的命名空间：</target>
        </trans-unit>
        <trans-unit id="b33f0f5d4bf2fc3b14f6e107b8ec032109378905" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;in&lt;/code&gt; operators support negation using an infix notation, too: &lt;code&gt;foo is not bar&lt;/code&gt; and &lt;code&gt;foo not in bar&lt;/code&gt; instead of &lt;code&gt;not foo is bar&lt;/code&gt; and &lt;code&gt;not foo in bar&lt;/code&gt;. All other expressions require a prefix notation: &lt;code&gt;not (foo and bar).&lt;/code&gt;</source>
          <target state="translated">该 &lt;code&gt;is&lt;/code&gt; 和 &lt;code&gt;in&lt;/code&gt; 运营商的支持否定使用中缀表示法，太： &lt;code&gt;foo is not bar&lt;/code&gt; 和 &lt;code&gt;foo not in bar&lt;/code&gt; ，而不是 &lt;code&gt;not foo is bar&lt;/code&gt; 和 &lt;code&gt;not foo in bar&lt;/code&gt; 。所有其他表达式都需要前缀表示法： &lt;code&gt;not (foo and bar).&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d728c8cd0343816fb13d101f097a4e1f25cbb4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loop&lt;/code&gt; variable always refers to the closest (innermost) loop. If we have more than one level of loops, we can rebind the variable &lt;code&gt;loop&lt;/code&gt; by writing &lt;code&gt;{% set outer_loop = loop %}&lt;/code&gt; after the loop that we want to use recursively. Then, we can call it using &lt;code&gt;{{ outer_loop(&amp;hellip;) }}&lt;/code&gt;</source>
          <target state="translated">该 &lt;code&gt;loop&lt;/code&gt; 变量总是指最接近（最）循环。如果我们具有多个级别的循环，则可以通过在要递归使用的循环之后编写 &lt;code&gt;{% set outer_loop = loop %}&lt;/code&gt; 来重新绑定变量 &lt;code&gt;loop&lt;/code&gt; 。然后，我们可以使用 &lt;code&gt;{{ outer_loop(&amp;hellip;) }}&lt;/code&gt; 来调用它</target>
        </trans-unit>
        <trans-unit id="ffa20efc672eacd14a2f2adc36cbc34965d9712b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;navigation&lt;/code&gt; variable then contains the navigation HTML source.</source>
          <target state="translated">然后， &lt;code&gt;navigation&lt;/code&gt; 变量包含导航HTML源。</target>
        </trans-unit>
        <trans-unit id="4e6ed810828757cf2dd487f3f6b9806147abe4ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngettext&lt;/code&gt; function&amp;rsquo;s format string automatically receives the count as a &lt;code&gt;num&lt;/code&gt; parameter in addition to the given parameters.</source>
          <target state="translated">该 &lt;code&gt;ngettext&lt;/code&gt; 函数的格式字符串自动接收数为 &lt;code&gt;num&lt;/code&gt; 除了给定参数的参数。</target>
        </trans-unit>
        <trans-unit id="0302aa60f48cff7cc2c0e880647661d53744883f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;select_autoescape()&lt;/code&gt; function returns a function that works roughly like this:</source>
          <target state="translated">该 &lt;code&gt;select_autoescape()&lt;/code&gt; 函数返回的工作原理大致是这样的一个功能：</target>
        </trans-unit>
        <trans-unit id="b37dbe778de1195f08ba576f1d92197086c49dcc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uptodatefunc&lt;/code&gt; is a function that is called if autoreload is enabled and has to return &lt;code&gt;True&lt;/code&gt; if the template is still up to date. For more details have a look at &lt;a href=&quot;#jinja2.BaseLoader.get_source&quot;&gt;&lt;code&gt;BaseLoader.get_source()&lt;/code&gt;&lt;/a&gt; which has the same return value.</source>
          <target state="translated">该 &lt;code&gt;uptodatefunc&lt;/code&gt; 是，如果自动重启动时调用，并必须返回功能 &lt;code&gt;True&lt;/code&gt; 如果模板仍然是最新的。有关更多详细信息，请&lt;a href=&quot;#jinja2.BaseLoader.get_source&quot;&gt; &lt;code&gt;BaseLoader.get_source()&lt;/code&gt; &lt;/a&gt;具有相同返回值的BaseLoader.get_source（）。</target>
        </trans-unit>
        <trans-unit id="9a6d02a71a36a2f87e3183f4d4f4bb5d25f9eb5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{% extends %}&lt;/code&gt; tag is the key here. It tells the template engine that this template &amp;ldquo;extends&amp;rdquo; another template. When the template system evaluates this template, it first locates the parent. The extends tag should be the first tag in the template. Everything before it is printed out normally and may cause confusion. For details about this behavior and how to take advantage of it, see &lt;a href=&quot;../tricks/index#null-master-fallback&quot;&gt;Null-Master Fallback&lt;/a&gt;. Also a block will always be filled in regardless of whether the surrounding condition is evaluated to be true or false.</source>
          <target state="translated">该 &lt;code&gt;{% extends %}&lt;/code&gt; 标签是这里的关键。它告诉模板引擎该模板&amp;ldquo;扩展&amp;rdquo;了另一个模板。当模板系统评估该模板时，它首先找到父模板。extend标签应该是模板中的第一个标签。一切正常打印之前，可能会造成混乱。有关此行为以及如何利用它的详细信息，请参见&lt;a href=&quot;../tricks/index#null-master-fallback&quot;&gt;Null-Master Fallback&lt;/a&gt;。同样，无论周围条件是真还是假，都将始终填充一个块。</target>
        </trans-unit>
        <trans-unit id="d913a5da9e77f23f6dcfa3faec1b51cedf1a97a9" translate="yes" xml:space="preserve">
          <source>The AST (Abstract Syntax Tree) is used to represent a template after parsing. It&amp;rsquo;s build of nodes that the compiler then converts into executable Python code objects. Extensions that provide custom statements can return nodes to execute custom Python code.</source>
          <target state="translated">AST（抽象语法树）用于表示解析后的模板。它是节点的构建，编译器随后将其转换为可执行的Python代码对象。提供自定义语句的扩展可以返回节点以执行自定义Python代码。</target>
        </trans-unit>
        <trans-unit id="26a1adaa03161aa757dfdd7900a0e22880fc1a32" translate="yes" xml:space="preserve">
          <source>The Context</source>
          <target state="translated">背景</target>
        </trans-unit>
        <trans-unit id="69c42690226db8df149120d42a1f2c5aaa29e776" translate="yes" xml:space="preserve">
          <source>The Global Namespace</source>
          <target state="translated">全球命名空间</target>
        </trans-unit>
        <trans-unit id="f27e721e45fb30d7e4f7dba9bf5ff8a6c84d97fd" translate="yes" xml:space="preserve">
          <source>The Jinja &lt;a href=&quot;#jinja2.Markup&quot;&gt;&lt;code&gt;Markup&lt;/code&gt;&lt;/a&gt; class is compatible with at least Pylons and Genshi. It&amp;rsquo;s expected that more template engines and framework will pick up the &lt;code&gt;__html__&lt;/code&gt; concept soon.</source>
          <target state="translated">Jinja&lt;a href=&quot;#jinja2.Markup&quot;&gt; &lt;code&gt;Markup&lt;/code&gt; &lt;/a&gt;类至少与Pylons和Genshi兼容。预计不久将有更多的模板引擎和框架采用 &lt;code&gt;__html__&lt;/code&gt; 概念。</target>
        </trans-unit>
        <trans-unit id="150719ffc85cbf268af559b6a03ed0a69dde0a44" translate="yes" xml:space="preserve">
          <source>The Jinja sandbox alone is no solution for perfect security. Especially for web applications you have to keep in mind that users may create templates with arbitrary HTML in so it&amp;rsquo;s crucial to ensure that (if you are running multiple users on the same server) they can&amp;rsquo;t harm each other via JavaScript insertions and much more.</source>
          <target state="translated">仅Jinja沙箱是无法提供完美安全性的解决方案。特别是对于Web应用程序，您必须牢记用户可以使用任意HTML创建模板，因此至关重要的是确保（如果您在同一服务器上运行多个用户）它们不会通过JavaScript插入而相互伤害等等。 。</target>
        </trans-unit>
        <trans-unit id="1a5d7cf8bbf87a32102267af865dfa4fdcd6e698" translate="yes" xml:space="preserve">
          <source>The Jinja sandbox can be used to evaluate untrusted code. Access to unsafe attributes and methods is prohibited.</source>
          <target state="translated">Jinja沙盒可以用来评估不受信任的代码。禁止访问不安全的属性和方法。</target>
        </trans-unit>
        <trans-unit id="ed954408c9d4a41c45a4dcaa3a3a3a8718c160f0" translate="yes" xml:space="preserve">
          <source>The Meta API</source>
          <target state="translated">Meta API</target>
        </trans-unit>
        <trans-unit id="5287a865d4fa94f0799eb0a7da6e2b9b4dd0adb8" translate="yes" xml:space="preserve">
          <source>The advantage is that the special &lt;code&gt;loop&lt;/code&gt; variable will count correctly; thus not counting the users not iterated over.</source>
          <target state="translated">优点是特殊 &lt;code&gt;loop&lt;/code&gt; 变量将正确计数。因此不计算未迭代的用户。</target>
        </trans-unit>
        <trans-unit id="736d2d1721db942946aa8e127b1eb6e7d460273f" translate="yes" xml:space="preserve">
          <source>The advantages of newstyle gettext are:</source>
          <target state="translated">newstyle gettext的优点是:。</target>
        </trans-unit>
        <trans-unit id="87efc1e54ce1f52a50b83bbd04a521f6901e9b46" translate="yes" xml:space="preserve">
          <source>The basic usage is mapping on an attribute. Imagine you have a list of users but you are only interested in a list of usernames:</source>
          <target state="translated">基本用法是在属性上进行映射。想象一下,你有一个用户列表,但你只对一个用户名列表感兴趣。</target>
        </trans-unit>
        <trans-unit id="bff44c963bb3f6873719d8ce14e4ea53977fd956" translate="yes" xml:space="preserve">
          <source>The buckets get an internal checksum from the cache assigned and use this to automatically reject outdated cache material. Individual bytecode cache subclasses don&amp;rsquo;t have to care about cache invalidation.</source>
          <target state="translated">存储桶从分配的缓存中获取内部校验和，并使用该校验和自动拒绝过期的缓存材料。各个字节码缓存子类不必关心缓存失效。</target>
        </trans-unit>
        <trans-unit id="a5608d04a270e15af99edf5e181e96ed715fea38" translate="yes" xml:space="preserve">
          <source>The bytecode if it&amp;rsquo;s loaded, otherwise &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">字节码（如果已加载），否则为 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bc2df87e0254a4efdaebd038f81bf9c427a285d9" translate="yes" xml:space="preserve">
          <source>The central template object. This class represents a compiled template and is used to evaluate it.</source>
          <target state="translated">中心模板对象。该类代表一个已编译的模板,用于评估它。</target>
        </trans-unit>
        <trans-unit id="3b7f3e0dd2560db679b3671c38033127b206e3d9" translate="yes" xml:space="preserve">
          <source>The class used for code generation. This should not be changed in most cases, unless you need to modify the Python code a template compiles to.</source>
          <target state="translated">用于生成代码的类。在大多数情况下,这个类不应该被改变,除非你需要修改模板编译成的 Python 代码。</target>
        </trans-unit>
        <trans-unit id="12d066aa7be952b3983b512b482ef48cf851885a" translate="yes" xml:space="preserve">
          <source>The closest to regular Python behavior is the &lt;a href=&quot;#jinja2.StrictUndefined&quot;&gt;&lt;code&gt;StrictUndefined&lt;/code&gt;&lt;/a&gt; which disallows all operations beside testing if it&amp;rsquo;s an undefined object.</source>
          <target state="translated">最接近常规Python行为的是&lt;a href=&quot;#jinja2.StrictUndefined&quot;&gt; &lt;code&gt;StrictUndefined&lt;/code&gt; &lt;/a&gt;，除了测试它是否是未定义的对象外，它禁止所有操作。</target>
        </trans-unit>
        <trans-unit id="e0f53ba8611e7afc17680ade7ce14f2b65e2de9f" translate="yes" xml:space="preserve">
          <source>The compiled code uses &lt;code&gt;await&lt;/code&gt; for functions and attributes, and uses &lt;code&gt;async for&lt;/code&gt; loops. In order to support using both async and sync functions in this context, a small wrapper is placed around all calls and access, which add overhead compared to purely async code.</source>
          <target state="translated">编译后的代码将 &lt;code&gt;await&lt;/code&gt; 用于函数和属性，并将 &lt;code&gt;async for&lt;/code&gt; 循环。为了在这种情况下支持同时使用异步和同步功能，在所有调用和访问周围放置了一个小的包装，与纯异步代码相比，这增加了开销。</target>
        </trans-unit>
        <trans-unit id="29b4a98f72533773474b3d39ff1af16f71e06395" translate="yes" xml:space="preserve">
          <source>The context dictionary by the application with &lt;code&gt;markupsafe.Markup&lt;/code&gt;</source>
          <target state="translated">应用程序使用 &lt;code&gt;markupsafe.Markup&lt;/code&gt; 的上下文字典</target>
        </trans-unit>
        <trans-unit id="fb1dec15b0e0384fef7019c2ece8b8f7ed0520b1" translate="yes" xml:space="preserve">
          <source>The context is immutable. Modifications on &lt;a href=&quot;#jinja2.runtime.Context.parent&quot;&gt;&lt;code&gt;parent&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;must not&lt;/strong&gt; happen and modifications on &lt;a href=&quot;#jinja2.runtime.Context.vars&quot;&gt;&lt;code&gt;vars&lt;/code&gt;&lt;/a&gt; are allowed from generated template code only. Template filters and global functions marked as &lt;code&gt;contextfunction()&lt;/code&gt;s get the active context passed as first argument and are allowed to access the context read-only.</source>
          <target state="translated">上下文是不可变的。&lt;strong&gt;不得&lt;/strong&gt;对&lt;a href=&quot;#jinja2.runtime.Context.parent&quot;&gt; &lt;code&gt;parent&lt;/code&gt; &lt;/a&gt;进行修改，并且仅允许从生成的模板代码中对&lt;a href=&quot;#jinja2.runtime.Context.vars&quot;&gt; &lt;code&gt;vars&lt;/code&gt; &lt;/a&gt;进行修改。标记为 &lt;code&gt;contextfunction()&lt;/code&gt; 的模板过滤器和全局函数获取作为第一个参数传递的活动上下文，并被允许以只读方式访问上下文。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a6022f899435435b552f81b479ed6b692bef8ba3" translate="yes" xml:space="preserve">
          <source>The context used for templates. This should not be changed in most cases, unless you need to modify internals of how template variables are handled. For details, see &lt;a href=&quot;#jinja2.runtime.Context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">用于模板的上下文。在大多数情况下，除非您需要修改处理模板变量的内部方式，否则不应更改此设置。有关详细信息，请参见&lt;a href=&quot;#jinja2.runtime.Context&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8711917870fdd214358e8183652ecbe7d4d65fbe" translate="yes" xml:space="preserve">
          <source>The core component of Jinja is the &lt;code&gt;Environment&lt;/code&gt;. It contains important shared variables like configuration, filters, tests, globals and others. Instances of this class may be modified if they are not shared and if no template was loaded so far. Modifications on environments after the first template was loaded will lead to surprising effects and undefined behavior.</source>
          <target state="translated">Jinja的核心组件是 &lt;code&gt;Environment&lt;/code&gt; 。它包含重要的共享变量，例如配置，过滤器，测试，全局变量和其他。如果此类的实例尚未共享并且到目前为止尚未加载任何模板，则可以对其进行修改。加载第一个模板后对环境的修改将导致令人惊讶的效果和不确定的行为。</target>
        </trans-unit>
        <trans-unit id="d371375ef8232715590db451d94334903d523eee" translate="yes" xml:space="preserve">
          <source>The current &lt;a href=&quot;#eval-context&quot;&gt;Evaluation Context&lt;/a&gt;.</source>
          <target state="translated">当前的&lt;a href=&quot;#eval-context&quot;&gt;评价背景&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3b2ac6a8328ff36b6fb9ed70b6b2a84df36111e3" translate="yes" xml:space="preserve">
          <source>The current &lt;a href=&quot;#jinja2.lexer.Token&quot;&gt;&lt;code&gt;Token&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当前的&lt;a href=&quot;#jinja2.lexer.Token&quot;&gt; &lt;code&gt;Token&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6e16e18e16514057a777210e2d9f7bd1ee8183de" translate="yes" xml:space="preserve">
          <source>The current &lt;a href=&quot;#jinja2.lexer.TokenStream&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">当前的&lt;a href=&quot;#jinja2.lexer.TokenStream&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b75761bd813f44788ddffff0dbe11c55ec23f29c" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop. (0 indexed)</source>
          <target state="translated">循环的当前迭代。(0索引)</target>
        </trans-unit>
        <trans-unit id="2ae957376dd8bf52f87cded346b35444762a2644" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop. (1 indexed)</source>
          <target state="translated">循环的当前迭代。(1个索引)</target>
        </trans-unit>
        <trans-unit id="bf826a43a69849e145d53d3a2f0187acc2191d6b" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;../api/index#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt; renders templates to strings. With &lt;a href=&quot;#jinja2.nativetypes.NativeEnvironment&quot;&gt;&lt;code&gt;NativeEnvironment&lt;/code&gt;&lt;/a&gt;, rendering a template produces a native Python type. This is useful if you are using Jinja outside the context of creating text files. For example, your code may have an intermediate step where users may use templates to define values that will then be passed to a traditional string environment.</source>
          <target state="translated">默认&lt;a href=&quot;../api/index#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;将模板呈现为字符串。使用&lt;a href=&quot;#jinja2.nativetypes.NativeEnvironment&quot;&gt; &lt;code&gt;NativeEnvironment&lt;/code&gt; &lt;/a&gt;，呈现模板将生成本机Python类型。如果在创建文本文件的上下文之外使用Jinja，这将很有用。例如，您的代码可能有一个中间步骤，用户可以在其中使用模板来定义值，然后将这些值传递给传统的字符串环境。</target>
        </trans-unit>
        <trans-unit id="b98e2be861d72a1626d76b347260d10eb2ed5a10" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.call_binop&quot;&gt;&lt;code&gt;SandboxedEnvironment.call_binop&lt;/code&gt;&lt;/a&gt; will use the &lt;code&gt;SandboxedEnvironment.binop_table&lt;/code&gt; to translate operator symbols into callbacks performing the default operator behavior.</source>
          <target state="translated">&lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.call_binop&quot;&gt; &lt;code&gt;SandboxedEnvironment.call_binop&lt;/code&gt; &lt;/a&gt;的默认实现将使用 &lt;code&gt;SandboxedEnvironment.binop_table&lt;/code&gt; 将运算符转换为执行默认运算符行为的回调。</target>
        </trans-unit>
        <trans-unit id="eaa2af89ce4d33da9e1ed01fe5668fe0e9e46b69" translate="yes" xml:space="preserve">
          <source>The default leeway on newer Jinja versions is 5 and was 0 before but can be reconfigured globally.</source>
          <target state="translated">新版Jinja的默认余地是5,之前是0,但可以全局重新配置。</target>
        </trans-unit>
        <trans-unit id="34f35de9ff44f137cbb709b07c36016b7cf34122" translate="yes" xml:space="preserve">
          <source>The default operation form the operator table corresponds to the builtin function. Intercepted calls are always slower than the native operator call, so make sure only to intercept the ones you are interested in.</source>
          <target state="translated">操作符表的默认操作对应于内置函数。被拦截的调用总是比原生操作符调用慢,所以确保只拦截你感兴趣的操作符。</target>
        </trans-unit>
        <trans-unit id="7f2dd6c876af848c2f5b56e396ee87d98c751a94" translate="yes" xml:space="preserve">
          <source>The default parsing mode is a full tuple. If &lt;code&gt;simplified&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; only names and literals are parsed. The &lt;code&gt;no_condexpr&lt;/code&gt; parameter is forwarded to &lt;a href=&quot;#jinja2.parser.Parser.parse_expression&quot;&gt;&lt;code&gt;parse_expression()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">默认的解析模式是完整的元组。如果 &lt;code&gt;simplified&lt;/code&gt; 为 &lt;code&gt;True&lt;/code&gt; ,则仅解析名称和文字。所述 &lt;code&gt;no_condexpr&lt;/code&gt; 参数被转发到&lt;a href=&quot;#jinja2.parser.Parser.parse_expression&quot;&gt; &lt;code&gt;parse_expression()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ce1d381f32f7864d2c8ccf12ea6df0f659fa1bee" translate="yes" xml:space="preserve">
          <source>The default target that is issued for links from the &lt;code&gt;urlize&lt;/code&gt; filter if no other target is defined by the call explicitly.</source>
          <target state="translated">如果调用未明确定义其他目标，则为从 &lt;code&gt;urlize&lt;/code&gt; 过滤器的链接发出的默认目标。</target>
        </trans-unit>
        <trans-unit id="a7d5e40c3ac1512432712a1722dc16ea7431573a" translate="yes" xml:space="preserve">
          <source>The default undefined type. This undefined type can be printed and iterated over, but every other access will raise an &lt;a href=&quot;#jinja2.UndefinedError&quot;&gt;&lt;code&gt;UndefinedError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">默认的未定义类型。可以打印并迭代此未定义的类型，但是其他所有访问都会引发&lt;a href=&quot;#jinja2.UndefinedError&quot;&gt; &lt;code&gt;UndefinedError&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="d2cd2e2a7a7f1e40090a63c8fdf27ef3e4842693" translate="yes" xml:space="preserve">
          <source>The dict with the globals of that template. It&amp;rsquo;s unsafe to modify this dict as it may be shared with other templates or the environment that loaded the template.</source>
          <target state="translated">具有该模板的全局变量的dict。修改此字典是不安全的，因为它可能会与其他模板或加载该模板的环境共享。</target>
        </trans-unit>
        <trans-unit id="68a4a6ed4ea89e348554a61a10fb6f0776725e15" translate="yes" xml:space="preserve">
          <source>The easiest and most flexible way to access a template&amp;rsquo;s variables and macros is to import the whole template module into a variable. That way, you can access the attributes:</source>
          <target state="translated">访问模板变量和宏的最简单，最灵活的方法是将整个模板模块导入到变量中。这样，您可以访问属性：</target>
        </trans-unit>
        <trans-unit id="3095ccc2433915627c21c05a31a3e27795f5219c" translate="yes" xml:space="preserve">
          <source>The easiest way to output a literal variable delimiter (&lt;code&gt;{{&lt;/code&gt;) is by using a variable expression:</source>
          <target state="translated">输出文字变量定界符（ &lt;code&gt;{{&lt;/code&gt; ）的最简单方法是使用变量表达式：</target>
        </trans-unit>
        <trans-unit id="8dcd7913c85be80e0a2d9a6175f4f6619317ee14" translate="yes" xml:space="preserve">
          <source>The environment that loaded the template.</source>
          <target state="translated">加载模板的环境。</target>
        </trans-unit>
        <trans-unit id="e7425836628b29faf86a857ad78d9f8bd20fb1f4" translate="yes" xml:space="preserve">
          <source>The error message as utf-8 bytestring.</source>
          <target state="translated">错误信息为utf-8 bytestring。</target>
        </trans-unit>
        <trans-unit id="47ab179d684b86632997e85d2ed9908c54548766" translate="yes" xml:space="preserve">
          <source>The evaluation context (short eval context or eval ctx) is a new object introduced in Jinja 2.4 that makes it possible to activate and deactivate compiled features at runtime.</source>
          <target state="translated">评价上下文(简称eval context或eval ctx)是Jinja 2.4中引入的一个新对象,它可以在运行时激活和停用编译后的功能。</target>
        </trans-unit>
        <trans-unit id="69d395cfa78c48a832b8e3e50867b6c3d0dff828" translate="yes" xml:space="preserve">
          <source>The evaluation context must not be modified at runtime. Modifications must only happen with a &lt;a href=&quot;../extensions/index#jinja2.nodes.EvalContextModifier&quot;&gt;&lt;code&gt;nodes.EvalContextModifier&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../extensions/index#jinja2.nodes.ScopedEvalContextModifier&quot;&gt;&lt;code&gt;nodes.ScopedEvalContextModifier&lt;/code&gt;&lt;/a&gt; from an extension, not on the eval context object itself.</source>
          <target state="translated">评估上下文不得在运行时修改。只能使用扩展中的&lt;a href=&quot;../extensions/index#jinja2.nodes.EvalContextModifier&quot;&gt; &lt;code&gt;nodes.EvalContextModifier&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../extensions/index#jinja2.nodes.ScopedEvalContextModifier&quot;&gt; &lt;code&gt;nodes.ScopedEvalContextModifier&lt;/code&gt; 进行&lt;/a&gt;修改，而不能对eval上下文对象本身进行修改。</target>
        </trans-unit>
        <trans-unit id="a7d2ea552d7663092e97f44280401a48722db025" translate="yes" xml:space="preserve">
          <source>The exception that the undefined object wants to raise. This is usually one of &lt;a href=&quot;#jinja2.UndefinedError&quot;&gt;&lt;code&gt;UndefinedError&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;SecurityError&lt;/code&gt;.</source>
          <target state="translated">未定义对象想要引发的异常。这通常是&lt;a href=&quot;#jinja2.UndefinedError&quot;&gt; &lt;code&gt;UndefinedError&lt;/code&gt; &lt;/a&gt;或 &lt;code&gt;SecurityError&lt;/code&gt; 之一。</target>
        </trans-unit>
        <trans-unit id="db7dacdb6ffd39a044254a2959b30d9ff5228c7e" translate="yes" xml:space="preserve">
          <source>The filename of the template depends on the template loader. For example, the &lt;code&gt;FileSystemLoader&lt;/code&gt; allows you to access other templates by giving the filename. You can access templates in subdirectories with a slash:</source>
          <target state="translated">模板的文件名取决于模板加载器。例如， &lt;code&gt;FileSystemLoader&lt;/code&gt; 允许您通过提供文件名来访问其他模板。您可以在带有斜杠的子目录中访问模板：</target>
        </trans-unit>
        <trans-unit id="8cb6f2cd87006e17d7a1ae5d2fa0b46d0348951c" translate="yes" xml:space="preserve">
          <source>The filename of the template on the file system if it was loaded from there. Otherwise this is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">从文件系统上加载的模板在文件系统上的文件名。否则，它为 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8081ece21de84a94852da0fdf9db72bcf337583e" translate="yes" xml:space="preserve">
          <source>The filename of the template the parser processes. This is &lt;strong&gt;not&lt;/strong&gt; the load name of the template. For the load name see &lt;a href=&quot;#jinja2.parser.Parser.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. For templates that were not loaded form the file system this is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">解析器处理的模板的文件名。这&lt;strong&gt;不是&lt;/strong&gt;模板的加载名称。有关加载名称，请参见&lt;a href=&quot;#jinja2.parser.Parser.name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;。对于未从文件系统加载的模板，它为 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b15977d905ddb15df267aafa1ab07abfd258177" translate="yes" xml:space="preserve">
          <source>The filename that loaded the template as bytestring in the encoding of the file system (most likely utf-8 or mbcs on Windows systems).</source>
          <target state="translated">加载模板的文件名,以文件系统的编码(最可能是utf-8或Windows系统的mbcs)为bytestring。</target>
        </trans-unit>
        <trans-unit id="2b21c9b1ed5a10d4ce36fceb3c5af486447288ec" translate="yes" xml:space="preserve">
          <source>The following binary operators are interceptable: &lt;code&gt;//&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, and &lt;code&gt;**&lt;/code&gt;</source>
          <target state="translated">以下二进制运算符是可拦截的： &lt;code&gt;//&lt;/code&gt; ， &lt;code&gt;%&lt;/code&gt; ， &lt;code&gt;+&lt;/code&gt; ， &lt;code&gt;*&lt;/code&gt; ， &lt;code&gt;-&lt;/code&gt; ， &lt;code&gt;/&lt;/code&gt; 和 &lt;code&gt;**&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ade619698ea50e66f7022505f5a5bd23cebdaa1" translate="yes" xml:space="preserve">
          <source>The following characters are escaped in strings:</source>
          <target state="translated">以下字符在字符串中被转义。</target>
        </trans-unit>
        <trans-unit id="e7ac21448051637aacd6720fe772fb364c4435fb" translate="yes" xml:space="preserve">
          <source>The following example demonstrates using &lt;a href=&quot;#jinja2.ext.Extension.filter_stream&quot;&gt;&lt;code&gt;Extension.filter_stream()&lt;/code&gt;&lt;/a&gt; to parse calls to the &lt;code&gt;_()&lt;/code&gt; gettext function inline with static data without needing Jinja blocks.</source>
          <target state="translated">下面的示例演示如何使用&lt;a href=&quot;#jinja2.ext.Extension.filter_stream&quot;&gt; &lt;code&gt;Extension.filter_stream()&lt;/code&gt; &lt;/a&gt;解析对带有静态数据的内联 &lt;code&gt;_()&lt;/code&gt; gettext函数的调用，而无需Jinja块。</target>
        </trans-unit>
        <trans-unit id="4a87e51e4522eb4bd9cfaaaeb8e5be6c25842d70" translate="yes" xml:space="preserve">
          <source>The following example implements a &lt;code&gt;cache&lt;/code&gt; tag for Jinja by using the &lt;a href=&quot;https://github.com/pallets/cachelib&quot;&gt;cachelib&lt;/a&gt; library:</source>
          <target state="translated">以下示例通过使用&lt;a href=&quot;https://github.com/pallets/cachelib&quot;&gt;cachelib&lt;/a&gt;库为Jinja实现了一个 &lt;code&gt;cache&lt;/code&gt; 标签：</target>
        </trans-unit>
        <trans-unit id="e996672cb06bdbf22a558a5cc269d9f373baee06" translate="yes" xml:space="preserve">
          <source>The following example implements a sitemap with recursive loops:</source>
          <target state="translated">下面的例子实现了一个带有递归循环的网站地图。</target>
        </trans-unit>
        <trans-unit id="6a58881c27bb7da78f779f675f25c74e20b0110b" translate="yes" xml:space="preserve">
          <source>The following example shows the default configuration settings. An application developer can change the syntax configuration from &lt;code&gt;{% foo %}&lt;/code&gt; to &lt;code&gt;&amp;lt;% foo
%&amp;gt;&lt;/code&gt;, or something similar.</source>
          <target state="translated">以下示例显示了默认配置设置。应用程序开发人员可以将语法配置从 &lt;code&gt;{% foo %}&lt;/code&gt; 更改为 &lt;code&gt;&amp;lt;% foo %&amp;gt;&lt;/code&gt; 或类似的内容。</target>
        </trans-unit>
        <trans-unit id="80c9511ce64968437cf56c0c3d790911e17c0fe8" translate="yes" xml:space="preserve">
          <source>The following functions are available in the global scope by default:</source>
          <target state="translated">以下函数默认在全局范围内可用。</target>
        </trans-unit>
        <trans-unit id="ccf21e46d858fdf4c8b46bffa2136dba2e0e956b" translate="yes" xml:space="preserve">
          <source>The following lines do the same thing:</source>
          <target state="translated">下面的行文也是这样做的。</target>
        </trans-unit>
        <trans-unit id="5624ff6e094f4f44a1f06c18b4575617ab7845b0" translate="yes" xml:space="preserve">
          <source>The following operators are very useful but don&amp;rsquo;t fit into any of the other two categories:</source>
          <target state="translated">以下运算符非常有用，但不适用于其他两个类别：</target>
        </trans-unit>
        <trans-unit id="1eea7fb1654c61ba2a99ec8b871e696e46c6ea82" translate="yes" xml:space="preserve">
          <source>The following sections cover the built-in Jinja extensions that may be enabled by an application. An application could also provide further extensions not covered by this documentation; in which case there should be a separate document explaining said &lt;a href=&quot;../extensions/index#jinja-extensions&quot;&gt;extensions&lt;/a&gt;.</source>
          <target state="translated">以下各节介绍了可以由应用程序启用的内置Jinja扩展。应用程序还可以提供本文档未涵盖的其他扩展。在这种情况下，应该有一个单独的文件解释所述&lt;a href=&quot;../extensions/index#jinja-extensions&quot;&gt;扩展&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5c91e09470e7f6f30b48d7143b9a2f2b0b925f07" translate="yes" xml:space="preserve">
          <source>The following unary operators are interceptable: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;</source>
          <target state="translated">以下一元运算符是可拦截的： &lt;code&gt;+&lt;/code&gt; ， &lt;code&gt;-&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="670be3658dff2478a5a53108f348b8013fd74c27" translate="yes" xml:space="preserve">
          <source>The for loop. &lt;code&gt;target&lt;/code&gt; is the target for the iteration (usually a &lt;a href=&quot;#jinja2.nodes.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#jinja2.nodes.Tuple&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt;), &lt;code&gt;iter&lt;/code&gt; the iterable. &lt;code&gt;body&lt;/code&gt; is a list of nodes that are used as loop-body, and &lt;code&gt;else_&lt;/code&gt; a list of nodes for the &lt;code&gt;else&lt;/code&gt; block. If no else node exists it has to be an empty list.</source>
          <target state="translated">for循环。 &lt;code&gt;target&lt;/code&gt; 是迭代的目标（通常是&lt;a href=&quot;#jinja2.nodes.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#jinja2.nodes.Tuple&quot;&gt; &lt;code&gt;Tuple&lt;/code&gt; &lt;/a&gt;）， &lt;code&gt;iter&lt;/code&gt; 可迭代。 &lt;code&gt;body&lt;/code&gt; 是用作循环体的节点列表， &lt;code&gt;else_&lt;/code&gt; &lt;code&gt;else&lt;/code&gt; 块的节点列表。如果不存在其他节点，则该节点必须为空列表。</target>
        </trans-unit>
        <trans-unit id="a1400a0ca4193906fc5a452d03ce4cac12168b71" translate="yes" xml:space="preserve">
          <source>The general syntax is &lt;code&gt;&amp;lt;do something&amp;gt; if &amp;lt;something is true&amp;gt; else &amp;lt;do
something else&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;do something&amp;gt; if &amp;lt;something is true&amp;gt; else &amp;lt;do something else&amp;gt;&lt;/code&gt; 常规语法为&amp;lt;do something&amp;gt;，否则为&amp;lt;do something&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="b2417458654d0678657109be19d6d186876f9a27" translate="yes" xml:space="preserve">
          <source>The high-level API is the API you will use in the application to load and render Jinja templates. The &lt;a href=&quot;#low-level-api&quot;&gt;Low Level API&lt;/a&gt; on the other side is only useful if you want to dig deeper into Jinja or &lt;a href=&quot;../extensions/index#jinja-extensions&quot;&gt;develop extensions&lt;/a&gt;.</source>
          <target state="translated">高级API是您将在应用程序中用于加载和呈现Jinja模板的API。另一方面，&lt;a href=&quot;#low-level-api&quot;&gt;Low Level API&lt;/a&gt;仅在您想更深入地研究Jinja或&lt;a href=&quot;../extensions/index#jinja-extensions&quot;&gt;开发扩展&lt;/a&gt;时才有用。</target>
        </trans-unit>
        <trans-unit id="0261ad5ed1f1b7cf1658b911505f5e938b570c55" translate="yes" xml:space="preserve">
          <source>The i18n extension can be used in combination with &lt;a href=&quot;https://docs.python.org/3/library/gettext.html&quot;&gt;gettext&lt;/a&gt; or &lt;a href=&quot;http://babel.pocoo.org/&quot;&gt;Babel&lt;/a&gt;. When it&amp;rsquo;s enabled, Jinja provides a &lt;code&gt;trans&lt;/code&gt; statement that marks a block as translatable and calls &lt;code&gt;gettext&lt;/code&gt;.</source>
          <target state="translated">i18n扩展名可以与&lt;a href=&quot;https://docs.python.org/3/library/gettext.html&quot;&gt;gettext&lt;/a&gt;或&lt;a href=&quot;http://babel.pocoo.org/&quot;&gt;Babel&lt;/a&gt;结合使用。启用后，Jinja提供了一个 &lt;code&gt;trans&lt;/code&gt; 语句，该语句将一个块标记为可翻译，并调用 &lt;code&gt;gettext&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c98a4fe9e7867cb290ccd82ecd5b2dd7966e0bcc" translate="yes" xml:space="preserve">
          <source>The identifier of the extension. This is always the true import name of the extension class and must not be changed.</source>
          <target state="translated">扩展类的标识符。这始终是扩展类的真实导入名,不得更改。</target>
        </trans-unit>
        <trans-unit id="70c9c9f8270ba3928e4ca1518dc92222068a74df" translate="yes" xml:space="preserve">
          <source>The included template &lt;code&gt;render_box.html&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; able to access &lt;code&gt;box&lt;/code&gt; in Jinja 2.0. As of Jinja 2.1, &lt;code&gt;render_box.html&lt;/code&gt;&lt;em&gt;is&lt;/em&gt; able to do so.</source>
          <target state="translated">包含的模板 &lt;code&gt;render_box.html&lt;/code&gt; 是&lt;em&gt;不&lt;/em&gt;能够访问的 &lt;code&gt;box&lt;/code&gt; 在神社2.0。作为神社2.1， &lt;code&gt;render_box.html&lt;/code&gt; &lt;em&gt;是&lt;/em&gt;能够做到这一点。</target>
        </trans-unit>
        <trans-unit id="88f195dce518ea4ecbb39ddebc12a094f0be8ccd" translate="yes" xml:space="preserve">
          <source>The indent parameter can be used to enable pretty printing. Set it to the number of spaces that the structures should be indented with.</source>
          <target state="translated">缩进参数可以用来实现漂亮的打印。将其设置为结构应缩进的空格数。</target>
        </trans-unit>
        <trans-unit id="15a2d20b9ebcda593a717193d9d0f4a07597d0f5" translate="yes" xml:space="preserve">
          <source>The information about the safety of a variable is very fragile. It could happen that by coercing safe and unsafe values, the return value is double-escaped HTML.</source>
          <target state="translated">变量的安全信息是非常脆弱的。可能发生的情况是,通过胁迫安全和不安全的值,返回值是双字节的HTML。</target>
        </trans-unit>
        <trans-unit id="95b06f5cb3f330543b41348d11441ab0eb986f63" translate="yes" xml:space="preserve">
          <source>The item from the following iteration of the loop. Undefined during the last iteration.</source>
          <target state="translated">循环中下一次迭代的项目。最后一次迭代时未定义。</target>
        </trans-unit>
        <trans-unit id="6f313eb98892b99acece93872cd12684a3c5c99d" translate="yes" xml:space="preserve">
          <source>The item from the previous iteration of the loop. Undefined during the first iteration.</source>
          <target state="translated">循环前一次迭代的项目。第一次迭代时未定义。</target>
        </trans-unit>
        <trans-unit id="659ca721cd45dacdf0ccae1bde53add4ed576c51" translate="yes" xml:space="preserve">
          <source>The last item in the tuple is the &lt;code&gt;uptodate&lt;/code&gt; function. If auto reloading is enabled it&amp;rsquo;s always called to check if the template changed. No arguments are passed so the function must store the old state somewhere (for example in a closure). If it returns &lt;code&gt;False&lt;/code&gt; the template will be reloaded.</source>
          <target state="translated">元组中的最后一项是 &lt;code&gt;uptodate&lt;/code&gt; 函数。如果启用了自动重新加载，则始终会调用它来检查模板是否已更改。没有传递任何参数，因此该函数必须将旧状态存储在某个位置（例如，在闭包中）。如果返回 &lt;code&gt;False&lt;/code&gt; ，则将重新加载模板。</target>
        </trans-unit>
        <trans-unit id="47a4de44f584bba3ae597150fb1dd09a89ff6aec" translate="yes" xml:space="preserve">
          <source>The layout template can then access &lt;code&gt;active_page&lt;/code&gt;. Additionally it makes sense to define a default for that variable:</source>
          <target state="translated">然后，布局模板可以访问 &lt;code&gt;active_page&lt;/code&gt; 。另外，为该变量定义一个默认值也很有意义：</target>
        </trans-unit>
        <trans-unit id="b1755dba3c26e3dc145e01e61d95c10805b9a0a1" translate="yes" xml:space="preserve">
          <source>The line number of the token</source>
          <target state="translated">令牌的行号</target>
        </trans-unit>
        <trans-unit id="f0678a09bc8b4192ebe0dd659ae3d55642d1d433" translate="yes" xml:space="preserve">
          <source>The line number where the error occurred</source>
          <target state="translated">发生错误的行号</target>
        </trans-unit>
        <trans-unit id="382db9bf871dd58c466bd8de5298c2c0cc1ef91e" translate="yes" xml:space="preserve">
          <source>The line statement prefix can appear anywhere on the line as long as no text precedes it. For better readability, statements that start a block (such as &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elif&lt;/code&gt; etc.) may end with a colon:</source>
          <target state="translated">line语句前缀可以出现在该行的任何位置，只要前面没有文本即可。为了提高可读性，以块开头的语句（例如 &lt;code&gt;for&lt;/code&gt; ， &lt;code&gt;if&lt;/code&gt; ， &lt;code&gt;elif&lt;/code&gt; 等）可以以冒号结尾：</target>
        </trans-unit>
        <trans-unit id="180ae1d5993d4f9246835f7d809bbd888fcd8bf8" translate="yes" xml:space="preserve">
          <source>The list below describes all nodes that are currently available. The AST may change between Jinja versions but will stay backwards compatible.</source>
          <target state="translated">下面的列表描述了当前可用的所有节点。AST可能会在不同的Jinja版本之间发生变化,但会保持向后兼容。</target>
        </trans-unit>
        <trans-unit id="4c5d3e1830ef26bd2cf14c3c785debdac55a9344" translate="yes" xml:space="preserve">
          <source>The list of names may contain tuples if aliases are wanted.</source>
          <target state="translated">如果想要使用别名,名字列表可能包含元组。</target>
        </trans-unit>
        <trans-unit id="3d99b5c4b23df9db398cb8ee6d04a6bc3d5a493b" translate="yes" xml:space="preserve">
          <source>The load name for the template as unicode string.</source>
          <target state="translated">模板的加载名称为unicode字符串。</target>
        </trans-unit>
        <trans-unit id="e1902cd017a5283e81d1b3c21bb76123afbb4b93" translate="yes" xml:space="preserve">
          <source>The load name of the template owning this context.</source>
          <target state="translated">拥有此上下文的模板的加载名称。</target>
        </trans-unit>
        <trans-unit id="50d706829883b365e1f3c78f6c40ed0c82f2c83d" translate="yes" xml:space="preserve">
          <source>The load name of the template.</source>
          <target state="translated">模板的加载名称。</target>
        </trans-unit>
        <trans-unit id="b1ffd4cabf52909285ff93e4d21db2b7cabb22eb" translate="yes" xml:space="preserve">
          <source>The loader takes the path to the templates as string, or if multiple locations are wanted a list of them which is then looked up in the given order:</source>
          <target state="translated">Loader将模板的路径作为字符串,如果需要多个位置,则需要一个模板列表,然后按照给定的顺序进行查找。</target>
        </trans-unit>
        <trans-unit id="b180170f1bf3e7004841c1694c4e54f78a5b9a68" translate="yes" xml:space="preserve">
          <source>The loading name of the template. If the template was loaded from a string this is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">模板的加载名称。如果模板是从字符串加载的，则为 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0cfd896bf0217417efeee07bd8af76989a8ae6fd" translate="yes" xml:space="preserve">
          <source>The low level API exposes functionality that can be useful to understand some implementation details, debugging purposes or advanced &lt;a href=&quot;../extensions/index#jinja-extensions&quot;&gt;extension&lt;/a&gt; techniques. Unless you know exactly what you are doing we don&amp;rsquo;t recommend using any of those.</source>
          <target state="translated">低级API公开了有助于理解某些实现细节，调试目的或高级&lt;a href=&quot;../extensions/index#jinja-extensions&quot;&gt;扩展&lt;/a&gt;技术的功能。除非您确切地知道自己在做什么，否则我们不建议您使用其中任何一种。</target>
        </trans-unit>
        <trans-unit id="57a60d3aded6b846b7cee51df2f64de9442ca56b" translate="yes" xml:space="preserve">
          <source>The low-level API is fragile. Future Jinja versions will try not to change it in a backwards incompatible way but modifications in the Jinja core may shine through. For example if Jinja introduces a new AST node in later versions that may be returned by &lt;a href=&quot;#jinja2.Environment.parse&quot;&gt;&lt;code&gt;parse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">低级API很脆弱。未来的Jinja版本将尝试不以向后不兼容的方式对其进行更改，但是Jinja核心中的修改可能会通过。例如，如果Jinja在更高版本中引入了新的AST节点，则可能由&lt;a href=&quot;#jinja2.Environment.parse&quot;&gt; &lt;code&gt;parse()&lt;/code&gt; &lt;/a&gt;返回。</target>
        </trans-unit>
        <trans-unit id="f82f42c3f34314cc429c18c317cbec01e1877920" translate="yes" xml:space="preserve">
          <source>The macro can then be called like a function in the namespace:</source>
          <target state="translated">然后,宏可以像命名空间中的函数一样被调用。</target>
        </trans-unit>
        <trans-unit id="a90b8a2b7938d2f3e95bcc2b1bb371bcfa924807" translate="yes" xml:space="preserve">
          <source>The main purpose of this is to allow carrying a value from within a loop body to an outer scope. Initial values can be provided as a dict, as keyword arguments, or both (same behavior as Python&amp;rsquo;s &lt;code&gt;dict&lt;/code&gt; constructor):</source>
          <target state="translated">其主要目的是允许将值从循环体内携带到外部作用域。初始值可以作为dict，作为关键字参数或两者（与Python的 &lt;code&gt;dict&lt;/code&gt; 构造函数相同的行为）提供：</target>
        </trans-unit>
        <trans-unit id="407ac5e6f92597fb2b9d940d8d1364f8102eaf7a" translate="yes" xml:space="preserve">
          <source>The meta API returns some information about abstract syntax trees that could help applications to implement more advanced template concepts. All the functions of the meta API operate on an abstract syntax tree as returned by the &lt;a href=&quot;#jinja2.Environment.parse&quot;&gt;&lt;code&gt;Environment.parse()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">元API返回有关抽象语法树的一些信息，这些信息可以帮助应用程序实现更高级的模板概念。meta API的所有功能都在由&lt;a href=&quot;#jinja2.Environment.parse&quot;&gt; &lt;code&gt;Environment.parse()&lt;/code&gt; &lt;/a&gt;方法返回的抽象语法树上运行。</target>
        </trans-unit>
        <trans-unit id="8df74a91d97a92e95e6edb7f2ec5561d50b3c81d" translate="yes" xml:space="preserve">
          <source>The minimal interface for the client passed to the constructor is this:</source>
          <target state="translated">传递给构造函数的客户端的最小接口是这样的。</target>
        </trans-unit>
        <trans-unit id="665041183d686868a8d094b96aa750333e0dd03e" translate="yes" xml:space="preserve">
          <source>The most basic way to create a template and render it is through &lt;a href=&quot;../api/index#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt;. This however is not the recommended way to work with it if your templates are not loaded from strings but the file system or another data source:</source>
          <target state="translated">创建模板和呈现模板的最基本方法是通过&lt;a href=&quot;../api/index#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;。但是，如果不是从字符串而是从文件系统或其他数据源加载模板，则不建议使用此方法：</target>
        </trans-unit>
        <trans-unit id="6e39220a8bf86c15cedfa80cc4294e7bf97ec2cf" translate="yes" xml:space="preserve">
          <source>The most common way to create an undefined object is by providing a name only:</source>
          <target state="translated">创建未定义对象的最常见方法是只提供一个名称。</target>
        </trans-unit>
        <trans-unit id="9831b642b4a7dbda4200272804a99e23253a74b8" translate="yes" xml:space="preserve">
          <source>The most powerful part of Jinja is template inheritance. Template inheritance allows you to build a base &amp;ldquo;skeleton&amp;rdquo; template that contains all the common elements of your site and defines &lt;strong&gt;blocks&lt;/strong&gt; that child templates can override.</source>
          <target state="translated">Jinja最强大的部分是模板继承。模板继承使您可以构建基本的&amp;ldquo;骨架&amp;rdquo;模板，该模板包含站点的所有常见元素，并定义子模板可以覆盖的&lt;strong&gt;块&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="7885a72ddc63602ef6fc68bec1a7c227153eb9af" translate="yes" xml:space="preserve">
          <source>The name for the undefined variable / attribute or just &lt;code&gt;None&lt;/code&gt; if no such information exists.</source>
          <target state="translated">未定义变量/属性的名称；如果不存在此类信息，则仅命名为 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0581a6ac4bbdb5f0b57512ae9be4a6afd373d90" translate="yes" xml:space="preserve">
          <source>The name of the macro. &lt;code&gt;{{ input.name }}&lt;/code&gt; will print &lt;code&gt;input&lt;/code&gt;.</source>
          <target state="translated">宏的名称。 &lt;code&gt;{{ input.name }}&lt;/code&gt; 将打印 &lt;code&gt;input&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5dba4add6c1d37baabe1ef27d0031f139f4d5aa6" translate="yes" xml:space="preserve">
          <source>The number of items in the sequence.</source>
          <target state="translated">顺序中的项目数。</target>
        </trans-unit>
        <trans-unit id="f55c0141f00d125146e625b42450cdd91a9bd7e1" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (0 indexed)</source>
          <target state="translated">循环结束后的迭代次数(0为索引)。</target>
        </trans-unit>
        <trans-unit id="e4908293726276d229be0d3d16697517841de110" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (1 indexed)</source>
          <target state="translated">循环结束后的迭代次数(1次为索引)</target>
        </trans-unit>
        <trans-unit id="92834281653e0e4d33cd0571d8a3404a0fbd7790" translate="yes" xml:space="preserve">
          <source>The other arguments to the constructor are the prefix for all keys that is added before the actual cache key and the timeout for the bytecode in the cache system. We recommend a high (or no) timeout.</source>
          <target state="translated">构造函数的其他参数是所有键的前缀,在实际的缓存键之前添加,以及缓存系统中字节码的超时。我们建议使用高(或无)超时。</target>
        </trans-unit>
        <trans-unit id="c14045f4a995136c1bd158fb3699af53cb3e2290" translate="yes" xml:space="preserve">
          <source>The parser passed to &lt;a href=&quot;#jinja2.ext.Extension.parse&quot;&gt;&lt;code&gt;Extension.parse()&lt;/code&gt;&lt;/a&gt; provides ways to parse expressions of different types. The following methods may be used by extensions:</source>
          <target state="translated">传递给&lt;a href=&quot;#jinja2.ext.Extension.parse&quot;&gt; &lt;code&gt;Extension.parse()&lt;/code&gt; &lt;/a&gt;的解析器提供了解析不同类型的表达式的方法。扩展可以使用以下方法：</target>
        </trans-unit>
        <trans-unit id="f07a61c40321818a24ba88f508214e9fd567785e" translate="yes" xml:space="preserve">
          <source>The pattern can be used to have multiple separate caches operate on the same directory. The default pattern is &lt;code&gt;'__jinja2_%s.cache'&lt;/code&gt;. &lt;code&gt;%s&lt;/code&gt; is replaced with the cache key.</source>
          <target state="translated">该模式可用于使多个单独的缓存在同一目录上运行。默认模式是 &lt;code&gt;'__jinja2_%s.cache'&lt;/code&gt; 。 &lt;code&gt;%s&lt;/code&gt; 被替换为缓存键。</target>
        </trans-unit>
        <trans-unit id="cc184aa07016e0d5e3f62c0844e4771037a1f680" translate="yes" xml:space="preserve">
          <source>The reason why the filename and error message are bytestrings and not unicode strings is that Python 2.x is not using unicode for exceptions and tracebacks as well as the compiler. This will change with Python 3.</source>
          <target state="translated">为什么文件名和错误信息是 bytestrings 而不是 unicode 字符串,原因是 Python 2.x 没有像编译器那样使用 unicode 来处理异常和回溯。这种情况在 Python 3 中会有所改变。</target>
        </trans-unit>
        <trans-unit id="7ee10eb402fd1a487a78dbae621de92a36747d1d" translate="yes" xml:space="preserve">
          <source>The return value is a &lt;a href=&quot;#jinja2.Markup&quot;&gt;&lt;code&gt;Markup&lt;/code&gt;&lt;/a&gt; string.</source>
          <target state="translated">返回值是&lt;a href=&quot;#jinja2.Markup&quot;&gt; &lt;code&gt;Markup&lt;/code&gt; &lt;/a&gt;字符串。</target>
        </trans-unit>
        <trans-unit id="9e7d4499fd9d04eaadce2fbaf12399ec553d8eb4" translate="yes" xml:space="preserve">
          <source>The sandboxed environment will call this method to check if the attribute of an object is safe to access. Per default all attributes starting with an underscore are considered private as well as the special attributes of internal python objects as returned by the &lt;a href=&quot;#jinja2.sandbox.is_internal_attribute&quot;&gt;&lt;code&gt;is_internal_attribute()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">沙盒环境将调用此方法以检查对象的属性是否可以安全访问。默认情况下，所有以下划线开头的属性以及&lt;a href=&quot;#jinja2.sandbox.is_internal_attribute&quot;&gt; &lt;code&gt;is_internal_attribute()&lt;/code&gt; &lt;/a&gt;函数返回的内部python对象的特殊属性都被视为私有属性。</target>
        </trans-unit>
        <trans-unit id="d08f3b36c3b490a65b599a971a8f721af153b2ff" translate="yes" xml:space="preserve">
          <source>The sandboxed environment. It works like the regular environment but tells the compiler to generate sandboxed code. Additionally subclasses of this environment may override the methods that tell the runtime what attributes or functions are safe to access.</source>
          <target state="translated">沙盒环境。它的工作原理和普通环境一样,但告诉编译器生成沙盒代码。此外,这个环境的子类可以覆盖告诉运行时哪些属性或函数可以安全访问的方法。</target>
        </trans-unit>
        <trans-unit id="f963363c7042504696b96f85aee3431edbf07352" translate="yes" xml:space="preserve">
          <source>The sequence that starts a newline. Must be one of &lt;code&gt;'\r'&lt;/code&gt;, &lt;code&gt;'\n'&lt;/code&gt; or &lt;code&gt;'\r\n'&lt;/code&gt;. The default is &lt;code&gt;'\n'&lt;/code&gt; which is a useful default for Linux and OS X systems as well as web applications.</source>
          <target state="translated">开始换行的序列。必须是 &lt;code&gt;'\r'&lt;/code&gt; ， &lt;code&gt;'\n'&lt;/code&gt; 或 &lt;code&gt;'\r\n'&lt;/code&gt; 。默认值为 &lt;code&gt;'\n'&lt;/code&gt; ，这对于Linux和OS X系统以及Web应用程序是有用的默认值。</target>
        </trans-unit>
        <trans-unit id="dbbd9d5c8646413ff7426560b628d4485921a365" translate="yes" xml:space="preserve">
          <source>The simplest form of expressions are literals. Literals are representations for Python objects such as strings and numbers. The following literals exist:</source>
          <target state="translated">表达式最简单的形式是字符。字符是Python对象(如字符串和数字)的表示方法。下面是存在的字元。</target>
        </trans-unit>
        <trans-unit id="9f6739707afdb3f8613d5044726cb8d4fe4a0315" translate="yes" xml:space="preserve">
          <source>The simplest way to configure Jinja to load templates for your application looks roughly like this:</source>
          <target state="translated">配置Jinja为你的应用程序加载模板的最简单方法大致如下。</target>
        </trans-unit>
        <trans-unit id="b8d9f4322900a04b226e4549309e33cdcb24024a" translate="yes" xml:space="preserve">
          <source>The size of the cache. Per default this is &lt;code&gt;400&lt;/code&gt; which means that if more than 400 templates are loaded the loader will clean out the least recently used template. If the cache size is set to &lt;code&gt;0&lt;/code&gt; templates are recompiled all the time, if the cache size is &lt;code&gt;-1&lt;/code&gt; the cache will not be cleaned.</source>
          <target state="translated">缓存的大小。默认情况下为 &lt;code&gt;400&lt;/code&gt; ，这意味着如果加载了400个以上的模板，则加载程序将清除最近最少使用的模板。如果将高速缓存大小设置为 &lt;code&gt;0&lt;/code&gt; ，则始终会重新编译模板，如果高速缓存大小为 &lt;code&gt;-1&lt;/code&gt; ，则将不清除高速缓存。</target>
        </trans-unit>
        <trans-unit id="529529f48be9769aa67b2cffb88abfb244515ecd" translate="yes" xml:space="preserve">
          <source>The sort is stable, it does not change the relative order of elements that compare equal. This makes it is possible to chain sorts on different attributes and ordering.</source>
          <target state="translated">排序是稳定的,它不会改变比较相等的元素的相对顺序。这使得在不同属性和排序上的链式排序成为可能。</target>
        </trans-unit>
        <trans-unit id="eccdc8d8f013c336da1d7096bae2725f9bf8c315" translate="yes" xml:space="preserve">
          <source>The source part of the returned tuple must be the source of the template as unicode string or a ASCII bytestring. The filename should be the name of the file on the filesystem if it was loaded from there, otherwise &lt;code&gt;None&lt;/code&gt;. The filename is used by python for the tracebacks if no loader extension is used.</source>
          <target state="translated">返回的元组的源部分必须是模板的源，为unicode字符串或ASCII字节字符串。如果文件名是从那里加载的，则文件名应该是文件系统上文件的名称，否则为 &lt;code&gt;None&lt;/code&gt; 。如果未使用加载程序扩展名，则python将文件名用于回溯。</target>
        </trans-unit>
        <trans-unit id="d7328e35a73ac9ab9fab0d1a148382c4f40db07a" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;loop&lt;/code&gt; variable always points to the innermost loop. If it&amp;rsquo;s desired to have access to an outer loop it&amp;rsquo;s possible to alias it:</source>
          <target state="translated">特殊 &lt;code&gt;loop&lt;/code&gt; 变量始终指向最内部的循环。如果希望访问外部循环，则可以对其进行别名：</target>
        </trans-unit>
        <trans-unit id="a46dbe2d8a01880ea137c51f3610c61f14c54699" translate="yes" xml:space="preserve">
          <source>The special constants &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;none&lt;/code&gt; are indeed lowercase. Because that caused confusion in the past, (&lt;code&gt;True&lt;/code&gt; used to expand to an undefined variable that was considered false), all three can now also be written in title case (&lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, and &lt;code&gt;None&lt;/code&gt;). However, for consistency, (all Jinja identifiers are lowercase) you should use the lowercase versions.</source>
          <target state="translated">特殊常量 &lt;code&gt;true&lt;/code&gt; ， &lt;code&gt;false&lt;/code&gt; 和 &lt;code&gt;none&lt;/code&gt; 都不是小写。因为这在过去引起了混乱（ &lt;code&gt;True&lt;/code&gt; 曾经扩展为一个未定义的变量，被认为是false），所以现在这三个都可以用标题大小写（ &lt;code&gt;True&lt;/code&gt; ， &lt;code&gt;False&lt;/code&gt; 和 &lt;code&gt;None&lt;/code&gt; ）。但是，为了保持一致（所有Jinja标识符均为小写），应使用小写版本。</target>
        </trans-unit>
        <trans-unit id="fbd366d4dbb4024e926d2257b403ea35473851ac" translate="yes" xml:space="preserve">
          <source>The string marking the beginning of a block. Defaults to &lt;code&gt;'{%'&lt;/code&gt;.</source>
          <target state="translated">标记块开始的字符串。默认为 &lt;code&gt;'{%'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01c8eff9c76895d2e1b4b1bfcc38a2a4583cd18c" translate="yes" xml:space="preserve">
          <source>The string marking the beginning of a comment. Defaults to &lt;code&gt;'{#'&lt;/code&gt;.</source>
          <target state="translated">标记注释开始的字符串。默认为 &lt;code&gt;'{#'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="90b1e1ecb6b5f1297824f0bbedc1de546169dc0f" translate="yes" xml:space="preserve">
          <source>The string marking the beginning of a print statement. Defaults to &lt;code&gt;'{{'&lt;/code&gt;.</source>
          <target state="translated">标记打印语句开始的字符串。默认为 &lt;code&gt;'{{'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="25911b7fbb10f94888af47337b08d3d4e9d96735" translate="yes" xml:space="preserve">
          <source>The string marking the end of a block. Defaults to &lt;code&gt;'%}'&lt;/code&gt;.</source>
          <target state="translated">标记块结尾的字符串。默认为 &lt;code&gt;'%}'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="638c8eba2b2f44d758a664e8e72d45a13ae48679" translate="yes" xml:space="preserve">
          <source>The string marking the end of a comment. Defaults to &lt;code&gt;'#}'&lt;/code&gt;.</source>
          <target state="translated">标记注释结束的字符串。默认为 &lt;code&gt;'#}'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0c14339264c02b05d63f096425a5baa94c0e6dd" translate="yes" xml:space="preserve">
          <source>The string marking the end of a print statement. Defaults to &lt;code&gt;'}}'&lt;/code&gt;.</source>
          <target state="translated">标记打印语句结束的字符串。默认为 &lt;code&gt;'}}'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eecbc0f779504a93af62d2933b66dfada3c7c974" translate="yes" xml:space="preserve">
          <source>The template as module. This is used for imports in the template runtime but is also useful if one wants to access exported template variables from the Python layer:</source>
          <target state="translated">模板作为模块。这用于模板运行时的导入,但如果想从Python层访问导出的模板变量,这也很有用。</target>
        </trans-unit>
        <trans-unit id="998b85d9880721065aaed6cb1627a7ea920bf37d" translate="yes" xml:space="preserve">
          <source>The template context holds the variables of a template. It stores the values passed to the template and also the names the template exports. Creating instances is neither supported nor useful as it&amp;rsquo;s created automatically at various stages of the template evaluation and should not be created by hand.</source>
          <target state="translated">模板上下文包含模板的变量。它存储传递给模板的值以及模板导出的名称。创建实例既不受支持也不有用，因为它是在模板评估的各个阶段自动创建的，因此不应手动创建。</target>
        </trans-unit>
        <trans-unit id="e4fe80bc97502c503aaf30f09cf825ea351e0fe7" translate="yes" xml:space="preserve">
          <source>The template context supports read only dict operations (&lt;code&gt;get&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, &lt;code&gt;values&lt;/code&gt;, &lt;code&gt;items&lt;/code&gt;, &lt;code&gt;iterkeys&lt;/code&gt;, &lt;code&gt;itervalues&lt;/code&gt;, &lt;code&gt;iteritems&lt;/code&gt;, &lt;code&gt;__getitem__&lt;/code&gt;, &lt;code&gt;__contains__&lt;/code&gt;). Additionally there is a &lt;a href=&quot;#jinja2.runtime.Context.resolve&quot;&gt;&lt;code&gt;resolve()&lt;/code&gt;&lt;/a&gt; method that doesn&amp;rsquo;t fail with a &lt;code&gt;KeyError&lt;/code&gt; but returns an &lt;code&gt;Undefined&lt;/code&gt; object for missing variables.</source>
          <target state="translated">模板背景支持只读字典操作（ &lt;code&gt;get&lt;/code&gt; ， &lt;code&gt;keys&lt;/code&gt; ， &lt;code&gt;values&lt;/code&gt; ， &lt;code&gt;items&lt;/code&gt; ， &lt;code&gt;iterkeys&lt;/code&gt; ， &lt;code&gt;itervalues&lt;/code&gt; ， &lt;code&gt;iteritems&lt;/code&gt; ， &lt;code&gt;__getitem__&lt;/code&gt; ， &lt;code&gt;__contains__&lt;/code&gt; ）。此外，还有一个&lt;a href=&quot;#jinja2.runtime.Context.resolve&quot;&gt; &lt;code&gt;resolve()&lt;/code&gt; &lt;/a&gt;方法，该方法不会因 &lt;code&gt;KeyError&lt;/code&gt; 失败而返回缺少变量的 &lt;code&gt;Undefined&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="aa61c05c217865f09180878c512fb748ed60e7be" translate="yes" xml:space="preserve">
          <source>The template loader for this environment.</source>
          <target state="translated">这个环境的模板加载器。</target>
        </trans-unit>
        <trans-unit id="9c5f63a40af486b2c2eb7dde0c568811ebf8e9e5" translate="yes" xml:space="preserve">
          <source>The template local variables. This list contains environment and context functions from the &lt;a href=&quot;#jinja2.runtime.Context.parent&quot;&gt;&lt;code&gt;parent&lt;/code&gt;&lt;/a&gt; scope as well as local modifications and exported variables from the template. The template will modify this dict during template evaluation but filters and context functions are not allowed to modify it.</source>
          <target state="translated">模板局部变量。该列表包含来自&lt;a href=&quot;#jinja2.runtime.Context.parent&quot;&gt; &lt;code&gt;parent&lt;/code&gt; &lt;/a&gt;作用域的环境和上下文函数，以及来自模板的本地修改和导出的变量。模板将在模板评估期间修改此字典，但不允许过滤器和上下文函数对其进行修改。</target>
        </trans-unit>
        <trans-unit id="21e5274374c5d00e5bd243f78c09ea18fc1d36b9" translate="yes" xml:space="preserve">
          <source>The template, with the &lt;code&gt;|safe&lt;/code&gt; filter.</source>
          <target state="translated">&lt;code&gt;|safe&lt;/code&gt; 带有安全过滤器的模板。</target>
        </trans-unit>
        <trans-unit id="ea3c9addf372d52925e1771de634eb4d28bd9674" translate="yes" xml:space="preserve">
          <source>The translated string is marked safe, formatting performs escaping as needed. Mark a parameter as &lt;code&gt;|safe&lt;/code&gt; if it has already been escaped.</source>
          <target state="translated">转换后的字符串被标记为安全，格式化会根据需要进行转义。如果参数已经被转义，则将其标记为 &lt;code&gt;|safe&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48f17d5cf6cd6a2e52d403eaff15c48644f0b2e0" translate="yes" xml:space="preserve">
          <source>The type of the token. This string is interned so you may compare it with arbitrary strings using the &lt;code&gt;is&lt;/code&gt; operator.</source>
          <target state="translated">令牌的类型。该字符串是固定的，因此您可以使用 &lt;code&gt;is&lt;/code&gt; 运算符将其与任意字符串进行比较。</target>
        </trans-unit>
        <trans-unit id="7413c111e141c4a809d08587b346bbe115d7cdec" translate="yes" xml:space="preserve">
          <source>The unique cache key for this bucket</source>
          <target state="translated">这个桶的唯一缓存密钥</target>
        </trans-unit>
        <trans-unit id="6f0d7c30972daa0fcc1036b7e4c10a8f6c56a7ed" translate="yes" xml:space="preserve">
          <source>The unique items are yielded in the same order as their first occurrence in the iterable passed to the filter.</source>
          <target state="translated">独一无二的项目按照它们在传递给过滤器的迭代表中首次出现的顺序产生。</target>
        </trans-unit>
        <trans-unit id="812f1c3fc58d1d2bebe1e7827a70deaee3500b45" translate="yes" xml:space="preserve">
          <source>The usage of the &lt;code&gt;i18n&lt;/code&gt; extension for template designers is covered in &lt;a href=&quot;../templates/index#i18n-in-templates&quot;&gt;the template documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../templates/index#i18n-in-templates&quot;&gt;模板文档中&lt;/a&gt;介绍了 &lt;code&gt;i18n&lt;/code&gt; 扩展模板设计器的用法。</target>
        </trans-unit>
        <trans-unit id="470013680eab2539519396a4d684f0c0d7e7a989" translate="yes" xml:space="preserve">
          <source>The value of the token.</source>
          <target state="translated">代币的价值。</target>
        </trans-unit>
        <trans-unit id="2e5a060a6f6b09dac1ba8f3848e9f7b7ac751c88" translate="yes" xml:space="preserve">
          <source>The with statement makes it possible to create a new inner scope. Variables set within this scope are not visible outside of the scope.</source>
          <target state="translated">通过with语句,可以创建一个新的内部作用域。在这个作用域内设置的变量在作用域外是不可见的。</target>
        </trans-unit>
        <trans-unit id="7baac4b7fafe4459d0a6e525c964491ab64bf899" translate="yes" xml:space="preserve">
          <source>There are a few kinds of delimiters. The default Jinja delimiters are configured as follows:</source>
          <target state="translated">有几种定界符。默认的Jinja定界符配置如下。</target>
        </trans-unit>
        <trans-unit id="e56a34b0b25cf99d4df535054184c4ee8ad69d3c" translate="yes" xml:space="preserve">
          <source>There are two ways to import templates. You can import a complete template into a variable or request specific macros / exported variables from it.</source>
          <target state="translated">导入模板有两种方式。您可以将一个完整的模板导入到一个变量中,或者从它那里请求特定的宏/导出的变量。</target>
        </trans-unit>
        <trans-unit id="2b81d3981681bea86eae7b06c10dce3f444d5e69" translate="yes" xml:space="preserve">
          <source>There is also a factory function that can decorate undefined objects to implement logging on failures:</source>
          <target state="translated">还有一个工厂函数,可以对未定义的对象进行装饰,实现对故障的记录。</target>
        </trans-unit>
        <trans-unit id="fcb0176dab191732e9f477caae5cd364ad02728c" translate="yes" xml:space="preserve">
          <source>There is also a utility function in the lexer module that can count newline characters in strings:</source>
          <target state="translated">在lexer模块中还有一个实用函数,可以计算字符串中的换行字符。</target>
        </trans-unit>
        <trans-unit id="05d6a7a66074891d37cce1824bec9bc68a671323" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no separate formatting step, you don&amp;rsquo;t have to remember to use the &lt;code&gt;|format&lt;/code&gt; filter.</source>
          <target state="translated">没有单独的格式化步骤，您不必记住使用 &lt;code&gt;|format&lt;/code&gt; 过滤器。</target>
        </trans-unit>
        <trans-unit id="f6c51ba0377fb1b95cbfdc16ffc8c86dfaf04726" translate="yes" xml:space="preserve">
          <source>These classes can be used as undefined types. The &lt;a href=&quot;#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt; constructor takes an &lt;code&gt;undefined&lt;/code&gt; parameter that can be one of those classes or a custom subclass of &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt;. Whenever the template engine is unable to look up a name or access an attribute one of those objects is created and returned. Some operations on undefined values are then allowed, others fail.</source>
          <target state="translated">这些类可用作未定义的类型。的&lt;a href=&quot;#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;构造函数采用 &lt;code&gt;undefined&lt;/code&gt; 参数，可以是这些类或自定义的子类中的一个&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;。每当模板引擎无法查找名称或访问属性时，就会创建并返回这些对象之一。然后允许对未定义的值执行某些操作，而其他操作则失败。</target>
        </trans-unit>
        <trans-unit id="c82675be15d70b7188f96b4330b46f46c4f85a6a" translate="yes" xml:space="preserve">
          <source>These helper functions and classes are useful if you add custom filters or functions to a Jinja environment.</source>
          <target state="translated">如果你在Jinja环境中添加了自定义过滤器或函数,这些帮助函数和类是很有用的。</target>
        </trans-unit>
        <trans-unit id="e04617c543fa11236abb5fd1341b43a459d6e0f8" translate="yes" xml:space="preserve">
          <source>This attribute is &lt;code&gt;False&lt;/code&gt; if there is a newer version of the template available, otherwise &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">如果有较新版本的模板，则此属性为 &lt;code&gt;False&lt;/code&gt; ，否则为 &lt;code&gt;True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b78921fee5e6b73896dcff37e3c3b92855160244" translate="yes" xml:space="preserve">
          <source>This attribute is not available if async mode is enabled.</source>
          <target state="translated">如果启用异步模式,此属性不可用。</target>
        </trans-unit>
        <trans-unit id="1819941a2eb6abaa0c89ccaec4d7f33ed104bbd0" translate="yes" xml:space="preserve">
          <source>This behavior can be changed explicitly: by adding &lt;code&gt;with context&lt;/code&gt; or &lt;code&gt;without context&lt;/code&gt; to the import/include directive, the current context can be passed to the template and caching is disabled automatically.</source>
          <target state="translated">可以显式更改此行为：通过在import / include指令中添加 &lt;code&gt;with context&lt;/code&gt; 或 &lt;code&gt;without context&lt;/code&gt; 添加上下文，可以将当前上下文传递到模板，并自动禁用缓存。</target>
        </trans-unit>
        <trans-unit id="0599847dbf5b734c0aaa467c5edcff99181d84b8" translate="yes" xml:space="preserve">
          <source>This boolean controls on Python 2 if Jinja should store ASCII only literals as bytestring instead of unicode strings. This used to be always enabled for Jinja versions below 2.9 and now can be changed. Traditionally it was done this way since some APIs in Python 2 failed badly for unicode strings (for instance the datetime strftime API). Now however sometimes the inverse is true (for instance str.format). If this is set to False then all strings are stored as unicode internally.</source>
          <target state="translated">在Python 2上,这个布尔值控制了Jinja是否应该将ASCII字符存储为bytestring而不是unicode字符串。过去,对于 2.9 以下的 Jinja 版本,这个布尔值总是启用的,现在可以更改。传统上是这样做的,因为Python 2中的一些API对unicode字符串的处理严重失败 (例如datetime strftime API)。然而现在有时反过来是真的 (例如 str.format)。如果将此设置为False,那么所有的字符串都会在内部存储为unicode。</target>
        </trans-unit>
        <trans-unit id="731679bfc0637f92db476af45b91b6d629fcccd8" translate="yes" xml:space="preserve">
          <source>This bytecode cache does not support clearing of used items in the cache. The clear method is a no-operation function.</source>
          <target state="translated">本字节码缓存不支持清除缓存中已使用的项目。清空方法为无操作功能。</target>
        </trans-unit>
        <trans-unit id="0836dc580d1bbe729d115b1bcd584f2f6cfb6fc9" translate="yes" xml:space="preserve">
          <source>This bytecode cache supports clearing of the cache using the clear method.</source>
          <target state="translated">该字节码缓存支持使用清除方法清除缓存。</target>
        </trans-unit>
        <trans-unit id="51f9ec3acf0152fd0197e852b263fc253d309739" translate="yes" xml:space="preserve">
          <source>This class implements a bytecode cache that uses a memcache cache for storing the information. It does not enforce a specific memcache library (tummy&amp;rsquo;s memcache or cmemcache) but will accept any class that provides the minimal interface required.</source>
          <target state="translated">此类实现字节码缓存，该字节码缓存使用内存缓存来存储信息。它不强制执行特定的Memcache库（肚子的memcache或cmemcache），但可以接受任何提供所需最小接口的类。</target>
        </trans-unit>
        <trans-unit id="89642115e385f7f0efd7cde7a324b444fa1a012e" translate="yes" xml:space="preserve">
          <source>This decorator can be used to mark a function or method as an eval context callable. This is similar to the &lt;a href=&quot;#jinja2.contextfunction&quot;&gt;&lt;code&gt;contextfunction()&lt;/code&gt;&lt;/a&gt; but instead of passing the context, an evaluation context object is passed. For more information about the eval context, see &lt;a href=&quot;#eval-context&quot;&gt;Evaluation Context&lt;/a&gt;.</source>
          <target state="translated">此修饰符可用于将函数或方法标记为可调用的eval上下文。这类似于&lt;a href=&quot;#jinja2.contextfunction&quot;&gt; &lt;code&gt;contextfunction()&lt;/code&gt; ,&lt;/a&gt;但不传递上下文，而是传递评估上下文对象。有关评估上下文的更多信息，请参见&lt;a href=&quot;#eval-context&quot;&gt;评估上下文&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e441114eaa419315db3b1deee6b970ea4f3c6ec4" translate="yes" xml:space="preserve">
          <source>This decorator can be used to mark a function or method as environment callable. This decorator works exactly like the &lt;a href=&quot;#jinja2.contextfunction&quot;&gt;&lt;code&gt;contextfunction()&lt;/code&gt;&lt;/a&gt; decorator just that the first argument is the active &lt;a href=&quot;#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt; and not context.</source>
          <target state="translated">该装饰器可用于将函数或方法标记为可环境调用。该装饰器的工作方式与&lt;a href=&quot;#jinja2.contextfunction&quot;&gt; &lt;code&gt;contextfunction()&lt;/code&gt; &lt;/a&gt;装饰器完全相同，只是第一个参数是活动的&lt;a href=&quot;#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;而不是上下文。</target>
        </trans-unit>
        <trans-unit id="6795f0dc47472d91e26f6f7715728eea53580528" translate="yes" xml:space="preserve">
          <source>This decorator can be used to mark a function or method context callable. A context callable is passed the active &lt;code&gt;Context&lt;/code&gt; as first argument when called from the template. This is useful if a function wants to get access to the context or functions provided on the context object. For example a function that returns a sorted list of template variables the current template exports could look like this:</source>
          <target state="translated">该装饰器可用于标记可调用的函数或方法上下文。从模板中调用时，可调用 &lt;code&gt;Context&lt;/code&gt; 作为第一个参数传递给活动Context。如果函数要访问上下文或上下文对象上提供的函数，则此功能很有用。例如，一个返回模板变量排序列表的函数，当前模板导出可能如下所示：</target>
        </trans-unit>
        <trans-unit id="650610dc55f3dca0d6dda48f21d0db3f39c68fe4" translate="yes" xml:space="preserve">
          <source>This document describes the API to Jinja and not the template language (for that, see &lt;a href=&quot;../templates/index&quot;&gt;Template Designer Documentation&lt;/a&gt;). It will be most useful as reference to those implementing the template interface to the application and not those who are creating Jinja templates.</source>
          <target state="translated">本文档描述了Jinja的API，而不是模板语言（有关此信息，请参见&lt;a href=&quot;../templates/index&quot;&gt;模板设计器文档&lt;/a&gt;）。对于那些实现与应用程序的模板接口的人，而不是正在创建Jinja模板的人，这将是最有用的参考。</target>
        </trans-unit>
        <trans-unit id="c6771d7599fbdc7a52c7155b28e08eba890fc6c6" translate="yes" xml:space="preserve">
          <source>This document describes the syntax and semantics of the template engine and will be most useful as reference to those creating Jinja templates. As the template engine is very flexible, the configuration from the application can be slightly different from the code presented here in terms of delimiters and behavior of undefined values.</source>
          <target state="translated">本文档描述了模板引擎的语法和语义,对于创建Jinja模板的人来说是最有用的参考。由于模板引擎非常灵活,在定界符和未定义值的行为方面,应用程序的配置可能与这里介绍的代码略有不同。</target>
        </trans-unit>
        <trans-unit id="3603c9e62f0f737eea5419fd316e9a0e79d495a7" translate="yes" xml:space="preserve">
          <source>This does not perform preprocessing. If you want the preprocessing of the extensions to be applied you have to filter source through the &lt;a href=&quot;#jinja2.Environment.preprocess&quot;&gt;&lt;code&gt;preprocess()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">这不执行预处理。如果要对扩展程序进行预处理，则必须通过&lt;a href=&quot;#jinja2.Environment.preprocess&quot;&gt; &lt;code&gt;preprocess()&lt;/code&gt; &lt;/a&gt;方法过滤源。</target>
        </trans-unit>
        <trans-unit id="631f812855101f305cdc896a51dc345c43b177fa" translate="yes" xml:space="preserve">
          <source>This example shows how the power (&lt;code&gt;**&lt;/code&gt;) operator can be disabled in Jinja:</source>
          <target state="translated">此示例显示了如何在Jinja中禁用power（ &lt;code&gt;**&lt;/code&gt; ）运算符：</target>
        </trans-unit>
        <trans-unit id="fc0c25b783f9ef030b88b602341c6db5861aa6fb" translate="yes" xml:space="preserve">
          <source>This example would output empty &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; items because &lt;code&gt;item&lt;/code&gt; is unavailable inside the block. The reason for this is that if the block is replaced by a child template, a variable would appear that was not defined in the block or passed to the context.</source>
          <target state="translated">此示例将输出空的 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 项目，因为该 &lt;code&gt;item&lt;/code&gt; 在块内不可用。这样做的原因是，如果将块替换为子模板，则会出现未在块中定义或传递给上下文的变量。</target>
        </trans-unit>
        <trans-unit id="90bae254e5003a436b697654b716c8e87bcc2818" translate="yes" xml:space="preserve">
          <source>This extension adds support for &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; in loops. After enabling, Jinja provides those two keywords which work exactly like in Python.</source>
          <target state="translated">此扩展增加了对 &lt;code&gt;break&lt;/code&gt; 和循环 &lt;code&gt;continue&lt;/code&gt; 支持。启用后，Jinja提供了这两个关键字，它们在Python中的作用完全相同。</target>
        </trans-unit>
        <trans-unit id="9efee99147b121c21d84566f896236dac80de684" translate="yes" xml:space="preserve">
          <source>This function checks if an attribute on a builtin mutable object (list, dict, set or deque) would modify it if called. It also supports the &amp;ldquo;user&amp;rdquo;-versions of the objects (&lt;code&gt;sets.Set&lt;/code&gt;, &lt;code&gt;UserDict.*&lt;/code&gt; etc.) and with Python 2.6 onwards the abstract base classes &lt;code&gt;MutableSet&lt;/code&gt;, &lt;code&gt;MutableMapping&lt;/code&gt;, and &lt;code&gt;MutableSequence&lt;/code&gt;.</source>
          <target state="translated">此函数检查内置可变对象（列表，字典，集合或双端队列）上的属性是否会在被调用时对其进行修改。它还支持对象的&amp;ldquo;用户&amp;rdquo;版本（ &lt;code&gt;sets.Set&lt;/code&gt; ， &lt;code&gt;UserDict.*&lt;/code&gt; 等），并且从Python 2.6起支持抽象基类 &lt;code&gt;MutableSet&lt;/code&gt; ， &lt;code&gt;MutableMapping&lt;/code&gt; 和 &lt;code&gt;MutableSequence&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b70359ddbdc6abae1457a0a521170bb940bf9765" translate="yes" xml:space="preserve">
          <source>This function is useful for dependency tracking. For example if you want to rebuild parts of the website after a layout template has changed.</source>
          <target state="translated">这个功能对依赖性跟踪很有用。例如,如果你想在布局模板改变后重建网站的部分内容。</target>
        </trans-unit>
        <trans-unit id="7117c6a3dcd2866f4c938cbc4ba178ac19db3a23" translate="yes" xml:space="preserve">
          <source>This implements the &lt;code&gt;__html__()&lt;/code&gt; interface that some frameworks use. Passing an object that implements &lt;code&gt;__html__()&lt;/code&gt; will wrap the output of that method, marking it safe.</source>
          <target state="translated">这实现了某些框架使用的 &lt;code&gt;__html__()&lt;/code&gt; 接口。传递实现 &lt;code&gt;__html__()&lt;/code&gt; 的对象将包装该方法的输出，并将其标记为安全。</target>
        </trans-unit>
        <trans-unit id="0e554166d849c5a2a308ea299e70d33f0fb4a2a4" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;true&lt;/code&gt; if the macro accepts extra keyword arguments (i.e.: accesses the special &lt;code&gt;kwargs&lt;/code&gt; variable).</source>
          <target state="translated">如果宏接受额外的关键字参数（即：访问特殊的 &lt;code&gt;kwargs&lt;/code&gt; 变量），则为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a8dd89e043f8ffe9ba1759a3a12eddc39e77f51a" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;true&lt;/code&gt; if the macro accepts extra positional arguments (i.e.: accesses the special &lt;code&gt;varargs&lt;/code&gt; variable).</source>
          <target state="translated">如果宏接受额外的位置参数（即：访问特殊的 &lt;code&gt;varargs&lt;/code&gt; 变量），则为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d47f4329656199ba7d288c371b05909e64af9c30" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;true&lt;/code&gt; if the macro accesses the special &lt;code&gt;caller&lt;/code&gt; variable and may be called from a &lt;a href=&quot;#call&quot;&gt;call&lt;/a&gt; tag.</source>
          <target state="translated">如果宏访问特殊的 &lt;code&gt;caller&lt;/code&gt; 变量，并且可以从&lt;a href=&quot;#call&quot;&gt;调用&lt;/a&gt;标签中调用它，则为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d2893e07954b65e2f755bd7e378c7d1ebc3f5c1" translate="yes" xml:space="preserve">
          <source>This is a subclass of the text type (&lt;code&gt;str&lt;/code&gt; in Python 3, &lt;code&gt;unicode&lt;/code&gt; in Python 2). It has the same methods as that type, but all methods escape their arguments and return a &lt;code&gt;Markup&lt;/code&gt; instance.</source>
          <target state="translated">这是文本类型的子类（Python 3中为 &lt;code&gt;str&lt;/code&gt; ，Python 2中为 &lt;code&gt;unicode&lt;/code&gt; ）。它具有与该类型相同的方法，但是所有方法都转义其参数并返回 &lt;code&gt;Markup&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="97a5353e9e7cb585169e9a0f1dad1ae12b8cd2bc" translate="yes" xml:space="preserve">
          <source>This is basically equivalent to using the &lt;a href=&quot;../api/index#jinja2.contextfunction&quot;&gt;&lt;code&gt;contextfunction()&lt;/code&gt;&lt;/a&gt; decorator when using the high-level API, which causes a reference to the context to be passed as the first argument to a function.</source>
          <target state="translated">从根本&lt;a href=&quot;../api/index#jinja2.contextfunction&quot;&gt; &lt;code&gt;contextfunction()&lt;/code&gt; &lt;/a&gt;这等效于使用高级API时使用contextfunction（）装饰器，该装饰器会导致对上下文的引用作为函数的第一个参数传递。</target>
        </trans-unit>
        <trans-unit id="d53f9356509024595852e271ea875995802635f5" translate="yes" xml:space="preserve">
          <source>This is especially useful if you have a web application that is initialized on the first request and Jinja compiles many templates at once which slows down the application.</source>
          <target state="translated">如果你有一个在第一次请求时就被初始化的Web应用程序,而Jinja一次编译很多模板,这会拖慢应用程序的速度,那么这个功能就特别有用。</target>
        </trans-unit>
        <trans-unit id="68961ab0cd63f0047d4ff6fd9abf8d50e390d10d" translate="yes" xml:space="preserve">
          <source>This is important if an object has an item and attribute with the same name. Additionally, the &lt;a href=&quot;#attr&quot;&gt;&lt;code&gt;attr()&lt;/code&gt;&lt;/a&gt; filter only looks up attributes.</source>
          <target state="translated">如果对象具有相同名称的项目和属性，则这一点很重要。此外，&lt;a href=&quot;#attr&quot;&gt; &lt;code&gt;attr()&lt;/code&gt; &lt;/a&gt;过滤器仅查找属性。</target>
        </trans-unit>
        <trans-unit id="e0c44f0a06bd25d0af64a21bfe399cc49dfe032b" translate="yes" xml:space="preserve">
          <source>This is the central parsing class Jinja uses. It&amp;rsquo;s passed to extensions and can be used to parse expressions or statements.</source>
          <target state="translated">这是Jinja使用的中央解析类。它已传递给扩展，可用于解析表达式或语句。</target>
        </trans-unit>
        <trans-unit id="2d9979462d3261eccd6ba909b7649bf68bb3277f" translate="yes" xml:space="preserve">
          <source>This is the documentation for the Jinja general purpose templating language. Jinja is a library for Python that is designed to be flexible, fast and secure.</source>
          <target state="translated">这是Jinja通用模板语言的文档。Jinja是Python的一个库,它被设计为灵活、快速和安全。</target>
        </trans-unit>
        <trans-unit id="c90cad60f9758f90a3461797181a95ce557b2614" translate="yes" xml:space="preserve">
          <source>This is the low level render function. It&amp;rsquo;s passed a &lt;code&gt;Context&lt;/code&gt; that has to be created by &lt;a href=&quot;#jinja2.Template.new_context&quot;&gt;&lt;code&gt;new_context()&lt;/code&gt;&lt;/a&gt; of the same template or a compatible template. This render function is generated by the compiler from the template code and returns a generator that yields unicode strings.</source>
          <target state="translated">这是低级渲染功能。它传递了一个 &lt;code&gt;Context&lt;/code&gt; ，该上下文必须由相同模板或兼容模板的&lt;a href=&quot;#jinja2.Template.new_context&quot;&gt; &lt;code&gt;new_context()&lt;/code&gt; &lt;/a&gt;创建。该渲染函数由编译器从模板代码生成，并返回生成unicode字符串的生成器。</target>
        </trans-unit>
        <trans-unit id="49a42d5ad9f8e1458a05bb013cb81f0785e98616" translate="yes" xml:space="preserve">
          <source>This is useful if applications want to use the same rules as Jinja in template &amp;ldquo;configuration files&amp;rdquo; or similar situations.</source>
          <target state="translated">如果应用程序希望在模板&amp;ldquo;配置文件&amp;rdquo;中使用与Jinja相同的规则或类似情况，这将很有用。</target>
        </trans-unit>
        <trans-unit id="5888e5144f43803ef3107fe5376593a037885dc6" translate="yes" xml:space="preserve">
          <source>This is useful if you want to allow users to override builtin templates from a different location.</source>
          <target state="translated">如果你想让用户从不同的位置覆盖内置模板,这很有用。</target>
        </trans-unit>
        <trans-unit id="6881141df45d5d3f55f9019b83b11c3dbb6a2fbb" translate="yes" xml:space="preserve">
          <source>This is useful to repeat a template block multiple times, e.g. to fill a list. Imagine you have 7 users in the list but you want to render three empty items to enforce a height with CSS:</source>
          <target state="translated">这对于多次重复一个模板块很有用,例如填充一个列表。想象一下,你在列表中有7个用户,但你想渲染3个空项,以便用CSS强制执行一个高度。</target>
        </trans-unit>
        <trans-unit id="8c1817059bae1bdeaaeec43a297fd0eb0a01c555" translate="yes" xml:space="preserve">
          <source>This loader loads templates from precompiled templates.</source>
          <target state="translated">该加载器从预编译的模板中加载模板。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
